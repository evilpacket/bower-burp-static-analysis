{
    "url": "http://localhost:9999/opitzconsulting/jquery-mobile-angular-adapter/compiled/jquery-mobile-angular-adapter-standalone-1.2.0.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.href</b> and written to <b>location.href</b> via the following statement:<ul><li>location.href = location.href.replace( /#.*/, '' ) + history_hash;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/opitzconsulting/jquery-mobile-angular-adapter/compiled/jquery-mobile-angular-adapter-standalone-1.2.0.js",
                "path": "/opitzconsulting/jquery-mobile-angular-adapter/compiled/jquery-mobile-angular-adapter-standalone-1.2.0.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9vcGl0emNvbnN1bHRpbmcvanF1ZXJ5LW1vYmlsZS1hbmd1bGFyLWFkYXB0ZXIvY29tcGlsZWQvanF1ZXJ5LW1vYmlsZS1hbmd1bGFyLWFkYXB0ZXItc3RhbmRhbG9uZS0xLjIuMC5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTIwODA2OQ0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KRGF0ZTogRnJpLCAwNyBOb3YgMjAxNCAwNjo0NjowMSBHTVQNCkxhc3QtTW9kaWZpZWQ6IEZyaSwgMDcgTm92IDIwMTQgMDY6NDY6MDEgR01UDQoNCi8qKgoqIGpRdWVyeSBNb2JpbGUgYW5ndWxhckpTIGFkYXBlciBzdGFuZGFsb25lIHYxLjIuMAoqIGh0dHA6Ly9naXRodWIuY29tL3RpZ2Jyby9qcXVlcnktbW9iaWxlLWFuZ3VsYXItYWRhcHRlcgoqCiogQ29weXJpZ2h0IDIwMTEsIFRvYmlhcyBCb3NjaCAoT1BJVFogQ09OU1VMVElORyBHbWJIKQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KKgoqIEluY2x1ZGVzIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkKKiBodHRwOi8vanF1ZXJ5LmNvbS8KKgoqIENvcHlyaWdodCAyMDExLCBKb2huIFJlc2lnCiogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMuCiogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQoqCiogSW5jbHVkZXMgU2l6emxlLmpzCiogaHR0cDovL3NpenpsZWpzLmNvbS8KKiBDb3B5cmlnaHQgMjAxMSwgVGhlIERvam8gRm91bmRhdGlvbgoqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQsIEJTRCwgYW5kIEdQTCBMaWNlbnNlcy4KKgoqIEluY2x1ZGVzIGpRdWVyeSBNb2JpbGUgRnJhbWV3b3JrCiogaHR0cDovL2pxdWVyeW1vYmlsZS5jb20KKgoqIENvcHlyaWdodCAyMDExIChjKSBqUXVlcnkgUHJvamVjdAoqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLgoqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKKgoqIEluY2x1ZGVzICBBbmd1bGFySlMKKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuMC4wcmMxCiogKGMpIDIwMTAtMjAxMiBBbmd1bGFySlMgaHR0cDovL2FuZ3VsYXJqcy5vcmcKKiBMaWNlbnNlOiBNSVQKKi8KLyohCiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjEuNy4xCiAqIGh0dHA6Ly9qcXVlcnkuY29tLwogKgogKiBQYXRjaGVkIHdpdGggaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTI1MTQ4CiAqCiAqIENvcHlyaWdodCAyMDExLCBKb2huIFJlc2lnCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLgogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlCiAqCiAqIEluY2x1ZGVzIFNpenpsZS5qcwogKiBodHRwOi8vc2l6emxlanMuY29tLwogKiBDb3B5cmlnaHQgMjAxMSwgVGhlIERvam8gRm91bmRhdGlvbgogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlULCBCU0QsIGFuZCBHUEwgTGljZW5zZXMuCiAqCiAqIERhdGU6IE1vbiBOb3YgMjEgMjE6MTE6MDMgMjAxMSAtMDUwMAogKi8KKGZ1bmN0aW9uKCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCi8vIFVzZSB0aGUgY29ycmVjdCBkb2N1bWVudCBhY2NvcmRpbmdseSB3aXRoIHdpbmRvdyBhcmd1bWVudCAoc2FuZGJveCkKICAgIHZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCwKICAgICAgICBuYXZpZ2F0b3IgPSB3aW5kb3cubmF2aWdhdG9yLAogICAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uOwogICAgdmFyIGpRdWVyeSA9IChmdW5jdGlvbigpIHsKCi8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5CiAgICAgICAgdmFyIGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHsKICAgICAgICAgICAgICAgIC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJwogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3RqUXVlcnkgKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgLy8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlCiAgICAgICAgICAgIF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LAoKICAgICAgICAvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZQogICAgICAgICAgICBfJCA9IHdpbmRvdy4kLAoKICAgICAgICAvLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudCkKICAgICAgICAgICAgcm9vdGpRdWVyeSwKCiAgICAgICAgLy8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Mgb3IgSUQgc3RyaW5ncwogICAgICAgIC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSkKICAgICAgICAgICAgcXVpY2tFeHByID0gL14oPzpbXiM8XSooPFtcd1xXXSs+KVtePl0qJHwjKFtcd1wtXSopJCkvLAoKICAgICAgICAvLyBDaGVjayBpZiBhIHN0cmluZyBoYXMgYSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIgaW4gaXQKICAgICAgICAgICAgcm5vdHdoaXRlID0gL1xTLywKCiAgICAgICAgLy8gVXNlZCBmb3IgdHJpbW1pbmcgd2hpdGVzcGFjZQogICAgICAgICAgICB0cmltTGVmdCA9IC9eXHMrLywKICAgICAgICAgICAgdHJpbVJpZ2h0ID0gL1xzKyQvLAoKICAgICAgICAvLyBNYXRjaCBhIHN0YW5kYWxvbmUgdGFnCiAgICAgICAgICAgIHJzaW5nbGVUYWcgPSAvXjwoXHcrKVxzKlwvPz4oPzo8XC9cMT4pPyQvLAoKICAgICAgICAvLyBKU09OIFJlZ0V4cAogICAgICAgICAgICBydmFsaWRjaGFycyA9IC9eW1xdLDp7fVxzXSokLywKICAgICAgICAgICAgcnZhbGlkZXNjYXBlID0gL1xcKD86WyJcXFwvYmZucnRdfHVbMC05YS1mQS1GXXs0fSkvZywKICAgICAgICAgICAgcnZhbGlkdG9rZW5zID0gLyJbXiJcXFxuXHJdKiJ8dHJ1ZXxmYWxzZXxudWxsfC0/XGQrKD86XC5cZCopPyg/OltlRV1bK1wtXT9cZCspPy9nLAogICAgICAgICAgICBydmFsaWRicmFjZXMgPSAvKD86Xnw6fCwpKD86XHMqXFspKy9nLAoKICAgICAgICAvLyBVc2VyYWdlbnQgUmVnRXhwCiAgICAgICAgICAgIHJ3ZWJraXQgPSAvKHdlYmtpdClbIFwvXShbXHcuXSspLywKICAgICAgICAgICAgcm9wZXJhID0gLyhvcGVyYSkoPzouKnZlcnNpb24pP1sgXC9dKFtcdy5dKykvLAogICAgICAgICAgICBybXNpZSA9IC8obXNpZSkgKFtcdy5dKykvLAogICAgICAgICAgICBybW96aWxsYSA9IC8obW96aWxsYSkoPzouKj8gcnY6KFtcdy5dKykpPy8sCgogICAgICAgIC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZwogICAgICAgICAgICByZGFzaEFscGhhID0gLy0oW2Etel18WzAtOV0pL2lnLAogICAgICAgICAgICBybXNQcmVmaXggPSAvXi1tcy0vLAoKICAgICAgICAvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpCiAgICAgICAgICAgIGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKCBsZXR0ZXIgKyAiIiApLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgIH0sCgogICAgICAgIC8vIEtlZXAgYSBVc2VyQWdlbnQgc3RyaW5nIGZvciB1c2Ugd2l0aCBqUXVlcnkuYnJvd3NlcgogICAgICAgICAgICB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LAoKICAgICAgICAvLyBGb3IgbWF0Y2hpbmcgdGhlIGVuZ2luZSBhbmQgdmVyc2lvbiBvZiB0aGUgYnJvd3NlcgogICAgICAgICAgICBicm93c2VyTWF0Y2gsCgogICAgICAgIC8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeQogICAgICAgICAgICByZWFkeUxpc3QsCgogICAgICAgIC8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyCiAgICAgICAgICAgIERPTUNvbnRlbnRMb2FkZWQsCgogICAgICAgIC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gc29tZSBjb3JlIG1ldGhvZHMKICAgICAgICAgICAgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLAogICAgICAgICAgICBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LAogICAgICAgICAgICBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2gsCiAgICAgICAgICAgIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLAogICAgICAgICAgICB0cmltID0gU3RyaW5nLnByb3RvdHlwZS50cmltLAogICAgICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YsCgogICAgICAgIC8vIFtbQ2xhc3NdXSAtPiB0eXBlIHBhaXJzCiAgICAgICAgICAgIGNsYXNzMnR5cGUgPSB7fTsKCiAgICAgICAgalF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHsKICAgICAgICAgICAgY29uc3RydWN0b3I6IGpRdWVyeSwKICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290alF1ZXJ5ICkgewogICAgICAgICAgICAgICAgdmFyIG1hdGNoLCBlbGVtLCByZXQsIGRvYzsKCiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgJCgiIiksICQobnVsbCksIG9yICQodW5kZWZpbmVkKQogICAgICAgICAgICAgICAgaWYgKCAhc2VsZWN0b3IgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gSGFuZGxlICQoRE9NRWxlbWVudCkKICAgICAgICAgICAgICAgIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpc1swXSA9IHNlbGVjdG9yOwogICAgICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gMTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBUaGUgYm9keSBlbGVtZW50IG9ubHkgZXhpc3RzIG9uY2UsIG9wdGltaXplIGZpbmRpbmcgaXQKICAgICAgICAgICAgICAgIGlmICggc2VsZWN0b3IgPT09ICJib2R5IiAmJiAhY29udGV4dCAmJiBkb2N1bWVudC5ib2R5ICkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dCA9IGRvY3VtZW50OwogICAgICAgICAgICAgICAgICAgIHRoaXNbMF0gPSBkb2N1bWVudC5ib2R5OwogICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjsKICAgICAgICAgICAgICAgICAgICB0aGlzLmxlbmd0aCA9IDE7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gSGFuZGxlIEhUTUwgc3RyaW5ncwogICAgICAgICAgICAgICAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09ICJzdHJpbmciICkgewogICAgICAgICAgICAgICAgICAgIC8vIEFyZSB3ZSBkZWFsaW5nIHdpdGggSFRNTCBzdHJpbmcgb3IgYW4gSUQ/CiAgICAgICAgICAgICAgICAgICAgaWYgKCBzZWxlY3Rvci5jaGFyQXQoMCkgPT09ICI8IiAmJiBzZWxlY3Rvci5jaGFyQXQoIHNlbGVjdG9yLmxlbmd0aCAtIDEgKSA9PT0gIj4iICYmIHNlbGVjdG9yLmxlbmd0aCA+PSAzICkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVjawogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTsKCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmeSBhIG1hdGNoLCBhbmQgdGhhdCBubyBjb250ZXh0IHdhcyBzcGVjaWZpZWQgZm9yICNpZAogICAgICAgICAgICAgICAgICAgIGlmICggbWF0Y2ggJiYgKG1hdGNoWzFdIHx8ICFjb250ZXh0KSApIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGNoWzFdICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WzBdIDogY29udGV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9ICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBhIHNpbmdsZSBzdHJpbmcgaXMgcGFzc2VkIGluIGFuZCBpdCdzIGEgc2luZ2xlIHRhZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8ganVzdCBkbyBhIGNyZWF0ZUVsZW1lbnQgYW5kIHNraXAgdGhlIHJlc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHJzaW5nbGVUYWcuZXhlYyggc2VsZWN0b3IgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJldCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gWyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCByZXRbMV0gKSBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZm4uYXR0ci5jYWxsKCBzZWxlY3RvciwgY29udGV4dCwgdHJ1ZSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9IFsgZG9jLmNyZWF0ZUVsZW1lbnQoIHJldFsxXSApIF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIFsgbWF0Y2hbMV0gXSwgWyBkb2MgXSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gKCByZXQuY2FjaGVhYmxlID8galF1ZXJ5LmNsb25lKHJldC5mcmFnbWVudCkgOiByZXQuZnJhZ21lbnQgKS5jaGlsZE5vZGVzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIHRoaXMsIHNlbGVjdG9yICk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSEFORExFOiAkKCIjaWQiKQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsyXSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBJRSBhbmQgT3BlcmEgcmV0dXJuIGl0ZW1zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnkgbmFtZSBpbnN0ZWFkIG9mIElECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBlbGVtLmlkICE9PSBtYXRjaFsyXSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvb3RqUXVlcnkuZmluZCggc2VsZWN0b3IgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UgaW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlbmd0aCA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1swXSA9IGVsZW07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gSEFORExFOiAkKGV4cHIsICQoLi4uKSkKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICggY29udGV4dCB8fCByb290alF1ZXJ5ICkuZmluZCggc2VsZWN0b3IgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KQogICAgICAgICAgICAgICAgICAgICAgICAvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcikKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0ID0gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBDaHJvbWUgYnVnIC0gc2VlIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEyNTE0OAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuZm4uaW5pdCkgJiYgIShyZXQgaW5zdGFuY2VvZiBqUXVlcnkuZm4uaW5pdCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IG5ldyBqUXVlcnkuZm4uaW5pdChjb250ZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0LmZpbmQoIHNlbGVjdG9yICk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyBIQU5ETEU6ICQoZnVuY3Rpb24pCiAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm9vdGpRdWVyeS5yZWFkeSggc2VsZWN0b3IgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yOwogICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dCA9IHNlbGVjdG9yLmNvbnRleHQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBTdGFydCB3aXRoIGFuIGVtcHR5IHNlbGVjdG9yCiAgICAgICAgICAgIHNlbGVjdG9yOiAiIiwKCiAgICAgICAgICAgIC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWQKICAgICAgICAgICAganF1ZXJ5OiAiMS43LjEiLAoKICAgICAgICAgICAgLy8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwCiAgICAgICAgICAgIGxlbmd0aDogMCwKCiAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0CiAgICAgICAgICAgIHNpemU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgdG9BcnJheTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2UuY2FsbCggdGhpcywgMCApOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUgogICAgICAgICAgICAvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheQogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVtID09IG51bGwgPwoKICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gYSAnY2xlYW4nIGFycmF5CiAgICAgICAgICAgICAgICAgICAgdGhpcy50b0FycmF5KCkgOgoKICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4ganVzdCB0aGUgb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgKCBudW0gPCAwID8gdGhpc1sgdGhpcy5sZW5ndGggKyBudW0gXSA6IHRoaXNbIG51bSBdICk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrCiAgICAgICAgICAgIC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KQogICAgICAgICAgICBwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcywgbmFtZSwgc2VsZWN0b3IgKSB7CiAgICAgICAgICAgICAgICAvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldAogICAgICAgICAgICAgICAgdmFyIHJldCA9IHRoaXMuY29uc3RydWN0b3IoKTsKICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEyNTE0OAogICAgICAgICAgICAgICAgaWYgKCEocmV0IGluc3RhbmNlb2YgalF1ZXJ5LmZuLmluaXQpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0ID0gbmV3IGpRdWVyeS5mbi5pbml0KCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNBcnJheSggZWxlbXMgKSApIHsKICAgICAgICAgICAgICAgICAgICBwdXNoLmFwcGx5KCByZXQsIGVsZW1zICk7CgogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkubWVyZ2UoIHJldCwgZWxlbXMgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKQogICAgICAgICAgICAgICAgcmV0LnByZXZPYmplY3QgPSB0aGlzOwoKICAgICAgICAgICAgICAgIHJldC5jb250ZXh0ID0gdGhpcy5jb250ZXh0OwoKICAgICAgICAgICAgICAgIGlmICggbmFtZSA9PT0gImZpbmQiICkgewogICAgICAgICAgICAgICAgICAgIHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgKyAoIHRoaXMuc2VsZWN0b3IgPyAiICIgOiAiIiApICsgc2VsZWN0b3I7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBuYW1lICkgewogICAgICAgICAgICAgICAgICAgIHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgKyAiLiIgKyBuYW1lICsgIigiICsgc2VsZWN0b3IgKyAiKSI7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXQKICAgICAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LgogICAgICAgICAgICAvLyAoWW91IGNhbiBzZWVkIHRoZSBhcmd1bWVudHMgd2l0aCBhbiBhcnJheSBvZiBhcmdzLCBidXQgdGhpcyBpcwogICAgICAgICAgICAvLyBvbmx5IHVzZWQgaW50ZXJuYWxseS4pCiAgICAgICAgICAgIGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXJncyApIHsKICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJlYWR5OiBmdW5jdGlvbiggZm4gKSB7CiAgICAgICAgICAgICAgICAvLyBBdHRhY2ggdGhlIGxpc3RlbmVycwogICAgICAgICAgICAgICAgalF1ZXJ5LmJpbmRSZWFkeSgpOwoKICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgY2FsbGJhY2sKICAgICAgICAgICAgICAgIHJlYWR5TGlzdC5hZGQoIGZuICk7CgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBlcTogZnVuY3Rpb24oIGkgKSB7CiAgICAgICAgICAgICAgICBpID0gK2k7CiAgICAgICAgICAgICAgICByZXR1cm4gaSA9PT0gLTEgPwogICAgICAgICAgICAgICAgICAgIHRoaXMuc2xpY2UoIGkgKSA6CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGljZSggaSwgaSArIDEgKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGZpcnN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVxKCAwICk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBsYXN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVxKCAtMSApOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2xpY2U6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICksCiAgICAgICAgICAgICAgICAgICAgInNsaWNlIiwgc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oIiwiKSApOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAodGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTsKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGVuZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IobnVsbCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuCiAgICAgICAgICAgIC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLgogICAgICAgICAgICBwdXNoOiBwdXNoLAogICAgICAgICAgICBzb3J0OiBbXS5zb3J0LAogICAgICAgICAgICBzcGxpY2U6IFtdLnNwbGljZQogICAgICAgIH07CgovLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uCiAgICAgICAgalF1ZXJ5LmZuLmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuOwoKICAgICAgICBqUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsCiAgICAgICAgICAgICAgICB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sCiAgICAgICAgICAgICAgICBpID0gMSwKICAgICAgICAgICAgICAgIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsCiAgICAgICAgICAgICAgICBkZWVwID0gZmFsc2U7CgogICAgICAgICAgICAvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uCiAgICAgICAgICAgIGlmICggdHlwZW9mIHRhcmdldCA9PT0gImJvb2xlYW4iICkgewogICAgICAgICAgICAgICAgZGVlcCA9IHRhcmdldDsKICAgICAgICAgICAgICAgIHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTsKICAgICAgICAgICAgICAgIC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXQKICAgICAgICAgICAgICAgIGkgPSAyOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSkKICAgICAgICAgICAgaWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSAib2JqZWN0IiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSApIHsKICAgICAgICAgICAgICAgIHRhcmdldCA9IHt9OwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBleHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWQKICAgICAgICAgICAgaWYgKCBsZW5ndGggPT09IGkgKSB7CiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0aGlzOwogICAgICAgICAgICAgICAgLS1pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgICAgIC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXMKICAgICAgICAgICAgICAgIGlmICggKG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSkgIT0gbnVsbCApIHsKICAgICAgICAgICAgICAgICAgICAvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgZm9yICggbmFtZSBpbiBvcHRpb25zICkgewogICAgICAgICAgICAgICAgICAgICAgICBzcmMgPSB0YXJnZXRbIG5hbWUgXTsKICAgICAgICAgICAgICAgICAgICAgICAgY29weSA9IG9wdGlvbnNbIG5hbWUgXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3AKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoY29weSkpICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGNvcHlJc0FycmF5ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlJc0FycmF5ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXMKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0WyBuYW1lIF0gPSBjb3B5OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdAogICAgICAgICAgICByZXR1cm4gdGFyZ2V0OwogICAgICAgIH07CgogICAgICAgIGpRdWVyeS5leHRlbmQoewogICAgICAgICAgICBub0NvbmZsaWN0OiBmdW5jdGlvbiggZGVlcCApIHsKICAgICAgICAgICAgICAgIGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cuJCA9IF8kOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LmpRdWVyeSA9IF9qUXVlcnk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIGpRdWVyeTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuCiAgICAgICAgICAgIGlzUmVhZHk6IGZhbHNlLAoKICAgICAgICAgICAgLy8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZQogICAgICAgICAgICAvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MQogICAgICAgICAgICByZWFkeVdhaXQ6IDEsCgogICAgICAgICAgICAvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnQKICAgICAgICAgICAgaG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHsKICAgICAgICAgICAgICAgIGlmICggaG9sZCApIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkucmVhZHlXYWl0Kys7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGpRdWVyeS5yZWFkeSggdHJ1ZSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeQogICAgICAgICAgICByZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7CiAgICAgICAgICAgICAgICAvLyBFaXRoZXIgYSByZWxlYXNlZCBob2xkIG9yIGFuIERPTXJlYWR5L2xvYWQgZXZlbnQgYW5kIG5vdCB5ZXQgcmVhZHkKICAgICAgICAgICAgICAgIGlmICggKHdhaXQgPT09IHRydWUgJiYgIS0talF1ZXJ5LnJlYWR5V2FpdCkgfHwgKHdhaXQgIT09IHRydWUgJiYgIWpRdWVyeS5pc1JlYWR5KSApIHsKICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgYm9keSBleGlzdHMsIGF0IGxlYXN0LCBpbiBjYXNlIElFIGdldHMgYSBsaXR0bGUgb3ZlcnplYWxvdXMgKHRpY2tldCAjNTQ0MykuCiAgICAgICAgICAgICAgICAgICAgaWYgKCAhZG9jdW1lbnQuYm9keSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSwgMSApOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmlzUmVhZHkgPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgICAvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZQogICAgICAgICAgICAgICAgICAgIGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlCiAgICAgICAgICAgICAgICAgICAgcmVhZHlMaXN0LmZpcmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApOwoKICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHMKICAgICAgICAgICAgICAgICAgICBpZiAoIGpRdWVyeS5mbi50cmlnZ2VyICkgewogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlciggInJlYWR5IiApLm9mZiggInJlYWR5IiApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGJpbmRSZWFkeTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZiAoIHJlYWR5TGlzdCApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmVhZHlMaXN0ID0galF1ZXJ5LkNhbGxiYWNrcyggIm9uY2UgbWVtb3J5IiApOwoKICAgICAgICAgICAgICAgIC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkIGFmdGVyIHRoZQogICAgICAgICAgICAgICAgLy8gYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC4KICAgICAgICAgICAgICAgIGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gImNvbXBsZXRlIiApIHsKICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5LCAxICk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gTW96aWxsYSwgT3BlcmEgYW5kIHdlYmtpdCBuaWdodGxpZXMgY3VycmVudGx5IHN1cHBvcnQgdGhpcyBldmVudAogICAgICAgICAgICAgICAgaWYgKCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICkgewogICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2sKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAiRE9NQ29udGVudExvYWRlZCIsIERPTUNvbnRlbnRMb2FkZWQsIGZhbHNlICk7CgogICAgICAgICAgICAgICAgICAgIC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrCiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICJsb2FkIiwgalF1ZXJ5LnJlYWR5LCBmYWxzZSApOwoKICAgICAgICAgICAgICAgICAgICAvLyBJZiBJRSBldmVudCBtb2RlbCBpcyB1c2VkCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBkb2N1bWVudC5hdHRhY2hFdmVudCApIHsKICAgICAgICAgICAgICAgICAgICAvLyBlbnN1cmUgZmlyaW5nIGJlZm9yZSBvbmxvYWQsCiAgICAgICAgICAgICAgICAgICAgLy8gbWF5YmUgbGF0ZSBidXQgc2FmZSBhbHNvIGZvciBpZnJhbWVzCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoICJvbnJlYWR5c3RhdGVjaGFuZ2UiLCBET01Db250ZW50TG9hZGVkICk7CgogICAgICAgICAgICAgICAgICAgIC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrCiAgICAgICAgICAgICAgICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCAib25sb2FkIiwgalF1ZXJ5LnJlYWR5ICk7CgogICAgICAgICAgICAgICAgICAgIC8vIElmIElFIGFuZCBub3QgYSBmcmFtZQogICAgICAgICAgICAgICAgICAgIC8vIGNvbnRpbnVhbGx5IGNoZWNrIHRvIHNlZSBpZiB0aGUgZG9jdW1lbnQgaXMgcmVhZHkKICAgICAgICAgICAgICAgICAgICB2YXIgdG9wbGV2ZWwgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgdG9wbGV2ZWwgPSB3aW5kb3cuZnJhbWVFbGVtZW50ID09IG51bGw7CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7fQoKICAgICAgICAgICAgICAgICAgICBpZiAoIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCAmJiB0b3BsZXZlbCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9TY3JvbGxDaGVjaygpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIFNlZSB0ZXN0L3VuaXQvY29yZS5qcyBmb3IgZGV0YWlscyBjb25jZXJuaW5nIGlzRnVuY3Rpb24uCiAgICAgICAgICAgIC8vIFNpbmNlIHZlcnNpb24gMS4zLCBET00gbWV0aG9kcyBhbmQgZnVuY3Rpb25zIGxpa2UgYWxlcnQKICAgICAgICAgICAgLy8gYXJlbid0IHN1cHBvcnRlZC4gVGhleSByZXR1cm4gZmFsc2Ugb24gSUUgKCMyOTY4KS4KICAgICAgICAgICAgaXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHsKICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSAiZnVuY3Rpb24iOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaXNBcnJheTogQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiggb2JqICkgewogICAgICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS50eXBlKG9iaikgPT09ICJhcnJheSI7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBBIGNydWRlIHdheSBvZiBkZXRlcm1pbmluZyBpZiBhbiBvYmplY3QgaXMgYSB3aW5kb3cKICAgICAgICAgICAgaXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICJvYmplY3QiICYmICJzZXRJbnRlcnZhbCIgaW4gb2JqOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgaXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkgewogICAgICAgICAgICAgICAgcmV0dXJuICFpc05hTiggcGFyc2VGbG9hdChvYmopICkgJiYgaXNGaW5pdGUoIG9iaiApOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgdHlwZTogZnVuY3Rpb24oIG9iaiApIHsKICAgICAgICAgICAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/CiAgICAgICAgICAgICAgICAgICAgU3RyaW5nKCBvYmogKSA6CiAgICAgICAgICAgICAgICAgICAgY2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgIm9iamVjdCI7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkgewogICAgICAgICAgICAgICAgLy8gTXVzdCBiZSBhbiBPYmplY3QuCiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIG9mIElFLCB3ZSBhbHNvIGhhdmUgdG8gY2hlY2sgdGhlIHByZXNlbmNlIG9mIHRoZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eS4KICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IERPTSBub2RlcyBhbmQgd2luZG93IG9iamVjdHMgZG9uJ3QgcGFzcyB0aHJvdWdoLCBhcyB3ZWxsCiAgICAgICAgICAgICAgICBpZiAoICFvYmogfHwgalF1ZXJ5LnR5cGUob2JqKSAhPT0gIm9iamVjdCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgLy8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdAogICAgICAgICAgICAgICAgICAgIGlmICggb2JqLmNvbnN0cnVjdG9yICYmCiAgICAgICAgICAgICAgICAgICAgICAgICFoYXNPd24uY2FsbChvYmosICJjb25zdHJ1Y3RvciIpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICFoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAiaXNQcm90b3R5cGVPZiIpICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gSUU4LDkgV2lsbCB0aHJvdyBleGNlcHRpb25zIG9uIGNlcnRhaW4gaG9zdCBvYmplY3RzICM5ODk3CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLAogICAgICAgICAgICAgICAgLy8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uCgogICAgICAgICAgICAgICAgdmFyIGtleTsKICAgICAgICAgICAgICAgIGZvciAoIGtleSBpbiBvYmogKSB7fQoKICAgICAgICAgICAgICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7CiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbmFtZSBpbiBvYmogKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oIG1zZyApIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggbXNnICk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBwYXJzZUpTT046IGZ1bmN0aW9uKCBkYXRhICkgewogICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgZGF0YSAhPT0gInN0cmluZyIgfHwgIWRhdGEgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIGxlYWRpbmcvdHJhaWxpbmcgd2hpdGVzcGFjZSBpcyByZW1vdmVkIChJRSBjYW4ndCBoYW5kbGUgaXQpCiAgICAgICAgICAgICAgICBkYXRhID0galF1ZXJ5LnRyaW0oIGRhdGEgKTsKCiAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IHRvIHBhcnNlIHVzaW5nIHRoZSBuYXRpdmUgSlNPTiBwYXJzZXIgZmlyc3QKICAgICAgICAgICAgICAgIGlmICggd2luZG93LkpTT04gJiYgd2luZG93LkpTT04ucGFyc2UgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5KU09OLnBhcnNlKCBkYXRhICk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbmNvbWluZyBkYXRhIGlzIGFjdHVhbCBKU09OCiAgICAgICAgICAgICAgICAvLyBMb2dpYyBib3Jyb3dlZCBmcm9tIGh0dHA6Ly9qc29uLm9yZy9qc29uMi5qcwogICAgICAgICAgICAgICAgaWYgKCBydmFsaWRjaGFycy50ZXN0KCBkYXRhLnJlcGxhY2UoIHJ2YWxpZGVzY2FwZSwgIkAiICkKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSggcnZhbGlkdG9rZW5zLCAiXSIgKQogICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCBydmFsaWRicmFjZXMsICIiKSkgKSB7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiAoIG5ldyBGdW5jdGlvbiggInJldHVybiAiICsgZGF0YSApICkoKTsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBqUXVlcnkuZXJyb3IoICJJbnZhbGlkIEpTT046ICIgKyBkYXRhICk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nCiAgICAgICAgICAgIHBhcnNlWE1MOiBmdW5jdGlvbiggZGF0YSApIHsKICAgICAgICAgICAgICAgIHZhciB4bWwsIHRtcDsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cuRE9NUGFyc2VyICkgeyAvLyBTdGFuZGFyZAogICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSBuZXcgRE9NUGFyc2VyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhtbCA9IHRtcC5wYXJzZUZyb21TdHJpbmcoIGRhdGEgLCAidGV4dC94bWwiICk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gSUUKICAgICAgICAgICAgICAgICAgICAgICAgeG1sID0gbmV3IEFjdGl2ZVhPYmplY3QoICJNaWNyb3NvZnQuWE1MRE9NIiApOwogICAgICAgICAgICAgICAgICAgICAgICB4bWwuYXN5bmMgPSAiZmFsc2UiOwogICAgICAgICAgICAgICAgICAgICAgICB4bWwubG9hZFhNTCggZGF0YSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gY2F0Y2goIGUgKSB7CiAgICAgICAgICAgICAgICAgICAgeG1sID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCAheG1sIHx8ICF4bWwuZG9jdW1lbnRFbGVtZW50IHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggInBhcnNlcmVycm9yIiApLmxlbmd0aCApIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXJyb3IoICJJbnZhbGlkIFhNTDogIiArIGRhdGEgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB4bWw7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBub29wOiBmdW5jdGlvbigpIHt9LAoKICAgICAgICAgICAgLy8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHQKICAgICAgICAgICAgLy8gV29ya2Fyb3VuZHMgYmFzZWQgb24gZmluZGluZ3MgYnkgSmltIERyaXNjb2xsCiAgICAgICAgICAgIC8vIGh0dHA6Ly93ZWJsb2dzLmphdmEubmV0L2Jsb2cvZHJpc2NvbGwvYXJjaGl2ZS8yMDA5LzA5LzA4L2V2YWwtamF2YXNjcmlwdC1nbG9iYWwtY29udGV4dAogICAgICAgICAgICBnbG9iYWxFdmFsOiBmdW5jdGlvbiggZGF0YSApIHsKICAgICAgICAgICAgICAgIGlmICggZGF0YSAmJiBybm90d2hpdGUudGVzdCggZGF0YSApICkgewogICAgICAgICAgICAgICAgICAgIC8vIFdlIHVzZSBleGVjU2NyaXB0IG9uIEludGVybmV0IEV4cGxvcmVyCiAgICAgICAgICAgICAgICAgICAgLy8gV2UgdXNlIGFuIGFub255bW91cyBmdW5jdGlvbiBzbyB0aGF0IGNvbnRleHQgaXMgd2luZG93CiAgICAgICAgICAgICAgICAgICAgLy8gcmF0aGVyIHRoYW4galF1ZXJ5IGluIEZpcmVmb3gKICAgICAgICAgICAgICAgICAgICAoIHdpbmRvdy5leGVjU2NyaXB0IHx8IGZ1bmN0aW9uKCBkYXRhICkgewogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dbICJldmFsIiBdLmNhbGwoIHdpbmRvdywgZGF0YSApOwogICAgICAgICAgICAgICAgICAgIH0gKSggZGF0YSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlcwogICAgICAgICAgICAvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpCiAgICAgICAgICAgIGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHsKICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCAibXMtIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gbmFtZS50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gYXJncyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seQogICAgICAgICAgICBlYWNoOiBmdW5jdGlvbiggb2JqZWN0LCBjYWxsYmFjaywgYXJncyApIHsKICAgICAgICAgICAgICAgIHZhciBuYW1lLCBpID0gMCwKICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBvYmplY3QubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgIGlzT2JqID0gbGVuZ3RoID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRnVuY3Rpb24oIG9iamVjdCApOwoKICAgICAgICAgICAgICAgIGlmICggYXJncyApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIGlzT2JqICkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCBuYW1lIGluIG9iamVjdCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY2FsbGJhY2suYXBwbHkoIG9iamVjdFsgbmFtZSBdLCBhcmdzICkgPT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggOyBpIDwgbGVuZ3RoOyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY2FsbGJhY2suYXBwbHkoIG9iamVjdFsgaSsrIF0sIGFyZ3MgKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmICggaXNPYmogKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIG5hbWUgaW4gb2JqZWN0ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjYWxsYmFjay5jYWxsKCBvYmplY3RbIG5hbWUgXSwgbmFtZSwgb2JqZWN0WyBuYW1lIF0gKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjYWxsYmFjay5jYWxsKCBvYmplY3RbIGkgXSwgaSwgb2JqZWN0WyBpKysgXSApID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0OwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gVXNlIG5hdGl2ZSBTdHJpbmcudHJpbSBmdW5jdGlvbiB3aGVyZXZlciBwb3NzaWJsZQogICAgICAgICAgICB0cmltOiB0cmltID8KICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCB0ZXh0ICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0ID09IG51bGwgPwogICAgICAgICAgICAgICAgICAgICAgICAiIiA6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyaW0uY2FsbCggdGV4dCApOwogICAgICAgICAgICAgICAgfSA6CgogICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHVzZSBvdXIgb3duIHRyaW1taW5nIGZ1bmN0aW9uYWxpdHkKICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCB0ZXh0ICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0ID09IG51bGwgPwogICAgICAgICAgICAgICAgICAgICAgICAiIiA6CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQudG9TdHJpbmcoKS5yZXBsYWNlKCB0cmltTGVmdCwgIiIgKS5yZXBsYWNlKCB0cmltUmlnaHQsICIiICk7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seQogICAgICAgICAgICBtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnJheSwgcmVzdWx0cyApIHsKICAgICAgICAgICAgICAgIHZhciByZXQgPSByZXN1bHRzIHx8IFtdOwoKICAgICAgICAgICAgICAgIGlmICggYXJyYXkgIT0gbnVsbCApIHsKICAgICAgICAgICAgICAgICAgICAvLyBUaGUgd2luZG93LCBzdHJpbmdzIChhbmQgZnVuY3Rpb25zKSBhbHNvIGhhdmUgJ2xlbmd0aCcKICAgICAgICAgICAgICAgICAgICAvLyBUd2Vha2VkIGxvZ2ljIHNsaWdodGx5IHRvIGhhbmRsZSBCbGFja2JlcnJ5IDQuNyBSZWdFeHAgaXNzdWVzICM2OTMwCiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBqUXVlcnkudHlwZSggYXJyYXkgKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCBhcnJheS5sZW5ndGggPT0gbnVsbCB8fCB0eXBlID09PSAic3RyaW5nIiB8fCB0eXBlID09PSAiZnVuY3Rpb24iIHx8IHR5cGUgPT09ICJyZWdleHAiIHx8IGpRdWVyeS5pc1dpbmRvdyggYXJyYXkgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcHVzaC5jYWxsKCByZXQsIGFycmF5ICk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5Lm1lcmdlKCByZXQsIGFycmF5ICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyYXksIGkgKSB7CiAgICAgICAgICAgICAgICB2YXIgbGVuOwoKICAgICAgICAgICAgICAgIGlmICggYXJyYXkgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBpbmRleE9mICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXhPZi5jYWxsKCBhcnJheSwgZWxlbSwgaSApOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgbGVuID0gYXJyYXkubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIGkgPSBpID8gaSA8IDAgPyBNYXRoLm1heCggMCwgbGVuICsgaSApIDogaSA6IDA7CgogICAgICAgICAgICAgICAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIGFjY2Vzc2luZyBpbiBzcGFyc2UgYXJyYXlzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggaSBpbiBhcnJheSAmJiBhcnJheVsgaSBdID09PSBlbGVtICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkgewogICAgICAgICAgICAgICAgdmFyIGkgPSBmaXJzdC5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgaiA9IDA7CgogICAgICAgICAgICAgICAgaWYgKCB0eXBlb2Ygc2Vjb25kLmxlbmd0aCA9PT0gIm51bWJlciIgKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGwgPSBzZWNvbmQubGVuZ3RoOyBqIDwgbDsgaisrICkgewogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIHNlY29uZFtqXSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGorKyBdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmaXJzdC5sZW5ndGggPSBpOwoKICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludiApIHsKICAgICAgICAgICAgICAgIHZhciByZXQgPSBbXSwgcmV0VmFsOwogICAgICAgICAgICAgICAgaW52ID0gISFpbnY7CgogICAgICAgICAgICAgICAgLy8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtcwogICAgICAgICAgICAgICAgLy8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb24KICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbGVuZ3RoID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0VmFsID0gISFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApOwogICAgICAgICAgICAgICAgICAgIGlmICggaW52ICE9PSByZXRWYWwgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKCBlbGVtc1sgaSBdICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHkKICAgICAgICAgICAgbWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUsIGtleSwgcmV0ID0gW10sCiAgICAgICAgICAgICAgICAgICAgaSA9IDAsCiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gZWxlbXMubGVuZ3RoLAogICAgICAgICAgICAgICAgLy8ganF1ZXJ5IG9iamVjdHMgYXJlIHRyZWF0ZWQgYXMgYXJyYXlzCiAgICAgICAgICAgICAgICAgICAgaXNBcnJheSA9IGVsZW1zIGluc3RhbmNlb2YgalF1ZXJ5IHx8IGxlbmd0aCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBsZW5ndGggPT09ICJudW1iZXIiICYmICggKCBsZW5ndGggPiAwICYmIGVsZW1zWyAwIF0gJiYgZWxlbXNbIGxlbmd0aCAtMSBdICkgfHwgbGVuZ3RoID09PSAwIHx8IGpRdWVyeS5pc0FycmF5KCBlbGVtcyApICkgOwoKICAgICAgICAgICAgICAgIC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpcgogICAgICAgICAgICAgICAgaWYgKCBpc0FycmF5ICkgewogICAgICAgICAgICAgICAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUgIT0gbnVsbCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldFsgcmV0Lmxlbmd0aCBdID0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZvciAoIGtleSBpbiBlbGVtcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGtleSBdLCBrZXksIGFyZyApOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSAhPSBudWxsICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0WyByZXQubGVuZ3RoIF0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzCiAgICAgICAgICAgICAgICByZXR1cm4gcmV0LmNvbmNhdC5hcHBseSggW10sIHJldCApOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzCiAgICAgICAgICAgIGd1aWQ6IDEsCgogICAgICAgICAgICAvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnkKICAgICAgICAgICAgLy8gYXJndW1lbnRzLgogICAgICAgICAgICBwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkgewogICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgY29udGV4dCA9PT0gInN0cmluZyIgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IGZuWyBjb250ZXh0IF07CiAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IGZuOwogICAgICAgICAgICAgICAgICAgIGZuID0gdG1wOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjCiAgICAgICAgICAgICAgICAvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLgogICAgICAgICAgICAgICAgaWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBTaW11bGF0ZWQgYmluZAogICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKSwKICAgICAgICAgICAgICAgICAgICBwcm94eSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7CiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWQKICAgICAgICAgICAgICAgIHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBwcm94eS5ndWlkIHx8IGpRdWVyeS5ndWlkKys7CgogICAgICAgICAgICAgICAgcmV0dXJuIHByb3h5OwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLy8gTXV0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyB0byBhIGNvbGxlY3Rpb24KICAgICAgICAgICAgLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uCiAgICAgICAgICAgIGFjY2VzczogZnVuY3Rpb24oIGVsZW1zLCBrZXksIHZhbHVlLCBleGVjLCBmbiwgcGFzcyApIHsKICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBlbGVtcy5sZW5ndGg7CgogICAgICAgICAgICAgICAgLy8gU2V0dGluZyBtYW55IGF0dHJpYnV0ZXMKICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIGtleSA9PT0gIm9iamVjdCIgKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGsgaW4ga2V5ICkgewogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuYWNjZXNzKCBlbGVtcywgaywga2V5W2tdLCBleGVjLCBmbiwgdmFsdWUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1zOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIFNldHRpbmcgb25lIGF0dHJpYnV0ZQogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgIC8vIE9wdGlvbmFsbHksIGZ1bmN0aW9uIHZhbHVlcyBnZXQgZXhlY3V0ZWQgaWYgZXhlYyBpcyB0cnVlCiAgICAgICAgICAgICAgICAgICAgZXhlYyA9ICFwYXNzICYmIGV4ZWMgJiYgalF1ZXJ5LmlzRnVuY3Rpb24odmFsdWUpOwoKICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm4oIGVsZW1zW2ldLCBrZXksIGV4ZWMgPyB2YWx1ZS5jYWxsKCBlbGVtc1tpXSwgaSwgZm4oIGVsZW1zW2ldLCBrZXkgKSApIDogdmFsdWUsIHBhc3MgKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtczsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBHZXR0aW5nIGFuIGF0dHJpYnV0ZQogICAgICAgICAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGZuKCBlbGVtc1swXSwga2V5ICkgOiB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBub3c6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuICggbmV3IERhdGUoKSApLmdldFRpbWUoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIFVzZSBvZiBqUXVlcnkuYnJvd3NlciBpcyBmcm93bmVkIHVwb24uCiAgICAgICAgICAgIC8vIE1vcmUgZGV0YWlsczogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9VdGlsaXRpZXMvalF1ZXJ5LmJyb3dzZXIKICAgICAgICAgICAgdWFNYXRjaDogZnVuY3Rpb24oIHVhICkgewogICAgICAgICAgICAgICAgdWEgPSB1YS50b0xvd2VyQ2FzZSgpOwoKICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHJ3ZWJraXQuZXhlYyggdWEgKSB8fAogICAgICAgICAgICAgICAgICAgIHJvcGVyYS5leGVjKCB1YSApIHx8CiAgICAgICAgICAgICAgICAgICAgcm1zaWUuZXhlYyggdWEgKSB8fAogICAgICAgICAgICAgICAgICAgIHVhLmluZGV4T2YoImNvbXBhdGlibGUiKSA8IDAgJiYgcm1vemlsbGEuZXhlYyggdWEgKSB8fAogICAgICAgICAgICAgICAgICAgIFtdOwoKICAgICAgICAgICAgICAgIHJldHVybiB7IGJyb3dzZXI6IG1hdGNoWzFdIHx8ICIiLCB2ZXJzaW9uOiBtYXRjaFsyXSB8fCAiMCIgfTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHN1YjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBqUXVlcnlTdWIoIHNlbGVjdG9yLCBjb250ZXh0ICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgalF1ZXJ5U3ViLmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKCB0cnVlLCBqUXVlcnlTdWIsIHRoaXMgKTsKICAgICAgICAgICAgICAgIGpRdWVyeVN1Yi5zdXBlcmNsYXNzID0gdGhpczsKICAgICAgICAgICAgICAgIGpRdWVyeVN1Yi5mbiA9IGpRdWVyeVN1Yi5wcm90b3R5cGUgPSB0aGlzKCk7CiAgICAgICAgICAgICAgICBqUXVlcnlTdWIuZm4uY29uc3RydWN0b3IgPSBqUXVlcnlTdWI7CiAgICAgICAgICAgICAgICBqUXVlcnlTdWIuc3ViID0gdGhpcy5zdWI7CiAgICAgICAgICAgICAgICBqUXVlcnlTdWIuZm4uaW5pdCA9IGZ1bmN0aW9uIGluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICkgewogICAgICAgICAgICAgICAgICAgIGlmICggY29udGV4dCAmJiBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ICYmICEoY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeVN1YikgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBqUXVlcnlTdWIoIGNvbnRleHQgKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkuZm4uaW5pdC5jYWxsKCB0aGlzLCBzZWxlY3RvciwgY29udGV4dCwgcm9vdGpRdWVyeVN1YiApOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGpRdWVyeVN1Yi5mbi5pbml0LnByb3RvdHlwZSA9IGpRdWVyeVN1Yi5mbjsKICAgICAgICAgICAgICAgIHZhciByb290alF1ZXJ5U3ViID0galF1ZXJ5U3ViKGRvY3VtZW50KTsKICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnlTdWI7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBicm93c2VyOiB7fQogICAgICAgIH0pOwoKLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwCiAgICAgICAgalF1ZXJ5LmVhY2goIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QiLnNwbGl0KCIgIiksIGZ1bmN0aW9uKGksIG5hbWUpIHsKICAgICAgICAgICAgY2xhc3MydHlwZVsgIltvYmplY3QgIiArIG5hbWUgKyAiXSIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICB9KTsKCiAgICAgICAgYnJvd3Nlck1hdGNoID0galF1ZXJ5LnVhTWF0Y2goIHVzZXJBZ2VudCApOwogICAgICAgIGlmICggYnJvd3Nlck1hdGNoLmJyb3dzZXIgKSB7CiAgICAgICAgICAgIGpRdWVyeS5icm93c2VyWyBicm93c2VyTWF0Y2guYnJvd3NlciBdID0gdHJ1ZTsKICAgICAgICAgICAgalF1ZXJ5LmJyb3dzZXIudmVyc2lvbiA9IGJyb3dzZXJNYXRjaC52ZXJzaW9uOwogICAgICAgIH0KCi8vIERlcHJlY2F0ZWQsIHVzZSBqUXVlcnkuYnJvd3Nlci53ZWJraXQgaW5zdGVhZAogICAgICAgIGlmICggalF1ZXJ5LmJyb3dzZXIud2Via2l0ICkgewogICAgICAgICAgICBqUXVlcnkuYnJvd3Nlci5zYWZhcmkgPSB0cnVlOwogICAgICAgIH0KCi8vIElFIGRvZXNuJ3QgbWF0Y2ggbm9uLWJyZWFraW5nIHNwYWNlcyB3aXRoIFxzCiAgICAgICAgaWYgKCBybm90d2hpdGUudGVzdCggIlx4QTAiICkgKSB7CiAgICAgICAgICAgIHRyaW1MZWZ0ID0gL15bXHNceEEwXSsvOwogICAgICAgICAgICB0cmltUmlnaHQgPSAvW1xzXHhBMF0rJC87CiAgICAgICAgfQoKLy8gQWxsIGpRdWVyeSBvYmplY3RzIHNob3VsZCBwb2ludCBiYWNrIHRvIHRoZXNlCiAgICAgICAgcm9vdGpRdWVyeSA9IGpRdWVyeShkb2N1bWVudCk7CgovLyBDbGVhbnVwIGZ1bmN0aW9ucyBmb3IgdGhlIGRvY3VtZW50IHJlYWR5IG1ldGhvZAogICAgICAgIGlmICggZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciApIHsKICAgICAgICAgICAgRE9NQ29udGVudExvYWRlZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggIkRPTUNvbnRlbnRMb2FkZWQiLCBET01Db250ZW50TG9hZGVkLCBmYWxzZSApOwogICAgICAgICAgICAgICAgalF1ZXJ5LnJlYWR5KCk7CiAgICAgICAgICAgIH07CgogICAgICAgIH0gZWxzZSBpZiAoIGRvY3VtZW50LmF0dGFjaEV2ZW50ICkgewogICAgICAgICAgICBET01Db250ZW50TG9hZGVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgYm9keSBleGlzdHMsIGF0IGxlYXN0LCBpbiBjYXNlIElFIGdldHMgYSBsaXR0bGUgb3ZlcnplYWxvdXMgKHRpY2tldCAjNTQ0MykuCiAgICAgICAgICAgICAgICBpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIgKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZGV0YWNoRXZlbnQoICJvbnJlYWR5c3RhdGVjaGFuZ2UiLCBET01Db250ZW50TG9hZGVkICk7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnJlYWR5KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgfQoKLy8gVGhlIERPTSByZWFkeSBjaGVjayBmb3IgSW50ZXJuZXQgRXhwbG9yZXIKICAgICAgICBmdW5jdGlvbiBkb1Njcm9sbENoZWNrKCkgewogICAgICAgICAgICBpZiAoIGpRdWVyeS5pc1JlYWR5ICkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgLy8gSWYgSUUgaXMgdXNlZCwgdXNlIHRoZSB0cmljayBieSBEaWVnbyBQZXJpbmkKICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9qYXZhc2NyaXB0Lm53Ym94LmNvbS9JRUNvbnRlbnRMb2FkZWQvCiAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwoImxlZnQiKTsKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBkb1Njcm9sbENoZWNrLCAxICk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGFuZCBleGVjdXRlIGFueSB3YWl0aW5nIGZ1bmN0aW9ucwogICAgICAgICAgICBqUXVlcnkucmVhZHkoKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBqUXVlcnk7CgogICAgfSkoKTsKCgovLyBTdHJpbmcgdG8gT2JqZWN0IGZsYWdzIGZvcm1hdCBjYWNoZQogICAgdmFyIGZsYWdzQ2FjaGUgPSB7fTsKCi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBmbGFncyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lcyBhbmQgc3RvcmUgaW4gY2FjaGUKICAgIGZ1bmN0aW9uIGNyZWF0ZUZsYWdzKCBmbGFncyApIHsKICAgICAgICB2YXIgb2JqZWN0ID0gZmxhZ3NDYWNoZVsgZmxhZ3MgXSA9IHt9LAogICAgICAgICAgICBpLCBsZW5ndGg7CiAgICAgICAgZmxhZ3MgPSBmbGFncy5zcGxpdCggL1xzKy8gKTsKICAgICAgICBmb3IgKCBpID0gMCwgbGVuZ3RoID0gZmxhZ3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgIG9iamVjdFsgZmxhZ3NbaV0gXSA9IHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBvYmplY3Q7CiAgICB9CgogICAgLyoKICAgICAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOgogICAgICoKICAgICAqCWZsYWdzOglhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBmbGFncyB0aGF0IHdpbGwgY2hhbmdlIGhvdwogICAgICoJCQl0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzCiAgICAgKgogICAgICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmUKICAgICAqICJmaXJlZCIgbXVsdGlwbGUgdGltZXMuCiAgICAgKgogICAgICogUG9zc2libGUgZmxhZ3M6CiAgICAgKgogICAgICoJb25jZToJCQl3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpCiAgICAgKgogICAgICoJbWVtb3J5OgkJCXdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWQKICAgICAqCQkJCQlhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCAibWVtb3JpemVkIgogICAgICoJCQkJCXZhbHVlcyAobGlrZSBhIERlZmVycmVkKQogICAgICoKICAgICAqCXVuaXF1ZToJCQl3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdCkKICAgICAqCiAgICAgKglzdG9wT25GYWxzZToJaW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlCiAgICAgKgogICAgICovCiAgICBqUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIGZsYWdzICkgewoKICAgICAgICAvLyBDb252ZXJ0IGZsYWdzIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkCiAgICAgICAgLy8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KQogICAgICAgIGZsYWdzID0gZmxhZ3MgPyAoIGZsYWdzQ2FjaGVbIGZsYWdzIF0gfHwgY3JlYXRlRmxhZ3MoIGZsYWdzICkgKSA6IHt9OwoKICAgICAgICB2YXIgLy8gQWN0dWFsIGNhbGxiYWNrIGxpc3QKICAgICAgICAgICAgbGlzdCA9IFtdLAogICAgICAgIC8vIFN0YWNrIG9mIGZpcmUgY2FsbHMgZm9yIHJlcGVhdGFibGUgbGlzdHMKICAgICAgICAgICAgc3RhY2sgPSBbXSwKICAgICAgICAvLyBMYXN0IGZpcmUgdmFsdWUgKGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHMpCiAgICAgICAgICAgIG1lbW9yeSwKICAgICAgICAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nCiAgICAgICAgICAgIGZpcmluZywKICAgICAgICAvLyBGaXJzdCBjYWxsYmFjayB0byBmaXJlICh1c2VkIGludGVybmFsbHkgYnkgYWRkIGFuZCBmaXJlV2l0aCkKICAgICAgICAgICAgZmlyaW5nU3RhcnQsCiAgICAgICAgLy8gRW5kIG9mIHRoZSBsb29wIHdoZW4gZmlyaW5nCiAgICAgICAgICAgIGZpcmluZ0xlbmd0aCwKICAgICAgICAvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSByZW1vdmUgaWYgbmVlZGVkKQogICAgICAgICAgICBmaXJpbmdJbmRleCwKICAgICAgICAvLyBBZGQgb25lIG9yIHNldmVyYWwgY2FsbGJhY2tzIHRvIHRoZSBsaXN0CiAgICAgICAgICAgIGFkZCA9IGZ1bmN0aW9uKCBhcmdzICkgewogICAgICAgICAgICAgICAgdmFyIGksCiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoLAogICAgICAgICAgICAgICAgICAgIGVsZW0sCiAgICAgICAgICAgICAgICAgICAgdHlwZSwKICAgICAgICAgICAgICAgICAgICBhY3R1YWw7CiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMCwgbGVuZ3RoID0gYXJncy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICBlbGVtID0gYXJnc1sgaSBdOwogICAgICAgICAgICAgICAgICAgIHR5cGUgPSBqUXVlcnkudHlwZSggZWxlbSApOwogICAgICAgICAgICAgICAgICAgIGlmICggdHlwZSA9PT0gImFycmF5IiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5zcGVjdCByZWN1cnNpdmVseQogICAgICAgICAgICAgICAgICAgICAgICBhZGQoIGVsZW0gKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAiZnVuY3Rpb24iICkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgaWYgbm90IGluIHVuaXF1ZSBtb2RlIGFuZCBjYWxsYmFjayBpcyBub3QgaW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhZmxhZ3MudW5pcXVlIHx8ICFzZWxmLmhhcyggZWxlbSApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKCBlbGVtICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgLy8gRmlyZSBjYWxsYmFja3MKICAgICAgICAgICAgZmlyZSA9IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkgewogICAgICAgICAgICAgICAgYXJncyA9IGFyZ3MgfHwgW107CiAgICAgICAgICAgICAgICBtZW1vcnkgPSAhZmxhZ3MubWVtb3J5IHx8IFsgY29udGV4dCwgYXJncyBdOwogICAgICAgICAgICAgICAgZmlyaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGZpcmluZ0luZGV4ID0gZmlyaW5nU3RhcnQgfHwgMDsKICAgICAgICAgICAgICAgIGZpcmluZ1N0YXJ0ID0gMDsKICAgICAgICAgICAgICAgIGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoOwogICAgICAgICAgICAgICAgZm9yICggOyBsaXN0ICYmIGZpcmluZ0luZGV4IDwgZmlyaW5nTGVuZ3RoOyBmaXJpbmdJbmRleCsrICkgewogICAgICAgICAgICAgICAgICAgIGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggY29udGV4dCwgYXJncyApID09PSBmYWxzZSAmJiBmbGFncy5zdG9wT25GYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWVtb3J5ID0gdHJ1ZTsgLy8gTWFyayBhcyBoYWx0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZmlyaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICBpZiAoIGxpc3QgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhZmxhZ3Mub25jZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdGFjayAmJiBzdGFjay5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW1vcnkgPSBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5maXJlV2l0aCggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBtZW1vcnkgPT09IHRydWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzYWJsZSgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QgPSBbXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgLy8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3QKICAgICAgICAgICAgc2VsZiA9IHsKICAgICAgICAgICAgICAgIC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3QKICAgICAgICAgICAgICAgIGFkZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBsaXN0ICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZCggYXJndW1lbnRzICk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvIHdlIG5lZWQgdG8gYWRkIHRoZSBjYWxsYmFja3MgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgZmlyaW5nIGJhdGNoPwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZpcmluZyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2l0aCBtZW1vcnksIGlmIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc2hvdWxkIGNhbGwgcmlnaHQgYXdheSwgdW5sZXNzIHByZXZpb3VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXJpbmcgd2FzIGhhbHRlZCAoc3RvcE9uRmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1lbW9yeSAmJiBtZW1vcnkgIT09IHRydWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJpbmdTdGFydCA9IGxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcmUoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3QKICAgICAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBsaXN0ICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ0luZGV4ID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ0xlbmd0aCA9IGFyZ3MubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCA7IGFyZ0luZGV4IDwgYXJnTGVuZ3RoIDsgYXJnSW5kZXgrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBhcmdzWyBhcmdJbmRleCBdID09PSBsaXN0WyBpIF0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBmaXJpbmdJbmRleCBhbmQgZmlyaW5nTGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZmlyaW5nICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpIDw9IGZpcmluZ0xlbmd0aCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJpbmdMZW5ndGgtLTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGkgPD0gZmlyaW5nSW5kZXggKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcmluZ0luZGV4LS07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZWxlbWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LnNwbGljZSggaS0tLCAxICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgc29tZSB1bmljaXR5IHByb3BlcnR5IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugb25seSBuZWVkIHRvIGRvIHRoaXMgb25jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZsYWdzLnVuaXF1ZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC8vIENvbnRyb2wgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdAogICAgICAgICAgICAgICAgaGFzOiBmdW5jdGlvbiggZm4gKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBsaXN0ICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBsaXN0Lmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZuID09PSBsaXN0WyBpIF0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3QKICAgICAgICAgICAgICAgIGVtcHR5OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBsaXN0ID0gW107CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgLy8gSGF2ZSB0aGUgbGlzdCBkbyBub3RoaW5nIGFueW1vcmUKICAgICAgICAgICAgICAgIGRpc2FibGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGxpc3QgPSBzdGFjayA9IG1lbW9yeSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAvLyBJcyBpdCBkaXNhYmxlZD8KICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWxpc3Q7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgLy8gTG9jayB0aGUgbGlzdCBpbiBpdHMgY3VycmVudCBzdGF0ZQogICAgICAgICAgICAgICAgbG9jazogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhY2sgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhbWVtb3J5IHx8IG1lbW9yeSA9PT0gdHJ1ZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXNhYmxlKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC8vIElzIGl0IGxvY2tlZD8KICAgICAgICAgICAgICAgIGxvY2tlZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFzdGFjazsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzCiAgICAgICAgICAgICAgICBmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBzdGFjayApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBmaXJpbmcgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFmbGFncy5vbmNlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goIFsgY29udGV4dCwgYXJncyBdICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICEoIGZsYWdzLm9uY2UgJiYgbWVtb3J5ICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJlKCBjb250ZXh0LCBhcmdzICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgLy8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHMKICAgICAgICAgICAgICAgIGZpcmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZQogICAgICAgICAgICAgICAgZmlyZWQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhIW1lbW9yeTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIHNlbGY7CiAgICB9OwoKCgoKICAgIHZhciAvLyBTdGF0aWMgcmVmZXJlbmNlIHRvIHNsaWNlCiAgICAgICAgc2xpY2VEZWZlcnJlZCA9IFtdLnNsaWNlOwoKICAgIGpRdWVyeS5leHRlbmQoewoKICAgICAgICBEZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7CiAgICAgICAgICAgIHZhciBkb25lTGlzdCA9IGpRdWVyeS5DYWxsYmFja3MoICJvbmNlIG1lbW9yeSIgKSwKICAgICAgICAgICAgICAgIGZhaWxMaXN0ID0galF1ZXJ5LkNhbGxiYWNrcyggIm9uY2UgbWVtb3J5IiApLAogICAgICAgICAgICAgICAgcHJvZ3Jlc3NMaXN0ID0galF1ZXJ5LkNhbGxiYWNrcyggIm1lbW9yeSIgKSwKICAgICAgICAgICAgICAgIHN0YXRlID0gInBlbmRpbmciLAogICAgICAgICAgICAgICAgbGlzdHMgPSB7CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTogZG9uZUxpc3QsCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0OiBmYWlsTGlzdCwKICAgICAgICAgICAgICAgICAgICBub3RpZnk6IHByb2dyZXNzTGlzdAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHByb21pc2UgPSB7CiAgICAgICAgICAgICAgICAgICAgZG9uZTogZG9uZUxpc3QuYWRkLAogICAgICAgICAgICAgICAgICAgIGZhaWw6IGZhaWxMaXN0LmFkZCwKICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogcHJvZ3Jlc3NMaXN0LmFkZCwKCiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgICAgLy8gRGVwcmVjYXRlZAogICAgICAgICAgICAgICAgICAgIGlzUmVzb2x2ZWQ6IGRvbmVMaXN0LmZpcmVkLAogICAgICAgICAgICAgICAgICAgIGlzUmVqZWN0ZWQ6IGZhaWxMaXN0LmZpcmVkLAoKICAgICAgICAgICAgICAgICAgICB0aGVuOiBmdW5jdGlvbiggZG9uZUNhbGxiYWNrcywgZmFpbENhbGxiYWNrcywgcHJvZ3Jlc3NDYWxsYmFja3MgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLmRvbmUoIGRvbmVDYWxsYmFja3MgKS5mYWlsKCBmYWlsQ2FsbGJhY2tzICkucHJvZ3Jlc3MoIHByb2dyZXNzQ2FsbGJhY2tzICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYWx3YXlzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQuZG9uZS5hcHBseSggZGVmZXJyZWQsIGFyZ3VtZW50cyApLmZhaWwuYXBwbHkoIGRlZmVycmVkLCBhcmd1bWVudHMgKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwaXBlOiBmdW5jdGlvbiggZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24oIG5ld0RlZmVyICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmVhY2goIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiBbIGZuRG9uZSwgInJlc29sdmUiIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbDogWyBmbkZhaWwsICJyZWplY3QiIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IFsgZm5Qcm9ncmVzcywgIm5vdGlmeSIgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oIGhhbmRsZXIsIGRhdGEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gZGF0YVsgMCBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBkYXRhWyAxIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybmVkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkWyBoYW5kbGVyIF0oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5lZCA9IGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5lZC5wcm9taXNlKCkudGhlbiggbmV3RGVmZXIucmVzb2x2ZSwgbmV3RGVmZXIucmVqZWN0LCBuZXdEZWZlci5ub3RpZnkgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RGVmZXJbIGFjdGlvbiArICJXaXRoIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IG5ld0RlZmVyIDogdGhpcywgWyByZXR1cm5lZCBdICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkWyBoYW5kbGVyIF0oIG5ld0RlZmVyWyBhY3Rpb24gXSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9KS5wcm9taXNlKCk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkCiAgICAgICAgICAgICAgICAgICAgLy8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdAogICAgICAgICAgICAgICAgICAgIHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggb2JqID09IG51bGwgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBwcm9taXNlOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGtleSBpbiBwcm9taXNlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialsga2V5IF0gPSBwcm9taXNlWyBrZXkgXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBkZWZlcnJlZCA9IHByb21pc2UucHJvbWlzZSh7fSksCiAgICAgICAgICAgICAgICBrZXk7CgogICAgICAgICAgICBmb3IgKCBrZXkgaW4gbGlzdHMgKSB7CiAgICAgICAgICAgICAgICBkZWZlcnJlZFsga2V5IF0gPSBsaXN0c1sga2V5IF0uZmlyZTsKICAgICAgICAgICAgICAgIGRlZmVycmVkWyBrZXkgKyAiV2l0aCIgXSA9IGxpc3RzWyBrZXkgXS5maXJlV2l0aDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSGFuZGxlIHN0YXRlCiAgICAgICAgICAgIGRlZmVycmVkLmRvbmUoIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgc3RhdGUgPSAicmVzb2x2ZWQiOwogICAgICAgICAgICB9LCBmYWlsTGlzdC5kaXNhYmxlLCBwcm9ncmVzc0xpc3QubG9jayApLmZhaWwoIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHN0YXRlID0gInJlamVjdGVkIjsKICAgICAgICAgICAgICAgIH0sIGRvbmVMaXN0LmRpc2FibGUsIHByb2dyZXNzTGlzdC5sb2NrICk7CgogICAgICAgICAgICAvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55CiAgICAgICAgICAgIGlmICggZnVuYyApIHsKICAgICAgICAgICAgICAgIGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEFsbCBkb25lIQogICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQ7CiAgICAgICAgfSwKCiAgICAgICAgLy8gRGVmZXJyZWQgaGVscGVyCiAgICAgICAgd2hlbjogZnVuY3Rpb24oIGZpcnN0UGFyYW0gKSB7CiAgICAgICAgICAgIHZhciBhcmdzID0gc2xpY2VEZWZlcnJlZC5jYWxsKCBhcmd1bWVudHMsIDAgKSwKICAgICAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGgsCiAgICAgICAgICAgICAgICBwVmFsdWVzID0gbmV3IEFycmF5KCBsZW5ndGggKSwKICAgICAgICAgICAgICAgIGNvdW50ID0gbGVuZ3RoLAogICAgICAgICAgICAgICAgcENvdW50ID0gbGVuZ3RoLAogICAgICAgICAgICAgICAgZGVmZXJyZWQgPSBsZW5ndGggPD0gMSAmJiBmaXJzdFBhcmFtICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBmaXJzdFBhcmFtLnByb21pc2UgKSA/CiAgICAgICAgICAgICAgICAgICAgZmlyc3RQYXJhbSA6CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LkRlZmVycmVkKCksCiAgICAgICAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSgpOwogICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlRnVuYyggaSApIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7CiAgICAgICAgICAgICAgICAgICAgYXJnc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZURlZmVycmVkLmNhbGwoIGFyZ3VtZW50cywgMCApIDogdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhKCAtLWNvdW50ICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmVXaXRoKCBkZWZlcnJlZCwgYXJncyApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZnVuY3Rpb24gcHJvZ3Jlc3NGdW5jKCBpICkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHsKICAgICAgICAgICAgICAgICAgICBwVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlRGVmZXJyZWQuY2FsbCggYXJndW1lbnRzLCAwICkgOiB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5ub3RpZnlXaXRoKCBwcm9taXNlLCBwVmFsdWVzICk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggbGVuZ3RoID4gMSApIHsKICAgICAgICAgICAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkgewogICAgICAgICAgICAgICAgICAgIGlmICggYXJnc1sgaSBdICYmIGFyZ3NbIGkgXS5wcm9taXNlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmdzWyBpIF0ucHJvbWlzZSApICkgewogICAgICAgICAgICAgICAgICAgICAgICBhcmdzWyBpIF0ucHJvbWlzZSgpLnRoZW4oIHJlc29sdmVGdW5jKGkpLCBkZWZlcnJlZC5yZWplY3QsIHByb2dyZXNzRnVuYyhpKSApOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC0tY291bnQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCAhY291bnQgKSB7CiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGRlZmVycmVkLCBhcmdzICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGRlZmVycmVkICE9PSBmaXJzdFBhcmFtICkgewogICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGRlZmVycmVkLCBsZW5ndGggPyBbIGZpcnN0UGFyYW0gXSA6IFtdICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7CiAgICAgICAgfQogICAgfSk7CgoKCgogICAgalF1ZXJ5LnN1cHBvcnQgPSAoZnVuY3Rpb24oKSB7CgogICAgICAgIHZhciBzdXBwb3J0LAogICAgICAgICAgICBhbGwsCiAgICAgICAgICAgIGEsCiAgICAgICAgICAgIHNlbGVjdCwKICAgICAgICAgICAgb3B0LAogICAgICAgICAgICBpbnB1dCwKICAgICAgICAgICAgbWFyZ2luRGl2LAogICAgICAgICAgICBmcmFnbWVudCwKICAgICAgICAgICAgdGRzLAogICAgICAgICAgICBldmVudHMsCiAgICAgICAgICAgIGV2ZW50TmFtZSwKICAgICAgICAgICAgaSwKICAgICAgICAgICAgaXNTdXBwb3J0ZWQsCiAgICAgICAgICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICksCiAgICAgICAgICAgIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKCiAgICAgICAgLy8gUHJlbGltaW5hcnkgdGVzdHMKICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCJjbGFzc05hbWUiLCAidCIpOwogICAgICAgIGRpdi5pbm5lckhUTUwgPSAiICAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJyBzdHlsZT0ndG9wOjFweDtmbG9hdDpsZWZ0O29wYWNpdHk6LjU1Oyc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz4iOwoKICAgICAgICBhbGwgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICIqIiApOwogICAgICAgIGEgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJhIiApWyAwIF07CgogICAgICAgIC8vIENhbid0IGdldCBiYXNpYyB0ZXN0IHN1cHBvcnQKICAgICAgICBpZiAoICFhbGwgfHwgIWFsbC5sZW5ndGggfHwgIWEgKSB7CiAgICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICB9CgogICAgICAgIC8vIEZpcnN0IGJhdGNoIG9mIHN1cHBvcnRzIHRlc3RzCiAgICAgICAgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggInNlbGVjdCIgKTsKICAgICAgICBvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpICk7CiAgICAgICAgaW5wdXQgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJpbnB1dCIgKVsgMCBdOwoKICAgICAgICBzdXBwb3J0ID0gewogICAgICAgICAgICAvLyBJRSBzdHJpcHMgbGVhZGluZyB3aGl0ZXNwYWNlIHdoZW4gLmlubmVySFRNTCBpcyB1c2VkCiAgICAgICAgICAgIGxlYWRpbmdXaGl0ZXNwYWNlOiAoIGRpdi5maXJzdENoaWxkLm5vZGVUeXBlID09PSAzICksCgogICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0Ym9keSBlbGVtZW50cyBhcmVuJ3QgYXV0b21hdGljYWxseSBpbnNlcnRlZAogICAgICAgICAgICAvLyBJRSB3aWxsIGluc2VydCB0aGVtIGludG8gZW1wdHkgdGFibGVzCiAgICAgICAgICAgIHRib2R5OiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJ0Ym9keSIpLmxlbmd0aCwKCiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGxpbmsgZWxlbWVudHMgZ2V0IHNlcmlhbGl6ZWQgY29ycmVjdGx5IGJ5IGlubmVySFRNTAogICAgICAgICAgICAvLyBUaGlzIHJlcXVpcmVzIGEgd3JhcHBlciBlbGVtZW50IGluIElFCiAgICAgICAgICAgIGh0bWxTZXJpYWxpemU6ICEhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJsaW5rIikubGVuZ3RoLAoKICAgICAgICAgICAgLy8gR2V0IHRoZSBzdHlsZSBpbmZvcm1hdGlvbiBmcm9tIGdldEF0dHJpYnV0ZQogICAgICAgICAgICAvLyAoSUUgdXNlcyAuY3NzVGV4dCBpbnN0ZWFkKQogICAgICAgICAgICBzdHlsZTogL3RvcC8udGVzdCggYS5nZXRBdHRyaWJ1dGUoInN0eWxlIikgKSwKCiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IFVSTHMgYXJlbid0IG1hbmlwdWxhdGVkCiAgICAgICAgICAgIC8vIChJRSBub3JtYWxpemVzIGl0IGJ5IGRlZmF1bHQpCiAgICAgICAgICAgIGhyZWZOb3JtYWxpemVkOiAoIGEuZ2V0QXR0cmlidXRlKCJocmVmIikgPT09ICIvYSIgKSwKCiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGVsZW1lbnQgb3BhY2l0eSBleGlzdHMKICAgICAgICAgICAgLy8gKElFIHVzZXMgZmlsdGVyIGluc3RlYWQpCiAgICAgICAgICAgIC8vIFVzZSBhIHJlZ2V4IHRvIHdvcmsgYXJvdW5kIGEgV2ViS2l0IGlzc3VlLiBTZWUgIzUxNDUKICAgICAgICAgICAgb3BhY2l0eTogL14wLjU1Ly50ZXN0KCBhLnN0eWxlLm9wYWNpdHkgKSwKCiAgICAgICAgICAgIC8vIFZlcmlmeSBzdHlsZSBmbG9hdCBleGlzdGVuY2UKICAgICAgICAgICAgLy8gKElFIHVzZXMgc3R5bGVGbG9hdCBpbnN0ZWFkIG9mIGNzc0Zsb2F0KQogICAgICAgICAgICBjc3NGbG9hdDogISFhLnN0eWxlLmNzc0Zsb2F0LAoKICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgaWYgbm8gdmFsdWUgaXMgc3BlY2lmaWVkIGZvciBhIGNoZWNrYm94CiAgICAgICAgICAgIC8vIHRoYXQgaXQgZGVmYXVsdHMgdG8gIm9uIi4KICAgICAgICAgICAgLy8gKFdlYktpdCBkZWZhdWx0cyB0byAiIiBpbnN0ZWFkKQogICAgICAgICAgICBjaGVja09uOiAoIGlucHV0LnZhbHVlID09PSAib24iICksCgogICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCBhIHNlbGVjdGVkLWJ5LWRlZmF1bHQgb3B0aW9uIGhhcyBhIHdvcmtpbmcgc2VsZWN0ZWQgcHJvcGVydHkuCiAgICAgICAgICAgIC8vIChXZWJLaXQgZGVmYXVsdHMgdG8gZmFsc2UgaW5zdGVhZCBvZiB0cnVlLCBJRSB0b28sIGlmIGl0J3MgaW4gYW4gb3B0Z3JvdXApCiAgICAgICAgICAgIG9wdFNlbGVjdGVkOiBvcHQuc2VsZWN0ZWQsCgogICAgICAgICAgICAvLyBUZXN0IHNldEF0dHJpYnV0ZSBvbiBjYW1lbENhc2UgY2xhc3MuIElmIGl0IHdvcmtzLCB3ZSBuZWVkIGF0dHJGaXhlcyB3aGVuIGRvaW5nIGdldC9zZXRBdHRyaWJ1dGUgKGllNi83KQogICAgICAgICAgICBnZXRTZXRBdHRyaWJ1dGU6IGRpdi5jbGFzc05hbWUgIT09ICJ0IiwKCiAgICAgICAgICAgIC8vIFRlc3RzIGZvciBlbmN0eXBlIHN1cHBvcnQgb24gYSBmb3JtKCM2NzQzKQogICAgICAgICAgICBlbmN0eXBlOiAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImZvcm0iKS5lbmN0eXBlLAoKICAgICAgICAgICAgLy8gTWFrZXMgc3VyZSBjbG9uaW5nIGFuIGh0bWw1IGVsZW1lbnQgZG9lcyBub3QgY2F1c2UgcHJvYmxlbXMKICAgICAgICAgICAgLy8gV2hlcmUgb3V0ZXJIVE1MIGlzIHVuZGVmaW5lZCwgdGhpcyBzdGlsbCB3b3JrcwogICAgICAgICAgICBodG1sNUNsb25lOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJuYXYiKS5jbG9uZU5vZGUoIHRydWUgKS5vdXRlckhUTUwgIT09ICI8Om5hdj48LzpuYXY+IiwKCiAgICAgICAgICAgIC8vIFdpbGwgYmUgZGVmaW5lZCBsYXRlcgogICAgICAgICAgICBzdWJtaXRCdWJibGVzOiB0cnVlLAogICAgICAgICAgICBjaGFuZ2VCdWJibGVzOiB0cnVlLAogICAgICAgICAgICBmb2N1c2luQnViYmxlczogZmFsc2UsCiAgICAgICAgICAgIGRlbGV0ZUV4cGFuZG86IHRydWUsCiAgICAgICAgICAgIG5vQ2xvbmVFdmVudDogdHJ1ZSwKICAgICAgICAgICAgaW5saW5lQmxvY2tOZWVkc0xheW91dDogZmFsc2UsCiAgICAgICAgICAgIHNocmlua1dyYXBCbG9ja3M6IGZhbHNlLAogICAgICAgICAgICByZWxpYWJsZU1hcmdpblJpZ2h0OiB0cnVlCiAgICAgICAgfTsKCiAgICAgICAgLy8gTWFrZSBzdXJlIGNoZWNrZWQgc3RhdHVzIGlzIHByb3Blcmx5IGNsb25lZAogICAgICAgIGlucHV0LmNoZWNrZWQgPSB0cnVlOwogICAgICAgIHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSBpbnB1dC5jbG9uZU5vZGUoIHRydWUgKS5jaGVja2VkOwoKICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgb3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmVuJ3QgbWFya2VkIGFzIGRpc2FibGVkCiAgICAgICAgLy8gKFdlYktpdCBtYXJrcyB0aGVtIGFzIGRpc2FibGVkKQogICAgICAgIHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7CiAgICAgICAgc3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7CgogICAgICAgIC8vIFRlc3QgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZGVsZXRlIGFuIGV4cGFuZG8gZnJvbSBhbiBlbGVtZW50CiAgICAgICAgLy8gRmFpbHMgaW4gSW50ZXJuZXQgRXhwbG9yZXIKICAgICAgICB0cnkgewogICAgICAgICAgICBkZWxldGUgZGl2LnRlc3Q7CiAgICAgICAgfSBjYXRjaCggZSApIHsKICAgICAgICAgICAgc3VwcG9ydC5kZWxldGVFeHBhbmRvID0gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAoICFkaXYuYWRkRXZlbnRMaXN0ZW5lciAmJiBkaXYuYXR0YWNoRXZlbnQgJiYgZGl2LmZpcmVFdmVudCApIHsKICAgICAgICAgICAgZGl2LmF0dGFjaEV2ZW50KCAib25jbGljayIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgLy8gQ2xvbmluZyBhIG5vZGUgc2hvdWxkbid0IGNvcHkgb3ZlciBhbnkKICAgICAgICAgICAgICAgIC8vIGJvdW5kIGV2ZW50IGhhbmRsZXJzIChJRSBkb2VzIHRoaXMpCiAgICAgICAgICAgICAgICBzdXBwb3J0Lm5vQ2xvbmVFdmVudCA9IGZhbHNlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZGl2LmNsb25lTm9kZSggdHJ1ZSApLmZpcmVFdmVudCggIm9uY2xpY2siICk7CiAgICAgICAgfQoKICAgICAgICAvLyBDaGVjayBpZiBhIHJhZGlvIG1haW50YWlucyBpdHMgdmFsdWUKICAgICAgICAvLyBhZnRlciBiZWluZyBhcHBlbmRlZCB0byB0aGUgRE9NCiAgICAgICAgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogICAgICAgIGlucHV0LnZhbHVlID0gInQiOwogICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgidHlwZSIsICJyYWRpbyIpOwogICAgICAgIHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSAidCI7CgogICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgiY2hlY2tlZCIsICJjaGVja2VkIik7CiAgICAgICAgZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApOwogICAgICAgIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwogICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKCBkaXYubGFzdENoaWxkICk7CgogICAgICAgIC8vIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50cwogICAgICAgIHN1cHBvcnQuY2hlY2tDbG9uZSA9IGZyYWdtZW50LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkOwoKICAgICAgICAvLyBDaGVjayBpZiBhIGRpc2Nvbm5lY3RlZCBjaGVja2JveCB3aWxsIHJldGFpbiBpdHMgY2hlY2tlZAogICAgICAgIC8vIHZhbHVlIG9mIHRydWUgYWZ0ZXIgYXBwZW5kZWQgdG8gdGhlIERPTSAoSUU2LzcpCiAgICAgICAgc3VwcG9ydC5hcHBlbmRDaGVja2VkID0gaW5wdXQuY2hlY2tlZDsKCiAgICAgICAgZnJhZ21lbnQucmVtb3ZlQ2hpbGQoIGlucHV0ICk7CiAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRpdiApOwoKICAgICAgICBkaXYuaW5uZXJIVE1MID0gIiI7CgogICAgICAgIC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHkKICAgICAgICAvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIuIEZvciBtb3JlCiAgICAgICAgLy8gaW5mbyBzZWUgYnVnICMzMzMzCiAgICAgICAgLy8gRmFpbHMgaW4gV2ViS2l0IGJlZm9yZSBGZWIgMjAxMSBuaWdodGxpZXMKICAgICAgICAvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHQKICAgICAgICBpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICkgewogICAgICAgICAgICBtYXJnaW5EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApOwogICAgICAgICAgICBtYXJnaW5EaXYuc3R5bGUud2lkdGggPSAiMCI7CiAgICAgICAgICAgIG1hcmdpbkRpdi5zdHlsZS5tYXJnaW5SaWdodCA9ICIwIjsKICAgICAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gIjJweCI7CiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZCggbWFyZ2luRGl2ICk7CiAgICAgICAgICAgIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCA9CiAgICAgICAgICAgICAgICAoIHBhcnNlSW50KCAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBtYXJnaW5EaXYsIG51bGwgKSB8fCB7IG1hcmdpblJpZ2h0OiAwIH0gKS5tYXJnaW5SaWdodCwgMTAgKSB8fCAwICkgPT09IDA7CiAgICAgICAgfQoKICAgICAgICAvLyBUZWNobmlxdWUgZnJvbSBKdXJpeSBaYXl0c2V2CiAgICAgICAgLy8gaHR0cDovL3BlcmZlY3Rpb25raWxscy5jb20vZGV0ZWN0aW5nLWV2ZW50LXN1cHBvcnQtd2l0aG91dC1icm93c2VyLXNuaWZmaW5nLwogICAgICAgIC8vIFdlIG9ubHkgY2FyZSBhYm91dCB0aGUgY2FzZSB3aGVyZSBub24tc3RhbmRhcmQgZXZlbnQgc3lzdGVtcwogICAgICAgIC8vIGFyZSB1c2VkLCBuYW1lbHkgaW4gSUUuIFNob3J0LWNpcmN1aXRpbmcgaGVyZSBoZWxwcyB1cyB0bwogICAgICAgIC8vIGF2b2lkIGFuIGV2YWwgY2FsbCAoaW4gc2V0QXR0cmlidXRlKSB3aGljaCBjYW4gY2F1c2UgQ1NQCiAgICAgICAgLy8gdG8gZ28gaGF5d2lyZS4gU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9TZWN1cml0eS9DU1AKICAgICAgICBpZiAoIGRpdi5hdHRhY2hFdmVudCApIHsKICAgICAgICAgICAgZm9yKCBpIGluIHsKICAgICAgICAgICAgICAgIHN1Ym1pdDogMSwKICAgICAgICAgICAgICAgIGNoYW5nZTogMSwKICAgICAgICAgICAgICAgIGZvY3VzaW46IDEKICAgICAgICAgICAgfSkgewogICAgICAgICAgICAgICAgZXZlbnROYW1lID0gIm9uIiArIGk7CiAgICAgICAgICAgICAgICBpc1N1cHBvcnRlZCA9ICggZXZlbnROYW1lIGluIGRpdiApOwogICAgICAgICAgICAgICAgaWYgKCAhaXNTdXBwb3J0ZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgZGl2LnNldEF0dHJpYnV0ZSggZXZlbnROYW1lLCAicmV0dXJuOyIgKTsKICAgICAgICAgICAgICAgICAgICBpc1N1cHBvcnRlZCA9ICggdHlwZW9mIGRpdlsgZXZlbnROYW1lIF0gPT09ICJmdW5jdGlvbiIgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN1cHBvcnRbIGkgKyAiQnViYmxlcyIgXSA9IGlzU3VwcG9ydGVkOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmcmFnbWVudC5yZW1vdmVDaGlsZCggZGl2ICk7CgogICAgICAgIC8vIE51bGwgZWxlbWVudHMgdG8gYXZvaWQgbGVha3MgaW4gSUUKICAgICAgICBmcmFnbWVudCA9IHNlbGVjdCA9IG9wdCA9IG1hcmdpbkRpdiA9IGRpdiA9IGlucHV0ID0gbnVsbDsKCiAgICAgICAgLy8gUnVuIHRlc3RzIHRoYXQgbmVlZCBhIGJvZHkgYXQgZG9jIHJlYWR5CiAgICAgICAgalF1ZXJ5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgY29udGFpbmVyLCBvdXRlciwgaW5uZXIsIHRhYmxlLCB0ZCwgb2Zmc2V0U3VwcG9ydCwKICAgICAgICAgICAgICAgIGNvbk1hcmdpblRvcCwgcHRsbSwgdmIsIHN0eWxlLCBodG1sLAogICAgICAgICAgICAgICAgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF07CgogICAgICAgICAgICBpZiAoICFib2R5ICkgewogICAgICAgICAgICAgICAgLy8gUmV0dXJuIGZvciBmcmFtZXNldCBkb2NzIHRoYXQgZG9uJ3QgaGF2ZSBhIGJvZHkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uTWFyZ2luVG9wID0gMTsKICAgICAgICAgICAgcHRsbSA9ICJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6MXB4O2hlaWdodDoxcHg7bWFyZ2luOjA7IjsKICAgICAgICAgICAgdmIgPSAidmlzaWJpbGl0eTpoaWRkZW47Ym9yZGVyOjA7IjsKICAgICAgICAgICAgc3R5bGUgPSAic3R5bGU9JyIgKyBwdGxtICsgImJvcmRlcjo1cHggc29saWQgIzAwMDtwYWRkaW5nOjA7JyI7CiAgICAgICAgICAgIGh0bWwgPSAiPGRpdiAiICsgc3R5bGUgKyAiPjxkaXY+PC9kaXY+PC9kaXY+IiArCiAgICAgICAgICAgICAgICAiPHRhYmxlICIgKyBzdHlsZSArICIgY2VsbHBhZGRpbmc9JzAnIGNlbGxzcGFjaW5nPScwJz4iICsKICAgICAgICAgICAgICAgICI8dHI+PHRkPjwvdGQ+PC90cj48L3RhYmxlPiI7CgogICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSB2YiArICJ3aWR0aDowO2hlaWdodDowO3Bvc2l0aW9uOnN0YXRpYzt0b3A6MDttYXJnaW4tdG9wOiIgKyBjb25NYXJnaW5Ub3AgKyAicHgiOwogICAgICAgICAgICBib2R5Lmluc2VydEJlZm9yZSggY29udGFpbmVyLCBib2R5LmZpcnN0Q2hpbGQgKTsKCiAgICAgICAgICAgIC8vIENvbnN0cnVjdCB0aGUgdGVzdCBlbGVtZW50CiAgICAgICAgICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApOwoKICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGFibGUgY2VsbHMgc3RpbGwgaGF2ZSBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB0aGV5IGFyZSBzZXQKICAgICAgICAgICAgLy8gdG8gZGlzcGxheTpub25lIGFuZCB0aGVyZSBhcmUgc3RpbGwgb3RoZXIgdmlzaWJsZSB0YWJsZSBjZWxscyBpbiBhCiAgICAgICAgICAgIC8vIHRhYmxlIHJvdzsgaWYgc28sIG9mZnNldFdpZHRoL0hlaWdodCBhcmUgbm90IHJlbGlhYmxlIGZvciB1c2Ugd2hlbgogICAgICAgICAgICAvLyBkZXRlcm1pbmluZyBpZiBhbiBlbGVtZW50IGhhcyBiZWVuIGhpZGRlbiBkaXJlY3RseSB1c2luZwogICAgICAgICAgICAvLyBkaXNwbGF5Om5vbmUgKGl0IGlzIHN0aWxsIHNhZmUgdG8gdXNlIG9mZnNldHMgaWYgYSBwYXJlbnQgZWxlbWVudCBpcwogICAgICAgICAgICAvLyBoaWRkZW47IGRvbiBzYWZldHkgZ29nZ2xlcyBhbmQgc2VlIGJ1ZyAjNDUxMiBmb3IgbW9yZSBpbmZvcm1hdGlvbikuCiAgICAgICAgICAgIC8vIChvbmx5IElFIDggZmFpbHMgdGhpcyB0ZXN0KQogICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gIjx0YWJsZT48dHI+PHRkIHN0eWxlPSdwYWRkaW5nOjA7Ym9yZGVyOjA7ZGlzcGxheTpub25lJz48L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+IjsKICAgICAgICAgICAgdGRzID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAidGQiICk7CiAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gKCB0ZHNbIDAgXS5vZmZzZXRIZWlnaHQgPT09IDAgKTsKCiAgICAgICAgICAgIHRkc1sgMCBdLnN0eWxlLmRpc3BsYXkgPSAiIjsKICAgICAgICAgICAgdGRzWyAxIF0uc3R5bGUuZGlzcGxheSA9ICJub25lIjsKCiAgICAgICAgICAgIC8vIENoZWNrIGlmIGVtcHR5IHRhYmxlIGNlbGxzIHN0aWxsIGhhdmUgb2Zmc2V0V2lkdGgvSGVpZ2h0CiAgICAgICAgICAgIC8vIChJRSA8PSA4IGZhaWwgdGhpcyB0ZXN0KQogICAgICAgICAgICBzdXBwb3J0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cyA9IGlzU3VwcG9ydGVkICYmICggdGRzWyAwIF0ub2Zmc2V0SGVpZ2h0ID09PSAwICk7CgogICAgICAgICAgICAvLyBGaWd1cmUgb3V0IGlmIHRoZSBXM0MgYm94IG1vZGVsIHdvcmtzIGFzIGV4cGVjdGVkCiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAiIjsKICAgICAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gZGl2LnN0eWxlLnBhZGRpbmdMZWZ0ID0gIjFweCI7CiAgICAgICAgICAgIGpRdWVyeS5ib3hNb2RlbCA9IHN1cHBvcnQuYm94TW9kZWwgPSBkaXYub2Zmc2V0V2lkdGggPT09IDI7CgogICAgICAgICAgICBpZiAoIHR5cGVvZiBkaXYuc3R5bGUuem9vbSAhPT0gInVuZGVmaW5lZCIgKSB7CiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBuYXRpdmVseSBibG9jay1sZXZlbCBlbGVtZW50cyBhY3QgbGlrZSBpbmxpbmUtYmxvY2sKICAgICAgICAgICAgICAgIC8vIGVsZW1lbnRzIHdoZW4gc2V0dGluZyB0aGVpciBkaXNwbGF5IHRvICdpbmxpbmUnIGFuZCBnaXZpbmcKICAgICAgICAgICAgICAgIC8vIHRoZW0gbGF5b3V0CiAgICAgICAgICAgICAgICAvLyAoSUUgPCA4IGRvZXMgdGhpcykKICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5kaXNwbGF5ID0gImlubGluZSI7CiAgICAgICAgICAgICAgICBkaXYuc3R5bGUuem9vbSA9IDE7CiAgICAgICAgICAgICAgICBzdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgPSAoIGRpdi5vZmZzZXRXaWR0aCA9PT0gMiApOwoKICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGVsZW1lbnRzIHdpdGggbGF5b3V0IHNocmluay13cmFwIHRoZWlyIGNoaWxkcmVuCiAgICAgICAgICAgICAgICAvLyAoSUUgNiBkb2VzIHRoaXMpCiAgICAgICAgICAgICAgICBkaXYuc3R5bGUuZGlzcGxheSA9ICIiOwogICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9ICI8ZGl2IHN0eWxlPSd3aWR0aDo0cHg7Jz48L2Rpdj4iOwogICAgICAgICAgICAgICAgc3VwcG9ydC5zaHJpbmtXcmFwQmxvY2tzID0gKCBkaXYub2Zmc2V0V2lkdGggIT09IDIgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZGl2LnN0eWxlLmNzc1RleHQgPSBwdGxtICsgdmI7CiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sOwoKICAgICAgICAgICAgb3V0ZXIgPSBkaXYuZmlyc3RDaGlsZDsKICAgICAgICAgICAgaW5uZXIgPSBvdXRlci5maXJzdENoaWxkOwogICAgICAgICAgICB0ZCA9IG91dGVyLm5leHRTaWJsaW5nLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZDsKCiAgICAgICAgICAgIG9mZnNldFN1cHBvcnQgPSB7CiAgICAgICAgICAgICAgICBkb2VzTm90QWRkQm9yZGVyOiAoIGlubmVyLm9mZnNldFRvcCAhPT0gNSApLAogICAgICAgICAgICAgICAgZG9lc0FkZEJvcmRlckZvclRhYmxlQW5kQ2VsbHM6ICggdGQub2Zmc2V0VG9wID09PSA1ICkKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGlubmVyLnN0eWxlLnBvc2l0aW9uID0gImZpeGVkIjsKICAgICAgICAgICAgaW5uZXIuc3R5bGUudG9wID0gIjIwcHgiOwoKICAgICAgICAgICAgLy8gc2FmYXJpIHN1YnRyYWN0cyBwYXJlbnQgYm9yZGVyIHdpZHRoIGhlcmUgd2hpY2ggaXMgNXB4CiAgICAgICAgICAgIG9mZnNldFN1cHBvcnQuZml4ZWRQb3NpdGlvbiA9ICggaW5uZXIub2Zmc2V0VG9wID09PSAyMCB8fCBpbm5lci5vZmZzZXRUb3AgPT09IDE1ICk7CiAgICAgICAgICAgIGlubmVyLnN0eWxlLnBvc2l0aW9uID0gaW5uZXIuc3R5bGUudG9wID0gIiI7CgogICAgICAgICAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9ICJoaWRkZW4iOwogICAgICAgICAgICBvdXRlci5zdHlsZS5wb3NpdGlvbiA9ICJyZWxhdGl2ZSI7CgogICAgICAgICAgICBvZmZzZXRTdXBwb3J0LnN1YnRyYWN0c0JvcmRlckZvck92ZXJmbG93Tm90VmlzaWJsZSA9ICggaW5uZXIub2Zmc2V0VG9wID09PSAtNSApOwogICAgICAgICAgICBvZmZzZXRTdXBwb3J0LmRvZXNOb3RJbmNsdWRlTWFyZ2luSW5Cb2R5T2Zmc2V0ID0gKCBib2R5Lm9mZnNldFRvcCAhPT0gY29uTWFyZ2luVG9wICk7CgogICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTsKICAgICAgICAgICAgZGl2ICA9IGNvbnRhaW5lciA9IG51bGw7CgogICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCBvZmZzZXRTdXBwb3J0ICk7CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBzdXBwb3J0OwogICAgfSkoKTsKCgoKCiAgICB2YXIgcmJyYWNlID0gL14oPzpcey4qXH18XFsuKlxdKSQvLAogICAgICAgIHJtdWx0aURhc2ggPSAvKFtBLVpdKS9nOwoKICAgIGpRdWVyeS5leHRlbmQoewogICAgICAgIGNhY2hlOiB7fSwKCiAgICAgICAgLy8gUGxlYXNlIHVzZSB3aXRoIGNhdXRpb24KICAgICAgICB1dWlkOiAwLAoKICAgICAgICAvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2UKICAgICAgICAvLyBOb24tZGlnaXRzIHJlbW92ZWQgdG8gbWF0Y2ggcmlubGluZWpRdWVyeQogICAgICAgIGV4cGFuZG86ICJqUXVlcnkiICsgKCBqUXVlcnkuZm4uanF1ZXJ5ICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cRC9nLCAiIiApLAoKICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGVsZW1lbnRzIHRocm93IHVuY2F0Y2hhYmxlIGV4Y2VwdGlvbnMgaWYgeW91CiAgICAgICAgLy8gYXR0ZW1wdCB0byBhZGQgZXhwYW5kbyBwcm9wZXJ0aWVzIHRvIHRoZW0uCiAgICAgICAgbm9EYXRhOiB7CiAgICAgICAgICAgICJlbWJlZCI6IHRydWUsCiAgICAgICAgICAgIC8vIEJhbiBhbGwgb2JqZWN0cyBleGNlcHQgZm9yIEZsYXNoICh3aGljaCBoYW5kbGUgZXhwYW5kb3MpCiAgICAgICAgICAgICJvYmplY3QiOiAiY2xzaWQ6RDI3Q0RCNkUtQUU2RC0xMWNmLTk2QjgtNDQ0NTUzNTQwMDAwIiwKICAgICAgICAgICAgImFwcGxldCI6IHRydWUKICAgICAgICB9LAoKICAgICAgICBoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgICAgZWxlbSA9IGVsZW0ubm9kZVR5cGUgPyBqUXVlcnkuY2FjaGVbIGVsZW1balF1ZXJ5LmV4cGFuZG9dIF0gOiBlbGVtWyBqUXVlcnkuZXhwYW5kbyBdOwogICAgICAgICAgICByZXR1cm4gISFlbGVtICYmICFpc0VtcHR5RGF0YU9iamVjdCggZWxlbSApOwogICAgICAgIH0sCgogICAgICAgIGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhLCBwdnQgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7CiAgICAgICAgICAgIGlmICggIWpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBwcml2YXRlQ2FjaGUsIHRoaXNDYWNoZSwgcmV0LAogICAgICAgICAgICAgICAgaW50ZXJuYWxLZXkgPSBqUXVlcnkuZXhwYW5kbywKICAgICAgICAgICAgICAgIGdldEJ5TmFtZSA9IHR5cGVvZiBuYW1lID09PSAic3RyaW5nIiwKCiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gaGFuZGxlIERPTSBub2RlcyBhbmQgSlMgb2JqZWN0cyBkaWZmZXJlbnRseSBiZWNhdXNlIElFNi03CiAgICAgICAgICAgIC8vIGNhbid0IEdDIG9iamVjdCByZWZlcmVuY2VzIHByb3Blcmx5IGFjcm9zcyB0aGUgRE9NLUpTIGJvdW5kYXJ5CiAgICAgICAgICAgICAgICBpc05vZGUgPSBlbGVtLm5vZGVUeXBlLAoKICAgICAgICAgICAgLy8gT25seSBET00gbm9kZXMgbmVlZCB0aGUgZ2xvYmFsIGpRdWVyeSBjYWNoZTsgSlMgb2JqZWN0IGRhdGEgaXMKICAgICAgICAgICAgLy8gYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlIG9iamVjdCBzbyBHQyBjYW4gb2NjdXIgYXV0b21hdGljYWxseQogICAgICAgICAgICAgICAgY2FjaGUgPSBpc05vZGUgPyBqUXVlcnkuY2FjaGUgOiBlbGVtLAoKICAgICAgICAgICAgLy8gT25seSBkZWZpbmluZyBhbiBJRCBmb3IgSlMgb2JqZWN0cyBpZiBpdHMgY2FjaGUgYWxyZWFkeSBleGlzdHMgYWxsb3dzCiAgICAgICAgICAgIC8vIHRoZSBjb2RlIHRvIHNob3J0Y3V0IG9uIHRoZSBzYW1lIHBhdGggYXMgYSBET00gbm9kZSB3aXRoIG5vIGNhY2hlCiAgICAgICAgICAgICAgICBpZCA9IGlzTm9kZSA/IGVsZW1bIGludGVybmFsS2V5IF0gOiBlbGVtWyBpbnRlcm5hbEtleSBdICYmIGludGVybmFsS2V5LAogICAgICAgICAgICAgICAgaXNFdmVudHMgPSBuYW1lID09PSAiZXZlbnRzIjsKCiAgICAgICAgICAgIC8vIEF2b2lkIGRvaW5nIGFueSBtb3JlIHdvcmsgdGhhbiB3ZSBuZWVkIHRvIHdoZW4gdHJ5aW5nIHRvIGdldCBkYXRhIG9uIGFuCiAgICAgICAgICAgIC8vIG9iamVjdCB0aGF0IGhhcyBubyBkYXRhIGF0IGFsbAogICAgICAgICAgICBpZiAoICghaWQgfHwgIWNhY2hlW2lkXSB8fCAoIWlzRXZlbnRzICYmICFwdnQgJiYgIWNhY2hlW2lkXS5kYXRhKSkgJiYgZ2V0QnlOYW1lICYmIGRhdGEgPT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCAhaWQgKSB7CiAgICAgICAgICAgICAgICAvLyBPbmx5IERPTSBub2RlcyBuZWVkIGEgbmV3IHVuaXF1ZSBJRCBmb3IgZWFjaCBlbGVtZW50IHNpbmNlIHRoZWlyIGRhdGEKICAgICAgICAgICAgICAgIC8vIGVuZHMgdXAgaW4gdGhlIGdsb2JhbCBjYWNoZQogICAgICAgICAgICAgICAgaWYgKCBpc05vZGUgKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbVsgaW50ZXJuYWxLZXkgXSA9IGlkID0gKytqUXVlcnkudXVpZDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWQgPSBpbnRlcm5hbEtleTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCAhY2FjaGVbIGlkIF0gKSB7CiAgICAgICAgICAgICAgICBjYWNoZVsgaWQgXSA9IHt9OwoKICAgICAgICAgICAgICAgIC8vIEF2b2lkcyBleHBvc2luZyBqUXVlcnkgbWV0YWRhdGEgb24gcGxhaW4gSlMgb2JqZWN0cyB3aGVuIHRoZSBvYmplY3QKICAgICAgICAgICAgICAgIC8vIGlzIHNlcmlhbGl6ZWQgdXNpbmcgSlNPTi5zdHJpbmdpZnkKICAgICAgICAgICAgICAgIGlmICggIWlzTm9kZSApIHsKICAgICAgICAgICAgICAgICAgICBjYWNoZVsgaWQgXS50b0pTT04gPSBqUXVlcnkubm9vcDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQW4gb2JqZWN0IGNhbiBiZSBwYXNzZWQgdG8galF1ZXJ5LmRhdGEgaW5zdGVhZCBvZiBhIGtleS92YWx1ZSBwYWlyOyB0aGlzIGdldHMKICAgICAgICAgICAgLy8gc2hhbGxvdyBjb3BpZWQgb3ZlciBvbnRvIHRoZSBleGlzdGluZyBjYWNoZQogICAgICAgICAgICBpZiAoIHR5cGVvZiBuYW1lID09PSAib2JqZWN0IiB8fCB0eXBlb2YgbmFtZSA9PT0gImZ1bmN0aW9uIiApIHsKICAgICAgICAgICAgICAgIGlmICggcHZ0ICkgewogICAgICAgICAgICAgICAgICAgIGNhY2hlWyBpZCBdID0galF1ZXJ5LmV4dGVuZCggY2FjaGVbIGlkIF0sIG5hbWUgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY2FjaGVbIGlkIF0uZGF0YSA9IGpRdWVyeS5leHRlbmQoIGNhY2hlWyBpZCBdLmRhdGEsIG5hbWUgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcHJpdmF0ZUNhY2hlID0gdGhpc0NhY2hlID0gY2FjaGVbIGlkIF07CgogICAgICAgICAgICAvLyBqUXVlcnkgZGF0YSgpIGlzIHN0b3JlZCBpbiBhIHNlcGFyYXRlIG9iamVjdCBpbnNpZGUgdGhlIG9iamVjdCdzIGludGVybmFsIGRhdGEKICAgICAgICAgICAgLy8gY2FjaGUgaW4gb3JkZXIgdG8gYXZvaWQga2V5IGNvbGxpc2lvbnMgYmV0d2VlbiBpbnRlcm5hbCBkYXRhIGFuZCB1c2VyLWRlZmluZWQKICAgICAgICAgICAgLy8gZGF0YS4KICAgICAgICAgICAgaWYgKCAhcHZ0ICkgewogICAgICAgICAgICAgICAgaWYgKCAhdGhpc0NhY2hlLmRhdGEgKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpc0NhY2hlLmRhdGEgPSB7fTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzQ2FjaGUgPSB0aGlzQ2FjaGUuZGF0YTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICB0aGlzQ2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSBdID0gZGF0YTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gVXNlcnMgc2hvdWxkIG5vdCBhdHRlbXB0IHRvIGluc3BlY3QgdGhlIGludGVybmFsIGV2ZW50cyBvYmplY3QgdXNpbmcgalF1ZXJ5LmRhdGEsCiAgICAgICAgICAgIC8vIGl0IGlzIHVuZG9jdW1lbnRlZCBhbmQgc3ViamVjdCB0byBjaGFuZ2UuIEJ1dCBkb2VzIGFueW9uZSBsaXN0ZW4/IE5vLgogICAgICAgICAgICBpZiAoIGlzRXZlbnRzICYmICF0aGlzQ2FjaGVbIG5hbWUgXSApIHsKICAgICAgICAgICAgICAgIHJldHVybiBwcml2YXRlQ2FjaGUuZXZlbnRzOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBDaGVjayBmb3IgYm90aCBjb252ZXJ0ZWQtdG8tY2FtZWwgYW5kIG5vbi1jb252ZXJ0ZWQgZGF0YSBwcm9wZXJ0eSBuYW1lcwogICAgICAgICAgICAvLyBJZiBhIGRhdGEgcHJvcGVydHkgd2FzIHNwZWNpZmllZAogICAgICAgICAgICBpZiAoIGdldEJ5TmFtZSApIHsKCiAgICAgICAgICAgICAgICAvLyBGaXJzdCBUcnkgdG8gZmluZCBhcy1pcyBwcm9wZXJ0eSBkYXRhCiAgICAgICAgICAgICAgICByZXQgPSB0aGlzQ2FjaGVbIG5hbWUgXTsKCiAgICAgICAgICAgICAgICAvLyBUZXN0IGZvciBudWxsfHVuZGVmaW5lZCBwcm9wZXJ0eSBkYXRhCiAgICAgICAgICAgICAgICBpZiAoIHJldCA9PSBudWxsICkgewoKICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZmluZCB0aGUgY2FtZWxDYXNlZCBwcm9wZXJ0eQogICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXNDYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApIF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXQgPSB0aGlzQ2FjaGU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHB2dCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHsKICAgICAgICAgICAgaWYgKCAhalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHRoaXNDYWNoZSwgaSwgbCwKCiAgICAgICAgICAgIC8vIFJlZmVyZW5jZSB0byBpbnRlcm5hbCBkYXRhIGNhY2hlIGtleQogICAgICAgICAgICAgICAgaW50ZXJuYWxLZXkgPSBqUXVlcnkuZXhwYW5kbywKCiAgICAgICAgICAgICAgICBpc05vZGUgPSBlbGVtLm5vZGVUeXBlLAoKICAgICAgICAgICAgLy8gU2VlIGpRdWVyeS5kYXRhIGZvciBtb3JlIGluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICBjYWNoZSA9IGlzTm9kZSA/IGpRdWVyeS5jYWNoZSA6IGVsZW0sCgogICAgICAgICAgICAvLyBTZWUgalF1ZXJ5LmRhdGEgZm9yIG1vcmUgaW5mb3JtYXRpb24KICAgICAgICAgICAgICAgIGlkID0gaXNOb2RlID8gZWxlbVsgaW50ZXJuYWxLZXkgXSA6IGludGVybmFsS2V5OwoKICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYWxyZWFkeSBubyBjYWNoZSBlbnRyeSBmb3IgdGhpcyBvYmplY3QsIHRoZXJlIGlzIG5vCiAgICAgICAgICAgIC8vIHB1cnBvc2UgaW4gY29udGludWluZwogICAgICAgICAgICBpZiAoICFjYWNoZVsgaWQgXSApIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBuYW1lICkgewoKICAgICAgICAgICAgICAgIHRoaXNDYWNoZSA9IHB2dCA/IGNhY2hlWyBpZCBdIDogY2FjaGVbIGlkIF0uZGF0YTsKCiAgICAgICAgICAgICAgICBpZiAoIHRoaXNDYWNoZSApIHsKCiAgICAgICAgICAgICAgICAgICAgLy8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG5hbWVzIGZvciBkYXRhIGtleXMKICAgICAgICAgICAgICAgICAgICBpZiAoICFqUXVlcnkuaXNBcnJheSggbmFtZSApICkgewoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBuYW1lIGluIHRoaXNDYWNoZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBbIG5hbWUgXTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGxpdCB0aGUgY2FtZWwgY2FzZWQgdmVyc2lvbiBieSBzcGFjZXMgdW5sZXNzIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG5hbWUgaW4gdGhpc0NhY2hlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBbIG5hbWUgXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3BsaXQoICIgIiApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmb3IgKCBpID0gMCwgbCA9IG5hbWUubGVuZ3RoOyBpIDwgbDsgaSsrICkgewogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc0NhY2hlWyBuYW1lW2ldIF07CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBkYXRhIGxlZnQgaW4gdGhlIGNhY2hlLCB3ZSB3YW50IHRvIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGxldCB0aGUgY2FjaGUgb2JqZWN0IGl0c2VsZiBnZXQgZGVzdHJveWVkCiAgICAgICAgICAgICAgICAgICAgaWYgKCAhKCBwdnQgPyBpc0VtcHR5RGF0YU9iamVjdCA6IGpRdWVyeS5pc0VtcHR5T2JqZWN0ICkoIHRoaXNDYWNoZSApICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBTZWUgalF1ZXJ5LmRhdGEgZm9yIG1vcmUgaW5mb3JtYXRpb24KICAgICAgICAgICAgaWYgKCAhcHZ0ICkgewogICAgICAgICAgICAgICAgZGVsZXRlIGNhY2hlWyBpZCBdLmRhdGE7CgogICAgICAgICAgICAgICAgLy8gRG9uJ3QgZGVzdHJveSB0aGUgcGFyZW50IGNhY2hlIHVubGVzcyB0aGUgaW50ZXJuYWwgZGF0YSBvYmplY3QKICAgICAgICAgICAgICAgIC8vIGhhZCBiZWVuIHRoZSBvbmx5IHRoaW5nIGxlZnQgaW4gaXQKICAgICAgICAgICAgICAgIGlmICggIWlzRW1wdHlEYXRhT2JqZWN0KGNhY2hlWyBpZCBdKSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEJyb3dzZXJzIHRoYXQgZmFpbCBleHBhbmRvIGRlbGV0aW9uIGFsc28gcmVmdXNlIHRvIGRlbGV0ZSBleHBhbmRvcyBvbgogICAgICAgICAgICAvLyB0aGUgd2luZG93LCBidXQgaXQgd2lsbCBhbGxvdyBpdCBvbiBhbGwgb3RoZXIgSlMgb2JqZWN0czsgb3RoZXIgYnJvd3NlcnMKICAgICAgICAgICAgLy8gZG9uJ3QgY2FyZQogICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCBgY2FjaGVgIGlzIG5vdCBhIHdpbmRvdyBvYmplY3QgIzEwMDgwCiAgICAgICAgICAgIGlmICggalF1ZXJ5LnN1cHBvcnQuZGVsZXRlRXhwYW5kbyB8fCAhY2FjaGUuc2V0SW50ZXJ2YWwgKSB7CiAgICAgICAgICAgICAgICBkZWxldGUgY2FjaGVbIGlkIF07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjYWNoZVsgaWQgXSA9IG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFdlIGRlc3Ryb3llZCB0aGUgY2FjaGUgYW5kIG5lZWQgdG8gZWxpbWluYXRlIHRoZSBleHBhbmRvIG9uIHRoZSBub2RlIHRvIGF2b2lkCiAgICAgICAgICAgIC8vIGZhbHNlIGxvb2t1cHMgaW4gdGhlIGNhY2hlIGZvciBlbnRyaWVzIHRoYXQgbm8gbG9uZ2VyIGV4aXN0CiAgICAgICAgICAgIGlmICggaXNOb2RlICkgewogICAgICAgICAgICAgICAgLy8gSUUgZG9lcyBub3QgYWxsb3cgdXMgdG8gZGVsZXRlIGV4cGFuZG8gcHJvcGVydGllcyBmcm9tIG5vZGVzLAogICAgICAgICAgICAgICAgLy8gbm9yIGRvZXMgaXQgaGF2ZSBhIHJlbW92ZUF0dHJpYnV0ZSBmdW5jdGlvbiBvbiBEb2N1bWVudCBub2RlczsKICAgICAgICAgICAgICAgIC8vIHdlIG11c3QgaGFuZGxlIGFsbCBvZiB0aGVzZSBjYXNlcwogICAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuc3VwcG9ydC5kZWxldGVFeHBhbmRvICkgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbGVtWyBpbnRlcm5hbEtleSBdOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICggZWxlbS5yZW1vdmVBdHRyaWJ1dGUgKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIGludGVybmFsS2V5ICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVsZW1bIGludGVybmFsS2V5IF0gPSBudWxsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLy8gRm9yIGludGVybmFsIHVzZSBvbmx5LgogICAgICAgIF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHsKICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lLCBkYXRhLCB0cnVlICk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gQSBtZXRob2QgZm9yIGRldGVybWluaW5nIGlmIGEgRE9NIG5vZGUgY2FuIGhhbmRsZSB0aGUgZGF0YSBleHBhbmRvCiAgICAgICAgYWNjZXB0RGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgIGlmICggZWxlbS5ub2RlTmFtZSApIHsKICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGpRdWVyeS5ub0RhdGFbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdOwoKICAgICAgICAgICAgICAgIGlmICggbWF0Y2ggKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEobWF0Y2ggPT09IHRydWUgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoImNsYXNzaWQiKSAhPT0gbWF0Y2gpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICB9KTsKCiAgICBqUXVlcnkuZm4uZXh0ZW5kKHsKICAgICAgICBkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHsKICAgICAgICAgICAgdmFyIHBhcnRzLCBhdHRyLCBuYW1lLAogICAgICAgICAgICAgICAgZGF0YSA9IG51bGw7CgogICAgICAgICAgICBpZiAoIHR5cGVvZiBrZXkgPT09ICJ1bmRlZmluZWQiICkgewogICAgICAgICAgICAgICAgaWYgKCB0aGlzLmxlbmd0aCApIHsKICAgICAgICAgICAgICAgICAgICBkYXRhID0galF1ZXJ5LmRhdGEoIHRoaXNbMF0gKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzWzBdLm5vZGVUeXBlID09PSAxICYmICFqUXVlcnkuX2RhdGEoIHRoaXNbMF0sICJwYXJzZWRBdHRycyIgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0ciA9IHRoaXNbMF0uYXR0cmlidXRlczsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gYXR0ci5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gYXR0cltpXS5uYW1lOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbmFtZS5pbmRleE9mKCAiZGF0YS0iICkgPT09IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc3Vic3RyaW5nKDUpICk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFBdHRyKCB0aGlzWzBdLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuX2RhdGEoIHRoaXNbMF0sICJwYXJzZWRBdHRycyIsIHRydWUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7CgogICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2Yga2V5ID09PSAib2JqZWN0IiApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmRhdGEoIHRoaXMsIGtleSApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHBhcnRzID0ga2V5LnNwbGl0KCIuIik7CiAgICAgICAgICAgIHBhcnRzWzFdID0gcGFydHNbMV0gPyAiLiIgKyBwYXJ0c1sxXSA6ICIiOwoKICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMudHJpZ2dlckhhbmRsZXIoImdldERhdGEiICsgcGFydHNbMV0gKyAiISIsIFtwYXJ0c1swXV0pOwoKICAgICAgICAgICAgICAgIC8vIFRyeSB0byBmZXRjaCBhbnkgaW50ZXJuYWxseSBzdG9yZWQgZGF0YSBmaXJzdAogICAgICAgICAgICAgICAgaWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgdGhpcy5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGpRdWVyeS5kYXRhKCB0aGlzWzBdLCBrZXkgKTsKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGF0YUF0dHIoIHRoaXNbMF0sIGtleSwgZGF0YSApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgJiYgcGFydHNbMV0gPwogICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSggcGFydHNbMF0gKSA6CiAgICAgICAgICAgICAgICAgICAgZGF0YTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBbIHBhcnRzWzBdLCB2YWx1ZSBdOwoKICAgICAgICAgICAgICAgICAgICBzZWxmLnRyaWdnZXJIYW5kbGVyKCAic2V0RGF0YSIgKyBwYXJ0c1sxXSArICIhIiwgYXJncyApOwogICAgICAgICAgICAgICAgICAgIGpRdWVyeS5kYXRhKCB0aGlzLCBrZXksIHZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgc2VsZi50cmlnZ2VySGFuZGxlciggImNoYW5nZURhdGEiICsgcGFydHNbMV0gKyAiISIsIGFyZ3MgKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLCBrZXkgKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfSk7CgogICAgZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHsKICAgICAgICAvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55CiAgICAgICAgLy8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlCiAgICAgICAgaWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHsKCiAgICAgICAgICAgIHZhciBuYW1lID0gImRhdGEtIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCAiLSQxIiApLnRvTG93ZXJDYXNlKCk7CgogICAgICAgICAgICBkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTsKCiAgICAgICAgICAgIGlmICggdHlwZW9mIGRhdGEgPT09ICJzdHJpbmciICkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGF0YSA9PT0gInRydWUiID8gdHJ1ZSA6CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPT09ICJmYWxzZSIgPyBmYWxzZSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID09PSAibnVsbCIgPyBudWxsIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuaXNOdW1lcmljKCBkYXRhICkgPyBwYXJzZUZsb2F0KCBkYXRhICkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE7CiAgICAgICAgICAgICAgICB9IGNhdGNoKCBlICkge30KCiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXIKICAgICAgICAgICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBrZXksIGRhdGEgKTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkYXRhID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZGF0YTsKICAgIH0KCi8vIGNoZWNrcyBhIGNhY2hlIG9iamVjdCBmb3IgZW1wdGluZXNzCiAgICBmdW5jdGlvbiBpc0VtcHR5RGF0YU9iamVjdCggb2JqICkgewogICAgICAgIGZvciAoIHZhciBuYW1lIGluIG9iaiApIHsKCiAgICAgICAgICAgIC8vIGlmIHRoZSBwdWJsaWMgZGF0YSBvYmplY3QgaXMgZW1wdHksIHRoZSBwcml2YXRlIGlzIHN0aWxsIGVtcHR5CiAgICAgICAgICAgIGlmICggbmFtZSA9PT0gImRhdGEiICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvYmpbbmFtZV0gKSApIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggbmFtZSAhPT0gInRvSlNPTiIgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKCgoKICAgIGZ1bmN0aW9uIGhhbmRsZVF1ZXVlTWFya0RlZmVyKCBlbGVtLCB0eXBlLCBzcmMgKSB7CiAgICAgICAgdmFyIGRlZmVyRGF0YUtleSA9IHR5cGUgKyAiZGVmZXIiLAogICAgICAgICAgICBxdWV1ZURhdGFLZXkgPSB0eXBlICsgInF1ZXVlIiwKICAgICAgICAgICAgbWFya0RhdGFLZXkgPSB0eXBlICsgIm1hcmsiLAogICAgICAgICAgICBkZWZlciA9IGpRdWVyeS5fZGF0YSggZWxlbSwgZGVmZXJEYXRhS2V5ICk7CiAgICAgICAgaWYgKCBkZWZlciAmJgogICAgICAgICAgICAoIHNyYyA9PT0gInF1ZXVlIiB8fCAhalF1ZXJ5Ll9kYXRhKGVsZW0sIHF1ZXVlRGF0YUtleSkgKSAmJgogICAgICAgICAgICAoIHNyYyA9PT0gIm1hcmsiIHx8ICFqUXVlcnkuX2RhdGEoZWxlbSwgbWFya0RhdGFLZXkpICkgKSB7CiAgICAgICAgICAgIC8vIEdpdmUgcm9vbSBmb3IgaGFyZC1jb2RlZCBjYWxsYmFja3MgdG8gZmlyZSBmaXJzdAogICAgICAgICAgICAvLyBhbmQgZXZlbnR1YWxseSBtYXJrL3F1ZXVlIHNvbWV0aGluZyBlbHNlIG9uIHRoZSBlbGVtZW50CiAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKCAhalF1ZXJ5Ll9kYXRhKCBlbGVtLCBxdWV1ZURhdGFLZXkgKSAmJgogICAgICAgICAgICAgICAgICAgICFqUXVlcnkuX2RhdGEoIGVsZW0sIG1hcmtEYXRhS2V5ICkgKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnJlbW92ZURhdGEoIGVsZW0sIGRlZmVyRGF0YUtleSwgdHJ1ZSApOwogICAgICAgICAgICAgICAgICAgIGRlZmVyLmZpcmUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgMCApOwogICAgICAgIH0KICAgIH0KCiAgICBqUXVlcnkuZXh0ZW5kKHsKCiAgICAgICAgX21hcms6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkgewogICAgICAgICAgICBpZiAoIGVsZW0gKSB7CiAgICAgICAgICAgICAgICB0eXBlID0gKCB0eXBlIHx8ICJmeCIgKSArICJtYXJrIjsKICAgICAgICAgICAgICAgIGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSwgKGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSApIHx8IDApICsgMSApOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgX3VubWFyazogZnVuY3Rpb24oIGZvcmNlLCBlbGVtLCB0eXBlICkgewogICAgICAgICAgICBpZiAoIGZvcmNlICE9PSB0cnVlICkgewogICAgICAgICAgICAgICAgdHlwZSA9IGVsZW07CiAgICAgICAgICAgICAgICBlbGVtID0gZm9yY2U7CiAgICAgICAgICAgICAgICBmb3JjZSA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggZWxlbSApIHsKICAgICAgICAgICAgICAgIHR5cGUgPSB0eXBlIHx8ICJmeCI7CiAgICAgICAgICAgICAgICB2YXIga2V5ID0gdHlwZSArICJtYXJrIiwKICAgICAgICAgICAgICAgICAgICBjb3VudCA9IGZvcmNlID8gMCA6ICggKGpRdWVyeS5fZGF0YSggZWxlbSwga2V5ICkgfHwgMSkgLSAxICk7CiAgICAgICAgICAgICAgICBpZiAoIGNvdW50ICkgewogICAgICAgICAgICAgICAgICAgIGpRdWVyeS5fZGF0YSggZWxlbSwga2V5LCBjb3VudCApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkucmVtb3ZlRGF0YSggZWxlbSwga2V5LCB0cnVlICk7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlUXVldWVNYXJrRGVmZXIoIGVsZW0sIHR5cGUsICJtYXJrIiApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkgewogICAgICAgICAgICB2YXIgcTsKICAgICAgICAgICAgaWYgKCBlbGVtICkgewogICAgICAgICAgICAgICAgdHlwZSA9ICggdHlwZSB8fCAiZngiICkgKyAicXVldWUiOwogICAgICAgICAgICAgICAgcSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSApOwoKICAgICAgICAgICAgICAgIC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXAKICAgICAgICAgICAgICAgIGlmICggZGF0YSApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoICFxIHx8IGpRdWVyeS5pc0FycmF5KGRhdGEpICkgewogICAgICAgICAgICAgICAgICAgICAgICBxID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpICk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcS5wdXNoKCBkYXRhICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHEgfHwgW107CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHsKICAgICAgICAgICAgdHlwZSA9IHR5cGUgfHwgImZ4IjsKCiAgICAgICAgICAgIHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLAogICAgICAgICAgICAgICAgZm4gPSBxdWV1ZS5zaGlmdCgpLAogICAgICAgICAgICAgICAgaG9va3MgPSB7fTsKCiAgICAgICAgICAgIC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWwKICAgICAgICAgICAgaWYgKCBmbiA9PT0gImlucHJvZ3Jlc3MiICkgewogICAgICAgICAgICAgICAgZm4gPSBxdWV1ZS5zaGlmdCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIGZuICkgewogICAgICAgICAgICAgICAgLy8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZwogICAgICAgICAgICAgICAgLy8gYXV0b21hdGljYWxseSBkZXF1ZXVlZAogICAgICAgICAgICAgICAgaWYgKCB0eXBlID09PSAiZngiICkgewogICAgICAgICAgICAgICAgICAgIHF1ZXVlLnVuc2hpZnQoICJpbnByb2dyZXNzIiApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSArICIucnVuIiwgaG9va3MgKTsKICAgICAgICAgICAgICAgIGZuLmNhbGwoIGVsZW0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7CiAgICAgICAgICAgICAgICB9LCBob29rcyApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoICFxdWV1ZS5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICBqUXVlcnkucmVtb3ZlRGF0YSggZWxlbSwgdHlwZSArICJxdWV1ZSAiICsgdHlwZSArICIucnVuIiwgdHJ1ZSApOwogICAgICAgICAgICAgICAgaGFuZGxlUXVldWVNYXJrRGVmZXIoIGVsZW0sIHR5cGUsICJxdWV1ZSIgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKICAgIGpRdWVyeS5mbi5leHRlbmQoewogICAgICAgIHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHsKICAgICAgICAgICAgaWYgKCB0eXBlb2YgdHlwZSAhPT0gInN0cmluZyIgKSB7CiAgICAgICAgICAgICAgICBkYXRhID0gdHlwZTsKICAgICAgICAgICAgICAgIHR5cGUgPSAiZngiOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbMF0sIHR5cGUgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7CgogICAgICAgICAgICAgICAgaWYgKCB0eXBlID09PSAiZngiICYmIHF1ZXVlWzBdICE9PSAiaW5wcm9ncmVzcyIgKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLgogICAgICAgIC8vIGh0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS8KICAgICAgICBkZWxheTogZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7CiAgICAgICAgICAgIHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7CiAgICAgICAgICAgIHR5cGUgPSB0eXBlIHx8ICJmeCI7CgogICAgICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkgewogICAgICAgICAgICAgICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7CiAgICAgICAgICAgICAgICBob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCAiZngiLCBbXSApOwogICAgICAgIH0sCiAgICAgICAgLy8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZQogICAgICAgIC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KQogICAgICAgIHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmplY3QgKSB7CiAgICAgICAgICAgIGlmICggdHlwZW9mIHR5cGUgIT09ICJzdHJpbmciICkgewogICAgICAgICAgICAgICAgb2JqZWN0ID0gdHlwZTsKICAgICAgICAgICAgICAgIHR5cGUgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHlwZSA9IHR5cGUgfHwgImZ4IjsKICAgICAgICAgICAgdmFyIGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksCiAgICAgICAgICAgICAgICBlbGVtZW50cyA9IHRoaXMsCiAgICAgICAgICAgICAgICBpID0gZWxlbWVudHMubGVuZ3RoLAogICAgICAgICAgICAgICAgY291bnQgPSAxLAogICAgICAgICAgICAgICAgZGVmZXJEYXRhS2V5ID0gdHlwZSArICJkZWZlciIsCiAgICAgICAgICAgICAgICBxdWV1ZURhdGFLZXkgPSB0eXBlICsgInF1ZXVlIiwKICAgICAgICAgICAgICAgIG1hcmtEYXRhS2V5ID0gdHlwZSArICJtYXJrIiwKICAgICAgICAgICAgICAgIHRtcDsKICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZSgpIHsKICAgICAgICAgICAgICAgIGlmICggISggLS1jb3VudCApICkgewogICAgICAgICAgICAgICAgICAgIGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hpbGUoIGktLSApIHsKICAgICAgICAgICAgICAgIGlmICgoIHRtcCA9IGpRdWVyeS5kYXRhKCBlbGVtZW50c1sgaSBdLCBkZWZlckRhdGFLZXksIHVuZGVmaW5lZCwgdHJ1ZSApIHx8CiAgICAgICAgICAgICAgICAgICAgKCBqUXVlcnkuZGF0YSggZWxlbWVudHNbIGkgXSwgcXVldWVEYXRhS2V5LCB1bmRlZmluZWQsIHRydWUgKSB8fAogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZGF0YSggZWxlbWVudHNbIGkgXSwgbWFya0RhdGFLZXksIHVuZGVmaW5lZCwgdHJ1ZSApICkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmRhdGEoIGVsZW1lbnRzWyBpIF0sIGRlZmVyRGF0YUtleSwgalF1ZXJ5LkNhbGxiYWNrcyggIm9uY2UgbWVtb3J5IiApLCB0cnVlICkgKSkgewogICAgICAgICAgICAgICAgICAgIGNvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgdG1wLmFkZCggcmVzb2x2ZSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgcmV0dXJuIGRlZmVyLnByb21pc2UoKTsKICAgICAgICB9CiAgICB9KTsKCgoKCiAgICB2YXIgcmNsYXNzID0gL1tcblx0XHJdL2csCiAgICAgICAgcnNwYWNlID0gL1xzKy8sCiAgICAgICAgcnJldHVybiA9IC9cci9nLAogICAgICAgIHJ0eXBlID0gL14oPzpidXR0b258aW5wdXQpJC9pLAogICAgICAgIHJmb2N1c2FibGUgPSAvXig/OmJ1dHRvbnxpbnB1dHxvYmplY3R8c2VsZWN0fHRleHRhcmVhKSQvaSwKICAgICAgICByY2xpY2thYmxlID0gL15hKD86cmVhKT8kL2ksCiAgICAgICAgcmJvb2xlYW4gPSAvXig/OmF1dG9mb2N1c3xhdXRvcGxheXxhc3luY3xjaGVja2VkfGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkfHNlbGVjdGVkKSQvaSwKICAgICAgICBnZXRTZXRBdHRyaWJ1dGUgPSBqUXVlcnkuc3VwcG9ydC5nZXRTZXRBdHRyaWJ1dGUsCiAgICAgICAgbm9kZUhvb2ssIGJvb2xIb29rLCBmaXhTcGVjaWZpZWQ7CgogICAgalF1ZXJ5LmZuLmV4dGVuZCh7CiAgICAgICAgYXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkgewogICAgICAgICAgICByZXR1cm4galF1ZXJ5LmFjY2VzcyggdGhpcywgbmFtZSwgdmFsdWUsIHRydWUsIGpRdWVyeS5hdHRyICk7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7CiAgICAgICAgICAgIHJldHVybiBqUXVlcnkuYWNjZXNzKCB0aGlzLCBuYW1lLCB2YWx1ZSwgdHJ1ZSwgalF1ZXJ5LnByb3AgKTsKICAgICAgICB9LAoKICAgICAgICByZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHsKICAgICAgICAgICAgbmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIC8vIHRyeS9jYXRjaCBoYW5kbGVzIGNhc2VzIHdoZXJlIElFIGJhbGtzIChzdWNoIGFzIHJlbW92aW5nIGEgcHJvcGVydHkgb24gd2luZG93KQogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICB0aGlzWyBuYW1lIF0gPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNbIG5hbWUgXTsKICAgICAgICAgICAgICAgIH0gY2F0Y2goIGUgKSB7fQogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkgewogICAgICAgICAgICB2YXIgY2xhc3NOYW1lcywgaSwgbCwgZWxlbSwKICAgICAgICAgICAgICAgIHNldENsYXNzLCBjLCBjbDsKCiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkgewogICAgICAgICAgICAgICAgICAgIGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lKSApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIiApIHsKICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMgPSB2YWx1ZS5zcGxpdCggcnNwYWNlICk7CgogICAgICAgICAgICAgICAgZm9yICggaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICBlbGVtID0gdGhpc1sgaSBdOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIWVsZW0uY2xhc3NOYW1lICYmIGNsYXNzTmFtZXMubGVuZ3RoID09PSAxICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSB2YWx1ZTsKCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDbGFzcyA9ICIgIiArIGVsZW0uY2xhc3NOYW1lICsgIiAiOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIGMgPSAwLCBjbCA9IGNsYXNzTmFtZXMubGVuZ3RoOyBjIDwgY2w7IGMrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICF+c2V0Q2xhc3MuaW5kZXhPZiggIiAiICsgY2xhc3NOYW1lc1sgYyBdICsgIiAiICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENsYXNzICs9IGNsYXNzTmFtZXNbIGMgXSArICIgIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGpRdWVyeS50cmltKCBzZXRDbGFzcyApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkgewogICAgICAgICAgICB2YXIgY2xhc3NOYW1lcywgaSwgbCwgZWxlbSwgY2xhc3NOYW1lLCBjLCBjbDsKCiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkgewogICAgICAgICAgICAgICAgICAgIGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lKSApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIpIHx8IHZhbHVlID09PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICBjbGFzc05hbWVzID0gKCB2YWx1ZSB8fCAiIiApLnNwbGl0KCByc3BhY2UgKTsKCiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrICkgewogICAgICAgICAgICAgICAgICAgIGVsZW0gPSB0aGlzWyBpIF07CgogICAgICAgICAgICAgICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiBlbGVtLmNsYXNzTmFtZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9ICgiICIgKyBlbGVtLmNsYXNzTmFtZSArICIgIikucmVwbGFjZSggcmNsYXNzLCAiICIgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIGMgPSAwLCBjbCA9IGNsYXNzTmFtZXMubGVuZ3RoOyBjIDwgY2w7IGMrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZSgiICIgKyBjbGFzc05hbWVzWyBjIF0gKyAiICIsICIgIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9IGpRdWVyeS50cmltKCBjbGFzc05hbWUgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTmFtZSA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICB0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHsKICAgICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsCiAgICAgICAgICAgICAgICBpc0Jvb2wgPSB0eXBlb2Ygc3RhdGVWYWwgPT09ICJib29sZWFuIjsKCiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkgewogICAgICAgICAgICAgICAgICAgIGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKCB2YWx1ZS5jYWxsKHRoaXMsIGksIHRoaXMuY2xhc3NOYW1lLCBzdGF0ZVZhbCksIHN0YXRlVmFsICk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmICggdHlwZSA9PT0gInN0cmluZyIgKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gdG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXMKICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NOYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBpID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZiA9IGpRdWVyeSggdGhpcyApLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YXRlVmFsLAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWVzID0gdmFsdWUuc3BsaXQoIHJzcGFjZSApOwoKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIChjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBlcmF0ZWQgbGlzdAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IGlzQm9vbCA/IHN0YXRlIDogIXNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApOwogICAgICAgICAgICAgICAgICAgICAgICBzZWxmWyBzdGF0ZSA/ICJhZGRDbGFzcyIgOiAicmVtb3ZlQ2xhc3MiIF0oIGNsYXNzTmFtZSApOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAidW5kZWZpbmVkIiB8fCB0eXBlID09PSAiYm9vbGVhbiIgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLmNsYXNzTmFtZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgY2xhc3NOYW1lIGlmIHNldAogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuX2RhdGEoIHRoaXMsICJfX2NsYXNzTmFtZV9fIiwgdGhpcy5jbGFzc05hbWUgKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIHRvZ2dsZSB3aG9sZSBjbGFzc05hbWUKICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/ICIiIDogalF1ZXJ5Ll9kYXRhKCB0aGlzLCAiX19jbGFzc05hbWVfXyIgKSB8fCAiIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgaGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9ICIgIiArIHNlbGVjdG9yICsgIiAiLAogICAgICAgICAgICAgICAgaSA9IDAsCiAgICAgICAgICAgICAgICBsID0gdGhpcy5sZW5ndGg7CiAgICAgICAgICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHsKICAgICAgICAgICAgICAgIGlmICggdGhpc1tpXS5ub2RlVHlwZSA9PT0gMSAmJiAoIiAiICsgdGhpc1tpXS5jbGFzc05hbWUgKyAiICIpLnJlcGxhY2UocmNsYXNzLCAiICIpLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9LAoKICAgICAgICB2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKICAgICAgICAgICAgdmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sCiAgICAgICAgICAgICAgICBlbGVtID0gdGhpc1swXTsKCiAgICAgICAgICAgIGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICBpZiAoIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgaG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF07CgogICAgICAgICAgICAgICAgICAgIGlmICggaG9va3MgJiYgImdldCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgInZhbHVlIiApKSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gZWxlbS52YWx1ZTsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiByZXQgPT09ICJzdHJpbmciID8KICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlcwogICAgICAgICAgICAgICAgICAgICAgICByZXQucmVwbGFjZShycmV0dXJuLCAiIikgOgogICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID09IG51bGwgPyAiIiA6IHJldDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTsKCiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7CiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IGpRdWVyeSh0aGlzKSwgdmFsOwoKICAgICAgICAgICAgICAgIGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCBpc0Z1bmN0aW9uICkgewogICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIHNlbGYudmFsKCkgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsdWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgIiI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmcKICAgICAgICAgICAgICAgIGlmICggdmFsID09IG51bGwgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsID0gIiI7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSAibnVtYmVyIiApIHsKICAgICAgICAgICAgICAgICAgICB2YWwgKz0gIiI7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsID0galF1ZXJ5Lm1hcCh2YWwsIGZ1bmN0aW9uICggdmFsdWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gIiIgOiB2YWx1ZSArICIiOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdOwoKICAgICAgICAgICAgICAgIC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nCiAgICAgICAgICAgICAgICBpZiAoICFob29rcyB8fCAhKCJzZXQiIGluIGhvb2tzKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgInZhbHVlIiApID09PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfSk7CgogICAgalF1ZXJ5LmV4dGVuZCh7CiAgICAgICAgdmFsSG9va3M6IHsKICAgICAgICAgICAgb3B0aW9uOiB7CiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIC8vIGF0dHJpYnV0ZXMudmFsdWUgaXMgdW5kZWZpbmVkIGluIEJsYWNrYmVycnkgNC43IGJ1dAogICAgICAgICAgICAgICAgICAgIC8vIHVzZXMgLnZhbHVlLiBTZWUgIzY5MzIKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gZWxlbS5hdHRyaWJ1dGVzLnZhbHVlOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAhdmFsIHx8IHZhbC5zcGVjaWZpZWQgPyBlbGVtLnZhbHVlIDogZWxlbS50ZXh0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBzZWxlY3Q6IHsKICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlLCBpLCBtYXgsIG9wdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gZWxlbS5vcHRpb25zLAogICAgICAgICAgICAgICAgICAgICAgICBvbmUgPSBlbGVtLnR5cGUgPT09ICJzZWxlY3Qtb25lIjsKCiAgICAgICAgICAgICAgICAgICAgLy8gTm90aGluZyB3YXMgc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICBpZiAoIGluZGV4IDwgMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zCiAgICAgICAgICAgICAgICAgICAgaSA9IG9uZSA/IGluZGV4IDogMDsKICAgICAgICAgICAgICAgICAgICBtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICBmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uID0gb3B0aW9uc1sgaSBdOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG9wdGlvbi5zZWxlY3RlZCAmJiAoalF1ZXJ5LnN1cHBvcnQub3B0RGlzYWJsZWQgPyAhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSgiZGlzYWJsZWQiKSA9PT0gbnVsbCkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICghb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHwgIWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsICJvcHRncm91cCIgKSkgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG9uZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKCB2YWx1ZSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyBGaXhlcyBCdWcgIzI1NTEgLS0gc2VsZWN0LnZhbCgpIGJyb2tlbiBpbiBJRSBhZnRlciBmb3JtLnJlc2V0KCkKICAgICAgICAgICAgICAgICAgICBpZiAoIG9uZSAmJiAhdmFsdWVzLmxlbmd0aCAmJiBvcHRpb25zLmxlbmd0aCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpRdWVyeSggb3B0aW9uc1sgaW5kZXggXSApLnZhbCgpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlczsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICk7CgogICAgICAgICAgICAgICAgICAgIGpRdWVyeShlbGVtKS5maW5kKCJvcHRpb24iKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSh0aGlzKS52YWwoKSwgdmFsdWVzICkgPj0gMDsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCAhdmFsdWVzLmxlbmd0aCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBhdHRyRm46IHsKICAgICAgICAgICAgdmFsOiB0cnVlLAogICAgICAgICAgICBjc3M6IHRydWUsCiAgICAgICAgICAgIGh0bWw6IHRydWUsCiAgICAgICAgICAgIHRleHQ6IHRydWUsCiAgICAgICAgICAgIGRhdGE6IHRydWUsCiAgICAgICAgICAgIHdpZHRoOiB0cnVlLAogICAgICAgICAgICBoZWlnaHQ6IHRydWUsCiAgICAgICAgICAgIG9mZnNldDogdHJ1ZQogICAgICAgIH0sCgogICAgICAgIGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgcGFzcyApIHsKICAgICAgICAgICAgdmFyIHJldCwgaG9va3MsIG5vdHhtbCwKICAgICAgICAgICAgICAgIG5UeXBlID0gZWxlbS5ub2RlVHlwZTsKCiAgICAgICAgICAgIC8vIGRvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXMKICAgICAgICAgICAgaWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBwYXNzICYmIG5hbWUgaW4galF1ZXJ5LmF0dHJGbiApIHsKICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkoIGVsZW0gKVsgbmFtZSBdKCB2YWx1ZSApOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZAogICAgICAgICAgICBpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gInVuZGVmaW5lZCIgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5vdHhtbCA9IG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKTsKCiAgICAgICAgICAgIC8vIEFsbCBhdHRyaWJ1dGVzIGFyZSBsb3dlcmNhc2UKICAgICAgICAgICAgLy8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZAogICAgICAgICAgICBpZiAoIG5vdHhtbCApIHsKICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICBob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSB8fCAoIHJib29sZWFuLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogbm9kZUhvb2sgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgewoKICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CgogICAgICAgICAgICAgICAgfSBlbHNlIGlmICggaG9va3MgJiYgInNldCIgaW4gaG9va3MgJiYgbm90eG1sICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDsKCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCAiIiArIHZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfSBlbHNlIGlmICggaG9va3MgJiYgImdldCIgaW4gaG9va3MgJiYgbm90eG1sICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmV0OwoKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApOwoKICAgICAgICAgICAgICAgIC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkCiAgICAgICAgICAgICAgICByZXR1cm4gcmV0ID09PSBudWxsID8KICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQgOgogICAgICAgICAgICAgICAgICAgIHJldDsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKICAgICAgICAgICAgdmFyIHByb3BOYW1lLCBhdHRyTmFtZXMsIG5hbWUsIGwsCiAgICAgICAgICAgICAgICBpID0gMDsKCiAgICAgICAgICAgIGlmICggdmFsdWUgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHsKICAgICAgICAgICAgICAgIGF0dHJOYW1lcyA9IHZhbHVlLnRvTG93ZXJDYXNlKCkuc3BsaXQoIHJzcGFjZSApOwogICAgICAgICAgICAgICAgbCA9IGF0dHJOYW1lcy5sZW5ndGg7CgogICAgICAgICAgICAgICAgZm9yICggOyBpIDwgbDsgaSsrICkgewogICAgICAgICAgICAgICAgICAgIG5hbWUgPSBhdHRyTmFtZXNbIGkgXTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCBuYW1lICkgewogICAgICAgICAgICAgICAgICAgICAgICBwcm9wTmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlZSAjOTY5OSBmb3IgZXhwbGFuYXRpb24gb2YgdGhpcyBhcHByb2FjaCAoc2V0dGluZyBmaXJzdCwgdGhlbiByZW1vdmFsKQogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuYXR0ciggZWxlbSwgbmFtZSwgIiIgKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIGdldFNldEF0dHJpYnV0ZSA/IG5hbWUgOiBwcm9wTmFtZSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2UgZm9yIGJvb2xlYW4gYXR0cmlidXRlcwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJib29sZWFuLnRlc3QoIG5hbWUgKSAmJiBwcm9wTmFtZSBpbiBlbGVtICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgYXR0ckhvb2tzOiB7CiAgICAgICAgICAgIHR5cGU6IHsKICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewogICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbid0IGFsbG93IHRoZSB0eXBlIHByb3BlcnR5IHRvIGJlIGNoYW5nZWQgKHNpbmNlIGl0IGNhdXNlcyBwcm9ibGVtcyBpbiBJRSkKICAgICAgICAgICAgICAgICAgICBpZiAoIHJ0eXBlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5lcnJvciggInR5cGUgcHJvcGVydHkgY2FuJ3QgYmUgY2hhbmdlZCIgKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAhalF1ZXJ5LnN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gInJhZGlvIiAmJiBqUXVlcnkubm9kZU5hbWUoZWxlbSwgImlucHV0IikgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldHRpbmcgdGhlIHR5cGUgb24gYSByYWRpbyBidXR0b24gYWZ0ZXIgdGhlIHZhbHVlIHJlc2V0cyB0aGUgdmFsdWUgaW4gSUU2LTkKICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgdmFsdWUgdG8gaXQncyBkZWZhdWx0IGluIGNhc2UgdHlwZSBpcyBzZXQgYWZ0ZXIgdmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBmb3IgZWxlbWVudCBjcmVhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gZWxlbS52YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoICJ0eXBlIiwgdmFsdWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWwgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnZhbHVlID0gdmFsOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8vIFVzZSB0aGUgdmFsdWUgcHJvcGVydHkgZm9yIGJhY2sgY29tcGF0CiAgICAgICAgICAgIC8vIFVzZSB0aGUgbm9kZUhvb2sgZm9yIGJ1dHRvbiBlbGVtZW50cyBpbiBJRTYvNyAoIzE5NTQpCiAgICAgICAgICAgIHZhbHVlOiB7CiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewogICAgICAgICAgICAgICAgICAgIGlmICggbm9kZUhvb2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCAiYnV0dG9uIiApICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZUhvb2suZ2V0KCBlbGVtLCBuYW1lICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lIGluIGVsZW0gPwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnZhbHVlIDoKICAgICAgICAgICAgICAgICAgICAgICAgbnVsbDsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIG5vZGVIb29rICYmIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgImJ1dHRvbiIgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVIb29rLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8gRG9lcyBub3QgcmV0dXJuIHNvIHRoYXQgc2V0QXR0cmlidXRlIGlzIGFsc28gdXNlZAogICAgICAgICAgICAgICAgICAgIGVsZW0udmFsdWUgPSB2YWx1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHByb3BGaXg6IHsKICAgICAgICAgICAgdGFiaW5kZXg6ICJ0YWJJbmRleCIsCiAgICAgICAgICAgIHJlYWRvbmx5OiAicmVhZE9ubHkiLAogICAgICAgICAgICAiZm9yIjogImh0bWxGb3IiLAogICAgICAgICAgICAiY2xhc3MiOiAiY2xhc3NOYW1lIiwKICAgICAgICAgICAgbWF4bGVuZ3RoOiAibWF4TGVuZ3RoIiwKICAgICAgICAgICAgY2VsbHNwYWNpbmc6ICJjZWxsU3BhY2luZyIsCiAgICAgICAgICAgIGNlbGxwYWRkaW5nOiAiY2VsbFBhZGRpbmciLAogICAgICAgICAgICByb3dzcGFuOiAicm93U3BhbiIsCiAgICAgICAgICAgIGNvbHNwYW46ICJjb2xTcGFuIiwKICAgICAgICAgICAgdXNlbWFwOiAidXNlTWFwIiwKICAgICAgICAgICAgZnJhbWVib3JkZXI6ICJmcmFtZUJvcmRlciIsCiAgICAgICAgICAgIGNvbnRlbnRlZGl0YWJsZTogImNvbnRlbnRFZGl0YWJsZSIKICAgICAgICB9LAoKICAgICAgICBwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7CiAgICAgICAgICAgIHZhciByZXQsIGhvb2tzLCBub3R4bWwsCiAgICAgICAgICAgICAgICBuVHlwZSA9IGVsZW0ubm9kZVR5cGU7CgogICAgICAgICAgICAvLyBkb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzCiAgICAgICAgICAgIGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5vdHhtbCA9IG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKTsKCiAgICAgICAgICAgIGlmICggbm90eG1sICkgewogICAgICAgICAgICAgICAgLy8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rcwogICAgICAgICAgICAgICAgbmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTsKICAgICAgICAgICAgICAgIGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICBpZiAoIGhvb2tzICYmICJzZXQiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDsKCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCBob29rcyAmJiAiZ2V0IiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7CgogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbVsgbmFtZSBdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgcHJvcEhvb2tzOiB7CiAgICAgICAgICAgIHRhYkluZGV4OiB7CiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZSBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXQKICAgICAgICAgICAgICAgICAgICAvLyBodHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0LwogICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVOb2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCJ0YWJpbmRleCIpOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlTm9kZSAmJiBhdHRyaWJ1dGVOb2RlLnNwZWNpZmllZCA/CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KCBhdHRyaWJ1dGVOb2RlLnZhbHVlLCAxMCApIDoKICAgICAgICAgICAgICAgICAgICAgICAgcmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHwgcmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5ocmVmID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CgovLyBBZGQgdGhlIHRhYkluZGV4IHByb3BIb29rIHRvIGF0dHJIb29rcyBmb3IgYmFjay1jb21wYXQgKGRpZmZlcmVudCBjYXNlIGlzIGludGVudGlvbmFsKQogICAgalF1ZXJ5LmF0dHJIb29rcy50YWJpbmRleCA9IGpRdWVyeS5wcm9wSG9va3MudGFiSW5kZXg7CgovLyBIb29rIGZvciBib29sZWFuIGF0dHJpYnV0ZXMKICAgIGJvb2xIb29rID0gewogICAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CiAgICAgICAgICAgIC8vIEFsaWduIGJvb2xlYW4gYXR0cmlidXRlcyB3aXRoIGNvcnJlc3BvbmRpbmcgcHJvcGVydGllcwogICAgICAgICAgICAvLyBGYWxsIGJhY2sgdG8gYXR0cmlidXRlIHByZXNlbmNlIHdoZXJlIHNvbWUgYm9vbGVhbnMgYXJlIG5vdCBzdXBwb3J0ZWQKICAgICAgICAgICAgdmFyIGF0dHJOb2RlLAogICAgICAgICAgICAgICAgcHJvcGVydHkgPSBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSApOwogICAgICAgICAgICByZXR1cm4gcHJvcGVydHkgPT09IHRydWUgfHwgdHlwZW9mIHByb3BlcnR5ICE9PSAiYm9vbGVhbiIgJiYgKCBhdHRyTm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSApICYmIGF0dHJOb2RlLm5vZGVWYWx1ZSAhPT0gZmFsc2UgPwogICAgICAgICAgICAgICAgbmFtZS50b0xvd2VyQ2FzZSgpIDoKICAgICAgICAgICAgICAgIHVuZGVmaW5lZDsKICAgICAgICB9LAogICAgICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkgewogICAgICAgICAgICB2YXIgcHJvcE5hbWU7CiAgICAgICAgICAgIGlmICggdmFsdWUgPT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZQogICAgICAgICAgICAgICAgalF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIHZhbHVlIGlzIHRydWUgc2luY2Ugd2Uga25vdyBhdCB0aGlzIHBvaW50IGl0J3MgdHlwZSBib29sZWFuIGFuZCBub3QgZmFsc2UKICAgICAgICAgICAgICAgIC8vIFNldCBib29sZWFuIGF0dHJpYnV0ZXMgdG8gdGhlIHNhbWUgbmFtZSBhbmQgc2V0IHRoZSBET00gcHJvcGVydHkKICAgICAgICAgICAgICAgIHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lOwogICAgICAgICAgICAgICAgaWYgKCBwcm9wTmFtZSBpbiBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgc2V0IHRoZSBJREwgc3BlY2lmaWNhbGx5IGlmIGl0IGFscmVhZHkgZXhpc3RzIG9uIHRoZSBlbGVtZW50CiAgICAgICAgICAgICAgICAgICAgZWxlbVsgcHJvcE5hbWUgXSA9IHRydWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBuYW1lOwogICAgICAgIH0KICAgIH07CgovLyBJRTYvNyBkbyBub3Qgc3VwcG9ydCBnZXR0aW5nL3NldHRpbmcgc29tZSBhdHRyaWJ1dGVzIHdpdGggZ2V0L3NldEF0dHJpYnV0ZQogICAgaWYgKCAhZ2V0U2V0QXR0cmlidXRlICkgewoKICAgICAgICBmaXhTcGVjaWZpZWQgPSB7CiAgICAgICAgICAgIG5hbWU6IHRydWUsCiAgICAgICAgICAgIGlkOiB0cnVlCiAgICAgICAgfTsKCiAgICAgICAgLy8gVXNlIHRoaXMgZm9yIGFueSBhdHRyaWJ1dGUgaW4gSUU2LzcKICAgICAgICAvLyBUaGlzIGZpeGVzIGFsbW9zdCBldmVyeSBJRTYvNyBpc3N1ZQogICAgICAgIG5vZGVIb29rID0galF1ZXJ5LnZhbEhvb2tzLmJ1dHRvbiA9IHsKICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHsKICAgICAgICAgICAgICAgIHZhciByZXQ7CiAgICAgICAgICAgICAgICByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTsKICAgICAgICAgICAgICAgIHJldHVybiByZXQgJiYgKCBmaXhTcGVjaWZpZWRbIG5hbWUgXSA/IHJldC5ub2RlVmFsdWUgIT09ICIiIDogcmV0LnNwZWNpZmllZCApID8KICAgICAgICAgICAgICAgICAgICByZXQubm9kZVZhbHVlIDoKICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkgewogICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBleGlzdGluZyBvciBjcmVhdGUgYSBuZXcgYXR0cmlidXRlIG5vZGUKICAgICAgICAgICAgICAgIHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTsKICAgICAgICAgICAgICAgIGlmICggIXJldCApIHsKICAgICAgICAgICAgICAgICAgICByZXQgPSBkb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoIG5hbWUgKTsKICAgICAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZU5vZGUoIHJldCApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuICggcmV0Lm5vZGVWYWx1ZSA9IHZhbHVlICsgIiIgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIC8vIEFwcGx5IHRoZSBub2RlSG9vayB0byB0YWJpbmRleAogICAgICAgIGpRdWVyeS5hdHRySG9va3MudGFiaW5kZXguc2V0ID0gbm9kZUhvb2suc2V0OwoKICAgICAgICAvLyBTZXQgd2lkdGggYW5kIGhlaWdodCB0byBhdXRvIGluc3RlYWQgb2YgMCBvbiBlbXB0eSBzdHJpbmcoIEJ1ZyAjODE1MCApCiAgICAgICAgLy8gVGhpcyBpcyBmb3IgcmVtb3ZhbHMKICAgICAgICBqUXVlcnkuZWFjaChbICJ3aWR0aCIsICJoZWlnaHQiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkgewogICAgICAgICAgICBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0sIHsKICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewogICAgICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPT09ICIiICkgewogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgImF1dG8iICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICAvLyBTZXQgY29udGVudGVkaXRhYmxlIHRvIGZhbHNlIG9uIHJlbW92YWxzKCMxMDQyOSkKICAgICAgICAvLyBTZXR0aW5nIHRvIGVtcHR5IHN0cmluZyB0aHJvd3MgYW4gZXJyb3IgYXMgYW4gaW52YWxpZCB2YWx1ZQogICAgICAgIGpRdWVyeS5hdHRySG9va3MuY29udGVudGVkaXRhYmxlID0gewogICAgICAgICAgICBnZXQ6IG5vZGVIb29rLmdldCwKICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09PSAiIiApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICJmYWxzZSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBub2RlSG9vay5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKCi8vIFNvbWUgYXR0cmlidXRlcyByZXF1aXJlIGEgc3BlY2lhbCBjYWxsIG9uIElFCiAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC5ocmVmTm9ybWFsaXplZCApIHsKICAgICAgICBqUXVlcnkuZWFjaChbICJocmVmIiwgInNyYyIsICJ3aWR0aCIsICJoZWlnaHQiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkgewogICAgICAgICAgICBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0sIHsKICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJldCA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCAyICk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9CgogICAgaWYgKCAhalF1ZXJ5LnN1cHBvcnQuc3R5bGUgKSB7CiAgICAgICAgalF1ZXJ5LmF0dHJIb29rcy5zdHlsZSA9IHsKICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgICAgICAgIC8vIFJldHVybiB1bmRlZmluZWQgaW4gdGhlIGNhc2Ugb2YgZW1wdHkgc3RyaW5nCiAgICAgICAgICAgICAgICAvLyBOb3JtYWxpemUgdG8gbG93ZXJjYXNlIHNpbmNlIElFIHVwcGVyY2FzZXMgY3NzIHByb3BlcnR5IG5hbWVzCiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS5zdHlsZS5jc3NUZXh0LnRvTG93ZXJDYXNlKCkgfHwgdW5kZWZpbmVkOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiAoIGVsZW0uc3R5bGUuY3NzVGV4dCA9ICIiICsgdmFsdWUgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgovLyBTYWZhcmkgbWlzLXJlcG9ydHMgdGhlIGRlZmF1bHQgc2VsZWN0ZWQgcHJvcGVydHkgb2YgYW4gb3B0aW9uCi8vIEFjY2Vzc2luZyB0aGUgcGFyZW50J3Mgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eSBmaXhlcyBpdAogICAgaWYgKCAhalF1ZXJ5LnN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7CiAgICAgICAgalF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IGpRdWVyeS5leHRlbmQoIGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQsIHsKICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7CgogICAgICAgICAgICAgICAgaWYgKCBwYXJlbnQgKSB7CiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnNlbGVjdGVkSW5kZXg7CgogICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGl0IGFsc28gd29ya3Mgd2l0aCBvcHRncm91cHMsIHNlZSAjNTcwMQogICAgICAgICAgICAgICAgICAgIGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCi8vIElFNi83IGNhbGwgZW5jdHlwZSBlbmNvZGluZwogICAgaWYgKCAhalF1ZXJ5LnN1cHBvcnQuZW5jdHlwZSApIHsKICAgICAgICBqUXVlcnkucHJvcEZpeC5lbmN0eXBlID0gImVuY29kaW5nIjsKICAgIH0KCi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyCiAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC5jaGVja09uICkgewogICAgICAgIGpRdWVyeS5lYWNoKFsgInJhZGlvIiwgImNoZWNrYm94IiBdLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7CiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBpbiBXZWJraXQgIiIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiAib24iIGlmIGEgdmFsdWUgaXNuJ3Qgc3BlY2lmaWVkCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpID09PSBudWxsID8gIm9uIiA6IGVsZW0udmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICB9CiAgICBqUXVlcnkuZWFjaChbICJyYWRpbyIsICJjaGVja2JveCIgXSwgZnVuY3Rpb24oKSB7CiAgICAgICAgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSBqUXVlcnkuZXh0ZW5kKCBqUXVlcnkudmFsSG9va3NbIHRoaXMgXSwgewogICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKICAgICAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeShlbGVtKS52YWwoKSwgdmFsdWUgKSA+PSAwICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pOwoKCgoKICAgIHZhciByZm9ybUVsZW1zID0gL14oPzp0ZXh0YXJlYXxpbnB1dHxzZWxlY3QpJC9pLAogICAgICAgIHJ0eXBlbmFtZXNwYWNlID0gL14oW15cLl0qKT8oPzpcLiguKykpPyQvLAogICAgICAgIHJob3ZlckhhY2sgPSAvXGJob3ZlcihcLlxTKyk/XGIvLAogICAgICAgIHJrZXlFdmVudCA9IC9ea2V5LywKICAgICAgICBybW91c2VFdmVudCA9IC9eKD86bW91c2V8Y29udGV4dG1lbnUpfGNsaWNrLywKICAgICAgICByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLywKICAgICAgICBycXVpY2tJcyA9IC9eKFx3KikoPzojKFtcd1wtXSspKT8oPzpcLihbXHdcLV0rKSk/JC8sCiAgICAgICAgcXVpY2tQYXJzZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKICAgICAgICAgICAgdmFyIHF1aWNrID0gcnF1aWNrSXMuZXhlYyggc2VsZWN0b3IgKTsKICAgICAgICAgICAgaWYgKCBxdWljayApIHsKICAgICAgICAgICAgICAgIC8vICAgMCAgMSAgICAyICAgMwogICAgICAgICAgICAgICAgLy8gWyBfLCB0YWcsIGlkLCBjbGFzcyBdCiAgICAgICAgICAgICAgICBxdWlja1sxXSA9ICggcXVpY2tbMV0gfHwgIiIgKS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgcXVpY2tbM10gPSBxdWlja1szXSAmJiBuZXcgUmVnRXhwKCAiKD86XnxcXHMpIiArIHF1aWNrWzNdICsgIig/Olxcc3wkKSIgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcXVpY2s7CiAgICAgICAgfSwKICAgICAgICBxdWlja0lzID0gZnVuY3Rpb24oIGVsZW0sIG0gKSB7CiAgICAgICAgICAgIHZhciBhdHRycyA9IGVsZW0uYXR0cmlidXRlcyB8fCB7fTsKICAgICAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgICAgICghbVsxXSB8fCBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG1bMV0pICYmCiAgICAgICAgICAgICAgICAgICAgKCFtWzJdIHx8IChhdHRycy5pZCB8fCB7fSkudmFsdWUgPT09IG1bMl0pICYmCiAgICAgICAgICAgICAgICAgICAgKCFtWzNdIHx8IG1bM10udGVzdCggKGF0dHJzWyAiY2xhc3MiIF0gfHwge30pLnZhbHVlICkpCiAgICAgICAgICAgICAgICApOwogICAgICAgIH0sCiAgICAgICAgaG92ZXJIYWNrID0gZnVuY3Rpb24oIGV2ZW50cyApIHsKICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5ldmVudC5zcGVjaWFsLmhvdmVyID8gZXZlbnRzIDogZXZlbnRzLnJlcGxhY2UoIHJob3ZlckhhY2ssICJtb3VzZWVudGVyJDEgbW91c2VsZWF2ZSQxIiApOwogICAgICAgIH07CgogICAgLyoKICAgICAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS4KICAgICAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuCiAgICAgKi8KICAgIGpRdWVyeS5ldmVudCA9IHsKCiAgICAgICAgYWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkgewoKICAgICAgICAgICAgdmFyIGVsZW1EYXRhLCBldmVudEhhbmRsZSwgZXZlbnRzLAogICAgICAgICAgICAgICAgdCwgdG5zLCB0eXBlLCBuYW1lc3BhY2VzLCBoYW5kbGVPYmosCiAgICAgICAgICAgICAgICBoYW5kbGVPYmpJbiwgcXVpY2ssIGhhbmRsZXJzLCBzcGVjaWFsOwoKICAgICAgICAgICAgLy8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChhbGxvdyBwbGFpbiBvYmplY3RzIHRobykKICAgICAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIXR5cGVzIHx8ICFoYW5kbGVyIHx8ICEoZWxlbURhdGEgPSBqUXVlcnkuX2RhdGEoIGVsZW0gKSkgKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlcgogICAgICAgICAgICBpZiAoIGhhbmRsZXIuaGFuZGxlciApIHsKICAgICAgICAgICAgICAgIGhhbmRsZU9iakluID0gaGFuZGxlcjsKICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXIKICAgICAgICAgICAgaWYgKCAhaGFuZGxlci5ndWlkICkgewogICAgICAgICAgICAgICAgaGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdAogICAgICAgICAgICBldmVudHMgPSBlbGVtRGF0YS5ldmVudHM7CiAgICAgICAgICAgIGlmICggIWV2ZW50cyApIHsKICAgICAgICAgICAgICAgIGVsZW1EYXRhLmV2ZW50cyA9IGV2ZW50cyA9IHt9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlOwogICAgICAgICAgICBpZiAoICFldmVudEhhbmRsZSApIHsKICAgICAgICAgICAgICAgIGVsZW1EYXRhLmhhbmRsZSA9IGV2ZW50SGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmQKICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09ICJ1bmRlZmluZWQiICYmICghZSB8fCBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUpID8KICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBldmVudEhhbmRsZS5lbGVtLCBhcmd1bWVudHMgKSA6CiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAvLyBBZGQgZWxlbSBhcyBhIHByb3BlcnR5IG9mIHRoZSBoYW5kbGUgZm4gdG8gcHJldmVudCBhIG1lbW9yeSBsZWFrIHdpdGggSUUgbm9uLW5hdGl2ZSBldmVudHMKICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlLmVsZW0gPSBlbGVtOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlCiAgICAgICAgICAgIC8vIGpRdWVyeSguLi4pLmJpbmQoIm1vdXNlb3ZlciBtb3VzZW91dCIsIGZuKTsKICAgICAgICAgICAgdHlwZXMgPSBqUXVlcnkudHJpbSggaG92ZXJIYWNrKHR5cGVzKSApLnNwbGl0KCAiICIgKTsKICAgICAgICAgICAgZm9yICggdCA9IDA7IHQgPCB0eXBlcy5sZW5ndGg7IHQrKyApIHsKCiAgICAgICAgICAgICAgICB0bnMgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdOwogICAgICAgICAgICAgICAgdHlwZSA9IHRuc1sxXTsKICAgICAgICAgICAgICAgIG5hbWVzcGFjZXMgPSAoIHRuc1syXSB8fCAiIiApLnNwbGl0KCAiLiIgKS5zb3J0KCk7CgogICAgICAgICAgICAgICAgLy8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlCiAgICAgICAgICAgICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTsKCiAgICAgICAgICAgICAgICAvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGUKICAgICAgICAgICAgICAgIHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTsKCiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlCiAgICAgICAgICAgICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTsKCiAgICAgICAgICAgICAgICAvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVycwogICAgICAgICAgICAgICAgaGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCh7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZSwKICAgICAgICAgICAgICAgICAgICBvcmlnVHlwZTogdG5zWzFdLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlciwKICAgICAgICAgICAgICAgICAgICBndWlkOiBoYW5kbGVyLmd1aWQsCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yLAogICAgICAgICAgICAgICAgICAgIHF1aWNrOiBxdWlja1BhcnNlKCBzZWxlY3RvciApLAogICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCIuIikKICAgICAgICAgICAgICAgIH0sIGhhbmRsZU9iakluICk7CgogICAgICAgICAgICAgICAgLy8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3QKICAgICAgICAgICAgICAgIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF07CiAgICAgICAgICAgICAgICBpZiAoICFoYW5kbGVycyApIHsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7CgogICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIvYXR0YWNoRXZlbnQgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZQogICAgICAgICAgICAgICAgICAgIGlmICggIXNwZWNpYWwuc2V0dXAgfHwgc3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmluZCB0aGUgZ2xvYmFsIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlLCBmYWxzZSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggZWxlbS5hdHRhY2hFdmVudCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uYXR0YWNoRXZlbnQoICJvbiIgKyB0eXBlLCBldmVudEhhbmRsZSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICggc3BlY2lhbC5hZGQgKSB7CiAgICAgICAgICAgICAgICAgICAgc3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7CgogICAgICAgICAgICAgICAgICAgIGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250CiAgICAgICAgICAgICAgICBpZiAoIHNlbGVjdG9yICkgewogICAgICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvbgogICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gTnVsbGlmeSBlbGVtIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzIGluIElFCiAgICAgICAgICAgIGVsZW0gPSBudWxsOwogICAgICAgIH0sCgogICAgICAgIGdsb2JhbDoge30sCgogICAgICAgIC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudAogICAgICAgIHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7CgogICAgICAgICAgICB2YXIgZWxlbURhdGEgPSBqUXVlcnkuaGFzRGF0YSggZWxlbSApICYmIGpRdWVyeS5fZGF0YSggZWxlbSApLAogICAgICAgICAgICAgICAgdCwgdG5zLCB0eXBlLCBvcmlnVHlwZSwgbmFtZXNwYWNlcywgb3JpZ0NvdW50LAogICAgICAgICAgICAgICAgaiwgZXZlbnRzLCBzcGVjaWFsLCBoYW5kbGUsIGV2ZW50VHlwZSwgaGFuZGxlT2JqOwoKICAgICAgICAgICAgaWYgKCAhZWxlbURhdGEgfHwgIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkCiAgICAgICAgICAgIHR5cGVzID0galF1ZXJ5LnRyaW0oIGhvdmVySGFjayggdHlwZXMgfHwgIiIgKSApLnNwbGl0KCIgIik7CiAgICAgICAgICAgIGZvciAoIHQgPSAwOyB0IDwgdHlwZXMubGVuZ3RoOyB0KysgKSB7CiAgICAgICAgICAgICAgICB0bnMgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdOwogICAgICAgICAgICAgICAgdHlwZSA9IG9yaWdUeXBlID0gdG5zWzFdOwogICAgICAgICAgICAgICAgbmFtZXNwYWNlcyA9IHRuc1syXTsKCiAgICAgICAgICAgICAgICAvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnQKICAgICAgICAgICAgICAgIGlmICggIXR5cGUgKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICggdHlwZSBpbiBldmVudHMgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTsKICAgICAgICAgICAgICAgIHR5cGUgPSAoIHNlbGVjdG9yPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlOwogICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gZXZlbnRzWyB0eXBlIF0gfHwgW107CiAgICAgICAgICAgICAgICBvcmlnQ291bnQgPSBldmVudFR5cGUubGVuZ3RoOwogICAgICAgICAgICAgICAgbmFtZXNwYWNlcyA9IG5hbWVzcGFjZXMgPyBuZXcgUmVnRXhwKCIoXnxcXC4pIiArIG5hbWVzcGFjZXMuc3BsaXQoIi4iKS5zb3J0KCkuam9pbigiXFwuKD86LipcXC4pPyIpICsgIihcXC58JCkiKSA6IG51bGw7CgogICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50cwogICAgICAgICAgICAgICAgZm9yICggaiA9IDA7IGogPCBldmVudFR5cGUubGVuZ3RoOyBqKysgKSB7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlT2JqID0gZXZlbnRUeXBlWyBqIF07CgogICAgICAgICAgICAgICAgICAgIGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgKCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgKCAhbmFtZXNwYWNlcyB8fCBuYW1lc3BhY2VzLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmCiAgICAgICAgICAgICAgICAgICAgICAgICggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICIqKiIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZS5zcGxpY2UoIGotLSwgMSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFR5cGUuZGVsZWdhdGVDb3VudC0tOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3BlY2lhbC5yZW1vdmUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0CiAgICAgICAgICAgICAgICAvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycykKICAgICAgICAgICAgICAgIGlmICggZXZlbnRUeXBlLmxlbmd0aCA9PT0gMCAmJiBvcmlnQ291bnQgIT09IGV2ZW50VHlwZS5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fCBzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMgKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBkZWxldGUgZXZlbnRzWyB0eXBlIF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkCiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkgewogICAgICAgICAgICAgICAgaGFuZGxlID0gZWxlbURhdGEuaGFuZGxlOwogICAgICAgICAgICAgICAgaWYgKCBoYW5kbGUgKSB7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmVsZW0gPSBudWxsOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIHJlbW92ZURhdGEgYWxzbyBjaGVja3MgZm9yIGVtcHRpbmVzcyBhbmQgY2xlYXJzIHRoZSBleHBhbmRvIGlmIGVtcHR5CiAgICAgICAgICAgICAgICAvLyBzbyB1c2UgaXQgaW5zdGVhZCBvZiBkZWxldGUKICAgICAgICAgICAgICAgIGpRdWVyeS5yZW1vdmVEYXRhKCBlbGVtLCBbICJldmVudHMiLCAiaGFuZGxlIiBdLCB0cnVlICk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBFdmVudHMgdGhhdCBhcmUgc2FmZSB0byBzaG9ydC1jaXJjdWl0IGlmIG5vIGhhbmRsZXJzIGFyZSBhdHRhY2hlZC4KICAgICAgICAvLyBOYXRpdmUgRE9NIGV2ZW50cyBzaG91bGQgbm90IGJlIGFkZGVkLCB0aGV5IG1heSBoYXZlIGlubGluZSBoYW5kbGVycy4KICAgICAgICBjdXN0b21FdmVudDogewogICAgICAgICAgICAiZ2V0RGF0YSI6IHRydWUsCiAgICAgICAgICAgICJzZXREYXRhIjogdHJ1ZSwKICAgICAgICAgICAgImNoYW5nZURhdGEiOiB0cnVlCiAgICAgICAgfSwKCiAgICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7CiAgICAgICAgICAgIC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzCiAgICAgICAgICAgIGlmICggZWxlbSAmJiAoZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4KSApIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gRXZlbnQgb2JqZWN0IG9yIGV2ZW50IHR5cGUKICAgICAgICAgICAgdmFyIHR5cGUgPSBldmVudC50eXBlIHx8IGV2ZW50LAogICAgICAgICAgICAgICAgbmFtZXNwYWNlcyA9IFtdLAogICAgICAgICAgICAgICAgY2FjaGUsIGV4Y2x1c2l2ZSwgaSwgY3VyLCBvbGQsIG9udHlwZSwgc3BlY2lhbCwgaGFuZGxlLCBldmVudFBhdGgsIGJ1YmJsZVR5cGU7CgogICAgICAgICAgICAvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3cKICAgICAgICAgICAgaWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIHR5cGUuaW5kZXhPZiggIiEiICkgPj0gMCApIHsKICAgICAgICAgICAgICAgIC8vIEV4Y2x1c2l2ZSBldmVudHMgdHJpZ2dlciBvbmx5IGZvciB0aGUgZXhhY3QgZXZlbnQgKG5vIG5hbWVzcGFjZXMpCiAgICAgICAgICAgICAgICB0eXBlID0gdHlwZS5zbGljZSgwLCAtMSk7CiAgICAgICAgICAgICAgICBleGNsdXNpdmUgPSB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIHR5cGUuaW5kZXhPZiggIi4iICkgPj0gMCApIHsKICAgICAgICAgICAgICAgIC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKCkKICAgICAgICAgICAgICAgIG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCIuIik7CiAgICAgICAgICAgICAgICB0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpOwogICAgICAgICAgICAgICAgbmFtZXNwYWNlcy5zb3J0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggKCFlbGVtIHx8IGpRdWVyeS5ldmVudC5jdXN0b21FdmVudFsgdHlwZSBdKSAmJiAhalF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdICkgewogICAgICAgICAgICAgICAgLy8gTm8galF1ZXJ5IGhhbmRsZXJzIGZvciB0aGlzIGV2ZW50IHR5cGUsIGFuZCBpdCBjYW4ndCBoYXZlIGlubGluZSBoYW5kbGVycwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gRXZlbnQsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZwogICAgICAgICAgICBldmVudCA9IHR5cGVvZiBldmVudCA9PT0gIm9iamVjdCIgPwogICAgICAgICAgICAgICAgLy8galF1ZXJ5LkV2ZW50IG9iamVjdAogICAgICAgICAgICAgICAgZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gPyBldmVudCA6CiAgICAgICAgICAgICAgICAgICAgLy8gT2JqZWN0IGxpdGVyYWwKICAgICAgICAgICAgICAgICAgICBuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCBldmVudCApIDoKICAgICAgICAgICAgICAgIC8vIEp1c3QgdGhlIGV2ZW50IHR5cGUgKHN0cmluZykKICAgICAgICAgICAgICAgIG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUgKTsKCiAgICAgICAgICAgIGV2ZW50LnR5cGUgPSB0eXBlOwogICAgICAgICAgICBldmVudC5pc1RyaWdnZXIgPSB0cnVlOwogICAgICAgICAgICBldmVudC5leGNsdXNpdmUgPSBleGNsdXNpdmU7CiAgICAgICAgICAgIGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggIi4iICk7CiAgICAgICAgICAgIGV2ZW50Lm5hbWVzcGFjZV9yZSA9IGV2ZW50Lm5hbWVzcGFjZT8gbmV3IFJlZ0V4cCgiKF58XFwuKSIgKyBuYW1lc3BhY2VzLmpvaW4oIlxcLig/Oi4qXFwuKT8iKSArICIoXFwufCQpIikgOiBudWxsOwogICAgICAgICAgICBvbnR5cGUgPSB0eXBlLmluZGV4T2YoICI6IiApIDwgMCA/ICJvbiIgKyB0eXBlIDogIiI7CgogICAgICAgICAgICAvLyBIYW5kbGUgYSBnbG9iYWwgdHJpZ2dlcgogICAgICAgICAgICBpZiAoICFlbGVtICkgewoKICAgICAgICAgICAgICAgIC8vIFRPRE86IFN0b3AgdGF1bnRpbmcgdGhlIGRhdGEgY2FjaGU7IHJlbW92ZSBnbG9iYWwgZXZlbnRzIGFuZCBhbHdheXMgYXR0YWNoIHRvIGRvY3VtZW50CiAgICAgICAgICAgICAgICBjYWNoZSA9IGpRdWVyeS5jYWNoZTsKICAgICAgICAgICAgICAgIGZvciAoIGkgaW4gY2FjaGUgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBjYWNoZVsgaSBdLmV2ZW50cyAmJiBjYWNoZVsgaSBdLmV2ZW50c1sgdHlwZSBdICkgewogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlciggZXZlbnQsIGRhdGEsIGNhY2hlWyBpIF0uaGFuZGxlLmVsZW0sIHRydWUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZAogICAgICAgICAgICBldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIGlmICggIWV2ZW50LnRhcmdldCApIHsKICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldCA9IGVsZW07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3QKICAgICAgICAgICAgZGF0YSA9IGRhdGEgIT0gbnVsbCA/IGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSA6IFtdOwogICAgICAgICAgICBkYXRhLnVuc2hpZnQoIGV2ZW50ICk7CgogICAgICAgICAgICAvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzCiAgICAgICAgICAgIHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9OwogICAgICAgICAgICBpZiAoIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKQogICAgICAgICAgICAvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KQogICAgICAgICAgICBldmVudFBhdGggPSBbWyBlbGVtLCBzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGUgXV07CiAgICAgICAgICAgIGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7CgogICAgICAgICAgICAgICAgYnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7CiAgICAgICAgICAgICAgICBjdXIgPSByZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApID8gZWxlbSA6IGVsZW0ucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIG9sZCA9IG51bGw7CiAgICAgICAgICAgICAgICBmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnRQYXRoLnB1c2goWyBjdXIsIGJ1YmJsZVR5cGUgXSk7CiAgICAgICAgICAgICAgICAgICAgb2xkID0gY3VyOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKQogICAgICAgICAgICAgICAgaWYgKCBvbGQgJiYgb2xkID09PSBlbGVtLm93bmVyRG9jdW1lbnQgKSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnRQYXRoLnB1c2goWyBvbGQuZGVmYXVsdFZpZXcgfHwgb2xkLnBhcmVudFdpbmRvdyB8fCB3aW5kb3csIGJ1YmJsZVR5cGUgXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGgKICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBldmVudFBhdGgubGVuZ3RoICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpOyBpKysgKSB7CgogICAgICAgICAgICAgICAgY3VyID0gZXZlbnRQYXRoW2ldWzBdOwogICAgICAgICAgICAgICAgZXZlbnQudHlwZSA9IGV2ZW50UGF0aFtpXVsxXTsKCiAgICAgICAgICAgICAgICBoYW5kbGUgPSAoIGpRdWVyeS5fZGF0YSggY3VyLCAiZXZlbnRzIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJiBqUXVlcnkuX2RhdGEoIGN1ciwgImhhbmRsZSIgKTsKICAgICAgICAgICAgICAgIGlmICggaGFuZGxlICkgewogICAgICAgICAgICAgICAgICAgIGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBpcyBhIGJhcmUgSlMgZnVuY3Rpb24gYW5kIG5vdCBhIGpRdWVyeSBoYW5kbGVyCiAgICAgICAgICAgICAgICBoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTsKICAgICAgICAgICAgICAgIGlmICggaGFuZGxlICYmIGpRdWVyeS5hY2NlcHREYXRhKCBjdXIgKSAmJiBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGV2ZW50LnR5cGUgPSB0eXBlOwoKICAgICAgICAgICAgLy8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vdwogICAgICAgICAgICBpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkgewoKICAgICAgICAgICAgICAgIGlmICggKCFzcGVjaWFsLl9kZWZhdWx0IHx8IHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGVsZW0ub3duZXJEb2N1bWVudCwgZGF0YSApID09PSBmYWxzZSkgJiYKICAgICAgICAgICAgICAgICAgICAhKHR5cGUgPT09ICJjbGljayIgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCAiYSIgKSkgJiYgalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHsKCiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LgogICAgICAgICAgICAgICAgICAgIC8vIENhbid0IHVzZSBhbiAuaXNGdW5jdGlvbigpIGNoZWNrIGhlcmUgYmVjYXVzZSBJRTYvNyBmYWlscyB0aGF0IHRlc3QuCiAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKQogICAgICAgICAgICAgICAgICAgIC8vIElFPDkgZGllcyBvbiBmb2N1cy9ibHVyIHRvIGhpZGRlbiBlbGVtZW50ICgjMTQ4NikKICAgICAgICAgICAgICAgICAgICBpZiAoIG9udHlwZSAmJiBlbGVtWyB0eXBlIF0gJiYgKCh0eXBlICE9PSAiZm9jdXMiICYmIHR5cGUgIT09ICJibHVyIikgfHwgZXZlbnQudGFyZ2V0Lm9mZnNldFdpZHRoICE9PSAwKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kCiAgICAgICAgICAgICAgICAgICAgICAgIG9sZCA9IGVsZW1bIG9udHlwZSBdOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBvbGQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtWyBvbnR5cGUgXSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlCiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlOwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtWyB0eXBlIF0oKTsKICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggb2xkICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbVsgb250eXBlIF0gPSBvbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBldmVudC5yZXN1bHQ7CiAgICAgICAgfSwKCiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHsKCiAgICAgICAgICAgIC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdAogICAgICAgICAgICBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50IHx8IHdpbmRvdy5ldmVudCApOwoKICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gKCAoalF1ZXJ5Ll9kYXRhKCB0aGlzLCAiZXZlbnRzIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSksCiAgICAgICAgICAgICAgICBkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCwKICAgICAgICAgICAgICAgIGFyZ3MgPSBbXS5zbGljZS5jYWxsKCBhcmd1bWVudHMsIDAgKSwKICAgICAgICAgICAgICAgIHJ1bl9hbGwgPSAhZXZlbnQuZXhjbHVzaXZlICYmICFldmVudC5uYW1lc3BhY2UsCiAgICAgICAgICAgICAgICBoYW5kbGVyUXVldWUgPSBbXSwKICAgICAgICAgICAgICAgIGksIGosIGN1ciwganFjdXIsIHJldCwgc2VsTWF0Y2gsIG1hdGNoZWQsIG1hdGNoZXMsIGhhbmRsZU9iaiwgc2VsLCByZWxhdGVkOwoKICAgICAgICAgICAgLy8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnQKICAgICAgICAgICAgYXJnc1swXSA9IGV2ZW50OwogICAgICAgICAgICBldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7CgogICAgICAgICAgICAvLyBEZXRlcm1pbmUgaGFuZGxlcnMgdGhhdCBzaG91bGQgcnVuIGlmIHRoZXJlIGFyZSBkZWxlZ2F0ZWQgZXZlbnRzCiAgICAgICAgICAgIC8vIEF2b2lkIGRpc2FibGVkIGVsZW1lbnRzIGluIElFICgjNjkxMSkgYW5kIG5vbi1sZWZ0LWNsaWNrIGJ1YmJsaW5nIGluIEZpcmVmb3ggKCMzODYxKQogICAgICAgICAgICBpZiAoIGRlbGVnYXRlQ291bnQgJiYgIWV2ZW50LnRhcmdldC5kaXNhYmxlZCAmJiAhKGV2ZW50LmJ1dHRvbiAmJiBldmVudC50eXBlID09PSAiY2xpY2siKSApIHsKCiAgICAgICAgICAgICAgICAvLyBQcmVnZW5lcmF0ZSBhIHNpbmdsZSBqUXVlcnkgb2JqZWN0IGZvciByZXVzZSB3aXRoIC5pcygpCiAgICAgICAgICAgICAgICBqcWN1ciA9IGpRdWVyeSh0aGlzKTsKICAgICAgICAgICAgICAgIGpxY3VyLmNvbnRleHQgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpczsKCiAgICAgICAgICAgICAgICBmb3IgKCBjdXIgPSBldmVudC50YXJnZXQ7IGN1ciAhPSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkgewogICAgICAgICAgICAgICAgICAgIHNlbE1hdGNoID0ge307CiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IFtdOwogICAgICAgICAgICAgICAgICAgIGpxY3VyWzBdID0gY3VyOwogICAgICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkgewogICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdOwogICAgICAgICAgICAgICAgICAgICAgICBzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3I7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHNlbE1hdGNoWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsTWF0Y2hbIHNlbCBdID0gKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU9iai5xdWljayA/IHF1aWNrSXMoIGN1ciwgaGFuZGxlT2JqLnF1aWNrICkgOiBqcWN1ci5pcyggc2VsICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc2VsTWF0Y2hbIHNlbCBdICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGNoZXMubGVuZ3RoICkgewogICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IGN1ciwgbWF0Y2hlczogbWF0Y2hlcyB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnMKICAgICAgICAgICAgaWYgKCBoYW5kbGVycy5sZW5ndGggPiBkZWxlZ2F0ZUNvdW50ICkgewogICAgICAgICAgICAgICAgaGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiB0aGlzLCBtYXRjaGVzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1cwogICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGhhbmRsZXJRdWV1ZS5sZW5ndGggJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7IGkrKyApIHsKICAgICAgICAgICAgICAgIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkgXTsKICAgICAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07CgogICAgICAgICAgICAgICAgZm9yICggaiA9IDA7IGogPCBtYXRjaGVkLm1hdGNoZXMubGVuZ3RoICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpOyBqKysgKSB7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlT2JqID0gbWF0Y2hlZC5tYXRjaGVzWyBqIF07CgogICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBiZSBub24tZXhjbHVzaXZlIGFuZCBoYXZlIG5vIG5hbWVzcGFjZSwgb3IKICAgICAgICAgICAgICAgICAgICAvLyAyKSBoYXZlIG5hbWVzcGFjZShzKSBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS4KICAgICAgICAgICAgICAgICAgICBpZiAoIHJ1bl9hbGwgfHwgKCFldmVudC5uYW1lc3BhY2UgJiYgIWhhbmRsZU9iai5uYW1lc3BhY2UpIHx8IGV2ZW50Lm5hbWVzcGFjZV9yZSAmJiBldmVudC5uYW1lc3BhY2VfcmUudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgewoKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhOwogICAgICAgICAgICAgICAgICAgICAgICBldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7CgogICAgICAgICAgICAgICAgICAgICAgICByZXQgPSAoIChqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30pLmhhbmRsZSB8fCBoYW5kbGVPYmouaGFuZGxlciApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnJlc3VsdCA9IHJldDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcmV0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gZXZlbnQucmVzdWx0OwogICAgICAgIH0sCgogICAgICAgIC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50CiAgICAgICAgLy8gKioqIGF0dHJDaGFuZ2UgYXR0ck5hbWUgcmVsYXRlZE5vZGUgc3JjRWxlbWVudCAgYXJlIG5vdCBub3JtYWxpemVkLCBub24tVzNDLCBkZXByZWNhdGVkLCB3aWxsIGJlIHJlbW92ZWQgaW4gMS44ICoqKgogICAgICAgIHByb3BzOiAiYXR0ckNoYW5nZSBhdHRyTmFtZSByZWxhdGVkTm9kZSBzcmNFbGVtZW50IGFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaCIuc3BsaXQoIiAiKSwKCiAgICAgICAgZml4SG9va3M6IHt9LAoKICAgICAgICBrZXlIb29rczogewogICAgICAgICAgICBwcm9wczogImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGUiLnNwbGl0KCIgIiksCiAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHsKCiAgICAgICAgICAgICAgICAvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHMKICAgICAgICAgICAgICAgIGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHsKICAgICAgICAgICAgICAgICAgICBldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50OwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgbW91c2VIb29rczogewogICAgICAgICAgICBwcm9wczogImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudCIuc3BsaXQoIiAiKSwKICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkgewogICAgICAgICAgICAgICAgdmFyIGV2ZW50RG9jLCBkb2MsIGJvZHksCiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uLAogICAgICAgICAgICAgICAgICAgIGZyb21FbGVtZW50ID0gb3JpZ2luYWwuZnJvbUVsZW1lbnQ7CgogICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZQogICAgICAgICAgICAgICAgaWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHsKICAgICAgICAgICAgICAgICAgICBldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50OwogICAgICAgICAgICAgICAgICAgIGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDsKICAgICAgICAgICAgICAgICAgICBib2R5ID0gZXZlbnREb2MuYm9keTsKCiAgICAgICAgICAgICAgICAgICAgZXZlbnQucGFnZVggPSBvcmlnaW5hbC5jbGllbnRYICsgKCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCApOwogICAgICAgICAgICAgICAgICAgIGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArICggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRUb3AgIHx8IGJvZHkgJiYgYm9keS5jbGllbnRUb3AgIHx8IDAgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBBZGQgcmVsYXRlZFRhcmdldCwgaWYgbmVjZXNzYXJ5CiAgICAgICAgICAgICAgICBpZiAoICFldmVudC5yZWxhdGVkVGFyZ2V0ICYmIGZyb21FbGVtZW50ICkgewogICAgICAgICAgICAgICAgICAgIGV2ZW50LnJlbGF0ZWRUYXJnZXQgPSBmcm9tRWxlbWVudCA9PT0gZXZlbnQudGFyZ2V0ID8gb3JpZ2luYWwudG9FbGVtZW50IDogZnJvbUVsZW1lbnQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodAogICAgICAgICAgICAgICAgLy8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXQKICAgICAgICAgICAgICAgIGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgIGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBmaXg6IGZ1bmN0aW9uKCBldmVudCApIHsKICAgICAgICAgICAgaWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHsKICAgICAgICAgICAgICAgIHJldHVybiBldmVudDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzCiAgICAgICAgICAgIHZhciBpLCBwcm9wLAogICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudCA9IGV2ZW50LAogICAgICAgICAgICAgICAgZml4SG9vayA9IGpRdWVyeS5ldmVudC5maXhIb29rc1sgZXZlbnQudHlwZSBdIHx8IHt9LAogICAgICAgICAgICAgICAgY29weSA9IGZpeEhvb2sucHJvcHMgPyB0aGlzLnByb3BzLmNvbmNhdCggZml4SG9vay5wcm9wcyApIDogdGhpcy5wcm9wczsKCiAgICAgICAgICAgIGV2ZW50ID0galF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7CgogICAgICAgICAgICBmb3IgKCBpID0gY29weS5sZW5ndGg7IGk7ICkgewogICAgICAgICAgICAgICAgcHJvcCA9IGNvcHlbIC0taSBdOwogICAgICAgICAgICAgICAgZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gRml4IHRhcmdldCBwcm9wZXJ0eSwgaWYgbmVjZXNzYXJ5ICgjMTkyNSwgSUUgNi83LzggJiBTYWZhcmkyKQogICAgICAgICAgICBpZiAoICFldmVudC50YXJnZXQgKSB7CiAgICAgICAgICAgICAgICBldmVudC50YXJnZXQgPSBvcmlnaW5hbEV2ZW50LnNyY0VsZW1lbnQgfHwgZG9jdW1lbnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCBTYWZhcmkpCiAgICAgICAgICAgIGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgewogICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEZvciBtb3VzZS9rZXkgZXZlbnRzOyBhZGQgbWV0YUtleSBpZiBpdCdzIG5vdCB0aGVyZSAoIzMzNjgsIElFNi83LzgpCiAgICAgICAgICAgIGlmICggZXZlbnQubWV0YUtleSA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgZXZlbnQubWV0YUtleSA9IGV2ZW50LmN0cmxLZXk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBmaXhIb29rLmZpbHRlcj8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDsKICAgICAgICB9LAoKICAgICAgICBzcGVjaWFsOiB7CiAgICAgICAgICAgIHJlYWR5OiB7CiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHJlYWR5IGV2ZW50IGlzIHNldHVwCiAgICAgICAgICAgICAgICBzZXR1cDogalF1ZXJ5LmJpbmRSZWFkeQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgbG9hZDogewogICAgICAgICAgICAgICAgLy8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZAogICAgICAgICAgICAgICAgbm9CdWJibGU6IHRydWUKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGZvY3VzOiB7CiAgICAgICAgICAgICAgICBkZWxlZ2F0ZVR5cGU6ICJmb2N1c2luIgogICAgICAgICAgICB9LAogICAgICAgICAgICBibHVyOiB7CiAgICAgICAgICAgICAgICBkZWxlZ2F0ZVR5cGU6ICJmb2N1c291dCIKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGJlZm9yZXVubG9hZDogewogICAgICAgICAgICAgICAgc2V0dXA6IGZ1bmN0aW9uKCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApIHsKICAgICAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gZG8gdGhpcyBzcGVjaWFsIGNhc2Ugb24gd2luZG93cwogICAgICAgICAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzV2luZG93KCB0aGlzICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25iZWZvcmV1bmxvYWQgPSBldmVudEhhbmRsZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbiggbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9uYmVmb3JldW5sb2FkID09PSBldmVudEhhbmRsZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmJlZm9yZXVubG9hZCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgc2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCwgYnViYmxlICkgewogICAgICAgICAgICAvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmUuCiAgICAgICAgICAgIC8vIEZha2Ugb3JpZ2luYWxFdmVudCB0byBhdm9pZCBkb25vcidzIHN0b3BQcm9wYWdhdGlvbiwgYnV0IGlmIHRoZQogICAgICAgICAgICAvLyBzaW11bGF0ZWQgZXZlbnQgcHJldmVudHMgZGVmYXVsdCB0aGVuIHdlIGRvIHRoZSBzYW1lIG9uIHRoZSBkb25vci4KICAgICAgICAgICAgdmFyIGUgPSBqUXVlcnkuZXh0ZW5kKAogICAgICAgICAgICAgICAgbmV3IGpRdWVyeS5FdmVudCgpLAogICAgICAgICAgICAgICAgZXZlbnQsCiAgICAgICAgICAgICAgICB7IHR5cGU6IHR5cGUsCiAgICAgICAgICAgICAgICAgICAgaXNTaW11bGF0ZWQ6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDoge30KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICAgICAgaWYgKCBidWJibGUgKSB7CiAgICAgICAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmNhbGwoIGVsZW0sIGUgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKCi8vIFNvbWUgcGx1Z2lucyBhcmUgdXNpbmcsIGJ1dCBpdCdzIHVuZG9jdW1lbnRlZC9kZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQuCi8vIFRoZSAxLjcgc3BlY2lhbCBldmVudCBpbnRlcmZhY2Ugc2hvdWxkIHByb3ZpZGUgYWxsIHRoZSBob29rcyBuZWVkZWQgbm93LgogICAgalF1ZXJ5LmV2ZW50LmhhbmRsZSA9IGpRdWVyeS5ldmVudC5kaXNwYXRjaDsKCiAgICBqUXVlcnkucmVtb3ZlRXZlbnQgPSBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyID8KICAgICAgICBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkgewogICAgICAgICAgICBpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHsKICAgICAgICAgICAgICAgIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlLCBmYWxzZSApOwogICAgICAgICAgICB9CiAgICAgICAgfSA6CiAgICAgICAgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHsKICAgICAgICAgICAgaWYgKCBlbGVtLmRldGFjaEV2ZW50ICkgewogICAgICAgICAgICAgICAgZWxlbS5kZXRhY2hFdmVudCggIm9uIiArIHR5cGUsIGhhbmRsZSApOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICBqUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHsKICAgICAgICAvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmQKICAgICAgICBpZiAoICEodGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCkgKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7CiAgICAgICAgfQoKICAgICAgICAvLyBFdmVudCBvYmplY3QKICAgICAgICBpZiAoIHNyYyAmJiBzcmMudHlwZSApIHsKICAgICAgICAgICAgdGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjOwogICAgICAgICAgICB0aGlzLnR5cGUgPSBzcmMudHlwZTsKCiAgICAgICAgICAgIC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkCiAgICAgICAgICAgIC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLgogICAgICAgICAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9ICggc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHwgc3JjLnJldHVyblZhbHVlID09PSBmYWxzZSB8fAogICAgICAgICAgICAgICAgc3JjLmdldFByZXZlbnREZWZhdWx0ICYmIHNyYy5nZXRQcmV2ZW50RGVmYXVsdCgpICkgPyByZXR1cm5UcnVlIDogcmV0dXJuRmFsc2U7CgogICAgICAgICAgICAvLyBFdmVudCB0eXBlCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy50eXBlID0gc3JjOwogICAgICAgIH0KCiAgICAgICAgLy8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3QKICAgICAgICBpZiAoIHByb3BzICkgewogICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApOwogICAgICAgIH0KCiAgICAgICAgLy8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmUKICAgICAgICB0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTsKCiAgICAgICAgLy8gTWFyayBpdCBhcyBmaXhlZAogICAgICAgIHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlOwogICAgfTsKCiAgICBmdW5jdGlvbiByZXR1cm5GYWxzZSgpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBmdW5jdGlvbiByZXR1cm5UcnVlKCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nCi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbAogICAgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHsKICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTsKCiAgICAgICAgICAgIHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50OwogICAgICAgICAgICBpZiAoICFlICkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBpZiBwcmV2ZW50RGVmYXVsdCBleGlzdHMgcnVuIGl0IG9uIHRoZSBvcmlnaW5hbCBldmVudAogICAgICAgICAgICBpZiAoIGUucHJldmVudERlZmF1bHQgKSB7CiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHNldCB0aGUgcmV0dXJuVmFsdWUgcHJvcGVydHkgb2YgdGhlIG9yaWdpbmFsIGV2ZW50IHRvIGZhbHNlIChJRSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7CgogICAgICAgICAgICB2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDsKICAgICAgICAgICAgaWYgKCAhZSApIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBpZiBzdG9wUHJvcGFnYXRpb24gZXhpc3RzIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnQKICAgICAgICAgICAgaWYgKCBlLnN0b3BQcm9wYWdhdGlvbiApIHsKICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHNldCB0aGUgY2FuY2VsQnViYmxlIHByb3BlcnR5IG9mIHRoZSBvcmlnaW5hbCBldmVudCB0byB0cnVlIChJRSkKICAgICAgICAgICAgZS5jYW5jZWxCdWJibGUgPSB0cnVlOwogICAgICAgIH0sCiAgICAgICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7CiAgICAgICAgICAgIHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgfSwKICAgICAgICBpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLAogICAgICAgIGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSwKICAgICAgICBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UKICAgIH07CgovLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3MKICAgIGpRdWVyeS5lYWNoKHsKICAgICAgICBtb3VzZWVudGVyOiAibW91c2VvdmVyIiwKICAgICAgICBtb3VzZWxlYXZlOiAibW91c2VvdXQiCiAgICB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkgewogICAgICAgIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7CiAgICAgICAgICAgIGRlbGVnYXRlVHlwZTogZml4LAogICAgICAgICAgICBiaW5kVHlwZTogZml4LAoKICAgICAgICAgICAgaGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7CiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCwKICAgICAgICAgICAgICAgICAgICBoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmosCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBoYW5kbGVPYmouc2VsZWN0b3IsCiAgICAgICAgICAgICAgICAgICAgcmV0OwoKICAgICAgICAgICAgICAgIC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC4KICAgICAgICAgICAgICAgIC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93CiAgICAgICAgICAgICAgICBpZiAoICFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkpICkgewogICAgICAgICAgICAgICAgICAgIGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7CiAgICAgICAgICAgICAgICAgICAgcmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwogICAgICAgICAgICAgICAgICAgIGV2ZW50LnR5cGUgPSBmaXg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH0pOwoKLy8gSUUgc3VibWl0IGRlbGVnYXRpb24KICAgIGlmICggIWpRdWVyeS5zdXBwb3J0LnN1Ym1pdEJ1YmJsZXMgKSB7CgogICAgICAgIGpRdWVyeS5ldmVudC5zcGVjaWFsLnN1Ym1pdCA9IHsKICAgICAgICAgICAgc2V0dXA6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgLy8gT25seSBuZWVkIHRoaXMgZm9yIGRlbGVnYXRlZCBmb3JtIHN1Ym1pdCBldmVudHMKICAgICAgICAgICAgICAgIGlmICggalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCAiZm9ybSIgKSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gTGF6eS1hZGQgYSBzdWJtaXQgaGFuZGxlciB3aGVuIGEgZGVzY2VuZGFudCBmb3JtIG1heSBwb3RlbnRpYWxseSBiZSBzdWJtaXR0ZWQKICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsICJjbGljay5fc3VibWl0IGtleXByZXNzLl9zdWJtaXQiLCBmdW5jdGlvbiggZSApIHsKICAgICAgICAgICAgICAgICAgICAvLyBOb2RlIG5hbWUgY2hlY2sgYXZvaWRzIGEgVk1MLXJlbGF0ZWQgY3Jhc2ggaW4gSUUgKCM5ODA3KQogICAgICAgICAgICAgICAgICAgIHZhciBlbGVtID0gZS50YXJnZXQsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0gPSBqUXVlcnkubm9kZU5hbWUoIGVsZW0sICJpbnB1dCIgKSB8fCBqUXVlcnkubm9kZU5hbWUoIGVsZW0sICJidXR0b24iICkgPyBlbGVtLmZvcm0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBmb3JtICYmICFmb3JtLl9zdWJtaXRfYXR0YWNoZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5hZGQoIGZvcm0sICJzdWJtaXQuX3N1Ym1pdCIsIGZ1bmN0aW9uKCBldmVudCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGZvcm0gd2FzIHN1Ym1pdHRlZCBieSB0aGUgdXNlciwgYnViYmxlIHRoZSBldmVudCB1cCB0aGUgdHJlZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzVHJpZ2dlciApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXZlbnQuc2ltdWxhdGUoICJzdWJtaXQiLCB0aGlzLnBhcmVudE5vZGUsIGV2ZW50LCB0cnVlICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBmb3JtLl9zdWJtaXRfYXR0YWNoZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgLy8gcmV0dXJuIHVuZGVmaW5lZCBzaW5jZSB3ZSBkb24ndCBuZWVkIGFuIGV2ZW50IGxpc3RlbmVyCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB0ZWFyZG93bjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAvLyBPbmx5IG5lZWQgdGhpcyBmb3IgZGVsZWdhdGVkIGZvcm0gc3VibWl0IGV2ZW50cwogICAgICAgICAgICAgICAgaWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsICJmb3JtIiApICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZGVsZWdhdGVkIGhhbmRsZXJzOyBjbGVhbkRhdGEgZXZlbnR1YWxseSByZWFwcyBzdWJtaXQgaGFuZGxlcnMgYXR0YWNoZWQgYWJvdmUKICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsICIuX3N1Ym1pdCIgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgovLyBJRSBjaGFuZ2UgZGVsZWdhdGlvbiBhbmQgY2hlY2tib3gvcmFkaW8gZml4CiAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC5jaGFuZ2VCdWJibGVzICkgewoKICAgICAgICBqUXVlcnkuZXZlbnQuc3BlY2lhbC5jaGFuZ2UgPSB7CgogICAgICAgICAgICBzZXR1cDogZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgaWYgKCByZm9ybUVsZW1zLnRlc3QoIHRoaXMubm9kZU5hbWUgKSApIHsKICAgICAgICAgICAgICAgICAgICAvLyBJRSBkb2Vzbid0IGZpcmUgY2hhbmdlIG9uIGEgY2hlY2svcmFkaW8gdW50aWwgYmx1cjsgdHJpZ2dlciBpdCBvbiBjbGljawogICAgICAgICAgICAgICAgICAgIC8vIGFmdGVyIGEgcHJvcGVydHljaGFuZ2UuIEVhdCB0aGUgYmx1ci1jaGFuZ2UgaW4gc3BlY2lhbC5jaGFuZ2UuaGFuZGxlLgogICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc3RpbGwgZmlyZXMgb25jaGFuZ2UgYSBzZWNvbmQgdGltZSBmb3IgY2hlY2svcmFkaW8gYWZ0ZXIgYmx1ci4KICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMudHlwZSA9PT0gImNoZWNrYm94IiB8fCB0aGlzLnR5cGUgPT09ICJyYWRpbyIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsICJwcm9wZXJ0eWNoYW5nZS5fY2hhbmdlIiwgZnVuY3Rpb24oIGV2ZW50ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBldmVudC5vcmlnaW5hbEV2ZW50LnByb3BlcnR5TmFtZSA9PT0gImNoZWNrZWQiICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2p1c3RfY2hhbmdlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCAiY2xpY2suX2NoYW5nZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5fanVzdF9jaGFuZ2VkICYmICFldmVudC5pc1RyaWdnZXIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fanVzdF9jaGFuZ2VkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCAiY2hhbmdlIiwgdGhpcywgZXZlbnQsIHRydWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIERlbGVnYXRlZCBldmVudDsgbGF6eS1hZGQgYSBjaGFuZ2UgaGFuZGxlciBvbiBkZXNjZW5kYW50IGlucHV0cwogICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgImJlZm9yZWFjdGl2YXRlLl9jaGFuZ2UiLCBmdW5jdGlvbiggZSApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IGUudGFyZ2V0OwoKICAgICAgICAgICAgICAgICAgICBpZiAoIHJmb3JtRWxlbXMudGVzdCggZWxlbS5ub2RlTmFtZSApICYmICFlbGVtLl9jaGFuZ2VfYXR0YWNoZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5hZGQoIGVsZW0sICJjaGFuZ2UuX2NoYW5nZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5wYXJlbnROb2RlICYmICFldmVudC5pc1NpbXVsYXRlZCAmJiAhZXZlbnQuaXNUcmlnZ2VyICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5zaW11bGF0ZSggImNoYW5nZSIsIHRoaXMucGFyZW50Tm9kZSwgZXZlbnQsIHRydWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uX2NoYW5nZV9hdHRhY2hlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHsKICAgICAgICAgICAgICAgIHZhciBlbGVtID0gZXZlbnQudGFyZ2V0OwoKICAgICAgICAgICAgICAgIC8vIFN3YWxsb3cgbmF0aXZlIGNoYW5nZSBldmVudHMgZnJvbSBjaGVja2JveC9yYWRpbywgd2UgYWxyZWFkeSB0cmlnZ2VyZWQgdGhlbSBhYm92ZQogICAgICAgICAgICAgICAgaWYgKCB0aGlzICE9PSBlbGVtIHx8IGV2ZW50LmlzU2ltdWxhdGVkIHx8IGV2ZW50LmlzVHJpZ2dlciB8fCAoZWxlbS50eXBlICE9PSAicmFkaW8iICYmIGVsZW0udHlwZSAhPT0gImNoZWNrYm94IikgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsICIuX2NoYW5nZSIgKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gcmZvcm1FbGVtcy50ZXN0KCB0aGlzLm5vZGVOYW1lICk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKLy8gQ3JlYXRlICJidWJibGluZyIgZm9jdXMgYW5kIGJsdXIgZXZlbnRzCiAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC5mb2N1c2luQnViYmxlcyApIHsKICAgICAgICBqUXVlcnkuZWFjaCh7IGZvY3VzOiAiZm9jdXNpbiIsIGJsdXI6ICJmb2N1c291dCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHsKCiAgICAgICAgICAgIC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXQKICAgICAgICAgICAgdmFyIGF0dGFjaGVzID0gMCwKICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSwgdHJ1ZSApOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHsKICAgICAgICAgICAgICAgIHNldHVwOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIGF0dGFjaGVzKysgPT09IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdGVhcmRvd246IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGlmICggLS1hdHRhY2hlcyA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9KTsKICAgIH0KCiAgICBqUXVlcnkuZm4uZXh0ZW5kKHsKCiAgICAgICAgb246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAvKklOVEVSTkFMKi8gb25lICkgewogICAgICAgICAgICB2YXIgb3JpZ0ZuLCB0eXBlOwoKICAgICAgICAgICAgLy8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzCiAgICAgICAgICAgIGlmICggdHlwZW9mIHR5cGVzID09PSAib2JqZWN0IiApIHsKICAgICAgICAgICAgICAgIC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApCiAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gInN0cmluZyIgKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKQogICAgICAgICAgICAgICAgICAgIGRhdGEgPSBzZWxlY3RvcjsKICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbiggdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7CiAgICAgICAgICAgICAgICAvLyAoIHR5cGVzLCBmbiApCiAgICAgICAgICAgICAgICBmbiA9IHNlbGVjdG9yOwogICAgICAgICAgICAgICAgZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkgewogICAgICAgICAgICAgICAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09ICJzdHJpbmciICkgewogICAgICAgICAgICAgICAgICAgIC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApCiAgICAgICAgICAgICAgICAgICAgZm4gPSBkYXRhOwogICAgICAgICAgICAgICAgICAgIGRhdGEgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vICggdHlwZXMsIGRhdGEsIGZuICkKICAgICAgICAgICAgICAgICAgICBmbiA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHNlbGVjdG9yOwogICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggZm4gPT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgZm4gPSByZXR1cm5GYWxzZTsKICAgICAgICAgICAgfSBlbHNlIGlmICggIWZuICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggb25lID09PSAxICkgewogICAgICAgICAgICAgICAgb3JpZ0ZuID0gZm47CiAgICAgICAgICAgICAgICBmbiA9IGZ1bmN0aW9uKCBldmVudCApIHsKICAgICAgICAgICAgICAgICAgICAvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm8KICAgICAgICAgICAgICAgICAgICBqUXVlcnkoKS5vZmYoIGV2ZW50ICk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgLy8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm4KICAgICAgICAgICAgICAgIGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uLmNhbGwoIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTsKICAgICAgICB9LAogICAgICAgIG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7CiAgICAgICAgICAgIGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkgewogICAgICAgICAgICAgICAgLy8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudAogICAgICAgICAgICAgICAgdmFyIGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajsKICAgICAgICAgICAgICAgIGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlT2JqLm5hbWVzcGFjZT8gaGFuZGxlT2JqLnR5cGUgKyAiLiIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDogaGFuZGxlT2JqLnR5cGUsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlT2JqLnNlbGVjdG9yLAogICAgICAgICAgICAgICAgICAgIGhhbmRsZU9iai5oYW5kbGVyCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCB0eXBlb2YgdHlwZXMgPT09ICJvYmplY3QiICkgewogICAgICAgICAgICAgICAgLy8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdICkKICAgICAgICAgICAgICAgIGZvciAoIHZhciB0eXBlIGluIHR5cGVzICkgewogICAgICAgICAgICAgICAgICAgIHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAiZnVuY3Rpb24iICkgewogICAgICAgICAgICAgICAgLy8gKCB0eXBlcyBbLCBmbl0gKQogICAgICAgICAgICAgICAgZm4gPSBzZWxlY3RvcjsKICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggZm4gPT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgZm4gPSByZXR1cm5GYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7CiAgICAgICAgfSwKICAgICAgICB1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7CiAgICAgICAgfSwKCiAgICAgICAgbGl2ZTogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHsKICAgICAgICAgICAgalF1ZXJ5KCB0aGlzLmNvbnRleHQgKS5vbiggdHlwZXMsIHRoaXMuc2VsZWN0b3IsIGRhdGEsIGZuICk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAgICAgZGllOiBmdW5jdGlvbiggdHlwZXMsIGZuICkgewogICAgICAgICAgICBqUXVlcnkoIHRoaXMuY29udGV4dCApLm9mZiggdHlwZXMsIHRoaXMuc2VsZWN0b3IgfHwgIioqIiwgZm4gKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApOwogICAgICAgIH0sCiAgICAgICAgdW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7CiAgICAgICAgICAgIC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dICkKICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT0gMT8gdGhpcy5vZmYoIHNlbGVjdG9yLCAiKioiICkgOiB0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yLCBmbiApOwogICAgICAgIH0sCgogICAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICB0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7CiAgICAgICAgICAgIGlmICggdGhpc1swXSApIHsKICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpc1swXSwgdHJ1ZSApOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiggZm4gKSB7CiAgICAgICAgICAgIC8vIFNhdmUgcmVmZXJlbmNlIHRvIGFyZ3VtZW50cyBmb3IgYWNjZXNzIGluIGNsb3N1cmUKICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsCiAgICAgICAgICAgICAgICBndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrLAogICAgICAgICAgICAgICAgaSA9IDAsCiAgICAgICAgICAgICAgICB0b2dnbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkgewogICAgICAgICAgICAgICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hpY2ggZnVuY3Rpb24gdG8gZXhlY3V0ZQogICAgICAgICAgICAgICAgICAgIHZhciBsYXN0VG9nZ2xlID0gKCBqUXVlcnkuX2RhdGEoIHRoaXMsICJsYXN0VG9nZ2xlIiArIGZuLmd1aWQgKSB8fCAwICkgJSBpOwogICAgICAgICAgICAgICAgICAgIGpRdWVyeS5fZGF0YSggdGhpcywgImxhc3RUb2dnbGUiICsgZm4uZ3VpZCwgbGFzdFRvZ2dsZSArIDEgKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgY2xpY2tzIHN0b3AKICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICAgICAgICAgICAgICAvLyBhbmQgZXhlY3V0ZSB0aGUgZnVuY3Rpb24KICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1sgbGFzdFRvZ2dsZSBdLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSB8fCBmYWxzZTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAvLyBsaW5rIGFsbCB0aGUgZnVuY3Rpb25zLCBzbyBhbnkgb2YgdGhlbSBjYW4gdW5iaW5kIHRoaXMgY2xpY2sgaGFuZGxlcgogICAgICAgICAgICB0b2dnbGVyLmd1aWQgPSBndWlkOwogICAgICAgICAgICB3aGlsZSAoIGkgPCBhcmdzLmxlbmd0aCApIHsKICAgICAgICAgICAgICAgIGFyZ3NbIGkrKyBdLmd1aWQgPSBndWlkOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpcy5jbGljayggdG9nZ2xlciApOwogICAgICAgIH0sCgogICAgICAgIGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7CiAgICAgICAgfQogICAgfSk7CgogICAgalF1ZXJ5LmVhY2goICgiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgIiArCiAgICAgICAgIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlICIgKwogICAgICAgICJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51Iikuc3BsaXQoIiAiKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7CgogICAgICAgIC8vIEhhbmRsZSBldmVudCBiaW5kaW5nCiAgICAgICAgalF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7CiAgICAgICAgICAgIGlmICggZm4gPT0gbnVsbCApIHsKICAgICAgICAgICAgICAgIGZuID0gZGF0YTsKICAgICAgICAgICAgICAgIGRhdGEgPSBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgPwogICAgICAgICAgICAgICAgdGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6CiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoIG5hbWUgKTsKICAgICAgICB9OwoKICAgICAgICBpZiAoIGpRdWVyeS5hdHRyRm4gKSB7CiAgICAgICAgICAgIGpRdWVyeS5hdHRyRm5bIG5hbWUgXSA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoIHJrZXlFdmVudC50ZXN0KCBuYW1lICkgKSB7CiAgICAgICAgICAgIGpRdWVyeS5ldmVudC5maXhIb29rc1sgbmFtZSBdID0galF1ZXJ5LmV2ZW50LmtleUhvb2tzOwogICAgICAgIH0KCiAgICAgICAgaWYgKCBybW91c2VFdmVudC50ZXN0KCBuYW1lICkgKSB7CiAgICAgICAgICAgIGpRdWVyeS5ldmVudC5maXhIb29rc1sgbmFtZSBdID0galF1ZXJ5LmV2ZW50Lm1vdXNlSG9va3M7CiAgICAgICAgfQogICAgfSk7CgoKCiAgICAvKiEKICAgICAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lCiAgICAgKiAgQ29weXJpZ2h0IDIwMTEsIFRoZSBEb2pvIEZvdW5kYXRpb24KICAgICAqICBSZWxlYXNlZCB1bmRlciB0aGUgTUlULCBCU0QsIGFuZCBHUEwgTGljZW5zZXMuCiAgICAgKiAgTW9yZSBpbmZvcm1hdGlvbjogaHR0cDovL3NpenpsZWpzLmNvbS8KICAgICAqLwogICAgKGZ1bmN0aW9uKCl7CgogICAgICAgIHZhciBjaHVua2VyID0gLygoPzpcKCg/OlwoW14oKV0rXCl8W14oKV0rKStcKXxcWyg/OlxbW15cW1xdXSpcXXxbJyJdW14nIl0qWyciXXxbXlxbXF0nIl0rKStcXXxcXC58W14gPit+LChcW1xcXSspK3xbPit+XSkoXHMqLFxzKik/KCg/Oi58XHJ8XG4pKikvZywKICAgICAgICAgICAgZXhwYW5kbyA9ICJzaXpjYWNoZSIgKyAoTWF0aC5yYW5kb20oKSArICcnKS5yZXBsYWNlKCcuJywgJycpLAogICAgICAgICAgICBkb25lID0gMCwKICAgICAgICAgICAgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLAogICAgICAgICAgICBoYXNEdXBsaWNhdGUgPSBmYWxzZSwKICAgICAgICAgICAgYmFzZUhhc0R1cGxpY2F0ZSA9IHRydWUsCiAgICAgICAgICAgIHJCYWNrc2xhc2ggPSAvXFwvZywKICAgICAgICAgICAgclJldHVybiA9IC9cclxuL2csCiAgICAgICAgICAgIHJOb25Xb3JkID0gL1xXLzsKCi8vIEhlcmUgd2UgY2hlY2sgaWYgdGhlIEphdmFTY3JpcHQgZW5naW5lIGlzIHVzaW5nIHNvbWUgc29ydCBvZgovLyBvcHRpbWl6YXRpb24gd2hlcmUgaXQgZG9lcyBub3QgYWx3YXlzIGNhbGwgb3VyIGNvbXBhcmlzaW9uCi8vIGZ1bmN0aW9uLiBJZiB0aGF0IGlzIHRoZSBjYXNlLCBkaXNjYXJkIHRoZSBoYXNEdXBsaWNhdGUgdmFsdWUuCi8vICAgVGh1cyBmYXIgdGhhdCBpbmNsdWRlcyBHb29nbGUgQ2hyb21lLgogICAgICAgIFswLCAwXS5zb3J0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICBiYXNlSGFzRHVwbGljYXRlID0gZmFsc2U7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgU2l6emxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkgewogICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cyB8fCBbXTsKICAgICAgICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7CgogICAgICAgICAgICB2YXIgb3JpZ0NvbnRleHQgPSBjb250ZXh0OwoKICAgICAgICAgICAgaWYgKCBjb250ZXh0Lm5vZGVUeXBlICE9PSAxICYmIGNvbnRleHQubm9kZVR5cGUgIT09IDkgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggIXNlbGVjdG9yIHx8IHR5cGVvZiBzZWxlY3RvciAhPT0gInN0cmluZyIgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIG0sIHNldCwgY2hlY2tTZXQsIGV4dHJhLCByZXQsIGN1ciwgcG9wLCBpLAogICAgICAgICAgICAgICAgcHJ1bmUgPSB0cnVlLAogICAgICAgICAgICAgICAgY29udGV4dFhNTCA9IFNpenpsZS5pc1hNTCggY29udGV4dCApLAogICAgICAgICAgICAgICAgcGFydHMgPSBbXSwKICAgICAgICAgICAgICAgIHNvRmFyID0gc2VsZWN0b3I7CgogICAgICAgICAgICAvLyBSZXNldCB0aGUgcG9zaXRpb24gb2YgdGhlIGNodW5rZXIgcmVnZXhwIChzdGFydCBmcm9tIGhlYWQpCiAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgIGNodW5rZXIuZXhlYyggIiIgKTsKICAgICAgICAgICAgICAgIG0gPSBjaHVua2VyLmV4ZWMoIHNvRmFyICk7CgogICAgICAgICAgICAgICAgaWYgKCBtICkgewogICAgICAgICAgICAgICAgICAgIHNvRmFyID0gbVszXTsKCiAgICAgICAgICAgICAgICAgICAgcGFydHMucHVzaCggbVsxXSApOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIG1bMl0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhID0gbVszXTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IHdoaWxlICggbSApOwoKICAgICAgICAgICAgaWYgKCBwYXJ0cy5sZW5ndGggPiAxICYmIG9yaWdQT1MuZXhlYyggc2VsZWN0b3IgKSApIHsKCiAgICAgICAgICAgICAgICBpZiAoIHBhcnRzLmxlbmd0aCA9PT0gMiAmJiBFeHByLnJlbGF0aXZlWyBwYXJ0c1swXSBdICkgewogICAgICAgICAgICAgICAgICAgIHNldCA9IHBvc1Byb2Nlc3MoIHBhcnRzWzBdICsgcGFydHNbMV0sIGNvbnRleHQsIHNlZWQgKTsKCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNldCA9IEV4cHIucmVsYXRpdmVbIHBhcnRzWzBdIF0gPwogICAgICAgICAgICAgICAgICAgICAgICBbIGNvbnRleHQgXSA6CiAgICAgICAgICAgICAgICAgICAgICAgIFNpenpsZSggcGFydHMuc2hpZnQoKSwgY29udGV4dCApOwoKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIHBhcnRzLmxlbmd0aCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBwYXJ0cy5zaGlmdCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBFeHByLnJlbGF0aXZlWyBzZWxlY3RvciBdICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgKz0gcGFydHMuc2hpZnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgc2V0ID0gcG9zUHJvY2Vzcyggc2VsZWN0b3IsIHNldCwgc2VlZCApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBUYWtlIGEgc2hvcnRjdXQgYW5kIHNldCB0aGUgY29udGV4dCBpZiB0aGUgcm9vdCBzZWxlY3RvciBpcyBhbiBJRAogICAgICAgICAgICAgICAgLy8gKGJ1dCBub3QgaWYgaXQnbGwgYmUgZmFzdGVyIGlmIHRoZSBpbm5lciBzZWxlY3RvciBpcyBhbiBJRCkKICAgICAgICAgICAgICAgIGlmICggIXNlZWQgJiYgcGFydHMubGVuZ3RoID4gMSAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmICFjb250ZXh0WE1MICYmCiAgICAgICAgICAgICAgICAgICAgRXhwci5tYXRjaC5JRC50ZXN0KHBhcnRzWzBdKSAmJiAhRXhwci5tYXRjaC5JRC50ZXN0KHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdKSApIHsKCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gU2l6emxlLmZpbmQoIHBhcnRzLnNoaWZ0KCksIGNvbnRleHQsIGNvbnRleHRYTUwgKTsKICAgICAgICAgICAgICAgICAgICBjb250ZXh0ID0gcmV0LmV4cHIgPwogICAgICAgICAgICAgICAgICAgICAgICBTaXp6bGUuZmlsdGVyKCByZXQuZXhwciwgcmV0LnNldCApWzBdIDoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnNldFswXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIGNvbnRleHQgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0ID0gc2VlZCA/CiAgICAgICAgICAgICAgICAgICAgeyBleHByOiBwYXJ0cy5wb3AoKSwgc2V0OiBtYWtlQXJyYXkoc2VlZCkgfSA6CiAgICAgICAgICAgICAgICAgICAgICAgIFNpenpsZS5maW5kKCBwYXJ0cy5wb3AoKSwgcGFydHMubGVuZ3RoID09PSAxICYmIChwYXJ0c1swXSA9PT0gIn4iIHx8IHBhcnRzWzBdID09PSAiKyIpICYmIGNvbnRleHQucGFyZW50Tm9kZSA/IGNvbnRleHQucGFyZW50Tm9kZSA6IGNvbnRleHQsIGNvbnRleHRYTUwgKTsKCiAgICAgICAgICAgICAgICAgICAgc2V0ID0gcmV0LmV4cHIgPwogICAgICAgICAgICAgICAgICAgICAgICBTaXp6bGUuZmlsdGVyKCByZXQuZXhwciwgcmV0LnNldCApIDoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnNldDsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJ0cy5sZW5ndGggPiAwICkgewogICAgICAgICAgICAgICAgICAgICAgICBjaGVja1NldCA9IG1ha2VBcnJheSggc2V0ICk7CgogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBydW5lID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIHBhcnRzLmxlbmd0aCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VyID0gcGFydHMucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvcCA9IGN1cjsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIUV4cHIucmVsYXRpdmVbIGN1ciBdICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3AgPSBwYXJ0cy5wb3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwb3AgPT0gbnVsbCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcCA9IGNvbnRleHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIEV4cHIucmVsYXRpdmVbIGN1ciBdKCBjaGVja1NldCwgcG9wLCBjb250ZXh0WE1MICk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY2hlY2tTZXQgPSBwYXJ0cyA9IFtdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoICFjaGVja1NldCApIHsKICAgICAgICAgICAgICAgIGNoZWNrU2V0ID0gc2V0OwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoICFjaGVja1NldCApIHsKICAgICAgICAgICAgICAgIFNpenpsZS5lcnJvciggY3VyIHx8IHNlbGVjdG9yICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggdG9TdHJpbmcuY2FsbChjaGVja1NldCkgPT09ICJbb2JqZWN0IEFycmF5XSIgKSB7CiAgICAgICAgICAgICAgICBpZiAoICFwcnVuZSApIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2guYXBwbHkoIHJlc3VsdHMsIGNoZWNrU2V0ICk7CgogICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwOyBjaGVja1NldFtpXSAhPSBudWxsOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY2hlY2tTZXRbaV0gJiYgKGNoZWNrU2V0W2ldID09PSB0cnVlIHx8IGNoZWNrU2V0W2ldLm5vZGVUeXBlID09PSAxICYmIFNpenpsZS5jb250YWlucyhjb250ZXh0LCBjaGVja1NldFtpXSkpICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKCBzZXRbaV0gKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwOyBjaGVja1NldFtpXSAhPSBudWxsOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY2hlY2tTZXRbaV0gJiYgY2hlY2tTZXRbaV0ubm9kZVR5cGUgPT09IDEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goIHNldFtpXSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG1ha2VBcnJheSggY2hlY2tTZXQsIHJlc3VsdHMgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBleHRyYSApIHsKICAgICAgICAgICAgICAgIFNpenpsZSggZXh0cmEsIG9yaWdDb250ZXh0LCByZXN1bHRzLCBzZWVkICk7CiAgICAgICAgICAgICAgICBTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9OwoKICAgICAgICBTaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkgewogICAgICAgICAgICBpZiAoIHNvcnRPcmRlciApIHsKICAgICAgICAgICAgICAgIGhhc0R1cGxpY2F0ZSA9IGJhc2VIYXNEdXBsaWNhdGU7CiAgICAgICAgICAgICAgICByZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApOwoKICAgICAgICAgICAgICAgIGlmICggaGFzRHVwbGljYXRlICkgewogICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMTsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcmVzdWx0c1tpXSA9PT0gcmVzdWx0c1sgaSAtIDEgXSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuc3BsaWNlKCBpLS0sIDEgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgfTsKCiAgICAgICAgU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgc2V0ICkgewogICAgICAgICAgICByZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBzZXQgKTsKICAgICAgICB9OwoKICAgICAgICBTaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIG5vZGUsIGV4cHIgKSB7CiAgICAgICAgICAgIHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIFtub2RlXSApLmxlbmd0aCA+IDA7CiAgICAgICAgfTsKCiAgICAgICAgU2l6emxlLmZpbmQgPSBmdW5jdGlvbiggZXhwciwgY29udGV4dCwgaXNYTUwgKSB7CiAgICAgICAgICAgIHZhciBzZXQsIGksIGxlbiwgbWF0Y2gsIHR5cGUsIGxlZnQ7CgogICAgICAgICAgICBpZiAoICFleHByICkgewogICAgICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKCBpID0gMCwgbGVuID0gRXhwci5vcmRlci5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHsKICAgICAgICAgICAgICAgIHR5cGUgPSBFeHByLm9yZGVyW2ldOwoKICAgICAgICAgICAgICAgIGlmICggKG1hdGNoID0gRXhwci5sZWZ0TWF0Y2hbIHR5cGUgXS5leGVjKCBleHByICkpICkgewogICAgICAgICAgICAgICAgICAgIGxlZnQgPSBtYXRjaFsxXTsKICAgICAgICAgICAgICAgICAgICBtYXRjaC5zcGxpY2UoIDEsIDEgKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCBsZWZ0LnN1YnN0ciggbGVmdC5sZW5ndGggLSAxICkgIT09ICJcXCIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdID0gKG1hdGNoWzFdIHx8ICIiKS5yZXBsYWNlKCByQmFja3NsYXNoLCAiIiApOwogICAgICAgICAgICAgICAgICAgICAgICBzZXQgPSBFeHByLmZpbmRbIHR5cGUgXSggbWF0Y2gsIGNvbnRleHQsIGlzWE1MICk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHNldCAhPSBudWxsICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciA9IGV4cHIucmVwbGFjZSggRXhwci5tYXRjaFsgdHlwZSBdLCAiIiApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggIXNldCApIHsKICAgICAgICAgICAgICAgIHNldCA9IHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSAidW5kZWZpbmVkIiA/CiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggIioiICkgOgogICAgICAgICAgICAgICAgICAgIFtdOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4geyBzZXQ6IHNldCwgZXhwcjogZXhwciB9OwogICAgICAgIH07CgogICAgICAgIFNpenpsZS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgc2V0LCBpbnBsYWNlLCBub3QgKSB7CiAgICAgICAgICAgIHZhciBtYXRjaCwgYW55Rm91bmQsCiAgICAgICAgICAgICAgICB0eXBlLCBmb3VuZCwgaXRlbSwgZmlsdGVyLCBsZWZ0LAogICAgICAgICAgICAgICAgaSwgcGFzcywKICAgICAgICAgICAgICAgIG9sZCA9IGV4cHIsCiAgICAgICAgICAgICAgICByZXN1bHQgPSBbXSwKICAgICAgICAgICAgICAgIGN1ckxvb3AgPSBzZXQsCiAgICAgICAgICAgICAgICBpc1hNTEZpbHRlciA9IHNldCAmJiBzZXRbMF0gJiYgU2l6emxlLmlzWE1MKCBzZXRbMF0gKTsKCiAgICAgICAgICAgIHdoaWxlICggZXhwciAmJiBzZXQubGVuZ3RoICkgewogICAgICAgICAgICAgICAgZm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIChtYXRjaCA9IEV4cHIubGVmdE1hdGNoWyB0eXBlIF0uZXhlYyggZXhwciApKSAhPSBudWxsICYmIG1hdGNoWzJdICkgewogICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgPSBFeHByLmZpbHRlclsgdHlwZSBdOwogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gbWF0Y2hbMV07CgogICAgICAgICAgICAgICAgICAgICAgICBhbnlGb3VuZCA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2guc3BsaWNlKDEsMSk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGxlZnQuc3Vic3RyKCBsZWZ0Lmxlbmd0aCAtIDEgKSA9PT0gIlxcIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGN1ckxvb3AgPT09IHJlc3VsdCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIEV4cHIucHJlRmlsdGVyWyB0eXBlIF0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IEV4cHIucHJlRmlsdGVyWyB0eXBlIF0oIG1hdGNoLCBjdXJMb29wLCBpbnBsYWNlLCByZXN1bHQsIG5vdCwgaXNYTUxGaWx0ZXIgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFtYXRjaCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlGb3VuZCA9IGZvdW5kID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBtYXRjaCA9PT0gdHJ1ZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRjaCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwOyAoaXRlbSA9IGN1ckxvb3BbaV0pICE9IG51bGw7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGl0ZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gZmlsdGVyKCBpdGVtLCBtYXRjaCwgaSwgY3VyTG9vcCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzID0gbm90IF4gZm91bmQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGlucGxhY2UgJiYgZm91bmQgIT0gbnVsbCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGFzcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlGb3VuZCA9IHRydWU7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJMb29wW2ldID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBwYXNzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goIGl0ZW0gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueUZvdW5kID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBmb3VuZCAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhaW5wbGFjZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJMb29wID0gcmVzdWx0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSBleHByLnJlcGxhY2UoIEV4cHIubWF0Y2hbIHR5cGUgXSwgIiIgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFhbnlGb3VuZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gSW1wcm9wZXIgZXhwcmVzc2lvbgogICAgICAgICAgICAgICAgaWYgKCBleHByID09PSBvbGQgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBhbnlGb3VuZCA9PSBudWxsICkgewogICAgICAgICAgICAgICAgICAgICAgICBTaXp6bGUuZXJyb3IoIGV4cHIgKTsKCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG9sZCA9IGV4cHI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBjdXJMb29wOwogICAgICAgIH07CgogICAgICAgIFNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246ICIgKyBtc2cgKTsKICAgICAgICB9OwoKICAgICAgICAvKioKICAgICAgICAgKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyZWl2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2RlcwogICAgICAgICAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbQogICAgICAgICAqLwogICAgICAgIHZhciBnZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgICAgdmFyIGksIG5vZGUsCiAgICAgICAgICAgICAgICBub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGUsCiAgICAgICAgICAgICAgICByZXQgPSAiIjsKCiAgICAgICAgICAgIGlmICggbm9kZVR5cGUgKSB7CiAgICAgICAgICAgICAgICBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5ICkgewogICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0ZXh0Q29udGVudCB8fCBpbm5lclRleHQgZm9yIGVsZW1lbnRzCiAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gJ3N0cmluZycgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLnRleHRDb250ZW50OwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiBlbGVtLmlubmVyVGV4dCA9PT0gJ3N0cmluZycgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlcGxhY2UgSUUncyBjYXJyaWFnZSByZXR1cm5zCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmlubmVyVGV4dC5yZXBsYWNlKCByUmV0dXJuLCAnJyApOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyYXZlcnNlIGl0J3MgY2hpbGRyZW4KICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCArPSBnZXRUZXh0KCBlbGVtICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS5ub2RlVmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgLy8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXkKICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwOyAobm9kZSA9IGVsZW1baV0pOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXMKICAgICAgICAgICAgICAgICAgICBpZiAoIG5vZGUubm9kZVR5cGUgIT09IDggKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldCArPSBnZXRUZXh0KCBub2RlICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIEV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0gewogICAgICAgICAgICBvcmRlcjogWyAiSUQiLCAiTkFNRSIsICJUQUciIF0sCgogICAgICAgICAgICBtYXRjaDogewogICAgICAgICAgICAgICAgSUQ6IC8jKCg/Oltcd1x1MDBjMC1cdUZGRkZcLV18XFwuKSspLywKICAgICAgICAgICAgICAgIENMQVNTOiAvXC4oKD86W1x3XHUwMGMwLVx1RkZGRlwtXXxcXC4pKykvLAogICAgICAgICAgICAgICAgTkFNRTogL1xbbmFtZT1bJyJdKigoPzpbXHdcdTAwYzAtXHVGRkZGXC1dfFxcLikrKVsnIl0qXF0vLAogICAgICAgICAgICAgICAgQVRUUjogL1xbXHMqKCg/Oltcd1x1MDBjMC1cdUZGRkZcLV18XFwuKSspXHMqKD86KFxTPz0pXHMqKD86KFsnIl0pKC4qPylcM3woIz8oPzpbXHdcdTAwYzAtXHVGRkZGXC1dfFxcLikqKXwpfClccypcXS8sCiAgICAgICAgICAgICAgICBUQUc6IC9eKCg/Oltcd1x1MDBjMC1cdUZGRkZcKlwtXXxcXC4pKykvLAogICAgICAgICAgICAgICAgQ0hJTEQ6IC86KG9ubHl8bnRofGxhc3R8Zmlyc3QpLWNoaWxkKD86XChccyooZXZlbnxvZGR8KD86WytcLV0/XGQrfCg/OlsrXC1dP1xkKik/blxzKig/OlsrXC1dXHMqXGQrKT8pKVxzKlwpKT8vLAogICAgICAgICAgICAgICAgUE9TOiAvOihudGh8ZXF8Z3R8bHR8Zmlyc3R8bGFzdHxldmVufG9kZCkoPzpcKChcZCopXCkpPyg/PVteXC1dfCQpLywKICAgICAgICAgICAgICAgIFBTRVVETzogLzooKD86W1x3XHUwMGMwLVx1RkZGRlwtXXxcXC4pKykoPzpcKChbJyJdPykoKD86XChbXlwpXStcKXxbXlwoXCldKikrKVwyXCkpPy8KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGxlZnRNYXRjaDoge30sCgogICAgICAgICAgICBhdHRyTWFwOiB7CiAgICAgICAgICAgICAgICAiY2xhc3MiOiAiY2xhc3NOYW1lIiwKICAgICAgICAgICAgICAgICJmb3IiOiAiaHRtbEZvciIKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGF0dHJIYW5kbGU6IHsKICAgICAgICAgICAgICAgIGhyZWY6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggImhyZWYiICk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdHlwZTogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCAidHlwZSIgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHJlbGF0aXZlOiB7CiAgICAgICAgICAgICAgICAiKyI6IGZ1bmN0aW9uKGNoZWNrU2V0LCBwYXJ0KXsKICAgICAgICAgICAgICAgICAgICB2YXIgaXNQYXJ0U3RyID0gdHlwZW9mIHBhcnQgPT09ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICBpc1RhZyA9IGlzUGFydFN0ciAmJiAhck5vbldvcmQudGVzdCggcGFydCApLAogICAgICAgICAgICAgICAgICAgICAgICBpc1BhcnRTdHJOb3RUYWcgPSBpc1BhcnRTdHIgJiYgIWlzVGFnOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIGlzVGFnICkgewogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gcGFydC50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gY2hlY2tTZXQubGVuZ3RoLCBlbGVtOyBpIDwgbDsgaSsrICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIChlbGVtID0gY2hlY2tTZXRbaV0pICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCAoZWxlbSA9IGVsZW0ucHJldmlvdXNTaWJsaW5nKSAmJiBlbGVtLm5vZGVUeXBlICE9PSAxICkge30KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja1NldFtpXSA9IGlzUGFydFN0ck5vdFRhZyB8fCBlbGVtICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gcGFydCA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSB8fCBmYWxzZSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9PT0gcGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCBpc1BhcnRTdHJOb3RUYWcgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFNpenpsZS5maWx0ZXIoIHBhcnQsIGNoZWNrU2V0LCB0cnVlICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAiPiI6IGZ1bmN0aW9uKCBjaGVja1NldCwgcGFydCApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSwKICAgICAgICAgICAgICAgICAgICAgICAgaXNQYXJ0U3RyID0gdHlwZW9mIHBhcnQgPT09ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICBpID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGNoZWNrU2V0Lmxlbmd0aDsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCBpc1BhcnRTdHIgJiYgIXJOb25Xb3JkLnRlc3QoIHBhcnQgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGFydCA9IHBhcnQudG9Mb3dlckNhc2UoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0gPSBjaGVja1NldFtpXTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja1NldFtpXSA9IHBhcmVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBwYXJ0ID8gcGFyZW50IDogZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggOyBpIDwgbDsgaSsrICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGNoZWNrU2V0W2ldOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZWxlbSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja1NldFtpXSA9IGlzUGFydFN0ciA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0ucGFyZW50Tm9kZSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0ucGFyZW50Tm9kZSA9PT0gcGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpc1BhcnRTdHIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXp6bGUuZmlsdGVyKCBwYXJ0LCBjaGVja1NldCwgdHJ1ZSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAiIjogZnVuY3Rpb24oY2hlY2tTZXQsIHBhcnQsIGlzWE1MKXsKICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZUNoZWNrLAogICAgICAgICAgICAgICAgICAgICAgICBkb25lTmFtZSA9IGRvbmUrKywKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tGbiA9IGRpckNoZWNrOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiBwYXJ0ID09PSAic3RyaW5nIiAmJiAhck5vbldvcmQudGVzdCggcGFydCApICkgewogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gcGFydC50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBub2RlQ2hlY2sgPSBwYXJ0OwogICAgICAgICAgICAgICAgICAgICAgICBjaGVja0ZuID0gZGlyTm9kZUNoZWNrOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgY2hlY2tGbiggInBhcmVudE5vZGUiLCBwYXJ0LCBkb25lTmFtZSwgY2hlY2tTZXQsIG5vZGVDaGVjaywgaXNYTUwgKTsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgIn4iOiBmdW5jdGlvbiggY2hlY2tTZXQsIHBhcnQsIGlzWE1MICkgewogICAgICAgICAgICAgICAgICAgIHZhciBub2RlQ2hlY2ssCiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVOYW1lID0gZG9uZSsrLAogICAgICAgICAgICAgICAgICAgICAgICBjaGVja0ZuID0gZGlyQ2hlY2s7CgogICAgICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIHBhcnQgPT09ICJzdHJpbmciICYmICFyTm9uV29yZC50ZXN0KCBwYXJ0ICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQgPSBwYXJ0LnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVDaGVjayA9IHBhcnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrRm4gPSBkaXJOb2RlQ2hlY2s7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBjaGVja0ZuKCAicHJldmlvdXNTaWJsaW5nIiwgcGFydCwgZG9uZU5hbWUsIGNoZWNrU2V0LCBub2RlQ2hlY2ssIGlzWE1MICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBmaW5kOiB7CiAgICAgICAgICAgICAgICBJRDogZnVuY3Rpb24oIG1hdGNoLCBjb250ZXh0LCBpc1hNTCApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSAidW5kZWZpbmVkIiAmJiAhaXNYTUwgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZChtYXRjaFsxXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjMKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0gJiYgbS5wYXJlbnROb2RlID8gW21dIDogW107CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBOQU1FOiBmdW5jdGlvbiggbWF0Y2gsIGNvbnRleHQgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSAhPT0gInVuZGVmaW5lZCIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXQgPSBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBtYXRjaFsxXSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJlc3VsdHNbaV0uZ2V0QXR0cmlidXRlKCJuYW1lIikgPT09IG1hdGNoWzFdICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKCByZXN1bHRzW2ldICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQubGVuZ3RoID09PSAwID8gbnVsbCA6IHJldDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIFRBRzogZnVuY3Rpb24oIG1hdGNoLCBjb250ZXh0ICkgewogICAgICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09ICJ1bmRlZmluZWQiICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggbWF0Y2hbMV0gKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHByZUZpbHRlcjogewogICAgICAgICAgICAgICAgQ0xBU1M6IGZ1bmN0aW9uKCBtYXRjaCwgY3VyTG9vcCwgaW5wbGFjZSwgcmVzdWx0LCBub3QsIGlzWE1MICkgewogICAgICAgICAgICAgICAgICAgIG1hdGNoID0gIiAiICsgbWF0Y2hbMV0ucmVwbGFjZSggckJhY2tzbGFzaCwgIiIgKSArICIgIjsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCBpc1hNTCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBlbGVtOyAoZWxlbSA9IGN1ckxvb3BbaV0pICE9IG51bGw7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBub3QgXiAoZWxlbS5jbGFzc05hbWUgJiYgKCIgIiArIGVsZW0uY2xhc3NOYW1lICsgIiAiKS5yZXBsYWNlKC9bXHRcblxyXS9nLCAiICIpLmluZGV4T2YobWF0Y2gpID49IDApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIWlucGxhY2UgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCBlbGVtICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGlucGxhY2UgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyTG9vcFtpXSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIElEOiBmdW5jdGlvbiggbWF0Y2ggKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdLnJlcGxhY2UoIHJCYWNrc2xhc2gsICIiICk7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIFRBRzogZnVuY3Rpb24oIG1hdGNoLCBjdXJMb29wICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaFsxXS5yZXBsYWNlKCByQmFja3NsYXNoLCAiIiApLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIENISUxEOiBmdW5jdGlvbiggbWF0Y2ggKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRjaFsxXSA9PT0gIm50aCIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIW1hdGNoWzJdICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l6emxlLmVycm9yKCBtYXRjaFswXSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSA9IG1hdGNoWzJdLnJlcGxhY2UoL15cK3xccyovZywgJycpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGFyc2UgZXF1YXRpb25zIGxpa2UgJ2V2ZW4nLCAnb2RkJywgJzUnLCAnMm4nLCAnM24rMicsICc0bi0xJywgJy1uKzYnCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gLygtPykoXGQqKSg/Om4oWytcLV0/XGQqKSk/Ly5leGVjKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gPT09ICJldmVuIiAmJiAiMm4iIHx8IG1hdGNoWzJdID09PSAib2RkIiAmJiAiMm4rMSIgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhL1xELy50ZXN0KCBtYXRjaFsyXSApICYmICIwbisiICsgbWF0Y2hbMl0gfHwgbWF0Y2hbMl0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBudW1iZXJzIChmaXJzdCluKyhsYXN0KSBpbmNsdWRpbmcgaWYgdGhleSBhcmUgbmVnYXRpdmUKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gPSAodGVzdFsxXSArICh0ZXN0WzJdIHx8IDEpKSAtIDA7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzNdID0gdGVzdFszXSAtIDA7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBtYXRjaFsyXSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgU2l6emxlLmVycm9yKCBtYXRjaFswXSApOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogTW92ZSB0byBub3JtYWwgY2FjaGluZyBzeXN0ZW0KICAgICAgICAgICAgICAgICAgICBtYXRjaFswXSA9IGRvbmUrKzsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBBVFRSOiBmdW5jdGlvbiggbWF0Y2gsIGN1ckxvb3AsIGlucGxhY2UsIHJlc3VsdCwgbm90LCBpc1hNTCApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggckJhY2tzbGFzaCwgIiIgKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCAhaXNYTUwgJiYgRXhwci5hdHRyTWFwW25hbWVdICkgewogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsxXSA9IEV4cHIuYXR0ck1hcFtuYW1lXTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBpZiBhbiB1bi1xdW90ZWQgdmFsdWUgd2FzIHVzZWQKICAgICAgICAgICAgICAgICAgICBtYXRjaFs0XSA9ICggbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgIiIgKS5yZXBsYWNlKCByQmFja3NsYXNoLCAiIiApOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGNoWzJdID09PSAifj0iICkgewogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFs0XSA9ICIgIiArIG1hdGNoWzRdICsgIiAiOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBQU0VVRE86IGZ1bmN0aW9uKCBtYXRjaCwgY3VyTG9vcCwgaW5wbGFjZSwgcmVzdWx0LCBub3QgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRjaFsxXSA9PT0gIm5vdCIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGNvbXBsZXggZXhwcmVzc2lvbiwgb3IgYSBzaW1wbGUgb25lCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggKCBjaHVua2VyLmV4ZWMobWF0Y2hbM10pIHx8ICIiICkubGVuZ3RoID4gMSB8fCAvXlx3Ly50ZXN0KG1hdGNoWzNdKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzNdID0gU2l6emxlKG1hdGNoWzNdLCBudWxsLCBudWxsLCBjdXJMb29wKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0ID0gU2l6emxlLmZpbHRlcihtYXRjaFszXSwgY3VyTG9vcCwgaW5wbGFjZSwgdHJ1ZSBeIG5vdCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhaW5wbGFjZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseSggcmVzdWx0LCByZXQgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggRXhwci5tYXRjaC5QT1MudGVzdCggbWF0Y2hbMF0gKSB8fCBFeHByLm1hdGNoLkNISUxELnRlc3QoIG1hdGNoWzBdICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBQT1M6IGZ1bmN0aW9uKCBtYXRjaCApIHsKICAgICAgICAgICAgICAgICAgICBtYXRjaC51bnNoaWZ0KCB0cnVlICk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGZpbHRlcnM6IHsKICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSAmJiBlbGVtLnR5cGUgIT09ICJoaWRkZW4iOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBkaXNhYmxlZDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmNoZWNrZWQgPT09IHRydWU7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgICAgICAgICAgICAvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgLy8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseQogICAgICAgICAgICAgICAgICAgIGlmICggZWxlbS5wYXJlbnROb2RlICkgewogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhIWVsZW0uZmlyc3RDaGlsZDsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgZW1wdHk6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhZWxlbS5maXJzdENoaWxkOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBoYXM6IGZ1bmN0aW9uKCBlbGVtLCBpLCBtYXRjaCApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gISFTaXp6bGUoIG1hdGNoWzNdLCBlbGVtICkubGVuZ3RoOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBoZWFkZXI6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAoL2hcZC9pKS50ZXN0KCBlbGVtLm5vZGVOYW1lICk7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIHRleHQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHZhciBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoICJ0eXBlIiApLCB0eXBlID0gZWxlbS50eXBlOwogICAgICAgICAgICAgICAgICAgIC8vIElFNiBhbmQgNyB3aWxsIG1hcCBlbGVtLnR5cGUgdG8gJ3RleHQnIGZvciBuZXcgSFRNTDUgdHlwZXMgKHNlYXJjaCwgZXRjKSAKICAgICAgICAgICAgICAgICAgICAvLyB1c2UgZ2V0QXR0cmlidXRlIGluc3RlYWQgdG8gdGVzdCB0aGlzIGNhc2UKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAiaW5wdXQiICYmICJ0ZXh0IiA9PT0gdHlwZSAmJiAoIGF0dHIgPT09IHR5cGUgfHwgYXR0ciA9PT0gbnVsbCApOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICByYWRpbzogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gImlucHV0IiAmJiAicmFkaW8iID09PSBlbGVtLnR5cGU7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIGNoZWNrYm94OiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAiaW5wdXQiICYmICJjaGVja2JveCIgPT09IGVsZW0udHlwZTsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgZmlsZTogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gImlucHV0IiAmJiAiZmlsZSIgPT09IGVsZW0udHlwZTsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJpbnB1dCIgJiYgInBhc3N3b3JkIiA9PT0gZWxlbS50eXBlOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBzdWJtaXQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAobmFtZSA9PT0gImlucHV0IiB8fCBuYW1lID09PSAiYnV0dG9uIikgJiYgInN1Ym1pdCIgPT09IGVsZW0udHlwZTsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgaW1hZ2U6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJpbnB1dCIgJiYgImltYWdlIiA9PT0gZWxlbS50eXBlOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICByZXNldDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuYW1lID09PSAiaW5wdXQiIHx8IG5hbWUgPT09ICJidXR0b24iKSAmJiAicmVzZXQiID09PSBlbGVtLnR5cGU7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIGJ1dHRvbjogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09ICJpbnB1dCIgJiYgImJ1dHRvbiIgPT09IGVsZW0udHlwZSB8fCBuYW1lID09PSAiYnV0dG9uIjsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAoL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24vaSkudGVzdCggZWxlbS5ub2RlTmFtZSApOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBmb2N1czogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0gPT09IGVsZW0ub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXRGaWx0ZXJzOiB7CiAgICAgICAgICAgICAgICBmaXJzdDogZnVuY3Rpb24oIGVsZW0sIGkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT09IDA7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIGxhc3Q6IGZ1bmN0aW9uKCBlbGVtLCBpLCBtYXRjaCwgYXJyYXkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT09IGFycmF5Lmxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIGV2ZW46IGZ1bmN0aW9uKCBlbGVtLCBpICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpICUgMiA9PT0gMDsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgb2RkOiBmdW5jdGlvbiggZWxlbSwgaSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSAlIDIgPT09IDE7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIGx0OiBmdW5jdGlvbiggZWxlbSwgaSwgbWF0Y2ggKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPCBtYXRjaFszXSAtIDA7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIGd0OiBmdW5jdGlvbiggZWxlbSwgaSwgbWF0Y2ggKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPiBtYXRjaFszXSAtIDA7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIG50aDogZnVuY3Rpb24oIGVsZW0sIGksIG1hdGNoICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaFszXSAtIDAgPT09IGk7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIGVxOiBmdW5jdGlvbiggZWxlbSwgaSwgbWF0Y2ggKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzNdIC0gMCA9PT0gaTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZmlsdGVyOiB7CiAgICAgICAgICAgICAgICBQU0VVRE86IGZ1bmN0aW9uKCBlbGVtLCBtYXRjaCwgaSwgYXJyYXkgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gRXhwci5maWx0ZXJzWyBuYW1lIF07CgogICAgICAgICAgICAgICAgICAgIGlmICggZmlsdGVyICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyKCBlbGVtLCBpLCBtYXRjaCwgYXJyYXkgKTsKCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbmFtZSA9PT0gImNvbnRhaW5zIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoWyBlbGVtIF0pIHx8ICIiKS5pbmRleE9mKG1hdGNoWzNdKSA+PSAwOwoKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBuYW1lID09PSAibm90IiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vdCA9IG1hdGNoWzNdOwoKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwLCBsID0gbm90Lmxlbmd0aDsgaiA8IGw7IGorKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbm90W2pdID09PSBlbGVtICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CgogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFNpenpsZS5lcnJvciggbmFtZSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgQ0hJTEQ6IGZ1bmN0aW9uKCBlbGVtLCBtYXRjaCApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3QsIGxhc3QsCiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVOYW1lLCBwYXJlbnQsIGNhY2hlLAogICAgICAgICAgICAgICAgICAgICAgICBjb3VudCwgZGlmZiwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gZWxlbTsKCiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggdHlwZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAib25seSI6CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImZpcnN0IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICggKG5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZykgKQkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGUgPT09ICJmaXJzdCIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGVsZW07CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJsYXN0IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICggKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSApCSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBub2RlLm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAibnRoIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gbWF0Y2hbMl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gbWF0Y2hbM107CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVOYW1lID0gbWF0Y2hbMF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJlbnQgJiYgKHBhcmVudFsgZXhwYW5kbyBdICE9PSBkb25lTmFtZSB8fCAhZWxlbS5ub2RlSW5kZXgpICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ID0gMDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggbm9kZSA9IHBhcmVudC5maXJzdENoaWxkOyBub2RlOyBub2RlID0gbm9kZS5uZXh0U2libGluZyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBub2RlLm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5ub2RlSW5kZXggPSArK2NvdW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRbIGV4cGFuZG8gXSA9IGRvbmVOYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmYgPSBlbGVtLm5vZGVJbmRleCAtIGxhc3Q7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBmaXJzdCA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlmZiA9PT0gMDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgSUQ6IGZ1bmN0aW9uKCBlbGVtLCBtYXRjaCApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiBlbGVtLmdldEF0dHJpYnV0ZSgiaWQiKSA9PT0gbWF0Y2g7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIFRBRzogZnVuY3Rpb24oIGVsZW0sIG1hdGNoICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAobWF0Y2ggPT09ICIqIiAmJiBlbGVtLm5vZGVUeXBlID09PSAxKSB8fCAhIWVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBtYXRjaDsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgQ0xBU1M6IGZ1bmN0aW9uKCBlbGVtLCBtYXRjaCApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCIgIiArIChlbGVtLmNsYXNzTmFtZSB8fCBlbGVtLmdldEF0dHJpYnV0ZSgiY2xhc3MiKSkgKyAiICIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5pbmRleE9mKCBtYXRjaCApID4gLTE7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIEFUVFI6IGZ1bmN0aW9uKCBlbGVtLCBtYXRjaCApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBTaXp6bGUuYXR0ciA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4cHIuYXR0ckhhbmRsZVsgbmFtZSBdID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeHByLmF0dHJIYW5kbGVbIG5hbWUgXSggZWxlbSApIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtWyBuYW1lIF0gIT0gbnVsbCA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1bIG5hbWUgXSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICksCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0ICsgIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBtYXRjaFsyXSwKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBtYXRjaFs0XTsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCA9PSBudWxsID8KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gIiE9IiA6CiAgICAgICAgICAgICAgICAgICAgICAgICF0eXBlICYmIFNpenpsZS5hdHRyID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCAhPSBudWxsIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPT09ICI9IiA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPT09IGNoZWNrIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID09PSAiKj0iID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuaW5kZXhPZihjaGVjaykgPj0gMCA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPT09ICJ+PSIgPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCIgIiArIHZhbHVlICsgIiAiKS5pbmRleE9mKGNoZWNrKSA+PSAwIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjaGVjayA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgJiYgcmVzdWx0ICE9PSBmYWxzZSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gIiE9IiA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSBjaGVjayA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPT09ICJePSIgPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuaW5kZXhPZihjaGVjaykgPT09IDAgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gIiQ9IiA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuc3Vic3RyKHZhbHVlLmxlbmd0aCAtIGNoZWNrLmxlbmd0aCkgPT09IGNoZWNrIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID09PSAifD0iID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPT09IGNoZWNrIHx8IHZhbHVlLnN1YnN0cigwLCBjaGVjay5sZW5ndGggKyAxKSA9PT0gY2hlY2sgKyAiLSIgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZTsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgUE9TOiBmdW5jdGlvbiggZWxlbSwgbWF0Y2gsIGksIGFycmF5ICkgewogICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gbWF0Y2hbMl0sCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlciA9IEV4cHIuc2V0RmlsdGVyc1sgbmFtZSBdOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIGZpbHRlciApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlciggZWxlbSwgaSwgbWF0Y2gsIGFycmF5ICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdmFyIG9yaWdQT1MgPSBFeHByLm1hdGNoLlBPUywKICAgICAgICAgICAgZmVzY2FwZSA9IGZ1bmN0aW9uKGFsbCwgbnVtKXsKICAgICAgICAgICAgICAgIHJldHVybiAiXFwiICsgKG51bSAtIDAgKyAxKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgZm9yICggdmFyIHR5cGUgaW4gRXhwci5tYXRjaCApIHsKICAgICAgICAgICAgRXhwci5tYXRjaFsgdHlwZSBdID0gbmV3IFJlZ0V4cCggRXhwci5tYXRjaFsgdHlwZSBdLnNvdXJjZSArICgvKD8hW15cW10qXF0pKD8hW15cKF0qXCkpLy5zb3VyY2UpICk7CiAgICAgICAgICAgIEV4cHIubGVmdE1hdGNoWyB0eXBlIF0gPSBuZXcgUmVnRXhwKCAvKF4oPzoufFxyfFxuKSo/KS8uc291cmNlICsgRXhwci5tYXRjaFsgdHlwZSBdLnNvdXJjZS5yZXBsYWNlKC9cXChcZCspL2csIGZlc2NhcGUpICk7CiAgICAgICAgfQoKICAgICAgICB2YXIgbWFrZUFycmF5ID0gZnVuY3Rpb24oIGFycmF5LCByZXN1bHRzICkgewogICAgICAgICAgICBhcnJheSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcnJheSwgMCApOwoKICAgICAgICAgICAgaWYgKCByZXN1bHRzICkgewogICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoLmFwcGx5KCByZXN1bHRzLCBhcnJheSApOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBhcnJheTsKICAgICAgICB9OwoKLy8gUGVyZm9ybSBhIHNpbXBsZSBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGhlIGJyb3dzZXIgaXMgY2FwYWJsZSBvZgovLyBjb252ZXJ0aW5nIGEgTm9kZUxpc3QgdG8gYW4gYXJyYXkgdXNpbmcgYnVpbHRpbiBtZXRob2RzLgovLyBBbHNvIHZlcmlmaWVzIHRoYXQgdGhlIHJldHVybmVkIGFycmF5IGhvbGRzIERPTSBub2RlcwovLyAod2hpY2ggaXMgbm90IHRoZSBjYXNlIGluIHRoZSBCbGFja2JlcnJ5IGJyb3dzZXIpCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jaGlsZE5vZGVzLCAwIClbMF0ubm9kZVR5cGU7CgovLyBQcm92aWRlIGEgZmFsbGJhY2sgbWV0aG9kIGlmIGl0IGRvZXMgbm90IHdvcmsKICAgICAgICB9IGNhdGNoKCBlICkgewogICAgICAgICAgICBtYWtlQXJyYXkgPSBmdW5jdGlvbiggYXJyYXksIHJlc3VsdHMgKSB7CiAgICAgICAgICAgICAgICB2YXIgaSA9IDAsCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gcmVzdWx0cyB8fCBbXTsKCiAgICAgICAgICAgICAgICBpZiAoIHRvU3RyaW5nLmNhbGwoYXJyYXkpID09PSAiW29iamVjdCBBcnJheV0iICkgewogICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KCByZXQsIGFycmF5ICk7CgogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiBhcnJheS5sZW5ndGggPT09ICJudW1iZXIiICkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKCBhcnJheVtpXSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIDsgYXJyYXlbaV07IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKCBhcnJheVtpXSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICB2YXIgc29ydE9yZGVyLCBzaWJsaW5nQ2hlY2s7CgogICAgICAgIGlmICggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICkgewogICAgICAgICAgICBzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHsKICAgICAgICAgICAgICAgIGlmICggYSA9PT0gYiApIHsKICAgICAgICAgICAgICAgICAgICBoYXNEdXBsaWNhdGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICggIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gfHwgIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb24gKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPyAtMSA6IDE7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikgJiA0ID8gLTEgOiAxOwogICAgICAgICAgICB9OwoKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHsKICAgICAgICAgICAgICAgIC8vIFRoZSBub2RlcyBhcmUgaWRlbnRpY2FsLCB3ZSBjYW4gZXhpdCBlYXJseQogICAgICAgICAgICAgICAgaWYgKCBhID09PSBiICkgewogICAgICAgICAgICAgICAgICAgIGhhc0R1cGxpY2F0ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7CgogICAgICAgICAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIHVzaW5nIHNvdXJjZUluZGV4IChpbiBJRSkgaWYgaXQncyBhdmFpbGFibGUgb24gYm90aCBub2RlcwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICggYS5zb3VyY2VJbmRleCAmJiBiLnNvdXJjZUluZGV4ICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgYWwsIGJsLAogICAgICAgICAgICAgICAgICAgIGFwID0gW10sCiAgICAgICAgICAgICAgICAgICAgYnAgPSBbXSwKICAgICAgICAgICAgICAgICAgICBhdXAgPSBhLnBhcmVudE5vZGUsCiAgICAgICAgICAgICAgICAgICAgYnVwID0gYi5wYXJlbnROb2RlLAogICAgICAgICAgICAgICAgICAgIGN1ciA9IGF1cDsKCiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzIChvciBpZGVudGljYWwpIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrCiAgICAgICAgICAgICAgICBpZiAoIGF1cCA9PT0gYnVwICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gSWYgbm8gcGFyZW50cyB3ZXJlIGZvdW5kIHRoZW4gdGhlIG5vZGVzIGFyZSBkaXNjb25uZWN0ZWQKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICFhdXAgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xOwoKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICFidXAgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHRoZXkncmUgc29tZXdoZXJlIGVsc2UgaW4gdGhlIHRyZWUgc28gd2UgbmVlZAogICAgICAgICAgICAgICAgLy8gdG8gYnVpbGQgdXAgYSBmdWxsIGxpc3Qgb2YgdGhlIHBhcmVudE5vZGVzIGZvciBjb21wYXJpc29uCiAgICAgICAgICAgICAgICB3aGlsZSAoIGN1ciApIHsKICAgICAgICAgICAgICAgICAgICBhcC51bnNoaWZ0KCBjdXIgKTsKICAgICAgICAgICAgICAgICAgICBjdXIgPSBjdXIucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjdXIgPSBidXA7CgogICAgICAgICAgICAgICAgd2hpbGUgKCBjdXIgKSB7CiAgICAgICAgICAgICAgICAgICAgYnAudW5zaGlmdCggY3VyICk7CiAgICAgICAgICAgICAgICAgICAgY3VyID0gY3VyLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgYWwgPSBhcC5sZW5ndGg7CiAgICAgICAgICAgICAgICBibCA9IGJwLmxlbmd0aDsKCiAgICAgICAgICAgICAgICAvLyBTdGFydCB3YWxraW5nIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeQogICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgYWwgJiYgaSA8IGJsOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBhcFtpXSAhPT0gYnBbaV0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBXZSBlbmRlZCBzb21lcGxhY2UgdXAgdGhlIHRyZWUgc28gZG8gYSBzaWJsaW5nIGNoZWNrCiAgICAgICAgICAgICAgICByZXR1cm4gaSA9PT0gYWwgPwogICAgICAgICAgICAgICAgICAgIHNpYmxpbmdDaGVjayggYSwgYnBbaV0sIC0xICkgOgogICAgICAgICAgICAgICAgICAgIHNpYmxpbmdDaGVjayggYXBbaV0sIGIsIDEgKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHNpYmxpbmdDaGVjayA9IGZ1bmN0aW9uKCBhLCBiLCByZXQgKSB7CiAgICAgICAgICAgICAgICBpZiAoIGEgPT09IGIgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgY3VyID0gYS5uZXh0U2libGluZzsKCiAgICAgICAgICAgICAgICB3aGlsZSAoIGN1ciApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIGN1ciA9PT0gYiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgY3VyID0gY3VyLm5leHRTaWJsaW5nOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICB9OwogICAgICAgIH0KCi8vIENoZWNrIHRvIHNlZSBpZiB0aGUgYnJvd3NlciByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWUgd2hlbgovLyBxdWVyeWluZyBieSBnZXRFbGVtZW50QnlJZCAoYW5kIHByb3ZpZGUgYSB3b3JrYXJvdW5kKQogICAgICAgIChmdW5jdGlvbigpewogICAgICAgICAgICAvLyBXZSdyZSBnb2luZyB0byBpbmplY3QgYSBmYWtlIGlucHV0IGVsZW1lbnQgd2l0aCBhIHNwZWNpZmllZCBuYW1lCiAgICAgICAgICAgIHZhciBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IiksCiAgICAgICAgICAgICAgICBpZCA9ICJzY3JpcHQiICsgKG5ldyBEYXRlKCkpLmdldFRpbWUoKSwKICAgICAgICAgICAgICAgIHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CgogICAgICAgICAgICBmb3JtLmlubmVySFRNTCA9ICI8YSBuYW1lPSciICsgaWQgKyAiJy8+IjsKCiAgICAgICAgICAgIC8vIEluamVjdCBpdCBpbnRvIHRoZSByb290IGVsZW1lbnQsIGNoZWNrIGl0cyBzdGF0dXMsIGFuZCByZW1vdmUgaXQgcXVpY2tseQogICAgICAgICAgICByb290Lmluc2VydEJlZm9yZSggZm9ybSwgcm9vdC5maXJzdENoaWxkICk7CgogICAgICAgICAgICAvLyBUaGUgd29ya2Fyb3VuZCBoYXMgdG8gZG8gYWRkaXRpb25hbCBjaGVja3MgYWZ0ZXIgYSBnZXRFbGVtZW50QnlJZAogICAgICAgICAgICAvLyBXaGljaCBzbG93cyB0aGluZ3MgZG93biBmb3Igb3RoZXIgYnJvd3NlcnMgKGhlbmNlIHRoZSBicmFuY2hpbmcpCiAgICAgICAgICAgIGlmICggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGlkICkgKSB7CiAgICAgICAgICAgICAgICBFeHByLmZpbmQuSUQgPSBmdW5jdGlvbiggbWF0Y2gsIGNvbnRleHQsIGlzWE1MICkgewogICAgICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09ICJ1bmRlZmluZWQiICYmICFpc1hNTCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKG1hdGNoWzFdKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uaWQgPT09IG1hdGNoWzFdIHx8IHR5cGVvZiBtLmdldEF0dHJpYnV0ZU5vZGUgIT09ICJ1bmRlZmluZWQiICYmIG0uZ2V0QXR0cmlidXRlTm9kZSgiaWQiKS5ub2RlVmFsdWUgPT09IG1hdGNoWzFdID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbV0gOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIEV4cHIuZmlsdGVyLklEID0gZnVuY3Rpb24oIGVsZW0sIG1hdGNoICkgewogICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gInVuZGVmaW5lZCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCJpZCIpOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiBub2RlICYmIG5vZGUubm9kZVZhbHVlID09PSBtYXRjaDsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJvb3QucmVtb3ZlQ2hpbGQoIGZvcm0gKTsKCiAgICAgICAgICAgIC8vIHJlbGVhc2UgbWVtb3J5IGluIElFCiAgICAgICAgICAgIHJvb3QgPSBmb3JtID0gbnVsbDsKICAgICAgICB9KSgpOwoKICAgICAgICAoZnVuY3Rpb24oKXsKICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBicm93c2VyIHJldHVybnMgb25seSBlbGVtZW50cwogICAgICAgICAgICAvLyB3aGVuIGRvaW5nIGdldEVsZW1lbnRzQnlUYWdOYW1lKCIqIikKCiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGZha2UgZWxlbWVudAogICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgiIikgKTsKCiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBubyBjb21tZW50cyBhcmUgZm91bmQKICAgICAgICAgICAgaWYgKCBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKS5sZW5ndGggPiAwICkgewogICAgICAgICAgICAgICAgRXhwci5maW5kLlRBRyA9IGZ1bmN0aW9uKCBtYXRjaCwgY29udGV4dCApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIG1hdGNoWzFdICk7CgogICAgICAgICAgICAgICAgICAgIC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHMKICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGNoWzFdID09PSAiKiIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBbXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgcmVzdWx0c1tpXTsgaSsrICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCByZXN1bHRzW2ldLm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcC5wdXNoKCByZXN1bHRzW2ldICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSB0bXA7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiBhbiBhdHRyaWJ1dGUgcmV0dXJucyBub3JtYWxpemVkIGhyZWYgYXR0cmlidXRlcwogICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gIjxhIGhyZWY9JyMnPjwvYT4iOwoKICAgICAgICAgICAgaWYgKCBkaXYuZmlyc3RDaGlsZCAmJiB0eXBlb2YgZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlICE9PSAidW5kZWZpbmVkIiAmJgogICAgICAgICAgICAgICAgZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCJocmVmIikgIT09ICIjIiApIHsKCiAgICAgICAgICAgICAgICBFeHByLmF0dHJIYW5kbGUuaHJlZiA9IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggImhyZWYiLCAyICk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyByZWxlYXNlIG1lbW9yeSBpbiBJRQogICAgICAgICAgICBkaXYgPSBudWxsOwogICAgICAgIH0pKCk7CgogICAgICAgIGlmICggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApIHsKICAgICAgICAgICAgKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgb2xkU2l6emxlID0gU2l6emxlLAogICAgICAgICAgICAgICAgICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLAogICAgICAgICAgICAgICAgICAgIGlkID0gIl9fc2l6emxlX18iOwoKICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAiPHAgY2xhc3M9J1RFU1QnPjwvcD4iOwoKICAgICAgICAgICAgICAgIC8vIFNhZmFyaSBjYW4ndCBoYW5kbGUgdXBwZXJjYXNlIG9yIHVuaWNvZGUgY2hhcmFjdGVycyB3aGVuCiAgICAgICAgICAgICAgICAvLyBpbiBxdWlya3MgbW9kZS4KICAgICAgICAgICAgICAgIGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwgJiYgZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIi5URVNUIikubGVuZ3RoID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBTaXp6bGUgPSBmdW5jdGlvbiggcXVlcnksIGNvbnRleHQsIGV4dHJhLCBzZWVkICkgewogICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50OwoKICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHVzZSBxdWVyeVNlbGVjdG9yQWxsIG9uIG5vbi1YTUwgZG9jdW1lbnRzCiAgICAgICAgICAgICAgICAgICAgLy8gKElEIHNlbGVjdG9ycyBkb24ndCB3b3JrIGluIG5vbi1IVE1MIGRvY3VtZW50cykKICAgICAgICAgICAgICAgICAgICBpZiAoICFzZWVkICYmICFTaXp6bGUuaXNYTUwoY29udGV4dCkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlZSBpZiB3ZSBmaW5kIGEgc2VsZWN0b3IgdG8gc3BlZWQgdXAKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gL14oXHcrJCl8XlwuKFtcd1wtXSskKXxeIyhbXHdcLV0rJCkvLmV4ZWMoIHF1ZXJ5ICk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGNoICYmIChjb250ZXh0Lm5vZGVUeXBlID09PSAxIHx8IGNvbnRleHQubm9kZVR5cGUgPT09IDkpICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3BlZWQtdXA6IFNpenpsZSgiVEFHIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbWF0Y2hbMV0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VBcnJheSggY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggcXVlcnkgKSwgZXh0cmEgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3BlZWQtdXA6IFNpenpsZSgiLkNMQVNTIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1hdGNoWzJdICYmIEV4cHIuZmluZC5DTEFTUyAmJiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VBcnJheSggY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtYXRjaFsyXSApLCBleHRyYSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGNvbnRleHQubm9kZVR5cGUgPT09IDkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTcGVlZC11cDogU2l6emxlKCJib2R5IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBib2R5IGVsZW1lbnQgb25seSBleGlzdHMgb25jZSwgb3B0aW1pemUgZmluZGluZyBpdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBxdWVyeSA9PT0gImJvZHkiICYmIGNvbnRleHQuYm9keSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZUFycmF5KCBbIGNvbnRleHQuYm9keSBdLCBleHRyYSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTcGVlZC11cDogU2l6emxlKCIjSUQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbWF0Y2ggJiYgbWF0Y2hbM10gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtYXRjaFszXSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUgYW5kIE9wZXJhIHJldHVybiBpdGVtcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBieSBuYW1lIGluc3RlYWQgb2YgSUQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBlbGVtLmlkID09PSBtYXRjaFszXSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtlQXJyYXkoIFsgZWxlbSBdLCBleHRyYSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtlQXJyYXkoIFtdLCBleHRyYSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtlQXJyYXkoIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChxdWVyeSksIGV4dHJhICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKHFzYUVycm9yKSB7fQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHFTQSB3b3JrcyBzdHJhbmdlbHkgb24gRWxlbWVudC1yb290ZWQgcXVlcmllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuIHdvcmsgYXJvdW5kIHRoaXMgYnkgc3BlY2lmeWluZyBhbiBleHRyYSBJRCBvbiB0aGUgcm9vdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJRSA4IGRvZXNuJ3Qgd29yayBvbiBvYmplY3QgZWxlbWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY29udGV4dC5ub2RlVHlwZSA9PT0gMSAmJiBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICJvYmplY3QiICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZENvbnRleHQgPSBjb250ZXh0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCAiaWQiICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmlkID0gb2xkIHx8IGlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1BhcmVudCA9IGNvbnRleHQucGFyZW50Tm9kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUhpZXJhcmNoeVNlbGVjdG9yID0gL15ccypbK35dLy50ZXN0KCBxdWVyeSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIW9sZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNldEF0dHJpYnV0ZSggImlkIiwgbmlkICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pZCA9IG5pZC5yZXBsYWNlKCAvJy9nLCAiXFwkJiIgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcmVsYXRpdmVIaWVyYXJjaHlTZWxlY3RvciAmJiBoYXNQYXJlbnQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIXJlbGF0aXZlSGllcmFyY2h5U2VsZWN0b3IgfHwgaGFzUGFyZW50ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZUFycmF5KCBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoICJbaWQ9JyIgKyBuaWQgKyAiJ10gIiArIHF1ZXJ5ICksIGV4dHJhICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2gocHNldWRvRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhb2xkICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRDb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggImlkIiApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9sZFNpenpsZShxdWVyeSwgY29udGV4dCwgZXh0cmEsIHNlZWQpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgcHJvcCBpbiBvbGRTaXp6bGUgKSB7CiAgICAgICAgICAgICAgICAgICAgU2l6emxlWyBwcm9wIF0gPSBvbGRTaXp6bGVbIHByb3AgXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyByZWxlYXNlIG1lbW9yeSBpbiBJRQogICAgICAgICAgICAgICAgZGl2ID0gbnVsbDsKICAgICAgICAgICAgfSkoKTsKICAgICAgICB9CgogICAgICAgIChmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwKICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBodG1sLm1hdGNoZXNTZWxlY3RvciB8fCBodG1sLm1vek1hdGNoZXNTZWxlY3RvciB8fCBodG1sLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBodG1sLm1zTWF0Y2hlc1NlbGVjdG9yOwoKICAgICAgICAgICAgaWYgKCBtYXRjaGVzICkgewogICAgICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yCiAgICAgICAgICAgICAgICAvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5IGZhaWxzIHRoaXMpCiAgICAgICAgICAgICAgICB2YXIgZGlzY29ubmVjdGVkTWF0Y2ggPSAhbWF0Y2hlcy5jYWxsKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApLCAiZGl2IiApLAogICAgICAgICAgICAgICAgICAgIHBzZXVkb1dvcmtzID0gZmFsc2U7CgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uCiAgICAgICAgICAgICAgICAgICAgLy8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZAogICAgICAgICAgICAgICAgICAgIG1hdGNoZXMuY2FsbCggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAiW3Rlc3QhPScnXTpzaXp6bGUiICk7CgogICAgICAgICAgICAgICAgfSBjYXRjaCggcHNldWRvRXJyb3IgKSB7CiAgICAgICAgICAgICAgICAgICAgcHNldWRvV29ya3MgPSB0cnVlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIFNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggbm9kZSwgZXhwciApIHsKICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWQKICAgICAgICAgICAgICAgICAgICBleHByID0gZXhwci5yZXBsYWNlKC9cPVxzKihbXiciXF1dKilccypcXS9nLCAiPSckMSddIik7CgogICAgICAgICAgICAgICAgICAgIGlmICggIVNpenpsZS5pc1hNTCggbm9kZSApICkgewogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwc2V1ZG9Xb3JrcyB8fCAhRXhwci5tYXRjaC5QU0VVRE8udGVzdCggZXhwciApICYmICEvIT0vLnRlc3QoIGV4cHIgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBub2RlLCBleHByICk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJldCB8fCAhZGlzY29ubmVjdGVkTWF0Y2ggfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnJhZ21lbnQgaW4gSUUgOSwgc28gY2hlY2sgZm9yIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kb2N1bWVudCAmJiBub2RlLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkge30KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBTaXp6bGUoZXhwciwgbnVsbCwgbnVsbCwgW25vZGVdKS5sZW5ndGggPiAwOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH0pKCk7CgogICAgICAgIChmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CgogICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gIjxkaXYgY2xhc3M9J3Rlc3QgZSc+PC9kaXY+PGRpdiBjbGFzcz0ndGVzdCc+PC9kaXY+IjsKCiAgICAgICAgICAgIC8vIE9wZXJhIGNhbid0IGZpbmQgYSBzZWNvbmQgY2xhc3NuYW1lIChpbiA5LjYpCiAgICAgICAgICAgIC8vIEFsc28sIG1ha2Ugc3VyZSB0aGF0IGdldEVsZW1lbnRzQnlDbGFzc05hbWUgYWN0dWFsbHkgZXhpc3RzCiAgICAgICAgICAgIGlmICggIWRpdi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lIHx8IGRpdi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJlIikubGVuZ3RoID09PSAwICkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBTYWZhcmkgY2FjaGVzIGNsYXNzIGF0dHJpYnV0ZXMsIGRvZXNuJ3QgY2F0Y2ggY2hhbmdlcyAoaW4gMy4yKQogICAgICAgICAgICBkaXYubGFzdENoaWxkLmNsYXNzTmFtZSA9ICJlIjsKCiAgICAgICAgICAgIGlmICggZGl2LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImUiKS5sZW5ndGggPT09IDEgKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEV4cHIub3JkZXIuc3BsaWNlKDEsIDAsICJDTEFTUyIpOwogICAgICAgICAgICBFeHByLmZpbmQuQ0xBU1MgPSBmdW5jdGlvbiggbWF0Y2gsIGNvbnRleHQsIGlzWE1MICkgewogICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSAidW5kZWZpbmVkIiAmJiAhaXNYTUwgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShtYXRjaFsxXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvLyByZWxlYXNlIG1lbW9yeSBpbiBJRQogICAgICAgICAgICBkaXYgPSBudWxsOwogICAgICAgIH0pKCk7CgogICAgICAgIGZ1bmN0aW9uIGRpck5vZGVDaGVjayggZGlyLCBjdXIsIGRvbmVOYW1lLCBjaGVja1NldCwgbm9kZUNoZWNrLCBpc1hNTCApIHsKICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gY2hlY2tTZXQubGVuZ3RoOyBpIDwgbDsgaSsrICkgewogICAgICAgICAgICAgICAgdmFyIGVsZW0gPSBjaGVja1NldFtpXTsKCiAgICAgICAgICAgICAgICBpZiAoIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gZmFsc2U7CgogICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtW2Rpcl07CgogICAgICAgICAgICAgICAgICAgIHdoaWxlICggZWxlbSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBlbGVtWyBleHBhbmRvIF0gPT09IGRvbmVOYW1lICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBjaGVja1NldFtlbGVtLnNpenNldF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFpc1hNTCApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbVsgZXhwYW5kbyBdID0gZG9uZU5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnNpenNldCA9IGk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBjdXIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGVsZW07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW1bZGlyXTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGNoZWNrU2V0W2ldID0gbWF0Y2g7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGRpckNoZWNrKCBkaXIsIGN1ciwgZG9uZU5hbWUsIGNoZWNrU2V0LCBub2RlQ2hlY2ssIGlzWE1MICkgewogICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGVja1NldC5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IGNoZWNrU2V0W2ldOwoKICAgICAgICAgICAgICAgIGlmICggZWxlbSApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBmYWxzZTsKCiAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW1bZGlyXTsKCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW1bIGV4cGFuZG8gXSA9PT0gZG9uZU5hbWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGNoZWNrU2V0W2VsZW0uc2l6c2V0XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFpc1hNTCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtWyBleHBhbmRvIF0gPSBkb25lTmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnNpenNldCA9IGk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgY3VyICE9PSAic3RyaW5nIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW0gPT09IGN1ciApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggU2l6emxlLmZpbHRlciggY3VyLCBbZWxlbV0gKS5sZW5ndGggPiAwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gZWxlbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW1bZGlyXTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGNoZWNrU2V0W2ldID0gbWF0Y2g7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zICkgewogICAgICAgICAgICBTaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggYSwgYiApIHsKICAgICAgICAgICAgICAgIHJldHVybiBhICE9PSBiICYmIChhLmNvbnRhaW5zID8gYS5jb250YWlucyhiKSA6IHRydWUpOwogICAgICAgICAgICB9OwoKICAgICAgICB9IGVsc2UgaWYgKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24gKSB7CiAgICAgICAgICAgIFNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBhLCBiICkgewogICAgICAgICAgICAgICAgcmV0dXJuICEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikgJiAxNik7CiAgICAgICAgICAgIH07CgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIFNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgIC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3QKICAgICAgICAgICAgLy8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpIAogICAgICAgICAgICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gKGVsZW0gPyBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSA6IDApLmRvY3VtZW50RWxlbWVudDsKCiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09ICJIVE1MIiA6IGZhbHNlOwogICAgICAgIH07CgogICAgICAgIHZhciBwb3NQcm9jZXNzID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCBzZWVkICkgewogICAgICAgICAgICB2YXIgbWF0Y2gsCiAgICAgICAgICAgICAgICB0bXBTZXQgPSBbXSwKICAgICAgICAgICAgICAgIGxhdGVyID0gIiIsCiAgICAgICAgICAgICAgICByb290ID0gY29udGV4dC5ub2RlVHlwZSA/IFtjb250ZXh0XSA6IGNvbnRleHQ7CgogICAgICAgICAgICAvLyBQb3NpdGlvbiBzZWxlY3RvcnMgbXVzdCBiZSBkb25lIGFmdGVyIHRoZSBmaWx0ZXIKICAgICAgICAgICAgLy8gQW5kIHNvIG11c3QgOm5vdChwb3NpdGlvbmFsKSBzbyB3ZSBtb3ZlIGFsbCBQU0VVRE9zIHRvIHRoZSBlbmQKICAgICAgICAgICAgd2hpbGUgKCAobWF0Y2ggPSBFeHByLm1hdGNoLlBTRVVETy5leGVjKCBzZWxlY3RvciApKSApIHsKICAgICAgICAgICAgICAgIGxhdGVyICs9IG1hdGNoWzBdOwogICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKCBFeHByLm1hdGNoLlBTRVVETywgIiIgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2VsZWN0b3IgPSBFeHByLnJlbGF0aXZlW3NlbGVjdG9yXSA/IHNlbGVjdG9yICsgIioiIDogc2VsZWN0b3I7CgogICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSByb290Lmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKICAgICAgICAgICAgICAgIFNpenpsZSggc2VsZWN0b3IsIHJvb3RbaV0sIHRtcFNldCwgc2VlZCApOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gU2l6emxlLmZpbHRlciggbGF0ZXIsIHRtcFNldCApOwogICAgICAgIH07CgovLyBFWFBPU0UKLy8gT3ZlcnJpZGUgc2l6emxlIGF0dHJpYnV0ZSByZXRyaWV2YWwKICAgICAgICBTaXp6bGUuYXR0ciA9IGpRdWVyeS5hdHRyOwogICAgICAgIFNpenpsZS5zZWxlY3RvcnMuYXR0ck1hcCA9IHt9OwogICAgICAgIGpRdWVyeS5maW5kID0gU2l6emxlOwogICAgICAgIGpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9yczsKICAgICAgICBqUXVlcnkuZXhwclsiOiJdID0galF1ZXJ5LmV4cHIuZmlsdGVyczsKICAgICAgICBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7CiAgICAgICAgalF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDsKICAgICAgICBqUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7CiAgICAgICAgalF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zOwoKCiAgICB9KSgpOwoKCiAgICB2YXIgcnVudGlsID0gL1VudGlsJC8sCiAgICAgICAgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXZVbnRpbHxwcmV2QWxsKS8sCiAgICAvLyBOb3RlOiBUaGlzIFJlZ0V4cCBzaG91bGQgYmUgaW1wcm92ZWQsIG9yIGxpa2VseSBwdWxsZWQgZnJvbSBTaXp6bGUKICAgICAgICBybXVsdGlzZWxlY3RvciA9IC8sLywKICAgICAgICBpc1NpbXBsZSA9IC9eLlteOiNcW1wuLF0qJC8sCiAgICAgICAgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UsCiAgICAgICAgUE9TID0galF1ZXJ5LmV4cHIubWF0Y2guUE9TLAogICAgLy8gbWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXQKICAgICAgICBndWFyYW50ZWVkVW5pcXVlID0gewogICAgICAgICAgICBjaGlsZHJlbjogdHJ1ZSwKICAgICAgICAgICAgY29udGVudHM6IHRydWUsCiAgICAgICAgICAgIG5leHQ6IHRydWUsCiAgICAgICAgICAgIHByZXY6IHRydWUKICAgICAgICB9OwoKICAgIGpRdWVyeS5mbi5leHRlbmQoewogICAgICAgIGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgICAgICAgICAgaSwgbDsKCiAgICAgICAgICAgIGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSAic3RyaW5nIiApIHsKICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwLCBsID0gc2VsZi5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciByZXQgPSB0aGlzLnB1c2hTdGFjayggIiIsICJmaW5kIiwgc2VsZWN0b3IgKSwKICAgICAgICAgICAgICAgIGxlbmd0aCwgbiwgcjsKCiAgICAgICAgICAgIGZvciAoIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgICAgICAgICBsZW5ndGggPSByZXQubGVuZ3RoOwogICAgICAgICAgICAgICAgalF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCB0aGlzW2ldLCByZXQgKTsKCiAgICAgICAgICAgICAgICBpZiAoIGkgPiAwICkgewogICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSByZXN1bHRzIGFyZSB1bmlxdWUKICAgICAgICAgICAgICAgICAgICBmb3IgKCBuID0gbGVuZ3RoOyBuIDwgcmV0Lmxlbmd0aDsgbisrICkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCByID0gMDsgciA8IGxlbmd0aDsgcisrICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCByZXRbcl0gPT09IHJldFtuXSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuc3BsaWNlKG4tLSwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfSwKCiAgICAgICAgaGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkgewogICAgICAgICAgICB2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0ICk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHRhcmdldHMubGVuZ3RoOyBpIDwgbDsgaSsrICkgewogICAgICAgICAgICAgICAgICAgIGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzW2ldICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgbm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yLCBmYWxzZSksICJub3QiLCBzZWxlY3Rvcik7CiAgICAgICAgfSwKCiAgICAgICAgZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yLCB0cnVlKSwgImZpbHRlciIsIHNlbGVjdG9yICk7CiAgICAgICAgfSwKCiAgICAgICAgaXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKICAgICAgICAgICAgcmV0dXJuICEhc2VsZWN0b3IgJiYgKAogICAgICAgICAgICAgICAgdHlwZW9mIHNlbGVjdG9yID09PSAic3RyaW5nIiA/CiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldAogICAgICAgICAgICAgICAgICAgIC8vIHNvICQoInA6Zmlyc3QiKS5pcygicDpsYXN0Iikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvICJwIi4KICAgICAgICAgICAgICAgICAgICBQT1MudGVzdCggc2VsZWN0b3IgKSA/CiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeSggc2VsZWN0b3IsIHRoaXMuY29udGV4dCApLmluZGV4KCB0aGlzWzBdICkgPj0gMCA6CiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCB0aGlzICkubGVuZ3RoID4gMCA6CiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXIoIHNlbGVjdG9yICkubGVuZ3RoID4gMCApOwogICAgICAgIH0sCgogICAgICAgIGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7CiAgICAgICAgICAgIHZhciByZXQgPSBbXSwgaSwgbCwgY3VyID0gdGhpc1swXTsKCiAgICAgICAgICAgIC8vIEFycmF5IChkZXByZWNhdGVkIGFzIG9mIGpRdWVyeSAxLjcpCiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzQXJyYXkoIHNlbGVjdG9ycyApICkgewogICAgICAgICAgICAgICAgdmFyIGxldmVsID0gMTsKCiAgICAgICAgICAgICAgICB3aGlsZSAoIGN1ciAmJiBjdXIub3duZXJEb2N1bWVudCAmJiBjdXIgIT09IGNvbnRleHQgKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBzZWxlY3RvcnMubGVuZ3RoOyBpKysgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGpRdWVyeSggY3VyICkuaXMoIHNlbGVjdG9yc1sgaSBdICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQucHVzaCh7IHNlbGVjdG9yOiBzZWxlY3RvcnNbIGkgXSwgZWxlbTogY3VyLCBsZXZlbDogbGV2ZWwgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGN1ciA9IGN1ci5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgIGxldmVsKys7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gU3RyaW5nCiAgICAgICAgICAgIHZhciBwb3MgPSBQT1MudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gInN0cmluZyIgPwogICAgICAgICAgICAgICAgalF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOgogICAgICAgICAgICAgICAgMDsKCiAgICAgICAgICAgIGZvciAoIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgICAgICAgICBjdXIgPSB0aGlzW2ldOwoKICAgICAgICAgICAgICAgIHdoaWxlICggY3VyICkgewogICAgICAgICAgICAgICAgICAgIGlmICggcG9zID8gcG9zLmluZGV4KGN1cikgPiAtMSA6IGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihjdXIsIHNlbGVjdG9ycykgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKCBjdXIgKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1ciA9IGN1ci5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFjdXIgfHwgIWN1ci5vd25lckRvY3VtZW50IHx8IGN1ciA9PT0gY29udGV4dCB8fCBjdXIubm9kZVR5cGUgPT09IDExICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldCA9IHJldC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQ7CgogICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCwgImNsb3Nlc3QiLCBzZWxlY3RvcnMgKTsKICAgICAgICB9LAoKICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluCiAgICAgICAgLy8gdGhlIG1hdGNoZWQgc2V0IG9mIGVsZW1lbnRzCiAgICAgICAgaW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkgewoKICAgICAgICAgICAgLy8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnQKICAgICAgICAgICAgaWYgKCAhZWxlbSApIHsKICAgICAgICAgICAgICAgIHJldHVybiAoIHRoaXNbMF0gJiYgdGhpc1swXS5wYXJlbnROb2RlICkgPyB0aGlzLnByZXZBbGwoKS5sZW5ndGggOiAtMTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gaW5kZXggaW4gc2VsZWN0b3IKICAgICAgICAgICAgaWYgKCB0eXBlb2YgZWxlbSA9PT0gInN0cmluZyIgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4galF1ZXJ5LmluQXJyYXkoIHRoaXNbMF0sIGpRdWVyeSggZWxlbSApICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudAogICAgICAgICAgICByZXR1cm4galF1ZXJ5LmluQXJyYXkoCiAgICAgICAgICAgICAgICAvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWQKICAgICAgICAgICAgICAgIGVsZW0uanF1ZXJ5ID8gZWxlbVswXSA6IGVsZW0sIHRoaXMgKTsKICAgICAgICB9LAoKICAgICAgICBhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHsKICAgICAgICAgICAgdmFyIHNldCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gInN0cmluZyIgPwogICAgICAgICAgICAgICAgICAgIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSA6CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IgJiYgc2VsZWN0b3Iubm9kZVR5cGUgPyBbIHNlbGVjdG9yIF0gOiBzZWxlY3RvciApLAogICAgICAgICAgICAgICAgYWxsID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBzZXQgKTsKCiAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggaXNEaXNjb25uZWN0ZWQoIHNldFswXSApIHx8IGlzRGlzY29ubmVjdGVkKCBhbGxbMF0gKSA/CiAgICAgICAgICAgICAgICBhbGwgOgogICAgICAgICAgICAgICAgalF1ZXJ5LnVuaXF1ZSggYWxsICkgKTsKICAgICAgICB9LAoKICAgICAgICBhbmRTZWxmOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKCB0aGlzLnByZXZPYmplY3QgKTsKICAgICAgICB9CiAgICB9KTsKCi8vIEEgcGFpbmZ1bGx5IHNpbXBsZSBjaGVjayB0byBzZWUgaWYgYW4gZWxlbWVudCBpcyBkaXNjb25uZWN0ZWQKLy8gZnJvbSBhIGRvY3VtZW50IChzaG91bGQgYmUgaW1wcm92ZWQsIHdoZXJlIGZlYXNpYmxlKS4KICAgIGZ1bmN0aW9uIGlzRGlzY29ubmVjdGVkKCBub2RlICkgewogICAgICAgIHJldHVybiAhbm9kZSB8fCAhbm9kZS5wYXJlbnROb2RlIHx8IG5vZGUucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMTE7CiAgICB9CgogICAgalF1ZXJ5LmVhY2goewogICAgICAgIHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7CiAgICAgICAgICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7CiAgICAgICAgfSwKICAgICAgICBwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sICJwYXJlbnROb2RlIiApOwogICAgICAgIH0sCiAgICAgICAgcGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7CiAgICAgICAgICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAicGFyZW50Tm9kZSIsIHVudGlsICk7CiAgICAgICAgfSwKICAgICAgICBuZXh0OiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5udGgoIGVsZW0sIDIsICJuZXh0U2libGluZyIgKTsKICAgICAgICB9LAogICAgICAgIHByZXY6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICByZXR1cm4galF1ZXJ5Lm50aCggZWxlbSwgMiwgInByZXZpb3VzU2libGluZyIgKTsKICAgICAgICB9LAogICAgICAgIG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICByZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgIm5leHRTaWJsaW5nIiApOwogICAgICAgIH0sCiAgICAgICAgcHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAicHJldmlvdXNTaWJsaW5nIiApOwogICAgICAgIH0sCiAgICAgICAgbmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7CiAgICAgICAgICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAibmV4dFNpYmxpbmciLCB1bnRpbCApOwogICAgICAgIH0sCiAgICAgICAgcHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7CiAgICAgICAgICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCAicHJldmlvdXNTaWJsaW5nIiwgdW50aWwgKTsKICAgICAgICB9LAogICAgICAgIHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5zaWJsaW5nKCBlbGVtLnBhcmVudE5vZGUuZmlyc3RDaGlsZCwgZWxlbSApOwogICAgICAgIH0sCiAgICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICByZXR1cm4galF1ZXJ5LnNpYmxpbmcoIGVsZW0uZmlyc3RDaGlsZCApOwogICAgICAgIH0sCiAgICAgICAgY29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICByZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCAiaWZyYW1lIiApID8KICAgICAgICAgICAgICAgIGVsZW0uY29udGVudERvY3VtZW50IHx8IGVsZW0uY29udGVudFdpbmRvdy5kb2N1bWVudCA6CiAgICAgICAgICAgICAgICBqUXVlcnkubWFrZUFycmF5KCBlbGVtLmNoaWxkTm9kZXMgKTsKICAgICAgICB9CiAgICB9LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7CiAgICAgICAgalF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkgewogICAgICAgICAgICB2YXIgcmV0ID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7CgogICAgICAgICAgICBpZiAoICFydW50aWwudGVzdCggbmFtZSApICkgewogICAgICAgICAgICAgICAgc2VsZWN0b3IgPSB1bnRpbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09ICJzdHJpbmciICkgewogICAgICAgICAgICAgICAgcmV0ID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHJldCApOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXQgPSB0aGlzLmxlbmd0aCA+IDEgJiYgIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0OwoKICAgICAgICAgICAgaWYgKCAodGhpcy5sZW5ndGggPiAxIHx8IHJtdWx0aXNlbGVjdG9yLnRlc3QoIHNlbGVjdG9yICkpICYmIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7CiAgICAgICAgICAgICAgICByZXQgPSByZXQucmV2ZXJzZSgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCwgbmFtZSwgc2xpY2UuY2FsbCggYXJndW1lbnRzICkuam9pbigiLCIpICk7CiAgICAgICAgfTsKICAgIH0pOwoKICAgIGpRdWVyeS5leHRlbmQoewogICAgICAgIGZpbHRlcjogZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7CiAgICAgICAgICAgIGlmICggbm90ICkgewogICAgICAgICAgICAgICAgZXhwciA9ICI6bm90KCIgKyBleHByICsgIikiOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gZWxlbXMubGVuZ3RoID09PSAxID8KICAgICAgICAgICAgICAgIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihlbGVtc1swXSwgZXhwcikgPyBbIGVsZW1zWzBdIF0gOiBbXSA6CiAgICAgICAgICAgICAgICBqUXVlcnkuZmluZC5tYXRjaGVzKGV4cHIsIGVsZW1zKTsKICAgICAgICB9LAoKICAgICAgICBkaXI6IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkgewogICAgICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdLAogICAgICAgICAgICAgICAgY3VyID0gZWxlbVsgZGlyIF07CgogICAgICAgICAgICB3aGlsZSAoIGN1ciAmJiBjdXIubm9kZVR5cGUgIT09IDkgJiYgKHVudGlsID09PSB1bmRlZmluZWQgfHwgY3VyLm5vZGVUeXBlICE9PSAxIHx8ICFqUXVlcnkoIGN1ciApLmlzKCB1bnRpbCApKSApIHsKICAgICAgICAgICAgICAgIGlmICggY3VyLm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICAgICAgICAgIG1hdGNoZWQucHVzaCggY3VyICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjdXIgPSBjdXJbZGlyXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbWF0Y2hlZDsKICAgICAgICB9LAoKICAgICAgICBudGg6IGZ1bmN0aW9uKCBjdXIsIHJlc3VsdCwgZGlyLCBlbGVtICkgewogICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgMTsKICAgICAgICAgICAgdmFyIG51bSA9IDA7CgogICAgICAgICAgICBmb3IgKCA7IGN1cjsgY3VyID0gY3VyW2Rpcl0gKSB7CiAgICAgICAgICAgICAgICBpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiArK251bSA9PT0gcmVzdWx0ICkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gY3VyOwogICAgICAgIH0sCgogICAgICAgIHNpYmxpbmc6IGZ1bmN0aW9uKCBuLCBlbGVtICkgewogICAgICAgICAgICB2YXIgciA9IFtdOwoKICAgICAgICAgICAgZm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHsKICAgICAgICAgICAgICAgIGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHIucHVzaCggbiApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICB9CiAgICB9KTsKCi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90CiAgICBmdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIGtlZXAgKSB7CgogICAgICAgIC8vIENhbid0IHBhc3MgbnVsbCBvciB1bmRlZmluZWQgdG8gaW5kZXhPZiBpbiBGaXJlZm94IDQKICAgICAgICAvLyBTZXQgdG8gMCB0byBza2lwIHN0cmluZyBjaGVjawogICAgICAgIHF1YWxpZmllciA9IHF1YWxpZmllciB8fCAwOwoKICAgICAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHsKICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHsKICAgICAgICAgICAgICAgIHZhciByZXRWYWwgPSAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmV0VmFsID09PSBrZWVwOwogICAgICAgICAgICB9KTsKCiAgICAgICAgfSBlbHNlIGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkgewogICAgICAgICAgICByZXR1cm4galF1ZXJ5LmdyZXAoZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkgewogICAgICAgICAgICAgICAgcmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgPT09IGtlZXA7CiAgICAgICAgICAgIH0pOwoKICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgcXVhbGlmaWVyID09PSAic3RyaW5nIiApIHsKICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0galF1ZXJ5LmdyZXAoZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKCBpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHsKICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkuZmlsdGVyKHF1YWxpZmllciwgZmlsdGVyZWQsICFrZWVwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZmlsdGVyZWQgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGpRdWVyeS5ncmVwKGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHsKICAgICAgICAgICAgcmV0dXJuICggalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHF1YWxpZmllciApID49IDAgKSA9PT0ga2VlcDsKICAgICAgICB9KTsKICAgIH0KCgoKCiAgICBmdW5jdGlvbiBjcmVhdGVTYWZlRnJhZ21lbnQoIGRvY3VtZW50ICkgewogICAgICAgIHZhciBsaXN0ID0gbm9kZU5hbWVzLnNwbGl0KCAifCIgKSwKICAgICAgICAgICAgc2FmZUZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CgogICAgICAgIGlmICggc2FmZUZyYWcuY3JlYXRlRWxlbWVudCApIHsKICAgICAgICAgICAgd2hpbGUgKCBsaXN0Lmxlbmd0aCApIHsKICAgICAgICAgICAgICAgIHNhZmVGcmFnLmNyZWF0ZUVsZW1lbnQoCiAgICAgICAgICAgICAgICAgICAgbGlzdC5wb3AoKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2FmZUZyYWc7CiAgICB9CgogICAgdmFyIG5vZGVOYW1lcyA9ICJhYmJyfGFydGljbGV8YXNpZGV8YXVkaW98Y2FudmFzfGRhdGFsaXN0fGRldGFpbHN8ZmlnY2FwdGlvbnxmaWd1cmV8Zm9vdGVyfCIgKwogICAgICAgICAgICAiaGVhZGVyfGhncm91cHxtYXJrfG1ldGVyfG5hdnxvdXRwdXR8cHJvZ3Jlc3N8c2VjdGlvbnxzdW1tYXJ5fHRpbWV8dmlkZW8iLAogICAgICAgIHJpbmxpbmVqUXVlcnkgPSAvIGpRdWVyeVxkKz0iKD86XGQrfG51bGwpIi9nLAogICAgICAgIHJsZWFkaW5nV2hpdGVzcGFjZSA9IC9eXHMrLywKICAgICAgICByeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXHc6XSspW14+XSopXC8+L2lnLAogICAgICAgIHJ0YWdOYW1lID0gLzwoW1x3Ol0rKS8sCiAgICAgICAgcnRib2R5ID0gLzx0Ym9keS9pLAogICAgICAgIHJodG1sID0gLzx8JiM/XHcrOy8sCiAgICAgICAgcm5vSW5uZXJodG1sID0gLzwoPzpzY3JpcHR8c3R5bGUpL2ksCiAgICAgICAgcm5vY2FjaGUgPSAvPCg/OnNjcmlwdHxvYmplY3R8ZW1iZWR8b3B0aW9ufHN0eWxlKS9pLAogICAgICAgIHJub3NoaW1jYWNoZSA9IG5ldyBSZWdFeHAoIjwoPzoiICsgbm9kZU5hbWVzICsgIikiLCAiaSIpLAogICAgLy8gY2hlY2tlZD0iY2hlY2tlZCIgb3IgY2hlY2tlZAogICAgICAgIHJjaGVja2VkID0gL2NoZWNrZWRccyooPzpbXj1dfD1ccyouY2hlY2tlZC4pL2ksCiAgICAgICAgcnNjcmlwdFR5cGUgPSAvXC8oamF2YXxlY21hKXNjcmlwdC9pLAogICAgICAgIHJjbGVhblNjcmlwdCA9IC9eXHMqPCEoPzpcW0NEQVRBXFt8XC1cLSkvLAogICAgICAgIHdyYXBNYXAgPSB7CiAgICAgICAgICAgIG9wdGlvbjogWyAxLCAiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPiIsICI8L3NlbGVjdD4iIF0sCiAgICAgICAgICAgIGxlZ2VuZDogWyAxLCAiPGZpZWxkc2V0PiIsICI8L2ZpZWxkc2V0PiIgXSwKICAgICAgICAgICAgdGhlYWQ6IFsgMSwgIjx0YWJsZT4iLCAiPC90YWJsZT4iIF0sCiAgICAgICAgICAgIHRyOiBbIDIsICI8dGFibGU+PHRib2R5PiIsICI8L3Rib2R5PjwvdGFibGU+IiBdLAogICAgICAgICAgICB0ZDogWyAzLCAiPHRhYmxlPjx0Ym9keT48dHI+IiwgIjwvdHI+PC90Ym9keT48L3RhYmxlPiIgXSwKICAgICAgICAgICAgY29sOiBbIDIsICI8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPiIsICI8L2NvbGdyb3VwPjwvdGFibGU+IiBdLAogICAgICAgICAgICBhcmVhOiBbIDEsICI8bWFwPiIsICI8L21hcD4iIF0sCiAgICAgICAgICAgIF9kZWZhdWx0OiBbIDAsICIiLCAiIiBdCiAgICAgICAgfSwKICAgICAgICBzYWZlRnJhZ21lbnQgPSBjcmVhdGVTYWZlRnJhZ21lbnQoIGRvY3VtZW50ICk7CgogICAgd3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uOwogICAgd3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDsKICAgIHdyYXBNYXAudGggPSB3cmFwTWFwLnRkOwoKLy8gSUUgY2FuJ3Qgc2VyaWFsaXplIDxsaW5rPiBhbmQgPHNjcmlwdD4gdGFncyBub3JtYWxseQogICAgaWYgKCAhalF1ZXJ5LnN1cHBvcnQuaHRtbFNlcmlhbGl6ZSApIHsKICAgICAgICB3cmFwTWFwLl9kZWZhdWx0ID0gWyAxLCAiZGl2PGRpdj4iLCAiPC9kaXY+IiBdOwogICAgfQoKICAgIGpRdWVyeS5mbi5leHRlbmQoewogICAgICAgIHRleHQ6IGZ1bmN0aW9uKCB0ZXh0ICkgewogICAgICAgICAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKHRleHQpICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKTsKCiAgICAgICAgICAgICAgICAgICAgc2VsZi50ZXh0KCB0ZXh0LmNhbGwodGhpcywgaSwgc2VsZi50ZXh0KCkpICk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCB0eXBlb2YgdGV4dCAhPT0gIm9iamVjdCIgJiYgdGV4dCAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1wdHkoKS5hcHBlbmQoICh0aGlzWzBdICYmIHRoaXNbMF0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoIHRleHQgKSApOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4galF1ZXJ5LnRleHQoIHRoaXMgKTsKICAgICAgICB9LAoKICAgICAgICB3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHsKICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHRoaXMpLndyYXBBbGwoIGh0bWwuY2FsbCh0aGlzLCBpKSApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggdGhpc1swXSApIHsKICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kCiAgICAgICAgICAgICAgICB2YXIgd3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1swXS5vd25lckRvY3VtZW50ICkuZXEoMCkuY2xvbmUodHJ1ZSk7CgogICAgICAgICAgICAgICAgaWYgKCB0aGlzWzBdLnBhcmVudE5vZGUgKSB7CiAgICAgICAgICAgICAgICAgICAgd3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbMF0gKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB3cmFwLm1hcChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IHRoaXM7CgogICAgICAgICAgICAgICAgICAgIHdoaWxlICggZWxlbS5maXJzdENoaWxkICYmIGVsZW0uZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gMSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtOwogICAgICAgICAgICAgICAgfSkuYXBwZW5kKCB0aGlzICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7CiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSkgewogICAgICAgICAgICAgICAgICAgIGpRdWVyeSh0aGlzKS53cmFwSW5uZXIoIGh0bWwuY2FsbCh0aGlzLCBpKSApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpOwoKICAgICAgICAgICAgICAgIGlmICggY29udGVudHMubGVuZ3RoICkgewogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTsKCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNlbGYuYXBwZW5kKCBodG1sICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIHdyYXA6IGZ1bmN0aW9uKCBodG1sICkgewogICAgICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7CgogICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGkpIHsKICAgICAgICAgICAgICAgIGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwodGhpcywgaSkgOiBodG1sICk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIHVud3JhcDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZiAoICFqUXVlcnkubm9kZU5hbWUoIHRoaXMsICJib2R5IiApICkgewogICAgICAgICAgICAgICAgICAgIGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkuZW5kKCk7CiAgICAgICAgfSwKCiAgICAgICAgYXBwZW5kOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLCB0cnVlLCBmdW5jdGlvbiggZWxlbSApIHsKICAgICAgICAgICAgICAgIGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSApIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKCBlbGVtICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIHByZXBlbmQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsIHRydWUsIGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgaWYgKCB0aGlzLm5vZGVUeXBlID09PSAxICkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLmZpcnN0Q2hpbGQgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgYmVmb3JlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cywgZmFsc2UsIGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKCBhcmd1bWVudHMubGVuZ3RoICkgewogICAgICAgICAgICAgICAgdmFyIHNldCA9IGpRdWVyeS5jbGVhbiggYXJndW1lbnRzICk7CiAgICAgICAgICAgICAgICBzZXQucHVzaC5hcHBseSggc2V0LCB0aGlzLnRvQXJyYXkoKSApOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzZXQsICJiZWZvcmUiLCBhcmd1bWVudHMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGFmdGVyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cywgZmFsc2UsIGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKCBhcmd1bWVudHMubGVuZ3RoICkgewogICAgICAgICAgICAgICAgdmFyIHNldCA9IHRoaXMucHVzaFN0YWNrKCB0aGlzLCAiYWZ0ZXIiLCBhcmd1bWVudHMgKTsKICAgICAgICAgICAgICAgIHNldC5wdXNoLmFwcGx5KCBzZXQsIGpRdWVyeS5jbGVhbihhcmd1bWVudHMpICk7CiAgICAgICAgICAgICAgICByZXR1cm4gc2V0OwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLy8ga2VlcERhdGEgaXMgZm9yIGludGVybmFsIHVzZSBvbmx5LS1kbyBub3QgZG9jdW1lbnQKICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3Rvciwga2VlcERhdGEgKSB7CiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgZWxlbTsgKGVsZW0gPSB0aGlzW2ldKSAhPSBudWxsOyBpKysgKSB7CiAgICAgICAgICAgICAgICBpZiAoICFzZWxlY3RvciB8fCBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgWyBlbGVtIF0gKS5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmNsZWFuRGF0YSggZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpICk7CiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5jbGVhbkRhdGEoIFsgZWxlbSBdICk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbGVtICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBlbXB0eTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgZWxlbTsgKGVsZW0gPSB0aGlzW2ldKSAhPSBudWxsOyBpKysgKSB7CiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3MKICAgICAgICAgICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkuY2xlYW5EYXRhKCBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCIqIikgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2RlcwogICAgICAgICAgICAgICAgd2hpbGUgKCBlbGVtLmZpcnN0Q2hpbGQgKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbS5yZW1vdmVDaGlsZCggZWxlbS5maXJzdENoaWxkICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7CiAgICAgICAgICAgIGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7CiAgICAgICAgICAgIGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50czsKCiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgaHRtbDogZnVuY3Rpb24oIHZhbHVlICkgewogICAgICAgICAgICBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1swXSAmJiB0aGlzWzBdLm5vZGVUeXBlID09PSAxID8KICAgICAgICAgICAgICAgICAgICB0aGlzWzBdLmlubmVySFRNTC5yZXBsYWNlKHJpbmxpbmVqUXVlcnksICIiKSA6CiAgICAgICAgICAgICAgICAgICAgbnVsbDsKCiAgICAgICAgICAgICAgICAvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MCiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmCiAgICAgICAgICAgICAgICAoalF1ZXJ5LnN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UgfHwgIXJsZWFkaW5nV2hpdGVzcGFjZS50ZXN0KCB2YWx1ZSApKSAmJgogICAgICAgICAgICAgICAgIXdyYXBNYXBbIChydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsiIiwgIiJdKVsxXS50b0xvd2VyQ2FzZSgpIF0gKSB7CgogICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJ4aHRtbFRhZywgIjwkMT48LyQyPiIpOwoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrcwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXNbaV0ubm9kZVR5cGUgPT09IDEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuY2xlYW5EYXRhKCB0aGlzW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCIqIikgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbaV0uaW5uZXJIVE1MID0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZAogICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkgewogICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGkpewogICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICk7CgogICAgICAgICAgICAgICAgICAgIHNlbGYuaHRtbCggdmFsdWUuY2FsbCh0aGlzLCBpLCBzZWxmLmh0bWwoKSkgKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlcGxhY2VXaXRoOiBmdW5jdGlvbiggdmFsdWUgKSB7CiAgICAgICAgICAgIGlmICggdGhpc1swXSAmJiB0aGlzWzBdLnBhcmVudE5vZGUgKSB7CiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgZWxlbWVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NIGJlZm9yZSB0aGV5IGFyZSBpbnNlcnRlZAogICAgICAgICAgICAgICAgLy8gdGhpcyBjYW4gaGVscCBmaXggcmVwbGFjaW5nIGEgcGFyZW50IHdpdGggY2hpbGQgZWxlbWVudHMKICAgICAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0galF1ZXJ5KHRoaXMpLCBvbGQgPSBzZWxmLmh0bWwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZXBsYWNlV2l0aCggdmFsdWUuY2FsbCggdGhpcywgaSwgb2xkICkgKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiB2YWx1ZSAhPT0gInN0cmluZyIgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBqUXVlcnkoIHZhbHVlICkuZGV0YWNoKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IHRoaXMubmV4dFNpYmxpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTsKCiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KCB0aGlzICkucmVtb3ZlKCk7CgogICAgICAgICAgICAgICAgICAgIGlmICggbmV4dCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KG5leHQpLmJlZm9yZSggdmFsdWUgKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkocGFyZW50KS5hcHBlbmQoIHZhbHVlICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggPwogICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoalF1ZXJ5LmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUoKSA6IHZhbHVlKSwgInJlcGxhY2VXaXRoIiwgdmFsdWUgKSA6CiAgICAgICAgICAgICAgICAgICAgdGhpczsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmUoIHNlbGVjdG9yLCB0cnVlICk7CiAgICAgICAgfSwKCiAgICAgICAgZG9tTWFuaXA6IGZ1bmN0aW9uKCBhcmdzLCB0YWJsZSwgY2FsbGJhY2sgKSB7CiAgICAgICAgICAgIHZhciByZXN1bHRzLCBmaXJzdCwgZnJhZ21lbnQsIHBhcmVudCwKICAgICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXSwKICAgICAgICAgICAgICAgIHNjcmlwdHMgPSBbXTsKCiAgICAgICAgICAgIC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdAogICAgICAgICAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC5jaGVja0Nsb25lICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIiAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkodGhpcykuZG9tTWFuaXAoIGFyZ3MsIHRhYmxlLCBjYWxsYmFjaywgdHJ1ZSApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24odmFsdWUpICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSBqUXVlcnkodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgYXJnc1swXSA9IHZhbHVlLmNhbGwodGhpcywgaSwgdGFibGUgPyBzZWxmLmh0bWwoKSA6IHVuZGVmaW5lZCk7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5kb21NYW5pcCggYXJncywgdGFibGUsIGNhbGxiYWNrICk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCB0aGlzWzBdICkgewogICAgICAgICAgICAgICAgcGFyZW50ID0gdmFsdWUgJiYgdmFsdWUucGFyZW50Tm9kZTsKCiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBpbiBhIGZyYWdtZW50LCBqdXN0IHVzZSB0aGF0IGluc3RlYWQgb2YgYnVpbGRpbmcgYSBuZXcgb25lCiAgICAgICAgICAgICAgICBpZiAoIGpRdWVyeS5zdXBwb3J0LnBhcmVudE5vZGUgJiYgcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSA9PT0gMTEgJiYgcGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSB0aGlzLmxlbmd0aCApIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0geyBmcmFnbWVudDogcGFyZW50IH07CgogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIGFyZ3MsIHRoaXMsIHNjcmlwdHMgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHJlc3VsdHMuZnJhZ21lbnQ7CgogICAgICAgICAgICAgICAgaWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHsKICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IGZyYWdtZW50ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICggZmlyc3QgKSB7CiAgICAgICAgICAgICAgICAgICAgdGFibGUgPSB0YWJsZSAmJiBqUXVlcnkubm9kZU5hbWUoIGZpcnN0LCAidHIiICk7CgogICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoLCBsYXN0SW5kZXggPSBsIC0gMTsgaSA8IGw7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290KHRoaXNbaV0sIGZpcnN0KSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tpXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHdlIGRvIG5vdCBsZWFrIG1lbW9yeSBieSBpbmFkdmVydGVudGx5IGRpc2NhcmRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBmcmFnbWVudCAod2hpY2ggbWlnaHQgaGF2ZSBhdHRhY2hlZCBkYXRhKSBpbnN0ZWFkIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2luZyBpdDsgaW4gYWRkaXRpb24sIHVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgb2JqZWN0IGZvciB0aGUgbGFzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXRlbSBpbnN0ZWFkIG9mIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cCBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKEJ1ZyAjODA3MCkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGcmFnbWVudHMgZnJvbSB0aGUgZnJhZ21lbnQgY2FjaGUgbXVzdCBhbHdheXMgYmUgY2xvbmVkIGFuZCBuZXZlciB1c2VkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBwbGFjZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuY2FjaGVhYmxlIHx8ICggbCA+IDEgJiYgaSA8IGxhc3RJbmRleCApID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuY2xvbmUoIGZyYWdtZW50LCB0cnVlLCB0cnVlICkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICggc2NyaXB0cy5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmVhY2goIHNjcmlwdHMsIGV2YWxTY3JpcHQgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQogICAgfSk7CgogICAgZnVuY3Rpb24gcm9vdCggZWxlbSwgY3VyICkgewogICAgICAgIHJldHVybiBqUXVlcnkubm9kZU5hbWUoZWxlbSwgInRhYmxlIikgPwogICAgICAgICAgICAoZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgidGJvZHkiKVswXSB8fAogICAgICAgICAgICAgICAgZWxlbS5hcHBlbmRDaGlsZChlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGJvZHkiKSkpIDoKICAgICAgICAgICAgZWxlbTsKICAgIH0KCiAgICBmdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkgewoKICAgICAgICBpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgfHwgIWpRdWVyeS5oYXNEYXRhKCBzcmMgKSApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIHR5cGUsIGksIGwsCiAgICAgICAgICAgIG9sZERhdGEgPSBqUXVlcnkuX2RhdGEoIHNyYyApLAogICAgICAgICAgICBjdXJEYXRhID0galF1ZXJ5Ll9kYXRhKCBkZXN0LCBvbGREYXRhICksCiAgICAgICAgICAgIGV2ZW50cyA9IG9sZERhdGEuZXZlbnRzOwoKICAgICAgICBpZiAoIGV2ZW50cyApIHsKICAgICAgICAgICAgZGVsZXRlIGN1ckRhdGEuaGFuZGxlOwogICAgICAgICAgICBjdXJEYXRhLmV2ZW50cyA9IHt9OwoKICAgICAgICAgICAgZm9yICggdHlwZSBpbiBldmVudHMgKSB7CiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlICsgKCBldmVudHNbIHR5cGUgXVsgaSBdLm5hbWVzcGFjZSA/ICIuIiA6ICIiICkgKyBldmVudHNbIHR5cGUgXVsgaSBdLm5hbWVzcGFjZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSwgZXZlbnRzWyB0eXBlIF1bIGkgXS5kYXRhICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIG1ha2UgdGhlIGNsb25lZCBwdWJsaWMgZGF0YSBvYmplY3QgYSBjb3B5IGZyb20gdGhlIG9yaWdpbmFsCiAgICAgICAgaWYgKCBjdXJEYXRhLmRhdGEgKSB7CiAgICAgICAgICAgIGN1ckRhdGEuZGF0YSA9IGpRdWVyeS5leHRlbmQoIHt9LCBjdXJEYXRhLmRhdGEgKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY2xvbmVGaXhBdHRyaWJ1dGVzKCBzcmMsIGRlc3QgKSB7CiAgICAgICAgdmFyIG5vZGVOYW1lOwoKICAgICAgICAvLyBXZSBkbyBub3QgbmVlZCB0byBkbyBhbnl0aGluZyBmb3Igbm9uLUVsZW1lbnRzCiAgICAgICAgaWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBjbGVhckF0dHJpYnV0ZXMgcmVtb3ZlcyB0aGUgYXR0cmlidXRlcywgd2hpY2ggd2UgZG9uJ3Qgd2FudCwKICAgICAgICAvLyBidXQgYWxzbyByZW1vdmVzIHRoZSBhdHRhY2hFdmVudCBldmVudHMsIHdoaWNoIHdlICpkbyogd2FudAogICAgICAgIGlmICggZGVzdC5jbGVhckF0dHJpYnV0ZXMgKSB7CiAgICAgICAgICAgIGRlc3QuY2xlYXJBdHRyaWJ1dGVzKCk7CiAgICAgICAgfQoKICAgICAgICAvLyBtZXJnZUF0dHJpYnV0ZXMsIGluIGNvbnRyYXN0LCBvbmx5IG1lcmdlcyBiYWNrIG9uIHRoZQogICAgICAgIC8vIG9yaWdpbmFsIGF0dHJpYnV0ZXMsIG5vdCB0aGUgZXZlbnRzCiAgICAgICAgaWYgKCBkZXN0Lm1lcmdlQXR0cmlidXRlcyApIHsKICAgICAgICAgICAgZGVzdC5tZXJnZUF0dHJpYnV0ZXMoIHNyYyApOwogICAgICAgIH0KCiAgICAgICAgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CgogICAgICAgIC8vIElFNi04IGZhaWwgdG8gY2xvbmUgY2hpbGRyZW4gaW5zaWRlIG9iamVjdCBlbGVtZW50cyB0aGF0IHVzZQogICAgICAgIC8vIHRoZSBwcm9wcmlldGFyeSBjbGFzc2lkIGF0dHJpYnV0ZSB2YWx1ZSAocmF0aGVyIHRoYW4gdGhlIHR5cGUKICAgICAgICAvLyBhdHRyaWJ1dGUpIHRvIGlkZW50aWZ5IHRoZSB0eXBlIG9mIGNvbnRlbnQgdG8gZGlzcGxheQogICAgICAgIGlmICggbm9kZU5hbWUgPT09ICJvYmplY3QiICkgewogICAgICAgICAgICBkZXN0Lm91dGVySFRNTCA9IHNyYy5vdXRlckhUTUw7CgogICAgICAgIH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSAiaW5wdXQiICYmIChzcmMudHlwZSA9PT0gImNoZWNrYm94IiB8fCBzcmMudHlwZSA9PT0gInJhZGlvIikgKSB7CiAgICAgICAgICAgIC8vIElFNi04IGZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3gKICAgICAgICAgICAgLy8gb3IgcmFkaW8gYnV0dG9uLiBXb3JzZSwgSUU2LTcgZmFpbCB0byBnaXZlIHRoZSBjbG9uZWQgZWxlbWVudAogICAgICAgICAgICAvLyBhIGNoZWNrZWQgYXBwZWFyYW5jZSBpZiB0aGUgZGVmYXVsdENoZWNrZWQgdmFsdWUgaXNuJ3QgYWxzbyBzZXQKICAgICAgICAgICAgaWYgKCBzcmMuY2hlY2tlZCApIHsKICAgICAgICAgICAgICAgIGRlc3QuZGVmYXVsdENoZWNrZWQgPSBkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSUU2LTcgZ2V0IGNvbmZ1c2VkIGFuZCBlbmQgdXAgc2V0dGluZyB0aGUgdmFsdWUgb2YgYSBjbG9uZWQKICAgICAgICAgICAgLy8gY2hlY2tib3gvcmFkaW8gYnV0dG9uIHRvIGFuIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mICJvbiIKICAgICAgICAgICAgaWYgKCBkZXN0LnZhbHVlICE9PSBzcmMudmFsdWUgKSB7CiAgICAgICAgICAgICAgICBkZXN0LnZhbHVlID0gc3JjLnZhbHVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBJRTYtOCBmYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZAogICAgICAgICAgICAvLyBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9ucwogICAgICAgIH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSAib3B0aW9uIiApIHsKICAgICAgICAgICAgZGVzdC5zZWxlY3RlZCA9IHNyYy5kZWZhdWx0U2VsZWN0ZWQ7CgogICAgICAgICAgICAvLyBJRTYtOCBmYWlscyB0byBzZXQgdGhlIGRlZmF1bHRWYWx1ZSB0byB0aGUgY29ycmVjdCB2YWx1ZSB3aGVuCiAgICAgICAgICAgIC8vIGNsb25pbmcgb3RoZXIgdHlwZXMgb2YgaW5wdXQgZmllbGRzCiAgICAgICAgfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJpbnB1dCIgfHwgbm9kZU5hbWUgPT09ICJ0ZXh0YXJlYSIgKSB7CiAgICAgICAgICAgIGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTsKICAgICAgICB9CgogICAgICAgIC8vIEV2ZW50IGRhdGEgZ2V0cyByZWZlcmVuY2VkIGluc3RlYWQgb2YgY29waWVkIGlmIHRoZSBleHBhbmRvCiAgICAgICAgLy8gZ2V0cyBjb3BpZWQgdG9vCiAgICAgICAgZGVzdC5yZW1vdmVBdHRyaWJ1dGUoIGpRdWVyeS5leHBhbmRvICk7CiAgICB9CgogICAgalF1ZXJ5LmJ1aWxkRnJhZ21lbnQgPSBmdW5jdGlvbiggYXJncywgbm9kZXMsIHNjcmlwdHMgKSB7CiAgICAgICAgdmFyIGZyYWdtZW50LCBjYWNoZWFibGUsIGNhY2hlcmVzdWx0cywgZG9jLAogICAgICAgICAgICBmaXJzdCA9IGFyZ3NbIDAgXTsKCiAgICAgICAgLy8gbm9kZXMgbWF5IGNvbnRhaW4gZWl0aGVyIGFuIGV4cGxpY2l0IGRvY3VtZW50IG9iamVjdCwKICAgICAgICAvLyBhIGpRdWVyeSBjb2xsZWN0aW9uIG9yIGNvbnRleHQgb2JqZWN0LgogICAgICAgIC8vIElmIG5vZGVzWzBdIGNvbnRhaW5zIGEgdmFsaWQgb2JqZWN0IHRvIGFzc2lnbiB0byBkb2MKICAgICAgICBpZiAoIG5vZGVzICYmIG5vZGVzWzBdICkgewogICAgICAgICAgICBkb2MgPSBub2Rlc1swXS5vd25lckRvY3VtZW50IHx8IG5vZGVzWzBdOwogICAgICAgIH0KCiAgICAgICAgLy8gRW5zdXJlIHRoYXQgYW4gYXR0ciBvYmplY3QgZG9lc24ndCBpbmNvcnJlY3RseSBzdGFuZCBpbiBhcyBhIGRvY3VtZW50IG9iamVjdAogICAgICAgIC8vIENocm9tZSBhbmQgRmlyZWZveCBzZWVtIHRvIGFsbG93IHRoaXMgdG8gb2NjdXIgYW5kIHdpbGwgdGhyb3cgZXhjZXB0aW9uCiAgICAgICAgLy8gRml4ZXMgIzg5NTAKICAgICAgICBpZiAoICFkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCApIHsKICAgICAgICAgICAgZG9jID0gZG9jdW1lbnQ7CiAgICAgICAgfQoKICAgICAgICAvLyBPbmx5IGNhY2hlICJzbWFsbCIgKDEvMiBLQikgSFRNTCBzdHJpbmdzIHRoYXQgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWFpbiBkb2N1bWVudAogICAgICAgIC8vIENsb25pbmcgb3B0aW9ucyBsb3NlcyB0aGUgc2VsZWN0ZWQgc3RhdGUsIHNvIGRvbid0IGNhY2hlIHRoZW0KICAgICAgICAvLyBJRSA2IGRvZXNuJ3QgbGlrZSBpdCB3aGVuIHlvdSBwdXQgPG9iamVjdD4gb3IgPGVtYmVkPiBlbGVtZW50cyBpbiBhIGZyYWdtZW50CiAgICAgICAgLy8gQWxzbywgV2ViS2l0IGRvZXMgbm90IGNsb25lICdjaGVja2VkJyBhdHRyaWJ1dGVzIG9uIGNsb25lTm9kZSwgc28gZG9uJ3QgY2FjaGUKICAgICAgICAvLyBMYXN0bHksIElFNiw3LDggd2lsbCBub3QgY29ycmVjdGx5IHJldXNlIGNhY2hlZCBmcmFnbWVudHMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSB1bmtub3duIGVsZW1zICMxMDUwMQogICAgICAgIGlmICggYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGZpcnN0ID09PSAic3RyaW5nIiAmJiBmaXJzdC5sZW5ndGggPCA1MTIgJiYgZG9jID09PSBkb2N1bWVudCAmJgogICAgICAgICAgICBmaXJzdC5jaGFyQXQoMCkgPT09ICI8IiAmJiAhcm5vY2FjaGUudGVzdCggZmlyc3QgKSAmJgogICAgICAgICAgICAoalF1ZXJ5LnN1cHBvcnQuY2hlY2tDbG9uZSB8fCAhcmNoZWNrZWQudGVzdCggZmlyc3QgKSkgJiYKICAgICAgICAgICAgKGpRdWVyeS5zdXBwb3J0Lmh0bWw1Q2xvbmUgfHwgIXJub3NoaW1jYWNoZS50ZXN0KCBmaXJzdCApKSApIHsKCiAgICAgICAgICAgIGNhY2hlYWJsZSA9IHRydWU7CgogICAgICAgICAgICBjYWNoZXJlc3VsdHMgPSBqUXVlcnkuZnJhZ21lbnRzWyBmaXJzdCBdOwogICAgICAgICAgICBpZiAoIGNhY2hlcmVzdWx0cyAmJiBjYWNoZXJlc3VsdHMgIT09IDEgKSB7CiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IGNhY2hlcmVzdWx0czsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCAhZnJhZ21lbnQgKSB7CiAgICAgICAgICAgIGZyYWdtZW50ID0gZG9jLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICAgICAgICAgICAgalF1ZXJ5LmNsZWFuKCBhcmdzLCBkb2MsIGZyYWdtZW50LCBzY3JpcHRzICk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIGNhY2hlYWJsZSApIHsKICAgICAgICAgICAgalF1ZXJ5LmZyYWdtZW50c1sgZmlyc3QgXSA9IGNhY2hlcmVzdWx0cyA/IGZyYWdtZW50IDogMTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB7IGZyYWdtZW50OiBmcmFnbWVudCwgY2FjaGVhYmxlOiBjYWNoZWFibGUgfTsKICAgIH07CgogICAgalF1ZXJ5LmZyYWdtZW50cyA9IHt9OwoKICAgIGpRdWVyeS5lYWNoKHsKICAgICAgICBhcHBlbmRUbzogImFwcGVuZCIsCiAgICAgICAgcHJlcGVuZFRvOiAicHJlcGVuZCIsCiAgICAgICAgaW5zZXJ0QmVmb3JlOiAiYmVmb3JlIiwKICAgICAgICBpbnNlcnRBZnRlcjogImFmdGVyIiwKICAgICAgICByZXBsYWNlQWxsOiAicmVwbGFjZVdpdGgiCiAgICB9LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7CiAgICAgICAgalF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7CiAgICAgICAgICAgIHZhciByZXQgPSBbXSwKICAgICAgICAgICAgICAgIGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSwKICAgICAgICAgICAgICAgIHBhcmVudCA9IHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXNbMF0ucGFyZW50Tm9kZTsKCiAgICAgICAgICAgIGlmICggcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSA9PT0gMTEgJiYgcGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICYmIGluc2VydC5sZW5ndGggPT09IDEgKSB7CiAgICAgICAgICAgICAgICBpbnNlcnRbIG9yaWdpbmFsIF0oIHRoaXNbMF0gKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGluc2VydC5sZW5ndGg7IGkgPCBsOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zID0gKCBpID4gMCA/IHRoaXMuY2xvbmUodHJ1ZSkgOiB0aGlzICkuZ2V0KCk7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KCBpbnNlcnRbaV0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTsKICAgICAgICAgICAgICAgICAgICByZXQgPSByZXQuY29uY2F0KCBlbGVtcyApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0LCBuYW1lLCBpbnNlcnQuc2VsZWN0b3IgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9KTsKCiAgICBmdW5jdGlvbiBnZXRBbGwoIGVsZW0gKSB7CiAgICAgICAgaWYgKCB0eXBlb2YgZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gInVuZGVmaW5lZCIgKSB7CiAgICAgICAgICAgIHJldHVybiBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAiKiIgKTsKCiAgICAgICAgfSBlbHNlIGlmICggdHlwZW9mIGVsZW0ucXVlcnlTZWxlY3RvckFsbCAhPT0gInVuZGVmaW5lZCIgKSB7CiAgICAgICAgICAgIHJldHVybiBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoICIqIiApOwoKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgfQogICAgfQoKLy8gVXNlZCBpbiBjbGVhbiwgZml4ZXMgdGhlIGRlZmF1bHRDaGVja2VkIHByb3BlcnR5CiAgICBmdW5jdGlvbiBmaXhEZWZhdWx0Q2hlY2tlZCggZWxlbSApIHsKICAgICAgICBpZiAoIGVsZW0udHlwZSA9PT0gImNoZWNrYm94IiB8fCBlbGVtLnR5cGUgPT09ICJyYWRpbyIgKSB7CiAgICAgICAgICAgIGVsZW0uZGVmYXVsdENoZWNrZWQgPSBlbGVtLmNoZWNrZWQ7CiAgICAgICAgfQogICAgfQovLyBGaW5kcyBhbGwgaW5wdXRzIGFuZCBwYXNzZXMgdGhlbSB0byBmaXhEZWZhdWx0Q2hlY2tlZAogICAgZnVuY3Rpb24gZmluZElucHV0cyggZWxlbSApIHsKICAgICAgICB2YXIgbm9kZU5hbWUgPSAoIGVsZW0ubm9kZU5hbWUgfHwgIiIgKS50b0xvd2VyQ2FzZSgpOwogICAgICAgIGlmICggbm9kZU5hbWUgPT09ICJpbnB1dCIgKSB7CiAgICAgICAgICAgIGZpeERlZmF1bHRDaGVja2VkKCBlbGVtICk7CiAgICAgICAgICAgIC8vIFNraXAgc2NyaXB0cywgZ2V0IG90aGVyIGNoaWxkcmVuCiAgICAgICAgfSBlbHNlIGlmICggbm9kZU5hbWUgIT09ICJzY3JpcHQiICYmIHR5cGVvZiBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSAidW5kZWZpbmVkIiApIHsKICAgICAgICAgICAgalF1ZXJ5LmdyZXAoIGVsZW0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoImlucHV0IiksIGZpeERlZmF1bHRDaGVja2VkICk7CiAgICAgICAgfQogICAgfQoKLy8gRGVyaXZlZCBGcm9tOiBodHRwOi8vd3d3LmllY3NzLmNvbS9zaGltcHJvdmUvamF2YXNjcmlwdC9zaGltcHJvdmUuMS0wLTEuanMKICAgIGZ1bmN0aW9uIHNoaW1DbG9uZU5vZGUoIGVsZW0gKSB7CiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CiAgICAgICAgc2FmZUZyYWdtZW50LmFwcGVuZENoaWxkKCBkaXYgKTsKCiAgICAgICAgZGl2LmlubmVySFRNTCA9IGVsZW0ub3V0ZXJIVE1MOwogICAgICAgIHJldHVybiBkaXYuZmlyc3RDaGlsZDsKICAgIH0KCiAgICBqUXVlcnkuZXh0ZW5kKHsKICAgICAgICBjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkgewogICAgICAgICAgICB2YXIgc3JjRWxlbWVudHMsCiAgICAgICAgICAgICAgICBkZXN0RWxlbWVudHMsCiAgICAgICAgICAgICAgICBpLAogICAgICAgICAgICAvLyBJRTw9OCBkb2VzIG5vdCBwcm9wZXJseSBjbG9uZSBkZXRhY2hlZCwgdW5rbm93biBlbGVtZW50IG5vZGVzCiAgICAgICAgICAgICAgICBjbG9uZSA9IGpRdWVyeS5zdXBwb3J0Lmh0bWw1Q2xvbmUgfHwgIXJub3NoaW1jYWNoZS50ZXN0KCAiPCIgKyBlbGVtLm5vZGVOYW1lICkgPwogICAgICAgICAgICAgICAgICAgIGVsZW0uY2xvbmVOb2RlKCB0cnVlICkgOgogICAgICAgICAgICAgICAgICAgIHNoaW1DbG9uZU5vZGUoIGVsZW0gKTsKCiAgICAgICAgICAgIGlmICggKCFqUXVlcnkuc3VwcG9ydC5ub0Nsb25lRXZlbnQgfHwgIWpRdWVyeS5zdXBwb3J0Lm5vQ2xvbmVDaGVja2VkKSAmJgogICAgICAgICAgICAgICAgKGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEpICYmICFqUXVlcnkuaXNYTUxEb2MoZWxlbSkgKSB7CiAgICAgICAgICAgICAgICAvLyBJRSBjb3BpZXMgZXZlbnRzIGJvdW5kIHZpYSBhdHRhY2hFdmVudCB3aGVuIHVzaW5nIGNsb25lTm9kZS4KICAgICAgICAgICAgICAgIC8vIENhbGxpbmcgZGV0YWNoRXZlbnQgb24gdGhlIGNsb25lIHdpbGwgYWxzbyByZW1vdmUgdGhlIGV2ZW50cwogICAgICAgICAgICAgICAgLy8gZnJvbSB0aGUgb3JpZ2luYWwuIEluIG9yZGVyIHRvIGdldCBhcm91bmQgdGhpcywgd2UgdXNlIHNvbWUKICAgICAgICAgICAgICAgIC8vIHByb3ByaWV0YXJ5IG1ldGhvZHMgdG8gY2xlYXIgdGhlIGV2ZW50cy4gVGhhbmtzIHRvIE1vb1Rvb2xzCiAgICAgICAgICAgICAgICAvLyBndXlzIGZvciB0aGlzIGhvdG5lc3MuCgogICAgICAgICAgICAgICAgY2xvbmVGaXhBdHRyaWJ1dGVzKCBlbGVtLCBjbG9uZSApOwoKICAgICAgICAgICAgICAgIC8vIFVzaW5nIFNpenpsZSBoZXJlIGlzIGNyYXp5IHNsb3csIHNvIHdlIHVzZSBnZXRFbGVtZW50c0J5VGFnTmFtZSBpbnN0ZWFkCiAgICAgICAgICAgICAgICBzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApOwogICAgICAgICAgICAgICAgZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApOwoKICAgICAgICAgICAgICAgIC8vIFdlaXJkIGl0ZXJhdGlvbiBiZWNhdXNlIElFIHdpbGwgcmVwbGFjZSB0aGUgbGVuZ3RoIHByb3BlcnR5CiAgICAgICAgICAgICAgICAvLyB3aXRoIGFuIGVsZW1lbnQgaWYgeW91IGFyZSBjbG9uaW5nIHRoZSBib2R5IGFuZCBvbmUgb2YgdGhlCiAgICAgICAgICAgICAgICAvLyBlbGVtZW50cyBvbiB0aGUgcGFnZSBoYXMgYSBuYW1lIG9yIGlkIG9mICJsZW5ndGgiCiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMDsgc3JjRWxlbWVudHNbaV07ICsraSApIHsKICAgICAgICAgICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgZGVzdGluYXRpb24gbm9kZSBpcyBub3QgbnVsbDsgRml4ZXMgIzk1ODcKICAgICAgICAgICAgICAgICAgICBpZiAoIGRlc3RFbGVtZW50c1tpXSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVGaXhBdHRyaWJ1dGVzKCBzcmNFbGVtZW50c1tpXSwgZGVzdEVsZW1lbnRzW2ldICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lCiAgICAgICAgICAgIGlmICggZGF0YUFuZEV2ZW50cyApIHsKICAgICAgICAgICAgICAgIGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApOwoKICAgICAgICAgICAgICAgIGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7CiAgICAgICAgICAgICAgICAgICAgc3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTsKICAgICAgICAgICAgICAgICAgICBkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7CgogICAgICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwOyBzcmNFbGVtZW50c1tpXTsgKytpICkgewogICAgICAgICAgICAgICAgICAgICAgICBjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbaV0sIGRlc3RFbGVtZW50c1tpXSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3JjRWxlbWVudHMgPSBkZXN0RWxlbWVudHMgPSBudWxsOwoKICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0CiAgICAgICAgICAgIHJldHVybiBjbG9uZTsKICAgICAgICB9LAoKICAgICAgICBjbGVhbjogZnVuY3Rpb24oIGVsZW1zLCBjb250ZXh0LCBmcmFnbWVudCwgc2NyaXB0cyApIHsKICAgICAgICAgICAgdmFyIGNoZWNrU2NyaXB0VHlwZTsKCiAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50OwoKICAgICAgICAgICAgLy8gIWNvbnRleHQuY3JlYXRlRWxlbWVudCBmYWlscyBpbiBJRSB3aXRoIGFuIGVycm9yIGJ1dCByZXR1cm5zIHR5cGVvZiAnb2JqZWN0JwogICAgICAgICAgICBpZiAoIHR5cGVvZiBjb250ZXh0LmNyZWF0ZUVsZW1lbnQgPT09ICJ1bmRlZmluZWQiICkgewogICAgICAgICAgICAgICAgY29udGV4dCA9IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0WzBdICYmIGNvbnRleHRbMF0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHJldCA9IFtdLCBqOwoKICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBlbGVtOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7CiAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiBlbGVtID09PSAibnVtYmVyIiApIHsKICAgICAgICAgICAgICAgICAgICBlbGVtICs9ICIiOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICggIWVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gQ29udmVydCBodG1sIHN0cmluZyBpbnRvIERPTSBub2RlcwogICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgZWxlbSA9PT0gInN0cmluZyIgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkgewogICAgICAgICAgICAgICAgICAgICAgICBlbGVtID0gY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpeCAiWEhUTUwiLXN0eWxlIHRhZ3MgaW4gYWxsIGJyb3dzZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnJlcGxhY2UocnhodG1sVGFnLCAiPCQxPjwvJDI+Iik7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmltIHdoaXRlc3BhY2UsIG90aGVyd2lzZSBpbmRleE9mIHdvbid0IHdvcmsgYXMgZXhwZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsiIiwgIiJdIClbMV0udG9Mb3dlckNhc2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwdGggPSB3cmFwWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2ID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCB3cmFwcGVyIGVsZW1lbnQgdG8gdW5rbm93biBlbGVtZW50IHNhZmUgZG9jIGZyYWdtZW50CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY29udGV4dCA9PT0gZG9jdW1lbnQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIGZyYWdtZW50IHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCBmb3IgdGhpcyBkb2N1bWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZUZyYWdtZW50LmFwcGVuZENoaWxkKCBkaXYgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSBhIGZyYWdtZW50IGNyZWF0ZWQgd2l0aCB0aGUgb3duZXIgZG9jdW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNhZmVGcmFnbWVudCggY29udGV4dCApLmFwcGVuZENoaWxkKCBkaXYgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gR28gdG8gaHRtbCBhbmQgYmFjaywgdGhlbiBwZWVsIG9mZiBleHRyYSB3cmFwcGVycwogICAgICAgICAgICAgICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gd3JhcFsxXSArIGVsZW0gKyB3cmFwWzJdOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgcmlnaHQgZGVwdGgKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCBkZXB0aC0tICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2ID0gZGl2Lmxhc3RDaGlsZDsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElFJ3MgYXV0b2luc2VydGVkIDx0Ym9keT4gZnJvbSB0YWJsZSBmcmFnbWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhalF1ZXJ5LnN1cHBvcnQudGJvZHkgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RyaW5nIHdhcyBhIDx0YWJsZT4sICptYXkqIGhhdmUgc3B1cmlvdXMgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc0JvZHkgPSBydGJvZHkudGVzdChlbGVtKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Ym9keSA9IHRhZyA9PT0gInRhYmxlIiAmJiAhaGFzQm9keSA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5maXJzdENoaWxkICYmIGRpdi5maXJzdENoaWxkLmNoaWxkTm9kZXMgOgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RyaW5nIHdhcyBhIGJhcmUgPHRoZWFkPiBvciA8dGZvb3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBbMV0gPT09ICI8dGFibGU+IiAmJiAhaGFzQm9keSA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXYuY2hpbGROb2RlcyA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCBqID0gdGJvZHkubGVuZ3RoIC0gMTsgaiA+PSAwIDsgLS1qICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggalF1ZXJ5Lm5vZGVOYW1lKCB0Ym9keVsgaiBdLCAidGJvZHkiICkgJiYgIXRib2R5WyBqIF0uY2hpbGROb2Rlcy5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRib2R5WyBqIF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGJvZHlbIGogXSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUUgY29tcGxldGVseSBraWxscyBsZWFkaW5nIHdoaXRlc3BhY2Ugd2hlbiBpbm5lckhUTUwgaXMgdXNlZAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC5sZWFkaW5nV2hpdGVzcGFjZSAmJiBybGVhZGluZ1doaXRlc3BhY2UudGVzdCggZWxlbSApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2Lmluc2VydEJlZm9yZSggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggcmxlYWRpbmdXaGl0ZXNwYWNlLmV4ZWMoZWxlbSlbMF0gKSwgZGl2LmZpcnN0Q2hpbGQgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGRpdi5jaGlsZE5vZGVzOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBSZXNldHMgZGVmYXVsdENoZWNrZWQgZm9yIGFueSByYWRpb3MgYW5kIGNoZWNrYm94ZXMKICAgICAgICAgICAgICAgIC8vIGFib3V0IHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBET00gaW4gSUUgNi83ICgjODA2MCkKICAgICAgICAgICAgICAgIHZhciBsZW47CiAgICAgICAgICAgICAgICBpZiAoICFqUXVlcnkuc3VwcG9ydC5hcHBlbmRDaGVja2VkICkgewogICAgICAgICAgICAgICAgICAgIGlmICggZWxlbVswXSAmJiB0eXBlb2YgKGxlbiA9IGVsZW0ubGVuZ3RoKSA9PT0gIm51bWJlciIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIGogPSAwOyBqIDwgbGVuOyBqKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5kSW5wdXRzKCBlbGVtW2pdICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBmaW5kSW5wdXRzKCBlbGVtICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSApIHsKICAgICAgICAgICAgICAgICAgICByZXQucHVzaCggZWxlbSApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXQgPSBqUXVlcnkubWVyZ2UoIHJldCwgZWxlbSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIGZyYWdtZW50ICkgewogICAgICAgICAgICAgICAgY2hlY2tTY3JpcHRUeXBlID0gZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFlbGVtLnR5cGUgfHwgcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlICk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgZm9yICggaSA9IDA7IHJldFtpXTsgaSsrICkgewogICAgICAgICAgICAgICAgICAgIGlmICggc2NyaXB0cyAmJiBqUXVlcnkubm9kZU5hbWUoIHJldFtpXSwgInNjcmlwdCIgKSAmJiAoIXJldFtpXS50eXBlIHx8IHJldFtpXS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICJ0ZXh0L2phdmFzY3JpcHQiKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0cy5wdXNoKCByZXRbaV0ucGFyZW50Tm9kZSA/IHJldFtpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCByZXRbaV0gKSA6IHJldFtpXSApOwoKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJldFtpXS5ub2RlVHlwZSA9PT0gMSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqc1RhZ3MgPSBqUXVlcnkuZ3JlcCggcmV0W2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAic2NyaXB0IiApLCBjaGVja1NjcmlwdFR5cGUgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuc3BsaWNlLmFwcGx5KCByZXQsIFtpICsgMSwgMF0uY29uY2F0KCBqc1RhZ3MgKSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKCByZXRbaV0gKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgfSwKCiAgICAgICAgY2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7CiAgICAgICAgICAgIHZhciBkYXRhLCBpZCwKICAgICAgICAgICAgICAgIGNhY2hlID0galF1ZXJ5LmNhY2hlLAogICAgICAgICAgICAgICAgc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLAogICAgICAgICAgICAgICAgZGVsZXRlRXhwYW5kbyA9IGpRdWVyeS5zdXBwb3J0LmRlbGV0ZUV4cGFuZG87CgogICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGVsZW07IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHsKICAgICAgICAgICAgICAgIGlmICggZWxlbS5ub2RlTmFtZSAmJiBqUXVlcnkubm9EYXRhW2VsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0gKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWQgPSBlbGVtWyBqUXVlcnkuZXhwYW5kbyBdOwoKICAgICAgICAgICAgICAgIGlmICggaWQgKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGNhY2hlWyBpZCBdOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIGRhdGEgJiYgZGF0YS5ldmVudHMgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciB0eXBlIGluIGRhdGEuZXZlbnRzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gTnVsbCB0aGUgRE9NIHJlZmVyZW5jZSB0byBhdm9pZCBJRTYvNy84IGxlYWsgKCM3MDU0KQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRhdGEuaGFuZGxlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5oYW5kbGUuZWxlbSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICggZGVsZXRlRXhwYW5kbyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVsZW1bIGpRdWVyeS5leHBhbmRvIF07CgogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGVsZW0ucmVtb3ZlQXR0cmlidXRlICkgewogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnJlbW92ZUF0dHJpYnV0ZSggalF1ZXJ5LmV4cGFuZG8gKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVsgaWQgXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKICAgIGZ1bmN0aW9uIGV2YWxTY3JpcHQoIGksIGVsZW0gKSB7CiAgICAgICAgaWYgKCBlbGVtLnNyYyApIHsKICAgICAgICAgICAgalF1ZXJ5LmFqYXgoewogICAgICAgICAgICAgICAgdXJsOiBlbGVtLnNyYywKICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZSwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAic2NyaXB0IgogICAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBqUXVlcnkuZ2xvYmFsRXZhbCggKCBlbGVtLnRleHQgfHwgZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVySFRNTCB8fCAiIiApLnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgIi8qJDAqLyIgKSApOwogICAgICAgIH0KCiAgICAgICAgaWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7CiAgICAgICAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApOwogICAgICAgIH0KICAgIH0KCgoKCiAgICB2YXIgcmFscGhhID0gL2FscGhhXChbXildKlwpL2ksCiAgICAgICAgcm9wYWNpdHkgPSAvb3BhY2l0eT0oW14pXSopLywKICAgIC8vIGZpeGVkIGZvciBJRTksIHNlZSAjODM0NgogICAgICAgIHJ1cHBlciA9IC8oW0EtWl18Xm1zKS9nLAogICAgICAgIHJudW1weCA9IC9eLT9cZCsoPzpweCk/JC9pLAogICAgICAgIHJudW0gPSAvXi0/XGQvLAogICAgICAgIHJyZWxOdW0gPSAvXihbXC0rXSk9KFtcLSsuXGRlXSspLywKCiAgICAgICAgY3NzU2hvdyA9IHsgcG9zaXRpb246ICJhYnNvbHV0ZSIsIHZpc2liaWxpdHk6ICJoaWRkZW4iLCBkaXNwbGF5OiAiYmxvY2siIH0sCiAgICAgICAgY3NzV2lkdGggPSBbICJMZWZ0IiwgIlJpZ2h0IiBdLAogICAgICAgIGNzc0hlaWdodCA9IFsgIlRvcCIsICJCb3R0b20iIF0sCiAgICAgICAgY3VyQ1NTLAoKICAgICAgICBnZXRDb21wdXRlZFN0eWxlLAogICAgICAgIGN1cnJlbnRTdHlsZTsKCiAgICBqUXVlcnkuZm4uY3NzID0gZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkgewogICAgICAgIC8vIFNldHRpbmcgJ3VuZGVmaW5lZCcgaXMgYSBuby1vcAogICAgICAgIGlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CgogICAgICAgIHJldHVybiBqUXVlcnkuYWNjZXNzKCB0aGlzLCBuYW1lLCB2YWx1ZSwgdHJ1ZSwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkgewogICAgICAgICAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/CiAgICAgICAgICAgICAgICBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOgogICAgICAgICAgICAgICAgalF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApOwogICAgICAgIH0pOwogICAgfTsKCiAgICBqUXVlcnkuZXh0ZW5kKHsKICAgICAgICAvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHQKICAgICAgICAvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHkKICAgICAgICBjc3NIb29rczogewogICAgICAgICAgICBvcGFjaXR5OiB7CiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIGNvbXB1dGVkICkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCAib3BhY2l0eSIsICJvcGFjaXR5IiApOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0ID09PSAiIiA/ICIxIiA6IHJldDsKCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0uc3R5bGUub3BhY2l0eTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBFeGNsdWRlIHRoZSBmb2xsb3dpbmcgY3NzIHByb3BlcnRpZXMgdG8gYWRkIHB4CiAgICAgICAgY3NzTnVtYmVyOiB7CiAgICAgICAgICAgICJmaWxsT3BhY2l0eSI6IHRydWUsCiAgICAgICAgICAgICJmb250V2VpZ2h0IjogdHJ1ZSwKICAgICAgICAgICAgImxpbmVIZWlnaHQiOiB0cnVlLAogICAgICAgICAgICAib3BhY2l0eSI6IHRydWUsCiAgICAgICAgICAgICJvcnBoYW5zIjogdHJ1ZSwKICAgICAgICAgICAgIndpZG93cyI6IHRydWUsCiAgICAgICAgICAgICJ6SW5kZXgiOiB0cnVlLAogICAgICAgICAgICAiem9vbSI6IHRydWUKICAgICAgICB9LAoKICAgICAgICAvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlCiAgICAgICAgLy8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZQogICAgICAgIGNzc1Byb3BzOiB7CiAgICAgICAgICAgIC8vIG5vcm1hbGl6ZSBmbG9hdCBjc3MgcHJvcGVydHkKICAgICAgICAgICAgImZsb2F0IjogalF1ZXJ5LnN1cHBvcnQuY3NzRmxvYXQgPyAiY3NzRmxvYXQiIDogInN0eWxlRmxvYXQiCiAgICAgICAgfSwKCiAgICAgICAgLy8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGUKICAgICAgICBzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHsKICAgICAgICAgICAgLy8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzCiAgICAgICAgICAgIGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUKICAgICAgICAgICAgdmFyIHJldCwgdHlwZSwgb3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksCiAgICAgICAgICAgICAgICBzdHlsZSA9IGVsZW0uc3R5bGUsIGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdOwoKICAgICAgICAgICAgbmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCBvcmlnTmFtZTsKCiAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZQogICAgICAgICAgICBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICB0eXBlID0gdHlwZW9mIHZhbHVlOwoKICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgcmVsYXRpdmUgbnVtYmVyIHN0cmluZ3MgKCs9IG9yIC09KSB0byByZWxhdGl2ZSBudW1iZXJzLiAjNzM0NQogICAgICAgICAgICAgICAgaWYgKCB0eXBlID09PSAic3RyaW5nIiAmJiAocmV0ID0gcnJlbE51bS5leGVjKCB2YWx1ZSApKSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICggKyggcmV0WzFdICsgMSkgKiArcmV0WzJdICkgKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTsKICAgICAgICAgICAgICAgICAgICAvLyBGaXhlcyBidWcgIzkyMzcKICAgICAgICAgICAgICAgICAgICB0eXBlID0gIm51bWJlciI7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgTmFOIGFuZCBudWxsIHZhbHVlcyBhcmVuJ3Qgc2V0LiBTZWU6ICM3MTE2CiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09IG51bGwgfHwgdHlwZSA9PT0gIm51bWJlciIgJiYgaXNOYU4oIHZhbHVlICkgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCAncHgnIHRvIHRoZSAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKQogICAgICAgICAgICAgICAgaWYgKCB0eXBlID09PSAibnVtYmVyIiAmJiAhalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSApIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSAicHgiOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZQogICAgICAgICAgICAgICAgaWYgKCAhaG9va3MgfHwgISgic2V0IiBpbiBob29rcykgfHwgKHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSApKSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgIC8vIFdyYXBwZWQgdG8gcHJldmVudCBJRSBmcm9tIHRocm93aW5nIGVycm9ycyB3aGVuICdpbnZhbGlkJyB2YWx1ZXMgYXJlIHByb3ZpZGVkCiAgICAgICAgICAgICAgICAgICAgLy8gRml4ZXMgYnVnICM1NTA5CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVbIG5hbWUgXSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkge30KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmUKICAgICAgICAgICAgICAgIGlmICggaG9va3MgJiYgImdldCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdAogICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlWyBuYW1lIF07CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSApIHsKICAgICAgICAgICAgdmFyIHJldCwgaG9va3M7CgogICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUKICAgICAgICAgICAgbmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTsKICAgICAgICAgICAgaG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTsKICAgICAgICAgICAgbmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IG5hbWU7CgogICAgICAgICAgICAvLyBjc3NGbG9hdCBuZWVkcyBhIHNwZWNpYWwgdHJlYXRtZW50CiAgICAgICAgICAgIGlmICggbmFtZSA9PT0gImNzc0Zsb2F0IiApIHsKICAgICAgICAgICAgICAgIG5hbWUgPSAiZmxvYXQiOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZQogICAgICAgICAgICBpZiAoIGhvb2tzICYmICJnZXQiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmV0OwoKICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGN1ckNTUyApIHsKICAgICAgICAgICAgICAgIHJldHVybiBjdXJDU1MoIGVsZW0sIG5hbWUgKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMKICAgICAgICBzd2FwOiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7CiAgICAgICAgICAgIHZhciBvbGQgPSB7fTsKCiAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lcwogICAgICAgICAgICBmb3IgKCB2YXIgbmFtZSBpbiBvcHRpb25zICkgewogICAgICAgICAgICAgICAgb2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07CiAgICAgICAgICAgICAgICBlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoIGVsZW0gKTsKCiAgICAgICAgICAgIC8vIFJldmVydCB0aGUgb2xkIHZhbHVlcwogICAgICAgICAgICBmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7CiAgICAgICAgICAgICAgICBlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKLy8gREVQUkVDQVRFRCwgVXNlIGpRdWVyeS5jc3MoKSBpbnN0ZWFkCiAgICBqUXVlcnkuY3VyQ1NTID0galF1ZXJ5LmNzczsKCiAgICBqUXVlcnkuZWFjaChbImhlaWdodCIsICJ3aWR0aCJdLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKICAgICAgICBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHsKICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkgewogICAgICAgICAgICAgICAgdmFyIHZhbDsKCiAgICAgICAgICAgICAgICBpZiAoIGNvbXB1dGVkICkgewogICAgICAgICAgICAgICAgICAgIGlmICggZWxlbS5vZmZzZXRXaWR0aCAhPT0gMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFdIKCBlbGVtLCBuYW1lLCBleHRyYSApOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5zd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IGdldFdIKCBlbGVtLCBuYW1lLCBleHRyYSApOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKICAgICAgICAgICAgICAgIGlmICggcm51bXB4LnRlc3QoIHZhbHVlICkgKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIG5lZ2F0aXZlIHdpZHRoIGFuZCBoZWlnaHQgdmFsdWVzICMxNTk5CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KCB2YWx1ZSApOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID49IDAgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSArICJweCI7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH0pOwoKICAgIGlmICggIWpRdWVyeS5zdXBwb3J0Lm9wYWNpdHkgKSB7CiAgICAgICAgalF1ZXJ5LmNzc0hvb2tzLm9wYWNpdHkgPSB7CiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkgewogICAgICAgICAgICAgICAgLy8gSUUgdXNlcyBmaWx0ZXJzIGZvciBvcGFjaXR5CiAgICAgICAgICAgICAgICByZXR1cm4gcm9wYWNpdHkudGVzdCggKGNvbXB1dGVkICYmIGVsZW0uY3VycmVudFN0eWxlID8gZWxlbS5jdXJyZW50U3R5bGUuZmlsdGVyIDogZWxlbS5zdHlsZS5maWx0ZXIpIHx8ICIiICkgPwogICAgICAgICAgICAgICAgICAgICggcGFyc2VGbG9hdCggUmVnRXhwLiQxICkgLyAxMDAgKSArICIiIDoKICAgICAgICAgICAgICAgICAgICBjb21wdXRlZCA/ICIxIiA6ICIiOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7CiAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSBlbGVtLnN0eWxlLAogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdHlsZSA9IGVsZW0uY3VycmVudFN0eWxlLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHkgPSBqUXVlcnkuaXNOdW1lcmljKCB2YWx1ZSApID8gImFscGhhKG9wYWNpdHk9IiArIHZhbHVlICogMTAwICsgIikiIDogIiIsCiAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gY3VycmVudFN0eWxlICYmIGN1cnJlbnRTdHlsZS5maWx0ZXIgfHwgc3R5bGUuZmlsdGVyIHx8ICIiOwoKICAgICAgICAgICAgICAgIC8vIElFIGhhcyB0cm91YmxlIHdpdGggb3BhY2l0eSBpZiBpdCBkb2VzIG5vdCBoYXZlIGxheW91dAogICAgICAgICAgICAgICAgLy8gRm9yY2UgaXQgYnkgc2V0dGluZyB0aGUgem9vbSBsZXZlbAogICAgICAgICAgICAgICAgc3R5bGUuem9vbSA9IDE7CgogICAgICAgICAgICAgICAgLy8gaWYgc2V0dGluZyBvcGFjaXR5IHRvIDEsIGFuZCBubyBvdGhlciBmaWx0ZXJzIGV4aXN0IC0gYXR0ZW1wdCB0byByZW1vdmUgZmlsdGVyIGF0dHJpYnV0ZSAjNjY1MgogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA+PSAxICYmIGpRdWVyeS50cmltKCBmaWx0ZXIucmVwbGFjZSggcmFscGhhLCAiIiApICkgPT09ICIiICkgewoKICAgICAgICAgICAgICAgICAgICAvLyBTZXR0aW5nIHN0eWxlLmZpbHRlciB0byBudWxsLCAiIiAmICIgIiBzdGlsbCBsZWF2ZSAiZmlsdGVyOiIgaW4gdGhlIGNzc1RleHQKICAgICAgICAgICAgICAgICAgICAvLyBpZiAiZmlsdGVyOiIgaXMgcHJlc2VudCBhdCBhbGwsIGNsZWFyVHlwZSBpcyBkaXNhYmxlZCwgd2Ugd2FudCB0byBhdm9pZCB0aGlzCiAgICAgICAgICAgICAgICAgICAgLy8gc3R5bGUucmVtb3ZlQXR0cmlidXRlIGlzIElFIE9ubHksIGJ1dCBzbyBhcHBhcmVudGx5IGlzIHRoaXMgY29kZSBwYXRoLi4uCiAgICAgICAgICAgICAgICAgICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCAiZmlsdGVyIiApOwoKICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSB0aGVyZSBpcyBubyBmaWx0ZXIgc3R5bGUgYXBwbGllZCBpbiBhIGNzcyBydWxlLCB3ZSBhcmUgZG9uZQogICAgICAgICAgICAgICAgICAgIGlmICggY3VycmVudFN0eWxlICYmICFjdXJyZW50U3R5bGUuZmlsdGVyICkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgc2V0IG5ldyBmaWx0ZXIgdmFsdWVzCiAgICAgICAgICAgICAgICBzdHlsZS5maWx0ZXIgPSByYWxwaGEudGVzdCggZmlsdGVyICkgPwogICAgICAgICAgICAgICAgICAgIGZpbHRlci5yZXBsYWNlKCByYWxwaGEsIG9wYWNpdHkgKSA6CiAgICAgICAgICAgICAgICAgICAgZmlsdGVyICsgIiAiICsgb3BhY2l0eTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgalF1ZXJ5KGZ1bmN0aW9uKCkgewogICAgICAgIC8vIFRoaXMgaG9vayBjYW5ub3QgYmUgYWRkZWQgdW50aWwgRE9NIHJlYWR5IGJlY2F1c2UgdGhlIHN1cHBvcnQgdGVzdAogICAgICAgIC8vIGZvciBpdCBpcyBub3QgcnVuIHVudGlsIGFmdGVyIERPTSByZWFkeQogICAgICAgIGlmICggIWpRdWVyeS5zdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQgKSB7CiAgICAgICAgICAgIGpRdWVyeS5jc3NIb29rcy5tYXJnaW5SaWdodCA9IHsKICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkgewogICAgICAgICAgICAgICAgICAgIC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodAogICAgICAgICAgICAgICAgICAgIC8vIFdvcmsgYXJvdW5kIGJ5IHRlbXBvcmFyaWx5IHNldHRpbmcgZWxlbWVudCBkaXNwbGF5IHRvIGlubGluZS1ibG9jawogICAgICAgICAgICAgICAgICAgIHZhciByZXQ7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnN3YXAoIGVsZW0sIHsgImRpc3BsYXkiOiAiaW5saW5lLWJsb2NrIiB9LCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjb21wdXRlZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IGN1ckNTUyggZWxlbSwgIm1hcmdpbi1yaWdodCIsICJtYXJnaW5SaWdodCIgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IGVsZW0uc3R5bGUubWFyZ2luUmlnaHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgIH0KICAgIH0pOwoKICAgIGlmICggZG9jdW1lbnQuZGVmYXVsdFZpZXcgJiYgZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSApIHsKICAgICAgICBnZXRDb21wdXRlZFN0eWxlID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7CiAgICAgICAgICAgIHZhciByZXQsIGRlZmF1bHRWaWV3LCBjb21wdXRlZFN0eWxlOwoKICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSggcnVwcGVyLCAiLSQxIiApLnRvTG93ZXJDYXNlKCk7CgogICAgICAgICAgICBpZiAoIChkZWZhdWx0VmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgJiYKICAgICAgICAgICAgICAgIChjb21wdXRlZFN0eWxlID0gZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApKSApIHsKICAgICAgICAgICAgICAgIHJldCA9IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApOwogICAgICAgICAgICAgICAgaWYgKCByZXQgPT09ICIiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGVsZW0gKSApIHsKICAgICAgICAgICAgICAgICAgICByZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICB9OwogICAgfQoKICAgIGlmICggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSApIHsKICAgICAgICBjdXJyZW50U3R5bGUgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHsKICAgICAgICAgICAgdmFyIGxlZnQsIHJzTGVmdCwgdW5jb21wdXRlZCwKICAgICAgICAgICAgICAgIHJldCA9IGVsZW0uY3VycmVudFN0eWxlICYmIGVsZW0uY3VycmVudFN0eWxlWyBuYW1lIF0sCiAgICAgICAgICAgICAgICBzdHlsZSA9IGVsZW0uc3R5bGU7CgogICAgICAgICAgICAvLyBBdm9pZCBzZXR0aW5nIHJldCB0byBlbXB0eSBzdHJpbmcgaGVyZQogICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBkZWZhdWx0IHRvIGF1dG8KICAgICAgICAgICAgaWYgKCByZXQgPT09IG51bGwgJiYgc3R5bGUgJiYgKHVuY29tcHV0ZWQgPSBzdHlsZVsgbmFtZSBdKSApIHsKICAgICAgICAgICAgICAgIHJldCA9IHVuY29tcHV0ZWQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEZyb20gdGhlIGF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHMKICAgICAgICAgICAgLy8gaHR0cDovL2VyaWsuZWFlLm5ldC9hcmNoaXZlcy8yMDA3LzA3LzI3LzE4LjU0LjE1LyNjb21tZW50LTEwMjI5MQoKICAgICAgICAgICAgLy8gSWYgd2UncmUgbm90IGRlYWxpbmcgd2l0aCBhIHJlZ3VsYXIgcGl4ZWwgbnVtYmVyCiAgICAgICAgICAgIC8vIGJ1dCBhIG51bWJlciB0aGF0IGhhcyBhIHdlaXJkIGVuZGluZywgd2UgbmVlZCB0byBjb252ZXJ0IGl0IHRvIHBpeGVscwogICAgICAgICAgICBpZiAoICFybnVtcHgudGVzdCggcmV0ICkgJiYgcm51bS50ZXN0KCByZXQgKSApIHsKCiAgICAgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzCiAgICAgICAgICAgICAgICBsZWZ0ID0gc3R5bGUubGVmdDsKICAgICAgICAgICAgICAgIHJzTGVmdCA9IGVsZW0ucnVudGltZVN0eWxlICYmIGVsZW0ucnVudGltZVN0eWxlLmxlZnQ7CgogICAgICAgICAgICAgICAgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dAogICAgICAgICAgICAgICAgaWYgKCByc0xlZnQgKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbS5ydW50aW1lU3R5bGUubGVmdCA9IGVsZW0uY3VycmVudFN0eWxlLmxlZnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzdHlsZS5sZWZ0ID0gbmFtZSA9PT0gImZvbnRTaXplIiA/ICIxZW0iIDogKCByZXQgfHwgMCApOwogICAgICAgICAgICAgICAgcmV0ID0gc3R5bGUucGl4ZWxMZWZ0ICsgInB4IjsKCiAgICAgICAgICAgICAgICAvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzCiAgICAgICAgICAgICAgICBzdHlsZS5sZWZ0ID0gbGVmdDsKICAgICAgICAgICAgICAgIGlmICggcnNMZWZ0ICkgewogICAgICAgICAgICAgICAgICAgIGVsZW0ucnVudGltZVN0eWxlLmxlZnQgPSByc0xlZnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZXQgPT09ICIiID8gImF1dG8iIDogcmV0OwogICAgICAgIH07CiAgICB9CgogICAgY3VyQ1NTID0gZ2V0Q29tcHV0ZWRTdHlsZSB8fCBjdXJyZW50U3R5bGU7CgogICAgZnVuY3Rpb24gZ2V0V0goIGVsZW0sIG5hbWUsIGV4dHJhICkgewoKICAgICAgICAvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eQogICAgICAgIHZhciB2YWwgPSBuYW1lID09PSAid2lkdGgiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LAogICAgICAgICAgICB3aGljaCA9IG5hbWUgPT09ICJ3aWR0aCIgPyBjc3NXaWR0aCA6IGNzc0hlaWdodCwKICAgICAgICAgICAgaSA9IDAsCiAgICAgICAgICAgIGxlbiA9IHdoaWNoLmxlbmd0aDsKCiAgICAgICAgaWYgKCB2YWwgPiAwICkgewogICAgICAgICAgICBpZiAoIGV4dHJhICE9PSAiYm9yZGVyIiApIHsKICAgICAgICAgICAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkgewogICAgICAgICAgICAgICAgICAgIGlmICggIWV4dHJhICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YWwgLT0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgInBhZGRpbmciICsgd2hpY2hbIGkgXSApICkgfHwgMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCBleHRyYSA9PT0gIm1hcmdpbiIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCArPSBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIHdoaWNoWyBpIF0gKSApIHx8IDA7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsIC09IHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoIGVsZW0sICJib3JkZXIiICsgd2hpY2hbIGkgXSArICJXaWR0aCIgKSApIHx8IDA7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdmFsICsgInB4IjsKICAgICAgICB9CgogICAgICAgIC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeQogICAgICAgIHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgbmFtZSApOwogICAgICAgIGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHsKICAgICAgICAgICAgdmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdIHx8IDA7CiAgICAgICAgfQogICAgICAgIC8vIE5vcm1hbGl6ZSAiIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhCiAgICAgICAgdmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDsKCiAgICAgICAgLy8gQWRkIHBhZGRpbmcsIGJvcmRlciwgbWFyZ2luCiAgICAgICAgaWYgKCBleHRyYSApIHsKICAgICAgICAgICAgZm9yICggOyBpIDwgbGVuOyBpKysgKSB7CiAgICAgICAgICAgICAgICB2YWwgKz0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgInBhZGRpbmciICsgd2hpY2hbIGkgXSApICkgfHwgMDsKICAgICAgICAgICAgICAgIGlmICggZXh0cmEgIT09ICJwYWRkaW5nIiApIHsKICAgICAgICAgICAgICAgICAgICB2YWwgKz0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgImJvcmRlciIgKyB3aGljaFsgaSBdICsgIldpZHRoIiApICkgfHwgMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggZXh0cmEgPT09ICJtYXJnaW4iICkgewogICAgICAgICAgICAgICAgICAgIHZhbCArPSBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIHdoaWNoWyBpIF0gKSApIHx8IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB2YWwgKyAicHgiOwogICAgfQoKICAgIGlmICggalF1ZXJ5LmV4cHIgJiYgalF1ZXJ5LmV4cHIuZmlsdGVycyApIHsKICAgICAgICBqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICB2YXIgd2lkdGggPSBlbGVtLm9mZnNldFdpZHRoLAogICAgICAgICAgICAgICAgaGVpZ2h0ID0gZWxlbS5vZmZzZXRIZWlnaHQ7CgogICAgICAgICAgICByZXR1cm4gKCB3aWR0aCA9PT0gMCAmJiBoZWlnaHQgPT09IDAgKSB8fCAoIWpRdWVyeS5zdXBwb3J0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cyAmJiAoKGVsZW0uc3R5bGUgJiYgZWxlbS5zdHlsZS5kaXNwbGF5KSB8fCBqUXVlcnkuY3NzKCBlbGVtLCAiZGlzcGxheSIgKSkgPT09ICJub25lIik7CiAgICAgICAgfTsKCiAgICAgICAgalF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7CiAgICAgICAgICAgIHJldHVybiAhalF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4oIGVsZW0gKTsKICAgICAgICB9OwogICAgfQoKCgoKICAgIHZhciByMjAgPSAvJTIwL2csCiAgICAgICAgcmJyYWNrZXQgPSAvXFtcXSQvLAogICAgICAgIHJDUkxGID0gL1xyP1xuL2csCiAgICAgICAgcmhhc2ggPSAvIy4qJC8sCiAgICAgICAgcmhlYWRlcnMgPSAvXiguKj8pOlsgXHRdKihbXlxyXG5dKilccj8kL21nLCAvLyBJRSBsZWF2ZXMgYW4gXHIgY2hhcmFjdGVyIGF0IEVPTAogICAgICAgIHJpbnB1dCA9IC9eKD86Y29sb3J8ZGF0ZXxkYXRldGltZXxkYXRldGltZS1sb2NhbHxlbWFpbHxoaWRkZW58bW9udGh8bnVtYmVyfHBhc3N3b3JkfHJhbmdlfHNlYXJjaHx0ZWx8dGV4dHx0aW1lfHVybHx3ZWVrKSQvaSwKICAgIC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvbgogICAgICAgIHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwXC1zdG9yYWdlfC4rXC1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLywKICAgICAgICBybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLywKICAgICAgICBycHJvdG9jb2wgPSAvXlwvXC8vLAogICAgICAgIHJxdWVyeSA9IC9cPy8sCiAgICAgICAgcnNjcmlwdCA9IC88c2NyaXB0XGJbXjxdKig/Oig/ITxcL3NjcmlwdD4pPFtePF0qKSo8XC9zY3JpcHQ+L2dpLAogICAgICAgIHJzZWxlY3RUZXh0YXJlYSA9IC9eKD86c2VsZWN0fHRleHRhcmVhKS9pLAogICAgICAgIHJzcGFjZXNBamF4ID0gL1xzKy8sCiAgICAgICAgcnRzID0gLyhbPyZdKV89W14mXSovLAogICAgICAgIHJ1cmwgPSAvXihbXHdcK1wuXC1dKzopKD86XC9cLyhbXlwvPyM6XSopKD86OihcZCspKT8pPy8sCgogICAgLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZAogICAgICAgIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQsCgogICAgLyogUHJlZmlsdGVycwogICAgICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSkKICAgICAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6CiAgICAgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0CiAgICAgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpCiAgICAgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlCiAgICAgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sICIqIiBjYW4gYmUgdXNlZAogICAgICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byAiKiIgaWYgbmVlZGVkCiAgICAgKi8KICAgICAgICBwcmVmaWx0ZXJzID0ge30sCgogICAgLyogVHJhbnNwb3J0cyBiaW5kaW5ncwogICAgICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZQogICAgICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCAiKiIgY2FuIGJlIHVzZWQKICAgICAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvICIqIiBpZiBuZWVkZWQKICAgICAqLwogICAgICAgIHRyYW5zcG9ydHMgPSB7fSwKCiAgICAvLyBEb2N1bWVudCBsb2NhdGlvbgogICAgICAgIGFqYXhMb2NhdGlvbiwKCiAgICAvLyBEb2N1bWVudCBsb2NhdGlvbiBzZWdtZW50cwogICAgICAgIGFqYXhMb2NQYXJ0cywKCiAgICAvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb24KICAgICAgICBhbGxUeXBlcyA9IFsiKi8iXSArIFsiKiJdOwoKLy8gIzgxMzgsIElFIG1heSB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiBhY2Nlc3NpbmcKLy8gYSBmaWVsZCBmcm9tIHdpbmRvdy5sb2NhdGlvbiBpZiBkb2N1bWVudC5kb21haW4gaGFzIGJlZW4gc2V0CiAgICB0cnkgewogICAgICAgIGFqYXhMb2NhdGlvbiA9IGxvY2F0aW9uLmhyZWY7CiAgICB9IGNhdGNoKCBlICkgewogICAgICAgIC8vIFVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUgb2YgYW4gQSBlbGVtZW50CiAgICAgICAgLy8gc2luY2UgSUUgd2lsbCBtb2RpZnkgaXQgZ2l2ZW4gZG9jdW1lbnQubG9jYXRpb24KICAgICAgICBhamF4TG9jYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiYSIgKTsKICAgICAgICBhamF4TG9jYXRpb24uaHJlZiA9ICIiOwogICAgICAgIGFqYXhMb2NhdGlvbiA9IGFqYXhMb2NhdGlvbi5ocmVmOwogICAgfQoKLy8gU2VnbWVudCBsb2NhdGlvbiBpbnRvIHBhcnRzCiAgICBhamF4TG9jUGFydHMgPSBydXJsLmV4ZWMoIGFqYXhMb2NhdGlvbi50b0xvd2VyQ2FzZSgpICkgfHwgW107CgovLyBCYXNlICJjb25zdHJ1Y3RvciIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydAogICAgZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7CgogICAgICAgIC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gIioiCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7CgogICAgICAgICAgICBpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09ICJzdHJpbmciICkgewogICAgICAgICAgICAgICAgZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjsKICAgICAgICAgICAgICAgIGRhdGFUeXBlRXhwcmVzc2lvbiA9ICIqIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkgewogICAgICAgICAgICAgICAgdmFyIGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLnNwbGl0KCByc3BhY2VzQWpheCApLAogICAgICAgICAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IGRhdGFUeXBlcy5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGUsCiAgICAgICAgICAgICAgICAgICAgbGlzdCwKICAgICAgICAgICAgICAgICAgICBwbGFjZUJlZm9yZTsKCiAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uCiAgICAgICAgICAgICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSBdOwogICAgICAgICAgICAgICAgICAgIC8vIFdlIGNvbnRyb2wgaWYgd2UncmUgYXNrZWQgdG8gYWRkIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIC8vIGFueSBleGlzdGluZyBlbGVtZW50CiAgICAgICAgICAgICAgICAgICAgcGxhY2VCZWZvcmUgPSAvXlwrLy50ZXN0KCBkYXRhVHlwZSApOwogICAgICAgICAgICAgICAgICAgIGlmICggcGxhY2VCZWZvcmUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlID0gZGF0YVR5cGUuc3Vic3RyKCAxICkgfHwgIioiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsaXN0ID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdOwogICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gd2UgYWRkIHRvIHRoZSBzdHJ1Y3R1cmUgYWNjb3JkaW5nbHkKICAgICAgICAgICAgICAgICAgICBsaXN0WyBwbGFjZUJlZm9yZSA/ICJ1bnNoaWZ0IiA6ICJwdXNoIiBdKCBmdW5jICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzCiAgICBmdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlIC8qIGludGVybmFsICovLCBpbnNwZWN0ZWQgLyogaW50ZXJuYWwgKi8gKSB7CgogICAgICAgIGRhdGFUeXBlID0gZGF0YVR5cGUgfHwgb3B0aW9ucy5kYXRhVHlwZXNbIDAgXTsKICAgICAgICBpbnNwZWN0ZWQgPSBpbnNwZWN0ZWQgfHwge307CgogICAgICAgIGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7CgogICAgICAgIHZhciBsaXN0ID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdLAogICAgICAgICAgICBpID0gMCwKICAgICAgICAgICAgbGVuZ3RoID0gbGlzdCA/IGxpc3QubGVuZ3RoIDogMCwKICAgICAgICAgICAgZXhlY3V0ZU9ubHkgPSAoIHN0cnVjdHVyZSA9PT0gcHJlZmlsdGVycyApLAogICAgICAgICAgICBzZWxlY3Rpb247CgogICAgICAgIGZvciAoIDsgaSA8IGxlbmd0aCAmJiAoIGV4ZWN1dGVPbmx5IHx8ICFzZWxlY3Rpb24gKTsgaSsrICkgewogICAgICAgICAgICBzZWxlY3Rpb24gPSBsaXN0WyBpIF0oIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTsKICAgICAgICAgICAgLy8gSWYgd2UgZ290IHJlZGlyZWN0ZWQgdG8gYW5vdGhlciBkYXRhVHlwZQogICAgICAgICAgICAvLyB3ZSB0cnkgdGhlcmUgaWYgZXhlY3V0aW5nIG9ubHkgYW5kIG5vdCBkb25lIGFscmVhZHkKICAgICAgICAgICAgaWYgKCB0eXBlb2Ygc2VsZWN0aW9uID09PSAic3RyaW5nIiApIHsKICAgICAgICAgICAgICAgIGlmICggIWV4ZWN1dGVPbmx5IHx8IGluc3BlY3RlZFsgc2VsZWN0aW9uIF0gKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBzZWxlY3Rpb24gKTsKICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cygKICAgICAgICAgICAgICAgICAgICAgICAgc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSLCBzZWxlY3Rpb24sIGluc3BlY3RlZCApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIElmIHdlJ3JlIG9ubHkgZXhlY3V0aW5nIG9yIG5vdGhpbmcgd2FzIHNlbGVjdGVkCiAgICAgICAgLy8gd2UgdHJ5IHRoZSBjYXRjaGFsbCBkYXRhVHlwZSBpZiBub3QgZG9uZSBhbHJlYWR5CiAgICAgICAgaWYgKCAoIGV4ZWN1dGVPbmx5IHx8ICFzZWxlY3Rpb24gKSAmJiAhaW5zcGVjdGVkWyAiKiIgXSApIHsKICAgICAgICAgICAgc2VsZWN0aW9uID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoCiAgICAgICAgICAgICAgICBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIsICIqIiwgaW5zcGVjdGVkICk7CiAgICAgICAgfQogICAgICAgIC8vIHVubmVjZXNzYXJ5IHdoZW4gb25seSBleGVjdXRpbmcgKHByZWZpbHRlcnMpCiAgICAgICAgLy8gYnV0IGl0J2xsIGJlIGlnbm9yZWQgYnkgdGhlIGNhbGxlciBpbiB0aGF0IGNhc2UKICAgICAgICByZXR1cm4gc2VsZWN0aW9uOwogICAgfQoKLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zCi8vIHRoYXQgdGFrZXMgImZsYXQiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKQovLyBGaXhlcyAjOTg4NwogICAgZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7CiAgICAgICAgdmFyIGtleSwgZGVlcCwKICAgICAgICAgICAgZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9OwogICAgICAgIGZvciAoIGtleSBpbiBzcmMgKSB7CiAgICAgICAgICAgIGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgKCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIGRlZXAgKSB7CiAgICAgICAgICAgIGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApOwogICAgICAgIH0KICAgIH0KCiAgICBqUXVlcnkuZm4uZXh0ZW5kKHsKICAgICAgICBsb2FkOiBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkgewogICAgICAgICAgICBpZiAoIHR5cGVvZiB1cmwgIT09ICJzdHJpbmciICYmIF9sb2FkICkgewogICAgICAgICAgICAgICAgcmV0dXJuIF9sb2FkLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCiAgICAgICAgICAgICAgICAvLyBEb24ndCBkbyBhIHJlcXVlc3QgaWYgbm8gZWxlbWVudHMgYXJlIGJlaW5nIHJlcXVlc3RlZAogICAgICAgICAgICB9IGVsc2UgaWYgKCAhdGhpcy5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIG9mZiA9IHVybC5pbmRleE9mKCAiICIgKTsKICAgICAgICAgICAgaWYgKCBvZmYgPj0gMCApIHsKICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHVybC5zbGljZSggb2ZmLCB1cmwubGVuZ3RoICk7CiAgICAgICAgICAgICAgICB1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGEgR0VUIHJlcXVlc3QKICAgICAgICAgICAgdmFyIHR5cGUgPSAiR0VUIjsKCiAgICAgICAgICAgIC8vIElmIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHdhcyBwcm92aWRlZAogICAgICAgICAgICBpZiAoIHBhcmFtcyApIHsKICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgYSBmdW5jdGlvbgogICAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2sKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHBhcmFtczsKICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSB1bmRlZmluZWQ7CgogICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmcKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiBwYXJhbXMgPT09ICJvYmplY3QiICkgewogICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IGpRdWVyeS5wYXJhbSggcGFyYW1zLCBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsICk7CiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICJQT1NUIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgICAgICAgLy8gUmVxdWVzdCB0aGUgcmVtb3RlIGRvY3VtZW50CiAgICAgICAgICAgIGpRdWVyeS5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgdHlwZTogdHlwZSwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAiaHRtbCIsCiAgICAgICAgICAgICAgICBkYXRhOiBwYXJhbXMsCiAgICAgICAgICAgICAgICAvLyBDb21wbGV0ZSBjYWxsYmFjayAocmVzcG9uc2VUZXh0IGlzIHVzZWQgaW50ZXJuYWxseSkKICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigganFYSFIsIHN0YXR1cywgcmVzcG9uc2VUZXh0ICkgewogICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIHRoZSByZXNwb25zZSBhcyBzcGVjaWZpZWQgYnkgdGhlIGpxWEhSIG9iamVjdAogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVGV4dCA9IGpxWEhSLnJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgICAgICAgICAvLyBJZiBzdWNjZXNzZnVsLCBpbmplY3QgdGhlIEhUTUwgaW50byBhbGwgdGhlIG1hdGNoZWQgZWxlbWVudHMKICAgICAgICAgICAgICAgICAgICBpZiAoIGpxWEhSLmlzUmVzb2x2ZWQoKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gIzQ4MjU6IEdldCB0aGUgYWN0dWFsIHJlc3BvbnNlIGluIGNhc2UKICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBkYXRhRmlsdGVyIGlzIHByZXNlbnQgaW4gYWpheFNldHRpbmdzCiAgICAgICAgICAgICAgICAgICAgICAgIGpxWEhSLmRvbmUoZnVuY3Rpb24oIHIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVRleHQgPSByOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2VlIGlmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZAogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmh0bWwoIHNlbGVjdG9yID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGR1bW15IGRpdiB0byBob2xkIHRoZSByZXN1bHRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoIjxkaXY+IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmplY3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBkb2N1bWVudCBpbiwgcmVtb3ZpbmcgdGhlIHNjcmlwdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhdm9pZCBhbnkgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnMgaW4gSUUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKHJlc3BvbnNlVGV4dC5yZXBsYWNlKHJzY3JpcHQsICIiKSkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9jYXRlIHRoZSBzcGVjaWZpZWQgZWxlbWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZChzZWxlY3RvcikgOgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG5vdCwganVzdCBpbmplY3QgdGhlIGZ1bGwgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVRleHQgKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICggY2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZWFjaCggY2FsbGJhY2ssIFsgcmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7CiAgICAgICAgfSwKCiAgICAgICAgc2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggdGhpcy5lbGVtZW50cyApIDogdGhpczsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lICYmICF0aGlzLmRpc2FibGVkICYmCiAgICAgICAgICAgICAgICAgICAgICAgICggdGhpcy5jaGVja2VkIHx8IHJzZWxlY3RUZXh0YXJlYS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpbnB1dC50ZXN0KCB0aGlzLnR5cGUgKSApOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oIGksIGVsZW0gKXsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwgPT0gbnVsbCA/CiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgOgogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuaXNBcnJheSggdmFsICkgPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsLCBpICl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCAiXHJcbiIgKSB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOgogICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgIlxyXG4iICkgfTsKICAgICAgICAgICAgICAgIH0pLmdldCgpOwogICAgICAgIH0KICAgIH0pOwoKLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHMKICAgIGpRdWVyeS5lYWNoKCAiYWpheFN0YXJ0IGFqYXhTdG9wIGFqYXhDb21wbGV0ZSBhamF4RXJyb3IgYWpheFN1Y2Nlc3MgYWpheFNlbmQiLnNwbGl0KCAiICIgKSwgZnVuY3Rpb24oIGksIG8gKXsKICAgICAgICBqUXVlcnkuZm5bIG8gXSA9IGZ1bmN0aW9uKCBmICl7CiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uKCBvLCBmICk7CiAgICAgICAgfTsKICAgIH0pOwoKICAgIGpRdWVyeS5lYWNoKCBbICJnZXQiLCAicG9zdCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHsKICAgICAgICBqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7CiAgICAgICAgICAgIC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkCiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHsKICAgICAgICAgICAgICAgIHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrOwogICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBkYXRhOwogICAgICAgICAgICAgICAgZGF0YSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6IG1ldGhvZCwKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrLAogICAgICAgICAgICAgICAgZGF0YVR5cGU6IHR5cGUKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgIH0pOwoKICAgIGpRdWVyeS5leHRlbmQoewoKICAgICAgICBnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkgewogICAgICAgICAgICByZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCAic2NyaXB0IiApOwogICAgICAgIH0sCgogICAgICAgIGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkgewogICAgICAgICAgICByZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgImpzb24iICk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXQKICAgICAgICAvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuCiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy4KICAgICAgICBhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkgewogICAgICAgICAgICBpZiAoIHNldHRpbmdzICkgewogICAgICAgICAgICAgICAgLy8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3QKICAgICAgICAgICAgICAgIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5ncwogICAgICAgICAgICAgICAgc2V0dGluZ3MgPSB0YXJnZXQ7CiAgICAgICAgICAgICAgICB0YXJnZXQgPSBqUXVlcnkuYWpheFNldHRpbmdzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFqYXhFeHRlbmQoIHRhcmdldCwgc2V0dGluZ3MgKTsKICAgICAgICAgICAgcmV0dXJuIHRhcmdldDsKICAgICAgICB9LAoKICAgICAgICBhamF4U2V0dGluZ3M6IHsKICAgICAgICAgICAgdXJsOiBhamF4TG9jYXRpb24sCiAgICAgICAgICAgIGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGFqYXhMb2NQYXJ0c1sgMSBdICksCiAgICAgICAgICAgIGdsb2JhbDogdHJ1ZSwKICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwKICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IHRydWUsCiAgICAgICAgICAgIGFzeW5jOiB0cnVlLAogICAgICAgICAgICAvKgogICAgICAgICAgICAgdGltZW91dDogMCwKICAgICAgICAgICAgIGRhdGE6IG51bGwsCiAgICAgICAgICAgICBkYXRhVHlwZTogbnVsbCwKICAgICAgICAgICAgIHVzZXJuYW1lOiBudWxsLAogICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsCiAgICAgICAgICAgICBjYWNoZTogbnVsbCwKICAgICAgICAgICAgIHRyYWRpdGlvbmFsOiBmYWxzZSwKICAgICAgICAgICAgIGhlYWRlcnM6IHt9LAogICAgICAgICAgICAgKi8KCiAgICAgICAgICAgIGFjY2VwdHM6IHsKICAgICAgICAgICAgICAgIHhtbDogImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwiLAogICAgICAgICAgICAgICAgaHRtbDogInRleHQvaHRtbCIsCiAgICAgICAgICAgICAgICB0ZXh0OiAidGV4dC9wbGFpbiIsCiAgICAgICAgICAgICAgICBqc29uOiAiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0IiwKICAgICAgICAgICAgICAgICIqIjogYWxsVHlwZXMKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNvbnRlbnRzOiB7CiAgICAgICAgICAgICAgICB4bWw6IC94bWwvLAogICAgICAgICAgICAgICAgaHRtbDogL2h0bWwvLAogICAgICAgICAgICAgICAganNvbjogL2pzb24vCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICByZXNwb25zZUZpZWxkczogewogICAgICAgICAgICAgICAgeG1sOiAicmVzcG9uc2VYTUwiLAogICAgICAgICAgICAgICAgdGV4dDogInJlc3BvbnNlVGV4dCIKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIExpc3Qgb2YgZGF0YSBjb252ZXJ0ZXJzCiAgICAgICAgICAgIC8vIDEpIGtleSBmb3JtYXQgaXMgInNvdXJjZV90eXBlIGRlc3RpbmF0aW9uX3R5cGUiIChhIHNpbmdsZSBzcGFjZSBpbi1iZXR3ZWVuKQogICAgICAgICAgICAvLyAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sICIqIiBjYW4gYmUgdXNlZCBmb3Igc291cmNlX3R5cGUKICAgICAgICAgICAgY29udmVydGVyczogewoKICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dAogICAgICAgICAgICAgICAgIiogdGV4dCI6IHdpbmRvdy5TdHJpbmcsCgogICAgICAgICAgICAgICAgLy8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pCiAgICAgICAgICAgICAgICAidGV4dCBodG1sIjogdHJ1ZSwKCiAgICAgICAgICAgICAgICAvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uCiAgICAgICAgICAgICAgICAidGV4dCBqc29uIjogalF1ZXJ5LnBhcnNlSlNPTiwKCiAgICAgICAgICAgICAgICAvLyBQYXJzZSB0ZXh0IGFzIHhtbAogICAgICAgICAgICAgICAgInRleHQgeG1sIjogalF1ZXJ5LnBhcnNlWE1MCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOgogICAgICAgICAgICAvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmCiAgICAgICAgICAgIC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlCiAgICAgICAgICAgIC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKQogICAgICAgICAgICBmbGF0T3B0aW9uczogewogICAgICAgICAgICAgICAgY29udGV4dDogdHJ1ZSwKICAgICAgICAgICAgICAgIHVybDogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgYWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksCiAgICAgICAgYWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksCgogICAgICAgIC8vIE1haW4gbWV0aG9kCiAgICAgICAgYWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHsKCiAgICAgICAgICAgIC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlCiAgICAgICAgICAgIGlmICggdHlwZW9mIHVybCA9PT0gIm9iamVjdCIgKSB7CiAgICAgICAgICAgICAgICBvcHRpb25zID0gdXJsOwogICAgICAgICAgICAgICAgdXJsID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdAogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCiAgICAgICAgICAgIHZhciAvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0CiAgICAgICAgICAgICAgICBzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSwKICAgICAgICAgICAgLy8gQ2FsbGJhY2tzIGNvbnRleHQKICAgICAgICAgICAgICAgIGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLAogICAgICAgICAgICAvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzCiAgICAgICAgICAgIC8vIEl0J3MgdGhlIGNhbGxiYWNrQ29udGV4dCBpZiBvbmUgd2FzIHByb3ZpZGVkIGluIHRoZSBvcHRpb25zCiAgICAgICAgICAgIC8vIGFuZCBpZiBpdCdzIGEgRE9NIG5vZGUgb3IgYSBqUXVlcnkgY29sbGVjdGlvbgogICAgICAgICAgICAgICAgZ2xvYmFsRXZlbnRDb250ZXh0ID0gY2FsbGJhY2tDb250ZXh0ICE9PSBzICYmCiAgICAgICAgICAgICAgICAgICAgKCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ICkgPwogICAgICAgICAgICAgICAgICAgIGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOiBqUXVlcnkuZXZlbnQsCiAgICAgICAgICAgIC8vIERlZmVycmVkcwogICAgICAgICAgICAgICAgZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSwKICAgICAgICAgICAgICAgIGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCAib25jZSBtZW1vcnkiICksCiAgICAgICAgICAgIC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzCiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LAogICAgICAgICAgICAvLyBpZk1vZGlmaWVkIGtleQogICAgICAgICAgICAgICAgaWZNb2RpZmllZEtleSwKICAgICAgICAgICAgLy8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSkKICAgICAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzID0ge30sCiAgICAgICAgICAgICAgICByZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sCiAgICAgICAgICAgIC8vIFJlc3BvbnNlIGhlYWRlcnMKICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVyc1N0cmluZywKICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVycywKICAgICAgICAgICAgLy8gdHJhbnNwb3J0CiAgICAgICAgICAgICAgICB0cmFuc3BvcnQsCiAgICAgICAgICAgIC8vIHRpbWVvdXQgaGFuZGxlCiAgICAgICAgICAgICAgICB0aW1lb3V0VGltZXIsCiAgICAgICAgICAgIC8vIENyb3NzLWRvbWFpbiBkZXRlY3Rpb24gdmFycwogICAgICAgICAgICAgICAgcGFydHMsCiAgICAgICAgICAgIC8vIFRoZSBqcVhIUiBzdGF0ZQogICAgICAgICAgICAgICAgc3RhdGUgPSAwLAogICAgICAgICAgICAvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWQKICAgICAgICAgICAgICAgIGZpcmVHbG9iYWxzLAogICAgICAgICAgICAvLyBMb29wIHZhcmlhYmxlCiAgICAgICAgICAgICAgICBpLAogICAgICAgICAgICAvLyBGYWtlIHhocgogICAgICAgICAgICAgICAganFYSFIgPSB7CgogICAgICAgICAgICAgICAgICAgIHJlYWR5U3RhdGU6IDAsCgogICAgICAgICAgICAgICAgICAgIC8vIENhY2hlcyB0aGUgaGVhZGVyCiAgICAgICAgICAgICAgICAgICAgc2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFzdGF0ZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgICAgIC8vIFJhdyBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUgPT09IDIgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsOwogICAgICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgICAgIC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWQKICAgICAgICAgICAgICAgICAgICBnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHN0YXRlID09PSAyICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhcmVzcG9uc2VIZWFkZXJzICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVycyA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG1hdGNoOwogICAgICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgICAgIC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyCiAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIXN0YXRlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5taW1lVHlwZSA9IHR5cGU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgICAgLy8gQ2FuY2VsIHRoZSByZXF1ZXN0CiAgICAgICAgICAgICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCAiYWJvcnQiOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRyYW5zcG9ydCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydC5hYm9ydCggc3RhdHVzVGV4dCApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoIDAsIHN0YXR1c1RleHQgKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZQogICAgICAgICAgICAvLyBJdCBpcyBkZWZpbmVkIGhlcmUgYmVjYXVzZSBqc2xpbnQgY29tcGxhaW5zIGlmIGl0IGlzIGRlY2xhcmVkCiAgICAgICAgICAgIC8vIGF0IHRoZSBlbmQgb2YgdGhlIGZ1bmN0aW9uICh3aGljaCB3b3VsZCBiZSBtb3JlIGxvZ2ljYWwgYW5kIHJlYWRhYmxlKQogICAgICAgICAgICBmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHsKCiAgICAgICAgICAgICAgICAvLyBDYWxsZWQgb25jZQogICAgICAgICAgICAgICAgaWYgKCBzdGF0ZSA9PT0gMiApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gU3RhdGUgaXMgImRvbmUiIG5vdwogICAgICAgICAgICAgICAgc3RhdGUgPSAyOwoKICAgICAgICAgICAgICAgIC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzCiAgICAgICAgICAgICAgICBpZiAoIHRpbWVvdXRUaW1lciApIHsKICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uCiAgICAgICAgICAgICAgICAvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKQogICAgICAgICAgICAgICAgdHJhbnNwb3J0ID0gdW5kZWZpbmVkOwoKICAgICAgICAgICAgICAgIC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnMKICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgIiI7CgogICAgICAgICAgICAgICAgLy8gU2V0IHJlYWR5U3RhdGUKICAgICAgICAgICAgICAgIGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7CgogICAgICAgICAgICAgICAgdmFyIGlzU3VjY2VzcywKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzLAogICAgICAgICAgICAgICAgICAgIGVycm9yLAogICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0LAogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gcmVzcG9uc2VzID8gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIDogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgIGxhc3RNb2RpZmllZCwKICAgICAgICAgICAgICAgICAgICBldGFnOwoKICAgICAgICAgICAgICAgIC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nCiAgICAgICAgICAgICAgICBpZiAoIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0ICkgewoKICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLgogICAgICAgICAgICAgICAgICAgIGlmICggcy5pZk1vZGlmaWVkICkgewoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAoIGxhc3RNb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCAiTGFzdC1Nb2RpZmllZCIgKSApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgaWZNb2RpZmllZEtleSBdID0gbGFzdE1vZGlmaWVkOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggKCBldGFnID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoICJFdGFnIiApICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXRhZ1sgaWZNb2RpZmllZEtleSBdID0gZXRhZzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy8gSWYgbm90IG1vZGlmaWVkCiAgICAgICAgICAgICAgICAgICAgaWYgKCBzdGF0dXMgPT09IDMwNCApIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgPSAibm90bW9kaWZpZWQiOwogICAgICAgICAgICAgICAgICAgICAgICBpc1N1Y2Nlc3MgPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBkYXRhCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0gInN1Y2Nlc3MiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTdWNjZXNzID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGEgcGFyc2VyZXJyb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgPSAicGFyc2VyZXJyb3IiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBXZSBleHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dAogICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gbm9ybWFsaXplIHN0YXR1c1RleHQgYW5kIHN0YXR1cyBmb3Igbm9uLWFib3J0cwogICAgICAgICAgICAgICAgICAgIGVycm9yID0gc3RhdHVzVGV4dDsKICAgICAgICAgICAgICAgICAgICBpZiAoICFzdGF0dXNUZXh0IHx8IHN0YXR1cyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9ICJlcnJvciI7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3RhdHVzIDwgMCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3QKICAgICAgICAgICAgICAgIGpxWEhSLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgICAgICAgIGpxWEhSLnN0YXR1c1RleHQgPSAiIiArICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICk7CgogICAgICAgICAgICAgICAgLy8gU3VjY2Vzcy9FcnJvcgogICAgICAgICAgICAgICAgaWYgKCBpc1N1Y2Nlc3MgKSB7CiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzCiAgICAgICAgICAgICAgICBqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7CiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlID0gdW5kZWZpbmVkOwoKICAgICAgICAgICAgICAgIGlmICggZmlyZUdsb2JhbHMgKSB7CiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoICJhamF4IiArICggaXNTdWNjZXNzID8gIlN1Y2Nlc3MiIDogIkVycm9yIiApLAogICAgICAgICAgICAgICAgICAgICAgICBbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIENvbXBsZXRlCiAgICAgICAgICAgICAgICBjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApOwoKICAgICAgICAgICAgICAgIGlmICggZmlyZUdsb2JhbHMgKSB7CiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoICJhamF4Q29tcGxldGUiLCBbIGpxWEhSLCBzIF0gKTsKICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXIKICAgICAgICAgICAgICAgICAgICBpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkgewogICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlciggImFqYXhTdG9wIiApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQXR0YWNoIGRlZmVycmVkcwogICAgICAgICAgICBkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApOwogICAgICAgICAgICBqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTsKICAgICAgICAgICAganFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsOwogICAgICAgICAgICBqcVhIUi5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkOwoKICAgICAgICAgICAgLy8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3MKICAgICAgICAgICAganFYSFIuc3RhdHVzQ29kZSA9IGZ1bmN0aW9uKCBtYXAgKSB7CiAgICAgICAgICAgICAgICBpZiAoIG1hcCApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdG1wOwogICAgICAgICAgICAgICAgICAgIGlmICggc3RhdGUgPCAyICkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB0bXAgaW4gbWFwICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZVsgdG1wIF0gPSBbIHN0YXR1c0NvZGVbdG1wXSwgbWFwW3RtcF0gXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IG1hcFsganFYSFIuc3RhdHVzIF07CiAgICAgICAgICAgICAgICAgICAgICAgIGpxWEhSLnRoZW4oIHRtcCwgdG1wICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvLyBSZW1vdmUgaGFzaCBjaGFyYWN0ZXIgKCM3NTMxOiBhbmQgc3RyaW5nIHByb21vdGlvbikKICAgICAgICAgICAgLy8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAoIzU4NjY6IElFNyBpc3N1ZSB3aXRoIHByb3RvY29sLWxlc3MgdXJscykKICAgICAgICAgICAgLy8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlCiAgICAgICAgICAgIHMudXJsID0gKCAoIHVybCB8fCBzLnVybCApICsgIiIgKS5yZXBsYWNlKCByaGFzaCwgIiIgKS5yZXBsYWNlKCBycHJvdG9jb2wsIGFqYXhMb2NQYXJ0c1sgMSBdICsgIi8vIiApOwoKICAgICAgICAgICAgLy8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdAogICAgICAgICAgICBzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8ICIqIiApLnRvTG93ZXJDYXNlKCkuc3BsaXQoIHJzcGFjZXNBamF4ICk7CgogICAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgYSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlcgogICAgICAgICAgICBpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHsKICAgICAgICAgICAgICAgIHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7CiAgICAgICAgICAgICAgICBzLmNyb3NzRG9tYWluID0gISEoIHBhcnRzICYmCiAgICAgICAgICAgICAgICAgICAgKCBwYXJ0c1sgMSBdICE9IGFqYXhMb2NQYXJ0c1sgMSBdIHx8IHBhcnRzWyAyIF0gIT0gYWpheExvY1BhcnRzWyAyIF0gfHwKICAgICAgICAgICAgICAgICAgICAgICAgKCBwYXJ0c1sgMyBdIHx8ICggcGFydHNbIDEgXSA9PT0gImh0dHA6IiA/IDgwIDogNDQzICkgKSAhPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBhamF4TG9jUGFydHNbIDMgXSB8fCAoIGFqYXhMb2NQYXJ0c1sgMSBdID09PSAiaHR0cDoiID8gODAgOiA0NDMgKSApICkKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmcKICAgICAgICAgICAgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSAic3RyaW5nIiApIHsKICAgICAgICAgICAgICAgIHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEFwcGx5IHByZWZpbHRlcnMKICAgICAgICAgICAgaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7CgogICAgICAgICAgICAvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbGVyLCBzdG9wIHRoZXJlCiAgICAgICAgICAgIGlmICggc3RhdGUgPT09IDIgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvCiAgICAgICAgICAgIGZpcmVHbG9iYWxzID0gcy5nbG9iYWw7CgogICAgICAgICAgICAvLyBVcHBlcmNhc2UgdGhlIHR5cGUKICAgICAgICAgICAgcy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7CgogICAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudAogICAgICAgICAgICBzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTsKCiAgICAgICAgICAgIC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHMKICAgICAgICAgICAgaWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7CiAgICAgICAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlciggImFqYXhTdGFydCIgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnQKICAgICAgICAgICAgaWYgKCAhcy5oYXNDb250ZW50ICkgewoKICAgICAgICAgICAgICAgIC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmwKICAgICAgICAgICAgICAgIGlmICggcy5kYXRhICkgewogICAgICAgICAgICAgICAgICAgIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyAiJiIgOiAiPyIgKSArIHMuZGF0YTsKICAgICAgICAgICAgICAgICAgICAvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHMuZGF0YTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBHZXQgaWZNb2RpZmllZEtleSBiZWZvcmUgYWRkaW5nIHRoZSBhbnRpLWNhY2hlIHBhcmFtZXRlcgogICAgICAgICAgICAgICAgaWZNb2RpZmllZEtleSA9IHMudXJsOwoKICAgICAgICAgICAgICAgIC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWQKICAgICAgICAgICAgICAgIGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7CgogICAgICAgICAgICAgICAgICAgIHZhciB0cyA9IGpRdWVyeS5ub3coKSwKICAgICAgICAgICAgICAgICAgICAvLyB0cnkgcmVwbGFjaW5nIF89IGlmIGl0IGlzIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHMudXJsLnJlcGxhY2UoIHJ0cywgIiQxXz0iICsgdHMgKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gaWYgbm90aGluZyB3YXMgcmVwbGFjZWQsIGFkZCB0aW1lc3RhbXAgdG8gdGhlIGVuZAogICAgICAgICAgICAgICAgICAgIHMudXJsID0gcmV0ICsgKCAoIHJldCA9PT0gcy51cmwgKSA/ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyAiJiIgOiAiPyIgKSArICJfPSIgKyB0cyA6ICIiICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudAogICAgICAgICAgICBpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHsKICAgICAgICAgICAgICAgIGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoICJDb250ZW50LVR5cGUiLCBzLmNvbnRlbnRUeXBlICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuCiAgICAgICAgICAgIGlmICggcy5pZk1vZGlmaWVkICkgewogICAgICAgICAgICAgICAgaWZNb2RpZmllZEtleSA9IGlmTW9kaWZpZWRLZXkgfHwgcy51cmw7CiAgICAgICAgICAgICAgICBpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGlmTW9kaWZpZWRLZXkgXSApIHsKICAgICAgICAgICAgICAgICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCAiSWYtTW9kaWZpZWQtU2luY2UiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBpZk1vZGlmaWVkS2V5IF0gKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggalF1ZXJ5LmV0YWdbIGlmTW9kaWZpZWRLZXkgXSApIHsKICAgICAgICAgICAgICAgICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCAiSWYtTm9uZS1NYXRjaCIsIGpRdWVyeS5ldGFnWyBpZk1vZGlmaWVkS2V5IF0gKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZQogICAgICAgICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKAogICAgICAgICAgICAgICAgIkFjY2VwdCIsCiAgICAgICAgICAgICAgICBzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSA/CiAgICAgICAgICAgICAgICAgICAgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdICsgKCBzLmRhdGFUeXBlc1sgMCBdICE9PSAiKiIgPyAiLCAiICsgYWxsVHlwZXMgKyAiOyBxPTAuMDEiIDogIiIgKSA6CiAgICAgICAgICAgICAgICAgICAgcy5hY2NlcHRzWyAiKiIgXQogICAgICAgICAgICApOwoKICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uCiAgICAgICAgICAgIGZvciAoIGkgaW4gcy5oZWFkZXJzICkgewogICAgICAgICAgICAgICAganFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydAogICAgICAgICAgICBpZiAoIHMuYmVmb3JlU2VuZCAmJiAoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7CiAgICAgICAgICAgICAgICAvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5CiAgICAgICAgICAgICAgICBqcVhIUi5hYm9ydCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzCiAgICAgICAgICAgIGZvciAoIGkgaW4geyBzdWNjZXNzOiAxLCBlcnJvcjogMSwgY29tcGxldGU6IDEgfSApIHsKICAgICAgICAgICAgICAgIGpxWEhSWyBpIF0oIHNbIGkgXSApOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBHZXQgdHJhbnNwb3J0CiAgICAgICAgICAgIHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApOwoKICAgICAgICAgICAgLy8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0CiAgICAgICAgICAgIGlmICggIXRyYW5zcG9ydCApIHsKICAgICAgICAgICAgICAgIGRvbmUoIC0xLCAiTm8gVHJhbnNwb3J0IiApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAganFYSFIucmVhZHlTdGF0ZSA9IDE7CiAgICAgICAgICAgICAgICAvLyBTZW5kIGdsb2JhbCBldmVudAogICAgICAgICAgICAgICAgaWYgKCBmaXJlR2xvYmFscyApIHsKICAgICAgICAgICAgICAgICAgICBnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggImFqYXhTZW5kIiwgWyBqcVhIUiwgcyBdICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBUaW1lb3V0CiAgICAgICAgICAgICAgICBpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHsKICAgICAgICAgICAgICAgICAgICB0aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICBqcVhIUi5hYm9ydCggInRpbWVvdXQiICk7CiAgICAgICAgICAgICAgICAgICAgfSwgcy50aW1lb3V0ICk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDE7CiAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZQogICAgICAgICAgICAgICAgICAgIGlmICggc3RhdGUgPCAyICkgewogICAgICAgICAgICAgICAgICAgICAgICBkb25lKCAtMSwgZSApOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2UKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGpxWEhSOwogICAgICAgIH0sCgogICAgICAgIC8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mCiAgICAgICAgLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nCiAgICAgICAgcGFyYW06IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHsKICAgICAgICAgICAgdmFyIHMgPSBbXSwKICAgICAgICAgICAgICAgIGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewogICAgICAgICAgICAgICAgICAgIC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZQogICAgICAgICAgICAgICAgICAgIHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgc1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci4KICAgICAgICAgICAgaWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgdHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLgogICAgICAgICAgICBpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkgewogICAgICAgICAgICAgICAgLy8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzCiAgICAgICAgICAgICAgICBqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgYWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlICJvbGQiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlcgogICAgICAgICAgICAgICAgLy8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuCiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgcHJlZml4IGluIGEgKSB7CiAgICAgICAgICAgICAgICAgICAgYnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvbgogICAgICAgICAgICByZXR1cm4gcy5qb2luKCAiJiIgKS5yZXBsYWNlKCByMjAsICIrIiApOwogICAgICAgIH0KICAgIH0pOwoKICAgIGZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHsKICAgICAgICBpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHsKICAgICAgICAgICAgLy8gU2VyaWFsaXplIGFycmF5IGl0ZW0uCiAgICAgICAgICAgIGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkgewogICAgICAgICAgICAgICAgaWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHsKICAgICAgICAgICAgICAgICAgICAvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuCiAgICAgICAgICAgICAgICAgICAgYWRkKCBwcmVmaXgsIHYgKTsKCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIElmIGFycmF5IGl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cwogICAgICAgICAgICAgICAgICAgIC8vIG51bWVyaWMgaW5kZXggdG8gcmVzb2x2ZSBkZXNlcmlhbGl6YXRpb24gYW1iaWd1aXR5IGlzc3Vlcy4KICAgICAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgcmFjayAoYXMgb2YgMS4wLjApIGNhbid0IGN1cnJlbnRseSBkZXNlcmlhbGl6ZQogICAgICAgICAgICAgICAgICAgIC8vIG5lc3RlZCBhcnJheXMgcHJvcGVybHksIGFuZCBhdHRlbXB0aW5nIHRvIGRvIHNvIG1heSBjYXVzZQogICAgICAgICAgICAgICAgICAgIC8vIGEgc2VydmVyIGVycm9yLiBQb3NzaWJsZSBmaXhlcyBhcmUgdG8gbW9kaWZ5IHJhY2sncwogICAgICAgICAgICAgICAgICAgIC8vIGRlc2VyaWFsaXphdGlvbiBhbGdvcml0aG0gb3IgdG8gcHJvdmlkZSBhbiBvcHRpb24gb3IgZmxhZwogICAgICAgICAgICAgICAgICAgIC8vIHRvIGZvcmNlIGFycmF5IHNlcmlhbGl6YXRpb24gdG8gYmUgc2hhbGxvdy4KICAgICAgICAgICAgICAgICAgICBidWlsZFBhcmFtcyggcHJlZml4ICsgIlsiICsgKCB0eXBlb2YgdiA9PT0gIm9iamVjdCIgfHwgalF1ZXJ5LmlzQXJyYXkodikgPyBpIDogIiIgKSArICJdIiwgdiwgdHJhZGl0aW9uYWwsIGFkZCApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgfSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIG9iaiAhPSBudWxsICYmIHR5cGVvZiBvYmogPT09ICJvYmplY3QiICkgewogICAgICAgICAgICAvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uCiAgICAgICAgICAgIGZvciAoIHZhciBuYW1lIGluIG9iaiApIHsKICAgICAgICAgICAgICAgIGJ1aWxkUGFyYW1zKCBwcmVmaXggKyAiWyIgKyBuYW1lICsgIl0iLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApOwogICAgICAgICAgICB9CgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS4KICAgICAgICAgICAgYWRkKCBwcmVmaXgsIG9iaiApOwogICAgICAgIH0KICAgIH0KCi8vIFRoaXMgaXMgc3RpbGwgb24gdGhlIGpRdWVyeSBvYmplY3QuLi4gZm9yIG5vdwovLyBXYW50IHRvIG1vdmUgdGhpcyB0byBqUXVlcnkuYWpheCBzb21lIGRheQogICAgalF1ZXJ5LmV4dGVuZCh7CgogICAgICAgIC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllcwogICAgICAgIGFjdGl2ZTogMCwKCiAgICAgICAgLy8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdAogICAgICAgIGxhc3RNb2RpZmllZDoge30sCiAgICAgICAgZXRhZzoge30KCiAgICB9KTsKCiAgICAvKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6CiAgICAgKiAtIHNldHMgYWxsIHJlc3BvbnNlWFhYIGZpZWxkcyBhY2NvcmRpbmdseQogICAgICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSkKICAgICAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZQogICAgICovCiAgICBmdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkgewoKICAgICAgICB2YXIgY29udGVudHMgPSBzLmNvbnRlbnRzLAogICAgICAgICAgICBkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcywKICAgICAgICAgICAgcmVzcG9uc2VGaWVsZHMgPSBzLnJlc3BvbnNlRmllbGRzLAogICAgICAgICAgICBjdCwKICAgICAgICAgICAgdHlwZSwKICAgICAgICAgICAgZmluYWxEYXRhVHlwZSwKICAgICAgICAgICAgZmlyc3REYXRhVHlwZTsKCiAgICAgICAgLy8gRmlsbCByZXNwb25zZVhYWCBmaWVsZHMKICAgICAgICBmb3IgKCB0eXBlIGluIHJlc3BvbnNlRmllbGRzICkgewogICAgICAgICAgICBpZiAoIHR5cGUgaW4gcmVzcG9uc2VzICkgewogICAgICAgICAgICAgICAganFYSFJbIHJlc3BvbnNlRmllbGRzW3R5cGVdIF0gPSByZXNwb25zZXNbIHR5cGUgXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3MKICAgICAgICB3aGlsZSggZGF0YVR5cGVzWyAwIF0gPT09ICIqIiApIHsKICAgICAgICAgICAgZGF0YVR5cGVzLnNoaWZ0KCk7CiAgICAgICAgICAgIGlmICggY3QgPT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggImNvbnRlbnQtdHlwZSIgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlCiAgICAgICAgaWYgKCBjdCApIHsKICAgICAgICAgICAgZm9yICggdHlwZSBpbiBjb250ZW50cyApIHsKICAgICAgICAgICAgICAgIGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlCiAgICAgICAgaWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7CiAgICAgICAgICAgIGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzCiAgICAgICAgICAgIGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkgewogICAgICAgICAgICAgICAgaWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgIiAiICsgZGF0YVR5cGVzWzBdIF0gKSB7CiAgICAgICAgICAgICAgICAgICAgZmluYWxEYXRhVHlwZSA9IHR5cGU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoICFmaXJzdERhdGFUeXBlICkgewogICAgICAgICAgICAgICAgICAgIGZpcnN0RGF0YVR5cGUgPSB0eXBlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZQogICAgICAgICAgICBmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlOwogICAgICAgIH0KCiAgICAgICAgLy8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZQogICAgICAgIC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkCiAgICAgICAgLy8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZQogICAgICAgIGlmICggZmluYWxEYXRhVHlwZSApIHsKICAgICAgICAgICAgaWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHsKICAgICAgICAgICAgICAgIGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdOwogICAgICAgIH0KICAgIH0KCi8vIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2UKICAgIGZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSApIHsKCiAgICAgICAgLy8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWQKICAgICAgICBpZiAoIHMuZGF0YUZpbHRlciApIHsKICAgICAgICAgICAgcmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7CiAgICAgICAgfQoKICAgICAgICB2YXIgZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMsCiAgICAgICAgICAgIGNvbnZlcnRlcnMgPSB7fSwKICAgICAgICAgICAgaSwKICAgICAgICAgICAga2V5LAogICAgICAgICAgICBsZW5ndGggPSBkYXRhVHlwZXMubGVuZ3RoLAogICAgICAgICAgICB0bXAsCiAgICAgICAgLy8gQ3VycmVudCBhbmQgcHJldmlvdXMgZGF0YVR5cGVzCiAgICAgICAgICAgIGN1cnJlbnQgPSBkYXRhVHlwZXNbIDAgXSwKICAgICAgICAgICAgcHJldiwKICAgICAgICAvLyBDb252ZXJzaW9uIGV4cHJlc3Npb24KICAgICAgICAgICAgY29udmVyc2lvbiwKICAgICAgICAvLyBDb252ZXJzaW9uIGZ1bmN0aW9uCiAgICAgICAgICAgIGNvbnYsCiAgICAgICAgLy8gQ29udmVyc2lvbiBmdW5jdGlvbnMgKHRyYW5zaXRpdmUgY29udmVyc2lvbikKICAgICAgICAgICAgY29udjEsCiAgICAgICAgICAgIGNvbnYyOwoKICAgICAgICAvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgY2hhaW4KICAgICAgICBmb3IgKCBpID0gMTsgaSA8IGxlbmd0aDsgaSsrICkgewoKICAgICAgICAgICAgLy8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwCiAgICAgICAgICAgIC8vIHdpdGggbG93ZXJjYXNlZCBrZXlzCiAgICAgICAgICAgIGlmICggaSA9PT0gMSApIHsKICAgICAgICAgICAgICAgIGZvciAoIGtleSBpbiBzLmNvbnZlcnRlcnMgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlb2Yga2V5ID09PSAic3RyaW5nIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sga2V5IF07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBHZXQgdGhlIGRhdGFUeXBlcwogICAgICAgICAgICBwcmV2ID0gY3VycmVudDsKICAgICAgICAgICAgY3VycmVudCA9IGRhdGFUeXBlc1sgaSBdOwoKICAgICAgICAgICAgLy8gSWYgY3VycmVudCBpcyBhdXRvIGRhdGFUeXBlLCB1cGRhdGUgaXQgdG8gcHJldgogICAgICAgICAgICBpZiAoIGN1cnJlbnQgPT09ICIqIiApIHsKICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBwcmV2OwogICAgICAgICAgICAgICAgLy8gSWYgbm8gYXV0byBhbmQgZGF0YVR5cGVzIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQKICAgICAgICAgICAgfSBlbHNlIGlmICggcHJldiAhPT0gIioiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7CgogICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjb252ZXJ0ZXIKICAgICAgICAgICAgICAgIGNvbnZlcnNpb24gPSBwcmV2ICsgIiAiICsgY3VycmVudDsKICAgICAgICAgICAgICAgIGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252ZXJzaW9uIF0gfHwgY29udmVydGVyc1sgIiogIiArIGN1cnJlbnQgXTsKCiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBkaXJlY3QgY29udmVydGVyLCBzZWFyY2ggdHJhbnNpdGl2ZWx5CiAgICAgICAgICAgICAgICBpZiAoICFjb252ICkgewogICAgICAgICAgICAgICAgICAgIGNvbnYyID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICAgIGZvciAoIGNvbnYxIGluIGNvbnZlcnRlcnMgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IGNvbnYxLnNwbGl0KCAiICIgKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0bXBbIDAgXSA9PT0gcHJldiB8fCB0bXBbIDAgXSA9PT0gIioiICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udjIgPSBjb252ZXJ0ZXJzWyB0bXBbMV0gKyAiICIgKyBjdXJyZW50IF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGNvbnYyICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnYxID0gY29udmVydGVyc1sgY29udjEgXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGNvbnYxID09PSB0cnVlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ID0gY29udjI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY29udjIgPT09IHRydWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnYgPSBjb252MTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBmb3VuZCBubyBjb252ZXJ0ZXIsIGRpc3BhdGNoIGFuIGVycm9yCiAgICAgICAgICAgICAgICBpZiAoICEoIGNvbnYgfHwgY29udjIgKSApIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXJyb3IoICJObyBjb252ZXJzaW9uIGZyb20gIiArIGNvbnZlcnNpb24ucmVwbGFjZSgiICIsIiB0byAiKSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gSWYgZm91bmQgY29udmVydGVyIGlzIG5vdCBhbiBlcXVpdmFsZW5jZQogICAgICAgICAgICAgICAgaWYgKCBjb252ICE9PSB0cnVlICkgewogICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgd2l0aCAxIG9yIDIgY29udmVydGVycyBhY2NvcmRpbmdseQogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gY29udiA/IGNvbnYoIHJlc3BvbnNlICkgOiBjb252MiggY29udjEocmVzcG9uc2UpICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgfQoKCgoKICAgIHZhciBqc2MgPSBqUXVlcnkubm93KCksCiAgICAgICAganNyZSA9IC8oXD0pXD8oJnwkKXxcP1w/L2k7CgovLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzCiAgICBqUXVlcnkuYWpheFNldHVwKHsKICAgICAgICBqc29ucDogImNhbGxiYWNrIiwKICAgICAgICBqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5leHBhbmRvICsgIl8iICsgKCBqc2MrKyApOwogICAgICAgIH0KICAgIH0pOwoKLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzCiAgICBqUXVlcnkuYWpheFByZWZpbHRlciggImpzb24ganNvbnAiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7CgogICAgICAgIHZhciBpbnNwZWN0RGF0YSA9IHMuY29udGVudFR5cGUgPT09ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiICYmCiAgICAgICAgICAgICggdHlwZW9mIHMuZGF0YSA9PT0gInN0cmluZyIgKTsKCiAgICAgICAgaWYgKCBzLmRhdGFUeXBlc1sgMCBdID09PSAianNvbnAiIHx8CiAgICAgICAgICAgIHMuanNvbnAgIT09IGZhbHNlICYmICgganNyZS50ZXN0KCBzLnVybCApIHx8CiAgICAgICAgICAgICAgICBpbnNwZWN0RGF0YSAmJiBqc3JlLnRlc3QoIHMuZGF0YSApICkgKSB7CgogICAgICAgICAgICB2YXIgcmVzcG9uc2VDb250YWluZXIsCiAgICAgICAgICAgICAgICBqc29ucENhbGxiYWNrID0gcy5qc29ucENhbGxiYWNrID0KICAgICAgICAgICAgICAgICAgICBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgPyBzLmpzb25wQ2FsbGJhY2soKSA6IHMuanNvbnBDYWxsYmFjaywKICAgICAgICAgICAgICAgIHByZXZpb3VzID0gd2luZG93WyBqc29ucENhbGxiYWNrIF0sCiAgICAgICAgICAgICAgICB1cmwgPSBzLnVybCwKICAgICAgICAgICAgICAgIGRhdGEgPSBzLmRhdGEsCiAgICAgICAgICAgICAgICByZXBsYWNlID0gIiQxIiArIGpzb25wQ2FsbGJhY2sgKyAiJDIiOwoKICAgICAgICAgICAgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCBqc3JlLCByZXBsYWNlICk7CiAgICAgICAgICAgICAgICBpZiAoIHMudXJsID09PSB1cmwgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBpbnNwZWN0RGF0YSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEucmVwbGFjZSgganNyZSwgcmVwbGFjZSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoIHMuZGF0YSA9PT0gZGF0YSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGNhbGxiYWNrIG1hbnVhbGx5CiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAoL1w/Ly50ZXN0KCB1cmwgKSA/ICImIiA6ICI/IikgKyBzLmpzb25wICsgIj0iICsganNvbnBDYWxsYmFjazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHMudXJsID0gdXJsOwogICAgICAgICAgICBzLmRhdGEgPSBkYXRhOwoKICAgICAgICAgICAgLy8gSW5zdGFsbCBjYWxsYmFjawogICAgICAgICAgICB3aW5kb3dbIGpzb25wQ2FsbGJhY2sgXSA9IGZ1bmN0aW9uKCByZXNwb25zZSApIHsKICAgICAgICAgICAgICAgIHJlc3BvbnNlQ29udGFpbmVyID0gWyByZXNwb25zZSBdOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy8gQ2xlYW4tdXAgZnVuY3Rpb24KICAgICAgICAgICAganFYSFIuYWx3YXlzKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgLy8gU2V0IGNhbGxiYWNrIGJhY2sgdG8gcHJldmlvdXMgdmFsdWUKICAgICAgICAgICAgICAgIHdpbmRvd1sganNvbnBDYWxsYmFjayBdID0gcHJldmlvdXM7CiAgICAgICAgICAgICAgICAvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2UKICAgICAgICAgICAgICAgIGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHByZXZpb3VzICkgKSB7CiAgICAgICAgICAgICAgICAgICAgd2luZG93WyBqc29ucENhbGxiYWNrIF0oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uCiAgICAgICAgICAgIHMuY29udmVydGVyc1sic2NyaXB0IGpzb24iXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmVycm9yKCBqc29ucENhbGxiYWNrICsgIiB3YXMgbm90IGNhbGxlZCIgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy8gZm9yY2UganNvbiBkYXRhVHlwZQogICAgICAgICAgICBzLmRhdGFUeXBlc1sgMCBdID0gImpzb24iOwoKICAgICAgICAgICAgLy8gRGVsZWdhdGUgdG8gc2NyaXB0CiAgICAgICAgICAgIHJldHVybiAic2NyaXB0IjsKICAgICAgICB9CiAgICB9KTsKCgoKCi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlCiAgICBqUXVlcnkuYWpheFNldHVwKHsKICAgICAgICBhY2NlcHRzOiB7CiAgICAgICAgICAgIHNjcmlwdDogInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0IgogICAgICAgIH0sCiAgICAgICAgY29udGVudHM6IHsKICAgICAgICAgICAgc2NyaXB0OiAvamF2YXNjcmlwdHxlY21hc2NyaXB0LwogICAgICAgIH0sCiAgICAgICAgY29udmVydGVyczogewogICAgICAgICAgICAidGV4dCBzY3JpcHQiOiBmdW5jdGlvbiggdGV4dCApIHsKICAgICAgICAgICAgICAgIGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBnbG9iYWwKICAgIGpRdWVyeS5hamF4UHJlZmlsdGVyKCAic2NyaXB0IiwgZnVuY3Rpb24oIHMgKSB7CiAgICAgICAgaWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgIHMuY2FjaGUgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKCBzLmNyb3NzRG9tYWluICkgewogICAgICAgICAgICBzLnR5cGUgPSAiR0VUIjsKICAgICAgICAgICAgcy5nbG9iYWwgPSBmYWxzZTsKICAgICAgICB9CiAgICB9KTsKCi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydAogICAgalF1ZXJ5LmFqYXhUcmFuc3BvcnQoICJzY3JpcHQiLCBmdW5jdGlvbihzKSB7CgogICAgICAgIC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHMKICAgICAgICBpZiAoIHMuY3Jvc3NEb21haW4gKSB7CgogICAgICAgICAgICB2YXIgc2NyaXB0LAogICAgICAgICAgICAgICAgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJoZWFkIiApWzBdIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKCiAgICAgICAgICAgIHJldHVybiB7CgogICAgICAgICAgICAgICAgc2VuZDogZnVuY3Rpb24oIF8sIGNhbGxiYWNrICkgewoKICAgICAgICAgICAgICAgICAgICBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAic2NyaXB0IiApOwoKICAgICAgICAgICAgICAgICAgICBzY3JpcHQuYXN5bmMgPSAiYXN5bmMiOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIHMuc2NyaXB0Q2hhcnNldCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0LmNoYXJzZXQgPSBzLnNjcmlwdENoYXJzZXQ7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBzY3JpcHQuc3JjID0gcy51cmw7CgogICAgICAgICAgICAgICAgICAgIC8vIEF0dGFjaCBoYW5kbGVycyBmb3IgYWxsIGJyb3dzZXJzCiAgICAgICAgICAgICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiggXywgaXNBYm9ydCApIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggaXNBYm9ydCB8fCAhc2NyaXB0LnJlYWR5U3RhdGUgfHwgL2xvYWRlZHxjb21wbGV0ZS8udGVzdCggc2NyaXB0LnJlYWR5U3RhdGUgKSApIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgbWVtb3J5IGxlYWsgaW4gSUUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHNjcmlwdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBoZWFkICYmIHNjcmlwdC5wYXJlbnROb2RlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQucmVtb3ZlQ2hpbGQoIHNjcmlwdCApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlcmVmZXJlbmNlIHRoZSBzY3JpcHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdCA9IHVuZGVmaW5lZDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsYmFjayBpZiBub3QgYWJvcnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIWlzQWJvcnQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soIDIwMCwgInN1Y2Nlc3MiICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIC8vIFVzZSBpbnNlcnRCZWZvcmUgaW5zdGVhZCBvZiBhcHBlbmRDaGlsZCAgdG8gY2lyY3VtdmVudCBhbiBJRTYgYnVnLgogICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgYXJpc2VzIHdoZW4gYSBiYXNlIG5vZGUgaXMgdXNlZCAoIzI3MDkgYW5kICM0Mzc4KS4KICAgICAgICAgICAgICAgICAgICBoZWFkLmluc2VydEJlZm9yZSggc2NyaXB0LCBoZWFkLmZpcnN0Q2hpbGQgKTsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGlmICggc2NyaXB0ICkgewogICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQub25sb2FkKCAwLCAxICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgIH0KICAgIH0pOwoKCgoKICAgIHZhciAvLyAjNTI4MDogSW50ZXJuZXQgRXhwbG9yZXIgd2lsbCBrZWVwIGNvbm5lY3Rpb25zIGFsaXZlIGlmIHdlIGRvbid0IGFib3J0IG9uIHVubG9hZAogICAgICAgIHhock9uVW5sb2FkQWJvcnQgPSB3aW5kb3cuQWN0aXZlWE9iamVjdCA/IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAvLyBBYm9ydCBhbGwgcGVuZGluZyByZXF1ZXN0cwogICAgICAgICAgICBmb3IgKCB2YXIga2V5IGluIHhockNhbGxiYWNrcyApIHsKICAgICAgICAgICAgICAgIHhockNhbGxiYWNrc1sga2V5IF0oIDAsIDEgKTsKICAgICAgICAgICAgfQogICAgICAgIH0gOiBmYWxzZSwKICAgICAgICB4aHJJZCA9IDAsCiAgICAgICAgeGhyQ2FsbGJhY2tzOwoKLy8gRnVuY3Rpb25zIHRvIGNyZWF0ZSB4aHJzCiAgICBmdW5jdGlvbiBjcmVhdGVTdGFuZGFyZFhIUigpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpOwogICAgICAgIH0gY2F0Y2goIGUgKSB7fQogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZUFjdGl2ZVhIUigpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCAiTWljcm9zb2Z0LlhNTEhUVFAiICk7CiAgICAgICAgfSBjYXRjaCggZSApIHt9CiAgICB9CgovLyBDcmVhdGUgdGhlIHJlcXVlc3Qgb2JqZWN0Ci8vIChUaGlzIGlzIHN0aWxsIGF0dGFjaGVkIHRvIGFqYXhTZXR0aW5ncyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSkKICAgIGpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gd2luZG93LkFjdGl2ZVhPYmplY3QgPwogICAgICAgIC8qIE1pY3Jvc29mdCBmYWlsZWQgdG8gcHJvcGVybHkKICAgICAgICAgKiBpbXBsZW1lbnQgdGhlIFhNTEh0dHBSZXF1ZXN0IGluIElFNyAoY2FuJ3QgcmVxdWVzdCBsb2NhbCBmaWxlcyksCiAgICAgICAgICogc28gd2UgdXNlIHRoZSBBY3RpdmVYT2JqZWN0IHdoZW4gaXQgaXMgYXZhaWxhYmxlCiAgICAgICAgICogQWRkaXRpb25hbGx5IFhNTEh0dHBSZXF1ZXN0IGNhbiBiZSBkaXNhYmxlZCBpbiBJRTcvSUU4IHNvCiAgICAgICAgICogd2UgbmVlZCBhIGZhbGxiYWNrLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNMb2NhbCAmJiBjcmVhdGVTdGFuZGFyZFhIUigpIHx8IGNyZWF0ZUFjdGl2ZVhIUigpOwogICAgICAgIH0gOgogICAgICAgIC8vIEZvciBhbGwgb3RoZXIgYnJvd3NlcnMsIHVzZSB0aGUgc3RhbmRhcmQgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0CiAgICAgICAgY3JlYXRlU3RhbmRhcmRYSFI7CgovLyBEZXRlcm1pbmUgc3VwcG9ydCBwcm9wZXJ0aWVzCiAgICAoZnVuY3Rpb24oIHhociApIHsKICAgICAgICBqUXVlcnkuZXh0ZW5kKCBqUXVlcnkuc3VwcG9ydCwgewogICAgICAgICAgICBhamF4OiAhIXhociwKICAgICAgICAgICAgY29yczogISF4aHIgJiYgKCAid2l0aENyZWRlbnRpYWxzIiBpbiB4aHIgKQogICAgICAgIH0pOwogICAgfSkoIGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCkgKTsKCi8vIENyZWF0ZSB0cmFuc3BvcnQgaWYgdGhlIGJyb3dzZXIgY2FuIHByb3ZpZGUgYW4geGhyCiAgICBpZiAoIGpRdWVyeS5zdXBwb3J0LmFqYXggKSB7CgogICAgICAgIGpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKCBzICkgewogICAgICAgICAgICAvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0CiAgICAgICAgICAgIGlmICggIXMuY3Jvc3NEb21haW4gfHwgalF1ZXJ5LnN1cHBvcnQuY29ycyApIHsKCiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2s7CgogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgYSBuZXcgeGhyCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4aHIgPSBzLnhocigpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wZW4gdGhlIHNvY2tldAogICAgICAgICAgICAgICAgICAgICAgICAvLyBQYXNzaW5nIG51bGwgdXNlcm5hbWUsIGdlbmVyYXRlcyBhIGxvZ2luIHBvcHVwIG9uIE9wZXJhICgjMjg2NSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzLnVzZXJuYW1lICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oIHMudHlwZSwgcy51cmwsIHMuYXN5bmMsIHMudXNlcm5hbWUsIHMucGFzc3dvcmQgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vcGVuKCBzLnR5cGUsIHMudXJsLCBzLmFzeW5jICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzLnhockZpZWxkcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIGkgaW4gcy54aHJGaWVsZHMgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyWyBpIF0gPSBzLnhockZpZWxkc1sgaSBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKCBzLm1pbWVUeXBlICk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFzLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyJYLVJlcXVlc3RlZC1XaXRoIl0gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzWyAiWC1SZXF1ZXN0ZWQtV2l0aCIgXSA9ICJYTUxIdHRwUmVxdWVzdCI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5lZWQgYW4gZXh0cmEgdHJ5L2NhdGNoIGZvciBjcm9zcyBkb21haW4gcmVxdWVzdHMgaW4gRmlyZWZveCAzCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCBpIGluIGhlYWRlcnMgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKCBfICkge30KCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvIHNlbmQgdGhlIHJlcXVlc3QKICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uIHdoaWNoIGlzIGFjdHVhbGx5CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZWQgaW4galF1ZXJ5LmFqYXggKHNvIG5vIHRyeS9jYXRjaCBoZXJlKQogICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2VuZCggKCBzLmhhc0NvbnRlbnQgJiYgcy5kYXRhICkgfHwgbnVsbCApOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGlzdGVuZXIKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiggXywgaXNBYm9ydCApIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWw7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCB0aHJvd3MgZXhjZXB0aW9ucyB3aGVuIGFjY2Vzc2luZyBwcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvZiBhbiB4aHIgd2hlbiBhIG5ldHdvcmsgZXJyb3Igb2NjdXJlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL2hlbHBmdWwua25vYnMtZGlhbHMuY29tL2luZGV4LnBocC9Db21wb25lbnRfcmV0dXJuZWRfZmFpbHVyZV9jb2RlOl8weDgwMDQwMTExXyhOU19FUlJPUl9OT1RfQVZBSUxBQkxFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2FzIG5ldmVyIGNhbGxlZCBhbmQgaXMgYWJvcnRlZCBvciBjb21wbGV0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY2FsbGJhY2sgJiYgKCBpc0Fib3J0IHx8IHhoci5yZWFkeVN0YXRlID09PSA0ICkgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGNhbGxlZCBvbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gdW5kZWZpbmVkOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IGtlZXAgYXMgYWN0aXZlIGFueW1vcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBoYW5kbGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0galF1ZXJ5Lm5vb3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHhock9uVW5sb2FkQWJvcnQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHhockNhbGxiYWNrc1sgaGFuZGxlIF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgYW4gYWJvcnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpc0Fib3J0ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWJvcnQgaXQgbWFudWFsbHkgaWYgbmVlZGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHhoci5yZWFkeVN0YXRlICE9PSA0ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0geGhyLnN0YXR1czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVycyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlcyA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sID0geGhyLnJlc3BvbnNlWE1MOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnN0cnVjdCByZXNwb25zZSBsaXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHhtbCAmJiB4bWwuZG9jdW1lbnRFbGVtZW50IC8qICM0OTU4ICovICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlcy54bWwgPSB4bWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZXMudGV4dCA9IHhoci5yZXNwb25zZVRleHQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCB0aHJvd3MgYW4gZXhjZXB0aW9uIHdoZW4gYWNjZXNzaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGF0dXNUZXh0IGZvciBmYXVsdHkgY3Jvc3MtZG9tYWluIHJlcXVlc3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goIGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugbm9ybWFsaXplIHdpdGggV2Via2l0IGdpdmluZyBhbiBlbXB0eSBzdGF0dXNUZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbHRlciBzdGF0dXMgZm9yIG5vbiBzdGFuZGFyZCBiZWhhdmlvcnMKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcmVxdWVzdCBpcyBsb2NhbCBhbmQgd2UgaGF2ZSBkYXRhOiBhc3N1bWUgYSBzdWNjZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAoc3VjY2VzcyB3aXRoIG5vIGRhdGEgd29uJ3QgZ2V0IG5vdGlmaWVkLCB0aGF0J3MgdGhlIGJlc3Qgd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbiBkbyBnaXZlbiBjdXJyZW50IGltcGxlbWVudGF0aW9ucykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIXN0YXR1cyAmJiBzLmlzTG9jYWwgJiYgIXMuY3Jvc3NEb21haW4gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcmVzcG9uc2VzLnRleHQgPyAyMDAgOiA0MDQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSUUgLSAjMTQ1MDogc29tZXRpbWVzIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMTIyMyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSAyMDQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKCBmaXJlZm94QWNjZXNzRXhjZXB0aW9uICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIWlzQWJvcnQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKCAtMSwgZmlyZWZveEFjY2Vzc0V4Y2VwdGlvbiApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIGNvbXBsZXRlIGlmIG5lZWRlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCByZXNwb25zZXMgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUoIHN0YXR1cywgc3RhdHVzVGV4dCwgcmVzcG9uc2VzLCByZXNwb25zZUhlYWRlcnMgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlJ3JlIGluIHN5bmMgbW9kZSBvciBpdCdzIGluIGNhY2hlCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBoYXMgYmVlbiByZXRyaWV2ZWQgZGlyZWN0bHkgKElFNiAmIElFNykKICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBtYW51YWxseSBmaXJlIHRoZSBjYWxsYmFjawogICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFzLmFzeW5jIHx8IHhoci5yZWFkeVN0YXRlID09PSA0ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZSA9ICsreGhySWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHhock9uVW5sb2FkQWJvcnQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBhY3RpdmUgeGhycyBjYWxsYmFja3MgbGlzdCBpZiBuZWVkZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgYXR0YWNoIHRoZSB1bmxvYWQgaGFuZGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIXhockNhbGxiYWNrcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyQ2FsbGJhY2tzID0ge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeSggd2luZG93ICkudW5sb2FkKCB4aHJPblVubG9hZEFib3J0ICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byBsaXN0IG9mIGFjdGl2ZSB4aHJzIGNhbGxiYWNrcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhockNhbGxiYWNrc1sgaGFuZGxlIF0gPSBjYWxsYmFjazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBjYWxsYmFjazsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgICAgIGFib3J0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjYWxsYmFjayApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKDAsMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgoKCgogICAgdmFyIGVsZW1kaXNwbGF5ID0ge30sCiAgICAgICAgaWZyYW1lLCBpZnJhbWVEb2MsCiAgICAgICAgcmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sCiAgICAgICAgcmZ4bnVtID0gL14oWytcLV09KT8oW1xkKy5cLV0rKShbYS16JV0qKSQvaSwKICAgICAgICB0aW1lcklkLAogICAgICAgIGZ4QXR0cnMgPSBbCiAgICAgICAgICAgIC8vIGhlaWdodCBhbmltYXRpb25zCiAgICAgICAgICAgIFsgImhlaWdodCIsICJtYXJnaW5Ub3AiLCAibWFyZ2luQm90dG9tIiwgInBhZGRpbmdUb3AiLCAicGFkZGluZ0JvdHRvbSIgXSwKICAgICAgICAgICAgLy8gd2lkdGggYW5pbWF0aW9ucwogICAgICAgICAgICBbICJ3aWR0aCIsICJtYXJnaW5MZWZ0IiwgIm1hcmdpblJpZ2h0IiwgInBhZGRpbmdMZWZ0IiwgInBhZGRpbmdSaWdodCIgXSwKICAgICAgICAgICAgLy8gb3BhY2l0eSBhbmltYXRpb25zCiAgICAgICAgICAgIFsgIm9wYWNpdHkiIF0KICAgICAgICBdLAogICAgICAgIGZ4Tm93OwoKICAgIGpRdWVyeS5mbi5leHRlbmQoewogICAgICAgIHNob3c6IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHsKICAgICAgICAgICAgdmFyIGVsZW0sIGRpc3BsYXk7CgogICAgICAgICAgICBpZiAoIHNwZWVkIHx8IHNwZWVkID09PSAwICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0ZSggZ2VuRngoInNob3ciLCAzKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGogPSB0aGlzLmxlbmd0aDsgaSA8IGo7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICBlbGVtID0gdGhpc1sgaSBdOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW0uc3R5bGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3QKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhalF1ZXJ5Ll9kYXRhKGVsZW0sICJvbGRkaXNwbGF5IikgJiYgZGlzcGxheSA9PT0gIm5vbmUiICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBzdWNoIGFuIGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkaXNwbGF5ID09PSAiIiAmJiBqUXVlcnkuY3NzKGVsZW0sICJkaXNwbGF5IikgPT09ICJub25lIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5fZGF0YSggZWxlbSwgIm9sZGRpc3BsYXkiLCBkZWZhdWx0RGlzcGxheShlbGVtLm5vZGVOYW1lKSApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wCiAgICAgICAgICAgICAgICAvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93CiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGo7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICBlbGVtID0gdGhpc1sgaSBdOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW0uc3R5bGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRpc3BsYXkgPT09ICIiIHx8IGRpc3BsYXkgPT09ICJub25lIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgIm9sZGRpc3BsYXkiICkgfHwgIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBoaWRlOiBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7CiAgICAgICAgICAgIGlmICggc3BlZWQgfHwgc3BlZWQgPT09IDAgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRlKCBnZW5GeCgiaGlkZSIsIDMpLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayk7CgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIGVsZW0sIGRpc3BsYXksCiAgICAgICAgICAgICAgICAgICAgaSA9IDAsCiAgICAgICAgICAgICAgICAgICAgaiA9IHRoaXMubGVuZ3RoOwoKICAgICAgICAgICAgICAgIGZvciAoIDsgaSA8IGo7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICBlbGVtID0gdGhpc1tpXTsKICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW0uc3R5bGUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCAiZGlzcGxheSIgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZGlzcGxheSAhPT0gIm5vbmUiICYmICFqUXVlcnkuX2RhdGEoIGVsZW0sICJvbGRkaXNwbGF5IiApICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5Ll9kYXRhKCBlbGVtLCAib2xkZGlzcGxheSIsIGRpc3BsYXkgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AKICAgICAgICAgICAgICAgIC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3cKICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgajsgaSsrICkgewogICAgICAgICAgICAgICAgICAgIGlmICggdGhpc1tpXS5zdHlsZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tpXS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8vIFNhdmUgdGhlIG9sZCB0b2dnbGUgZnVuY3Rpb24KICAgICAgICBfdG9nZ2xlOiBqUXVlcnkuZm4udG9nZ2xlLAoKICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKCBmbiwgZm4yLCBjYWxsYmFjayApIHsKICAgICAgICAgICAgdmFyIGJvb2wgPSB0eXBlb2YgZm4gPT09ICJib29sZWFuIjsKCiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oZm4pICYmIGpRdWVyeS5pc0Z1bmN0aW9uKGZuMikgKSB7CiAgICAgICAgICAgICAgICB0aGlzLl90b2dnbGUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoKICAgICAgICAgICAgfSBlbHNlIGlmICggZm4gPT0gbnVsbCB8fCBib29sICkgewogICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGJvb2wgPyBmbiA6IGpRdWVyeSh0aGlzKS5pcygiOmhpZGRlbiIpOwogICAgICAgICAgICAgICAgICAgIGpRdWVyeSh0aGlzKVsgc3RhdGUgPyAic2hvdyIgOiAiaGlkZSIgXSgpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlKGdlbkZ4KCJ0b2dnbGUiLCAzKSwgZm4sIGZuMiwgY2FsbGJhY2spOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcigiOmhpZGRlbiIpLmNzcygib3BhY2l0eSIsIDApLnNob3coKS5lbmQoKQogICAgICAgICAgICAgICAgLmFuaW1hdGUoe29wYWNpdHk6IHRvfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2spOwogICAgICAgIH0sCgogICAgICAgIGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHsKICAgICAgICAgICAgdmFyIG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTsKCiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goIG9wdGFsbC5jb21wbGV0ZSwgWyBmYWxzZSBdICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIERvIG5vdCBjaGFuZ2UgcmVmZXJlbmNlZCBwcm9wZXJ0aWVzIGFzIHBlci1wcm9wZXJ0eSBlYXNpbmcgd2lsbCBiZSBsb3N0CiAgICAgICAgICAgIHByb3AgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApOwoKICAgICAgICAgICAgZnVuY3Rpb24gZG9BbmltYXRpb24oKSB7CiAgICAgICAgICAgICAgICAvLyBYWFggJ3RoaXMnIGRvZXMgbm90IGFsd2F5cyBoYXZlIGEgbm9kZU5hbWUgd2hlbiBydW5uaW5nIHRoZQogICAgICAgICAgICAgICAgLy8gdGVzdCBzdWl0ZQoKICAgICAgICAgICAgICAgIGlmICggb3B0YWxsLnF1ZXVlID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkuX21hcmsoIHRoaXMgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgb3B0ID0galF1ZXJ5LmV4dGVuZCgge30sIG9wdGFsbCApLAogICAgICAgICAgICAgICAgICAgIGlzRWxlbWVudCA9IHRoaXMubm9kZVR5cGUgPT09IDEsCiAgICAgICAgICAgICAgICAgICAgaGlkZGVuID0gaXNFbGVtZW50ICYmIGpRdWVyeSh0aGlzKS5pcygiOmhpZGRlbiIpLAogICAgICAgICAgICAgICAgICAgIG5hbWUsIHZhbCwgcCwgZSwKICAgICAgICAgICAgICAgICAgICBwYXJ0cywgc3RhcnQsIGVuZCwgdW5pdCwKICAgICAgICAgICAgICAgICAgICBtZXRob2Q7CgogICAgICAgICAgICAgICAgLy8gd2lsbCBzdG9yZSBwZXIgcHJvcGVydHkgZWFzaW5nIGFuZCBiZSB1c2VkIHRvIGRldGVybWluZSB3aGVuIGFuIGFuaW1hdGlvbiBpcyBjb21wbGV0ZQogICAgICAgICAgICAgICAgb3B0LmFuaW1hdGVkUHJvcGVydGllcyA9IHt9OwoKICAgICAgICAgICAgICAgIGZvciAoIHAgaW4gcHJvcCApIHsKCiAgICAgICAgICAgICAgICAgICAgLy8gcHJvcGVydHkgbmFtZSBub3JtYWxpemF0aW9uCiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIHAgKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIHAgIT09IG5hbWUgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BbIG5hbWUgXSA9IHByb3BbIHAgXTsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHByb3BbIHAgXTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhbCA9IHByb3BbIG5hbWUgXTsKCiAgICAgICAgICAgICAgICAgICAgLy8gZWFzaW5nIHJlc29sdXRpb246IHBlciBwcm9wZXJ0eSA+IG9wdC5zcGVjaWFsRWFzaW5nID4gb3B0LmVhc2luZyA+ICdzd2luZycgKGRlZmF1bHQpCiAgICAgICAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5hbmltYXRlZFByb3BlcnRpZXNbIG5hbWUgXSA9IHZhbFsgMSBdOwogICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBwcm9wWyBuYW1lIF0gPSB2YWxbIDAgXTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBvcHQuYW5pbWF0ZWRQcm9wZXJ0aWVzWyBuYW1lIF0gPSBvcHQuc3BlY2lhbEVhc2luZyAmJiBvcHQuc3BlY2lhbEVhc2luZ1sgbmFtZSBdIHx8IG9wdC5lYXNpbmcgfHwgJ3N3aW5nJzsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICggdmFsID09PSAiaGlkZSIgJiYgaGlkZGVuIHx8IHZhbCA9PT0gInNob3ciICYmICFoaWRkZW4gKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHQuY29tcGxldGUuY2FsbCggdGhpcyApOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCBpc0VsZW1lbnQgJiYgKCBuYW1lID09PSAiaGVpZ2h0IiB8fCBuYW1lID09PSAid2lkdGgiICkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dAogICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICBvcHQub3ZlcmZsb3cgPSBbIHRoaXMuc3R5bGUub3ZlcmZsb3csIHRoaXMuc3R5bGUub3ZlcmZsb3dYLCB0aGlzLnN0eWxlLm92ZXJmbG93WSBdOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGRpc3BsYXkgcHJvcGVydHkgdG8gaW5saW5lLWJsb2NrIGZvciBoZWlnaHQvd2lkdGgKICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGpRdWVyeS5jc3MoIHRoaXMsICJkaXNwbGF5IiApID09PSAiaW5saW5lIiAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmNzcyggdGhpcywgImZsb2F0IiApID09PSAibm9uZSIgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5saW5lLWxldmVsIGVsZW1lbnRzIGFjY2VwdCBpbmxpbmUtYmxvY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBibG9jay1sZXZlbCBlbGVtZW50cyBuZWVkIHRvIGJlIGlubGluZSB3aXRoIGxheW91dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhalF1ZXJ5LnN1cHBvcnQuaW5saW5lQmxvY2tOZWVkc0xheW91dCB8fCBkZWZhdWx0RGlzcGxheSggdGhpcy5ub2RlTmFtZSApID09PSAiaW5saW5lIiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSAiaW5saW5lLWJsb2NrIjsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuem9vbSA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCBvcHQub3ZlcmZsb3cgIT0gbnVsbCApIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLm92ZXJmbG93ID0gImhpZGRlbiI7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZm9yICggcCBpbiBwcm9wICkgewogICAgICAgICAgICAgICAgICAgIGUgPSBuZXcgalF1ZXJ5LmZ4KCB0aGlzLCBvcHQsIHAgKTsKICAgICAgICAgICAgICAgICAgICB2YWwgPSBwcm9wWyBwIF07CgogICAgICAgICAgICAgICAgICAgIGlmICggcmZ4dHlwZXMudGVzdCggdmFsICkgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmFja3Mgd2hldGhlciB0byBzaG93IG9yIGhpZGUgYmFzZWQgb24gcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgICAgICAvLyBkYXRhIGF0dGFjaGVkIHRvIHRoZSBlbGVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IGpRdWVyeS5fZGF0YSggdGhpcywgInRvZ2dsZSIgKyBwICkgfHwgKCB2YWwgPT09ICJ0b2dnbGUiID8gaGlkZGVuID8gInNob3ciIDogImhpZGUiIDogMCApOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG1ldGhvZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5fZGF0YSggdGhpcywgInRvZ2dsZSIgKyBwLCBtZXRob2QgPT09ICJzaG93IiA/ICJoaWRlIiA6ICJzaG93IiApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZVsgbWV0aG9kIF0oKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVbIHZhbCBdKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMgPSByZnhudW0uZXhlYyggdmFsICk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gZS5jdXIoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGFydHMgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBwYXJzZUZsb2F0KCBwYXJ0c1syXSApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdCA9IHBhcnRzWzNdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcCBdID8gIiIgOiAicHgiICk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIHN0YXJ0aW5nIHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHVuaXQgIT09ICJweCIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnN0eWxlKCB0aGlzLCBwLCAoZW5kIHx8IDEpICsgdW5pdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSAoIChlbmQgfHwgMSkgLyBlLmN1cigpICkgKiBzdGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkuc3R5bGUoIHRoaXMsIHAsIHN0YXJ0ICsgdW5pdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSArPS8tPSB0b2tlbiB3YXMgcHJvdmlkZWQsIHdlJ3JlIGRvaW5nIGEgcmVsYXRpdmUgYW5pbWF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcnRzWzFdICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9ICggKHBhcnRzWyAxIF0gPT09ICItPSIgPyAtMSA6IDEpICogZW5kICkgKyBzdGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmN1c3RvbSggc3RhcnQsIGVuZCwgdW5pdCApOwoKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3VzdG9tKCBzdGFydCwgdmFsLCAiIiApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIEZvciBKUyBzdHJpY3QgY29tcGxpYW5jZQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBvcHRhbGwucXVldWUgPT09IGZhbHNlID8KICAgICAgICAgICAgICAgIHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6CiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7CiAgICAgICAgfSwKCiAgICAgICAgc3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7CiAgICAgICAgICAgIGlmICggdHlwZW9mIHR5cGUgIT09ICJzdHJpbmciICkgewogICAgICAgICAgICAgICAgZ290b0VuZCA9IGNsZWFyUXVldWU7CiAgICAgICAgICAgICAgICBjbGVhclF1ZXVlID0gdHlwZTsKICAgICAgICAgICAgICAgIHR5cGUgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgdGhpcy5xdWV1ZSggdHlwZSB8fCAiZngiLCBbXSApOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGluZGV4LAogICAgICAgICAgICAgICAgICAgIGhhZFRpbWVycyA9IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIHRpbWVycyA9IGpRdWVyeS50aW1lcnMsCiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGpRdWVyeS5fZGF0YSggdGhpcyApOwoKICAgICAgICAgICAgICAgIC8vIGNsZWFyIG1hcmtlciBjb3VudGVycyBpZiB3ZSBrbm93IHRoZXkgd29uJ3QgYmUKICAgICAgICAgICAgICAgIGlmICggIWdvdG9FbmQgKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5Ll91bm1hcmsoIHRydWUsIHRoaXMgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdG9wUXVldWUoIGVsZW0sIGRhdGEsIGluZGV4ICkgewogICAgICAgICAgICAgICAgICAgIHZhciBob29rcyA9IGRhdGFbIGluZGV4IF07CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnJlbW92ZURhdGEoIGVsZW0sIGluZGV4LCB0cnVlICk7CiAgICAgICAgICAgICAgICAgICAgaG9va3Muc3RvcCggZ290b0VuZCApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICggdHlwZSA9PSBudWxsICkgewogICAgICAgICAgICAgICAgICAgIGZvciAoIGluZGV4IGluIGRhdGEgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgaW5kZXguaW5kZXhPZigiLnJ1biIpID09PSBpbmRleC5sZW5ndGggLSA0ICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcFF1ZXVlKCB0aGlzLCBkYXRhLCBpbmRleCApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICggZGF0YVsgaW5kZXggPSB0eXBlICsgIi5ydW4iIF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICl7CiAgICAgICAgICAgICAgICAgICAgc3RvcFF1ZXVlKCB0aGlzLCBkYXRhLCBpbmRleCApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiAodHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZ290b0VuZCApIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JjZSB0aGUgbmV4dCBzdGVwIHRvIGJlIHRoZSBsYXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lcnNbIGluZGV4IF0oIHRydWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyc1sgaW5kZXggXS5zYXZlU3RhdGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBoYWRUaW1lcnMgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBzdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkCiAgICAgICAgICAgICAgICAvLyB0aW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoIHdpbGwgZGVxdWV1ZQogICAgICAgICAgICAgICAgLy8gYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQKICAgICAgICAgICAgICAgIGlmICggISggZ290b0VuZCAmJiBoYWRUaW1lcnMgKSApIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgfSk7CgovLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5CiAgICBmdW5jdGlvbiBjcmVhdGVGeE5vdygpIHsKICAgICAgICBzZXRUaW1lb3V0KCBjbGVhckZ4Tm93LCAwICk7CiAgICAgICAgcmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjbGVhckZ4Tm93KCkgewogICAgICAgIGZ4Tm93ID0gdW5kZWZpbmVkOwogICAgfQoKLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb24KICAgIGZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBudW0gKSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBqUXVlcnkuZWFjaCggZnhBdHRycy5jb25jYXQuYXBwbHkoW10sIGZ4QXR0cnMuc2xpY2UoIDAsIG51bSApKSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIG9ialsgdGhpcyBdID0gdHlwZTsKICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0KCi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnMKICAgIGpRdWVyeS5lYWNoKHsKICAgICAgICBzbGlkZURvd246IGdlbkZ4KCAic2hvdyIsIDEgKSwKICAgICAgICBzbGlkZVVwOiBnZW5GeCggImhpZGUiLCAxICksCiAgICAgICAgc2xpZGVUb2dnbGU6IGdlbkZ4KCAidG9nZ2xlIiwgMSApLAogICAgICAgIGZhZGVJbjogeyBvcGFjaXR5OiAic2hvdyIgfSwKICAgICAgICBmYWRlT3V0OiB7IG9wYWNpdHk6ICJoaWRlIiB9LAogICAgICAgIGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogInRvZ2dsZSIgfQogICAgfSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkgewogICAgICAgIGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTsKICAgICAgICB9OwogICAgfSk7CgogICAgalF1ZXJ5LmV4dGVuZCh7CiAgICAgICAgc3BlZWQ6IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHsKICAgICAgICAgICAgdmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gIm9iamVjdCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHsKICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsCiAgICAgICAgICAgICAgICBkdXJhdGlvbjogc3BlZWQsCiAgICAgICAgICAgICAgICBlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmcKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gIm51bWJlciIgPyBvcHQuZHVyYXRpb24gOgogICAgICAgICAgICAgICAgb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgPyBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7CgogICAgICAgICAgICAvLyBub3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiAiZngiCiAgICAgICAgICAgIGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkgewogICAgICAgICAgICAgICAgb3B0LnF1ZXVlID0gImZ4IjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gUXVldWVpbmcKICAgICAgICAgICAgb3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTsKCiAgICAgICAgICAgIG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCBub1VubWFyayApIHsKICAgICAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHsKICAgICAgICAgICAgICAgICAgICBvcHQub2xkLmNhbGwoIHRoaXMgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIG9wdC5xdWV1ZSApIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBub1VubWFyayAhPT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5Ll91bm1hcmsoIHRoaXMgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHJldHVybiBvcHQ7CiAgICAgICAgfSwKCiAgICAgICAgZWFzaW5nOiB7CiAgICAgICAgICAgIGxpbmVhcjogZnVuY3Rpb24oIHAsIG4sIGZpcnN0TnVtLCBkaWZmICkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TnVtICsgZGlmZiAqIHA7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN3aW5nOiBmdW5jdGlvbiggcCwgbiwgZmlyc3ROdW0sIGRpZmYgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKCAoIC1NYXRoLmNvcyggcCpNYXRoLlBJICkgLyAyICkgKyAwLjUgKSAqIGRpZmYgKyBmaXJzdE51bTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHRpbWVyczogW10sCgogICAgICAgIGZ4OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCApIHsKICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKICAgICAgICAgICAgdGhpcy5lbGVtID0gZWxlbTsKICAgICAgICAgICAgdGhpcy5wcm9wID0gcHJvcDsKCiAgICAgICAgICAgIG9wdGlvbnMub3JpZyA9IG9wdGlvbnMub3JpZyB8fCB7fTsKICAgICAgICB9CgogICAgfSk7CgogICAgalF1ZXJ5LmZ4LnByb3RvdHlwZSA9IHsKICAgICAgICAvLyBTaW1wbGUgZnVuY3Rpb24gZm9yIHNldHRpbmcgYSBzdHlsZSB2YWx1ZQogICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7CiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICggalF1ZXJ5LmZ4LnN0ZXBbIHRoaXMucHJvcCBdIHx8IGpRdWVyeS5meC5zdGVwLl9kZWZhdWx0ICkoIHRoaXMgKTsKICAgICAgICB9LAoKICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgc2l6ZQogICAgICAgIGN1cjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5lbGVtWyB0aGlzLnByb3AgXSAhPSBudWxsICYmICghdGhpcy5lbGVtLnN0eWxlIHx8IHRoaXMuZWxlbS5zdHlsZVsgdGhpcy5wcm9wIF0gPT0gbnVsbCkgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtWyB0aGlzLnByb3AgXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHBhcnNlZCwKICAgICAgICAgICAgICAgIHIgPSBqUXVlcnkuY3NzKCB0aGlzLmVsZW0sIHRoaXMucHJvcCApOwogICAgICAgICAgICAvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kICJhdXRvIiBhcmUgY29udmVydGVkIHRvIDAsCiAgICAgICAgICAgIC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgInJvdGF0ZSgxcmFkKSIgYXJlIHJldHVybmVkIGFzIGlzLAogICAgICAgICAgICAvLyBzaW1wbGUgdmFsdWVzIHN1Y2ggYXMgIjEwcHgiIGFyZSBwYXJzZWQgdG8gRmxvYXQuCiAgICAgICAgICAgIHJldHVybiBpc05hTiggcGFyc2VkID0gcGFyc2VGbG9hdCggciApICkgPyAhciB8fCByID09PSAiYXV0byIgPyAwIDogciA6IHBhcnNlZDsKICAgICAgICB9LAoKICAgICAgICAvLyBTdGFydCBhbiBhbmltYXRpb24gZnJvbSBvbmUgbnVtYmVyIHRvIGFub3RoZXIKICAgICAgICBjdXN0b206IGZ1bmN0aW9uKCBmcm9tLCB0bywgdW5pdCApIHsKICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgICAgICAgICAgZnggPSBqUXVlcnkuZng7CgogICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCk7CiAgICAgICAgICAgIHRoaXMuZW5kID0gdG87CiAgICAgICAgICAgIHRoaXMubm93ID0gdGhpcy5zdGFydCA9IGZyb207CiAgICAgICAgICAgIHRoaXMucG9zID0gdGhpcy5zdGF0ZSA9IDA7CiAgICAgICAgICAgIHRoaXMudW5pdCA9IHVuaXQgfHwgdGhpcy51bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgdGhpcy5wcm9wIF0gPyAiIiA6ICJweCIgKTsKCiAgICAgICAgICAgIGZ1bmN0aW9uIHQoIGdvdG9FbmQgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5zdGVwKCBnb3RvRW5kICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHQucXVldWUgPSB0aGlzLm9wdGlvbnMucXVldWU7CiAgICAgICAgICAgIHQuZWxlbSA9IHRoaXMuZWxlbTsKICAgICAgICAgICAgdC5zYXZlU3RhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmICggc2VsZi5vcHRpb25zLmhpZGUgJiYgalF1ZXJ5Ll9kYXRhKCBzZWxmLmVsZW0sICJmeHNob3ciICsgc2VsZi5wcm9wICkgPT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkuX2RhdGEoIHNlbGYuZWxlbSwgImZ4c2hvdyIgKyBzZWxmLnByb3AsIHNlbGYuc3RhcnQgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGlmICggdCgpICYmIGpRdWVyeS50aW1lcnMucHVzaCh0KSAmJiAhdGltZXJJZCApIHsKICAgICAgICAgICAgICAgIHRpbWVySWQgPSBzZXRJbnRlcnZhbCggZngudGljaywgZnguaW50ZXJ2YWwgKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8vIFNpbXBsZSAnc2hvdycgZnVuY3Rpb24KICAgICAgICBzaG93OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGRhdGFTaG93ID0galF1ZXJ5Ll9kYXRhKCB0aGlzLmVsZW0sICJmeHNob3ciICsgdGhpcy5wcm9wICk7CgogICAgICAgICAgICAvLyBSZW1lbWJlciB3aGVyZSB3ZSBzdGFydGVkLCBzbyB0aGF0IHdlIGNhbiBnbyBiYWNrIHRvIGl0IGxhdGVyCiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5vcmlnWyB0aGlzLnByb3AgXSA9IGRhdGFTaG93IHx8IGpRdWVyeS5zdHlsZSggdGhpcy5lbGVtLCB0aGlzLnByb3AgKTsKICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNob3cgPSB0cnVlOwoKICAgICAgICAgICAgLy8gQmVnaW4gdGhlIGFuaW1hdGlvbgogICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB3ZSBzdGFydCBhdCBhIHNtYWxsIHdpZHRoL2hlaWdodCB0byBhdm9pZCBhbnkgZmxhc2ggb2YgY29udGVudAogICAgICAgICAgICBpZiAoIGRhdGFTaG93ICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAvLyBUaGlzIHNob3cgaXMgcGlja2luZyB1cCB3aGVyZSBhIHByZXZpb3VzIGhpZGUgb3Igc2hvdyBsZWZ0IG9mZgogICAgICAgICAgICAgICAgdGhpcy5jdXN0b20oIHRoaXMuY3VyKCksIGRhdGFTaG93ICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbSggdGhpcy5wcm9wID09PSAid2lkdGgiIHx8IHRoaXMucHJvcCA9PT0gImhlaWdodCIgPyAxIDogMCwgdGhpcy5jdXIoKSApOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBTdGFydCBieSBzaG93aW5nIHRoZSBlbGVtZW50CiAgICAgICAgICAgIGpRdWVyeSggdGhpcy5lbGVtICkuc2hvdygpOwogICAgICAgIH0sCgogICAgICAgIC8vIFNpbXBsZSAnaGlkZScgZnVuY3Rpb24KICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgLy8gUmVtZW1iZXIgd2hlcmUgd2Ugc3RhcnRlZCwgc28gdGhhdCB3ZSBjYW4gZ28gYmFjayB0byBpdCBsYXRlcgogICAgICAgICAgICB0aGlzLm9wdGlvbnMub3JpZ1sgdGhpcy5wcm9wIF0gPSBqUXVlcnkuX2RhdGEoIHRoaXMuZWxlbSwgImZ4c2hvdyIgKyB0aGlzLnByb3AgKSB8fCBqUXVlcnkuc3R5bGUoIHRoaXMuZWxlbSwgdGhpcy5wcm9wICk7CiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5oaWRlID0gdHJ1ZTsKCiAgICAgICAgICAgIC8vIEJlZ2luIHRoZSBhbmltYXRpb24KICAgICAgICAgICAgdGhpcy5jdXN0b20oIHRoaXMuY3VyKCksIDAgKTsKICAgICAgICB9LAoKICAgICAgICAvLyBFYWNoIHN0ZXAgb2YgYW4gYW5pbWF0aW9uCiAgICAgICAgc3RlcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7CiAgICAgICAgICAgIHZhciBwLCBuLCBjb21wbGV0ZSwKICAgICAgICAgICAgICAgIHQgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLAogICAgICAgICAgICAgICAgZG9uZSA9IHRydWUsCiAgICAgICAgICAgICAgICBlbGVtID0gdGhpcy5lbGVtLAogICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCiAgICAgICAgICAgIGlmICggZ290b0VuZCB8fCB0ID49IG9wdGlvbnMuZHVyYXRpb24gKyB0aGlzLnN0YXJ0VGltZSApIHsKICAgICAgICAgICAgICAgIHRoaXMubm93ID0gdGhpcy5lbmQ7CiAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IHRoaXMuc3RhdGUgPSAxOwogICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTsKCiAgICAgICAgICAgICAgICBvcHRpb25zLmFuaW1hdGVkUHJvcGVydGllc1sgdGhpcy5wcm9wIF0gPSB0cnVlOwoKICAgICAgICAgICAgICAgIGZvciAoIHAgaW4gb3B0aW9ucy5hbmltYXRlZFByb3BlcnRpZXMgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBvcHRpb25zLmFuaW1hdGVkUHJvcGVydGllc1sgcCBdICE9PSB0cnVlICkgewogICAgICAgICAgICAgICAgICAgICAgICBkb25lID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICggZG9uZSApIHsKICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgb3ZlcmZsb3cKICAgICAgICAgICAgICAgICAgICBpZiAoIG9wdGlvbnMub3ZlcmZsb3cgIT0gbnVsbCAmJiAhalF1ZXJ5LnN1cHBvcnQuc2hyaW5rV3JhcEJsb2NrcyApIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5lYWNoKCBbICIiLCAiWCIsICJZIiBdLCBmdW5jdGlvbiggaW5kZXgsIHZhbHVlICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5zdHlsZVsgIm92ZXJmbG93IiArIHZhbHVlIF0gPSBvcHRpb25zLm92ZXJmbG93WyBpbmRleCBdOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIEhpZGUgdGhlIGVsZW1lbnQgaWYgdGhlICJoaWRlIiBvcGVyYXRpb24gd2FzIGRvbmUKICAgICAgICAgICAgICAgICAgICBpZiAoIG9wdGlvbnMuaGlkZSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KCBlbGVtICkuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgdGhlIHByb3BlcnRpZXMsIGlmIHRoZSBpdGVtIGhhcyBiZWVuIGhpZGRlbiBvciBzaG93bgogICAgICAgICAgICAgICAgICAgIGlmICggb3B0aW9ucy5oaWRlIHx8IG9wdGlvbnMuc2hvdyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggcCBpbiBvcHRpb25zLmFuaW1hdGVkUHJvcGVydGllcyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5zdHlsZSggZWxlbSwgcCwgb3B0aW9ucy5vcmlnWyBwIF0gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5yZW1vdmVEYXRhKCBlbGVtLCAiZnhzaG93IiArIHAsIHRydWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRvZ2dsZSBkYXRhIGlzIG5vIGxvbmdlciBuZWVkZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5yZW1vdmVEYXRhKCBlbGVtLCAidG9nZ2xlIiArIHAsIHRydWUgKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgY29tcGxldGUgZnVuY3Rpb24KICAgICAgICAgICAgICAgICAgICAvLyBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgY29tcGxldGUgZnVuY3Rpb24gdGhyb3dzIGFuIGV4Y2VwdGlvbgogICAgICAgICAgICAgICAgICAgIC8vIHdlIG11c3QgZW5zdXJlIGl0IHdvbid0IGJlIGNhbGxlZCB0d2ljZS4gIzU2ODQKCiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSBvcHRpb25zLmNvbXBsZXRlOwogICAgICAgICAgICAgICAgICAgIGlmICggY29tcGxldGUgKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNvbXBsZXRlID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlLmNhbGwoIGVsZW0gKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGNsYXNzaWNhbCBlYXNpbmcgY2Fubm90IGJlIHVzZWQgd2l0aCBhbiBJbmZpbml0eSBkdXJhdGlvbgogICAgICAgICAgICAgICAgaWYgKCBvcHRpb25zLmR1cmF0aW9uID09IEluZmluaXR5ICkgewogICAgICAgICAgICAgICAgICAgIHRoaXMubm93ID0gdDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbiA9IHQgLSB0aGlzLnN0YXJ0VGltZTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gbiAvIG9wdGlvbnMuZHVyYXRpb247CgogICAgICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gdGhlIGVhc2luZyBmdW5jdGlvbiwgZGVmYXVsdHMgdG8gc3dpbmcKICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IGpRdWVyeS5lYXNpbmdbIG9wdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzW3RoaXMucHJvcF0gXSggdGhpcy5zdGF0ZSwgbiwgMCwgMSwgb3B0aW9ucy5kdXJhdGlvbiApOwogICAgICAgICAgICAgICAgICAgIHRoaXMubm93ID0gdGhpcy5zdGFydCArICggKHRoaXMuZW5kIC0gdGhpcy5zdGFydCkgKiB0aGlzLnBvcyApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gUGVyZm9ybSB0aGUgbmV4dCBzdGVwIG9mIHRoZSBhbmltYXRpb24KICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH07CgogICAgalF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmZ4LCB7CiAgICAgICAgdGljazogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciB0aW1lciwKICAgICAgICAgICAgICAgIHRpbWVycyA9IGpRdWVyeS50aW1lcnMsCiAgICAgICAgICAgICAgICBpID0gMDsKCiAgICAgICAgICAgIGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgICAgIHRpbWVyID0gdGltZXJzWyBpIF07CiAgICAgICAgICAgICAgICAvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWQKICAgICAgICAgICAgICAgIGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkgewogICAgICAgICAgICAgICAgICAgIHRpbWVycy5zcGxpY2UoIGktLSwgMSApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoICF0aW1lcnMubGVuZ3RoICkgewogICAgICAgICAgICAgICAgalF1ZXJ5LmZ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGludGVydmFsOiAxMywKCiAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTsKICAgICAgICAgICAgdGltZXJJZCA9IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgc3BlZWRzOiB7CiAgICAgICAgICAgIHNsb3c6IDYwMCwKICAgICAgICAgICAgZmFzdDogMjAwLAogICAgICAgICAgICAvLyBEZWZhdWx0IHNwZWVkCiAgICAgICAgICAgIF9kZWZhdWx0OiA0MDAKICAgICAgICB9LAoKICAgICAgICBzdGVwOiB7CiAgICAgICAgICAgIG9wYWNpdHk6IGZ1bmN0aW9uKCBmeCApIHsKICAgICAgICAgICAgICAgIGpRdWVyeS5zdHlsZSggZnguZWxlbSwgIm9wYWNpdHkiLCBmeC5ub3cgKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIF9kZWZhdWx0OiBmdW5jdGlvbiggZnggKSB7CiAgICAgICAgICAgICAgICBpZiAoIGZ4LmVsZW0uc3R5bGUgJiYgZnguZWxlbS5zdHlsZVsgZngucHJvcCBdICE9IG51bGwgKSB7CiAgICAgICAgICAgICAgICAgICAgZnguZWxlbS5zdHlsZVsgZngucHJvcCBdID0gZngubm93ICsgZngudW5pdDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZnguZWxlbVsgZngucHJvcCBdID0gZngubm93OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CgovLyBBZGRzIHdpZHRoL2hlaWdodCBzdGVwIGZ1bmN0aW9ucwovLyBEbyBub3Qgc2V0IGFueXRoaW5nIGJlbG93IDAKICAgIGpRdWVyeS5lYWNoKFsgIndpZHRoIiwgImhlaWdodCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7CiAgICAgICAgalF1ZXJ5LmZ4LnN0ZXBbIHByb3AgXSA9IGZ1bmN0aW9uKCBmeCApIHsKICAgICAgICAgICAgalF1ZXJ5LnN0eWxlKCBmeC5lbGVtLCBwcm9wLCBNYXRoLm1heCgwLCBmeC5ub3cpICsgZngudW5pdCApOwogICAgICAgIH07CiAgICB9KTsKCiAgICBpZiAoIGpRdWVyeS5leHByICYmIGpRdWVyeS5leHByLmZpbHRlcnMgKSB7CiAgICAgICAgalF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkgewogICAgICAgICAgICByZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0gPT09IGZuLmVsZW07CiAgICAgICAgICAgIH0pLmxlbmd0aDsKICAgICAgICB9OwogICAgfQoKLy8gVHJ5IHRvIHJlc3RvcmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50CiAgICBmdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7CgogICAgICAgIGlmICggIWVsZW1kaXNwbGF5WyBub2RlTmFtZSBdICkgewoKICAgICAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5LAogICAgICAgICAgICAgICAgZWxlbSA9IGpRdWVyeSggIjwiICsgbm9kZU5hbWUgKyAiPiIgKS5hcHBlbmRUbyggYm9keSApLAogICAgICAgICAgICAgICAgZGlzcGxheSA9IGVsZW0uY3NzKCAiZGlzcGxheSIgKTsKICAgICAgICAgICAgZWxlbS5yZW1vdmUoKTsKCiAgICAgICAgICAgIC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLAogICAgICAgICAgICAvLyBnZXQgZWxlbWVudCdzIHJlYWwgZGVmYXVsdCBkaXNwbGF5IGJ5IGF0dGFjaGluZyBpdCB0byBhIHRlbXAgaWZyYW1lCiAgICAgICAgICAgIGlmICggZGlzcGxheSA9PT0gIm5vbmUiIHx8IGRpc3BsYXkgPT09ICIiICkgewogICAgICAgICAgICAgICAgLy8gTm8gaWZyYW1lIHRvIHVzZSB5ZXQsIHNvIGNyZWF0ZSBpdAogICAgICAgICAgICAgICAgaWYgKCAhaWZyYW1lICkgewogICAgICAgICAgICAgICAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJpZnJhbWUiICk7CiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLmZyYW1lQm9yZGVyID0gaWZyYW1lLndpZHRoID0gaWZyYW1lLmhlaWdodCA9IDA7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZCggaWZyYW1lICk7CgogICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY2FjaGVhYmxlIGNvcHkgb2YgdGhlIGlmcmFtZSBkb2N1bWVudCBvbiBmaXJzdCBjYWxsLgogICAgICAgICAgICAgICAgLy8gSUUgYW5kIE9wZXJhIHdpbGwgYWxsb3cgdXMgdG8gcmV1c2UgdGhlIGlmcmFtZURvYyB3aXRob3V0IHJlLXdyaXRpbmcgdGhlIGZha2UgSFRNTAogICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQgdG8gaXQ7IFdlYktpdCAmIEZpcmVmb3ggd29uJ3QgYWxsb3cgcmV1c2luZyB0aGUgaWZyYW1lIGRvY3VtZW50LgogICAgICAgICAgICAgICAgaWYgKCAhaWZyYW1lRG9jIHx8ICFpZnJhbWUuY3JlYXRlRWxlbWVudCApIHsKICAgICAgICAgICAgICAgICAgICBpZnJhbWVEb2MgPSAoIGlmcmFtZS5jb250ZW50V2luZG93IHx8IGlmcmFtZS5jb250ZW50RG9jdW1lbnQgKS5kb2N1bWVudDsKICAgICAgICAgICAgICAgICAgICBpZnJhbWVEb2Mud3JpdGUoICggZG9jdW1lbnQuY29tcGF0TW9kZSA9PT0gIkNTUzFDb21wYXQiID8gIjwhZG9jdHlwZSBodG1sPiIgOiAiIiApICsgIjxodG1sPjxib2R5PiIgKTsKICAgICAgICAgICAgICAgICAgICBpZnJhbWVEb2MuY2xvc2UoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBlbGVtID0gaWZyYW1lRG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICk7CgogICAgICAgICAgICAgICAgaWZyYW1lRG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGVsZW0gKTsKCiAgICAgICAgICAgICAgICBkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgImRpc3BsYXkiICk7CiAgICAgICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKCBpZnJhbWUgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5CiAgICAgICAgICAgIGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBlbGVtZGlzcGxheVsgbm9kZU5hbWUgXTsKICAgIH0KCgoKCiAgICB2YXIgcnRhYmxlID0gL150KD86YWJsZXxkfGgpJC9pLAogICAgICAgIHJyb290ID0gL14oPzpib2R5fGh0bWwpJC9pOwoKICAgIGlmICggImdldEJvdW5kaW5nQ2xpZW50UmVjdCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICkgewogICAgICAgIGpRdWVyeS5mbi5vZmZzZXQgPSBmdW5jdGlvbiggb3B0aW9ucyApIHsKICAgICAgICAgICAgdmFyIGVsZW0gPSB0aGlzWzBdLCBib3g7CgogICAgICAgICAgICBpZiAoIG9wdGlvbnMgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkgewogICAgICAgICAgICAgICAgICAgIGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCAhZWxlbSB8fCAhZWxlbS5vd25lckRvY3VtZW50ICkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggZWxlbSA9PT0gZWxlbS5vd25lckRvY3VtZW50LmJvZHkgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4galF1ZXJ5Lm9mZnNldC5ib2R5T2Zmc2V0KCBlbGVtICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICB9IGNhdGNoKGUpIHt9CgogICAgICAgICAgICB2YXIgZG9jID0gZWxlbS5vd25lckRvY3VtZW50LAogICAgICAgICAgICAgICAgZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7CgogICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UncmUgbm90IGRlYWxpbmcgd2l0aCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZQogICAgICAgICAgICBpZiAoICFib3ggfHwgIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkgewogICAgICAgICAgICAgICAgcmV0dXJuIGJveCA/IHsgdG9wOiBib3gudG9wLCBsZWZ0OiBib3gubGVmdCB9IDogeyB0b3A6IDAsIGxlZnQ6IDAgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGJvZHkgPSBkb2MuYm9keSwKICAgICAgICAgICAgICAgIHdpbiA9IGdldFdpbmRvdyhkb2MpLAogICAgICAgICAgICAgICAgY2xpZW50VG9wICA9IGRvY0VsZW0uY2xpZW50VG9wICB8fCBib2R5LmNsaWVudFRvcCAgfHwgMCwKICAgICAgICAgICAgICAgIGNsaWVudExlZnQgPSBkb2NFbGVtLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDAsCiAgICAgICAgICAgICAgICBzY3JvbGxUb3AgID0gd2luLnBhZ2VZT2Zmc2V0IHx8IGpRdWVyeS5zdXBwb3J0LmJveE1vZGVsICYmIGRvY0VsZW0uc2Nyb2xsVG9wICB8fCBib2R5LnNjcm9sbFRvcCwKICAgICAgICAgICAgICAgIHNjcm9sbExlZnQgPSB3aW4ucGFnZVhPZmZzZXQgfHwgalF1ZXJ5LnN1cHBvcnQuYm94TW9kZWwgJiYgZG9jRWxlbS5zY3JvbGxMZWZ0IHx8IGJvZHkuc2Nyb2xsTGVmdCwKICAgICAgICAgICAgICAgIHRvcCAgPSBib3gudG9wICArIHNjcm9sbFRvcCAgLSBjbGllbnRUb3AsCiAgICAgICAgICAgICAgICBsZWZ0ID0gYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdDsKCiAgICAgICAgICAgIHJldHVybiB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0IH07CiAgICAgICAgfTsKCiAgICB9IGVsc2UgewogICAgICAgIGpRdWVyeS5mbi5vZmZzZXQgPSBmdW5jdGlvbiggb3B0aW9ucyApIHsKICAgICAgICAgICAgdmFyIGVsZW0gPSB0aGlzWzBdOwoKICAgICAgICAgICAgaWYgKCBvcHRpb25zICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHsKICAgICAgICAgICAgICAgICAgICBqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggIWVsZW0gfHwgIWVsZW0ub3duZXJEb2N1bWVudCApIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIGVsZW0gPT09IGVsZW0ub3duZXJEb2N1bWVudC5ib2R5ICkgewogICAgICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5vZmZzZXQuYm9keU9mZnNldCggZWxlbSApOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY29tcHV0ZWRTdHlsZSwKICAgICAgICAgICAgICAgIG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50LAogICAgICAgICAgICAgICAgcHJldk9mZnNldFBhcmVudCA9IGVsZW0sCiAgICAgICAgICAgICAgICBkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsCiAgICAgICAgICAgICAgICBkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudCwKICAgICAgICAgICAgICAgIGJvZHkgPSBkb2MuYm9keSwKICAgICAgICAgICAgICAgIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3LAogICAgICAgICAgICAgICAgcHJldkNvbXB1dGVkU3R5bGUgPSBkZWZhdWx0VmlldyA/IGRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKSA6IGVsZW0uY3VycmVudFN0eWxlLAogICAgICAgICAgICAgICAgdG9wID0gZWxlbS5vZmZzZXRUb3AsCiAgICAgICAgICAgICAgICBsZWZ0ID0gZWxlbS5vZmZzZXRMZWZ0OwoKICAgICAgICAgICAgd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbSAhPT0gYm9keSAmJiBlbGVtICE9PSBkb2NFbGVtICkgewogICAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuc3VwcG9ydC5maXhlZFBvc2l0aW9uICYmIHByZXZDb21wdXRlZFN0eWxlLnBvc2l0aW9uID09PSAiZml4ZWQiICkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUgPSBkZWZhdWx0VmlldyA/IGRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbSwgbnVsbCkgOiBlbGVtLmN1cnJlbnRTdHlsZTsKICAgICAgICAgICAgICAgIHRvcCAgLT0gZWxlbS5zY3JvbGxUb3A7CiAgICAgICAgICAgICAgICBsZWZ0IC09IGVsZW0uc2Nyb2xsTGVmdDsKCiAgICAgICAgICAgICAgICBpZiAoIGVsZW0gPT09IG9mZnNldFBhcmVudCApIHsKICAgICAgICAgICAgICAgICAgICB0b3AgICs9IGVsZW0ub2Zmc2V0VG9wOwogICAgICAgICAgICAgICAgICAgIGxlZnQgKz0gZWxlbS5vZmZzZXRMZWZ0OwoKICAgICAgICAgICAgICAgICAgICBpZiAoIGpRdWVyeS5zdXBwb3J0LmRvZXNOb3RBZGRCb3JkZXIgJiYgIShqUXVlcnkuc3VwcG9ydC5kb2VzQWRkQm9yZGVyRm9yVGFibGVBbmRDZWxscyAmJiBydGFibGUudGVzdChlbGVtLm5vZGVOYW1lKSkgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAgKz0gcGFyc2VGbG9hdCggY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCAgKSB8fCAwOwogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICs9IHBhcnNlRmxvYXQoIGNvbXB1dGVkU3R5bGUuYm9yZGVyTGVmdFdpZHRoICkgfHwgMDsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHByZXZPZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7CiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuc3VwcG9ydC5zdWJ0cmFjdHNCb3JkZXJGb3JPdmVyZmxvd05vdFZpc2libGUgJiYgY29tcHV0ZWRTdHlsZS5vdmVyZmxvdyAhPT0gInZpc2libGUiICkgewogICAgICAgICAgICAgICAgICAgIHRvcCAgKz0gcGFyc2VGbG9hdCggY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCAgKSB8fCAwOwogICAgICAgICAgICAgICAgICAgIGxlZnQgKz0gcGFyc2VGbG9hdCggY29tcHV0ZWRTdHlsZS5ib3JkZXJMZWZ0V2lkdGggKSB8fCAwOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHByZXZDb21wdXRlZFN0eWxlID0gY29tcHV0ZWRTdHlsZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBwcmV2Q29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PT0gInJlbGF0aXZlIiB8fCBwcmV2Q29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PT0gInN0YXRpYyIgKSB7CiAgICAgICAgICAgICAgICB0b3AgICs9IGJvZHkub2Zmc2V0VG9wOwogICAgICAgICAgICAgICAgbGVmdCArPSBib2R5Lm9mZnNldExlZnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggalF1ZXJ5LnN1cHBvcnQuZml4ZWRQb3NpdGlvbiAmJiBwcmV2Q29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PT0gImZpeGVkIiApIHsKICAgICAgICAgICAgICAgIHRvcCAgKz0gTWF0aC5tYXgoIGRvY0VsZW0uc2Nyb2xsVG9wLCBib2R5LnNjcm9sbFRvcCApOwogICAgICAgICAgICAgICAgbGVmdCArPSBNYXRoLm1heCggZG9jRWxlbS5zY3JvbGxMZWZ0LCBib2R5LnNjcm9sbExlZnQgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfTsKICAgICAgICB9OwogICAgfQoKICAgIGpRdWVyeS5vZmZzZXQgPSB7CgogICAgICAgIGJvZHlPZmZzZXQ6IGZ1bmN0aW9uKCBib2R5ICkgewogICAgICAgICAgICB2YXIgdG9wID0gYm9keS5vZmZzZXRUb3AsCiAgICAgICAgICAgICAgICBsZWZ0ID0gYm9keS5vZmZzZXRMZWZ0OwoKICAgICAgICAgICAgaWYgKCBqUXVlcnkuc3VwcG9ydC5kb2VzTm90SW5jbHVkZU1hcmdpbkluQm9keU9mZnNldCApIHsKICAgICAgICAgICAgICAgIHRvcCAgKz0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyhib2R5LCAibWFyZ2luVG9wIikgKSB8fCAwOwogICAgICAgICAgICAgICAgbGVmdCArPSBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKGJvZHksICJtYXJnaW5MZWZ0IikgKSB8fCAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9OwogICAgICAgIH0sCgogICAgICAgIHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7CiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sICJwb3NpdGlvbiIgKTsKCiAgICAgICAgICAgIC8vIHNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW0KICAgICAgICAgICAgaWYgKCBwb3NpdGlvbiA9PT0gInN0YXRpYyIgKSB7CiAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLnBvc2l0aW9uID0gInJlbGF0aXZlIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSwKICAgICAgICAgICAgICAgIGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCksCiAgICAgICAgICAgICAgICBjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCAidG9wIiApLAogICAgICAgICAgICAgICAgY3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sICJsZWZ0IiApLAogICAgICAgICAgICAgICAgY2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSAiYWJzb2x1dGUiIHx8IHBvc2l0aW9uID09PSAiZml4ZWQiICkgJiYgalF1ZXJ5LmluQXJyYXkoImF1dG8iLCBbY3VyQ1NTVG9wLCBjdXJDU1NMZWZ0XSkgPiAtMSwKICAgICAgICAgICAgICAgIHByb3BzID0ge30sIGN1clBvc2l0aW9uID0ge30sIGN1clRvcCwgY3VyTGVmdDsKCiAgICAgICAgICAgIC8vIG5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZAogICAgICAgICAgICBpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkgewogICAgICAgICAgICAgICAgY3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7CiAgICAgICAgICAgICAgICBjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7CiAgICAgICAgICAgICAgICBjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7CiAgICAgICAgICAgICAgICBjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHsKICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7CiAgICAgICAgICAgICAgICBwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7CiAgICAgICAgICAgICAgICBwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCAidXNpbmciIGluIG9wdGlvbnMgKSB7CiAgICAgICAgICAgICAgICBvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjdXJFbGVtLmNzcyggcHJvcHMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07CgoKICAgIGpRdWVyeS5mbi5leHRlbmQoewoKICAgICAgICBwb3NpdGlvbjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICggIXRoaXNbMF0gKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGVsZW0gPSB0aGlzWzBdLAoKICAgICAgICAgICAgLy8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnQKICAgICAgICAgICAgICAgIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCksCgogICAgICAgICAgICAvLyBHZXQgY29ycmVjdCBvZmZzZXRzCiAgICAgICAgICAgICAgICBvZmZzZXQgICAgICAgPSB0aGlzLm9mZnNldCgpLAogICAgICAgICAgICAgICAgcGFyZW50T2Zmc2V0ID0gcnJvb3QudGVzdChvZmZzZXRQYXJlbnRbMF0ubm9kZU5hbWUpID8geyB0b3A6IDAsIGxlZnQ6IDAgfSA6IG9mZnNldFBhcmVudC5vZmZzZXQoKTsKCiAgICAgICAgICAgIC8vIFN1YnRyYWN0IGVsZW1lbnQgbWFyZ2lucwogICAgICAgICAgICAvLyBub3RlOiB3aGVuIGFuIGVsZW1lbnQgaGFzIG1hcmdpbjogYXV0byB0aGUgb2Zmc2V0TGVmdCBhbmQgbWFyZ2luTGVmdAogICAgICAgICAgICAvLyBhcmUgdGhlIHNhbWUgaW4gU2FmYXJpIGNhdXNpbmcgb2Zmc2V0LmxlZnQgdG8gaW5jb3JyZWN0bHkgYmUgMAogICAgICAgICAgICBvZmZzZXQudG9wICAtPSBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKGVsZW0sICJtYXJnaW5Ub3AiKSApIHx8IDA7CiAgICAgICAgICAgIG9mZnNldC5sZWZ0IC09IHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoZWxlbSwgIm1hcmdpbkxlZnQiKSApIHx8IDA7CgogICAgICAgICAgICAvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnMKICAgICAgICAgICAgcGFyZW50T2Zmc2V0LnRvcCAgKz0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyhvZmZzZXRQYXJlbnRbMF0sICJib3JkZXJUb3BXaWR0aCIpICkgfHwgMDsKICAgICAgICAgICAgcGFyZW50T2Zmc2V0LmxlZnQgKz0gcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyhvZmZzZXRQYXJlbnRbMF0sICJib3JkZXJMZWZ0V2lkdGgiKSApIHx8IDA7CgogICAgICAgICAgICAvLyBTdWJ0cmFjdCB0aGUgdHdvIG9mZnNldHMKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHRvcDogIG9mZnNldC50b3AgIC0gcGFyZW50T2Zmc2V0LnRvcCwKICAgICAgICAgICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQKICAgICAgICAgICAgfTsKICAgICAgICB9LAoKICAgICAgICBvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnQuYm9keTsKICAgICAgICAgICAgICAgIHdoaWxlICggb2Zmc2V0UGFyZW50ICYmICghcnJvb3QudGVzdChvZmZzZXRQYXJlbnQubm9kZU5hbWUpICYmIGpRdWVyeS5jc3Mob2Zmc2V0UGFyZW50LCAicG9zaXRpb24iKSA9PT0gInN0YXRpYyIpICkgewogICAgICAgICAgICAgICAgICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gb2Zmc2V0UGFyZW50OwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9KTsKCgovLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHMKICAgIGpRdWVyeS5lYWNoKCBbIkxlZnQiLCAiVG9wIl0sIGZ1bmN0aW9uKCBpLCBuYW1lICkgewogICAgICAgIHZhciBtZXRob2QgPSAic2Nyb2xsIiArIG5hbWU7CgogICAgICAgIGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkgewogICAgICAgICAgICB2YXIgZWxlbSwgd2luOwoKICAgICAgICAgICAgaWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIGVsZW0gPSB0aGlzWyAwIF07CgogICAgICAgICAgICAgICAgaWYgKCAhZWxlbSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTsKCiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIHNjcm9sbCBvZmZzZXQKICAgICAgICAgICAgICAgIHJldHVybiB3aW4gPyAoInBhZ2VYT2Zmc2V0IiBpbiB3aW4pID8gd2luWyBpID8gInBhZ2VZT2Zmc2V0IiA6ICJwYWdlWE9mZnNldCIgXSA6CiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LnN1cHBvcnQuYm94TW9kZWwgJiYgd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgbWV0aG9kIF0gfHwKICAgICAgICAgICAgICAgICAgICAgICAgd2luLmRvY3VtZW50LmJvZHlbIG1ldGhvZCBdIDoKICAgICAgICAgICAgICAgICAgICBlbGVtWyBtZXRob2QgXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gU2V0IHRoZSBzY3JvbGwgb2Zmc2V0CiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB3aW4gPSBnZXRXaW5kb3coIHRoaXMgKTsKCiAgICAgICAgICAgICAgICBpZiAoIHdpbiApIHsKICAgICAgICAgICAgICAgICAgICB3aW4uc2Nyb2xsVG8oCiAgICAgICAgICAgICAgICAgICAgICAgICFpID8gdmFsIDogalF1ZXJ5KCB3aW4gKS5zY3JvbGxMZWZ0KCksCiAgICAgICAgICAgICAgICAgICAgICAgIGkgPyB2YWwgOiBqUXVlcnkoIHdpbiApLnNjcm9sbFRvcCgpCiAgICAgICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRoaXNbIG1ldGhvZCBdID0gdmFsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgfSk7CgogICAgZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkgewogICAgICAgIHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/CiAgICAgICAgICAgIGVsZW0gOgogICAgICAgICAgICBlbGVtLm5vZGVUeXBlID09PSA5ID8KICAgICAgICAgICAgICAgIGVsZW0uZGVmYXVsdFZpZXcgfHwgZWxlbS5wYXJlbnRXaW5kb3cgOgogICAgICAgICAgICAgICAgZmFsc2U7CiAgICB9CgoKCgovLyBDcmVhdGUgd2lkdGgsIGhlaWdodCwgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHMKICAgIGpRdWVyeS5lYWNoKFsgIkhlaWdodCIsICJXaWR0aCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7CgogICAgICAgIHZhciB0eXBlID0gbmFtZS50b0xvd2VyQ2FzZSgpOwoKICAgICAgICAvLyBpbm5lckhlaWdodCBhbmQgaW5uZXJXaWR0aAogICAgICAgIGpRdWVyeS5mblsgImlubmVyIiArIG5hbWUgXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgZWxlbSA9IHRoaXNbMF07CiAgICAgICAgICAgIHJldHVybiBlbGVtID8KICAgICAgICAgICAgICAgIGVsZW0uc3R5bGUgPwogICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsICJwYWRkaW5nIiApICkgOgogICAgICAgICAgICAgICAgICAgIHRoaXNbIHR5cGUgXSgpIDoKICAgICAgICAgICAgICAgIG51bGw7CiAgICAgICAgfTsKCiAgICAgICAgLy8gb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGgKICAgICAgICBqUXVlcnkuZm5bICJvdXRlciIgKyBuYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luICkgewogICAgICAgICAgICB2YXIgZWxlbSA9IHRoaXNbMF07CiAgICAgICAgICAgIHJldHVybiBlbGVtID8KICAgICAgICAgICAgICAgIGVsZW0uc3R5bGUgPwogICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIG1hcmdpbiA/ICJtYXJnaW4iIDogImJvcmRlciIgKSApIDoKICAgICAgICAgICAgICAgICAgICB0aGlzWyB0eXBlIF0oKSA6CiAgICAgICAgICAgICAgICBudWxsOwogICAgICAgIH07CgogICAgICAgIGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIHNpemUgKSB7CiAgICAgICAgICAgIC8vIEdldCB3aW5kb3cgd2lkdGggb3IgaGVpZ2h0CiAgICAgICAgICAgIHZhciBlbGVtID0gdGhpc1swXTsKICAgICAgICAgICAgaWYgKCAhZWxlbSApIHsKICAgICAgICAgICAgICAgIHJldHVybiBzaXplID09IG51bGwgPyBudWxsIDogdGhpczsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2l6ZSApICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApOwogICAgICAgICAgICAgICAgICAgIHNlbGZbIHR5cGUgXSggc2l6ZS5jYWxsKCB0aGlzLCBpLCBzZWxmWyB0eXBlIF0oKSApICk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHsKICAgICAgICAgICAgICAgIC8vIEV2ZXJ5b25lIGVsc2UgdXNlIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCBvciBkb2N1bWVudC5ib2R5IGRlcGVuZGluZyBvbiBRdWlya3MgdnMgU3RhbmRhcmRzIG1vZGUKICAgICAgICAgICAgICAgIC8vIDNyZCBjb25kaXRpb24gYWxsb3dzIE5va2lhIHN1cHBvcnQsIGFzIGl0IHN1cHBvcnRzIHRoZSBkb2NFbGVtIHByb3AgYnV0IG5vdCBDU1MxQ29tcGF0CiAgICAgICAgICAgICAgICB2YXIgZG9jRWxlbVByb3AgPSBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgImNsaWVudCIgKyBuYW1lIF0sCiAgICAgICAgICAgICAgICAgICAgYm9keSA9IGVsZW0uZG9jdW1lbnQuYm9keTsKICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLmRvY3VtZW50LmNvbXBhdE1vZGUgPT09ICJDU1MxQ29tcGF0IiAmJiBkb2NFbGVtUHJvcCB8fAogICAgICAgICAgICAgICAgICAgIGJvZHkgJiYgYm9keVsgImNsaWVudCIgKyBuYW1lIF0gfHwgZG9jRWxlbVByb3A7CgogICAgICAgICAgICAgICAgLy8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodAogICAgICAgICAgICB9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkgewogICAgICAgICAgICAgICAgLy8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdLCB3aGljaGV2ZXIgaXMgZ3JlYXRlcgogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KAogICAgICAgICAgICAgICAgICAgIGVsZW0uZG9jdW1lbnRFbGVtZW50WyJjbGllbnQiICsgbmFtZV0sCiAgICAgICAgICAgICAgICAgICAgZWxlbS5ib2R5WyJzY3JvbGwiICsgbmFtZV0sIGVsZW0uZG9jdW1lbnRFbGVtZW50WyJzY3JvbGwiICsgbmFtZV0sCiAgICAgICAgICAgICAgICAgICAgZWxlbS5ib2R5WyJvZmZzZXQiICsgbmFtZV0sIGVsZW0uZG9jdW1lbnRFbGVtZW50WyJvZmZzZXQiICsgbmFtZV0KICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgLy8gR2V0IG9yIHNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQKICAgICAgICAgICAgfSBlbHNlIGlmICggc2l6ZSA9PT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgdmFyIG9yaWcgPSBqUXVlcnkuY3NzKCBlbGVtLCB0eXBlICksCiAgICAgICAgICAgICAgICAgICAgcmV0ID0gcGFyc2VGbG9hdCggb3JpZyApOwoKICAgICAgICAgICAgICAgIHJldHVybiBqUXVlcnkuaXNOdW1lcmljKCByZXQgKSA/IHJldCA6IG9yaWc7CgogICAgICAgICAgICAgICAgLy8gU2V0IHRoZSB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQgKGRlZmF1bHQgdG8gcGl4ZWxzIGlmIHZhbHVlIGlzIHVuaXRsZXNzKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3NzKCB0eXBlLCB0eXBlb2Ygc2l6ZSA9PT0gInN0cmluZyIgPyBzaXplIDogc2l6ZSArICJweCIgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgfSk7CgoKCgovLyBFeHBvc2UgalF1ZXJ5IHRvIHRoZSBnbG9iYWwgb2JqZWN0CiAgICB3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7CgovLyBFeHBvc2UgalF1ZXJ5IGFzIGFuIEFNRCBtb2R1bGUsIGJ1dCBvbmx5IGZvciBBTUQgbG9hZGVycyB0aGF0Ci8vIHVuZGVyc3RhbmQgdGhlIGlzc3VlcyB3aXRoIGxvYWRpbmcgbXVsdGlwbGUgdmVyc2lvbnMgb2YgalF1ZXJ5Ci8vIGluIGEgcGFnZSB0aGF0IGFsbCBtaWdodCBjYWxsIGRlZmluZSgpLiBUaGUgbG9hZGVyIHdpbGwgaW5kaWNhdGUKLy8gdGhleSBoYXZlIHNwZWNpYWwgYWxsb3dhbmNlcyBmb3IgbXVsdGlwbGUgalF1ZXJ5IHZlcnNpb25zIGJ5Ci8vIHNwZWNpZnlpbmcgZGVmaW5lLmFtZC5qUXVlcnkgPSB0cnVlLiBSZWdpc3RlciBhcyBhIG5hbWVkIG1vZHVsZSwKLy8gc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlciBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLAovLyBidXQgbm90IHVzZSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0IHVuZGVyc3RhbmRzIGFub255bW91cwovLyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdCB3YXkgdG8gcmVnaXN0ZXIuCi8vIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlIGRlcml2ZWQgZnJvbQovLyBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZSBmaWxlIG5hbWUuCi8vIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHMgdG8gY2FsbAovLyBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLgogICAgaWYgKCB0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQgJiYgZGVmaW5lLmFtZC5qUXVlcnkgKSB7CiAgICAgICAgZGVmaW5lKCAianF1ZXJ5IiwgW10sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGpRdWVyeTsgfSApOwogICAgfQoKCgp9KSggd2luZG93ICk7CgovKioKICogSGVscGVyIGZ1bmN0aW9uIHRvIGJlIGFibGUgdG8gdXNlIHRoZSBqcXVlcnkgbW9iaWxlIG1vYmlsZWluaXQgZXZlbnQKICogaW4gdGhlIHN0YW5kYWxvbmUgYnVpbGQsIHRoYXQgYWxyZWFkeSBpbmNsdWRlcyBqcXVlcnkgYW5kIGpxdWVyeSBtb2JpbGUuCiAqLwooZnVuY3Rpb24od2luZG93KSB7CiAgICBpZiAod2luZG93Lm1vYmlsZWluaXQpIHsKICAgICAgICAkKHdpbmRvdy5kb2N1bWVudCkuYmluZCgibW9iaWxlaW5pdCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICB3aW5kb3cubW9iaWxlaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0pOwogICAgfQoKfSkod2luZG93KTsKCi8qCiogalF1ZXJ5IE1vYmlsZSBGcmFtZXdvcmsgR2l0IEJ1aWxkOiBTSEExOiBiNDljYzA2NDk5YWJmOGY5ODdjZjkwZjM1MzQ5Y2ZhYzA5MThjOTM5IDw+IERhdGU6IFR1ZSBPY3QgMiAxMToyMjozNCAyMDEyIC0wNzAwCiogaHR0cDovL2pxdWVyeW1vYmlsZS5jb20KKgoqIENvcHlyaWdodCAyMDEyIGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQoqCiovCgoKKGZ1bmN0aW9uICggcm9vdCwgZG9jLCBmYWN0b3J5ICkgewoJaWYgKCB0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQgKSB7CgkJLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLgoJCWRlZmluZSggWyAianF1ZXJ5IiBdLCBmdW5jdGlvbiAoICQgKSB7CgkJCWZhY3RvcnkoICQsIHJvb3QsIGRvYyApOwoJCQlyZXR1cm4gJC5tb2JpbGU7CgkJfSk7Cgl9IGVsc2UgewoJCS8vIEJyb3dzZXIgZ2xvYmFscwoJCWZhY3RvcnkoIHJvb3QualF1ZXJ5LCByb290LCBkb2MgKTsKCX0KfSggdGhpcywgZG9jdW1lbnQsIGZ1bmN0aW9uICggalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQgKSB7CihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgoJdmFyIG5zTm9ybWFsaXplRGljdCA9IHt9OwoKCS8vIGpRdWVyeS5tb2JpbGUgY29uZmlndXJhYmxlIG9wdGlvbnMKCSQubW9iaWxlID0gJC5leHRlbmQoIHt9LCB7CgoJCS8vIFZlcnNpb24gb2YgdGhlIGpRdWVyeSBNb2JpbGUgRnJhbWV3b3JrCgkJdmVyc2lvbjogIjEuMi4wIiwKCgkJLy8gTmFtZXNwYWNlIHVzZWQgZnJhbWV3b3JrLXdpZGUgZm9yIGRhdGEtYXR0cnMuIERlZmF1bHQgaXMgbm8gbmFtZXNwYWNlCgkJbnM6ICIiLAoKCQkvLyBEZWZpbmUgdGhlIHVybCBwYXJhbWV0ZXIgdXNlZCBmb3IgcmVmZXJlbmNpbmcgd2lkZ2V0LWdlbmVyYXRlZCBzdWItcGFnZXMuCgkJLy8gVHJhbnNsYXRlcyB0byB0byBleGFtcGxlLmh0bWwmdWktcGFnZT1zdWJwYWdlSWRlbnRpZmllcgoJCS8vIGhhc2ggc2VnbWVudCBiZWZvcmUgJnVpLXBhZ2U9IGlzIHVzZWQgdG8gbWFrZSBBamF4IHJlcXVlc3QKCQlzdWJQYWdlVXJsS2V5OiAidWktcGFnZSIsCgoJCS8vIENsYXNzIGFzc2lnbmVkIHRvIHBhZ2UgY3VycmVudGx5IGluIHZpZXcsIGFuZCBkdXJpbmcgdHJhbnNpdGlvbnMKCQlhY3RpdmVQYWdlQ2xhc3M6ICJ1aS1wYWdlLWFjdGl2ZSIsCgoJCS8vIENsYXNzIHVzZWQgZm9yICJhY3RpdmUiIGJ1dHRvbiBzdGF0ZSwgZnJvbSBDU1MgZnJhbWV3b3JrCgkJYWN0aXZlQnRuQ2xhc3M6ICJ1aS1idG4tYWN0aXZlIiwKCgkJLy8gQ2xhc3MgdXNlZCBmb3IgImZvY3VzIiBmb3JtIGVsZW1lbnQgc3RhdGUsIGZyb20gQ1NTIGZyYW1ld29yawoJCWZvY3VzQ2xhc3M6ICJ1aS1mb2N1cyIsCgoJCS8vIEF1dG9tYXRpY2FsbHkgaGFuZGxlIGNsaWNrcyBhbmQgZm9ybSBzdWJtaXNzaW9ucyB0aHJvdWdoIEFqYXgsIHdoZW4gc2FtZS1kb21haW4KCQlhamF4RW5hYmxlZDogdHJ1ZSwKCgkJLy8gQXV0b21hdGljYWxseSBsb2FkIGFuZCBzaG93IHBhZ2VzIGJhc2VkIG9uIGxvY2F0aW9uLmhhc2gKCQloYXNoTGlzdGVuaW5nRW5hYmxlZDogdHJ1ZSwKCgkJLy8gZGlzYWJsZSB0byBwcmV2ZW50IGpxdWVyeSBmcm9tIGJvdGhlcmluZyB3aXRoIGxpbmtzCgkJbGlua0JpbmRpbmdFbmFibGVkOiB0cnVlLAoKCQkvLyBTZXQgZGVmYXVsdCBwYWdlIHRyYW5zaXRpb24gLSAnbm9uZScgZm9yIG5vIHRyYW5zaXRpb25zCgkJZGVmYXVsdFBhZ2VUcmFuc2l0aW9uOiAiZmFkZSIsCgoJCS8vIFNldCBtYXhpbXVtIHdpbmRvdyB3aWR0aCBmb3IgdHJhbnNpdGlvbnMgdG8gYXBwbHkgLSAnZmFsc2UnIGZvciBubyBsaW1pdAoJCW1heFRyYW5zaXRpb25XaWR0aDogZmFsc2UsCgoJCS8vIE1pbmltdW0gc2Nyb2xsIGRpc3RhbmNlIHRoYXQgd2lsbCBiZSByZW1lbWJlcmVkIHdoZW4gcmV0dXJuaW5nIHRvIGEgcGFnZQoJCW1pblNjcm9sbEJhY2s6IDI1MCwKCgkJLy8gREVQUkVDQVRFRDogdGhlIGZvbGxvd2luZyBwcm9wZXJ0eSBpcyBubyBsb25nZXIgaW4gdXNlLCBidXQgZGVmaW5lZCB1bnRpbCAyLjAgdG8gcHJldmVudCBjb25mbGljdHMKCQl0b3VjaE92ZXJmbG93RW5hYmxlZDogZmFsc2UsCgoJCS8vIFNldCBkZWZhdWx0IGRpYWxvZyB0cmFuc2l0aW9uIC0gJ25vbmUnIGZvciBubyB0cmFuc2l0aW9ucwoJCWRlZmF1bHREaWFsb2dUcmFuc2l0aW9uOiAicG9wIiwKCgkJLy8gRXJyb3IgcmVzcG9uc2UgbWVzc2FnZSAtIGFwcGVhcnMgd2hlbiBhbiBBamF4IHBhZ2UgcmVxdWVzdCBmYWlscwoJCXBhZ2VMb2FkRXJyb3JNZXNzYWdlOiAiRXJyb3IgTG9hZGluZyBQYWdlIiwKCgkJLy8gRm9yIGVycm9yIG1lc3NhZ2VzLCB3aGljaCB0aGVtZSBkb2VzIHRoZSBib3ggdXNlcz8KCQlwYWdlTG9hZEVycm9yTWVzc2FnZVRoZW1lOiAiZSIsCgoJCS8vIHJlcGxhY2UgY2FsbHMgdG8gd2luZG93Lmhpc3RvcnkuYmFjayB3aXRoIHBob25lZ2FwcyBuYXZpZ2F0aW9uIGhlbHBlcgoJCS8vIHdoZXJlIGl0IGlzIHByb3ZpZGVkIG9uIHRoZSB3aW5kb3cgb2JqZWN0CgkJcGhvbmVnYXBOYXZpZ2F0aW9uRW5hYmxlZDogZmFsc2UsCgoJCS8vYXV0b21hdGljYWxseSBpbml0aWFsaXplIHRoZSBET00gd2hlbiBpdCdzIHJlYWR5CgkJYXV0b0luaXRpYWxpemVQYWdlOiB0cnVlLAoKCQlwdXNoU3RhdGVFbmFibGVkOiB0cnVlLAoKCQkvLyBhbGxvd3MgdXNlcnMgdG8gb3B0IGluIHRvIGlnbm9yaW5nIGNvbnRlbnQgYnkgbWFya2luZyBhIHBhcmVudCBlbGVtZW50IGFzCgkJLy8gZGF0YS1pZ25vcmVkCgkJaWdub3JlQ29udGVudEVuYWJsZWQ6IGZhbHNlLAoKCQkvLyB0dXJuIG9mIGJpbmRpbmcgdG8gdGhlIG5hdGl2ZSBvcmllbnRhdGlvbmNoYW5nZSBkdWUgdG8gYW5kcm9pZCBvcmllbnRhdGlvbiBiZWhhdmlvcgoJCW9yaWVudGF0aW9uQ2hhbmdlRW5hYmxlZDogdHJ1ZSwKCgkJYnV0dG9uTWFya3VwOiB7CgkJCWhvdmVyRGVsYXk6IDIwMAoJCX0sCgoJCS8vIFRPRE8gbWlnaHQgYmUgdXNlZnVsIHVwc3RyZWFtIGluIGpxdWVyeSBpdHNlbGYgPwoJCWtleUNvZGU6IHsKCQkJQUxUOiAxOCwKCQkJQkFDS1NQQUNFOiA4LAoJCQlDQVBTX0xPQ0s6IDIwLAoJCQlDT01NQTogMTg4LAoJCQlDT01NQU5EOiA5MSwKCQkJQ09NTUFORF9MRUZUOiA5MSwgLy8gQ09NTUFORAoJCQlDT01NQU5EX1JJR0hUOiA5MywKCQkJQ09OVFJPTDogMTcsCgkJCURFTEVURTogNDYsCgkJCURPV046IDQwLAoJCQlFTkQ6IDM1LAoJCQlFTlRFUjogMTMsCgkJCUVTQ0FQRTogMjcsCgkJCUhPTUU6IDM2LAoJCQlJTlNFUlQ6IDQ1LAoJCQlMRUZUOiAzNywKCQkJTUVOVTogOTMsIC8vIENPTU1BTkRfUklHSFQKCQkJTlVNUEFEX0FERDogMTA3LAoJCQlOVU1QQURfREVDSU1BTDogMTEwLAoJCQlOVU1QQURfRElWSURFOiAxMTEsCgkJCU5VTVBBRF9FTlRFUjogMTA4LAoJCQlOVU1QQURfTVVMVElQTFk6IDEwNiwKCQkJTlVNUEFEX1NVQlRSQUNUOiAxMDksCgkJCVBBR0VfRE9XTjogMzQsCgkJCVBBR0VfVVA6IDMzLAoJCQlQRVJJT0Q6IDE5MCwKCQkJUklHSFQ6IDM5LAoJCQlTSElGVDogMTYsCgkJCVNQQUNFOiAzMiwKCQkJVEFCOiA5LAoJCQlVUDogMzgsCgkJCVdJTkRPV1M6IDkxIC8vIENPTU1BTkQKCQl9LAoKCQkvLyBTY3JvbGwgcGFnZSB2ZXJ0aWNhbGx5OiBzY3JvbGwgdG8gMCB0byBoaWRlIGlPUyBhZGRyZXNzIGJhciwgb3IgcGFzcyBhIFkgdmFsdWUKCQlzaWxlbnRTY3JvbGw6IGZ1bmN0aW9uKCB5cG9zICkgewoJCQlpZiAoICQudHlwZSggeXBvcyApICE9PSAibnVtYmVyIiApIHsKCQkJCXlwb3MgPSAkLm1vYmlsZS5kZWZhdWx0SG9tZVNjcm9sbDsKCQkJfQoKCQkJLy8gcHJldmVudCBzY3JvbGxzdGFydCBhbmQgc2Nyb2xsc3RvcCBldmVudHMKCQkJJC5ldmVudC5zcGVjaWFsLnNjcm9sbHN0YXJ0LmVuYWJsZWQgPSBmYWxzZTsKCgkJCXNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgewoJCQkJd2luZG93LnNjcm9sbFRvKCAwLCB5cG9zICk7CgkJCQkkKCBkb2N1bWVudCApLnRyaWdnZXIoICJzaWxlbnRzY3JvbGwiLCB7IHg6IDAsIHk6IHlwb3MgfSk7CgkJCX0sIDIwICk7CgoJCQlzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsKCQkJCSQuZXZlbnQuc3BlY2lhbC5zY3JvbGxzdGFydC5lbmFibGVkID0gdHJ1ZTsKCQkJfSwgMTUwICk7CgkJfSwKCgkJLy8gRXhwb3NlIG91ciBjYWNoZSBmb3IgdGVzdGluZyBwdXJwb3Nlcy4KCQluc05vcm1hbGl6ZURpY3Q6IG5zTm9ybWFsaXplRGljdCwKCgkJLy8gVGFrZSBhIGRhdGEgYXR0cmlidXRlIHByb3BlcnR5LCBwcmVwZW5kIHRoZSBuYW1lc3BhY2UKCQkvLyBhbmQgdGhlbiBjYW1lbCBjYXNlIHRoZSBhdHRyaWJ1dGUgc3RyaW5nLiBBZGQgdGhlIHJlc3VsdAoJCS8vIHRvIG91ciBuc05vcm1hbGl6ZURpY3Qgc28gd2UgZG9uJ3QgaGF2ZSB0byBkbyB0aGlzIGFnYWluLgoJCW5zTm9ybWFsaXplOiBmdW5jdGlvbiggcHJvcCApIHsKCQkJaWYgKCAhcHJvcCApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJcmV0dXJuIG5zTm9ybWFsaXplRGljdFsgcHJvcCBdIHx8ICggbnNOb3JtYWxpemVEaWN0WyBwcm9wIF0gPSAkLmNhbWVsQ2FzZSggJC5tb2JpbGUubnMgKyBwcm9wICkgKTsKCQl9LAoKCQkvLyBGaW5kIHRoZSBjbG9zZXN0IHBhcmVudCB3aXRoIGEgdGhlbWUgY2xhc3Mgb24gaXQuIE5vdGUgdGhhdAoJCS8vIHdlIGFyZSBub3QgdXNpbmcgJC5mbi5jbG9zZXN0KCkgb24gcHVycG9zZSBoZXJlIGJlY2F1c2UgdGhpcwoJCS8vIG1ldGhvZCBnZXRzIGNhbGxlZCBxdWl0ZSBhIGJpdCBhbmQgd2UgbmVlZCBpdCB0byBiZSBhcyBmYXN0CgkJLy8gYXMgcG9zc2libGUuCgkJZ2V0SW5oZXJpdGVkVGhlbWU6IGZ1bmN0aW9uKCBlbCwgZGVmYXVsdFRoZW1lICkgewoJCQl2YXIgZSA9IGVsWyAwIF0sCgkJCQlsdHIgPSAiIiwKCQkJCXJlID0gL3VpLShiYXJ8Ym9keXxvdmVybGF5KS0oW2Etel0pXGIvLAoJCQkJYywgbTsKCgkJCXdoaWxlICggZSApIHsKCQkJCWMgPSBlLmNsYXNzTmFtZSB8fCAiIjsKCQkJCWlmICggYyAmJiAoIG0gPSByZS5leGVjKCBjICkgKSAmJiAoIGx0ciA9IG1bIDIgXSApICkgewoJCQkJCS8vIFdlIGZvdW5kIGEgcGFyZW50IHdpdGggYSB0aGVtZSBjbGFzcwoJCQkJCS8vIG9uIGl0IHNvIGJhaWwgZnJvbSB0aGlzIGxvb3AuCgkJCQkJYnJlYWs7CgkJCQl9CgoJCQkJZSA9IGUucGFyZW50Tm9kZTsKCQkJfQoKCQkJLy8gUmV0dXJuIHRoZSB0aGVtZSBsZXR0ZXIgd2UgZm91bmQsIGlmIG5vbmUsIHJldHVybiB0aGUKCQkJLy8gc3BlY2lmaWVkIGRlZmF1bHQuCgoJCQlyZXR1cm4gbHRyIHx8IGRlZmF1bHRUaGVtZSB8fCAiYSI7CgkJfSwKCgkJLy8gVE9ETyB0aGUgZm9sbG93aW5nICQgYW5kICQuZm4gZXh0ZW5zaW9ucyBjYW4vcHJvYmFibHkgc2hvdWxkIGJlIG1vdmVkIGludG8ganF1ZXJ5Lm1vYmlsZS5jb3JlLmhlbHBlcnMKCQkvLwoJCS8vIEZpbmQgdGhlIGNsb3Nlc3QgamF2YXNjcmlwdCBwYWdlIGVsZW1lbnQgdG8gZ2F0aGVyIHNldHRpbmdzIGRhdGEganNwZXJmIHRlc3QKCQkvLyBodHRwOi8vanNwZXJmLmNvbS9zaW5nbGUtY29tcGxleC1zZWxlY3Rvci12cy1tYW55LWNvbXBsZXgtc2VsZWN0b3JzL2VkaXQKCQkvLyBwb3NzaWJseSBuYWl2ZSwgYnV0IGl0IHNob3dzIHRoYXQgdGhlIHBhcnNpbmcgb3ZlcmhlYWQgZm9yICpqdXN0KiB0aGUgcGFnZSBzZWxlY3RvciB2cwoJCS8vIHRoZSBwYWdlIGFuZCBkaWFsb2cgc2VsZWN0b3IgaXMgbmVnbGlnYWJsZS4gVGhpcyBjb3VsZCBwcm9iYWJseSBiZSBzcGVlZCB1cCBieQoJCS8vIGRvaW5nIGEgc2ltaWxhciBwYXJlbnQgbm9kZSB0cmF2ZXJzYWwgdG8gdGhlIG9uZSBmb3VuZCBpbiB0aGUgaW5oZXJpdGVkIHRoZW1lIGNvZGUgYWJvdmUKCQljbG9zZXN0UGFnZURhdGE6IGZ1bmN0aW9uKCAkdGFyZ2V0ICkgewoJCQlyZXR1cm4gJHRhcmdldAoJCQkJLmNsb3Nlc3QoICc6anFtRGF0YShyb2xlPSJwYWdlIiksIDpqcW1EYXRhKHJvbGU9ImRpYWxvZyIpJyApCgkJCQkuZGF0YSggInBhZ2UiICk7CgkJfSwKCgkJZW5oYW5jZWFibGU6IGZ1bmN0aW9uKCAkc2V0ICkgewoJCQlyZXR1cm4gdGhpcy5oYXZlUGFyZW50cyggJHNldCwgImVuaGFuY2UiICk7CgkJfSwKCgkJaGlqYWNrYWJsZTogZnVuY3Rpb24oICRzZXQgKSB7CgkJCXJldHVybiB0aGlzLmhhdmVQYXJlbnRzKCAkc2V0LCAiYWpheCIgKTsKCQl9LAoKCQloYXZlUGFyZW50czogZnVuY3Rpb24oICRzZXQsIGF0dHIgKSB7CgkJCWlmICggISQubW9iaWxlLmlnbm9yZUNvbnRlbnRFbmFibGVkICkgewoJCQkJcmV0dXJuICRzZXQ7CgkJCX0KCgkJCXZhciBjb3VudCA9ICRzZXQubGVuZ3RoLAoJCQkJJG5ld1NldCA9ICQoKSwKCQkJCWUsICRlbGVtZW50LCBleGNsdWRlZDsKCgkJCWZvciAoIHZhciBpID0gMDsgaSA8IGNvdW50OyBpKysgKSB7CgkJCQkkZWxlbWVudCA9ICRzZXQuZXEoIGkgKTsKCQkJCWV4Y2x1ZGVkID0gZmFsc2U7CgkJCQllID0gJHNldFsgaSBdOwoKCQkJCXdoaWxlICggZSApIHsKCQkJCQl2YXIgYyA9IGUuZ2V0QXR0cmlidXRlID8gZS5nZXRBdHRyaWJ1dGUoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArIGF0dHIgKSA6ICIiOwoKCQkJCQlpZiAoIGMgPT09ICJmYWxzZSIgKSB7CgkJCQkJCWV4Y2x1ZGVkID0gdHJ1ZTsKCQkJCQkJYnJlYWs7CgkJCQkJfQoKCQkJCQllID0gZS5wYXJlbnROb2RlOwoJCQkJfQoKCQkJCWlmICggIWV4Y2x1ZGVkICkgewoJCQkJCSRuZXdTZXQgPSAkbmV3U2V0LmFkZCggJGVsZW1lbnQgKTsKCQkJCX0KCQkJfQoKCQkJcmV0dXJuICRuZXdTZXQ7CgkJfSwKCgkJZ2V0U2NyZWVuSGVpZ2h0OiBmdW5jdGlvbigpIHsKCQkJLy8gTmF0aXZlIGlubmVySGVpZ2h0IHJldHVybnMgbW9yZSBhY2N1cmF0ZSB2YWx1ZSBmb3IgdGhpcyBhY3Jvc3MgcGxhdGZvcm1zLAoJCQkvLyBqUXVlcnkgdmVyc2lvbiBpcyBoZXJlIGFzIGEgbm9ybWFsaXplZCBmYWxsYmFjayBmb3IgcGxhdGZvcm1zIGxpa2UgU3ltYmlhbgoJCQlyZXR1cm4gd2luZG93LmlubmVySGVpZ2h0IHx8ICQoIHdpbmRvdyApLmhlaWdodCgpOwoJCX0KCX0sICQubW9iaWxlICk7CgoJLy8gTW9iaWxlIHZlcnNpb24gb2YgZGF0YSBhbmQgcmVtb3ZlRGF0YSBhbmQgaGFzRGF0YSBtZXRob2RzCgkvLyBlbnN1cmVzIGFsbCBkYXRhIGlzIHNldCBhbmQgcmV0cmlldmVkIHVzaW5nIGpRdWVyeSBNb2JpbGUncyBkYXRhIG5hbWVzcGFjZQoJJC5mbi5qcW1EYXRhID0gZnVuY3Rpb24oIHByb3AsIHZhbHVlICkgewoJCXZhciByZXN1bHQ7CgkJaWYgKCB0eXBlb2YgcHJvcCAhPT0gInVuZGVmaW5lZCIgKSB7CgkJCWlmICggcHJvcCApIHsKCQkJCXByb3AgPSAkLm1vYmlsZS5uc05vcm1hbGl6ZSggcHJvcCApOwoJCQl9CgoJCQkvLyB1bmRlZmluZWQgaXMgcGVybWl0dGVkIGFzIGFuIGV4cGxpY2l0IGlucHV0IGZvciB0aGUgc2Vjb25kIHBhcmFtCgkJCS8vIGluIHRoaXMgY2FzZSBpdCByZXR1cm5zIHRoZSB2YWx1ZSBhbmQgZG9lcyBub3Qgc2V0IGl0IHRvIHVuZGVmaW5lZAoJCQlpZiggYXJndW1lbnRzLmxlbmd0aCA8IDIgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCApewoJCQkJcmVzdWx0ID0gdGhpcy5kYXRhKCBwcm9wICk7CgkJCX0gZWxzZSB7CgkJCQlyZXN1bHQgPSB0aGlzLmRhdGEoIHByb3AsIHZhbHVlICk7CgkJCX0KCQl9CgkJcmV0dXJuIHJlc3VsdDsKCX07CgoJJC5qcW1EYXRhID0gZnVuY3Rpb24oIGVsZW0sIHByb3AsIHZhbHVlICkgewoJCXZhciByZXN1bHQ7CgkJaWYgKCB0eXBlb2YgcHJvcCAhPT0gInVuZGVmaW5lZCIgKSB7CgkJCXJlc3VsdCA9ICQuZGF0YSggZWxlbSwgcHJvcCA/ICQubW9iaWxlLm5zTm9ybWFsaXplKCBwcm9wICkgOiBwcm9wLCB2YWx1ZSApOwoJCX0KCQlyZXR1cm4gcmVzdWx0OwoJfTsKCgkkLmZuLmpxbVJlbW92ZURhdGEgPSBmdW5jdGlvbiggcHJvcCApIHsKCQlyZXR1cm4gdGhpcy5yZW1vdmVEYXRhKCAkLm1vYmlsZS5uc05vcm1hbGl6ZSggcHJvcCApICk7Cgl9OwoKCSQuanFtUmVtb3ZlRGF0YSA9IGZ1bmN0aW9uKCBlbGVtLCBwcm9wICkgewoJCXJldHVybiAkLnJlbW92ZURhdGEoIGVsZW0sICQubW9iaWxlLm5zTm9ybWFsaXplKCBwcm9wICkgKTsKCX07CgoJJC5mbi5yZW1vdmVXaXRoRGVwZW5kZW50cyA9IGZ1bmN0aW9uKCkgewoJCSQucmVtb3ZlV2l0aERlcGVuZGVudHMoIHRoaXMgKTsKCX07CgoJJC5yZW1vdmVXaXRoRGVwZW5kZW50cyA9IGZ1bmN0aW9uKCBlbGVtICkgewoJCXZhciAkZWxlbSA9ICQoIGVsZW0gKTsKCgkJKCAkZWxlbS5qcW1EYXRhKCAnZGVwZW5kZW50cycgKSB8fCAkKCkgKS5yZW1vdmUoKTsKCQkkZWxlbS5yZW1vdmUoKTsKCX07CgoJJC5mbi5hZGREZXBlbmRlbnRzID0gZnVuY3Rpb24oIG5ld0RlcGVuZGVudHMgKSB7CgkJJC5hZGREZXBlbmRlbnRzKCAkKCB0aGlzICksIG5ld0RlcGVuZGVudHMgKTsKCX07CgoJJC5hZGREZXBlbmRlbnRzID0gZnVuY3Rpb24oIGVsZW0sIG5ld0RlcGVuZGVudHMgKSB7CgkJdmFyIGRlcGVuZGVudHMgPSAkKCBlbGVtICkuanFtRGF0YSggJ2RlcGVuZGVudHMnICkgfHwgJCgpOwoKCQkkKCBlbGVtICkuanFtRGF0YSggJ2RlcGVuZGVudHMnLCAkLm1lcmdlKCBkZXBlbmRlbnRzLCBuZXdEZXBlbmRlbnRzICkgKTsKCX07CgoJLy8gbm90ZSB0aGF0IHRoaXMgaGVscGVyIGRvZXNuJ3QgYXR0ZW1wdCB0byBoYW5kbGUgdGhlIGNhbGxiYWNrCgkvLyBvciBzZXR0aW5nIG9mIGFuIGh0bWwgZWxlbWVudHMgdGV4dCwgaXRzIG9ubHkgcHVycG9zZSBpcwoJLy8gdG8gcmV0dXJuIHRoZSBodG1sIGVuY29kZWQgdmVyc2lvbiBvZiB0aGUgdGV4dCBpbiBhbGwgY2FzZXMuICh0aHVzIHRoZSBuYW1lKQoJJC5mbi5nZXRFbmNvZGVkVGV4dCA9IGZ1bmN0aW9uKCkgewoJCXJldHVybiAkKCAiPGRpdi8+IiApLnRleHQoICQoIHRoaXMgKS50ZXh0KCkgKS5odG1sKCk7Cgl9OwoKCS8vIGZsdWVudCBoZWxwZXIgZnVuY3Rpb24gZm9yIHRoZSBtb2JpbGUgbmFtZXNwYWNlZCBlcXVpdmFsZW50CgkkLmZuLmpxbUVuaGFuY2VhYmxlID0gZnVuY3Rpb24oKSB7CgkJcmV0dXJuICQubW9iaWxlLmVuaGFuY2VhYmxlKCB0aGlzICk7Cgl9OwoKCSQuZm4uanFtSGlqYWNrYWJsZSA9IGZ1bmN0aW9uKCkgewoJCXJldHVybiAkLm1vYmlsZS5oaWphY2thYmxlKCB0aGlzICk7Cgl9OwoKCS8vIE1vbmtleS1wYXRjaGluZyBTaXp6bGUgdG8gZmlsdGVyIHRoZSA6anFtRGF0YSBzZWxlY3RvcgoJdmFyIG9sZEZpbmQgPSAkLmZpbmQsCgkJanFtRGF0YVJFID0gLzpqcW1EYXRhXCgoW14pXSopXCkvZzsKCgkkLmZpbmQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJldCwgZXh0cmEgKSB7CgkJc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKCBqcW1EYXRhUkUsICJbZGF0YS0iICsgKCAkLm1vYmlsZS5ucyB8fCAiIiApICsgIiQxXSIgKTsKCgkJcmV0dXJuIG9sZEZpbmQuY2FsbCggdGhpcywgc2VsZWN0b3IsIGNvbnRleHQsIHJldCwgZXh0cmEgKTsKCX07CgoJJC5leHRlbmQoICQuZmluZCwgb2xkRmluZCApOwoKCSQuZmluZC5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIHNldCApIHsKCQlyZXR1cm4gJC5maW5kKCBleHByLCBudWxsLCBudWxsLCBzZXQgKTsKCX07CgoJJC5maW5kLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBub2RlLCBleHByICkgewoJCXJldHVybiAkLmZpbmQoIGV4cHIsIG51bGwsIG51bGwsIFsgbm9kZSBdICkubGVuZ3RoID4gMDsKCX07Cn0pKCBqUXVlcnksIHRoaXMgKTsKCgovKiEKICogalF1ZXJ5IFVJIFdpZGdldCB2MS45LjAtYmV0YS4xCiAqCiAqIENvcHlyaWdodCAyMDEyLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS11aS9ibG9iLzEuOS4wLWJldGEuMS9BVVRIT1JTLnR4dCAoaHR0cDovL2pxdWVyeXVpLmNvbS9hYm91dCkKICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICoKICogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9VSS9XaWRnZXQKICovCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKdmFyIHV1aWQgPSAwLAoJc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UsCglfY2xlYW5EYXRhID0gJC5jbGVhbkRhdGE7CiQuY2xlYW5EYXRhID0gZnVuY3Rpb24oIGVsZW1zICkgewoJZm9yICggdmFyIGkgPSAwLCBlbGVtOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7CgkJdHJ5IHsKCQkJJCggZWxlbSApLnRyaWdnZXJIYW5kbGVyKCAicmVtb3ZlIiApOwoJCS8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzgyMzUKCQl9IGNhdGNoKCBlICkge30KCX0KCV9jbGVhbkRhdGEoIGVsZW1zICk7Cn07CgokLndpZGdldCA9IGZ1bmN0aW9uKCBuYW1lLCBiYXNlLCBwcm90b3R5cGUgKSB7Cgl2YXIgZnVsbE5hbWUsIGV4aXN0aW5nQ29uc3RydWN0b3IsIGNvbnN0cnVjdG9yLCBiYXNlUHJvdG90eXBlLAoJCW5hbWVzcGFjZSA9IG5hbWUuc3BsaXQoICIuIiApWyAwIF07CgoJbmFtZSA9IG5hbWUuc3BsaXQoICIuIiApWyAxIF07CglmdWxsTmFtZSA9IG5hbWVzcGFjZSArICItIiArIG5hbWU7CgoJaWYgKCAhcHJvdG90eXBlICkgewoJCXByb3RvdHlwZSA9IGJhc2U7CgkJYmFzZSA9ICQuV2lkZ2V0OwoJfQoKCS8vIGNyZWF0ZSBzZWxlY3RvciBmb3IgcGx1Z2luCgkkLmV4cHJbICI6IiBdWyBmdWxsTmFtZSBdID0gZnVuY3Rpb24oIGVsZW0gKSB7CgkJcmV0dXJuICEhJC5kYXRhKCBlbGVtLCBmdWxsTmFtZSApOwoJfTsKCgkkWyBuYW1lc3BhY2UgXSA9ICRbIG5hbWVzcGFjZSBdIHx8IHt9OwoJZXhpc3RpbmdDb25zdHJ1Y3RvciA9ICRbIG5hbWVzcGFjZSBdWyBuYW1lIF07Cgljb25zdHJ1Y3RvciA9ICRbIG5hbWVzcGFjZSBdWyBuYW1lIF0gPSBmdW5jdGlvbiggb3B0aW9ucywgZWxlbWVudCApIHsKCQkvLyBhbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgIm5ldyIga2V5d29yZAoJCWlmICggIXRoaXMuX2NyZWF0ZVdpZGdldCApIHsKCQkJcmV0dXJuIG5ldyBjb25zdHJ1Y3Rvciggb3B0aW9ucywgZWxlbWVudCApOwoJCX0KCgkJLy8gYWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IGluaXRpYWxpemluZyBmb3Igc2ltcGxlIGluaGVyaXRhbmNlCgkJLy8gbXVzdCB1c2UgIm5ldyIga2V5d29yZCAodGhlIGNvZGUgYWJvdmUgYWx3YXlzIHBhc3NlcyBhcmdzKQoJCWlmICggYXJndW1lbnRzLmxlbmd0aCApIHsKCQkJdGhpcy5fY3JlYXRlV2lkZ2V0KCBvcHRpb25zLCBlbGVtZW50ICk7CgkJfQoJfTsKCS8vIGV4dGVuZCB3aXRoIHRoZSBleGlzdGluZyBjb25zdHJ1Y3RvciB0byBjYXJyeSBvdmVyIGFueSBzdGF0aWMgcHJvcGVydGllcwoJJC5leHRlbmQoIGNvbnN0cnVjdG9yLCBleGlzdGluZ0NvbnN0cnVjdG9yLCB7CgkJdmVyc2lvbjogcHJvdG90eXBlLnZlcnNpb24sCgkJLy8gY29weSB0aGUgb2JqZWN0IHVzZWQgdG8gY3JlYXRlIHRoZSBwcm90b3R5cGUgaW4gY2FzZSB3ZSBuZWVkIHRvCgkJLy8gcmVkZWZpbmUgdGhlIHdpZGdldCBsYXRlcgoJCV9wcm90bzogJC5leHRlbmQoIHt9LCBwcm90b3R5cGUgKSwKCQkvLyB0cmFjayB3aWRnZXRzIHRoYXQgaW5oZXJpdCBmcm9tIHRoaXMgd2lkZ2V0IGluIGNhc2UgdGhpcyB3aWRnZXQgaXMKCQkvLyByZWRlZmluZWQgYWZ0ZXIgYSB3aWRnZXQgaW5oZXJpdHMgZnJvbSBpdAoJCV9jaGlsZENvbnN0cnVjdG9yczogW10KCX0pOwoKCWJhc2VQcm90b3R5cGUgPSBuZXcgYmFzZSgpOwoJLy8gd2UgbmVlZCB0byBtYWtlIHRoZSBvcHRpb25zIGhhc2ggYSBwcm9wZXJ0eSBkaXJlY3RseSBvbiB0aGUgbmV3IGluc3RhbmNlCgkvLyBvdGhlcndpc2Ugd2UnbGwgbW9kaWZ5IHRoZSBvcHRpb25zIGhhc2ggb24gdGhlIHByb3RvdHlwZSB0aGF0IHdlJ3JlCgkvLyBpbmhlcml0aW5nIGZyb20KCWJhc2VQcm90b3R5cGUub3B0aW9ucyA9ICQud2lkZ2V0LmV4dGVuZCgge30sIGJhc2VQcm90b3R5cGUub3B0aW9ucyApOwoJJC5lYWNoKCBwcm90b3R5cGUsIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHsKCQlpZiAoICQuaXNGdW5jdGlvbiggdmFsdWUgKSApIHsKCQkJcHJvdG90eXBlWyBwcm9wIF0gPSAoZnVuY3Rpb24oKSB7CgkJCQl2YXIgX3N1cGVyID0gZnVuY3Rpb24oKSB7CgkJCQkJCXJldHVybiBiYXNlLnByb3RvdHlwZVsgcHJvcCBdLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCQkJCQl9LAoJCQkJCV9zdXBlckFwcGx5ID0gZnVuY3Rpb24oIGFyZ3MgKSB7CgkJCQkJCXJldHVybiBiYXNlLnByb3RvdHlwZVsgcHJvcCBdLmFwcGx5KCB0aGlzLCBhcmdzICk7CgkJCQkJfTsKCQkJCXJldHVybiBmdW5jdGlvbigpIHsKCQkJCQl2YXIgX19zdXBlciA9IHRoaXMuX3N1cGVyLAoJCQkJCQlfX3N1cGVyQXBwbHkgPSB0aGlzLl9zdXBlckFwcGx5LAoJCQkJCQlyZXR1cm5WYWx1ZTsKCgkJCQkJdGhpcy5fc3VwZXIgPSBfc3VwZXI7CgkJCQkJdGhpcy5fc3VwZXJBcHBseSA9IF9zdXBlckFwcGx5OwoKCQkJCQlyZXR1cm5WYWx1ZSA9IHZhbHVlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTsKCgkJCQkJdGhpcy5fc3VwZXIgPSBfX3N1cGVyOwoJCQkJCXRoaXMuX3N1cGVyQXBwbHkgPSBfX3N1cGVyQXBwbHk7CgoJCQkJCXJldHVybiByZXR1cm5WYWx1ZTsKCQkJCX07CgkJCX0pKCk7CgkJfQoJfSk7Cgljb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSAkLndpZGdldC5leHRlbmQoIGJhc2VQcm90b3R5cGUsIHsKCQkvLyBUT0RPOiByZW1vdmUgc3VwcG9ydCBmb3Igd2lkZ2V0RXZlbnRQcmVmaXgKCQkvLyBhbHdheXMgdXNlIHRoZSBuYW1lICsgYSBjb2xvbiBhcyB0aGUgcHJlZml4LCBlLmcuLCBkcmFnZ2FibGU6c3RhcnQKCQkvLyBkb24ndCBwcmVmaXggZm9yIHdpZGdldHMgdGhhdCBhcmVuJ3QgRE9NLWJhc2VkCgkJd2lkZ2V0RXZlbnRQcmVmaXg6IG5hbWUKCX0sIHByb3RvdHlwZSwgewoJCWNvbnN0cnVjdG9yOiBjb25zdHJ1Y3RvciwKCQluYW1lc3BhY2U6IG5hbWVzcGFjZSwKCQl3aWRnZXROYW1lOiBuYW1lLAoJCS8vIFRPRE8gcmVtb3ZlIHdpZGdldEJhc2VDbGFzcywgc2VlICM4MTU1CgkJd2lkZ2V0QmFzZUNsYXNzOiBmdWxsTmFtZSwKCQl3aWRnZXRGdWxsTmFtZTogZnVsbE5hbWUKCX0pOwoKCS8vIElmIHRoaXMgd2lkZ2V0IGlzIGJlaW5nIHJlZGVmaW5lZCB0aGVuIHdlIG5lZWQgdG8gZmluZCBhbGwgd2lkZ2V0cyB0aGF0CgkvLyBhcmUgaW5oZXJpdGluZyBmcm9tIGl0IGFuZCByZWRlZmluZSBhbGwgb2YgdGhlbSBzbyB0aGF0IHRoZXkgaW5oZXJpdCBmcm9tCgkvLyB0aGUgbmV3IHZlcnNpb24gb2YgdGhpcyB3aWRnZXQuIFdlJ3JlIGVzc2VudGlhbGx5IHRyeWluZyB0byByZXBsYWNlIG9uZQoJLy8gbGV2ZWwgaW4gdGhlIHByb3RvdHlwZSBjaGFpbi4KCWlmICggZXhpc3RpbmdDb25zdHJ1Y3RvciApIHsKCQkkLmVhY2goIGV4aXN0aW5nQ29uc3RydWN0b3IuX2NoaWxkQ29uc3RydWN0b3JzLCBmdW5jdGlvbiggaSwgY2hpbGQgKSB7CgkJCXZhciBjaGlsZFByb3RvdHlwZSA9IGNoaWxkLnByb3RvdHlwZTsKCgkJCS8vIHJlZGVmaW5lIHRoZSBjaGlsZCB3aWRnZXQgdXNpbmcgdGhlIHNhbWUgcHJvdG90eXBlIHRoYXQgd2FzCgkJCS8vIG9yaWdpbmFsbHkgdXNlZCwgYnV0IGluaGVyaXQgZnJvbSB0aGUgbmV3IHZlcnNpb24gb2YgdGhlIGJhc2UKCQkJJC53aWRnZXQoIGNoaWxkUHJvdG90eXBlLm5hbWVzcGFjZSArICIuIiArIGNoaWxkUHJvdG90eXBlLndpZGdldE5hbWUsIGNvbnN0cnVjdG9yLCBjaGlsZC5fcHJvdG8gKTsKCQl9KTsKCQkvLyByZW1vdmUgdGhlIGxpc3Qgb2YgZXhpc3RpbmcgY2hpbGQgY29uc3RydWN0b3JzIGZyb20gdGhlIG9sZCBjb25zdHJ1Y3RvcgoJCS8vIHNvIHRoZSBvbGQgY2hpbGQgY29uc3RydWN0b3JzIGNhbiBiZSBnYXJiYWdlIGNvbGxlY3RlZAoJCWRlbGV0ZSBleGlzdGluZ0NvbnN0cnVjdG9yLl9jaGlsZENvbnN0cnVjdG9yczsKCX0gZWxzZSB7CgkJYmFzZS5fY2hpbGRDb25zdHJ1Y3RvcnMucHVzaCggY29uc3RydWN0b3IgKTsKCX0KCgkkLndpZGdldC5icmlkZ2UoIG5hbWUsIGNvbnN0cnVjdG9yICk7Cn07CgokLndpZGdldC5leHRlbmQgPSBmdW5jdGlvbiggdGFyZ2V0ICkgewoJdmFyIGlucHV0ID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAxICksCgkJaW5wdXRJbmRleCA9IDAsCgkJaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsCgkJa2V5LAoJCXZhbHVlOwoJZm9yICggOyBpbnB1dEluZGV4IDwgaW5wdXRMZW5ndGg7IGlucHV0SW5kZXgrKyApIHsKCQlmb3IgKCBrZXkgaW4gaW5wdXRbIGlucHV0SW5kZXggXSApIHsKCQkJdmFsdWUgPSBpbnB1dFsgaW5wdXRJbmRleCBdWyBrZXkgXTsKCQkJaWYgKGlucHV0WyBpbnB1dEluZGV4IF0uaGFzT3duUHJvcGVydHkoIGtleSApICYmIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgkJCQl0YXJnZXRbIGtleSBdID0gJC5pc1BsYWluT2JqZWN0KCB2YWx1ZSApID8gJC53aWRnZXQuZXh0ZW5kKCB7fSwgdGFyZ2V0WyBrZXkgXSwgdmFsdWUgKSA6IHZhbHVlOwoJCQl9CgkJfQoJfQoJcmV0dXJuIHRhcmdldDsKfTsKCiQud2lkZ2V0LmJyaWRnZSA9IGZ1bmN0aW9uKCBuYW1lLCBvYmplY3QgKSB7Cgl2YXIgZnVsbE5hbWUgPSBvYmplY3QucHJvdG90eXBlLndpZGdldEZ1bGxOYW1lOwoJJC5mblsgbmFtZSBdID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJdmFyIGlzTWV0aG9kQ2FsbCA9IHR5cGVvZiBvcHRpb25zID09PSAic3RyaW5nIiwKCQkJYXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApLAoJCQlyZXR1cm5WYWx1ZSA9IHRoaXM7CgoJCS8vIGFsbG93IG11bHRpcGxlIGhhc2hlcyB0byBiZSBwYXNzZWQgb24gaW5pdAoJCW9wdGlvbnMgPSAhaXNNZXRob2RDYWxsICYmIGFyZ3MubGVuZ3RoID8KCQkJJC53aWRnZXQuZXh0ZW5kLmFwcGx5KCBudWxsLCBbIG9wdGlvbnMgXS5jb25jYXQoYXJncykgKSA6CgkJCW9wdGlvbnM7CgoJCWlmICggaXNNZXRob2RDYWxsICkgewoJCQl0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQl2YXIgbWV0aG9kVmFsdWUsCgkJCQkJaW5zdGFuY2UgPSAkLmRhdGEoIHRoaXMsIGZ1bGxOYW1lICk7CgkJCQlpZiAoICFpbnN0YW5jZSApIHsKCQkJCQlyZXR1cm4gJC5lcnJvciggImNhbm5vdCBjYWxsIG1ldGhvZHMgb24gIiArIG5hbWUgKyAiIHByaW9yIHRvIGluaXRpYWxpemF0aW9uOyAiICsKCQkJCQkJImF0dGVtcHRlZCB0byBjYWxsIG1ldGhvZCAnIiArIG9wdGlvbnMgKyAiJyIgKTsKCQkJCX0KCQkJCWlmICggISQuaXNGdW5jdGlvbiggaW5zdGFuY2Vbb3B0aW9uc10gKSB8fCBvcHRpb25zLmNoYXJBdCggMCApID09PSAiXyIgKSB7CgkJCQkJcmV0dXJuICQuZXJyb3IoICJubyBzdWNoIG1ldGhvZCAnIiArIG9wdGlvbnMgKyAiJyBmb3IgIiArIG5hbWUgKyAiIHdpZGdldCBpbnN0YW5jZSIgKTsKCQkJCX0KCQkJCW1ldGhvZFZhbHVlID0gaW5zdGFuY2VbIG9wdGlvbnMgXS5hcHBseSggaW5zdGFuY2UsIGFyZ3MgKTsKCQkJCWlmICggbWV0aG9kVmFsdWUgIT09IGluc3RhbmNlICYmIG1ldGhvZFZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJcmV0dXJuVmFsdWUgPSBtZXRob2RWYWx1ZSAmJiBtZXRob2RWYWx1ZS5qcXVlcnkgPwoJCQkJCQlyZXR1cm5WYWx1ZS5wdXNoU3RhY2soIG1ldGhvZFZhbHVlLmdldCgpICkgOgoJCQkJCQltZXRob2RWYWx1ZTsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX0pOwoJCX0gZWxzZSB7CgkJCXRoaXMuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciBpbnN0YW5jZSA9ICQuZGF0YSggdGhpcywgZnVsbE5hbWUgKTsKCQkJCWlmICggaW5zdGFuY2UgKSB7CgkJCQkJaW5zdGFuY2Uub3B0aW9uKCBvcHRpb25zIHx8IHt9ICkuX2luaXQoKTsKCQkJCX0gZWxzZSB7CgkJCQkJbmV3IG9iamVjdCggb3B0aW9ucywgdGhpcyApOwoJCQkJfQoJCQl9KTsKCQl9CgoJCXJldHVybiByZXR1cm5WYWx1ZTsKCX07Cn07CgokLldpZGdldCA9IGZ1bmN0aW9uKCBvcHRpb25zLCBlbGVtZW50ICkge307CiQuV2lkZ2V0Ll9jaGlsZENvbnN0cnVjdG9ycyA9IFtdOwoKJC5XaWRnZXQucHJvdG90eXBlID0gewoJd2lkZ2V0TmFtZTogIndpZGdldCIsCgl3aWRnZXRFdmVudFByZWZpeDogIiIsCglkZWZhdWx0RWxlbWVudDogIjxkaXY+IiwKCW9wdGlvbnM6IHsKCQlkaXNhYmxlZDogZmFsc2UsCgoJCS8vIGNhbGxiYWNrcwoJCWNyZWF0ZTogbnVsbAoJfSwKCV9jcmVhdGVXaWRnZXQ6IGZ1bmN0aW9uKCBvcHRpb25zLCBlbGVtZW50ICkgewoJCWVsZW1lbnQgPSAkKCBlbGVtZW50IHx8IHRoaXMuZGVmYXVsdEVsZW1lbnQgfHwgdGhpcyApWyAwIF07CgkJdGhpcy5lbGVtZW50ID0gJCggZWxlbWVudCApOwoJCXRoaXMudXVpZCA9IHV1aWQrKzsKCQl0aGlzLmV2ZW50TmFtZXNwYWNlID0gIi4iICsgdGhpcy53aWRnZXROYW1lICsgdGhpcy51dWlkOwoJCXRoaXMub3B0aW9ucyA9ICQud2lkZ2V0LmV4dGVuZCgge30sCgkJCXRoaXMub3B0aW9ucywKCQkJdGhpcy5fZ2V0Q3JlYXRlT3B0aW9ucygpLAoJCQlvcHRpb25zICk7CgoJCXRoaXMuYmluZGluZ3MgPSAkKCk7CgkJdGhpcy5ob3ZlcmFibGUgPSAkKCk7CgkJdGhpcy5mb2N1c2FibGUgPSAkKCk7CgoJCWlmICggZWxlbWVudCAhPT0gdGhpcyApIHsKCQkJLy8gMS45IEJDIGZvciAjNzgxMAoJCQkvLyBUT0RPIHJlbW92ZSBkdWFsIHN0b3JhZ2UKCQkJJC5kYXRhKCBlbGVtZW50LCB0aGlzLndpZGdldE5hbWUsIHRoaXMgKTsKCQkJJC5kYXRhKCBlbGVtZW50LCB0aGlzLndpZGdldEZ1bGxOYW1lLCB0aGlzICk7CgkJCXRoaXMuX29uKHsgcmVtb3ZlOiAiZGVzdHJveSIgfSk7CgkJCXRoaXMuZG9jdW1lbnQgPSAkKCBlbGVtZW50LnN0eWxlID8KCQkJCS8vIGVsZW1lbnQgd2l0aGluIHRoZSBkb2N1bWVudAoJCQkJZWxlbWVudC5vd25lckRvY3VtZW50IDoKCQkJCS8vIGVsZW1lbnQgaXMgd2luZG93IG9yIGRvY3VtZW50CgkJCQllbGVtZW50LmRvY3VtZW50IHx8IGVsZW1lbnQgKTsKCQkJdGhpcy53aW5kb3cgPSAkKCB0aGlzLmRvY3VtZW50WzBdLmRlZmF1bHRWaWV3IHx8IHRoaXMuZG9jdW1lbnRbMF0ucGFyZW50V2luZG93ICk7CgkJfQoKCQl0aGlzLl9jcmVhdGUoKTsKCQl0aGlzLl90cmlnZ2VyKCAiY3JlYXRlIiwgbnVsbCwgdGhpcy5fZ2V0Q3JlYXRlRXZlbnREYXRhKCkgKTsKCQl0aGlzLl9pbml0KCk7Cgl9LAoJX2dldENyZWF0ZU9wdGlvbnM6ICQubm9vcCwKCV9nZXRDcmVhdGVFdmVudERhdGE6ICQubm9vcCwKCV9jcmVhdGU6ICQubm9vcCwKCV9pbml0OiAkLm5vb3AsCgoJZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJdGhpcy5fZGVzdHJveSgpOwoJCS8vIHdlIGNhbiBwcm9iYWJseSByZW1vdmUgdGhlIHVuYmluZCBjYWxscyBpbiAyLjAKCQkvLyBhbGwgZXZlbnQgYmluZGluZ3Mgc2hvdWxkIGdvIHRocm91Z2ggdGhpcy5fb24oKQoJCXRoaXMuZWxlbWVudAoJCQkudW5iaW5kKCB0aGlzLmV2ZW50TmFtZXNwYWNlICkKCQkJLy8gMS45IEJDIGZvciAjNzgxMAoJCQkvLyBUT0RPIHJlbW92ZSBkdWFsIHN0b3JhZ2UKCQkJLnJlbW92ZURhdGEoIHRoaXMud2lkZ2V0TmFtZSApCgkJCS5yZW1vdmVEYXRhKCB0aGlzLndpZGdldEZ1bGxOYW1lICkKCQkJLy8gc3VwcG9ydDoganF1ZXJ5IDwxLjYuMwoJCQkvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC85NDEzCgkJCS5yZW1vdmVEYXRhKCAkLmNhbWVsQ2FzZSggdGhpcy53aWRnZXRGdWxsTmFtZSApICk7CgkJdGhpcy53aWRnZXQoKQoJCQkudW5iaW5kKCB0aGlzLmV2ZW50TmFtZXNwYWNlICkKCQkJLnJlbW92ZUF0dHIoICJhcmlhLWRpc2FibGVkIiApCgkJCS5yZW1vdmVDbGFzcygKCQkJCXRoaXMud2lkZ2V0RnVsbE5hbWUgKyAiLWRpc2FibGVkICIgKwoJCQkJInVpLXN0YXRlLWRpc2FibGVkIiApOwoKCQkvLyBjbGVhbiB1cCBldmVudHMgYW5kIHN0YXRlcwoJCXRoaXMuYmluZGluZ3MudW5iaW5kKCB0aGlzLmV2ZW50TmFtZXNwYWNlICk7CgkJdGhpcy5ob3ZlcmFibGUucmVtb3ZlQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQl0aGlzLmZvY3VzYWJsZS5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWZvY3VzIiApOwoJfSwKCV9kZXN0cm95OiAkLm5vb3AsCgoJd2lkZ2V0OiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5lbGVtZW50OwoJfSwKCglvcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCXZhciBvcHRpb25zID0ga2V5LAoJCQlwYXJ0cywKCQkJY3VyT3B0aW9uLAoJCQlpOwoKCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDAgKSB7CgkJCS8vIGRvbid0IHJldHVybiBhIHJlZmVyZW5jZSB0byB0aGUgaW50ZXJuYWwgaGFzaAoJCQlyZXR1cm4gJC53aWRnZXQuZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zICk7CgkJfQoKCQlpZiAoIHR5cGVvZiBrZXkgPT09ICJzdHJpbmciICkgewoJCQkvLyBoYW5kbGUgbmVzdGVkIGtleXMsIGUuZy4sICJmb28uYmFyIiA9PiB7IGZvbzogeyBiYXI6IF9fXyB9IH0KCQkJb3B0aW9ucyA9IHt9OwoJCQlwYXJ0cyA9IGtleS5zcGxpdCggIi4iICk7CgkJCWtleSA9IHBhcnRzLnNoaWZ0KCk7CgkJCWlmICggcGFydHMubGVuZ3RoICkgewoJCQkJY3VyT3B0aW9uID0gb3B0aW9uc1sga2V5IF0gPSAkLndpZGdldC5leHRlbmQoIHt9LCB0aGlzLm9wdGlvbnNbIGtleSBdICk7CgkJCQlmb3IgKCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKyApIHsKCQkJCQljdXJPcHRpb25bIHBhcnRzWyBpIF0gXSA9IGN1ck9wdGlvblsgcGFydHNbIGkgXSBdIHx8IHt9OwoJCQkJCWN1ck9wdGlvbiA9IGN1ck9wdGlvblsgcGFydHNbIGkgXSBdOwoJCQkJfQoJCQkJa2V5ID0gcGFydHMucG9wKCk7CgkJCQlpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7CgkJCQkJcmV0dXJuIGN1ck9wdGlvblsga2V5IF0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjdXJPcHRpb25bIGtleSBdOwoJCQkJfQoJCQkJY3VyT3B0aW9uWyBrZXkgXSA9IHZhbHVlOwoJCQl9IGVsc2UgewoJCQkJaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCXJldHVybiB0aGlzLm9wdGlvbnNbIGtleSBdID09PSB1bmRlZmluZWQgPyBudWxsIDogdGhpcy5vcHRpb25zWyBrZXkgXTsKCQkJCX0KCQkJCW9wdGlvbnNbIGtleSBdID0gdmFsdWU7CgkJCX0KCQl9CgoJCXRoaXMuX3NldE9wdGlvbnMoIG9wdGlvbnMgKTsKCgkJcmV0dXJuIHRoaXM7Cgl9LAoJX3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCXZhciBrZXk7CgoJCWZvciAoIGtleSBpbiBvcHRpb25zICkgewoJCQl0aGlzLl9zZXRPcHRpb24oIGtleSwgb3B0aW9uc1sga2V5IF0gKTsKCQl9CgoJCXJldHVybiB0aGlzOwoJfSwKCV9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkgewoJCXRoaXMub3B0aW9uc1sga2V5IF0gPSB2YWx1ZTsKCgkJaWYgKCBrZXkgPT09ICJkaXNhYmxlZCIgKSB7CgkJCXRoaXMud2lkZ2V0KCkKCQkJCS50b2dnbGVDbGFzcyggdGhpcy53aWRnZXRGdWxsTmFtZSArICItZGlzYWJsZWQgdWktc3RhdGUtZGlzYWJsZWQiLCAhIXZhbHVlICkKCQkJCS5hdHRyKCAiYXJpYS1kaXNhYmxlZCIsIHZhbHVlICk7CgkJCXRoaXMuaG92ZXJhYmxlLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtaG92ZXIiICk7CgkJCXRoaXMuZm9jdXNhYmxlLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtZm9jdXMiICk7CgkJfQoKCQlyZXR1cm4gdGhpczsKCX0sCgoJZW5hYmxlOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5fc2V0T3B0aW9uKCAiZGlzYWJsZWQiLCBmYWxzZSApOwoJfSwKCWRpc2FibGU6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIHRydWUgKTsKCX0sCgoJX29uOiBmdW5jdGlvbiggZWxlbWVudCwgaGFuZGxlcnMgKSB7CgkJLy8gbm8gZWxlbWVudCBhcmd1bWVudCwgc2h1ZmZsZSBhbmQgdXNlIHRoaXMuZWxlbWVudAoJCWlmICggIWhhbmRsZXJzICkgewoJCQloYW5kbGVycyA9IGVsZW1lbnQ7CgkJCWVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7CgkJfSBlbHNlIHsKCQkJLy8gYWNjZXB0IHNlbGVjdG9ycywgRE9NIGVsZW1lbnRzCgkJCWVsZW1lbnQgPSAkKCBlbGVtZW50ICk7CgkJCXRoaXMuYmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmFkZCggZWxlbWVudCApOwoJCX0KCgkJdmFyIGluc3RhbmNlID0gdGhpczsKCQkkLmVhY2goIGhhbmRsZXJzLCBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXIgKSB7CgkJCWZ1bmN0aW9uIGhhbmRsZXJQcm94eSgpIHsKCQkJCS8vIGFsbG93IHdpZGdldHMgdG8gY3VzdG9taXplIHRoZSBkaXNhYmxlZCBoYW5kbGluZwoJCQkJLy8gLSBkaXNhYmxlZCBhcyBhbiBhcnJheSBpbnN0ZWFkIG9mIGJvb2xlYW4KCQkJCS8vIC0gZGlzYWJsZWQgY2xhc3MgYXMgbWV0aG9kIGZvciBkaXNhYmxpbmcgaW5kaXZpZHVhbCBwYXJ0cwoJCQkJaWYgKCBpbnN0YW5jZS5vcHRpb25zLmRpc2FibGVkID09PSB0cnVlIHx8CgkJCQkJCSQoIHRoaXMgKS5oYXNDbGFzcyggInVpLXN0YXRlLWRpc2FibGVkIiApICkgewoJCQkJCXJldHVybjsKCQkJCX0KCQkJCXJldHVybiAoIHR5cGVvZiBoYW5kbGVyID09PSAic3RyaW5nIiA/IGluc3RhbmNlWyBoYW5kbGVyIF0gOiBoYW5kbGVyICkKCQkJCQkuYXBwbHkoIGluc3RhbmNlLCBhcmd1bWVudHMgKTsKCQkJfQoKCQkJLy8gY29weSB0aGUgZ3VpZCBzbyBkaXJlY3QgdW5iaW5kaW5nIHdvcmtzCgkJCWlmICggdHlwZW9mIGhhbmRsZXIgIT09ICJzdHJpbmciICkgewoJCQkJaGFuZGxlclByb3h5Lmd1aWQgPSBoYW5kbGVyLmd1aWQgPQoJCQkJCWhhbmRsZXIuZ3VpZCB8fCBoYW5kbGVyUHJveHkuZ3VpZCB8fCAkLmd1aWQrKzsKCQkJfQoKCQkJdmFyIG1hdGNoID0gZXZlbnQubWF0Y2goIC9eKFx3KylccyooLiopJC8gKSwKCQkJCWV2ZW50TmFtZSA9IG1hdGNoWzFdICsgaW5zdGFuY2UuZXZlbnROYW1lc3BhY2UsCgkJCQlzZWxlY3RvciA9IG1hdGNoWzJdOwoJCQlpZiAoIHNlbGVjdG9yICkgewoJCQkJaW5zdGFuY2Uud2lkZ2V0KCkuZGVsZWdhdGUoIHNlbGVjdG9yLCBldmVudE5hbWUsIGhhbmRsZXJQcm94eSApOwoJCQl9IGVsc2UgewoJCQkJZWxlbWVudC5iaW5kKCBldmVudE5hbWUsIGhhbmRsZXJQcm94eSApOwoJCQl9CgkJfSk7Cgl9LAoKCV9vZmY6IGZ1bmN0aW9uKCBlbGVtZW50LCBldmVudE5hbWUgKSB7CgkJZXZlbnROYW1lID0gKGV2ZW50TmFtZSB8fCAiIikuc3BsaXQoICIgIiApLmpvaW4oIHRoaXMuZXZlbnROYW1lc3BhY2UgKyAiICIgKSArIHRoaXMuZXZlbnROYW1lc3BhY2U7CgkJZWxlbWVudC51bmJpbmQoIGV2ZW50TmFtZSApLnVuZGVsZWdhdGUoIGV2ZW50TmFtZSApOwoJfSwKCglfZGVsYXk6IGZ1bmN0aW9uKCBoYW5kbGVyLCBkZWxheSApIHsKCQlmdW5jdGlvbiBoYW5kbGVyUHJveHkoKSB7CgkJCXJldHVybiAoIHR5cGVvZiBoYW5kbGVyID09PSAic3RyaW5nIiA/IGluc3RhbmNlWyBoYW5kbGVyIF0gOiBoYW5kbGVyICkKCQkJCS5hcHBseSggaW5zdGFuY2UsIGFyZ3VtZW50cyApOwoJCX0KCQl2YXIgaW5zdGFuY2UgPSB0aGlzOwoJCXJldHVybiBzZXRUaW1lb3V0KCBoYW5kbGVyUHJveHksIGRlbGF5IHx8IDAgKTsKCX0sCgoJX2hvdmVyYWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJdGhpcy5ob3ZlcmFibGUgPSB0aGlzLmhvdmVyYWJsZS5hZGQoIGVsZW1lbnQgKTsKCQl0aGlzLl9vbiggZWxlbWVudCwgewoJCQltb3VzZWVudGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1ob3ZlciIgKTsKCQkJfSwKCQkJbW91c2VsZWF2ZTogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJJCggZXZlbnQuY3VycmVudFRhcmdldCApLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtaG92ZXIiICk7CgkJCX0KCQl9KTsKCX0sCgoJX2ZvY3VzYWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7CgkJdGhpcy5mb2N1c2FibGUgPSB0aGlzLmZvY3VzYWJsZS5hZGQoIGVsZW1lbnQgKTsKCQl0aGlzLl9vbiggZWxlbWVudCwgewoJCQlmb2N1c2luOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkkKCBldmVudC5jdXJyZW50VGFyZ2V0ICkuYWRkQ2xhc3MoICJ1aS1zdGF0ZS1mb2N1cyIgKTsKCQkJfSwKCQkJZm9jdXNvdXQ6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCSQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKS5yZW1vdmVDbGFzcyggInVpLXN0YXRlLWZvY3VzIiApOwoJCQl9CgkJfSk7Cgl9LAoKCV90cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZXZlbnQsIGRhdGEgKSB7CgkJdmFyIHByb3AsIG9yaWcsCgkJCWNhbGxiYWNrID0gdGhpcy5vcHRpb25zWyB0eXBlIF07CgoJCWRhdGEgPSBkYXRhIHx8IHt9OwoJCWV2ZW50ID0gJC5FdmVudCggZXZlbnQgKTsKCQlldmVudC50eXBlID0gKCB0eXBlID09PSB0aGlzLndpZGdldEV2ZW50UHJlZml4ID8KCQkJdHlwZSA6CgkJCXRoaXMud2lkZ2V0RXZlbnRQcmVmaXggKyB0eXBlICkudG9Mb3dlckNhc2UoKTsKCQkvLyB0aGUgb3JpZ2luYWwgZXZlbnQgbWF5IGNvbWUgZnJvbSBhbnkgZWxlbWVudAoJCS8vIHNvIHdlIG5lZWQgdG8gcmVzZXQgdGhlIHRhcmdldCBvbiB0aGUgbmV3IGV2ZW50CgkJZXZlbnQudGFyZ2V0ID0gdGhpcy5lbGVtZW50WyAwIF07CgoJCS8vIGNvcHkgb3JpZ2luYWwgZXZlbnQgcHJvcGVydGllcyBvdmVyIHRvIHRoZSBuZXcgZXZlbnQKCQlvcmlnID0gZXZlbnQub3JpZ2luYWxFdmVudDsKCQlpZiAoIG9yaWcgKSB7CgkJCWZvciAoIHByb3AgaW4gb3JpZyApIHsKCQkJCWlmICggISggcHJvcCBpbiBldmVudCApICkgewoJCQkJCWV2ZW50WyBwcm9wIF0gPSBvcmlnWyBwcm9wIF07CgkJCQl9CgkJCX0KCQl9CgoJCXRoaXMuZWxlbWVudC50cmlnZ2VyKCBldmVudCwgZGF0YSApOwoJCXJldHVybiAhKCAkLmlzRnVuY3Rpb24oIGNhbGxiYWNrICkgJiYKCQkJY2FsbGJhY2suYXBwbHkoIHRoaXMuZWxlbWVudFswXSwgWyBldmVudCBdLmNvbmNhdCggZGF0YSApICkgPT09IGZhbHNlIHx8CgkJCWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICk7Cgl9Cn07CgokLmVhY2goIHsgc2hvdzogImZhZGVJbiIsIGhpZGU6ICJmYWRlT3V0IiB9LCBmdW5jdGlvbiggbWV0aG9kLCBkZWZhdWx0RWZmZWN0ICkgewoJJC5XaWRnZXQucHJvdG90eXBlWyAiXyIgKyBtZXRob2QgXSA9IGZ1bmN0aW9uKCBlbGVtZW50LCBvcHRpb25zLCBjYWxsYmFjayApIHsKCQlpZiAoIHR5cGVvZiBvcHRpb25zID09PSAic3RyaW5nIiApIHsKCQkJb3B0aW9ucyA9IHsgZWZmZWN0OiBvcHRpb25zIH07CgkJfQoJCXZhciBoYXNPcHRpb25zLAoJCQllZmZlY3ROYW1lID0gIW9wdGlvbnMgPwoJCQkJbWV0aG9kIDoKCQkJCW9wdGlvbnMgPT09IHRydWUgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICJudW1iZXIiID8KCQkJCQlkZWZhdWx0RWZmZWN0IDoKCQkJCQlvcHRpb25zLmVmZmVjdCB8fCBkZWZhdWx0RWZmZWN0OwoJCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoJCWlmICggdHlwZW9mIG9wdGlvbnMgPT09ICJudW1iZXIiICkgewoJCQlvcHRpb25zID0geyBkdXJhdGlvbjogb3B0aW9ucyB9OwoJCX0KCQloYXNPcHRpb25zID0gISQuaXNFbXB0eU9iamVjdCggb3B0aW9ucyApOwoJCW9wdGlvbnMuY29tcGxldGUgPSBjYWxsYmFjazsKCQlpZiAoIG9wdGlvbnMuZGVsYXkgKSB7CgkJCWVsZW1lbnQuZGVsYXkoIG9wdGlvbnMuZGVsYXkgKTsKCQl9CgkJaWYgKCBoYXNPcHRpb25zICYmICQuZWZmZWN0cyAmJiAoICQuZWZmZWN0cy5lZmZlY3RbIGVmZmVjdE5hbWUgXSB8fCAkLnVpQmFja0NvbXBhdCAhPT0gZmFsc2UgJiYgJC5lZmZlY3RzWyBlZmZlY3ROYW1lIF0gKSApIHsKCQkJZWxlbWVudFsgbWV0aG9kIF0oIG9wdGlvbnMgKTsKCQl9IGVsc2UgaWYgKCBlZmZlY3ROYW1lICE9PSBtZXRob2QgJiYgZWxlbWVudFsgZWZmZWN0TmFtZSBdICkgewoJCQllbGVtZW50WyBlZmZlY3ROYW1lIF0oIG9wdGlvbnMuZHVyYXRpb24sIG9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayApOwoJCX0gZWxzZSB7CgkJCWVsZW1lbnQucXVldWUoZnVuY3Rpb24oIG5leHQgKSB7CgkJCQkkKCB0aGlzIClbIG1ldGhvZCBdKCk7CgkJCQlpZiAoIGNhbGxiYWNrICkgewoJCQkJCWNhbGxiYWNrLmNhbGwoIGVsZW1lbnRbIDAgXSApOwoJCQkJfQoJCQkJbmV4dCgpOwoJCQl9KTsKCQl9Cgl9Owp9KTsKCi8vIERFUFJFQ0FURUQKaWYgKCAkLnVpQmFja0NvbXBhdCAhPT0gZmFsc2UgKSB7CgkkLldpZGdldC5wcm90b3R5cGUuX2dldENyZWF0ZU9wdGlvbnMgPSBmdW5jdGlvbigpIHsKCQlyZXR1cm4gJC5tZXRhZGF0YSAmJiAkLm1ldGFkYXRhLmdldCggdGhpcy5lbGVtZW50WzBdIClbIHRoaXMud2lkZ2V0TmFtZSBdOwoJfTsKfQoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS53aWRnZXQiLCB7CgkvLyBkZWNvcmF0ZSB0aGUgcGFyZW50IF9jcmVhdGVXaWRnZXQgdG8gdHJpZ2dlciBgd2lkZ2V0aW5pdGAgZm9yIHVzZXJzCgkvLyB3aG8gd2lzaCB0byBkbyBwb3N0IHBvc3QgYHdpZGdldGNyZWF0ZWAgYWx0ZXJhdGlvbnMvYWRkaXRpb25zCgkvLwoJLy8gVE9ETyBjcmVhdGUgYSBwdWxsIHJlcXVlc3QgZm9yIGpxdWVyeSB1aSB0byB0cmlnZ2VyIHRoaXMgZXZlbnQKCS8vIGluIHRoZSBvcmlnaW5hbCBfY3JlYXRlV2lkZ2V0CglfY3JlYXRlV2lkZ2V0OiBmdW5jdGlvbigpIHsKCQkkLldpZGdldC5wcm90b3R5cGUuX2NyZWF0ZVdpZGdldC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJdGhpcy5fdHJpZ2dlciggJ2luaXQnICk7Cgl9LAoKCV9nZXRDcmVhdGVPcHRpb25zOiBmdW5jdGlvbigpIHsKCgkJdmFyIGVsZW0gPSB0aGlzLmVsZW1lbnQsCgkJCW9wdGlvbnMgPSB7fTsKCgkJJC5lYWNoKCB0aGlzLm9wdGlvbnMsIGZ1bmN0aW9uKCBvcHRpb24gKSB7CgoJCQl2YXIgdmFsdWUgPSBlbGVtLmpxbURhdGEoIG9wdGlvbi5yZXBsYWNlKCAvW0EtWl0vZywgZnVuY3Rpb24oIGMgKSB7CgkJCQkJCQlyZXR1cm4gIi0iICsgYy50b0xvd2VyQ2FzZSgpOwoJCQkJCQl9KQoJCQkJCSk7CgoJCQlpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgkJCQlvcHRpb25zWyBvcHRpb24gXSA9IHZhbHVlOwoJCQl9CgkJfSk7CgoJCXJldHVybiBvcHRpb25zOwoJfSwKCgllbmhhbmNlV2l0aGluOiBmdW5jdGlvbiggdGFyZ2V0LCB1c2VLZWVwTmF0aXZlICkgewoJCXRoaXMuZW5oYW5jZSggJCggdGhpcy5vcHRpb25zLmluaXRTZWxlY3RvciwgJCggdGFyZ2V0ICkpLCB1c2VLZWVwTmF0aXZlICk7Cgl9LAoKCWVuaGFuY2U6IGZ1bmN0aW9uKCB0YXJnZXRzLCB1c2VLZWVwTmF0aXZlICkgewoJCXZhciBwYWdlLCBrZWVwTmF0aXZlLCAkd2lkZ2V0RWxlbWVudHMgPSAkKCB0YXJnZXRzICksIHNlbGYgPSB0aGlzOwoKCQkvLyBpZiBpZ25vcmVDb250ZW50RW5hYmxlZCBpcyBzZXQgdG8gdHJ1ZSB0aGUgZnJhbWV3b3JrIHNob3VsZAoJCS8vIG9ubHkgZW5oYW5jZSB0aGUgc2VsZWN0ZWQgZWxlbWVudHMgd2hlbiB0aGV5IGRvIE5PVCBoYXZlIGEKCQkvLyBwYXJlbnQgd2l0aCB0aGUgZGF0YS1uYW1lc3BhY2UtaWdub3JlIGF0dHJpYnV0ZQoJCSR3aWRnZXRFbGVtZW50cyA9ICQubW9iaWxlLmVuaGFuY2VhYmxlKCAkd2lkZ2V0RWxlbWVudHMgKTsKCgkJaWYgKCB1c2VLZWVwTmF0aXZlICYmICR3aWRnZXRFbGVtZW50cy5sZW5ndGggKSB7CgkJCS8vIFRPRE8gcmVtb3ZlIGRlcGVuZGVuY3kgb24gdGhlIHBhZ2Ugd2lkZ2V0IGZvciB0aGUga2VlcE5hdGl2ZS4KCQkJLy8gQ3VycmVudGx5IHRoZSBrZWVwTmF0aXZlIHZhbHVlIGlzIGRlZmluZWQgb24gdGhlIHBhZ2UgcHJvdG90eXBlIHNvCgkJCS8vIHRoZSBtZXRob2QgaXMgYXMgd2VsbAoJCQlwYWdlID0gJC5tb2JpbGUuY2xvc2VzdFBhZ2VEYXRhKCAkd2lkZ2V0RWxlbWVudHMgKTsKCQkJa2VlcE5hdGl2ZSA9ICggcGFnZSAmJiBwYWdlLmtlZXBOYXRpdmVTZWxlY3RvcigpKSB8fCAiIjsKCgkJCSR3aWRnZXRFbGVtZW50cyA9ICR3aWRnZXRFbGVtZW50cy5ub3QoIGtlZXBOYXRpdmUgKTsKCQl9CgoJCSR3aWRnZXRFbGVtZW50c1sgdGhpcy53aWRnZXROYW1lIF0oKTsKCX0sCgoJcmFpc2U6IGZ1bmN0aW9uKCBtc2cgKSB7CgkJdGhyb3cgIldpZGdldCBbIiArIHRoaXMud2lkZ2V0TmFtZSArICJdOiAiICsgbXNnOwoJfQp9KTsKCn0pKCBqUXVlcnkgKTsKCgooZnVuY3Rpb24oICQsIHdpbmRvdyApIHsKCS8vIERFUFJFQ0FURUQKCS8vIE5PVEUgZ2xvYmFsIG1vYmlsZSBvYmplY3Qgc2V0dGluZ3MKCSQuZXh0ZW5kKCAkLm1vYmlsZSwgewoJCS8vIERFUFJFQ0FURUQgU2hvdWxkIHRoZSB0ZXh0IGJlIHZpc2JsZSBpbiB0aGUgbG9hZGluZyBtZXNzYWdlPwoJCWxvYWRpbmdNZXNzYWdlVGV4dFZpc2libGU6IHVuZGVmaW5lZCwKCgkJLy8gREVQUkVDQVRFRCBXaGVuIHRoZSB0ZXh0IGlzIHZpc2libGUsIHdoYXQgdGhlbWUgZG9lcyB0aGUgbG9hZGluZyBib3ggdXNlPwoJCWxvYWRpbmdNZXNzYWdlVGhlbWU6IHVuZGVmaW5lZCwKCgkJLy8gREVQUkVDQVRFRCBkZWZhdWx0IG1lc3NhZ2Ugc2V0dGluZwoJCWxvYWRpbmdNZXNzYWdlOiB1bmRlZmluZWQsCgoJCS8vIERFUFJFQ0FURUQKCQkvLyBUdXJuIG9uL29mZiBwYWdlIGxvYWRpbmcgbWVzc2FnZS4gVGhlbWUgZG91YmxlcyBhcyBhbiBvYmplY3QgYXJndW1lbnQKCQkvLyB3aXRoIHRoZSBmb2xsb3dpbmcgc2hhcGU6IHsgdGhlbWU6ICcnLCB0ZXh0OiAnJywgaHRtbDogJycsIHRleHRWaXNpYmxlOiAnJyB9CgkJLy8gTk9URSB0aGF0IHRoZSAkLm1vYmlsZS5sb2FkaW5nKiBzZXR0aW5ncyBhbmQgcGFyYW1zIHBhc3QgdGhlIGZpcnN0IGFyZSBkZXByZWNhdGVkCgkJc2hvd1BhZ2VMb2FkaW5nTXNnOiBmdW5jdGlvbiggdGhlbWUsIG1zZ1RleHQsIHRleHRvbmx5ICkgewoJCQkkLm1vYmlsZS5sb2FkaW5nKCAnc2hvdycsIHRoZW1lLCBtc2dUZXh0LCB0ZXh0b25seSApOwoJCX0sCgoJCS8vIERFUFJFQ0FURUQKCQloaWRlUGFnZUxvYWRpbmdNc2c6IGZ1bmN0aW9uKCkgewoJCQkkLm1vYmlsZS5sb2FkaW5nKCAnaGlkZScgKTsKCQl9LAoKCQlsb2FkaW5nOiBmdW5jdGlvbigpIHsKCQkJdGhpcy5sb2FkZXJXaWRnZXQubG9hZGVyLmFwcGx5KCB0aGlzLmxvYWRlcldpZGdldCwgYXJndW1lbnRzICk7CgkJfQoJfSk7CgoJLy8gVE9ETyBtb3ZlIGxvYWRlciBjbGFzcyBkb3duIGludG8gdGhlIHdpZGdldCBzZXR0aW5ncwoJdmFyIGxvYWRlckNsYXNzID0gInVpLWxvYWRlciIsICRodG1sID0gJCggImh0bWwiICksICR3aW5kb3cgPSAkKCB3aW5kb3cgKTsKCgkkLndpZGdldCggIm1vYmlsZS5sb2FkZXIiLCB7CgkJLy8gTk9URSBpZiB0aGUgZ2xvYmFsIGNvbmZpZyBzZXR0aW5ncyBhcmUgZGVmaW5lZCB0aGV5IHdpbGwgb3ZlcnJpZGUgdGhlc2UKCQkvLyAgICAgIG9wdGlvbnMKCQlvcHRpb25zOiB7CgkJCS8vIHRoZSB0aGVtZSBmb3IgdGhlIGxvYWRpbmcgbWVzc2FnZQoJCQl0aGVtZTogImEiLAoKCQkJLy8gd2hldGhlciB0aGUgdGV4dCBpbiB0aGUgbG9hZGluZyBtZXNzYWdlIGlzIHNob3duCgkJCXRleHRWaXNpYmxlOiBmYWxzZSwKCgkJCS8vIGN1c3RvbSBodG1sIGZvciB0aGUgaW5uZXIgY29udGVudCBvZiB0aGUgbG9hZGluZyBtZXNzYWdlCgkJCWh0bWw6ICIiLAoKCQkJLy8gdGhlIHRleHQgdG8gYmUgZGlzcGxheWVkIHdoZW4gdGhlIHBvcHVwIGlzIHNob3duCgkJCXRleHQ6ICJsb2FkaW5nIgoJCX0sCgoJCWRlZmF1bHRIdG1sOiAiPGRpdiBjbGFzcz0nIiArIGxvYWRlckNsYXNzICsgIic+IiArCgkJCSI8c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWxvYWRpbmcnPjwvc3Bhbj4iICsKCQkJIjxoMT48L2gxPiIgKwoJCQkiPC9kaXY+IiwKCgkJLy8gRm9yIG5vbi1maXhlZCBzdXBwb3J0aW4gYnJvd3NlcnMuIFBvc2l0aW9uIGF0IHkgY2VudGVyIChpZiBzY3JvbGxUb3Agc3VwcG9ydGVkKSwgYWJvdmUgdGhlIGFjdGl2ZUJ0biAoaWYgZGVmaW5lZCksIG9yIGp1c3QgMTAwcHggZnJvbSB0b3AKCQlmYWtlRml4TG9hZGVyOiBmdW5jdGlvbigpIHsKCQkJdmFyIGFjdGl2ZUJ0biA9ICQoICIuIiArICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICkuZmlyc3QoKTsKCgkJCXRoaXMuZWxlbWVudAoJCQkJLmNzcyh7CgkJCQkJdG9wOiAkLnN1cHBvcnQuc2Nyb2xsVG9wICYmICR3aW5kb3cuc2Nyb2xsVG9wKCkgKyAkd2luZG93LmhlaWdodCgpIC8gMiB8fAoJCQkJCQlhY3RpdmVCdG4ubGVuZ3RoICYmIGFjdGl2ZUJ0bi5vZmZzZXQoKS50b3AgfHwgMTAwCgkJCQl9KTsKCQl9LAoKCQkvLyBjaGVjayBwb3NpdGlvbiBvZiBsb2FkZXIgdG8gc2VlIGlmIGl0IGFwcGVhcnMgdG8gYmUgImZpeGVkIiB0byBjZW50ZXIKCQkvLyBpZiBub3QsIHVzZSBhYnMgcG9zaXRpb25pbmcKCQljaGVja0xvYWRlclBvc2l0aW9uOiBmdW5jdGlvbigpIHsKCQkJdmFyIG9mZnNldCA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKSwKCQkJCXNjcm9sbFRvcCA9ICR3aW5kb3cuc2Nyb2xsVG9wKCksCgkJCQlzY3JlZW5IZWlnaHQgPSAkLm1vYmlsZS5nZXRTY3JlZW5IZWlnaHQoKTsKCgkJCWlmICggb2Zmc2V0LnRvcCA8IHNjcm9sbFRvcCB8fCAoIG9mZnNldC50b3AgLSBzY3JvbGxUb3AgKSA+IHNjcmVlbkhlaWdodCApIHsKCQkJCXRoaXMuZWxlbWVudC5hZGRDbGFzcyggInVpLWxvYWRlci1mYWtlZml4IiApOwoJCQkJdGhpcy5mYWtlRml4TG9hZGVyKCk7CgkJCQkkd2luZG93CgkJCQkJLnVuYmluZCggInNjcm9sbCIsIHRoaXMuY2hlY2tMb2FkZXJQb3NpdGlvbiApCgkJCQkJLmJpbmQoICJzY3JvbGwiLCB0aGlzLmZha2VGaXhMb2FkZXIgKTsKCQkJfQoJCX0sCgoJCXJlc2V0SHRtbDogZnVuY3Rpb24oKSB7CgkJCXRoaXMuZWxlbWVudC5odG1sKCAkKCB0aGlzLmRlZmF1bHRIdG1sICkuaHRtbCgpICk7CgkJfSwKCgkJLy8gVHVybiBvbi9vZmYgcGFnZSBsb2FkaW5nIG1lc3NhZ2UuIFRoZW1lIGRvdWJsZXMgYXMgYW4gb2JqZWN0IGFyZ3VtZW50CgkJLy8gd2l0aCB0aGUgZm9sbG93aW5nIHNoYXBlOiB7IHRoZW1lOiAnJywgdGV4dDogJycsIGh0bWw6ICcnLCB0ZXh0VmlzaWJsZTogJycgfQoJCS8vIE5PVEUgdGhhdCB0aGUgJC5tb2JpbGUubG9hZGluZyogc2V0dGluZ3MgYW5kIHBhcmFtcyBwYXN0IHRoZSBmaXJzdCBhcmUgZGVwcmVjYXRlZAoJCS8vIFRPRE8gc3dlZXQgamVzdXMgd2UgbmVlZCB0byBicmVhayBzb21lIG9mIHRoaXMgb3V0CgkJc2hvdzogZnVuY3Rpb24oIHRoZW1lLCBtc2dUZXh0LCB0ZXh0b25seSApIHsKCQkJdmFyIHRleHRWaXNpYmxlLCBtZXNzYWdlLCAkaGVhZGVyLCBsb2FkU2V0dGluZ3M7CgoJCQl0aGlzLnJlc2V0SHRtbCgpOwoKCQkJLy8gdXNlIHRoZSBwcm90b3R5cGUgb3B0aW9ucyBzbyB0aGF0IHBlb3BsZSBjYW4gc2V0IHRoZW0gZ2xvYmFsbHkgYXQKCQkJLy8gbW9iaWxlIGluaXQuIENvbnNpc3RlbmN5LCBpdCdzIHdoYXQncyBmb3IgZGlubmVyCgkJCWlmICggJC50eXBlKHRoZW1lKSA9PT0gIm9iamVjdCIgKSB7CgkJCQlsb2FkU2V0dGluZ3MgPSAkLmV4dGVuZCgge30sIHRoaXMub3B0aW9ucywgdGhlbWUgKTsKCgkJCQkvLyBwcmVmZXIgb2JqZWN0IHByb3BlcnR5IGZyb20gdGhlIHBhcmFtIHRoZW4gdGhlIG9sZCB0aGVtZSBzZXR0aW5nCgkJCQl0aGVtZSA9IGxvYWRTZXR0aW5ncy50aGVtZSB8fCAkLm1vYmlsZS5sb2FkaW5nTWVzc2FnZVRoZW1lOwoJCQl9IGVsc2UgewoJCQkJbG9hZFNldHRpbmdzID0gdGhpcy5vcHRpb25zOwoKCQkJCS8vIGhlcmUgd2UgcHJlZmVyIHRoZSB0aGVtIHZhbHVlIHBhc3NlZCBhcyBhIHN0cmluZyBhcmd1bWVudCwgdGhlbgoJCQkJLy8gd2UgcHJlZmVyIHRoZSBnbG9iYWwgb3B0aW9uIGJlY2F1c2Ugd2UgY2FuJ3QgdXNlIHVuZGVmaW5lZCBkZWZhdWx0CgkJCQkvLyBwcm90b3R5cGUgb3B0aW9ucywgdGhlbiB0aGUgcHJvdG90eXBlIG9wdGlvbgoJCQkJdGhlbWUgPSB0aGVtZSB8fCAkLm1vYmlsZS5sb2FkaW5nTWVzc2FnZVRoZW1lIHx8IGxvYWRTZXR0aW5ncy50aGVtZTsKCQkJfQoKCQkJLy8gc2V0IHRoZSBtZXNzYWdlIHRleHQsIHByZWZlciB0aGUgcGFyYW0sIHRoZW4gdGhlIHNldHRpbmdzIG9iamVjdAoJCQkvLyB0aGVuIGxvYWRpbmcgbWVzc2FnZQoJCQltZXNzYWdlID0gbXNnVGV4dCB8fCAkLm1vYmlsZS5sb2FkaW5nTWVzc2FnZSB8fCBsb2FkU2V0dGluZ3MudGV4dDsKCgkJCS8vIHByZXBhcmUgdGhlIGRvbQoJCQkkaHRtbC5hZGRDbGFzcyggInVpLWxvYWRpbmciICk7CgoJCQlpZiAoICQubW9iaWxlLmxvYWRpbmdNZXNzYWdlICE9PSBmYWxzZSB8fCBsb2FkU2V0dGluZ3MuaHRtbCApIHsKCQkJCS8vIGJvb2xlYW4gdmFsdWVzIHJlcXVpcmUgYSBiaXQgbW9yZSB3b3JrIDpQLCBzdXBwb3J0cyBvYmplY3QgcHJvcGVydGllcwoJCQkJLy8gYW5kIG9sZCBzZXR0aW5ncwoJCQkJaWYgKCAkLm1vYmlsZS5sb2FkaW5nTWVzc2FnZVRleHRWaXNpYmxlICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJdGV4dFZpc2libGUgPSAkLm1vYmlsZS5sb2FkaW5nTWVzc2FnZVRleHRWaXNpYmxlOwoJCQkJfSBlbHNlIHsKCQkJCQl0ZXh0VmlzaWJsZSA9IGxvYWRTZXR0aW5ncy50ZXh0VmlzaWJsZTsKCQkJCX0KCgkJCQkvLyBhZGQgdGhlIHByb3BlciBjc3MgZ2l2ZW4gdGhlIG9wdGlvbnMgKHRoZW1lLCB0ZXh0LCBldGMpCgkJCQkvLyBGb3JjZSB0ZXh0IHZpc2liaWxpdHkgaWYgdGhlIHNlY29uZCBhcmd1bWVudCB3YXMgc3VwcGxpZWQsIG9yCgkJCQkvLyBpZiB0aGUgdGV4dCB3YXMgZXhwbGljaXRseSBzZXQgaW4gdGhlIG9iamVjdCBhcmdzCgkJCQl0aGlzLmVsZW1lbnQuYXR0cigiY2xhc3MiLCBsb2FkZXJDbGFzcyArCgkJCQkJIiB1aS1jb3JuZXItYWxsIHVpLWJvZHktIiArIHRoZW1lICsKCQkJCQkiIHVpLWxvYWRlci0iICsgKCB0ZXh0VmlzaWJsZSB8fCBtc2dUZXh0IHx8IHRoZW1lLnRleHQgPyAidmVyYm9zZSIgOiAiZGVmYXVsdCIgKSArCgkJCQkJKCBsb2FkU2V0dGluZ3MudGV4dG9ubHkgfHwgdGV4dG9ubHkgPyAiIHVpLWxvYWRlci10ZXh0b25seSIgOiAiIiApICk7CgoJCQkJLy8gVE9ETyB2ZXJpZnkgdGhhdCBqcXVlcnkuZm4uaHRtbCBpcyBvayB0byB1c2UgaW4gYm90aCBjYXNlcyBoZXJlCgkJCQkvLyAgICAgIHRoaXMgbWlnaHQgYmUgb3Zlcmx5IGRlZmVuc2l2ZSBpbiBwcmV2ZW50aW5nIHVua25vd2luZyB4c3MKCQkJCS8vIGlmIHRoZSBodG1sIGF0dHJpYnV0ZSBpcyBkZWZpbmVkIG9uIHRoZSBsb2FkaW5nIHNldHRpbmdzLCB1c2UgdGhhdAoJCQkJLy8gb3RoZXJ3aXNlIHVzZSB0aGUgZmFsbGJhY2tzIGZyb20gYWJvdmUKCQkJCWlmICggbG9hZFNldHRpbmdzLmh0bWwgKSB7CgkJCQkJdGhpcy5lbGVtZW50Lmh0bWwoIGxvYWRTZXR0aW5ncy5odG1sICk7CgkJCQl9IGVsc2UgewoJCQkJCXRoaXMuZWxlbWVudC5maW5kKCAiaDEiICkudGV4dCggbWVzc2FnZSApOwoJCQkJfQoKCQkJCS8vIGF0dGFjaCB0aGUgbG9hZGVyIHRvIHRoZSBET00KCQkJCXRoaXMuZWxlbWVudC5hcHBlbmRUbyggJC5tb2JpbGUucGFnZUNvbnRhaW5lciApOwoKCQkJCS8vIGNoZWNrIHRoYXQgdGhlIGxvYWRlciBpcyB2aXNpYmxlCgkJCQl0aGlzLmNoZWNrTG9hZGVyUG9zaXRpb24oKTsKCgkJCQkvLyBvbiBzY3JvbGwgY2hlY2sgdGhlIGxvYWRlciBwb3NpdGlvbgoJCQkJJHdpbmRvdy5iaW5kKCAic2Nyb2xsIiwgJC5wcm94eSggdGhpcy5jaGVja0xvYWRlclBvc2l0aW9uLCB0aGlzICkgKTsKCQkJfQoJCX0sCgoJCWhpZGU6IGZ1bmN0aW9uKCkgewoJCQkkaHRtbC5yZW1vdmVDbGFzcyggInVpLWxvYWRpbmciICk7CgoJCQlpZiAoICQubW9iaWxlLmxvYWRpbmdNZXNzYWdlICkgewoJCQkJdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKCAidWktbG9hZGVyLWZha2VmaXgiICk7CgkJCX0KCgkJCSQoIHdpbmRvdyApLnVuYmluZCggInNjcm9sbCIsICQucHJveHkoIHRoaXMuZmFrZUZpeExvYWRlciwgdGhpcykgKTsKCQkJJCggd2luZG93ICkudW5iaW5kKCAic2Nyb2xsIiwgJC5wcm94eSggdGhpcy5jaGVja0xvYWRlclBvc2l0aW9uLCB0aGlzICkgKTsKCQl9Cgl9KTsKCgkkd2luZG93LmJpbmQoICdwYWdlY29udGFpbmVyY3JlYXRlJywgZnVuY3Rpb24oKSB7CgkJJC5tb2JpbGUubG9hZGVyV2lkZ2V0ID0gJC5tb2JpbGUubG9hZGVyV2lkZ2V0IHx8ICQoICQubW9iaWxlLmxvYWRlci5wcm90b3R5cGUuZGVmYXVsdEh0bWwgKS5sb2FkZXIoKTsKCX0pOwp9KShqUXVlcnksIHRoaXMpOwoKCgovLyBUaGlzIHBsdWdpbiBpcyBhbiBleHBlcmltZW50IGZvciBhYnN0cmFjdGluZyBhd2F5IHRoZSB0b3VjaCBhbmQgbW91c2UKLy8gZXZlbnRzIHNvIHRoYXQgZGV2ZWxvcGVycyBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHdoaWNoIG1ldGhvZCBvZiBpbnB1dAovLyB0aGUgZGV2aWNlIHRoZWlyIGRvY3VtZW50IGlzIGxvYWRlZCBvbiBzdXBwb3J0cy4KLy8KLy8gVGhlIGlkZWEgaGVyZSBpcyB0byBhbGxvdyB0aGUgZGV2ZWxvcGVyIHRvIHJlZ2lzdGVyIGxpc3RlbmVycyBmb3IgdGhlCi8vIGJhc2ljIG1vdXNlIGV2ZW50cywgc3VjaCBhcyBtb3VzZWRvd24sIG1vdXNlbW92ZSwgbW91c2V1cCwgYW5kIGNsaWNrLAovLyBhbmQgdGhlIHBsdWdpbiB3aWxsIHRha2UgY2FyZSBvZiByZWdpc3RlcmluZyB0aGUgY29ycmVjdCBsaXN0ZW5lcnMKLy8gYmVoaW5kIHRoZSBzY2VuZXMgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciBhdCB0aGUgZmFzdGVzdCBwb3NzaWJsZSB0aW1lCi8vIGZvciB0aGF0IGRldmljZSwgd2hpbGUgc3RpbGwgcmV0YWluaW5nIHRoZSBvcmRlciBvZiBldmVudCBmaXJpbmcgaW4KLy8gdGhlIHRyYWRpdGlvbmFsIG1vdXNlIGVudmlyb25tZW50LCBzaG91bGQgbXVsdGlwbGUgaGFuZGxlcnMgYmUgcmVnaXN0ZXJlZAovLyBvbiB0aGUgc2FtZSBlbGVtZW50IGZvciBkaWZmZXJlbnQgZXZlbnRzLgovLwovLyBUaGUgY3VycmVudCB2ZXJzaW9uIGV4cG9zZXMgdGhlIGZvbGxvd2luZyB2aXJ0dWFsIGV2ZW50cyB0byBqUXVlcnkgYmluZCBtZXRob2RzOgovLyAidm1vdXNlb3ZlciB2bW91c2Vkb3duIHZtb3VzZW1vdmUgdm1vdXNldXAgdmNsaWNrIHZtb3VzZW91dCB2bW91c2VjYW5jZWwiCgooZnVuY3Rpb24oICQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCApIHsKCnZhciBkYXRhUHJvcGVydHlOYW1lID0gInZpcnR1YWxNb3VzZUJpbmRpbmdzIiwKCXRvdWNoVGFyZ2V0UHJvcGVydHlOYW1lID0gInZpcnR1YWxUb3VjaElEIiwKCXZpcnR1YWxFdmVudE5hbWVzID0gInZtb3VzZW92ZXIgdm1vdXNlZG93biB2bW91c2Vtb3ZlIHZtb3VzZXVwIHZjbGljayB2bW91c2VvdXQgdm1vdXNlY2FuY2VsIi5zcGxpdCggIiAiICksCgl0b3VjaEV2ZW50UHJvcHMgPSAiY2xpZW50WCBjbGllbnRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSIuc3BsaXQoICIgIiApLAoJbW91c2VIb29rUHJvcHMgPSAkLmV2ZW50Lm1vdXNlSG9va3MgPyAkLmV2ZW50Lm1vdXNlSG9va3MucHJvcHMgOiBbXSwKCW1vdXNlRXZlbnRQcm9wcyA9ICQuZXZlbnQucHJvcHMuY29uY2F0KCBtb3VzZUhvb2tQcm9wcyApLAoJYWN0aXZlRG9jSGFuZGxlcnMgPSB7fSwKCXJlc2V0VGltZXJJRCA9IDAsCglzdGFydFggPSAwLAoJc3RhcnRZID0gMCwKCWRpZFNjcm9sbCA9IGZhbHNlLAoJY2xpY2tCbG9ja0xpc3QgPSBbXSwKCWJsb2NrTW91c2VUcmlnZ2VycyA9IGZhbHNlLAoJYmxvY2tUb3VjaFRyaWdnZXJzID0gZmFsc2UsCglldmVudENhcHR1cmVTdXBwb3J0ZWQgPSAiYWRkRXZlbnRMaXN0ZW5lciIgaW4gZG9jdW1lbnQsCgkkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLAoJbmV4dFRvdWNoSUQgPSAxLAoJbGFzdFRvdWNoSUQgPSAwLCB0aHJlc2hvbGQ7CgokLnZtb3VzZSA9IHsKCW1vdmVEaXN0YW5jZVRocmVzaG9sZDogMTAsCgljbGlja0Rpc3RhbmNlVGhyZXNob2xkOiAxMCwKCXJlc2V0VGltZXJEdXJhdGlvbjogMTUwMAp9OwoKZnVuY3Rpb24gZ2V0TmF0aXZlRXZlbnQoIGV2ZW50ICkgewoKCXdoaWxlICggZXZlbnQgJiYgdHlwZW9mIGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09ICJ1bmRlZmluZWQiICkgewoJCWV2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudDsKCX0KCXJldHVybiBldmVudDsKfQoKZnVuY3Rpb24gY3JlYXRlVmlydHVhbEV2ZW50KCBldmVudCwgZXZlbnRUeXBlICkgewoKCXZhciB0ID0gZXZlbnQudHlwZSwKCQlvZSwgcHJvcHMsIG5lLCBwcm9wLCBjdCwgdG91Y2gsIGksIGosIGxlbjsKCglldmVudCA9ICQuRXZlbnQoIGV2ZW50ICk7CglldmVudC50eXBlID0gZXZlbnRUeXBlOwoKCW9lID0gZXZlbnQub3JpZ2luYWxFdmVudDsKCXByb3BzID0gJC5ldmVudC5wcm9wczsKCgkvLyBhZGRyZXNzZXMgc2VwYXJhdGlvbiBvZiAkLmV2ZW50LnByb3BzIGluIHRvICQuZXZlbnQubW91c2VIb29rLnByb3BzIGFuZCBJc3N1ZSAzMjgwCgkvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS1tb2JpbGUvaXNzdWVzLzMyODAKCWlmICggdC5zZWFyY2goIC9eKG1vdXNlfGNsaWNrKS8gKSA+IC0xICkgewoJCXByb3BzID0gbW91c2VFdmVudFByb3BzOwoJfQoKCS8vIGNvcHkgb3JpZ2luYWwgZXZlbnQgcHJvcGVydGllcyBvdmVyIHRvIHRoZSBuZXcgZXZlbnQKCS8vIHRoaXMgd291bGQgaGFwcGVuIGlmIHdlIGNvdWxkIGNhbGwgJC5ldmVudC5maXggaW5zdGVhZCBvZiAkLkV2ZW50CgkvLyBidXQgd2UgZG9uJ3QgaGF2ZSBhIHdheSB0byBmb3JjZSBhbiBldmVudCB0byBiZSBmaXhlZCBtdWx0aXBsZSB0aW1lcwoJaWYgKCBvZSApIHsKCQlmb3IgKCBpID0gcHJvcHMubGVuZ3RoLCBwcm9wOyBpOyApIHsKCQkJcHJvcCA9IHByb3BzWyAtLWkgXTsKCQkJZXZlbnRbIHByb3AgXSA9IG9lWyBwcm9wIF07CgkJfQoJfQoKCS8vIG1ha2Ugc3VyZSB0aGF0IGlmIHRoZSBtb3VzZSBhbmQgY2xpY2sgdmlydHVhbCBldmVudHMgYXJlIGdlbmVyYXRlZAoJLy8gd2l0aG91dCBhIC53aGljaCBvbmUgaXMgZGVmaW5lZAoJaWYgKCB0LnNlYXJjaCgvbW91c2UoZG93bnx1cCl8Y2xpY2svKSA+IC0xICYmICFldmVudC53aGljaCApIHsKCQlldmVudC53aGljaCA9IDE7Cgl9CgoJaWYgKCB0LnNlYXJjaCgvXnRvdWNoLykgIT09IC0xICkgewoJCW5lID0gZ2V0TmF0aXZlRXZlbnQoIG9lICk7CgkJdCA9IG5lLnRvdWNoZXM7CgkJY3QgPSBuZS5jaGFuZ2VkVG91Y2hlczsKCQl0b3VjaCA9ICggdCAmJiB0Lmxlbmd0aCApID8gdFswXSA6ICggKCBjdCAmJiBjdC5sZW5ndGggKSA/IGN0WyAwIF0gOiB1bmRlZmluZWQgKTsKCgkJaWYgKCB0b3VjaCApIHsKCQkJZm9yICggaiA9IDAsIGxlbiA9IHRvdWNoRXZlbnRQcm9wcy5sZW5ndGg7IGogPCBsZW47IGorKykgewoJCQkJcHJvcCA9IHRvdWNoRXZlbnRQcm9wc1sgaiBdOwoJCQkJZXZlbnRbIHByb3AgXSA9IHRvdWNoWyBwcm9wIF07CgkJCX0KCQl9Cgl9CgoJcmV0dXJuIGV2ZW50Owp9CgpmdW5jdGlvbiBnZXRWaXJ0dWFsQmluZGluZ0ZsYWdzKCBlbGVtZW50ICkgewoKCXZhciBmbGFncyA9IHt9LAoJCWIsIGs7CgoJd2hpbGUgKCBlbGVtZW50ICkgewoKCQliID0gJC5kYXRhKCBlbGVtZW50LCBkYXRhUHJvcGVydHlOYW1lICk7CgoJCWZvciAoICBrIGluIGIgKSB7CgkJCWlmICggYlsgayBdICkgewoJCQkJZmxhZ3NbIGsgXSA9IGZsYWdzLmhhc1ZpcnR1YWxCaW5kaW5nID0gdHJ1ZTsKCQkJfQoJCX0KCQllbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwoJfQoJcmV0dXJuIGZsYWdzOwp9CgpmdW5jdGlvbiBnZXRDbG9zZXN0RWxlbWVudFdpdGhWaXJ0dWFsQmluZGluZyggZWxlbWVudCwgZXZlbnRUeXBlICkgewoJdmFyIGI7Cgl3aGlsZSAoIGVsZW1lbnQgKSB7CgoJCWIgPSAkLmRhdGEoIGVsZW1lbnQsIGRhdGFQcm9wZXJ0eU5hbWUgKTsKCgkJaWYgKCBiICYmICggIWV2ZW50VHlwZSB8fCBiWyBldmVudFR5cGUgXSApICkgewoJCQlyZXR1cm4gZWxlbWVudDsKCQl9CgkJZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKCX0KCXJldHVybiBudWxsOwp9CgpmdW5jdGlvbiBlbmFibGVUb3VjaEJpbmRpbmdzKCkgewoJYmxvY2tUb3VjaFRyaWdnZXJzID0gZmFsc2U7Cn0KCmZ1bmN0aW9uIGRpc2FibGVUb3VjaEJpbmRpbmdzKCkgewoJYmxvY2tUb3VjaFRyaWdnZXJzID0gdHJ1ZTsKfQoKZnVuY3Rpb24gZW5hYmxlTW91c2VCaW5kaW5ncygpIHsKCWxhc3RUb3VjaElEID0gMDsKCWNsaWNrQmxvY2tMaXN0Lmxlbmd0aCA9IDA7CglibG9ja01vdXNlVHJpZ2dlcnMgPSBmYWxzZTsKCgkvLyBXaGVuIG1vdXNlIGJpbmRpbmdzIGFyZSBlbmFibGVkLCBvdXIKCS8vIHRvdWNoIGJpbmRpbmdzIGFyZSBkaXNhYmxlZC4KCWRpc2FibGVUb3VjaEJpbmRpbmdzKCk7Cn0KCmZ1bmN0aW9uIGRpc2FibGVNb3VzZUJpbmRpbmdzKCkgewoJLy8gV2hlbiBtb3VzZSBiaW5kaW5ncyBhcmUgZGlzYWJsZWQsIG91cgoJLy8gdG91Y2ggYmluZGluZ3MgYXJlIGVuYWJsZWQuCgllbmFibGVUb3VjaEJpbmRpbmdzKCk7Cn0KCmZ1bmN0aW9uIHN0YXJ0UmVzZXRUaW1lcigpIHsKCWNsZWFyUmVzZXRUaW1lcigpOwoJcmVzZXRUaW1lcklEID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJcmVzZXRUaW1lcklEID0gMDsKCQllbmFibGVNb3VzZUJpbmRpbmdzKCk7Cgl9LCAkLnZtb3VzZS5yZXNldFRpbWVyRHVyYXRpb24gKTsKfQoKZnVuY3Rpb24gY2xlYXJSZXNldFRpbWVyKCkgewoJaWYgKCByZXNldFRpbWVySUQgKSB7CgkJY2xlYXJUaW1lb3V0KCByZXNldFRpbWVySUQgKTsKCQlyZXNldFRpbWVySUQgPSAwOwoJfQp9CgpmdW5jdGlvbiB0cmlnZ2VyVmlydHVhbEV2ZW50KCBldmVudFR5cGUsIGV2ZW50LCBmbGFncyApIHsKCXZhciB2ZTsKCglpZiAoICggZmxhZ3MgJiYgZmxhZ3NbIGV2ZW50VHlwZSBdICkgfHwKCQkJCSggIWZsYWdzICYmIGdldENsb3Nlc3RFbGVtZW50V2l0aFZpcnR1YWxCaW5kaW5nKCBldmVudC50YXJnZXQsIGV2ZW50VHlwZSApICkgKSB7CgoJCXZlID0gY3JlYXRlVmlydHVhbEV2ZW50KCBldmVudCwgZXZlbnRUeXBlICk7CgoJCSQoIGV2ZW50LnRhcmdldCkudHJpZ2dlciggdmUgKTsKCX0KCglyZXR1cm4gdmU7Cn0KCmZ1bmN0aW9uIG1vdXNlRXZlbnRDYWxsYmFjayggZXZlbnQgKSB7Cgl2YXIgdG91Y2hJRCA9ICQuZGF0YSggZXZlbnQudGFyZ2V0LCB0b3VjaFRhcmdldFByb3BlcnR5TmFtZSApOwoKCWlmICggIWJsb2NrTW91c2VUcmlnZ2VycyAmJiAoICFsYXN0VG91Y2hJRCB8fCBsYXN0VG91Y2hJRCAhPT0gdG91Y2hJRCApICkgewoJCXZhciB2ZSA9IHRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2IiArIGV2ZW50LnR5cGUsIGV2ZW50ICk7CgkJaWYgKCB2ZSApIHsKCQkJaWYgKCB2ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHsKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCX0KCQkJaWYgKCB2ZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkgewoJCQkJZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CgkJCX0KCQkJaWYgKCB2ZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkgewoJCQkJZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CgkJCX0KCQl9Cgl9Cn0KCmZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnQoIGV2ZW50ICkgewoKCXZhciB0b3VjaGVzID0gZ2V0TmF0aXZlRXZlbnQoIGV2ZW50ICkudG91Y2hlcywKCQl0YXJnZXQsIGZsYWdzOwoKCWlmICggdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA9PT0gMSApIHsKCgkJdGFyZ2V0ID0gZXZlbnQudGFyZ2V0OwoJCWZsYWdzID0gZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggdGFyZ2V0ICk7CgoJCWlmICggZmxhZ3MuaGFzVmlydHVhbEJpbmRpbmcgKSB7CgoJCQlsYXN0VG91Y2hJRCA9IG5leHRUb3VjaElEKys7CgkJCSQuZGF0YSggdGFyZ2V0LCB0b3VjaFRhcmdldFByb3BlcnR5TmFtZSwgbGFzdFRvdWNoSUQgKTsKCgkJCWNsZWFyUmVzZXRUaW1lcigpOwoKCQkJZGlzYWJsZU1vdXNlQmluZGluZ3MoKTsKCQkJZGlkU2Nyb2xsID0gZmFsc2U7CgoJCQl2YXIgdCA9IGdldE5hdGl2ZUV2ZW50KCBldmVudCApLnRvdWNoZXNbIDAgXTsKCQkJc3RhcnRYID0gdC5wYWdlWDsKCQkJc3RhcnRZID0gdC5wYWdlWTsKCgkJCXRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2bW91c2VvdmVyIiwgZXZlbnQsIGZsYWdzICk7CgkJCXRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2bW91c2Vkb3duIiwgZXZlbnQsIGZsYWdzICk7CgkJfQoJfQp9CgpmdW5jdGlvbiBoYW5kbGVTY3JvbGwoIGV2ZW50ICkgewoJaWYgKCBibG9ja1RvdWNoVHJpZ2dlcnMgKSB7CgkJcmV0dXJuOwoJfQoKCWlmICggIWRpZFNjcm9sbCApIHsKCQl0cmlnZ2VyVmlydHVhbEV2ZW50KCAidm1vdXNlY2FuY2VsIiwgZXZlbnQsIGdldFZpcnR1YWxCaW5kaW5nRmxhZ3MoIGV2ZW50LnRhcmdldCApICk7Cgl9CgoJZGlkU2Nyb2xsID0gdHJ1ZTsKCXN0YXJ0UmVzZXRUaW1lcigpOwp9CgpmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoIGV2ZW50ICkgewoJaWYgKCBibG9ja1RvdWNoVHJpZ2dlcnMgKSB7CgkJcmV0dXJuOwoJfQoKCXZhciB0ID0gZ2V0TmF0aXZlRXZlbnQoIGV2ZW50ICkudG91Y2hlc1sgMCBdLAoJCWRpZENhbmNlbCA9IGRpZFNjcm9sbCwKCQltb3ZlVGhyZXNob2xkID0gJC52bW91c2UubW92ZURpc3RhbmNlVGhyZXNob2xkLAoJCWZsYWdzID0gZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggZXZlbnQudGFyZ2V0ICk7CgoJCWRpZFNjcm9sbCA9IGRpZFNjcm9sbCB8fAoJCQkoIE1hdGguYWJzKCB0LnBhZ2VYIC0gc3RhcnRYICkgPiBtb3ZlVGhyZXNob2xkIHx8CgkJCQlNYXRoLmFicyggdC5wYWdlWSAtIHN0YXJ0WSApID4gbW92ZVRocmVzaG9sZCApOwoKCglpZiAoIGRpZFNjcm9sbCAmJiAhZGlkQ2FuY2VsICkgewoJCXRyaWdnZXJWaXJ0dWFsRXZlbnQoICJ2bW91c2VjYW5jZWwiLCBldmVudCwgZmxhZ3MgKTsKCX0KCgl0cmlnZ2VyVmlydHVhbEV2ZW50KCAidm1vdXNlbW92ZSIsIGV2ZW50LCBmbGFncyApOwoJc3RhcnRSZXNldFRpbWVyKCk7Cn0KCmZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKCBldmVudCApIHsKCWlmICggYmxvY2tUb3VjaFRyaWdnZXJzICkgewoJCXJldHVybjsKCX0KCglkaXNhYmxlVG91Y2hCaW5kaW5ncygpOwoKCXZhciBmbGFncyA9IGdldFZpcnR1YWxCaW5kaW5nRmxhZ3MoIGV2ZW50LnRhcmdldCApLAoJCXQ7Cgl0cmlnZ2VyVmlydHVhbEV2ZW50KCAidm1vdXNldXAiLCBldmVudCwgZmxhZ3MgKTsKCglpZiAoICFkaWRTY3JvbGwgKSB7CgkJdmFyIHZlID0gdHJpZ2dlclZpcnR1YWxFdmVudCggInZjbGljayIsIGV2ZW50LCBmbGFncyApOwoJCWlmICggdmUgJiYgdmUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgkJCS8vIFRoZSB0YXJnZXQgb2YgdGhlIG1vdXNlIGV2ZW50cyB0aGF0IGZvbGxvdyB0aGUgdG91Y2hlbmQKCQkJLy8gZXZlbnQgZG9uJ3QgbmVjZXNzYXJpbHkgbWF0Y2ggdGhlIHRhcmdldCB1c2VkIGR1cmluZyB0aGUKCQkJLy8gdG91Y2guIFRoaXMgbWVhbnMgd2UgbmVlZCB0byByZWx5IG9uIGNvb3JkaW5hdGVzIGZvciBibG9ja2luZwoJCQkvLyBhbnkgY2xpY2sgdGhhdCBpcyBnZW5lcmF0ZWQuCgkJCXQgPSBnZXROYXRpdmVFdmVudCggZXZlbnQgKS5jaGFuZ2VkVG91Y2hlc1sgMCBdOwoJCQljbGlja0Jsb2NrTGlzdC5wdXNoKHsKCQkJCXRvdWNoSUQ6IGxhc3RUb3VjaElELAoJCQkJeDogdC5jbGllbnRYLAoJCQkJeTogdC5jbGllbnRZCgkJCX0pOwoKCQkJLy8gUHJldmVudCBhbnkgbW91c2UgZXZlbnRzIHRoYXQgZm9sbG93IGZyb20gdHJpZ2dlcmluZwoJCQkvLyB2aXJ0dWFsIGV2ZW50IG5vdGlmaWNhdGlvbnMuCgkJCWJsb2NrTW91c2VUcmlnZ2VycyA9IHRydWU7CgkJfQoJfQoJdHJpZ2dlclZpcnR1YWxFdmVudCggInZtb3VzZW91dCIsIGV2ZW50LCBmbGFncyk7CglkaWRTY3JvbGwgPSBmYWxzZTsKCglzdGFydFJlc2V0VGltZXIoKTsKfQoKZnVuY3Rpb24gaGFzVmlydHVhbEJpbmRpbmdzKCBlbGUgKSB7Cgl2YXIgYmluZGluZ3MgPSAkLmRhdGEoIGVsZSwgZGF0YVByb3BlcnR5TmFtZSApLAoJCWs7CgoJaWYgKCBiaW5kaW5ncyApIHsKCQlmb3IgKCBrIGluIGJpbmRpbmdzICkgewoJCQlpZiAoIGJpbmRpbmdzWyBrIF0gKSB7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCX0KCXJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gZHVtbXlNb3VzZUhhbmRsZXIoKSB7fQoKZnVuY3Rpb24gZ2V0U3BlY2lhbEV2ZW50T2JqZWN0KCBldmVudFR5cGUgKSB7Cgl2YXIgcmVhbFR5cGUgPSBldmVudFR5cGUuc3Vic3RyKCAxICk7CgoJcmV0dXJuIHsKCQlzZXR1cDogZnVuY3Rpb24oIGRhdGEsIG5hbWVzcGFjZSApIHsKCQkJLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdmlydHVhbCBtb3VzZSBiaW5kaW5nIGZvciB0aGlzIGVsZW1lbnQsCgkJCS8vIGFkZCBhIGJpbmRpbmdzIG9iamVjdCB0byBpdHMgZGF0YS4KCgkJCWlmICggIWhhc1ZpcnR1YWxCaW5kaW5ncyggdGhpcyApICkgewoJCQkJJC5kYXRhKCB0aGlzLCBkYXRhUHJvcGVydHlOYW1lLCB7fSApOwoJCQl9CgoJCQkvLyBJZiBzZXR1cCBpcyBjYWxsZWQsIHdlIGtub3cgaXQgaXMgdGhlIGZpcnN0IGJpbmRpbmcgZm9yIHRoaXMKCQkJLy8gZXZlbnRUeXBlLCBzbyBpbml0aWFsaXplIHRoZSBjb3VudCBmb3IgdGhlIGV2ZW50VHlwZSB0byB6ZXJvLgoJCQl2YXIgYmluZGluZ3MgPSAkLmRhdGEoIHRoaXMsIGRhdGFQcm9wZXJ0eU5hbWUgKTsKCQkJYmluZGluZ3NbIGV2ZW50VHlwZSBdID0gdHJ1ZTsKCgkJCS8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHZpcnR1YWwgbW91c2UgZXZlbnQgZm9yIHRoaXMgdHlwZSwKCQkJLy8gcmVnaXN0ZXIgYSBnbG9iYWwgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQuCgoJCQlhY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF0gPSAoIGFjdGl2ZURvY0hhbmRsZXJzWyBldmVudFR5cGUgXSB8fCAwICkgKyAxOwoKCQkJaWYgKCBhY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF0gPT09IDEgKSB7CgkJCQkkZG9jdW1lbnQuYmluZCggcmVhbFR5cGUsIG1vdXNlRXZlbnRDYWxsYmFjayApOwoJCQl9CgoJCQkvLyBTb21lIGJyb3dzZXJzLCBsaWtlIE9wZXJhIE1pbmksIHdvbid0IGRpc3BhdGNoIG1vdXNlL2NsaWNrIGV2ZW50cwoJCQkvLyBmb3IgZWxlbWVudHMgdW5sZXNzIHRoZXkgYWN0dWFsbHkgaGF2ZSBoYW5kbGVycyByZWdpc3RlcmVkIG9uIHRoZW0uCgkJCS8vIFRvIGdldCBhcm91bmQgdGhpcywgd2UgcmVnaXN0ZXIgZHVtbXkgaGFuZGxlcnMgb24gdGhlIGVsZW1lbnRzLgoKCQkJJCggdGhpcyApLmJpbmQoIHJlYWxUeXBlLCBkdW1teU1vdXNlSGFuZGxlciApOwoKCQkJLy8gRm9yIG5vdywgaWYgZXZlbnQgY2FwdHVyZSBpcyBub3Qgc3VwcG9ydGVkLCB3ZSByZWx5IG9uIG1vdXNlIGhhbmRsZXJzLgoJCQlpZiAoIGV2ZW50Q2FwdHVyZVN1cHBvcnRlZCApIHsKCQkJCS8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHZpcnR1YWwgbW91c2UgYmluZGluZyBmb3IgdGhlIGRvY3VtZW50LAoJCQkJLy8gcmVnaXN0ZXIgb3VyIHRvdWNoc3RhcnQgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQuCgoJCQkJYWN0aXZlRG9jSGFuZGxlcnNbICJ0b3VjaHN0YXJ0IiBdID0gKCBhY3RpdmVEb2NIYW5kbGVyc1sgInRvdWNoc3RhcnQiIF0gfHwgMCkgKyAxOwoKCQkJCWlmICggYWN0aXZlRG9jSGFuZGxlcnNbICJ0b3VjaHN0YXJ0IiBdID09PSAxICkgewoJCQkJCSRkb2N1bWVudC5iaW5kKCAidG91Y2hzdGFydCIsIGhhbmRsZVRvdWNoU3RhcnQgKQoJCQkJCQkuYmluZCggInRvdWNoZW5kIiwgaGFuZGxlVG91Y2hFbmQgKQoKCQkJCQkJLy8gT24gdG91Y2ggcGxhdGZvcm1zLCB0b3VjaGluZyB0aGUgc2NyZWVuIGFuZCB0aGVuIGRyYWdnaW5nIHlvdXIgZmluZ2VyCgkJCQkJCS8vIGNhdXNlcyB0aGUgd2luZG93IGNvbnRlbnQgdG8gc2Nyb2xsIGFmdGVyIHNvbWUgZGlzdGFuY2UgdGhyZXNob2xkIGlzCgkJCQkJCS8vIGV4Y2VlZGVkLiBPbiB0aGVzZSBwbGF0Zm9ybXMsIGEgc2Nyb2xsIHByZXZlbnRzIGEgY2xpY2sgZXZlbnQgZnJvbSBiZWluZwoJCQkJCQkvLyBkaXNwYXRjaGVkLCBhbmQgb24gc29tZSBwbGF0Zm9ybXMsIGV2ZW4gdGhlIHRvdWNoZW5kIGlzIHN1cHByZXNzZWQuIFRvCgkJCQkJCS8vIG1pbWljIHRoZSBzdXBwcmVzc2lvbiBvZiB0aGUgY2xpY2sgZXZlbnQsIHdlIG5lZWQgdG8gd2F0Y2ggZm9yIGEgc2Nyb2xsCgkJCQkJCS8vIGV2ZW50LiBVbmZvcnR1bmF0ZWx5LCBzb21lIHBsYXRmb3JtcyBsaWtlIGlPUyBkb24ndCBkaXNwYXRjaCBzY3JvbGwKCQkJCQkJLy8gZXZlbnRzIHVudGlsICpBRlRFUiogdGhlIHVzZXIgbGlmdHMgdGhlaXIgZmluZ2VyICh0b3VjaGVuZCkuIFRoaXMgbWVhbnMKCQkJCQkJLy8gd2UgbmVlZCB0byB3YXRjaCBib3RoIHNjcm9sbCBhbmQgdG91Y2htb3ZlIGV2ZW50cyB0byBmaWd1cmUgb3V0IHdoZXRoZXIKCQkJCQkJLy8gb3Igbm90IGEgc2Nyb2xsIGhhcHBlbmVucyBiZWZvcmUgdGhlIHRvdWNoZW5kIGV2ZW50IGlzIGZpcmVkLgoKCQkJCQkJLmJpbmQoICJ0b3VjaG1vdmUiLCBoYW5kbGVUb3VjaE1vdmUgKQoJCQkJCQkuYmluZCggInNjcm9sbCIsIGhhbmRsZVNjcm9sbCApOwoJCQkJfQoJCQl9CgkJfSwKCgkJdGVhcmRvd246IGZ1bmN0aW9uKCBkYXRhLCBuYW1lc3BhY2UgKSB7CgkJCS8vIElmIHRoaXMgaXMgdGhlIGxhc3QgdmlydHVhbCBiaW5kaW5nIGZvciB0aGlzIGV2ZW50VHlwZSwKCQkJLy8gcmVtb3ZlIGl0cyBnbG9iYWwgaGFuZGxlciBmcm9tIHRoZSBkb2N1bWVudC4KCgkJCS0tYWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdOwoKCQkJaWYgKCAhYWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdICkgewoJCQkJJGRvY3VtZW50LnVuYmluZCggcmVhbFR5cGUsIG1vdXNlRXZlbnRDYWxsYmFjayApOwoJCQl9CgoJCQlpZiAoIGV2ZW50Q2FwdHVyZVN1cHBvcnRlZCApIHsKCQkJCS8vIElmIHRoaXMgaXMgdGhlIGxhc3QgdmlydHVhbCBtb3VzZSBiaW5kaW5nIGluIGV4aXN0ZW5jZSwKCQkJCS8vIHJlbW92ZSBvdXIgZG9jdW1lbnQgdG91Y2hzdGFydCBsaXN0ZW5lci4KCgkJCQktLWFjdGl2ZURvY0hhbmRsZXJzWyAidG91Y2hzdGFydCIgXTsKCgkJCQlpZiAoICFhY3RpdmVEb2NIYW5kbGVyc1sgInRvdWNoc3RhcnQiIF0gKSB7CgkJCQkJJGRvY3VtZW50LnVuYmluZCggInRvdWNoc3RhcnQiLCBoYW5kbGVUb3VjaFN0YXJ0ICkKCQkJCQkJLnVuYmluZCggInRvdWNobW92ZSIsIGhhbmRsZVRvdWNoTW92ZSApCgkJCQkJCS51bmJpbmQoICJ0b3VjaGVuZCIsIGhhbmRsZVRvdWNoRW5kICkKCQkJCQkJLnVuYmluZCggInNjcm9sbCIsIGhhbmRsZVNjcm9sbCApOwoJCQkJfQoJCQl9CgoJCQl2YXIgJHRoaXMgPSAkKCB0aGlzICksCgkJCQliaW5kaW5ncyA9ICQuZGF0YSggdGhpcywgZGF0YVByb3BlcnR5TmFtZSApOwoKCQkJLy8gdGVhcmRvd24gbWF5IGJlIGNhbGxlZCB3aGVuIGFuIGVsZW1lbnQgd2FzCgkJCS8vIHJlbW92ZWQgZnJvbSB0aGUgRE9NLiBJZiB0aGlzIGlzIHRoZSBjYXNlLAoJCQkvLyBqUXVlcnkgY29yZSBtYXkgaGF2ZSBhbHJlYWR5IHN0cmlwcGVkIHRoZSBlbGVtZW50CgkJCS8vIG9mIGFueSBkYXRhIGJpbmRpbmdzIHNvIHdlIG5lZWQgdG8gY2hlY2sgaXQgYmVmb3JlCgkJCS8vIHVzaW5nIGl0LgoJCQlpZiAoIGJpbmRpbmdzICkgewoJCQkJYmluZGluZ3NbIGV2ZW50VHlwZSBdID0gZmFsc2U7CgkJCX0KCgkJCS8vIFVucmVnaXN0ZXIgdGhlIGR1bW15IGV2ZW50IGhhbmRsZXIuCgoJCQkkdGhpcy51bmJpbmQoIHJlYWxUeXBlLCBkdW1teU1vdXNlSGFuZGxlciApOwoKCQkJLy8gSWYgdGhpcyBpcyB0aGUgbGFzdCB2aXJ0dWFsIG1vdXNlIGJpbmRpbmcgb24gdGhlCgkJCS8vIGVsZW1lbnQsIHJlbW92ZSB0aGUgYmluZGluZyBkYXRhIGZyb20gdGhlIGVsZW1lbnQuCgoJCQlpZiAoICFoYXNWaXJ0dWFsQmluZGluZ3MoIHRoaXMgKSApIHsKCQkJCSR0aGlzLnJlbW92ZURhdGEoIGRhdGFQcm9wZXJ0eU5hbWUgKTsKCQkJfQoJCX0KCX07Cn0KCi8vIEV4cG9zZSBvdXIgY3VzdG9tIGV2ZW50cyB0byB0aGUgalF1ZXJ5IGJpbmQvdW5iaW5kIG1lY2hhbmlzbS4KCmZvciAoIHZhciBpID0gMDsgaSA8IHZpcnR1YWxFdmVudE5hbWVzLmxlbmd0aDsgaSsrICkgewoJJC5ldmVudC5zcGVjaWFsWyB2aXJ0dWFsRXZlbnROYW1lc1sgaSBdIF0gPSBnZXRTcGVjaWFsRXZlbnRPYmplY3QoIHZpcnR1YWxFdmVudE5hbWVzWyBpIF0gKTsKfQoKLy8gQWRkIGEgY2FwdHVyZSBjbGljayBoYW5kbGVyIHRvIGJsb2NrIGNsaWNrcy4KLy8gTm90ZSB0aGF0IHdlIHJlcXVpcmUgZXZlbnQgY2FwdHVyZSBzdXBwb3J0IGZvciB0aGlzIHNvIGlmIHRoZSBkZXZpY2UKLy8gZG9lc24ndCBzdXBwb3J0IGl0LCB3ZSBwdW50IGZvciBub3cgYW5kIHJlbHkgc29sZWx5IG9uIG1vdXNlIGV2ZW50cy4KaWYgKCBldmVudENhcHR1cmVTdXBwb3J0ZWQgKSB7Cglkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAiY2xpY2siLCBmdW5jdGlvbiggZSApIHsKCQl2YXIgY250ID0gY2xpY2tCbG9ja0xpc3QubGVuZ3RoLAoJCQl0YXJnZXQgPSBlLnRhcmdldCwKCQkJeCwgeSwgZWxlLCBpLCBvLCB0b3VjaElEOwoKCQlpZiAoIGNudCApIHsKCQkJeCA9IGUuY2xpZW50WDsKCQkJeSA9IGUuY2xpZW50WTsKCQkJdGhyZXNob2xkID0gJC52bW91c2UuY2xpY2tEaXN0YW5jZVRocmVzaG9sZDsKCgkJCS8vIFRoZSBpZGVhIGhlcmUgaXMgdG8gcnVuIHRocm91Z2ggdGhlIGNsaWNrQmxvY2tMaXN0IHRvIHNlZSBpZgoJCQkvLyB0aGUgY3VycmVudCBjbGljayBldmVudCBpcyBpbiB0aGUgcHJveGltaXR5IG9mIG9uZSBvZiBvdXIKCQkJLy8gdmNsaWNrIGV2ZW50cyB0aGF0IGhhZCBwcmV2ZW50RGVmYXVsdCgpIGNhbGxlZCBvbiBpdC4gSWYgd2UgZmluZAoJCQkvLyBvbmUsIHRoZW4gd2UgYmxvY2sgdGhlIGNsaWNrLgoJCQkvLwoJCQkvLyBXaHkgZG8gd2UgaGF2ZSB0byByZWx5IG9uIHByb3hpbWl0eT8KCQkJLy8KCQkJLy8gQmVjYXVzZSB0aGUgdGFyZ2V0IG9mIHRoZSB0b3VjaCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgdmNsaWNrCgkJCS8vIGNhbiBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgdGFyZ2V0IG9mIHRoZSBjbGljayBldmVudCBzeW50aGVzaXplZAoJCQkvLyBieSB0aGUgYnJvd3Nlci4gVGhlIHRhcmdldCBvZiBhIG1vdXNlL2NsaWNrIGV2ZW50IHRoYXQgaXMgc3ludGVoc2l6ZWQKCQkJLy8gZnJvbSBhIHRvdWNoIGV2ZW50IHNlZW1zIHRvIGJlIGltcGxlbWVudGF0aW9uIHNwZWNpZmljLiBGb3IgZXhhbXBsZSwKCQkJLy8gc29tZSBicm93c2VycyB3aWxsIGZpcmUgbW91c2UvY2xpY2sgZXZlbnRzIGZvciBhIGxpbmsgdGhhdCBpcyBuZWFyCgkJCS8vIGEgdG91Y2ggZXZlbnQsIGV2ZW4gdGhvdWdoIHRoZSB0YXJnZXQgb2YgdGhlIHRvdWNoc3RhcnQvdG91Y2hlbmQgZXZlbnQKCQkJLy8gc2F5cyB0aGUgdXNlciB0b3VjaGVkIG91dHNpZGUgdGhlIGxpbmsuIEFsc28sIGl0IHNlZW1zIHRoYXQgd2l0aCBtb3N0CgkJCS8vIGJyb3dzZXJzLCB0aGUgdGFyZ2V0IG9mIHRoZSBtb3VzZS9jbGljayBldmVudCBpcyBub3QgY2FsY3VsYXRlZCB1bnRpbCB0aGUKCQkJLy8gdGltZSBpdCBpcyBkaXNwYXRjaGVkLCBzbyBpZiB5b3UgcmVwbGFjZSBhbiBlbGVtZW50IHRoYXQgeW91IHRvdWNoZWQKCQkJLy8gd2l0aCBhbm90aGVyIGVsZW1lbnQsIHRoZSB0YXJnZXQgb2YgdGhlIG1vdXNlL2NsaWNrIHdpbGwgYmUgdGhlIG5ldwoJCQkvLyBlbGVtZW50IHVuZGVybmVhdGggdGhhdCBwb2ludC4KCQkJLy8KCQkJLy8gQXNpZGUgZnJvbSBwcm94aW1pdHksIHdlIGFsc28gY2hlY2sgdG8gc2VlIGlmIHRoZSB0YXJnZXQgYW5kIGFueQoJCQkvLyBvZiBpdHMgYW5jZXN0b3JzIHdlcmUgdGhlIG9uZXMgdGhhdCBibG9ja2VkIGEgY2xpY2suIFRoaXMgaXMgbmVjZXNzYXJ5CgkJCS8vIGJlY2F1c2Ugb2YgdGhlIHN0cmFuZ2UgbW91c2UvY2xpY2sgdGFyZ2V0IGNhbGN1bGF0aW9uIGRvbmUgaW4gdGhlCgkJCS8vIEFuZHJvaWQgMi4xIGJyb3dzZXIsIHdoZXJlIGlmIHlvdSBjbGljayBvbiBhbiBlbGVtZW50LCBhbmQgdGhlcmUgaXMgYQoJCQkvLyBtb3VzZS9jbGljayBoYW5kbGVyIG9uIG9uZSBvZiBpdHMgYW5jZXN0b3JzLCB0aGUgdGFyZ2V0IHdpbGwgYmUgdGhlCgkJCS8vIGlubmVybW9zdCBjaGlsZCBvZiB0aGUgdG91Y2hlZCBlbGVtZW50LCBldmVuIGlmIHRoYXQgY2hpbGQgaXMgbm8gd2hlcmUKCQkJLy8gbmVhciB0aGUgcG9pbnQgb2YgdG91Y2guCgoJCQllbGUgPSB0YXJnZXQ7CgoJCQl3aGlsZSAoIGVsZSApIHsKCQkJCWZvciAoIGkgPSAwOyBpIDwgY250OyBpKysgKSB7CgkJCQkJbyA9IGNsaWNrQmxvY2tMaXN0WyBpIF07CgkJCQkJdG91Y2hJRCA9IDA7CgoJCQkJCWlmICggKCBlbGUgPT09IHRhcmdldCAmJiBNYXRoLmFicyggby54IC0geCApIDwgdGhyZXNob2xkICYmIE1hdGguYWJzKCBvLnkgLSB5ICkgPCB0aHJlc2hvbGQgKSB8fAoJCQkJCQkJCSQuZGF0YSggZWxlLCB0b3VjaFRhcmdldFByb3BlcnR5TmFtZSApID09PSBvLnRvdWNoSUQgKSB7CgkJCQkJCS8vIFhYWDogV2UgbWF5IHdhbnQgdG8gY29uc2lkZXIgcmVtb3ZpbmcgbWF0Y2hlcyBmcm9tIHRoZSBibG9jayBsaXN0CgkJCQkJCS8vICAgICAgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciB0aGUgcmVzZXQgdGltZXIgdG8gZmlyZS4KCQkJCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCQllLnN0b3BQcm9wYWdhdGlvbigpOwoJCQkJCQlyZXR1cm47CgkJCQkJfQoJCQkJfQoJCQkJZWxlID0gZWxlLnBhcmVudE5vZGU7CgkJCX0KCQl9Cgl9LCB0cnVlKTsKfQp9KSggalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50ICk7CgoJKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgkJdmFyIHN1cHBvcnQgPSB7CgkJCXRvdWNoOiAib250b3VjaGVuZCIgaW4gZG9jdW1lbnQKCQl9OwoKCQkkLm1vYmlsZSA9ICQubW9iaWxlIHx8IHt9OwoJCSQubW9iaWxlLnN1cHBvcnQgPSAkLm1vYmlsZS5zdXBwb3J0IHx8IHt9OwoJCSQuZXh0ZW5kKCAkLnN1cHBvcnQsIHN1cHBvcnQgKTsKCQkkLmV4dGVuZCggJC5tb2JpbGUuc3VwcG9ydCwgc3VwcG9ydCApOwoJfSggalF1ZXJ5ICkpOwoKCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgkvLyBhZGQgbmV3IGV2ZW50IHNob3J0Y3V0cwoJJC5lYWNoKCAoICJ0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCAiICsKCQkidGFwIHRhcGhvbGQgIiArCgkJInN3aXBlIHN3aXBlbGVmdCBzd2lwZXJpZ2h0ICIgKwoJCSJzY3JvbGxzdGFydCBzY3JvbGxzdG9wIiApLnNwbGl0KCAiICIgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7CgoJCSQuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBmbiApIHsKCQkJcmV0dXJuIGZuID8gdGhpcy5iaW5kKCBuYW1lLCBmbiApIDogdGhpcy50cmlnZ2VyKCBuYW1lICk7CgkJfTsKCgkJLy8galF1ZXJ5IDwgMS44CgkJaWYgKCAkLmF0dHJGbiApIHsKCQkJJC5hdHRyRm5bIG5hbWUgXSA9IHRydWU7CgkJfQoJfSk7CgoJdmFyIHN1cHBvcnRUb3VjaCA9ICQubW9iaWxlLnN1cHBvcnQudG91Y2gsCgkJc2Nyb2xsRXZlbnQgPSAidG91Y2htb3ZlIHNjcm9sbCIsCgkJdG91Y2hTdGFydEV2ZW50ID0gc3VwcG9ydFRvdWNoID8gInRvdWNoc3RhcnQiIDogIm1vdXNlZG93biIsCgkJdG91Y2hTdG9wRXZlbnQgPSBzdXBwb3J0VG91Y2ggPyAidG91Y2hlbmQiIDogIm1vdXNldXAiLAoJCXRvdWNoTW92ZUV2ZW50ID0gc3VwcG9ydFRvdWNoID8gInRvdWNobW92ZSIgOiAibW91c2Vtb3ZlIjsKCglmdW5jdGlvbiB0cmlnZ2VyQ3VzdG9tRXZlbnQoIG9iaiwgZXZlbnRUeXBlLCBldmVudCApIHsKCQl2YXIgb3JpZ2luYWxUeXBlID0gZXZlbnQudHlwZTsKCQlldmVudC50eXBlID0gZXZlbnRUeXBlOwoJCSQuZXZlbnQuaGFuZGxlLmNhbGwoIG9iaiwgZXZlbnQgKTsKCQlldmVudC50eXBlID0gb3JpZ2luYWxUeXBlOwoJfQoKCS8vIGFsc28gaGFuZGxlcyBzY3JvbGxzdG9wCgkkLmV2ZW50LnNwZWNpYWwuc2Nyb2xsc3RhcnQgPSB7CgoJCWVuYWJsZWQ6IHRydWUsCgoJCXNldHVwOiBmdW5jdGlvbigpIHsKCgkJCXZhciB0aGlzT2JqZWN0ID0gdGhpcywKCQkJCSR0aGlzID0gJCggdGhpc09iamVjdCApLAoJCQkJc2Nyb2xsaW5nLAoJCQkJdGltZXI7CgoJCQlmdW5jdGlvbiB0cmlnZ2VyKCBldmVudCwgc3RhdGUgKSB7CgkJCQlzY3JvbGxpbmcgPSBzdGF0ZTsKCQkJCXRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgc2Nyb2xsaW5nID8gInNjcm9sbHN0YXJ0IiA6ICJzY3JvbGxzdG9wIiwgZXZlbnQgKTsKCQkJfQoKCQkJLy8gaVBob25lIHRyaWdnZXJzIHNjcm9sbCBhZnRlciBhIHNtYWxsIGRlbGF5OyB1c2UgdG91Y2htb3ZlIGluc3RlYWQKCQkJJHRoaXMuYmluZCggc2Nyb2xsRXZlbnQsIGZ1bmN0aW9uKCBldmVudCApIHsKCgkJCQlpZiAoICEkLmV2ZW50LnNwZWNpYWwuc2Nyb2xsc3RhcnQuZW5hYmxlZCApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJaWYgKCAhc2Nyb2xsaW5nICkgewoJCQkJCXRyaWdnZXIoIGV2ZW50LCB0cnVlICk7CgkJCQl9CgoJCQkJY2xlYXJUaW1lb3V0KCB0aW1lciApOwoJCQkJdGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsKCQkJCQl0cmlnZ2VyKCBldmVudCwgZmFsc2UgKTsKCQkJCX0sIDUwICk7CgkJCX0pOwoJCX0KCX07CgoJLy8gYWxzbyBoYW5kbGVzIHRhcGhvbGQKCSQuZXZlbnQuc3BlY2lhbC50YXAgPSB7CgkJdGFwaG9sZFRocmVzaG9sZDogNzUwLAoKCQlzZXR1cDogZnVuY3Rpb24oKSB7CgkJCXZhciB0aGlzT2JqZWN0ID0gdGhpcywKCQkJCSR0aGlzID0gJCggdGhpc09iamVjdCApOwoKCQkJJHRoaXMuYmluZCggInZtb3VzZWRvd24iLCBmdW5jdGlvbiggZXZlbnQgKSB7CgoJCQkJaWYgKCBldmVudC53aGljaCAmJiBldmVudC53aGljaCAhPT0gMSApIHsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgoJCQkJdmFyIG9yaWdUYXJnZXQgPSBldmVudC50YXJnZXQsCgkJCQkJb3JpZ0V2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCwKCQkJCQl0aW1lcjsKCgkJCQlmdW5jdGlvbiBjbGVhclRhcFRpbWVyKCkgewoJCQkJCWNsZWFyVGltZW91dCggdGltZXIgKTsKCQkJCX0KCgkJCQlmdW5jdGlvbiBjbGVhclRhcEhhbmRsZXJzKCkgewoJCQkJCWNsZWFyVGFwVGltZXIoKTsKCgkJCQkJJHRoaXMudW5iaW5kKCAidmNsaWNrIiwgY2xpY2tIYW5kbGVyICkKCQkJCQkJLnVuYmluZCggInZtb3VzZXVwIiwgY2xlYXJUYXBUaW1lciApOwoJCQkJCSQoIGRvY3VtZW50ICkudW5iaW5kKCAidm1vdXNlY2FuY2VsIiwgY2xlYXJUYXBIYW5kbGVycyApOwoJCQkJfQoKCQkJCWZ1bmN0aW9uIGNsaWNrSGFuZGxlciggZXZlbnQgKSB7CgkJCQkJY2xlYXJUYXBIYW5kbGVycygpOwoKCQkJCQkvLyBPTkxZIHRyaWdnZXIgYSAndGFwJyBldmVudCBpZiB0aGUgc3RhcnQgdGFyZ2V0IGlzCgkJCQkJLy8gdGhlIHNhbWUgYXMgdGhlIHN0b3AgdGFyZ2V0LgoJCQkJCWlmICggb3JpZ1RhcmdldCA9PT0gZXZlbnQudGFyZ2V0ICkgewoJCQkJCQl0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsICJ0YXAiLCBldmVudCApOwoJCQkJCX0KCQkJCX0KCgkJCQkkdGhpcy5iaW5kKCAidm1vdXNldXAiLCBjbGVhclRhcFRpbWVyICkKCQkJCQkuYmluZCggInZjbGljayIsIGNsaWNrSGFuZGxlciApOwoJCQkJJCggZG9jdW1lbnQgKS5iaW5kKCAidm1vdXNlY2FuY2VsIiwgY2xlYXJUYXBIYW5kbGVycyApOwoKCQkJCXRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCQkJdHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCAidGFwaG9sZCIsICQuRXZlbnQoICJ0YXBob2xkIiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQgfSApICk7CgkJCQl9LCAkLmV2ZW50LnNwZWNpYWwudGFwLnRhcGhvbGRUaHJlc2hvbGQgKTsKCQkJfSk7CgkJfQoJfTsKCgkvLyBhbHNvIGhhbmRsZXMgc3dpcGVsZWZ0LCBzd2lwZXJpZ2h0CgkkLmV2ZW50LnNwZWNpYWwuc3dpcGUgPSB7CgkJc2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZDogMzAsIC8vIE1vcmUgdGhhbiB0aGlzIGhvcml6b250YWwgZGlzcGxhY2VtZW50LCBhbmQgd2Ugd2lsbCBzdXBwcmVzcyBzY3JvbGxpbmcuCgoJCWR1cmF0aW9uVGhyZXNob2xkOiAxMDAwLCAvLyBNb3JlIHRpbWUgdGhhbiB0aGlzLCBhbmQgaXQgaXNuJ3QgYSBzd2lwZS4KCgkJaG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkOiAzMCwgIC8vIFN3aXBlIGhvcml6b250YWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbW9yZSB0aGFuIHRoaXMuCgoJCXZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQ6IDc1LCAgLy8gU3dpcGUgdmVydGljYWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbGVzcyB0aGFuIHRoaXMuCgoJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJdmFyIHRoaXNPYmplY3QgPSB0aGlzLAoJCQkJJHRoaXMgPSAkKCB0aGlzT2JqZWN0ICk7CgoJCQkkdGhpcy5iaW5kKCB0b3VjaFN0YXJ0RXZlbnQsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCXZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID8KCQkJCQkJZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCwKCQkJCQlzdGFydCA9IHsKCQkJCQkJdGltZTogKCBuZXcgRGF0ZSgpICkuZ2V0VGltZSgpLAoJCQkJCQljb29yZHM6IFsgZGF0YS5wYWdlWCwgZGF0YS5wYWdlWSBdLAoJCQkJCQlvcmlnaW46ICQoIGV2ZW50LnRhcmdldCApCgkJCQkJfSwKCQkJCQlzdG9wOwoKCQkJCWZ1bmN0aW9uIG1vdmVIYW5kbGVyKCBldmVudCApIHsKCgkJCQkJaWYgKCAhc3RhcnQgKSB7CgkJCQkJCXJldHVybjsKCQkJCQl9CgoJCQkJCXZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID8KCQkJCQkJZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudDsKCgkJCQkJc3RvcCA9IHsKCQkJCQkJdGltZTogKCBuZXcgRGF0ZSgpICkuZ2V0VGltZSgpLAoJCQkJCQljb29yZHM6IFsgZGF0YS5wYWdlWCwgZGF0YS5wYWdlWSBdCgkJCQkJfTsKCgkJCQkJLy8gcHJldmVudCBzY3JvbGxpbmcKCQkJCQlpZiAoIE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkICkgewoJCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCX0KCQkJCX0KCgkJCQkkdGhpcy5iaW5kKCB0b3VjaE1vdmVFdmVudCwgbW92ZUhhbmRsZXIgKQoJCQkJCS5vbmUoIHRvdWNoU3RvcEV2ZW50LCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJCSR0aGlzLnVuYmluZCggdG91Y2hNb3ZlRXZlbnQsIG1vdmVIYW5kbGVyICk7CgoJCQkJCQlpZiAoIHN0YXJ0ICYmIHN0b3AgKSB7CgkJCQkJCQlpZiAoIHN0b3AudGltZSAtIHN0YXJ0LnRpbWUgPCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZHVyYXRpb25UaHJlc2hvbGQgJiYKCQkJCQkJCQlNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuaG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkICYmCgkJCQkJCQkJTWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMSBdIC0gc3RvcC5jb29yZHNbIDEgXSApIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLnZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQgKSB7CgoJCQkJCQkJCXN0YXJ0Lm9yaWdpbi50cmlnZ2VyKCAic3dpcGUiICkKCQkJCQkJCQkJLnRyaWdnZXIoIHN0YXJ0LmNvb3Jkc1swXSA+IHN0b3AuY29vcmRzWyAwIF0gPyAic3dpcGVsZWZ0IiA6ICJzd2lwZXJpZ2h0IiApOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJCXN0YXJ0ID0gc3RvcCA9IHVuZGVmaW5lZDsKCQkJCQl9KTsKCQkJfSk7CgkJfQoJfTsKCSQuZWFjaCh7CgkJc2Nyb2xsc3RvcDogInNjcm9sbHN0YXJ0IiwKCQl0YXBob2xkOiAidGFwIiwKCQlzd2lwZWxlZnQ6ICJzd2lwZSIsCgkJc3dpcGVyaWdodDogInN3aXBlIgoJfSwgZnVuY3Rpb24oIGV2ZW50LCBzb3VyY2VFdmVudCApIHsKCgkJJC5ldmVudC5zcGVjaWFsWyBldmVudCBdID0gewoJCQlzZXR1cDogZnVuY3Rpb24oKSB7CgkJCQkkKCB0aGlzICkuYmluZCggc291cmNlRXZlbnQsICQubm9vcCApOwoJCQl9CgkJfTsKCX0pOwoKfSkoIGpRdWVyeSwgdGhpcyApOwoKCShmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoJCSQuZXh0ZW5kKCAkLnN1cHBvcnQsIHsKCQkJb3JpZW50YXRpb246ICJvcmllbnRhdGlvbiIgaW4gd2luZG93ICYmICJvbm9yaWVudGF0aW9uY2hhbmdlIiBpbiB3aW5kb3cKCQl9KTsKCX0oIGpRdWVyeSApKTsKCgoJLy8gdGhyb3R0bGVkIHJlc2l6ZSBldmVudAoJKGZ1bmN0aW9uKCAkICkgewoJCSQuZXZlbnQuc3BlY2lhbC50aHJvdHRsZWRyZXNpemUgPSB7CgkJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJCSQoIHRoaXMgKS5iaW5kKCAicmVzaXplIiwgaGFuZGxlciApOwoJCQl9LAoJCQl0ZWFyZG93bjogZnVuY3Rpb24oKSB7CgkJCQkkKCB0aGlzICkudW5iaW5kKCAicmVzaXplIiwgaGFuZGxlciApOwoJCQl9CgkJfTsKCgkJdmFyIHRocm90dGxlID0gMjUwLAoJCQloYW5kbGVyID0gZnVuY3Rpb24oKSB7CgkJCQljdXJyID0gKCBuZXcgRGF0ZSgpICkuZ2V0VGltZSgpOwoJCQkJZGlmZiA9IGN1cnIgLSBsYXN0Q2FsbDsKCgkJCQlpZiAoIGRpZmYgPj0gdGhyb3R0bGUgKSB7CgoJCQkJCWxhc3RDYWxsID0gY3VycjsKCQkJCQkkKCB0aGlzICkudHJpZ2dlciggInRocm90dGxlZHJlc2l6ZSIgKTsKCgkJCQl9IGVsc2UgewoKCQkJCQlpZiAoIGhlbGRDYWxsICkgewoJCQkJCQljbGVhclRpbWVvdXQoIGhlbGRDYWxsICk7CgkJCQkJfQoKCQkJCQkvLyBQcm9taXNlIGEgaGVsZCBjYWxsIHdpbGwgc3RpbGwgZXhlY3V0ZQoJCQkJCWhlbGRDYWxsID0gc2V0VGltZW91dCggaGFuZGxlciwgdGhyb3R0bGUgLSBkaWZmICk7CgkJCQl9CgkJCX0sCgkJCWxhc3RDYWxsID0gMCwKCQkJaGVsZENhbGwsCgkJCWN1cnIsCgkJCWRpZmY7Cgl9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHdpbmRvdyApIHsKCXZhciB3aW4gPSAkKCB3aW5kb3cgKSwKCQlldmVudF9uYW1lID0gIm9yaWVudGF0aW9uY2hhbmdlIiwKCQlzcGVjaWFsX2V2ZW50LAoJCWdldF9vcmllbnRhdGlvbiwKCQlsYXN0X29yaWVudGF0aW9uLAoJCWluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlLAoJCWluaXRpYWxfb3JpZW50YXRpb25faXNfZGVmYXVsdCwKCQlwb3J0cmFpdF9tYXAgPSB7ICIwIjogdHJ1ZSwgIjE4MCI6IHRydWUgfTsKCgkvLyBJdCBzZWVtcyB0aGF0IHNvbWUgZGV2aWNlL2Jyb3dzZXIgdmVuZG9ycyB1c2Ugd2luZG93Lm9yaWVudGF0aW9uIHZhbHVlcyAwIGFuZCAxODAgdG8KCS8vIGRlbm90ZSB0aGUgImRlZmF1bHQiIG9yaWVudGF0aW9uLiBGb3IgaU9TIGRldmljZXMsIGFuZCBtb3N0IG90aGVyIHNtYXJ0LXBob25lcyB0ZXN0ZWQsCgkvLyB0aGUgZGVmYXVsdCBvcmllbnRhdGlvbiBpcyBhbHdheXMgInBvcnRyYWl0IiwgYnV0IGluIHNvbWUgQW5kcm9pZCBhbmQgUklNIGJhc2VkIHRhYmxldHMsCgkvLyB0aGUgZGVmYXVsdCBvcmllbnRhdGlvbiBpcyAibGFuZHNjYXBlIi4gVGhlIGZvbGxvd2luZyBjb2RlIGF0dGVtcHRzIHRvIHVzZSB0aGUgd2luZG93CgkvLyBkaW1lbnNpb25zIHRvIGZpZ3VyZSBvdXQgd2hhdCB0aGUgY3VycmVudCBvcmllbnRhdGlvbiBpcywgYW5kIHRoZW4gbWFrZXMgYWRqdXN0bWVudHMKCS8vIHRvIHRoZSB0byB0aGUgcG9ydHJhaXRfbWFwIGlmIG5lY2Vzc2FyeSwgc28gdGhhdCB3ZSBjYW4gcHJvcGVybHkgZGVjb2RlIHRoZQoJLy8gd2luZG93Lm9yaWVudGF0aW9uIHZhbHVlIHdoZW5ldmVyIGdldF9vcmllbnRhdGlvbigpIGlzIGNhbGxlZC4KCS8vCgkvLyBOb3RlIHRoYXQgd2UgdXNlZCB0byB1c2UgYSBtZWRpYSBxdWVyeSB0byBmaWd1cmUgb3V0IHdoYXQgdGhlIG9yaWVudGF0aW9uIHRoZSBicm93c2VyCgkvLyB0aGlua3MgaXQgaXMgaW46CgkvLwoJLy8gICAgIGluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlID0gJC5tb2JpbGUubWVkaWEoImFsbCBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIik7CgkvLwoJLy8gYnV0IHRoZXJlIHdhcyBhbiBpUGhvbmUvaVBvZCBUb3VjaCBidWcgYmVnaW5uaW5nIHdpdGggaU9TIDQuMiwgdXAgdGhyb3VnaCBpT1MgNS4xLAoJLy8gd2hlcmUgdGhlIGJyb3dzZXIgKkFMV0FZUyogYXBwbGllZCB0aGUgbGFuZHNjYXBlIG1lZGlhIHF1ZXJ5LiBUaGlzIGJ1ZyBkb2VzIG5vdAoJLy8gaGFwcGVuIG9uIGlQYWQuCgoJaWYgKCAkLnN1cHBvcnQub3JpZW50YXRpb24gKSB7CgoJCS8vIENoZWNrIHRoZSB3aW5kb3cgd2lkdGggYW5kIGhlaWdodCB0byBmaWd1cmUgb3V0IHdoYXQgdGhlIGN1cnJlbnQgb3JpZW50YXRpb24KCQkvLyBvZiB0aGUgZGV2aWNlIGlzIGF0IHRoaXMgbW9tZW50LiBOb3RlIHRoYXQgd2UndmUgaW5pdGlhbGl6ZWQgdGhlIHBvcnRyYWl0IG1hcAoJCS8vIHZhbHVlcyB0byAwIGFuZCAxODAsICpBTkQqIHdlIHB1cnBvc2VseSBjaGVjayBmb3IgbGFuZHNjYXBlIHNvIHRoYXQgaWYgd2UgZ3Vlc3MKCQkvLyB3cm9uZywgLCB3ZSBkZWZhdWx0IHRvIHRoZSBhc3N1bXB0aW9uIHRoYXQgcG9ydHJhaXQgaXMgdGhlIGRlZmF1bHQgb3JpZW50YXRpb24uCgkJLy8gV2UgdXNlIGEgdGhyZXNob2xkIGNoZWNrIGJlbG93IGJlY2F1c2Ugb24gc29tZSBwbGF0Zm9ybXMgbGlrZSBpT1MsIHRoZSBpUGhvbmUKCQkvLyBmb3JtLWZhY3RvciBjYW4gcmVwb3J0IGEgbGFyZ2VyIHdpZHRoIHRoYW4gaGVpZ2h0IGlmIHRoZSB1c2VyIHR1cm5zIG9uIHRoZQoJCS8vIGRldmVsb3BlciBjb25zb2xlLiBUaGUgYWN0dWFsIHRocmVzaG9sZCB2YWx1ZSBpcyBzb21ld2hhdCBhcmJpdHJhcnksIHdlIGp1c3QKCQkvLyBuZWVkIHRvIG1ha2Ugc3VyZSBpdCBpcyBsYXJnZSBlbm91Z2ggdG8gZXhjbHVkZSB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgY2FzZS4KCgkJdmFyIHd3ID0gd2luZG93LmlubmVyV2lkdGggfHwgJCggd2luZG93ICkud2lkdGgoKSwKCQkJd2ggPSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgJCggd2luZG93ICkuaGVpZ2h0KCksCgkJCWxhbmRzY2FwZV90aHJlc2hvbGQgPSA1MDsKCgkJaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUgPSB3dyA+IHdoICYmICggd3cgLSB3aCApID4gbGFuZHNjYXBlX3RocmVzaG9sZDsKCgoJCS8vIE5vdyBjaGVjayB0byBzZWUgaWYgdGhlIGN1cnJlbnQgd2luZG93Lm9yaWVudGF0aW9uIGlzIDAgb3IgMTgwLgoJCWluaXRpYWxfb3JpZW50YXRpb25faXNfZGVmYXVsdCA9IHBvcnRyYWl0X21hcFsgd2luZG93Lm9yaWVudGF0aW9uIF07CgoJCS8vIElmIHRoZSBpbml0aWFsIG9yaWVudGF0aW9uIGlzIGxhbmRzY2FwZSwgYnV0IHdpbmRvdy5vcmllbnRhdGlvbiByZXBvcnRzIDAgb3IgMTgwLCAqT1IqCgkJLy8gaWYgdGhlIGluaXRpYWwgb3JpZW50YXRpb24gaXMgcG9ydHJhaXQsIGJ1dCB3aW5kb3cub3JpZW50YXRpb24gcmVwb3J0cyA5MCBvciAtOTAsIHdlCgkJLy8gbmVlZCB0byBmbGlwIG91ciBwb3J0cmFpdF9tYXAgdmFsdWVzIGJlY2F1c2UgbGFuZHNjYXBlIGlzIHRoZSBkZWZhdWx0IG9yaWVudGF0aW9uIGZvcgoJCS8vIHRoaXMgZGV2aWNlL2Jyb3dzZXIuCgkJaWYgKCAoIGluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlICYmIGluaXRpYWxfb3JpZW50YXRpb25faXNfZGVmYXVsdCApIHx8ICggIWluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlICYmICFpbml0aWFsX29yaWVudGF0aW9uX2lzX2RlZmF1bHQgKSApIHsKCQkJcG9ydHJhaXRfbWFwID0geyAiLTkwIjogdHJ1ZSwgIjkwIjogdHJ1ZSB9OwoJCX0KCX0KCgkkLmV2ZW50LnNwZWNpYWwub3JpZW50YXRpb25jaGFuZ2UgPSAkLmV4dGVuZCgge30sICQuZXZlbnQuc3BlY2lhbC5vcmllbnRhdGlvbmNoYW5nZSwgewoJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJLy8gSWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZCBuYXRpdmVseSwgcmV0dXJuIGZhbHNlIHNvIHRoYXQgalF1ZXJ5CgkJCS8vIHdpbGwgYmluZCB0byB0aGUgZXZlbnQgdXNpbmcgRE9NIG1ldGhvZHMuCgkJCWlmICggJC5zdXBwb3J0Lm9yaWVudGF0aW9uICYmICEkLmV2ZW50LnNwZWNpYWwub3JpZW50YXRpb25jaGFuZ2UuZGlzYWJsZWQgKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCgkJCS8vIEdldCB0aGUgY3VycmVudCBvcmllbnRhdGlvbiB0byBhdm9pZCBpbml0aWFsIGRvdWJsZS10cmlnZ2VyaW5nLgoJCQlsYXN0X29yaWVudGF0aW9uID0gZ2V0X29yaWVudGF0aW9uKCk7CgoJCQkvLyBCZWNhdXNlIHRoZSBvcmllbnRhdGlvbmNoYW5nZSBldmVudCBkb2Vzbid0IGV4aXN0LCBzaW11bGF0ZSB0aGUKCQkJLy8gZXZlbnQgYnkgdGVzdGluZyB3aW5kb3cgZGltZW5zaW9ucyBvbiByZXNpemUuCgkJCXdpbi5iaW5kKCAidGhyb3R0bGVkcmVzaXplIiwgaGFuZGxlciApOwoJCX0sCgkJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCQkvLyBJZiB0aGUgZXZlbnQgaXMgbm90IHN1cHBvcnRlZCBuYXRpdmVseSwgcmV0dXJuIGZhbHNlIHNvIHRoYXQKCQkJLy8galF1ZXJ5IHdpbGwgdW5iaW5kIHRoZSBldmVudCB1c2luZyBET00gbWV0aG9kcy4KCQkJaWYgKCAkLnN1cHBvcnQub3JpZW50YXRpb24gJiYgISQuZXZlbnQuc3BlY2lhbC5vcmllbnRhdGlvbmNoYW5nZS5kaXNhYmxlZCApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJLy8gQmVjYXVzZSB0aGUgb3JpZW50YXRpb25jaGFuZ2UgZXZlbnQgZG9lc24ndCBleGlzdCwgdW5iaW5kIHRoZQoJCQkvLyByZXNpemUgZXZlbnQgaGFuZGxlci4KCQkJd2luLnVuYmluZCggInRocm90dGxlZHJlc2l6ZSIsIGhhbmRsZXIgKTsKCQl9LAoJCWFkZDogZnVuY3Rpb24oIGhhbmRsZU9iaiApIHsKCQkJLy8gU2F2ZSBhIHJlZmVyZW5jZSB0byB0aGUgYm91bmQgZXZlbnQgaGFuZGxlci4KCQkJdmFyIG9sZF9oYW5kbGVyID0gaGFuZGxlT2JqLmhhbmRsZXI7CgoKCQkJaGFuZGxlT2JqLmhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkvLyBNb2RpZnkgZXZlbnQgb2JqZWN0LCBhZGRpbmcgdGhlIC5vcmllbnRhdGlvbiBwcm9wZXJ0eS4KCQkJCWV2ZW50Lm9yaWVudGF0aW9uID0gZ2V0X29yaWVudGF0aW9uKCk7CgoJCQkJLy8gQ2FsbCB0aGUgb3JpZ2luYWxseS1ib3VuZCBldmVudCBoYW5kbGVyIGFuZCByZXR1cm4gaXRzIHJlc3VsdC4KCQkJCXJldHVybiBvbGRfaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCX07CgkJfQoJfSk7CgoJLy8gSWYgdGhlIGV2ZW50IGlzIG5vdCBzdXBwb3J0ZWQgbmF0aXZlbHksIHRoaXMgaGFuZGxlciB3aWxsIGJlIGJvdW5kIHRvCgkvLyB0aGUgd2luZG93IHJlc2l6ZSBldmVudCB0byBzaW11bGF0ZSB0aGUgb3JpZW50YXRpb25jaGFuZ2UgZXZlbnQuCglmdW5jdGlvbiBoYW5kbGVyKCkgewoJCS8vIEdldCB0aGUgY3VycmVudCBvcmllbnRhdGlvbi4KCQl2YXIgb3JpZW50YXRpb24gPSBnZXRfb3JpZW50YXRpb24oKTsKCgkJaWYgKCBvcmllbnRhdGlvbiAhPT0gbGFzdF9vcmllbnRhdGlvbiApIHsKCQkJLy8gVGhlIG9yaWVudGF0aW9uIGhhcyBjaGFuZ2VkLCBzbyB0cmlnZ2VyIHRoZSBvcmllbnRhdGlvbmNoYW5nZSBldmVudC4KCQkJbGFzdF9vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uOwoJCQl3aW4udHJpZ2dlciggZXZlbnRfbmFtZSApOwoJCX0KCX0KCgkvLyBHZXQgdGhlIGN1cnJlbnQgcGFnZSBvcmllbnRhdGlvbi4gVGhpcyBtZXRob2QgaXMgZXhwb3NlZCBwdWJsaWNseSwgc2hvdWxkIGl0CgkvLyBiZSBuZWVkZWQsIGFzIGpRdWVyeS5ldmVudC5zcGVjaWFsLm9yaWVudGF0aW9uY2hhbmdlLm9yaWVudGF0aW9uKCkKCSQuZXZlbnQuc3BlY2lhbC5vcmllbnRhdGlvbmNoYW5nZS5vcmllbnRhdGlvbiA9IGdldF9vcmllbnRhdGlvbiA9IGZ1bmN0aW9uKCkgewoJCXZhciBpc1BvcnRyYWl0ID0gdHJ1ZSwgZWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKCgkJLy8gcHJlZmVyIHdpbmRvdyBvcmllbnRhdGlvbiB0byB0aGUgY2FsY3VsYXRpb24gYmFzZWQgb24gc2NyZWVuc2l6ZSBhcwoJCS8vIHRoZSBhY3R1YWwgc2NyZWVuIHJlc2l6ZSB0YWtlcyBwbGFjZSBiZWZvcmUgb3IgYWZ0ZXIgdGhlIG9yaWVudGF0aW9uIGNoYW5nZSBldmVudAoJCS8vIGhhcyBiZWVuIGZpcmVkIGRlcGVuZGluZyBvbiBpbXBsZW1lbnRhdGlvbiAoZWcgYW5kcm9pZCAyLjMgaXMgYmVmb3JlLCBpcGhvbmUgYWZ0ZXIpLgoJCS8vIE1vcmUgdGVzdGluZyBpcyByZXF1aXJlZCB0byBkZXRlcm1pbmUgaWYgYSBtb3JlIHJlbGlhYmxlIG1ldGhvZCBvZiBkZXRlcm1pbmluZyB0aGUgbmV3IHNjcmVlbnNpemUKCQkvLyBpcyBwb3NzaWJsZSB3aGVuIG9yaWVudGF0aW9uY2hhbmdlIGlzIGZpcmVkLiAoZWcsIHVzZSBtZWRpYSBxdWVyaWVzICsgZWxlbWVudCArIG9wYWNpdHkpCgkJaWYgKCAkLnN1cHBvcnQub3JpZW50YXRpb24gKSB7CgkJCS8vIGlmIHRoZSB3aW5kb3cgb3JpZW50YXRpb24gcmVnaXN0ZXJzIGFzIDAgb3IgMTgwIGRlZ3JlZXMgcmVwb3J0CgkJCS8vIHBvcnRyYWl0LCBvdGhlcndpc2UgbGFuZHNjYXBlCgkJCWlzUG9ydHJhaXQgPSBwb3J0cmFpdF9tYXBbIHdpbmRvdy5vcmllbnRhdGlvbiBdOwoJCX0gZWxzZSB7CgkJCWlzUG9ydHJhaXQgPSBlbGVtICYmIGVsZW0uY2xpZW50V2lkdGggLyBlbGVtLmNsaWVudEhlaWdodCA8IDEuMTsKCQl9CgoJCXJldHVybiBpc1BvcnRyYWl0ID8gInBvcnRyYWl0IiA6ICJsYW5kc2NhcGUiOwoJfTsKCgkkLmZuWyBldmVudF9uYW1lIF0gPSBmdW5jdGlvbiggZm4gKSB7CgkJcmV0dXJuIGZuID8gdGhpcy5iaW5kKCBldmVudF9uYW1lLCBmbiApIDogdGhpcy50cmlnZ2VyKCBldmVudF9uYW1lICk7Cgl9OwoKCS8vIGpRdWVyeSA8IDEuOAoJaWYgKCAkLmF0dHJGbiApIHsKCQkkLmF0dHJGblsgZXZlbnRfbmFtZSBdID0gdHJ1ZTsKCX0KCn0oIGpRdWVyeSwgdGhpcyApKTsKCgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCnZhciAkd2luZG93ID0gJCggd2luZG93ICksCgkkaHRtbCA9ICQoICJodG1sIiApOwoKLyogJC5tb2JpbGUubWVkaWEgbWV0aG9kOiBwYXNzIGEgQ1NTIG1lZGlhIHR5cGUgb3IgcXVlcnkgYW5kIGdldCBhIGJvb2wgcmV0dXJuCglub3RlOiB0aGlzIGZlYXR1cmUgcmVsaWVzIG9uIGFjdHVhbCBtZWRpYSBxdWVyeSBzdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzLCB0aG91Z2ggdHlwZXMgd2lsbCB3b3JrIG1vc3QgYW55d2hlcmUKCWV4YW1wbGVzOgoJCSQubW9iaWxlLm1lZGlhKCdzY3JlZW4nKSAvLyB0ZXN0cyBmb3Igc2NyZWVuIG1lZGlhIHR5cGUKCQkkLm1vYmlsZS5tZWRpYSgnc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0ODBweCknKSAvLyB0ZXN0cyBmb3Igc2NyZWVuIG1lZGlhIHR5cGUgd2l0aCB3aW5kb3cgd2lkdGggPiA0ODBweAoJCSQubW9iaWxlLm1lZGlhKCdAbWVkaWEgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKScpIC8vIHRlc3RzIGZvciB3ZWJraXQgMnggcGl4ZWwgcmF0aW8gKGlQaG9uZSA0KQoqLwokLm1vYmlsZS5tZWRpYSA9IChmdW5jdGlvbigpIHsKCS8vIFRPRE86IHVzZSB3aW5kb3cubWF0Y2hNZWRpYSBvbmNlIGF0IGxlYXN0IG9uZSBVQSBpbXBsZW1lbnRzIGl0Cgl2YXIgY2FjaGUgPSB7fSwKCQl0ZXN0RGl2ID0gJCggIjxkaXYgaWQ9J2pxdWVyeS1tZWRpYXRlc3QnPjwvZGl2PiIgKSwKCQlmYWtlQm9keSA9ICQoICI8Ym9keT4iICkuYXBwZW5kKCB0ZXN0RGl2ICk7CgoJcmV0dXJuIGZ1bmN0aW9uKCBxdWVyeSApIHsKCQlpZiAoICEoIHF1ZXJ5IGluIGNhY2hlICkgKSB7CgkJCXZhciBzdHlsZUJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggInN0eWxlIiApLAoJCQkJY3NzcnVsZSA9ICJAbWVkaWEgIiArIHF1ZXJ5ICsgIiB7ICNqcXVlcnktbWVkaWF0ZXN0IHsgcG9zaXRpb246YWJzb2x1dGU7IH0gfSI7CgoJCQkvL211c3Qgc2V0IHR5cGUgZm9yIElFIQoJCQlzdHlsZUJsb2NrLnR5cGUgPSAidGV4dC9jc3MiOwoKCQkJaWYgKCBzdHlsZUJsb2NrLnN0eWxlU2hlZXQgKSB7CgkJCQlzdHlsZUJsb2NrLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc3J1bGU7CgkJCX0gZWxzZSB7CgkJCQlzdHlsZUJsb2NrLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3NydWxlKSApOwoJCQl9CgoJCQkkaHRtbC5wcmVwZW5kKCBmYWtlQm9keSApLnByZXBlbmQoIHN0eWxlQmxvY2sgKTsKCQkJY2FjaGVbIHF1ZXJ5IF0gPSB0ZXN0RGl2LmNzcyggInBvc2l0aW9uIiApID09PSAiYWJzb2x1dGUiOwoJCQlmYWtlQm9keS5hZGQoIHN0eWxlQmxvY2sgKS5yZW1vdmUoKTsKCQl9CgkJcmV0dXJuIGNhY2hlWyBxdWVyeSBdOwoJfTsKfSkoKTsKCn0pKGpRdWVyeSk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCi8vIHRoeCBNb2Rlcm5penIKZnVuY3Rpb24gcHJvcEV4aXN0cyggcHJvcCApIHsKCXZhciB1Y19wcm9wID0gcHJvcC5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zdWJzdHIoIDEgKSwKCQlwcm9wcyA9ICggcHJvcCArICIgIiArIHZlbmRvcnMuam9pbiggdWNfcHJvcCArICIgIiApICsgdWNfcHJvcCApLnNwbGl0KCAiICIgKTsKCglmb3IgKCB2YXIgdiBpbiBwcm9wcyApIHsKCQlpZiAoIGZiQ1NTWyBwcm9wc1sgdiBdIF0gIT09IHVuZGVmaW5lZCApIHsKCQkJcmV0dXJuIHRydWU7CgkJfQoJfQp9Cgp2YXIgZmFrZUJvZHkgPSAkKCAiPGJvZHk+IiApLnByZXBlbmRUbyggImh0bWwiICksCglmYkNTUyA9IGZha2VCb2R5WyAwIF0uc3R5bGUsCgl2ZW5kb3JzID0gWyAiV2Via2l0IiwgIk1veiIsICJPIiBdLAoJd2Vib3MgPSAicGFsbUdldFJlc291cmNlIiBpbiB3aW5kb3csIC8vb25seSB1c2VkIHRvIHJ1bGUgb3V0IHNjcm9sbFRvcAoJb3BlcmEgPSB3aW5kb3cub3BlcmEsCglvcGVyYW1pbmkgPSB3aW5kb3cub3BlcmFtaW5pICYmICh7fSkudG9TdHJpbmcuY2FsbCggd2luZG93Lm9wZXJhbWluaSApID09PSAiW29iamVjdCBPcGVyYU1pbmldIiwKCWJiID0gd2luZG93LmJsYWNrYmVycnkgJiYgIXByb3BFeGlzdHMoICItd2Via2l0LXRyYW5zZm9ybSIgKTsgLy9vbmx5IHVzZWQgdG8gcnVsZSBvdXQgYm94IHNoYWRvdywgYXMgaXQncyBmaWxsZWQgb3BhcXVlIG9uIEJCIDUgYW5kIGxvd2VyCgoKZnVuY3Rpb24gdmFsaWRTdHlsZSggcHJvcCwgdmFsdWUsIGNoZWNrX3ZlbmQgKSB7Cgl2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKSwKCQl1YyA9IGZ1bmN0aW9uKCB0eHQgKSB7CgkJCXJldHVybiB0eHQuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArIHR4dC5zdWJzdHIoIDEgKTsKCQl9LAoJCXZlbmRfcHJlZiA9IGZ1bmN0aW9uKCB2ZW5kICkgewoJCQlyZXR1cm4gICItIiArIHZlbmQuY2hhckF0KCAwICkudG9Mb3dlckNhc2UoKSArIHZlbmQuc3Vic3RyKCAxICkgKyAiLSI7CgkJfSwKCQljaGVja19zdHlsZSA9IGZ1bmN0aW9uKCB2ZW5kICkgewoJCQl2YXIgdmVuZF9wcm9wID0gdmVuZF9wcmVmKCB2ZW5kICkgKyBwcm9wICsgIjogIiArIHZhbHVlICsgIjsiLAoJCQkJdWNfdmVuZCA9IHVjKCB2ZW5kICksCgkJCQlwcm9wU3R5bGUgPSB1Y192ZW5kICsgdWMoIHByb3AgKTsKCgkJCWRpdi5zZXRBdHRyaWJ1dGUoICJzdHlsZSIsIHZlbmRfcHJvcCApOwoKCQkJaWYgKCAhIWRpdi5zdHlsZVsgcHJvcFN0eWxlIF0gKSB7CgkJCQlyZXQgPSB0cnVlOwoJCQl9CgkJfSwKCQljaGVja192ZW5kcyA9IGNoZWNrX3ZlbmQgPyBbIGNoZWNrX3ZlbmQgXSA6IHZlbmRvcnMsCgkJcmV0OwoKCWZvciggdmFyIGkgPSAwOyBpIDwgY2hlY2tfdmVuZHMubGVuZ3RoOyBpKysgKSB7CgkJY2hlY2tfc3R5bGUoIGNoZWNrX3ZlbmRzW2ldICk7Cgl9CglyZXR1cm4gISFyZXQ7Cn0KCi8vIFRoYW5rcyB0byBNb2Rlcm5penIgc3JjIGZvciB0aGlzIHRlc3QgaWRlYS4gYHBlcnNwZWN0aXZlYCBjaGVjayBpcyBsaW1pdGVkIHRvIE1veiB0byBwcmV2ZW50IGEgZmFsc2UgcG9zaXRpdmUgZm9yIDNEIHRyYW5zZm9ybXMgb24gQW5kcm9pZC4KZnVuY3Rpb24gdHJhbnNmb3JtM2RUZXN0KCkgewoJdmFyIHByb3AgPSAidHJhbnNmb3JtLTNkIjsKCXJldHVybiB2YWxpZFN0eWxlKCAncGVyc3BlY3RpdmUnLCAnMTBweCcsICdtb3onICkgfHwgJC5tb2JpbGUubWVkaWEoICIoLSIgKyB2ZW5kb3JzLmpvaW4oICItIiArIHByb3AgKyAiKSwoLSIgKSArICItIiArIHByb3AgKyAiKSwoIiArIHByb3AgKyAiKSIgKTsKfQoKLy8gVGVzdCBmb3IgZHluYW1pYy11cGRhdGluZyBiYXNlIHRhZyBzdXBwb3J0ICggYWxsb3dzIHVzIHRvIGF2b2lkIGhyZWYsc3JjIGF0dHIgcmV3cml0aW5nICkKZnVuY3Rpb24gYmFzZVRhZ1Rlc3QoKSB7Cgl2YXIgZmF1eEJhc2UgPSBsb2NhdGlvbi5wcm90b2NvbCArICIvLyIgKyBsb2NhdGlvbi5ob3N0ICsgbG9jYXRpb24ucGF0aG5hbWUgKyAidWktZGlyLyIsCgkJYmFzZSA9ICQoICJoZWFkIGJhc2UiICksCgkJZmF1eEVsZSA9IG51bGwsCgkJaHJlZiA9ICIiLAoJCWxpbmssIHJlYmFzZTsKCglpZiAoICFiYXNlLmxlbmd0aCApIHsKCQliYXNlID0gZmF1eEVsZSA9ICQoICI8YmFzZT4iLCB7ICJocmVmIjogZmF1eEJhc2UgfSkuYXBwZW5kVG8oICJoZWFkIiApOwoJfSBlbHNlIHsKCQlocmVmID0gYmFzZS5hdHRyKCAiaHJlZiIgKTsKCX0KCglsaW5rID0gJCggIjxhIGhyZWY9J3Rlc3R1cmwnIC8+IiApLnByZXBlbmRUbyggZmFrZUJvZHkgKTsKCXJlYmFzZSA9IGxpbmtbIDAgXS5ocmVmOwoJYmFzZVsgMCBdLmhyZWYgPSBocmVmIHx8IGxvY2F0aW9uLnBhdGhuYW1lOwoKCWlmICggZmF1eEVsZSApIHsKCQlmYXV4RWxlLnJlbW92ZSgpOwoJfQoJcmV0dXJuIHJlYmFzZS5pbmRleE9mKCBmYXV4QmFzZSApID09PSAwOwp9CgovLyBUaGFua3MgTW9kZXJuaXpyCmZ1bmN0aW9uIGNzc1BvaW50ZXJFdmVudHNUZXN0KCkgewoJdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAneCcgKSwKCQlkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsCgkJZ2V0Q29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlLAoJCXN1cHBvcnRzOwoKCWlmICggISggJ3BvaW50ZXJFdmVudHMnIGluIGVsZW1lbnQuc3R5bGUgKSApIHsKCQlyZXR1cm4gZmFsc2U7Cgl9CgoJZWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ2F1dG8nOwoJZWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ3gnOwoJZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBlbGVtZW50ICk7CglzdXBwb3J0cyA9IGdldENvbXB1dGVkU3R5bGUgJiYKCWdldENvbXB1dGVkU3R5bGUoIGVsZW1lbnQsICcnICkucG9pbnRlckV2ZW50cyA9PT0gJ2F1dG8nOwoJZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBlbGVtZW50ICk7CglyZXR1cm4gISFzdXBwb3J0czsKfQoKZnVuY3Rpb24gYm91bmRpbmdSZWN0KCkgewoJdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICk7CglyZXR1cm4gdHlwZW9mIGRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09ICJ1bmRlZmluZWQiOwp9CgovLyBub24tVUEtYmFzZWQgSUUgdmVyc2lvbiBjaGVjayBieSBKYW1lcyBQYWRvbHNleSwgbW9kaWZpZWQgYnkgamRhbHRvbiAtIGZyb20gaHR0cDovL2dpc3QuZ2l0aHViLmNvbS81Mjc2ODMKLy8gYWxsb3dzIGZvciBpbmNsdXNpb24gb2YgSUUgNissIGluY2x1ZGluZyBXaW5kb3dzIE1vYmlsZSA3CiQuZXh0ZW5kKCAkLm1vYmlsZSwgeyBicm93c2VyOiB7fSB9ICk7CiQubW9iaWxlLmJyb3dzZXIuaWUgPSAoZnVuY3Rpb24oKSB7Cgl2YXIgdiA9IDMsCgkJZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKSwKCQlhID0gZGl2LmFsbCB8fCBbXTsKCglkbyB7CgkJZGl2LmlubmVySFRNTCA9ICI8IS0tW2lmIGd0IElFICIgKyAoICsrdiApICsgIl0+PGJyPjwhW2VuZGlmXS0tPiI7Cgl9IHdoaWxlKCBhWzBdICk7CgoJcmV0dXJuIHYgPiA0ID8gdiA6ICF2Owp9KSgpOwoKCiQuZXh0ZW5kKCAkLnN1cHBvcnQsIHsKCWNzc1RyYW5zaXRpb25zOiAiV2ViS2l0VHJhbnNpdGlvbkV2ZW50IiBpbiB3aW5kb3cgfHwgdmFsaWRTdHlsZSggJ3RyYW5zaXRpb24nLCAnaGVpZ2h0IDEwMG1zIGxpbmVhcicgKSAmJiAhb3BlcmEsCglwdXNoU3RhdGU6ICJwdXNoU3RhdGUiIGluIGhpc3RvcnkgJiYgInJlcGxhY2VTdGF0ZSIgaW4gaGlzdG9yeSwKCW1lZGlhcXVlcnk6ICQubW9iaWxlLm1lZGlhKCAib25seSBhbGwiICksCgljc3NQc2V1ZG9FbGVtZW50OiAhIXByb3BFeGlzdHMoICJjb250ZW50IiApLAoJdG91Y2hPdmVyZmxvdzogISFwcm9wRXhpc3RzKCAib3ZlcmZsb3dTY3JvbGxpbmciICksCgljc3NUcmFuc2Zvcm0zZDogdHJhbnNmb3JtM2RUZXN0KCksCglib3hTaGFkb3c6ICEhcHJvcEV4aXN0cyggImJveFNoYWRvdyIgKSAmJiAhYmIsCglzY3JvbGxUb3A6ICggInBhZ2VYT2Zmc2V0IiBpbiB3aW5kb3cgfHwgInNjcm9sbFRvcCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8ICJzY3JvbGxUb3AiIGluIGZha2VCb2R5WyAwIF0gKSAmJiAhd2Vib3MgJiYgIW9wZXJhbWluaSwKCWR5bmFtaWNCYXNlVGFnOiBiYXNlVGFnVGVzdCgpLAoJY3NzUG9pbnRlckV2ZW50czogY3NzUG9pbnRlckV2ZW50c1Rlc3QoKSwKCWJvdW5kaW5nUmVjdDogYm91bmRpbmdSZWN0KCkKfSk7CgpmYWtlQm9keS5yZW1vdmUoKTsKCgovLyAkLm1vYmlsZS5hamF4QmxhY2tsaXN0IGlzIHVzZWQgdG8gb3ZlcnJpZGUgYWpheEVuYWJsZWQgb24gcGxhdGZvcm1zIHRoYXQgaGF2ZSBrbm93biBjb25mbGljdHMgd2l0aCBoYXNoIGhpc3RvcnkgdXBkYXRlcyAoQkI1LCBTeW1iaWFuKQovLyBvciB0aGF0IGdlbmVyYWxseSB3b3JrIGJldHRlciBicm93c2luZyBpbiByZWd1bGFyIGh0dHAgZm9yIGZ1bGwgcGFnZSByZWZyZXNoZXMgKE9wZXJhIE1pbmkpCi8vIE5vdGU6IFRoaXMgZGV0ZWN0aW9uIGJlbG93IGlzIHVzZWQgYXMgYSBsYXN0IHJlc29ydC4KLy8gV2UgcmVjb21tZW5kIG9ubHkgdXNpbmcgdGhlc2UgZGV0ZWN0aW9uIG1ldGhvZHMgd2hlbiBhbGwgb3RoZXIgbW9yZSByZWxpYWJsZS9mb3J3YXJkLWxvb2tpbmcgYXBwcm9hY2hlcyBhcmUgbm90IHBvc3NpYmxlCnZhciBub2tpYUxURTdfMyA9IChmdW5jdGlvbigpIHsKCgl2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDsKCgkvL1RoZSBmb2xsb3dpbmcgaXMgYW4gYXR0ZW1wdCB0byBtYXRjaCBOb2tpYSBicm93c2VycyB0aGF0IGFyZSBydW5uaW5nIFN5bWJpYW4vczYwLCB3aXRoIHdlYmtpdCwgdmVyc2lvbiA3LjMgb3Igb2xkZXIKCXJldHVybiB1YS5pbmRleE9mKCAiTm9raWEiICkgPiAtMSAmJgoJCQkoIHVhLmluZGV4T2YoICJTeW1iaWFuLzMiICkgPiAtMSB8fCB1YS5pbmRleE9mKCAiU2VyaWVzNjAvNSIgKSA+IC0xICkgJiYKCQkJdWEuaW5kZXhPZiggIkFwcGxlV2ViS2l0IiApID4gLTEgJiYKCQkJdWEubWF0Y2goIC8oQnJvd3Nlck5HfE5va2lhQnJvd3NlcilcLzdcLlswLTNdLyApOwp9KSgpOwoKLy8gU3VwcG9ydCBjb25kaXRpb25zIHRoYXQgbXVzdCBiZSBtZXQgaW4gb3JkZXIgdG8gcHJvY2VlZAovLyBkZWZhdWx0IGVuaGFuY2VkIHF1YWxpZmljYXRpb25zIGFyZSBtZWRpYSBxdWVyeSBzdXBwb3J0IE9SIElFIDcrCgokLm1vYmlsZS5ncmFkZUEgPSBmdW5jdGlvbigpIHsKCXJldHVybiAoICQuc3VwcG9ydC5tZWRpYXF1ZXJ5IHx8ICQubW9iaWxlLmJyb3dzZXIuaWUgJiYgJC5tb2JpbGUuYnJvd3Nlci5pZSA+PSA3ICkgJiYgKCAkLnN1cHBvcnQuYm91bmRpbmdSZWN0IHx8ICQuZm4uanF1ZXJ5Lm1hdGNoKC8xXC5bMC03K11cLlswLTkrXT8vKSAhPT0gbnVsbCApOwp9OwoKJC5tb2JpbGUuYWpheEJsYWNrbGlzdCA9CgkJCS8vIEJsYWNrQmVycnkgYnJvd3NlcnMsIHByZS13ZWJraXQKCQkJd2luZG93LmJsYWNrYmVycnkgJiYgIXdpbmRvdy5XZWJLaXRQb2ludCB8fAoJCQkvLyBPcGVyYSBNaW5pCgkJCW9wZXJhbWluaSB8fAoJCQkvLyBTeW1iaWFuIHdlYmtpdHMgcHJlIDcuMwoJCQlub2tpYUxURTdfMzsKCi8vIExhc3RseSwgdGhpcyB3b3JrYXJvdW5kIGlzIHRoZSBvbmx5IHdheSB3ZSd2ZSBmb3VuZCBzbyBmYXIgdG8gZ2V0IHByZSA3LjMgU3ltYmlhbiB3ZWJraXQgZGV2aWNlcwovLyB0byByZW5kZXIgdGhlIHN0eWxlc2hlZXRzIHdoZW4gdGhleSdyZSByZWZlcmVuY2VkIGJlZm9yZSB0aGlzIHNjcmlwdCwgYXMgd2UnZCByZWNvbW1lbmQgZG9pbmcuCi8vIFRoaXMgc2ltcGx5IHJlYXBwZW5kcyB0aGUgQ1NTIGluIHBsYWNlLCB3aGljaCBmb3Igc29tZSByZWFzb24gbWFrZXMgaXQgYXBwbHkKaWYgKCBub2tpYUxURTdfMyApIHsKCSQoZnVuY3Rpb24oKSB7CgkJJCggImhlYWQgbGlua1tyZWw9J3N0eWxlc2hlZXQnXSIgKS5hdHRyKCAicmVsIiwgImFsdGVybmF0ZSBzdHlsZXNoZWV0IiApLmF0dHIoICJyZWwiLCAic3R5bGVzaGVldCIgKTsKCX0pOwp9CgovLyBGb3IgcnVsaW5nIG91dCBzaGFkb3dzIHZpYSBjc3MKaWYgKCAhJC5zdXBwb3J0LmJveFNoYWRvdyApIHsKCSQoICJodG1sIiApLmFkZENsYXNzKCAidWktbW9iaWxlLW5vc3VwcG9ydC1ib3hzaGFkb3ciICk7Cn0KCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoICJtb2JpbGUucGFnZSIsICQubW9iaWxlLndpZGdldCwgewoJb3B0aW9uczogewoJCXRoZW1lOiAiYyIsCgkJZG9tQ2FjaGU6IGZhbHNlLAoJCWtlZXBOYXRpdmVEZWZhdWx0OiAiOmpxbURhdGEocm9sZT0nbm9uZScpLCA6anFtRGF0YShyb2xlPSdub2pzJykiCgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCQoJCXZhciBzZWxmID0gdGhpczsKCQkKCQkvLyBpZiBmYWxzZSBpcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tzIGRvIG5vdCBjcmVhdGUgdGhlIHBhZ2UKCQlpZiAoIHNlbGYuX3RyaWdnZXIoICJiZWZvcmVjcmVhdGUiICkgPT09IGZhbHNlICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlzZWxmLmVsZW1lbnQKCQkJLmF0dHIoICJ0YWJpbmRleCIsICIwIiApCgkJCS5hZGRDbGFzcyggInVpLXBhZ2UgdWktYm9keS0iICsgc2VsZi5vcHRpb25zLnRoZW1lICkKCQkJLmJpbmQoICJwYWdlYmVmb3JlaGlkZSIsIGZ1bmN0aW9uKCkgewoJCQkJc2VsZi5yZW1vdmVDb250YWluZXJCYWNrZ3JvdW5kKCk7CgkJCX0gKQoJCQkuYmluZCggInBhZ2ViZWZvcmVzaG93IiwgZnVuY3Rpb24oKSB7CgkJCQlzZWxmLnNldENvbnRhaW5lckJhY2tncm91bmQoKTsKCQkJfSApOwoKCX0sCgkKCXJlbW92ZUNvbnRhaW5lckJhY2tncm91bmQ6IGZ1bmN0aW9uKCkgewoJCSQubW9iaWxlLnBhZ2VDb250YWluZXIucmVtb3ZlQ2xhc3MoICJ1aS1vdmVybGF5LSIgKyAkLm1vYmlsZS5nZXRJbmhlcml0ZWRUaGVtZSggdGhpcy5lbGVtZW50LnBhcmVudCgpICkgKTsKCX0sCgkKCS8vIHNldCB0aGUgcGFnZSBjb250YWluZXIgYmFja2dyb3VuZCB0byB0aGUgcGFnZSB0aGVtZQoJc2V0Q29udGFpbmVyQmFja2dyb3VuZDogZnVuY3Rpb24oIHRoZW1lICkgewoJCWlmICggdGhpcy5vcHRpb25zLnRoZW1lICkgewoJCQkkLm1vYmlsZS5wYWdlQ29udGFpbmVyLmFkZENsYXNzKCAidWktb3ZlcmxheS0iICsgKCB0aGVtZSB8fCB0aGlzLm9wdGlvbnMudGhlbWUgKSApOwoJCX0KCX0sCgoJa2VlcE5hdGl2ZVNlbGVjdG9yOiBmdW5jdGlvbigpIHsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywKCQkJa2VlcE5hdGl2ZURlZmluZWQgPSBvcHRpb25zLmtlZXBOYXRpdmUgJiYgJC50cmltKCBvcHRpb25zLmtlZXBOYXRpdmUgKTsKCgkJaWYgKCBrZWVwTmF0aXZlRGVmaW5lZCAmJiBvcHRpb25zLmtlZXBOYXRpdmUgIT09IG9wdGlvbnMua2VlcE5hdGl2ZURlZmF1bHQgKSB7CgkJCXJldHVybiBbb3B0aW9ucy5rZWVwTmF0aXZlLCBvcHRpb25zLmtlZXBOYXRpdmVEZWZhdWx0XS5qb2luKCAiLCAiICk7CgkJfQoKCQlyZXR1cm4gb3B0aW9ucy5rZWVwTmF0aXZlRGVmYXVsdDsKCX0KfSk7Cn0pKCBqUXVlcnkgKTsKCi8vIFNjcmlwdDogalF1ZXJ5IGhhc2hjaGFuZ2UgZXZlbnQKLy8gCi8vICpWZXJzaW9uOiAxLjMsIExhc3QgdXBkYXRlZDogNy8yMS8yMDEwKgovLyAKLy8gUHJvamVjdCBIb21lIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9wcm9qZWN0cy9qcXVlcnktaGFzaGNoYW5nZS1wbHVnaW4vCi8vIEdpdEh1YiAgICAgICAtIGh0dHA6Ly9naXRodWIuY29tL2Nvd2JveS9qcXVlcnktaGFzaGNoYW5nZS8KLy8gU291cmNlICAgICAgIC0gaHR0cDovL2dpdGh1Yi5jb20vY293Ym95L2pxdWVyeS1oYXNoY2hhbmdlL3Jhdy9tYXN0ZXIvanF1ZXJ5LmJhLWhhc2hjaGFuZ2UuanMKLy8gKE1pbmlmaWVkKSAgIC0gaHR0cDovL2dpdGh1Yi5jb20vY293Ym95L2pxdWVyeS1oYXNoY2hhbmdlL3Jhdy9tYXN0ZXIvanF1ZXJ5LmJhLWhhc2hjaGFuZ2UubWluLmpzICgwLjhrYiBnemlwcGVkKQovLyAKLy8gQWJvdXQ6IExpY2Vuc2UKLy8gCi8vIENvcHlyaWdodCAoYykgMjAxMCAiQ293Ym95IiBCZW4gQWxtYW4sCi8vIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzLgovLyBodHRwOi8vYmVuYWxtYW4uY29tL2Fib3V0L2xpY2Vuc2UvCi8vIAovLyBBYm91dDogRXhhbXBsZXMKLy8gCi8vIFRoZXNlIHdvcmtpbmcgZXhhbXBsZXMsIGNvbXBsZXRlIHdpdGggZnVsbHkgY29tbWVudGVkIGNvZGUsIGlsbHVzdHJhdGUgYSBmZXcKLy8gd2F5cyBpbiB3aGljaCB0aGlzIHBsdWdpbiBjYW4gYmUgdXNlZC4KLy8gCi8vIGhhc2hjaGFuZ2UgZXZlbnQgLSBodHRwOi8vYmVuYWxtYW4uY29tL2NvZGUvcHJvamVjdHMvanF1ZXJ5LWhhc2hjaGFuZ2UvZXhhbXBsZXMvaGFzaGNoYW5nZS8KLy8gZG9jdW1lbnQuZG9tYWluIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlL2V4YW1wbGVzL2RvY3VtZW50X2RvbWFpbi8KLy8gCi8vIEFib3V0OiBTdXBwb3J0IGFuZCBUZXN0aW5nCi8vIAovLyBJbmZvcm1hdGlvbiBhYm91dCB3aGF0IHZlcnNpb24gb3IgdmVyc2lvbnMgb2YgalF1ZXJ5IHRoaXMgcGx1Z2luIGhhcyBiZWVuCi8vIHRlc3RlZCB3aXRoLCB3aGF0IGJyb3dzZXJzIGl0IGhhcyBiZWVuIHRlc3RlZCBpbiwgYW5kIHdoZXJlIHRoZSB1bml0IHRlc3RzCi8vIHJlc2lkZSAoc28geW91IGNhbiB0ZXN0IGl0IHlvdXJzZWxmKS4KLy8gCi8vIGpRdWVyeSBWZXJzaW9ucyAtIDEuMi42LCAxLjMuMiwgMS40LjEsIDEuNC4yCi8vIEJyb3dzZXJzIFRlc3RlZCAtIEludGVybmV0IEV4cGxvcmVyIDYtOCwgRmlyZWZveCAyLTQsIENocm9tZSA1LTYsIFNhZmFyaSAzLjItNSwKLy8gICAgICAgICAgICAgICAgICAgT3BlcmEgOS42LTEwLjYwLCBpUGhvbmUgMy4xLCBBbmRyb2lkIDEuNi0yLjIsIEJsYWNrQmVycnkgNC42LTUuCi8vIFVuaXQgVGVzdHMgICAgICAtIGh0dHA6Ly9iZW5hbG1hbi5jb20vY29kZS9wcm9qZWN0cy9qcXVlcnktaGFzaGNoYW5nZS91bml0LwovLyAKLy8gQWJvdXQ6IEtub3duIGlzc3VlcwovLyAKLy8gV2hpbGUgdGhpcyBqUXVlcnkgaGFzaGNoYW5nZSBldmVudCBpbXBsZW1lbnRhdGlvbiBpcyBxdWl0ZSBzdGFibGUgYW5kCi8vIHJvYnVzdCwgdGhlcmUgYXJlIGEgZmV3IHVuZm9ydHVuYXRlIGJyb3dzZXIgYnVncyBzdXJyb3VuZGluZyBleHBlY3RlZAovLyBoYXNoY2hhbmdlIGV2ZW50LWJhc2VkIGJlaGF2aW9ycywgaW5kZXBlbmRlbnQgb2YgYW55IEphdmFTY3JpcHQKLy8gd2luZG93Lm9uaGFzaGNoYW5nZSBhYnN0cmFjdGlvbi4gU2VlIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgZm9yIG1vcmUKLy8gaW5mb3JtYXRpb246Ci8vIAovLyBDaHJvbWU6IEJhY2sgQnV0dG9uIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlL2V4YW1wbGVzL2J1Zy1jaHJvbWUtYmFjay1idXR0b24vCi8vIEZpcmVmb3g6IFJlbW90ZSBYTUxIdHRwUmVxdWVzdCAtIGh0dHA6Ly9iZW5hbG1hbi5jb20vY29kZS9wcm9qZWN0cy9qcXVlcnktaGFzaGNoYW5nZS9leGFtcGxlcy9idWctZmlyZWZveC1yZW1vdGUteGhyLwovLyBXZWJLaXQ6IEJhY2sgQnV0dG9uIGluIGFuIElmcmFtZSAtIGh0dHA6Ly9iZW5hbG1hbi5jb20vY29kZS9wcm9qZWN0cy9qcXVlcnktaGFzaGNoYW5nZS9leGFtcGxlcy9idWctd2Via2l0LWhhc2gtaWZyYW1lLwovLyBTYWZhcmk6IEJhY2sgQnV0dG9uIGZyb20gYSBkaWZmZXJlbnQgZG9tYWluIC0gaHR0cDovL2JlbmFsbWFuLmNvbS9jb2RlL3Byb2plY3RzL2pxdWVyeS1oYXNoY2hhbmdlL2V4YW1wbGVzL2J1Zy1zYWZhcmktYmFjay1mcm9tLWRpZmYtZG9tYWluLwovLyAKLy8gQWxzbyBub3RlIHRoYXQgc2hvdWxkIGEgYnJvd3NlciBuYXRpdmVseSBzdXBwb3J0IHRoZSB3aW5kb3cub25oYXNoY2hhbmdlIAovLyBldmVudCwgYnV0IG5vdCByZXBvcnQgdGhhdCBpdCBkb2VzLCB0aGUgZmFsbGJhY2sgcG9sbGluZyBsb29wIHdpbGwgYmUgdXNlZC4KLy8gCi8vIEFib3V0OiBSZWxlYXNlIEhpc3RvcnkKLy8gCi8vIDEuMyAgIC0gKDcvMjEvMjAxMCkgUmVvcmdhbml6ZWQgSUU2LzcgSWZyYW1lIGNvZGUgdG8gbWFrZSBpdCBtb3JlCi8vICAgICAgICAgInJlbW92YWJsZSIgZm9yIG1vYmlsZS1vbmx5IGRldmVsb3BtZW50LiBBZGRlZCBJRTYvNyBkb2N1bWVudC50aXRsZQovLyAgICAgICAgIHN1cHBvcnQuIEF0dGVtcHRlZCB0byBtYWtlIElmcmFtZSBhcyBoaWRkZW4gYXMgcG9zc2libGUgYnkgdXNpbmcKLy8gICAgICAgICB0ZWNobmlxdWVzIGZyb20gaHR0cDovL3d3dy5wYWNpZWxsb2dyb3VwLmNvbS9ibG9nLz9wPTYwNC4gQWRkZWQgCi8vICAgICAgICAgc3VwcG9ydCBmb3IgdGhlICJzaG9ydGN1dCIgZm9ybWF0ICQod2luZG93KS5oYXNoY2hhbmdlKCBmbiApIGFuZAovLyAgICAgICAgICQod2luZG93KS5oYXNoY2hhbmdlKCkgbGlrZSBqUXVlcnkgcHJvdmlkZXMgZm9yIGJ1aWx0LWluIGV2ZW50cy4KLy8gICAgICAgICBSZW5hbWVkIGpRdWVyeS5oYXNoY2hhbmdlRGVsYXkgdG8gPGpRdWVyeS5mbi5oYXNoY2hhbmdlLmRlbGF5PiBhbmQKLy8gICAgICAgICBsb3dlcmVkIGl0cyBkZWZhdWx0IHZhbHVlIHRvIDUwLiBBZGRlZCA8alF1ZXJ5LmZuLmhhc2hjaGFuZ2UuZG9tYWluPgovLyAgICAgICAgIGFuZCA8alF1ZXJ5LmZuLmhhc2hjaGFuZ2Uuc3JjPiBwcm9wZXJ0aWVzIHBsdXMgZG9jdW1lbnQtZG9tYWluLmh0bWwKLy8gICAgICAgICBmaWxlIHRvIGFkZHJlc3MgYWNjZXNzIGRlbmllZCBpc3N1ZXMgd2hlbiBzZXR0aW5nIGRvY3VtZW50LmRvbWFpbiBpbgovLyAgICAgICAgIElFNi83LgovLyAxLjIgICAtICgyLzExLzIwMTApIEZpeGVkIGEgYnVnIHdoZXJlIGNvbWluZyBiYWNrIHRvIGEgcGFnZSB1c2luZyB0aGlzIHBsdWdpbgovLyAgICAgICAgIGZyb20gYSBwYWdlIG9uIGFub3RoZXIgZG9tYWluIHdvdWxkIGNhdXNlIGFuIGVycm9yIGluIFNhZmFyaSA0LiBBbHNvLAovLyAgICAgICAgIElFNi83IElmcmFtZSBpcyBub3cgaW5zZXJ0ZWQgYWZ0ZXIgdGhlIGJvZHkgKHRoaXMgYWN0dWFsbHkgd29ya3MpLAovLyAgICAgICAgIHdoaWNoIHByZXZlbnRzIHRoZSBwYWdlIGZyb20gc2Nyb2xsaW5nIHdoZW4gdGhlIGV2ZW50IGlzIGZpcnN0IGJvdW5kLgovLyAgICAgICAgIEV2ZW50IGNhbiBhbHNvIG5vdyBiZSBib3VuZCBiZWZvcmUgRE9NIHJlYWR5LCBidXQgaXQgd29uJ3QgYmUgdXNhYmxlCi8vICAgICAgICAgYmVmb3JlIHRoZW4gaW4gSUU2LzcuCi8vIDEuMSAgIC0gKDEvMjEvMjAxMCkgSW5jb3Jwb3JhdGVkIGRvY3VtZW50LmRvY3VtZW50TW9kZSB0ZXN0IHRvIGZpeCBJRTggYnVnCi8vICAgICAgICAgd2hlcmUgYnJvd3NlciB2ZXJzaW9uIGlzIGluY29ycmVjdGx5IHJlcG9ydGVkIGFzIDguMCwgZGVzcGl0ZQovLyAgICAgICAgIGluY2x1c2lvbiBvZiB0aGUgWC1VQS1Db21wYXRpYmxlIElFPUVtdWxhdGVJRTcgbWV0YSB0YWcuCi8vIDEuMCAgIC0gKDEvOS8yMDEwKSBJbml0aWFsIFJlbGVhc2UuIEJyb2tlIG91dCB0aGUgalF1ZXJ5IEJCUSBldmVudC5zcGVjaWFsCi8vICAgICAgICAgd2luZG93Lm9uaGFzaGNoYW5nZSBmdW5jdGlvbmFsaXR5IGludG8gYSBzZXBhcmF0ZSBwbHVnaW4gZm9yIHVzZXJzCi8vICAgICAgICAgd2hvIHdhbnQganVzdCB0aGUgYmFzaWMgZXZlbnQgJiBiYWNrIGJ1dHRvbiBzdXBwb3J0LCB3aXRob3V0IGFsbCB0aGUKLy8gICAgICAgICBleHRyYSBhd2Vzb21lbmVzcyB0aGF0IEJCUSBwcm92aWRlcy4gVGhpcyBwbHVnaW4gd2lsbCBiZSBpbmNsdWRlZCBhcwovLyAgICAgICAgIHBhcnQgb2YgalF1ZXJ5IEJCUSwgYnV0IGFsc28gYmUgYXZhaWxhYmxlIHNlcGFyYXRlbHkuCgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewogIC8vIFJldXNlZCBzdHJpbmcuCiAgdmFyIHN0cl9oYXNoY2hhbmdlID0gJ2hhc2hjaGFuZ2UnLAogICAgCiAgICAvLyBNZXRob2QgLyBvYmplY3QgcmVmZXJlbmNlcy4KICAgIGRvYyA9IGRvY3VtZW50LAogICAgZmFrZV9vbmhhc2hjaGFuZ2UsCiAgICBzcGVjaWFsID0gJC5ldmVudC5zcGVjaWFsLAogICAgCiAgICAvLyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgd2luZG93Lm9uaGFzaGNoYW5nZT8gTm90ZSB0aGF0IElFOCBydW5uaW5nIGluCiAgICAvLyBJRTcgY29tcGF0aWJpbGl0eSBtb2RlIHJlcG9ydHMgdHJ1ZSBmb3IgJ29uaGFzaGNoYW5nZScgaW4gd2luZG93LCBldmVuCiAgICAvLyB0aG91Z2ggdGhlIGV2ZW50IGlzbid0IHN1cHBvcnRlZCwgc28gYWxzbyB0ZXN0IGRvY3VtZW50LmRvY3VtZW50TW9kZS4KICAgIGRvY19tb2RlID0gZG9jLmRvY3VtZW50TW9kZSwKICAgIHN1cHBvcnRzX29uaGFzaGNoYW5nZSA9ICdvbicgKyBzdHJfaGFzaGNoYW5nZSBpbiB3aW5kb3cgJiYgKCBkb2NfbW9kZSA9PT0gdW5kZWZpbmVkIHx8IGRvY19tb2RlID4gNyApOwogIAogIC8vIEdldCBsb2NhdGlvbi5oYXNoIChvciB3aGF0IHlvdSdkIGV4cGVjdCBsb2NhdGlvbi5oYXNoIHRvIGJlKSBzYW5zIGFueQogIC8vIGxlYWRpbmcgIy4gVGhhbmtzIGZvciBtYWtpbmcgdGhpcyBuZWNlc3NhcnksIEZpcmVmb3ghCiAgZnVuY3Rpb24gZ2V0X2ZyYWdtZW50KCB1cmwgKSB7CiAgICB1cmwgPSB1cmwgfHwgbG9jYXRpb24uaHJlZjsKICAgIHJldHVybiAnIycgKyB1cmwucmVwbGFjZSggL15bXiNdKiM/KC4qKSQvLCAnJDEnICk7CiAgfTsKICAKICAvLyBNZXRob2Q6IGpRdWVyeS5mbi5oYXNoY2hhbmdlCiAgLy8gCiAgLy8gQmluZCBhIGhhbmRsZXIgdG8gdGhlIHdpbmRvdy5vbmhhc2hjaGFuZ2UgZXZlbnQgb3IgdHJpZ2dlciBhbGwgYm91bmQKICAvLyB3aW5kb3cub25oYXNoY2hhbmdlIGV2ZW50IGhhbmRsZXJzLiBUaGlzIGJlaGF2aW9yIGlzIGNvbnNpc3RlbnQgd2l0aAogIC8vIGpRdWVyeSdzIGJ1aWx0LWluIGV2ZW50IGhhbmRsZXJzLgogIC8vIAogIC8vIFVzYWdlOgogIC8vIAogIC8vID4galF1ZXJ5KHdpbmRvdykuaGFzaGNoYW5nZSggWyBoYW5kbGVyIF0gKTsKICAvLyAKICAvLyBBcmd1bWVudHM6CiAgLy8gCiAgLy8gIGhhbmRsZXIgLSAoRnVuY3Rpb24pIE9wdGlvbmFsIGhhbmRsZXIgdG8gYmUgYm91bmQgdG8gdGhlIGhhc2hjaGFuZ2UKICAvLyAgICBldmVudC4gVGhpcyBpcyBhICJzaG9ydGN1dCIgZm9yIHRoZSBtb3JlIHZlcmJvc2UgZm9ybToKICAvLyAgICBqUXVlcnkod2luZG93KS5iaW5kKCAnaGFzaGNoYW5nZScsIGhhbmRsZXIgKS4gSWYgaGFuZGxlciBpcyBvbWl0dGVkLAogIC8vICAgIGFsbCBib3VuZCB3aW5kb3cub25oYXNoY2hhbmdlIGV2ZW50IGhhbmRsZXJzIHdpbGwgYmUgdHJpZ2dlcmVkLiBUaGlzCiAgLy8gICAgaXMgYSBzaG9ydGN1dCBmb3IgdGhlIG1vcmUgdmVyYm9zZQogIC8vICAgIGpRdWVyeSh3aW5kb3cpLnRyaWdnZXIoICdoYXNoY2hhbmdlJyApLiBUaGVzZSBmb3JtcyBhcmUgZGVzY3JpYmVkIGluCiAgLy8gICAgdGhlIDxoYXNoY2hhbmdlIGV2ZW50PiBzZWN0aW9uLgogIC8vIAogIC8vIFJldHVybnM6CiAgLy8gCiAgLy8gIChqUXVlcnkpIFRoZSBpbml0aWFsIGpRdWVyeSBjb2xsZWN0aW9uIG9mIGVsZW1lbnRzLgogIAogIC8vIEFsbG93IHRoZSAic2hvcnRjdXQiIGZvcm1hdCAkKGVsZW0pLmhhc2hjaGFuZ2UoIGZuICkgZm9yIGJpbmRpbmcgYW5kCiAgLy8gJChlbGVtKS5oYXNoY2hhbmdlKCkgZm9yIHRyaWdnZXJpbmcsIGxpa2UgalF1ZXJ5IGRvZXMgZm9yIGJ1aWx0LWluIGV2ZW50cy4KICAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdID0gZnVuY3Rpb24oIGZuICkgewogICAgcmV0dXJuIGZuID8gdGhpcy5iaW5kKCBzdHJfaGFzaGNoYW5nZSwgZm4gKSA6IHRoaXMudHJpZ2dlciggc3RyX2hhc2hjaGFuZ2UgKTsKICB9OwogIAogIC8vIFByb3BlcnR5OiBqUXVlcnkuZm4uaGFzaGNoYW5nZS5kZWxheQogIC8vIAogIC8vIFRoZSBudW1lcmljIGludGVydmFsIChpbiBtaWxsaXNlY29uZHMpIGF0IHdoaWNoIHRoZSA8aGFzaGNoYW5nZSBldmVudD4KICAvLyBwb2xsaW5nIGxvb3AgZXhlY3V0ZXMuIERlZmF1bHRzIHRvIDUwLgogIAogIC8vIFByb3BlcnR5OiBqUXVlcnkuZm4uaGFzaGNoYW5nZS5kb21haW4KICAvLyAKICAvLyBJZiB5b3UncmUgc2V0dGluZyBkb2N1bWVudC5kb21haW4gaW4geW91ciBKYXZhU2NyaXB0LCBhbmQgeW91IHdhbnQgaGFzaAogIC8vIGhpc3RvcnkgdG8gd29yayBpbiBJRTYvNywgbm90IG9ubHkgbXVzdCB0aGlzIHByb3BlcnR5IGJlIHNldCwgYnV0IHlvdSBtdXN0CiAgLy8gYWxzbyBzZXQgZG9jdW1lbnQuZG9tYWluIEJFRk9SRSBqUXVlcnkgaXMgbG9hZGVkIGludG8gdGhlIHBhZ2UuIFRoaXMKICAvLyBwcm9wZXJ0eSBpcyBvbmx5IGFwcGxpY2FibGUgaWYgeW91IGFyZSBzdXBwb3J0aW5nIElFNi83IChvciBJRTggb3BlcmF0aW5nCiAgLy8gaW4gIklFNyBjb21wYXRpYmlsaXR5IiBtb2RlKS4KICAvLyAKICAvLyBJbiBhZGRpdGlvbiwgdGhlIDxqUXVlcnkuZm4uaGFzaGNoYW5nZS5zcmM+IHByb3BlcnR5IG11c3QgYmUgc2V0IHRvIHRoZQogIC8vIHBhdGggb2YgdGhlIGluY2x1ZGVkICJkb2N1bWVudC1kb21haW4uaHRtbCIgZmlsZSwgd2hpY2ggY2FuIGJlIHJlbmFtZWQgb3IKICAvLyBtb2RpZmllZCBpZiBuZWNlc3NhcnkgKG5vdGUgdGhhdCB0aGUgZG9jdW1lbnQuZG9tYWluIHNwZWNpZmllZCBtdXN0IGJlIHRoZQogIC8vIHNhbWUgaW4gYm90aCB5b3VyIG1haW4gSmF2YVNjcmlwdCBhcyB3ZWxsIGFzIGluIHRoaXMgZmlsZSkuCiAgLy8gCiAgLy8gVXNhZ2U6CiAgLy8gCiAgLy8galF1ZXJ5LmZuLmhhc2hjaGFuZ2UuZG9tYWluID0gZG9jdW1lbnQuZG9tYWluOwogIAogIC8vIFByb3BlcnR5OiBqUXVlcnkuZm4uaGFzaGNoYW5nZS5zcmMKICAvLyAKICAvLyBJZiwgZm9yIHNvbWUgcmVhc29uLCB5b3UgbmVlZCB0byBzcGVjaWZ5IGFuIElmcmFtZSBzcmMgZmlsZSAoZm9yIGV4YW1wbGUsCiAgLy8gd2hlbiBzZXR0aW5nIGRvY3VtZW50LmRvbWFpbiBhcyBpbiA8alF1ZXJ5LmZuLmhhc2hjaGFuZ2UuZG9tYWluPiksIHlvdSBjYW4KICAvLyBkbyBzbyB1c2luZyB0aGlzIHByb3BlcnR5LiBOb3RlIHRoYXQgd2hlbiB1c2luZyB0aGlzIHByb3BlcnR5LCBoaXN0b3J5CiAgLy8gd29uJ3QgYmUgcmVjb3JkZWQgaW4gSUU2LzcgdW50aWwgdGhlIElmcmFtZSBzcmMgZmlsZSBsb2Fkcy4gVGhpcyBwcm9wZXJ0eQogIC8vIGlzIG9ubHkgYXBwbGljYWJsZSBpZiB5b3UgYXJlIHN1cHBvcnRpbmcgSUU2LzcgKG9yIElFOCBvcGVyYXRpbmcgaW4gIklFNwogIC8vIGNvbXBhdGliaWxpdHkiIG1vZGUpLgogIC8vIAogIC8vIFVzYWdlOgogIC8vIAogIC8vIGpRdWVyeS5mbi5oYXNoY2hhbmdlLnNyYyA9ICdwYXRoL3RvL2ZpbGUuaHRtbCc7CiAgCiAgJC5mblsgc3RyX2hhc2hjaGFuZ2UgXS5kZWxheSA9IDUwOwogIC8qCiAgJC5mblsgc3RyX2hhc2hjaGFuZ2UgXS5kb21haW4gPSBudWxsOwogICQuZm5bIHN0cl9oYXNoY2hhbmdlIF0uc3JjID0gbnVsbDsKICAqLwogIAogIC8vIEV2ZW50OiBoYXNoY2hhbmdlIGV2ZW50CiAgLy8gCiAgLy8gRmlyZWQgd2hlbiBsb2NhdGlvbi5oYXNoIGNoYW5nZXMuIEluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBpdCwgdGhlIG5hdGl2ZQogIC8vIEhUTUw1IHdpbmRvdy5vbmhhc2hjaGFuZ2UgZXZlbnQgaXMgdXNlZCwgb3RoZXJ3aXNlIGEgcG9sbGluZyBsb29wIGlzCiAgLy8gaW5pdGlhbGl6ZWQsIHJ1bm5pbmcgZXZlcnkgPGpRdWVyeS5mbi5oYXNoY2hhbmdlLmRlbGF5PiBtaWxsaXNlY29uZHMgdG8KICAvLyBzZWUgaWYgdGhlIGhhc2ggaGFzIGNoYW5nZWQuIEluIElFNi83IChhbmQgSUU4IG9wZXJhdGluZyBpbiAiSUU3CiAgLy8gY29tcGF0aWJpbGl0eSIgbW9kZSksIGEgaGlkZGVuIElmcmFtZSBpcyBjcmVhdGVkIHRvIGFsbG93IHRoZSBiYWNrIGJ1dHRvbgogIC8vIGFuZCBoYXNoLWJhc2VkIGhpc3RvcnkgdG8gd29yay4KICAvLyAKICAvLyBVc2FnZSBhcyBkZXNjcmliZWQgaW4gPGpRdWVyeS5mbi5oYXNoY2hhbmdlPjoKICAvLyAKICAvLyA+IC8vIEJpbmQgYW4gZXZlbnQgaGFuZGxlci4KICAvLyA+IGpRdWVyeSh3aW5kb3cpLmhhc2hjaGFuZ2UoIGZ1bmN0aW9uKGUpIHsKICAvLyA+ICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoOwogIC8vID4gICAuLi4KICAvLyA+IH0pOwogIC8vID4gCiAgLy8gPiAvLyBNYW51YWxseSB0cmlnZ2VyIHRoZSBldmVudCBoYW5kbGVyLgogIC8vID4galF1ZXJ5KHdpbmRvdykuaGFzaGNoYW5nZSgpOwogIC8vIAogIC8vIEEgbW9yZSB2ZXJib3NlIHVzYWdlIHRoYXQgYWxsb3dzIGZvciBldmVudCBuYW1lc3BhY2luZzoKICAvLyAKICAvLyA+IC8vIEJpbmQgYW4gZXZlbnQgaGFuZGxlci4KICAvLyA+IGpRdWVyeSh3aW5kb3cpLmJpbmQoICdoYXNoY2hhbmdlJywgZnVuY3Rpb24oZSkgewogIC8vID4gICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2g7CiAgLy8gPiAgIC4uLgogIC8vID4gfSk7CiAgLy8gPiAKICAvLyA+IC8vIE1hbnVhbGx5IHRyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIuCiAgLy8gPiBqUXVlcnkod2luZG93KS50cmlnZ2VyKCAnaGFzaGNoYW5nZScgKTsKICAvLyAKICAvLyBBZGRpdGlvbmFsIE5vdGVzOgogIC8vIAogIC8vICogVGhlIHBvbGxpbmcgbG9vcCBhbmQgSWZyYW1lIGFyZSBub3QgY3JlYXRlZCB1bnRpbCBhdCBsZWFzdCBvbmUgaGFuZGxlcgogIC8vICAgaXMgYWN0dWFsbHkgYm91bmQgdG8gdGhlICdoYXNoY2hhbmdlJyBldmVudC4KICAvLyAqIElmIHlvdSBuZWVkIHRoZSBib3VuZCBoYW5kbGVyKHMpIHRvIGV4ZWN1dGUgaW1tZWRpYXRlbHksIGluIGNhc2VzIHdoZXJlCiAgLy8gICBhIGxvY2F0aW9uLmhhc2ggZXhpc3RzIG9uIHBhZ2UgbG9hZCwgdmlhIGJvb2ttYXJrIG9yIHBhZ2UgcmVmcmVzaCBmb3IKICAvLyAgIGV4YW1wbGUsIHVzZSBqUXVlcnkod2luZG93KS5oYXNoY2hhbmdlKCkgb3IgdGhlIG1vcmUgdmVyYm9zZSAKICAvLyAgIGpRdWVyeSh3aW5kb3cpLnRyaWdnZXIoICdoYXNoY2hhbmdlJyApLgogIC8vICogVGhlIGV2ZW50IGNhbiBiZSBib3VuZCBiZWZvcmUgRE9NIHJlYWR5LCBidXQgc2luY2UgaXQgd29uJ3QgYmUgdXNhYmxlCiAgLy8gICBiZWZvcmUgdGhlbiBpbiBJRTYvNyAoZHVlIHRvIHRoZSBuZWNlc3NhcnkgSWZyYW1lKSwgcmVjb21tZW5kZWQgdXNhZ2UgaXMKICAvLyAgIHRvIGJpbmQgaXQgaW5zaWRlIGEgRE9NIHJlYWR5IGhhbmRsZXIuCiAgCiAgLy8gT3ZlcnJpZGUgZXhpc3RpbmcgJC5ldmVudC5zcGVjaWFsLmhhc2hjaGFuZ2UgbWV0aG9kcyAoYWxsb3dpbmcgdGhpcyBwbHVnaW4KICAvLyB0byBiZSBkZWZpbmVkIGFmdGVyIGpRdWVyeSBCQlEgaW4gQkJRJ3Mgc291cmNlIGNvZGUpLgogIHNwZWNpYWxbIHN0cl9oYXNoY2hhbmdlIF0gPSAkLmV4dGVuZCggc3BlY2lhbFsgc3RyX2hhc2hjaGFuZ2UgXSwgewogICAgCiAgICAvLyBDYWxsZWQgb25seSB3aGVuIHRoZSBmaXJzdCAnaGFzaGNoYW5nZScgZXZlbnQgaXMgYm91bmQgdG8gd2luZG93LgogICAgc2V0dXA6IGZ1bmN0aW9uKCkgewogICAgICAvLyBJZiB3aW5kb3cub25oYXNoY2hhbmdlIGlzIHN1cHBvcnRlZCBuYXRpdmVseSwgdGhlcmUncyBub3RoaW5nIHRvIGRvLi4KICAgICAgaWYgKCBzdXBwb3J0c19vbmhhc2hjaGFuZ2UgKSB7IHJldHVybiBmYWxzZTsgfQogICAgICAKICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBuZWVkIHRvIGNyZWF0ZSBvdXIgb3duLiBBbmQgd2UgZG9uJ3Qgd2FudCB0byBjYWxsIHRoaXMKICAgICAgLy8gdW50aWwgdGhlIHVzZXIgYmluZHMgdG8gdGhlIGV2ZW50LCBqdXN0IGluIGNhc2UgdGhleSBuZXZlciBkbywgc2luY2UgaXQKICAgICAgLy8gd2lsbCBjcmVhdGUgYSBwb2xsaW5nIGxvb3AgYW5kIHBvc3NpYmx5IGV2ZW4gYSBoaWRkZW4gSWZyYW1lLgogICAgICAkKCBmYWtlX29uaGFzaGNoYW5nZS5zdGFydCApOwogICAgfSwKICAgIAogICAgLy8gQ2FsbGVkIG9ubHkgd2hlbiB0aGUgbGFzdCAnaGFzaGNoYW5nZScgZXZlbnQgaXMgdW5ib3VuZCBmcm9tIHdpbmRvdy4KICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHsKICAgICAgLy8gSWYgd2luZG93Lm9uaGFzaGNoYW5nZSBpcyBzdXBwb3J0ZWQgbmF0aXZlbHksIHRoZXJlJ3Mgbm90aGluZyB0byBkby4uCiAgICAgIGlmICggc3VwcG9ydHNfb25oYXNoY2hhbmdlICkgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgCiAgICAgIC8vIE90aGVyd2lzZSwgd2UgbmVlZCB0byBzdG9wIG91cnMgKGlmIHBvc3NpYmxlKS4KICAgICAgJCggZmFrZV9vbmhhc2hjaGFuZ2Uuc3RvcCApOwogICAgfQogICAgCiAgfSk7CiAgCiAgLy8gZmFrZV9vbmhhc2hjaGFuZ2UgZG9lcyBhbGwgdGhlIHdvcmsgb2YgdHJpZ2dlcmluZyB0aGUgd2luZG93Lm9uaGFzaGNoYW5nZQogIC8vIGV2ZW50IGZvciBicm93c2VycyB0aGF0IGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQsIGluY2x1ZGluZyBjcmVhdGluZyBhCiAgLy8gcG9sbGluZyBsb29wIHRvIHdhdGNoIGZvciBoYXNoIGNoYW5nZXMgYW5kIGluIElFIDYvNyBjcmVhdGluZyBhIGhpZGRlbgogIC8vIElmcmFtZSB0byBlbmFibGUgYmFjayBhbmQgZm9yd2FyZC4KICBmYWtlX29uaGFzaGNoYW5nZSA9IChmdW5jdGlvbigpIHsKICAgIHZhciBzZWxmID0ge30sCiAgICAgIHRpbWVvdXRfaWQsCiAgICAgIAogICAgICAvLyBSZW1lbWJlciB0aGUgaW5pdGlhbCBoYXNoIHNvIGl0IGRvZXNuJ3QgZ2V0IHRyaWdnZXJlZCBpbW1lZGlhdGVseS4KICAgICAgbGFzdF9oYXNoID0gZ2V0X2ZyYWdtZW50KCksCiAgICAgIAogICAgICBmbl9yZXR2YWwgPSBmdW5jdGlvbiggdmFsICkgeyByZXR1cm4gdmFsOyB9LAogICAgICBoaXN0b3J5X3NldCA9IGZuX3JldHZhbCwKICAgICAgaGlzdG9yeV9nZXQgPSBmbl9yZXR2YWw7CiAgICAKICAgIC8vIFN0YXJ0IHRoZSBwb2xsaW5nIGxvb3AuCiAgICBzZWxmLnN0YXJ0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHRpbWVvdXRfaWQgfHwgcG9sbCgpOwogICAgfTsKICAgIAogICAgLy8gU3RvcCB0aGUgcG9sbGluZyBsb29wLgogICAgc2VsZi5zdG9wID0gZnVuY3Rpb24oKSB7CiAgICAgIHRpbWVvdXRfaWQgJiYgY2xlYXJUaW1lb3V0KCB0aW1lb3V0X2lkICk7CiAgICAgIHRpbWVvdXRfaWQgPSB1bmRlZmluZWQ7CiAgICB9OwogICAgCiAgICAvLyBUaGlzIHBvbGxpbmcgbG9vcCBjaGVja3MgZXZlcnkgJC5mbi5oYXNoY2hhbmdlLmRlbGF5IG1pbGxpc2Vjb25kcyB0byBzZWUKICAgIC8vIGlmIGxvY2F0aW9uLmhhc2ggaGFzIGNoYW5nZWQsIGFuZCB0cmlnZ2VycyB0aGUgJ2hhc2hjaGFuZ2UnIGV2ZW50IG9uCiAgICAvLyB3aW5kb3cgd2hlbiBuZWNlc3NhcnkuCiAgICBmdW5jdGlvbiBwb2xsKCkgewogICAgICB2YXIgaGFzaCA9IGdldF9mcmFnbWVudCgpLAogICAgICAgIGhpc3RvcnlfaGFzaCA9IGhpc3RvcnlfZ2V0KCBsYXN0X2hhc2ggKTsKICAgICAgCiAgICAgIGlmICggaGFzaCAhPT0gbGFzdF9oYXNoICkgewogICAgICAgIGhpc3Rvcnlfc2V0KCBsYXN0X2hhc2ggPSBoYXNoLCBoaXN0b3J5X2hhc2ggKTsKICAgICAgICAKICAgICAgICAkKHdpbmRvdykudHJpZ2dlciggc3RyX2hhc2hjaGFuZ2UgKTsKICAgICAgICAKICAgICAgfSBlbHNlIGlmICggaGlzdG9yeV9oYXNoICE9PSBsYXN0X2hhc2ggKSB7CiAgICAgICAgbG9jYXRpb24uaHJlZiA9IGxvY2F0aW9uLmhyZWYucmVwbGFjZSggLyMuKi8sICcnICkgKyBoaXN0b3J5X2hhc2g7CiAgICAgIH0KICAgICAgCiAgICAgIHRpbWVvdXRfaWQgPSBzZXRUaW1lb3V0KCBwb2xsLCAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdLmRlbGF5ICk7CiAgICB9OwogICAgCiAgICAvLyB2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnYKICAgIC8vIHZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnYgUkVNT1ZFIElGIE5PVCBTVVBQT1JUSU5HIElFNi83LzggdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dgogICAgLy8gdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2CiAgICAkLmJyb3dzZXIubXNpZSAmJiAhc3VwcG9ydHNfb25oYXNoY2hhbmdlICYmIChmdW5jdGlvbigpIHsKICAgICAgLy8gTm90IG9ubHkgZG8gSUU2LzcgbmVlZCB0aGUgIm1hZ2ljYWwiIElmcmFtZSB0cmVhdG1lbnQsIGJ1dCBzbyBkb2VzIElFOAogICAgICAvLyB3aGVuIHJ1bm5pbmcgaW4gIklFNyBjb21wYXRpYmlsaXR5IiBtb2RlLgogICAgICAKICAgICAgdmFyIGlmcmFtZSwKICAgICAgICBpZnJhbWVfc3JjOwogICAgICAKICAgICAgLy8gV2hlbiB0aGUgZXZlbnQgaXMgYm91bmQgYW5kIHBvbGxpbmcgc3RhcnRzIGluIElFIDYvNywgY3JlYXRlIGEgaGlkZGVuCiAgICAgIC8vIElmcmFtZSBmb3IgaGlzdG9yeSBoYW5kbGluZy4KICAgICAgc2VsZi5zdGFydCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICggIWlmcmFtZSApIHsKICAgICAgICAgIGlmcmFtZV9zcmMgPSAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdLnNyYzsKICAgICAgICAgIGlmcmFtZV9zcmMgPSBpZnJhbWVfc3JjICYmIGlmcmFtZV9zcmMgKyBnZXRfZnJhZ21lbnQoKTsKICAgICAgICAgIAogICAgICAgICAgLy8gQ3JlYXRlIGhpZGRlbiBJZnJhbWUuIEF0dGVtcHQgdG8gbWFrZSBJZnJhbWUgYXMgaGlkZGVuIGFzIHBvc3NpYmxlCiAgICAgICAgICAvLyBieSB1c2luZyB0ZWNobmlxdWVzIGZyb20gaHR0cDovL3d3dy5wYWNpZWxsb2dyb3VwLmNvbS9ibG9nLz9wPTYwNC4KICAgICAgICAgIGlmcmFtZSA9ICQoJzxpZnJhbWUgdGFiaW5kZXg9Ii0xIiB0aXRsZT0iZW1wdHkiLz4nKS5oaWRlKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFdoZW4gSWZyYW1lIGhhcyBjb21wbGV0ZWx5IGxvYWRlZCwgaW5pdGlhbGl6ZSB0aGUgaGlzdG9yeSBhbmQKICAgICAgICAgICAgLy8gc3RhcnQgcG9sbGluZy4KICAgICAgICAgICAgLm9uZSggJ2xvYWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBpZnJhbWVfc3JjIHx8IGhpc3Rvcnlfc2V0KCBnZXRfZnJhZ21lbnQoKSApOwogICAgICAgICAgICAgIHBvbGwoKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIExvYWQgSWZyYW1lIHNyYyBpZiBzcGVjaWZpZWQsIG90aGVyd2lzZSBub3RoaW5nLgogICAgICAgICAgICAuYXR0ciggJ3NyYycsIGlmcmFtZV9zcmMgfHwgJ2phdmFzY3JpcHQ6MCcgKQogICAgICAgICAgICAKICAgICAgICAgICAgLy8gQXBwZW5kIElmcmFtZSBhZnRlciB0aGUgZW5kIG9mIHRoZSBib2R5IHRvIHByZXZlbnQgdW5uZWNlc3NhcnkKICAgICAgICAgICAgLy8gaW5pdGlhbCBwYWdlIHNjcm9sbGluZyAoeWVzLCB0aGlzIHdvcmtzKS4KICAgICAgICAgICAgLmluc2VydEFmdGVyKCAnYm9keScgKVswXS5jb250ZW50V2luZG93OwogICAgICAgICAgCiAgICAgICAgICAvLyBXaGVuZXZlciBgZG9jdW1lbnQudGl0bGVgIGNoYW5nZXMsIHVwZGF0ZSB0aGUgSWZyYW1lJ3MgdGl0bGUgdG8KICAgICAgICAgIC8vIHByZXR0aWZ5IHRoZSBiYWNrL25leHQgaGlzdG9yeSBtZW51IGVudHJpZXMuIFNpbmNlIElFIHNvbWV0aW1lcwogICAgICAgICAgLy8gZXJyb3JzIHdpdGggIlVuc3BlY2lmaWVkIGVycm9yIiB0aGUgdmVyeSBmaXJzdCB0aW1lIHRoaXMgaXMgc2V0CiAgICAgICAgICAvLyAoeWVzLCB2ZXJ5IHVzZWZ1bCkgd3JhcCB0aGlzIHdpdGggYSB0cnkvY2F0Y2ggYmxvY2suCiAgICAgICAgICBkb2Mub25wcm9wZXJ0eWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGlmICggZXZlbnQucHJvcGVydHlOYW1lID09PSAndGl0bGUnICkgewogICAgICAgICAgICAgICAgaWZyYW1lLmRvY3VtZW50LnRpdGxlID0gZG9jLnRpdGxlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaChlKSB7fQogICAgICAgICAgfTsKICAgICAgICAgIAogICAgICAgIH0KICAgICAgfTsKICAgICAgCiAgICAgIC8vIE92ZXJyaWRlIHRoZSAic3RvcCIgbWV0aG9kIHNpbmNlIGFuIElFNi83IElmcmFtZSB3YXMgY3JlYXRlZC4gRXZlbgogICAgICAvLyBpZiB0aGVyZSBhcmUgbm8gbG9uZ2VyIGFueSBib3VuZCBldmVudCBoYW5kbGVycywgdGhlIHBvbGxpbmcgbG9vcAogICAgICAvLyBpcyBzdGlsbCBuZWNlc3NhcnkgZm9yIGJhY2svbmV4dCB0byB3b3JrIGF0IGFsbCEKICAgICAgc2VsZi5zdG9wID0gZm5fcmV0dmFsOwogICAgICAKICAgICAgLy8gR2V0IGhpc3RvcnkgYnkgbG9va2luZyBhdCB0aGUgaGlkZGVuIElmcmFtZSdzIGxvY2F0aW9uLmhhc2guCiAgICAgIGhpc3RvcnlfZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGdldF9mcmFnbWVudCggaWZyYW1lLmxvY2F0aW9uLmhyZWYgKTsKICAgICAgfTsKICAgICAgCiAgICAgIC8vIFNldCBhIG5ldyBoaXN0b3J5IGl0ZW0gYnkgb3BlbmluZyBhbmQgdGhlbiBjbG9zaW5nIHRoZSBJZnJhbWUKICAgICAgLy8gZG9jdW1lbnQsICp0aGVuKiBzZXR0aW5nIGl0cyBsb2NhdGlvbi5oYXNoLiBJZiBkb2N1bWVudC5kb21haW4gaGFzCiAgICAgIC8vIGJlZW4gc2V0LCB1cGRhdGUgdGhhdCBhcyB3ZWxsLgogICAgICBoaXN0b3J5X3NldCA9IGZ1bmN0aW9uKCBoYXNoLCBoaXN0b3J5X2hhc2ggKSB7CiAgICAgICAgdmFyIGlmcmFtZV9kb2MgPSBpZnJhbWUuZG9jdW1lbnQsCiAgICAgICAgICBkb21haW4gPSAkLmZuWyBzdHJfaGFzaGNoYW5nZSBdLmRvbWFpbjsKICAgICAgICAKICAgICAgICBpZiAoIGhhc2ggIT09IGhpc3RvcnlfaGFzaCApIHsKICAgICAgICAgIC8vIFVwZGF0ZSBJZnJhbWUgd2l0aCBhbnkgaW5pdGlhbCBgZG9jdW1lbnQudGl0bGVgIHRoYXQgbWlnaHQgYmUgc2V0LgogICAgICAgICAgaWZyYW1lX2RvYy50aXRsZSA9IGRvYy50aXRsZTsKICAgICAgICAgIAogICAgICAgICAgLy8gT3BlbmluZyB0aGUgSWZyYW1lJ3MgZG9jdW1lbnQgYWZ0ZXIgaXQgaGFzIGJlZW4gY2xvc2VkIGlzIHdoYXQKICAgICAgICAgIC8vIGFjdHVhbGx5IGFkZHMgYSBoaXN0b3J5IGVudHJ5LgogICAgICAgICAgaWZyYW1lX2RvYy5vcGVuKCk7CiAgICAgICAgICAKICAgICAgICAgIC8vIFNldCBkb2N1bWVudC5kb21haW4gZm9yIHRoZSBJZnJhbWUgZG9jdW1lbnQgYXMgd2VsbCwgaWYgbmVjZXNzYXJ5LgogICAgICAgICAgZG9tYWluICYmIGlmcmFtZV9kb2Mud3JpdGUoICc8c2NyaXB0PmRvY3VtZW50LmRvbWFpbj0iJyArIGRvbWFpbiArICciPC9zY3JpcHQ+JyApOwogICAgICAgICAgCiAgICAgICAgICBpZnJhbWVfZG9jLmNsb3NlKCk7CiAgICAgICAgICAKICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgSWZyYW1lJ3MgaGFzaCwgZm9yIGdyZWF0IGp1c3RpY2UuCiAgICAgICAgICBpZnJhbWUubG9jYXRpb24uaGFzaCA9IGhhc2g7CiAgICAgICAgfQogICAgICB9OwogICAgICAKICAgIH0pKCk7CiAgICAvLyBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl4KICAgIC8vIF5eXl5eXl5eXl5eXl5eXl5eXl4gUkVNT1ZFIElGIE5PVCBTVVBQT1JUSU5HIElFNi83LzggXl5eXl5eXl5eXl5eXl5eXl5eXgogICAgLy8gXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eCiAgICAKICAgIHJldHVybiBzZWxmOwogIH0pKCk7CiAgCn0pKGpRdWVyeSx0aGlzKTsKCgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewoKdmFyIGNyZWF0ZUhhbmRsZXIgPSBmdW5jdGlvbiggc2VxdWVudGlhbCApIHsKCgkvLyBEZWZhdWx0IHRvIHNlcXVlbnRpYWwKCWlmICggc2VxdWVudGlhbCA9PT0gdW5kZWZpbmVkICkgewoJCXNlcXVlbnRpYWwgPSB0cnVlOwoJfQoKCXJldHVybiBmdW5jdGlvbiggbmFtZSwgcmV2ZXJzZSwgJHRvLCAkZnJvbSApIHsKCgkJdmFyIGRlZmVycmVkID0gbmV3ICQuRGVmZXJyZWQoKSwKCQkJcmV2ZXJzZUNsYXNzID0gcmV2ZXJzZSA/ICIgcmV2ZXJzZSIgOiAiIiwKCQkJYWN0aXZlCT0gJC5tb2JpbGUudXJsSGlzdG9yeS5nZXRBY3RpdmUoKSwKCQkJdG9TY3JvbGwgPSBhY3RpdmUubGFzdFNjcm9sbCB8fCAkLm1vYmlsZS5kZWZhdWx0SG9tZVNjcm9sbCwKCQkJc2NyZWVuSGVpZ2h0ID0gJC5tb2JpbGUuZ2V0U2NyZWVuSGVpZ2h0KCksCgkJCW1heFRyYW5zaXRpb25PdmVycmlkZSA9ICQubW9iaWxlLm1heFRyYW5zaXRpb25XaWR0aCAhPT0gZmFsc2UgJiYgJCggd2luZG93ICkud2lkdGgoKSA+ICQubW9iaWxlLm1heFRyYW5zaXRpb25XaWR0aCwKCQkJbm9uZSA9ICEkLnN1cHBvcnQuY3NzVHJhbnNpdGlvbnMgfHwgbWF4VHJhbnNpdGlvbk92ZXJyaWRlIHx8ICFuYW1lIHx8IG5hbWUgPT09ICJub25lIiB8fCBNYXRoLm1heCggJCggd2luZG93ICkuc2Nyb2xsVG9wKCksIHRvU2Nyb2xsICkgPiAkLm1vYmlsZS5nZXRNYXhTY3JvbGxGb3JUcmFuc2l0aW9uKCksCgkJCXRvUHJlQ2xhc3MgPSAiIHVpLXBhZ2UtcHJlLWluIiwKCQkJdG9nZ2xlVmlld3BvcnRDbGFzcyA9IGZ1bmN0aW9uKCkgewoJCQkJJC5tb2JpbGUucGFnZUNvbnRhaW5lci50b2dnbGVDbGFzcyggInVpLW1vYmlsZS12aWV3cG9ydC10cmFuc2l0aW9uaW5nIHZpZXdwb3J0LSIgKyBuYW1lICk7CgkJCX0sCgkJCXNjcm9sbFBhZ2UgPSBmdW5jdGlvbigpIHsKCQkJCS8vIEJ5IHVzaW5nIHNjcm9sbFRvIGluc3RlYWQgb2Ygc2lsZW50U2Nyb2xsLCB3ZSBjYW4ga2VlcCB0aGluZ3MgYmV0dGVyIGluIG9yZGVyCgkJCQkvLyBKdXN0IHRvIGJlIHByZWNhdXRpb3MsIGRpc2FibGUgc2Nyb2xsc3RhcnQgbGlzdGVuaW5nIGxpa2Ugc2lsZW50U2Nyb2xsIHdvdWxkCgkJCQkkLmV2ZW50LnNwZWNpYWwuc2Nyb2xsc3RhcnQuZW5hYmxlZCA9IGZhbHNlOwoKCQkJCXdpbmRvdy5zY3JvbGxUbyggMCwgdG9TY3JvbGwgKTsKCgkJCQkvLyByZWVuYWJsZSBzY3JvbGxzdGFydCBsaXN0ZW5pbmcgbGlrZSBzaWxlbnRTY3JvbGwgd291bGQKCQkJCXNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgewoJCQkJCSQuZXZlbnQuc3BlY2lhbC5zY3JvbGxzdGFydC5lbmFibGVkID0gdHJ1ZTsKCQkJCX0sIDE1MCApOwoJCQl9LAoJCQljbGVhbkZyb20gPSBmdW5jdGlvbigpIHsKCQkJCSRmcm9tCgkJCQkJLnJlbW92ZUNsYXNzKCAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKyAiIG91dCBpbiByZXZlcnNlICIgKyBuYW1lICkKCQkJCQkuaGVpZ2h0KCAiIiApOwoJCQl9LAoJCQlzdGFydE91dCA9IGZ1bmN0aW9uKCkgewoJCQkJLy8gaWYgaXQncyBub3Qgc2VxdWVudGlhbCwgY2FsbCB0aGUgZG9uZU91dCB0cmFuc2l0aW9uIHRvIHN0YXJ0IHRoZSBUTyBwYWdlIGFuaW1hdGluZyBpbiBzaW11bHRhbmVvdXNseQoJCQkJaWYgKCAhc2VxdWVudGlhbCApIHsKCQkJCQlkb25lT3V0KCk7CgkJCQl9CgkJCQllbHNlIHsKCQkJCQkkZnJvbS5hbmltYXRpb25Db21wbGV0ZSggZG9uZU91dCApOwoJCQkJfQoKCQkJCS8vIFNldCB0aGUgZnJvbSBwYWdlJ3MgaGVpZ2h0IGFuZCBzdGFydCBpdCB0cmFuc2l0aW9uaW5nIG91dAoJCQkJLy8gTm90ZTogc2V0dGluZyBhbiBleHBsaWNpdCBoZWlnaHQgaGVscHMgZWxpbWluYXRlIHRpbGluZyBpbiB0aGUgdHJhbnNpdGlvbnMKCQkJCSRmcm9tCgkJCQkJLmhlaWdodCggc2NyZWVuSGVpZ2h0ICsgJCggd2luZG93ICkuc2Nyb2xsVG9wKCkgKQoJCQkJCS5hZGRDbGFzcyggbmFtZSArICIgb3V0IiArIHJldmVyc2VDbGFzcyApOwoJCQl9LAoKCQkJZG9uZU91dCA9IGZ1bmN0aW9uKCkgewoKCQkJCWlmICggJGZyb20gJiYgc2VxdWVudGlhbCApIHsKCQkJCQljbGVhbkZyb20oKTsKCQkJCX0KCgkJCQlzdGFydEluKCk7CgkJCX0sCgoJCQlzdGFydEluID0gZnVuY3Rpb24oKSB7CgoJCQkJLy8gUHJldmVudCBmbGlja2VyaW5nIGluIHBob25lZ2FwIGNvbnRhaW5lcjogc2VlIGNvbW1lbnRzIGF0ICM0MDI0IHJlZ2FyZGluZyBpT1MKCQkJCSR0by5jc3MoICJ6LWluZGV4IiwgLTEwICk7CgoJCQkJJHRvLmFkZENsYXNzKCAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKyB0b1ByZUNsYXNzICk7CgoJCQkJLy8gU2VuZCBmb2N1cyB0byBwYWdlIGFzIGl0IGlzIG5vdyBkaXNwbGF5OiBibG9jawoJCQkJJC5tb2JpbGUuZm9jdXNQYWdlKCAkdG8gKTsKCgkJCQkvLyBTZXQgdG8gcGFnZSBoZWlnaHQKCQkJCSR0by5oZWlnaHQoIHNjcmVlbkhlaWdodCArIHRvU2Nyb2xsICk7CgoJCQkJc2Nyb2xsUGFnZSgpOwoKCQkJCS8vIFJlc3RvcmVzIHZpc2liaWxpdHkgb2YgdGhlIG5ldyBwYWdlOiBhZGRlZCB0b2dldGhlciB3aXRoICR0by5jc3MoICJ6LWluZGV4IiwgLTEwICk7CgkJCQkkdG8uY3NzKCAiei1pbmRleCIsICIiICk7CgoJCQkJaWYgKCAhbm9uZSApIHsKCQkJCQkkdG8uYW5pbWF0aW9uQ29tcGxldGUoIGRvbmVJbiApOwoJCQkJfQoKCQkJCSR0bwoJCQkJCS5yZW1vdmVDbGFzcyggdG9QcmVDbGFzcyApCgkJCQkJLmFkZENsYXNzKCBuYW1lICsgIiBpbiIgKyByZXZlcnNlQ2xhc3MgKTsKCgkJCQlpZiAoIG5vbmUgKSB7CgkJCQkJZG9uZUluKCk7CgkJCQl9CgoJCQl9LAoKCQkJZG9uZUluID0gZnVuY3Rpb24oKSB7CgoJCQkJaWYgKCAhc2VxdWVudGlhbCApIHsKCgkJCQkJaWYgKCAkZnJvbSApIHsKCQkJCQkJY2xlYW5Gcm9tKCk7CgkJCQkJfQoJCQkJfQoKCQkJCSR0bwoJCQkJCS5yZW1vdmVDbGFzcyggIm91dCBpbiByZXZlcnNlICIgKyBuYW1lICkKCQkJCQkuaGVpZ2h0KCAiIiApOwoKCQkJCXRvZ2dsZVZpZXdwb3J0Q2xhc3MoKTsKCgkJCQkvLyBJbiBzb21lIGJyb3dzZXJzIChpT1M1KSwgM0QgdHJhbnNpdGlvbnMgYmxvY2sgdGhlIGFiaWxpdHkgdG8gc2Nyb2xsIHRvIHRoZSBkZXNpcmVkIGxvY2F0aW9uIGR1cmluZyB0cmFuc2l0aW9uCgkJCQkvLyBUaGlzIGVuc3VyZXMgd2UganVtcCB0byB0aGF0IHNwb3QgYWZ0ZXIgdGhlIGZhY3QsIGlmIHdlIGFyZW4ndCB0aGVyZSBhbHJlYWR5LgoJCQkJaWYgKCAkKCB3aW5kb3cgKS5zY3JvbGxUb3AoKSAhPT0gdG9TY3JvbGwgKSB7CgkJCQkJc2Nyb2xsUGFnZSgpOwoJCQkJfQoKCQkJCWRlZmVycmVkLnJlc29sdmUoIG5hbWUsIHJldmVyc2UsICR0bywgJGZyb20sIHRydWUgKTsKCQkJfTsKCgkJdG9nZ2xlVmlld3BvcnRDbGFzcygpOwoKCQlpZiAoICRmcm9tICYmICFub25lICkgewoJCQlzdGFydE91dCgpOwoJCX0KCQllbHNlIHsKCQkJZG9uZU91dCgpOwoJCX0KCgkJcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTsKCX07Cn07CgovLyBnZW5lcmF0ZSB0aGUgaGFuZGxlcnMgZnJvbSB0aGUgYWJvdmUKdmFyIHNlcXVlbnRpYWxIYW5kbGVyID0gY3JlYXRlSGFuZGxlcigpLAoJc2ltdWx0YW5lb3VzSGFuZGxlciA9IGNyZWF0ZUhhbmRsZXIoIGZhbHNlICksCglkZWZhdWx0R2V0TWF4U2Nyb2xsRm9yVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkgewoJCXJldHVybiAkLm1vYmlsZS5nZXRTY3JlZW5IZWlnaHQoKSAqIDM7Cgl9OwoKLy8gTWFrZSBvdXIgdHJhbnNpdGlvbiBoYW5kbGVyIHRoZSBwdWJsaWMgZGVmYXVsdC4KJC5tb2JpbGUuZGVmYXVsdFRyYW5zaXRpb25IYW5kbGVyID0gc2VxdWVudGlhbEhhbmRsZXI7CgovL3RyYW5zaXRpb24gaGFuZGxlciBkaWN0aW9uYXJ5IGZvciAzcmQgcGFydHkgdHJhbnNpdGlvbnMKJC5tb2JpbGUudHJhbnNpdGlvbkhhbmRsZXJzID0gewoJImRlZmF1bHQiOiAkLm1vYmlsZS5kZWZhdWx0VHJhbnNpdGlvbkhhbmRsZXIsCgkic2VxdWVudGlhbCI6IHNlcXVlbnRpYWxIYW5kbGVyLAoJInNpbXVsdGFuZW91cyI6IHNpbXVsdGFuZW91c0hhbmRsZXIKfTsKCiQubW9iaWxlLnRyYW5zaXRpb25GYWxsYmFja3MgPSB7fTsKCi8vIElmIHRyYW5zaXRpb24gaXMgZGVmaW5lZCwgY2hlY2sgaWYgY3NzIDNEIHRyYW5zZm9ybXMgYXJlIHN1cHBvcnRlZCwgYW5kIGlmIG5vdCwgaWYgYSBmYWxsYmFjayBpcyBzcGVjaWZpZWQKJC5tb2JpbGUuX21heWJlRGVncmFkZVRyYW5zaXRpb24gPSBmdW5jdGlvbiggdHJhbnNpdGlvbiApIHsKCQlpZiAoIHRyYW5zaXRpb24gJiYgISQuc3VwcG9ydC5jc3NUcmFuc2Zvcm0zZCAmJiAkLm1vYmlsZS50cmFuc2l0aW9uRmFsbGJhY2tzWyB0cmFuc2l0aW9uIF0gKSB7CgkJCXRyYW5zaXRpb24gPSAkLm1vYmlsZS50cmFuc2l0aW9uRmFsbGJhY2tzWyB0cmFuc2l0aW9uIF07CgkJfQoKCQlyZXR1cm4gdHJhbnNpdGlvbjsKfTsKCi8vIFNldCB0aGUgZ2V0TWF4U2Nyb2xsRm9yVHJhbnNpdGlvbiB0byBkZWZhdWx0IGlmIG5vIGltcGxlbWVudGF0aW9uIHdhcyBzZXQgYnkgdXNlcgokLm1vYmlsZS5nZXRNYXhTY3JvbGxGb3JUcmFuc2l0aW9uID0gJC5tb2JpbGUuZ2V0TWF4U2Nyb2xsRm9yVHJhbnNpdGlvbiB8fCBkZWZhdWx0R2V0TWF4U2Nyb2xsRm9yVHJhbnNpdGlvbjsKfSkoIGpRdWVyeSwgdGhpcyApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgoJLy9kZWZpbmUgdmFycyBmb3IgaW50ZXJhbCB1c2UKCXZhciAkd2luZG93ID0gJCggd2luZG93ICksCgkJJGh0bWwgPSAkKCAnaHRtbCcgKSwKCQkkaGVhZCA9ICQoICdoZWFkJyApLAoKCQkvL3VybCBwYXRoIGhlbHBlcnMgZm9yIHVzZSBpbiByZWxhdGl2ZSB1cmwgbWFuYWdlbWVudAoJCXBhdGggPSB7CgoJCQkvLyBUaGlzIHNjYXJ5IGxvb2tpbmcgcmVndWxhciBleHByZXNzaW9uIHBhcnNlcyBhbiBhYnNvbHV0ZSBVUkwgb3IgaXRzIHJlbGF0aXZlCgkJCS8vIHZhcmlhbnRzIChwcm90b2NvbCwgc2l0ZSwgZG9jdW1lbnQsIHF1ZXJ5LCBhbmQgaGFzaCksIGludG8gdGhlIHZhcmlvdXMKCQkJLy8gY29tcG9uZW50cyAocHJvdG9jb2wsIGhvc3QsIHBhdGgsIHF1ZXJ5LCBmcmFnbWVudCwgZXRjIHRoYXQgbWFrZSB1cCB0aGUKCQkJLy8gVVJMIGFzIHdlbGwgYXMgc29tZSBvdGhlciBjb21tb25seSB1c2VkIHN1Yi1wYXJ0cy4gV2hlbiB1c2VkIHdpdGggUmVnRXhwLmV4ZWMoKQoJCQkvLyBvciBTdHJpbmcubWF0Y2gsIGl0IHBhcnNlcyB0aGUgVVJMIGludG8gYSByZXN1bHRzIGFycmF5IHRoYXQgbG9va3MgbGlrZSB0aGlzOgoJCQkvLwoJCQkvLyAgICAgWzBdOiBodHRwOi8vamJsYXM6cGFzc3dvcmRAbXljb21wYW55LmNvbTo4MDgwL21haWwvaW5ib3g/bXNnPTEyMzQmdHlwZT11bnJlYWQjbXNnLWNvbnRlbnQKCQkJLy8gICAgIFsxXTogaHR0cDovL2pibGFzOnBhc3N3b3JkQG15Y29tcGFueS5jb206ODA4MC9tYWlsL2luYm94P21zZz0xMjM0JnR5cGU9dW5yZWFkCgkJCS8vICAgICBbMl06IGh0dHA6Ly9qYmxhczpwYXNzd29yZEBteWNvbXBhbnkuY29tOjgwODAvbWFpbC9pbmJveAoJCQkvLyAgICAgWzNdOiBodHRwOi8vamJsYXM6cGFzc3dvcmRAbXljb21wYW55LmNvbTo4MDgwCgkJCS8vICAgICBbNF06IGh0dHA6CgkJCS8vICAgICBbNV06IC8vCgkJCS8vICAgICBbNl06IGpibGFzOnBhc3N3b3JkQG15Y29tcGFueS5jb206ODA4MAoJCQkvLyAgICAgWzddOiBqYmxhczpwYXNzd29yZAoJCQkvLyAgICAgWzhdOiBqYmxhcwoJCQkvLyAgICAgWzldOiBwYXNzd29yZAoJCQkvLyAgICBbMTBdOiBteWNvbXBhbnkuY29tOjgwODAKCQkJLy8gICAgWzExXTogbXljb21wYW55LmNvbQoJCQkvLyAgICBbMTJdOiA4MDgwCgkJCS8vICAgIFsxM106IC9tYWlsL2luYm94CgkJCS8vICAgIFsxNF06IC9tYWlsLwoJCQkvLyAgICBbMTVdOiBpbmJveAoJCQkvLyAgICBbMTZdOiA/bXNnPTEyMzQmdHlwZT11bnJlYWQKCQkJLy8gICAgWzE3XTogI21zZy1jb250ZW50CgkJCS8vCgkJCXVybFBhcnNlUkU6IC9eKCgoKFteOlwvI1w/XSs6KT8oPzooXC9cLykoKD86KChbXjpAXC8jXD9dKykoPzpcOihbXjpAXC8jXD9dKykpPylAKT8oKFteOlwvI1w/XF1cW10rfFxbW15cL1xdQCM/XStcXSkoPzpcOihbMC05XSspKT8pKT8pPyk/KChcLz8oPzpbXlwvXD8jXStcLyspKikoW15cPyNdKikpKT8oXD9bXiNdKyk/KSgjLiopPy8sCgoJCQkvLyBBYnN0cmFjdGlvbiB0byBhZGRyZXNzIHhzcyAoSXNzdWUgIzQ3ODcpIGJ5IHJlbW92aW5nIHRoZSBhdXRob3JpdHkgaW4KCQkJLy8gYnJvd3NlcnMgdGhhdCBhdXRvCWRlY29kZSBpdC4gQWxsIHJlZmVyZW5jZXMgdG8gbG9jYXRpb24uaHJlZiBzaG91bGQgYmUKCQkJLy8gcmVwbGFjZWQgd2l0aCBhIGNhbGwgdG8gdGhpcyBtZXRob2Qgc28gdGhhdCBpdCBjYW4gYmUgZGVhbHQgd2l0aCBwcm9wZXJseSBoZXJlCgkJCWdldExvY2F0aW9uOiBmdW5jdGlvbiggdXJsICkgewoJCQkJdmFyIHVyaSA9IHVybCA/IHRoaXMucGFyc2VVcmwoIHVybCApIDogbG9jYXRpb24sCgkJCQkJaGFzaCA9IHRoaXMucGFyc2VVcmwoIHVybCB8fCBsb2NhdGlvbi5ocmVmICkuaGFzaDsKCgkJCQkvLyBtaW1pYyB0aGUgYnJvd3NlciB3aXRoIGFuIGVtcHR5IHN0cmluZyB3aGVuIHRoZSBoYXNoIGlzIGVtcHR5CgkJCQloYXNoID0gaGFzaCA9PT0gIiMiID8gIiIgOiBoYXNoOwoKCQkJCS8vIE1ha2Ugc3VyZSB0byBwYXJzZSB0aGUgdXJsIG9yIHRoZSBsb2NhdGlvbiBvYmplY3QgZm9yIHRoZSBoYXNoIGJlY2F1c2UgdXNpbmcgbG9jYXRpb24uaGFzaAoJCQkJLy8gaXMgYXV0b2RlY29kZWQgaW4gZmlyZWZveCwgdGhlIHJlc3Qgb2YgdGhlIHVybCBzaG91bGQgYmUgZnJvbSB0aGUgb2JqZWN0IChsb2NhdGlvbiB1bmxlc3MKCQkJCS8vIHdlJ3JlIHRlc3RpbmcpIHRvIGF2b2lkIHRoZSBpbmNsdXNpb24gb2YgdGhlIGF1dGhvcml0eQoJCQkJcmV0dXJuIHVyaS5wcm90b2NvbCArICIvLyIgKyB1cmkuaG9zdCArIHVyaS5wYXRobmFtZSArIHVyaS5zZWFyY2ggKyBoYXNoOwoJCQl9LAoKCQkJcGFyc2VMb2NhdGlvbjogZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gdGhpcy5wYXJzZVVybCggdGhpcy5nZXRMb2NhdGlvbigpICk7CgkJCX0sCgoJCQkvL1BhcnNlIGEgVVJMIGludG8gYSBzdHJ1Y3R1cmUgdGhhdCBhbGxvd3MgZWFzeSBhY2Nlc3MgdG8KCQkJLy9hbGwgb2YgdGhlIFVSTCBjb21wb25lbnRzIGJ5IG5hbWUuCgkJCXBhcnNlVXJsOiBmdW5jdGlvbiggdXJsICkgewoJCQkJLy8gSWYgd2UncmUgcGFzc2VkIGFuIG9iamVjdCwgd2UnbGwgYXNzdW1lIHRoYXQgaXQgaXMKCQkJCS8vIGEgcGFyc2VkIHVybCBvYmplY3QgYW5kIGp1c3QgcmV0dXJuIGl0IGJhY2sgdG8gdGhlIGNhbGxlci4KCQkJCWlmICggJC50eXBlKCB1cmwgKSA9PT0gIm9iamVjdCIgKSB7CgkJCQkJcmV0dXJuIHVybDsKCQkJCX0KCgkJCQl2YXIgbWF0Y2hlcyA9IHBhdGgudXJsUGFyc2VSRS5leGVjKCB1cmwgfHwgIiIgKSB8fCBbXTsKCgkJCQkJLy8gQ3JlYXRlIGFuIG9iamVjdCB0aGF0IGFsbG93cyB0aGUgY2FsbGVyIHRvIGFjY2VzcyB0aGUgc3ViLW1hdGNoZXMKCQkJCQkvLyBieSBuYW1lLiBOb3RlIHRoYXQgSUUgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcgaW5zdGVhZCBvZiB1bmRlZmluZWQsCgkJCQkJLy8gbGlrZSBhbGwgb3RoZXIgYnJvd3NlcnMgZG8sIHNvIHdlIG5vcm1hbGl6ZSBldmVyeXRoaW5nIHNvIGl0cyBjb25zaXN0ZW50CgkJCQkJLy8gbm8gbWF0dGVyIHdoYXQgYnJvd3NlciB3ZSdyZSBydW5uaW5nIG9uLgoJCQkJCXJldHVybiB7CgkJCQkJCWhyZWY6ICAgICAgICAgbWF0Y2hlc1sgIDAgXSB8fCAiIiwKCQkJCQkJaHJlZk5vSGFzaDogICBtYXRjaGVzWyAgMSBdIHx8ICIiLAoJCQkJCQlocmVmTm9TZWFyY2g6IG1hdGNoZXNbICAyIF0gfHwgIiIsCgkJCQkJCWRvbWFpbjogICAgICAgbWF0Y2hlc1sgIDMgXSB8fCAiIiwKCQkJCQkJcHJvdG9jb2w6ICAgICBtYXRjaGVzWyAgNCBdIHx8ICIiLAoJCQkJCQlkb3VibGVTbGFzaDogIG1hdGNoZXNbICA1IF0gfHwgIiIsCgkJCQkJCWF1dGhvcml0eTogICAgbWF0Y2hlc1sgIDYgXSB8fCAiIiwKCQkJCQkJdXNlcm5hbWU6ICAgICBtYXRjaGVzWyAgOCBdIHx8ICIiLAoJCQkJCQlwYXNzd29yZDogICAgIG1hdGNoZXNbICA5IF0gfHwgIiIsCgkJCQkJCWhvc3Q6ICAgICAgICAgbWF0Y2hlc1sgMTAgXSB8fCAiIiwKCQkJCQkJaG9zdG5hbWU6ICAgICBtYXRjaGVzWyAxMSBdIHx8ICIiLAoJCQkJCQlwb3J0OiAgICAgICAgIG1hdGNoZXNbIDEyIF0gfHwgIiIsCgkJCQkJCXBhdGhuYW1lOiAgICAgbWF0Y2hlc1sgMTMgXSB8fCAiIiwKCQkJCQkJZGlyZWN0b3J5OiAgICBtYXRjaGVzWyAxNCBdIHx8ICIiLAoJCQkJCQlmaWxlbmFtZTogICAgIG1hdGNoZXNbIDE1IF0gfHwgIiIsCgkJCQkJCXNlYXJjaDogICAgICAgbWF0Y2hlc1sgMTYgXSB8fCAiIiwKCQkJCQkJaGFzaDogICAgICAgICBtYXRjaGVzWyAxNyBdIHx8ICIiCgkJCQkJfTsKCQkJfSwKCgkJCS8vVHVybiByZWxQYXRoIGludG8gYW4gYXNib2x1dGUgcGF0aC4gYWJzUGF0aCBpcwoJCQkvL2FuIG9wdGlvbmFsIGFic29sdXRlIHBhdGggd2hpY2ggZGVzY3JpYmVzIHdoYXQKCQkJLy9yZWxQYXRoIGlzIHJlbGF0aXZlIHRvLgoJCQltYWtlUGF0aEFic29sdXRlOiBmdW5jdGlvbiggcmVsUGF0aCwgYWJzUGF0aCApIHsKCQkJCWlmICggcmVsUGF0aCAmJiByZWxQYXRoLmNoYXJBdCggMCApID09PSAiLyIgKSB7CgkJCQkJcmV0dXJuIHJlbFBhdGg7CgkJCQl9CgoJCQkJcmVsUGF0aCA9IHJlbFBhdGggfHwgIiI7CgkJCQlhYnNQYXRoID0gYWJzUGF0aCA/IGFic1BhdGgucmVwbGFjZSggL15cL3woXC9bXlwvXSp8W15cL10rKSQvZywgIiIgKSA6ICIiOwoKCQkJCXZhciBhYnNTdGFjayA9IGFic1BhdGggPyBhYnNQYXRoLnNwbGl0KCAiLyIgKSA6IFtdLAoJCQkJCXJlbFN0YWNrID0gcmVsUGF0aC5zcGxpdCggIi8iICk7CgkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCByZWxTdGFjay5sZW5ndGg7IGkrKyApIHsKCQkJCQl2YXIgZCA9IHJlbFN0YWNrWyBpIF07CgkJCQkJc3dpdGNoICggZCApIHsKCQkJCQkJY2FzZSAiLiI6CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAiLi4iOgoJCQkJCQkJaWYgKCBhYnNTdGFjay5sZW5ndGggKSB7CgkJCQkJCQkJYWJzU3RhY2sucG9wKCk7CgkJCQkJCQl9CgkJCQkJCQlicmVhazsKCQkJCQkJZGVmYXVsdDoKCQkJCQkJCWFic1N0YWNrLnB1c2goIGQgKTsKCQkJCQkJCWJyZWFrOwoJCQkJCX0KCQkJCX0KCQkJCXJldHVybiAiLyIgKyBhYnNTdGFjay5qb2luKCAiLyIgKTsKCQkJfSwKCgkJCS8vUmV0dXJucyB0cnVlIGlmIGJvdGggdXJscyBoYXZlIHRoZSBzYW1lIGRvbWFpbi4KCQkJaXNTYW1lRG9tYWluOiBmdW5jdGlvbiggYWJzVXJsMSwgYWJzVXJsMiApIHsKCQkJCXJldHVybiBwYXRoLnBhcnNlVXJsKCBhYnNVcmwxICkuZG9tYWluID09PSBwYXRoLnBhcnNlVXJsKCBhYnNVcmwyICkuZG9tYWluOwoJCQl9LAoKCQkJLy9SZXR1cm5zIHRydWUgZm9yIGFueSByZWxhdGl2ZSB2YXJpYW50LgoJCQlpc1JlbGF0aXZlVXJsOiBmdW5jdGlvbiggdXJsICkgewoJCQkJLy8gQWxsIHJlbGF0aXZlIFVybCB2YXJpYW50cyBoYXZlIG9uZSB0aGluZyBpbiBjb21tb24sIG5vIHByb3RvY29sLgoJCQkJcmV0dXJuIHBhdGgucGFyc2VVcmwoIHVybCApLnByb3RvY29sID09PSAiIjsKCQkJfSwKCgkJCS8vUmV0dXJucyB0cnVlIGZvciBhbiBhYnNvbHV0ZSB1cmwuCgkJCWlzQWJzb2x1dGVVcmw6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQlyZXR1cm4gcGF0aC5wYXJzZVVybCggdXJsICkucHJvdG9jb2wgIT09ICIiOwoJCQl9LAoKCQkJLy9UdXJuIHRoZSBzcGVjaWZpZWQgcmVhbHRpdmUgVVJMIGludG8gYW4gYWJzb2x1dGUgb25lLiBUaGlzIGZ1bmN0aW9uCgkJCS8vY2FuIGhhbmRsZSBhbGwgcmVsYXRpdmUgdmFyaWFudHMgKHByb3RvY29sLCBzaXRlLCBkb2N1bWVudCwgcXVlcnksIGZyYWdtZW50KS4KCQkJbWFrZVVybEFic29sdXRlOiBmdW5jdGlvbiggcmVsVXJsLCBhYnNVcmwgKSB7CgkJCQlpZiAoICFwYXRoLmlzUmVsYXRpdmVVcmwoIHJlbFVybCApICkgewoJCQkJCXJldHVybiByZWxVcmw7CgkJCQl9CgoJCQkJaWYgKCBhYnNVcmwgPT09IHVuZGVmaW5lZCApIHsKCQkJCQlhYnNVcmwgPSBkb2N1bWVudEJhc2U7CgkJCQl9CgoJCQkJdmFyIHJlbE9iaiA9IHBhdGgucGFyc2VVcmwoIHJlbFVybCApLAoJCQkJCWFic09iaiA9IHBhdGgucGFyc2VVcmwoIGFic1VybCApLAoJCQkJCXByb3RvY29sID0gcmVsT2JqLnByb3RvY29sIHx8IGFic09iai5wcm90b2NvbCwKCQkJCQlkb3VibGVTbGFzaCA9IHJlbE9iai5wcm90b2NvbCA/IHJlbE9iai5kb3VibGVTbGFzaCA6ICggcmVsT2JqLmRvdWJsZVNsYXNoIHx8IGFic09iai5kb3VibGVTbGFzaCApLAoJCQkJCWF1dGhvcml0eSA9IHJlbE9iai5hdXRob3JpdHkgfHwgYWJzT2JqLmF1dGhvcml0eSwKCQkJCQloYXNQYXRoID0gcmVsT2JqLnBhdGhuYW1lICE9PSAiIiwKCQkJCQlwYXRobmFtZSA9IHBhdGgubWFrZVBhdGhBYnNvbHV0ZSggcmVsT2JqLnBhdGhuYW1lIHx8IGFic09iai5maWxlbmFtZSwgYWJzT2JqLnBhdGhuYW1lICksCgkJCQkJc2VhcmNoID0gcmVsT2JqLnNlYXJjaCB8fCAoICFoYXNQYXRoICYmIGFic09iai5zZWFyY2ggKSB8fCAiIiwKCQkJCQloYXNoID0gcmVsT2JqLmhhc2g7CgoJCQkJcmV0dXJuIHByb3RvY29sICsgZG91YmxlU2xhc2ggKyBhdXRob3JpdHkgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7CgkJCX0sCgoJCQkvL0FkZCBzZWFyY2ggKGFrYSBxdWVyeSkgcGFyYW1zIHRvIHRoZSBzcGVjaWZpZWQgdXJsLgoJCQlhZGRTZWFyY2hQYXJhbXM6IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcyApIHsKCQkJCXZhciB1ID0gcGF0aC5wYXJzZVVybCggdXJsICksCgkJCQkJcCA9ICggdHlwZW9mIHBhcmFtcyA9PT0gIm9iamVjdCIgKSA/ICQucGFyYW0oIHBhcmFtcyApIDogcGFyYW1zLAoJCQkJCXMgPSB1LnNlYXJjaCB8fCAiPyI7CgkJCQlyZXR1cm4gdS5ocmVmTm9TZWFyY2ggKyBzICsgKCBzLmNoYXJBdCggcy5sZW5ndGggLSAxICkgIT09ICI/IiA/ICImIiA6ICIiICkgKyBwICsgKCB1Lmhhc2ggfHwgIiIgKTsKCQkJfSwKCgkJCWNvbnZlcnRVcmxUb0RhdGFVcmw6IGZ1bmN0aW9uKCBhYnNVcmwgKSB7CgkJCQl2YXIgdSA9IHBhdGgucGFyc2VVcmwoIGFic1VybCApOwoJCQkJaWYgKCBwYXRoLmlzRW1iZWRkZWRQYWdlKCB1ICkgKSB7CgkJCQkJLy8gRm9yIGVtYmVkZGVkIHBhZ2VzLCByZW1vdmUgdGhlIGRpYWxvZyBoYXNoIGtleSBhcyBpbiBnZXRGaWxlUGF0aCgpLAoJCQkJCS8vIG90aGVyd2lzZSB0aGUgRGF0YSBVcmwgd29uJ3QgbWF0Y2ggdGhlIGlkIG9mIHRoZSBlbWJlZGRlZCBQYWdlLgoJCQkJCXJldHVybiB1Lmhhc2guc3BsaXQoIGRpYWxvZ0hhc2hLZXkgKVswXS5yZXBsYWNlKCAvXiMvLCAiIiApOwoJCQkJfSBlbHNlIGlmICggcGF0aC5pc1NhbWVEb21haW4oIHUsIGRvY3VtZW50QmFzZSApICkgewoJCQkJCXJldHVybiB1LmhyZWZOb0hhc2gucmVwbGFjZSggZG9jdW1lbnRCYXNlLmRvbWFpbiwgIiIgKS5zcGxpdCggZGlhbG9nSGFzaEtleSApWzBdOwoJCQkJfQoKCQkJCXJldHVybiB3aW5kb3cuZGVjb2RlVVJJQ29tcG9uZW50KGFic1VybCk7CgkJCX0sCgoJCQkvL2dldCBwYXRoIGZyb20gY3VycmVudCBoYXNoLCBvciBmcm9tIGEgZmlsZSBwYXRoCgkJCWdldDogZnVuY3Rpb24oIG5ld1BhdGggKSB7CgkJCQlpZiAoIG5ld1BhdGggPT09IHVuZGVmaW5lZCApIHsKCQkJCQluZXdQYXRoID0gcGF0aC5wYXJzZUxvY2F0aW9uKCkuaGFzaDsKCQkJCX0KCQkJCXJldHVybiBwYXRoLnN0cmlwSGFzaCggbmV3UGF0aCApLnJlcGxhY2UoIC9bXlwvXSpcLlteXC8qXSskLywgJycgKTsKCQkJfSwKCgkJCS8vcmV0dXJuIHRoZSBzdWJzdHJpbmcgb2YgYSBmaWxlcGF0aCBiZWZvcmUgdGhlIHN1Yi1wYWdlIGtleSwgZm9yIG1ha2luZyBhIHNlcnZlciByZXF1ZXN0CgkJCWdldEZpbGVQYXRoOiBmdW5jdGlvbiggcGF0aCApIHsKCQkJCXZhciBzcGxpdGtleSA9ICcmJyArICQubW9iaWxlLnN1YlBhZ2VVcmxLZXk7CgkJCQlyZXR1cm4gcGF0aCAmJiBwYXRoLnNwbGl0KCBzcGxpdGtleSApWzBdLnNwbGl0KCBkaWFsb2dIYXNoS2V5IClbMF07CgkJCX0sCgoJCQkvL3NldCBsb2NhdGlvbiBoYXNoIHRvIHBhdGgKCQkJc2V0OiBmdW5jdGlvbiggcGF0aCApIHsKCQkJCWxvY2F0aW9uLmhhc2ggPSBwYXRoOwoJCQl9LAoKCQkJLy90ZXN0IGlmIGEgZ2l2ZW4gdXJsIChzdHJpbmcpIGlzIGEgcGF0aAoJCQkvL05PVEUgbWlnaHQgYmUgZXhjZXB0aW9uYWxseSBuYWl2ZQoJCQlpc1BhdGg6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQlyZXR1cm4gKCAvXC8vICkudGVzdCggdXJsICk7CgkJCX0sCgoJCQkvL3JldHVybiBhIHVybCBwYXRoIHdpdGggdGhlIHdpbmRvdydzIGxvY2F0aW9uIHByb3RvY29sL2hvc3RuYW1lL3BhdGhuYW1lIHJlbW92ZWQKCQkJY2xlYW46IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQlyZXR1cm4gdXJsLnJlcGxhY2UoIGRvY3VtZW50QmFzZS5kb21haW4sICIiICk7CgkJCX0sCgoJCQkvL2p1c3QgcmV0dXJuIHRoZSB1cmwgd2l0aG91dCBhbiBpbml0aWFsICMKCQkJc3RyaXBIYXNoOiBmdW5jdGlvbiggdXJsICkgewoJCQkJcmV0dXJuIHVybC5yZXBsYWNlKCAvXiMvLCAiIiApOwoJCQl9LAoKCQkJLy9yZW1vdmUgdGhlIHByZWNlZGluZyBoYXNoLCBhbnkgcXVlcnkgcGFyYW1zLCBhbmQgZGlhbG9nIG5vdGF0aW9ucwoJCQljbGVhbkhhc2g6IGZ1bmN0aW9uKCBoYXNoICkgewoJCQkJcmV0dXJuIHBhdGguc3RyaXBIYXNoKCBoYXNoLnJlcGxhY2UoIC9cPy4qJC8sICIiICkucmVwbGFjZSggZGlhbG9nSGFzaEtleSwgIiIgKSApOwoJCQl9LAoKCQkJaXNIYXNoVmFsaWQ6IGZ1bmN0aW9uKCBoYXNoICkgewoJCQkJcmV0dXJuICggL14jW14jXSskLyApLnRlc3QoIGhhc2ggKTsKCQkJfSwKCgkJCS8vY2hlY2sgd2hldGhlciBhIHVybCBpcyByZWZlcmVuY2luZyB0aGUgc2FtZSBkb21haW4sIG9yIGFuIGV4dGVybmFsIGRvbWFpbiBvciBkaWZmZXJlbnQgcHJvdG9jb2wKCQkJLy9jb3VsZCBiZSBtYWlsdG8sIGV0YwoJCQlpc0V4dGVybmFsOiBmdW5jdGlvbiggdXJsICkgewoJCQkJdmFyIHUgPSBwYXRoLnBhcnNlVXJsKCB1cmwgKTsKCQkJCXJldHVybiB1LnByb3RvY29sICYmIHUuZG9tYWluICE9PSBkb2N1bWVudFVybC5kb21haW4gPyB0cnVlIDogZmFsc2U7CgkJCX0sCgoJCQloYXNQcm90b2NvbDogZnVuY3Rpb24oIHVybCApIHsKCQkJCXJldHVybiAoIC9eKDo/XHcrOikvICkudGVzdCggdXJsICk7CgkJCX0sCgoJCQkvL2NoZWNrIGlmIHRoZSBzcGVjaWZpZWQgdXJsIHJlZmVycyB0byB0aGUgZmlyc3QgcGFnZSBpbiB0aGUgbWFpbiBhcHBsaWNhdGlvbiBkb2N1bWVudC4KCQkJaXNGaXJzdFBhZ2VVcmw6IGZ1bmN0aW9uKCB1cmwgKSB7CgkJCQkvLyBXZSBvbmx5IGRlYWwgd2l0aCBhYnNvbHV0ZSBwYXRocy4KCQkJCXZhciB1ID0gcGF0aC5wYXJzZVVybCggcGF0aC5tYWtlVXJsQWJzb2x1dGUoIHVybCwgZG9jdW1lbnRCYXNlICkgKSwKCgkJCQkJLy8gRG9lcyB0aGUgdXJsIGhhdmUgdGhlIHNhbWUgcGF0aCBhcyB0aGUgZG9jdW1lbnQ/CgkJCQkJc2FtZVBhdGggPSB1LmhyZWZOb0hhc2ggPT09IGRvY3VtZW50VXJsLmhyZWZOb0hhc2ggfHwgKCBkb2N1bWVudEJhc2VEaWZmZXJzICYmIHUuaHJlZk5vSGFzaCA9PT0gZG9jdW1lbnRCYXNlLmhyZWZOb0hhc2ggKSwKCgkJCQkJLy8gR2V0IHRoZSBmaXJzdCBwYWdlIGVsZW1lbnQuCgkJCQkJZnAgPSAkLm1vYmlsZS5maXJzdFBhZ2UsCgoJCQkJCS8vIEdldCB0aGUgaWQgb2YgdGhlIGZpcnN0IHBhZ2UgZWxlbWVudCBpZiBpdCBoYXMgb25lLgoJCQkJCWZwSWQgPSBmcCAmJiBmcFswXSA/IGZwWzBdLmlkIDogdW5kZWZpbmVkOwoKCQkJCQkvLyBUaGUgdXJsIHJlZmVycyB0byB0aGUgZmlyc3QgcGFnZSBpZiB0aGUgcGF0aCBtYXRjaGVzIHRoZSBkb2N1bWVudCBhbmQKCQkJCQkvLyBpdCBlaXRoZXIgaGFzIG5vIGhhc2ggdmFsdWUsIG9yIHRoZSBoYXNoIGlzIGV4YWN0bHkgZXF1YWwgdG8gdGhlIGlkIG9mIHRoZQoJCQkJCS8vIGZpcnN0IHBhZ2UgZWxlbWVudC4KCQkJCQlyZXR1cm4gc2FtZVBhdGggJiYgKCAhdS5oYXNoIHx8IHUuaGFzaCA9PT0gIiMiIHx8ICggZnBJZCAmJiB1Lmhhc2gucmVwbGFjZSggL14jLywgIiIgKSA9PT0gZnBJZCApICk7CgkJCX0sCgoJCQlpc0VtYmVkZGVkUGFnZTogZnVuY3Rpb24oIHVybCApIHsKCQkJCXZhciB1ID0gcGF0aC5wYXJzZVVybCggdXJsICk7CgoJCQkJLy9pZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZSwgdGhlbiB3ZSBuZWVkIHRvIGNvbXBhcmUgdGhlIHVybCBhZ2FpbnN0CgkJCQkvL2JvdGggdGhlIGRvY3VtZW50VXJsIGFuZCB0aGUgZG9jdW1lbnRCYXNlLiBUaGUgbWFpbiByZWFzb24gZm9yIHRoaXMKCQkJCS8vaXMgdGhhdCBsaW5rcyBlbWJlZGRlZCB3aXRoaW4gZXh0ZXJuYWwgZG9jdW1lbnRzIHdpbGwgcmVmZXIgdG8gdGhlCgkJCQkvL2FwcGxpY2F0aW9uIGRvY3VtZW50LCB3aGVyZWFzIGxpbmtzIGVtYmVkZGVkIHdpdGhpbiB0aGUgYXBwbGljYXRpb24KCQkJCS8vZG9jdW1lbnQgd2lsbCBiZSByZXNvbHZlZCBhZ2FpbnN0IHRoZSBkb2N1bWVudCBiYXNlLgoJCQkJaWYgKCB1LnByb3RvY29sICE9PSAiIiApIHsKCQkJCQlyZXR1cm4gKCB1Lmhhc2ggJiYgKCB1LmhyZWZOb0hhc2ggPT09IGRvY3VtZW50VXJsLmhyZWZOb0hhc2ggfHwgKCBkb2N1bWVudEJhc2VEaWZmZXJzICYmIHUuaHJlZk5vSGFzaCA9PT0gZG9jdW1lbnRCYXNlLmhyZWZOb0hhc2ggKSApICk7CgkJCQl9CgkJCQlyZXR1cm4gKCAvXiMvICkudGVzdCggdS5ocmVmICk7CgkJCX0sCgoKCQkJLy8gU29tZSBlbWJlZGRlZCBicm93c2VycywgbGlrZSB0aGUgd2ViIHZpZXcgaW4gUGhvbmUgR2FwLCBhbGxvdyBjcm9zcy1kb21haW4gWEhSCgkJCS8vIHJlcXVlc3RzIGlmIHRoZSBkb2N1bWVudCBkb2luZyB0aGUgcmVxdWVzdCB3YXMgbG9hZGVkIHZpYSB0aGUgZmlsZTovLyBwcm90b2NvbC4KCQkJLy8gVGhpcyBpcyB1c3VhbGx5IHRvIGFsbG93IHRoZSBhcHBsaWNhdGlvbiB0byAicGhvbmUgaG9tZSIgYW5kIGZldGNoIGFwcCBzcGVjaWZpYwoJCQkvLyBkYXRhLiBXZSBub3JtYWxseSBsZXQgdGhlIGJyb3dzZXIgaGFuZGxlIGV4dGVybmFsL2Nyb3NzLWRvbWFpbiB1cmxzLCBidXQgaWYgdGhlCgkJCS8vIGFsbG93Q3Jvc3NEb21haW5QYWdlcyBvcHRpb24gaXMgdHJ1ZSwgd2Ugd2lsbCBhbGxvdyBjcm9zcy1kb21haW4gaHR0cC9odHRwcwoJCQkvLyByZXF1ZXN0cyB0byBnbyB0aHJvdWdoIG91ciBwYWdlIGxvYWRpbmcgbG9naWMuCgkJCWlzUGVybWl0dGVkQ3Jvc3NEb21haW5SZXF1ZXN0OiBmdW5jdGlvbiggZG9jVXJsLCByZXFVcmwgKSB7CgkJCQlyZXR1cm4gJC5tb2JpbGUuYWxsb3dDcm9zc0RvbWFpblBhZ2VzICYmCgkJCQkJZG9jVXJsLnByb3RvY29sID09PSAiZmlsZToiICYmCgkJCQkJcmVxVXJsLnNlYXJjaCggL15odHRwcz86LyApICE9PSAtMTsKCQkJfQoJCX0sCgoJCS8vd2lsbCBiZSBkZWZpbmVkIHdoZW4gYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGdpdmVuIGFuIGFjdGl2ZSBjbGFzcwoJCSRhY3RpdmVDbGlja2VkTGluayA9IG51bGwsCgoJCS8vdXJsSGlzdG9yeSBpcyBwdXJlbHkgaGVyZSB0byBtYWtlIGd1ZXNzZXMgYXQgd2hldGhlciB0aGUgYmFjayBvciBmb3J3YXJkIGJ1dHRvbiB3YXMgY2xpY2tlZAoJCS8vYW5kIHByb3ZpZGUgYW4gYXBwcm9wcmlhdGUgdHJhbnNpdGlvbgoJCXVybEhpc3RvcnkgPSB7CgkJCS8vIEFycmF5IG9mIHBhZ2VzIHRoYXQgYXJlIHZpc2l0ZWQgZHVyaW5nIGEgc2luZ2xlIHBhZ2UgbG9hZC4KCQkJLy8gRWFjaCBoYXMgYSB1cmwgYW5kIG9wdGlvbmFsIHRyYW5zaXRpb24sIHRpdGxlLCBhbmQgcGFnZVVybCAod2hpY2ggcmVwcmVzZW50cyB0aGUgZmlsZSBwYXRoLCBpbiBjYXNlcyB3aGVyZSBVUkwgaXMgb2JzY3VyZWQsIHN1Y2ggYXMgZGlhbG9ncykKCQkJc3RhY2s6IFtdLAoKCQkJLy9tYWludGFpbiBhbiBpbmRleCBudW1iZXIgZm9yIHRoZSBhY3RpdmUgcGFnZSBpbiB0aGUgc3RhY2sKCQkJYWN0aXZlSW5kZXg6IDAsCgoJCQkvL2dldCBhY3RpdmUKCQkJZ2V0QWN0aXZlOiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiB1cmxIaXN0b3J5LnN0YWNrWyB1cmxIaXN0b3J5LmFjdGl2ZUluZGV4IF07CgkJCX0sCgoJCQlnZXRQcmV2OiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiB1cmxIaXN0b3J5LnN0YWNrWyB1cmxIaXN0b3J5LmFjdGl2ZUluZGV4IC0gMSBdOwoJCQl9LAoKCQkJZ2V0TmV4dDogZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gdXJsSGlzdG9yeS5zdGFja1sgdXJsSGlzdG9yeS5hY3RpdmVJbmRleCArIDEgXTsKCQkJfSwKCgkJCS8vIGFkZE5ldyBpcyB1c2VkIHdoZW5ldmVyIGEgbmV3IHBhZ2UgaXMgYWRkZWQKCQkJYWRkTmV3OiBmdW5jdGlvbiggdXJsLCB0cmFuc2l0aW9uLCB0aXRsZSwgcGFnZVVybCwgcm9sZSApIHsKCQkJCS8vaWYgdGhlcmUncyBmb3J3YXJkIGhpc3RvcnksIHdpcGUgaXQKCQkJCWlmICggdXJsSGlzdG9yeS5nZXROZXh0KCkgKSB7CgkJCQkJdXJsSGlzdG9yeS5jbGVhckZvcndhcmQoKTsKCQkJCX0KCgkJCQl1cmxIaXN0b3J5LnN0YWNrLnB1c2goIHt1cmwgOiB1cmwsIHRyYW5zaXRpb246IHRyYW5zaXRpb24sIHRpdGxlOiB0aXRsZSwgcGFnZVVybDogcGFnZVVybCwgcm9sZTogcm9sZSB9ICk7CgoJCQkJdXJsSGlzdG9yeS5hY3RpdmVJbmRleCA9IHVybEhpc3Rvcnkuc3RhY2subGVuZ3RoIC0gMTsKCQkJfSwKCgkJCS8vd2lwZSB1cmxzIGFoZWFkIG9mIGFjdGl2ZSBpbmRleAoJCQljbGVhckZvcndhcmQ6IGZ1bmN0aW9uKCkgewoJCQkJdXJsSGlzdG9yeS5zdGFjayA9IHVybEhpc3Rvcnkuc3RhY2suc2xpY2UoIDAsIHVybEhpc3RvcnkuYWN0aXZlSW5kZXggKyAxICk7CgkJCX0sCgoJCQlkaXJlY3RIYXNoQ2hhbmdlOiBmdW5jdGlvbiggb3B0cyApIHsKCQkJCXZhciBiYWNrICwgZm9yd2FyZCwgbmV3QWN0aXZlSW5kZXgsIHByZXYgPSB0aGlzLmdldEFjdGl2ZSgpOwoKCQkJCS8vIGNoZWNrIGlmIHVybCBpcyBpbiBoaXN0b3J5IGFuZCBpZiBpdCdzIGFoZWFkIG9yIGJlaGluZCBjdXJyZW50IHBhZ2UKCQkJCSQuZWFjaCggdXJsSGlzdG9yeS5zdGFjaywgZnVuY3Rpb24oIGksIGhpc3RvcnlFbnRyeSApIHsKCgkJCQkJLy9pZiB0aGUgdXJsIGlzIGluIHRoZSBzdGFjaywgaXQncyBhIGZvcndhcmQgb3IgYSBiYWNrCgkJCQkJaWYgKCBkZWNvZGVVUklDb21wb25lbnQoIG9wdHMuY3VycmVudFVybCApID09PSBkZWNvZGVVUklDb21wb25lbnQoIGhpc3RvcnlFbnRyeS51cmwgKSApIHsKCQkJCQkJLy9kZWZpbmUgYmFjayBhbmQgZm9yd2FyZCBieSB3aGV0aGVyIHVybCBpcyBvbGRlciBvciBuZXdlciB0aGFuIGN1cnJlbnQgcGFnZQoJCQkJCQliYWNrID0gaSA8IHVybEhpc3RvcnkuYWN0aXZlSW5kZXg7CgkJCQkJCWZvcndhcmQgPSAhYmFjazsKCQkJCQkJbmV3QWN0aXZlSW5kZXggPSBpOwoJCQkJCX0KCQkJCX0pOwoKCQkJCS8vIHNhdmUgbmV3IHBhZ2UgaW5kZXgsIG51bGwgY2hlY2sgdG8gcHJldmVudCBmYWxzZXkgMCByZXN1bHQKCQkJCXRoaXMuYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleCAhPT0gdW5kZWZpbmVkID8gbmV3QWN0aXZlSW5kZXggOiB0aGlzLmFjdGl2ZUluZGV4OwoKCQkJCWlmICggYmFjayApIHsKCQkJCQkoIG9wdHMuZWl0aGVyIHx8IG9wdHMuaXNCYWNrICkoIHRydWUgKTsKCQkJCX0gZWxzZSBpZiAoIGZvcndhcmQgKSB7CgkJCQkJKCBvcHRzLmVpdGhlciB8fCBvcHRzLmlzRm9yd2FyZCApKCBmYWxzZSApOwoJCQkJfQoJCQl9LAoKCQkJLy9kaXNhYmxlIGhhc2hjaGFuZ2UgZXZlbnQgbGlzdGVuZXIgaW50ZXJuYWxseSB0byBpZ25vcmUgb25lIGNoYW5nZQoJCQkvL3RvZ2dsZWQgaW50ZXJuYWxseSB3aGVuIGxvY2F0aW9uLmhhc2ggaXMgdXBkYXRlZCB0byBtYXRjaCB0aGUgdXJsIG9mIGEgc3VjY2Vzc2Z1bCBwYWdlIGxvYWQKCQkJaWdub3JlTmV4dEhhc2hDaGFuZ2U6IGZhbHNlCgkJfSwKCgkJLy9kZWZpbmUgZmlyc3Qgc2VsZWN0b3IgdG8gcmVjZWl2ZSBmb2N1cyB3aGVuIGEgcGFnZSBpcyBzaG93bgoJCWZvY3VzYWJsZSA9ICJbdGFiaW5kZXhdLGEsYnV0dG9uOnZpc2libGUsc2VsZWN0OnZpc2libGUsaW5wdXQiLAoKCQkvL3F1ZXVlIHRvIGhvbGQgc2ltdWx0YW5pb3VzIHBhZ2UgdHJhbnNpdGlvbnMKCQlwYWdlVHJhbnNpdGlvblF1ZXVlID0gW10sCgoJCS8vaW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHBhZ2UgaXMgaW4gcHJvY2VzcyBvZiB0cmFuc2l0aW9uaW5nCgkJaXNQYWdlVHJhbnNpdGlvbmluZyA9IGZhbHNlLAoKCQkvL25vbnNlbnNlIGhhc2ggY2hhbmdlIGtleSBmb3IgZGlhbG9ncywgc28gdGhleSBjcmVhdGUgYSBoaXN0b3J5IGVudHJ5CgkJZGlhbG9nSGFzaEtleSA9ICImdWktc3RhdGU9ZGlhbG9nIiwKCgkJLy9leGlzdGluZyBiYXNlIHRhZz8KCQkkYmFzZSA9ICRoZWFkLmNoaWxkcmVuKCAiYmFzZSIgKSwKCgkJLy90dWNrIGF3YXkgdGhlIG9yaWdpbmFsIGRvY3VtZW50IFVSTCBtaW51cyBhbnkgZnJhZ21lbnQuCgkJZG9jdW1lbnRVcmwgPSBwYXRoLnBhcnNlTG9jYXRpb24oKSwKCgkJLy9pZiB0aGUgZG9jdW1lbnQgaGFzIGFuIGVtYmVkZGVkIGJhc2UgdGFnLCBkb2N1bWVudEJhc2UgaXMgc2V0IHRvIGl0cwoJCS8vaW5pdGlhbCB2YWx1ZS4gSWYgYSBiYXNlIHRhZyBkb2VzIG5vdCBleGlzdCwgdGhlbiB3ZSBkZWZhdWx0IHRvIHRoZSBkb2N1bWVudFVybC4KCQlkb2N1bWVudEJhc2UgPSAkYmFzZS5sZW5ndGggPyBwYXRoLnBhcnNlVXJsKCBwYXRoLm1ha2VVcmxBYnNvbHV0ZSggJGJhc2UuYXR0ciggImhyZWYiICksIGRvY3VtZW50VXJsLmhyZWYgKSApIDogZG9jdW1lbnRVcmwsCgoJCS8vY2FjaGUgdGhlIGNvbXBhcmlzb24gb25jZS4KCQlkb2N1bWVudEJhc2VEaWZmZXJzID0gKCBkb2N1bWVudFVybC5ocmVmTm9IYXNoICE9PSBkb2N1bWVudEJhc2UuaHJlZk5vSGFzaCApLAoKCQlnZXRTY3JlZW5IZWlnaHQgPSAkLm1vYmlsZS5nZXRTY3JlZW5IZWlnaHQ7CgoJCS8vYmFzZSBlbGVtZW50IG1hbmFnZW1lbnQsIGRlZmluZWQgZGVwZW5kaW5nIG9uIGR5bmFtaWMgYmFzZSB0YWcgc3VwcG9ydAoJCXZhciBiYXNlID0gJC5zdXBwb3J0LmR5bmFtaWNCYXNlVGFnID8gewoKCQkJLy9kZWZpbmUgYmFzZSBlbGVtZW50LCBmb3IgdXNlIGluIHJvdXRpbmcgYXNzZXQgdXJscyB0aGF0IGFyZSByZWZlcmVuY2VkIGluIEFqYXgtcmVxdWVzdGVkIG1hcmt1cAoJCQllbGVtZW50OiAoICRiYXNlLmxlbmd0aCA/ICRiYXNlIDogJCggIjxiYXNlPiIsIHsgaHJlZjogZG9jdW1lbnRCYXNlLmhyZWZOb0hhc2ggfSApLnByZXBlbmRUbyggJGhlYWQgKSApLAoKCQkJLy9zZXQgdGhlIGdlbmVyYXRlZCBCQVNFIGVsZW1lbnQncyBocmVmIGF0dHJpYnV0ZSB0byBhIG5ldyBwYWdlJ3MgYmFzZSBwYXRoCgkJCXNldDogZnVuY3Rpb24oIGhyZWYgKSB7CgkJCQliYXNlLmVsZW1lbnQuYXR0ciggImhyZWYiLCBwYXRoLm1ha2VVcmxBYnNvbHV0ZSggaHJlZiwgZG9jdW1lbnRCYXNlICkgKTsKCQkJfSwKCgkJCS8vc2V0IHRoZSBnZW5lcmF0ZWQgQkFTRSBlbGVtZW50J3MgaHJlZiBhdHRyaWJ1dGUgdG8gYSBuZXcgcGFnZSdzIGJhc2UgcGF0aAoJCQlyZXNldDogZnVuY3Rpb24oKSB7CgkJCQliYXNlLmVsZW1lbnQuYXR0ciggImhyZWYiLCBkb2N1bWVudEJhc2UuaHJlZk5vSGFzaCApOwoJCQl9CgoJCX0gOiB1bmRlZmluZWQ7CgoJLyogaW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlvbnMgKi8KCgkvLyBOT1RFIElzc3VlICM0OTUwIEFuZHJvaWQgcGhvbmVnYXAgZG9lc24ndCBuYXZpZ2F0ZSBiYWNrIHByb3Blcmx5CgkvLyAgICAgIHdoZW4gYSBmdWxsIHBhZ2UgcmVmcmVzaCBoYXMgdGFrZW4gcGxhY2UuIEl0IGFwcGVhcnMgdGhhdCBoYXNoY2hhbmdlCgkvLyAgICAgIGFuZCByZXBsYWNlc3RhdGUgaGlzdG9yeSBhbHRlcmF0aW9ucyB3b3JrIGZpbmUgYnV0IHdlIG5lZWQgdG8gc3VwcG9ydAoJLy8gICAgICBib3RoIGZvcm1zIG9mIGhpc3RvcnkgdHJhdmVyc2FsIGluIG91ciBjb2RlIHRoYXQgdXNlcyBiYWNrd2FyZCBoaXN0b3J5CgkvLyAgICAgIG1vdmVtZW50CgkkLm1vYmlsZS5iYWNrID0gZnVuY3Rpb24oKSB7CgkJdmFyIG5hdiA9IHdpbmRvdy5uYXZpZ2F0b3I7CgoJCS8vIGlmIHRoZSBzZXR0aW5nIGlzIG9uIGFuZCB0aGUgbmF2aWdhdG9yIG9iamVjdCBpcwoJCS8vIGF2YWlsYWJsZSB1c2UgdGhlIHBob25lZ2FwIG5hdmlnYXRpb24gY2FwYWJpbGl0eQoJCWlmKCB0aGlzLnBob25lZ2FwTmF2aWdhdGlvbkVuYWJsZWQgJiYKCQkJbmF2ICYmCgkJCW5hdi5hcHAgJiYKCQkJbmF2LmFwcC5iYWNrSGlzdG9yeSApewoJCQluYXYuYXBwLmJhY2tIaXN0b3J5KCk7CgkJfSBlbHNlIHsKCQkJd2luZG93Lmhpc3RvcnkuYmFjaygpOwoJCX0KCX07CgoJLy9kaXJlY3QgZm9jdXMgdG8gdGhlIHBhZ2UgdGl0bGUsIG9yIG90aGVyd2lzZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudAoJJC5tb2JpbGUuZm9jdXNQYWdlID0gZnVuY3Rpb24gKCBwYWdlICkgewoJCXZhciBhdXRvZm9jdXMgPSBwYWdlLmZpbmQoICJbYXV0b2ZvY3VzXSIgKSwKCQkJcGFnZVRpdGxlID0gcGFnZS5maW5kKCAiLnVpLXRpdGxlOmVxKDApIiApOwoKCQlpZiAoIGF1dG9mb2N1cy5sZW5ndGggKSB7CgkJCWF1dG9mb2N1cy5mb2N1cygpOwoJCQlyZXR1cm47CgkJfQoKCQlpZiAoIHBhZ2VUaXRsZS5sZW5ndGggKSB7CgkJCXBhZ2VUaXRsZS5mb2N1cygpOwoJCX0gZWxzZXsKCQkJcGFnZS5mb2N1cygpOwoJCX0KCX07CgoJLy9yZW1vdmUgYWN0aXZlIGNsYXNzZXMgYWZ0ZXIgcGFnZSB0cmFuc2l0aW9uIG9yIGVycm9yCglmdW5jdGlvbiByZW1vdmVBY3RpdmVMaW5rQ2xhc3MoIGZvcmNlUmVtb3ZhbCApIHsKCQlpZiAoICEhJGFjdGl2ZUNsaWNrZWRMaW5rICYmICggISRhY3RpdmVDbGlja2VkTGluay5jbG9zZXN0KCAiLiIgKyAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKS5sZW5ndGggfHwgZm9yY2VSZW1vdmFsICkgKSB7CgkJCSRhY3RpdmVDbGlja2VkTGluay5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQl9CgkJJGFjdGl2ZUNsaWNrZWRMaW5rID0gbnVsbDsKCX0KCglmdW5jdGlvbiByZWxlYXNlUGFnZVRyYW5zaXRpb25Mb2NrKCkgewoJCWlzUGFnZVRyYW5zaXRpb25pbmcgPSBmYWxzZTsKCQlpZiAoIHBhZ2VUcmFuc2l0aW9uUXVldWUubGVuZ3RoID4gMCApIHsKCQkJJC5tb2JpbGUuY2hhbmdlUGFnZS5hcHBseSggbnVsbCwgcGFnZVRyYW5zaXRpb25RdWV1ZS5wb3AoKSApOwoJCX0KCX0KCgkvLyBTYXZlIHRoZSBsYXN0IHNjcm9sbCBkaXN0YW5jZSBwZXIgcGFnZSwgYmVmb3JlIGl0IGlzIGhpZGRlbgoJdmFyIHNldExhc3RTY3JvbGxFbmFibGVkID0gdHJ1ZSwKCQlzZXRMYXN0U2Nyb2xsLCBkZWxheWVkU2V0TGFzdFNjcm9sbDsKCglzZXRMYXN0U2Nyb2xsID0gZnVuY3Rpb24oKSB7CgkJLy8gdGhpcyBiYXJyaWVyIHByZXZlbnRzIHNldHRpbmcgdGhlIHNjcm9sbCB2YWx1ZSBiYXNlZCBvbiB0aGUgYnJvd3NlcgoJCS8vIHNjcm9sbGluZyB0aGUgd2luZG93IGJhc2VkIG9uIGEgaGFzaGNoYW5nZQoJCWlmICggIXNldExhc3RTY3JvbGxFbmFibGVkICkgewoJCQlyZXR1cm47CgkJfQoKCQl2YXIgYWN0aXZlID0gJC5tb2JpbGUudXJsSGlzdG9yeS5nZXRBY3RpdmUoKTsKCgkJaWYgKCBhY3RpdmUgKSB7CgkJCXZhciBsYXN0U2Nyb2xsID0gJHdpbmRvdy5zY3JvbGxUb3AoKTsKCgkJCS8vIFNldCBhY3RpdmUgcGFnZSdzIGxhc3RTY3JvbGwgcHJvcC4KCQkJLy8gSWYgdGhlIGxvY2F0aW9uIHdlJ3JlIHNjcm9sbGluZyB0byBpcyBsZXNzIHRoYW4gbWluU2Nyb2xsQmFjaywgbGV0IGl0IGdvLgoJCQlhY3RpdmUubGFzdFNjcm9sbCA9IGxhc3RTY3JvbGwgPCAkLm1vYmlsZS5taW5TY3JvbGxCYWNrID8gJC5tb2JpbGUuZGVmYXVsdEhvbWVTY3JvbGwgOiBsYXN0U2Nyb2xsOwoJCX0KCX07CgoJLy8gYmluZCB0byBzY3JvbGxzdG9wIHRvIGdhdGhlciBzY3JvbGwgcG9zaXRpb24uIFRoZSBkZWxheSBhbGxvd3MgZm9yIHRoZSBoYXNoY2hhbmdlCgkvLyBldmVudCB0byBmaXJlIGFuZCBkaXNhYmxlIHNjcm9sbCByZWNvcmRpbmcgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlIGJyb3dzZXIgc2Nyb2xscwoJLy8gdG8gdGhlIGhhc2ggdGFyZ2V0cyBsb2NhdGlvbiAoc29tZXRpbWVzIHRoZSB0b3Agb2YgdGhlIHBhZ2UpLiBvbmNlIHBhZ2VjaGFuZ2UgZmlyZXMKCS8vIGdldExhc3RTY3JvbGwgaXMgYWdhaW4gcGVybWl0dGVkIHRvIG9wZXJhdGUKCWRlbGF5ZWRTZXRMYXN0U2Nyb2xsID0gZnVuY3Rpb24oKSB7CgkJc2V0VGltZW91dCggc2V0TGFzdFNjcm9sbCwgMTAwICk7Cgl9OwoKCS8vIGRpc2FibGUgYW4gc2Nyb2xsIHNldHRpbmcgd2hlbiBhIGhhc2hjaGFuZ2UgaGFzIGJlZW4gZmlyZWQsIHRoaXMgb25seSB3b3JrcwoJLy8gYmVjYXVzZSB0aGUgcmVjb3JkaW5nIG9mIHRoZSBzY3JvbGwgcG9zaXRpb24gaXMgZGVsYXllZCBmb3IgMTAwbXMgYWZ0ZXIKCS8vIHRoZSBicm93c2VyIG1pZ2h0IGhhdmUgY2hhbmdlZCB0aGUgcG9zaXRpb24gYmVjYXVzZSBvZiB0aGUgaGFzaGNoYW5nZQoJJHdpbmRvdy5iaW5kKCAkLnN1cHBvcnQucHVzaFN0YXRlID8gInBvcHN0YXRlIiA6ICJoYXNoY2hhbmdlIiwgZnVuY3Rpb24oKSB7CgkJc2V0TGFzdFNjcm9sbEVuYWJsZWQgPSBmYWxzZTsKCX0pOwoKCS8vIGhhbmRsZSBpbml0aWFsIGhhc2hjaGFuZ2UgZnJvbSBjaHJvbWUgOigKCSR3aW5kb3cub25lKCAkLnN1cHBvcnQucHVzaFN0YXRlID8gInBvcHN0YXRlIiA6ICJoYXNoY2hhbmdlIiwgZnVuY3Rpb24oKSB7CgkJc2V0TGFzdFNjcm9sbEVuYWJsZWQgPSB0cnVlOwoJfSk7CgoJLy8gd2FpdCB1bnRpbCB0aGUgbW9iaWxlIHBhZ2UgY29udGFpbmVyIGhhcyBiZWVuIGRldGVybWluZWQgdG8gYmluZCB0byBwYWdlY2hhbmdlCgkkd2luZG93Lm9uZSggInBhZ2Vjb250YWluZXJjcmVhdGUiLCBmdW5jdGlvbigpIHsKCQkvLyBvbmNlIHRoZSBwYWdlIGhhcyBjaGFuZ2VkLCByZS1lbmFibGUgdGhlIHNjcm9sbCByZWNvcmRpbmcKCQkkLm1vYmlsZS5wYWdlQ29udGFpbmVyLmJpbmQoICJwYWdlY2hhbmdlIiwgZnVuY3Rpb24oKSB7CgoJCQlzZXRMYXN0U2Nyb2xsRW5hYmxlZCA9IHRydWU7CgoJCQkvLyByZW1vdmUgYW55IGJpbmRpbmcgdGhhdCBwcmV2aW91c2x5IGV4aXN0ZWQgb24gdGhlIGdldCBzY3JvbGwKCQkJLy8gd2hpY2ggbWF5IG9yIG1heSBub3QgYmUgZGlmZmVyZW50IHRoYW4gdGhlIHNjcm9sbCBlbGVtZW50IGRldGVybWluZWQgZm9yCgkJCS8vIHRoaXMgcGFnZSBwcmV2aW91c2x5CgkJCSR3aW5kb3cudW5iaW5kKCAic2Nyb2xsc3RvcCIsIGRlbGF5ZWRTZXRMYXN0U2Nyb2xsICk7CgoJCQkvLyBkZXRlcm1pbmUgYW5kIGJpbmQgdG8gdGhlIGN1cnJlbnQgc2NvbGwgZWxlbWVudCB3aGljaCBtYXkgYmUgdGhlIHdpbmRvdwoJCQkvLyBvciBpbiB0aGUgY2FzZSBvZiB0b3VjaCBvdmVyZmxvdyB0aGUgZWxlbWVudCB3aXRoIHRvdWNoIG92ZXJmbG93CgkJCSR3aW5kb3cuYmluZCggInNjcm9sbHN0b3AiLCBkZWxheWVkU2V0TGFzdFNjcm9sbCApOwoJCX0pOwoJfSk7CgoJLy8gYmluZCB0byBzY3JvbGxzdG9wIGZvciB0aGUgZmlyc3QgcGFnZSBhcyAicGFnZWNoYW5nZSIgd29uJ3QgYmUgZmlyZWQgaW4gdGhhdCBjYXNlCgkkd2luZG93LmJpbmQoICJzY3JvbGxzdG9wIiwgZGVsYXllZFNldExhc3RTY3JvbGwgKTsKCgkvLyBOby1vcCBpbXBsZW1lbnRhdGlvbiBvZiB0cmFuc2l0aW9uIGRlZ3JhZGF0aW9uCgkkLm1vYmlsZS5fbWF5YmVEZWdyYWRlVHJhbnNpdGlvbiA9ICQubW9iaWxlLl9tYXliZURlZ3JhZGVUcmFuc2l0aW9uIHx8IGZ1bmN0aW9uKCB0cmFuc2l0aW9uICkgewoJCXJldHVybiB0cmFuc2l0aW9uOwoJfTsKCgkvL2Z1bmN0aW9uIGZvciB0cmFuc2l0aW9uaW5nIGJldHdlZW4gdHdvIGV4aXN0aW5nIHBhZ2VzCglmdW5jdGlvbiB0cmFuc2l0aW9uUGFnZXMoIHRvUGFnZSwgZnJvbVBhZ2UsIHRyYW5zaXRpb24sIHJldmVyc2UgKSB7CgoJCWlmICggZnJvbVBhZ2UgKSB7CgkJCS8vdHJpZ2dlciBiZWZvcmUgc2hvdy9oaWRlIGV2ZW50cwoJCQlmcm9tUGFnZS5kYXRhKCAicGFnZSIgKS5fdHJpZ2dlciggImJlZm9yZWhpZGUiLCBudWxsLCB7IG5leHRQYWdlOiB0b1BhZ2UgfSApOwoJCX0KCgkJdG9QYWdlLmRhdGEoICJwYWdlIiApLl90cmlnZ2VyKCAiYmVmb3Jlc2hvdyIsIG51bGwsIHsgcHJldlBhZ2U6IGZyb21QYWdlIHx8ICQoICIiICkgfSApOwoKCQkvL2NsZWFyIHBhZ2UgbG9hZGVyCgkJJC5tb2JpbGUuaGlkZVBhZ2VMb2FkaW5nTXNnKCk7CgoJCXRyYW5zaXRpb24gPSAkLm1vYmlsZS5fbWF5YmVEZWdyYWRlVHJhbnNpdGlvbiggdHJhbnNpdGlvbiApOwoKCQkvL2ZpbmQgdGhlIHRyYW5zaXRpb24gaGFuZGxlciBmb3IgdGhlIHNwZWNpZmllZCB0cmFuc2l0aW9uLiBJZiB0aGVyZQoJCS8vaXNuJ3Qgb25lIGluIG91ciB0cmFuc2l0aW9uSGFuZGxlcnMgZGljdGlvbmFyeSwgdXNlIHRoZSBkZWZhdWx0IG9uZS4KCQkvL2NhbGwgdGhlIGhhbmRsZXIgaW1tZWRpYXRlbHkgdG8ga2ljay1vZmYgdGhlIHRyYW5zaXRpb24uCgkJdmFyIHRoID0gJC5tb2JpbGUudHJhbnNpdGlvbkhhbmRsZXJzWyB0cmFuc2l0aW9uIHx8ICJkZWZhdWx0IiBdIHx8ICQubW9iaWxlLmRlZmF1bHRUcmFuc2l0aW9uSGFuZGxlciwKCQkJcHJvbWlzZSA9IHRoKCB0cmFuc2l0aW9uLCByZXZlcnNlLCB0b1BhZ2UsIGZyb21QYWdlICk7CgoJCXByb21pc2UuZG9uZShmdW5jdGlvbigpIHsKCgkJCS8vdHJpZ2dlciBzaG93L2hpZGUgZXZlbnRzCgkJCWlmICggZnJvbVBhZ2UgKSB7CgkJCQlmcm9tUGFnZS5kYXRhKCAicGFnZSIgKS5fdHJpZ2dlciggImhpZGUiLCBudWxsLCB7IG5leHRQYWdlOiB0b1BhZ2UgfSApOwoJCQl9CgoJCQkvL3RyaWdnZXIgcGFnZXNob3csIGRlZmluZSBwcmV2UGFnZSBhcyBlaXRoZXIgZnJvbVBhZ2Ugb3IgZW1wdHkgalF1ZXJ5IG9iagoJCQl0b1BhZ2UuZGF0YSggInBhZ2UiICkuX3RyaWdnZXIoICJzaG93IiwgbnVsbCwgeyBwcmV2UGFnZTogZnJvbVBhZ2UgfHwgJCggIiIgKSB9ICk7CgkJfSk7CgoJCXJldHVybiBwcm9taXNlOwoJfQoKCS8vc2ltcGx5IHNldCB0aGUgYWN0aXZlIHBhZ2UncyBtaW5pbXVtIGhlaWdodCB0byBzY3JlZW4gaGVpZ2h0LCBkZXBlbmRpbmcgb24gb3JpZW50YXRpb24KCWZ1bmN0aW9uIHJlc2V0QWN0aXZlUGFnZUhlaWdodCgpIHsKCQl2YXIgYVBhZ2UgPSAkKCAiLiIgKyAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKSwKCQkJYVBhZ2VQYWRUID0gcGFyc2VGbG9hdCggYVBhZ2UuY3NzKCAicGFkZGluZy10b3AiICkgKSwKCQkJYVBhZ2VQYWRCID0gcGFyc2VGbG9hdCggYVBhZ2UuY3NzKCAicGFkZGluZy1ib3R0b20iICkgKSwKCQkJYVBhZ2VCb3JkZXJUID0gcGFyc2VGbG9hdCggYVBhZ2UuY3NzKCAiYm9yZGVyLXRvcC13aWR0aCIgKSApLAoJCQlhUGFnZUJvcmRlckIgPSBwYXJzZUZsb2F0KCBhUGFnZS5jc3MoICJib3JkZXItYm90dG9tLXdpZHRoIiApICk7CgoJCWFQYWdlLmNzcyggIm1pbi1oZWlnaHQiLCBnZXRTY3JlZW5IZWlnaHQoKSAtIGFQYWdlUGFkVCAtIGFQYWdlUGFkQiAtIGFQYWdlQm9yZGVyVCAtIGFQYWdlQm9yZGVyQiApOwoJfQoKCS8vc2hhcmVkIHBhZ2UgZW5oYW5jZW1lbnRzCglmdW5jdGlvbiBlbmhhbmNlUGFnZSggJHBhZ2UsIHJvbGUgKSB7CgkJLy8gSWYgYSByb2xlIHdhcyBzcGVjaWZpZWQsIG1ha2Ugc3VyZSB0aGUgZGF0YS1yb2xlIGF0dHJpYnV0ZQoJCS8vIG9uIHRoZSBwYWdlIGVsZW1lbnQgaXMgaW4gc3luYy4KCQlpZiAoIHJvbGUgKSB7CgkJCSRwYWdlLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlIiwgcm9sZSApOwoJCX0KCgkJLy9ydW4gcGFnZSBwbHVnaW4KCQkkcGFnZS5wYWdlKCk7Cgl9CgoJLyogZXhwb3NlZCAkLm1vYmlsZSBtZXRob2RzICovCgoJLy9hbmltYXRpb24gY29tcGxldGUgY2FsbGJhY2sKCSQuZm4uYW5pbWF0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiggY2FsbGJhY2sgKSB7CgkJaWYgKCAkLnN1cHBvcnQuY3NzVHJhbnNpdGlvbnMgKSB7CgkJCXJldHVybiAkKCB0aGlzICkub25lKCAnd2Via2l0QW5pbWF0aW9uRW5kIGFuaW1hdGlvbmVuZCcsIGNhbGxiYWNrICk7CgkJfQoJCWVsc2V7CgkJCS8vIGRlZmVyIGV4ZWN1dGlvbiBmb3IgY29uc2lzdGVuY3kgYmV0d2VlbiB3ZWJraXQvbm9uIHdlYmtpdAoJCQlzZXRUaW1lb3V0KCBjYWxsYmFjaywgMCApOwoJCQlyZXR1cm4gJCggdGhpcyApOwoJCX0KCX07CgoJLy9leHBvc2UgcGF0aCBvYmplY3Qgb24gJC5tb2JpbGUKCSQubW9iaWxlLnBhdGggPSBwYXRoOwoKCS8vZXhwb3NlIGJhc2Ugb2JqZWN0IG9uICQubW9iaWxlCgkkLm1vYmlsZS5iYXNlID0gYmFzZTsKCgkvL2hpc3Rvcnkgc3RhY2sKCSQubW9iaWxlLnVybEhpc3RvcnkgPSB1cmxIaXN0b3J5OwoKCSQubW9iaWxlLmRpYWxvZ0hhc2hLZXkgPSBkaWFsb2dIYXNoS2V5OwoKCgoJLy9lbmFibGUgY3Jvc3MtZG9tYWluIHBhZ2Ugc3VwcG9ydAoJJC5tb2JpbGUuYWxsb3dDcm9zc0RvbWFpblBhZ2VzID0gZmFsc2U7CgoJLy9yZXR1cm4gdGhlIG9yaWdpbmFsIGRvY3VtZW50IHVybAoJJC5tb2JpbGUuZ2V0RG9jdW1lbnRVcmwgPSBmdW5jdGlvbiggYXNQYXJzZWRPYmplY3QgKSB7CgkJcmV0dXJuIGFzUGFyc2VkT2JqZWN0ID8gJC5leHRlbmQoIHt9LCBkb2N1bWVudFVybCApIDogZG9jdW1lbnRVcmwuaHJlZjsKCX07CgoJLy9yZXR1cm4gdGhlIG9yaWdpbmFsIGRvY3VtZW50IGJhc2UgdXJsCgkkLm1vYmlsZS5nZXREb2N1bWVudEJhc2UgPSBmdW5jdGlvbiggYXNQYXJzZWRPYmplY3QgKSB7CgkJcmV0dXJuIGFzUGFyc2VkT2JqZWN0ID8gJC5leHRlbmQoIHt9LCBkb2N1bWVudEJhc2UgKSA6IGRvY3VtZW50QmFzZS5ocmVmOwoJfTsKCgkkLm1vYmlsZS5fYmluZFBhZ2VSZW1vdmUgPSBmdW5jdGlvbigpIHsKCQl2YXIgcGFnZSA9ICQoIHRoaXMgKTsKCgkJLy8gd2hlbiBkb20gY2FjaGluZyBpcyBub3QgZW5hYmxlZCBvciB0aGUgcGFnZSBpcyBlbWJlZGRlZCBiaW5kIHRvIHJlbW92ZSB0aGUgcGFnZSBvbiBoaWRlCgkJaWYgKCAhcGFnZS5kYXRhKCAicGFnZSIgKS5vcHRpb25zLmRvbUNhY2hlICYmCgkJCQlwYWdlLmlzKCAiOmpxbURhdGEoZXh0ZXJuYWwtcGFnZT0ndHJ1ZScpIiApICkgewoKCQkJcGFnZS5iaW5kKCAncGFnZWhpZGUucmVtb3ZlJywgZnVuY3Rpb24oKSB7CgkJCQl2YXIgJHRoaXMgPSAkKCB0aGlzICksCgkJCQkJcHJFdmVudCA9IG5ldyAkLkV2ZW50KCAicGFnZXJlbW92ZSIgKTsKCgkJCQkkdGhpcy50cmlnZ2VyKCBwckV2ZW50ICk7CgoJCQkJaWYgKCAhcHJFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHsKCQkJCQkkdGhpcy5yZW1vdmVXaXRoRGVwZW5kZW50cygpOwoJCQkJfQoJCQl9KTsKCQl9Cgl9OwoKCS8vIExvYWQgYSBwYWdlIGludG8gdGhlIERPTS4KCSQubW9iaWxlLmxvYWRQYWdlID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHsKCQkvLyBUaGlzIGZ1bmN0aW9uIHVzZXMgZGVmZXJyZWQgbm90aWZpY2F0aW9ucyB0byBsZXQgY2FsbGVycwoJCS8vIGtub3cgd2hlbiB0aGUgcGFnZSBpcyBkb25lIGxvYWRpbmcsIG9yIGlmIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4KCQl2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCksCgoJCQkvLyBUaGUgZGVmYXVsdCBsb2FkUGFnZSBvcHRpb25zIHdpdGggb3ZlcnJpZGVzIHNwZWNpZmllZCBieQoJCQkvLyB0aGUgY2FsbGVyLgoJCQlzZXR0aW5ncyA9ICQuZXh0ZW5kKCB7fSwgJC5tb2JpbGUubG9hZFBhZ2UuZGVmYXVsdHMsIG9wdGlvbnMgKSwKCgkJCS8vIFRoZSBET00gZWxlbWVudCBmb3IgdGhlIHBhZ2UgYWZ0ZXIgaXQgaGFzIGJlZW4gbG9hZGVkLgoJCQlwYWdlID0gbnVsbCwKCgkJCS8vIElmIHRoZSByZWxvYWRQYWdlIG9wdGlvbiBpcyB0cnVlLCBhbmQgdGhlIHBhZ2UgaXMgYWxyZWFkeQoJCQkvLyBpbiB0aGUgRE9NLCBkdXBDYWNoZWRQYWdlIHdpbGwgYmUgc2V0IHRvIHRoZSBwYWdlIGVsZW1lbnQKCQkJLy8gc28gdGhhdCBpdCBjYW4gYmUgcmVtb3ZlZCBhZnRlciB0aGUgbmV3IHZlcnNpb24gb2YgdGhlCgkJCS8vIHBhZ2UgaXMgbG9hZGVkIG9mZiB0aGUgbmV0d29yay4KCQkJZHVwQ2FjaGVkUGFnZSA9IG51bGwsCgoJCQkvLyBkZXRlcm1pbmUgdGhlIGN1cnJlbnQgYmFzZSB1cmwKCQkJZmluZEJhc2VXaXRoRGVmYXVsdCA9IGZ1bmN0aW9uKCkgewoJCQkJdmFyIGNsb3Nlc3RCYXNlID0gKCAkLm1vYmlsZS5hY3RpdmVQYWdlICYmIGdldENsb3Nlc3RCYXNlVXJsKCAkLm1vYmlsZS5hY3RpdmVQYWdlICkgKTsKCQkJCXJldHVybiBjbG9zZXN0QmFzZSB8fCBkb2N1bWVudEJhc2UuaHJlZk5vSGFzaDsKCQkJfSwKCgkJCS8vIFRoZSBhYnNvbHV0ZSB2ZXJzaW9uIG9mIHRoZSBVUkwgcGFzc2VkIGludG8gdGhlIGZ1bmN0aW9uLiBUaGlzCgkJCS8vIHZlcnNpb24gb2YgdGhlIFVSTCBtYXkgY29udGFpbiBkaWFsb2cvc3VicGFnZSBwYXJhbXMgaW4gaXQuCgkJCWFic1VybCA9IHBhdGgubWFrZVVybEFic29sdXRlKCB1cmwsIGZpbmRCYXNlV2l0aERlZmF1bHQoKSApOwoKCgkJLy8gSWYgdGhlIGNhbGxlciBwcm92aWRlZCBkYXRhLCBhbmQgd2UncmUgdXNpbmcgImdldCIgcmVxdWVzdCwKCQkvLyBhcHBlbmQgdGhlIGRhdGEgdG8gdGhlIFVSTC4KCQlpZiAoIHNldHRpbmdzLmRhdGEgJiYgc2V0dGluZ3MudHlwZSA9PT0gImdldCIgKSB7CgkJCWFic1VybCA9IHBhdGguYWRkU2VhcmNoUGFyYW1zKCBhYnNVcmwsIHNldHRpbmdzLmRhdGEgKTsKCQkJc2V0dGluZ3MuZGF0YSA9IHVuZGVmaW5lZDsKCQl9CgoJCS8vIElmIHRoZSBjYWxsZXIgaXMgdXNpbmcgYSAicG9zdCIgcmVxdWVzdCwgcmVsb2FkUGFnZSBtdXN0IGJlIHRydWUKCQlpZiAoIHNldHRpbmdzLmRhdGEgJiYgc2V0dGluZ3MudHlwZSA9PT0gInBvc3QiICkgewoJCQlzZXR0aW5ncy5yZWxvYWRQYWdlID0gdHJ1ZTsKCQl9CgoJCS8vIFRoZSBhYnNvbHV0ZSB2ZXJzaW9uIG9mIHRoZSBVUkwgbWludXMgYW55IGRpYWxvZy9zdWJwYWdlIHBhcmFtcy4KCQkvLyBJbiBvdGhlcndvcmRzIHRoZSByZWFsIFVSTCBvZiB0aGUgcGFnZSB0byBiZSBsb2FkZWQuCgkJdmFyIGZpbGVVcmwgPSBwYXRoLmdldEZpbGVQYXRoKCBhYnNVcmwgKSwKCgkJCS8vIFRoZSB2ZXJzaW9uIG9mIHRoZSBVcmwgYWN0dWFsbHkgc3RvcmVkIGluIHRoZSBkYXRhLXVybCBhdHRyaWJ1dGUgb2YKCQkJLy8gdGhlIHBhZ2UuIEZvciBlbWJlZGRlZCBwYWdlcywgaXQgaXMganVzdCB0aGUgaWQgb2YgdGhlIHBhZ2UuIEZvciBwYWdlcwoJCQkvLyB3aXRoaW4gdGhlIHNhbWUgZG9tYWluIGFzIHRoZSBkb2N1bWVudCBiYXNlLCBpdCBpcyB0aGUgc2l0ZSByZWxhdGl2ZQoJCQkvLyBwYXRoLiBGb3IgY3Jvc3MtZG9tYWluIHBhZ2VzIChQaG9uZSBHYXAgb25seSkgdGhlIGVudGlyZSBhYnNvbHV0ZSBVcmwKCQkJLy8gdXNlZCB0byBsb2FkIHRoZSBwYWdlLgoJCQlkYXRhVXJsID0gcGF0aC5jb252ZXJ0VXJsVG9EYXRhVXJsKCBhYnNVcmwgKTsKCgkJLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBwYWdlQ29udGFpbmVyIHRvIHdvcmsgd2l0aC4KCQlzZXR0aW5ncy5wYWdlQ29udGFpbmVyID0gc2V0dGluZ3MucGFnZUNvbnRhaW5lciB8fCAkLm1vYmlsZS5wYWdlQ29udGFpbmVyOwoKCQkvLyBDaGVjayB0byBzZWUgaWYgdGhlIHBhZ2UgYWxyZWFkeSBleGlzdHMgaW4gdGhlIERPTS4KCQkvLyBOT1RFIGRvIF9ub3RfIHVzZSB0aGUgOmpxbURhdGEgcHN1ZWRvIHNlbGVjdG9yIGJlY2F1c2UgcGFyZW50aGVzaXMKCQkvLyAgICAgIGFyZSBhIHZhbGlkIHVybCBjaGFyIGFuZCBpdCBicmVha3Mgb24gdGhlIGZpcnN0IG9jY3VyZW5jZQoJCXBhZ2UgPSBzZXR0aW5ncy5wYWdlQ29udGFpbmVyLmNoaWxkcmVuKCAiW2RhdGEtIiArICQubW9iaWxlLm5zICsidXJsPSciICsgZGF0YVVybCArICInXSIgKTsKCgkJLy8gSWYgd2UgZmFpbGVkIHRvIGZpbmQgdGhlIHBhZ2UsIGNoZWNrIHRvIHNlZSBpZiB0aGUgdXJsIGlzIGEKCQkvLyByZWZlcmVuY2UgdG8gYW4gZW1iZWRkZWQgcGFnZS4gSWYgc28sIGl0IG1heSBoYXZlIGJlZW4gZHluYW1pY2FsbHkKCQkvLyBpbmplY3RlZCBieSBhIGRldmVsb3BlciwgaW4gd2hpY2ggY2FzZSBpdCB3b3VsZCBiZSBsYWNraW5nIGEgZGF0YS11cmwKCQkvLyBhdHRyaWJ1dGUgYW5kIGluIG5lZWQgb2YgZW5oYW5jZW1lbnQuCgkJaWYgKCBwYWdlLmxlbmd0aCA9PT0gMCAmJiBkYXRhVXJsICYmICFwYXRoLmlzUGF0aCggZGF0YVVybCApICkgewoJCQlwYWdlID0gc2V0dGluZ3MucGFnZUNvbnRhaW5lci5jaGlsZHJlbiggIiMiICsgZGF0YVVybCApCgkJCQkuYXR0ciggImRhdGEtIiArICQubW9iaWxlLm5zICsgInVybCIsIGRhdGFVcmwgKQoJCQkJLmpxbURhdGEoICJ1cmwiLCBkYXRhVXJsICk7CgkJfQoKCQkvLyBJZiB3ZSBmYWlsZWQgdG8gZmluZCBhIHBhZ2UgaW4gdGhlIERPTSwgY2hlY2sgdGhlIFVSTCB0byBzZWUgaWYgaXQKCQkvLyByZWZlcnMgdG8gdGhlIGZpcnN0IHBhZ2UgaW4gdGhlIGFwcGxpY2F0aW9uLiBJZiBpdCBpc24ndCBhIHJlZmVyZW5jZQoJCS8vIHRvIHRoZSBmaXJzdCBwYWdlIGFuZCByZWZlcnMgdG8gbm9uLWV4aXN0ZW50IGVtYmVkZGVkIHBhZ2UsIGVycm9yIG91dC4KCQlpZiAoIHBhZ2UubGVuZ3RoID09PSAwICkgewoJCQlpZiAoICQubW9iaWxlLmZpcnN0UGFnZSAmJiBwYXRoLmlzRmlyc3RQYWdlVXJsKCBmaWxlVXJsICkgKSB7CgkJCQkvLyBDaGVjayB0byBtYWtlIHN1cmUgb3VyIGNhY2hlZC1maXJzdC1wYWdlIGlzIGFjdHVhbGx5CgkJCQkvLyBpbiB0aGUgRE9NLiBTb21lIHVzZXIgZGVwbG95ZWQgYXBwcyBhcmUgcHJ1bmluZyB0aGUgZmlyc3QKCQkJCS8vIHBhZ2UgZnJvbSB0aGUgRE9NIGZvciB2YXJpb3VzIHJlYXNvbnMsIHdlIGNoZWNrIGZvciB0aGlzCgkJCQkvLyBjYXNlIGhlcmUgYmVjYXVzZSB3ZSBkb24ndCB3YW50IGEgZmlyc3QtcGFnZSB3aXRoIGFuIGlkCgkJCQkvLyBmYWxsaW5nIHRocm91Z2ggdG8gdGhlIG5vbi1leGlzdGVudCBlbWJlZGRlZCBwYWdlIGVycm9yCgkJCQkvLyBjYXNlLiBJZiB0aGUgZmlyc3QtcGFnZSBpcyBub3QgaW4gdGhlIERPTSwgdGhlbiB3ZSBsZXQKCQkJCS8vIHRoaW5ncyBmYWxsIHRocm91Z2ggdG8gdGhlIGFqYXggbG9hZGluZyBjb2RlIGJlbG93IHNvCgkJCQkvLyB0aGF0IGl0IGdldHMgcmVsb2FkZWQuCgkJCQlpZiAoICQubW9iaWxlLmZpcnN0UGFnZS5wYXJlbnQoKS5sZW5ndGggKSB7CgkJCQkJcGFnZSA9ICQoICQubW9iaWxlLmZpcnN0UGFnZSApOwoJCQkJfQoJCQl9IGVsc2UgaWYgKCBwYXRoLmlzRW1iZWRkZWRQYWdlKCBmaWxlVXJsICkgICkgewoJCQkJZGVmZXJyZWQucmVqZWN0KCBhYnNVcmwsIG9wdGlvbnMgKTsKCQkJCXJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7CgkJCX0KCQl9CgoJCS8vIElmIHRoZSBwYWdlIHdlIGFyZSBpbnRlcmVzdGVkIGluIGlzIGFscmVhZHkgaW4gdGhlIERPTSwKCQkvLyBhbmQgdGhlIGNhbGxlciBkaWQgbm90IGluZGljYXRlIHRoYXQgd2Ugc2hvdWxkIGZvcmNlIGEKCQkvLyByZWxvYWQgb2YgdGhlIGZpbGUsIHdlIGFyZSBkb25lLiBPdGhlcndpc2UsIHRyYWNrIHRoZQoJCS8vIGV4aXN0aW5nIHBhZ2UgYXMgYSBkdXBsaWNhdGVkLgoJCWlmICggcGFnZS5sZW5ndGggKSB7CgkJCWlmICggIXNldHRpbmdzLnJlbG9hZFBhZ2UgKSB7CgkJCQllbmhhbmNlUGFnZSggcGFnZSwgc2V0dGluZ3Mucm9sZSApOwoJCQkJZGVmZXJyZWQucmVzb2x2ZSggYWJzVXJsLCBvcHRpb25zLCBwYWdlICk7CgkJCQlyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpOwoJCQl9CgkJCWR1cENhY2hlZFBhZ2UgPSBwYWdlOwoJCX0KCgkJdmFyIG1wYyA9IHNldHRpbmdzLnBhZ2VDb250YWluZXIsCgkJCXBibEV2ZW50ID0gbmV3ICQuRXZlbnQoICJwYWdlYmVmb3JlbG9hZCIgKSwKCQkJdHJpZ2dlckRhdGEgPSB7IHVybDogdXJsLCBhYnNVcmw6IGFic1VybCwgZGF0YVVybDogZGF0YVVybCwgZGVmZXJyZWQ6IGRlZmVycmVkLCBvcHRpb25zOiBzZXR0aW5ncyB9OwoKCQkvLyBMZXQgbGlzdGVuZXJzIGtub3cgd2UncmUgYWJvdXQgdG8gbG9hZCBhIHBhZ2UuCgkJbXBjLnRyaWdnZXIoIHBibEV2ZW50LCB0cmlnZ2VyRGF0YSApOwoKCQkvLyBJZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyBwcmV2ZW50ZWQsIHN0b3AgaGVyZSEKCQlpZiAoIHBibEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkgewoJCQlyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpOwoJCX0KCgkJaWYgKCBzZXR0aW5ncy5zaG93TG9hZE1zZyApIHsKCgkJCS8vIFRoaXMgY29uZmlndXJhYmxlIHRpbWVvdXQgYWxsb3dzIGNhY2hlZCBwYWdlcyBhIGJyaWVmIGRlbGF5IHRvIGxvYWQgd2l0aG91dCBzaG93aW5nIGEgbWVzc2FnZQoJCQl2YXIgbG9hZE1zZ0RlbGF5ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCQkkLm1vYmlsZS5zaG93UGFnZUxvYWRpbmdNc2coKTsKCQkJCX0sIHNldHRpbmdzLmxvYWRNc2dEZWxheSApLAoKCQkJCS8vIFNoYXJlZCBsb2dpYyBmb3IgY2xlYXJpbmcgdGltZW91dCBhbmQgcmVtb3ZpbmcgbWVzc2FnZS4KCQkJCWhpZGVNc2cgPSBmdW5jdGlvbigpIHsKCgkJCQkJLy8gU3RvcCBtZXNzYWdlIHNob3cgdGltZXIKCQkJCQljbGVhclRpbWVvdXQoIGxvYWRNc2dEZWxheSApOwoKCQkJCQkvLyBIaWRlIGxvYWRpbmcgbWVzc2FnZQoJCQkJCSQubW9iaWxlLmhpZGVQYWdlTG9hZGluZ01zZygpOwoJCQkJfTsKCQl9CgoJCS8vIFJlc2V0IGJhc2UgdG8gdGhlIGRlZmF1bHQgZG9jdW1lbnQgYmFzZS4KCQlpZiAoIGJhc2UgKSB7CgkJCWJhc2UucmVzZXQoKTsKCQl9CgoJCWlmICggISggJC5tb2JpbGUuYWxsb3dDcm9zc0RvbWFpblBhZ2VzIHx8IHBhdGguaXNTYW1lRG9tYWluKCBkb2N1bWVudFVybCwgYWJzVXJsICkgKSApIHsKCQkJZGVmZXJyZWQucmVqZWN0KCBhYnNVcmwsIG9wdGlvbnMgKTsKCQl9IGVsc2UgewoJCQkvLyBMb2FkIHRoZSBuZXcgcGFnZS4KCQkJJC5hamF4KHsKCQkJCXVybDogZmlsZVVybCwKCQkJCXR5cGU6IHNldHRpbmdzLnR5cGUsCgkJCQlkYXRhOiBzZXR0aW5ncy5kYXRhLAoJCQkJZGF0YVR5cGU6ICJodG1sIiwKCQkJCXN1Y2Nlc3M6IGZ1bmN0aW9uKCBodG1sLCB0ZXh0U3RhdHVzLCB4aHIgKSB7CgkJCQkJLy9wcmUtcGFyc2UgaHRtbCB0byBjaGVjayBmb3IgYSBkYXRhLXVybCwKCQkJCQkvL3VzZSBpdCBhcyB0aGUgbmV3IGZpbGVVcmwsIGJhc2UgcGF0aCwgZXRjCgkJCQkJdmFyIGFsbCA9ICQoICI8ZGl2PjwvZGl2PiIgKSwKCgkJCQkJCS8vcGFnZSB0aXRsZSByZWdleHAKCQkJCQkJbmV3UGFnZVRpdGxlID0gaHRtbC5tYXRjaCggLzx0aXRsZVtePl0qPihbXjxdKikvICkgJiYgUmVnRXhwLiQxLAoKCQkJCQkJLy8gVE9ETyBoYW5kbGUgZGlhbG9ncyBhZ2FpbgoJCQkJCQlwYWdlRWxlbVJlZ2V4ID0gbmV3IFJlZ0V4cCggIig8W14+XStcXGJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyb2xlPVtcIiddP3BhZ2VbXCInXT9bXj5dKj4pIiApLAoJCQkJCQlkYXRhVXJsUmVnZXggPSBuZXcgUmVnRXhwKCAiXFxiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidXJsPVtcIiddPyhbXlwiJz5dKilbXCInXT8iICk7CgoKCQkJCQkvLyBkYXRhLXVybCBtdXN0IGJlIHByb3ZpZGVkIGZvciB0aGUgYmFzZSB0YWcgc28gcmVzb3VyY2UgcmVxdWVzdHMgY2FuIGJlIGRpcmVjdGVkIHRvIHRoZQoJCQkJCS8vIGNvcnJlY3QgdXJsLiBsb2FkaW5nIGludG8gYSB0ZW1wcm9yYXJ5IGVsZW1lbnQgbWFrZXMgdGhlc2UgcmVxdWVzdHMgaW1tZWRpYXRlbHkKCQkJCQlpZiAoIHBhZ2VFbGVtUmVnZXgudGVzdCggaHRtbCApICYmCgkJCQkJCQlSZWdFeHAuJDEgJiYKCQkJCQkJCWRhdGFVcmxSZWdleC50ZXN0KCBSZWdFeHAuJDEgKSAmJgoJCQkJCQkJUmVnRXhwLiQxICkgewoJCQkJCQl1cmwgPSBmaWxlVXJsID0gcGF0aC5nZXRGaWxlUGF0aCggJCggIjxkaXY+IiArIFJlZ0V4cC4kMSArICI8L2Rpdj4iICkudGV4dCgpICk7CgkJCQkJfQoKCQkJCQlpZiAoIGJhc2UgKSB7CgkJCQkJCWJhc2Uuc2V0KCBmaWxlVXJsICk7CgkJCQkJfQoKCQkJCQkvL3dvcmthcm91bmQgdG8gYWxsb3cgc2NyaXB0cyB0byBleGVjdXRlIHdoZW4gaW5jbHVkZWQgaW4gcGFnZSBkaXZzCgkJCQkJYWxsLmdldCggMCApLmlubmVySFRNTCA9IGh0bWw7CgkJCQkJcGFnZSA9IGFsbC5maW5kKCAiOmpxbURhdGEocm9sZT0ncGFnZScpLCA6anFtRGF0YShyb2xlPSdkaWFsb2cnKSIgKS5maXJzdCgpOwoKCQkJCQkvL2lmIHBhZ2UgZWxlbSBjb3VsZG4ndCBiZSBmb3VuZCwgY3JlYXRlIG9uZSBhbmQgaW5zZXJ0IHRoZSBib2R5IGVsZW1lbnQncyBjb250ZW50cwoJCQkJCWlmICggIXBhZ2UubGVuZ3RoICkgewoJCQkJCQlwYWdlID0gJCggIjxkaXYgZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicm9sZT0ncGFnZSc+IiArIGh0bWwuc3BsaXQoIC88XC8/Ym9keVtePl0qPi9nbWkgKVsxXSArICI8L2Rpdj4iICk7CgkJCQkJfQoKCQkJCQlpZiAoIG5ld1BhZ2VUaXRsZSAmJiAhcGFnZS5qcW1EYXRhKCAidGl0bGUiICkgKSB7CgkJCQkJCWlmICggfm5ld1BhZ2VUaXRsZS5pbmRleE9mKCAiJiIgKSApIHsKCQkJCQkJCW5ld1BhZ2VUaXRsZSA9ICQoICI8ZGl2PiIgKyBuZXdQYWdlVGl0bGUgKyAiPC9kaXY+IiApLnRleHQoKTsKCQkJCQkJfQoJCQkJCQlwYWdlLmpxbURhdGEoICJ0aXRsZSIsIG5ld1BhZ2VUaXRsZSApOwoJCQkJCX0KCgkJCQkJLy9yZXdyaXRlIHNyYyBhbmQgaHJlZiBhdHRycyB0byB1c2UgYSBiYXNlIHVybAoJCQkJCWlmICggISQuc3VwcG9ydC5keW5hbWljQmFzZVRhZyApIHsKCQkJCQkJdmFyIG5ld1BhdGggPSBwYXRoLmdldCggZmlsZVVybCApOwoJCQkJCQlwYWdlLmZpbmQoICJbc3JjXSwgbGlua1tocmVmXSwgYVtyZWw9J2V4dGVybmFsJ10sIDpqcW1EYXRhKGFqYXg9J2ZhbHNlJyksIGFbdGFyZ2V0XSIgKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJCQkJdmFyIHRoaXNBdHRyID0gJCggdGhpcyApLmlzKCAnW2hyZWZdJyApID8gJ2hyZWYnIDoKCQkJCQkJCQkJJCggdGhpcyApLmlzKCAnW3NyY10nICkgPyAnc3JjJyA6ICdhY3Rpb24nLAoJCQkJCQkJCXRoaXNVcmwgPSAkKCB0aGlzICkuYXR0ciggdGhpc0F0dHIgKTsKCgkJCQkJCQkvLyBYWFhfamJsYXM6IFdlIG5lZWQgdG8gZml4IHRoaXMgc28gdGhhdCBpdCByZW1vdmVzIHRoZSBkb2N1bWVudAoJCQkJCQkJLy8gICAgICAgICAgICBiYXNlIFVSTCwgYW5kIHRoZW4gcHJlcGVuZHMgd2l0aCB0aGUgbmV3IHBhZ2UgVVJMLgoJCQkJCQkJLy9pZiBmdWxsIHBhdGggZXhpc3RzIGFuZCBpcyBzYW1lLCBjaG9wIGl0IC0gaGVscHMgSUUgb3V0CgkJCQkJCQl0aGlzVXJsID0gdGhpc1VybC5yZXBsYWNlKCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0ICsgbG9jYXRpb24ucGF0aG5hbWUsICcnICk7CgoJCQkJCQkJaWYgKCAhL14oXHcrOnwjfFwvKS8udGVzdCggdGhpc1VybCApICkgewoJCQkJCQkJCSQoIHRoaXMgKS5hdHRyKCB0aGlzQXR0ciwgbmV3UGF0aCArIHRoaXNVcmwgKTsKCQkJCQkJCX0KCQkJCQkJfSk7CgkJCQkJfQoKCQkJCQkvL2FwcGVuZCB0byBwYWdlIGFuZCBlbmhhbmNlCgkJCQkJLy8gVE9ETyB0YWdpbmcgYSBwYWdlIHdpdGggZXh0ZXJuYWwgdG8gbWFrZSBzdXJlIHRoYXQgZW1iZWRkZWQgcGFnZXMgYXJlbid0IHJlbW92ZWQKCQkJCQkvLyAgICAgIGJ5IHRoZSB2YXJpb3VzIHBhZ2UgaGFuZGxpbmcgY29kZSBpcyBiYWQuIEhhdmluZyBwYWdlIGhhbmRsaW5nIGNvZGUgaW4gbWFueQoJCQkJCS8vICAgICAgcGxhY2VzIGlzIGJhZC4gU29sdXRpb25zIHBvc3QgMS4wCgkJCQkJcGFnZQoJCQkJCQkuYXR0ciggImRhdGEtIiArICQubW9iaWxlLm5zICsgInVybCIsIHBhdGguY29udmVydFVybFRvRGF0YVVybCggZmlsZVVybCApICkKCQkJCQkJLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJleHRlcm5hbC1wYWdlIiwgdHJ1ZSApCgkJCQkJCS5hcHBlbmRUbyggc2V0dGluZ3MucGFnZUNvbnRhaW5lciApOwoKCQkJCQkvLyB3YWl0IGZvciBwYWdlIGNyZWF0aW9uIHRvIGxldmVyYWdlIG9wdGlvbnMgZGVmaW5lZCBvbiB3aWRnZXQKCQkJCQlwYWdlLm9uZSggJ3BhZ2VjcmVhdGUnLCAkLm1vYmlsZS5fYmluZFBhZ2VSZW1vdmUgKTsKCgkJCQkJZW5oYW5jZVBhZ2UoIHBhZ2UsIHNldHRpbmdzLnJvbGUgKTsKCgkJCQkJLy8gRW5oYW5jaW5nIHRoZSBwYWdlIG1heSByZXN1bHQgaW4gbmV3IGRpYWxvZ3Mvc3ViIHBhZ2VzIGJlaW5nIGluc2VydGVkCgkJCQkJLy8gaW50byB0aGUgRE9NLiBJZiB0aGUgb3JpZ2luYWwgYWJzVXJsIHJlZmVycyB0byBhIHN1Yi1wYWdlLCB0aGF0IGlzIHRoZQoJCQkJCS8vIHJlYWwgcGFnZSB3ZSBhcmUgaW50ZXJlc3RlZCBpbi4KCQkJCQlpZiAoIGFic1VybC5pbmRleE9mKCAiJiIgKyAkLm1vYmlsZS5zdWJQYWdlVXJsS2V5ICkgPiAtMSApIHsKCQkJCQkJcGFnZSA9IHNldHRpbmdzLnBhZ2VDb250YWluZXIuY2hpbGRyZW4oICJbZGF0YS0iICsgJC5tb2JpbGUubnMgKyJ1cmw9JyIgKyBkYXRhVXJsICsgIiddIiApOwoJCQkJCX0KCgkJCQkJLy9iaW5kIHBhZ2VIaWRlIHRvIHJlbW92ZVBhZ2UgYWZ0ZXIgaXQncyBoaWRkZW4sIGlmIHRoZSBwYWdlIG9wdGlvbnMgc3BlY2lmeSB0byBkbyBzbwoKCQkJCQkvLyBSZW1vdmUgbG9hZGluZyBtZXNzYWdlLgoJCQkJCWlmICggc2V0dGluZ3Muc2hvd0xvYWRNc2cgKSB7CgkJCQkJCWhpZGVNc2coKTsKCQkJCQl9CgoJCQkJCS8vIEFkZCB0aGUgcGFnZSByZWZlcmVuY2UgYW5kIHhociB0byBvdXIgdHJpZ2dlckRhdGEuCgkJCQkJdHJpZ2dlckRhdGEueGhyID0geGhyOwoJCQkJCXRyaWdnZXJEYXRhLnRleHRTdGF0dXMgPSB0ZXh0U3RhdHVzOwoJCQkJCXRyaWdnZXJEYXRhLnBhZ2UgPSBwYWdlOwoKCQkJCQkvLyBMZXQgbGlzdGVuZXJzIGtub3cgdGhlIHBhZ2UgbG9hZGVkIHN1Y2Nlc3NmdWxseS4KCQkJCQlzZXR0aW5ncy5wYWdlQ29udGFpbmVyLnRyaWdnZXIoICJwYWdlbG9hZCIsIHRyaWdnZXJEYXRhICk7CgoJCQkJCWRlZmVycmVkLnJlc29sdmUoIGFic1VybCwgb3B0aW9ucywgcGFnZSwgZHVwQ2FjaGVkUGFnZSApOwoJCQkJfSwKCQkJCWVycm9yOiBmdW5jdGlvbiggeGhyLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93biApIHsKCQkJCQkvL3NldCBiYXNlIGJhY2sgdG8gY3VycmVudCBwYXRoCgkJCQkJaWYgKCBiYXNlICkgewoJCQkJCQliYXNlLnNldCggcGF0aC5nZXQoKSApOwoJCQkJCX0KCgkJCQkJLy8gQWRkIGVycm9yIGluZm8gdG8gb3VyIHRyaWdnZXJEYXRhLgoJCQkJCXRyaWdnZXJEYXRhLnhociA9IHhocjsKCQkJCQl0cmlnZ2VyRGF0YS50ZXh0U3RhdHVzID0gdGV4dFN0YXR1czsKCQkJCQl0cmlnZ2VyRGF0YS5lcnJvclRocm93biA9IGVycm9yVGhyb3duOwoKCQkJCQl2YXIgcGxmRXZlbnQgPSBuZXcgJC5FdmVudCggInBhZ2Vsb2FkZmFpbGVkIiApOwoKCQkJCQkvLyBMZXQgbGlzdGVuZXJzIGtub3cgdGhlIHBhZ2UgbG9hZCBmYWlsZWQuCgkJCQkJc2V0dGluZ3MucGFnZUNvbnRhaW5lci50cmlnZ2VyKCBwbGZFdmVudCwgdHJpZ2dlckRhdGEgKTsKCgkJCQkJLy8gSWYgdGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgcHJldmVudGVkLCBzdG9wIGhlcmUhCgkJCQkJLy8gTm90ZSB0aGF0IGl0IGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgbGlzdGVuZXIvaGFuZGxlcgoJCQkJCS8vIHRoYXQgY2FsbGVkIHByZXZlbnREZWZhdWx0KCksIHRvIHJlc29sdmUvcmVqZWN0IHRoZQoJCQkJCS8vIGRlZmVycmVkIG9iamVjdCB3aXRoaW4gdGhlIHRyaWdnZXJEYXRhLgoJCQkJCWlmICggcGxmRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgkJCQkJCXJldHVybjsKCQkJCQl9CgoJCQkJCS8vIFJlbW92ZSBsb2FkaW5nIG1lc3NhZ2UuCgkJCQkJaWYgKCBzZXR0aW5ncy5zaG93TG9hZE1zZyApIHsKCgkJCQkJCS8vIFJlbW92ZSBsb2FkaW5nIG1lc3NhZ2UuCgkJCQkJCWhpZGVNc2coKTsKCgkJCQkJCS8vIHNob3cgZXJyb3IgbWVzc2FnZQoJCQkJCQkkLm1vYmlsZS5zaG93UGFnZUxvYWRpbmdNc2coICQubW9iaWxlLnBhZ2VMb2FkRXJyb3JNZXNzYWdlVGhlbWUsICQubW9iaWxlLnBhZ2VMb2FkRXJyb3JNZXNzYWdlLCB0cnVlICk7CgoJCQkJCQkvLyBoaWRlIGFmdGVyIGRlbGF5CgkJCQkJCXNldFRpbWVvdXQoICQubW9iaWxlLmhpZGVQYWdlTG9hZGluZ01zZywgMTUwMCApOwoJCQkJCX0KCgkJCQkJZGVmZXJyZWQucmVqZWN0KCBhYnNVcmwsIG9wdGlvbnMgKTsKCQkJCX0KCQkJfSk7CgkJfQoKCQlyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpOwoJfTsKCgkkLm1vYmlsZS5sb2FkUGFnZS5kZWZhdWx0cyA9IHsKCQl0eXBlOiAiZ2V0IiwKCQlkYXRhOiB1bmRlZmluZWQsCgkJcmVsb2FkUGFnZTogZmFsc2UsCgkJcm9sZTogdW5kZWZpbmVkLCAvLyBCeSBkZWZhdWx0IHdlIHJlbHkgb24gdGhlIHJvbGUgZGVmaW5lZCBieSB0aGUgQGRhdGEtcm9sZSBhdHRyaWJ1dGUuCgkJc2hvd0xvYWRNc2c6IGZhbHNlLAoJCXBhZ2VDb250YWluZXI6IHVuZGVmaW5lZCwKCQlsb2FkTXNnRGVsYXk6IDUwIC8vIFRoaXMgZGVsYXkgYWxsb3dzIGxvYWRzIHRoYXQgcHVsbCBmcm9tIGJyb3dzZXIgY2FjaGUgdG8gb2NjdXIgd2l0aG91dCBzaG93aW5nIHRoZSBsb2FkaW5nIG1lc3NhZ2UuCgl9OwoKCS8vIFNob3cgYSBzcGVjaWZpYyBwYWdlIGluIHRoZSBwYWdlIGNvbnRhaW5lci4KCSQubW9iaWxlLmNoYW5nZVBhZ2UgPSBmdW5jdGlvbiggdG9QYWdlLCBvcHRpb25zICkgewoJCS8vIElmIHdlIGFyZSBpbiB0aGUgbWlkc3Qgb2YgYSB0cmFuc2l0aW9uLCBxdWV1ZSB0aGUgY3VycmVudCByZXF1ZXN0LgoJCS8vIFdlJ2xsIGNhbGwgY2hhbmdlUGFnZSgpIG9uY2Ugd2UncmUgZG9uZSB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gdG8KCQkvLyBzZXJ2aWNlIHRoZSByZXF1ZXN0LgoJCWlmICggaXNQYWdlVHJhbnNpdGlvbmluZyApIHsKCQkJcGFnZVRyYW5zaXRpb25RdWV1ZS51bnNoaWZ0KCBhcmd1bWVudHMgKTsKCQkJcmV0dXJuOwoJCX0KCgkJdmFyIHNldHRpbmdzID0gJC5leHRlbmQoIHt9LCAkLm1vYmlsZS5jaGFuZ2VQYWdlLmRlZmF1bHRzLCBvcHRpb25zICk7CgoJCS8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgcGFnZUNvbnRhaW5lciB0byB3b3JrIHdpdGguCgkJc2V0dGluZ3MucGFnZUNvbnRhaW5lciA9IHNldHRpbmdzLnBhZ2VDb250YWluZXIgfHwgJC5tb2JpbGUucGFnZUNvbnRhaW5lcjsKCgkJLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBmcm9tUGFnZS4KCQlzZXR0aW5ncy5mcm9tUGFnZSA9IHNldHRpbmdzLmZyb21QYWdlIHx8ICQubW9iaWxlLmFjdGl2ZVBhZ2U7CgoJCXZhciBtcGMgPSBzZXR0aW5ncy5wYWdlQ29udGFpbmVyLAoJCQlwYmNFdmVudCA9IG5ldyAkLkV2ZW50KCAicGFnZWJlZm9yZWNoYW5nZSIgKSwKCQkJdHJpZ2dlckRhdGEgPSB7IHRvUGFnZTogdG9QYWdlLCBvcHRpb25zOiBzZXR0aW5ncyB9OwoKCQkvLyBMZXQgbGlzdGVuZXJzIGtub3cgd2UncmUgYWJvdXQgdG8gY2hhbmdlIHRoZSBjdXJyZW50IHBhZ2UuCgkJbXBjLnRyaWdnZXIoIHBiY0V2ZW50LCB0cmlnZ2VyRGF0YSApOwoKCQkvLyBJZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyBwcmV2ZW50ZWQsIHN0b3AgaGVyZSEKCQlpZiAoIHBiY0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBXZSBhbGxvdyAicGFnZWJlZm9yZWNoYW5nZSIgb2JzZXJ2ZXJzIHRvIG1vZGlmeSB0aGUgdG9QYWdlIGluIHRoZSB0cmlnZ2VyCgkJLy8gZGF0YSB0byBhbGxvdyBmb3IgcmVkaXJlY3RzLiBNYWtlIHN1cmUgb3VyIHRvUGFnZSBpcyB1cGRhdGVkLgoKCQl0b1BhZ2UgPSB0cmlnZ2VyRGF0YS50b1BhZ2U7CgoJCS8vIFNldCB0aGUgaXNQYWdlVHJhbnNpdGlvbmluZyBmbGFnIHRvIHByZXZlbnQgYW55IHJlcXVlc3RzIGZyb20KCQkvLyBlbnRlcmluZyB0aGlzIG1ldGhvZCB3aGlsZSB3ZSBhcmUgaW4gdGhlIG1pZHN0IG9mIGxvYWRpbmcgYSBwYWdlCgkJLy8gb3IgdHJhbnNpdGlvbmluZy4KCgkJaXNQYWdlVHJhbnNpdGlvbmluZyA9IHRydWU7CgoJCS8vIElmIHRoZSBjYWxsZXIgcGFzc2VkIHVzIGEgdXJsLCBjYWxsIGxvYWRQYWdlKCkKCQkvLyB0byBtYWtlIHN1cmUgaXQgaXMgbG9hZGVkIGludG8gdGhlIERPTS4gV2UnbGwgbGlzdGVuCgkJLy8gdG8gdGhlIHByb21pc2Ugb2JqZWN0IGl0IHJldHVybnMgc28gd2Uga25vdyB3aGVuCgkJLy8gaXQgaXMgZG9uZSBsb2FkaW5nIG9yIGlmIGFuIGVycm9yIG9jdXJyZWQuCgkJaWYgKCB0eXBlb2YgdG9QYWdlID09PSAic3RyaW5nIiApIHsKCQkJJC5tb2JpbGUubG9hZFBhZ2UoIHRvUGFnZSwgc2V0dGluZ3MgKQoJCQkJLmRvbmUoZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgbmV3UGFnZSwgZHVwQ2FjaGVkUGFnZSApIHsKCQkJCQlpc1BhZ2VUcmFuc2l0aW9uaW5nID0gZmFsc2U7CgkJCQkJb3B0aW9ucy5kdXBsaWNhdGVDYWNoZWRQYWdlID0gZHVwQ2FjaGVkUGFnZTsKCQkJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlKCBuZXdQYWdlLCBvcHRpb25zICk7CgkJCQl9KQoJCQkJLmZhaWwoZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHsKCQkJCQlpc1BhZ2VUcmFuc2l0aW9uaW5nID0gZmFsc2U7CgoJCQkJCS8vY2xlYXIgb3V0IHRoZSBhY3RpdmUgYnV0dG9uIHN0YXRlCgkJCQkJcmVtb3ZlQWN0aXZlTGlua0NsYXNzKCB0cnVlICk7CgoJCQkJCS8vcmVsZWFzZSB0cmFuc2l0aW9uIGxvY2sgc28gbmF2aWdhdGlvbiBpcyBmcmVlIGFnYWluCgkJCQkJcmVsZWFzZVBhZ2VUcmFuc2l0aW9uTG9jaygpOwoJCQkJCXNldHRpbmdzLnBhZ2VDb250YWluZXIudHJpZ2dlciggInBhZ2VjaGFuZ2VmYWlsZWQiLCB0cmlnZ2VyRGF0YSApOwoJCQkJfSk7CgkJCXJldHVybjsKCQl9CgoJCS8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZmlyc3QtcGFnZSBvZiB0aGUgYXBwbGljYXRpb24sIHdlIG5lZWQgdG8gbWFrZQoJCS8vIHN1cmUgc2V0dGluZ3MuZGF0YVVybCBpcyBzZXQgdG8gdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50IHVybC4gVGhpcyBhbGxvd3MKCQkvLyB1cyB0byBhdm9pZCBnZW5lcmF0aW5nIGEgZG9jdW1lbnQgdXJsIHdpdGggYW4gaWQgaGFzaCBpbiB0aGUgY2FzZSB3aGVyZSB0aGUKCQkvLyBmaXJzdC1wYWdlIG9mIHRoZSBkb2N1bWVudCBoYXMgYW4gaWQgYXR0cmlidXRlIHNwZWNpZmllZC4KCQlpZiAoIHRvUGFnZVsgMCBdID09PSAkLm1vYmlsZS5maXJzdFBhZ2VbIDAgXSAmJiAhc2V0dGluZ3MuZGF0YVVybCApIHsKCQkJc2V0dGluZ3MuZGF0YVVybCA9IGRvY3VtZW50VXJsLmhyZWZOb0hhc2g7CgkJfQoKCQkvLyBUaGUgY2FsbGVyIHBhc3NlZCB1cyBhIHJlYWwgcGFnZSBET00gZWxlbWVudC4gVXBkYXRlIG91cgoJCS8vIGludGVybmFsIHN0YXRlIGFuZCB0aGVuIHRyaWdnZXIgYSB0cmFuc2l0aW9uIHRvIHRoZSBwYWdlLgoJCXZhciBmcm9tUGFnZSA9IHNldHRpbmdzLmZyb21QYWdlLAoJCQl1cmwgPSAoIHNldHRpbmdzLmRhdGFVcmwgJiYgcGF0aC5jb252ZXJ0VXJsVG9EYXRhVXJsKCBzZXR0aW5ncy5kYXRhVXJsICkgKSB8fCB0b1BhZ2UuanFtRGF0YSggInVybCIgKSwKCQkJLy8gVGhlIHBhZ2VVcmwgdmFyIGlzIHVzdWFsbHkgdGhlIHNhbWUgYXMgdXJsLCBleGNlcHQgd2hlbiB1cmwgaXMgb2JzY3VyZWQgYXMgYSBkaWFsb2cgdXJsLiBwYWdlVXJsIGFsd2F5cyBjb250YWlucyB0aGUgZmlsZSBwYXRoCgkJCXBhZ2VVcmwgPSB1cmwsCgkJCWZpbGVVcmwgPSBwYXRoLmdldEZpbGVQYXRoKCB1cmwgKSwKCQkJYWN0aXZlID0gdXJsSGlzdG9yeS5nZXRBY3RpdmUoKSwKCQkJYWN0aXZlSXNJbml0aWFsUGFnZSA9IHVybEhpc3RvcnkuYWN0aXZlSW5kZXggPT09IDAsCgkJCWhpc3RvcnlEaXIgPSAwLAoJCQlwYWdlVGl0bGUgPSBkb2N1bWVudC50aXRsZSwKCQkJaXNEaWFsb2cgPSBzZXR0aW5ncy5yb2xlID09PSAiZGlhbG9nIiB8fCB0b1BhZ2UuanFtRGF0YSggInJvbGUiICkgPT09ICJkaWFsb2ciOwoKCQkvLyBCeSBkZWZhdWx0LCB3ZSBwcmV2ZW50IGNoYW5nZVBhZ2UgcmVxdWVzdHMgd2hlbiB0aGUgZnJvbVBhZ2UgYW5kIHRvUGFnZQoJCS8vIGFyZSB0aGUgc2FtZSBlbGVtZW50LCBidXQgZm9sa3MgdGhhdCBnZW5lcmF0ZSBjb250ZW50IG1hbnVhbGx5L2R5bmFtaWNhbGx5CgkJLy8gYW5kIHJldXNlIHBhZ2VzIHdhbnQgdG8gYmUgYWJsZSB0byB0cmFuc2l0aW9uIHRvIHRoZSBzYW1lIHBhZ2UuIFRvIGFsbG93CgkJLy8gdGhpcywgdGhleSB3aWxsIG5lZWQgdG8gY2hhbmdlIHRoZSBkZWZhdWx0IHZhbHVlIG9mIGFsbG93U2FtZVBhZ2VUcmFuc2l0aW9uCgkJLy8gdG8gdHJ1ZSwgKk9SKiwgcGFzcyBpdCBpbiBhcyBhbiBvcHRpb24gd2hlbiB0aGV5IG1hbnVhbGx5IGNhbGwgY2hhbmdlUGFnZSgpLgoJCS8vIEl0IHNob3VsZCBiZSBub3RlZCB0aGF0IG91ciBkZWZhdWx0IHRyYW5zaXRpb24gYW5pbWF0aW9ucyBhc3N1bWUgdGhhdCB0aGUKCQkvLyBmb3JtUGFnZSBhbmQgdG9QYWdlIGFyZSBkaWZmZXJlbnQgZWxlbWVudHMsIHNvIHRoZXkgbWF5IGJlaGF2ZSB1bmV4cGVjdGVkbHkuCgkJLy8gSXQgaXMgdXAgdG8gdGhlIGRldmVsb3BlciB0aGF0IHR1cm5zIG9uIHRoZSBhbGxvd1NhbWVQYWdlVHJhbnNpdGlvbmEgb3B0aW9uCgkJLy8gdG8gZWl0aGVyIHR1cm4gb2ZmIHRyYW5zaXRpb24gYW5pbWF0aW9ucywgb3IgbWFrZSBzdXJlIHRoYXQgYW4gYXBwcm9wcmlhdGUKCQkvLyBhbmltYXRpb24gdHJhbnNpdGlvbiBpcyB1c2VkLgoJCWlmICggZnJvbVBhZ2UgJiYgZnJvbVBhZ2VbMF0gPT09IHRvUGFnZVswXSAmJiAhc2V0dGluZ3MuYWxsb3dTYW1lUGFnZVRyYW5zaXRpb24gKSB7CgkJCWlzUGFnZVRyYW5zaXRpb25pbmcgPSBmYWxzZTsKCQkJbXBjLnRyaWdnZXIoICJwYWdlY2hhbmdlIiwgdHJpZ2dlckRhdGEgKTsKCgkJCS8vIEV2ZW4gaWYgdGhlcmUgaXMgbm8gcGFnZSBjaGFuZ2UgdG8gYmUgZG9uZSwgd2Ugc2hvdWxkIGtlZXAgdGhlIHVybEhpc3RvcnkgaW4gc3luYyB3aXRoIHRoZSBoYXNoIGNoYW5nZXMKCQkJaWYgKCBzZXR0aW5ncy5mcm9tSGFzaENoYW5nZSApIHsKCQkJCXVybEhpc3RvcnkuZGlyZWN0SGFzaENoYW5nZSh7CgkJCQkJY3VycmVudFVybDoJdXJsLAoJCQkJCWlzQmFjazoJCWZ1bmN0aW9uKCkge30sCgkJCQkJaXNGb3J3YXJkOglmdW5jdGlvbigpIHt9CgkJCQl9KTsKCQkJfQoKCQkJcmV0dXJuOwoJCX0KCgkJLy8gV2UgbmVlZCB0byBtYWtlIHN1cmUgdGhlIHBhZ2Ugd2UgYXJlIGdpdmVuIGhhcyBhbHJlYWR5IGJlZW4gZW5oYW5jZWQuCgkJZW5oYW5jZVBhZ2UoIHRvUGFnZSwgc2V0dGluZ3Mucm9sZSApOwoKCQkvLyBJZiB0aGUgY2hhbmdlUGFnZSByZXF1ZXN0IHdhcyBzZW50IGZyb20gYSBoYXNoQ2hhbmdlIGV2ZW50LCBjaGVjayB0byBzZWUgaWYgdGhlCgkJLy8gcGFnZSBpcyBhbHJlYWR5IHdpdGhpbiB0aGUgdXJsSGlzdG9yeSBzdGFjay4gSWYgc28sIHdlJ2xsIGFzc3VtZSB0aGUgdXNlciBoaXQKCQkvLyB0aGUgZm9yd2FyZC9iYWNrIGJ1dHRvbiBhbmQgd2lsbCB0cnkgdG8gbWF0Y2ggdGhlIHRyYW5zaXRpb24gYWNjb3JkaW5nbHkuCgkJaWYgKCBzZXR0aW5ncy5mcm9tSGFzaENoYW5nZSApIHsKCQkJdXJsSGlzdG9yeS5kaXJlY3RIYXNoQ2hhbmdlKHsKCQkJCWN1cnJlbnRVcmw6CXVybCwKCQkJCWlzQmFjazoJCWZ1bmN0aW9uKCkgeyBoaXN0b3J5RGlyID0gLTE7IH0sCgkJCQlpc0ZvcndhcmQ6CWZ1bmN0aW9uKCkgeyBoaXN0b3J5RGlyID0gMTsgfQoJCQl9KTsKCQl9CgoJCS8vIEtpbGwgdGhlIGtleWJvYXJkLgoJCS8vIFhYWF9qYmxhczogV2UgbmVlZCB0byBzdG9wIGNyYXdsaW5nIHRoZSBlbnRpcmUgZG9jdW1lbnQgdG8ga2lsbCBmb2N1cy4gSW5zdGVhZCwKCQkvLyAgICAgICAgICAgIHdlIHNob3VsZCBiZSB0cmFja2luZyBmb2N1cyB3aXRoIGEgZGVsZWdhdGUoKSBoYW5kbGVyIHNvIHdlIGFscmVhZHkgaGF2ZQoJCS8vICAgICAgICAgICAgdGhlIGVsZW1lbnQgaW4gaGFuZCBhdCB0aGlzIHBvaW50LgoJCS8vIFdyYXAgdGhpcyBpbiBhIHRyeS9jYXRjaCBibG9jayBzaW5jZSBJRTkgdGhyb3cgIlVuc3BlY2lmaWVkIGVycm9yIiBpZiBkb2N1bWVudC5hY3RpdmVFbGVtZW50CgkJLy8gaXMgdW5kZWZpbmVkIHdoZW4gd2UgYXJlIGluIGFuIElGcmFtZS4KCQl0cnkgewoJCQlpZiAoIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnYm9keScgKSB7CgkJCQkkKCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICkuYmx1cigpOwoJCQl9IGVsc2UgewoJCQkJJCggImlucHV0OmZvY3VzLCB0ZXh0YXJlYTpmb2N1cywgc2VsZWN0OmZvY3VzIiApLmJsdXIoKTsKCQkJfQoJCX0gY2F0Y2goIGUgKSB7fQoKCQkvLyBSZWNvcmQgd2hldGhlciB3ZSBhcmUgYXQgYSBwbGFjZSBpbiBoaXN0b3J5IHdoZXJlIGEgZGlhbG9nIHVzZWQgdG8gYmUgLSBpZiBzbywgZG8gbm90IGFkZCBhIG5ldyBoaXN0b3J5IGVudHJ5IGFuZCBkbyBub3QgY2hhbmdlIHRoZSBoYXNoIGVpdGhlcgoJCXZhciBhbHJlYWR5VGhlcmUgPSBmYWxzZTsKCgkJLy8gSWYgd2UncmUgZGlzcGxheWluZyB0aGUgcGFnZSBhcyBhIGRpYWxvZywgd2UgZG9uJ3Qgd2FudCB0aGUgdXJsCgkJLy8gZm9yIHRoZSBkaWFsb2cgY29udGVudCB0byBiZSB1c2VkIGluIHRoZSBoYXNoLiBJbnN0ZWFkLCB3ZSB3YW50CgkJLy8gdG8gYXBwZW5kIHRoZSBkaWFsb2dIYXNoS2V5IHRvIHRoZSB1cmwgb2YgdGhlIGN1cnJlbnQgcGFnZS4KCQlpZiAoIGlzRGlhbG9nICYmIGFjdGl2ZSApIHsKCQkJLy8gb24gdGhlIGluaXRpYWwgcGFnZSBsb2FkIGFjdGl2ZS51cmwgaXMgdW5kZWZpbmVkIGFuZCBpbiB0aGF0IGNhc2Ugc2hvdWxkCgkJCS8vIGJlIGFuIGVtcHR5IHN0cmluZy4gTW92aW5nIHRoZSB1bmRlZmluZWQgLT4gZW1wdHkgc3RyaW5nIGJhY2sgaW50bwoJCQkvLyB1cmxIaXN0b3J5LmFkZE5ldyBzZWVtZWQgaW1wcnVkZW50IGdpdmVuIHVuZGVmaW5lZCBiZXR0ZXIgcmVwcmVzZW50cwoJCQkvLyB0aGUgdXJsIHN0YXRlCgoJCQkvLyBJZiB3ZSBhcmUgYXQgYSBwbGFjZSBpbiBoaXN0b3J5IHRoYXQgb25jZSBiZWxvbmdlZCB0byBhIGRpYWxvZywgcmV1c2UKCQkJLy8gdGhpcyBzdGF0ZSB3aXRob3V0IGFkZGluZyB0byB1cmxIaXN0b3J5IGFuZCB3aXRob3V0IG1vZGlmeWluZyB0aGUgaGFzaC4KCQkJLy8gSG93ZXZlciwgaWYgYSBkaWFsb2cgaXMgYWxyZWFkeSBkaXNwbGF5ZWQgYXQgdGhpcyBwb2ludCwgYW5kIHdlJ3JlCgkJCS8vIGFib3V0IHRvIGRpc3BsYXkgYW5vdGhlciBkaWFsb2csIHRoZW4gd2UgbXVzdCBhZGQgYW5vdGhlciBoYXNoIGFuZAoJCQkvLyBoaXN0b3J5IGVudHJ5IG9uIHRvcCBzbyB0aGF0IG9uZSBtYXkgbmF2aWdhdGUgYmFjayB0byB0aGUgb3JpZ2luYWwgZGlhbG9nCgkJCWlmICggYWN0aXZlLnVybC5pbmRleE9mKCBkaWFsb2dIYXNoS2V5ICkgPiAtMSAmJiAhJC5tb2JpbGUuYWN0aXZlUGFnZS5pcyggIi51aS1kaWFsb2ciICkgKSB7CgkJCQlzZXR0aW5ncy5jaGFuZ2VIYXNoID0gZmFsc2U7CgkJCQlhbHJlYWR5VGhlcmUgPSB0cnVlOwoJCQl9CgoJCQkvLyBOb3JtYWxseSwgd2UgdGFjayBvbiBhIGRpYWxvZyBoYXNoIGtleSwgYnV0IGlmIHRoaXMgaXMgdGhlIGxvY2F0aW9uIG9mIGEgc3RhbGUgZGlhbG9nLAoJCQkvLyB3ZSByZXVzZSB0aGUgVVJMIGZyb20gdGhlIGVudHJ5CgkJCXVybCA9ICggYWN0aXZlLnVybCB8fCAiIiApICsgKCBhbHJlYWR5VGhlcmUgPyAiIiA6IGRpYWxvZ0hhc2hLZXkgKTsKCgkJCS8vIHRhY2sgb24gYW5vdGhlciBkaWFsb2dIYXNoS2V5IGlmIHRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIGluaXRpYWwgaGFzaAoJCQkvLyB0aGlzIG1ha2VzIHN1cmUgdGhhdCBhIGhpc3RvcnkgZW50cnkgaXMgY3JlYXRlZCBmb3IgdGhpcyBkaWFsb2cKCQkJaWYgKCB1cmxIaXN0b3J5LmFjdGl2ZUluZGV4ID09PSAwICYmIHVybCA9PT0gdXJsSGlzdG9yeS5pbml0aWFsRHN0ICkgewoJCQkJdXJsICs9IGRpYWxvZ0hhc2hLZXk7CgkJCX0KCQl9CgoJCS8vIFNldCB0aGUgbG9jYXRpb24gaGFzaC4KCQlpZiAoIHNldHRpbmdzLmNoYW5nZUhhc2ggIT09IGZhbHNlICYmIHVybCApIHsKCQkJLy9kaXNhYmxlIGhhc2ggbGlzdGVuaW5nIHRlbXBvcmFyaWx5CgkJCXVybEhpc3RvcnkuaWdub3JlTmV4dEhhc2hDaGFuZ2UgPSB0cnVlOwoJCQkvL3VwZGF0ZSBoYXNoIGFuZCBoaXN0b3J5CgkJCXBhdGguc2V0KCB1cmwgKTsKCQl9CgoJCS8vIGlmIHRpdGxlIGVsZW1lbnQgd2Fzbid0IGZvdW5kLCB0cnkgdGhlIHBhZ2UgZGl2IGRhdGEgYXR0ciB0b28KCQkvLyBJZiB0aGlzIGlzIGEgZGVlcC1saW5rIG9yIGEgcmVsb2FkICggYWN0aXZlID09PSB1bmRlZmluZWQgKSB0aGVuIGp1c3QgdXNlIHBhZ2VUaXRsZQoJCXZhciBuZXdQYWdlVGl0bGUgPSAoICFhY3RpdmUgKT8gcGFnZVRpdGxlIDogdG9QYWdlLmpxbURhdGEoICJ0aXRsZSIgKSB8fCB0b1BhZ2UuY2hpbGRyZW4oICI6anFtRGF0YShyb2xlPSdoZWFkZXInKSIgKS5maW5kKCAiLnVpLXRpdGxlIiApLmdldEVuY29kZWRUZXh0KCk7CgkJaWYgKCAhIW5ld1BhZ2VUaXRsZSAmJiBwYWdlVGl0bGUgPT09IGRvY3VtZW50LnRpdGxlICkgewoJCQlwYWdlVGl0bGUgPSBuZXdQYWdlVGl0bGU7CgkJfQoJCWlmICggIXRvUGFnZS5qcW1EYXRhKCAidGl0bGUiICkgKSB7CgkJCXRvUGFnZS5qcW1EYXRhKCAidGl0bGUiLCBwYWdlVGl0bGUgKTsKCQl9CgoJCS8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgdHJhbnNpdGlvbiBkZWZpbmVkLgoJCXNldHRpbmdzLnRyYW5zaXRpb24gPSBzZXR0aW5ncy50cmFuc2l0aW9uIHx8CgkJCSggKCBoaXN0b3J5RGlyICYmICFhY3RpdmVJc0luaXRpYWxQYWdlICkgPyBhY3RpdmUudHJhbnNpdGlvbiA6IHVuZGVmaW5lZCApIHx8CgkJCSggaXNEaWFsb2cgPyAkLm1vYmlsZS5kZWZhdWx0RGlhbG9nVHJhbnNpdGlvbiA6ICQubW9iaWxlLmRlZmF1bHRQYWdlVHJhbnNpdGlvbiApOwoKCQkvL2FkZCBwYWdlIHRvIGhpc3Rvcnkgc3RhY2sgaWYgaXQncyBub3QgYmFjayBvciBmb3J3YXJkCgkJaWYgKCAhaGlzdG9yeURpciApIHsKCQkJLy8gT3ZlcndyaXRlIHRoZSBjdXJyZW50IGVudHJ5IGlmIGl0J3MgYSBsZWZ0b3ZlciBmcm9tIGEgZGlhbG9nCgkJCWlmICggYWxyZWFkeVRoZXJlICkgewoJCQkJdXJsSGlzdG9yeS5hY3RpdmVJbmRleCA9IE1hdGgubWF4KCAwLCB1cmxIaXN0b3J5LmFjdGl2ZUluZGV4IC0gMSApOwoJCQl9CgkJCXVybEhpc3RvcnkuYWRkTmV3KCB1cmwsIHNldHRpbmdzLnRyYW5zaXRpb24sIHBhZ2VUaXRsZSwgcGFnZVVybCwgc2V0dGluZ3Mucm9sZSApOwoJCX0KCgkJLy9zZXQgcGFnZSB0aXRsZQoJCWRvY3VtZW50LnRpdGxlID0gdXJsSGlzdG9yeS5nZXRBY3RpdmUoKS50aXRsZTsKCgkJLy9zZXQgInRvUGFnZSIgYXMgYWN0aXZlUGFnZQoJCSQubW9iaWxlLmFjdGl2ZVBhZ2UgPSB0b1BhZ2U7CgoJCS8vIElmIHdlJ3JlIG5hdmlnYXRpbmcgYmFjayBpbiB0aGUgVVJMIGhpc3RvcnksIHNldCByZXZlcnNlIGFjY29yZGluZ2x5LgoJCXNldHRpbmdzLnJldmVyc2UgPSBzZXR0aW5ncy5yZXZlcnNlIHx8IGhpc3RvcnlEaXIgPCAwOwoKCQl0cmFuc2l0aW9uUGFnZXMoIHRvUGFnZSwgZnJvbVBhZ2UsIHNldHRpbmdzLnRyYW5zaXRpb24sIHNldHRpbmdzLnJldmVyc2UgKQoJCQkuZG9uZShmdW5jdGlvbiggbmFtZSwgcmV2ZXJzZSwgJHRvLCAkZnJvbSwgYWxyZWFkeUZvY3VzZWQgKSB7CgkJCQlyZW1vdmVBY3RpdmVMaW5rQ2xhc3MoKTsKCgkJCQkvL2lmIHRoZXJlJ3MgYSBkdXBsaWNhdGVDYWNoZWRQYWdlLCByZW1vdmUgaXQgZnJvbSB0aGUgRE9NIG5vdyB0aGF0IGl0J3MgaGlkZGVuCgkJCQlpZiAoIHNldHRpbmdzLmR1cGxpY2F0ZUNhY2hlZFBhZ2UgKSB7CgkJCQkJc2V0dGluZ3MuZHVwbGljYXRlQ2FjaGVkUGFnZS5yZW1vdmUoKTsKCQkJCX0KCgkJCQkvLyBTZW5kIGZvY3VzIHRvIHRoZSBuZXdseSBzaG93biBwYWdlLiBNb3ZlZCBmcm9tIHByb21pc2UgLmRvbmUgYmluZGluZyBpbiB0cmFuc2l0aW9uUGFnZXMKCQkJCS8vIGl0c2VsZiB0byBhdm9pZCBpZSBidWcgdGhhdCByZXBvcnRzIG9mZnNldFdpZHRoIGFzID4gMCAoY29yZSBjaGVjayBmb3IgdmlzaWJpbGl0eSkKCQkJCS8vIGRlc3BpdGUgdmlzaWJpbGl0eTogaGlkZGVuIGFkZHJlc3NlcyBpc3N1ZSAjMjk2NQoJCQkJLy8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbW9iaWxlL2lzc3Vlcy8yOTY1CgkJCQlpZiAoICFhbHJlYWR5Rm9jdXNlZCApIHsKCQkJCQkkLm1vYmlsZS5mb2N1c1BhZ2UoIHRvUGFnZSApOwoJCQkJfQoKCQkJCXJlbGVhc2VQYWdlVHJhbnNpdGlvbkxvY2soKTsKCgkJCQkvLyBMZXQgbGlzdGVuZXJzIGtub3cgd2UncmUgYWxsIGRvbmUgY2hhbmdpbmcgdGhlIGN1cnJlbnQgcGFnZS4KCQkJCW1wYy50cmlnZ2VyKCAicGFnZWNoYW5nZSIsIHRyaWdnZXJEYXRhICk7CgkJCX0pOwoJfTsKCgkkLm1vYmlsZS5jaGFuZ2VQYWdlLmRlZmF1bHRzID0gewoJCXRyYW5zaXRpb246IHVuZGVmaW5lZCwKCQlyZXZlcnNlOiBmYWxzZSwKCQljaGFuZ2VIYXNoOiB0cnVlLAoJCWZyb21IYXNoQ2hhbmdlOiBmYWxzZSwKCQlyb2xlOiB1bmRlZmluZWQsIC8vIEJ5IGRlZmF1bHQgd2UgcmVseSBvbiB0aGUgcm9sZSBkZWZpbmVkIGJ5IHRoZSBAZGF0YS1yb2xlIGF0dHJpYnV0ZS4KCQlkdXBsaWNhdGVDYWNoZWRQYWdlOiB1bmRlZmluZWQsCgkJcGFnZUNvbnRhaW5lcjogdW5kZWZpbmVkLAoJCXNob3dMb2FkTXNnOiB0cnVlLCAvL2xvYWRpbmcgbWVzc2FnZSBzaG93cyBieSBkZWZhdWx0IHdoZW4gcGFnZXMgYXJlIGJlaW5nIGZldGNoZWQgZHVyaW5nIGNoYW5nZVBhZ2UKCQlkYXRhVXJsOiB1bmRlZmluZWQsCgkJZnJvbVBhZ2U6IHVuZGVmaW5lZCwKCQlhbGxvd1NhbWVQYWdlVHJhbnNpdGlvbjogZmFsc2UKCX07CgovKiBFdmVudCBCaW5kaW5ncyAtIGhhc2hjaGFuZ2UsIHN1Ym1pdCwgYW5kIGNsaWNrICovCglmdW5jdGlvbiBmaW5kQ2xvc2VzdExpbmsoIGVsZSApCgl7CgkJd2hpbGUgKCBlbGUgKSB7CgkJCS8vIExvb2sgZm9yIHRoZSBjbG9zZXN0IGVsZW1lbnQgd2l0aCBhIG5vZGVOYW1lIG9mICJhIi4KCQkJLy8gTm90ZSB0aGF0IHdlIGFyZSBjaGVja2luZyBpZiB3ZSBoYXZlIGEgdmFsaWQgbm9kZU5hbWUKCQkJLy8gYmVmb3JlIGF0dGVtcHRpbmcgdG8gYWNjZXNzIGl0LiBUaGlzIGlzIGJlY2F1c2UgdGhlCgkJCS8vIG5vZGUgd2UgZ2V0IGNhbGxlZCB3aXRoIGNvdWxkIGhhdmUgb3JpZ2luYXRlZCBmcm9tIHdpdGhpbgoJCQkvLyBhbiBlbWJlZGRlZCBTVkcgZG9jdW1lbnQgd2hlcmUgc29tZSBzeW1ib2wgaW5zdGFuY2UgZWxlbWVudHMKCQkJLy8gZG9uJ3QgaGF2ZSBub2RlTmFtZSBkZWZpbmVkIG9uIHRoZW0sIG9yIHN0cmluZ3MgYXJlIG9mIHR5cGUKCQkJLy8gU1ZHQW5pbWF0ZWRTdHJpbmcuCgkJCWlmICggKCB0eXBlb2YgZWxlLm5vZGVOYW1lID09PSAic3RyaW5nIiApICYmIGVsZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAiYSIgKSB7CgkJCQlicmVhazsKCQkJfQoJCQllbGUgPSBlbGUucGFyZW50Tm9kZTsKCQl9CgkJcmV0dXJuIGVsZTsKCX0KCgkvLyBUaGUgYmFzZSBVUkwgZm9yIGFueSBnaXZlbiBlbGVtZW50IGRlcGVuZHMgb24gdGhlIHBhZ2UgaXQgcmVzaWRlcyBpbi4KCWZ1bmN0aW9uIGdldENsb3Nlc3RCYXNlVXJsKCBlbGUgKQoJewoJCS8vIEZpbmQgdGhlIGNsb3Nlc3QgcGFnZSBhbmQgZXh0cmFjdCBvdXQgaXRzIHVybC4KCQl2YXIgdXJsID0gJCggZWxlICkuY2xvc2VzdCggIi51aS1wYWdlIiApLmpxbURhdGEoICJ1cmwiICksCgkJCWJhc2UgPSBkb2N1bWVudEJhc2UuaHJlZk5vSGFzaDsKCgkJaWYgKCAhdXJsIHx8ICFwYXRoLmlzUGF0aCggdXJsICkgKSB7CgkJCXVybCA9IGJhc2U7CgkJfQoKCQlyZXR1cm4gcGF0aC5tYWtlVXJsQWJzb2x1dGUoIHVybCwgYmFzZSk7Cgl9CgoJLy9UaGUgZm9sbG93aW5nIGV2ZW50IGJpbmRpbmdzIHNob3VsZCBiZSBib3VuZCBhZnRlciBtb2JpbGVpbml0IGhhcyBiZWVuIHRyaWdnZXJlZAoJLy90aGUgZm9sbG93aW5nIGRlZmVycmVkIGlzIHJlc29sdmVkIGluIHRoZSBpbml0IGZpbGUKCSQubW9iaWxlLm5hdnJlYWR5RGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7CgkkLm1vYmlsZS5uYXZyZWFkeURlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7CgkJLy9iaW5kIHRvIGZvcm0gc3VibWl0IGV2ZW50cywgaGFuZGxlIHdpdGggQWpheAoJCSQoIGRvY3VtZW50ICkuZGVsZWdhdGUoICJmb3JtIiwgInN1Ym1pdCIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJdmFyICR0aGlzID0gJCggdGhpcyApOwoKCQkJaWYgKCAhJC5tb2JpbGUuYWpheEVuYWJsZWQgfHwKCQkJCQkvLyB0ZXN0IHRoYXQgdGhlIGZvcm0gaXMsIGl0c2VsZiwgYWpheCBmYWxzZQoJCQkJCSR0aGlzLmlzKCAiOmpxbURhdGEoYWpheD0nZmFsc2UnKSIgKSB8fAoJCQkJCS8vIHRlc3QgdGhhdCAkLm1vYmlsZS5pZ25vcmVDb250ZW50RW5hYmxlZCBpcyBzZXQgYW5kCgkJCQkJLy8gdGhlIGZvcm0gb3Igb25lIG9mIGl0J3MgcGFyZW50cyBpcyBhamF4PWZhbHNlCgkJCQkJISR0aGlzLmpxbUhpamFja2FibGUoKS5sZW5ndGggKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCXZhciB0eXBlID0gJHRoaXMuYXR0ciggIm1ldGhvZCIgKSwKCQkJCXRhcmdldCA9ICR0aGlzLmF0dHIoICJ0YXJnZXQiICksCgkJCQl1cmwgPSAkdGhpcy5hdHRyKCAiYWN0aW9uIiApOwoKCQkJLy8gSWYgbm8gYWN0aW9uIGlzIHNwZWNpZmllZCwgYnJvd3NlcnMgZGVmYXVsdCB0byB1c2luZyB0aGUKCQkJLy8gVVJMIG9mIHRoZSBkb2N1bWVudCBjb250YWluaW5nIHRoZSBmb3JtLiBTaW5jZSB3ZSBkeW5hbWljYWxseQoJCQkvLyBwdWxsIGluIHBhZ2VzIGZyb20gZXh0ZXJuYWwgZG9jdW1lbnRzLCB0aGUgZm9ybSBzaG91bGQgc3VibWl0CgkJCS8vIHRvIHRoZSBVUkwgZm9yIHRoZSBzb3VyY2UgZG9jdW1lbnQgb2YgdGhlIHBhZ2UgY29udGFpbmluZwoJCQkvLyB0aGUgZm9ybS4KCQkJaWYgKCAhdXJsICkgewoJCQkJLy8gR2V0IHRoZSBAZGF0YS11cmwgZm9yIHRoZSBwYWdlIGNvbnRhaW5pbmcgdGhlIGZvcm0uCgkJCQl1cmwgPSBnZXRDbG9zZXN0QmFzZVVybCggJHRoaXMgKTsKCQkJCWlmICggdXJsID09PSBkb2N1bWVudEJhc2UuaHJlZk5vSGFzaCApIHsKCQkJCQkvLyBUaGUgdXJsIHdlIGdvdCBiYWNrIG1hdGNoZXMgdGhlIGRvY3VtZW50IGJhc2UsCgkJCQkJLy8gd2hpY2ggbWVhbnMgdGhlIHBhZ2UgbXVzdCBiZSBhbiBpbnRlcm5hbC9lbWJlZGRlZCBwYWdlLAoJCQkJCS8vIHNvIGRlZmF1bHQgdG8gdXNpbmcgdGhlIGFjdHVhbCBkb2N1bWVudCB1cmwgYXMgYSBicm93c2VyCgkJCQkJLy8gd291bGQuCgkJCQkJdXJsID0gZG9jdW1lbnRVcmwuaHJlZk5vU2VhcmNoOwoJCQkJfQoJCQl9CgoJCQl1cmwgPSBwYXRoLm1ha2VVcmxBYnNvbHV0ZSggIHVybCwgZ2V0Q2xvc2VzdEJhc2VVcmwoICR0aGlzICkgKTsKCgkJCWlmICggKCBwYXRoLmlzRXh0ZXJuYWwoIHVybCApICYmICFwYXRoLmlzUGVybWl0dGVkQ3Jvc3NEb21haW5SZXF1ZXN0KCBkb2N1bWVudFVybCwgdXJsICkgKSB8fCB0YXJnZXQgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCSQubW9iaWxlLmNoYW5nZVBhZ2UoCgkJCQl1cmwsCgkJCQl7CgkJCQkJdHlwZToJCXR5cGUgJiYgdHlwZS5sZW5ndGggJiYgdHlwZS50b0xvd2VyQ2FzZSgpIHx8ICJnZXQiLAoJCQkJCWRhdGE6CQkkdGhpcy5zZXJpYWxpemUoKSwKCQkJCQl0cmFuc2l0aW9uOgkkdGhpcy5qcW1EYXRhKCAidHJhbnNpdGlvbiIgKSwKCQkJCQlyZXZlcnNlOgkkdGhpcy5qcW1EYXRhKCAiZGlyZWN0aW9uIiApID09PSAicmV2ZXJzZSIsCgkJCQkJcmVsb2FkUGFnZToJdHJ1ZQoJCQkJfQoJCQkpOwoJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCX0pOwoKCQkvL2FkZCBhY3RpdmUgc3RhdGUgb24gdmNsaWNrCgkJJCggZG9jdW1lbnQgKS5iaW5kKCAidmNsaWNrIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkvLyBpZiB0aGlzIGlzbid0IGEgbGVmdCBjbGljayB3ZSBkb24ndCBjYXJlLiBJdHMgaW1wb3J0YW50IHRvIG5vdGUKCQkJLy8gdGhhdCB3aGVuIHRoZSB2aXJ0dWFsIGV2ZW50IGlzIGdlbmVyYXRlZCBpdCB3aWxsIGNyZWF0ZSB0aGUgd2hpY2ggYXR0cgoJCQlpZiAoIGV2ZW50LndoaWNoID4gMSB8fCAhJC5tb2JpbGUubGlua0JpbmRpbmdFbmFibGVkICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQl2YXIgbGluayA9IGZpbmRDbG9zZXN0TGluayggZXZlbnQudGFyZ2V0ICk7CgoJCQkvLyBzcGxpdCBmcm9tIHRoZSBwcmV2aW91cyByZXR1cm4gbG9naWMgdG8gYXZvaWQgZmluZCBjbG9zZXN0IHdoZXJlIHBvc3NpYmxlCgkJCS8vIFRPRE8gdGVhY2ggJC5tb2JpbGUuaGlqYWNrYWJsZSB0byBvcGVyYXRlIG9uIHJhdyBkb20gZWxlbWVudHMgc28gdGhlIGxpbmsgd3JhcHBpbmcKCQkJLy8gY2FuIGJlIGF2b2lkZWQKCQkJaWYgKCAhJCggbGluayApLmpxbUhpamFja2FibGUoKS5sZW5ndGggKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCWlmICggbGluayApIHsKCQkJCWlmICggcGF0aC5wYXJzZVVybCggbGluay5nZXRBdHRyaWJ1dGUoICJocmVmIiApIHx8ICIjIiApLmhhc2ggIT09ICIjIiApIHsKCQkJCQlyZW1vdmVBY3RpdmVMaW5rQ2xhc3MoIHRydWUgKTsKCQkJCQkkYWN0aXZlQ2xpY2tlZExpbmsgPSAkKCBsaW5rICkuY2xvc2VzdCggIi51aS1idG4iICkubm90KCAiLnVpLWRpc2FibGVkIiApOwoJCQkJCSRhY3RpdmVDbGlja2VkTGluay5hZGRDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJCX0KCQkJfQoJCX0pOwoKCQkvLyBjbGljayByb3V0aW5nIC0gZGlyZWN0IHRvIEhUVFAgb3IgQWpheCwgYWNjb3JkaW5nbHkKCQkkKCBkb2N1bWVudCApLmJpbmQoICJjbGljayIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJaWYgKCAhJC5tb2JpbGUubGlua0JpbmRpbmdFbmFibGVkICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQl2YXIgbGluayA9IGZpbmRDbG9zZXN0TGluayggZXZlbnQudGFyZ2V0ICksICRsaW5rID0gJCggbGluayApLCBodHRwQ2xlYW51cDsKCgkJCS8vIElmIHRoZXJlIGlzIG5vIGxpbmsgYXNzb2NpYXRlZCB3aXRoIHRoZSBjbGljayBvciBpdHMgbm90IGEgbGVmdAoJCQkvLyBjbGljayB3ZSB3YW50IHRvIGlnbm9yZSB0aGUgY2xpY2sKCQkJLy8gVE9ETyB0ZWFjaCAkLm1vYmlsZS5oaWphY2thYmxlIHRvIG9wZXJhdGUgb24gcmF3IGRvbSBlbGVtZW50cyBzbyB0aGUgbGluayB3cmFwcGluZwoJCQkvLyBjYW4gYmUgYXZvaWRlZAoJCQlpZiAoICFsaW5rIHx8IGV2ZW50LndoaWNoID4gMSB8fCAhJGxpbmsuanFtSGlqYWNrYWJsZSgpLmxlbmd0aCApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy9yZW1vdmUgYWN0aXZlIGxpbmsgY2xhc3MgaWYgZXh0ZXJuYWwgKHRoZW4gaXQgd29uJ3QgYmUgdGhlcmUgaWYgeW91IGNvbWUgYmFjaykKCQkJaHR0cENsZWFudXAgPSBmdW5jdGlvbigpIHsKCQkJCXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyByZW1vdmVBY3RpdmVMaW5rQ2xhc3MoIHRydWUgKTsgfSwgMjAwICk7CgkJCX07CgoJCQkvL2lmIHRoZXJlJ3MgYSBkYXRhLXJlbD1iYWNrIGF0dHIsIGdvIGJhY2sgaW4gaGlzdG9yeQoJCQlpZiAoICRsaW5rLmlzKCAiOmpxbURhdGEocmVsPSdiYWNrJykiICkgKSB7CgkJCQkkLm1vYmlsZS5iYWNrKCk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCgkJCXZhciBiYXNlVXJsID0gZ2V0Q2xvc2VzdEJhc2VVcmwoICRsaW5rICksCgoJCQkJLy9nZXQgaHJlZiwgaWYgZGVmaW5lZCwgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gZW1wdHkgaGFzaAoJCQkJaHJlZiA9IHBhdGgubWFrZVVybEFic29sdXRlKCAkbGluay5hdHRyKCAiaHJlZiIgKSB8fCAiIyIsIGJhc2VVcmwgKTsKCgkJCS8vaWYgYWpheCBpcyBkaXNhYmxlZCwgZXhpdCBlYXJseQoJCQlpZiAoICEkLm1vYmlsZS5hamF4RW5hYmxlZCAmJiAhcGF0aC5pc0VtYmVkZGVkUGFnZSggaHJlZiApICkgewoJCQkJaHR0cENsZWFudXAoKTsKCQkJCS8vdXNlIGRlZmF1bHQgY2xpY2sgaGFuZGxpbmcKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gWFhYX2pibGFzOiBJZGVhbGx5IGxpbmtzIHRvIGFwcGxpY2F0aW9uIHBhZ2VzIHNob3VsZCBiZSBzcGVjaWZpZWQgYXMKCQkJLy8gICAgICAgICAgICBhbiB1cmwgdG8gdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50IHdpdGggYSBoYXNoIHRoYXQgaXMgZWl0aGVyCgkJCS8vICAgICAgICAgICAgdGhlIHNpdGUgcmVsYXRpdmUgcGF0aCBvciBpZCB0byB0aGUgcGFnZS4gQnV0IHNvbWUgb2YgdGhlCgkJCS8vICAgICAgICAgICAgaW50ZXJuYWwgY29kZSB0aGF0IGR5bmFtaWNhbGx5IGdlbmVyYXRlcyBzdWItcGFnZXMgZm9yIG5lc3RlZAoJCQkvLyAgICAgICAgICAgIGxpc3RzIGFuZCBzZWxlY3QgZGlhbG9ncywganVzdCB3cml0ZSBhIGhhc2ggaW4gdGhlIGxpbmsgdGhleQoJCQkvLyAgICAgICAgICAgIGNyZWF0ZS4gVGhpcyBtZWFucyB0aGUgYWN0dWFsIFVSTCBwYXRoIGlzIGJhc2VkIG9uIHdoYXRldmVyCgkJCS8vICAgICAgICAgICAgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGJhc2UgdGFnIGlzIGF0IHRoZSB0aW1lIHRoaXMgY29kZQoJCQkvLyAgICAgICAgICAgIGlzIGNhbGxlZC4gRm9yIG5vdyB3ZSBhcmUganVzdCBhc3N1bWluZyB0aGF0IGFueSB1cmwgd2l0aCBhCgkJCS8vICAgICAgICAgICAgaGFzaCBpbiBpdCBpcyBhbiBhcHBsaWNhdGlvbiBwYWdlIHJlZmVyZW5jZS4KCQkJaWYgKCBocmVmLnNlYXJjaCggIiMiICkgIT09IC0xICkgewoJCQkJaHJlZiA9IGhyZWYucmVwbGFjZSggL1teI10qIy8sICIiICk7CgkJCQlpZiAoICFocmVmICkgewoJCQkJCS8vbGluayB3YXMgYW4gZW1wdHkgaGFzaCBtZWFudCBwdXJlbHkKCQkJCQkvL2ZvciBpbnRlcmFjdGlvbiwgc28gd2UgaWdub3JlIGl0LgoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQkJcmV0dXJuOwoJCQkJfSBlbHNlIGlmICggcGF0aC5pc1BhdGgoIGhyZWYgKSApIHsKCQkJCQkvL3dlIGhhdmUgYXBhdGggc28gbWFrZSBpdCB0aGUgaHJlZiB3ZSB3YW50IHRvIGxvYWQuCgkJCQkJaHJlZiA9IHBhdGgubWFrZVVybEFic29sdXRlKCBocmVmLCBiYXNlVXJsICk7CgkJCQl9IGVsc2UgewoJCQkJCS8vd2UgaGF2ZSBhIHNpbXBsZSBpZCBzbyB1c2UgdGhlIGRvY3VtZW50VXJsIGFzIGl0cyBiYXNlLgoJCQkJCWhyZWYgPSBwYXRoLm1ha2VVcmxBYnNvbHV0ZSggIiMiICsgaHJlZiwgZG9jdW1lbnRVcmwuaHJlZk5vSGFzaCApOwoJCQkJfQoJCQl9CgoJCQkJLy8gU2hvdWxkIHdlIGhhbmRsZSB0aGlzIGxpbmssIG9yIGxldCB0aGUgYnJvd3NlciBkZWFsIHdpdGggaXQ/CgkJCXZhciB1c2VEZWZhdWx0VXJsSGFuZGxpbmcgPSAkbGluay5pcyggIltyZWw9J2V4dGVybmFsJ10iICkgfHwgJGxpbmsuaXMoICI6anFtRGF0YShhamF4PSdmYWxzZScpIiApIHx8ICRsaW5rLmlzKCAiW3RhcmdldF0iICksCgoJCQkJLy8gU29tZSBlbWJlZGRlZCBicm93c2VycywgbGlrZSB0aGUgd2ViIHZpZXcgaW4gUGhvbmUgR2FwLCBhbGxvdyBjcm9zcy1kb21haW4gWEhSCgkJCQkvLyByZXF1ZXN0cyBpZiB0aGUgZG9jdW1lbnQgZG9pbmcgdGhlIHJlcXVlc3Qgd2FzIGxvYWRlZCB2aWEgdGhlIGZpbGU6Ly8gcHJvdG9jb2wuCgkJCQkvLyBUaGlzIGlzIHVzdWFsbHkgdG8gYWxsb3cgdGhlIGFwcGxpY2F0aW9uIHRvICJwaG9uZSBob21lIiBhbmQgZmV0Y2ggYXBwIHNwZWNpZmljCgkJCQkvLyBkYXRhLiBXZSBub3JtYWxseSBsZXQgdGhlIGJyb3dzZXIgaGFuZGxlIGV4dGVybmFsL2Nyb3NzLWRvbWFpbiB1cmxzLCBidXQgaWYgdGhlCgkJCQkvLyBhbGxvd0Nyb3NzRG9tYWluUGFnZXMgb3B0aW9uIGlzIHRydWUsIHdlIHdpbGwgYWxsb3cgY3Jvc3MtZG9tYWluIGh0dHAvaHR0cHMKCQkJCS8vIHJlcXVlc3RzIHRvIGdvIHRocm91Z2ggb3VyIHBhZ2UgbG9hZGluZyBsb2dpYy4KCgkJCQkvL2NoZWNrIGZvciBwcm90b2NvbCBvciByZWwgYW5kIGl0cyBub3QgYW4gZW1iZWRkZWQgcGFnZQoJCQkJLy9UT0RPIG92ZXJsYXAgaW4gbG9naWMgZnJvbSBpc0V4dGVybmFsLCByZWw9ZXh0ZXJuYWwgY2hlY2sgc2hvdWxkIGJlCgkJCQkvLyAgICAgbW92ZWQgaW50byBtb3JlIGNvbXByZWhlbnNpdmUgaXNFeHRlcm5hbExpbmsKCQkJCWlzRXh0ZXJuYWwgPSB1c2VEZWZhdWx0VXJsSGFuZGxpbmcgfHwgKCBwYXRoLmlzRXh0ZXJuYWwoIGhyZWYgKSAmJiAhcGF0aC5pc1Blcm1pdHRlZENyb3NzRG9tYWluUmVxdWVzdCggZG9jdW1lbnRVcmwsIGhyZWYgKSApOwoKCQkJaWYgKCBpc0V4dGVybmFsICkgewoJCQkJaHR0cENsZWFudXAoKTsKCQkJCS8vdXNlIGRlZmF1bHQgY2xpY2sgaGFuZGxpbmcKCQkJCXJldHVybjsKCQkJfQoKCQkJLy91c2UgYWpheAoJCQl2YXIgdHJhbnNpdGlvbiA9ICRsaW5rLmpxbURhdGEoICJ0cmFuc2l0aW9uIiApLAoJCQkJcmV2ZXJzZSA9ICRsaW5rLmpxbURhdGEoICJkaXJlY3Rpb24iICkgPT09ICJyZXZlcnNlIiB8fAoJCQkJCQkJLy8gZGVwcmVjYXRlZCAtIHJlbW92ZSBieSAxLjAKCQkJCQkJCSRsaW5rLmpxbURhdGEoICJiYWNrIiApLAoKCQkJCS8vdGhpcyBtYXkgbmVlZCB0byBiZSBtb3JlIHNwZWNpZmljIGFzIHdlIHVzZSBkYXRhLXJlbCBtb3JlCgkJCQlyb2xlID0gJGxpbmsuYXR0ciggImRhdGEtIiArICQubW9iaWxlLm5zICsgInJlbCIgKSB8fCB1bmRlZmluZWQ7CgoJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlKCBocmVmLCB7IHRyYW5zaXRpb246IHRyYW5zaXRpb24sIHJldmVyc2U6IHJldmVyc2UsIHJvbGU6IHJvbGUsIGxpbms6ICRsaW5rIH0gKTsKCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQl9KTsKCgkJLy9wcmVmZXRjaCBwYWdlcyB3aGVuIGFuY2hvcnMgd2l0aCBkYXRhLXByZWZldGNoIGFyZSBlbmNvdW50ZXJlZAoJCSQoIGRvY3VtZW50ICkuZGVsZWdhdGUoICIudWktcGFnZSIsICJwYWdlc2hvdy5wcmVmZXRjaCIsIGZ1bmN0aW9uKCkgewoJCQl2YXIgdXJscyA9IFtdOwoJCQkkKCB0aGlzICkuZmluZCggImE6anFtRGF0YShwcmVmZXRjaCkiICkuZWFjaChmdW5jdGlvbigpIHsKCQkJCXZhciAkbGluayA9ICQoIHRoaXMgKSwKCQkJCQl1cmwgPSAkbGluay5hdHRyKCAiaHJlZiIgKTsKCgkJCQlpZiAoIHVybCAmJiAkLmluQXJyYXkoIHVybCwgdXJscyApID09PSAtMSApIHsKCQkJCQl1cmxzLnB1c2goIHVybCApOwoKCQkJCQkkLm1vYmlsZS5sb2FkUGFnZSggdXJsLCB7IHJvbGU6ICRsaW5rLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJyZWwiICkgfSApOwoJCQkJfQoJCQl9KTsKCQl9KTsKCgkJJC5tb2JpbGUuX2hhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiggaGFzaCApIHsKCQkJLy9maW5kIGZpcnN0IHBhZ2UgdmlhIGhhc2gKCQkJdmFyIHRvID0gcGF0aC5zdHJpcEhhc2goIGhhc2ggKSwKCQkJCS8vdHJhbnNpdGlvbiBpcyBmYWxzZSBpZiBpdCdzIHRoZSBmaXJzdCBwYWdlLCB1bmRlZmluZWQgb3RoZXJ3aXNlIChhbmQgbWF5IGJlIG92ZXJyaWRkZW4gYnkgZGVmYXVsdCkKCQkJCXRyYW5zaXRpb24gPSAkLm1vYmlsZS51cmxIaXN0b3J5LnN0YWNrLmxlbmd0aCA9PT0gMCA/ICJub25lIiA6IHVuZGVmaW5lZCwKCgkJCQkvLyAibmF2aWdhdGUiIGV2ZW50IGZpcmVkIHRvIGFsbG93IG90aGVycyB0byB0YWtlIGFkdmFudGFnZSBvZiB0aGUgbW9yZSByb2J1c3QgaGFzaGNoYW5nZSBoYW5kbGluZwoJCQkJbmF2RXZlbnQgPSBuZXcgJC5FdmVudCggIm5hdmlnYXRlIiApLAoKCQkJCS8vIGRlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIGNoYW5nUGFnZSBjYWxscyBtYWRlIGFmdGVyIGV4YW1pbmluZyB0aGUgY3VycmVudCBzdGF0ZQoJCQkJLy8gb2YgdGhlIHBhZ2UgYW5kIHRoZSBoYXNoCgkJCQljaGFuZ2VQYWdlT3B0aW9ucyA9IHsKCQkJCQl0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLAoJCQkJCWNoYW5nZUhhc2g6IGZhbHNlLAoJCQkJCWZyb21IYXNoQ2hhbmdlOiB0cnVlCgkJCQl9OwoKCQkJaWYgKCAwID09PSB1cmxIaXN0b3J5LnN0YWNrLmxlbmd0aCApIHsKCQkJCXVybEhpc3RvcnkuaW5pdGlhbERzdCA9IHRvOwoJCQl9CgoJCQkvLyBXZSBzaG91bGQgcHJvYmFibHkgZmlyZSB0aGUgIm5hdmlnYXRlIiBldmVudCBmcm9tIHRob3NlIHBsYWNlcyB0aGF0IG1ha2UgY2FsbHMgdG8gX2hhbmRsZUhhc2hDaGFuZ2UsCgkJCS8vIGFuZCBoYXZlIF9oYW5kbGVIYXNoQ2hhbmdlIGhvb2sgaW50byB0aGUgIm5hdmlnYXRlIiBldmVudCBpbnN0ZWFkIG9mIHRyaWdnZXJpbmcgaXQgaGVyZQoJCQkkLm1vYmlsZS5wYWdlQ29udGFpbmVyLnRyaWdnZXIoIG5hdkV2ZW50ICk7CgkJCWlmICggbmF2RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vaWYgbGlzdGVuaW5nIGlzIGRpc2FibGVkIChlaXRoZXIgZ2xvYmFsbHkgb3IgdGVtcG9yYXJpbHkpLCBvciBpdCdzIGEgZGlhbG9nIGhhc2gKCQkJaWYgKCAhJC5tb2JpbGUuaGFzaExpc3RlbmluZ0VuYWJsZWQgfHwgdXJsSGlzdG9yeS5pZ25vcmVOZXh0SGFzaENoYW5nZSApIHsKCQkJCXVybEhpc3RvcnkuaWdub3JlTmV4dEhhc2hDaGFuZ2UgPSBmYWxzZTsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gc3BlY2lhbCBjYXNlIGZvciBkaWFsb2dzCgkJCWlmICggdXJsSGlzdG9yeS5zdGFjay5sZW5ndGggPiAxICYmIHRvLmluZGV4T2YoIGRpYWxvZ0hhc2hLZXkgKSA+IC0xICYmIHVybEhpc3RvcnkuaW5pdGlhbERzdCAhPT0gdG8gKSB7CgoJCQkJLy8gSWYgY3VycmVudCBhY3RpdmUgcGFnZSBpcyBub3QgYSBkaWFsb2cgc2tpcCB0aGUgZGlhbG9nIGFuZCBjb250aW51ZQoJCQkJLy8gaW4gdGhlIHNhbWUgZGlyZWN0aW9uCgkJCQlpZiAoICEkLm1vYmlsZS5hY3RpdmVQYWdlLmlzKCAiLnVpLWRpYWxvZyIgKSApIHsKCQkJCQkvL2RldGVybWluZSBpZiB3ZSdyZSBoZWFkaW5nIGZvcndhcmQgb3IgYmFja3dhcmQgYW5kIGNvbnRpbnVlIGFjY29yZGluZ2x5IHBhc3QKCQkJCQkvL3RoZSBjdXJyZW50IGRpYWxvZwoJCQkJCXVybEhpc3RvcnkuZGlyZWN0SGFzaENoYW5nZSh7CgkJCQkJCWN1cnJlbnRVcmw6IHRvLAoJCQkJCQlpc0JhY2s6IGZ1bmN0aW9uKCkgeyAkLm1vYmlsZS5iYWNrKCk7IH0sCgkJCQkJCWlzRm9yd2FyZDogZnVuY3Rpb24oKSB7IHdpbmRvdy5oaXN0b3J5LmZvcndhcmQoKTsgfQoJCQkJCX0pOwoKCQkJCQkvLyBwcmV2ZW50IGNoYW5nZVBhZ2UoKQoJCQkJCXJldHVybjsKCQkJCX0gZWxzZSB7CgkJCQkJLy8gaWYgdGhlIGN1cnJlbnQgYWN0aXZlIHBhZ2UgaXMgYSBkaWFsb2cgYW5kIHdlJ3JlIG5hdmlnYXRpbmcKCQkJCQkvLyB0byBhIGRpYWxvZyB1c2UgdGhlIGRpYWxvZyBvYmplY3RlZCBzYXZlZCBpbiB0aGUgc3RhY2sKCQkJCQl1cmxIaXN0b3J5LmRpcmVjdEhhc2hDaGFuZ2UoewoJCQkJCQljdXJyZW50VXJsOiB0bywKCgkJCQkJCS8vIHJlZ2FyZGxlc3Mgb2YgdGhlIGRpcmVjdGlvbiBvZiB0aGUgaGlzdG9yeSBjaGFuZ2UKCQkJCQkJLy8gZG8gdGhlIGZvbGxvd2luZwoJCQkJCQllaXRoZXI6IGZ1bmN0aW9uKCBpc0JhY2sgKSB7CgkJCQkJCQl2YXIgYWN0aXZlID0gJC5tb2JpbGUudXJsSGlzdG9yeS5nZXRBY3RpdmUoKTsKCgkJCQkJCQl0byA9IGFjdGl2ZS5wYWdlVXJsOwoKCQkJCQkJCS8vIG1ha2Ugc3VyZSB0byBzZXQgdGhlIHJvbGUsIHRyYW5zaXRpb24gYW5kIHJldmVyc2FsCgkJCQkJCQkvLyBhcyBtb3N0IG9mIHRoaXMgaXMgbG9zdCBieSB0aGUgZG9tQ2FjaGUgY2xlYW5pbmcKCQkJCQkJCSQuZXh0ZW5kKCBjaGFuZ2VQYWdlT3B0aW9ucywgewoJCQkJCQkJCXJvbGU6IGFjdGl2ZS5yb2xlLAoJCQkJCQkJCXRyYW5zaXRpb246IGFjdGl2ZS50cmFuc2l0aW9uLAoJCQkJCQkJCXJldmVyc2U6IGlzQmFjawoJCQkJCQkJfSk7CgkJCQkJCX0KCQkJCQl9KTsKCQkJCX0KCQkJfQoKCQkJLy9pZiB0byBpcyBkZWZpbmVkLCBsb2FkIGl0CgkJCWlmICggdG8gKSB7CgkJCQkvLyBBdCB0aGlzIHBvaW50LCAndG8nIGNhbiBiZSBvbmUgb2YgMyB0aGluZ3MsIGEgY2FjaGVkIHBhZ2UgZWxlbWVudCBmcm9tCgkJCQkvLyBhIGhpc3Rvcnkgc3RhY2sgZW50cnksIGFuIGlkLCBvciBzaXRlLXJlbGF0aXZlL2Fic29sdXRlIFVSTC4gSWYgJ3RvJyBpcwoJCQkJLy8gYW4gaWQsIHdlIG5lZWQgdG8gcmVzb2x2ZSBpdCBhZ2FpbnN0IHRoZSBkb2N1bWVudEJhc2UsIG5vdCB0aGUgbG9jYXRpb24uaHJlZiwKCQkJCS8vIHNpbmNlIHRoZSBoYXNoY2hhbmdlIGNvdWxkJ3ZlIGJlZW4gdGhlIHJlc3VsdCBvZiBhIGZvcndhcmQvYmFja3dhcmQgbmF2aWdhdGlvbgoJCQkJLy8gdGhhdCBjcm9zc2VzIGZyb20gYW4gZXh0ZXJuYWwgcGFnZS9kaWFsb2cgdG8gYW4gaW50ZXJuYWwgcGFnZS9kaWFsb2cuCgkJCQl0byA9ICggdHlwZW9mIHRvID09PSAic3RyaW5nIiAmJiAhcGF0aC5pc1BhdGgoIHRvICkgKSA/ICggcGF0aC5tYWtlVXJsQWJzb2x1dGUoICcjJyArIHRvLCBkb2N1bWVudEJhc2UgKSApIDogdG87CgoJCQkJLy8gSWYgd2UncmUgYWJvdXQgdG8gZ28gdG8gYW4gaW5pdGlhbCBVUkwgdGhhdCBjb250YWlucyBhIHJlZmVyZW5jZSB0byBhIG5vbi1leGlzdGVudAoJCQkJLy8gaW50ZXJuYWwgcGFnZSwgZ28gdG8gdGhlIGZpcnN0IHBhZ2UgaW5zdGVhZC4gV2Uga25vdyB0aGF0IHRoZSBpbml0aWFsIGhhc2ggcmVmZXJzIHRvIGEKCQkJCS8vIG5vbi1leGlzdGVudCBwYWdlLCBiZWNhdXNlIHRoZSBpbml0aWFsIGhhc2ggZGlkIG5vdCBlbmQgdXAgaW4gdGhlIGluaXRpYWwgdXJsSGlzdG9yeSBlbnRyeQoJCQkJaWYgKCB0byA9PT0gcGF0aC5tYWtlVXJsQWJzb2x1dGUoICcjJyArIHVybEhpc3RvcnkuaW5pdGlhbERzdCwgZG9jdW1lbnRCYXNlICkgJiYKCQkJCQl1cmxIaXN0b3J5LnN0YWNrLmxlbmd0aCAmJiB1cmxIaXN0b3J5LnN0YWNrWzBdLnVybCAhPT0gdXJsSGlzdG9yeS5pbml0aWFsRHN0LnJlcGxhY2UoIGRpYWxvZ0hhc2hLZXksICIiICkgKSB7CgkJCQkJdG8gPSAkLm1vYmlsZS5maXJzdFBhZ2U7CgkJCQl9CgkJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlKCB0bywgY2hhbmdlUGFnZU9wdGlvbnMgKTsKCQkJfQllbHNlIHsKCQkJCS8vdGhlcmUncyBubyBoYXNoLCBnbyB0byB0aGUgZmlyc3QgcGFnZSBpbiB0aGUgZG9tCgkJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlKCAkLm1vYmlsZS5maXJzdFBhZ2UsIGNoYW5nZVBhZ2VPcHRpb25zICk7CgkJCX0KCQl9OwoKCQkvL2hhc2hjaGFuZ2UgZXZlbnQgaGFuZGxlcgoJCSR3aW5kb3cuYmluZCggImhhc2hjaGFuZ2UiLCBmdW5jdGlvbiggZSwgdHJpZ2dlcmVkICkgewoJCQkvLyBGaXJlZm94IGF1dG8tZXNjYXBlcyB0aGUgbG9jYXRpb24uaGFzaCBhcyBmb3IgdjEzIGJ1dAoJCQkvLyBsZWF2ZXMgdGhlIGhyZWYgdW50b3VjaGVkCgkJCSQubW9iaWxlLl9oYW5kbGVIYXNoQ2hhbmdlKCBwYXRoLnBhcnNlTG9jYXRpb24oKS5oYXNoICk7CgkJfSk7CgoJCS8vc2V0IHBhZ2UgbWluLWhlaWdodHMgdG8gYmUgZGV2aWNlIHNwZWNpZmljCgkJJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZXNob3ciLCByZXNldEFjdGl2ZVBhZ2VIZWlnaHQgKTsKCQkkKCB3aW5kb3cgKS5iaW5kKCAidGhyb3R0bGVkcmVzaXplIiwgcmVzZXRBY3RpdmVQYWdlSGVpZ2h0ICk7CgoJfSk7Ly9uYXZyZWFkeURlZmVycmVkIGRvbmUgY2FsbGJhY2sKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgd2luZG93ICkgewoJLy8gRm9yIG5vdywgbGV0J3MgTW9ua2V5cGF0Y2ggdGhpcyBvbnRvIHRoZSBlbmQgb2YgJC5tb2JpbGUuX3JlZ2lzdGVySW50ZXJuYWxFdmVudHMKCS8vIFNjb3BlIHNlbGYgdG8gcHVzaFN0YXRlSGFuZGxlciBzbyB3ZSBjYW4gcmVmZXJlbmNlIGl0IHNhbmVseSB3aXRoaW4gdGhlCgkvLyBtZXRob2RzIGhhbmRlZCBvZmYgYXMgZXZlbnQgaGFuZGxlcnMKCXZhcglwdXNoU3RhdGVIYW5kbGVyID0ge30sCgkJc2VsZiA9IHB1c2hTdGF0ZUhhbmRsZXIsCgkJJHdpbiA9ICQoIHdpbmRvdyApLAoJCXVybCA9ICQubW9iaWxlLnBhdGgucGFyc2VMb2NhdGlvbigpLAoJCW1vYmlsZWluaXREZWZlcnJlZCA9ICQuRGVmZXJyZWQoKSwKCQlkb21yZWFkeURlZmVycmVkID0gJC5EZWZlcnJlZCgpOwoKCSQoIGRvY3VtZW50ICkucmVhZHkoICQucHJveHkoIGRvbXJlYWR5RGVmZXJyZWQsICJyZXNvbHZlIiApICk7CgoJJCggZG9jdW1lbnQgKS5vbmUoICJtb2JpbGVpbml0IiwgJC5wcm94eSggbW9iaWxlaW5pdERlZmVycmVkLCAicmVzb2x2ZSIgKSApOwoKCSQuZXh0ZW5kKCBwdXNoU3RhdGVIYW5kbGVyLCB7CgkJLy8gVE9ETyBtb3ZlIHRvIGEgcGF0aCBoZWxwZXIsIHRoaXMgaXMgcmF0aGVyIGNvbW1vbiBmdW5jdGlvbmFsaXR5CgkJaW5pdGlhbEZpbGVQYXRoOiAoZnVuY3Rpb24oKSB7CgkJCXJldHVybiB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoOwoJCX0pKCksCgoJCWhhc2hDaGFuZ2VUaW1lb3V0OiAyMDAsCgoJCWhhc2hDaGFuZ2VFbmFibGVUaW1lcjogdW5kZWZpbmVkLAoKCQlpbml0aWFsSHJlZjogdXJsLmhyZWZOb0hhc2gsCgoJCXN0YXRlOiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuIHsKCQkJCS8vIGZpcmVmb3ggYXV0byBkZWNvZGVzIHRoZSB1cmwgd2hlbiB1c2luZyBsb2NhdGlvbi5oYXNoIGJ1dCBub3QgaHJlZgoJCQkJaGFzaDogJC5tb2JpbGUucGF0aC5wYXJzZUxvY2F0aW9uKCkuaGFzaCB8fCAiIyIgKyBzZWxmLmluaXRpYWxGaWxlUGF0aCwKCQkJCXRpdGxlOiBkb2N1bWVudC50aXRsZSwKCgkJCQkvLyBwZXJzaXN0IGFjcm9zcyByZWZyZXNoCgkJCQlpbml0aWFsSHJlZjogc2VsZi5pbml0aWFsSHJlZgoJCQl9OwoJCX0sCgoJCXJlc2V0VUlLZXlzOiBmdW5jdGlvbiggdXJsICkgewoJCQl2YXIgZGlhbG9nID0gJC5tb2JpbGUuZGlhbG9nSGFzaEtleSwKCQkJCXN1YmtleSA9ICImIiArICQubW9iaWxlLnN1YlBhZ2VVcmxLZXksCgkJCQlkaWFsb2dJbmRleCA9IHVybC5pbmRleE9mKCBkaWFsb2cgKTsKCgkJCWlmICggZGlhbG9nSW5kZXggPiAtMSApIHsKCQkJCXVybCA9IHVybC5zbGljZSggMCwgZGlhbG9nSW5kZXggKSArICIjIiArIHVybC5zbGljZSggZGlhbG9nSW5kZXggKTsKCQkJfSBlbHNlIGlmICggdXJsLmluZGV4T2YoIHN1YmtleSApID4gLTEgKSB7CgkJCQl1cmwgPSB1cmwuc3BsaXQoIHN1YmtleSApLmpvaW4oICIjIiArIHN1YmtleSApOwoJCQl9CgoJCQlyZXR1cm4gdXJsOwoJCX0sCgoJCS8vIFRPRE8gc29ydCBvdXQgYSBzaW5nbGUgYmFycmllciB0byBoYXNoY2hhbmdlIGZ1bmN0aW9uYWxpdHkKCQluZXh0SGFzaENoYW5nZVByZXZlbnRlZDogZnVuY3Rpb24oIHZhbHVlICkgewoJCQkkLm1vYmlsZS51cmxIaXN0b3J5Lmlnbm9yZU5leHRIYXNoQ2hhbmdlID0gdmFsdWU7CgkJCXNlbGYub25IYXNoQ2hhbmdlRGlzYWJsZWQgPSB2YWx1ZTsKCQl9LAoKCQkvLyBvbiBoYXNoIGNoYW5nZSB3ZSB3YW50IHRvIGNsZWFuIHVwIHRoZSB1cmwKCQkvLyBOT1RFIHRoaXMgdGFrZXMgcGxhY2UgKmFmdGVyKiB0aGUgdmFuaWxsYSBuYXZpZ2F0aW9uIGhhc2ggY2hhbmdlCgkJLy8gaGFuZGxpbmcgaGFzIHRha2VuIHBsYWNlIGFuZCBzZXQgdGhlIHN0YXRlIG9mIHRoZSBET00KCQlvbkhhc2hDaGFuZ2U6IGZ1bmN0aW9uKCBlICkgewoJCQkvLyBkaXNhYmxlIHRoaXMgaGFzaCBjaGFuZ2UKCQkJaWYgKCBzZWxmLm9uSGFzaENoYW5nZURpc2FibGVkICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQl2YXIgaHJlZiwgc3RhdGUsCgkJCQkvLyBmaXJlZm94IGF1dG8gZGVjb2RlcyB0aGUgdXJsIHdoZW4gdXNpbmcgbG9jYXRpb24uaGFzaCBidXQgbm90IGhyZWYKCQkJCWhhc2ggPSAkLm1vYmlsZS5wYXRoLnBhcnNlTG9jYXRpb24oKS5oYXNoLAoJCQkJaXNQYXRoID0gJC5tb2JpbGUucGF0aC5pc1BhdGgoIGhhc2ggKSwKCQkJCXJlc29sdXRpb25VcmwgPSBpc1BhdGggPyAkLm1vYmlsZS5wYXRoLmdldExvY2F0aW9uKCkgOiAkLm1vYmlsZS5nZXREb2N1bWVudFVybCgpOwoKCQkJaGFzaCA9IGlzUGF0aCA/IGhhc2gucmVwbGFjZSggIiMiLCAiIiApIDogaGFzaDsKCgoJCQkvLyBwcm9wdWxhdGUgdGhlIGhhc2ggd2hlbiBpdHMgbm90IGF2YWlsYWJsZQoJCQlzdGF0ZSA9IHNlbGYuc3RhdGUoKTsKCgkJCS8vIG1ha2UgdGhlIGhhc2ggYWJvbHV0ZSB3aXRoIHRoZSBjdXJyZW50IGhyZWYKCQkJaHJlZiA9ICQubW9iaWxlLnBhdGgubWFrZVVybEFic29sdXRlKCBoYXNoLCByZXNvbHV0aW9uVXJsICk7CgoJCQlpZiAoIGlzUGF0aCApIHsKCQkJCWhyZWYgPSBzZWxmLnJlc2V0VUlLZXlzKCBocmVmICk7CgkJCX0KCgkJCS8vIHJlcGxhY2UgdGhlIGN1cnJlbnQgdXJsIHdpdGggdGhlIG5ldyBocmVmIGFuZCBzdG9yZSB0aGUgc3RhdGUKCQkJLy8gTm90ZSB0aGF0IGluIHNvbWUgY2FzZXMgd2UgbWlnaHQgYmUgcmVwbGFjaW5nIGFuIHVybCB3aXRoIHRoZQoJCQkvLyBzYW1lIHVybC4gV2UgZG8gdGhpcyBhbnl3YXlzIGJlY2F1c2Ugd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdAoJCQkvLyBhbGwgb2Ygb3VyIGhpc3RvcnkgZW50cmllcyBoYXZlIGEgc3RhdGUgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aAoJCQkvLyB0aGVtLiBUaGlzIGFsbG93cyB1cyB0byB3b3JrIGFyb3VuZCB0aGUgY2FzZSB3aGVyZSAkLm1vYmlsZS5iYWNrKCkKCQkJLy8gaXMgY2FsbGVkIHRvIHRyYW5zaXRpb24gZnJvbSBhbiBleHRlcm5hbCBwYWdlIHRvIGFuIGVtYmVkZGVkIHBhZ2UuCgkJCS8vIEluIHRoYXQgcGFydGljdWxhciBjYXNlLCBhIGhhc2hjaGFuZ2UgZXZlbnQgaXMgKk5PVCogZ2VuZXJhdGVkIGJ5IHRoZSBicm93c2VyLgoJCQkvLyBFbnN1cmluZyBlYWNoIGhpc3RvcnkgZW50cnkgaGFzIGEgc3RhdGUgb2JqZWN0IG1lYW5zIHRoYXQgb25Qb3BTdGF0ZSgpCgkJCS8vIHdpbGwgYWx3YXlzIHRyaWdnZXIgb3VyIGhhc2hjaGFuZ2UgY2FsbGJhY2sgZXZlbiB3aGVuIGEgaGFzaGNoYW5nZSBldmVudAoJCQkvLyBpcyBub3QgZmlyZWQuCgkJCWhpc3RvcnkucmVwbGFjZVN0YXRlKCBzdGF0ZSwgZG9jdW1lbnQudGl0bGUsIGhyZWYgKTsKCQl9LAoKCQkvLyBvbiBwb3BzdGF0ZSAoaWUgYmFjayBvciBmb3J3YXJkKSB3ZSBuZWVkIHRvIHJlcGxhY2UgdGhlIGhhc2ggdGhhdCB3YXMgdGhlcmUgcHJldmlvdXNseQoJCS8vIGNsZWFuZWQgdXAgYnkgdGhlIGFkZGl0aW9uYWwgaGFzaCBoYW5kbGluZwoJCW9uUG9wU3RhdGU6IGZ1bmN0aW9uKCBlICkgewoJCQl2YXIgcG9wcGVkU3RhdGUgPSBlLm9yaWdpbmFsRXZlbnQuc3RhdGUsCgkJCQlmcm9tSGFzaCwgdG9IYXNoLCBoYXNoQ2hhbmdlZDsKCgkJCS8vIGlmIHRoZXJlJ3Mgbm8gc3RhdGUgaXRzIG5vdCBhIHBvcHN0YXRlIHdlIGNhcmUgYWJvdXQsIGVnIGNocm9tZSdzIGluaXRpYWwgcG9wc3RhdGUKCQkJaWYgKCBwb3BwZWRTdGF0ZSApIHsKCQkJCS8vIGlmIHdlIGdldCB0d28gcG9wIHN0YXRlcyBpbiB1bmRlciB0aGlzLmhhc2hDaGFuZ2VUaW1lb3V0CgkJCQkvLyBtYWtlIHN1cmUgdG8gY2xlYXIgYW55IHRpbWVyIHNldCBmb3IgdGhlIHByZXZpb3VzIGNoYW5nZQoJCQkJY2xlYXJUaW1lb3V0KCBzZWxmLmhhc2hDaGFuZ2VFbmFibGVUaW1lciApOwoKCQkJCS8vIG1ha2Ugc3VyZSB0byBlbmFibGUgaGFzaCBoYW5kbGluZyBmb3IgdGhlIHRoZSBfaGFuZGxlSGFzaENoYW5nZSBjYWxsCgkJCQlzZWxmLm5leHRIYXNoQ2hhbmdlUHJldmVudGVkKCBmYWxzZSApOwoKCQkJCS8vIGNoYW5nZSB0aGUgcGFnZSBiYXNlZCBvbiB0aGUgaGFzaCBpbiB0aGUgcG9wcGVkIHN0YXRlCgkJCQkkLm1vYmlsZS5faGFuZGxlSGFzaENoYW5nZSggcG9wcGVkU3RhdGUuaGFzaCApOwoKCQkJCS8vIHByZXZlbnQgYW55IGhhc2hjaGFuZ2UgaW4gdGhlIG5leHQgc2VsZi5oYXNoQ2hhbmdlVGltZW91dAoJCQkJc2VsZi5uZXh0SGFzaENoYW5nZVByZXZlbnRlZCggdHJ1ZSApOwoKCQkJCS8vIHJlLWVuYWJsZSBoYXNoIGNoYW5nZSBoYW5kbGluZyBhZnRlciBzd2FsbG93aW5nIGEgcG9zc2libGUgaGFzaAoJCQkJLy8gY2hhbmdlIGV2ZW50IHRoYXQgY29tZXMgb24gYWxsIHBvcHN0YXRlcyBjb3VydGVzeSBvZiBicm93c2VycyBsaWtlIEFuZHJvaWQKCQkJCXNlbGYuaGFzaENoYW5nZUVuYWJsZVRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCQkJc2VsZi5uZXh0SGFzaENoYW5nZVByZXZlbnRlZCggZmFsc2UgKTsKCQkJCX0sIHNlbGYuaGFzaENoYW5nZVRpbWVvdXQgKTsKCQkJfQoJCX0sCgoJCWluaXQ6IGZ1bmN0aW9uKCkgewoJCQkkd2luLmJpbmQoICJoYXNoY2hhbmdlIiwgc2VsZi5vbkhhc2hDaGFuZ2UgKTsKCgkJCS8vIEhhbmRsZSBwb3BzdGF0ZSBldmVudHMgdGhlIG9jY3VyIHRocm91Z2ggaGlzdG9yeSBjaGFuZ2VzCgkJCSR3aW4uYmluZCggInBvcHN0YXRlIiwgc2VsZi5vblBvcFN0YXRlICk7CgoJCQkvLyBpZiB0aGVyZSdzIG5vIGhhc2gsIHdlIG5lZWQgdG8gcmVwbGFjZXN0YXRlIGZvciByZXR1cm5pbmcgdG8gaG9tZQoJCQlpZiAoIGxvY2F0aW9uLmhhc2ggPT09ICIiICkgewoJCQkJaGlzdG9yeS5yZXBsYWNlU3RhdGUoIHNlbGYuc3RhdGUoKSwgZG9jdW1lbnQudGl0bGUsICQubW9iaWxlLnBhdGguZ2V0TG9jYXRpb24oKSApOwoJCQl9CgkJfQoJfSk7CgoJLy8gV2UgbmVlZCB0byBpbml0IHdoZW4gIm1vYmlsZWluaXQiLCAiZG9tcmVhZHkiLCBhbmQgIm5hdnJlYWR5IiBoYXZlIGFsbCBoYXBwZW5lZAoJJC53aGVuKCBkb21yZWFkeURlZmVycmVkLCBtb2JpbGVpbml0RGVmZXJyZWQsICQubW9iaWxlLm5hdnJlYWR5RGVmZXJyZWQgKS5kb25lKGZ1bmN0aW9uKCkgewoJCWlmICggJC5tb2JpbGUucHVzaFN0YXRlRW5hYmxlZCAmJiAkLnN1cHBvcnQucHVzaFN0YXRlICkgewoJCQlwdXNoU3RhdGVIYW5kbGVyLmluaXQoKTsKCQl9Cgl9KTsKfSkoIGpRdWVyeSwgdGhpcyApOwoKLyoKKiBmYWxsYmFjayB0cmFuc2l0aW9uIGZvciBmbGlwIGluIG5vbi0zRCBzdXBwb3J0aW5nIGJyb3dzZXJzICh3aGljaCB0ZW5kIHRvIGhhbmRsZSBjb21wbGV4IHRyYW5zaXRpb25zIHBvb3JseSBpbiBnZW5lcmFsCiovCgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewoKJC5tb2JpbGUudHJhbnNpdGlvbkZhbGxiYWNrcy5mbGlwID0gImZhZGUiOwoKfSkoIGpRdWVyeSwgdGhpcyApOwovKgoqIGZhbGxiYWNrIHRyYW5zaXRpb24gZm9yIGZsb3cgaW4gbm9uLTNEIHN1cHBvcnRpbmcgYnJvd3NlcnMgKHdoaWNoIHRlbmQgdG8gaGFuZGxlIGNvbXBsZXggdHJhbnNpdGlvbnMgcG9vcmx5IGluIGdlbmVyYWwKKi8KCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgokLm1vYmlsZS50cmFuc2l0aW9uRmFsbGJhY2tzLmZsb3cgPSAiZmFkZSI7Cgp9KSggalF1ZXJ5LCB0aGlzICk7Ci8qCiogZmFsbGJhY2sgdHJhbnNpdGlvbiBmb3IgcG9wIGluIG5vbi0zRCBzdXBwb3J0aW5nIGJyb3dzZXJzICh3aGljaCB0ZW5kIHRvIGhhbmRsZSBjb21wbGV4IHRyYW5zaXRpb25zIHBvb3JseSBpbiBnZW5lcmFsCiovCgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewoKJC5tb2JpbGUudHJhbnNpdGlvbkZhbGxiYWNrcy5wb3AgPSAiZmFkZSI7Cgp9KSggalF1ZXJ5LCB0aGlzICk7Ci8qCiogZmFsbGJhY2sgdHJhbnNpdGlvbiBmb3Igc2xpZGUgaW4gbm9uLTNEIHN1cHBvcnRpbmcgYnJvd3NlcnMgKHdoaWNoIHRlbmQgdG8gaGFuZGxlIGNvbXBsZXggdHJhbnNpdGlvbnMgcG9vcmx5IGluIGdlbmVyYWwKKi8KCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgovLyBVc2UgdGhlIHNpbXVsdGFuZW91cyB0cmFuc2l0aW9ucyBoYW5kbGVyIGZvciBzbGlkZSB0cmFuc2l0aW9ucwokLm1vYmlsZS50cmFuc2l0aW9uSGFuZGxlcnMuc2xpZGUgPSAkLm1vYmlsZS50cmFuc2l0aW9uSGFuZGxlcnMuc2ltdWx0YW5lb3VzOwoKLy8gU2V0IHRoZSBzbGlkZSB0cmFuc2l0aW9ucydzIGZhbGxiYWNrIHRvICJmYWRlIgokLm1vYmlsZS50cmFuc2l0aW9uRmFsbGJhY2tzLnNsaWRlID0gImZhZGUiOwoKfSkoIGpRdWVyeSwgdGhpcyApOwovKgoqIGZhbGxiYWNrIHRyYW5zaXRpb24gZm9yIHNsaWRlZG93biBpbiBub24tM0Qgc3VwcG9ydGluZyBicm93c2VycyAod2hpY2ggdGVuZCB0byBoYW5kbGUgY29tcGxleCB0cmFuc2l0aW9ucyBwb29ybHkgaW4gZ2VuZXJhbAoqLwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCiQubW9iaWxlLnRyYW5zaXRpb25GYWxsYmFja3Muc2xpZGVkb3duID0gImZhZGUiOwoKfSkoIGpRdWVyeSwgdGhpcyApOwovKgoqIGZhbGxiYWNrIHRyYW5zaXRpb24gZm9yIHNsaWRlZmFkZSBpbiBub24tM0Qgc3VwcG9ydGluZyBicm93c2VycyAod2hpY2ggdGVuZCB0byBoYW5kbGUgY29tcGxleCB0cmFuc2l0aW9ucyBwb29ybHkgaW4gZ2VuZXJhbAoqLwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCi8vIFNldCB0aGUgc2xpZGUgdHJhbnNpdGlvbnMncyBmYWxsYmFjayB0byAiZmFkZSIKJC5tb2JpbGUudHJhbnNpdGlvbkZhbGxiYWNrcy5zbGlkZWZhZGUgPSAiZmFkZSI7Cgp9KSggalF1ZXJ5LCB0aGlzICk7Ci8qCiogZmFsbGJhY2sgdHJhbnNpdGlvbiBmb3Igc2xpZGV1cCBpbiBub24tM0Qgc3VwcG9ydGluZyBicm93c2VycyAod2hpY2ggdGVuZCB0byBoYW5kbGUgY29tcGxleCB0cmFuc2l0aW9ucyBwb29ybHkgaW4gZ2VuZXJhbAoqLwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCiQubW9iaWxlLnRyYW5zaXRpb25GYWxsYmFja3Muc2xpZGV1cCA9ICJmYWRlIjsKCn0pKCBqUXVlcnksIHRoaXMgKTsKLyoKKiBmYWxsYmFjayB0cmFuc2l0aW9uIGZvciB0dXJuIGluIG5vbi0zRCBzdXBwb3J0aW5nIGJyb3dzZXJzICh3aGljaCB0ZW5kIHRvIGhhbmRsZSBjb21wbGV4IHRyYW5zaXRpb25zIHBvb3JseSBpbiBnZW5lcmFsCiovCgooZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkgewoKJC5tb2JpbGUudHJhbnNpdGlvbkZhbGxiYWNrcy50dXJuID0gImZhZGUiOwoKfSkoIGpRdWVyeSwgdGhpcyApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLm1vYmlsZS5wYWdlLnByb3RvdHlwZS5vcHRpb25zLmRlZ3JhZGVJbnB1dHMgPSB7Cgljb2xvcjogZmFsc2UsCglkYXRlOiBmYWxzZSwKCWRhdGV0aW1lOiBmYWxzZSwKCSJkYXRldGltZS1sb2NhbCI6IGZhbHNlLAoJZW1haWw6IGZhbHNlLAoJbW9udGg6IGZhbHNlLAoJbnVtYmVyOiBmYWxzZSwKCXJhbmdlOiAibnVtYmVyIiwKCXNlYXJjaDogInRleHQiLAoJdGVsOiBmYWxzZSwKCXRpbWU6IGZhbHNlLAoJdXJsOiBmYWxzZSwKCXdlZWs6IGZhbHNlCn07CgoKLy9hdXRvIHNlbGYtaW5pdCB3aWRnZXRzCiQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKSB7CgoJdmFyIHBhZ2UgPSAkLm1vYmlsZS5jbG9zZXN0UGFnZURhdGEoICQoIGUudGFyZ2V0ICkgKSwgb3B0aW9uczsKCglpZiAoICFwYWdlICkgewoJCXJldHVybjsKCX0KCglvcHRpb25zID0gcGFnZS5vcHRpb25zOwoKCS8vIGRlZ3JhZGUgaW5wdXRzIHRvIGF2b2lkIHBvb3JseSBpbXBsZW1lbnRlZCBuYXRpdmUgZnVuY3Rpb25hbGl0eQoJJCggZS50YXJnZXQgKS5maW5kKCAiaW5wdXQiICkubm90KCBwYWdlLmtlZXBOYXRpdmVTZWxlY3RvcigpICkuZWFjaChmdW5jdGlvbigpIHsKCQl2YXIgJHRoaXMgPSAkKCB0aGlzICksCgkJCXR5cGUgPSB0aGlzLmdldEF0dHJpYnV0ZSggInR5cGUiICksCgkJCW9wdFR5cGUgPSBvcHRpb25zLmRlZ3JhZGVJbnB1dHNbIHR5cGUgXSB8fCAidGV4dCI7CgoJCWlmICggb3B0aW9ucy5kZWdyYWRlSW5wdXRzWyB0eXBlIF0gKSB7CgkJCXZhciBodG1sID0gJCggIjxkaXY+IiApLmh0bWwoICR0aGlzLmNsb25lKCkgKS5odG1sKCksCgkJCQkvLyBJbiBJRSBicm93c2VycywgdGhlIHR5cGUgc29tZXRpbWVzIGRvZXNuJ3QgZXhpc3QgaW4gdGhlIGNsb25lZCBtYXJrdXAsIHNvIHdlIHJlcGxhY2UgdGhlIGNsb3NpbmcgdGFnIGluc3RlYWQKCQkJCWhhc1R5cGUgPSBodG1sLmluZGV4T2YoICIgdHlwZT0iICkgPiAtMSwKCQkJCWZpbmRzdHIgPSBoYXNUeXBlID8gL1xzK3R5cGU9WyInXT9cdytbJyJdPy8gOiAvXC8/Pi8sCgkJCQlyZXBzdHIgPSAiIHR5cGU9XCIiICsgb3B0VHlwZSArICJcIiBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJ0eXBlPVwiIiArIHR5cGUgKyAiXCIiICsgKCBoYXNUeXBlID8gIiIgOiAiPiIgKTsKCgkJCSR0aGlzLnJlcGxhY2VXaXRoKCBodG1sLnJlcGxhY2UoIGZpbmRzdHIsIHJlcHN0ciApICk7CgkJfQoJfSk7Cgp9KTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS5kaWFsb2ciLCAkLm1vYmlsZS53aWRnZXQsIHsKCW9wdGlvbnM6IHsKCQljbG9zZUJ0blRleHQ6ICJDbG9zZSIsCgkJb3ZlcmxheVRoZW1lOiAiYSIsCgkJaW5pdFNlbGVjdG9yOiAiOmpxbURhdGEocm9sZT0nZGlhbG9nJykiCgl9LAoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdmFyIHNlbGYgPSB0aGlzLAoJCQkkZWwgPSB0aGlzLmVsZW1lbnQsCgkJCWhlYWRlckNsb3NlQnV0dG9uID0gJCggIjxhIGhyZWY9JyMnIGRhdGEtIiArICQubW9iaWxlLm5zICsgImljb249J2RlbGV0ZScgZGF0YS0iICsgJC5tb2JpbGUubnMgKyAiaWNvbnBvcz0nbm90ZXh0Jz4iKyB0aGlzLm9wdGlvbnMuY2xvc2VCdG5UZXh0ICsgIjwvYT4iICksCgkJCWRpYWxvZ1dyYXAgPSAkKCAiPGRpdi8+IiwgewoJCQkJCSJyb2xlIiA6ICJkaWFsb2ciLAoJCQkJCSJjbGFzcyIgOiAidWktZGlhbG9nLWNvbnRhaW4gdWktY29ybmVyLWFsbCB1aS1vdmVybGF5LXNoYWRvdyIKCQkJCX0pOwoKCQkkZWwuYWRkQ2xhc3MoICJ1aS1kaWFsb2cgdWktb3ZlcmxheS0iICsgdGhpcy5vcHRpb25zLm92ZXJsYXlUaGVtZSApOwoKCQkvLyBDbGFzcyB0aGUgbWFya3VwIGZvciBkaWFsb2cgc3R5bGluZwoJCS8vIFNldCBhcmlhIHJvbGUKCQkkZWwKCQkJLndyYXBJbm5lciggZGlhbG9nV3JhcCApCgkJCS5jaGlsZHJlbigpCgkJCQkuZmluZCggIjpqcW1EYXRhKHJvbGU9J2hlYWRlcicpIiApCgkJCQkJLnByZXBlbmQoIGhlYWRlckNsb3NlQnV0dG9uICkKCQkJCS5lbmQoKQoJCQkJLmNoaWxkcmVuKCAnOmZpcnN0LWNoaWxkJykKCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItdG9wIiApCgkJCQkuZW5kKCkKCQkJCS5jaGlsZHJlbiggIjpsYXN0LWNoaWxkIiApCgkJCQkJLmFkZENsYXNzKCAidWktY29ybmVyLWJvdHRvbSIgKTsKCgkJLy8gdGhpcyBtdXN0IGJlIGFuIGFub255bW91cyBmdW5jdGlvbiBzbyB0aGF0IHNlbGVjdCBtZW51IGRpYWxvZ3MgY2FuIHJlcGxhY2UKCQkvLyB0aGUgY2xvc2UgbWV0aG9kLiBUaGlzIGlzIGEgY2hhbmdlIGZyb20gcHJldmlvdXNseSBqdXN0IGRlZmluaW5nIGRhdGEtcmVsPWJhY2sKCQkvLyBvbiB0aGUgYnV0dG9uIGFuZCBsZXR0aW5nIG5hdiBoYW5kbGUgaXQKCQkvLwoJCS8vIFVzZSBjbGljayByYXRoZXIgdGhhbiB2Y2xpY2sgaW4gb3JkZXIgdG8gcHJldmVudCB0aGUgcG9zc2liaWxpdHkgb2YgdW5pbnRlbnRpb25hbGx5CgkJLy8gcmVvcGVuaW5nIHRoZSBkaWFsb2cgaWYgdGhlIGRpYWxvZyBvcGVuaW5nIGl0ZW0gd2FzIGRpcmVjdGx5IHVuZGVyIHRoZSBjbG9zZSBidXR0b24uCgkJaGVhZGVyQ2xvc2VCdXR0b24uYmluZCggImNsaWNrIiwgZnVuY3Rpb24oKSB7CgkJCXNlbGYuY2xvc2UoKTsKCQl9KTsKCgkJLyogYmluZCBldmVudHMKCQkJLSBjbGlja3MgYW5kIHN1Ym1pdHMgc2hvdWxkIHVzZSB0aGUgY2xvc2luZyB0cmFuc2l0aW9uIHRoYXQgdGhlIGRpYWxvZyBvcGVuZWQgd2l0aAoJCQkJdW5sZXNzIGEgZGF0YS10cmFuc2l0aW9uIGlzIHNwZWNpZmllZCBvbiB0aGUgbGluay9mb3JtCgkJCS0gaWYgdGhlIGNsaWNrIHdhcyBvbiB0aGUgY2xvc2UgYnV0dG9uLCBvciB0aGUgbGluayBoYXMgYSBkYXRhLXJlbD0iYmFjayIgaXQnbGwgZ28gYmFjayBpbiBoaXN0b3J5IG5hdHVyYWxseQoJCSovCgkJJGVsLmJpbmQoICJ2Y2xpY2sgc3VibWl0IiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQl2YXIgJHRhcmdldCA9ICQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIGV2ZW50LnR5cGUgPT09ICJ2Y2xpY2siID8gImEiIDogImZvcm0iICksCgkJCQlhY3RpdmU7CgoJCQlpZiAoICR0YXJnZXQubGVuZ3RoICYmICEkdGFyZ2V0LmpxbURhdGEoICJ0cmFuc2l0aW9uIiApICkgewoKCQkJCWFjdGl2ZSA9ICQubW9iaWxlLnVybEhpc3RvcnkuZ2V0QWN0aXZlKCkgfHwge307CgoJCQkJJHRhcmdldC5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidHJhbnNpdGlvbiIsICggYWN0aXZlLnRyYW5zaXRpb24gfHwgJC5tb2JpbGUuZGVmYXVsdERpYWxvZ1RyYW5zaXRpb24gKSApCgkJCQkJLmF0dHIoICJkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJkaXJlY3Rpb24iLCAicmV2ZXJzZSIgKTsKCQkJfQoJCX0pCgkJLmJpbmQoICJwYWdlaGlkZSIsIGZ1bmN0aW9uKCBlLCB1aSApIHsKCQkJJCggdGhpcyApLmZpbmQoICIuIiArICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICkubm90KCAiLnVpLXNsaWRlci1iZyIgKS5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQl9KQoJCS8vIE92ZXJyaWRlIHRoZSB0aGVtZSBzZXQgYnkgdGhlIHBhZ2UgcGx1Z2luIG9uIHBhZ2VzaG93CgkJLmJpbmQoICJwYWdlYmVmb3Jlc2hvdyIsIGZ1bmN0aW9uKCkgewoJCQlzZWxmLl9pc0Nsb3NlYWJsZSA9IHRydWU7CgkJCWlmICggc2VsZi5vcHRpb25zLm92ZXJsYXlUaGVtZSApIHsKCQkJCXNlbGYuZWxlbWVudAoJCQkJCS5wYWdlKCAicmVtb3ZlQ29udGFpbmVyQmFja2dyb3VuZCIgKQoJCQkJCS5wYWdlKCAic2V0Q29udGFpbmVyQmFja2dyb3VuZCIsIHNlbGYub3B0aW9ucy5vdmVybGF5VGhlbWUgKTsKCQkJfQoJCX0pOwoJfSwKCgkvLyBDbG9zZSBtZXRob2QgZ29lcyBiYWNrIGluIGhpc3RvcnkKCWNsb3NlOiBmdW5jdGlvbigpIHsKCQl2YXIgZHN0OwoKCQlpZiAoIHRoaXMuX2lzQ2xvc2VhYmxlICkgewoJCQl0aGlzLl9pc0Nsb3NlYWJsZSA9IGZhbHNlOwoJCQlpZiAoICQubW9iaWxlLmhhc2hMaXN0ZW5pbmdFbmFibGVkICkgewoJCQkJJC5tb2JpbGUuYmFjaygpOwoJCQl9IGVsc2UgewoJCQkJZHN0ID0gJC5tb2JpbGUudXJsSGlzdG9yeS5nZXRQcmV2KCkudXJsOwoJCQkJaWYgKCAhJC5tb2JpbGUucGF0aC5pc1BhdGgoIGRzdCApICkgewoJCQkJCWRzdCA9ICQubW9iaWxlLnBhdGgubWFrZVVybEFic29sdXRlKCAiIyIgKyBkc3QgKTsKCQkJCX0KCgkJCQkkLm1vYmlsZS5jaGFuZ2VQYWdlKCBkc3QsIHsgY2hhbmdlSGFzaDogZmFsc2UsIGZyb21IYXNoQ2hhbmdlOiB0cnVlIH0gKTsKCQkJfQoJCX0KCX0KfSk7CgovL2F1dG8gc2VsZi1pbml0IHdpZGdldHMKJCggZG9jdW1lbnQgKS5kZWxlZ2F0ZSggJC5tb2JpbGUuZGlhbG9nLnByb3RvdHlwZS5vcHRpb25zLmluaXRTZWxlY3RvciwgInBhZ2VjcmVhdGUiLCBmdW5jdGlvbigpIHsKCSQubW9iaWxlLmRpYWxvZy5wcm90b3R5cGUuZW5oYW5jZSggdGhpcyApOwp9KTsKCn0pKCBqUXVlcnksIHRoaXMgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC5tb2JpbGUucGFnZS5wcm90b3R5cGUub3B0aW9ucy5iYWNrQnRuVGV4dCAgPSAiQmFjayI7CiQubW9iaWxlLnBhZ2UucHJvdG90eXBlLm9wdGlvbnMuYWRkQmFja0J0biAgID0gZmFsc2U7CiQubW9iaWxlLnBhZ2UucHJvdG90eXBlLm9wdGlvbnMuYmFja0J0blRoZW1lID0gbnVsbDsKJC5tb2JpbGUucGFnZS5wcm90b3R5cGUub3B0aW9ucy5oZWFkZXJUaGVtZSAgPSAiYSI7CiQubW9iaWxlLnBhZ2UucHJvdG90eXBlLm9wdGlvbnMuZm9vdGVyVGhlbWUgID0gImEiOwokLm1vYmlsZS5wYWdlLnByb3RvdHlwZS5vcHRpb25zLmNvbnRlbnRUaGVtZSA9IG51bGw7CgovLyBOT1RFIGJpbmQgdXNlZCB0byBmb3JjZSB0aGlzIGJpbmRpbmcgdG8gcnVuIGJlZm9yZSB0aGUgYnV0dG9uTWFya3VwIGJpbmRpbmcKLy8gICAgICB3aGljaCBleHBlY3RzIC51aS1mb290ZXIgdG9wIGJlIGFwcGxpZWQgaW4gaXRzIGdpZ2FudGljIHNlbGVjdG9yCi8vIFRPRE8gcmVtb3ZlIHRoZSBidXR0b25NYXJrdXAgZ2lhbnQgc2VsZWN0b3IgYW5kIG1vdmUgaXQgdG8gdGhlIHZhcmlvdXMgbW9kdWxlcwovLyAgICAgIG9uIHdoaWNoIGl0IGRlcGVuZHMKJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSIsIGZ1bmN0aW9uKCBlICkgewoJdmFyICRwYWdlID0gJCggZS50YXJnZXQgKSwKCQlvID0gJHBhZ2UuZGF0YSggInBhZ2UiICkub3B0aW9ucywKCQlwYWdlUm9sZSA9ICRwYWdlLmpxbURhdGEoICJyb2xlIiApLAoJCXBhZ2VUaGVtZSA9IG8udGhlbWU7CgoJJCggIjpqcW1EYXRhKHJvbGU9J2hlYWRlcicpLCA6anFtRGF0YShyb2xlPSdmb290ZXInKSwgOmpxbURhdGEocm9sZT0nY29udGVudCcpIiwgJHBhZ2UgKQoJCS5qcW1FbmhhbmNlYWJsZSgpCgkJLmVhY2goZnVuY3Rpb24oKSB7CgoJCXZhciAkdGhpcyA9ICQoIHRoaXMgKSwKCQkJcm9sZSA9ICR0aGlzLmpxbURhdGEoICJyb2xlIiApLAoJCQl0aGVtZSA9ICR0aGlzLmpxbURhdGEoICJ0aGVtZSIgKSwKCQkJY29udGVudFRoZW1lID0gdGhlbWUgfHwgby5jb250ZW50VGhlbWUgfHwgKCBwYWdlUm9sZSA9PT0gImRpYWxvZyIgJiYgcGFnZVRoZW1lICksCgkJCSRoZWFkZXJhbmNob3JzLAoJCQlsZWZ0YnRuLAoJCQlyaWdodGJ0biwKCQkJYmFja0J0bjsKCgkJJHRoaXMuYWRkQ2xhc3MoICJ1aS0iICsgcm9sZSApOwoKCQkvL2FwcGx5IHRoZW1pbmcgYW5kIG1hcmt1cCBtb2RpZmljYXRpb25zIHRvIHBhZ2UsaGVhZGVyLGNvbnRlbnQsZm9vdGVyCgkJaWYgKCByb2xlID09PSAiaGVhZGVyIiB8fCByb2xlID09PSAiZm9vdGVyIiApIHsKCgkJCXZhciB0aGlzVGhlbWUgPSB0aGVtZSB8fCAoIHJvbGUgPT09ICJoZWFkZXIiID8gby5oZWFkZXJUaGVtZSA6IG8uZm9vdGVyVGhlbWUgKSB8fCBwYWdlVGhlbWU7CgoJCQkkdGhpcwoJCQkJLy9hZGQgdGhlbWUgY2xhc3MKCQkJCS5hZGRDbGFzcyggInVpLWJhci0iICsgdGhpc1RoZW1lICkKCQkJCS8vIEFkZCBBUklBIHJvbGUKCQkJCS5hdHRyKCAicm9sZSIsIHJvbGUgPT09ICJoZWFkZXIiID8gImJhbm5lciIgOiAiY29udGVudGluZm8iICk7CgoJCQlpZiAoIHJvbGUgPT09ICJoZWFkZXIiKSB7CgkJCQkvLyBSaWdodCxsZWZ0IGJ1dHRvbnMKCQkJCSRoZWFkZXJhbmNob3JzCT0gJHRoaXMuY2hpbGRyZW4oICJhLCBidXR0b24iICk7CgkJCQlsZWZ0YnRuCT0gJGhlYWRlcmFuY2hvcnMuaGFzQ2xhc3MoICJ1aS1idG4tbGVmdCIgKTsKCQkJCXJpZ2h0YnRuID0gJGhlYWRlcmFuY2hvcnMuaGFzQ2xhc3MoICJ1aS1idG4tcmlnaHQiICk7CgoJCQkJbGVmdGJ0biA9IGxlZnRidG4gfHwgJGhlYWRlcmFuY2hvcnMuZXEoIDAgKS5ub3QoICIudWktYnRuLXJpZ2h0IiApLmFkZENsYXNzKCAidWktYnRuLWxlZnQiICkubGVuZ3RoOwoKCQkJCXJpZ2h0YnRuID0gcmlnaHRidG4gfHwgJGhlYWRlcmFuY2hvcnMuZXEoIDEgKS5hZGRDbGFzcyggInVpLWJ0bi1yaWdodCIgKS5sZW5ndGg7CgkJCX0KCgkJCS8vIEF1dG8tYWRkIGJhY2sgYnRuIG9uIHBhZ2VzIGJleW9uZCBmaXJzdCB2aWV3CgkJCWlmICggby5hZGRCYWNrQnRuICYmCgkJCQlyb2xlID09PSAiaGVhZGVyIiAmJgoJCQkJJCggIi51aS1wYWdlIiApLmxlbmd0aCA+IDEgJiYKCQkJCSRwYWdlLmpxbURhdGEoICJ1cmwiICkgIT09ICQubW9iaWxlLnBhdGguc3RyaXBIYXNoKCBsb2NhdGlvbi5oYXNoICkgJiYKCQkJCSFsZWZ0YnRuICkgewoKCQkJCWJhY2tCdG4gPSAkKCAiPGEgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApOycgY2xhc3M9J3VpLWJ0bi1sZWZ0JyBkYXRhLSIrICQubW9iaWxlLm5zICsicmVsPSdiYWNrJyBkYXRhLSIrICQubW9iaWxlLm5zICsiaWNvbj0nYXJyb3ctbCc+Iisgby5iYWNrQnRuVGV4dCArIjwvYT4iICkKCQkJCQkvLyBJZiB0aGVtZSBpcyBwcm92aWRlZCwgb3ZlcnJpZGUgZGVmYXVsdCBpbmhlcml0YW5jZQoJCQkJCS5hdHRyKCAiZGF0YS0iKyAkLm1vYmlsZS5ucyArInRoZW1lIiwgby5iYWNrQnRuVGhlbWUgfHwgdGhpc1RoZW1lICkKCQkJCQkucHJlcGVuZFRvKCAkdGhpcyApOwoJCQl9CgoJCQkvLyBQYWdlIHRpdGxlCgkJCSR0aGlzLmNoaWxkcmVuKCAiaDEsIGgyLCBoMywgaDQsIGg1LCBoNiIgKQoJCQkJLmFkZENsYXNzKCAidWktdGl0bGUiICkKCQkJCS8vIFJlZ2FyZGxlc3Mgb2YgaCBlbGVtZW50IG51bWJlciBpbiBzcmMsIGl0IGJlY29tZXMgaDEgZm9yIHRoZSBlbmhhbmNlZCBwYWdlCgkJCQkuYXR0cih7CgkJCQkJInJvbGUiOiAiaGVhZGluZyIsCgkJCQkJImFyaWEtbGV2ZWwiOiAiMSIKCQkJCX0pOwoKCQl9IGVsc2UgaWYgKCByb2xlID09PSAiY29udGVudCIgKSB7CgkJCWlmICggY29udGVudFRoZW1lICkgewoJCQkJJHRoaXMuYWRkQ2xhc3MoICJ1aS1ib2R5LSIgKyAoIGNvbnRlbnRUaGVtZSApICk7CgkJCX0KCgkJCS8vIEFkZCBBUklBIHJvbGUKCQkJJHRoaXMuYXR0ciggInJvbGUiLCAibWFpbiIgKTsKCQl9Cgl9KTsKfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCi8vIGZpbHRlciBmdW5jdGlvbiByZW1vdmVzIHdoaXRlc3BhY2UgYmV0d2VlbiBsYWJlbCBhbmQgZm9ybSBlbGVtZW50IHNvIHdlIGNhbiB1c2UgaW5saW5lLWJsb2NrIChub2RlVHlwZSAzID0gdGV4dCkKJC5mbi5maWVsZGNvbnRhaW4gPSBmdW5jdGlvbiggb3B0aW9ucyApIHsKCXJldHVybiB0aGlzCgkJLmFkZENsYXNzKCAidWktZmllbGQtY29udGFpbiB1aS1ib2R5IHVpLWJyIiApCgkJLmNvbnRlbnRzKCkuZmlsdGVyKCBmdW5jdGlvbigpIHsKCQkJcmV0dXJuICggdGhpcy5ub2RlVHlwZSA9PT0gMyAmJiAhL1xTLy50ZXN0KCB0aGlzLm5vZGVWYWx1ZSApICk7CgkJfSkucmVtb3ZlKCk7Cn07CgovL2F1dG8gc2VsZi1pbml0IHdpZGdldHMKJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiggZSApIHsKCSQoICI6anFtRGF0YShyb2xlPSdmaWVsZGNvbnRhaW4nKSIsIGUudGFyZ2V0ICkuanFtRW5oYW5jZWFibGUoKS5maWVsZGNvbnRhaW4oKTsKfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQuZm4uZ3JpZCA9IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKCgkJdmFyICR0aGlzID0gJCggdGhpcyApLAoJCQlvID0gJC5leHRlbmQoewoJCQkJZ3JpZDogbnVsbAoJCQl9LCBvcHRpb25zICksCgkJCSRraWRzID0gJHRoaXMuY2hpbGRyZW4oKSwKCQkJZ3JpZENvbHMgPSB7IHNvbG86MSwgYToyLCBiOjMsIGM6NCwgZDo1IH0sCgkJCWdyaWQgPSBvLmdyaWQsCgkJCWl0ZXJhdG9yOwoKCQkJaWYgKCAhZ3JpZCApIHsKCQkJCWlmICggJGtpZHMubGVuZ3RoIDw9IDUgKSB7CgkJCQkJZm9yICggdmFyIGxldHRlciBpbiBncmlkQ29scyApIHsKCQkJCQkJaWYgKCBncmlkQ29sc1sgbGV0dGVyIF0gPT09ICRraWRzLmxlbmd0aCApIHsKCQkJCQkJCWdyaWQgPSBsZXR0ZXI7CgkJCQkJCX0KCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCWdyaWQgPSAiYSI7CgkJCQkJJHRoaXMuYWRkQ2xhc3MoICJ1aS1ncmlkLWR1byIgKTsKCQkJCX0KCQkJfQoJCQlpdGVyYXRvciA9IGdyaWRDb2xzW2dyaWRdOwoKCQkkdGhpcy5hZGRDbGFzcyggInVpLWdyaWQtIiArIGdyaWQgKTsKCgkJJGtpZHMuZmlsdGVyKCAiOm50aC1jaGlsZCgiICsgaXRlcmF0b3IgKyAibisxKSIgKS5hZGRDbGFzcyggInVpLWJsb2NrLWEiICk7CgoJCWlmICggaXRlcmF0b3IgPiAxICkgewoJCQkka2lkcy5maWx0ZXIoICI6bnRoLWNoaWxkKCIgKyBpdGVyYXRvciArICJuKzIpIiApLmFkZENsYXNzKCAidWktYmxvY2stYiIgKTsKCQl9CgkJaWYgKCBpdGVyYXRvciA+IDIgKSB7CgkJCSRraWRzLmZpbHRlciggIjpudGgtY2hpbGQoIiArIGl0ZXJhdG9yICsgIm4rMykiICkuYWRkQ2xhc3MoICJ1aS1ibG9jay1jIiApOwoJCX0KCQlpZiAoIGl0ZXJhdG9yID4gMyApIHsKCQkJJGtpZHMuZmlsdGVyKCAiOm50aC1jaGlsZCgiICsgaXRlcmF0b3IgKyAibis0KSIgKS5hZGRDbGFzcyggInVpLWJsb2NrLWQiICk7CgkJfQoJCWlmICggaXRlcmF0b3IgPiA0ICkgewoJCQkka2lkcy5maWx0ZXIoICI6bnRoLWNoaWxkKCIgKyBpdGVyYXRvciArICJuKzUpIiApLmFkZENsYXNzKCAidWktYmxvY2stZSIgKTsKCQl9Cgl9KTsKfTsKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBlICkgewoJJCggIjpqcW1EYXRhKHJvbGU9J25vanMnKSIsIGUudGFyZ2V0ICkuYWRkQ2xhc3MoICJ1aS1ub2pzIiApOwoJCn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmZuLmJ1dHRvbk1hcmt1cCA9IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJdmFyICR3b3JraW5nU2V0ID0gdGhpcywKCQltYXBUb0RhdGFBdHRyID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJCWUuc2V0QXR0cmlidXRlKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyBrZXksIHZhbHVlICk7CgkJCWVsLmpxbURhdGEoIGtleSwgdmFsdWUgKTsKCQl9OwoKCS8vIEVuZm9yY2Ugb3B0aW9ucyB0byBiZSBvZiB0eXBlIHN0cmluZwoJb3B0aW9ucyA9ICggb3B0aW9ucyAmJiAoICQudHlwZSggb3B0aW9ucyApID09PSAib2JqZWN0IiApICk/IG9wdGlvbnMgOiB7fTsKCWZvciAoIHZhciBpID0gMDsgaSA8ICR3b3JraW5nU2V0Lmxlbmd0aDsgaSsrICkgewoJCXZhciBlbCA9ICR3b3JraW5nU2V0LmVxKCBpICksCgkJCWUgPSBlbFsgMCBdLAoJCQlvID0gJC5leHRlbmQoIHt9LCAkLmZuLmJ1dHRvbk1hcmt1cC5kZWZhdWx0cywgewoJCQkJaWNvbjogICAgICAgb3B0aW9ucy5pY29uICAgICAgICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmljb24gICAgICAgOiBlbC5qcW1EYXRhKCAiaWNvbiIgKSwKCQkJCWljb25wb3M6ICAgIG9wdGlvbnMuaWNvbnBvcyAgICAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pY29ucG9zICAgIDogZWwuanFtRGF0YSggImljb25wb3MiICksCgkJCQl0aGVtZTogICAgICBvcHRpb25zLnRoZW1lICAgICAgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMudGhlbWUgICAgICA6IGVsLmpxbURhdGEoICJ0aGVtZSIgKSB8fCAkLm1vYmlsZS5nZXRJbmhlcml0ZWRUaGVtZSggZWwsICJjIiApLAoJCQkJaW5saW5lOiAgICAgb3B0aW9ucy5pbmxpbmUgICAgICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmlubGluZSAgICAgOiBlbC5qcW1EYXRhKCAiaW5saW5lIiApLAoJCQkJc2hhZG93OiAgICAgb3B0aW9ucy5zaGFkb3cgICAgICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnNoYWRvdyAgICAgOiBlbC5qcW1EYXRhKCAic2hhZG93IiApLAoJCQkJY29ybmVyczogICAgb3B0aW9ucy5jb3JuZXJzICAgICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNvcm5lcnMgICAgOiBlbC5qcW1EYXRhKCAiY29ybmVycyIgKSwKCQkJCWljb25zaGFkb3c6IG9wdGlvbnMuaWNvbnNoYWRvdyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pY29uc2hhZG93IDogZWwuanFtRGF0YSggImljb25zaGFkb3ciICksCgkJCQltaW5pOiAgICAgICBvcHRpb25zLm1pbmkgICAgICAgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubWluaSAgICAgICA6IGVsLmpxbURhdGEoICJtaW5pIiApCgkJCX0sIG9wdGlvbnMgKSwKCgkJCS8vIENsYXNzZXMgRGVmaW5lZAoJCQlpbm5lckNsYXNzID0gInVpLWJ0bi1pbm5lciIsCgkJCXRleHRDbGFzcyA9ICJ1aS1idG4tdGV4dCIsCgkJCWJ1dHRvbkNsYXNzLCBpY29uQ2xhc3MsCgkJCS8vIEJ1dHRvbiBpbm5lciBtYXJrdXAKCQkJYnV0dG9uSW5uZXIsCgkJCWJ1dHRvblRleHQsCgkJCWJ1dHRvbkljb24sCgkJCWJ1dHRvbkVsZW1lbnRzOwoKCQkkLmVhY2goIG8sIG1hcFRvRGF0YUF0dHIgKTsKCgkJaWYgKCBlbC5qcW1EYXRhKCAicmVsIiApID09PSAicG9wdXAiICYmIGVsLmF0dHIoICJocmVmIiApICkgewoJCQllLnNldEF0dHJpYnV0ZSggImFyaWEtaGFzcG9wdXAiLCB0cnVlICk7CgkJCWUuc2V0QXR0cmlidXRlKCAiYXJpYS1vd25zIiwgZS5nZXRBdHRyaWJ1dGUoICJocmVmIiApICk7CgkJfQoKCQkvLyBDaGVjayBpZiB0aGlzIGVsZW1lbnQgaXMgYWxyZWFkeSBlbmhhbmNlZAoJCWJ1dHRvbkVsZW1lbnRzID0gJC5kYXRhKCAoICggZS50YWdOYW1lID09PSAiSU5QVVQiIHx8IGUudGFnTmFtZSA9PT0gIkJVVFRPTiIgKSA/IGUucGFyZW50Tm9kZSA6IGUgKSwgImJ1dHRvbkVsZW1lbnRzIiApOwoKCQlpZiAoIGJ1dHRvbkVsZW1lbnRzICkgewoJCQllID0gYnV0dG9uRWxlbWVudHMub3V0ZXI7CgkJCWVsID0gJCggZSApOwoJCQlidXR0b25Jbm5lciA9IGJ1dHRvbkVsZW1lbnRzLmlubmVyOwoJCQlidXR0b25UZXh0ID0gYnV0dG9uRWxlbWVudHMudGV4dDsKCQkJLy8gV2Ugd2lsbCByZWNyZWF0ZSB0aGlzIGljb24gYmVsb3cKCQkJJCggYnV0dG9uRWxlbWVudHMuaWNvbiApLnJlbW92ZSgpOwoJCQlidXR0b25FbGVtZW50cy5pY29uID0gbnVsbDsKCQl9CgkJZWxzZSB7CgkJCWJ1dHRvbklubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggby53cmFwcGVyRWxzICk7CgkJCWJ1dHRvblRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBvLndyYXBwZXJFbHMgKTsKCQl9CgkJYnV0dG9uSWNvbiA9IG8uaWNvbiA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJzcGFuIiApIDogbnVsbDsKCgkJaWYgKCBhdHRhY2hFdmVudHMgJiYgIWJ1dHRvbkVsZW1lbnRzICkgewoJCQlhdHRhY2hFdmVudHMoKTsKCQl9CgoJCS8vIGlmIG5vdCwgdHJ5IHRvIGZpbmQgY2xvc2VzdCB0aGVtZSBjb250YWluZXIKCQlpZiAoICFvLnRoZW1lICkgewoJCQlvLnRoZW1lID0gJC5tb2JpbGUuZ2V0SW5oZXJpdGVkVGhlbWUoIGVsLCAiYyIgKTsKCQl9CgoJCWJ1dHRvbkNsYXNzID0gInVpLWJ0biB1aS1idG4tdXAtIiArIG8udGhlbWU7CgkJYnV0dG9uQ2xhc3MgKz0gby5zaGFkb3cgPyAiIHVpLXNoYWRvdyIgOiAiIjsKCQlidXR0b25DbGFzcyArPSBvLmNvcm5lcnMgPyAiIHVpLWJ0bi1jb3JuZXItYWxsIiA6ICIiOwoKCQlpZiAoIG8ubWluaSAhPT0gdW5kZWZpbmVkICkgewoJCQkvLyBVc2VkIHRvIGNvbnRyb2wgc3R5bGluZyBpbiBoZWFkZXJzL2Zvb3RlcnMsIHdoZXJlIGJ1dHRvbnMgZGVmYXVsdCB0byBgbWluaWAgc3R5bGUuCgkJCWJ1dHRvbkNsYXNzICs9IG8ubWluaSA9PT0gdHJ1ZSA/ICIgdWktbWluaSIgOiAiIHVpLWZ1bGxzaXplIjsKCQl9CgoJCWlmICggby5pbmxpbmUgIT09IHVuZGVmaW5lZCApIHsKCQkJLy8gVXNlZCB0byBjb250cm9sIHN0eWxpbmcgaW4gaGVhZGVycy9mb290ZXJzLCB3aGVyZSBidXR0b25zIGRlZmF1bHQgdG8gYGlubGluZWAgc3R5bGUuCgkJCWJ1dHRvbkNsYXNzICs9IG8uaW5saW5lID09PSB0cnVlID8gIiB1aS1idG4taW5saW5lIiA6ICIgdWktYnRuLWJsb2NrIjsKCQl9CgoJCWlmICggby5pY29uICkgewoJCQlvLmljb24gPSAidWktaWNvbi0iICsgby5pY29uOwoJCQlvLmljb25wb3MgPSBvLmljb25wb3MgfHwgImxlZnQiOwoKCQkJaWNvbkNsYXNzID0gInVpLWljb24gIiArIG8uaWNvbjsKCgkJCWlmICggby5pY29uc2hhZG93ICkgewoJCQkJaWNvbkNsYXNzICs9ICIgdWktaWNvbi1zaGFkb3ciOwoJCQl9CgkJfQoKCQlpZiAoIG8uaWNvbnBvcyApIHsKCQkJYnV0dG9uQ2xhc3MgKz0gIiB1aS1idG4taWNvbi0iICsgby5pY29ucG9zOwoKCQkJaWYgKCBvLmljb25wb3MgPT09ICJub3RleHQiICYmICFlbC5hdHRyKCAidGl0bGUiICkgKSB7CgkJCQllbC5hdHRyKCAidGl0bGUiLCBlbC5nZXRFbmNvZGVkVGV4dCgpICk7CgkJCX0KCQl9CgoJCWlubmVyQ2xhc3MgKz0gby5jb3JuZXJzID8gIiB1aS1idG4tY29ybmVyLWFsbCIgOiAiIjsKCgkJaWYgKCBvLmljb25wb3MgJiYgby5pY29ucG9zID09PSAibm90ZXh0IiAmJiAhZWwuYXR0ciggInRpdGxlIiApICkgewoJCQllbC5hdHRyKCAidGl0bGUiLCBlbC5nZXRFbmNvZGVkVGV4dCgpICk7CgkJfQoKCQlpZiAoIGJ1dHRvbkVsZW1lbnRzICkgewoJCQllbC5yZW1vdmVDbGFzcyggYnV0dG9uRWxlbWVudHMuYmNscyB8fCAiIiApOwoJCX0KCQllbC5yZW1vdmVDbGFzcyggInVpLWxpbmsiICkuYWRkQ2xhc3MoIGJ1dHRvbkNsYXNzICk7CgoJCWJ1dHRvbklubmVyLmNsYXNzTmFtZSA9IGlubmVyQ2xhc3M7CgoJCWJ1dHRvblRleHQuY2xhc3NOYW1lID0gdGV4dENsYXNzOwoJCWlmICggIWJ1dHRvbkVsZW1lbnRzICkgewoJCQlidXR0b25Jbm5lci5hcHBlbmRDaGlsZCggYnV0dG9uVGV4dCApOwoJCX0KCQlpZiAoIGJ1dHRvbkljb24gKSB7CgkJCWJ1dHRvbkljb24uY2xhc3NOYW1lID0gaWNvbkNsYXNzOwoJCQlpZiAoICEoIGJ1dHRvbkVsZW1lbnRzICYmIGJ1dHRvbkVsZW1lbnRzLmljb24gKSApIHsKCQkJCWJ1dHRvbkljb24uaW5uZXJIVE1MID0gIiYjMTYwOyI7CgkJCQlidXR0b25Jbm5lci5hcHBlbmRDaGlsZCggYnV0dG9uSWNvbiApOwoJCQl9CgkJfQoKCQl3aGlsZSAoIGUuZmlyc3RDaGlsZCAmJiAhYnV0dG9uRWxlbWVudHMgKSB7CgkJCWJ1dHRvblRleHQuYXBwZW5kQ2hpbGQoIGUuZmlyc3RDaGlsZCApOwoJCX0KCgkJaWYgKCAhYnV0dG9uRWxlbWVudHMgKSB7CgkJCWUuYXBwZW5kQ2hpbGQoIGJ1dHRvbklubmVyICk7CgkJfQoKCQkvLyBBc3NpZ24gYSBzdHJ1Y3R1cmUgY29udGFpbmluZyB0aGUgZWxlbWVudHMgb2YgdGhpcyBidXR0b24gdG8gdGhlIGVsZW1lbnRzIG9mIHRoaXMgYnV0dG9uLiBUaGlzCgkJLy8gd2lsbCBhbGxvdyB1cyB0byByZWNvZ25pemUgdGhpcyBhcyBhbiBhbHJlYWR5LWVuaGFuY2VkIGJ1dHRvbiBpbiBmdXR1cmUgY2FsbHMgdG8gYnV0dG9uTWFya3VwKCkuCgkJYnV0dG9uRWxlbWVudHMgPSB7CgkJCWJjbHMgIDogYnV0dG9uQ2xhc3MsCgkJCW91dGVyIDogZSwKCQkJaW5uZXIgOiBidXR0b25Jbm5lciwKCQkJdGV4dCAgOiBidXR0b25UZXh0LAoJCQlpY29uICA6IGJ1dHRvbkljb24KCQl9OwoKCQkkLmRhdGEoIGUsICAgICAgICAgICAnYnV0dG9uRWxlbWVudHMnLCBidXR0b25FbGVtZW50cyApOwoJCSQuZGF0YSggYnV0dG9uSW5uZXIsICdidXR0b25FbGVtZW50cycsIGJ1dHRvbkVsZW1lbnRzICk7CgkJJC5kYXRhKCBidXR0b25UZXh0LCAgJ2J1dHRvbkVsZW1lbnRzJywgYnV0dG9uRWxlbWVudHMgKTsKCQlpZiAoIGJ1dHRvbkljb24gKSB7CgkJCSQuZGF0YSggYnV0dG9uSWNvbiwgJ2J1dHRvbkVsZW1lbnRzJywgYnV0dG9uRWxlbWVudHMgKTsKCQl9Cgl9CgoJcmV0dXJuIHRoaXM7Cn07CgokLmZuLmJ1dHRvbk1hcmt1cC5kZWZhdWx0cyA9IHsKCWNvcm5lcnM6IHRydWUsCglzaGFkb3c6IHRydWUsCglpY29uc2hhZG93OiB0cnVlLAoJd3JhcHBlckVsczogInNwYW4iCn07CgpmdW5jdGlvbiBjbG9zZXN0RW5hYmxlZEJ1dHRvbiggZWxlbWVudCApIHsKICAgIHZhciBjbmFtZTsKCiAgICB3aGlsZSAoIGVsZW1lbnQgKSB7CgkJLy8gTm90ZSB0aGF0IHdlIGNoZWNrIGZvciB0eXBlb2YgY2xhc3NOYW1lIGJlbG93IGJlY2F1c2UgdGhlIGVsZW1lbnQgd2UKCQkvLyBoYW5kZWQgY291bGQgYmUgaW4gYW4gU1ZHIERPTSB3aGVyZSBjbGFzc05hbWUgb24gU1ZHIGVsZW1lbnRzIGlzIGRlZmluZWQgdG8KCQkvLyBiZSBvZiBhIGRpZmZlcmVudCB0eXBlIChTVkdBbmltYXRlZFN0cmluZykuIFdlIG9ubHkgb3BlcmF0ZSBvbiBIVE1MIERPTQoJCS8vIGVsZW1lbnRzLCBzbyB3ZSBsb29rIGZvciBwbGFpbiAic3RyaW5nIi4KICAgICAgICBjbmFtZSA9ICggdHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJyApICYmICggZWxlbWVudC5jbGFzc05hbWUgKyAnICcgKTsKICAgICAgICBpZiAoIGNuYW1lICYmIGNuYW1lLmluZGV4T2YoICJ1aS1idG4gIiApID4gLTEgJiYgY25hbWUuaW5kZXhPZiggInVpLWRpc2FibGVkICIgKSA8IDAgKSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgIH0KCiAgICByZXR1cm4gZWxlbWVudDsKfQoKdmFyIGF0dGFjaEV2ZW50cyA9IGZ1bmN0aW9uKCkgewoJdmFyIGhvdmVyRGVsYXkgPSAkLm1vYmlsZS5idXR0b25NYXJrdXAuaG92ZXJEZWxheSwgaG92LCBmb2M7CgoJJCggZG9jdW1lbnQgKS5iaW5kKCB7CgkJInZtb3VzZWRvd24gdm1vdXNlY2FuY2VsIHZtb3VzZXVwIHZtb3VzZW92ZXIgdm1vdXNlb3V0IGZvY3VzIGJsdXIgc2Nyb2xsc3RhcnQiOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCXZhciB0aGVtZSwKCQkJCSRidG4gPSAkKCBjbG9zZXN0RW5hYmxlZEJ1dHRvbiggZXZlbnQudGFyZ2V0ICkgKSwKCQkJCWlzVG91Y2hFdmVudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgL150b3VjaC8udGVzdCggZXZlbnQub3JpZ2luYWxFdmVudC50eXBlICksCgkJCQlldnQgPSBldmVudC50eXBlOwoKCQkJaWYgKCAkYnRuLmxlbmd0aCApIHsKCQkJCXRoZW1lID0gJGJ0bi5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidGhlbWUiICk7CgoJCQkJaWYgKCBldnQgPT09ICJ2bW91c2Vkb3duIiApIHsKCQkJCQlpZiAoIGlzVG91Y2hFdmVudCApIHsKCQkJCQkJLy8gVXNlIGEgc2hvcnQgZGVsYXkgdG8gZGV0ZXJtaW5lIGlmIHRoZSB1c2VyIGlzIHNjcm9sbGluZyBiZWZvcmUgaGlnaGxpZ2h0aW5nCgkJCQkJCWhvdiA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgewoJCQkJCQkJJGJ0bi5yZW1vdmVDbGFzcyggInVpLWJ0bi11cC0iICsgdGhlbWUgKS5hZGRDbGFzcyggInVpLWJ0bi1kb3duLSIgKyB0aGVtZSApOwoJCQkJCQl9LCBob3ZlckRlbGF5ICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJJGJ0bi5yZW1vdmVDbGFzcyggInVpLWJ0bi11cC0iICsgdGhlbWUgKS5hZGRDbGFzcyggInVpLWJ0bi1kb3duLSIgKyB0aGVtZSApOwoJCQkJCX0KCQkJCX0gZWxzZSBpZiAoIGV2dCA9PT0gInZtb3VzZWNhbmNlbCIgfHwgZXZ0ID09PSAidm1vdXNldXAiICkgewoJCQkJCSRidG4ucmVtb3ZlQ2xhc3MoICJ1aS1idG4tZG93bi0iICsgdGhlbWUgKS5hZGRDbGFzcyggInVpLWJ0bi11cC0iICsgdGhlbWUgKTsKCQkJCX0gZWxzZSBpZiAoIGV2dCA9PT0gInZtb3VzZW92ZXIiIHx8IGV2dCA9PT0gImZvY3VzIiApIHsKCQkJCQlpZiAoIGlzVG91Y2hFdmVudCApIHsKCQkJCQkJLy8gVXNlIGEgc2hvcnQgZGVsYXkgdG8gZGV0ZXJtaW5lIGlmIHRoZSB1c2VyIGlzIHNjcm9sbGluZyBiZWZvcmUgaGlnaGxpZ2h0aW5nCgkJCQkJCWZvYyA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgewoJCQkJCQkJJGJ0bi5yZW1vdmVDbGFzcyggInVpLWJ0bi11cC0iICsgdGhlbWUgKS5hZGRDbGFzcyggInVpLWJ0bi1ob3Zlci0iICsgdGhlbWUgKTsKCQkJCQkJfSwgaG92ZXJEZWxheSApOwoJCQkJCX0gZWxzZSB7CgkJCQkJCSRidG4ucmVtb3ZlQ2xhc3MoICJ1aS1idG4tdXAtIiArIHRoZW1lICkuYWRkQ2xhc3MoICJ1aS1idG4taG92ZXItIiArIHRoZW1lICk7CgkJCQkJfQoJCQkJfSBlbHNlIGlmICggZXZ0ID09PSAidm1vdXNlb3V0IiB8fCBldnQgPT09ICJibHVyIiB8fCBldnQgPT09ICJzY3JvbGxzdGFydCIgKSB7CgkJCQkJJGJ0bi5yZW1vdmVDbGFzcyggInVpLWJ0bi1ob3Zlci0iICsgdGhlbWUgICsgIiB1aS1idG4tZG93bi0iICsgdGhlbWUgKS5hZGRDbGFzcyggInVpLWJ0bi11cC0iICsgdGhlbWUgKTsKCQkJCQlpZiAoIGhvdiApIHsKCQkJCQkJY2xlYXJUaW1lb3V0KCBob3YgKTsKCQkJCQl9CgkJCQkJaWYgKCBmb2MgKSB7CgkJCQkJCWNsZWFyVGltZW91dCggZm9jICk7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfSwKCQkiZm9jdXNpbiBmb2N1cyI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJJCggY2xvc2VzdEVuYWJsZWRCdXR0b24oIGV2ZW50LnRhcmdldCApICkuYWRkQ2xhc3MoICQubW9iaWxlLmZvY3VzQ2xhc3MgKTsKCQl9LAoJCSJmb2N1c291dCBibHVyIjogZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkkKCBjbG9zZXN0RW5hYmxlZEJ1dHRvbiggZXZlbnQudGFyZ2V0ICkgKS5yZW1vdmVDbGFzcyggJC5tb2JpbGUuZm9jdXNDbGFzcyApOwoJCX0KCX0pOwoKCWF0dGFjaEV2ZW50cyA9IG51bGw7Cn07CgovL2xpbmtzIGluIGJhcnMsIG9yIHRob3NlIHdpdGggIGRhdGEtcm9sZSBiZWNvbWUgYnV0dG9ucwovL2F1dG8gc2VsZi1pbml0IHdpZGdldHMKJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiggZSApIHsKCgkkKCAiOmpxbURhdGEocm9sZT0nYnV0dG9uJyksIC51aS1iYXIgPiBhLCAudWktaGVhZGVyID4gYSwgLnVpLWZvb3RlciA+IGEsIC51aS1iYXIgPiA6anFtRGF0YShyb2xlPSdjb250cm9sZ3JvdXAnKSA+IGEiLCBlLnRhcmdldCApCgkJLmpxbUVuaGFuY2VhYmxlKCkKCQkubm90KCAiYnV0dG9uLCBpbnB1dCwgLnVpLWJ0biwgOmpxbURhdGEocm9sZT0nbm9uZScpLCA6anFtRGF0YShyb2xlPSdub2pzJykiICkKCQkuYnV0dG9uTWFya3VwKCk7Cn0pOwoKfSkoIGpRdWVyeSApOwoKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoICJtb2JpbGUuY29sbGFwc2libGUiLCAkLm1vYmlsZS53aWRnZXQsIHsKCW9wdGlvbnM6IHsKCQlleHBhbmRDdWVUZXh0OiAiIGNsaWNrIHRvIGV4cGFuZCBjb250ZW50cyIsCgkJY29sbGFwc2VDdWVUZXh0OiAiIGNsaWNrIHRvIGNvbGxhcHNlIGNvbnRlbnRzIiwKCQljb2xsYXBzZWQ6IHRydWUsCgkJaGVhZGluZzogImgxLGgyLGgzLGg0LGg1LGg2LGxlZ2VuZCIsCgkJdGhlbWU6IG51bGwsCgkJY29udGVudFRoZW1lOiBudWxsLAoJCWluc2V0OiB0cnVlLAoJCW1pbmk6IGZhbHNlLAoJCWluaXRTZWxlY3RvcjogIjpqcW1EYXRhKHJvbGU9J2NvbGxhcHNpYmxlJykiCgl9LAoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCXZhciAkZWwgPSB0aGlzLmVsZW1lbnQsCgkJCW8gPSB0aGlzLm9wdGlvbnMsCgkJCWNvbGxhcHNpYmxlID0gJGVsLmFkZENsYXNzKCAidWktY29sbGFwc2libGUiICksCgkJCWNvbGxhcHNpYmxlSGVhZGluZyA9ICRlbC5jaGlsZHJlbiggby5oZWFkaW5nICkuZmlyc3QoKSwKCQkJY29sbGFwc2VkSWNvbiA9ICRlbC5qcW1EYXRhKCAiY29sbGFwc2VkLWljb24iICkgfHwgby5jb2xsYXBzZWRJY29uLAoJCQlleHBhbmRlZEljb24gPSAkZWwuanFtRGF0YSggImV4cGFuZGVkLWljb24iICkgfHwgby5leHBhbmRlZEljb24sCgkJCWNvbGxhcHNpYmxlQ29udGVudCA9IGNvbGxhcHNpYmxlLndyYXBJbm5lciggIjxkaXYgY2xhc3M9J3VpLWNvbGxhcHNpYmxlLWNvbnRlbnQnPjwvZGl2PiIgKS5jaGlsZHJlbiggIi51aS1jb2xsYXBzaWJsZS1jb250ZW50IiApLAoJCQljb2xsYXBzaWJsZVNldCA9ICRlbC5jbG9zZXN0KCAiOmpxbURhdGEocm9sZT0nY29sbGFwc2libGUtc2V0JykiICkuYWRkQ2xhc3MoICJ1aS1jb2xsYXBzaWJsZS1zZXQiICk7CgoJCS8vIFJlcGxhY2UgY29sbGFwc2libGVIZWFkaW5nIGlmIGl0J3MgYSBsZWdlbmQKCQlpZiAoIGNvbGxhcHNpYmxlSGVhZGluZy5pcyggImxlZ2VuZCIgKSApIHsKCQkJY29sbGFwc2libGVIZWFkaW5nID0gJCggIjxkaXYgcm9sZT0naGVhZGluZyc+IisgY29sbGFwc2libGVIZWFkaW5nLmh0bWwoKSArIjwvZGl2PiIgKS5pbnNlcnRCZWZvcmUoIGNvbGxhcHNpYmxlSGVhZGluZyApOwoJCQljb2xsYXBzaWJsZUhlYWRpbmcubmV4dCgpLnJlbW92ZSgpOwoJCX0KCgkJLy8gSWYgd2UgYXJlIGluIGEgY29sbGFwc2libGUgc2V0CgkJaWYgKCBjb2xsYXBzaWJsZVNldC5sZW5ndGggKSB7CgkJCS8vIEluaGVyaXQgdGhlIHRoZW1lIGZyb20gY29sbGFwc2libGUtc2V0CgkJCWlmICggIW8udGhlbWUgKSB7CgkJCQlvLnRoZW1lID0gY29sbGFwc2libGVTZXQuanFtRGF0YSggInRoZW1lIiApIHx8ICQubW9iaWxlLmdldEluaGVyaXRlZFRoZW1lKCBjb2xsYXBzaWJsZVNldCwgImMiICk7CgkJCX0KCQkJLy8gSW5oZXJpdCB0aGUgY29udGVudC10aGVtZSBmcm9tIGNvbGxhcHNpYmxlLXNldAoJCQlpZiAoICFvLmNvbnRlbnRUaGVtZSApIHsKCQkJCW8uY29udGVudFRoZW1lID0gY29sbGFwc2libGVTZXQuanFtRGF0YSggImNvbnRlbnQtdGhlbWUiICk7CgkJCX0KCgkJCS8vIEdldCB0aGUgcHJlZmVyZW5jZSBmb3IgY29sbGFwc2VkIGljb24gaW4gdGhlIHNldAoJCQlpZiAoICFvLmNvbGxhcHNlZEljb24gKSB7CgkJCQlvLmNvbGxhcHNlZEljb24gPSBjb2xsYXBzaWJsZVNldC5qcW1EYXRhKCAiY29sbGFwc2VkLWljb24iICk7CgkJCX0KCQkJLy8gR2V0IHRoZSBwcmVmZXJlbmNlIGZvciBleHBhbmRlZCBpY29uIGluIHRoZSBzZXQKCQkJaWYgKCAhby5leHBhbmRlZEljb24gKSB7CgkJCQlvLmV4cGFuZGVkSWNvbiA9IGNvbGxhcHNpYmxlU2V0LmpxbURhdGEoICJleHBhbmRlZC1pY29uIiApOwoJCQl9CgkJCS8vIEdldHMgdGhlIHByZWZlcmVuY2UgaWNvbiBwb3NpdGlvbiBpbiB0aGUgc2V0CgkJCWlmICggIW8uaWNvblBvcyApIHsKCQkJCW8uaWNvblBvcyA9IGNvbGxhcHNpYmxlU2V0LmpxbURhdGEoICJpY29ucG9zIiApOwoJCQl9CgkJCS8vIEluaGVyaXQgdGhlIHByZWZlcmVuY2UgZm9yIGluc2V0IGZyb20gY29sbGFwc2libGUtc2V0IG9yIHNldCB0aGUgZGVmYXVsdCB2YWx1ZSB0byBlbnN1cmUgZXF1YWx0eSB3aXRoaW4gYSBzZXQKCQkJaWYgKCBjb2xsYXBzaWJsZVNldC5qcW1EYXRhKCAiaW5zZXQiICkgIT09IHVuZGVmaW5lZCApIHsKCQkJCW8uaW5zZXQgPSBjb2xsYXBzaWJsZVNldC5qcW1EYXRhKCAiaW5zZXQiICk7CgkJCX0gZWxzZSB7CgkJCQlvLmluc2V0ID0gdHJ1ZTsKCQkJfQoJCQkvLyBHZXRzIHRoZSBwcmVmZXJlbmNlIGZvciBtaW5pIGluIHRoZSBzZXQKCQkJaWYgKCAhby5taW5pICkgewoJCQkJby5taW5pID0gY29sbGFwc2libGVTZXQuanFtRGF0YSggIm1pbmkiICk7CgkJCX0KCQl9IGVsc2UgewoJCQkvLyBnZXQgaW5oZXJpdGVkIHRoZW1lIGlmIG5vdCBhIHNldCBhbmQgbm8gdGhlbWUgaGFzIGJlZW4gc2V0CgkJCWlmICggIW8udGhlbWUgKSB7CgkJCQlvLnRoZW1lID0gJC5tb2JpbGUuZ2V0SW5oZXJpdGVkVGhlbWUoICRlbCwgImMiICk7CgkJCX0KCQl9CgkJCgkJaWYgKCAhIW8uaW5zZXQgKSB7CgkJCWNvbGxhcHNpYmxlLmFkZENsYXNzKCAidWktY29sbGFwc2libGUtaW5zZXQiICk7CgkJfQoJCQoJCWNvbGxhcHNpYmxlQ29udGVudC5hZGRDbGFzcyggKCBvLmNvbnRlbnRUaGVtZSApID8gKCAidWktYm9keS0iICsgby5jb250ZW50VGhlbWUgKSA6ICIiKTsKCgkJY29sbGFwc2VkSWNvbiA9ICRlbC5qcW1EYXRhKCAiY29sbGFwc2VkLWljb24iICkgfHwgby5jb2xsYXBzZWRJY29uIHx8ICJwbHVzIjsKCQlleHBhbmRlZEljb24gPSAkZWwuanFtRGF0YSggImV4cGFuZGVkLWljb24iICkgfHwgby5leHBhbmRlZEljb24gfHwgIm1pbnVzIjsKCgkJY29sbGFwc2libGVIZWFkaW5nCgkJCS8vZHJvcCBoZWFkaW5nIGluIGJlZm9yZSBjb250ZW50CgkJCS5pbnNlcnRCZWZvcmUoIGNvbGxhcHNpYmxlQ29udGVudCApCgkJCS8vbW9kaWZ5IG1hcmt1cCAmIGF0dHJpYnV0ZXMKCQkJLmFkZENsYXNzKCAidWktY29sbGFwc2libGUtaGVhZGluZyIgKQoJCQkuYXBwZW5kKCAiPHNwYW4gY2xhc3M9J3VpLWNvbGxhcHNpYmxlLWhlYWRpbmctc3RhdHVzJz48L3NwYW4+IiApCgkJCS53cmFwSW5uZXIoICI8YSBocmVmPScjJyBjbGFzcz0ndWktY29sbGFwc2libGUtaGVhZGluZy10b2dnbGUnPjwvYT4iICkKCQkJLmZpbmQoICJhIiApCgkJCQkuZmlyc3QoKQoJCQkJLmJ1dHRvbk1hcmt1cCh7CgkJCQkJc2hhZG93OiBmYWxzZSwKCQkJCQljb3JuZXJzOiBmYWxzZSwKCQkJCQlpY29ucG9zOiAkZWwuanFtRGF0YSggImljb25wb3MiICkgfHwgby5pY29uUG9zIHx8ICJsZWZ0IiwKCQkJCQlpY29uOiBjb2xsYXBzZWRJY29uLAoJCQkJCW1pbmk6IG8ubWluaSwKCQkJCQl0aGVtZTogby50aGVtZQoJCQkJfSk7CgoJCWlmICggISFvLmluc2V0ICkgewkJCQkKCQkJY29sbGFwc2libGVIZWFkaW5nCgkJCQkuZmluZCggImEiICkuZmlyc3QoKS5hZGQoICIudWktYnRuLWlubmVyIiwgJGVsICkKCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20iICk7CgkJfQoKCQkvL2V2ZW50cwoJCWNvbGxhcHNpYmxlCgkJCS5iaW5kKCAiZXhwYW5kIGNvbGxhcHNlIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJaWYgKCAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7CgkJCQkJdmFyICR0aGlzID0gJCggdGhpcyApLAoJCQkJCQlpc0NvbGxhcHNlID0gKCBldmVudC50eXBlID09PSAiY29sbGFwc2UiICksCgkJCQkJCWNvbnRlbnRUaGVtZSA9IG8uY29udGVudFRoZW1lOwoKCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKCQkJCQljb2xsYXBzaWJsZUhlYWRpbmcKCQkJCQkJLnRvZ2dsZUNsYXNzKCAidWktY29sbGFwc2libGUtaGVhZGluZy1jb2xsYXBzZWQiLCBpc0NvbGxhcHNlICkKCQkJCQkJLmZpbmQoICIudWktY29sbGFwc2libGUtaGVhZGluZy1zdGF0dXMiICkKCQkJCQkJCS50ZXh0KCBpc0NvbGxhcHNlID8gby5leHBhbmRDdWVUZXh0IDogby5jb2xsYXBzZUN1ZVRleHQgKQoJCQkJCQkuZW5kKCkKCQkJCQkJLmZpbmQoICIudWktaWNvbiIgKQoJCQkJCQkJLnRvZ2dsZUNsYXNzKCAidWktaWNvbi0iICsgZXhwYW5kZWRJY29uLCAhaXNDb2xsYXBzZSApCgkJCQkJCQkvLyBsb2dpYyBvciBjYXVzZSBzYW1lIGljb24gZm9yIGV4cGFuZGVkL2NvbGxhcHNlZCBzdGF0ZSB3b3VsZCByZW1vdmUgdGhlIHVpLWljb24tY2xhc3MKCQkJCQkJCS50b2dnbGVDbGFzcyggInVpLWljb24tIiArIGNvbGxhcHNlZEljb24sICggaXNDb2xsYXBzZSB8fCBleHBhbmRlZEljb24gPT09IGNvbGxhcHNlZEljb24gKSApCgkJCQkJCS5lbmQoKQoJCQkJCQkuZmluZCggImEiICkuZmlyc3QoKS5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCgkJCQkJJHRoaXMudG9nZ2xlQ2xhc3MoICJ1aS1jb2xsYXBzaWJsZS1jb2xsYXBzZWQiLCBpc0NvbGxhcHNlICk7CgkJCQkJY29sbGFwc2libGVDb250ZW50LnRvZ2dsZUNsYXNzKCAidWktY29sbGFwc2libGUtY29udGVudC1jb2xsYXBzZWQiLCBpc0NvbGxhcHNlICkuYXR0ciggImFyaWEtaGlkZGVuIiwgaXNDb2xsYXBzZSApOwoKCQkJCQlpZiAoIGNvbnRlbnRUaGVtZSAmJiAhIW8uaW5zZXQgJiYgKCAhY29sbGFwc2libGVTZXQubGVuZ3RoIHx8IGNvbGxhcHNpYmxlLmpxbURhdGEoICJjb2xsYXBzaWJsZS1sYXN0IiApICkgKSB7CgkJCQkJCWNvbGxhcHNpYmxlSGVhZGluZwoJCQkJCQkJLmZpbmQoICJhIiApLmZpcnN0KCkuYWRkKCBjb2xsYXBzaWJsZUhlYWRpbmcuZmluZCggIi51aS1idG4taW5uZXIiICkgKQoJCQkJCQkJLnRvZ2dsZUNsYXNzKCAidWktY29ybmVyLWJvdHRvbSIsIGlzQ29sbGFwc2UgKTsKCQkJCQkJY29sbGFwc2libGVDb250ZW50LnRvZ2dsZUNsYXNzKCAidWktY29ybmVyLWJvdHRvbSIsICFpc0NvbGxhcHNlICk7CgkJCQkJfQoJCQkJCWNvbGxhcHNpYmxlQ29udGVudC50cmlnZ2VyKCAidXBkYXRlbGF5b3V0IiApOwoJCQkJfQoJCQl9KQoJCQkudHJpZ2dlciggby5jb2xsYXBzZWQgPyAiY29sbGFwc2UiIDogImV4cGFuZCIgKTsKCgkJY29sbGFwc2libGVIZWFkaW5nCgkJCS5iaW5kKCAidGFwIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJY29sbGFwc2libGVIZWFkaW5nLmZpbmQoICJhIiApLmZpcnN0KCkuYWRkQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCX0pCgkJCS5iaW5kKCAiY2xpY2siLCBmdW5jdGlvbiggZXZlbnQgKSB7CgoJCQkJdmFyIHR5cGUgPSBjb2xsYXBzaWJsZUhlYWRpbmcuaXMoICIudWktY29sbGFwc2libGUtaGVhZGluZy1jb2xsYXBzZWQiICkgPyAiZXhwYW5kIiA6ICJjb2xsYXBzZSI7CgoJCQkJY29sbGFwc2libGUudHJpZ2dlciggdHlwZSApOwoKCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQlldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKCQkJfSk7Cgl9Cn0pOwoKLy9hdXRvIHNlbGYtaW5pdCB3aWRnZXRzCiQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKSB7CgkkLm1vYmlsZS5jb2xsYXBzaWJsZS5wcm90b3R5cGUuZW5oYW5jZVdpdGhpbiggZS50YXJnZXQgKTsKfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLmNvbGxhcHNpYmxlc2V0IiwgJC5tb2JpbGUud2lkZ2V0LCB7CglvcHRpb25zOiB7CgkJaW5pdFNlbGVjdG9yOiAiOmpxbURhdGEocm9sZT0nY29sbGFwc2libGUtc2V0JykiCgl9LAoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgkJdmFyICRlbCA9IHRoaXMuZWxlbWVudC5hZGRDbGFzcyggInVpLWNvbGxhcHNpYmxlLXNldCIgKSwKCQkJbyA9IHRoaXMub3B0aW9uczsKCgkJLy8gSW5oZXJpdCB0aGUgdGhlbWUgZnJvbSBjb2xsYXBzaWJsZS1zZXQKCQlpZiAoICFvLnRoZW1lICkgewoJCQlvLnRoZW1lID0gJC5tb2JpbGUuZ2V0SW5oZXJpdGVkVGhlbWUoICRlbCwgImMiICk7CgkJfQoJCS8vIEluaGVyaXQgdGhlIGNvbnRlbnQtdGhlbWUgZnJvbSBjb2xsYXBzaWJsZS1zZXQKCQlpZiAoICFvLmNvbnRlbnRUaGVtZSApIHsKCQkJby5jb250ZW50VGhlbWUgPSAkZWwuanFtRGF0YSggImNvbnRlbnQtdGhlbWUiICk7CgkJfQoKCQlpZiAoICRlbC5qcW1EYXRhKCAiaW5zZXQiICkgIT09IHVuZGVmaW5lZCApIHsKCQkJby5pbnNldCA9ICRlbC5qcW1EYXRhKCAiaW5zZXQiICk7CgkJfQoJCW8uaW5zZXQgPSBvLmluc2V0ICE9PSB1bmRlZmluZWQgPyBvLmluc2V0IDogdHJ1ZTsKCgkJLy8gSW5pdGlhbGl6ZSB0aGUgY29sbGFwc2libGUgc2V0IGlmIGl0J3Mgbm90IGFscmVhZHkgaW5pdGlhbGl6ZWQKCQlpZiAoICEkZWwuanFtRGF0YSggImNvbGxhcHNpYmxlYm91bmQiICkgKSB7CgkJCSRlbAoJCQkJLmpxbURhdGEoICJjb2xsYXBzaWJsZWJvdW5kIiwgdHJ1ZSApCgkJCQkuYmluZCggImV4cGFuZCBjb2xsYXBzZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQl2YXIgaXNDb2xsYXBzZSA9ICggZXZlbnQudHlwZSA9PT0gImNvbGxhcHNlIiApLAoJCQkJCQljb2xsYXBzaWJsZSA9ICQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoICIudWktY29sbGFwc2libGUiICksCgkJCQkJCXdpZGdldCA9IGNvbGxhcHNpYmxlLmRhdGEoICJjb2xsYXBzaWJsZSIgKTsKCQkJCQlpZiAoIGNvbGxhcHNpYmxlLmpxbURhdGEoICJjb2xsYXBzaWJsZS1sYXN0IiApICYmICEhby5pbnNldCApIHsKCQkJCQkJY29sbGFwc2libGUuZmluZCggIi51aS1jb2xsYXBzaWJsZS1oZWFkaW5nIiApLmZpcnN0KCkKCQkJCQkJCS5maW5kKCAiYSIgKS5maXJzdCgpCgkJCQkJCQkudG9nZ2xlQ2xhc3MoICJ1aS1jb3JuZXItYm90dG9tIiwgaXNDb2xsYXBzZSApCgkJCQkJCQkuZmluZCggIi51aS1idG4taW5uZXIiICkKCQkJCQkJCS50b2dnbGVDbGFzcyggInVpLWNvcm5lci1ib3R0b20iLCBpc0NvbGxhcHNlICk7CgkJCQkJCWNvbGxhcHNpYmxlLmZpbmQoICIudWktY29sbGFwc2libGUtY29udGVudCIgKS50b2dnbGVDbGFzcyggInVpLWNvcm5lci1ib3R0b20iLCAhaXNDb2xsYXBzZSApOwoJCQkJCX0KCQkJCX0pCgkJCQkuYmluZCggImV4cGFuZCIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQl2YXIgY2xvc2VzdENvbGxhcHNpYmxlID0gJCggZXZlbnQudGFyZ2V0ICkKCQkJCQkJLmNsb3Nlc3QoICIudWktY29sbGFwc2libGUiICk7CgkJCQkJaWYgKCBjbG9zZXN0Q29sbGFwc2libGUucGFyZW50KCkuaXMoICI6anFtRGF0YShyb2xlPSdjb2xsYXBzaWJsZS1zZXQnKSIgKSApIHsKCQkJCQkJY2xvc2VzdENvbGxhcHNpYmxlCgkJCQkJCQkuc2libGluZ3MoICIudWktY29sbGFwc2libGUiICkKCQkJCQkJCS50cmlnZ2VyKCAiY29sbGFwc2UiICk7CgkJCQkJfQoJCQkJfSk7CgkJfQoJfSwKCglfaW5pdDogZnVuY3Rpb24oKSB7CgkJdmFyICRlbCA9IHRoaXMuZWxlbWVudCwKCQkJY29sbGFwc2libGVzSW5TZXQgPSAkZWwuY2hpbGRyZW4oICI6anFtRGF0YShyb2xlPSdjb2xsYXBzaWJsZScpIiApLAoJCQlleHBhbmRlZCA9IGNvbGxhcHNpYmxlc0luU2V0LmZpbHRlciggIjpqcW1EYXRhKGNvbGxhcHNlZD0nZmFsc2UnKSIgKTsKCQl0aGlzLnJlZnJlc2goKTsKCgkJLy8gQmVjYXVzZSB0aGUgY29ybmVycyBhcmUgaGFuZGxlZCBieSB0aGUgY29sbGFwc2libGUgaXRzZWxmIGFuZCB0aGUgZGVmYXVsdCBzdGF0ZSBpcyBjb2xsYXBzZWQKCQkvLyBUaGF0IHdhcyBjYXVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvNDExNgoJCWV4cGFuZGVkLnRyaWdnZXIoICJleHBhbmQiICk7Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCXZhciAkZWwgPSB0aGlzLmVsZW1lbnQsCgkJCW8gPSB0aGlzLm9wdGlvbnMsCgkJCWNvbGxhcHNpYmxlc0luU2V0ID0gJGVsLmNoaWxkcmVuKCAiOmpxbURhdGEocm9sZT0nY29sbGFwc2libGUnKSIgKTsKCgkJJC5tb2JpbGUuY29sbGFwc2libGUucHJvdG90eXBlLmVuaGFuY2UoIGNvbGxhcHNpYmxlc0luU2V0Lm5vdCggIi51aS1jb2xsYXBzaWJsZSIgKSApOwoKCQkvLyBjbGVhbiB1cCBib3JkZXJzCgkJaWYgKCAhIW8uaW5zZXQgKSB7CgkJCWNvbGxhcHNpYmxlc0luU2V0LmVhY2goZnVuY3Rpb24oKSB7CgkJCQkkKCB0aGlzICkuanFtUmVtb3ZlRGF0YSggImNvbGxhcHNpYmxlLWxhc3QiICkKCQkJCQkuZmluZCggIi51aS1jb2xsYXBzaWJsZS1oZWFkaW5nIiApCgkJCQkJLmZpbmQoICJhIiApLmZpcnN0KCkKCQkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20iICkKCQkJCQkuZmluZCggIi51aS1idG4taW5uZXIiICkKCQkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20iICk7CgkJCX0pOwoKCQkJY29sbGFwc2libGVzSW5TZXQuZmlyc3QoKQoJCQkJLmZpbmQoICJhIiApCgkJCQkJLmZpcnN0KCkKCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItdG9wIiApCgkJCQkJLmZpbmQoICIudWktYnRuLWlubmVyIiApCgkJCQkJCS5hZGRDbGFzcyggInVpLWNvcm5lci10b3AiICk7CgkKCQkJY29sbGFwc2libGVzSW5TZXQubGFzdCgpCgkJCQkuanFtRGF0YSggImNvbGxhcHNpYmxlLWxhc3QiLCB0cnVlICkKCQkJCS5maW5kKCAiYSIgKQoJCQkJCS5maXJzdCgpCgkJCQkJLmFkZENsYXNzKCAidWktY29ybmVyLWJvdHRvbSIgKQoJCQkJCS5maW5kKCAiLnVpLWJ0bi1pbm5lciIgKQoJCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItYm90dG9tIiApOwoJCX0KCX0KfSk7CgovL2F1dG8gc2VsZi1pbml0IHdpZGdldHMKJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiggZSApIHsKCSQubW9iaWxlLmNvbGxhcHNpYmxlc2V0LnByb3RvdHlwZS5lbmhhbmNlV2l0aGluKCBlLnRhcmdldCApOwp9KTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoICJtb2JpbGUubmF2YmFyIiwgJC5tb2JpbGUud2lkZ2V0LCB7CglvcHRpb25zOiB7CgkJaWNvbnBvczogInRvcCIsCgkJZ3JpZDogbnVsbCwKCQlpbml0U2VsZWN0b3I6ICI6anFtRGF0YShyb2xlPSduYXZiYXInKSIKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCXZhciAkbmF2YmFyID0gdGhpcy5lbGVtZW50LAoJCQkkbmF2YnRucyA9ICRuYXZiYXIuZmluZCggImEiICksCgkJCWljb25wb3MgPSAkbmF2YnRucy5maWx0ZXIoICI6anFtRGF0YShpY29uKSIgKS5sZW5ndGggPwoJCQkJCQkJCQl0aGlzLm9wdGlvbnMuaWNvbnBvcyA6IHVuZGVmaW5lZDsKCgkJJG5hdmJhci5hZGRDbGFzcyggInVpLW5hdmJhciB1aS1taW5pIiApCgkJCS5hdHRyKCAicm9sZSIsICJuYXZpZ2F0aW9uIiApCgkJCS5maW5kKCAidWwiICkKCQkJLmpxbUVuaGFuY2VhYmxlKCkKCQkJLmdyaWQoeyBncmlkOiB0aGlzLm9wdGlvbnMuZ3JpZCB9KTsKCgkJJG5hdmJ0bnMuYnV0dG9uTWFya3VwKHsKCQkJY29ybmVyczoJZmFsc2UsCgkJCXNoYWRvdzoJCWZhbHNlLAoJCQlpbmxpbmU6ICAgICB0cnVlLAoJCQlpY29ucG9zOglpY29ucG9zCgkJfSk7CgoJCSRuYXZiYXIuZGVsZWdhdGUoICJhIiwgInZjbGljayIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJaWYgKCAhJChldmVudC50YXJnZXQpLmhhc0NsYXNzKCAidWktZGlzYWJsZWQiICkgKSB7CgkJCQkkbmF2YnRucy5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJCSQoIHRoaXMgKS5hZGRDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJfQoJCX0pOwoKCQkvLyBCdXR0b25zIGluIHRoZSBuYXZiYXIgd2l0aCB1aS1zdGF0ZS1wZXJzaXN0IGNsYXNzIHNob3VsZCByZWdhaW4gdGhlaXIgYWN0aXZlIHN0YXRlIGJlZm9yZSBwYWdlIHNob3cKCQkkbmF2YmFyLmNsb3Nlc3QoICIudWktcGFnZSIgKS5iaW5kKCAicGFnZWJlZm9yZXNob3ciLCBmdW5jdGlvbigpIHsKCQkJJG5hdmJ0bnMuZmlsdGVyKCAiLnVpLXN0YXRlLXBlcnNpc3QiICkuYWRkQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJfSk7Cgl9Cn0pOwoKLy9hdXRvIHNlbGYtaW5pdCB3aWRnZXRzCiQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKSB7CgkkLm1vYmlsZS5uYXZiYXIucHJvdG90eXBlLmVuaGFuY2VXaXRoaW4oIGUudGFyZ2V0ICk7Cn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgovL0tlZXBzIHRyYWNrIG9mIHRoZSBudW1iZXIgb2YgbGlzdHMgcGVyIHBhZ2UgVUlECi8vVGhpcyBhbGxvd3Mgc3VwcG9ydCBmb3IgbXVsdGlwbGUgbmVzdGVkIGxpc3QgaW4gdGhlIHNhbWUgcGFnZQovL2h0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvMTYxNwp2YXIgbGlzdENvdW50UGVyUGFnZSA9IHt9OwoKJC53aWRnZXQoICJtb2JpbGUubGlzdHZpZXciLCAkLm1vYmlsZS53aWRnZXQsIHsKCglvcHRpb25zOiB7CgkJdGhlbWU6IG51bGwsCgkJY291bnRUaGVtZTogImMiLAoJCWhlYWRlclRoZW1lOiAiYiIsCgkJZGl2aWRlclRoZW1lOiAiYiIsCgkJc3BsaXRJY29uOiAiYXJyb3ctciIsCgkJc3BsaXRUaGVtZTogImIiLAoJCWluc2V0OiBmYWxzZSwKCQlpbml0U2VsZWN0b3I6ICI6anFtRGF0YShyb2xlPSdsaXN0dmlldycpIgoJfSwKCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgdCA9IHRoaXMsCgkJCWxpc3R2aWV3Q2xhc3NlcyA9ICIiOwoKCQlsaXN0dmlld0NsYXNzZXMgKz0gdC5vcHRpb25zLmluc2V0ID8gIiB1aS1saXN0dmlldy1pbnNldCB1aS1jb3JuZXItYWxsIHVpLXNoYWRvdyAiIDogIiI7CgoJCS8vIGNyZWF0ZSBsaXN0dmlldyBtYXJrdXAKCQl0LmVsZW1lbnQuYWRkQ2xhc3MoZnVuY3Rpb24oIGksIG9yaWcgKSB7CgkJCXJldHVybiBvcmlnICsgIiB1aS1saXN0dmlldyAiICsgbGlzdHZpZXdDbGFzc2VzOwoJCX0pOwoKCQl0LnJlZnJlc2goIHRydWUgKTsKCX0sCgoJX3JlbW92ZUNvcm5lcnM6IGZ1bmN0aW9uKCBsaSwgd2hpY2ggKSB7CgkJdmFyIHRvcCA9ICJ1aS1jb3JuZXItdG9wIHVpLWNvcm5lci10ciB1aS1jb3JuZXItdGwiLAoJCQlib3QgPSAidWktY29ybmVyLWJvdHRvbSB1aS1jb3JuZXItYnIgdWktY29ybmVyLWJsIjsKCgkJbGkgPSBsaS5hZGQoIGxpLmZpbmQoICIudWktYnRuLWlubmVyLCAudWktbGktbGluay1hbHQsIC51aS1saS10aHVtYiIgKSApOwoKCQlpZiAoIHdoaWNoID09PSAidG9wIiApIHsKCQkJbGkucmVtb3ZlQ2xhc3MoIHRvcCApOwoJCX0gZWxzZSBpZiAoIHdoaWNoID09PSAiYm90dG9tIiApIHsKCQkJbGkucmVtb3ZlQ2xhc3MoIGJvdCApOwoJCX0gZWxzZSB7CgkJCWxpLnJlbW92ZUNsYXNzKCB0b3AgKyAiICIgKyBib3QgKTsKCQl9Cgl9LAoKCV9yZWZyZXNoQ29ybmVyczogZnVuY3Rpb24oIGNyZWF0ZSApIHsKCQl2YXIgJGxpLAoJCQkkdmlzaWJsZWxpLAoJCQkkdG9wbGksCgkJCSRib3R0b21saTsKCgkJJGxpID0gdGhpcy5lbGVtZW50LmNoaWxkcmVuKCAibGkiICk7CgkJLy8gQXQgY3JlYXRlIHRpbWUgYW5kIHdoZW4gYXV0b2RpdmlkZXJzIGNhbGxzIHJlZnJlc2ggdGhlIGxpIGFyZSBub3QgdmlzaWJsZSB5ZXQgc28gd2UgbmVlZCB0byByZWx5IG9uIC51aS1zY3JlZW4taGlkZGVuCgkJJHZpc2libGVsaSA9IGNyZWF0ZSB8fCAkbGkuZmlsdGVyKCAiOnZpc2libGUiICkubGVuZ3RoID09PSAwID8gJGxpLm5vdCggIi51aS1zY3JlZW4taGlkZGVuIiApIDogJGxpLmZpbHRlciggIjp2aXNpYmxlIiApOwoKCQkvLyB1aS1saS1sYXN0IGlzIHVzZWQgZm9yIHNldHRpbmcgYm9yZGVyLWJvdHRvbSBvbiB0aGUgbGFzdCBsaQkJCgkJJGxpLmZpbHRlciggIi51aS1saS1sYXN0IiApLnJlbW92ZUNsYXNzKCAidWktbGktbGFzdCIgKTsKCQkJCQkKCQlpZiAoIHRoaXMub3B0aW9ucy5pbnNldCApIHsKCQkJdGhpcy5fcmVtb3ZlQ29ybmVycyggJGxpICk7CgoJCQkvLyBTZWxlY3QgdGhlIGZpcnN0IHZpc2libGUgbGkgZWxlbWVudAoJCQkkdG9wbGkgPSAkdmlzaWJsZWxpLmZpcnN0KCkKCQkJCS5hZGRDbGFzcyggInVpLWNvcm5lci10b3AiICk7CgoJCQkkdG9wbGkuYWRkKCAkdG9wbGkuZmluZCggIi51aS1idG4taW5uZXIiICkKCQkJCS5ub3QoICIudWktbGktbGluay1hbHQgc3BhbjpmaXJzdC1jaGlsZCIgKSApCgkJCQkJLmFkZENsYXNzKCAidWktY29ybmVyLXRvcCIgKQoJCQkJLmVuZCgpCgkJCQkuZmluZCggIi51aS1saS1saW5rLWFsdCwgLnVpLWxpLWxpbmstYWx0IHNwYW46Zmlyc3QtY2hpbGQiICkKCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItdHIiICkKCQkJCS5lbmQoKQoJCQkJLmZpbmQoICIudWktbGktdGh1bWIiICkKCQkJCQkubm90KCAiLnVpLWxpLWljb24iICkKCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItdGwiICk7CgoJCQkvLyBTZWxlY3QgdGhlIGxhc3QgdmlzaWJsZSBsaSBlbGVtZW50CgkJCSRib3R0b21saSA9ICR2aXNpYmxlbGkubGFzdCgpCgkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItYm90dG9tIHVpLWxpLWxhc3QiICk7CgoJCQkkYm90dG9tbGkuYWRkKCAkYm90dG9tbGkuZmluZCggIi51aS1idG4taW5uZXIiICkgKQoJCQkJLmZpbmQoICIudWktbGktbGluay1hbHQiICkKCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItYnIiICkKCQkJCS5lbmQoKQoJCQkJLmZpbmQoICIudWktbGktdGh1bWIiICkKCQkJCQkubm90KCAiLnVpLWxpLWljb24iICkKCQkJCQkuYWRkQ2xhc3MoICJ1aS1jb3JuZXItYmwiICk7CgkJfSBlbHNlIHsKCQkJJHZpc2libGVsaS5sYXN0KCkuYWRkQ2xhc3MoICJ1aS1saS1sYXN0IiApOwoJCX0KCQlpZiAoICFjcmVhdGUgKSB7CgkJCXRoaXMuZWxlbWVudC50cmlnZ2VyKCAidXBkYXRlbGF5b3V0IiApOwoJCX0KCX0sCgoJLy8gVGhpcyBpcyBhIGdlbmVyaWMgdXRpbGl0eSBtZXRob2QgZm9yIGZpbmRpbmcgdGhlIGZpcnN0CgkvLyBub2RlIHdpdGggYSBnaXZlbiBub2RlTmFtZS4gSXQgdXNlcyBiYXNpYyBET00gdHJhdmVyc2FsCgkvLyB0byBiZSBmYXN0IGFuZCBpcyBtZWFudCB0byBiZSBhIHN1YnN0aXR1dGUgZm9yIHNpbXBsZQoJLy8gJC5mbi5jbG9zZXN0KCkgYW5kICQuZm4uY2hpbGRyZW4oKSBjYWxscyBvbiBhIHNpbmdsZQoJLy8gZWxlbWVudC4gTm90ZSB0aGF0IGNhbGxlcnMgbXVzdCBwYXNzIGJvdGggdGhlIGxvd2VyQ2FzZQoJLy8gYW5kIHVwcGVyQ2FzZSB2ZXJzaW9uIG9mIHRoZSBub2RlTmFtZSB0aGV5IGFyZSBsb29raW5nIGZvci4KCS8vIFRoZSBtYWluIHJlYXNvbiBmb3IgdGhpcyBpcyB0aGF0IHRoaXMgZnVuY3Rpb24gd2lsbCBiZQoJLy8gY2FsbGVkIG1hbnkgdGltZXMgYW5kIHdlIHdhbnQgdG8gYXZvaWQgaGF2aW5nIHRvIGxvd2VyY2FzZQoJLy8gdGhlIG5vZGVOYW1lIGZyb20gdGhlIGVsZW1lbnQgZXZlcnkgdGltZSB0byBlbnN1cmUgd2UgaGF2ZQoJLy8gYSBtYXRjaC4gTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gbGl2ZXMgaGVyZSBmb3Igbm93LCBidXQgbWF5CgkvLyBiZSBtb3ZlZCBpbnRvICQubW9iaWxlIGlmIG90aGVyIGNvbXBvbmVudHMgbmVlZCBhIHNpbWlsYXIgbWV0aG9kLgoJX2ZpbmRGaXJzdEVsZW1lbnRCeVRhZ05hbWU6IGZ1bmN0aW9uKCBlbGUsIG5leHRQcm9wLCBsY05hbWUsIHVjTmFtZSApIHsKCQl2YXIgZGljdCA9IHt9OwoJCWRpY3RbIGxjTmFtZSBdID0gZGljdFsgdWNOYW1lIF0gPSB0cnVlOwoJCXdoaWxlICggZWxlICkgewoJCQlpZiAoIGRpY3RbIGVsZS5ub2RlTmFtZSBdICkgewoJCQkJcmV0dXJuIGVsZTsKCQkJfQoJCQllbGUgPSBlbGVbIG5leHRQcm9wIF07CgkJfQoJCXJldHVybiBudWxsOwoJfSwKCV9nZXRDaGlsZHJlbkJ5VGFnTmFtZTogZnVuY3Rpb24oIGVsZSwgbGNOYW1lLCB1Y05hbWUgKSB7CgkJdmFyIHJlc3VsdHMgPSBbXSwKCQkJZGljdCA9IHt9OwoJCWRpY3RbIGxjTmFtZSBdID0gZGljdFsgdWNOYW1lIF0gPSB0cnVlOwoJCWVsZSA9IGVsZS5maXJzdENoaWxkOwoJCXdoaWxlICggZWxlICkgewoJCQlpZiAoIGRpY3RbIGVsZS5ub2RlTmFtZSBdICkgewoJCQkJcmVzdWx0cy5wdXNoKCBlbGUgKTsKCQkJfQoJCQllbGUgPSBlbGUubmV4dFNpYmxpbmc7CgkJfQoJCXJldHVybiAkKCByZXN1bHRzICk7Cgl9LAoKCV9hZGRUaHVtYkNsYXNzZXM6IGZ1bmN0aW9uKCBjb250YWluZXJzICkgewoJCXZhciBpLCBpbWcsIGxlbiA9IGNvbnRhaW5lcnMubGVuZ3RoOwoJCWZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7CgkJCWltZyA9ICQoIHRoaXMuX2ZpbmRGaXJzdEVsZW1lbnRCeVRhZ05hbWUoIGNvbnRhaW5lcnNbIGkgXS5maXJzdENoaWxkLCAibmV4dFNpYmxpbmciLCAiaW1nIiwgIklNRyIgKSApOwoJCQlpZiAoIGltZy5sZW5ndGggKSB7CgkJCQlpbWcuYWRkQ2xhc3MoICJ1aS1saS10aHVtYiIgKTsKCQkJCSQoIHRoaXMuX2ZpbmRGaXJzdEVsZW1lbnRCeVRhZ05hbWUoIGltZ1sgMCBdLnBhcmVudE5vZGUsICJwYXJlbnROb2RlIiwgImxpIiwgIkxJIiApICkuYWRkQ2xhc3MoIGltZy5pcyggIi51aS1saS1pY29uIiApID8gInVpLWxpLWhhcy1pY29uIiA6ICJ1aS1saS1oYXMtdGh1bWIiICk7CgkJCX0KCQl9Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCBjcmVhdGUgKSB7CgkJdGhpcy5wYXJlbnRQYWdlID0gdGhpcy5lbGVtZW50LmNsb3Nlc3QoICIudWktcGFnZSIgKTsKCQl0aGlzLl9jcmVhdGVTdWJQYWdlcygpOwoKCQl2YXIgbyA9IHRoaXMub3B0aW9ucywKCQkJJGxpc3QgPSB0aGlzLmVsZW1lbnQsCgkJCXNlbGYgPSB0aGlzLAoJCQlkaXZpZGVydGhlbWUgPSAkbGlzdC5qcW1EYXRhKCAiZGl2aWRlcnRoZW1lIiApIHx8IG8uZGl2aWRlclRoZW1lLAoJCQlsaXN0c3BsaXR0aGVtZSA9ICRsaXN0LmpxbURhdGEoICJzcGxpdHRoZW1lIiApLAoJCQlsaXN0c3BsaXRpY29uID0gJGxpc3QuanFtRGF0YSggInNwbGl0aWNvbiIgKSwKCQkJbGkgPSB0aGlzLl9nZXRDaGlsZHJlbkJ5VGFnTmFtZSggJGxpc3RbIDAgXSwgImxpIiwgIkxJIiApLAoJCQlvbCA9ICEhJC5ub2RlTmFtZSggJGxpc3RbIDAgXSwgIm9sIiApLAoJCQlqc0NvdW50ID0gISQuc3VwcG9ydC5jc3NQc2V1ZG9FbGVtZW50LAoJCQlzdGFydCA9ICRsaXN0LmF0dHIoICJzdGFydCIgKSwKCQkJaXRlbUNsYXNzRGljdCA9IHt9LAoJCQlpdGVtLCBpdGVtQ2xhc3MsIGl0ZW1UaGVtZSwKCQkJYSwgbGFzdCwgc3BsaXR0aGVtZSwgY291bnRlciwgc3RhcnRDb3VudCwgbmV3U3RhcnRDb3VudCwgY291bnRQYXJlbnQsIGljb24sIGltZ1BhcmVudHMsIGltZywgbGlua0ljb247CgoJCWlmICggb2wgJiYganNDb3VudCApIHsKCQkJJGxpc3QuZmluZCggIi51aS1saS1kZWMiICkucmVtb3ZlKCk7CgkJfQoKCQlpZiAoIG9sICkgewkKCQkJLy8gQ2hlY2sgaWYgYSBzdGFydCBhdHRyaWJ1dGUgaGFzIGJlZW4gc2V0IHdoaWxlIHRha2luZyBhIHZhbHVlIG9mIDAgaW50byBhY2NvdW50CgkJCWlmICggc3RhcnQgfHwgc3RhcnQgPT09IDAgKSB7CgkJCQlpZiAoICFqc0NvdW50ICkgewoJCQkJCXN0YXJ0Q291bnQgPSBwYXJzZUZsb2F0KCBzdGFydCApIC0gMTsKCQkJCQkkbGlzdC5jc3MoICJjb3VudGVyLXJlc2V0IiwgImxpc3RudW1iZXJpbmcgIiArIHN0YXJ0Q291bnQgKTsKCQkJCX0gZWxzZSB7CgkJCQkJY291bnRlciA9IHBhcnNlRmxvYXQoIHN0YXJ0ICk7CgkJCQl9CgkJCX0gZWxzZSBpZiAoIGpzQ291bnQgKSB7CgkJCQkJY291bnRlciA9IDE7CgkJCX0JCgkJfQoKCQlpZiAoICFvLnRoZW1lICkgewoJCQlvLnRoZW1lID0gJC5tb2JpbGUuZ2V0SW5oZXJpdGVkVGhlbWUoIHRoaXMuZWxlbWVudCwgImMiICk7CgkJfQoKCQlmb3IgKCB2YXIgcG9zID0gMCwgbnVtbGkgPSBsaS5sZW5ndGg7IHBvcyA8IG51bWxpOyBwb3MrKyApIHsKCQkJaXRlbSA9IGxpLmVxKCBwb3MgKTsKCQkJaXRlbUNsYXNzID0gInVpLWxpIjsKCgkJCS8vIElmIHdlJ3JlIGNyZWF0aW5nIHRoZSBlbGVtZW50LCB3ZSB1cGRhdGUgaXQgcmVnYXJkbGVzcwoJCQlpZiAoIGNyZWF0ZSB8fCAhaXRlbS5oYXNDbGFzcyggInVpLWxpIiApICkgewoJCQkJaXRlbVRoZW1lID0gaXRlbS5qcW1EYXRhKCAidGhlbWUiICkgfHwgby50aGVtZTsKCQkJCWEgPSB0aGlzLl9nZXRDaGlsZHJlbkJ5VGFnTmFtZSggaXRlbVsgMCBdLCAiYSIsICJBIiApOwoJCQkJdmFyIGlzRGl2aWRlciA9ICggaXRlbS5qcW1EYXRhKCAicm9sZSIgKSA9PT0gImxpc3QtZGl2aWRlciIgKTsKCgkJCQlpZiAoIGEubGVuZ3RoICYmICFpc0RpdmlkZXIgKSB7CgkJCQkJaWNvbiA9IGl0ZW0uanFtRGF0YSggImljb24iICk7CgoJCQkJCWl0ZW0uYnV0dG9uTWFya3VwKHsKCQkJCQkJd3JhcHBlckVsczogImRpdiIsCgkJCQkJCXNoYWRvdzogZmFsc2UsCgkJCQkJCWNvcm5lcnM6IGZhbHNlLAoJCQkJCQlpY29ucG9zOiAicmlnaHQiLAoJCQkJCQlpY29uOiBhLmxlbmd0aCA+IDEgfHwgaWNvbiA9PT0gZmFsc2UgPyBmYWxzZSA6IGljb24gfHwgImFycm93LXIiLAoJCQkJCQl0aGVtZTogaXRlbVRoZW1lCgkJCQkJfSk7CgoJCQkJCWlmICggKCBpY29uICE9PSBmYWxzZSApICYmICggYS5sZW5ndGggPT09IDEgKSApIHsKCQkJCQkJaXRlbS5hZGRDbGFzcyggInVpLWxpLWhhcy1hcnJvdyIgKTsKCQkJCQl9CgoJCQkJCWEuZmlyc3QoKS5yZW1vdmVDbGFzcyggInVpLWxpbmsiICkuYWRkQ2xhc3MoICJ1aS1saW5rLWluaGVyaXQiICk7CgoJCQkJCWlmICggYS5sZW5ndGggPiAxICkgewoJCQkJCQlpdGVtQ2xhc3MgKz0gIiB1aS1saS1oYXMtYWx0IjsKCgkJCQkJCWxhc3QgPSBhLmxhc3QoKTsKCQkJCQkJc3BsaXR0aGVtZSA9IGxpc3RzcGxpdHRoZW1lIHx8IGxhc3QuanFtRGF0YSggInRoZW1lIiApIHx8IG8uc3BsaXRUaGVtZTsKCQkJCQkJbGlua0ljb24gPSBsYXN0LmpxbURhdGEoICJpY29uIiApOwoKCQkJCQkJbGFzdC5hcHBlbmRUbyggaXRlbSApCgkJCQkJCQkuYXR0ciggInRpdGxlIiwgbGFzdC5nZXRFbmNvZGVkVGV4dCgpICkKCQkJCQkJCS5hZGRDbGFzcyggInVpLWxpLWxpbmstYWx0IiApCgkJCQkJCQkuZW1wdHkoKQoJCQkJCQkJLmJ1dHRvbk1hcmt1cCh7CgkJCQkJCQkJc2hhZG93OiBmYWxzZSwKCQkJCQkJCQljb3JuZXJzOiBmYWxzZSwKCQkJCQkJCQl0aGVtZTogaXRlbVRoZW1lLAoJCQkJCQkJCWljb246IGZhbHNlLAoJCQkJCQkJCWljb25wb3M6ICJub3RleHQiCgkJCQkJCQl9KQoJCQkJCQkJLmZpbmQoICIudWktYnRuLWlubmVyIiApCgkJCQkJCQkJLmFwcGVuZCgKCQkJCQkJCQkJJCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggInNwYW4iICkgKS5idXR0b25NYXJrdXAoewoJCQkJCQkJCQkJc2hhZG93OiB0cnVlLAoJCQkJCQkJCQkJY29ybmVyczogdHJ1ZSwKCQkJCQkJCQkJCXRoZW1lOiBzcGxpdHRoZW1lLAoJCQkJCQkJCQkJaWNvbnBvczogIm5vdGV4dCIsCgkJCQkJCQkJCQkvLyBsaW5rIGljb24gb3ZlcnJpZGVzIGxpc3QgaXRlbSBpY29uIG92ZXJyaWRlcyB1bCBlbGVtZW50IG92ZXJyaWRlcyBvcHRpb25zCgkJCQkJCQkJCQlpY29uOiBsaW5rSWNvbiB8fCBpY29uIHx8IGxpc3RzcGxpdGljb24gfHwgby5zcGxpdEljb24KCQkJCQkJCQkJfSkKCQkJCQkJCQkpOwoJCQkJCX0KCQkJCX0gZWxzZSBpZiAoIGlzRGl2aWRlciApIHsKCgkJCQkJaXRlbUNsYXNzICs9ICIgdWktbGktZGl2aWRlciB1aS1iYXItIiArIGRpdmlkZXJ0aGVtZTsKCQkJCQlpdGVtLmF0dHIoICJyb2xlIiwgImhlYWRpbmciICk7CgoJCQkJCWlmICggb2wgKSB7CQoJCQkJCQkvL3Jlc2V0IGNvdW50ZXIgd2hlbiBhIGRpdmlkZXIgaGVhZGluZyBpcyBlbmNvdW50ZXJlZAoJCQkJCQlpZiAoIHN0YXJ0IHx8IHN0YXJ0ID09PSAwICkgewoJCQkJCQkJaWYgKCAhanNDb3VudCApIHsKCQkJCQkJCQluZXdTdGFydENvdW50ID0gcGFyc2VGbG9hdCggc3RhcnQgKSAtIDE7CgkJCQkJCQkJaXRlbS5jc3MoICJjb3VudGVyLXJlc2V0IiwgImxpc3RudW1iZXJpbmcgIiArIG5ld1N0YXJ0Q291bnQgKTsKCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJY291bnRlciA9IHBhcnNlRmxvYXQoIHN0YXJ0ICk7CgkJCQkJCQl9CgkJCQkJCX0gZWxzZSBpZiAoIGpzQ291bnQgKSB7CgkJCQkJCQkJY291bnRlciA9IDE7CgkJCQkJCX0JCgkJCQkJfQoJCQkJCgkJCQl9IGVsc2UgewoJCQkJCWl0ZW1DbGFzcyArPSAiIHVpLWxpLXN0YXRpYyB1aS1idG4tdXAtIiArIGl0ZW1UaGVtZTsKCQkJCX0KCQkJfQoKCQkJaWYgKCBvbCAmJiBqc0NvdW50ICYmIGl0ZW1DbGFzcy5pbmRleE9mKCAidWktbGktZGl2aWRlciIgKSA8IDAgKSB7CgkJCQljb3VudFBhcmVudCA9IGl0ZW1DbGFzcy5pbmRleE9mKCAidWktbGktc3RhdGljIiApID4gMCA/IGl0ZW0gOiBpdGVtLmZpbmQoICIudWktbGluay1pbmhlcml0IiApOwoKCQkJCWNvdW50UGFyZW50LmFkZENsYXNzKCAidWktbGktanNudW1iZXJpbmciICkKCQkJCQkucHJlcGVuZCggIjxzcGFuIGNsYXNzPSd1aS1saS1kZWMnPiIgKyAoIGNvdW50ZXIrKyApICsgIi4gPC9zcGFuPiIgKTsKCQkJfQoKCQkJLy8gSW5zdGVhZCBvZiBzZXR0aW5nIGl0ZW0gY2xhc3MgZGlyZWN0bHkgb24gdGhlIGxpc3QgaXRlbSBhbmQgaXRzCgkJCS8vIGJ0bi1pbm5lciBhdCB0aGlzIHBvaW50IGluIHRpbWUsIHB1c2ggdGhlIGl0ZW0gaW50byBhIGRpY3Rpb25hcnkKCQkJLy8gdGhhdCB0ZWxscyB1cyB3aGF0IGNsYXNzIHRvIHNldCBvbiBpdCBzbyB3ZSBjYW4gZG8gdGhpcyBhZnRlciB0aGlzCgkJCS8vIHByb2Nlc3NpbmcgbG9vcCBpcyBmaW5pc2hlZC4KCgkJCWlmICggIWl0ZW1DbGFzc0RpY3RbIGl0ZW1DbGFzcyBdICkgewoJCQkJaXRlbUNsYXNzRGljdFsgaXRlbUNsYXNzIF0gPSBbXTsKCQkJfQoKCQkJaXRlbUNsYXNzRGljdFsgaXRlbUNsYXNzIF0ucHVzaCggaXRlbVsgMCBdICk7CgkJfQoKCQkvLyBTZXQgdGhlIGFwcHJvcHJpYXRlIGxpc3R2aWV3IGl0ZW0gY2xhc3NlcyBvbiBlYWNoIGxpc3QgaXRlbQoJCS8vIGFuZCB0aGVpciBidG4taW5uZXIgZWxlbWVudHMuIFRoZSBtYWluIHJlYXNvbiB3ZSBkaWRuJ3QgZG8gdGhpcwoJCS8vIGluIHRoZSBmb3ItbG9vcCBhYm92ZSBpcyBiZWNhdXNlIHdlIGNhbiBlbGltaW5hdGUgcGVyLWl0ZW0gZnVuY3Rpb24gb3ZlcmhlYWQKCQkvLyBieSBjYWxsaW5nIGFkZENsYXNzKCkgYW5kIGNoaWxkcmVuKCkgb25jZSBvciB0d2ljZSBhZnRlcndhcmRzLiBUaGlzCgkJLy8gY2FuIGdpdmUgdXMgYSBzaWduaWZpY2FudCBib29zdCBvbiBwbGF0Zm9ybXMgbGlrZSBXUDcuNS4KCgkJZm9yICggaXRlbUNsYXNzIGluIGl0ZW1DbGFzc0RpY3QgKSB7CgkJCSQoIGl0ZW1DbGFzc0RpY3RbIGl0ZW1DbGFzcyBdICkuYWRkQ2xhc3MoIGl0ZW1DbGFzcyApLmNoaWxkcmVuKCAiLnVpLWJ0bi1pbm5lciIgKS5hZGRDbGFzcyggaXRlbUNsYXNzICk7CgkJfQoKCQkkbGlzdC5maW5kKCAiaDEsIGgyLCBoMywgaDQsIGg1LCBoNiIgKS5hZGRDbGFzcyggInVpLWxpLWhlYWRpbmciICkKCQkJLmVuZCgpCgoJCQkuZmluZCggInAsIGRsIiApLmFkZENsYXNzKCAidWktbGktZGVzYyIgKQoJCQkuZW5kKCkKCgkJCS5maW5kKCAiLnVpLWxpLWFzaWRlIiApLmVhY2goZnVuY3Rpb24oKSB7CgkJCQkJdmFyICR0aGlzID0gJCggdGhpcyApOwoJCQkJCSR0aGlzLnByZXBlbmRUbyggJHRoaXMucGFyZW50KCkgKTsgLy9zaGlmdCBhc2lkZSB0byBmcm9udCBmb3IgY3NzIGZsb2F0CgkJCQl9KQoJCQkuZW5kKCkKCgkJCS5maW5kKCAiLnVpLWxpLWNvdW50IiApLmVhY2goZnVuY3Rpb24oKSB7CgkJCQkJJCggdGhpcyApLmNsb3Nlc3QoICJsaSIgKS5hZGRDbGFzcyggInVpLWxpLWhhcy1jb3VudCIgKTsKCQkJCX0pLmFkZENsYXNzKCAidWktYnRuLXVwLSIgKyAoICRsaXN0LmpxbURhdGEoICJjb3VudHRoZW1lIiApIHx8IHRoaXMub3B0aW9ucy5jb3VudFRoZW1lKSArICIgdWktYnRuLWNvcm5lci1hbGwiICk7CgoJCS8vIFRoZSBpZGVhIGhlcmUgaXMgdG8gbG9vayBhdCB0aGUgZmlyc3QgaW1hZ2UgaW4gdGhlIGxpc3QgaXRlbQoJCS8vIGl0c2VsZiwgYW5kIGFueSAudWktbGluay1pbmhlcml0IGVsZW1lbnQgaXQgbWF5IGNvbnRhaW4sIHNvIHdlCgkJLy8gY2FuIHBsYWNlIHRoZSBhcHByb3ByaWF0ZSBjbGFzc2VzIG9uIHRoZSBpbWFnZSBhbmQgbGlzdCBpdGVtLgoJCS8vIE5vdGUgdGhhdCB3ZSB1c2VkIHRvIHVzZSBzb21ldGhpbmcgbGlrZToKCQkvLwoJCS8vICAgIGxpLmZpbmQoIj5pbWc6ZXEoMCksIC51aS1saW5rLWluaGVyaXQ+aW1nOmVxKDApIikuZWFjaCggLi4uICk7CgkJLy8KCQkvLyBCdXQgZXhlY3V0aW5nIGEgZmluZCgpIGxpa2UgdGhhdCBvbiBXaW5kb3dzIFBob25lIDcuNSB0b29rIGEKCQkvLyByZWFsbHkgbG9uZyB0aW1lLiBXYWxraW5nIHRoaW5ncyBtYW51YWxseSB3aXRoIHRoZSBjb2RlIGJlbG93CgkJLy8gYWxsb3dzIHRoZSA0MDAgbGlzdHZpZXcgaXRlbSBwYWdlIHRvIGxvYWQgaW4gYWJvdXQgMyBzZWNvbmRzIGFzCgkJLy8gb3Bwb3NlZCB0byAzMCBzZWNvbmRzLgoKCQl0aGlzLl9hZGRUaHVtYkNsYXNzZXMoIGxpICk7CgkJdGhpcy5fYWRkVGh1bWJDbGFzc2VzKCAkbGlzdC5maW5kKCAiLnVpLWxpbmstaW5oZXJpdCIgKSApOwoKCQl0aGlzLl9yZWZyZXNoQ29ybmVycyggY3JlYXRlICk7CgogICAgLy8gYXV0b2RpdmlkZXJzIGJpbmRzIHRvIHRoaXMgdG8gcmVkcmF3IGRpdmlkZXJzIGFmdGVyIHRoZSBsaXN0dmlldyByZWZyZXNoCgkJdGhpcy5fdHJpZ2dlciggImFmdGVycmVmcmVzaCIgKTsKCX0sCgoJLy9jcmVhdGUgYSBzdHJpbmcgZm9yIElEL3N1YnBhZ2UgdXJsIGNyZWF0aW9uCglfaWRTdHJpbmdFc2NhcGU6IGZ1bmN0aW9uKCBzdHIgKSB7CgkJcmV0dXJuIHN0ci5yZXBsYWNlKC9bXmEtekEtWjAtOV0vZywgJy0nKTsKCX0sCgoJX2NyZWF0ZVN1YlBhZ2VzOiBmdW5jdGlvbigpIHsKCQl2YXIgcGFyZW50TGlzdCA9IHRoaXMuZWxlbWVudCwKCQkJcGFyZW50UGFnZSA9IHBhcmVudExpc3QuY2xvc2VzdCggIi51aS1wYWdlIiApLAoJCQlwYXJlbnRVcmwgPSBwYXJlbnRQYWdlLmpxbURhdGEoICJ1cmwiICksCgkJCXBhcmVudElkID0gcGFyZW50VXJsIHx8IHBhcmVudFBhZ2VbIDAgXVsgJC5leHBhbmRvIF0sCgkJCXBhcmVudExpc3RJZCA9IHBhcmVudExpc3QuYXR0ciggImlkIiApLAoJCQlvID0gdGhpcy5vcHRpb25zLAoJCQlkbnMgPSAiZGF0YS0iICsgJC5tb2JpbGUubnMsCgkJCXNlbGYgPSB0aGlzLAoJCQlwZXJzaXN0ZW50Rm9vdGVySUQgPSBwYXJlbnRQYWdlLmZpbmQoICI6anFtRGF0YShyb2xlPSdmb290ZXInKSIgKS5qcW1EYXRhKCAiaWQiICksCgkJCWhhc1N1YlBhZ2VzOwoKCQlpZiAoIHR5cGVvZiBsaXN0Q291bnRQZXJQYWdlWyBwYXJlbnRJZCBdID09PSAidW5kZWZpbmVkIiApIHsKCQkJbGlzdENvdW50UGVyUGFnZVsgcGFyZW50SWQgXSA9IC0xOwoJCX0KCgkJcGFyZW50TGlzdElkID0gcGFyZW50TGlzdElkIHx8ICsrbGlzdENvdW50UGVyUGFnZVsgcGFyZW50SWQgXTsKCgkJJCggcGFyZW50TGlzdC5maW5kKCAibGk+dWwsIGxpPm9sIiApLnRvQXJyYXkoKS5yZXZlcnNlKCkgKS5lYWNoKGZ1bmN0aW9uKCBpICkgewoJCQl2YXIgc2VsZiA9IHRoaXMsCgkJCQlsaXN0ID0gJCggdGhpcyApLAoJCQkJbGlzdElkID0gbGlzdC5hdHRyKCAiaWQiICkgfHwgcGFyZW50TGlzdElkICsgIi0iICsgaSwKCQkJCXBhcmVudCA9IGxpc3QucGFyZW50KCksCgkJCQlub2RlRWxzRnVsbCA9ICQoIGxpc3QucHJldkFsbCgpLnRvQXJyYXkoKS5yZXZlcnNlKCkgKSwKCQkJCW5vZGVFbHMgPSBub2RlRWxzRnVsbC5sZW5ndGggPyBub2RlRWxzRnVsbCA6ICQoICI8c3Bhbj4iICsgJC50cmltKHBhcmVudC5jb250ZW50cygpWyAwIF0ubm9kZVZhbHVlKSArICI8L3NwYW4+IiApLAoJCQkJdGl0bGUgPSBub2RlRWxzLmZpcnN0KCkuZ2V0RW5jb2RlZFRleHQoKSwvL3VybCBsaW1pdHMgdG8gZmlyc3QgMzAgY2hhcnMgb2YgdGV4dAoJCQkJaWQgPSAoIHBhcmVudFVybCB8fCAiIiApICsgIiYiICsgJC5tb2JpbGUuc3ViUGFnZVVybEtleSArICI9IiArIGxpc3RJZCwKCQkJCXRoZW1lID0gbGlzdC5qcW1EYXRhKCAidGhlbWUiICkgfHwgby50aGVtZSwKCQkJCWNvdW50VGhlbWUgPSBsaXN0LmpxbURhdGEoICJjb3VudHRoZW1lIiApIHx8IHBhcmVudExpc3QuanFtRGF0YSggImNvdW50dGhlbWUiICkgfHwgby5jb3VudFRoZW1lLAoJCQkJbmV3UGFnZSwgYW5jaG9yOwoKCQkJLy9kZWZpbmUgaGFzU3ViUGFnZXMgZm9yIHVzZSBpbiBsYXRlciByZW1vdmFsCgkJCWhhc1N1YlBhZ2VzID0gdHJ1ZTsKCgkJCW5ld1BhZ2UgPSBsaXN0LmRldGFjaCgpCgkJCQkJCS53cmFwKCAiPGRpdiAiICsgZG5zICsgInJvbGU9J3BhZ2UnICIgKyBkbnMgKyAidXJsPSciICsgaWQgKyAiJyAiICsgZG5zICsgInRoZW1lPSciICsgdGhlbWUgKyAiJyAiICsgZG5zICsgImNvdW50LXRoZW1lPSciICsgY291bnRUaGVtZSArICInPjxkaXYgIiArIGRucyArICJyb2xlPSdjb250ZW50Jz48L2Rpdj48L2Rpdj4iICkKCQkJCQkJLnBhcmVudCgpCgkJCQkJCQkuYmVmb3JlKCAiPGRpdiAiICsgZG5zICsgInJvbGU9J2hlYWRlcicgIiArIGRucyArICJ0aGVtZT0nIiArIG8uaGVhZGVyVGhlbWUgKyAiJz48ZGl2IGNsYXNzPSd1aS10aXRsZSc+IiArIHRpdGxlICsgIjwvZGl2PjwvZGl2PiIgKQoJCQkJCQkJLmFmdGVyKCBwZXJzaXN0ZW50Rm9vdGVySUQgPyAkKCAiPGRpdiAiICsgZG5zICsgInJvbGU9J2Zvb3RlcicgIiArIGRucyArICJpZD0nIisgcGVyc2lzdGVudEZvb3RlcklEICsiJz4iICkgOiAiIiApCgkJCQkJCQkucGFyZW50KCkKCQkJCQkJCQkuYXBwZW5kVG8oICQubW9iaWxlLnBhZ2VDb250YWluZXIgKTsKCgkJCW5ld1BhZ2UucGFnZSgpOwoKCQkJYW5jaG9yID0gcGFyZW50LmZpbmQoICdhOmZpcnN0JyApOwoKCQkJaWYgKCAhYW5jaG9yLmxlbmd0aCApIHsKCQkJCWFuY2hvciA9ICQoICI8YS8+IiApLmh0bWwoIG5vZGVFbHMgfHwgdGl0bGUgKS5wcmVwZW5kVG8oIHBhcmVudC5lbXB0eSgpICk7CgkJCX0KCgkJCWFuY2hvci5hdHRyKCAiaHJlZiIsICIjIiArIGlkICk7CgoJCX0pLmxpc3R2aWV3KCk7CgoJCS8vIG9uIHBhZ2VoaWRlLCByZW1vdmUgYW55IG5lc3RlZCBwYWdlcyBhbG9uZyB3aXRoIHRoZSBwYXJlbnQgcGFnZSwgYXMgbG9uZyBhcyB0aGV5IGFyZW4ndCBhY3RpdmUKCQkvLyBhbmQgYXJlbid0IGVtYmVkZGVkCgkJaWYgKCBoYXNTdWJQYWdlcyAmJgoJCQlwYXJlbnRQYWdlLmlzKCAiOmpxbURhdGEoZXh0ZXJuYWwtcGFnZT0ndHJ1ZScpIiApICYmCgkJCXBhcmVudFBhZ2UuZGF0YSggInBhZ2UiICkub3B0aW9ucy5kb21DYWNoZSA9PT0gZmFsc2UgKSB7CgoJCQl2YXIgbmV3UmVtb3ZlID0gZnVuY3Rpb24oIGUsIHVpICkgewoJCQkJdmFyIG5leHRQYWdlID0gdWkubmV4dFBhZ2UsIG5wVVJMLAoJCQkJCXByRXZlbnQgPSBuZXcgJC5FdmVudCggInBhZ2VyZW1vdmUiICk7CgoJCQkJaWYgKCB1aS5uZXh0UGFnZSApIHsKCQkJCQlucFVSTCA9IG5leHRQYWdlLmpxbURhdGEoICJ1cmwiICk7CgkJCQkJaWYgKCBucFVSTC5pbmRleE9mKCBwYXJlbnRVcmwgKyAiJiIgKyAkLm1vYmlsZS5zdWJQYWdlVXJsS2V5ICkgIT09IDAgKSB7CgkJCQkJCXNlbGYuY2hpbGRQYWdlcygpLnJlbW92ZSgpOwoJCQkJCQlwYXJlbnRQYWdlLnRyaWdnZXIoIHByRXZlbnQgKTsKCQkJCQkJaWYgKCAhcHJFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHsKCQkJCQkJCXBhcmVudFBhZ2UucmVtb3ZlV2l0aERlcGVuZGVudHMoKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfTsKCgkJCS8vIHVuYmluZCB0aGUgb3JpZ2luYWwgcGFnZSByZW1vdmUgYW5kIHJlcGxhY2Ugd2l0aCBvdXIgc3BlY2lhbGl6ZWQgdmVyc2lvbgoJCQlwYXJlbnRQYWdlCgkJCQkudW5iaW5kKCAicGFnZWhpZGUucmVtb3ZlIiApCgkJCQkuYmluZCggInBhZ2VoaWRlLnJlbW92ZSIsIG5ld1JlbW92ZSk7CgkJfQoJfSwKCgkvLyBUT0RPIHNvcnQgb3V0IGEgYmV0dGVyIHdheSB0byB0cmFjayBzdWIgcGFnZXMgb2YgdGhlIGxpc3R2aWV3IHRoaXMgaXMgYnJpdHRsZQoJY2hpbGRQYWdlczogZnVuY3Rpb24oKSB7CgkJdmFyIHBhcmVudFVybCA9IHRoaXMucGFyZW50UGFnZS5qcW1EYXRhKCAidXJsIiApOwoKCQlyZXR1cm4gJCggIjpqcW1EYXRhKHVybF49JyIrICBwYXJlbnRVcmwgKyAiJiIgKyAkLm1vYmlsZS5zdWJQYWdlVXJsS2V5ICsgIicpIiApOwoJfQp9KTsKCi8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cwokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBlICkgewoJJC5tb2JpbGUubGlzdHZpZXcucHJvdG90eXBlLmVuaGFuY2VXaXRoaW4oIGUudGFyZ2V0ICk7Cn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLm1vYmlsZS5saXN0dmlldy5wcm90b3R5cGUub3B0aW9ucy5hdXRvZGl2aWRlcnMgPSBmYWxzZTsKJC5tb2JpbGUubGlzdHZpZXcucHJvdG90eXBlLm9wdGlvbnMuYXV0b2RpdmlkZXJzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWx0ICkgewoJLy8gbG9vayBmb3IgdGhlIHRleHQgaW4gdGhlIGdpdmVuIGVsZW1lbnQKCXZhciB0ZXh0ID0gZWx0LnRleHQoKSB8fCBudWxsOwoKCWlmICggIXRleHQgKSB7CgkJcmV0dXJuIG51bGw7Cgl9CgoJLy8gY3JlYXRlIHRoZSB0ZXh0IGZvciB0aGUgZGl2aWRlciAoZmlyc3QgdXBwZXJjYXNlZCBsZXR0ZXIpCgl0ZXh0ID0gdGV4dC5zbGljZSggMCwgMSApLnRvVXBwZXJDYXNlKCk7CgoJcmV0dXJuIHRleHQ7Cn07CgokKCBkb2N1bWVudCApLmRlbGVnYXRlKCAidWwsb2wiLCAibGlzdHZpZXdjcmVhdGUiLCBmdW5jdGlvbigpIHsKCgl2YXIgbGlzdCA9ICQoIHRoaXMgKSwKCQkJbGlzdHZpZXcgPSBsaXN0LmRhdGEoICJsaXN0dmlldyIgKTsKCglpZiAoICFsaXN0dmlldyB8fCAhbGlzdHZpZXcub3B0aW9ucy5hdXRvZGl2aWRlcnMgKSB7CgkJcmV0dXJuOwoJfQoKCXZhciByZXBsYWNlRGl2aWRlcnMgPSBmdW5jdGlvbiAoKSB7CgkJbGlzdC5maW5kKCAibGk6anFtRGF0YShyb2xlPSdsaXN0LWRpdmlkZXInKSIgKS5yZW1vdmUoKTsKCgkJdmFyIGxpcyA9IGxpc3QuZmluZCggJ2xpJyApLAoJCQlsYXN0RGl2aWRlclRleHQgPSBudWxsLCBsaSwgZGl2aWRlclRleHQ7CgoJCWZvciAoIHZhciBpID0gMDsgaSA8IGxpcy5sZW5ndGggOyBpKysgKSB7CgkJCWxpID0gbGlzW2ldOwoJCQlkaXZpZGVyVGV4dCA9IGxpc3R2aWV3Lm9wdGlvbnMuYXV0b2RpdmlkZXJzU2VsZWN0b3IoICQoIGxpICkgKTsKCgkJCWlmICggZGl2aWRlclRleHQgJiYgbGFzdERpdmlkZXJUZXh0ICE9PSBkaXZpZGVyVGV4dCApIHsKCQkJCXZhciBkaXZpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2xpJyApOwoJCQkJZGl2aWRlci5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIGRpdmlkZXJUZXh0ICkgKTsKCQkJCWRpdmlkZXIuc2V0QXR0cmlidXRlKCAnZGF0YS0nICsgJC5tb2JpbGUubnMgKyAncm9sZScsICdsaXN0LWRpdmlkZXInICk7CgkJCQlsaS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZGl2aWRlciwgbGkgKTsKCQkJfQoKCQkJbGFzdERpdmlkZXJUZXh0ID0gZGl2aWRlclRleHQ7CgkJfQoJfTsKCgl2YXIgYWZ0ZXJMaXN0dmlld1JlZnJlc2ggPSBmdW5jdGlvbiAoKSB7CgkJbGlzdC51bmJpbmQoICdsaXN0dmlld2FmdGVycmVmcmVzaCcsIGFmdGVyTGlzdHZpZXdSZWZyZXNoICk7CgkJcmVwbGFjZURpdmlkZXJzKCk7CgkJbGlzdHZpZXcucmVmcmVzaCgpOwoJCWxpc3QuYmluZCggJ2xpc3R2aWV3YWZ0ZXJyZWZyZXNoJywgYWZ0ZXJMaXN0dmlld1JlZnJlc2ggKTsKCX07CgoJYWZ0ZXJMaXN0dmlld1JlZnJlc2goKTsKfSk7Cgp9KSggalF1ZXJ5ICk7CgovKgoqICJjaGVja2JveHJhZGlvIiBwbHVnaW4KKi8KCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKJC53aWRnZXQoICJtb2JpbGUuY2hlY2tib3hyYWRpbyIsICQubW9iaWxlLndpZGdldCwgewoJb3B0aW9uczogewoJCXRoZW1lOiBudWxsLAoJCWluaXRTZWxlY3RvcjogImlucHV0W3R5cGU9J2NoZWNrYm94J10saW5wdXRbdHlwZT0ncmFkaW8nXSIKCX0sCglfY3JlYXRlOiBmdW5jdGlvbigpIHsKCQl2YXIgc2VsZiA9IHRoaXMsCgkJCWlucHV0ID0gdGhpcy5lbGVtZW50LAoJCQlpbmhlcml0QXR0ciA9IGZ1bmN0aW9uKCBpbnB1dCwgZGF0YUF0dHIgKSB7CgkJCQlyZXR1cm4gaW5wdXQuanFtRGF0YSggZGF0YUF0dHIgKSB8fCBpbnB1dC5jbG9zZXN0KCAiZm9ybSwgZmllbGRzZXQiICkuanFtRGF0YSggZGF0YUF0dHIgKTsKCQkJfSwKCQkJLy8gTk9URTogV2luZG93cyBQaG9uZSBjb3VsZCBub3QgZmluZCB0aGUgbGFiZWwgdGhyb3VnaCBhIHNlbGVjdG9yCgkJCS8vIGZpbHRlciB3b3JrcyB0aG91Z2guCgkJCXBhcmVudExhYmVsID0gJCggaW5wdXQgKS5jbG9zZXN0KCAibGFiZWwiICksCgkJCWxhYmVsID0gcGFyZW50TGFiZWwubGVuZ3RoID8gcGFyZW50TGFiZWwgOiAkKCBpbnB1dCApLmNsb3Nlc3QoICJmb3JtLCBmaWVsZHNldCwgOmpxbURhdGEocm9sZT0ncGFnZScpLCA6anFtRGF0YShyb2xlPSdkaWFsb2cnKSIgKS5maW5kKCAibGFiZWwiICkuZmlsdGVyKCAiW2Zvcj0nIiArIGlucHV0WzBdLmlkICsgIiddIiApLmZpcnN0KCksCgkJCWlucHV0dHlwZSA9IGlucHV0WzBdLnR5cGUsCgkJCW1pbmkgPSBpbmhlcml0QXR0ciggaW5wdXQsICJtaW5pIiApLAoJCQljaGVja2VkU3RhdGUgPSBpbnB1dHR5cGUgKyAiLW9uIiwKCQkJdW5jaGVja2VkU3RhdGUgPSBpbnB1dHR5cGUgKyAiLW9mZiIsCgkJCWljb24gPSBpbnB1dC5wYXJlbnRzKCAiOmpxbURhdGEodHlwZT0naG9yaXpvbnRhbCcpIiApLmxlbmd0aCA/IHVuZGVmaW5lZCA6IHVuY2hlY2tlZFN0YXRlLAoJCQlpY29ucG9zID0gaW5oZXJpdEF0dHIoIGlucHV0LCAiaWNvbnBvcyIgKSwKCQkJYWN0aXZlQnRuID0gaWNvbiA/ICIiIDogIiAiICsgJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MsCgkJCWNoZWNrZWRDbGFzcyA9ICJ1aS0iICsgY2hlY2tlZFN0YXRlICsgYWN0aXZlQnRuLAoJCQl1bmNoZWNrZWRDbGFzcyA9ICJ1aS0iICsgdW5jaGVja2VkU3RhdGUsCgkJCWNoZWNrZWRpY29uID0gInVpLWljb24tIiArIGNoZWNrZWRTdGF0ZSwKCQkJdW5jaGVja2VkaWNvbiA9ICJ1aS1pY29uLSIgKyB1bmNoZWNrZWRTdGF0ZTsKCgkJaWYgKCBpbnB1dHR5cGUgIT09ICJjaGVja2JveCIgJiYgaW5wdXR0eXBlICE9PSAicmFkaW8iICkgewoJCQlyZXR1cm47CgkJfQoKCQkvLyBFeHBvc2UgZm9yIG90aGVyIG1ldGhvZHMKCQkkLmV4dGVuZCggdGhpcywgewoJCQlsYWJlbDogbGFiZWwsCgkJCWlucHV0dHlwZTogaW5wdXR0eXBlLAoJCQljaGVja2VkQ2xhc3M6IGNoZWNrZWRDbGFzcywKCQkJdW5jaGVja2VkQ2xhc3M6IHVuY2hlY2tlZENsYXNzLAoJCQljaGVja2VkaWNvbjogY2hlY2tlZGljb24sCgkJCXVuY2hlY2tlZGljb246IHVuY2hlY2tlZGljb24KCQl9KTsKCgkJLy8gSWYgdGhlcmUncyBubyBzZWxlY3RlZCB0aGVtZSBjaGVjayB0aGUgZGF0YSBhdHRyCgkJaWYgKCAhdGhpcy5vcHRpb25zLnRoZW1lICkgewoJCQl0aGlzLm9wdGlvbnMudGhlbWUgPSAkLm1vYmlsZS5nZXRJbmhlcml0ZWRUaGVtZSggdGhpcy5lbGVtZW50LCAiYyIgKTsKCQl9CgoJCWxhYmVsLmJ1dHRvbk1hcmt1cCh7CgkJCXRoZW1lOiB0aGlzLm9wdGlvbnMudGhlbWUsCgkJCWljb246IGljb24sCgkJCXNoYWRvdzogZmFsc2UsCgkJCW1pbmk6IG1pbmksCgkJCWljb25wb3M6IGljb25wb3MKCQl9KTsKCgkJLy8gV3JhcCB0aGUgaW5wdXQgKyBsYWJlbCBpbiBhIGRpdgoJCXZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgkJd3JhcHBlci5jbGFzc05hbWUgPSAndWktJyArIGlucHV0dHlwZTsKCgkJaW5wdXQuYWRkKCBsYWJlbCApLndyYXBBbGwoIHdyYXBwZXIgKTsKCgkJbGFiZWwuYmluZCh7CgkJCXZtb3VzZW92ZXI6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWlmICggJCggdGhpcyApLnBhcmVudCgpLmlzKCAiLnVpLWRpc2FibGVkIiApICkgewoJCQkJCWV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwoJCQkJfQoJCQl9LAoKCQkJdmNsaWNrOiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQlpZiAoIGlucHV0LmlzKCAiOmRpc2FibGVkIiApICkgewoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCXNlbGYuX2NhY2hlVmFscygpOwoKCQkJCWlucHV0LnByb3AoICJjaGVja2VkIiwgaW5wdXR0eXBlID09PSAicmFkaW8iICYmIHRydWUgfHwgIWlucHV0LnByb3AoICJjaGVja2VkIiApICk7CgoJCQkJLy8gdHJpZ2dlciBjbGljayBoYW5kbGVyJ3MgYm91bmQgZGlyZWN0bHkgdG8gdGhlIGlucHV0IGFzIGEgc3Vic3RpdHV0ZSBmb3IKCQkJCS8vIGhvdyBsYWJlbCBjbGlja3MgYmVoYXZlIG5vcm1hbGx5IGluIHRoZSBicm93c2VycwoJCQkJLy8gVE9ETzogaXQgd291bGQgYmUgbmljZSB0byBsZXQgdGhlIGJyb3dzZXIncyBoYW5kbGUgdGhlIGNsaWNrcyBhbmQgcGFzcyB0aGVtCgkJCQkvLyAgICAgICB0aHJvdWdoIHRvIHRoZSBhc3NvY2lhdGUgaW5wdXQuIHdlIGNhbiBzd2FsbG93IHRoYXQgY2xpY2sgYXQgdGhlIHBhcmVudAoJCQkJLy8gICAgICAgd3JhcHBlciBlbGVtZW50IGxldmVsCgkJCQlpbnB1dC50cmlnZ2VySGFuZGxlciggJ2NsaWNrJyApOwoKCQkJCS8vIElucHV0IHNldCBmb3IgY29tbW9uIHJhZGlvIGJ1dHRvbnMgd2lsbCBjb250YWluIGFsbCB0aGUgcmFkaW8KCQkJCS8vIGJ1dHRvbnMsIGJ1dCB3aWxsIG5vdCBmb3IgY2hlY2tib3hlcy4gY2xlYXJpbmcgdGhlIGNoZWNrZWQgc3RhdHVzCgkJCQkvLyBvZiBvdGhlciByYWRpb3MgZW5zdXJlcyB0aGUgYWN0aXZlIGJ1dHRvbiBzdGF0ZSBpcyBhcHBsaWVkIHByb3Blcmx5CgkJCQlzZWxmLl9nZXRJbnB1dFNldCgpLm5vdCggaW5wdXQgKS5wcm9wKCAiY2hlY2tlZCIsIGZhbHNlICk7CgoJCQkJc2VsZi5fdXBkYXRlQWxsKCk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQl9KTsKCgkJaW5wdXQKCQkJLmJpbmQoewoJCQkJdm1vdXNlZG93bjogZnVuY3Rpb24oKSB7CgkJCQkJc2VsZi5fY2FjaGVWYWxzKCk7CgkJCQl9LAoKCQkJCXZjbGljazogZnVuY3Rpb24oKSB7CgkJCQkJdmFyICR0aGlzID0gJCggdGhpcyApOwoKCQkJCQkvLyBBZGRzIGNoZWNrZWQgYXR0cmlidXRlIHRvIGNoZWNrZWQgaW5wdXQgd2hlbiBrZXlib2FyZCBpcyB1c2VkCgkJCQkJaWYgKCAkdGhpcy5pcyggIjpjaGVja2VkIiApICkgewoKCQkJCQkJJHRoaXMucHJvcCggImNoZWNrZWQiLCB0cnVlKTsKCQkJCQkJc2VsZi5fZ2V0SW5wdXRTZXQoKS5ub3QoICR0aGlzICkucHJvcCggImNoZWNrZWQiLCBmYWxzZSApOwoJCQkJCX0gZWxzZSB7CgoJCQkJCQkkdGhpcy5wcm9wKCAiY2hlY2tlZCIsIGZhbHNlICk7CgkJCQkJfQoKCQkJCQlzZWxmLl91cGRhdGVBbGwoKTsKCQkJCX0sCgoJCQkJZm9jdXM6IGZ1bmN0aW9uKCkgewoJCQkJCWxhYmVsLmFkZENsYXNzKCAkLm1vYmlsZS5mb2N1c0NsYXNzICk7CgkJCQl9LAoKCQkJCWJsdXI6IGZ1bmN0aW9uKCkgewoJCQkJCWxhYmVsLnJlbW92ZUNsYXNzKCAkLm1vYmlsZS5mb2N1c0NsYXNzICk7CgkJCQl9CgkJCX0pOwoKCQl0aGlzLnJlZnJlc2goKTsKCX0sCgoJX2NhY2hlVmFsczogZnVuY3Rpb24oKSB7CgkJdGhpcy5fZ2V0SW5wdXRTZXQoKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQkkKCB0aGlzICkuanFtRGF0YSggImNhY2hlVmFsIiwgdGhpcy5jaGVja2VkICk7CgkJfSk7Cgl9LAoKCS8vcmV0dXJucyBlaXRoZXIgYSBzZXQgb2YgcmFkaW9zIHdpdGggdGhlIHNhbWUgbmFtZSBhdHRyaWJ1dGUsIG9yIGEgc2luZ2xlIGNoZWNrYm94CglfZ2V0SW5wdXRTZXQ6IGZ1bmN0aW9uKCkgewoJCWlmICggdGhpcy5pbnB1dHR5cGUgPT09ICJjaGVja2JveCIgKSB7CgkJCXJldHVybiB0aGlzLmVsZW1lbnQ7CgkJfQoKCQlyZXR1cm4gdGhpcy5lbGVtZW50LmNsb3Nlc3QoICJmb3JtLCBmaWVsZHNldCwgOmpxbURhdGEocm9sZT0ncGFnZScpLCA6anFtRGF0YShyb2xlPSdkaWFsb2cnKSIgKQoJCQkuZmluZCggImlucHV0W25hbWU9JyIgKyB0aGlzLmVsZW1lbnRbMF0ubmFtZSArICInXVt0eXBlPSciICsgdGhpcy5pbnB1dHR5cGUgKyAiJ10iICk7Cgl9LAoKCV91cGRhdGVBbGw6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpczsKCgkJdGhpcy5fZ2V0SW5wdXRTZXQoKS5lYWNoKGZ1bmN0aW9uKCkgewoJCQl2YXIgJHRoaXMgPSAkKCB0aGlzICk7CgoJCQlpZiAoIHRoaXMuY2hlY2tlZCB8fCBzZWxmLmlucHV0dHlwZSA9PT0gImNoZWNrYm94IiApIHsKCQkJCSR0aGlzLnRyaWdnZXIoICJjaGFuZ2UiICk7CgkJCX0KCQl9KQoJCS5jaGVja2JveHJhZGlvKCAicmVmcmVzaCIgKTsKCX0sCgoJcmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJdmFyIGlucHV0ID0gdGhpcy5lbGVtZW50WzBdLAoJCQlsYWJlbCA9IHRoaXMubGFiZWwsCgkJCWljb24gPSBsYWJlbC5maW5kKCAiLnVpLWljb24iICk7CgoJCWlmICggaW5wdXQuY2hlY2tlZCApIHsKCQkJbGFiZWwuYWRkQ2xhc3MoIHRoaXMuY2hlY2tlZENsYXNzICkucmVtb3ZlQ2xhc3MoIHRoaXMudW5jaGVja2VkQ2xhc3MgKTsKCQkJaWNvbi5hZGRDbGFzcyggdGhpcy5jaGVja2VkaWNvbiApLnJlbW92ZUNsYXNzKCB0aGlzLnVuY2hlY2tlZGljb24gKTsKCQl9IGVsc2UgewoJCQlsYWJlbC5yZW1vdmVDbGFzcyggdGhpcy5jaGVja2VkQ2xhc3MgKS5hZGRDbGFzcyggdGhpcy51bmNoZWNrZWRDbGFzcyApOwoJCQlpY29uLnJlbW92ZUNsYXNzKCB0aGlzLmNoZWNrZWRpY29uICkuYWRkQ2xhc3MoIHRoaXMudW5jaGVja2VkaWNvbiApOwoJCX0KCgkJaWYgKCBpbnB1dC5kaXNhYmxlZCApIHsKCQkJdGhpcy5kaXNhYmxlKCk7CgkJfSBlbHNlIHsKCQkJdGhpcy5lbmFibGUoKTsKCQl9Cgl9LAoKCWRpc2FibGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuZWxlbWVudC5wcm9wKCAiZGlzYWJsZWQiLCB0cnVlICkucGFyZW50KCkuYWRkQ2xhc3MoICJ1aS1kaXNhYmxlZCIgKTsKCX0sCgoJZW5hYmxlOiBmdW5jdGlvbigpIHsKCQl0aGlzLmVsZW1lbnQucHJvcCggImRpc2FibGVkIiwgZmFsc2UgKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyggInVpLWRpc2FibGVkIiApOwoJfQp9KTsKCi8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cwokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBlICkgewoJJC5tb2JpbGUuY2hlY2tib3hyYWRpby5wcm90b3R5cGUuZW5oYW5jZVdpdGhpbiggZS50YXJnZXQsIHRydWUgKTsKfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCiQud2lkZ2V0KCAibW9iaWxlLmJ1dHRvbiIsICQubW9iaWxlLndpZGdldCwgewoJb3B0aW9uczogewoJCXRoZW1lOiBudWxsLAoJCWljb246IG51bGwsCgkJaWNvbnBvczogbnVsbCwKCQljb3JuZXJzOiB0cnVlLAoJCXNoYWRvdzogdHJ1ZSwKCQlpY29uc2hhZG93OiB0cnVlLAoJCWluaXRTZWxlY3RvcjogImJ1dHRvbiwgW3R5cGU9J2J1dHRvbiddLCBbdHlwZT0nc3VibWl0J10sIFt0eXBlPSdyZXNldCddIgoJfSwKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXZhciAkZWwgPSB0aGlzLmVsZW1lbnQsCgkJCSRidXR0b24sCgkJCW8gPSB0aGlzLm9wdGlvbnMsCgkJCXR5cGUsCgkJCW5hbWUsCgkJCWlubGluZSA9IG8uaW5saW5lIHx8ICRlbC5qcW1EYXRhKCAiaW5saW5lIiApLAoJCQltaW5pID0gby5taW5pIHx8ICRlbC5qcW1EYXRhKCAibWluaSIgKSwKCQkJY2xhc3NlcyA9ICIiLAoJCQkkYnV0dG9uUGxhY2Vob2xkZXI7CgoJCS8vIGlmIHRoaXMgaXMgYSBsaW5rLCBjaGVjayBpZiBpdCdzIGJlZW4gZW5oYW5jZWQgYW5kLCBpZiBub3QsIHVzZSB0aGUgcmlnaHQgZnVuY3Rpb24KCQlpZiAoICRlbFsgMCBdLnRhZ05hbWUgPT09ICJBIiApIHsKCQkJaWYgKCAhJGVsLmhhc0NsYXNzKCAidWktYnRuIiApICkgewoJCQkJJGVsLmJ1dHRvbk1hcmt1cCgpOwoJCQl9CgoJCQlyZXR1cm47CgkJfQoKCQkvLyBnZXQgdGhlIGluaGVyaXRlZCB0aGVtZQoJCS8vIFRPRE8gY2VudHJhbGl6ZSBmb3IgYWxsIHdpZGdldHMKCQlpZiAoICF0aGlzLm9wdGlvbnMudGhlbWUgKSB7CgkJCXRoaXMub3B0aW9ucy50aGVtZSA9ICQubW9iaWxlLmdldEluaGVyaXRlZFRoZW1lKCB0aGlzLmVsZW1lbnQsICJjIiApOwoJCX0KCgkJLy8gVE9ETzogUG9zdCAxLjEtLW9uY2Ugd2UgaGF2ZSB0aW1lIHRvIHRlc3QgdGhvcm91Z2hseS0tYW55IGNsYXNzZXMgbWFudWFsbHkgYXBwbGllZCB0byB0aGUgb3JpZ2luYWwgZWxlbWVudCBzaG91bGQgYmUgY2FycmllZCBvdmVyIHRvIHRoZSBlbmhhbmNlZCBlbGVtZW50LCB3aXRoIGFuIGAtZW5oYW5jZWRgIHN1ZmZpeC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvMzU3NwoJCS8qIGlmICggJGVsWzBdLmNsYXNzTmFtZS5sZW5ndGggKSB7CgkJCWNsYXNzZXMgPSAkZWxbMF0uY2xhc3NOYW1lOwoJCX0gKi8KCQlpZiAoICEhfiRlbFswXS5jbGFzc05hbWUuaW5kZXhPZiggInVpLWJ0bi1sZWZ0IiApICkgewoJCQljbGFzc2VzID0gInVpLWJ0bi1sZWZ0IjsKCQl9CgoJCWlmICggICEhfiRlbFswXS5jbGFzc05hbWUuaW5kZXhPZiggInVpLWJ0bi1yaWdodCIgKSApIHsKCQkJY2xhc3NlcyA9ICJ1aS1idG4tcmlnaHQiOwoJCX0KCgkJaWYgKCAgJGVsLmF0dHIoICJ0eXBlIiApID09PSAic3VibWl0IiB8fCAkZWwuYXR0ciggInR5cGUiICkgPT09ICJyZXNldCIgKSB7CgkJCWNsYXNzZXMgPyBjbGFzc2VzICs9ICIgdWktc3VibWl0IiA6ICBjbGFzc2VzID0gInVpLXN1Ym1pdCI7CgkJfQoJCSQoICJsYWJlbFtmb3I9JyIgKyAkZWwuYXR0ciggImlkIiApICsgIiddIiApLmFkZENsYXNzKCAidWktc3VibWl0IiApOwoKCQkvLyBBZGQgQVJJQSByb2xlCgkJdGhpcy5idXR0b24gPSAkKCAiPGRpdj48L2Rpdj4iICkKCQkJWyAkZWwuaHRtbCgpID8gImh0bWwiIDogInRleHQiIF0oICRlbC5odG1sKCkgfHwgJGVsLnZhbCgpICkKCQkJLmluc2VydEJlZm9yZSggJGVsICkKCQkJLmJ1dHRvbk1hcmt1cCh7CgkJCQl0aGVtZTogby50aGVtZSwKCQkJCWljb246IG8uaWNvbiwKCQkJCWljb25wb3M6IG8uaWNvbnBvcywKCQkJCWlubGluZTogaW5saW5lLAoJCQkJY29ybmVyczogby5jb3JuZXJzLAoJCQkJc2hhZG93OiBvLnNoYWRvdywKCQkJCWljb25zaGFkb3c6IG8uaWNvbnNoYWRvdywKCQkJCW1pbmk6IG1pbmkKCQkJfSkKCQkJLmFkZENsYXNzKCBjbGFzc2VzICkKCQkJLmFwcGVuZCggJGVsLmFkZENsYXNzKCAidWktYnRuLWhpZGRlbiIgKSApOwoKICAgICAgICAkYnV0dG9uID0gdGhpcy5idXR0b247CgkJdHlwZSA9ICRlbC5hdHRyKCAidHlwZSIgKTsKCQluYW1lID0gJGVsLmF0dHIoICJuYW1lIiApOwoKCQkvLyBBZGQgaGlkZGVuIGlucHV0IGR1cmluZyBzdWJtaXQgaWYgaW5wdXQgdHlwZT0ic3VibWl0IiBoYXMgYSBuYW1lLgoJCWlmICggdHlwZSAhPT0gImJ1dHRvbiIgJiYgdHlwZSAhPT0gInJlc2V0IiAmJiBuYW1lICkgewoJCQkJJGVsLmJpbmQoICJ2Y2xpY2siLCBmdW5jdGlvbigpIHsKCQkJCQkvLyBBZGQgaGlkZGVuIGlucHV0IGlmIGl0IGRvZXNuJ3QgYWxyZWFkeSBleGlzdC4KCQkJCQlpZiAoICRidXR0b25QbGFjZWhvbGRlciA9PT0gdW5kZWZpbmVkICkgewoJCQkJCQkkYnV0dG9uUGxhY2Vob2xkZXIgPSAkKCAiPGlucHV0PiIsIHsKCQkJCQkJCXR5cGU6ICJoaWRkZW4iLAoJCQkJCQkJbmFtZTogJGVsLmF0dHIoICJuYW1lIiApLAoJCQkJCQkJdmFsdWU6ICRlbC5hdHRyKCAidmFsdWUiICkKCQkJCQkJfSkuaW5zZXJ0QmVmb3JlKCAkZWwgKTsKCgkJCQkJCS8vIEJpbmQgdG8gZG9jIHRvIHJlbW92ZSBhZnRlciBzdWJtaXQgaGFuZGxpbmcKCQkJCQkJJCggZG9jdW1lbnQgKS5vbmUoICJzdWJtaXQiLCBmdW5jdGlvbigpIHsKCQkJCQkJCSRidXR0b25QbGFjZWhvbGRlci5yZW1vdmUoKTsKCgkJCQkJCQkvLyByZXNldCB0aGUgbG9jYWwgdmFyIHNvIHRoYXQgdGhlIGhpZGRlbiBpbnB1dAoJCQkJCQkJLy8gd2lsbCBiZSByZS1hZGRlZCBvbiBzdWJzZXF1ZW50IGNsaWNrcwoJCQkJCQkJJGJ1dHRvblBsYWNlaG9sZGVyID0gdW5kZWZpbmVkOwoJCQkJCQl9KTsKCQkJCQl9CgkJCQl9KTsKCQl9CgoJCSRlbC5iaW5kKHsKCQkJZm9jdXM6IGZ1bmN0aW9uKCkgewoJCQkJJGJ1dHRvbi5hZGRDbGFzcyggJC5tb2JpbGUuZm9jdXNDbGFzcyApOwoJCQl9LAoKCQkJYmx1cjogZnVuY3Rpb24oKSB7CgkJCQkkYnV0dG9uLnJlbW92ZUNsYXNzKCAkLm1vYmlsZS5mb2N1c0NsYXNzICk7CgkJCX0KCQl9KTsKCgkJdGhpcy5yZWZyZXNoKCk7Cgl9LAoKCWVuYWJsZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5lbGVtZW50LmF0dHIoICJkaXNhYmxlZCIsIGZhbHNlICk7CgkJdGhpcy5idXR0b24ucmVtb3ZlQ2xhc3MoICJ1aS1kaXNhYmxlZCIgKS5hdHRyKCAiYXJpYS1kaXNhYmxlZCIsIGZhbHNlICk7CgkJcmV0dXJuIHRoaXMuX3NldE9wdGlvbiggImRpc2FibGVkIiwgZmFsc2UgKTsKCX0sCgoJZGlzYWJsZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5lbGVtZW50LmF0dHIoICJkaXNhYmxlZCIsIHRydWUgKTsKCQl0aGlzLmJ1dHRvbi5hZGRDbGFzcyggInVpLWRpc2FibGVkIiApLmF0dHIoICJhcmlhLWRpc2FibGVkIiwgdHJ1ZSApOwoJCXJldHVybiB0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIHRydWUgKTsKCX0sCgoJcmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJdmFyICRlbCA9IHRoaXMuZWxlbWVudDsKCgkJaWYgKCAkZWwucHJvcCgiZGlzYWJsZWQiKSApIHsKCQkJdGhpcy5kaXNhYmxlKCk7CgkJfSBlbHNlIHsKCQkJdGhpcy5lbmFibGUoKTsKCQl9CgoJCS8vIEdyYWIgdGhlIGJ1dHRvbidzIHRleHQgZWxlbWVudCBmcm9tIGl0cyBpbXBsZW1lbnRhdGlvbi1pbmRlcGVuZGVudCBkYXRhIGl0ZW0KCQkkKCB0aGlzLmJ1dHRvbi5kYXRhKCAnYnV0dG9uRWxlbWVudHMnICkudGV4dCApWyAkZWwuaHRtbCgpID8gImh0bWwiIDogInRleHQiIF0oICRlbC5odG1sKCkgfHwgJGVsLnZhbCgpICk7Cgl9Cn0pOwoKLy9hdXRvIHNlbGYtaW5pdCB3aWRnZXRzCiQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKSB7CgkkLm1vYmlsZS5idXR0b24ucHJvdG90eXBlLmVuaGFuY2VXaXRoaW4oIGUudGFyZ2V0LCB0cnVlICk7Cn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLmZuLmNvbnRyb2xncm91cCA9IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJZnVuY3Rpb24gZmxpcENsYXNzZXMoIGVscywgZmxDb3JuZXJzICApIHsKCQllbHMucmVtb3ZlQ2xhc3MoICJ1aS1idG4tY29ybmVyLWFsbCB1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20gdWktY29ybmVyLWxlZnQgdWktY29ybmVyLXJpZ2h0IHVpLWNvbnRyb2xncm91cC1sYXN0IHVpLXNoYWRvdyIgKQoJCQkuZXEoIDAgKS5hZGRDbGFzcyggZmxDb3JuZXJzWyAwIF0gKQoJCQkuZW5kKCkKCQkJLmxhc3QoKS5hZGRDbGFzcyggZmxDb3JuZXJzWyAxIF0gKS5hZGRDbGFzcyggInVpLWNvbnRyb2xncm91cC1sYXN0IiApOwoJfQoKCXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CgkJdmFyICRlbCA9ICQoIHRoaXMgKSwKCQkJbyA9ICQuZXh0ZW5kKHsKCQkJCQkJZGlyZWN0aW9uOiAkZWwuanFtRGF0YSggInR5cGUiICkgfHwgInZlcnRpY2FsIiwKCQkJCQkJc2hhZG93OiBmYWxzZSwKCQkJCQkJZXhjbHVkZUludmlzaWJsZTogdHJ1ZSwKCQkJCQkJbWluaTogJGVsLmpxbURhdGEoICJtaW5pIiApCgkJCQkJfSwgb3B0aW9ucyApLAoJCQlncm91cGxlZ2VuZCA9ICRlbC5jaGlsZHJlbiggImxlZ2VuZCIgKSwKCQkJZ3JvdXBoZWFkaW5nID0gJGVsLmNoaWxkcmVuKCAiLnVpLWNvbnRyb2xncm91cC1sYWJlbCIgKSwKCQkJZ3JvdXBjb250cm9scyA9ICRlbC5jaGlsZHJlbiggIi51aS1jb250cm9sZ3JvdXAtY29udHJvbHMiICksCgkJCWZsQ29ybmVycyA9IG8uZGlyZWN0aW9uID09PSAiaG9yaXpvbnRhbCIgPyBbICJ1aS1jb3JuZXItbGVmdCIsICJ1aS1jb3JuZXItcmlnaHQiIF0gOiBbICJ1aS1jb3JuZXItdG9wIiwgInVpLWNvcm5lci1ib3R0b20iIF0sCgkJCXR5cGUgPSAkZWwuZmluZCggImlucHV0IiApLmZpcnN0KCkuYXR0ciggInR5cGUiICk7CgoJCS8vIEZpcnN0IHVud3JhcCB0aGUgY29udHJvbHMgaWYgdGhlIGNvbnRyb2xncm91cCB3YXMgYWxyZWFkeSBlbmhhbmNlZAoJCWlmICggZ3JvdXBjb250cm9scy5sZW5ndGggKSB7CgkJCWdyb3VwY29udHJvbHMuY29udGVudHMoKS51bndyYXAoKTsKCQl9CgkJJGVsLndyYXBJbm5lciggIjxkaXYgY2xhc3M9J3VpLWNvbnRyb2xncm91cC1jb250cm9scyc+PC9kaXY+IiApOwoKCQlpZiAoIGdyb3VwbGVnZW5kLmxlbmd0aCApIHsKCQkJLy8gUmVwbGFjZSBsZWdlbmQgd2l0aCBtb3JlIHN0eWxhYmxlIHJlcGxhY2VtZW50IGRpdgoJCQkkKCAiPGRpdiByb2xlPSdoZWFkaW5nJyBjbGFzcz0ndWktY29udHJvbGdyb3VwLWxhYmVsJz4iICsgZ3JvdXBsZWdlbmQuaHRtbCgpICsgIjwvZGl2PiIgKS5pbnNlcnRCZWZvcmUoICRlbC5jaGlsZHJlbiggMCApICk7CgkJCWdyb3VwbGVnZW5kLnJlbW92ZSgpOwoJCX0gZWxzZSBpZiAoIGdyb3VwaGVhZGluZy5sZW5ndGggKSB7CgkJCS8vIEp1c3QgbW92ZSB0aGUgaGVhZGluZyBpZiB0aGUgY29udHJvbGdyb3VwIHdhcyBhbHJlYWR5IGVuaGFuY2VkCgkJCSRlbC5wcmVwZW5kKCBncm91cGhlYWRpbmcgKTsKCQl9CgoJCSRlbC5hZGRDbGFzcyggInVpLWNvcm5lci1hbGwgdWktY29udHJvbGdyb3VwIHVpLWNvbnRyb2xncm91cC0iICsgby5kaXJlY3Rpb24gKTsKCgkJZmxpcENsYXNzZXMoICRlbC5maW5kKCAiLnVpLWJ0biIgKyAoIG8uZXhjbHVkZUludmlzaWJsZSA/ICI6dmlzaWJsZSIgOiAiIiApICkubm90KCAnLnVpLXNsaWRlci1oYW5kbGUnICksIGZsQ29ybmVycyApOwoJCWZsaXBDbGFzc2VzKCAkZWwuZmluZCggIi51aS1idG4taW5uZXIiICksIGZsQ29ybmVycyApOwoKCQlpZiAoIG8uc2hhZG93ICkgewoJCQkkZWwuYWRkQ2xhc3MoICJ1aS1zaGFkb3ciICk7CgkJfQoKCQlpZiAoIG8ubWluaSApIHsKCQkJJGVsLmFkZENsYXNzKCAidWktbWluaSIgKTsKCQl9CgoJfSk7Cn07CgovLyBUaGUgcGFnZWNyZWF0ZSBoYW5kbGVyIGZvciBjb250cm9sZ3JvdXAgaXMgaW4ganF1ZXJ5Lm1vYmlsZS5pbml0IGJlY2F1c2Ugb2YgdGhlIHNvZnQtZGVwZW5kZW5jeSBvbiB0aGUgd3JhcHBlZCB3aWRnZXRzCgp9KShqUXVlcnkpOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokKCBkb2N1bWVudCApLmJpbmQoICJwYWdlY3JlYXRlIGNyZWF0ZSIsIGZ1bmN0aW9uKCBlICkgewoKCS8vbGlua3Mgd2l0aGluIGNvbnRlbnQgYXJlYXMsIHRlc3RzIGluY2x1ZGVkIHdpdGggcGFnZQoJJCggZS50YXJnZXQgKQoJCS5maW5kKCAiYSIgKQoJCS5qcW1FbmhhbmNlYWJsZSgpCgkJLm5vdCggIi51aS1idG4sIC51aS1saW5rLWluaGVyaXQsIDpqcW1EYXRhKHJvbGU9J25vbmUnKSwgOmpxbURhdGEocm9sZT0nbm9qcycpIiApCgkJLmFkZENsYXNzKCAidWktbGluayIgKTsKCn0pOwoKfSkoIGpRdWVyeSApOwoKCihmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkgewoKCWZ1bmN0aW9uIGZpdFNlZ21lbnRJbnNpZGVTZWdtZW50KCB3aW5TaXplLCBzZWdTaXplLCBvZmZzZXQsIGRlc2lyZWQgKSB7CgkJdmFyIHJldCA9IGRlc2lyZWQ7CgoJCWlmICggd2luU2l6ZSA8IHNlZ1NpemUgKSB7CgkJCS8vIENlbnRlciBzZWdtZW50IGlmIGl0J3MgYmlnZ2VyIHRoYW4gdGhlIHdpbmRvdwoJCQlyZXQgPSBvZmZzZXQgKyAoIHdpblNpemUgLSBzZWdTaXplICkgLyAyOwoJCX0gZWxzZSB7CgkJCS8vIE90aGVyd2lzZSBjZW50ZXIgaXQgYXQgdGhlIGRlc2lyZWQgY29vcmRpbmF0ZSB3aGlsZSBrZWVwaW5nIGl0IGNvbXBsZXRlbHkgaW5zaWRlIHRoZSB3aW5kb3cKCQkJcmV0ID0gTWF0aC5taW4oIE1hdGgubWF4KCBvZmZzZXQsIGRlc2lyZWQgLSBzZWdTaXplIC8gMiApLCBvZmZzZXQgKyB3aW5TaXplIC0gc2VnU2l6ZSApOwoJCX0KCgkJcmV0dXJuIHJldDsKCX0KCglmdW5jdGlvbiB3aW5kb3dDb29yZHMoKSB7CgkJdmFyICR3aW4gPSAkKCB3aW5kb3cgKTsKCgkJcmV0dXJuIHsKCQkJeDogJHdpbi5zY3JvbGxMZWZ0KCksCgkJCXk6ICR3aW4uc2Nyb2xsVG9wKCksCgkJCWN4OiAoIHdpbmRvdy5pbm5lcldpZHRoIHx8ICR3aW4ud2lkdGgoKSApLAoJCQljeTogKCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgJHdpbi5oZWlnaHQoKSApCgkJfTsKCX0KCgkkLndpZGdldCggIm1vYmlsZS5wb3B1cCIsICQubW9iaWxlLndpZGdldCwgewoJCW9wdGlvbnM6IHsKCQkJdGhlbWU6IG51bGwsCgkJCW92ZXJsYXlUaGVtZTogbnVsbCwKCQkJc2hhZG93OiB0cnVlLAoJCQljb3JuZXJzOiB0cnVlLAoJCQl0cmFuc2l0aW9uOiAibm9uZSIsCgkJCXBvc2l0aW9uVG86ICJvcmlnaW4iLAoJCQl0b2xlcmFuY2U6IG51bGwsCgkJCWluaXRTZWxlY3RvcjogIjpqcW1EYXRhKHJvbGU9J3BvcHVwJykiLAoJCQljbG9zZUxpbmtTZWxlY3RvcjogImE6anFtRGF0YShyZWw9J2JhY2snKSIsCgkJCWNsb3NlTGlua0V2ZW50czogImNsaWNrLnBvcHVwIiwKCQkJbmF2aWdhdGVFdmVudHM6ICJuYXZpZ2F0ZS5wb3B1cCIsCgkJCWNsb3NlRXZlbnRzOiAibmF2aWdhdGUucG9wdXAgcGFnZWJlZm9yZWNoYW5nZS5wb3B1cCIsCgoJCQkvLyBOT1RFIFdpbmRvd3MgUGhvbmUgNyBoYXMgYSBzY3JvbGwgcG9zaXRpb24gY2FjaGluZyBpc3N1ZSB0aGF0CgkJCS8vICAgICAgcmVxdWlyZXMgdXMgdG8gZGlzYWJsZSBwb3B1cCBoaXN0b3J5IG1hbmFnZW1lbnQgYnkgZGVmYXVsdAoJCQkvLyAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvNDc4NAoJCQkvLwoJCQkvLyBOT1RFIHRoaXMgb3B0aW9uIGlzIG1vZGlmaWVkIGluIF9jcmVhdGUhCgkJCWhpc3Rvcnk6ICEkLm1vYmlsZS5icm93c2VyLmllCgkJfSwKCgkJX2VhdEV2ZW50QW5kQ2xvc2U6IGZ1bmN0aW9uKCBlICkgewoJCQllLnByZXZlbnREZWZhdWx0KCk7CgkJCWUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CgkJCXRoaXMuY2xvc2UoKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0sCgoJCS8vIE1ha2Ugc3VyZSB0aGUgc2NyZWVuIHNpemUgaXMgaW5jcmVhc2VkIGJleW9uZCB0aGUgcGFnZSBoZWlnaHQgaWYgdGhlIHBvcHVwJ3MgY2F1c2VzIHRoZSBkb2N1bWVudCB0byBpbmNyZWFzZSBpbiBoZWlnaHQKCQlfcmVzaXplU2NyZWVuOiBmdW5jdGlvbigpIHsKCQkJdmFyIHBvcHVwSGVpZ2h0ID0gdGhpcy5fdWkuY29udGFpbmVyLm91dGVySGVpZ2h0KCB0cnVlICk7CgoJCQl0aGlzLl91aS5zY3JlZW4ucmVtb3ZlQXR0ciggInN0eWxlIiApOwoJCQlpZiAoIHBvcHVwSGVpZ2h0ID4gdGhpcy5fdWkuc2NyZWVuLmhlaWdodCgpICkgewoJCQkJdGhpcy5fdWkuc2NyZWVuLmhlaWdodCggcG9wdXBIZWlnaHQgKTsKCQkJfQoJCX0sCgoJCV9oYW5kbGVXaW5kb3dLZXlVcDogZnVuY3Rpb24oIGUgKSB7CgkJCWlmICggdGhpcy5faXNPcGVuICYmIGUua2V5Q29kZSA9PT0gJC5tb2JpbGUua2V5Q29kZS5FU0NBUEUgKSB7CgkJCQlyZXR1cm4gdGhpcy5fZWF0RXZlbnRBbmRDbG9zZSggZSApOwoJCQl9CgkJfSwKCgkJX21heWJlUmVmcmVzaFRpbWVvdXQ6IGZ1bmN0aW9uKCkgewoJCQl2YXIgd2luQ29vcmRzID0gd2luZG93Q29vcmRzKCk7CgoJCQlpZiAoIHRoaXMuX3Jlc2l6ZURhdGEgKSB7CgkJCQlpZiAoIHdpbkNvb3Jkcy54ID09PSB0aGlzLl9yZXNpemVEYXRhLndpbkNvb3Jkcy54ICYmCgkJCQkJd2luQ29vcmRzLnkgPT09IHRoaXMuX3Jlc2l6ZURhdGEud2luQ29vcmRzLnkgJiYKCQkJCQl3aW5Db29yZHMuY3ggPT09IHRoaXMuX3Jlc2l6ZURhdGEud2luQ29vcmRzLmN4ICYmCgkJCQkJd2luQ29vcmRzLmN5ID09PSB0aGlzLl9yZXNpemVEYXRhLndpbkNvb3Jkcy5jeSApIHsKCQkJCQkvLyB0aW1lb3V0IG5vdCByZWZyZXNoZWQKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9IGVsc2UgewoJCQkJCS8vIGNsZWFyIGV4aXN0aW5nIHRpbWVvdXQgLSBpdCB3aWxsIGJlIHJlZnJlc2hlZCBiZWxvdwoJCQkJCWNsZWFyVGltZW91dCggdGhpcy5fcmVzaXplRGF0YS50aW1lb3V0SWQgKTsKCQkJCX0KCQkJfQoKCQkJdGhpcy5fcmVzaXplRGF0YSA9IHsKCQkJCXRpbWVvdXRJZDogc2V0VGltZW91dCggJC5wcm94eSggdGhpcywgIl9yZXNpemVUaW1lb3V0IiApLCAyMDAgKSwKCQkJCXdpbkNvb3Jkczogd2luQ29vcmRzCgkJCX07CgoJCQlyZXR1cm4gdHJ1ZTsKCQl9LAoKCQlfcmVzaXplVGltZW91dDogZnVuY3Rpb24oKSB7CgkJCWlmICggIXRoaXMuX21heWJlUmVmcmVzaFRpbWVvdXQoKSApIHsKCQkJCS8vIGVmZmVjdGl2ZWx5IHJhcGlkLW9wZW4gdGhlIHBvcHVwIHdoaWxlIGxlYXZpbmcgdGhlIHNjcmVlbiBpbnRhY3QKCQkJCXRoaXMuX3RyaWdnZXIoICJiZWZvcmVwb3NpdGlvbiIgKTsKCQkJCXRoaXMuX3VpLmNvbnRhaW5lcgoJCQkJCS5yZW1vdmVDbGFzcyggInVpLXNlbGVjdG1lbnUtaGlkZGVuIiApCgkJCQkJLm9mZnNldCggdGhpcy5fcGxhY2VtZW50Q29vcmRzKCB0aGlzLl9kZXNpcmVkQ29vcmRzKCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgIndpbmRvdyIgKSApICk7CgoJCQkJdGhpcy5fcmVzaXplU2NyZWVuKCk7CgkJCQl0aGlzLl9yZXNpemVEYXRhID0gbnVsbDsKCQkJCXRoaXMuX29yaWVudGF0aW9uY2hhbmdlSW5Qcm9ncmVzcyA9IGZhbHNlOwoJCQl9CgkJfSwKCgkJX2hhbmRsZVdpbmRvd1Jlc2l6ZTogZnVuY3Rpb24oIGUgKSB7CgkJCWlmICggdGhpcy5faXNPcGVuICkgewoJCQkJdGhpcy5fbWF5YmVSZWZyZXNoVGltZW91dCgpOwoJCQl9CgkJfSwKCgkJX2hhbmRsZVdpbmRvd09yaWVudGF0aW9uY2hhbmdlOiBmdW5jdGlvbiggZSApIHsKCgkJCWlmICggIXRoaXMuX29yaWVudGF0aW9uY2hhbmdlSW5Qcm9ncmVzcyApIHsKCQkJCS8vIGVmZmVjdGl2ZWx5IHJhcGlkLWNsb3NlIHRoZSBwb3B1cCB3aGlsZSBsZWF2aW5nIHRoZSBzY3JlZW4gaW50YWN0CgkJCQl0aGlzLl91aS5jb250YWluZXIKCQkJCQkuYWRkQ2xhc3MoICJ1aS1zZWxlY3RtZW51LWhpZGRlbiIgKQoJCQkJCS5yZW1vdmVBdHRyKCAic3R5bGUiICk7CgoJCQkJdGhpcy5fb3JpZW50YXRpb25jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTsKCQkJfQoJCX0sCgoJCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCQl2YXIgdWkgPSB7CgkJCQkJc2NyZWVuOiAkKCAiPGRpdiBjbGFzcz0ndWktc2NyZWVuLWhpZGRlbiB1aS1wb3B1cC1zY3JlZW4nPjwvZGl2PiIgKSwKCQkJCQlwbGFjZWhvbGRlcjogJCggIjxkaXYgc3R5bGU9J2Rpc3BsYXk6IG5vbmU7Jz48IS0tIHBsYWNlaG9sZGVyIC0tPjwvZGl2PiIgKSwKCQkJCQljb250YWluZXI6ICQoICI8ZGl2IGNsYXNzPSd1aS1wb3B1cC1jb250YWluZXIgdWktc2VsZWN0bWVudS1oaWRkZW4nPjwvZGl2PiIgKQoJCQkJfSwKCQkJCXRoaXNQYWdlID0gdGhpcy5lbGVtZW50LmNsb3Nlc3QoICIudWktcGFnZSIgKSwKCQkJCW15SWQgPSB0aGlzLmVsZW1lbnQuYXR0ciggImlkIiApLAoJCQkJc2VsZiA9IHRoaXM7CgoJCQkvLyBXZSBuZWVkIHRvIGFkanVzdCB0aGUgaGlzdG9yeSBvcHRpb24gdG8gYmUgZmFsc2UgaWYgdGhlcmUncyBubyBBSkFYIG5hdi4KCQkJLy8gV2UgY2FuJ3QgZG8gaXQgaW4gdGhlIG9wdGlvbiBkZWNsYXJhdGlvbnMgYmVjYXVzZSB0aG9zZSBhcmUgcnVuIGJlZm9yZQoJCQkvLyBpdCBpcyBkZXRlcm1pbmVkIHdoZXRoZXIgdGhlcmUgc2hhbGwgYmUgQUpBWCBuYXYuCgkJCXRoaXMub3B0aW9ucy5oaXN0b3J5ID0gdGhpcy5vcHRpb25zLmhpc3RvcnkgJiYgJC5tb2JpbGUuYWpheEVuYWJsZWQgJiYgJC5tb2JpbGUuaGFzaExpc3RlbmluZ0VuYWJsZWQ7CgoJCQlpZiAoIHRoaXNQYWdlLmxlbmd0aCA9PT0gMCApIHsKCQkJCXRoaXNQYWdlID0gJCggImJvZHkiICk7CgkJCX0KCgkJCS8vIGRlZmluZSB0aGUgY29udGFpbmVyIGZvciBuYXZpZ2F0aW9uIGV2ZW50IGJpbmRpbmdzCgkJCS8vIFRPRE8gdGhpcyB3b3VsZCBiZSBuaWNlIGF0IHRoZSB0aGUgbW9iaWxlIHdpZGdldCBsZXZlbAoJCQl0aGlzLm9wdGlvbnMuY29udGFpbmVyID0gdGhpcy5vcHRpb25zLmNvbnRhaW5lciB8fCAkLm1vYmlsZS5wYWdlQ29udGFpbmVyOwoKCQkJLy8gQXBwbHkgdGhlIHByb3RvCgkJCXRoaXNQYWdlLmFwcGVuZCggdWkuc2NyZWVuICk7CgkJCXVpLmNvbnRhaW5lci5pbnNlcnRBZnRlciggdWkuc2NyZWVuICk7CgkJCS8vIExlYXZlIGEgcGxhY2Vob2xkZXIgd2hlcmUgdGhlIGVsZW1lbnQgdXNlZCB0byBiZQoJCQl1aS5wbGFjZWhvbGRlci5pbnNlcnRBZnRlciggdGhpcy5lbGVtZW50ICk7CgkJCWlmICggbXlJZCApIHsKCQkJCXVpLnNjcmVlbi5hdHRyKCAiaWQiLCBteUlkICsgIi1zY3JlZW4iICk7CgkJCQl1aS5jb250YWluZXIuYXR0ciggImlkIiwgbXlJZCArICItcG9wdXAiICk7CgkJCQl1aS5wbGFjZWhvbGRlci5odG1sKCAiPCEtLSBwbGFjZWhvbGRlciBmb3IgIiArIG15SWQgKyAiIC0tPiIgKTsKCQkJfQoJCQl1aS5jb250YWluZXIuYXBwZW5kKCB0aGlzLmVsZW1lbnQgKTsKCgkJCS8vIEFkZCBjbGFzcyB0byBwb3B1cCBlbGVtZW50CgkJCXRoaXMuZWxlbWVudC5hZGRDbGFzcyggInVpLXBvcHVwIiApOwoKCQkJLy8gRGVmaW5lIGluc3RhbmNlIHZhcmlhYmxlcwoJCQkkLmV4dGVuZCggdGhpcywgewoJCQkJX3BhZ2U6IHRoaXNQYWdlLAoJCQkJX3VpOiB1aSwKCQkJCV9mYWxsYmFja1RyYW5zaXRpb246ICIiLAoJCQkJX2N1cnJlbnRUcmFuc2l0aW9uOiBmYWxzZSwKCQkJCV9wcmVyZXFzOiBudWxsLAoJCQkJX2lzT3BlbjogZmFsc2UsCgkJCQlfdG9sZXJhbmNlOiBudWxsLAoJCQkJX3Jlc2l6ZURhdGE6IG51bGwsCgkJCQlfb3JpZW50YXRpb25jaGFuZ2VJblByb2dyZXNzOiBmYWxzZSwKCQkJCV9nbG9iYWxIYW5kbGVyczogWwoJCQkJCXsKCQkJCQkJc3JjOiAkKCB3aW5kb3cgKSwKCQkJCQkJaGFuZGxlcjogewoJCQkJCQkJb3JpZW50YXRpb25jaGFuZ2U6ICQucHJveHkoIHRoaXMsICJfaGFuZGxlV2luZG93T3JpZW50YXRpb25jaGFuZ2UiICksCgkJCQkJCQlyZXNpemU6ICQucHJveHkoIHRoaXMsICJfaGFuZGxlV2luZG93UmVzaXplIiApLAoJCQkJCQkJa2V5dXA6ICQucHJveHkoIHRoaXMsICJfaGFuZGxlV2luZG93S2V5VXAiICkKCQkJCQkJfQoJCQkJCX0KCQkJCV0KCQkJfSk7CgoJCQkkLmVhY2goIHRoaXMub3B0aW9ucywgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJCQkvLyBDYXVzZSBpbml0aWFsIG9wdGlvbnMgdG8gYmUgYXBwbGllZCBieSB0aGVpciBoYW5kbGVyIGJ5IHRlbXBvcmFyaWx5IHNldHRpbmcgdGhlIG9wdGlvbiB0byB1bmRlZmluZWQKCQkJCS8vIC0gdGhlIGhhbmRsZXIgdGhlbiBzZXRzIGl0IHRvIHRoZSBpbml0aWFsIHZhbHVlCgkJCQlzZWxmLm9wdGlvbnNbIGtleSBdID0gdW5kZWZpbmVkOwoJCQkJc2VsZi5fc2V0T3B0aW9uKCBrZXksIHZhbHVlLCB0cnVlICk7CgkJCX0pOwoKCQkJdWkuc2NyZWVuLmJpbmQoICJ2Y2xpY2siLCAkLnByb3h5KCB0aGlzLCAiX2VhdEV2ZW50QW5kQ2xvc2UiICkgKTsKCgkJCSQuZWFjaCggdGhpcy5fZ2xvYmFsSGFuZGxlcnMsIGZ1bmN0aW9uKCBpZHgsIHZhbHVlICkgewoJCQkJdmFsdWUuc3JjLmJpbmQoIHZhbHVlLmhhbmRsZXIgKTsKCQkJfSk7CgkJfSwKCgkJX2FwcGx5VGhlbWU6IGZ1bmN0aW9uKCBkc3QsIHRoZW1lLCBwcmVmaXggKSB7CgkJCXZhciBjbGFzc2VzID0gKCBkc3QuYXR0ciggImNsYXNzIiApIHx8ICIiKS5zcGxpdCggIiAiICksCgkJCQlhbHJlYWR5QWRkZWQgPSB0cnVlLAoJCQkJY3VycmVudFRoZW1lID0gbnVsbCwKCQkJCW1hdGNoZXMsCgkJCQl0aGVtZVN0ciA9IFN0cmluZyggdGhlbWUgKTsKCgkJCXdoaWxlICggY2xhc3Nlcy5sZW5ndGggPiAwICkgewoJCQkJY3VycmVudFRoZW1lID0gY2xhc3Nlcy5wb3AoKTsKCQkJCW1hdGNoZXMgPSAoIG5ldyBSZWdFeHAoICJedWktIiArIHByZWZpeCArICItKFthLXpdKSQiICkgKS5leGVjKCBjdXJyZW50VGhlbWUgKTsKCQkJCWlmICggbWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+IDEgKSB7CgkJCQkJY3VycmVudFRoZW1lID0gbWF0Y2hlc1sgMSBdOwoJCQkJCWJyZWFrOwoJCQkJfSBlbHNlIHsKCQkJCQljdXJyZW50VGhlbWUgPSBudWxsOwoJCQkJfQoJCQl9CgoJCQlpZiAoIHRoZW1lICE9PSBjdXJyZW50VGhlbWUgKSB7CgkJCQlkc3QucmVtb3ZlQ2xhc3MoICJ1aS0iICsgcHJlZml4ICsgIi0iICsgY3VycmVudFRoZW1lICk7CgkJCQlpZiAoICEgKCB0aGVtZSA9PT0gbnVsbCB8fCB0aGVtZSA9PT0gIm5vbmUiICkgKSB7CgkJCQkJZHN0LmFkZENsYXNzKCAidWktIiArIHByZWZpeCArICItIiArIHRoZW1lU3RyICk7CgkJCQl9CgkJCX0KCQl9LAoKCQlfc2V0VGhlbWU6IGZ1bmN0aW9uKCB2YWx1ZSApIHsKCQkJdGhpcy5fYXBwbHlUaGVtZSggdGhpcy5lbGVtZW50LCB2YWx1ZSwgImJvZHkiICk7CgkJfSwKCgkJX3NldE92ZXJsYXlUaGVtZTogZnVuY3Rpb24oIHZhbHVlICkgewoJCQl0aGlzLl9hcHBseVRoZW1lKCB0aGlzLl91aS5zY3JlZW4sIHZhbHVlLCAib3ZlcmxheSIgKTsKCgkJCWlmICggdGhpcy5faXNPcGVuICkgewoJCQkJdGhpcy5fdWkuc2NyZWVuLmFkZENsYXNzKCAiaW4iICk7CgkJCX0KCQl9LAoKCQlfc2V0U2hhZG93OiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCXRoaXMuZWxlbWVudC50b2dnbGVDbGFzcyggInVpLW92ZXJsYXktc2hhZG93IiwgdmFsdWUgKTsKCQl9LAoKCQlfc2V0Q29ybmVyczogZnVuY3Rpb24oIHZhbHVlICkgewoJCQl0aGlzLmVsZW1lbnQudG9nZ2xlQ2xhc3MoICJ1aS1jb3JuZXItYWxsIiwgdmFsdWUgKTsKCQl9LAoKCQlfYXBwbHlUcmFuc2l0aW9uOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCXRoaXMuX3VpLmNvbnRhaW5lci5yZW1vdmVDbGFzcyggdGhpcy5fZmFsbGJhY2tUcmFuc2l0aW9uICk7CgkJCWlmICggdmFsdWUgJiYgdmFsdWUgIT09ICJub25lIiApIHsKCQkJCXRoaXMuX2ZhbGxiYWNrVHJhbnNpdGlvbiA9ICQubW9iaWxlLl9tYXliZURlZ3JhZGVUcmFuc2l0aW9uKCB2YWx1ZSApOwoJCQkJdGhpcy5fdWkuY29udGFpbmVyLmFkZENsYXNzKCB0aGlzLl9mYWxsYmFja1RyYW5zaXRpb24gKTsKCQkJfQoJCX0sCgoJCV9zZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCWlmICggIXRoaXMuX2N1cnJlbnRUcmFuc2l0aW9uICkgewoJCQkJdGhpcy5fYXBwbHlUcmFuc2l0aW9uKCB2YWx1ZSApOwoJCQl9CgkJfSwKCgkJX3NldFRvbGVyYW5jZTogZnVuY3Rpb24oIHZhbHVlICkgewoJCQl2YXIgdG9sID0geyB0OiAzMCwgcjogMTUsIGI6IDMwLCBsOiAxNSB9OwoKCQkJaWYgKCB2YWx1ZSApIHsKCQkJCXZhciBhciA9IFN0cmluZyggdmFsdWUgKS5zcGxpdCggIiwiICk7CgoJCQkJJC5lYWNoKCBhciwgZnVuY3Rpb24oIGlkeCwgdmFsICkgeyBhclsgaWR4IF0gPSBwYXJzZUludCggdmFsLCAxMCApOyB9ICk7CgoJCQkJc3dpdGNoKCBhci5sZW5ndGggKSB7CgkJCQkJLy8gQWxsIHZhbHVlcyBhcmUgdG8gYmUgdGhlIHNhbWUKCQkJCQljYXNlIDE6CgkJCQkJCWlmICggIWlzTmFOKCBhclsgMCBdICkgKSB7CgkJCQkJCQl0b2wudCA9IHRvbC5yID0gdG9sLmIgPSB0b2wubCA9IGFyWyAwIF07CgkJCQkJCX0KCQkJCQkJYnJlYWs7CgoJCQkJCS8vIFRoZSBmaXJzdCB2YWx1ZSBkZW5vdGVzIHRvcC9ib3R0b20gdG9sZXJhbmNlLCBhbmQgdGhlIHNlY29uZCB2YWx1ZSBkZW5vdGVzIGxlZnQvcmlnaHQgdG9sZXJhbmNlCgkJCQkJY2FzZSAyOgoJCQkJCQlpZiAoICFpc05hTiggYXJbIDAgXSApICkgewoJCQkJCQkJdG9sLnQgPSB0b2wuYiA9IGFyWyAwIF07CgkJCQkJCX0KCQkJCQkJaWYgKCAhaXNOYU4oIGFyWyAxIF0gKSApIHsKCQkJCQkJCXRvbC5sID0gdG9sLnIgPSBhclsgMSBdOwoJCQkJCQl9CgkJCQkJCWJyZWFrOwoKCQkJCQkvLyBUaGUgYXJyYXkgY29udGFpbnMgdmFsdWVzIGluIHRoZSBvcmRlciB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQKCQkJCQljYXNlIDQ6CgkJCQkJCWlmICggIWlzTmFOKCBhclsgMCBdICkgKSB7CgkJCQkJCQl0b2wudCA9IGFyWyAwIF07CgkJCQkJCX0KCQkJCQkJaWYgKCAhaXNOYU4oIGFyWyAxIF0gKSApIHsKCQkJCQkJCXRvbC5yID0gYXJbIDEgXTsKCQkJCQkJfQoJCQkJCQlpZiAoICFpc05hTiggYXJbIDIgXSApICkgewoJCQkJCQkJdG9sLmIgPSBhclsgMiBdOwoJCQkJCQl9CgkJCQkJCWlmICggIWlzTmFOKCBhclsgMyBdICkgKSB7CgkJCQkJCQl0b2wubCA9IGFyWyAzIF07CgkJCQkJCX0KCQkJCQkJYnJlYWs7CgoJCQkJCWRlZmF1bHQ6CgkJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgoJCQl0aGlzLl90b2xlcmFuY2UgPSB0b2w7CgkJfSwKCgkJX3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7CgkJCXZhciBleGNsdXNpb25zLCBzZXR0ZXIgPSAiX3NldCIgKyBrZXkuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSggMSApOwoKCQkJaWYgKCB0aGlzWyBzZXR0ZXIgXSAhPT0gdW5kZWZpbmVkICkgewoJCQkJdGhpc1sgc2V0dGVyIF0oIHZhbHVlICk7CgkJCX0KCgkJCS8vIFRPRE8gUkVNT1ZFIEZPUiAxLjIuMSBieSBtb3ZpbmcgdGhlbSBvdXQgdG8gYSBkZWZhdWx0IG9wdGlvbnMgb2JqZWN0CgkJCWV4Y2x1c2lvbnMgPSBbCgkJCQkiaW5pdFNlbGVjdG9yIiwKCQkJCSJjbG9zZUxpbmtTZWxlY3RvciIsCgkJCQkiY2xvc2VMaW5rRXZlbnRzIiwKCQkJCSJuYXZpZ2F0ZUV2ZW50cyIsCgkJCQkiY2xvc2VFdmVudHMiLAoJCQkJImhpc3RvcnkiLAoJCQkJImNvbnRhaW5lciIKCQkJXTsKCgkJCSQubW9iaWxlLndpZGdldC5wcm90b3R5cGUuX3NldE9wdGlvbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7CgkJCWlmICggJC5pbkFycmF5KCBrZXksIGV4Y2x1c2lvbnMgKSA9PT0gLTEgKSB7CgkJCQkvLyBSZWNvcmQgdGhlIG9wdGlvbiBjaGFuZ2UgaW4gdGhlIG9wdGlvbnMgYW5kIGluIHRoZSBET00gZGF0YS0qIGF0dHJpYnV0ZXMKCQkJCXRoaXMuZWxlbWVudC5hdHRyKCAiZGF0YS0iICsgKCAkLm1vYmlsZS5ucyB8fCAiIiApICsgKCBrZXkucmVwbGFjZSggLyhbQS1aXSkvLCAiLSQxIiApLnRvTG93ZXJDYXNlKCkgKSwgdmFsdWUgKTsKCQkJfQoJCX0sCgoJCS8vIFRyeSBhbmQgY2VudGVyIHRoZSBvdmVybGF5IG92ZXIgdGhlIGdpdmVuIGNvb3JkaW5hdGVzCgkJX3BsYWNlbWVudENvb3JkczogZnVuY3Rpb24oIGRlc2lyZWQgKSB7CgkJCS8vIHJlY3RhbmdsZSB3aXRoaW4gd2hpY2ggdGhlIHBvcHVwIG11c3QgZml0CgkJCXZhcgoJCQkJd2luQ29vcmRzID0gd2luZG93Q29vcmRzKCksCgkJCQlyYyA9IHsKCQkJCQl4OiB0aGlzLl90b2xlcmFuY2UubCwKCQkJCQl5OiB3aW5Db29yZHMueSArIHRoaXMuX3RvbGVyYW5jZS50LAoJCQkJCWN4OiB3aW5Db29yZHMuY3ggLSB0aGlzLl90b2xlcmFuY2UubCAtIHRoaXMuX3RvbGVyYW5jZS5yLAoJCQkJCWN5OiB3aW5Db29yZHMuY3kgLSB0aGlzLl90b2xlcmFuY2UudCAtIHRoaXMuX3RvbGVyYW5jZS5iCgkJCQl9LAoJCQkJbWVudVNpemUsIHJldDsKCgkJCS8vIENsYW1wIHRoZSB3aWR0aCBvZiB0aGUgbWVudSBiZWZvcmUgZ3JhYmJpbmcgaXRzIHNpemUKCQkJdGhpcy5fdWkuY29udGFpbmVyLmNzcyggIm1heC13aWR0aCIsIHJjLmN4ICk7CgkJCW1lbnVTaXplID0gewoJCQkJY3g6IHRoaXMuX3VpLmNvbnRhaW5lci5vdXRlcldpZHRoKCB0cnVlICksCgkJCQljeTogdGhpcy5fdWkuY29udGFpbmVyLm91dGVySGVpZ2h0KCB0cnVlICkKCQkJfTsKCgkJCS8vIENlbnRlciB0aGUgbWVudSBvdmVyIHRoZSBkZXNpcmVkIGNvb3JkaW5hdGVzLCB3aGlsZSBub3QgZ29pbmcgb3V0c2lkZQoJCQkvLyB0aGUgd2luZG93IHRvbGVyYW5jZXMuIFRoaXMgd2lsbCBjZW50ZXIgd3J0LiB0aGUgd2luZG93IGlmIHRoZSBwb3B1cCBpcyB0b28gbGFyZ2UuCgkJCXJldCA9IHsKCQkJCXg6IGZpdFNlZ21lbnRJbnNpZGVTZWdtZW50KCByYy5jeCwgbWVudVNpemUuY3gsIHJjLngsIGRlc2lyZWQueCApLAoJCQkJeTogZml0U2VnbWVudEluc2lkZVNlZ21lbnQoIHJjLmN5LCBtZW51U2l6ZS5jeSwgcmMueSwgZGVzaXJlZC55ICkKCQkJfTsKCgkJCS8vIE1ha2Ugc3VyZSB0aGUgdG9wIG9mIHRoZSBtZW51IGlzIHZpc2libGUKCQkJcmV0LnkgPSBNYXRoLm1heCggMCwgcmV0LnkgKTsKCgkJCS8vIElmIHRoZSBoZWlnaHQgb2YgdGhlIG1lbnUgaXMgc21hbGxlciB0aGFuIHRoZSBoZWlnaHQgb2YgdGhlIGRvY3VtZW50CgkJCS8vIGFsaWduIHRoZSBib3R0b20gd2l0aCB0aGUgYm90dG9tIG9mIHRoZSBkb2N1bWVudAoKCQkJLy8gZml4IGZvciAkKCBkb2N1bWVudCApLmhlaWdodCgpIGJ1ZyBpbiBjb3JlIDEuNy4yLgoJCQl2YXIgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGRvY0JvZHkgPSBkb2N1bWVudC5ib2R5LAoJCQkJZG9jSGVpZ2h0ID0gTWF0aC5tYXgoIGRvY0VsLmNsaWVudEhlaWdodCwgZG9jQm9keS5zY3JvbGxIZWlnaHQsIGRvY0JvZHkub2Zmc2V0SGVpZ2h0LCBkb2NFbC5zY3JvbGxIZWlnaHQsIGRvY0VsLm9mZnNldEhlaWdodCApOwoKCQkJcmV0LnkgLT0gTWF0aC5taW4oIHJldC55LCBNYXRoLm1heCggMCwgcmV0LnkgKyBtZW51U2l6ZS5jeSAtIGRvY0hlaWdodCApICk7CgoJCQlyZXR1cm4geyBsZWZ0OiByZXQueCwgdG9wOiByZXQueSB9OwoJCX0sCgoJCV9jcmVhdGVQcmVyZXFzOiBmdW5jdGlvbiggc2NyZWVuUHJlcmVxLCBjb250YWluZXJQcmVyZXEsIHdoZW5Eb25lICkgewoJCQl2YXIgc2VsZiA9IHRoaXMsIHByZXJlcXM7CgoJCQkvLyBJdCBpcyBpbXBvcnRhbnQgdG8gbWFpbnRhaW4gYm90aCB0aGUgbG9jYWwgdmFyaWFibGUgcHJlcmVxcyBhbmQgc2VsZi5fcHJlcmVxcy4gVGhlIGxvY2FsIHZhcmlhYmxlIHJlbWFpbnMgaW4KCQkJLy8gdGhlIGNsb3N1cmUgb2YgdGhlIGZ1bmN0aW9ucyB3aGljaCBjYWxsIHRoZSBjYWxsYmFja3MgcGFzc2VkIGluLiBUaGUgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZSBsb2NhbCB2YXJpYWJsZSBhbmQKCQkJLy8gc2VsZi5fcHJlcmVxcyBpcyBuZWNlc3NhcnksIGJlY2F1c2Ugb25jZSBhIGZ1bmN0aW9uIGhhcyBiZWVuIHBhc3NlZCB0byAuYW5pbWF0aW9uQ29tcGxldGUoKSBpdCB3aWxsIGJlIGNhbGxlZAoJCQkvLyBuZXh0IHRpbWUgYW4gYW5pbWF0aW9uIGNvbXBsZXRlcywgZXZlbiBpZiB0aGF0J3Mgbm90IHRoZSBhbmltYXRpb24gd2hvc2UgZW5kIHRoZSBmdW5jdGlvbiB3YXMgc3VwcG9zZWQgdG8gY2F0Y2gKCQkJLy8gKGZvciBleGFtcGxlLCBpZiBhbiBhYm9ydCBoYXBwZW5zIGR1cmluZyB0aGUgb3BlbmluZyBhbmltYXRpb24sIHRoZSAuYW5pbWF0aW9uQ29tcGxldGUgaGFuZGxlciBpcyBub3QgY2FsbGVkIGZvcgoJCQkvLyB0aGF0IGFuaW1hdGlvbiBhbnltb3JlLCBidXQgdGhlIGhhbmRsZXIgcmVtYWlucyBhdHRhY2hlZCwgc28gaXQgaXMgY2FsbGVkIHRoZSBuZXh0IHRpbWUgdGhlIHBvcHVwIGlzIG9wZW5lZAoJCQkvLyAtIG1ha2luZyBpdCBzdGFsZS4gQ29tcGFyaW5nIHRoZSBsb2NhbCB2YXJpYWJsZSBwcmVyZXFzIHRvIHRoZSB3aWRnZXQtbGV2ZWwgdmFyaWFibGUgc2VsZi5fcHJlcmVxcyBlbnN1cmVzIHRoYXQKCQkJLy8gY2FsbGJhY2tzIHRyaWdnZXJlZCBieSBhIHN0YWxlIC5hbmltYXRpb25Db21wbGV0ZSB3aWxsIGJlIGlnbm9yZWQuCgoJCQlwcmVyZXFzID0gewoJCQkJc2NyZWVuOiAkLkRlZmVycmVkKCksCgkJCQljb250YWluZXI6ICQuRGVmZXJyZWQoKQoJCQl9OwoKCQkJcHJlcmVxcy5zY3JlZW4udGhlbiggZnVuY3Rpb24oKSB7CgkJCQlpZiAoIHByZXJlcXMgPT09IHNlbGYuX3ByZXJlcXMgKSB7CgkJCQkJc2NyZWVuUHJlcmVxKCk7CgkJCQl9CgkJCX0pOwoKCQkJcHJlcmVxcy5jb250YWluZXIudGhlbiggZnVuY3Rpb24oKSB7CgkJCQlpZiAoIHByZXJlcXMgPT09IHNlbGYuX3ByZXJlcXMgKSB7CgkJCQkJY29udGFpbmVyUHJlcmVxKCk7CgkJCQl9CgkJCX0pOwoKCQkJJC53aGVuKCBwcmVyZXFzLnNjcmVlbiwgcHJlcmVxcy5jb250YWluZXIgKS5kb25lKCBmdW5jdGlvbigpIHsKCQkJCWlmICggcHJlcmVxcyA9PT0gc2VsZi5fcHJlcmVxcyApIHsKCQkJCQlzZWxmLl9wcmVyZXFzID0gbnVsbDsKCQkJCQl3aGVuRG9uZSgpOwoJCQkJfQoJCQl9KTsKCgkJCXNlbGYuX3ByZXJlcXMgPSBwcmVyZXFzOwoJCX0sCgoJCV9hbmltYXRlOiBmdW5jdGlvbiggYXJncyApIHsKCQkJLy8gTk9URSBiZWZvcmUgcmVtb3ZpbmcgdGhlIGRlZmF1bHQgYW5pbWF0aW9uIG9mIHRoZSBzY3JlZW4KCQkJLy8gICAgICB0aGlzIGhhZCBhbiBhbmltYXRlIGNhbGxiYWNrIHRoYXQgd291bGQgcmVsb3ZlIHRoZSBkZWZlcnJlZAoJCQkvLyAgICAgIG5vdyB0aGUgZGVmZXJyZWQgaXMgcmVzb2x2ZWQgaW1tZWRpYXRlbHkKCQkJLy8gVE9ETyByZW1vdmUgdGhlIGRlcGVuZGVuY3kgb24gdGhlIHNjcmVlbiBkZWZlcnJlZAoJCQl0aGlzLl91aS5zY3JlZW4KCQkJCS5yZW1vdmVDbGFzcyggYXJncy5jbGFzc1RvUmVtb3ZlICkKCQkJCS5hZGRDbGFzcyggYXJncy5zY3JlZW5DbGFzc1RvQWRkICk7CgoJCQlhcmdzLnByZXJlcXMuc2NyZWVuLnJlc29sdmUoKTsKCgkJCWlmICggYXJncy50cmFuc2l0aW9uICYmIGFyZ3MudHJhbnNpdGlvbiAhPT0gIm5vbmUiICkgewoJCQkJaWYgKCBhcmdzLmFwcGx5VHJhbnNpdGlvbiApIHsKCQkJCQl0aGlzLl9hcHBseVRyYW5zaXRpb24oIGFyZ3MudHJhbnNpdGlvbiApOwoJCQkJfQoJCQkJdGhpcy5fdWkuY29udGFpbmVyCgkJCQkJLmFuaW1hdGlvbkNvbXBsZXRlKCAkLnByb3h5KCBhcmdzLnByZXJlcXMuY29udGFpbmVyLCAicmVzb2x2ZSIgKSApCgkJCQkJLmFkZENsYXNzKCBhcmdzLmNvbnRhaW5lckNsYXNzVG9BZGQgKQoJCQkJCS5yZW1vdmVDbGFzcyggYXJncy5jbGFzc1RvUmVtb3ZlICk7CgkJCX0gZWxzZSB7CgkJCQlhcmdzLnByZXJlcXMuY29udGFpbmVyLnJlc29sdmUoKTsKCQkJfQoJCX0sCgoJCS8vIFRoZSBkZXNpcmVkIGNvb3JkaW5hdGVzIHBhc3NlZCBpbiB3aWxsIGJlIHJldHVybmVkIHVudG91Y2hlZCBpZiBubyByZWZlcmVuY2UgZWxlbWVudCBjYW4gYmUgaWRlbnRpZmllZCB2aWEKCQkvLyBkZXNpcmVkUG9zaXRpb24ucG9zaXRpb25Uby4gTmV2ZXJ0aGVsZXNzLCB0aGlzIGZ1bmN0aW9uIGVuc3VyZXMgdGhhdCBpdHMgcmV0dXJuIHZhbHVlIGFsd2F5cyBjb250YWlucyB2YWxpZAoJCS8vIHggYW5kIHkgY29vcmRpbmF0ZXMgYnkgc3BlY2lmeWluZyB0aGUgY2VudGVyIG1pZGRsZSBvZiB0aGUgd2luZG93IGlmIHRoZSBjb29yZGluYXRlcyBhcmUgYWJzZW50LgoJCV9kZXNpcmVkQ29vcmRzOiBmdW5jdGlvbiggeCwgeSwgcG9zaXRpb25UbyApIHsKCQkJdmFyIGRzdCA9IG51bGwsIG9mZnNldCwgd2luQ29vcmRzID0gd2luZG93Q29vcmRzKCk7CgoJCQkvLyBFc3RhYmxpc2ggd2hpY2ggZWxlbWVudCB3aWxsIHNlcnZlIGFzIHRoZSByZWZlcmVuY2UKCQkJaWYgKCBwb3NpdGlvblRvICYmIHBvc2l0aW9uVG8gIT09ICJvcmlnaW4iICkgewoJCQkJaWYgKCBwb3NpdGlvblRvID09PSAid2luZG93IiApIHsKCQkJCQl4ID0gd2luQ29vcmRzLmN4IC8gMiArIHdpbkNvb3Jkcy54OwoJCQkJCXkgPSB3aW5Db29yZHMuY3kgLyAyICsgd2luQ29vcmRzLnk7CgkJCQl9IGVsc2UgewoJCQkJCXRyeSB7CgkJCQkJCWRzdCA9ICQoIHBvc2l0aW9uVG8gKTsKCQkJCQl9IGNhdGNoKCBlICkgewoJCQkJCQlkc3QgPSBudWxsOwoJCQkJCX0KCQkJCQlpZiAoIGRzdCApIHsKCQkJCQkJZHN0LmZpbHRlciggIjp2aXNpYmxlIiApOwoJCQkJCQlpZiAoIGRzdC5sZW5ndGggPT09IDAgKSB7CgkJCQkJCQlkc3QgPSBudWxsOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQkvLyBJZiBhbiBlbGVtZW50IHdhcyBmb3VuZCwgY2VudGVyIG92ZXIgaXQKCQkJaWYgKCBkc3QgKSB7CgkJCQlvZmZzZXQgPSBkc3Qub2Zmc2V0KCk7CgkJCQl4ID0gb2Zmc2V0LmxlZnQgKyBkc3Qub3V0ZXJXaWR0aCgpIC8gMjsKCQkJCXkgPSBvZmZzZXQudG9wICsgZHN0Lm91dGVySGVpZ2h0KCkgLyAyOwoJCQl9CgoJCQkvLyBNYWtlIHN1cmUgeCBhbmQgeSBhcmUgdmFsaWQgbnVtYmVycyAtIGNlbnRlciBvdmVyIHRoZSB3aW5kb3cKCQkJaWYgKCAkLnR5cGUoIHggKSAhPT0gIm51bWJlciIgfHwgaXNOYU4oIHggKSApIHsKCQkJCXggPSB3aW5Db29yZHMuY3ggLyAyICsgd2luQ29vcmRzLng7CgkJCX0KCQkJaWYgKCAkLnR5cGUoIHkgKSAhPT0gIm51bWJlciIgfHwgaXNOYU4oIHkgKSApIHsKCQkJCXkgPSB3aW5Db29yZHMuY3kgLyAyICsgd2luQ29vcmRzLnk7CgkJCX0KCgkJCXJldHVybiB7IHg6IHgsIHk6IHkgfTsKCQl9LAoKCQlfb3BlblByZXJlcXNDb21wbGV0ZTogZnVuY3Rpb24oKSB7CgkJCXZhciBzZWxmID0gdGhpczsKCgkJCXNlbGYuX3VpLmNvbnRhaW5lci5hZGRDbGFzcyggInVpLXBvcHVwLWFjdGl2ZSIgKTsKCQkJc2VsZi5faXNPcGVuID0gdHJ1ZTsKCQkJc2VsZi5fcmVzaXplU2NyZWVuKCk7CgoJCQkvLyBBbmRyb2lkIGFwcGVhcnMgdG8gdHJpZ2dlciB0aGUgYW5pbWF0aW9uIGNvbXBsZXRlIGJlZm9yZSB0aGUgcG9wdXAKCQkJLy8gaXMgdmlzaWJsZS4gQWxsb3dpbmcgdGhlIHN0YWNrIHRvIHVud2luZCBiZWZvcmUgYXBwbHlpbmcgZm9jdXMgcHJldmVudHMKCQkJLy8gdGhlICJibHVlIGZsYXNoIiBvZiBlbGVtZW50IGZvY3VzIGluIGFuZHJvaWQgNC4wCgkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKXsKCQkJCXNlbGYuX3VpLmNvbnRhaW5lci5hdHRyKCAidGFiaW5kZXgiLCAiMCIgKS5mb2N1cygpOwoJCQkJc2VsZi5fdHJpZ2dlciggImFmdGVyb3BlbiIgKTsKCQkJfSk7CgkJfSwKCgkJX29wZW46IGZ1bmN0aW9uKCBvcHRpb25zICkgewoJCQl2YXIgY29vcmRzLCB0cmFuc2l0aW9uLAoJCQkJYW5kcm9pZEJsYWNrbGlzdCA9ICggZnVuY3Rpb24oKSB7CgkJCQkJdmFyIHcgPSB3aW5kb3csCgkJCQkJCXVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudCwKCQkJCQkJLy8gUmVuZGVyaW5nIGVuZ2luZSBpcyBXZWJraXQsIGFuZCBjYXB0dXJlIG1ham9yIHZlcnNpb24KCQkJCQkJd2ttYXRjaCA9IHVhLm1hdGNoKCAvQXBwbGVXZWJLaXRcLyhbMC05XC5dKykvICksCgkJCQkJCXdrdmVyc2lvbiA9ICEhd2ttYXRjaCAmJiB3a21hdGNoWyAxIF0sCgkJCQkJCWFuZHJvaWRtYXRjaCA9IHVhLm1hdGNoKCAvQW5kcm9pZCAoXGQrKD86XC5cZCspKS8gKSwKCQkJCQkJYW5kdmVyc2lvbiA9ICEhYW5kcm9pZG1hdGNoICYmIGFuZHJvaWRtYXRjaFsgMSBdLAoJCQkJCQljaHJvbWVtYXRjaCA9IHVhLmluZGV4T2YoICJDaHJvbWUiICkgPiAtMTsKCgkJCQkJLy8gUGxhdGZvcm0gaXMgQW5kcm9pZCwgV2ViS2l0IHZlcnNpb24gaXMgZ3JlYXRlciB0aGFuIDUzNC4xMyAoIEFuZHJvaWQgMy4yLjEgKSBhbmQgbm90IENocm9tZS4KCQkJCQlpZiggYW5kcm9pZG1hdGNoICE9PSBudWxsICYmIGFuZHZlcnNpb24gPT09ICI0LjAiICYmIHdrdmVyc2lvbiAmJiB3a3ZlcnNpb24gPiA1MzQuMTMgJiYgIWNocm9tZW1hdGNoICkgewoJCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQl9CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfSgpKTsKCgkJCS8vIE1ha2Ugc3VyZSBvcHRpb25zIGlzIGRlZmluZWQKCQkJb3B0aW9ucyA9ICggb3B0aW9ucyB8fCB7fSApOwoKCQkJLy8gQ29weSBvdXQgdGhlIHRyYW5zaXRpb24sIGJlY2F1c2Ugd2UgbWF5IGJlIG92ZXJ3cml0aW5nIGl0IGxhdGVyIGFuZCB3ZSBkb24ndCB3YW50IHRvIHBhc3MgdGhhdCBjaGFuZ2UgYmFjayB0byB0aGUgY2FsbGVyCgkJCXRyYW5zaXRpb24gPSBvcHRpb25zLnRyYW5zaXRpb24gfHwgdGhpcy5vcHRpb25zLnRyYW5zaXRpb247CgoJCQkvLyBHaXZlIGFwcGxpY2F0aW9ucyBhIGNoYW5jZSB0byBtb2RpZnkgdGhlIGNvbnRlbnRzIG9mIHRoZSBjb250YWluZXIgYmVmb3JlIGl0IGFwcGVhcnMKCQkJdGhpcy5fdHJpZ2dlciggImJlZm9yZXBvc2l0aW9uIiApOwoKCQkJY29vcmRzID0gdGhpcy5fcGxhY2VtZW50Q29vcmRzKCB0aGlzLl9kZXNpcmVkQ29vcmRzKCBvcHRpb25zLngsIG9wdGlvbnMueSwgb3B0aW9ucy5wb3NpdGlvblRvIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvblRvIHx8ICJvcmlnaW4iICkgKTsKCgkJCS8vIENvdW50IGRvd24gdG8gdHJpZ2dlcmluZyAicG9wdXBhZnRlcm9wZW4iIC0gd2UgaGF2ZSB0d28gcHJlcmVxdWlzaXRlczoKCQkJLy8gMS4gVGhlIHBvcHVwIHdpbmRvdyBhbmltYXRpb24gY29tcGxldGVzIChjb250YWluZXIoKSkKCQkJLy8gMi4gVGhlIHNjcmVlbiBvcGFjaXR5IGFuaW1hdGlvbiBjb21wbGV0ZXMgKHNjcmVlbigpKQoJCQl0aGlzLl9jcmVhdGVQcmVyZXFzKAoJCQkJJC5ub29wLAoJCQkJJC5ub29wLAoJCQkJJC5wcm94eSggdGhpcywgIl9vcGVuUHJlcmVxc0NvbXBsZXRlIiApICk7CgoJCQlpZiAoIHRyYW5zaXRpb24gKSB7CgkJCQl0aGlzLl9jdXJyZW50VHJhbnNpdGlvbiA9IHRyYW5zaXRpb247CgkJCQl0aGlzLl9hcHBseVRyYW5zaXRpb24oIHRyYW5zaXRpb24gKTsKCQkJfSBlbHNlIHsKCQkJCXRyYW5zaXRpb24gPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbjsKCQkJfQoKCQkJaWYgKCAhdGhpcy5vcHRpb25zLnRoZW1lICkgewoJCQkJdGhpcy5fc2V0VGhlbWUoIHRoaXMuX3BhZ2UuanFtRGF0YSggInRoZW1lIiApIHx8ICQubW9iaWxlLmdldEluaGVyaXRlZFRoZW1lKCB0aGlzLl9wYWdlLCAiYyIgKSApOwoJCQl9CgoJCQl0aGlzLl91aS5zY3JlZW4ucmVtb3ZlQ2xhc3MoICJ1aS1zY3JlZW4taGlkZGVuIiApOwoKCQkJdGhpcy5fdWkuY29udGFpbmVyCgkJCQkucmVtb3ZlQ2xhc3MoICJ1aS1zZWxlY3RtZW51LWhpZGRlbiIgKQoJCQkJLm9mZnNldCggY29vcmRzICk7CgoJCQlpZiAoIHRoaXMub3B0aW9ucy5vdmVybGF5VGhlbWUgJiYgYW5kcm9pZEJsYWNrbGlzdCApIHsKCQkJCS8qIFRPRE86CgkJCQlUaGUgbmF0aXZlIGJyb3dzZXIgb24gQW5kcm9pZCA0LjAuWCAoIkljZSBDcmVhbSBTYW5kd2ljaCIpIHN1ZmZlcnMgZnJvbSBhbiBpc3N1ZSB3aGVyZSB0aGUgcG9wdXAgb3ZlcmxheSBhcHBlYXJzIHRvIGJlIHotaW5kZXhlZAoJCQkJYWJvdmUgdGhlIHBvcHVwIGl0c2VsZiB3aGVuIGNlcnRhaW4gb3RoZXIgc3R5bGVzIGV4aXN0IG9uIHRoZSBzYW1lIHBhZ2UgLS0gbmFtZWx5LCBhbnkgZWxlbWVudCBzZXQgdG8gYHBvc2l0aW9uOiBmaXhlZGAgYW5kIGNlcnRhaW4KCQkJCXR5cGVzIG9mIGlucHV0LiBUaGVzZSBpc3N1ZXMgYXJlIHJlbWluaXNjZW50IG9mIHByZXZpb3VzbHkgdW5jb3ZlcmVkIGJ1Z3MgaW4gb2xkZXIgdmVyc2lvbnMgb2YgQW5kcm9pZCdzIG5hdGl2ZSBicm93c2VyOgoJCQkJaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0amVobC9EZXZpY2UtQnVncy9pc3N1ZXMvMwoKCQkJCVRoaXMgZml4IGNsb3NlcyB0aGUgZm9sbG93aW5nIGJ1Z3MgKCBJIHVzZSAiY2xvc2VzIiB3aXRoIHJlbHVjdGFuY2UsIGFuZCBzdHJlc3MgdGhhdCB0aGlzIGlzc3VlIHNob3VsZCBiZSByZXZpc2l0ZWQgYXMgc29vbiBhcyBwb3NzaWJsZSApOgoKCQkJCWh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvNDgxNgoJCQkJaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbW9iaWxlL2lzc3Vlcy80ODQ0CgkJCQlodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS1tb2JpbGUvaXNzdWVzLzQ4NzQKCQkJCSovCgoJCQkJLy8gVE9ETyBzb3J0IG91dCB3aHkgdGhpcy5fcGFnZSBpc24ndCB3b3JraW5nCgkJCQl0aGlzLmVsZW1lbnQuY2xvc2VzdCggIi51aS1wYWdlIiApLmFkZENsYXNzKCAidWktcG9wdXAtb3BlbiIgKTsKCQkJfQoJCQl0aGlzLl9hbmltYXRlKHsKCQkJCWFkZGl0aW9uYWxDb25kaXRpb246IHRydWUsCgkJCQl0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLAoJCQkJY2xhc3NUb1JlbW92ZTogIiIsCgkJCQlzY3JlZW5DbGFzc1RvQWRkOiAiaW4iLAoJCQkJY29udGFpbmVyQ2xhc3NUb0FkZDogImluIiwKCQkJCWFwcGx5VHJhbnNpdGlvbjogZmFsc2UsCgkJCQlwcmVyZXFzOiB0aGlzLl9wcmVyZXFzCgkJCX0pOwoJCX0sCgoJCV9jbG9zZVByZXJlcVNjcmVlbjogZnVuY3Rpb24oKSB7CgkJCXRoaXMuX3VpLnNjcmVlbgoJCQkJLnJlbW92ZUNsYXNzKCAib3V0IiApCgkJCQkuYWRkQ2xhc3MoICJ1aS1zY3JlZW4taGlkZGVuIiApOwoJCX0sCgoJCV9jbG9zZVByZXJlcUNvbnRhaW5lcjogZnVuY3Rpb24oKSB7CgkJCXRoaXMuX3VpLmNvbnRhaW5lcgoJCQkJLnJlbW92ZUNsYXNzKCAicmV2ZXJzZSBvdXQiICkKCQkJCS5hZGRDbGFzcyggInVpLXNlbGVjdG1lbnUtaGlkZGVuIiApCgkJCQkucmVtb3ZlQXR0ciggInN0eWxlIiApOwoJCX0sCgoJCV9jbG9zZVByZXJlcXNEb25lOiBmdW5jdGlvbigpIHsKCQkJdmFyIHNlbGYgPSB0aGlzLCBvcHRzID0gc2VsZi5vcHRpb25zOwoKCQkJc2VsZi5fdWkuY29udGFpbmVyLnJlbW92ZUF0dHIoICJ0YWJpbmRleCIgKTsKCgkJCS8vIHJlbW92ZSBuYXYgYmluZGluZ3MgaWYgdGhleSBhcmUgc3RpbGwgcHJlc2VudAoJCQlvcHRzLmNvbnRhaW5lci51bmJpbmQoIG9wdHMuY2xvc2VFdmVudHMgKTsKCgkJCS8vIHVuYmluZCBjbGljayBoYW5kbGVycyBhZGRlZCB3aGVuIGhpc3RvcnkgaXMgZGlzYWJsZWQKCQkJc2VsZi5lbGVtZW50LnVuZGVsZWdhdGUoIG9wdHMuY2xvc2VMaW5rU2VsZWN0b3IsIG9wdHMuY2xvc2VMaW5rRXZlbnRzICk7CgoJCQkvLyByZW1vdmUgdGhlIGdsb2JhbCBtdXRleCBmb3IgcG9wdXBzCgkJCSQubW9iaWxlLnBvcHVwLmFjdGl2ZSA9IHVuZGVmaW5lZDsKCgkJCS8vIGFsZXJ0IHVzZXJzIHRoYXQgdGhlIHBvcHVwIGlzIGNsb3NlZAoJCQlzZWxmLl90cmlnZ2VyKCAiYWZ0ZXJjbG9zZSIgKTsKCQl9LAoKCQlfY2xvc2U6IGZ1bmN0aW9uKCkgewoJCQl0aGlzLl91aS5jb250YWluZXIucmVtb3ZlQ2xhc3MoICJ1aS1wb3B1cC1hY3RpdmUiICk7CgkJCXRoaXMuX3BhZ2UucmVtb3ZlQ2xhc3MoICJ1aS1wb3B1cC1vcGVuIiApOwoKCQkJdGhpcy5faXNPcGVuID0gZmFsc2U7CgoJCQkvLyBDb3VudCBkb3duIHRvIHRyaWdnZXJpbmcgInBvcHVwYWZ0ZXJjbG9zZSIgLSB3ZSBoYXZlIHR3byBwcmVyZXF1aXNpdGVzOgoJCQkvLyAxLiBUaGUgcG9wdXAgd2luZG93IHJldmVyc2UgYW5pbWF0aW9uIGNvbXBsZXRlcyAoY29udGFpbmVyKCkpCgkJCS8vIDIuIFRoZSBzY3JlZW4gb3BhY2l0eSBhbmltYXRpb24gY29tcGxldGVzIChzY3JlZW4oKSkKCQkJdGhpcy5fY3JlYXRlUHJlcmVxcygKCQkJCSQucHJveHkoIHRoaXMsICJfY2xvc2VQcmVyZXFTY3JlZW4iICksCgkJCQkkLnByb3h5KCB0aGlzLCAiX2Nsb3NlUHJlcmVxQ29udGFpbmVyIiApLAoJCQkJJC5wcm94eSggdGhpcywgIl9jbG9zZVByZXJlcXNEb25lIiApICk7CgoJCQl0aGlzLl9hbmltYXRlKCB7CgkJCQlhZGRpdGlvbmFsQ29uZGl0aW9uOiB0aGlzLl91aS5zY3JlZW4uaGFzQ2xhc3MoICJpbiIgKSwKCQkJCXRyYW5zaXRpb246ICggdGhpcy5fY3VycmVudFRyYW5zaXRpb24gfHwgdGhpcy5vcHRpb25zLnRyYW5zaXRpb24gKSwKCQkJCWNsYXNzVG9SZW1vdmU6ICJpbiIsCgkJCQlzY3JlZW5DbGFzc1RvQWRkOiAib3V0IiwKCQkJCWNvbnRhaW5lckNsYXNzVG9BZGQ6ICJyZXZlcnNlIG91dCIsCgkJCQlhcHBseVRyYW5zaXRpb246IHRydWUsCgkJCQlwcmVyZXFzOiB0aGlzLl9wcmVyZXFzCgkJCX0pOwoJCX0sCgoJCV9kZXN0cm95OiBmdW5jdGlvbigpIHsKCQkJdmFyIHNlbGYgPSB0aGlzOwoKCQkJLy8gaGlkZSBhbmQgcmVtb3ZlIGJpbmRpbmdzCgkJCXNlbGYuX2Nsb3NlKCk7CgoJCQkvLyBQdXQgdGhlIGVsZW1lbnQgYmFjayB0byB3aGVyZSB0aGUgcGxhY2Vob2xkZXIgd2FzIGFuZCByZW1vdmUgdGhlICJ1aS1wb3B1cCIgY2xhc3MKCQkJc2VsZi5fc2V0VGhlbWUoICJub25lIiApOwoJCQlzZWxmLmVsZW1lbnQKCQkJCS5pbnNlcnRBZnRlciggc2VsZi5fdWkucGxhY2Vob2xkZXIgKQoJCQkJLnJlbW92ZUNsYXNzKCAidWktcG9wdXAgdWktb3ZlcmxheS1zaGFkb3cgdWktY29ybmVyLWFsbCIgKTsKCQkJc2VsZi5fdWkuc2NyZWVuLnJlbW92ZSgpOwoJCQlzZWxmLl91aS5jb250YWluZXIucmVtb3ZlKCk7CgkJCXNlbGYuX3VpLnBsYWNlaG9sZGVyLnJlbW92ZSgpOwoKCQkJLy8gVW5iaW5kIGhhbmRsZXJzIHRoYXQgd2VyZSBib3VuZCB0byBlbGVtZW50cyBvdXRzaWRlIHNlbGYuZWxlbWVudCAodGhlIHdpbmRvdywgaW4gc2VsZiBjYXNlKQoJCQkkLmVhY2goIHNlbGYuX2dsb2JhbEhhbmRsZXJzLCBmdW5jdGlvbiggaWR4LCBvbmVTcmMgKSB7CgkJCQkkLmVhY2goIG9uZVNyYy5oYW5kbGVyLCBmdW5jdGlvbiggZXZlbnRUeXBlLCBoYW5kbGVyICkgewoJCQkJCW9uZVNyYy5zcmMudW5iaW5kKCBldmVudFR5cGUsIGhhbmRsZXIgKTsKCQkJCX0pOwoJCQl9KTsKCQl9LAoKCQkvLyBhbnkgbmF2aWdhdGlvbiBldmVudCBhZnRlciBhIHBvcHVwIGlzIG9wZW5lZCBzaG91bGQgY2xvc2UgdGhlIHBvcHVwCgkJLy8gTk9URSB0aGUgcGFnZWJlZm9yZWNoYW5nZSBpcyBib3VuZCB0byBjYXRjaCBuYXZpZ2F0aW9uIGV2ZW50cyB0aGF0IGRvbid0CgkJLy8gICAgICBhbHRlciB0aGUgdXJsIChlZywgZGlhbG9ncyBmcm9tIHBvcHVwcykKCQlfYmluZENvbnRhaW5lckNsb3NlOiBmdW5jdGlvbigpIHsKCQkJdmFyIHNlbGYgPSB0aGlzOwoKCQkJc2VsZi5vcHRpb25zLmNvbnRhaW5lcgoJCQkJLm9uZSggc2VsZi5vcHRpb25zLmNsb3NlRXZlbnRzLCAkLnByb3h5KCBzZWxmLl9jbG9zZSwgc2VsZiApKTsKCQl9LAoKCQkvLyBUT0RPIG5vIGNsZWFyIGRlbGluaWF0aW9uIG9mIHdoYXQgc2hvdWxkIGJlIGhlcmUgYW5kCgkJLy8gd2hhdCBzaG91bGQgYmUgaW4gX29wZW4uIFNlZW1zIHRvIGJlICJ2aXN1YWwiIHZzICJoaXN0b3J5IiBmb3Igbm93CgkJb3BlbjogZnVuY3Rpb24oIG9wdGlvbnMgKSB7CgkJCXZhciBzZWxmID0gdGhpcywgb3B0cyA9IHRoaXMub3B0aW9ucywgdXJsLCBoYXNoa2V5LCBhY3RpdmVQYWdlLCBjdXJyZW50SXNEaWFsb2csIGhhc0hhc2gsIHVybEhpc3Rvcnk7CgoJCQkvLyBtYWtlIHN1cmUgb3BlbiBpcyBpZGVtcG90ZW50CgkJCWlmKCAkLm1vYmlsZS5wb3B1cC5hY3RpdmUgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIHNldCB0aGUgZ2xvYmFsIHBvcHVwIG11dGV4CgkJCSQubW9iaWxlLnBvcHVwLmFjdGl2ZSA9IHRoaXM7CgoJCQkvLyBpZiBoaXN0b3J5IGFsdGVyYXRpb24gaXMgZGlzYWJsZWQgY2xvc2Ugb24gbmF2aWdhdGUgZXZlbnRzCgkJCS8vIGFuZCBsZWF2ZSB0aGUgdXJsIGFzIGlzCgkJCWlmKCAhKCBvcHRzLmhpc3RvcnkgKSApIHsKCQkJCXNlbGYuX29wZW4oIG9wdGlvbnMgKTsKCQkJCXNlbGYuX2JpbmRDb250YWluZXJDbG9zZSgpOwoKCQkJCS8vIFdoZW4gaGlzdG95IGlzIGRpc2FibGVkIHdlIGhhdmUgdG8gZ3JhYiB0aGUgZGF0YS1yZWwKCQkJCS8vIGJhY2sgbGluayBjbGlja3Mgc28gd2UgY2FuIGNsb3NlIHRoZSBwb3B1cCBpbnN0ZWFkIG9mCgkJCQkvLyByZWx5aW5nIG9uIGhpc3RvcnkgdG8gZG8gaXQgZm9yIHVzCgkJCQlzZWxmLmVsZW1lbnQKCQkJCQkuZGVsZWdhdGUoIG9wdHMuY2xvc2VMaW5rU2VsZWN0b3IsIG9wdHMuY2xvc2VMaW5rRXZlbnRzLCBmdW5jdGlvbiggZSApIHsKCQkJCQkJc2VsZi5fY2xvc2UoKTsKCgkJCQkJCS8vIE5PVEUgcHJldmVudCB0aGUgYnJvd3NlciBhbmQgbmF2aWdhdGlvbiBoYW5kbGVycyBmcm9tCgkJCQkJCS8vIHdvcmtpbmcgd2l0aCB0aGUgbGluaydzIHJlbD1iYWNrLiBUaGlzIG1heSBjYXVzZQoJCQkJCQkvLyBpc3N1ZXMgZm9yIGRldmVsb3BlcnMgZXhwZWN0aW5nIHRoZSBldmVudCB0byBidWJibGUKCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCX0pOwoKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gY2FjaGUgc29tZSB2YWx1ZXMgZm9yIG1pbi9yZWFkYWJpbGl0eQoJCQloYXNoa2V5ID0gJC5tb2JpbGUuZGlhbG9nSGFzaEtleTsKCQkJYWN0aXZlUGFnZSA9ICQubW9iaWxlLmFjdGl2ZVBhZ2U7CgkJCWN1cnJlbnRJc0RpYWxvZyA9IGFjdGl2ZVBhZ2UuaXMoICIudWktZGlhbG9nIiApOwoJCQl1cmwgPSAkLm1vYmlsZS51cmxIaXN0b3J5LmdldEFjdGl2ZSgpLnVybDsKCQkJaGFzSGFzaCA9ICggdXJsLmluZGV4T2YoIGhhc2hrZXkgKSA+IC0xICkgJiYgIWN1cnJlbnRJc0RpYWxvZzsKCQkJdXJsSGlzdG9yeSA9ICQubW9iaWxlLnVybEhpc3Rvcnk7CgoJCQlpZiAoIGhhc0hhc2ggKSB7CgkJCQlzZWxmLl9vcGVuKCBvcHRpb25zICk7CgkJCQlzZWxmLl9iaW5kQ29udGFpbmVyQ2xvc2UoKTsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gaWYgdGhlIGN1cnJlbnQgdXJsIGhhcyBubyBkaWFsb2cgaGFzaCBrZXkgcHJvY2VlZCBhcyBub3JtYWwKCQkJLy8gb3RoZXJ3aXNlLCBpZiB0aGUgcGFnZSBpcyBhIGRpYWxvZyBzaW1wbHkgdGFjayBvbiB0aGUgaGFzaCBrZXkKCQkJaWYgKCB1cmwuaW5kZXhPZiggaGFzaGtleSApID09PSAtMSAmJiAhY3VycmVudElzRGlhbG9nICl7CgkJCQl1cmwgPSB1cmwgKyBoYXNoa2V5OwoJCQl9IGVsc2UgewoJCQkJdXJsID0gJC5tb2JpbGUucGF0aC5wYXJzZUxvY2F0aW9uKCkuaGFzaCArIGhhc2hrZXk7CgkJCX0KCgkJCS8vIFRhY2sgb24gYW4gZXh0cmEgaGFzaGtleSBpZiB0aGlzIGlzIHRoZSBmaXJzdCBwYWdlIGFuZCB3ZSd2ZSBqdXN0IHJlY29uc3RydWN0ZWQgdGhlIGluaXRpYWwgaGFzaAoJCQlpZiAoIHVybEhpc3RvcnkuYWN0aXZlSW5kZXggPT09IDAgJiYgdXJsID09PSB1cmxIaXN0b3J5LmluaXRpYWxEc3QgKSB7CgkJCQl1cmwgKz0gaGFzaGtleTsKCQkJfQoKCQkJLy8gc3dhbGxvdyB0aGUgdGhlIGluaXRpYWwgbmF2aWdhdGlvbiBldmVudCwgYW5kIGJpbmQgZm9yIHRoZSBuZXh0CgkJCW9wdHMuY29udGFpbmVyLm9uZSggb3B0cy5uYXZpZ2F0ZUV2ZW50cywgZnVuY3Rpb24oIGUgKSB7CgkJCQllLnByZXZlbnREZWZhdWx0KCk7CgkJCQlzZWxmLl9vcGVuKCBvcHRpb25zICk7CgkJCQlzZWxmLl9iaW5kQ29udGFpbmVyQ2xvc2UoKTsKCQkJfSk7CgoJCQl1cmxIaXN0b3J5Lmlnbm9yZU5leHRIYXNoQ2hhbmdlID0gY3VycmVudElzRGlhbG9nOwoKCQkJLy8gR290dGEgbG92ZSBtZXRob2RzIHdpdGggMW1tIGFyZ3MgOigKCQkJdXJsSGlzdG9yeS5hZGROZXcoIHVybCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgImRpYWxvZyIgKTsKCgkJCS8vIHNldCB0aGUgbmV3IHVybCB3aXRoIChvciB3aXRob3V0KSB0aGUgbmV3IGRpYWxvZyBoYXNoIGtleQoJCQkkLm1vYmlsZS5wYXRoLnNldCggdXJsICk7CgkJfSwKCgkJY2xvc2U6IGZ1bmN0aW9uKCkgewoJCQkvLyBtYWtlIHN1cmUgY2xvc2UgaXMgaWRlbXBvdGVudAoJCQlpZiggISQubW9iaWxlLnBvcHVwLmFjdGl2ZSApewoJCQkJcmV0dXJuOwoJCQl9CgoJCQlpZiggdGhpcy5vcHRpb25zLmhpc3RvcnkgKSB7CgkJCQkkLm1vYmlsZS5iYWNrKCk7CgkJCX0gZWxzZSB7CgkJCQl0aGlzLl9jbG9zZSgpOwoJCQl9CgkJfQoJfSk7CgoKCS8vIFRPRE8gdGhpcyBjYW4gYmUgbW92ZWQgaW5zaWRlIHRoZSB3aWRnZXQKCSQubW9iaWxlLnBvcHVwLmhhbmRsZUxpbmsgPSBmdW5jdGlvbiggJGxpbmsgKSB7CgkJdmFyIGNsb3Nlc3RQYWdlID0gJGxpbmsuY2xvc2VzdCggIjpqcW1EYXRhKHJvbGU9J3BhZ2UnKSIgKSwKCQkJc2NvcGUgPSAoICggY2xvc2VzdFBhZ2UubGVuZ3RoID09PSAwICkgPyAkKCAiYm9keSIgKSA6IGNsb3Nlc3RQYWdlICksCgkJCS8vIE5PVEUgbWFrZSBzdXJlIHRvIGdldCBvbmx5IHRoZSBoYXNoLCBpZTcgKHdwNykgcmV0dXJuIHRoZSBhYnNvbHV0ZSBocmVmCgkJCS8vICAgICAgaW4gdGhpcyBjYXNlIHJ1aW5pbmcgdGhlIGVsZW1lbnQgc2VsZWN0aW9uCgkJCXBvcHVwID0gJCggJC5tb2JpbGUucGF0aC5wYXJzZVVybCgkbGluay5hdHRyKCAiaHJlZiIgKSkuaGFzaCwgc2NvcGVbMF0gKSwKCQkJb2Zmc2V0OwoKCQlpZiAoIHBvcHVwLmRhdGEoICJwb3B1cCIgKSApIHsKCQkJb2Zmc2V0ID0gJGxpbmsub2Zmc2V0KCk7CgkJCXBvcHVwLnBvcHVwKCAib3BlbiIsIHsKCQkJCXg6IG9mZnNldC5sZWZ0ICsgJGxpbmsub3V0ZXJXaWR0aCgpIC8gMiwKCQkJCXk6IG9mZnNldC50b3AgKyAkbGluay5vdXRlckhlaWdodCgpIC8gMiwKCQkJCXRyYW5zaXRpb246ICRsaW5rLmpxbURhdGEoICJ0cmFuc2l0aW9uIiApLAoJCQkJcG9zaXRpb25UbzogJGxpbmsuanFtRGF0YSggInBvc2l0aW9uLXRvIiApLAoJCQkJbGluazogJGxpbmsKCQkJfSk7CgkJfQoKCQkvL3JlbW92ZSBhZnRlciBkZWxheQoJCXNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgewoJCQkkbGluay5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQl9LCAzMDAgKTsKCX07CgoJLy8gVE9ETyBtb3ZlIGluc2lkZSBfY3JlYXRlCgkkKCBkb2N1bWVudCApLmJpbmQoICJwYWdlYmVmb3JlY2hhbmdlIiwgZnVuY3Rpb24oIGUsIGRhdGEgKSB7CgkJaWYgKCBkYXRhLm9wdGlvbnMucm9sZSA9PT0gInBvcHVwIiApIHsKCQkJJC5tb2JpbGUucG9wdXAuaGFuZGxlTGluayggZGF0YS5vcHRpb25zLmxpbmsgKTsKCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCX0KCX0pOwoKCSQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKSAgewoJCSQubW9iaWxlLnBvcHVwLnByb3RvdHlwZS5lbmhhbmNlV2l0aGluKCBlLnRhcmdldCwgdHJ1ZSApOwoJfSk7Cgp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQgKSB7Cgl2YXIJbWV0YSA9ICQoICJtZXRhW25hbWU9dmlld3BvcnRdIiApLAoJCWluaXRpYWxDb250ZW50ID0gbWV0YS5hdHRyKCAiY29udGVudCIgKSwKCQlkaXNhYmxlZFpvb20gPSBpbml0aWFsQ29udGVudCArICIsbWF4aW11bS1zY2FsZT0xLCB1c2VyLXNjYWxhYmxlPW5vIiwKCQllbmFibGVkWm9vbSA9IGluaXRpYWxDb250ZW50ICsgIixtYXhpbXVtLXNjYWxlPTEwLCB1c2VyLXNjYWxhYmxlPXllcyIsCgkJZGlzYWJsZWRJbml0aWFsbHkgPSAvKHVzZXItc2NhbGFibGVbXHNdKj1bXHNdKm5vKXwobWF4aW11bS1zY2FsZVtcc10qPVtcc10qMSlbJCxcc10vLnRlc3QoIGluaXRpYWxDb250ZW50ICk7CgoJJC5tb2JpbGUuem9vbSA9ICQuZXh0ZW5kKCB7fSwgewoJCWVuYWJsZWQ6ICFkaXNhYmxlZEluaXRpYWxseSwKCQlsb2NrZWQ6IGZhbHNlLAoJCWRpc2FibGU6IGZ1bmN0aW9uKCBsb2NrICkgewoJCQlpZiAoICFkaXNhYmxlZEluaXRpYWxseSAmJiAhJC5tb2JpbGUuem9vbS5sb2NrZWQgKSB7CgkJCQltZXRhLmF0dHIoICJjb250ZW50IiwgZGlzYWJsZWRab29tICk7CgkJCQkkLm1vYmlsZS56b29tLmVuYWJsZWQgPSBmYWxzZTsKCQkJCSQubW9iaWxlLnpvb20ubG9ja2VkID0gbG9jayB8fCBmYWxzZTsKCQkJfQoJCX0sCgkJZW5hYmxlOiBmdW5jdGlvbiggdW5sb2NrICkgewoJCQlpZiAoICFkaXNhYmxlZEluaXRpYWxseSAmJiAoICEkLm1vYmlsZS56b29tLmxvY2tlZCB8fCB1bmxvY2sgPT09IHRydWUgKSApIHsKCQkJCW1ldGEuYXR0ciggImNvbnRlbnQiLCBlbmFibGVkWm9vbSApOwoJCQkJJC5tb2JpbGUuem9vbS5lbmFibGVkID0gdHJ1ZTsKCQkJCSQubW9iaWxlLnpvb20ubG9ja2VkID0gZmFsc2U7CgkJCX0KCQl9LAoJCXJlc3RvcmU6IGZ1bmN0aW9uKCkgewoJCQlpZiAoICFkaXNhYmxlZEluaXRpYWxseSApIHsKCQkJCW1ldGEuYXR0ciggImNvbnRlbnQiLCBpbml0aWFsQ29udGVudCApOwoJCQkJJC5tb2JpbGUuem9vbS5lbmFibGVkID0gdHJ1ZTsKCQkJfQoJCX0KCX0pOwoKfSggalF1ZXJ5ICkpOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS50ZXh0aW5wdXQiLCAkLm1vYmlsZS53aWRnZXQsIHsKCW9wdGlvbnM6IHsKCQl0aGVtZTogbnVsbCwKCQkvLyBUaGlzIG9wdGlvbiBkZWZhdWx0cyB0byB0cnVlIG9uIGlPUyBkZXZpY2VzLgoJCXByZXZlbnRGb2N1c1pvb206IC9pUGhvbmV8aVBhZHxpUG9kLy50ZXN0KCBuYXZpZ2F0b3IucGxhdGZvcm0gKSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoICJBcHBsZVdlYktpdCIgKSA+IC0xLAoJCWluaXRTZWxlY3RvcjogImlucHV0W3R5cGU9J3RleHQnXSwgaW5wdXRbdHlwZT0nc2VhcmNoJ10sIDpqcW1EYXRhKHR5cGU9J3NlYXJjaCcpLCBpbnB1dFt0eXBlPSdudW1iZXInXSwgOmpxbURhdGEodHlwZT0nbnVtYmVyJyksIGlucHV0W3R5cGU9J3Bhc3N3b3JkJ10sIGlucHV0W3R5cGU9J2VtYWlsJ10sIGlucHV0W3R5cGU9J3VybCddLCBpbnB1dFt0eXBlPSd0ZWwnXSwgdGV4dGFyZWEsIGlucHV0W3R5cGU9J3RpbWUnXSwgaW5wdXRbdHlwZT0nZGF0ZSddLCBpbnB1dFt0eXBlPSdtb250aCddLCBpbnB1dFt0eXBlPSd3ZWVrJ10sIGlucHV0W3R5cGU9J2RhdGV0aW1lJ10sIGlucHV0W3R5cGU9J2RhdGV0aW1lLWxvY2FsJ10sIGlucHV0W3R5cGU9J2NvbG9yJ10sIGlucHV0Om5vdChbdHlwZV0pIiwKCQljbGVhclNlYXJjaEJ1dHRvblRleHQ6ICJjbGVhciB0ZXh0IiwKCQlkaXNhYmxlZDogZmFsc2UKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCXZhciBzZWxmID0gdGhpcywKCQkJaW5wdXQgPSB0aGlzLmVsZW1lbnQsCgkJCW8gPSB0aGlzLm9wdGlvbnMsCgkJCXRoZW1lID0gby50aGVtZSB8fCAkLm1vYmlsZS5nZXRJbmhlcml0ZWRUaGVtZSggdGhpcy5lbGVtZW50LCAiYyIgKSwKCQkJdGhlbWVjbGFzcyAgPSAiIHVpLWJvZHktIiArIHRoZW1lLAoJCQltaW5pID0gaW5wdXQuanFtRGF0YSggIm1pbmkiICkgPT09IHRydWUsCgkJCW1pbmljbGFzcyA9IG1pbmkgPyAiIHVpLW1pbmkiIDogIiIsCgkJCWZvY3VzZWRFbCwgY2xlYXJidG47CgoJCWZ1bmN0aW9uIHRvZ2dsZUNsZWFyKCkgewoJCQlzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsKCQkJCWNsZWFyYnRuLnRvZ2dsZUNsYXNzKCAidWktaW5wdXQtY2xlYXItaGlkZGVuIiwgIWlucHV0LnZhbCgpICk7CgkJCX0sIDAgKTsKCQl9CgoJCSQoICJsYWJlbFtmb3I9JyIgKyBpbnB1dC5hdHRyKCAiaWQiICkgKyAiJ10iICkuYWRkQ2xhc3MoICJ1aS1pbnB1dC10ZXh0IiApOwoKCQlmb2N1c2VkRWwgPSBpbnB1dC5hZGRDbGFzcygidWktaW5wdXQtdGV4dCB1aS1ib2R5LSIrIHRoZW1lICk7CgoJCS8vIFhYWDogVGVtcG9yYXJ5IHdvcmthcm91bmQgZm9yIGlzc3VlIDc4NSAoQXBwbGUgYnVnIDg5MTA1ODkpLgoJCS8vICAgICAgVHVybiBvZmYgYXV0b2NvcnJlY3QgYW5kIGF1dG9jb21wbGV0ZSBvbiBub24taU9TIDUgZGV2aWNlcwoJCS8vICAgICAgc2luY2UgdGhlIHBvcHVwIHRoZXkgdXNlIGNhbid0IGJlIGRpc21pc3NlZCBieSB0aGUgdXNlci4gTm90ZQoJCS8vICAgICAgdGhhdCB3ZSB0ZXN0IGZvciB0aGUgcHJlc2VuY2Ugb2YgdGhlIGZlYXR1cmUgYnkgbG9va2luZyBmb3IKCQkvLyAgICAgIHRoZSBhdXRvY29ycmVjdCBwcm9wZXJ0eSBvbiB0aGUgaW5wdXQgZWxlbWVudC4gV2UgY3VycmVudGx5CgkJLy8gICAgICBoYXZlIG5vIHRlc3QgZm9yIGlPUyA1IG9yIG5ld2VyIHNvIHdlJ3JlIHRlbXBvcmFyaWx5IHVzaW5nCgkJLy8gICAgICB0aGUgdG91Y2hPdmVyZmxvdyBzdXBwb3J0IGZsYWcgZm9yIGpRTSAxLjAuIFllcywgSSBmZWVsIGRpcnR5LiAtIGpibGFzCgkJaWYgKCB0eXBlb2YgaW5wdXRbMF0uYXV0b2NvcnJlY3QgIT09ICJ1bmRlZmluZWQiICYmICEkLnN1cHBvcnQudG91Y2hPdmVyZmxvdyApIHsKCQkJLy8gU2V0IHRoZSBhdHRyaWJ1dGUgaW5zdGVhZCBvZiB0aGUgcHJvcGVydHkganVzdCBpbiBjYXNlIHRoZXJlCgkJCS8vIGlzIGNvZGUgdGhhdCBhdHRlbXB0cyB0byBtYWtlIG1vZGlmaWNhdGlvbnMgdmlhIEhUTUwuCgkJCWlucHV0WzBdLnNldEF0dHJpYnV0ZSggImF1dG9jb3JyZWN0IiwgIm9mZiIgKTsKCQkJaW5wdXRbMF0uc2V0QXR0cmlidXRlKCAiYXV0b2NvbXBsZXRlIiwgIm9mZiIgKTsKCQl9CgoKCQkvLyJzZWFyY2giIGlucHV0IHdpZGdldAoJCWlmICggaW5wdXQuaXMoICJbdHlwZT0nc2VhcmNoJ10sOmpxbURhdGEodHlwZT0nc2VhcmNoJykiICkgKSB7CgoJCQlmb2N1c2VkRWwgPSBpbnB1dC53cmFwKCAiPGRpdiBjbGFzcz0ndWktaW5wdXQtc2VhcmNoIHVpLXNoYWRvdy1pbnNldCB1aS1idG4tY29ybmVyLWFsbCB1aS1idG4tc2hhZG93IHVpLWljb24tc2VhcmNoZmllbGQiICsgdGhlbWVjbGFzcyArIG1pbmljbGFzcyArICInPjwvZGl2PiIgKS5wYXJlbnQoKTsKCQkJY2xlYXJidG4gPSAkKCAiPGEgaHJlZj0nIycgY2xhc3M9J3VpLWlucHV0LWNsZWFyJyB0aXRsZT0nIiArIG8uY2xlYXJTZWFyY2hCdXR0b25UZXh0ICsgIic+IiArIG8uY2xlYXJTZWFyY2hCdXR0b25UZXh0ICsgIjwvYT4iICkKCQkJCS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCQlpbnB1dAoJCQkJCQkudmFsKCAiIiApCgkJCQkJCS5mb2N1cygpCgkJCQkJCS50cmlnZ2VyKCAiY2hhbmdlIiApOwoJCQkJCWNsZWFyYnRuLmFkZENsYXNzKCAidWktaW5wdXQtY2xlYXItaGlkZGVuIiApOwoJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQl9KQoJCQkJLmFwcGVuZFRvKCBmb2N1c2VkRWwgKQoJCQkJLmJ1dHRvbk1hcmt1cCh7CgkJCQkJaWNvbjogImRlbGV0ZSIsCgkJCQkJaWNvbnBvczogIm5vdGV4dCIsCgkJCQkJY29ybmVyczogdHJ1ZSwKCQkJCQlzaGFkb3c6IHRydWUsCgkJCQkJbWluaTogbWluaQoJCQkJfSk7CgoJCQl0b2dnbGVDbGVhcigpOwoKCQkJaW5wdXQuYmluZCggJ3Bhc3RlIGN1dCBrZXl1cCBmb2N1cyBjaGFuZ2UgYmx1cicsIHRvZ2dsZUNsZWFyICk7CgoJCX0gZWxzZSB7CgkJCWlucHV0LmFkZENsYXNzKCAidWktY29ybmVyLWFsbCB1aS1zaGFkb3ctaW5zZXQiICsgdGhlbWVjbGFzcyArIG1pbmljbGFzcyApOwoJCX0KCgkJaW5wdXQuZm9jdXMoZnVuY3Rpb24oKSB7CgkJCQlmb2N1c2VkRWwuYWRkQ2xhc3MoICQubW9iaWxlLmZvY3VzQ2xhc3MgKTsKCQkJfSkKCQkJLmJsdXIoZnVuY3Rpb24oKSB7CgkJCQlmb2N1c2VkRWwucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmZvY3VzQ2xhc3MgKTsKCQkJfSkKCQkJLy8gSW4gbWFueSBzaXR1YXRpb25zLCBpT1Mgd2lsbCB6b29tIGludG8gdGhlIHNlbGVjdCB1cG9uIHRhcCwgdGhpcyBwcmV2ZW50cyB0aGF0IGZyb20gaGFwcGVuaW5nCgkJCS5iaW5kKCAiZm9jdXMiLCBmdW5jdGlvbigpIHsKCQkJCWlmICggby5wcmV2ZW50Rm9jdXNab29tICkgewoJCQkJCSQubW9iaWxlLnpvb20uZGlzYWJsZSggdHJ1ZSApOwoJCQkJfQoJCQl9KQoJCQkuYmluZCggImJsdXIiLCBmdW5jdGlvbigpIHsKCQkJCWlmICggby5wcmV2ZW50Rm9jdXNab29tICkgewoJCQkJCSQubW9iaWxlLnpvb20uZW5hYmxlKCB0cnVlICk7CgkJCQl9CgkJCX0pOwoKCQkvLyBBdXRvZ3JvdwoJCWlmICggaW5wdXQuaXMoICJ0ZXh0YXJlYSIgKSApIHsKCQkJdmFyIGV4dHJhTGluZUhlaWdodCA9IDE1LAoJCQkJa2V5dXBUaW1lb3V0QnVmZmVyID0gMTAwLAoJCQkJa2V5dXBUaW1lb3V0OwoKCQkJdGhpcy5fa2V5dXAgPSBmdW5jdGlvbigpIHsKCQkJCXZhciBzY3JvbGxIZWlnaHQgPSBpbnB1dFsgMCBdLnNjcm9sbEhlaWdodCwKCQkJCQljbGllbnRIZWlnaHQgPSBpbnB1dFsgMCBdLmNsaWVudEhlaWdodDsKCgkJCQlpZiAoIGNsaWVudEhlaWdodCA8IHNjcm9sbEhlaWdodCApIHsKCQkJCQlpbnB1dC5oZWlnaHQoc2Nyb2xsSGVpZ2h0ICsgZXh0cmFMaW5lSGVpZ2h0KTsKCQkJCX0KCQkJfTsKCgkJCWlucHV0LmtleXVwKGZ1bmN0aW9uKCkgewoJCQkJY2xlYXJUaW1lb3V0KCBrZXl1cFRpbWVvdXQgKTsKCQkJCWtleXVwVGltZW91dCA9IHNldFRpbWVvdXQoIHNlbGYuX2tleXVwLCBrZXl1cFRpbWVvdXRCdWZmZXIgKTsKCQkJfSk7CgoJCQkvLyBiaW5kaW5nIHRvIHBhZ2VjaGFuZ2UgaGVyZSBlbnN1cmVzIHRoYXQgZm9yIHBhZ2VzIGxvYWRlZCB2aWEKCQkJLy8gYWpheCB0aGUgaGVpZ2h0IGlzIHJlY2FsY3VsYXRlZCB3aXRob3V0IHVzZXIgaW5wdXQKCQkJdGhpcy5fb24oICQoZG9jdW1lbnQpLCB7InBhZ2VjaGFuZ2UiOiAiX2tleXVwIiB9KTsKCgkJCS8vIElzc3VlIDUwOTogdGhlIGJyb3dzZXIgaXMgbm90IHByb3ZpZGluZyBzY3JvbGxIZWlnaHQgcHJvcGVybHkgdW50aWwgdGhlIHN0eWxlcyBsb2FkCgkJCWlmICggJC50cmltKCBpbnB1dC52YWwoKSApICkgewoJCQkJLy8gYmluZCB0byB0aGUgd2luZG93IGxvYWQgdG8gbWFrZSBzdXJlIHRoZSBoZWlnaHQgaXMgY2FsY3VsYXRlZCBiYXNlZCBvbiBCT1RICgkJCQkvLyB0aGUgRE9NIGFuZCBDU1MKCQkJCXRoaXMuX29uKCAkKHdpbmRvdyksIHsibG9hZCI6ICJfa2V5dXAifSk7CgkJCX0KCQl9CgkJaWYgKCBpbnB1dC5hdHRyKCAiZGlzYWJsZWQiICkgKSB7CgkJCXRoaXMuZGlzYWJsZSgpOwoJCX0KCX0sCgoJZGlzYWJsZTogZnVuY3Rpb24oKSB7CgkJdmFyICRlbDsKCQlpZiAoIHRoaXMuZWxlbWVudC5hdHRyKCAiZGlzYWJsZWQiLCB0cnVlICkuaXMoICJbdHlwZT0nc2VhcmNoJ10sIDpqcW1EYXRhKHR5cGU9J3NlYXJjaCcpIiApICkgewoJCQkkZWwgPSB0aGlzLmVsZW1lbnQucGFyZW50KCk7CgkJfSBlbHNlIHsKCQkJJGVsID0gdGhpcy5lbGVtZW50OwoJCX0KCQkkZWwuYWRkQ2xhc3MoICJ1aS1kaXNhYmxlZCIgKTsKCQlyZXR1cm4gdGhpcy5fc2V0T3B0aW9uKCAiZGlzYWJsZWQiLCB0cnVlICk7Cgl9LAoKCWVuYWJsZTogZnVuY3Rpb24oKSB7CgkJdmFyICRlbDsKCgkJLy8gVE9ETyB1c2luZyBtb3JlIHRoYW4gb25lIGxpbmUgb2YgY29kZSBpcyBhY2NlcHRhYmxlIDspCgkJaWYgKCB0aGlzLmVsZW1lbnQuYXR0ciggImRpc2FibGVkIiwgZmFsc2UgKS5pcyggIlt0eXBlPSdzZWFyY2gnXSwgOmpxbURhdGEodHlwZT0nc2VhcmNoJykiICkgKSB7CgkJCSRlbCA9IHRoaXMuZWxlbWVudC5wYXJlbnQoKTsKCQl9IGVsc2UgewoJCQkkZWwgPSB0aGlzLmVsZW1lbnQ7CgkJfQoJCSRlbC5yZW1vdmVDbGFzcyggInVpLWRpc2FibGVkIiApOwoJCXJldHVybiB0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIGZhbHNlICk7Cgl9Cn0pOwoKLy9hdXRvIHNlbGYtaW5pdCB3aWRnZXRzCiQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKSB7CgkkLm1vYmlsZS50ZXh0aW5wdXQucHJvdG90eXBlLmVuaGFuY2VXaXRoaW4oIGUudGFyZ2V0LCB0cnVlICk7Cn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLm1vYmlsZS5saXN0dmlldy5wcm90b3R5cGUub3B0aW9ucy5maWx0ZXIgPSBmYWxzZTsKJC5tb2JpbGUubGlzdHZpZXcucHJvdG90eXBlLm9wdGlvbnMuZmlsdGVyUGxhY2Vob2xkZXIgPSAiRmlsdGVyIGl0ZW1zLi4uIjsKJC5tb2JpbGUubGlzdHZpZXcucHJvdG90eXBlLm9wdGlvbnMuZmlsdGVyVGhlbWUgPSAiYyI7Ci8vIFRPRE8gcmVuYW1lIGNhbGxiYWNrL2RlcHJlY2F0ZSBhbmQgZGVmYXVsdCB0byB0aGUgaXRlbSBpdHNlbGYgYXMgdGhlIGZpcnN0IGFyZ3VtZW50CnZhciBkZWZhdWx0RmlsdGVyQ2FsbGJhY2sgPSBmdW5jdGlvbiggdGV4dCwgc2VhcmNoVmFsdWUsIGl0ZW0gKSB7CgkJcmV0dXJuIHRleHQudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoIHNlYXJjaFZhbHVlICkgPT09IC0xOwoJfTsKCiQubW9iaWxlLmxpc3R2aWV3LnByb3RvdHlwZS5vcHRpb25zLmZpbHRlckNhbGxiYWNrID0gZGVmYXVsdEZpbHRlckNhbGxiYWNrOwoKJCggZG9jdW1lbnQgKS5kZWxlZ2F0ZSggIjpqcW1EYXRhKHJvbGU9J2xpc3R2aWV3JykiLCAibGlzdHZpZXdjcmVhdGUiLCBmdW5jdGlvbigpIHsKCgl2YXIgbGlzdCA9ICQoIHRoaXMgKSwKCQlsaXN0dmlldyA9IGxpc3QuZGF0YSggImxpc3R2aWV3IiApOwoKCWlmICggIWxpc3R2aWV3Lm9wdGlvbnMuZmlsdGVyICkgewoJCXJldHVybjsKCX0KCgl2YXIgd3JhcHBlciA9ICQoICI8Zm9ybT4iLCB7CgkJCSJjbGFzcyI6ICJ1aS1saXN0dmlldy1maWx0ZXIgdWktYmFyLSIgKyBsaXN0dmlldy5vcHRpb25zLmZpbHRlclRoZW1lLAoJCQkicm9sZSI6ICJzZWFyY2giCgkJfSksCgkJc2VhcmNoID0gJCggIjxpbnB1dD4iLCB7CgkJCXBsYWNlaG9sZGVyOiBsaXN0dmlldy5vcHRpb25zLmZpbHRlclBsYWNlaG9sZGVyCgkJfSkKCQkuYXR0ciggImRhdGEtIiArICQubW9iaWxlLm5zICsgInR5cGUiLCAic2VhcmNoIiApCgkJLmpxbURhdGEoICJsYXN0dmFsIiwgIiIgKQoJCS5iaW5kKCAia2V5dXAgY2hhbmdlIiwgZnVuY3Rpb24oKSB7CgoJCQl2YXIgJHRoaXMgPSAkKCB0aGlzICksCgkJCQl2YWwgPSB0aGlzLnZhbHVlLnRvTG93ZXJDYXNlKCksCgkJCQlsaXN0SXRlbXMgPSBudWxsLAoJCQkJbGFzdHZhbCA9ICR0aGlzLmpxbURhdGEoICJsYXN0dmFsIiApICsgIiIsCgkJCQljaGlsZEl0ZW1zID0gZmFsc2UsCgkJCQlpdGVtdGV4dCA9ICIiLAoJCQkJaXRlbSwKCQkJCS8vIENoZWNrIGlmIGEgY3VzdG9tIGZpbHRlciBjYWxsYmFjayBhcHBsaWVzCgkJCQlpc0N1c3RvbUZpbHRlckNhbGxiYWNrID0gbGlzdHZpZXcub3B0aW9ucy5maWx0ZXJDYWxsYmFjayAhPT0gZGVmYXVsdEZpbHRlckNhbGxiYWNrOwoKCQkJbGlzdHZpZXcuX3RyaWdnZXIoICJiZWZvcmVmaWx0ZXIiLCAiYmVmb3JlZmlsdGVyIiwgeyBpbnB1dDogdGhpcyB9ICk7CgoJCQkvLyBDaGFuZ2UgdmFsIGFzIGxhc3R2YWwgZm9yIG5leHQgZXhlY3V0aW9uCgkJCSR0aGlzLmpxbURhdGEoICJsYXN0dmFsIiAsIHZhbCApOwoJCQlpZiAoIGlzQ3VzdG9tRmlsdGVyQ2FsbGJhY2sgfHwgdmFsLmxlbmd0aCA8IGxhc3R2YWwubGVuZ3RoIHx8IHZhbC5pbmRleE9mKCBsYXN0dmFsICkgIT09IDAgKSB7CgoJCQkJLy8gQ3VzdG9tIGZpbHRlciBjYWxsYmFjayBhcHBsaWVzIG9yIHJlbW92ZWQgY2hhcnMgb3IgcGFzdGVkIHNvbWV0aGluZyB0b3RhbGx5IGRpZmZlcmVudCwgY2hlY2sgYWxsIGl0ZW1zCgkJCQlsaXN0SXRlbXMgPSBsaXN0LmNoaWxkcmVuKCk7CgkJCX0gZWxzZSB7CgoJCQkJLy8gT25seSBjaGFycyBhZGRlZCwgbm90IHJlbW92ZWQsIG9ubHkgdXNlIHZpc2libGUgc3Vic2V0CgkJCQlsaXN0SXRlbXMgPSBsaXN0LmNoaWxkcmVuKCAiOm5vdCgudWktc2NyZWVuLWhpZGRlbikiICk7CgkJCX0KCgkJCWlmICggdmFsICkgewoKCQkJCS8vIFRoaXMgaGFuZGxlcyBoaWRpbmcgcmVndWxhciByb3dzIHdpdGhvdXQgdGhlIHRleHQgd2Ugc2VhcmNoIGZvcgoJCQkJLy8gYW5kIGFueSBsaXN0IGRpdmlkZXJzIHdpdGhvdXQgcmVndWxhciByb3dzIHNob3duIHVuZGVyIGl0CgoJCQkJZm9yICggdmFyIGkgPSBsaXN0SXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7CgkJCQkJaXRlbSA9ICQoIGxpc3RJdGVtc1sgaSBdICk7CgkJCQkJaXRlbXRleHQgPSBpdGVtLmpxbURhdGEoICJmaWx0ZXJ0ZXh0IiApIHx8IGl0ZW0udGV4dCgpOwoKCQkJCQlpZiAoIGl0ZW0uaXMoICJsaTpqcW1EYXRhKHJvbGU9bGlzdC1kaXZpZGVyKSIgKSApIHsKCgkJCQkJCWl0ZW0udG9nZ2xlQ2xhc3MoICJ1aS1maWx0ZXItaGlkZXF1ZXVlIiAsICFjaGlsZEl0ZW1zICk7CgoJCQkJCQkvLyBOZXcgYnVja2V0IQoJCQkJCQljaGlsZEl0ZW1zID0gZmFsc2U7CgoJCQkJCX0gZWxzZSBpZiAoIGxpc3R2aWV3Lm9wdGlvbnMuZmlsdGVyQ2FsbGJhY2soIGl0ZW10ZXh0LCB2YWwsIGl0ZW0gKSApIHsKCgkJCQkJCS8vbWFyayB0byBiZSBoaWRkZW4KCQkJCQkJaXRlbS50b2dnbGVDbGFzcyggInVpLWZpbHRlci1oaWRlcXVldWUiICwgdHJ1ZSApOwoJCQkJCX0gZWxzZSB7CgoJCQkJCQkvLyBUaGVyZSdzIGEgc2hvd24gaXRlbSBpbiB0aGUgYnVja2V0CgkJCQkJCWNoaWxkSXRlbXMgPSB0cnVlOwoJCQkJCX0KCQkJCX0KCgkJCQkvLyBTaG93IGl0ZW1zLCBub3QgbWFya2VkIHRvIGJlIGhpZGRlbgoJCQkJbGlzdEl0ZW1zCgkJCQkJLmZpbHRlciggIjpub3QoLnVpLWZpbHRlci1oaWRlcXVldWUpIiApCgkJCQkJLnRvZ2dsZUNsYXNzKCAidWktc2NyZWVuLWhpZGRlbiIsIGZhbHNlICk7CgoJCQkJLy8gSGlkZSBpdGVtcywgbWFya2VkIHRvIGJlIGhpZGRlbgoJCQkJbGlzdEl0ZW1zCgkJCQkJLmZpbHRlciggIi51aS1maWx0ZXItaGlkZXF1ZXVlIiApCgkJCQkJLnRvZ2dsZUNsYXNzKCAidWktc2NyZWVuLWhpZGRlbiIsIHRydWUgKQoJCQkJCS50b2dnbGVDbGFzcyggInVpLWZpbHRlci1oaWRlcXVldWUiLCBmYWxzZSApOwoKCQkJfSBlbHNlIHsKCgkJCQkvL2ZpbHRlcnZhbHVlIGlzIGVtcHR5ID0+IHNob3cgYWxsCgkJCQlsaXN0SXRlbXMudG9nZ2xlQ2xhc3MoICJ1aS1zY3JlZW4taGlkZGVuIiwgZmFsc2UgKTsKCQkJfQoJCQlsaXN0dmlldy5fcmVmcmVzaENvcm5lcnMoKTsKCQl9KQoJCS5hcHBlbmRUbyggd3JhcHBlciApCgkJLnRleHRpbnB1dCgpOwoKCWlmICggbGlzdHZpZXcub3B0aW9ucy5pbnNldCApIHsKCQl3cmFwcGVyLmFkZENsYXNzKCAidWktbGlzdHZpZXctZmlsdGVyLWluc2V0IiApOwoJfQoKCXdyYXBwZXIuYmluZCggInN1Ym1pdCIsIGZ1bmN0aW9uKCkgewoJCXJldHVybiBmYWxzZTsKCX0pCgkuaW5zZXJ0QmVmb3JlKCBsaXN0ICk7Cn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS5zbGlkZXIiLCAkLm1vYmlsZS53aWRnZXQsIHsKCXdpZGdldEV2ZW50UHJlZml4OiAic2xpZGUiLAoKCW9wdGlvbnM6IHsKCQl0aGVtZTogbnVsbCwKCQl0cmFja1RoZW1lOiBudWxsLAoJCWRpc2FibGVkOiBmYWxzZSwKCQlpbml0U2VsZWN0b3I6ICJpbnB1dFt0eXBlPSdyYW5nZSddLCA6anFtRGF0YSh0eXBlPSdyYW5nZScpLCA6anFtRGF0YShyb2xlPSdzbGlkZXInKSIsCgkJbWluaTogZmFsc2UKCX0sCgoJX2NyZWF0ZTogZnVuY3Rpb24oKSB7CgoJCS8vIFRPRE86IEVhY2ggb2YgdGhlc2Ugc2hvdWxkIGhhdmUgY29tbWVudHMgZXhwbGFpbiB3aGF0IHRoZXkncmUgZm9yCgkJdmFyIHNlbGYgPSB0aGlzLAoKCQkJY29udHJvbCA9IHRoaXMuZWxlbWVudCwKCgkJCXBhcmVudFRoZW1lID0gJC5tb2JpbGUuZ2V0SW5oZXJpdGVkVGhlbWUoIGNvbnRyb2wsICJjIiApLAoKCQkJdGhlbWUgPSB0aGlzLm9wdGlvbnMudGhlbWUgfHwgcGFyZW50VGhlbWUsCgoJCQl0cmFja1RoZW1lID0gdGhpcy5vcHRpb25zLnRyYWNrVGhlbWUgfHwgcGFyZW50VGhlbWUsCgoJCQljVHlwZSA9IGNvbnRyb2xbIDAgXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLAoKCQkJc2VsZWN0Q2xhc3MgPSAoIGNUeXBlID09PSAic2VsZWN0IiApID8gInVpLXNsaWRlci1zd2l0Y2giIDogIiIsCgoJCQljb250cm9sSUQgPSBjb250cm9sLmF0dHIoICJpZCIgKSwKCgkJCSRsYWJlbCA9ICQoICJbZm9yPSciICsgY29udHJvbElEICsgIiddIiApLAoKCQkJbGFiZWxJRCA9ICRsYWJlbC5hdHRyKCAiaWQiICkgfHwgY29udHJvbElEICsgIi1sYWJlbCIsCgoJCQlsYWJlbCA9ICRsYWJlbC5hdHRyKCAiaWQiLCBsYWJlbElEICksCgoJCQl2YWwgPSBmdW5jdGlvbigpIHsKCQkJCXJldHVybiAgY1R5cGUgPT09ICJpbnB1dCIgID8gcGFyc2VGbG9hdCggY29udHJvbC52YWwoKSApIDogY29udHJvbFswXS5zZWxlY3RlZEluZGV4OwoJCQl9LAoKCQkJbWluID0gIGNUeXBlID09PSAiaW5wdXQiID8gcGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAibWluIiApICkgOiAwLAoKCQkJbWF4ID0gIGNUeXBlID09PSAiaW5wdXQiID8gcGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAibWF4IiApICkgOiBjb250cm9sLmZpbmQoICJvcHRpb24iICkubGVuZ3RoLTEsCgoJCQlzdGVwID0gd2luZG93LnBhcnNlRmxvYXQoIGNvbnRyb2wuYXR0ciggInN0ZXAiICkgfHwgMSApLAoKCQkJaW5saW5lQ2xhc3MgPSAoIHRoaXMub3B0aW9ucy5pbmxpbmUgfHwgY29udHJvbC5qcW1EYXRhKCAiaW5saW5lIiApID09PSB0cnVlICkgPyAiIHVpLXNsaWRlci1pbmxpbmUiIDogIiIsCgoJCQltaW5pQ2xhc3MgPSAoIHRoaXMub3B0aW9ucy5taW5pIHx8IGNvbnRyb2wuanFtRGF0YSggIm1pbmkiICkgKSA/ICIgdWktc2xpZGVyLW1pbmkiIDogIiIsCgoKCQkJZG9tSGFuZGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2EnICksCgkJCWhhbmRsZSA9ICQoIGRvbUhhbmRsZSApLAoJCQlkb21TbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApLAoJCQlzbGlkZXIgPSAkKCBkb21TbGlkZXIgKSwKCgkJCXZhbHVlYmcgPSBjb250cm9sLmpxbURhdGEoICJoaWdobGlnaHQiICkgJiYgY1R5cGUgIT09ICJzZWxlY3QiID8gKGZ1bmN0aW9uKCkgewoJCQkJdmFyIGJnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgkJCQliZy5jbGFzc05hbWUgPSAndWktc2xpZGVyLWJnICcgKyAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyArICcgdWktYnRuLWNvcm5lci1hbGwnOwoJCQkJcmV0dXJuICQoIGJnICkucHJlcGVuZFRvKCBzbGlkZXIgKTsKCQkJfSkoKSA6IGZhbHNlLAoKCQkJb3B0aW9uczsKCgkJdGhpcy5fdHlwZSA9IGNUeXBlOwoKCQlkb21IYW5kbGUuc2V0QXR0cmlidXRlKCAnaHJlZicsICIjIiApOwoJCWRvbVNsaWRlci5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCdhcHBsaWNhdGlvbicpOwoJCWRvbVNsaWRlci5jbGFzc05hbWUgPSBbJ3VpLXNsaWRlciAnLHNlbGVjdENsYXNzLCIgdWktYnRuLWRvd24tIix0cmFja1RoZW1lLCcgdWktYnRuLWNvcm5lci1hbGwnLCBpbmxpbmVDbGFzcywgbWluaUNsYXNzXS5qb2luKCAiIiApOwoJCWRvbUhhbmRsZS5jbGFzc05hbWUgPSAndWktc2xpZGVyLWhhbmRsZSc7CgkJZG9tU2xpZGVyLmFwcGVuZENoaWxkKCBkb21IYW5kbGUgKTsKCgkJaGFuZGxlLmJ1dHRvbk1hcmt1cCh7IGNvcm5lcnM6IHRydWUsIHRoZW1lOiB0aGVtZSwgc2hhZG93OiB0cnVlIH0pCgkJCQkuYXR0cih7CgkJCQkJInJvbGUiOiAic2xpZGVyIiwKCQkJCQkiYXJpYS12YWx1ZW1pbiI6IG1pbiwKCQkJCQkiYXJpYS12YWx1ZW1heCI6IG1heCwKCQkJCQkiYXJpYS12YWx1ZW5vdyI6IHZhbCgpLAoJCQkJCSJhcmlhLXZhbHVldGV4dCI6IHZhbCgpLAoJCQkJCSJ0aXRsZSI6IHZhbCgpLAoJCQkJCSJhcmlhLWxhYmVsbGVkYnkiOiBsYWJlbElECgkJCQl9KTsKCgkJJC5leHRlbmQoIHRoaXMsIHsKCQkJc2xpZGVyOiBzbGlkZXIsCgkJCWhhbmRsZTogaGFuZGxlLAoJCQl2YWx1ZWJnOiB2YWx1ZWJnLAoJCQlkcmFnZ2luZzogZmFsc2UsCgkJCWJlZm9yZVN0YXJ0OiBudWxsLAoJCQl1c2VyTW9kaWZpZWQ6IGZhbHNlLAoJCQltb3VzZU1vdmVkOiBmYWxzZQoJCX0pOwoKCQlpZiAoIGNUeXBlID09PSAic2VsZWN0IiApIHsKCQkJdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCQkJd3JhcHBlci5jbGFzc05hbWUgPSAndWktc2xpZGVyLWlubmVyb2Zmc2V0JzsKCgkJCWZvciAoIHZhciBqID0gMCxsZW5ndGggPSBkb21TbGlkZXIuY2hpbGROb2Rlcy5sZW5ndGg7aiA8IGxlbmd0aDtqKysgKSB7CgkJCQl3cmFwcGVyLmFwcGVuZENoaWxkKCBkb21TbGlkZXIuY2hpbGROb2Rlc1tqXSApOwoJCQl9CgoJCQlkb21TbGlkZXIuYXBwZW5kQ2hpbGQoIHdyYXBwZXIgKTsKCgkJCS8vIHNsaWRlci53cmFwSW5uZXIoICI8ZGl2IGNsYXNzPSd1aS1zbGlkZXItaW5uZXJvZmZzZXQnPjwvZGl2PiIgKTsKCgkJCS8vIG1ha2UgdGhlIGhhbmRsZSBtb3ZlIHdpdGggYSBzbW9vdGggdHJhbnNpdGlvbgoJCQloYW5kbGUuYWRkQ2xhc3MoICJ1aS1zbGlkZXItaGFuZGxlLXNuYXBwaW5nIiApOwoKCQkJb3B0aW9ucyA9IGNvbnRyb2wuZmluZCggIm9wdGlvbiIgKTsKCgkJCWZvciAoIHZhciBpID0gMCwgb3B0aW9uc0NvdW50ID0gb3B0aW9ucy5sZW5ndGg7IGkgPCBvcHRpb25zQ291bnQ7IGkrKyApIHsKCQkJCXZhciBzaWRlID0gIWkgPyAiYiIgOiAiYSIsCgkJCQkJc2xpZGVyVGhlbWUgPSAhaSA/ICIgdWktYnRuLWRvd24tIiArIHRyYWNrVGhlbWUgOiAoICIgIiArICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICksCgkJCQkJc2xpZGVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApLAoJCQkJCXNsaWRlckltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdzcGFuJyApOwoKCQkJCXNsaWRlckltZy5jbGFzc05hbWUgPSBbJ3VpLXNsaWRlci1sYWJlbCB1aS1zbGlkZXItbGFiZWwtJyxzaWRlLHNsaWRlclRoZW1lLCIgdWktYnRuLWNvcm5lci1hbGwiXS5qb2luKCAiIiApOwoJCQkJc2xpZGVySW1nLnNldEF0dHJpYnV0ZSgncm9sZScsJ2ltZycpOwoJCQkJc2xpZGVySW1nLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSggb3B0aW9uc1tpXS5pbm5lckhUTUwgKSApOwoJCQkJJChzbGlkZXJJbWcpLnByZXBlbmRUbyggc2xpZGVyICk7CgkJCX0KCgkJCXNlbGYuX2xhYmVscyA9ICQoICIudWktc2xpZGVyLWxhYmVsIiwgc2xpZGVyICk7CgoJCX0KCgkJbGFiZWwuYWRkQ2xhc3MoICJ1aS1zbGlkZXIiICk7CgoJCS8vIG1vbml0b3IgdGhlIGlucHV0IGZvciB1cGRhdGVkIHZhbHVlcwoJCWNvbnRyb2wuYWRkQ2xhc3MoIGNUeXBlID09PSAiaW5wdXQiID8gInVpLXNsaWRlci1pbnB1dCIgOiAidWktc2xpZGVyLXN3aXRjaCIgKQoJCQkuY2hhbmdlKGZ1bmN0aW9uKCkgewoJCQkJLy8gaWYgdGhlIHVzZXIgZHJhZ2dlZCB0aGUgaGFuZGxlLCB0aGUgImNoYW5nZSIgZXZlbnQgd2FzIHRyaWdnZXJlZCBmcm9tIGluc2lkZSByZWZyZXNoKCk7IGRvbid0IGNhbGwgcmVmcmVzaCgpIGFnYWluCgkJCQlpZiAoICFzZWxmLm1vdXNlTW92ZWQgKSB7CgkJCQkJc2VsZi5yZWZyZXNoKCB2YWwoKSwgdHJ1ZSApOwoJCQkJfQoJCQl9KQoJCQkua2V5dXAoZnVuY3Rpb24oKSB7IC8vIG5lY2Vzc2FyeT8KCQkJCXNlbGYucmVmcmVzaCggdmFsKCksIHRydWUsIHRydWUgKTsKCQkJfSkKCQkJLmJsdXIoZnVuY3Rpb24oKSB7CgkJCQlzZWxmLnJlZnJlc2goIHZhbCgpLCB0cnVlICk7CgkJCX0pOwoKCQl0aGlzLl9wcmV2ZW50RG9jdW1lbnREcmFnID0gZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkvLyBOT1RFOiB3ZSBkb24ndCBkbyB0aGlzIGluIHJlZnJlc2ggYmVjYXVzZSB3ZSBzdGlsbCB3YW50IHRvCgkJCS8vICAgICAgIHN1cHBvcnQgcHJvZ3JhbW1hdGljIGFsdGVyYXRpb24gb2YgZGlzYWJsZWQgaW5wdXRzCgkJCWlmICggc2VsZi5kcmFnZ2luZyAmJiAhc2VsZi5vcHRpb25zLmRpc2FibGVkICkgewoKCQkJCS8vIHNlbGYubW91c2VNb3ZlZCBtdXN0IGJlIHVwZGF0ZWQgYmVmb3JlIHJlZnJlc2goKSBiZWNhdXNlIGl0IHdpbGwgYmUgdXNlZCBpbiB0aGUgY29udHJvbCAiY2hhbmdlIiBldmVudAoJCQkJc2VsZi5tb3VzZU1vdmVkID0gdHJ1ZTsKCgkJCQlpZiAoIGNUeXBlID09PSAic2VsZWN0IiApIHsKCQkJCQkvLyBtYWtlIHRoZSBoYW5kbGUgbW92ZSBpbiBzeW5jIHdpdGggdGhlIG1vdXNlCgkJCQkJaGFuZGxlLnJlbW92ZUNsYXNzKCAidWktc2xpZGVyLWhhbmRsZS1zbmFwcGluZyIgKTsKCQkJCX0KCgkJCQlzZWxmLnJlZnJlc2goIGV2ZW50ICk7CgoJCQkJLy8gb25seSBhZnRlciByZWZyZXNoKCkgeW91IGNhbiBjYWxjdWxhdGUgc2VsZi51c2VyTW9kaWZpZWQKCQkJCXNlbGYudXNlck1vZGlmaWVkID0gc2VsZi5iZWZvcmVTdGFydCAhPT0gY29udHJvbFswXS5zZWxlY3RlZEluZGV4OwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfQoKCQl0aGlzLl9vbiggJCggZG9jdW1lbnQgKSwgeyAidm1vdXNlbW92ZSI6IHRoaXMuX3ByZXZlbnREb2N1bWVudERyYWcgfSk7CgoJCS8vIGl0IGFwcGVhcnMgdGhlIGNsaWNraW5nIHRoZSB1cCBhbmQgZG93biBidXR0b25zIGluIGNocm9tZSBvbgoJCS8vIHJhbmdlL251bWJlciBpbnB1dHMgZG9lc24ndCB0cmlnZ2VyIGEgY2hhbmdlIHVudGlsIHRoZSBmaWVsZCBpcwoJCS8vIGJsdXJyZWQuIEhlcmUgd2UgY2hlY2sgdGhpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQgYW5kIHJlZnJlc2gKCQljb250cm9sLmJpbmQoICJ2bW91c2V1cCIsICQucHJveHkoIHNlbGYuX2NoZWNrZWRSZWZyZXNoLCBzZWxmKSk7CgoJCXNsaWRlci5iaW5kKCAidm1vdXNlZG93biIsIGZ1bmN0aW9uKCBldmVudCApIHsKCQkJLy8gTk9URTogd2UgZG9uJ3QgZG8gdGhpcyBpbiByZWZyZXNoIGJlY2F1c2Ugd2Ugc3RpbGwgd2FudCB0bwoJCQkvLyAgICAgICBzdXBwb3J0IHByb2dyYW1tYXRpYyBhbHRlcmF0aW9uIG9mIGRpc2FibGVkIGlucHV0cwoJCQlpZiAoIHNlbGYub3B0aW9ucy5kaXNhYmxlZCApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJc2VsZi5kcmFnZ2luZyA9IHRydWU7CgkJCXNlbGYudXNlck1vZGlmaWVkID0gZmFsc2U7CgkJCXNlbGYubW91c2VNb3ZlZCA9IGZhbHNlOwoKCQkJaWYgKCBjVHlwZSA9PT0gInNlbGVjdCIgKSB7CgkJCQlzZWxmLmJlZm9yZVN0YXJ0ID0gY29udHJvbFswXS5zZWxlY3RlZEluZGV4OwoJCQl9CgoJCQlzZWxmLnJlZnJlc2goIGV2ZW50ICk7CgkJCXNlbGYuX3RyaWdnZXIoICJzdGFydCIgKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0pCgkJLmJpbmQoICJ2Y2xpY2siLCBmYWxzZSApOwoKCQl0aGlzLl9zbGlkZXJNb3VzZVVwID0gZnVuY3Rpb24oKSB7CgkJCWlmICggc2VsZi5kcmFnZ2luZyApIHsKCQkJCXNlbGYuZHJhZ2dpbmcgPSBmYWxzZTsKCgkJCQlpZiAoIGNUeXBlID09PSAic2VsZWN0IikgewoJCQkJCS8vIG1ha2UgdGhlIGhhbmRsZSBtb3ZlIHdpdGggYSBzbW9vdGggdHJhbnNpdGlvbgoJCQkJCWhhbmRsZS5hZGRDbGFzcyggInVpLXNsaWRlci1oYW5kbGUtc25hcHBpbmciICk7CgoJCQkJCWlmICggc2VsZi5tb3VzZU1vdmVkICkgewoJCQkJCQkvLyB0aGlzIGlzIGEgZHJhZywgY2hhbmdlIHRoZSB2YWx1ZSBvbmx5IGlmIHVzZXIgZHJhZ2dlZCBlbm91Z2gKCQkJCQkJaWYgKCBzZWxmLnVzZXJNb2RpZmllZCApIHsKCQkJCQkJICAgIHNlbGYucmVmcmVzaCggc2VsZi5iZWZvcmVTdGFydCA9PT0gMCA/IDEgOiAwICk7CgkJCQkJCX0KCQkJCQkJZWxzZSB7CgkJCQkJCSAgICBzZWxmLnJlZnJlc2goIHNlbGYuYmVmb3JlU3RhcnQgKTsKCQkJCQkJfQoJCQkJCX0KCQkJCQllbHNlIHsKCQkJCQkJLy8gdGhpcyBpcyBqdXN0IGEgY2xpY2ssIGNoYW5nZSB0aGUgdmFsdWUKCQkJCQkJc2VsZi5yZWZyZXNoKCBzZWxmLmJlZm9yZVN0YXJ0ID09PSAwID8gMSA6IDAgKTsKCQkJCQl9CgkJCQl9CgoJCQkJc2VsZi5tb3VzZU1vdmVkID0gZmFsc2U7CgkJCQlzZWxmLl90cmlnZ2VyKCAic3RvcCIgKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX07CgoJCXRoaXMuX29uKCBzbGlkZXIuYWRkKCBkb2N1bWVudCApLCB7ICJ2bW91c2V1cCI6IHRoaXMuX3NsaWRlck1vdXNlVXAgfSk7CgkJc2xpZGVyLmluc2VydEFmdGVyKCBjb250cm9sICk7CgoJCS8vIE9ubHkgYWRkIGZvY3VzIGNsYXNzIHRvIHRvZ2dsZSBzd2l0Y2gsIHNsaWRlcnMgZ2V0IGl0IGF1dG9tYXRpY2FsbHkgZnJvbSB1aS1idG4KCQlpZiAoIGNUeXBlID09PSAnc2VsZWN0JyApIHsKCQkJdGhpcy5oYW5kbGUuYmluZCh7CgkJCQlmb2N1czogZnVuY3Rpb24oKSB7CgkJCQkJc2xpZGVyLmFkZENsYXNzKCAkLm1vYmlsZS5mb2N1c0NsYXNzICk7CgkJCQl9LAoKCQkJCWJsdXI6IGZ1bmN0aW9uKCkgewoJCQkJCXNsaWRlci5yZW1vdmVDbGFzcyggJC5tb2JpbGUuZm9jdXNDbGFzcyApOwoJCQkJfQoJCQl9KTsKCQl9CgoJCXRoaXMuaGFuZGxlLmJpbmQoewoJCQkvLyBOT1RFIGZvcmNlIGZvY3VzIG9uIGhhbmRsZQoJCQl2bW91c2Vkb3duOiBmdW5jdGlvbigpIHsKCQkJCSQoIHRoaXMgKS5mb2N1cygpOwoJCQl9LAoKCQkJdmNsaWNrOiBmYWxzZSwKCgkJCWtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCXZhciBpbmRleCA9IHZhbCgpOwoKCQkJCWlmICggc2VsZi5vcHRpb25zLmRpc2FibGVkICkgewoJCQkJCXJldHVybjsKCQkJCX0KCgkJCQkvLyBJbiBhbGwgY2FzZXMgcHJldmVudCB0aGUgZGVmYXVsdCBhbmQgbWFyayB0aGUgaGFuZGxlIGFzIGFjdGl2ZQoJCQkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQkJCQljYXNlICQubW9iaWxlLmtleUNvZGUuSE9NRToKCQkJCQljYXNlICQubW9iaWxlLmtleUNvZGUuRU5EOgoJCQkJCWNhc2UgJC5tb2JpbGUua2V5Q29kZS5QQUdFX1VQOgoJCQkJCWNhc2UgJC5tb2JpbGUua2V5Q29kZS5QQUdFX0RPV046CgkJCQkJY2FzZSAkLm1vYmlsZS5rZXlDb2RlLlVQOgoJCQkJCWNhc2UgJC5tb2JpbGUua2V5Q29kZS5SSUdIVDoKCQkJCQljYXNlICQubW9iaWxlLmtleUNvZGUuRE9XTjoKCQkJCQljYXNlICQubW9iaWxlLmtleUNvZGUuTEVGVDoKCQkJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCgkJCQkJCWlmICggIXNlbGYuX2tleVNsaWRpbmcgKSB7CgkJCQkJCQlzZWxmLl9rZXlTbGlkaW5nID0gdHJ1ZTsKCQkJCQkJCSQoIHRoaXMgKS5hZGRDbGFzcyggInVpLXN0YXRlLWFjdGl2ZSIgKTsKCQkJCQkJfQoJCQkJCQlicmVhazsKCQkJCX0KCgkJCQkvLyBtb3ZlIHRoZSBzbGlkZXIgYWNjb3JkaW5nIHRvIHRoZSBrZXlwcmVzcwoJCQkJc3dpdGNoICggZXZlbnQua2V5Q29kZSApIHsKCQkJCQljYXNlICQubW9iaWxlLmtleUNvZGUuSE9NRToKCQkJCQkJc2VsZi5yZWZyZXNoKCBtaW4gKTsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAkLm1vYmlsZS5rZXlDb2RlLkVORDoKCQkJCQkJc2VsZi5yZWZyZXNoKCBtYXggKTsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAkLm1vYmlsZS5rZXlDb2RlLlBBR0VfVVA6CgkJCQkJY2FzZSAkLm1vYmlsZS5rZXlDb2RlLlVQOgoJCQkJCWNhc2UgJC5tb2JpbGUua2V5Q29kZS5SSUdIVDoKCQkJCQkJc2VsZi5yZWZyZXNoKCBpbmRleCArIHN0ZXAgKTsKCQkJCQkJYnJlYWs7CgkJCQkJY2FzZSAkLm1vYmlsZS5rZXlDb2RlLlBBR0VfRE9XTjoKCQkJCQljYXNlICQubW9iaWxlLmtleUNvZGUuRE9XTjoKCQkJCQljYXNlICQubW9iaWxlLmtleUNvZGUuTEVGVDoKCQkJCQkJc2VsZi5yZWZyZXNoKCBpbmRleCAtIHN0ZXAgKTsKCQkJCQkJYnJlYWs7CgkJCQl9CgkJCX0sIC8vIHJlbW92ZSBhY3RpdmUgbWFyawoKCQkJa2V5dXA6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWlmICggc2VsZi5fa2V5U2xpZGluZyApIHsKCQkJCQlzZWxmLl9rZXlTbGlkaW5nID0gZmFsc2U7CgkJCQkJJCggdGhpcyApLnJlbW92ZUNsYXNzKCAidWktc3RhdGUtYWN0aXZlIiApOwoJCQkJfQoJCQl9CgkJCX0pOwoKCQl0aGlzLnJlZnJlc2goIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlICk7Cgl9LAoKCV9jaGVja2VkUmVmcmVzaDogZnVuY3Rpb24oKSB7CgkJaWYoIHRoaXMudmFsdWUgIT0gdGhpcy5fdmFsdWUoKSApewoJCQl0aGlzLnJlZnJlc2goIHRoaXMuX3ZhbHVlKCkgKTsKCQl9Cgl9LAoKCV92YWx1ZTogZnVuY3Rpb24oKSB7CgkJcmV0dXJuICB0aGlzLl90eXBlID09PSAiaW5wdXQiID8KCQkJcGFyc2VGbG9hdCggdGhpcy5lbGVtZW50LnZhbCgpICkgOiB0aGlzLmVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleDsKCX0sCgoJcmVmcmVzaDogZnVuY3Rpb24oIHZhbCwgaXNmcm9tQ29udHJvbCwgcHJldmVudElucHV0VXBkYXRlICkgewoKCQkvLyBOT1RFOiB3ZSBkb24ndCByZXR1cm4gaGVyZSBiZWNhdXNlIHdlIHdhbnQgdG8gc3VwcG9ydCBwcm9ncmFtbWF0aWMKCQkvLyAgICAgICBhbHRlcmF0aW9uIG9mIHRoZSBpbnB1dCB2YWx1ZSwgd2hpY2ggc2hvdWxkIHN0aWxsIHVwZGF0ZSB0aGUgc2xpZGVyCgkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5lbGVtZW50LmF0dHIoJ2Rpc2FibGVkJykpIHsKCQkJdGhpcy5kaXNhYmxlKCk7CgkJfQoKCQkvLyBzZXQgdGhlIHN0b3JlZCB2YWx1ZSBmb3IgY29tcGFyaXNvbiBsYXRlcgoJCXRoaXMudmFsdWUgPSB0aGlzLl92YWx1ZSgpOwoKCQl2YXIgY29udHJvbCA9IHRoaXMuZWxlbWVudCwgcGVyY2VudCwKCQkJY1R5cGUgPSBjb250cm9sWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksCgkJCW1pbiA9IGNUeXBlID09PSAiaW5wdXQiID8gcGFyc2VGbG9hdCggY29udHJvbC5hdHRyKCAibWluIiApICkgOiAwLAoJCQltYXggPSBjVHlwZSA9PT0gImlucHV0IiA/IHBhcnNlRmxvYXQoIGNvbnRyb2wuYXR0ciggIm1heCIgKSApIDogY29udHJvbC5maW5kKCAib3B0aW9uIiApLmxlbmd0aCAtIDEsCgkJCXN0ZXAgPSAoIGNUeXBlID09PSAiaW5wdXQiICYmIHBhcnNlRmxvYXQoIGNvbnRyb2wuYXR0ciggInN0ZXAiICkgKSA+IDAgKSA/IHBhcnNlRmxvYXQoIGNvbnRyb2wuYXR0ciggInN0ZXAiICkgKSA6IDE7CgoJCWlmICggdHlwZW9mIHZhbCA9PT0gIm9iamVjdCIgKSB7CgkJCXZhciBkYXRhID0gdmFsLAoJCQkJLy8gYSBzbGlnaHQgdG9sZXJhbmNlIGhlbHBlZCBnZXQgdG8gdGhlIGVuZHMgb2YgdGhlIHNsaWRlcgoJCQkJdG9sID0gODsKCQkJaWYgKCAhdGhpcy5kcmFnZ2luZyB8fAoJCQkJCWRhdGEucGFnZVggPCB0aGlzLnNsaWRlci5vZmZzZXQoKS5sZWZ0IC0gdG9sIHx8CgkJCQkJZGF0YS5wYWdlWCA+IHRoaXMuc2xpZGVyLm9mZnNldCgpLmxlZnQgKyB0aGlzLnNsaWRlci53aWR0aCgpICsgdG9sICkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCXBlcmNlbnQgPSBNYXRoLnJvdW5kKCAoICggZGF0YS5wYWdlWCAtIHRoaXMuc2xpZGVyLm9mZnNldCgpLmxlZnQgKSAvIHRoaXMuc2xpZGVyLndpZHRoKCkgKSAqIDEwMCApOwoJCX0gZWxzZSB7CgkJCWlmICggdmFsID09IG51bGwgKSB7CgkJCQl2YWwgPSBjVHlwZSA9PT0gImlucHV0IiA/IHBhcnNlRmxvYXQoIGNvbnRyb2wudmFsKCkgfHwgMCApIDogY29udHJvbFswXS5zZWxlY3RlZEluZGV4OwoJCQl9CgkJCXBlcmNlbnQgPSAoIHBhcnNlRmxvYXQoIHZhbCApIC0gbWluICkgLyAoIG1heCAtIG1pbiApICogMTAwOwoJCX0KCgkJaWYgKCBpc05hTiggcGVyY2VudCApICkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAoIHBlcmNlbnQgPCAwICkgewoJCQlwZXJjZW50ID0gMDsKCQl9CgoJCWlmICggcGVyY2VudCA+IDEwMCApIHsKCQkJcGVyY2VudCA9IDEwMDsKCQl9CgoJCXZhciBuZXd2YWwgPSAoIHBlcmNlbnQgLyAxMDAgKSAqICggbWF4IC0gbWluICkgKyBtaW47CgoJCS8vZnJvbSBqUXVlcnkgVUkgc2xpZGVyLCB0aGUgZm9sbG93aW5nIHNvdXJjZSB3aWxsIHJvdW5kIHRvIHRoZSBuZWFyZXN0IHN0ZXAKCQl2YXIgdmFsTW9kU3RlcCA9ICggbmV3dmFsIC0gbWluICkgJSBzdGVwOwoJCXZhciBhbGlnblZhbHVlID0gbmV3dmFsIC0gdmFsTW9kU3RlcDsKCgkJaWYgKCBNYXRoLmFicyggdmFsTW9kU3RlcCApICogMiA+PSBzdGVwICkgewoJCQlhbGlnblZhbHVlICs9ICggdmFsTW9kU3RlcCA+IDAgKSA/IHN0ZXAgOiAoIC1zdGVwICk7CgkJfQoJCS8vIFNpbmNlIEphdmFTY3JpcHQgaGFzIHByb2JsZW1zIHdpdGggbGFyZ2UgZmxvYXRzLCByb3VuZAoJCS8vIHRoZSBmaW5hbCB2YWx1ZSB0byA1IGRpZ2l0cyBhZnRlciB0aGUgZGVjaW1hbCBwb2ludCAoc2VlIGpRdWVyeVVJOiAjNDEyNCkKCQluZXd2YWwgPSBwYXJzZUZsb2F0KCBhbGlnblZhbHVlLnRvRml4ZWQoNSkgKTsKCgkJaWYgKCBuZXd2YWwgPCBtaW4gKSB7CgkJCW5ld3ZhbCA9IG1pbjsKCQl9CgoJCWlmICggbmV3dmFsID4gbWF4ICkgewoJCQluZXd2YWwgPSBtYXg7CgkJfQoKCQl0aGlzLmhhbmRsZS5jc3MoICJsZWZ0IiwgcGVyY2VudCArICIlIiApOwoJCXRoaXMuaGFuZGxlLmF0dHIoIHsKCQkJCSJhcmlhLXZhbHVlbm93IjogY1R5cGUgPT09ICJpbnB1dCIgPyBuZXd2YWwgOiBjb250cm9sLmZpbmQoICJvcHRpb24iICkuZXEoIG5ld3ZhbCApLmF0dHIoICJ2YWx1ZSIgKSwKCQkJCSJhcmlhLXZhbHVldGV4dCI6IGNUeXBlID09PSAiaW5wdXQiID8gbmV3dmFsIDogY29udHJvbC5maW5kKCAib3B0aW9uIiApLmVxKCBuZXd2YWwgKS5nZXRFbmNvZGVkVGV4dCgpLAoJCQkJdGl0bGU6IGNUeXBlID09PSAiaW5wdXQiID8gbmV3dmFsIDogY29udHJvbC5maW5kKCAib3B0aW9uIiApLmVxKCBuZXd2YWwgKS5nZXRFbmNvZGVkVGV4dCgpCgkJCX0pOwoKCQlpZiAoIHRoaXMudmFsdWViZyApIHsKCQkJdGhpcy52YWx1ZWJnLmNzcyggIndpZHRoIiwgcGVyY2VudCArICIlIiApOwoJCX0KCgkJLy8gZHJhZyB0aGUgbGFiZWwgd2lkdGhzCgkJaWYgKCB0aGlzLl9sYWJlbHMgKSB7CgkJCXZhciBoYW5kbGVQZXJjZW50ID0gdGhpcy5oYW5kbGUud2lkdGgoKSAvIHRoaXMuc2xpZGVyLndpZHRoKCkgKiAxMDAsCgkJCQlhUGVyY2VudCA9IHBlcmNlbnQgJiYgaGFuZGxlUGVyY2VudCArICggMTAwIC0gaGFuZGxlUGVyY2VudCApICogcGVyY2VudCAvIDEwMCwKCQkJCWJQZXJjZW50ID0gcGVyY2VudCA9PT0gMTAwID8gMCA6IE1hdGgubWluKCBoYW5kbGVQZXJjZW50ICsgMTAwIC0gYVBlcmNlbnQsIDEwMCApOwoKCQkJdGhpcy5fbGFiZWxzLmVhY2goZnVuY3Rpb24oKSB7CgkJCQl2YXIgYWIgPSAkKCB0aGlzICkuaXMoICIudWktc2xpZGVyLWxhYmVsLWEiICk7CgkJCQkkKCB0aGlzICkud2lkdGgoICggYWIgPyBhUGVyY2VudCA6IGJQZXJjZW50ICApICsgIiUiICk7CgkJCX0pOwoJCX0KCgkJaWYgKCAhcHJldmVudElucHV0VXBkYXRlICkgewoJCQl2YXIgdmFsdWVDaGFuZ2VkID0gZmFsc2U7CgoJCQkvLyB1cGRhdGUgY29udHJvbCJzIHZhbHVlCgkJCWlmICggY1R5cGUgPT09ICJpbnB1dCIgKSB7CgkJCQl2YWx1ZUNoYW5nZWQgPSBjb250cm9sLnZhbCgpICE9PSBuZXd2YWw7CgkJCQljb250cm9sLnZhbCggbmV3dmFsICk7CgkJCX0gZWxzZSB7CgkJCQl2YWx1ZUNoYW5nZWQgPSBjb250cm9sWyAwIF0uc2VsZWN0ZWRJbmRleCAhPT0gbmV3dmFsOwoJCQkJY29udHJvbFsgMCBdLnNlbGVjdGVkSW5kZXggPSBuZXd2YWw7CgkJCX0KCQkJaWYgKCAhaXNmcm9tQ29udHJvbCAmJiB2YWx1ZUNoYW5nZWQgKSB7CgkJCQljb250cm9sLnRyaWdnZXIoICJjaGFuZ2UiICk7CgkJCX0KCQl9Cgl9LAoKCWVuYWJsZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5lbGVtZW50LmF0dHIoICJkaXNhYmxlZCIsIGZhbHNlICk7CgkJdGhpcy5zbGlkZXIucmVtb3ZlQ2xhc3MoICJ1aS1kaXNhYmxlZCIgKS5hdHRyKCAiYXJpYS1kaXNhYmxlZCIsIGZhbHNlICk7CgkJcmV0dXJuIHRoaXMuX3NldE9wdGlvbiggImRpc2FibGVkIiwgZmFsc2UgKTsKCX0sCgoJZGlzYWJsZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5lbGVtZW50LmF0dHIoICJkaXNhYmxlZCIsIHRydWUgKTsKCQl0aGlzLnNsaWRlci5hZGRDbGFzcyggInVpLWRpc2FibGVkIiApLmF0dHIoICJhcmlhLWRpc2FibGVkIiwgdHJ1ZSApOwoJCXJldHVybiB0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIHRydWUgKTsKCX0KCn0pOwoKLy9hdXRvIHNlbGYtaW5pdCB3aWRnZXRzCiQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKSB7CgkkLm1vYmlsZS5zbGlkZXIucHJvdG90eXBlLmVuaGFuY2VXaXRoaW4oIGUudGFyZ2V0LCB0cnVlICk7Cn0pOwoKfSkoIGpRdWVyeSApOwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7CgokLndpZGdldCggIm1vYmlsZS5zZWxlY3RtZW51IiwgJC5tb2JpbGUud2lkZ2V0LCB7CglvcHRpb25zOiB7CgkJdGhlbWU6IG51bGwsCgkJZGlzYWJsZWQ6IGZhbHNlLAoJCWljb246ICJhcnJvdy1kIiwKCQlpY29ucG9zOiAicmlnaHQiLAoJCWlubGluZTogZmFsc2UsCgkJY29ybmVyczogdHJ1ZSwKCQlzaGFkb3c6IHRydWUsCgkJaWNvbnNoYWRvdzogdHJ1ZSwKCQlvdmVybGF5VGhlbWU6ICJhIiwKCQloaWRlUGxhY2Vob2xkZXJNZW51SXRlbXM6IHRydWUsCgkJY2xvc2VUZXh0OiAiQ2xvc2UiLAoJCW5hdGl2ZU1lbnU6IHRydWUsCgkJLy8gVGhpcyBvcHRpb24gZGVmYXVsdHMgdG8gdHJ1ZSBvbiBpT1MgZGV2aWNlcy4KCQlwcmV2ZW50Rm9jdXNab29tOiAvaVBob25lfGlQYWR8aVBvZC8udGVzdCggbmF2aWdhdG9yLnBsYXRmb3JtICkgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCAiQXBwbGVXZWJLaXQiICkgPiAtMSwKCQlpbml0U2VsZWN0b3I6ICJzZWxlY3Q6bm90KCA6anFtRGF0YShyb2xlPSdzbGlkZXInKSApIiwKCQltaW5pOiBmYWxzZQoJfSwKCglfYnV0dG9uOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gJCggIjxkaXYvPiIgKTsKCX0sCgoJX3NldERpc2FibGVkOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJdGhpcy5lbGVtZW50LmF0dHIoICJkaXNhYmxlZCIsIHZhbHVlICk7CgkJdGhpcy5idXR0b24uYXR0ciggImFyaWEtZGlzYWJsZWQiLCB2YWx1ZSApOwoJCXJldHVybiB0aGlzLl9zZXRPcHRpb24oICJkaXNhYmxlZCIsIHZhbHVlICk7Cgl9LAoKCV9mb2N1c0J1dHRvbiA6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpczsKCgkJc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCXNlbGYuYnV0dG9uLmZvY3VzKCk7CgkJfSwgNDApOwoJfSwKCglfc2VsZWN0T3B0aW9uczogZnVuY3Rpb24oKSB7CgkJcmV0dXJuIHRoaXMuc2VsZWN0LmZpbmQoICJvcHRpb24iICk7Cgl9LAoKCS8vIHNldHVwIGl0ZW1zIHRoYXQgYXJlIGdlbmVyYWxseSBuZWNlc3NhcnkgZm9yIHNlbGVjdCBtZW51IGV4dGVuc2lvbgoJX3ByZUV4dGVuc2lvbjogZnVuY3Rpb24oKSB7CgkJdmFyIGNsYXNzZXMgPSAiIjsKCQkvLyBUT0RPOiBQb3N0IDEuMS0tb25jZSB3ZSBoYXZlIHRpbWUgdG8gdGVzdCB0aG9yb3VnaGx5LS1hbnkgY2xhc3NlcyBtYW51YWxseSBhcHBsaWVkIHRvIHRoZSBvcmlnaW5hbCBlbGVtZW50IHNob3VsZCBiZSBjYXJyaWVkIG92ZXIgdG8gdGhlIGVuaGFuY2VkIGVsZW1lbnQsIHdpdGggYW4gYC1lbmhhbmNlZGAgc3VmZml4LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbW9iaWxlL2lzc3Vlcy8zNTc3CgkJLyogaWYgKCAkZWxbMF0uY2xhc3NOYW1lLmxlbmd0aCApIHsKCQkJY2xhc3NlcyA9ICRlbFswXS5jbGFzc05hbWU7CgkJfSAqLwoJCWlmICggISF+dGhpcy5lbGVtZW50WzBdLmNsYXNzTmFtZS5pbmRleE9mKCAidWktYnRuLWxlZnQiICkgKSB7CgkJCWNsYXNzZXMgPSAgIiB1aS1idG4tbGVmdCI7CgkJfQoKCQlpZiAoICAhIX50aGlzLmVsZW1lbnRbMF0uY2xhc3NOYW1lLmluZGV4T2YoICJ1aS1idG4tcmlnaHQiICkgKSB7CgkJCWNsYXNzZXMgPSAiIHVpLWJ0bi1yaWdodCI7CgkJfQoKCQl0aGlzLnNlbGVjdCA9IHRoaXMuZWxlbWVudC53cmFwKCAiPGRpdiBjbGFzcz0ndWktc2VsZWN0IiArIGNsYXNzZXMgKyAiJz4iICk7CgkJdGhpcy5zZWxlY3RJRCAgPSB0aGlzLnNlbGVjdC5hdHRyKCAiaWQiICk7CgkJdGhpcy5sYWJlbCA9ICQoICJsYWJlbFtmb3I9JyIrIHRoaXMuc2VsZWN0SUQgKyInXSIgKS5hZGRDbGFzcyggInVpLXNlbGVjdCIgKTsKCQl0aGlzLmlzTXVsdGlwbGUgPSB0aGlzLnNlbGVjdFsgMCBdLm11bHRpcGxlOwoJCWlmICggIXRoaXMub3B0aW9ucy50aGVtZSApIHsKCQkJdGhpcy5vcHRpb25zLnRoZW1lID0gJC5tb2JpbGUuZ2V0SW5oZXJpdGVkVGhlbWUoIHRoaXMuc2VsZWN0LCAiYyIgKTsKCQl9Cgl9LAoKCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX3ByZUV4dGVuc2lvbigpOwoKCQkvLyBBbGxvd3MgZm9yIGV4dGVuc2lvbiBvZiB0aGUgbmF0aXZlIHNlbGVjdCBmb3IgY3VzdG9tIHNlbGVjdHMgYW5kIG90aGVyIHBsdWdpbnMKCQkvLyBzZWUgc2VsZWN0LmN1c3RvbSBmb3IgZXhhbXBsZSBleHRlbnNpb24KCQkvLyBUT0RPIGV4cGxvcmUgcGx1Z2luIHJlZ2lzdHJhdGlvbgoJCXRoaXMuX3RyaWdnZXIoICJiZWZvcmVDcmVhdGUiICk7CgoJCXRoaXMuYnV0dG9uID0gdGhpcy5fYnV0dG9uKCk7CgoJCXZhciBzZWxmID0gdGhpcywKCgkJCW9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCgoJCQlpbmxpbmUgPSBvcHRpb25zLmlubGluZSB8fCB0aGlzLnNlbGVjdC5qcW1EYXRhKCAiaW5saW5lIiApLAoJCQltaW5pID0gb3B0aW9ucy5taW5pIHx8IHRoaXMuc2VsZWN0LmpxbURhdGEoICJtaW5pIiApLAoJCQlpY29ucG9zID0gb3B0aW9ucy5pY29uID8gKCBvcHRpb25zLmljb25wb3MgfHwgdGhpcy5zZWxlY3QuanFtRGF0YSggImljb25wb3MiICkgKSA6IGZhbHNlLAoKCQkJLy8gSUUgdGhyb3dzIGFuIGV4Y2VwdGlvbiBhdCBvcHRpb25zLml0ZW0oKSBmdW5jdGlvbiB3aGVuCgkJCS8vIHRoZXJlIGlzIG5vIHNlbGVjdGVkIGl0ZW0KCQkJLy8gc2VsZWN0IGZpcnN0IGluIHRoaXMgY2FzZQoJCQlzZWxlY3RlZEluZGV4ID0gdGhpcy5zZWxlY3RbIDAgXS5zZWxlY3RlZEluZGV4ID09PSAtMSA/IDAgOiB0aGlzLnNlbGVjdFsgMCBdLnNlbGVjdGVkSW5kZXgsCgoJCQkvLyBUT0RPIHZhbHVlcyBidXR0b25JZCBhbmQgbWVudUlkIGFyZSB1bmRlZmluZWQgaGVyZQoJCQlidXR0b24gPSB0aGlzLmJ1dHRvbgoJCQkJLmluc2VydEJlZm9yZSggdGhpcy5zZWxlY3QgKQoJCQkJLmJ1dHRvbk1hcmt1cCggewoJCQkJCXRoZW1lOiBvcHRpb25zLnRoZW1lLAoJCQkJCWljb246IG9wdGlvbnMuaWNvbiwKCQkJCQlpY29ucG9zOiBpY29ucG9zLAoJCQkJCWlubGluZTogaW5saW5lLAoJCQkJCWNvcm5lcnM6IG9wdGlvbnMuY29ybmVycywKCQkJCQlzaGFkb3c6IG9wdGlvbnMuc2hhZG93LAoJCQkJCWljb25zaGFkb3c6IG9wdGlvbnMuaWNvbnNoYWRvdywKCQkJCQltaW5pOiBtaW5pCgkJCQl9KTsKCgkJdGhpcy5zZXRCdXR0b25UZXh0KCk7CgoJCS8vIE9wZXJhIGRvZXMgbm90IHByb3Blcmx5IHN1cHBvcnQgb3BhY2l0eSBvbiBzZWxlY3QgZWxlbWVudHMKCQkvLyBJbiBNaW5pLCBpdCBoaWRlcyB0aGUgZWxlbWVudCwgYnV0IG5vdCBpdHMgdGV4dAoJCS8vIE9uIHRoZSBkZXNrdG9wLGl0IHNlZW1zIHRvIGRvIHRoZSBvcHBvc2l0ZQoJCS8vIGZvciB0aGVzZSByZWFzb25zLCB1c2luZyB0aGUgbmF0aXZlTWVudSBvcHRpb24gcmVzdWx0cyBpbiBhIGZ1bGwgbmF0aXZlIHNlbGVjdCBpbiBPcGVyYQoJCWlmICggb3B0aW9ucy5uYXRpdmVNZW51ICYmIHdpbmRvdy5vcGVyYSAmJiB3aW5kb3cub3BlcmEudmVyc2lvbiApIHsKCQkJYnV0dG9uLmFkZENsYXNzKCAidWktc2VsZWN0LW5hdGl2ZW9ubHkiICk7CgkJfQoKCQkvLyBBZGQgY291bnRlciBmb3IgbXVsdGkgc2VsZWN0cwoJCWlmICggdGhpcy5pc011bHRpcGxlICkgewoJCQl0aGlzLmJ1dHRvbkNvdW50ID0gJCggIjxzcGFuPiIgKQoJCQkJLmFkZENsYXNzKCAidWktbGktY291bnQgdWktYnRuLXVwLWMgdWktYnRuLWNvcm5lci1hbGwiICkKCQkJCS5oaWRlKCkKCQkJCS5hcHBlbmRUbyggYnV0dG9uLmFkZENsYXNzKCd1aS1saS1oYXMtY291bnQnKSApOwoJCX0KCgkJLy8gRGlzYWJsZSBpZiBzcGVjaWZpZWQKCQlpZiAoIG9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5lbGVtZW50LmF0dHIoJ2Rpc2FibGVkJykpIHsKCQkJdGhpcy5kaXNhYmxlKCk7CgkJfQoKCQkvLyBFdmVudHMgb24gbmF0aXZlIHNlbGVjdAoJCXRoaXMuc2VsZWN0LmNoYW5nZShmdW5jdGlvbigpIHsKCQkJc2VsZi5yZWZyZXNoKCk7CgkJfSk7CgoJCXRoaXMuYnVpbGQoKTsKCX0sCgoJYnVpbGQ6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpczsKCgkJdGhpcy5zZWxlY3QKCQkJLmFwcGVuZFRvKCBzZWxmLmJ1dHRvbiApCgkJCS5iaW5kKCAidm1vdXNlZG93biIsIGZ1bmN0aW9uKCkgewoJCQkJLy8gQWRkIGFjdGl2ZSBjbGFzcyB0byBidXR0b24KCQkJCXNlbGYuYnV0dG9uLmFkZENsYXNzKCAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApOwoJCQl9KQoJCQkuYmluZCggImZvY3VzIiwgZnVuY3Rpb24oKSB7CgkJCQlzZWxmLmJ1dHRvbi5hZGRDbGFzcyggJC5tb2JpbGUuZm9jdXNDbGFzcyApOwoJCQl9KQoJCQkuYmluZCggImJsdXIiLCBmdW5jdGlvbigpIHsKCQkJCXNlbGYuYnV0dG9uLnJlbW92ZUNsYXNzKCAkLm1vYmlsZS5mb2N1c0NsYXNzICk7CgkJCX0pCgkJCS5iaW5kKCAiZm9jdXMgdm1vdXNlb3ZlciIsIGZ1bmN0aW9uKCkgewoJCQkJc2VsZi5idXR0b24udHJpZ2dlciggInZtb3VzZW92ZXIiICk7CgkJCX0pCgkJCS5iaW5kKCAidm1vdXNlbW92ZSIsIGZ1bmN0aW9uKCkgewoJCQkJLy8gUmVtb3ZlIGFjdGl2ZSBjbGFzcyBvbiBzY3JvbGwvdG91Y2htb3ZlCgkJCQlzZWxmLmJ1dHRvbi5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJfSkKCQkJLmJpbmQoICJjaGFuZ2UgYmx1ciB2bW91c2VvdXQiLCBmdW5jdGlvbigpIHsKCQkJCXNlbGYuYnV0dG9uLnRyaWdnZXIoICJ2bW91c2VvdXQiICkKCQkJCQkucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICk7CgkJCX0pCgkJCS5iaW5kKCAiY2hhbmdlIGJsdXIiLCBmdW5jdGlvbigpIHsKCQkJCXNlbGYuYnV0dG9uLnJlbW92ZUNsYXNzKCAidWktYnRuLWRvd24tIiArIHNlbGYub3B0aW9ucy50aGVtZSApOwoJCQl9KTsKCgkJLy8gSW4gbWFueSBzaXR1YXRpb25zLCBpT1Mgd2lsbCB6b29tIGludG8gdGhlIHNlbGVjdCB1cG9uIHRhcCwgdGhpcyBwcmV2ZW50cyB0aGF0IGZyb20gaGFwcGVuaW5nCgkJc2VsZi5idXR0b24uYmluZCggInZtb3VzZWRvd24iLCBmdW5jdGlvbigpIHsKCQkJaWYgKCBzZWxmLm9wdGlvbnMucHJldmVudEZvY3VzWm9vbSApIHsKCQkJCSQubW9iaWxlLnpvb20uZGlzYWJsZSggdHJ1ZSApOwoJCQl9CgkJfSkuYmluZCggIm1vdXNldXAiLCBmdW5jdGlvbigpIHsKCQkJaWYgKCBzZWxmLm9wdGlvbnMucHJldmVudEZvY3VzWm9vbSApIHsKCQkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCQkJJC5tb2JpbGUuem9vbS5lbmFibGUoIHRydWUgKTsKCQkJCX0sIDApOwoJCQl9CgkJfSk7Cgl9LAoKCXNlbGVjdGVkOiBmdW5jdGlvbigpIHsKCQlyZXR1cm4gdGhpcy5fc2VsZWN0T3B0aW9ucygpLmZpbHRlciggIjpzZWxlY3RlZCIgKTsKCX0sCgoJc2VsZWN0ZWRJbmRpY2VzOiBmdW5jdGlvbigpIHsKCQl2YXIgc2VsZiA9IHRoaXM7CgoJCXJldHVybiB0aGlzLnNlbGVjdGVkKCkubWFwKGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gc2VsZi5fc2VsZWN0T3B0aW9ucygpLmluZGV4KCB0aGlzICk7CgkJfSkuZ2V0KCk7Cgl9LAoKCXNldEJ1dHRvblRleHQ6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxmID0gdGhpcywKCQkJc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkKCksCgkJCXRleHQgPSB0aGlzLnBsYWNlaG9sZGVyLAoJCQlzcGFuID0gJCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggInNwYW4iICkgKTsKCgkJdGhpcy5idXR0b24uZmluZCggIi51aS1idG4tdGV4dCIgKS5odG1sKGZ1bmN0aW9uKCkgewoJCQlpZiAoIHNlbGVjdGVkLmxlbmd0aCApIHsKCQkJCXRleHQgPSBzZWxlY3RlZC5tYXAoZnVuY3Rpb24oKSB7CgkJCQkJcmV0dXJuICQoIHRoaXMgKS50ZXh0KCk7CgkJCQl9KS5nZXQoKS5qb2luKCAiLCAiICk7CgkJCX0gZWxzZSB7CgkJCQl0ZXh0ID0gc2VsZi5wbGFjZWhvbGRlcjsKCQkJfQoKCQkJLy8gVE9ETyBwb3NzaWJseSBhZ2dyZWdhdGUgbXVsdGlwbGUgc2VsZWN0IG9wdGlvbiBjbGFzc2VzCgkJCXJldHVybiBzcGFuLnRleHQoIHRleHQgKQoJCQkJLmFkZENsYXNzKCBzZWxmLnNlbGVjdC5hdHRyKCAiY2xhc3MiICkgKQoJCQkJLmFkZENsYXNzKCBzZWxlY3RlZC5hdHRyKCAiY2xhc3MiICkgKTsKCQl9KTsKCX0sCgoJc2V0QnV0dG9uQ291bnQ6IGZ1bmN0aW9uKCkgewoJCXZhciBzZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWQoKTsKCgkJLy8gbXVsdGlwbGUgY291bnQgaW5zaWRlIGJ1dHRvbgoJCWlmICggdGhpcy5pc011bHRpcGxlICkgewoJCQl0aGlzLmJ1dHRvbkNvdW50WyBzZWxlY3RlZC5sZW5ndGggPiAxID8gInNob3ciIDogImhpZGUiIF0oKS50ZXh0KCBzZWxlY3RlZC5sZW5ndGggKTsKCQl9Cgl9LAoKCXJlZnJlc2g6IGZ1bmN0aW9uKCkgewoJCXRoaXMuc2V0QnV0dG9uVGV4dCgpOwoJCXRoaXMuc2V0QnV0dG9uQ291bnQoKTsKCX0sCgoJLy8gb3BlbiBhbmQgY2xvc2UgcHJlc2VydmVkIGluIG5hdGl2ZSBzZWxlY3RzCgkvLyB0byBzaW1wbGlmeSB1c2VycyBjb2RlIHdoZW4gbG9vcGluZyBvdmVyIHNlbGVjdHMKCW9wZW46ICQubm9vcCwKCWNsb3NlOiAkLm5vb3AsCgoJZGlzYWJsZTogZnVuY3Rpb24oKSB7CgkJdGhpcy5fc2V0RGlzYWJsZWQoIHRydWUgKTsKCQl0aGlzLmJ1dHRvbi5hZGRDbGFzcyggInVpLWRpc2FibGVkIiApOwoJfSwKCgllbmFibGU6IGZ1bmN0aW9uKCkgewoJCXRoaXMuX3NldERpc2FibGVkKCBmYWxzZSApOwoJCXRoaXMuYnV0dG9uLnJlbW92ZUNsYXNzKCAidWktZGlzYWJsZWQiICk7Cgl9Cn0pOwoKLy9hdXRvIHNlbGYtaW5pdCB3aWRnZXRzCiQoIGRvY3VtZW50ICkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKSB7CgkkLm1vYmlsZS5zZWxlY3RtZW51LnByb3RvdHlwZS5lbmhhbmNlV2l0aGluKCBlLnRhcmdldCwgdHJ1ZSApOwp9KTsKfSkoIGpRdWVyeSApOwoKLyoKKiBjdXN0b20gInNlbGVjdG1lbnUiIHBsdWdpbgoqLwoKKGZ1bmN0aW9uKCAkLCB1bmRlZmluZWQgKSB7Cgl2YXIgZXh0ZW5kU2VsZWN0ID0gZnVuY3Rpb24oIHdpZGdldCApIHsKCgkJdmFyIHNlbGVjdCA9IHdpZGdldC5zZWxlY3QsCgkJCXNlbGVjdElEICA9IHdpZGdldC5zZWxlY3RJRCwKCQkJbGFiZWwgPSB3aWRnZXQubGFiZWwsCgkJCXRoaXNQYWdlID0gd2lkZ2V0LnNlbGVjdC5jbG9zZXN0KCAiLnVpLXBhZ2UiICksCgkJCXNlbGVjdE9wdGlvbnMgPSB3aWRnZXQuX3NlbGVjdE9wdGlvbnMoKSwKCQkJaXNNdWx0aXBsZSA9IHdpZGdldC5pc011bHRpcGxlID0gd2lkZ2V0LnNlbGVjdFsgMCBdLm11bHRpcGxlLAoJCQlidXR0b25JZCA9IHNlbGVjdElEICsgIi1idXR0b24iLAoJCQltZW51SWQgPSBzZWxlY3RJRCArICItbWVudSIsCgkJCW1lbnVQYWdlID0gJCggIjxkaXYgZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicm9sZT0nZGlhbG9nJyBkYXRhLSIgKyQubW9iaWxlLm5zICsgInRoZW1lPSciKyB3aWRnZXQub3B0aW9ucy50aGVtZSArIicgZGF0YS0iICskLm1vYmlsZS5ucyArICJvdmVybGF5LXRoZW1lPSciKyB3aWRnZXQub3B0aW9ucy5vdmVybGF5VGhlbWUgKyInPiIgKwoJCQkJIjxkaXYgZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicm9sZT0naGVhZGVyJz4iICsKCQkJCSI8ZGl2IGNsYXNzPSd1aS10aXRsZSc+IiArIGxhYmVsLmdldEVuY29kZWRUZXh0KCkgKyAiPC9kaXY+IisKCQkJCSI8L2Rpdj4iKwoJCQkJIjxkaXYgZGF0YS0iICsgJC5tb2JpbGUubnMgKyAicm9sZT0nY29udGVudCc+PC9kaXY+IisKCQkJCSI8L2Rpdj4iICksCgoJCQlsaXN0Ym94ID0gICQoICI8ZGl2PiIsIHsgImNsYXNzIjogInVpLXNlbGVjdG1lbnUiIH0gKS5pbnNlcnRBZnRlciggd2lkZ2V0LnNlbGVjdCApLnBvcHVwKCB7IHRoZW1lOiAiYSIgfSApLAoKCQkJbGlzdCA9ICQoICI8dWw+IiwgewoJCQkJImNsYXNzIjogInVpLXNlbGVjdG1lbnUtbGlzdCIsCgkJCQkiaWQiOiBtZW51SWQsCgkJCQkicm9sZSI6ICJsaXN0Ym94IiwKCQkJCSJhcmlhLWxhYmVsbGVkYnkiOiBidXR0b25JZAoJCQl9KS5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidGhlbWUiLCB3aWRnZXQub3B0aW9ucy50aGVtZSApLmFwcGVuZFRvKCBsaXN0Ym94ICksCgoJCQloZWFkZXIgPSAkKCAiPGRpdj4iLCB7CgkJCQkiY2xhc3MiOiAidWktaGVhZGVyIHVpLWJhci0iICsgd2lkZ2V0Lm9wdGlvbnMudGhlbWUKCQkJfSkucHJlcGVuZFRvKCBsaXN0Ym94ICksCgoJCQloZWFkZXJUaXRsZSA9ICQoICI8aDE+IiwgewoJCQkJImNsYXNzIjogInVpLXRpdGxlIgoJCQl9KS5hcHBlbmRUbyggaGVhZGVyICksCgoJCQltZW51UGFnZUNvbnRlbnQsCgkJCW1lbnVQYWdlQ2xvc2UsCgkJCWhlYWRlckNsb3NlOwoKCQlpZiAoIHdpZGdldC5pc011bHRpcGxlICkgewoJCQloZWFkZXJDbG9zZSA9ICQoICI8YT4iLCB7CgkJCQkidGV4dCI6IHdpZGdldC5vcHRpb25zLmNsb3NlVGV4dCwKCQkJCSJocmVmIjogIiMiLAoJCQkJImNsYXNzIjogInVpLWJ0bi1sZWZ0IgoJCQl9KS5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAiaWNvbnBvcyIsICJub3RleHQiICkuYXR0ciggImRhdGEtIiArICQubW9iaWxlLm5zICsgImljb24iLCAiZGVsZXRlIiApLmFwcGVuZFRvKCBoZWFkZXIgKS5idXR0b25NYXJrdXAoKTsKCQl9CgoJCSQuZXh0ZW5kKCB3aWRnZXQsIHsKCQkJc2VsZWN0OiB3aWRnZXQuc2VsZWN0LAoJCQlzZWxlY3RJRDogc2VsZWN0SUQsCgkJCWJ1dHRvbklkOiBidXR0b25JZCwKCQkJbWVudUlkOiBtZW51SWQsCgkJCXRoaXNQYWdlOiB0aGlzUGFnZSwKCQkJbWVudVBhZ2U6IG1lbnVQYWdlLAoJCQlsYWJlbDogbGFiZWwsCgkJCXNlbGVjdE9wdGlvbnM6IHNlbGVjdE9wdGlvbnMsCgkJCWlzTXVsdGlwbGU6IGlzTXVsdGlwbGUsCgkJCXRoZW1lOiB3aWRnZXQub3B0aW9ucy50aGVtZSwKCQkJbGlzdGJveDogbGlzdGJveCwKCQkJbGlzdDogbGlzdCwKCQkJaGVhZGVyOiBoZWFkZXIsCgkJCWhlYWRlclRpdGxlOiBoZWFkZXJUaXRsZSwKCQkJaGVhZGVyQ2xvc2U6IGhlYWRlckNsb3NlLAoJCQltZW51UGFnZUNvbnRlbnQ6IG1lbnVQYWdlQ29udGVudCwKCQkJbWVudVBhZ2VDbG9zZTogbWVudVBhZ2VDbG9zZSwKCQkJcGxhY2Vob2xkZXI6ICIiLAoKCQkJYnVpbGQ6IGZ1bmN0aW9uKCkgewoJCQkJdmFyIHNlbGYgPSB0aGlzOwoKCQkJCS8vIENyZWF0ZSBsaXN0IGZyb20gc2VsZWN0LCB1cGRhdGUgc3RhdGUKCQkJCXNlbGYucmVmcmVzaCgpOwoKCQkJCXNlbGYuc2VsZWN0LmF0dHIoICJ0YWJpbmRleCIsICItMSIgKS5mb2N1cyhmdW5jdGlvbigpIHsKCQkJCQkkKCB0aGlzICkuYmx1cigpOwoJCQkJCXNlbGYuYnV0dG9uLmZvY3VzKCk7CgkJCQl9KTsKCgkJCQkvLyBCdXR0b24gZXZlbnRzCgkJCQlzZWxmLmJ1dHRvbi5iaW5kKCAidmNsaWNrIGtleWRvd24iICwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCWlmIChldmVudC50eXBlID09PSAidmNsaWNrIiB8fAoJCQkJCQkJZXZlbnQua2V5Q29kZSAmJiAoZXZlbnQua2V5Q29kZSA9PT0gJC5tb2JpbGUua2V5Q29kZS5FTlRFUiB8fAoJCQkJCQkJCQkJCQkJCQkJZXZlbnQua2V5Q29kZSA9PT0gJC5tb2JpbGUua2V5Q29kZS5TUEFDRSkpIHsKCgkJCQkJCXNlbGYub3BlbigpOwoJCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCX0KCQkJCX0pOwoKCQkJCS8vIEV2ZW50cyBmb3IgbGlzdCBpdGVtcwoJCQkJc2VsZi5saXN0LmF0dHIoICJyb2xlIiwgImxpc3Rib3giICkKCQkJCQkuYmluZCggImZvY3VzaW4iLCBmdW5jdGlvbiggZSApIHsKCQkJCQkJJCggZS50YXJnZXQgKQoJCQkJCQkJLmF0dHIoICJ0YWJpbmRleCIsICIwIiApCgkJCQkJCQkudHJpZ2dlciggInZtb3VzZW92ZXIiICk7CgoJCQkJCX0pCgkJCQkJLmJpbmQoICJmb2N1c291dCIsIGZ1bmN0aW9uKCBlICkgewoJCQkJCQkkKCBlLnRhcmdldCApCgkJCQkJCQkuYXR0ciggInRhYmluZGV4IiwgIi0xIiApCgkJCQkJCQkudHJpZ2dlciggInZtb3VzZW91dCIgKTsKCQkJCQl9KQoJCQkJCS5kZWxlZ2F0ZSggImxpOm5vdCgudWktZGlzYWJsZWQsIC51aS1saS1kaXZpZGVyKSIsICJjbGljayIsIGZ1bmN0aW9uKCBldmVudCApIHsKCgkJCQkJCS8vIGluZGV4IG9mIG9wdGlvbiB0YWcgdG8gYmUgc2VsZWN0ZWQKCQkJCQkJdmFyIG9sZEluZGV4ID0gc2VsZi5zZWxlY3RbIDAgXS5zZWxlY3RlZEluZGV4LAoJCQkJCQkJbmV3SW5kZXggPSBzZWxmLmxpc3QuZmluZCggImxpOm5vdCgudWktbGktZGl2aWRlcikiICkuaW5kZXgoIHRoaXMgKSwKCQkJCQkJCW9wdGlvbiA9IHNlbGYuX3NlbGVjdE9wdGlvbnMoKS5lcSggbmV3SW5kZXggKVsgMCBdOwoKCQkJCQkJLy8gdG9nZ2xlIHNlbGVjdGVkIHN0YXR1cyBvbiB0aGUgdGFnIGZvciBtdWx0aSBzZWxlY3RzCgkJCQkJCW9wdGlvbi5zZWxlY3RlZCA9IHNlbGYuaXNNdWx0aXBsZSA/ICFvcHRpb24uc2VsZWN0ZWQgOiB0cnVlOwoKCQkJCQkJLy8gdG9nZ2xlIGNoZWNrYm94IGNsYXNzIGZvciBtdWx0aXBsZSBzZWxlY3RzCgkJCQkJCWlmICggc2VsZi5pc011bHRpcGxlICkgewoJCQkJCQkJJCggdGhpcyApLmZpbmQoICIudWktaWNvbiIgKQoJCQkJCQkJCS50b2dnbGVDbGFzcyggInVpLWljb24tY2hlY2tib3gtb24iLCBvcHRpb24uc2VsZWN0ZWQgKQoJCQkJCQkJCS50b2dnbGVDbGFzcyggInVpLWljb24tY2hlY2tib3gtb2ZmIiwgIW9wdGlvbi5zZWxlY3RlZCApOwoJCQkJCQl9CgoJCQkJCQkvLyB0cmlnZ2VyIGNoYW5nZSBpZiB2YWx1ZSBjaGFuZ2VkCgkJCQkJCWlmICggc2VsZi5pc011bHRpcGxlIHx8IG9sZEluZGV4ICE9PSBuZXdJbmRleCApIHsKCQkJCQkJCXNlbGYuc2VsZWN0LnRyaWdnZXIoICJjaGFuZ2UiICk7CgkJCQkJCX0KCgkJCQkJCS8vIGhpZGUgY3VzdG9tIHNlbGVjdCBmb3Igc2luZ2xlIHNlbGVjdHMgb25seSAtIG90aGVyd2lzZSBmb2N1cyBjbGlja2VkIGl0ZW0KCQkJCQkJLy8gV2UgbmVlZCB0byBncmFiIHRoZSBjbGlja2VkIGl0ZW0gdGhlIGhhcmQgd2F5LCBiZWNhdXNlIHRoZSBsaXN0IG1heSBoYXZlIGJlZW4gcmVidWlsdAoJCQkJCQlpZiAoIHNlbGYuaXNNdWx0aXBsZSApIHsKCQkJCQkJCXNlbGYubGlzdC5maW5kKCAibGk6bm90KC51aS1saS1kaXZpZGVyKSIgKS5lcSggbmV3SW5kZXggKQoJCQkJCQkJCS5hZGRDbGFzcyggInVpLWJ0bi1kb3duLSIgKyB3aWRnZXQub3B0aW9ucy50aGVtZSApLmZpbmQoICJhIiApLmZpcnN0KCkuZm9jdXMoKTsKCQkJCQkJfQoJCQkJCQllbHNlIHsKCQkJCQkJCXNlbGYuY2xvc2UoKTsKCQkJCQkJfQoKCQkJCQkJZXZlbnQucHJldmVudERlZmF1bHQoKTsKCQkJCQl9KQoJCQkJCS5rZXlkb3duKGZ1bmN0aW9uKCBldmVudCApIHsgIC8va2V5Ym9hcmQgZXZlbnRzIGZvciBtZW51IGl0ZW1zCgkJCQkJCXZhciB0YXJnZXQgPSAkKCBldmVudC50YXJnZXQgKSwKCQkJCQkJCWxpID0gdGFyZ2V0LmNsb3Nlc3QoICJsaSIgKSwKCQkJCQkJCXByZXYsIG5leHQ7CgoJCQkJCQkvLyBzd2l0Y2ggbG9naWMgYmFzZWQgb24gd2hpY2gga2V5IHdhcyBwcmVzc2VkCgkJCQkJCXN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7CgkJCQkJCQkvLyB1cCBvciBsZWZ0IGFycm93IGtleXMKCQkJCQkJY2FzZSAzODoKCQkJCQkJCXByZXYgPSBsaS5wcmV2KCkubm90KCAiLnVpLXNlbGVjdG1lbnUtcGxhY2Vob2xkZXIiICk7CgoJCQkJCQkJaWYgKCBwcmV2LmlzKCAiLnVpLWxpLWRpdmlkZXIiICkgKSB7CgkJCQkJCQkJcHJldiA9IHByZXYucHJldigpOwoJCQkJCQkJfQoKCQkJCQkJCS8vIGlmIHRoZXJlJ3MgYSBwcmV2aW91cyBvcHRpb24sIGZvY3VzIGl0CgkJCQkJCQlpZiAoIHByZXYubGVuZ3RoICkgewoJCQkJCQkJCXRhcmdldAoJCQkJCQkJCQkuYmx1cigpCgkJCQkJCQkJCS5hdHRyKCAidGFiaW5kZXgiLCAiLTEiICk7CgoJCQkJCQkJCXByZXYuYWRkQ2xhc3MoICJ1aS1idG4tZG93bi0iICsgd2lkZ2V0Lm9wdGlvbnMudGhlbWUgKS5maW5kKCAiYSIgKS5maXJzdCgpLmZvY3VzKCk7CgkJCQkJCQl9CgoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQkJLy8gZG93biBvciByaWdodCBhcnJvdyBrZXlzCgkJCQkJCWNhc2UgNDA6CgkJCQkJCQluZXh0ID0gbGkubmV4dCgpOwoKCQkJCQkJCWlmICggbmV4dC5pcyggIi51aS1saS1kaXZpZGVyIiApICkgewoJCQkJCQkJCW5leHQgPSBuZXh0Lm5leHQoKTsKCQkJCQkJCX0KCgkJCQkJCQkvLyBpZiB0aGVyZSdzIGEgbmV4dCBvcHRpb24sIGZvY3VzIGl0CgkJCQkJCQlpZiAoIG5leHQubGVuZ3RoICkgewoJCQkJCQkJCXRhcmdldAoJCQkJCQkJCQkuYmx1cigpCgkJCQkJCQkJCS5hdHRyKCAidGFiaW5kZXgiLCAiLTEiICk7CgoJCQkJCQkJCW5leHQuYWRkQ2xhc3MoICJ1aS1idG4tZG93bi0iICsgd2lkZ2V0Lm9wdGlvbnMudGhlbWUgKS5maW5kKCAiYSIgKS5maXJzdCgpLmZvY3VzKCk7CgkJCQkJCQl9CgoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQkJLy8gSWYgZW50ZXIgb3Igc3BhY2UgaXMgcHJlc3NlZCwgdHJpZ2dlciBjbGljawoJCQkJCQljYXNlIDEzOgoJCQkJCQljYXNlIDMyOgoJCQkJCQkJdGFyZ2V0LnRyaWdnZXIoICJjbGljayIgKTsKCgkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCX0KCQkJCQl9KTsKCgkJCQkvLyBidXR0b24gcmVmb2N1cyBlbnN1cmVzIHByb3BlciBoZWlnaHQgY2FsY3VsYXRpb24KCQkJCS8vIGJ5IHJlbW92aW5nIHRoZSBpbmxpbmUgc3R5bGUgYW5kIGVuc3VyaW5nIHBhZ2UgaW5jbHVzaW9uCgkJCQlzZWxmLm1lbnVQYWdlLmJpbmQoICJwYWdlaGlkZSIsIGZ1bmN0aW9uKCkgewoJCQkJCXNlbGYubGlzdC5hcHBlbmRUbyggc2VsZi5saXN0Ym94ICk7CgkJCQkJc2VsZi5fZm9jdXNCdXR0b24oKTsKCgkJCQkJLy8gVE9ETyBjZW50cmFsaXplIHBhZ2UgcmVtb3ZhbCBiaW5kaW5nIC8gaGFuZGxpbmcgaW4gdGhlIHBhZ2UgcGx1Z2luLgoJCQkJCS8vIFN1Z2dlc3Rpb24gZnJvbSBAamJsYXMgdG8gZG8gcmVmY291bnRpbmcKCQkJCQkvLwoJCQkJCS8vIFRPRE8gZXh0cmVtZWx5IGNvbmZ1c2luZyBkZXBlbmRlbmN5IG9uIHRoZSBvcGVuIG1ldGhvZCB3aGVyZSB0aGUgcGFnZWhpZGUucmVtb3ZlCgkJCQkJLy8gYmluZGluZ3MgYXJlIHN0cmlwcGVkIHRvIHByZXZlbnQgdGhlIHBhcmVudCBwYWdlIGZyb20gZGlzYXBwZWFyaW5nLiBUaGUgd2F5CgkJCQkJLy8gd2UncmUga2VlcGluZyBwYWdlcyBpbiB0aGUgRE9NIHJpZ2h0IG5vdyBzdWNrcwoJCQkJCS8vCgkJCQkJLy8gcmViaW5kIHRoZSBwYWdlIHJlbW92ZSB0aGF0IHdhcyB1bmJvdW5kIGluIHRoZSBvcGVuIGZ1bmN0aW9uCgkJCQkJLy8gdG8gYWxsb3cgZm9yIHRoZSBwYXJlbnQgcGFnZSByZW1vdmFsIGZyb20gYWN0aW9ucyBvdGhlciB0aGFuIHRoZSB1c2UKCQkJCQkvLyBvZiBhIGRpYWxvZyBzaXplZCBjdXN0b20gc2VsZWN0CgkJCQkJLy8KCQkJCQkvLyBkb2luZyB0aGlzIGhlcmUgcHJvdmlkZXMgZm9yIHRoZSBiYWNrIGJ1dHRvbiBvbiB0aGUgY3VzdG9tIHNlbGVjdCBkaWFsb2cKCQkJCQkkLm1vYmlsZS5fYmluZFBhZ2VSZW1vdmUuY2FsbCggc2VsZi50aGlzUGFnZSApOwoJCQkJfSk7CgoJCQkJLy8gRXZlbnRzIG9uIHRoZSBwb3B1cAoJCQkJc2VsZi5saXN0Ym94LmJpbmQoICJwb3B1cGFmdGVyY2xvc2UiLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJc2VsZi5jbG9zZSgpOwoJCQkJfSk7CgoJCQkJLy8gQ2xvc2UgYnV0dG9uIG9uIHNtYWxsIG92ZXJsYXlzCgkJCQlpZiAoIHNlbGYuaXNNdWx0aXBsZSApIHsKCQkJCQlzZWxmLmhlYWRlckNsb3NlLmNsaWNrKGZ1bmN0aW9uKCkgewoJCQkJCQlpZiAoIHNlbGYubWVudVR5cGUgPT09ICJvdmVybGF5IiApIHsKCQkJCQkJCXNlbGYuY2xvc2UoKTsKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJfQoJCQkJCX0pOwoJCQkJfQoKCQkJCS8vIHRyYWNrIHRoaXMgZGVwZW5kZW5jeSBzbyB0aGF0IHdoZW4gdGhlIHBhcmVudCBwYWdlCgkJCQkvLyBpcyByZW1vdmVkIG9uIHBhZ2VoaWRlIGl0IHdpbGwgYWxzbyByZW1vdmUgdGhlIG1lbnVwYWdlCgkJCQlzZWxmLnRoaXNQYWdlLmFkZERlcGVuZGVudHMoIHRoaXMubWVudVBhZ2UgKTsKCQkJfSwKCgkJCV9pc1JlYnVpbGRSZXF1aXJlZDogZnVuY3Rpb24oKSB7CgkJCQl2YXIgbGlzdCA9IHRoaXMubGlzdC5maW5kKCAibGkiICksCgkJCQkJb3B0aW9ucyA9IHRoaXMuX3NlbGVjdE9wdGlvbnMoKTsKCgkJCQkvLyBUT0RPIGV4Y2VlZGluZ2x5IG5haXZlIG1ldGhvZCB0byBkZXRlcm1pbmUgZGlmZmVyZW5jZQoJCQkJLy8gaWdub3JlcyB2YWx1ZSBjaGFuZ2VzIGV0YyBpbiBmYXZvciBvZiBhIGZvcmNlZFJlYnVpbGQKCQkJCS8vIGZyb20gdGhlIHVzZXIgaW4gdGhlIHJlZnJlc2ggbWV0aG9kCgkJCQlyZXR1cm4gb3B0aW9ucy50ZXh0KCkgIT09IGxpc3QudGV4dCgpOwoJCQl9LAoKCQkJc2VsZWN0ZWQ6IGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuIHRoaXMuX3NlbGVjdE9wdGlvbnMoKS5maWx0ZXIoICI6c2VsZWN0ZWQ6bm90KCA6anFtRGF0YShwbGFjZWhvbGRlcj0ndHJ1ZScpICkiICk7CgkJCX0sCgoJCQlyZWZyZXNoOiBmdW5jdGlvbiggZm9yY2VSZWJ1aWxkICwgZm9vICkgewoJCQkJdmFyIHNlbGYgPSB0aGlzLAoJCQkJc2VsZWN0ID0gdGhpcy5lbGVtZW50LAoJCQkJaXNNdWx0aXBsZSA9IHRoaXMuaXNNdWx0aXBsZSwKCQkJCWluZGljaWVzOwoKCQkJCWlmICggIGZvcmNlUmVidWlsZCB8fCB0aGlzLl9pc1JlYnVpbGRSZXF1aXJlZCgpICkgewoJCQkJCXNlbGYuX2J1aWxkTGlzdCgpOwoJCQkJfQoKCQkJCWluZGljaWVzID0gdGhpcy5zZWxlY3RlZEluZGljZXMoKTsKCgkJCQlzZWxmLnNldEJ1dHRvblRleHQoKTsKCQkJCXNlbGYuc2V0QnV0dG9uQ291bnQoKTsKCgkJCQlzZWxmLmxpc3QuZmluZCggImxpOm5vdCgudWktbGktZGl2aWRlcikiICkKCQkJCQkucmVtb3ZlQ2xhc3MoICQubW9iaWxlLmFjdGl2ZUJ0bkNsYXNzICkKCQkJCQkuYXR0ciggImFyaWEtc2VsZWN0ZWQiLCBmYWxzZSApCgkJCQkJLmVhY2goZnVuY3Rpb24oIGkgKSB7CgoJCQkJCQlpZiAoICQuaW5BcnJheSggaSwgaW5kaWNpZXMgKSA+IC0xICkgewoJCQkJCQkJdmFyIGl0ZW0gPSAkKCB0aGlzICk7CgoJCQkJCQkJLy8gQXJpYSBzZWxlY3RlZCBhdHRyCgkJCQkJCQlpdGVtLmF0dHIoICJhcmlhLXNlbGVjdGVkIiwgdHJ1ZSApOwoKCQkJCQkJCS8vIE11bHRpcGxlIHNlbGVjdHM6IGFkZCB0aGUgIm9uIiBjaGVja2JveCBzdGF0ZSB0byB0aGUgaWNvbgoJCQkJCQkJaWYgKCBzZWxmLmlzTXVsdGlwbGUgKSB7CgkJCQkJCQkJaXRlbS5maW5kKCAiLnVpLWljb24iICkucmVtb3ZlQ2xhc3MoICJ1aS1pY29uLWNoZWNrYm94LW9mZiIgKS5hZGRDbGFzcyggInVpLWljb24tY2hlY2tib3gtb24iICk7CgkJCQkJCQl9IGVsc2UgewoJCQkJCQkJCWlmICggaXRlbS5pcyggIi51aS1zZWxlY3RtZW51LXBsYWNlaG9sZGVyIiApICkgewoJCQkJCQkJCQlpdGVtLm5leHQoKS5hZGRDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJCQkJCQl9IGVsc2UgewoJCQkJCQkJCQlpdGVtLmFkZENsYXNzKCAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApOwoJCQkJCQkJCX0KCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0pOwoJCQl9LAoKCQkJY2xvc2U6IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgIXRoaXMuaXNPcGVuICkgewoJCQkJCXJldHVybjsKCQkJCX0KCgkJCQl2YXIgc2VsZiA9IHRoaXM7CgoJCQkJaWYgKCBzZWxmLm1lbnVUeXBlID09PSAicGFnZSIgKSB7CgkJCQkJLy8gZG9lc24ndCBzb2x2ZSB0aGUgcG9zc2libGUgaXNzdWUgd2l0aCBjYWxsaW5nIGNoYW5nZSBwYWdlCgkJCQkJLy8gd2hlcmUgdGhlIG9iamVjdHMgZG9uJ3QgZGVmaW5lIGRhdGEgdXJscyB3aGljaCBwcmV2ZW50cyBkaWFsb2cga2V5CgkJCQkJLy8gc3RyaXBwaW5nIC0gY2hhbmdlUGFnZSBoYXMgaW5jb21pbmcgcmVmYWN0b3IKCQkJCQkkLm1vYmlsZS5iYWNrKCk7CgkJCQl9IGVsc2UgewoJCQkJCXNlbGYubGlzdGJveC5wb3B1cCggImNsb3NlIiApOwoJCQkJCXNlbGYubGlzdC5hcHBlbmRUbyggc2VsZi5saXN0Ym94ICk7CgkJCQkJc2VsZi5fZm9jdXNCdXR0b24oKTsKCQkJCX0KCgkJCQkvLyBhbGxvdyB0aGUgZGlhbG9nIHRvIGJlIGNsb3NlZCBhZ2FpbgoJCQkJc2VsZi5pc09wZW4gPSBmYWxzZTsKCQkJfSwKCgkJCW9wZW46IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCXZhciBzZWxmID0gdGhpcywKCQkJCQkkd2luZG93ID0gJCggd2luZG93ICksCgkJCQkJc2VsZkxpc3RQYXJlbnQgPSBzZWxmLmxpc3QucGFyZW50KCksCgkJCQkJbWVudUhlaWdodCA9IHNlbGZMaXN0UGFyZW50Lm91dGVySGVpZ2h0KCksCgkJCQkJbWVudVdpZHRoID0gc2VsZkxpc3RQYXJlbnQub3V0ZXJXaWR0aCgpLAoJCQkJCWFjdGl2ZVBhZ2UgPSAkKCAiLiIgKyAkLm1vYmlsZS5hY3RpdmVQYWdlQ2xhc3MgKSwKCQkJCQlzY3JvbGxUb3AgPSAkd2luZG93LnNjcm9sbFRvcCgpLAoJCQkJCWJ0bk9mZnNldCA9IHNlbGYuYnV0dG9uLm9mZnNldCgpLnRvcCwKCQkJCQlzY3JlZW5IZWlnaHQgPSAkd2luZG93LmhlaWdodCgpLAoJCQkJCXNjcmVlbldpZHRoID0gJHdpbmRvdy53aWR0aCgpOwoKCQkJCS8vYWRkIGFjdGl2ZSBjbGFzcyB0byBidXR0b24KCQkJCXNlbGYuYnV0dG9uLmFkZENsYXNzKCAkLm1vYmlsZS5hY3RpdmVCdG5DbGFzcyApOwoKCQkJCS8vcmVtb3ZlIGFmdGVyIGRlbGF5CgkJCQlzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsKCQkJCQlzZWxmLmJ1dHRvbi5yZW1vdmVDbGFzcyggJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKTsKCQkJCX0sIDMwMCk7CgoJCQkJZnVuY3Rpb24gZm9jdXNNZW51SXRlbSgpIHsKCQkJCQl2YXIgc2VsZWN0b3IgPSBzZWxmLmxpc3QuZmluZCggIi4iICsgJC5tb2JpbGUuYWN0aXZlQnRuQ2xhc3MgKyAiIGEiICk7CgkJCQkJaWYgKCBzZWxlY3Rvci5sZW5ndGggPT09IDAgKSB7CgkJCQkJCXNlbGVjdG9yID0gc2VsZi5saXN0LmZpbmQoICJsaS51aS1idG46bm90KCA6anFtRGF0YShwbGFjZWhvbGRlcj0ndHJ1ZScpICkgYSIgKTsKCQkJCQl9CgkJCQkJc2VsZWN0b3IuZmlyc3QoKS5mb2N1cygpLmNsb3Nlc3QoICJsaSIgKS5hZGRDbGFzcyggInVpLWJ0bi1kb3duLSIgKyB3aWRnZXQub3B0aW9ucy50aGVtZSApOwoJCQkJfQoKCQkJCWlmICggbWVudUhlaWdodCA+IHNjcmVlbkhlaWdodCAtIDgwIHx8ICEkLnN1cHBvcnQuc2Nyb2xsVG9wICkgewoKCQkJCQlzZWxmLm1lbnVQYWdlLmFwcGVuZFRvKCAkLm1vYmlsZS5wYWdlQ29udGFpbmVyICkucGFnZSgpOwoJCQkJCXNlbGYubWVudVBhZ2VDb250ZW50ID0gbWVudVBhZ2UuZmluZCggIi51aS1jb250ZW50IiApOwoJCQkJCXNlbGYubWVudVBhZ2VDbG9zZSA9IG1lbnVQYWdlLmZpbmQoICIudWktaGVhZGVyIGEiICk7CgoJCQkJCS8vIHByZXZlbnQgdGhlIHBhcmVudCBwYWdlIGZyb20gYmVpbmcgcmVtb3ZlZCBmcm9tIHRoZSBET00sCgkJCQkJLy8gb3RoZXJ3aXNlIHRoZSByZXN1bHRzIG9mIHNlbGVjdGluZyBhIGxpc3QgaXRlbSBpbiB0aGUgZGlhbG9nCgkJCQkJLy8gZmFsbCBpbnRvIGEgYmxhY2sgaG9sZQoJCQkJCXNlbGYudGhpc1BhZ2UudW5iaW5kKCAicGFnZWhpZGUucmVtb3ZlIiApOwoKCQkJCQkvL2ZvciBXZWJPUy9PcGVyYSBNaW5pIChzZXQgbGFzdHNjcm9sbCB1c2luZyBidXR0b24gb2Zmc2V0KQoJCQkJCWlmICggc2Nyb2xsVG9wID09PSAwICYmIGJ0bk9mZnNldCA+IHNjcmVlbkhlaWdodCApIHsKCQkJCQkJc2VsZi50aGlzUGFnZS5vbmUoICJwYWdlaGlkZSIsIGZ1bmN0aW9uKCkgewoJCQkJCQkJJCggdGhpcyApLmpxbURhdGEoICJsYXN0U2Nyb2xsIiwgYnRuT2Zmc2V0ICk7CgkJCQkJCX0pOwoJCQkJCX0KCgkJCQkJc2VsZi5tZW51UGFnZS5vbmUoICJwYWdlc2hvdyIsIGZ1bmN0aW9uKCkgewoJCQkJCQlmb2N1c01lbnVJdGVtKCk7CgkJCQkJCXNlbGYuaXNPcGVuID0gdHJ1ZTsKCQkJCQl9KTsKCgkJCQkJc2VsZi5tZW51VHlwZSA9ICJwYWdlIjsKCQkJCQlzZWxmLm1lbnVQYWdlQ29udGVudC5hcHBlbmQoIHNlbGYubGlzdCApOwoJCQkJCXNlbGYubWVudVBhZ2UuZmluZCgiZGl2IC51aS10aXRsZSIpLnRleHQoc2VsZi5sYWJlbC50ZXh0KCkpOwoJCQkJCSQubW9iaWxlLmNoYW5nZVBhZ2UoIHNlbGYubWVudVBhZ2UsIHsKCQkJCQkJdHJhbnNpdGlvbjogJC5tb2JpbGUuZGVmYXVsdERpYWxvZ1RyYW5zaXRpb24KCQkJCQl9KTsKCQkJCX0gZWxzZSB7CgkJCQkJc2VsZi5tZW51VHlwZSA9ICJvdmVybGF5IjsKCgkJCQkJc2VsZi5saXN0Ym94CgkJCQkJCS5vbmUoICJwb3B1cGFmdGVyb3BlbiIsIGZvY3VzTWVudUl0ZW0gKQoJCQkJCQkucG9wdXAoICJvcGVuIiwgewoJCQkJCQkJeDogc2VsZi5idXR0b24ub2Zmc2V0KCkubGVmdCArIHNlbGYuYnV0dG9uLm91dGVyV2lkdGgoKSAvIDIsCgkJCQkJCQl5OiBzZWxmLmJ1dHRvbi5vZmZzZXQoKS50b3AgKyBzZWxmLmJ1dHRvbi5vdXRlckhlaWdodCgpIC8gMgoJCQkJCQl9KTsKCgkJCQkJLy8gZHVwbGljYXRlIHdpdGggdmFsdWUgc2V0IGluIHBhZ2Ugc2hvdyBmb3IgZGlhbG9nIHNpemVkIHNlbGVjdHMKCQkJCQlzZWxmLmlzT3BlbiA9IHRydWU7CgkJCQl9CgkJCX0sCgoJCQlfYnVpbGRMaXN0OiBmdW5jdGlvbigpIHsKCQkJCXZhciBzZWxmID0gdGhpcywKCQkJCQlvID0gdGhpcy5vcHRpb25zLAoJCQkJCXBsYWNlaG9sZGVyID0gdGhpcy5wbGFjZWhvbGRlciwKCQkJCQluZWVkUGxhY2Vob2xkZXIgPSB0cnVlLAoJCQkJCW9wdGdyb3VwcyA9IFtdLAoJCQkJCWxpcyA9IFtdLAoJCQkJCWRhdGFJY29uID0gc2VsZi5pc011bHRpcGxlID8gImNoZWNrYm94LW9mZiIgOiAiZmFsc2UiOwoKCQkJCXNlbGYubGlzdC5lbXB0eSgpLmZpbHRlciggIi51aS1saXN0dmlldyIgKS5saXN0dmlldyggImRlc3Ryb3kiICk7CgoJCQkJdmFyICRvcHRpb25zID0gc2VsZi5zZWxlY3QuZmluZCggIm9wdGlvbiIgKSwKCQkJCQludW1PcHRpb25zID0gJG9wdGlvbnMubGVuZ3RoLAoJCQkJCXNlbGVjdCA9IHRoaXMuc2VsZWN0WyAwIF0sCgkJCQkJZGF0YVByZWZpeCA9ICdkYXRhLScgKyAkLm1vYmlsZS5ucywKCQkJCQlkYXRhSW5kZXhBdHRyID0gZGF0YVByZWZpeCArICdvcHRpb24taW5kZXgnLAoJCQkJCWRhdGFJY29uQXR0ciA9IGRhdGFQcmVmaXggKyAnaWNvbicsCgkJCQkJZGF0YVJvbGVBdHRyID0gZGF0YVByZWZpeCArICdyb2xlJywKCQkJCQlkYXRhUGxhY2Vob2xkZXJBdHRyID0gZGF0YVByZWZpeCArICdwbGFjZWhvbGRlcicsCgkJCQkJZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksCgkJCQkJaXNQbGFjZWhvbGRlckl0ZW0gPSBmYWxzZSwKCQkJCQlvcHRHcm91cDsKCgkJCQlmb3IgKHZhciBpID0gMDsgaSA8IG51bU9wdGlvbnM7aSsrLCBpc1BsYWNlaG9sZGVySXRlbSA9IGZhbHNlKSB7CgkJCQkJdmFyIG9wdGlvbiA9ICRvcHRpb25zW2ldLAoJCQkJCQkkb3B0aW9uID0gJCggb3B0aW9uICksCgkJCQkJCXBhcmVudCA9IG9wdGlvbi5wYXJlbnROb2RlLAoJCQkJCQl0ZXh0ID0gJG9wdGlvbi50ZXh0KCksCgkJCQkJCWFuY2hvciAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnYScgKSwKCQkJCQkJY2xhc3NlcyA9IFtdOwoKCQkJCQlhbmNob3Iuc2V0QXR0cmlidXRlKCAnaHJlZicsICcjJyApOwoJCQkJCWFuY2hvci5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIHRleHQgKSApOwoKCQkJCQkvLyBBcmUgd2UgaW5zaWRlIGFuIG9wdGdyb3VwPwoJCQkJCWlmICggcGFyZW50ICE9PSBzZWxlY3QgJiYgcGFyZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJvcHRncm91cCIgKSB7CgkJCQkJCXZhciBvcHRMYWJlbCA9IHBhcmVudC5nZXRBdHRyaWJ1dGUoICdsYWJlbCcgKTsKCQkJCQkJaWYgKCBvcHRMYWJlbCAhPT0gb3B0R3JvdXAgKSB7CgkJCQkJCQl2YXIgZGl2aWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdsaScgKTsKCQkJCQkJCWRpdmlkZXIuc2V0QXR0cmlidXRlKCBkYXRhUm9sZUF0dHIsICdsaXN0LWRpdmlkZXInICk7CgkJCQkJCQlkaXZpZGVyLnNldEF0dHJpYnV0ZSggJ3JvbGUnLCAnb3B0aW9uJyApOwoJCQkJCQkJZGl2aWRlci5zZXRBdHRyaWJ1dGUoICd0YWJpbmRleCcsICctMScgKTsKCQkJCQkJCWRpdmlkZXIuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCBvcHRMYWJlbCApICk7CgkJCQkJCQlmcmFnbWVudC5hcHBlbmRDaGlsZCggZGl2aWRlciApOwoJCQkJCQkJb3B0R3JvdXAgPSBvcHRMYWJlbDsKCQkJCQkJfQoJCQkJCX0KCgkJCQkJaWYgKCBuZWVkUGxhY2Vob2xkZXIgJiYgKCAhb3B0aW9uLmdldEF0dHJpYnV0ZSggInZhbHVlIiApIHx8IHRleHQubGVuZ3RoID09PSAwIHx8ICRvcHRpb24uanFtRGF0YSggInBsYWNlaG9sZGVyIiApICkgKSB7CgkJCQkJCW5lZWRQbGFjZWhvbGRlciA9IGZhbHNlOwoJCQkJCQlpc1BsYWNlaG9sZGVySXRlbSA9IHRydWU7CgoJCQkJCQkvLyBJZiB3ZSBoYXZlIGlkZW50aWZpZWQgYSBwbGFjZWhvbGRlciwgbWFyayBpdCByZXRyb2FjdGl2ZWx5IGluIHRoZSBzZWxlY3QgYXMgd2VsbAoJCQkJCQlvcHRpb24uc2V0QXR0cmlidXRlKCBkYXRhUGxhY2Vob2xkZXJBdHRyLCB0cnVlICk7CgkJCQkJCWlmICggby5oaWRlUGxhY2Vob2xkZXJNZW51SXRlbXMgKSB7CgkJCQkJCQljbGFzc2VzLnB1c2goICJ1aS1zZWxlY3RtZW51LXBsYWNlaG9sZGVyIiApOwoJCQkJCQl9CgkJCQkJCWlmICghcGxhY2Vob2xkZXIpIHsKCQkJCQkJCXBsYWNlaG9sZGVyID0gc2VsZi5wbGFjZWhvbGRlciA9IHRleHQ7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCXZhciBpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKCQkJCQlpZiAoIG9wdGlvbi5kaXNhYmxlZCApIHsKCQkJCQkJY2xhc3Nlcy5wdXNoKCAidWktZGlzYWJsZWQiICk7CgkJCQkJCWl0ZW0uc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJyx0cnVlKTsKCQkJCQl9CgkJCQkJaXRlbS5zZXRBdHRyaWJ1dGUoIGRhdGFJbmRleEF0dHIsaSApOwoJCQkJCWl0ZW0uc2V0QXR0cmlidXRlKCBkYXRhSWNvbkF0dHIsIGRhdGFJY29uICk7CgkJCQkJaWYgKCBpc1BsYWNlaG9sZGVySXRlbSApIHsKCQkJCQkJaXRlbS5zZXRBdHRyaWJ1dGUoIGRhdGFQbGFjZWhvbGRlckF0dHIsIHRydWUgKTsKCQkJCQl9CgkJCQkJaXRlbS5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oICIgIiApOwoJCQkJCWl0ZW0uc2V0QXR0cmlidXRlKCAncm9sZScsICdvcHRpb24nICk7CgkJCQkJYW5jaG9yLnNldEF0dHJpYnV0ZSggJ3RhYmluZGV4JywgJy0xJyApOwoJCQkJCWl0ZW0uYXBwZW5kQ2hpbGQoIGFuY2hvciApOwoJCQkJCWZyYWdtZW50LmFwcGVuZENoaWxkKCBpdGVtICk7CgkJCQl9CgoJCQkJc2VsZi5saXN0WzBdLmFwcGVuZENoaWxkKCBmcmFnbWVudCApOwoKCQkJCS8vIEhpZGUgaGVhZGVyIGlmIGl0J3Mgbm90IGEgbXVsdGlzZWxlY3QgYW5kIHRoZXJlJ3Mgbm8gcGxhY2Vob2xkZXIKCQkJCWlmICggIXRoaXMuaXNNdWx0aXBsZSAmJiAhcGxhY2Vob2xkZXIubGVuZ3RoICkgewoJCQkJCXRoaXMuaGVhZGVyLmhpZGUoKTsKCQkJCX0gZWxzZSB7CgkJCQkJdGhpcy5oZWFkZXJUaXRsZS50ZXh0KCB0aGlzLnBsYWNlaG9sZGVyICk7CgkJCQl9CgoJCQkJLy8gTm93IHBvcHVsYXRlZCwgY3JlYXRlIGxpc3R2aWV3CgkJCQlzZWxmLmxpc3QubGlzdHZpZXcoKTsKCQkJfSwKCgkJCV9idXR0b246IGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuICQoICI8YT4iLCB7CgkJCQkJImhyZWYiOiAiIyIsCgkJCQkJInJvbGUiOiAiYnV0dG9uIiwKCQkJCQkvLyBUT0RPIHZhbHVlIGlzIHVuZGVmaW5lZCBhdCBjcmVhdGlvbgoJCQkJCSJpZCI6IHRoaXMuYnV0dG9uSWQsCgkJCQkJImFyaWEtaGFzcG9wdXAiOiAidHJ1ZSIsCgoJCQkJCS8vIFRPRE8gdmFsdWUgaXMgdW5kZWZpbmVkIGF0IGNyZWF0aW9uCgkJCQkJImFyaWEtb3ducyI6IHRoaXMubWVudUlkCgkJCQl9KTsKCQkJfQoJCX0pOwoJfTsKCgkvLyBpc3N1ZSAjMzg5NCAtIGNvcmUgZG9lc24ndCB0cmlnZ2VyIGV2ZW50cyBvbiBkaXNhYmxlZCBkZWxlZ2F0ZXMKCSQoIGRvY3VtZW50ICkuYmluZCggInNlbGVjdG1lbnViZWZvcmVjcmVhdGUiLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJdmFyIHNlbGVjdG1lbnVXaWRnZXQgPSAkKCBldmVudC50YXJnZXQgKS5kYXRhKCAic2VsZWN0bWVudSIgKTsKCgkJaWYgKCAhc2VsZWN0bWVudVdpZGdldC5vcHRpb25zLm5hdGl2ZU1lbnUgJiYKCQkJCXNlbGVjdG1lbnVXaWRnZXQuZWxlbWVudC5wYXJlbnRzKCAiOmpxbURhdGEocm9sZT0ncG9wdXAnKSIgKS5sZW5ndGggPT09IDAgKSB7CgkJCWV4dGVuZFNlbGVjdCggc2VsZWN0bWVudVdpZGdldCApOwoJCX0KCX0pOwp9KSggalF1ZXJ5ICk7CgooZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHsKCgoJJC53aWRnZXQoICJtb2JpbGUuZml4ZWR0b29sYmFyIiwgJC5tb2JpbGUud2lkZ2V0LCB7CgkJb3B0aW9uczogewoJCQl2aXNpYmxlT25QYWdlU2hvdzogdHJ1ZSwKCQkJZGlzYWJsZVBhZ2Vab29tOiB0cnVlLAoJCQl0cmFuc2l0aW9uOiAic2xpZGUiLCAvL2NhbiBiZSBub25lLCBmYWRlLCBzbGlkZSAoc2xpZGUgbWFwcyB0byBzbGlkZXVwIG9yIHNsaWRlZG93bikKCQkJZnVsbHNjcmVlbjogZmFsc2UsCgkJCXRhcFRvZ2dsZTogdHJ1ZSwKCQkJdGFwVG9nZ2xlQmxhY2tsaXN0OiAiYSwgYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgLnVpLWhlYWRlci1maXhlZCwgLnVpLWZvb3Rlci1maXhlZCwgLnVpLXBvcHVwIiwKCQkJaGlkZUR1cmluZ0ZvY3VzOiAiaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QiLAoJCQl1cGRhdGVQYWdlUGFkZGluZzogdHJ1ZSwKCQkJdHJhY2tQZXJzaXN0ZW50VG9vbGJhcnM6IHRydWUsCgoJCQkvLyBCcm93c2VyIGRldGVjdGlvbiEgV2VlZWUsIGhlcmUgd2UgZ28uLi4KCQkJLy8gVW5mb3J0dW5hdGVseSwgcG9zaXRpb246Zml4ZWQgaXMgY29zdGx5LCBub3QgdG8gbWVudGlvbiBwcm9iYWJseSBpbXBvc3NpYmxlLCB0byBmZWF0dXJlLWRldGVjdCBhY2N1cmF0ZWx5LgoJCQkvLyBTb21lIHRlc3RzIGV4aXN0LCBidXQgdGhleSBjdXJyZW50bHkgcmV0dXJuIGZhbHNlIHJlc3VsdHMgaW4gY3JpdGljYWwgZGV2aWNlcyBhbmQgYnJvd3NlcnMsIHdoaWNoIGNvdWxkIGxlYWQgdG8gYSBicm9rZW4gZXhwZXJpZW5jZS4KCQkJLy8gVGVzdGluZyBmaXhlZCBwb3NpdGlvbmluZyBpcyBhbHNvIHByZXR0eSBvYnRydXNpdmUgdG8gcGFnZSBsb2FkLCByZXF1aXJpbmcgaW5qZWN0ZWQgZWxlbWVudHMgYW5kIHNjcm9sbGluZyB0aGUgd2luZG93CgkJCS8vIFRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gc2VydmVzIHRvIHJ1bGUgb3V0IHNvbWUgcG9wdWxhciBicm93c2VycyB3aXRoIGtub3duIGZpeGVkLXBvc2l0aW9uaW5nIGlzc3VlcwoJCQkvLyBUaGlzIGlzIGEgcGx1Z2luIG9wdGlvbiBsaWtlIGFueSBvdGhlciwgc28gZmVlbCBmcmVlIHRvIGltcHJvdmUgb3Igb3ZlcndyaXRlIGl0CgkJCXN1cHBvcnRCbGFja2xpc3Q6IGZ1bmN0aW9uKCkgewoJCQkJdmFyIHcgPSB3aW5kb3csCgkJCQkJdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LAoJCQkJCXBsYXRmb3JtID0gbmF2aWdhdG9yLnBsYXRmb3JtLAoJCQkJCS8vIFJlbmRlcmluZyBlbmdpbmUgaXMgV2Via2l0LCBhbmQgY2FwdHVyZSBtYWpvciB2ZXJzaW9uCgkJCQkJd2ttYXRjaCA9IHVhLm1hdGNoKCAvQXBwbGVXZWJLaXRcLyhbMC05XSspLyApLAoJCQkJCXdrdmVyc2lvbiA9ICEhd2ttYXRjaCAmJiB3a21hdGNoWyAxIF0sCgkJCQkJZmZtYXRjaCA9IHVhLm1hdGNoKCAvRmVubmVjXC8oWzAtOV0rKS8gKSwKCQkJCQlmZnZlcnNpb24gPSAhIWZmbWF0Y2ggJiYgZmZtYXRjaFsgMSBdLAoJCQkJCW9wZXJhbW1vYmlsZW1hdGNoID0gdWEubWF0Y2goIC9PcGVyYSBNb2JpXC8oWzAtOV0rKS8gKSwKCQkJCQlvbXZlcnNpb24gPSAhIW9wZXJhbW1vYmlsZW1hdGNoICYmIG9wZXJhbW1vYmlsZW1hdGNoWyAxIF07CgoJCQkJaWYoCgkJCQkJLy8gaU9TIDQuMyBhbmQgb2xkZXIgOiBQbGF0Zm9ybSBpcyBpUGhvbmUvUGFkL1RvdWNoIGFuZCBXZWJraXQgdmVyc2lvbiBpcyBsZXNzIHRoYW4gNTM0IChpb3M1KQoJCQkJCSggKCBwbGF0Zm9ybS5pbmRleE9mKCAiaVBob25lIiApID4gLTEgfHwgcGxhdGZvcm0uaW5kZXhPZiggImlQYWQiICkgPiAtMSAgfHwgcGxhdGZvcm0uaW5kZXhPZiggImlQb2QiICkgPiAtMSApICYmIHdrdmVyc2lvbiAmJiB3a3ZlcnNpb24gPCA1MzQgKSB8fAoJCQkJCS8vIE9wZXJhIE1pbmkKCQkJCQkoIHcub3BlcmFtaW5pICYmICh7fSkudG9TdHJpbmcuY2FsbCggdy5vcGVyYW1pbmkgKSA9PT0gIltvYmplY3QgT3BlcmFNaW5pXSIgKSB8fAoJCQkJCSggb3BlcmFtbW9iaWxlbWF0Y2ggJiYgb212ZXJzaW9uIDwgNzQ1OCApCXx8CgkJCQkJLy9BbmRyb2lkIGx0ZSAyLjE6IFBsYXRmb3JtIGlzIEFuZHJvaWQgYW5kIFdlYmtpdCB2ZXJzaW9uIGlzIGxlc3MgdGhhbiA1MzMgKEFuZHJvaWQgMi4yKQoJCQkJCSggdWEuaW5kZXhPZiggIkFuZHJvaWQiICkgPiAtMSAmJiB3a3ZlcnNpb24gJiYgd2t2ZXJzaW9uIDwgNTMzICkgfHwKCQkJCQkvLyBGaXJlZm94IE1vYmlsZSBiZWZvcmUgNi4wIC0KCQkJCQkoIGZmdmVyc2lvbiAmJiBmZnZlcnNpb24gPCA2ICkgfHwKCQkJCQkvLyBXZWJPUyBsZXNzIHRoYW4gMwoJCQkJCSggInBhbG1HZXRSZXNvdXJjZSIgaW4gd2luZG93ICYmIHdrdmVyc2lvbiAmJiB3a3ZlcnNpb24gPCA1MzQgKQl8fAoJCQkJCS8vIE1lZUdvCgkJCQkJKCB1YS5pbmRleE9mKCAiTWVlR28iICkgPiAtMSAmJiB1YS5pbmRleE9mKCAiTm9raWFCcm93c2VyLzguNS4wIiApID4gLTEgKSApIHsKCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCX0KCgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0sCgkJCWluaXRTZWxlY3RvcjogIjpqcW1EYXRhKHBvc2l0aW9uPSdmaXhlZCcpIgoJCX0sCgoJCV9jcmVhdGU6IGZ1bmN0aW9uKCkgewoKCQkJdmFyIHNlbGYgPSB0aGlzLAoJCQkJbyA9IHNlbGYub3B0aW9ucywKCQkJCSRlbCA9IHNlbGYuZWxlbWVudCwKCQkJCXRidHlwZSA9ICRlbC5pcyggIjpqcW1EYXRhKHJvbGU9J2hlYWRlcicpIiApID8gImhlYWRlciIgOiAiZm9vdGVyIiwKCQkJCSRwYWdlID0gJGVsLmNsb3Nlc3QoICIudWktcGFnZSIgKTsKCgkJCS8vIEZlYXR1cmUgZGV0ZWN0aW5nIHN1cHBvcnQgZm9yCgkJCWlmICggby5zdXBwb3J0QmxhY2tsaXN0KCkgKSB7CgkJCQlzZWxmLmRlc3Ryb3koKTsKCQkJCXJldHVybjsKCQkJfQoKCQkJJGVsLmFkZENsYXNzKCAidWktIisgdGJ0eXBlICsiLWZpeGVkIiApOwoKCQkJLy8gImZ1bGxzY3JlZW4iIG92ZXJsYXkgcG9zaXRpb25pbmcKCQkJaWYgKCBvLmZ1bGxzY3JlZW4gKSB7CgkJCQkkZWwuYWRkQ2xhc3MoICJ1aS0iKyB0YnR5cGUgKyItZnVsbHNjcmVlbiIgKTsKCQkJCSRwYWdlLmFkZENsYXNzKCAidWktcGFnZS0iICsgdGJ0eXBlICsgIi1mdWxsc2NyZWVuIiApOwoJCQl9CgkJCS8vIElmIG5vdCBmdWxsc2NyZWVuLCBhZGQgY2xhc3MgdG8gcGFnZSB0byBzZXQgdG9wIG9yIGJvdHRvbSBwYWRkaW5nCgkJCWVsc2V7CgkJCQkkcGFnZS5hZGRDbGFzcyggInVpLXBhZ2UtIiArIHRidHlwZSArICItZml4ZWQiICk7CgkJCX0KCgkJCXNlbGYuX2FkZFRyYW5zaXRpb25DbGFzcygpOwoJCQlzZWxmLl9iaW5kUGFnZUV2ZW50cygpOwoJCQlzZWxmLl9iaW5kVG9nZ2xlSGFuZGxlcnMoKTsKCQl9LAoKCQlfYWRkVHJhbnNpdGlvbkNsYXNzOiBmdW5jdGlvbigpIHsKCQkJdmFyIHRjbGFzcyA9IHRoaXMub3B0aW9ucy50cmFuc2l0aW9uOwoKCQkJaWYgKCB0Y2xhc3MgJiYgdGNsYXNzICE9PSAibm9uZSIgKSB7CgkJCQkvLyB1c2UgYXBwcm9wcmlhdGUgc2xpZGUgZm9yIGhlYWRlciBvciBmb290ZXIKCQkJCWlmICggdGNsYXNzID09PSAic2xpZGUiICkgewoJCQkJCXRjbGFzcyA9IHRoaXMuZWxlbWVudC5pcyggIi51aS1oZWFkZXIiICkgPyAic2xpZGVkb3duIiA6ICJzbGlkZXVwIjsKCQkJCX0KCgkJCQl0aGlzLmVsZW1lbnQuYWRkQ2xhc3MoIHRjbGFzcyApOwoJCQl9CgkJfSwKCgkJX2JpbmRQYWdlRXZlbnRzOiBmdW5jdGlvbigpIHsKCQkJdmFyIHNlbGYgPSB0aGlzLAoJCQkJbyA9IHNlbGYub3B0aW9ucywKCQkJCSRlbCA9IHNlbGYuZWxlbWVudDsKCgkJCS8vcGFnZSBldmVudCBiaW5kaW5ncwoJCQkvLyBGaXhlZCB0b29sYmFycyByZXF1aXJlIHBhZ2Ugem9vbSB0byBiZSBkaXNhYmxlZCwgb3RoZXJ3aXNlIHVzYWJpbGl0eSBpc3N1ZXMgY3JvcCB1cAoJCQkvLyBUaGlzIG1ldGhvZCBpcyBtZWFudCB0byBkaXNhYmxlIHpvb20gd2hpbGUgYSBmaXhlZC1wb3NpdGlvbmVkIHRvb2xiYXIgcGFnZSBpcyB2aXNpYmxlCgkJCSRlbC5jbG9zZXN0KCAiLnVpLXBhZ2UiICkKCQkJCS5iaW5kKCAicGFnZWJlZm9yZXNob3ciLCBmdW5jdGlvbigpIHsKCQkJCQlpZiAoIG8uZGlzYWJsZVBhZ2Vab29tICkgewoJCQkJCQkkLm1vYmlsZS56b29tLmRpc2FibGUoIHRydWUgKTsKCQkJCQl9CgkJCQkJaWYgKCAhby52aXNpYmxlT25QYWdlU2hvdyApIHsKCQkJCQkJc2VsZi5oaWRlKCB0cnVlICk7CgkJCQkJfQoJCQkJfSApCgkJCQkuYmluZCggIndlYmtpdEFuaW1hdGlvblN0YXJ0IGFuaW1hdGlvbnN0YXJ0IHVwZGF0ZWxheW91dCIsIGZ1bmN0aW9uKCkgewoJCQkJCXZhciB0aGlzUGFnZSA9IHRoaXM7CgkJCQkJaWYgKCBvLnVwZGF0ZVBhZ2VQYWRkaW5nICkgewoJCQkJCQlzZWxmLnVwZGF0ZVBhZ2VQYWRkaW5nKCB0aGlzUGFnZSApOwoJCQkJCX0KCQkJCX0pCgkJCQkuYmluZCggInBhZ2VzaG93IiwgZnVuY3Rpb24oKSB7CgkJCQkJdmFyIHRoaXNQYWdlID0gdGhpczsKCQkJCQlzZWxmLnVwZGF0ZVBhZ2VQYWRkaW5nKCB0aGlzUGFnZSApOwoJCQkJCWlmICggby51cGRhdGVQYWdlUGFkZGluZyApIHsKCQkJCQkJJCggd2luZG93ICkuYmluZCggInRocm90dGxlZHJlc2l6ZS4iICsgc2VsZi53aWRnZXROYW1lLCBmdW5jdGlvbigpIHsKCQkJCQkJCXNlbGYudXBkYXRlUGFnZVBhZGRpbmcoIHRoaXNQYWdlICk7CgkJCQkJCX0pOwoJCQkJCX0KCQkJCX0pCgkJCQkuYmluZCggInBhZ2ViZWZvcmVoaWRlIiwgZnVuY3Rpb24oIGUsIHVpICkgewoJCQkJCWlmICggby5kaXNhYmxlUGFnZVpvb20gKSB7CgkJCQkJCSQubW9iaWxlLnpvb20uZW5hYmxlKCB0cnVlICk7CgkJCQkJfQoJCQkJCWlmICggby51cGRhdGVQYWdlUGFkZGluZyApIHsKCQkJCQkJJCggd2luZG93ICkudW5iaW5kKCAidGhyb3R0bGVkcmVzaXplLiIgKyBzZWxmLndpZGdldE5hbWUgKTsKCQkJCQl9CgoJCQkJCWlmICggby50cmFja1BlcnNpc3RlbnRUb29sYmFycyApIHsKCQkJCQkJdmFyIHRoaXNGb290ZXIgPSAkKCAiLnVpLWZvb3Rlci1maXhlZDpqcW1EYXRhKGlkKSIsIHRoaXMgKSwKCQkJCQkJCXRoaXNIZWFkZXIgPSAkKCAiLnVpLWhlYWRlci1maXhlZDpqcW1EYXRhKGlkKSIsIHRoaXMgKSwKCQkJCQkJCW5leHRGb290ZXIgPSB0aGlzRm9vdGVyLmxlbmd0aCAmJiB1aS5uZXh0UGFnZSAmJiAkKCAiLnVpLWZvb3Rlci1maXhlZDpqcW1EYXRhKGlkPSciICsgdGhpc0Zvb3Rlci5qcW1EYXRhKCAiaWQiICkgKyAiJykiLCB1aS5uZXh0UGFnZSApIHx8ICQoKSwKCQkJCQkJCW5leHRIZWFkZXIgPSB0aGlzSGVhZGVyLmxlbmd0aCAmJiB1aS5uZXh0UGFnZSAmJiAkKCAiLnVpLWhlYWRlci1maXhlZDpqcW1EYXRhKGlkPSciICsgdGhpc0hlYWRlci5qcW1EYXRhKCAiaWQiICkgKyAiJykiLCB1aS5uZXh0UGFnZSApIHx8ICQoKTsKCgkJCQkJCQlpZiAoIG5leHRGb290ZXIubGVuZ3RoIHx8IG5leHRIZWFkZXIubGVuZ3RoICkgewoKCQkJCQkJCQluZXh0Rm9vdGVyLmFkZCggbmV4dEhlYWRlciApLmFwcGVuZFRvKCAkLm1vYmlsZS5wYWdlQ29udGFpbmVyICk7CgoJCQkJCQkJCXVpLm5leHRQYWdlLm9uZSggInBhZ2VzaG93IiwgZnVuY3Rpb24oKSB7CgkJCQkJCQkJCW5leHRGb290ZXIuYWRkKCBuZXh0SGVhZGVyICkuYXBwZW5kVG8oIHRoaXMgKTsKCQkJCQkJCQl9KTsKCQkJCQkJCX0KCQkJCQl9CgkJCQl9KTsKCQl9LAoKCQlfdmlzaWJsZTogdHJ1ZSwKCgkJLy8gVGhpcyB3aWxsIHNldCB0aGUgY29udGVudCBlbGVtZW50J3MgdG9wIG9yIGJvdHRvbSBwYWRkaW5nIGVxdWFsIHRvIHRoZSB0b29sYmFyJ3MgaGVpZ2h0CgkJdXBkYXRlUGFnZVBhZGRpbmc6IGZ1bmN0aW9uKCB0YlBhZ2UgKSB7CgkJCXZhciAkZWwgPSB0aGlzLmVsZW1lbnQsCgkJCQloZWFkZXIgPSAkZWwuaXMoICIudWktaGVhZGVyIiApOwoKCQkJLy8gVGhpcyBiZWhhdmlvciBvbmx5IGFwcGxpZXMgdG8gImZpeGVkIiwgbm90ICJmdWxsc2NyZWVuIgoJCQlpZiAoIHRoaXMub3B0aW9ucy5mdWxsc2NyZWVuICkgeyByZXR1cm47IH0KCgkJCXRiUGFnZSA9IHRiUGFnZSB8fCAkZWwuY2xvc2VzdCggIi51aS1wYWdlIiApOwoJCQkkKCB0YlBhZ2UgKS5jc3MoICJwYWRkaW5nLSIgKyAoIGhlYWRlciA/ICJ0b3AiIDogImJvdHRvbSIgKSwgJGVsLm91dGVySGVpZ2h0KCkgKTsKCQl9LAoKCQlfdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24oIG5vdHJhbnNpdGlvbiApIHsKCQkJdmFyICR3aW4gPSAkKCB3aW5kb3cgKSwKCQkJCSRlbCA9IHRoaXMuZWxlbWVudCwKCQkJCXNjcm9sbCA9ICR3aW4uc2Nyb2xsVG9wKCksCgkJCQllbEhlaWdodCA9ICRlbC5oZWlnaHQoKSwKCQkJCXBIZWlnaHQgPSAkZWwuY2xvc2VzdCggIi51aS1wYWdlIiApLmhlaWdodCgpLAoJCQkJdmlld3BvcnRIZWlnaHQgPSAkLm1vYmlsZS5nZXRTY3JlZW5IZWlnaHQoKSwKCQkJCXRidHlwZSA9ICRlbC5pcyggIjpqcW1EYXRhKHJvbGU9J2hlYWRlcicpIiApID8gImhlYWRlciIgOiAiZm9vdGVyIjsKCgkJCXJldHVybiAhbm90cmFuc2l0aW9uICYmCgkJCQkoIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uICYmIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uICE9PSAibm9uZSIgJiYKCQkJCSgKCQkJCQkoIHRidHlwZSA9PT0gImhlYWRlciIgJiYgIXRoaXMub3B0aW9ucy5mdWxsc2NyZWVuICYmIHNjcm9sbCA+IGVsSGVpZ2h0ICkgfHwKCQkJCQkoIHRidHlwZSA9PT0gImZvb3RlciIgJiYgIXRoaXMub3B0aW9ucy5mdWxsc2NyZWVuICYmIHNjcm9sbCArIHZpZXdwb3J0SGVpZ2h0IDwgcEhlaWdodCAtIGVsSGVpZ2h0ICkKCQkJCSkgfHwgdGhpcy5vcHRpb25zLmZ1bGxzY3JlZW4KCQkJCSk7CgkJfSwKCgkJc2hvdzogZnVuY3Rpb24oIG5vdHJhbnNpdGlvbiApIHsKCQkJdmFyIGhpZGVDbGFzcyA9ICJ1aS1maXhlZC1oaWRkZW4iLAoJCQkJJGVsID0gdGhpcy5lbGVtZW50OwoKCQkJaWYgKCB0aGlzLl91c2VUcmFuc2l0aW9uKCBub3RyYW5zaXRpb24gKSApIHsKCQkJCSRlbAoJCQkJCS5yZW1vdmVDbGFzcyggIm91dCAiICsgaGlkZUNsYXNzICkKCQkJCQkuYWRkQ2xhc3MoICJpbiIgKTsKCQkJfQoJCQllbHNlIHsKCQkJCSRlbC5yZW1vdmVDbGFzcyggaGlkZUNsYXNzICk7CgkJCX0KCQkJdGhpcy5fdmlzaWJsZSA9IHRydWU7CgkJfSwKCgkJaGlkZTogZnVuY3Rpb24oIG5vdHJhbnNpdGlvbiApIHsKCQkJdmFyIGhpZGVDbGFzcyA9ICJ1aS1maXhlZC1oaWRkZW4iLAoJCQkJJGVsID0gdGhpcy5lbGVtZW50LAoJCQkJLy8gaWYgaXQncyBhIHNsaWRlIHRyYW5zaXRpb24sIG91ciBuZXcgdHJhbnNpdGlvbnMgbmVlZCB0aGUgcmV2ZXJzZSBjbGFzcyBhcyB3ZWxsIHRvIHNsaWRlIG91dHdhcmQKCQkJCW91dGNsYXNzID0gIm91dCIgKyAoIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uID09PSAic2xpZGUiID8gIiByZXZlcnNlIiA6ICIiICk7CgoJCQlpZiggdGhpcy5fdXNlVHJhbnNpdGlvbiggbm90cmFuc2l0aW9uICkgKSB7CgkJCQkkZWwKCQkJCQkuYWRkQ2xhc3MoIG91dGNsYXNzICkKCQkJCQkucmVtb3ZlQ2xhc3MoICJpbiIgKQoJCQkJCS5hbmltYXRpb25Db21wbGV0ZShmdW5jdGlvbigpIHsKCQkJCQkJJGVsLmFkZENsYXNzKCBoaWRlQ2xhc3MgKS5yZW1vdmVDbGFzcyggb3V0Y2xhc3MgKTsKCQkJCQl9KTsKCQkJfQoJCQllbHNlIHsKCQkJCSRlbC5hZGRDbGFzcyggaGlkZUNsYXNzICkucmVtb3ZlQ2xhc3MoIG91dGNsYXNzICk7CgkJCX0KCQkJdGhpcy5fdmlzaWJsZSA9IGZhbHNlOwoJCX0sCgoJCXRvZ2dsZTogZnVuY3Rpb24oKSB7CgkJCXRoaXNbIHRoaXMuX3Zpc2libGUgPyAiaGlkZSIgOiAic2hvdyIgXSgpOwoJCX0sCgoJCV9iaW5kVG9nZ2xlSGFuZGxlcnM6IGZ1bmN0aW9uKCkgewoJCQl2YXIgc2VsZiA9IHRoaXMsCgkJCQlvID0gc2VsZi5vcHRpb25zLAoJCQkJJGVsID0gc2VsZi5lbGVtZW50OwoKCQkJLy8gdGFwIHRvZ2dsZQoJCQkkZWwuY2xvc2VzdCggIi51aS1wYWdlIiApCgkJCQkuYmluZCggInZjbGljayIsIGZ1bmN0aW9uKCBlICkgewoJCQkJCWlmICggby50YXBUb2dnbGUgJiYgISQoIGUudGFyZ2V0ICkuY2xvc2VzdCggby50YXBUb2dnbGVCbGFja2xpc3QgKS5sZW5ndGggKSB7CgkJCQkJCXNlbGYudG9nZ2xlKCk7CgkJCQkJfQoJCQkJfSkKCQkJCS5iaW5kKCAiZm9jdXNpbiBmb2N1c291dCIsIGZ1bmN0aW9uKCBlICkgewoJCQkJCWlmICggc2NyZWVuLndpZHRoIDwgNTAwICYmICQoIGUudGFyZ2V0ICkuaXMoIG8uaGlkZUR1cmluZ0ZvY3VzICkgJiYgISQoIGUudGFyZ2V0ICkuY2xvc2VzdCggIi51aS1oZWFkZXItZml4ZWQsIC51aS1mb290ZXItZml4ZWQiICkubGVuZ3RoICkgewoJCQkJCQlzZWxmWyAoIGUudHlwZSA9PT0gImZvY3VzaW4iICYmIHNlbGYuX3Zpc2libGUgKSA/ICJoaWRlIiA6ICJzaG93IiBdKCk7CgkJCQkJfQoJCQkJfSk7CgkJfSwKCgkJZGVzdHJveTogZnVuY3Rpb24oKSB7CgkJCXRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggInVpLWhlYWRlci1maXhlZCB1aS1mb290ZXItZml4ZWQgdWktaGVhZGVyLWZ1bGxzY3JlZW4gdWktZm9vdGVyLWZ1bGxzY3JlZW4gaW4gb3V0IGZhZGUgc2xpZGVkb3duIHNsaWRldXAgdWktZml4ZWQtaGlkZGVuIiApOwoJCQl0aGlzLmVsZW1lbnQuY2xvc2VzdCggIi51aS1wYWdlIiApLnJlbW92ZUNsYXNzKCAidWktcGFnZS1oZWFkZXItZml4ZWQgdWktcGFnZS1mb290ZXItZml4ZWQgdWktcGFnZS1oZWFkZXItZnVsbHNjcmVlbiB1aS1wYWdlLWZvb3Rlci1mdWxsc2NyZWVuIiApOwoJCX0KCgl9KTsKCgkvL2F1dG8gc2VsZi1pbml0IHdpZGdldHMKCSQoIGRvY3VtZW50ICkKCQkuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKSB7CgoJCQkvLyBERVBSRUNBVEVEIGluIDEuMTogc3VwcG9ydCBmb3IgZGF0YS1mdWxsc2NyZWVuPXRydWV8ZmFsc2Ugb24gdGhlIHBhZ2UgZWxlbWVudC4KCQkJLy8gVGhpcyBsaW5lIGVuc3VyZXMgaXQgc3RpbGwgd29ya3MsIGJ1dCB3ZSByZWNvbW1lbmQgbW92aW5nIHRoZSBhdHRyaWJ1dGUgdG8gdGhlIHRvb2xiYXJzIHRoZW1zZWx2ZXMuCgkJCWlmICggJCggZS50YXJnZXQgKS5qcW1EYXRhKCAiZnVsbHNjcmVlbiIgKSApIHsKCQkJCSQoICQubW9iaWxlLmZpeGVkdG9vbGJhci5wcm90b3R5cGUub3B0aW9ucy5pbml0U2VsZWN0b3IsIGUudGFyZ2V0ICkubm90KCAiOmpxbURhdGEoZnVsbHNjcmVlbikiICkuanFtRGF0YSggImZ1bGxzY3JlZW4iLCB0cnVlICk7CgkJCX0KCgkJCSQubW9iaWxlLmZpeGVkdG9vbGJhci5wcm90b3R5cGUuZW5oYW5jZVdpdGhpbiggZS50YXJnZXQgKTsKCQl9KTsKCn0pKCBqUXVlcnkgKTsKCihmdW5jdGlvbiggJCwgd2luZG93ICkgewoKCS8vIFRoaXMgZml4IGFkZHJlc3NlcyBhbiBpT1MgYnVnLCBzbyByZXR1cm4gZWFybHkgaWYgdGhlIFVBIGNsYWltcyBpdCdzIHNvbWV0aGluZyBlbHNlLgoJaWYgKCAhKC9pUGhvbmV8aVBhZHxpUG9kLy50ZXN0KCBuYXZpZ2F0b3IucGxhdGZvcm0gKSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoICJBcHBsZVdlYktpdCIgKSA+IC0xICkgKSB7CgkJcmV0dXJuOwoJfQoKICB2YXIgem9vbSA9ICQubW9iaWxlLnpvb20sCgkJZXZ0LCB4LCB5LCB6LCBhaWc7CgogIGZ1bmN0aW9uIGNoZWNrVGlsdCggZSApIHsKCQlldnQgPSBlLm9yaWdpbmFsRXZlbnQ7CgkJYWlnID0gZXZ0LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHk7CgoJCXggPSBNYXRoLmFicyggYWlnLnggKTsKCQl5ID0gTWF0aC5hYnMoIGFpZy55ICk7CgkJeiA9IE1hdGguYWJzKCBhaWcueiApOwoKCQkvLyBJZiBwb3J0cmFpdCBvcmllbnRhdGlvbiBhbmQgaW4gb25lIG9mIHRoZSBkYW5nZXIgem9uZXMKICAgIGlmICggIXdpbmRvdy5vcmllbnRhdGlvbiAmJiAoIHggPiA3IHx8ICggKCB6ID4gNiAmJiB5IDwgOCB8fCB6IDwgOCAmJiB5ID4gNiApICYmIHggPiA1ICkgKSApIHsKCQkJaWYgKCB6b29tLmVuYWJsZWQgKSB7CgkJCQl6b29tLmRpc2FibGUoKTsKCQkJfQogICAgfQllbHNlIGlmICggIXpvb20uZW5hYmxlZCApIHsKCQkJem9vbS5lbmFibGUoKTsKICAgIH0KICB9CgogICQoIHdpbmRvdyApCgkJLmJpbmQoICJvcmllbnRhdGlvbmNoYW5nZS5pb3NvcmllbnRhdGlvbmZpeCIsIHpvb20uZW5hYmxlICkKCQkuYmluZCggImRldmljZW1vdGlvbi5pb3NvcmllbnRhdGlvbmZpeCIsIGNoZWNrVGlsdCApOwoKfSggalF1ZXJ5LCB0aGlzICkpOwoKKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHsKCXZhcgkkaHRtbCA9ICQoICJodG1sIiApLAoJCQkkaGVhZCA9ICQoICJoZWFkIiApLAoJCQkkd2luZG93ID0gJCggd2luZG93ICk7CgoJLy9yZW1vdmUgaW5pdGlhbCBidWlsZCBjbGFzcyAob25seSBwcmVzZW50IG9uIGZpcnN0IHBhZ2VzaG93KQoJZnVuY3Rpb24gaGlkZVJlbmRlcmluZ0NsYXNzKCkgewoJCSRodG1sLnJlbW92ZUNsYXNzKCAidWktbW9iaWxlLXJlbmRlcmluZyIgKTsKCX0KCgkvLyB0cmlnZ2VyIG1vYmlsZWluaXQgZXZlbnQgLSB1c2VmdWwgaG9vayBmb3IgY29uZmlndXJpbmcgJC5tb2JpbGUgc2V0dGluZ3MgYmVmb3JlIHRoZXkncmUgdXNlZAoJJCggd2luZG93LmRvY3VtZW50ICkudHJpZ2dlciggIm1vYmlsZWluaXQiICk7CgoJLy8gc3VwcG9ydCBjb25kaXRpb25zCgkvLyBpZiBkZXZpY2Ugc3VwcG9ydCBjb25kaXRpb24ocykgYXJlbid0IG1ldCwgbGVhdmUgdGhpbmdzIGFzIHRoZXkgYXJlIC0+IGEgYmFzaWMsIHVzYWJsZSBleHBlcmllbmNlLAoJLy8gb3RoZXJ3aXNlLCBwcm9jZWVkIHdpdGggdGhlIGVuaGFuY2VtZW50cwoJaWYgKCAhJC5tb2JpbGUuZ3JhZGVBKCkgKSB7CgkJcmV0dXJuOwoJfQoKCS8vIG92ZXJyaWRlIGFqYXhFbmFibGVkIG9uIHBsYXRmb3JtcyB0aGF0IGhhdmUga25vd24gY29uZmxpY3RzIHdpdGggaGFzaCBoaXN0b3J5IHVwZGF0ZXMKCS8vIG9yIGdlbmVyYWxseSB3b3JrIGJldHRlciBicm93c2luZyBpbiByZWd1bGFyIGh0dHAgZm9yIGZ1bGwgcGFnZSByZWZyZXNoZXMgKEJCNSwgT3BlcmEgTWluaSkKCWlmICggJC5tb2JpbGUuYWpheEJsYWNrbGlzdCApIHsKCQkkLm1vYmlsZS5hamF4RW5hYmxlZCA9IGZhbHNlOwoJfQoKCS8vIEFkZCBtb2JpbGUsIGluaXRpYWwgbG9hZCAicmVuZGVyaW5nIiBjbGFzc2VzIHRvIGRvY0VsCgkkaHRtbC5hZGRDbGFzcyggInVpLW1vYmlsZSB1aS1tb2JpbGUtcmVuZGVyaW5nIiApOwoKCS8vIFRoaXMgaXMgYSBmYWxsYmFjay4gSWYgYW55dGhpbmcgZ29lcyB3cm9uZyAoSlMgZXJyb3JzLCBldGMpLCBvciBldmVudHMgZG9uJ3QgZmlyZSwKCS8vIHRoaXMgZW5zdXJlcyB0aGUgcmVuZGVyaW5nIGNsYXNzIGlzIHJlbW92ZWQgYWZ0ZXIgNSBzZWNvbmRzLCBzbyBjb250ZW50IGlzIHZpc2libGUgYW5kIGFjY2Vzc2libGUKCXNldFRpbWVvdXQoIGhpZGVSZW5kZXJpbmdDbGFzcywgNTAwMCApOwoKCSQuZXh0ZW5kKCAkLm1vYmlsZSwgewoJCS8vIGZpbmQgYW5kIGVuaGFuY2UgdGhlIHBhZ2VzIGluIHRoZSBkb20gYW5kIHRyYW5zaXRpb24gdG8gdGhlIGZpcnN0IHBhZ2UuCgkJaW5pdGlhbGl6ZVBhZ2U6IGZ1bmN0aW9uKCkgewoJCQkvLyBmaW5kIHByZXNlbnQgcGFnZXMKCQkJdmFyICRwYWdlcyA9ICQoICI6anFtRGF0YShyb2xlPSdwYWdlJyksIDpqcW1EYXRhKHJvbGU9J2RpYWxvZycpIiApLAoJCQkJaGFzaCA9ICQubW9iaWxlLnBhdGgucGFyc2VMb2NhdGlvbigpLmhhc2gucmVwbGFjZSgiIyIsICIiKSwKCQkJCWhhc2hQYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGhhc2ggKTsKCgkJCS8vIGlmIG5vIHBhZ2VzIGFyZSBmb3VuZCwgY3JlYXRlIG9uZSB3aXRoIGJvZHkncyBpbm5lciBodG1sCgkJCWlmICggISRwYWdlcy5sZW5ndGggKSB7CgkJCQkkcGFnZXMgPSAkKCAiYm9keSIgKS53cmFwSW5uZXIoICI8ZGl2IGRhdGEtIiArICQubW9iaWxlLm5zICsgInJvbGU9J3BhZ2UnPjwvZGl2PiIgKS5jaGlsZHJlbiggMCApOwoJCQl9CgoJCQkvLyBhZGQgZGlhbG9ncywgc2V0IGRhdGEtdXJsIGF0dHJzCgkJCSRwYWdlcy5lYWNoKGZ1bmN0aW9uKCkgewoJCQkJdmFyICR0aGlzID0gJCggdGhpcyApOwoKCQkJCS8vIHVubGVzcyB0aGUgZGF0YSB1cmwgaXMgYWxyZWFkeSBzZXQgc2V0IGl0IHRvIHRoZSBwYXRobmFtZQoJCQkJaWYgKCAhJHRoaXMuanFtRGF0YSggInVybCIgKSApIHsKCQkJCQkkdGhpcy5hdHRyKCAiZGF0YS0iICsgJC5tb2JpbGUubnMgKyAidXJsIiwgJHRoaXMuYXR0ciggImlkIiApIHx8IGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICk7CgkJCQl9CgkJCX0pOwoKCQkJLy8gZGVmaW5lIGZpcnN0IHBhZ2UgaW4gZG9tIGNhc2Ugb25lIGJhY2tzIG91dCB0byB0aGUgZGlyZWN0b3J5IHJvb3QgKG5vdCBhbHdheXMgdGhlIGZpcnN0IHBhZ2UgdmlzaXRlZCwgYnV0IGRlZmluZWQgYXMgZmFsbGJhY2spCgkJCSQubW9iaWxlLmZpcnN0UGFnZSA9ICRwYWdlcy5maXJzdCgpOwoKCQkJLy8gZGVmaW5lIHBhZ2UgY29udGFpbmVyCgkJCSQubW9iaWxlLnBhZ2VDb250YWluZXIgPSAkcGFnZXMuZmlyc3QoKS5wYXJlbnQoKS5hZGRDbGFzcyggInVpLW1vYmlsZS12aWV3cG9ydCIgKTsKCgkJCS8vIGFsZXJ0IGxpc3RlbmVycyB0aGF0IHRoZSBwYWdlY29udGFpbmVyIGhhcyBiZWVuIGRldGVybWluZWQgZm9yIGJpbmRpbmcKCQkJLy8gdG8gZXZlbnRzIHRyaWdnZXJlZCBvbiBpdAoJCQkkd2luZG93LnRyaWdnZXIoICJwYWdlY29udGFpbmVyY3JlYXRlIiApOwoKCQkJLy8gY3VlIHBhZ2UgbG9hZGluZyBtZXNzYWdlCgkJCSQubW9iaWxlLnNob3dQYWdlTG9hZGluZ01zZygpOwoKCQkJLy9yZW1vdmUgaW5pdGlhbCBidWlsZCBjbGFzcyAob25seSBwcmVzZW50IG9uIGZpcnN0IHBhZ2VzaG93KQoJCQloaWRlUmVuZGVyaW5nQ2xhc3MoKTsKCgkJCS8vIGlmIGhhc2hjaGFuZ2UgbGlzdGVuaW5nIGlzIGRpc2FibGVkLCB0aGVyZSdzIG5vIGhhc2ggZGVlcGxpbmssCgkJCS8vIHRoZSBoYXNoIGlzIG5vdCB2YWxpZCAoY29udGFpbnMgbW9yZSB0aGFuIG9uZSAjIG9yIGRvZXMgbm90IHN0YXJ0IHdpdGggIykKCQkJLy8gb3IgdGhlcmUgaXMgbm8gcGFnZSB3aXRoIHRoYXQgaGFzaCwgY2hhbmdlIHRvIHRoZSBmaXJzdCBwYWdlIGluIHRoZSBET00KCQkJLy8gUmVtZW1iZXIsIGhvd2V2ZXIsIHRoYXQgdGhlIGhhc2ggY2FuIGFsc28gYmUgYSBwYXRoIQoJCQlpZiAoICEgKCAkLm1vYmlsZS5oYXNoTGlzdGVuaW5nRW5hYmxlZCAmJgoJCQkJJC5tb2JpbGUucGF0aC5pc0hhc2hWYWxpZCggbG9jYXRpb24uaGFzaCApICYmCgkJCQkoICQoIGhhc2hQYWdlICkuaXMoICc6anFtRGF0YShyb2xlPSJwYWdlIiknICkgfHwKCQkJCQkkLm1vYmlsZS5wYXRoLmlzUGF0aCggaGFzaCApIHx8CgkJCQkJaGFzaCA9PT0gJC5tb2JpbGUuZGlhbG9nSGFzaEtleSApICkgKSB7CgoJCQkJLy8gU3RvcmUgdGhlIGluaXRpYWwgZGVzdGluYXRpb24KCQkJCWlmICggJC5tb2JpbGUucGF0aC5pc0hhc2hWYWxpZCggbG9jYXRpb24uaGFzaCApICkgewoJCQkJCSQubW9iaWxlLnVybEhpc3RvcnkuaW5pdGlhbERzdCA9IGhhc2gucmVwbGFjZSggIiMiLCAiIiApOwoJCQkJfQoJCQkJJC5tb2JpbGUuY2hhbmdlUGFnZSggJC5tb2JpbGUuZmlyc3RQYWdlLCB7IHRyYW5zaXRpb246ICJub25lIiwgcmV2ZXJzZTogdHJ1ZSwgY2hhbmdlSGFzaDogZmFsc2UsIGZyb21IYXNoQ2hhbmdlOiB0cnVlIH0gKTsKCQkJfQoJCQkvLyBvdGhlcndpc2UsIHRyaWdnZXIgYSBoYXNoY2hhbmdlIHRvIGxvYWQgYSBkZWVwbGluawoJCQllbHNlIHsKCQkJCSR3aW5kb3cudHJpZ2dlciggImhhc2hjaGFuZ2UiLCBbIHRydWUgXSApOwoJCQl9CgkJfQoJfSk7CgoJLy8gaW5pdGlhbGl6ZSBldmVudHMgbm93LCBhZnRlciBtb2JpbGVpbml0IGhhcyBvY2N1cnJlZAoJJC5tb2JpbGUubmF2cmVhZHlEZWZlcnJlZC5yZXNvbHZlKCk7CgoJLy8gY2hlY2sgd2hpY2ggc2Nyb2xsVG9wIHZhbHVlIHNob3VsZCBiZSB1c2VkIGJ5IHNjcm9sbGluZyB0byAxIGltbWVkaWF0ZWx5IGF0IGRvbXJlYWR5CgkvLyB0aGVuIGNoZWNrIHdoYXQgdGhlIHNjcm9sbCB0b3AgaXMuIEFuZHJvaWQgd2lsbCByZXBvcnQgMC4uLiBvdGhlcnMgMQoJLy8gbm90ZSB0aGF0IHRoaXMgaW5pdGlhbCBzY3JvbGwgd29uJ3QgaGlkZSB0aGUgYWRkcmVzcyBiYXIuIEl0J3MganVzdCBmb3IgdGhlIGNoZWNrLgoJJChmdW5jdGlvbigpIHsKCQl3aW5kb3cuc2Nyb2xsVG8oIDAsIDEgKTsKCgkJLy8gaWYgZGVmYXVsdEhvbWVTY3JvbGwgaGFzbid0IGJlZW4gc2V0IHlldCwgc2VlIGlmIHNjcm9sbFRvcCBpcyAxCgkJLy8gaXQgc2hvdWxkIGJlIDEgaW4gbW9zdCBicm93c2VycywgYnV0IGFuZHJvaWQgdHJlYXRzIDEgYXMgMCAoZm9yIGhpZGluZyBhZGRyIGJhcikKCQkvLyBzbyBpZiBpdCdzIDEsIHVzZSAwIGZyb20gbm93IG9uCgkJJC5tb2JpbGUuZGVmYXVsdEhvbWVTY3JvbGwgPSAoICEkLnN1cHBvcnQuc2Nyb2xsVG9wIHx8ICQoIHdpbmRvdyApLnNjcm9sbFRvcCgpID09PSAxICkgPyAwIDogMTsKCgoJCS8vIFRPRE86IEltcGxlbWVudCBhIHByb3BlciByZWdpc3RyYXRpb24gbWVjaGFuaXNtIHdpdGggZGVwZW5kZW5jeSBoYW5kbGluZyBpbiBvcmRlciB0byBub3QgaGF2ZSBleGNlcHRpb25zIGxpa2UgdGhlIG9uZSBiZWxvdwoJCS8vYXV0byBzZWxmLWluaXQgd2lkZ2V0cyBmb3IgdGhvc2Ugd2lkZ2V0cyB0aGF0IGhhdmUgYSBzb2Z0IGRlcGVuZGVuY3kgb24gb3RoZXJzCgkJaWYgKCAkLmZuLmNvbnRyb2xncm91cCApIHsKCQkJJCggZG9jdW1lbnQgKS5iaW5kKCAicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiggZSApIHsKCQkJCSQoICI6anFtRGF0YShyb2xlPSdjb250cm9sZ3JvdXAnKSIsIGUudGFyZ2V0ICkKCQkJCQkuanFtRW5oYW5jZWFibGUoKQoJCQkJCS5jb250cm9sZ3JvdXAoeyBleGNsdWRlSW52aXNpYmxlOiBmYWxzZSB9KTsKCQkJfSk7CgkJfQoKCQkvL2RvbS1yZWFkeSBpbml0cwoJCWlmICggJC5tb2JpbGUuYXV0b0luaXRpYWxpemVQYWdlICkgewoJCQkkLm1vYmlsZS5pbml0aWFsaXplUGFnZSgpOwoJCX0KCgkJLy8gd2luZG93IGxvYWQgZXZlbnQKCQkvLyBoaWRlIGlPUyBicm93c2VyIGNocm9tZSBvbiBsb2FkCgkJJHdpbmRvdy5sb2FkKCAkLm1vYmlsZS5zaWxlbnRTY3JvbGwgKTsKCgkJaWYgKCAhJC5zdXBwb3J0LmNzc1BvaW50ZXJFdmVudHMgKSB7CgkJCS8vIElFIGFuZCBPcGVyYSBkb24ndCBzdXBwb3J0IENTUyBwb2ludGVyLWV2ZW50czogbm9uZSB0aGF0IHdlIHVzZSB0byBkaXNhYmxlIGxpbmstYmFzZWQgYnV0dG9ucwoJCQkvLyBieSBhZGRpbmcgdGhlICd1aS1kaXNhYmxlZCcgY2xhc3MgdG8gdGhlbS4gVXNpbmcgYSBKYXZhU2NyaXB0IHdvcmthcm91bmQgZm9yIHRob3NlIGJyb3dzZXIuCgkJCS8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvMzU1OAoKCQkJJCggZG9jdW1lbnQgKS5kZWxlZ2F0ZSggIi51aS1kaXNhYmxlZCIsICJ2Y2xpY2siLAoJCQkJZnVuY3Rpb24oIGUgKSB7CgkJCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCWUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CgkJCQl9CgkJCSk7CgkJfQoJfSk7Cn0oIGpRdWVyeSwgdGhpcyApKTsKCn0pKTsKCi8qKgogKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuMC4zCiAqIChjKSAyMDEwLTIwMTIgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnCiAqIExpY2Vuc2U6IE1JVAogKi8KKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkgewondXNlIHN0cmljdCc7CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5sb3dlcmNhc2UKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byBsb3dlcmNhc2UuCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UuCiAqIEByZXR1cm5zIHtzdHJpbmd9IExvd2VyY2FzZWQgc3RyaW5nLgogKi8KdmFyIGxvd2VyY2FzZSA9IGZ1bmN0aW9uKHN0cmluZyl7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9Mb3dlckNhc2UoKSA6IHN0cmluZzt9OwoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci51cHBlcmNhc2UKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byB1cHBlcmNhc2UuCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byB1cHBlcmNhc2UuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFVwcGVyY2FzZWQgc3RyaW5nLgogKi8KdmFyIHVwcGVyY2FzZSA9IGZ1bmN0aW9uKHN0cmluZyl7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9VcHBlckNhc2UoKSA6IHN0cmluZzt9OwoKCnZhciBtYW51YWxMb3dlcmNhc2UgPSBmdW5jdGlvbihzKSB7CiAgcmV0dXJuIGlzU3RyaW5nKHMpCiAgICAgID8gcy5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBmcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSB8IDMyKTt9KQogICAgICA6IHM7Cn07CnZhciBtYW51YWxVcHBlcmNhc2UgPSBmdW5jdGlvbihzKSB7CiAgcmV0dXJuIGlzU3RyaW5nKHMpCiAgICAgID8gcy5yZXBsYWNlKC9bYS16XS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBmcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSAmIH4zMik7fSkKICAgICAgOiBzOwp9OwoKCi8vIFN0cmluZyN0b0xvd2VyQ2FzZSBhbmQgU3RyaW5nI3RvVXBwZXJDYXNlIGRvbid0IHByb2R1Y2UgY29ycmVjdCByZXN1bHRzIGluIGJyb3dzZXJzIHdpdGggVHVya2lzaAovLyBsb2NhbGUsIGZvciB0aGlzIHJlYXNvbiB3ZSBuZWVkIHRvIGRldGVjdCB0aGlzIGNhc2UgYW5kIHJlZGVmaW5lIGxvd2VyY2FzZS91cHBlcmNhc2UgbWV0aG9kcwovLyB3aXRoIGNvcnJlY3QgYnV0IHNsb3dlciBhbHRlcm5hdGl2ZXMuCmlmICgnaScgIT09ICdJJy50b0xvd2VyQ2FzZSgpKSB7CiAgbG93ZXJjYXNlID0gbWFudWFsTG93ZXJjYXNlOwogIHVwcGVyY2FzZSA9IG1hbnVhbFVwcGVyY2FzZTsKfQoKZnVuY3Rpb24gZnJvbUNoYXJDb2RlKGNvZGUpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTt9CgoKdmFyIEVycm9yICAgICAgICAgICAgID0gd2luZG93LkVycm9yLAogICAgLyoqIGhvbGRzIG1ham9yIHZlcnNpb24gbnVtYmVyIGZvciBJRSBvciBOYU4gZm9yIHJlYWwgYnJvd3NlcnMgKi8KICAgIG1zaWUgICAgICAgICAgICAgID0gaW50KCgvbXNpZSAoXGQrKS8uZXhlYyhsb3dlcmNhc2UobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHx8IFtdKVsxXSksCiAgICBqcUxpdGUsICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nIHNpbmNlIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgYWZ0ZXIgdXMuCiAgICBqUXVlcnksICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nCiAgICBzbGljZSAgICAgICAgICAgICA9IFtdLnNsaWNlLAogICAgcHVzaCAgICAgICAgICAgICAgPSBbXS5wdXNoLAogICAgdG9TdHJpbmcgICAgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLAoKICAgIC8qKiBAbmFtZSBhbmd1bGFyICovCiAgICBhbmd1bGFyICAgICAgICAgICA9IHdpbmRvdy5hbmd1bGFyIHx8ICh3aW5kb3cuYW5ndWxhciA9IHt9KSwKICAgIGFuZ3VsYXJNb2R1bGUsCiAgICBub2RlTmFtZV8sCiAgICB1aWQgICAgICAgICAgICAgICA9IFsnMCcsICcwJywgJzAnXTsKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5mb3JFYWNoCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogSW52b2tlcyB0aGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBvbmNlIGZvciBlYWNoIGl0ZW0gaW4gYG9iamAgY29sbGVjdGlvbiwgd2hpY2ggY2FuIGJlIGVpdGhlciBhbgogKiBvYmplY3Qgb3IgYW4gYXJyYXkuIFRoZSBgaXRlcmF0b3JgIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBgaXRlcmF0b3IodmFsdWUsIGtleSlgLCB3aGVyZSBgdmFsdWVgCiAqIGlzIHRoZSB2YWx1ZSBvZiBhbiBvYmplY3QgcHJvcGVydHkgb3IgYW4gYXJyYXkgZWxlbWVudCBhbmQgYGtleWAgaXMgdGhlIG9iamVjdCBwcm9wZXJ0eSBrZXkgb3IKICogYXJyYXkgZWxlbWVudCBpbmRleC4gU3BlY2lmeWluZyBhIGBjb250ZXh0YCBmb3IgdGhlIGZ1bmN0aW9uIGlzIG9wdGlvbmFsLgogKgogKiBOb3RlOiB0aGlzIGZ1bmN0aW9uIHdhcyBwcmV2aW91c2x5IGtub3duIGFzIGBhbmd1bGFyLmZvcmVhY2hgLgogKgogICA8cHJlPgogICAgIHZhciB2YWx1ZXMgPSB7bmFtZTogJ21pc2tvJywgZ2VuZGVyOiAnbWFsZSd9OwogICAgIHZhciBsb2cgPSBbXTsKICAgICBhbmd1bGFyLmZvckVhY2godmFsdWVzLCBmdW5jdGlvbih2YWx1ZSwga2V5KXsKICAgICAgIHRoaXMucHVzaChrZXkgKyAnOiAnICsgdmFsdWUpOwogICAgIH0sIGxvZyk7CiAgICAgZXhwZWN0KGxvZykudG9FcXVhbChbJ25hbWU6IG1pc2tvJywgJ2dlbmRlcjptYWxlJ10pOwogICA8L3ByZT4KICoKICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBPYmplY3QgdG8gaXRlcmF0ZSBvdmVyLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRvciBJdGVyYXRvciBmdW5jdGlvbi4KICogQHBhcmFtIHtPYmplY3Q9fSBjb250ZXh0IE9iamVjdCB0byBiZWNvbWUgY29udGV4dCAoYHRoaXNgKSBmb3IgdGhlIGl0ZXJhdG9yIGZ1bmN0aW9uLgogKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fSBSZWZlcmVuY2UgdG8gYG9iamAuCiAqLwpmdW5jdGlvbiBmb3JFYWNoKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICB2YXIga2V5OwogIGlmIChvYmopIHsKICAgIGlmIChpc0Z1bmN0aW9uKG9iaikpewogICAgICBmb3IgKGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoa2V5ICE9ICdwcm90b3R5cGUnICYmIGtleSAhPSAnbGVuZ3RoJyAmJiBrZXkgIT0gJ25hbWUnICYmIG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXkpOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmIChvYmouZm9yRWFjaCAmJiBvYmouZm9yRWFjaCAhPT0gZm9yRWFjaCkgewogICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7CiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9iaikgJiYgaXNOdW1iZXIob2JqLmxlbmd0aCkpIHsKICAgICAgZm9yIChrZXkgPSAwOyBrZXkgPCBvYmoubGVuZ3RoOyBrZXkrKykKICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXkpOwogICAgfSBlbHNlIHsKICAgICAgZm9yIChrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXkpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBzb3J0ZWRLZXlzKG9iaikgewogIHZhciBrZXlzID0gW107CiAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgIGtleXMucHVzaChrZXkpOwogICAgfQogIH0KICByZXR1cm4ga2V5cy5zb3J0KCk7Cn0KCmZ1bmN0aW9uIGZvckVhY2hTb3J0ZWQob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogIHZhciBrZXlzID0gc29ydGVkS2V5cyhvYmopOwogIGZvciAoIHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsKICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldKTsKICB9CiAgcmV0dXJuIGtleXM7Cn0KCgovKioKICogd2hlbiB1c2luZyBmb3JFYWNoIHRoZSBwYXJhbXMgYXJlIHZhbHVlLCBrZXksIGJ1dCBpdCBpcyBvZnRlbiB1c2VmdWwgdG8gaGF2ZSBrZXksIHZhbHVlLgogKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgKil9IGl0ZXJhdG9yRm4KICogQHJldHVybnMge2Z1bmN0aW9uKCosIHN0cmluZyl9CiAqLwpmdW5jdGlvbiByZXZlcnNlUGFyYW1zKGl0ZXJhdG9yRm4pIHsKICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGtleSkgeyBpdGVyYXRvckZuKGtleSwgdmFsdWUpIH07Cn0KCi8qKgogKiBBIGNvbnNpc3RlbnQgd2F5IG9mIGNyZWF0aW5nIHVuaXF1ZSBJRHMgaW4gYW5ndWxhci4gVGhlIElEIGlzIGEgc2VxdWVuY2Ugb2YgYWxwaGEgbnVtZXJpYwogKiBjaGFyYWN0ZXJzIHN1Y2ggYXMgJzAxMkFCQycuIFRoZSByZWFzb24gd2h5IHdlIGFyZSBub3QgdXNpbmcgc2ltcGx5IGEgbnVtYmVyIGNvdW50ZXIgaXMgdGhhdAogKiB0aGUgbnVtYmVyIHN0cmluZyBnZXRzIGxvbmdlciBvdmVyIHRpbWUsIGFuZCBpdCBjYW4gYWxzbyBvdmVyZmxvdywgd2hlcmUgYXMgdGhlIHRoZSBuZXh0SWQKICogd2lsbCBncm93IG11Y2ggc2xvd2VyLCBpdCBpcyBhIHN0cmluZywgYW5kIGl0IHdpbGwgbmV2ZXIgb3ZlcmZsb3cuCiAqCiAqIEByZXR1cm5zIGFuIHVuaXF1ZSBhbHBoYS1udW1lcmljIHN0cmluZwogKi8KZnVuY3Rpb24gbmV4dFVpZCgpIHsKICB2YXIgaW5kZXggPSB1aWQubGVuZ3RoOwogIHZhciBkaWdpdDsKCiAgd2hpbGUoaW5kZXgpIHsKICAgIGluZGV4LS07CiAgICBkaWdpdCA9IHVpZFtpbmRleF0uY2hhckNvZGVBdCgwKTsKICAgIGlmIChkaWdpdCA9PSA1NyAvKic5JyovKSB7CiAgICAgIHVpZFtpbmRleF0gPSAnQSc7CiAgICAgIHJldHVybiB1aWQuam9pbignJyk7CiAgICB9CiAgICBpZiAoZGlnaXQgPT0gOTAgIC8qJ1onKi8pIHsKICAgICAgdWlkW2luZGV4XSA9ICcwJzsKICAgIH0gZWxzZSB7CiAgICAgIHVpZFtpbmRleF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRpZ2l0ICsgMSk7CiAgICAgIHJldHVybiB1aWQuam9pbignJyk7CiAgICB9CiAgfQogIHVpZC51bnNoaWZ0KCcwJyk7CiAgcmV0dXJuIHVpZC5qb2luKCcnKTsKfQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmV4dGVuZAogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIEV4dGVuZHMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBgZHN0YCBieSBjb3B5aW5nIGFsbCBvZiB0aGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocykKICogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLgogKgogKiBAcGFyYW0ge09iamVjdH0gZHN0IERlc3RpbmF0aW9uIG9iamVjdC4KICogQHBhcmFtIHsuLi5PYmplY3R9IHNyYyBTb3VyY2Ugb2JqZWN0KHMpLgogKi8KZnVuY3Rpb24gZXh0ZW5kKGRzdCkgewogIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihvYmopewogICAgaWYgKG9iaiAhPT0gZHN0KSB7CiAgICAgIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KXsKICAgICAgICBkc3Rba2V5XSA9IHZhbHVlOwogICAgICB9KTsKICAgIH0KICB9KTsKICByZXR1cm4gZHN0Owp9CgpmdW5jdGlvbiBpbnQoc3RyKSB7CiAgcmV0dXJuIHBhcnNlSW50KHN0ciwgMTApOwp9CgoKZnVuY3Rpb24gaW5oZXJpdChwYXJlbnQsIGV4dHJhKSB7CiAgcmV0dXJuIGV4dGVuZChuZXcgKGV4dGVuZChmdW5jdGlvbigpIHt9LCB7cHJvdG90eXBlOnBhcmVudH0pKSgpLCBleHRyYSk7Cn0KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIubm9vcAogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIEEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBubyBvcGVyYXRpb25zLiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlCiAqIGZ1bmN0aW9uYWwgc3R5bGUuCiAgIDxwcmU+CiAgICAgZnVuY3Rpb24gZm9vKGNhbGxiYWNrKSB7CiAgICAgICB2YXIgcmVzdWx0ID0gY2FsY3VsYXRlUmVzdWx0KCk7CiAgICAgICAoY2FsbGJhY2sgfHwgYW5ndWxhci5ub29wKShyZXN1bHQpOwogICAgIH0KICAgPC9wcmU+CiAqLwpmdW5jdGlvbiBub29wKCkge30Kbm9vcC4kaW5qZWN0ID0gW107CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmlkZW50aXR5CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGUKICogZnVuY3Rpb25hbCBzdHlsZS4KICoKICAgPHByZT4KICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1lcih0cmFuc2Zvcm1hdGlvbkZuLCB2YWx1ZSkgewogICAgICAgcmV0dXJuICh0cmFuc2Zvcm1hdGlvbkZuIHx8IGlkZW50aXR5KSh2YWx1ZSk7CiAgICAgfTsKICAgPC9wcmU+CiAqLwpmdW5jdGlvbiBpZGVudGl0eSgkKSB7cmV0dXJuICQ7fQppZGVudGl0eS4kaW5qZWN0ID0gW107CgoKZnVuY3Rpb24gdmFsdWVGbih2YWx1ZSkge3JldHVybiBmdW5jdGlvbigpIHtyZXR1cm4gdmFsdWU7fTt9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNVbmRlZmluZWQKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIHVuZGVmaW5lZC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLgogKi8KZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3VuZGVmaW5lZCc7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0RlZmluZWQKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGRlZmluZWQuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGRlZmluZWQuCiAqLwpmdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgIT0gJ3VuZGVmaW5lZCc7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc09iamVjdAogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYE9iamVjdGAuIFVubGlrZSBgdHlwZW9mYCBpbiBKYXZhU2NyaXB0LCBgbnVsbGBzIGFyZSBub3QKICogY29uc2lkZXJlZCB0byBiZSBvYmplY3RzLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgT2JqZWN0YCBidXQgbm90IGBudWxsYC4KICovCmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKXtyZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc1N0cmluZwogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgU3RyaW5nYC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgU3RyaW5nYC4KICovCmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnO30KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNOdW1iZXIKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYE51bWJlcmAuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYE51bWJlcmAuCiAqLwpmdW5jdGlvbiBpc051bWJlcih2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJzt9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmlzRGF0ZQogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSB2YWx1ZSBpcyBhIGRhdGUuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYERhdGVgLgogKi8KZnVuY3Rpb24gaXNEYXRlKHZhbHVlKXsKICByZXR1cm4gdG9TdHJpbmcuYXBwbHkodmFsdWUpID09ICdbb2JqZWN0IERhdGVdJzsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0FycmF5CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhbiBgQXJyYXlgLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgQXJyYXlgLgogKi8KZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkgewogIHJldHVybiB0b1N0cmluZy5hcHBseSh2YWx1ZSkgPT0gJ1tvYmplY3QgQXJyYXldJzsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0Z1bmN0aW9uCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBGdW5jdGlvbmAuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYEZ1bmN0aW9uYC4KICovCmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJzt9CgoKLyoqCiAqIENoZWNrcyBpZiBgb2JqYCBpcyBhIHdpbmRvdyBvYmplY3QuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Kn0gb2JqIE9iamVjdCB0byBjaGVjawogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqYCBpcyBhIHdpbmRvdyBvYmouCiAqLwpmdW5jdGlvbiBpc1dpbmRvdyhvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5kb2N1bWVudCAmJiBvYmoubG9jYXRpb24gJiYgb2JqLmFsZXJ0ICYmIG9iai5zZXRJbnRlcnZhbDsKfQoKCmZ1bmN0aW9uIGlzU2NvcGUob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouJGV2YWxBc3luYyAmJiBvYmouJHdhdGNoOwp9CgoKZnVuY3Rpb24gaXNGaWxlKG9iaikgewogIHJldHVybiB0b1N0cmluZy5hcHBseShvYmopID09PSAnW29iamVjdCBGaWxlXSc7Cn0KCgpmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHsKICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdib29sZWFuJzsKfQoKCmZ1bmN0aW9uIHRyaW0odmFsdWUpIHsKICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gdmFsdWUucmVwbGFjZSgvXlxzKi8sICcnKS5yZXBsYWNlKC9ccyokLywgJycpIDogdmFsdWU7Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0VsZW1lbnQKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS4KICovCmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7CiAgcmV0dXJuIG5vZGUgJiYKICAgIChub2RlLm5vZGVOYW1lICAvLyB3ZSBhcmUgYSBkaXJlY3QgZWxlbWVudAogICAgfHwgKG5vZGUuYmluZCAmJiBub2RlLmZpbmQpKTsgIC8vIHdlIGhhdmUgYSBiaW5kIGFuZCBmaW5kIG1ldGhvZCBwYXJ0IG9mIGpRdWVyeSBBUEkKfQoKLyoqCiAqIEBwYXJhbSBzdHIgJ2tleTEsa2V5MiwuLi4nCiAqIEByZXR1cm5zIHtvYmplY3R9IGluIHRoZSBmb3JtIG9mIHtrZXkxOnRydWUsIGtleTI6dHJ1ZSwgLi4ufQogKi8KZnVuY3Rpb24gbWFrZU1hcChzdHIpewogIHZhciBvYmogPSB7fSwgaXRlbXMgPSBzdHIuc3BsaXQoIiwiKSwgaTsKICBmb3IgKCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrICkKICAgIG9ialsgaXRlbXNbaV0gXSA9IHRydWU7CiAgcmV0dXJuIG9iajsKfQoKCmlmIChtc2llIDwgOSkgewogIG5vZGVOYW1lXyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGVsZW1lbnQgPSBlbGVtZW50Lm5vZGVOYW1lID8gZWxlbWVudCA6IGVsZW1lbnRbMF07CiAgICByZXR1cm4gKGVsZW1lbnQuc2NvcGVOYW1lICYmIGVsZW1lbnQuc2NvcGVOYW1lICE9ICdIVE1MJykKICAgICAgPyB1cHBlcmNhc2UoZWxlbWVudC5zY29wZU5hbWUgKyAnOicgKyBlbGVtZW50Lm5vZGVOYW1lKSA6IGVsZW1lbnQubm9kZU5hbWU7CiAgfTsKfSBlbHNlIHsKICBub2RlTmFtZV8gPSBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gZWxlbWVudC5ub2RlTmFtZSA/IGVsZW1lbnQubm9kZU5hbWUgOiBlbGVtZW50WzBdLm5vZGVOYW1lOwogIH07Cn0KCgpmdW5jdGlvbiBtYXAob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogIHZhciByZXN1bHRzID0gW107CiAgZm9yRWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgcmVzdWx0cy5wdXNoKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSk7CiAgfSk7CiAgcmV0dXJuIHJlc3VsdHM7Cn0KCgovKioKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBhcnJheSwgdGhlIG51bWJlciBvZiBwcm9wZXJ0aWVzIGFuIG9iamVjdCBoYXMsIG9yCiAqIHRoZSBsZW5ndGggb2YgYSBzdHJpbmcuCiAqCiAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhdWdtZW50IHRoZSBPYmplY3QgdHlwZSBpbiBBbmd1bGFyIGV4cHJlc3Npb25zLiBTZWUKICoge0BsaW5rIGFuZ3VsYXIuT2JqZWN0fSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBBbmd1bGFyIGFycmF5cy4KICoKICogQHBhcmFtIHtPYmplY3R8QXJyYXl8c3RyaW5nfSBvYmogT2JqZWN0LCBhcnJheSwgb3Igc3RyaW5nIHRvIGluc3BlY3QuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW293blByb3BzT25seT1mYWxzZV0gQ291bnQgb25seSAib3duIiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdAogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgc2l6ZSBvZiBgb2JqYCBvciBgMGAgaWYgYG9iamAgaXMgbmVpdGhlciBhbiBvYmplY3Qgbm9yIGFuIGFycmF5LgogKi8KZnVuY3Rpb24gc2l6ZShvYmosIG93blByb3BzT25seSkgewogIHZhciBzaXplID0gMCwga2V5OwoKICBpZiAoaXNBcnJheShvYmopIHx8IGlzU3RyaW5nKG9iaikpIHsKICAgIHJldHVybiBvYmoubGVuZ3RoOwogIH0gZWxzZSBpZiAoaXNPYmplY3Qob2JqKSl7CiAgICBmb3IgKGtleSBpbiBvYmopCiAgICAgIGlmICghb3duUHJvcHNPbmx5IHx8IG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKQogICAgICAgIHNpemUrKzsKICB9CgogIHJldHVybiBzaXplOwp9CgoKZnVuY3Rpb24gaW5jbHVkZXMoYXJyYXksIG9iaikgewogIHJldHVybiBpbmRleE9mKGFycmF5LCBvYmopICE9IC0xOwp9CgpmdW5jdGlvbiBpbmRleE9mKGFycmF5LCBvYmopIHsKICBpZiAoYXJyYXkuaW5kZXhPZikgcmV0dXJuIGFycmF5LmluZGV4T2Yob2JqKTsKCiAgZm9yICggdmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsKICAgIGlmIChvYmogPT09IGFycmF5W2ldKSByZXR1cm4gaTsKICB9CiAgcmV0dXJuIC0xOwp9CgpmdW5jdGlvbiBhcnJheVJlbW92ZShhcnJheSwgdmFsdWUpIHsKICB2YXIgaW5kZXggPSBpbmRleE9mKGFycmF5LCB2YWx1ZSk7CiAgaWYgKGluZGV4ID49MCkKICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7CiAgcmV0dXJuIHZhbHVlOwp9CgpmdW5jdGlvbiBpc0xlYWZOb2RlIChub2RlKSB7CiAgaWYgKG5vZGUpIHsKICAgIHN3aXRjaCAobm9kZS5ub2RlTmFtZSkgewogICAgY2FzZSAiT1BUSU9OIjoKICAgIGNhc2UgIlBSRSI6CiAgICBjYXNlICJUSVRMRSI6CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5jb3B5CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQ3JlYXRlcyBhIGRlZXAgY29weSBvZiBgc291cmNlYCwgd2hpY2ggc2hvdWxkIGJlIGFuIG9iamVjdCBvciBhbiBhcnJheS4KICoKICogKiBJZiBubyBkZXN0aW5hdGlvbiBpcyBzdXBwbGllZCwgYSBjb3B5IG9mIHRoZSBvYmplY3Qgb3IgYXJyYXkgaXMgY3JlYXRlZC4KICogKiBJZiBhIGRlc3RpbmF0aW9uIGlzIHByb3ZpZGVkLCBhbGwgb2YgaXRzIGVsZW1lbnRzIChmb3IgYXJyYXkpIG9yIHByb3BlcnRpZXMgKGZvciBvYmplY3RzKQogKiAgIGFyZSBkZWxldGVkIGFuZCB0aGVuIGFsbCBlbGVtZW50cy9wcm9wZXJ0aWVzIGZyb20gdGhlIHNvdXJjZSBhcmUgY29waWVkIHRvIGl0LgogKiAqIElmICBgc291cmNlYCBpcyBub3QgYW4gb2JqZWN0IG9yIGFycmF5LCBgc291cmNlYCBpcyByZXR1cm5lZC4KICoKICogTm90ZTogdGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGF1Z21lbnQgdGhlIE9iamVjdCB0eXBlIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMuIFNlZQogKiB7QGxpbmsgbmcuJGZpbHRlcn0gZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgQW5ndWxhciBhcnJheXMuCiAqCiAqIEBwYXJhbSB7Kn0gc291cmNlIFRoZSBzb3VyY2UgdGhhdCB3aWxsIGJlIHVzZWQgdG8gbWFrZSBhIGNvcHkuCiAqICAgICAgICAgICAgICAgICAgIENhbiBiZSBhbnkgdHlwZSwgaW5jbHVkaW5nIHByaW1pdGl2ZXMsIGBudWxsYCwgYW5kIGB1bmRlZmluZWRgLgogKiBAcGFyYW0geyhPYmplY3R8QXJyYXkpPX0gZGVzdGluYXRpb24gRGVzdGluYXRpb24gaW50byB3aGljaCB0aGUgc291cmNlIGlzIGNvcGllZC4gSWYKICogICAgIHByb3ZpZGVkLCBtdXN0IGJlIG9mIHRoZSBzYW1lIHR5cGUgYXMgYHNvdXJjZWAuCiAqIEByZXR1cm5zIHsqfSBUaGUgY29weSBvciB1cGRhdGVkIGBkZXN0aW5hdGlvbmAsIGlmIGBkZXN0aW5hdGlvbmAgd2FzIHNwZWNpZmllZC4KICovCmZ1bmN0aW9uIGNvcHkoc291cmNlLCBkZXN0aW5hdGlvbil7CiAgaWYgKGlzV2luZG93KHNvdXJjZSkgfHwgaXNTY29wZShzb3VyY2UpKSB0aHJvdyBFcnJvcigiQ2FuJ3QgY29weSBXaW5kb3cgb3IgU2NvcGUiKTsKICBpZiAoIWRlc3RpbmF0aW9uKSB7CiAgICBkZXN0aW5hdGlvbiA9IHNvdXJjZTsKICAgIGlmIChzb3VyY2UpIHsKICAgICAgaWYgKGlzQXJyYXkoc291cmNlKSkgewogICAgICAgIGRlc3RpbmF0aW9uID0gY29weShzb3VyY2UsIFtdKTsKICAgICAgfSBlbHNlIGlmIChpc0RhdGUoc291cmNlKSkgewogICAgICAgIGRlc3RpbmF0aW9uID0gbmV3IERhdGUoc291cmNlLmdldFRpbWUoKSk7CiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSkgewogICAgICAgIGRlc3RpbmF0aW9uID0gY29weShzb3VyY2UsIHt9KTsKICAgICAgfQogICAgfQogIH0gZWxzZSB7CiAgICBpZiAoc291cmNlID09PSBkZXN0aW5hdGlvbikgdGhyb3cgRXJyb3IoIkNhbid0IGNvcHkgZXF1aXZhbGVudCBvYmplY3RzIG9yIGFycmF5cyIpOwogICAgaWYgKGlzQXJyYXkoc291cmNlKSkgewogICAgICB3aGlsZShkZXN0aW5hdGlvbi5sZW5ndGgpIHsKICAgICAgICBkZXN0aW5hdGlvbi5wb3AoKTsKICAgICAgfQogICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyBpKyspIHsKICAgICAgICBkZXN0aW5hdGlvbi5wdXNoKGNvcHkoc291cmNlW2ldKSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZvckVhY2goZGVzdGluYXRpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpewogICAgICAgIGRlbGV0ZSBkZXN0aW5hdGlvbltrZXldOwogICAgICB9KTsKICAgICAgZm9yICggdmFyIGtleSBpbiBzb3VyY2UpIHsKICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weShzb3VyY2Vba2V5XSk7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIGRlc3RpbmF0aW9uOwp9CgovKioKICogQ3JlYXRlIGEgc2hhbGxvdyBjb3B5IG9mIGFuIG9iamVjdAogKi8KZnVuY3Rpb24gc2hhbGxvd0NvcHkoc3JjLCBkc3QpIHsKICBkc3QgPSBkc3QgfHwge307CgogIGZvcih2YXIga2V5IGluIHNyYykgewogICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleS5zdWJzdHIoMCwgMikgIT09ICckJCcpIHsKICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTsKICAgIH0KICB9CgogIHJldHVybiBkc3Q7Cn0KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuZXF1YWxzCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiB0d28gb2JqZWN0cyBvciB0d28gdmFsdWVzIGFyZSBlcXVpdmFsZW50LiBTdXBwb3J0cyB2YWx1ZSB0eXBlcywgYXJyYXlzIGFuZAogKiBvYmplY3RzLgogKgogKiBUd28gb2JqZWN0cyBvciB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOgogKgogKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgcGFzcyBgPT09YCBjb21wYXJpc29uLgogKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kIGFsbCBvZiB0aGVpciBwcm9wZXJ0aWVzIHBhc3MgYD09PWAgY29tcGFyaXNvbi4KICogKiBCb3RoIHZhbHVlcyBhcmUgTmFOLiAoSW4gSmF2YXNTY3JpcHQsIE5hTiA9PSBOYU4gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gTmFOIGFzIGVxdWFsKQogKgogKiBEdXJpbmcgYSBwcm9wZXJ0eSBjb21wYXJpc2lvbiwgcHJvcGVydGllcyBvZiBgZnVuY3Rpb25gIHR5cGUgYW5kIHByb3BlcnRpZXMgd2l0aCBuYW1lcwogKiB0aGF0IGJlZ2luIHdpdGggYCRgIGFyZSBpZ25vcmVkLgogKgogKiBTY29wZSBhbmQgRE9NV2luZG93IG9iamVjdHMgYXJlIGJlaW5nIGNvbXBhcmVkIG9ubHkgYmUgaWRlbnRpZnkgKGA9PT1gKS4KICoKICogQHBhcmFtIHsqfSBvMSBPYmplY3Qgb3IgdmFsdWUgdG8gY29tcGFyZS4KICogQHBhcmFtIHsqfSBvMiBPYmplY3Qgb3IgdmFsdWUgdG8gY29tcGFyZS4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYXJndW1lbnRzIGFyZSBlcXVhbC4KICovCmZ1bmN0aW9uIGVxdWFscyhvMSwgbzIpIHsKICBpZiAobzEgPT09IG8yKSByZXR1cm4gdHJ1ZTsKICBpZiAobzEgPT09IG51bGwgfHwgbzIgPT09IG51bGwpIHJldHVybiBmYWxzZTsKICBpZiAobzEgIT09IG8xICYmIG8yICE9PSBvMikgcmV0dXJuIHRydWU7IC8vIE5hTiA9PT0gTmFOCiAgdmFyIHQxID0gdHlwZW9mIG8xLCB0MiA9IHR5cGVvZiBvMiwgbGVuZ3RoLCBrZXksIGtleVNldDsKICBpZiAodDEgPT0gdDIpIHsKICAgIGlmICh0MSA9PSAnb2JqZWN0JykgewogICAgICBpZiAoaXNBcnJheShvMSkpIHsKICAgICAgICBpZiAoKGxlbmd0aCA9IG8xLmxlbmd0aCkgPT0gbzIubGVuZ3RoKSB7CiAgICAgICAgICBmb3Ioa2V5PTA7IGtleTxsZW5ndGg7IGtleSsrKSB7CiAgICAgICAgICAgIGlmICghZXF1YWxzKG8xW2tleV0sIG8yW2tleV0pKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKG8xKSkgewogICAgICAgIHJldHVybiBpc0RhdGUobzIpICYmIG8xLmdldFRpbWUoKSA9PSBvMi5nZXRUaW1lKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGlzU2NvcGUobzEpIHx8IGlzU2NvcGUobzIpIHx8IGlzV2luZG93KG8xKSB8fCBpc1dpbmRvdyhvMikpIHJldHVybiBmYWxzZTsKICAgICAgICBrZXlTZXQgPSB7fTsKICAgICAgICBmb3Ioa2V5IGluIG8xKSB7CiAgICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmICFpc0Z1bmN0aW9uKG8xW2tleV0pICYmICFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAga2V5U2V0W2tleV0gPSB0cnVlOwogICAgICAgIH0KICAgICAgICBmb3Ioa2V5IGluIG8yKSB7CiAgICAgICAgICBpZiAoIWtleVNldFtrZXldICYmIGtleS5jaGFyQXQoMCkgIT09ICckJyAmJiAhaXNGdW5jdGlvbihvMltrZXldKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn0KCgpmdW5jdGlvbiBjb25jYXQoYXJyYXkxLCBhcnJheTIsIGluZGV4KSB7CiAgcmV0dXJuIGFycmF5MS5jb25jYXQoc2xpY2UuY2FsbChhcnJheTIsIGluZGV4KSk7Cn0KCmZ1bmN0aW9uIHNsaWNlQXJncyhhcmdzLCBzdGFydEluZGV4KSB7CiAgcmV0dXJuIHNsaWNlLmNhbGwoYXJncywgc3RhcnRJbmRleCB8fCAwKTsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5iaW5kCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGZ1bmN0aW9uIGBmbmAgYm91bmQgdG8gYHNlbGZgIChgc2VsZmAgYmVjb21lcyB0aGUgYHRoaXNgIGZvcgogKiBgZm5gKS4gWW91IGNhbiBzdXBwbHkgb3B0aW9uYWwgYGFyZ3NgIHRoYXQgYXJlIGFyZSBwcmVib3VuZCB0byB0aGUgZnVuY3Rpb24uIFRoaXMgZmVhdHVyZSBpcyBhbHNvCiAqIGtub3duIGFzIFtmdW5jdGlvbiBjdXJyeWluZ10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdXJyeWluZykuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIENvbnRleHQgd2hpY2ggYGZuYCBzaG91bGQgYmUgZXZhbHVhdGVkIGluLgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEZ1bmN0aW9uIHRvIGJlIGJvdW5kLgogKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHByZWJvdW5kIHRvIHRoZSBgZm5gIGZ1bmN0aW9uIGNhbGwuCiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBGdW5jdGlvbiB0aGF0IHdyYXBzIHRoZSBgZm5gIHdpdGggYWxsIHRoZSBzcGVjaWZpZWQgYmluZGluZ3MuCiAqLwpmdW5jdGlvbiBiaW5kKHNlbGYsIGZuKSB7CiAgdmFyIGN1cnJ5QXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gc2xpY2VBcmdzKGFyZ3VtZW50cywgMikgOiBbXTsKICBpZiAoaXNGdW5jdGlvbihmbikgJiYgIShmbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHsKICAgIHJldHVybiBjdXJyeUFyZ3MubGVuZ3RoCiAgICAgID8gZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aAogICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGN1cnJ5QXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKSkKICAgICAgICAgICAgOiBmbi5hcHBseShzZWxmLCBjdXJyeUFyZ3MpOwogICAgICAgIH0KICAgICAgOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoCiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKQogICAgICAgICAgICA6IGZuLmNhbGwoc2VsZik7CiAgICAgICAgfTsKICB9IGVsc2UgewogICAgLy8gaW4gSUUsIG5hdGl2ZSBtZXRob2RzIGFyZSBub3QgZnVuY3Rpb25zIHNvIHRoZXkgY2Fubm90IGJlIGJvdW5kIChub3RlOiB0aGV5IGRvbid0IG5lZWQgdG8gYmUpCiAgICByZXR1cm4gZm47CiAgfQp9CgoKZnVuY3Rpb24gdG9Kc29uUmVwbGFjZXIoa2V5LCB2YWx1ZSkgewogIHZhciB2YWwgPSB2YWx1ZTsKCiAgaWYgKC9eXCQrLy50ZXN0KGtleSkpIHsKICAgIHZhbCA9IHVuZGVmaW5lZDsKICB9IGVsc2UgaWYgKGlzV2luZG93KHZhbHVlKSkgewogICAgdmFsID0gJyRXSU5ET1cnOwogIH0gZWxzZSBpZiAodmFsdWUgJiYgIGRvY3VtZW50ID09PSB2YWx1ZSkgewogICAgdmFsID0gJyRET0NVTUVOVCc7CiAgfSBlbHNlIGlmIChpc1Njb3BlKHZhbHVlKSkgewogICAgdmFsID0gJyRTQ09QRSc7CiAgfQoKICByZXR1cm4gdmFsOwp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLnRvSnNvbgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIFNlcmlhbGl6ZXMgaW5wdXQgaW50byBhIEpTT04tZm9ybWF0dGVkIHN0cmluZy4KICoKICogQHBhcmFtIHtPYmplY3R8QXJyYXl8RGF0ZXxzdHJpbmd8bnVtYmVyfSBvYmogSW5wdXQgdG8gYmUgc2VyaWFsaXplZCBpbnRvIEpTT04uCiAqIEBwYXJhbSB7Ym9vbGVhbj19IHByZXR0eSBJZiBzZXQgdG8gdHJ1ZSwgdGhlIEpTT04gb3V0cHV0IHdpbGwgY29udGFpbiBuZXdsaW5lcyBhbmQgd2hpdGVzcGFjZS4KICogQHJldHVybnMge3N0cmluZ30gSnNvbmlmaWVkIHN0cmluZyByZXByZXNlbnRpbmcgYG9iamAuCiAqLwpmdW5jdGlvbiB0b0pzb24ob2JqLCBwcmV0dHkpIHsKICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCB0b0pzb25SZXBsYWNlciwgcHJldHR5ID8gJyAgJyA6IG51bGwpOwp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmZyb21Kc29uCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGVzZXJpYWxpemVzIGEgSlNPTiBzdHJpbmcuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIEpTT04gc3RyaW5nIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fERhdGV8c3RyaW5nfG51bWJlcn0gRGVzZXJpYWxpemVkIHRoaW5neS4KICovCmZ1bmN0aW9uIGZyb21Kc29uKGpzb24pIHsKICByZXR1cm4gaXNTdHJpbmcoanNvbikKICAgICAgPyBKU09OLnBhcnNlKGpzb24pCiAgICAgIDoganNvbjsKfQoKCmZ1bmN0aW9uIHRvQm9vbGVhbih2YWx1ZSkgewogIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggIT09IDApIHsKICAgIHZhciB2ID0gbG93ZXJjYXNlKCIiICsgdmFsdWUpOwogICAgdmFsdWUgPSAhKHYgPT0gJ2YnIHx8IHYgPT0gJzAnIHx8IHYgPT0gJ2ZhbHNlJyB8fCB2ID09ICdubycgfHwgdiA9PSAnbicgfHwgdiA9PSAnW10nKTsKICB9IGVsc2UgewogICAgdmFsdWUgPSBmYWxzZTsKICB9CiAgcmV0dXJuIHZhbHVlOwp9CgovKioKICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlbGVtZW50LgogKi8KZnVuY3Rpb24gc3RhcnRpbmdUYWcoZWxlbWVudCkgewogIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCkuY2xvbmUoKTsKICB0cnkgewogICAgLy8gdHVybnMgb3V0IElFIGRvZXMgbm90IGxldCB5b3Ugc2V0IC5odG1sKCkgb24gZWxlbWVudHMgd2hpY2gKICAgIC8vIGFyZSBub3QgYWxsb3dlZCB0byBoYXZlIGNoaWxkcmVuLiBTbyB3ZSBqdXN0IGlnbm9yZSBpdC4KICAgIGVsZW1lbnQuaHRtbCgnJyk7CiAgfSBjYXRjaChlKSB7fQogIHJldHVybiBqcUxpdGUoJzxkaXY+JykuYXBwZW5kKGVsZW1lbnQpLmh0bWwoKS4KICAgICAgbWF0Y2goL14oPFtePl0rPikvKVsxXS4KICAgICAgcmVwbGFjZSgvXjwoW1x3XC1dKykvLCBmdW5jdGlvbihtYXRjaCwgbm9kZU5hbWUpIHsgcmV0dXJuICc8JyArIGxvd2VyY2FzZShub2RlTmFtZSk7IH0pOwp9CgoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLyoqCiAqIFBhcnNlcyBhbiBlc2NhcGVkIHVybCBxdWVyeSBzdHJpbmcgaW50byBrZXktdmFsdWUgcGFpcnMuCiAqIEByZXR1cm5zIE9iamVjdC48KHN0cmluZ3xib29sZWFuKT4KICovCmZ1bmN0aW9uIHBhcnNlS2V5VmFsdWUoLyoqc3RyaW5nKi9rZXlWYWx1ZSkgewogIHZhciBvYmogPSB7fSwga2V5X3ZhbHVlLCBrZXk7CiAgZm9yRWFjaCgoa2V5VmFsdWUgfHwgIiIpLnNwbGl0KCcmJyksIGZ1bmN0aW9uKGtleVZhbHVlKXsKICAgIGlmIChrZXlWYWx1ZSkgewogICAgICBrZXlfdmFsdWUgPSBrZXlWYWx1ZS5zcGxpdCgnPScpOwogICAgICBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5X3ZhbHVlWzBdKTsKICAgICAgb2JqW2tleV0gPSBpc0RlZmluZWQoa2V5X3ZhbHVlWzFdKSA/IGRlY29kZVVSSUNvbXBvbmVudChrZXlfdmFsdWVbMV0pIDogdHJ1ZTsKICAgIH0KICB9KTsKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiB0b0tleVZhbHVlKG9iaikgewogIHZhciBwYXJ0cyA9IFtdOwogIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgKyAodmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KHZhbHVlLCB0cnVlKSkpOwogIH0pOwogIHJldHVybiBwYXJ0cy5sZW5ndGggPyBwYXJ0cy5qb2luKCcmJykgOiAnJzsKfQoKCi8qKgogKiBXZSBuZWVkIG91ciBjdXN0b20gbWV0aG9kIGJlY2F1c2UgZW5jb2RlVVJJQ29tcG9uZW50IGlzIHRvbyBhZ3Jlc3NpdmUgYW5kIGRvZXNuJ3QgZm9sbG93CiAqIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0IHdpdGggcmVnYXJkcyB0byB0aGUgY2hhcmFjdGVyIHNldCAocGNoYXIpIGFsbG93ZWQgaW4gcGF0aAogKiBzZWdtZW50czoKICogICAgc2VnbWVudCAgICAgICA9ICpwY2hhcgogKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvICI6IiAvICJAIgogKiAgICBwY3QtZW5jb2RlZCAgID0gIiUiIEhFWERJRyBIRVhESUcKICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyAiLSIgLyAiLiIgLyAiXyIgLyAifiIKICogICAgc3ViLWRlbGltcyAgICA9ICIhIiAvICIkIiAvICImIiAvICInIiAvICIoIiAvICIpIgogKiAgICAgICAgICAgICAgICAgICAgIC8gIioiIC8gIisiIC8gIiwiIC8gIjsiIC8gIj0iCiAqLwpmdW5jdGlvbiBlbmNvZGVVcmlTZWdtZW50KHZhbCkgewogIHJldHVybiBlbmNvZGVVcmlRdWVyeSh2YWwsIHRydWUpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTI2L2dpLCAnJicpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTNEL2dpLCAnPScpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTJCL2dpLCAnKycpOwp9CgoKLyoqCiAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBlbmNvZGluZyAqa2V5KiBvciAqdmFsdWUqIHBhcnRzIG9mIHF1ZXJ5IGNvbXBvbmVudC4gV2UgbmVlZCBhIGN1c3RvbQogKiBtZXRob2QgYmVjdWFzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFncmVzc2l2ZSBhbmQgZW5jb2RlcyBzdHVmZiB0aGF0IGRvZXNuJ3QgaGF2ZSB0byBiZQogKiBlbmNvZGVkIHBlciBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2OgogKiAgICBxdWVyeSAgICAgICA9ICooIHBjaGFyIC8gIi8iIC8gIj8iICkKICogICAgcGNoYXIgICAgICAgICA9IHVucmVzZXJ2ZWQgLyBwY3QtZW5jb2RlZCAvIHN1Yi1kZWxpbXMgLyAiOiIgLyAiQCIKICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyAiLSIgLyAiLiIgLyAiXyIgLyAifiIKICogICAgcGN0LWVuY29kZWQgICA9ICIlIiBIRVhESUcgSEVYRElHCiAqICAgIHN1Yi1kZWxpbXMgICAgPSAiISIgLyAiJCIgLyAiJiIgLyAiJyIgLyAiKCIgLyAiKSIKICogICAgICAgICAgICAgICAgICAgICAvICIqIiAvICIrIiAvICIsIiAvICI7IiAvICI9IgogKi8KZnVuY3Rpb24gZW5jb2RlVXJpUXVlcnkodmFsLCBwY3RFbmNvZGVTcGFjZXMpIHsKICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuCiAgICAgICAgICAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuCiAgICAgICAgICAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuCiAgICAgICAgICAgICByZXBsYWNlKC8lMjQvZywgJyQnKS4KICAgICAgICAgICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS4KICAgICAgICAgICAgIHJlcGxhY2UoKHBjdEVuY29kZVNwYWNlcyA/IG51bGwgOiAvJTIwL2cpLCAnKycpOwp9CgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQXBwCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2FuZ3VsYXIuTW9kdWxlfSBuZ0FwcCBhbiBvcHRpb25hbCBhcHBsaWNhdGlvbgogKiAgIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGV9IG5hbWUgdG8gbG9hZC4KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIFVzZSB0aGlzIGRpcmVjdGl2ZSB0byBhdXRvLWJvb3RzdHJhcCBvbiBhcHBsaWNhdGlvbi4gT25seQogKiBvbmUgZGlyZWN0aXZlIGNhbiBiZSB1c2VkIHBlciBIVE1MIGRvY3VtZW50LiBUaGUgZGlyZWN0aXZlCiAqIGRlc2lnbmF0ZXMgdGhlIHJvb3Qgb2YgdGhlIGFwcGxpY2F0aW9uIGFuZCBpcyB0eXBpY2FsbHkgcGxhY2VkCiAqIG90IHRoZSByb290IG9mIHRoZSBwYWdlLgogKgogKiBJbiB0aGUgZXhhbXBsZSBiZWxvdyBpZiB0aGUgYG5nQXBwYCBkaXJlY3RpdmUgd291bGQgbm90IGJlIHBsYWNlZAogKiBvbiB0aGUgYGh0bWxgIGVsZW1lbnQgdGhlbiB0aGUgZG9jdW1lbnQgd291bGQgbm90IGJlIGNvbXBpbGVkCiAqIGFuZCB0aGUgYHt7IDErMiB9fWAgd291bGQgbm90IGJlIHJlc29sdmVkIHRvIGAzYC4KICoKICogYG5nQXBwYCBpcyB0aGUgZWFzaWVzdCB3YXkgdG8gYm9vdHN0cmFwIGFuIGFwcGxpY2F0aW9uLgogKgogPGRvYzpleGFtcGxlPgogICA8ZG9jOnNvdXJjZT4KICAgIEkgY2FuIGFkZDogMSArIDIgPSAge3sgMSsyIH19CiAgIDwvZG9jOnNvdXJjZT4KIDwvZG9jOmV4YW1wbGU+CiAqCiAqLwpmdW5jdGlvbiBhbmd1bGFySW5pdChlbGVtZW50LCBib290c3RyYXApIHsKICB2YXIgZWxlbWVudHMgPSBbZWxlbWVudF0sCiAgICAgIGFwcEVsZW1lbnQsCiAgICAgIG1vZHVsZSwKICAgICAgbmFtZXMgPSBbJ25nOmFwcCcsICduZy1hcHAnLCAneC1uZy1hcHAnLCAnZGF0YS1uZy1hcHAnXSwKICAgICAgTkdfQVBQX0NMQVNTX1JFR0VYUCA9IC9cc25nWzpcLV1hcHAoOlxzKihbXHdcZF9dKyk7Pyk/XHMvOwoKICBmdW5jdGlvbiBhcHBlbmQoZWxlbWVudCkgewogICAgZWxlbWVudCAmJiBlbGVtZW50cy5wdXNoKGVsZW1lbnQpOwogIH0KCiAgZm9yRWFjaChuYW1lcywgZnVuY3Rpb24obmFtZSkgewogICAgbmFtZXNbbmFtZV0gPSB0cnVlOwogICAgYXBwZW5kKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5hbWUpKTsKICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoJzonLCAnXFw6Jyk7CiAgICBpZiAoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKSB7CiAgICAgIGZvckVhY2goZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIG5hbWUpLCBhcHBlbmQpOwogICAgICBmb3JFYWNoKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBuYW1lICsgJ1xcOicpLCBhcHBlbmQpOwogICAgICBmb3JFYWNoKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnWycgKyBuYW1lICsgJ10nKSwgYXBwZW5kKTsKICAgIH0KICB9KTsKCiAgZm9yRWFjaChlbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudCkgewogICAgaWYgKCFhcHBFbGVtZW50KSB7CiAgICAgIHZhciBjbGFzc05hbWUgPSAnICcgKyBlbGVtZW50LmNsYXNzTmFtZSArICcgJzsKICAgICAgdmFyIG1hdGNoID0gTkdfQVBQX0NMQVNTX1JFR0VYUC5leGVjKGNsYXNzTmFtZSk7CiAgICAgIGlmIChtYXRjaCkgewogICAgICAgIGFwcEVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgIG1vZHVsZSA9IChtYXRjaFsyXSB8fCAnJykucmVwbGFjZSgvXHMrL2csICcsJyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yRWFjaChlbGVtZW50LmF0dHJpYnV0ZXMsIGZ1bmN0aW9uKGF0dHIpIHsKICAgICAgICAgIGlmICghYXBwRWxlbWVudCAmJiBuYW1lc1thdHRyLm5hbWVdKSB7CiAgICAgICAgICAgIGFwcEVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgICAgICBtb2R1bGUgPSBhdHRyLnZhbHVlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSk7CiAgaWYgKGFwcEVsZW1lbnQpIHsKICAgIGJvb3RzdHJhcChhcHBFbGVtZW50LCBtb2R1bGUgPyBbbW9kdWxlXSA6IFtdKTsKICB9Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5ib290c3RyYXAKICogQGRlc2NyaXB0aW9uCiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN0YXJ0IHVwIGFuZ3VsYXIgYXBwbGljYXRpb24uCiAqCiAqIFNlZToge0BsaW5rIGd1aWRlL2Jvb3RzdHJhcCBCb290c3RyYXB9CiAqCiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBET00gZWxlbWVudCB3aGljaCBpcyB0aGUgcm9vdCBvZiBhbmd1bGFyIGFwcGxpY2F0aW9uLgogKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xGdW5jdGlvbj49fSBtb2R1bGVzIGFuIGFycmF5IG9mIG1vZHVsZSBkZWNsYXJhdGlvbnMuIFNlZToge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9CiAqIEByZXR1cm5zIHtBVVRPLiRpbmplY3Rvcn0gUmV0dXJucyB0aGUgbmV3bHkgY3JlYXRlZCBpbmplY3RvciBmb3IgdGhpcyBhcHAuCiAqLwpmdW5jdGlvbiBib290c3RyYXAoZWxlbWVudCwgbW9kdWxlcykgewogIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7CiAgbW9kdWxlcyA9IG1vZHVsZXMgfHwgW107CiAgbW9kdWxlcy51bnNoaWZ0KFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkgewogICAgJHByb3ZpZGUudmFsdWUoJyRyb290RWxlbWVudCcsIGVsZW1lbnQpOwogIH1dKTsKICBtb2R1bGVzLnVuc2hpZnQoJ25nJyk7CiAgdmFyIGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IobW9kdWxlcyk7CiAgaW5qZWN0b3IuaW52b2tlKAogICAgWyckcm9vdFNjb3BlJywgJyRyb290RWxlbWVudCcsICckY29tcGlsZScsICckaW5qZWN0b3InLCBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgY29tcGlsZSwgaW5qZWN0b3IpewogICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgZWxlbWVudC5kYXRhKCckaW5qZWN0b3InLCBpbmplY3Rvcik7CiAgICAgICAgY29tcGlsZShlbGVtZW50KShzY29wZSk7CiAgICAgIH0pOwogICAgfV0KICApOwogIHJldHVybiBpbmplY3RvcjsKfQoKdmFyIFNOQUtFX0NBU0VfUkVHRVhQID0gL1tBLVpdL2c7CmZ1bmN0aW9uIHNuYWtlX2Nhc2UobmFtZSwgc2VwYXJhdG9yKXsKICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJ18nOwogIHJldHVybiBuYW1lLnJlcGxhY2UoU05BS0VfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7CiAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpOwogIH0pOwp9CgpmdW5jdGlvbiBiaW5kSlF1ZXJ5KCkgewogIC8vIGJpbmQgdG8galF1ZXJ5IGlmIHByZXNlbnQ7CiAgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTsKICAvLyByZXNldCB0byBqUXVlcnkgb3IgZGVmYXVsdCB0byB1cy4KICBpZiAoalF1ZXJ5KSB7CiAgICBqcUxpdGUgPSBqUXVlcnk7CiAgICBleHRlbmQoalF1ZXJ5LmZuLCB7CiAgICAgIHNjb3BlOiBKUUxpdGVQcm90b3R5cGUuc2NvcGUsCiAgICAgIGNvbnRyb2xsZXI6IEpRTGl0ZVByb3RvdHlwZS5jb250cm9sbGVyLAogICAgICBpbmplY3RvcjogSlFMaXRlUHJvdG90eXBlLmluamVjdG9yLAogICAgICBpbmhlcml0ZWREYXRhOiBKUUxpdGVQcm90b3R5cGUuaW5oZXJpdGVkRGF0YQogICAgfSk7CiAgICBKUUxpdGVQYXRjaEpRdWVyeVJlbW92ZSgncmVtb3ZlJywgdHJ1ZSk7CiAgICBKUUxpdGVQYXRjaEpRdWVyeVJlbW92ZSgnZW1wdHknKTsKICAgIEpRTGl0ZVBhdGNoSlF1ZXJ5UmVtb3ZlKCdodG1sJyk7CiAgfSBlbHNlIHsKICAgIGpxTGl0ZSA9IEpRTGl0ZTsKICB9CiAgYW5ndWxhci5lbGVtZW50ID0ganFMaXRlOwp9CgovKioKICogdGhyb3cgZXJyb3Igb2YgdGhlIGFyZ3VtZW50IGlzIGZhbHN5LgogKi8KZnVuY3Rpb24gYXNzZXJ0QXJnKGFyZywgbmFtZSwgcmVhc29uKSB7CiAgaWYgKCFhcmcpIHsKICAgIHRocm93IG5ldyBFcnJvcigiQXJndW1lbnQgJyIgKyAobmFtZSB8fCAnPycpICsgIicgaXMgIiArIChyZWFzb24gfHwgInJlcXVpcmVkIikpOwogIH0KICByZXR1cm4gYXJnOwp9CgpmdW5jdGlvbiBhc3NlcnRBcmdGbihhcmcsIG5hbWUsIGFjY2VwdEFycmF5QW5ub3RhdGlvbikgewogIGlmIChhY2NlcHRBcnJheUFubm90YXRpb24gJiYgaXNBcnJheShhcmcpKSB7CiAgICAgIGFyZyA9IGFyZ1thcmcubGVuZ3RoIC0gMV07CiAgfQoKICBhc3NlcnRBcmcoaXNGdW5jdGlvbihhcmcpLCBuYW1lLCAnbm90IGEgZnVuY3Rpb24sIGdvdCAnICsKICAgICAgKGFyZyAmJiB0eXBlb2YgYXJnID09ICdvYmplY3QnID8gYXJnLmNvbnN0cnVjdG9yLm5hbWUgfHwgJ09iamVjdCcgOiB0eXBlb2YgYXJnKSk7CiAgcmV0dXJuIGFyZzsKfQoKLyoqCiAqIEBuZ2RvYyBpbnRlcmZhY2UKICogQG5hbWUgYW5ndWxhci5Nb2R1bGUKICogQGRlc2NyaXB0aW9uCiAqCiAqIEludGVyZmFjZSBmb3IgY29uZmlndXJpbmcgYW5ndWxhciB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlc30uCiAqLwoKZnVuY3Rpb24gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KSB7CgogIGZ1bmN0aW9uIGVuc3VyZShvYmosIG5hbWUsIGZhY3RvcnkpIHsKICAgIHJldHVybiBvYmpbbmFtZV0gfHwgKG9ialtuYW1lXSA9IGZhY3RvcnkoKSk7CiAgfQoKICByZXR1cm4gZW5zdXJlKGVuc3VyZSh3aW5kb3csICdhbmd1bGFyJywgT2JqZWN0KSwgJ21vZHVsZScsIGZ1bmN0aW9uKCkgewogICAgLyoqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgYW5ndWxhci5Nb2R1bGU+fSAqLwogICAgdmFyIG1vZHVsZXMgPSB7fTsKCiAgICAvKioKICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICogQG5hbWUgYW5ndWxhci5tb2R1bGUKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICoKICAgICAqIFRoZSBgYW5ndWxhci5tb2R1bGVgIGlzIGEgZ2xvYmFsIHBsYWNlIGZvciBjcmVhdGluZyBhbmQgcmVnaXN0ZXJpbmcgQW5ndWxhciBtb2R1bGVzLiBBbGwKICAgICAqIG1vZHVsZXMgKGFuZ3VsYXIgY29yZSBvciAzcmQgcGFydHkpIHRoYXQgc2hvdWxkIGJlIGF2YWlsYWJsZSB0byBhbiBhcHBsaWNhdGlvbiBtdXN0IGJlCiAgICAgKiByZWdpc3RlcmVkIHVzaW5nIHRoaXMgbWVjaGFuaXNtLgogICAgICoKICAgICAqCiAgICAgKiAjIE1vZHVsZQogICAgICoKICAgICAqIEEgbW9kdWxlIGlzIGEgY29sbG9jYXRpb24gb2Ygc2VydmljZXMsIGRpcmVjdGl2ZXMsIGZpbHRlcnMsIGFuZCBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLiBNb2R1bGUKICAgICAqIGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfS4KICAgICAqCiAgICAgKiA8cHJlPgogICAgICogLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZQogICAgICogdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJywgW10pOwogICAgICoKICAgICAqIC8vIHJlZ2lzdGVyIGEgbmV3IHNlcnZpY2UKICAgICAqIG15TW9kdWxlLnZhbHVlKCdhcHBOYW1lJywgJ015Q29vbEFwcCcpOwogICAgICoKICAgICAqIC8vIGNvbmZpZ3VyZSBleGlzdGluZyBzZXJ2aWNlcyBpbnNpZGUgaW5pdGlhbGl6YXRpb24gYmxvY2tzLgogICAgICogbXlNb2R1bGUuY29uZmlnKGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyKSB7CiAgICAgKiAgIC8vIENvbmZpZ3VyZSBleGlzdGluZyBwcm92aWRlcnMKICAgICAqICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnIScpOwogICAgICogfSk7CiAgICAgKiA8L3ByZT4KICAgICAqCiAgICAgKiBUaGVuIHlvdSBjYW4gY3JlYXRlIGFuIGluamVjdG9yIGFuZCBsb2FkIHlvdXIgbW9kdWxlcyBsaWtlIHRoaXM6CiAgICAgKgogICAgICogPHByZT4KICAgICAqIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZycsICdNeU1vZHVsZSddKQogICAgICogPC9wcmU+CiAgICAgKgogICAgICogSG93ZXZlciBpdCdzIG1vcmUgbGlrZWx5IHRoYXQgeW91J2xsIGp1c3QgdXNlCiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfSBvcgogICAgICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfSB0byBzaW1wbGlmeSB0aGlzIHByb2Nlc3MgZm9yIHlvdS4KICAgICAqCiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byBjcmVhdGUgb3IgcmV0cmlldmUuCiAgICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+PX0gcmVxdWlyZXMgSWYgc3BlY2lmaWVkIHRoZW4gbmV3IG1vZHVsZSBpcyBiZWluZyBjcmVhdGVkLiBJZiB1bnNwZWNpZmllZCB0aGVuIHRoZQogICAgICogICAgICAgIHRoZSBtb2R1bGUgaXMgYmVpbmcgcmV0cmlldmVkIGZvciBmdXJ0aGVyIGNvbmZpZ3VyYXRpb24uCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWdGbiBPcHRpb25hbCBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgbW9kdWxlLiBTYW1lIGFzCiAgICAgKiAgICAgICAge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZyBNb2R1bGUjY29uZmlnKCl9LgogICAgICogQHJldHVybnMge21vZHVsZX0gbmV3IG1vZHVsZSB3aXRoIHRoZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9IGFwaS4KICAgICAqLwogICAgcmV0dXJuIGZ1bmN0aW9uIG1vZHVsZShuYW1lLCByZXF1aXJlcywgY29uZmlnRm4pIHsKICAgICAgaWYgKHJlcXVpcmVzICYmIG1vZHVsZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICBtb2R1bGVzW25hbWVdID0gbnVsbDsKICAgICAgfQogICAgICByZXR1cm4gZW5zdXJlKG1vZHVsZXMsIG5hbWUsIGZ1bmN0aW9uKCkgewogICAgICAgIGlmICghcmVxdWlyZXMpIHsKICAgICAgICAgIHRocm93IEVycm9yKCdObyBtb2R1bGU6ICcgKyBuYW1lKTsKICAgICAgICB9CgogICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxBcnJheS48Kj4+fSAqLwogICAgICAgIHZhciBpbnZva2VRdWV1ZSA9IFtdOwoKICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqLwogICAgICAgIHZhciBydW5CbG9ja3MgPSBbXTsKCiAgICAgICAgdmFyIGNvbmZpZyA9IGludm9rZUxhdGVyKCckaW5qZWN0b3InLCAnaW52b2tlJyk7CgogICAgICAgIC8qKiBAdHlwZSB7YW5ndWxhci5Nb2R1bGV9ICovCiAgICAgICAgdmFyIG1vZHVsZUluc3RhbmNlID0gewogICAgICAgICAgLy8gUHJpdmF0ZSBzdGF0ZQogICAgICAgICAgX2ludm9rZVF1ZXVlOiBpbnZva2VRdWV1ZSwKICAgICAgICAgIF9ydW5CbG9ja3M6IHJ1bkJsb2NrcywKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcmVxdWlyZXMKICAgICAgICAgICAqIEBwcm9wZXJ0eU9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59IExpc3Qgb2YgbW9kdWxlIG5hbWVzIHdoaWNoIG11c3QgYmUgbG9hZGVkIGJlZm9yZSB0aGlzIG1vZHVsZS4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogSG9sZHMgdGhlIGxpc3Qgb2YgbW9kdWxlcyB3aGljaCB0aGUgaW5qZWN0b3Igd2lsbCBsb2FkIGJlZm9yZSB0aGUgY3VycmVudCBtb2R1bGUgaXMgbG9hZGVkLgogICAgICAgICAgICovCiAgICAgICAgICByZXF1aXJlczogcmVxdWlyZXMsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHkKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI25hbWUKICAgICAgICAgICAqIEBwcm9wZXJ0eU9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBOYW1lIG9mIHRoZSBtb2R1bGUuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqLwogICAgICAgICAgbmFtZTogbmFtZSwKCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNwcm92aWRlcgogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyVHlwZSBDb25zdHJ1Y3Rpb24gZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBBVVRPLiRwcm92aWRlI3Byb3ZpZGVyICRwcm92aWRlLnByb3ZpZGVyKCl9LgogICAgICAgICAgICovCiAgICAgICAgICBwcm92aWRlcjogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3Byb3ZpZGVyJyksCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmYWN0b3J5CiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGUKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZQogICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJGdW5jdGlvbiBGdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBTZWUge0BsaW5rIEFVVE8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KCl9LgogICAgICAgICAgICovCiAgICAgICAgICBmYWN0b3J5OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnZmFjdG9yeScpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjc2VydmljZQogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBBVVRPLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZSgpfS4KICAgICAgICAgICAqLwogICAgICAgICAgc2VydmljZTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3NlcnZpY2UnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3ZhbHVlCiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGUKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZQogICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgU2VydmljZSBpbnN0YW5jZSBvYmplY3QuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgQVVUTy4kcHJvdmlkZSN2YWx1ZSAkcHJvdmlkZS52YWx1ZSgpfS4KICAgICAgICAgICAqLwogICAgICAgICAgdmFsdWU6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICd2YWx1ZScpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uc3RhbnQKICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgY29uc3RhbnQgbmFtZQogICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgQ29uc3RhbnQgdmFsdWUuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIEJlY2F1c2UgdGhlIGNvbnN0YW50IGFyZSBmaXhlZCwgdGhleSBnZXQgYXBwbGllZCBiZWZvcmUgb3RoZXIgcHJvdmlkZSBtZXRob2RzLgogICAgICAgICAgICogU2VlIHtAbGluayBBVVRPLiRwcm92aWRlI2NvbnN0YW50ICRwcm92aWRlLmNvbnN0YW50KCl9LgogICAgICAgICAgICovCiAgICAgICAgICBjb25zdGFudDogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ2NvbnN0YW50JywgJ3Vuc2hpZnQnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZpbHRlcgogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBGaWx0ZXIgbmFtZS4KICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbHRlckZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGZpbHRlci4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBuZy4kZmlsdGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LgogICAgICAgICAgICovCiAgICAgICAgICBmaWx0ZXI6IGludm9rZUxhdGVyKCckZmlsdGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnRyb2xsZXIKICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ29udHJvbGxlciBuYW1lLgogICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbi4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyICRjb250cm9sbGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uCiAgICAgICAgICAgKi8KICAgICAgICAgIGNvbnRyb2xsZXI6IGludm9rZUxhdGVyKCckY29udHJvbGxlclByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNkaXJlY3RpdmUKICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgZGlyZWN0aXZlIG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRpcmVjdGl2ZUZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mCiAgICAgICAgICAgKiBkaXJlY3RpdmVzLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCl9LgogICAgICAgICAgICovCiAgICAgICAgICBkaXJlY3RpdmU6IGludm9rZUxhdGVyKCckY29tcGlsZVByb3ZpZGVyJywgJ2RpcmVjdGl2ZScpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uZmlnCiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGUKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZ0ZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBvbiBtb2R1bGUgbG9hZC4gVXNlZnVsIGZvciBzZXJ2aWNlCiAgICAgICAgICAgKiAgICBjb25maWd1cmF0aW9uLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gcmVnaXN0ZXIgd29yayB3aGljaCBuZWVkcyB0byBiZSBwZXJmb3JtZWQgb24gbW9kdWxlIGxvYWRpbmcuCiAgICAgICAgICAgKi8KICAgICAgICAgIGNvbmZpZzogY29uZmlnLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcnVuCiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGUKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGluaXRpYWxpemF0aW9uRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIGFmdGVyIGluamVjdG9yIGNyZWF0aW9uLgogICAgICAgICAgICogICAgVXNlZnVsIGZvciBhcHBsaWNhdGlvbiBpbml0aWFsaXphdGlvbi4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggc2hvdWxkIGJlIHBlcmZvcm1lZCB3aGVuIHRoZSBpbmplY3RvciBpcyBkb25lCiAgICAgICAgICAgKiBsb2FkaW5nIGFsbCBtb2R1bGVzLgogICAgICAgICAgICovCiAgICAgICAgICBydW46IGZ1bmN0aW9uKGJsb2NrKSB7CiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKGJsb2NrKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgaWYgKGNvbmZpZ0ZuKSB7CiAgICAgICAgICBjb25maWcoY29uZmlnRm4pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICBtb2R1bGVJbnN0YW5jZTsKCiAgICAgICAgLyoqCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZAogICAgICAgICAqIEBwYXJhbSB7U3RyaW5nPX0gaW5zZXJ0TWV0aG9kCiAgICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyKHByb3ZpZGVyLCBtZXRob2QsIGluc2VydE1ldGhvZCkgewogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnZva2VRdWV1ZVtpbnNlcnRNZXRob2QgfHwgJ3B1c2gnXShbcHJvdmlkZXIsIG1ldGhvZCwgYXJndW1lbnRzXSk7CiAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKICB9KTsKCn0KCi8qKgogKiBAbmdkb2MgcHJvcGVydHkKICogQG5hbWUgYW5ndWxhci52ZXJzaW9uCiAqIEBkZXNjcmlwdGlvbgogKiBBbiBvYmplY3QgdGhhdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBBbmd1bGFySlMgdmVyc2lvbi4gVGhpcyBvYmplY3QgaGFzIHRoZQogKiBmb2xsb3dpbmcgcHJvcGVydGllczoKICoKICogLSBgZnVsbGAg4oCTIGB7c3RyaW5nfWAg4oCTIEZ1bGwgdmVyc2lvbiBzdHJpbmcsIHN1Y2ggYXMgIjAuOS4xOCIuCiAqIC0gYG1ham9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWFqb3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgIjAiLgogKiAtIGBtaW5vcmAg4oCTIGB7bnVtYmVyfWAg4oCTIE1pbm9yIHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzICI5Ii4KICogLSBgZG90YCDigJMgYHtudW1iZXJ9YCDigJMgRG90IHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzICIxOCIuCiAqIC0gYGNvZGVOYW1lYCDigJMgYHtzdHJpbmd9YCDigJMgQ29kZSBuYW1lIG9mIHRoZSByZWxlYXNlLCBzdWNoIGFzICJqaWdnbGluZy1hcm1mYXQiLgogKi8KdmFyIHZlcnNpb24gPSB7CiAgZnVsbDogJzEuMC4zJywgICAgLy8gYWxsIG9mIHRoZXNlIHBsYWNlaG9sZGVyIHN0cmluZ3Mgd2lsbCBiZSByZXBsYWNlZCBieSByYWtlJ3MKICBtYWpvcjogMSwgICAgLy8gY29tcGlsZSB0YXNrCiAgbWlub3I6IDAsCiAgZG90OiAzLAogIGNvZGVOYW1lOiAnYm91bmN5LXRodW5kZXInCn07CgoKZnVuY3Rpb24gcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpewogIGV4dGVuZChhbmd1bGFyLCB7CiAgICAnYm9vdHN0cmFwJzogYm9vdHN0cmFwLAogICAgJ2NvcHknOiBjb3B5LAogICAgJ2V4dGVuZCc6IGV4dGVuZCwKICAgICdlcXVhbHMnOiBlcXVhbHMsCiAgICAnZWxlbWVudCc6IGpxTGl0ZSwKICAgICdmb3JFYWNoJzogZm9yRWFjaCwKICAgICdpbmplY3Rvcic6IGNyZWF0ZUluamVjdG9yLAogICAgJ25vb3AnOm5vb3AsCiAgICAnYmluZCc6YmluZCwKICAgICd0b0pzb24nOiB0b0pzb24sCiAgICAnZnJvbUpzb24nOiBmcm9tSnNvbiwKICAgICdpZGVudGl0eSc6aWRlbnRpdHksCiAgICAnaXNVbmRlZmluZWQnOiBpc1VuZGVmaW5lZCwKICAgICdpc0RlZmluZWQnOiBpc0RlZmluZWQsCiAgICAnaXNTdHJpbmcnOiBpc1N0cmluZywKICAgICdpc0Z1bmN0aW9uJzogaXNGdW5jdGlvbiwKICAgICdpc09iamVjdCc6IGlzT2JqZWN0LAogICAgJ2lzTnVtYmVyJzogaXNOdW1iZXIsCiAgICAnaXNFbGVtZW50JzogaXNFbGVtZW50LAogICAgJ2lzQXJyYXknOiBpc0FycmF5LAogICAgJ3ZlcnNpb24nOiB2ZXJzaW9uLAogICAgJ2lzRGF0ZSc6IGlzRGF0ZSwKICAgICdsb3dlcmNhc2UnOiBsb3dlcmNhc2UsCiAgICAndXBwZXJjYXNlJzogdXBwZXJjYXNlLAogICAgJ2NhbGxiYWNrcyc6IHtjb3VudGVyOiAwfQogIH0pOwoKICBhbmd1bGFyTW9kdWxlID0gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KTsKICB0cnkgewogICAgYW5ndWxhck1vZHVsZSgnbmdMb2NhbGUnKTsKICB9IGNhdGNoIChlKSB7CiAgICBhbmd1bGFyTW9kdWxlKCduZ0xvY2FsZScsIFtdKS5wcm92aWRlcignJGxvY2FsZScsICRMb2NhbGVQcm92aWRlcik7CiAgfQoKICBhbmd1bGFyTW9kdWxlKCduZycsIFsnbmdMb2NhbGUnXSwgWyckcHJvdmlkZScsCiAgICBmdW5jdGlvbiBuZ01vZHVsZSgkcHJvdmlkZSkgewogICAgICAkcHJvdmlkZS5wcm92aWRlcignJGNvbXBpbGUnLCAkQ29tcGlsZVByb3ZpZGVyKS4KICAgICAgICBkaXJlY3RpdmUoewogICAgICAgICAgICBhOiBodG1sQW5jaG9yRGlyZWN0aXZlLAogICAgICAgICAgICBpbnB1dDogaW5wdXREaXJlY3RpdmUsCiAgICAgICAgICAgIHRleHRhcmVhOiBpbnB1dERpcmVjdGl2ZSwKICAgICAgICAgICAgZm9ybTogZm9ybURpcmVjdGl2ZSwKICAgICAgICAgICAgc2NyaXB0OiBzY3JpcHREaXJlY3RpdmUsCiAgICAgICAgICAgIHNlbGVjdDogc2VsZWN0RGlyZWN0aXZlLAogICAgICAgICAgICBzdHlsZTogc3R5bGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG9wdGlvbjogb3B0aW9uRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0JpbmQ6IG5nQmluZERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdCaW5kSHRtbFVuc2FmZTogbmdCaW5kSHRtbFVuc2FmZURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdCaW5kVGVtcGxhdGU6IG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NsYXNzOiBuZ0NsYXNzRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NsYXNzRXZlbjogbmdDbGFzc0V2ZW5EaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ2xhc3NPZGQ6IG5nQ2xhc3NPZGREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ3NwOiBuZ0NzcERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdDbG9hazogbmdDbG9ha0RpcmVjdGl2ZSwKICAgICAgICAgICAgbmdDb250cm9sbGVyOiBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nRm9ybTogbmdGb3JtRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0hpZGU6IG5nSGlkZURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nSW5pdDogbmdJbml0RGlyZWN0aXZlLAogICAgICAgICAgICBuZ05vbkJpbmRhYmxlOiBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1BsdXJhbGl6ZTogbmdQbHVyYWxpemVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nUmVwZWF0OiBuZ1JlcGVhdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdTaG93OiBuZ1Nob3dEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nU3VibWl0OiBuZ1N1Ym1pdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdTdHlsZTogbmdTdHlsZURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdTd2l0Y2g6IG5nU3dpdGNoRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1N3aXRjaFdoZW46IG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSwKICAgICAgICAgICAgbmdTd2l0Y2hEZWZhdWx0OiBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nT3B0aW9uczogbmdPcHRpb25zRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1ZpZXc6IG5nVmlld0RpcmVjdGl2ZSwKICAgICAgICAgICAgbmdUcmFuc2NsdWRlOiBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nTW9kZWw6IG5nTW9kZWxEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nTGlzdDogbmdMaXN0RGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NoYW5nZTogbmdDaGFuZ2VEaXJlY3RpdmUsCiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdSZXF1aXJlZDogcmVxdWlyZWREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nVmFsdWU6IG5nVmFsdWVEaXJlY3RpdmUKICAgICAgICB9KS4KICAgICAgICBkaXJlY3RpdmUobmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMpLgogICAgICAgIGRpcmVjdGl2ZShuZ0V2ZW50RGlyZWN0aXZlcyk7CiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHsKICAgICAgICAkYW5jaG9yU2Nyb2xsOiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsCiAgICAgICAgJGJyb3dzZXI6ICRCcm93c2VyUHJvdmlkZXIsCiAgICAgICAgJGNhY2hlRmFjdG9yeTogJENhY2hlRmFjdG9yeVByb3ZpZGVyLAogICAgICAgICRjb250cm9sbGVyOiAkQ29udHJvbGxlclByb3ZpZGVyLAogICAgICAgICRkb2N1bWVudDogJERvY3VtZW50UHJvdmlkZXIsCiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXI6ICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsCiAgICAgICAgJGZpbHRlcjogJEZpbHRlclByb3ZpZGVyLAogICAgICAgICRpbnRlcnBvbGF0ZTogJEludGVycG9sYXRlUHJvdmlkZXIsCiAgICAgICAgJGh0dHA6ICRIdHRwUHJvdmlkZXIsCiAgICAgICAgJGh0dHBCYWNrZW5kOiAkSHR0cEJhY2tlbmRQcm92aWRlciwKICAgICAgICAkbG9jYXRpb246ICRMb2NhdGlvblByb3ZpZGVyLAogICAgICAgICRsb2c6ICRMb2dQcm92aWRlciwKICAgICAgICAkcGFyc2U6ICRQYXJzZVByb3ZpZGVyLAogICAgICAgICRyb3V0ZTogJFJvdXRlUHJvdmlkZXIsCiAgICAgICAgJHJvdXRlUGFyYW1zOiAkUm91dGVQYXJhbXNQcm92aWRlciwKICAgICAgICAkcm9vdFNjb3BlOiAkUm9vdFNjb3BlUHJvdmlkZXIsCiAgICAgICAgJHE6ICRRUHJvdmlkZXIsCiAgICAgICAgJHNuaWZmZXI6ICRTbmlmZmVyUHJvdmlkZXIsCiAgICAgICAgJHRlbXBsYXRlQ2FjaGU6ICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsCiAgICAgICAgJHRpbWVvdXQ6ICRUaW1lb3V0UHJvdmlkZXIsCiAgICAgICAgJHdpbmRvdzogJFdpbmRvd1Byb3ZpZGVyCiAgICAgIH0pOwogICAgfQogIF0pOwp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vSlFMaXRlCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5lbGVtZW50CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogV3JhcHMgYSByYXcgRE9NIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgYXMgYSBbalF1ZXJ5XShodHRwOi8vanF1ZXJ5LmNvbSkgZWxlbWVudC4KICogYGFuZ3VsYXIuZWxlbWVudGAgY2FuIGJlIGVpdGhlciBhbiBhbGlhcyBmb3IgW2pRdWVyeV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS8pIGZ1bmN0aW9uLCBpZgogKiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBvciBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgdGhlIGVsZW1lbnQgb3Igc3RyaW5nIGluIEFuZ3VsYXIncyBqUXVlcnkgbGl0ZQogKiBpbXBsZW1lbnRhdGlvbiAoY29tbW9ubHkgcmVmZXJyZWQgdG8gYXMganFMaXRlKS4KICoKICogUmVhbCBqUXVlcnkgYWx3YXlzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBqcUxpdGUsIHByb3ZpZGVkIGl0IHdhcyBsb2FkZWQgYmVmb3JlIGBET01Db250ZW50TG9hZGVkYAogKiBldmVudCBmaXJlZC4KICoKICoganFMaXRlIGlzIGEgdGlueSwgQVBJLWNvbXBhdGlibGUgc3Vic2V0IG9mIGpRdWVyeSB0aGF0IGFsbG93cwogKiBBbmd1bGFyIHRvIG1hbmlwdWxhdGUgdGhlIERPTS4ganFMaXRlIGltcGxlbWVudHMgb25seSB0aGUgbW9zdCBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eQogKiB3aXRoaW4gYSB2ZXJ5IHNtYWxsIGZvb3RwcmludCwgc28gb25seSBhIHN1YnNldCBvZiB0aGUgalF1ZXJ5IEFQSSAtIG1ldGhvZHMsIGFyZ3VtZW50cyBhbmQKICogaW52b2NhdGlvbiBzdHlsZXMgLSBhcmUgc3VwcG9ydGVkLgogKgogKiBOb3RlOiBBbGwgZWxlbWVudCByZWZlcmVuY2VzIGluIEFuZ3VsYXIgYXJlIGFsd2F5cyB3cmFwcGVkIHdpdGggalF1ZXJ5IG9yIGpxTGl0ZTsgdGhleSBhcmUgbmV2ZXIKICogcmF3IERPTSByZWZlcmVuY2VzLgogKgogKiAjIyBBbmd1bGFyJ3MgalF1ZXJ5IGxpdGUgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBtZXRob2RzOgogKgogKiAtIFthZGRDbGFzcygpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWRkQ2xhc3MvKQogKiAtIFthZnRlcigpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWZ0ZXIvKQogKiAtIFthcHBlbmQoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FwcGVuZC8pCiAqIC0gW2F0dHIoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2F0dHIvKQogKiAtIFtiaW5kKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9iaW5kLykKICogLSBbY2hpbGRyZW4oKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NoaWxkcmVuLykKICogLSBbY2xvbmUoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nsb25lLykKICogLSBbY29udGVudHMoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRlbnRzLykKICogLSBbY3NzKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jc3MvKQogKiAtIFtkYXRhKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kYXRhLykKICogLSBbZXEoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2VxLykKICogLSBbZmluZCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZmluZC8pIC0gTGltaXRlZCB0byBsb29rdXBzIGJ5IHRhZyBuYW1lLgogKiAtIFtoYXNDbGFzcygpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaGFzQ2xhc3MvKQogKiAtIFtodG1sKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9odG1sLykKICogLSBbbmV4dCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vbmV4dC8pCiAqIC0gW3BhcmVudCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50LykKICogLSBbcHJlcGVuZCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcHJlcGVuZC8pCiAqIC0gW3Byb3AoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3Byb3AvKQogKiAtIFtyZWFkeSgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVhZHkvKQogKiAtIFtyZW1vdmUoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZS8pCiAqIC0gW3JlbW92ZUF0dHIoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUF0dHIvKQogKiAtIFtyZW1vdmVDbGFzcygpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQ2xhc3MvKQogKiAtIFtyZW1vdmVEYXRhKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVEYXRhLykKICogLSBbcmVwbGFjZVdpdGgoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlcGxhY2VXaXRoLykKICogLSBbdGV4dCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdGV4dC8pCiAqIC0gW3RvZ2dsZUNsYXNzKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90b2dnbGVDbGFzcy8pCiAqIC0gW3RyaWdnZXJIYW5kbGVyKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90cmlnZ2VySGFuZGxlci8pIC0gRG9lc24ndCBwYXNzIG5hdGl2ZSBldmVudCBvYmplY3RzIHRvIGhhbmRsZXJzLgogKiAtIFt1bmJpbmQoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3VuYmluZC8pCiAqIC0gW3ZhbCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdmFsLykKICogLSBbd3JhcCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vd3JhcC8pCiAqCiAqICMjIEluIGFkZHRpb24gdG8gdGhlIGFib3ZlLCBBbmd1bGFyIHByaXZpZGVzIGFuIGFkZGl0aW9uYWwgbWV0aG9kIHRvIGJvdGggalF1ZXJ5IGFuZCBqUXVlcnkgbGl0ZToKICoKICogLSBgY29udHJvbGxlcihuYW1lKWAgLSByZXRyaWV2ZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LiBCeSBkZWZhdWx0CiAqICAgcmV0cmlldmVzIGNvbnRyb2xsZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUuIElmIGBuYW1lYCBpcyBwcm92aWRlZCBhcwogKiAgIGNhbWVsQ2FzZSBkaXJlY3RpdmUgbmFtZSwgdGhlbiB0aGUgY29udHJvbGxlciBmb3IgdGhpcyBkaXJlY3RpdmUgd2lsbCBiZSByZXRyaWV2ZWQgKGUuZy4KICogICBgJ25nTW9kZWwnYCkuCiAqIC0gYGluamVjdG9yKClgIC0gcmV0cmlldmVzIHRoZSBpbmplY3RvciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuCiAqIC0gYHNjb3BlKClgIC0gcmV0cmlldmVzIHRoZSB7QGxpbmsgYXBpL25nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IG9mIHRoZSBjdXJyZW50CiAqICAgZWxlbWVudCBvciBpdHMgcGFyZW50LgogKiAtIGBpbmhlcml0ZWREYXRhKClgIC0gc2FtZSBhcyBgZGF0YSgpYCwgYnV0IHdhbGtzIHVwIHRoZSBET00gdW50aWwgYSB2YWx1ZSBpcyBmb3VuZCBvciB0aGUgdG9wCiAqICAgcGFyZW50IGVsZW1lbnQgaXMgcmVhY2hlZC4KICoKICogQHBhcmFtIHtzdHJpbmd8RE9NRWxlbWVudH0gZWxlbWVudCBIVE1MIHN0cmluZyBvciBET01FbGVtZW50IHRvIGJlIHdyYXBwZWQgaW50byBqUXVlcnkuCiAqIEByZXR1cm5zIHtPYmplY3R9IGpRdWVyeSBvYmplY3QuCiAqLwoKdmFyIGpxQ2FjaGUgPSBKUUxpdGUuY2FjaGUgPSB7fSwKICAgIGpxTmFtZSA9IEpRTGl0ZS5leHBhbmRvID0gJ25nLScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSwKICAgIGpxSWQgPSAxLAogICAgYWRkRXZlbnRMaXN0ZW5lckZuID0gKHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyCiAgICAgID8gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTt9CiAgICAgIDogZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtlbGVtZW50LmF0dGFjaEV2ZW50KCdvbicgKyB0eXBlLCBmbik7fSksCiAgICByZW1vdmVFdmVudExpc3RlbmVyRm4gPSAod2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIKICAgICAgPyBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikge2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpOyB9CiAgICAgIDogZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtlbGVtZW50LmRldGFjaEV2ZW50KCdvbicgKyB0eXBlLCBmbik7IH0pOwoKZnVuY3Rpb24ganFOZXh0SWQoKSB7IHJldHVybiArK2pxSWQ7IH0KCgp2YXIgU1BFQ0lBTF9DSEFSU19SRUdFWFAgPSAvKFtcOlwtXF9dKyguKSkvZzsKdmFyIE1PWl9IQUNLX1JFR0VYUCA9IC9ebW96KFtBLVpdKS87CgovKioKICogQ29udmVydHMgc25ha2VfY2FzZSB0byBjYW1lbENhc2UuCiAqIEFsc28gdGhlcmUgaXMgc3BlY2lhbCBjYXNlIGZvciBNb3ogcHJlZml4IHN0YXJ0aW5nIHdpdGggdXBwZXIgY2FzZSBsZXR0ZXIuCiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplCiAqLwpmdW5jdGlvbiBjYW1lbENhc2UobmFtZSkgewogIHJldHVybiBuYW1lLgogICAgcmVwbGFjZShTUEVDSUFMX0NIQVJTX1JFR0VYUCwgZnVuY3Rpb24oXywgc2VwYXJhdG9yLCBsZXR0ZXIsIG9mZnNldCkgewogICAgICByZXR1cm4gb2Zmc2V0ID8gbGV0dGVyLnRvVXBwZXJDYXNlKCkgOiBsZXR0ZXI7CiAgICB9KS4KICAgIHJlcGxhY2UoTU9aX0hBQ0tfUkVHRVhQLCAnTW96JDEnKTsKfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vIGpRdWVyeSBtdXRhdGlvbiBwYXRjaAovLwovLyAgSW4gY29uanVuY3Rpb24gd2l0aCBiaW5kSlF1ZXJ5IGludGVyY2VwdHMgYWxsIGpRdWVyeSdzIERPTSBkZXN0cnVjdGlvbiBhcGlzIGFuZCBmaXJlcyBhCi8vICRkZXN0cm95IGV2ZW50IG9uIGFsbCBET00gbm9kZXMgYmVpbmcgcmVtb3ZlZC4KLy8KLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgpmdW5jdGlvbiBKUUxpdGVQYXRjaEpRdWVyeVJlbW92ZShuYW1lLCBkaXNwYXRjaFRoaXMpIHsKICB2YXIgb3JpZ2luYWxKcUZuID0galF1ZXJ5LmZuW25hbWVdOwogIG9yaWdpbmFsSnFGbiA9IG9yaWdpbmFsSnFGbi4kb3JpZ2luYWwgfHwgb3JpZ2luYWxKcUZuOwogIHJlbW92ZVBhdGNoLiRvcmlnaW5hbCA9IG9yaWdpbmFsSnFGbjsKICBqUXVlcnkuZm5bbmFtZV0gPSByZW1vdmVQYXRjaDsKCiAgZnVuY3Rpb24gcmVtb3ZlUGF0Y2goKSB7CiAgICB2YXIgbGlzdCA9IFt0aGlzXSwKICAgICAgICBmaXJlRXZlbnQgPSBkaXNwYXRjaFRoaXMsCiAgICAgICAgc2V0LCBzZXRJbmRleCwgc2V0TGVuZ3RoLAogICAgICAgIGVsZW1lbnQsIGNoaWxkSW5kZXgsIGNoaWxkTGVuZ3RoLCBjaGlsZHJlbiwKICAgICAgICBmbnMsIGV2ZW50czsKCiAgICB3aGlsZShsaXN0Lmxlbmd0aCkgewogICAgICBzZXQgPSBsaXN0LnNoaWZ0KCk7CiAgICAgIGZvcihzZXRJbmRleCA9IDAsIHNldExlbmd0aCA9IHNldC5sZW5ndGg7IHNldEluZGV4IDwgc2V0TGVuZ3RoOyBzZXRJbmRleCsrKSB7CiAgICAgICAgZWxlbWVudCA9IGpxTGl0ZShzZXRbc2V0SW5kZXhdKTsKICAgICAgICBpZiAoZmlyZUV2ZW50KSB7CiAgICAgICAgICBlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCckZGVzdHJveScpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmaXJlRXZlbnQgPSAhZmlyZUV2ZW50OwogICAgICAgIH0KICAgICAgICBmb3IoY2hpbGRJbmRleCA9IDAsIGNoaWxkTGVuZ3RoID0gKGNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbigpKS5sZW5ndGg7CiAgICAgICAgICAgIGNoaWxkSW5kZXggPCBjaGlsZExlbmd0aDsKICAgICAgICAgICAgY2hpbGRJbmRleCsrKSB7CiAgICAgICAgICBsaXN0LnB1c2goalF1ZXJ5KGNoaWxkcmVuW2NoaWxkSW5kZXhdKSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gb3JpZ2luYWxKcUZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KZnVuY3Rpb24gSlFMaXRlKGVsZW1lbnQpIHsKICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEpRTGl0ZSkgewogICAgcmV0dXJuIGVsZW1lbnQ7CiAgfQogIGlmICghKHRoaXMgaW5zdGFuY2VvZiBKUUxpdGUpKSB7CiAgICBpZiAoaXNTdHJpbmcoZWxlbWVudCkgJiYgZWxlbWVudC5jaGFyQXQoMCkgIT0gJzwnKSB7CiAgICAgIHRocm93IEVycm9yKCdzZWxlY3RvcnMgbm90IGltcGxlbWVudGVkJyk7CiAgICB9CiAgICByZXR1cm4gbmV3IEpRTGl0ZShlbGVtZW50KTsKICB9CgogIGlmIChpc1N0cmluZyhlbGVtZW50KSkgewogICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgLy8gUmVhZCBhYm91dCB0aGUgTm9TY29wZSBlbGVtZW50cyBoZXJlOgogICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTMzODk3KFZTLjg1KS5hc3B4CiAgICBkaXYuaW5uZXJIVE1MID0gJzxkaXY+JiMxNjA7PC9kaXY+JyArIGVsZW1lbnQ7IC8vIElFIGluc2FuaXR5IHRvIG1ha2UgTm9TY29wZSBlbGVtZW50cyB3b3JrIQogICAgZGl2LnJlbW92ZUNoaWxkKGRpdi5maXJzdENoaWxkKTsgLy8gcmVtb3ZlIHRoZSBzdXBlcmZsdW91cyBkaXYKICAgIEpRTGl0ZUFkZE5vZGVzKHRoaXMsIGRpdi5jaGlsZE5vZGVzKTsKICAgIHRoaXMucmVtb3ZlKCk7IC8vIGRldGFjaCB0aGUgZWxlbWVudHMgZnJvbSB0aGUgdGVtcG9yYXJ5IERPTSBkaXYuCiAgfSBlbHNlIHsKICAgIEpRTGl0ZUFkZE5vZGVzKHRoaXMsIGVsZW1lbnQpOwogIH0KfQoKZnVuY3Rpb24gSlFMaXRlQ2xvbmUoZWxlbWVudCkgewogIHJldHVybiBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTsKfQoKZnVuY3Rpb24gSlFMaXRlRGVhbG9jKGVsZW1lbnQpewogIEpRTGl0ZVJlbW92ZURhdGEoZWxlbWVudCk7CiAgZm9yICggdmFyIGkgPSAwLCBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGROb2RlcyB8fCBbXTsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICBKUUxpdGVEZWFsb2MoY2hpbGRyZW5baV0pOwogIH0KfQoKZnVuY3Rpb24gSlFMaXRlVW5iaW5kKGVsZW1lbnQsIHR5cGUsIGZuKSB7CiAgdmFyIGV2ZW50cyA9IEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZXZlbnRzJyksCiAgICAgIGhhbmRsZSA9IEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnaGFuZGxlJyk7CgogIGlmICghaGFuZGxlKSByZXR1cm47IC8vbm8gbGlzdGVuZXJzIHJlZ2lzdGVyZWQKCiAgaWYgKGlzVW5kZWZpbmVkKHR5cGUpKSB7CiAgICBmb3JFYWNoKGV2ZW50cywgZnVuY3Rpb24oZXZlbnRIYW5kbGVyLCB0eXBlKSB7CiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBldmVudEhhbmRsZXIpOwogICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgfSk7CiAgfSBlbHNlIHsKICAgIGlmIChpc1VuZGVmaW5lZChmbikpIHsKICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGV2ZW50c1t0eXBlXSk7CiAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07CiAgICB9IGVsc2UgewogICAgICBhcnJheVJlbW92ZShldmVudHNbdHlwZV0sIGZuKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZVJlbW92ZURhdGEoZWxlbWVudCkgewogIHZhciBleHBhbmRvSWQgPSBlbGVtZW50W2pxTmFtZV0sCiAgICAgIGV4cGFuZG9TdG9yZSA9IGpxQ2FjaGVbZXhwYW5kb0lkXTsKCiAgaWYgKGV4cGFuZG9TdG9yZSkgewogICAgaWYgKGV4cGFuZG9TdG9yZS5oYW5kbGUpIHsKICAgICAgZXhwYW5kb1N0b3JlLmV2ZW50cy4kZGVzdHJveSAmJiBleHBhbmRvU3RvcmUuaGFuZGxlKHt9LCAnJGRlc3Ryb3knKTsKICAgICAgSlFMaXRlVW5iaW5kKGVsZW1lbnQpOwogICAgfQogICAgZGVsZXRlIGpxQ2FjaGVbZXhwYW5kb0lkXTsKICAgIGVsZW1lbnRbanFOYW1lXSA9IHVuZGVmaW5lZDsgLy8gaWUgZG9lcyBub3QgYWxsb3cgZGVsZXRpb24gb2YgYXR0cmlidXRlcyBvbiBlbGVtZW50cy4KICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCBrZXksIHZhbHVlKSB7CiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnRbanFOYW1lXSwKICAgICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWQgfHwgLTFdOwoKICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkgewogICAgaWYgKCFleHBhbmRvU3RvcmUpIHsKICAgICAgZWxlbWVudFtqcU5hbWVdID0gZXhwYW5kb0lkID0ganFOZXh0SWQoKTsKICAgICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWRdID0ge307CiAgICB9CiAgICBleHBhbmRvU3RvcmVba2V5XSA9IHZhbHVlOwogIH0gZWxzZSB7CiAgICByZXR1cm4gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZVtrZXldOwogIH0KfQoKZnVuY3Rpb24gSlFMaXRlRGF0YShlbGVtZW50LCBrZXksIHZhbHVlKSB7CiAgdmFyIGRhdGEgPSBKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2RhdGEnKSwKICAgICAgaXNTZXR0ZXIgPSBpc0RlZmluZWQodmFsdWUpLAogICAgICBrZXlEZWZpbmVkID0gIWlzU2V0dGVyICYmIGlzRGVmaW5lZChrZXkpLAogICAgICBpc1NpbXBsZUdldHRlciA9IGtleURlZmluZWQgJiYgIWlzT2JqZWN0KGtleSk7CgogIGlmICghZGF0YSAmJiAhaXNTaW1wbGVHZXR0ZXIpIHsKICAgIEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZGF0YScsIGRhdGEgPSB7fSk7CiAgfQoKICBpZiAoaXNTZXR0ZXIpIHsKICAgIGRhdGFba2V5XSA9IHZhbHVlOwogIH0gZWxzZSB7CiAgICBpZiAoa2V5RGVmaW5lZCkgewogICAgICBpZiAoaXNTaW1wbGVHZXR0ZXIpIHsKICAgICAgICAvLyBkb24ndCBjcmVhdGUgZGF0YSBpbiB0aGlzIGNhc2UuCiAgICAgICAgcmV0dXJuIGRhdGEgJiYgZGF0YVtrZXldOwogICAgICB9IGVsc2UgewogICAgICAgIGV4dGVuZChkYXRhLCBrZXkpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZGF0YTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKSB7CiAgcmV0dXJuICgoIiAiICsgZWxlbWVudC5jbGFzc05hbWUgKyAiICIpLnJlcGxhY2UoL1tcblx0XS9nLCAiICIpLgogICAgICBpbmRleE9mKCAiICIgKyBzZWxlY3RvciArICIgIiApID4gLTEpOwp9CgpmdW5jdGlvbiBKUUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7CiAgaWYgKGNzc0NsYXNzZXMpIHsKICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykgewogICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHRyaW0oCiAgICAgICAgICAoIiAiICsgZWxlbWVudC5jbGFzc05hbWUgKyAiICIpCiAgICAgICAgICAucmVwbGFjZSgvW1xuXHRdL2csICIgIikKICAgICAgICAgIC5yZXBsYWNlKCIgIiArIHRyaW0oY3NzQ2xhc3MpICsgIiAiLCAiICIpCiAgICAgICk7CiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZUFkZENsYXNzKGVsZW1lbnQsIGNzc0NsYXNzZXMpIHsKICBpZiAoY3NzQ2xhc3NlcykgewogICAgZm9yRWFjaChjc3NDbGFzc2VzLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNzc0NsYXNzKSB7CiAgICAgIGlmICghSlFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3MpKSB7CiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSB0cmltKGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnICsgdHJpbShjc3NDbGFzcykpOwogICAgICB9CiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZUFkZE5vZGVzKHJvb3QsIGVsZW1lbnRzKSB7CiAgaWYgKGVsZW1lbnRzKSB7CiAgICBlbGVtZW50cyA9ICghZWxlbWVudHMubm9kZU5hbWUgJiYgaXNEZWZpbmVkKGVsZW1lbnRzLmxlbmd0aCkgJiYgIWlzV2luZG93KGVsZW1lbnRzKSkKICAgICAgPyBlbGVtZW50cwogICAgICA6IFsgZWxlbWVudHMgXTsKICAgIGZvcih2YXIgaT0wOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgcm9vdC5wdXNoKGVsZW1lbnRzW2ldKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIEpRTGl0ZUNvbnRyb2xsZXIoZWxlbWVudCwgbmFtZSkgewogIHJldHVybiBKUUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckJyArIChuYW1lIHx8ICduZ0NvbnRyb2xsZXInICkgKyAnQ29udHJvbGxlcicpOwp9CgpmdW5jdGlvbiBKUUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7CiAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTsKCiAgLy8gaWYgZWxlbWVudCBpcyB0aGUgZG9jdW1lbnQgb2JqZWN0IHdvcmsgd2l0aCB0aGUgaHRtbCBlbGVtZW50IGluc3RlYWQKICAvLyB0aGlzIG1ha2VzICQoZG9jdW1lbnQpLnNjb3BlKCkgcG9zc2libGUKICBpZihlbGVtZW50WzBdLm5vZGVUeXBlID09IDkpIHsKICAgIGVsZW1lbnQgPSBlbGVtZW50LmZpbmQoJ2h0bWwnKTsKICB9CgogIHdoaWxlIChlbGVtZW50Lmxlbmd0aCkgewogICAgaWYgKHZhbHVlID0gZWxlbWVudC5kYXRhKG5hbWUpKSByZXR1cm4gdmFsdWU7CiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnQoKTsKICB9Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBGdW5jdGlvbnMgd2hpY2ggYXJlIGRlY2xhcmVkIGRpcmVjdGx5LgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KdmFyIEpRTGl0ZVByb3RvdHlwZSA9IEpRTGl0ZS5wcm90b3R5cGUgPSB7CiAgcmVhZHk6IGZ1bmN0aW9uKGZuKSB7CiAgICB2YXIgZmlyZWQgPSBmYWxzZTsKCiAgICBmdW5jdGlvbiB0cmlnZ2VyKCkgewogICAgICBpZiAoZmlyZWQpIHJldHVybjsKICAgICAgZmlyZWQgPSB0cnVlOwogICAgICBmbigpOwogICAgfQoKICAgIHRoaXMuYmluZCgnRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpOyAvLyB3b3JrcyBmb3IgbW9kZXJuIGJyb3dzZXJzIGFuZCBJRTkKICAgIC8vIHdlIGNhbiBub3QgdXNlIGpxTGl0ZSBzaW5jZSB3ZSBhcmUgbm90IGRvbmUgbG9hZGluZyBhbmQgalF1ZXJ5IGNvdWxkIGJlIGxvYWRlZCBsYXRlci4KICAgIEpRTGl0ZSh3aW5kb3cpLmJpbmQoJ2xvYWQnLCB0cmlnZ2VyKTsgLy8gZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCBmb3Igb3RoZXJzCiAgfSwKICB0b1N0cmluZzogZnVuY3Rpb24oKSB7CiAgICB2YXIgdmFsdWUgPSBbXTsKICAgIGZvckVhY2godGhpcywgZnVuY3Rpb24oZSl7IHZhbHVlLnB1c2goJycgKyBlKTt9KTsKICAgIHJldHVybiAnWycgKyB2YWx1ZS5qb2luKCcsICcpICsgJ10nOwogIH0sCgogIGVxOiBmdW5jdGlvbihpbmRleCkgewogICAgICByZXR1cm4gKGluZGV4ID49IDApID8ganFMaXRlKHRoaXNbaW5kZXhdKSA6IGpxTGl0ZSh0aGlzW3RoaXMubGVuZ3RoICsgaW5kZXhdKTsKICB9LAoKICBsZW5ndGg6IDAsCiAgcHVzaDogcHVzaCwKICBzb3J0OiBbXS5zb3J0LAogIHNwbGljZTogW10uc3BsaWNlCn07CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyBnZXR0ZXIvc2V0dGVycy4KLy8gdGhlc2UgZnVuY3Rpb25zIHJldHVybiBzZWxmIG9uIHNldHRlciBhbmQKLy8gdmFsdWUgb24gZ2V0LgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KdmFyIEJPT0xFQU5fQVRUUiA9IHt9Owpmb3JFYWNoKCdtdWx0aXBsZSxzZWxlY3RlZCxjaGVja2VkLGRpc2FibGVkLHJlYWRPbmx5LHJlcXVpcmVkJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkgewogIEJPT0xFQU5fQVRUUltsb3dlcmNhc2UodmFsdWUpXSA9IHZhbHVlOwp9KTsKdmFyIEJPT0xFQU5fRUxFTUVOVFMgPSB7fTsKZm9yRWFjaCgnaW5wdXQsc2VsZWN0LG9wdGlvbix0ZXh0YXJlYSxidXR0b24sZm9ybScuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHsKICBCT09MRUFOX0VMRU1FTlRTW3VwcGVyY2FzZSh2YWx1ZSldID0gdHJ1ZTsKfSk7CgpmdW5jdGlvbiBnZXRCb29sZWFuQXR0ck5hbWUoZWxlbWVudCwgbmFtZSkgewogIC8vIGNoZWNrIGRvbSBsYXN0IHNpbmNlIHdlIHdpbGwgbW9zdCBsaWtlbHkgZmFpbCBvbiBuYW1lCiAgdmFyIGJvb2xlYW5BdHRyID0gQk9PTEVBTl9BVFRSW25hbWUudG9Mb3dlckNhc2UoKV07CgogIC8vIGJvb2xlYW5BdHRyIGlzIGhlcmUgdHdpY2UgdG8gbWluaW1pemUgRE9NIGFjY2VzcwogIHJldHVybiBib29sZWFuQXR0ciAmJiBCT09MRUFOX0VMRU1FTlRTW2VsZW1lbnQubm9kZU5hbWVdICYmIGJvb2xlYW5BdHRyOwp9Cgpmb3JFYWNoKHsKICBkYXRhOiBKUUxpdGVEYXRhLAogIGluaGVyaXRlZERhdGE6IEpRTGl0ZUluaGVyaXRlZERhdGEsCgogIHNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gSlFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJHNjb3BlJyk7CiAgfSwKCiAgY29udHJvbGxlcjogSlFMaXRlQ29udHJvbGxlciAsCgogIGluamVjdG9yOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gSlFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJGluamVjdG9yJyk7CiAgfSwKCiAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oZWxlbWVudCxuYW1lKSB7CiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsKICB9LAoKICBoYXNDbGFzczogSlFMaXRlSGFzQ2xhc3MsCgogIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHsKICAgIG5hbWUgPSBjYW1lbENhc2UobmFtZSk7CgogICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudC5zdHlsZVtuYW1lXSA9IHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgdmFyIHZhbDsKCiAgICAgIGlmIChtc2llIDw9IDgpIHsKICAgICAgICAvLyB0aGlzIGlzIHNvbWUgSUUgc3BlY2lmaWMgd2VpcmRuZXNzIHRoYXQgalF1ZXJ5IDEuNi40IGRvZXMgbm90IHN1cmUgd2h5CiAgICAgICAgdmFsID0gZWxlbWVudC5jdXJyZW50U3R5bGUgJiYgZWxlbWVudC5jdXJyZW50U3R5bGVbbmFtZV07CiAgICAgICAgaWYgKHZhbCA9PT0gJycpIHZhbCA9ICdhdXRvJzsKICAgICAgfQoKICAgICAgdmFsID0gdmFsIHx8IGVsZW1lbnQuc3R5bGVbbmFtZV07CgogICAgICBpZiAobXNpZSA8PSA4KSB7CiAgICAgICAgLy8ganF1ZXJ5IHdlaXJkbmVzcyA6LS8KICAgICAgICB2YWwgPSAodmFsID09PSAnJykgPyB1bmRlZmluZWQgOiB2YWw7CiAgICAgIH0KCiAgICAgIHJldHVybiAgdmFsOwogICAgfQogIH0sCgogIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKXsKICAgIHZhciBsb3dlcmNhc2VkTmFtZSA9IGxvd2VyY2FzZShuYW1lKTsKICAgIGlmIChCT09MRUFOX0FUVFJbbG93ZXJjYXNlZE5hbWVdKSB7CiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7CiAgICAgICAgaWYgKCEhdmFsdWUpIHsKICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSB0cnVlOwogICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgbG93ZXJjYXNlZE5hbWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBlbGVtZW50W25hbWVdID0gZmFsc2U7CiAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShsb3dlcmNhc2VkTmFtZSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAoZWxlbWVudFtuYW1lXSB8fAogICAgICAgICAgICAgICAgIChlbGVtZW50LmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKG5hbWUpfHwgbm9vcCkuc3BlY2lmaWVkKQogICAgICAgICAgICAgICA/IGxvd2VyY2FzZWROYW1lCiAgICAgICAgICAgICAgIDogdW5kZWZpbmVkOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpOwogICAgfSBlbHNlIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSkgewogICAgICAvLyB0aGUgZXh0cmEgYXJndW1lbnQgIjIiIGlzIHRvIGdldCB0aGUgcmlnaHQgdGhpbmcgZm9yIGEuaHJlZiBpbiBJRSwgc2VlIGpRdWVyeSBjb2RlCiAgICAgIC8vIHNvbWUgZWxlbWVudHMgKGUuZy4gRG9jdW1lbnQpIGRvbid0IGhhdmUgZ2V0IGF0dHJpYnV0ZSwgc28gcmV0dXJuIHVuZGVmaW5lZAogICAgICB2YXIgcmV0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSwgMik7CiAgICAgIC8vIG5vcm1hbGl6ZSBub24tZXhpc3RpbmcgYXR0cmlidXRlcyB0byB1bmRlZmluZWQgKGFzIGpRdWVyeSkKICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDsKICAgIH0KICB9LAoKICBwcm9wOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCB2YWx1ZSkgewogICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGVsZW1lbnRbbmFtZV07CiAgICB9CiAgfSwKCiAgdGV4dDogZXh0ZW5kKChtc2llIDwgOSkKICAgICAgPyBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkgewogICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09IDEgLyoqIEVsZW1lbnQgKi8pIHsKICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpCiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmlubmVyVGV4dDsKICAgICAgICAgIGVsZW1lbnQuaW5uZXJUZXh0ID0gdmFsdWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpCiAgICAgICAgICAgIHJldHVybiBlbGVtZW50Lm5vZGVWYWx1ZTsKICAgICAgICAgIGVsZW1lbnQubm9kZVZhbHVlID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CiAgICAgIDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHsKICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7CiAgICAgICAgICByZXR1cm4gZWxlbWVudC50ZXh0Q29udGVudDsKICAgICAgICB9CiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlOwogICAgICB9LCB7JGR2OicnfSksCgogIHZhbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHsKICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGVsZW1lbnQudmFsdWU7CiAgICB9CiAgICBlbGVtZW50LnZhbHVlID0gdmFsdWU7CiAgfSwKCiAgaHRtbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHsKICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGVsZW1lbnQuaW5uZXJIVE1MOwogICAgfQogICAgZm9yICh2YXIgaSA9IDAsIGNoaWxkTm9kZXMgPSBlbGVtZW50LmNoaWxkTm9kZXM7IGkgPCBjaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgIEpRTGl0ZURlYWxvYyhjaGlsZE5vZGVzW2ldKTsKICAgIH0KICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7CiAgfQp9LCBmdW5jdGlvbihmbiwgbmFtZSl7CiAgLyoqCiAgICogUHJvcGVydGllczogd3JpdGVzIHJldHVybiBzZWxlY3Rpb24sIHJlYWRzIHJldHVybiBmaXJzdCB2YWx1ZQogICAqLwogIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyKSB7CiAgICB2YXIgaSwga2V5OwoKICAgIC8vIEpRTGl0ZUhhc0NsYXNzIGhhcyBvbmx5IHR3byBhcmd1bWVudHMsIGJ1dCBpcyBhIGdldHRlci1vbmx5IGZuLCBzbyB3ZSBuZWVkIHRvIHNwZWNpYWwtY2FzZSBpdAogICAgLy8gaW4gYSB3YXkgdGhhdCBzdXJ2aXZlcyBtaW5pZmljYXRpb24uCiAgICBpZiAoKChmbi5sZW5ndGggPT0gMiAmJiAoZm4gIT09IEpRTGl0ZUhhc0NsYXNzICYmIGZuICE9PSBKUUxpdGVDb250cm9sbGVyKSkgPyBhcmcxIDogYXJnMikgPT09IHVuZGVmaW5lZCkgewogICAgICBpZiAoaXNPYmplY3QoYXJnMSkpIHsKCiAgICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIGJ1dCB0aGUgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHRoZSBrZXkvdmFsdWVzCiAgICAgICAgZm9yKGk9MDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmIChmbiA9PT0gSlFMaXRlRGF0YSkgewogICAgICAgICAgICAvLyBkYXRhKCkgdGFrZXMgdGhlIHdob2xlIG9iamVjdCBpbiBqUXVlcnkKICAgICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3IgKGtleSBpbiBhcmcxKSB7CiAgICAgICAgICAgICAgZm4odGhpc1tpXSwga2V5LCBhcmcxW2tleV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHdlIGFyZSBhIHJlYWQsIHNvIHJlYWQgdGhlIGZpcnN0IGNoaWxkLgogICAgICAgIGlmICh0aGlzLmxlbmd0aCkKICAgICAgICAgIHJldHVybiBmbih0aGlzWzBdLCBhcmcxLCBhcmcyKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIHNvIGFwcGx5IHRvIGFsbCBjaGlsZHJlbgogICAgICBmb3IoaT0wOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICAgIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIpOwogICAgICB9CiAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIHJldHVybiBmbi4kZHY7CiAgfTsKfSk7CgpmdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKSB7CiAgdmFyIGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCwgdHlwZSkgewogICAgaWYgKCFldmVudC5wcmV2ZW50RGVmYXVsdCkgewogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7IC8vaWUKICAgICAgfTsKICAgIH0KCiAgICBpZiAoIWV2ZW50LnN0b3BQcm9wYWdhdGlvbikgewogICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHsKICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlOyAvL2llCiAgICAgIH07CiAgICB9CgogICAgaWYgKCFldmVudC50YXJnZXQpIHsKICAgICAgZXZlbnQudGFyZ2V0ID0gZXZlbnQuc3JjRWxlbWVudCB8fCBkb2N1bWVudDsKICAgIH0KCiAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkpIHsKICAgICAgdmFyIHByZXZlbnQgPSBldmVudC5wcmV2ZW50RGVmYXVsdDsKICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHsKICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsKICAgICAgICBwcmV2ZW50LmNhbGwoZXZlbnQpOwogICAgICB9OwogICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7CiAgICB9CgogICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBldmVudC5kZWZhdWx0UHJldmVudGVkOwogICAgfTsKCiAgICBmb3JFYWNoKGV2ZW50c1t0eXBlIHx8IGV2ZW50LnR5cGVdLCBmdW5jdGlvbihmbikgewogICAgICBmbi5jYWxsKGVsZW1lbnQsIGV2ZW50KTsKICAgIH0pOwoKICAgIC8vIFJlbW92ZSBtb25rZXktcGF0Y2hlZCBtZXRob2RzIChJRSksCiAgICAvLyBhcyB0aGV5IHdvdWxkIGNhdXNlIG1lbW9yeSBsZWFrcyBpbiBJRTguCiAgICBpZiAobXNpZSA8PSA4KSB7CiAgICAgIC8vIElFNy84IGRvZXMgbm90IGFsbG93IHRvIGRlbGV0ZSBwcm9wZXJ0eSBvbiBuYXRpdmUgb2JqZWN0CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gbnVsbDsKICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gbnVsbDsKICAgICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gbnVsbDsKICAgIH0gZWxzZSB7CiAgICAgIC8vIEl0IHNob3VsZG4ndCBhZmZlY3Qgbm9ybWFsIGJyb3dzZXJzIChuYXRpdmUgbWV0aG9kcyBhcmUgZGVmaW5lZCBvbiBwcm90b3R5cGUpLgogICAgICBkZWxldGUgZXZlbnQucHJldmVudERlZmF1bHQ7CiAgICAgIGRlbGV0ZSBldmVudC5zdG9wUHJvcGFnYXRpb247CiAgICAgIGRlbGV0ZSBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQ7CiAgICB9CiAgfTsKICBldmVudEhhbmRsZXIuZWxlbSA9IGVsZW1lbnQ7CiAgcmV0dXJuIGV2ZW50SGFuZGxlcjsKfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgdHJhdmVyc2FsLgovLyBUaGVzZSBmdW5jdGlvbnMgY2hhaW4gcmVzdWx0cyBpbnRvIGEgc2luZ2xlCi8vIHNlbGVjdG9yLgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KZm9yRWFjaCh7CiAgcmVtb3ZlRGF0YTogSlFMaXRlUmVtb3ZlRGF0YSwKCiAgZGVhbG9jOiBKUUxpdGVEZWFsb2MsCgogIGJpbmQ6IGZ1bmN0aW9uIGJpbmRGbihlbGVtZW50LCB0eXBlLCBmbil7CiAgICB2YXIgZXZlbnRzID0gSlFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsICdldmVudHMnKSwKICAgICAgICBoYW5kbGUgPSBKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2hhbmRsZScpOwoKICAgIGlmICghZXZlbnRzKSBKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2V2ZW50cycsIGV2ZW50cyA9IHt9KTsKICAgIGlmICghaGFuZGxlKSBKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2hhbmRsZScsIGhhbmRsZSA9IGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpKTsKCiAgICBmb3JFYWNoKHR5cGUuc3BsaXQoJyAnKSwgZnVuY3Rpb24odHlwZSl7CiAgICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlXTsKCiAgICAgIGlmICghZXZlbnRGbnMpIHsKICAgICAgICBpZiAodHlwZSA9PSAnbW91c2VlbnRlcicgfHwgdHlwZSA9PSAnbW91c2VsZWF2ZScpIHsKICAgICAgICAgIHZhciBjb3VudGVyID0gMDsKCiAgICAgICAgICBldmVudHMubW91c2VlbnRlciA9IFtdOwogICAgICAgICAgZXZlbnRzLm1vdXNlbGVhdmUgPSBbXTsKCiAgICAgICAgICBiaW5kRm4oZWxlbWVudCwgJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgIGNvdW50ZXIrKzsKICAgICAgICAgICAgaWYgKGNvdW50ZXIgPT0gMSkgewogICAgICAgICAgICAgIGhhbmRsZShldmVudCwgJ21vdXNlZW50ZXInKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBiaW5kRm4oZWxlbWVudCwgJ21vdXNlb3V0JywgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgY291bnRlciAtLTsKICAgICAgICAgICAgaWYgKGNvdW50ZXIgPT0gMCkgewogICAgICAgICAgICAgIGhhbmRsZShldmVudCwgJ21vdXNlbGVhdmUnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpOwogICAgICAgICAgZXZlbnRzW3R5cGVdID0gW107CiAgICAgICAgfQogICAgICAgIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdCiAgICAgIH0KICAgICAgZXZlbnRGbnMucHVzaChmbik7CiAgICB9KTsKICB9LAoKICB1bmJpbmQ6IEpRTGl0ZVVuYmluZCwKCiAgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlcGxhY2VOb2RlKSB7CiAgICB2YXIgaW5kZXgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgIEpRTGl0ZURlYWxvYyhlbGVtZW50KTsKICAgIGZvckVhY2gobmV3IEpRTGl0ZShyZXBsYWNlTm9kZSksIGZ1bmN0aW9uKG5vZGUpewogICAgICBpZiAoaW5kZXgpIHsKICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5vZGUsIGVsZW1lbnQpOwogICAgICB9CiAgICAgIGluZGV4ID0gbm9kZTsKICAgIH0pOwogIH0sCgogIGNoaWxkcmVuOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICB2YXIgY2hpbGRyZW4gPSBbXTsKICAgIGZvckVhY2goZWxlbWVudC5jaGlsZE5vZGVzLCBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgaWYgKGVsZW1lbnQubm9kZU5hbWUgIT0gJyN0ZXh0JykKICAgICAgICBjaGlsZHJlbi5wdXNoKGVsZW1lbnQpOwogICAgfSk7CiAgICByZXR1cm4gY2hpbGRyZW47CiAgfSwKCiAgY29udGVudHM6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHJldHVybiBlbGVtZW50LmNoaWxkTm9kZXM7CiAgfSwKCiAgYXBwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7CiAgICBmb3JFYWNoKG5ldyBKUUxpdGUobm9kZSksIGZ1bmN0aW9uKGNoaWxkKXsKICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IDEpCiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7CiAgICB9KTsKICB9LAoKICBwcmVwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7CiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gMSkgewogICAgICB2YXIgaW5kZXggPSBlbGVtZW50LmZpcnN0Q2hpbGQ7CiAgICAgIGZvckVhY2gobmV3IEpRTGl0ZShub2RlKSwgZnVuY3Rpb24oY2hpbGQpewogICAgICAgIGlmIChpbmRleCkgewogICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGluZGV4KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7CiAgICAgICAgICBpbmRleCA9IGNoaWxkOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwKCiAgd3JhcDogZnVuY3Rpb24oZWxlbWVudCwgd3JhcE5vZGUpIHsKICAgIHdyYXBOb2RlID0ganFMaXRlKHdyYXBOb2RlKVswXTsKICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgICBpZiAocGFyZW50KSB7CiAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQod3JhcE5vZGUsIGVsZW1lbnQpOwogICAgfQogICAgd3JhcE5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7CiAgfSwKCiAgcmVtb3ZlOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBKUUxpdGVEZWFsb2MoZWxlbWVudCk7CiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpOwogIH0sCgogIGFmdGVyOiBmdW5jdGlvbihlbGVtZW50LCBuZXdFbGVtZW50KSB7CiAgICB2YXIgaW5kZXggPSBlbGVtZW50LCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgICBmb3JFYWNoKG5ldyBKUUxpdGUobmV3RWxlbWVudCksIGZ1bmN0aW9uKG5vZGUpewogICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTsKICAgICAgaW5kZXggPSBub2RlOwogICAgfSk7CiAgfSwKCiAgYWRkQ2xhc3M6IEpRTGl0ZUFkZENsYXNzLAogIHJlbW92ZUNsYXNzOiBKUUxpdGVSZW1vdmVDbGFzcywKCiAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yLCBjb25kaXRpb24pIHsKICAgIGlmIChpc1VuZGVmaW5lZChjb25kaXRpb24pKSB7CiAgICAgIGNvbmRpdGlvbiA9ICFKUUxpdGVIYXNDbGFzcyhlbGVtZW50LCBzZWxlY3Rvcik7CiAgICB9CiAgICAoY29uZGl0aW9uID8gSlFMaXRlQWRkQ2xhc3MgOiBKUUxpdGVSZW1vdmVDbGFzcykoZWxlbWVudCwgc2VsZWN0b3IpOwogIH0sCgogIHBhcmVudDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7CiAgfSwKCiAgbmV4dDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgcmV0dXJuIGVsZW1lbnQubmV4dFNpYmxpbmc7CiAgfSwKCiAgZmluZDogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IpIHsKICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKTsKICB9LAoKICBjbG9uZTogSlFMaXRlQ2xvbmUsCgogIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbihlbGVtZW50LCBldmVudE5hbWUpIHsKICAgIHZhciBldmVudEZucyA9IChKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2V2ZW50cycpIHx8IHt9KVtldmVudE5hbWVdOwoKICAgIGZvckVhY2goZXZlbnRGbnMsIGZ1bmN0aW9uKGZuKSB7CiAgICAgIGZuLmNhbGwoZWxlbWVudCwgbnVsbCk7CiAgICB9KTsKICB9Cn0sIGZ1bmN0aW9uKGZuLCBuYW1lKXsKICAvKioKICAgKiBjaGFpbmluZyBmdW5jdGlvbnMKICAgKi8KICBKUUxpdGUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYXJnMSwgYXJnMikgewogICAgdmFyIHZhbHVlOwogICAgZm9yKHZhciBpPTA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmICh2YWx1ZSA9PSB1bmRlZmluZWQpIHsKICAgICAgICB2YWx1ZSA9IGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIpOwogICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAvLyBhbnkgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHZhbHVlIG5lZWRzIHRvIGJlIHdyYXBwZWQKICAgICAgICAgIHZhbHVlID0ganFMaXRlKHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgSlFMaXRlQWRkTm9kZXModmFsdWUsIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIpKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHZhbHVlID09IHVuZGVmaW5lZCA/IHRoaXMgOiB2YWx1ZTsKICB9Owp9KTsKCi8qKgogKiBDb21wdXRlcyBhIGhhc2ggb2YgYW4gJ29iaicuCiAqIEhhc2ggb2YgYToKICogIHN0cmluZyBpcyBzdHJpbmcKICogIG51bWJlciBpcyBudW1iZXIgYXMgc3RyaW5nCiAqICBvYmplY3QgaXMgZWl0aGVyIHJlc3VsdCBvZiBjYWxsaW5nICQkaGFzaEtleSBmdW5jdGlvbiBvbiB0aGUgb2JqZWN0IG9yIHVuaXF1ZWx5IGdlbmVyYXRlZCBpZCwKICogICAgICAgICB0aGF0IGlzIGFsc28gYXNzaWduZWQgdG8gdGhlICQkaGFzaEtleSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0LgogKgogKiBAcGFyYW0gb2JqCiAqIEByZXR1cm5zIHtzdHJpbmd9IGhhc2ggc3RyaW5nIHN1Y2ggdGhhdCB0aGUgc2FtZSBpbnB1dCB3aWxsIGhhdmUgdGhlIHNhbWUgaGFzaCBzdHJpbmcuCiAqICAgICAgICAgVGhlIHJlc3VsdGluZyBzdHJpbmcga2V5IGlzIGluICd0eXBlOmhhc2hLZXknIGZvcm1hdC4KICovCmZ1bmN0aW9uIGhhc2hLZXkob2JqKSB7CiAgdmFyIG9ialR5cGUgPSB0eXBlb2Ygb2JqLAogICAgICBrZXk7CgogIGlmIChvYmpUeXBlID09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCkgewogICAgaWYgKHR5cGVvZiAoa2V5ID0gb2JqLiQkaGFzaEtleSkgPT0gJ2Z1bmN0aW9uJykgewogICAgICAvLyBtdXN0IGludm9rZSBvbiBvYmplY3QgdG8ga2VlcCB0aGUgcmlnaHQgdGhpcwogICAgICBrZXkgPSBvYmouJCRoYXNoS2V5KCk7CiAgICB9IGVsc2UgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGtleSA9IG9iai4kJGhhc2hLZXkgPSBuZXh0VWlkKCk7CiAgICB9CiAgfSBlbHNlIHsKICAgIGtleSA9IG9iajsKICB9CgogIHJldHVybiBvYmpUeXBlICsgJzonICsga2V5Owp9CgovKioKICogSGFzaE1hcCB3aGljaCBjYW4gdXNlIG9iamVjdHMgYXMga2V5cwogKi8KZnVuY3Rpb24gSGFzaE1hcChhcnJheSl7CiAgZm9yRWFjaChhcnJheSwgdGhpcy5wdXQsIHRoaXMpOwp9Ckhhc2hNYXAucHJvdG90eXBlID0gewogIC8qKgogICAqIFN0b3JlIGtleSB2YWx1ZSBwYWlyCiAgICogQHBhcmFtIGtleSBrZXkgdG8gc3RvcmUgY2FuIGJlIGFueSB0eXBlCiAgICogQHBhcmFtIHZhbHVlIHZhbHVlIHRvIHN0b3JlIGNhbiBiZSBhbnkgdHlwZQogICAqLwogIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgdGhpc1toYXNoS2V5KGtleSldID0gdmFsdWU7CiAgfSwKCiAgLyoqCiAgICogQHBhcmFtIGtleQogICAqIEByZXR1cm5zIHRoZSB2YWx1ZSBmb3IgdGhlIGtleQogICAqLwogIGdldDogZnVuY3Rpb24oa2V5KSB7CiAgICByZXR1cm4gdGhpc1toYXNoS2V5KGtleSldOwogIH0sCgogIC8qKgogICAqIFJlbW92ZSB0aGUga2V5L3ZhbHVlIHBhaXIKICAgKiBAcGFyYW0ga2V5CiAgICovCiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHsKICAgIHZhciB2YWx1ZSA9IHRoaXNba2V5ID0gaGFzaEtleShrZXkpXTsKICAgIGRlbGV0ZSB0aGlzW2tleV07CiAgICByZXR1cm4gdmFsdWU7CiAgfQp9OwoKLyoqCiAqIEEgbWFwIHdoZXJlIG11bHRpcGxlIHZhbHVlcyBjYW4gYmUgYWRkZWQgdG8gdGhlIHNhbWUga2V5IHN1Y2ggdGhhdCB0aGV5IGZvcm0gYSBxdWV1ZS4KICogQHJldHVybnMge0hhc2hRdWV1ZU1hcH0KICovCmZ1bmN0aW9uIEhhc2hRdWV1ZU1hcCgpIHt9Ckhhc2hRdWV1ZU1hcC5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogU2FtZSBhcyBhcnJheSBwdXNoLCBidXQgdXNpbmcgYW4gYXJyYXkgYXMgdGhlIHZhbHVlIGZvciB0aGUgaGFzaAogICAqLwogIHB1c2g6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgIHZhciBhcnJheSA9IHRoaXNba2V5ID0gaGFzaEtleShrZXkpXTsKICAgIGlmICghYXJyYXkpIHsKICAgICAgdGhpc1trZXldID0gW3ZhbHVlXTsKICAgIH0gZWxzZSB7CiAgICAgIGFycmF5LnB1c2godmFsdWUpOwogICAgfQogIH0sCgogIC8qKgogICAqIFNhbWUgYXMgYXJyYXkgc2hpZnQsIGJ1dCB1c2luZyBhbiBhcnJheSBhcyB0aGUgdmFsdWUgZm9yIHRoZSBoYXNoCiAgICovCiAgc2hpZnQ6IGZ1bmN0aW9uKGtleSkgewogICAgdmFyIGFycmF5ID0gdGhpc1trZXkgPSBoYXNoS2V5KGtleSldOwogICAgaWYgKGFycmF5KSB7CiAgICAgIGlmIChhcnJheS5sZW5ndGggPT0gMSkgewogICAgICAgIGRlbGV0ZSB0aGlzW2tleV07CiAgICAgICAgcmV0dXJuIGFycmF5WzBdOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBhcnJheS5zaGlmdCgpOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogcmV0dXJuIHRoZSBmaXJzdCBpdGVtIHdpdGhvdXQgZGVsZXRpbmcgaXQKICAgKi8KICBwZWVrOiBmdW5jdGlvbihrZXkpIHsKICAgIHZhciBhcnJheSA9IHRoaXNbaGFzaEtleShrZXkpXTsKICAgIGlmIChhcnJheSkgewogICAgcmV0dXJuIGFycmF5WzBdOwogICAgfQogIH0KfTsKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pbmplY3RvcgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZXMgYW4gaW5qZWN0b3IgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCBmb3IgcmV0cmlldmluZyBzZXJ2aWNlcyBhcyB3ZWxsIGFzIGZvcgogKiBkZXBlbmRlbmN5IGluamVjdGlvbiAoc2VlIHtAbGluayBndWlkZS9kaSBkZXBlbmRlbmN5IGluamVjdGlvbn0pLgogKgoKICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWUKICogICAgICAgIHtAbGluayBhbmd1bGFyLm1vZHVsZX0uIFRoZSBgbmdgIG1vZHVsZSBtdXN0IGJlIGV4cGxpY2l0bHkgYWRkZWQuCiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBJbmplY3RvciBmdW5jdGlvbi4gU2VlIHtAbGluayBBVVRPLiRpbmplY3RvciAkaW5qZWN0b3J9LgogKgogKiBAZXhhbXBsZQogKiBUeXBpY2FsIHVzYWdlCiAqIDxwcmU+CiAqICAgLy8gY3JlYXRlIGFuIGluamVjdG9yCiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZyddKTsKICoKICogICAvLyB1c2UgdGhlIGluamVjdG9yIHRvIGtpY2sgb2ZmIHlvdXIgYXBwbGljYXRpb24KICogICAvLyB1c2UgdGhlIHR5cGUgaW5mZXJlbmNlIHRvIGF1dG8gaW5qZWN0IGFyZ3VtZW50cywgb3IgdXNlIGltcGxpY2l0IGluamVjdGlvbgogKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJHJvb3RTY29wZSwgJGNvbXBpbGUsICRkb2N1bWVudCl7CiAqICAgICAkY29tcGlsZSgkZG9jdW1lbnQpKCRyb290U2NvcGUpOwogKiAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7CiAqICAgfSk7CiAqIDwvcHJlPgogKi8KCgovKioKICogQG5nZG9jIG92ZXJ2aWV3CiAqIEBuYW1lIEFVVE8KICogQGRlc2NyaXB0aW9uCiAqCiAqIEltcGxpY2l0IG1vZHVsZSB3aGljaCBnZXRzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gZWFjaCB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfS4KICovCgp2YXIgRk5fQVJHUyA9IC9eZnVuY3Rpb25ccypbXlwoXSpcKFxzKihbXlwpXSopXCkvbTsKdmFyIEZOX0FSR19TUExJVCA9IC8sLzsKdmFyIEZOX0FSRyA9IC9eXHMqKF8/KShcUys/KVwxXHMqJC87CnZhciBTVFJJUF9DT01NRU5UUyA9IC8oKFwvXC8uKiQpfChcL1wqW1xzXFNdKj9cKlwvKSkvbWc7CmZ1bmN0aW9uIGFubm90YXRlKGZuKSB7CiAgdmFyICRpbmplY3QsCiAgICAgIGZuVGV4dCwKICAgICAgYXJnRGVjbCwKICAgICAgbGFzdDsKCiAgaWYgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nKSB7CiAgICBpZiAoISgkaW5qZWN0ID0gZm4uJGluamVjdCkpIHsKICAgICAgJGluamVjdCA9IFtdOwogICAgICBmblRleHQgPSBmbi50b1N0cmluZygpLnJlcGxhY2UoU1RSSVBfQ09NTUVOVFMsICcnKTsKICAgICAgYXJnRGVjbCA9IGZuVGV4dC5tYXRjaChGTl9BUkdTKTsKICAgICAgZm9yRWFjaChhcmdEZWNsWzFdLnNwbGl0KEZOX0FSR19TUExJVCksIGZ1bmN0aW9uKGFyZyl7CiAgICAgICAgYXJnLnJlcGxhY2UoRk5fQVJHLCBmdW5jdGlvbihhbGwsIHVuZGVyc2NvcmUsIG5hbWUpewogICAgICAgICAgJGluamVjdC5wdXNoKG5hbWUpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgZm4uJGluamVjdCA9ICRpbmplY3Q7CiAgICB9CiAgfSBlbHNlIGlmIChpc0FycmF5KGZuKSkgewogICAgbGFzdCA9IGZuLmxlbmd0aCAtIDE7CiAgICBhc3NlcnRBcmdGbihmbltsYXN0XSwgJ2ZuJykKICAgICRpbmplY3QgPSBmbi5zbGljZSgwLCBsYXN0KTsKICB9IGVsc2UgewogICAgYXNzZXJ0QXJnRm4oZm4sICdmbicsIHRydWUpOwogIH0KICByZXR1cm4gJGluamVjdDsKfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBBVVRPLiRpbmplY3RvcgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIGAkaW5qZWN0b3JgIGlzIHVzZWQgdG8gcmV0cmlldmUgb2JqZWN0IGluc3RhbmNlcyBhcyBkZWZpbmVkIGJ5CiAqIHtAbGluayBBVVRPLiRwcm92aWRlIHByb3ZpZGVyfSwgaW5zdGFudGlhdGUgdHlwZXMsIGludm9rZSBtZXRob2RzLAogKiBhbmQgbG9hZCBtb2R1bGVzLgogKgogKiBUaGUgZm9sbG93aW5nIGFsd2F5cyBob2xkcyB0cnVlOgogKgogKiA8cHJlPgogKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKCk7CiAqICAgZXhwZWN0KCRpbmplY3Rvci5nZXQoJyRpbmplY3RvcicpKS50b0JlKCRpbmplY3Rvcik7CiAqICAgZXhwZWN0KCRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGluamVjdG9yKXsKICogICAgIHJldHVybiAkaW5qZWN0b3I7CiAqICAgfSkudG9CZSgkaW5qZWN0b3IpOwogKiA8L3ByZT4KICoKICogIyBJbmplY3Rpb24gRnVuY3Rpb24gQW5ub3RhdGlvbgogKgogKiBKYXZhU2NyaXB0IGRvZXMgbm90IGhhdmUgYW5ub3RhdGlvbnMsIGFuZCBhbm5vdGF0aW9ucyBhcmUgbmVlZGVkIGZvciBkZXBlbmRlbmN5IGluamVjdGlvbi4gVGhlCiAqIGZvbGxvd2luZyB3YXlzIGFyZSBhbGwgdmFsaWQgd2F5IG9mIGFubm90YXRpbmcgZnVuY3Rpb24gd2l0aCBpbmplY3Rpb24gYXJndW1lbnRzIGFuZCBhcmUgZXF1aXZhbGVudC4KICoKICogPHByZT4KICogICAvLyBpbmZlcnJlZCAob25seSB3b3JrcyBpZiBjb2RlIG5vdCBtaW5pZmllZC9vYmZ1c2NhdGVkKQogKiAgICRpbmplY3QuaW52b2tlKGZ1bmN0aW9uKHNlcnZpY2VBKXt9KTsKICoKICogICAvLyBhbm5vdGF0ZWQKICogICBmdW5jdGlvbiBleHBsaWNpdChzZXJ2aWNlQSkge307CiAqICAgZXhwbGljaXQuJGluamVjdCA9IFsnc2VydmljZUEnXTsKICogICAkaW5qZWN0Lmludm9rZShleHBsaWNpdCk7CiAqCiAqICAgLy8gaW5saW5lCiAqICAgJGluamVjdC5pbnZva2UoWydzZXJ2aWNlQScsIGZ1bmN0aW9uKHNlcnZpY2VBKXt9XSk7CiAqIDwvcHJlPgogKgogKiAjIyBJbmZlcmVuY2UKICoKICogSW4gSmF2YVNjcmlwdCBjYWxsaW5nIGB0b1N0cmluZygpYCBvbiBhIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24uIFRoZSBkZWZpbml0aW9uIGNhbiB0aGVuIGJlCiAqIHBhcnNlZCBhbmQgdGhlIGZ1bmN0aW9uIGFyZ3VtZW50cyBjYW4gYmUgZXh0cmFjdGVkLiAqTk9URToqIFRoaXMgZG9lcyBub3Qgd29yayB3aXRoIG1pbmlmaWNhdGlvbiwgYW5kIG9iZnVzY2F0aW9uCiAqIHRvb2xzIHNpbmNlIHRoZXNlIHRvb2xzIGNoYW5nZSB0aGUgYXJndW1lbnQgbmFtZXMuCiAqCiAqICMjIGAkaW5qZWN0YCBBbm5vdGF0aW9uCiAqIEJ5IGFkZGluZyBhIGAkaW5qZWN0YCBwcm9wZXJ0eSBvbnRvIGEgZnVuY3Rpb24gdGhlIGluamVjdGlvbiBwYXJhbWV0ZXJzIGNhbiBiZSBzcGVjaWZpZWQuCiAqCiAqICMjIElubGluZQogKiBBcyBhbiBhcnJheSBvZiBpbmplY3Rpb24gbmFtZXMsIHdoZXJlIHRoZSBsYXN0IGl0ZW0gaW4gdGhlIGFycmF5IGlzIHRoZSBmdW5jdGlvbiB0byBjYWxsLgogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIEFVVE8uJGluamVjdG9yI2dldAogKiBAbWV0aG9kT2YgQVVUTy4kaW5qZWN0b3IKICoKICogQGRlc2NyaXB0aW9uCiAqIFJldHVybiBhbiBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlIHRvIHJldHJpZXZlLgogKiBAcmV0dXJuIHsqfSBUaGUgaW5zdGFuY2UuCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgQVVUTy4kaW5qZWN0b3IjaW52b2tlCiAqIEBtZXRob2RPZiBBVVRPLiRpbmplY3RvcgogKgogKiBAZGVzY3JpcHRpb24KICogSW52b2tlIHRoZSBtZXRob2QgYW5kIHN1cHBseSB0aGUgbWV0aG9kIGFyZ3VtZW50cyBmcm9tIHRoZSBgJGluamVjdG9yYC4KICoKICogQHBhcmFtIHshZnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuIFRoZSBmdW5jdGlvbiBhcmd1bWVudHMgY29tZSBmb3JtIHRoZSBmdW5jdGlvbiBhbm5vdGF0aW9uLgogKiBAcGFyYW0ge09iamVjdD19IHNlbGYgVGhlIGB0aGlzYCBmb3IgdGhlIGludm9rZWQgbWV0aG9kLgogKiBAcGFyYW0ge09iamVjdD19IGxvY2FscyBPcHRpb25hbCBvYmplY3QuIElmIHByZXNldCB0aGVuIGFueSBhcmd1bWVudCBuYW1lcyBhcmUgcmVhZCBmcm9tIHRoaXMgb2JqZWN0IGZpcnN0LCBiZWZvcmUKICogICB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLgogKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBpbnZva2VkIGBmbmAgZnVuY3Rpb24uCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgQVVUTy4kaW5qZWN0b3IjaW5zdGFudGlhdGUKICogQG1ldGhvZE9mIEFVVE8uJGluamVjdG9yCiAqIEBkZXNjcmlwdGlvbgogKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgSlMgdHlwZS4gVGhlIG1ldGhvZCB0YWtlcyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGludm9rZXMgdGhlIG5ldyBvcGVyYXRvciBhbmQgc3VwcGxpZXMKICogYWxsIG9mIHRoZSBhcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGFzIHNwZWNpZmllZCBieSB0aGUgY29uc3RydWN0b3IgYW5ub3RhdGlvbi4KICoKICogQHBhcmFtIHtmdW5jdGlvbn0gVHlwZSBBbm5vdGF0ZWQgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpcyBvYmplY3QgZmlyc3QsIGJlZm9yZQogKiAgIHRoZSBgJGluamVjdG9yYCBpcyBjb25zdWx0ZWQuCiAqIEByZXR1cm5zIHtPYmplY3R9IG5ldyBpbnN0YW5jZSBvZiBgVHlwZWAuCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgQVVUTy4kaW5qZWN0b3IjYW5ub3RhdGUKICogQG1ldGhvZE9mIEFVVE8uJGluamVjdG9yCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBSZXR1cm5zIGFuIGFycmF5IG9mIHNlcnZpY2UgbmFtZXMgd2hpY2ggdGhlIGZ1bmN0aW9uIGlzIHJlcXVlc3RpbmcgZm9yIGluamVjdGlvbi4gVGhpcyBBUEkgaXMgdXNlZCBieSB0aGUgaW5qZWN0b3IKICogdG8gZGV0ZXJtaW5lIHdoaWNoIHNlcnZpY2VzIG5lZWQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24gd2hlbiB0aGUgZnVuY3Rpb24gaXMgaW52b2tlZC4gVGhlcmUgYXJlIHRocmVlCiAqIHdheXMgaW4gd2hpY2ggdGhlIGZ1bmN0aW9uIGNhbiBiZSBhbm5vdGF0ZWQgd2l0aCB0aGUgbmVlZGVkIGRlcGVuZGVuY2llcy4KICoKICogIyBBcmd1bWVudCBuYW1lcwogKgogKiBUaGUgc2ltcGxlc3QgZm9ybSBpcyB0byBleHRyYWN0IHRoZSBkZXBlbmRlbmNpZXMgZnJvbSB0aGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbi4gVGhpcyBpcyBkb25lIGJ5IGNvbnZlcnRpbmcKICogdGhlIGZ1bmN0aW9uIGludG8gYSBzdHJpbmcgdXNpbmcgYHRvU3RyaW5nKClgIG1ldGhvZCBhbmQgZXh0cmFjdGluZyB0aGUgYXJndW1lbnQgbmFtZXMuCiAqIDxwcmU+CiAqICAgLy8gR2l2ZW4KICogICBmdW5jdGlvbiBNeUNvbnRyb2xsZXIoJHNjb3BlLCAkcm91dGUpIHsKICogICAgIC8vIC4uLgogKiAgIH0KICoKICogICAvLyBUaGVuCiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKE15Q29udHJvbGxlcikpLnRvRXF1YWwoWyckc2NvcGUnLCAnJHJvdXRlJ10pOwogKiA8L3ByZT4KICoKICogVGhpcyBtZXRob2QgZG9lcyBub3Qgd29yayB3aXRoIGNvZGUgbWluZmljYXRpb24gLyBvYmZ1c2NhdGlvbi4gRm9yIHRoaXMgcmVhc29uIHRoZSBmb2xsb3dpbmcgYW5ub3RhdGlvbiBzdHJhdGVnaWVzCiAqIGFyZSBzdXBwb3J0ZWQuCiAqCiAqICMgVGhlIGAkaW5qZWN0b3JgIHByb3BlcnR5CiAqCiAqIElmIGEgZnVuY3Rpb24gaGFzIGFuIGAkaW5qZWN0YCBwcm9wZXJ0eSBhbmQgaXRzIHZhbHVlIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MsIHRoZW4gdGhlIHN0cmluZ3MgcmVwcmVzZW50IG5hbWVzIG9mCiAqIHNlcnZpY2VzIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uLgogKiA8cHJlPgogKiAgIC8vIEdpdmVuCiAqICAgdmFyIE15Q29udHJvbGxlciA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRTY29wZSwgb2JmdXNjYXRlZFJvdXRlKSB7CiAqICAgICAvLyAuLi4KICogICB9CiAqICAgLy8gRGVmaW5lIGZ1bmN0aW9uIGRlcGVuZGVuY2llcwogKiAgIE15Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJHJvdXRlJ107CiAqCiAqICAgLy8gVGhlbgogKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTsKICogPC9wcmU+CiAqCiAqICMgVGhlIGFycmF5IG5vdGF0aW9uCiAqCiAqIEl0IGlzIG9mdGVuIGRlc2lyYWJsZSB0byBpbmxpbmUgSW5qZWN0ZWQgZnVuY3Rpb25zIGFuZCB0aGF0J3Mgd2hlbiBzZXR0aW5nIHRoZSBgJGluamVjdGAgcHJvcGVydHkgaXMgdmVyeQogKiBpbmNvbnZlbmllbnQuIEluIHRoZXNlIHNpdHVhdGlvbnMgdXNpbmcgdGhlIGFycmF5IG5vdGF0aW9uIHRvIHNwZWNpZnkgdGhlIGRlcGVuZGVuY2llcyBpbiBhIHdheSB0aGF0IHN1cnZpdmVzCiAqIG1pbmlmaWNhdGlvbiBpcyBhIGJldHRlciBjaG9pY2U6CiAqCiAqIDxwcmU+CiAqICAgLy8gV2Ugd2lzaCB0byB3cml0ZSB0aGlzIChub3QgbWluaWZpY2F0aW9uIC8gb2JmdXNjYXRpb24gc2FmZSkKICogICBpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUsICRyb290U2NvcGUpIHsKICogICAgIC8vIC4uLgogKiAgIH0pOwogKgogKiAgIC8vIFdlIGFyZSBmb3JjZWQgdG8gd3JpdGUgYnJlYWsgaW5saW5pbmcKICogICB2YXIgdG1wRm4gPSBmdW5jdGlvbihvYmZ1c2NhdGVkQ29tcGlsZSwgb2JmdXNjYXRlZFJvb3RTY29wZSkgewogKiAgICAgLy8gLi4uCiAqICAgfTsKICogICB0bXBGbi4kaW5qZWN0ID0gWyckY29tcGlsZScsICckcm9vdFNjb3BlJ107CiAqICAgaW5qZWN0b3IuaW52b2tlKHRlbXBGbik7CiAqCiAqICAgLy8gVG8gYmV0dGVyIHN1cHBvcnQgaW5saW5lIGZ1bmN0aW9uIHRoZSBpbmxpbmUgYW5ub3RhdGlvbiBpcyBzdXBwb3J0ZWQKICogICBpbmplY3Rvci5pbnZva2UoWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmQ29tcGlsZSwgb2JmUm9vdFNjb3BlKSB7CiAqICAgICAvLyAuLi4KICogICB9XSk7CiAqCiAqICAgLy8gVGhlcmVmb3JlCiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKAogKiAgICAgIFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKG9iZnVzXyRjb21waWxlLCBvYmZ1c18kcm9vdFNjb3BlKSB7fV0pCiAqICAgICkudG9FcXVhbChbJyRjb21waWxlJywgJyRyb290U2NvcGUnXSk7CiAqIDwvcHJlPgogKgogKiBAcGFyYW0ge2Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBGdW5jdGlvbiBmb3Igd2hpY2ggZGVwZW5kZW50IHNlcnZpY2UgbmFtZXMgbmVlZCB0byBiZSByZXRyaWV2ZWQgYXMgZGVzY3JpYmVkCiAqICAgYWJvdmUuCiAqCiAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn0gVGhlIG5hbWVzIG9mIHRoZSBzZXJ2aWNlcyB3aGljaCB0aGUgZnVuY3Rpb24gcmVxdWlyZXMuCiAqLwoKCgoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgQVVUTy4kcHJvdmlkZQogKgogKiBAZGVzY3JpcHRpb24KICoKICogVXNlIGAkcHJvdmlkZWAgdG8gcmVnaXN0ZXIgbmV3IHByb3ZpZGVycyB3aXRoIHRoZSBgJGluamVjdG9yYC4gVGhlIHByb3ZpZGVycyBhcmUgdGhlIGZhY3RvcmllcyBmb3IgdGhlIGluc3RhbmNlLgogKiBUaGUgcHJvdmlkZXJzIHNoYXJlIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGluc3RhbmNlIHRoZXkgY3JlYXRlIHdpdGggdGhlIGBQcm92aWRlcmAgc3VmZml4ZWQgdG8gdGhlbS4KICoKICogQSBwcm92aWRlciBpcyBhbiBvYmplY3Qgd2l0aCBhIGAkZ2V0KClgIG1ldGhvZC4gVGhlIGluamVjdG9yIGNhbGxzIHRoZSBgJGdldGAgbWV0aG9kIHRvIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZgogKiBhIHNlcnZpY2UuIFRoZSBQcm92aWRlciBjYW4gaGF2ZSBhZGRpdGlvbmFsIG1ldGhvZHMgd2hpY2ggd291bGQgYWxsb3cgZm9yIGNvbmZpZ3VyYXRpb24gb2YgdGhlIHByb3ZpZGVyLgogKgogKiA8cHJlPgogKiAgIGZ1bmN0aW9uIEdyZWV0UHJvdmlkZXIoKSB7CiAqICAgICB2YXIgc2FsdXRhdGlvbiA9ICdIZWxsbyc7CiAqCiAqICAgICB0aGlzLnNhbHV0YXRpb24gPSBmdW5jdGlvbih0ZXh0KSB7CiAqICAgICAgIHNhbHV0YXRpb24gPSB0ZXh0OwogKiAgICAgfTsKICoKICogICAgIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkgewogKiAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUpIHsKICogICAgICAgICByZXR1cm4gc2FsdXRhdGlvbiArICcgJyArIG5hbWUgKyAnISc7CiAqICAgICAgIH07CiAqICAgICB9OwogKiAgIH0KICoKICogICBkZXNjcmliZSgnR3JlZXRlcicsIGZ1bmN0aW9uKCl7CiAqCiAqICAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbigkcHJvdmlkZSkgewogKiAgICAgICAkcHJvdmlkZS5wcm92aWRlcignZ3JlZXQnLCBHcmVldFByb3ZpZGVyKTsKICogICAgIH0pOwogKgogKiAgICAgaXQoJ3Nob3VsZCBncmVldCcsIGluamVjdChmdW5jdGlvbihncmVldCkgewogKiAgICAgICBleHBlY3QoZ3JlZXQoJ2FuZ3VsYXInKSkudG9FcXVhbCgnSGVsbG8gYW5ndWxhciEnKTsKICogICAgIH0pKTsKICoKICogICAgIGl0KCdzaG91bGQgYWxsb3cgY29uZmlndXJhdGlvbiBvZiBzYWx1dGF0aW9uJywgZnVuY3Rpb24oKSB7CiAqICAgICAgIG1vZHVsZShmdW5jdGlvbihncmVldFByb3ZpZGVyKSB7CiAqICAgICAgICAgZ3JlZXRQcm92aWRlci5zYWx1dGF0aW9uKCdBaG9qJyk7CiAqICAgICAgIH0pOwogKiAgICAgICBpbmplY3QoZnVuY3Rpb24oZ3JlZXQpIHsKICogICAgICAgICBleHBlY3QoZ3JlZXQoJ2FuZ3VsYXInKSkudG9FcXVhbCgnQWhvaiBhbmd1bGFyIScpOwogKiAgICAgICB9KTsKICogICAgICl9OwogKgogKiAgIH0pOwogKiA8L3ByZT4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRwcm92aWRlI3Byb3ZpZGVyCiAqIEBtZXRob2RPZiBBVVRPLiRwcm92aWRlCiAqIEBkZXNjcmlwdGlvbgogKgogKiBSZWdpc3RlciBhIHByb3ZpZGVyIGZvciBhIHNlcnZpY2UuIFRoZSBwcm92aWRlcnMgY2FuIGJlIHJldHJpZXZlZCBhbmQgY2FuIGhhdmUgYWRkaXRpb25hbCBjb25maWd1cmF0aW9uIG1ldGhvZHMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4gTk9URTogdGhlIHByb3ZpZGVyIHdpbGwgYmUgYXZhaWxhYmxlIHVuZGVyIGBuYW1lICsgJ1Byb3ZpZGVyJ2Aga2V5LgogKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oKSl9IHByb3ZpZGVyIElmIHRoZSBwcm92aWRlciBpczoKICoKICogICAtIGBPYmplY3RgOiB0aGVuIGl0IHNob3VsZCBoYXZlIGEgYCRnZXRgIG1ldGhvZC4gVGhlIGAkZ2V0YCBtZXRob2Qgd2lsbCBiZSBpbnZva2VkIHVzaW5nCiAqICAgICAgICAgICAgICAge0BsaW5rIEFVVE8uJGluamVjdG9yI2ludm9rZSAkaW5qZWN0b3IuaW52b2tlKCl9IHdoZW4gYW4gaW5zdGFuY2UgbmVlZHMgdG8gYmUgY3JlYXRlZC4KICogICAtIGBDb25zdHJ1Y3RvcmA6IGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcm92aWRlciB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcKICogICAgICAgICAgICAgICB7QGxpbmsgQVVUTy4kaW5qZWN0b3IjaW5zdGFudGlhdGUgJGluamVjdG9yLmluc3RhbnRpYXRlKCl9LCB0aGVuIHRyZWF0ZWQgYXMgYG9iamVjdGAuCiAqCiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2UKICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRwcm92aWRlI2ZhY3RvcnkKICogQG1ldGhvZE9mIEFVVE8uJHByb3ZpZGUKICogQGRlc2NyaXB0aW9uCiAqCiAqIEEgc2hvcnQgaGFuZCBmb3IgY29uZmlndXJpbmcgc2VydmljZXMgaWYgb25seSBgJGdldGAgbWV0aG9kIGlzIHJlcXVpcmVkLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gJGdldEZuIFRoZSAkZ2V0Rm4gZm9yIHRoZSBpbnN0YW5jZSBjcmVhdGlvbi4gSW50ZXJuYWxseSB0aGlzIGlzIGEgc2hvcnQgaGFuZCBmb3IKICogYCRwcm92aWRlLnByb3ZpZGVyKG5hbWUsIHskZ2V0OiAkZ2V0Rm59KWAuCiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2UKICovCgoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgQVVUTy4kcHJvdmlkZSNzZXJ2aWNlCiAqIEBtZXRob2RPZiBBVVRPLiRwcm92aWRlCiAqIEBkZXNjcmlwdGlvbgogKgogKiBBIHNob3J0IGhhbmQgZm9yIHJlZ2lzdGVyaW5nIHNlcnZpY2Ugb2YgZ2l2ZW4gY2xhc3MuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4KICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQSBjbGFzcyAoY29uc3RydWN0b3IgZnVuY3Rpb24pIHRoYXQgd2lsbCBiZSBpbnN0YW50aWF0ZWQuCiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2UKICovCgoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgQVVUTy4kcHJvdmlkZSN2YWx1ZQogKiBAbWV0aG9kT2YgQVVUTy4kcHJvdmlkZQogKiBAZGVzY3JpcHRpb24KICoKICogQSBzaG9ydCBoYW5kIGZvciBjb25maWd1cmluZyBzZXJ2aWNlcyBpZiB0aGUgYCRnZXRgIG1ldGhvZCBpcyBhIGNvbnN0YW50LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlLgogKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlCiAqLwoKCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIEFVVE8uJHByb3ZpZGUjY29uc3RhbnQKICogQG1ldGhvZE9mIEFVVE8uJHByb3ZpZGUKICogQGRlc2NyaXB0aW9uCiAqCiAqIEEgY29uc3RhbnQgdmFsdWUsIGJ1dCB1bmxpa2Uge0BsaW5rIEFVVE8uJHByb3ZpZGUjdmFsdWUgdmFsdWV9IGl0IGNhbiBiZSBpbmplY3RlZAogKiBpbnRvIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKG90aGVyIG1vZHVsZXMpIGFuZCBpdCBpcyBub3QgaW50ZXJjZXB0YWJsZSBieQogKiB7QGxpbmsgQVVUTy4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbnN0YW50LgogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBjb25zdGFudCB2YWx1ZS4KICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBpbnN0YW5jZQogKi8KCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRwcm92aWRlI2RlY29yYXRvcgogKiBAbWV0aG9kT2YgQVVUTy4kcHJvdmlkZQogKiBAZGVzY3JpcHRpb24KICoKICogRGVjb3JhdGlvbiBvZiBzZXJ2aWNlLCBhbGxvd3MgdGhlIGRlY29yYXRvciB0byBpbnRlcmNlcHQgdGhlIHNlcnZpY2UgaW5zdGFuY2UgY3JlYXRpb24uIFRoZQogKiByZXR1cm5lZCBpbnN0YW5jZSBtYXkgYmUgdGhlIG9yaWdpbmFsIGluc3RhbmNlLCBvciBhIG5ldyBpbnN0YW5jZSB3aGljaCBkZWxlZ2F0ZXMgdG8gdGhlCiAqIG9yaWdpbmFsIGluc3RhbmNlLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmljZSB0byBkZWNvcmF0ZS4KICogQHBhcmFtIHtmdW5jdGlvbigpfSBkZWNvcmF0b3IgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZQogKiAgICBpbnN0YW5jaWF0ZWQuIFRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgdXNpbmcgdGhlIHtAbGluayBBVVRPLiRpbmplY3RvciNpbnZva2UKICogICAgaW5qZWN0b3IuaW52b2tlfSBtZXRob2QgYW5kIGlzIHRoZXJlZm9yZSBmdWxseSBpbmplY3RhYmxlLiBMb2NhbCBpbmplY3Rpb24gYXJndW1lbnRzOgogKgogKiAgICAqIGAkZGVsZWdhdGVgIC0gVGhlIG9yaWdpbmFsIHNlcnZpY2UgaW5zdGFuY2UsIHdoaWNoIGNhbiBiZSBtb25rZXkgcGF0Y2hlZCwgY29uZmlndXJlZCwKICogICAgICBkZWNvcmF0ZWQgb3IgZGVsZWdhdGVkIHRvLgogKi8KCgpmdW5jdGlvbiBjcmVhdGVJbmplY3Rvcihtb2R1bGVzVG9Mb2FkKSB7CiAgdmFyIElOU1RBTlRJQVRJTkcgPSB7fSwKICAgICAgcHJvdmlkZXJTdWZmaXggPSAnUHJvdmlkZXInLAogICAgICBwYXRoID0gW10sCiAgICAgIGxvYWRlZE1vZHVsZXMgPSBuZXcgSGFzaE1hcCgpLAogICAgICBwcm92aWRlckNhY2hlID0gewogICAgICAgICRwcm92aWRlOiB7CiAgICAgICAgICAgIHByb3ZpZGVyOiBzdXBwb3J0T2JqZWN0KHByb3ZpZGVyKSwKICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSwKICAgICAgICAgICAgc2VydmljZTogc3VwcG9ydE9iamVjdChzZXJ2aWNlKSwKICAgICAgICAgICAgdmFsdWU6IHN1cHBvcnRPYmplY3QodmFsdWUpLAogICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksCiAgICAgICAgICAgIGRlY29yYXRvcjogZGVjb3JhdG9yCiAgICAgICAgICB9CiAgICAgIH0sCiAgICAgIHByb3ZpZGVySW5qZWN0b3IgPSBjcmVhdGVJbnRlcm5hbEluamVjdG9yKHByb3ZpZGVyQ2FjaGUsIGZ1bmN0aW9uKCkgewogICAgICAgIHRocm93IEVycm9yKCJVbmtub3duIHByb3ZpZGVyOiAiICsgcGF0aC5qb2luKCcgPC0gJykpOwogICAgICB9KSwKICAgICAgaW5zdGFuY2VDYWNoZSA9IHt9LAogICAgICBpbnN0YW5jZUluamVjdG9yID0gKGluc3RhbmNlQ2FjaGUuJGluamVjdG9yID0KICAgICAgICAgIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoaW5zdGFuY2VDYWNoZSwgZnVuY3Rpb24oc2VydmljZW5hbWUpIHsKICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoc2VydmljZW5hbWUgKyBwcm92aWRlclN1ZmZpeCk7CiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShwcm92aWRlci4kZ2V0LCBwcm92aWRlcik7CiAgICAgICAgICB9KSk7CgoKICBmb3JFYWNoKGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpLCBmdW5jdGlvbihmbikgeyBpbnN0YW5jZUluamVjdG9yLmludm9rZShmbiB8fCBub29wKTsgfSk7CgogIHJldHVybiBpbnN0YW5jZUluamVjdG9yOwoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAvLyAkcHJvdmlkZXIKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgZnVuY3Rpb24gc3VwcG9ydE9iamVjdChkZWxlZ2F0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgaWYgKGlzT2JqZWN0KGtleSkpIHsKICAgICAgICBmb3JFYWNoKGtleSwgcmV2ZXJzZVBhcmFtcyhkZWxlZ2F0ZSkpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBkZWxlZ2F0ZShrZXksIHZhbHVlKTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gcHJvdmlkZXIobmFtZSwgcHJvdmlkZXJfKSB7CiAgICBpZiAoaXNGdW5jdGlvbihwcm92aWRlcl8pKSB7CiAgICAgIHByb3ZpZGVyXyA9IHByb3ZpZGVySW5qZWN0b3IuaW5zdGFudGlhdGUocHJvdmlkZXJfKTsKICAgIH0KICAgIGlmICghcHJvdmlkZXJfLiRnZXQpIHsKICAgICAgdGhyb3cgRXJyb3IoJ1Byb3ZpZGVyICcgKyBuYW1lICsgJyBtdXN0IGRlZmluZSAkZ2V0IGZhY3RvcnkgbWV0aG9kLicpOwogICAgfQogICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGVbbmFtZSArIHByb3ZpZGVyU3VmZml4XSA9IHByb3ZpZGVyXzsKICB9CgogIGZ1bmN0aW9uIGZhY3RvcnkobmFtZSwgZmFjdG9yeUZuKSB7IHJldHVybiBwcm92aWRlcihuYW1lLCB7ICRnZXQ6IGZhY3RvcnlGbiB9KTsgfQoKICBmdW5jdGlvbiBzZXJ2aWNlKG5hbWUsIGNvbnN0cnVjdG9yKSB7CiAgICByZXR1cm4gZmFjdG9yeShuYW1lLCBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3RvcikgewogICAgICByZXR1cm4gJGluamVjdG9yLmluc3RhbnRpYXRlKGNvbnN0cnVjdG9yKTsKICAgIH1dKTsKICB9CgogIGZ1bmN0aW9uIHZhbHVlKG5hbWUsIHZhbHVlKSB7IHJldHVybiBmYWN0b3J5KG5hbWUsIHZhbHVlRm4odmFsdWUpKTsgfQoKICBmdW5jdGlvbiBjb25zdGFudChuYW1lLCB2YWx1ZSkgewogICAgcHJvdmlkZXJDYWNoZVtuYW1lXSA9IHZhbHVlOwogICAgaW5zdGFuY2VDYWNoZVtuYW1lXSA9IHZhbHVlOwogIH0KCiAgZnVuY3Rpb24gZGVjb3JhdG9yKHNlcnZpY2VOYW1lLCBkZWNvckZuKSB7CiAgICB2YXIgb3JpZ1Byb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoc2VydmljZU5hbWUgKyBwcm92aWRlclN1ZmZpeCksCiAgICAgICAgb3JpZyRnZXQgPSBvcmlnUHJvdmlkZXIuJGdldDsKCiAgICBvcmlnUHJvdmlkZXIuJGdldCA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgb3JpZ0luc3RhbmNlID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2Uob3JpZyRnZXQsIG9yaWdQcm92aWRlcik7CiAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShkZWNvckZuLCBudWxsLCB7JGRlbGVnYXRlOiBvcmlnSW5zdGFuY2V9KTsKICAgIH07CiAgfQoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAvLyBNb2R1bGUgTG9hZGluZwogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIGZ1bmN0aW9uIGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpewogICAgdmFyIHJ1bkJsb2NrcyA9IFtdOwogICAgZm9yRWFjaChtb2R1bGVzVG9Mb2FkLCBmdW5jdGlvbihtb2R1bGUpIHsKICAgICAgaWYgKGxvYWRlZE1vZHVsZXMuZ2V0KG1vZHVsZSkpIHJldHVybjsKICAgICAgbG9hZGVkTW9kdWxlcy5wdXQobW9kdWxlLCB0cnVlKTsKICAgICAgaWYgKGlzU3RyaW5nKG1vZHVsZSkpIHsKICAgICAgICB2YXIgbW9kdWxlRm4gPSBhbmd1bGFyTW9kdWxlKG1vZHVsZSk7CiAgICAgICAgcnVuQmxvY2tzID0gcnVuQmxvY2tzLmNvbmNhdChsb2FkTW9kdWxlcyhtb2R1bGVGbi5yZXF1aXJlcykpLmNvbmNhdChtb2R1bGVGbi5fcnVuQmxvY2tzKTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZvcih2YXIgaW52b2tlUXVldWUgPSBtb2R1bGVGbi5faW52b2tlUXVldWUsIGkgPSAwLCBpaSA9IGludm9rZVF1ZXVlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgICAgdmFyIGludm9rZUFyZ3MgPSBpbnZva2VRdWV1ZVtpXSwKICAgICAgICAgICAgICAgIHByb3ZpZGVyID0gaW52b2tlQXJnc1swXSA9PSAnJGluamVjdG9yJwogICAgICAgICAgICAgICAgICAgID8gcHJvdmlkZXJJbmplY3RvcgogICAgICAgICAgICAgICAgICAgIDogcHJvdmlkZXJJbmplY3Rvci5nZXQoaW52b2tlQXJnc1swXSk7CgogICAgICAgICAgICBwcm92aWRlcltpbnZva2VBcmdzWzFdXS5hcHBseShwcm92aWRlciwgaW52b2tlQXJnc1syXSk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgaWYgKGUubWVzc2FnZSkgZS5tZXNzYWdlICs9ICcgZnJvbSAnICsgbW9kdWxlOwogICAgICAgICAgdGhyb3cgZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihtb2R1bGUpKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGlmIChlLm1lc3NhZ2UpIGUubWVzc2FnZSArPSAnIGZyb20gJyArIG1vZHVsZTsKICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobW9kdWxlKSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBydW5CbG9ja3MucHVzaChwcm92aWRlckluamVjdG9yLmludm9rZShtb2R1bGUpKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBpZiAoZS5tZXNzYWdlKSBlLm1lc3NhZ2UgKz0gJyBmcm9tICcgKyBTdHJpbmcobW9kdWxlW21vZHVsZS5sZW5ndGggLSAxXSk7CiAgICAgICAgICB0aHJvdyBlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBhc3NlcnRBcmdGbihtb2R1bGUsICdtb2R1bGUnKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gcnVuQmxvY2tzOwogIH0KCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgLy8gaW50ZXJuYWwgSW5qZWN0b3IKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgZnVuY3Rpb24gY3JlYXRlSW50ZXJuYWxJbmplY3RvcihjYWNoZSwgZmFjdG9yeSkgewoKICAgIGZ1bmN0aW9uIGdldFNlcnZpY2Uoc2VydmljZU5hbWUpIHsKICAgICAgaWYgKHR5cGVvZiBzZXJ2aWNlTmFtZSAhPT0gJ3N0cmluZycpIHsKICAgICAgICB0aHJvdyBFcnJvcignU2VydmljZSBuYW1lIGV4cGVjdGVkJyk7CiAgICAgIH0KICAgICAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KHNlcnZpY2VOYW1lKSkgewogICAgICAgIGlmIChjYWNoZVtzZXJ2aWNlTmFtZV0gPT09IElOU1RBTlRJQVRJTkcpIHsKICAgICAgICAgIHRocm93IEVycm9yKCdDaXJjdWxhciBkZXBlbmRlbmN5OiAnICsgcGF0aC5qb2luKCcgPC0gJykpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY2FjaGVbc2VydmljZU5hbWVdOwogICAgICB9IGVsc2UgewogICAgICAgIHRyeSB7CiAgICAgICAgICBwYXRoLnVuc2hpZnQoc2VydmljZU5hbWUpOwogICAgICAgICAgY2FjaGVbc2VydmljZU5hbWVdID0gSU5TVEFOVElBVElORzsKICAgICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBmYWN0b3J5KHNlcnZpY2VOYW1lKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgcGF0aC5zaGlmdCgpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGludm9rZShmbiwgc2VsZiwgbG9jYWxzKXsKICAgICAgdmFyIGFyZ3MgPSBbXSwKICAgICAgICAgICRpbmplY3QgPSBhbm5vdGF0ZShmbiksCiAgICAgICAgICBsZW5ndGgsIGksCiAgICAgICAgICBrZXk7CgogICAgICBmb3IoaSA9IDAsIGxlbmd0aCA9ICRpbmplY3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICBrZXkgPSAkaW5qZWN0W2ldOwogICAgICAgIGFyZ3MucHVzaCgKICAgICAgICAgIGxvY2FscyAmJiBsb2NhbHMuaGFzT3duUHJvcGVydHkoa2V5KQogICAgICAgICAgPyBsb2NhbHNba2V5XQogICAgICAgICAgOiBnZXRTZXJ2aWNlKGtleSwgcGF0aCkKICAgICAgICApOwogICAgICB9CiAgICAgIGlmICghZm4uJGluamVjdCkgewogICAgICAgIC8vIHRoaXMgbWVhbnMgdGhhdCB3ZSBtdXN0IGJlIGFuIGFycmF5LgogICAgICAgIGZuID0gZm5bbGVuZ3RoXTsKICAgICAgfQoKCiAgICAgIC8vIFBlcmZvcm1hbmNlIG9wdGltaXphdGlvbjogaHR0cDovL2pzcGVyZi5jb20vYXBwbHktdnMtY2FsbC12cy1pbnZva2UKICAgICAgc3dpdGNoIChzZWxmID8gLTEgOiBhcmdzLmxlbmd0aCkgewogICAgICAgIGNhc2UgIDA6IHJldHVybiBmbigpOwogICAgICAgIGNhc2UgIDE6IHJldHVybiBmbihhcmdzWzBdKTsKICAgICAgICBjYXNlICAyOiByZXR1cm4gZm4oYXJnc1swXSwgYXJnc1sxXSk7CiAgICAgICAgY2FzZSAgMzogcmV0dXJuIGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pOwogICAgICAgIGNhc2UgIDQ6IHJldHVybiBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTsKICAgICAgICBjYXNlICA1OiByZXR1cm4gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7CiAgICAgICAgY2FzZSAgNjogcmV0dXJuIGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pOwogICAgICAgIGNhc2UgIDc6IHJldHVybiBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTsKICAgICAgICBjYXNlICA4OiByZXR1cm4gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSwgYXJnc1s3XSk7CiAgICAgICAgY2FzZSAgOTogcmV0dXJuIGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0sIGFyZ3NbN10sIGFyZ3NbOF0pOwogICAgICAgIGNhc2UgMTA6IHJldHVybiBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdLCBhcmdzWzddLCBhcmdzWzhdLCBhcmdzWzldKTsKICAgICAgICBkZWZhdWx0OiByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBpbnN0YW50aWF0ZShUeXBlLCBsb2NhbHMpIHsKICAgICAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24oKSB7fSwKICAgICAgICAgIGluc3RhbmNlLCByZXR1cm5lZFZhbHVlOwoKICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gKGlzQXJyYXkoVHlwZSkgPyBUeXBlW1R5cGUubGVuZ3RoIC0gMV0gOiBUeXBlKS5wcm90b3R5cGU7CiAgICAgIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7CiAgICAgIHJldHVybmVkVmFsdWUgPSBpbnZva2UoVHlwZSwgaW5zdGFuY2UsIGxvY2Fscyk7CgogICAgICByZXR1cm4gaXNPYmplY3QocmV0dXJuZWRWYWx1ZSkgPyByZXR1cm5lZFZhbHVlIDogaW5zdGFuY2U7CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgaW52b2tlOiBpbnZva2UsCiAgICAgIGluc3RhbnRpYXRlOiBpbnN0YW50aWF0ZSwKICAgICAgZ2V0OiBnZXRTZXJ2aWNlLAogICAgICBhbm5vdGF0ZTogYW5ub3RhdGUKICAgIH07CiAgfQp9Ci8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgbmcuJGFuY2hvclNjcm9sbAogKiBAcmVxdWlyZXMgJHdpbmRvdwogKiBAcmVxdWlyZXMgJGxvY2F0aW9uCiAqIEByZXF1aXJlcyAkcm9vdFNjb3BlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBXaGVuIGNhbGxlZCwgaXQgY2hlY2tzIGN1cnJlbnQgdmFsdWUgb2YgYCRsb2NhdGlvbi5oYXNoKClgIGFuZCBzY3JvbGwgdG8gcmVsYXRlZCBlbGVtZW50LAogKiBhY2NvcmRpbmcgdG8gcnVsZXMgc3BlY2lmaWVkIGluCiAqIHtAbGluayBodHRwOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjL092ZXJ2aWV3Lmh0bWwjdGhlLWluZGljYXRlZC1wYXJ0LW9mLXRoZS1kb2N1bWVudCBIdG1sNSBzcGVjfS4KICoKICogSXQgYWxzbyB3YXRjaGVzIHRoZSBgJGxvY2F0aW9uLmhhc2goKWAgYW5kIHNjcm9sbCB3aGVuZXZlciBpdCBjaGFuZ2VzIHRvIG1hdGNoIGFueSBhbmNob3IuCiAqIFRoaXMgY2FuIGJlIGRpc2FibGVkIGJ5IGNhbGxpbmcgYCRhbmNob3JTY3JvbGxQcm92aWRlci5kaXNhYmxlQXV0b1Njcm9sbGluZygpYC4KICovCmZ1bmN0aW9uICRBbmNob3JTY3JvbGxQcm92aWRlcigpIHsKCiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTsKCiAgdGhpcy5kaXNhYmxlQXV0b1Njcm9sbGluZyA9IGZ1bmN0aW9uKCkgewogICAgYXV0b1Njcm9sbGluZ0VuYWJsZWQgPSBmYWxzZTsKICB9OwoKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkd2luZG93LCAkbG9jYXRpb24sICRyb290U2NvcGUpIHsKICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7CgogICAgLy8gaGVscGVyIGZ1bmN0aW9uIHRvIGdldCBmaXJzdCBhbmNob3IgZnJvbSBhIE5vZGVMaXN0CiAgICAvLyBjYW4ndCB1c2UgZmlsdGVyLmZpbHRlciwgYXMgaXQgYWNjZXB0cyBvbmx5IGluc3RhbmNlcyBvZiBBcnJheQogICAgLy8gYW5kIElFIGNhbid0IGNvbnZlcnQgTm9kZUxpc3QgdG8gYW4gYXJyYXkgdXNpbmcgW10uc2xpY2UKICAgIC8vIFRPRE8odm9qdGEpOiB1c2UgZmlsdGVyIGlmIHdlIGNoYW5nZSBpdCB0byBhY2NlcHQgbGlzdHMgYXMgd2VsbAogICAgZnVuY3Rpb24gZ2V0Rmlyc3RBbmNob3IobGlzdCkgewogICAgICB2YXIgcmVzdWx0ID0gbnVsbDsKICAgICAgZm9yRWFjaChsaXN0LCBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgaWYgKCFyZXN1bHQgJiYgbG93ZXJjYXNlKGVsZW1lbnQubm9kZU5hbWUpID09PSAnYScpIHJlc3VsdCA9IGVsZW1lbnQ7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIGZ1bmN0aW9uIHNjcm9sbCgpIHsKICAgICAgdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpLCBlbG07CgogICAgICAvLyBlbXB0eSBoYXNoLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZQogICAgICBpZiAoIWhhc2gpICR3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7CgogICAgICAvLyBlbGVtZW50IHdpdGggZ2l2ZW4gaWQKICAgICAgZWxzZSBpZiAoKGVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2gpKSkgZWxtLnNjcm9sbEludG9WaWV3KCk7CgogICAgICAvLyBmaXJzdCBhbmNob3Igd2l0aCBnaXZlbiBuYW1lIDotRAogICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgZWxtLnNjcm9sbEludG9WaWV3KCk7CgogICAgICAvLyBubyBlbGVtZW50IGFuZCBoYXNoID09ICd0b3AnLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZQogICAgICBlbHNlIGlmIChoYXNoID09PSAndG9wJykgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTsKICAgIH0KCiAgICAvLyBkb2VzIG5vdCBzY3JvbGwgd2hlbiB1c2VyIGNsaWNrcyBvbiBhbmNob3IgbGluayB0aGF0IGlzIGN1cnJlbnRseSBvbgogICAgLy8gKG5vIHVybCBjaGFuZ2UsIG5vICRsb2NhaXRvbi5oYXNoKCkgY2hhbmdlKSwgYnJvd3NlciBuYXRpdmUgZG9lcyBzY3JvbGwKICAgIGlmIChhdXRvU2Nyb2xsaW5nRW5hYmxlZCkgewogICAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2goKSB7cmV0dXJuICRsb2NhdGlvbi5oYXNoKCk7fSwKICAgICAgICBmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2hBY3Rpb24oKSB7CiAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoc2Nyb2xsKTsKICAgICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gc2Nyb2xsOwogIH1dOwp9CgovKioKICogISBUaGlzIGlzIGEgcHJpdmF0ZSB1bmRvY3VtZW50ZWQgc2VydmljZSAhCiAqCiAqIEBuYW1lIG5nLiRicm93c2VyCiAqIEByZXF1aXJlcyAkbG9nCiAqIEBkZXNjcmlwdGlvbgogKiBUaGlzIG9iamVjdCBoYXMgdHdvIGdvYWxzOgogKgogKiAtIGhpZGUgYWxsIHRoZSBnbG9iYWwgc3RhdGUgaW4gdGhlIGJyb3dzZXIgY2F1c2VkIGJ5IHRoZSB3aW5kb3cgb2JqZWN0CiAqIC0gYWJzdHJhY3QgYXdheSBhbGwgdGhlIGJyb3dzZXIgc3BlY2lmaWMgZmVhdHVyZXMgYW5kIGluY29uc2lzdGVuY2llcwogKgogKiBGb3IgdGVzdHMgd2UgcHJvdmlkZSB7QGxpbmsgbmdNb2NrLiRicm93c2VyIG1vY2sgaW1wbGVtZW50YXRpb259IG9mIHRoZSBgJGJyb3dzZXJgCiAqIHNlcnZpY2UsIHdoaWNoIGNhbiBiZSB1c2VkIGZvciBjb252ZW5pZW50IHRlc3Rpbmcgb2YgdGhlIGFwcGxpY2F0aW9uIHdpdGhvdXQgdGhlIGludGVyYWN0aW9uIHdpdGgKICogdGhlIHJlYWwgYnJvd3NlciBhcGlzLgogKi8KLyoqCiAqIEBwYXJhbSB7b2JqZWN0fSB3aW5kb3cgVGhlIGdsb2JhbCB3aW5kb3cgb2JqZWN0LgogKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgalF1ZXJ5IHdyYXBwZWQgZG9jdW1lbnQuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gWEhSIFhNTEh0dHBSZXF1ZXN0IGNvbnN0cnVjdG9yLgogKiBAcGFyYW0ge29iamVjdH0gJGxvZyBjb25zb2xlLmxvZyBvciBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBpbnRlcmZhY2UuCiAqIEBwYXJhbSB7b2JqZWN0fSAkc25pZmZlciAkc25pZmZlciBzZXJ2aWNlCiAqLwpmdW5jdGlvbiBCcm93c2VyKHdpbmRvdywgZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKSB7CiAgdmFyIHNlbGYgPSB0aGlzLAogICAgICByYXdEb2N1bWVudCA9IGRvY3VtZW50WzBdLAogICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbiwKICAgICAgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5LAogICAgICBzZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQsCiAgICAgIGNsZWFyVGltZW91dCA9IHdpbmRvdy5jbGVhclRpbWVvdXQsCiAgICAgIHBlbmRpbmdEZWZlcklkcyA9IHt9OwoKICBzZWxmLmlzTW9jayA9IGZhbHNlOwoKICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSAwOwogIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MgPSBbXTsKCiAgLy8gVE9ETyh2b2p0YSk6IHJlbW92ZSB0aGlzIHRlbXBvcmFyeSBhcGkKICBzZWxmLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QgPSBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdDsKICBzZWxmLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSBmdW5jdGlvbigpIHsgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKzsgfTsKCiAgLyoqCiAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24oc3VwcG9ydHMgY3VycnlpbmcpIGFuZCBkZWNyZW1lbnRzIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYAogICAqIGNvdW50ZXIuIElmIHRoZSBjb3VudGVyIHJlYWNoZXMgMCwgYWxsIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYCBhcmUgZXhlY3V0ZWQuCiAgICovCiAgZnVuY3Rpb24gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pIHsKICAgIHRyeSB7CiAgICAgIGZuLmFwcGx5KG51bGwsIHNsaWNlQXJncyhhcmd1bWVudHMsIDEpKTsKICAgIH0gZmluYWxseSB7CiAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50LS07CiAgICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkgewogICAgICAgIHdoaWxlKG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5sZW5ndGgpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wb3AoKSgpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAkbG9nLmVycm9yKGUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgLyoqCiAgICogQHByaXZhdGUKICAgKiBOb3RlOiB0aGlzIG1ldGhvZCBpcyB1c2VkIG9ubHkgYnkgc2NlbmFyaW8gcnVubmVyCiAgICogVE9ETyh2b2p0YSk6IHByZWZpeCB0aGlzIG1ldGhvZCB3aXRoICQkID8KICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiBubyBvdXRzdGFuZGluZyByZXF1ZXN0CiAgICovCiAgc2VsZi5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzID0gZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgIC8vIGZvcmNlIGJyb3dzZXIgdG8gZXhlY3V0ZSBhbGwgcG9sbEZucyAtIHRoaXMgaXMgbmVlZGVkIHNvIHRoYXQgY29va2llcyBhbmQgb3RoZXIgcG9sbGVycyBmaXJlCiAgICAvLyBhdCBzb21lIGRldGVybWluaXN0aWMgdGltZSBpbiByZXNwZWN0IHRvIHRoZSB0ZXN0IHJ1bm5lcidzIGFjdGlvbnMuIExlYXZpbmcgdGhpbmdzIHVwIHRvIHRoZQogICAgLy8gcmVndWxhciBwb2xsZXIgd291bGQgcmVzdWx0IGluIGZsYWt5IHRlc3RzLgogICAgZm9yRWFjaChwb2xsRm5zLCBmdW5jdGlvbihwb2xsRm4peyBwb2xsRm4oKTsgfSk7CgogICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7CiAgICAgIGNhbGxiYWNrKCk7CiAgICB9IGVsc2UgewogICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucHVzaChjYWxsYmFjayk7CiAgICB9CiAgfTsKCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAvLyBQb2xsIFdhdGNoZXIgQVBJCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICB2YXIgcG9sbEZucyA9IFtdLAogICAgICBwb2xsVGltZW91dDsKCiAgLyoqCiAgICogQG5hbWUgbmcuJGJyb3dzZXIjYWRkUG9sbEZuCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyCiAgICoKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIFBvbGwgZnVuY3Rpb24gdG8gYWRkCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBBZGRzIGEgZnVuY3Rpb24gdG8gdGhlIGxpc3Qgb2YgZnVuY3Rpb25zIHRoYXQgcG9sbGVyIHBlcmlvZGljYWxseSBleGVjdXRlcywKICAgKiBhbmQgc3RhcnRzIHBvbGxpbmcgaWYgbm90IHN0YXJ0ZWQgeWV0LgogICAqCiAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IHRoZSBhZGRlZCBmdW5jdGlvbgogICAqLwogIHNlbGYuYWRkUG9sbEZuID0gZnVuY3Rpb24oZm4pIHsKICAgIGlmIChpc1VuZGVmaW5lZChwb2xsVGltZW91dCkpIHN0YXJ0UG9sbGVyKDEwMCwgc2V0VGltZW91dCk7CiAgICBwb2xsRm5zLnB1c2goZm4pOwogICAgcmV0dXJuIGZuOwogIH07CgogIC8qKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbCBIb3cgb2Z0ZW4gc2hvdWxkIGJyb3dzZXIgY2FsbCBwb2xsIGZ1bmN0aW9ucyAobXMpCiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBzZXRUaW1lb3V0IFJlZmVyZW5jZSB0byBhIHJlYWwgb3IgZmFrZSBgc2V0VGltZW91dGAgZnVuY3Rpb24uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDb25maWd1cmVzIHRoZSBwb2xsZXIgdG8gcnVuIGluIHRoZSBzcGVjaWZpZWQgaW50ZXJ2YWxzLCB1c2luZyB0aGUgc3BlY2lmaWVkCiAgICogc2V0VGltZW91dCBmbiBhbmQga2lja3MgaXQgb2ZmLgogICAqLwogIGZ1bmN0aW9uIHN0YXJ0UG9sbGVyKGludGVydmFsLCBzZXRUaW1lb3V0KSB7CiAgICAoZnVuY3Rpb24gY2hlY2soKSB7CiAgICAgIGZvckVhY2gocG9sbEZucywgZnVuY3Rpb24ocG9sbEZuKXsgcG9sbEZuKCk7IH0pOwogICAgICBwb2xsVGltZW91dCA9IHNldFRpbWVvdXQoY2hlY2ssIGludGVydmFsKTsKICAgIH0pKCk7CiAgfQoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIFVSTCBBUEkKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICB2YXIgbGFzdEJyb3dzZXJVcmwgPSBsb2NhdGlvbi5ocmVmLAogICAgICBiYXNlRWxlbWVudCA9IGRvY3VtZW50LmZpbmQoJ2Jhc2UnKTsKCiAgLyoqCiAgICogQG5hbWUgbmcuJGJyb3dzZXIjdXJsCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBHRVRURVI6CiAgICogV2l0aG91dCBhbnkgYXJndW1lbnQsIHRoaXMgbWV0aG9kIGp1c3QgcmV0dXJucyBjdXJyZW50IHZhbHVlIG9mIGxvY2F0aW9uLmhyZWYuCiAgICoKICAgKiBTRVRURVI6CiAgICogV2l0aCBhdCBsZWFzdCBvbmUgYXJndW1lbnQsIHRoaXMgbWV0aG9kIHNldHMgdXJsIHRvIG5ldyB2YWx1ZS4KICAgKiBJZiBodG1sNSBoaXN0b3J5IGFwaSBzdXBwb3J0ZWQsIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUgaXMgdXNlZCwgb3RoZXJ3aXNlCiAgICogbG9jYXRpb24uaHJlZi9sb2NhdGlvbi5yZXBsYWNlIGlzIHVzZWQuCiAgICogUmV0dXJucyBpdHMgb3duIGluc3RhbmNlIHRvIGFsbG93IGNoYWluaW5nCiAgICoKICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZQogICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIGNoYW5nZSB1cmwuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIE5ldyB1cmwgKHdoZW4gdXNlZCBhcyBzZXR0ZXIpCiAgICogQHBhcmFtIHtib29sZWFuPX0gcmVwbGFjZSBTaG91bGQgbmV3IHVybCByZXBsYWNlIGN1cnJlbnQgaGlzdG9yeSByZWNvcmQgPwogICAqLwogIHNlbGYudXJsID0gZnVuY3Rpb24odXJsLCByZXBsYWNlKSB7CiAgICAvLyBzZXR0ZXIKICAgIGlmICh1cmwpIHsKICAgICAgaWYgKGxhc3RCcm93c2VyVXJsID09IHVybCkgcmV0dXJuOwogICAgICBsYXN0QnJvd3NlclVybCA9IHVybDsKICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIHsKICAgICAgICBpZiAocmVwbGFjZSkgaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgJycsIHVybCk7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCAnJywgdXJsKTsKICAgICAgICAgIC8vIENyYXp5IE9wZXJhIEJ1ZzogaHR0cDovL215Lm9wZXJhLmNvbS9jb21tdW5pdHkvZm9ydW1zL3RvcGljLmRtbD9pZD0xMTg1NDYyCiAgICAgICAgICBiYXNlRWxlbWVudC5hdHRyKCdocmVmJywgYmFzZUVsZW1lbnQuYXR0cignaHJlZicpKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHJlcGxhY2UpIGxvY2F0aW9uLnJlcGxhY2UodXJsKTsKICAgICAgICBlbHNlIGxvY2F0aW9uLmhyZWYgPSB1cmw7CiAgICAgIH0KICAgICAgcmV0dXJuIHNlbGY7CiAgICAvLyBnZXR0ZXIKICAgIH0gZWxzZSB7CiAgICAgIC8vIHRoZSByZXBsYWNlbWVudCBpcyBhIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQwNzE3MgogICAgICByZXR1cm4gbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8lMjcvZywiJyIpOwogICAgfQogIH07CgogIHZhciB1cmxDaGFuZ2VMaXN0ZW5lcnMgPSBbXSwKICAgICAgdXJsQ2hhbmdlSW5pdCA9IGZhbHNlOwoKICBmdW5jdGlvbiBmaXJlVXJsQ2hhbmdlKCkgewogICAgaWYgKGxhc3RCcm93c2VyVXJsID09IHNlbGYudXJsKCkpIHJldHVybjsKCiAgICBsYXN0QnJvd3NlclVybCA9IHNlbGYudXJsKCk7CiAgICBmb3JFYWNoKHVybENoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHsKICAgICAgbGlzdGVuZXIoc2VsZi51cmwoKSk7CiAgICB9KTsKICB9CgogIC8qKgogICAqIEBuYW1lIG5nLiRicm93c2VyI29uVXJsQ2hhbmdlCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyCiAgICogQFRPRE8odm9qdGEpOiByZWZhY3RvciB0byB1c2Ugbm9kZSdzIHN5bnRheCBmb3IgZXZlbnRzCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBSZWdpc3RlciBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkLCB3aGVuIHVybCBjaGFuZ2VzLgogICAqCiAgICogSXQncyBvbmx5IGNhbGxlZCB3aGVuIHRoZSB1cmwgaXMgY2hhbmdlZCBieSBvdXRzaWRlIG9mIGFuZ3VsYXI6CiAgICogLSB1c2VyIHR5cGVzIGRpZmZlcmVudCB1cmwgaW50byBhZGRyZXNzIGJhcgogICAqIC0gdXNlciBjbGlja3Mgb24gaGlzdG9yeSAoZm9yd2FyZC9iYWNrKSBidXR0b24KICAgKiAtIHVzZXIgY2xpY2tzIG9uIGEgbGluawogICAqCiAgICogSXQncyBub3QgY2FsbGVkIHdoZW4gdXJsIGlzIGNoYW5nZWQgYnkgJGJyb3dzZXIudXJsKCkgbWV0aG9kCiAgICoKICAgKiBUaGUgbGlzdGVuZXIgZ2V0cyBjYWxsZWQgd2l0aCBuZXcgdXJsIGFzIHBhcmFtZXRlci4KICAgKgogICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlCiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb24gc2VydmljZX0gdG8gbW9uaXRvciB1cmwgY2hhbmdlcyBpbiBhbmd1bGFyIGFwcHMuCiAgICoKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGxpc3RlbmVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHVybCBjaGFuZ2VzLgogICAqIEByZXR1cm4ge2Z1bmN0aW9uKHN0cmluZyl9IFJldHVybnMgdGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXIgZm4gLSBoYW5keSBpZiB0aGUgZm4gaXMgYW5vbnltb3VzLgogICAqLwogIHNlbGYub25VcmxDaGFuZ2UgPSBmdW5jdGlvbihjYWxsYmFjaykgewogICAgaWYgKCF1cmxDaGFuZ2VJbml0KSB7CiAgICAgIC8vIFdlIGxpc3RlbiBvbiBib3RoIChoYXNoY2hhbmdlL3BvcHN0YXRlKSB3aGVuIGF2YWlsYWJsZSwgYXMgc29tZSBicm93c2VycyAoZS5nLiBPcGVyYSkKICAgICAgLy8gZG9uJ3QgZmlyZSBwb3BzdGF0ZSB3aGVuIHVzZXIgY2hhbmdlIHRoZSBhZGRyZXNzIGJhciBhbmQgZG9uJ3QgZmlyZSBoYXNoY2hhbmdlIHdoZW4gdXJsCiAgICAgIC8vIGNoYW5nZWQgYnkgcHVzaC9yZXBsYWNlU3RhdGUKCiAgICAgIC8vIGh0bWw1IGhpc3RvcnkgYXBpIC0gcG9wc3RhdGUgZXZlbnQKICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIGpxTGl0ZSh3aW5kb3cpLmJpbmQoJ3BvcHN0YXRlJywgZmlyZVVybENoYW5nZSk7CiAgICAgIC8vIGhhc2hjaGFuZ2UgZXZlbnQKICAgICAgaWYgKCRzbmlmZmVyLmhhc2hjaGFuZ2UpIGpxTGl0ZSh3aW5kb3cpLmJpbmQoJ2hhc2hjaGFuZ2UnLCBmaXJlVXJsQ2hhbmdlKTsKICAgICAgLy8gcG9sbGluZwogICAgICBlbHNlIHNlbGYuYWRkUG9sbEZuKGZpcmVVcmxDaGFuZ2UpOwoKICAgICAgdXJsQ2hhbmdlSW5pdCA9IHRydWU7CiAgICB9CgogICAgdXJsQ2hhbmdlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spOwogICAgcmV0dXJuIGNhbGxiYWNrOwogIH07CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgLy8gTWlzYyBBUEkKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAvKioKICAgKiBSZXR1cm5zIGN1cnJlbnQgPGJhc2UgaHJlZj4KICAgKiAoYWx3YXlzIHJlbGF0aXZlIC0gd2l0aG91dCBkb21haW4pCiAgICoKICAgKiBAcmV0dXJucyB7c3RyaW5nPX0KICAgKi8KICBzZWxmLmJhc2VIcmVmID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgaHJlZiA9IGJhc2VFbGVtZW50LmF0dHIoJ2hyZWYnKTsKICAgIHJldHVybiBocmVmID8gaHJlZi5yZXBsYWNlKC9eaHR0cHM/XDpcL1wvW15cL10qLywgJycpIDogaHJlZjsKICB9OwoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIENvb2tpZXMgQVBJCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICB2YXIgbGFzdENvb2tpZXMgPSB7fTsKICB2YXIgbGFzdENvb2tpZVN0cmluZyA9ICcnOwogIHZhciBjb29raWVQYXRoID0gc2VsZi5iYXNlSHJlZigpOwoKICAvKioKICAgKiBAbmFtZSBuZy4kYnJvd3NlciNjb29raWVzCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgQ29va2llIG5hbWUKICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIENva2tpZSB2YWx1ZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhlIGNvb2tpZXMgbWV0aG9kIHByb3ZpZGVzIGEgJ3ByaXZhdGUnIGxvdyBsZXZlbCBhY2Nlc3MgdG8gYnJvd3NlciBjb29raWVzLgogICAqIEl0IGlzIG5vdCBtZWFudCB0byBiZSB1c2VkIGRpcmVjdGx5LCB1c2UgdGhlICRjb29raWUgc2VydmljZSBpbnN0ZWFkLgogICAqCiAgICogVGhlIHJldHVybiB2YWx1ZXMgdmFyeSBkZXBlbmRpbmcgb24gdGhlIGFyZ3VtZW50cyB0aGF0IHRoZSBtZXRob2Qgd2FzIGNhbGxlZCB3aXRoIGFzIGZvbGxvd3M6CiAgICogPHVsPgogICAqICAgPGxpPmNvb2tpZXMoKSAtPiBoYXNoIG9mIGFsbCBjb29raWVzLCB0aGlzIGlzIE5PVCBhIGNvcHkgb2YgdGhlIGludGVybmFsIHN0YXRlLCBzbyBkbyBub3QgbW9kaWZ5IGl0PC9saT4KICAgKiAgIDxsaT5jb29raWVzKG5hbWUsIHZhbHVlKSAtPiBzZXQgbmFtZSB0byB2YWx1ZSwgaWYgdmFsdWUgaXMgdW5kZWZpbmVkIGRlbGV0ZSB0aGUgY29va2llPC9saT4KICAgKiAgIDxsaT5jb29raWVzKG5hbWUpIC0+IHRoZSBzYW1lIGFzIChuYW1lLCB1bmRlZmluZWQpID09IERFTEVURVMgKG5vIG9uZSBjYWxscyBpdCByaWdodCBub3cgdGhhdCB3YXkpPC9saT4KICAgKiA8L3VsPgogICAqCiAgICogQHJldHVybnMge09iamVjdH0gSGFzaCBvZiBhbGwgY29va2llcyAoaWYgY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlcikKICAgKi8KICBzZWxmLmNvb2tpZXMgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgdmFyIGNvb2tpZUxlbmd0aCwgY29va2llQXJyYXksIGNvb2tpZSwgaSwgaW5kZXg7CgogICAgaWYgKG5hbWUpIHsKICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgICByYXdEb2N1bWVudC5jb29raWUgPSBlc2NhcGUobmFtZSkgKyAiPTtwYXRoPSIgKyBjb29raWVQYXRoICsgIjtleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UIjsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7CiAgICAgICAgICBjb29raWVMZW5ndGggPSAocmF3RG9jdW1lbnQuY29va2llID0gZXNjYXBlKG5hbWUpICsgJz0nICsgZXNjYXBlKHZhbHVlKSArICc7cGF0aD0nICsgY29va2llUGF0aCkubGVuZ3RoICsgMTsKICAgICAgICAgIGlmIChjb29raWVMZW5ndGggPiA0MDk2KSB7CiAgICAgICAgICAgICRsb2cud2FybigiQ29va2llICciKyBuYW1lICsiJyBwb3NzaWJseSBub3Qgc2V0IG9yIG92ZXJmbG93ZWQgYmVjYXVzZSBpdCB3YXMgdG9vIGxhcmdlICgiKwogICAgICAgICAgICAgIGNvb2tpZUxlbmd0aCArICIgPiA0MDk2IGJ5dGVzKSEiKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChsYXN0Q29va2llcy5sZW5ndGggPiAyMCkgewogICAgICAgICAgICAkbG9nLndhcm4oIkNvb2tpZSAnIisgbmFtZSArIicgcG9zc2libHkgbm90IHNldCBvciBvdmVyZmxvd2VkIGJlY2F1c2UgdG9vIG1hbnkgY29va2llcyAiICsKICAgICAgICAgICAgICAid2VyZSBhbHJlYWR5IHNldCAoIiArIGxhc3RDb29raWVzLmxlbmd0aCArICIgPiAyMCApIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiAocmF3RG9jdW1lbnQuY29va2llICE9PSBsYXN0Q29va2llU3RyaW5nKSB7CiAgICAgICAgbGFzdENvb2tpZVN0cmluZyA9IHJhd0RvY3VtZW50LmNvb2tpZTsKICAgICAgICBjb29raWVBcnJheSA9IGxhc3RDb29raWVTdHJpbmcuc3BsaXQoIjsgIik7CiAgICAgICAgbGFzdENvb2tpZXMgPSB7fTsKCiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvb2tpZUFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb29raWUgPSBjb29raWVBcnJheVtpXTsKICAgICAgICAgIGluZGV4ID0gY29va2llLmluZGV4T2YoJz0nKTsKICAgICAgICAgIGlmIChpbmRleCA+IDApIHsgLy9pZ25vcmUgbmFtZWxlc3MgY29va2llcwogICAgICAgICAgICBsYXN0Q29va2llc1t1bmVzY2FwZShjb29raWUuc3Vic3RyaW5nKDAsIGluZGV4KSldID0gdW5lc2NhcGUoY29va2llLnN1YnN0cmluZyhpbmRleCArIDEpKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGxhc3RDb29raWVzOwogICAgfQogIH07CgoKICAvKioKICAgKiBAbmFtZSBuZy4kYnJvd3NlciNkZWZlcgogICAqIEBtZXRob2RPZiBuZy4kYnJvd3NlcgogICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiwgd2hvJ3MgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWZlcmVkLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gW2RlbGF5PTBdIG9mIG1pbGxpc2Vjb25kcyB0byBkZWZlciB0aGUgZnVuY3Rpb24gZXhlY3V0aW9uLgogICAqIEByZXR1cm5zIHsqfSBEZWZlcklkIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FuY2VsIHRoZSB0YXNrIHZpYSBgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKClgLgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogRXhlY3V0ZXMgYSBmbiBhc3luY2hyb25pb3VzbHkgdmlhIGBzZXRUaW1lb3V0KGZuLCBkZWxheSlgLgogICAqCiAgICogVW5saWtlIHdoZW4gY2FsbGluZyBgc2V0VGltZW91dGAgZGlyZWN0bHksIGluIHRlc3QgdGhpcyBmdW5jdGlvbiBpcyBtb2NrZWQgYW5kIGluc3RlYWQgb2YgdXNpbmcKICAgKiBgc2V0VGltZW91dGAgaW4gdGVzdHMsIHRoZSBmbnMgYXJlIHF1ZXVlZCBpbiBhbiBhcnJheSwgd2hpY2ggY2FuIGJlIHByb2dyYW1tYXRpY2FsbHkgZmx1c2hlZAogICAqIHZpYSBgJGJyb3dzZXIuZGVmZXIuZmx1c2goKWAuCiAgICoKICAgKi8KICBzZWxmLmRlZmVyID0gZnVuY3Rpb24oZm4sIGRlbGF5KSB7CiAgICB2YXIgdGltZW91dElkOwogICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKzsKICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXTsKICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pOwogICAgfSwgZGVsYXkgfHwgMCk7CiAgICBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXSA9IHRydWU7CiAgICByZXR1cm4gdGltZW91dElkOwogIH07CgoKICAvKioKICAgKiBAbmFtZSBuZy4kYnJvd3NlciNkZWZlci5jYW5jZWwKICAgKiBAbWV0aG9kT2YgbmcuJGJyb3dzZXIuZGVmZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIENhbmNlbHMgYSBkZWZlcmVkIHRhc2sgaWRlbnRpZmllZCB3aXRoIGBkZWZlcklkYC4KICAgKgogICAqIEBwYXJhbSB7Kn0gZGVmZXJJZCBUb2tlbiByZXR1cm5lZCBieSB0aGUgYCRicm93c2VyLmRlZmVyYCBmdW5jdGlvbi4KICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWx5IGNhbmNlbGVkLgogICAqLwogIHNlbGYuZGVmZXIuY2FuY2VsID0gZnVuY3Rpb24oZGVmZXJJZCkgewogICAgaWYgKHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXSkgewogICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW2RlZmVySWRdOwogICAgICBjbGVhclRpbWVvdXQoZGVmZXJJZCk7CiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9OwoKfQoKZnVuY3Rpb24gJEJyb3dzZXJQcm92aWRlcigpewogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9nJywgJyRzbmlmZmVyJywgJyRkb2N1bWVudCcsCiAgICAgIGZ1bmN0aW9uKCAkd2luZG93LCAgICRsb2csICAgJHNuaWZmZXIsICAgJGRvY3VtZW50KXsKICAgICAgICByZXR1cm4gbmV3IEJyb3dzZXIoJHdpbmRvdywgJGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcik7CiAgICAgIH1dOwp9Ci8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRjYWNoZUZhY3RvcnkKICoKICogQGRlc2NyaXB0aW9uCiAqIEZhY3RvcnkgdGhhdCBjb25zdHJ1Y3RzIGNhY2hlIG9iamVjdHMuCiAqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUlkIE5hbWUgb3IgaWQgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgY2FjaGUuCiAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgY2FjaGUgYmVoYXZpb3IuIFByb3BlcnRpZXM6CiAqCiAqICAgLSBge251bWJlcj19YCBgY2FwYWNpdHlgIOKAlCB0dXJucyB0aGUgY2FjaGUgaW50byBMUlUgY2FjaGUuCiAqCiAqIEByZXR1cm5zIHtvYmplY3R9IE5ld2x5IGNyZWF0ZWQgY2FjaGUgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzZXQgb2YgbWV0aG9kczoKICoKICogLSBge29iamVjdH1gIGBpbmZvKClgIOKAlCBSZXR1cm5zIGlkLCBzaXplLCBhbmQgb3B0aW9ucyBvZiBjYWNoZS4KICogLSBge3ZvaWR9YCBgcHV0KHtzdHJpbmd9IGtleSwgeyp9IHZhbHVlKWAg4oCUIFB1dHMgYSBuZXcga2V5LXZhbHVlIHBhaXIgaW50byB0aGUgY2FjaGUuCiAqIC0gYHt7Kn19YCBgZ2V0KHtzdHJpbmd9IGtleSlgIOKAlCBSZXR1cm5zIGNhY2hlZCB2YWx1ZSBmb3IgYGtleWAgb3IgdW5kZWZpbmVkIGZvciBjYWNoZSBtaXNzLgogKiAtIGB7dm9pZH1gIGByZW1vdmUoe3N0cmluZ30ga2V5KWAg4oCUIFJlbW92ZXMgYSBrZXktdmFsdWUgcGFpciBmcm9tIHRoZSBjYWNoZS4KICogLSBge3ZvaWR9YCBgcmVtb3ZlQWxsKClgIOKAlCBSZW1vdmVzIGFsbCBjYWNoZWQgdmFsdWVzLgogKiAtIGB7dm9pZH1gIGBkZXN0cm95KClgIOKAlCBSZW1vdmVzIHJlZmVyZW5jZXMgdG8gdGhpcyBjYWNoZSBmcm9tICRjYWNoZUZhY3RvcnkuCiAqCiAqLwpmdW5jdGlvbiAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIoKSB7CgogIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGNhY2hlcyA9IHt9OwoKICAgIGZ1bmN0aW9uIGNhY2hlRmFjdG9yeShjYWNoZUlkLCBvcHRpb25zKSB7CiAgICAgIGlmIChjYWNoZUlkIGluIGNhY2hlcykgewogICAgICAgIHRocm93IEVycm9yKCdjYWNoZUlkICcgKyBjYWNoZUlkICsgJyB0YWtlbicpOwogICAgICB9CgogICAgICB2YXIgc2l6ZSA9IDAsCiAgICAgICAgICBzdGF0cyA9IGV4dGVuZCh7fSwgb3B0aW9ucywge2lkOiBjYWNoZUlkfSksCiAgICAgICAgICBkYXRhID0ge30sCiAgICAgICAgICBjYXBhY2l0eSA9IChvcHRpb25zICYmIG9wdGlvbnMuY2FwYWNpdHkpIHx8IE51bWJlci5NQVhfVkFMVUUsCiAgICAgICAgICBscnVIYXNoID0ge30sCiAgICAgICAgICBmcmVzaEVuZCA9IG51bGwsCiAgICAgICAgICBzdGFsZUVuZCA9IG51bGw7CgogICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdID0gewoKICAgICAgICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XSB8fCAobHJ1SGFzaFtrZXldID0ge2tleToga2V5fSk7CgogICAgICAgICAgcmVmcmVzaChscnVFbnRyeSk7CgogICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuOwogICAgICAgICAgaWYgKCEoa2V5IGluIGRhdGEpKSBzaXplKys7CiAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTsKCiAgICAgICAgICBpZiAoc2l6ZSA+IGNhcGFjaXR5KSB7CiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN0YWxlRW5kLmtleSk7CiAgICAgICAgICB9CiAgICAgICAgfSwKCgogICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV07CgogICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuOwoKICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpOwoKICAgICAgICAgIHJldHVybiBkYXRhW2tleV07CiAgICAgICAgfSwKCgogICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV07CgogICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuOwoKICAgICAgICAgIGlmIChscnVFbnRyeSA9PSBmcmVzaEVuZCkgZnJlc2hFbmQgPSBscnVFbnRyeS5wOwogICAgICAgICAgaWYgKGxydUVudHJ5ID09IHN0YWxlRW5kKSBzdGFsZUVuZCA9IGxydUVudHJ5Lm47CiAgICAgICAgICBsaW5rKGxydUVudHJ5Lm4sbHJ1RW50cnkucCk7CgogICAgICAgICAgZGVsZXRlIGxydUhhc2hba2V5XTsKICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07CiAgICAgICAgICBzaXplLS07CiAgICAgICAgfSwKCgogICAgICAgIHJlbW92ZUFsbDogZnVuY3Rpb24oKSB7CiAgICAgICAgICBkYXRhID0ge307CiAgICAgICAgICBzaXplID0gMDsKICAgICAgICAgIGxydUhhc2ggPSB7fTsKICAgICAgICAgIGZyZXNoRW5kID0gc3RhbGVFbmQgPSBudWxsOwogICAgICAgIH0sCgoKICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHsKICAgICAgICAgIGRhdGEgPSBudWxsOwogICAgICAgICAgc3RhdHMgPSBudWxsOwogICAgICAgICAgbHJ1SGFzaCA9IG51bGw7CiAgICAgICAgICBkZWxldGUgY2FjaGVzW2NhY2hlSWRdOwogICAgICAgIH0sCgoKICAgICAgICBpbmZvOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBleHRlbmQoe30sIHN0YXRzLCB7c2l6ZTogc2l6ZX0pOwogICAgICAgIH0KICAgICAgfTsKCgogICAgICAvKioKICAgICAgICogbWFrZXMgdGhlIGBlbnRyeWAgdGhlIGZyZXNoRW5kIG9mIHRoZSBMUlUgbGlua2VkIGxpc3QKICAgICAgICovCiAgICAgIGZ1bmN0aW9uIHJlZnJlc2goZW50cnkpIHsKICAgICAgICBpZiAoZW50cnkgIT0gZnJlc2hFbmQpIHsKICAgICAgICAgIGlmICghc3RhbGVFbmQpIHsKICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeTsKICAgICAgICAgIH0gZWxzZSBpZiAoc3RhbGVFbmQgPT0gZW50cnkpIHsKICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeS5uOwogICAgICAgICAgfQoKICAgICAgICAgIGxpbmsoZW50cnkubiwgZW50cnkucCk7CiAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7CiAgICAgICAgICBmcmVzaEVuZCA9IGVudHJ5OwogICAgICAgICAgZnJlc2hFbmQubiA9IG51bGw7CiAgICAgICAgfQogICAgICB9CgoKICAgICAgLyoqCiAgICAgICAqIGJpZGlyZWN0aW9uYWxseSBsaW5rcyB0d28gZW50cmllcyBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0CiAgICAgICAqLwogICAgICBmdW5jdGlvbiBsaW5rKG5leHRFbnRyeSwgcHJldkVudHJ5KSB7CiAgICAgICAgaWYgKG5leHRFbnRyeSAhPSBwcmV2RW50cnkpIHsKICAgICAgICAgIGlmIChuZXh0RW50cnkpIG5leHRFbnRyeS5wID0gcHJldkVudHJ5OyAvL3Agc3RhbmRzIGZvciBwcmV2aW91cywgJ3ByZXYnIGRpZG4ndCBtaW5pZnkKICAgICAgICAgIGlmIChwcmV2RW50cnkpIHByZXZFbnRyeS5uID0gbmV4dEVudHJ5OyAvL24gc3RhbmRzIGZvciBuZXh0LCAnbmV4dCcgZGlkbid0IG1pbmlmeQogICAgICAgIH0KICAgICAgfQogICAgfQoKCiAgICBjYWNoZUZhY3RvcnkuaW5mbyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgaW5mbyA9IHt9OwogICAgICBmb3JFYWNoKGNhY2hlcywgZnVuY3Rpb24oY2FjaGUsIGNhY2hlSWQpIHsKICAgICAgICBpbmZvW2NhY2hlSWRdID0gY2FjaGUuaW5mbygpOwogICAgICB9KTsKICAgICAgcmV0dXJuIGluZm87CiAgICB9OwoKCiAgICBjYWNoZUZhY3RvcnkuZ2V0ID0gZnVuY3Rpb24oY2FjaGVJZCkgewogICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdOwogICAgfTsKCgogICAgcmV0dXJuIGNhY2hlRmFjdG9yeTsKICB9Owp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kdGVtcGxhdGVDYWNoZQogKgogKiBAZGVzY3JpcHRpb24KICogQ2FjaGUgdXNlZCBmb3Igc3RvcmluZyBodG1sIHRlbXBsYXRlcy4KICoKICogU2VlIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LgogKgogKi8KZnVuY3Rpb24gJFRlbXBsYXRlQ2FjaGVQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7CiAgICByZXR1cm4gJGNhY2hlRmFjdG9yeSgndGVtcGxhdGVzJyk7CiAgfV07Cn0KCi8qICEgVkFSSUFCTEUvRlVOQ1RJT04gTkFNSU5HIENPTlZFTlRJT05TIFRIQVQgQVBQTFkgVE8gVEhJUyBGSUxFIQogKgogKiBET00tcmVsYXRlZCB2YXJpYWJsZXM6CiAqCiAqIC0gIm5vZGUiIC0gRE9NIE5vZGUKICogLSAiZWxlbWVudCIgLSBET00gRWxlbWVudCBvciBOb2RlCiAqIC0gIiRub2RlIiBvciAiJGVsZW1lbnQiIC0ganFMaXRlLXdyYXBwZWQgbm9kZSBvciBlbGVtZW50CiAqCiAqCiAqIENvbXBpbGVyIHJlbGF0ZWQgc3R1ZmY6CiAqCiAqIC0gImxpbmtGbiIgLSBsaW5raW5nIGZuIG9mIGEgc2luZ2xlIGRpcmVjdGl2ZQogKiAtICJub2RlTGlua0ZuIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgcGFydGljdWxhciBub2RlCiAqIC0gImNoaWxkTGlua0ZuIiAtICBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBjaGlsZCBub2RlcyBvZiBhIHBhcnRpY3VsYXIgbm9kZQogKiAtICJjb21wb3NpdGVMaW5rRm4iIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBjb21waWxhdGlvbiByb290IChub2RlTGlzdCkKICovCgoKdmFyIE5PTl9BU1NJR05BQkxFX01PREVMX0VYUFJFU1NJT04gPSAnTm9uLWFzc2lnbmFibGUgbW9kZWwgZXhwcmVzc2lvbjogJzsKCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLiRjb21waWxlCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQ29tcGlsZXMgYSBwaWVjZSBvZiBIVE1MIHN0cmluZyBvciBET00gaW50byBhIHRlbXBsYXRlIGFuZCBwcm9kdWNlcyBhIHRlbXBsYXRlIGZ1bmN0aW9uLCB3aGljaAogKiBjYW4gdGhlbiBiZSB1c2VkIHRvIGxpbmsge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IGFuZCB0aGUgdGVtcGxhdGUgdG9nZXRoZXIuCiAqCiAqIFRoZSBjb21waWxhdGlvbiBpcyBhIHByb2Nlc3Mgb2Ygd2Fsa2luZyB0aGUgRE9NIHRyZWUgYW5kIHRyeWluZyB0byBtYXRjaCBET00gZWxlbWVudHMgdG8KICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LiBGb3IgZWFjaCBtYXRjaCBpdAogKiBleGVjdXRlcyBjb3JyZXNwb25kaW5nIHRlbXBsYXRlIGZ1bmN0aW9uIGFuZCBjb2xsZWN0cyB0aGUKICogaW5zdGFuY2UgZnVuY3Rpb25zIGludG8gYSBzaW5nbGUgdGVtcGxhdGUgZnVuY3Rpb24gd2hpY2ggaXMgdGhlbiByZXR1cm5lZC4KICoKICogVGhlIHRlbXBsYXRlIGZ1bmN0aW9uIGNhbiB0aGVuIGJlIHVzZWQgb25jZSB0byBwcm9kdWNlIHRoZSB2aWV3IG9yIGFzIGl0IGlzIHRoZSBjYXNlIHdpdGgKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCByZXBlYXRlcn0gbWFueS10aW1lcywgaW4gd2hpY2gKICogY2FzZSBlYWNoIGNhbGwgcmVzdWx0cyBpbiBhIHZpZXcgdGhhdCBpcyBhIERPTSBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUuCiAqCiA8ZG9jOmV4YW1wbGUgbW9kdWxlPSJjb21waWxlIj4KICAgPGRvYzpzb3VyY2U+CiAgICA8c2NyaXB0PgogICAgICAvLyBkZWNsYXJlIGEgbmV3IG1vZHVsZSwgYW5kIGluamVjdCB0aGUgJGNvbXBpbGVQcm92aWRlcgogICAgICBhbmd1bGFyLm1vZHVsZSgnY29tcGlsZScsIFtdLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7CiAgICAgICAgLy8gY29uZmlndXJlIG5ldyAnY29tcGlsZScgZGlyZWN0aXZlIGJ5IHBhc3NpbmcgYSBkaXJlY3RpdmUKICAgICAgICAvLyBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBpbmplY3RzIHRoZSAnJGNvbXBpbGUnCiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoJ2NvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkgewogICAgICAgICAgLy8gZGlyZWN0aXZlIGZhY3RvcnkgY3JlYXRlcyBhIGxpbmsgZnVuY3Rpb24KICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHsKICAgICAgICAgICAgc2NvcGUuJHdhdGNoKAogICAgICAgICAgICAgIGZ1bmN0aW9uKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgLy8gd2F0Y2ggdGhlICdjb21waWxlJyBleHByZXNzaW9uIGZvciBjaGFuZ2VzCiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGV2YWwoYXR0cnMuY29tcGlsZSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gY2hhbmdlcwogICAgICAgICAgICAgICAgLy8gYXNzaWduIGl0IGludG8gdGhlIGN1cnJlbnQgRE9NCiAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwodmFsdWUpOwoKICAgICAgICAgICAgICAgIC8vIGNvbXBpbGUgdGhlIG5ldyBET00gYW5kIGxpbmsgaXQgdG8gdGhlIGN1cnJlbnQKICAgICAgICAgICAgICAgIC8vIHNjb3BlLgogICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugb25seSBjb21waWxlIC5jaGlsZE5vZGVzIHNvIHRoYXQKICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IGdldCBpbnRvIGluZmluaXRlIGxvb3AgY29tcGlsaW5nIG91cnNlbHZlcwogICAgICAgICAgICAgICAgJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICApOwogICAgICAgICAgfTsKICAgICAgICB9KQogICAgICB9KTsKCiAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgJHNjb3BlLm5hbWUgPSAnQW5ndWxhcic7CiAgICAgICAgJHNjb3BlLmh0bWwgPSAnSGVsbG8ge3tuYW1lfX0nOwogICAgICB9CiAgICA8L3NjcmlwdD4KICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgIDxpbnB1dCBuZy1tb2RlbD0ibmFtZSI+IDxicj4KICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPSJodG1sIj48L3RleHRhcmVhPiA8YnI+CiAgICAgIDxkaXYgY29tcGlsZT0iaHRtbCI+PC9kaXY+CiAgICA8L2Rpdj4KICAgPC9kb2M6c291cmNlPgogICA8ZG9jOnNjZW5hcmlvPgogICAgIGl0KCdzaG91bGQgYXV0byBjb21waWxlJywgZnVuY3Rpb24oKSB7CiAgICAgICBleHBlY3QoZWxlbWVudCgnZGl2W2NvbXBpbGVdJykudGV4dCgpKS50b0JlKCdIZWxsbyBBbmd1bGFyJyk7CiAgICAgICBpbnB1dCgnaHRtbCcpLmVudGVyKCd7e25hbWV9fSEnKTsKICAgICAgIGV4cGVjdChlbGVtZW50KCdkaXZbY29tcGlsZV0nKS50ZXh0KCkpLnRvQmUoJ0FuZ3VsYXIhJyk7CiAgICAgfSk7CiAgIDwvZG9jOnNjZW5hcmlvPgogPC9kb2M6ZXhhbXBsZT4KCiAqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBvciBIVE1MIHN0cmluZyB0byBjb21waWxlIGludG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbi4KICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlWywgY2xvbmVBdHRhY2hGbl19IHRyYW5zY2x1ZGUgZnVuY3Rpb24gYXZhaWxhYmxlIHRvIGRpcmVjdGl2ZXMuCiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhQcmlvcml0eSBvbmx5IGFwcGx5IGRpcmVjdGl2ZXMgbG93ZXIgdGhlbiBnaXZlbiBwcmlvcml0eSAoT25seSBlZmZlY3RzIHRoZQogKiAgICAgICAgICAgICAgICAgcm9vdCBlbGVtZW50KHMpLCBub3QgdGhlaXIgY2hpbGRyZW4pCiAqIEByZXR1cm5zIHtmdW5jdGlvbihzY29wZVssIGNsb25lQXR0YWNoRm5dKX0gYSBsaW5rIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gYmluZCB0ZW1wbGF0ZQogKiAoYSBET00gZWxlbWVudC90cmVlKSB0byBhIHNjb3BlLiBXaGVyZToKICoKICogICogYHNjb3BlYCAtIEEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IHRvIGJpbmQgdG8uCiAqICAqIGBjbG9uZUF0dGFjaEZuYCAtIElmIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgbGluayBmdW5jdGlvbiB3aWxsIGNsb25lIHRoZQogKiAgICAgICAgICAgICAgIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGUKICogICAgICAgICAgICAgICBjbG9uZWQgZWxlbWVudHMgdG8gdGhlIERPTSBkb2N1bWVudCBhdCB0aGUgYXBwcm9wcmlhdGUgcGxhY2UuIFRoZSBgY2xvbmVBdHRhY2hGbmAgaXMKICogICAgICAgICAgICAgICBjYWxsZWQgYXM6IDxicj4gYGNsb25lQXR0YWNoRm4oY2xvbmVkRWxlbWVudCwgc2NvcGUpYCB3aGVyZToKICoKICogICAgICAqIGBjbG9uZWRFbGVtZW50YCAtIGlzIGEgY2xvbmUgb2YgdGhlIG9yaWdpbmFsIGBlbGVtZW50YCBwYXNzZWQgaW50byB0aGUgY29tcGlsZXIuCiAqICAgICAgKiBgc2NvcGVgIC0gaXMgdGhlIGN1cnJlbnQgc2NvcGUgd2l0aCB3aGljaCB0aGUgbGlua2luZyBmdW5jdGlvbiBpcyB3b3JraW5nIHdpdGguCiAqCiAqIENhbGxpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gcmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgdGVtcGxhdGUuIEl0IGlzIGVpdGhlciB0aGUgb3JpZ2luYWwgZWxlbWVudAogKiBwYXNzZWQgaW4sIG9yIHRoZSBjbG9uZSBvZiB0aGUgZWxlbWVudCBpZiB0aGUgYGNsb25lQXR0YWNoRm5gIGlzIHByb3ZpZGVkLgogKgogKiBBZnRlciBsaW5raW5nIHRoZSB2aWV3IGlzIG5vdCB1cGRhdGVkIHVudGlsIGFmdGVyIGEgY2FsbCB0byAkZGlnZXN0IHdoaWNoIHR5cGljYWxseSBpcyBkb25lIGJ5CiAqIEFuZ3VsYXIgYXV0b21hdGljYWxseS4KICoKICogSWYgeW91IG5lZWQgYWNjZXNzIHRvIHRoZSBib3VuZCB2aWV3LCB0aGVyZSBhcmUgdHdvIHdheXMgdG8gZG8gaXQ6CiAqCiAqIC0gSWYgeW91IGFyZSBub3QgYXNraW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHRvIGNsb25lIHRoZSB0ZW1wbGF0ZSwgY3JlYXRlIHRoZSBET00gZWxlbWVudChzKQogKiAgIGJlZm9yZSB5b3Ugc2VuZCB0aGVtIHRvIHRoZSBjb21waWxlciBhbmQga2VlcCB0aGlzIHJlZmVyZW5jZSBhcm91bmQuCiAqICAgPHByZT4KICogICAgIHZhciBlbGVtZW50ID0gJGNvbXBpbGUoJzxwPnt7dG90YWx9fTwvcD4nKShzY29wZSk7CiAqICAgPC9wcmU+CiAqCiAqIC0gaWYgb24gdGhlIG90aGVyIGhhbmQsIHlvdSBuZWVkIHRoZSBlbGVtZW50IHRvIGJlIGNsb25lZCwgdGhlIHZpZXcgcmVmZXJlbmNlIGZyb20gdGhlIG9yaWdpbmFsCiAqICAgZXhhbXBsZSB3b3VsZCBub3QgcG9pbnQgdG8gdGhlIGNsb25lLCBidXQgcmF0aGVyIHRvIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSB0aGF0IHdhcyBjbG9uZWQuIEluCiAqICAgdGhpcyBjYXNlLCB5b3UgY2FuIGFjY2VzcyB0aGUgY2xvbmUgdmlhIHRoZSBjbG9uZUF0dGFjaEZuOgogKiAgIDxwcmU+CiAqICAgICB2YXIgdGVtcGxhdGVIVE1MID0gYW5ndWxhci5lbGVtZW50KCc8cD57e3RvdGFsfX08L3A+JyksCiAqICAgICAgICAgc2NvcGUgPSAuLi4uOwogKgogKiAgICAgdmFyIGNsb25lZEVsZW1lbnQgPSAkY29tcGlsZSh0ZW1wbGF0ZUhUTUwpKHNjb3BlLCBmdW5jdGlvbihjbG9uZWRFbGVtZW50LCBzY29wZSkgewogKiAgICAgICAvL2F0dGFjaCB0aGUgY2xvbmUgdG8gRE9NIGRvY3VtZW50IGF0IHRoZSByaWdodCBwbGFjZQogKiAgICAgfSk7CiAqCiAqICAgICAvL25vdyB3ZSBoYXZlIHJlZmVyZW5jZSB0byB0aGUgY2xvbmVkIERPTSB2aWEgYGNsb25lYAogKiAgIDwvcHJlPgogKgogKgogKiBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRoZSBjb21waWxlciB3b3Jrcywgc2VlIHRoZQogKiB7QGxpbmsgZ3VpZGUvY29tcGlsZXIgQW5ndWxhciBIVE1MIENvbXBpbGVyfSBzZWN0aW9uIG9mIHRoZSBEZXZlbG9wZXIgR3VpZGUuCiAqLwoKCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSBuZy4kY29tcGlsZVByb3ZpZGVyCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICovCiRDb21waWxlUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnXTsKZnVuY3Rpb24gJENvbXBpbGVQcm92aWRlcigkcHJvdmlkZSkgewogIHZhciBoYXNEaXJlY3RpdmVzID0ge30sCiAgICAgIFN1ZmZpeCA9ICdEaXJlY3RpdmUnLAogICAgICBDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAgPSAvXlxzKmRpcmVjdGl2ZVw6XHMqKFtcZFx3XC1fXSspXHMrKC4qKSQvLAogICAgICBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQID0gLygoW1xkXHdcLV9dKykoPzpcOihbXjtdKykpPzs/KS8sCiAgICAgIE1VTFRJX1JPT1RfVEVNUExBVEVfRVJST1IgPSAnVGVtcGxhdGUgbXVzdCBoYXZlIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gd2FzOiAnOwoKCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUKICAgKiBAbWV0aG9kT2YgbmcuJGNvbXBpbGVQcm92aWRlcgogICAqIEBmdW5jdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmVnaXN0ZXIgYSBuZXcgZGlyZWN0aXZlcyB3aXRoIHRoZSBjb21waWxlci4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBpbiBjYW1lbC1jYXNlLiAoaWUgPGNvZGU+bmdCaW5kPC9jb2RlPiB3aGljaCB3aWxsIG1hdGNoIGFzCiAgICogICAgICAgICAgICAgICAgPGNvZGU+bmctYmluZDwvY29kZT4pLgogICAqIEBwYXJhbSB7ZnVuY3Rpb259IGRpcmVjdGl2ZUZhY3RvcnkgQW4gaW5qZWN0YWJsZSBkaXJlY3RpdmUgZmFjdHJveSBmdW5jdGlvbi4gU2VlIHtAbGluayBndWlkZS9kaXJlY3RpdmV9IGZvciBtb3JlCiAgICogICAgICAgICAgICAgICAgaW5mby4KICAgKiBAcmV0dXJucyB7bmcuJGNvbXBpbGVQcm92aWRlcn0gU2VsZiBmb3IgY2hhaW5pbmcuCiAgICovCiAgIHRoaXMuZGlyZWN0aXZlID0gZnVuY3Rpb24gcmVnaXN0ZXJEaXJlY3RpdmUobmFtZSwgZGlyZWN0aXZlRmFjdG9yeSkgewogICAgaWYgKGlzU3RyaW5nKG5hbWUpKSB7CiAgICAgIGFzc2VydEFyZyhkaXJlY3RpdmVGYWN0b3J5LCAnZGlyZWN0aXZlJyk7CiAgICAgIGlmICghaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0gPSBbXTsKICAgICAgICAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBTdWZmaXgsIFsnJGluamVjdG9yJywgJyRleGNlcHRpb25IYW5kbGVyJywKICAgICAgICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHsKICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZXMgPSBbXTsKICAgICAgICAgICAgZm9yRWFjaChoYXNEaXJlY3RpdmVzW25hbWVdLCBmdW5jdGlvbihkaXJlY3RpdmVGYWN0b3J5KSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBkaXJlY3RpdmUgPSAkaW5qZWN0b3IuaW52b2tlKGRpcmVjdGl2ZUZhY3RvcnkpOwogICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmUgPSB7IGNvbXBpbGU6IHZhbHVlRm4oZGlyZWN0aXZlKSB9OwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZGlyZWN0aXZlLmNvbXBpbGUgJiYgZGlyZWN0aXZlLmxpbmspIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLmNvbXBpbGUgPSB2YWx1ZUZuKGRpcmVjdGl2ZS5saW5rKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5wcmlvcml0eSA9IGRpcmVjdGl2ZS5wcmlvcml0eSB8fCAwOwogICAgICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUgPSBkaXJlY3RpdmUubmFtZSB8fCBuYW1lOwogICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZSB8fCAoZGlyZWN0aXZlLmNvbnRyb2xsZXIgJiYgZGlyZWN0aXZlLm5hbWUpOwogICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZGlyZWN0aXZlLnJlc3RyaWN0IHx8ICdBJzsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBkaXJlY3RpdmVzOwogICAgICAgICAgfV0pOwogICAgICB9CiAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0ucHVzaChkaXJlY3RpdmVGYWN0b3J5KTsKICAgIH0gZWxzZSB7CiAgICAgIGZvckVhY2gobmFtZSwgcmV2ZXJzZVBhcmFtcyhyZWdpc3RlckRpcmVjdGl2ZSkpOwogICAgfQogICAgcmV0dXJuIHRoaXM7CiAgfTsKCgogIHRoaXMuJGdldCA9IFsKICAgICAgICAgICAgJyRpbmplY3RvcicsICckaW50ZXJwb2xhdGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJHBhcnNlJywKICAgICAgICAgICAgJyRjb250cm9sbGVyJywgJyRyb290U2NvcGUnLAogICAgZnVuY3Rpb24oJGluamVjdG9yLCAgICRpbnRlcnBvbGF0ZSwgICAkZXhjZXB0aW9uSGFuZGxlciwgICAkaHR0cCwgICAkdGVtcGxhdGVDYWNoZSwgICAkcGFyc2UsCiAgICAgICAgICAgICAkY29udHJvbGxlciwgICAkcm9vdFNjb3BlKSB7CgogICAgdmFyIEF0dHJpYnV0ZXMgPSBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICAgIHRoaXMuJCRlbGVtZW50ID0gZWxlbWVudDsKICAgICAgdGhpcy4kYXR0ciA9IGF0dHIgfHwge307CiAgICB9OwoKICAgIEF0dHJpYnV0ZXMucHJvdG90eXBlID0gewogICAgICAkbm9ybWFsaXplOiBkaXJlY3RpdmVOb3JtYWxpemUsCgoKICAgICAgLyoqCiAgICAgICAqIFNldCBhIG5vcm1hbGl6ZWQgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGluIGEgd2F5IHN1Y2ggdGhhdCBhbGwgZGlyZWN0aXZlcwogICAgICAgKiBjYW4gc2hhcmUgdGhlIGF0dHJpYnV0ZS4gVGhpcyBmdW5jdGlvbiBwcm9wZXJseSBoYW5kbGVzIGJvb2xlYW4gYXR0cmlidXRlcy4KICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKQogICAgICAgKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LiBJZiBgbnVsbGAgYXR0cmlidXRlIHdpbGwgYmUgZGVsZXRlZC4KICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gd3JpdGVBdHRyIElmIGZhbHNlLCBkb2VzIG5vdCB3cml0ZSB0aGUgdmFsdWUgdG8gRE9NIGVsZW1lbnQgYXR0cmlidXRlLgogICAgICAgKiAgICAgRGVmYXVsdHMgdG8gdHJ1ZS4KICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBhdHRyTmFtZSBPcHRpb25hbCBub25lIG5vcm1hbGl6ZWQgbmFtZS4gRGVmYXVsdHMgdG8ga2V5LgogICAgICAgKi8KICAgICAgJHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSwgd3JpdGVBdHRyLCBhdHRyTmFtZSkgewogICAgICAgIHZhciBib29sZWFuS2V5ID0gZ2V0Qm9vbGVhbkF0dHJOYW1lKHRoaXMuJCRlbGVtZW50WzBdLCBrZXkpLAogICAgICAgICAgICAkJG9ic2VydmVycyA9IHRoaXMuJCRvYnNlcnZlcnM7CgogICAgICAgIGlmIChib29sZWFuS2V5KSB7CiAgICAgICAgICB0aGlzLiQkZWxlbWVudC5wcm9wKGtleSwgdmFsdWUpOwogICAgICAgICAgYXR0ck5hbWUgPSBib29sZWFuS2V5OwogICAgICAgIH0KCiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7CgogICAgICAgIC8vIHRyYW5zbGF0ZSBub3JtYWxpemVkIGtleSB0byBhY3R1YWwga2V5CiAgICAgICAgaWYgKGF0dHJOYW1lKSB7CiAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYXR0ck5hbWUgPSB0aGlzLiRhdHRyW2tleV07CiAgICAgICAgICBpZiAoIWF0dHJOYW1lKSB7CiAgICAgICAgICAgIHRoaXMuJGF0dHJba2V5XSA9IGF0dHJOYW1lID0gc25ha2VfY2FzZShrZXksICctJyk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAod3JpdGVBdHRyICE9PSBmYWxzZSkgewogICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdGhpcy4kJGVsZW1lbnQucmVtb3ZlQXR0cihhdHRyTmFtZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5hdHRyKGF0dHJOYW1lLCB2YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBmaXJlIG9ic2VydmVycwogICAgICAgICQkb2JzZXJ2ZXJzICYmIGZvckVhY2goJCRvYnNlcnZlcnNba2V5XSwgZnVuY3Rpb24oZm4pIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZuKHZhbHVlKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0sCgoKICAgICAgLyoqCiAgICAgICAqIE9ic2VydmUgYW4gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZS4KICAgICAgICogVGhlIG9ic2VydmVyIHdpbGwgbmV2ZXIgYmUgY2FsbGVkLCBpZiBnaXZlbiBhdHRyaWJ1dGUgaXMgbm90IGludGVycG9sYXRlZC4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKSAuCiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKil9IGZuIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBjaGFuZ2VzLgogICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKil9IHRoZSBgZm5gIEZ1bmN0aW9uIHBhc3NlZCBpbi4KICAgICAgICovCiAgICAgICRvYnNlcnZlOiBmdW5jdGlvbihrZXksIGZuKSB7CiAgICAgICAgdmFyIGF0dHJzID0gdGhpcywKICAgICAgICAgICAgJCRvYnNlcnZlcnMgPSAoYXR0cnMuJCRvYnNlcnZlcnMgfHwgKGF0dHJzLiQkb2JzZXJ2ZXJzID0ge30pKSwKICAgICAgICAgICAgbGlzdGVuZXJzID0gKCQkb2JzZXJ2ZXJzW2tleV0gfHwgKCQkb2JzZXJ2ZXJzW2tleV0gPSBbXSkpOwoKICAgICAgICBsaXN0ZW5lcnMucHVzaChmbik7CiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCFsaXN0ZW5lcnMuJCRpbnRlcikgewogICAgICAgICAgICAvLyBubyBvbmUgcmVnaXN0ZXJlZCBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiwgc28gbGV0cyBjYWxsIGl0IG1hbnVhbGx5CiAgICAgICAgICAgIGZuKGF0dHJzW2tleV0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBmbjsKICAgICAgfQogICAgfTsKCiAgICB2YXIgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSwKICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksCiAgICAgICAgZGVub3JtYWxpemVUZW1wbGF0ZSA9IChzdGFydFN5bWJvbCA9PSAne3snIHx8IGVuZFN5bWJvbCAgPT0gJ319JykKICAgICAgICAgICAgPyBpZGVudGl0eQogICAgICAgICAgICA6IGZ1bmN0aW9uIGRlbm9ybWFsaXplVGVtcGxhdGUodGVtcGxhdGUpIHsKICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvXHtcey9nLCBzdGFydFN5bWJvbCkucmVwbGFjZSgvfX0vZywgZW5kU3ltYm9sKTsKICAgICAgICAgICAgfTsKCgogICAgcmV0dXJuIGNvbXBpbGU7CgogICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKICAgIGZ1bmN0aW9uIGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSkgewogICAgICBpZiAoISgkY29tcGlsZU5vZGVzIGluc3RhbmNlb2YganFMaXRlKSkgewogICAgICAgIC8vIGpxdWVyeSBhbHdheXMgcmV3cmFwcywgd2hlcmUgYXMgd2UgbmVlZCB0byBwcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgc2VsZWN0b3Igc28gdGhhdCB3ZSBjYW4gbW9kaWZ5IGl0LgogICAgICAgICRjb21waWxlTm9kZXMgPSBqcUxpdGUoJGNvbXBpbGVOb2Rlcyk7CiAgICAgIH0KICAgICAgLy8gV2UgY2FuIG5vdCBjb21waWxlIHRvcCBsZXZlbCB0ZXh0IGVsZW1lbnRzIHNpbmNlIHRleHQgbm9kZXMgY2FuIGJlIG1lcmdlZCBhbmQgd2Ugd2lsbAogICAgICAvLyBub3QgYmUgYWJsZSB0byBhdHRhY2ggc2NvcGUgZGF0YSB0byB0aGVtLCBzbyB3ZSB3aWxsIHdyYXAgdGhlbSBpbiA8c3Bhbj4KICAgICAgZm9yRWFjaCgkY29tcGlsZU5vZGVzLCBmdW5jdGlvbihub2RlLCBpbmRleCl7CiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyAvKiB0ZXh0IG5vZGUgKi8pIHsKICAgICAgICAgICRjb21waWxlTm9kZXNbaW5kZXhdID0ganFMaXRlKG5vZGUpLndyYXAoJzxzcGFuPjwvc3Bhbj4nKS5wYXJlbnQoKVswXTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICB2YXIgY29tcG9zaXRlTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgJGNvbXBpbGVOb2RlcywgbWF4UHJpb3JpdHkpOwogICAgICByZXR1cm4gZnVuY3Rpb24gcHVibGljTGlua0ZuKHNjb3BlLCBjbG9uZUNvbm5lY3RGbil7CiAgICAgICAgYXNzZXJ0QXJnKHNjb3BlLCAnc2NvcGUnKTsKICAgICAgICAvLyBpbXBvcnRhbnQhITogd2UgbXVzdCBjYWxsIG91ciBqcUxpdGUuY2xvbmUoKSBzaW5jZSB0aGUgalF1ZXJ5IG9uZSBpcyB0cnlpbmcgdG8gYmUgc21hcnQKICAgICAgICAvLyBhbmQgc29tZXRpbWVzIGNoYW5nZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgRE9NLgogICAgICAgIHZhciAkbGlua05vZGUgPSBjbG9uZUNvbm5lY3RGbgogICAgICAgICAgPyBKUUxpdGVQcm90b3R5cGUuY2xvbmUuY2FsbCgkY29tcGlsZU5vZGVzKSAvLyBJTVBPUlRBTlQhISEKICAgICAgICAgIDogJGNvbXBpbGVOb2RlczsKICAgICAgICAkbGlua05vZGUuZGF0YSgnJHNjb3BlJywgc2NvcGUpOwogICAgICAgIHNhZmVBZGRDbGFzcygkbGlua05vZGUsICduZy1zY29wZScpOwogICAgICAgIGlmIChjbG9uZUNvbm5lY3RGbikgY2xvbmVDb25uZWN0Rm4oJGxpbmtOb2RlLCBzY29wZSk7CiAgICAgICAgaWYgKGNvbXBvc2l0ZUxpbmtGbikgY29tcG9zaXRlTGlua0ZuKHNjb3BlLCAkbGlua05vZGUsICRsaW5rTm9kZSk7CiAgICAgICAgcmV0dXJuICRsaW5rTm9kZTsKICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiB3cm9uZ01vZGUobG9jYWxOYW1lLCBtb2RlKSB7CiAgICAgIHRocm93IEVycm9yKCJVbnN1cHBvcnRlZCAnIiArIG1vZGUgKyAiJyBmb3IgJyIgKyBsb2NhbE5hbWUgKyAiJy4iKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsIGNsYXNzTmFtZSkgewogICAgICB0cnkgewogICAgICAgICRlbGVtZW50LmFkZENsYXNzKGNsYXNzTmFtZSk7CiAgICAgIH0gY2F0Y2goZSkgewogICAgICAgIC8vIGlnbm9yZSwgc2luY2UgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgdHJ5aW5nIHRvIHNldCBjbGFzcyBvbgogICAgICAgIC8vIFNWRyBlbGVtZW50LCB3aGVyZSBjbGFzcyBuYW1lIGlzIHJlYWQtb25seS4KICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogQ29tcGlsZSBmdW5jdGlvbiBtYXRjaGVzIGVhY2ggbm9kZSBpbiBub2RlTGlzdCBhZ2FpbnN0IHRoZSBkaXJlY3RpdmVzLiBPbmNlIGFsbCBkaXJlY3RpdmVzCiAgICAgKiBmb3IgYSBwYXJ0aWN1bGFyIG5vZGUgYXJlIGNvbGxlY3RlZCB0aGVpciBjb21waWxlIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQuIFRoZSBjb21waWxlCiAgICAgKiBmdW5jdGlvbnMgcmV0dXJuIHZhbHVlcyAtIHRoZSBsaW5raW5nIGZ1bmN0aW9ucyAtIGFyZSBjb21iaW5lZCBpbnRvIGEgY29tcG9zaXRlIGxpbmtpbmcKICAgICAqIGZ1bmN0aW9uLCB3aGljaCBpcyB0aGUgYSBsaW5raW5nIGZ1bmN0aW9uIGZvciB0aGUgbm9kZS4KICAgICAqCiAgICAgKiBAcGFyYW0ge05vZGVMaXN0fSBub2RlTGlzdCBhbiBhcnJheSBvZiBub2RlcyB0byBjb21waWxlCiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGVbLCBjbG9uZUF0dGFjaEZuXX0gdHJhbnNjbHVkZUZuIEEgbGlua2luZyBmdW5jdGlvbiwgd2hlcmUgdGhlCiAgICAgKiAgICAgICAgc2NvcGUgYXJndW1lbnQgaXMgYXV0by1nZW5lcmF0ZWQgdG8gdGhlIG5ldyBjaGlsZCBvZiB0aGUgdHJhbnNjbHVkZWQgcGFyZW50IHNjb3BlLgogICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gJHJvb3RFbGVtZW50IElmIHRoZSBub2RlTGlzdCBpcyB0aGUgcm9vdCBvZiB0aGUgY29tcGlsYXRpb24gdHJlZSB0aGVuIHRoZQogICAgICogICAgICAgIHJvb3RFbGVtZW50IG11c3QgYmUgc2V0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBvZiB0aGUgY29tcGlsZSByb290LiBUaGlzIGlzCiAgICAgKiAgICAgICAgbmVlZGVkIHNvIHRoYXQgdGhlIGpxTGl0ZSBjb2xsZWN0aW9uIGl0ZW1zIGNhbiBiZSByZXBsYWNlZCB3aXRoIHdpZGdldHMuCiAgICAgKiBAcGFyYW0ge251bWJlcj19IG1heCBkaXJlY3RpdmUgcHJpb3JpdHkKICAgICAqIEByZXR1cm5zIHs/ZnVuY3Rpb259IEEgY29tcG9zaXRlIGxpbmtpbmcgZnVuY3Rpb24gb2YgYWxsIG9mIHRoZSBtYXRjaGVkIGRpcmVjdGl2ZXMgb3IgbnVsbC4KICAgICAqLwogICAgZnVuY3Rpb24gY29tcGlsZU5vZGVzKG5vZGVMaXN0LCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCwgbWF4UHJpb3JpdHkpIHsKICAgICB2YXIgbGlua0ZucyA9IFtdLAogICAgICAgICBub2RlTGlua0ZuLCBjaGlsZExpbmtGbiwgZGlyZWN0aXZlcywgYXR0cnMsIGxpbmtGbkZvdW5kOwoKICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgIGF0dHJzID0gbmV3IEF0dHJpYnV0ZXMoKTsKCiAgICAgICAvLyB3ZSBtdXN0IGFsd2F5cyByZWZlciB0byBub2RlTGlzdFtpXSBzaW5jZSB0aGUgbm9kZXMgY2FuIGJlIHJlcGxhY2VkIHVuZGVybmVhdGggdXMuCiAgICAgICBkaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMobm9kZUxpc3RbaV0sIFtdLCBhdHRycywgbWF4UHJpb3JpdHkpOwoKICAgICAgIG5vZGVMaW5rRm4gPSAoZGlyZWN0aXZlcy5sZW5ndGgpCiAgICAgICAgICAgPyBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgbm9kZUxpc3RbaV0sIGF0dHJzLCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCkKICAgICAgICAgICA6IG51bGw7CgogICAgICAgY2hpbGRMaW5rRm4gPSAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnRlcm1pbmFsIHx8ICFub2RlTGlzdFtpXS5jaGlsZE5vZGVzLmxlbmd0aCkKICAgICAgICAgICA/IG51bGwKICAgICAgICAgICA6IGNvbXBpbGVOb2Rlcyhub2RlTGlzdFtpXS5jaGlsZE5vZGVzLAogICAgICAgICAgICAgICAgbm9kZUxpbmtGbiA/IG5vZGVMaW5rRm4udHJhbnNjbHVkZSA6IHRyYW5zY2x1ZGVGbik7CgogICAgICAgbGlua0Zucy5wdXNoKG5vZGVMaW5rRm4pOwogICAgICAgbGlua0Zucy5wdXNoKGNoaWxkTGlua0ZuKTsKICAgICAgIGxpbmtGbkZvdW5kID0gKGxpbmtGbkZvdW5kIHx8IG5vZGVMaW5rRm4gfHwgY2hpbGRMaW5rRm4pOwogICAgIH0KCiAgICAgLy8gcmV0dXJuIGEgbGlua2luZyBmdW5jdGlvbiBpZiB3ZSBoYXZlIGZvdW5kIGFueXRoaW5nLCBudWxsIG90aGVyd2lzZQogICAgIHJldHVybiBsaW5rRm5Gb3VuZCA/IGNvbXBvc2l0ZUxpbmtGbiA6IG51bGw7CgogICAgIGZ1bmN0aW9uIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgbm9kZUxpc3QsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHsKICAgICAgIHZhciBub2RlTGlua0ZuLCBjaGlsZExpbmtGbiwgbm9kZSwgY2hpbGRTY29wZSwgY2hpbGRUcmFuc2NsdWRlRm47CgogICAgICAgZm9yKHZhciBpID0gMCwgbiA9IDAsIGlpID0gbGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgbisrKSB7CiAgICAgICAgIG5vZGUgPSBub2RlTGlzdFtuXTsKICAgICAgICAgbm9kZUxpbmtGbiA9IGxpbmtGbnNbaSsrXTsKICAgICAgICAgY2hpbGRMaW5rRm4gPSBsaW5rRm5zW2krK107CgogICAgICAgICBpZiAobm9kZUxpbmtGbikgewogICAgICAgICAgIGlmIChub2RlTGlua0ZuLnNjb3BlKSB7CiAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGUuJG5ldyhpc09iamVjdChub2RlTGlua0ZuLnNjb3BlKSk7CiAgICAgICAgICAgICBqcUxpdGUobm9kZSkuZGF0YSgnJHNjb3BlJywgY2hpbGRTY29wZSk7CiAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZTsKICAgICAgICAgICB9CiAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBub2RlTGlua0ZuLnRyYW5zY2x1ZGU7CiAgICAgICAgICAgaWYgKGNoaWxkVHJhbnNjbHVkZUZuIHx8ICghYm91bmRUcmFuc2NsdWRlRm4gJiYgdHJhbnNjbHVkZUZuKSkgewogICAgICAgICAgICAgbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgY2hpbGRTY29wZSwgbm9kZSwgJHJvb3RFbGVtZW50LAogICAgICAgICAgICAgICAgIChmdW5jdGlvbih0cmFuc2NsdWRlRm4pIHsKICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjbG9uZUZuKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2NsdWRlU2NvcGUgPSBzY29wZS4kbmV3KCk7CgogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVTY29wZSwgY2xvbmVGbikuCiAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kKCckZGVzdHJveScsIGJpbmQodHJhbnNjbHVkZVNjb3BlLCB0cmFuc2NsdWRlU2NvcGUuJGRlc3Ryb3kpKTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICB9KShjaGlsZFRyYW5zY2x1ZGVGbiB8fCB0cmFuc2NsdWRlRm4pCiAgICAgICAgICAgICApOwogICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBjaGlsZFNjb3BlLCBub2RlLCB1bmRlZmluZWQsIGJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICAgICB9CiAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRMaW5rRm4pIHsKICAgICAgICAgICBjaGlsZExpbmtGbihzY29wZSwgbm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIGJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICAgfQogICAgICAgfQogICAgIH0KICAgfQoKCiAgICAvKioKICAgICAqIExvb2tzIGZvciBkaXJlY3RpdmVzIG9uIHRoZSBnaXZlbiBub2RlIGFuZCBhZGRzIHRoZW0gdG8gdGhlIGRpcmVjdGl2ZSBjb2xsZWN0aW9uIHdoaWNoIGlzCiAgICAgKiBzb3J0ZWQuCiAgICAgKgogICAgICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guCiAgICAgKiBAcGFyYW0gZGlyZWN0aXZlcyBBbiBhcnJheSB0byB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYWRkZWQgdG8uIFRoaXMgYXJyYXkgaXMgc29ydGVkIGJlZm9yZQogICAgICogICAgICAgIHRoZSBmdW5jdGlvbiByZXR1cm5zLgogICAgICogQHBhcmFtIGF0dHJzIFRoZSBzaGFyZWQgYXR0cnMgb2JqZWN0IHdoaWNoIGlzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIG5vcm1hbGl6ZWQgYXR0cmlidXRlcy4KICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS4KICAgICAqLwogICAgZnVuY3Rpb24gY29sbGVjdERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5KSB7CiAgICAgIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGUsCiAgICAgICAgICBhdHRyc01hcCA9IGF0dHJzLiRhdHRyLAogICAgICAgICAgbWF0Y2gsCiAgICAgICAgICBjbGFzc05hbWU7CgogICAgICBzd2l0Y2gobm9kZVR5cGUpIHsKICAgICAgICBjYXNlIDE6IC8qIEVsZW1lbnQgKi8KICAgICAgICAgIC8vIHVzZSB0aGUgbm9kZSBuYW1lOiA8ZGlyZWN0aXZlPgogICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsCiAgICAgICAgICAgICAgZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lXyhub2RlKS50b0xvd2VyQ2FzZSgpKSwgJ0UnLCBtYXhQcmlvcml0eSk7CgogICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBhdHRyaWJ1dGVzCiAgICAgICAgICBmb3IgKHZhciBhdHRyLCBuYW1lLCBuTmFtZSwgdmFsdWUsIG5BdHRycyA9IG5vZGUuYXR0cmlidXRlcywKICAgICAgICAgICAgICAgICAgIGogPSAwLCBqaiA9IG5BdHRycyAmJiBuQXR0cnMubGVuZ3RoOyBqIDwgamo7IGorKykgewogICAgICAgICAgICBhdHRyID0gbkF0dHJzW2pdOwogICAgICAgICAgICBpZiAoYXR0ci5zcGVjaWZpZWQpIHsKICAgICAgICAgICAgICBuYW1lID0gYXR0ci5uYW1lOwogICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUudG9Mb3dlckNhc2UoKSk7CiAgICAgICAgICAgICAgYXR0cnNNYXBbbk5hbWVdID0gbmFtZTsKICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB2YWx1ZSA9IHRyaW0oKG1zaWUgJiYgbmFtZSA9PSAnaHJlZicpCiAgICAgICAgICAgICAgICA/IGRlY29kZVVSSUNvbXBvbmVudChub2RlLmdldEF0dHJpYnV0ZShuYW1lLCAyKSkKICAgICAgICAgICAgICAgIDogYXR0ci52YWx1ZSk7CiAgICAgICAgICAgICAgaWYgKGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBuTmFtZSkpIHsKICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRydWU7IC8vIHByZXNlbmNlIG1lYW5zIHRydWUKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuTmFtZSk7CiAgICAgICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQScsIG1heFByaW9yaXR5KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIHVzZSBjbGFzcyBhcyBkaXJlY3RpdmUKICAgICAgICAgIGNsYXNzTmFtZSA9IG5vZGUuY2xhc3NOYW1lOwogICAgICAgICAgaWYgKGlzU3RyaW5nKGNsYXNzTmFtZSkgJiYgY2xhc3NOYW1lICE9PSAnJykgewogICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMoY2xhc3NOYW1lKSkgewogICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzJdKTsKICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQycsIG1heFByaW9yaXR5KSkgewogICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFszXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zdWJzdHIobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDM6IC8qIFRleHQgTm9kZSAqLwogICAgICAgICAgYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5vZGUubm9kZVZhbHVlKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgODogLyogQ29tbWVudCAqLwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgbWF0Y2ggPSBDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAuZXhlYyhub2RlLm5vZGVWYWx1ZSk7CiAgICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzFdKTsKICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnTScsIG1heFByaW9yaXR5KSkgewogICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFsyXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIC8vIHR1cm5zIG91dCB0aGF0IHVuZGVyIHNvbWUgY2lyY3Vtc3RhbmNlcyBJRTkgdGhyb3dzIGVycm9ycyB3aGVuIG9uZSBhdHRlbXB0cyB0byByZWFkIGNvbW1lbnQncyBub2RlIHZhbHVlLgogICAgICAgICAgICAvLyBKdXN0IGlnbm9yZSBpdCBhbmQgY29udGludWUuIChDYW4ndCBzZWVtIHRvIHJlcHJvZHVjZSBpbiB0ZXN0IGNhc2UuKQogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGRpcmVjdGl2ZXMuc29ydChieVByaW9yaXR5KTsKICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7CiAgICB9CgoKICAgIC8qKgogICAgICogT25jZSB0aGUgZGlyZWN0aXZlcyBoYXZlIGJlZW4gY29sbGVjdGVkIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGlzIGV4ZWN1dGVkLiBUaGlzIG1ldGhvZAogICAgICogaXMgcmVzcG9uc2libGUgZm9yIGlubGluaW5nIGRpcmVjdGl2ZSB0ZW1wbGF0ZXMgYXMgd2VsbCBhcyB0ZXJtaW5hdGluZyB0aGUgYXBwbGljYXRpb24KICAgICAqIG9mIHRoZSBkaXJlY3RpdmVzIGlmIHRoZSB0ZXJtaW5hbCBkaXJlY3RpdmUgaGFzIGJlZW4gcmVhY2hlZC4uCiAgICAgKgogICAgICogQHBhcmFtIHtBcnJheX0gZGlyZWN0aXZlcyBBcnJheSBvZiBjb2xsZWN0ZWQgZGlyZWN0aXZlcyB0byBleGVjdXRlIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb24uCiAgICAgKiAgICAgICAgdGhpcyBuZWVkcyB0byBiZSBwcmUtc29ydGVkIGJ5IHByaW9yaXR5IG9yZGVyLgogICAgICogQHBhcmFtIHtOb2RlfSBjb21waWxlTm9kZSBUaGUgcmF3IERPTSBub2RlIHRvIGFwcGx5IHRoZSBjb21waWxlIGZ1bmN0aW9ucyB0bwogICAgICogQHBhcmFtIHtPYmplY3R9IHRlbXBsYXRlQXR0cnMgVGhlIHNoYXJlZCBhdHRyaWJ1dGUgZnVuY3Rpb24KICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZVssIGNsb25lQXR0YWNoRm5dfSB0cmFuc2NsdWRlRm4gQSBsaW5raW5nIGZ1bmN0aW9uLCB3aGVyZSB0aGUKICAgICAqICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3IGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuCiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9ICRyb290RWxlbWVudCBJZiB3ZSBhcmUgd29ya2luZyBvbiB0aGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlIHRoZW4gdGhpcwogICAgICogICAgICAgIGFyZ3VtZW50IGhhcyB0aGUgcm9vdCBqcUxpdGUgYXJyYXkgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSB3aWRnZXRzIG9uIGl0LgogICAgICogQHJldHVybnMgbGlua0ZuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQpIHsKICAgICAgdmFyIHRlcm1pbmFsUHJpb3JpdHkgPSAtTnVtYmVyLk1BWF9WQUxVRSwKICAgICAgICAgIHByZUxpbmtGbnMgPSBbXSwKICAgICAgICAgIHBvc3RMaW5rRm5zID0gW10sCiAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZSA9IG51bGwsCiAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBudWxsLAogICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBudWxsLAogICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPSBqcUxpdGUoY29tcGlsZU5vZGUpLAogICAgICAgICAgZGlyZWN0aXZlLAogICAgICAgICAgZGlyZWN0aXZlTmFtZSwKICAgICAgICAgICR0ZW1wbGF0ZSwKICAgICAgICAgIHRyYW5zY2x1ZGVEaXJlY3RpdmUsCiAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGVGbiwKICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzLAogICAgICAgICAgbGlua0ZuLAogICAgICAgICAgZGlyZWN0aXZlVmFsdWU7CgogICAgICAvLyBleGVjdXRlcyBhbGwgZGlyZWN0aXZlcyBvbiB0aGUgY3VycmVudCBlbGVtZW50CiAgICAgIGZvcih2YXIgaSA9IDAsIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTsKICAgICAgICAkdGVtcGxhdGUgPSB1bmRlZmluZWQ7CgogICAgICAgIGlmICh0ZXJtaW5hbFByaW9yaXR5ID4gZGlyZWN0aXZlLnByaW9yaXR5KSB7CiAgICAgICAgICBicmVhazsgLy8gcHJldmVudCBmdXJ0aGVyIHByb2Nlc3Npbmcgb2YgZGlyZWN0aXZlcwogICAgICAgIH0KCiAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLnNjb3BlKSB7CiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnaXNvbGF0ZWQgc2NvcGUnLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTsKICAgICAgICAgIGlmIChpc09iamVjdChkaXJlY3RpdmVWYWx1ZSkpIHsKICAgICAgICAgICAgc2FmZUFkZENsYXNzKCRjb21waWxlTm9kZSwgJ25nLWlzb2xhdGUtc2NvcGUnKTsKICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwogICAgICAgICAgfQogICAgICAgICAgc2FmZUFkZENsYXNzKCRjb21waWxlTm9kZSwgJ25nLXNjb3BlJyk7CiAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZSA9IG5ld1Njb3BlRGlyZWN0aXZlIHx8IGRpcmVjdGl2ZTsKICAgICAgICB9CgogICAgICAgIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZTsKCiAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHsKICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gY29udHJvbGxlckRpcmVjdGl2ZXMgfHwge307CiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgiJyIgKyBkaXJlY3RpdmVOYW1lICsgIicgY29udHJvbGxlciIsCiAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0sIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTsKICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gZGlyZWN0aXZlOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLnRyYW5zY2x1ZGUpIHsKICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0cmFuc2NsdXNpb24nLCB0cmFuc2NsdWRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7CiAgICAgICAgICB0cmFuc2NsdWRlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwogICAgICAgICAgdGVybWluYWxQcmlvcml0eSA9IGRpcmVjdGl2ZS5wcmlvcml0eTsKICAgICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9PSAnZWxlbWVudCcpIHsKICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKGNvbXBpbGVOb2RlKTsKICAgICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPQogICAgICAgICAgICAgICAganFMaXRlKCc8IS0tICcgKyBkaXJlY3RpdmVOYW1lICsgJzogJyArIHRlbXBsYXRlQXR0cnNbZGlyZWN0aXZlTmFtZV0gICsgJyAtLT4nKTsKICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkY29tcGlsZU5vZGVbMF07CiAgICAgICAgICAgIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwganFMaXRlKCR0ZW1wbGF0ZVswXSksIGNvbXBpbGVOb2RlKTsKICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB0ZXJtaW5hbFByaW9yaXR5KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICR0ZW1wbGF0ZSA9IGpxTGl0ZShKUUxpdGVDbG9uZShjb21waWxlTm9kZSkpLmNvbnRlbnRzKCk7CiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKCcnKTsgLy8gY2xlYXIgY29udGVudHMKICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgoZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUudGVtcGxhdGUpKSB7CiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpOwogICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7CiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRlbm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlVmFsdWUpOwoKICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkgewogICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoJzxkaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaW0oZGlyZWN0aXZlVmFsdWUpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nKS5jb250ZW50cygpOwogICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTsKCiAgICAgICAgICAgIGlmICgkdGVtcGxhdGUubGVuZ3RoICE9IDEgfHwgY29tcGlsZU5vZGUubm9kZVR5cGUgIT09IDEpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTVVMVElfUk9PVF9URU1QTEFURV9FUlJPUiArIGRpcmVjdGl2ZVZhbHVlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTsKCiAgICAgICAgICAgIHZhciBuZXdUZW1wbGF0ZUF0dHJzID0geyRhdHRyOiB7fX07CgogICAgICAgICAgICAvLyBjb21iaW5lIGRpcmVjdGl2ZXMgZnJvbSB0aGUgb3JpZ2luYWwgbm9kZSBhbmQgZnJvbSB0aGUgdGVtcGxhdGU6CiAgICAgICAgICAgIC8vIC0gdGFrZSB0aGUgYXJyYXkgb2YgZGlyZWN0aXZlcyBmb3IgdGhpcyBlbGVtZW50CiAgICAgICAgICAgIC8vIC0gc3BsaXQgaXQgaW50byB0d28gcGFydHMsIHRob3NlIHRoYXQgd2VyZSBhbHJlYWR5IGFwcGxpZWQgYW5kIHRob3NlIHRoYXQgd2VyZW4ndAogICAgICAgICAgICAvLyAtIGNvbGxlY3QgZGlyZWN0aXZlcyBmcm9tIHRoZSB0ZW1wbGF0ZSwgYWRkIHRoZW0gdG8gdGhlIHNlY29uZCBncm91cCBhbmQgc29ydCB0aGVtCiAgICAgICAgICAgIC8vIC0gYXBwZW5kIHRoZSBzZWNvbmQgZ3JvdXAgd2l0aCBuZXcgZGlyZWN0aXZlcyB0byB0aGUgZmlyc3QgZ3JvdXAKICAgICAgICAgICAgZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuY29uY2F0KAogICAgICAgICAgICAgICAgY29sbGVjdERpcmVjdGl2ZXMoCiAgICAgICAgICAgICAgICAgICAgY29tcGlsZU5vZGUsCiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlcy5zcGxpY2UoaSArIDEsIGRpcmVjdGl2ZXMubGVuZ3RoIC0gKGkgKyAxKSksCiAgICAgICAgICAgICAgICAgICAgbmV3VGVtcGxhdGVBdHRycwogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApOwogICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0ZW1wbGF0ZUF0dHJzLCBuZXdUZW1wbGF0ZUF0dHJzKTsKCiAgICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChkaXJlY3RpdmVWYWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlVXJsKSB7CiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpOwogICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7CiAgICAgICAgICBub2RlTGlua0ZuID0gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMuc3BsaWNlKGksIGRpcmVjdGl2ZXMubGVuZ3RoIC0gaSksCiAgICAgICAgICAgICAgbm9kZUxpbmtGbiwgJGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCAkcm9vdEVsZW1lbnQsIGRpcmVjdGl2ZS5yZXBsYWNlLAogICAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuKTsKICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7CiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3RpdmUuY29tcGlsZSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgbGlua0ZuID0gZGlyZWN0aXZlLmNvbXBpbGUoJGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCBjaGlsZFRyYW5zY2x1ZGVGbik7CiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpbmtGbikpIHsKICAgICAgICAgICAgICBhZGRMaW5rRm5zKG51bGwsIGxpbmtGbik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlua0ZuKSB7CiAgICAgICAgICAgICAgYWRkTGlua0ZucyhsaW5rRm4ucHJlLCBsaW5rRm4ucG9zdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSwgc3RhcnRpbmdUYWcoJGNvbXBpbGVOb2RlKSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZGlyZWN0aXZlLnRlcm1pbmFsKSB7CiAgICAgICAgICBub2RlTGlua0ZuLnRlcm1pbmFsID0gdHJ1ZTsKICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBNYXRoLm1heCh0ZXJtaW5hbFByaW9yaXR5LCBkaXJlY3RpdmUucHJpb3JpdHkpOwogICAgICAgIH0KCiAgICAgIH0KCiAgICAgIG5vZGVMaW5rRm4uc2NvcGUgPSBuZXdTY29wZURpcmVjdGl2ZSAmJiBuZXdTY29wZURpcmVjdGl2ZS5zY29wZTsKICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlID0gdHJhbnNjbHVkZURpcmVjdGl2ZSAmJiBjaGlsZFRyYW5zY2x1ZGVGbjsKCiAgICAgIC8vIG1pZ2h0IGJlIG5vcm1hbCBvciBkZWxheWVkIG5vZGVMaW5rRm4gZGVwZW5kaW5nIG9uIGlmIHRlbXBsYXRlVXJsIGlzIHByZXNlbnQKICAgICAgcmV0dXJuIG5vZGVMaW5rRm47CgogICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgICAgZnVuY3Rpb24gYWRkTGlua0ZucyhwcmUsIHBvc3QpIHsKICAgICAgICBpZiAocHJlKSB7CiAgICAgICAgICBwcmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlOwogICAgICAgICAgcHJlTGlua0Zucy5wdXNoKHByZSk7CiAgICAgICAgfQogICAgICAgIGlmIChwb3N0KSB7CiAgICAgICAgICBwb3N0LnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZTsKICAgICAgICAgIHBvc3RMaW5rRm5zLnB1c2gocG9zdCk7CiAgICAgICAgfQogICAgICB9CgoKICAgICAgZnVuY3Rpb24gZ2V0Q29udHJvbGxlcnMocmVxdWlyZSwgJGVsZW1lbnQpIHsKICAgICAgICB2YXIgdmFsdWUsIHJldHJpZXZhbE1ldGhvZCA9ICdkYXRhJywgb3B0aW9uYWwgPSBmYWxzZTsKICAgICAgICBpZiAoaXNTdHJpbmcocmVxdWlyZSkpIHsKICAgICAgICAgIHdoaWxlKCh2YWx1ZSA9IHJlcXVpcmUuY2hhckF0KDApKSA9PSAnXicgfHwgdmFsdWUgPT0gJz8nKSB7CiAgICAgICAgICAgIHJlcXVpcmUgPSByZXF1aXJlLnN1YnN0cigxKTsKICAgICAgICAgICAgaWYgKHZhbHVlID09ICdeJykgewogICAgICAgICAgICAgIHJldHJpZXZhbE1ldGhvZCA9ICdpbmhlcml0ZWREYXRhJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBvcHRpb25hbCA9IG9wdGlvbmFsIHx8IHZhbHVlID09ICc/JzsKICAgICAgICAgIH0KICAgICAgICAgIHZhbHVlID0gJGVsZW1lbnRbcmV0cmlldmFsTWV0aG9kXSgnJCcgKyByZXF1aXJlICsgJ0NvbnRyb2xsZXInKTsKICAgICAgICAgIGlmICghdmFsdWUgJiYgIW9wdGlvbmFsKSB7CiAgICAgICAgICAgIHRocm93IEVycm9yKCJObyBjb250cm9sbGVyOiAiICsgcmVxdWlyZSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHJlcXVpcmUpKSB7CiAgICAgICAgICB2YWx1ZSA9IFtdOwogICAgICAgICAgZm9yRWFjaChyZXF1aXJlLCBmdW5jdGlvbihyZXF1aXJlKSB7CiAgICAgICAgICAgIHZhbHVlLnB1c2goZ2V0Q29udHJvbGxlcnMocmVxdWlyZSwgJGVsZW1lbnQpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0KCgogICAgICBmdW5jdGlvbiBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHsKICAgICAgICB2YXIgYXR0cnMsICRlbGVtZW50LCBpLCBpaSwgbGlua0ZuLCBjb250cm9sbGVyOwoKICAgICAgICBpZiAoY29tcGlsZU5vZGUgPT09IGxpbmtOb2RlKSB7CiAgICAgICAgICBhdHRycyA9IHRlbXBsYXRlQXR0cnM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGF0dHJzID0gc2hhbGxvd0NvcHkodGVtcGxhdGVBdHRycywgbmV3IEF0dHJpYnV0ZXMoanFMaXRlKGxpbmtOb2RlKSwgdGVtcGxhdGVBdHRycy4kYXR0cikpOwogICAgICAgIH0KICAgICAgICAkZWxlbWVudCA9IGF0dHJzLiQkZWxlbWVudDsKCiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkgewogICAgICAgICAgdmFyIExPQ0FMX1JFR0VYUCA9IC9eXHMqKFtAPSZdKVxzKihcdyopXHMqJC87CgogICAgICAgICAgdmFyIHBhcmVudFNjb3BlID0gc2NvcGUuJHBhcmVudCB8fCBzY29wZTsKCiAgICAgICAgICBmb3JFYWNoKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5zY29wZSwgZnVuY3Rpb24oZGVmaW5pdG9uLCBzY29wZU5hbWUpIHsKICAgICAgICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdG9uLm1hdGNoKExPQ0FMX1JFR0VYUCkgfHwgW10sCiAgICAgICAgICAgICAgICBhdHRyTmFtZSA9IG1hdGNoWzJdfHwgc2NvcGVOYW1lLAogICAgICAgICAgICAgICAgbW9kZSA9IG1hdGNoWzFdLCAvLyBALCA9LCBvciAmCiAgICAgICAgICAgICAgICBsYXN0VmFsdWUsCiAgICAgICAgICAgICAgICBwYXJlbnRHZXQsIHBhcmVudFNldDsKCiAgICAgICAgICAgIHN3aXRjaCAobW9kZSkgewoKICAgICAgICAgICAgICBjYXNlICdAJzogewogICAgICAgICAgICAgICAgYXR0cnMuJG9ic2VydmUoYXR0ck5hbWUsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgIHNjb3BlW3Njb3BlTmFtZV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgYXR0cnMuJCRvYnNlcnZlcnNbYXR0ck5hbWVdLiQkc2NvcGUgPSBwYXJlbnRTY29wZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAnPSc6IHsKICAgICAgICAgICAgICAgIHBhcmVudEdldCA9ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pOwogICAgICAgICAgICAgICAgcGFyZW50U2V0ID0gcGFyZW50R2V0LmFzc2lnbiB8fCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGNoYW5nZSwgb3Igd2Ugd2lsbCB0aHJvdyB0aGlzIGV4Y2VwdGlvbiBvbiBldmVyeSAkZGlnZXN0CiAgICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHNjb3BlW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQocGFyZW50U2NvcGUpOwogICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihOT05fQVNTSUdOQUJMRV9NT0RFTF9FWFBSRVNTSU9OICsgYXR0cnNbYXR0ck5hbWVdICsKICAgICAgICAgICAgICAgICAgICAgICcgKGRpcmVjdGl2ZTogJyArIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5uYW1lICsgJyknKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBzY29wZVtzY29wZU5hbWVdID0gcGFyZW50R2V0KHBhcmVudFNjb3BlKTsKICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBwYXJlbnRWYWx1ZVdhdGNoKCkgewogICAgICAgICAgICAgICAgICB2YXIgcGFyZW50VmFsdWUgPSBwYXJlbnRHZXQocGFyZW50U2NvcGUpOwoKICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudFZhbHVlICE9PSBzY29wZVtzY29wZU5hbWVdKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIG91dCBvZiBzeW5jIGFuZCBuZWVkIHRvIGNvcHkKICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50VmFsdWUgIT09IGxhc3RWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgLy8gcGFyZW50IGNoYW5nZWQgYW5kIGl0IGhhcyBwcmVjZWRlbmNlCiAgICAgICAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBzY29wZVtzY29wZU5hbWVdID0gcGFyZW50VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgY2FuIGJlIGFzc2lnbmVkIHRoZW4gZG8gc28KICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFNldChwYXJlbnRTY29wZSwgcGFyZW50VmFsdWUgPSBsYXN0VmFsdWUgPSBzY29wZVtzY29wZU5hbWVdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFZhbHVlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgJyYnOiB7CiAgICAgICAgICAgICAgICBwYXJlbnRHZXQgPSAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKTsKICAgICAgICAgICAgICAgIHNjb3BlW3Njb3BlTmFtZV0gPSBmdW5jdGlvbihsb2NhbHMpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEdldChwYXJlbnRTY29wZSwgbG9jYWxzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgZGVmYXVsdDogewogICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uIGZvciBkaXJlY3RpdmUgJyArCiAgICAgICAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLm5hbWUgKyAnOiAnICsgZGVmaW5pdG9uKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKGNvbnRyb2xsZXJEaXJlY3RpdmVzKSB7CiAgICAgICAgICBmb3JFYWNoKGNvbnRyb2xsZXJEaXJlY3RpdmVzLCBmdW5jdGlvbihkaXJlY3RpdmUpIHsKICAgICAgICAgICAgdmFyIGxvY2FscyA9IHsKICAgICAgICAgICAgICAkc2NvcGU6IHNjb3BlLAogICAgICAgICAgICAgICRlbGVtZW50OiAkZWxlbWVudCwKICAgICAgICAgICAgICAkYXR0cnM6IGF0dHJzLAogICAgICAgICAgICAgICR0cmFuc2NsdWRlOiBib3VuZFRyYW5zY2x1ZGVGbgogICAgICAgICAgICB9OwoKICAgICAgICAgICAgY29udHJvbGxlciA9IGRpcmVjdGl2ZS5jb250cm9sbGVyOwogICAgICAgICAgICBpZiAoY29udHJvbGxlciA9PSAnQCcpIHsKICAgICAgICAgICAgICBjb250cm9sbGVyID0gYXR0cnNbZGlyZWN0aXZlLm5hbWVdOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkZWxlbWVudC5kYXRhKAogICAgICAgICAgICAgICAgJyQnICsgZGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsCiAgICAgICAgICAgICAgICAkY29udHJvbGxlcihjb250cm9sbGVyLCBsb2NhbHMpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy8gUFJFTElOS0lORwogICAgICAgIGZvcihpID0gMCwgaWkgPSBwcmVMaW5rRm5zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGxpbmtGbiA9IHByZUxpbmtGbnNbaV07CiAgICAgICAgICAgIGxpbmtGbihzY29wZSwgJGVsZW1lbnQsIGF0dHJzLAogICAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLnJlcXVpcmUsICRlbGVtZW50KSk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBSRUNVUlNJT04KICAgICAgICBjaGlsZExpbmtGbiAmJiBjaGlsZExpbmtGbihzY29wZSwgbGlua05vZGUuY2hpbGROb2RlcywgdW5kZWZpbmVkLCBib3VuZFRyYW5zY2x1ZGVGbik7CgogICAgICAgIC8vIFBPU1RMSU5LSU5HCiAgICAgICAgZm9yKGkgPSAwLCBpaSA9IHBvc3RMaW5rRm5zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGxpbmtGbiA9IHBvc3RMaW5rRm5zW2ldOwogICAgICAgICAgICBsaW5rRm4oc2NvcGUsICRlbGVtZW50LCBhdHRycywKICAgICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCkpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlLCBzdGFydGluZ1RhZygkZWxlbWVudCkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKCiAgICAvKioKICAgICAqIGxvb2tzIHVwIHRoZSBkaXJlY3RpdmUgYW5kIGRlY29yYXRlcyBpdCB3aXRoIGV4Y2VwdGlvbiBoYW5kbGluZyBhbmQgcHJvcGVyIHBhcmFtZXRlcnMuIFdlCiAgICAgKiBjYWxsIHRoaXMgdGhlIGJvdW5kRGlyZWN0aXZlLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLgogICAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIFRoZSBkaXJlY3RpdmUgbXVzdCBiZSBmb3VuZCBpbiBzcGVjaWZpYyBmb3JtYXQuCiAgICAgKiAgIFN0cmluZyBjb250YWluaW5nIGFueSBvZiB0aGVzZXMgY2hhcmFjdGVyczoKICAgICAqCiAgICAgKiAgICogYEVgOiBlbGVtZW50IG5hbWUKICAgICAqICAgKiBgQSc6IGF0dHJpYnV0ZQogICAgICogICAqIGBDYDogY2xhc3MKICAgICAqICAgKiBgTWA6IGNvbW1lbnQKICAgICAqIEByZXR1cm5zIHRydWUgaWYgZGlyZWN0aXZlIHdhcyBhZGRlZC4KICAgICAqLwogICAgZnVuY3Rpb24gYWRkRGlyZWN0aXZlKHREaXJlY3RpdmVzLCBuYW1lLCBsb2NhdGlvbiwgbWF4UHJpb3JpdHkpIHsKICAgICAgdmFyIG1hdGNoID0gZmFsc2U7CiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgZm9yKHZhciBkaXJlY3RpdmUsIGRpcmVjdGl2ZXMgPSAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBTdWZmaXgpLAogICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaTxpaTsgaSsrKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldOwogICAgICAgICAgICBpZiAoIChtYXhQcmlvcml0eSA9PT0gdW5kZWZpbmVkIHx8IG1heFByaW9yaXR5ID4gZGlyZWN0aXZlLnByaW9yaXR5KSAmJgogICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5yZXN0cmljdC5pbmRleE9mKGxvY2F0aW9uKSAhPSAtMSkgewogICAgICAgICAgICAgIHREaXJlY3RpdmVzLnB1c2goZGlyZWN0aXZlKTsKICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2goZSkgeyAkZXhjZXB0aW9uSGFuZGxlcihlKTsgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gbWF0Y2g7CiAgICB9CgoKICAgIC8qKgogICAgICogV2hlbiB0aGUgZWxlbWVudCBpcyByZXBsYWNlZCB3aXRoIEhUTUwgdGVtcGxhdGUgdGhlbiB0aGUgbmV3IGF0dHJpYnV0ZXMKICAgICAqIG9uIHRoZSB0ZW1wbGF0ZSBuZWVkIHRvIGJlIG1lcmdlZCB3aXRoIHRoZSBleGlzdGluZyBhdHRyaWJ1dGVzIGluIHRoZSBET00uCiAgICAgKiBUaGUgZGVzaXJlZCBlZmZlY3QgaXMgdG8gaGF2ZSBib3RoIG9mIHRoZSBhdHRyaWJ1dGVzIHByZXNlbnQuCiAgICAgKgogICAgICogQHBhcmFtIHtvYmplY3R9IGRzdCBkZXN0aW5hdGlvbiBhdHRyaWJ1dGVzIChvcmlnaW5hbCBET00pCiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3JjIHNvdXJjZSBhdHRyaWJ1dGVzIChmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUpCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKGRzdCwgc3JjKSB7CiAgICAgIHZhciBzcmNBdHRyID0gc3JjLiRhdHRyLAogICAgICAgICAgZHN0QXR0ciA9IGRzdC4kYXR0ciwKICAgICAgICAgICRlbGVtZW50ID0gZHN0LiQkZWxlbWVudDsKCiAgICAgIC8vIHJlYXBwbHkgdGhlIG9sZCBhdHRyaWJ1dGVzIHRvIHRoZSBuZXcgZWxlbWVudAogICAgICBmb3JFYWNoKGRzdCwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgIGlmIChrZXkuY2hhckF0KDApICE9ICckJykgewogICAgICAgICAgaWYgKHNyY1trZXldKSB7CiAgICAgICAgICAgIHZhbHVlICs9IChrZXkgPT09ICdzdHlsZScgPyAnOycgOiAnICcpICsgc3JjW2tleV07CiAgICAgICAgICB9CiAgICAgICAgICBkc3QuJHNldChrZXksIHZhbHVlLCB0cnVlLCBzcmNBdHRyW2tleV0pOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICAvLyBjb3B5IHRoZSBuZXcgYXR0cmlidXRlcyBvbiB0aGUgb2xkIGF0dHJzIG9iamVjdAogICAgICBmb3JFYWNoKHNyYywgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgIGlmIChrZXkgPT0gJ2NsYXNzJykgewogICAgICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCB2YWx1ZSk7CiAgICAgICAgICBkc3RbJ2NsYXNzJ10gPSAoZHN0WydjbGFzcyddID8gZHN0WydjbGFzcyddICsgJyAnIDogJycpICsgdmFsdWU7CiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gJ3N0eWxlJykgewogICAgICAgICAgJGVsZW1lbnQuYXR0cignc3R5bGUnLCAkZWxlbWVudC5hdHRyKCdzdHlsZScpICsgJzsnICsgdmFsdWUpOwogICAgICAgIH0gZWxzZSBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcgJiYgIWRzdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICBkc3Rba2V5XSA9IHZhbHVlOwogICAgICAgICAgZHN0QXR0cltrZXldID0gc3JjQXR0cltrZXldOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLCBiZWZvcmVUZW1wbGF0ZU5vZGVMaW5rRm4sICRjb21waWxlTm9kZSwgdEF0dHJzLAogICAgICAgICRyb290RWxlbWVudCwgcmVwbGFjZSwgY2hpbGRUcmFuc2NsdWRlRm4pIHsKICAgICAgdmFyIGxpbmtRdWV1ZSA9IFtdLAogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4sCiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sCiAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdLAogICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlID0gZGlyZWN0aXZlcy5zaGlmdCgpLAogICAgICAgICAgLy8gVGhlIGZhY3QgdGhhdCB3ZSBoYXZlIHRvIGNvcHkgYW5kIHBhdGNoIHRoZSBkaXJlY3RpdmUgc2VlbXMgd3JvbmchCiAgICAgICAgICBkZXJpdmVkU3luY0RpcmVjdGl2ZSA9IGV4dGVuZCh7fSwgb3JpZ0FzeW5jRGlyZWN0aXZlLCB7CiAgICAgICAgICAgIGNvbnRyb2xsZXI6IG51bGwsIHRlbXBsYXRlVXJsOiBudWxsLCB0cmFuc2NsdWRlOiBudWxsLCBzY29wZTogbnVsbAogICAgICAgICAgfSk7CgogICAgICAkY29tcGlsZU5vZGUuaHRtbCgnJyk7CgogICAgICAkaHR0cC5nZXQob3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsLCB7Y2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuCiAgICAgICAgc3VjY2VzcyhmdW5jdGlvbihjb250ZW50KSB7CiAgICAgICAgICB2YXIgY29tcGlsZU5vZGUsIHRlbXBUZW1wbGF0ZUF0dHJzLCAkdGVtcGxhdGU7CgogICAgICAgICAgY29udGVudCA9IGRlbm9ybWFsaXplVGVtcGxhdGUoY29udGVudCk7CgogICAgICAgICAgaWYgKHJlcGxhY2UpIHsKICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKCc8ZGl2PicgKyB0cmltKGNvbnRlbnQpICsgJzwvZGl2PicpLmNvbnRlbnRzKCk7CiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdOwoKICAgICAgICAgICAgaWYgKCR0ZW1wbGF0ZS5sZW5ndGggIT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gMSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihNVUxUSV9ST09UX1RFTVBMQVRFX0VSUk9SICsgY29udGVudCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRlbXBUZW1wbGF0ZUF0dHJzID0geyRhdHRyOiB7fX07CiAgICAgICAgICAgIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7CiAgICAgICAgICAgIGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBkaXJlY3RpdmVzLCB0ZW1wVGVtcGxhdGVBdHRycyk7CiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRBdHRycywgdGVtcFRlbXBsYXRlQXR0cnMpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29tcGlsZU5vZGUgPSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlOwogICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChjb250ZW50KTsKICAgICAgICAgIH0KCiAgICAgICAgICBkaXJlY3RpdmVzLnVuc2hpZnQoZGVyaXZlZFN5bmNEaXJlY3RpdmUpOwogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4gPSBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgJGNvbXBpbGVOb2RlLCB0QXR0cnMsIGNoaWxkVHJhbnNjbHVkZUZuKTsKICAgICAgICAgIGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiA9IGNvbXBpbGVOb2RlcygkY29tcGlsZU5vZGUuY29udGVudHMoKSwgY2hpbGRUcmFuc2NsdWRlRm4pOwoKCiAgICAgICAgICB3aGlsZShsaW5rUXVldWUubGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBjb250cm9sbGVyID0gbGlua1F1ZXVlLnBvcCgpLAogICAgICAgICAgICAgICAgbGlua1Jvb3RFbGVtZW50ID0gbGlua1F1ZXVlLnBvcCgpLAogICAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSA9IGxpbmtRdWV1ZS5wb3AoKSwKICAgICAgICAgICAgICAgIHNjb3BlID0gbGlua1F1ZXVlLnBvcCgpLAogICAgICAgICAgICAgICAgbGlua05vZGUgPSBjb21waWxlTm9kZTsKCiAgICAgICAgICAgIGlmIChiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlICE9PSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlKSB7CiAgICAgICAgICAgICAgLy8gaXQgd2FzIGNsb25lZCB0aGVyZWZvcmUgd2UgaGF2ZSB0byBjbG9uZSBhcyB3ZWxsLgogICAgICAgICAgICAgIGxpbmtOb2RlID0gSlFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpOwogICAgICAgICAgICAgIHJlcGxhY2VXaXRoKGxpbmtSb290RWxlbWVudCwganFMaXRlKGJlZm9yZVRlbXBsYXRlTGlua05vZGUpLCBsaW5rTm9kZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGJlZm9yZVRlbXBsYXRlTm9kZUxpbmtGbihhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sIHNjb3BlLCBsaW5rTm9kZSwgJHJvb3RFbGVtZW50LCBjb250cm9sbGVyKTsKICAgICAgICAgICAgfSwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGNvbnRyb2xsZXIpOwogICAgICAgICAgfQogICAgICAgICAgbGlua1F1ZXVlID0gbnVsbDsKICAgICAgICB9KS4KICAgICAgICBlcnJvcihmdW5jdGlvbihyZXNwb25zZSwgY29kZSwgaGVhZGVycywgY29uZmlnKSB7CiAgICAgICAgICB0aHJvdyBFcnJvcignRmFpbGVkIHRvIGxvYWQgdGVtcGxhdGU6ICcgKyBjb25maWcudXJsKTsKICAgICAgICB9KTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiBkZWxheWVkTm9kZUxpbmtGbihpZ25vcmVDaGlsZExpbmtGbiwgc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBjb250cm9sbGVyKSB7CiAgICAgICAgaWYgKGxpbmtRdWV1ZSkgewogICAgICAgICAgbGlua1F1ZXVlLnB1c2goc2NvcGUpOwogICAgICAgICAgbGlua1F1ZXVlLnB1c2gobm9kZSk7CiAgICAgICAgICBsaW5rUXVldWUucHVzaChyb290RWxlbWVudCk7CiAgICAgICAgICBsaW5rUXVldWUucHVzaChjb250cm9sbGVyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGJlZm9yZVRlbXBsYXRlTm9kZUxpbmtGbihhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgY29udHJvbGxlcik7CiAgICAgICAgICB9LCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGNvbnRyb2xsZXIpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBTb3J0aW5nIGZ1bmN0aW9uIGZvciBib3VuZCBkaXJlY3RpdmVzLgogICAgICovCiAgICBmdW5jdGlvbiBieVByaW9yaXR5KGEsIGIpIHsKICAgICAgcmV0dXJuIGIucHJpb3JpdHkgLSBhLnByaW9yaXR5OwogICAgfQoKCiAgICBmdW5jdGlvbiBhc3NlcnROb0R1cGxpY2F0ZSh3aGF0LCBwcmV2aW91c0RpcmVjdGl2ZSwgZGlyZWN0aXZlLCBlbGVtZW50KSB7CiAgICAgIGlmIChwcmV2aW91c0RpcmVjdGl2ZSkgewogICAgICAgIHRocm93IEVycm9yKCdNdWx0aXBsZSBkaXJlY3RpdmVzIFsnICsgcHJldmlvdXNEaXJlY3RpdmUubmFtZSArICcsICcgKwogICAgICAgICAgZGlyZWN0aXZlLm5hbWUgKyAnXSBhc2tpbmcgZm9yICcgKyB3aGF0ICsgJyBvbjogJyArICBzdGFydGluZ1RhZyhlbGVtZW50KSk7CiAgICAgIH0KICAgIH0KCgogICAgZnVuY3Rpb24gYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIHRleHQpIHsKICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodGV4dCwgdHJ1ZSk7CiAgICAgIGlmIChpbnRlcnBvbGF0ZUZuKSB7CiAgICAgICAgZGlyZWN0aXZlcy5wdXNoKHsKICAgICAgICAgIHByaW9yaXR5OiAwLAogICAgICAgICAgY29tcGlsZTogdmFsdWVGbihmdW5jdGlvbiB0ZXh0SW50ZXJwb2xhdGVMaW5rRm4oc2NvcGUsIG5vZGUpIHsKICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50KCksCiAgICAgICAgICAgICAgICBiaW5kaW5ncyA9IHBhcmVudC5kYXRhKCckYmluZGluZycpIHx8IFtdOwogICAgICAgICAgICBiaW5kaW5ncy5wdXNoKGludGVycG9sYXRlRm4pOwogICAgICAgICAgICBzYWZlQWRkQ2xhc3MocGFyZW50LmRhdGEoJyRiaW5kaW5nJywgYmluZGluZ3MpLCAnbmctYmluZGluZycpOwogICAgICAgICAgICBzY29wZS4kd2F0Y2goaW50ZXJwb2xhdGVGbiwgZnVuY3Rpb24gaW50ZXJwb2xhdGVGbldhdGNoQWN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgbm9kZVswXS5ub2RlVmFsdWUgPSB2YWx1ZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KQogICAgICAgIH0pOwogICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZShub2RlLCBkaXJlY3RpdmVzLCB2YWx1ZSwgbmFtZSkgewogICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh2YWx1ZSwgdHJ1ZSk7CgoKICAgICAgLy8gbm8gaW50ZXJwb2xhdGlvbiBmb3VuZCAtPiBpZ25vcmUKICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47CgogICAgICBkaXJlY3RpdmVzLnB1c2goewogICAgICAgIHByaW9yaXR5OiAxMDAsCiAgICAgICAgY29tcGlsZTogdmFsdWVGbihmdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVMaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICAgIHZhciAkJG9ic2VydmVycyA9IChhdHRyLiQkb2JzZXJ2ZXJzIHx8IChhdHRyLiQkb2JzZXJ2ZXJzID0ge30pKTsKCiAgICAgICAgICBpZiAobmFtZSA9PT0gJ2NsYXNzJykgewogICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGludGVycG9sYXRlIGNsYXNzZXMgYWdhaW4sIGluIHRoZSBjYXNlIHRoZSBlbGVtZW50IHdhcyByZXBsYWNlZAogICAgICAgICAgICAvLyBhbmQgdGhlcmVmb3JlIHRoZSB0d28gY2xhc3MgYXR0cnMgZ290IG1lcmdlZCAtIHdlIHdhbnQgdG8gaW50ZXJwb2xhdGUgdGhlIHJlc3VsdAogICAgICAgICAgICBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGF0dHJbbmFtZV0sIHRydWUpOwogICAgICAgICAgfQoKICAgICAgICAgIGF0dHJbbmFtZV0gPSB1bmRlZmluZWQ7CiAgICAgICAgICAoJCRvYnNlcnZlcnNbbmFtZV0gfHwgKCQkb2JzZXJ2ZXJzW25hbWVdID0gW10pKS4kJGludGVyID0gdHJ1ZTsKICAgICAgICAgIChhdHRyLiQkb2JzZXJ2ZXJzICYmIGF0dHIuJCRvYnNlcnZlcnNbbmFtZV0uJCRzY29wZSB8fCBzY29wZSkuCiAgICAgICAgICAgICR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgdmFsdWUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KQogICAgICB9KTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBUaGlzIGlzIGEgc3BlY2lhbCBqcUxpdGUucmVwbGFjZVdpdGgsIHdoaWNoIGNhbiByZXBsYWNlIGl0ZW1zIHdoaWNoCiAgICAgKiBoYXZlIG5vIHBhcmVudHMsIHByb3ZpZGVkIHRoYXQgdGhlIGNvbnRhaW5pbmcganFMaXRlIGNvbGxlY3Rpb24gaXMgcHJvdmlkZWQuCiAgICAgKgogICAgICogQHBhcmFtIHtKcUxpdGU9fSAkcm9vdEVsZW1lbnQgVGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGUgdHJlZS4gVXNlZCBzbyB0aGF0IHdlIGNhbiByZXBsYWNlIG5vZGVzCiAgICAgKiAgICBpbiB0aGUgcm9vdCBvZiB0aGUgdHJlZS4KICAgICAqIEBwYXJhbSB7SnFMaXRlfSAkZWxlbWVudCBUaGUganFMaXRlIGVsZW1lbnQgd2hpY2ggd2UgYXJlIGdvaW5nIHRvIHJlcGxhY2UuIFdlIGtlZXAgdGhlIHNoZWxsLAogICAgICogICAgYnV0IHJlcGxhY2UgaXRzIERPTSBub2RlIHJlZmVyZW5jZS4KICAgICAqIEBwYXJhbSB7Tm9kZX0gbmV3Tm9kZSBUaGUgbmV3IERPTSBub2RlLgogICAgICovCiAgICBmdW5jdGlvbiByZXBsYWNlV2l0aCgkcm9vdEVsZW1lbnQsICRlbGVtZW50LCBuZXdOb2RlKSB7CiAgICAgIHZhciBvbGROb2RlID0gJGVsZW1lbnRbMF0sCiAgICAgICAgICBwYXJlbnQgPSBvbGROb2RlLnBhcmVudE5vZGUsCiAgICAgICAgICBpLCBpaTsKCiAgICAgIGlmICgkcm9vdEVsZW1lbnQpIHsKICAgICAgICBmb3IoaSA9IDAsIGlpID0gJHJvb3RFbGVtZW50Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnRbaV0gPT0gb2xkTm9kZSkgewogICAgICAgICAgICAkcm9vdEVsZW1lbnRbaV0gPSBuZXdOb2RlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChwYXJlbnQpIHsKICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5ld05vZGUsIG9sZE5vZGUpOwogICAgICB9CgogICAgICBuZXdOb2RlW2pxTGl0ZS5leHBhbmRvXSA9IG9sZE5vZGVbanFMaXRlLmV4cGFuZG9dOwogICAgICAkZWxlbWVudFswXSA9IG5ld05vZGU7CiAgICB9CiAgfV07Cn0KCnZhciBQUkVGSVhfUkVHRVhQID0gL14oeFtcOlwtX118ZGF0YVtcOlwtX10pL2k7Ci8qKgogKiBDb252ZXJ0cyBhbGwgYWNjZXB0ZWQgZGlyZWN0aXZlcyBmb3JtYXQgaW50byBwcm9wZXIgZGlyZWN0aXZlIG5hbWUuCiAqIEFsbCBvZiB0aGVzZSB3aWxsIGJlY29tZSAnbXlEaXJlY3RpdmUnOgogKiAgIG15OkRpUmVjdGl2ZQogKiAgIG15LWRpcmVjdGl2ZQogKiAgIHgtbXktZGlyZWN0aXZlCiAqICAgZGF0YS1teTpkaXJlY3RpdmUKICoKICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci4KICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemUKICovCmZ1bmN0aW9uIGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKSB7CiAgcmV0dXJuIGNhbWVsQ2FzZShuYW1lLnJlcGxhY2UoUFJFRklYX1JFR0VYUCwgJycpKTsKfQoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMKICogQGRlc2NyaXB0aW9uCiAqCiAqIEEgc2hhcmVkIG9iamVjdCBiZXR3ZWVuIGRpcmVjdGl2ZSBjb21waWxlIC8gbGlua2luZyBmdW5jdGlvbnMgd2hpY2ggY29udGFpbnMgbm9ybWFsaXplZCBET00gZWxlbWVudAogKiBhdHRyaWJ1dGVzLiBUaGUgdGhlIHZhbHVlcyByZWZsZWN0IGN1cnJlbnQgYmluZGluZyBzdGF0ZSBge3sgfX1gLiBUaGUgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQKICogc2luY2UgYWxsIG9mIHRoZXNlIGFyZSB0cmVhdGVkIGFzIGVxdWl2YWxlbnQgaW4gQW5ndWxhcjoKICoKICogICAgICAgICAgPHNwYW4gbmc6YmluZD0iYSIgbmctYmluZD0iYSIgZGF0YS1uZy1iaW5kPSJhIiB4LW5nLWJpbmQ9ImEiPgogKi8KCi8qKgogKiBAbmdkb2MgcHJvcGVydHkKICogQG5hbWUgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHIKICogQHByb3BlcnR5T2YgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMKICogQHJldHVybnMge29iamVjdH0gQSBtYXAgb2YgRE9NIGVsZW1lbnQgYXR0cmlidXRlIG5hbWVzIHRvIHRoZSBub3JtYWxpemVkIG5hbWUuIFRoaXMgaXMKICogICAgICAgICAgbmVlZGVkIHRvIGRvIHJldmVyc2UgbG9va3VwIGZyb20gbm9ybWFsaXplZCBuYW1lIGJhY2sgdG8gYWN0dWFsIG5hbWUuCiAqLwoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHNldAogKiBAbWV0aG9kT2YgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTZXQgRE9NIGVsZW1lbnQgYXR0cmlidXRlIHZhbHVlLgogKgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOb3JtYWxpemVkIGVsZW1lbnQgYXR0cmlidXRlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIG1vZGlmeS4gVGhlIG5hbWUgaXMKICogICAgICAgICAgcmV2ZXJzIHRyYW5zbGF0ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0ciAkYXR0cn0KICogICAgICAgICAgcHJvcGVydHkgdG8gdGhlIG9yaWdpbmFsIG5hbWUuCiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byBzZXQgdGhlIGF0dHJpYnV0ZSB0by4KICovCgoKCi8qKgogKiBDbG9zdXJlIGNvbXBpbGVyIHR5cGUgaW5mb3JtYXRpb24KICovCgpmdW5jdGlvbiBub2Rlc2V0TGlua2luZ0ZuKAogIC8qIGFuZ3VsYXIuU2NvcGUgKi8gc2NvcGUsCiAgLyogTm9kZUxpc3QgKi8gbm9kZUxpc3QsCiAgLyogRWxlbWVudCAqLyByb290RWxlbWVudCwKICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm4KKXt9CgpmdW5jdGlvbiBkaXJlY3RpdmVMaW5raW5nRm4oCiAgLyogbm9kZXNldExpbmtpbmdGbiAqLyBub2Rlc2V0TGlua2luZ0ZuLAogIC8qIGFuZ3VsYXIuU2NvcGUgKi8gc2NvcGUsCiAgLyogTm9kZSAqLyBub2RlLAogIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsCiAgLyogZnVuY3Rpb24oRnVuY3Rpb24pICovIGJvdW5kVHJhbnNjbHVkZUZuCil7fQoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJGNvbnRyb2xsZXJQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICogVGhlIHtAbGluayBuZy4kY29udHJvbGxlciAkY29udHJvbGxlciBzZXJ2aWNlfSBpcyB1c2VkIGJ5IEFuZ3VsYXIgdG8gY3JlYXRlIG5ldwogKiBjb250cm9sbGVycy4KICoKICogVGhpcyBwcm92aWRlciBhbGxvd3MgY29udHJvbGxlciByZWdpc3RyYXRpb24gdmlhIHRoZQogKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciByZWdpc3Rlcn0gbWV0aG9kLgogKi8KZnVuY3Rpb24gJENvbnRyb2xsZXJQcm92aWRlcigpIHsKICB2YXIgY29udHJvbGxlcnMgPSB7fTsKCgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIKICAgKiBAbWV0aG9kT2YgbmcuJGNvbnRyb2xsZXJQcm92aWRlcgogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENvbnRyb2xsZXIgbmFtZQogICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZm4gKG9wdGlvbmFsbHkgZGVjb3JhdGVkIHdpdGggREkKICAgKiAgICBhbm5vdGF0aW9ucyBpbiB0aGUgYXJyYXkgbm90YXRpb24pLgogICAqLwogIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBjb25zdHJ1Y3RvcikgewogICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7CiAgICAgIGV4dGVuZChjb250cm9sbGVycywgbmFtZSkKICAgIH0gZWxzZSB7CiAgICAgIGNvbnRyb2xsZXJzW25hbWVdID0gY29uc3RydWN0b3I7CiAgICB9CiAgfTsKCgogIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgJyR3aW5kb3cnLCBmdW5jdGlvbigkaW5qZWN0b3IsICR3aW5kb3cpIHsKCiAgICAvKioKICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICogQG5hbWUgbmcuJGNvbnRyb2xsZXIKICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3IKICAgICAqCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gY29uc3RydWN0b3IgSWYgY2FsbGVkIHdpdGggYSBmdW5jdGlvbiB0aGVuIGl0J3MgY29uc2lkZXJlZCB0byBiZSB0aGUKICAgICAqICAgIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIE90aGVyd2lzZSBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgYSBzdHJpbmcgd2hpY2ggaXMgdXNlZAogICAgICogICAgdG8gcmV0cmlldmUgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgdXNpbmcgdGhlIGZvbGxvd2luZyBzdGVwczoKICAgICAqCiAgICAgKiAgICAqIGNoZWNrIGlmIGEgY29udHJvbGxlciB3aXRoIGdpdmVuIG5hbWUgaXMgcmVnaXN0ZXJlZCB2aWEgYCRjb250cm9sbGVyUHJvdmlkZXJgCiAgICAgKiAgICAqIGNoZWNrIGlmIGV2YWx1YXRpbmcgdGhlIHN0cmluZyBvbiB0aGUgY3VycmVudCBzY29wZSByZXR1cm5zIGEgY29uc3RydWN0b3IKICAgICAqICAgICogY2hlY2sgYHdpbmRvd1tjb25zdHJ1Y3Rvcl1gIG9uIHRoZSBnbG9iYWwgYHdpbmRvd2Agb2JqZWN0CiAgICAgKgogICAgICogQHBhcmFtIHtPYmplY3R9IGxvY2FscyBJbmplY3Rpb24gbG9jYWxzIGZvciBDb250cm9sbGVyLgogICAgICogQHJldHVybiB7T2JqZWN0fSBJbnN0YW5jZSBvZiBnaXZlbiBjb250cm9sbGVyLgogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogYCRjb250cm9sbGVyYCBzZXJ2aWNlIGlzIHJlc3BvbnNpYmxlIGZvciBpbnN0YW50aWF0aW5nIGNvbnRyb2xsZXJzLgogICAgICoKICAgICAqIEl0J3MganVzdCBzaW1wbGUgY2FsbCB0byB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfSwgYnV0IGV4dHJhY3RlZCBpbnRvCiAgICAgKiBhIHNlcnZpY2UsIHNvIHRoYXQgb25lIGNhbiBvdmVycmlkZSB0aGlzIHNlcnZpY2Ugd2l0aCB7QGxpbmsgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTY0OTc4OAogICAgICogQkMgdmVyc2lvbn0uCiAgICAgKi8KICAgIHJldHVybiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgbG9jYWxzKSB7CiAgICAgIGlmKGlzU3RyaW5nKGNvbnN0cnVjdG9yKSkgewogICAgICAgIHZhciBuYW1lID0gY29uc3RydWN0b3I7CiAgICAgICAgY29uc3RydWN0b3IgPSBjb250cm9sbGVycy5oYXNPd25Qcm9wZXJ0eShuYW1lKQogICAgICAgICAgICA/IGNvbnRyb2xsZXJzW25hbWVdCiAgICAgICAgICAgIDogZ2V0dGVyKGxvY2Fscy4kc2NvcGUsIG5hbWUsIHRydWUpIHx8IGdldHRlcigkd2luZG93LCBuYW1lLCB0cnVlKTsKCiAgICAgICAgYXNzZXJ0QXJnRm4oY29uc3RydWN0b3IsIG5hbWUsIHRydWUpOwogICAgICB9CgogICAgICByZXR1cm4gJGluamVjdG9yLmluc3RhbnRpYXRlKGNvbnN0cnVjdG9yLCBsb2NhbHMpOwogICAgfTsKICB9XTsKfQoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJGRvY3VtZW50CiAqIEByZXF1aXJlcyAkd2luZG93CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIHtAbGluayBhbmd1bGFyLmVsZW1lbnQgalF1ZXJ5IChsaXRlKX0td3JhcHBlZCByZWZlcmVuY2UgdG8gdGhlIGJyb3dzZXIncyBgd2luZG93LmRvY3VtZW50YAogKiBlbGVtZW50LgogKi8KZnVuY3Rpb24gJERvY3VtZW50UHJvdmlkZXIoKXsKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbih3aW5kb3cpewogICAgcmV0dXJuIGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQpOwogIH1dOwp9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLiRleGNlcHRpb25IYW5kbGVyCiAqIEByZXF1aXJlcyAkbG9nCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBbnkgdW5jYXVnaHQgZXhjZXB0aW9uIGluIGFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGVsZWdhdGVkIHRvIHRoaXMgc2VydmljZS4KICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2ltcGx5IGRlbGVnYXRlcyB0byBgJGxvZy5lcnJvcmAgd2hpY2ggbG9ncyBpdCBpbnRvCiAqIHRoZSBicm93c2VyIGNvbnNvbGUuCiAqCiAqIEluIHVuaXQgdGVzdHMsIGlmIGBhbmd1bGFyLW1vY2tzLmpzYCBpcyBsb2FkZWQsIHRoaXMgc2VydmljZSBpcyBvdmVycmlkZGVuIGJ5CiAqIHtAbGluayBuZ01vY2suJGV4Y2VwdGlvbkhhbmRsZXIgbW9jayAkZXhjZXB0aW9uSGFuZGxlcn0KICoKICogQHBhcmFtIHtFcnJvcn0gZXhjZXB0aW9uIEV4Y2VwdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLgogKiBAcGFyYW0ge3N0cmluZz19IGNhdXNlIG9wdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb250ZXh0IGluIHdoaWNoCiAqICAgICAgIHRoZSBlcnJvciB3YXMgdGhyb3duLgogKi8KZnVuY3Rpb24gJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyRsb2cnLCBmdW5jdGlvbigkbG9nKXsKICAgIHJldHVybiBmdW5jdGlvbihleGNlcHRpb24sIGNhdXNlKSB7CiAgICAgICRsb2cuZXJyb3IuYXBwbHkoJGxvZywgYXJndW1lbnRzKTsKICAgIH07CiAgfV07Cn0KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICoKICogVXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGludGVycG9sYXRpb24gbWFya3VwLiBEZWZhdWx0cyB0byBge3tgIGFuZCBgfX1gLgogKi8KZnVuY3Rpb24gJEludGVycG9sYXRlUHJvdmlkZXIoKSB7CiAgdmFyIHN0YXJ0U3ltYm9sID0gJ3t7JzsKICB2YXIgZW5kU3ltYm9sID0gJ319JzsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sCiAgICogQG1ldGhvZE9mIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyCiAgICogQGRlc2NyaXB0aW9uCiAgICogU3ltYm9sIHRvIGRlbm90ZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBuZXcgdmFsdWUgdG8gc2V0IHRoZSBzdGFydGluZyBzeW1ib2wgdG8uCiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci4KICAgKi8KICB0aGlzLnN0YXJ0U3ltYm9sID0gZnVuY3Rpb24odmFsdWUpewogICAgaWYgKHZhbHVlKSB7CiAgICAgIHN0YXJ0U3ltYm9sID0gdmFsdWU7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sOwogICAgfQogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2wKICAgKiBAbWV0aG9kT2YgbmcuJGludGVycG9sYXRlUHJvdmlkZXIKICAgKiBAZGVzY3JpcHRpb24KICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBlbmQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYH19YC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgZW5kaW5nIHN5bWJvbCB0by4KICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHN5bWJvbCB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLgogICAqLwogIHRoaXMuZW5kU3ltYm9sID0gZnVuY3Rpb24odmFsdWUpewogICAgaWYgKHZhbHVlKSB7CiAgICAgIGVuZFN5bWJvbCA9IHZhbHVlOwogICAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBlbmRTeW1ib2w7CiAgICB9CiAgfTsKCgogIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgZnVuY3Rpb24oJHBhcnNlKSB7CiAgICB2YXIgc3RhcnRTeW1ib2xMZW5ndGggPSBzdGFydFN5bWJvbC5sZW5ndGgsCiAgICAgICAgZW5kU3ltYm9sTGVuZ3RoID0gZW5kU3ltYm9sLmxlbmd0aDsKCiAgICAvKioKICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICogQG5hbWUgbmcuJGludGVycG9sYXRlCiAgICAgKiBAZnVuY3Rpb24KICAgICAqCiAgICAgKiBAcmVxdWlyZXMgJHBhcnNlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKgogICAgICogQ29tcGlsZXMgYSBzdHJpbmcgd2l0aCBtYXJrdXAgaW50byBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLiBUaGlzIHNlcnZpY2UgaXMgdXNlZCBieSB0aGUKICAgICAqIEhUTUwge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSBzZXJ2aWNlIGZvciBkYXRhIGJpbmRpbmcuIFNlZQogICAgICoge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyICRpbnRlcnBvbGF0ZVByb3ZpZGVyfSBmb3IgY29uZmlndXJpbmcgdGhlCiAgICAgKiBpbnRlcnBvbGF0aW9uIG1hcmt1cC4KICAgICAqCiAgICAgKgogICAgICAgPHByZT4KICAgICAgICAgdmFyICRpbnRlcnBvbGF0ZSA9IC4uLjsgLy8gaW5qZWN0ZWQKICAgICAgICAgdmFyIGV4cCA9ICRpbnRlcnBvbGF0ZSgnSGVsbG8ge3tuYW1lfX0hJyk7CiAgICAgICAgIGV4cGVjdChleHAoe25hbWU6J0FuZ3VsYXInfSkudG9FcXVhbCgnSGVsbG8gQW5ndWxhciEnKTsKICAgICAgIDwvcHJlPgogICAgICoKICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB3aXRoIG1hcmt1cCB0byBpbnRlcnBvbGF0ZS4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG11c3RIYXZlRXhwcmVzc2lvbiBpZiBzZXQgdG8gdHJ1ZSB0aGVuIHRoZSBpbnRlcnBvbGF0aW9uIHN0cmluZyBtdXN0IGhhdmUKICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gaW4gb3JkZXIgdG8gcmV0dXJuIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFN0cmluZ3Mgd2l0aCBubwogICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiB3aWxsIHJldHVybiBudWxsIGZvciB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4KICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0KX0gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlIGludGVycG9sYXRlZAogICAgICogICAgc3RyaW5nLiBUaGUgZnVuY3Rpb24gaGFzIHRoZXNlIHBhcmFtZXRlcnM6CiAgICAgKgogICAgICogICAgKiBgY29udGV4dGA6IGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5ncyBhcmUgZXZhbHVhdGVkCiAgICAgKiAgICAgIGFnYWluc3QuCiAgICAgKgogICAgICovCiAgICBmdW5jdGlvbiAkaW50ZXJwb2xhdGUodGV4dCwgbXVzdEhhdmVFeHByZXNzaW9uKSB7CiAgICAgIHZhciBzdGFydEluZGV4LAogICAgICAgICAgZW5kSW5kZXgsCiAgICAgICAgICBpbmRleCA9IDAsCiAgICAgICAgICBwYXJ0cyA9IFtdLAogICAgICAgICAgbGVuZ3RoID0gdGV4dC5sZW5ndGgsCiAgICAgICAgICBoYXNJbnRlcnBvbGF0aW9uID0gZmFsc2UsCiAgICAgICAgICBmbiwKICAgICAgICAgIGV4cCwKICAgICAgICAgIGNvbmNhdCA9IFtdOwoKICAgICAgd2hpbGUoaW5kZXggPCBsZW5ndGgpIHsKICAgICAgICBpZiAoICgoc3RhcnRJbmRleCA9IHRleHQuaW5kZXhPZihzdGFydFN5bWJvbCwgaW5kZXgpKSAhPSAtMSkgJiYKICAgICAgICAgICAgICgoZW5kSW5kZXggPSB0ZXh0LmluZGV4T2YoZW5kU3ltYm9sLCBzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgpKSAhPSAtMSkgKSB7CiAgICAgICAgICAoaW5kZXggIT0gc3RhcnRJbmRleCkgJiYgcGFydHMucHVzaCh0ZXh0LnN1YnN0cmluZyhpbmRleCwgc3RhcnRJbmRleCkpOwogICAgICAgICAgcGFydHMucHVzaChmbiA9ICRwYXJzZShleHAgPSB0ZXh0LnN1YnN0cmluZyhzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgsIGVuZEluZGV4KSkpOwogICAgICAgICAgZm4uZXhwID0gZXhwOwogICAgICAgICAgaW5kZXggPSBlbmRJbmRleCArIGVuZFN5bWJvbExlbmd0aDsKICAgICAgICAgIGhhc0ludGVycG9sYXRpb24gPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyB3ZSBkaWQgbm90IGZpbmQgYW55dGhpbmcsIHNvIHdlIGhhdmUgdG8gYWRkIHRoZSByZW1haW5kZXIgdG8gdGhlIHBhcnRzIGFycmF5CiAgICAgICAgICAoaW5kZXggIT0gbGVuZ3RoKSAmJiBwYXJ0cy5wdXNoKHRleHQuc3Vic3RyaW5nKGluZGV4KSk7CiAgICAgICAgICBpbmRleCA9IGxlbmd0aDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmICghKGxlbmd0aCA9IHBhcnRzLmxlbmd0aCkpIHsKICAgICAgICAvLyB3ZSBhZGRlZCwgbm90aGluZywgbXVzdCBoYXZlIGJlZW4gYW4gZW1wdHkgc3RyaW5nLgogICAgICAgIHBhcnRzLnB1c2goJycpOwogICAgICAgIGxlbmd0aCA9IDE7CiAgICAgIH0KCiAgICAgIGlmICghbXVzdEhhdmVFeHByZXNzaW9uICB8fCBoYXNJbnRlcnBvbGF0aW9uKSB7CiAgICAgICAgY29uY2F0Lmxlbmd0aCA9IGxlbmd0aDsKICAgICAgICBmbiA9IGZ1bmN0aW9uKGNvbnRleHQpIHsKICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGlpID0gbGVuZ3RoLCBwYXJ0OyBpPGlpOyBpKyspIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiAocGFydCA9IHBhcnRzW2ldKSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgcGFydCA9IHBhcnQoY29udGV4dCk7CiAgICAgICAgICAgICAgaWYgKHBhcnQgPT0gbnVsbCB8fCBwYXJ0ID09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcGFydCA9ICcnOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhcnQgIT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIHBhcnQgPSB0b0pzb24ocGFydCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbmNhdFtpXSA9IHBhcnQ7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gY29uY2F0LmpvaW4oJycpOwogICAgICAgIH07CiAgICAgICAgZm4uZXhwID0gdGV4dDsKICAgICAgICBmbi5wYXJ0cyA9IHBhcnRzOwogICAgICAgIHJldHVybiBmbjsKICAgICAgfQogICAgfQoKCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRpbnRlcnBvbGF0ZSNzdGFydFN5bWJvbAogICAgICogQG1ldGhvZE9mIG5nLiRpbnRlcnBvbGF0ZQogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLgogICAgICoKICAgICAqIFVzZSB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2wgJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2x9IHRvIGNoYW5nZQogICAgICogdGhlIHN5bWJvbC4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzdGFydCBzeW1ib2wuCiAgICAgKi8KICAgICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gc3RhcnRTeW1ib2w7CiAgICB9CgoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJGludGVycG9sYXRlI2VuZFN5bWJvbAogICAgICogQG1ldGhvZE9mIG5nLiRpbnRlcnBvbGF0ZQogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBlbmQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYH19YC4KICAgICAqCiAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbCAkaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2x9IHRvIGNoYW5nZQogICAgICogdGhlIHN5bWJvbC4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzdGFydCBzeW1ib2wuCiAgICAgKi8KICAgICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2wgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGVuZFN5bWJvbDsKICAgIH0KCiAgICByZXR1cm4gJGludGVycG9sYXRlOwogIH1dOwp9Cgp2YXIgVVJMX01BVENIID0gL14oW146XSspOlwvXC8oXHcrOnswLDF9XHcqQCk/KFtcd1wuLV0qKSg6KFswLTldKykpPyhcL1teXD8jXSopPyhcPyhbXiNdKikpPygjKC4qKSk/JC8sCiAgICBQQVRIX01BVENIID0gL14oW15cPyNdKik/KFw/KFteI10qKSk/KCMoLiopKT8kLywKICAgIEhBU0hfTUFUQ0ggPSBQQVRIX01BVENILAogICAgREVGQVVMVF9QT1JUUyA9IHsnaHR0cCc6IDgwLCAnaHR0cHMnOiA0NDMsICdmdHAnOiAyMX07CgoKLyoqCiAqIEVuY29kZSBwYXRoIHVzaW5nIGVuY29kZVVyaVNlZ21lbnQsIGlnbm9yaW5nIGZvcndhcmQgc2xhc2hlcwogKgogKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIGVuY29kZQogKiBAcmV0dXJucyB7c3RyaW5nfQogKi8KZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7CiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLycpLAogICAgICBpID0gc2VnbWVudHMubGVuZ3RoOwoKICB3aGlsZSAoaS0tKSB7CiAgICBzZWdtZW50c1tpXSA9IGVuY29kZVVyaVNlZ21lbnQoc2VnbWVudHNbaV0pOwogIH0KCiAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJy8nKTsKfQoKZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkgewogIHJldHVybiB1cmwuc3BsaXQoJyMnKVswXTsKfQoKCmZ1bmN0aW9uIG1hdGNoVXJsKHVybCwgb2JqKSB7CiAgdmFyIG1hdGNoID0gVVJMX01BVENILmV4ZWModXJsKTsKCiAgbWF0Y2ggPSB7CiAgICAgIHByb3RvY29sOiBtYXRjaFsxXSwKICAgICAgaG9zdDogbWF0Y2hbM10sCiAgICAgIHBvcnQ6IGludChtYXRjaFs1XSkgfHwgREVGQVVMVF9QT1JUU1ttYXRjaFsxXV0gfHwgbnVsbCwKICAgICAgcGF0aDogbWF0Y2hbNl0gfHwgJy8nLAogICAgICBzZWFyY2g6IG1hdGNoWzhdLAogICAgICBoYXNoOiBtYXRjaFsxMF0KICAgIH07CgogIGlmIChvYmopIHsKICAgIG9iai4kJHByb3RvY29sID0gbWF0Y2gucHJvdG9jb2w7CiAgICBvYmouJCRob3N0ID0gbWF0Y2guaG9zdDsKICAgIG9iai4kJHBvcnQgPSBtYXRjaC5wb3J0OwogIH0KCiAgcmV0dXJuIG1hdGNoOwp9CgoKZnVuY3Rpb24gY29tcG9zZVByb3RvY29sSG9zdFBvcnQocHJvdG9jb2wsIGhvc3QsIHBvcnQpIHsKICByZXR1cm4gcHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAocG9ydCA9PSBERUZBVUxUX1BPUlRTW3Byb3RvY29sXSA/ICcnIDogJzonICsgcG9ydCk7Cn0KCgpmdW5jdGlvbiBwYXRoUHJlZml4RnJvbUJhc2UoYmFzZVBhdGgpIHsKICByZXR1cm4gYmFzZVBhdGguc3Vic3RyKDAsIGJhc2VQYXRoLmxhc3RJbmRleE9mKCcvJykpOwp9CgoKZnVuY3Rpb24gY29udmVydFRvSHRtbDVVcmwodXJsLCBiYXNlUGF0aCwgaGFzaFByZWZpeCkgewogIHZhciBtYXRjaCA9IG1hdGNoVXJsKHVybCk7CgogIC8vIGFscmVhZHkgaHRtbDUgdXJsCiAgaWYgKGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5wYXRoKSAhPSBiYXNlUGF0aCB8fCBpc1VuZGVmaW5lZChtYXRjaC5oYXNoKSB8fAogICAgICBtYXRjaC5oYXNoLmluZGV4T2YoaGFzaFByZWZpeCkgIT09IDApIHsKICAgIHJldHVybiB1cmw7CiAgLy8gY29udmVydCBoYXNoYmFuZyB1cmwgLT4gaHRtbDUgdXJsCiAgfSBlbHNlIHsKICAgIHJldHVybiBjb21wb3NlUHJvdG9jb2xIb3N0UG9ydChtYXRjaC5wcm90b2NvbCwgbWF0Y2guaG9zdCwgbWF0Y2gucG9ydCkgKwogICAgICAgICAgIHBhdGhQcmVmaXhGcm9tQmFzZShiYXNlUGF0aCkgKyBtYXRjaC5oYXNoLnN1YnN0cihoYXNoUHJlZml4Lmxlbmd0aCk7CiAgfQp9CgoKZnVuY3Rpb24gY29udmVydFRvSGFzaGJhbmdVcmwodXJsLCBiYXNlUGF0aCwgaGFzaFByZWZpeCkgewogIHZhciBtYXRjaCA9IG1hdGNoVXJsKHVybCk7CgogIC8vIGFscmVhZHkgaGFzaGJhbmcgdXJsCiAgaWYgKGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5wYXRoKSA9PSBiYXNlUGF0aCkgewogICAgcmV0dXJuIHVybDsKICAvLyBjb252ZXJ0IGh0bWw1IHVybCAtPiBoYXNoYmFuZyB1cmwKICB9IGVsc2UgewogICAgdmFyIHNlYXJjaCA9IG1hdGNoLnNlYXJjaCAmJiAnPycgKyBtYXRjaC5zZWFyY2ggfHwgJycsCiAgICAgICAgaGFzaCA9IG1hdGNoLmhhc2ggJiYgJyMnICsgbWF0Y2guaGFzaCB8fCAnJywKICAgICAgICBwYXRoUHJlZml4ID0gcGF0aFByZWZpeEZyb21CYXNlKGJhc2VQYXRoKSwKICAgICAgICBwYXRoID0gbWF0Y2gucGF0aC5zdWJzdHIocGF0aFByZWZpeC5sZW5ndGgpOwoKICAgIGlmIChtYXRjaC5wYXRoLmluZGV4T2YocGF0aFByZWZpeCkgIT09IDApIHsKICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgdXJsICInICsgdXJsICsgJyIsIG1pc3NpbmcgcGF0aCBwcmVmaXggIicgKyBwYXRoUHJlZml4ICsgJyIgIScpOwogICAgfQoKICAgIHJldHVybiBjb21wb3NlUHJvdG9jb2xIb3N0UG9ydChtYXRjaC5wcm90b2NvbCwgbWF0Y2guaG9zdCwgbWF0Y2gucG9ydCkgKyBiYXNlUGF0aCArCiAgICAgICAgICAgJyMnICsgaGFzaFByZWZpeCArIHBhdGggKyBzZWFyY2ggKyBoYXNoOwogIH0KfQoKCi8qKgogKiBMb2NhdGlvblVybCByZXByZXNlbnRzIGFuIHVybAogKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gSFRNTDUgbW9kZSBpcyBlbmFibGVkIGFuZCBzdXBwb3J0ZWQKICoKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSFRNTDUgdXJsCiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoUHJlZml4CiAqLwpmdW5jdGlvbiBMb2NhdGlvblVybCh1cmwsIHBhdGhQcmVmaXgsIGFwcEJhc2VVcmwpIHsKICBwYXRoUHJlZml4ID0gcGF0aFByZWZpeCB8fCAnJzsKCiAgLyoqCiAgICogUGFyc2UgZ2l2ZW4gaHRtbDUgKHJlZ3VsYXIpIHVybCBzdHJpbmcgaW50byBwcm9wZXJ0aWVzCiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0Fic29sdXRlVXJsIEhUTUw1IHVybAogICAqIEBwcml2YXRlCiAgICovCiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24obmV3QWJzb2x1dGVVcmwpIHsKICAgIHZhciBtYXRjaCA9IG1hdGNoVXJsKG5ld0Fic29sdXRlVXJsLCB0aGlzKTsKCiAgICBpZiAobWF0Y2gucGF0aC5pbmRleE9mKHBhdGhQcmVmaXgpICE9PSAwKSB7CiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIHVybCAiJyArIG5ld0Fic29sdXRlVXJsICsgJyIsIG1pc3NpbmcgcGF0aCBwcmVmaXggIicgKyBwYXRoUHJlZml4ICsgJyIgIScpOwogICAgfQoKICAgIHRoaXMuJCRwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoLnBhdGguc3Vic3RyKHBhdGhQcmVmaXgubGVuZ3RoKSk7CiAgICB0aGlzLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShtYXRjaC5zZWFyY2gpOwogICAgdGhpcy4kJGhhc2ggPSBtYXRjaC5oYXNoICYmIGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5oYXNoKSB8fCAnJzsKCiAgICB0aGlzLiQkY29tcG9zZSgpOwogIH07CgogIC8qKgogICAqIENvbXBvc2UgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHkKICAgKiBAcHJpdmF0ZQogICAqLwogIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSwKICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnOwoKICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoOwogICAgdGhpcy4kJGFic1VybCA9IGNvbXBvc2VQcm90b2NvbEhvc3RQb3J0KHRoaXMuJCRwcm90b2NvbCwgdGhpcy4kJGhvc3QsIHRoaXMuJCRwb3J0KSArCiAgICAgICAgICAgICAgICAgICAgcGF0aFByZWZpeCArIHRoaXMuJCR1cmw7CiAgfTsKCgogIHRoaXMuJCRyZXdyaXRlQXBwVXJsID0gZnVuY3Rpb24oYWJzb2x1dGVMaW5rVXJsKSB7CiAgICBpZihhYnNvbHV0ZUxpbmtVcmwuaW5kZXhPZihhcHBCYXNlVXJsKSA9PSAwKSB7CiAgICAgIHJldHVybiBhYnNvbHV0ZUxpbmtVcmw7CiAgICB9CiAgfQoKCiAgdGhpcy4kJHBhcnNlKHVybCk7Cn0KCgovKioKICogTG9jYXRpb25IYXNoYmFuZ1VybCByZXByZXNlbnRzIHVybAogKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gaHRtbDUgaGlzdG9yeSBhcGkgaXMgZGlzYWJsZWQgb3Igbm90IHN1cHBvcnRlZAogKgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtzdHJpbmd9IHVybCBMZWdhY3kgdXJsCiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoUHJlZml4IFByZWZpeCBmb3IgaGFzaCBwYXJ0IChjb250YWluaW5nIHBhdGggYW5kIHNlYXJjaCkKICovCmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdVcmwodXJsLCBoYXNoUHJlZml4LCBhcHBCYXNlVXJsKSB7CiAgdmFyIGJhc2VQYXRoOwoKICAvKioKICAgKiBQYXJzZSBnaXZlbiBoYXNoYmFuZyB1cmwgaW50byBwcm9wZXJ0aWVzCiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIYXNoYmFuZyB1cmwKICAgKiBAcHJpdmF0ZQogICAqLwogIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkgewogICAgdmFyIG1hdGNoID0gbWF0Y2hVcmwodXJsLCB0aGlzKTsKCgogICAgaWYgKG1hdGNoLmhhc2ggJiYgbWF0Y2guaGFzaC5pbmRleE9mKGhhc2hQcmVmaXgpICE9PSAwKSB7CiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIHVybCAiJyArIHVybCArICciLCBtaXNzaW5nIGhhc2ggcHJlZml4ICInICsgaGFzaFByZWZpeCArICciICEnKTsKICAgIH0KCiAgICBiYXNlUGF0aCA9IG1hdGNoLnBhdGggKyAobWF0Y2guc2VhcmNoID8gJz8nICsgbWF0Y2guc2VhcmNoIDogJycpOwogICAgbWF0Y2ggPSBIQVNIX01BVENILmV4ZWMoKG1hdGNoLmhhc2ggfHwgJycpLnN1YnN0cihoYXNoUHJlZml4Lmxlbmd0aCkpOwogICAgaWYgKG1hdGNoWzFdKSB7CiAgICAgIHRoaXMuJCRwYXRoID0gKG1hdGNoWzFdLmNoYXJBdCgwKSA9PSAnLycgPyAnJyA6ICcvJykgKyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy4kJHBhdGggPSAnJzsKICAgIH0KCiAgICB0aGlzLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShtYXRjaFszXSk7CiAgICB0aGlzLiQkaGFzaCA9IG1hdGNoWzVdICYmIGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFs1XSkgfHwgJyc7CgogICAgdGhpcy4kJGNvbXBvc2UoKTsKICB9OwoKICAvKioKICAgKiBDb21wb3NlIGhhc2hiYW5nIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5CiAgICogQHByaXZhdGUKICAgKi8KICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksCiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJzsKCiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDsKICAgIHRoaXMuJCRhYnNVcmwgPSBjb21wb3NlUHJvdG9jb2xIb3N0UG9ydCh0aGlzLiQkcHJvdG9jb2wsIHRoaXMuJCRob3N0LCB0aGlzLiQkcG9ydCkgKwogICAgICAgICAgICAgICAgICAgIGJhc2VQYXRoICsgKHRoaXMuJCR1cmwgPyAnIycgKyBoYXNoUHJlZml4ICsgdGhpcy4kJHVybCA6ICcnKTsKICB9OwoKICB0aGlzLiQkcmV3cml0ZUFwcFVybCA9IGZ1bmN0aW9uKGFic29sdXRlTGlua1VybCkgewogICAgaWYoYWJzb2x1dGVMaW5rVXJsLmluZGV4T2YoYXBwQmFzZVVybCkgPT0gMCkgewogICAgICByZXR1cm4gYWJzb2x1dGVMaW5rVXJsOwogICAgfQogIH0KCgogIHRoaXMuJCRwYXJzZSh1cmwpOwp9CgoKTG9jYXRpb25VcmwucHJvdG90eXBlID0gewoKICAvKioKICAgKiBIYXMgYW55IGNoYW5nZSBiZWVuIHJlcGxhY2luZyA/CiAgICogQHByaXZhdGUKICAgKi8KICAkJHJlcGxhY2U6IGZhbHNlLAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI2Fic1VybAogICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LgogICAqCiAgICogUmV0dXJuIGZ1bGwgdXJsIHJlcHJlc2VudGF0aW9uIHdpdGggYWxsIHNlZ21lbnRzIGVuY29kZWQgYWNjb3JkaW5nIHRvIHJ1bGVzIHNwZWNpZmllZCBpbgogICAqIHtAbGluayBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCBSRkMgMzk4Nn0uCiAgICoKICAgKiBAcmV0dXJuIHtzdHJpbmd9IGZ1bGwgdXJsCiAgICovCiAgYWJzVXJsOiBsb2NhdGlvbkdldHRlcignJCRhYnNVcmwnKSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRsb2NhdGlvbiN1cmwKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuCiAgICoKICAgKiBSZXR1cm4gdXJsIChlLmcuIGAvcGF0aD9hPWIjaGFzaGApIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci4KICAgKgogICAqIENoYW5nZSBwYXRoLCBzZWFyY2ggYW5kIGhhc2gsIHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IHVybCBOZXcgdXJsIHdpdGhvdXQgYmFzZSBwcmVmaXggKGUuZy4gYC9wYXRoP2E9YiNoYXNoYCkKICAgKiBAcmV0dXJuIHtzdHJpbmd9IHVybAogICAqLwogIHVybDogZnVuY3Rpb24odXJsLCByZXBsYWNlKSB7CiAgICBpZiAoaXNVbmRlZmluZWQodXJsKSkKICAgICAgcmV0dXJuIHRoaXMuJCR1cmw7CgogICAgdmFyIG1hdGNoID0gUEFUSF9NQVRDSC5leGVjKHVybCk7CiAgICBpZiAobWF0Y2hbMV0pIHRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pKTsKICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSkgdGhpcy5zZWFyY2gobWF0Y2hbM10gfHwgJycpOwogICAgdGhpcy5oYXNoKG1hdGNoWzVdIHx8ICcnLCByZXBsYWNlKTsKCiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI3Byb3RvY29sCiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuCiAgICoKICAgKiBSZXR1cm4gcHJvdG9jb2wgb2YgY3VycmVudCB1cmwuCiAgICoKICAgKiBAcmV0dXJuIHtzdHJpbmd9IHByb3RvY29sIG9mIGN1cnJlbnQgdXJsCiAgICovCiAgcHJvdG9jb2w6IGxvY2F0aW9uR2V0dGVyKCckJHByb3RvY29sJyksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jaG9zdAogICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LgogICAqCiAgICogUmV0dXJuIGhvc3Qgb2YgY3VycmVudCB1cmwuCiAgICoKICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhvc3Qgb2YgY3VycmVudCB1cmwuCiAgICovCiAgaG9zdDogbG9jYXRpb25HZXR0ZXIoJyQkaG9zdCcpLAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI3BvcnQKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS4KICAgKgogICAqIFJldHVybiBwb3J0IG9mIGN1cnJlbnQgdXJsLgogICAqCiAgICogQHJldHVybiB7TnVtYmVyfSBwb3J0CiAgICovCiAgcG9ydDogbG9jYXRpb25HZXR0ZXIoJyQkcG9ydCcpLAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI3BhdGgKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuCiAgICoKICAgKiBSZXR1cm4gcGF0aCBvZiBjdXJyZW50IHVybCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuCiAgICoKICAgKiBDaGFuZ2UgcGF0aCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLgogICAqCiAgICogTm90ZTogUGF0aCBzaG91bGQgYWx3YXlzIGJlZ2luIHdpdGggZm9yd2FyZCBzbGFzaCAoLyksIHRoaXMgbWV0aG9kIHdpbGwgYWRkIHRoZSBmb3J3YXJkIHNsYXNoCiAgICogaWYgaXQgaXMgbWlzc2luZy4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0aCBOZXcgcGF0aAogICAqIEByZXR1cm4ge3N0cmluZ30gcGF0aAogICAqLwogIHBhdGg6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJHBhdGgnLCBmdW5jdGlvbihwYXRoKSB7CiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7CiAgfSksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jc2VhcmNoCiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLgogICAqCiAgICogUmV0dXJuIHNlYXJjaCBwYXJ0IChhcyBvYmplY3QpIG9mIGN1cnJlbnQgdXJsIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci4KICAgKgogICAqIENoYW5nZSBzZWFyY2ggcGFydCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0PHN0cmluZyxzdHJpbmc+PX0gc2VhcmNoIE5ldyBzZWFyY2ggcGFyYW1zIC0gc3RyaW5nIG9yIGhhc2ggb2JqZWN0CiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbVZhbHVlIElmIGBzZWFyY2hgIGlzIGEgc3RyaW5nLCB0aGVuIGBwYXJhbVZhbHVlYCB3aWxsIG92ZXJyaWRlIG9ubHkgYQogICAqICAgIHNpbmdsZSBzZWFyY2ggcGFyYW1ldGVyLiBJZiB0aGUgdmFsdWUgaXMgYG51bGxgLCB0aGUgcGFyYW1ldGVyIHdpbGwgYmUgZGVsZXRlZC4KICAgKgogICAqIEByZXR1cm4ge3N0cmluZ30gc2VhcmNoCiAgICovCiAgc2VhcmNoOiBmdW5jdGlvbihzZWFyY2gsIHBhcmFtVmFsdWUpIHsKICAgIGlmIChpc1VuZGVmaW5lZChzZWFyY2gpKQogICAgICByZXR1cm4gdGhpcy4kJHNlYXJjaDsKCiAgICBpZiAoaXNEZWZpbmVkKHBhcmFtVmFsdWUpKSB7CiAgICAgIGlmIChwYXJhbVZhbHVlID09PSBudWxsKSB7CiAgICAgICAgZGVsZXRlIHRoaXMuJCRzZWFyY2hbc2VhcmNoXTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiQkc2VhcmNoW3NlYXJjaF0gPSBwYXJhbVZhbHVlOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzLiQkc2VhcmNoID0gaXNTdHJpbmcoc2VhcmNoKSA/IHBhcnNlS2V5VmFsdWUoc2VhcmNoKSA6IHNlYXJjaDsKICAgIH0KCiAgICB0aGlzLiQkY29tcG9zZSgpOwogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRsb2NhdGlvbiNoYXNoCiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLgogICAqCiAgICogUmV0dXJuIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLgogICAqCiAgICogQ2hhbmdlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nPX0gaGFzaCBOZXcgaGFzaCBmcmFnbWVudAogICAqIEByZXR1cm4ge3N0cmluZ30gaGFzaAogICAqLwogIGhhc2g6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJGhhc2gnLCBpZGVudGl0eSksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jcmVwbGFjZQogICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIElmIGNhbGxlZCwgYWxsIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGR1cmluZyBjdXJyZW50IGAkZGlnZXN0YCB3aWxsIGJlIHJlcGxhY2luZyBjdXJyZW50IGhpc3RvcnkKICAgKiByZWNvcmQsIGluc3RlYWQgb2YgYWRkaW5nIG5ldyBvbmUuCiAgICovCiAgcmVwbGFjZTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLiQkcmVwbGFjZSA9IHRydWU7CiAgICByZXR1cm4gdGhpczsKICB9Cn07CgpMb2NhdGlvbkhhc2hiYW5nVXJsLnByb3RvdHlwZSA9IGluaGVyaXQoTG9jYXRpb25VcmwucHJvdG90eXBlKTsKCmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsKHVybCwgaGFzaFByZWZpeCwgYXBwQmFzZVVybCwgYmFzZUV4dHJhKSB7CiAgTG9jYXRpb25IYXNoYmFuZ1VybC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKCiAgdGhpcy4kJHJld3JpdGVBcHBVcmwgPSBmdW5jdGlvbihhYnNvbHV0ZUxpbmtVcmwpIHsKICAgIGlmIChhYnNvbHV0ZUxpbmtVcmwuaW5kZXhPZihhcHBCYXNlVXJsKSA9PSAwKSB7CiAgICAgIHJldHVybiBhcHBCYXNlVXJsICsgYmFzZUV4dHJhICsgJyMnICsgaGFzaFByZWZpeCAgKyBhYnNvbHV0ZUxpbmtVcmwuc3Vic3RyKGFwcEJhc2VVcmwubGVuZ3RoKTsKICAgIH0KICB9Cn0KCkxvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsLnByb3RvdHlwZSA9IGluaGVyaXQoTG9jYXRpb25IYXNoYmFuZ1VybC5wcm90b3R5cGUpOwoKZnVuY3Rpb24gbG9jYXRpb25HZXR0ZXIocHJvcGVydHkpIHsKICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07CiAgfTsKfQoKCmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyU2V0dGVyKHByb3BlcnR5LCBwcmVwcm9jZXNzKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKQogICAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07CgogICAgdGhpc1twcm9wZXJ0eV0gPSBwcmVwcm9jZXNzKHZhbHVlKTsKICAgIHRoaXMuJCRjb21wb3NlKCk7CgogICAgcmV0dXJuIHRoaXM7CiAgfTsKfQoKCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRsb2NhdGlvbgogKgogKiBAcmVxdWlyZXMgJGJyb3dzZXIKICogQHJlcXVpcmVzICRzbmlmZmVyCiAqIEByZXF1aXJlcyAkcm9vdEVsZW1lbnQKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSAkbG9jYXRpb24gc2VydmljZSBwYXJzZXMgdGhlIFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciAoYmFzZWQgb24gdGhlCiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi93aW5kb3cubG9jYXRpb24gd2luZG93LmxvY2F0aW9ufSkgYW5kIG1ha2VzIHRoZSBVUkwKICogYXZhaWxhYmxlIHRvIHlvdXIgYXBwbGljYXRpb24uIENoYW5nZXMgdG8gdGhlIFVSTCBpbiB0aGUgYWRkcmVzcyBiYXIgYXJlIHJlZmxlY3RlZCBpbnRvCiAqICRsb2NhdGlvbiBzZXJ2aWNlIGFuZCBjaGFuZ2VzIHRvICRsb2NhdGlvbiBhcmUgcmVmbGVjdGVkIGludG8gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIuCiAqCiAqICoqVGhlICRsb2NhdGlvbiBzZXJ2aWNlOioqCiAqCiAqIC0gRXhwb3NlcyB0aGUgY3VycmVudCBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIsIHNvIHlvdSBjYW4KICogICAtIFdhdGNoIGFuZCBvYnNlcnZlIHRoZSBVUkwuCiAqICAgLSBDaGFuZ2UgdGhlIFVSTC4KICogLSBTeW5jaHJvbml6ZXMgdGhlIFVSTCB3aXRoIHRoZSBicm93c2VyIHdoZW4gdGhlIHVzZXIKICogICAtIENoYW5nZXMgdGhlIGFkZHJlc3MgYmFyLgogKiAgIC0gQ2xpY2tzIHRoZSBiYWNrIG9yIGZvcndhcmQgYnV0dG9uIChvciBjbGlja3MgYSBIaXN0b3J5IGxpbmspLgogKiAgIC0gQ2xpY2tzIG9uIGEgbGluay4KICogLSBSZXByZXNlbnRzIHRoZSBVUkwgb2JqZWN0IGFzIGEgc2V0IG9mIG1ldGhvZHMgKHByb3RvY29sLCBob3N0LCBwb3J0LCBwYXRoLCBzZWFyY2gsIGhhc2gpLgogKgogKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUge0BsaW5rIGd1aWRlL2Rldl9ndWlkZS5zZXJ2aWNlcy4kbG9jYXRpb24gRGV2ZWxvcGVyIEd1aWRlOiBBbmd1bGFyCiAqIFNlcnZpY2VzOiBVc2luZyAkbG9jYXRpb259CiAqLwoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJGxvY2F0aW9uUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqIFVzZSB0aGUgYCRsb2NhdGlvblByb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBkZWVwIGxpbmtpbmcgcGF0aHMgYXJlIHN0b3JlZC4KICovCmZ1bmN0aW9uICRMb2NhdGlvblByb3ZpZGVyKCl7CiAgdmFyIGhhc2hQcmVmaXggPSAnJywKICAgICAgaHRtbDVNb2RlID0gZmFsc2U7CgogIC8qKgogICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAqIEBuYW1lIG5nLiRsb2NhdGlvblByb3ZpZGVyI2hhc2hQcmVmaXgKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uUHJvdmlkZXIKICAgKiBAZGVzY3JpcHRpb24KICAgKiBAcGFyYW0ge3N0cmluZz19IHByZWZpeCBQcmVmaXggZm9yIGhhc2ggcGFydCAoY29udGFpbmluZyBwYXRoIGFuZCBzZWFyY2gpCiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXIKICAgKi8KICB0aGlzLmhhc2hQcmVmaXggPSBmdW5jdGlvbihwcmVmaXgpIHsKICAgIGlmIChpc0RlZmluZWQocHJlZml4KSkgewogICAgICBoYXNoUHJlZml4ID0gcHJlZml4OwogICAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBoYXNoUHJlZml4OwogICAgfQogIH07CgogIC8qKgogICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAqIEBuYW1lIG5nLiRsb2NhdGlvblByb3ZpZGVyI2h0bWw1TW9kZQogICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb25Qcm92aWRlcgogICAqIEBkZXNjcmlwdGlvbgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbW9kZSBVc2UgSFRNTDUgc3RyYXRlZ3kgaWYgYXZhaWxhYmxlLgogICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyCiAgICovCiAgdGhpcy5odG1sNU1vZGUgPSBmdW5jdGlvbihtb2RlKSB7CiAgICBpZiAoaXNEZWZpbmVkKG1vZGUpKSB7CiAgICAgIGh0bWw1TW9kZSA9IG1vZGU7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGh0bWw1TW9kZTsKICAgIH0KICB9OwoKICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJHNuaWZmZXInLCAnJHJvb3RFbGVtZW50JywKICAgICAgZnVuY3Rpb24oICRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHNuaWZmZXIsICAgJHJvb3RFbGVtZW50KSB7CiAgICB2YXIgJGxvY2F0aW9uLAogICAgICAgIGJhc2VQYXRoLAogICAgICAgIHBhdGhQcmVmaXgsCiAgICAgICAgaW5pdFVybCA9ICRicm93c2VyLnVybCgpLAogICAgICAgIGluaXRVcmxQYXJ0cyA9IG1hdGNoVXJsKGluaXRVcmwpLAogICAgICAgIGFwcEJhc2VVcmw7CgogICAgaWYgKGh0bWw1TW9kZSkgewogICAgICBiYXNlUGF0aCA9ICRicm93c2VyLmJhc2VIcmVmKCkgfHwgJy8nOwogICAgICBwYXRoUHJlZml4ID0gcGF0aFByZWZpeEZyb21CYXNlKGJhc2VQYXRoKTsKICAgICAgYXBwQmFzZVVybCA9CiAgICAgICAgICBjb21wb3NlUHJvdG9jb2xIb3N0UG9ydChpbml0VXJsUGFydHMucHJvdG9jb2wsIGluaXRVcmxQYXJ0cy5ob3N0LCBpbml0VXJsUGFydHMucG9ydCkgKwogICAgICAgICAgcGF0aFByZWZpeCArICcvJzsKCiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5KSB7CiAgICAgICAgJGxvY2F0aW9uID0gbmV3IExvY2F0aW9uVXJsKAogICAgICAgICAgY29udmVydFRvSHRtbDVVcmwoaW5pdFVybCwgYmFzZVBhdGgsIGhhc2hQcmVmaXgpLAogICAgICAgICAgcGF0aFByZWZpeCwgYXBwQmFzZVVybCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJGxvY2F0aW9uID0gbmV3IExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsKAogICAgICAgICAgY29udmVydFRvSGFzaGJhbmdVcmwoaW5pdFVybCwgYmFzZVBhdGgsIGhhc2hQcmVmaXgpLAogICAgICAgICAgaGFzaFByZWZpeCwgYXBwQmFzZVVybCwgYmFzZVBhdGguc3Vic3RyKHBhdGhQcmVmaXgubGVuZ3RoICsgMSkpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBhcHBCYXNlVXJsID0KICAgICAgICAgIGNvbXBvc2VQcm90b2NvbEhvc3RQb3J0KGluaXRVcmxQYXJ0cy5wcm90b2NvbCwgaW5pdFVybFBhcnRzLmhvc3QsIGluaXRVcmxQYXJ0cy5wb3J0KSArCiAgICAgICAgICAoaW5pdFVybFBhcnRzLnBhdGggfHwgJycpICsKICAgICAgICAgIChpbml0VXJsUGFydHMuc2VhcmNoID8gKCc/JyArIGluaXRVcmxQYXJ0cy5zZWFyY2gpIDogJycpICsKICAgICAgICAgICcjJyArIGhhc2hQcmVmaXggKyAnLyc7CgogICAgICAkbG9jYXRpb24gPSBuZXcgTG9jYXRpb25IYXNoYmFuZ1VybChpbml0VXJsLCBoYXNoUHJlZml4LCBhcHBCYXNlVXJsKTsKICAgIH0KCiAgICAkcm9vdEVsZW1lbnQuYmluZCgnY2xpY2snLCBmdW5jdGlvbihldmVudCkgewogICAgICAvLyBUT0RPKHZvanRhKTogcmV3cml0ZSBsaW5rIHdoZW4gb3BlbmluZyBpbiBuZXcgdGFiL3dpbmRvdyAoaW4gbGVnYWN5IGJyb3dzZXIpCiAgICAgIC8vIGN1cnJlbnRseSB3ZSBvcGVuIG5pY2UgdXJsIGxpbmsgYW5kIHJlZGlyZWN0IHRoZW4KCiAgICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQud2hpY2ggPT0gMikgcmV0dXJuOwoKICAgICAgdmFyIGVsbSA9IGpxTGl0ZShldmVudC50YXJnZXQpOwoKICAgICAgLy8gdHJhdmVyc2UgdGhlIERPTSB1cCB0byBmaW5kIGZpcnN0IEEgdGFnCiAgICAgIHdoaWxlIChsb3dlcmNhc2UoZWxtWzBdLm5vZGVOYW1lKSAhPT0gJ2EnKSB7CiAgICAgICAgLy8gaWdub3JlIHJld3JpdGluZyBpZiBubyBBIHRhZyAocmVhY2hlZCByb290IGVsZW1lbnQsIG9yIG5vIHBhcmVudCAtIHJlbW92ZWQgZnJvbSBkb2N1bWVudCkKICAgICAgICBpZiAoZWxtWzBdID09PSAkcm9vdEVsZW1lbnRbMF0gfHwgIShlbG0gPSBlbG0ucGFyZW50KCkpWzBdKSByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBhYnNIcmVmID0gZWxtLnByb3AoJ2hyZWYnKSwKICAgICAgICAgIHJld3JpdHRlblVybCA9ICRsb2NhdGlvbi4kJHJld3JpdGVBcHBVcmwoYWJzSHJlZik7CgogICAgICBpZiAoYWJzSHJlZiAmJiAhZWxtLmF0dHIoJ3RhcmdldCcpICYmIHJld3JpdHRlblVybCkgewogICAgICAgIC8vIHVwZGF0ZSBsb2NhdGlvbiBtYW51YWxseQogICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKHJld3JpdHRlblVybCk7CiAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoKTsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIC8vIGhhY2sgdG8gd29yayBhcm91bmQgRkY2IGJ1ZyA2ODQyMDggd2hlbiBzY2VuYXJpbyBydW5uZXIgY2xpY2tzIG9uIGxpbmtzCiAgICAgICAgd2luZG93LmFuZ3VsYXJbJ2ZmLTY4NDIwOC1wcmV2ZW50RGVmYXVsdCddID0gdHJ1ZTsKICAgICAgfQogICAgfSk7CgoKICAgIC8vIHJld3JpdGUgaGFzaGJhbmcgdXJsIDw+IGh0bWw1IHVybAogICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPSBpbml0VXJsKSB7CiAgICAgICRicm93c2VyLnVybCgkbG9jYXRpb24uYWJzVXJsKCksIHRydWUpOwogICAgfQoKICAgIC8vIHVwZGF0ZSAkbG9jYXRpb24gd2hlbiAkYnJvd3NlciB1cmwgY2hhbmdlcwogICAgJGJyb3dzZXIub25VcmxDaGFuZ2UoZnVuY3Rpb24obmV3VXJsKSB7CiAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT0gbmV3VXJsKSB7CiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIG9sZFVybCA9ICRsb2NhdGlvbi5hYnNVcmwoKTsKCiAgICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShuZXdVcmwpOwogICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwpOwogICAgICAgIH0pOwogICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRkaWdlc3QoKTsKICAgICAgfQogICAgfSk7CgogICAgLy8gdXBkYXRlIGJyb3dzZXIKICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMDsKICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uICRsb2NhdGlvbldhdGNoKCkgewogICAgICB2YXIgb2xkVXJsID0gJGJyb3dzZXIudXJsKCk7CiAgICAgIHZhciBjdXJyZW50UmVwbGFjZSA9ICRsb2NhdGlvbi4kJHJlcGxhY2U7CgogICAgICBpZiAoIWNoYW5nZUNvdW50ZXIgfHwgb2xkVXJsICE9ICRsb2NhdGlvbi5hYnNVcmwoKSkgewogICAgICAgIGNoYW5nZUNvdW50ZXIrKzsKICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsICRsb2NhdGlvbi5hYnNVcmwoKSwgb2xkVXJsKS4KICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkKSB7CiAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkYnJvd3Nlci51cmwoJGxvY2F0aW9uLmFic1VybCgpLCBjdXJyZW50UmVwbGFjZSk7CiAgICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgICAkbG9jYXRpb24uJCRyZXBsYWNlID0gZmFsc2U7CgogICAgICByZXR1cm4gY2hhbmdlQ291bnRlcjsKICAgIH0pOwoKICAgIHJldHVybiAkbG9jYXRpb247CgogICAgZnVuY3Rpb24gYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwpIHsKICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwpOwogICAgfQp9XTsKfQoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJGxvZwogKiBAcmVxdWlyZXMgJHdpbmRvdwogKgogKiBAZGVzY3JpcHRpb24KICogU2ltcGxlIHNlcnZpY2UgZm9yIGxvZ2dpbmcuIERlZmF1bHQgaW1wbGVtZW50YXRpb24gd3JpdGVzIHRoZSBtZXNzYWdlCiAqIGludG8gdGhlIGJyb3dzZXIncyBjb25zb2xlIChpZiBwcmVzZW50KS4KICoKICogVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHNlcnZpY2UgaXMgdG8gc2ltcGxpZnkgZGVidWdnaW5nIGFuZCB0cm91Ymxlc2hvb3RpbmcuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgICBmdW5jdGlvbiBMb2dDdHJsKCRzY29wZSwgJGxvZykgewogICAgICAgICAkc2NvcGUuJGxvZyA9ICRsb2c7CiAgICAgICAgICRzY29wZS5tZXNzYWdlID0gJ0hlbGxvIFdvcmxkISc7CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJMb2dDdHJsIj4KICAgICAgICAgPHA+UmVsb2FkIHRoaXMgcGFnZSB3aXRoIG9wZW4gY29uc29sZSwgZW50ZXIgdGV4dCBhbmQgaGl0IHRoZSBsb2cgYnV0dG9uLi4uPC9wPgogICAgICAgICBNZXNzYWdlOgogICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9Im1lc3NhZ2UiLz4KICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iJGxvZy5sb2cobWVzc2FnZSkiPmxvZzwvYnV0dG9uPgogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSIkbG9nLndhcm4obWVzc2FnZSkiPndhcm48L2J1dHRvbj4KICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iJGxvZy5pbmZvKG1lc3NhZ2UpIj5pbmZvPC9idXR0b24+CiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9IiRsb2cuZXJyb3IobWVzc2FnZSkiPmVycm9yPC9idXR0b24+CiAgICAgICA8L2Rpdj4KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgpmdW5jdGlvbiAkTG9nUHJvdmlkZXIoKXsKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbigkd2luZG93KXsKICAgIHJldHVybiB7CiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lIG5nLiRsb2cjbG9nCiAgICAgICAqIEBtZXRob2RPZiBuZy4kbG9nCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBXcml0ZSBhIGxvZyBtZXNzYWdlCiAgICAgICAqLwogICAgICBsb2c6IGNvbnNvbGVMb2coJ2xvZycpLAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgbmcuJGxvZyN3YXJuCiAgICAgICAqIEBtZXRob2RPZiBuZy4kbG9nCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBXcml0ZSBhIHdhcm5pbmcgbWVzc2FnZQogICAgICAgKi8KICAgICAgd2FybjogY29uc29sZUxvZygnd2FybicpLAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgbmcuJGxvZyNpbmZvCiAgICAgICAqIEBtZXRob2RPZiBuZy4kbG9nCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBXcml0ZSBhbiBpbmZvcm1hdGlvbiBtZXNzYWdlCiAgICAgICAqLwogICAgICBpbmZvOiBjb25zb2xlTG9nKCdpbmZvJyksCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSBuZy4kbG9nI2Vycm9yCiAgICAgICAqIEBtZXRob2RPZiBuZy4kbG9nCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBXcml0ZSBhbiBlcnJvciBtZXNzYWdlCiAgICAgICAqLwogICAgICBlcnJvcjogY29uc29sZUxvZygnZXJyb3InKQogICAgfTsKCiAgICBmdW5jdGlvbiBmb3JtYXRFcnJvcihhcmcpIHsKICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7CiAgICAgICAgaWYgKGFyZy5zdGFjaykgewogICAgICAgICAgYXJnID0gKGFyZy5tZXNzYWdlICYmIGFyZy5zdGFjay5pbmRleE9mKGFyZy5tZXNzYWdlKSA9PT0gLTEpCiAgICAgICAgICAgICAgPyAnRXJyb3I6ICcgKyBhcmcubWVzc2FnZSArICdcbicgKyBhcmcuc3RhY2sKICAgICAgICAgICAgICA6IGFyZy5zdGFjazsKICAgICAgICB9IGVsc2UgaWYgKGFyZy5zb3VyY2VVUkwpIHsKICAgICAgICAgIGFyZyA9IGFyZy5tZXNzYWdlICsgJ1xuJyArIGFyZy5zb3VyY2VVUkwgKyAnOicgKyBhcmcubGluZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGFyZzsKICAgIH0KCiAgICBmdW5jdGlvbiBjb25zb2xlTG9nKHR5cGUpIHsKICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sCiAgICAgICAgICBsb2dGbiA9IGNvbnNvbGVbdHlwZV0gfHwgY29uc29sZS5sb2cgfHwgbm9vcDsKCiAgICAgIGlmIChsb2dGbi5hcHBseSkgewogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBhcmdzID0gW107CiAgICAgICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24oYXJnKSB7CiAgICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTsKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIGxvZ0ZuLmFwcGx5KGNvbnNvbGUsIGFyZ3MpOwogICAgICAgIH07CiAgICAgIH0KCiAgICAgIC8vIHdlIGFyZSBJRSB3aGljaCBlaXRoZXIgZG9lc24ndCBoYXZlIHdpbmRvdy5jb25zb2xlID0+IHRoaXMgaXMgbm9vcCBhbmQgd2UgZG8gbm90aGluZywKICAgICAgLy8gb3Igd2UgYXJlIElFIHdoZXJlIGNvbnNvbGUubG9nIGRvZXNuJ3QgaGF2ZSBhcHBseSBzbyB3ZSBsb2cgYXQgbGVhc3QgZmlyc3QgMiBhcmdzCiAgICAgIHJldHVybiBmdW5jdGlvbihhcmcxLCBhcmcyKSB7CiAgICAgICAgbG9nRm4oYXJnMSwgYXJnMik7CiAgICAgIH0KICAgIH0KICB9XTsKfQoKdmFyIE9QRVJBVE9SUyA9IHsKICAgICdudWxsJzpmdW5jdGlvbigpe3JldHVybiBudWxsO30sCiAgICAndHJ1ZSc6ZnVuY3Rpb24oKXtyZXR1cm4gdHJ1ZTt9LAogICAgJ2ZhbHNlJzpmdW5jdGlvbigpe3JldHVybiBmYWxzZTt9LAogICAgdW5kZWZpbmVkOm5vb3AsCiAgICAnKyc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpewogICAgICBhPWEoc2VsZiwgbG9jYWxzKTsgYj1iKHNlbGYsIGxvY2Fscyk7CiAgICAgIGlmIChpc0RlZmluZWQoYSkpIHsKICAgICAgICBpZiAoaXNEZWZpbmVkKGIpKSB7CiAgICAgICAgICByZXR1cm4gYSArIGI7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhOwogICAgICB9CiAgICAgIHJldHVybiBpc0RlZmluZWQoYik/Yjp1bmRlZmluZWQ7fSwKICAgICctJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7YT1hKHNlbGYsIGxvY2Fscyk7IGI9YihzZWxmLCBsb2NhbHMpOyByZXR1cm4gKGlzRGVmaW5lZChhKT9hOjApLShpc0RlZmluZWQoYik/YjowKTt9LAogICAgJyonOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpKmIoc2VsZiwgbG9jYWxzKTt9LAogICAgJy8nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpL2Ioc2VsZiwgbG9jYWxzKTt9LAogICAgJyUnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpJWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJ14nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpXmIoc2VsZiwgbG9jYWxzKTt9LAogICAgJz0nOm5vb3AsCiAgICAnPT0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpPT1iKHNlbGYsIGxvY2Fscyk7fSwKICAgICchPSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2FscykhPWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJzwnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpPGIoc2VsZiwgbG9jYWxzKTt9LAogICAgJz4nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpPmIoc2VsZiwgbG9jYWxzKTt9LAogICAgJzw9JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKTw9YihzZWxmLCBsb2NhbHMpO30sCiAgICAnPj0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpPj1iKHNlbGYsIGxvY2Fscyk7fSwKICAgICcmJic6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2FscykmJmIoc2VsZiwgbG9jYWxzKTt9LAogICAgJ3x8JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKXx8YihzZWxmLCBsb2NhbHMpO30sCiAgICAnJic6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2FscykmYihzZWxmLCBsb2NhbHMpO30sCi8vICAgICd8JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGF8Yjt9LAogICAgJ3wnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYihzZWxmLCBsb2NhbHMpKHNlbGYsIGxvY2FscywgYShzZWxmLCBsb2NhbHMpKTt9LAogICAgJyEnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSl7cmV0dXJuICFhKHNlbGYsIGxvY2Fscyk7fQp9Owp2YXIgRVNDQVBFID0geyJuIjoiXG4iLCAiZiI6IlxmIiwgInIiOiJcciIsICJ0IjoiXHQiLCAidiI6Ilx2IiwgIiciOiInIiwgJyInOiciJ307CgpmdW5jdGlvbiBsZXgodGV4dCwgY3NwKXsKICB2YXIgdG9rZW5zID0gW10sCiAgICAgIHRva2VuLAogICAgICBpbmRleCA9IDAsCiAgICAgIGpzb24gPSBbXSwKICAgICAgY2gsCiAgICAgIGxhc3RDaCA9ICc6JzsgLy8gY2FuIHN0YXJ0IHJlZ2V4cAoKICB3aGlsZSAoaW5kZXggPCB0ZXh0Lmxlbmd0aCkgewogICAgY2ggPSB0ZXh0LmNoYXJBdChpbmRleCk7CiAgICBpZiAoaXMoJyJcJycpKSB7CiAgICAgIHJlYWRTdHJpbmcoY2gpOwogICAgfSBlbHNlIGlmIChpc051bWJlcihjaCkgfHwgaXMoJy4nKSAmJiBpc051bWJlcihwZWVrKCkpKSB7CiAgICAgIHJlYWROdW1iZXIoKTsKICAgIH0gZWxzZSBpZiAoaXNJZGVudChjaCkpIHsKICAgICAgcmVhZElkZW50KCk7CiAgICAgIC8vIGlkZW50aWZpZXJzIGNhbiBvbmx5IGJlIGlmIHRoZSBwcmVjZWRpbmcgY2hhciB3YXMgYSB7IG9yICwKICAgICAgaWYgKHdhcygneywnKSAmJiBqc29uWzBdPT0neycgJiYKICAgICAgICAgKHRva2VuPXRva2Vuc1t0b2tlbnMubGVuZ3RoLTFdKSkgewogICAgICAgIHRva2VuLmpzb24gPSB0b2tlbi50ZXh0LmluZGV4T2YoJy4nKSA9PSAtMTsKICAgICAgfQogICAgfSBlbHNlIGlmIChpcygnKCl7fVtdLiw7OicpKSB7CiAgICAgIHRva2Vucy5wdXNoKHsKICAgICAgICBpbmRleDppbmRleCwKICAgICAgICB0ZXh0OmNoLAogICAgICAgIGpzb246KHdhcygnOlssJykgJiYgaXMoJ3tbJykpIHx8IGlzKCd9XTosJykKICAgICAgfSk7CiAgICAgIGlmIChpcygne1snKSkganNvbi51bnNoaWZ0KGNoKTsKICAgICAgaWYgKGlzKCd9XScpKSBqc29uLnNoaWZ0KCk7CiAgICAgIGluZGV4Kys7CiAgICB9IGVsc2UgaWYgKGlzV2hpdGVzcGFjZShjaCkpIHsKICAgICAgaW5kZXgrKzsKICAgICAgY29udGludWU7CiAgICB9IGVsc2UgewogICAgICB2YXIgY2gyID0gY2ggKyBwZWVrKCksCiAgICAgICAgICBmbiA9IE9QRVJBVE9SU1tjaF0sCiAgICAgICAgICBmbjIgPSBPUEVSQVRPUlNbY2gyXTsKICAgICAgaWYgKGZuMikgewogICAgICAgIHRva2Vucy5wdXNoKHtpbmRleDppbmRleCwgdGV4dDpjaDIsIGZuOmZuMn0pOwogICAgICAgIGluZGV4ICs9IDI7CiAgICAgIH0gZWxzZSBpZiAoZm4pIHsKICAgICAgICB0b2tlbnMucHVzaCh7aW5kZXg6aW5kZXgsIHRleHQ6Y2gsIGZuOmZuLCBqc29uOiB3YXMoJ1ssOicpICYmIGlzKCcrLScpfSk7CiAgICAgICAgaW5kZXggKz0gMTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvd0Vycm9yKCJVbmV4cGVjdGVkIG5leHQgY2hhcmFjdGVyICIsIGluZGV4LCBpbmRleCsxKTsKICAgICAgfQogICAgfQogICAgbGFzdENoID0gY2g7CiAgfQogIHJldHVybiB0b2tlbnM7CgogIGZ1bmN0aW9uIGlzKGNoYXJzKSB7CiAgICByZXR1cm4gY2hhcnMuaW5kZXhPZihjaCkgIT0gLTE7CiAgfQoKICBmdW5jdGlvbiB3YXMoY2hhcnMpIHsKICAgIHJldHVybiBjaGFycy5pbmRleE9mKGxhc3RDaCkgIT0gLTE7CiAgfQoKICBmdW5jdGlvbiBwZWVrKCkgewogICAgcmV0dXJuIGluZGV4ICsgMSA8IHRleHQubGVuZ3RoID8gdGV4dC5jaGFyQXQoaW5kZXggKyAxKSA6IGZhbHNlOwogIH0KICBmdW5jdGlvbiBpc051bWJlcihjaCkgewogICAgcmV0dXJuICcwJyA8PSBjaCAmJiBjaCA8PSAnOSc7CiAgfQogIGZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjaCkgewogICAgcmV0dXJuIGNoID09ICcgJyB8fCBjaCA9PSAnXHInIHx8IGNoID09ICdcdCcgfHwKICAgICAgICAgICBjaCA9PSAnXG4nIHx8IGNoID09ICdcdicgfHwgY2ggPT0gJ1x1MDBBMCc7IC8vIElFIHRyZWF0cyBub24tYnJlYWtpbmcgc3BhY2UgYXMgXHUwMEEwCiAgfQogIGZ1bmN0aW9uIGlzSWRlbnQoY2gpIHsKICAgIHJldHVybiAnYScgPD0gY2ggJiYgY2ggPD0gJ3onIHx8CiAgICAgICAgICAgJ0EnIDw9IGNoICYmIGNoIDw9ICdaJyB8fAogICAgICAgICAgICdfJyA9PSBjaCB8fCBjaCA9PSAnJCc7CiAgfQogIGZ1bmN0aW9uIGlzRXhwT3BlcmF0b3IoY2gpIHsKICAgIHJldHVybiBjaCA9PSAnLScgfHwgY2ggPT0gJysnIHx8IGlzTnVtYmVyKGNoKTsKICB9CgogIGZ1bmN0aW9uIHRocm93RXJyb3IoZXJyb3IsIHN0YXJ0LCBlbmQpIHsKICAgIGVuZCA9IGVuZCB8fCBpbmRleDsKICAgIHRocm93IEVycm9yKCJMZXhlciBFcnJvcjogIiArIGVycm9yICsgIiBhdCBjb2x1bW4iICsKICAgICAgICAoaXNEZWZpbmVkKHN0YXJ0KQogICAgICAgICAgICA/ICJzICIgKyBzdGFydCArICAiLSIgKyBpbmRleCArICIgWyIgKyB0ZXh0LnN1YnN0cmluZyhzdGFydCwgZW5kKSArICJdIgogICAgICAgICAgICA6ICIgIiArIGVuZCkgKwogICAgICAgICIgaW4gZXhwcmVzc2lvbiBbIiArIHRleHQgKyAiXS4iKTsKICB9CgogIGZ1bmN0aW9uIHJlYWROdW1iZXIoKSB7CiAgICB2YXIgbnVtYmVyID0gIiI7CiAgICB2YXIgc3RhcnQgPSBpbmRleDsKICAgIHdoaWxlIChpbmRleCA8IHRleHQubGVuZ3RoKSB7CiAgICAgIHZhciBjaCA9IGxvd2VyY2FzZSh0ZXh0LmNoYXJBdChpbmRleCkpOwogICAgICBpZiAoY2ggPT0gJy4nIHx8IGlzTnVtYmVyKGNoKSkgewogICAgICAgIG51bWJlciArPSBjaDsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgcGVla0NoID0gcGVlaygpOwogICAgICAgIGlmIChjaCA9PSAnZScgJiYgaXNFeHBPcGVyYXRvcihwZWVrQ2gpKSB7CiAgICAgICAgICBudW1iZXIgKz0gY2g7CiAgICAgICAgfSBlbHNlIGlmIChpc0V4cE9wZXJhdG9yKGNoKSAmJgogICAgICAgICAgICBwZWVrQ2ggJiYgaXNOdW1iZXIocGVla0NoKSAmJgogICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PSAnZScpIHsKICAgICAgICAgIG51bWJlciArPSBjaDsKICAgICAgICB9IGVsc2UgaWYgKGlzRXhwT3BlcmF0b3IoY2gpICYmCiAgICAgICAgICAgICghcGVla0NoIHx8ICFpc051bWJlcihwZWVrQ2gpKSAmJgogICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PSAnZScpIHsKICAgICAgICAgIHRocm93RXJyb3IoJ0ludmFsaWQgZXhwb25lbnQnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIGluZGV4Kys7CiAgICB9CiAgICBudW1iZXIgPSAxICogbnVtYmVyOwogICAgdG9rZW5zLnB1c2goe2luZGV4OnN0YXJ0LCB0ZXh0Om51bWJlciwganNvbjp0cnVlLAogICAgICBmbjpmdW5jdGlvbigpIHtyZXR1cm4gbnVtYmVyO319KTsKICB9CiAgZnVuY3Rpb24gcmVhZElkZW50KCkgewogICAgdmFyIGlkZW50ID0gIiIsCiAgICAgICAgc3RhcnQgPSBpbmRleCwKICAgICAgICBsYXN0RG90LCBwZWVrSW5kZXgsIG1ldGhvZE5hbWU7CgogICAgd2hpbGUgKGluZGV4IDwgdGV4dC5sZW5ndGgpIHsKICAgICAgdmFyIGNoID0gdGV4dC5jaGFyQXQoaW5kZXgpOwogICAgICBpZiAoY2ggPT0gJy4nIHx8IGlzSWRlbnQoY2gpIHx8IGlzTnVtYmVyKGNoKSkgewogICAgICAgIGlmIChjaCA9PSAnLicpIGxhc3REb3QgPSBpbmRleDsKICAgICAgICBpZGVudCArPSBjaDsKICAgICAgfSBlbHNlIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpbmRleCsrOwogICAgfQoKICAgIC8vY2hlY2sgaWYgdGhpcyBpcyBub3QgYSBtZXRob2QgaW52b2NhdGlvbiBhbmQgaWYgaXQgaXMgYmFjayBvdXQgdG8gbGFzdCBkb3QKICAgIGlmIChsYXN0RG90KSB7CiAgICAgIHBlZWtJbmRleCA9IGluZGV4OwogICAgICB3aGlsZShwZWVrSW5kZXggPCB0ZXh0Lmxlbmd0aCkgewogICAgICAgIHZhciBjaCA9IHRleHQuY2hhckF0KHBlZWtJbmRleCk7CiAgICAgICAgaWYgKGNoID09ICcoJykgewogICAgICAgICAgbWV0aG9kTmFtZSA9IGlkZW50LnN1YnN0cihsYXN0RG90IC0gc3RhcnQgKyAxKTsKICAgICAgICAgIGlkZW50ID0gaWRlbnQuc3Vic3RyKDAsIGxhc3REb3QgLSBzdGFydCk7CiAgICAgICAgICBpbmRleCA9IHBlZWtJbmRleDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBpZihpc1doaXRlc3BhY2UoY2gpKSB7CiAgICAgICAgICBwZWVrSW5kZXgrKzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9CgoKICAgIHZhciB0b2tlbiA9IHsKICAgICAgaW5kZXg6c3RhcnQsCiAgICAgIHRleHQ6aWRlbnQKICAgIH07CgogICAgaWYgKE9QRVJBVE9SUy5oYXNPd25Qcm9wZXJ0eShpZGVudCkpIHsKICAgICAgdG9rZW4uZm4gPSB0b2tlbi5qc29uID0gT1BFUkFUT1JTW2lkZW50XTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBnZXR0ZXIgPSBnZXR0ZXJGbihpZGVudCwgY3NwKTsKICAgICAgdG9rZW4uZm4gPSBleHRlbmQoZnVuY3Rpb24oc2VsZiwgbG9jYWxzKSB7CiAgICAgICAgcmV0dXJuIChnZXR0ZXIoc2VsZiwgbG9jYWxzKSk7CiAgICAgIH0sIHsKICAgICAgICBhc3NpZ246IGZ1bmN0aW9uKHNlbGYsIHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gc2V0dGVyKHNlbGYsIGlkZW50LCB2YWx1ZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICB0b2tlbnMucHVzaCh0b2tlbik7CgogICAgaWYgKG1ldGhvZE5hbWUpIHsKICAgICAgdG9rZW5zLnB1c2goewogICAgICAgIGluZGV4Omxhc3REb3QsCiAgICAgICAgdGV4dDogJy4nLAogICAgICAgIGpzb246IGZhbHNlCiAgICAgIH0pOwogICAgICB0b2tlbnMucHVzaCh7CiAgICAgICAgaW5kZXg6IGxhc3REb3QgKyAxLAogICAgICAgIHRleHQ6IG1ldGhvZE5hbWUsCiAgICAgICAganNvbjogZmFsc2UKICAgICAgfSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiByZWFkU3RyaW5nKHF1b3RlKSB7CiAgICB2YXIgc3RhcnQgPSBpbmRleDsKICAgIGluZGV4Kys7CiAgICB2YXIgc3RyaW5nID0gIiI7CiAgICB2YXIgcmF3U3RyaW5nID0gcXVvdGU7CiAgICB2YXIgZXNjYXBlID0gZmFsc2U7CiAgICB3aGlsZSAoaW5kZXggPCB0ZXh0Lmxlbmd0aCkgewogICAgICB2YXIgY2ggPSB0ZXh0LmNoYXJBdChpbmRleCk7CiAgICAgIHJhd1N0cmluZyArPSBjaDsKICAgICAgaWYgKGVzY2FwZSkgewogICAgICAgIGlmIChjaCA9PSAndScpIHsKICAgICAgICAgIHZhciBoZXggPSB0ZXh0LnN1YnN0cmluZyhpbmRleCArIDEsIGluZGV4ICsgNSk7CiAgICAgICAgICBpZiAoIWhleC5tYXRjaCgvW1xkYS1mXXs0fS9pKSkKICAgICAgICAgICAgdGhyb3dFcnJvciggIkludmFsaWQgdW5pY29kZSBlc2NhcGUgW1xcdSIgKyBoZXggKyAiXSIpOwogICAgICAgICAgaW5kZXggKz0gNDsKICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwgMTYpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHJlcCA9IEVTQ0FQRVtjaF07CiAgICAgICAgICBpZiAocmVwKSB7CiAgICAgICAgICAgIHN0cmluZyArPSByZXA7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdHJpbmcgKz0gY2g7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVzY2FwZSA9IGZhbHNlOwogICAgICB9IGVsc2UgaWYgKGNoID09ICdcXCcpIHsKICAgICAgICBlc2NhcGUgPSB0cnVlOwogICAgICB9IGVsc2UgaWYgKGNoID09IHF1b3RlKSB7CiAgICAgICAgaW5kZXgrKzsKICAgICAgICB0b2tlbnMucHVzaCh7CiAgICAgICAgICBpbmRleDpzdGFydCwKICAgICAgICAgIHRleHQ6cmF3U3RyaW5nLAogICAgICAgICAgc3RyaW5nOnN0cmluZywKICAgICAgICAgIGpzb246dHJ1ZSwKICAgICAgICAgIGZuOmZ1bmN0aW9uKCkgeyByZXR1cm4gc3RyaW5nOyB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9IGVsc2UgewogICAgICAgIHN0cmluZyArPSBjaDsKICAgICAgfQogICAgICBpbmRleCsrOwogICAgfQogICAgdGhyb3dFcnJvcigiVW50ZXJtaW5hdGVkIHF1b3RlIiwgc3RhcnQpOwogIH0KfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCmZ1bmN0aW9uIHBhcnNlcih0ZXh0LCBqc29uLCAkZmlsdGVyLCBjc3ApewogIHZhciBaRVJPID0gdmFsdWVGbigwKSwKICAgICAgdmFsdWUsCiAgICAgIHRva2VucyA9IGxleCh0ZXh0LCBjc3ApLAogICAgICBhc3NpZ25tZW50ID0gX2Fzc2lnbm1lbnQsCiAgICAgIGZ1bmN0aW9uQ2FsbCA9IF9mdW5jdGlvbkNhbGwsCiAgICAgIGZpZWxkQWNjZXNzID0gX2ZpZWxkQWNjZXNzLAogICAgICBvYmplY3RJbmRleCA9IF9vYmplY3RJbmRleCwKICAgICAgZmlsdGVyQ2hhaW4gPSBfZmlsdGVyQ2hhaW47CgogIGlmKGpzb24pewogICAgLy8gVGhlIGV4dHJhIGxldmVsIG9mIGFsaWFzaW5nIGlzIGhlcmUsIGp1c3QgaW4gY2FzZSB0aGUgbGV4ZXIgbWlzc2VzIHNvbWV0aGluZywgc28gdGhhdAogICAgLy8gd2UgcHJldmVudCBhbnkgYWNjaWRlbnRhbCBleGVjdXRpb24gaW4gSlNPTi4KICAgIGFzc2lnbm1lbnQgPSBsb2dpY2FsT1I7CiAgICBmdW5jdGlvbkNhbGwgPQogICAgICBmaWVsZEFjY2VzcyA9CiAgICAgIG9iamVjdEluZGV4ID0KICAgICAgZmlsdGVyQ2hhaW4gPQogICAgICAgIGZ1bmN0aW9uKCkgeyB0aHJvd0Vycm9yKCJpcyBub3QgdmFsaWQganNvbiIsIHt0ZXh0OnRleHQsIGluZGV4OjB9KTsgfTsKICAgIHZhbHVlID0gcHJpbWFyeSgpOwogIH0gZWxzZSB7CiAgICB2YWx1ZSA9IHN0YXRlbWVudHMoKTsKICB9CiAgaWYgKHRva2Vucy5sZW5ndGggIT09IDApIHsKICAgIHRocm93RXJyb3IoImlzIGFuIHVuZXhwZWN0ZWQgdG9rZW4iLCB0b2tlbnNbMF0pOwogIH0KICByZXR1cm4gdmFsdWU7CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgZnVuY3Rpb24gdGhyb3dFcnJvcihtc2csIHRva2VuKSB7CiAgICB0aHJvdyBFcnJvcigiU3ludGF4IEVycm9yOiBUb2tlbiAnIiArIHRva2VuLnRleHQgKwogICAgICAiJyAiICsgbXNnICsgIiBhdCBjb2x1bW4gIiArCiAgICAgICh0b2tlbi5pbmRleCArIDEpICsgIiBvZiB0aGUgZXhwcmVzc2lvbiBbIiArCiAgICAgIHRleHQgKyAiXSBzdGFydGluZyBhdCBbIiArIHRleHQuc3Vic3RyaW5nKHRva2VuLmluZGV4KSArICJdLiIpOwogIH0KCiAgZnVuY3Rpb24gcGVla1Rva2VuKCkgewogICAgaWYgKHRva2Vucy5sZW5ndGggPT09IDApCiAgICAgIHRocm93IEVycm9yKCJVbmV4cGVjdGVkIGVuZCBvZiBleHByZXNzaW9uOiAiICsgdGV4dCk7CiAgICByZXR1cm4gdG9rZW5zWzBdOwogIH0KCiAgZnVuY3Rpb24gcGVlayhlMSwgZTIsIGUzLCBlNCkgewogICAgaWYgKHRva2Vucy5sZW5ndGggPiAwKSB7CiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1swXTsKICAgICAgdmFyIHQgPSB0b2tlbi50ZXh0OwogICAgICBpZiAodD09ZTEgfHwgdD09ZTIgfHwgdD09ZTMgfHwgdD09ZTQgfHwKICAgICAgICAgICghZTEgJiYgIWUyICYmICFlMyAmJiAhZTQpKSB7CiAgICAgICAgcmV0dXJuIHRva2VuOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBmdW5jdGlvbiBleHBlY3QoZTEsIGUyLCBlMywgZTQpewogICAgdmFyIHRva2VuID0gcGVlayhlMSwgZTIsIGUzLCBlNCk7CiAgICBpZiAodG9rZW4pIHsKICAgICAgaWYgKGpzb24gJiYgIXRva2VuLmpzb24pIHsKICAgICAgICB0aHJvd0Vycm9yKCJpcyBub3QgdmFsaWQganNvbiIsIHRva2VuKTsKICAgICAgfQogICAgICB0b2tlbnMuc2hpZnQoKTsKICAgICAgcmV0dXJuIHRva2VuOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gY29uc3VtZShlMSl7CiAgICBpZiAoIWV4cGVjdChlMSkpIHsKICAgICAgdGhyb3dFcnJvcigiaXMgdW5leHBlY3RlZCwgZXhwZWN0aW5nIFsiICsgZTEgKyAiXSIsIHBlZWsoKSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiB1bmFyeUZuKGZuLCByaWdodCkgewogICAgcmV0dXJuIGZ1bmN0aW9uKHNlbGYsIGxvY2FscykgewogICAgICByZXR1cm4gZm4oc2VsZiwgbG9jYWxzLCByaWdodCk7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gYmluYXJ5Rm4obGVmdCwgZm4sIHJpZ2h0KSB7CiAgICByZXR1cm4gZnVuY3Rpb24oc2VsZiwgbG9jYWxzKSB7CiAgICAgIHJldHVybiBmbihzZWxmLCBsb2NhbHMsIGxlZnQsIHJpZ2h0KTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBzdGF0ZW1lbnRzKCkgewogICAgdmFyIHN0YXRlbWVudHMgPSBbXTsKICAgIHdoaWxlKHRydWUpIHsKICAgICAgaWYgKHRva2Vucy5sZW5ndGggPiAwICYmICFwZWVrKCd9JywgJyknLCAnOycsICddJykpCiAgICAgICAgc3RhdGVtZW50cy5wdXNoKGZpbHRlckNoYWluKCkpOwogICAgICBpZiAoIWV4cGVjdCgnOycpKSB7CiAgICAgICAgLy8gb3B0aW1pemUgZm9yIHRoZSBjb21tb24gY2FzZSB3aGVyZSB0aGVyZSBpcyBvbmx5IG9uZSBzdGF0ZW1lbnQuCiAgICAgICAgLy8gVE9ETyhzaXplKTogbWF5YmUgd2Ugc2hvdWxkIG5vdCBzdXBwb3J0IG11bHRpcGxlIHN0YXRlbWVudHM/CiAgICAgICAgcmV0dXJuIHN0YXRlbWVudHMubGVuZ3RoID09IDEKICAgICAgICAgID8gc3RhdGVtZW50c1swXQogICAgICAgICAgOiBmdW5jdGlvbihzZWxmLCBsb2NhbHMpewogICAgICAgICAgICB2YXIgdmFsdWU7CiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHN0YXRlbWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICB2YXIgc3RhdGVtZW50ID0gc3RhdGVtZW50c1tpXTsKICAgICAgICAgICAgICBpZiAoc3RhdGVtZW50KQogICAgICAgICAgICAgICAgdmFsdWUgPSBzdGF0ZW1lbnQoc2VsZiwgbG9jYWxzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICB9OwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBfZmlsdGVyQ2hhaW4oKSB7CiAgICB2YXIgbGVmdCA9IGV4cHJlc3Npb24oKTsKICAgIHZhciB0b2tlbjsKICAgIHdoaWxlKHRydWUpIHsKICAgICAgaWYgKCh0b2tlbiA9IGV4cGVjdCgnfCcpKSkgewogICAgICAgIGxlZnQgPSBiaW5hcnlGbihsZWZ0LCB0b2tlbi5mbiwgZmlsdGVyKCkpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBsZWZ0OwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBmaWx0ZXIoKSB7CiAgICB2YXIgdG9rZW4gPSBleHBlY3QoKTsKICAgIHZhciBmbiA9ICRmaWx0ZXIodG9rZW4udGV4dCk7CiAgICB2YXIgYXJnc0ZuID0gW107CiAgICB3aGlsZSh0cnVlKSB7CiAgICAgIGlmICgodG9rZW4gPSBleHBlY3QoJzonKSkpIHsKICAgICAgICBhcmdzRm4ucHVzaChleHByZXNzaW9uKCkpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBmbkludm9rZSA9IGZ1bmN0aW9uKHNlbGYsIGxvY2FscywgaW5wdXQpewogICAgICAgICAgdmFyIGFyZ3MgPSBbaW5wdXRdOwogICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgYXJnc0ZuLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFyZ3MucHVzaChhcmdzRm5baV0oc2VsZiwgbG9jYWxzKSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gZm5JbnZva2U7CiAgICAgICAgfTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gZXhwcmVzc2lvbigpIHsKICAgIHJldHVybiBhc3NpZ25tZW50KCk7CiAgfQoKICBmdW5jdGlvbiBfYXNzaWdubWVudCgpIHsKICAgIHZhciBsZWZ0ID0gbG9naWNhbE9SKCk7CiAgICB2YXIgcmlnaHQ7CiAgICB2YXIgdG9rZW47CiAgICBpZiAoKHRva2VuID0gZXhwZWN0KCc9JykpKSB7CiAgICAgIGlmICghbGVmdC5hc3NpZ24pIHsKICAgICAgICB0aHJvd0Vycm9yKCJpbXBsaWVzIGFzc2lnbm1lbnQgYnV0IFsiICsKICAgICAgICAgIHRleHQuc3Vic3RyaW5nKDAsIHRva2VuLmluZGV4KSArICJdIGNhbiBub3QgYmUgYXNzaWduZWQgdG8iLCB0b2tlbik7CiAgICAgIH0KICAgICAgcmlnaHQgPSBsb2dpY2FsT1IoKTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNlbGYsIGxvY2Fscyl7CiAgICAgICAgcmV0dXJuIGxlZnQuYXNzaWduKHNlbGYsIHJpZ2h0KHNlbGYsIGxvY2FscyksIGxvY2Fscyk7CiAgICAgIH07CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbGVmdDsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGxvZ2ljYWxPUigpIHsKICAgIHZhciBsZWZ0ID0gbG9naWNhbEFORCgpOwogICAgdmFyIHRva2VuOwogICAgd2hpbGUodHJ1ZSkgewogICAgICBpZiAoKHRva2VuID0gZXhwZWN0KCd8fCcpKSkgewogICAgICAgIGxlZnQgPSBiaW5hcnlGbihsZWZ0LCB0b2tlbi5mbiwgbG9naWNhbEFORCgpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbGVmdDsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gbG9naWNhbEFORCgpIHsKICAgIHZhciBsZWZ0ID0gZXF1YWxpdHkoKTsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSBleHBlY3QoJyYmJykpKSB7CiAgICAgIGxlZnQgPSBiaW5hcnlGbihsZWZ0LCB0b2tlbi5mbiwgbG9naWNhbEFORCgpKTsKICAgIH0KICAgIHJldHVybiBsZWZ0OwogIH0KCiAgZnVuY3Rpb24gZXF1YWxpdHkoKSB7CiAgICB2YXIgbGVmdCA9IHJlbGF0aW9uYWwoKTsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSBleHBlY3QoJz09JywnIT0nKSkpIHsKICAgICAgbGVmdCA9IGJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCBlcXVhbGl0eSgpKTsKICAgIH0KICAgIHJldHVybiBsZWZ0OwogIH0KCiAgZnVuY3Rpb24gcmVsYXRpb25hbCgpIHsKICAgIHZhciBsZWZ0ID0gYWRkaXRpdmUoKTsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSBleHBlY3QoJzwnLCAnPicsICc8PScsICc+PScpKSkgewogICAgICBsZWZ0ID0gYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHJlbGF0aW9uYWwoKSk7CiAgICB9CiAgICByZXR1cm4gbGVmdDsKICB9CgogIGZ1bmN0aW9uIGFkZGl0aXZlKCkgewogICAgdmFyIGxlZnQgPSBtdWx0aXBsaWNhdGl2ZSgpOwogICAgdmFyIHRva2VuOwogICAgd2hpbGUgKCh0b2tlbiA9IGV4cGVjdCgnKycsJy0nKSkpIHsKICAgICAgbGVmdCA9IGJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCBtdWx0aXBsaWNhdGl2ZSgpKTsKICAgIH0KICAgIHJldHVybiBsZWZ0OwogIH0KCiAgZnVuY3Rpb24gbXVsdGlwbGljYXRpdmUoKSB7CiAgICB2YXIgbGVmdCA9IHVuYXJ5KCk7CiAgICB2YXIgdG9rZW47CiAgICB3aGlsZSAoKHRva2VuID0gZXhwZWN0KCcqJywnLycsJyUnKSkpIHsKICAgICAgbGVmdCA9IGJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB1bmFyeSgpKTsKICAgIH0KICAgIHJldHVybiBsZWZ0OwogIH0KCiAgZnVuY3Rpb24gdW5hcnkoKSB7CiAgICB2YXIgdG9rZW47CiAgICBpZiAoZXhwZWN0KCcrJykpIHsKICAgICAgcmV0dXJuIHByaW1hcnkoKTsKICAgIH0gZWxzZSBpZiAoKHRva2VuID0gZXhwZWN0KCctJykpKSB7CiAgICAgIHJldHVybiBiaW5hcnlGbihaRVJPLCB0b2tlbi5mbiwgdW5hcnkoKSk7CiAgICB9IGVsc2UgaWYgKCh0b2tlbiA9IGV4cGVjdCgnIScpKSkgewogICAgICByZXR1cm4gdW5hcnlGbih0b2tlbi5mbiwgdW5hcnkoKSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gcHJpbWFyeSgpOwogICAgfQogIH0KCgogIGZ1bmN0aW9uIHByaW1hcnkoKSB7CiAgICB2YXIgcHJpbWFyeTsKICAgIGlmIChleHBlY3QoJygnKSkgewogICAgICBwcmltYXJ5ID0gZmlsdGVyQ2hhaW4oKTsKICAgICAgY29uc3VtZSgnKScpOwogICAgfSBlbHNlIGlmIChleHBlY3QoJ1snKSkgewogICAgICBwcmltYXJ5ID0gYXJyYXlEZWNsYXJhdGlvbigpOwogICAgfSBlbHNlIGlmIChleHBlY3QoJ3snKSkgewogICAgICBwcmltYXJ5ID0gb2JqZWN0KCk7CiAgICB9IGVsc2UgewogICAgICB2YXIgdG9rZW4gPSBleHBlY3QoKTsKICAgICAgcHJpbWFyeSA9IHRva2VuLmZuOwogICAgICBpZiAoIXByaW1hcnkpIHsKICAgICAgICB0aHJvd0Vycm9yKCJub3QgYSBwcmltYXJ5IGV4cHJlc3Npb24iLCB0b2tlbik7CiAgICAgIH0KICAgIH0KCiAgICB2YXIgbmV4dCwgY29udGV4dDsKICAgIHdoaWxlICgobmV4dCA9IGV4cGVjdCgnKCcsICdbJywgJy4nKSkpIHsKICAgICAgaWYgKG5leHQudGV4dCA9PT0gJygnKSB7CiAgICAgICAgcHJpbWFyeSA9IGZ1bmN0aW9uQ2FsbChwcmltYXJ5LCBjb250ZXh0KTsKICAgICAgICBjb250ZXh0ID0gbnVsbDsKICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICdbJykgewogICAgICAgIGNvbnRleHQgPSBwcmltYXJ5OwogICAgICAgIHByaW1hcnkgPSBvYmplY3RJbmRleChwcmltYXJ5KTsKICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICcuJykgewogICAgICAgIGNvbnRleHQgPSBwcmltYXJ5OwogICAgICAgIHByaW1hcnkgPSBmaWVsZEFjY2VzcyhwcmltYXJ5KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvd0Vycm9yKCJJTVBPU1NJQkxFIik7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBwcmltYXJ5OwogIH0KCiAgZnVuY3Rpb24gX2ZpZWxkQWNjZXNzKG9iamVjdCkgewogICAgdmFyIGZpZWxkID0gZXhwZWN0KCkudGV4dDsKICAgIHZhciBnZXR0ZXIgPSBnZXR0ZXJGbihmaWVsZCwgY3NwKTsKICAgIHJldHVybiBleHRlbmQoCiAgICAgICAgZnVuY3Rpb24oc2VsZiwgbG9jYWxzKSB7CiAgICAgICAgICByZXR1cm4gZ2V0dGVyKG9iamVjdChzZWxmLCBsb2NhbHMpLCBsb2NhbHMpOwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgYXNzaWduOmZ1bmN0aW9uKHNlbGYsIHZhbHVlLCBsb2NhbHMpIHsKICAgICAgICAgICAgcmV0dXJuIHNldHRlcihvYmplY3Qoc2VsZiwgbG9jYWxzKSwgZmllbGQsIHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICApOwogIH0KCiAgZnVuY3Rpb24gX29iamVjdEluZGV4KG9iaikgewogICAgdmFyIGluZGV4Rm4gPSBleHByZXNzaW9uKCk7CiAgICBjb25zdW1lKCddJyk7CiAgICByZXR1cm4gZXh0ZW5kKAogICAgICBmdW5jdGlvbihzZWxmLCBsb2NhbHMpewogICAgICAgIHZhciBvID0gb2JqKHNlbGYsIGxvY2FscyksCiAgICAgICAgICAgIGkgPSBpbmRleEZuKHNlbGYsIGxvY2FscyksCiAgICAgICAgICAgIHYsIHA7CgogICAgICAgIGlmICghbykgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICB2ID0gb1tpXTsKICAgICAgICBpZiAodiAmJiB2LnRoZW4pIHsKICAgICAgICAgIHAgPSB2OwogICAgICAgICAgaWYgKCEoJyQkdicgaW4gdikpIHsKICAgICAgICAgICAgcC4kJHYgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIHAudGhlbihmdW5jdGlvbih2YWwpIHsgcC4kJHYgPSB2YWw7IH0pOwogICAgICAgICAgfQogICAgICAgICAgdiA9IHYuJCR2OwogICAgICAgIH0KICAgICAgICByZXR1cm4gdjsKICAgICAgfSwgewogICAgICAgIGFzc2lnbjpmdW5jdGlvbihzZWxmLCB2YWx1ZSwgbG9jYWxzKXsKICAgICAgICAgIHJldHVybiBvYmooc2VsZiwgbG9jYWxzKVtpbmRleEZuKHNlbGYsIGxvY2FscyldID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9KTsKICB9CgogIGZ1bmN0aW9uIF9mdW5jdGlvbkNhbGwoZm4sIGNvbnRleHRHZXR0ZXIpIHsKICAgIHZhciBhcmdzRm4gPSBbXTsKICAgIGlmIChwZWVrVG9rZW4oKS50ZXh0ICE9ICcpJykgewogICAgICBkbyB7CiAgICAgICAgYXJnc0ZuLnB1c2goZXhwcmVzc2lvbigpKTsKICAgICAgfSB3aGlsZSAoZXhwZWN0KCcsJykpOwogICAgfQogICAgY29uc3VtZSgnKScpOwogICAgcmV0dXJuIGZ1bmN0aW9uKHNlbGYsIGxvY2Fscyl7CiAgICAgIHZhciBhcmdzID0gW10sCiAgICAgICAgICBjb250ZXh0ID0gY29udGV4dEdldHRlciA/IGNvbnRleHRHZXR0ZXIoc2VsZiwgbG9jYWxzKSA6IHNlbGY7CgogICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmdzRm4ubGVuZ3RoOyBpKyspIHsKICAgICAgICBhcmdzLnB1c2goYXJnc0ZuW2ldKHNlbGYsIGxvY2FscykpOwogICAgICB9CiAgICAgIHZhciBmblB0ciA9IGZuKHNlbGYsIGxvY2FscykgfHwgbm9vcDsKICAgICAgLy8gSUUgc3R1cGlkaXR5IQogICAgICByZXR1cm4gZm5QdHIuYXBwbHkKICAgICAgICAgID8gZm5QdHIuYXBwbHkoY29udGV4dCwgYXJncykKICAgICAgICAgIDogZm5QdHIoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7CiAgICB9OwogIH0KCiAgLy8gVGhpcyBpcyB1c2VkIHdpdGgganNvbiBhcnJheSBkZWNsYXJhdGlvbgogIGZ1bmN0aW9uIGFycmF5RGVjbGFyYXRpb24gKCkgewogICAgdmFyIGVsZW1lbnRGbnMgPSBbXTsKICAgIGlmIChwZWVrVG9rZW4oKS50ZXh0ICE9ICddJykgewogICAgICBkbyB7CiAgICAgICAgZWxlbWVudEZucy5wdXNoKGV4cHJlc3Npb24oKSk7CiAgICAgIH0gd2hpbGUgKGV4cGVjdCgnLCcpKTsKICAgIH0KICAgIGNvbnN1bWUoJ10nKTsKICAgIHJldHVybiBmdW5jdGlvbihzZWxmLCBsb2NhbHMpewogICAgICB2YXIgYXJyYXkgPSBbXTsKICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgZWxlbWVudEZucy5sZW5ndGg7IGkrKykgewogICAgICAgIGFycmF5LnB1c2goZWxlbWVudEZuc1tpXShzZWxmLCBsb2NhbHMpKTsKICAgICAgfQogICAgICByZXR1cm4gYXJyYXk7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gb2JqZWN0ICgpIHsKICAgIHZhciBrZXlWYWx1ZXMgPSBbXTsKICAgIGlmIChwZWVrVG9rZW4oKS50ZXh0ICE9ICd9JykgewogICAgICBkbyB7CiAgICAgICAgdmFyIHRva2VuID0gZXhwZWN0KCksCiAgICAgICAga2V5ID0gdG9rZW4uc3RyaW5nIHx8IHRva2VuLnRleHQ7CiAgICAgICAgY29uc3VtZSgiOiIpOwogICAgICAgIHZhciB2YWx1ZSA9IGV4cHJlc3Npb24oKTsKICAgICAgICBrZXlWYWx1ZXMucHVzaCh7a2V5OmtleSwgdmFsdWU6dmFsdWV9KTsKICAgICAgfSB3aGlsZSAoZXhwZWN0KCcsJykpOwogICAgfQogICAgY29uc3VtZSgnfScpOwogICAgcmV0dXJuIGZ1bmN0aW9uKHNlbGYsIGxvY2Fscyl7CiAgICAgIHZhciBvYmplY3QgPSB7fTsKICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwga2V5VmFsdWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGtleVZhbHVlID0ga2V5VmFsdWVzW2ldOwogICAgICAgIHZhciB2YWx1ZSA9IGtleVZhbHVlLnZhbHVlKHNlbGYsIGxvY2Fscyk7CiAgICAgICAgb2JqZWN0W2tleVZhbHVlLmtleV0gPSB2YWx1ZTsKICAgICAgfQogICAgICByZXR1cm4gb2JqZWN0OwogICAgfTsKICB9Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vIFBhcnNlciBoZWxwZXIgZnVuY3Rpb25zCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgpmdW5jdGlvbiBzZXR0ZXIob2JqLCBwYXRoLCBzZXRWYWx1ZSkgewogIHZhciBlbGVtZW50ID0gcGF0aC5zcGxpdCgnLicpOwogIGZvciAodmFyIGkgPSAwOyBlbGVtZW50Lmxlbmd0aCA+IDE7IGkrKykgewogICAgdmFyIGtleSA9IGVsZW1lbnQuc2hpZnQoKTsKICAgIHZhciBwcm9wZXJ0eU9iaiA9IG9ialtrZXldOwogICAgaWYgKCFwcm9wZXJ0eU9iaikgewogICAgICBwcm9wZXJ0eU9iaiA9IHt9OwogICAgICBvYmpba2V5XSA9IHByb3BlcnR5T2JqOwogICAgfQogICAgb2JqID0gcHJvcGVydHlPYmo7CiAgfQogIG9ialtlbGVtZW50LnNoaWZ0KCldID0gc2V0VmFsdWU7CiAgcmV0dXJuIHNldFZhbHVlOwp9CgovKioKICogUmV0dXJuIHRoZSB2YWx1ZSBhY2Nlc2libGUgZnJvbSB0aGUgb2JqZWN0IGJ5IHBhdGguIEFueSB1bmRlZmluZWQgdHJhdmVyc2FscyBhcmUgaWdub3JlZAogKiBAcGFyYW0ge09iamVjdH0gb2JqIHN0YXJ0aW5nIG9iamVjdAogKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBwYXRoIHRvIHRyYXZlcnNlCiAqIEBwYXJhbSB7Ym9vbGVhbj10cnVlfSBiaW5kRm5Ub1Njb3BlCiAqIEByZXR1cm5zIHZhbHVlIGFzIGFjY2VzYmlsZSBieSBwYXRoCiAqLwovL1RPRE8obWlza28pOiB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJlbW92ZWQKZnVuY3Rpb24gZ2V0dGVyKG9iaiwgcGF0aCwgYmluZEZuVG9TY29wZSkgewogIGlmICghcGF0aCkgcmV0dXJuIG9iajsKICB2YXIga2V5cyA9IHBhdGguc3BsaXQoJy4nKTsKICB2YXIga2V5OwogIHZhciBsYXN0SW5zdGFuY2UgPSBvYmo7CiAgdmFyIGxlbiA9IGtleXMubGVuZ3RoOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICBrZXkgPSBrZXlzW2ldOwogICAgaWYgKG9iaikgewogICAgICBvYmogPSAobGFzdEluc3RhbmNlID0gb2JqKVtrZXldOwogICAgfQogIH0KICBpZiAoIWJpbmRGblRvU2NvcGUgJiYgaXNGdW5jdGlvbihvYmopKSB7CiAgICByZXR1cm4gYmluZChsYXN0SW5zdGFuY2UsIG9iaik7CiAgfQogIHJldHVybiBvYmo7Cn0KCnZhciBnZXR0ZXJGbkNhY2hlID0ge307CgovKioKICogSW1wbGVtZW50YXRpb24gb2YgdGhlICJCbGFjayBIb2xlIiB2YXJpYW50IGZyb206CiAqIC0gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLXBhcnNlLWdldHRlci80CiAqIC0gaHR0cDovL2pzcGVyZi5jb20vcGF0aC1ldmFsdWF0aW9uLXNpbXBsaWZpZWQvNwogKi8KZnVuY3Rpb24gY3NwU2FmZUdldHRlckZuKGtleTAsIGtleTEsIGtleTIsIGtleTMsIGtleTQpIHsKICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscykgewogICAgdmFyIHBhdGhWYWwgPSAobG9jYWxzICYmIGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShrZXkwKSkgPyBsb2NhbHMgOiBzY29wZSwKICAgICAgICBwcm9taXNlOwoKICAgIGlmIChwYXRoVmFsID09PSBudWxsIHx8IHBhdGhWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHBhdGhWYWw7CgogICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5MF07CiAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHsKICAgICAgaWYgKCEoIiQkdiIgaW4gcGF0aFZhbCkpIHsKICAgICAgICBwcm9taXNlID0gcGF0aFZhbDsKICAgICAgICBwcm9taXNlLiQkdiA9IHVuZGVmaW5lZDsKICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsKSB7IHByb21pc2UuJCR2ID0gdmFsOyB9KTsKICAgICAgfQogICAgICBwYXRoVmFsID0gcGF0aFZhbC4kJHY7CiAgICB9CiAgICBpZiAoIWtleTEgfHwgcGF0aFZhbCA9PT0gbnVsbCB8fCBwYXRoVmFsID09PSB1bmRlZmluZWQpIHJldHVybiBwYXRoVmFsOwoKICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTFdOwogICAgaWYgKHBhdGhWYWwgJiYgcGF0aFZhbC50aGVuKSB7CiAgICAgIGlmICghKCIkJHYiIGluIHBhdGhWYWwpKSB7CiAgICAgICAgcHJvbWlzZSA9IHBhdGhWYWw7CiAgICAgICAgcHJvbWlzZS4kJHYgPSB1bmRlZmluZWQ7CiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwcm9taXNlLiQkdiA9IHZhbDsgfSk7CiAgICAgIH0KICAgICAgcGF0aFZhbCA9IHBhdGhWYWwuJCR2OwogICAgfQogICAgaWYgKCFrZXkyIHx8IHBhdGhWYWwgPT09IG51bGwgfHwgcGF0aFZhbCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gcGF0aFZhbDsKCiAgICBwYXRoVmFsID0gcGF0aFZhbFtrZXkyXTsKICAgIGlmIChwYXRoVmFsICYmIHBhdGhWYWwudGhlbikgewogICAgICBpZiAoISgiJCR2IiBpbiBwYXRoVmFsKSkgewogICAgICAgIHByb21pc2UgPSBwYXRoVmFsOwogICAgICAgIHByb21pc2UuJCR2ID0gdW5kZWZpbmVkOwogICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWwpIHsgcHJvbWlzZS4kJHYgPSB2YWw7IH0pOwogICAgICB9CiAgICAgIHBhdGhWYWwgPSBwYXRoVmFsLiQkdjsKICAgIH0KICAgIGlmICgha2V5MyB8fCBwYXRoVmFsID09PSBudWxsIHx8IHBhdGhWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHBhdGhWYWw7CgogICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5M107CiAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHsKICAgICAgaWYgKCEoIiQkdiIgaW4gcGF0aFZhbCkpIHsKICAgICAgICBwcm9taXNlID0gcGF0aFZhbDsKICAgICAgICBwcm9taXNlLiQkdiA9IHVuZGVmaW5lZDsKICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsKSB7IHByb21pc2UuJCR2ID0gdmFsOyB9KTsKICAgICAgfQogICAgICBwYXRoVmFsID0gcGF0aFZhbC4kJHY7CiAgICB9CiAgICBpZiAoIWtleTQgfHwgcGF0aFZhbCA9PT0gbnVsbCB8fCBwYXRoVmFsID09PSB1bmRlZmluZWQpIHJldHVybiBwYXRoVmFsOwoKICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTRdOwogICAgaWYgKHBhdGhWYWwgJiYgcGF0aFZhbC50aGVuKSB7CiAgICAgIGlmICghKCIkJHYiIGluIHBhdGhWYWwpKSB7CiAgICAgICAgcHJvbWlzZSA9IHBhdGhWYWw7CiAgICAgICAgcHJvbWlzZS4kJHYgPSB1bmRlZmluZWQ7CiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwcm9taXNlLiQkdiA9IHZhbDsgfSk7CiAgICAgIH0KICAgICAgcGF0aFZhbCA9IHBhdGhWYWwuJCR2OwogICAgfQogICAgcmV0dXJuIHBhdGhWYWw7CiAgfTsKfTsKCmZ1bmN0aW9uIGdldHRlckZuKHBhdGgsIGNzcCkgewogIGlmIChnZXR0ZXJGbkNhY2hlLmhhc093blByb3BlcnR5KHBhdGgpKSB7CiAgICByZXR1cm4gZ2V0dGVyRm5DYWNoZVtwYXRoXTsKICB9CgogIHZhciBwYXRoS2V5cyA9IHBhdGguc3BsaXQoJy4nKSwKICAgICAgcGF0aEtleXNMZW5ndGggPSBwYXRoS2V5cy5sZW5ndGgsCiAgICAgIGZuOwoKICBpZiAoY3NwKSB7CiAgICBmbiA9IChwYXRoS2V5c0xlbmd0aCA8IDYpCiAgICAgICAgPyBjc3BTYWZlR2V0dGVyRm4ocGF0aEtleXNbMF0sIHBhdGhLZXlzWzFdLCBwYXRoS2V5c1syXSwgcGF0aEtleXNbM10sIHBhdGhLZXlzWzRdKQogICAgICAgIDogZnVuY3Rpb24oc2NvcGUsIGxvY2FscykgewogICAgICAgICAgdmFyIGkgPSAwLCB2YWwKICAgICAgICAgIGRvIHsKICAgICAgICAgICAgdmFsID0gY3NwU2FmZUdldHRlckZuKAogICAgICAgICAgICAgICAgICAgIHBhdGhLZXlzW2krK10sIHBhdGhLZXlzW2krK10sIHBhdGhLZXlzW2krK10sIHBhdGhLZXlzW2krK10sIHBhdGhLZXlzW2krK10KICAgICAgICAgICAgICAgICAgKShzY29wZSwgbG9jYWxzKTsKCiAgICAgICAgICAgIGxvY2FscyA9IHVuZGVmaW5lZDsgLy8gY2xlYXIgYWZ0ZXIgZmlyc3QgaXRlcmF0aW9uCiAgICAgICAgICAgIHNjb3BlID0gdmFsOwogICAgICAgICAgfSB3aGlsZSAoaSA8IHBhdGhLZXlzTGVuZ3RoKTsKICAgICAgICAgIHJldHVybiB2YWw7CiAgICAgICAgfQogIH0gZWxzZSB7CiAgICB2YXIgY29kZSA9ICd2YXIgbCwgZm4sIHA7XG4nOwogICAgZm9yRWFjaChwYXRoS2V5cywgZnVuY3Rpb24oa2V5LCBpbmRleCkgewogICAgICBjb2RlICs9ICdpZihzID09PSBudWxsIHx8IHMgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHM7XG4nICsKICAgICAgICAgICAgICAnbD1zO1xuJyArCiAgICAgICAgICAgICAgJ3M9JysgKGluZGV4CiAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBzaW1wbHkgZGVyZWZlcmVuY2UgJ3MnIG9uIGFueSAuZG90IG5vdGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICA/ICdzJwogICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGlmIHdlIGFyZSBmaXJzdCB0aGVuIHdlIGNoZWNrIGxvY2FscyBmaXJzdCwgYW5kIGlmIHNvIHJlYWQgaXQgZmlyc3QKICAgICAgICAgICAgICAgICAgICAgIDogJygoayYmay5oYXNPd25Qcm9wZXJ0eSgiJyArIGtleSArICciKSk/azpzKScpICsgJ1siJyArIGtleSArICciXScgKyAnO1xuJyArCiAgICAgICAgICAgICAgJ2lmIChzICYmIHMudGhlbikge1xuJyArCiAgICAgICAgICAgICAgICAnIGlmICghKCIkJHYiIGluIHMpKSB7XG4nICsKICAgICAgICAgICAgICAgICAgJyBwPXM7XG4nICsKICAgICAgICAgICAgICAgICAgJyBwLiQkdiA9IHVuZGVmaW5lZDtcbicgKwogICAgICAgICAgICAgICAgICAnIHAudGhlbihmdW5jdGlvbih2KSB7cC4kJHY9djt9KTtcbicgKwogICAgICAgICAgICAgICAgICAnfVxuJyArCiAgICAgICAgICAgICAgICAnIHM9cy4kJHZcbicgKwogICAgICAgICAgICAgICd9XG4nOwogICAgfSk7CiAgICBjb2RlICs9ICdyZXR1cm4gczsnOwogICAgZm4gPSBGdW5jdGlvbigncycsICdrJywgY29kZSk7IC8vIHM9c2NvcGUsIGs9bG9jYWxzCiAgICBmbi50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29kZTsgfTsKICB9CgogIHJldHVybiBnZXR0ZXJGbkNhY2hlW3BhdGhdID0gZm47Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLiRwYXJzZQogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIENvbnZlcnRzIEFuZ3VsYXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW50byBhIGZ1bmN0aW9uLgogKgogKiA8cHJlPgogKiAgIHZhciBnZXR0ZXIgPSAkcGFyc2UoJ3VzZXIubmFtZScpOwogKiAgIHZhciBzZXR0ZXIgPSBnZXR0ZXIuYXNzaWduOwogKiAgIHZhciBjb250ZXh0ID0ge3VzZXI6e25hbWU6J2FuZ3VsYXInfX07CiAqICAgdmFyIGxvY2FscyA9IHt1c2VyOntuYW1lOidsb2NhbCd9fTsKICoKICogICBleHBlY3QoZ2V0dGVyKGNvbnRleHQpKS50b0VxdWFsKCdhbmd1bGFyJyk7CiAqICAgc2V0dGVyKGNvbnRleHQsICduZXdWYWx1ZScpOwogKiAgIGV4cGVjdChjb250ZXh0LnVzZXIubmFtZSkudG9FcXVhbCgnbmV3VmFsdWUnKTsKICogICBleHBlY3QoZ2V0dGVyKGNvbnRleHQsIGxvY2FscykpLnRvRXF1YWwoJ2xvY2FsJyk7CiAqIDwvcHJlPgogKgogKgogKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLgogKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOgogKgogKiAgICAqIGBjb250ZXh0YDogYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzIGFyZSBldmFsdWF0ZWQKICogICAgICBhZ2FpbnN0IChUb3BpY2FsbHkgYSBzY29wZSBvYmplY3QpLgogKiAgICAqIGBsb2NhbHNgOiBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gYGNvbnRleHRgLgogKgogKiAgICBUaGUgcmV0dXJuIGZ1bmN0aW9uIGFsc28gaGFzIGFuIGBhc3NpZ25gIHByb3BlcnR5LCBpZiB0aGUgZXhwcmVzc2lvbiBpcyBhc3NpZ25hYmxlLCB3aGljaAogKiAgICBhbGxvd3Mgb25lIHRvIHNldCB2YWx1ZXMgdG8gZXhwcmVzc2lvbnMuCiAqCiAqLwpmdW5jdGlvbiAkUGFyc2VQcm92aWRlcigpIHsKICB2YXIgY2FjaGUgPSB7fTsKICB0aGlzLiRnZXQgPSBbJyRmaWx0ZXInLCAnJHNuaWZmZXInLCBmdW5jdGlvbigkZmlsdGVyLCAkc25pZmZlcikgewogICAgcmV0dXJuIGZ1bmN0aW9uKGV4cCkgewogICAgICBzd2l0Y2godHlwZW9mIGV4cCkgewogICAgICAgIGNhc2UgJ3N0cmluZyc6CiAgICAgICAgICByZXR1cm4gY2FjaGUuaGFzT3duUHJvcGVydHkoZXhwKQogICAgICAgICAgICA/IGNhY2hlW2V4cF0KICAgICAgICAgICAgOiBjYWNoZVtleHBdID0gIHBhcnNlcihleHAsIGZhbHNlLCAkZmlsdGVyLCAkc25pZmZlci5jc3ApOwogICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzoKICAgICAgICAgIHJldHVybiBleHA7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBub29wOwogICAgICB9CiAgICB9OwogIH1dOwp9CgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgbmcuJHEKICogQHJlcXVpcmVzICRyb290U2NvcGUKICoKICogQGRlc2NyaXB0aW9uCiAqIEEgcHJvbWlzZS9kZWZlcnJlZCBpbXBsZW1lbnRhdGlvbiBpbnNwaXJlZCBieSBbS3JpcyBLb3dhbCdzIFFdKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkuCiAqCiAqIFtUaGUgQ29tbW9uSlMgUHJvbWlzZSBwcm9wb3NhbF0oaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvUHJvbWlzZXMpIGRlc2NyaWJlcyBhIHByb21pc2UgYXMgYW4KICogaW50ZXJmYWNlIGZvciBpbnRlcmFjdGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHJlc3VsdCBvZiBhbiBhY3Rpb24gdGhhdCBpcwogKiBwZXJmb3JtZWQgYXN5bmNocm9ub3VzbHksIGFuZCBtYXkgb3IgbWF5IG5vdCBiZSBmaW5pc2hlZCBhdCBhbnkgZ2l2ZW4gcG9pbnQgaW4gdGltZS4KICoKICogRnJvbSB0aGUgcGVyc3BlY3RpdmUgb2YgZGVhbGluZyB3aXRoIGVycm9yIGhhbmRsaW5nLCBkZWZlcnJlZCBhbmQgcHJvbWlzZSBhcGlzIGFyZSB0bwogKiBhc3luY2hyb25vdXMgcHJvZ3JhbWluZyB3aGF0IGB0cnlgLCBgY2F0Y2hgIGFuZCBgdGhyb3dgIGtleXdvcmRzIGFyZSB0byBzeW5jaHJvbm91cyBwcm9ncmFtaW5nLgogKgogKiA8cHJlPgogKiAgIC8vIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGV4YW1wbGUgbGV0J3MgYXNzdW1lIHRoYXQgdmFyaWFibGVzIGAkcWAgYW5kIGBzY29wZWAgYXJlCiAqICAgLy8gYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuCiAqCiAqICAgZnVuY3Rpb24gYXN5bmNHcmVldChuYW1lKSB7CiAqICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpOwogKgogKiAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICogICAgICAgLy8gc2luY2UgdGhpcyBmbiBleGVjdXRlcyBhc3luYyBpbiBhIGZ1dHVyZSB0dXJuIG9mIHRoZSBldmVudCBsb29wLCB3ZSBuZWVkIHRvIHdyYXAKICogICAgICAgLy8gb3VyIGNvZGUgaW50byBhbiAkYXBwbHkgY2FsbCBzbyB0aGF0IHRoZSBtb2RlbCBjaGFuZ2VzIGFyZSBwcm9wZXJseSBvYnNlcnZlZC4KICogICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogKiAgICAgICAgIGlmIChva1RvR3JlZXQobmFtZSkpIHsKICogICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJ0hlbGxvLCAnICsgbmFtZSArICchJyk7CiAqICAgICAgICAgfSBlbHNlIHsKICogICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnR3JlZXRpbmcgJyArIG5hbWUgKyAnIGlzIG5vdCBhbGxvd2VkLicpOwogKiAgICAgICAgIH0KICogICAgICAgfSk7CiAqICAgICB9LCAxMDAwKTsKICoKICogICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlOwogKiAgIH0KICoKICogICB2YXIgcHJvbWlzZSA9IGFzeW5jR3JlZXQoJ1JvYmluIEhvb2QnKTsKICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHsKICogICAgIGFsZXJ0KCdTdWNjZXNzOiAnICsgZ3JlZXRpbmcpOwogKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgewogKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7CiAqICAgfSk7CiAqIDwvcHJlPgogKgogKiBBdCBmaXJzdCBpdCBtaWdodCBub3QgYmUgb2J2aW91cyB3aHkgdGhpcyBleHRyYSBjb21wbGV4aXR5IGlzIHdvcnRoIHRoZSB0cm91YmxlLiBUaGUgcGF5b2ZmCiAqIGNvbWVzIGluIHRoZSB3YXkgb2YKICogW2d1YXJhbnRlZXMgdGhhdCBwcm9taXNlIGFuZCBkZWZlcnJlZCBhcGlzIG1ha2VdKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvdW5jb21tb25qcy9ibG9iL21hc3Rlci9wcm9taXNlcy9zcGVjaWZpY2F0aW9uLm1kKS4KICoKICogQWRkaXRpb25hbGx5IHRoZSBwcm9taXNlIGFwaSBhbGxvd3MgZm9yIGNvbXBvc2l0aW9uIHRoYXQgaXMgdmVyeSBoYXJkIHRvIGRvIHdpdGggdGhlCiAqIHRyYWRpdGlvbmFsIGNhbGxiYWNrIChbQ1BTXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbnRpbnVhdGlvbi1wYXNzaW5nX3N0eWxlKSkgYXBwcm9hY2guCiAqIEZvciBtb3JlIG9uIHRoaXMgcGxlYXNlIHNlZSB0aGUgW1EgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKSBlc3BlY2lhbGx5IHRoZQogKiBzZWN0aW9uIG9uIHNlcmlhbCBvciBwYXJhbGxlbCBqb2luaW5nIG9mIHByb21pc2VzLgogKgogKgogKiAjIFRoZSBEZWZlcnJlZCBBUEkKICoKICogQSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQgaXMgY29uc3RydWN0ZWQgYnkgY2FsbGluZyBgJHEuZGVmZXIoKWAuCiAqCiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBkZWZlcnJlZCBvYmplY3QgaXMgdG8gZXhwb3NlIHRoZSBhc3NvY2lhdGVkIFByb21pc2UgaW5zdGFuY2UgYXMgd2VsbCBhcyBhcGlzCiAqIHRoYXQgY2FuIGJlIHVzZWQgZm9yIHNpZ25hbGluZyB0aGUgc3VjY2Vzc2Z1bCBvciB1bnN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiB0aGUgdGFzay4KICoKICogKipNZXRob2RzKioKICoKICogLSBgcmVzb2x2ZSh2YWx1ZSlgIOKAkyByZXNvbHZlcyB0aGUgZGVyaXZlZCBwcm9taXNlIHdpdGggdGhlIGB2YWx1ZWAuIElmIHRoZSB2YWx1ZSBpcyBhIHJlamVjdGlvbgogKiAgIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YCwgdGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCBpbnN0ZWFkLgogKiAtIGByZWplY3QocmVhc29uKWAg4oCTIHJlamVjdHMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgcmVhc29uYC4gVGhpcyBpcyBlcXVpdmFsZW50IHRvCiAqICAgcmVzb2x2aW5nIGl0IHdpdGggYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLgogKgogKiAqKlByb3BlcnRpZXMqKgogKgogKiAtIHByb21pc2Ug4oCTIGB7UHJvbWlzZX1gIOKAkyBwcm9taXNlIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZWZlcnJlZC4KICoKICoKICogIyBUaGUgUHJvbWlzZSBBUEkKICoKICogQSBuZXcgcHJvbWlzZSBpbnN0YW5jZSBpcyBjcmVhdGVkIHdoZW4gYSBkZWZlcnJlZCBpbnN0YW5jZSBpcyBjcmVhdGVkIGFuZCBjYW4gYmUgcmV0cmlldmVkIGJ5CiAqIGNhbGxpbmcgYGRlZmVycmVkLnByb21pc2VgLgogKgogKiBUaGUgcHVycG9zZSBvZiB0aGUgcHJvbWlzZSBvYmplY3QgaXMgdG8gYWxsb3cgZm9yIGludGVyZXN0ZWQgcGFydGllcyB0byBnZXQgYWNjZXNzIHRvIHRoZSByZXN1bHQKICogb2YgdGhlIGRlZmVycmVkIHRhc2sgd2hlbiBpdCBjb21wbGV0ZXMuCiAqCiAqICoqTWV0aG9kcyoqCiAqCiAqIC0gYHRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKWAg4oCTIHJlZ2FyZGxlc3Mgb2Ygd2hlbiB0aGUgcHJvbWlzZSB3YXMgb3Igd2lsbCBiZSByZXNvbHZlZAogKiAgIG9yIHJlamVjdGVkIGNhbGxzIG9uZSBvZiB0aGUgc3VjY2VzcyBvciBlcnJvciBjYWxsYmFja3MgYXN5bmNocm9ub3VzbHkgYXMgc29vbiBhcyB0aGUgcmVzdWx0CiAqICAgaXMgYXZhaWxhYmxlLiBUaGUgY2FsbGJhY2tzIGFyZSBjYWxsZWQgd2l0aCBhIHNpbmdsZSBhcmd1bWVudCB0aGUgcmVzdWx0IG9yIHJlamVjdGlvbiByZWFzb24uCiAqCiAqICAgVGhpcyBtZXRob2QgKnJldHVybnMgYSBuZXcgcHJvbWlzZSogd2hpY2ggaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlCiAqICAgYHN1Y2Nlc3NDYWxsYmFja2Agb3IgYGVycm9yQ2FsbGJhY2tgLgogKgogKgogKiAjIENoYWluaW5nIHByb21pc2VzCiAqCiAqIEJlY2F1c2UgY2FsbGluZyBgdGhlbmAgYXBpIG9mIGEgcHJvbWlzZSByZXR1cm5zIGEgbmV3IGRlcml2ZWQgcHJvbWlzZSwgaXQgaXMgZWFzaWx5IHBvc3NpYmxlCiAqIHRvIGNyZWF0ZSBhIGNoYWluIG9mIHByb21pc2VzOgogKgogKiA8cHJlPgogKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICogICAgIHJldHVybiByZXN1bHQgKyAxOwogKiAgIH0pOwogKgogKiAgIC8vIHByb21pc2VCIHdpbGwgYmUgcmVzb2x2ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgcHJvbWlzZUEgaXMgcmVzb2x2ZWQgYW5kIGl0J3MgdmFsdWUgd2lsbCBiZQogKiAgIC8vIHRoZSByZXN1bHQgb2YgcHJvbWlzZUEgaW5jcmVtZW50ZWQgYnkgMQogKiA8L3ByZT4KICoKICogSXQgaXMgcG9zc2libGUgdG8gY3JlYXRlIGNoYWlucyBvZiBhbnkgbGVuZ3RoIGFuZCBzaW5jZSBhIHByb21pc2UgY2FuIGJlIHJlc29sdmVkIHdpdGggYW5vdGhlcgogKiBwcm9taXNlICh3aGljaCB3aWxsIGRlZmVyIGl0cyByZXNvbHV0aW9uIGZ1cnRoZXIpLCBpdCBpcyBwb3NzaWJsZSB0byBwYXVzZS9kZWZlciByZXNvbHV0aW9uIG9mCiAqIHRoZSBwcm9taXNlcyBhdCBhbnkgcG9pbnQgaW4gdGhlIGNoYWluLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGltcGxlbWVudCBwb3dlcmZ1bCBhcGlzIGxpa2UKICogJGh0dHAncyByZXNwb25zZSBpbnRlcmNlcHRvcnMuCiAqCiAqCiAqICMgRGlmZmVyZW5jZXMgYmV0d2VlbiBLcmlzIEtvd2FsJ3MgUSBhbmQgJHEKICoKICogIFRoZXJlIGFyZSB0aHJlZSBtYWluIGRpZmZlcmVuY2VzOgogKgogKiAtICRxIGlzIGludGVncmF0ZWQgd2l0aCB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGV9IFNjb3BlIG1vZGVsIG9ic2VydmF0aW9uCiAqICAgbWVjaGFuaXNtIGluIGFuZ3VsYXIsIHdoaWNoIG1lYW5zIGZhc3RlciBwcm9wYWdhdGlvbiBvZiByZXNvbHV0aW9uIG9yIHJlamVjdGlvbiBpbnRvIHlvdXIKICogICBtb2RlbHMgYW5kIGF2b2lkaW5nIHVubmVjZXNzYXJ5IGJyb3dzZXIgcmVwYWludHMsIHdoaWNoIHdvdWxkIHJlc3VsdCBpbiBmbGlja2VyaW5nIFVJLgogKiAtICRxIHByb21pc2VzIGFyZSByZWNvZ25pemVkIGJ5IHRoZSB0ZW1wbGF0aW5nIGVuZ2luZSBpbiBhbmd1bGFyLCB3aGljaCBtZWFucyB0aGF0IGluIHRlbXBsYXRlcwogKiAgIHlvdSBjYW4gdHJlYXQgcHJvbWlzZXMgYXR0YWNoZWQgdG8gYSBzY29wZSBhcyBpZiB0aGV5IHdlcmUgdGhlIHJlc3VsdGluZyB2YWx1ZXMuCiAqIC0gUSBoYXMgbWFueSBtb3JlIGZlYXR1cmVzIHRoYXQgJHEsIGJ1dCB0aGF0IGNvbWVzIGF0IGEgY29zdCBvZiBieXRlcy4gJHEgaXMgdGlueSwgYnV0IGNvbnRhaW5zCiAqICAgYWxsIHRoZSBpbXBvcnRhbnQgZnVuY3Rpb25hbGl0eSBuZWVkZWQgZm9yIGNvbW1vbiBhc3luYyB0YXNrcy4KICovCmZ1bmN0aW9uICRRUHJvdmlkZXIoKSB7CgogIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRleGNlcHRpb25IYW5kbGVyKSB7CiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTsKICAgIH0sICRleGNlcHRpb25IYW5kbGVyKTsKICB9XTsKfQoKCi8qKgogKiBDb25zdHJ1Y3RzIGEgcHJvbWlzZSBtYW5hZ2VyLgogKgogKiBAcGFyYW0ge2Z1bmN0aW9uKGZ1bmN0aW9uKX0gbmV4dFRpY2sgRnVuY3Rpb24gZm9yIGV4ZWN1dGluZyBmdW5jdGlvbnMgaW4gdGhlIG5leHQgdHVybi4KICogQHBhcmFtIHtmdW5jdGlvbiguLi4qKX0gZXhjZXB0aW9uSGFuZGxlciBGdW5jdGlvbiBpbnRvIHdoaWNoIHVuZXhwZWN0ZWQgZXhjZXB0aW9ucyBhcmUgcGFzc2VkIGZvcgogKiAgICAgZGVidWdnaW5nIHB1cnBvc2VzLgogKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9taXNlIG1hbmFnZXIuCiAqLwpmdW5jdGlvbiBxRmFjdG9yeShuZXh0VGljaywgZXhjZXB0aW9uSGFuZGxlcikgewoKICAvKioKICAgKiBAbmdkb2MKICAgKiBAbmFtZSBuZy4kcSNkZWZlcgogICAqIEBtZXRob2RPZiBuZy4kcQogICAqIEBkZXNjcmlwdGlvbgogICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLgogICAqCiAgICogQHJldHVybnMge0RlZmVycmVkfSBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkLgogICAqLwogIHZhciBkZWZlciA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHBlbmRpbmcgPSBbXSwKICAgICAgICB2YWx1ZSwgZGVmZXJyZWQ7CgogICAgZGVmZXJyZWQgPSB7CgogICAgICByZXNvbHZlOiBmdW5jdGlvbih2YWwpIHsKICAgICAgICBpZiAocGVuZGluZykgewogICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHBlbmRpbmc7CiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkOwogICAgICAgICAgdmFsdWUgPSByZWYodmFsKTsKCiAgICAgICAgICBpZiAoY2FsbGJhY2tzLmxlbmd0aCkgewogICAgICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB2YXIgY2FsbGJhY2s7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldOwogICAgICAgICAgICAgICAgdmFsdWUudGhlbihjYWxsYmFja1swXSwgY2FsbGJhY2tbMV0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAoKCiAgICAgIHJlamVjdDogZnVuY3Rpb24ocmVhc29uKSB7CiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZWplY3QocmVhc29uKSk7CiAgICAgIH0sCgoKICAgICAgcHJvbWlzZTogewogICAgICAgIHRoZW46IGZ1bmN0aW9uKGNhbGxiYWNrLCBlcnJiYWNrKSB7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gZGVmZXIoKTsKCiAgICAgICAgICB2YXIgd3JhcHBlZENhbGxiYWNrID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXN1bHQucmVzb2x2ZSgoY2FsbGJhY2sgfHwgZGVmYXVsdENhbGxiYWNrKSh2YWx1ZSkpOwogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICAgIHJlc3VsdC5yZWplY3QoZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CgogICAgICAgICAgdmFyIHdyYXBwZWRFcnJiYWNrID0gZnVuY3Rpb24ocmVhc29uKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgcmVzdWx0LnJlc29sdmUoKGVycmJhY2sgfHwgZGVmYXVsdEVycmJhY2spKHJlYXNvbikpOwogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICAgIHJlc3VsdC5yZWplY3QoZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CgogICAgICAgICAgaWYgKHBlbmRpbmcpIHsKICAgICAgICAgICAgcGVuZGluZy5wdXNoKFt3cmFwcGVkQ2FsbGJhY2ssIHdyYXBwZWRFcnJiYWNrXSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YWx1ZS50aGVuKHdyYXBwZWRDYWxsYmFjaywgd3JhcHBlZEVycmJhY2spOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiByZXN1bHQucHJvbWlzZTsKICAgICAgICB9CiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIGRlZmVycmVkOwogIH07CgoKICB2YXIgcmVmID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS50aGVuKSByZXR1cm4gdmFsdWU7CiAgICByZXR1cm4gewogICAgICB0aGVuOiBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICAgIHZhciByZXN1bHQgPSBkZWZlcigpOwogICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICAgcmVzdWx0LnJlc29sdmUoY2FsbGJhY2sodmFsdWUpKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7CiAgICAgIH0KICAgIH07CiAgfTsKCgogIC8qKgogICAqIEBuZ2RvYwogICAqIEBuYW1lIG5nLiRxI3JlamVjdAogICAqIEBtZXRob2RPZiBuZy4kcQogICAqIEBkZXNjcmlwdGlvbgogICAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGByZWFzb25gLiBUaGlzIGFwaSBzaG91bGQgYmUKICAgKiB1c2VkIHRvIGZvcndhcmQgcmVqZWN0aW9uIGluIGEgY2hhaW4gb2YgcHJvbWlzZXMuIElmIHlvdSBhcmUgZGVhbGluZyB3aXRoIHRoZSBsYXN0IHByb21pc2UgaW4KICAgKiBhIHByb21pc2UgY2hhaW4sIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IGl0LgogICAqCiAgICogV2hlbiBjb21wYXJpbmcgZGVmZXJyZWRzL3Byb21pc2VzIHRvIHRoZSBmYW1pbGlhciBiZWhhdmlvciBvZiB0cnkvY2F0Y2gvdGhyb3csIHRoaW5rIG9mCiAgICogYHJlamVjdGAgYXMgdGhlIGB0aHJvd2Aga2V5d29yZCBpbiBKYXZhU2NyaXB0LiBUaGlzIGFsc28gbWVhbnMgdGhhdCBpZiB5b3UgImNhdGNoIiBhbiBlcnJvciB2aWEKICAgKiBhIHByb21pc2UgZXJyb3IgY2FsbGJhY2sgYW5kIHlvdSB3YW50IHRvIGZvcndhcmQgdGhlIGVycm9yIHRvIHRoZSBwcm9taXNlIGRlcml2ZWQgZnJvbSB0aGUKICAgKiBjdXJyZW50IHByb21pc2UsIHlvdSBoYXZlIHRvICJyZXRocm93IiB0aGUgZXJyb3IgYnkgcmV0dXJuaW5nIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYQogICAqIGByZWplY3RgLgogICAqCiAgICogPHByZT4KICAgKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICAgKiAgICAgLy8gc3VjY2VzczogZG8gc29tZXRoaW5nIGFuZCByZXNvbHZlIHByb21pc2VCCiAgICogICAgIC8vICAgICAgICAgIHdpdGggdGhlIG9sZCBvciBhIG5ldyByZXN1bHQKICAgKiAgICAgcmV0dXJuIHJlc3VsdDsKICAgKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgewogICAqICAgICAvLyBlcnJvcjogaGFuZGxlIHRoZSBlcnJvciBpZiBwb3NzaWJsZSBhbmQKICAgKiAgICAgLy8gICAgICAgIHJlc29sdmUgcHJvbWlzZUIgd2l0aCBuZXdQcm9taXNlT3JWYWx1ZSwKICAgKiAgICAgLy8gICAgICAgIG90aGVyd2lzZSBmb3J3YXJkIHRoZSByZWplY3Rpb24gdG8gcHJvbWlzZUIKICAgKiAgICAgaWYgKGNhbkhhbmRsZShyZWFzb24pKSB7CiAgICogICAgICAvLyBoYW5kbGUgdGhlIGVycm9yIGFuZCByZWNvdmVyCiAgICogICAgICByZXR1cm4gbmV3UHJvbWlzZU9yVmFsdWU7CiAgICogICAgIH0KICAgKiAgICAgcmV0dXJuICRxLnJlamVjdChyZWFzb24pOwogICAqICAgfSk7CiAgICogPC9wcmU+CiAgICoKICAgKiBAcGFyYW0geyp9IHJlYXNvbiBDb25zdGFudCwgbWVzc2FnZSwgZXhjZXB0aW9uIG9yIGFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHJlamVjdGlvbiByZWFzb24uCiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2FzIGFscmVhZHkgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgYHJlYXNvbmAuCiAgICovCiAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uKHJlYXNvbikgewogICAgcmV0dXJuIHsKICAgICAgdGhlbjogZnVuY3Rpb24oY2FsbGJhY2ssIGVycmJhY2spIHsKICAgICAgICB2YXIgcmVzdWx0ID0gZGVmZXIoKTsKICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgIHJlc3VsdC5yZXNvbHZlKChlcnJiYWNrIHx8IGRlZmF1bHRFcnJiYWNrKShyZWFzb24pKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7CiAgICAgIH0KICAgIH07CiAgfTsKCgogIC8qKgogICAqIEBuZ2RvYwogICAqIEBuYW1lIG5nLiRxI3doZW4KICAgKiBAbWV0aG9kT2YgbmcuJHEKICAgKiBAZGVzY3JpcHRpb24KICAgKiBXcmFwcyBhbiBvYmplY3QgdGhhdCBtaWdodCBiZSBhIHZhbHVlIG9yIGEgKDNyZCBwYXJ0eSkgdGhlbi1hYmxlIHByb21pc2UgaW50byBhICRxIHByb21pc2UuCiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3UgYXJlIGRlYWxpbmcgd2l0aCBvbiBvYmplY3QgdGhhdCBtaWdodCBvciBtaWdodCBub3QgYmUgYSBwcm9taXNlLCBvciBpZgogICAqIHRoZSBwcm9taXNlIGNvbWVzIGZyb20gYSBzb3VyY2UgdGhhdCBjYW4ndCBiZSB0cnVzdGVkLgogICAqCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2UKICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHNpbmdsZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5IG9mIHZhbHVlcywKICAgKiAgIGVhY2ggdmFsdWUgY29yZXNwb25kaW5nIHRvIHRoZSBwcm9taXNlIGF0IHRoZSBzYW1lIGluZGV4IGluIHRoZSBgcHJvbWlzZXNgIGFycmF5LiBJZiBhbnkgb2YKICAgKiAgIHRoZSBwcm9taXNlcyBpcyByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLCB0aGlzIHJlc3VsdGluZyBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUKICAgKiAgIHNhbWUgcmVqZWN0aW9uLgogICAqLwogIHZhciB3aGVuID0gZnVuY3Rpb24odmFsdWUsIGNhbGxiYWNrLCBlcnJiYWNrKSB7CiAgICB2YXIgcmVzdWx0ID0gZGVmZXIoKSwKICAgICAgICBkb25lOwoKICAgIHZhciB3cmFwcGVkQ2FsbGJhY2sgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICB0cnkgewogICAgICAgIHJldHVybiAoY2FsbGJhY2sgfHwgZGVmYXVsdENhbGxiYWNrKSh2YWx1ZSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgIHJldHVybiByZWplY3QoZSk7CiAgICAgIH0KICAgIH07CgogICAgdmFyIHdyYXBwZWRFcnJiYWNrID0gZnVuY3Rpb24ocmVhc29uKSB7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIChlcnJiYWNrIHx8IGRlZmF1bHRFcnJiYWNrKShyZWFzb24pOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICByZXR1cm4gcmVqZWN0KGUpOwogICAgICB9CiAgICB9OwoKICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkgewogICAgICByZWYodmFsdWUpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZiAoZG9uZSkgcmV0dXJuOwogICAgICAgIGRvbmUgPSB0cnVlOwogICAgICAgIHJlc3VsdC5yZXNvbHZlKHJlZih2YWx1ZSkudGhlbih3cmFwcGVkQ2FsbGJhY2ssIHdyYXBwZWRFcnJiYWNrKSk7CiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgewogICAgICAgIGlmIChkb25lKSByZXR1cm47CiAgICAgICAgZG9uZSA9IHRydWU7CiAgICAgICAgcmVzdWx0LnJlc29sdmUod3JhcHBlZEVycmJhY2socmVhc29uKSk7CiAgICAgIH0pOwogICAgfSk7CgogICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlOwogIH07CgoKICBmdW5jdGlvbiBkZWZhdWx0Q2FsbGJhY2sodmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZTsKICB9CgoKICBmdW5jdGlvbiBkZWZhdWx0RXJyYmFjayhyZWFzb24pIHsKICAgIHJldHVybiByZWplY3QocmVhc29uKTsKICB9CgoKICAvKioKICAgKiBAbmdkb2MKICAgKiBAbmFtZSBuZy4kcSNhbGwKICAgKiBAbWV0aG9kT2YgbmcuJHEKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDb21iaW5lcyBtdWx0aXBsZSBwcm9taXNlcyBpbnRvIGEgc2luZ2xlIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGFsbCBvZiB0aGUgaW5wdXQKICAgKiBwcm9taXNlcyBhcmUgcmVzb2x2ZWQuCiAgICoKICAgKiBAcGFyYW0ge0FycmF5LjxQcm9taXNlPn0gcHJvbWlzZXMgQW4gYXJyYXkgb2YgcHJvbWlzZXMuCiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBzaW5nbGUgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBhbiBhcnJheSBvZiB2YWx1ZXMsCiAgICogICBlYWNoIHZhbHVlIGNvcmVzcG9uZGluZyB0byB0aGUgcHJvbWlzZSBhdCB0aGUgc2FtZSBpbmRleCBpbiB0aGUgYHByb21pc2VzYCBhcnJheS4gSWYgYW55IG9mCiAgICogICB0aGUgcHJvbWlzZXMgaXMgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbiwgdGhpcyByZXN1bHRpbmcgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGggdGhlCiAgICogICBzYW1lIHJlamVjdGlvbi4KICAgKi8KICBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHsKICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCksCiAgICAgICAgY291bnRlciA9IHByb21pc2VzLmxlbmd0aCwKICAgICAgICByZXN1bHRzID0gW107CgogICAgaWYgKGNvdW50ZXIpIHsKICAgICAgZm9yRWFjaChwcm9taXNlcywgZnVuY3Rpb24ocHJvbWlzZSwgaW5kZXgpIHsKICAgICAgICByZWYocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgaWYgKGluZGV4IGluIHJlc3VsdHMpIHJldHVybjsKICAgICAgICAgIHJlc3VsdHNbaW5kZXhdID0gdmFsdWU7CiAgICAgICAgICBpZiAoISgtLWNvdW50ZXIpKSBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpOwogICAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgewogICAgICAgICAgaWYgKGluZGV4IGluIHJlc3VsdHMpIHJldHVybjsKICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZWFzb24pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0cyk7CiAgICB9CgogICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7CiAgfQoKICByZXR1cm4gewogICAgZGVmZXI6IGRlZmVyLAogICAgcmVqZWN0OiByZWplY3QsCiAgICB3aGVuOiB3aGVuLAogICAgYWxsOiBhbGwKICB9Owp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kcm91dGVQcm92aWRlcgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIFVzZWQgZm9yIGNvbmZpZ3VyaW5nIHJvdXRlcy4gU2VlIHtAbGluayBuZy4kcm91dGUgJHJvdXRlfSBmb3IgYW4gZXhhbXBsZS4KICovCmZ1bmN0aW9uICRSb3V0ZVByb3ZpZGVyKCl7CiAgdmFyIHJvdXRlcyA9IHt9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJHJvdXRlUHJvdmlkZXIjd2hlbgogICAqIEBtZXRob2RPZiBuZy4kcm91dGVQcm92aWRlcgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUm91dGUgcGF0aCAobWF0Y2hlZCBhZ2FpbnN0IGAkbG9jYXRpb24ucGF0aGApLiBJZiBgJGxvY2F0aW9uLnBhdGhgCiAgICogICAgY29udGFpbnMgcmVkdW5kYW50IHRyYWlsaW5nIHNsYXNoIG9yIGlzIG1pc3Npbmcgb25lLCB0aGUgcm91dGUgd2lsbCBzdGlsbCBtYXRjaCBhbmQgdGhlCiAgICogICAgYCRsb2NhdGlvbi5wYXRoYCB3aWxsIGJlIHVwZGF0ZWQgdG8gYWRkIG9yIGRyb3AgdGhlIHRyYWlsaW5nIHNsYXNoIHRvIGV4YWNseSBtYXRjaCB0aGUKICAgKiAgICByb3V0ZSBkZWZpbml0aW9uLgogICAqIEBwYXJhbSB7T2JqZWN0fSByb3V0ZSBNYXBwaW5nIGluZm9ybWF0aW9uIHRvIGJlIGFzc2lnbmVkIHRvIGAkcm91dGUuY3VycmVudGAgb24gcm91dGUKICAgKiAgICBtYXRjaC4KICAgKgogICAqICAgIE9iamVjdCBwcm9wZXJ0aWVzOgogICAqCiAgICogICAgLSBgY29udHJvbGxlcmAg4oCTIGB7KHN0cmluZ3xmdW5jdGlvbigpPX1gIOKAkyBDb250cm9sbGVyIGZuIHRoYXQgc2hvdWxkIGJlIGFzc29jaWF0ZWQgd2l0aCBuZXdseQogICAqICAgICAgY3JlYXRlZCBzY29wZSBvciB0aGUgbmFtZSBvZiBhIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb250cm9sbGVyIHJlZ2lzdGVyZWQgY29udHJvbGxlcn0KICAgKiAgICAgIGlmIHBhc3NlZCBhcyBhIHN0cmluZy4KICAgKiAgICAtIGB0ZW1wbGF0ZWAg4oCTIGB7c3RyaW5nPX1gIOKAkyAgaHRtbCB0ZW1wbGF0ZSBhcyBhIHN0cmluZyB0aGF0IHNob3VsZCBiZSB1c2VkIGJ5CiAgICogICAgICB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nVmlldyBuZ1ZpZXd9IG9yCiAgICogICAgICB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBuZ0luY2x1ZGV9IGRpcmVjdGl2ZXMuCiAgICogICAgICB0aGlzIHByb3BlcnR5IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgdGVtcGxhdGVVcmxgLgogICAqICAgIC0gYHRlbXBsYXRlVXJsYCDigJMgYHtzdHJpbmc9fWAg4oCTIHBhdGggdG8gYW4gaHRtbCB0ZW1wbGF0ZSB0aGF0IHNob3VsZCBiZSB1c2VkIGJ5CiAgICogICAgICB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nVmlldyBuZ1ZpZXd9LgogICAqICAgIC0gYHJlc29sdmVgIC0gYHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+PX1gIC0gQW4gb3B0aW9uYWwgbWFwIG9mIGRlcGVuZGVuY2llcyB3aGljaCBzaG91bGQKICAgKiAgICAgIGJlIGluamVjdGVkIGludG8gdGhlIGNvbnRyb2xsZXIuIElmIGFueSBvZiB0aGVzZSBkZXBlbmRlbmNpZXMgYXJlIHByb21pc2VzLCB0aGV5IHdpbGwgYmUKICAgKiAgICAgIHJlc29sdmVkIGFuZCBjb252ZXJ0ZWQgdG8gYSB2YWx1ZSBiZWZvcmUgdGhlIGNvbnRyb2xsZXIgaXMgaW5zdGFudGlhdGVkIGFuZCB0aGUKICAgKiAgICAgIGAkcm91dGVDaGFuZ2VTdWNjZXNzYCBldmVudCBpcyBmaXJlZC4gVGhlIG1hcCBvYmplY3QgaXM6CiAgICoKICAgKiAgICAgIC0gYGtleWAg4oCTIGB7c3RyaW5nfWA6IGEgbmFtZSBvZiBhIGRlcGVuZGVuY3kgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgY29udHJvbGxlci4KICAgKiAgICAgIC0gYGZhY3RvcnlgIC0gYHtzdHJpbmd8ZnVuY3Rpb259YDogSWYgYHN0cmluZ2AgdGhlbiBpdCBpcyBhbiBhbGlhcyBmb3IgYSBzZXJ2aWNlLgogICAqICAgICAgICBPdGhlcndpc2UgaWYgZnVuY3Rpb24sIHRoZW4gaXQgaXMge0BsaW5rIGFwaS9BVVRPLiRpbmplY3RvciNpbnZva2UgaW5qZWN0ZWR9CiAgICogICAgICAgIGFuZCB0aGUgcmV0dXJuIHZhbHVlIGlzIHRyZWF0ZWQgYXMgdGhlIGRlcGVuZGVuY3kuIElmIHRoZSByZXN1bHQgaXMgYSBwcm9taXNlLCBpdCBpcyByZXNvbHZlZAogICAqICAgICAgICBiZWZvcmUgaXRzIHZhbHVlIGlzIGluamVjdGVkIGludG8gdGhlIGNvbnRyb2xsZXIuCiAgICoKICAgKiAgICAtIGByZWRpcmVjdFRvYCDigJMgeyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSDigJMgdmFsdWUgdG8gdXBkYXRlCiAgICogICAgICB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbn0gcGF0aCB3aXRoIGFuZCB0cmlnZ2VyIHJvdXRlIHJlZGlyZWN0aW9uLgogICAqCiAgICogICAgICBJZiBgcmVkaXJlY3RUb2AgaXMgYSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6CiAgICoKICAgKiAgICAgIC0gYHtPYmplY3QuPHN0cmluZz59YCAtIHJvdXRlIHBhcmFtZXRlcnMgZXh0cmFjdGVkIGZyb20gdGhlIGN1cnJlbnQKICAgKiAgICAgICAgYCRsb2NhdGlvbi5wYXRoKClgIGJ5IGFwcGx5aW5nIHRoZSBjdXJyZW50IHJvdXRlIHRlbXBsYXRlVXJsLgogICAqICAgICAgLSBge3N0cmluZ31gIC0gY3VycmVudCBgJGxvY2F0aW9uLnBhdGgoKWAKICAgKiAgICAgIC0gYHtPYmplY3R9YCAtIGN1cnJlbnQgYCRsb2NhdGlvbi5zZWFyY2goKWAKICAgKgogICAqICAgICAgVGhlIGN1c3RvbSBgcmVkaXJlY3RUb2AgZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgc3RyaW5nIHdoaWNoIHdpbGwgYmUgdXNlZAogICAqICAgICAgdG8gdXBkYXRlIGAkbG9jYXRpb24ucGF0aCgpYCBhbmQgYCRsb2NhdGlvbi5zZWFyY2goKWAuCiAgICoKICAgKiAgICAtIGBbcmVsb2FkT25TZWFyY2g9dHJ1ZV1gIC0ge2Jvb2xlYW49fSAtIHJlbG9hZCByb3V0ZSB3aGVuIG9ubHkgJGxvY2F0aW9uLnNlYXJjaCgpCiAgICogICAgY2hhbmdlcy4KICAgKgogICAqICAgICAgSWYgdGhlIG9wdGlvbiBpcyBzZXQgdG8gYGZhbHNlYCBhbmQgdXJsIGluIHRoZSBicm93c2VyIGNoYW5nZXMsIHRoZW4KICAgKiAgICAgIGAkcm91dGVVcGRhdGVgIGV2ZW50IGlzIGJyb2FkY2FzdGVkIG9uIHRoZSByb290IHNjb3BlLgogICAqCiAgICogQHJldHVybnMge09iamVjdH0gc2VsZgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogQWRkcyBhIG5ldyByb3V0ZSBkZWZpbml0aW9uIHRvIHRoZSBgJHJvdXRlYCBzZXJ2aWNlLgogICAqLwogIHRoaXMud2hlbiA9IGZ1bmN0aW9uKHBhdGgsIHJvdXRlKSB7CiAgICByb3V0ZXNbcGF0aF0gPSBleHRlbmQoe3JlbG9hZE9uU2VhcmNoOiB0cnVlfSwgcm91dGUpOwoKICAgIC8vIGNyZWF0ZSByZWRpcmVjdGlvbiBmb3IgdHJhaWxpbmcgc2xhc2hlcwogICAgaWYgKHBhdGgpIHsKICAgICAgdmFyIHJlZGlyZWN0UGF0aCA9IChwYXRoW3BhdGgubGVuZ3RoLTFdID09ICcvJykKICAgICAgICAgID8gcGF0aC5zdWJzdHIoMCwgcGF0aC5sZW5ndGgtMSkKICAgICAgICAgIDogcGF0aCArJy8nOwoKICAgICAgcm91dGVzW3JlZGlyZWN0UGF0aF0gPSB7cmVkaXJlY3RUbzogcGF0aH07CiAgICB9CgogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRyb3V0ZVByb3ZpZGVyI290aGVyd2lzZQogICAqIEBtZXRob2RPZiBuZy4kcm91dGVQcm92aWRlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyByb3V0ZSBkZWZpbml0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIG9uIHJvdXRlIGNoYW5nZSB3aGVuIG5vIG90aGVyIHJvdXRlIGRlZmluaXRpb24KICAgKiBpcyBtYXRjaGVkLgogICAqCiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBNYXBwaW5nIGluZm9ybWF0aW9uIHRvIGJlIGFzc2lnbmVkIHRvIGAkcm91dGUuY3VycmVudGAuCiAgICogQHJldHVybnMge09iamVjdH0gc2VsZgogICAqLwogIHRoaXMub3RoZXJ3aXNlID0gZnVuY3Rpb24ocGFyYW1zKSB7CiAgICB0aGlzLndoZW4obnVsbCwgcGFyYW1zKTsKICAgIHJldHVybiB0aGlzOwogIH07CgoKICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICckcScsICckaW5qZWN0b3InLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLAogICAgICBmdW5jdGlvbiggJHJvb3RTY29wZSwgICAkbG9jYXRpb24sICAgJHJvdXRlUGFyYW1zLCAgICRxLCAgICRpbmplY3RvciwgICAkaHR0cCwgICAkdGVtcGxhdGVDYWNoZSkgewoKICAgIC8qKgogICAgICogQG5nZG9jIG9iamVjdAogICAgICogQG5hbWUgbmcuJHJvdXRlCiAgICAgKiBAcmVxdWlyZXMgJGxvY2F0aW9uCiAgICAgKiBAcmVxdWlyZXMgJHJvdXRlUGFyYW1zCiAgICAgKgogICAgICogQHByb3BlcnR5IHtPYmplY3R9IGN1cnJlbnQgUmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHJvdXRlIGRlZmluaXRpb24uCiAgICAgKiBUaGUgcm91dGUgZGVmaW5pdGlvbiBjb250YWluczoKICAgICAqCiAgICAgKiAgIC0gYGNvbnRyb2xsZXJgOiBUaGUgY29udHJvbGxlciBjb25zdHJ1Y3RvciBhcyBkZWZpbmUgaW4gcm91dGUgZGVmaW5pdGlvbi4KICAgICAqICAgLSBgbG9jYWxzYDogQSBtYXAgb2YgbG9jYWxzIHdoaWNoIGlzIHVzZWQgYnkge0BsaW5rIG5nLiRjb250cm9sbGVyICRjb250cm9sbGVyfSBzZXJ2aWNlIGZvcgogICAgICogICAgIGNvbnRyb2xsZXIgaW5zdGFudGlhdGlvbi4gVGhlIGBsb2NhbHNgIGNvbnRhaW4KICAgICAqICAgICB0aGUgcmVzb2x2ZWQgdmFsdWVzIG9mIHRoZSBgcmVzb2x2ZWAgbWFwLiBBZGRpdGlvbmFsbHkgdGhlIGBsb2NhbHNgIGFsc28gY29udGFpbjoKICAgICAqCiAgICAgKiAgICAgLSBgJHNjb3BlYCAtIFRoZSBjdXJyZW50IHJvdXRlIHNjb3BlLgogICAgICogICAgIC0gYCR0ZW1wbGF0ZWAgLSBUaGUgY3VycmVudCByb3V0ZSB0ZW1wbGF0ZSBIVE1MLgogICAgICoKICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPE9iamVjdD59IHJvdXRlcyBBcnJheSBvZiBhbGwgY29uZmlndXJlZCByb3V0ZXMuCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBJcyB1c2VkIGZvciBkZWVwLWxpbmtpbmcgVVJMcyB0byBjb250cm9sbGVycyBhbmQgdmlld3MgKEhUTUwgcGFydGlhbHMpLgogICAgICogSXQgd2F0Y2hlcyBgJGxvY2F0aW9uLnVybCgpYCBhbmQgdHJpZXMgdG8gbWFwIHRoZSBwYXRoIHRvIGFuIGV4aXN0aW5nIHJvdXRlIGRlZmluaXRpb24uCiAgICAgKgogICAgICogWW91IGNhbiBkZWZpbmUgcm91dGVzIHRocm91Z2gge0BsaW5rIG5nLiRyb3V0ZVByb3ZpZGVyICRyb3V0ZVByb3ZpZGVyfSdzIEFQSS4KICAgICAqCiAgICAgKiBUaGUgYCRyb3V0ZWAgc2VydmljZSBpcyB0eXBpY2FsbHkgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHtAbGluayBuZy5kaXJlY3RpdmU6bmdWaWV3IG5nVmlld30KICAgICAqIGRpcmVjdGl2ZSBhbmQgdGhlIHtAbGluayBuZy4kcm91dGVQYXJhbXMgJHJvdXRlUGFyYW1zfSBzZXJ2aWNlLgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgICBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IGNoYW5naW5nIHRoZSBVUkwgaGFzaCBjYXVzZXMgdGhlIGAkcm91dGVgIHRvIG1hdGNoIGEgcm91dGUgYWdhaW5zdCB0aGUKICAgICAgIFVSTCwgYW5kIHRoZSBgbmdWaWV3YCBwdWxscyBpbiB0aGUgcGFydGlhbC4KCiAgICAgICBOb3RlIHRoYXQgdGhpcyBleGFtcGxlIGlzIHVzaW5nIHtAbGluayBuZy5kaXJlY3RpdmU6c2NyaXB0IGlubGluZWQgdGVtcGxhdGVzfQogICAgICAgdG8gZ2V0IGl0IHdvcmtpbmcgb24ganNmaWRkbGUgYXMgd2VsbC4KCiAgICAgPGV4YW1wbGUgbW9kdWxlPSJuZ1ZpZXciPgogICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iTWFpbkNudGwiPgogICAgICAgICAgIENob29zZToKICAgICAgICAgICA8YSBocmVmPSJCb29rL01vYnkiPk1vYnk8L2E+IHwKICAgICAgICAgICA8YSBocmVmPSJCb29rL01vYnkvY2gvMSI+TW9ieTogQ2gxPC9hPiB8CiAgICAgICAgICAgPGEgaHJlZj0iQm9vay9HYXRzYnkiPkdhdHNieTwvYT4gfAogICAgICAgICAgIDxhIGhyZWY9IkJvb2svR2F0c2J5L2NoLzQ/a2V5PXZhbHVlIj5HYXRzYnk6IENoNDwvYT4gfAogICAgICAgICAgIDxhIGhyZWY9IkJvb2svU2NhcmxldCI+U2NhcmxldCBMZXR0ZXI8L2E+PGJyLz4KCiAgICAgICAgICAgPGRpdiBuZy12aWV3PjwvZGl2PgogICAgICAgICAgIDxociAvPgoKICAgICAgICAgICA8cHJlPiRsb2NhdGlvbi5wYXRoKCkgPSB7eyRsb2NhdGlvbi5wYXRoKCl9fTwvcHJlPgogICAgICAgICAgIDxwcmU+JHJvdXRlLmN1cnJlbnQudGVtcGxhdGVVcmwgPSB7eyRyb3V0ZS5jdXJyZW50LnRlbXBsYXRlVXJsfX08L3ByZT4KICAgICAgICAgICA8cHJlPiRyb3V0ZS5jdXJyZW50LnBhcmFtcyA9IHt7JHJvdXRlLmN1cnJlbnQucGFyYW1zfX08L3ByZT4KICAgICAgICAgICA8cHJlPiRyb3V0ZS5jdXJyZW50LnNjb3BlLm5hbWUgPSB7eyRyb3V0ZS5jdXJyZW50LnNjb3BlLm5hbWV9fTwvcHJlPgogICAgICAgICAgIDxwcmU+JHJvdXRlUGFyYW1zID0ge3skcm91dGVQYXJhbXN9fTwvcHJlPgogICAgICAgICA8L2Rpdj4KICAgICAgIDwvZmlsZT4KCiAgICAgICA8ZmlsZSBuYW1lPSJib29rLmh0bWwiPgogICAgICAgICBjb250cm9sbGVyOiB7e25hbWV9fTxiciAvPgogICAgICAgICBCb29rIElkOiB7e3BhcmFtcy5ib29rSWR9fTxiciAvPgogICAgICAgPC9maWxlPgoKICAgICAgIDxmaWxlIG5hbWU9ImNoYXB0ZXIuaHRtbCI+CiAgICAgICAgIGNvbnRyb2xsZXI6IHt7bmFtZX19PGJyIC8+CiAgICAgICAgIEJvb2sgSWQ6IHt7cGFyYW1zLmJvb2tJZH19PGJyIC8+CiAgICAgICAgIENoYXB0ZXIgSWQ6IHt7cGFyYW1zLmNoYXB0ZXJJZH19CiAgICAgICA8L2ZpbGU+CgogICAgICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ25nVmlldycsIFtdLCBmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHsKICAgICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvQm9vay86Ym9va0lkJywgewogICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdib29rLmh0bWwnLAogICAgICAgICAgICAgY29udHJvbGxlcjogQm9va0NudGwsCiAgICAgICAgICAgICByZXNvbHZlOiB7CiAgICAgICAgICAgICAgIC8vIEkgd2lsbCBjYXVzZSBhIDEgc2Vjb25kIGRlbGF5CiAgICAgICAgICAgICAgIGRlbGF5OiBmdW5jdGlvbigkcSwgJHRpbWVvdXQpIHsKICAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSAkcS5kZWZlcigpOwogICAgICAgICAgICAgICAgICR0aW1lb3V0KGRlbGF5LnJlc29sdmUsIDEwMDApOwogICAgICAgICAgICAgICAgIHJldHVybiBkZWxheS5wcm9taXNlOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9CiAgICAgICAgICAgfSk7CiAgICAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignL0Jvb2svOmJvb2tJZC9jaC86Y2hhcHRlcklkJywgewogICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjaGFwdGVyLmh0bWwnLAogICAgICAgICAgICAgY29udHJvbGxlcjogQ2hhcHRlckNudGwKICAgICAgICAgICB9KTsKCiAgICAgICAgICAgLy8gY29uZmlndXJlIGh0bWw1IHRvIGdldCBsaW5rcyB3b3JraW5nIG9uIGpzZmlkZGxlCiAgICAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpOwogICAgICAgICB9KTsKCiAgICAgICAgIGZ1bmN0aW9uIE1haW5DbnRsKCRzY29wZSwgJHJvdXRlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbikgewogICAgICAgICAgICRzY29wZS4kcm91dGUgPSAkcm91dGU7CiAgICAgICAgICAgJHNjb3BlLiRsb2NhdGlvbiA9ICRsb2NhdGlvbjsKICAgICAgICAgICAkc2NvcGUuJHJvdXRlUGFyYW1zID0gJHJvdXRlUGFyYW1zOwogICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiBCb29rQ250bCgkc2NvcGUsICRyb3V0ZVBhcmFtcykgewogICAgICAgICAgICRzY29wZS5uYW1lID0gIkJvb2tDbnRsIjsKICAgICAgICAgICAkc2NvcGUucGFyYW1zID0gJHJvdXRlUGFyYW1zOwogICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiBDaGFwdGVyQ250bCgkc2NvcGUsICRyb3V0ZVBhcmFtcykgewogICAgICAgICAgICRzY29wZS5uYW1lID0gIkNoYXB0ZXJDbnRsIjsKICAgICAgICAgICAkc2NvcGUucGFyYW1zID0gJHJvdXRlUGFyYW1zOwogICAgICAgICB9CiAgICAgICA8L2ZpbGU+CgogICAgICAgPGZpbGUgbmFtZT0ic2NlbmFyaW8uanMiPgogICAgICAgICBpdCgnc2hvdWxkIGxvYWQgYW5kIGNvbXBpbGUgY29ycmVjdCB0ZW1wbGF0ZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgIGVsZW1lbnQoJ2E6Y29udGFpbnMoIk1vYnk6IENoMSIpJykuY2xpY2soKTsKICAgICAgICAgICB2YXIgY29udGVudCA9IGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy12aWV3XScpLnRleHQoKTsKICAgICAgICAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvY29udHJvbGxlclw6IENoYXB0ZXJDbnRsLyk7CiAgICAgICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL0Jvb2sgSWRcOiBNb2J5Lyk7CiAgICAgICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL0NoYXB0ZXIgSWRcOiAxLyk7CgogICAgICAgICAgIGVsZW1lbnQoJ2E6Y29udGFpbnMoIlNjYXJsZXQiKScpLmNsaWNrKCk7CiAgICAgICAgICAgc2xlZXAoMik7IC8vIHByb21pc2VzIGFyZSBub3QgcGFydCBvZiBzY2VuYXJpbyB3YWl0aW5nCiAgICAgICAgICAgY29udGVudCA9IGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy12aWV3XScpLnRleHQoKTsKICAgICAgICAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvY29udHJvbGxlclw6IEJvb2tDbnRsLyk7CiAgICAgICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL0Jvb2sgSWRcOiBTY2FybGV0Lyk7CiAgICAgICAgIH0pOwogICAgICAgPC9maWxlPgogICAgIDwvZXhhbXBsZT4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIGV2ZW50CiAgICAgKiBAbmFtZSBuZy4kcm91dGUjJHJvdXRlQ2hhbmdlU3RhcnQKICAgICAqIEBldmVudE9mIG5nLiRyb3V0ZQogICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZQogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBCcm9hZGNhc3RlZCBiZWZvcmUgYSByb3V0ZSBjaGFuZ2UuIEF0IHRoaXMgIHBvaW50IHRoZSByb3V0ZSBzZXJ2aWNlcyBzdGFydHMKICAgICAqIHJlc29sdmluZyBhbGwgb2YgdGhlIGRlcGVuZGVuY2llcyBuZWVkZWQgZm9yIHRoZSByb3V0ZSBjaGFuZ2UgdG8gb2NjdXJzLgogICAgICogVHlwaWNhbGx5IHRoaXMgaW52b2x2ZXMgZmV0Y2hpbmcgdGhlIHZpZXcgdGVtcGxhdGUgYXMgd2VsbCBhcyBhbnkgZGVwZW5kZW5jaWVzCiAgICAgKiBkZWZpbmVkIGluIGByZXNvbHZlYCByb3V0ZSBwcm9wZXJ0eS4gT25jZSAgYWxsIG9mIHRoZSBkZXBlbmRlbmNpZXMgYXJlIHJlc29sdmVkCiAgICAgKiBgJHJvdXRlQ2hhbmdlU3VjY2Vzc2AgaXMgZmlyZWQuCiAgICAgKgogICAgICogQHBhcmFtIHtSb3V0ZX0gbmV4dCBGdXR1cmUgcm91dGUgaW5mb3JtYXRpb24uCiAgICAgKiBAcGFyYW0ge1JvdXRlfSBjdXJyZW50IEN1cnJlbnQgcm91dGUgaW5mb3JtYXRpb24uCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBldmVudAogICAgICogQG5hbWUgbmcuJHJvdXRlIyRyb3V0ZUNoYW5nZVN1Y2Nlc3MKICAgICAqIEBldmVudE9mIG5nLiRyb3V0ZQogICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZQogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBCcm9hZGNhc3RlZCBhZnRlciBhIHJvdXRlIGRlcGVuZGVuY2llcyBhcmUgcmVzb2x2ZWQuCiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nVmlldyBuZ1ZpZXd9IGxpc3RlbnMgZm9yIHRoZSBkaXJlY3RpdmUKICAgICAqIHRvIGluc3RhbnRpYXRlIHRoZSBjb250cm9sbGVyIGFuZCByZW5kZXIgdGhlIHZpZXcuCiAgICAgKgogICAgICogQHBhcmFtIHtSb3V0ZX0gY3VycmVudCBDdXJyZW50IHJvdXRlIGluZm9ybWF0aW9uLgogICAgICogQHBhcmFtIHtSb3V0ZX0gcHJldmlvdXMgUHJldmlvdXMgcm91dGUgaW5mb3JtYXRpb24uCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBldmVudAogICAgICogQG5hbWUgbmcuJHJvdXRlIyRyb3V0ZUNoYW5nZUVycm9yCiAgICAgKiBAZXZlbnRPZiBuZy4kcm91dGUKICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGUKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogQnJvYWRjYXN0ZWQgaWYgYW55IG9mIHRoZSByZXNvbHZlIHByb21pc2VzIGFyZSByZWplY3RlZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge1JvdXRlfSBjdXJyZW50IEN1cnJlbnQgcm91dGUgaW5mb3JtYXRpb24uCiAgICAgKiBAcGFyYW0ge1JvdXRlfSBwcmV2aW91cyBQcmV2aW91cyByb3V0ZSBpbmZvcm1hdGlvbi4KICAgICAqIEBwYXJhbSB7Um91dGV9IHJlamVjdGlvbiBSZWplY3Rpb24gb2YgdGhlIHByb21pc2UuIFVzdWFsbHkgdGhlIGVycm9yIG9mIHRoZSBmYWlsZWQgcHJvbWlzZS4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIGV2ZW50CiAgICAgKiBAbmFtZSBuZy4kcm91dGUjJHJvdXRlVXBkYXRlCiAgICAgKiBAZXZlbnRPZiBuZy4kcm91dGUKICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGUKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICoKICAgICAqIFRoZSBgcmVsb2FkT25TZWFyY2hgIHByb3BlcnR5IGhhcyBiZWVuIHNldCB0byBmYWxzZSwgYW5kIHdlIGFyZSByZXVzaW5nIHRoZSBzYW1lCiAgICAgKiBpbnN0YW5jZSBvZiB0aGUgQ29udHJvbGxlci4KICAgICAqLwoKICAgIHZhciBtYXRjaGVyID0gc3dpdGNoUm91dGVNYXRjaGVyLAogICAgICAgIGZvcmNlUmVsb2FkID0gZmFsc2UsCiAgICAgICAgJHJvdXRlID0gewogICAgICAgICAgcm91dGVzOiByb3V0ZXMsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBuZy4kcm91dGUjcmVsb2FkCiAgICAgICAgICAgKiBAbWV0aG9kT2YgbmcuJHJvdXRlCiAgICAgICAgICAgKgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBDYXVzZXMgYCRyb3V0ZWAgc2VydmljZSB0byByZWxvYWQgdGhlIGN1cnJlbnQgcm91dGUgZXZlbiBpZgogICAgICAgICAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb259IGhhc24ndCBjaGFuZ2VkLgogICAgICAgICAgICoKICAgICAgICAgICAqIEFzIGEgcmVzdWx0IG9mIHRoYXQsIHtAbGluayBuZy5kaXJlY3RpdmU6bmdWaWV3IG5nVmlld30KICAgICAgICAgICAqIGNyZWF0ZXMgbmV3IHNjb3BlLCByZWluc3RhbnRpYXRlcyB0aGUgY29udHJvbGxlci4KICAgICAgICAgICAqLwogICAgICAgICAgcmVsb2FkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZm9yY2VSZWxvYWQgPSB0cnVlOwogICAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmModXBkYXRlUm91dGUpOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCB1cGRhdGVSb3V0ZSk7CgogICAgcmV0dXJuICRyb3V0ZTsKCiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgIGZ1bmN0aW9uIHN3aXRjaFJvdXRlTWF0Y2hlcihvbiwgd2hlbikgewogICAgICAvLyBUT0RPKGkpOiB0aGlzIGNvZGUgaXMgY29udm9sdXRlZCBhbmQgaW5lZmZpY2llbnQsIHdlIHNob3VsZCBjb25zdHJ1Y3QgdGhlIHJvdXRlIG1hdGNoaW5nCiAgICAgIC8vICAgcmVnZXggb25seSBvbmNlIGFuZCB0aGVuIHJldXNlIGl0CiAgICAgIHZhciByZWdleCA9ICdeJyArIHdoZW4ucmVwbGFjZSgvKFtcLlxcXChcKVxeXCRdKS9nLCAiXFwkMSIpICsgJyQnLAogICAgICAgICAgcGFyYW1zID0gW10sCiAgICAgICAgICBkc3QgPSB7fTsKICAgICAgZm9yRWFjaCh3aGVuLnNwbGl0KC9cVy8pLCBmdW5jdGlvbihwYXJhbSkgewogICAgICAgIGlmIChwYXJhbSkgewogICAgICAgICAgdmFyIHBhcmFtUmVnRXhwID0gbmV3IFJlZ0V4cCgiOiIgKyBwYXJhbSArICIoW1xcV10pIik7CiAgICAgICAgICBpZiAocmVnZXgubWF0Y2gocGFyYW1SZWdFeHApKSB7CiAgICAgICAgICAgIHJlZ2V4ID0gcmVnZXgucmVwbGFjZShwYXJhbVJlZ0V4cCwgIihbXlxcL10qKSQxIik7CiAgICAgICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICB2YXIgbWF0Y2ggPSBvbi5tYXRjaChuZXcgUmVnRXhwKHJlZ2V4KSk7CiAgICAgIGlmIChtYXRjaCkgewogICAgICAgIGZvckVhY2gocGFyYW1zLCBmdW5jdGlvbihuYW1lLCBpbmRleCkgewogICAgICAgICAgZHN0W25hbWVdID0gbWF0Y2hbaW5kZXggKyAxXTsKICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gbWF0Y2ggPyBkc3QgOiBudWxsOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZVJvdXRlKCkgewogICAgICB2YXIgbmV4dCA9IHBhcnNlUm91dGUoKSwKICAgICAgICAgIGxhc3QgPSAkcm91dGUuY3VycmVudDsKCiAgICAgIGlmIChuZXh0ICYmIGxhc3QgJiYgbmV4dC4kcm91dGUgPT09IGxhc3QuJHJvdXRlCiAgICAgICAgICAmJiBlcXVhbHMobmV4dC5wYXRoUGFyYW1zLCBsYXN0LnBhdGhQYXJhbXMpICYmICFuZXh0LnJlbG9hZE9uU2VhcmNoICYmICFmb3JjZVJlbG9hZCkgewogICAgICAgIGxhc3QucGFyYW1zID0gbmV4dC5wYXJhbXM7CiAgICAgICAgY29weShsYXN0LnBhcmFtcywgJHJvdXRlUGFyYW1zKTsKICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRyb3V0ZVVwZGF0ZScsIGxhc3QpOwogICAgICB9IGVsc2UgaWYgKG5leHQgfHwgbGFzdCkgewogICAgICAgIGZvcmNlUmVsb2FkID0gZmFsc2U7CiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckcm91dGVDaGFuZ2VTdGFydCcsIG5leHQsIGxhc3QpOwogICAgICAgICRyb3V0ZS5jdXJyZW50ID0gbmV4dDsKICAgICAgICBpZiAobmV4dCkgewogICAgICAgICAgaWYgKG5leHQucmVkaXJlY3RUbykgewogICAgICAgICAgICBpZiAoaXNTdHJpbmcobmV4dC5yZWRpcmVjdFRvKSkgewogICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKGludGVycG9sYXRlKG5leHQucmVkaXJlY3RUbywgbmV4dC5wYXJhbXMpKS5zZWFyY2gobmV4dC5wYXJhbXMpCiAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAkbG9jYXRpb24udXJsKG5leHQucmVkaXJlY3RUbyhuZXh0LnBhdGhQYXJhbXMsICRsb2NhdGlvbi5wYXRoKCksICRsb2NhdGlvbi5zZWFyY2goKSkpCiAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJHEud2hlbihuZXh0KS4KICAgICAgICAgIHRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmIChuZXh0KSB7CiAgICAgICAgICAgICAgdmFyIGtleXMgPSBbXSwKICAgICAgICAgICAgICAgICAgdmFsdWVzID0gW10sCiAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOwoKICAgICAgICAgICAgICBmb3JFYWNoKG5leHQucmVzb2x2ZSB8fCB7fSwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7CiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChpc1N0cmluZyh2YWx1ZSkgPyAkaW5qZWN0b3IuZ2V0KHZhbHVlKSA6ICRpbmplY3Rvci5pbnZva2UodmFsdWUpKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHRlbXBsYXRlID0gbmV4dC50ZW1wbGF0ZSkpIHsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZCh0ZW1wbGF0ZSA9IG5leHQudGVtcGxhdGVVcmwpKSB7CiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICRodHRwLmdldCh0ZW1wbGF0ZSwge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLgogICAgICAgICAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLmRhdGE7IH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHRlbXBsYXRlKSkgewogICAgICAgICAgICAgICAga2V5cy5wdXNoKCckdGVtcGxhdGUnKTsKICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRlbXBsYXRlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbCh2YWx1ZXMpLnRoZW4oZnVuY3Rpb24odmFsdWVzKSB7CiAgICAgICAgICAgICAgICB2YXIgbG9jYWxzID0ge307CiAgICAgICAgICAgICAgICBmb3JFYWNoKHZhbHVlcywgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgIGxvY2Fsc1trZXlzW2luZGV4XV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsczsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkuCiAgICAgICAgICAvLyBhZnRlciByb3V0ZSBjaGFuZ2UKICAgICAgICAgIHRoZW4oZnVuY3Rpb24obG9jYWxzKSB7CiAgICAgICAgICAgIGlmIChuZXh0ID09ICRyb3V0ZS5jdXJyZW50KSB7CiAgICAgICAgICAgICAgaWYgKG5leHQpIHsKICAgICAgICAgICAgICAgIG5leHQubG9jYWxzID0gbG9jYWxzOwogICAgICAgICAgICAgICAgY29weShuZXh0LnBhcmFtcywgJHJvdXRlUGFyYW1zKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckcm91dGVDaGFuZ2VTdWNjZXNzJywgbmV4dCwgbGFzdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7CiAgICAgICAgICAgIGlmIChuZXh0ID09ICRyb3V0ZS5jdXJyZW50KSB7CiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckcm91dGVDaGFuZ2VFcnJvcicsIG5leHQsIGxhc3QsIGVycm9yKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCgogICAgLyoqCiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBhY3RpdmUgcm91dGUsIGJ5IG1hdGNoaW5nIGl0IGFnYWluc3QgdGhlIFVSTAogICAgICovCiAgICBmdW5jdGlvbiBwYXJzZVJvdXRlKCkgewogICAgICAvLyBNYXRjaCBhIHJvdXRlCiAgICAgIHZhciBwYXJhbXMsIG1hdGNoOwogICAgICBmb3JFYWNoKHJvdXRlcywgZnVuY3Rpb24ocm91dGUsIHBhdGgpIHsKICAgICAgICBpZiAoIW1hdGNoICYmIChwYXJhbXMgPSBtYXRjaGVyKCRsb2NhdGlvbi5wYXRoKCksIHBhdGgpKSkgewogICAgICAgICAgbWF0Y2ggPSBpbmhlcml0KHJvdXRlLCB7CiAgICAgICAgICAgIHBhcmFtczogZXh0ZW5kKHt9LCAkbG9jYXRpb24uc2VhcmNoKCksIHBhcmFtcyksCiAgICAgICAgICAgIHBhdGhQYXJhbXM6IHBhcmFtc30pOwogICAgICAgICAgbWF0Y2guJHJvdXRlID0gcm91dGU7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgLy8gTm8gcm91dGUgbWF0Y2hlZDsgZmFsbGJhY2sgdG8gIm90aGVyd2lzZSIgcm91dGUKICAgICAgcmV0dXJuIG1hdGNoIHx8IHJvdXRlc1tudWxsXSAmJiBpbmhlcml0KHJvdXRlc1tudWxsXSwge3BhcmFtczoge30sIHBhdGhQYXJhbXM6e319KTsKICAgIH0KCiAgICAvKioKICAgICAqIEByZXR1cm5zIGludGVycG9sYXRpb24gb2YgdGhlIHJlZGlyZWN0IHBhdGggd2l0aCB0aGUgcGFyYW1ldHJzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGludGVycG9sYXRlKHN0cmluZywgcGFyYW1zKSB7CiAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgZm9yRWFjaCgoc3RyaW5nfHwnJykuc3BsaXQoJzonKSwgZnVuY3Rpb24oc2VnbWVudCwgaSkgewogICAgICAgIGlmIChpID09IDApIHsKICAgICAgICAgIHJlc3VsdC5wdXNoKHNlZ21lbnQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgc2VnbWVudE1hdGNoID0gc2VnbWVudC5tYXRjaCgvKFx3KykoLiopLyk7CiAgICAgICAgICB2YXIga2V5ID0gc2VnbWVudE1hdGNoWzFdOwogICAgICAgICAgcmVzdWx0LnB1c2gocGFyYW1zW2tleV0pOwogICAgICAgICAgcmVzdWx0LnB1c2goc2VnbWVudE1hdGNoWzJdIHx8ICcnKTsKICAgICAgICAgIGRlbGV0ZSBwYXJhbXNba2V5XTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpOwogICAgfQogIH1dOwp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kcm91dGVQYXJhbXMKICogQHJlcXVpcmVzICRyb3V0ZQogKgogKiBAZGVzY3JpcHRpb24KICogQ3VycmVudCBzZXQgb2Ygcm91dGUgcGFyYW1ldGVycy4gVGhlIHJvdXRlIHBhcmFtZXRlcnMgYXJlIGEgY29tYmluYXRpb24gb2YgdGhlCiAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9ufSBgc2VhcmNoKClgLCBhbmQgYHBhdGgoKWAuIFRoZSBgcGF0aGAgcGFyYW1ldGVycwogKiBhcmUgZXh0cmFjdGVkIHdoZW4gdGhlIHtAbGluayBuZy4kcm91dGUgJHJvdXRlfSBwYXRoIGlzIG1hdGNoZWQuCiAqCiAqIEluIGNhc2Ugb2YgcGFyYW1ldGVyIG5hbWUgY29sbGlzaW9uLCBgcGF0aGAgcGFyYW1zIHRha2UgcHJlY2VkZW5jZSBvdmVyIGBzZWFyY2hgIHBhcmFtcy4KICoKICogVGhlIHNlcnZpY2UgZ3VhcmFudGVlcyB0aGF0IHRoZSBpZGVudGl0eSBvZiB0aGUgYCRyb3V0ZVBhcmFtc2Agb2JqZWN0IHdpbGwgcmVtYWluIHVuY2hhbmdlZAogKiAoYnV0IGl0cyBwcm9wZXJ0aWVzIHdpbGwgbGlrZWx5IGNoYW5nZSkgZXZlbiB3aGVuIGEgcm91dGUgY2hhbmdlIG9jY3Vycy4KICoKICogQGV4YW1wbGUKICogPHByZT4KICogIC8vIEdpdmVuOgogKiAgLy8gVVJMOiBodHRwOi8vc2VydmVyLmNvbS9pbmRleC5odG1sIy9DaGFwdGVyLzEvU2VjdGlvbi8yP3NlYXJjaD1tb2J5CiAqICAvLyBSb3V0ZTogL0NoYXB0ZXIvOmNoYXB0ZXJJZC9TZWN0aW9uLzpzZWN0aW9uSWQKICogIC8vCiAqICAvLyBUaGVuCiAqICAkcm91dGVQYXJhbXMgPT0+IHtjaGFwdGVySWQ6MSwgc2VjdGlvbklkOjIsIHNlYXJjaDonbW9ieSd9CiAqIDwvcHJlPgogKi8KZnVuY3Rpb24gJFJvdXRlUGFyYW1zUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gdmFsdWVGbih7fSk7Cn0KCi8qKgogKiBERVNJR04gTk9URVMKICoKICogVGhlIGRlc2lnbiBkZWNpc2lvbnMgYmVoaW5kIHRoZSBzY29wZSB3YXJlIGhlYXZpbHkgZmF2b3JlZCBmb3Igc3BlZWQgYW5kIG1lbW9yeSBjb25zdW1wdGlvbi4KICoKICogVGhlIHR5cGljYWwgdXNlIG9mIHNjb3BlIGlzIHRvIHdhdGNoIHRoZSBleHByZXNzaW9ucywgd2hpY2ggbW9zdCBvZiB0aGUgdGltZSByZXR1cm4gdGhlIHNhbWUKICogdmFsdWUgYXMgbGFzdCB0aW1lIHNvIHdlIG9wdGltaXplIHRoZSBvcGVyYXRpb24uCiAqCiAqIENsb3N1cmVzIGNvbnN0cnVjdGlvbiBpcyBleHBlbnNpdmUgZnJvbSBzcGVlZCBhcyB3ZWxsIGFzIG1lbW9yeToKICogICAtIG5vIGNsb3N1cmVzLCBpbnN0ZWFkIHVwcyBwcm90b3R5cGljYWwgaW5oZXJpdGFuY2UgZm9yIEFQSQogKiAgIC0gSW50ZXJuYWwgc3RhdGUgbmVlZHMgdG8gYmUgc3RvcmVkIG9uIHNjb3BlIGRpcmVjdGx5LCB3aGljaCBtZWFucyB0aGF0IHByaXZhdGUgc3RhdGUgaXMKICogICAgIGV4cG9zZWQgYXMgJCRfX19fIHByb3BlcnRpZXMKICoKICogTG9vcCBvcGVyYXRpb25zIGFyZSBvcHRpbWl6ZWQgYnkgdXNpbmcgd2hpbGUoY291bnQtLSkgeyAuLi4gfQogKiAgIC0gdGhpcyBtZWFucyB0aGF0IGluIG9yZGVyIHRvIGtlZXAgdGhlIHNhbWUgb3JkZXIgb2YgZXhlY3V0aW9uIGFzIGFkZGl0aW9uIHdlIGhhdmUgdG8gYWRkCiAqICAgICBpdGVtcyB0byB0aGUgYXJyYXkgYXQgdGhlIGJlZ2dpbmcgKHNoaWZ0KSBpbnN0ZWFkIG9mIGF0IHRoZSBlbmQgKHB1c2gpCiAqCiAqIENoaWxkIHNjb3BlcyBhcmUgY3JlYXRlZCBhbmQgcmVtb3ZlZCBvZnRlbgogKiAgIC0gVXNpbmcgYXJyYXkgd291bGQgYmUgc2xvdyBzaW5jZSBpbnNlcnRzIGluIG1lZGRsZSBhcmUgZXhwZW5zaXZlIHNvIHdlIHVzZSBsaW5rZWQgbGlzdAogKgogKiBUaGVyZSBhcmUgZmV3IHdhdGNoZXMgdGhlbiBhIGxvdCBvZiBvYnNlcnZlcnMuIFRoaXMgaXMgd2h5IHlvdSBkb24ndCB3YW50IHRoZSBvYnNlcnZlciB0byBiZQogKiBpbXBsZW1lbnRlZCBpbiB0aGUgc2FtZSB3YXkgYXMgd2F0Y2guIFdhdGNoIHJlcXVpcmVzIHJldHVybiBvZiBpbml0aWFsaXphdGlvbiBmdW5jdGlvbiB3aGljaAogKiBhcmUgZXhwZW5zaXZlIHRvIGNvbnN0cnVjdC4KICovCgoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJHJvb3RTY29wZVByb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKgogKiBQcm92aWRlciBmb3IgdGhlICRyb290U2NvcGUgc2VydmljZS4KICovCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLiRyb290U2NvcGVQcm92aWRlciNkaWdlc3RUdGwKICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGVQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICoKICogU2V0cyB0aGUgbnVtYmVyIG9mIGRpZ2VzdCBpdGVyYXRpb24gdGhlIHNjb3BlIHNob3VsZCBhdHRlbXB0IHRvIGV4ZWN1dGUgYmVmb3JlIGdpdmluZyB1cCBhbmQKICogYXNzdW1pbmcgdGhhdCB0aGUgbW9kZWwgaXMgdW5zdGFibGUuCiAqCiAqIFRoZSBjdXJyZW50IGRlZmF1bHQgaXMgMTAgaXRlcmF0aW9ucy4KICoKICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IFRoZSBudW1iZXIgb2YgZGlnZXN0IGl0ZXJhdGlvbnMuCiAqLwoKCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRyb290U2NvcGUKICogQGRlc2NyaXB0aW9uCiAqCiAqIEV2ZXJ5IGFwcGxpY2F0aW9uIGhhcyBhIHNpbmdsZSByb290IHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfS4KICogQWxsIG90aGVyIHNjb3BlcyBhcmUgY2hpbGQgc2NvcGVzIG9mIHRoZSByb290IHNjb3BlLiBTY29wZXMgcHJvdmlkZSBtZWNoYW5pc20gZm9yIHdhdGNoaW5nIHRoZSBtb2RlbCBhbmQgcHJvdmlkZQogKiBldmVudCBwcm9jZXNzaW5nIGxpZmUtY3ljbGUuIFNlZSB7QGxpbmsgZ3VpZGUvc2NvcGUgZGV2ZWxvcGVyIGd1aWRlIG9uIHNjb3Blc30uCiAqLwpmdW5jdGlvbiAkUm9vdFNjb3BlUHJvdmlkZXIoKXsKICB2YXIgVFRMID0gMTA7CgogIHRoaXMuZGlnZXN0VHRsID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgIFRUTCA9IHZhbHVlOwogICAgfQogICAgcmV0dXJuIFRUTDsKICB9OwoKICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckZXhjZXB0aW9uSGFuZGxlcicsICckcGFyc2UnLAogICAgICBmdW5jdGlvbiggJGluamVjdG9yLCAgICRleGNlcHRpb25IYW5kbGVyLCAgICRwYXJzZSkgewoKICAgIC8qKgogICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBBIHJvb3Qgc2NvcGUgY2FuIGJlIHJldHJpZXZlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUgJHJvb3RTY29wZX0ga2V5IGZyb20gdGhlCiAgICAgKiB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfS4gQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIHVzaW5nIHRoZQogICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlbgogICAgICogY29tcGlsZWQgSFRNTCB0ZW1wbGF0ZSBpcyBleGVjdXRlZC4pCiAgICAgKgogICAgICogSGVyZSBpcyBhIHNpbXBsZSBzY29wZSBzbmlwcGV0IHRvIHNob3cgaG93IHlvdSBjYW4gaW50ZXJhY3Qgd2l0aCB0aGUgc2NvcGUuCiAgICAgKiA8cHJlPgogICAgICAgIGFuZ3VsYXIuaW5qZWN0b3IoWyduZyddKS5pbnZva2UoZnVuY3Rpb24oJHJvb3RTY29wZSkgewogICAgICAgICAgIHZhciBzY29wZSA9ICRyb290U2NvcGUuJG5ldygpOwogICAgICAgICAgIHNjb3BlLnNhbHV0YXRpb24gPSAnSGVsbG8nOwogICAgICAgICAgIHNjb3BlLm5hbWUgPSAnV29ybGQnOwoKICAgICAgICAgICBleHBlY3Qoc2NvcGUuZ3JlZXRpbmcpLnRvRXF1YWwodW5kZWZpbmVkKTsKCiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICB0aGlzLmdyZWV0aW5nID0gdGhpcy5zYWx1dGF0aW9uICsgJyAnICsgdGhpcy5uYW1lICsgJyEnOwogICAgICAgICAgIH0pOyAvLyBpbml0aWFsaXplIHRoZSB3YXRjaAoKICAgICAgICAgICBleHBlY3Qoc2NvcGUuZ3JlZXRpbmcpLnRvRXF1YWwodW5kZWZpbmVkKTsKICAgICAgICAgICBzY29wZS5uYW1lID0gJ01pc2tvJzsKICAgICAgICAgICAvLyBzdGlsbCBvbGQgdmFsdWUsIHNpbmNlIHdhdGNoZXMgaGF2ZSBub3QgYmVlbiBjYWxsZWQgeWV0CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmdyZWV0aW5nKS50b0VxdWFsKHVuZGVmaW5lZCk7CgogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsgLy8gZmlyZSBhbGwgIHRoZSB3YXRjaGVzCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmdyZWV0aW5nKS50b0VxdWFsKCdIZWxsbyBNaXNrbyEnKTsKICAgICAgICB9KTsKICAgICAqIDwvcHJlPgogICAgICoKICAgICAqICMgSW5oZXJpdGFuY2UKICAgICAqIEEgc2NvcGUgY2FuIGluaGVyaXQgZnJvbSBhIHBhcmVudCBzY29wZSwgYXMgaW4gdGhpcyBleGFtcGxlOgogICAgICogPHByZT4KICAgICAgICAgdmFyIHBhcmVudCA9ICRyb290U2NvcGU7CiAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KCk7CgogICAgICAgICBwYXJlbnQuc2FsdXRhdGlvbiA9ICJIZWxsbyI7CiAgICAgICAgIGNoaWxkLm5hbWUgPSAiV29ybGQiOwogICAgICAgICBleHBlY3QoY2hpbGQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTsKCiAgICAgICAgIGNoaWxkLnNhbHV0YXRpb24gPSAiV2VsY29tZSI7CiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdXZWxjb21lJyk7CiAgICAgICAgIGV4cGVjdChwYXJlbnQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTsKICAgICAqIDwvcHJlPgogICAgICoKICAgICAqCiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbigpPj19IHByb3ZpZGVycyBNYXAgb2Ygc2VydmljZSBmYWN0b3J5IHdoaWNoIG5lZWQgdG8gYmUgcHJvdmlkZWQKICAgICAqICAgICBmb3IgdGhlIGN1cnJlbnQgc2NvcGUuIERlZmF1bHRzIHRvIHtAbGluayBuZ30uCiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCAqPj19IGluc3RhbmNlQ2FjaGUgUHJvdmlkZXMgcHJlLWluc3RhbnRpYXRlZCBzZXJ2aWNlcyB3aGljaCBzaG91bGQKICAgICAqICAgICBhcHBlbmQvb3ZlcnJpZGUgc2VydmljZXMgcHJvdmlkZWQgYnkgYHByb3ZpZGVyc2AuIFRoaXMgaXMgaGFuZHkgd2hlbiB1bml0LXRlc3RpbmcgYW5kIGhhdmluZwogICAgICogICAgIHRoZSBuZWVkIHRvIG92ZXJyaWRlIGEgZGVmYXVsdCBzZXJ2aWNlLgogICAgICogQHJldHVybnMge09iamVjdH0gTmV3bHkgY3JlYXRlZCBzY29wZS4KICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIFNjb3BlKCkgewogICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTsKICAgICAgdGhpcy4kJHBoYXNlID0gdGhpcy4kcGFyZW50ID0gdGhpcy4kJHdhdGNoZXJzID0KICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nID0KICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsOwogICAgICB0aGlzWyd0aGlzJ10gPSB0aGlzLiRyb290ID0gIHRoaXM7CiAgICAgIHRoaXMuJCRhc3luY1F1ZXVlID0gW107CiAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTsKICAgIH0KCiAgICAvKioKICAgICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkaWQKICAgICAqIEBwcm9wZXJ0eU9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFVuaXF1ZSBzY29wZSBJRCAobW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIGFscGhhbnVtZXJpYyBzZXF1ZW5jZSkgdXNlZnVsIGZvcgogICAgICogICBkZWJ1Z2dpbmcuCiAgICAgKi8KCgogICAgU2NvcGUucHJvdG90eXBlID0gewogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldwogICAgICAgKiBAbWV0aG9kT2YgbmcuJHJvb3RTY29wZS5TY29wZQogICAgICAgKiBAZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIENyZWF0ZXMgYSBuZXcgY2hpbGQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LgogICAgICAgKgogICAgICAgKiBUaGUgcGFyZW50IHNjb3BlIHdpbGwgcHJvcGFnYXRlIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gYW5kCiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBldmVudHMuIFRoZSBzY29wZSBjYW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBzY29wZQogICAgICAgKiBoaWVyYXJjaHkgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0uCiAgICAgICAqCiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95ICRkZXN0cm95KCl9IG11c3QgYmUgY2FsbGVkIG9uIGEgc2NvcGUgd2hlbiBpdCBpcyBkZXNpcmVkIGZvcgogICAgICAgKiB0aGUgc2NvcGUgYW5kIGl0cyBjaGlsZCBzY29wZXMgdG8gYmUgcGVybWFuZW50bHkgZGV0YWNoZWQgZnJvbSB0aGUgcGFyZW50IGFuZCB0aHVzIHN0b3AKICAgICAgICogcGFydGljaXBhdGluZyBpbiBtb2RlbCBjaGFuZ2UgZGV0ZWN0aW9uIGFuZCBsaXN0ZW5lciBub3RpZmljYXRpb24gYnkgaW52b2tpbmcuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNvbGF0ZSBpZiB0cnVlIHRoZW4gdGhlIHNjb3BlIGRvZXMgbm90IHByb3RvdHlwaWNhbGx5IGluaGVyaXQgZnJvbSB0aGUKICAgICAgICogICAgICAgICBwYXJlbnQgc2NvcGUuIFRoZSBzY29wZSBpcyBpc29sYXRlZCwgYXMgaXQgY2FuIG5vdCBzZWUgcGFyZW50IHNjb3BlIHByb3BlcnRpZXMuCiAgICAgICAqICAgICAgICAgV2hlbiBjcmVhdGluZyB3aWRnZXRzIGl0IGlzIHVzZWZ1bCBmb3IgdGhlIHdpZGdldCB0byBub3QgYWNjaWRlbnRhbGx5IHJlYWQgcGFyZW50CiAgICAgICAqICAgICAgICAgc3RhdGUuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBuZXdseSBjcmVhdGVkIGNoaWxkIHNjb3BlLgogICAgICAgKgogICAgICAgKi8KICAgICAgJG5ldzogZnVuY3Rpb24oaXNvbGF0ZSkgewogICAgICAgIHZhciBDaGlsZCwKICAgICAgICAgICAgY2hpbGQ7CgogICAgICAgIGlmIChpc0Z1bmN0aW9uKGlzb2xhdGUpKSB7CiAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgYXQgc29tZSBwb2ludAogICAgICAgICAgdGhyb3cgRXJyb3IoJ0FQSS1DSEFOR0U6IFVzZSAkY29udHJvbGxlciB0byBpbnN0YW50aWF0ZSBjb250cm9sbGVycy4nKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzb2xhdGUpIHsKICAgICAgICAgIGNoaWxkID0gbmV3IFNjb3BlKCk7CiAgICAgICAgICBjaGlsZC4kcm9vdCA9IHRoaXMuJHJvb3Q7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIENoaWxkID0gZnVuY3Rpb24oKSB7fTsgLy8gc2hvdWxkIGJlIGFub255bW91czsgVGhpcyBpcyBzbyB0aGF0IHdoZW4gdGhlIG1pbmlmaWVyIG11bmdlcwogICAgICAgICAgICAvLyB0aGUgbmFtZSBpdCBkb2VzIG5vdCBiZWNvbWUgcmFuZG9tIHNldCBvZiBjaGFycy4gVGhlc2Ugd2lsbCB0aGVuIHNob3cgdXAgYXMgY2xhc3MKICAgICAgICAgICAgLy8gbmFtZSBpbiB0aGUgZGVidWdnZXIuCiAgICAgICAgICBDaGlsZC5wcm90b3R5cGUgPSB0aGlzOwogICAgICAgICAgY2hpbGQgPSBuZXcgQ2hpbGQoKTsKICAgICAgICAgIGNoaWxkLiRpZCA9IG5leHRVaWQoKTsKICAgICAgICB9CiAgICAgICAgY2hpbGRbJ3RoaXMnXSA9IGNoaWxkOwogICAgICAgIGNoaWxkLiQkbGlzdGVuZXJzID0ge307CiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHRoaXM7CiAgICAgICAgY2hpbGQuJCRhc3luY1F1ZXVlID0gW107CiAgICAgICAgY2hpbGQuJCR3YXRjaGVycyA9IGNoaWxkLiQkbmV4dFNpYmxpbmcgPSBjaGlsZC4kJGNoaWxkSGVhZCA9IGNoaWxkLiQkY2hpbGRUYWlsID0gbnVsbDsKICAgICAgICBjaGlsZC4kJHByZXZTaWJsaW5nID0gdGhpcy4kJGNoaWxkVGFpbDsKICAgICAgICBpZiAodGhpcy4kJGNoaWxkSGVhZCkgewogICAgICAgICAgdGhpcy4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7CiAgICAgICAgICB0aGlzLiQkY2hpbGRUYWlsID0gY2hpbGQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJCRjaGlsZEhlYWQgPSB0aGlzLiQkY2hpbGRUYWlsID0gY2hpbGQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjaGlsZDsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2gKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBSZWdpc3RlcnMgYSBgbGlzdGVuZXJgIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLgogICAgICAgKgogICAgICAgKiAtIFRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBjYWxsZWQgb24gZXZlcnkgY2FsbCB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gYW5kCiAgICAgICAqICAgc2hvdWxkIHJldHVybiB0aGUgdmFsdWUgd2hpY2ggd2lsbCBiZSB3YXRjaGVkLiAoU2luY2Uge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9CiAgICAgICAqICAgcmVydW5zIHdoZW4gaXQgZGV0ZWN0cyBjaGFuZ2VzIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjYW4gZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBwZXIKICAgICAgICogICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gYW5kIHNob3VsZCBiZSBpZGVtcG90ZW50LikKICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgb25seSB3aGVuIHRoZSB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGB3YXRjaEV4cHJlc3Npb25gIGFuZCB0aGUKICAgICAgICogICBwcmV2aW91cyBjYWxsIHRvIGB3YXRjaEV4cHJlc3Npb25gIGFyZSBub3QgZXF1YWwgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgaW5pdGlhbCBydW4sCiAgICAgICAqICAgc2VlIGJlbG93KS4gVGhlIGluZXF1YWxpdHkgaXMgZGV0ZXJtaW5lZCBhY2NvcmRpbmcgdG8KICAgICAgICogICB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGZ1bmN0aW9uLiBUbyBzYXZlIHRoZSB2YWx1ZSBvZiB0aGUgb2JqZWN0IGZvciBsYXRlciBjb21wYXJpc29uLCB0aGUKICAgICAgICogICB7QGxpbmsgYW5ndWxhci5jb3B5fSBmdW5jdGlvbiBpcyB1c2VkLiBJdCBhbHNvIG1lYW5zIHRoYXQgd2F0Y2hpbmcgY29tcGxleCBvcHRpb25zIHdpbGwKICAgICAgICogICBoYXZlIGFkdmVyc2UgbWVtb3J5IGFuZCBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMuCiAgICAgICAqIC0gVGhlIHdhdGNoIGBsaXN0ZW5lcmAgbWF5IGNoYW5nZSB0aGUgbW9kZWwsIHdoaWNoIG1heSB0cmlnZ2VyIG90aGVyIGBsaXN0ZW5lcmBzIHRvIGZpcmUuIFRoaXMKICAgICAgICogICBpcyBhY2hpZXZlZCBieSByZXJ1bm5pbmcgdGhlIHdhdGNoZXJzIHVudGlsIG5vIGNoYW5nZXMgYXJlIGRldGVjdGVkLiBUaGUgcmVydW4gaXRlcmF0aW9uCiAgICAgICAqICAgbGltaXQgaXMgMTAgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIGRlYWRsb2NrLgogICAgICAgKgogICAgICAgKgogICAgICAgKiBJZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuZXZlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGlzIGNhbGxlZCwKICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGggbm8gYGxpc3RlbmVyYC4gKFNpbmNlIGB3YXRjaEV4cHJlc3Npb25gCiAgICAgICAqIGNhbiBleGVjdXRlIG11bHRpcGxlIHRpbWVzIHBlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlIHdoZW4gYSBjaGFuZ2UgaXMKICAgICAgICogZGV0ZWN0ZWQsIGJlIHByZXBhcmVkIGZvciBtdWx0aXBsZSBjYWxscyB0byB5b3VyIGxpc3RlbmVyLikKICAgICAgICoKICAgICAgICogQWZ0ZXIgYSB3YXRjaGVyIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc2NvcGUsIHRoZSBgbGlzdGVuZXJgIGZuIGlzIGNhbGxlZCBhc3luY2hyb25vdXNseQogICAgICAgKiAodmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmMgJGV2YWxBc3luY30pIHRvIGluaXRpYWxpemUgdGhlCiAgICAgICAqIHdhdGNoZXIuIEluIHJhcmUgY2FzZXMsIHRoaXMgaXMgdW5kZXNpcmFibGUgYmVjYXVzZSB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkIHdoZW4gdGhlIHJlc3VsdAogICAgICAgKiBvZiBgd2F0Y2hFeHByZXNzaW9uYCBkaWRuJ3QgY2hhbmdlLiBUbyBkZXRlY3QgdGhpcyBzY2VuYXJpbyB3aXRoaW4gdGhlIGBsaXN0ZW5lcmAgZm4sIHlvdQogICAgICAgKiBjYW4gY29tcGFyZSB0aGUgYG5ld1ZhbGAgYW5kIGBvbGRWYWxgLiBJZiB0aGVzZSB0d28gdmFsdWVzIGFyZSBpZGVudGljYWwgKGA9PT1gKSB0aGVuIHRoZQogICAgICAgKiBsaXN0ZW5lciB3YXMgY2FsbGVkIGR1ZSB0byBpbml0aWFsaXphdGlvbi4KICAgICAgICoKICAgICAgICoKICAgICAgICogIyBFeGFtcGxlCiAgICAgICAqIDxwcmU+CiAgICAgICAgICAgLy8gbGV0J3MgYXNzdW1lIHRoYXQgc2NvcGUgd2FzIGRlcGVuZGVuY3kgaW5qZWN0ZWQgYXMgdGhlICRyb290U2NvcGUKICAgICAgICAgICB2YXIgc2NvcGUgPSAkcm9vdFNjb3BlOwogICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nOwogICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwOwoKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTsKICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsgY291bnRlciA9IGNvdW50ZXIgKyAxOyB9KTsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTsKCiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIC8vIG5vIHZhcmlhYmxlIGNoYW5nZQogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApOwoKICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nOwogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTsKICAgICAgICogPC9wcmU+CiAgICAgICAqCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7KGZ1bmN0aW9uKCl8c3RyaW5nKX0gd2F0Y2hFeHByZXNzaW9uIEV4cHJlc3Npb24gdGhhdCBpcyBldmFsdWF0ZWQgb24gZWFjaAogICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlLiBBIGNoYW5nZSBpbiB0aGUgcmV0dXJuIHZhbHVlIHRyaWdnZXJzIGEKICAgICAgICogICAgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC4KICAgICAgICoKICAgICAgICogICAgLSBgc3RyaW5nYDogRXZhbHVhdGVkIGFzIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259CiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGNhbGxlZCB3aXRoIGN1cnJlbnQgYHNjb3BlYCBhcyBhIHBhcmFtZXRlci4KICAgICAgICogQHBhcmFtIHsoZnVuY3Rpb24oKXxzdHJpbmcpPX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YKICAgICAgICogICB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy4KICAgICAgICoKICAgICAgICogICAgLSBgc3RyaW5nYDogRXZhbHVhdGVkIGFzIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259CiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSwgc2NvcGUpYDogY2FsbGVkIHdpdGggY3VycmVudCBhbmQgcHJldmlvdXMgdmFsdWVzIGFzIHBhcmFtZXRlcnMuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9iamVjdEVxdWFsaXR5IENvbXBhcmUgb2JqZWN0IGZvciBlcXVhbGl0eSByYXRoZXIgdGhhbiBmb3IgcmVmZXJlbmNlLgogICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLgogICAgICAgKi8KICAgICAgJHdhdGNoOiBmdW5jdGlvbih3YXRjaEV4cCwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KSB7CiAgICAgICAgdmFyIHNjb3BlID0gdGhpcywKICAgICAgICAgICAgZ2V0ID0gY29tcGlsZVRvRm4od2F0Y2hFeHAsICd3YXRjaCcpLAogICAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMsCiAgICAgICAgICAgIHdhdGNoZXIgPSB7CiAgICAgICAgICAgICAgZm46IGxpc3RlbmVyLAogICAgICAgICAgICAgIGxhc3Q6IGluaXRXYXRjaFZhbCwKICAgICAgICAgICAgICBnZXQ6IGdldCwKICAgICAgICAgICAgICBleHA6IHdhdGNoRXhwLAogICAgICAgICAgICAgIGVxOiAhIW9iamVjdEVxdWFsaXR5CiAgICAgICAgICAgIH07CgogICAgICAgIC8vIGluIHRoZSBjYXNlIHVzZXIgcGFzcyBzdHJpbmcsIHdlIG5lZWQgdG8gY29tcGlsZSBpdCwgZG8gd2UgcmVhbGx5IG5lZWQgdGhpcyA/CiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkgewogICAgICAgICAgdmFyIGxpc3RlbkZuID0gY29tcGlsZVRvRm4obGlzdGVuZXIgfHwgbm9vcCwgJ2xpc3RlbmVyJyk7CiAgICAgICAgICB3YXRjaGVyLmZuID0gZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKSB7bGlzdGVuRm4oc2NvcGUpO307CiAgICAgICAgfQoKICAgICAgICBpZiAoIWFycmF5KSB7CiAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMgPSBbXTsKICAgICAgICB9CiAgICAgICAgLy8gd2UgdXNlIHVuc2hpZnQgc2luY2Ugd2UgdXNlIGEgd2hpbGUgbG9vcCBpbiAkZGlnZXN0IGZvciBzcGVlZC4KICAgICAgICAvLyB0aGUgd2hpbGUgbG9vcCByZWFkcyBpbiByZXZlcnNlIG9yZGVyLgogICAgICAgIGFycmF5LnVuc2hpZnQod2F0Y2hlcik7CgogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgIGFycmF5UmVtb3ZlKGFycmF5LCB3YXRjaGVyKTsKICAgICAgICB9OwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBQcm9jZXNzIGFsbCBvZiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJzfSBvZiB0aGUgY3VycmVudCBzY29wZSBhbmQgaXRzIGNoaWxkcmVuLgogICAgICAgKiBCZWNhdXNlIGEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJ9J3MgbGlzdGVuZXIgY2FuIGNoYW5nZSB0aGUgbW9kZWwsIHRoZQogICAgICAgKiBgJGRpZ2VzdCgpYCBrZWVwcyBjYWxsaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9IHVudGlsIG5vIG1vcmUgbGlzdGVuZXJzIGFyZQogICAgICAgKiBmaXJpbmcuIFRoaXMgbWVhbnMgdGhhdCBpdCBpcyBwb3NzaWJsZSB0byBnZXQgaW50byBhbiBpbmZpbml0ZSBsb29wLiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cKICAgICAgICogYCdNYXhpbXVtIGl0ZXJhdGlvbiBsaW1pdCBleGNlZWRlZC4nYCBpZiB0aGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgZXhjZWVkcyAxMC4KICAgICAgICoKICAgICAgICogVXN1YWxseSB5b3UgZG9uJ3QgY2FsbCBgJGRpZ2VzdCgpYCBkaXJlY3RseSBpbgogICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ29udHJvbGxlciBjb250cm9sbGVyc30gb3IgaW4KICAgICAgICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LgogICAgICAgKiBJbnN0ZWFkIGEgY2FsbCB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5KCl9ICh0eXBpY2FsbHkgZnJvbSB3aXRoaW4gYQogICAgICAgKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30pIHdpbGwgZm9yY2UgYSBgJGRpZ2VzdCgpYC4KICAgICAgICoKICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIgYCRkaWdlc3QoKWAgaXMgY2FsbGVkLAogICAgICAgKiB5b3UgY2FuIHJlZ2lzdGVyIGEgYHdhdGNoRXhwcmVzc2lvbmAgZnVuY3Rpb24gIHdpdGgge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfQogICAgICAgKiB3aXRoIG5vIGBsaXN0ZW5lcmAuCiAgICAgICAqCiAgICAgICAqIFlvdSBtYXkgaGF2ZSBhIG5lZWQgdG8gY2FsbCBgJGRpZ2VzdCgpYCBmcm9tIHdpdGhpbiB1bml0LXRlc3RzLCB0byBzaW11bGF0ZSB0aGUgc2NvcGUKICAgICAgICogbGlmZS1jeWNsZS4KICAgICAgICoKICAgICAgICogIyBFeGFtcGxlCiAgICAgICAqIDxwcmU+CiAgICAgICAgICAgdmFyIHNjb3BlID0gLi4uOwogICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nOwogICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwOwoKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTsKICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgICAgIGNvdW50ZXIgPSBjb3VudGVyICsgMTsKICAgICAgICAgICB9KTsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTsKCiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIC8vIG5vIHZhcmlhYmxlIGNoYW5nZQogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApOwoKICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nOwogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTsKICAgICAgICogPC9wcmU+CiAgICAgICAqCiAgICAgICAqLwogICAgICAkZGlnZXN0OiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgd2F0Y2gsIHZhbHVlLCBsYXN0LAogICAgICAgICAgICB3YXRjaGVycywKICAgICAgICAgICAgYXN5bmNRdWV1ZSwKICAgICAgICAgICAgbGVuZ3RoLAogICAgICAgICAgICBkaXJ0eSwgdHRsID0gVFRMLAogICAgICAgICAgICBuZXh0LCBjdXJyZW50LCB0YXJnZXQgPSB0aGlzLAogICAgICAgICAgICB3YXRjaExvZyA9IFtdLAogICAgICAgICAgICBsb2dJZHgsIGxvZ01zZzsKCiAgICAgICAgYmVnaW5QaGFzZSgnJGRpZ2VzdCcpOwoKICAgICAgICBkbyB7CiAgICAgICAgICBkaXJ0eSA9IGZhbHNlOwogICAgICAgICAgY3VycmVudCA9IHRhcmdldDsKICAgICAgICAgIGRvIHsKICAgICAgICAgICAgYXN5bmNRdWV1ZSA9IGN1cnJlbnQuJCRhc3luY1F1ZXVlOwogICAgICAgICAgICB3aGlsZShhc3luY1F1ZXVlLmxlbmd0aCkgewogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBjdXJyZW50LiRldmFsKGFzeW5jUXVldWUuc2hpZnQoKSk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgod2F0Y2hlcnMgPSBjdXJyZW50LiQkd2F0Y2hlcnMpKSB7CiAgICAgICAgICAgICAgLy8gcHJvY2VzcyBvdXIgd2F0Y2hlcwogICAgICAgICAgICAgIGxlbmd0aCA9IHdhdGNoZXJzLmxlbmd0aDsKICAgICAgICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgIHdhdGNoID0gd2F0Y2hlcnNbbGVuZ3RoXTsKICAgICAgICAgICAgICAgICAgLy8gTW9zdCBjb21tb24gd2F0Y2hlcyBhcmUgb24gcHJpbWl0aXZlcywgaW4gd2hpY2ggY2FzZSB3ZSBjYW4gc2hvcnQKICAgICAgICAgICAgICAgICAgLy8gY2lyY3VpdCBpdCB3aXRoID09PSBvcGVyYXRvciwgb25seSB3aGVuID09PSBmYWlscyBkbyB3ZSB1c2UgLmVxdWFscwogICAgICAgICAgICAgICAgICBpZiAoKHZhbHVlID0gd2F0Y2guZ2V0KGN1cnJlbnQpKSAhPT0gKGxhc3QgPSB3YXRjaC5sYXN0KSAmJgogICAgICAgICAgICAgICAgICAgICAgISh3YXRjaC5lcQogICAgICAgICAgICAgICAgICAgICAgICAgID8gZXF1YWxzKHZhbHVlLCBsYXN0KQogICAgICAgICAgICAgICAgICAgICAgICAgIDogKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB0eXBlb2YgbGFzdCA9PSAnbnVtYmVyJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGlzTmFOKHZhbHVlKSAmJiBpc05hTihsYXN0KSkpKSB7CiAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIHdhdGNoLmxhc3QgPSB3YXRjaC5lcSA/IGNvcHkodmFsdWUpIDogdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgd2F0Y2guZm4odmFsdWUsICgobGFzdCA9PT0gaW5pdFdhdGNoVmFsKSA/IHZhbHVlIDogbGFzdCksIGN1cnJlbnQpOwogICAgICAgICAgICAgICAgICAgIGlmICh0dGwgPCA1KSB7CiAgICAgICAgICAgICAgICAgICAgICBsb2dJZHggPSA0IC0gdHRsOwogICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXRjaExvZ1tsb2dJZHhdKSB3YXRjaExvZ1tsb2dJZHhdID0gW107CiAgICAgICAgICAgICAgICAgICAgICBsb2dNc2cgPSAoaXNGdW5jdGlvbih3YXRjaC5leHApKQogICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2ZuOiAnICsgKHdhdGNoLmV4cC5uYW1lIHx8IHdhdGNoLmV4cC50b1N0cmluZygpKQogICAgICAgICAgICAgICAgICAgICAgICAgIDogd2F0Y2guZXhwOwogICAgICAgICAgICAgICAgICAgICAgbG9nTXNnICs9ICc7IG5ld1ZhbDogJyArIHRvSnNvbih2YWx1ZSkgKyAnOyBvbGRWYWw6ICcgKyB0b0pzb24obGFzdCk7CiAgICAgICAgICAgICAgICAgICAgICB3YXRjaExvZ1tsb2dJZHhdLnB1c2gobG9nTXNnKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBJbnNhbml0eSBXYXJuaW5nOiBzY29wZSBkZXB0aC1maXJzdCB0cmF2ZXJzYWwKICAgICAgICAgICAgLy8geWVzLCB0aGlzIGNvZGUgaXMgYSBiaXQgY3JhenksIGJ1dCBpdCB3b3JrcyBhbmQgd2UgaGF2ZSB0ZXN0cyB0byBwcm92ZSBpdCEKICAgICAgICAgICAgLy8gdGhpcyBwaWVjZSBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHRyYXZlcnNhbCBpbiAkYnJvYWRjYXN0CiAgICAgICAgICAgIGlmICghKG5leHQgPSAoY3VycmVudC4kJGNoaWxkSGVhZCB8fCAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkgewogICAgICAgICAgICAgIHdoaWxlKGN1cnJlbnQgIT09IHRhcmdldCAmJiAhKG5leHQgPSBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSk7CgogICAgICAgICAgaWYoZGlydHkgJiYgISh0dGwtLSkpIHsKICAgICAgICAgICAgY2xlYXJQaGFzZSgpOwogICAgICAgICAgICB0aHJvdyBFcnJvcihUVEwgKyAnICRkaWdlc3QoKSBpdGVyYXRpb25zIHJlYWNoZWQuIEFib3J0aW5nIVxuJyArCiAgICAgICAgICAgICAgICAnV2F0Y2hlcnMgZmlyZWQgaW4gdGhlIGxhc3QgNSBpdGVyYXRpb25zOiAnICsgdG9Kc29uKHdhdGNoTG9nKSk7CiAgICAgICAgICB9CiAgICAgICAgfSB3aGlsZSAoZGlydHkgfHwgYXN5bmNRdWV1ZS5sZW5ndGgpOwoKICAgICAgICBjbGVhclBoYXNlKCk7CiAgICAgIH0sCgoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBldmVudAogICAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95CiAgICAgICAqIEBldmVudE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gc2NvcGUgYmVpbmcgZGVzdHJveWVkCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBCcm9hZGNhc3RlZCB3aGVuIGEgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbiBhcmUgYmVpbmcgZGVzdHJveWVkLgogICAgICAgKi8KCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveQogICAgICAgKiBAbWV0aG9kT2YgbmcuJHJvb3RTY29wZS5TY29wZQogICAgICAgKiBAZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFJlbW92ZXMgdGhlIGN1cnJlbnQgc2NvcGUgKGFuZCBhbGwgb2YgaXRzIGNoaWxkcmVuKSBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuIFJlbW92YWwgaW1wbGllcwogICAgICAgKiB0aGF0IGNhbGxzIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSB3aWxsIG5vIGxvbmdlcgogICAgICAgKiBwcm9wYWdhdGUgdG8gdGhlIGN1cnJlbnQgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbi4gUmVtb3ZhbCBhbHNvIGltcGxpZXMgdGhhdCB0aGUgY3VycmVudAogICAgICAgKiBzY29wZSBpcyBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLgogICAgICAgKgogICAgICAgKiBUaGUgYCRkZXN0cm95KClgIGlzIHVzdWFsbHkgdXNlZCBieSBkaXJlY3RpdmVzIHN1Y2ggYXMKICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0gZm9yIG1hbmFnaW5nIHRoZQogICAgICAgKiB1bnJvbGxpbmcgb2YgdGhlIGxvb3AuCiAgICAgICAqCiAgICAgICAqIEp1c3QgYmVmb3JlIGEgc2NvcGUgaXMgZGVzdHJveWVkIGEgYCRkZXN0cm95YCBldmVudCBpcyBicm9hZGNhc3RlZCBvbiB0aGlzIHNjb3BlLgogICAgICAgKiBBcHBsaWNhdGlvbiBjb2RlIGNhbiByZWdpc3RlciBhIGAkZGVzdHJveWAgZXZlbnQgaGFuZGxlciB0aGF0IHdpbGwgZ2l2ZSBpdCBjaGFuY2UgdG8KICAgICAgICogcGVyZm9ybSBhbnkgbmVjZXNzYXJ5IGNsZWFudXAuCiAgICAgICAqLwogICAgICAkZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCRyb290U2NvcGUgPT0gdGhpcykgcmV0dXJuOyAvLyB3ZSBjYW4ndCByZW1vdmUgdGhlIHJvb3Qgbm9kZTsKICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy4kcGFyZW50OwoKICAgICAgICB0aGlzLiRicm9hZGNhc3QoJyRkZXN0cm95Jyk7CgogICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZFRhaWwgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nOwogICAgICAgIGlmICh0aGlzLiQkcHJldlNpYmxpbmcpIHRoaXMuJCRwcmV2U2libGluZy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgIGlmICh0aGlzLiQkbmV4dFNpYmxpbmcpIHRoaXMuJCRuZXh0U2libGluZy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nOwoKICAgICAgICAvLyBUaGlzIGlzIGJvZ3VzIGNvZGUgdGhhdCB3b3JrcyBhcm91bmQgQ2hyb21lJ3MgR0MgbGVhawogICAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTMxMyNpc3N1ZWNvbW1lbnQtMTAzNzg0NTEKICAgICAgICB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkY2hpbGRIZWFkID0KICAgICAgICAgICAgdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGV2YWwKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBFeGVjdXRlcyB0aGUgYGV4cHJlc3Npb25gIG9uIHRoZSBjdXJyZW50IHNjb3BlIHJldHVybmluZyB0aGUgcmVzdWx0LiBBbnkgZXhjZXB0aW9ucyBpbiB0aGUKICAgICAgICogZXhwcmVzc2lvbiBhcmUgcHJvcGFnYXRlZCAodW5jYXVnaHQpLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGV2YWx1YXRpbmcgQW5ndWxhciBleHByZXNzaW9ucy4KICAgICAgICoKICAgICAgICogIyBFeGFtcGxlCiAgICAgICAqIDxwcmU+CiAgICAgICAgICAgdmFyIHNjb3BlID0gbmcuJHJvb3RTY29wZS5TY29wZSgpOwogICAgICAgICAgIHNjb3BlLmEgPSAxOwogICAgICAgICAgIHNjb3BlLmIgPSAyOwoKICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoJ2ErYicpKS50b0VxdWFsKDMpOwogICAgICAgICAgIGV4cGVjdChzY29wZS4kZXZhbChmdW5jdGlvbihzY29wZSl7IHJldHVybiBzY29wZS5hICsgc2NvcGUuYjsgfSkpLnRvRXF1YWwoMyk7CiAgICAgICAqIDwvcHJlPgogICAgICAgKgogICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC4KICAgICAgICoKICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uCiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uCiAgICAgICAqLwogICAgICAkZXZhbDogZnVuY3Rpb24oZXhwciwgbG9jYWxzKSB7CiAgICAgICAgcmV0dXJuICRwYXJzZShleHByKSh0aGlzLCBsb2NhbHMpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmMKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuCiAgICAgICAqCiAgICAgICAqIFRoZSBgJGV2YWxBc3luY2AgbWFrZXMgbm8gZ3VhcmFudGVlcyBhcyB0byB3aGVuIHRoZSBgZXhwcmVzc2lvbmAgd2lsbCBiZSBleGVjdXRlZCwgb25seSB0aGF0OgogICAgICAgKgogICAgICAgKiAgIC0gaXQgd2lsbCBleGVjdXRlIGluIHRoZSBjdXJyZW50IHNjcmlwdCBleGVjdXRpb24gY29udGV4dCAoYmVmb3JlIGFueSBET00gcmVuZGVyaW5nKS4KICAgICAgICogICAtIGF0IGxlYXN0IG9uZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QgY3ljbGV9IHdpbGwgYmUgcGVyZm9ybWVkIGFmdGVyCiAgICAgICAqICAgICBgZXhwcmVzc2lvbmAgZXhlY3V0aW9uLgogICAgICAgKgogICAgICAgKiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGUKICAgICAgICoge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLgogICAgICAgKgogICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC4KICAgICAgICoKICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uCiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuCiAgICAgICAqCiAgICAgICAqLwogICAgICAkZXZhbEFzeW5jOiBmdW5jdGlvbihleHByKSB7CiAgICAgICAgdGhpcy4kJGFzeW5jUXVldWUucHVzaChleHByKTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBgJGFwcGx5KClgIGlzIHVzZWQgdG8gZXhlY3V0ZSBhbiBleHByZXNzaW9uIGluIGFuZ3VsYXIgZnJvbSBvdXRzaWRlIG9mIHRoZSBhbmd1bGFyIGZyYW1ld29yay4KICAgICAgICogKEZvciBleGFtcGxlIGZyb20gYnJvd3NlciBET00gZXZlbnRzLCBzZXRUaW1lb3V0LCBYSFIgb3IgdGhpcmQgcGFydHkgbGlicmFyaWVzKS4KICAgICAgICogQmVjYXVzZSB3ZSBhcmUgY2FsbGluZyBpbnRvIHRoZSBhbmd1bGFyIGZyYW1ld29yayB3ZSBuZWVkIHRvIHBlcmZvcm0gcHJvcGVyIHNjb3BlIGxpZmUtY3ljbGUKICAgICAgICogb2Yge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyIGV4Y2VwdGlvbiBoYW5kbGluZ30sCiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgZXhlY3V0aW5nIHdhdGNoZXN9LgogICAgICAgKgogICAgICAgKiAjIyBMaWZlIGN5Y2xlCiAgICAgICAqCiAgICAgICAqICMgUHNldWRvLUNvZGUgb2YgYCRhcHBseSgpYAogICAgICAgKiA8cHJlPgogICAgICAgICAgIGZ1bmN0aW9uICRhcHBseShleHByKSB7CiAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICByZXR1cm4gJGV2YWwoZXhwcik7CiAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgJHJvb3QuJGRpZ2VzdCgpOwogICAgICAgICAgICAgfQogICAgICAgICAgIH0KICAgICAgICogPC9wcmU+CiAgICAgICAqCiAgICAgICAqCiAgICAgICAqIFNjb3BlJ3MgYCRhcHBseSgpYCBtZXRob2QgdHJhbnNpdGlvbnMgdGhyb3VnaCB0aGUgZm9sbG93aW5nIHN0YWdlczoKICAgICAgICoKICAgICAgICogMS4gVGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIGV4ZWN1dGVkIHVzaW5nIHRoZQogICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbCAkZXZhbCgpfSBtZXRob2QuCiAgICAgICAqIDIuIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZQogICAgICAgKiAgICB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuCiAgICAgICAqIDMuIFRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2h9IGxpc3RlbmVycyBhcmUgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGV4cHJlc3Npb24KICAgICAgICogICAgd2FzIGV4ZWN1dGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gbWV0aG9kLgogICAgICAgKgogICAgICAgKgogICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLgogICAgICAgKgogICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LgogICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uCiAgICAgICAqLwogICAgICAkYXBwbHk6IGZ1bmN0aW9uKGV4cHIpIHsKICAgICAgICB0cnkgewogICAgICAgICAgYmVnaW5QaGFzZSgnJGFwcGx5Jyk7CiAgICAgICAgICByZXR1cm4gdGhpcy4kZXZhbChleHByKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgY2xlYXJQaGFzZSgpOwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICB0aHJvdyBlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkb24KICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBMaXN0ZW5zIG9uIGV2ZW50cyBvZiBhIGdpdmVuIHR5cGUuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZW1pdCAkZW1pdH0gZm9yIGRpc2N1c3Npb24gb2YKICAgICAgICogZXZlbnQgbGlmZSBjeWNsZS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBsaXN0ZW4gb24uCiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQpfSBsaXN0ZW5lciBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuCiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuCiAgICAgICAqCiAgICAgICAqIFRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBmb3JtYXQgaXM6IGBmdW5jdGlvbihldmVudCwgYXJncy4uLilgLiBUaGUgYGV2ZW50YCBvYmplY3QKICAgICAgICogcGFzc2VkIGludG8gdGhlIGxpc3RlbmVyIGhhcyB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6CiAgICAgICAqCiAgICAgICAqICAgLSBgdGFyZ2V0U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgc2NvcGUgb24gd2hpY2ggdGhlIGV2ZW50IHdhcyBgJGVtaXRgLWVkIG9yIGAkYnJvYWRjYXN0YC1lZC4KICAgICAgICogICAtIGBjdXJyZW50U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgY3VycmVudCBzY29wZSB3aGljaCBpcyBoYW5kbGluZyB0aGUgZXZlbnQuCiAgICAgICAqICAgLSBgbmFtZWAgLSBge3N0cmluZ31gOiBOYW1lIG9mIHRoZSBldmVudC4KICAgICAgICogICAtIGBzdG9wUHJvcGFnYXRpb25gIC0gYHtmdW5jdGlvbj19YDogY2FsbGluZyBgc3RvcFByb3BhZ2F0aW9uYCBmdW5jdGlvbiB3aWxsIGNhbmNlbCBmdXJ0aGVyIGV2ZW50CiAgICAgICAqICAgICBwcm9wYWdhdGlvbiAoYXZhaWxhYmxlIG9ubHkgZm9yIGV2ZW50cyB0aGF0IHdlcmUgYCRlbWl0YC1lZCkuCiAgICAgICAqICAgLSBgcHJldmVudERlZmF1bHRgIC0gYHtmdW5jdGlvbn1gOiBjYWxsaW5nIGBwcmV2ZW50RGVmYXVsdGAgc2V0cyBgZGVmYXVsdFByZXZlbnRlZGAgZmxhZyB0byB0cnVlLgogICAgICAgKiAgIC0gYGRlZmF1bHRQcmV2ZW50ZWRgIC0gYHtib29sZWFufWA6IHRydWUgaWYgYHByZXZlbnREZWZhdWx0YCB3YXMgY2FsbGVkLgogICAgICAgKi8KICAgICAgJG9uOiBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikgewogICAgICAgIHZhciBuYW1lZExpc3RlbmVycyA9IHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV07CiAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVycykgewogICAgICAgICAgdGhpcy4kJGxpc3RlbmVyc1tuYW1lXSA9IG5hbWVkTGlzdGVuZXJzID0gW107CiAgICAgICAgfQogICAgICAgIG5hbWVkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpbmRleE9mKG5hbWVkTGlzdGVuZXJzLCBsaXN0ZW5lcildID0gbnVsbDsKICAgICAgICB9OwogICAgICB9LAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkZW1pdAogICAgICAgKiBAbWV0aG9kT2YgbmcuJHJvb3RTY29wZS5TY29wZQogICAgICAgKiBAZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIHVwd2FyZHMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5IG5vdGlmeWluZyB0aGUKICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy4KICAgICAgICoKICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGVtaXRgIHdhcyBjYWxsZWQuIEFsbAogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldCBub3RpZmllZC4KICAgICAgICogQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHRyYXZlcnNlcyB1cHdhcmRzIHRvd2FyZCB0aGUgcm9vdCBzY29wZSBhbmQgY2FsbHMgYWxsIHJlZ2lzdGVyZWQKICAgICAgICogbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCB3aWxsIHN0b3AgcHJvcGFnYXRpbmcgaWYgb25lIG9mIHRoZSBsaXN0ZW5lcnMgY2FuY2VscyBpdC4KICAgICAgICoKICAgICAgICogQW55IGV4Y2VwdGlvbiBlbW1pdGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkCiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBlbWl0LgogICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgc2V0IG9mIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuCiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0LCBzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufQogICAgICAgKi8KICAgICAgJGVtaXQ6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHsKICAgICAgICB2YXIgZW1wdHkgPSBbXSwKICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMsCiAgICAgICAgICAgIHNjb3BlID0gdGhpcywKICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2UsCiAgICAgICAgICAgIGV2ZW50ID0gewogICAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHNjb3BlLAogICAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7c3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTt9LAogICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksCiAgICAgICAgICAgIGksIGxlbmd0aDsKCiAgICAgICAgZG8gewogICAgICAgICAgbmFtZWRMaXN0ZW5lcnMgPSBzY29wZS4kJGxpc3RlbmVyc1tuYW1lXSB8fCBlbXB0eTsKICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IHNjb3BlOwogICAgICAgICAgZm9yIChpPTAsIGxlbmd0aD1uYW1lZExpc3RlbmVycy5sZW5ndGg7IGk8bGVuZ3RoOyBpKyspIHsKCiAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyB3ZXJlIGRlcmVnaXN0ZXJlZCwgZGVmcmFnbWVudCB0aGUgYXJyYXkKICAgICAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVyc1tpXSkgewogICAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgICBpLS07CiAgICAgICAgICAgICAgbGVuZ3RoLS07CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpOwogICAgICAgICAgICAgIGlmIChzdG9wUHJvcGFnYXRpb24pIHJldHVybiBldmVudDsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICAvL3RyYXZlcnNlIHVwd2FyZHMKICAgICAgICAgIHNjb3BlID0gc2NvcGUuJHBhcmVudDsKICAgICAgICB9IHdoaWxlIChzY29wZSk7CgogICAgICAgIHJldHVybiBldmVudDsKICAgICAgfSwKCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGJyb2FkY2FzdAogICAgICAgKiBAbWV0aG9kT2YgbmcuJHJvb3RTY29wZS5TY29wZQogICAgICAgKiBAZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIGRvd253YXJkcyB0byBhbGwgY2hpbGQgc2NvcGVzIChhbmQgdGhlaXIgY2hpbGRyZW4pIG5vdGlmeWluZyB0aGUKICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy4KICAgICAgICoKICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGJyb2FkY2FzdGAgd2FzIGNhbGxlZC4gQWxsCiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IGxpc3RlbmluZyBmb3IgYG5hbWVgIGV2ZW50IG9uIHRoaXMgc2NvcGUgZ2V0IG5vdGlmaWVkLgogICAgICAgKiBBZnRlcndhcmRzLCB0aGUgZXZlbnQgcHJvcGFnYXRlcyB0byBhbGwgZGlyZWN0IGFuZCBpbmRpcmVjdCBzY29wZXMgb2YgdGhlIGN1cnJlbnQgc2NvcGUgYW5kCiAgICAgICAqIGNhbGxzIGFsbCByZWdpc3RlcmVkIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgY2Fubm90IGJlIGNhbmNlbGVkLgogICAgICAgKgogICAgICAgKiBBbnkgZXhjZXB0aW9uIGVtbWl0ZWQgZnJvbSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gd2lsbCBiZSBwYXNzZWQKICAgICAgICogb250byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGVtaXQuCiAgICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBzZXQgb2YgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy4KICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QsIHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259CiAgICAgICAqLwogICAgICAkYnJvYWRjYXN0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7CiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMsCiAgICAgICAgICAgIGN1cnJlbnQgPSB0YXJnZXQsCiAgICAgICAgICAgIG5leHQgPSB0YXJnZXQsCiAgICAgICAgICAgIGV2ZW50ID0gewogICAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHRhcmdldCwKICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGxpc3RlbmVyQXJncyA9IGNvbmNhdChbZXZlbnRdLCBhcmd1bWVudHMsIDEpLAogICAgICAgICAgICBsaXN0ZW5lcnMsIGksIGxlbmd0aDsKCiAgICAgICAgLy9kb3duIHdoaWxlIHlvdSBjYW4sIHRoZW4gdXAgYW5kIG5leHQgc2libGluZyBvciB1cCBhbmQgbmV4dCBzaWJsaW5nIHVudGlsIGJhY2sgYXQgcm9vdAogICAgICAgIGRvIHsKICAgICAgICAgIGN1cnJlbnQgPSBuZXh0OwogICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gY3VycmVudDsKICAgICAgICAgIGxpc3RlbmVycyA9IGN1cnJlbnQuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgW107CiAgICAgICAgICBmb3IgKGk9MCwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaTxsZW5ndGg7IGkrKykgewogICAgICAgICAgICAvLyBpZiBsaXN0ZW5lcnMgd2VyZSBkZXJlZ2lzdGVyZWQsIGRlZnJhZ21lbnQgdGhlIGFycmF5CiAgICAgICAgICAgIGlmICghbGlzdGVuZXJzW2ldKSB7CiAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgICBpLS07CiAgICAgICAgICAgICAgbGVuZ3RoLS07CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGxpc3RlbmVyQXJncyk7CiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gSW5zYW5pdHkgV2FybmluZzogc2NvcGUgZGVwdGgtZmlyc3QgdHJhdmVyc2FsCiAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IQogICAgICAgICAgLy8gdGhpcyBwaWVjZSBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHRyYXZlcnNhbCBpbiAkZGlnZXN0CiAgICAgICAgICBpZiAoIShuZXh0ID0gKGN1cnJlbnQuJCRjaGlsZEhlYWQgfHwgKGN1cnJlbnQgIT09IHRhcmdldCAmJiBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSkpIHsKICAgICAgICAgICAgd2hpbGUoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHsKICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSk7CgogICAgICAgIHJldHVybiBldmVudDsKICAgICAgfQogICAgfTsKCiAgICB2YXIgJHJvb3RTY29wZSA9IG5ldyBTY29wZSgpOwoKICAgIHJldHVybiAkcm9vdFNjb3BlOwoKCiAgICBmdW5jdGlvbiBiZWdpblBoYXNlKHBoYXNlKSB7CiAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHsKICAgICAgICB0aHJvdyBFcnJvcigkcm9vdFNjb3BlLiQkcGhhc2UgKyAnIGFscmVhZHkgaW4gcHJvZ3Jlc3MnKTsKICAgICAgfQoKICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gcGhhc2U7CiAgICB9CgogICAgZnVuY3Rpb24gY2xlYXJQaGFzZSgpIHsKICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gbnVsbDsKICAgIH0KCiAgICBmdW5jdGlvbiBjb21waWxlVG9GbihleHAsIG5hbWUpIHsKICAgICAgdmFyIGZuID0gJHBhcnNlKGV4cCk7CiAgICAgIGFzc2VydEFyZ0ZuKGZuLCBuYW1lKTsKICAgICAgcmV0dXJuIGZuOwogICAgfQoKICAgIC8qKgogICAgICogZnVuY3Rpb24gdXNlZCBhcyBhbiBpbml0aWFsIHZhbHVlIGZvciB3YXRjaGVycy4KICAgICAqIGJlY2F1c2UgaXQncyB1bmlxdWV1ZSB3ZSBjYW4gZWFzaWx5IHRlbGwgaXQgYXBhcnQgZnJvbSBvdGhlciB2YWx1ZXMKICAgICAqLwogICAgZnVuY3Rpb24gaW5pdFdhdGNoVmFsKCkge30KICB9XTsKfQoKLyoqCiAqICEhISBUaGlzIGlzIGFuIHVuZG9jdW1lbnRlZCAicHJpdmF0ZSIgc2VydmljZSAhISEKICoKICogQG5hbWUgbmcuJHNuaWZmZXIKICogQHJlcXVpcmVzICR3aW5kb3cKICoKICogQHByb3BlcnR5IHtib29sZWFufSBoaXN0b3J5IERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBodG1sNSBoaXN0b3J5IGFwaSA/CiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaGFzaGNoYW5nZSBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgaGFzaGNoYW5nZSBldmVudCA/CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGlzIGlzIHZlcnkgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIHRlc3RpbmcgYnJvd3NlcidzIGZlYXR1cmVzLgogKi8KZnVuY3Rpb24gJFNuaWZmZXJQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbigkd2luZG93KSB7CiAgICB2YXIgZXZlbnRTdXBwb3J0ID0ge30sCiAgICAgICAgYW5kcm9pZCA9IGludCgoL2FuZHJvaWQgKFxkKykvLmV4ZWMobG93ZXJjYXNlKCR3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkpIHx8IFtdKVsxXSk7CgogICAgcmV0dXJuIHsKICAgICAgLy8gQW5kcm9pZCBoYXMgaGlzdG9yeS5wdXNoU3RhdGUsIGJ1dCBpdCBkb2VzIG5vdCB1cGRhdGUgbG9jYXRpb24gY29ycmVjdGx5CiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGF0IGFsbC4KICAgICAgLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2FuZHJvaWQvaXNzdWVzL2RldGFpbD9pZD0xNzQ3MQogICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MDQKICAgICAgaGlzdG9yeTogISEoJHdpbmRvdy5oaXN0b3J5ICYmICR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgJiYgIShhbmRyb2lkIDwgNCkpLAogICAgICBoYXNoY2hhbmdlOiAnb25oYXNoY2hhbmdlJyBpbiAkd2luZG93ICYmCiAgICAgICAgICAgICAgICAgIC8vIElFOCBjb21wYXRpYmxlIG1vZGUgbGllcwogICAgICAgICAgICAgICAgICAoISR3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRNb2RlIHx8ICR3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gNyksCiAgICAgIGhhc0V2ZW50OiBmdW5jdGlvbihldmVudCkgewogICAgICAgIC8vIElFOSBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgaXQncyBzbyBmdWJhcmVkIHRoYXQgd2UgcmF0aGVyIHByZXRlbmQgdGhhdCBpdCBkb2Vzbid0IGhhdmUKICAgICAgICAvLyBpdC4gSW4gcGFydGljdWxhciB0aGUgZXZlbnQgaXMgbm90IGZpcmVkIHdoZW4gYmFja3NwYWNlIG9yIGRlbGV0ZSBrZXkgYXJlIHByZXNzZWQgb3IKICAgICAgICAvLyB3aGVuIGN1dCBvcGVyYXRpb24gaXMgcGVyZm9ybWVkLgogICAgICAgIGlmIChldmVudCA9PSAnaW5wdXQnICYmIG1zaWUgPT0gOSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnRTdXBwb3J0W2V2ZW50XSkpIHsKICAgICAgICAgIHZhciBkaXZFbG0gPSAkd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgZXZlbnRTdXBwb3J0W2V2ZW50XSA9ICdvbicgKyBldmVudCBpbiBkaXZFbG07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZXZlbnRTdXBwb3J0W2V2ZW50XTsKICAgICAgfSwKICAgICAgLy8gVE9ETyhpKTogY3VycmVudGx5IHRoZXJlIGlzIG5vIHdheSB0byBmZWF0dXJlIGRldGVjdCBDU1Agd2l0aG91dCB0cmlnZ2VyaW5nIGFsZXJ0cwogICAgICBjc3A6IGZhbHNlCiAgICB9OwogIH1dOwp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kd2luZG93CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIHJlZmVyZW5jZSB0byB0aGUgYnJvd3NlcidzIGB3aW5kb3dgIG9iamVjdC4gV2hpbGUgYHdpbmRvd2AKICogaXMgZ2xvYmFsbHkgYXZhaWxhYmxlIGluIEphdmFTY3JpcHQsIGl0IGNhdXNlcyB0ZXN0YWJpbGl0eSBwcm9ibGVtcywgYmVjYXVzZQogKiBpdCBpcyBhIGdsb2JhbCB2YXJpYWJsZS4gSW4gYW5ndWxhciB3ZSBhbHdheXMgcmVmZXIgdG8gaXQgdGhyb3VnaCB0aGUKICogYCR3aW5kb3dgIHNlcnZpY2UsIHNvIGl0IG1heSBiZSBvdmVycmlkZW4sIHJlbW92ZWQgb3IgbW9ja2VkIGZvciB0ZXN0aW5nLgogKgogKiBBbGwgZXhwcmVzc2lvbnMgYXJlIGV2YWx1YXRlZCB3aXRoIHJlc3BlY3QgdG8gY3VycmVudCBzY29wZSBzbyB0aGV5IGRvbid0CiAqIHN1ZmZlciBmcm9tIHdpbmRvdyBnbG9iYWxpdHkuCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxpbnB1dCBuZy1pbml0PSIkd2luZG93ID0gJHNlcnZpY2UoJyR3aW5kb3cnKTsgZ3JlZXRpbmc9J0hlbGxvIFdvcmxkISciIHR5cGU9InRleHQiIG5nLW1vZGVsPSJncmVldGluZyIgLz4KICAgICAgIDxidXR0b24gbmctY2xpY2s9IiR3aW5kb3cuYWxlcnQoZ3JlZXRpbmcpIj5BTEVSVDwvYnV0dG9uPgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KZnVuY3Rpb24gJFdpbmRvd1Byb3ZpZGVyKCl7CiAgdGhpcy4kZ2V0ID0gdmFsdWVGbih3aW5kb3cpOwp9CgovKioKICogUGFyc2UgaGVhZGVycyBpbnRvIGtleSB2YWx1ZSBvYmplY3QKICoKICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlcnMgUmF3IGhlYWRlcnMgYXMgYSBzdHJpbmcKICogQHJldHVybnMge09iamVjdH0gUGFyc2VkIGhlYWRlcnMgYXMga2V5IHZhbHVlIG9iamVjdAogKi8KZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHsKICB2YXIgcGFyc2VkID0ge30sIGtleSwgdmFsLCBpOwoKICBpZiAoIWhlYWRlcnMpIHJldHVybiBwYXJzZWQ7CgogIGZvckVhY2goaGVhZGVycy5zcGxpdCgnXG4nKSwgZnVuY3Rpb24obGluZSkgewogICAgaSA9IGxpbmUuaW5kZXhPZignOicpOwogICAga2V5ID0gbG93ZXJjYXNlKHRyaW0obGluZS5zdWJzdHIoMCwgaSkpKTsKICAgIHZhbCA9IHRyaW0obGluZS5zdWJzdHIoaSArIDEpKTsKCiAgICBpZiAoa2V5KSB7CiAgICAgIGlmIChwYXJzZWRba2V5XSkgewogICAgICAgIHBhcnNlZFtrZXldICs9ICcsICcgKyB2YWw7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcGFyc2VkW2tleV0gPSB2YWw7CiAgICAgIH0KICAgIH0KICB9KTsKCiAgcmV0dXJuIHBhcnNlZDsKfQoKCi8qKgogKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gcGFyc2VkIGhlYWRlcnMuCiAqCiAqIEhlYWRlcnMgYXJlIGxhenkgcGFyc2VkIHdoZW4gZmlyc3QgcmVxdWVzdGVkLgogKiBAc2VlIHBhcnNlSGVhZGVycwogKgogKiBAcGFyYW0geyhzdHJpbmd8T2JqZWN0KX0gaGVhZGVycyBIZWFkZXJzIHRvIHByb3ZpZGUgYWNjZXNzIHRvLgogKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nPSl9IFJldHVybnMgYSBnZXR0ZXIgZnVuY3Rpb24gd2hpY2ggaWYgY2FsbGVkIHdpdGg6CiAqCiAqICAgLSBpZiBjYWxsZWQgd2l0aCBzaW5nbGUgYW4gYXJndW1lbnQgcmV0dXJucyBhIHNpbmdsZSBoZWFkZXIgdmFsdWUgb3IgbnVsbAogKiAgIC0gaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGhlYWRlcnMuCiAqLwpmdW5jdGlvbiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpIHsKICB2YXIgaGVhZGVyc09iaiA9IGlzT2JqZWN0KGhlYWRlcnMpID8gaGVhZGVycyA6IHVuZGVmaW5lZDsKCiAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHsKICAgIGlmICghaGVhZGVyc09iaikgaGVhZGVyc09iaiA9ICBwYXJzZUhlYWRlcnMoaGVhZGVycyk7CgogICAgaWYgKG5hbWUpIHsKICAgICAgcmV0dXJuIGhlYWRlcnNPYmpbbG93ZXJjYXNlKG5hbWUpXSB8fCBudWxsOwogICAgfQoKICAgIHJldHVybiBoZWFkZXJzT2JqOwogIH07Cn0KCgovKioKICogQ2hhaW4gYWxsIGdpdmVuIGZ1bmN0aW9ucwogKgogKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIGJvdGggcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtaW5nCiAqCiAqIEBwYXJhbSB7Kn0gZGF0YSBEYXRhIHRvIHRyYW5zZm9ybS4KICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmc9KX0gaGVhZGVycyBIdHRwIGhlYWRlcnMgZ2V0dGVyIGZuLgogKiBAcGFyYW0geyhmdW5jdGlvbnxBcnJheS48ZnVuY3Rpb24+KX0gZm5zIEZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIGZ1bmN0aW9ucy4KICogQHJldHVybnMgeyp9IFRyYW5zZm9ybWVkIGRhdGEuCiAqLwpmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykgewogIGlmIChpc0Z1bmN0aW9uKGZucykpCiAgICByZXR1cm4gZm5zKGRhdGEsIGhlYWRlcnMpOwoKICBmb3JFYWNoKGZucywgZnVuY3Rpb24oZm4pIHsKICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTsKICB9KTsKCiAgcmV0dXJuIGRhdGE7Cn0KCgpmdW5jdGlvbiBpc1N1Y2Nlc3Moc3RhdHVzKSB7CiAgcmV0dXJuIDIwMCA8PSBzdGF0dXMgJiYgc3RhdHVzIDwgMzAwOwp9CgoKZnVuY3Rpb24gJEh0dHBQcm92aWRlcigpIHsKICB2YXIgSlNPTl9TVEFSVCA9IC9eXHMqKFxbfFx7W15ce10pLywKICAgICAgSlNPTl9FTkQgPSAvW1x9XF1dXHMqJC8sCiAgICAgIFBST1RFQ1RJT05fUFJFRklYID0gL15cKVxdXH0nLD9cbi87CgogIHZhciAkY29uZmlnID0gdGhpcy5kZWZhdWx0cyA9IHsKICAgIC8vIHRyYW5zZm9ybSBpbmNvbWluZyByZXNwb25zZSBkYXRhCiAgICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uKGRhdGEpIHsKICAgICAgaWYgKGlzU3RyaW5nKGRhdGEpKSB7CiAgICAgICAgLy8gc3RyaXAganNvbiB2dWxuZXJhYmlsaXR5IHByb3RlY3Rpb24gcHJlZml4CiAgICAgICAgZGF0YSA9IGRhdGEucmVwbGFjZShQUk9URUNUSU9OX1BSRUZJWCwgJycpOwogICAgICAgIGlmIChKU09OX1NUQVJULnRlc3QoZGF0YSkgJiYgSlNPTl9FTkQudGVzdChkYXRhKSkKICAgICAgICAgIGRhdGEgPSBmcm9tSnNvbihkYXRhLCB0cnVlKTsKICAgICAgfQogICAgICByZXR1cm4gZGF0YTsKICAgIH1dLAoKICAgIC8vIHRyYW5zZm9ybSBvdXRnb2luZyByZXF1ZXN0IGRhdGEKICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbihkKSB7CiAgICAgIHJldHVybiBpc09iamVjdChkKSAmJiAhaXNGaWxlKGQpID8gdG9Kc29uKGQpIDogZDsKICAgIH1dLAoKICAgIC8vIGRlZmF1bHQgaGVhZGVycwogICAgaGVhZGVyczogewogICAgICBjb21tb246IHsKICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsCiAgICAgICAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnCiAgICAgIH0sCiAgICAgIHBvc3Q6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCd9LAogICAgICBwdXQ6ICB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnfQogICAgfQogIH07CgogIHZhciBwcm92aWRlclJlc3BvbnNlSW50ZXJjZXB0b3JzID0gdGhpcy5yZXNwb25zZUludGVyY2VwdG9ycyA9IFtdOwoKICB0aGlzLiRnZXQgPSBbJyRodHRwQmFja2VuZCcsICckYnJvd3NlcicsICckY2FjaGVGYWN0b3J5JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGluamVjdG9yJywKICAgICAgZnVuY3Rpb24oJGh0dHBCYWNrZW5kLCAkYnJvd3NlciwgJGNhY2hlRmFjdG9yeSwgJHJvb3RTY29wZSwgJHEsICRpbmplY3RvcikgewoKICAgIHZhciBkZWZhdWx0Q2FjaGUgPSAkY2FjaGVGYWN0b3J5KCckaHR0cCcpLAogICAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JzID0gW107CgogICAgZm9yRWFjaChwcm92aWRlclJlc3BvbnNlSW50ZXJjZXB0b3JzLCBmdW5jdGlvbihpbnRlcmNlcHRvcikgewogICAgICByZXNwb25zZUludGVyY2VwdG9ycy5wdXNoKAogICAgICAgICAgaXNTdHJpbmcoaW50ZXJjZXB0b3IpCiAgICAgICAgICAgICAgPyAkaW5qZWN0b3IuZ2V0KGludGVyY2VwdG9yKQogICAgICAgICAgICAgIDogJGluamVjdG9yLmludm9rZShpbnRlcmNlcHRvcikKICAgICAgKTsKICAgIH0pOwoKCiAgICAvKioKICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICogQG5hbWUgbmcuJGh0dHAKICAgICAqIEByZXF1aXJlcyAkaHR0cEJhY2tlZAogICAgICogQHJlcXVpcmVzICRicm93c2VyCiAgICAgKiBAcmVxdWlyZXMgJGNhY2hlRmFjdG9yeQogICAgICogQHJlcXVpcmVzICRyb290U2NvcGUKICAgICAqIEByZXF1aXJlcyAkcQogICAgICogQHJlcXVpcmVzICRpbmplY3RvcgogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGNvcmUgQW5ndWxhciBzZXJ2aWNlIHRoYXQgZmFjaWxpdGF0ZXMgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSByZW1vdGUKICAgICAqIEhUVFAgc2VydmVycyB2aWEgYnJvd3NlcidzIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi94bWxodHRwcmVxdWVzdAogICAgICogWE1MSHR0cFJlcXVlc3R9IG9iamVjdCBvciB2aWEge0BsaW5rIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlAgSlNPTlB9LgogICAgICoKICAgICAqIEZvciB1bml0IHRlc3RpbmcgYXBwbGljYXRpb25zIHRoYXQgdXNlIGAkaHR0cGAgc2VydmljZSwgc2VlCiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCAkaHR0cEJhY2tlbmQgbW9ja30uCiAgICAgKgogICAgICogRm9yIGEgaGlnaGVyIGxldmVsIG9mIGFic3RyYWN0aW9uLCBwbGVhc2UgY2hlY2sgb3V0IHRoZSB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2UKICAgICAqICRyZXNvdXJjZX0gc2VydmljZS4KICAgICAqCiAgICAgKiBUaGUgJGh0dHAgQVBJIGlzIGJhc2VkIG9uIHRoZSB7QGxpbmsgbmcuJHEgZGVmZXJyZWQvcHJvbWlzZSBBUElzfSBleHBvc2VkIGJ5CiAgICAgKiB0aGUgJHEgc2VydmljZS4gV2hpbGUgZm9yIHNpbXBsZSB1c2FnZSBwYXR0ZXJzIHRoaXMgZG9lc24ndCBtYXR0ZXIgbXVjaCwgZm9yIGFkdmFuY2VkIHVzYWdlLAogICAgICogaXQgaXMgaW1wb3J0YW50IHRvIGZhbWlsaWFyaXplIHlvdXJzZWxmIHdpdGggdGhlc2UgYXBpcyBhbmQgZ3VhcmFudGVlcyB0aGV5IHByb3ZpZGUuCiAgICAgKgogICAgICoKICAgICAqICMgR2VuZXJhbCB1c2FnZQogICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGEgc2luZ2xlIGFyZ3VtZW50IOKAlCBhIGNvbmZpZ3VyYXRpb24gb2JqZWN0IOKAlAogICAgICogdGhhdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGFuIGh0dHAgcmVxdWVzdCBhbmQgcmV0dXJucyAgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX0KICAgICAqIHdpdGggdHdvICRodHRwIHNwZWNpZmljIG1ldGhvZHM6IGBzdWNjZXNzYCBhbmQgYGVycm9yYC4KICAgICAqCiAgICAgKiA8cHJlPgogICAgICogICAkaHR0cCh7bWV0aG9kOiAnR0VUJywgdXJsOiAnL3NvbWVVcmwnfSkuCiAgICAgKiAgICAgc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykgewogICAgICogICAgICAgLy8gdGhpcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBhc3luY2hyb25vdXNseQogICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlCiAgICAgKiAgICAgfSkuCiAgICAgKiAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHsKICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnMKICAgICAqICAgICAgIC8vIG9yIHNlcnZlciByZXR1cm5zIHJlc3BvbnNlIHdpdGggc3RhdHVzCiAgICAgKiAgICAgICAvLyBjb2RlIG91dHNpZGUgb2YgdGhlIDwyMDAsIDQwMCkgcmFuZ2UKICAgICAqICAgICB9KTsKICAgICAqIDwvcHJlPgogICAgICoKICAgICAqIFNpbmNlIHRoZSByZXR1cm5lZCB2YWx1ZSBvZiBjYWxsaW5nIHRoZSAkaHR0cCBmdW5jdGlvbiBpcyBhIFByb21pc2Ugb2JqZWN0LCB5b3UgY2FuIGFsc28gdXNlCiAgICAgKiB0aGUgYHRoZW5gIG1ldGhvZCB0byByZWdpc3RlciBjYWxsYmFja3MsIGFuZCB0aGVzZSBjYWxsYmFja3Mgd2lsbCByZWNlaXZlIGEgc2luZ2xlIGFyZ3VtZW50IOKAkwogICAgICogYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVzcG9uc2UuIFNlZSB0aGUgYXBpIHNpZ25hdHVyZSBhbmQgdHlwZSBpbmZvIGJlbG93IGZvciBtb3JlCiAgICAgKiBkZXRhaWxzLgogICAgICoKICAgICAqCiAgICAgKiAjIFNob3J0Y3V0IG1ldGhvZHMKICAgICAqCiAgICAgKiBTaW5jZSBhbGwgaW52b2NhdGlvbiBvZiB0aGUgJGh0dHAgc2VydmljZSByZXF1aXJlIGRlZmluaXRpb24gb2YgdGhlIGh0dHAgbWV0aG9kIGFuZCB1cmwgYW5kCiAgICAgKiBQT1NUIGFuZCBQVVQgcmVxdWVzdHMgcmVxdWlyZSByZXNwb25zZSBib2R5L2RhdGEgdG8gYmUgcHJvdmlkZWQgYXMgd2VsbCwgc2hvcnRjdXQgbWV0aG9kcwogICAgICogd2VyZSBjcmVhdGVkIHRvIHNpbXBsaWZ5IHVzaW5nIHRoZSBhcGk6CiAgICAgKgogICAgICogPHByZT4KICAgICAqICAgJGh0dHAuZ2V0KCcvc29tZVVybCcpLnN1Y2Nlc3Moc3VjY2Vzc0NhbGxiYWNrKTsKICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhKS5zdWNjZXNzKHN1Y2Nlc3NDYWxsYmFjayk7CiAgICAgKiA8L3ByZT4KICAgICAqCiAgICAgKiBDb21wbGV0ZSBsaXN0IG9mIHNob3J0Y3V0IG1ldGhvZHM6CiAgICAgKgogICAgICogLSB7QGxpbmsgbmcuJGh0dHAjZ2V0ICRodHRwLmdldH0KICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2hlYWQgJGh0dHAuaGVhZH0KICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3Bvc3QgJGh0dHAucG9zdH0KICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3B1dCAkaHR0cC5wdXR9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNkZWxldGUgJGh0dHAuZGVsZXRlfQogICAgICogLSB7QGxpbmsgbmcuJGh0dHAjanNvbnAgJGh0dHAuanNvbnB9CiAgICAgKgogICAgICoKICAgICAqICMgU2V0dGluZyBIVFRQIEhlYWRlcnMKICAgICAqCiAgICAgKiBUaGUgJGh0dHAgc2VydmljZSB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGNlcnRhaW4gaHR0cCBoZWFkZXJzIHRvIGFsbCByZXF1ZXN0cy4gVGhlc2UgZGVmYXVsdHMKICAgICAqIGNhbiBiZSBmdWxseSBjb25maWd1cmVkIGJ5IGFjY2Vzc2luZyB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVyc2AgY29uZmlndXJhdGlvbgogICAgICogb2JqZWN0LCB3aGljaCBjdXJyZW50bHkgY29udGFpbnMgdGhpcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb246CiAgICAgKgogICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbmAgKGhlYWRlcnMgdGhhdCBhcmUgY29tbW9uIGZvciBhbGwgcmVxdWVzdHMpOgogICAgICogICAtIGBBY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICogLyAqYAogICAgICogICAtIGBYLVJlcXVlc3RlZC1XaXRoOiBYTUxIdHRwUmVxdWVzdGAKICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgSFRUUCBQT1NUIHJlcXVlc3RzKQogICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gCiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucHV0YCAoaGVhZGVyIGRlZmF1bHRzIGZvciBIVFRQIFBVVCByZXF1ZXN0cykKICAgICAqICAgLSBgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uYAogICAgICoKICAgICAqIFRvIGFkZCBvciBvdmVyd3JpdGUgdGhlc2UgZGVmYXVsdHMsIHNpbXBseSBhZGQgb3IgcmVtb3ZlIGEgcHJvcGVydHkgZnJvbSB0aGlzIGNvbmZpZ3VyYXRpb24KICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdAogICAgICogd2l0aCBuYW1lIGVxdWFsIHRvIHRoZSBsb3dlci1jYXNlZCBodHRwIG1ldGhvZCBuYW1lLCBlLmcuCiAgICAgKiBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldFsnTXktSGVhZGVyJ109J3ZhbHVlJ2AuCiAgICAgKgogICAgICogQWRkaXRpb25hbGx5LCB0aGUgZGVmYXVsdHMgY2FuIGJlIHNldCBhdCBydW50aW1lIHZpYSB0aGUgYCRodHRwLmRlZmF1bHRzYCBvYmplY3QgaW4gYSBzaW1pbGFyCiAgICAgKiBmYXNzaW9uIGFzIGRlc2NyaWJlZCBhYm92ZS4KICAgICAqCiAgICAgKgogICAgICogIyBUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlcwogICAgICoKICAgICAqIEJvdGggcmVxdWVzdHMgYW5kIHJlc3BvbnNlcyBjYW4gYmUgdHJhbnNmb3JtZWQgdXNpbmcgdHJhbnNmb3JtIGZ1bmN0aW9ucy4gQnkgZGVmYXVsdCwgQW5ndWxhcgogICAgICogYXBwbGllcyB0aGVzZSB0cmFuc2Zvcm1hdGlvbnM6CiAgICAgKgogICAgICogUmVxdWVzdCB0cmFuc2Zvcm1hdGlvbnM6CiAgICAgKgogICAgICogLSBpZiB0aGUgYGRhdGFgIHByb3BlcnR5IG9mIHRoZSByZXF1ZXN0IGNvbmZpZyBvYmplY3QgY29udGFpbnMgYW4gb2JqZWN0LCBzZXJpYWxpemUgaXQgaW50bwogICAgICogICBKU09OIGZvcm1hdC4KICAgICAqCiAgICAgKiBSZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnM6CiAgICAgKgogICAgICogIC0gaWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykKICAgICAqICAtIGlmIGpzb24gcmVzcG9uc2UgaXMgZGV0ZWN0ZWQsIGRlc2VyaWFsaXplIGl0IHVzaW5nIGEgSlNPTiBwYXJzZXIKICAgICAqCiAgICAgKiBUbyBvdmVycmlkZSB0aGVzZSB0cmFuc2Zvcm1hdGlvbiBsb2NhbGx5LCBzcGVjaWZ5IHRyYW5zZm9ybSBmdW5jdGlvbnMgYXMgYHRyYW5zZm9ybVJlcXVlc3RgCiAgICAgKiBhbmQvb3IgYHRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzIG9mIHRoZSBjb25maWcgb2JqZWN0LiBUbyBnbG9iYWxseSBvdmVycmlkZSB0aGUgZGVmYXVsdAogICAgICogdHJhbnNmb3Jtcywgb3ZlcnJpZGUgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZAogICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgIHByb3BlcnRpZXMgb2YgdGhlIGAkaHR0cFByb3ZpZGVyYC4KICAgICAqCiAgICAgKgogICAgICogIyBDYWNoaW5nCiAgICAgKgogICAgICogVG8gZW5hYmxlIGNhY2hpbmcgc2V0IHRoZSBjb25maWd1cmF0aW9uIHByb3BlcnR5IGBjYWNoZWAgdG8gYHRydWVgLiBXaGVuIHRoZSBjYWNoZSBpcwogICAgICogZW5hYmxlZCwgYCRodHRwYCBzdG9yZXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBpbiBsb2NhbCBjYWNoZS4gTmV4dCB0aW1lIHRoZQogICAgICogcmVzcG9uc2UgaXMgc2VydmVkIGZyb20gdGhlIGNhY2hlIHdpdGhvdXQgc2VuZGluZyBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci4KICAgICAqCiAgICAgKiBOb3RlIHRoYXQgZXZlbiBpZiB0aGUgcmVzcG9uc2UgaXMgc2VydmVkIGZyb20gY2FjaGUsIGRlbGl2ZXJ5IG9mIHRoZSBkYXRhIGlzIGFzeW5jaHJvbm91cyBpbgogICAgICogdGhlIHNhbWUgd2F5IHRoYXQgcmVhbCByZXF1ZXN0cyBhcmUuCiAgICAgKgogICAgICogSWYgdGhlcmUgYXJlIG11bHRpcGxlIEdFVCByZXF1ZXN0cyBmb3IgdGhlIHNhbWUgdXJsIHRoYXQgc2hvdWxkIGJlIGNhY2hlZCB1c2luZyB0aGUgc2FtZQogICAgICogY2FjaGUsIGJ1dCB0aGUgY2FjaGUgaXMgbm90IHBvcHVsYXRlZCB5ZXQsIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB3aWxsIGJlIG1hZGUgYW5kCiAgICAgKiB0aGUgcmVtYWluaW5nIHJlcXVlc3RzIHdpbGwgYmUgZnVsZmlsbGVkIHVzaW5nIHRoZSByZXNwb25zZSBmb3IgdGhlIGZpcnN0IHJlcXVlc3QuCiAgICAgKgogICAgICoKICAgICAqICMgUmVzcG9uc2UgaW50ZXJjZXB0b3JzCiAgICAgKgogICAgICogQmVmb3JlIHlvdSBzdGFydCBjcmVhdGluZyBpbnRlcmNlcHRvcnMsIGJlIHN1cmUgdG8gdW5kZXJzdGFuZCB0aGUKICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS4KICAgICAqCiAgICAgKiBGb3IgcHVycG9zZXMgb2YgZ2xvYmFsIGVycm9yIGhhbmRsaW5nLCBhdXRoZW50aWNhdGlvbiBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvcgogICAgICogYXN5bmNocm9ub3VzIHByZXByb2Nlc3Npbmcgb2YgcmVjZWl2ZWQgcmVzcG9uc2VzLCBpdCBpcyBkZXNpcmFibGUgdG8gYmUgYWJsZSB0byBpbnRlcmNlcHQKICAgICAqIHJlc3BvbnNlcyBmb3IgaHR0cCByZXF1ZXN0cyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdAogICAgICogaW5pdGlhdGVkIHRoZXNlIHJlcXVlc3RzLiBUaGUgcmVzcG9uc2UgaW50ZXJjZXB0b3JzIGxldmVyYWdlIHRoZSB7QGxpbmsgbmcuJHEKICAgICAqIHByb21pc2UgYXBpc30gdG8gZnVsZmlsIHRoaXMgbmVlZCBmb3IgYm90aCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHByZXByb2Nlc3NpbmcuCiAgICAgKgogICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSAkaHR0cFByb3ZpZGVyIGJ5CiAgICAgKiBhZGRpbmcgdGhlbSB0byB0aGUgYCRodHRwUHJvdmlkZXIucmVzcG9uc2VJbnRlcmNlcHRvcnNgIGFycmF5LiBUaGUgZmFjdG9yeSBpcyBjYWxsZWQgYW5kCiAgICAgKiBpbmplY3RlZCB3aXRoIGRlcGVuZGVuY2llcyAoaWYgc3BlY2lmaWVkKSBhbmQgcmV0dXJucyB0aGUgaW50ZXJjZXB0b3IgIOKAlCBhIGZ1bmN0aW9uIHRoYXQKICAgICAqIHRha2VzIGEge0BsaW5rIG5nLiRxIHByb21pc2V9IGFuZCByZXR1cm5zIHRoZSBvcmlnaW5hbCBvciBhIG5ldyBwcm9taXNlLgogICAgICoKICAgICAqIDxwcmU+CiAgICAgKiAgIC8vIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciBhcyBhIHNlcnZpY2UKICAgICAqICAgJHByb3ZpZGUuZmFjdG9yeSgnbXlIdHRwSW50ZXJjZXB0b3InLCBmdW5jdGlvbigkcSwgZGVwZW5kZW5jeTEsIGRlcGVuZGVuY3kyKSB7CiAgICAgKiAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb21pc2UpIHsKICAgICAqICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3MKICAgICAqICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvcgogICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZXNwb25zZSkpIHsKICAgICAqICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VPck5ld1Byb21pc2UKICAgICAqICAgICAgICAgfQogICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTsKICAgICAqICAgICAgIH0pOwogICAgICogICAgIH0KICAgICAqICAgfSk7CiAgICAgKgogICAgICogICAkaHR0cFByb3ZpZGVyLnJlc3BvbnNlSW50ZXJjZXB0b3JzLnB1c2goJ215SHR0cEludGVyY2VwdG9yJyk7CiAgICAgKgogICAgICoKICAgICAqICAgLy8gcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9yIHZpYSBhbiBhbm9ueW1vdXMgZmFjdG9yeQogICAgICogICAkaHR0cFByb3ZpZGVyLnJlc3BvbnNlSW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5MikgewogICAgICogICAgIHJldHVybiBmdW5jdGlvbihwcm9taXNlKSB7CiAgICAgKiAgICAgICAvLyBzYW1lIGFzIGFib3ZlCiAgICAgKiAgICAgfQogICAgICogICB9KTsKICAgICAqIDwvcHJlPgogICAgICoKICAgICAqCiAgICAgKiAjIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zCiAgICAgKgogICAgICogV2hlbiBkZXNpZ25pbmcgd2ViIGFwcGxpY2F0aW9ucywgY29uc2lkZXIgc2VjdXJpdHkgdGhyZWF0cyBmcm9tOgogICAgICoKICAgICAqIC0ge0BsaW5rIGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweAogICAgICogICBKU09OIFZ1bG5lcmFiaWxpdHl9CiAgICAgKiAtIHtAbGluayBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5IFhTUkZ9CiAgICAgKgogICAgICogQm90aCBzZXJ2ZXIgYW5kIHRoZSBjbGllbnQgbXVzdCBjb29wZXJhdGUgaW4gb3JkZXIgdG8gZWxpbWluYXRlIHRoZXNlIHRocmVhdHMuIEFuZ3VsYXIgY29tZXMKICAgICAqIHByZS1jb25maWd1cmVkIHdpdGggc3RyYXRlZ2llcyB0aGF0IGFkZHJlc3MgdGhlc2UgaXNzdWVzLCBidXQgZm9yIHRoaXMgdG8gd29yayBiYWNrZW5kIHNlcnZlcgogICAgICogY29vcGVyYXRpb24gaXMgcmVxdWlyZWQuCiAgICAgKgogICAgICogIyMgSlNPTiBWdWxuZXJhYmlsaXR5IFByb3RlY3Rpb24KICAgICAqCiAgICAgKiBBIHtAbGluayBodHRwOi8vaGFhY2tlZC5jb20vYXJjaGl2ZS8yMDA4LzExLzIwL2FuYXRvbXktb2YtYS1zdWJ0bGUtanNvbi12dWxuZXJhYmlsaXR5LmFzcHgKICAgICAqIEpTT04gVnVsbmVyYWJpbGl0eX0gYWxsb3dzIHRoaXJkIHBhcnR5IHdlYi1zaXRlIHRvIHR1cm4geW91ciBKU09OIHJlc291cmNlIFVSTCBpbnRvCiAgICAgKiB7QGxpbmsgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OI0pTT05QIEpTT05QfSByZXF1ZXN0IHVuZGVyIHNvbWUgY29uZGl0aW9ucy4gVG8KICAgICAqIGNvdW50ZXIgdGhpcyB5b3VyIHNlcnZlciBjYW4gcHJlZml4IGFsbCBKU09OIHJlcXVlc3RzIHdpdGggZm9sbG93aW5nIHN0cmluZyBgIildfScsXG4iYC4KICAgICAqIEFuZ3VsYXIgd2lsbCBhdXRvbWF0aWNhbGx5IHN0cmlwIHRoZSBwcmVmaXggYmVmb3JlIHByb2Nlc3NpbmcgaXQgYXMgSlNPTi4KICAgICAqCiAgICAgKiBGb3IgZXhhbXBsZSBpZiB5b3VyIHNlcnZlciBuZWVkcyB0byByZXR1cm46CiAgICAgKiA8cHJlPgogICAgICogWydvbmUnLCd0d28nXQogICAgICogPC9wcmU+CiAgICAgKgogICAgICogd2hpY2ggaXMgdnVsbmVyYWJsZSB0byBhdHRhY2ssIHlvdXIgc2VydmVyIGNhbiByZXR1cm46CiAgICAgKiA8cHJlPgogICAgICogKV19JywKICAgICAqIFsnb25lJywndHdvJ10KICAgICAqIDwvcHJlPgogICAgICoKICAgICAqIEFuZ3VsYXIgd2lsbCBzdHJpcCB0aGUgcHJlZml4LCBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgSlNPTi4KICAgICAqCiAgICAgKgogICAgICogIyMgQ3Jvc3MgU2l0ZSBSZXF1ZXN0IEZvcmdlcnkgKFhTUkYpIFByb3RlY3Rpb24KICAgICAqCiAgICAgKiB7QGxpbmsgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3JlcXVlc3RfZm9yZ2VyeSBYU1JGfSBpcyBhIHRlY2huaXF1ZSBieSB3aGljaAogICAgICogYW4gdW5hdXRob3JpemVkIHNpdGUgY2FuIGdhaW4geW91ciB1c2VyJ3MgcHJpdmF0ZSBkYXRhLiBBbmd1bGFyIHByb3ZpZGVzIGZvbGxvd2luZyBtZWNoYW5pc20KICAgICAqIHRvIGNvdW50ZXIgWFNSRi4gV2hlbiBwZXJmb3JtaW5nIFhIUiByZXF1ZXN0cywgdGhlICRodHRwIHNlcnZpY2UgcmVhZHMgYSB0b2tlbiBmcm9tIGEgY29va2llCiAgICAgKiBjYWxsZWQgYFhTUkYtVE9LRU5gIGFuZCBzZXRzIGl0IGFzIHRoZSBIVFRQIGhlYWRlciBgWC1YU1JGLVRPS0VOYC4gU2luY2Ugb25seSBKYXZhU2NyaXB0IHRoYXQKICAgICAqIHJ1bnMgb24geW91ciBkb21haW4gY291bGQgcmVhZCB0aGUgY29va2llLCB5b3VyIHNlcnZlciBjYW4gYmUgYXNzdXJlZCB0aGF0IHRoZSBYSFIgY2FtZSBmcm9tCiAgICAgKiBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4uCiAgICAgKgogICAgICogVG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhpcywgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gc2V0IGEgdG9rZW4gaW4gYSBKYXZhU2NyaXB0IHJlYWRhYmxlIHNlc3Npb24KICAgICAqIGNvb2tpZSBjYWxsZWQgYFhTUkYtVE9LRU5gIG9uIGZpcnN0IEhUVFAgR0VUIHJlcXVlc3QuIE9uIHN1YnNlcXVlbnQgbm9uLUdFVCByZXF1ZXN0cyB0aGUKICAgICAqIHNlcnZlciBjYW4gdmVyaWZ5IHRoYXQgdGhlIGNvb2tpZSBtYXRjaGVzIGBYLVhTUkYtVE9LRU5gIEhUVFAgaGVhZGVyLCBhbmQgdGhlcmVmb3JlIGJlIHN1cmUKICAgICAqIHRoYXQgb25seSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4gY291bGQgaGF2ZSByZWFkIHRoZSB0b2tlbi4gVGhlIHRva2VuIG11c3QgYmUKICAgICAqIHVuaXF1ZSBmb3IgZWFjaCB1c2VyIGFuZCBtdXN0IGJlIHZlcmlmaWFibGUgYnkgdGhlIHNlcnZlciAodG8gcHJldmVudCB0aGUgSmF2YVNjcmlwdCBtYWtpbmcKICAgICAqIHVwIGl0cyBvd24gdG9rZW5zKS4gV2UgcmVjb21tZW5kIHRoYXQgdGhlIHRva2VuIGlzIGEgZGlnZXN0IG9mIHlvdXIgc2l0ZSdzIGF1dGhlbnRpY2F0aW9uCiAgICAgKiBjb29raWUgd2l0aCB7QGxpbmsgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9SYWluYm93X3RhYmxlIHNhbHQgZm9yIGFkZGVkIHNlY3VyaXR5fS4KICAgICAqCiAgICAgKgogICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBPYmplY3QgZGVzY3JpYmluZyB0aGUgcmVxdWVzdCB0byBiZSBtYWRlIGFuZCBob3cgaXQgc2hvdWxkIGJlCiAgICAgKiAgICBwcm9jZXNzZWQuIFRoZSBvYmplY3QgaGFzIGZvbGxvd2luZyBwcm9wZXJ0aWVzOgogICAgICoKICAgICAqICAgIC0gKiptZXRob2QqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBtZXRob2QgKGUuZy4gJ0dFVCcsICdQT1NUJywgZXRjKQogICAgICogICAgLSAqKnVybCoqIOKAkyBge3N0cmluZ31gIOKAkyBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkLgogICAgICogICAgLSAqKnBhcmFtcyoqIOKAkyBge09iamVjdC48c3RyaW5nfE9iamVjdD59YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB3aGljaCB3aWxsIGJlIHR1cm5lZCB0bwogICAgICogICAgICBgP2tleTE9dmFsdWUxJmtleTI9dmFsdWUyYCBhZnRlciB0aGUgdXJsLiBJZiB0aGUgdmFsdWUgaXMgbm90IGEgc3RyaW5nLCBpdCB3aWxsIGJlIEpTT05pZmllZC4KICAgICAqICAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBEYXRhIHRvIGJlIHNlbnQgYXMgdGhlIHJlcXVlc3QgbWVzc2FnZSBkYXRhLgogICAgICogICAgLSAqKmhlYWRlcnMqKiDigJMgYHtPYmplY3R9YCDigJMgTWFwIG9mIHN0cmluZ3MgcmVwcmVzZW50aW5nIEhUVFAgaGVhZGVycyB0byBzZW5kIHRvIHRoZSBzZXJ2ZXIuCiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVxdWVzdCoqIOKAkyBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJMKICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwCiAgICAgKiAgICAgIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBzZXJpYWxpemVkKSB2ZXJzaW9uLgogICAgICogICAgLSAqKnRyYW5zZm9ybVJlc3BvbnNlKiog4oCTIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpPn1gIOKAkwogICAgICogICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHAKICAgICAqICAgICAgcmVzcG9uc2UgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBkZXNlcmlhbGl6ZWQpIHZlcnNpb24uCiAgICAgKiAgICAtICoqY2FjaGUqKiDigJMgYHtib29sZWFufENhY2hlfWAg4oCTIElmIHRydWUsIGEgZGVmYXVsdCAkaHR0cCBjYWNoZSB3aWxsIGJlIHVzZWQgdG8gY2FjaGUgdGhlCiAgICAgKiAgICAgIEdFVCByZXF1ZXN0LCBvdGhlcndpc2UgaWYgYSBjYWNoZSBpbnN0YW5jZSBidWlsdCB3aXRoCiAgICAgKiAgICAgIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LCB0aGlzIGNhY2hlIHdpbGwgYmUgdXNlZCBmb3IKICAgICAqICAgICAgY2FjaGluZy4KICAgICAqICAgIC0gKip0aW1lb3V0Kiog4oCTIGB7bnVtYmVyfWAg4oCTIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLgogICAgICogICAgLSAqKndpdGhDcmVkZW50aWFscyoqIC0gYHtib29sZWFufWAgLSB3aGV0aGVyIHRvIHRvIHNldCB0aGUgYHdpdGhDcmVkZW50aWFsc2AgZmxhZyBvbiB0aGUKICAgICAqICAgICAgWEhSIG9iamVjdC4gU2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9odHRwX2FjY2Vzc19jb250cm9sI3NlY3Rpb25fNQogICAgICogICAgICByZXF1ZXN0cyB3aXRoIGNyZWRlbnRpYWxzfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IFJldHVybnMgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX0gb2JqZWN0IHdpdGggdGhlCiAgICAgKiAgIHN0YW5kYXJkIGB0aGVuYCBtZXRob2QgYW5kIHR3byBodHRwIHNwZWNpZmljIG1ldGhvZHM6IGBzdWNjZXNzYCBhbmQgYGVycm9yYC4gVGhlIGB0aGVuYAogICAgICogICBtZXRob2QgdGFrZXMgdHdvIGFyZ3VtZW50cyBhIHN1Y2Nlc3MgYW5kIGFuIGVycm9yIGNhbGxiYWNrIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdpdGggYQogICAgICogICByZXNwb25zZSBvYmplY3QuIFRoZSBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgbWV0aG9kcyB0YWtlIGEgc2luZ2xlIGFyZ3VtZW50IC0gYSBmdW5jdGlvbiB0aGF0CiAgICAgKiAgIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZHMgb3IgZmFpbHMgcmVzcGVjdGl2ZWx5LiBUaGUgYXJndW1lbnRzIHBhc3NlZCBpbnRvCiAgICAgKiAgIHRoZXNlIGZ1bmN0aW9ucyBhcmUgZGVzdHJ1Y3R1cmVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZXNwb25zZSBvYmplY3QgcGFzc2VkIGludG8gdGhlCiAgICAgKiAgIGB0aGVuYCBtZXRob2QuIFRoZSByZXNwb25zZSBvYmplY3QgaGFzIHRoZXNlIHByb3BlcnRpZXM6CiAgICAgKgogICAgICogICAtICoqZGF0YSoqIOKAkyBge3N0cmluZ3xPYmplY3R9YCDigJMgVGhlIHJlc3BvbnNlIGJvZHkgdHJhbnNmb3JtZWQgd2l0aCB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9ucy4KICAgICAqICAgLSAqKnN0YXR1cyoqIOKAkyBge251bWJlcn1gIOKAkyBIVFRQIHN0YXR1cyBjb2RlIG9mIHRoZSByZXNwb25zZS4KICAgICAqICAgLSAqKmhlYWRlcnMqKiDigJMgYHtmdW5jdGlvbihbaGVhZGVyTmFtZV0pfWAg4oCTIEhlYWRlciBnZXR0ZXIgZnVuY3Rpb24uCiAgICAgKiAgIC0gKipjb25maWcqKiDigJMgYHtPYmplY3R9YCDigJMgVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHJlcXVlc3QuCiAgICAgKgogICAgICogQHByb3BlcnR5IHtBcnJheS48T2JqZWN0Pn0gcGVuZGluZ1JlcXVlc3RzIEFycmF5IG9mIGNvbmZpZyBvYmplY3RzIGZvciBjdXJyZW50bHkgcGVuZGluZwogICAgICogICByZXF1ZXN0cy4gVGhpcyBpcyBwcmltYXJpbHkgbWVhbnQgdG8gYmUgdXNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLgogICAgICoKICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICA8ZXhhbXBsZT4KICAgICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iRmV0Y2hDdHJsIj4KICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0ibWV0aG9kIj4KICAgICAgICAgICAgICA8b3B0aW9uPkdFVDwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24+SlNPTlA8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0idXJsIiBzaXplPSI4MCIvPgogICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSJmZXRjaCgpIj5mZXRjaDwvYnV0dG9uPjxicj4KICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0idXBkYXRlTW9kZWwoJ0dFVCcsICdodHRwLWhlbGxvLmh0bWwnKSI+U2FtcGxlIEdFVDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSJ1cGRhdGVNb2RlbCgnSlNPTlAnLCAnaHR0cDovL2FuZ3VsYXJqcy5vcmcvZ3JlZXQucGhwP2NhbGxiYWNrPUpTT05fQ0FMTEJBQ0smbmFtZT1TdXBlciUyMEhlcm8nKSI+U2FtcGxlIEpTT05QPC9idXR0b24+CiAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9InVwZGF0ZU1vZGVsKCdKU09OUCcsICdodHRwOi8vYW5ndWxhcmpzLm9yZy9kb2VzbnRleGlzdCZjYWxsYmFjaz1KU09OX0NBTExCQUNLJykiPkludmFsaWQgSlNPTlA8L2J1dHRvbj4KICAgICAgICAgICAgPHByZT5odHRwIHN0YXR1cyBjb2RlOiB7e3N0YXR1c319PC9wcmU+CiAgICAgICAgICAgIDxwcmU+aHR0cCByZXNwb25zZSBkYXRhOiB7e2RhdGF9fTwvcHJlPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgICAgICBmdW5jdGlvbiBGZXRjaEN0cmwoJHNjb3BlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUpIHsKICAgICAgICAgICAgJHNjb3BlLm1ldGhvZCA9ICdHRVQnOwogICAgICAgICAgICAkc2NvcGUudXJsID0gJ2h0dHAtaGVsbG8uaHRtbCc7CgogICAgICAgICAgICAkc2NvcGUuZmV0Y2ggPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAkc2NvcGUuY29kZSA9IG51bGw7CiAgICAgICAgICAgICAgJHNjb3BlLnJlc3BvbnNlID0gbnVsbDsKCiAgICAgICAgICAgICAgJGh0dHAoe21ldGhvZDogJHNjb3BlLm1ldGhvZCwgdXJsOiAkc2NvcGUudXJsLCBjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS4KICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSBzdGF0dXM7CiAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YTsKICAgICAgICAgICAgICAgIH0pLgogICAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YSB8fCAiUmVxdWVzdCBmYWlsZWQiOwogICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gc3RhdHVzOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZU1vZGVsID0gZnVuY3Rpb24obWV0aG9kLCB1cmwpIHsKICAgICAgICAgICAgICAkc2NvcGUubWV0aG9kID0gbWV0aG9kOwogICAgICAgICAgICAgICRzY29wZS51cmwgPSB1cmw7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9Imh0dHAtaGVsbG8uaHRtbCI+CiAgICAgICAgICBIZWxsbywgJGh0dHAhCiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgICAgIGl0KCdzaG91bGQgbWFrZSBhbiB4aHIgR0VUIHJlcXVlc3QnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucygiU2FtcGxlIEdFVCIpJykuY2xpY2soKTsKICAgICAgICAgICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucygiZmV0Y2giKScpLmNsaWNrKCk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdzdGF0dXMnKSkudG9CZSgnMjAwJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdkYXRhJykpLnRvTWF0Y2goL0hlbGxvLCBcJGh0dHAhLyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIG1ha2UgYSBKU09OUCByZXF1ZXN0IHRvIGFuZ3VsYXJqcy5vcmcnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucygiU2FtcGxlIEpTT05QIiknKS5jbGljaygpOwogICAgICAgICAgICBlbGVtZW50KCc6YnV0dG9uOmNvbnRhaW5zKCJmZXRjaCIpJykuY2xpY2soKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3N0YXR1cycpKS50b0JlKCcyMDAnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2RhdGEnKSkudG9NYXRjaCgvU3VwZXIgSGVybyEvKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgbWFrZSBKU09OUCByZXF1ZXN0IHRvIGludmFsaWQgVVJMIGFuZCBpbnZva2UgdGhlIGVycm9yIGhhbmRsZXInLAogICAgICAgICAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBlbGVtZW50KCc6YnV0dG9uOmNvbnRhaW5zKCJJbnZhbGlkIEpTT05QIiknKS5jbGljaygpOwogICAgICAgICAgICBlbGVtZW50KCc6YnV0dG9uOmNvbnRhaW5zKCJmZXRjaCIpJykuY2xpY2soKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3N0YXR1cycpKS50b0JlKCcwJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdkYXRhJykpLnRvQmUoJ1JlcXVlc3QgZmFpbGVkJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2ZpbGU+CiAgICAgIDwvZXhhbXBsZT4KICAgICAqLwogICAgZnVuY3Rpb24gJGh0dHAoY29uZmlnKSB7CiAgICAgIGNvbmZpZy5tZXRob2QgPSB1cHBlcmNhc2UoY29uZmlnLm1ldGhvZCk7CgogICAgICB2YXIgcmVxVHJhbnNmb3JtRm4gPSBjb25maWcudHJhbnNmb3JtUmVxdWVzdCB8fCAkY29uZmlnLnRyYW5zZm9ybVJlcXVlc3QsCiAgICAgICAgICByZXNwVHJhbnNmb3JtRm4gPSBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UgfHwgJGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSwKICAgICAgICAgIGRlZkhlYWRlcnMgPSAkY29uZmlnLmhlYWRlcnMsCiAgICAgICAgICByZXFIZWFkZXJzID0gZXh0ZW5kKHsnWC1YU1JGLVRPS0VOJzogJGJyb3dzZXIuY29va2llcygpWydYU1JGLVRPS0VOJ119LAogICAgICAgICAgICAgIGRlZkhlYWRlcnMuY29tbW9uLCBkZWZIZWFkZXJzW2xvd2VyY2FzZShjb25maWcubWV0aG9kKV0sIGNvbmZpZy5oZWFkZXJzKSwKICAgICAgICAgIHJlcURhdGEgPSB0cmFuc2Zvcm1EYXRhKGNvbmZpZy5kYXRhLCBoZWFkZXJzR2V0dGVyKHJlcUhlYWRlcnMpLCByZXFUcmFuc2Zvcm1GbiksCiAgICAgICAgICBwcm9taXNlOwoKICAgICAgLy8gc3RyaXAgY29udGVudC10eXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkCiAgICAgIGlmIChpc1VuZGVmaW5lZChjb25maWcuZGF0YSkpIHsKICAgICAgICBkZWxldGUgcmVxSGVhZGVyc1snQ29udGVudC1UeXBlJ107CiAgICAgIH0KCiAgICAgIC8vIHNlbmQgcmVxdWVzdAogICAgICBwcm9taXNlID0gc2VuZFJlcShjb25maWcsIHJlcURhdGEsIHJlcUhlYWRlcnMpOwoKCiAgICAgIC8vIHRyYW5zZm9ybSBmdXR1cmUgcmVzcG9uc2UKICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbih0cmFuc2Zvcm1SZXNwb25zZSwgdHJhbnNmb3JtUmVzcG9uc2UpOwoKICAgICAgLy8gYXBwbHkgaW50ZXJjZXB0b3JzCiAgICAgIGZvckVhY2gocmVzcG9uc2VJbnRlcmNlcHRvcnMsIGZ1bmN0aW9uKGludGVyY2VwdG9yKSB7CiAgICAgICAgcHJvbWlzZSA9IGludGVyY2VwdG9yKHByb21pc2UpOwogICAgICB9KTsKCiAgICAgIHByb21pc2Uuc3VjY2VzcyA9IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICBmbihyZXNwb25zZS5kYXRhLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLmhlYWRlcnMsIGNvbmZpZyk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHByb21pc2U7CiAgICAgIH07CgogICAgICBwcm9taXNlLmVycm9yID0gZnVuY3Rpb24oZm4pIHsKICAgICAgICBwcm9taXNlLnRoZW4obnVsbCwgZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgIGZuKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UuaGVhZGVycywgY29uZmlnKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcHJvbWlzZTsKICAgICAgfTsKCiAgICAgIHJldHVybiBwcm9taXNlOwoKICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UocmVzcG9uc2UpIHsKICAgICAgICAvLyBtYWtlIGEgY29weSBzaW5jZSB0aGUgcmVzcG9uc2UgbXVzdCBiZSBjYWNoZWFibGUKICAgICAgICB2YXIgcmVzcCA9IGV4dGVuZCh7fSwgcmVzcG9uc2UsIHsKICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybURhdGEocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuaGVhZGVycywgcmVzcFRyYW5zZm9ybUZuKQogICAgICAgIH0pOwogICAgICAgIHJldHVybiAoaXNTdWNjZXNzKHJlc3BvbnNlLnN0YXR1cykpCiAgICAgICAgICA/IHJlc3AKICAgICAgICAgIDogJHEucmVqZWN0KHJlc3ApOwogICAgICB9CiAgICB9CgogICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzID0gW107CgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSBuZy4kaHR0cCNnZXQKICAgICAqIEBtZXRob2RPZiBuZy4kaHR0cAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEdFVGAgcmVxdWVzdAogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRodHRwI2RlbGV0ZQogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgREVMRVRFYCByZXF1ZXN0CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QKICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0CiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3QKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJGh0dHAjaGVhZAogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSEVBRGAgcmVxdWVzdAogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRodHRwI2pzb25wCiAgICAgKiBAbWV0aG9kT2YgbmcuJGh0dHAKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBKU09OUGAgcmVxdWVzdAogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0LgogICAgICogICAgICAgICAgICAgICAgICAgICBTaG91bGQgY29udGFpbiBgSlNPTl9DQUxMQkFDS2Agc3RyaW5nLgogICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QKICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdAogICAgICovCiAgICBjcmVhdGVTaG9ydE1ldGhvZHMoJ2dldCcsICdkZWxldGUnLCAnaGVhZCcsICdqc29ucCcpOwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJGh0dHAjcG9zdAogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUE9TVGAgcmVxdWVzdAogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRodHRwI3B1dAogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUFVUYCByZXF1ZXN0CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QKICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnQKICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0CiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3QKICAgICAqLwogICAgY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEoJ3Bvc3QnLCAncHV0Jyk7CgogICAgICAgIC8qKgogICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAgICAgICAqIEBuYW1lIG5nLiRodHRwI2RlZmF1bHRzCiAgICAgICAgICogQHByb3BlcnR5T2YgbmcuJGh0dHAKICAgICAgICAgKgogICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAqIFJ1bnRpbWUgZXF1aXZhbGVudCBvZiB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHNgIHByb3BlcnR5LiBBbGxvd3MgY29uZmlndXJhdGlvbiBvZgogICAgICAgICAqIGRlZmF1bHQgaGVhZGVycyBhcyB3ZWxsIGFzIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucy4KICAgICAgICAgKgogICAgICAgICAqIFNlZSAiU2V0dGluZyBIVFRQIEhlYWRlcnMiIGFuZCAiVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXMiIHNlY3Rpb25zIGFib3ZlLgogICAgICAgICAqLwogICAgJGh0dHAuZGVmYXVsdHMgPSAkY29uZmlnOwoKCiAgICByZXR1cm4gJGh0dHA7CgoKICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kcyhuYW1lcykgewogICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkgewogICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHsKICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoY29uZmlnIHx8IHt9LCB7CiAgICAgICAgICAgIG1ldGhvZDogbmFtZSwKICAgICAgICAgICAgdXJsOiB1cmwKICAgICAgICAgIH0pKTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCgogICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEobmFtZSkgewogICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkgewogICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHsKICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoY29uZmlnIHx8IHt9LCB7CiAgICAgICAgICAgIG1ldGhvZDogbmFtZSwKICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgIH0pKTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBNYWtlcyB0aGUgcmVxdWVzdAogICAgICoKICAgICAqICEhISBBQ0NFU1NFUyBDTE9TVVJFIFZBUlM6CiAgICAgKiAkaHR0cEJhY2tlbmQsICRjb25maWcsICRsb2csICRyb290U2NvcGUsIGRlZmF1bHRDYWNoZSwgJGh0dHAucGVuZGluZ1JlcXVlc3RzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhLCByZXFIZWFkZXJzKSB7CiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCksCiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSwKICAgICAgICAgIGNhY2hlLAogICAgICAgICAgY2FjaGVkUmVzcCwKICAgICAgICAgIHVybCA9IGJ1aWxkVXJsKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMpOwoKICAgICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnB1c2goY29uZmlnKTsKICAgICAgcHJvbWlzZS50aGVuKHJlbW92ZVBlbmRpbmdSZXEsIHJlbW92ZVBlbmRpbmdSZXEpOwoKCiAgICAgIGlmIChjb25maWcuY2FjaGUgJiYgY29uZmlnLm1ldGhvZCA9PSAnR0VUJykgewogICAgICAgIGNhY2hlID0gaXNPYmplY3QoY29uZmlnLmNhY2hlKSA/IGNvbmZpZy5jYWNoZSA6IGRlZmF1bHRDYWNoZTsKICAgICAgfQoKICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgY2FjaGVkUmVzcCA9IGNhY2hlLmdldCh1cmwpOwogICAgICAgIGlmIChjYWNoZWRSZXNwKSB7CiAgICAgICAgICBpZiAoY2FjaGVkUmVzcC50aGVuKSB7CiAgICAgICAgICAgIC8vIGNhY2hlZCByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCwgYnV0IHRoZXJlIGlzIG5vIHJlc3BvbnNlIHlldAogICAgICAgICAgICBjYWNoZWRSZXNwLnRoZW4ocmVtb3ZlUGVuZGluZ1JlcSwgcmVtb3ZlUGVuZGluZ1JlcSk7CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRSZXNwOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gc2VydmluZyBmcm9tIGNhY2hlCiAgICAgICAgICAgIGlmIChpc0FycmF5KGNhY2hlZFJlc3ApKSB7CiAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UoY2FjaGVkUmVzcFsxXSwgY2FjaGVkUmVzcFswXSwgY29weShjYWNoZWRSZXNwWzJdKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UoY2FjaGVkUmVzcCwgMjAwLCB7fSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gcHV0IHRoZSBwcm9taXNlIGZvciB0aGUgbm9uLXRyYW5zZm9ybWVkIHJlc3BvbnNlIGludG8gY2FjaGUgYXMgYSBwbGFjZWhvbGRlcgogICAgICAgICAgY2FjaGUucHV0KHVybCwgcHJvbWlzZSk7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBpZiB3ZSB3b24ndCBoYXZlIHRoZSByZXNwb25zZSBpbiBjYWNoZSwgc2VuZCB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZAogICAgICBpZiAoIWNhY2hlZFJlc3ApIHsKICAgICAgICAkaHR0cEJhY2tlbmQoY29uZmlnLm1ldGhvZCwgdXJsLCByZXFEYXRhLCBkb25lLCByZXFIZWFkZXJzLCBjb25maWcudGltZW91dCwKICAgICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBwcm9taXNlOwoKCiAgICAgIC8qKgogICAgICAgKiBDYWxsYmFjayByZWdpc3RlcmVkIHRvICRodHRwQmFja2VuZCgpOgogICAgICAgKiAgLSBjYWNoZXMgdGhlIHJlc3BvbnNlIGlmIGRlc2lyZWQKICAgICAgICogIC0gcmVzb2x2ZXMgdGhlIHJhdyAkaHR0cCBwcm9taXNlCiAgICAgICAqICAtIGNhbGxzICRhcHBseQogICAgICAgKi8KICAgICAgZnVuY3Rpb24gZG9uZShzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nKSB7CiAgICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgICBpZiAoaXNTdWNjZXNzKHN0YXR1cykpIHsKICAgICAgICAgICAgY2FjaGUucHV0KHVybCwgW3N0YXR1cywgcmVzcG9uc2UsIHBhcnNlSGVhZGVycyhoZWFkZXJzU3RyaW5nKV0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gcmVtb3ZlIHByb21pc2UgZnJvbSB0aGUgY2FjaGUKICAgICAgICAgICAgY2FjaGUucmVtb3ZlKHVybCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzU3RyaW5nKTsKICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSgpOwogICAgICB9CgoKICAgICAgLyoqCiAgICAgICAqIFJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZS4KICAgICAgICovCiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHsKICAgICAgICAvLyBub3JtYWxpemUgaW50ZXJuYWwgc3RhdHVzZXMgdG8gMAogICAgICAgIHN0YXR1cyA9IE1hdGgubWF4KHN0YXR1cywgMCk7CgogICAgICAgIChpc1N1Y2Nlc3Moc3RhdHVzKSA/IGRlZmVycmVkLnJlc29sdmUgOiBkZWZlcnJlZC5yZWplY3QpKHsKICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLAogICAgICAgICAgc3RhdHVzOiBzdGF0dXMsCiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLAogICAgICAgICAgY29uZmlnOiBjb25maWcKICAgICAgICB9KTsKICAgICAgfQoKCiAgICAgIGZ1bmN0aW9uIHJlbW92ZVBlbmRpbmdSZXEoKSB7CiAgICAgICAgdmFyIGlkeCA9IGluZGV4T2YoJGh0dHAucGVuZGluZ1JlcXVlc3RzLCBjb25maWcpOwogICAgICAgIGlmIChpZHggIT09IC0xKSAkaHR0cC5wZW5kaW5nUmVxdWVzdHMuc3BsaWNlKGlkeCwgMSk7CiAgICAgIH0KICAgIH0KCgogICAgZnVuY3Rpb24gYnVpbGRVcmwodXJsLCBwYXJhbXMpIHsKICAgICAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gdXJsOwogICAgICAgICAgdmFyIHBhcnRzID0gW107CiAgICAgICAgICBmb3JFYWNoU29ydGVkKHBhcmFtcywgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PSB1bmRlZmluZWQpIHJldHVybjsKICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkgewogICAgICAgICAgICAgIHZhbHVlID0gdG9Kc29uKHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiB1cmwgKyAoKHVybC5pbmRleE9mKCc/JykgPT0gLTEpID8gJz8nIDogJyYnKSArIHBhcnRzLmpvaW4oJyYnKTsKICAgICAgICB9CgoKICB9XTsKfQp2YXIgWEhSID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0IHx8IGZ1bmN0aW9uKCkgewogIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTXN4bWwyLlhNTEhUVFAuNi4wIik7IH0gY2F0Y2ggKGUxKSB7fQogIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTXN4bWwyLlhNTEhUVFAuMy4wIik7IH0gY2F0Y2ggKGUyKSB7fQogIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTXN4bWwyLlhNTEhUVFAiKTsgfSBjYXRjaCAoZTMpIHt9CiAgdGhyb3cgbmV3IEVycm9yKCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdC4iKTsKfTsKCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kaHR0cEJhY2tlbmQKICogQHJlcXVpcmVzICRicm93c2VyCiAqIEByZXF1aXJlcyAkd2luZG93CiAqIEByZXF1aXJlcyAkZG9jdW1lbnQKICoKICogQGRlc2NyaXB0aW9uCiAqIEhUVFAgYmFja2VuZCB1c2VkIGJ5IHRoZSB7QGxpbmsgbmcuJGh0dHAgc2VydmljZX0gdGhhdCBkZWxlZ2F0ZXMgdG8KICogWE1MSHR0cFJlcXVlc3Qgb2JqZWN0IG9yIEpTT05QIGFuZCBkZWFscyB3aXRoIGJyb3dzZXIgaW5jb21wYXRpYmlsaXRpZXMuCiAqCiAqIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byB1c2UgdGhpcyBzZXJ2aWNlIGRpcmVjdGx5LCBpbnN0ZWFkIHVzZSB0aGUgaGlnaGVyLWxldmVsIGFic3RyYWN0aW9uczoKICoge0BsaW5rIG5nLiRodHRwICRodHRwfSBvciB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2UgJHJlc291cmNlfS4KICoKICogRHVyaW5nIHRlc3RpbmcgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzd2FwcGVkIHdpdGgge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgbW9jawogKiAkaHR0cEJhY2tlbmR9IHdoaWNoIGNhbiBiZSB0cmFpbmVkIHdpdGggcmVzcG9uc2VzLgogKi8KZnVuY3Rpb24gJEh0dHBCYWNrZW5kUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckd2luZG93JywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRicm93c2VyLCAkd2luZG93LCAkZG9jdW1lbnQpIHsKICAgIHJldHVybiBjcmVhdGVIdHRwQmFja2VuZCgkYnJvd3NlciwgWEhSLCAkYnJvd3Nlci5kZWZlciwgJHdpbmRvdy5hbmd1bGFyLmNhbGxiYWNrcywKICAgICAgICAkZG9jdW1lbnRbMF0sICR3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wucmVwbGFjZSgnOicsICcnKSk7CiAgfV07Cn0KCmZ1bmN0aW9uIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCBYSFIsICRicm93c2VyRGVmZXIsIGNhbGxiYWNrcywgcmF3RG9jdW1lbnQsIGxvY2F0aW9uUHJvdG9jb2wpIHsKICAvLyBUT0RPKHZvanRhKTogZml4IHRoZSBzaWduYXR1cmUKICByZXR1cm4gZnVuY3Rpb24obWV0aG9kLCB1cmwsIHBvc3QsIGNhbGxiYWNrLCBoZWFkZXJzLCB0aW1lb3V0LCB3aXRoQ3JlZGVudGlhbHMpIHsKICAgICRicm93c2VyLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQoKTsKICAgIHVybCA9IHVybCB8fCAkYnJvd3Nlci51cmwoKTsKCiAgICBpZiAobG93ZXJjYXNlKG1ldGhvZCkgPT0gJ2pzb25wJykgewogICAgICB2YXIgY2FsbGJhY2tJZCA9ICdfJyArIChjYWxsYmFja3MuY291bnRlcisrKS50b1N0cmluZygzNik7CiAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSA9IGRhdGE7CiAgICAgIH07CgogICAgICBqc29ucFJlcSh1cmwucmVwbGFjZSgnSlNPTl9DQUxMQkFDSycsICdhbmd1bGFyLmNhbGxiYWNrcy4nICsgY2FsbGJhY2tJZCksCiAgICAgICAgICBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmRhdGEpIHsKICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgMjAwLCBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTIpOwogICAgICAgIH0KICAgICAgICBkZWxldGUgY2FsbGJhY2tzW2NhbGxiYWNrSWRdOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciB4aHIgPSBuZXcgWEhSKCk7CiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTsKICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICAgaWYgKHZhbHVlKSB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTsKICAgICAgfSk7CgogICAgICB2YXIgc3RhdHVzOwoKICAgICAgLy8gSW4gSUU2IGFuZCA3LCB0aGlzIG1pZ2h0IGJlIGNhbGxlZCBzeW5jaHJvbm91c2x5IHdoZW4geGhyLnNlbmQgYmVsb3cgaXMgY2FsbGVkIGFuZCB0aGUKICAgICAgLy8gcmVzcG9uc2UgaXMgaW4gdGhlIGNhY2hlLiB0aGUgcHJvbWlzZSBhcGkgd2lsbCBlbnN1cmUgdGhhdCB0byB0aGUgYXBwIGNvZGUgdGhlIGFwaSBpcwogICAgICAvLyBhbHdheXMgYXN5bmMKICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PSA0KSB7CiAgICAgICAgICBjb21wbGV0ZVJlcXVlc3QoCiAgICAgICAgICAgICAgY2FsbGJhY2ssIHN0YXR1cyB8fCB4aHIuc3RhdHVzLCB4aHIucmVzcG9uc2VUZXh0LCB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHsKICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTsKICAgICAgfQoKICAgICAgeGhyLnNlbmQocG9zdCB8fCAnJyk7CgogICAgICBpZiAodGltZW91dCA+IDApIHsKICAgICAgICAkYnJvd3NlckRlZmVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgc3RhdHVzID0gLTE7CiAgICAgICAgICB4aHIuYWJvcnQoKTsKICAgICAgICB9LCB0aW1lb3V0KTsKICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcpIHsKICAgICAgLy8gVVJMX01BVENIIGlzIGRlZmluZWQgaW4gc3JjL3NlcnZpY2UvbG9jYXRpb24uanMKICAgICAgdmFyIHByb3RvY29sID0gKHVybC5tYXRjaChVUkxfTUFUQ0gpIHx8IFsnJywgbG9jYXRpb25Qcm90b2NvbF0pWzFdOwoKICAgICAgLy8gZml4IHN0YXR1cyBjb2RlIGZvciBmaWxlIHByb3RvY29sIChpdCdzIGFsd2F5cyAwKQogICAgICBzdGF0dXMgPSAocHJvdG9jb2wgPT0gJ2ZpbGUnKSA/IChyZXNwb25zZSA/IDIwMCA6IDQwNCkgOiBzdGF0dXM7CgogICAgICAvLyBub3JtYWxpemUgSUUgYnVnIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwKQogICAgICBzdGF0dXMgPSBzdGF0dXMgPT0gMTIyMyA/IDIwNCA6IHN0YXR1czsKCiAgICAgIGNhbGxiYWNrKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcpOwogICAgICAkYnJvd3Nlci4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApOwogICAgfQogIH07CgogIGZ1bmN0aW9uIGpzb25wUmVxKHVybCwgZG9uZSkgewogICAgLy8gd2UgY2FuJ3QgdXNlIGpRdWVyeS9qcUxpdGUgaGVyZSBiZWNhdXNlIGpRdWVyeSBkb2VzIGNyYXp5IHNoaXQgd2l0aCBzY3JpcHQgZWxlbWVudHMsIGUuZy46CiAgICAvLyAtIGZldGNoZXMgbG9jYWwgc2NyaXB0cyB2aWEgWEhSIGFuZCBldmFscyB0aGVtCiAgICAvLyAtIGFkZHMgYW5kIGltbWVkaWF0ZWx5IHJlbW92ZXMgc2NyaXB0IGVsZW1lbnRzIGZyb20gdGhlIGRvY3VtZW50CiAgICB2YXIgc2NyaXB0ID0gcmF3RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksCiAgICAgICAgZG9uZVdyYXBwZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHJhd0RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0KTsKICAgICAgICAgIGlmIChkb25lKSBkb25lKCk7CiAgICAgICAgfTsKCiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgc2NyaXB0LnNyYyA9IHVybDsKCiAgICBpZiAobXNpZSkgewogICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKC9sb2FkZWR8Y29tcGxldGUvLnRlc3Qoc2NyaXB0LnJlYWR5U3RhdGUpKSBkb25lV3JhcHBlcigpOwogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbmVycm9yID0gZG9uZVdyYXBwZXI7CiAgICB9CgogICAgcmF3RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOwogIH0KfQoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJGxvY2FsZQogKgogKiBAZGVzY3JpcHRpb24KICogJGxvY2FsZSBzZXJ2aWNlIHByb3ZpZGVzIGxvY2FsaXphdGlvbiBydWxlcyBmb3IgdmFyaW91cyBBbmd1bGFyIGNvbXBvbmVudHMuIEFzIG9mIHJpZ2h0IG5vdyB0aGUKICogb25seSBwdWJsaWMgYXBpIGlzOgogKgogKiAqIGBpZGAg4oCTIGB7c3RyaW5nfWAg4oCTIGxvY2FsZSBpZCBmb3JtYXR0ZWQgYXMgYGxhbmd1YWdlSWQtY291bnRyeUlkYCAoZS5nLiBgZW4tdXNgKQogKi8KZnVuY3Rpb24gJExvY2FsZVByb3ZpZGVyKCl7CiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBpZDogJ2VuLXVzJywKCiAgICAgIE5VTUJFUl9GT1JNQVRTOiB7CiAgICAgICAgREVDSU1BTF9TRVA6ICcuJywKICAgICAgICBHUk9VUF9TRVA6ICcsJywKICAgICAgICBQQVRURVJOUzogWwogICAgICAgICAgeyAvLyBEZWNpbWFsIFBhdHRlcm4KICAgICAgICAgICAgbWluSW50OiAxLAogICAgICAgICAgICBtaW5GcmFjOiAwLAogICAgICAgICAgICBtYXhGcmFjOiAzLAogICAgICAgICAgICBwb3NQcmU6ICcnLAogICAgICAgICAgICBwb3NTdWY6ICcnLAogICAgICAgICAgICBuZWdQcmU6ICctJywKICAgICAgICAgICAgbmVnU3VmOiAnJywKICAgICAgICAgICAgZ1NpemU6IDMsCiAgICAgICAgICAgIGxnU2l6ZTogMwogICAgICAgICAgfSx7IC8vQ3VycmVuY3kgUGF0dGVybgogICAgICAgICAgICBtaW5JbnQ6IDEsCiAgICAgICAgICAgIG1pbkZyYWM6IDIsCiAgICAgICAgICAgIG1heEZyYWM6IDIsCiAgICAgICAgICAgIHBvc1ByZTogJ1x1MDBBNCcsCiAgICAgICAgICAgIHBvc1N1ZjogJycsCiAgICAgICAgICAgIG5lZ1ByZTogJyhcdTAwQTQnLAogICAgICAgICAgICBuZWdTdWY6ICcpJywKICAgICAgICAgICAgZ1NpemU6IDMsCiAgICAgICAgICAgIGxnU2l6ZTogMwogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgQ1VSUkVOQ1lfU1lNOiAnJCcKICAgICAgfSwKCiAgICAgIERBVEVUSU1FX0ZPUk1BVFM6IHsKICAgICAgICBNT05USDogJ0phbnVhcnksRmVicnVhcnksTWFyY2gsQXByaWwsTWF5LEp1bmUsSnVseSxBdWd1c3QsU2VwdGVtYmVyLE9jdG9iZXIsTm92ZW1iZXIsRGVjZW1iZXInCiAgICAgICAgICAgICAgICAuc3BsaXQoJywnKSwKICAgICAgICBTSE9SVE1PTlRIOiAgJ0phbixGZWIsTWFyLEFwcixNYXksSnVuLEp1bCxBdWcsU2VwLE9jdCxOb3YsRGVjJy5zcGxpdCgnLCcpLAogICAgICAgIERBWTogJ1N1bmRheSxNb25kYXksVHVlc2RheSxXZWRuZXNkYXksVGh1cnNkYXksRnJpZGF5LFNhdHVyZGF5Jy5zcGxpdCgnLCcpLAogICAgICAgIFNIT1JUREFZOiAnU3VuLE1vbixUdWUsV2VkLFRodSxGcmksU2F0Jy5zcGxpdCgnLCcpLAogICAgICAgIEFNUE1TOiBbJ0FNJywnUE0nXSwKICAgICAgICBtZWRpdW06ICdNTU0gZCwgeSBoOm1tOnNzIGEnLAogICAgICAgIHNob3J0OiAnTS9kL3l5IGg6bW0gYScsCiAgICAgICAgZnVsbERhdGU6ICdFRUVFLCBNTU1NIGQsIHknLAogICAgICAgIGxvbmdEYXRlOiAnTU1NTSBkLCB5JywKICAgICAgICBtZWRpdW1EYXRlOiAnTU1NIGQsIHknLAogICAgICAgIHNob3J0RGF0ZTogJ00vZC95eScsCiAgICAgICAgbWVkaXVtVGltZTogJ2g6bW06c3MgYScsCiAgICAgICAgc2hvcnRUaW1lOiAnaDptbSBhJwogICAgICB9LAoKICAgICAgcGx1cmFsQ2F0OiBmdW5jdGlvbihudW0pIHsKICAgICAgICBpZiAobnVtID09PSAxKSB7CiAgICAgICAgICByZXR1cm4gJ29uZSc7CiAgICAgICAgfQogICAgICAgIHJldHVybiAnb3RoZXInOwogICAgICB9CiAgICB9OwogIH07Cn0KCmZ1bmN0aW9uICRUaW1lb3V0UHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRxJywgJyRleGNlcHRpb25IYW5kbGVyJywKICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHEsICAgJGV4Y2VwdGlvbkhhbmRsZXIpIHsKICAgIHZhciBkZWZlcnJlZHMgPSB7fTsKCgogICAgIC8qKgogICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAqIEBuYW1lIG5nLiR0aW1lb3V0CiAgICAgICogQHJlcXVpcmVzICRicm93c2VyCiAgICAgICoKICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgKiBBbmd1bGFyJ3Mgd3JhcHBlciBmb3IgYHdpbmRvdy5zZXRUaW1lb3V0YC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgd3JhcHBlZCBpbnRvIGEgdHJ5L2NhdGNoCiAgICAgICogYmxvY2sgYW5kIGRlbGVnYXRlcyBhbnkgZXhjZXB0aW9ucyB0bwogICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgKgogICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYSB0aW1lb3V0IGZ1bmN0aW9uIGlzIGEgcHJvbWlzZSB3aGljaCB3aWxsIGJlIHJlc29sdmVkIHdoZW4KICAgICAgKiB0aGUgdGltZW91dCBpcyByZWFjaGVkIGFuZCB0aGUgdGltZW91dCBmdW5jdGlvbiBpcyBleGVjdXRlZC4KICAgICAgKgogICAgICAqIFRvIGNhbmNlbCBhIHRoZSB0aW1lb3V0IHJlcXVlc3QsIGNhbGwgYCR0aW1lb3V0LmNhbmNlbChwcm9taXNlKWAuCiAgICAgICoKICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiR0aW1lb3V0IGAkdGltZW91dC5mbHVzaCgpYH0gdG8KICAgICAgKiBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZSBxdWV1ZSBvZiBkZWZlcnJlZCBmdW5jdGlvbnMuCiAgICAgICoKICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdobydzIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVsYXllZC4KICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBEZWxheSBpbiBtaWxsaXNlY29uZHMuCiAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBmYWxzZSBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlCiAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseX0gYmxvY2suCiAgICAgICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHdoZW4gdGhlIHRpbWVvdXQgaXMgcmVhY2hlZC4gVGhlIHZhbHVlIHRoaXMKICAgICAgKiAgIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoIGlzIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBmbmAgZnVuY3Rpb24uCiAgICAgICovCiAgICBmdW5jdGlvbiB0aW1lb3V0KGZuLCBkZWxheSwgaW52b2tlQXBwbHkpIHsKICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKSwKICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLAogICAgICAgICAgc2tpcEFwcGx5ID0gKGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5KSwKICAgICAgICAgIHRpbWVvdXRJZCwgY2xlYW51cDsKCiAgICAgIHRpbWVvdXRJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZuKCkpOwogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpOwogICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTsKICAgICAgfSwgZGVsYXkpOwoKICAgICAgY2xlYW51cCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07CiAgICAgIH07CgogICAgICBwcm9taXNlLiQkdGltZW91dElkID0gdGltZW91dElkOwogICAgICBkZWZlcnJlZHNbdGltZW91dElkXSA9IGRlZmVycmVkOwogICAgICBwcm9taXNlLnRoZW4oY2xlYW51cCwgY2xlYW51cCk7CgogICAgICByZXR1cm4gcHJvbWlzZTsKICAgIH0KCgogICAgIC8qKgogICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAqIEBuYW1lIG5nLiR0aW1lb3V0I2NhbmNlbAogICAgICAqIEBtZXRob2RPZiBuZy4kdGltZW91dAogICAgICAqCiAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuIEFzIGEgcmVzdWx0IG9mIHRoaXMgdGhlIHByb21pc2Ugd2lsbCBiZQogICAgICAqIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uCiAgICAgICoKICAgICAgKiBAcGFyYW0ge1Byb21pc2U9fSBwcm9taXNlIFByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkdGltZW91dGAgZnVuY3Rpb24uCiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHkKICAgICAgKiAgIGNhbmNlbGVkLgogICAgICAqLwogICAgdGltZW91dC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7CiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7CiAgICAgICAgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdLnJlamVjdCgnY2FuY2VsZWQnKTsKICAgICAgICByZXR1cm4gJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHByb21pc2UuJCR0aW1lb3V0SWQpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CgogICAgcmV0dXJuIHRpbWVvdXQ7CiAgfV07Cn0KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRmaWx0ZXJQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICoKICogRmlsdGVycyBhcmUganVzdCBmdW5jdGlvbnMgd2hpY2ggdHJhbnNmb3JtIGlucHV0IHRvIGFuIG91dHB1dC4gSG93ZXZlciBmaWx0ZXJzIG5lZWQgdG8gYmUgRGVwZW5kZW5jeSBJbmplY3RlZC4gVG8KICogYWNoaWV2ZSB0aGlzIGEgZmlsdGVyIGRlZmluaXRpb24gY29uc2lzdHMgb2YgYSBmYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIGlzIGFubm90YXRlZCB3aXRoIGRlcGVuZGVuY2llcyBhbmQgaXMKICogcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGEgdGhlIGZpbHRlciBmdW5jdGlvbi4KICoKICogPHByZT4KICogICAvLyBGaWx0ZXIgcmVnaXN0cmF0aW9uCiAqICAgZnVuY3Rpb24gTXlNb2R1bGUoJHByb3ZpZGUsICRmaWx0ZXJQcm92aWRlcikgewogKiAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBpbmplY3Rpb24gKG5vdCBhbHdheXMgbmVlZGVkKQogKiAgICAgJHByb3ZpZGUudmFsdWUoJ2dyZWV0JywgZnVuY3Rpb24obmFtZSl7CiAqICAgICAgIHJldHVybiAnSGVsbG8gJyArIG5hbWUgKyAnISc7CiAqICAgICB9KTsKICoKICogICAgIC8vIHJlZ2lzdGVyIGEgZmlsdGVyIGZhY3Rvcnkgd2hpY2ggdXNlcyB0aGUKICogICAgIC8vIGdyZWV0IHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgREkuCiAqICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ2dyZWV0JywgZnVuY3Rpb24oZ3JlZXQpewogKiAgICAgICAvLyByZXR1cm4gdGhlIGZpbHRlciBmdW5jdGlvbiB3aGljaCB1c2VzIHRoZSBncmVldCBzZXJ2aWNlCiAqICAgICAgIC8vIHRvIGdlbmVyYXRlIHNhbHV0YXRpb24KICogICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHsKICogICAgICAgICAvLyBmaWx0ZXJzIG5lZWQgdG8gYmUgZm9yZ2l2aW5nIHNvIGNoZWNrIGlucHV0IHZhbGlkaXR5CiAqICAgICAgICAgcmV0dXJuIHRleHQgJiYgZ3JlZXQodGV4dCkgfHwgdGV4dDsKICogICAgICAgfTsKICogICAgIH0pOwogKiAgIH0KICogPC9wcmU+CiAqCiAqIFRoZSBmaWx0ZXIgZnVuY3Rpb24gaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGluamVjdG9yYCB1bmRlciB0aGUgZmlsdGVyIG5hbWUgc3VmZml4ZSB3aXRoIGBGaWx0ZXJgLgogKiA8cHJlPgogKiAgIGl0KCdzaG91bGQgYmUgdGhlIHNhbWUgaW5zdGFuY2UnLCBpbmplY3QoCiAqICAgICBmdW5jdGlvbigkZmlsdGVyUHJvdmlkZXIpIHsKICogICAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdyZXZlcnNlJywgZnVuY3Rpb24oKXsKICogICAgICAgICByZXR1cm4gLi4uOwogKiAgICAgICB9KTsKICogICAgIH0sCiAqICAgICBmdW5jdGlvbigkZmlsdGVyLCByZXZlcnNlRmlsdGVyKSB7CiAqICAgICAgIGV4cGVjdCgkZmlsdGVyKCdyZXZlcnNlJykpLnRvQmUocmV2ZXJzZUZpbHRlcik7CiAqICAgICB9KTsKICogPC9wcmU+CiAqCiAqCiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGhvdyBhbmd1bGFyIGZpbHRlcnMgd29yaywgYW5kIGhvdyB0byBjcmVhdGUgeW91ciBvd24gZmlsdGVycywgc2VlCiAqIHtAbGluayBndWlkZS9kZXZfZ3VpZGUudGVtcGxhdGVzLmZpbHRlcnMgVW5kZXJzdGFuZGluZyBBbmd1bGFyIEZpbHRlcnN9IGluIHRoZSBhbmd1bGFyIERldmVsb3BlcgogKiBHdWlkZS4KICovCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIG5nLiRmaWx0ZXJQcm92aWRlciNyZWdpc3RlcgogKiBAbWV0aG9kT2YgbmcuJGZpbHRlclByb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKiBSZWdpc3RlciBmaWx0ZXIgZmFjdG9yeSBmdW5jdGlvbi4KICoKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyLgogKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBUaGUgZmlsdGVyIGZhY3RvcnkgZnVuY3Rpb24gd2hpY2ggaXMgaW5qZWN0YWJsZS4KICovCgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBuZy4kZmlsdGVyCiAqIEBmdW5jdGlvbgogKiBAZGVzY3JpcHRpb24KICogRmlsdGVycyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyBkYXRhIGRpc3BsYXllZCB0byB0aGUgdXNlci4KICoKICogVGhlIGdlbmVyYWwgc3ludGF4IGluIHRlbXBsYXRlcyBpcyBhcyBmb2xsb3dzOgogKgogKiAgICAgICAgIHt7IGV4cHJlc3Npb24gfCBbIGZpbHRlcl9uYW1lIF0gfX0KICoKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlCiAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgZmlsdGVyIGZ1bmN0aW9uCiAqLwokRmlsdGVyUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnXTsKZnVuY3Rpb24gJEZpbHRlclByb3ZpZGVyKCRwcm92aWRlKSB7CiAgdmFyIHN1ZmZpeCA9ICdGaWx0ZXInOwoKICBmdW5jdGlvbiByZWdpc3RlcihuYW1lLCBmYWN0b3J5KSB7CiAgICByZXR1cm4gJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgc3VmZml4LCBmYWN0b3J5KTsKICB9CiAgdGhpcy5yZWdpc3RlciA9IHJlZ2lzdGVyOwoKICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3RvcikgewogICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQobmFtZSArIHN1ZmZpeCk7CiAgICB9CiAgfV07CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgcmVnaXN0ZXIoJ2N1cnJlbmN5JywgY3VycmVuY3lGaWx0ZXIpOwogIHJlZ2lzdGVyKCdkYXRlJywgZGF0ZUZpbHRlcik7CiAgcmVnaXN0ZXIoJ2ZpbHRlcicsIGZpbHRlckZpbHRlcik7CiAgcmVnaXN0ZXIoJ2pzb24nLCBqc29uRmlsdGVyKTsKICByZWdpc3RlcignbGltaXRUbycsIGxpbWl0VG9GaWx0ZXIpOwogIHJlZ2lzdGVyKCdsb3dlcmNhc2UnLCBsb3dlcmNhc2VGaWx0ZXIpOwogIHJlZ2lzdGVyKCdudW1iZXInLCBudW1iZXJGaWx0ZXIpOwogIHJlZ2lzdGVyKCdvcmRlckJ5Jywgb3JkZXJCeUZpbHRlcik7CiAgcmVnaXN0ZXIoJ3VwcGVyY2FzZScsIHVwcGVyY2FzZUZpbHRlcik7Cn0KCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjpmaWx0ZXIKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTZWxlY3RzIGEgc3Vic2V0IG9mIGl0ZW1zIGZyb20gYGFycmF5YCBhbmQgcmV0dXJucyBpdCBhcyBhIG5ldyBhcnJheS4KICoKICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGF1Z21lbnQgdGhlIGBBcnJheWAgdHlwZSBpbiBBbmd1bGFyIGV4cHJlc3Npb25zLiBTZWUKICoge0BsaW5rIG5nLiRmaWx0ZXJ9IGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IEFuZ3VsYXIgYXJyYXlzLgogKgogKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc291cmNlIGFycmF5LgogKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R8ZnVuY3Rpb24oKX0gZXhwcmVzc2lvbiBUaGUgcHJlZGljYXRlIHRvIGJlIHVzZWQgZm9yIHNlbGVjdGluZyBpdGVtcyBmcm9tCiAqICAgYGFycmF5YC4KICoKICogICBDYW4gYmUgb25lIG9mOgogKgogKiAgIC0gYHN0cmluZ2A6IFByZWRpY2F0ZSB0aGF0IHJlc3VsdHMgaW4gYSBzdWJzdHJpbmcgbWF0Y2ggdXNpbmcgdGhlIHZhbHVlIG9mIGBleHByZXNzaW9uYAogKiAgICAgc3RyaW5nLiBBbGwgc3RyaW5ncyBvciBvYmplY3RzIHdpdGggc3RyaW5nIHByb3BlcnRpZXMgaW4gYGFycmF5YCB0aGF0IGNvbnRhaW4gdGhpcyBzdHJpbmcKICogICAgIHdpbGwgYmUgcmV0dXJuZWQuIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nIHRoZSBzdHJpbmcgd2l0aCBgIWAuCiAqCiAqICAgLSBgT2JqZWN0YDogQSBwYXR0ZXJuIG9iamVjdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgc3BlY2lmaWMgcHJvcGVydGllcyBvbiBvYmplY3RzIGNvbnRhaW5lZAogKiAgICAgYnkgYGFycmF5YC4gRm9yIGV4YW1wbGUgYHtuYW1lOiJNIiwgcGhvbmU6IjEifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zCiAqICAgICB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYCBjb250YWluaW5nICJNIiBhbmQgcHJvcGVydHkgYHBob25lYCBjb250YWluaW5nICIxIi4gQSBzcGVjaWFsCiAqICAgICBwcm9wZXJ0eSBuYW1lIGAkYCBjYW4gYmUgdXNlZCAoYXMgaW4gYHskOiJ0ZXh0In1gKSB0byBhY2NlcHQgYSBtYXRjaCBhZ2FpbnN0IGFueQogKiAgICAgcHJvcGVydHkgb2YgdGhlIG9iamVjdC4gVGhhdCdzIGVxdWl2YWxlbnQgdG8gdGhlIHNpbXBsZSBzdWJzdHJpbmcgbWF0Y2ggd2l0aCBhIGBzdHJpbmdgCiAqICAgICBhcyBkZXNjcmliZWQgYWJvdmUuCiAqCiAqICAgLSBgZnVuY3Rpb25gOiBBIHByZWRpY2F0ZSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byB3cml0ZSBhcmJpdHJhcnkgZmlsdGVycy4gVGhlIGZ1bmN0aW9uIGlzCiAqICAgICBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgLiBUaGUgZmluYWwgcmVzdWx0IGlzIGFuIGFycmF5IG9mIHRob3NlIGVsZW1lbnRzIHRoYXQKICogICAgIHRoZSBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1ZSBmb3IuCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxkaXYgbmctaW5pdD0iZnJpZW5kcyA9IFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTI3Nid9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzgwMC1CSUctTUFSWSd9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJ30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0FkYW0nLCBwaG9uZTonNTU1LTU2NzgnfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnfV0iPjwvZGl2PgoKICAgICAgIFNlYXJjaDogPGlucHV0IG5nLW1vZGVsPSJzZWFyY2hUZXh0Ij4KICAgICAgIDx0YWJsZSBpZD0ic2VhcmNoVGV4dFJlc3VsdHMiPgogICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PHRyPgogICAgICAgICA8dHIgbmctcmVwZWF0PSJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2hUZXh0Ij4KICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD4KICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+CiAgICAgICAgIDx0cj4KICAgICAgIDwvdGFibGU+CiAgICAgICA8aHI+CiAgICAgICBBbnk6IDxpbnB1dCBuZy1tb2RlbD0ic2VhcmNoLiQiPiA8YnI+CiAgICAgICBOYW1lIG9ubHkgPGlucHV0IG5nLW1vZGVsPSJzZWFyY2gubmFtZSI+PGJyPgogICAgICAgUGhvbmUgb25seSA8aW5wdXQgbmctbW9kZWw9InNlYXJjaC5waG9uZSLDpT48YnI+CiAgICAgICA8dGFibGUgaWQ9InNlYXJjaE9ialJlc3VsdHMiPgogICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PHRyPgogICAgICAgICA8dHIgbmctcmVwZWF0PSJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2giPgogICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPgogICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD4KICAgICAgICAgPHRyPgogICAgICAgPC90YWJsZT4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgc2VhcmNoIGFjcm9zcyBhbGwgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBzdHJpbmcnLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ3NlYXJjaFRleHQnKS5lbnRlcignbScpOwogICAgICAgICBleHBlY3QocmVwZWF0ZXIoJyNzZWFyY2hUZXh0UmVzdWx0cyB0cicsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJ01hcnknLCAnTWlrZScsICdBZGFtJ10pOwoKICAgICAgICAgaW5wdXQoJ3NlYXJjaFRleHQnKS5lbnRlcignNzYnKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCcjc2VhcmNoVGV4dFJlc3VsdHMgdHInLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLgogICAgICAgICAgIHRvRXF1YWwoWydKb2huJywgJ0p1bGllJ10pOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggaW4gc3BlY2lmaWMgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBwcmVkaWNhdGUgb2JqZWN0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGlucHV0KCdzZWFyY2guJCcpLmVudGVyKCdpJyk7CiAgICAgICAgIGV4cGVjdChyZXBlYXRlcignI3NlYXJjaE9ialJlc3VsdHMgdHInLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLgogICAgICAgICAgIHRvRXF1YWwoWydNYXJ5JywgJ01pa2UnLCAnSnVsaWUnXSk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCmZ1bmN0aW9uIGZpbHRlckZpbHRlcigpIHsKICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGV4cHJlc3Npb24pIHsKICAgIGlmICghKGFycmF5IGluc3RhbmNlb2YgQXJyYXkpKSByZXR1cm4gYXJyYXk7CiAgICB2YXIgcHJlZGljYXRlcyA9IFtdOwogICAgcHJlZGljYXRlcy5jaGVjayA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcHJlZGljYXRlcy5sZW5ndGg7IGorKykgewogICAgICAgIGlmKCFwcmVkaWNhdGVzW2pdKHZhbHVlKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH07CiAgICB2YXIgc2VhcmNoID0gZnVuY3Rpb24ob2JqLCB0ZXh0KXsKICAgICAgaWYgKHRleHQuY2hhckF0KDApID09PSAnIScpIHsKICAgICAgICByZXR1cm4gIXNlYXJjaChvYmosIHRleHQuc3Vic3RyKDEpKTsKICAgICAgfQogICAgICBzd2l0Y2ggKHR5cGVvZiBvYmopIHsKICAgICAgICBjYXNlICJib29sZWFuIjoKICAgICAgICBjYXNlICJudW1iZXIiOgogICAgICAgIGNhc2UgInN0cmluZyI6CiAgICAgICAgICByZXR1cm4gKCcnICsgb2JqKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGV4dCkgPiAtMTsKICAgICAgICBjYXNlICJvYmplY3QiOgogICAgICAgICAgZm9yICggdmFyIG9iaktleSBpbiBvYmopIHsKICAgICAgICAgICAgaWYgKG9iaktleS5jaGFyQXQoMCkgIT09ICckJyAmJiBzZWFyY2gob2JqW29iaktleV0sIHRleHQpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBjYXNlICJhcnJheSI6CiAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKHNlYXJjaChvYmpbaV0sIHRleHQpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9OwogICAgc3dpdGNoICh0eXBlb2YgZXhwcmVzc2lvbikgewogICAgICBjYXNlICJib29sZWFuIjoKICAgICAgY2FzZSAibnVtYmVyIjoKICAgICAgY2FzZSAic3RyaW5nIjoKICAgICAgICBleHByZXNzaW9uID0geyQ6ZXhwcmVzc2lvbn07CiAgICAgIGNhc2UgIm9iamVjdCI6CiAgICAgICAgZm9yICh2YXIga2V5IGluIGV4cHJlc3Npb24pIHsKICAgICAgICAgIGlmIChrZXkgPT0gJyQnKSB7CiAgICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB2YXIgdGV4dCA9ICgnJytleHByZXNzaW9uW2tleV0pLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgaWYgKCF0ZXh0KSByZXR1cm47CiAgICAgICAgICAgICAgcHJlZGljYXRlcy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VhcmNoKHZhbHVlLCB0ZXh0KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSkoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB2YXIgcGF0aCA9IGtleTsKICAgICAgICAgICAgICB2YXIgdGV4dCA9ICgnJytleHByZXNzaW9uW2tleV0pLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgaWYgKCF0ZXh0KSByZXR1cm47CiAgICAgICAgICAgICAgcHJlZGljYXRlcy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VhcmNoKGdldHRlcih2YWx1ZSwgcGF0aCksIHRleHQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KSgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgY2FzZSAnZnVuY3Rpb24nOgogICAgICAgIHByZWRpY2F0ZXMucHVzaChleHByZXNzaW9uKTsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4gYXJyYXk7CiAgICB9CiAgICB2YXIgZmlsdGVyZWQgPSBbXTsKICAgIGZvciAoIHZhciBqID0gMDsgaiA8IGFycmF5Lmxlbmd0aDsgaisrKSB7CiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2pdOwogICAgICBpZiAocHJlZGljYXRlcy5jaGVjayh2YWx1ZSkpIHsKICAgICAgICBmaWx0ZXJlZC5wdXNoKHZhbHVlKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGZpbHRlcmVkOwogIH0KfQoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgbmcuZmlsdGVyOmN1cnJlbmN5CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdAogKiBzeW1ib2wgZm9yIGN1cnJlbnQgbG9jYWxlIGlzIHVzZWQuCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLgogKiBAcGFyYW0ge3N0cmluZz19IHN5bWJvbCBDdXJyZW5jeSBzeW1ib2wgb3IgaWRlbnRpZmllciB0byBiZSBkaXNwbGF5ZWQuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBudW1iZXIuCiAqCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLmFtb3VudCA9IDEyMzQuNTY7CiAgICAgICAgIH0KICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgbmctbW9kZWw9ImFtb3VudCI+IDxicj4KICAgICAgICAgZGVmYXVsdCBjdXJyZW5jeSBzeW1ib2wgKCQpOiB7e2Ftb3VudCB8IGN1cnJlbmN5fX08YnI+CiAgICAgICAgIGN1c3RvbSBjdXJyZW5jeSBpZGVudGlmaWVyIChVU0QkKToge3thbW91bnQgfCBjdXJyZW5jeToiVVNEJCJ9fQogICAgICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGluaXQgd2l0aCAxMjM0LjU2JywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdhbW91bnQgfCBjdXJyZW5jeScpKS50b0JlKCckMSwyMzQuNTYnKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2Ftb3VudCB8IGN1cnJlbmN5OiJVU0QkIicpKS50b0JlKCdVU0QkMSwyMzQuNTYnKTsKICAgICAgIH0pOwogICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ2Ftb3VudCcpLmVudGVyKCctMTIzNCcpOwogICAgICAgICBleHBlY3QoYmluZGluZygnYW1vdW50IHwgY3VycmVuY3knKSkudG9CZSgnKCQxLDIzNC4wMCknKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2Ftb3VudCB8IGN1cnJlbmN5OiJVU0QkIicpKS50b0JlKCcoVVNEJDEsMjM0LjAwKScpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwpjdXJyZW5jeUZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107CmZ1bmN0aW9uIGN1cnJlbmN5RmlsdGVyKCRsb2NhbGUpIHsKICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7CiAgcmV0dXJuIGZ1bmN0aW9uKGFtb3VudCwgY3VycmVuY3lTeW1ib2wpewogICAgaWYgKGlzVW5kZWZpbmVkKGN1cnJlbmN5U3ltYm9sKSkgY3VycmVuY3lTeW1ib2wgPSBmb3JtYXRzLkNVUlJFTkNZX1NZTTsKICAgIHJldHVybiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgMikuCiAgICAgICAgICAgICAgICByZXBsYWNlKC9cdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpOwogIH07Cn0KCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjpudW1iZXIKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBGb3JtYXRzIGEgbnVtYmVyIGFzIHRleHQuCiAqCiAqIElmIHRoZSBpbnB1dCBpcyBub3QgYSBudW1iZXIgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLgogKgogKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciBOdW1iZXIgdG8gZm9ybWF0LgogKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IFtmcmFjdGlvblNpemU9Ml0gTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBudW1iZXIgdG8uCiAqIEByZXR1cm5zIHtzdHJpbmd9IE51bWJlciByb3VuZGVkIHRvIGRlY2ltYWxQbGFjZXMgYW5kIHBsYWNlcyBhIOKAnCzigJ0gYWZ0ZXIgZWFjaCB0aGlyZCBkaWdpdC4KICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUudmFsID0gMTIzNC41Njc4OTsKICAgICAgICAgfQogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICBFbnRlciBudW1iZXI6IDxpbnB1dCBuZy1tb2RlbD0ndmFsJz48YnI+CiAgICAgICAgIERlZmF1bHQgZm9ybWF0dGluZzoge3t2YWwgfCBudW1iZXJ9fTxicj4KICAgICAgICAgTm8gZnJhY3Rpb25zOiB7e3ZhbCB8IG51bWJlcjowfX08YnI+CiAgICAgICAgIE5lZ2F0aXZlIG51bWJlcjoge3stdmFsIHwgbnVtYmVyOjR9fQogICAgICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBudW1iZXJzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWwgfCBudW1iZXInKSkudG9CZSgnMSwyMzQuNTY4Jyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS50b0JlKCcxLDIzNScpOwogICAgICAgICBleHBlY3QoYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLnRvQmUoJy0xLDIzNC41Njc5Jyk7CiAgICAgICB9KTsKCiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZScsIGZ1bmN0aW9uKCkgewogICAgICAgICBpbnB1dCgndmFsJykuZW50ZXIoJzMzNzQuMzMzJyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWwgfCBudW1iZXInKSkudG9CZSgnMywzNzQuMzMzJyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS50b0JlKCczLDM3NCcpOwogICAgICAgICBleHBlY3QoYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLnRvQmUoJy0zLDM3NC4zMzMwJyk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCgoKbnVtYmVyRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTsKZnVuY3Rpb24gbnVtYmVyRmlsdGVyKCRsb2NhbGUpIHsKICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7CiAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgZnJhY3Rpb25TaXplKSB7CiAgICByZXR1cm4gZm9ybWF0TnVtYmVyKG51bWJlciwgZm9ybWF0cy5QQVRURVJOU1swXSwgZm9ybWF0cy5HUk9VUF9TRVAsIGZvcm1hdHMuREVDSU1BTF9TRVAsCiAgICAgIGZyYWN0aW9uU2l6ZSk7CiAgfTsKfQoKdmFyIERFQ0lNQUxfU0VQID0gJy4nOwpmdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtYmVyLCBwYXR0ZXJuLCBncm91cFNlcCwgZGVjaW1hbFNlcCwgZnJhY3Rpb25TaXplKSB7CiAgaWYgKGlzTmFOKG51bWJlcikgfHwgIWlzRmluaXRlKG51bWJlcikpIHJldHVybiAnJzsKCiAgdmFyIGlzTmVnYXRpdmUgPSBudW1iZXIgPCAwOwogIG51bWJlciA9IE1hdGguYWJzKG51bWJlcik7CiAgdmFyIG51bVN0ciA9IG51bWJlciArICcnLAogICAgICBmb3JtYXRlZFRleHQgPSAnJywKICAgICAgcGFydHMgPSBbXTsKCiAgdmFyIGhhc0V4cG9uZW50ID0gZmFsc2U7CiAgaWYgKG51bVN0ci5pbmRleE9mKCdlJykgIT09IC0xKSB7CiAgICB2YXIgbWF0Y2ggPSBudW1TdHIubWF0Y2goLyhbXGRcLl0rKWUoLT8pKFxkKykvKTsKICAgIGlmIChtYXRjaCAmJiBtYXRjaFsyXSA9PSAnLScgJiYgbWF0Y2hbM10gPiBmcmFjdGlvblNpemUgKyAxKSB7CiAgICAgIG51bVN0ciA9ICcwJzsKICAgIH0gZWxzZSB7CiAgICAgIGZvcm1hdGVkVGV4dCA9IG51bVN0cjsKICAgICAgaGFzRXhwb25lbnQgPSB0cnVlOwogICAgfQogIH0KCiAgaWYgKCFoYXNFeHBvbmVudCkgewogICAgdmFyIGZyYWN0aW9uTGVuID0gKG51bVN0ci5zcGxpdChERUNJTUFMX1NFUClbMV0gfHwgJycpLmxlbmd0aDsKCiAgICAvLyBkZXRlcm1pbmUgZnJhY3Rpb25TaXplIGlmIGl0IGlzIG5vdCBzcGVjaWZpZWQKICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7CiAgICAgIGZyYWN0aW9uU2l6ZSA9IE1hdGgubWluKE1hdGgubWF4KHBhdHRlcm4ubWluRnJhYywgZnJhY3Rpb25MZW4pLCBwYXR0ZXJuLm1heEZyYWMpOwogICAgfQoKICAgIHZhciBwb3cgPSBNYXRoLnBvdygxMCwgZnJhY3Rpb25TaXplKTsKICAgIG51bWJlciA9IE1hdGgucm91bmQobnVtYmVyICogcG93KSAvIHBvdzsKICAgIHZhciBmcmFjdGlvbiA9ICgnJyArIG51bWJlcikuc3BsaXQoREVDSU1BTF9TRVApOwogICAgdmFyIHdob2xlID0gZnJhY3Rpb25bMF07CiAgICBmcmFjdGlvbiA9IGZyYWN0aW9uWzFdIHx8ICcnOwoKICAgIHZhciBwb3MgPSAwLAogICAgICAgIGxncm91cCA9IHBhdHRlcm4ubGdTaXplLAogICAgICAgIGdyb3VwID0gcGF0dGVybi5nU2l6ZTsKCiAgICBpZiAod2hvbGUubGVuZ3RoID49IChsZ3JvdXAgKyBncm91cCkpIHsKICAgICAgcG9zID0gd2hvbGUubGVuZ3RoIC0gbGdyb3VwOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvczsgaSsrKSB7CiAgICAgICAgaWYgKChwb3MgLSBpKSVncm91cCA9PT0gMCAmJiBpICE9PSAwKSB7CiAgICAgICAgICBmb3JtYXRlZFRleHQgKz0gZ3JvdXBTZXA7CiAgICAgICAgfQogICAgICAgIGZvcm1hdGVkVGV4dCArPSB3aG9sZS5jaGFyQXQoaSk7CiAgICAgIH0KICAgIH0KCiAgICBmb3IgKGkgPSBwb3M7IGkgPCB3aG9sZS5sZW5ndGg7IGkrKykgewogICAgICBpZiAoKHdob2xlLmxlbmd0aCAtIGkpJWxncm91cCA9PT0gMCAmJiBpICE9PSAwKSB7CiAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IGdyb3VwU2VwOwogICAgICB9CiAgICAgIGZvcm1hdGVkVGV4dCArPSB3aG9sZS5jaGFyQXQoaSk7CiAgICB9CgogICAgLy8gZm9ybWF0IGZyYWN0aW9uIHBhcnQuCiAgICB3aGlsZShmcmFjdGlvbi5sZW5ndGggPCBmcmFjdGlvblNpemUpIHsKICAgICAgZnJhY3Rpb24gKz0gJzAnOwogICAgfQoKICAgIGlmIChmcmFjdGlvblNpemUpIGZvcm1hdGVkVGV4dCArPSBkZWNpbWFsU2VwICsgZnJhY3Rpb24uc3Vic3RyKDAsIGZyYWN0aW9uU2l6ZSk7CiAgfQoKICBwYXJ0cy5wdXNoKGlzTmVnYXRpdmUgPyBwYXR0ZXJuLm5lZ1ByZSA6IHBhdHRlcm4ucG9zUHJlKTsKICBwYXJ0cy5wdXNoKGZvcm1hdGVkVGV4dCk7CiAgcGFydHMucHVzaChpc05lZ2F0aXZlID8gcGF0dGVybi5uZWdTdWYgOiBwYXR0ZXJuLnBvc1N1Zik7CiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpOwp9CgpmdW5jdGlvbiBwYWROdW1iZXIobnVtLCBkaWdpdHMsIHRyaW0pIHsKICB2YXIgbmVnID0gJyc7CiAgaWYgKG51bSA8IDApIHsKICAgIG5lZyA9ICAnLSc7CiAgICBudW0gPSAtbnVtOwogIH0KICBudW0gPSAnJyArIG51bTsKICB3aGlsZShudW0ubGVuZ3RoIDwgZGlnaXRzKSBudW0gPSAnMCcgKyBudW07CiAgaWYgKHRyaW0pCiAgICBudW0gPSBudW0uc3Vic3RyKG51bS5sZW5ndGggLSBkaWdpdHMpOwogIHJldHVybiBuZWcgKyBudW07Cn0KCgpmdW5jdGlvbiBkYXRlR2V0dGVyKG5hbWUsIHNpemUsIG9mZnNldCwgdHJpbSkgewogIHJldHVybiBmdW5jdGlvbihkYXRlKSB7CiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTsKICAgIGlmIChvZmZzZXQgPiAwIHx8IHZhbHVlID4gLW9mZnNldCkKICAgICAgdmFsdWUgKz0gb2Zmc2V0OwogICAgaWYgKHZhbHVlID09PSAwICYmIG9mZnNldCA9PSAtMTIgKSB2YWx1ZSA9IDEyOwogICAgcmV0dXJuIHBhZE51bWJlcih2YWx1ZSwgc2l6ZSwgdHJpbSk7CiAgfTsKfQoKZnVuY3Rpb24gZGF0ZVN0ckdldHRlcihuYW1lLCBzaG9ydEZvcm0pIHsKICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0cykgewogICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7CiAgICB2YXIgZ2V0ID0gdXBwZXJjYXNlKHNob3J0Rm9ybSA/ICgnU0hPUlQnICsgbmFtZSkgOiBuYW1lKTsKCiAgICByZXR1cm4gZm9ybWF0c1tnZXRdW3ZhbHVlXTsKICB9Owp9CgpmdW5jdGlvbiB0aW1lWm9uZUdldHRlcihkYXRlKSB7CiAgdmFyIG9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTsKICByZXR1cm4gcGFkTnVtYmVyKG9mZnNldCAvIDYwLCAyKSArIHBhZE51bWJlcihNYXRoLmFicyhvZmZzZXQgJSA2MCksIDIpOwp9CgpmdW5jdGlvbiBhbXBtR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHsKICByZXR1cm4gZGF0ZS5nZXRIb3VycygpIDwgMTIgPyBmb3JtYXRzLkFNUE1TWzBdIDogZm9ybWF0cy5BTVBNU1sxXTsKfQoKdmFyIERBVEVfRk9STUFUUyA9IHsKICB5eXl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDQpLAogICAgeXk6IGRhdGVHZXR0ZXIoJ0Z1bGxZZWFyJywgMiwgMCwgdHJ1ZSksCiAgICAgeTogZGF0ZUdldHRlcignRnVsbFllYXInLCAxKSwKICBNTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcpLAogICBNTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJywgdHJ1ZSksCiAgICBNTTogZGF0ZUdldHRlcignTW9udGgnLCAyLCAxKSwKICAgICBNOiBkYXRlR2V0dGVyKCdNb250aCcsIDEsIDEpLAogICAgZGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAyKSwKICAgICBkOiBkYXRlR2V0dGVyKCdEYXRlJywgMSksCiAgICBISDogZGF0ZUdldHRlcignSG91cnMnLCAyKSwKICAgICBIOiBkYXRlR2V0dGVyKCdIb3VycycsIDEpLAogICAgaGg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiwgLTEyKSwKICAgICBoOiBkYXRlR2V0dGVyKCdIb3VycycsIDEsIC0xMiksCiAgICBtbTogZGF0ZUdldHRlcignTWludXRlcycsIDIpLAogICAgIG06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAxKSwKICAgIHNzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMiksCiAgICAgczogZGF0ZUdldHRlcignU2Vjb25kcycsIDEpLAogIEVFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScpLAogICBFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScsIHRydWUpLAogICAgIGE6IGFtcG1HZXR0ZXIsCiAgICAgWjogdGltZVpvbmVHZXR0ZXIKfTsKCnZhciBEQVRFX0ZPUk1BVFNfU1BMSVQgPSAvKCg/OlteeU1kSGhtc2FaRSddKyl8KD86Jyg/OlteJ118JycpKicpfCg/OkUrfHkrfE0rfGQrfEgrfGgrfG0rfHMrfGF8WikpKC4qKS8sCiAgICBOVU1CRVJfU1RSSU5HID0gL15cZCskLzsKCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjpkYXRlCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogICBGb3JtYXRzIGBkYXRlYCB0byBhIHN0cmluZyBiYXNlZCBvbiB0aGUgcmVxdWVzdGVkIGBmb3JtYXRgLgogKgogKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50czoKICoKICogICAqIGAneXl5eSdgOiA0IGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIgKGUuZy4gQUQgMSA9PiAwMDAxLCBBRCAyMDEwID0+IDIwMTApCiAqICAgKiBgJ3l5J2A6IDIgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgcGFkZGVkICgwMC05OSkuIChlLmcuIEFEIDIwMDEgPT4gMDEsIEFEIDIwMTAgPT4gMTApCiAqICAgKiBgJ3knYDogMSBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyLCBlLmcuIChBRCAxID0+IDEsIEFEIDE5OSA9PiAxOTkpCiAqICAgKiBgJ01NTU0nYDogTW9udGggaW4geWVhciAoSmFudWFyeS1EZWNlbWJlcikKICogICAqIGAnTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbi1EZWMpCiAqICAgKiBgJ01NJ2A6IE1vbnRoIGluIHllYXIsIHBhZGRlZCAoMDEtMTIpCiAqICAgKiBgJ00nYDogTW9udGggaW4geWVhciAoMS0xMikKICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKQogKiAgICogYCdkJ2A6IERheSBpbiBtb250aCAoMS0zMSkKICogICAqIGAnRUVFRSdgOiBEYXkgaW4gV2VlaywoU3VuZGF5LVNhdHVyZGF5KQogKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KQogKiAgICogYCdISCdgOiBIb3VyIGluIGRheSwgcGFkZGVkICgwMC0yMykKICogICAqIGAnSCdgOiBIb3VyIGluIGRheSAoMC0yMykKICogICAqIGAnaGgnYDogSG91ciBpbiBhbS9wbSwgcGFkZGVkICgwMS0xMikKICogICAqIGAnaCdgOiBIb3VyIGluIGFtL3BtLCAoMS0xMikKICogICAqIGAnbW0nYDogTWludXRlIGluIGhvdXIsIHBhZGRlZCAoMDAtNTkpCiAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpCiAqICAgKiBgJ3NzJ2A6IFNlY29uZCBpbiBtaW51dGUsIHBhZGRlZCAoMDAtNTkpCiAqICAgKiBgJ3MnYDogU2Vjb25kIGluIG1pbnV0ZSAoMC01OSkKICogICAqIGAnYSdgOiBhbS9wbSBtYXJrZXIKICogICAqIGAnWidgOiA0IGRpZ2l0ICgrc2lnbikgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRpbWV6b25lIG9mZnNldCAoLTEyMDAtMTIwMCkKICoKICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGFsc28gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgcHJlZGVmaW5lZAogKiAgIHtAbGluayBndWlkZS9pMThuIGxvY2FsaXphYmxlIGZvcm1hdHN9OgogKgogKiAgICogYCdtZWRpdW0nYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5IGg6bW06c3MgYSdgIGZvciBlbl9VUyBsb2NhbGUKICogICAgIChlLmcuIFNlcCAzLCAyMDEwIDEyOjA1OjA4IHBtKQogKiAgICogYCdzaG9ydCdgOiBlcXVpdmFsZW50IHRvIGAnTS9kL3l5IGg6bW0gYSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIDkvMy8xMCAxMjowNSBwbSkKICogICAqIGAnZnVsbERhdGUnYDogZXF1aXZhbGVudCB0byBgJ0VFRUUsIE1NTU0gZCx5J2AgZm9yIGVuX1VTICBsb2NhbGUKICogICAgIChlLmcuIEZyaWRheSwgU2VwdGVtYmVyIDMsIDIwMTApCiAqICAgKiBgJ2xvbmdEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiBTZXB0ZW1iZXIgMywgMjAxMAogKiAgICogYCdtZWRpdW1EYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcCAzLCAyMDEwKQogKiAgICogYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gOS8zLzEwKQogKiAgICogYCdtZWRpdW1UaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1OjA4IHBtKQogKiAgICogYCdzaG9ydFRpbWUnYDogZXF1aXZhbGVudCB0byBgJ2g6bW0gYSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gMTI6MDUgcG0pCiAqCiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBjb250YWluIGxpdGVyYWwgdmFsdWVzLiBUaGVzZSBuZWVkIHRvIGJlIHF1b3RlZCB3aXRoIHNpbmdsZSBxdW90ZXMgKGUuZy4KICogICBgImggJ2luIHRoZSBtb3JuaW5nJyJgKS4gSW4gb3JkZXIgdG8gb3V0cHV0IHNpbmdsZSBxdW90ZSwgdXNlIHR3byBzaW5nbGUgcXVvdGVzIGluIGEgc2VxdWVuY2UKICogICAoZS5nLiBgImggbycnY2xvY2siYCkuCiAqCiAqIEBwYXJhbSB7KERhdGV8bnVtYmVyfHN0cmluZyl9IGRhdGUgRGF0ZSB0byBmb3JtYXQgZWl0aGVyIGFzIERhdGUgb2JqZWN0LCBtaWxsaXNlY29uZHMgKHN0cmluZyBvcgogKiAgICBudW1iZXIpIG9yIHZhcmlvdXMgSVNPIDg2MDEgZGF0ZXRpbWUgc3RyaW5nIGZvcm1hdHMgKGUuZy4geXl5eS1NTS1kZFRISDptbTpzcy5TU1NaIGFuZCBpdCdzCiAqICAgIHNob3J0ZXIgdmVyc2lvbnMgbGlrZSB5eXl5LU1NLWRkVEhIOm1tWiwgeXl5eS1NTS1kZCBvciB5eXl5TU1kZFRISG1tc3NaKS4KICogQHBhcmFtIHtzdHJpbmc9fSBmb3JtYXQgRm9ybWF0dGluZyBydWxlcyAoc2VlIERlc2NyaXB0aW9uKS4gSWYgbm90IHNwZWNpZmllZCwKICogICAgYG1lZGl1bURhdGVgIGlzIHVzZWQuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmcgb3IgdGhlIGlucHV0IGlmIGlucHV0IGlzIG5vdCByZWNvZ25pemVkIGFzIGRhdGUvbWlsbGlzLgogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjoKICAgICAgICAgICB7ezEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nfX08YnI+CiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjoKICAgICAgICAgIHt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTxicj4KICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+OgogICAgICAgICAge3snMTI4ODMyMzYyMzAwNicgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08YnI+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBkYXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCIxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJyIpKS4KICAgICAgICAgICAgdG9NYXRjaCgvT2N0IDJcZCwgMjAxMCBcZHsxLDJ9OlxkezJ9OlxkezJ9IChBTXxQTSkvKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoIjEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonIikpLgogICAgICAgICAgICB0b01hdGNoKC8yMDEwXC0xMFwtMlxkIFxkezJ9OlxkezJ9OlxkezJ9IFwtP1xkezR9Lyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCInMTI4ODMyMzYyMzAwNicgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnIikpLgogICAgICAgICAgICB0b01hdGNoKC8xMFwvMlxkXC8yMDEwIEAgXGR7MSwyfTpcZHsyfShBTXxQTSkvKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KZGF0ZUZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107CmZ1bmN0aW9uIGRhdGVGaWx0ZXIoJGxvY2FsZSkgewoKCiAgdmFyIFJfSVNPODYwMV9TVFIgPSAvXihcZHs0fSktPyhcZFxkKS0/KFxkXGQpKD86VChcZFxkKSg/Ojo/KFxkXGQpKD86Oj8oXGRcZCkoPzpcLihcZCspKT8pPyk/KFp8KFsrLV0pKFxkXGQpOj8oXGRcZCkpPyk/JC87CiAgZnVuY3Rpb24ganNvblN0cmluZ1RvRGF0ZShzdHJpbmcpewogICAgdmFyIG1hdGNoOwogICAgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKFJfSVNPODYwMV9TVFIpKSB7CiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoMCksCiAgICAgICAgICB0ekhvdXIgPSAwLAogICAgICAgICAgdHpNaW4gID0gMDsKICAgICAgaWYgKG1hdGNoWzldKSB7CiAgICAgICAgdHpIb3VyID0gaW50KG1hdGNoWzldICsgbWF0Y2hbMTBdKTsKICAgICAgICB0ek1pbiA9IGludChtYXRjaFs5XSArIG1hdGNoWzExXSk7CiAgICAgIH0KICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcihpbnQobWF0Y2hbMV0pLCBpbnQobWF0Y2hbMl0pIC0gMSwgaW50KG1hdGNoWzNdKSk7CiAgICAgIGRhdGUuc2V0VVRDSG91cnMoaW50KG1hdGNoWzRdfHwwKSAtIHR6SG91ciwgaW50KG1hdGNoWzVdfHwwKSAtIHR6TWluLCBpbnQobWF0Y2hbNl18fDApLCBpbnQobWF0Y2hbN118fDApKTsKICAgICAgcmV0dXJuIGRhdGU7CiAgICB9CiAgICByZXR1cm4gc3RyaW5nOwogIH0KCgogIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXQpIHsKICAgIHZhciB0ZXh0ID0gJycsCiAgICAgICAgcGFydHMgPSBbXSwKICAgICAgICBmbiwgbWF0Y2g7CgogICAgZm9ybWF0ID0gZm9ybWF0IHx8ICdtZWRpdW1EYXRlJzsKICAgIGZvcm1hdCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUU1tmb3JtYXRdIHx8IGZvcm1hdDsKICAgIGlmIChpc1N0cmluZyhkYXRlKSkgewogICAgICBpZiAoTlVNQkVSX1NUUklORy50ZXN0KGRhdGUpKSB7CiAgICAgICAgZGF0ZSA9IGludChkYXRlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkYXRlID0ganNvblN0cmluZ1RvRGF0ZShkYXRlKTsKICAgICAgfQogICAgfQoKICAgIGlmIChpc051bWJlcihkYXRlKSkgewogICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7CiAgICB9CgogICAgaWYgKCFpc0RhdGUoZGF0ZSkpIHsKICAgICAgcmV0dXJuIGRhdGU7CiAgICB9CgogICAgd2hpbGUoZm9ybWF0KSB7CiAgICAgIG1hdGNoID0gREFURV9GT1JNQVRTX1NQTElULmV4ZWMoZm9ybWF0KTsKICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgcGFydHMgPSBjb25jYXQocGFydHMsIG1hdGNoLCAxKTsKICAgICAgICBmb3JtYXQgPSBwYXJ0cy5wb3AoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwYXJ0cy5wdXNoKGZvcm1hdCk7CiAgICAgICAgZm9ybWF0ID0gbnVsbDsKICAgICAgfQogICAgfQoKICAgIGZvckVhY2gocGFydHMsIGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgZm4gPSBEQVRFX0ZPUk1BVFNbdmFsdWVdOwogICAgICB0ZXh0ICs9IGZuID8gZm4oZGF0ZSwgJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTKQogICAgICAgICAgICAgICAgIDogdmFsdWUucmVwbGFjZSgvKF4nfCckKS9nLCAnJykucmVwbGFjZSgvJycvZywgIiciKTsKICAgIH0pOwoKICAgIHJldHVybiB0ZXh0OwogIH07Cn0KCgovKioKICogQG5nZG9jIGZpbHRlcgogKiBAbmFtZSBuZy5maWx0ZXI6anNvbgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqICAgQWxsb3dzIHlvdSB0byBjb252ZXJ0IGEgSmF2YVNjcmlwdCBvYmplY3QgaW50byBKU09OIHN0cmluZy4KICoKICogICBUaGlzIGZpbHRlciBpcyBtb3N0bHkgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuIFdoZW4gdXNpbmcgdGhlIGRvdWJsZSBjdXJseSB7e3ZhbHVlfX0gbm90YXRpb24KICogICB0aGUgYmluZGluZyBpcyBhdXRvbWF0aWNhbGx5IGNvbnZlcnRlZCB0byBKU09OLgogKgogKiBAcGFyYW0geyp9IG9iamVjdCBBbnkgSmF2YVNjcmlwdCBvYmplY3QgKGluY2x1ZGluZyBhcnJheXMgYW5kIHByaW1pdGl2ZSB0eXBlcykgdG8gZmlsdGVyLgogKiBAcmV0dXJucyB7c3RyaW5nfSBKU09OIHN0cmluZy4KICoKICoKICogQGV4YW1wbGU6CiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxwcmU+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb24gfX08L3ByZT4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQganNvbmlmeSBmaWx0ZXJlZCBvYmplY3RzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCJ7J25hbWUnOid2YWx1ZSd9IikpLnRvTWF0Y2goL1x7XG4gICJuYW1lIjogPyJ2YWx1ZSJcbn0vKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKgogKi8KZnVuY3Rpb24ganNvbkZpbHRlcigpIHsKICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7CiAgICByZXR1cm4gdG9Kc29uKG9iamVjdCwgdHJ1ZSk7CiAgfTsKfQoKCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjpsb3dlcmNhc2UKICogQGZ1bmN0aW9uCiAqIEBkZXNjcmlwdGlvbgogKiBDb252ZXJ0cyBzdHJpbmcgdG8gbG93ZXJjYXNlLgogKiBAc2VlIGFuZ3VsYXIubG93ZXJjYXNlCiAqLwp2YXIgbG93ZXJjYXNlRmlsdGVyID0gdmFsdWVGbihsb3dlcmNhc2UpOwoKCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjp1cHBlcmNhc2UKICogQGZ1bmN0aW9uCiAqIEBkZXNjcmlwdGlvbgogKiBDb252ZXJ0cyBzdHJpbmcgdG8gdXBwZXJjYXNlLgogKiBAc2VlIGFuZ3VsYXIudXBwZXJjYXNlCiAqLwp2YXIgdXBwZXJjYXNlRmlsdGVyID0gdmFsdWVGbih1cHBlcmNhc2UpOwoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBuZy5maWx0ZXI6bGltaXRUbwogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29udGFpbmluZyBvbmx5IGEgc3BlY2lmaWVkIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBhcnJheS4gVGhlIGVsZW1lbnRzCiAqIGFyZSB0YWtlbiBmcm9tIGVpdGhlciB0aGUgYmVnaW5uaW5nIG9yIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheSwgYXMgc3BlY2lmaWVkIGJ5IHRoZQogKiB2YWx1ZSBhbmQgc2lnbiAocG9zaXRpdmUgb3IgbmVnYXRpdmUpIG9mIGBsaW1pdGAuCiAqCiAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhdWdtZW50IHRoZSBgQXJyYXlgIHR5cGUgaW4gQW5ndWxhciBleHByZXNzaW9ucy4gU2VlCiAqIHtAbGluayBuZy4kZmlsdGVyfSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBBbmd1bGFyIGFycmF5cy4KICoKICogQHBhcmFtIHtBcnJheX0gYXJyYXkgU291cmNlIGFycmF5IHRvIGJlIGxpbWl0ZWQuCiAqIEBwYXJhbSB7c3RyaW5nfE51bWJlcn0gbGltaXQgVGhlIGxlbmd0aCBvZiB0aGUgcmV0dXJuZWQgYXJyYXkuIElmIHRoZSBgbGltaXRgIG51bWJlciBpcwogKiAgICAgcG9zaXRpdmUsIGBsaW1pdGAgbnVtYmVyIG9mIGl0ZW1zIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc291cmNlIGFycmF5IGFyZSBjb3BpZWQuCiAqICAgICBJZiB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLCBgbGltaXRgIG51bWJlciAgb2YgaXRlbXMgZnJvbSB0aGUgZW5kIG9mIHRoZSBzb3VyY2UgYXJyYXkgYXJlCiAqICAgICBjb3BpZWQuIFRoZSBgbGltaXRgIHdpbGwgYmUgdHJpbW1lZCBpZiBpdCBleGNlZWRzIGBhcnJheS5sZW5ndGhgCiAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgc3ViLWFycmF5IG9mIGxlbmd0aCBgbGltaXRgIG9yIGxlc3MgaWYgaW5wdXQgYXJyYXkgaGFkIGxlc3MgdGhhbiBgbGltaXRgCiAqICAgICBlbGVtZW50cy4KICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUubnVtYmVycyA9IFsxLDIsMyw0LDUsNiw3LDgsOV07CiAgICAgICAgICAgJHNjb3BlLmxpbWl0ID0gMzsKICAgICAgICAgfQogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICBMaW1pdCB7e251bWJlcnN9fSB0bzogPGlucHV0IHR5cGU9ImludGVnZXIiIG5nLW1vZGVsPSJsaW1pdCI+CiAgICAgICAgIDxwPk91dHB1dDoge3sgbnVtYmVycyB8IGxpbWl0VG86bGltaXQgfX08L3A+CiAgICAgICA8L2Rpdj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgbGltaXQgdGhlIG51bWVyIGFycmF5IHRvIGZpcnN0IHRocmVlIGl0ZW1zJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBpbnB1dFtuZy1tb2RlbD1saW1pdF0nKS52YWwoKSkudG9CZSgnMycpOwogICAgICAgICBleHBlY3QoYmluZGluZygnbnVtYmVycyB8IGxpbWl0VG86bGltaXQnKSkudG9FcXVhbCgnWzEsMiwzXScpOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIG91dHB1dCB3aGVuIC0zIGlzIGVudGVyZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ2xpbWl0JykuZW50ZXIoLTMpOwogICAgICAgICBleHBlY3QoYmluZGluZygnbnVtYmVycyB8IGxpbWl0VG86bGltaXQnKSkudG9FcXVhbCgnWzcsOCw5XScpOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCBub3QgZXhjZWVkIHRoZSBtYXhpbXVtIHNpemUgb2YgaW5wdXQgYXJyYXknLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ2xpbWl0JykuZW50ZXIoMTAwKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ251bWJlcnMgfCBsaW1pdFRvOmxpbWl0JykpLnRvRXF1YWwoJ1sxLDIsMyw0LDUsNiw3LDgsOV0nKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KZnVuY3Rpb24gbGltaXRUb0ZpbHRlcigpewogIHJldHVybiBmdW5jdGlvbihhcnJheSwgbGltaXQpIHsKICAgIGlmICghKGFycmF5IGluc3RhbmNlb2YgQXJyYXkpKSByZXR1cm4gYXJyYXk7CiAgICBsaW1pdCA9IGludChsaW1pdCk7CiAgICB2YXIgb3V0ID0gW10sCiAgICAgIGksIG47CgogICAgLy8gY2hlY2sgdGhhdCBhcnJheSBpcyBpdGVyYWJsZQogICAgaWYgKCFhcnJheSB8fCAhKGFycmF5IGluc3RhbmNlb2YgQXJyYXkpKQogICAgICByZXR1cm4gb3V0OwoKICAgIC8vIGlmIGFicyhsaW1pdCkgZXhjZWVkcyBtYXhpbXVtIGxlbmd0aCwgdHJpbSBpdAogICAgaWYgKGxpbWl0ID4gYXJyYXkubGVuZ3RoKQogICAgICBsaW1pdCA9IGFycmF5Lmxlbmd0aDsKICAgIGVsc2UgaWYgKGxpbWl0IDwgLWFycmF5Lmxlbmd0aCkKICAgICAgbGltaXQgPSAtYXJyYXkubGVuZ3RoOwoKICAgIGlmIChsaW1pdCA+IDApIHsKICAgICAgaSA9IDA7CiAgICAgIG4gPSBsaW1pdDsKICAgIH0gZWxzZSB7CiAgICAgIGkgPSBhcnJheS5sZW5ndGggKyBsaW1pdDsKICAgICAgbiA9IGFycmF5Lmxlbmd0aDsKICAgIH0KCiAgICBmb3IgKDsgaTxuOyBpKyspIHsKICAgICAgb3V0LnB1c2goYXJyYXlbaV0pOwogICAgfQoKICAgIHJldHVybiBvdXQ7CiAgfQp9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLmZpbHRlcjpvcmRlckJ5CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogT3JkZXJzIGEgc3BlY2lmaWVkIGBhcnJheWAgYnkgdGhlIGBleHByZXNzaW9uYCBwcmVkaWNhdGUuCiAqCiAqIE5vdGU6IHRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhdWdtZW50IHRoZSBgQXJyYXlgIHR5cGUgaW4gQW5ndWxhciBleHByZXNzaW9ucy4gU2VlCiAqIHtAbGluayBuZy4kZmlsdGVyfSBmb3IgbW9yZSBpbmZvcm1hdG9uIGFib3V0IEFuZ3VsYXIgYXJyYXlzLgogKgogKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC4KICogQHBhcmFtIHtmdW5jdGlvbigqKXxzdHJpbmd8QXJyYXkuPChmdW5jdGlvbigqKXxzdHJpbmcpPn0gZXhwcmVzc2lvbiBBIHByZWRpY2F0ZSB0byBiZQogKiAgICB1c2VkIGJ5IHRoZSBjb21wYXJhdG9yIHRvIGRldGVybWluZSB0aGUgb3JkZXIgb2YgZWxlbWVudHMuCiAqCiAqICAgIENhbiBiZSBvbmUgb2Y6CiAqCiAqICAgIC0gYGZ1bmN0aW9uYDogR2V0dGVyIGZ1bmN0aW9uLiBUaGUgcmVzdWx0IG9mIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBzb3J0ZWQgdXNpbmcgdGhlCiAqICAgICAgYDxgLCBgPWAsIGA+YCBvcGVyYXRvci4KICogICAgLSBgc3RyaW5nYDogQW4gQW5ndWxhciBleHByZXNzaW9uIHdoaWNoIGV2YWx1YXRlcyB0byBhbiBvYmplY3QgdG8gb3JkZXIgYnksIHN1Y2ggYXMgJ25hbWUnCiAqICAgICAgdG8gc29ydCBieSBhIHByb3BlcnR5IGNhbGxlZCAnbmFtZScuIE9wdGlvbmFsbHkgcHJlZml4ZWQgd2l0aCBgK2Agb3IgYC1gIHRvIGNvbnRyb2wKICogICAgICBhc2NlbmRpbmcgb3IgZGVzY2VuZGluZyBzb3J0IG9yZGVyIChmb3IgZXhhbXBsZSwgK25hbWUgb3IgLW5hbWUpLgogKiAgICAtIGBBcnJheWA6IEFuIGFycmF5IG9mIGZ1bmN0aW9uIG9yIHN0cmluZyBwcmVkaWNhdGVzLiBUaGUgZmlyc3QgcHJlZGljYXRlIGluIHRoZSBhcnJheQogKiAgICAgIGlzIHVzZWQgZm9yIHNvcnRpbmcsIGJ1dCB3aGVuIHR3byBpdGVtcyBhcmUgZXF1aXZhbGVudCwgdGhlIG5leHQgcHJlZGljYXRlIGlzIHVzZWQuCiAqCiAqIEBwYXJhbSB7Ym9vbGVhbj19IHJldmVyc2UgUmV2ZXJzZSB0aGUgb3JkZXIgdGhlIGFycmF5LgogKiBAcmV0dXJucyB7QXJyYXl9IFNvcnRlZCBjb3B5IG9mIHRoZSBzb3VyY2UgYXJyYXkuCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPQogICAgICAgICAgICAgICBbe25hbWU6J0pvaG4nLCBwaG9uZTonNTU1LTEyMTInLCBhZ2U6MTB9LAogICAgICAgICAgICAgICAge25hbWU6J01hcnknLCBwaG9uZTonNTU1LTk4NzYnLCBhZ2U6MTl9LAogICAgICAgICAgICAgICAge25hbWU6J01pa2UnLCBwaG9uZTonNTU1LTQzMjEnLCBhZ2U6MjF9LAogICAgICAgICAgICAgICAge25hbWU6J0FkYW0nLCBwaG9uZTonNTU1LTU2NzgnLCBhZ2U6MzV9LAogICAgICAgICAgICAgICAge25hbWU6J0p1bGllJywgcGhvbmU6JzU1NS04NzY1JywgYWdlOjI5fV0KICAgICAgICAgICAkc2NvcGUucHJlZGljYXRlID0gJy1hZ2UnOwogICAgICAgICB9CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgIDxwcmU+U29ydGluZyBwcmVkaWNhdGUgPSB7e3ByZWRpY2F0ZX19OyByZXZlcnNlID0ge3tyZXZlcnNlfX08L3ByZT4KICAgICAgICAgPGhyLz4KICAgICAgICAgWyA8YSBocmVmPSIiIG5nLWNsaWNrPSJwcmVkaWNhdGU9JyciPnVuc29ydGVkPC9hPiBdCiAgICAgICAgIDx0YWJsZSBjbGFzcz0iZnJpZW5kIj4KICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICA8dGg+PGEgaHJlZj0iIiBuZy1jbGljaz0icHJlZGljYXRlID0gJ25hbWUnOyByZXZlcnNlPWZhbHNlIj5OYW1lPC9hPgogICAgICAgICAgICAgICAgICg8YSBocmVmIG5nLWNsaWNrPSJwcmVkaWNhdGUgPSAnLW5hbWUnOyByZXZlcnNlPWZhbHNlIj5ePC9hPik8L3RoPgogICAgICAgICAgICAgPHRoPjxhIGhyZWY9IiIgbmctY2xpY2s9InByZWRpY2F0ZSA9ICdwaG9uZSc7IHJldmVyc2U9IXJldmVyc2UiPlBob25lIE51bWJlcjwvYT48L3RoPgogICAgICAgICAgICAgPHRoPjxhIGhyZWY9IiIgbmctY2xpY2s9InByZWRpY2F0ZSA9ICdhZ2UnOyByZXZlcnNlPSFyZXZlcnNlIj5BZ2U8L2E+PC90aD4KICAgICAgICAgICA8dHI+CiAgICAgICAgICAgPHRyIG5nLXJlcGVhdD0iZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OnByZWRpY2F0ZTpyZXZlcnNlIj4KICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPgogICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPgogICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD4KICAgICAgICAgICA8dHI+CiAgICAgICAgIDwvdGFibGU+CiAgICAgICA8L2Rpdj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgYmUgcmV2ZXJzZSBvcmRlcmVkIGJ5IGFnZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ByZWRpY2F0ZScpKS50b0JlKCctYWdlJyk7CiAgICAgICAgIGV4cGVjdChyZXBlYXRlcigndGFibGUuZnJpZW5kJywgJ2ZyaWVuZCBpbiBmcmllbmRzJykuY29sdW1uKCdmcmllbmQuYWdlJykpLgogICAgICAgICAgIHRvRXF1YWwoWyczNScsICcyOScsICcyMScsICcxOScsICcxMCddKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCd0YWJsZS5mcmllbmQnLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLgogICAgICAgICAgIHRvRXF1YWwoWydBZGFtJywgJ0p1bGllJywgJ01pa2UnLCAnTWFyeScsICdKb2huJ10pOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCByZW9yZGVyIHRoZSB0YWJsZSB3aGVuIHVzZXIgc2VsZWN0cyBkaWZmZXJlbnQgcHJlZGljYXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGE6Y29udGFpbnMoIk5hbWUiKScpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChyZXBlYXRlcigndGFibGUuZnJpZW5kJywgJ2ZyaWVuZCBpbiBmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKS4KICAgICAgICAgICB0b0VxdWFsKFsnQWRhbScsICdKb2huJywgJ0p1bGllJywgJ01hcnknLCAnTWlrZSddKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCd0YWJsZS5mcmllbmQnLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5hZ2UnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJzM1JywgJzEwJywgJzI5JywgJzE5JywgJzIxJ10pOwoKICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgYTpjb250YWlucygiUGhvbmUiKScpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChyZXBlYXRlcigndGFibGUuZnJpZW5kJywgJ2ZyaWVuZCBpbiBmcmllbmRzJykuY29sdW1uKCdmcmllbmQucGhvbmUnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJzU1NS05ODc2JywgJzU1NS04NzY1JywgJzU1NS01Njc4JywgJzU1NS00MzIxJywgJzU1NS0xMjEyJ10pOwogICAgICAgICBleHBlY3QocmVwZWF0ZXIoJ3RhYmxlLmZyaWVuZCcsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJ01hcnknLCAnSnVsaWUnLCAnQWRhbScsICdNaWtlJywgJ0pvaG4nXSk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCm9yZGVyQnlGaWx0ZXIuJGluamVjdCA9IFsnJHBhcnNlJ107CmZ1bmN0aW9uIG9yZGVyQnlGaWx0ZXIoJHBhcnNlKXsKICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHNvcnRQcmVkaWNhdGUsIHJldmVyc2VPcmRlcikgewogICAgaWYgKCEoYXJyYXkgaW5zdGFuY2VvZiBBcnJheSkpIHJldHVybiBhcnJheTsKICAgIGlmICghc29ydFByZWRpY2F0ZSkgcmV0dXJuIGFycmF5OwogICAgc29ydFByZWRpY2F0ZSA9IGlzQXJyYXkoc29ydFByZWRpY2F0ZSkgPyBzb3J0UHJlZGljYXRlOiBbc29ydFByZWRpY2F0ZV07CiAgICBzb3J0UHJlZGljYXRlID0gbWFwKHNvcnRQcmVkaWNhdGUsIGZ1bmN0aW9uKHByZWRpY2F0ZSl7CiAgICAgIHZhciBkZXNjZW5kaW5nID0gZmFsc2UsIGdldCA9IHByZWRpY2F0ZSB8fCBpZGVudGl0eTsKICAgICAgaWYgKGlzU3RyaW5nKHByZWRpY2F0ZSkpIHsKICAgICAgICBpZiAoKHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJysnIHx8IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJy0nKSkgewogICAgICAgICAgZGVzY2VuZGluZyA9IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJy0nOwogICAgICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlLnN1YnN0cmluZygxKTsKICAgICAgICB9CiAgICAgICAgZ2V0ID0gJHBhcnNlKHByZWRpY2F0ZSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJldmVyc2VDb21wYXJhdG9yKGZ1bmN0aW9uKGEsYil7CiAgICAgICAgcmV0dXJuIGNvbXBhcmUoZ2V0KGEpLGdldChiKSk7CiAgICAgIH0sIGRlc2NlbmRpbmcpOwogICAgfSk7CiAgICB2YXIgYXJyYXlDb3B5ID0gW107CiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgeyBhcnJheUNvcHkucHVzaChhcnJheVtpXSk7IH0KICAgIHJldHVybiBhcnJheUNvcHkuc29ydChyZXZlcnNlQ29tcGFyYXRvcihjb21wYXJhdG9yLCByZXZlcnNlT3JkZXIpKTsKCiAgICBmdW5jdGlvbiBjb21wYXJhdG9yKG8xLCBvMil7CiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNvcnRQcmVkaWNhdGUubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgY29tcCA9IHNvcnRQcmVkaWNhdGVbaV0obzEsIG8yKTsKICAgICAgICBpZiAoY29tcCAhPT0gMCkgcmV0dXJuIGNvbXA7CiAgICAgIH0KICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICBmdW5jdGlvbiByZXZlcnNlQ29tcGFyYXRvcihjb21wLCBkZXNjZW5kaW5nKSB7CiAgICAgIHJldHVybiB0b0Jvb2xlYW4oZGVzY2VuZGluZykKICAgICAgICAgID8gZnVuY3Rpb24oYSxiKXtyZXR1cm4gY29tcChiLGEpO30KICAgICAgICAgIDogY29tcDsKICAgIH0KICAgIGZ1bmN0aW9uIGNvbXBhcmUodjEsIHYyKXsKICAgICAgdmFyIHQxID0gdHlwZW9mIHYxOwogICAgICB2YXIgdDIgPSB0eXBlb2YgdjI7CiAgICAgIGlmICh0MSA9PSB0MikgewogICAgICAgIGlmICh0MSA9PSAic3RyaW5nIikgdjEgPSB2MS50b0xvd2VyQ2FzZSgpOwogICAgICAgIGlmICh0MSA9PSAic3RyaW5nIikgdjIgPSB2Mi50b0xvd2VyQ2FzZSgpOwogICAgICAgIGlmICh2MSA9PT0gdjIpIHJldHVybiAwOwogICAgICAgIHJldHVybiB2MSA8IHYyID8gLTEgOiAxOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0MSA8IHQyID8gLTEgOiAxOwogICAgICB9CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBuZ0RpcmVjdGl2ZShkaXJlY3RpdmUpIHsKICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7CiAgICBkaXJlY3RpdmUgPSB7CiAgICAgIGxpbms6IGRpcmVjdGl2ZQogICAgfQogIH0KICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0FDJzsKICByZXR1cm4gdmFsdWVGbihkaXJlY3RpdmUpOwp9CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6YQogKiBAcmVzdHJpY3QgRQogKgogKiBAZGVzY3JpcHRpb24KICogTW9kaWZpZXMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgaHRtbCBBIHRhZywgc28gdGhhdCB0aGUgZGVmYXVsdCBhY3Rpb24gaXMgcHJldmVudGVkIHdoZW4gaHJlZgogKiBhdHRyaWJ1dGUgaXMgZW1wdHkuCiAqCiAqIFRoZSByZWFzb25pbmcgZm9yIHRoaXMgY2hhbmdlIGlzIHRvIGFsbG93IGVhc3kgY3JlYXRpb24gb2YgYWN0aW9uIGxpbmtzIHdpdGggYG5nQ2xpY2tgIGRpcmVjdGl2ZQogKiB3aXRob3V0IGNoYW5naW5nIHRoZSBsb2NhdGlvbiBvciBjYXVzaW5nIHBhZ2UgcmVsb2FkcywgZS5nLjoKICogPGEgaHJlZj0iIiBuZy1jbGljaz0ibW9kZWwuJHNhdmUoKSI+U2F2ZTwvYT4KICovCnZhciBodG1sQW5jaG9yRGlyZWN0aXZlID0gdmFsdWVGbih7CiAgcmVzdHJpY3Q6ICdFJywKICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICAvLyB0dXJuIDxhIGhyZWYgbmctY2xpY2s9Ii4uIj5saW5rPC9hPiBpbnRvIGEgbGluayBpbiBJRQogICAgLy8gYnV0IG9ubHkgaWYgaXQgZG9lc24ndCBoYXZlIG5hbWUgYXR0cmlidXRlLCBpbiB3aGljaCBjYXNlIGl0J3MgYW4gYW5jaG9yCiAgICBpZiAoIWF0dHIuaHJlZikgewogICAgICBhdHRyLiRzZXQoJ2hyZWYnLCAnJyk7CiAgICB9CgogICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7CiAgICAgIGVsZW1lbnQuYmluZCgnY2xpY2snLCBmdW5jdGlvbihldmVudCl7CiAgICAgICAgLy8gaWYgd2UgaGF2ZSBubyBocmVmIHVybCwgdGhlbiBkb24ndCBuYXZpZ2F0ZSBhbnl3aGVyZS4KICAgICAgICBpZiAoIWVsZW1lbnQuYXR0cignaHJlZicpKSB7CiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBOZWVkZWQgZm9yIG9wZXJhCiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nSHJlZgogKiBAcmVzdHJpY3QgQQogKgogKiBAZGVzY3JpcHRpb24KICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSB7e2hhc2h9fSBpbiBhbiBocmVmIGF0dHJpYnV0ZSBtYWtlcwogKiB0aGUgcGFnZSBvcGVuIHRvIGEgd3JvbmcgVVJMLCBpZiB0aGUgdXNlciBjbGlja3MgdGhhdCBsaW5rIGJlZm9yZQogKiBhbmd1bGFyIGhhcyBhIGNoYW5jZSB0byByZXBsYWNlIHRoZSB7e2hhc2h9fSB3aXRoIGFjdHVhbCBVUkwsIHRoZQogKiBsaW5rIHdpbGwgYmUgYnJva2VuIGFuZCB3aWxsIG1vc3QgbGlrZWx5IHJldHVybiBhIDQwNCBlcnJvci4KICogVGhlIGBuZ0hyZWZgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLgogKgogKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OgogKiA8cHJlPgogKiA8YSBocmVmPSJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0iLz4KICogPC9wcmU+CiAqCiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDoKICogPHByZT4KICogPGEgbmctaHJlZj0iaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19Ii8+CiAqIDwvcHJlPgogKgogKiBAZWxlbWVudCBBCiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nSHJlZiBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuCiAqCiAqIEBleGFtcGxlCiAqIFRoaXMgZXhhbXBsZSB1c2VzIGBsaW5rYCB2YXJpYWJsZSBpbnNpZGUgYGhyZWZgIGF0dHJpYnV0ZToKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgPGlucHV0IG5nLW1vZGVsPSJ2YWx1ZSIgLz48YnIgLz4KICAgICAgICA8YSBpZD0ibGluay0xIiBocmVmIG5nLWNsaWNrPSJ2YWx1ZSA9IDEiPmxpbmsgMTwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz4KICAgICAgICA8YSBpZD0ibGluay0yIiBocmVmPSIiIG5nLWNsaWNrPSJ2YWx1ZSA9IDIiPmxpbmsgMjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz4KICAgICAgICA8YSBpZD0ibGluay0zIiBuZy1ocmVmPSIve3snMTIzJ319Ij5saW5rIDM8L2E+IChsaW5rLCByZWxvYWQhKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTQiIGhyZWY9IiIgbmFtZT0ieHgiIG5nLWNsaWNrPSJ2YWx1ZSA9IDQiPmFuY2hvcjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz4KICAgICAgICA8YSBpZD0ibGluay01IiBuYW1lPSJ4eHgiIG5nLWNsaWNrPSJ2YWx1ZSA9IDUiPmFuY2hvcjwvYT4gKG5vIGxpbmspPGJyIC8+CiAgICAgICAgPGEgaWQ9ImxpbmstNiIgbmctaHJlZj0ie3t2YWx1ZX19Ij5saW5rPC9hPiAobGluaywgY2hhbmdlIGxvY2F0aW9uKQogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiB3aXRob3V0IHZhbHVlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBlbGVtZW50KCcjbGluay0xJykuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChpbnB1dCgndmFsdWUnKS52YWwoKSkudG9FcXVhbCgnMScpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNsaW5rLTEnKS5hdHRyKCdocmVmJykpLnRvQmUoIiIpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZWxlbWVudCgnI2xpbmstMicpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoaW5wdXQoJ3ZhbHVlJykudmFsKCkpLnRvRXF1YWwoJzInKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjbGluay0yJykuYXR0cignaHJlZicpKS50b0JlKCIiKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGFuZCBjaGFuZ2UgdXJsIHdoZW4gbmctaHJlZiBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjbGluay0zJykuYXR0cignaHJlZicpKS50b0JlKCIvMTIzIik7CgogICAgICAgICAgZWxlbWVudCgnI2xpbmstMycpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoYnJvd3NlcigpLndpbmRvdygpLnBhdGgoKSkudG9FcXVhbCgnLzEyMycpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZyBhbmQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGVsZW1lbnQoJyNsaW5rLTQnKS5jbGljaygpOwogICAgICAgICAgZXhwZWN0KGlucHV0KCd2YWx1ZScpLnZhbCgpKS50b0VxdWFsKCc0Jyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnI2xpbmstNCcpLmF0dHIoJ2hyZWYnKSkudG9CZSgnJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIG5vIGhyZWYgYnV0IG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBlbGVtZW50KCcjbGluay01JykuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChpbnB1dCgndmFsdWUnKS52YWwoKSkudG9FcXVhbCgnNScpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNsaW5rLTUnKS5hdHRyKCdocmVmJykpLnRvQmUoJycpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIG9ubHkgY2hhbmdlIHVybCB3aGVuIG9ubHkgbmctaHJlZicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ3ZhbHVlJykuZW50ZXIoJzYnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjbGluay02JykuYXR0cignaHJlZicpKS50b0JlKCc2Jyk7CgogICAgICAgICAgZWxlbWVudCgnI2xpbmstNicpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoYnJvd3NlcigpLmxvY2F0aW9uKCkudXJsKCkpLnRvRXF1YWwoJy82Jyk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdTcmMKICogQHJlc3RyaWN0IEEKICoKICogQGRlc2NyaXB0aW9uCiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhIGBzcmNgIGF0dHJpYnV0ZSBkb2Vzbid0CiAqIHdvcmsgcmlnaHQ6IFRoZSBicm93c2VyIHdpbGwgZmV0Y2ggZnJvbSB0aGUgVVJMIHdpdGggdGhlIGxpdGVyYWwKICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlCiAqIGB7e2hhc2h9fWAuIFRoZSBgbmdTcmNgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLgogKgogKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OgogKiA8cHJlPgogKiA8aW1nIHNyYz0iaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19Ii8+CiAqIDwvcHJlPgogKgogKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6CiAqIDxwcmU+CiAqIDxpbWcgbmctc3JjPSJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0iLz4KICogPC9wcmU+CiAqCiAqIEBlbGVtZW50IElNRwogKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyYyBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuCiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nRGlzYWJsZWQKICogQHJlc3RyaWN0IEEKICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIFRoZSBmb2xsb3dpbmcgbWFya3VwIHdpbGwgbWFrZSB0aGUgYnV0dG9uIGVuYWJsZWQgb24gQ2hyb21lL0ZpcmVmb3ggYnV0IG5vdCBvbiBJRTggYW5kIG9sZGVyIElFczoKICogPHByZT4KICogPGRpdiBuZy1pbml0PSJzY29wZSA9IHsgaXNEaXNhYmxlZDogZmFsc2UgfSI+CiAqICA8YnV0dG9uIGRpc2FibGVkPSJ7e3Njb3BlLmlzRGlzYWJsZWR9fSI+RGlzYWJsZWQ8L2J1dHRvbj4KICogPC9kaXY+CiAqIDwvcHJlPgogKgogKiBUaGUgSFRNTCBzcGVjcyBkbyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgc3BlY2lhbCBhdHRyaWJ1dGVzIHN1Y2ggYXMgZGlzYWJsZWQuCiAqIChUaGUgcHJlc2VuY2Ugb2YgdGhlbSBtZWFucyB0cnVlIGFuZCBhYnNlbmNlIG1lYW5zIGZhbHNlKQogKiBUaGlzIHByZXZlbnRzIHRoZSBhbmd1bGFyIGNvbXBpbGVyIGZyb20gY29ycmVjdGx5IHJldHJpZXZpbmcgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbi4KICogVG8gc29sdmUgdGhpcyBwcm9ibGVtLCB3ZSBpbnRyb2R1Y2UgdGhlIGBuZ0Rpc2FibGVkYCBkaXJlY3RpdmUuCiAqCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgIENsaWNrIG1lIHRvIHRvZ2dsZTogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iY2hlY2tlZCI+PGJyLz4KICAgICAgICA8YnV0dG9uIG5nLW1vZGVsPSJidXR0b24iIG5nLWRpc2FibGVkPSJjaGVja2VkIj5CdXR0b248L2J1dHRvbj4KICAgICAgPC9kb2M6c291cmNlPgogICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIGJ1dHRvbicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIDpidXR0b24nKS5wcm9wKCdkaXNhYmxlZCcpKS50b0JlRmFsc3koKTsKICAgICAgICAgIGlucHV0KCdjaGVja2VkJykuY2hlY2soKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSA6YnV0dG9uJykucHJvcCgnZGlzYWJsZWQnKSkudG9CZVRydXRoeSgpOwogICAgICAgIH0pOwogICAgICA8L2RvYzpzY2VuYXJpbz4KICAgIDwvZG9jOmV4YW1wbGU+CiAqCiAqIEBlbGVtZW50IElOUFVUCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdEaXNhYmxlZCBBbmd1bGFyIGV4cHJlc3Npb24gdGhhdCB3aWxsIGJlIGV2YWx1YXRlZC4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ2hlY2tlZAogKiBAcmVzdHJpY3QgQQogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIEhUTUwgc3BlY3MgZG8gbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHNwZWNpYWwgYXR0cmlidXRlcyBzdWNoIGFzIGNoZWNrZWQuCiAqIChUaGUgcHJlc2VuY2Ugb2YgdGhlbSBtZWFucyB0cnVlIGFuZCBhYnNlbmNlIG1lYW5zIGZhbHNlKQogKiBUaGlzIHByZXZlbnRzIHRoZSBhbmd1bGFyIGNvbXBpbGVyIGZyb20gY29ycmVjdGx5IHJldHJpZXZpbmcgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbi4KICogVG8gc29sdmUgdGhpcyBwcm9ibGVtLCB3ZSBpbnRyb2R1Y2UgdGhlIGBuZ0NoZWNrZWRgIGRpcmVjdGl2ZS4KICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgQ2hlY2sgbWUgdG8gY2hlY2sgYm90aDogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0ibWFzdGVyIj48YnIvPgogICAgICAgIDxpbnB1dCBpZD0iY2hlY2tTbGF2ZSIgdHlwZT0iY2hlY2tib3giIG5nLWNoZWNrZWQ9Im1hc3RlciI+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGJvdGggY2hlY2tCb3hlcycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNjaGVja1NsYXZlJykucHJvcCgnY2hlY2tlZCcpKS50b0JlRmFsc3koKTsKICAgICAgICAgIGlucHV0KCdtYXN0ZXInKS5jaGVjaygpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNjaGVja1NsYXZlJykucHJvcCgnY2hlY2tlZCcpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICoKICogQGVsZW1lbnQgSU5QVVQKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NoZWNrZWQgQW5ndWxhciBleHByZXNzaW9uIHRoYXQgd2lsbCBiZSBldmFsdWF0ZWQuCiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ011bHRpcGxlCiAqIEByZXN0cmljdCBBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgSFRNTCBzcGVjcyBkbyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgc3BlY2lhbCBhdHRyaWJ1dGVzIHN1Y2ggYXMgbXVsdGlwbGUuCiAqIChUaGUgcHJlc2VuY2Ugb2YgdGhlbSBtZWFucyB0cnVlIGFuZCBhYnNlbmNlIG1lYW5zIGZhbHNlKQogKiBUaGlzIHByZXZlbnRzIHRoZSBhbmd1bGFyIGNvbXBpbGVyIGZyb20gY29ycmVjdGx5IHJldHJpZXZpbmcgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbi4KICogVG8gc29sdmUgdGhpcyBwcm9ibGVtLCB3ZSBpbnRyb2R1Y2UgdGhlIGBuZ011bHRpcGxlYCBkaXJlY3RpdmUuCiAqCiAqIEBleGFtcGxlCiAgICAgPGRvYzpleGFtcGxlPgogICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgIENoZWNrIG1lIGNoZWNrIG11bHRpcGxlOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIj48YnIvPgogICAgICAgICA8c2VsZWN0IGlkPSJzZWxlY3QiIG5nLW11bHRpcGxlPSJjaGVja2VkIj4KICAgICAgICAgICA8b3B0aW9uPk1pc2tvPC9vcHRpb24+CiAgICAgICAgICAgPG9wdGlvbj5JZ29yPC9vcHRpb24+CiAgICAgICAgICAgPG9wdGlvbj5Wb2p0YTwvb3B0aW9uPgogICAgICAgICAgIDxvcHRpb24+RGk8L29wdGlvbj4KICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICA8L2RvYzpzb3VyY2U+CiAgICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBtdWx0aXBsZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAjc2VsZWN0JykucHJvcCgnbXVsdGlwbGUnKSkudG9CZUZhbHN5KCk7CiAgICAgICAgICAgaW5wdXQoJ2NoZWNrZWQnKS5jaGVjaygpOwogICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAjc2VsZWN0JykucHJvcCgnbXVsdGlwbGUnKSkudG9CZVRydXRoeSgpOwogICAgICAgICB9KTsKICAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgIDwvZG9jOmV4YW1wbGU+CiAqCiAqIEBlbGVtZW50IFNFTEVDVAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTXVsdGlwbGUgQW5ndWxhciBleHByZXNzaW9uIHRoYXQgd2lsbCBiZSBldmFsdWF0ZWQuCiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1JlYWRvbmx5CiAqIEByZXN0cmljdCBBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgSFRNTCBzcGVjcyBkbyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgc3BlY2lhbCBhdHRyaWJ1dGVzIHN1Y2ggYXMgcmVhZG9ubHkuCiAqIChUaGUgcHJlc2VuY2Ugb2YgdGhlbSBtZWFucyB0cnVlIGFuZCBhYnNlbmNlIG1lYW5zIGZhbHNlKQogKiBUaGlzIHByZXZlbnRzIHRoZSBhbmd1bGFyIGNvbXBpbGVyIGZyb20gY29ycmVjdGx5IHJldHJpZXZpbmcgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbi4KICogVG8gc29sdmUgdGhpcyBwcm9ibGVtLCB3ZSBpbnRyb2R1Y2UgdGhlIGBuZ1JlYWRvbmx5YCBkaXJlY3RpdmUuCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgIENoZWNrIG1lIHRvIG1ha2UgdGV4dCByZWFkb25seTogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iY2hlY2tlZCI+PGJyLz4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctcmVhZG9ubHk9ImNoZWNrZWQiIHZhbHVlPSJJJ20gQW5ndWxhciIvPgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgcmVhZG9ubHkgYXR0cicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIDp0ZXh0JykucHJvcCgncmVhZG9ubHknKSkudG9CZUZhbHN5KCk7CiAgICAgICAgICBpbnB1dCgnY2hlY2tlZCcpLmNoZWNrKCk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgOnRleHQnKS5wcm9wKCdyZWFkb25seScpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICoKICogQGVsZW1lbnQgSU5QVVQKICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gQW5ndWxhciBleHByZXNzaW9uIHRoYXQgd2lsbCBiZSBldmFsdWF0ZWQuCiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1NlbGVjdGVkCiAqIEByZXN0cmljdCBBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgSFRNTCBzcGVjcyBkbyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgc3BlY2lhbCBhdHRyaWJ1dGVzIHN1Y2ggYXMgc2VsZWN0ZWQuCiAqIChUaGUgcHJlc2VuY2Ugb2YgdGhlbSBtZWFucyB0cnVlIGFuZCBhYnNlbmNlIG1lYW5zIGZhbHNlKQogKiBUaGlzIHByZXZlbnRzIHRoZSBhbmd1bGFyIGNvbXBpbGVyIGZyb20gY29ycmVjdGx5IHJldHJpZXZpbmcgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbi4KICogVG8gc29sdmUgdGhpcyBwcm9ibGVtLCB3ZSBpbnRyb2R1Y2VkIHRoZSBgbmdTZWxlY3RlZGAgZGlyZWN0aXZlLgogKiBAZXhhbXBsZQogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICBDaGVjayBtZSB0byBzZWxlY3Q6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9InNlbGVjdGVkIj48YnIvPgogICAgICAgIDxzZWxlY3Q+CiAgICAgICAgICA8b3B0aW9uPkhlbGxvITwvb3B0aW9uPgogICAgICAgICAgPG9wdGlvbiBpZD0iZ3JlZXQiIG5nLXNlbGVjdGVkPSJzZWxlY3RlZCI+R3JlZXRpbmdzITwvb3B0aW9uPgogICAgICAgIDwvc2VsZWN0PgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgR3JlZXRpbmdzIScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNncmVldCcpLnByb3AoJ3NlbGVjdGVkJykpLnRvQmVGYWxzeSgpOwogICAgICAgICAgaW5wdXQoJ3NlbGVjdGVkJykuY2hlY2soKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAjZ3JlZXQnKS5wcm9wKCdzZWxlY3RlZCcpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICoKICogQGVsZW1lbnQgT1BUSU9OCiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIEFuZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IHdpbGwgYmUgZXZhbHVhdGVkLgogKi8KCgp2YXIgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMgPSB7fTsKCgovLyBib29sZWFuIGF0dHJzIGFyZSBldmFsdWF0ZWQKZm9yRWFjaChCT09MRUFOX0FUVFIsIGZ1bmN0aW9uKHByb3BOYW1lLCBhdHRyTmFtZSkgewogIHZhciBub3JtYWxpemVkID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgYXR0ck5hbWUpOwogIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBwcmlvcml0eTogMTAwLAogICAgICBjb21waWxlOiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25vcm1hbGl6ZWRdLCBmdW5jdGlvbiBuZ0Jvb2xlYW5BdHRyV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgYXR0ci4kc2V0KGF0dHJOYW1lLCAhIXZhbHVlKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgIH0KICAgIH07CiAgfTsKfSk7CgoKLy8gbmctc3JjLCBuZy1ocmVmIGFyZSBpbnRlcnBvbGF0ZWQKZm9yRWFjaChbJ3NyYycsICdocmVmJ10sIGZ1bmN0aW9uKGF0dHJOYW1lKSB7CiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7CiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgIHByaW9yaXR5OiA5OSwgLy8gaXQgbmVlZHMgdG8gcnVuIGFmdGVyIHRoZSBhdHRyaWJ1dGVzIGFyZSBpbnRlcnBvbGF0ZWQKICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICBhdHRyLiRvYnNlcnZlKG5vcm1hbGl6ZWQsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICBpZiAoIXZhbHVlKQogICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICAgIGF0dHIuJHNldChhdHRyTmFtZSwgdmFsdWUpOwoKICAgICAgICAgIC8vIG9uIElFLCBpZiAibmc6c3JjIiBkaXJlY3RpdmUgZGVjbGFyYXRpb24gaXMgdXNlZCBhbmQgInNyYyIgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3QKICAgICAgICAgIC8vIHRoZW4gY2FsbGluZyBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgJ2ZvbycpIGRvZXNuJ3QgZG8gYW55dGhpbmcsIHNvIHdlIG5lZWQKICAgICAgICAgIC8vIHRvIHNldCB0aGUgcHJvcGVydHkgYXMgd2VsbCB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdAogICAgICAgICAgaWYgKG1zaWUpIGVsZW1lbnQucHJvcChhdHRyTmFtZSwgdmFsdWUpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9OwogIH07Cn0pOwoKdmFyIG51bGxGb3JtQ3RybCA9IHsKICAkYWRkQ29udHJvbDogbm9vcCwKICAkcmVtb3ZlQ29udHJvbDogbm9vcCwKICAkc2V0VmFsaWRpdHk6IG5vb3AsCiAgJHNldERpcnR5OiBub29wCn07CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy5kaXJlY3RpdmU6Zm9ybS5Gb3JtQ29udHJvbGxlcgogKgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICRwcmlzdGluZSBUcnVlIGlmIHVzZXIgaGFzIG5vdCBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0geWV0LgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtLgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICR2YWxpZCBUcnVlIGlmIGFsbCBvZiB0aGUgY29udGFpbmcgZm9ybXMgYW5kIGNvbnRyb2xzIGFyZSB2YWxpZC4KICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBjb250YWluaW5nIGNvbnRyb2wgb3IgZm9ybSBpcyBpbnZhbGlkLgogKgogKiBAcHJvcGVydHkge09iamVjdH0gJGVycm9yIElzIGFuIG9iamVjdCBoYXNoLCBjb250YWluaW5nIHJlZmVyZW5jZXMgdG8gYWxsIGludmFsaWQgY29udHJvbHMgb3IKICogIGZvcm1zLCB3aGVyZToKICoKICogIC0ga2V5cyBhcmUgdmFsaWRhdGlvbiB0b2tlbnMgKGVycm9yIG5hbWVzKSDigJQgc3VjaCBhcyBgUkVRVUlSRURgLCBgVVJMYCBvciBgRU1BSUxgKSwKICogIC0gdmFsdWVzIGFyZSBhcnJheXMgb2YgY29udHJvbHMgb3IgZm9ybXMgdGhhdCBhcmUgaW52YWxpZCB3aXRoIGdpdmVuIGVycm9yLgogKgogKiBAZGVzY3JpcHRpb24KICogYEZvcm1Db250cm9sbGVyYCBrZWVwcyB0cmFjayBvZiBhbGwgaXRzIGNvbnRyb2xzIGFuZCBuZXN0ZWQgZm9ybXMgYXMgd2VsbCBhcyBzdGF0ZSBvZiB0aGVtLAogKiBzdWNoIGFzIGJlaW5nIHZhbGlkL2ludmFsaWQgb3IgZGlydHkvcHJpc3RpbmUuCiAqCiAqIEVhY2gge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19IGRpcmVjdGl2ZSBjcmVhdGVzIGFuIGluc3RhbmNlCiAqIG9mIGBGb3JtQ29udHJvbGxlcmAuCiAqCiAqLwovL2Fza3MgZm9yICRzY29wZSB0byBmb29sIHRoZSBCQyBjb250cm9sbGVyIG1vZHVsZQpGb3JtQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCcsICckYXR0cnMnLCAnJHNjb3BlJ107CmZ1bmN0aW9uIEZvcm1Db250cm9sbGVyKGVsZW1lbnQsIGF0dHJzKSB7CiAgdmFyIGZvcm0gPSB0aGlzLAogICAgICBwYXJlbnRGb3JtID0gZWxlbWVudC5wYXJlbnQoKS5jb250cm9sbGVyKCdmb3JtJykgfHwgbnVsbEZvcm1DdHJsLAogICAgICBpbnZhbGlkQ291bnQgPSAwLCAvLyB1c2VkIHRvIGVhc2lseSBkZXRlcm1pbmUgaWYgd2UgYXJlIHZhbGlkCiAgICAgIGVycm9ycyA9IGZvcm0uJGVycm9yID0ge307CgogIC8vIGluaXQgc3RhdGUKICBmb3JtLiRuYW1lID0gYXR0cnMubmFtZTsKICBmb3JtLiRkaXJ0eSA9IGZhbHNlOwogIGZvcm0uJHByaXN0aW5lID0gdHJ1ZTsKICBmb3JtLiR2YWxpZCA9IHRydWU7CiAgZm9ybS4kaW52YWxpZCA9IGZhbHNlOwoKICBwYXJlbnRGb3JtLiRhZGRDb250cm9sKGZvcm0pOwoKICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sCiAgZWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUyk7CiAgdG9nZ2xlVmFsaWRDc3ModHJ1ZSk7CgogIC8vIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgZWFzeSB0b2dnbGluZyBvZiBjbGFzc2VzCiAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRDc3MoaXNWYWxpZCwgdmFsaWRhdGlvbkVycm9yS2V5KSB7CiAgICB2YWxpZGF0aW9uRXJyb3JLZXkgPSB2YWxpZGF0aW9uRXJyb3JLZXkgPyAnLScgKyBzbmFrZV9jYXNlKHZhbGlkYXRpb25FcnJvcktleSwgJy0nKSA6ICcnOwogICAgZWxlbWVudC4KICAgICAgcmVtb3ZlQ2xhc3MoKGlzVmFsaWQgPyBJTlZBTElEX0NMQVNTIDogVkFMSURfQ0xBU1MpICsgdmFsaWRhdGlvbkVycm9yS2V5KS4KICAgICAgYWRkQ2xhc3MoKGlzVmFsaWQgPyBWQUxJRF9DTEFTUyA6IElOVkFMSURfQ0xBU1MpICsgdmFsaWRhdGlvbkVycm9yS2V5KTsKICB9CgogIGZvcm0uJGFkZENvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sKSB7CiAgICBpZiAoY29udHJvbC4kbmFtZSAmJiAhZm9ybS5oYXNPd25Qcm9wZXJ0eShjb250cm9sLiRuYW1lKSkgewogICAgICBmb3JtW2NvbnRyb2wuJG5hbWVdID0gY29udHJvbDsKICAgIH0KICB9OwoKICBmb3JtLiRyZW1vdmVDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCkgewogICAgaWYgKGNvbnRyb2wuJG5hbWUgJiYgZm9ybVtjb250cm9sLiRuYW1lXSA9PT0gY29udHJvbCkgewogICAgICBkZWxldGUgZm9ybVtjb250cm9sLiRuYW1lXTsKICAgIH0KICAgIGZvckVhY2goZXJyb3JzLCBmdW5jdGlvbihxdWV1ZSwgdmFsaWRhdGlvblRva2VuKSB7CiAgICAgIGZvcm0uJHNldFZhbGlkaXR5KHZhbGlkYXRpb25Ub2tlbiwgdHJ1ZSwgY29udHJvbCk7CiAgICB9KTsKICB9OwoKICBmb3JtLiRzZXRWYWxpZGl0eSA9IGZ1bmN0aW9uKHZhbGlkYXRpb25Ub2tlbiwgaXNWYWxpZCwgY29udHJvbCkgewogICAgdmFyIHF1ZXVlID0gZXJyb3JzW3ZhbGlkYXRpb25Ub2tlbl07CgogICAgaWYgKGlzVmFsaWQpIHsKICAgICAgaWYgKHF1ZXVlKSB7CiAgICAgICAgYXJyYXlSZW1vdmUocXVldWUsIGNvbnRyb2wpOwogICAgICAgIGlmICghcXVldWUubGVuZ3RoKSB7CiAgICAgICAgICBpbnZhbGlkQ291bnQtLTsKICAgICAgICAgIGlmICghaW52YWxpZENvdW50KSB7CiAgICAgICAgICAgIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQpOwogICAgICAgICAgICBmb3JtLiR2YWxpZCA9IHRydWU7CiAgICAgICAgICAgIGZvcm0uJGludmFsaWQgPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIGVycm9yc1t2YWxpZGF0aW9uVG9rZW5dID0gZmFsc2U7CiAgICAgICAgICB0b2dnbGVWYWxpZENzcyh0cnVlLCB2YWxpZGF0aW9uVG9rZW4pOwogICAgICAgICAgcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvblRva2VuLCB0cnVlLCBmb3JtKTsKICAgICAgICB9CiAgICAgIH0KCiAgICB9IGVsc2UgewogICAgICBpZiAoIWludmFsaWRDb3VudCkgewogICAgICAgIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQpOwogICAgICB9CiAgICAgIGlmIChxdWV1ZSkgewogICAgICAgIGlmIChpbmNsdWRlcyhxdWV1ZSwgY29udHJvbCkpIHJldHVybjsKICAgICAgfSBlbHNlIHsKICAgICAgICBlcnJvcnNbdmFsaWRhdGlvblRva2VuXSA9IHF1ZXVlID0gW107CiAgICAgICAgaW52YWxpZENvdW50Kys7CiAgICAgICAgdG9nZ2xlVmFsaWRDc3MoZmFsc2UsIHZhbGlkYXRpb25Ub2tlbik7CiAgICAgICAgcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvblRva2VuLCBmYWxzZSwgZm9ybSk7CiAgICAgIH0KICAgICAgcXVldWUucHVzaChjb250cm9sKTsKCiAgICAgIGZvcm0uJHZhbGlkID0gZmFsc2U7CiAgICAgIGZvcm0uJGludmFsaWQgPSB0cnVlOwogICAgfQogIH07CgogIGZvcm0uJHNldERpcnR5ID0gZnVuY3Rpb24oKSB7CiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKFBSSVNUSU5FX0NMQVNTKS5hZGRDbGFzcyhESVJUWV9DTEFTUyk7CiAgICBmb3JtLiRkaXJ0eSA9IHRydWU7CiAgICBmb3JtLiRwcmlzdGluZSA9IGZhbHNlOwogICAgcGFyZW50Rm9ybS4kc2V0RGlydHkoKTsKICB9OwoKfQoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0KICogQHJlc3RyaWN0IEVBQwogKgogKiBAZGVzY3JpcHRpb24KICogTmVzdGFibGUgYWxpYXMgb2Yge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGBmb3JtYH0gZGlyZWN0aXZlLiBIVE1MCiAqIGRvZXMgbm90IGFsbG93IG5lc3Rpbmcgb2YgZm9ybSBlbGVtZW50cy4gSXQgaXMgdXNlZnVsIHRvIG5lc3QgZm9ybXMsIGZvciBleGFtcGxlIGlmIHRoZSB2YWxpZGl0eSBvZiBhCiAqIHN1Yi1ncm91cCBvZiBjb250cm9scyBuZWVkcyB0byBiZSBkZXRlcm1pbmVkLgogKgogKiBAcGFyYW0ge3N0cmluZz19IG5nRm9ybXxuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvCiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuCiAqCiAqLwoKIC8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpmb3JtCiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEaXJlY3RpdmUgdGhhdCBpbnN0YW50aWF0ZXMKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyIEZvcm1Db250cm9sbGVyfS4KICoKICogSWYgYG5hbWVgIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgaXMgcHVibGlzaGVkIG9udG8gdGhlIGN1cnJlbnQgc2NvcGUgdW5kZXIKICogdGhpcyBuYW1lLgogKgogKiAjIEFsaWFzOiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nRm9ybSBgbmdGb3JtYH0KICoKICogSW4gYW5ndWxhciBmb3JtcyBjYW4gYmUgbmVzdGVkLiBUaGlzIG1lYW5zIHRoYXQgdGhlIG91dGVyIGZvcm0gaXMgdmFsaWQgd2hlbiBhbGwgb2YgdGhlIGNoaWxkCiAqIGZvcm1zIGFyZSB2YWxpZCBhcyB3ZWxsLiBIb3dldmVyIGJyb3dzZXJzIGRvIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGA8Zm9ybT5gIGVsZW1lbnRzLCBmb3IgdGhpcwogKiByZWFzb24gYW5ndWxhciBwcm92aWRlcyB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nRm9ybSBgbmdGb3JtYH0gYWxpYXMKICogd2hpY2ggYmVoYXZlcyBpZGVudGljYWwgdG8gYDxmb3JtPmAgYnV0IGFsbG93cyBmb3JtIG5lc3RpbmcuCiAqCiAqCiAqICMgQ1NTIGNsYXNzZXMKICogIC0gYG5nLXZhbGlkYCBJcyBzZXQgaWYgdGhlIGZvcm0gaXMgdmFsaWQuCiAqICAtIGBuZy1pbnZhbGlkYCBJcyBzZXQgaWYgdGhlIGZvcm0gaXMgaW52YWxpZC4KICogIC0gYG5nLXByaXN0aW5lYCBJcyBzZXQgaWYgdGhlIGZvcm0gaXMgcHJpc3RpbmUuCiAqICAtIGBuZy1kaXJ0eWAgSXMgc2V0IGlmIHRoZSBmb3JtIGlzIGRpcnR5LgogKgogKgogKiAjIFN1Ym1pdHRpbmcgYSBmb3JtIGFuZCBwcmV2ZW50aW5nIGRlZmF1bHQgYWN0aW9uCiAqCiAqIFNpbmNlIHRoZSByb2xlIG9mIGZvcm1zIGluIGNsaWVudC1zaWRlIEFuZ3VsYXIgYXBwbGljYXRpb25zIGlzIGRpZmZlcmVudCB0aGFuIGluIGNsYXNzaWNhbAogKiByb3VuZHRyaXAgYXBwcywgaXQgaXMgZGVzaXJhYmxlIGZvciB0aGUgYnJvd3NlciBub3QgdG8gdHJhbnNsYXRlIHRoZSBmb3JtIHN1Ym1pc3Npb24gaW50byBhIGZ1bGwKICogcGFnZSByZWxvYWQgdGhhdCBzZW5kcyB0aGUgZGF0YSB0byB0aGUgc2VydmVyLiBJbnN0ZWFkIHNvbWUgamF2YXNjcmlwdCBsb2dpYyBzaG91bGQgYmUgdHJpZ2dlcmVkCiAqIHRvIGhhbmRsZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGluIGFwcGxpY2F0aW9uIHNwZWNpZmljIHdheS4KICoKICogRm9yIHRoaXMgcmVhc29uLCBBbmd1bGFyIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiAoZm9ybSBzdWJtaXNzaW9uIHRvIHRoZSBzZXJ2ZXIpIHVubGVzcyB0aGUKICogYDxmb3JtPmAgZWxlbWVudCBoYXMgYW4gYGFjdGlvbmAgYXR0cmlidXRlIHNwZWNpZmllZC4KICoKICogWW91IGNhbiB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgdHdvIHdheXMgdG8gc3BlY2lmeSB3aGF0IGphdmFzY3JpcHQgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlbgogKiBhIGZvcm0gaXMgc3VibWl0dGVkOgogKgogKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9IGRpcmVjdGl2ZSBvbiB0aGUgZm9ybSBlbGVtZW50CiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9IGRpcmVjdGl2ZSBvbiB0aGUgZmlyc3QKICAqICBidXR0b24gb3IgaW5wdXQgZmllbGQgb2YgdHlwZSBzdWJtaXQgKGlucHV0W3R5cGU9c3VibWl0XSkKICoKICogVG8gcHJldmVudCBkb3VibGUgZXhlY3V0aW9uIG9mIHRoZSBoYW5kbGVyLCB1c2Ugb25seSBvbmUgb2YgbmdTdWJtaXQgb3IgbmdDbGljayBkaXJlY3RpdmVzLiBUaGlzCiAqIGlzIGJlY2F1c2Ugb2YgdGhlIGZvbGxvd2luZyBmb3JtIHN1Ym1pc3Npb24gcnVsZXMgY29taW5nIGZyb20gdGhlIGh0bWwgc3BlYzoKICoKICogLSBJZiBhIGZvcm0gaGFzIG9ubHkgb25lIGlucHV0IGZpZWxkIHRoZW4gaGl0dGluZyBlbnRlciBpbiB0aGlzIGZpZWxkIHRyaWdnZXJzIGZvcm0gc3VibWl0CiAqIChgbmdTdWJtaXRgKQogKiAtIGlmIGEgZm9ybSBoYXMgaGFzIDIrIGlucHV0IGZpZWxkcyBhbmQgbm8gYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlbiBoaXR0aW5nIGVudGVyCiAqIGRvZXNuJ3QgdHJpZ2dlciBzdWJtaXQKICogLSBpZiBhIGZvcm0gaGFzIG9uZSBvciBtb3JlIGlucHV0IGZpZWxkcyBhbmQgb25lIG9yIG1vcmUgYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlbgogKiBoaXR0aW5nIGVudGVyIGluIGFueSBvZiB0aGUgaW5wdXQgZmllbGRzIHdpbGwgdHJpZ2dlciB0aGUgY2xpY2sgaGFuZGxlciBvbiB0aGUgKmZpcnN0KiBidXR0b24gb3IKICogaW5wdXRbdHlwZT1zdWJtaXRdIChgbmdDbGlja2ApICphbmQqIGEgc3VibWl0IGhhbmRsZXIgb24gdGhlIGVuY2xvc2luZyBmb3JtIChgbmdTdWJtaXRgKQogKgogKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgTmFtZSBvZiB0aGUgZm9ybS4gSWYgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIHdpbGwgYmUgcHVibGlzaGVkIGludG8KICogICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWQgc2NvcGUsIHVuZGVyIHRoaXMgbmFtZS4KICoKICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICRzY29wZS51c2VyVHlwZSA9ICdndWVzdCc7CiAgICAgICAgIH0KICAgICAgIDwvc2NyaXB0PgogICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgdXNlclR5cGU6IDxpbnB1dCBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InVzZXJUeXBlIiByZXF1aXJlZD4KICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLlJFUVVJUkVEIj5SZXF1aXJlZCE8L3NwYW4+PGJyPgogICAgICAgICA8dHQ+dXNlclR5cGUgPSB7e3VzZXJUeXBlfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IuUkVRVUlSRUQgPSB7eyEhbXlGb3JtLiRlcnJvci5SRVFVSVJFRH19PC90dD48YnI+CiAgICAgICAgPC9mb3JtPgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyVHlwZScpKS50b0VxdWFsKCdndWVzdCcpOwogICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICBpbnB1dCgndXNlclR5cGUnKS5lbnRlcignJyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyVHlwZScpKS50b0VxdWFsKCcnKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIGZvcm1EaXJlY3RpdmVGYWN0b3J5ID0gZnVuY3Rpb24oaXNOZ0Zvcm0pIHsKICByZXR1cm4gWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KSB7CiAgICB2YXIgZm9ybURpcmVjdGl2ZSA9IHsKICAgICAgbmFtZTogJ2Zvcm0nLAogICAgICByZXN0cmljdDogJ0UnLAogICAgICBjb250cm9sbGVyOiBGb3JtQ29udHJvbGxlciwKICAgICAgY29tcGlsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHByZTogZnVuY3Rpb24oc2NvcGUsIGZvcm1FbGVtZW50LCBhdHRyLCBjb250cm9sbGVyKSB7CiAgICAgICAgICAgIGlmICghYXR0ci5hY3Rpb24pIHsKICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1c2UganEgZXZlbnRzIGJlY2F1c2UgaWYgYSBmb3JtIGlzIGRlc3Ryb3llZCBkdXJpbmcgc3VibWlzc2lvbiB0aGUgZGVmYXVsdAogICAgICAgICAgICAgIC8vIGFjdGlvbiBpcyBub3QgcHJldmVudGVkLiBzZWUgIzEyMzgKICAgICAgICAgICAgICAvLwogICAgICAgICAgICAgIC8vIElFIDkgaXMgbm90IGFmZmVjdGVkIGJlY2F1c2UgaXQgZG9lc24ndCBmaXJlIGEgc3VibWl0IGV2ZW50IGFuZCB0cnkgdG8gZG8gYSBmdWxsCiAgICAgICAgICAgICAgLy8gcGFnZSByZWxvYWQgaWYgdGhlIGZvcm0gd2FzIGRlc3Ryb3llZCBieSBzdWJtaXNzaW9uIG9mIHRoZSBmb3JtIHZpYSBhIGNsaWNrIGhhbmRsZXIKICAgICAgICAgICAgICAvLyBvbiBhIGJ1dHRvbiBpbiB0aGUgZm9ybS4gTG9va3MgbGlrZSBhbiBJRTkgc3BlY2lmaWMgYnVnLgogICAgICAgICAgICAgIHZhciBwcmV2ZW50RGVmYXVsdExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0CiAgICAgICAgICAgICAgICAgID8gZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICA6IGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7IC8vIElFCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgcHJldmVudERlZmF1bHRMaXN0ZW5lcik7CgogICAgICAgICAgICAgIC8vIHVucmVnaXN0ZXIgdGhlIHByZXZlbnREZWZhdWx0IGxpc3RlbmVyIHNvIHRoYXQgd2UgZG9uJ3Qgbm90IGxlYWsgbWVtb3J5IGJ1dCBpbiBhCiAgICAgICAgICAgICAgLy8gd2F5IHRoYXQgd2lsbCBhY2hpZXZlIHRoZSBwcmV2ZW50aW9uIG9mIHRoZSBkZWZhdWx0IGFjdGlvbi4KICAgICAgICAgICAgICBmb3JtRWxlbWVudC5iaW5kKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihmb3JtRWxlbWVudFswXSwgJ3N1Ym1pdCcsIHByZXZlbnREZWZhdWx0TGlzdGVuZXIpOwogICAgICAgICAgICAgICAgfSwgMCwgZmFsc2UpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcGFyZW50Rm9ybUN0cmwgPSBmb3JtRWxlbWVudC5wYXJlbnQoKS5jb250cm9sbGVyKCdmb3JtJyksCiAgICAgICAgICAgICAgICBhbGlhcyA9IGF0dHIubmFtZSB8fCBhdHRyLm5nRm9ybTsKCiAgICAgICAgICAgIGlmIChhbGlhcykgewogICAgICAgICAgICAgIHNjb3BlW2FsaWFzXSA9IGNvbnRyb2xsZXI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHBhcmVudEZvcm1DdHJsKSB7CiAgICAgICAgICAgICAgZm9ybUVsZW1lbnQuYmluZCgnJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHBhcmVudEZvcm1DdHJsLiRyZW1vdmVDb250cm9sKGNvbnRyb2xsZXIpOwogICAgICAgICAgICAgICAgaWYgKGFsaWFzKSB7CiAgICAgICAgICAgICAgICAgIHNjb3BlW2FsaWFzXSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGV4dGVuZChjb250cm9sbGVyLCBudWxsRm9ybUN0cmwpOyAvL3N0b3AgcHJvcGFnYXRpbmcgY2hpbGQgZGVzdHJ1Y3Rpb24gaGFuZGxlcnMgdXB3YXJkcwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gaXNOZ0Zvcm0gPyBleHRlbmQoY29weShmb3JtRGlyZWN0aXZlKSwge3Jlc3RyaWN0OiAnRUFDJ30pIDogZm9ybURpcmVjdGl2ZTsKICB9XTsKfTsKCnZhciBmb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkoKTsKdmFyIG5nRm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KHRydWUpOwoKdmFyIFVSTF9SRUdFWFAgPSAvXihmdHB8aHR0cHxodHRwcyk6XC9cLyhcdys6ezAsMX1cdypAKT8oXFMrKSg6WzAtOV0rKT8oXC98XC8oW1x3IyE6Lj8rPSYlQCFcLVwvXSkpPyQvOwp2YXIgRU1BSUxfUkVHRVhQID0gL15bQS1aYS16MC05Ll8lKy1dK0BbQS1aYS16MC05Li1dK1wuW0EtWmEtel17Miw0fSQvOwp2YXIgTlVNQkVSX1JFR0VYUCA9IC9eXHMqKFwtfFwrKT8oXGQrfChcZCooXC5cZCopKSlccyokLzsKCnZhciBpbnB1dFR5cGUgPSB7CgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dFR5cGUKICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6aW5wdXQudGV4dAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8KICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuCiAgICogICAgbWlubGVuZ3RoLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICAgKiAgICBtYXhsZW5ndGguCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZQogICAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICAgKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlcgogICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICoKICAgKiBAZXhhbXBsZQogICAgICA8ZG9jOmV4YW1wbGU+CiAgICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ2d1ZXN0JzsKICAgICAgICAgICAgICRzY29wZS53b3JkID0gL15cdyokLzsKICAgICAgICAgICB9CiAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICAgIFNpbmdsZSB3b3JkOiA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iaW5wdXQiIG5nLW1vZGVsPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmctcGF0dGVybj0id29yZCIgcmVxdWlyZWQ+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucGF0dGVybiI+CiAgICAgICAgICAgICBTaW5nbGUgd29yZCBvbmx5ITwvc3Bhbj4KCiAgICAgICAgICAgPHR0PnRleHQgPSB7e3RleHR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kb2M6c291cmNlPgogICAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgnZ3Vlc3QnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJycpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygndGV4dCcpKS50b0VxdWFsKCcnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBtdWx0aSB3b3JkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJ2hlbGxvIHdvcmxkJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2RvYzpzY2VuYXJpbz4KICAgICAgPC9kb2M6ZXhhbXBsZT4KICAgKi8KICAndGV4dCc6IHRleHRJbnB1dFR5cGUsCgoKICAvKioKICAgKiBAbmdkb2MgaW5wdXRUeXBlCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmlucHV0Lm51bWJlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGV4dCBpbnB1dCB3aXRoIG51bWJlciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gU2V0cyB0aGUgYG51bWJlcmAgdmFsaWRhdGlvbgogICAqIGVycm9yIGlmIG5vdCBhIHZhbGlkIG51bWJlci4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGVuIGBtaW5gLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhlbiBgbWluYC4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogICAqICAgIG1pbmxlbmd0aC4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuCiAgICogICAgbWF4bGVuZ3RoLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yCiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGRvYzpleGFtcGxlPgogICAgICAgIDxkb2M6c291cmNlPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSAxMjsKICAgICAgICAgICB9CiAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICAgIE51bWJlcjogPGlucHV0IHR5cGU9Im51bWJlciIgbmFtZT0iaW5wdXQiIG5nLW1vZGVsPSJ2YWx1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBtaW49IjAiIG1heD0iOTkiIHJlcXVpcmVkPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmxpc3QuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5saXN0LiRlcnJvci5udW1iZXIiPgogICAgICAgICAgICAgTm90IHZhbGlkIG51bWJlciE8L3NwYW4+CiAgICAgICAgICAgPHR0PnZhbHVlID0ge3t2YWx1ZX19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2RvYzpzb3VyY2U+CiAgICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZScpKS50b0VxdWFsKCcxMicpOwogICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgIGlucHV0KCd2YWx1ZScpLmVudGVyKCcnKTsKICAgICAgICAgICBleHBlY3QoYmluZGluZygndmFsdWUnKSkudG9FcXVhbCgnJyk7CiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgIGlucHV0KCd2YWx1ZScpLmVudGVyKCcxMjMnKTsKICAgICAgICAgICBleHBlY3QoYmluZGluZygndmFsdWUnKSkudG9FcXVhbCgnJyk7CiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgICA8L2RvYzpleGFtcGxlPgogICAqLwogICdudW1iZXInOiBudW1iZXJJbnB1dFR5cGUsCgoKICAvKioKICAgKiBAbmdkb2MgaW5wdXRUeXBlCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmlucHV0LnVybAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGV4dCBpbnB1dCB3aXRoIFVSTCB2YWxpZGF0aW9uLiBTZXRzIHRoZSBgdXJsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgY29udGVudCBpcyBub3QgYQogICAqIHZhbGlkIFVSTC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mCiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuCiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW4KICAgKiAgICBtaW5sZW5ndGguCiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhbgogICAqICAgIG1heGxlbmd0aC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlCiAgICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvcgogICAqICAgIHBhdHRlcm5zIGRlZmluZWQgYXMgc2NvcGUgZXhwcmVzc2lvbnMuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgKgogICAqIEBleGFtcGxlCiAgICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnaHR0cDovL2dvb2dsZS5jb20nOwogICAgICAgICAgIH0KICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICAgVVJMOiA8aW5wdXQgdHlwZT0idXJsIiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InRleHQiIHJlcXVpcmVkPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnVybCI+CiAgICAgICAgICAgICBOb3QgdmFsaWQgdXJsITwvc3Bhbj4KICAgICAgICAgICA8dHQ+dGV4dCA9IHt7dGV4dH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci51cmwgPSB7eyEhbXlGb3JtLiRlcnJvci51cmx9fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2RvYzpzb3VyY2U+CiAgICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBleHBlY3QoYmluZGluZygndGV4dCcpKS50b0VxdWFsKCdodHRwOi8vZ29vZ2xlLmNvbScpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQoJ3RleHQnKS5lbnRlcignJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0ZXh0JykpLnRvRXF1YWwoJycpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCB1cmwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQoJ3RleHQnKS5lbnRlcigneHh4Jyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2RvYzpzY2VuYXJpbz4KICAgICAgPC9kb2M6ZXhhbXBsZT4KICAgKi8KICAndXJsJzogdXJsSW5wdXRUeXBlLAoKCiAgLyoqCiAgICogQG5nZG9jIGlucHV0VHlwZQogICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTppbnB1dC5lbWFpbAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGV4dCBpbnB1dCB3aXRoIGVtYWlsIHZhbGlkYXRpb24uIFNldHMgdGhlIGBlbWFpbGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgbm90IGEgdmFsaWQgZW1haWwKICAgKiBhZGRyZXNzLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogICAqICAgIG1pbmxlbmd0aC4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuCiAgICogICAgbWF4bGVuZ3RoLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yCiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICAgKgogICAqIEBleGFtcGxlCiAgICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnbWVAZXhhbXBsZS5jb20nOwogICAgICAgICAgIH0KICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgICAgIEVtYWlsOiA8aW5wdXQgdHlwZT0iZW1haWwiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idGV4dCIgcmVxdWlyZWQ+CiAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWQiPgogICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IuZW1haWwiPgogICAgICAgICAgICAgICBOb3QgdmFsaWQgZW1haWwhPC9zcGFuPgogICAgICAgICAgICAgPHR0PnRleHQgPSB7e3RleHR9fTwvdHQ+PGJyLz4KICAgICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLmVtYWlsID0ge3shIW15Rm9ybS4kZXJyb3IuZW1haWx9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kb2M6c291cmNlPgogICAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgnbWVAZXhhbXBsZS5jb20nKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJycpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygndGV4dCcpKS50b0VxdWFsKCcnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBub3QgZW1haWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQoJ3RleHQnKS5lbnRlcigneHh4Jyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2RvYzpzY2VuYXJpbz4KICAgICAgPC9kb2M6ZXhhbXBsZT4KICAgKi8KICAnZW1haWwnOiBlbWFpbElucHV0VHlwZSwKCgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dFR5cGUKICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6aW5wdXQucmFkaW8KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIEhUTUwgcmFkaW8gYnV0dG9uLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGRvYzpleGFtcGxlPgogICAgICAgIDxkb2M6c291cmNlPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgICAkc2NvcGUuY29sb3IgPSAnYmx1ZSc7CiAgICAgICAgICAgfQogICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5nLW1vZGVsPSJjb2xvciIgdmFsdWU9InJlZCI+ICBSZWQgPGJyLz4KICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5nLW1vZGVsPSJjb2xvciIgdmFsdWU9ImdyZWVuIj4gR3JlZW4gPGJyLz4KICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5nLW1vZGVsPSJjb2xvciIgdmFsdWU9ImJsdWUiPiBCbHVlIDxici8+CiAgICAgICAgICAgPHR0PmNvbG9yID0ge3tjb2xvcn19PC90dD48YnIvPgogICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2NvbG9yJykpLnRvRXF1YWwoJ2JsdWUnKTsKCiAgICAgICAgICAgIGlucHV0KCdjb2xvcicpLnNlbGVjdCgncmVkJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdjb2xvcicpKS50b0VxdWFsKCdyZWQnKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgICA8L2RvYzpleGFtcGxlPgogICAqLwogICdyYWRpbyc6IHJhZGlvSW5wdXRUeXBlLAoKCiAgLyoqCiAgICogQG5nZG9jIGlucHV0VHlwZQogICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTppbnB1dC5jaGVja2JveAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogSFRNTCBjaGVja2JveC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1RydWVWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdGYWxzZVZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gbm90IHNlbGVjdGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlcgogICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICoKICAgKiBAZXhhbXBsZQogICAgICA8ZG9jOmV4YW1wbGU+CiAgICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS52YWx1ZTEgPSB0cnVlOwogICAgICAgICAgICAgJHNjb3BlLnZhbHVlMiA9ICdZRVMnCiAgICAgICAgICAgfQogICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgICBWYWx1ZTE6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9InZhbHVlMSI+IDxici8+CiAgICAgICAgICAgVmFsdWUyOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJ2YWx1ZTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmctdHJ1ZS12YWx1ZT0iWUVTIiBuZy1mYWxzZS12YWx1ZT0iTk8iPiA8YnIvPgogICAgICAgICAgIDx0dD52YWx1ZTEgPSB7e3ZhbHVlMX19PC90dD48YnIvPgogICAgICAgICAgIDx0dD52YWx1ZTIgPSB7e3ZhbHVlMn19PC90dD48YnIvPgogICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ZhbHVlMScpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZTInKSkudG9FcXVhbCgnWUVTJyk7CgogICAgICAgICAgICBpbnB1dCgndmFsdWUxJykuY2hlY2soKTsKICAgICAgICAgICAgaW5wdXQoJ3ZhbHVlMicpLmNoZWNrKCk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZTEnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ZhbHVlMicpKS50b0VxdWFsKCdOTycpOwogICAgICAgICAgfSk7CiAgICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICAgIDwvZG9jOmV4YW1wbGU+CiAgICovCiAgJ2NoZWNrYm94JzogY2hlY2tib3hJbnB1dFR5cGUsCgogICdoaWRkZW4nOiBub29wLAogICdidXR0b24nOiBub29wLAogICdzdWJtaXQnOiBub29wLAogICdyZXNldCc6IG5vb3AKfTsKCgpmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7CiAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlOwp9CgoKZnVuY3Rpb24gdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7CgogIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHZhbHVlID0gdHJpbShlbGVtZW50LnZhbCgpKTsKCiAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2YWx1ZSkgewogICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTsKICAgICAgfSk7CiAgICB9CiAgfTsKCiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0ICJpbnB1dCIgZXZlbnQsIHdlIGFyZSBmaW5lIC0gZXhjZXB0IG9uIElFOSB3aGljaCBkb2Vzbid0IGZpcmUgdGhlCiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0CiAgaWYgKCRzbmlmZmVyLmhhc0V2ZW50KCdpbnB1dCcpKSB7CiAgICBlbGVtZW50LmJpbmQoJ2lucHV0JywgbGlzdGVuZXIpOwogIH0gZWxzZSB7CiAgICB2YXIgdGltZW91dDsKCiAgICBlbGVtZW50LmJpbmQoJ2tleWRvd24nLCBmdW5jdGlvbihldmVudCkgewogICAgICB2YXIga2V5ID0gZXZlbnQua2V5Q29kZTsKCiAgICAgIC8vIGlnbm9yZQogICAgICAvLyAgICBjb21tYW5kICAgICAgICAgICAgbW9kaWZpZXJzICAgICAgICAgICAgICAgICAgIGFycm93cwogICAgICBpZiAoa2V5ID09PSA5MSB8fCAoMTUgPCBrZXkgJiYga2V5IDwgMTkpIHx8ICgzNyA8PSBrZXkgJiYga2V5IDw9IDQwKSkgcmV0dXJuOwoKICAgICAgaWYgKCF0aW1lb3V0KSB7CiAgICAgICAgdGltZW91dCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgbGlzdGVuZXIoKTsKICAgICAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKCiAgICAvLyBpZiB1c2VyIHBhc3RlIGludG8gaW5wdXQgdXNpbmcgbW91c2UsIHdlIG5lZWQgImNoYW5nZSIgZXZlbnQgdG8gY2F0Y2ggaXQKICAgIGVsZW1lbnQuYmluZCgnY2hhbmdlJywgbGlzdGVuZXIpOwogIH0KCgogIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgZWxlbWVudC52YWwoaXNFbXB0eShjdHJsLiR2aWV3VmFsdWUpID8gJycgOiBjdHJsLiR2aWV3VmFsdWUpOwogIH07CgogIC8vIHBhdHRlcm4gdmFsaWRhdG9yCiAgdmFyIHBhdHRlcm4gPSBhdHRyLm5nUGF0dGVybiwKICAgICAgcGF0dGVyblZhbGlkYXRvcjsKCiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24ocmVnZXhwLCB2YWx1ZSkgewogICAgaWYgKGlzRW1wdHkodmFsdWUpIHx8IHJlZ2V4cC50ZXN0KHZhbHVlKSkgewogICAgICBjdHJsLiRzZXRWYWxpZGl0eSgncGF0dGVybicsIHRydWUpOwogICAgICByZXR1cm4gdmFsdWU7CiAgICB9IGVsc2UgewogICAgICBjdHJsLiRzZXRWYWxpZGl0eSgncGF0dGVybicsIGZhbHNlKTsKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9OwoKICBpZiAocGF0dGVybikgewogICAgaWYgKHBhdHRlcm4ubWF0Y2goL15cLyguKilcLyQvKSkgewogICAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cChwYXR0ZXJuLnN1YnN0cigxLCBwYXR0ZXJuLmxlbmd0aCAtIDIpKTsKICAgICAgcGF0dGVyblZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHBhdHRlcm4sIHZhbHVlKQogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgcGF0dGVyblZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgdmFyIHBhdHRlcm5PYmogPSBzY29wZS4kZXZhbChwYXR0ZXJuKTsKCiAgICAgICAgaWYgKCFwYXR0ZXJuT2JqIHx8ICFwYXR0ZXJuT2JqLnRlc3QpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgJyArIHBhdHRlcm4gKyAnIHRvIGJlIGEgUmVnRXhwIGJ1dCB3YXMgJyArIHBhdHRlcm5PYmopOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsaWRhdGUocGF0dGVybk9iaiwgdmFsdWUpOwogICAgICB9OwogICAgfQoKICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChwYXR0ZXJuVmFsaWRhdG9yKTsKICAgIGN0cmwuJHBhcnNlcnMucHVzaChwYXR0ZXJuVmFsaWRhdG9yKTsKICB9CgogIC8vIG1pbiBsZW5ndGggdmFsaWRhdG9yCiAgaWYgKGF0dHIubmdNaW5sZW5ndGgpIHsKICAgIHZhciBtaW5sZW5ndGggPSBpbnQoYXR0ci5uZ01pbmxlbmd0aCk7CiAgICB2YXIgbWluTGVuZ3RoVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgaWYgKCFpc0VtcHR5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPCBtaW5sZW5ndGgpIHsKICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbWlubGVuZ3RoJywgZmFsc2UpOwogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21pbmxlbmd0aCcsIHRydWUpOwogICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgfQogICAgfTsKCiAgICBjdHJsLiRwYXJzZXJzLnB1c2gobWluTGVuZ3RoVmFsaWRhdG9yKTsKICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChtaW5MZW5ndGhWYWxpZGF0b3IpOwogIH0KCiAgLy8gbWF4IGxlbmd0aCB2YWxpZGF0b3IKICBpZiAoYXR0ci5uZ01heGxlbmd0aCkgewogICAgdmFyIG1heGxlbmd0aCA9IGludChhdHRyLm5nTWF4bGVuZ3RoKTsKICAgIHZhciBtYXhMZW5ndGhWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICBpZiAoIWlzRW1wdHkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA+IG1heGxlbmd0aCkgewogICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdtYXhsZW5ndGgnLCBmYWxzZSk7CiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgfSBlbHNlIHsKICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbWF4bGVuZ3RoJywgdHJ1ZSk7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9CiAgICB9OwoKICAgIGN0cmwuJHBhcnNlcnMucHVzaChtYXhMZW5ndGhWYWxpZGF0b3IpOwogICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKG1heExlbmd0aFZhbGlkYXRvcik7CiAgfQp9CgpmdW5jdGlvbiBudW1iZXJJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlcikgewogIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7CgogIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgdmFyIGVtcHR5ID0gaXNFbXB0eSh2YWx1ZSk7CiAgICBpZiAoZW1wdHkgfHwgTlVNQkVSX1JFR0VYUC50ZXN0KHZhbHVlKSkgewogICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbnVtYmVyJywgdHJ1ZSk7CiAgICAgIHJldHVybiB2YWx1ZSA9PT0gJycgPyBudWxsIDogKGVtcHR5ID8gdmFsdWUgOiBwYXJzZUZsb2F0KHZhbHVlKSk7CiAgICB9IGVsc2UgewogICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbnVtYmVyJywgZmFsc2UpOwogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogIH0pOwoKICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiBpc0VtcHR5KHZhbHVlKSA/ICcnIDogJycgKyB2YWx1ZTsKICB9KTsKCiAgaWYgKGF0dHIubWluKSB7CiAgICB2YXIgbWluID0gcGFyc2VGbG9hdChhdHRyLm1pbik7CiAgICB2YXIgbWluVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgaWYgKCFpc0VtcHR5KHZhbHVlKSAmJiB2YWx1ZSA8IG1pbikgewogICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdtaW4nLCBmYWxzZSk7CiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgfSBlbHNlIHsKICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbWluJywgdHJ1ZSk7CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9CiAgICB9OwoKICAgIGN0cmwuJHBhcnNlcnMucHVzaChtaW5WYWxpZGF0b3IpOwogICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKG1pblZhbGlkYXRvcik7CiAgfQoKICBpZiAoYXR0ci5tYXgpIHsKICAgIHZhciBtYXggPSBwYXJzZUZsb2F0KGF0dHIubWF4KTsKICAgIHZhciBtYXhWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICBpZiAoIWlzRW1wdHkodmFsdWUpICYmIHZhbHVlID4gbWF4KSB7CiAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21heCcsIGZhbHNlKTsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9IGVsc2UgewogICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdtYXgnLCB0cnVlKTsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0KICAgIH07CgogICAgY3RybC4kcGFyc2Vycy5wdXNoKG1heFZhbGlkYXRvcik7CiAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2gobWF4VmFsaWRhdG9yKTsKICB9CgogIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkgewoKICAgIGlmIChpc0VtcHR5KHZhbHVlKSB8fCBpc051bWJlcih2YWx1ZSkpIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ251bWJlcicsIHRydWUpOwogICAgICByZXR1cm4gdmFsdWU7CiAgICB9IGVsc2UgewogICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbnVtYmVyJywgZmFsc2UpOwogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogIH0pOwp9CgpmdW5jdGlvbiB1cmxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlcikgewogIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7CgogIHZhciB1cmxWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKGlzRW1wdHkodmFsdWUpIHx8IFVSTF9SRUdFWFAudGVzdCh2YWx1ZSkpIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ3VybCcsIHRydWUpOwogICAgICByZXR1cm4gdmFsdWU7CiAgICB9IGVsc2UgewogICAgICBjdHJsLiRzZXRWYWxpZGl0eSgndXJsJywgZmFsc2UpOwogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogIH07CgogIGN0cmwuJGZvcm1hdHRlcnMucHVzaCh1cmxWYWxpZGF0b3IpOwogIGN0cmwuJHBhcnNlcnMucHVzaCh1cmxWYWxpZGF0b3IpOwp9CgpmdW5jdGlvbiBlbWFpbElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7CiAgdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTsKCiAgdmFyIGVtYWlsVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIGlmIChpc0VtcHR5KHZhbHVlKSB8fCBFTUFJTF9SRUdFWFAudGVzdCh2YWx1ZSkpIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ2VtYWlsJywgdHJ1ZSk7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0gZWxzZSB7CiAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdlbWFpbCcsIGZhbHNlKTsKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9OwoKICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZW1haWxWYWxpZGF0b3IpOwogIGN0cmwuJHBhcnNlcnMucHVzaChlbWFpbFZhbGlkYXRvcik7Cn0KCmZ1bmN0aW9uIHJhZGlvSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7CiAgLy8gbWFrZSB0aGUgbmFtZSB1bmlxdWUsIGlmIG5vdCBkZWZpbmVkCiAgaWYgKGlzVW5kZWZpbmVkKGF0dHIubmFtZSkpIHsKICAgIGVsZW1lbnQuYXR0cignbmFtZScsIG5leHRVaWQoKSk7CiAgfQoKICBlbGVtZW50LmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICBpZiAoZWxlbWVudFswXS5jaGVja2VkKSB7CiAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoYXR0ci52YWx1ZSk7CiAgICAgIH0pOwogICAgfQogIH0pOwoKICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgIHZhciB2YWx1ZSA9IGF0dHIudmFsdWU7CiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSAodmFsdWUgPT0gY3RybC4kdmlld1ZhbHVlKTsKICB9OwoKICBhdHRyLiRvYnNlcnZlKCd2YWx1ZScsIGN0cmwuJHJlbmRlcik7Cn0KCmZ1bmN0aW9uIGNoZWNrYm94SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7CiAgdmFyIHRydWVWYWx1ZSA9IGF0dHIubmdUcnVlVmFsdWUsCiAgICAgIGZhbHNlVmFsdWUgPSBhdHRyLm5nRmFsc2VWYWx1ZTsKCiAgaWYgKCFpc1N0cmluZyh0cnVlVmFsdWUpKSB0cnVlVmFsdWUgPSB0cnVlOwogIGlmICghaXNTdHJpbmcoZmFsc2VWYWx1ZSkpIGZhbHNlVmFsdWUgPSBmYWxzZTsKCiAgZWxlbWVudC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudFswXS5jaGVja2VkKTsKICAgIH0pOwogIH0pOwoKICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgIGVsZW1lbnRbMF0uY2hlY2tlZCA9IGN0cmwuJHZpZXdWYWx1ZTsKICB9OwoKICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZVZhbHVlOwogIH0pOwoKICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZSA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7CiAgfSk7Cn0KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6dGV4dGFyZWEKICogQHJlc3RyaWN0IEUKICoKICogQGRlc2NyaXB0aW9uCiAqIEhUTUwgdGV4dGFyZWEgZWxlbWVudCBjb250cm9sIHdpdGggYW5ndWxhciBkYXRhLWJpbmRpbmcuIFRoZSBkYXRhLWJpbmRpbmcgYW5kIHZhbGlkYXRpb24KICogcHJvcGVydGllcyBvZiB0aGlzIGVsZW1lbnQgYXJlIGV4YWN0bHkgdGhlIHNhbWUgYXMgdGhvc2Ugb2YgdGhlCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXQgZWxlbWVudH0uCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW4KICogICAgbWlubGVuZ3RoLgogKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuCiAqICAgIG1heGxlbmd0aC4KICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZQogKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yCiAqICAgIHBhdHRlcm5zIGRlZmluZWQgYXMgc2NvcGUgZXhwcmVzc2lvbnMuCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlcgogKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6aW5wdXQKICogQHJlc3RyaWN0IEUKICoKICogQGRlc2NyaXB0aW9uCiAqIEhUTUwgaW5wdXQgZWxlbWVudCBjb250cm9sIHdpdGggYW5ndWxhciBkYXRhLWJpbmRpbmcuIElucHV0IGNvbnRyb2wgZm9sbG93cyBIVE1MNSBpbnB1dCB0eXBlcwogKiBhbmQgcG9seWZpbGxzIHRoZSBIVE1MNSB2YWxpZGF0aW9uIGJlaGF2aW9yIGZvciBvbGRlciBicm93c2Vycy4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICogQHBhcmFtIHtib29sZWFuPX0gbmdSZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGlmIHNldCB0byB0cnVlCiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuCiAqICAgIG1pbmxlbmd0aC4KICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhbgogKiAgICBtYXhsZW5ndGguCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvcgogKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLgogKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICoKICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICRzY29wZS51c2VyID0ge25hbWU6ICdndWVzdCcsIGxhc3Q6ICd2aXNpdG9yJ307CiAgICAgICAgIH0KICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIj4KICAgICAgICAgICBVc2VyIG5hbWU6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VyTmFtZSIgbmctbW9kZWw9InVzZXIubmFtZSIgcmVxdWlyZWQ+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0udXNlck5hbWUuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj48YnI+CiAgICAgICAgICAgTGFzdCBuYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ibGFzdE5hbWUiIG5nLW1vZGVsPSJ1c2VyLmxhc3QiCiAgICAgICAgICAgICBuZy1taW5sZW5ndGg9IjMiIG5nLW1heGxlbmd0aD0iMTAiPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5taW5sZW5ndGgiPgogICAgICAgICAgICAgVG9vIHNob3J0ITwvc3Bhbj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWF4bGVuZ3RoIj4KICAgICAgICAgICAgIFRvbyBsb25nITwvc3Bhbj48YnI+CiAgICAgICAgIDwvZm9ybT4KICAgICAgICAgPGhyPgogICAgICAgICA8dHQ+dXNlciA9IHt7dXNlcn19PC90dD48YnIvPgogICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiR2YWxpZCA9IHt7bXlGb3JtLnVzZXJOYW1lLiR2YWxpZH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0udXNlck5hbWUuJGVycm9yID0ge3tteUZvcm0udXNlck5hbWUuJGVycm9yfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS5sYXN0TmFtZS4kdmFsaWQgPSB7e215Rm9ybS5sYXN0TmFtZS4kdmFsaWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiRlcnJvciA9IHt7bXlGb3JtLmxhc3ROYW1lLiRlcnJvcn19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1pbmxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1pbmxlbmd0aH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1heGxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1heGxlbmd0aH19PC90dD48YnI+CiAgICAgICA8L2Rpdj4KICAgICAgPC9kb2M6c291cmNlPgogICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3VzZXInKSkudG9FcXVhbCgneyJuYW1lIjoiZ3Vlc3QiLCJsYXN0IjoidmlzaXRvciJ9Jyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLnVzZXJOYW1lLiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eSB3aGVuIHJlcXVpcmVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBpbnB1dCgndXNlci5uYW1lJykuZW50ZXIoJycpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3VzZXInKSkudG9FcXVhbCgneyJsYXN0IjoidmlzaXRvciJ9Jyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLnVzZXJOYW1lLiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSB2YWxpZCBpZiBlbXB0eSB3aGVuIG1pbiBsZW5ndGggaXMgc2V0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBpbnB1dCgndXNlci5sYXN0JykuZW50ZXIoJycpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3VzZXInKSkudG9FcXVhbCgneyJuYW1lIjoiZ3Vlc3QiLCJsYXN0IjoiIn0nKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGxlc3MgdGhhbiByZXF1aXJlZCBtaW4gbGVuZ3RoJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBpbnB1dCgndXNlci5sYXN0JykuZW50ZXIoJ3h4Jyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygndXNlcicpKS50b0VxdWFsKCd7Im5hbWUiOiJndWVzdCJ9Jyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kZXJyb3InKSkudG9NYXRjaCgvbWlubGVuZ3RoLyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbG9uZ2VyIHRoYW4gbWF4IGxlbmd0aCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ3VzZXIubGFzdCcpLmVudGVyKCdzb21lIHJpZGljdWxvdXNseSBsb25nIG5hbWUnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyJykpCiAgICAgICAgICAgIC50b0VxdWFsKCd7Im5hbWUiOiJndWVzdCJ9Jyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kZXJyb3InKSkudG9NYXRjaCgvbWF4bGVuZ3RoLyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgIH0pOwogICAgICA8L2RvYzpzY2VuYXJpbz4KICAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgaW5wdXREaXJlY3RpdmUgPSBbJyRicm93c2VyJywgJyRzbmlmZmVyJywgZnVuY3Rpb24oJGJyb3dzZXIsICRzbmlmZmVyKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRScsCiAgICByZXF1aXJlOiAnP25nTW9kZWwnLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHsKICAgICAgaWYgKGN0cmwpIHsKICAgICAgICAoaW5wdXRUeXBlW2xvd2VyY2FzZShhdHRyLnR5cGUpXSB8fCBpbnB1dFR5cGUudGV4dCkoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYnJvd3Nlcik7CiAgICAgIH0KICAgIH0KICB9Owp9XTsKCnZhciBWQUxJRF9DTEFTUyA9ICduZy12YWxpZCcsCiAgICBJTlZBTElEX0NMQVNTID0gJ25nLWludmFsaWQnLAogICAgUFJJU1RJTkVfQ0xBU1MgPSAnbmctcHJpc3RpbmUnLAogICAgRElSVFlfQ0xBU1MgPSAnbmctZGlydHknOwoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIKICoKICogQHByb3BlcnR5IHtzdHJpbmd9ICR2aWV3VmFsdWUgQWN0dWFsIHN0cmluZyB2YWx1ZSBpbiB0aGUgdmlldy4KICogQHByb3BlcnR5IHsqfSAkbW9kZWxWYWx1ZSBUaGUgdmFsdWUgaW4gdGhlIG1vZGVsLCB0aGF0IHRoZSBjb250cm9sIGlzIGJvdW5kIHRvLgogKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRwYXJzZXJzIFdoZW5ldmVyIHRoZSBjb250cm9sIHJlYWRzIHZhbHVlIGZyb20gdGhlIERPTSwgaXQgZXhlY3V0ZXMKICogICAgIGFsbCBvZiB0aGVzZSBmdW5jdGlvbnMgdG8gc2FuaXRpemUgLyBjb252ZXJ0IHRoZSB2YWx1ZSBhcyB3ZWxsIGFzIHZhbGlkYXRlLgogKgogKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRmb3JtYXR0ZXJzIFdoZW5ldmVyIHRoZSBtb2RlbCB2YWx1ZSBjaGFuZ2VzLCBpdCBleGVjdXRlcyBhbGwgb2YKICogICAgIHRoZXNlIGZ1bmN0aW9ucyB0byBjb252ZXJ0IHRoZSB2YWx1ZSBhcyB3ZWxsIGFzIHZhbGlkYXRlLgogKgogKiBAcHJvcGVydHkge09iamVjdH0gJGVycm9yIEFuIGJqZWN0IGhhc2ggd2l0aCBhbGwgZXJyb3JzIGFzIGtleXMuCiAqCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbCB5ZXQuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGNvbnRyb2wuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgdGhlcmUgaXMgbm8gZXJyb3IuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgZXJyb3Igb24gdGhlIGNvbnRyb2wuCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBgTmdNb2RlbENvbnRyb2xsZXJgIHByb3ZpZGVzIEFQSSBmb3IgdGhlIGBuZy1tb2RlbGAgZGlyZWN0aXZlLiBUaGUgY29udHJvbGxlciBjb250YWlucwogKiBzZXJ2aWNlcyBmb3IgZGF0YS1iaW5kaW5nLCB2YWxpZGF0aW9uLCBDU1MgdXBkYXRlLCB2YWx1ZSBmb3JtYXR0aW5nIGFuZCBwYXJzaW5nLiBJdAogKiBzcGVjaWZpY2FsbHkgZG9lcyBub3QgY29udGFpbiBhbnkgbG9naWMgd2hpY2ggZGVhbHMgd2l0aCBET00gcmVuZGVyaW5nIG9yIGxpc3RlbmluZyB0bwogKiBET00gZXZlbnRzLiBUaGUgYE5nTW9kZWxDb250cm9sbGVyYCBpcyBtZWFudCB0byBiZSBleHRlbmRlZCBieSBvdGhlciBkaXJlY3RpdmVzIHdoZXJlLCB0aGUKICogZGlyZWN0aXZlIHByb3ZpZGVzIERPTSBtYW5pcHVsYXRpb24gYW5kIHRoZSBgTmdNb2RlbENvbnRyb2xsZXJgIHByb3ZpZGVzIHRoZSBkYXRhLWJpbmRpbmcuCiAqCiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBOZ01vZGVsQ29udHJvbGxlcmAgd2l0aCBhIGN1c3RvbSBjb250cm9sIHRvIGFjaGlldmUKICogZGF0YS1iaW5kaW5nLiBOb3RpY2UgaG93IGRpZmZlcmVudCBkaXJlY3RpdmVzIChgY29udGVudGVkaXRhYmxlYCwgYG5nLW1vZGVsYCwgYW5kIGByZXF1aXJlZGApCiAqIGNvbGxhYm9yYXRlIHRvZ2V0aGVyIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgcmVzdWx0LgogKgogKiA8ZXhhbXBsZSBtb2R1bGU9ImN1c3RvbUNvbnRyb2wiPgogICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgW2NvbnRlbnRlZGl0YWJsZV0gewogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogICAgICAgIG1pbi1oZWlnaHQ6IDIwcHg7CiAgICAgIH0KCiAgICAgIC5uZy1pbnZhbGlkIHsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7CiAgICAgIH0KCiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tQ29udHJvbCcsIFtdKS4KICAgICAgICBkaXJlY3RpdmUoJ2NvbnRlbnRlZGl0YWJsZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJywgLy8gb25seSBhY3RpdmF0ZSBvbiBlbGVtZW50IGF0dHJpYnV0ZQogICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnLCAvLyBnZXQgYSBob2xkIG9mIE5nTW9kZWxDb250cm9sbGVyCiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkgewogICAgICAgICAgICAgIGlmKCFuZ01vZGVsKSByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWwKCiAgICAgICAgICAgICAgLy8gU3BlY2lmeSBob3cgVUkgc2hvdWxkIGJlIHVwZGF0ZWQKICAgICAgICAgICAgICBuZ01vZGVsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbChuZ01vZGVsLiR2aWV3VmFsdWUgfHwgJycpOwogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2hhbmdlIGV2ZW50cyB0byBlbmFibGUgYmluZGluZwogICAgICAgICAgICAgIGVsZW1lbnQuYmluZCgnYmx1ciBrZXl1cCBjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShyZWFkKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICByZWFkKCk7IC8vIGluaXRpYWxpemUKCiAgICAgICAgICAgICAgLy8gV3JpdGUgZGF0YSB0byB0aGUgbW9kZWwKICAgICAgICAgICAgICBmdW5jdGlvbiByZWFkKCkgewogICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnQuaHRtbCgpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIj4KICAgICAgIDxkaXYgY29udGVudGVkaXRhYmxlCiAgICAgICAgICAgIG5hbWU9Im15V2lkZ2V0IiBuZy1tb2RlbD0idXNlckNvbnRlbnQiCiAgICAgICAgICAgIHJlcXVpcmVkPkNoYW5nZSBtZSE8L2Rpdj4KICAgICAgICA8c3BhbiBuZy1zaG93PSJteUZvcm0ubXlXaWRnZXQuJGVycm9yLnJlcXVpcmVkIj5SZXF1aXJlZCE8L3NwYW4+CiAgICAgICA8aHI+CiAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9InVzZXJDb250ZW50Ij48L3RleHRhcmVhPgogICAgICA8L2Zvcm0+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJzY2VuYXJpby5qcyI+CiAgICAgIGl0KCdzaG91bGQgZGF0YS1iaW5kIGFuZCBiZWNvbWUgaW52YWxpZCcsIGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBjb250ZW50RWRpdGFibGUgPSBlbGVtZW50KCdbY29udGVudGVkaXRhYmxlXScpOwoKICAgICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLnRleHQoKSkudG9FcXVhbCgnQ2hhbmdlIG1lIScpOwogICAgICAgIGlucHV0KCd1c2VyQ29udGVudCcpLmVudGVyKCcnKTsKICAgICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLnRleHQoKSkudG9FcXVhbCgnJyk7CiAgICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5wcm9wKCdjbGFzc05hbWUnKSkudG9NYXRjaCgvbmctaW52YWxpZC1yZXF1aXJlZC8pOwogICAgICB9KTsKICAgIDwvZmlsZT4KICogPC9leGFtcGxlPgogKgogKi8KdmFyIE5nTW9kZWxDb250cm9sbGVyID0gWyckc2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRwYXJzZScsCiAgICBmdW5jdGlvbigkc2NvcGUsICRleGNlcHRpb25IYW5kbGVyLCAkYXR0ciwgJGVsZW1lbnQsICRwYXJzZSkgewogIHRoaXMuJHZpZXdWYWx1ZSA9IE51bWJlci5OYU47CiAgdGhpcy4kbW9kZWxWYWx1ZSA9IE51bWJlci5OYU47CiAgdGhpcy4kcGFyc2VycyA9IFtdOwogIHRoaXMuJGZvcm1hdHRlcnMgPSBbXTsKICB0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzID0gW107CiAgdGhpcy4kcHJpc3RpbmUgPSB0cnVlOwogIHRoaXMuJGRpcnR5ID0gZmFsc2U7CiAgdGhpcy4kdmFsaWQgPSB0cnVlOwogIHRoaXMuJGludmFsaWQgPSBmYWxzZTsKICB0aGlzLiRuYW1lID0gJGF0dHIubmFtZTsKCiAgdmFyIG5nTW9kZWxHZXQgPSAkcGFyc2UoJGF0dHIubmdNb2RlbCksCiAgICAgIG5nTW9kZWxTZXQgPSBuZ01vZGVsR2V0LmFzc2lnbjsKCiAgaWYgKCFuZ01vZGVsU2V0KSB7CiAgICB0aHJvdyBFcnJvcihOT05fQVNTSUdOQUJMRV9NT0RFTF9FWFBSRVNTSU9OICsgJGF0dHIubmdNb2RlbCArCiAgICAgICAgJyAoJyArIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSArICcpJyk7CiAgfQoKICAvKioKICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcmVuZGVyCiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDYWxsZWQgd2hlbiB0aGUgdmlldyBuZWVkcyB0byBiZSB1cGRhdGVkLiBJdCBpcyBleHBlY3RlZCB0aGF0IHRoZSB1c2VyIG9mIHRoZSBuZy1tb2RlbAogICAqIGRpcmVjdGl2ZSB3aWxsIGltcGxlbWVudCB0aGlzIG1ldGhvZC4KICAgKi8KICB0aGlzLiRyZW5kZXIgPSBub29wOwoKICB2YXIgcGFyZW50Rm9ybSA9ICRlbGVtZW50LmluaGVyaXRlZERhdGEoJyRmb3JtQ29udHJvbGxlcicpIHx8IG51bGxGb3JtQ3RybCwKICAgICAgaW52YWxpZENvdW50ID0gMCwgLy8gdXNlZCB0byBlYXNpbHkgZGV0ZXJtaW5lIGlmIHdlIGFyZSB2YWxpZAogICAgICAkZXJyb3IgPSB0aGlzLiRlcnJvciA9IHt9OyAvLyBrZWVwIGludmFsaWQga2V5cyBoZXJlCgoKICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sCiAgJGVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpOwogIHRvZ2dsZVZhbGlkQ3NzKHRydWUpOwoKICAvLyBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGVhc3kgdG9nZ2xpbmcgb2YgY2xhc3NlcwogIGZ1bmN0aW9uIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQsIHZhbGlkYXRpb25FcnJvcktleSkgewogICAgdmFsaWRhdGlvbkVycm9yS2V5ID0gdmFsaWRhdGlvbkVycm9yS2V5ID8gJy0nICsgc25ha2VfY2FzZSh2YWxpZGF0aW9uRXJyb3JLZXksICctJykgOiAnJzsKICAgICRlbGVtZW50LgogICAgICByZW1vdmVDbGFzcygoaXNWYWxpZCA/IElOVkFMSURfQ0xBU1MgOiBWQUxJRF9DTEFTUykgKyB2YWxpZGF0aW9uRXJyb3JLZXkpLgogICAgICBhZGRDbGFzcygoaXNWYWxpZCA/IFZBTElEX0NMQVNTIDogSU5WQUxJRF9DTEFTUykgKyB2YWxpZGF0aW9uRXJyb3JLZXkpOwogIH0KCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZhbGlkaXR5CiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDaGFuZ2UgdGhlIHZhbGlkaXR5IHN0YXRlLCBhbmQgbm90aWZpZXMgdGhlIGZvcm0gd2hlbiB0aGUgY29udHJvbCBjaGFuZ2VzIHZhbGlkaXR5LiAoaS5lLiBpdAogICAqIGRvZXMgbm90IG5vdGlmeSBmb3JtIGlmIGdpdmVuIHZhbGlkYXRvciBpcyBhbHJlYWR5IG1hcmtlZCBhcyBpbnZhbGlkKS4KICAgKgogICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgYnkgdmFsaWRhdG9ycyAtIGkuZS4gdGhlIHBhcnNlciBvciBmb3JtYXR0ZXIgZnVuY3Rpb25zLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIHRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGFzc2lnbgogICAqICAgICAgICB0byBgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV09aXNWYWxpZGAgc28gdGhhdCBpdCBpcyBhdmFpbGFibGUgZm9yIGRhdGEtYmluZGluZy4KICAgKiAgICAgICAgVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHNob3VsZCBiZSBpbiBjYW1lbENhc2UgYW5kIHdpbGwgZ2V0IGNvbnZlcnRlZCBpbnRvIGRhc2gtY2FzZQogICAqICAgICAgICBmb3IgY2xhc3MgbmFtZS4gRXhhbXBsZTogYG15RXJyb3JgIHdpbGwgcmVzdWx0IGluIGBuZy12YWxpZC1teS1lcnJvcmAgYW5kIGBuZy1pbnZhbGlkLW15LWVycm9yYAogICAqICAgICAgICBjbGFzcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzICBge3tzb21lRm9ybS5zb21lQ29udHJvbC4kZXJyb3IubXlFcnJvcn19YCAuCiAgICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpIG9yIGludmFsaWQgKGZhbHNlKS4KICAgKi8KICB0aGlzLiRzZXRWYWxpZGl0eSA9IGZ1bmN0aW9uKHZhbGlkYXRpb25FcnJvcktleSwgaXNWYWxpZCkgewogICAgaWYgKCRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldID09PSAhaXNWYWxpZCkgcmV0dXJuOwoKICAgIGlmIChpc1ZhbGlkKSB7CiAgICAgIGlmICgkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkgaW52YWxpZENvdW50LS07CiAgICAgIGlmICghaW52YWxpZENvdW50KSB7CiAgICAgICAgdG9nZ2xlVmFsaWRDc3ModHJ1ZSk7CiAgICAgICAgdGhpcy4kdmFsaWQgPSB0cnVlOwogICAgICAgIHRoaXMuJGludmFsaWQgPSBmYWxzZTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdG9nZ2xlVmFsaWRDc3MoZmFsc2UpOwogICAgICB0aGlzLiRpbnZhbGlkID0gdHJ1ZTsKICAgICAgdGhpcy4kdmFsaWQgPSBmYWxzZTsKICAgICAgaW52YWxpZENvdW50Kys7CiAgICB9CgogICAgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV0gPSAhaXNWYWxpZDsKICAgIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQsIHZhbGlkYXRpb25FcnJvcktleSk7CgogICAgcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkLCB0aGlzKTsKICB9OwoKCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZQogICAqIEBtZXRob2RPZiBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmVhZCBhIHZhbHVlIGZyb20gdmlldy4KICAgKgogICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgZnJvbSB3aXRoaW4gYSBET00gZXZlbnQgaGFuZGxlci4KICAgKiBGb3IgZXhhbXBsZSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fSBvcgogICAqIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH0gZGlyZWN0aXZlcyBjYWxsIGl0LgogICAqCiAgICogSXQgaW50ZXJuYWxseSBjYWxscyBhbGwgYGZvcm1hdHRlcnNgIGFuZCBpZiByZXN1bHRlZCB2YWx1ZSBpcyB2YWxpZCwgdXBkYXRlcyB0aGUgbW9kZWwgYW5kCiAgICogY2FsbHMgYWxsIHJlZ2lzdGVyZWQgY2hhbmdlIGxpc3RlbmVycy4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBWYWx1ZSBmcm9tIHRoZSB2aWV3LgogICAqLwogIHRoaXMuJHNldFZpZXdWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICB0aGlzLiR2aWV3VmFsdWUgPSB2YWx1ZTsKCiAgICAvLyBjaGFuZ2UgdG8gZGlydHkKICAgIGlmICh0aGlzLiRwcmlzdGluZSkgewogICAgICB0aGlzLiRkaXJ0eSA9IHRydWU7CiAgICAgIHRoaXMuJHByaXN0aW5lID0gZmFsc2U7CiAgICAgICRlbGVtZW50LnJlbW92ZUNsYXNzKFBSSVNUSU5FX0NMQVNTKS5hZGRDbGFzcyhESVJUWV9DTEFTUyk7CiAgICAgIHBhcmVudEZvcm0uJHNldERpcnR5KCk7CiAgICB9CgogICAgZm9yRWFjaCh0aGlzLiRwYXJzZXJzLCBmdW5jdGlvbihmbikgewogICAgICB2YWx1ZSA9IGZuKHZhbHVlKTsKICAgIH0pOwoKICAgIGlmICh0aGlzLiRtb2RlbFZhbHVlICE9PSB2YWx1ZSkgewogICAgICB0aGlzLiRtb2RlbFZhbHVlID0gdmFsdWU7CiAgICAgIG5nTW9kZWxTZXQoJHNjb3BlLCB2YWx1ZSk7CiAgICAgIGZvckVhY2godGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHsKICAgICAgICB0cnkgewogICAgICAgICAgbGlzdGVuZXIoKTsKICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgIH0KICAgICAgfSkKICAgIH0KICB9OwoKICAvLyBtb2RlbCAtPiB2YWx1ZQogIHZhciBjdHJsID0gdGhpczsKCiAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiBuZ01vZGVsV2F0Y2goKSB7CiAgICB2YXIgdmFsdWUgPSBuZ01vZGVsR2V0KCRzY29wZSk7CgogICAgLy8gaWYgc2NvcGUgbW9kZWwgdmFsdWUgYW5kIG5nTW9kZWwgdmFsdWUgYXJlIG91dCBvZiBzeW5jCiAgICBpZiAoY3RybC4kbW9kZWxWYWx1ZSAhPT0gdmFsdWUpIHsKCiAgICAgIHZhciBmb3JtYXR0ZXJzID0gY3RybC4kZm9ybWF0dGVycywKICAgICAgICAgIGlkeCA9IGZvcm1hdHRlcnMubGVuZ3RoOwoKICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IHZhbHVlOwogICAgICB3aGlsZShpZHgtLSkgewogICAgICAgIHZhbHVlID0gZm9ybWF0dGVyc1tpZHhdKHZhbHVlKTsKICAgICAgfQoKICAgICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmFsdWUpIHsKICAgICAgICBjdHJsLiR2aWV3VmFsdWUgPSB2YWx1ZTsKICAgICAgICBjdHJsLiRyZW5kZXIoKTsKICAgICAgfQogICAgfQogIH0pOwp9XTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb2RlbAogKgogKiBAZWxlbWVudCBpbnB1dAogKgogKiBAZGVzY3JpcHRpb24KICogSXMgZGlyZWN0aXZlIHRoYXQgdGVsbHMgQW5ndWxhciB0byBkbyB0d28td2F5IGRhdGEgYmluZGluZy4gSXQgd29ya3MgdG9nZXRoZXIgd2l0aCBgaW5wdXRgLAogKiBgc2VsZWN0YCwgYHRleHRhcmVhYC4gWW91IGNhbiBlYXNpbHkgd3JpdGUgeW91ciBvd24gZGlyZWN0aXZlcyB0byB1c2UgYG5nTW9kZWxgIGFzIHdlbGwuCiAqCiAqIGBuZ01vZGVsYCBpcyByZXNwb25zaWJsZSBmb3I6CiAqCiAqIC0gYmluZGluZyB0aGUgdmlldyBpbnRvIHRoZSBtb2RlbCwgd2hpY2ggb3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBpbnB1dGAsIGB0ZXh0YXJlYWAgb3IgYHNlbGVjdGAKICogICByZXF1aXJlLAogKiAtIHByb3ZpZGluZyB2YWxpZGF0aW9uIGJlaGF2aW9yIChpLmUuIHJlcXVpcmVkLCBudW1iZXIsIGVtYWlsLCB1cmwpLAogKiAtIGtlZXBpbmcgc3RhdGUgb2YgdGhlIGNvbnRyb2wgKHZhbGlkL2ludmFsaWQsIGRpcnR5L3ByaXN0aW5lLCB2YWxpZGF0aW9uIGVycm9ycyksCiAqIC0gc2V0dGluZyByZWxhdGVkIGNzcyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50IChgbmctdmFsaWRgLCBgbmctaW52YWxpZGAsIGBuZy1kaXJ0eWAsIGBuZy1wcmlzdGluZWApLAogKiAtIHJlZ2lzdGVyIHRoZSBjb250cm9sIHdpdGggcGFyZW50IHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBmb3JtfS4KICoKICogRm9yIGJhc2ljIGV4YW1wbGVzLCBob3cgdG8gdXNlIGBuZ01vZGVsYCwgc2VlOgogKgogKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fQogKiAgICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQudGV4dCB0ZXh0fQogKiAgICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQuY2hlY2tib3ggY2hlY2tib3h9CiAqICAgIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dC5yYWRpbyByYWRpb30KICogICAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0Lm51bWJlciBudW1iZXJ9CiAqICAgIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dC5lbWFpbCBlbWFpbH0KICogICAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0LnVybCB1cmx9CiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH0KICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTp0ZXh0YXJlYSB0ZXh0YXJlYX0KICoKICovCnZhciBuZ01vZGVsRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHsKICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICdeP2Zvcm0nXSwKICAgIGNvbnRyb2xsZXI6IE5nTW9kZWxDb250cm9sbGVyLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7CiAgICAgIC8vIG5vdGlmeSBvdGhlcnMsIGVzcGVjaWFsbHkgcGFyZW50IGZvcm1zCgogICAgICB2YXIgbW9kZWxDdHJsID0gY3RybHNbMF0sCiAgICAgICAgICBmb3JtQ3RybCA9IGN0cmxzWzFdIHx8IG51bGxGb3JtQ3RybDsKCiAgICAgIGZvcm1DdHJsLiRhZGRDb250cm9sKG1vZGVsQ3RybCk7CgogICAgICBlbGVtZW50LmJpbmQoJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgZm9ybUN0cmwuJHJlbW92ZUNvbnRyb2wobW9kZWxDdHJsKTsKICAgICAgfSk7CiAgICB9CiAgfTsKfTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDaGFuZ2UKICogQHJlc3RyaWN0IEUKICoKICogQGRlc2NyaXB0aW9uCiAqIEV2YWx1YXRlIGdpdmVuIGV4cHJlc3Npb24gd2hlbiB1c2VyIGNoYW5nZXMgdGhlIGlucHV0LgogKiBUaGUgZXhwcmVzc2lvbiBpcyBub3QgZXZhbHVhdGVkIHdoZW4gdGhlIHZhbHVlIGNoYW5nZSBpcyBjb21pbmcgZnJvbSB0aGUgbW9kZWwuCiAqCiAqIE5vdGUsIHRoaXMgZGlyZWN0aXZlIHJlcXVpcmVzIGBuZ01vZGVsYCB0byBiZSBwcmVzZW50LgogKgogKiBAZWxlbWVudCBpbnB1dAogKgogKiBAZXhhbXBsZQogKiA8ZG9jOmV4YW1wbGU+CiAqICAgPGRvYzpzb3VyY2U+CiAqICAgICA8c2NyaXB0PgogKiAgICAgICBmdW5jdGlvbiBDb250cm9sbGVyKCRzY29wZSkgewogKiAgICAgICAgICRzY29wZS5jb3VudGVyID0gMDsKICogICAgICAgICAkc2NvcGUuY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAqICAgICAgICAgICAkc2NvcGUuY291bnRlcisrOwogKiAgICAgICAgIH07CiAqICAgICAgIH0KICogICAgIDwvc2NyaXB0PgogKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDb250cm9sbGVyIj4KICogICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iY29uZmlybWVkIiBuZy1jaGFuZ2U9ImNoYW5nZSgpIiBpZD0ibmctY2hhbmdlLWV4YW1wbGUxIiAvPgogKiAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjb25maXJtZWQiIGlkPSJuZy1jaGFuZ2UtZXhhbXBsZTIiIC8+CiAqICAgICAgIDxsYWJlbCBmb3I9Im5nLWNoYW5nZS1leGFtcGxlMiI+Q29uZmlybWVkPC9sYWJlbD48YnIgLz4KICogICAgICAgZGVidWcgPSB7e2NvbmZpcm1lZH19PGJyIC8+CiAqICAgICAgIGNvdW50ZXIgPSB7e2NvdW50ZXJ9fQogKiAgICAgPC9kaXY+CiAqICAgPC9kb2M6c291cmNlPgogKiAgIDxkb2M6c2NlbmFyaW8+CiAqICAgICBpdCgnc2hvdWxkIGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gdmlldycsIGZ1bmN0aW9uKCkgewogKiAgICAgICBleHBlY3QoYmluZGluZygnY291bnRlcicpKS50b0VxdWFsKCcwJyk7CiAqICAgICAgIGVsZW1lbnQoJyNuZy1jaGFuZ2UtZXhhbXBsZTEnKS5jbGljaygpOwogKiAgICAgICBleHBlY3QoYmluZGluZygnY291bnRlcicpKS50b0VxdWFsKCcxJyk7CiAqICAgICAgIGV4cGVjdChiaW5kaW5nKCdjb25maXJtZWQnKSkudG9FcXVhbCgndHJ1ZScpOwogKiAgICAgfSk7CiAqCiAqICAgICBpdCgnc2hvdWxkIG5vdCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAqICAgICAgIGVsZW1lbnQoJyNuZy1jaGFuZ2UtZXhhbXBsZTInKS5jbGljaygpOwogKiAgICAgICBleHBlY3QoYmluZGluZygnY291bnRlcicpKS50b0VxdWFsKCcwJyk7CiAqICAgICAgIGV4cGVjdChiaW5kaW5nKCdjb25maXJtZWQnKSkudG9FcXVhbCgndHJ1ZScpOwogKiAgICAgfSk7CiAqICAgPC9kb2M6c2NlbmFyaW8+CiAqIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdDaGFuZ2VEaXJlY3RpdmUgPSB2YWx1ZUZuKHsKICByZXF1aXJlOiAnbmdNb2RlbCcsCiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHsKICAgIGN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbigpIHsKICAgICAgc2NvcGUuJGV2YWwoYXR0ci5uZ0NoYW5nZSk7CiAgICB9KTsKICB9Cn0pOwoKCnZhciByZXF1aXJlZERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXF1aXJlOiAnP25nTW9kZWwnLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkgewogICAgICBpZiAoIWN0cmwpIHJldHVybjsKICAgICAgYXR0ci5yZXF1aXJlZCA9IHRydWU7IC8vIGZvcmNlIHRydXRoeSBpbiBjYXNlIHdlIGFyZSBvbiBub24gaW5wdXQgZWxlbWVudAoKICAgICAgdmFyIHZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKGF0dHIucmVxdWlyZWQgJiYgKGlzRW1wdHkodmFsdWUpIHx8IHZhbHVlID09PSBmYWxzZSkpIHsKICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdyZXF1aXJlZCcsIGZhbHNlKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ3JlcXVpcmVkJywgdHJ1ZSk7CiAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgfQogICAgICB9OwoKICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKHZhbGlkYXRvcik7CiAgICAgIGN0cmwuJHBhcnNlcnMudW5zaGlmdCh2YWxpZGF0b3IpOwoKICAgICAgYXR0ci4kb2JzZXJ2ZSgncmVxdWlyZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICB2YWxpZGF0b3IoY3RybC4kdmlld1ZhbHVlKTsKICAgICAgfSk7CiAgICB9CiAgfTsKfTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdMaXN0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUZXh0IGlucHV0IHRoYXQgY29udmVydHMgYmV0d2VlbiBjb21tYS1zZXBhcmF0ZWQgc3RyaW5nIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5ncy4KICoKICogQGVsZW1lbnQgaW5wdXQKICogQHBhcmFtIHtzdHJpbmc9fSBuZ0xpc3Qgb3B0aW9uYWwgZGVsaW1pdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gc3BsaXQgdGhlIHZhbHVlLiBJZgogKiAgIHNwZWNpZmllZCBpbiBmb3JtIGAvc29tZXRoaW5nL2AgdGhlbiB0aGUgdmFsdWUgd2lsbCBiZSBjb252ZXJ0ZWQgaW50byBhIHJlZ3VsYXIgZXhwcmVzc2lvbi4KICoKICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsnaWdvcicsICdtaXNrbycsICd2b2p0YSddOwogICAgICAgICB9CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgIExpc3Q6IDxpbnB1dCBuYW1lPSJuYW1lc0lucHV0IiBuZy1tb2RlbD0ibmFtZXMiIG5nLWxpc3QgcmVxdWlyZWQ+CiAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmxpc3QuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgIDx0dD5uYW1lcyA9IHt7bmFtZXN9fTwvdHQ+PGJyLz4KICAgICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5uYW1lc0lucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgICAgPC9mb3JtPgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbmFtZXMnKSkudG9FcXVhbCgnWyJpZ29yIiwibWlza28iLCJ2b2p0YSJdJyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBpbnB1dCgnbmFtZXMnKS5lbnRlcignJyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbmFtZXMnKSkudG9FcXVhbCgnW10nKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIG5nTGlzdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXF1aXJlOiAnbmdNb2RlbCcsCiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkgewogICAgICB2YXIgbWF0Y2ggPSAvXC8oLiopXC8vLmV4ZWMoYXR0ci5uZ0xpc3QpLAogICAgICAgICAgc2VwYXJhdG9yID0gbWF0Y2ggJiYgbmV3IFJlZ0V4cChtYXRjaFsxXSkgfHwgYXR0ci5uZ0xpc3QgfHwgJywnOwoKICAgICAgdmFyIHBhcnNlID0gZnVuY3Rpb24odmlld1ZhbHVlKSB7CiAgICAgICAgdmFyIGxpc3QgPSBbXTsKCiAgICAgICAgaWYgKHZpZXdWYWx1ZSkgewogICAgICAgICAgZm9yRWFjaCh2aWV3VmFsdWUuc3BsaXQoc2VwYXJhdG9yKSwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgaWYgKHZhbHVlKSBsaXN0LnB1c2godHJpbSh2YWx1ZSkpOwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbGlzdDsKICAgICAgfTsKCiAgICAgIGN0cmwuJHBhcnNlcnMucHVzaChwYXJzZSk7CiAgICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkgewogICAgICAgICAgcmV0dXJuIHZhbHVlLmpvaW4oJywgJyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9KTsKICAgIH0KICB9Owp9OwoKCnZhciBDT05TVEFOVF9WQUxVRV9SRUdFWFAgPSAvXih0cnVlfGZhbHNlfFxkKykkLzsKCnZhciBuZ1ZhbHVlRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHsKICAgIHByaW9yaXR5OiAxMDAsCiAgICBjb21waWxlOiBmdW5jdGlvbih0cGwsIHRwbEF0dHIpIHsKICAgICAgaWYgKENPTlNUQU5UX1ZBTFVFX1JFR0VYUC50ZXN0KHRwbEF0dHIubmdWYWx1ZSkpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0cikgewogICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHNjb3BlLiRldmFsKGF0dHIubmdWYWx1ZSkpOwogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIpIHsKICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nVmFsdWUsIGZ1bmN0aW9uIHZhbHVlV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHZhbHVlLCBmYWxzZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICB9CiAgICB9CiAgfTsKfTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0JpbmQKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdCaW5kYCBhdHRyaWJ1dGUgdGVsbHMgQW5ndWxhciB0byByZXBsYWNlIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHNwZWNpZmllZCBIVE1MIGVsZW1lbnQKICogd2l0aCB0aGUgdmFsdWUgb2YgYSBnaXZlbiBleHByZXNzaW9uLCBhbmQgdG8gdXBkYXRlIHRoZSB0ZXh0IGNvbnRlbnQgd2hlbiB0aGUgdmFsdWUgb2YgdGhhdAogKiBleHByZXNzaW9uIGNoYW5nZXMuCiAqCiAqIFR5cGljYWxseSwgeW91IGRvbid0IHVzZSBgbmdCaW5kYCBkaXJlY3RseSwgYnV0IGluc3RlYWQgeW91IHVzZSB0aGUgZG91YmxlIGN1cmx5IG1hcmt1cCBsaWtlCiAqIGB7eyBleHByZXNzaW9uIH19YCB3aGljaCBpcyBzaW1pbGFyIGJ1dCBsZXNzIHZlcmJvc2UuCiAqCiAqIE9uY2Ugc2NlbmFyaW8gaW4gd2hpY2ggdGhlIHVzZSBvZiBgbmdCaW5kYCBpcyBwcmVmZXJlZCBvdmVyIGB7eyBleHByZXNzaW9uIH19YCBiaW5kaW5nIGlzIHdoZW4KICogaXQncyBkZXNpcmFibGUgdG8gcHV0IGJpbmRpbmdzIGludG8gdGVtcGxhdGUgdGhhdCBpcyBtb21lbnRhcmlseSBkaXNwbGF5ZWQgYnkgdGhlIGJyb3dzZXIgaW4gaXRzCiAqIHJhdyBzdGF0ZSBiZWZvcmUgQW5ndWxhciBjb21waWxlcyBpdC4gU2luY2UgYG5nQmluZGAgaXMgYW4gZWxlbWVudCBhdHRyaWJ1dGUsIGl0IG1ha2VzIHRoZQogKiBiaW5kaW5ncyBpbnZpc2libGUgdG8gdGhlIHVzZXIgd2hpbGUgdGhlIHBhZ2UgaXMgbG9hZGluZy4KICoKICogQW4gYWx0ZXJuYXRpdmUgc29sdXRpb24gdG8gdGhpcyBwcm9ibGVtIHdvdWxkIGJlIHVzaW5nIHRoZQogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xvYWsgbmdDbG9ha30gZGlyZWN0aXZlLgogKgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JpbmQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuCiAqCiAqIEBleGFtcGxlCiAqIEVudGVyIGEgbmFtZSBpbiB0aGUgTGl2ZSBQcmV2aWV3IHRleHQgYm94OyB0aGUgZ3JlZXRpbmcgYmVsb3cgdGhlIHRleHQgYm94IGNoYW5nZXMgaW5zdGFudGx5LgogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICRzY29wZS5uYW1lID0gJ1doaXJsZWQnOwogICAgICAgICB9CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgIEVudGVyIG5hbWU6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0ibmFtZSI+PGJyPgogICAgICAgICBIZWxsbyA8c3BhbiBuZy1iaW5kPSJuYW1lIj48L3NwYW4+IQogICAgICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmJpbmRpbmcoJ25hbWUnKSkudG9CZSgnV2hpcmxlZCcpOwogICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgnbmFtZScpLmVudGVyKCd3b3JsZCcpOwogICAgICAgICBleHBlY3QodXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuYmluZGluZygnbmFtZScpKS50b0JlKCd3b3JsZCcpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdCaW5kRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICBlbGVtZW50LmFkZENsYXNzKCduZy1iaW5kaW5nJykuZGF0YSgnJGJpbmRpbmcnLCBhdHRyLm5nQmluZCk7CiAgc2NvcGUuJHdhdGNoKGF0dHIubmdCaW5kLCBmdW5jdGlvbiBuZ0JpbmRXYXRjaEFjdGlvbih2YWx1ZSkgewogICAgZWxlbWVudC50ZXh0KHZhbHVlID09IHVuZGVmaW5lZCA/ICcnIDogdmFsdWUpOwogIH0pOwp9KTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdCaW5kVGVtcGxhdGUKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdCaW5kVGVtcGxhdGVgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgdGhhdCB0aGUgZWxlbWVudAogKiB0ZXh0IHNob3VsZCBiZSByZXBsYWNlZCB3aXRoIHRoZSB0ZW1wbGF0ZSBpbiBuZ0JpbmRUZW1wbGF0ZS4KICogVW5saWtlIG5nQmluZCB0aGUgbmdCaW5kVGVtcGxhdGUgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYHt7YCBgfX1gCiAqIGV4cHJlc3Npb25zLiAoVGhpcyBpcyByZXF1aXJlZCBzaW5jZSBzb21lIEhUTUwgZWxlbWVudHMKICogY2FuIG5vdCBoYXZlIFNQQU4gZWxlbWVudHMgc3VjaCBhcyBUSVRMRSwgb3IgT1BUSU9OIHRvIG5hbWUgYSBmZXcuKQogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtzdHJpbmd9IG5nQmluZFRlbXBsYXRlIHRlbXBsYXRlIG9mIGZvcm0KICogICA8dHQ+e3s8L3R0PiA8dHQ+ZXhwcmVzc2lvbjwvdHQ+IDx0dD59fTwvdHQ+IHRvIGV2YWwuCiAqCiAqIEBleGFtcGxlCiAqIFRyeSBpdCBoZXJlOiBlbnRlciB0ZXh0IGluIHRleHQgYm94IGFuZCB3YXRjaCB0aGUgZ3JlZXRpbmcgY2hhbmdlLgogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICRzY29wZS5zYWx1dGF0aW9uID0gJ0hlbGxvJzsKICAgICAgICAgICAkc2NvcGUubmFtZSA9ICdXb3JsZCc7CiAgICAgICAgIH0KICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICBTYWx1dGF0aW9uOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InNhbHV0YXRpb24iPjxicj4KICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9Im5hbWUiPjxicj4KICAgICAgICA8cHJlIG5nLWJpbmQtdGVtcGxhdGU9Int7c2FsdXRhdGlvbn19IHt7bmFtZX19ISI+PC9wcmU+CiAgICAgICA8L2Rpdj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QodXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuYmluZGluZygnc2FsdXRhdGlvbicpKS4KICAgICAgICAgICB0b0JlKCdIZWxsbycpOwogICAgICAgICBleHBlY3QodXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuYmluZGluZygnbmFtZScpKS4KICAgICAgICAgICB0b0JlKCdXb3JsZCcpOwogICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgnc2FsdXRhdGlvbicpLmVudGVyKCdHcmVldGluZ3MnKTsKICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ25hbWUnKS5lbnRlcigndXNlcicpOwogICAgICAgICBleHBlY3QodXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuYmluZGluZygnc2FsdXRhdGlvbicpKS4KICAgICAgICAgICB0b0JlKCdHcmVldGluZ3MnKTsKICAgICAgICAgZXhwZWN0KHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmJpbmRpbmcoJ25hbWUnKSkuCiAgICAgICAgICAgdG9CZSgndXNlcicpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkgewogIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgLy8gVE9ETzogbW92ZSB0aGlzIHRvIHNjZW5hcmlvIHJ1bm5lcgogICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC5hdHRyKGF0dHIuJGF0dHIubmdCaW5kVGVtcGxhdGUpKTsKICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ25nLWJpbmRpbmcnKS5kYXRhKCckYmluZGluZycsIGludGVycG9sYXRlRm4pOwogICAgYXR0ci4kb2JzZXJ2ZSgnbmdCaW5kVGVtcGxhdGUnLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICBlbGVtZW50LnRleHQodmFsdWUpOwogICAgfSk7CiAgfQp9XTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbFVuc2FmZQogKgogKiBAZGVzY3JpcHRpb24KICogQ3JlYXRlcyBhIGJpbmRpbmcgdGhhdCB3aWxsIGlubmVySFRNTCB0aGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGBleHByZXNzaW9uYCBpbnRvIHRoZSBjdXJyZW50CiAqIGVsZW1lbnQuICpUaGUgaW5uZXJIVE1MLWVkIGNvbnRlbnQgd2lsbCBub3QgYmUgc2FuaXRpemVkISogWW91IHNob3VsZCB1c2UgdGhpcyBkaXJlY3RpdmUgb25seSBpZgogKiB7QGxpbmsgbmdTYW5pdGl6ZS5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSBkaXJlY3RpdmUgaXMgdG9vCiAqIHJlc3RyaWN0aXZlIGFuZCB3aGVuIHlvdSBhYnNvbHV0ZWx5IHRydXN0IHRoZSBzb3VyY2Ugb2YgdGhlIGNvbnRlbnQgeW91IGFyZSBiaW5kaW5nIHRvLgogKgogKiBTZWUge0BsaW5rIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gZG9jcyBmb3IgZXhhbXBsZXMuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZEh0bWxVbnNhZmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuCiAqLwp2YXIgbmdCaW5kSHRtbFVuc2FmZURpcmVjdGl2ZSA9IFtmdW5jdGlvbigpIHsKICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ25nLWJpbmRpbmcnKS5kYXRhKCckYmluZGluZycsIGF0dHIubmdCaW5kSHRtbFVuc2FmZSk7CiAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0JpbmRIdG1sVW5zYWZlLCBmdW5jdGlvbiBuZ0JpbmRIdG1sVW5zYWZlV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgZWxlbWVudC5odG1sKHZhbHVlIHx8ICcnKTsKICAgIH0pOwogIH07Cn1dOwoKZnVuY3Rpb24gY2xhc3NEaXJlY3RpdmUobmFtZSwgc2VsZWN0b3IpIHsKICBuYW1lID0gJ25nQ2xhc3MnICsgbmFtZTsKICByZXR1cm4gbmdEaXJlY3RpdmUoZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKCiAgICBzY29wZS4kd2F0Y2goYXR0cltuYW1lXSwgbmdDbGFzc1dhdGNoQWN0aW9uLCB0cnVlKTsKCiAgICBhdHRyLiRvYnNlcnZlKCdjbGFzcycsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHZhciBuZ0NsYXNzID0gc2NvcGUuJGV2YWwoYXR0cltuYW1lXSk7CiAgICAgIG5nQ2xhc3NXYXRjaEFjdGlvbihuZ0NsYXNzLCBuZ0NsYXNzKTsKICAgIH0pOwoKCiAgICBpZiAobmFtZSAhPT0gJ25nQ2xhc3MnKSB7CiAgICAgIHNjb3BlLiR3YXRjaCgnJGluZGV4JywgZnVuY3Rpb24oJGluZGV4LCBvbGQkaW5kZXgpIHsKICAgICAgICB2YXIgbW9kID0gJGluZGV4ICUgMjsKICAgICAgICBpZiAobW9kICE9PSBvbGQkaW5kZXggJSAyKSB7CiAgICAgICAgICBpZiAobW9kID09IHNlbGVjdG9yKSB7CiAgICAgICAgICAgIGFkZENsYXNzKHNjb3BlLiRldmFsKGF0dHJbbmFtZV0pKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNjb3BlLiRldmFsKGF0dHJbbmFtZV0pKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKCiAgICBmdW5jdGlvbiBuZ0NsYXNzV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHsKICAgICAgaWYgKHNlbGVjdG9yID09PSB0cnVlIHx8IHNjb3BlLiRpbmRleCAlIDIgPT09IHNlbGVjdG9yKSB7CiAgICAgICAgaWYgKG9sZFZhbCAmJiAobmV3VmFsICE9PSBvbGRWYWwpKSB7CiAgICAgICAgICByZW1vdmVDbGFzcyhvbGRWYWwpOwogICAgICAgIH0KICAgICAgICBhZGRDbGFzcyhuZXdWYWwpOwogICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGNsYXNzVmFsKSB7CiAgICAgIGlmIChpc09iamVjdChjbGFzc1ZhbCkgJiYgIWlzQXJyYXkoY2xhc3NWYWwpKSB7CiAgICAgICAgY2xhc3NWYWwgPSBtYXAoY2xhc3NWYWwsIGZ1bmN0aW9uKHYsIGspIHsgaWYgKHYpIHJldHVybiBrIH0pOwogICAgICB9CiAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoaXNBcnJheShjbGFzc1ZhbCkgPyBjbGFzc1ZhbC5qb2luKCcgJykgOiBjbGFzc1ZhbCk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFkZENsYXNzKGNsYXNzVmFsKSB7CiAgICAgIGlmIChpc09iamVjdChjbGFzc1ZhbCkgJiYgIWlzQXJyYXkoY2xhc3NWYWwpKSB7CiAgICAgICAgY2xhc3NWYWwgPSBtYXAoY2xhc3NWYWwsIGZ1bmN0aW9uKHYsIGspIHsgaWYgKHYpIHJldHVybiBrIH0pOwogICAgICB9CiAgICAgIGlmIChjbGFzc1ZhbCkgewogICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoaXNBcnJheShjbGFzc1ZhbCkgPyBjbGFzc1ZhbC5qb2luKCcgJykgOiBjbGFzc1ZhbCk7CiAgICAgIH0KICAgIH0KICB9KTsKfQoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ2xhc3MKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdDbGFzc2AgYWxsb3dzIHlvdSB0byBzZXQgQ1NTIGNsYXNzIG9uIEhUTUwgZWxlbWVudCBkeW5hbWljYWxseSBieSBkYXRhYmluZGluZyBhbgogKiBleHByZXNzaW9uIHRoYXQgcmVwcmVzZW50cyBhbGwgY2xhc3NlcyB0byBiZSBhZGRlZC4KICoKICogVGhlIGRpcmVjdGl2ZSB3b24ndCBhZGQgZHVwbGljYXRlIGNsYXNzZXMgaWYgYSBwYXJ0aWN1bGFyIGNsYXNzIHdhcyBhbHJlYWR5IHNldC4KICoKICogV2hlbiB0aGUgZXhwcmVzc2lvbiBjaGFuZ2VzLCB0aGUgcHJldmlvdXNseSBhZGRlZCBjbGFzc2VzIGFyZSByZW1vdmVkIGFuZCBvbmx5IHRoZW4gdGhlIGNsYXNzZXMKICogbmV3IGNsYXNzZXMgYXJlIGFkZGVkLgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHQKICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcwogKiAgIG5hbWVzLCBhbiBhcnJheSwgb3IgYSBtYXAgb2YgY2xhc3MgbmFtZXMgdG8gYm9vbGVhbiB2YWx1ZXMuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0ic2V0IiBuZy1jbGljaz0ibXlWYXI9J215LWNsYXNzJyI+CiAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJjbGVhciIgbmctY2xpY2s9Im15VmFyPScnIj4KICAgICAgPGJyPgogICAgICA8c3BhbiBuZy1jbGFzcz0ibXlWYXIiPlNhbXBsZSBUZXh0PC9zcGFuPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgLm15LWNsYXNzIHsKICAgICAgICAgY29sb3I6IHJlZDsKICAgICAgIH0KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic2NlbmFyaW8uanMiPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbicpLnByb3AoJ2NsYXNzTmFtZScpKS5ub3QoKS4KICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pOwoKICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuZWxlbWVudCgnOmJ1dHRvbjpmaXJzdCcpLmNsaWNrKCk7CgogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbicpLnByb3AoJ2NsYXNzTmFtZScpKS4KICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pOwoKICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuZWxlbWVudCgnOmJ1dHRvbjpsYXN0JykuY2xpY2soKTsKCiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLm5vdCgpLgogICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ0NsYXNzRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJycsIHRydWUpOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ2xhc3NPZGQKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdDbGFzc09kZGAgYW5kIGBuZ0NsYXNzRXZlbmAgZGlyZWN0aXZlcyB3b3JrIGV4YWN0bHkgYXMKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgaXQgd29ya3MgaW4KICogY29uanVuY3Rpb24gd2l0aCBgbmdSZXBlYXRgIGFuZCB0YWtlcyBhZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuCiAqCiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIGEgc2NvcGUgb2YgYW4KICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NPZGQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdAogKiAgIG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzIG5hbWVzIG9yIGFuIGFycmF5LgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICA8b2wgbmctaW5pdD0ibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXSI+CiAgICAgICAgICA8bGkgbmctcmVwZWF0PSJuYW1lIGluIG5hbWVzIj4KICAgICAgICAgICA8c3BhbiBuZy1jbGFzcy1vZGQ9IidvZGQnIiBuZy1jbGFzcy1ldmVuPSInZXZlbiciPgogICAgICAgICAgICAge3tuYW1lfX0KICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvb2w+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgICAgICAub2RkIHsKICAgICAgICAgY29sb3I6IHJlZDsKICAgICAgIH0KICAgICAgIC5ldmVuIHsKICAgICAgICAgY29sb3I6IGJsdWU7CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBsaTpmaXJzdCBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLgogICAgICAgICAgIHRvTWF0Y2goL29kZC8pOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6bGFzdCBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLgogICAgICAgICAgIHRvTWF0Y2goL2V2ZW4vKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KdmFyIG5nQ2xhc3NPZGREaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnT2RkJywgMCk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDbGFzc0V2ZW4KICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdDbGFzc09kZGAgYW5kIGBuZ0NsYXNzRXZlbmAgd29ya3MgZXhhY3RseSBhcwogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCBpdCB3b3JrcyBpbgogKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2VzIGFmZmVjdCBvbmx5IG9uIG9kZCAoZXZlbikgcm93cy4KICoKICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gYSBzY29wZSBvZiBhbgogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fS4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzc0V2ZW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlCiAqICAgcmVzdWx0IG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzIG5hbWVzIG9yIGFuIGFycmF5LgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICA8b2wgbmctaW5pdD0ibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXSI+CiAgICAgICAgICA8bGkgbmctcmVwZWF0PSJuYW1lIGluIG5hbWVzIj4KICAgICAgICAgICA8c3BhbiBuZy1jbGFzcy1vZGQ9IidvZGQnIiBuZy1jbGFzcy1ldmVuPSInZXZlbiciPgogICAgICAgICAgICAge3tuYW1lfX0gJm5ic3A7ICZuYnNwOyAmbmJzcDsKICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvb2w+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgICAgICAub2RkIHsKICAgICAgICAgY29sb3I6IHJlZDsKICAgICAgIH0KICAgICAgIC5ldmVuIHsKICAgICAgICAgY29sb3I6IGJsdWU7CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBsaTpmaXJzdCBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLgogICAgICAgICAgIHRvTWF0Y2goL29kZC8pOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6bGFzdCBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLgogICAgICAgICAgIHRvTWF0Y2goL2V2ZW4vKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KdmFyIG5nQ2xhc3NFdmVuRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ0V2ZW4nLCAxKTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0Nsb2FrCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIHByZXZlbnQgdGhlIEFuZ3VsYXIgaHRtbCB0ZW1wbGF0ZSBmcm9tIGJlaW5nIGJyaWVmbHkKICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgKHVuY29tcGlsZWQpIGZvcm0gd2hpbGUgeW91ciBhcHBsaWNhdGlvbiBpcyBsb2FkaW5nLiBVc2UgdGhpcwogKiBkaXJlY3RpdmUgdG8gYXZvaWQgdGhlIHVuZGVzaXJhYmxlIGZsaWNrZXIgZWZmZWN0IGNhdXNlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZSBkaXNwbGF5LgogKgogKiBUaGUgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIHRvIHRoZSBgPGJvZHk+YCBlbGVtZW50LCBidXQgdHlwaWNhbGx5IGEgZmluZS1ncmFpbmVkIGFwcGxpY2F0aW9uIGlzCiAqIHByZWZlcmVkIGluIG9yZGVyIHRvIGJlbmVmaXQgZnJvbSBwcm9ncmVzc2l2ZSByZW5kZXJpbmcgb2YgdGhlIGJyb3dzZXIgdmlldy4KICoKICogYG5nQ2xvYWtgIHdvcmtzIGluIGNvb3BlcmF0aW9uIHdpdGggYSBjc3MgcnVsZSB0aGF0IGlzIGVtYmVkZGVkIHdpdGhpbiBgYW5ndWxhci5qc2AgYW5kCiAqICBgYW5ndWxhci5taW4uanNgIGZpbGVzLiBGb2xsb3dpbmcgaXMgdGhlIGNzcyBydWxlOgogKgogKiA8cHJlPgogKiBbbmdcOmNsb2FrXSwgW25nLWNsb2FrXSwgLm5nLWNsb2FrIHsKICogICBkaXNwbGF5OiBub25lOwogKiB9CiAqIDwvcHJlPgogKgogKiBXaGVuIHRoaXMgY3NzIHJ1bGUgaXMgbG9hZGVkIGJ5IHRoZSBicm93c2VyLCBhbGwgaHRtbCBlbGVtZW50cyAoaW5jbHVkaW5nIHRoZWlyIGNoaWxkcmVuKSB0aGF0CiAqIGFyZSB0YWdnZWQgd2l0aCB0aGUgYG5nLWNsb2FrYCBkaXJlY3RpdmUgYXJlIGhpZGRlbi4gV2hlbiBBbmd1bGFyIGNvbWVzIGFjcm9zcyB0aGlzIGRpcmVjdGl2ZQogKiBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZSBpdCBkZWxldGVzIHRoZSBgbmdDbG9ha2AgZWxlbWVudCBhdHRyaWJ1dGUsIHdoaWNoCiAqIG1ha2VzIHRoZSBjb21waWxlZCBlbGVtZW50IHZpc2libGUuCiAqCiAqIEZvciB0aGUgYmVzdCByZXN1bHQsIGBhbmd1bGFyLmpzYCBzY3JpcHQgbXVzdCBiZSBsb2FkZWQgaW4gdGhlIGhlYWQgc2VjdGlvbiBvZiB0aGUgaHRtbCBmaWxlOwogKiBhbHRlcm5hdGl2ZWx5LCB0aGUgY3NzIHJ1bGUgKGFib3ZlKSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBleHRlcm5hbCBzdHlsZXNoZWV0IG9mIHRoZQogKiBhcHBsaWNhdGlvbi4KICoKICogTGVnYWN5IGJyb3dzZXJzLCBsaWtlIElFNywgZG8gbm90IHByb3ZpZGUgYXR0cmlidXRlIHNlbGVjdG9yIHN1cHBvcnQgKGFkZGVkIGluIENTUyAyLjEpIHNvIHRoZXkKICogY2Fubm90IG1hdGNoIHRoZSBgW25nXDpjbG9ha11gIHNlbGVjdG9yLiBUbyB3b3JrIGFyb3VuZCB0aGlzIGxpbWl0YXRpb24sIHlvdSBtdXN0IGFkZCB0aGUgY3NzCiAqIGNsYXNzIGBuZ0Nsb2FrYCBpbiBhZGRpdGlvbiB0byBgbmdDbG9ha2AgZGlyZWN0aXZlIGFzIHNob3duIGluIHRoZSBleGFtcGxlIGJlbG93LgogKgogKiBAZWxlbWVudCBBTlkKICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgIDxkaXYgaWQ9InRlbXBsYXRlMSIgbmctY2xvYWs+e3sgJ2hlbGxvJyB9fTwvZGl2PgogICAgICAgIDxkaXYgaWQ9InRlbXBsYXRlMiIgbmctY2xvYWsgY2xhc3M9Im5nLWNsb2FrIj57eyAnaGVsbG8gSUU3JyB9fTwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCByZW1vdmUgdGhlIHRlbXBsYXRlIGRpcmVjdGl2ZSBhbmQgY3NzIGNsYXNzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAjdGVtcGxhdGUxJykuYXR0cignbmctY2xvYWsnKSkuCiAgICAgICAgICAgbm90KCkudG9CZURlZmluZWQoKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICN0ZW1wbGF0ZTInKS5hdHRyKCduZy1jbG9haycpKS4KICAgICAgICAgICBub3QoKS50b0JlRGVmaW5lZCgpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqCiAqLwp2YXIgbmdDbG9ha0RpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsKICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICBhdHRyLiRzZXQoJ25nQ2xvYWsnLCB1bmRlZmluZWQpOwogICAgZWxlbWVudC5yZW1vdmVDbGFzcygnbmctY2xvYWsnKTsKICB9Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ29udHJvbGxlcgogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBhc3NpZ25zIGJlaGF2aW9yIHRvIGEgc2NvcGUuIFRoaXMgaXMgYSBrZXkgYXNwZWN0IG9mIGhvdyBhbmd1bGFyCiAqIHN1cHBvcnRzIHRoZSBwcmluY2lwbGVzIGJlaGluZCB0aGUgTW9kZWwtVmlldy1Db250cm9sbGVyIGRlc2lnbiBwYXR0ZXJuLgogKgogKiBNVkMgY29tcG9uZW50cyBpbiBhbmd1bGFyOgogKgogKiAqIE1vZGVsIOKAlCBUaGUgTW9kZWwgaXMgZGF0YSBpbiBzY29wZSBwcm9wZXJ0aWVzOyBzY29wZXMgYXJlIGF0dGFjaGVkIHRvIHRoZSBET00uCiAqICogVmlldyDigJQgVGhlIHRlbXBsYXRlIChIVE1MIHdpdGggZGF0YSBiaW5kaW5ncykgaXMgcmVuZGVyZWQgaW50byB0aGUgVmlldy4KICogKiBDb250cm9sbGVyIOKAlCBUaGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlIHNwZWNpZmllcyBhIENvbnRyb2xsZXIgY2xhc3M7IHRoZSBjbGFzcyBoYXMKICogICBtZXRob2RzIHRoYXQgdHlwaWNhbGx5IGV4cHJlc3MgdGhlIGJ1c2luZXNzIGxvZ2ljIGJlaGluZCB0aGUgYXBwbGljYXRpb24uCiAqCiAqIE5vdGUgdGhhdCBhbiBhbHRlcm5hdGl2ZSB3YXkgdG8gZGVmaW5lIGNvbnRyb2xsZXJzIGlzIHZpYSB0aGUgYHtAbGluayBuZy4kcm91dGV9YAogKiBzZXJ2aWNlLgogKgogKiBAZWxlbWVudCBBTlkKICogQHNjb3BlCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb250cm9sbGVyIE5hbWUgb2YgYSBnbG9iYWxseSBhY2Nlc3NpYmxlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIG9yIGFuCiAqICAgICB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSB0aGF0IG9uIHRoZSBjdXJyZW50IHNjb3BlIGV2YWx1YXRlcyB0byBhCiAqICAgICBjb25zdHJ1Y3RvciBmdW5jdGlvbi4KICoKICogQGV4YW1wbGUKICogSGVyZSBpcyBhIHNpbXBsZSBmb3JtIGZvciBlZGl0aW5nIHVzZXIgY29udGFjdCBpbmZvcm1hdGlvbi4gQWRkaW5nLCByZW1vdmluZywgY2xlYXJpbmcsIGFuZAogKiBncmVldGluZyBhcmUgbWV0aG9kcyBkZWNsYXJlZCBvbiB0aGUgY29udHJvbGxlciAoc2VlIHNvdXJjZSB0YWIpLiBUaGVzZSBtZXRob2RzIGNhbgogKiBlYXNpbHkgYmUgY2FsbGVkIGZyb20gdGhlIGFuZ3VsYXIgbWFya3VwLiBOb3RpY2UgdGhhdCB0aGUgc2NvcGUgYmVjb21lcyB0aGUgYHRoaXNgIGZvciB0aGUKICogY29udHJvbGxlcidzIGluc3RhbmNlLiBUaGlzIGFsbG93cyBmb3IgZWFzeSBhY2Nlc3MgdG8gdGhlIHZpZXcgZGF0YSBmcm9tIHRoZSBjb250cm9sbGVyLiBBbHNvCiAqIG5vdGljZSB0aGF0IGFueSBjaGFuZ2VzIHRvIHRoZSBkYXRhIGFyZSBhdXRvbWF0aWNhbGx5IHJlZmxlY3RlZCBpbiB0aGUgVmlldyB3aXRob3V0IHRoZSBuZWVkCiAqIGZvciBhIG1hbnVhbCB1cGRhdGUuCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgPHNjcmlwdD4KICAgICAgICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIoJHNjb3BlKSB7CiAgICAgICAgICAkc2NvcGUubmFtZSA9ICJKb2huIFNtaXRoIjsKICAgICAgICAgICRzY29wZS5jb250YWN0cyA9IFsKICAgICAgICAgICAge3R5cGU6J3Bob25lJywgdmFsdWU6JzQwOCA1NTUgMTIxMid9LAogICAgICAgICAgICB7dHlwZTonZW1haWwnLCB2YWx1ZTonam9obi5zbWl0aEBleGFtcGxlLm9yZyd9IF07CgogICAgICAgICAgJHNjb3BlLmdyZWV0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgYWxlcnQodGhpcy5uYW1lKTsKICAgICAgICAgIH07CgogICAgICAgICAgJHNjb3BlLmFkZENvbnRhY3QgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICB0aGlzLmNvbnRhY3RzLnB1c2goe3R5cGU6J2VtYWlsJywgdmFsdWU6J3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pOwogICAgICAgICAgfTsKCiAgICAgICAgICAkc2NvcGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkgewogICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpOwogICAgICAgICAgIHRoaXMuY29udGFjdHMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgIH07CgogICAgICAgICAgJHNjb3BlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHsKICAgICAgICAgICBjb250YWN0LnR5cGUgPSAncGhvbmUnOwogICAgICAgICAgIGNvbnRhY3QudmFsdWUgPSAnJzsKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICA8L3NjcmlwdD4KICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJTZXR0aW5nc0NvbnRyb2xsZXIiPgogICAgICAgIE5hbWU6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0ibmFtZSIvPgogICAgICAgIFsgPGEgaHJlZj0iIiBuZy1jbGljaz0iZ3JlZXQoKSI+Z3JlZXQ8L2E+IF08YnIvPgogICAgICAgIENvbnRhY3Q6CiAgICAgICAgPHVsPgogICAgICAgICAgPGxpIG5nLXJlcGVhdD0iY29udGFjdCBpbiBjb250YWN0cyI+CiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9ImNvbnRhY3QudHlwZSI+CiAgICAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj4KICAgICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPgogICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJjb250YWN0LnZhbHVlIi8+CiAgICAgICAgICAgIFsgPGEgaHJlZj0iIiBuZy1jbGljaz0iY2xlYXJDb250YWN0KGNvbnRhY3QpIj5jbGVhcjwvYT4KICAgICAgICAgICAgfCA8YSBocmVmPSIiIG5nLWNsaWNrPSJyZW1vdmVDb250YWN0KGNvbnRhY3QpIj5YPC9hPiBdCiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpPlsgPGEgaHJlZj0iIiBuZy1jbGljaz0iYWRkQ29udGFjdCgpIj5hZGQ8L2E+IF08L2xpPgogICAgICAgPC91bD4KICAgICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGRpdj46aW5wdXQnKS52YWwoKSkudG9CZSgnSm9obiBTbWl0aCcpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6bnRoLWNoaWxkKDEpIGlucHV0JykudmFsKCkpCiAgICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6bnRoLWNoaWxkKDIpIGlucHV0JykudmFsKCkpCiAgICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTsKCiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGxpOmZpcnN0IGE6Y29udGFpbnMoImNsZWFyIiknKS5jbGljaygpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6Zmlyc3QgaW5wdXQnKS52YWwoKSkudG9CZSgnJyk7CgogICAgICAgICBlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBsaTpsYXN0IGE6Y29udGFpbnMoImFkZCIpJykuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGxpOm50aC1jaGlsZCgzKSBpbnB1dCcpLnZhbCgpKQogICAgICAgICAgIC50b0JlKCd5b3VybmFtZUBleGFtcGxlLm9yZycpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdDb250cm9sbGVyRGlyZWN0aXZlID0gW2Z1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICBzY29wZTogdHJ1ZSwKICAgIGNvbnRyb2xsZXI6ICdAJwogIH07Cn1dOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ3NwCiAqIEBwcmlvcml0eSAxMDAwCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBFbmFibGVzIFtDU1AgKENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKSBzdXBwb3J0LgogKiBUaGlzIGRpcmVjdGl2ZSBzaG91bGQgYmUgdXNlZCBvbiB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBhcHBsaWNhdGlvbiAodHlwaWNhbGx5IHRoZSBgPGh0bWw+YAogKiBlbGVtZW50IG9yIG90aGVyIGVsZW1lbnQgd2l0aCB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0KICogZGlyZWN0aXZlKS4KICoKICogSWYgZW5hYmxlZCB0aGUgcGVyZm9ybWFuY2Ugb2YgdGVtcGxhdGUgZXhwcmVzc2lvbiBldmFsdWF0b3Igd2lsbCBzdWZmZXIgc2xpZ2h0bHksIHNvIGRvbid0IGVuYWJsZQogKiB0aGlzIG1vZGUgdW5sZXNzIHlvdSBuZWVkIGl0LgogKgogKiBAZWxlbWVudCBodG1sCiAqLwoKdmFyIG5nQ3NwRGlyZWN0aXZlID0gWyckc25pZmZlcicsIGZ1bmN0aW9uKCRzbmlmZmVyKSB7CiAgcmV0dXJuIHsKICAgIHByaW9yaXR5OiAxMDAwLAogICAgY29tcGlsZTogZnVuY3Rpb24oKSB7CiAgICAgICRzbmlmZmVyLmNzcCA9IHRydWU7CiAgICB9CiAgfTsKfV07CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDbGljawogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIG5nQ2xpY2sgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciB3aGVuCiAqIGVsZW1lbnQgaXMgY2xpY2tlZC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGNsaWNrLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCkKICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICA8YnV0dG9uIG5nLWNsaWNrPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50CiAgICAgIDwvYnV0dG9uPgogICAgICBjb3VudDoge3tjb3VudH19CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdjb3VudCcpKS50b0JlKCcwJyk7CiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIDpidXR0b24nKS5jbGljaygpOwogICAgICAgICBleHBlY3QoYmluZGluZygnY291bnQnKSkudG9CZSgnMScpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwovKgogKiBBIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyBjcmVhdGlvbiBvZiBjdXN0b20gb25jbGljayBoYW5kbGVycyB0aGF0IGFyZSBkZWZpbmVkIGFzIGFuZ3VsYXIKICogZXhwcmVzc2lvbnMgYW5kIGFyZSBjb21waWxlZCBhbmQgZXhlY3V0ZWQgd2l0aGluIHRoZSBjdXJyZW50IHNjb3BlLgogKgogKiBFdmVudHMgdGhhdCBhcmUgaGFuZGxlZCB2aWEgdGhlc2UgaGFuZGxlciBhcmUgYWx3YXlzIGNvbmZpZ3VyZWQgbm90IHRvIHByb3BhZ2F0ZSBmdXJ0aGVyLgogKi8KdmFyIG5nRXZlbnREaXJlY3RpdmVzID0ge307CmZvckVhY2goCiAgJ2NsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZW1vdmUgbW91c2VlbnRlciBtb3VzZWxlYXZlJy5zcGxpdCgnICcpLAogIGZ1bmN0aW9uKG5hbWUpIHsKICAgIHZhciBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgbmFtZSk7CiAgICBuZ0V2ZW50RGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IFsnJHBhcnNlJywgZnVuY3Rpb24oJHBhcnNlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgIHZhciBmbiA9ICRwYXJzZShhdHRyW2RpcmVjdGl2ZU5hbWVdKTsKICAgICAgICBlbGVtZW50LmJpbmQobG93ZXJjYXNlKG5hbWUpLCBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmbihzY29wZSwgeyRldmVudDpldmVudH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9XTsKICB9Cik7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdEYmxjbGljawogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0RibGNsaWNrYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBkYmxjbGljayBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdEYmxjbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGRibGNsaWNrLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCkKICoKICogQGV4YW1wbGUKICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfQogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb3VzZWRvd24KICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBuZ01vdXNlZG93biBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWRvd24gZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vkb3duIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2Vkb3duLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCkKICoKICogQGV4YW1wbGUKICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfQogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb3VzZXVwCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZXVwIGV2ZW50LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNldXAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBtb3VzZXVwLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCkKICoKICogQGV4YW1wbGUKICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfQogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vdXNlb3ZlcgogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VvdmVyIGV2ZW50LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlb3ZlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIG1vdXNlb3Zlci4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW91c2VlbnRlcgogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VlbnRlciBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWVudGVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2VlbnRlci4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW91c2VsZWF2ZQogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VsZWF2ZSBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWxlYXZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2VsZWF2ZS4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW91c2Vtb3ZlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW1vdmUgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vtb3ZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2Vtb3ZlLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCkKICoKICogQGV4YW1wbGUKICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfQogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdTdWJtaXQKICoKICogQGRlc2NyaXB0aW9uCiAqIEVuYWJsZXMgYmluZGluZyBhbmd1bGFyIGV4cHJlc3Npb25zIHRvIG9uc3VibWl0IGV2ZW50cy4KICoKICogQWRkaXRpb25hbGx5IGl0IHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiAod2hpY2ggZm9yIGZvcm0gbWVhbnMgc2VuZGluZyB0aGUgcmVxdWVzdCB0byB0aGUKICogc2VydmVyIGFuZCByZWxvYWRpbmcgdGhlIGN1cnJlbnQgcGFnZSkuCiAqCiAqIEBlbGVtZW50IGZvcm0KICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N1Ym1pdCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLgogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxzY3JpcHQ+CiAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS5saXN0ID0gW107CiAgICAgICAgICAkc2NvcGUudGV4dCA9ICdoZWxsbyc7CiAgICAgICAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICh0aGlzLnRleHQpIHsKICAgICAgICAgICAgICB0aGlzLmxpc3QucHVzaCh0aGlzLnRleHQpOwogICAgICAgICAgICAgIHRoaXMudGV4dCA9ICcnOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgPC9zY3JpcHQ+CiAgICAgIDxmb3JtIG5nLXN1Ym1pdD0ic3VibWl0KCkiIG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgIEVudGVyIHRleHQgYW5kIGhpdCBlbnRlcjoKICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InRleHQiIG5hbWU9InRleHQiIC8+CiAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgaWQ9InN1Ym1pdCIgdmFsdWU9IlN1Ym1pdCIgLz4KICAgICAgICA8cHJlPmxpc3Q9e3tsaXN0fX08L3ByZT4KICAgICAgPC9mb3JtPgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zdWJtaXQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2xpc3QnKSkudG9CZSgnW10nKTsKICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI3N1Ym1pdCcpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdsaXN0JykpLnRvQmUoJ1siaGVsbG8iXScpOwogICAgICAgICBleHBlY3QoaW5wdXQoJ3RleHQnKS52YWwoKSkudG9CZSgnJyk7CiAgICAgICB9KTsKICAgICAgIGl0KCdzaG91bGQgaWdub3JlIGVtcHR5IHN0cmluZ3MnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2xpc3QnKSkudG9CZSgnW10nKTsKICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI3N1Ym1pdCcpLmNsaWNrKCk7CiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNzdWJtaXQnKS5jbGljaygpOwogICAgICAgICBleHBlY3QoYmluZGluZygnbGlzdCcpKS50b0JlKCdbImhlbGxvIl0nKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIG5nU3VibWl0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7CiAgZWxlbWVudC5iaW5kKCdzdWJtaXQnLCBmdW5jdGlvbigpIHsKICAgIHNjb3BlLiRhcHBseShhdHRycy5uZ1N1Ym1pdCk7CiAgfSk7Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZQogKiBAcmVzdHJpY3QgRUNBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBGZXRjaGVzLCBjb21waWxlcyBhbmQgaW5jbHVkZXMgYW4gZXh0ZXJuYWwgSFRNTCBmcmFnbWVudC4KICoKICogS2VlcCBpbiBtaW5kIHRoYXQgU2FtZSBPcmlnaW4gUG9saWN5IGFwcGxpZXMgdG8gaW5jbHVkZWQgcmVzb3VyY2VzCiAqIChlLmcuIG5nSW5jbHVkZSB3b24ndCB3b3JrIGZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMgb24gYWxsIGJyb3dzZXJzIGFuZCBmb3IKICogIGZpbGU6Ly8gYWNjZXNzIG9uIHNvbWUgYnJvd3NlcnMpLgogKgogKiBAc2NvcGUKICoKICogQHBhcmFtIHtzdHJpbmd9IG5nSW5jbHVkZXxzcmMgYW5ndWxhciBleHByZXNzaW9uIGV2YWx1YXRpbmcgdG8gVVJMLiBJZiB0aGUgc291cmNlIGlzIGEgc3RyaW5nIGNvbnN0YW50LAogKiAgICAgICAgICAgICAgICAgbWFrZSBzdXJlIHlvdSB3cmFwIGl0IGluIHF1b3RlcywgZS5nLiBgc3JjPSInbXlQYXJ0aWFsVGVtcGxhdGUuaHRtbCciYC4KICogQHBhcmFtIHtzdHJpbmc9fSBvbmxvYWQgRXhwcmVzc2lvbiB0byBldmFsdWF0ZSB3aGVuIGEgbmV3IHBhcnRpYWwgaXMgbG9hZGVkLgogKgogKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgV2hldGhlciBgbmdJbmNsdWRlYCBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbAogKiAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGx9IHRvIHNjcm9sbCB0aGUgdmlld3BvcnQgYWZ0ZXIgdGhlIGNvbnRlbnQgaXMgbG9hZGVkLgogKgogKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCBkaXNhYmxlIHNjcm9sbGluZy4KICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgc2V0IHdpdGhvdXQgdmFsdWUsIGVuYWJsZSBzY3JvbGxpbmcuCiAqICAgICAgICAgICAgICAgICAgLSBPdGhlcndpc2UgZW5hYmxlIHNjcm9sbGluZyBvbmx5IGlmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnV0aHkgdmFsdWUuCiAqCiAqIEBleGFtcGxlCiAgPGV4YW1wbGU+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgPHNlbGVjdCBuZy1tb2RlbD0idGVtcGxhdGUiIG5nLW9wdGlvbnM9InQubmFtZSBmb3IgdCBpbiB0ZW1wbGF0ZXMiPgogICAgICAgIDxvcHRpb24gdmFsdWU9IiI+KGJsYW5rKTwvb3B0aW9uPgogICAgICAgPC9zZWxlY3Q+CiAgICAgICB1cmwgb2YgdGhlIHRlbXBsYXRlOiA8dHQ+e3t0ZW1wbGF0ZS51cmx9fTwvdHQ+CiAgICAgICA8aHIvPgogICAgICAgPGRpdiBuZy1pbmNsdWRlIHNyYz0idGVtcGxhdGUudXJsIj48L2Rpdj4KICAgICA8L2Rpdj4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgJHNjb3BlLnRlbXBsYXRlcyA9CiAgICAgICAgICBbIHsgbmFtZTogJ3RlbXBsYXRlMS5odG1sJywgdXJsOiAndGVtcGxhdGUxLmh0bWwnfQogICAgICAgICAgLCB7IG5hbWU6ICd0ZW1wbGF0ZTIuaHRtbCcsIHVybDogJ3RlbXBsYXRlMi5odG1sJ30gXTsKICAgICAgICAkc2NvcGUudGVtcGxhdGUgPSAkc2NvcGUudGVtcGxhdGVzWzBdOwogICAgICB9CiAgICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0idGVtcGxhdGUxLmh0bWwiPgogICAgICBDb250ZW50IG9mIHRlbXBsYXRlMS5odG1sCiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJ0ZW1wbGF0ZTIuaHRtbCI+CiAgICAgIENvbnRlbnQgb2YgdGVtcGxhdGUyLmh0bWwKICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMS5odG1sJywgZnVuY3Rpb24oKSB7CiAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLWluY2x1ZGVdJykudGV4dCgpKS4KICAgICAgICAgdG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbC8pOwogICAgICB9KTsKICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMi5odG1sJywgZnVuY3Rpb24oKSB7CiAgICAgICBzZWxlY3QoJ3RlbXBsYXRlJykub3B0aW9uKCcxJyk7CiAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLWluY2x1ZGVdJykudGV4dCgpKS4KICAgICAgICAgdG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbC8pOwogICAgICB9KTsKICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHsKICAgICAgIHNlbGVjdCgndGVtcGxhdGUnKS5vcHRpb24oJycpOwogICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1pbmNsdWRlXScpLnRleHQoKSkudG9FcXVhbCgnJyk7CiAgICAgIH0pOwogICAgPC9maWxlPgogIDwvZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBldmVudAogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudExvYWRlZAogKiBAZXZlbnRPZiBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlCiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgY3VycmVudCBuZ0luY2x1ZGUgc2NvcGUKICogQGRlc2NyaXB0aW9uCiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVsb2FkZWQuCiAqLwp2YXIgbmdJbmNsdWRlRGlyZWN0aXZlID0gWyckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckYW5jaG9yU2Nyb2xsJywgJyRjb21waWxlJywKICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGh0dHAsICAgJHRlbXBsYXRlQ2FjaGUsICAgJGFuY2hvclNjcm9sbCwgICAkY29tcGlsZSkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0VDQScsCiAgICB0ZXJtaW5hbDogdHJ1ZSwKICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgdmFyIHNyY0V4cCA9IGF0dHIubmdJbmNsdWRlIHx8IGF0dHIuc3JjLAogICAgICAgICAgb25sb2FkRXhwID0gYXR0ci5vbmxvYWQgfHwgJycsCiAgICAgICAgICBhdXRvU2Nyb2xsRXhwID0gYXR0ci5hdXRvc2Nyb2xsOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7CiAgICAgICAgdmFyIGNoYW5nZUNvdW50ZXIgPSAwLAogICAgICAgICAgICBjaGlsZFNjb3BlOwoKICAgICAgICB2YXIgY2xlYXJDb250ZW50ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAoY2hpbGRTY29wZSkgewogICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7CiAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIGVsZW1lbnQuaHRtbCgnJyk7CiAgICAgICAgfTsKCiAgICAgICAgc2NvcGUuJHdhdGNoKHNyY0V4cCwgZnVuY3Rpb24gbmdJbmNsdWRlV2F0Y2hBY3Rpb24oc3JjKSB7CiAgICAgICAgICB2YXIgdGhpc0NoYW5nZUlkID0gKytjaGFuZ2VDb3VudGVyOwoKICAgICAgICAgIGlmIChzcmMpIHsKICAgICAgICAgICAgJGh0dHAuZ2V0KHNyYywge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSByZXR1cm47CgogICAgICAgICAgICAgIGlmIChjaGlsZFNjb3BlKSBjaGlsZFNjb3BlLiRkZXN0cm95KCk7CiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlLiRuZXcoKTsKCiAgICAgICAgICAgICAgZWxlbWVudC5odG1sKHJlc3BvbnNlKTsKICAgICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKGNoaWxkU2NvcGUpOwoKICAgICAgICAgICAgICBpZiAoaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmICghYXV0b1Njcm9sbEV4cCB8fCBzY29wZS4kZXZhbChhdXRvU2Nyb2xsRXhwKSkpIHsKICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNoaWxkU2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudExvYWRlZCcpOwogICAgICAgICAgICAgIHNjb3BlLiRldmFsKG9ubG9hZEV4cCk7CiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgPT09IGNoYW5nZUNvdW50ZXIpIGNsZWFyQ29udGVudCgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBjbGVhckNvbnRlbnQoKTsKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KICB9Owp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0luaXQKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdJbml0YCBkaXJlY3RpdmUgc3BlY2lmaWVzIGluaXRpYWxpemF0aW9uIHRhc2tzIHRvIGJlIGV4ZWN1dGVkCiAqICBiZWZvcmUgdGhlIHRlbXBsYXRlIGVudGVycyBleGVjdXRpb24gbW9kZSBkdXJpbmcgYm9vdHN0cmFwLgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0luaXQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4KICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgPGRpdiBuZy1pbml0PSJncmVldGluZz0nSGVsbG8nOyBwZXJzb249J1dvcmxkJyI+CiAgICAgIHt7Z3JlZXRpbmd9fSB7e3BlcnNvbn19IQogICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGdyZWV0aW5nJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdncmVldGluZycpKS50b0JlKCdIZWxsbycpOwogICAgICAgICBleHBlY3QoYmluZGluZygncGVyc29uJykpLnRvQmUoJ1dvcmxkJyk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCnZhciBuZ0luaXREaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7CiAgY29tcGlsZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykgewogICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nSW5pdCk7CiAgICAgIH0KICAgIH0KICB9Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTm9uQmluZGFibGUKICogQHByaW9yaXR5IDEwMDAKICoKICogQGRlc2NyaXB0aW9uCiAqIFNvbWV0aW1lcyBpdCBpcyBuZWNlc3NhcnkgdG8gd3JpdGUgY29kZSB3aGljaCBsb29rcyBsaWtlIGJpbmRpbmdzIGJ1dCB3aGljaCBzaG91bGQgYmUgbGVmdCBhbG9uZQogKiBieSBhbmd1bGFyLiBVc2UgYG5nTm9uQmluZGFibGVgIHRvIG1ha2UgYW5ndWxhciBpZ25vcmUgYSBjaHVuayBvZiBIVE1MLgogKgogKiBAZWxlbWVudCBBTlkKICoKICogQGV4YW1wbGUKICogSW4gdGhpcyBleGFtcGxlIHRoZXJlIGFyZSB0d28gbG9jYXRpb24gd2hlcmUgYSBzaW1wbGUgYmluZGluZyAoYHt7fX1gKSBpcyBwcmVzZW50LCBidXQgdGhlIG9uZQogKiB3cmFwcGVkIGluIGBuZ05vbkJpbmRhYmxlYCBpcyBsZWZ0IGFsb25lLgogKgogKiBAZXhhbXBsZQogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICA8ZGl2Pk5vcm1hbDoge3sxICsgMn19PC9kaXY+CiAgICAgICAgPGRpdiBuZy1ub24tYmluZGFibGU+SWdub3JlZDoge3sxICsgMn19PC9kaXY+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctbm9uLWJpbmRhYmxlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCcxICsgMicpKS50b0JlKCczJyk7CiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5lbGVtZW50KCdkaXY6bGFzdCcpLnRleHQoKSkuCiAgICAgICAgICAgdG9NYXRjaCgvMSBcKyAyLyk7CiAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIG5nTm9uQmluZGFibGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7IHRlcm1pbmFsOiB0cnVlLCBwcmlvcml0eTogMTAwMCB9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1BsdXJhbGl6ZQogKiBAcmVzdHJpY3QgRUEKICoKICogQGRlc2NyaXB0aW9uCiAqICMgT3ZlcnZpZXcKICogYG5nUGx1cmFsaXplYCBpcyBhIGRpcmVjdGl2ZSB0aGF0IGRpc3BsYXlzIG1lc3NhZ2VzIGFjY29yZGluZyB0byBlbi1VUyBsb2NhbGl6YXRpb24gcnVsZXMuCiAqIFRoZXNlIHJ1bGVzIGFyZSBidW5kbGVkIHdpdGggYW5ndWxhci5qcyBhbmQgdGhlIHJ1bGVzIGNhbiBiZSBvdmVycmlkZGVuCiAqIChzZWUge0BsaW5rIGd1aWRlL2kxOG4gQW5ndWxhciBpMThufSBkZXYgZ3VpZGUpLiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGRpcmVjdGl2ZQogKiBieSBzcGVjaWZ5aW5nIHRoZSBtYXBwaW5ncyBiZXR3ZWVuCiAqIHtAbGluayBodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwKICogcGx1cmFsIGNhdGVnb3JpZXN9IGFuZCB0aGUgc3RyaW5ncyB0byBiZSBkaXNwbGF5ZWQuCiAqCiAqICMgUGx1cmFsIGNhdGVnb3JpZXMgYW5kIGV4cGxpY2l0IG51bWJlciBydWxlcwogKiBUaGVyZSBhcmUgdHdvCiAqIHtAbGluayBodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwKICogcGx1cmFsIGNhdGVnb3JpZXN9IGluIEFuZ3VsYXIncyBkZWZhdWx0IGVuLVVTIGxvY2FsZTogIm9uZSIgYW5kICJvdGhlciIuCiAqCiAqIFdoaWxlIGEgcHVyYWwgY2F0ZWdvcnkgbWF5IG1hdGNoIG1hbnkgbnVtYmVycyAoZm9yIGV4YW1wbGUsIGluIGVuLVVTIGxvY2FsZSwgIm90aGVyIiBjYW4gbWF0Y2gKICogYW55IG51bWJlciB0aGF0IGlzIG5vdCAxKSwgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgY2FuIG9ubHkgbWF0Y2ggb25lIG51bWJlci4gRm9yIGV4YW1wbGUsIHRoZQogKiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3IgIjMiIG1hdGNoZXMgdGhlIG51bWJlciAzLiBZb3Ugd2lsbCBzZWUgdGhlIHVzZSBvZiBwbHVyYWwgY2F0ZWdvcmllcwogKiBhbmQgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIHRocm91Z2hvdXQgbGF0ZXIgcGFydHMgb2YgdGhpcyBkb2N1bWVudGF0aW9uLgogKgogKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplCiAqIFlvdSBjb25maWd1cmUgbmdQbHVyYWxpemUgYnkgcHJvdmlkaW5nIDIgYXR0cmlidXRlczogYGNvdW50YCBhbmQgYHdoZW5gLgogKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCBhdHRyaWJ1dGUsIGBvZmZzZXRgLgogKgogKiBUaGUgdmFsdWUgb2YgdGhlIGBjb3VudGAgYXR0cmlidXRlIGNhbiBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24KICogQW5ndWxhciBleHByZXNzaW9ufTsgdGhlc2UgYXJlIGV2YWx1YXRlZCBvbiB0aGUgY3VycmVudCBzY29wZSBmb3IgaXRzIGJvdW5kIHZhbHVlLgogKgogKiBUaGUgYHdoZW5gIGF0dHJpYnV0ZSBzcGVjaWZpZXMgdGhlIG1hcHBpbmdzIGJldHdlZW4gcGx1cmFsIGNhdGVnb3JpZXMgYW5kIHRoZSBhY3R1YWwKICogc3RyaW5nIHRvIGJlIGRpc3BsYXllZC4gVGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3Qgc28gdGhhdCBBbmd1bGFyCiAqIGNhbiBpbnRlcnByZXQgaXQgY29ycmVjdGx5LgogKgogKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZToKICoKICogPHByZT4KICogPG5nLXBsdXJhbGl6ZSBjb3VudD0icGVyc29uQ291bnQiCiAgICAgICAgICAgICAgICAgd2hlbj0ieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAnMSBwZXJzb24gaXMgdmlld2luZy4nLAogKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9Ij4KICogPC9uZy1wbHVyYWxpemU+CiAqPC9wcmU+CiAqCiAqIEluIHRoZSBleGFtcGxlLCBgIjA6IE5vYm9keSBpcyB2aWV3aW5nLiJgIGlzIGFuIGV4cGxpY2l0IG51bWJlciBydWxlLiBJZiB5b3UgZGlkIG5vdAogKiBzcGVjaWZ5IHRoaXMgcnVsZSwgMCB3b3VsZCBiZSBtYXRjaGVkIHRvIHRoZSAib3RoZXIiIGNhdGVnb3J5IGFuZCAiMCBwZW9wbGUgYXJlIHZpZXdpbmciCiAqIHdvdWxkIGJlIHNob3duIGluc3RlYWQgb2YgIk5vYm9keSBpcyB2aWV3aW5nIi4gWW91IGNhbiBzcGVjaWZ5IGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGZvcgogKiBvdGhlciBudW1iZXJzLCBmb3IgZXhhbXBsZSAxMiwgc28gdGhhdCBpbnN0ZWFkIG9mIHNob3dpbmcgIjEyIHBlb3BsZSBhcmUgdmlld2luZyIsIHlvdSBjYW4KICogc2hvdyAiYSBkb3plbiBwZW9wbGUgYXJlIHZpZXdpbmciLgogKgogKiBZb3UgY2FuIHVzZSBhIHNldCBvZiBjbG9zZWQgYnJhY2VzKGB7fWApIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHRoZSBudW1iZXIgdGhhdCB5b3Ugd2FudCBzdWJzdGl0dXRlZAogKiBpbnRvIHBsdXJhbGl6ZWQgc3RyaW5ncy4gSW4gdGhlIHByZXZpb3VzIGV4YW1wbGUsIEFuZ3VsYXIgd2lsbCByZXBsYWNlIGB7fWAgd2l0aAogKiA8c3BhbiBuZy1ub24tYmluZGFibGU+YHt7cGVyc29uQ291bnR9fWA8L3NwYW4+LiBUaGUgY2xvc2VkIGJyYWNlcyBge31gIGlzIGEgcGxhY2Vob2xkZXIKICogZm9yIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57e251bWJlckV4cHJlc3Npb259fTwvc3Bhbj4uCiAqCiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemUgd2l0aCBvZmZzZXQKICogVGhlIGBvZmZzZXRgIGF0dHJpYnV0ZSBhbGxvd3MgZnVydGhlciBjdXN0b21pemF0aW9uIG9mIHBsdXJhbGl6ZWQgdGV4dCwgd2hpY2ggY2FuIHJlc3VsdCBpbgogKiBhIGJldHRlciB1c2VyIGV4cGVyaWVuY2UuIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mIHRoZSBtZXNzYWdlICI0IHBlb3BsZSBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50IiwKICogeW91IG1pZ2h0IGRpc3BsYXkgIkpvaG4sIEthdGUgYW5kIDIgb3RoZXJzIGFyZSB2aWV3aW5nIHRoaXMgZG9jdW1lbnQiLgogKiBUaGUgb2Zmc2V0IGF0dHJpYnV0ZSBhbGxvd3MgeW91IHRvIG9mZnNldCBhIG51bWJlciBieSBhbnkgZGVzaXJlZCB2YWx1ZS4KICogTGV0J3MgdGFrZSBhIGxvb2sgYXQgYW4gZXhhbXBsZToKICoKICogPHByZT4KICogPG5nLXBsdXJhbGl6ZSBjb3VudD0icGVyc29uQ291bnQiIG9mZnNldD0yCiAqICAgICAgICAgICAgICAgd2hlbj0ieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICcxJzogJ3t7cGVyc29uMX19IGlzIHZpZXdpbmcuJywKICogICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIHt9IG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nfSI+CiAqIDwvbmctcGx1cmFsaXplPgogKiA8L3ByZT4KICoKICogTm90aWNlIHRoYXQgd2UgYXJlIHN0aWxsIHVzaW5nIHR3byBwbHVyYWwgY2F0ZWdvcmllcyhvbmUsIG90aGVyKSwgYnV0IHdlIGFkZGVkCiAqIHRocmVlIGV4cGxpY2l0IG51bWJlciBydWxlcyAwLCAxIGFuZCAyLgogKiBXaGVuIG9uZSBwZXJzb24sIHBlcmhhcHMgSm9obiwgdmlld3MgdGhlIGRvY3VtZW50LCAiSm9obiBpcyB2aWV3aW5nIiB3aWxsIGJlIHNob3duLgogKiBXaGVuIHRocmVlIHBlb3BsZSB2aWV3IHRoZSBkb2N1bWVudCwgbm8gZXhwbGljaXQgbnVtYmVyIHJ1bGUgaXMgZm91bmQsIHNvCiAqIGFuIG9mZnNldCBvZiAyIGlzIHRha2VuIG9mZiAzLCBhbmQgQW5ndWxhciB1c2VzIDEgdG8gZGVjaWRlIHRoZSBwbHVyYWwgY2F0ZWdvcnkuCiAqIEluIHRoaXMgY2FzZSwgcGx1cmFsIGNhdGVnb3J5ICdvbmUnIGlzIG1hdGNoZWQgYW5kICJKb2huLCBNYXJyeSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZyIKICogaXMgc2hvd24uCiAqCiAqIE5vdGUgdGhhdCB3aGVuIHlvdSBzcGVjaWZ5IG9mZnNldHMsIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvcgogKiBudW1iZXJzIGZyb20gMCB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBvZmZzZXQuIElmIHlvdSB1c2UgYW4gb2Zmc2V0IG9mIDMsIGZvciBleGFtcGxlLAogKiB5b3UgbXVzdCBwcm92aWRlIGV4cGxpY2l0IG51bWJlciBydWxlcyBmb3IgMCwgMSwgMiBhbmQgMy4gWW91IG11c3QgYWxzbyBwcm92aWRlIHBsdXJhbCBzdHJpbmdzIGZvcgogKiBwbHVyYWwgY2F0ZWdvcmllcyAib25lIiBhbmQgIm90aGVyIi4KICoKICogQHBhcmFtIHtzdHJpbmd8ZXhwcmVzc2lvbn0gY291bnQgVGhlIHZhcmlhYmxlIHRvIGJlIGJvdW5kZWQgdG8uCiAqIEBwYXJhbSB7c3RyaW5nfSB3aGVuIFRoZSBtYXBwaW5nIGJldHdlZW4gcGx1cmFsIGNhdGVnb3J5IHRvIGl0cyBjb3JyZXNwb2Rpbmcgc3RyaW5ncy4KICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGRlZHVjdCBmcm9tIHRoZSB0b3RhbCBudW1iZXIuCiAqCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICAkc2NvcGUucGVyc29uMSA9ICdJZ29yJzsKICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjIgPSAnTWlza28nOwogICAgICAgICAgICAkc2NvcGUucGVyc29uQ291bnQgPSAxOwogICAgICAgICAgfQogICAgICAgIDwvc2NyaXB0PgogICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICBQZXJzb24gMTo8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InBlcnNvbjEiIHZhbHVlPSJJZ29yIiAvPjxici8+CiAgICAgICAgICBQZXJzb24gMjo8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InBlcnNvbjIiIHZhbHVlPSJNaXNrbyIgLz48YnIvPgogICAgICAgICAgTnVtYmVyIG9mIFBlb3BsZTo8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InBlcnNvbkNvdW50IiB2YWx1ZT0iMSIgLz48YnIvPgoKICAgICAgICAgIDwhLS0tIEV4YW1wbGUgd2l0aCBzaW1wbGUgcGx1cmFsaXphdGlvbiBydWxlcyBmb3IgZW4gbG9jYWxlIC0tLT4KICAgICAgICAgIFdpdGhvdXQgT2Zmc2V0OgogICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD0icGVyc29uQ291bnQiCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49InsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICcxIHBlcnNvbiBpcyB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9Ij4KICAgICAgICAgIDwvbmctcGx1cmFsaXplPjxicj4KCiAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggb2Zmc2V0IC0tLT4KICAgICAgICAgIFdpdGggT2Zmc2V0KDIpOgogICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD0icGVyc29uQ291bnQiIG9mZnNldD0yCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49InsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9Ij4KICAgICAgICAgIDwvbmctcGx1cmFsaXplPgogICAgICAgIDwvZGl2PgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGNvcnJlY3QgcGx1cmFsaXplZCBzdHJpbmcnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6Zmlyc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCcxIHBlcnNvbiBpcyB2aWV3aW5nLicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpsYXN0JykudGV4dCgpKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnSWdvciBpcyB2aWV3aW5nLicpOwoKICAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmlucHV0KCdwZXJzb25Db3VudCcpLmVudGVyKCcwJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmZpcnN0JykudGV4dCgpKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCdOb2JvZHkgaXMgdmlld2luZy4nKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6bGFzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCdOb2JvZHkgaXMgdmlld2luZy4nKTsKCiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uQ291bnQnKS5lbnRlcignMicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpmaXJzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnMiBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmxhc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCdJZ29yIGFuZCBNaXNrbyBhcmUgdmlld2luZy4nKTsKCiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uQ291bnQnKS5lbnRlcignMycpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpmaXJzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnMyBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmxhc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCdJZ29yLCBNaXNrbyBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nKTsKCiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uQ291bnQnKS5lbnRlcignNCcpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpmaXJzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnNCBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmxhc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCdJZ29yLCBNaXNrbyBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgc2hvdyBkYXRhLWJpbmRlZCBuYW1lcycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3BlcnNvbkNvdW50JykuZW50ZXIoJzQnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6bGFzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgdG9CZSgnSWdvciwgTWlza28gYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwoKICAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmlucHV0KCdwZXJzb24xJykuZW50ZXIoJ0RpJyk7CiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uMicpLmVudGVyKCdWb2p0YScpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpsYXN0JykudGV4dCgpKS4KICAgICAgICAgICAgICB0b0JlKCdEaSwgVm9qdGEgYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwogICAgICAgIH0pOwogICAgICA8L2RvYzpzY2VuYXJpbz4KICAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdQbHVyYWxpemVEaXJlY3RpdmUgPSBbJyRsb2NhbGUnLCAnJGludGVycG9sYXRlJywgZnVuY3Rpb24oJGxvY2FsZSwgJGludGVycG9sYXRlKSB7CiAgdmFyIEJSQUNFID0gL3t9L2c7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRUEnLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgdmFyIG51bWJlckV4cCA9IGF0dHIuY291bnQsCiAgICAgICAgICB3aGVuRXhwID0gZWxlbWVudC5hdHRyKGF0dHIuJGF0dHIud2hlbiksIC8vIHRoaXMgaXMgYmVjYXVzZSB3ZSBoYXZlIHt7fX0gaW4gYXR0cnMKICAgICAgICAgIG9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDAsCiAgICAgICAgICB3aGVucyA9IHNjb3BlLiRldmFsKHdoZW5FeHApLAogICAgICAgICAgd2hlbnNFeHBGbnMgPSB7fSwKICAgICAgICAgIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksCiAgICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCk7CgogICAgICBmb3JFYWNoKHdoZW5zLCBmdW5jdGlvbihleHByZXNzaW9uLCBrZXkpIHsKICAgICAgICB3aGVuc0V4cEZuc1trZXldID0KICAgICAgICAgICRpbnRlcnBvbGF0ZShleHByZXNzaW9uLnJlcGxhY2UoQlJBQ0UsIHN0YXJ0U3ltYm9sICsgbnVtYmVyRXhwICsgJy0nICsKICAgICAgICAgICAgb2Zmc2V0ICsgZW5kU3ltYm9sKSk7CiAgICAgIH0pOwoKICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2goKSB7CiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VGbG9hdChzY29wZS4kZXZhbChudW1iZXJFeHApKTsKCiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHsKICAgICAgICAgIC8vaWYgZXhwbGljaXQgbnVtYmVyIHJ1bGUgc3VjaCBhcyAxLCAyLCAzLi4uIGlzIGRlZmluZWQsIGp1c3QgdXNlIGl0LiBPdGhlcndpc2UsCiAgICAgICAgICAvL2NoZWNrIGl0IGFnYWluc3QgcGx1cmFsaXphdGlvbiBydWxlcyBpbiAkbG9jYWxlIHNlcnZpY2UKICAgICAgICAgIGlmICghd2hlbnNbdmFsdWVdKSB2YWx1ZSA9ICRsb2NhbGUucGx1cmFsQ2F0KHZhbHVlIC0gb2Zmc2V0KTsKICAgICAgICAgICByZXR1cm4gd2hlbnNFeHBGbnNbdmFsdWVdKHNjb3BlLCBlbGVtZW50LCB0cnVlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24gbmdQbHVyYWxpemVXYXRjaEFjdGlvbihuZXdWYWwpIHsKICAgICAgICBlbGVtZW50LnRleHQobmV3VmFsKTsKICAgICAgfSk7CiAgICB9CiAgfTsKfV07CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdSZXBlYXQKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdSZXBlYXRgIGRpcmVjdGl2ZSBpbnN0YW50aWF0ZXMgYSB0ZW1wbGF0ZSBvbmNlIHBlciBpdGVtIGZyb20gYSBjb2xsZWN0aW9uLiBFYWNoIHRlbXBsYXRlCiAqIGluc3RhbmNlIGdldHMgaXRzIG93biBzY29wZSwgd2hlcmUgdGhlIGdpdmVuIGxvb3AgdmFyaWFibGUgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gaXRlbSwKICogYW5kIGAkaW5kZXhgIGlzIHNldCB0byB0aGUgaXRlbSBpbmRleCBvciBrZXkuCiAqCiAqIFNwZWNpYWwgcHJvcGVydGllcyBhcmUgZXhwb3NlZCBvbiB0aGUgbG9jYWwgc2NvcGUgb2YgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSwgaW5jbHVkaW5nOgogKgogKiAgICogYCRpbmRleGAg4oCTIGB7bnVtYmVyfWAg4oCTIGl0ZXJhdG9yIG9mZnNldCBvZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCAoMC4ubGVuZ3RoLTEpCiAqICAgKiBgJGZpcnN0YCDigJMgYHtib29sZWFufWAg4oCTIHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgZmlyc3QgaW4gdGhlIGl0ZXJhdG9yLgogKiAgICogYCRtaWRkbGVgIOKAkyBge2Jvb2xlYW59YCDigJMgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBpbiB0aGUgaXRlcmF0b3IuCiAqICAgKiBgJGxhc3RgIOKAkyBge2Jvb2xlYW59YCDigJMgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBsYXN0IGluIHRoZSBpdGVyYXRvci4KICoKICoKICogQGVsZW1lbnQgQU5ZCiAqIEBzY29wZQogKiBAcHJpb3JpdHkgMTAwMAogKiBAcGFyYW0ge3JlcGVhdF9leHByZXNzaW9ufSBuZ1JlcGVhdCBUaGUgZXhwcmVzc2lvbiBpbmRpY2F0aW5nIGhvdyB0byBlbnVtZXJhdGUgYSBjb2xsZWN0aW9uLiBUd28KICogICBmb3JtYXRzIGFyZSBjdXJyZW50bHkgc3VwcG9ydGVkOgogKgogKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSB2YXJpYWJsZSBpcyB0aGUgdXNlciBkZWZpbmVkIGxvb3AgdmFyaWFibGUgYW5kIGBleHByZXNzaW9uYAogKiAgICAgaXMgYSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuCiAqCiAqICAgICBGb3IgZXhhbXBsZTogYHRyYWNrIGluIGNkLnRyYWNrc2AuCiAqCiAqICAgKiBgKGtleSwgdmFsdWUpIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSBga2V5YCBhbmQgYHZhbHVlYCBjYW4gYmUgYW55IHVzZXIgZGVmaW5lZCBpZGVudGlmaWVycywKICogICAgIGFuZCBgZXhwcmVzc2lvbmAgaXMgdGhlIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS4KICoKICogICAgIEZvciBleGFtcGxlOiBgKG5hbWUsIGFnZSkgaW4geydhZGFtJzoxMCwgJ2FtYWxpZSc6MTJ9YC4KICoKICogQGV4YW1wbGUKICogVGhpcyBleGFtcGxlIGluaXRpYWxpemVzIHRoZSBzY29wZSB0byBhIGxpc3Qgb2YgbmFtZXMgYW5kCiAqIHRoZW4gdXNlcyBgbmdSZXBlYXRgIHRvIGRpc3BsYXkgZXZlcnkgcGVyc29uOgogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICA8ZGl2IG5nLWluaXQ9ImZyaWVuZHMgPSBbe25hbWU6J0pvaG4nLCBhZ2U6MjV9LCB7bmFtZTonTWFyeScsIGFnZToyOH1dIj4KICAgICAgICAgIEkgaGF2ZSB7e2ZyaWVuZHMubGVuZ3RofX0gZnJpZW5kcy4gVGhleSBhcmU6CiAgICAgICAgICA8dWw+CiAgICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9ImZyaWVuZCBpbiBmcmllbmRzIj4KICAgICAgICAgICAgICBbe3skaW5kZXggKyAxfX1dIHt7ZnJpZW5kLm5hbWV9fSB3aG8gaXMge3tmcmllbmQuYWdlfX0geWVhcnMgb2xkLgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kb2M6c291cmNlPgogICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXJlcGVhdCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgIHZhciByID0gdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykucmVwZWF0ZXIoJ3VsIGxpJyk7CiAgICAgICAgICAgZXhwZWN0KHIuY291bnQoKSkudG9CZSgyKTsKICAgICAgICAgICBleHBlY3Qoci5yb3coMCkpLnRvRXF1YWwoWyIxIiwiSm9obiIsIjI1Il0pOwogICAgICAgICAgIGV4cGVjdChyLnJvdygxKSkudG9FcXVhbChbIjIiLCJNYXJ5IiwiMjgiXSk7CiAgICAgICAgIH0pOwogICAgICA8L2RvYzpzY2VuYXJpbz4KICAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdSZXBlYXREaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7CiAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLAogIHByaW9yaXR5OiAxMDAwLAogIHRlcm1pbmFsOiB0cnVlLAogIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIsIGxpbmtlcikgewogICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBpdGVyU3RhcnRFbGVtZW50LCBhdHRyKXsKICAgICAgdmFyIGV4cHJlc3Npb24gPSBhdHRyLm5nUmVwZWF0OwogICAgICB2YXIgbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKC9eXHMqKC4rKVxzK2luXHMrKC4qKVxzKiQvKSwKICAgICAgICBsaHMsIHJocywgdmFsdWVJZGVudCwga2V5SWRlbnQ7CiAgICAgIGlmICghIG1hdGNoKSB7CiAgICAgICAgdGhyb3cgRXJyb3IoIkV4cGVjdGVkIG5nUmVwZWF0IGluIGZvcm0gb2YgJ19pdGVtXyBpbiBfY29sbGVjdGlvbl8nIGJ1dCBnb3QgJyIgKwogICAgICAgICAgZXhwcmVzc2lvbiArICInLiIpOwogICAgICB9CiAgICAgIGxocyA9IG1hdGNoWzFdOwogICAgICByaHMgPSBtYXRjaFsyXTsKICAgICAgbWF0Y2ggPSBsaHMubWF0Y2goL14oPzooW1wkXHddKyl8XCgoW1wkXHddKylccyosXHMqKFtcJFx3XSspXCkpJC8pOwogICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgdGhyb3cgRXJyb3IoIidpdGVtJyBpbiAnaXRlbSBpbiBjb2xsZWN0aW9uJyBzaG91bGQgYmUgaWRlbnRpZmllciBvciAoa2V5LCB2YWx1ZSkgYnV0IGdvdCAnIiArCiAgICAgICAgICAgIGxocyArICInLiIpOwogICAgICB9CiAgICAgIHZhbHVlSWRlbnQgPSBtYXRjaFszXSB8fCBtYXRjaFsxXTsKICAgICAga2V5SWRlbnQgPSBtYXRjaFsyXTsKCiAgICAgIC8vIFN0b3JlIGEgbGlzdCBvZiBlbGVtZW50cyBmcm9tIHByZXZpb3VzIHJ1bi4gVGhpcyBpcyBhIGhhc2ggd2hlcmUga2V5IGlzIHRoZSBpdGVtIGZyb20gdGhlCiAgICAgIC8vIGl0ZXJhdG9yLCBhbmQgdGhlIHZhbHVlIGlzIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCBmb2xsb3dpbmcgcHJvcGVydGllcy4KICAgICAgLy8gICAtIHNjb3BlOiBib3VuZCBzY29wZQogICAgICAvLyAgIC0gZWxlbWVudDogcHJldmlvdXMgZWxlbWVudC4KICAgICAgLy8gICAtIGluZGV4OiBwb3NpdGlvbgogICAgICAvLyBXZSBuZWVkIGFuIGFycmF5IG9mIHRoZXNlIG9iamVjdHMgc2luY2UgdGhlIHNhbWUgb2JqZWN0IGNhbiBiZSByZXR1cm5lZCBmcm9tIHRoZSBpdGVyYXRvci4KICAgICAgLy8gV2UgZXhwZWN0IHRoaXMgdG8gYmUgYSByYXJlIGNhc2UuCiAgICAgIHZhciBsYXN0T3JkZXIgPSBuZXcgSGFzaFF1ZXVlTWFwKCk7CgogICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gbmdSZXBlYXRXYXRjaChzY29wZSl7CiAgICAgICAgdmFyIGluZGV4LCBsZW5ndGgsCiAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBzY29wZS4kZXZhbChyaHMpLAogICAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoID0gc2l6ZShjb2xsZWN0aW9uLCB0cnVlKSwKICAgICAgICAgICAgY2hpbGRTY29wZSwKICAgICAgICAgICAgLy8gU2FtZSBhcyBsYXN0T3JkZXIgYnV0IGl0IGhhcyB0aGUgY3VycmVudCBzdGF0ZS4gSXQgd2lsbCBiZWNvbWUgdGhlCiAgICAgICAgICAgIC8vIGxhc3RPcmRlciBvbiB0aGUgbmV4dCBpdGVyYXRpb24uCiAgICAgICAgICAgIG5leHRPcmRlciA9IG5ldyBIYXNoUXVldWVNYXAoKSwKICAgICAgICAgICAga2V5LCB2YWx1ZSwgLy8ga2V5L3ZhbHVlIG9mIGl0ZXJhdGlvbgogICAgICAgICAgICBhcnJheSwgbGFzdCwgICAgICAgLy8gbGFzdCBvYmplY3QgaW5mb3JtYXRpb24ge3Njb3BlLCBlbGVtZW50LCBpbmRleH0KICAgICAgICAgICAgY3Vyc29yID0gaXRlclN0YXJ0RWxlbWVudDsgICAgIC8vIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIG5vZGUKCiAgICAgICAgaWYgKCFpc0FycmF5KGNvbGxlY3Rpb24pKSB7CiAgICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgc29ydCB0aGVtIGFuZCB1c2UgdG8gZGV0ZXJtaW5lIG9yZGVyIG9mIGl0ZXJhdGlvbiBvdmVyIG9iaiBwcm9wcwogICAgICAgICAgYXJyYXkgPSBbXTsKICAgICAgICAgIGZvcihrZXkgaW4gY29sbGVjdGlvbikgewogICAgICAgICAgICBpZiAoY29sbGVjdGlvbi5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleS5jaGFyQXQoMCkgIT0gJyQnKSB7CiAgICAgICAgICAgICAgYXJyYXkucHVzaChrZXkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBhcnJheS5zb3J0KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFycmF5ID0gY29sbGVjdGlvbiB8fCBbXTsKICAgICAgICB9CgogICAgICAgIC8vIHdlIGFyZSBub3QgdXNpbmcgZm9yRWFjaCBmb3IgcGVyZiByZWFzb25zICh0cnlpbmcgdG8gYXZvaWQgI2NhbGwpCiAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBhcnJheSkgPyBpbmRleCA6IGFycmF5W2luZGV4XTsKICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldOwoKICAgICAgICAgIGxhc3QgPSBsYXN0T3JkZXIuc2hpZnQodmFsdWUpOwoKICAgICAgICAgIGlmIChsYXN0KSB7CiAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYWxyZWFkeSBzZWVuIHRoaXMgb2JqZWN0LCB0aGVuIHdlIG5lZWQgdG8gcmV1c2UgdGhlCiAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgc2NvcGUvZWxlbWVudAogICAgICAgICAgICBjaGlsZFNjb3BlID0gbGFzdC5zY29wZTsKICAgICAgICAgICAgbmV4dE9yZGVyLnB1c2godmFsdWUsIGxhc3QpOwoKICAgICAgICAgICAgaWYgKGluZGV4ID09PSBsYXN0LmluZGV4KSB7CiAgICAgICAgICAgICAgLy8gZG8gbm90aGluZwogICAgICAgICAgICAgIGN1cnNvciA9IGxhc3QuZWxlbWVudDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBleGlzdGluZyBpdGVtIHdoaWNoIGdvdCBtb3ZlZAogICAgICAgICAgICAgIGxhc3QuaW5kZXggPSBpbmRleDsKICAgICAgICAgICAgICAvLyBUaGlzIG1heSBiZSBhIG5vb3AsIGlmIHRoZSBlbGVtZW50IGlzIG5leHQsIGJ1dCBJIGRvbid0IGtub3cgb2YgYSBnb29kIHdheSB0bwogICAgICAgICAgICAgIC8vIGZpZ3VyZSB0aGlzIG91dCwgIHNpbmNlIGl0IHdvdWxkIHJlcXVpcmUgZXh0cmEgRE9NIGFjY2Vzcywgc28gbGV0J3MganVzdCBob3BlIHRoYXQKICAgICAgICAgICAgICAvLyB0aGUgYnJvd3NlcnMgcmVhbGl6ZXMgdGhhdCBpdCBpcyBub29wLCBhbmQgdHJlYXRzIGl0IGFzIHN1Y2guCiAgICAgICAgICAgICAgY3Vyc29yLmFmdGVyKGxhc3QuZWxlbWVudCk7CiAgICAgICAgICAgICAgY3Vyc29yID0gbGFzdC5lbGVtZW50OwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBuZXcgaXRlbSB3aGljaCB3ZSBkb24ndCBrbm93IGFib3V0CiAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZS4kbmV3KCk7CiAgICAgICAgICB9CgogICAgICAgICAgY2hpbGRTY29wZVt2YWx1ZUlkZW50XSA9IHZhbHVlOwogICAgICAgICAgaWYgKGtleUlkZW50KSBjaGlsZFNjb3BlW2tleUlkZW50XSA9IGtleTsKICAgICAgICAgIGNoaWxkU2NvcGUuJGluZGV4ID0gaW5kZXg7CgogICAgICAgICAgY2hpbGRTY29wZS4kZmlyc3QgPSAoaW5kZXggPT09IDApOwogICAgICAgICAgY2hpbGRTY29wZS4kbGFzdCA9IChpbmRleCA9PT0gKGNvbGxlY3Rpb25MZW5ndGggLSAxKSk7CiAgICAgICAgICBjaGlsZFNjb3BlLiRtaWRkbGUgPSAhKGNoaWxkU2NvcGUuJGZpcnN0IHx8IGNoaWxkU2NvcGUuJGxhc3QpOwoKICAgICAgICAgIGlmICghbGFzdCkgewogICAgICAgICAgICBsaW5rZXIoY2hpbGRTY29wZSwgZnVuY3Rpb24oY2xvbmUpewogICAgICAgICAgICAgIGN1cnNvci5hZnRlcihjbG9uZSk7CiAgICAgICAgICAgICAgbGFzdCA9IHsKICAgICAgICAgICAgICAgICAgc2NvcGU6IGNoaWxkU2NvcGUsCiAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IChjdXJzb3IgPSBjbG9uZSksCiAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBuZXh0T3JkZXIucHVzaCh2YWx1ZSwgbGFzdCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy9zaHJpbmsgY2hpbGRyZW4KICAgICAgICBmb3IgKGtleSBpbiBsYXN0T3JkZXIpIHsKICAgICAgICAgIGlmIChsYXN0T3JkZXIuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICBhcnJheSA9IGxhc3RPcmRlcltrZXldOwogICAgICAgICAgICB3aGlsZShhcnJheS5sZW5ndGgpIHsKICAgICAgICAgICAgICB2YWx1ZSA9IGFycmF5LnBvcCgpOwogICAgICAgICAgICAgIHZhbHVlLmVsZW1lbnQucmVtb3ZlKCk7CiAgICAgICAgICAgICAgdmFsdWUuc2NvcGUuJGRlc3Ryb3koKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbGFzdE9yZGVyID0gbmV4dE9yZGVyOwogICAgICB9KTsKICAgIH07CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1Nob3cKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdTaG93YCBhbmQgYG5nSGlkZWAgZGlyZWN0aXZlcyBzaG93IG9yIGhpZGUgYSBwb3J0aW9uIG9mIHRoZSBET00gdHJlZSAoSFRNTCkKICogY29uZGl0aW9uYWxseS4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTaG93IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHkKICogICAgIHRoZW4gdGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIHJlc3BlY3RpdmVseS4KICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIj48YnIvPgogICAgICAgIFNob3c6IDxzcGFuIG5nLXNob3c9ImNoZWNrZWQiPkkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC48L3NwYW4+IDxici8+CiAgICAgICAgSGlkZTogPHNwYW4gbmctaGlkZT0iY2hlY2tlZCI+SSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLjwvc3Bhbj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc2hvdyAvIG5nLWhpZGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW46Zmlyc3Q6aGlkZGVuJykuY291bnQoKSkudG9FcXVhbCgxKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW46bGFzdDp2aXNpYmxlJykuY291bnQoKSkudG9FcXVhbCgxKTsKCiAgICAgICAgIGlucHV0KCdjaGVja2VkJykuY2hlY2soKTsKCiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuOmZpcnN0OnZpc2libGUnKS5jb3VudCgpKS50b0VxdWFsKDEpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbjpsYXN0OmhpZGRlbicpLmNvdW50KCkpLnRvRXF1YWwoMSk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCi8vVE9ETyhtaXNrbyk6IHJlZmFjdG9yIHRvIHJlbW92ZSBlbGVtZW50IGZyb20gdGhlIERPTQp2YXIgbmdTaG93RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpewogIHNjb3BlLiR3YXRjaChhdHRyLm5nU2hvdywgZnVuY3Rpb24gbmdTaG93V2F0Y2hBY3Rpb24odmFsdWUpewogICAgZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCB0b0Jvb2xlYW4odmFsdWUpID8gJycgOiAnbm9uZScpOwogIH0pOwp9KTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdIaWRlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nSGlkZWAgYW5kIGBuZ1Nob3dgIGRpcmVjdGl2ZXMgaGlkZSBvciBzaG93IGEgcG9ydGlvbiBvZiB0aGUgRE9NIHRyZWUgKEhUTUwpCiAqIGNvbmRpdGlvbmFsbHkuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSGlkZSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5IHRoZW4KICogICAgIHRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiByZXNwZWN0aXZlbHkuCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICBDbGljayBtZTogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iY2hlY2tlZCI+PGJyLz4KICAgICAgICBTaG93OiA8c3BhbiBuZy1zaG93PSJjaGVja2VkIj5JIHNob3cgdXAgd2hlbiB5b3UgY2hlY2tib3ggaXMgY2hlY2tlZD88L3NwYW4+IDxici8+CiAgICAgICAgSGlkZTogPHNwYW4gbmctaGlkZT0iY2hlY2tlZCI+SSBoaWRlIHdoZW4geW91IGNoZWNrYm94IGlzIGNoZWNrZWQ/PC9zcGFuPgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zaG93IC8gbmctaGlkZScsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbjpmaXJzdDpoaWRkZW4nKS5jb3VudCgpKS50b0VxdWFsKDEpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbjpsYXN0OnZpc2libGUnKS5jb3VudCgpKS50b0VxdWFsKDEpOwoKICAgICAgICAgaW5wdXQoJ2NoZWNrZWQnKS5jaGVjaygpOwoKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW46Zmlyc3Q6dmlzaWJsZScpLmNvdW50KCkpLnRvRXF1YWwoMSk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuOmxhc3Q6aGlkZGVuJykuY291bnQoKSkudG9FcXVhbCgxKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KLy9UT0RPKG1pc2tvKTogcmVmYWN0b3IgdG8gcmVtb3ZlIGVsZW1lbnQgZnJvbSB0aGUgRE9NCnZhciBuZ0hpZGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZShmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cil7CiAgc2NvcGUuJHdhdGNoKGF0dHIubmdIaWRlLCBmdW5jdGlvbiBuZ0hpZGVXYXRjaEFjdGlvbih2YWx1ZSl7CiAgICBlbGVtZW50LmNzcygnZGlzcGxheScsIHRvQm9vbGVhbih2YWx1ZSkgPyAnbm9uZScgOiAnJyk7CiAgfSk7Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nU3R5bGUKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdTdHlsZWAgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc2V0IENTUyBzdHlsZSBvbiBhbiBIVE1MIGVsZW1lbnQgY29uZGl0aW9uYWxseS4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTdHlsZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB3aGljaCBldmFscyB0byBhbgogKiAgICAgIG9iamVjdCB3aG9zZSBrZXlzIGFyZSBDU1Mgc3R5bGUgbmFtZXMgYW5kIHZhbHVlcyBhcmUgY29ycmVzcG9uZGluZyB2YWx1ZXMgZm9yIHRob3NlIENTUwogKiAgICAgIGtleXMuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJzZXQiIG5nLWNsaWNrPSJteVN0eWxlPXtjb2xvcjoncmVkJ30iPgogICAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJjbGVhciIgbmctY2xpY2s9Im15U3R5bGU9e30iPgogICAgICAgIDxici8+CiAgICAgICAgPHNwYW4gbmctc3R5bGU9Im15U3R5bGUiPlNhbXBsZSBUZXh0PC9zcGFuPgogICAgICAgIDxwcmU+bXlTdHlsZT17e215U3R5bGV9fTwvcHJlPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgc3BhbiB7CiAgICAgICAgIGNvbG9yOiBibGFjazsKICAgICAgIH0KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic2NlbmFyaW8uanMiPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zdHlsZScsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbicpLmNzcygnY29sb3InKSkudG9CZSgncmdiKDAsIDAsIDApJyk7CiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIDpidXR0b25bdmFsdWU9c2V0XScpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuJykuY3NzKCdjb2xvcicpKS50b0JlKCdyZ2IoMjU1LCAwLCAwKScpOwogICAgICAgICBlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSA6YnV0dG9uW3ZhbHVlPWNsZWFyXScpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuJykuY3NzKCdjb2xvcicpKS50b0JlKCdyZ2IoMCwgMCwgMCknKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KdmFyIG5nU3R5bGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZShmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogIHNjb3BlLiR3YXRjaChhdHRyLm5nU3R5bGUsIGZ1bmN0aW9uIG5nU3R5bGVXYXRjaEFjdGlvbihuZXdTdHlsZXMsIG9sZFN0eWxlcykgewogICAgaWYgKG9sZFN0eWxlcyAmJiAobmV3U3R5bGVzICE9PSBvbGRTdHlsZXMpKSB7CiAgICAgIGZvckVhY2gob2xkU3R5bGVzLCBmdW5jdGlvbih2YWwsIHN0eWxlKSB7IGVsZW1lbnQuY3NzKHN0eWxlLCAnJyk7fSk7CiAgICB9CiAgICBpZiAobmV3U3R5bGVzKSBlbGVtZW50LmNzcyhuZXdTdHlsZXMpOwogIH0sIHRydWUpOwp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1N3aXRjaAogKiBAcmVzdHJpY3QgRUEKICoKICogQGRlc2NyaXB0aW9uCiAqIENvbmRpdGlvbmFsbHkgY2hhbmdlIHRoZSBET00gc3RydWN0dXJlLgogKgogKiBAdXNhZ2VDb250ZW50CiAqIDxBTlkgbmctc3dpdGNoLXdoZW49Im1hdGNoVmFsdWUxIj4uLi48L0FOWT4KICogICA8QU5ZIG5nLXN3aXRjaC13aGVuPSJtYXRjaFZhbHVlMiI+Li4uPC9BTlk+CiAqICAgLi4uCiAqICAgPEFOWSBuZy1zd2l0Y2gtZGVmYXVsdD4uLi48L0FOWT4KICoKICogQHNjb3BlCiAqIEBwYXJhbSB7Kn0gbmdTd2l0Y2h8b24gZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0IDx0dD5uZy1zd2l0Y2gtd2hlbjwvdHQ+LgogKiBAcGFyYW1EZXNjcmlwdGlvbgogKiBPbiBjaGlsZCBlbG1lbnRzIGFkZDoKICoKICogKiBgbmdTd2l0Y2hXaGVuYDogdGhlIGNhc2Ugc3RhdGVtZW50IHRvIG1hdGNoIGFnYWluc3QuIElmIG1hdGNoIHRoZW4gdGhpcwogKiAgIGNhc2Ugd2lsbCBiZSBkaXNwbGF5ZWQuCiAqICogYG5nU3dpdGNoRGVmYXVsdGA6IHRoZSBkZWZhdWx0IGNhc2Ugd2hlbiBubyBvdGhlciBjYXNzZXMgbWF0Y2guCiAqCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbJ3NldHRpbmdzJywgJ2hvbWUnLCAnb3RoZXInXTsKICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGlvbiA9ICRzY29wZS5pdGVtc1swXTsKICAgICAgICAgIH0KICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0ic2VsZWN0aW9uIiBuZy1vcHRpb25zPSJpdGVtIGZvciBpdGVtIGluIGl0ZW1zIj4KICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgPHR0PnNlbGVjdGlvbj17e3NlbGVjdGlvbn19PC90dD4KICAgICAgICAgIDxoci8+CiAgICAgICAgICA8ZGl2IG5nLXN3aXRjaCBvbj0ic2VsZWN0aW9uIiA+CiAgICAgICAgICAgIDxkaXYgbmctc3dpdGNoLXdoZW49InNldHRpbmdzIj5TZXR0aW5ncyBEaXY8L2Rpdj4KICAgICAgICAgICAgPHNwYW4gbmctc3dpdGNoLXdoZW49ImhvbWUiPkhvbWUgU3Bhbjwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4gbmctc3dpdGNoLWRlZmF1bHQ+ZGVmYXVsdDwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCBzdGFydCBpbiBzZXR0aW5ncycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLXN3aXRjaF0nKS50ZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pOwogICAgICAgIH0pOwogICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIGhvbWUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgc2VsZWN0KCdzZWxlY3Rpb24nKS5vcHRpb24oJ2hvbWUnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1zd2l0Y2hdJykudGV4dCgpKS50b01hdGNoKC9Ib21lIFNwYW4vKTsKICAgICAgICB9KTsKICAgICAgICBpdCgnc2hvdWxkIHNlbGVjdCBkZWFmYXVsdCcsIGZ1bmN0aW9uKCkgewogICAgICAgICBzZWxlY3QoJ3NlbGVjdGlvbicpLm9wdGlvbignb3RoZXInKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1zd2l0Y2hdJykudGV4dCgpKS50b01hdGNoKC9kZWZhdWx0Lyk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICovCnZhciBOR19TV0lUQ0ggPSAnbmctc3dpdGNoJzsKdmFyIG5nU3dpdGNoRGlyZWN0aXZlID0gdmFsdWVGbih7CiAgcmVzdHJpY3Q6ICdFQScsCiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikgewogICAgdmFyIHdhdGNoRXhwciA9IGF0dHIubmdTd2l0Y2ggfHwgYXR0ci5vbiwKICAgICAgICBjYXNlcyA9IHt9OwoKICAgIGVsZW1lbnQuZGF0YShOR19TV0lUQ0gsIGNhc2VzKTsKICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCl7CiAgICAgIHZhciBzZWxlY3RlZFRyYW5zY2x1ZGUsCiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnQsCiAgICAgICAgICBzZWxlY3RlZFNjb3BlOwoKICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwciwgZnVuY3Rpb24gbmdTd2l0Y2hXYXRjaEFjdGlvbih2YWx1ZSkgewogICAgICAgIGlmIChzZWxlY3RlZEVsZW1lbnQpIHsKICAgICAgICAgIHNlbGVjdGVkU2NvcGUuJGRlc3Ryb3koKTsKICAgICAgICAgIHNlbGVjdGVkRWxlbWVudC5yZW1vdmUoKTsKICAgICAgICAgIHNlbGVjdGVkRWxlbWVudCA9IHNlbGVjdGVkU2NvcGUgPSBudWxsOwogICAgICAgIH0KICAgICAgICBpZiAoKHNlbGVjdGVkVHJhbnNjbHVkZSA9IGNhc2VzWychJyArIHZhbHVlXSB8fCBjYXNlc1snPyddKSkgewogICAgICAgICAgc2NvcGUuJGV2YWwoYXR0ci5jaGFuZ2UpOwogICAgICAgICAgc2VsZWN0ZWRTY29wZSA9IHNjb3BlLiRuZXcoKTsKICAgICAgICAgIHNlbGVjdGVkVHJhbnNjbHVkZShzZWxlY3RlZFNjb3BlLCBmdW5jdGlvbihjYXNlRWxlbWVudCkgewogICAgICAgICAgICBzZWxlY3RlZEVsZW1lbnQgPSBjYXNlRWxlbWVudDsKICAgICAgICAgICAgZWxlbWVudC5hcHBlbmQoY2FzZUVsZW1lbnQpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CiAgfQp9KTsKCnZhciBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7CiAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLAogIHByaW9yaXR5OiA1MDAsCiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMsIHRyYW5zY2x1ZGUpIHsKICAgIHZhciBjYXNlcyA9IGVsZW1lbnQuaW5oZXJpdGVkRGF0YShOR19TV0lUQ0gpOwogICAgYXNzZXJ0QXJnKGNhc2VzKTsKICAgIGNhc2VzWychJyArIGF0dHJzLm5nU3dpdGNoV2hlbl0gPSB0cmFuc2NsdWRlOwogIH0KfSk7Cgp2YXIgbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIHRyYW5zY2x1ZGU6ICdlbGVtZW50JywKICBwcmlvcml0eTogNTAwLAogIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzLCB0cmFuc2NsdWRlKSB7CiAgICB2YXIgY2FzZXMgPSBlbGVtZW50LmluaGVyaXRlZERhdGEoTkdfU1dJVENIKTsKICAgIGFzc2VydEFyZyhjYXNlcyk7CiAgICBjYXNlc1snPyddID0gdHJhbnNjbHVkZTsKICB9Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nVHJhbnNjbHVkZQogKgogKiBAZGVzY3JpcHRpb24KICogSW5zZXJ0IHRoZSB0cmFuc2NsdWRlZCBET00gaGVyZS4KICoKICogQGVsZW1lbnQgQU5ZCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZSBtb2R1bGU9InRyYW5zY2x1ZGUiPgogICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUudGl0bGUgPSAnTG9yZW0gSXBzdW0nOwogICAgICAgICAgICRzY29wZS50ZXh0ID0gJ05lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCBxdWkgZG9sb3JlbSBpcHN1bSBxdWlhIGRvbG9yLi4uJzsKICAgICAgICAgfQoKICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3RyYW5zY2x1ZGUnLCBbXSkKICAgICAgICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpewogICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSwKICAgICAgICAgICAgICAgc2NvcGU6ICdpc29sYXRlJywKICAgICAgICAgICAgICAgbG9jYWxzOiB7IHRpdGxlOidiaW5kJyB9LAogICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgc3R5bGU9ImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiBncmF5Ij57e3RpdGxlfX08L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgbmctdHJhbnNjbHVkZT48L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nCiAgICAgICAgICAgICB9OwogICAgICAgICB9KTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgPGlucHV0IG5nLW1vZGVsPSJ0aXRsZSI+PGJyPgogICAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9InRleHQiPjwvdGV4dGFyZWE+IDxici8+CiAgICAgICAgIDxwYW5lIHRpdGxlPSJ7e3RpdGxlfX0iPnt7dGV4dH19PC9wYW5lPgogICAgICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCBoYXZlIHRyYW5zY2x1ZGVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBpbnB1dCgndGl0bGUnKS5lbnRlcignVElUTEUnKTsKICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJ1RFWFQnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0aXRsZScpKS50b0VxdWFsKCdUSVRMRScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgnVEVYVCcpOwogICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKgogKi8KdmFyIG5nVHJhbnNjbHVkZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsKICBjb250cm9sbGVyOiBbJyR0cmFuc2NsdWRlJywgJyRlbGVtZW50JywgZnVuY3Rpb24oJHRyYW5zY2x1ZGUsICRlbGVtZW50KSB7CiAgICAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSkgewogICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpOwogICAgfSk7CiAgfV0KfSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdWaWV3CiAqIEByZXN0cmljdCBFQ0EKICoKICogQGRlc2NyaXB0aW9uCiAqICMgT3ZlcnZpZXcKICogYG5nVmlld2AgaXMgYSBkaXJlY3RpdmUgdGhhdCBjb21wbGVtZW50cyB0aGUge0BsaW5rIG5nLiRyb3V0ZSAkcm91dGV9IHNlcnZpY2UgYnkKICogaW5jbHVkaW5nIHRoZSByZW5kZXJlZCB0ZW1wbGF0ZSBvZiB0aGUgY3VycmVudCByb3V0ZSBpbnRvIHRoZSBtYWluIGxheW91dCAoYGluZGV4Lmh0bWxgKSBmaWxlLgogKiBFdmVyeSB0aW1lIHRoZSBjdXJyZW50IHJvdXRlIGNoYW5nZXMsIHRoZSBpbmNsdWRlZCB2aWV3IGNoYW5nZXMgd2l0aCBpdCBhY2NvcmRpbmcgdG8gdGhlCiAqIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGAkcm91dGVgIHNlcnZpY2UuCiAqCiAqIEBzY29wZQogKiBAZXhhbXBsZQogICAgPGV4YW1wbGUgbW9kdWxlPSJuZ1ZpZXciPgogICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9Ik1haW5DbnRsIj4KICAgICAgICAgIENob29zZToKICAgICAgICAgIDxhIGhyZWY9IkJvb2svTW9ieSI+TW9ieTwvYT4gfAogICAgICAgICAgPGEgaHJlZj0iQm9vay9Nb2J5L2NoLzEiPk1vYnk6IENoMTwvYT4gfAogICAgICAgICAgPGEgaHJlZj0iQm9vay9HYXRzYnkiPkdhdHNieTwvYT4gfAogICAgICAgICAgPGEgaHJlZj0iQm9vay9HYXRzYnkvY2gvND9rZXk9dmFsdWUiPkdhdHNieTogQ2g0PC9hPiB8CiAgICAgICAgICA8YSBocmVmPSJCb29rL1NjYXJsZXQiPlNjYXJsZXQgTGV0dGVyPC9hPjxici8+CgogICAgICAgICAgPGRpdiBuZy12aWV3PjwvZGl2PgogICAgICAgICAgPGhyIC8+CgogICAgICAgICAgPHByZT4kbG9jYXRpb24ucGF0aCgpID0ge3skbG9jYXRpb24ucGF0aCgpfX08L3ByZT4KICAgICAgICAgIDxwcmU+JHJvdXRlLmN1cnJlbnQudGVtcGxhdGUgPSB7eyRyb3V0ZS5jdXJyZW50LnRlbXBsYXRlfX08L3ByZT4KICAgICAgICAgIDxwcmU+JHJvdXRlLmN1cnJlbnQucGFyYW1zID0ge3skcm91dGUuY3VycmVudC5wYXJhbXN9fTwvcHJlPgogICAgICAgICAgPHByZT4kcm91dGUuY3VycmVudC5zY29wZS5uYW1lID0ge3skcm91dGUuY3VycmVudC5zY29wZS5uYW1lfX08L3ByZT4KICAgICAgICAgIDxwcmU+JHJvdXRlUGFyYW1zID0ge3skcm91dGVQYXJhbXN9fTwvcHJlPgogICAgICAgIDwvZGl2PgogICAgICA8L2ZpbGU+CgogICAgICA8ZmlsZSBuYW1lPSJib29rLmh0bWwiPgogICAgICAgIGNvbnRyb2xsZXI6IHt7bmFtZX19PGJyIC8+CiAgICAgICAgQm9vayBJZDoge3twYXJhbXMuYm9va0lkfX08YnIgLz4KICAgICAgPC9maWxlPgoKICAgICAgPGZpbGUgbmFtZT0iY2hhcHRlci5odG1sIj4KICAgICAgICBjb250cm9sbGVyOiB7e25hbWV9fTxiciAvPgogICAgICAgIEJvb2sgSWQ6IHt7cGFyYW1zLmJvb2tJZH19PGJyIC8+CiAgICAgICAgQ2hhcHRlciBJZDoge3twYXJhbXMuY2hhcHRlcklkfX0KICAgICAgPC9maWxlPgoKICAgICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbmdWaWV3JywgW10sIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikgewogICAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignL0Jvb2svOmJvb2tJZCcsIHsKICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdib29rLmh0bWwnLAogICAgICAgICAgICBjb250cm9sbGVyOiBCb29rQ250bAogICAgICAgICAgfSk7CiAgICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvQm9vay86Ym9va0lkL2NoLzpjaGFwdGVySWQnLCB7CiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY2hhcHRlci5odG1sJywKICAgICAgICAgICAgY29udHJvbGxlcjogQ2hhcHRlckNudGwKICAgICAgICAgIH0pOwoKICAgICAgICAgIC8vIGNvbmZpZ3VyZSBodG1sNSB0byBnZXQgbGlua3Mgd29ya2luZyBvbiBqc2ZpZGRsZQogICAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpOwogICAgICAgIH0pOwoKICAgICAgICBmdW5jdGlvbiBNYWluQ250bCgkc2NvcGUsICRyb3V0ZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24pIHsKICAgICAgICAgICRzY29wZS4kcm91dGUgPSAkcm91dGU7CiAgICAgICAgICAkc2NvcGUuJGxvY2F0aW9uID0gJGxvY2F0aW9uOwogICAgICAgICAgJHNjb3BlLiRyb3V0ZVBhcmFtcyA9ICRyb3V0ZVBhcmFtczsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEJvb2tDbnRsKCRzY29wZSwgJHJvdXRlUGFyYW1zKSB7CiAgICAgICAgICAkc2NvcGUubmFtZSA9ICJCb29rQ250bCI7CiAgICAgICAgICAkc2NvcGUucGFyYW1zID0gJHJvdXRlUGFyYW1zOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gQ2hhcHRlckNudGwoJHNjb3BlLCAkcm91dGVQYXJhbXMpIHsKICAgICAgICAgICRzY29wZS5uYW1lID0gIkNoYXB0ZXJDbnRsIjsKICAgICAgICAgICRzY29wZS5wYXJhbXMgPSAkcm91dGVQYXJhbXM7CiAgICAgICAgfQogICAgICA8L2ZpbGU+CgogICAgICA8ZmlsZSBuYW1lPSJzY2VuYXJpby5qcyI+CiAgICAgICAgaXQoJ3Nob3VsZCBsb2FkIGFuZCBjb21waWxlIGNvcnJlY3QgdGVtcGxhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGVsZW1lbnQoJ2E6Y29udGFpbnMoIk1vYnk6IENoMSIpJykuY2xpY2soKTsKICAgICAgICAgIHZhciBjb250ZW50ID0gZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLXZpZXddJykudGV4dCgpOwogICAgICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL2NvbnRyb2xsZXJcOiBDaGFwdGVyQ250bC8pOwogICAgICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL0Jvb2sgSWRcOiBNb2J5Lyk7CiAgICAgICAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvQ2hhcHRlciBJZFw6IDEvKTsKCiAgICAgICAgICBlbGVtZW50KCdhOmNvbnRhaW5zKCJTY2FybGV0IiknKS5jbGljaygpOwogICAgICAgICAgY29udGVudCA9IGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy12aWV3XScpLnRleHQoKTsKICAgICAgICAgIGV4cGVjdChjb250ZW50KS50b01hdGNoKC9jb250cm9sbGVyXDogQm9va0NudGwvKTsKICAgICAgICAgIGV4cGVjdChjb250ZW50KS50b01hdGNoKC9Cb29rIElkXDogU2NhcmxldC8pOwogICAgICAgIH0pOwogICAgICA8L2ZpbGU+CiAgICA8L2V4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZXZlbnQKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nVmlldyMkdmlld0NvbnRlbnRMb2FkZWQKICogQGV2ZW50T2YgbmcuZGlyZWN0aXZlOm5nVmlldwogKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIGN1cnJlbnQgbmdWaWV3IHNjb3BlCiAqIEBkZXNjcmlwdGlvbgogKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nVmlldyBjb250ZW50IGlzIHJlbG9hZGVkLgogKi8KdmFyIG5nVmlld0RpcmVjdGl2ZSA9IFsnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJHJvdXRlJywgJyRhbmNob3JTY3JvbGwnLCAnJGNvbXBpbGUnLAogICAgICAgICAgICAgICAgICAgICAgICckY29udHJvbGxlcicsCiAgICAgICAgICAgICAgIGZ1bmN0aW9uKCRodHRwLCAgICR0ZW1wbGF0ZUNhY2hlLCAgICRyb3V0ZSwgICAkYW5jaG9yU2Nyb2xsLCAgICRjb21waWxlLAogICAgICAgICAgICAgICAgICAgICAgICAkY29udHJvbGxlcikgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0VDQScsCiAgICB0ZXJtaW5hbDogdHJ1ZSwKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgIHZhciBsYXN0U2NvcGUsCiAgICAgICAgICBvbmxvYWRFeHAgPSBhdHRyLm9ubG9hZCB8fCAnJzsKCiAgICAgIHNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3VjY2VzcycsIHVwZGF0ZSk7CiAgICAgIHVwZGF0ZSgpOwoKCiAgICAgIGZ1bmN0aW9uIGRlc3Ryb3lMYXN0U2NvcGUoKSB7CiAgICAgICAgaWYgKGxhc3RTY29wZSkgewogICAgICAgICAgbGFzdFNjb3BlLiRkZXN0cm95KCk7CiAgICAgICAgICBsYXN0U2NvcGUgPSBudWxsOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZnVuY3Rpb24gY2xlYXJDb250ZW50KCkgewogICAgICAgIGVsZW1lbnQuaHRtbCgnJyk7CiAgICAgICAgZGVzdHJveUxhc3RTY29wZSgpOwogICAgICB9CgogICAgICBmdW5jdGlvbiB1cGRhdGUoKSB7CiAgICAgICAgdmFyIGxvY2FscyA9ICRyb3V0ZS5jdXJyZW50ICYmICRyb3V0ZS5jdXJyZW50LmxvY2FscywKICAgICAgICAgICAgdGVtcGxhdGUgPSBsb2NhbHMgJiYgbG9jYWxzLiR0ZW1wbGF0ZTsKCiAgICAgICAgaWYgKHRlbXBsYXRlKSB7CiAgICAgICAgICBlbGVtZW50Lmh0bWwodGVtcGxhdGUpOwogICAgICAgICAgZGVzdHJveUxhc3RTY29wZSgpOwoKICAgICAgICAgIHZhciBsaW5rID0gJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKSwKICAgICAgICAgICAgICBjdXJyZW50ID0gJHJvdXRlLmN1cnJlbnQsCiAgICAgICAgICAgICAgY29udHJvbGxlcjsKCiAgICAgICAgICBsYXN0U2NvcGUgPSBjdXJyZW50LnNjb3BlID0gc2NvcGUuJG5ldygpOwogICAgICAgICAgaWYgKGN1cnJlbnQuY29udHJvbGxlcikgewogICAgICAgICAgICBsb2NhbHMuJHNjb3BlID0gbGFzdFNjb3BlOwogICAgICAgICAgICBjb250cm9sbGVyID0gJGNvbnRyb2xsZXIoY3VycmVudC5jb250cm9sbGVyLCBsb2NhbHMpOwogICAgICAgICAgICBlbGVtZW50LmNvbnRlbnRzKCkuZGF0YSgnJG5nQ29udHJvbGxlckNvbnRyb2xsZXInLCBjb250cm9sbGVyKTsKICAgICAgICAgIH0KCiAgICAgICAgICBsaW5rKGxhc3RTY29wZSk7CiAgICAgICAgICBsYXN0U2NvcGUuJGVtaXQoJyR2aWV3Q29udGVudExvYWRlZCcpOwogICAgICAgICAgbGFzdFNjb3BlLiRldmFsKG9ubG9hZEV4cCk7CgogICAgICAgICAgLy8gJGFuY2hvclNjcm9sbCBtaWdodCBsaXN0ZW4gb24gZXZlbnQuLi4KICAgICAgICAgICRhbmNob3JTY3JvbGwoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY2xlYXJDb250ZW50KCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKfV07CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6c2NyaXB0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBMb2FkIGNvbnRlbnQgb2YgYSBzY3JpcHQgdGFnLCB3aXRoIHR5cGUgYHRleHQvbmctdGVtcGxhdGVgLCBpbnRvIGAkdGVtcGxhdGVDYWNoZWAsIHNvIHRoYXQgdGhlCiAqIHRlbXBsYXRlIGNhbiBiZSB1c2VkIGJ5IGBuZ0luY2x1ZGVgLCBgbmdWaWV3YCBvciBkaXJlY3RpdmUgdGVtcGxhdGVzLgogKgogKiBAcmVzdHJpY3QgRQogKiBAcGFyYW0geyd0ZXh0L25nLXRlbXBsYXRlJ30gdHlwZSBtdXN0IGJlIHNldCB0byBgJ3RleHQvbmctdGVtcGxhdGUnYAogKgogKiBAZXhhbXBsZQogIDxkb2M6ZXhhbXBsZT4KICAgIDxkb2M6c291cmNlPgogICAgICA8c2NyaXB0IHR5cGU9InRleHQvbmctdGVtcGxhdGUiIGlkPSIvdHBsLmh0bWwiPgogICAgICAgIENvbnRlbnQgb2YgdGhlIHRlbXBsYXRlLgogICAgICA8L3NjcmlwdD4KCiAgICAgIDxhIG5nLWNsaWNrPSJjdXJyZW50VHBsPScvdHBsLmh0bWwnIiBpZD0idHBsLWxpbmsiPkxvYWQgaW5saW5lZCB0ZW1wbGF0ZTwvYT4KICAgICAgPGRpdiBpZD0idHBsLWNvbnRlbnQiIG5nLWluY2x1ZGUgc3JjPSJjdXJyZW50VHBsIj48L2Rpdj4KICAgIDwvZG9jOnNvdXJjZT4KICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZSBkZWZpbmVkIGluc2lkZSBzY3JpcHQgdGFnJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZWxlbWVudCgnI3RwbC1saW5rJykuY2xpY2soKTsKICAgICAgICBleHBlY3QoZWxlbWVudCgnI3RwbC1jb250ZW50JykudGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRoZSB0ZW1wbGF0ZS8pOwogICAgICB9KTsKICAgIDwvZG9jOnNjZW5hcmlvPgogIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgc2NyaXB0RGlyZWN0aXZlID0gWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRScsCiAgICB0ZXJtaW5hbDogdHJ1ZSwKICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgaWYgKGF0dHIudHlwZSA9PSAndGV4dC9uZy10ZW1wbGF0ZScpIHsKICAgICAgICB2YXIgdGVtcGxhdGVVcmwgPSBhdHRyLmlkLAogICAgICAgICAgICAvLyBJRSBpcyBub3QgY29uc2lzdGVudCwgaW4gc2NyaXB0cyB3ZSBoYXZlIHRvIHJlYWQgLnRleHQgYnV0IGluIG90aGVyIG5vZGVzIHdlIGhhdmUgdG8gcmVhZCAudGV4dENvbnRlbnQKICAgICAgICAgICAgdGV4dCA9IGVsZW1lbnRbMF0udGV4dDsKCiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0KHRlbXBsYXRlVXJsLCB0ZXh0KTsKICAgICAgfQogICAgfQogIH07Cn1dOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOnNlbGVjdAogKiBAcmVzdHJpY3QgRQogKgogKiBAZGVzY3JpcHRpb24KICogSFRNTCBgU0VMRUNUYCBlbGVtZW50IHdpdGggYW5ndWxhciBkYXRhLWJpbmRpbmcuCiAqCiAqICMgYG5nT3B0aW9uc2AKICoKICogT3B0aW9uYWxseSBgbmdPcHRpb25zYCBhdHRyaWJ1dGUgY2FuIGJlIHVzZWQgdG8gZHluYW1pY2FsbHkgZ2VuZXJhdGUgYSBsaXN0IG9mIGA8b3B0aW9uPmAKICogZWxlbWVudHMgZm9yIGEgYDxzZWxlY3Q+YCBlbGVtZW50IHVzaW5nIGFuIGFycmF5IG9yIGFuIG9iamVjdCBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZQogKiBgbmdPcHRpb25zYCBleHByZXNzaW9uLgogKsudy50KICogV2hlbiBhbiBpdGVtIGluIHRoZSBzZWxlY3QgbWVudSBpcyBzZWxlY3QsIHRoZSB2YWx1ZSBvZiBhcnJheSBlbGVtZW50IG9yIG9iamVjdCBwcm9wZXJ0eQogKiByZXByZXNlbnRlZCBieSB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIGlkZW50aWZpZWQgYnkgdGhlIGBuZ01vZGVsYAogKiBkaXJlY3RpdmUgb2YgdGhlIHBhcmVudCBzZWxlY3QgZWxlbWVudC4KICoKICogT3B0aW9uYWxseSwgYSBzaW5nbGUgaGFyZC1jb2RlZCBgPG9wdGlvbj5gIGVsZW1lbnQsIHdpdGggdGhlIHZhbHVlIHNldCB0byBhbiBlbXB0eSBzdHJpbmcsIGNhbgogKiBiZSBuZXN0ZWQgaW50byB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50LiBUaGlzIGVsZW1lbnQgd2lsbCB0aGVuIHJlcHJlc2VudCBgbnVsbGAgb3IgIm5vdCBzZWxlY3RlZCIKICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi4KICoKICogTm90ZTogYG5nT3B0aW9uc2AgcHJvdmlkZXMgaXRlcmF0b3IgZmFjaWxpdHkgZm9yIGA8b3B0aW9uPmAgZWxlbWVudCB3aGljaCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkCiAqIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IHdoZW4geW91IHdhbnQgdGhlCiAqIGBzZWxlY3RgIG1vZGVsIHRvIGJlIGJvdW5kIHRvIGEgbm9uLXN0cmluZyB2YWx1ZS4gVGhpcyBpcyBiZWNhdXNlIGFuIG9wdGlvbiBlbGVtZW50IGNhbiBjdXJyZW50bHkKICogYmUgYm91bmQgdG8gc3RyaW5nIHZhbHVlcyBvbmx5LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBhc3NpZ25hYmxlIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFRoZSBjb250cm9sIGlzIGNvbnNpZGVyZWQgdmFsaWQgb25seSBpZiB2YWx1ZSBpcyBlbnRlcmVkLgogKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8KICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuCiAqIEBwYXJhbSB7Y29tcHJlaGVuc2lvbl9leHByZXNzaW9uPX0gbmdPcHRpb25zIGluIG9uZSBvZiB0aGUgZm9sbG93aW5nIGZvcm1zOgogKgogKiAgICogZm9yIGFycmF5IGRhdGEgc291cmNlczoKICogICAgICogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgCiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YAogKiAgICAgKiBgbGFiZWxgICAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAKICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAKICogICAqIGZvciBvYmplY3QgZGF0YSBzb3VyY2VzOgogKiAgICAgKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YAogKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YAogKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yIChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGAKICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgCiAqICAgICAgICAgKipgZm9yYCBgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YAogKgogKiBXaGVyZToKICoKICogICAqIGBhcnJheWAgLyBgb2JqZWN0YDogYW4gZXhwcmVzc2lvbiB3aGljaCBldmFsdWF0ZXMgdG8gYW4gYXJyYXkgLyBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLgogKiAgICogYHZhbHVlYDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBlYWNoIGl0ZW0gaW4gdGhlIGBhcnJheWAgb3IgZWFjaCBwcm9wZXJ0eSB2YWx1ZQogKiAgICAgIG9mIGBvYmplY3RgIGR1cmluZyBpdGVyYXRpb24uCiAqICAgKiBga2V5YDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBhIHByb3BlcnR5IG5hbWUgaW4gYG9iamVjdGAgZHVyaW5nIGl0ZXJhdGlvbi4KICogICAqIGBsYWJlbGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdGhlIGxhYmVsIGZvciBgPG9wdGlvbj5gIGVsZW1lbnQuIFRoZQogKiAgICAgYGV4cHJlc3Npb25gIHdpbGwgbW9zdCBsaWtlbHkgcmVmZXIgdG8gdGhlIGB2YWx1ZWAgdmFyaWFibGUgKGUuZy4gYHZhbHVlLnByb3BlcnR5TmFtZWApLgogKiAgICogYHNlbGVjdGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIG9mIHRoZSBwYXJlbnQgYDxzZWxlY3Q+YAogKiAgICAgIGVsZW1lbnQuIElmIG5vdCBzcGVjaWZpZWQsIGBzZWxlY3RgIGV4cHJlc3Npb24gd2lsbCBkZWZhdWx0IHRvIGB2YWx1ZWAuCiAqICAgKiBgZ3JvdXBgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHVzZWQgdG8gZ3JvdXAgb3B0aW9ucyB1c2luZyB0aGUgYDxvcHRncm91cD5gCiAqICAgICAgRE9NIGVsZW1lbnQuCiAqCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgZnVuY3Rpb24gTXlDbnRybCgkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS5jb2xvcnMgPSBbCiAgICAgICAgICAgIHtuYW1lOidibGFjaycsIHNoYWRlOidkYXJrJ30sCiAgICAgICAgICAgIHtuYW1lOid3aGl0ZScsIHNoYWRlOidsaWdodCd9LAogICAgICAgICAgICB7bmFtZToncmVkJywgc2hhZGU6J2RhcmsnfSwKICAgICAgICAgICAge25hbWU6J2JsdWUnLCBzaGFkZTonZGFyayd9LAogICAgICAgICAgICB7bmFtZToneWVsbG93Jywgc2hhZGU6J2xpZ2h0J30KICAgICAgICAgIF07CiAgICAgICAgICAkc2NvcGUuY29sb3IgPSAkc2NvcGUuY29sb3JzWzJdOyAvLyByZWQKICAgICAgICB9CiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJNeUNudHJsIj4KICAgICAgICAgIDx1bD4KICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD0iY29sb3IgaW4gY29sb3JzIj4KICAgICAgICAgICAgICBOYW1lOiA8aW5wdXQgbmctbW9kZWw9ImNvbG9yLm5hbWUiPgogICAgICAgICAgICAgIFs8YSBocmVmIG5nLWNsaWNrPSJjb2xvcnMuc3BsaWNlKCRpbmRleCwgMSkiPlg8L2E+XQogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgWzxhIGhyZWYgbmctY2xpY2s9ImNvbG9ycy5wdXNoKHt9KSI+YWRkPC9hPl0KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8aHIvPgogICAgICAgICAgQ29sb3IgKG51bGwgbm90IGFsbG93ZWQpOgogICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0iY29sb3IiIG5nLW9wdGlvbnM9ImMubmFtZSBmb3IgYyBpbiBjb2xvcnMiPjwvc2VsZWN0Pjxicj4KCiAgICAgICAgICBDb2xvciAobnVsbCBhbGxvd2VkKToKICAgICAgICAgIDxzcGFuICBjbGFzcz0ibnVsbGFibGUiPgogICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJjb2xvciIgbmctb3B0aW9ucz0iYy5uYW1lIGZvciBjIGluIGNvbG9ycyI+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj4tLSBjaG9zZSBjb2xvciAtLTwvb3B0aW9uPgogICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgIDwvc3Bhbj48YnIvPgoKICAgICAgICAgIENvbG9yIGdyb3VwZWQgYnkgc2hhZGU6CiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJjb2xvciIgbmctb3B0aW9ucz0iYy5uYW1lIGdyb3VwIGJ5IGMuc2hhZGUgZm9yIGMgaW4gY29sb3JzIj4KICAgICAgICAgIDwvc2VsZWN0Pjxici8+CgoKICAgICAgICAgIFNlbGVjdCA8YSBocmVmIG5nLWNsaWNrPSJjb2xvcj17bmFtZTonbm90IGluIGxpc3QnfSI+Ym9ndXM8L2E+Ljxicj4KICAgICAgICAgIDxoci8+CiAgICAgICAgICBDdXJyZW50bHkgc2VsZWN0ZWQ6IHt7IHtzZWxlY3RlZF9jb2xvcjpjb2xvcn0gIH19CiAgICAgICAgICA8ZGl2IHN0eWxlPSJib3JkZXI6c29saWQgMXB4IGJsYWNrOyBoZWlnaHQ6MjBweCIKICAgICAgICAgICAgICAgbmctc3R5bGU9InsnYmFja2dyb3VuZC1jb2xvcic6Y29sb3IubmFtZX0iPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1vcHRpb25zJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpjb2xvcn0nKSkudG9NYXRjaCgncmVkJyk7CiAgICAgICAgICAgc2VsZWN0KCdjb2xvcicpLm9wdGlvbignMCcpOwogICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6Y29sb3J9JykpLnRvTWF0Y2goJ2JsYWNrJyk7CiAgICAgICAgICAgdXNpbmcoJy5udWxsYWJsZScpLnNlbGVjdCgnY29sb3InKS5vcHRpb24oJycpOwogICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6Y29sb3J9JykpLnRvTWF0Y2goJ251bGwnKTsKICAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICovCgp2YXIgbmdPcHRpb25zRGlyZWN0aXZlID0gdmFsdWVGbih7IHRlcm1pbmFsOiB0cnVlIH0pOwp2YXIgc2VsZWN0RGlyZWN0aXZlID0gWyckY29tcGlsZScsICckcGFyc2UnLCBmdW5jdGlvbigkY29tcGlsZSwgICAkcGFyc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIC8vMDAwMDExMTExMDAwMDAwMDAwMDAyMjIyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDMzMzMwMDAwMDAwMDAwMDAwNDQ0NDQ0NDQ0NDQ0NDQ0NDQwMDAwMDAwMDA1NTU1NTU1NTU1NTU1NTU1NTAwMDAwMDA2NjY2NjY2NjY2NjY2NjY2NjAwMDAwMDAwMDAwMDAwMDc3NzcKICB2YXIgTkdfT1BUSU9OU19SRUdFWFAgPSAvXlxzKiguKj8pKD86XHMrYXNccysoLio/KSk/KD86XHMrZ3JvdXBccytieVxzKyguKikpP1xzK2ZvclxzKyg/OihbXCRcd11bXCRcd1xkXSopfCg/OlwoXHMqKFtcJFx3XVtcJFx3XGRdKilccyosXHMqKFtcJFx3XVtcJFx3XGRdKilccypcKSkpXHMraW5ccysoLiopJC8sCiAgICAgIG51bGxNb2RlbEN0cmwgPSB7JHNldFZpZXdWYWx1ZTogbm9vcH07CgogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgcmVxdWlyZTogWydzZWxlY3QnLCAnP25nTW9kZWwnXSwKICAgIGNvbnRyb2xsZXI6IFsnJGVsZW1lbnQnLCAnJHNjb3BlJywgJyRhdHRycycsIGZ1bmN0aW9uKCRlbGVtZW50LCAkc2NvcGUsICRhdHRycykgewogICAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgICBvcHRpb25zTWFwID0ge30sCiAgICAgICAgICBuZ01vZGVsQ3RybCA9IG51bGxNb2RlbEN0cmwsCiAgICAgICAgICBudWxsT3B0aW9uLAogICAgICAgICAgdW5rbm93bk9wdGlvbjsKCgogICAgICBzZWxmLmRhdGFib3VuZCA9ICRhdHRycy5uZ01vZGVsOwoKCiAgICAgIHNlbGYuaW5pdCA9IGZ1bmN0aW9uKG5nTW9kZWxDdHJsXywgbnVsbE9wdGlvbl8sIHVua25vd25PcHRpb25fKSB7CiAgICAgICAgbmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybF87CiAgICAgICAgbnVsbE9wdGlvbiA9IG51bGxPcHRpb25fOwogICAgICAgIHVua25vd25PcHRpb24gPSB1bmtub3duT3B0aW9uXzsKICAgICAgfQoKCiAgICAgIHNlbGYuYWRkT3B0aW9uID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBvcHRpb25zTWFwW3ZhbHVlXSA9IHRydWU7CgogICAgICAgIGlmIChuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID09IHZhbHVlKSB7CiAgICAgICAgICAkZWxlbWVudC52YWwodmFsdWUpOwogICAgICAgICAgaWYgKHVua25vd25PcHRpb24ucGFyZW50KCkpIHVua25vd25PcHRpb24ucmVtb3ZlKCk7CiAgICAgICAgfQogICAgICB9OwoKCiAgICAgIHNlbGYucmVtb3ZlT3B0aW9uID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZiAodGhpcy5oYXNPcHRpb24odmFsdWUpKSB7CiAgICAgICAgICBkZWxldGUgb3B0aW9uc01hcFt2YWx1ZV07CiAgICAgICAgICBpZiAobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA9PSB2YWx1ZSkgewogICAgICAgICAgICB0aGlzLnJlbmRlclVua25vd25PcHRpb24odmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKCgogICAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBmdW5jdGlvbih2YWwpIHsKICAgICAgICB2YXIgdW5rbm93blZhbCA9ICc/ICcgKyBoYXNoS2V5KHZhbCkgKyAnID8nOwogICAgICAgIHVua25vd25PcHRpb24udmFsKHVua25vd25WYWwpOwogICAgICAgICRlbGVtZW50LnByZXBlbmQodW5rbm93bk9wdGlvbik7CiAgICAgICAgJGVsZW1lbnQudmFsKHVua25vd25WYWwpOwogICAgICAgIHVua25vd25PcHRpb24ucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTsgLy8gbmVlZGVkIGZvciBJRQogICAgICB9CgoKICAgICAgc2VsZi5oYXNPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiBvcHRpb25zTWFwLmhhc093blByb3BlcnR5KHZhbHVlKTsKICAgICAgfQoKICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAvLyBkaXNhYmxlIHVua25vd24gb3B0aW9uIHNvIHRoYXQgd2UgZG9uJ3QgZG8gd29yayB3aGVuIHRoZSB3aG9sZSBzZWxlY3QgaXMgYmVpbmcgZGVzdHJveWVkCiAgICAgICAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uID0gbm9vcDsKICAgICAgfSk7CiAgICB9XSwKCiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHsKICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZwogICAgICBpZiAoIWN0cmxzWzFdKSByZXR1cm47CgogICAgICB2YXIgc2VsZWN0Q3RybCA9IGN0cmxzWzBdLAogICAgICAgICAgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXSwKICAgICAgICAgIG11bHRpcGxlID0gYXR0ci5tdWx0aXBsZSwKICAgICAgICAgIG9wdGlvbnNFeHAgPSBhdHRyLm5nT3B0aW9ucywKICAgICAgICAgIG51bGxPcHRpb24gPSBmYWxzZSwgLy8gaWYgZmFsc2UsIHVzZXIgd2lsbCBub3QgYmUgYWJsZSB0byBzZWxlY3QgaXQgKHVzZWQgYnkgbmdPcHRpb25zKQogICAgICAgICAgZW1wdHlPcHRpb24sCiAgICAgICAgICAvLyB3ZSBjYW4ndCBqdXN0IGpxTGl0ZSgnPG9wdGlvbj4nKSBzaW5jZSBqcUxpdGUgaXMgbm90IHNtYXJ0IGVub3VnaAogICAgICAgICAgLy8gdG8gY3JlYXRlIGl0IGluIDxzZWxlY3Q+IGFuZCBJRSBiYXJmcyBvdGhlcndpc2UuCiAgICAgICAgICBvcHRpb25UZW1wbGF0ZSA9IGpxTGl0ZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKSksCiAgICAgICAgICBvcHRHcm91cFRlbXBsYXRlID1qcUxpdGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0Z3JvdXAnKSksCiAgICAgICAgICB1bmtub3duT3B0aW9uID0gb3B0aW9uVGVtcGxhdGUuY2xvbmUoKTsKCiAgICAgIC8vIGZpbmQgIm51bGwiIG9wdGlvbgogICAgICBmb3IodmFyIGkgPSAwLCBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW4oKSwgaWkgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLnZhbHVlID09ICcnKSB7CiAgICAgICAgICBlbXB0eU9wdGlvbiA9IG51bGxPcHRpb24gPSBjaGlsZHJlbi5lcShpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQoKICAgICAgc2VsZWN0Q3RybC5pbml0KG5nTW9kZWxDdHJsLCBudWxsT3B0aW9uLCB1bmtub3duT3B0aW9uKTsKCiAgICAgIC8vIHJlcXVpcmVkIHZhbGlkYXRvcgogICAgICBpZiAobXVsdGlwbGUgJiYgKGF0dHIucmVxdWlyZWQgfHwgYXR0ci5uZ1JlcXVpcmVkKSkgewogICAgICAgIHZhciByZXF1aXJlZFZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3JlcXVpcmVkJywgIWF0dHIucmVxdWlyZWQgfHwgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCkpOwogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH07CgogICAgICAgIG5nTW9kZWxDdHJsLiRwYXJzZXJzLnB1c2gocmVxdWlyZWRWYWxpZGF0b3IpOwogICAgICAgIG5nTW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnVuc2hpZnQocmVxdWlyZWRWYWxpZGF0b3IpOwoKICAgICAgICBhdHRyLiRvYnNlcnZlKCdyZXF1aXJlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgcmVxdWlyZWRWYWxpZGF0b3IobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmIChvcHRpb25zRXhwKSBPcHRpb25zKHNjb3BlLCBlbGVtZW50LCBuZ01vZGVsQ3RybCk7CiAgICAgIGVsc2UgaWYgKG11bHRpcGxlKSBNdWx0aXBsZShzY29wZSwgZWxlbWVudCwgbmdNb2RlbEN0cmwpOwogICAgICBlbHNlIFNpbmdsZShzY29wZSwgZWxlbWVudCwgbmdNb2RlbEN0cmwsIHNlbGVjdEN0cmwpOwoKCiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCgoKICAgICAgZnVuY3Rpb24gU2luZ2xlKHNjb3BlLCBzZWxlY3RFbGVtZW50LCBuZ01vZGVsQ3RybCwgc2VsZWN0Q3RybCkgewogICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciB2aWV3VmFsdWUgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlOwoKICAgICAgICAgIGlmIChzZWxlY3RDdHJsLmhhc09wdGlvbih2aWV3VmFsdWUpKSB7CiAgICAgICAgICAgIGlmICh1bmtub3duT3B0aW9uLnBhcmVudCgpKSB1bmtub3duT3B0aW9uLnJlbW92ZSgpOwogICAgICAgICAgICBzZWxlY3RFbGVtZW50LnZhbCh2aWV3VmFsdWUpOwogICAgICAgICAgICBpZiAodmlld1ZhbHVlID09PSAnJykgZW1wdHlPcHRpb24ucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTsgLy8gdG8gbWFrZSBJRTkgaGFwcHkKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2aWV3VmFsdWUpICYmIGVtcHR5T3B0aW9uKSB7CiAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC52YWwoJycpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNlbGVjdEN0cmwucmVuZGVyVW5rbm93bk9wdGlvbih2aWV3VmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgc2VsZWN0RWxlbWVudC5iaW5kKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKHVua25vd25PcHRpb24ucGFyZW50KCkpIHVua25vd25PcHRpb24ucmVtb3ZlKCk7CiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoc2VsZWN0RWxlbWVudC52YWwoKSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gTXVsdGlwbGUoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGN0cmwpIHsKICAgICAgICB2YXIgbGFzdFZpZXc7CiAgICAgICAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgaXRlbXMgPSBuZXcgSGFzaE1hcChjdHJsLiR2aWV3VmFsdWUpOwogICAgICAgICAgZm9yRWFjaChzZWxlY3RFbGVtZW50LmNoaWxkcmVuKCksIGZ1bmN0aW9uKG9wdGlvbikgewogICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBpc0RlZmluZWQoaXRlbXMuZ2V0KG9wdGlvbi52YWx1ZSkpOwogICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gd2UgaGF2ZSB0byBkbyBpdCBvbiBlYWNoIHdhdGNoIHNpbmNlIG5nTW9kZWwgd2F0Y2hlcyByZWZlcmVuY2UsIGJ1dAogICAgICAgIC8vIHdlIG5lZWQgdG8gd29yayBvZiBhbiBhcnJheSwgc28gd2UgbmVlZCB0byBzZWUgaWYgYW55dGhpbmcgd2FzIGluc2VydGVkL3JlbW92ZWQKICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gc2VsZWN0TXVsdGlwbGVXYXRjaCgpIHsKICAgICAgICAgIGlmICghZXF1YWxzKGxhc3RWaWV3LCBjdHJsLiR2aWV3VmFsdWUpKSB7CiAgICAgICAgICAgIGxhc3RWaWV3ID0gY29weShjdHJsLiR2aWV3VmFsdWUpOwogICAgICAgICAgICBjdHJsLiRyZW5kZXIoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgc2VsZWN0RWxlbWVudC5iaW5kKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGFycmF5ID0gW107CiAgICAgICAgICAgIGZvckVhY2goc2VsZWN0RWxlbWVudC5jaGlsZHJlbigpLCBmdW5jdGlvbihvcHRpb24pIHsKICAgICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICBhcnJheS5wdXNoKG9wdGlvbi52YWx1ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGFycmF5KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBmdW5jdGlvbiBPcHRpb25zKHNjb3BlLCBzZWxlY3RFbGVtZW50LCBjdHJsKSB7CiAgICAgICAgdmFyIG1hdGNoOwoKICAgICAgICBpZiAoISAobWF0Y2ggPSBvcHRpb25zRXhwLm1hdGNoKE5HX09QVElPTlNfUkVHRVhQKSkpIHsKICAgICAgICAgIHRocm93IEVycm9yKAogICAgICAgICAgICAiRXhwZWN0ZWQgbmdPcHRpb25zIGluIGZvcm0gb2YgJ19zZWxlY3RfIChhcyBfbGFiZWxfKT8gZm9yIChfa2V5XywpP192YWx1ZV8gaW4gX2NvbGxlY3Rpb25fJyIgKwogICAgICAgICAgICAiIGJ1dCBnb3QgJyIgKyBvcHRpb25zRXhwICsgIicuIik7CiAgICAgICAgfQoKICAgICAgICB2YXIgZGlzcGxheUZuID0gJHBhcnNlKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSwKICAgICAgICAgICAgdmFsdWVOYW1lID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNl0sCiAgICAgICAgICAgIGtleU5hbWUgPSBtYXRjaFs1XSwKICAgICAgICAgICAgZ3JvdXBCeUZuID0gJHBhcnNlKG1hdGNoWzNdIHx8ICcnKSwKICAgICAgICAgICAgdmFsdWVGbiA9ICRwYXJzZShtYXRjaFsyXSA/IG1hdGNoWzFdIDogdmFsdWVOYW1lKSwKICAgICAgICAgICAgdmFsdWVzRm4gPSAkcGFyc2UobWF0Y2hbN10pLAogICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFycmF5IG9mIGFycmF5IG9mIGV4aXN0aW5nIG9wdGlvbiBncm91cHMgaW4gRE9NLiBXZSB0cnkgdG8gcmV1c2UgdGhlc2UgaWYgcG9zc2libGUKICAgICAgICAgICAgLy8gb3B0aW9uR3JvdXBzQ2FjaGVbMF0gaXMgdGhlIG9wdGlvbnMgd2l0aCBubyBvcHRpb24gZ3JvdXAKICAgICAgICAgICAgLy8gb3B0aW9uR3JvdXBzQ2FjaGVbP11bMF0gaXMgdGhlIHBhcmVudDogZWl0aGVyIHRoZSBTRUxFQ1Qgb3IgT1BUR1JPVVAgZWxlbWVudAogICAgICAgICAgICBvcHRpb25Hcm91cHNDYWNoZSA9IFtbe2VsZW1lbnQ6IHNlbGVjdEVsZW1lbnQsIGxhYmVsOicnfV1dOwoKICAgICAgICBpZiAobnVsbE9wdGlvbikgewogICAgICAgICAgLy8gY29tcGlsZSB0aGUgZWxlbWVudCBzaW5jZSB0aGVyZSBtaWdodCBiZSBiaW5kaW5ncyBpbiBpdAogICAgICAgICAgJGNvbXBpbGUobnVsbE9wdGlvbikoc2NvcGUpOwoKICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2xhc3MsIHdoaWNoIGlzIGFkZGVkIGF1dG9tYXRpY2FsbHkgYmVjYXVzZSB3ZSByZWNvbXBpbGUgdGhlIGVsZW1lbnQgYW5kIGl0CiAgICAgICAgICAvLyBiZWNvbWVzIHRoZSBjb21waWxhdGlvbiByb290CiAgICAgICAgICBudWxsT3B0aW9uLnJlbW92ZUNsYXNzKCduZy1zY29wZScpOwoKICAgICAgICAgIC8vIHdlIG5lZWQgdG8gcmVtb3ZlIGl0IGJlZm9yZSBjYWxsaW5nIHNlbGVjdEVsZW1lbnQuaHRtbCgnJykgYmVjYXVzZSBvdGhlcndpc2UgSUUgd2lsbAogICAgICAgICAgLy8gcmVtb3ZlIHRoZSBsYWJlbCBmcm9tIHRoZSBlbGVtZW50LiB3dGY/CiAgICAgICAgICBudWxsT3B0aW9uLnJlbW92ZSgpOwogICAgICAgIH0KCiAgICAgICAgLy8gY2xlYXIgY29udGVudHMsIHdlJ2xsIGFkZCB3aGF0J3MgbmVlZGVkIGJhc2VkIG9uIHRoZSBtb2RlbAogICAgICAgIHNlbGVjdEVsZW1lbnQuaHRtbCgnJyk7CgogICAgICAgIHNlbGVjdEVsZW1lbnQuYmluZCgnY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBvcHRpb25Hcm91cCwKICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSB2YWx1ZXNGbihzY29wZSkgfHwgW10sCiAgICAgICAgICAgICAgICBsb2NhbHMgPSB7fSwKICAgICAgICAgICAgICAgIGtleSwgdmFsdWUsIG9wdGlvbkVsZW1lbnQsIGluZGV4LCBncm91cEluZGV4LCBsZW5ndGgsIGdyb3VwTGVuZ3RoOwoKICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7CiAgICAgICAgICAgICAgdmFsdWUgPSBbXTsKICAgICAgICAgICAgICBmb3IgKGdyb3VwSW5kZXggPSAwLCBncm91cExlbmd0aCA9IG9wdGlvbkdyb3Vwc0NhY2hlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgIGdyb3VwSW5kZXggPCBncm91cExlbmd0aDsKICAgICAgICAgICAgICAgICAgIGdyb3VwSW5kZXgrKykgewogICAgICAgICAgICAgICAgLy8gbGlzdCBvZiBvcHRpb25zIGZvciB0aGF0IGdyb3VwLiAoZmlyc3QgaXRlbSBoYXMgdGhlIHBhcmVudCkKICAgICAgICAgICAgICAgIG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzQ2FjaGVbZ3JvdXBJbmRleF07CgogICAgICAgICAgICAgICAgZm9yKGluZGV4ID0gMSwgbGVuZ3RoID0gb3B0aW9uR3JvdXAubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICAgICAgICBpZiAoKG9wdGlvbkVsZW1lbnQgPSBvcHRpb25Hcm91cFtpbmRleF0uZWxlbWVudClbMF0uc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgICBrZXkgPSBvcHRpb25FbGVtZW50LnZhbCgpOwogICAgICAgICAgICAgICAgICAgIGlmIChrZXlOYW1lKSBsb2NhbHNba2V5TmFtZV0gPSBrZXk7CiAgICAgICAgICAgICAgICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSBjb2xsZWN0aW9uW2tleV07CiAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaCh2YWx1ZUZuKHNjb3BlLCBsb2NhbHMpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBrZXkgPSBzZWxlY3RFbGVtZW50LnZhbCgpOwogICAgICAgICAgICAgIGlmIChrZXkgPT0gJz8nKSB7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSAnJyl7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gY29sbGVjdGlvbltrZXldOwogICAgICAgICAgICAgICAgaWYgKGtleU5hbWUpIGxvY2Fsc1trZXlOYW1lXSA9IGtleTsKICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVGbihzY29wZSwgbG9jYWxzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICBjdHJsLiRyZW5kZXIgPSByZW5kZXI7CgogICAgICAgIC8vIFRPRE8odm9qdGEpOiBjYW4ndCB3ZSBvcHRpbWl6ZSB0aGlzID8KICAgICAgICBzY29wZS4kd2F0Y2gocmVuZGVyKTsKCiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICAgICAgdmFyIG9wdGlvbkdyb3VwcyA9IHsnJzpbXX0sIC8vIFRlbXBvcmFyeSBsb2NhdGlvbiBmb3IgdGhlIG9wdGlvbiBncm91cHMgYmVmb3JlIHdlIHJlbmRlciB0aGVtCiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lcyA9IFsnJ10sCiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lLAogICAgICAgICAgICAgIG9wdGlvbkdyb3VwLAogICAgICAgICAgICAgIG9wdGlvbiwKICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCwgZXhpc3RpbmdPcHRpb25zLCBleGlzdGluZ09wdGlvbiwKICAgICAgICAgICAgICBtb2RlbFZhbHVlID0gY3RybC4kbW9kZWxWYWx1ZSwKICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW10sCiAgICAgICAgICAgICAga2V5cyA9IGtleU5hbWUgPyBzb3J0ZWRLZXlzKHZhbHVlcykgOiB2YWx1ZXMsCiAgICAgICAgICAgICAgZ3JvdXBMZW5ndGgsIGxlbmd0aCwKICAgICAgICAgICAgICBncm91cEluZGV4LCBpbmRleCwKICAgICAgICAgICAgICBsb2NhbHMgPSB7fSwKICAgICAgICAgICAgICBzZWxlY3RlZCwKICAgICAgICAgICAgICBzZWxlY3RlZFNldCA9IGZhbHNlLCAvLyBub3RoaW5nIGlzIHNlbGVjdGVkIHlldAogICAgICAgICAgICAgIGxhc3RFbGVtZW50LAogICAgICAgICAgICAgIGVsZW1lbnQsCiAgICAgICAgICAgICAgbGFiZWw7CgogICAgICAgICAgaWYgKG11bHRpcGxlKSB7CiAgICAgICAgICAgIHNlbGVjdGVkU2V0ID0gbmV3IEhhc2hNYXAobW9kZWxWYWx1ZSk7CiAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsVmFsdWUgPT09IG51bGwgfHwgbnVsbE9wdGlvbikgewogICAgICAgICAgICAvLyBpZiB3ZSBhcmUgbm90IG11bHRpc2VsZWN0LCBhbmQgd2UgYXJlIG51bGwgdGhlbiB3ZSBoYXZlIHRvIGFkZCB0aGUgbnVsbE9wdGlvbgogICAgICAgICAgICBvcHRpb25Hcm91cHNbJyddLnB1c2goe3NlbGVjdGVkOm1vZGVsVmFsdWUgPT09IG51bGwsIGlkOicnLCBsYWJlbDonJ30pOwogICAgICAgICAgICBzZWxlY3RlZFNldCA9IHRydWU7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gV2Ugbm93IGJ1aWxkIHVwIHRoZSBsaXN0IG9mIG9wdGlvbnMgd2UgbmVlZCAod2UgbWVyZ2UgbGF0ZXIpCiAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWVzW2tleU5hbWUgPyBsb2NhbHNba2V5TmFtZV09a2V5c1tpbmRleF06aW5kZXhdOwogICAgICAgICAgICAgICBvcHRpb25Hcm91cE5hbWUgPSBncm91cEJ5Rm4oc2NvcGUsIGxvY2FscykgfHwgJyc7CiAgICAgICAgICAgIGlmICghKG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzW29wdGlvbkdyb3VwTmFtZV0pKSB7CiAgICAgICAgICAgICAgb3B0aW9uR3JvdXAgPSBvcHRpb25Hcm91cHNbb3B0aW9uR3JvdXBOYW1lXSA9IFtdOwogICAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZXMucHVzaChvcHRpb25Hcm91cE5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkgewogICAgICAgICAgICAgIHNlbGVjdGVkID0gc2VsZWN0ZWRTZXQucmVtb3ZlKHZhbHVlRm4oc2NvcGUsIGxvY2FscykpICE9IHVuZGVmaW5lZDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzZWxlY3RlZCA9IG1vZGVsVmFsdWUgPT09IHZhbHVlRm4oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQgPSBzZWxlY3RlZFNldCB8fCBzZWxlY3RlZDsgLy8gc2VlIGlmIGF0IGxlYXN0IG9uZSBpdGVtIGlzIHNlbGVjdGVkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7IC8vIHdoYXQgd2lsbCBiZSBzZWVuIGJ5IHRoZSB1c2VyCiAgICAgICAgICAgIGxhYmVsID0gbGFiZWwgPT09IHVuZGVmaW5lZCA/ICcnIDogbGFiZWw7IC8vIGRvaW5nIGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKSB8fCAnJyBvdmVyd3JpdGVzIHplcm8gdmFsdWVzCiAgICAgICAgICAgIG9wdGlvbkdyb3VwLnB1c2goewogICAgICAgICAgICAgIGlkOiBrZXlOYW1lID8ga2V5c1tpbmRleF0gOiBpbmRleCwgICAvLyBlaXRoZXIgdGhlIGluZGV4IGludG8gYXJyYXkgb3Iga2V5IGZyb20gb2JqZWN0CiAgICAgICAgICAgICAgbGFiZWw6IGxhYmVsLAogICAgICAgICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZCAgICAgICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgaWYgd2Ugc2hvdWxkIGJlIHNlbGVjdGVkCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFtdWx0aXBsZSAmJiAhc2VsZWN0ZWRTZXQpIHsKICAgICAgICAgICAgLy8gbm90aGluZyB3YXMgc2VsZWN0ZWQsIHdlIGhhdmUgdG8gaW5zZXJ0IHRoZSB1bmRlZmluZWQgaXRlbQogICAgICAgICAgICBvcHRpb25Hcm91cHNbJyddLnVuc2hpZnQoe2lkOic/JywgbGFiZWw6JycsIHNlbGVjdGVkOnRydWV9KTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBOb3cgd2UgbmVlZCB0byB1cGRhdGUgdGhlIGxpc3Qgb2YgRE9NIG5vZGVzIHRvIG1hdGNoIHRoZSBvcHRpb25Hcm91cHMgd2UgY29tcHV0ZWQgYWJvdmUKICAgICAgICAgIGZvciAoZ3JvdXBJbmRleCA9IDAsIGdyb3VwTGVuZ3RoID0gb3B0aW9uR3JvdXBOYW1lcy5sZW5ndGg7CiAgICAgICAgICAgICAgIGdyb3VwSW5kZXggPCBncm91cExlbmd0aDsKICAgICAgICAgICAgICAgZ3JvdXBJbmRleCsrKSB7CiAgICAgICAgICAgIC8vIGN1cnJlbnQgb3B0aW9uIGdyb3VwIG5hbWUgb3IgJycgaWYgbm8gZ3JvdXAKICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lID0gb3B0aW9uR3JvdXBOYW1lc1tncm91cEluZGV4XTsKCiAgICAgICAgICAgIC8vIGxpc3Qgb2Ygb3B0aW9ucyBmb3IgdGhhdCBncm91cC4gKGZpcnN0IGl0ZW0gaGFzIHRoZSBwYXJlbnQpCiAgICAgICAgICAgIG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzW29wdGlvbkdyb3VwTmFtZV07CgogICAgICAgICAgICBpZiAob3B0aW9uR3JvdXBzQ2FjaGUubGVuZ3RoIDw9IGdyb3VwSW5kZXgpIHsKICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGdyb3cgdGhlIG9wdGlvbkdyb3VwcwogICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50ID0gewogICAgICAgICAgICAgICAgZWxlbWVudDogb3B0R3JvdXBUZW1wbGF0ZS5jbG9uZSgpLmF0dHIoJ2xhYmVsJywgb3B0aW9uR3JvdXBOYW1lKSwKICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb25Hcm91cC5sYWJlbAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgZXhpc3RpbmdPcHRpb25zID0gW2V4aXN0aW5nUGFyZW50XTsKICAgICAgICAgICAgICBvcHRpb25Hcm91cHNDYWNoZS5wdXNoKGV4aXN0aW5nT3B0aW9ucyk7CiAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5hcHBlbmQoZXhpc3RpbmdQYXJlbnQuZWxlbWVudCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZXhpc3RpbmdPcHRpb25zID0gb3B0aW9uR3JvdXBzQ2FjaGVbZ3JvdXBJbmRleF07CiAgICAgICAgICAgICAgZXhpc3RpbmdQYXJlbnQgPSBleGlzdGluZ09wdGlvbnNbMF07ICAvLyBlaXRoZXIgU0VMRUNUIChubyBncm91cCkgb3IgT1BUR1JPVVAgZWxlbWVudAoKICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIE9QVEdST1VQIGxhYmVsIGlmIG5vdCB0aGUgc2FtZS4KICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdQYXJlbnQubGFiZWwgIT0gb3B0aW9uR3JvdXBOYW1lKSB7CiAgICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudC5lbGVtZW50LmF0dHIoJ2xhYmVsJywgZXhpc3RpbmdQYXJlbnQubGFiZWwgPSBvcHRpb25Hcm91cE5hbWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBudWxsOyAgLy8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZwogICAgICAgICAgICBmb3IoaW5kZXggPSAwLCBsZW5ndGggPSBvcHRpb25Hcm91cC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgb3B0aW9uID0gb3B0aW9uR3JvdXBbaW5kZXhdOwogICAgICAgICAgICAgIGlmICgoZXhpc3RpbmdPcHRpb24gPSBleGlzdGluZ09wdGlvbnNbaW5kZXgrMV0pKSB7CiAgICAgICAgICAgICAgICAvLyByZXVzZSBlbGVtZW50cwogICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBleGlzdGluZ09wdGlvbi5lbGVtZW50OwogICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nT3B0aW9uLmxhYmVsICE9PSBvcHRpb24ubGFiZWwpIHsKICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQudGV4dChleGlzdGluZ09wdGlvbi5sYWJlbCA9IG9wdGlvbi5sYWJlbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdPcHRpb24uaWQgIT09IG9wdGlvbi5pZCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC52YWwoZXhpc3RpbmdPcHRpb24uaWQgPSBvcHRpb24uaWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nT3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgIT09IG9wdGlvbi5zZWxlY3RlZCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5wcm9wKCdzZWxlY3RlZCcsIChleGlzdGluZ09wdGlvbi5zZWxlY3RlZCA9IG9wdGlvbi5zZWxlY3RlZCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBncm93IGVsZW1lbnRzCgogICAgICAgICAgICAgICAgLy8gaWYgaXQncyBhIG51bGwgb3B0aW9uCiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmlkID09PSAnJyAmJiBudWxsT3B0aW9uKSB7CiAgICAgICAgICAgICAgICAgIC8vIHB1dCBiYWNrIHRoZSBwcmUtY29tcGlsZWQgZWxlbWVudAogICAgICAgICAgICAgICAgICBlbGVtZW50ID0gbnVsbE9wdGlvbjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIC8vIGpRdWVyeSh2MS40LjIpIEJ1ZzogV2Ugc2hvdWxkIGJlIGFibGUgdG8gY2hhaW4gdGhlIG1ldGhvZCBjYWxscywgYnV0CiAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnkgb24gc29tZSBicm93c2VyIHRoZSAudGV4dCgpIHJldHVybnMgYSBzdHJpbmcKICAgICAgICAgICAgICAgICAgLy8gcmF0aGVyIHRoZW4gdGhlIGVsZW1lbnQuCiAgICAgICAgICAgICAgICAgIChlbGVtZW50ID0gb3B0aW9uVGVtcGxhdGUuY2xvbmUoKSkKICAgICAgICAgICAgICAgICAgICAgIC52YWwob3B0aW9uLmlkKQogICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NlbGVjdGVkJywgb3B0aW9uLnNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgICAgLnRleHQob3B0aW9uLmxhYmVsKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMucHVzaChleGlzdGluZ09wdGlvbiA9IHsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb24ubGFiZWwsCiAgICAgICAgICAgICAgICAgICAgaWQ6IG9wdGlvbi5pZCwKICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogb3B0aW9uLnNlbGVjdGVkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChsYXN0RWxlbWVudCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5hZnRlcihlbGVtZW50KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50LmVsZW1lbnQuYXBwZW5kKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLyByZW1vdmUgYW55IGV4Y2Vzc2l2ZSBPUFRJT05zIGluIGEgZ3JvdXAKICAgICAgICAgICAgaW5kZXgrKzsgLy8gaW5jcmVtZW50IHNpbmNlIHRoZSBleGlzdGluZ09wdGlvbnNbMF0gaXMgcGFyZW50IGVsZW1lbnQgbm90IE9QVElPTgogICAgICAgICAgICB3aGlsZShleGlzdGluZ09wdGlvbnMubGVuZ3RoID4gaW5kZXgpIHsKICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMucG9wKCkuZWxlbWVudC5yZW1vdmUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy8gcmVtb3ZlIGFueSBleGNlc3NpdmUgT1BUR1JPVVBzIGZyb20gc2VsZWN0CiAgICAgICAgICB3aGlsZShvcHRpb25Hcm91cHNDYWNoZS5sZW5ndGggPiBncm91cEluZGV4KSB7CiAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlLnBvcCgpWzBdLmVsZW1lbnQucmVtb3ZlKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9XTsKCnZhciBvcHRpb25EaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkgewogIHZhciBudWxsU2VsZWN0Q3RybCA9IHsKICAgIGFkZE9wdGlvbjogbm9vcCwKICAgIHJlbW92ZU9wdGlvbjogbm9vcAogIH07CgogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgcHJpb3JpdHk6IDEwMCwKICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgaWYgKGlzVW5kZWZpbmVkKGF0dHIudmFsdWUpKSB7CiAgICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC50ZXh0KCksIHRydWUpOwogICAgICAgIGlmICghaW50ZXJwb2xhdGVGbikgewogICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIGVsZW1lbnQudGV4dCgpKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICB2YXIgc2VsZWN0Q3RybE5hbWUgPSAnJHNlbGVjdENvbnRyb2xsZXInLAogICAgICAgICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudCgpLAogICAgICAgICAgICBzZWxlY3RDdHJsID0gcGFyZW50LmRhdGEoc2VsZWN0Q3RybE5hbWUpIHx8CiAgICAgICAgICAgICAgcGFyZW50LnBhcmVudCgpLmRhdGEoc2VsZWN0Q3RybE5hbWUpOyAvLyBpbiBjYXNlIHdlIGFyZSBpbiBvcHRncm91cAoKICAgICAgICBpZiAoc2VsZWN0Q3RybCAmJiBzZWxlY3RDdHJsLmRhdGFib3VuZCkgewogICAgICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIE9wZXJhIGRlZmF1bHRzIHRvIHRydWUgYW5kIGlmIG5vdCBvdmVycmlkZGVuIHRoaXMgbWVzc2VzIHVwIHRoZSByZXBlYXRlci4KICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdGhlIHZpZXcgdG8gZHJpdmUgdGhlIGluaXRpYWxpemF0aW9uIG9mIHRoZSBtb2RlbCBhbnl3YXkuCiAgICAgICAgICBlbGVtZW50LnByb3AoJ3NlbGVjdGVkJywgZmFsc2UpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWxlY3RDdHJsID0gbnVsbFNlbGVjdEN0cmw7CiAgICAgICAgfQoKICAgICAgICBpZiAoaW50ZXJwb2xhdGVGbikgewogICAgICAgICAgc2NvcGUuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHsKICAgICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIG5ld1ZhbCk7CiAgICAgICAgICAgIGlmIChuZXdWYWwgIT09IG9sZFZhbCkgc2VsZWN0Q3RybC5yZW1vdmVPcHRpb24ob2xkVmFsKTsKICAgICAgICAgICAgc2VsZWN0Q3RybC5hZGRPcHRpb24obmV3VmFsKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWxlY3RDdHJsLmFkZE9wdGlvbihhdHRyLnZhbHVlKTsKICAgICAgICB9CgogICAgICAgIGVsZW1lbnQuYmluZCgnJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHNlbGVjdEN0cmwucmVtb3ZlT3B0aW9uKGF0dHIudmFsdWUpOwogICAgICAgIH0pOwogICAgICB9OwogICAgfQogIH0KfV07Cgp2YXIgc3R5bGVEaXJlY3RpdmUgPSB2YWx1ZUZuKHsKICByZXN0cmljdDogJ0UnLAogIHRlcm1pbmFsOiB0cnVlCn0pOwogIC8vdHJ5IHRvIGJpbmQgdG8ganF1ZXJ5IG5vdyBzbyB0aGF0IG9uZSBjYW4gd3JpdGUgYW5ndWxhci5lbGVtZW50KCkucmVhZCgpCiAgLy9idXQgd2Ugd2lsbCByZWJpbmQgb24gYm9vdHN0cmFwIGFnYWluLgogIGJpbmRKUXVlcnkoKTsKCiAgcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpOwoKICBqcUxpdGUoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgYW5ndWxhckluaXQoZG9jdW1lbnQsIGJvb3RzdHJhcCk7CiAgfSk7Cgp9KSh3aW5kb3csIGRvY3VtZW50KTsKYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykuYXBwZW5kKCc8c3R5bGUgdHlwZT0idGV4dC9jc3MiPkBjaGFyc2V0ICJVVEYtOCI7W25nXFw6Y2xvYWtdLFtuZy1jbG9ha10sW2RhdGEtbmctY2xvYWtdLFt4LW5nLWNsb2FrXSwubmctY2xvYWssLngtbmctY2xvYWt7ZGlzcGxheTpub25lO31uZ1xcOmZvcm17ZGlzcGxheTpibG9jazt9PC9zdHlsZT4nKTsKCihmdW5jdGlvbihmYWN0b3J5KSB7CmlmICh0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIHsKZGVmaW5lKFsianF1ZXJ5IiwgImFuZ3VsYXIiLCAianF1ZXJ5Lm1vYmlsZSJdLCBmYWN0b3J5KTsKfSBlbHNlIHsKZmFjdG9yeSh3aW5kb3cualF1ZXJ5LCB3aW5kb3cuYW5ndWxhcik7Cn0KfSkoZnVuY3Rpb24oJCwgYW5ndWxhcikgewooZnVuY3Rpb24gKCQpIHsKICAgIGZ1bmN0aW9uIHBhdGNoKG9iaiwgZm5OYW1lLCBjYWxsYmFjaykgewogICAgICAgIHZhciBfb2xkID0gb2JqW2ZuTmFtZV07CiAgICAgICAgb2JqW2ZuTmFtZV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhfb2xkLCB0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBwYXRjaCBmb3Igc2VsZWN0bWVudSB3aGVuIGl0IG9wZW5zIGEgbWVudSBpbiBhbiBvd24gcGFnZQogICAgJCggZG9jdW1lbnQgKS5iaW5kKCAic2VsZWN0bWVudWJlZm9yZWNyZWF0ZSIsIGZ1bmN0aW9uKCBldmVudCApIHsKICAgICAgICB2YXIgc2VsZWN0bWVudVdpZGdldCA9ICQoIGV2ZW50LnRhcmdldCApLmRhdGEoICJzZWxlY3RtZW51IiApOwogICAgICAgIHBhdGNoKHNlbGVjdG1lbnVXaWRnZXQsICdjbG9zZScsIGZ1bmN0aW9uIChvbGQsIHNlbGYsIGFyZ3MpIHsKICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9ucy5kaXNhYmxlZCB8fCAhc2VsZi5pc09wZW4pIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoc2VsZi5tZW51VHlwZSA9PT0gInBhZ2UiKSB7CiAgICAgICAgICAgICAgICAvLyBTZWUgbW9iaWxlLmRpYWxvZyNjbG9zZSBmb3IgdGhlIHNhbWUgbG9naWMgYXMgaGVyZSEKICAgICAgICAgICAgICAgIHZhciBkc3QgPSAkLm1vYmlsZS51cmxIaXN0b3J5LmdldFByZXYoKS51cmw7CiAgICAgICAgICAgICAgICBpZiAoISQubW9iaWxlLnBhdGguaXNQYXRoKGRzdCkpIHsKICAgICAgICAgICAgICAgICAgICBkc3QgPSAkLm1vYmlsZS5wYXRoLm1ha2VVcmxBYnNvbHV0ZSgiIyIgKyBkc3QpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICQubW9iaWxlLmNoYW5nZVBhZ2UoZHN0LCB7IGNoYW5nZUhhc2g6ZmFsc2UsIGZyb21IYXNoQ2hhbmdlOnRydWUgfSk7CiAgICAgICAgICAgICAgICBzZWxmLmlzT3BlbiA9IGZhbHNlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgb2xkLmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9KTsKCiAgICAvLyBzZWxlY3RtZW51IG1heSBjcmVhdGUgcGFyZW50IGVsZW1lbnRzIGFuZCBleHRyYSBwYWdlcwogICAgcGF0Y2goJC5tb2JpbGUuc2VsZWN0bWVudS5wcm90b3R5cGUsICdkZXN0cm95JywgZnVuY3Rpb24gKG9sZCwgc2VsZiwgYXJncykgewogICAgICAgIG9sZC5hcHBseShzZWxmLCBhcmdzKTsKICAgICAgICB2YXIgbWVudVBhZ2UgPSBzZWxmLm1lbnVQYWdlOwogICAgICAgIHZhciBzY3JlZW4gPSBzZWxmLnNjcmVlbjsKICAgICAgICB2YXIgbGlzdGJveCA9IHNlbGYubGlzdGJveDsKICAgICAgICBtZW51UGFnZSAmJiBtZW51UGFnZS5yZW1vdmUoKTsKICAgICAgICBzY3JlZW4gJiYgc2NyZWVuLnJlbW92ZSgpOwogICAgICAgIGxpc3Rib3ggJiYgbGlzdGJveC5yZW1vdmUoKTsKICAgIH0pOwoKICAgIC8vIG5hdGl2ZSBzZWxlY3RtZW51IHRocm93cyBhbiBlcnJvciBpcyBubyBvcHRpb24gaXMgY29udGFpbmVkIQogICAgJC5tb2JpbGUuc2VsZWN0bWVudS5wcm90b3R5cGUucGxhY2Vob2xkZXIgPSAiIjsKCgogICAgLy8gTGlzdHZpZXcgbWF5IGNyZWF0ZSBzdWJwYWdlcyB0aGF0IG5lZWQgdG8gYmUgcmVtb3ZlZCB3aGVuIHRoZSB3aWRnZXQgaXMgZGVzdHJveWVkLgogICAgcGF0Y2goJC5tb2JpbGUubGlzdHZpZXcucHJvdG90eXBlLCAiZGVzdHJveSIsIGZ1bmN0aW9uIChvbGQsIHNlbGYsIGFyZ3MpIHsKICAgICAgICAvLyBEZXN0cm95IHRoZSB3aWRnZXQgaW5zdGFuY2UgZmlyc3QgdG8gcHJldmVudAogICAgICAgIC8vIGEgc3RhY2sgb3ZlcmZsb3cuCiAgICAgICAgLy8gTm90ZTogSWYgdGhlcmUgYXJlIG1vcmUgdGhhbiAxIGxpc3R2aWV3IG9uIHRoZSBwYWdlLCBjaGlsZFBhZ2VzIHdpbGwgcmV0dXJuCiAgICAgICAgLy8gdGhlIGNoaWxkIHBhZ2VzIG9mIGFsbCBsaXN0dmlld3MuCiAgICAgICAgdmFyIGlkID0gc2VsZi5lbGVtZW50LmF0dHIoJ2lkJyk7CiAgICAgICAgdmFyIGNoaWxkUGFnZVJlZ2V4ID0gbmV3IFJlZ0V4cCgkLm1vYmlsZS5zdWJQYWdlVXJsS2V5ICsgIj0iICsgaWQgKyAiLSIpOwogICAgICAgIHZhciBjaGlsZFBhZ2VzID0gc2VsZi5jaGlsZFBhZ2VzKCk7CiAgICAgICAgb2xkLmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRQYWdlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgY2hpbGRQYWdlID0gJChjaGlsZFBhZ2VzW2ldKTsKICAgICAgICAgICAgdmFyIGRhdGFVcmwgPSBjaGlsZFBhZ2UuYXR0cignZGF0YS11cmwnKTsKICAgICAgICAgICAgaWYgKGRhdGFVcmwubWF0Y2goY2hpbGRQYWdlUmVnZXgpKSB7CiAgICAgICAgICAgICAgICBjaGlsZFBhZ2UucmVtb3ZlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKCiAgICAvLyByZWZyZXNoIG9mIGxpc3R2aWV3IHNob3VsZCByZWZyZXNoIGFsc28gbm9uIHZpc2libGUgZW50cmllcyBpZiB0aGUKICAgIC8vIGxpc3R2aWV3IGl0c2VsZiBpcyBub3QgdmlzaWJsZQogICAgcGF0Y2goJC5tb2JpbGUubGlzdHZpZXcucHJvdG90eXBlLCAicmVmcmVzaCIsIGZ1bmN0aW9uIChvbGQsIHNlbGYsIGFyZ3MpIHsKICAgICAgICBpZiAoc2VsZi5lbGVtZW50LmZpbHRlcigiOnZpc2libGUiKS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIG9sZC5jYWxsKHNlbGYsIHRydWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBvbGQuYXBwbHkoc2VsZiwgYXJncyk7CiAgICAgICAgfQogICAgfSk7CgogICAgLy8gQ29weSBvZiB0aGUgaW5pdGlhbGl6YXRpb24gY29kZSBmcm9tIGpxdWVyeSBtb2JpbGUgZm9yIGNvbnRyb2xncm91cC4KICAgIC8vIE5lZWRlZCBpbiBqcW0gMS4xLCBhcyB3ZSB3YW50IHRvIGRvIGEgbWFudWFsIGluaXRpYWxpemF0aW9uLgogICAgLy8gU2VlIHRoZSBvcGVuIHRhc2sgaW4ganFtIDEuMSBmb3IgY29udHJvbGdyb3VwLgogICAgaWYgKCQuZm4uY29udHJvbGdyb3VwKSB7CiAgICAgICAgJChkb2N1bWVudCkuYmluZCgicGFnZWNyZWF0ZSBjcmVhdGUiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAkKCI6anFtRGF0YShyb2xlPSdjb250cm9sZ3JvdXAnKSIsIGUudGFyZ2V0KQogICAgICAgICAgICAgICAgLmpxbUVuaGFuY2VhYmxlKCkKICAgICAgICAgICAgICAgIC5jb250cm9sZ3JvdXAoeyBleGNsdWRlSW52aXNpYmxlOmZhbHNlIH0pOwogICAgICAgIH0pOwogICAgfQoKICAgIC8vIFBhdGNoIDE6IGNvbnRyb2xncm91cCBzaG91bGQgbm90IGV4Y2x1ZGUgaW52aXNpYmxlIGNoaWxkcmVuCiAgICAvLyBhcyBsb25nIGFzIGl0IGlzIG5vdCB2aXNpYmxlIGl0c2VsZiEKICAgIHBhdGNoKCQuZm4sICJjb250cm9sZ3JvdXAiLCBmdW5jdGlvbiAob2xkLCBzZWxmLCBhcmdzKSB7CiAgICAgICAgaWYgKHNlbGYuZmlsdGVyKCI6dmlzaWJsZSIpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3NbMF0gfHwge307CiAgICAgICAgICAgIG9wdGlvbnMuZXhjbHVkZUludmlzaWJsZSA9IGZhbHNlOwogICAgICAgICAgICByZXR1cm4gb2xkLmNhbGwoc2VsZiwgb3B0aW9ucyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBvbGQuYXBwbHkoc2VsZiwgYXJncyk7CiAgICB9KTsKCiAgICAvLyBjb2xsYXBzaWJsZSBoYXMgcHJvYmxlbXMgd2hlbiBhIGNvbGxhcHNpYmxlIGlzIGNyZWF0ZWQgd2l0aCBhIG5lc3RlZCBjb2xsYXBzaWJsZSwKICAgIC8vIGlmIHRoZSBuZXN0ZWQgY29sbGFwc2libGUgaXMgY3JlYXRlZCBiZWZvcmUgdGhlIG91dHNpZGUgY29sbGFwc2libGUuCiAgICB2YXIgX2MgPSAkLmZuLmNvbGxhcHNpYmxlOwogICAgdmFyIG5lc3RlZENvbnRlbnRDbGFzcyA9ICJ1aS1jb2xsYXBzaWJsZS1jb250ZW50IjsKICAgICQuZm4uY29sbGFwc2libGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG5lc3RlZENvbnRlbnQgPSB0aGlzLmZpbmQoIi51aS1jb2xsYXBzaWJsZS1jb250ZW50Iik7CiAgICAgICAgbmVzdGVkQ29udGVudC5yZW1vdmVDbGFzcyhuZXN0ZWRDb250ZW50Q2xhc3MpOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJldHVybiBfYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIG5lc3RlZENvbnRlbnQuYWRkQ2xhc3MobmVzdGVkQ29udGVudENsYXNzKTsKICAgICAgICB9CiAgICB9OwoKICAgIC8vIG5hdmJhciBkb2VzIG5vdCBjb250YWluIGEgcmVmcmVzaCBmdW5jdGlvbiwgc28gd2UgYWRkIGl0IGhlcmUuCgogICAgcGF0Y2goJC5tb2JpbGUubmF2YmFyLnByb3RvdHlwZSwgJ19jcmVhdGUnLCBmdW5jdGlvbiAob2xkLCBzZWxmLCBhcmdzKSB7CiAgICAgICAgdmFyIF9maW5kID0gJC5mbi5maW5kOwogICAgICAgIHZhciBuYXZiYXIgPSBzZWxmLmVsZW1lbnQ7CiAgICAgICAgdmFyIG5hdmJhckJ0bnM7CiAgICAgICAgJC5mbi5maW5kID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7CiAgICAgICAgICAgIHZhciByZXMgPSBfZmluZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICdhJykgewogICAgICAgICAgICAgICAgbmF2YmFyLmRhdGEoJyRuYXZidG5zJywgcmVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgIH07CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIG9sZC5hcHBseShzZWxmLCBhcmdzKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAkLmZuLmZpbmQgPSBfZmluZDsKICAgICAgICB9CiAgICB9KTsKCiAgICAkLm1vYmlsZS5uYXZiYXIucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyICRuYXZiYXIgPSB0aGlzLmVsZW1lbnQ7CgogICAgICAgIHZhciAkbmF2YnRucyA9ICRuYXZiYXIuZGF0YSgiJG5hdmJ0bnMiKTsKICAgICAgICAkbmF2YnRucy5zcGxpY2UoMCwgJG5hdmJ0bnMubGVuZ3RoKTsKICAgICAgICAkLmVhY2goJG5hdmJhci5maW5kKCJhIiksIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgICAgICAgICAgICRuYXZidG5zLnB1c2godmFsdWUpOwogICAgICAgIH0pOwogICAgICAgIHZhciBpY29ucG9zID0gJG5hdmJ0bnMuZmlsdGVyKCI6anFtRGF0YShpY29uKSIpLmxlbmd0aCA/CiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5pY29ucG9zIDogdW5kZWZpbmVkOwoKICAgICAgICB2YXIgbGlzdCA9ICRuYXZiYXIuZmluZCgidWwiKTsKICAgICAgICB2YXIgbGlzdEVudHJpZXMgPSBsaXN0LmNoaWxkcmVuKCJsaSIpOwogICAgICAgIGxpc3QucmVtb3ZlQ2xhc3MoZnVuY3Rpb24gKGluZGV4LCBjc3MpIHsKICAgICAgICAgICAgcmV0dXJuIChjc3MubWF0Y2goL1xidWktZ3JpZC1cUysvZykgfHwgW10pLmpvaW4oJyAnKTsKICAgICAgICB9KTsKICAgICAgICBsaXN0RW50cmllcy5yZW1vdmVDbGFzcyhmdW5jdGlvbiAoaW5kZXgsIGNzcykgewogICAgICAgICAgICByZXR1cm4gKGNzcy5tYXRjaCgvXGJ1aS1ibG9jay1cUysvZykgfHwgW10pLmpvaW4oJyAnKTsKICAgICAgICB9KTsKICAgICAgICBsaXN0LmpxbUVuaGFuY2VhYmxlKCkuZ3JpZCh7IGdyaWQ6dGhpcy5vcHRpb25zLmdyaWQgfSk7CgogICAgICAgICRuYXZidG5zLmJ1dHRvbk1hcmt1cCh7CiAgICAgICAgICAgIGNvcm5lcnM6ZmFsc2UsCiAgICAgICAgICAgIHNoYWRvdzpmYWxzZSwKICAgICAgICAgICAgaW5saW5lOnRydWUsCiAgICAgICAgICAgIGljb25wb3M6aWNvbnBvcwogICAgICAgIH0pOwogICAgfTsKfSkod2luZG93LmpRdWVyeSk7Ci8qKgogKiBIZWxwZXIgdGhhdCBpbnRyb2R1Y2VzIHRoZSBjb25jZXB0IG9mIHByZWNvbXBpbGF0aW9uOiBQcmVwcm9jZXNzIHRoZSBkb20gYmVmb3JlCiAqIGFuZ3VsYXIgcHJvY2Vzc2VzIGl0LgogKiA8cD4KICogVXNhZ2U6IENyZWF0ZSBhIGRlY29yYXRvciBvciBhIGZhY3RvcnkgZm9yIHRoZSAkcHJlY29tcGlsZSBzZXJ2aWNlLgogKi8KKGZ1bmN0aW9uICgkLCBhbmd1bGFyKSB7CiAgICB2YXIgbmcgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKICAgIG5nLmZhY3RvcnkoIiRwcmVjb21waWxlIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgLy8gVGhpcyBpcyBlbXB0eSBhbmQgY2FuIGJlIGRlY29yYXRlZCB1c2luZyAkcHJvdmlkZS5kZWNvcmF0b3IuCiAgICAgICAgICAgIHJldHVybiBlbGVtZW50OwogICAgICAgIH0KICAgIH0pOwoKICAgIG5nLmNvbmZpZyhbJyRwcm92aWRlJywgZnVuY3Rpb24gKCRwcm92aWRlKSB7CiAgICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckY29tcGlsZScsIFsnJHByZWNvbXBpbGUnLCAnJGRlbGVnYXRlJywgZnVuY3Rpb24gKCRwcmVjb21waWxlLCAkY29tcGlsZSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gJHByZWNvbXBpbGUoYXJndW1lbnRzWzBdKTsKICAgICAgICAgICAgICAgIHJldHVybiAkY29tcGlsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9CiAgICAgICAgfV0pOwogICAgfV0pOwoKICAgIGZ1bmN0aW9uIHByZWNvbXBpbGVIdG1sU3RyaW5nKGh0bWwsICRwcmVjb21waWxlKSB7CiAgICAgICAgdmFyICR0ZW1wbGF0ZSA9ICQoJzxkaXY+JyArIGh0bWwgKyAnPC9kaXY+Jyk7CiAgICAgICAgJHByZWNvbXBpbGUoJHRlbXBsYXRlLmNvbnRlbnRzKCkpOwogICAgICAgIHJldHVybiAkdGVtcGxhdGUuaHRtbCgpOwogICAgfQoKICAgIG5nLmNvbmZpZyhbJyRjb21waWxlUHJvdmlkZXInLCAnJHByb3ZpZGUnLCBmdW5jdGlvbiAoJGNvbXBpbGVQcm92aWRlciwgJHByb3ZpZGUpIHsKICAgICAgICB2YXIgZGlyZWN0aXZlVGVtcGxhdGVVcmxzID0ge307CgogICAgICAgIC8vIEhvb2sgaW50byB0aGUgcmVnaXN0cmF0aW9uIG9mIGRpcmVjdGl2ZXMgdG86CiAgICAgICAgLy8gLSBwcmVwcm9jZXNzIHRlbXBsYXRlIGh0bWwKICAgICAgICAvLyAtIG1hcmsgdXJscyBmcm9tIHRlbXBsYXRlVXJscyBzbyB3ZSBjYW4gcHJlcHJvY2VzcyBpdCBsYXRlciBpbiAkaHR0cAogICAgICAgIHZhciBfZGlyZWN0aXZlID0gJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmU7CiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUgPSBmdW5jdGlvbiAobmFtZSwgZmFjdG9yeSkgewogICAgICAgICAgICB2YXIgbmV3RmFjdG9yeSA9IGZ1bmN0aW9uICgkcHJlY29tcGlsZSwgJGluamVjdG9yKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzID0gJGluamVjdG9yLmludm9rZShmYWN0b3J5KTsKICAgICAgICAgICAgICAgIGlmIChyZXMudGVtcGxhdGUpIHsKICAgICAgICAgICAgICAgICAgICByZXMudGVtcGxhdGUgPSBwcmVjb21waWxlSHRtbFN0cmluZyhyZXMudGVtcGxhdGUsICRwcmVjb21waWxlKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzLnRlbXBsYXRlVXJsKSB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlVGVtcGxhdGVVcmxzW3Jlcy50ZW1wbGF0ZVVybF0gPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuIF9kaXJlY3RpdmUuY2FsbCh0aGlzLCBuYW1lLCBbJyRwcmVjb21waWxlJywgJyRpbmplY3RvcicsIG5ld0ZhY3RvcnldKTsKICAgICAgICB9OwoKICAgICAgICAvLyBwcmVwcm9jZXNzICRodHRwIHJlc3VsdHMgZm9yIHRlbXBsYXRlVXJscy4KICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRodHRwJywgWyckcScsICckZGVsZWdhdGUnLCAnJHByZWNvbXBpbGUnLCBmdW5jdGlvbiAoJHEsICRodHRwLCAkcHJlY29tcGlsZSkgewogICAgICAgICAgICB2YXIgX2dldCA9ICRodHRwLmdldDsKICAgICAgICAgICAgJGh0dHAuZ2V0ID0gZnVuY3Rpb24gKHVybCkgewogICAgICAgICAgICAgICAgdmFyIHJlcyA9IF9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIGlmIChkaXJlY3RpdmVUZW1wbGF0ZVVybHNbdXJsXSkgewogICAgICAgICAgICAgICAgICAgIHZhciBfc3VjY2VzcyA9IHJlcy5zdWNjZXNzOwogICAgICAgICAgICAgICAgICAgIHJlcy5zdWNjZXNzID0gZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0NhbGxiYWNrID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IGFyZ3VtZW50c1swXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXSA9IHByZWNvbXBpbGVIdG1sU3RyaW5nKGNvbnRlbnQsICRwcmVjb21waWxlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3N1Y2Nlc3MobmV3Q2FsbGJhY2spOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gJGh0dHA7CiAgICAgICAgfV0pOwogICAgfV0pOwoKfSkoJCwgYW5ndWxhcik7CihmdW5jdGlvbiAoYW5ndWxhcikgewoKICAgIHZhciBuZyA9IGFuZ3VsYXIubW9kdWxlKCduZycpOwogICAgbmcuY29uZmlnKFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkgewogICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJHJvb3RTY29wZScsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24oJHJvb3RTY29wZSkgewogICAgICAgICAgICAkcm9vdFNjb3BlLiRkaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy4kcm9vdCA9PSB0aGlzKSByZXR1cm47IC8vIHdlIGNhbid0IGRpc2Nvbm5lY3QgdGhlIHJvb3Qgbm9kZTsKICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7CiAgICAgICAgICAgICAgICB0aGlzLiQkZGlzY29ubmVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIC8vIFNlZSBTY29wZS4kZGVzdHJveQogICAgICAgICAgICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCA9PSB0aGlzKSBwYXJlbnQuJCRjaGlsZEhlYWQgPSB0aGlzLiQkbmV4dFNpYmxpbmc7CiAgICAgICAgICAgICAgICBpZiAocGFyZW50LiQkY2hpbGRUYWlsID09IHRoaXMpIHBhcmVudC4kJGNoaWxkVGFpbCA9IHRoaXMuJCRwcmV2U2libGluZzsKICAgICAgICAgICAgICAgIGlmICh0aGlzLiQkcHJldlNpYmxpbmcpIHRoaXMuJCRwcmV2U2libGluZy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgICAgICAgICAgaWYgKHRoaXMuJCRuZXh0U2libGluZykgdGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmc7CiAgICAgICAgICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPSBudWxsOwogICAgICAgICAgICB9OwogICAgICAgICAgICAkcm9vdFNjb3BlLiRyZWNvbm5lY3QgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLiRyb290ID09IHRoaXMpIHJldHVybjsgLy8gd2UgY2FuJ3QgZGlzY29ubmVjdCB0aGUgcm9vdCBub2RlOwogICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpczsKICAgICAgICAgICAgICAgIGlmICghY2hpbGQuJCRkaXNjb25uZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gY2hpbGQuJHBhcmVudDsKICAgICAgICAgICAgICAgIGNoaWxkLiQkZGlzY29ubmVjdGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAvLyBTZWUgU2NvcGUuJG5ldyBmb3IgdGhpcyBsb2dpYy4uLgogICAgICAgICAgICAgICAgY2hpbGQuJCRwcmV2U2libGluZyA9IHBhcmVudC4kJGNoaWxkVGFpbDsKICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQpIHsKICAgICAgICAgICAgICAgICAgICBwYXJlbnQuJCRjaGlsZFRhaWwuJCRuZXh0U2libGluZyA9IGNoaWxkOwogICAgICAgICAgICAgICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbCA9IGNoaWxkOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBwYXJlbnQuJCRjaGlsZEhlYWQgPSBwYXJlbnQuJCRjaGlsZFRhaWwgPSBjaGlsZDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlOwogICAgICAgIH1dKTsKICAgIH1dKTsKfSkoYW5ndWxhcik7CihmdW5jdGlvbiAoYW5ndWxhcikgewogICAgdmFyIG5nID0gYW5ndWxhci5tb2R1bGUoJ25nJyk7CiAgICBuZy5jb25maWcoWyckcHJvdmlkZScsIGZ1bmN0aW9uICgkcHJvdmlkZSkgewogICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJHJvb3RTY29wZScsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24gKCRyb290U2NvcGUpIHsKICAgICAgICAgICAgdmFyIF9hcHBseSA9ICRyb290U2NvcGUuJGFwcGx5OwogICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS4kZXZhbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIF9hcHBseS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgX2RpZ2VzdCA9ICRyb290U2NvcGUuJGRpZ2VzdDsKICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciByZXMgPSBfZGlnZXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlOwogICAgICAgIH1dKTsKICAgIH1dKTsKfSkoYW5ndWxhcik7CihmdW5jdGlvbiAoJCwgYW5ndWxhcikgewogICAgLy8gT25seSBkaWdlc3QgdGhlICQubW9iaWxlLmFjdGl2ZVBhZ2Ugd2hlbiByb290U2NvcGUuJGRpZ2VzdCBpcyBjYWxsZWQuCiAgICB2YXIgbmcgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKCiAgICAkLm1vYmlsZS5hdXRvSW5pdGlhbGl6ZVBhZ2UgPSBmYWxzZTsKICAgIHZhciBsYXN0Q3JlYXRlZFBhZ2VzID0gW107CiAgICB2YXIganFtSW5pdGlhbGl6ZWQgPSBmYWxzZTsKCiAgICBuZy5jb25maWcoWyckcHJvdmlkZScsIGZ1bmN0aW9uICgkcHJvdmlkZSkgewogICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJHJvb3RTY29wZScsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24gKCRyb290U2NvcGUpIHsKICAgICAgICAgICAgdmFyIF8kZGlnZXN0ID0gJHJvb3RTY29wZS4kZGlnZXN0OwogICAgICAgICAgICB2YXIgbGFzdEFjdGl2ZVNjb3BlOwogICAgICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBwID0gJC5tb2JpbGUuYWN0aXZlUGFnZTsKICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlU2NvcGUgPSBwICYmIHAuc2NvcGUoKTsKICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEFjdGl2ZVNjb3BlICYmIGxhc3RBY3RpdmVTY29wZSAhPT0gYWN0aXZlU2NvcGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFjdGl2ZVNjb3BlLiRkaXNjb25uZWN0KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGxhc3RBY3RpdmVTY29wZSA9IGFjdGl2ZVNjb3BlOwogICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVTY29wZSkgewogICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVTY29wZS4kcmVjb25uZWN0KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHJlcyA9IF8kZGlnZXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBoYXNQYWdlcyA9IGxhc3RDcmVhdGVkUGFnZXMubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIHdoaWxlIChsYXN0Q3JlYXRlZFBhZ2VzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZVNjb3BlID0gbGFzdENyZWF0ZWRQYWdlcy5zaGlmdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRhY2ggdGhlIHNjb3BlIG9mIHRoZSBjcmVhdGVkIHBhZ2VzIGZyb20gdGhlIG5vcm1hbCAkZGlnZXN0IGN5Y2xlLgogICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkZWQgc28gdGhhdCBvbmx5ICQubW9iaWxlLmFjdGl2ZVBhZ2UgZ2V0cyBkaWdlc3RlZCB3aGVuIHJvb3RTY29wZS4kZGlnZXN0CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzIGNhbGxlZC4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgYWxsb3cgb25lIGRpZ2VzdCB0byBwcm9jZXNzIGV2ZXJ5IHBhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gdGhhdCB3ZSBjYW4gdXNlIG5nLXJlcGVhdCBhbHNvIGZvciBqcW0gcGFnZXMhCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VTY29wZS4kZGlzY29ubmVjdCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoaGFzUGFnZXMgJiYgIWpxbUluaXRpYWxpemVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGpxbUluaXRpYWxpemVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9jaGFuZ2VQYWdlID0gJC5tb2JpbGUuY2hhbmdlUGFnZTsKICAgICAgICAgICAgICAgICAgICAgICAgJC5tb2JpbGUuY2hhbmdlUGFnZSA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgICAgICAgICAgICAgICAgICAvLyQubW9iaWxlLmNoYW5nZVBhZ2UuZGVmYXVsdHMgPSBfY2hhbmdlUGFnZS5kZWZhdWx0czsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQubW9iaWxlLmluaXRpYWxpemVQYWdlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLm1vYmlsZS5jaGFuZ2VQYWdlID0gX2NoYW5nZVBhZ2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCJqcW1Jbml0Iik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlOwogICAgICAgIH1dKTsKICAgIH1dKTsKCiAgICBmdW5jdGlvbiBjb25uZWN0VG9Eb2N1bWVudChub2RlLCBjYWxsYmFjaykgewogICAgICAgIGlmICghbm9kZS5wYXJlbnROb2RlKSB7CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpOwogICAgICAgIH0KICAgICAgICAvLyBzZWFyY2ggdGhlIHRvcCBtb3N0IGVsZW1lbnQgZm9yIG5vZGUuCiAgICAgICAgd2hpbGUgKG5vZGUucGFyZW50Tm9kZSAmJiBub2RlLnBhcmVudE5vZGUubm9kZVR5cGUgPT09IDEpIHsKICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICB9CiAgICAgICAgdmFyIG9sZFBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7CiAgICAgICAgaWYgKG9sZFBhcmVudE5vZGUgIT09IGRvY3VtZW50KSB7CiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgaWYgKG9sZFBhcmVudE5vZGUgIT09IGRvY3VtZW50KSB7CiAgICAgICAgICAgICAgICBvbGRQYXJlbnROb2RlLmFwcGVuZENoaWxkKG5vZGUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogVGhpcyBkaXJlY3RpdmUgd2lsbCBlbmhhbmNlIHRoZSBkb20gZHVyaW5nIGNvbXBpbGUKICAgICAqIHdpdGggbm9uIHdpZGdldCBtYXJrdXAuIFRoaXMgd2lsbCBhbHNvIG1hcmsgZWxlbWVudHMgdGhhdCBjb250YWluCiAgICAgKiBqcW0gd2lkZ2V0cy4KICAgICAqLwogICAgbmcuZmFjdG9yeSgnJHByZWNvbXBpbGUnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHBhZ2VTZWxlY3RvciA9ICc6anFtRGF0YShyb2xlPSJwYWdlIiksIDpqcW1EYXRhKHJvbGU9ImRpYWxvZyIpJzsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgICAgICAgIC8vIHNhdmUgdGhlIG9sZCBwYXJlbnQKICAgICAgICAgICAgdmFyIG9sZFBhcmVudE5vZGUgPSBlbGVtZW50WzBdLnBhcmVudE5vZGU7CgogICAgICAgICAgICAvLyBpZiB0aGUgZWxlbWVudCBpcyBub3QgY29ubmVjdGVkIHdpdGggdGhlIGRvY3VtZW50IGVsZW1lbnQsCiAgICAgICAgICAgIC8vIHRoZSBlbmhhbmNlbWVudHMgb2YganF1ZXJ5IG1vYmlsZSBkbyBub3Qgd29yayAodXNlcyBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBkb2N1bWVudCkuCiAgICAgICAgICAgIC8vIFNvIHRlbXBvcmFyaWx5IGNvbm5lY3QgaXQuLi4KICAgICAgICAgICAgY29ubmVjdFRvRG9jdW1lbnQoZWxlbWVudFswXSwgZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgIHZhciBwYWdlcyA9IGVsZW1lbnQuZmluZChwYWdlU2VsZWN0b3IpLmFkZChlbGVtZW50LmZpbHRlcihwYWdlU2VsZWN0b3IpKTsKICAgICAgICAgICAgICAgIHBhZ2VzLmF0dHIoIm5nbS1wYWdlIiwgInRydWUiKTsKCiAgICAgICAgICAgICAgICAvLyBlbmhhbmNlIG5vbi13aWRnZXRzIG1hcmt1cC4KICAgICAgICAgICAgICAgIG1hcmtKcW1XaWRnZXRDcmVhdGlvbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcHJldmVudEpxbVdpZGdldENyZWF0aW9uKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2VzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgY29udGFpbnMgcGFnZXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGVtcG9yYXJ5IHBhZ2VzIGZvciB0aGUgbm9uIHdpZGdldCBtYXJrdXAsIHRoYXQgd2UgZGVzdHJveSBhZnRlcndhcmRzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBvayBhcyBub24gd2lkZ2V0IG1hcmt1cCBkb2VzIG5vdCBob2xkIHN0YXRlLCBpLmUuIG5vIHBlcm1hbmVudCByZWZlcmVuY2UgdG8gdGhlIHBhZ2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlcy5wYWdlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudCgpLnRyaWdnZXIoImNyZWF0ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvLyBEZXN0cm95IHRoZSB0ZW1wb3JhcnkgcGFnZXMgYWdhaW4KICAgICAgICAgICAgICAgIHBhZ2VzLnBhZ2UoImRlc3Ryb3kiKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCB3cmFwcGVkIGl0c2VsZiBpbnRvIGEgbmV3IGVsZW1lbnQsCiAgICAgICAgICAgIC8vIHJldHVybiB0aGUgZWxlbWVudCB0aGF0IGlzIHVuZGVyIHRoZSBzYW1lIG9yaWdpbmFsIHBhcmVudAogICAgICAgICAgICB3aGlsZSAoZWxlbWVudFswXS5wYXJlbnROb2RlICE9PSBvbGRQYXJlbnROb2RlKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5lcSgwKS5wYXJlbnQoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7CiAgICAgICAgfQogICAgfSk7CgogICAgLyoqCiAgICAgKiBTcGVjaWFsIGRpcmVjdGl2ZSBmb3IgcGFnZXMsIGFzIHRoZXkgbmVlZCBhbiBvd24gc2NvcGUuCiAgICAgKi8KICAgIG5nLmRpcmVjdGl2ZSgnbmdtUGFnZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICByZXN0cmljdDonQScsCiAgICAgICAgICAgIHNjb3BlOnRydWUsCiAgICAgICAgICAgIGNvbXBpbGU6ZnVuY3Rpb24gKHRFbGVtZW50LCB0QXR0cnMpIHsKICAgICAgICAgICAgICAgIHRFbGVtZW50LnJlbW92ZUF0dHIoIm5nbS1wYWdlIik7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHByZTpmdW5jdGlvbiAoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkLm1vYmlsZS5wYWdlQ29udGFpbmVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLm1vYmlsZS5wYWdlQ29udGFpbmVyID0gaUVsZW1lbnQucGFyZW50KCkuYWRkQ2xhc3MoInVpLW1vYmlsZS12aWV3cG9ydCIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHBhZ2Ugd2lkZ2V0IHdpdGhvdXQgdGhlIHBhZ2VjcmVhdGUtRXZlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgZG9lcyBubyBkb20gdHJhbnNmb3JtYXRpb24sIHNvIGl0J3Mgc2FmZSB0byBjYWxsIHRoaXMgaW4gdGhlIHByZWxpbmsgZnVuY3Rpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVBhZ2VzV2l0aG91dFBhZ2VDcmVhdGVFdmVudChpRWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDcmVhdGVkUGFnZXMucHVzaChzY29wZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlFbGVtZW50LmJpbmQoJ3BhZ2ViZWZvcmVzaG93JywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZSA9ICQoZXZlbnQudGFyZ2V0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCJqcW1QYWdlYmVmb3Jlc2hvdyIsIHBhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHJvb3QuJGRpZ2VzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH0pOwoKICAgIC8vIElmIGpxbSBsb2FkcyBhIHBhZ2UgZnJvbSBhbiBleHRlcm5hbCBzb3VyY2UsIGFuZ3VsYXIgbmVlZHMgdG8gY29tcGlsZSBpdCB0b28hCiAgICBuZy5ydW4oWyckcm9vdFNjb3BlJywgJyRjb21waWxlJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRjb21waWxlKSB7CiAgICAgICAgcGF0Y2hKcSgncGFnZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCFwcmV2ZW50SnFtV2lkZ2V0Q3JlYXRpb24oKSAmJiAhdGhpcy5kYXRhKCJwYWdlIikpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0dHIoImRhdGEtIiArICQubW9iaWxlLm5zICsgImV4dGVybmFsLXBhZ2UiKSkgewogICAgICAgICAgICAgICAgICAgICRjb21waWxlKHRoaXMpKCRyb290U2NvcGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAkLmZuLm9yaWcucGFnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0pOwogICAgfV0pOwoKICAgICQubW9iaWxlLnJlZ2lzdGVySnFtTmdXaWRnZXQgPSBmdW5jdGlvbiAod2lkZ2V0TmFtZSwgd2lkZ2V0U3BlYykgewogICAgICAgIGpxbVdpZGdldHNbd2lkZ2V0TmFtZV0gPSB3aWRnZXRTcGVjOwogICAgICAgIHBhdGNoSnFtV2lkZ2V0KHdpZGdldE5hbWUsIHdpZGdldFNwZWMucHJlY29tcGlsZSk7CiAgICB9OwoKICAgIHZhciBqcW1XaWRnZXRzID0ge307CiAgICAvKioKICAgICAqIERpcmVjdGl2ZSBmb3IgY2FsbGluZyB0aGUgY3JlYXRlIGZ1bmN0aW9uIG9mIGEganFtIHdpZGdldC4KICAgICAqIEZvciBlbGVtZW50cyB0aGF0IHdyYXAgdGhlbXNlbHZlcyBpbnRvIG5ldyBlbGVtZW50cyAobGlrZSBgPGlucHV0IHR5cGU9ImNoZWNrZWQiPmApIG5nbUNyZWF0ZSB3aWxsIGJlIGNhbGxlZAogICAgICogb24gdGhlIHdyYXBwZXIgZWxlbWVudCBmb3IgdGhlIGlucHV0IGFuZCB0aGUgbGFiZWwsIHdoaWNoIGlzIGNyZWF0ZWQgZHVyaW5nIHByZWNvbXBpbGUuCiAgICAgKiBuZ21MaW5rIHdpbGwgYmUgY2FsbGVkIG9uIHRoZSBhY3R1YWwgaW5wdXQgZWxlbWVudCwgc28gd2UgaGF2ZSBhY2Nlc3MgdG8gdGhlIG5nTW9kZWwgYW5kIGF0dHJzIGZvciAkb2JzZXJ2ZSBjYWxscy4KICAgICAqLwogICAgbmcuZGlyZWN0aXZlKCJuZ21DcmVhdGUiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmVzdHJpY3Q6J0EnLAogICAgICAgICAgICAvLyBhZnRlciB0aGUgbm9ybWFsIGFuZ3VsYXIgd2lkZ2V0cyBsaWtlIGlucHV0LCBuZ01vZGVsLCAuLi4KICAgICAgICAgICAgcHJpb3JpdHk6MCwKICAgICAgICAgICAgY29tcGlsZTpmdW5jdGlvbiAodEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICAgICAgdmFyIHdpZGdldHMgPSBKU09OLnBhcnNlKHRBdHRycy5uZ21DcmVhdGUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwb3N0OmZ1bmN0aW9uIChzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY3RybHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZGdldE5hbWUsIHdpZGdldFNwZWMsIGluaXRBcmdzLCBvcmlnQ3JlYXRlOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHdpZGdldE5hbWUgaW4gd2lkZ2V0cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkZ2V0U3BlYyA9IGpxbVdpZGdldHNbd2lkZ2V0TmFtZV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0QXJncyA9IHdpZGdldHNbd2lkZ2V0TmFtZV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnQ3JlYXRlID0gJC5mbi5vcmlnW3dpZGdldE5hbWVdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZGdldFNwZWMuY3JlYXRlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkZ2V0U3BlYy5jcmVhdGUob3JpZ0NyZWF0ZSwgaUVsZW1lbnQsIGluaXRBcmdzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ0NyZWF0ZS5hcHBseShpRWxlbWVudCwgaW5pdEFyZ3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKICAgIC8qKgogICAgICogRGlyZWN0aXZlIGZvciBjb25uZWN0aW5nIHdpZGdldHMgd2l0aCBhbmd1bGFyLiBTZWUgbmdtQ3JlYXRlLgogICAgICovCiAgICBuZy5kaXJlY3RpdmUoIm5nbUxpbmsiLCBbIiRpbmplY3RvciIsIGZ1bmN0aW9uICgkaW5qZWN0b3IpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICByZXN0cmljdDonQScsCiAgICAgICAgICAgIHByaW9yaXR5OjAsCiAgICAgICAgICAgIHJlcXVpcmU6Wyc/bmdNb2RlbCddLAogICAgICAgICAgICBjb21waWxlOmZ1bmN0aW9uICh0RWxlbWVudCwgdEF0dHJzKSB7CiAgICAgICAgICAgICAgICB2YXIgd2lkZ2V0cyA9IEpTT04ucGFyc2UodEF0dHJzLm5nbUxpbmspOwogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwb3N0OmZ1bmN0aW9uIChzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY3RybHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZGdldE5hbWUsIHdpZGdldFNwZWM7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAod2lkZ2V0TmFtZSBpbiB3aWRnZXRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWRnZXRTcGVjID0ganFtV2lkZ2V0c1t3aWRnZXROYW1lXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZGdldFNwZWMubGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY3RybHMsICRpbmplY3Rvcik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfV0pOwoKICAgIGZ1bmN0aW9uIHBhdGNoSnFtV2lkZ2V0KHdpZGdldE5hbWUsIHByZWNvbXBpbGVGbikgewogICAgICAgIHBhdGNoSnEod2lkZ2V0TmFtZSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAobWFya0pxbVdpZGdldENyZWF0aW9uKCkpIHsKICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc2VsZi5sZW5ndGg7IGsrKykgewogICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gc2VsZi5lcShrKTsKICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlRWxlbWVudCA9IGVsZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKHByZWNvbXBpbGVGbikgewogICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50ID0gcHJlY29tcGlsZUZuKGVsZW1lbnQsIGFyZ3MpIHx8IGNyZWF0ZUVsZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciBuZ21DcmVhdGVTdHIgPSBjcmVhdGVFbGVtZW50LmF0dHIoIm5nbS1jcmVhdGUiKSB8fCAne30nOwogICAgICAgICAgICAgICAgICAgIHZhciBuZ21DcmVhdGUgPSBKU09OLnBhcnNlKG5nbUNyZWF0ZVN0cik7CiAgICAgICAgICAgICAgICAgICAgbmdtQ3JlYXRlW3dpZGdldE5hbWVdID0gYXJnczsKICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50LmF0dHIoIm5nbS1jcmVhdGUiLCBKU09OLnN0cmluZ2lmeShuZ21DcmVhdGUpKTsKICAgICAgICAgICAgICAgICAgICAvLyBhdHRyaWJ1dGUgbmVlZHMgdG8gYmUgYWZ0ZXIgdGhlIG5nbS1jcmVhdGUgYXR0cmlidXRlIQogICAgICAgICAgICAgICAgICAgIHZhciBuZ21MaW5rU3RyID0gZWxlbWVudC5hdHRyKCJuZ20tbGluayIpIHx8ICd7fSc7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5nbUxpbmsgPSBKU09OLnBhcnNlKG5nbUxpbmtTdHIpOwogICAgICAgICAgICAgICAgICAgIG5nbUxpbmtbd2lkZ2V0TmFtZV0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYXR0cigibmdtLWxpbmsiLCBKU09OLnN0cmluZ2lmeShuZ21MaW5rKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHByZXZlbnRKcW1XaWRnZXRDcmVhdGlvbigpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICQuZm4ub3JpZ1t3aWRnZXROYW1lXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0pOwogICAgfQoKICAgICQuZm4ub3JpZyA9IHt9OwoKICAgIGZ1bmN0aW9uIHBhdGNoSnEoZm5OYW1lLCBjYWxsYmFjaykgewogICAgICAgICQuZm4ub3JpZ1tmbk5hbWVdID0gJC5mbi5vcmlnW2ZuTmFtZV0gfHwgJC5mbltmbk5hbWVdOwogICAgICAgICQuZm5bZm5OYW1lXSA9IGNhbGxiYWNrOwogICAgfQoKICAgIHZhciBfZXhlY0ZsYWdzID0ge307CgogICAgZnVuY3Rpb24gZXhlY1dpdGhGbGFnKGZsYWcsIGZuKSB7CiAgICAgICAgaWYgKCFmbikgewogICAgICAgICAgICByZXR1cm4gX2V4ZWNGbGFnc1tmbGFnXTsKICAgICAgICB9CiAgICAgICAgdmFyIG9sZCA9IF9leGVjRmxhZ3NbZmxhZ107CiAgICAgICAgX2V4ZWNGbGFnc1tmbGFnXSA9IHRydWU7CiAgICAgICAgdmFyIHJlcyA9IGZuKCk7CiAgICAgICAgX2V4ZWNGbGFnc1tmbGFnXSA9IG9sZDsKICAgICAgICByZXR1cm4gcmVzOwogICAgfQoKICAgIGZ1bmN0aW9uIHByZXZlbnRKcW1XaWRnZXRDcmVhdGlvbihmbikgewogICAgICAgIHJldHVybiBleGVjV2l0aEZsYWcoJ3ByZXZlbnRKcW1XaWRnZXRDcmVhdGlvbicsIGZuKTsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXJrSnFtV2lkZ2V0Q3JlYXRpb24oZm4pIHsKICAgICAgICByZXR1cm4gZXhlY1dpdGhGbGFnKCdtYXJrSnFtV2lkZ2V0Q3JlYXRpb24nLCBmbik7CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlUGFnZXNXaXRob3V0UGFnZUNyZWF0ZUV2ZW50KHBhZ2VzKSB7CiAgICAgICAgcHJldmVudEpxbVdpZGdldENyZWF0aW9uKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIG9sZFByZWZpeCA9ICQubW9iaWxlLnBhZ2UucHJvdG90eXBlLndpZGdldEV2ZW50UHJlZml4OwogICAgICAgICAgICAkLm1vYmlsZS5wYWdlLnByb3RvdHlwZS53aWRnZXRFdmVudFByZWZpeCA9ICdub29wJzsKICAgICAgICAgICAgcGFnZXMucGFnZSgpOwogICAgICAgICAgICAkLm1vYmlsZS5wYWdlLnByb3RvdHlwZS53aWRnZXRFdmVudFByZWZpeCA9IG9sZFByZWZpeDsKICAgICAgICB9KTsKICAgIH0KCn0pKCQsIGFuZ3VsYXIpOwooZnVuY3Rpb24gKGFuZ3VsYXIsICQpIHsKICAgIHZhciB3aWRnZXRDb25maWcgPSB7CiAgICAgICAgY2hlY2tib3hyYWRpbzp7CiAgICAgICAgICAgIGhhbmRsZXJzOltkaXNhYmxlZEhhbmRsZXIsIHJlZnJlc2hBZnRlck5nTW9kZWxSZW5kZXIsIGNoZWNrZWRIYW5kbGVyXSwKICAgICAgICAgICAgcHJlY29tcGlsZTpjaGVja2JveFJhZGlvUHJlY29tcGlsZSwKICAgICAgICAgICAgY3JlYXRlOmNoZWNrYm94UmFkaW9DcmVhdGUKICAgICAgICB9LAogICAgICAgIC8vIEJ1dHRvbiB3cmFwcyBpdHNlbGYgaW50byBhIG5ldyBlbGVtZW50LgogICAgICAgIC8vIEFuZ3VsYXIgZG9lcyBub3QgbGlrZSB0aGlzLCBzbyB3ZSBkbyBpdCBpbiBhZHZhbmNlLgogICAgICAgIGJ1dHRvbjp7CiAgICAgICAgICAgIGhhbmRsZXJzOltkaXNhYmxlZEhhbmRsZXJdLAogICAgICAgICAgICBwcmVjb21waWxlOmJ1dHRvblByZWNvbXBpbGUsCiAgICAgICAgICAgIGNyZWF0ZTpidXR0b25DcmVhdGUKICAgICAgICB9LAogICAgICAgIGNvbGxhcHNpYmxlOnsKICAgICAgICAgICAgaGFuZGxlcnM6W2Rpc2FibGVkSGFuZGxlciwgY29sbGFwc2VkSGFuZGxlcl0KICAgICAgICB9LAogICAgICAgIHRleHRpbnB1dDp7CiAgICAgICAgICAgIGhhbmRsZXJzOltkaXNhYmxlZEhhbmRsZXJdLAogICAgICAgICAgICBwcmVjb21waWxlOnRleHRpbnB1dFByZWNvbXBpbGUsCiAgICAgICAgICAgIGNyZWF0ZTp1bndyYXBGcm9tRGl2Q3JlYXRlCiAgICAgICAgfSwKICAgICAgICBzbGlkZXI6ewogICAgICAgICAgICBoYW5kbGVyczpbZGlzYWJsZWRIYW5kbGVyLCByZWZyZXNoQWZ0ZXJOZ01vZGVsUmVuZGVyXSwKICAgICAgICAgICAgcHJlY29tcGlsZTp3cmFwSW50b0RpdlByZWNvbXBpbGUsCiAgICAgICAgICAgIGNyZWF0ZTpzbGlkZXJDcmVhdGUKICAgICAgICB9LAogICAgICAgIGxpc3R2aWV3OnsKICAgICAgICAgICAgaGFuZGxlcnM6W3JlZnJlc2hPbkNoaWxkcmVuQ2hhbmdlXQogICAgICAgIH0sCiAgICAgICAgY29sbGFwc2libGVzZXQ6ewogICAgICAgICAgICBoYW5kbGVyczpbcmVmcmVzaE9uQ2hpbGRyZW5DaGFuZ2VdCiAgICAgICAgfSwKICAgICAgICAvLyBzZWxlY3RtZW51IHdyYXBzIGl0c2VsZiBpbnRvIGEgYnV0dG9uIGFuZCBhbiBvdXRlciBkaXYuCiAgICAgICAgLy8gQW5ndWxhciBkb2VzIG5vdCBsaWtlIHRoaXMsIHNvIHdlIGRvIGl0IGluIGFkdmFuY2UuCiAgICAgICAgc2VsZWN0bWVudTp7CiAgICAgICAgICAgIGhhbmRsZXJzOltkaXNhYmxlZEhhbmRsZXIsIHJlZnJlc2hBZnRlck5nTW9kZWxSZW5kZXIsIHJlZnJlc2hPbkNoaWxkcmVuQ2hhbmdlXSwKICAgICAgICAgICAgcHJlY29tcGlsZTp3cmFwSW50b0RpdlByZWNvbXBpbGUsCiAgICAgICAgICAgIGNyZWF0ZTp1bndyYXBGcm9tRGl2Q3JlYXRlCiAgICAgICAgfSwKICAgICAgICBjb250cm9sZ3JvdXA6ewogICAgICAgICAgICBoYW5kbGVyczpbcmVmcmVzaENvbnRyb2xncm91cE9uQ2hpbGRyZW5DaGFuZ2VdCiAgICAgICAgfSwKICAgICAgICBuYXZiYXI6ewogICAgICAgICAgICBoYW5kbGVyczpbcmVmcmVzaE9uQ2hpbGRyZW5DaGFuZ2VdCiAgICAgICAgfSwKICAgICAgICBkaWFsb2c6ewogICAgICAgICAgICBoYW5kbGVyczpbXSwKICAgICAgICAgICAgcHJlY29tcGlsZTpkaWFsb2dQcmVjb21waWxlLAogICAgICAgICAgICBjcmVhdGU6ZGlhbG9nQ3JlYXRlCiAgICAgICAgfSwKICAgICAgICBmaXhlZHRvb2xiYXI6ewogICAgICAgICAgICBoYW5kbGVyczpbXQogICAgICAgIH0sCiAgICAgICAgcG9wdXA6ewogICAgICAgICAgICBoYW5kbGVyczpbXQogICAgICAgIH0KICAgIH07CgogICAgZnVuY3Rpb24gbWVyZ2VIYW5kbGVycyh3aWRnZXROYW1lLCBsaXN0KSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgkaW5qZWN0b3IpIHsKICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpOwogICAgICAgICAgICBhcmdzLnVuc2hpZnQod2lkZ2V0TmFtZSk7CiAgICAgICAgICAgIGFyZ3MucHVzaCgkaW5qZWN0b3IpOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGxpc3RbaV0uYXBwbHkodGhpcywgYXJncyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgdmFyIGNvbmZpZzsKICAgIGZvciAodmFyIHdpZGdldE5hbWUgaW4gd2lkZ2V0Q29uZmlnKSB7CiAgICAgICAgY29uZmlnID0gd2lkZ2V0Q29uZmlnW3dpZGdldE5hbWVdOwogICAgICAgIGNvbmZpZy5saW5rID0gbWVyZ2VIYW5kbGVycyh3aWRnZXROYW1lLCBjb25maWcuaGFuZGxlcnMpOwogICAgICAgICQubW9iaWxlLnJlZ2lzdGVySnFtTmdXaWRnZXQod2lkZ2V0TmFtZSwgY29uZmlnKTsKICAgIH0KCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBwcmVjb21waWxlIGFuZCBjcmVhdGUgZnVuY3Rpb25zCgogICAgLy8gU2xpZGVyIGFwcGVuZHMgYSBuZXcgZWxlbWVudCBhZnRlciB0aGUgaW5wdXQvc2VsZWN0IGVsZW1lbnQgZm9yIHdoaWNoIGl0IHdhcyBjcmVhdGVkLgogICAgLy8gVGhlIGFuZ3VsYXIgY29tcGlsZXIgZG9lcyBub3QgbGlrZSB0aGlzLCBzbyB3ZSB3cmFwIHRoZSB0d28gZWxlbWVudHMgaW50byBhIG5ldyBwYXJlbnQgbm9kZS4KICAgIGZ1bmN0aW9uIHNsaWRlckNyZWF0ZShvcmlnQ3JlYXRlLCBlbGVtZW50LCBpbml0QXJncykgewogICAgICAgIHZhciBzbGlkZXIgPSBlbGVtZW50LmNoaWxkcmVuKCkuZXEoMCk7CiAgICAgICAgb3JpZ0NyZWF0ZS5hcHBseShzbGlkZXIsIGluaXRBcmdzKTsKICAgIH0KCiAgICAvLyBDaGVja2JveHJhZGlvIHJlcXVpcmVzIGEgbGFiZWwgZm9yIGV2ZXJ5IGNoZWNrYm94IGlucHV0IGFuZCB3cmFwcyBpdHNlbGYgYXMgd2VsbCBhcyB0aGUgbGFiZWwKICAgIC8vIGludG8gdGhhdCBkaXYuIEFuZ3VsYXIgZG9lcyBub3QgbGlrZSB0aG9zZSBjaGFuZ2VzIGluIHRoZSBET00sIHNvIHdlIGRvIGl0IGluIGFkdmFuY2UuCiAgICBmdW5jdGlvbiBjaGVja2JveFJhZGlvUHJlY29tcGlsZShvcmlnRWxlbWVudCwgaW5pdEFyZ3MpIHsKICAgICAgICAvLyBTZWUgdGhlIGNoZWNrYm94cmFkaW8tUGx1Z2luIGluIGpxbSBmb3IgdGhlIHNlbGVjdG9ycyB1c2VkIHRvIGxvY2F0ZSB0aGUgbGFiZWwuCiAgICAgICAgdmFyIHBhcmVudExhYmVsID0gJChvcmlnRWxlbWVudCkuY2xvc2VzdCgibGFiZWwiKTsKICAgICAgICB2YXIgY29udGFpbmVyID0gJChvcmlnRWxlbWVudCkuY2xvc2VzdCgiZm9ybSxmaWVsZHNldCw6anFtRGF0YShyb2xlPSdwYWdlJyksOmpxbURhdGEocm9sZT0nZGlhbG9nJykiKTsKICAgICAgICBpZiAoY29udGFpbmVyLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICBjb250YWluZXIgPSBvcmlnRWxlbWVudC5wYXJlbnQoKTsKICAgICAgICB9CiAgICAgICAgdmFyIGxhYmVsID0gcGFyZW50TGFiZWwubGVuZ3RoID8gcGFyZW50TGFiZWwgOiBjb250YWluZXIuZmluZCgibGFiZWwiKS5maWx0ZXIoIltmb3I9JyIgKyBvcmlnRWxlbWVudFswXS5pZCArICInXSIpOwogICAgICAgIGlmIChsYWJlbC5sZW5ndGg9PT0wKSB7CiAgICAgICAgICAgIG9yaWdFbGVtZW50LmF0dHIoIm5nLW5vbi1iaW5kYWJsZSIsICJ0cnVlIik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSB3cmFwSW50b0RpdlByZWNvbXBpbGUobGFiZWwpOwogICAgICAgICAgICBtb3ZlQ2xvbmluZ0RpcmVjdGl2ZXMob3JpZ0VsZW1lbnQsIHdyYXBwZXIpOwogICAgICAgICAgICB3cmFwcGVyLmFwcGVuZChvcmlnRWxlbWVudCk7CiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjaGVja2JveFJhZGlvQ3JlYXRlKG9yaWdDcmVhdGUsIGVsZW1lbnQsIGluaXRBcmdzKSB7CiAgICAgICAgLy8gd3JhcCB0aGUgaW5wdXQgaW50byBpdCdzIGxhYmVsLiBCeSB0aGlzLCB0aGUganFtIHdpZGdldCB3aWxsIGFsd2F5cwogICAgICAgIC8vIHVzZSB0aGlzIGxhYmVsLCBldmVuIGlmIHRoZXJlIGFyZSBvdGhlciBsYWJlbHMgd2l0aCB0aGUgc2FtZSBpZCBvbiB0aGUgc2FtZSBwYWdlLgogICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGlmIHdlIHVzZSBuZy1yZXBlYXQgb24gY2hlY2tib3hlcywgYXMgdGhpcyBjb3VsZAogICAgICAgIC8vIGNyZWF0ZSBtdWx0aXBsZSBjaGVja2JveGVzIHdpdGggdGhlIHNhbWUgaWQhCiAgICAgICAgdmFyIGxhYmVsID0gZWxlbWVudC5jaGlsZHJlbigibGFiZWwiKTsKICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50LmNoaWxkcmVuKCJpbnB1dCIpOwogICAgICAgIGxhYmVsLmFwcGVuZChpbnB1dCk7CiAgICAgICAgcmV0dXJuIHVud3JhcEZyb21EaXZDcmVhdGUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBvcmlnQ3JlYXRlLmFwcGx5KGlucHV0LCBhcmd1bWVudHMpOwogICAgICAgIH0sIGVsZW1lbnQsIGluaXRBcmdzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBidXR0b25QcmVjb21waWxlKG9yaWdFbGVtZW50LCBpbml0QXJncykgewogICAgICAgIHZhciB3cmFwcGVyID0gd3JhcEludG9EaXZQcmVjb21waWxlKG9yaWdFbGVtZW50KTsKICAgICAgICAvLyBBZGQgYSB0ZXh0IG5vZGUgd2l0aCB0aGUgdmFsdWUgY29udGVudCwKICAgICAgICAvLyBzbyB0aGF0IGFuZ3VsYXIgYmluZGluZ3Mgd29yayBmb3IgdGhlIHZhbHVlIHRvbwoKICAgICAgICBpZiAob3JpZ0VsZW1lbnRbMF0ubm9kZU5hbWUgPT09ICdJTlBVVCcpIHsKICAgICAgICAgICAgdmFyIHZhbHVlID0gb3JpZ0VsZW1lbnQudmFsKCk7CiAgICAgICAgICAgIG9yaWdFbGVtZW50LmFwcGVuZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gd3JhcHBlcjsKICAgIH0KCiAgICBmdW5jdGlvbiBidXR0b25DcmVhdGUob3JpZ0NyZWF0ZSwgZWxlbWVudCwgaW5pdEFyZ3MpIHsKICAgICAgICAvLyBCdXR0b24gZGVzdHJveXMgdGhlIHRleHQgbm9kZSBhbmQgcmVjcmVhdGVzIGEgbmV3IG9uZS4gVGhpcyBkb2VzIG5vdCB3b3JrCiAgICAgICAgLy8gaWYgdGhlIHRleHQgbm9kZSBjb250YWlucyBhbmd1bGFyIGV4cHJlc3Npb25zLCBzbyB3ZSBtb3ZlIHRoZQogICAgICAgIC8vIHRleHQgbm9kZSB0byB0aGUgcmlnaHQgcGxhY2UuCiAgICAgICAgdmFyIGJ1dHRvbiA9IGVsZW1lbnQuY2hpbGRyZW4oKS5lcSgwKTsKICAgICAgICB2YXIgdGV4dE5vZGUgPSBidXR0b24uY29udGVudHMoKTsKICAgICAgICB2YXIgcmVzID0gdW53cmFwRnJvbURpdkNyZWF0ZShvcmlnQ3JlYXRlLCBlbGVtZW50LCBpbml0QXJncyk7CiAgICAgICAgdmFyIHRleHRTcGFuID0gZWxlbWVudC5maW5kKCIudWktYnRuLXRleHQiKTsKICAgICAgICB0ZXh0U3Bhbi5lbXB0eSgpOwogICAgICAgIHRleHRTcGFuLmFwcGVuZCh0ZXh0Tm9kZSk7CiAgICAgICAgcmV0dXJuIHJlczsKICAgIH0KCiAgICAvLyB0ZXh0aW5wdXQgZm9yIGlucHV0LXR5cGUgInNlYXJjaCIgd3JhcHMgaXRzZWxmIGludG8gYSBuZXcgZWxlbWVudAogICAgZnVuY3Rpb24gdGV4dGlucHV0UHJlY29tcGlsZShvcmlnRWxlbWVudCwgaW5pdEFyZ3MpIHsKICAgICAgICBpZiAoIW9yaWdFbGVtZW50LmlzKCJbdHlwZT0nc2VhcmNoJ10sOmpxbURhdGEodHlwZT0nc2VhcmNoJykiKSkgewogICAgICAgICAgICByZXR1cm4gb3JpZ0VsZW1lbnQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiB3cmFwSW50b0RpdlByZWNvbXBpbGUob3JpZ0VsZW1lbnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHdyYXBJbnRvRGl2UHJlY29tcGlsZShvcmlnRWxlbWVudCkgewogICAgICAgIG9yaWdFbGVtZW50LndyYXBBbGwoIjxkaXY+PC9kaXY+Iik7CiAgICAgICAgdmFyIHdyYXBwZXIgPSBvcmlnRWxlbWVudC5wYXJlbnQoKTsKICAgICAgICBtb3ZlQ2xvbmluZ0RpcmVjdGl2ZXMob3JpZ0VsZW1lbnQsIHdyYXBwZXIpOwogICAgICAgIHJldHVybiB3cmFwcGVyOwogICAgfQoKICAgIGZ1bmN0aW9uIHVud3JhcEZyb21EaXZDcmVhdGUob3JpZ0NyZWF0ZSwgZWxlbWVudCwgaW5pdEFyZ3MpIHsKICAgICAgICBpZiAoZWxlbWVudFswXS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAiRElWIikgewogICAgICAgICAgICAvLyBubyB3cmFwcGVyIGV4aXN0aW5nLgogICAgICAgICAgICByZXR1cm4gb3JpZ0NyZWF0ZS5hcHBseShlbGVtZW50LCBpbml0QXJncyk7CiAgICAgICAgfQoKICAgICAgICBpZiAoaXNNb2NrKG9yaWdDcmVhdGUpKSB7CiAgICAgICAgICAgIC8vIHNweSB0aGF0IGRvZXMgbm90IGNhbGwgdGhyb3VnaAogICAgICAgICAgICByZXR1cm4gb3JpZ0NyZWF0ZS5hcHBseShlbGVtZW50LCBpbml0QXJncyk7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2hpbGQgPSBlbGVtZW50LmNoaWxkcmVuKCkuZXEoMCk7CiAgICAgICAgY2hpbGQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQpOwogICAgICAgIGVsZW1lbnQuZW1wdHkoKTsKICAgICAgICByZXR1cm4gdXNlRXhpc3RpbmdFbGVtZW50c0Zvck5ld0VsZW1lbnRzKGVsZW1lbnQsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIG9yaWdDcmVhdGUuYXBwbHkoY2hpbGQsIGluaXRBcmdzKTsKICAgICAgICB9KTsKICAgIH0KCiAgICAvLyBEaWFsb2c6IHNlcGFyYXRlIGV2ZW50IGJpbmRpbmcgYW5kIGRvbSBlbmhhbmNlbWVudC4KICAgIC8vIE5vdGU6IFdlIGRvIG5lZWQgdG8gYWRkIHRoZSBjbG9zZSBidXR0b24gZHVyaW5nIHByZWNvbXBpbGUsCiAgICAvLyBhcyB0aGUgZW5oYW5jZW1lbnQgZm9yIHRoZSBkaWFsb2cgaGVhZGVyIGRlcGVuZHMgb24gaXQgKGNhbGN1bGF0aW9uIHdoaWNoIGJ1dHRvbiBpcyBsZWZ0LCByaWdodCwgLi4uKQogICAgLy8gV2UgY2Fubm90IGFkanVzdCB0aGUgdGltaW5nIG9mIHRoZSBoZWFkZXIgZW5oYW5jZW1lbnQgYXMgaXQgaXMgbm8ganFtIHdpZGdldC4KICAgIGZ1bmN0aW9uIGRpYWxvZ1ByZWNvbXBpbGUob3JpZ0VsZW1lbnQsIGluaXRBdHRycykgewogICAgICAgIHZhciBvcHRpb25zID0gJC5tb2JpbGUuZGlhbG9nLnByb3RvdHlwZS5vcHRpb25zOwogICAgICAgIHZhciBoZWFkZXJDbG9zZUJ1dHRvbiA9ICQoIjxhIGhyZWY9JyMnIGRhdGEtIiArICQubW9iaWxlLm5zICsgImljb249J2RlbGV0ZScgZGF0YS0iICsgJC5tb2JpbGUubnMgKyAiaWNvbnBvcz0nbm90ZXh0Jz4iICsgb3B0aW9ucy5jbG9zZUJ0blRleHQgKyAiPC9hPiIpOwogICAgICAgIG9yaWdFbGVtZW50LmZpbmQoIjpqcW1EYXRhKHJvbGU9J2hlYWRlcicpIikucHJlcGVuZChoZWFkZXJDbG9zZUJ1dHRvbik7CiAgICAgICAgb3JpZ0VsZW1lbnQuZGF0YSgnaGVhZGVyQ2xvc2VCdXR0b24nLCBoZWFkZXJDbG9zZUJ1dHRvbik7CiAgICAgICAgcmV0dXJuIG9yaWdFbGVtZW50OwogICAgfQoKICAgIGZ1bmN0aW9uIGRpYWxvZ0NyZWF0ZShvcmlnQ3JlYXRlLCBlbGVtZW50LCBpbml0QXJncykgewogICAgICAgIGlmIChpc01vY2sob3JpZ0NyZWF0ZSkpIHsKICAgICAgICAgICAgLy8gRHVyaW5nIHVuaXQgdGVzdHMuLi4KICAgICAgICAgICAgcmV0dXJuIG9yaWdDcmVhdGUuYXBwbHkoZWxlbWVudCwgaW5pdEFyZ3MpOwogICAgICAgIH0KICAgICAgICB2YXIgaGVhZGVyQ2xvc2VCdXR0b24gPSBlbGVtZW50LmRhdGEoJ2hlYWRlckNsb3NlQnV0dG9uJyk7CiAgICAgICAgcmV0dXJuIHVzZUV4aXN0aW5nRWxlbWVudHNGb3JOZXdFbGVtZW50cyhoZWFkZXJDbG9zZUJ1dHRvbiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb3JpZ0NyZWF0ZS5hcHBseShlbGVtZW50LCBpbml0QXJncyk7CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gaXNNb2NrKG9yaWdDcmVhdGUpIHsKICAgICAgICByZXR1cm4gb3JpZ0NyZWF0ZS5pc1NweSAmJiBvcmlnQ3JlYXRlLm9yaWdpbmFsVmFsdWUgIT09IG9yaWdDcmVhdGUucGxhbjsKICAgIH0KCiAgICBmdW5jdGlvbiB1c2VFeGlzdGluZ0VsZW1lbnRzRm9yTmV3RWxlbWVudHMoZXhpc3RpbmdFbGVtZW50cywgY2FsbGJhY2spIHsKICAgICAgICB2YXIgaSwgZWwsIHRhZ05hbWU7CiAgICAgICAgdmFyIGV4aXN0aW5nRWxlbWVudHNIYXNoQnlFbGVtZW50TmFtZSA9IHt9OwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBleGlzdGluZ0VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGVsID0gZXhpc3RpbmdFbGVtZW50cy5lcShpKTsKICAgICAgICAgICAgLy8gRG8gbm90IHVzZSBqUXVlcnkuZm4ucmVtb3ZlIGFzIHRoaXMgd2lsbCBmaXJlIGEgZGVzdHJveSBldmVudCwKICAgICAgICAgICAgLy8gd2hpY2ggbGVhZHMgdG8gdW53YW50ZWQgc2lkZSBlZmZlY3RzIGJ5IGl0J3MgbGlzdGVuZXJzLgogICAgICAgICAgICBlbFswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsWzBdKTsKICAgICAgICAgICAgdGFnTmFtZSA9IGVsWzBdLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgIGV4aXN0aW5nRWxlbWVudHNIYXNoQnlFbGVtZW50TmFtZVt0YWdOYW1lXSA9IGVsOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdXNlRXhpc3RpbmdFbGVtZW50SWZQb3NzaWJsZShzZWxlY3RvcikgewogICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHsKICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICQoc2VsZWN0b3IpOwogICAgICAgICAgICAgICAgdmFyIHRhZ05hbWUgPSB0ZW1wbGF0ZVswXS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nRWxlbWVudCA9IGV4aXN0aW5nRWxlbWVudHNIYXNoQnlFbGVtZW50TmFtZVt0YWdOYW1lXTsKICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0VsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgZXhpc3RpbmdFbGVtZW50c0hhc2hCeUVsZW1lbnROYW1lW3RhZ05hbWVdOwogICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nRWxlbWVudFswXS5jbGFzc05hbWUgKz0gJyAnICsgdGVtcGxhdGVbMF0uY2xhc3NOYW1lOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBleGlzdGluZ0VsZW1lbnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgdmFyIHJlcyA9IHdpdGhQYXRjaGVzKCQuZm4sIHsKICAgICAgICAgICAgaW5pdDpmdW5jdGlvbiAoX2luaXQsIHNlbGYsIGFyZ3MpIHsKICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IGFyZ3NbMF07CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAic3RyaW5nIiAmJiBzZWxlY3Rvci5jaGFyQXQoMCkgPT09ICc8JykgewogICAgICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ0VsZW1lbnQgPSB1c2VFeGlzdGluZ0VsZW1lbnRJZlBvc3NpYmxlKHNlbGVjdG9yKTsKICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdFbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleGlzdGluZ0VsZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIF9pbml0LmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgICAgICAgICB9LAogICAgICAgICAgICB3cmFwOmZ1bmN0aW9uIChfd3JhcCwgc2VsZiwgYXJncykgewogICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gYXJnc1swXTsKICAgICAgICAgICAgICAgIHZhciB3cmFwcGVyID0gdXNlRXhpc3RpbmdFbGVtZW50SWZQb3NzaWJsZShzZWxlY3Rvcik7CiAgICAgICAgICAgICAgICBpZiAod3JhcHBlcikgewogICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuaW5zZXJ0QmVmb3JlKHNlbGYpOwogICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kKHNlbGYpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIF93cmFwLmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgICAgICAgICB9LAogICAgICAgICAgICB3cmFwQWxsOmZ1bmN0aW9uIChfd3JhcEFsbCwgc2VsZiwgYXJncykgewogICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gYXJnc1swXTsKICAgICAgICAgICAgICAgIHZhciB3cmFwcGVyID0gdXNlRXhpc3RpbmdFbGVtZW50SWZQb3NzaWJsZShzZWxlY3Rvcik7CiAgICAgICAgICAgICAgICBpZiAod3JhcHBlcikgewogICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuaW5zZXJ0QmVmb3JlKHNlbGYpOwogICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kKHNlbGYpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIF93cmFwQWxsLmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgfSwgY2FsbGJhY2spOwogICAgICAgIGZvciAodGFnTmFtZSBpbiBleGlzdGluZ0VsZW1lbnRzSGFzaEJ5RWxlbWVudE5hbWUpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJleGlzdGluZyBlbGVtZW50IHdpdGggdGFnTmFtZSAiICsgdGFnTmFtZSArICIgd2FzIG5vdCB1c2VkISIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzOwogICAgfQoKICAgIGZ1bmN0aW9uIHdpdGhQYXRjaGVzKG9iaiwgcGF0Y2hlcywgY2FsbGJhY2spIHsKICAgICAgICB2YXIgX29sZCA9IHt9OwogICAgICAgIHZhciBleGVjdXRpbmdDb3VudCA9IDA7CgogICAgICAgIGZ1bmN0aW9uIHBhdGNoUHJvcChwcm9wKSB7CiAgICAgICAgICAgIHZhciBvbGRGbiA9IF9vbGRbcHJvcF0gPSBvYmpbcHJvcF07CiAgICAgICAgICAgIG9sZEZuLnJlc3RvcmUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSBvbGRGbjsKICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRGbi5yZXN0b3JlOwogICAgICAgICAgICB9OwogICAgICAgICAgICBvYmpbcHJvcF0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAoZXhlY3V0aW5nQ291bnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGV4ZWN1dGluZ0NvdW50Kys7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXRjaGVzW3Byb3BdKG9sZEZuLCB0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICBleGVjdXRpbmdDb3VudC0tOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBvYmpbcHJvcF0ucHJvdG90eXBlID0gb2xkRm4ucHJvdG90eXBlOwogICAgICAgIH0KCiAgICAgICAgdmFyIHByb3A7CiAgICAgICAgZm9yIChwcm9wIGluIHBhdGNoZXMpIHsKICAgICAgICAgICAgcGF0Y2hQcm9wKHByb3ApOwogICAgICAgIH0KICAgICAgICB0cnkgewogICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBmb3IgKHByb3AgaW4gX29sZCkgewogICAgICAgICAgICAgICAgX29sZFtwcm9wXS5yZXN0b3JlICYmIF9vbGRbcHJvcF0ucmVzdG9yZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHZhciBDTE9OSU5HX0RJUkVDVElWRV9SRUdFWFAgPSAvKF58W1xXXSkocmVwZWF0fHN3aXRjaC13aGVufGlmKSgkfFtcV10pLzsKCiAgICBmdW5jdGlvbiBtb3ZlQ2xvbmluZ0RpcmVjdGl2ZXMoc291cmNlLCB0YXJnZXQpIHsKICAgICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIGF0dHJpYnV0ZXMKICAgICAgICB2YXIgY2xvbmluZ0F0dHJOYW1lcyA9IFtdOwogICAgICAgIHZhciBub2RlID0gc291cmNlWzBdOwogICAgICAgIHZhciB0YXJnZXROb2RlID0gdGFyZ2V0WzBdOwogICAgICAgIHZhciBuQXR0cnMgPSBub2RlLmF0dHJpYnV0ZXM7CiAgICAgICAgdmFyIGF0dHJDb3VudCA9IG5BdHRycyAmJiBuQXR0cnMubGVuZ3RoOwogICAgICAgIGlmIChhdHRyQ291bnQpIHsKICAgICAgICAgICAgZm9yICh2YXIgYXR0ciwgbmFtZSwKICAgICAgICAgICAgICAgICAgICAgaiA9IGF0dHJDb3VudCAtIDE7IGogPj0gMDsgai0tKSB7CiAgICAgICAgICAgICAgICBhdHRyID0gbkF0dHJzW2pdOwogICAgICAgICAgICAgICAgbmFtZSA9IGF0dHIubmFtZTsKICAgICAgICAgICAgICAgIGlmIChDTE9OSU5HX0RJUkVDVElWRV9SRUdFWFAudGVzdChuYW1lKSkgewogICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyKTsKICAgICAgICAgICAgICAgICAgICB0YXJnZXROb2RlLnNldEF0dHJpYnV0ZU5vZGUoYXR0cik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIGl0ZXJhdGUgb3ZlciB0aGUgY2xhc3MgbmFtZXMuCiAgICAgICAgdmFyIHRhcmdldENsYXNzTmFtZSA9ICcnOwogICAgICAgIHZhciBjbGFzc05hbWUgPSBub2RlLmNsYXNzTmFtZTsKICAgICAgICB2YXIgbWF0Y2g7CiAgICAgICAgaWYgKGNsYXNzTmFtZSkgewogICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZSgvW147XSs7Py8sIGZ1bmN0aW9uIChtYXRjaCkgewogICAgICAgICAgICAgICAgaWYgKENMT05JTkdfRElSRUNUSVZFX1JFR0VYUC50ZXN0KG1hdGNoKSkgewogICAgICAgICAgICAgICAgICAgIHRhcmdldENsYXNzTmFtZSArPSBtYXRjaDsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2g7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lKSB7CiAgICAgICAgICAgIHRhcmdldE5vZGUuY2xhc3NOYW1lID0gdGFyZ2V0Q2xhc3NOYW1lOwogICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTsKICAgICAgICB9CiAgICB9CgogICAgLy8gRXhwb3NlIGZvciB0ZXN0cy4KICAgICQubW9iaWxlLm1vdmVDbG9uaW5nRGlyZWN0aXZlcyA9IG1vdmVDbG9uaW5nRGlyZWN0aXZlczsKCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLy8gbGluayBoYW5kbGVycwogICAgZnVuY3Rpb24gZGlzYWJsZWRIYW5kbGVyKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjdHJscykgewogICAgICAgIGlBdHRycy4kb2JzZXJ2ZSgiZGlzYWJsZWQiLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgaWYgKHZhbHVlKSB7CiAgICAgICAgICAgICAgICBpRWxlbWVudFt3aWRnZXROYW1lXSgiZGlzYWJsZSIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaUVsZW1lbnRbd2lkZ2V0TmFtZV0oImVuYWJsZSIpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gY29sbGFwc2VkSGFuZGxlcih3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY3RybHMsICRpbmplY3QpIHsKICAgICAgICB2YXIgJHBhcnNlID0gJGluamVjdC5nZXQoIiRwYXJzZSIpOwogICAgICAgIGlmIChpQXR0cnMuY29sbGFwc2VkKSB7CiAgICAgICAgICAgIHZhciBjb2xsYXBzZWRHZXR0ZXIgPSAkcGFyc2UoaUF0dHJzLmNvbGxhcHNlZCk7CiAgICAgICAgICAgIHZhciBjb2xsYXBzZWRTZXR0ZXIgPSBjb2xsYXBzZWRHZXR0ZXIuYXNzaWduOwogICAgICAgICAgICBzY29wZS4kd2F0Y2goY29sbGFwc2VkR2V0dGVyLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgIGlFbGVtZW50LnRyaWdnZXIoImNvbGxhcHNlIik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlFbGVtZW50LnRyaWdnZXIoImV4cGFuZCIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKGNvbGxhcHNlZFNldHRlcikgewogICAgICAgICAgICAgICAgaUVsZW1lbnQuYmluZCgiY29sbGFwc2UiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VkU2V0dGVyKHNjb3BlLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaUVsZW1lbnQuYmluZCgiZXhwYW5kIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlZFNldHRlcihzY29wZSwgZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tlZEhhbmRsZXIod2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGN0cmxzKSB7CiAgICAgICAgaUF0dHJzLiRvYnNlcnZlKCJjaGVja2VkIiwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgIHRyaWdnZXJBc3luY1JlZnJlc2god2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCAicmVmcmVzaCIpOwogICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZEN0cmxGdW5jdGlvbkxpc3RlbmVyKGN0cmwsIGN0cmxGbk5hbWUsIGZuKSB7CiAgICAgICAgdmFyIGxpc3RlbmVyc05hbWUgPSAiX2xpc3RlbmVycyIgKyBjdHJsRm5OYW1lOwogICAgICAgIGlmICghY3RybFtsaXN0ZW5lcnNOYW1lXSkgewogICAgICAgICAgICBjdHJsW2xpc3RlbmVyc05hbWVdID0gW107CiAgICAgICAgICAgIHZhciBvbGRGbiA9IGN0cmxbY3RybEZuTmFtZV07CiAgICAgICAgICAgIGN0cmxbY3RybEZuTmFtZV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzID0gb2xkRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3RybFtsaXN0ZW5lcnNOYW1lXS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGN0cmxbbGlzdGVuZXJzTmFtZV1baV0oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGN0cmxbbGlzdGVuZXJzTmFtZV0ucHVzaChmbik7CiAgICB9CgogICAgZnVuY3Rpb24gcmVmcmVzaEFmdGVyTmdNb2RlbFJlbmRlcih3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY3RybHMpIHsKICAgICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1swXTsKICAgICAgICBpZiAobmdNb2RlbEN0cmwpIHsKICAgICAgICAgICAgYWRkQ3RybEZ1bmN0aW9uTGlzdGVuZXIobmdNb2RlbEN0cmwsICIkcmVuZGVyIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdHJpZ2dlckFzeW5jUmVmcmVzaCh3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsICJyZWZyZXNoIik7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZWZyZXNoQ29udHJvbGdyb3VwT25DaGlsZHJlbkNoYW5nZSh3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY3RybHMpIHsKICAgICAgICBpRWxlbWVudC5iaW5kKCIkY2hpbGRyZW5DaGFuZ2VkIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0cmlnZ2VyQXN5bmNSZWZyZXNoKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwge30pOwogICAgICAgIH0pOwogICAgfQoKCiAgICBmdW5jdGlvbiByZWZyZXNoT25DaGlsZHJlbkNoYW5nZSh3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY3RybHMpIHsKICAgICAgICBpRWxlbWVudC5iaW5kKCIkY2hpbGRyZW5DaGFuZ2VkIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0cmlnZ2VyQXN5bmNSZWZyZXNoKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgInJlZnJlc2giKTsKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmlnZ2VyQXN5bmNSZWZyZXNoKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgb3B0aW9ucykgewogICAgICAgIHZhciBwcm9wID0gIl9yZWZyZXNoIiArIHdpZGdldE5hbWU7CiAgICAgICAgdmFyIHJlZnJlc2hJZCA9IChpRWxlbWVudC5kYXRhKHByb3ApIHx8IDApICsgMTsKICAgICAgICBpRWxlbWVudC5kYXRhKHByb3AsIHJlZnJlc2hJZCk7CiAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmIChpRWxlbWVudC5kYXRhKHByb3ApID09PSByZWZyZXNoSWQpIHsKICAgICAgICAgICAgICAgIGlFbGVtZW50W3dpZGdldE5hbWVdKG9wdGlvbnMpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgoKfSkKICAgIChhbmd1bGFyLCAkKTsKLyoqCiAqIFRoaXMgY29tYmluZXMgdGhlIHJvdXRpbmcgb2YgYW5ndWxhciBhbmQganF1ZXJ5IG1vYmlsZS4gSW4gZGV0YWlsLCBpdCBkZWFjdGl2YXRlcyB0aGUgcm91dGluZyBpbiBqcW0KICogYW5kIHJldXNlcyB0aGF0IG9mIGFuZ3VsYXIuCiAqLwooZnVuY3Rpb24gKGFuZ3VsYXIsICQpIHsKICAgIHZhciBtb2QgPSBhbmd1bGFyLm1vZHVsZSgibmciKTsKCiAgICBmdW5jdGlvbiByZWdpc3RlckJyb3dzZXJEZWNvcmF0b3IoJHByb3ZpZGUpIHsKICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRicm93c2VyJywgWyckZGVsZWdhdGUnLCBmdW5jdGlvbiAoJGJyb3dzZXIpIHsKICAgICAgICAgICAgLy8gQWx3YXlzIHJldHVybiB0aGUgc2FtZSBiYXNlIGhyZWYsIGFzIGpxdWVyeSBtb2JpbGUgY2hhbmdlcwogICAgICAgICAgICAvLyB0aGUgYmFzZSB0YWcgZGVwZW5kaW5nIG9uIHdoaWNoIHBhZ2VzIGl0IGlzIGxvYWRpbmchCiAgICAgICAgICAgICRicm93c2VyLmluaXRpYWxCYXNlSHJlZiA9ICRicm93c2VyLmJhc2VIcmVmKCk7CiAgICAgICAgICAgICRicm93c2VyLmJhc2VIcmVmID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgLy8gUGF0Y2ggZm9yIGJhc2VIcmVmIHRvIHJldHVybiB0aGUgY29ycmVjdCBwYXRoIGFsc28gZm9yIGZpbGUtdXJscy4KICAgICAgICAgICAgICAgIC8vIFNlZSBidWcgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTY5MAogICAgICAgICAgICAgICAgdmFyIGhyZWYgPSAkYnJvd3Nlci5pbml0aWFsQmFzZUhyZWY7CiAgICAgICAgICAgICAgICByZXR1cm4gaHJlZiA/IGhyZWYucmVwbGFjZSgvXmZpbGU/XDpcL1wvW15cL10qLywgJycpIDogaHJlZjsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuICRicm93c2VyOwogICAgICAgIH1dKTsKCgogICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJGxvY2F0aW9uJywgWyckZGVsZWdhdGUnLCBsb2NhdGlvblJvdXRlT3ZlcnJpZGVEZWNvcmF0b3JdKTsKCiAgICAgICAgZnVuY3Rpb24gbG9jYXRpb25Sb3V0ZU92ZXJyaWRlRGVjb3JhdG9yKCRsb2NhdGlvbikgewogICAgICAgICAgICAkbG9jYXRpb24ucm91dGVPdmVycmlkZSA9IGZ1bmN0aW9uIChyb3V0ZU92ZXJyaWRlKSB7CiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkbG9jYXRpb24uJCRyb3V0ZU92ZXJyaWRlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGxvY2F0aW9uLiQkcm91dGVPdmVycmlkZSA9IHJvdXRlT3ZlcnJpZGU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIC8vIElmIHdlIHN0YXJ0IHRoZSBhcHAgd2l0aCBhIHVybCBsaWtlCiAgICAgICAgICAgIC8vIGluZGV4Lmh0bWw/YT1iIyEvc29tZVBhZ2UuaHRtbCwgaS5lLgogICAgICAgICAgICAvLyB3ZSBoYXZlIGEgc2VhcmNoIHBhcmFtZXRlciBhbmQgbG9hZCBhbiBleHRlcm5hbCBzdWJwYWdlLAogICAgICAgICAgICAvLyB0aGVuIGFuZ3VsYXIgZG9lcyBub3QgcGFyc2UgdGhlIGdpdmVuIGhhc2hiYW5nIHVybCBjb3JyZWN0bHkuCiAgICAgICAgICAgIC8vIEhlcmUsIHdlIGNvcnJlY3QgdGhlIHdyb25nIHBhcnNpbmcuCgogICAgICAgICAgICAvLyBUT0RPIGZpbGUgYSBidWcgcmVwb3J0IGluIGFuZ3VsYXIgZm9yIHRoaXMhCiAgICAgICAgICAgIHZhciBoYXNoID0gJGxvY2F0aW9uLmhhc2goKTsKICAgICAgICAgICAgaWYgKGhhc2ggJiYgaGFzaC5pbmRleE9mKCchJykgPT09IDApIHsKICAgICAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goe30pOwogICAgICAgICAgICAgICAgJGxvY2F0aW9uLnVybChoYXNoLnN1YnN0cmluZygxKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiAkbG9jYXRpb247CiAgICAgICAgfQogICAgfQoKICAgICQubW9iaWxlLl9yZWdpc3RlckJyb3dzZXJEZWNvcmF0b3JzID0gJC5tb2JpbGUuX3JlZ2lzdGVyQnJvd3NlckRlY29yYXRvcnMgfHwgW107CiAgICAkLm1vYmlsZS5fcmVnaXN0ZXJCcm93c2VyRGVjb3JhdG9ycy5wdXNoKHJlZ2lzdGVyQnJvd3NlckRlY29yYXRvcik7CgogICAgbW9kLmNvbmZpZyhbJyRwcm92aWRlJywgZnVuY3Rpb24gKCRwcm92aWRlKSB7CiAgICAgICAgcmVnaXN0ZXJCcm93c2VyRGVjb3JhdG9yKCRwcm92aWRlKTsKICAgIH1dKTsKCgogICAgLy8gVGhpcyBuZWVkcyB0byBiZSBvdXRzaWRlIG9mIGEgYW5ndWxhciBjb25maWcgY2FsbGJhY2ssIGFzIGpxbSByZWFkcyB0aGlzIGR1cmluZyBpbml0aWFsaXphdGlvbi4KICAgIGZ1bmN0aW9uIGRpc2FibGVKcW1IYXNoQ2hhbmdlKCkgewogICAgICAgICQubW9iaWxlLnB1c2hTdGF0ZUVuYWJsZWQgPSBmYWxzZTsKICAgICAgICAkLm1vYmlsZS5oYXNoTGlzdGVuaW5nRW5hYmxlZCA9IGZhbHNlOwogICAgICAgICQubW9iaWxlLmxpbmtCaW5kaW5nRW5hYmxlZCA9IGZhbHNlOwogICAgICAgICQubW9iaWxlLmNoYW5nZVBhZ2UuZGVmYXVsdHMuY2hhbmdlSGFzaCA9IGZhbHNlOwogICAgICAgICQubW9iaWxlLl9oYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gKCkgewogICAgICAgIH07CiAgICB9CgogICAgZGlzYWJsZUpxbUhhc2hDaGFuZ2UoKTsKCiAgICAvLyBodG1sNSBtb2RlIGlzIGFsd2F5cyByZXF1aXJlZCwgc28gd2UgYXJlIGFibGUgdG8gYWxsb3cgbGlua3MgbGlrZQogICAgLy8gPGEgaHJlZj0ic29tZVBhZ2UuaHRtbCI+IHRvIGxvYWQgZXh0ZXJuYWwgcGFnZXMuCiAgICBtb2QuY29uZmlnKFsnJGxvY2F0aW9uUHJvdmlkZXInLCBmdW5jdGlvbiAoJGxvY2F0aW9uUHJvdmlkZXIpIHsKICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7CiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnIScpOwogICAgfV0pOwoKICAgIG1vZC5kaXJlY3RpdmUoJ25nVmlldycsIGZ1bmN0aW9uICgpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIm5nVmlldyBpcyBub3QgYWxsb3dlZCBhbmQgbm90IG5lZWRlZCB3aXRoIHRoZSBqcW0gYWRhcHRlci4iKTsKICAgIH0pOwoKICAgIHZhciBERUZBVUxUX0pRTV9QQUdFID0gJ0RFRkFVTFRfSlFNX1BBR0UnOwoKICAgIG1vZC5jb25maWcoWyckcm91dGVQcm92aWRlcicsIGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikgewogICAgICAgIHZhciBfd2hlbiA9ICRyb3V0ZVByb3ZpZGVyLndoZW47CiAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbiA9IGZ1bmN0aW9uIChwYXRoLCBwYXJhbXMpIHsKICAgICAgICAgICAgaWYgKCFwYXJhbXMudGVtcGxhdGVVcmwgJiYgIXBhcmFtcy5yZWRpcmVjdFRvKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIk9ubHkgcm91dGVzIHdpdGggdGVtcGxhdGVVcmwgb3IgcmVkaXJlY3RUbyBhcmUgYWxsb3dlZCB3aXRoIHRoZSBqcW0gYWRhcHRlciEiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocGFyYW1zLmNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQ29udHJvbGxlcnMgYXJlIG5vdCBhbGxvd2VkIG9uIHJvdXRlcyB3aXRoIHRoZSBqcW0gYWRhcHRlci4gSG93ZXZlciwgeW91IG1heSB1c2UgdGhlIG9uQWN0aXZhdGUgcGFyYW1ldGVyIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIF93aGVuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKCiAgICAgICAgJHJvdXRlUHJvdmlkZXIub3RoZXJ3aXNlKHsKICAgICAgICAgICAgdGVtcGxhdGVVcmw6REVGQVVMVF9KUU1fUEFHRQogICAgICAgIH0pOwogICAgfV0pOwoKICAgIGZ1bmN0aW9uIGdldEJhc2VQYXRoKHBhdGgpIHsKICAgICAgICByZXR1cm4gcGF0aC5zdWJzdHIoMCwgcGF0aC5sYXN0SW5kZXhPZignLycpKTsKICAgIH0KCiAgICBtb2QucnVuKFsnJHJvdXRlJywgJyRyb290U2NvcGUnLCAnJGxvY2F0aW9uJywgJyRicm93c2VyJywgJyRoaXN0b3J5JywgZnVuY3Rpb24gKCRyb3V0ZSwgJHJvb3RTY29wZSwgJGxvY2F0aW9uLCAkYnJvd3NlciwgJGhpc3RvcnkpIHsKICAgICAgICB2YXIgX2RpYWxvZ1VybCA9ICcvJyArICQubW9iaWxlLmRpYWxvZ0hhc2hLZXk7CgogICAgICAgICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsIG9uUm91dGVDaGFuZ2VTdGFydCk7CiAgICAgICAgJHJvb3RTY29wZS4kb24oJ2pxbVBhZ2ViZWZvcmVzaG93Jywgb25QYWdlYmVmb3Jlc2hvdyk7CiAgICAgICAgJHJvb3RTY29wZS4kb24oJyRyb3V0ZUNoYW5nZVN1Y2Nlc3MnLCBvblJvdXRlQ2hhbmdlU3VjY2Vzcyk7CiAgICAgICAgcmVtb3ZlRGlhbG9nVXJsV2hlbkxvY2F0aW9uSGFzaENoYW5nZXMoJHJvb3RTY29wZSwgJGxvY2F0aW9uKTsKICAgICAgICBpbnN0cnVtZW50UG9wdXBDbG9zZVRvTmF2aWdhdGVCYWNrV2hlbkRpYWxvZ1VybElzU2V0KCk7CiAgICAgICAgaW5zdHJ1bWVudERpYWxvZ0Nsb3NlVG9OYXZpZ2F0ZUJhY2tXaGVuRGlhbG9nVXJsSXNTZXQoKTsKCiAgICAgICAgLy8gLS0tLS0tLS0tLQoKICAgICAgICBmdW5jdGlvbiBvblJvdXRlQ2hhbmdlU3RhcnQoZXZlbnQsIG5ld1JvdXRlKSB7CiAgICAgICAgICAgIHZhciByb3V0ZU92ZXJyaWRlID0gJGxvY2F0aW9uLiQkcm91dGVPdmVycmlkZTsKICAgICAgICAgICAgZGVsZXRlICRsb2NhdGlvbi4kJHJvdXRlT3ZlcnJpZGU7CiAgICAgICAgICAgIGlmIChyb3V0ZU92ZXJyaWRlKSB7CiAgICAgICAgICAgICAgICBpZiAocm91dGVPdmVycmlkZS5vbkFjdGl2YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgbmV3Um91dGUub25BY3RpdmF0ZSA9IHJvdXRlT3ZlcnJpZGUub25BY3RpdmF0ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG5ld1JvdXRlLmpxbU9wdGlvbnMgPSBuZXdSb3V0ZS5qcW1PcHRpb25zIHx8IHt9OwogICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQobmV3Um91dGUuanFtT3B0aW9ucywgcm91dGVPdmVycmlkZS5qcW1PcHRpb25zKTsKCiAgICAgICAgICAgICAgICBuZXdSb3V0ZS5yZXNvbHZlID0gbmV3Um91dGUucmVzb2x2ZSB8fCB7fTsKICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyb3V0ZU92ZXJyaWRlLmxvY2FscywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsKICAgICAgICAgICAgICAgICAgICBuZXdSb3V0ZS5yZXNvbHZlW2tleV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFByZXZlbnQgYW5ndWxhciBmcm9tIGxvYWRpbmcgdGhlIHRlbXBsYXRlLCBhcyBqcXVlcnkgbW9iaWxlIGFscmVhZHkgZG9lcyB0aGlzIQogICAgICAgICAgICBuZXdSb3V0ZS5uZ21UZW1wbGF0ZVVybCA9IG5ld1JvdXRlLnRlbXBsYXRlVXJsOwogICAgICAgICAgICBuZXdSb3V0ZS50ZW1wbGF0ZVVybCA9IHVuZGVmaW5lZDsKICAgICAgICB9CgoKICAgICAgICBmdW5jdGlvbiBvblBhZ2ViZWZvcmVzaG93KGV2ZW50KSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gJHJvdXRlLmN1cnJlbnQ7CiAgICAgICAgICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnQub25BY3RpdmF0ZSkgewogICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0U2NvcGUuJGV2YWwoY3VycmVudC5vbkFjdGl2YXRlLCBjdXJyZW50LmxvY2Fscyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGlzRGlhbG9nID0gJC5tb2JpbGUuYWN0aXZlUGFnZSAmJiAkLm1vYmlsZS5hY3RpdmVQYWdlLmpxbURhdGEoInJvbGUiKSA9PT0gImRpYWxvZyI7CiAgICAgICAgICAgIGlmIChpc0RpYWxvZykgewogICAgICAgICAgICAgICAgZGlhbG9nVXJsKHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBvblJvdXRlQ2hhbmdlU3VjY2VzcygpIHsKICAgICAgICAgICAgdmFyIG5ld1JvdXRlID0gJHJvdXRlLmN1cnJlbnQ7CiAgICAgICAgICAgIHZhciAkZG9jdW1lbnQgPSAkKGRvY3VtZW50KTsKCiAgICAgICAgICAgIHZhciB1cmwgPSBuZXdSb3V0ZS5uZ21UZW1wbGF0ZVVybDsKICAgICAgICAgICAgaWYgKHVybCA9PT0gREVGQVVMVF9KUU1fUEFHRSkgewogICAgICAgICAgICAgICAgaWYgKGRpYWxvZ1VybCgpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHVybCA9ICRsb2NhdGlvbi51cmwoKTsKICAgICAgICAgICAgICAgIHZhciBiYXNlSHJlZiA9ICRicm93c2VyLmJhc2VIcmVmKCk7CiAgICAgICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoJy8nKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICB1cmwgPSBiYXNlSHJlZiArIHVybDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdXJsID0gZ2V0QmFzZVBhdGgoYmFzZUhyZWYpICsgdXJsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghdXJsKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIG5hdkNvbmZpZyA9IG5ld1JvdXRlLmpxbU9wdGlvbnMgPSBuZXdSb3V0ZS5qcW1PcHRpb25zIHx8IHt9OwogICAgICAgICAgICBpZiAoJGhpc3RvcnkuZnJvbVVybENoYW5nZSkgewogICAgICAgICAgICAgICAgbmF2Q29uZmlnLmZyb21IYXNoQ2hhbmdlID0gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCEkLm1vYmlsZS5maXJzdFBhZ2UpIHsKICAgICAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCJqcW1Jbml0Iiwgc3RhcnROYXZpZ2F0aW9uKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0YXJ0TmF2aWdhdGlvbigpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBzdGFydE5hdmlnYXRpb24oKSB7CiAgICAgICAgICAgICAgICAkLm1vYmlsZS5jaGFuZ2VQYWdlKHVybCwgbmF2Q29uZmlnKTsKICAgICAgICAgICAgICAgIGlmICgkLm1vYmlsZS5wb3B1cC5hY3RpdmUpIHsKICAgICAgICAgICAgICAgICAgICAvLyBQb3B1cCBhcmUgYXZhaWxhYmxlIHdpdGhvdXQgbG9hZGluZywKICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSBjYW4gY2hlY2sgdGhlbSByaWdodCBhZnRlciBjYWxsaW5nICQubW9iaWxlLmNoYW5nZVBhZ2UhCiAgICAgICAgICAgICAgICAgICAgZGlhbG9nVXJsKHRydWUpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlRGlhbG9nVXJsV2hlbkxvY2F0aW9uSGFzaENoYW5nZXMoJHJvb3RTY29wZSwgJGxvY2F0aW9uKSB7CiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdGFydCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpOwogICAgICAgICAgICAgICAgaWYgKGRpYWxvZ1VybCgpICYmIGhhc2gpIHsKICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24udXJsKCRsb2NhdGlvbi4kJHVybEJlZm9yZURpYWxvZyk7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRsb2NhdGlvbi4kJHVybEJlZm9yZURpYWxvZzsKICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24uaGFzaChoYXNoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpbnN0cnVtZW50UG9wdXBDbG9zZVRvTmF2aWdhdGVCYWNrV2hlbkRpYWxvZ1VybElzU2V0KCkgewogICAgICAgICAgICB2YXIgcG9wdXBQcm90byA9ICQubW9iaWxlLnBvcHVwLnByb3RvdHlwZTsKICAgICAgICAgICAgdmFyIF9jbG9zZSA9IHBvcHVwUHJvdG8uX2Nsb3NlOwogICAgICAgICAgICBwb3B1cFByb3RvLl9jbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmIChkaWFsb2dVcmwoKSkgewogICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLmdvQmFjaygpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBfY2xvc2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGluc3RydW1lbnREaWFsb2dDbG9zZVRvTmF2aWdhdGVCYWNrV2hlbkRpYWxvZ1VybElzU2V0KCkgewogICAgICAgICAgICB2YXIgZGlhbG9nUHJvdG8gPSAkLm1vYmlsZS5kaWFsb2cucHJvdG90eXBlOwogICAgICAgICAgICBkaWFsb2dQcm90by5vcmlnQ2xvc2UgPSBkaWFsb2dQcm90by5jbG9zZTsKICAgICAgICAgICAgZGlhbG9nUHJvdG8uY2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNDbG9zZWFibGUpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0Nsb3NlYWJsZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGlmIChkaWFsb2dVcmwoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24uZ29CYWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3JpZ0Nsb3NlKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgLy8gZ2V0cyBvciBzZXRzIGEgZGlhbG9nIHVybC4KICAgICAgICAvLyBXZSB1c2UgdGhlIHNhbWUgYmVoYXZpb3VyIGFzIGluIGpRdWVyeSBNb2JpbGU6IGRpYWxvZyB1cmxzCiAgICAgICAgLy8gYXJlIGhlcmUgZm9yIGFsbG93aW5nIHVzZXJzIHRvIGNsaWNrICJiYWNrIiB0byBjbG9zZSB0aGUgZGlhbG9nLAogICAgICAgIC8vIGJ1dCBwcmV2ZW50IGhpbSBmcm9tIG9wZW5pbmcgdGhlbSBhZ2FpbiB2aWEgImZvcndhcmQiLgogICAgICAgIGZ1bmN0aW9uIGRpYWxvZ1VybCgpIHsKICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgIC8vIGdldHRlcgogICAgICAgICAgICAgICAgcmV0dXJuICRsb2NhdGlvbi5wYXRoKCkgPT09IF9kaWFsb2dVcmw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gc2V0dGVyCiAgICAgICAgICAgICRsb2NhdGlvbi4kJHVybEJlZm9yZURpYWxvZyA9ICRsb2NhdGlvbi51cmwoKTsKICAgICAgICAgICAgJGxvY2F0aW9uLnVybChfZGlhbG9nVXJsKTsKICAgICAgICAgICAgJGxvY2F0aW9uLnJlcGxhY2UoKTsKICAgICAgICB9CiAgICB9XSk7CgogICAgZnVuY3Rpb24gZGVmYXVsdENsaWNrSGFuZGxlcihldmVudCwgaUVsZW1lbnQsICRzY29wZSwgJGxvY2F0aW9uKSB7CiAgICAgICAgLy8gQXR0ZW50aW9uOiBEbyBOT1Qgc3RvcFByb3BhZ2F0aW9uLCBhcyBvdGhlcndpc2UKICAgICAgICAvLyBqcXVlcnkgTW9iaWxlIHdpbGwgbm90IGdlbmVyYXRlIGEgdmNsaWNrIGV2ZW50IQogICAgICAgIHZhciByZWwgPSBpRWxlbWVudC5qcW1EYXRhKCJyZWwiKTsKICAgICAgICBpZiAocmVsID09PSAnYmFjaycpIHsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkbG9jYXRpb24uZ29CYWNrKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSBpZiAoaXNOb29wTGluayhpRWxlbWVudCkpIHsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgYWJzSHJlZiA9IGlFbGVtZW50LnByb3AoJ2hyZWYnKSwKICAgICAgICAgICAgICAgIHJld3JpdHRlblVybCA9ICRsb2NhdGlvbi4kJHJld3JpdGVBcHBVcmwoYWJzSHJlZik7CgogICAgICAgICAgICBpZiAoYWJzSHJlZiAmJiAhaUVsZW1lbnQuYXR0cigndGFyZ2V0JykgJiYgcmVsICE9PSAnZXh0ZXJuYWwnICYmIHJld3JpdHRlblVybCkgewogICAgICAgICAgICAgICAgLy8gU2VlIG9yaWdpbmFsIGFuZ3VsYXIgZGVmYXVsdCBjbGljayBoYW5kbGVyOgogICAgICAgICAgICAgICAgLy8gdXBkYXRlIGxvY2F0aW9uIG1hbnVhbGx5CiAgICAgICAgICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShyZXdyaXR0ZW5VcmwpOwogICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIC8vIGhhY2sgdG8gd29yayBhcm91bmQgRkY2IGJ1ZyA2ODQyMDggd2hlbiBzY2VuYXJpbyBydW5uZXIgY2xpY2tzIG9uIGxpbmtzCiAgICAgICAgICAgICAgICB3aW5kb3cuYW5ndWxhclsnZmYtNjg0MjA4LXByZXZlbnREZWZhdWx0J10gPSB0cnVlOwogICAgICAgICAgICAgICAgLy8gQWRkaXRpb25hbCBoYW5kbGluZwogICAgICAgICAgICAgICAgdmFyIG92ZXJyaWRlID0gJGxvY2F0aW9uLnJvdXRlT3ZlcnJpZGUoKSB8fCB7fTsKICAgICAgICAgICAgICAgIHZhciBqcW1PcHRpb25zID0gb3ZlcnJpZGUuanFtT3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgICAgICBsaW5rOmlFbGVtZW50CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaWYgKHJlbCkgewogICAgICAgICAgICAgICAgICAgIGpxbU9wdGlvbnMucm9sZSA9IHJlbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciB0cmFucyA9IGlFbGVtZW50LmpxbURhdGEoInRyYW5zaXRpb24iKTsKICAgICAgICAgICAgICAgIGlmICh0cmFucykgewogICAgICAgICAgICAgICAgICAgIGpxbU9wdGlvbnMudHJhbnNpdGlvbiA9IHRyYW5zOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlFbGVtZW50LmpxbURhdGEoImRpcmVjdGlvbiIpOwogICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbikgewogICAgICAgICAgICAgICAgICAgIGpxbU9wdGlvbnMucmV2ZXJzZSA9IGRpcmVjdGlvbiA9PT0gInJldmVyc2UiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGxvY2F0aW9uLnJvdXRlT3ZlcnJpZGUob3ZlcnJpZGUpOwogICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGlzTm9vcExpbmsoZWxlbWVudCkgewogICAgICAgIHZhciBocmVmID0gZWxlbWVudC5hdHRyKCdocmVmJyk7CiAgICAgICAgcmV0dXJuIChocmVmID09PSAnIycgfHwgIWhyZWYpOwogICAgfQoKICAgIChmdW5jdGlvbiBwYXRjaEFuZ3VsYXJUb0FsbG93VmNsaWNrc09uRW1wdHlBbmNob3JUYWdzKCkgewogICAgICAgIC8vIFByb2JsZW0gMToKICAgICAgICAvLyBBbmd1bGFyIGhhcyBhIGRpcmVjdGl2ZSBmb3IgbGlua3Mgd2l0aCBhbiBlbXB0eSAiaHJlZiIgYXR0cmlidXRlLgogICAgICAgIC8vIFRoaXMgZGlyZWN0aXZlIGhhcyBhIGNsaWNrLWxpc3RlbmVyIHdoaWNoIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbgogICAgICAgIC8vIGFuZCBzdG9wcyB0aGUgcHJvcGFnYXRpb24gb2YgdGhlIGV2ZW50IHRvIHBhcmVudCBlbGVtZW50cy4KICAgICAgICAvLyBIb3dldmVyLCBmb3Igc2ltdWxhdGluZyB2Y2xpY2tzIGluIGRlc2t0b3AgYnJvd3NlcnMsIGpRdWVyeSBNb2JpbGUgaGFzIGEgY2xpY2stbGlzdGVuZXIKICAgICAgICAvLyBvbiB0aGUgZG9jdW1lbnQuIEFzIGFuZ3VsYXIgc3RvcHMgcHJvcGFnYXRpb24gb2YgdGhlIGV2ZW50LCBqUXVlcnkgTW9iaWxlIG5ldmVyCiAgICAgICAgLy8gcmVjZWl2ZXMgaXQgYW5kIHRoZXJlZm9yZSBuZXZlciBmaXJlcyB0aGUgdmNsaWNrIGV2ZW50LgoKICAgICAgICAvLyBQcm9ibGVtIDI6CiAgICAgICAgLy8gTGlua3Mgd2l0aCBhIGhyZWYtQXR0cmlidXRlIG9mIHZhbHVlICIjIiBhcmUgbm9vcHMgaW4gcGxhaW4ganF1ZXJ5IG1vYmlsZSBhcHBzCiAgICAgICAgLy8gKHNlZSBlLmcuIHRoZSBjbG9zZSBidXR0b24gb2YgZGlhbG9ncykuCiAgICAgICAgLy8gSG93ZXZlciwgYW5ndWxhciBpbnRlcnByZXRzIHN1Y2ggbGlua3MgYXMgYSBub3JtYWwgbGluayBhbmQgYnkgdGhpcyB1cGRhdGVzCiAgICAgICAgLy8gdGhlIGhhc2ggb2YgJGxvY2F0aW9uLXNlcnZpY2UgdG8gYmUgZW1wdHkuCgogICAgICAgIC8vIFNvbHV0aW9uIHBhcnQxOiBuZXcgZGlyZWN0aXZlIHRoYXQgc2V0cyB0aGUgaHJlZi1BdHRyaWJ1dGUgb2YgYWxsIGxpbmtzIHRvICIjIi4gQnkgdGhpcywKICAgICAgICAvLyB0aGUgbWVudGlvbmVkIGFuZ3VsYXIgZGlyZWN0aXZlIGZvciBsaW5rcyB3aXRoIGVtcHR5IGhyZWYtQXR0cmlidXRlcyBkb2VzIG5vIG1vcmUgYXBwbHkKICAgICAgICBtb2QuZGlyZWN0aXZlKCdhJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcmVzdHJpY3Q6J0UnLAogICAgICAgICAgICAgICAgY29tcGlsZTpmdW5jdGlvbiAoZWxlbWVudCwgYXR0cikgewogICAgICAgICAgICAgICAgICAgIGlmIChpc05vb3BMaW5rKGVsZW1lbnQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuJHNldCgnaHJlZicsICcjJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgIH0pOwoKICAgICAgICAvLyBTb2x1dGlvbiBwYXJ0MjogcGF0Y2ggdGhlIGxpc3RlbmVyIGZvciBjbGlja3MgaW4gYW5ndWxhciB0aGF0IHVwZGF0ZXMgJGxvY2F0aW9uIHRvIG9ubHkgYmUgZXhlY3V0ZWQKICAgICAgICAvLyB3aGVuIHRoZSBocmVmLUF0dHJpYnV0ZSBvZiBhIGxpbmsgaXMgbm90IGVxdWFsIHRvICIjIi4gT3RoZXJ3aXNlIHN0aWxsIHByZXZlbnQgdGhlIGRlZmF1bHQgYWN0aW9uLAogICAgICAgIC8vIHNvIHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3QgdXBkYXRlIHRoZSBicm93c2VyIGxvY2F0aW9uIGRpcmVjdGx5LgogICAgICAgIC8vIEhlcmUgd2UganVzdCBwcmV2ZW50IGFuZ3VsYXIgZnJvbSBpbnN0YWxsaW5nIGl0J3MgZGVmYXVsdCBjbGljayBoYW5kbGVyCiAgICAgICAgLy8gYW5kIGNyZWF0ZSBvdXIgb3duLgogICAgICAgIG1vZC5jb25maWcoWyckbG9jYXRpb25Qcm92aWRlcicsIGZ1bmN0aW9uICgkbG9jYXRpb25Qcm92aWRlcikgewogICAgICAgICAgICB2YXIgb3JpZyRnZXQgPSAkbG9jYXRpb25Qcm92aWRlci4kZ2V0OwogICAgICAgICAgICAkbG9jYXRpb25Qcm92aWRlci4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHJvb3RFbGVtZW50JywgJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCBmdW5jdGlvbiAoJGluamVjdG9yLCAkcm9vdEVsZW1lbnQsICRyb290U2NvcGUsICRicm93c2VyKSB7CiAgICAgICAgICAgICAgICB2YXIgJGxvY2F0aW9uID0gcHJldmVudENsaWNrSGFuZGxlcnNPblJvb3RFbGVtZW50V2hpbGVDYWxsaW5nKCRyb290RWxlbWVudCwKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkaW5qZWN0b3IuaW52b2tlKG9yaWckZ2V0LCAkbG9jYXRpb25Qcm92aWRlcik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAvLyBOb3RlOiBTb21lIG9mIHRoaXMgY2xpY2sgaGFuZGxlciB3YXMgY29waWVkIGZyb20gdGhlIG9yaWdpbmFsCiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IGNsaWNrIGhhbmRsZXIgaW4gYW5ndWxhci4KICAgICAgICAgICAgICAgICRyb290RWxlbWVudC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgIC8vIFRPRE8odm9qdGEpOiByZXdyaXRlIGxpbmsgd2hlbiBvcGVuaW5nIGluIG5ldyB0YWIvd2luZG93IChpbiBsZWdhY3kgYnJvd3NlcikKICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50bHkgd2Ugb3BlbiBuaWNlIHVybCBsaW5rIGFuZCByZWRpcmVjdCB0aGVuCgogICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQud2hpY2ggPT0gMikgcmV0dXJuOwoKICAgICAgICAgICAgICAgICAgICB2YXIgZWxtID0gJChldmVudC50YXJnZXQpOwoKICAgICAgICAgICAgICAgICAgICAvLyB0cmF2ZXJzZSB0aGUgRE9NIHVwIHRvIGZpbmQgZmlyc3QgQSB0YWcKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYW5ndWxhci5sb3dlcmNhc2UoZWxtWzBdLm5vZGVOYW1lKSAhPT0gJ2EnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSByZXdyaXRpbmcgaWYgbm8gQSB0YWcgKHJlYWNoZWQgcm9vdCBlbGVtZW50LCBvciBubyBwYXJlbnQgLSByZW1vdmVkIGZyb20gZG9jdW1lbnQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbG1bMF0gPT09ICRyb290RWxlbWVudFswXSB8fCAhKGVsbSA9IGVsbS5wYXJlbnQoKSlbMF0pIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENsaWNrSGFuZGxlcihldmVudCwgZWxtLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gJGxvY2F0aW9uOwogICAgICAgICAgICB9XTsKICAgICAgICB9XSk7CgogICAgICAgIGZ1bmN0aW9uIHByZXZlbnRDbGlja0hhbmRsZXJzT25Sb290RWxlbWVudFdoaWxlQ2FsbGluZygkcm9vdEVsZW1lbnQsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBfYmluZCA9ICQuZm4uYmluZDsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICQuZm4uYmluZCA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAnY2xpY2snICYmIHRoaXNbMF0gPT09ICRyb290RWxlbWVudFswXSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBfYmluZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgJC5mbi5iaW5kID0gX2JpbmQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KSgpOwoKCn0pKGFuZ3VsYXIsICQpOwooZnVuY3Rpb24gKCQsIGFuZ3VsYXIpIHsKCiAgICB2YXIgbW9kID0gYW5ndWxhci5tb2R1bGUoIm5nIik7CgogICAgZnVuY3Rpb24gcmVnaXN0ZXJCcm93c2VyRGVjb3JhdG9yKCRwcm92aWRlKSB7CiAgICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckcm9vdFNjb3BlJywgWyckZGVsZWdhdGUnLCByb290U2NvcGVTdXBwcmVzc0V2ZW50SW5EaWdlc3RDeWNsZURlY29yYXRvcl0pOwogICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJGxvY2F0aW9uJywgWyckZGVsZWdhdGUnLCAnJGhpc3RvcnknLCBsb2NhdGlvbkJhY2tEZWNvcmF0b3JdKTsKICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRicm93c2VyJywgWyckZGVsZWdhdGUnLCAnJGhpc3RvcnknLCAnJHJvb3RTY29wZScsICckaW5qZWN0b3InLCBicm93c2VySGlzdG9yeURlY29yYXRvcl0pOwoKCiAgICAgICAgZnVuY3Rpb24gcm9vdFNjb3BlU3VwcHJlc3NFdmVudEluRGlnZXN0Q3ljbGVEZWNvcmF0b3IoJHJvb3RTY29wZSkgewogICAgICAgICAgICB2YXIgc3VwcHJlc3NlZEV2ZW50cyA9IHt9OwogICAgICAgICAgICAkcm9vdFNjb3BlLnN1cHByZXNzRXZlbnRJbkRpZ2VzdEN5Y2xlID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkgewogICAgICAgICAgICAgICAgc3VwcHJlc3NlZEV2ZW50c1tldmVudE5hbWVdID0gdHJ1ZTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIF8kYnJvYWRjYXN0ID0gJHJvb3RTY29wZS4kYnJvYWRjYXN0OwogICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7CiAgICAgICAgICAgICAgICBpZiAoc3VwcHJlc3NlZEV2ZW50c1tldmVudE5hbWVdKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIF8kYnJvYWRjYXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBfJGRpZ2VzdCA9ICRyb290U2NvcGUuJGRpZ2VzdDsKICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIHJlcyA9IF8kZGlnZXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICBzdXBwcmVzc2VkRXZlbnRzID0ge307CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGxvY2F0aW9uQmFja0RlY29yYXRvcigkbG9jYXRpb24sICRoaXN0b3J5KSB7CiAgICAgICAgICAgICRsb2NhdGlvbi5iYWNrTW9kZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICRsb2NhdGlvbi4kJHJlcGxhY2UgPSAiYmFjayI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgJGxvY2F0aW9uLmdvQmFjayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmICgkaGlzdG9yeS5hY3RpdmVJbmRleCA8PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJUaGVyZSBpcyBubyBwYWdlIGluIHRoZSBoaXN0b3J5IHRvIGdvIGJhY2sgdG8hIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLiQkcGFyc2UoJGhpc3RvcnkudXJsU3RhY2tbJGhpc3RvcnkuYWN0aXZlSW5kZXggLSAxXSk7CiAgICAgICAgICAgICAgICB0aGlzLmJhY2tNb2RlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuICRsb2NhdGlvbjsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGJyb3dzZXJIaXN0b3J5RGVjb3JhdG9yKCRicm93c2VyLCAkaGlzdG9yeSwgJHJvb3RTY29wZSwgJGluamVjdG9yKSB7CiAgICAgICAgICAgIHZhciBfdXJsID0gJGJyb3dzZXIudXJsOwogICAgICAgICAgICB2YXIgY2FjaGVkUm91dGVPdmVycmlkZSA9IG51bGw7CiAgICAgICAgICAgICRicm93c2VyLnVybCA9IGZ1bmN0aW9uICh1cmwsIHJlcGxhY2UpIHsKICAgICAgICAgICAgICAgIGlmICh1cmwpIHsKICAgICAgICAgICAgICAgICAgICAvLyBzZXR0ZXIKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gJGhpc3Rvcnkub25VcmxDaGFuZ2VQcm9ncmFtbWF0aWNhbGx5KHVybCwgcmVwbGFjZSA9PT0gdHJ1ZSwgcmVwbGFjZSA9PT0gJ2JhY2snKTsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW5jZWwgbmF2aWdhdGlvbiBhbmQgcmVseSBvbiB0aGUgY2FsbGJhY2sKICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSBicm93c2VyIGhpc3RvcnkuCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkbG9jYXRpb24gPSAkaW5qZWN0b3IuZ2V0KCckbG9jYXRpb24nKTsKICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVkUm91dGVPdmVycmlkZSA9ICRsb2NhdGlvbi5yb3V0ZU92ZXJyaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKF91cmwuY2FsbCh0aGlzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1cHByZXNzICRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MgYW5kICRsb2NhdGlvbkNoYW5nZVN0YXJ0IGV2ZW50IGluIHRoaXMgZXZhbCBsb29wLAogICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB0aGUgcm91dGVzIGRvbid0IGdldCB1cGRhdGVkIQogICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN1cHByZXNzRXZlbnRJbkRpZ2VzdEN5Y2xlKCckbG9jYXRpb25DaGFuZ2VTdGFydCcpOwogICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN1cHByZXNzRXZlbnRJbkRpZ2VzdEN5Y2xlKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gX3VybC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgX29uVXJsQ2hhbmdlID0gJGJyb3dzZXIub25VcmxDaGFuZ2U7CiAgICAgICAgICAgICRicm93c2VyLm9uVXJsQ2hhbmdlKGZ1bmN0aW9uIChuZXdVcmwpIHsKICAgICAgICAgICAgICAgIGlmIChjYWNoZWRSb3V0ZU92ZXJyaWRlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICRsb2NhdGlvbiA9ICRpbmplY3Rvci5nZXQoJyRsb2NhdGlvbicpOwogICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5yb3V0ZU92ZXJyaWRlKGNhY2hlZFJvdXRlT3ZlcnJpZGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGhpc3Rvcnkub25VcmxDaGFuZ2VCcm93c2VyKG5ld1VybCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gJGJyb3dzZXI7CiAgICAgICAgfQogICAgfQoKICAgICQubW9iaWxlLl9yZWdpc3RlckJyb3dzZXJEZWNvcmF0b3JzID0gJC5tb2JpbGUuX3JlZ2lzdGVyQnJvd3NlckRlY29yYXRvcnMgfHwgW107CiAgICAkLm1vYmlsZS5fcmVnaXN0ZXJCcm93c2VyRGVjb3JhdG9ycy5wdXNoKHJlZ2lzdGVyQnJvd3NlckRlY29yYXRvcik7CgogICAgbW9kLmNvbmZpZyhbJyRwcm92aWRlJywgZnVuY3Rpb24gKCRwcm92aWRlKSB7CiAgICAgICAgcmVnaXN0ZXJCcm93c2VyRGVjb3JhdG9yKCRwcm92aWRlKTsKICAgIH1dKTsKCiAgICBtb2QuZmFjdG9yeSgnJGhpc3RvcnknLCBbZnVuY3Rpb24gKCR0aW1lb3V0KSB7CiAgICAgICAgdmFyICRoaXN0b3J5OwoKICAgICAgICBmdW5jdGlvbiBnbyhyZWxhdGl2ZUluZGV4KSB7CiAgICAgICAgICAgIC8vIEFsd2F5cyBleGVjdXRlIGhpc3RvcnkuZ28gYXN5bmNocm9ub3VzbHkuCiAgICAgICAgICAgIC8vIFRoaXMgaXMgcmVxdWlyZWQgYXMgZmlyZWZveCBhbmQgSUUxMCB0cmlnZ2VyIHRoZSBwb3BzdGF0ZSBldmVudAogICAgICAgICAgICAvLyBpbiBzeW5jLCB3aGljaCB3b3VsZCByZXN1bHQgaW4gcHJvYmxlbXMsIGFzCiAgICAgICAgICAgIC8vIGluIGJhY2tNb2RlIHdlIHN0b3AgdGhlIG5vcm1hbCBuYXZpZ2F0aW9uIGJ5IHN0b3BwaW5nIHRoZSAkbG9jYXRpb25DaGFuZ2VTdWNjZXNzIGV2ZW50LgogICAgICAgICAgICAvLyBIb3dldmVyLCBpZiB3ZSB3b3VsZCB0cmlnZ2VyIGEgcG9wc3RhdGUgZXZlbnQgaGVyZSBpbiBzeW5jLAogICAgICAgICAgICAvLyB0aGUgJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcyBldmVudCBmcm9tIHRoZSBwb3BlZCBzdGF0ZSBldmVudCB3b3VsZCBhbHNvIGJlIHN3YWxsb3dlZCEKICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIHVpIHRlc3QgZm9yIHRoaXMgKHNlZSBuZ21Sb3V0aW5nVWlTcGVjIyRsb2NhdGlvbi5iYWNrKS4KICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5nbyhyZWxhdGl2ZUluZGV4KTsKICAgICAgICAgICAgfSwwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9uVXJsQ2hhbmdlQnJvd3Nlcih1cmwpIHsKICAgICAgICAgICAgJGhpc3RvcnkuYWN0aXZlSW5kZXggPSAkaGlzdG9yeS51cmxTdGFjay5pbmRleE9mKHVybCk7CiAgICAgICAgICAgIGlmICgkaGlzdG9yeS5hY3RpdmVJbmRleCA9PT0gLTEpIHsKICAgICAgICAgICAgICAgIG9uVXJsQ2hhbmdlUHJvZ3JhbW1hdGljYWxseSh1cmwsIGZhbHNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRoaXN0b3J5LmZyb21VcmxDaGFuZ2UgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBvblVybENoYW5nZVByb2dyYW1tYXRpY2FsbHkodXJsLCByZXBsYWNlLCBiYWNrKSB7CiAgICAgICAgICAgIGlmIChiYWNrKSB7CiAgICAgICAgICAgICAgICB2YXIgY3VyckluZGV4ID0gJGhpc3RvcnkuYWN0aXZlSW5kZXg7CiAgICAgICAgICAgICAgICB2YXIgbmV3SW5kZXg7CiAgICAgICAgICAgICAgICBmb3IgKG5ld0luZGV4ID0gY3VyckluZGV4IC0gMTsgbmV3SW5kZXggPj0gMCAmJiAkaGlzdG9yeS51cmxTdGFja1tuZXdJbmRleF0gIT09IHVybDsgbmV3SW5kZXgtLSk7CiAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggIT09IC0xICYmIGN1cnJJbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAkaGlzdG9yeS5nbyhuZXdJbmRleCAtIGN1cnJJbmRleCk7CiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcCB0aGUgbm9ybWFsIG5hdmlnYXRpb24hCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkaGlzdG9yeS51cmxTdGFja1skaGlzdG9yeS5hY3RpdmVJbmRleF0gPT09IHVybCkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRoaXN0b3J5LmZyb21VcmxDaGFuZ2UgPSBmYWxzZTsKICAgICAgICAgICAgaWYgKCFyZXBsYWNlKSB7CiAgICAgICAgICAgICAgICAkaGlzdG9yeS5hY3RpdmVJbmRleCsrOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRoaXN0b3J5LnVybFN0YWNrLnNwbGljZSgkaGlzdG9yeS5hY3RpdmVJbmRleCwgJGhpc3RvcnkudXJsU3RhY2subGVuZ3RoIC0gJGhpc3RvcnkuYWN0aXZlSW5kZXgpOwogICAgICAgICAgICAkaGlzdG9yeS51cmxTdGFjay5wdXNoKHVybCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJGhpc3RvcnkgPSB7CiAgICAgICAgICAgIGdvOmdvLAogICAgICAgICAgICB1cmxTdGFjazpbXSwKICAgICAgICAgICAgYWN0aXZlSW5kZXg6LTEsCiAgICAgICAgICAgIGZyb21VcmxDaGFuZ2U6ZmFsc2UsCiAgICAgICAgICAgIG9uVXJsQ2hhbmdlUHJvZ3JhbW1hdGljYWxseTpvblVybENoYW5nZVByb2dyYW1tYXRpY2FsbHksCiAgICAgICAgICAgIG9uVXJsQ2hhbmdlQnJvd3NlcjpvblVybENoYW5nZUJyb3dzZXIKICAgICAgICB9OwogICAgfV0pOwp9KSh3aW5kb3cualF1ZXJ5LCB3aW5kb3cuYW5ndWxhcik7CihmdW5jdGlvbiAoJCwgYW5ndWxhcikgewogICAgLy8gUGF0Y2ggZm9yIG5nLXJlcGVhdCB0byBmaXJlIGFuIGV2ZW50IHdoZW5ldmVyIHRoZSBjaGlsZHJlbiBjaGFuZ2UuCiAgICAvLyBPbmx5IHdhdGNoaW5nIFNjb3BlIGNyZWF0ZS9kZXN0cm95IGlzIG5vdCBlbm91Z2ggaGVyZSwgYXMgbmctcmVwZWF0CiAgICAvLyBjYWNoZXMgdGhlIHNjb3BlcyBkdXJpbmcgcmVvcmRlcmluZy4KCiAgICBmdW5jdGlvbiBzaGFsbG93RXF1YWxzKGNvbGxlY3Rpb24xLCBjb2xsZWN0aW9uMikgewogICAgICAgIGlmICghIWNvbGxlY3Rpb24xIF4gISFjb2xsZWN0aW9uMikgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIHggaW4gY29sbGVjdGlvbjEpIHsKICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24yW3hdICE9PSBjb2xsZWN0aW9uMVt4XSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIHggaW4gY29sbGVjdGlvbjIpIHsKICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24yW3hdICE9PSBjb2xsZWN0aW9uMVt4XSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNoYWxsb3dDbG9uZShjb2xsZWN0aW9uKSB7CiAgICAgICAgaWYgKCFjb2xsZWN0aW9uKSB7CiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uOwogICAgICAgIH0KICAgICAgICB2YXIgcmVzOwogICAgICAgIGlmIChjb2xsZWN0aW9uLmxlbmd0aCkgewogICAgICAgICAgICByZXMgPSBbXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXMgPSB7fTsKICAgICAgICB9CiAgICAgICAgZm9yICh2YXIgeCBpbiBjb2xsZWN0aW9uKSB7CiAgICAgICAgICAgIHJlc1t4XSA9IGNvbGxlY3Rpb25beF07CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXM7CiAgICB9CgogICAgdmFyIG1vZCA9IGFuZ3VsYXIubW9kdWxlKCduZycpOwogICAgbW9kLmRpcmVjdGl2ZSgnbmdSZXBlYXQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcHJpb3JpdHk6MTAwMCwgLy8gc2FtZSBhcyBvcmlnaW5hbCByZXBlYXQKICAgICAgICAgICAgY29tcGlsZTpmdW5jdGlvbiAoZWxlbWVudCwgYXR0ciwgbGlua2VyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHByZTpmdW5jdGlvbiAoc2NvcGUsIGl0ZXJTdGFydEVsZW1lbnQsIGF0dHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cHJlc3Npb24gPSBhdHRyLm5nUmVwZWF0OwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKC9eLitpblxzKyguKilccyokLyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCJFeHBlY3RlZCBuZ1JlcGVhdCBpbiBmb3JtIG9mICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fJyBidXQgZ290ICciICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uICsgIicuIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb25FeHByID0gbWF0Y2hbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0Q29sbGVjdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZUNvdW50ZXIgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBzY29wZS4kZXZhbChjb2xsZWN0aW9uRXhwcik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNoYWxsb3dFcXVhbHMoY29sbGVjdGlvbiwgbGFzdENvbGxlY3Rpb24pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdENvbGxlY3Rpb24gPSBzaGFsbG93Q2xvbmUoY29sbGVjdGlvbik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlQ291bnRlcisrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZUNvdW50ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IG5lZWQgdG8gYmUgcGFyZW50KCkgYXMganF1ZXJ5IGNhbm5vdCB0cmlnZ2VyIGV2ZW50cyBvbiBjb21tZW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKGFuZ3VsYXIgY3JlYXRlcyBhIGNvbW1lbnQgbm9kZSB3aGVuIHVzaW5nIHRyYW5zY2x1c2lvbiwgYXMgbmctcmVwZWF0IGRvZXMpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlclN0YXJ0RWxlbWVudC5wYXJlbnQoKS50cmlnZ2VyKCIkY2hpbGRyZW5DaGFuZ2VkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfSk7Cn0pKCQsIGFuZ3VsYXIpOwooZnVuY3Rpb24gKCQsIGFuZ3VsYXIpIHsKICAgIC8vIFRoaXMgaXMgYSBjb3B5IG9mIHBhcnRzIG9mIGFuZ3VsYXIncyBuZ09wdGlvbnMgZGlyZWN0aXZlIHRvIGRldGVjdCBjaGFuZ2VzIGluIHRoZSB2YWx1ZXMKICAgIC8vIG9mIG5nT3B0aW9ucyAoZW1pdHMgdGhlICRjaGlsZHJlbkNoYW5nZWQgZXZlbnQgb24gdGhlIHNjb3BlKS4KICAgIC8vIFRoaXMgaXMgbmVlZGVkIGFzIG5nT3B0aW9ucyBkb2VzIG5vdCBwcm92aWRlIGEgd2F5IHRvIGxpc3RlbiB0byBjaGFuZ2VzLgoKICAgIGZ1bmN0aW9uIHNvcnRlZEtleXMob2JqKSB7CiAgICAgICAgdmFyIGtleXMgPSBbXTsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGtleXMuc29ydCgpOwogICAgfQoKICAgIHZhciBOR19PUFRJT05TX1JFR0VYUCA9IC9eXHMqKC4qPykoPzpccythc1xzKyguKj8pKT8oPzpccytncm91cFxzK2J5XHMrKC4qKSk/XHMrZm9yXHMrKD86KFtcJFx3XVtcJFx3XGRdKil8KD86XChccyooW1wkXHddW1wkXHdcZF0qKVxzKixccyooW1wkXHddW1wkXHdcZF0qKVxzKlwpKSlccytpblxzKyguKikkLzsKICAgIHZhciBtb2QgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKICAgIG1vZC5kaXJlY3RpdmUoJ25nT3B0aW9ucycsIFsnJHBhcnNlJywgZnVuY3Rpb24gKCRwYXJzZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlcXVpcmU6IFsnc2VsZWN0JywgJz9uZ01vZGVsJ10sCiAgICAgICAgICAgIGxpbms6ZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykgewogICAgICAgICAgICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZwogICAgICAgICAgICAgICAgaWYgKCFjdHJsc1sxXSkgcmV0dXJuOwoKICAgICAgICAgICAgICAgIHZhciBtYXRjaDsKICAgICAgICAgICAgICAgIHZhciBvcHRpb25zRXhwID0gYXR0ci5uZ09wdGlvbnM7CgogICAgICAgICAgICAgICAgaWYgKCEgKG1hdGNoID0gb3B0aW9uc0V4cC5tYXRjaChOR19PUFRJT05TX1JFR0VYUCkpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgICAgICJFeHBlY3RlZCBuZ09wdGlvbnMgaW4gZm9ybSBvZiAnX3NlbGVjdF8gKGFzIF9sYWJlbF8pPyBmb3IgKF9rZXlfLCk/X3ZhbHVlXyBpbiBfY29sbGVjdGlvbl8nIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIGJ1dCBnb3QgJyIgKyBvcHRpb25zRXhwICsgIicuIik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlGbiA9ICRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSksCiAgICAgICAgICAgICAgICAgICAgdmFsdWVOYW1lID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNl0sCiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IG1hdGNoWzVdLAogICAgICAgICAgICAgICAgICAgIGdyb3VwQnlGbiA9ICRwYXJzZShtYXRjaFszXSB8fCAnJyksCiAgICAgICAgICAgICAgICAgICAgdmFsdWVGbiA9ICRwYXJzZShtYXRjaFsyXSA/IG1hdGNoWzFdIDogdmFsdWVOYW1lKSwKICAgICAgICAgICAgICAgICAgICB2YWx1ZXNGbiA9ICRwYXJzZShtYXRjaFs3XSk7CgogICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKG9wdGlvbnNNb2RlbCwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50cmlnZ2VyKCIkY2hpbGRyZW5DaGFuZ2VkIik7CiAgICAgICAgICAgICAgICB9LCB0cnVlKTsKCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBvcHRpb25zTW9kZWwoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbkdyb3VwcyA9IFtdLCAvLyBUZW1wb3JhcnkgbG9jYXRpb24gZm9yIHRoZSBvcHRpb24gZ3JvdXBzIGJlZm9yZSB3ZSByZW5kZXIgdGhlbQogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25Hcm91cE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlc0ZuKHNjb3BlKSB8fCBbXSwKICAgICAgICAgICAgICAgICAgICAgICAga2V5cyA9IGtleU5hbWUgPyBzb3J0ZWRLZXlzKHZhbHVlcykgOiB2YWx1ZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FscyA9IHt9OwoKICAgICAgICAgICAgICAgICAgICAvLyBXZSBub3cgYnVpbGQgdXAgdGhlIGxpc3Qgb2Ygb3B0aW9ucyB3ZSBuZWVkICh3ZSBtZXJnZSBsYXRlcikKICAgICAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc1tpbmRleF07CiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWVzW2tleU5hbWUgPyBsb2NhbHNba2V5TmFtZV09a2V5c1tpbmRleF06aW5kZXhdOwogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25Hcm91cE5hbWUgPSBncm91cEJ5Rm4oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkdyb3Vwcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBrZXlOYW1lID8ga2V5c1tpbmRleF0gOiBpbmRleCwgICAvLyBlaXRoZXIgdGhlIGluZGV4IGludG8gYXJyYXkgb3Iga2V5IGZyb20gb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogZGlzcGxheUZuKHNjb3BlLCBsb2NhbHMpLCAvLyB3aGF0IHdpbGwgYmUgc2VlbiBieSB0aGUgdXNlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uR3JvdXA6IG9wdGlvbkdyb3VwTmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbkdyb3VwczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9XSk7CgoKfSkoJCwgYW5ndWxhcik7CihmdW5jdGlvbiAoYW5ndWxhcikgewogICAgdmFyIG5nID0gYW5ndWxhci5tb2R1bGUoIm5nIik7CiAgICBuZy5kaXJlY3RpdmUoJ29wdGlvbicsIFsnJGludGVycG9sYXRlJywgZnVuY3Rpb24gKCRpbnRlcnBvbGF0ZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlc3RyaWN0OidFJywKICAgICAgICAgICAgY29tcGlsZTpmdW5jdGlvbiAodEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICAgICAgdmFyIHRleHRJbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKHRFbGVtZW50LnRleHQoKSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWVJbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKHRFbGVtZW50LmF0dHIoJ3ZhbHVlJyksIHRydWUpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgewogICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaCh0ZXh0SW50ZXJwb2xhdGVGbiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpRWxlbWVudC50cmlnZ2VyKCIkY2hpbGRyZW5DaGFuZ2VkIik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKHZhbHVlSW50ZXJwb2xhdGVGbiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpRWxlbWVudC50cmlnZ2VyKCIkY2hpbGRyZW5DaGFuZ2VkIik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfV0pOwp9KShhbmd1bGFyKTsKKGZ1bmN0aW9uIChhbmd1bGFyKSB7CiAgICB2YXIgbmcgPSBhbmd1bGFyLm1vZHVsZSgibmciKTsKICAgIG5nLmRpcmVjdGl2ZSgnbGknLCBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICByZXN0cmljdDonRScsCiAgICAgICAgICAgIGNvbXBpbGU6ZnVuY3Rpb24gKHRFbGVtZW50LCB0QXR0cnMpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHsKICAgICAgICAgICAgICAgICAgICBpRWxlbWVudC5iaW5kKCIkY2hpbGRyZW5DaGFuZ2VkIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpRWxlbWVudC5yZW1vdmVDbGFzcygidWktbGkiKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbkVsZW1lbnRzID0gaUVsZW1lbnQuZGF0YSgiYnV0dG9uRWxlbWVudHMiKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkVsZW1lbnRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGJ1dHRvbkVsZW1lbnRzLnRleHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGV4dC5maXJzdENoaWxkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaUVsZW1lbnRbMF0uYXBwZW5kQ2hpbGQodGV4dC5maXJzdENoaWxkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoYnV0dG9uRWxlbWVudHMuaW5uZXIpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlFbGVtZW50LnJlbW92ZURhdGEoImJ1dHRvbkVsZW1lbnRzIik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfSk7Cn0pKGFuZ3VsYXIpOwooZnVuY3Rpb24gKGFuZ3VsYXIpIHsKICAgIC8vIFBhdGNoIGZvciBuZy1zd2l0Y2ggdG8gZmlyZSBhbiBldmVudCB3aGVuZXZlciB0aGUgY2hpbGRyZW4gY2hhbmdlLgoKICAgIHZhciBuZyA9IGFuZ3VsYXIubW9kdWxlKCJuZyIpOwogICAgbmcuZGlyZWN0aXZlKCJuZ1N3aXRjaCIsCiAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcmVzdHJpY3Q6J0VBJywKICAgICAgICAgICAgICAgIGNvbXBpbGU6ZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgd2F0Y2hFeHByID0gYXR0ci5uZ1N3aXRjaCB8fCBhdHRyLm9uOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwciwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRyaWdnZXIoIiRjaGlsZHJlbkNoYW5nZWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7Cn0pKGFuZ3VsYXIpOwooZnVuY3Rpb24gKGFuZ3VsYXIpIHsKICAgIC8vIFBhdGNoIGZvciBuZy1pbmNsdWRlIHRvIGZpcmUgYW4gZXZlbnQgd2hlbmV2ZXIgdGhlIGNoaWxkcmVuIGNoYW5nZS4KCiAgICB2YXIgbmcgPSBhbmd1bGFyLm1vZHVsZSgibmciKTsKICAgIG5nLmRpcmVjdGl2ZSgibmdJbmNsdWRlIiwKICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICByZXN0cmljdDonRUNBJywKICAgICAgICAgICAgICAgIGNvbXBpbGU6ZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc3JjRXhwID0gYXR0ci5uZ0luY2x1ZGUgfHwgYXR0ci5zcmM7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goc3JjRXhwLCBmdW5jdGlvbiAoc3JjKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRyaWdnZXIoIiRjaGlsZHJlbkNoYW5nZWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRvbigiJGluY2x1ZGVDb250ZW50TG9hZGVkIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRyaWdnZXIoIiRjaGlsZHJlbkNoYW5nZWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7Cn0pKGFuZ3VsYXIpOwooZnVuY3Rpb24gKCQsIGFuZ3VsYXIpIHsKICAgIHZhciBtb2QgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKCiAgICBmdW5jdGlvbiBpbnB1dERpcmVjdGl2ZVBhdGNoKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlc3RyaWN0OidFJywKICAgICAgICAgICAgcmVxdWlyZTonP25nTW9kZWwnLAogICAgICAgICAgICBjb21waWxlOmZ1bmN0aW9uICh0RWxlbWVudCwgdEF0dHJzKSB7CiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHRFbGVtZW50LmF0dHIoJ3R5cGUnKTsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcHJlOmZ1bmN0aW9uIChzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY3RybCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWN0cmwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuVG9FdmVudHMgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdkYXRlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW5ndWxhciBiaW5kcyB0byB0aGUgaW5wdXQgb3Iga2V5ZG93bitjaGFuZ2UgZXZlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCBkYXRlIGlucHV0cyBvbiBJT1M1IGRvIG5vdCBmaXJlIGFueSBvZiB0aG9zZSAob25seSB0aGUgYmx1ciBldmVudCkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWUgaW9zNSBidWcgVE9ETwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuVG9FdmVudHMucHVzaCgiYmx1ciIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsd2F5cyBiaW5kIHRvIHRoZSBjaGFuZ2UgZXZlbnQsIGlmIGFuZ3VsYXIgd291bGQgb25seSBsaXN0ZW4gdG8gdGhlICJpbnB1dCIgZXZlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5lZWRlZCBhcyBqcW0gb2Z0ZW4gZmlyZXMgY2hhbmdlIGV2ZW50cyB3aGVuIHRoZSBpbnB1dCB3aWRnZXRzIGNoYW5nZS4uLgogICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5Ub0V2ZW50cy5wdXNoKCJjaGFuZ2UiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYmluZCA9IGlFbGVtZW50LmJpbmQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGlFbGVtZW50LmJpbmQgPSBmdW5jdGlvbiAoZXZlbnRzLCBjYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5pbmRleE9mKCdpbnB1dCcpICE9IC0xIHx8IGV2ZW50cy5pbmRleE9mKCdjaGFuZ2UnKSAhPSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxsaXN0ZW5Ub0V2ZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBsaXN0ZW5Ub0V2ZW50c1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5pbmRleE9mKGV2ZW50KT09PS0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMrPSIgIitldmVudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYmluZC5jYWxsKHRoaXMsIGV2ZW50cywgY2FsbGJhY2spOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgbW9kLmRpcmVjdGl2ZSgiaW5wdXQiLCBpbnB1dERpcmVjdGl2ZVBhdGNoKTsKICAgIG1vZC5kaXJlY3RpdmUoInRleHRhcmVhIiwgaW5wdXREaXJlY3RpdmVQYXRjaCk7Cn0pKCQsIGFuZ3VsYXIpOwoKCihmdW5jdGlvbiAoYW5ndWxhcikgewogICAgLyoKICAgICAqIERlZmluZXMgdGhlIG5nOmlmIHRhZy4gVGhpcyBpcyB1c2VmdWwgaWYganF1ZXJ5IG1vYmlsZSBkb2VzIG5vdCBhbGxvdwogICAgICogYW4gbmctc3dpdGNoIGVsZW1lbnQgaW4gdGhlIGRvbSwgZS5nLiBiZXR3ZWVuIHVsIGFuZCBsaS4KICAgICAqLwogICAgdmFyIG5nSWZEaXJlY3RpdmUgPSB7CiAgICAgICAgdHJhbnNjbHVkZTonZWxlbWVudCcsCiAgICAgICAgcHJpb3JpdHk6MTAwMCwKICAgICAgICB0ZXJtaW5hbDp0cnVlLAogICAgICAgIGNvbXBpbGU6ZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHIsIGxpbmtlcikgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBpdGVyU3RhcnRFbGVtZW50LCBhdHRyKSB7CiAgICAgICAgICAgICAgICBpdGVyU3RhcnRFbGVtZW50WzBdLmRvTm90TW92ZSA9IHRydWU7CiAgICAgICAgICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IGF0dHIubmdtSWY7CiAgICAgICAgICAgICAgICB2YXIgbGFzdEVsZW1lbnQ7CiAgICAgICAgICAgICAgICB2YXIgbGFzdFNjb3BlOwogICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGV4cHJlc3Npb24sIGZ1bmN0aW9uIChuZXdWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChsYXN0RWxlbWVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTY29wZS4kZGVzdHJveSgpOwogICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2NvcGUgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNjb3BlID0gc2NvcGUuJG5ldygpOwogICAgICAgICAgICAgICAgICAgICAgICBsaW5rZXIobGFzdFNjb3BlLCBmdW5jdGlvbiAoY2xvbmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50ID0gY2xvbmU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyU3RhcnRFbGVtZW50LmFmdGVyKGNsb25lKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IG5lZWQgdG8gYmUgcGFyZW50KCkgYXMganF1ZXJ5IGNhbm5vdCB0cmlnZ2VyIGV2ZW50cyBvbiBjb21tZW50cwogICAgICAgICAgICAgICAgICAgIC8vIChhbmd1bGFyIGNyZWF0ZXMgYSBjb21tZW50IG5vZGUgd2hlbiB1c2luZyB0cmFuc2NsdXNpb24sIGFzIG5nLXJlcGVhdCBkb2VzKS4KICAgICAgICAgICAgICAgICAgICBpdGVyU3RhcnRFbGVtZW50LnBhcmVudCgpLnRyaWdnZXIoIiRjaGlsZHJlbkNoYW5nZWQiKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwogICAgICAgIH0KICAgIH07CiAgICB2YXIgbmcgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKICAgIG5nLmRpcmVjdGl2ZSgnbmdtSWYnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIG5nSWZEaXJlY3RpdmU7CiAgICB9KTsKfSkoYW5ndWxhcik7CgooZnVuY3Rpb24gKGFuZ3VsYXIpIHsKICAgIHZhciBtb2QgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKCiAgICBmdW5jdGlvbiByZWdpc3RlckV2ZW50SGFuZGxlcihzY29wZSwgJHBhcnNlLCBlbGVtZW50LCBldmVudFR5cGUsIGhhbmRsZXIpIHsKICAgICAgICB2YXIgZm4gPSAkcGFyc2UoaGFuZGxlcik7CiAgICAgICAgZWxlbWVudC5iaW5kKGV2ZW50VHlwZSwgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGZuKHNjb3BlLCB7JGV2ZW50OmV2ZW50fSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZiAoZXZlbnRUeXBlLmNoYXJBdCgwKSA9PSAndicpIHsKICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgcmVxdWlyZWQgdG8gcHJldmVudCBhIHNlY29uZAogICAgICAgICAgICAgICAgLy8gY2xpY2sgZXZlbnQsIHNlZQogICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbW9iaWxlL2lzc3Vlcy8xNzg3CiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlRXZlbnREaXJlY3RpdmUoZGlyZWN0aXZlLCBldmVudFR5cGUpIHsKICAgICAgICBtb2QuZGlyZWN0aXZlKGRpcmVjdGl2ZSwgWyckcGFyc2UnLCBmdW5jdGlvbiAoJHBhcnNlKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7CiAgICAgICAgICAgICAgICB2YXIgZXZlbnRIYW5kbGVyID0gYXR0cnNbZGlyZWN0aXZlXTsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyRXZlbnRIYW5kbGVyKHNjb3BlLCAkcGFyc2UsIGVsZW1lbnQsIGV2ZW50VHlwZSwgZXZlbnRIYW5kbGVyKTsKICAgICAgICAgICAgfTsKICAgICAgICB9XSk7CiAgICB9CgogICAgLy8gU2VlIGh0dHA6Ly9qcXVlcnltb2JpbGUuY29tL2RlbW9zLzEuMi4wL2RvY3MvYXBpL2V2ZW50cy5odG1sCiAgICB2YXIganFtRXZlbnRzID0gWyd0YXAnLCAndGFwaG9sZCcsICdzd2lwZScsICdzd2lwZXJpZ2h0JywgJ3N3aXBlbGVmdCcsICd2bW91c2VvdmVyJywKICAgICAgICAndm1vdXNlb3V0JywKICAgICAgICAndm1vdXNlZG93bicsCiAgICAgICAgJ3Ztb3VzZW1vdmUnLAogICAgICAgICd2bW91c2V1cCcsCiAgICAgICAgJ3ZjbGljaycsCiAgICAgICAgJ3Ztb3VzZWNhbmNlbCcsCiAgICAgICAgJ29yaWVudGF0aW9uY2hhbmdlJywKICAgICAgICAnc2Nyb2xsc3RhcnQnLAogICAgICAgICdzY3JvbGxlbmQnLAogICAgICAgICdwYWdlYmVmb3Jlc2hvdycsCiAgICAgICAgJ3BhZ2ViZWZvcmVoaWRlJywKICAgICAgICAncGFnZXNob3cnLAogICAgICAgICdwYWdlaGlkZScKICAgIF07CiAgICB2YXIgZXZlbnQsIGRpcmVjdGl2ZSwgaTsKICAgIGZvciAoaT0wOyBpPGpxbUV2ZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgIGV2ZW50ID0ganFtRXZlbnRzW2ldOwogICAgICAgIGRpcmVjdGl2ZSA9ICduZ20nICsgZXZlbnQuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBldmVudC5zdWJzdHJpbmcoMSk7CiAgICAgICAgY3JlYXRlRXZlbnREaXJlY3RpdmUoZGlyZWN0aXZlLCBldmVudCk7CiAgICB9Cgp9KShhbmd1bGFyKTsKKGZ1bmN0aW9uKGFuZ3VsYXIpIHsKICAgIHZhciBzdG9yYWdlTmFtZSA9ICckJHNoYXJlZENvbnRyb2xsZXJzJzsKCiAgICBmdW5jdGlvbiBzdG9yYWdlKHJvb3RTY29wZSkgewogICAgICAgIHJldHVybiByb290U2NvcGVbc3RvcmFnZU5hbWVdID0gcm9vdFNjb3BlW3N0b3JhZ2VOYW1lXSB8fCB7fTsKICAgIH0KCiAgICBmdW5jdGlvbiBzaGFyZWRDdHJsKHJvb3RTY29wZSwgY29udHJvbGxlck5hbWUsICRjb250cm9sbGVyLCB1c2VkSW5QYWdlKSB7CiAgICAgICAgdmFyIHN0b3JlID0gc3RvcmFnZShyb290U2NvcGUpOwogICAgICAgIHZhciBzY29wZUluc3RhbmNlID0gc3RvcmVbY29udHJvbGxlck5hbWVdOwogICAgICAgIGlmICghc2NvcGVJbnN0YW5jZSkgewogICAgICAgICAgICBzY29wZUluc3RhbmNlID0gcm9vdFNjb3BlLiRuZXcoKTsKICAgICAgICAgICAgJGNvbnRyb2xsZXIoY29udHJvbGxlck5hbWUsIHskc2NvcGU6IHNjb3BlSW5zdGFuY2V9KTsKICAgICAgICAgICAgc3RvcmVbY29udHJvbGxlck5hbWVdID0gc2NvcGVJbnN0YW5jZTsKICAgICAgICAgICAgc2NvcGVJbnN0YW5jZS4kJHJlZmVyZW5jZUNvdW50ID0gMDsKICAgICAgICB9CiAgICAgICAgc2NvcGVJbnN0YW5jZS4kJHJlZmVyZW5jZUNvdW50Kys7CiAgICAgICAgdXNlZEluUGFnZS5iaW5kKCIkZGVzdHJveSIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzY29wZUluc3RhbmNlLiQkcmVmZXJlbmNlQ291bnQtLTsKICAgICAgICAgICAgaWYgKHNjb3BlSW5zdGFuY2UuJCRyZWZlcmVuY2VDb3VudD09PTApIHsKICAgICAgICAgICAgICAgIHNjb3BlSW5zdGFuY2UuJGRlc3Ryb3koKTsKICAgICAgICAgICAgICAgIGRlbGV0ZSBzdG9yZVtjb250cm9sbGVyTmFtZV07CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gc2NvcGVJbnN0YW5jZTsKICAgIH0KCiAgICBmdW5jdGlvbiBwYXJzZVNoYXJlZENvbnRyb2xsZXJzRXhwcmVzc2lvbihleHByZXNzaW9uKSB7CiAgICAgICAgdmFyIHBhdHRlcm4gPSAvKFteXHMsOl0rKVxzKjpccyooW15ccyw6XSspL2c7CiAgICAgICAgdmFyIG1hdGNoOwogICAgICAgIHZhciBoYXNEYXRhID0gZmFsc2U7CiAgICAgICAgdmFyIGNvbnRyb2xsZXJzID0ge307CiAgICAgICAgd2hpbGUgKG1hdGNoID0gcGF0dGVybi5leGVjKGV4cHJlc3Npb24pKSB7CiAgICAgICAgICAgIGhhc0RhdGEgPSB0cnVlOwogICAgICAgICAgICBjb250cm9sbGVyc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTsKICAgICAgICB9CiAgICAgICAgaWYgKCFoYXNEYXRhKSB7CiAgICAgICAgICAgIHRocm93ICJFeHByZXNzaW9uICIgKyBleHByZXNzaW9uICsgIiBuZWVkcyB0byBoYXZlIHRoZSBzeW50YXggPG5hbWU+Ojxjb250cm9sbGVyPiwuLi4iOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY29udHJvbGxlcnM7CiAgICB9CgogICAgdmFyIG1vZCA9IGFuZ3VsYXIubW9kdWxlKCduZycpOwogICAgbW9kLmRpcmVjdGl2ZSgnbmdtU2hhcmVkQ29udHJvbGxlcicsIFsnJGNvbnRyb2xsZXInLCBmdW5jdGlvbigkY29udHJvbGxlcikgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHNjb3BlOiB0cnVlLAogICAgICAgICAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykgewogICAgICAgICAgICAgICAgdmFyIGV4cHJlc3Npb24gPSBhdHRycy5uZ21TaGFyZWRDb250cm9sbGVyOwogICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXJzID0gcGFyc2VTaGFyZWRDb250cm9sbGVyc0V4cHJlc3Npb24oZXhwcmVzc2lvbik7CiAgICAgICAgICAgICAgICB2YXIgcHJlTGluayA9IGZ1bmN0aW9uKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBjb250cm9sbGVycykgewogICAgICAgICAgICAgICAgICAgICAgICBzY29wZVtuYW1lXSA9IHNoYXJlZEN0cmwoc2NvcGUuJHJvb3QsIGNvbnRyb2xsZXJzW25hbWVdLCAkY29udHJvbGxlciwgZWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcHJlOiBwcmVMaW5rCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfV0pOwp9KShhbmd1bGFyKTsKKGZ1bmN0aW9uICgkLCBhbmd1bGFyKSB7CgogICAgZnVuY3Rpb24gd2FpdERpYWxvZ0ZhY3Rvcnkocm9vdFNjb3BlKSB7CgogICAgICAgIHZhciBzaG93Q2FsbHMgPSBbXTsKCiAgICAgICAgZnVuY3Rpb24gb25DbGljayhldmVudCkgewogICAgICAgICAgICB2YXIgbGFzdENhbGwgPSBzaG93Q2FsbHNbc2hvd0NhbGxzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICBpZiAobGFzdENhbGwuY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGxhc3RDYWxsLmNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIHRvIHByZXZlbnQgYSBzZWNvbmQKICAgICAgICAgICAgLy8gY2xpY2sgZXZlbnQsIHNlZQogICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS1tb2JpbGUvaXNzdWVzLzE3ODcKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9CgogICAgICAgIHZhciBsb2FkRGlhbG9nOwoKICAgICAgICAkKGRvY3VtZW50KS5kZWxlZ2F0ZSgiLnVpLWxvYWRlciIsICJ2Y2xpY2siLCBvbkNsaWNrKTsKCiAgICAgICAgaWYgKCEkLm1vYmlsZS5sb2FkZXIucHJvdG90eXBlLm9wdGlvbnMudGV4dFdpdGhDYW5jZWwpIHsKICAgICAgICAgICAgJC5tb2JpbGUubG9hZGVyLnByb3RvdHlwZS5vcHRpb25zLnRleHRXaXRoQ2FuY2VsID0gJ0xvYWRpbmcuIENsaWNrIHRvIGNhbmNlbC4nOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdXBkYXRlVWkoKSB7CiAgICAgICAgICAgIGlmICghJC5tb2JpbGUuZmlyc3RQYWdlKSB7CiAgICAgICAgICAgICAgICByb290U2NvcGUuJG9uKCJqcW1Jbml0IiwgdXBkYXRlVWkpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzaG93Q2FsbHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgdmFyIGxhc3RDYWxsID0gc2hvd0NhbGxzW3Nob3dDYWxscy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgIHZhciBtc2cgPSBsYXN0Q2FsbC5tc2c7CiAgICAgICAgICAgICAgICBpZiAobXNnKSB7CiAgICAgICAgICAgICAgICAgICAgJC5tb2JpbGUubG9hZGluZygnc2hvdycsIHt0ZXh0Om1zZywgdGV4dFZpc2libGU6ISFtc2d9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJC5tb2JpbGUubG9hZGluZygnc2hvdycpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJC5tb2JpbGUubG9hZGluZygnaGlkZScpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBqcXVlcnkgbW9iaWxlIGhpZGVzIHRoZSB3YWl0IGRpYWxvZyB3aGVuIHBhZ2VzIGFyZSB0cmFuc2l0aW9uZWQuCiAgICAgICAgICogVGhpcyBpbW1lZGlhdGVseSBjbG9zZXMgd2FpdCBkaWFsb2dzIHRoYXQgYXJlIG9wZW5lZCBpbiB0aGUgcGFnZWJlZm9yZXNob3cgZXZlbnQuCiAgICAgICAgICovCiAgICAgICAgJCgnZGl2JykubGl2ZSgncGFnZXNob3cnLCBmdW5jdGlvbiAoZXZlbnQsIHVpKSB7CiAgICAgICAgICAgIHVwZGF0ZVVpKCk7CiAgICAgICAgfSk7CgogICAgICAgIC8qKgogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIG1zZyAob3B0aW9uYWwpCiAgICAgICAgICogQHBhcmFtIHRhcENhbGxiYWNrIChvcHRpb25hbCkKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBzaG93KCkgewogICAgICAgICAgICB2YXIgbXNnLCB0YXBDYWxsYmFjazsKICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIG1zZyA9IGFyZ3VtZW50c1swXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICB0YXBDYWxsYmFjayA9IGFyZ3VtZW50c1swXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1sxXSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICB0YXBDYWxsYmFjayA9IGFyZ3VtZW50c1sxXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2hvd0NhbGxzLnB1c2goe21zZzptc2csIGNhbGxiYWNrOnRhcENhbGxiYWNrfSk7CiAgICAgICAgICAgIHVwZGF0ZVVpKCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBoaWRlKCkgewogICAgICAgICAgICBzaG93Q2FsbHMucG9wKCk7CiAgICAgICAgICAgIHVwZGF0ZVVpKCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhbHdheXMocHJvbWlzZSwgY2FsbGJhY2spIHsKICAgICAgICAgICAgcHJvbWlzZS50aGVuKGNhbGxiYWNrLCBjYWxsYmFjayk7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKgogICAgICAgICAqIEBwYXJhbSBwcm9taXNlCiAgICAgICAgICogQHBhcmFtIG1zZyAob3B0aW9uYWwpCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gd2FpdEZvcihwcm9taXNlLCBtc2cpIHsKICAgICAgICAgICAgc2hvdyhtc2cpOwogICAgICAgICAgICBhbHdheXMocHJvbWlzZSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaGlkZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIGRlZmVycmVkCiAgICAgICAgICogQHBhcmFtIGNhbmNlbERhdGEKICAgICAgICAgKiBAcGFyYW0gbXNnIChvcHRpb25hbCkKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiB3YWl0Rm9yV2l0aENhbmNlbChkZWZlcnJlZCwgY2FuY2VsRGF0YSwgbXNnKSB7CiAgICAgICAgICAgIGlmICghbXNnKSB7CiAgICAgICAgICAgICAgICBtc2cgPSAkLm1vYmlsZS5sb2FkZXIucHJvdG90eXBlLm9wdGlvbnMudGV4dFdpdGhDYW5jZWw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2hvdyhtc2csIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChjYW5jZWxEYXRhKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGFsd2F5cyhkZWZlcnJlZC5wcm9taXNlLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBoaWRlKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgc2hvdzpzaG93LAogICAgICAgICAgICBoaWRlOmhpZGUsCiAgICAgICAgICAgIHdhaXRGb3I6d2FpdEZvciwKICAgICAgICAgICAgd2FpdEZvcldpdGhDYW5jZWw6d2FpdEZvcldpdGhDYW5jZWwKICAgICAgICB9OwogICAgfQoKICAgIHZhciBtb2QgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKICAgIG1vZC5mYWN0b3J5KCckd2FpdERpYWxvZycsIFsnJHJvb3RTY29wZScsIHdhaXREaWFsb2dGYWN0b3J5XSk7Cn0pKCQsIGFuZ3VsYXIpOwooZnVuY3Rpb24gKCQsIGFuZ3VsYXIpIHsKCiAgICBmdW5jdGlvbiBwYWdlZExpc3RGaWx0ZXJGYWN0b3J5KGRlZmF1bHRMaXN0UGFnZVNpemUpIHsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChsaXN0LCBzdGF0ZVByb3BlcnR5LCBvcGVyYXRvcikgewogICAgICAgICAgICBpZiAoIWxpc3QpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsaXN0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghc3RhdGVQcm9wZXJ0eSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJNaXNzaW5nIHBhZ2VyIHByb3BlcnR5Iik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHNjb3BlID0gdGhpczsKICAgICAgICAgICAgdmFyIHN0YXRlID0gc2NvcGVbc3RhdGVQcm9wZXJ0eV07CiAgICAgICAgICAgIGlmICghc3RhdGUpIHsKICAgICAgICAgICAgICAgIHN0YXRlID0gc2NvcGVbc3RhdGVQcm9wZXJ0eV0gPSB7CiAgICAgICAgICAgICAgICAgICAgbG9hZE1vcmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRNb3JlQ2FsbGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBwYWdlU2l6ZSA9IG9wZXJhdG9yID8gKCtvcGVyYXRvcikgOiBkZWZhdWx0TGlzdFBhZ2VTaXplOwogICAgICAgICAgICB2YXIgZW5kSW5kZXggPSBzdGF0ZS5lbmRJbmRleCB8fCBwYWdlU2l6ZTsKICAgICAgICAgICAgaWYgKHN0YXRlLmxvYWRNb3JlQ2FsbGVkKSB7CiAgICAgICAgICAgICAgICBzdGF0ZS5sb2FkTW9yZUNhbGxlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgZW5kSW5kZXggKz0gcGFnZVNpemU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGVuZEluZGV4ID49IGxpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBlbmRJbmRleCA9IGxpc3QubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChlbmRJbmRleCA8IHBhZ2VTaXplKSB7CiAgICAgICAgICAgICAgICBlbmRJbmRleCA9IHBhZ2VTaXplOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHN0YXRlLmhhc01vcmUgPSBlbmRJbmRleCA8IGxpc3QubGVuZ3RoOwogICAgICAgICAgICBzdGF0ZS5lbmRJbmRleCA9IGVuZEluZGV4OwogICAgICAgICAgICBzdGF0ZS5jYWNoZSA9IGxpc3Quc2xpY2UoMCwgZW5kSW5kZXgpOwogICAgICAgICAgICByZXR1cm4gc3RhdGUuY2FjaGU7CiAgICAgICAgfQogICAgfQoKICAgIHBhZ2VkTGlzdEZpbHRlckZhY3RvcnkuJGluamVjdCA9IFsnZGVmYXVsdExpc3RQYWdlU2l6ZSddOwogICAgdmFyIG1vZCA9IGFuZ3VsYXIubW9kdWxlKFsnbmcnXSk7CiAgICBtb2QuY29uc3RhbnQoJ2RlZmF1bHRMaXN0UGFnZVNpemUnLCAxMCk7CiAgICBtb2QuZmlsdGVyKCdwYWdlZCcsIHBhZ2VkTGlzdEZpbHRlckZhY3RvcnkpOwp9KSgkLCBhbmd1bGFyKTsKfSk7",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 06:46:01 GMT",
                    "Content-Length": "1208069",
                    "Date": "Fri, 07 Nov 2014 06:46:01 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}