{
    "url": "http://localhost:9999/xingyan/octopus/output/octopus.base.debug.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>window.location.href</b> and written to <b>the 'href' property of a DOM element</b> via the following statements:<ul><li>url = url || window.location.href;</li><li>url = fullUrl + parts.join(\"/\") + \"/\" + url;</li><li>url = url.toLowerCase();</li><li>a.href = url;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/xingyan/octopus/output/octopus.base.debug.js",
                "path": "/xingyan/octopus/output/octopus.base.debug.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC94aW5neWFuL29jdG9wdXMvb3V0cHV0L29jdG9wdXMuYmFzZS5kZWJ1Zy5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyoqCiAqIEBmaWxlCiAqIHdlYmFwcOmAmueUqOe7hOS7tuWfuuehgOW6k+aWh+S7tu+8jOS4u+imgeeUqOS6jumAmueUqOe7hOS7tueahOexu+e7k+aehOWjsOaYjgogKiBAYXV0aG9yIG91cGVuZy1mZQogKiBAdmVyc2lvbiAxLjEKICovCjsoZnVuY3Rpb24od2luZG93LCB1bmRlZmluZWQpIHsKCiAgICAidXNlIHN0cmljdCI7CgogICAgLyoqCiAgICAgKiDlkb3lkI3nqbrpl7TliY3nvIAg8J+QmQogICAgICogQG5hbWVzcGFjZSBvY3RvcHVzCiAgICAgKiBAZGVzYyDlkb3lkI3nqbrpl7Tor7TmmI4g5omA5pyJ5bCP5YaZ5a2X5q+N5byA5aS055qE5pa55rOV6YO95Y+v5Lul55u05o6l6LCD55SoIOWmgm9jdG9wdXMuZWFzaW5nLmxpbmVhci5lYXNlSW4KICAgICAqIOebuOWPje+8jOWkp+WGmeWtl+avjeW8gOWktOeahOWRveWQjeivtOaYjuivpeWvueixoeaYr+S4gOS4quexu+WvueixoSDpnIDopoHnlKjlhbPplK7lrZduZXcg5aaCIG5ldyBvY3RvcHVzLldpZGdldCgpCiAgICAgKiBAdHlwZSB7b2JqZWN0fQogICAgICovCiAgICB2YXIgb2N0b3B1cywKICAgICAgICBvID0gb2N0b3B1cyA9IHt2ZXJzaW9uOiAiMS4xIn07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMuZGVmaW5lCiAgICAgKiBAZGVzYyDnsbvnlJ/miJAu5bCG6L+U5Zue5LiA5Liq5b2i5aaC4oCU4oCUCiAgICAgKiBmdW5jdGlvbiBDKCkgewogICAgICogICAgICB0aGlzLmluaXRpYWxpemUoKQogICAgICogfTsKICAgICAqIEMucHJvdG90eXBlID0geyBjb25zdHJ1Y3RvcjogQywgLi4uIH3nmoTlr7nosaEKICAgICAqIOaUr+aMgeS4pOS4quWPguaVsO+8jOesrOS4gOS4quS4uueItuexu++8iOWPr+S4jeWtmOWcqO+8ie+8jOesrOS6jOS4quS4uueUn+aIkOexu+eahOWQhOWxnuaAp+aWueazleWvueixoSDnlLHkuo7mr4/kuKrnsbvnmoTnlJ/miJDpg73ln7rkuo7lrZDnsbvlr7nniLbnsbvlr7nosaHnmoTmt7Hluqbmi7fotJ3vvIzlm6DmraTvvIwKICAgICAqIOS4uumBv+WFjeWtkOexu+WxnuaAp+abtOaUueWvueeItuexu+mAoOaIkOeahOS4jeWPr+aOp+W9seWTje+8jOmZpE51bWJlcnxTdHJpbmd8Qm9vbGVhbiDlpJbnmoTlr7nosaEg5Yid5aeL5YyW6YO95bu66K6u5pS+5Zyo5p6E6YCg5Ye95pWw5b2T5Lit5Y675YGaIOWIneWni+WMluWAvOW7uuiurgogICAgICog5Li6bnVsbAogICAgICogQGV4YW1wbGUKICAgICAqIHZhciBuZXdDbGFzcyA9IG9jdG9wdXMuZGVmaW5lKHsKICAgICAqICAgICB3aWR0aDogNjQsCiAgICAgKiAgICAgbGVuZ3RoOiAiMTJweCIsCiAgICAgKiAgICAgcHJvcGVydHk6IG51bGwsCiAgICAgKiAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7CiAgICAgKiAgICAgICAgIHRoaXMucHJvcGVydHkgPSBPYmplY3QuY3JlYXRlKHt9KTsKICAgICAqICAgICB9CiAgICAgKiB9KTsKICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufQogICAgICovCiAgICBvLmRlZmluZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoLAogICAgICAgICAgICBzID0gYXJndW1lbnRzWzBdLAogICAgICAgICAgICBpID0gYXJndW1lbnRzW2xlbiAtIDFdOwoKICAgICAgICB2YXIgbmMgPSB0eXBlb2YgaS5pbml0aWFsaXplID09ICJmdW5jdGlvbiIgPyBpLmluaXRpYWxpemUgOgogICAgICAgICAgICBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICAgIGlmKGxlbiA+IDEpIHsKICAgICAgICAgICAgdmFyIG5ld0FyZ3MgPSBbbmMsIHNdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLnNsaWNlKDEsIGxlbiAtIDEpLCBpKTsKICAgICAgICAgICAgby5pbmhlcml0LmFwcGx5KG51bGwsIG5ld0FyZ3MpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5jLnByb3RvdHlwZSA9IGk7CiAgICAgICAgICAgIG5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG5jOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmM7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLmluaGVyaXQKICAgICAqIEBkZXNjIOe7p+aJvwogICAgICogQHBhcmFtIGNoaWxkIHtGdW5jdGlvbn0g5a2Q57G7CiAgICAgKiBAcGFyYW0gZmF0aGVyIHtGdW5jdGlvbn0g54i257G7CiAgICAgKi8KICAgIG8uaW5oZXJpdCA9IGZ1bmN0aW9uKGNoaWxkLCBmYXRoZXIpIHsKICAgICAgICB2YXIgZiA9IGZ1bmN0aW9uKCkge30sCiAgICAgICAgICAgIGNwLAogICAgICAgICAgICBmcCA9IGZhdGhlci5wcm90b3R5cGU7CiAgICAgICAgZi5wcm90b3R5cGUgPSBmcDsKICAgICAgICBjcCA9IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBmOwogICAgICAgIGNwLmNvbnN0cnVjdG9yID0gY2hpbGQ7CiAgICAgICAgdmFyIGksIGwsIGs7CiAgICAgICAgZm9yKGkgPSAyLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICBrID0gYXJndW1lbnRzW2ldOwogICAgICAgICAgICBpZih0eXBlb2YgayA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgayA9IGsucHJvdG90eXBlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG8uZXh0ZW5kKGNoaWxkLnByb3RvdHlwZSwgayk7CiAgICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy5leHRlbmQKICAgICAqIEBkZXNjIOWwhuS4gOS4quWvueixoeeahOWxnuaAp+WkjeWItue7meWPpuS4gOS4quWvueixoQogICAgICogQHBhcmFtIGRlc3RpbmF0aW9uIHtvYmplY3R9CiAgICAgKiBAcGFyYW0gc291cmNlIHtvYmplY3R9CiAgICAgKiBAcmV0dXJuIGRlc3RpbmF0aW9uIHtvYmplY3R9IOWkjeWItuWQjueahOWvueixoQogICAgICovCiAgICBvLmV4dGVuZCA9IGZ1bmN0aW9uKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHsKICAgICAgICBkZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uIHx8IHt9OwogICAgICAgIGlmKHNvdXJjZSkgewogICAgICAgICAgICBmb3IodmFyIHByb3BlcnR5IGluIHNvdXJjZSkgewogICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW3Byb3BlcnR5XTsKICAgICAgICAgICAgICAgIGlmKHZhbHVlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltwcm9wZXJ0eV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgc291cmNlSXNFdnQgPSB0eXBlb2Ygd2luZG93LkV2ZW50ID09ICJmdW5jdGlvbiIKICAgICAgICAgICAgICAgICYmIHNvdXJjZSBpbnN0YW5jZW9mIHdpbmRvdy5FdmVudDsKCiAgICAgICAgICAgIGlmICghc291cmNlSXNFdnQgJiYgc291cmNlLmhhc093blByb3BlcnR5ICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eSgidG9TdHJpbmciKSkgewogICAgICAgICAgICAgICAgZGVzdGluYXRpb24udG9TdHJpbmcgPSBzb3VyY2UudG9TdHJpbmc7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uOwogICAgfTsKCiAgICAvKioKICAgICAqIEBuYW1lc3BhY2Ugb2N0b3B1cy51dGlsCiAgICAgKiBAZGVzYyDlt6Xlhbfpm4blkIgg55u45b2T5LqOanF1ZXJ555qEZm4KICAgICAqIEB0eXBlIHtvYmplY3R9CiAgICAgKi8KICAgIG8udXRpbCA9IG8udXRpbCB8fCB7fTsKCiAgICAvKioKICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLnV0aWwubGFzdFNlcUlkCiAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICovCiAgICBvLnV0aWwubGFzdFNlcUlkID0gMDsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmNyZWF0ZVVuaXF1ZUlECiAgICAgKiBAcGFyYW0gcHJlZml4IHtTdHJpbmd9IOWJjee8gAogICAgICogQHJldHVybiB7U3RyaW5nfSDlhajlsYDllK/kuIDnmoTkuIDkuKrlrZfnrKbkuLIKICAgICAqLwogICAgby51dGlsLmNyZWF0ZVVuaXF1ZUlEID0gZnVuY3Rpb24ocHJlZml4KSB7CiAgICAgICAgcHJlZml4ID0gKHByZWZpeCA9PT0gbnVsbCB8fCBwcmVmaXggPT09IHVuZGVmaW5lZCkgPyAib2N0b3B1cyIgOiBwcmVmaXgucmVwbGFjZSgvXC4vZywgIl8iKTsKICAgICAgICBvLnV0aWwubGFzdFNlcUlkKys7CiAgICAgICAgcmV0dXJuIHByZWZpeCArIG8udXRpbC5sYXN0U2VxSWQ7CiAgICB9OwoKICAgIHdpbmRvdy5vY3RvcHVzID0gbzsKCn0pKHdpbmRvdyk7LyoqCiAqIEBmaWxlCiAqIHdlYmFwcOmAmueUqOe7hOS7tuWfuuehgOW6k+aWh+S7tgogKiB1dGlsIC0gICDlt6Xlhbflh73mlbDpg6jliIYKICogQGF1dGhvciBvdXBlbmctZmUKICogQHZlcnNpb24gMS4xCiAqLwo7KGZ1bmN0aW9uKG8sIHVuZGVmaW5lZCkgewoKICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAvKioKICAgICAqIOmBv+WFjeacquWjsOaYjiBvY3RvcHVzLnV0aWwKICAgICAqLwogICAgdmFyIHV0aWwgPSBvLnV0aWwgPSBvLnV0aWwgfHwge307CgogICAgLyoqCiAgICAgKiBAY29uc3Qgb2N0b3B1cy51dGlsLkxFRlQge1N0cmluZ30gImxlZnQiCiAgICAgKiBAY29uc3Qgb2N0b3B1cy51dGlsLlJJR0hUIHtTdHJpbmd9ICJyaWdodCIKICAgICAqIEBjb25zdCBvY3RvcHVzLnV0aWwuVVAge1N0cmluZ30gInVwIgogICAgICogQGNvbnN0IG9jdG9wdXMudXRpbC5ET1dOIHtTdHJpbmd9ICJkb3duIgogICAgICovCiAgICB1dGlsLkxFRlQgPSAibGVmdCI7CiAgICB1dGlsLlJJR0hUID0gInJpZ2h0IjsKICAgIHV0aWwuVVAgPSAidXAiOwogICAgdXRpbC5ET1dOID0gImRvd24iOwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuZ2V0Q2VudGVyCiAgICAgKiBAcGFyYW0gdG91Y2hlcyB7QXJyYXl9CiAgICAgKiBAcmV0dXJuIHtvYmplY3R9CiAgICAgKiBAZGVzYyDojrflvpfmiYDmnInop6bmkbjngrnnmoTkuK3lv4MKICAgICAqLwogICAgdXRpbC5nZXRDZW50ZXIgPSBmdW5jdGlvbih0b3VjaGVzKSB7CiAgICAgICAgdmFyIHZhbHVlc1ggPSBbXSwgdmFsdWVzWSA9IFtdOwoKICAgICAgICBmb3IodmFyIHQ9IDAsbGVuPXRvdWNoZXMubGVuZ3RoOyB0PGxlbjsgdCsrKSB7CiAgICAgICAgICAgIHZhbHVlc1gucHVzaCh0b3VjaGVzW3RdLnBhZ2VYKTsKICAgICAgICAgICAgdmFsdWVzWS5wdXNoKHRvdWNoZXNbdF0ucGFnZVkpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcGFnZVg6ICgoTWF0aC5taW4uYXBwbHkoTWF0aCwgdmFsdWVzWCkgKyBNYXRoLm1heC5hcHBseShNYXRoLCB2YWx1ZXNYKSkgLyAyKSwKICAgICAgICAgICAgcGFnZVk6ICgoTWF0aC5taW4uYXBwbHkoTWF0aCwgdmFsdWVzWSkgKyBNYXRoLm1heC5hcHBseShNYXRoLCB2YWx1ZXNZKSkgLyAyKQogICAgICAgIH07CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuZ2V0VmVsb2NpdHkKICAgICAqIEBkZXNjIOiOt+W+l+S4pOeCuemXtOeerOenu+mAn+W6pgogICAgICogQHBhcmFtIGRlbHRhX3RpbWUge051bWJlcn0KICAgICAqIEBwYXJhbSBkZWx0YV94IHtOdW1iZXJ9CiAgICAgKiBAcGFyYW0gZGVsdGFfeSB7TnVtYmVyfQogICAgICogQHJldHVybiB7b2JqZWN0fSB45Li65qiq5ZCR6YCf5bqmIHnkuLrnurXlkJHpgJ/luqYKICAgICAqLwogICAgdXRpbC5nZXRWZWxvY2l0eSA9IGZ1bmN0aW9uKGRlbHRhX3RpbWUsIGRlbHRhX3gsIGRlbHRhX3kpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICB4OiBNYXRoLmFicyhkZWx0YV94IC8gZGVsdGFfdGltZSkgfHwgMCwKICAgICAgICAgICAgeTogTWF0aC5hYnMoZGVsdGFfeSAvIGRlbHRhX3RpbWUpIHx8IDAKICAgICAgICB9OwoKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5nZXRBbmdsZQogICAgICogQGRlc2Mg6I635b6X5Lik54K56Ze06KeS5bqmCiAgICAgKiBAcGFyYW0gdG91Y2gxIHtPYmplY3R9CiAgICAgKiBAcGFyYW0gdG91Y2gyIHtPYmplY3R9CiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9CiAgICAgKi8KICAgIHV0aWwuZ2V0QW5nbGUgPSBmdW5jdGlvbih0b3VjaDEsIHRvdWNoMikgewogICAgICAgIHZhciB5ID0gdG91Y2gyLnBhZ2VZIC0gdG91Y2gxLnBhZ2VZLAogICAgICAgICAgICB4ID0gdG91Y2gyLnBhZ2VYIC0gdG91Y2gxLnBhZ2VYOwogICAgICAgIHJldHVybiBNYXRoLmF0YW4yKHksIHgpICogMTgwIC8gTWF0aC5QSTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5nZXREaXJlY3Rpb24KICAgICAqIEBkZXNjIOiOt+W+l+inpueisOa7keWKqOaWueWQkQogICAgICogQHBhcmFtIHRvdWNoMSB7T2JqZWN0fQogICAgICogQHBhcmFtIHRvdWNoMiB7T2JqZWN0fQogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCiAgICB1dGlsLmdldERpcmVjdGlvbiA9IGZ1bmN0aW9uKHRvdWNoMSwgdG91Y2gyKSB7CiAgICAgICAgdmFyIHggPSBNYXRoLmFicyh0b3VjaDEucGFnZVggLSB0b3VjaDIucGFnZVgpLAogICAgICAgICAgICB5ID0gTWF0aC5hYnModG91Y2gxLnBhZ2VZIC0gdG91Y2gyLnBhZ2VZKTsKCiAgICAgICAgaWYoeCA+PSB5KSB7CiAgICAgICAgICAgIHJldHVybiB0b3VjaDEucGFnZVggLSB0b3VjaDIucGFnZVggPiAwID8gdXRpbC5MRUZUIDogdXRpbC5SSUdIVDsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB0b3VjaDEucGFnZVkgLSB0b3VjaDIucGFnZVkgPiAwID8gdXRpbC5VUCA6IHV0aWwuRE9XTjsKICAgICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuZ2V0RGlzdGFuY2UKICAgICAqIEBkZXNjIOiOt+W+l+S4pOeCuemXtOi3neemuwogICAgICogQHBhcmFtIHRvdWNoMSB7T2JqZWN0fQogICAgICogQHBhcmFtIHRvdWNoMiB7T2JqZWN0fQogICAgICogQHJldHVybiB7TnVtYmVyfQogICAgICovCiAgICB1dGlsLmdldERpc3RhbmNlID0gZnVuY3Rpb24odG91Y2gxLCB0b3VjaDIpIHsKICAgICAgICB2YXIgeCA9IHRvdWNoMi5wYWdlWCAtIHRvdWNoMS5wYWdlWCwKICAgICAgICAgICAgeSA9IHRvdWNoMi5wYWdlWSAtIHRvdWNoMS5wYWdlWTsKICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KCh4ICogeCkgKyAoeSAqIHkpKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5nZXRTY2FsZQogICAgICogQGRlc2Mg6I635b6X5Lik6Kem5pG454K55ruR5Yqo5ZCO5b6X5Yiw55qE5Lik6Kem5pG454K55LmL5LqO5LmL5YmN55qE5pS+5aSn5YCN5pWwCiAgICAgKiBAcGFyYW0gc3RhcnQge0FycmF5fQogICAgICogQHBhcmFtIGVuZCB7QXJyYXl9CiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9CiAgICAgKi8KICAgIHV0aWwuZ2V0U2NhbGUgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7CiAgICAgICAgaWYoc3RhcnQubGVuZ3RoID49IDIgJiYgZW5kLmxlbmd0aCA+PSAyKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERpc3RhbmNlKGVuZFswXSwgZW5kWzFdKSAvCiAgICAgICAgICAgICAgICB0aGlzLmdldERpc3RhbmNlKHN0YXJ0WzBdLCBzdGFydFsxXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAxOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmdldFJvdGF0aW9uCiAgICAgKiBAZGVzYyDojrflvpfkuKTop6bmkbjngrnmu5HliqjlkI7lvpfliLDnmoTkuKTop6bmkbjngrnkuYvkuo7kuYvliY3nmoTml4vovazluqbmlbAKICAgICAqIEBwYXJhbSBzdGFydCB7QXJyYXl9CiAgICAgKiBAcGFyYW0gZW5kIHtBcnJheX0KICAgICAqIEByZXR1cm4ge051bWJlcn0KICAgICAqLwogICAgdXRpbC5nZXRSb3RhdGlvbiA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHsKICAgICAgICBpZihzdGFydC5sZW5ndGggPj0gMiAmJiBlbmQubGVuZ3RoID49IDIpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QW5nbGUoZW5kWzFdLCBlbmRbMF0pIC0KICAgICAgICAgICAgICAgIHRoaXMuZ2V0QW5nbGUoc3RhcnRbMV0sIHN0YXJ0WzBdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDA7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuZW5jb2RlSHRtbAogICAgICogQGRlc2Mg5a+55a2X56ym5Liy5Lit55qE54m55q6K5a2X56ym6L+b6KGMaHRtbOe8lueggQogICAgICogQHBhcmFtIHN0ciB7U3RyaW5nfQogICAgICovCiAgICB1dGlsLmVuY29kZUh0bWwgPSBmdW5jdGlvbihzdHIpIHsKICAgICAgICByZXR1cm4gU3RyaW5nKHN0cikKICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgIiZhbXA7IikKICAgICAgICAgICAgLnJlcGxhY2UoLzwvZywgIiZsdDsiKQogICAgICAgICAgICAucmVwbGFjZSgvPi9nLCAiJmd0OyIpCiAgICAgICAgICAgIC5yZXBsYWNlKC8iL2csICImcXVvdDsiKQogICAgICAgICAgICAucmVwbGFjZSgvJy9nLCAiJiMzOTsiKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5kZWNvZGVIdG1sCiAgICAgKiBAZGVzYyDlr7nlrZfnrKbkuLLkuK3nmoRodG1s6L+b6KGM57yW56CBCiAgICAgKiBAcGFyYW0gc3RyIHtTdHJpbmd9CiAgICAgKi8KICAgIHV0aWwuaHRtbERlY29kZURpY3QgPSB7InF1b3QiOiAnIicsICJsdCI6ICI8IiwgImd0IjogIj4iLCAiYW1wIjogIiYiLCAiIzM5IjogIicifTsKICAgIHV0aWwuZGVjb2RlSHRtbCA9IGZ1bmN0aW9uKHN0cikgewogICAgICAgIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKC8mKHF1b3R8bHR8Z3R8YW1wfCMzOSk7L2lnLCBmdW5jdGlvbihhbGwsIGtleSkgewogICAgICAgICAgICByZXR1cm4gdXRpbC5odG1sRGVjb2RlRGljdFtrZXldOwogICAgICAgIH0pLnJlcGxhY2UoLyYjdShbYS1mXGRdezR9KTsvaWcsIGZ1bmN0aW9uKGFsbCwgaGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludCgiMHgiICsgaGV4KSk7CiAgICAgICAgICAgIH0pLnJlcGxhY2UoLyYjKFxkKyk7L2lnLCBmdW5jdGlvbihhbGwsIG51bWJlcikgewogICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoK251bWJlcik7CiAgICAgICAgICAgIH0pOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmxvYWRJbWFnZQogICAgICogQGRlc2Mg5Yqg6L295Zu+54mH5pa55rOVCiAgICAgKiBAcGFyYW0gdXJsIHtTdHJpbmd9IOWbvueJh3VybAogICAgICogQHBhcmFtIHJlYWR5IHtGdW5jdGlvbn0g5q2k5pe25Zu+54mH5rKh5pyJ5Yqg6L295a6MIOS9huaYr+WuvemrmOW3suefpQogICAgICogQHBhcmFtIGxvYWQge0Z1bmN0aW9ufSDlm77niYdvbmxvYWTnmoRjYWxsYmFjawogICAgICogQHBhcmFtIGVycm9yIHtGdW5jdGlvbn0g5Zu+54mH5Yqg6L295aSx6LSl55qEY2FsbGJhY2sKICAgICAqLwogICAgdXRpbC5sb2FkSW1hZ2UgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGxpc3QgPSBbXSwKICAgICAgICAgICAgaW50ZXJ2YWxJZCA9IG51bGwsCiAgICAgICAgLy/nlKjmnaXmiafooYzpmJ/liJcKICAgICAgICAgICAgdGljayA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGkgPSAwOwogICAgICAgICAgICAgICAgZm9yICg7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgbGlzdFtpXS5lbmQgPyBsaXN0LnNwbGljZShpLS0sIDEpIDogbGlzdFtpXSgpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICFsaXN0Lmxlbmd0aCAmJiBzdG9wKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgLy8g5YGc5q2i5omA5pyJ5a6a5pe25Zmo6Zif5YiXCiAgICAgICAgICAgIHN0b3AgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpOwogICAgICAgICAgICAgICAgaW50ZXJ2YWxJZCA9IG51bGw7CiAgICAgICAgICAgIH07CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh1cmwsIHJlYWR5LCBsb2FkLCBlcnJvcikgewogICAgICAgICAgICB2YXIgb25yZWFkeSwgd2lkdGgsIGhlaWdodCwgbmV3V2lkdGgsIG5ld0hlaWdodCwKICAgICAgICAgICAgICAgIGltZyA9IG5ldyBJbWFnZSgpOwogICAgICAgICAgICBpbWcuc3JjID0gdXJsOwogICAgICAgICAgICAvLyDlpoLmnpzlm77niYfooqvnvJPlrZjvvIzliJnnm7TmjqXov5Tlm57nvJPlrZjmlbDmja4KICAgICAgICAgICAgaWYgKGltZy5jb21wbGV0ZSkgewogICAgICAgICAgICAgICAgcmVhZHkuY2FsbChpbWcpOwogICAgICAgICAgICAgICAgbG9hZCAmJiBsb2FkLmNhbGwoaW1nKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgd2lkdGggPSBpbWcud2lkdGg7CiAgICAgICAgICAgIGhlaWdodCA9IGltZy5oZWlnaHQ7CiAgICAgICAgICAgIC8vIOWKoOi9vemUmeivr+WQjueahOS6i+S7tgogICAgICAgICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGVycm9yICYmIGVycm9yLmNhbGwoaW1nKTsKICAgICAgICAgICAgICAgIG9ucmVhZHkuZW5kID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGltZyA9IGltZy5vbmxvYWQgPSBpbWcub25lcnJvciA9IG51bGw7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIC8vIOWbvueJh+WwuuWvuOWwsee7qgogICAgICAgICAgICBvbnJlYWR5ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgbmV3V2lkdGggPSBpbWcud2lkdGg7CiAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBpbWcuaGVpZ2h0OwogICAgICAgICAgICAgICAgaWYgKG5ld1dpZHRoICE9PSB3aWR0aCB8fCBuZXdIZWlnaHQgIT09IGhlaWdodCB8fCBuZXdXaWR0aCAqIG5ld0hlaWdodCA+IDEwMjQpIHsKICAgICAgICAgICAgICAgICAgICByZWFkeS5jYWxsKGltZyk7CiAgICAgICAgICAgICAgICAgICAgb25yZWFkeS5lbmQgPSB0cnVlOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgb25yZWFkeSgpOwogICAgICAgICAgICAvLyDlrozlhajliqDovb3lrozmr5XnmoTkuovku7YKICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIC8vIG9ubG9hZOWcqOWumuaXtuWZqOaXtumXtOW3ruiMg+WbtOWGheWPr+iDveavlG9ucmVhZHnlv6sKICAgICAgICAgICAgICAgIC8vIOi/memHjOi/m+ihjOajgOafpeW5tuS/neivgW9ucmVhZHnkvJjlhYjmiafooYwKICAgICAgICAgICAgICAgICFvbnJlYWR5LmVuZCAmJiBvbnJlYWR5KCk7CiAgICAgICAgICAgICAgICBsb2FkICYmIGxvYWQuY2FsbChpbWcpOwogICAgICAgICAgICAgICAgLy8gSUUgZ2lm5Yqo55S75Lya5b6q546v5omn6KGMb25sb2Fk77yM572u56m6b25sb2Fk5Y2z5Y+vCiAgICAgICAgICAgICAgICBpbWcgPSBpbWcub25sb2FkID0gaW1nLm9uZXJyb3IgPSBudWxsOwogICAgICAgICAgICB9OwogICAgICAgICAgICAvLyDliqDlhaXpmJ/liJfkuK3lrprmnJ/miafooYwKICAgICAgICAgICAgaWYoIW9ucmVhZHkuZW5kKSB7CiAgICAgICAgICAgICAgICBsaXN0LnB1c2gob25yZWFkeSk7CiAgICAgICAgICAgICAgICAvLyDml6DorrrkvZXml7blj6rlhYHorrjlh7rnjrDkuIDkuKrlrprml7blmajvvIzlh4/lsJHmtY/op4jlmajmgKfog73mjZ/ogJcKICAgICAgICAgICAgICAgIGlmIChpbnRlcnZhbElkID09PSBudWxsKSBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwodGljaywgNDApOwogICAgICAgICAgICB9OwogICAgICAgIH07CiAgICB9KSgpOwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuZW1wdHkKICAgICAqIEBkZXNjIOepuuWHveaVsAogICAgICovCiAgICB1dGlsLmVtcHR5ID0gZnVuY3Rpb24oKSB7fTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmJpbmQKICAgICAqIEBkZXNjIOaNouS9nOeUqOWfnwogICAgICogQHBhcmFtIGZ1bmMge0Z1bmN0aW9ufQogICAgICogQHBhcmFtIG9iamVjdCB7T2JqZWN0fQogICAgICovCiAgICB1dGlsLmJpbmQgPSBmdW5jdGlvbihmdW5jLCBvYmplY3QpIHsKICAgICAgICAvLyBjcmVhdGUgYSByZWZlcmVuY2UgdG8gYWxsIGFyZ3VtZW50cyBwYXN0IHRoZSBzZWNvbmQgb25lCiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzLCBbMl0pOwogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgLy8gUHVzaCBvbiBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgZnJvbSB0aGUgYWN0dWFsIGZ1bmN0aW9uIGNhbGwuCiAgICAgICAgICAgIC8vIFRoZXNlIHdpbGwgY29tZSBhZnRlciB0aG9zZSBzZW50IHRvIHRoZSBiaW5kIGNhbGwuCiAgICAgICAgICAgIHZhciBuZXdBcmdzID0gYXJncy5jb25jYXQoCiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzLCBbMF0pCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgbmV3QXJncyk7CiAgICAgICAgfTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5iaW5kQXNFdmVudExpc3RlbmVyCiAgICAgKiBAcGFyYW0gZnVuYyB7RnVuY3Rpb259IOS9nOS4uuS6i+S7tuebkeWQrOeahOWHveaVsAogICAgICogQHBhcmFtIG9iamVjdCB7T2JqZWN0fSDkvZznlKjln58KICAgICAqLwogICAgdXRpbC5iaW5kQXNFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZnVuYywgb2JqZWN0KSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jLmNhbGwob2JqZWN0LCBldmVudCB8fCB3aW5kb3cuZXZlbnQpOwogICAgICAgIH07CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuaXNOb2RlCiAgICAgKiBAZGVzYyDliKTmlq3lr7nosaHmmK/lkKbmmK/oioLngrkKICAgICAqIEBwYXJhbSBvIHtPYmplY3R9CiAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICovCiAgICB1dGlsLmlzTm9kZSA9IGZ1bmN0aW9uKG8pIHsKICAgICAgICByZXR1cm4gISEobyAmJiBvLm5vZGVUeXBlID09PSAxKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5pc09iamVjdAogICAgICogQGRlc2Mg5Yik5pat5a+56LGh5piv5ZCm5piv5a+56LGhCiAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICovCiAgICB1dGlsLmlzT2JqZWN0ID0gZnVuY3Rpb24gKHNvdXJjZSkgewogICAgICAgIHJldHVybiAnZnVuY3Rpb24nID09IHR5cGVvZiBzb3VyY2UgfHwgISEoc291cmNlICYmICdvYmplY3QnID09IHR5cGVvZiBzb3VyY2UpOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmlzU3RyaW5nCiAgICAgKiBAZGVzYyDliKTmlq3lr7nosaHmmK/lkKbmmK/lrZfnrKbkuLIKICAgICAqIEByZXR1cm4ge0Jvb2xlYW59CiAgICAgKi8KICAgIHV0aWwuaXNTdHJpbmcgPSBmdW5jdGlvbiAoc291cmNlKSB7CiAgICAgICAgcmV0dXJuICdbb2JqZWN0IFN0cmluZ10nID09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzb3VyY2UpOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmlzQXJyYXkKICAgICAqIEBkZXNjIOWIpOaWreWvueixoeaYr+WQpuaYr+aVsOe7hAogICAgICogQHJldHVybiB7Qm9vbGVhbn0KICAgICAqLwogICAgdXRpbC5pc0FycmF5ID0gZnVuY3Rpb24oc291cmNlKSB7CiAgICAgICAgcmV0dXJuICgnW29iamVjdCBBcnJheV0nID09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzb3VyY2UpKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5pc051bWVyaWMKICAgICAqIEBkZXNjIOWIpOaWreWvueixoeaYr+WQpuaYr+aVsOWtlwogICAgICogQHJldHVybnMge0Jvb2xlYW59CiAgICAgKi8KICAgIHV0aWwuaXNOdW1lcmljID0gZnVuY3Rpb24ob2JqKSB7CiAgICAgICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG9iaikpICYmIGlzRmluaXRlKG9iaik7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuaXNQbGFpbgogICAgICogQGRlc2Mg5Yik5pat5piv5ZCm5piv5pmu6YCa5a+56LGhIOmdnmZ1bmN0aW9uCiAgICAgKi8KICAgIHV0aWwuaXNQbGFpbiAgPSBmdW5jdGlvbihvYmopewogICAgICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksCiAgICAgICAgICAgIGtleTsKICAgICAgICBpZiAoICFvYmogfHwKICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgIT09ICJbb2JqZWN0IE9iamVjdF0iIHx8CiAgICAgICAgICAgICEoJ2lzUHJvdG90eXBlT2YnIGluIG9iaikKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKCBvYmouY29uc3RydWN0b3IgJiYKICAgICAgICAgICAgIWhhc093blByb3BlcnR5LmNhbGwob2JqLCAiY29uc3RydWN0b3IiKSAmJgogICAgICAgICAgICAhaGFzT3duUHJvcGVydHkuY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAiaXNQcm90b3R5cGVPZiIpICkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGZvciAoIGtleSBpbiBvYmogKSB7fQogICAgICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKCBvYmosIGtleSApOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmlzRW1wdHkKICAgICAqIEBkZXNjIOWIpOaWreS8oOWFpeeahOWPguaVsOaYr+WQpuS4uuepuu+8jAogICAgICogICAgICAg5YyF5ousdW5kZWZpbmVkLCBudWxsLCBmYWxzZSwgbnVtYmVyIDAsCiAgICAgKiAgICAgICBlbXB0eSBzdHJpbmcsIHN0cmluZyAiMCIsIHt9IGFuZCBbXQogICAgICogQHJldHVybnMge0Jvb2xlYW59CiAgICAgKi8KICAgIHV0aWwuaXNFbXB0eSA9IGZ1bmN0aW9uKG1peGVkX3ZhcikgewogICAgICAgIHZhciB1bmRlZiwga2V5LCBpLCBsZW47CiAgICAgICAgdmFyIGVtcHR5VmFsdWVzID0gW3VuZGVmLCBudWxsLCBmYWxzZSwgMCwgIiIsICIwIl07CgogICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGVtcHR5VmFsdWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgIGlmIChtaXhlZF92YXIgPT09IGVtcHR5VmFsdWVzW2ldKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGVvZiBtaXhlZF92YXIgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgIGZvciAoa2V5IGluIG1peGVkX3ZhcikgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmNsb25lCiAgICAgKiBAZGVzYyDmt7Hluqbmi7fotJ3kuIDkuKrlr7nosaEKICAgICAqIEByZXR1cm4g5ou36LSd5ZCO55qE5a+56LGhCiAgICAgKi8KICAgIHV0aWwuY2xvbmUgPSBmdW5jdGlvbihzb3VyY2UpIHsKICAgICAgICB2YXIgcmVzdWx0ID0gc291cmNlLCBpLCBsZW47CiAgICAgICAgaWYgKCFzb3VyY2UKICAgICAgICAgICAgfHwgc291cmNlIGluc3RhbmNlb2YgTnVtYmVyCiAgICAgICAgICAgIHx8IHNvdXJjZSBpbnN0YW5jZW9mIFN0cmluZwogICAgICAgICAgICB8fCBzb3VyY2UgaW5zdGFuY2VvZiBCb29sZWFuKSB7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSBlbHNlIGlmKHV0aWwuaXNOb2RlKHNvdXJjZSkpIHsKICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5jbG9uZU5vZGUodHJ1ZSk7CiAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzQXJyYXkoc291cmNlKSkgewogICAgICAgICAgICByZXN1bHQgPSBbXTsKICAgICAgICAgICAgdmFyIHJlc3VsdExlbiA9IDAsCiAgICAgICAgICAgICAgICBpID0gMCwKICAgICAgICAgICAgICAgIGxlbiA9IHNvdXJjZS5sZW5ndGg7CiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHRMZW4rK10gPSB1dGlsLmNsb25lKHNvdXJjZVtpXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNQbGFpbihzb3VyY2UpKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IHt9OwogICAgICAgICAgICBmb3IgKGkgaW4gc291cmNlKSB7CiAgICAgICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGkpKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gdXRpbC5jbG9uZShzb3VyY2VbaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuZWFjaAogICAgICogQHBhcmFtIHNvdXJjZSB7QXJyYXkgfCBPYmplY3R9CiAgICAgKiBAcGFyYW0gY2FsbGJhY2sge0Z1bmN0aW9ufQogICAgICogQHJldHVybnMgeyp9CiAgICAgKiBAZGVzYyDpgY3ljobmlbDnu4TmiJblr7nosaEKICAgICAqLwogICAgdXRpbC5lYWNoID0gZnVuY3Rpb24oc291cmNlLCBjYWxsYmFjaykgewogICAgICAgIGlmKHV0aWwuaXNBcnJheShzb3VyY2UpKSB7CiAgICAgICAgICAgIHJldHVybiBBcnJheS5mb3JFYWNoID8gc291cmNlLmZvckVhY2goY2FsbGJhY2spIDogZnVuY3Rpb24oYXIsIGZ1bmMpIHsKICAgICAgICAgICAgICAgIHZhciBsZW4gPSBhci5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgaSA9IDA7CiAgICAgICAgICAgICAgICBmb3IoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5jYWxsKHRoaXMsIGFyW2ldLCBpKTsKICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQgPT09IHRydWUpIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KHNvdXJjZSwgY2FsbGJhY2spOwogICAgICAgIH0KICAgICAgICBpZih1dGlsLmlzT2JqZWN0KHNvdXJjZSkpIHsKICAgICAgICAgICAgZm9yKHZhciBrIGluIHNvdXJjZSkgewogICAgICAgICAgICAgICAgaWYoc291cmNlLmhhc093blByb3BlcnR5KGspKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrLmNhbGwodGhpcywgc291cmNlW2tdLCBrKTsKICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQgPT09IHRydWUpIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5mb3JtYXQKICAgICAqIEBwYXJhbSBzdHIge1N0cmluZ30g5b6F6L2s5o2i55qE5a2X56ym5LiyCiAgICAgKiBAcGFyYW0gZGF0YSB7fSDmlbDmja4KICAgICAqIEByZXR1cm5zIHtTdHJpbmd9CiAgICAgKi8KICAgIHV0aWwuZm9ybWF0ID0gZnVuY3Rpb24oc3RyLCBkYXRhKSB7CiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oIylceyguKj8pXH0vZywgZnVuY3Rpb24oYWxsLCBmbGFnLCBwYXJhbSkgewogICAgICAgICAgICByZXR1cm4gZGF0YSAmJiB0eXBlb2YgZGF0YVtwYXJhbV0gIT0gInVuZGVmaW5lZCIgPyBkYXRhW3BhcmFtXSA6ICIiOwogICAgICAgIH0pOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmFwcGx5RGVmYXVsdHMKICAgICAqIEBkZXNjIOWwhuS4gOS4quWvueixoemHjOayoeacieeahOWPguaVsOWkjeWItue7meWPpuS4gOS4quWvueixoSDkuI5leHRlbmTnmoTljLrliKvlnKjkuo4g5aaC5p6c5LiN5Lya5aSN5Yi25bey5a2Y5Zyo5bGe5oCnCiAgICAgKiBAcGFyYW0gdG8ge09iamVjdH0KICAgICAqIEBwYXJhbSBmcm9tIHtPYmplY3R9CiAgICAgKi8KICAgIHV0aWwuYXBwbHlEZWZhdWx0cyA9IGZ1bmN0aW9uKHRvLCBmcm9tKSB7CiAgICAgICAgdG8gPSB0byB8fCB7fTsKICAgICAgICB2YXIgZnJvbUlzRXZ0ID0gdHlwZW9mIHdpbmRvdy5FdmVudCA9PSAiZnVuY3Rpb24iCiAgICAgICAgICAgICYmIGZyb20gaW5zdGFuY2VvZiB3aW5kb3cuRXZlbnQ7CiAgICAgICAgZm9yICh2YXIga2V5IGluIGZyb20pIHsKICAgICAgICAgICAgaWYodG9ba2V5XSA9PT0gdW5kZWZpbmVkIHx8CiAgICAgICAgICAgICAgICAoIWZyb21Jc0V2dCAmJiBmcm9tLmhhc093blByb3BlcnR5CiAgICAgICAgICAgICAgICAgICAgJiYgZnJvbS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF0by5oYXNPd25Qcm9wZXJ0eShrZXkpKSkgewogICAgICAgICAgICAgICAgdG9ba2V5XSA9IGZyb21ba2V5XTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZighZnJvbUlzRXZ0ICYmIGZyb20gJiYgZnJvbS5oYXNPd25Qcm9wZXJ0eQogICAgICAgICAgICAmJiBmcm9tLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpICYmICF0by5oYXNPd25Qcm9wZXJ0eSgndG9TdHJpbmcnKSkgewogICAgICAgICAgICB0by50b1N0cmluZyA9IGZyb20udG9TdHJpbmc7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0bzsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5hcHBseUFkZAogICAgICogQGRlc2Mg5bCG5LiA5Liq5a+56LGh6YeM55qE5Y+C5pWw5rex5bqm5ou36LSd57uZ5Y+m5LiA5Liq5a+56LGhIOWmguaenOWPguaVsOW3suWtmOWcqCDliJnopobnm5Yg5aaC5p6c5LiN5a2Y5ZyoIOWImei/veWKoAogICAgICogQHBhcmFtIHRvIHtPYmplY3R9CiAgICAgKiBAcGFyYW0gZnJvbSAge09iamVjdH0KICAgICAqLwogICAgdXRpbC5hcHBseUFkZCA9IGZ1bmN0aW9uKHRvLCBmcm9tKSB7CiAgICAgICAgdG8gPSB0byB8fCB7fTsKICAgICAgICB2YXIgZnJvbUlzRXZ0ID0gdHlwZW9mIHdpbmRvdy5FdmVudCA9PSAiZnVuY3Rpb24iCiAgICAgICAgICAgICYmIGZyb20gaW5zdGFuY2VvZiB3aW5kb3cuRXZlbnQ7CiAgICAgICAgZm9yKHZhciBrIGluIGZyb20pIHsKICAgICAgICAgICAgaWYodXRpbC5pc09iamVjdCh0b1trXSkgJiYgdXRpbC5pc09iamVjdChmcm9tW2tdKSkgewogICAgICAgICAgICAgICAgdG9ba10gPSB1dGlsLmFwcGx5QWRkKHRvW2tdLCBmcm9tW2tdKTsKICAgICAgICAgICAgfSBlbHNlIGlmKGZyb21ba10gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdG9ba10gPSBmcm9tW2tdCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYoIWZyb21Jc0V2dCAmJiBmcm9tICYmIGZyb20uaGFzT3duUHJvcGVydHkKICAgICAgICAgICAgJiYgZnJvbS5oYXNPd25Qcm9wZXJ0eSgndG9TdHJpbmcnKSAmJiAhdG8uaGFzT3duUHJvcGVydHkoJ3RvU3RyaW5nJykpIHsKICAgICAgICAgICAgdG8udG9TdHJpbmcgPSBmcm9tLnRvU3RyaW5nOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdG87CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwudXJsQXBwZW5kCiAgICAgKiBAZGVzYyDlsIbmjIflrprlrZfnrKbkuLLph4znmoTlhoXlrrnmi7zov5t1cmwKICAgICAqIEBwYXJhbSB1cmwge1N0cmluZ30KICAgICAqIEBwYXJhbSBwYXJhbVN0ciB7U3RyaW5nfQogICAgICogQGV4YW1wbGUKICAgICAqIHVybCA9ICJodHRwOi8vd3d3Lmdvb2dsZS5jb20iOwogICAgICogb2N0b3B1cy51dGlsLnVybEFwcGVuZCh1cmwsICJhPTEmYj0yIik7CiAgICAgKiByZXR1cm4gImh0dHA6Ly93d3cuZ29vZ2xlLmNvbT9hPTEmYj0yIgogICAgICovCiAgICB1dGlsLnVybEFwcGVuZCA9IGZ1bmN0aW9uKHVybCwgcGFyYW1TdHIpIHsKICAgICAgICB2YXIgbmV3VXJsID0gdXJsOwogICAgICAgIGlmKHBhcmFtU3RyKSB7CiAgICAgICAgICAgIHZhciBwYXJ0cyA9ICh1cmwgKyAiICIpLnNwbGl0KC9bPyZdLyk7CiAgICAgICAgICAgIG5ld1VybCArPSAocGFydHMucG9wKCkgPT09ICIgIiA/CiAgICAgICAgICAgICAgICBwYXJhbVN0ciA6CiAgICAgICAgICAgICAgICBwYXJ0cy5sZW5ndGggPyAiJiIgKyBwYXJhbVN0ciA6ICI/IiArIHBhcmFtU3RyKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ld1VybDsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5nZXRQYXJhbWV0ZXJTdHJpbmcKICAgICAqIEBkZXNjIOS7juaMh+WumuWQjeWAvOWvuemHjOaQnuWHuuadpeWtl+espuS4suW9ouW8jwogICAgICogQHBhcmFtIHBhcmFtcyB7T2JqZWN0fQogICAgICogQGV4YW1wbGUKICAgICAqIHBhcmFtID0geyBhOiAxLCBiOiAyIH0KICAgICAqIG9jdG9wdXMudXRpbC5nZXRQYXJhbWV0ZXJTdHJpbmcocGFyYW0pCiAgICAgKiByZXR1cm4gImE9MSZiPTIiCiAgICAgKi8KICAgIHV0aWwuZ2V0UGFyYW1ldGVyU3RyaW5nID0gZnVuY3Rpb24ocGFyYW1zKSB7CiAgICAgICAgdmFyIHBhcmFtc0FycmF5ID0gW107CiAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykgewogICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJhbXNba2V5XTsKICAgICAgICAgICAgaWYgKCh2YWx1ZSAhPSBudWxsKSAmJiAodHlwZW9mIHZhbHVlICE9ICdmdW5jdGlvbicpKSB7CiAgICAgICAgICAgICAgICB2YXIgZW5jb2RlZFZhbHVlOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PSBBcnJheSkgewogICAgICAgICAgICAgICAgICAgIHZhciBlbmNvZGVkSXRlbUFycmF5ID0gW107CiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW07CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaXRlbUluZGV4PTAsIGxlbj12YWx1ZS5sZW5ndGg7IGl0ZW1JbmRleDxsZW47IGl0ZW1JbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSB2YWx1ZVtpdGVtSW5kZXhdOwogICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVkSXRlbUFycmF5LnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZW0gPT09IG51bGwgfHwgaXRlbSA9PT0gdW5kZWZpbmVkKSA/ICIiIDogaXRlbSkKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZW5jb2RlZFZhbHVlID0gZW5jb2RlZEl0ZW1BcnJheS5qb2luKCIsIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlbmNvZGVkVmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFyYW1zQXJyYXkucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICI9IiArIGVuY29kZWRWYWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcmFtc0FycmF5LmpvaW4oIiYiKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5nZXRQYXJhbWV0ZXJzCiAgICAgKiBAZGVzYyDku451cmzkuK0/5ZCO55qE5a2X56ym5Liy5Lul5a+56LGh5b2i5byP6L+U5ZueCiAgICAgKiBAcGFyYW0gdXJsIHtTdHJpbmd9CiAgICAgKiBAZXhhbXBsZQogICAgICogdXJsID0gImh0dHA6Ly93d3cuYmFpZHUuY29tP2E9MSZiPTIiCiAgICAgKiBvY3RvcHVzLnV0aWwuZ2V0UGFyYW1ldGVycyh1cmwpOwogICAgICogcmV0dXJuIHsgYTogMSwgYjogMiB9CiAgICAgKi8KICAgIHV0aWwuZ2V0UGFyYW1ldGVycyA9IGZ1bmN0aW9uKHVybCkgewogICAgICAgIHVybCA9ICh1cmwgPT09IG51bGwgfHwgdXJsID09PSB1bmRlZmluZWQpID8gd2luZG93LmxvY2F0aW9uLmhyZWYgOiB1cmw7CiAgICAgICAgdmFyIHBhcmFtc1N0cmluZyA9ICIiOwogICAgICAgIGlmKHVybC5pbmRleE9mKCI/IikgIT0gLTEpIHsKICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdXJsLmluZGV4T2YoJz8nKSArIDE7CiAgICAgICAgICAgIHZhciBlbmQgPSB1cmwuaW5kZXhPZigiIyIpICE9IC0xID8KICAgICAgICAgICAgICAgIHVybC5pbmRleE9mKCcjJykgOiB1cmwubGVuZ3RoOwogICAgICAgICAgICBwYXJhbXNTdHJpbmcgPSB1cmwuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpOwogICAgICAgIH0KICAgICAgICB2YXIgcGFyYW1ldGVycyA9IHt9OwogICAgICAgIHZhciBwYWlycyA9IHBhcmFtc1N0cmluZy5zcGxpdCgvWyY7XS8pLAogICAgICAgICAgICBpID0gMCwKICAgICAgICAgICAgbGVuID0gcGFpcnMubGVuZ3RoOwogICAgICAgIGZvciggOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgdmFyIGtleVZhbHVlID0gcGFpcnNbaV0uc3BsaXQoJz0nKTsKICAgICAgICAgICAgaWYoa2V5VmFsdWVbMF0pIHsKICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlWYWx1ZVswXTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleSk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICBrZXkgPSB1bmVzY2FwZShrZXkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gKGtleVZhbHVlWzFdIHx8ICcnKS5yZXBsYWNlKC9cKy9nLCAiICIpOwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZXNjYXBlKHZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoIiwiKTsKICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT0gMSkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbMF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzW2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcGFyYW1ldGVyczsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5jcmVhdGVVcmxPYmplY3QKICAgICAqIEBkZXNjIOWIm+W7uuS4gOS4qnVybOWvueixoeeahOWQjeWAvOWvuQogICAgICog6YeM6Z2i5oyJ54WndzNjIHVybOagh+WHhuaPkOS+m+S6huavj+S4gOS4queahOWAvAogICAgICogQGV4YW1wbGUKICAgICAqIHVybCA9ICJodHRwOi8vd3d3Lmdvb2dsZS5jb20/YT0xJmI9MiNhYmM9MSI7CiAgICAgKiBvY3RvcHVzLnV0aWwuY3JlYXRlVXJsT2JqZWN0KHVybCk7CiAgICAgKiByZXR1cm4KICAgICAqIHsKICAgICAqICBhcmdzOiBPYmplY3QsCiAgICAgKiAgYTogIjEiLAogICAgICogIGI6ICIyIiwKICAgICAqICBoYXNoOiAiI2FiYz0xIiwKICAgICAqICBob3N0OiAid3d3Lmdvb2dsZS5jb20iLAogICAgICogIHBhdGhuYW1lOiAiLyIsCiAgICAgKiAgcG9ydDogIjgwIiwKICAgICAqICBwcm90b2NvbDogImh0dHA6IiwKICAgICAqIH0KICAgICAqLwogICAgdXRpbC5jcmVhdGVVcmxPYmplY3QgPSBmdW5jdGlvbih1cmwsIG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICB1cmwgPSB1cmwgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICAgICAgaWYoISgvXlx3KzpcL1wvLykudGVzdCh1cmwpKSB7CiAgICAgICAgICAgIHZhciBsb2MgPSB3aW5kb3cubG9jYXRpb247CiAgICAgICAgICAgIHZhciBwb3J0ID0gbG9jLnBvcnQgPyAiOiIgKyBsb2MucG9ydCA6ICIiOwogICAgICAgICAgICB2YXIgZnVsbFVybCA9IGxvYy5wcm90b2NvbCArICIvLyIgKyBsb2MuaG9zdC5zcGxpdCgiOiIpLnNoaWZ0KCkgKyBwb3J0OwogICAgICAgICAgICBpZih1cmwuaW5kZXhPZigiLyIpID09PSAwKSB7CiAgICAgICAgICAgICAgICB1cmwgPSBmdWxsVXJsICsgdXJsOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gbG9jLnBhdGhuYW1lLnNwbGl0KCIvIik7CiAgICAgICAgICAgICAgICBwYXJ0cy5wb3AoKTsKICAgICAgICAgICAgICAgIHVybCA9IGZ1bGxVcmwgKyBwYXJ0cy5qb2luKCIvIikgKyAiLyIgKyB1cmw7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKG9wdGlvbnMuaWdub3JlQ2FzZSkgewogICAgICAgICAgICB1cmwgPSB1cmwudG9Mb3dlckNhc2UoKTsKICAgICAgICB9CiAgICAgICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgYS5ocmVmID0gdXJsOwogICAgICAgIHZhciB1cmxPYmplY3QgPSB7fTsKICAgICAgICB1cmxPYmplY3QuaG9zdCA9IGEuaG9zdC5zcGxpdCgiOiIpLnNoaWZ0KCk7CiAgICAgICAgdXJsT2JqZWN0LnByb3RvY29sID0gYS5wcm90b2NvbDsKICAgICAgICBpZihvcHRpb25zLmlnbm9yZVBvcnQ4MCkgewogICAgICAgICAgICB1cmxPYmplY3QucG9ydCA9IChhLnBvcnQgPT0gIjgwIiB8fCBhLnBvcnQgPT0gIjAiKSA/ICIiIDogYS5wb3J0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHVybE9iamVjdC5wb3J0ID0gKGEucG9ydCA9PSAiIiB8fCBhLnBvcnQgPT0gIjAiKSA/ICI4MCIgOiBhLnBvcnQ7CiAgICAgICAgfQoKICAgICAgICAvL2hhc2gKICAgICAgICB1cmxPYmplY3QuaGFzaCA9IChvcHRpb25zLmlnbm9yZUhhc2ggfHwgYS5oYXNoID09PSAiIyIpID8gIiIgOiBhLmhhc2g7CiAgICAgICAgdmFyIHF1ZXJ5U3RyaW5nID0gYS5zZWFyY2g7CiAgICAgICAgaWYgKCFxdWVyeVN0cmluZykgewogICAgICAgICAgICB2YXIgcU1hcmsgPSB1cmwuaW5kZXhPZigiPyIpOwogICAgICAgICAgICBxdWVyeVN0cmluZyA9IChxTWFyayAhPSAtMSkgPyB1cmwuc3Vic3RyKHFNYXJrKSA6ICIiOwogICAgICAgIH0KICAgICAgICB1cmxPYmplY3QuYXJncyA9IHV0aWwuZ2V0UGFyYW1ldGVycyhxdWVyeVN0cmluZyk7CiAgICAgICAgdXJsT2JqZWN0LnBhdGhuYW1lID0gKGEucGF0aG5hbWUuY2hhckF0KDApID09ICIvIikgPyBhLnBhdGhuYW1lIDogIi8iICsgYS5wYXRobmFtZTsKICAgICAgICByZXR1cm4gdXJsT2JqZWN0OwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLnRyaW0KICAgICAqIEBkZXNjIOWOu+aOieWtl+espuS4suS4pOS+p+epuueZvQogICAgICogQHBhcmFtIHN0ciB7U3RyaW5nfQogICAgICovCiAgICB1dGlsLnRyaW0gPSBmdW5jdGlvbihzdHIpIHsKICAgICAgICBzdHIgPSBTdHJpbmcoc3RyKTsKICAgICAgICByZXR1cm4gISFzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKCIoXltcXHNcXHRcXHhhMFxcdTMwMDBdKyl8KFtcXHUzMDAwXFx4YTBcXHNcXHRdK1x4MjQpIiwgImciKSwgJycpOwogICAgfTsKCgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5yZW1vdmVJdGVtCiAgICAgKiBAcGFyYW0gc291cmNlCiAgICAgKiBAcGFyYW0gaXRlbQogICAgICovCiAgICB1dGlsLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbihzb3VyY2UsIGl0ZW0pIHsKICAgICAgICB2YXIgbGVuID0gc291cmNlLmxlbmd0aCwKICAgICAgICAgICAgaSA9IGxlbjsKICAgICAgICBmb3IoOyBpLS07ICkgewogICAgICAgICAgICBpZihzb3VyY2VbaV0gPT09IGl0ZW0pIHsKICAgICAgICAgICAgICAgIHNvdXJjZS5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNvdXJjZTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC51cHBlckNhc2VPYmplY3QKICAgICAqIEBkZXNjIOWwhuaMh+WumuWvueixoemHjOeahGtleemmluWtl+avjeWkp+WGmQogICAgICogQHBhcmFtIG9iamVjdCB7T2JqZWN0fQogICAgICovCiAgICB1dGlsLnVwcGVyQ2FzZU9iamVjdCA9IGZ1bmN0aW9uIChvYmplY3QpIHsKICAgICAgICB2YXIgdU9iamVjdCA9IHt9OwogICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHsKICAgICAgICAgICAgdU9iamVjdFtrZXkudG9VcHBlckNhc2UoKV0gPSBvYmplY3Rba2V5XTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVPYmplY3Q7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuY2FtZWxpemUKICAgICAqIEBkZXNjIOmpvOWzsOWMluWtl+espuS4sgogICAgICogQHBhcmFtIHNvdXJjZSB7U3RyaW5nfQogICAgICovCiAgICB1dGlsLmNhbWVsaXplID0gZnVuY3Rpb24oc291cmNlKSB7CiAgICAgICAgdmFyIG9TdHJpbmdMaXN0ID0gc291cmNlLnNwbGl0KC9bXC18X3xcc3xcLl0vZyk7CiAgICAgICAgdmFyIGNhbWVsaXplZFN0cmluZyA9IG9TdHJpbmdMaXN0WzBdLAogICAgICAgICAgICBpID0gMSwKICAgICAgICAgICAgbGVuID0gb1N0cmluZ0xpc3QubGVuZ3RoOwogICAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgIHZhciBzID0gb1N0cmluZ0xpc3RbaV07CiAgICAgICAgICAgIGNhbWVsaXplZFN0cmluZyArPSBzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcy5zdWJzdHJpbmcoMSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjYW1lbGl6ZWRTdHJpbmc7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuc3R5bGVDc3MKICAgICAqIEBkZXNjIOWwhuWJjee8gOexu2NzcyDmoLflvI/ljJYKICAgICAqIEBleGFtcGxlCiAgICAgKiB2YXIgY3NzID0gIi13ZWJraXQtdHJhbnNpdGlvbiI7CiAgICAgKiBvY3RvcHVzLnV0aWwuc3R5bGVDc3MoY3NzKTsKICAgICAqIHJldHVybiAid2Via2l0VHJhbnNpdGlvbiIKICAgICAqLwogICAgdXRpbC5zdHlsZUNzcyA9IGZ1bmN0aW9uKHN0cikgewogICAgICAgIHZhciBmbGFnID0gdHJ1ZTsKICAgICAgICB2YXIgc3RyID0gc3RyLnJlcGxhY2UoL1wtKFxTKS9nLCBmdW5jdGlvbigkMSwgJDIpIHsKICAgICAgICAgICAgcmV0dXJuIGZsYWcgPyAoZmxhZyA9IGZhbHNlLCAkMikgOiAkMi50b1VwcGVyQ2FzZSgpOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBzdHI7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuY3NzU3R5bGUKICAgICAqIEBkZXNjIOWwhuagt+W8j+WMlueahOWJjee8gCBjc3PljJYKICAgICAqIEBleGFtcGxlCiAgICAgKiB2YXIgc3R5bGUgPSAid2Via2l0VHJhbnNpdGlvbiIKICAgICAqIG9jdG9wdXMudXRpbC5jc3NTdHlsZShzdHlsZSk7CiAgICAgKiByZXR1cm4gLXdlYmtpdC10cmFuc2l0aW9uCiAgICAgKi8KICAgIHV0aWwuY3NzU3R5bGUgPSBmdW5jdGlvbihzdHIpIHsKICAgICAgICB2YXIgc3RyID0gc3RyLnJlcGxhY2UoLyheXFN8W0EtWl0pL2csIGZ1bmN0aW9uKCQxKSB7CiAgICAgICAgICAgIHJldHVybiAiLSIgKyAkMS50b0xvd2VyQ2FzZSgpOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBzdHI7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwucmVxdWVzdEFuaW1hdGlvbgogICAgICovCiAgICB1dGlsLnJlcXVlc3RBbmltYXRpb24gPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHJlcXVlc3QgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwKICAgICAgICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fAogICAgICAgICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fAogICAgICAgICAgICB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwKICAgICAgICAgICAgZnVuY3Rpb24oY2FsbGJhY2ssIGVsZW1lbnQpIHsKICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxNik7CiAgICAgICAgICAgIH07CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrLCBlbGVtZW50KSB7CiAgICAgICAgICAgIHJlcXVlc3QuYXBwbHkod2luZG93LCBbY2FsbGJhY2ssIGVsZW1lbnRdKTsKICAgICAgICB9OwogICAgfSkoKTsKfSkob2N0b3B1cyk7LyoqCiAqIEBmaWxlCiAqIHdlYmFwcOmAmueUqOe7hOS7tuWfuuehgOW6k+aWh+S7tgogKiBkb20gLSAgIGRvbeaTjeS9nOmDqOWIhgogKiBAcmVxdWlyZSBsaWIvY2xhc3MuanMKICogQHJlcXVpcmUgbGliL3V0aWwuanMKICogQGF1dGhvciBvdXBlbmctZmUKICogQHZlcnNpb24gMS4xCiAqLwo7KGZ1bmN0aW9uKG8sIHVuZGVmaW5lZCkgewoKICAgICJ1c2Ugc3RyaWN0IjsKCiAgICB2YXIKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzYyDlt6Xlhbflh73mlbDnmoTlkb3lkI3nqbrpl7QKICAgICAgICAgKi8KICAgICAgICB1ID0gby51dGlsLAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzYyDlo7DmmI5kb2N1bWVudAogICAgICAgICAqLwogICAgICAgIGRvYyA9IGRvY3VtZW50OwoKICAgIGZ1bmN0aW9uIGdldFNjcmVlbkJ5KHQpIHsKICAgICAgICB2YXIgdiA9IHdpbmRvd1siaW5uZXIiICsgdF0sCiAgICAgICAgICAgIF92ID0gKHUuaXNOdW1lcmljKHYpICYmIHYgPiAwKSA/IHYgOgogICAgICAgICAgICAgICAgKGRvYy5jb21wYXRNb2RlID09ICJDU1MxQ29tcGF0IikgPyBkb2MuZG9jdW1lbnRFbGVtZW50WyJjbGllbnQiICsgdF0gOiBvLmRvbVsiZ2V0IiArIHRdKGRvYy5ib2R5KTsKICAgICAgICByZXR1cm4gX3YgPiAwID8gX3YgOiAwOwogICAgfQoKICAgIC8qKgogICAgICogQG5hbWVzcGFjZSBvY3RvcHVzLmRvbQogICAgICogQGRlc2Mg5LiA5Lqb5Z+656GA55qEZG9t5pON5L2cCiAgICAgKi8KICAgIG8uZG9tID0gewogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5kb20uZwogICAgICAgICAqIEBwYXJhbSBlbAogICAgICAgICAqIEBkZXNjIOmdoGlk5ou/5Liq6IqC54K5IOeUseS6juWPquaYr+eugOWNleaUr+aMgSDmsqHmnInlv4XopoHlhpnlvpfpgqPkuYjpq5jnuqcKICAgICAgICAgKi8KICAgICAgICBnOiBmdW5jdGlvbihlbCkgewogICAgICAgICAgICB2YXIgZWwgPSAodS5pc1N0cmluZyhlbCkgPyBkb2MuZ2V0RWxlbWVudEJ5SWQoZWwpIDogKHUuaXNPYmplY3QoZWwpICYmIGVsKSk7CiAgICAgICAgICAgIHJldHVybiBlbCB8fCBudWxsOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5kb20uJAogICAgICAgICAqIEBwYXJhbSBmaWx0ZXIKICAgICAgICAgKiBAcGFyYW0gZWwKICAgICAgICAgKiBAZGVzYyDkuI3mg7Pph43lpI3nmoTljrvlhpnov5nkuYjlpJog5ou/5Yiw5LiA5Liq6IqC54K56ZuG5ZCICiAgICAgICAgICovCiAgICAgICAgJDogZnVuY3Rpb24oZmlsdGVyLCBlbCkgewogICAgICAgICAgICB2YXIgZWwgPSBlbCB8fCBkb2MsCiAgICAgICAgICAgICAgICBfZWwgPSBvLmcoZWwpOwogICAgICAgICAgICByZXR1cm4gKG8udXRpbC5pc05vZGUoX2VsKSB8fCBfZWwgPT0gZG9jKSA/IF9lbC5xdWVyeVNlbGVjdG9yQWxsKGZpbHRlcikgOiBudWxsOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5kb20ub25lCiAgICAgICAgICogQHBhcmFtIGZpbHRlcgogICAgICAgICAqIEBwYXJhbSBlbAogICAgICAgICAqIEBkZXNjIOaLv+WIsOaMh+WumuiKgueCueS4i+eahOaWh+aho+a1gemHjOeahOesrOS4gOS4quiKgueCuQogICAgICAgICAqLwogICAgICAgIG9uZTogZnVuY3Rpb24oZmlsdGVyLCBlbCkgewogICAgICAgICAgICB2YXIgZWwgPSBlbCB8fCBkb2MsCiAgICAgICAgICAgICAgICBfZWwgPSBvLmcoZWwpOwogICAgICAgICAgICByZXR1cm4gKG8udXRpbC5pc05vZGUoX2VsKSB8fCBfZWwgPT0gZG9jKSA/IF9lbC5xdWVyeVNlbGVjdG9yKGZpbHRlcikgOiBudWxsOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5kb20uaGFzQ2xhc3MKICAgICAgICAgKiBAZGVzYyDliKTmlq3oioLngrnmnIljbGFzcwogICAgICAgICAqIEBwYXJhbSBlbCB7RE9NRWxlbWVudH0KICAgICAgICAgKiBAcGFyYW0gbmFtZSB7U3RyaW5nfQogICAgICAgICAqLwogICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbihlbCwgbmFtZSkgewogICAgICAgICAgICBlbCA9IG8uZyhlbCk7CiAgICAgICAgICAgIHZhciBuYW1lczsKICAgICAgICAgICAgcmV0dXJuICEhZWwuY2xhc3NMaXN0ID8gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpIDoKICAgICAgICAgICAgICAgIChuYW1lcyA9IGVsLmNsYXNzTmFtZSwgISFuYW1lcyAmJiBuZXcgUmVnRXhwKCIoXnxcXHMpIiArIG5hbWUgKyAiKFxcc3wkKSIpLnRlc3QobmFtZXMpKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuZG9tLmFkZENsYXNzCiAgICAgICAgICogQGRlc2Mg57uZ5oyH5a6a6IqC54K55aKe5YqgY2xhc3MKICAgICAgICAgKiBAcGFyYW0gZWwge0RPTUVsZW1lbnR9CiAgICAgICAgICogQHBhcmFtIG5hbWUge1N0cmluZ30KICAgICAgICAgKi8KICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWwsIG5hbWUpIHsKICAgICAgICAgICAgZWwgPSBvLmcoZWwpOwogICAgICAgICAgICBuYW1lID0gbmFtZSB8fCBudWxsOwogICAgICAgICAgICBpZighbmFtZSkgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIHZhciBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3Q7CiAgICAgICAgICAgIGlmKCEhY2xhc3NMaXN0KSB7CiAgICAgICAgICAgICAgICBpZighY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChuYW1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmKCFvLmRvbS5oYXNDbGFzcyhlbCwgbmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc05hbWUgKz0gKGVsLmNsYXNzTmFtZSA/ICIgIiA6ICIiKSArIG5hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGVsOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5kb20ucmVtb3ZlQ2xhc3MKICAgICAgICAgKiBAZGVzYyDliKDpmaTmjIflrproioLngrnnmoTmjIflrppjbGFzcwogICAgICAgICAqIEBwYXJhbSBlbCB7RE9NRWxlbWVudH0KICAgICAgICAgKiBAcGFyYW0gbmFtZSB7U3RyaW5nfQogICAgICAgICAqLwogICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbCwgbmFtZSkgewogICAgICAgICAgICBlbCA9IG8uZyhlbCk7CiAgICAgICAgICAgIHZhciBuYW1lcywKICAgICAgICAgICAgICAgIGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdDsKICAgICAgICAgICAgaWYoISFjbGFzc0xpc3QpIHsKICAgICAgICAgICAgICAgIGlmKGNsYXNzTGlzdC5jb250YWlucyhuYW1lKSkgewogICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZihvLmRvbS5oYXNDbGFzcyhlbCwgbmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICBuYW1lcyA9IGVsLmNsYXNzTmFtZTsKICAgICAgICAgICAgICAgICAgICBpZihuYW1lcykgewogICAgICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc05hbWUgPSB1LnRyaW0obmFtZXMpLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKCIoXnxcXHMrKSIgKyBuYW1lICsgIihcXHMrfCQpIiksICIgIgogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZWw7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmRvbS50b2dnbGVDbGFzcwogICAgICAgICAqIEBkZXNjIHRvZ2dsZeaMh+WumuiKgueCueeahOaMh+Wumuagt+W8jwogICAgICAgICAqIEBwYXJhbSBlbCB7RE9NRWxlbWVudCB8IFN0cmluZ30g5oyH5a6a6IqC54K5CiAgICAgICAgICogQHBhcmFtIG5hbWUge1N0cmluZ30g5oyH5a6a5qC35byPCiAgICAgICAgICovCiAgICAgICAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKGVsLCBuYW1lKSB7CiAgICAgICAgICAgIGVsID0gby5nKGVsKTsKICAgICAgICAgICAgdmFyIHQgPSBvLmRvbS5oYXNDbGFzcyhlbCwgbmFtZSk7CiAgICAgICAgICAgIGlmKHQpIHsKICAgICAgICAgICAgICAgIG8uZG9tLnJlbW92ZUNsYXNzKGVsLCBuYW1lKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG8uZG9tLmFkZENsYXNzKGVsLCBuYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gIXQ7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmRvbS5nZXRXaWR0aAogICAgICAgICAqIEBkZXNjIOiOt+W+l+aMh+WumuiKgueCueeahOWuveW6pgogICAgICAgICAqIEBwYXJhbSBlbCB7RE9NRWxlbWVudH0KICAgICAgICAgKi8KICAgICAgICBnZXRXaWR0aDogZnVuY3Rpb24oZWwpIHsKICAgICAgICAgICAgdmFyIGVsID0gby5nKGVsKTsKICAgICAgICAgICAgdmFyIHdpZHRoID0gISFlbC5vZmZzZXRXaWR0aCA/IGVsLm9mZnNldFdpZHRoIDogZWwuY2xpZW50V2lkdGg7CiAgICAgICAgICAgIHJldHVybiB3aWR0aCA+IDAgPyB3aWR0aCA6IDA7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmRvbS5nZXRTY3JlZW5XaWR0aAogICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9CiAgICAgICAgICogQGRlc2Mg6I635b6X5bGP5bmV5a695bqmCiAgICAgICAgICovCiAgICAgICAgZ2V0U2NyZWVuV2lkdGg6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gZ2V0U2NyZWVuQnkoIldpZHRoIik7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmRvbS5nZXRTY3JlZW5IZWlnaHQKICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfQogICAgICAgICAqIEBkZXNjIOiOt+W+l+Wxj+W5lemrmOW6pgogICAgICAgICAqLwogICAgICAgIGdldFNjcmVlbkhlaWdodDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBnZXRTY3JlZW5CeSgiSGVpZ2h0Iik7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmRvbS5nZXRIZWlnaHQKICAgICAgICAgKiBAZGVzYyDojrflvpfmjIflrproioLngrnpq5jluqYKICAgICAgICAgKiBAcGFyYW0gZWwge0RPTUVsZW1lbnR9CiAgICAgICAgICovCiAgICAgICAgZ2V0SGVpZ2h0OiBmdW5jdGlvbihlbCkgewogICAgICAgICAgICB2YXIgZWwgPSBvLmcoZWwpOwogICAgICAgICAgICB2YXIgaGVpZ2h0ID0gISFlbC5vZmZzZXRIZWlnaHQgPyBlbC5vZmZzZXRIZWlnaHQgOiBlbC5jbGllbnRIZWlnaHQ7CiAgICAgICAgICAgIHJldHVybiBoZWlnaHQgPiAwID8gaGVpZ2h0IDogMDsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuZG9tLmluc2VydEFmdGVyCiAgICAgICAgICogQGRlc2Mg5o+S5Yiw5oyH5a6a6IqC54K55ZCO6Z2iCiAgICAgICAgICogQHBhcmFtIG5ld2RvbSB7RE9NRWxlbWVudH0KICAgICAgICAgKiBAcGFyYW0gdGFyZG9tIHtET01FbGVtZW50fQogICAgICAgICAqLwogICAgICAgIGluc2VydEFmdGVyOiBmdW5jdGlvbihuZXdkb20sIHRhcmRvbSkgewogICAgICAgICAgICBuZXdkb20gPSBvLmcobmV3ZG9tKTsKICAgICAgICAgICAgdGFyZG9tID0gby5nKHRhcmRvbSk7CiAgICAgICAgICAgIHRhcmRvbS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdkb20sIHRhcmRvbS5uZXh0U2libGluZyk7CiAgICAgICAgICAgIHJldHVybiBuZXdkb207CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmRvbS5pbnNlcnRGaXJzdAogICAgICAgICAqIEBwYXJhbSBlbAogICAgICAgICAqIEBwYXJhbSBjb250YWluZXIKICAgICAgICAgKi8KICAgICAgICBpbnNlcnRGaXJzdDogZnVuY3Rpb24oZWwsIGNvbnRhaW5lcikgewogICAgICAgICAgICB2YXIgZWwgPSBvLmcoZWwpLAogICAgICAgICAgICAgICAgY29udGFpbmVyID0gby5nKGNvbnRhaW5lciksCiAgICAgICAgICAgICAgICBmaXJzdENoaWxkID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgIGlmKCFmaXJzdENoaWxkKSB7CiAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShlbCwgZmlyc3RDaGlsZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuZG9tLnNldFN0eWxlcwogICAgICAgICAqIEBkZXNjIOaJuemHj+i1i+WAvAogICAgICAgICAqIEBwYXJhbSBlbCB7RE9NRWxlbWVudH0KICAgICAgICAgKiBAcGFyYW0gb2JqIHtPYmplY3R9CiAgICAgICAgICogQHBhcmFtIGlzaW5pdCB7Qm9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBzZXRTdHlsZXM6IGZ1bmN0aW9uKGVsLCBvYmosIGlzaW5pdCkgewogICAgICAgICAgICBpc2luaXQgPSBpc2luaXQgfHwgZmFsc2U7CiAgICAgICAgICAgIGVsID0gby5nKGVsKTsKICAgICAgICAgICAgaWYoaXNpbml0KSB7CiAgICAgICAgICAgICAgICB2YXIgY3NzVGV4dCA9ICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvcih2YXIgayBpbiBvYmopIHsKICAgICAgICAgICAgICAgIGlmKCFpc2luaXQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgX2sgPSBrOwogICAgICAgICAgICAgICAgICAgIGlmKGsubWF0Y2goL14tKHdlYmtpdHxvfG1zfG1veikvZykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX2sgID0gdS5zdHlsZUNzcyhrKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGVbX2tdID0gb2JqW2tdOwogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY3NzVGV4dCArPSBrICsgIjogIiArIG9ialtrXSArICI7IjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZighIWNzc1RleHQpIHsKICAgICAgICAgICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmRvbS5nZXRTdHlsZQogICAgICAgICAqIEBkZXNjIOiOt+WPluaMh+WumuiKgueCueeahOaMh+WumuWxnuaAp+WAvAogICAgICAgICAqIEBwYXJhbSBlbCB7RE9NRWxlbWVudH0KICAgICAgICAgKiBAcGFyYW0gc3R5bGUge1N0cmluZ30KICAgICAgICAgKi8KICAgICAgICBnZXRTdHlsZTogZnVuY3Rpb24oZWwsIHN0eWxlKSB7CiAgICAgICAgICAgIGVsID0gby5nKGVsKTsKICAgICAgICAgICAgdmFyIHZhbHVlID0gbnVsbDsKICAgICAgICAgICAgaWYgKGVsICYmIGVsLnN0eWxlKSB7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IGVsLnN0eWxlW3UuY2FtZWxpemUoc3R5bGUpXTsKICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZG9jLmRlZmF1bHRWaWV3ICYmCiAgICAgICAgICAgICAgICAgICAgICAgIGRvYy5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjc3MgPSBkb2MuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY3NzID8gY3NzLmdldFByb3BlcnR5VmFsdWUoc3R5bGUpIDogbnVsbDsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsLmN1cnJlbnRTdHlsZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGVsLmN1cnJlbnRTdHlsZVt1LmNhbWVsaXplKHN0eWxlKV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9ucyA9IFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ107CiAgICAgICAgICAgICAgICBpZiAod2luZG93Lm9wZXJhICYmCiAgICAgICAgICAgICAgICAgICAgKHBvc2l0aW9ucy5pbmRleE9mKHN0eWxlKSAhPSAtMSkgJiYKICAgICAgICAgICAgICAgICAgICAoby5kb20uZ2V0U3R5bGUoZWwsICdwb3NpdGlvbicpID09ICdzdGF0aWMnKSkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJ2F1dG8nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PSAnYXV0bycgPyBudWxsIDogdmFsdWU7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmRvbS5nZXRQYXJlbnROb2RlCiAgICAgICAgICogQGRlc2Mg5p+l6K+i56ym5ZCI5p2h5Lu255qE56a75oyH5a6a6IqC54K55pyA6L+R55qE54i26IqC54K5CiAgICAgICAgICogQHBhcmFtIGVsIHtET01FTGVtZW50IHwgU3RyaW5nfSDooqvmn6Xmib7nmoTotbflp4voioLngrkKICAgICAgICAgKiBAcGFyYW0gZmlsdGVyIHtTdHJpbmd9IOetm+mAieWZqAogICAgICAgICAqIEBwYXJhbSBtYXhEZXB0aCB7TnVtYmVyfSDmn6XnnIvnmoTmnIDmt7HlsYLmlbAKICAgICAgICAgKi8KICAgICAgICBnZXRQYXJlbnROb2RlOiBmdW5jdGlvbihlbCwgZmlsdGVyLCBtYXhEZXB0aCkgewogICAgICAgICAgICB2YXIgZWwgPSBvLmcoZWwpOwogICAgICAgICAgICBtYXhEZXB0aCA9IG1heERlcHRoIHx8IDUwOwogICAgICAgICAgICB2YXIgZGVwdGggPSAwLAogICAgICAgICAgICAgICAgX2VsID0gbnVsbDsKICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlOwogICAgICAgICAgICB3aGlsZSh1LmlzTm9kZShlbCkgJiYgKGRlcHRoIDwgbWF4RGVwdGgpKSB7CiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZSwKICAgICAgICAgICAgICAgICAgICBsaXN0ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZmlsdGVyKTsKICAgICAgICAgICAgICAgIGlmKGxpc3QgJiYgbGlzdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgdS5lYWNoKGxpc3QsIGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYodS5pc05vZGUoaXRlbSkgJiYgaXRlbSA9PSBlbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2VsID0gaXRlbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICBpZihfZWwgfHwgZWwudGFnTmFtZSA9PSAiSFRNTCIpCWJyZWFrOwogICAgICAgICAgICAgICAgZGVwdGgrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gX2VsOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5kb20uZ2V0UG9zaXRpb24KICAgICAgICAgKiBAZGVzYyDojrflvpflhYPntKDnm7jlr7nkuo7mtY/op4jlmajlt6bkuIrop5LnmoTlnZDmoIcKICAgICAgICAgKiBAcGFyYW0gZWwge0RPTUVsZW1lbnR9CiAgICAgICAgICovCiAgICAgICAgZ2V0UG9zaXRpb246IGZ1bmN0aW9uKGVsKSB7CiAgICAgICAgICAgIGVsID0gby5nKGVsKTsKICAgICAgICAgICAgdmFyIGRvYyA9ICEhZWwub3duZXJEb2N1bWVudCA/IGVsLm93bmVyRG9jdW1lbnQgOiBlbCwKICAgICAgICAgICAgICAgIGdldFN0eWxlID0gby5kb20uZ2V0U3R5bGUsCiAgICAgICAgICAgICAgICBwb3MgPSB7ImxlZnQiOiAwLCAidG9wIjogMH0sCiAgICAgICAgICAgICAgICB2aWV3cG9ydCA9IGRvYy5kb2N1bWVudEVsZW1lbnQsCiAgICAgICAgICAgICAgICBwYXJlbnQgPSBlbDsKICAgICAgICAgICAgaWYoZWwgPT0gdmlld3BvcnQpewogICAgICAgICAgICAgICAgcmV0dXJuIHBvczsKICAgICAgICAgICAgfQogICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICBwb3MubGVmdCArPSBwYXJlbnQub2Zmc2V0TGVmdDsKICAgICAgICAgICAgICAgIHBvcy50b3AgICs9IHBhcmVudC5vZmZzZXRUb3A7CiAgICAgICAgICAgICAgICBpZiAoZ2V0U3R5bGUocGFyZW50LCAncG9zaXRpb24nKSA9PSAnZml4ZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgcG9zLmxlZnQgKz0gZG9jLmJvZHkuc2Nyb2xsTGVmdDsKICAgICAgICAgICAgICAgICAgICBwb3MudG9wICArPSBkb2MuYm9keS5zY3JvbGxUb3A7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQub2Zmc2V0UGFyZW50OwogICAgICAgICAgICB9IHdoaWxlIChwYXJlbnQgJiYgcGFyZW50ICE9IGVsKTsKICAgICAgICAgICAgaWYoZ2V0U3R5bGUoZWwsICdwb3NpdGlvbicpID09ICdhYnNvbHV0ZScpewogICAgICAgICAgICAgICAgcG9zLnRvcCAgLT0gZG9jLmJvZHkub2Zmc2V0VG9wOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcmVudCA9IGVsLm9mZnNldFBhcmVudDsKICAgICAgICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQgIT0gZG9jLmJvZHkpIHsKICAgICAgICAgICAgICAgIHBvcy5sZWZ0IC09IHBhcmVudC5zY3JvbGxMZWZ0OwogICAgICAgICAgICAgICAgaWYgKHBhcmVudC50YWdOYW1lICE9ICdUUicpIHsKICAgICAgICAgICAgICAgICAgICBwb3MudG9wIC09IHBhcmVudC5zY3JvbGxUb3A7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQub2Zmc2V0UGFyZW50OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwb3M7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmRvbS5jcmVhdGVEb20KICAgICAgICAgKiBAZGVzYyDliJvlu7pkb23oioLngrkKICAgICAgICAgKiBAcGFyYW0gdHlwZSB7U3RyaW5nfSBkb23nsbvlnosKICAgICAgICAgKiBAcGFyYW0gYXR0cyB7T2JqZWN0fSBkb23lsZ7mgKflkI3lgLzlr7kKICAgICAgICAgKiBAcGFyYW0gc3R5cyB7T2JqZWN0fSBkb23moLflvI/lkI3lgLzlr7kKICAgICAgICAgKi8KICAgICAgICBjcmVhdGVEb206IGZ1bmN0aW9uKHR5cGUsIGF0dHMsIHN0eXMpIHsKICAgICAgICAgICAgdmFyIGRvbSA9IGRvYy5jcmVhdGVFbGVtZW50KHR5cGUpOwogICAgICAgICAgICBhdHRzICYmIHUuZWFjaChhdHRzLCBmdW5jdGlvbih2LCBhdHQpIHsKICAgICAgICAgICAgICAgIGlmKGF0dCA9PSAiaW5uZXJIVE1MIiB8fCBhdHQgPT0gImlubmVyVGV4dCIpIHsKICAgICAgICAgICAgICAgICAgICBkb21bYXR0XSA9IG8udXRpbC5lbmNvZGVIdG1sKHYpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBkb20uc2V0QXR0cmlidXRlKGF0dCwgdik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzdHlzICYmIG8uZG9tLnNldFN0eWxlcyhkb20sIHN0eXMsIHRydWUpOwogICAgICAgICAgICByZXR1cm4gZG9tOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5kb20uY2xvbmVOb2RlCiAgICAgICAgICogQGRlc2MgY2xvbmXoioLngrkg5Y+v5Lul5bCG5LqL5Lu25LiA6LW3Y2xvbmUg6K+l5LqL5Lu25b+F6aG75piv6YCa6L+H5q2k5qGG5p625Yqg5LiK55qECiAgICAgICAgICogQHBhcmFtIGVsIHtET01FbGVtZW50fSDlvoVjbG9uZeeahOiKgueCuQogICAgICAgICAqIEBwYXJhbSBldiB7Qm9vbGVhbn0g5piv5ZCmY2xvbmXkuovku7bnm5HlkKwKICAgICAgICAgKiBAcGFyYW0gYyB7Qm9vbGVhbn0g5piv5ZCm5ou36LSd5a2Q6IqC54K5CiAgICAgICAgICovCiAgICAgICAgY2xvbmVOb2RlOiBmdW5jdGlvbihlbCwgZXYsIGMpIHsKICAgICAgICAgICAgZXYgPSBldiB8fCBmYWxzZTsKICAgICAgICAgICAgYyA9IGMgfHwgZmFsc2U7CiAgICAgICAgICAgIHZhciBjbG9uZUVsID0gby5nKGVsKS5jbG9uZU5vZGUoIWMpOwogICAgICAgICAgICBpZighZXYgfHwgIWVsLl9ldmVudENhY2hlSUQpIHJldHVybiBjbG9uZUVsOwogICAgICAgICAgICB2YXIgb2JzID0gby5ldmVudC5vYnNlcnZlcnNbZWwuX2V2ZW50Q2FjaGVJRF07CiAgICAgICAgICAgIHUuZWFjaChvYnMsIGZ1bmN0aW9uKGl0ZW0sIGkpIHsKICAgICAgICAgICAgICAgIHZhciBuYW1lID0gaXRlbS5uYW1lLAogICAgICAgICAgICAgICAgICAgIG9ic2VydmVyID0gdS5jbG9uZShpdGVtLm9ic2VydmVyKSwKICAgICAgICAgICAgICAgICAgICB1c2VDYXB0dXJlID0gdS5jbG9uZShpdGVtLnVzZUNhcHR1cmUpOwogICAgICAgICAgICAgICAgby5ldmVudC5vbihjbG9uZUVsLCBuYW1lLCBvYnNlcnZlciwgdXNlQ2FwdHVyZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gY2xvbmVFbDsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuZG9tLnNjcm9sbExpdGUKICAgICAgICAgKiBAZGVzYyDpkojlr7lpb3Porr7lpIfmu5rliqjmnaHmu5rliqjml7bkuovku7bkvKDmkq3mlrnlkJHlr7zoh7TnmoTmu5rliqjlvILluLjop6PlhrMKICAgICAgICAgKiBAcGFyYW0gZWwge0RPTUVsZW1lbnR9IOa7muWKqOeahOiKgueCuQogICAgICAgICAqIEBwYXJhbSBpc0hvcml6b24ge0Jvb2xlYW59IOaYr+WQpuaoquWQkQogICAgICAgICAqIEBwYXJhbSBwcmV2ZW50RnJvbSB7RE9NRWxlbWVudH0g5byV6LW3YnVn55qE5qC55rqQ5a655ZmoIOWPr+S4jeS8oAogICAgICAgICAqCiAgICAgICAgICovCiAgICAgICAgc2Nyb2xsTGl0ZTogZnVuY3Rpb24oZWwsIGlzSG9yaXpvbiwgcHJldmVudEZyb20pIHsKICAgICAgICAgICAgdmFyIHBvcyA9IHsgbGVmdDogMCwgdG9wOiAwIH07CiAgICAgICAgICAgIGlmKHByZXZlbnRGcm9tKSB7CiAgICAgICAgICAgICAgICBwcmV2ZW50RnJvbSA9IG8uZyhwcmV2ZW50RnJvbSk7CiAgICAgICAgICAgICAgICBvLmV2ZW50Lm9uKHByZXZlbnRGcm9tLCAidG91Y2htb3ZlIiwgZnVuY3Rpb24oZSkgeyBvLmV2ZW50LnN0b3AoZSwgdHJ1ZSk7IH0sIGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbCA9IG8uZyhlbCk7CiAgICAgICAgICAgIG8uZG9tLnNldFN0eWxlcyhlbCwgewogICAgICAgICAgICAgICAgIi13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nIjogInRvdWNoIgogICAgICAgICAgICB9KTsKICAgICAgICAgICAgby5ldmVudC5vbihlbCwgInRvdWNoc3RhcnQiLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICB2YXIgdG91Y2hlcyA9IGUudG91Y2hlczsKICAgICAgICAgICAgICAgIGlmKCF0b3VjaGVzKSAgICByZXR1cm47CiAgICAgICAgICAgICAgICBwb3MgPSB7CiAgICAgICAgICAgICAgICAgICAgbGVmdDogdG91Y2hlc1swXS5wYWdlWCwKICAgICAgICAgICAgICAgICAgICB0b3A6IHRvdWNoZXNbMF0ucGFnZVkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG8uZXZlbnQub24oZWwsICJ0b3VjaG1vdmUiLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICB2YXIgdG91Y2hlcyA9IGUudG91Y2hlczsKICAgICAgICAgICAgICAgIGlmKCF0b3VjaGVzKSAgICByZXR1cm47CiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0LAogICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcCA9IHRhcmdldC5zY3JvbGxUb3AsCiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsTGVmdCA9IHRhcmdldC5zY3JvbGxMZWZ0LAogICAgICAgICAgICAgICAgICAgIG1vdmVMZWZ0ID0gdG91Y2hlc1swXS5wYWdlWCwKICAgICAgICAgICAgICAgICAgICBtb3ZlVG9wID0gdG91Y2hlc1swXS5wYWdlWSwKICAgICAgICAgICAgICAgICAgICBzdGFydFRvcCA9IHBvcy50b3AsCiAgICAgICAgICAgICAgICAgICAgc3RhcnRMZWZ0ID0gcG9zLmxlZnQ7CiAgICAgICAgICAgICAgICBpZihpc0hvcml6b24pIHsKICAgICAgICAgICAgICAgICAgICBpZigoc2Nyb2xsTGVmdCA8PSAwICYmIG1vdmVMZWZ0ID4gc3RhcnRMZWZ0KSB8fAogICAgICAgICAgICAgICAgICAgICAgICAoc2Nyb2xsTGVmdCA+PSB0YXJnZXQuc2Nyb2xsV2lkdGggLSB0YXJnZXQuY2xpZW50V2lkdGggLSA1ICYmIG1vdmVMZWZ0IDwgc3RhcnRMZWZ0KSkgewogICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYoKHNjcm9sbFRvcCA8PSAwICYmIG1vdmVUb3AgPiBzdGFydFRvcCkgfHwKICAgICAgICAgICAgICAgICAgICAgICAgKHNjcm9sbFRvcCA+PSB0YXJnZXQuc2Nyb2xsSGVpZ2h0IC0gdGFyZ2V0LmNsaWVudEhlaWdodCAtIDUgJiYgbW92ZVRvcCA8IHN0YXJ0VG9wKSkgewogICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwdWJsaWMKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuZG9tLmRhdGEKICAgICAgICAgKiBAZGVzYyDor7vlj5bmiJborr7nva7mjIflrproioLngrnnmoTmlbDmja4KICAgICAgICAgKiBAcGFyYW0gZWwge1N0cmluZyB8IERPTUVMZW1lbnR9CiAgICAgICAgICogQHBhcmFtIGF0dHJzIHtTdHJpbmcgfCBBcnJheX0KICAgICAgICAgKi8KICAgICAgICBkYXRhOiBmdW5jdGlvbihlbCwgYXR0cnMpIHsKICAgICAgICAgICAgdmFyIHZzID0ge307CiAgICAgICAgICAgIGVsID0gby5nKGVsKTsKICAgICAgICAgICAgaWYodS5pc1N0cmluZyhhdHRycykpIHsKICAgICAgICAgICAgICAgIHZhciBhcnMgPSBhdHRycy5zcGxpdCgiICIpLAogICAgICAgICAgICAgICAgICAgIGxlbiA9IGFycy5sZW5ndGg7CiAgICAgICAgICAgICAgICBpZihsZW4gPT0gMSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbC5kYXRhc2V0ICYmIGVsLmRhdGFzZXRbYXJzWzBdXSB8fCBlbC5nZXRBdHRyaWJ1dGUoImRhdGEtIiArIGFyc1swXSkgfHwgbnVsbDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdS5lYWNoKGFycywgZnVuY3Rpb24oaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZW0gPSB1LmNhbWVsaXplKGl0ZW0pOwogICAgICAgICAgICAgICAgICAgICAgICB2c1tpdGVtXSA9IGVsLmRhdGFzZXQgJiYgZWwuZGF0YXNldFtfaXRlbV0gfHwgZWwuZ2V0QXR0cmlidXRlKCJkYXRhLSIgKyBpdGVtKSB8fCBudWxsOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdnMgPSBhdHRyczsKICAgICAgICAgICAgICAgIGZvcih2YXIgayBpbiB2cykgewogICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgiZGF0YS0iICsgaywgdnNba10pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2czsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHVibGljCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmRvbS5hdHRyCiAgICAgICAgICogQGRlc2Mg6K+75Y+W5oiW6K6+572u5oyH5a6a6IqC54K555qE5bGe5oCnCiAgICAgICAgICovCiAgICAgICAgYXR0cjogZnVuY3Rpb24oZWwsIGF0dHJzKSB7CiAgICAgICAgICAgIHZhciB2cyA9IHt9OwogICAgICAgICAgICBlbCA9IG8uZyhlbCk7CiAgICAgICAgICAgIGlmKHUuaXNTdHJpbmcoYXR0cnMpKSB7CiAgICAgICAgICAgICAgICB2YXIgYXJzID0gYXR0cnMuc3BsaXQoIiAiKSwKICAgICAgICAgICAgICAgICAgICBsZW4gPSBhcnMubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYobGVuID09IDEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKGFyc1swXSkgfHwgbnVsbDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdS5lYWNoKGFycywgZnVuY3Rpb24oaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICB2c1tpdGVtXSA9IGVsLmdldEF0dHJpYnV0ZShpdGVtKSB8fCBudWxsOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdnMgPSBhdHRyczsKICAgICAgICAgICAgICAgIGZvcih2YXIgayBpbiB2cykgewogICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShrLCB2c1trXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHZzOwogICAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBAZGVzYyDlsIbluLjnlKjnmoTpgInmi6nlmajmlrnms5XnmoTlkb3lkI3nqbrpl7Tmj5DliY0KICAgICAqLwogICAgby5nID0gby5kb20uZzsKCiAgICBvLiQgPSBvLmRvbS4kOwoKICAgIG8ub25lID0gby5kb20ub25lOwoKICAgICF3aW5kb3cuJCAmJiAod2luZG93LiQgPSBvLiQpOwoKfSkob2N0b3B1cyk7Ci8qKgogKiBAZmlsZQogKiB3ZWJhcHDpgJrnlKjnu4Tku7bln7rnoYDlupPmlofku7YKICog5LqL5Lu26YOo5YiGIO+8jSAgIGV2ZW50CiAqIEByZXF1aXJlIGxpYi9jbGFzcy5qcwogKiBAcmVxdWlyZSBsaWIvdXRpbC5qcwogKiBAYXV0aG9yIG91cGVuZy1mZQogKiBAdmVyc2lvbiAxLjEKICovCjsoZnVuY3Rpb24obywgdW5kZWZpbmVkKSB7CgogICAgInVzZSBzdHJpY3QiOwoKICAgIC8qKgogICAgICog5a6a5LmJ5bqT5YaF5LqL5Lu25pSv5pKRCiAgICAgKiBAbmFtZXNwYWNlIG9jdG9wdXMuZXZlbnQKICAgICAqIEB0eXBlIHtvYmplY3R9CiAgICAgKi8KICAgIG8uZXZlbnQgPSB7CgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvYnNlcnZlcnMKICAgICAgICAgKiBAZGVzYyDkuIDkuKrnvJPlrZjkuovku7bnm5HlkKznmoRoYXNo6KGoCiAgICAgICAgICogQHR5cGUge29iamVjdH0KICAgICAgICAgKi8KICAgICAgICBvYnNlcnZlcnM6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5ldmVudC5lbGVtZW50CiAgICAgICAgICogQGRlc2Mg6L+U5Zue5LqL5Lu255qE6IqC54K5CiAgICAgICAgICogQHBhcmFtIGV2ZW50IHt3aW5kb3cuZXZlbnR9CiAgICAgICAgICogQHJldHVybiDop6blj5Hkuovku7bnmoToioLngrkge0RPTUVsZW1lbnR9CiAgICAgICAgICovCiAgICAgICAgZWxlbWVudDogZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50OwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5ldmVudC5pc1NpbmdsZVRvdWNoCiAgICAgICAgICogQGRlc2Mg5Yik5pat5piv5ZCm5Y2V54K5CiAgICAgICAgICogQHBhcmFtIGV2ZW50IHt3aW5kb3cuZXZlbnR9CiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBpc1NpbmdsZVRvdWNoOiBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgICByZXR1cm4gZXZlbnQudG91Y2hlcyAmJiBldmVudC50b3VjaGVzLmxlbmd0aCA9PSAxOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5ldmVudC5pc011bHRpVG91Y2gKICAgICAgICAgKiBAZGVzYyDliKTmlq3mmK/lkKblpJrngrkKICAgICAgICAgKiBAcGFyYW0gZXZlbnQge3dpbmRvdy5ldmVudH0KICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICAgICAqLwogICAgICAgIGlzTXVsdGlUb3VjaDogZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuIGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5ldmVudC5pc0xlZnRDbGljawogICAgICAgICAqIEBkZXNjIOWIpOaWreaYr+WQpuaYr+W3pumUrueCueWHuwogICAgICAgICAqIEBwYXJhbSBldmVudCB7d2luZG93LmV2ZW50fQogICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59CiAgICAgICAgICovCiAgICAgICAgaXNMZWZ0Q2xpY2s6IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgIHJldHVybiAhISgoKGV2ZW50LndoaWNoKSAmJiAoZXZlbnQud2hpY2ggPT0gMSkpIHx8CiAgICAgICAgICAgICAgICAoKGV2ZW50LmJ1dHRvbikgJiYgKGV2ZW50LmJ1dHRvbiA9PSAxKSkpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5ldmVudC5pc1JpZ2h0Q2xpY2sKICAgICAgICAgKiBAZGVzYyDliKTmlq3mmK/lkKblj7PplK7ngrnlh7sKICAgICAgICAgKiBAcGFyYW0gZXZlbnQge3dpbmRvdy5ldmVudH0KICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICAgICAqLwogICAgICAgIGlzUmlnaHRDbGljazogZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuICEhKCgoZXZlbnQud2hpY2gpICYmIChldmVudC53aGljaCA9PSAzKSkgfHwKICAgICAgICAgICAgICAgICgoZXZlbnQuYnV0dG9uKSAmJiAoZXZlbnQuYnV0dG9uID09IDIpKSk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmV2ZW50LnN0b3AKICAgICAgICAgKiBAZGVzYyDmiorkuovku7blgZzkuoYKICAgICAgICAgKiBAcGFyYW0gZXZlbnQge3dpbmRvdy5ldmVudH0KICAgICAgICAgKiBAcGFyYW0gYWxsb3dEZWZhdWx0IHtCb29sZWFufSAtICAg5piv5ZCm5oqK6buY6K6k5ZON5bqU5YGc5LqGCiAgICAgICAgICovCiAgICAgICAgc3RvcDogZnVuY3Rpb24oZXZlbnQsIGFsbG93RGVmYXVsdCkgewogICAgICAgICAgICBpZiAoIWFsbG93RGVmYXVsdCkgewogICAgICAgICAgICAgICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikgewogICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmV2ZW50LmZpbmRFbGVtZW50CiAgICAgICAgICogQGRlc2Mg5om+5Yiw6Kem5Y+R5LqL5Lu255qE6IqC54K5CiAgICAgICAgICogQHBhcmFtIGV2ZW50IHt3aW5kb3cuZXZlbnR9CiAgICAgICAgICogQHJldHVybiB7RE9NRWxlbWVudH0KICAgICAgICAgKi8KICAgICAgICBmaW5kRWxlbWVudDogZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBvLmV2ZW50LmVsZW1lbnQoZXZlbnQpOwogICAgICAgICAgICB3aGlsZSAoZWxlbWVudC5wYXJlbnROb2RlICYmICghZWxlbWVudC50YWdOYW1lIHx8CiAgICAgICAgICAgICAgICAoZWxlbWVudC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgIT0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpKSkpewogICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZWxlbWVudDsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuZXZlbnQub24KICAgICAgICAgKiBAZGVzYyDnm5HlkKzkuovku7YKICAgICAgICAgKiBAcGFyYW0gZG9tIHtTdHJpbmcgfCBET01FbGVtZW50fQogICAgICAgICAqIEBwYXJhbSBuYW1lIHtTdHJpbmd9CiAgICAgICAgICogQHBhcmFtIGZuIHtGdW5jdGlvbn0KICAgICAgICAgKiBAcGFyYW0gdXNlQ2FwdHVyZSB7Qm9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBvbjogZnVuY3Rpb24oZG9tLCBuYW1lLCBmbiwgdXNlQ2FwdHVyZSkgewogICAgICAgICAgICB2YXIgbmFtZXMgPSBuYW1lLnNwbGl0KCIgIiksCiAgICAgICAgICAgICAgICBsZW4gPSBuYW1lcy5sZW5ndGgsCiAgICAgICAgICAgICAgICBpID0gbGVuOwogICAgICAgICAgICBpZihsZW4gPT0gMCkgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB2YXIgZWxlbWVudCA9IG8uZyhkb20pLAogICAgICAgICAgICAgICAgdGhhdCA9IG8uZXZlbnQ7CiAgICAgICAgICAgIHVzZUNhcHR1cmUgPSB1c2VDYXB0dXJlIHx8IGZhbHNlOwogICAgICAgICAgICBpZighdGhhdC5vYnNlcnZlcnMpIHsKICAgICAgICAgICAgICAgIHRoYXQub2JzZXJ2ZXJzID0ge307CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoIWVsZW1lbnQuX2V2ZW50Q2FjaGVJRCkgewogICAgICAgICAgICAgICAgdmFyIGlkUHJlZml4ID0gImV2ZW50Q2FjaGVJRF8iOwogICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaWQpIHsKICAgICAgICAgICAgICAgICAgICBpZFByZWZpeCA9IGVsZW1lbnQuaWQgKyAiXyIgKyBpZFByZWZpeDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsZW1lbnQuX2V2ZW50Q2FjaGVJRCA9IG8udXRpbC5jcmVhdGVVbmlxdWVJRChpZFByZWZpeCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yKDsgaS0tOyApIHsKICAgICAgICAgICAgICAgIHRoYXQuX29uKGVsZW1lbnQsIG5hbWVzW2ldLCBmbiwgdXNlQ2FwdHVyZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuZXZlbnQuX29uCiAgICAgICAgICogQGRlc2Mg55uR5ZCs5LqL5Lu2CiAgICAgICAgICogQHBhcmFtIGVsIHtET01FbGVtZW50fQogICAgICAgICAqIEBwYXJhbSBuYW1lIHtTdHJpbmd9CiAgICAgICAgICogQHBhcmFtIGZuIHtGdW5jdGlvbn0KICAgICAgICAgKiBAcGFyYW0gdXNlQ2FwdHVyZSB7Qm9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBfb246IGZ1bmN0aW9uKGVsLCBuYW1lLCBmbiwgdXNlQ2FwdHVyZSkgewogICAgICAgICAgICBpZihuYW1lID09ICJvcnRjaGFuZ2UiKSB7CiAgICAgICAgICAgICAgICBuYW1lID0gIm9yaWVudGF0aW9uY2hhbmdlIiBpbiB3aW5kb3cgPyAib3JpZW50YXRpb25jaGFuZ2UiIDogInJlc2l6ZSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYobmFtZSA9PSAicmVhZHkiKSB7CiAgICAgICAgICAgICAgICBuYW1lID0gIkRPTUNvbnRlbnRMb2FkZWQiOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY2FjaGVJRCA9IGVsLl9ldmVudENhY2hlSUQsCiAgICAgICAgICAgICAgICB0aGF0ID0gby5ldmVudDsKICAgICAgICAgICAgaWYoIXRoYXQub2JzZXJ2ZXJzW2NhY2hlSURdKSB7CiAgICAgICAgICAgICAgICB0aGF0Lm9ic2VydmVyc1tjYWNoZUlEXSA9IFtdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoYXQub2JzZXJ2ZXJzW2NhY2hlSURdLnB1c2goewogICAgICAgICAgICAgICAgJ2VsZW1lbnQnOiBlbCwKICAgICAgICAgICAgICAgICduYW1lJzogbmFtZSwKICAgICAgICAgICAgICAgICdvYnNlcnZlcic6IGZuLAogICAgICAgICAgICAgICAgJ3VzZUNhcHR1cmUnOiB1c2VDYXB0dXJlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZihlbC5hZGRFdmVudExpc3RlbmVyKSB7CiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZuLCB1c2VDYXB0dXJlKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChlbC5hdHRhY2hFdmVudCkgewogICAgICAgICAgICAgICAgZWwuYXR0YWNoRXZlbnQoJ29uJyArIG5hbWUsIGZuKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5ldmVudC5zdG9wT2JzZXJ2aW5nRWxlbWVudAogICAgICAgICAqIEBkZXNjIOaKiuaMh+WumuiKgueCueeahOaJgOacieS6i+S7tuebkeWQrOWBnOaOiQogICAgICAgICAqIEBwYXJhbSBkb20ge0RPTUVsZW1lbnR9CiAgICAgICAgICovCiAgICAgICAgc3RvcE9ic2VydmluZ0VsZW1lbnQ6IGZ1bmN0aW9uKGRvbSkgewogICAgICAgICAgICB2YXIgZWxlbWVudCA9IG8uZyhkb20pOwogICAgICAgICAgICB2YXIgY2FjaGVJRCA9IGVsZW1lbnQuX2V2ZW50Q2FjaGVJRDsKICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRWxlbWVudE9ic2VydmVycyhvLmV2ZW50Lm9ic2VydmVyc1tjYWNoZUlEXSk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmV2ZW50LnN0b3BFdmVudE9ic2VydmVyCiAgICAgICAgICogQHBhcmFtIGRvbSB7RE9NRWxlbWVudH0KICAgICAgICAgKiBAcGFyYW0gZXZlbnQge1N0cmluZ30g5oyH5a6a5YGc5o6J55qE5LqL5Lu257G75Z6LCiAgICAgICAgICogQGRlc2Mg5q2k5pa55rOV5Lya5bCG5oyH5a6a6IqC54K55LiK55qE5oyH5a6a5pa55rOV55qE5omA5pyJ5LqL5Lu255uR5ZCs5YGc5o6JIOaFjueUqAogICAgICAgICAqLwogICAgICAgIHN0b3BFdmVudE9ic2VydmVyOiBmdW5jdGlvbihkb20sIGV2ZW50KSB7CiAgICAgICAgICAgIHZhciBjYWNoZUlEID0gby5nKGRvbSkuX2V2ZW50Q2FjaGVJRCwKICAgICAgICAgICAgICAgIHRoYXQgPSBvLmV2ZW50LAogICAgICAgICAgICAgICAgZWxlbWVudE9ic2VydmVycyA9IHRoYXQub2JzZXJ2ZXJzW2NhY2hlSURdOwogICAgICAgICAgICBpZiAoZWxlbWVudE9ic2VydmVycykgewogICAgICAgICAgICAgICAgdmFyIGkgPSBlbGVtZW50T2JzZXJ2ZXJzLmxlbmd0aDsKICAgICAgICAgICAgICAgIGZvcig7IGktLTsgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gZWxlbWVudE9ic2VydmVyc1tpXTsKICAgICAgICAgICAgICAgICAgICBpZihldmVudCA9PSBlbnRyeS5uYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGVudHJ5LmVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkub2JzZXJ2ZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS51c2VDYXB0dXJlKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51bi5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBtZXRob2QgX3JlbW92ZUVsZW1lbnRPYnNlcnZlcnMKICAgICAgICAgKiBAZGVzY+WFt+S9k+WBmuS6i+aDheeahOaWueazlQogICAgICAgICAqIEBwYXJhbSBlbGVtZW50T2JzZXJ2ZXJzIHtBcnJheX0g5LiA5aCG5LqL5Lu257yT5a2Y5a+56LGhCiAgICAgICAgICovCiAgICAgICAgX3JlbW92ZUVsZW1lbnRPYnNlcnZlcnM6IGZ1bmN0aW9uKGVsZW1lbnRPYnNlcnZlcnMpIHsKICAgICAgICAgICAgaWYgKGVsZW1lbnRPYnNlcnZlcnMpIHsKICAgICAgICAgICAgICAgIHZhciBpID0gIGVsZW1lbnRPYnNlcnZlcnMubGVuZ3RoOwogICAgICAgICAgICAgICAgZm9yKCA7IGktLTsgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gZWxlbWVudE9ic2VydmVyc1tpXTsKICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShlbnRyeS5lbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5vYnNlcnZlciwKICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkudXNlQ2FwdHVyZSk7CiAgICAgICAgICAgICAgICAgICAgby5ldmVudC51bi5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5ldmVudC51bgogICAgICAgICAqIEBkZXNjIOWNleWIoOS4gOS4quaMh+WumuS6i+S7tuebkeWQrAogICAgICAgICAqIEBwYXJhbSBkb20ge1N0cmluZyB8IERPTUVsZW1lbnR9CiAgICAgICAgICogQHBhcmFtIG5hbWUge1N0cmluZ30KICAgICAgICAgKiBAcGFyYW0gZm4ge0Z1bmN0aW9ufQogICAgICAgICAqIEBwYXJhbSB1c2VDYXB0dXJlIHtCb29sZWFufQogICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IOi/lOWbnuino+mZpOebkeWQrOaYr+WQpuaIkOWKnwogICAgICAgICAqLwogICAgICAgIHVuOiBmdW5jdGlvbihkb20sIG5hbWUsIGZuLCB1c2VDYXB0dXJlKSB7CiAgICAgICAgICAgIHZhciBuYW1lcyA9IG5hbWUuc3BsaXQoIiAiKSwKICAgICAgICAgICAgICAgIGxlbiA9IG5hbWVzLmxlbmd0aCwKICAgICAgICAgICAgICAgIGkgPSBsZW47CiAgICAgICAgICAgIGlmKGxlbiA9PSAwKSAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gby5nKGRvbSksCiAgICAgICAgICAgICAgICBjYWNoZUlEID0gZWxlbWVudC5fZXZlbnRDYWNoZUlELAogICAgICAgICAgICAgICAgZm91bmRFbnRyeSA9IGZhbHNlOwogICAgICAgICAgICB1c2VDYXB0dXJlID0gdXNlQ2FwdHVyZSB8fCBmYWxzZTsKICAgICAgICAgICAgZm9yKDsgaS0tOyApIHsKICAgICAgICAgICAgICAgIGZvdW5kRW50cnkgPSBvLmV2ZW50Ll91bihlbGVtZW50LCBuYW1lc1tpXSwgZm4sIHVzZUNhcHR1cmUsIGNhY2hlSUQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmb3VuZEVudHJ5OwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLmV2ZW50LnVuCiAgICAgICAgICogQGRlc2Mg5Y2V5Yig5LiA5Liq5oyH5a6a5LqL5Lu255uR5ZCsCiAgICAgICAgICogQHBhcmFtIGVsIHtET01FbGVtZW50fQogICAgICAgICAqIEBwYXJhbSBuYW1lIHtTdHJpbmd9CiAgICAgICAgICogQHBhcmFtIGZuIHtGdW5jdGlvbn0KICAgICAgICAgKiBAcGFyYW0gdXNlQ2FwdHVyZSB7Qm9vbGVhbn0KICAgICAgICAgKiBAcGFyYW0gaWQge1N0cmluZ30KICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufSDov5Tlm57op6PpmaTnm5HlkKzmmK/lkKbmiJDlip8KICAgICAgICAgKi8KICAgICAgICBfdW46IGZ1bmN0aW9uKGVsLCBuYW1lLCBmbiwgdXNlQ2FwdHVyZSwgaWQpIHsKICAgICAgICAgICAgaWYobmFtZSA9PSAib3J0Y2hhbmdlIikgewogICAgICAgICAgICAgICAgbmFtZSA9ICJvcmllbnRhdGlvbmNoYW5nZSIgaW4gd2luZG93ID8gIm9yaWVudGF0aW9uY2hhbmdlIiA6ICJyZXNpemUiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKG5hbWUgPT0gInJlYWR5IikgewogICAgICAgICAgICAgICAgbmFtZSA9ICJET01Db250ZW50TG9hZGVkIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZihuYW1lID09ICdrZXlwcmVzcycpIHsKICAgICAgICAgICAgICAgIGlmICggbmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goL0tvbnF1ZXJvcnxTYWZhcml8S0hUTUwvKSB8fAogICAgICAgICAgICAgICAgICAgIGVsLmRldGFjaEV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSA9ICdrZXlkb3duJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgZm91bmRFbnRyeSA9IGZhbHNlLAogICAgICAgICAgICAgICAgZWxlbWVudE9ic2VydmVycyA9IG8uZXZlbnQub2JzZXJ2ZXJzW2lkXTsKICAgICAgICAgICAgaWYgKGVsZW1lbnRPYnNlcnZlcnMpIHsKICAgICAgICAgICAgICAgIHZhciBpPTA7CiAgICAgICAgICAgICAgICB3aGlsZSghZm91bmRFbnRyeSAmJiBpIDwgZWxlbWVudE9ic2VydmVycy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgY2FjaGVFbnRyeSA9IGVsZW1lbnRPYnNlcnZlcnNbaV07CiAgICAgICAgICAgICAgICAgICAgaWYgKChjYWNoZUVudHJ5Lm5hbWUgPT0gbmFtZSkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgKGNhY2hlRW50cnkub2JzZXJ2ZXIgPT0gZm4pICYmCiAgICAgICAgICAgICAgICAgICAgICAgIChjYWNoZUVudHJ5LnVzZUNhcHR1cmUgPT0gdXNlQ2FwdHVyZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudE9ic2VydmVycy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50T2JzZXJ2ZXJzLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmV2ZW50Lm9ic2VydmVyc1tpZF0gPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kRW50cnkgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChmb3VuZEVudHJ5KSB7CiAgICAgICAgICAgICAgICBpZiAoZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcikgewogICAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgZm4sIHVzZUNhcHR1cmUpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbCAmJiBlbC5kZXRhY2hFdmVudCkgewogICAgICAgICAgICAgICAgICAgIGVsLmRldGFjaEV2ZW50KCdvbicgKyBuYW1lLCBmbik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZvdW5kRW50cnk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IHVubG9hZENhY2hlCiAgICAgICAgICogQGRlc2Mg6aG16Z2i6ZSA5q+B55qE5pe25YCZ5biM5pyb5Y+v5Lul6YeK5pS+5o6J5omA5pyJ55uR5ZCsCiAgICAgICAgICovCiAgICAgICAgdW5sb2FkQ2FjaGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoby5ldmVudCAmJiBvLmV2ZW50Lm9ic2VydmVycykgewogICAgICAgICAgICAgICAgZm9yICh2YXIgY2FjaGVJRCBpbiBvLmV2ZW50Lm9ic2VydmVycykgewogICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50T2JzZXJ2ZXJzID0gby5ldmVudC5vYnNlcnZlcnNbY2FjaGVJRF07CiAgICAgICAgICAgICAgICAgICAgby5ldmVudC5fcmVtb3ZlRWxlbWVudE9ic2VydmVycy5hcHBseSh0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICBbZWxlbWVudE9ic2VydmVyc10pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgby5ldmVudC5vYnNlcnZlcnMgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07CgogICAgby5ldmVudC5vbih3aW5kb3csICJ1bmxvYWQiLCBvLmV2ZW50LnVubG9hZENhY2hlLCBmYWxzZSk7CgogICAgLyoqCiAgICAgKiBAY2xhc3Mgb2N0b3B1cy5FdmVudHMKICAgICAqIEBkZXNjIOiHquWumuS5ieS6i+S7tuexuwogICAgICogQHBhcmFtIG9iamVjdCB7T2JqZWN0fSDop4Llr5/orqLpmIXkuovku7bnmoTlr7nosaEg5b+F6ZyACiAgICAgKiBAcGFyYW0gZWxlbWVudCB7RE9NRWxlbWVudH0g5LiA5Liq5ZON5bqU5rWP6KeI5Zmo5LqL5Lu255qEZG9tIOmdnuW/hemcgCDlpoLmnpzmjIflrprkuobmraTlgLwg5YiZ6KGo56S66KaB5a+56K+l6IqC54K56L+b6KGM5LiA5qyh5oOo57ud5Lq65a+w55qE5bCB6KOFCiAgICAgKiBAcGFyYW0gZmFsbFRocm91Z2gge0Jvb2xlYW59CiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fQogICAgICovCiAgICBvLkV2ZW50cyA9IG8uZGVmaW5lKHsKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAY29uc3RhbnQgb2N0b3B1cy5FdmVudHMuQlJPV1NFUl9FVkVOVFMKICAgICAgICAgKiBAZGVzYyDluLjop4TnmoTmtY/op4jlmajkuovku7YKICAgICAgICAgKi8KICAgICAgICBCUk9XU0VSX0VWRU5UUzogWwogICAgICAgICAgICAibW91c2VvdmVyIiwgIm1vdXNlb3V0IiwgIm1vdXNlZG93biIsICJtb3VzZXVwIiwgIm1vdXNlbW92ZSIsCiAgICAgICAgICAgICJjbGljayIsICJkYmxjbGljayIsICJyaWdodGNsaWNrIiwgImRibHJpZ2h0Y2xpY2siLAogICAgICAgICAgICAicmVzaXplIiwKICAgICAgICAgICAgImZvY3VzIiwgImJsdXIiLAogICAgICAgICAgICAidG91Y2hzdGFydCIsICJ0b3VjaG1vdmUiLCAidG91Y2hlbmQiLAogICAgICAgICAgICAia2V5ZG93biIKICAgICAgICBdLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSBsaXN0ZW5lcnMKICAgICAgICAgKiBAdHlwZSB7b2JqZWN0fQogICAgICAgICAqIEBkZXNjIOS6i+S7tuebkeWQrOeahGhhc2jooagKICAgICAgICAgKi8KICAgICAgICBsaXN0ZW5lcnM6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IG9iagogICAgICAgICAqIEB0eXBlIHtvYmplY3R9CiAgICAgICAgICogQGRlc2Mg5LqL5Lu25a+56LGh5omA5bGe55qE5Li75L2TCiAgICAgICAgICovCiAgICAgICAgb2JqOiBudWxsLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSBlbAogICAgICAgICAqIEB0eXBlIHtET01FTGVtZW50fQogICAgICAgICAqIEBkZXNjIOS6i+S7tue7keWumueahOiKgueCuQogICAgICAgICAqLwogICAgICAgIGVsOiBudWxsLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSBldmVudEhhbmRsZXIKICAgICAgICAgKiBAZGVzYyDnu5HlrprlnKjoioLngrnkuIrnmoTop6blj5Hlh73mlbAKICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259CiAgICAgICAgICovCiAgICAgICAgZXZlbnRIYW5kbGVyOiBudWxsLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSBmYWxsVGhyb3VnaAogICAgICAgICAqIEBkZXNjIOS6i+S7tuaYr+WQpuWFgeiuuOS8oOaSrQogICAgICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICAgICAqLwogICAgICAgIGZhbGxUaHJvdWdoOiBmYWxzZSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgZXh0ZW5zaW9ucwogICAgICAgICAqIEB0eXBlIHtPYmplY3R9CiAgICAgICAgICogQGRlc2Mg5omA5pyJ6KKr5rOo5YaM55qE5paw55qE6Ieq5a6a5LmJ5LqL5Lu26ZyA6KaB6L+Z5Liq5a6e5L6LCiAgICAgICAgICog6Ieq5a6a5LmJ5LqL5Lu25piv5oyH5LulT3VwZW5nLkV2ZW50cy4q5byA5aS055qE6Ieq5a6a5LmJ5LqL5Lu2CiAgICAgICAgICoga2V55Li66Ieq5a6a5LmJ5LqL5Lu25ZCN5aaCdGFwIHZhbHVl5Li66Ieq5a6a5LmJ5LqL5Lu25aaCT3VwZW5nLkV2ZW50cy5UYXAg5Y+q5piv5Li+5Liq5L6L5a2Q5LiN55So5aSq6K6k55yfCiAgICAgICAgICovCiAgICAgICAgZXh0ZW5zaW9uczogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgZXh0ZW5zaW9uQ291bnQKICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICAgICAqIEBkZXNjIGtleeaYr+iHquWumuS5ieS6i+S7tueahGtleSB2YWx1ZeaYr2hhbmRsZXLnmoTkuKrmlbAKICAgICAgICAgKi8KICAgICAgICBleHRlbnNpb25Db3VudDogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAY29uc3RydWN0b3M6IG9jdG9wdXMuRXZlbnRzLmluaXRpYWxpemUKICAgICAgICAgKiBAcGFyYW0gb2JqIHtPYmplY3R9IOinguWvn+iuoumYheS6i+S7tueahOWvueixoSDlv4XpnIAKICAgICAgICAgKiBAcGFyYW0gZWwge0RPTUVsZW1lbnR9IOS4gOS4quWTjeW6lOa1j+iniOWZqOS6i+S7tueahGRvbSDpnZ7lv4XpnIAg5aaC5p6c5oyH5a6a5LqG5q2k5YC8IOWImeihqOekuuimgeWvueivpeiKgueCuei/m+ihjOS4gOasoeaDqOe7neS6uuWvsOeahOWwgeijhQogICAgICAgICAqIEBwYXJhbSBmYWxsVGhyb3VnaCB7Qm9vbGVhbn0KICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fQogICAgICAgICAqLwogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9iaiwgZWwsIGZhbGxUaHJvdWdoLCBvcHRpb25zKSB7CiAgICAgICAgICAgIG8uZXh0ZW5kKHRoaXMsIG9wdGlvbnMpOwogICAgICAgICAgICB0aGlzLm9iaiA9IG9iajsKICAgICAgICAgICAgdGhpcy5mYWxsVGhyb3VnaCA9IGZhbGxUaHJvdWdoOwogICAgICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9OwogICAgICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSB7fTsKICAgICAgICAgICAgdGhpcy5leHRlbnNpb25Db3VudCA9IHt9OwogICAgICAgICAgICBpZiAoZWwgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgdGhpcy5hdHRhY2hUb0VsZW1lbnQoZWwpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLkV2ZW50cy5kZXN0cm95CiAgICAgICAgICogQHB1YmxpYwogICAgICAgICAqIEBkZXNjIOWIm+W7uueahOS6i+S7tuWvueixoeiHquaIkeino+iEsQogICAgICAgICAqLwogICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgZm9yICh2YXIgZSBpbiB0aGlzLmV4dGVuc2lvbnMpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5leHRlbnNpb25zW2VdICE9PSAiYm9vbGVhbiIpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmV4dGVuc2lvbnNbZV0uZGVzdHJveSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IG51bGw7CiAgICAgICAgICAgIGlmICh0aGlzLmVsKSB7CiAgICAgICAgICAgICAgICBvLmV2ZW50LnN0b3BPYnNlcnZpbmdFbGVtZW50KHRoaXMuZWwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuZWwgPSBudWxsOwogICAgICAgICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGw7CiAgICAgICAgICAgIHRoaXMub2JqID0gbnVsbDsKICAgICAgICAgICAgdGhpcy5mYWxsVGhyb3VnaCA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuZXZlbnRIYW5kbGVyID0gbnVsbDsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBtZXRob2QgYXR0YWNoVG9FbGVtZW50CiAgICAgICAgICogQHBhcmFtIGVsIHtET01FbGVtZW50fQogICAgICAgICAqLwogICAgICAgIGF0dGFjaFRvRWxlbWVudDogZnVuY3Rpb24oZWwpIHsKICAgICAgICAgICAgaWYgKHRoaXMuZWwpIHsKICAgICAgICAgICAgICAgIG8uZXZlbnQuc3RvcE9ic2VydmluZ0VsZW1lbnQodGhpcy5lbCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50SGFuZGxlciA9IG8udXRpbC5iaW5kQXNFdmVudExpc3RlbmVyKAogICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQnJvd3NlckV2ZW50LCB0aGlzCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuZWwgPSBlbDsKICAgICAgICAgICAgdmFyIGkgPSAwLAogICAgICAgICAgICAgICAgbGVuID0gdGhpcy5CUk9XU0VSX0VWRU5UUy5sZW5ndGg7CiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIG8uZXZlbnQub24oZWwsIHRoaXMuQlJPV1NFUl9FVkVOVFNbaV0sIHRoaXMuZXZlbnRIYW5kbGVyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyDkuI3ljrvmjolpZeS4i+S8mjLmjokKICAgICAgICAgICAgby5ldmVudC5vbihlbCwgImRyYWdzdGFydCIsIG8uZXZlbnQuc3RvcCk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAbWV0aG9kIGhhbmRsZUJyb3dzZXJFdmVudAogICAgICAgICAqIEBkZXNjIOWcqOaMh+WummRvbeiKgueCueeahOaDheWGteS4iyDlsIHoo4Xor6Vkb23op6blj5HnmoRldmVudOWxnuaApwogICAgICAgICAqLwogICAgICAgIGhhbmRsZUJyb3dzZXJFdmVudDogZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICAgIHZhciB0eXBlID0gZXZ0LnR5cGUsCiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1t0eXBlXTsKICAgICAgICAgICAgaWYoIWxpc3RlbmVycyB8fCBsaXN0ZW5lcnMubGVuZ3RoID09IDApIHJldHVybjsKICAgICAgICAgICAgdmFyIHRvdWNoZXMgPSBldnQudG91Y2hlczsKICAgICAgICAgICAgaWYgKHRvdWNoZXMgJiYgdG91Y2hlc1swXSkgewogICAgICAgICAgICAgICAgdmFyIHggPSAwLAogICAgICAgICAgICAgICAgICAgIHkgPSAwLAogICAgICAgICAgICAgICAgICAgIG51bSA9IHRvdWNoZXMubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgIHRvdWNoLAogICAgICAgICAgICAgICAgICAgIGkgPSAwOwogICAgICAgICAgICAgICAgZm9yICg7IGkgPCBudW07ICsraSkgewogICAgICAgICAgICAgICAgICAgIHRvdWNoID0gdG91Y2hlc1tpXTsKICAgICAgICAgICAgICAgICAgICB4ICs9IHRvdWNoLmNsaWVudFg7CiAgICAgICAgICAgICAgICAgICAgeSArPSB0b3VjaC5jbGllbnRZOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZXZ0LmNsaWVudFggPSB4IC8gbnVtOwogICAgICAgICAgICAgICAgZXZ0LmNsaWVudFkgPSB5IC8gbnVtOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KHR5cGUsIGV2dCk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLkV2ZW50cy5vbgogICAgICAgICAqIEBwdWJsaWMKICAgICAgICAgKiBAZGVzYyDmt7vliqDoh6rlrprkuYnkuovku7bnm5HlkKwKICAgICAgICAgKiBAcGFyYW0gdHlwZSB7U3RyaW5nfSDkuovku7bnsbvlnosKICAgICAgICAgKiBAcGFyYW0gZnVuYyB7RnVuY3Rpb259IOWbnuiwgwogICAgICAgICAqIEBwYXJhbSBvYmoge09iamVjdH0g5LqL5Lu257uR5a6a55qE5a+56LGhIOm7mOiupOS4unRoaXMub2JqZWN0CiAgICAgICAgICogQHBhcmFtIHByaW9yaXR5IHtCb29sZWFuIHwgT2JqZWN0fSDkuLp0cnVl5pe2IOWwhuWinuWKoOeahOWbnuiwg+aJlOWcqOinpuWPkeWbnuiwg+mYn+WIl+eahOmYn+WktCDlj6/ku6XnkIbop6PkuLrkvKrlkIzmraUKICAgICAgICAgKi8KICAgICAgICBvbjogZnVuY3Rpb24odHlwZSwgZnVuYywgb2JqLCBwcmlvcml0eSkgewogICAgICAgICAgICBpZiAodHlwZSBpbiBvLkV2ZW50cyAmJiAhdGhpcy5leHRlbnNpb25zW3R5cGVdKSB7CiAgICAgICAgICAgICAgICB0aGlzLmV4dGVuc2lvbnNbdHlwZV0gPSBuZXcgby5FdmVudHNbdHlwZV0odGhpcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaWYgKG9iaiA9PSBudWxsIHx8IG9iaiA9PSB1bmRlZmluZWQpICB7CiAgICAgICAgICAgICAgICAgICAgb2JqID0gdGhpcy5vYmo7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07CiAgICAgICAgICAgICAgICBpZiAoIWxpc3RlbmVycykgewogICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycyA9IFtdOwogICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXJzOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uQ291bnRbdHlwZV0gPSAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0ge29iajogb2JqLCBmdW5jOiBmdW5jfTsKICAgICAgICAgICAgICAgIGlmIChwcmlvcml0eSkgewogICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UodGhpcy5leHRlbnNpb25Db3VudFt0eXBlXSwgMCwgbGlzdGVuZXIpOwogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJpb3JpdHkgPT09ICJvYmplY3QiICYmIHByaW9yaXR5LmV4dGVuc2lvbikgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4dGVuc2lvbkNvdW50W3R5cGVdKys7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuRXZlbnRzLnVuCiAgICAgICAgICogQHB1YmxpYwogICAgICAgICAqIEBkZXNjIOWPlua2iOiHquWumuS5ieS6i+S7tueahOebkeWQrAogICAgICAgICAqIEBwYXJhbSB0eXBlIHtTdHJpbmd9IOS6i+S7tuexu+WeiwogICAgICAgICAqIEBwYXJhbSBmdW5jIHtGdW5jdGlvbn0g6Kem5Y+R5Zue6LCDCiAgICAgICAgICogQHBhcmFtIG9iaiB7T2JqZWN0fSDpu5jorqToh6rouqsKICAgICAgICAgKi8KICAgICAgICB1bjogZnVuY3Rpb24odHlwZSwgZnVuYywgb2JqKSB7CiAgICAgICAgICAgIGlmIChvYmogPT0gbnVsbCkgIHsKICAgICAgICAgICAgICAgIG9iaiA9IHRoaXMub2JqOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1t0eXBlXTsKICAgICAgICAgICAgaWYgKGxpc3RlbmVycyAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTAsIGxlbj1saXN0ZW5lcnMubGVuZ3RoOyBpPGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vYmogPT0gb2JqICYmIGxpc3RlbmVyc1tpXS5mdW5jID09IGZ1bmMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLkV2ZW50cy50cmlnZ2VyRXZlbnQKICAgICAgICAgKiBAZGVzYyDop6blj5Hkuovku7YKICAgICAgICAgKiBAcGFyYW0gdHlwZSB7U3RyaW5nfSDop6blj5Hkuovku7bnsbvlnosKICAgICAgICAgKiBAcGFyYW0gZXZ0IHtldmVudH0KICAgICAgICAgKi8KICAgICAgICB0cmlnZ2VyRXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIGV2dCkgewogICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07CiAgICAgICAgICAgIGlmKCFsaXN0ZW5lcnMgfHwgbGlzdGVuZXJzLmxlbmd0aCA9PSAwKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgICBpZiAoZXZ0ID09IG51bGwpIHsKICAgICAgICAgICAgICAgIGV2dCA9IHt9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV2dC5vYmogPSB0aGlzLm9iajsKICAgICAgICAgICAgZXZ0LmVsID0gdGhpcy5lbDsKICAgICAgICAgICAgaWYoIWV2dC50eXBlKSB7CiAgICAgICAgICAgICAgICBldnQudHlwZSA9IHR5cGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9jbG9uZeS4gOS7vQogICAgICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKTsKICAgICAgICAgICAgdmFyIGNvbnRpbnVlQ2hhaW4sCiAgICAgICAgICAgICAgICBpID0gMCwKICAgICAgICAgICAgICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7CiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGxpc3RlbmVyc1tpXTsKICAgICAgICAgICAgICAgIC8vIGJpbmQgdGhlIGNvbnRleHQgdG8gY2FsbGJhY2sub2JqCiAgICAgICAgICAgICAgICBjb250aW51ZUNoYWluID0gY2FsbGJhY2suZnVuYy5hcHBseShjYWxsYmFjay5vYmosIFtldnRdKTsKICAgICAgICAgICAgICAgIGlmIChjb250aW51ZUNoYWluID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOi/lOWbnuWAvOS4umZhbHNl6KGo56S65Zue6LCD5Yiw5q2k5Li65q2iCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCF0aGlzLmZhbGxUaHJvdWdoKSB7CiAgICAgICAgICAgICAgICBvLmV2ZW50LnN0b3AoZXZ0LCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY29udGludWVDaGFpbjsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuRXZlbnRzLnJlbW92ZQogICAgICAgICAqIEBwdWJsaWMKICAgICAgICAgKiBAZGVzYyDnm7TmjqXmiormjIflrprkuovku7bnsbvlnovnmoTnm5HlkKzlm57osIPnva7nqboKICAgICAgICAgKiBAcGFyYW0gdHlwZSB7U3RyaW5nfQogICAgICAgICAqLwogICAgICAgIHJlbW92ZTogZnVuY3Rpb24odHlwZSkgewogICAgICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnNbdHlwZV0gIT0gbnVsbCkgewogICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0gPSBbXTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5FdmVudHMucmVnaXN0ZXIKICAgICAgICAgKiBAZGVzYyDmibnph4/lop7liqDkuovku7YKICAgICAgICAgKiBAcGFyYW0gZXZzIHtPYmplY3R9CiAgICAgICAgICovCiAgICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uKGV2cykgewogICAgICAgICAgICBmb3IodmFyIHR5cGUgaW4gZXZzKSB7CiAgICAgICAgICAgICAgICBpZih0eXBlICE9ICJzY29wZSIgJiYgZXZzLmhhc093blByb3BlcnR5KHR5cGUpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbih0eXBlLCBldnNbdHlwZV0sIGV2cy5zY29wZSwgZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLkV2ZW50cy51bnJlZ2lzdGVyCiAgICAgICAgICogQGRlc2Mg5om56YeP5Y676Zmk5LqL5Lu2CiAgICAgICAgICogQHBhcmFtIGV2cyB7T2JqZWN0fQogICAgICAgICAqLwogICAgICAgIHVucmVnaXN0ZXI6IGZ1bmN0aW9uKGV2cykgewogICAgICAgICAgICBmb3IodmFyIHR5cGUgaW4gZXZzKSB7CiAgICAgICAgICAgICAgICBpZih0eXBlICE9ICJzY29wZSIgJiYgZXZzLmhhc093blByb3BlcnR5KHR5cGUpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy51bih0eXBlLCBldnNbdHlwZV0sIGV2cy5zY29wZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBDTEFTU19OQU1FOiAiT2N0b3B1cy5FdmVudHMiCiAgICB9KTsKfSkob2N0b3B1cyk7LyoqCiAqIOebtOaOpeW8leeUqGhhbW1lcgogKi8KCjsoZnVuY3Rpb24obywgdW5kZWZpbmVkKSB7CiAgICAndXNlIHN0cmljdCc7CgogICAgdmFyIEhhbW1lciA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHsKICAgICAgICByZXR1cm4gbmV3IEhhbW1lci5JbnN0YW5jZShlbGVtZW50LCBvcHRpb25zIHx8IHt9KTsKICAgIH07CgogICAgSGFtbWVyLmRlZmF1bHRzID0gewogICAgICAgIC8vIGFkZCBzdHlsZXMgYW5kIGF0dHJpYnV0ZXMgdG8gdGhlIGVsZW1lbnQgdG8gcHJldmVudCB0aGUgYnJvd3NlciBmcm9tIGRvaW5nCiAgICAgICAgLy8gaXRzIG5hdGl2ZSBiZWhhdmlvci4gdGhpcyBkb2VzbnQgcHJldmVudCB0aGUgc2Nyb2xsaW5nLCBidXQgY2FuY2VscwogICAgICAgIC8vIHRoZSBjb250ZXh0bWVudSwgdGFwIGhpZ2hsaWdodGluZyBldGMKICAgICAgICAvLyBzZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0aGlzCiAgICAgICAgc3RvcF9icm93c2VyX2JlaGF2aW9yOiB7CiAgICAgICAgICAgIC8vIHRoaXMgYWxzbyB0cmlnZ2VycyBvbnNlbGVjdHN0YXJ0PWZhbHNlIGZvciBJRQogICAgICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsCiAgICAgICAgICAgIC8vIHRoaXMgbWFrZXMgdGhlIGVsZW1lbnQgYmxvY2tpbmcgaW4gSUUxMCA+LCB5b3UgY291bGQgZXhwZXJpbWVudCB3aXRoIHRoZSB2YWx1ZQogICAgICAgICAgICAvLyBzZWUgZm9yIG1vcmUgb3B0aW9ucyB0aGlzIGlzc3VlOyBodHRwczovL2dpdGh1Yi5jb20vRWlnaHRNZWRpYS9oYW1tZXIuanMvaXNzdWVzLzI0MQogICAgICAgICAgICB0b3VjaEFjdGlvbjogJ25vbmUnLAogICAgICAgICAgICB0b3VjaENhbGxvdXQ6ICdub25lJywKICAgICAgICAgICAgY29udGVudFpvb21pbmc6ICdub25lJywKICAgICAgICAgICAgdXNlckRyYWc6ICdub25lJywKICAgICAgICAgICAgdGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsMCwwLDApJwogICAgICAgIH0KCiAgICAgICAgLy8gbW9yZSBzZXR0aW5ncyBhcmUgZGVmaW5lZCBwZXIgZ2VzdHVyZSBhdCBnZXN0dXJlcy5qcwogICAgfTsKCi8vIGRldGVjdCB0b3VjaGV2ZW50cwogICAgSGFtbWVyLkhBU19QT0lOVEVSRVZFTlRTID0gbmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkIHx8IG5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkOwogICAgSGFtbWVyLkhBU19UT1VDSEVWRU5UUyA9ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpOwoKLy8gZG9udCB1c2UgbW91c2VldmVudHMgb24gbW9iaWxlIGRldmljZXMKICAgIEhhbW1lci5NT0JJTEVfUkVHRVggPSAvbW9iaWxlfHRhYmxldHxpcChhZHxob25lfG9kKXxhbmRyb2lkL2k7CiAgICBIYW1tZXIuTk9fTU9VU0VFVkVOVFMgPSBIYW1tZXIuSEFTX1RPVUNIRVZFTlRTICYmIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goSGFtbWVyLk1PQklMRV9SRUdFWCk7CgovLyBldmVudHR5cGVzIHBlciB0b3VjaGV2ZW50IChzdGFydCwgbW92ZSwgZW5kKQovLyBhcmUgZmlsbGVkIGJ5IEhhbW1lci5ldmVudC5kZXRlcm1pbmVFdmVudFR5cGVzIG9uIHNldHVwCiAgICBIYW1tZXIuRVZFTlRfVFlQRVMgPSB7fTsKCi8vIGRpcmVjdGlvbiBkZWZpbmVzCiAgICBIYW1tZXIuRElSRUNUSU9OX0RPV04gPSAnZG93bic7CiAgICBIYW1tZXIuRElSRUNUSU9OX0xFRlQgPSAnbGVmdCc7CiAgICBIYW1tZXIuRElSRUNUSU9OX1VQID0gJ3VwJzsKICAgIEhhbW1lci5ESVJFQ1RJT05fUklHSFQgPSAncmlnaHQnOwoKLy8gcG9pbnRlciB0eXBlCiAgICBIYW1tZXIuUE9JTlRFUl9NT1VTRSA9ICdtb3VzZSc7CiAgICBIYW1tZXIuUE9JTlRFUl9UT1VDSCA9ICd0b3VjaCc7CiAgICBIYW1tZXIuUE9JTlRFUl9QRU4gPSAncGVuJzsKCi8vIHRvdWNoIGV2ZW50IGRlZmluZXMKICAgIEhhbW1lci5FVkVOVF9TVEFSVCA9ICdzdGFydCc7CiAgICBIYW1tZXIuRVZFTlRfTU9WRSA9ICdtb3ZlJzsKICAgIEhhbW1lci5FVkVOVF9FTkQgPSAnZW5kJzsKCi8vIGhhbW1lciBkb2N1bWVudCB3aGVyZSB0aGUgYmFzZSBldmVudHMgYXJlIGFkZGVkIGF0CiAgICBIYW1tZXIuRE9DVU1FTlQgPSBkb2N1bWVudDsKCi8vIHBsdWdpbnMgbmFtZXNwYWNlCiAgICBIYW1tZXIucGx1Z2lucyA9IHt9OwoKLy8gaWYgdGhlIHdpbmRvdyBldmVudHMgYXJlIHNldC4uLgogICAgSGFtbWVyLlJFQURZID0gZmFsc2U7CgogICAgLyoqCiAgICAgKiBzZXR1cCBldmVudHMgdG8gZGV0ZWN0IGdlc3R1cmVzIG9uIHRoZSBkb2N1bWVudAogICAgICovCiAgICBmdW5jdGlvbiBzZXR1cCgpIHsKICAgICAgICBpZihIYW1tZXIuUkVBRFkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgLy8gZmluZCB3aGF0IGV2ZW50dHlwZXMgd2UgYWRkIGxpc3RlbmVycyB0bwogICAgICAgIEhhbW1lci5ldmVudC5kZXRlcm1pbmVFdmVudFR5cGVzKCk7CgogICAgICAgIC8vIFJlZ2lzdGVyIGFsbCBnZXN0dXJlcyBpbnNpZGUgSGFtbWVyLmdlc3R1cmVzCiAgICAgICAgZm9yKHZhciBuYW1lIGluIEhhbW1lci5nZXN0dXJlcykgewogICAgICAgICAgICBpZihIYW1tZXIuZ2VzdHVyZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgICAgIEhhbW1lci5kZXRlY3Rpb24ucmVnaXN0ZXIoSGFtbWVyLmdlc3R1cmVzW25hbWVdKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gQWRkIHRvdWNoIGV2ZW50cyBvbiB0aGUgZG9jdW1lbnQKICAgICAgICBIYW1tZXIuZXZlbnQub25Ub3VjaChIYW1tZXIuRE9DVU1FTlQsIEhhbW1lci5FVkVOVF9NT1ZFLCBIYW1tZXIuZGV0ZWN0aW9uLmRldGVjdCk7CiAgICAgICAgSGFtbWVyLmV2ZW50Lm9uVG91Y2goSGFtbWVyLkRPQ1VNRU5ULCBIYW1tZXIuRVZFTlRfRU5ELCBIYW1tZXIuZGV0ZWN0aW9uLmRldGVjdCk7CgogICAgICAgIC8vIEhhbW1lciBpcyByZWFkeS4uLiEKICAgICAgICBIYW1tZXIuUkVBRFkgPSB0cnVlOwogICAgfQoKICAgIEhhbW1lci5JbnN0YW5jZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICAgIC8vIHNldHVwIEhhbW1lckpTIHdpbmRvdyBldmVudHMgYW5kIHJlZ2lzdGVyIGFsbCBnZXN0dXJlcwogICAgICAgIC8vIHRoaXMgYWxzbyBzZXRzIHVwIHRoZSBkZWZhdWx0IG9wdGlvbnMKICAgICAgICBzZXR1cCgpOwoKICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50OwoKICAgICAgICAvLyBzdGFydC9zdG9wIGRldGVjdGlvbiBvcHRpb24KICAgICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlOwoKICAgICAgICAvLyBtZXJnZSBvcHRpb25zCiAgICAgICAgdGhpcy5vcHRpb25zID0gSGFtbWVyLnV0aWxzLmV4dGVuZCgKICAgICAgICAgICAgSGFtbWVyLnV0aWxzLmV4dGVuZCh7fSwgSGFtbWVyLmRlZmF1bHRzKSwKICAgICAgICAgICAgb3B0aW9ucyB8fCB7fSk7CgogICAgICAgIC8vIGFkZCBzb21lIGNzcyB0byB0aGUgZWxlbWVudCB0byBwcmV2ZW50IHRoZSBicm93c2VyIGZyb20gZG9pbmcgaXRzIG5hdGl2ZSBiZWhhdm9pcgogICAgICAgIGlmKHRoaXMub3B0aW9ucy5zdG9wX2Jyb3dzZXJfYmVoYXZpb3IpIHsKICAgICAgICAgICAgSGFtbWVyLnV0aWxzLnN0b3BEZWZhdWx0QnJvd3NlckJlaGF2aW9yKHRoaXMuZWxlbWVudCwgdGhpcy5vcHRpb25zLnN0b3BfYnJvd3Nlcl9iZWhhdmlvcik7CiAgICAgICAgfQoKICAgICAgICAvLyBzdGFydCBkZXRlY3Rpb24gb24gdG91Y2hzdGFydAogICAgICAgIEhhbW1lci5ldmVudC5vblRvdWNoKGVsZW1lbnQsIEhhbW1lci5FVkVOVF9TVEFSVCwgZnVuY3Rpb24oZXYpIHsKICAgICAgICAgICAgaWYoc2VsZi5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBIYW1tZXIuZGV0ZWN0aW9uLnN0YXJ0RGV0ZWN0KHNlbGYsIGV2KTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvLyByZXR1cm4gaW5zdGFuY2UKICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CgoKICAgIEhhbW1lci5JbnN0YW5jZS5wcm90b3R5cGUgPSB7CiAgICAgICAgLyoqCiAgICAgICAgICogYmluZCBldmVudHMgdG8gdGhlIGluc3RhbmNlCiAgICAgICAgICogQHBhcmFtICAge1N0cmluZ30gICAgICBnZXN0dXJlCiAgICAgICAgICogQHBhcmFtICAge0Z1bmN0aW9ufSAgICBoYW5kbGVyCiAgICAgICAgICogQHJldHVybnMge0hhbW1lci5JbnN0YW5jZX0KICAgICAgICAgKi8KICAgICAgICBvbjogZnVuY3Rpb24gb25FdmVudChnZXN0dXJlLCBoYW5kbGVyKXsKICAgICAgICAgICAgdmFyIGdlc3R1cmVzID0gZ2VzdHVyZS5zcGxpdCgnICcpOwogICAgICAgICAgICBmb3IodmFyIHQ9MDsgdDxnZXN0dXJlcy5sZW5ndGg7IHQrKykgewogICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZ2VzdHVyZXNbdF0sIGhhbmRsZXIsIGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogdW5iaW5kIGV2ZW50cyB0byB0aGUgaW5zdGFuY2UKICAgICAgICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgIGdlc3R1cmUKICAgICAgICAgKiBAcGFyYW0gICB7RnVuY3Rpb259ICAgIGhhbmRsZXIKICAgICAgICAgKiBAcmV0dXJucyB7SGFtbWVyLkluc3RhbmNlfQogICAgICAgICAqLwogICAgICAgIG9mZjogZnVuY3Rpb24gb2ZmRXZlbnQoZ2VzdHVyZSwgaGFuZGxlcil7CiAgICAgICAgICAgIHZhciBnZXN0dXJlcyA9IGdlc3R1cmUuc3BsaXQoJyAnKTsKICAgICAgICAgICAgZm9yKHZhciB0PTA7IHQ8Z2VzdHVyZXMubGVuZ3RoOyB0KyspIHsKICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGdlc3R1cmVzW3RdLCBoYW5kbGVyLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCgogICAgICAgIC8qKgogICAgICAgICAqIHRyaWdnZXIgZ2VzdHVyZSBldmVudAogICAgICAgICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgZ2VzdHVyZQogICAgICAgICAqIEBwYXJhbSAgIHtPYmplY3R9ICAgICAgZXZlbnREYXRhCiAgICAgICAgICogQHJldHVybnMge0hhbW1lci5JbnN0YW5jZX0KICAgICAgICAgKi8KICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyRXZlbnQoZ2VzdHVyZSwgZXZlbnREYXRhKXsKICAgICAgICAgICAgLy8gY3JlYXRlIERPTSBldmVudAogICAgICAgICAgICB2YXIgZXZlbnQgPSBIYW1tZXIuRE9DVU1FTlQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7CiAgICAgICAgICAgIGV2ZW50LmluaXRFdmVudChnZXN0dXJlLCB0cnVlLCB0cnVlKTsKICAgICAgICAgICAgZXZlbnQuZ2VzdHVyZSA9IGV2ZW50RGF0YTsKCiAgICAgICAgICAgIC8vIHRyaWdnZXIgb24gdGhlIHRhcmdldCBpZiBpdCBpcyBpbiB0aGUgaW5zdGFuY2UgZWxlbWVudCwKICAgICAgICAgICAgLy8gdGhpcyBpcyBmb3IgZXZlbnQgZGVsZWdhdGlvbiB0cmlja3MKICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7CiAgICAgICAgICAgIGlmKEhhbW1lci51dGlscy5oYXNQYXJlbnQoZXZlbnREYXRhLnRhcmdldCwgZWxlbWVudCkpIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBldmVudERhdGEudGFyZ2V0OwogICAgICAgICAgICB9CgogICAgICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogZW5hYmxlIG9mIGRpc2FibGUgaGFtbWVyLmpzIGRldGVjdGlvbgogICAgICAgICAqIEBwYXJhbSAgIHtCb29sZWFufSAgIHN0YXRlCiAgICAgICAgICogQHJldHVybnMge0hhbW1lci5JbnN0YW5jZX0KICAgICAgICAgKi8KICAgICAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZShzdGF0ZSkgewogICAgICAgICAgICB0aGlzLmVuYWJsZWQgPSBzdGF0ZTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIHRoaXMgaG9sZHMgdGhlIGxhc3QgbW92ZSBldmVudCwKICAgICAqIHVzZWQgdG8gZml4IGVtcHR5IHRvdWNoZW5kIGlzc3VlCiAgICAgKiBzZWUgdGhlIG9uVG91Y2ggZXZlbnQgZm9yIGFuIGV4cGxhbmF0aW9uCiAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICovCiAgICB2YXIgbGFzdF9tb3ZlX2V2ZW50ID0gbnVsbDsKCgogICAgLyoqCiAgICAgKiB3aGVuIHRoZSBtb3VzZSBpcyBob2xkIGRvd24sIHRoaXMgaXMgdHJ1ZQogICAgICogQHR5cGUge0Jvb2xlYW59CiAgICAgKi8KICAgIHZhciBlbmFibGVfZGV0ZWN0ID0gZmFsc2U7CgoKICAgIC8qKgogICAgICogd2hlbiB0b3VjaCBldmVudHMgaGF2ZSBiZWVuIGZpcmVkLCB0aGlzIGlzIHRydWUKICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICovCiAgICB2YXIgdG91Y2hfdHJpZ2dlcmVkID0gZmFsc2U7CgoKICAgIEhhbW1lci5ldmVudCA9IHsKICAgICAgICAvKioKICAgICAgICAgKiBzaW1wbGUgYWRkRXZlbnRMaXN0ZW5lcgogICAgICAgICAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gICBlbGVtZW50CiAgICAgICAgICogQHBhcmFtICAge1N0cmluZ30gICAgICAgIHR5cGUKICAgICAgICAgKiBAcGFyYW0gICB7RnVuY3Rpb259ICAgICAgaGFuZGxlcgogICAgICAgICAqLwogICAgICAgIGJpbmREb206IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGhhbmRsZXIpIHsKICAgICAgICAgICAgdmFyIHR5cGVzID0gdHlwZS5zcGxpdCgnICcpOwogICAgICAgICAgICBmb3IodmFyIHQ9MDsgdDx0eXBlcy5sZW5ndGg7IHQrKykgewogICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGVzW3RdLCBoYW5kbGVyLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogdG91Y2ggZXZlbnRzIHdpdGggbW91c2UgZmFsbGJhY2sKICAgICAgICAgKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9ICAgZWxlbWVudAogICAgICAgICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgICBldmVudFR5cGUgICAgICAgIGxpa2UgSGFtbWVyLkVWRU5UX01PVkUKICAgICAgICAgKiBAcGFyYW0gICB7RnVuY3Rpb259ICAgICAgaGFuZGxlcgogICAgICAgICAqLwogICAgICAgIG9uVG91Y2g6IGZ1bmN0aW9uIG9uVG91Y2goZWxlbWVudCwgZXZlbnRUeXBlLCBoYW5kbGVyKSB7CiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAgICAgICAgIHRoaXMuYmluZERvbShlbGVtZW50LCBIYW1tZXIuRVZFTlRfVFlQRVNbZXZlbnRUeXBlXSwgZnVuY3Rpb24gYmluZERvbU9uVG91Y2goZXYpIHsKICAgICAgICAgICAgICAgIHZhciBzb3VyY2VFdmVudFR5cGUgPSBldi50eXBlLnRvTG93ZXJDYXNlKCk7CgogICAgICAgICAgICAgICAgLy8gb25tb3VzZXVwLCBidXQgd2hlbiB0b3VjaGVuZCBoYXMgYmVlbiBmaXJlZCB3ZSBkbyBub3RoaW5nLgogICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBmb3IgdG91Y2hkZXZpY2VzIHdoaWNoIGFsc28gZmlyZSBhIG1vdXNldXAgb24gdG91Y2hlbmQKICAgICAgICAgICAgICAgIGlmKHNvdXJjZUV2ZW50VHlwZS5tYXRjaCgvbW91c2UvKSAmJiB0b3VjaF90cmlnZ2VyZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gbW91c2VidXR0b24gbXVzdCBiZSBkb3duIG9yIGEgdG91Y2ggZXZlbnQKICAgICAgICAgICAgICAgIGVsc2UgaWYoIHNvdXJjZUV2ZW50VHlwZS5tYXRjaCgvdG91Y2gvKSB8fCAgIC8vIHRvdWNoIGV2ZW50cyBhcmUgYWx3YXlzIG9uIHNjcmVlbgogICAgICAgICAgICAgICAgICAgIHNvdXJjZUV2ZW50VHlwZS5tYXRjaCgvcG9pbnRlcmRvd24vKSB8fCAvLyBwb2ludGVyZXZlbnRzIHRvdWNoCiAgICAgICAgICAgICAgICAgICAgKHNvdXJjZUV2ZW50VHlwZS5tYXRjaCgvbW91c2UvKSAmJiBldi53aGljaCA9PT0gMSkgICAvLyBtb3VzZSBpcyBwcmVzc2VkCiAgICAgICAgICAgICAgICAgICAgKXsKICAgICAgICAgICAgICAgICAgICBlbmFibGVfZGV0ZWN0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgaW4gYSB0b3VjaCBldmVudCwgc2V0IHRoZSB0b3VjaCB0cmlnZ2VyZWQgYm9vbCB0byB0cnVlLAogICAgICAgICAgICAgICAgLy8gdGhpcyBmb3IgdGhlIGNvbmZsaWN0cyB0aGF0IG1heSBvY2N1ciBvbiBpb3MgYW5kIGFuZHJvaWQKICAgICAgICAgICAgICAgIGlmKHNvdXJjZUV2ZW50VHlwZS5tYXRjaCgvdG91Y2h8cG9pbnRlci8pKSB7CiAgICAgICAgICAgICAgICAgICAgdG91Y2hfdHJpZ2dlcmVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBjb3VudCB0aGUgdG90YWwgdG91Y2hlcyBvbiB0aGUgc2NyZWVuCiAgICAgICAgICAgICAgICB2YXIgY291bnRfdG91Y2hlcyA9IDA7CgogICAgICAgICAgICAgICAgLy8gd2hlbiB0b3VjaCBoYXMgYmVlbiB0cmlnZ2VyZWQgaW4gdGhpcyBkZXRlY3Rpb24gc2Vzc2lvbgogICAgICAgICAgICAgICAgLy8gYW5kIHdlIGFyZSBub3cgaGFuZGxpbmcgYSBtb3VzZSBldmVudCwgd2Ugc3RvcCB0aGF0IHRvIHByZXZlbnQgY29uZmxpY3RzCiAgICAgICAgICAgICAgICBpZihlbmFibGVfZGV0ZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHBvaW50ZXJldmVudAogICAgICAgICAgICAgICAgICAgIGlmKEhhbW1lci5IQVNfUE9JTlRFUkVWRU5UUyAmJiBldmVudFR5cGUgIT0gSGFtbWVyLkVWRU5UX0VORCkgewogICAgICAgICAgICAgICAgICAgICAgICBjb3VudF90b3VjaGVzID0gSGFtbWVyLlBvaW50ZXJFdmVudC51cGRhdGVQb2ludGVyKGV2ZW50VHlwZSwgZXYpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvLyB0b3VjaAogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoc291cmNlRXZlbnRUeXBlLm1hdGNoKC90b3VjaC8pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50X3RvdWNoZXMgPSBldi50b3VjaGVzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8gbW91c2UKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKCF0b3VjaF90cmlnZ2VyZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY291bnRfdG91Y2hlcyA9IHNvdXJjZUV2ZW50VHlwZS5tYXRjaCgvdXAvKSA/IDAgOiAxOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgYXJlIGluIGEgZW5kIGV2ZW50LCBidXQgd2hlbiB3ZSByZW1vdmUgb25lIHRvdWNoIGFuZAogICAgICAgICAgICAgICAgICAgIC8vIHdlIHN0aWxsIGhhdmUgZW5vdWdoLCBzZXQgZXZlbnRUeXBlIHRvIG1vdmUKICAgICAgICAgICAgICAgICAgICBpZihjb3VudF90b3VjaGVzID4gMCAmJiBldmVudFR5cGUgPT0gSGFtbWVyLkVWRU5UX0VORCkgewogICAgICAgICAgICAgICAgICAgICAgICBldmVudFR5cGUgPSBIYW1tZXIuRVZFTlRfTU9WRTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8gbm8gdG91Y2hlcywgZm9yY2UgdGhlIGVuZCBldmVudAogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoIWNvdW50X3RvdWNoZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gSGFtbWVyLkVWRU5UX0VORDsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgdG91Y2hlbmQgaGFzIG5vIHRvdWNoZXMsIGFuZCB3ZSBvZnRlbiB3YW50IHRvIHVzZSB0aGVzZSBpbiBvdXIgZ2VzdHVyZXMsCiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc2VuZCB0aGUgbGFzdCBtb3ZlIGV2ZW50IGFzIG91ciBldmVudERhdGEgaW4gdG91Y2hlbmQKICAgICAgICAgICAgICAgICAgICBpZighY291bnRfdG91Y2hlcyAmJiBsYXN0X21vdmVfZXZlbnQgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXYgPSBsYXN0X21vdmVfZXZlbnQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlIHRoZSBsYXN0IG1vdmUgZXZlbnQKICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9tb3ZlX2V2ZW50ID0gZXY7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIHRoZSBoYW5kbGVyCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKEhhbW1lci5kZXRlY3Rpb24sIHNlbGYuY29sbGVjdEV2ZW50RGF0YShlbGVtZW50LCBldmVudFR5cGUsIGV2KSk7CgogICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBwb2ludGVyZXZlbnQgZnJvbSBsaXN0CiAgICAgICAgICAgICAgICAgICAgaWYoSGFtbWVyLkhBU19QT0lOVEVSRVZFTlRTICYmIGV2ZW50VHlwZSA9PSBIYW1tZXIuRVZFTlRfRU5EKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50X3RvdWNoZXMgPSBIYW1tZXIuUG9pbnRlckV2ZW50LnVwZGF0ZVBvaW50ZXIoZXZlbnRUeXBlLCBldik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vZGVidWcoc291cmNlRXZlbnRUeXBlICsiICIrIGV2ZW50VHlwZSk7CgogICAgICAgICAgICAgICAgLy8gb24gdGhlIGVuZCB3ZSByZXNldCBldmVyeXRoaW5nCiAgICAgICAgICAgICAgICBpZighY291bnRfdG91Y2hlcykgewogICAgICAgICAgICAgICAgICAgIGxhc3RfbW92ZV9ldmVudCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgZW5hYmxlX2RldGVjdCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIHRvdWNoX3RyaWdnZXJlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIEhhbW1lci5Qb2ludGVyRXZlbnQucmVzZXQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCgogICAgICAgIC8qKgogICAgICAgICAqIHdlIGhhdmUgZGlmZmVyZW50IGV2ZW50cyBmb3IgZWFjaCBkZXZpY2UvYnJvd3NlcgogICAgICAgICAqIGRldGVybWluZSB3aGF0IHdlIG5lZWQgYW5kIHNldCB0aGVtIGluIHRoZSBIYW1tZXIuRVZFTlRfVFlQRVMgY29uc3RhbnQKICAgICAgICAgKi8KICAgICAgICBkZXRlcm1pbmVFdmVudFR5cGVzOiBmdW5jdGlvbiBkZXRlcm1pbmVFdmVudFR5cGVzKCkgewogICAgICAgICAgICAvLyBkZXRlcm1pbmUgdGhlIGV2ZW50dHlwZSB3ZSB3YW50IHRvIHNldAogICAgICAgICAgICB2YXIgdHlwZXM7CgogICAgICAgICAgICAvLyBwb2ludGVyRXZlbnRzIG1hZ2ljCiAgICAgICAgICAgIGlmKEhhbW1lci5IQVNfUE9JTlRFUkVWRU5UUykgewogICAgICAgICAgICAgICAgdHlwZXMgPSBIYW1tZXIuUG9pbnRlckV2ZW50LmdldEV2ZW50cygpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIG9uIEFuZHJvaWQsIGlPUywgYmxhY2tiZXJyeSwgd2luZG93cyBtb2JpbGUgd2UgZG9udCB3YW50IGFueSBtb3VzZWV2ZW50cwogICAgICAgICAgICBlbHNlIGlmKEhhbW1lci5OT19NT1VTRUVWRU5UUykgewogICAgICAgICAgICAgICAgdHlwZXMgPSBbCiAgICAgICAgICAgICAgICAgICAgJ3RvdWNoc3RhcnQnLAogICAgICAgICAgICAgICAgICAgICd0b3VjaG1vdmUnLAogICAgICAgICAgICAgICAgICAgICd0b3VjaGVuZCB0b3VjaGNhbmNlbCddOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGZvciBub24gcG9pbnRlciBldmVudHMgYnJvd3NlcnMgYW5kIG1peGVkIGJyb3dzZXJzLAogICAgICAgICAgICAvLyBsaWtlIGNocm9tZSBvbiB3aW5kb3dzOCB0b3VjaCBsYXB0b3AKICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICB0eXBlcyA9IFsKICAgICAgICAgICAgICAgICAgICAndG91Y2hzdGFydCBtb3VzZWRvd24nLAogICAgICAgICAgICAgICAgICAgICd0b3VjaG1vdmUgbW91c2Vtb3ZlJywKICAgICAgICAgICAgICAgICAgICAndG91Y2hlbmQgdG91Y2hjYW5jZWwgbW91c2V1cCddOwogICAgICAgICAgICB9CgogICAgICAgICAgICBIYW1tZXIuRVZFTlRfVFlQRVNbSGFtbWVyLkVWRU5UX1NUQVJUXSAgPSB0eXBlc1swXTsKICAgICAgICAgICAgSGFtbWVyLkVWRU5UX1RZUEVTW0hhbW1lci5FVkVOVF9NT1ZFXSAgID0gdHlwZXNbMV07CiAgICAgICAgICAgIEhhbW1lci5FVkVOVF9UWVBFU1tIYW1tZXIuRVZFTlRfRU5EXSAgICA9IHR5cGVzWzJdOwogICAgICAgIH0sCgoKICAgICAgICAvKioKICAgICAgICAgKiBjcmVhdGUgdG91Y2hsaXN0IGRlcGVuZGluZyBvbiB0aGUgZXZlbnQKICAgICAgICAgKiBAcGFyYW0gICB7T2JqZWN0fSAgICBldgogICAgICAgICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgIGV2ZW50VHlwZSAgIHVzZWQgYnkgdGhlIGZha2VtdWx0aXRvdWNoIHBsdWdpbgogICAgICAgICAqLwogICAgICAgIGdldFRvdWNoTGlzdDogZnVuY3Rpb24gZ2V0VG91Y2hMaXN0KGV2LyosIGV2ZW50VHlwZSovKSB7CiAgICAgICAgICAgIC8vIGdldCB0aGUgZmFrZSBwb2ludGVyRXZlbnQgdG91Y2hsaXN0CiAgICAgICAgICAgIGlmKEhhbW1lci5IQVNfUE9JTlRFUkVWRU5UUykgewogICAgICAgICAgICAgICAgcmV0dXJuIEhhbW1lci5Qb2ludGVyRXZlbnQuZ2V0VG91Y2hMaXN0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gZ2V0IHRoZSB0b3VjaGxpc3QKICAgICAgICAgICAgZWxzZSBpZihldi50b3VjaGVzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXYudG91Y2hlczsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBtYWtlIGZha2UgdG91Y2hsaXN0IGZyb20gbW91c2UgcG9zaXRpb24KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gW3sKICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyOiAxLAogICAgICAgICAgICAgICAgICAgIHBhZ2VYOiBldi5wYWdlWCwKICAgICAgICAgICAgICAgICAgICBwYWdlWTogZXYucGFnZVksCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBldi50YXJnZXQKICAgICAgICAgICAgICAgIH1dOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCgogICAgICAgIC8qKgogICAgICAgICAqIGNvbGxlY3QgZXZlbnQgZGF0YSBmb3IgSGFtbWVyIGpzCiAgICAgICAgICogQHBhcmFtICAge0hUTUxFbGVtZW50fSAgIGVsZW1lbnQKICAgICAgICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICAgZXZlbnRUeXBlICAgICAgICBsaWtlIEhhbW1lci5FVkVOVF9NT1ZFCiAgICAgICAgICogQHBhcmFtICAge09iamVjdH0gICAgICAgIGV2ZW50RGF0YQogICAgICAgICAqLwogICAgICAgIGNvbGxlY3RFdmVudERhdGE6IGZ1bmN0aW9uIGNvbGxlY3RFdmVudERhdGEoZWxlbWVudCwgZXZlbnRUeXBlLCBldikgewogICAgICAgICAgICB2YXIgdG91Y2hlcyA9IHRoaXMuZ2V0VG91Y2hMaXN0KGV2LCBldmVudFR5cGUpOwoKICAgICAgICAgICAgLy8gZmluZCBvdXQgcG9pbnRlclR5cGUKICAgICAgICAgICAgdmFyIHBvaW50ZXJUeXBlID0gSGFtbWVyLlBPSU5URVJfVE9VQ0g7CiAgICAgICAgICAgIGlmKGV2LnR5cGUubWF0Y2goL21vdXNlLykgfHwgSGFtbWVyLlBvaW50ZXJFdmVudC5tYXRjaFR5cGUoSGFtbWVyLlBPSU5URVJfTU9VU0UsIGV2KSkgewogICAgICAgICAgICAgICAgcG9pbnRlclR5cGUgPSBIYW1tZXIuUE9JTlRFUl9NT1VTRTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGNlbnRlciAgICAgIDogby51dGlsLmdldENlbnRlcih0b3VjaGVzKSwKICAgICAgICAgICAgICAgIHRpbWVTdGFtcCAgIDogbmV3IERhdGUoKS5nZXRUaW1lKCksCiAgICAgICAgICAgICAgICB0YXJnZXQgICAgICA6IGV2LnRhcmdldCwKICAgICAgICAgICAgICAgIHRvdWNoZXMgICAgIDogdG91Y2hlcywKICAgICAgICAgICAgICAgIGV2ZW50VHlwZSAgIDogZXZlbnRUeXBlLAogICAgICAgICAgICAgICAgcG9pbnRlclR5cGUgOiBwb2ludGVyVHlwZSwKICAgICAgICAgICAgICAgIHNyY0V2ZW50ICAgIDogZXYsCgoKICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnNyY0V2ZW50LnByZXZlbnRNYW5pcHVsYXRpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcmNFdmVudC5wcmV2ZW50TWFuaXB1bGF0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnNyY0V2ZW50LnByZXZlbnREZWZhdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcmNFdmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgc3RvcERldGVjdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhhbW1lci5kZXRlY3Rpb24uc3RvcERldGVjdCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgIH0KICAgIH07CgogICAgSGFtbWVyLlBvaW50ZXJFdmVudCA9IHsKICAgICAgICAvKioKICAgICAgICAgKiBob2xkcyBhbGwgcG9pbnRlcnMKICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICAgICAqLwogICAgICAgIHBvaW50ZXJzOiB7fSwKCiAgICAgICAgLyoqCiAgICAgICAgICogZ2V0IGEgbGlzdCBvZiBwb2ludGVycwogICAgICAgICAqIEByZXR1cm5zIHtBcnJheX0gICAgIHRvdWNobGlzdAogICAgICAgICAqLwogICAgICAgIGdldFRvdWNoTGlzdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgdmFyIHRvdWNobGlzdCA9IFtdOwoKICAgICAgICAgICAgLy8gd2UgY2FuIHVzZSBmb3JFYWNoIHNpbmNlIHBvaW50ZXJFdmVudHMgb25seSBpcyBpbiBJRTEwCiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNlbGYucG9pbnRlcnMpLnNvcnQoKS5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7CiAgICAgICAgICAgICAgICB0b3VjaGxpc3QucHVzaChzZWxmLnBvaW50ZXJzW2lkXSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gdG91Y2hsaXN0OwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIHVwZGF0ZSB0aGUgcG9zaXRpb24gb2YgYSBwb2ludGVyCiAgICAgICAgICogQHBhcmFtICAge1N0cmluZ30gICB0eXBlICAgICAgICAgICAgIEhhbW1lci5FVkVOVF9FTkQKICAgICAgICAgKiBAcGFyYW0gICB7T2JqZWN0fSAgIHBvaW50ZXJFdmVudAogICAgICAgICAqLwogICAgICAgIHVwZGF0ZVBvaW50ZXI6IGZ1bmN0aW9uKHR5cGUsIHBvaW50ZXJFdmVudCkgewogICAgICAgICAgICBpZih0eXBlID09IEhhbW1lci5FVkVOVF9FTkQpIHsKICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlcnMgPSB7fTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHBvaW50ZXJFdmVudC5pZGVudGlmaWVyID0gcG9pbnRlckV2ZW50LnBvaW50ZXJJZDsKICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlcnNbcG9pbnRlckV2ZW50LnBvaW50ZXJJZF0gPSBwb2ludGVyRXZlbnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnBvaW50ZXJzKS5sZW5ndGg7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogY2hlY2sgaWYgZXYgbWF0Y2hlcyBwb2ludGVydHlwZQogICAgICAgICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgICBwb2ludGVyVHlwZSAgICAgSGFtbWVyLlBPSU5URVJfTU9VU0UKICAgICAgICAgKiBAcGFyYW0gICB7UG9pbnRlckV2ZW50fSAgZXYKICAgICAgICAgKi8KICAgICAgICBtYXRjaFR5cGU6IGZ1bmN0aW9uKHBvaW50ZXJUeXBlLCBldikgewogICAgICAgICAgICBpZighZXYucG9pbnRlclR5cGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHR5cGVzID0ge307CiAgICAgICAgICAgIHR5cGVzW0hhbW1lci5QT0lOVEVSX01PVVNFXSA9IChldi5wb2ludGVyVHlwZSA9PSBldi5NU1BPSU5URVJfVFlQRV9NT1VTRSB8fCBldi5wb2ludGVyVHlwZSA9PSBIYW1tZXIuUE9JTlRFUl9NT1VTRSk7CiAgICAgICAgICAgIHR5cGVzW0hhbW1lci5QT0lOVEVSX1RPVUNIXSA9IChldi5wb2ludGVyVHlwZSA9PSBldi5NU1BPSU5URVJfVFlQRV9UT1VDSCB8fCBldi5wb2ludGVyVHlwZSA9PSBIYW1tZXIuUE9JTlRFUl9UT1VDSCk7CiAgICAgICAgICAgIHR5cGVzW0hhbW1lci5QT0lOVEVSX1BFTl0gPSAoZXYucG9pbnRlclR5cGUgPT0gZXYuTVNQT0lOVEVSX1RZUEVfUEVOIHx8IGV2LnBvaW50ZXJUeXBlID09IEhhbW1lci5QT0lOVEVSX1BFTik7CiAgICAgICAgICAgIHJldHVybiB0eXBlc1twb2ludGVyVHlwZV07CiAgICAgICAgfSwKCgogICAgICAgIC8qKgogICAgICAgICAqIGdldCBldmVudHMKICAgICAgICAgKi8KICAgICAgICBnZXRFdmVudHM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgJ3BvaW50ZXJkb3duIE1TUG9pbnRlckRvd24nLAogICAgICAgICAgICAgICAgJ3BvaW50ZXJtb3ZlIE1TUG9pbnRlck1vdmUnLAogICAgICAgICAgICAgICAgJ3BvaW50ZXJ1cCBwb2ludGVyY2FuY2VsIE1TUG9pbnRlclVwIE1TUG9pbnRlckNhbmNlbCcKICAgICAgICAgICAgXTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiByZXNldCB0aGUgbGlzdAogICAgICAgICAqLwogICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5wb2ludGVycyA9IHt9OwogICAgICAgIH0KICAgIH07CgoKICAgIEhhbW1lci51dGlscyA9IHsKICAgICAgICAvKioKICAgICAgICAgKiBleHRlbmQgbWV0aG9kLAogICAgICAgICAqIGFsc28gdXNlZCBmb3IgY2xvbmluZyB3aGVuIGRlc3QgaXMgYW4gZW1wdHkgb2JqZWN0CiAgICAgICAgICogQHBhcmFtICAge09iamVjdH0gICAgZGVzdAogICAgICAgICAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIHNyYwogICAgICAgICAqIEBwYXJtCXtCb29sZWFufQltZXJnZQkJZG8gYSBtZXJnZQogICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9ICAgIGRlc3QKICAgICAgICAgKi8KICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChkZXN0LCBzcmMsIG1lcmdlKSB7CiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHsKICAgICAgICAgICAgICAgIGlmKGRlc3Rba2V5XSAhPT0gdW5kZWZpbmVkICYmIG1lcmdlKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkZXN0W2tleV0gPSBzcmNba2V5XTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZGVzdDsKICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogZmluZCBpZiBhIG5vZGUgaXMgaW4gdGhlIGdpdmVuIHBhcmVudAogICAgICAgICAqIHVzZWQgZm9yIGV2ZW50IGRlbGVnYXRpb24gdHJpY2tzCiAgICAgICAgICogQHBhcmFtICAge0hUTUxFbGVtZW50fSAgIG5vZGUKICAgICAgICAgKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9ICAgcGFyZW50CiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59ICAgICAgIGhhc19wYXJlbnQKICAgICAgICAgKi8KICAgICAgICBoYXNQYXJlbnQ6IGZ1bmN0aW9uKG5vZGUsIHBhcmVudCkgewogICAgICAgICAgICB3aGlsZShub2RlKXsKICAgICAgICAgICAgICAgIGlmKG5vZGUgPT0gcGFyZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogYm9vbGVhbiBpZiB0aGUgZGlyZWN0aW9uIGlzIHZlcnRpY2FsCiAgICAgICAgICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGRpcmVjdGlvbgogICAgICAgICAqIEByZXR1cm5zICB7Qm9vbGVhbn0gICBpc192ZXJ0aWNhbAogICAgICAgICAqLwogICAgICAgIGlzVmVydGljYWw6IGZ1bmN0aW9uIGlzVmVydGljYWwoZGlyZWN0aW9uKSB7CiAgICAgICAgICAgIHJldHVybiAoZGlyZWN0aW9uID09IEhhbW1lci5ESVJFQ1RJT05fVVAgfHwgZGlyZWN0aW9uID09IEhhbW1lci5ESVJFQ1RJT05fRE9XTik7CiAgICAgICAgfSwKCgogICAgICAgIC8qKgogICAgICAgICAqIHN0b3AgYnJvd3NlciBkZWZhdWx0IGJlaGF2aW9yIHdpdGggY3NzIHByb3BzCiAgICAgICAgICogQHBhcmFtICAge0h0bWxFbGVtZW50fSAgIGVsZW1lbnQKICAgICAgICAgKiBAcGFyYW0gICB7T2JqZWN0fSAgICAgICAgY3NzX3Byb3BzCiAgICAgICAgICovCiAgICAgICAgc3RvcERlZmF1bHRCcm93c2VyQmVoYXZpb3I6IGZ1bmN0aW9uIHN0b3BEZWZhdWx0QnJvd3NlckJlaGF2aW9yKGVsZW1lbnQsIGNzc19wcm9wcykgewogICAgICAgICAgICB2YXIgcHJvcCwKICAgICAgICAgICAgICAgIHZlbmRvcnMgPSBbJ3dlYmtpdCcsJ2todG1sJywnbW96JywnbXMnLCdvJywnJ107CgogICAgICAgICAgICBpZighY3NzX3Byb3BzIHx8ICFlbGVtZW50LnN0eWxlKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHdpdGggY3NzIHByb3BlcnRpZXMgZm9yIG1vZGVybiBicm93c2VycwogICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgZm9yKHZhciBwIGluIGNzc19wcm9wcykgewogICAgICAgICAgICAgICAgICAgIGlmKGNzc19wcm9wcy5oYXNPd25Qcm9wZXJ0eShwKSkgewogICAgICAgICAgICAgICAgICAgICAgICBwcm9wID0gcDsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZlbmRlciBwcmVmaXggYXQgdGhlIHByb3BlcnR5CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZlbmRvcnNbaV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3AgPSB2ZW5kb3JzW2ldICsgcHJvcC5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIHByb3Auc3Vic3RyaW5nKDEpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIHN0eWxlCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBjc3NfcHJvcHNbcF07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBhbHNvIHRoZSBkaXNhYmxlIG9uc2VsZWN0c3RhcnQKICAgICAgICAgICAgaWYoY3NzX3Byb3BzLnVzZXJTZWxlY3QgPT0gJ25vbmUnKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50Lm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKCiAgICBIYW1tZXIuZGV0ZWN0aW9uID0gewogICAgICAgIC8vIGNvbnRhaW5zIGFsbCByZWdpc3RyZWQgSGFtbWVyLmdlc3R1cmVzIGluIHRoZSBjb3JyZWN0IG9yZGVyCiAgICAgICAgZ2VzdHVyZXM6IFtdLAoKICAgICAgICAvLyBkYXRhIG9mIHRoZSBjdXJyZW50IEhhbW1lci5nZXN0dXJlIGRldGVjdGlvbiBzZXNzaW9uCiAgICAgICAgY3VycmVudDogbnVsbCwKCiAgICAgICAgLy8gdGhlIHByZXZpb3VzIEhhbW1lci5nZXN0dXJlIHNlc3Npb24gZGF0YQogICAgICAgIC8vIGlzIGEgZnVsbCBjbG9uZSBvZiB0aGUgcHJldmlvdXMgZ2VzdHVyZS5jdXJyZW50IG9iamVjdAogICAgICAgIHByZXZpb3VzOiBudWxsLAoKICAgICAgICAvLyB3aGVuIHRoaXMgYmVjb21lcyB0cnVlLCBubyBnZXN0dXJlcyBhcmUgZmlyZWQKICAgICAgICBzdG9wcGVkOiBmYWxzZSwKCgogICAgICAgIC8qKgogICAgICAgICAqIHN0YXJ0IEhhbW1lci5nZXN0dXJlIGRldGVjdGlvbgogICAgICAgICAqIEBwYXJhbSAgIHtIYW1tZXIuSW5zdGFuY2V9ICAgaW5zdAogICAgICAgICAqIEBwYXJhbSAgIHtPYmplY3R9ICAgICAgICAgICAgZXZlbnREYXRhCiAgICAgICAgICovCiAgICAgICAgc3RhcnREZXRlY3Q6IGZ1bmN0aW9uIHN0YXJ0RGV0ZWN0KGluc3QsIGV2ZW50RGF0YSkgewogICAgICAgICAgICAvLyBhbHJlYWR5IGJ1c3kgd2l0aCBhIEhhbW1lci5nZXN0dXJlIGRldGVjdGlvbiBvbiBhbiBlbGVtZW50CiAgICAgICAgICAgIGlmKHRoaXMuY3VycmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTsKCiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHsKICAgICAgICAgICAgICAgIGluc3QgICAgICAgIDogaW5zdCwgLy8gcmVmZXJlbmNlIHRvIEhhbW1lckluc3RhbmNlIHdlJ3JlIHdvcmtpbmcgZm9yCiAgICAgICAgICAgICAgICBzdGFydEV2ZW50ICA6IEhhbW1lci51dGlscy5leHRlbmQoe30sIGV2ZW50RGF0YSksIC8vIHN0YXJ0IGV2ZW50RGF0YSBmb3IgZGlzdGFuY2VzLCB0aW1pbmcgZXRjCiAgICAgICAgICAgICAgICBsYXN0RXZlbnQgICA6IGZhbHNlLCAvLyBsYXN0IGV2ZW50RGF0YQogICAgICAgICAgICAgICAgbmFtZSAgICAgICAgOiAnJyAvLyBjdXJyZW50IGdlc3R1cmUgd2UncmUgaW4vZGV0ZWN0ZWQsIGNhbiBiZSAndGFwJywgJ2hvbGQnIGV0YwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdGhpcy5kZXRlY3QoZXZlbnREYXRhKTsKICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogSGFtbWVyLmdlc3R1cmUgZGV0ZWN0aW9uCiAgICAgICAgICogQHBhcmFtICAge09iamVjdH0gICAgZXZlbnREYXRhCiAgICAgICAgICogQHBhcmFtICAge09iamVjdH0gICAgZXZlbnREYXRhCiAgICAgICAgICovCiAgICAgICAgZGV0ZWN0OiBmdW5jdGlvbiBkZXRlY3QoZXZlbnREYXRhKSB7CiAgICAgICAgICAgIGlmKCF0aGlzLmN1cnJlbnQgfHwgdGhpcy5zdG9wcGVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGV4dGVuZCBldmVudCBkYXRhIHdpdGggY2FsY3VsYXRpb25zIGFib3V0IHNjYWxlLCBkaXN0YW5jZSBldGMKICAgICAgICAgICAgZXZlbnREYXRhID0gdGhpcy5leHRlbmRFdmVudERhdGEoZXZlbnREYXRhKTsKCiAgICAgICAgICAgIC8vIGluc3RhbmNlIG9wdGlvbnMKICAgICAgICAgICAgdmFyIGluc3Rfb3B0aW9ucyA9IHRoaXMuY3VycmVudC5pbnN0Lm9wdGlvbnM7CgogICAgICAgICAgICAvLyBjYWxsIEhhbW1lci5nZXN0dXJlIGhhbmRsZXJzCiAgICAgICAgICAgIGZvcih2YXIgZz0wLGxlbj10aGlzLmdlc3R1cmVzLmxlbmd0aDsgZzxsZW47IGcrKykgewogICAgICAgICAgICAgICAgdmFyIGdlc3R1cmUgPSB0aGlzLmdlc3R1cmVzW2ddOwoKICAgICAgICAgICAgICAgIC8vIG9ubHkgd2hlbiB0aGUgaW5zdGFuY2Ugb3B0aW9ucyBoYXZlIGVuYWJsZWQgdGhpcyBnZXN0dXJlCiAgICAgICAgICAgICAgICBpZighdGhpcy5zdG9wcGVkICYmIGluc3Rfb3B0aW9uc1tnZXN0dXJlLm5hbWVdICE9PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgIC8vIGlmIGEgaGFuZGxlciByZXR1cm5zIGZhbHNlLCB3ZSBzdG9wIHdpdGggdGhlIGRldGVjdGlvbgogICAgICAgICAgICAgICAgICAgIGlmKGdlc3R1cmUuaGFuZGxlci5jYWxsKGdlc3R1cmUsIGV2ZW50RGF0YSwgdGhpcy5jdXJyZW50Lmluc3QpID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BEZXRlY3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBzdG9yZSBhcyBwcmV2aW91cyBldmVudCBldmVudAogICAgICAgICAgICBpZih0aGlzLmN1cnJlbnQpIHsKICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5sYXN0RXZlbnQgPSBldmVudERhdGE7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGVuZGV2ZW50LCBidXQgbm90IHRoZSBsYXN0IHRvdWNoLCBzbyBkb250IHN0b3AKICAgICAgICAgICAgaWYoZXZlbnREYXRhLmV2ZW50VHlwZSA9PSBIYW1tZXIuRVZFTlRfRU5EICYmICFldmVudERhdGEudG91Y2hlcy5sZW5ndGgtMSkgewogICAgICAgICAgICAgICAgdGhpcy5zdG9wRGV0ZWN0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBldmVudERhdGE7CiAgICAgICAgfSwKCgogICAgICAgIC8qKgogICAgICAgICAqIGNsZWFyIHRoZSBIYW1tZXIuZ2VzdHVyZSB2YXJzCiAgICAgICAgICogdGhpcyBpcyBjYWxsZWQgb24gZW5kRGV0ZWN0LCBidXQgY2FuIGFsc28gYmUgdXNlZCB3aGVuIGEgZmluYWwgSGFtbWVyLmdlc3R1cmUgaGFzIGJlZW4gZGV0ZWN0ZWQKICAgICAgICAgKiB0byBzdG9wIG90aGVyIEhhbW1lci5nZXN0dXJlcyBmcm9tIGJlaW5nIGZpcmVkCiAgICAgICAgICovCiAgICAgICAgc3RvcERldGVjdDogZnVuY3Rpb24gc3RvcERldGVjdCgpIHsKICAgICAgICAgICAgLy8gY2xvbmUgY3VycmVudCBkYXRhIHRvIHRoZSBzdG9yZSBhcyB0aGUgcHJldmlvdXMgZ2VzdHVyZQogICAgICAgICAgICAvLyB1c2VkIGZvciB0aGUgZG91YmxlIHRhcCBnZXN0dXJlLCBzaW5jZSB0aGlzIGlzIGFuIG90aGVyIGdlc3R1cmUgZGV0ZWN0IHNlc3Npb24KICAgICAgICAgICAgdGhpcy5wcmV2aW91cyA9IEhhbW1lci51dGlscy5leHRlbmQoe30sIHRoaXMuY3VycmVudCk7CgogICAgICAgICAgICAvLyByZXNldCB0aGUgY3VycmVudAogICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBudWxsOwoKICAgICAgICAgICAgLy8gc3RvcHBlZCEKICAgICAgICAgICAgdGhpcy5zdG9wcGVkID0gdHJ1ZTsKICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogZXh0ZW5kIGV2ZW50RGF0YSBmb3IgSGFtbWVyLmdlc3R1cmVzCiAgICAgICAgICogQHBhcmFtICAge09iamVjdH0gICBldgogICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9ICAgZXYKICAgICAgICAgKi8KICAgICAgICBleHRlbmRFdmVudERhdGE6IGZ1bmN0aW9uIGV4dGVuZEV2ZW50RGF0YShldikgewogICAgICAgICAgICB2YXIgc3RhcnRFdiA9IHRoaXMuY3VycmVudC5zdGFydEV2ZW50OwoKICAgICAgICAgICAgLy8gaWYgdGhlIHRvdWNoZXMgY2hhbmdlLCBzZXQgdGhlIG5ldyB0b3VjaGVzIG92ZXIgdGhlIHN0YXJ0RXZlbnQgdG91Y2hlcwogICAgICAgICAgICAvLyB0aGlzIGJlY2F1c2UgdG91Y2hldmVudHMgZG9uJ3QgaGF2ZSBhbGwgdGhlIHRvdWNoZXMgb24gdG91Y2hzdGFydCwgb3IgdGhlCiAgICAgICAgICAgIC8vIHVzZXIgbXVzdCBwbGFjZSBoaXMgZmluZ2VycyBhdCB0aGUgRVhBQ1Qgc2FtZSB0aW1lIG9uIHRoZSBzY3JlZW4sIHdoaWNoIGlzIG5vdCByZWFsaXN0aWMKICAgICAgICAgICAgLy8gYnV0LCBzb21ldGltZXMgaXQgaGFwcGVucyB0aGF0IGJvdGggZmluZ2VycyBhcmUgdG91Y2hpbmcgYXQgdGhlIEVYQUNUIHNhbWUgdGltZQogICAgICAgICAgICBpZihzdGFydEV2ICYmIChldi50b3VjaGVzLmxlbmd0aCAhPSBzdGFydEV2LnRvdWNoZXMubGVuZ3RoIHx8IGV2LnRvdWNoZXMgPT09IHN0YXJ0RXYudG91Y2hlcykpIHsKICAgICAgICAgICAgICAgIC8vIGV4dGVuZCAxIGxldmVsIGRlZXAgdG8gZ2V0IHRoZSB0b3VjaGxpc3Qgd2l0aCB0aGUgdG91Y2ggb2JqZWN0cwogICAgICAgICAgICAgICAgc3RhcnRFdi50b3VjaGVzID0gW107CiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MCxsZW49ZXYudG91Y2hlcy5sZW5ndGg7IGk8bGVuOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBzdGFydEV2LnRvdWNoZXMucHVzaChIYW1tZXIudXRpbHMuZXh0ZW5kKHt9LCBldi50b3VjaGVzW2ldKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBkZWx0YV90aW1lID0gZXYudGltZVN0YW1wIC0gc3RhcnRFdi50aW1lU3RhbXAsCiAgICAgICAgICAgICAgICBkZWx0YV94ID0gZXYuY2VudGVyLnBhZ2VYIC0gc3RhcnRFdi5jZW50ZXIucGFnZVgsCiAgICAgICAgICAgICAgICBkZWx0YV95ID0gZXYuY2VudGVyLnBhZ2VZIC0gc3RhcnRFdi5jZW50ZXIucGFnZVksCiAgICAgICAgICAgICAgICB2ZWxvY2l0eSA9IG8udXRpbC5nZXRWZWxvY2l0eShkZWx0YV90aW1lLCBkZWx0YV94LCBkZWx0YV95KTsKCiAgICAgICAgICAgIEhhbW1lci51dGlscy5leHRlbmQoZXYsIHsKICAgICAgICAgICAgICAgIGRlbHRhVGltZSAgIDogZGVsdGFfdGltZSwKCiAgICAgICAgICAgICAgICBkZWx0YVggICAgICA6IGRlbHRhX3gsCiAgICAgICAgICAgICAgICBkZWx0YVkgICAgICA6IGRlbHRhX3ksCgogICAgICAgICAgICAgICAgdmVsb2NpdHlYICAgOiB2ZWxvY2l0eS54LAogICAgICAgICAgICAgICAgdmVsb2NpdHlZICAgOiB2ZWxvY2l0eS55LAoKICAgICAgICAgICAgICAgIGRpc3RhbmNlICAgIDogby51dGlsLmdldERpc3RhbmNlKHN0YXJ0RXYuY2VudGVyLCBldi5jZW50ZXIpLAogICAgICAgICAgICAgICAgYW5nbGUgICAgICAgOiBvLnV0aWwuZ2V0QW5nbGUoc3RhcnRFdi5jZW50ZXIsIGV2LmNlbnRlciksCiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gICA6IG8udXRpbC5nZXREaXJlY3Rpb24oc3RhcnRFdi5jZW50ZXIsIGV2LmNlbnRlciksCgogICAgICAgICAgICAgICAgc2NhbGUgICAgICAgOiBvLnV0aWwuZ2V0U2NhbGUoc3RhcnRFdi50b3VjaGVzLCBldi50b3VjaGVzKSwKICAgICAgICAgICAgICAgIHJvdGF0aW9uICAgIDogby51dGlsLmdldFJvdGF0aW9uKHN0YXJ0RXYudG91Y2hlcywgZXYudG91Y2hlcyksCgogICAgICAgICAgICAgICAgc3RhcnRFdmVudCAgOiBzdGFydEV2CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIGV2OwogICAgICAgIH0sCgoKICAgICAgICAvKioKICAgICAgICAgKiByZWdpc3RlciBuZXcgZ2VzdHVyZQogICAgICAgICAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIGdlc3R1cmUgb2JqZWN0LCBzZWUgZ2VzdHVyZXMuanMgZm9yIGRvY3VtZW50YXRpb24KICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXl9ICAgICBnZXN0dXJlcwogICAgICAgICAqLwogICAgICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3RlcihnZXN0dXJlKSB7CiAgICAgICAgICAgIC8vIGFkZCBhbiBlbmFibGUgZ2VzdHVyZSBvcHRpb25zIGlmIHRoZXJlIGlzIG5vIGdpdmVuCiAgICAgICAgICAgIHZhciBvcHRpb25zID0gZ2VzdHVyZS5kZWZhdWx0cyB8fCB7fTsKICAgICAgICAgICAgaWYob3B0aW9uc1tnZXN0dXJlLm5hbWVdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIG9wdGlvbnNbZ2VzdHVyZS5uYW1lXSA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGV4dGVuZCBIYW1tZXIgZGVmYXVsdCBvcHRpb25zIHdpdGggdGhlIEhhbW1lci5nZXN0dXJlIG9wdGlvbnMKICAgICAgICAgICAgSGFtbWVyLnV0aWxzLmV4dGVuZChIYW1tZXIuZGVmYXVsdHMsIG9wdGlvbnMsIHRydWUpOwoKICAgICAgICAgICAgLy8gc2V0IGl0cyBpbmRleAogICAgICAgICAgICBnZXN0dXJlLmluZGV4ID0gZ2VzdHVyZS5pbmRleCB8fCAxMDAwOwoKICAgICAgICAgICAgLy8gYWRkIEhhbW1lci5nZXN0dXJlIHRvIHRoZSBsaXN0CiAgICAgICAgICAgIHRoaXMuZ2VzdHVyZXMucHVzaChnZXN0dXJlKTsKCiAgICAgICAgICAgIC8vIHNvcnQgdGhlIGxpc3QgYnkgaW5kZXgKICAgICAgICAgICAgdGhpcy5nZXN0dXJlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgICAgIGlmIChhLmluZGV4IDwgYi5pbmRleCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChhLmluZGV4ID4gYi5pbmRleCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VzdHVyZXM7CiAgICAgICAgfQogICAgfTsKCgogICAgSGFtbWVyLmdlc3R1cmVzID0gSGFtbWVyLmdlc3R1cmVzIHx8IHt9OwoKICAgIC8qKgogICAgICogQ3VzdG9tIGdlc3R1cmVzCiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgICAqCiAgICAgKiBHZXN0dXJlIG9iamVjdAogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAqIFRoZSBvYmplY3Qgc3RydWN0dXJlIG9mIGEgZ2VzdHVyZToKICAgICAqCiAgICAgKiB7IG5hbWU6ICdteWdlc3R1cmUnLAogKiAgIGluZGV4OiAxMzM3LAogKiAgIGRlZmF1bHRzOiB7CiAqICAgICBteWdlc3R1cmVfb3B0aW9uOiB0cnVlCiAqICAgfQogKiAgIGhhbmRsZXI6IGZ1bmN0aW9uKHR5cGUsIGV2LCBpbnN0KSB7CiAqICAgICAvLyB0cmlnZ2VyIGdlc3R1cmUgZXZlbnQKICogICAgIGluc3QudHJpZ2dlcih0aGlzLm5hbWUsIGV2KTsKICogICB9CiAqIH0KCiAgICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICBuYW1lCiAgICAgKiB0aGlzIHNob3VsZCBiZSB0aGUgbmFtZSBvZiB0aGUgZ2VzdHVyZSwgbG93ZXJjYXNlCiAgICAgKiBpdCBpcyBhbHNvIGJlaW5nIHVzZWQgdG8gZGlzYWJsZS9lbmFibGUgdGhlIGdlc3R1cmUgcGVyIGluc3RhbmNlIGNvbmZpZy4KICAgICAqCiAgICAgKiBAcGFyYW0gICB7TnVtYmVyfSAgICBbaW5kZXg9MTAwMF0KICAgICAqIHRoZSBpbmRleCBvZiB0aGUgZ2VzdHVyZSwgd2hlcmUgaXQgaXMgZ29pbmcgdG8gYmUgaW4gdGhlIHN0YWNrIG9mIGdlc3R1cmVzIGRldGVjdGlvbgogICAgICogbGlrZSB3aGVuIHlvdSBidWlsZCBhbiBnZXN0dXJlIHRoYXQgZGVwZW5kcyBvbiB0aGUgZHJhZyBnZXN0dXJlLCBpdCBpcyBhIGdvb2QKICAgICAqIGlkZWEgdG8gcGxhY2UgaXQgYWZ0ZXIgdGhlIGluZGV4IG9mIHRoZSBkcmFnIGdlc3R1cmUuCiAgICAgKgogICAgICogQHBhcmFtICAge09iamVjdH0gICAgW2RlZmF1bHRzPXt9XQogICAgICogdGhlIGRlZmF1bHQgc2V0dGluZ3Mgb2YgdGhlIGdlc3R1cmUuIHRoZXNlIGFyZSBhZGRlZCB0byB0aGUgaW5zdGFuY2Ugc2V0dGluZ3MsCiAgICAgKiBhbmQgY2FuIGJlIG92ZXJydWxlZCBwZXIgaW5zdGFuY2UuIHlvdSBjYW4gYWxzbyBhZGQgdGhlIG5hbWUgb2YgdGhlIGdlc3R1cmUsCiAgICAgKiBidXQgdGhpcyBpcyBhbHNvIGFkZGVkIGJ5IGRlZmF1bHQgKGFuZCBzZXQgdG8gdHJ1ZSkuCiAgICAgKgogICAgICogQHBhcmFtICAge0Z1bmN0aW9ufSAgaGFuZGxlcgogICAgICogdGhpcyBoYW5kbGVzIHRoZSBnZXN0dXJlIGRldGVjdGlvbiBvZiB5b3VyIGN1c3RvbSBnZXN0dXJlIGFuZCByZWNlaXZlcyB0aGUKICAgICAqIGZvbGxvd2luZyBhcmd1bWVudHM6CiAgICAgKgogICAgICogICAgICBAcGFyYW0gIHtPYmplY3R9ICAgIGV2ZW50RGF0YQogICAgICogICAgICBldmVudCBkYXRhIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOgogICAgICogICAgICAgICAgdGltZVN0YW1wICAge051bWJlcn0gICAgICAgIHRpbWUgdGhlIGV2ZW50IG9jY3VycmVkCiAgICAgKiAgICAgICAgICB0YXJnZXQgICAgICB7SFRNTEVsZW1lbnR9ICAgdGFyZ2V0IGVsZW1lbnQKICAgICAqICAgICAgICAgIHRvdWNoZXMgICAgIHtBcnJheX0gICAgICAgICB0b3VjaGVzIChmaW5nZXJzLCBwb2ludGVycywgbW91c2UpIG9uIHRoZSBzY3JlZW4KICAgICAqICAgICAgICAgIHBvaW50ZXJUeXBlIHtTdHJpbmd9ICAgICAgICBraW5kIG9mIHBvaW50ZXIgdGhhdCB3YXMgdXNlZC4gbWF0Y2hlcyBIYW1tZXIuUE9JTlRFUl9NT1VTRXxUT1VDSAogICAgICogICAgICAgICAgY2VudGVyICAgICAge09iamVjdH0gICAgICAgIGNlbnRlciBwb3NpdGlvbiBvZiB0aGUgdG91Y2hlcy4gY29udGFpbnMgcGFnZVggYW5kIHBhZ2VZCiAgICAgKiAgICAgICAgICBkZWx0YVRpbWUgICB7TnVtYmVyfSAgICAgICAgdGhlIHRvdGFsIHRpbWUgb2YgdGhlIHRvdWNoZXMgaW4gdGhlIHNjcmVlbgogICAgICogICAgICAgICAgZGVsdGFYICAgICAge051bWJlcn0gICAgICAgIHRoZSBkZWx0YSBvbiB4IGF4aXMgd2UgaGF2ZWQgbW92ZWQKICAgICAqICAgICAgICAgIGRlbHRhWSAgICAgIHtOdW1iZXJ9ICAgICAgICB0aGUgZGVsdGEgb24geSBheGlzIHdlIGhhdmVkIG1vdmVkCiAgICAgKiAgICAgICAgICB2ZWxvY2l0eVggICB7TnVtYmVyfSAgICAgICAgdGhlIHZlbG9jaXR5IG9uIHRoZSB4CiAgICAgKiAgICAgICAgICB2ZWxvY2l0eVkgICB7TnVtYmVyfSAgICAgICAgdGhlIHZlbG9jaXR5IG9uIHkKICAgICAqICAgICAgICAgIGFuZ2xlICAgICAgIHtOdW1iZXJ9ICAgICAgICB0aGUgYW5nbGUgd2UgYXJlIG1vdmluZwogICAgICogICAgICAgICAgZGlyZWN0aW9uICAge1N0cmluZ30gICAgICAgIHRoZSBkaXJlY3Rpb24gd2UgYXJlIG1vdmluZy4gbWF0Y2hlcyBIYW1tZXIuRElSRUNUSU9OX1VQfERPV058TEVGVHxSSUdIVAogICAgICogICAgICAgICAgZGlzdGFuY2UgICAge051bWJlcn0gICAgICAgIHRoZSBkaXN0YW5jZSB3ZSBoYXZlZCBtb3ZlZAogICAgICogICAgICAgICAgc2NhbGUgICAgICAge051bWJlcn0gICAgICAgIHNjYWxpbmcgb2YgdGhlIHRvdWNoZXMsIG5lZWRzIDIgdG91Y2hlcwogICAgICogICAgICAgICAgcm90YXRpb24gICAge051bWJlcn0gICAgICAgIHJvdGF0aW9uIG9mIHRoZSB0b3VjaGVzLCBuZWVkcyAyIHRvdWNoZXMgKgogICAgICogICAgICAgICAgZXZlbnRUeXBlICAge1N0cmluZ30gICAgICAgIG1hdGNoZXMgSGFtbWVyLkVWRU5UX1NUQVJUfE1PVkV8RU5ECiAgICAgKiAgICAgICAgICBzcmNFdmVudCAgICB7T2JqZWN0fSAgICAgICAgdGhlIHNvdXJjZSBldmVudCwgbGlrZSBUb3VjaFN0YXJ0IG9yIE1vdXNlRG93biAqCiAgICAgKiAgICAgICAgICBzdGFydEV2ZW50ICB7T2JqZWN0fSAgICAgICAgY29udGFpbnMgdGhlIHNhbWUgcHJvcGVydGllcyBhcyBhYm92ZSwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXQgZnJvbSB0aGUgZmlyc3QgdG91Y2guIHRoaXMgaXMgdXNlZCB0byBjYWxjdWxhdGUKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZXMsIGRlbHRhVGltZSwgc2NhbGluZyBldGMKICAgICAqCiAgICAgKiAgICAgIEBwYXJhbSAge0hhbW1lci5JbnN0YW5jZX0gICAgaW5zdAogICAgICogICAgICB0aGUgaW5zdGFuY2Ugd2UgYXJlIGRvaW5nIHRoZSBkZXRlY3Rpb24gZm9yLiB5b3UgY2FuIGdldCB0aGUgb3B0aW9ucyBmcm9tCiAgICAgKiAgICAgIHRoZSBpbnN0Lm9wdGlvbnMgb2JqZWN0IGFuZCB0cmlnZ2VyIHRoZSBnZXN0dXJlIGV2ZW50IGJ5IGNhbGxpbmcgaW5zdC50cmlnZ2VyCiAgICAgKgogICAgICoKICAgICAqIEhhbmRsZSBnZXN0dXJlcwogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAqIGluc2lkZSB0aGUgaGFuZGxlciB5b3UgY2FuIGdldC9zZXQgSGFtbWVyLmRldGVjdGlvbi5jdXJyZW50LiBUaGlzIGlzIHRoZSBjdXJyZW50CiAgICAgKiBkZXRlY3Rpb24gc2Vzc2lvbi4gSXQgaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllcwogICAgICogICAgICBAcGFyYW0gIHtTdHJpbmd9ICAgIG5hbWUKICAgICAqICAgICAgY29udGFpbnMgdGhlIG5hbWUgb2YgdGhlIGdlc3R1cmUgd2UgaGF2ZSBkZXRlY3RlZC4gaXQgaGFzIG5vdCBhIHJlYWwgZnVuY3Rpb24sCiAgICAgKiAgICAgIG9ubHkgdG8gY2hlY2sgaW4gb3RoZXIgZ2VzdHVyZXMgaWYgc29tZXRoaW5nIGlzIGRldGVjdGVkLgogICAgICogICAgICBsaWtlIGluIHRoZSBkcmFnIGdlc3R1cmUgd2Ugc2V0IGl0IHRvICdkcmFnJyBhbmQgaW4gdGhlIHN3aXBlIGdlc3R1cmUgd2UgY2FuCiAgICAgKiAgICAgIGNoZWNrIGlmIHRoZSBjdXJyZW50IGdlc3R1cmUgaXMgJ2RyYWcnIGJ5IGFjY2Vzc2luZyBIYW1tZXIuZGV0ZWN0aW9uLmN1cnJlbnQubmFtZQogICAgICoKICAgICAqICAgICAgQHJlYWRvbmx5CiAgICAgKiAgICAgIEBwYXJhbSAge0hhbW1lci5JbnN0YW5jZX0gICAgaW5zdAogICAgICogICAgICB0aGUgaW5zdGFuY2Ugd2UgZG8gdGhlIGRldGVjdGlvbiBmb3IKICAgICAqCiAgICAgKiAgICAgIEByZWFkb25seQogICAgICogICAgICBAcGFyYW0gIHtPYmplY3R9ICAgIHN0YXJ0RXZlbnQKICAgICAqICAgICAgY29udGFpbnMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGZpcnN0IGdlc3R1cmUgZGV0ZWN0aW9uIGluIHRoaXMgc2Vzc2lvbi4KICAgICAqICAgICAgVXNlZCBmb3IgY2FsY3VsYXRpb25zIGFib3V0IHRpbWluZywgZGlzdGFuY2UsIGV0Yy4KICAgICAqCiAgICAgKiAgICAgIEByZWFkb25seQogICAgICogICAgICBAcGFyYW0gIHtPYmplY3R9ICAgIGxhc3RFdmVudAogICAgICogICAgICBjb250YWlucyBhbGwgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGxhc3QgZ2VzdHVyZSBkZXRlY3QgaW4gdGhpcyBzZXNzaW9uLgogICAgICoKICAgICAqIGFmdGVyIHRoZSBnZXN0dXJlIGRldGVjdGlvbiBzZXNzaW9uIGhhcyBiZWVuIGNvbXBsZXRlZCAodXNlciBoYXMgcmVsZWFzZWQgdGhlIHNjcmVlbikKICAgICAqIHRoZSBIYW1tZXIuZGV0ZWN0aW9uLmN1cnJlbnQgb2JqZWN0IGlzIGNvcGllZCBpbnRvIEhhbW1lci5kZXRlY3Rpb24ucHJldmlvdXMsCiAgICAgKiB0aGlzIGlzIHVzZWZ1bGwgZm9yIGdlc3R1cmVzIGxpa2UgZG91YmxldGFwLCB3aGVyZSB5b3UgbmVlZCB0byBrbm93IGlmIHRoZQogICAgICogcHJldmlvdXMgZ2VzdHVyZSB3YXMgYSB0YXAKICAgICAqCiAgICAgKiBvcHRpb25zIHRoYXQgaGF2ZSBiZWVuIHNldCBieSB0aGUgaW5zdGFuY2UgY2FuIGJlIHJlY2VpdmVkIGJ5IGNhbGxpbmcgaW5zdC5vcHRpb25zCiAgICAgKgogICAgICogWW91IGNhbiB0cmlnZ2VyIGEgZ2VzdHVyZSBldmVudCBieSBjYWxsaW5nIGluc3QudHJpZ2dlcigibXlnZXN0dXJlIiwgZXZlbnQpLgogICAgICogVGhlIGZpcnN0IHBhcmFtIGlzIHRoZSBuYW1lIG9mIHlvdXIgZ2VzdHVyZSwgdGhlIHNlY29uZCB0aGUgZXZlbnQgYXJndW1lbnQKICAgICAqCiAgICAgKgogICAgICogUmVnaXN0ZXIgZ2VzdHVyZXMKICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgKiBXaGVuIGFuIGdlc3R1cmUgaXMgYWRkZWQgdG8gdGhlIEhhbW1lci5nZXN0dXJlcyBvYmplY3QsIGl0IGlzIGF1dG8gcmVnaXN0ZXJlZAogICAgICogYXQgdGhlIHNldHVwIG9mIHRoZSBmaXJzdCBIYW1tZXIgaW5zdGFuY2UuIFlvdSBjYW4gYWxzbyBjYWxsIEhhbW1lci5kZXRlY3Rpb24ucmVnaXN0ZXIKICAgICAqIG1hbnVhbGx5IGFuZCBwYXNzIHlvdXIgZ2VzdHVyZSBvYmplY3QgYXMgYSBwYXJhbQogICAgICoKICAgICAqLwoKICAgIC8qKgogICAgICogTG9uVGFwCiAgICAgKiBUb3VjaCBzdGF5cyBhdCB0aGUgc2FtZSBwbGFjZSBmb3IgeCB0aW1lCiAgICAgKiBAZXZlbnRzICBsb250YXAKICAgICAqLwogICAgSGFtbWVyLmdlc3R1cmVzLkxvblRhcCA9IHsKICAgICAgICBuYW1lOiAnbG9udGFwJywKICAgICAgICBpbmRleDogMTAsCiAgICAgICAgZGVmYXVsdHM6IHsKICAgICAgICAgICAgaG9sZF90aW1lb3V0CTogNTAwLAogICAgICAgICAgICBob2xkX3RocmVzaG9sZAk6IDEKICAgICAgICB9LAogICAgICAgIHRpbWVyOiBudWxsLAogICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhvbGRHZXN0dXJlKGV2LCBpbnN0KSB7CiAgICAgICAgICAgIHN3aXRjaChldi5ldmVudFR5cGUpIHsKICAgICAgICAgICAgICAgIGNhc2UgSGFtbWVyLkVWRU5UX1NUQVJUOgogICAgICAgICAgICAgICAgICAgIC8vIGNsZWFyIGFueSBydW5uaW5nIHRpbWVycwogICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBnZXN0dXJlIHNvIHdlIGNhbiBjaGVjayBpbiB0aGUgdGltZW91dCBpZiBpdCBzdGlsbCBpcwogICAgICAgICAgICAgICAgICAgIEhhbW1lci5kZXRlY3Rpb24uY3VycmVudC5uYW1lID0gdGhpcy5uYW1lOwoKICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGltZXIgYW5kIGlmIGFmdGVyIHRoZSB0aW1lb3V0IGl0IHN0aWxsIGlzIGxvbnRhcCwKICAgICAgICAgICAgICAgICAgICAvLyB3ZSB0cmlnZ2VyIHRoZSBsb250YXAgZXZlbnQKICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoSGFtbWVyLmRldGVjdGlvbi5jdXJyZW50Lm5hbWUgPT0gJ2xvbnRhcCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3QudHJpZ2dlcignbG9udGFwJywgZXYpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgaW5zdC5vcHRpb25zLmhvbGRfdGltZW91dCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgLy8gd2hlbiB5b3UgbW92ZSBvciBlbmQgd2UgY2xlYXIgdGhlIHRpbWVyCiAgICAgICAgICAgICAgICBjYXNlIEhhbW1lci5FVkVOVF9NT1ZFOgogICAgICAgICAgICAgICAgICAgIGlmKGV2LmRpc3RhbmNlID4gaW5zdC5vcHRpb25zLmhvbGRfdGhyZXNob2xkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSBIYW1tZXIuRVZFTlRfRU5EOgogICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07CgoKICAgIC8qKgogICAgICogVGFwL0RvdWJsZVRhcAogICAgICogUXVpY2sgdG91Y2ggYXQgYSBwbGFjZSBvciBkb3VibGUgYXQgdGhlIHNhbWUgcGxhY2UKICAgICAqIEBldmVudHMgIHRhcCwgZG91YmxldGFwCiAgICAgKi8KICAgIEhhbW1lci5nZXN0dXJlcy5UYXAgPSB7CiAgICAgICAgbmFtZTogJ3RhcCcsCiAgICAgICAgaW5kZXg6IDEwMCwKICAgICAgICBkZWZhdWx0czogewogICAgICAgICAgICB0YXBfbWF4X3RvdWNodGltZQk6IDI1MCwKICAgICAgICAgICAgdGFwX21heF9kaXN0YW5jZQk6IDEwLAogICAgICAgICAgICB0YXBfYWx3YXlzCQkJOiB0cnVlLAogICAgICAgICAgICBkb3VibGV0YXBfZGlzdGFuY2UJOiAyMCwKICAgICAgICAgICAgZG91YmxldGFwX2ludGVydmFsCTogMzAwCiAgICAgICAgfSwKICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbiB0YXBHZXN0dXJlKGV2LCBpbnN0KSB7CiAgICAgICAgICAgIGlmKGV2LmV2ZW50VHlwZSA9PSBIYW1tZXIuRVZFTlRfRU5EKSB7CiAgICAgICAgICAgICAgICAvLyBwcmV2aW91cyBnZXN0dXJlLCBmb3IgdGhlIGRvdWJsZSB0YXAgc2luY2UgdGhlc2UgYXJlIHR3byBkaWZmZXJlbnQgZ2VzdHVyZSBkZXRlY3Rpb25zCiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IEhhbW1lci5kZXRlY3Rpb24ucHJldmlvdXMsCiAgICAgICAgICAgICAgICAgICAgZGlkX2RvdWJsZXRhcCA9IGZhbHNlOwogICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgdG91Y2h0aW1lIGlzIGhpZ2hlciB0aGVuIHRoZSBtYXggdG91Y2ggdGltZQogICAgICAgICAgICAgICAgLy8gb3Igd2hlbiB0aGUgbW92aW5nIGRpc3RhbmNlIGlzIHRvbyBtdWNoCiAgICAgICAgICAgICAgICBpZihldi5kZWx0YVRpbWUgPiBpbnN0Lm9wdGlvbnMudGFwX21heF90b3VjaHRpbWUgfHwKICAgICAgICAgICAgICAgICAgICBldi5kaXN0YW5jZSA+IGluc3Qub3B0aW9ucy50YXBfbWF4X2Rpc3RhbmNlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgZG91YmxlIHRhcAogICAgICAgICAgICAgICAgaWYocHJldiAmJiBwcmV2Lm5hbWUgPT0gJ3RhcCcgJiYKICAgICAgICAgICAgICAgICAgICAoZXYudGltZVN0YW1wIC0gcHJldi5sYXN0RXZlbnQudGltZVN0YW1wKSA8IGluc3Qub3B0aW9ucy5kb3VibGV0YXBfaW50ZXJ2YWwgJiYKICAgICAgICAgICAgICAgICAgICBldi5kaXN0YW5jZSA8IGluc3Qub3B0aW9ucy5kb3VibGV0YXBfZGlzdGFuY2UpIHsKICAgICAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIoJ2RvdWJsZXRhcCcsIGV2KTsKICAgICAgICAgICAgICAgICAgICBkaWRfZG91YmxldGFwID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBkbyBhIHNpbmdsZSB0YXAKICAgICAgICAgICAgICAgIGlmKCFkaWRfZG91YmxldGFwIHx8IGluc3Qub3B0aW9ucy50YXBfYWx3YXlzKSB7CiAgICAgICAgICAgICAgICAgICAgSGFtbWVyLmRldGVjdGlvbi5jdXJyZW50Lm5hbWUgPSAndGFwJzsKICAgICAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIoSGFtbWVyLmRldGVjdGlvbi5jdXJyZW50Lm5hbWUsIGV2KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07CgoKICAgIC8qKgogICAgICogU3dpcGUKICAgICAqIHRyaWdnZXJzIHN3aXBlIGV2ZW50cyB3aGVuIHRoZSBlbmQgdmVsb2NpdHkgaXMgYWJvdmUgdGhlIHRocmVzaG9sZAogICAgICogQGV2ZW50cyAgc3dpcGUsIHN3aXBlbGVmdCwgc3dpcGVyaWdodCwgc3dpcGV1cCwgc3dpcGVkb3duCiAgICAgKi8KICAgIEhhbW1lci5nZXN0dXJlcy5Td2lwZSA9IHsKICAgICAgICBuYW1lOiAnc3dpcGUnLAogICAgICAgIGluZGV4OiA0MCwKICAgICAgICBkZWZhdWx0czogewogICAgICAgICAgICAvLyBzZXQgMCBmb3IgdW5saW1pdGVkLCBidXQgdGhpcyBjYW4gY29uZmxpY3Qgd2l0aCB0cmFuc2Zvcm0KICAgICAgICAgICAgc3dpcGVfbWF4X3RvdWNoZXMgIDogMSwKICAgICAgICAgICAgc3dpcGVfdmVsb2NpdHkgICAgIDogMC43CiAgICAgICAgfSwKICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbiBzd2lwZUdlc3R1cmUoZXYsIGluc3QpIHsKICAgICAgICAgICAgaWYoZXYuZXZlbnRUeXBlID09IEhhbW1lci5FVkVOVF9FTkQpIHsKICAgICAgICAgICAgICAgIC8vIG1heCB0b3VjaGVzCiAgICAgICAgICAgICAgICBpZihpbnN0Lm9wdGlvbnMuc3dpcGVfbWF4X3RvdWNoZXMgPiAwICYmCiAgICAgICAgICAgICAgICAgICAgZXYudG91Y2hlcy5sZW5ndGggPiBpbnN0Lm9wdGlvbnMuc3dpcGVfbWF4X3RvdWNoZXMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgZGlzdGFuY2Ugd2UgbW92ZWQgaXMgdG9vIHNtYWxsIHdlIHNraXAgdGhpcyBnZXN0dXJlCiAgICAgICAgICAgICAgICAvLyBvciB3ZSBjYW4gYmUgYWxyZWFkeSBpbiBkcmFnZ2luZwogICAgICAgICAgICAgICAgaWYoZXYudmVsb2NpdHlYID4gaW5zdC5vcHRpb25zLnN3aXBlX3ZlbG9jaXR5IHx8CiAgICAgICAgICAgICAgICAgICAgZXYudmVsb2NpdHlZID4gaW5zdC5vcHRpb25zLnN3aXBlX3ZlbG9jaXR5KSB7CiAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBzd2lwZSBldmVudHMKICAgICAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIodGhpcy5uYW1lLCBldik7CiAgICAgICAgICAgICAgICAgICAgaW5zdC50cmlnZ2VyKHRoaXMubmFtZSArIGV2LmRpcmVjdGlvbiwgZXYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKCgogICAgLyoqCiAgICAgKiBEcmFnCiAgICAgKiBNb3ZlIHdpdGggeCBmaW5nZXJzIChkZWZhdWx0IDEpIGFyb3VuZCBvbiB0aGUgcGFnZS4gQmxvY2tpbmcgdGhlIHNjcm9sbGluZyB3aGVuCiAgICAgKiBtb3ZpbmcgbGVmdCBhbmQgcmlnaHQgaXMgYSBnb29kIHByYWN0aWNlLiBXaGVuIGFsbCB0aGUgZHJhZyBldmVudHMgYXJlIGJsb2NraW5nCiAgICAgKiB5b3UgZGlzYWJsZSBzY3JvbGxpbmcgb24gdGhhdCBhcmVhLgogICAgICogQGV2ZW50cyAgZHJhZywgZHJhcGxlZnQsIGRyYWdyaWdodCwgZHJhZ3VwLCBkcmFnZG93bgogICAgICovCiAgICBIYW1tZXIuZ2VzdHVyZXMuRHJhZyA9IHsKICAgICAgICBuYW1lOiAnZHJhZycsCiAgICAgICAgaW5kZXg6IDUwLAogICAgICAgIGRlZmF1bHRzOiB7CiAgICAgICAgICAgIGRyYWdfbWluX2Rpc3RhbmNlIDogMTAsCiAgICAgICAgICAgIC8vIHNldCAwIGZvciB1bmxpbWl0ZWQsIGJ1dCB0aGlzIGNhbiBjb25mbGljdCB3aXRoIHRyYW5zZm9ybQogICAgICAgICAgICBkcmFnX21heF90b3VjaGVzICA6IDEsCiAgICAgICAgICAgIC8vIHByZXZlbnQgZGVmYXVsdCBicm93c2VyIGJlaGF2aW9yIHdoZW4gZHJhZ2dpbmcgb2NjdXJzCiAgICAgICAgICAgIC8vIGJlIGNhcmVmdWwgd2l0aCBpdCwgaXQgbWFrZXMgdGhlIGVsZW1lbnQgYSBibG9ja2luZyBlbGVtZW50CiAgICAgICAgICAgIC8vIHdoZW4geW91IGFyZSB1c2luZyB0aGUgZHJhZyBnZXN0dXJlLCBpdCBpcyBhIGdvb2QgcHJhY3RpY2UgdG8gc2V0IHRoaXMgdHJ1ZQogICAgICAgICAgICBkcmFnX2Jsb2NrX2hvcml6b250YWwgICA6IGZhbHNlLAogICAgICAgICAgICBkcmFnX2Jsb2NrX3ZlcnRpY2FsICAgICA6IGZhbHNlLAogICAgICAgICAgICAvLyBkcmFnX2xvY2tfdG9fYXhpcyBrZWVwcyB0aGUgZHJhZyBnZXN0dXJlIG9uIHRoZSBheGlzIHRoYXQgaXQgc3RhcnRlZCBvbiwKICAgICAgICAgICAgLy8gSXQgZGlzYWxsb3dzIHZlcnRpY2FsIGRpcmVjdGlvbnMgaWYgdGhlIGluaXRpYWwgZGlyZWN0aW9uIHdhcyBob3Jpem9udGFsLCBhbmQgdmljZSB2ZXJzYS4KICAgICAgICAgICAgZHJhZ19sb2NrX3RvX2F4aXMgICAgICAgOiBmYWxzZSwKICAgICAgICAgICAgLy8gZHJhZyBsb2NrIG9ubHkga2lja3MgaW4gd2hlbiBkaXN0YW5jZSA+IGRyYWdfbG9ja19taW5fZGlzdGFuY2UKICAgICAgICAgICAgLy8gVGhpcyB3YXksIGxvY2tpbmcgb2NjdXJzIG9ubHkgd2hlbiB0aGUgZGlzdGFuY2UgaGFzIGJlY29tZSBsYXJnZSBlbm91Z2ggdG8gcmVsaWFibHkgZGV0ZXJtaW5lIHRoZSBkaXJlY3Rpb24KICAgICAgICAgICAgZHJhZ19sb2NrX21pbl9kaXN0YW5jZSA6IDI1CiAgICAgICAgfSwKICAgICAgICB0cmlnZ2VyZWQ6IGZhbHNlLAogICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGRyYWdHZXN0dXJlKGV2LCBpbnN0KSB7CiAgICAgICAgICAgIC8vIGN1cnJlbnQgZ2VzdHVyZSBpc250IGRyYWcsIGJ1dCBkcmFnZ2VkIGlzIHRydWUKICAgICAgICAgICAgLy8gdGhpcyBtZWFucyBhbiBvdGhlciBnZXN0dXJlIGlzIGJ1c3kuIG5vdyBjYWxsIGRyYWdlbmQKICAgICAgICAgICAgaWYoSGFtbWVyLmRldGVjdGlvbi5jdXJyZW50Lm5hbWUgIT0gdGhpcy5uYW1lICYmIHRoaXMudHJpZ2dlcmVkKSB7CiAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIodGhpcy5uYW1lICsnZW5kJywgZXYpOwogICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gbWF4IHRvdWNoZXMKICAgICAgICAgICAgaWYoaW5zdC5vcHRpb25zLmRyYWdfbWF4X3RvdWNoZXMgPiAwICYmCiAgICAgICAgICAgICAgICBldi50b3VjaGVzLmxlbmd0aCA+IGluc3Qub3B0aW9ucy5kcmFnX21heF90b3VjaGVzKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXRjaChldi5ldmVudFR5cGUpIHsKICAgICAgICAgICAgICAgIGNhc2UgSGFtbWVyLkVWRU5UX1NUQVJUOgogICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcmVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSBIYW1tZXIuRVZFTlRfTU9WRToKICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBkaXN0YW5jZSB3ZSBtb3ZlZCBpcyB0b28gc21hbGwgd2Ugc2tpcCB0aGlzIGdlc3R1cmUKICAgICAgICAgICAgICAgICAgICAvLyBvciB3ZSBjYW4gYmUgYWxyZWFkeSBpbiBkcmFnZ2luZwogICAgICAgICAgICAgICAgICAgIGlmKGV2LmRpc3RhbmNlIDwgaW5zdC5vcHRpb25zLmRyYWdfbWluX2Rpc3RhbmNlICYmCiAgICAgICAgICAgICAgICAgICAgICAgIEhhbW1lci5kZXRlY3Rpb24uY3VycmVudC5uYW1lICE9IHRoaXMubmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgZHJhZ2dpbmchCiAgICAgICAgICAgICAgICAgICAgSGFtbWVyLmRldGVjdGlvbi5jdXJyZW50Lm5hbWUgPSB0aGlzLm5hbWU7CgogICAgICAgICAgICAgICAgICAgIC8vIGxvY2sgZHJhZyB0byBheGlzPwogICAgICAgICAgICAgICAgICAgIGlmKEhhbW1lci5kZXRlY3Rpb24uY3VycmVudC5sYXN0RXZlbnQuZHJhZ19sb2NrZWRfdG9fYXhpcyB8fCAoaW5zdC5vcHRpb25zLmRyYWdfbG9ja190b19heGlzICYmIGluc3Qub3B0aW9ucy5kcmFnX2xvY2tfbWluX2Rpc3RhbmNlPD1ldi5kaXN0YW5jZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXYuZHJhZ19sb2NrZWRfdG9fYXhpcyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciBsYXN0X2RpcmVjdGlvbiA9IEhhbW1lci5kZXRlY3Rpb24uY3VycmVudC5sYXN0RXZlbnQuZGlyZWN0aW9uOwogICAgICAgICAgICAgICAgICAgIGlmKGV2LmRyYWdfbG9ja2VkX3RvX2F4aXMgJiYgbGFzdF9kaXJlY3Rpb24gIT09IGV2LmRpcmVjdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBrZWVwIGRpcmVjdGlvbiBvbiB0aGUgYXhpcyB0aGF0IHRoZSBkcmFnIGdlc3R1cmUgc3RhcnRlZCBvbgogICAgICAgICAgICAgICAgICAgICAgICBpZihIYW1tZXIudXRpbHMuaXNWZXJ0aWNhbChsYXN0X2RpcmVjdGlvbikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2LmRpcmVjdGlvbiA9IChldi5kZWx0YVkgPCAwKSA/IEhhbW1lci5ESVJFQ1RJT05fVVAgOiBIYW1tZXIuRElSRUNUSU9OX0RPV047CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5kaXJlY3Rpb24gPSAoZXYuZGVsdGFYIDwgMCkgPyBIYW1tZXIuRElSRUNUSU9OX0xFRlQgOiBIYW1tZXIuRElSRUNUSU9OX1JJR0hUOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyBmaXJzdCB0aW1lLCB0cmlnZ2VyIGRyYWdzdGFydCBldmVudAogICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLnRyaWdnZXJlZCkgewogICAgICAgICAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIodGhpcy5uYW1lICsnc3RhcnQnLCBldik7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcmVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgbm9ybWFsIGV2ZW50CiAgICAgICAgICAgICAgICAgICAgaW5zdC50cmlnZ2VyKHRoaXMubmFtZSwgZXYpOwoKICAgICAgICAgICAgICAgICAgICAvLyBkaXJlY3Rpb24gZXZlbnQsIGxpa2UgZHJhZ2Rvd24KICAgICAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIodGhpcy5uYW1lICsgZXYuZGlyZWN0aW9uLCBldik7CgogICAgICAgICAgICAgICAgICAgIC8vIGJsb2NrIHRoZSBicm93c2VyIGV2ZW50cwogICAgICAgICAgICAgICAgICAgIGlmKCAoaW5zdC5vcHRpb25zLmRyYWdfYmxvY2tfdmVydGljYWwgJiYgSGFtbWVyLnV0aWxzLmlzVmVydGljYWwoZXYuZGlyZWN0aW9uKSkgfHwKICAgICAgICAgICAgICAgICAgICAgICAgKGluc3Qub3B0aW9ucy5kcmFnX2Jsb2NrX2hvcml6b250YWwgJiYgIUhhbW1lci51dGlscy5pc1ZlcnRpY2FsKGV2LmRpcmVjdGlvbikpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgIGNhc2UgSGFtbWVyLkVWRU5UX0VORDoKICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIGRyYWdlbmQKICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnRyaWdnZXJlZCkgewogICAgICAgICAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIodGhpcy5uYW1lICsnZW5kJywgZXYpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07CgoKICAgIC8qKgogICAgICogVHJhbnNmb3JtCiAgICAgKiBVc2VyIHdhbnQgdG8gc2NhbGUgb3Igcm90YXRlIHdpdGggMiBmaW5nZXJzCiAgICAgKiBAZXZlbnRzICB0cmFuc2Zvcm0sIHBpbmNoLCBwaW5jaGluLCBwaW5jaG91dCwgcm90YXRlCiAgICAgKi8KICAgIEhhbW1lci5nZXN0dXJlcy5UcmFuc2Zvcm0gPSB7CiAgICAgICAgbmFtZTogJ3RyYW5zZm9ybScsCiAgICAgICAgaW5kZXg6IDQ1LAogICAgICAgIGRlZmF1bHRzOiB7CiAgICAgICAgICAgIC8vIGZhY3Rvciwgbm8gc2NhbGUgaXMgMSwgem9vbWluIGlzIHRvIDAgYW5kIHpvb21vdXQgdW50aWwgaGlnaGVyIHRoZW4gMQogICAgICAgICAgICB0cmFuc2Zvcm1fbWluX3NjYWxlICAgICA6IDAuMDEsCiAgICAgICAgICAgIC8vIHJvdGF0aW9uIGluIGRlZ3JlZXMKICAgICAgICAgICAgdHJhbnNmb3JtX21pbl9yb3RhdGlvbiAgOiAxLAogICAgICAgICAgICAvLyBwcmV2ZW50IGRlZmF1bHQgYnJvd3NlciBiZWhhdmlvciB3aGVuIHR3byB0b3VjaGVzIGFyZSBvbiB0aGUgc2NyZWVuCiAgICAgICAgICAgIC8vIGJ1dCBpdCBtYWtlcyB0aGUgZWxlbWVudCBhIGJsb2NraW5nIGVsZW1lbnQKICAgICAgICAgICAgLy8gd2hlbiB5b3UgYXJlIHVzaW5nIHRoZSB0cmFuc2Zvcm0gZ2VzdHVyZSwgaXQgaXMgYSBnb29kIHByYWN0aWNlIHRvIHNldCB0aGlzIHRydWUKICAgICAgICAgICAgdHJhbnNmb3JtX2Fsd2F5c19ibG9jayAgOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgdHJpZ2dlcmVkOiBmYWxzZSwKICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbiB0cmFuc2Zvcm1HZXN0dXJlKGV2LCBpbnN0KSB7CiAgICAgICAgICAgIC8vIGN1cnJlbnQgZ2VzdHVyZSBpc250IGRyYWcsIGJ1dCBkcmFnZ2VkIGlzIHRydWUKICAgICAgICAgICAgLy8gdGhpcyBtZWFucyBhbiBvdGhlciBnZXN0dXJlIGlzIGJ1c3kuIG5vdyBjYWxsIGRyYWdlbmQKICAgICAgICAgICAgaWYoSGFtbWVyLmRldGVjdGlvbi5jdXJyZW50Lm5hbWUgIT0gdGhpcy5uYW1lICYmIHRoaXMudHJpZ2dlcmVkKSB7CiAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIodGhpcy5uYW1lICsnZW5kJywgZXYpOwogICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gYXRsZWFzdCBtdWx0aXRvdWNoCiAgICAgICAgICAgIGlmKGV2LnRvdWNoZXMubGVuZ3RoIDwgMikgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBwcmV2ZW50IGRlZmF1bHQgd2hlbiB0d28gZmluZ2VycyBhcmUgb24gdGhlIHNjcmVlbgogICAgICAgICAgICBpZihpbnN0Lm9wdGlvbnMudHJhbnNmb3JtX2Fsd2F5c19ibG9jaykgewogICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3dpdGNoKGV2LmV2ZW50VHlwZSkgewogICAgICAgICAgICAgICAgY2FzZSBIYW1tZXIuRVZFTlRfU1RBUlQ6CiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlIEhhbW1lci5FVkVOVF9NT1ZFOgogICAgICAgICAgICAgICAgICAgIHZhciBzY2FsZV90aHJlc2hvbGQgPSBNYXRoLmFicygxLWV2LnNjYWxlKTsKICAgICAgICAgICAgICAgICAgICB2YXIgcm90YXRpb25fdGhyZXNob2xkID0gTWF0aC5hYnMoZXYucm90YXRpb24pOwoKICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBkaXN0YW5jZSB3ZSBtb3ZlZCBpcyB0b28gc21hbGwgd2Ugc2tpcCB0aGlzIGdlc3R1cmUKICAgICAgICAgICAgICAgICAgICAvLyBvciB3ZSBjYW4gYmUgYWxyZWFkeSBpbiBkcmFnZ2luZwogICAgICAgICAgICAgICAgICAgIGlmKHNjYWxlX3RocmVzaG9sZCA8IGluc3Qub3B0aW9ucy50cmFuc2Zvcm1fbWluX3NjYWxlICYmCiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uX3RocmVzaG9sZCA8IGluc3Qub3B0aW9ucy50cmFuc2Zvcm1fbWluX3JvdGF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2Zvcm1pbmchCiAgICAgICAgICAgICAgICAgICAgSGFtbWVyLmRldGVjdGlvbi5jdXJyZW50Lm5hbWUgPSB0aGlzLm5hbWU7CgogICAgICAgICAgICAgICAgICAgIC8vIGZpcnN0IHRpbWUsIHRyaWdnZXIgZHJhZ3N0YXJ0IGV2ZW50CiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMudHJpZ2dlcmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGluc3QudHJpZ2dlcih0aGlzLm5hbWUgKydzdGFydCcsIGV2KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaW5zdC50cmlnZ2VyKHRoaXMubmFtZSwgZXYpOyAvLyBiYXNpYyB0cmFuc2Zvcm0gZXZlbnQKCiAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciByb3RhdGUgZXZlbnQKICAgICAgICAgICAgICAgICAgICBpZihyb3RhdGlvbl90aHJlc2hvbGQgPiBpbnN0Lm9wdGlvbnMudHJhbnNmb3JtX21pbl9yb3RhdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIoJ3JvdGF0ZScsIGV2KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgcGluY2ggZXZlbnQKICAgICAgICAgICAgICAgICAgICBpZihzY2FsZV90aHJlc2hvbGQgPiBpbnN0Lm9wdGlvbnMudHJhbnNmb3JtX21pbl9zY2FsZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIoJ3BpbmNoJywgZXYpOwogICAgICAgICAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIoJ3BpbmNoJysgKChldi5zY2FsZSA8IDEpID8gJ2luJyA6ICdvdXQnKSwgZXYpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlIEhhbW1lci5FVkVOVF9FTkQ6CiAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBkcmFnZW5kCiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy50cmlnZ2VyZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaW5zdC50cmlnZ2VyKHRoaXMubmFtZSArJ2VuZCcsIGV2KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcmVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwoKCiAgICAvKioKICAgICAqIFRvdWNoCiAgICAgKiBDYWxsZWQgYXMgZmlyc3QsIHRlbGxzIHRoZSB1c2VyIGhhcyB0b3VjaGVkIHRoZSBzY3JlZW4KICAgICAqIEBldmVudHMgIHRvdWNoCiAgICAgKi8KICAgIEhhbW1lci5nZXN0dXJlcy5Ub3VjaCA9IHsKICAgICAgICBuYW1lOiAndG91Y2gnLAogICAgICAgIGluZGV4OiAtSW5maW5pdHksCiAgICAgICAgZGVmYXVsdHM6IHsKICAgICAgICAgICAgLy8gY2FsbCBwcmV2ZW50RGVmYXVsdCBhdCB0b3VjaHN0YXJ0LCBhbmQgbWFrZXMgdGhlIGVsZW1lbnQgYmxvY2tpbmcgYnkKICAgICAgICAgICAgLy8gZGlzYWJsaW5nIHRoZSBzY3JvbGxpbmcgb2YgdGhlIHBhZ2UsIGJ1dCBpdCBpbXByb3ZlcyBnZXN0dXJlcyBsaWtlCiAgICAgICAgICAgIC8vIHRyYW5zZm9ybWluZyBhbmQgZHJhZ2dpbmcuCiAgICAgICAgICAgIC8vIGJlIGNhcmVmdWwgd2l0aCB1c2luZyB0aGlzLCBpdCBjYW4gYmUgdmVyeSBhbm5veWluZyBmb3IgdXNlcnMgdG8gYmUgc3R1Y2sKICAgICAgICAgICAgLy8gb24gdGhlIHBhZ2UKICAgICAgICAgICAgcHJldmVudF9kZWZhdWx0OiBmYWxzZSwKCiAgICAgICAgICAgIC8vIGRpc2FibGUgbW91c2UgZXZlbnRzLCBzbyBvbmx5IHRvdWNoIChvciBwZW4hKSBpbnB1dCB0cmlnZ2VycyBldmVudHMKICAgICAgICAgICAgcHJldmVudF9tb3VzZWV2ZW50czogZmFsc2UKICAgICAgICB9LAogICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIHRvdWNoR2VzdHVyZShldiwgaW5zdCkgewogICAgICAgICAgICBpZihpbnN0Lm9wdGlvbnMucHJldmVudF9tb3VzZWV2ZW50cyAmJiBldi5wb2ludGVyVHlwZSA9PSBIYW1tZXIuUE9JTlRFUl9NT1VTRSkgewogICAgICAgICAgICAgICAgZXYuc3RvcERldGVjdCgpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZihpbnN0Lm9wdGlvbnMucHJldmVudF9kZWZhdWx0KSB7CiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZihldi5ldmVudFR5cGUgPT0gIEhhbW1lci5QT0lOVEVSX01PVVNFKSB7CiAgICAgICAgICAgICAgICBpbnN0LnRyaWdnZXIodGhpcy5uYW1lLCBldik7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwoKCiAgICAvKioKICAgICAqIFJlbGVhc2UKICAgICAqIENhbGxlZCBhcyBsYXN0LCB0ZWxscyB0aGUgdXNlciBoYXMgcmVsZWFzZWQgdGhlIHNjcmVlbgogICAgICogQGV2ZW50cyAgcmVsZWFzZQogICAgICovCiAgICBIYW1tZXIuZ2VzdHVyZXMuUmVsZWFzZSA9IHsKICAgICAgICBuYW1lOiAncmVsZWFzZScsCiAgICAgICAgaW5kZXg6IEluZmluaXR5LAogICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIHJlbGVhc2VHZXN0dXJlKGV2LCBpbnN0KSB7CiAgICAgICAgICAgIGlmKGV2LmV2ZW50VHlwZSA9PSAgSGFtbWVyLkVWRU5UX0VORCkgewogICAgICAgICAgICAgICAgaW5zdC50cmlnZ2VyKHRoaXMubmFtZSwgZXYpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKCiAgICBvLmdlc3R1cmUgPSBIYW1tZXI7Cgp9KShvY3RvcHVzKTsvKioKICogQGZpbGUKICogd2ViYXBw6YCa55So57uE5Lu25Z+656GA5bqT5paH5Lu2CiAqIOWKqOeUu+mDqOWIhgogKiBAcmVxdWlyZSBsaWIvY2xhc3MuanMKICogQHJlcXVpcmUgbGliL3V0aWwuanMKICogQHJlcXVpcmUgbGliL2V2ZW50LmpzCiAqIEBhdXRob3Igb3VwZW5nLWZlCiAqIEB2ZXJzaW9uIDEuMQogKi8KOyhmdW5jdGlvbihvLCB1bmRlZmluZWQpIHsKCiAgICAidXNlIHN0cmljdCI7CgogICAgLyoqCiAgICAgKiBAY2xhc3Mgb2N0b3B1cy5Ud2VlbgogICAgICogQGRlc2Mg5Yqo55S757G777yM5Y+v5Lul6YCa6L+H5pS55Y+Y5bGe5oCn44CB6LW35aeL5YC844CB57uT5p2f5YC8562J6YWN572u6K6p5oyH5a6a6IqC54K55a6M5oiQ5Yqo5oCB6L+H5rihCiAgICAgKiDms6jmhI/vvJrnlLHkuo7mg4XlhrXov4fkuo7lpI3mnYIg5Yeh5piv5pS55Y+Y5bGe5oCn5pivdHJhbnNmb3Jt5bGe5oCn5oiW5YyF5ZCrdHJhbnNmb3Jt5bGe5oCn55qE5Yqo55S7IOWPquiDveaMieeFp2NzczPnmoTlvaLlvI/ov5vooYwg6buY6K6k5Yqo55S757G75Z6L5pivZWFzZS1vdXQKICAgICAqIEBwYXJhbSBlbCB7RE9NRWxlbWVudH0g5oyH5a6a5a6M5oiQ5Yqo55S755qE6IqC54K5CiAgICAgKiBAcGFyYW0gcHJvIHtTdHJpbmcgfCBBcnJheX0g5b6F5pS55Y+Y55qE5bGe5oCnIOWPr+S4uuWkmuWAvAogICAgICogQHBhcmFtIHN0YXJ0diB7U3RyaW5nIHwgTnVtYmVyIHwgQXJyYXl9IOi1t+Wni+WAvCDlpoLkuLrmlbDnu4Qg5b+F6aG75LiO5pS55Y+Y5bGe5oCn5LiA5LiA5a+55bqUIOWQpuWImeS8muaKm+mUmQogICAgICogQHBhcmFtIGVuZHYge1N0cmluZyB8IE51bWJlciB8IEFycmF5fSDnu5PmnZ/lgLwg5YW35L2T6KaB5rGC5ZCM6LW35aeL5YC8CiAgICAgKiBAcGFyYW0gZHVyYXRpb24ge051bWJlcn0g5Yqo5YyW6L+H5rih55qE5pe26Ze0IOWNleS9jeS4uuenki9zCiAgICAgKiBAcGFyYW0gZnVuYyB7RnVuY3Rpb259IOWKqOeUu+e7k+adn+eahOWbnuiwg+WHveaVsAogICAgICogQHBhcmFtIG9wdGlvbnMge09iamVjdH0g5YW25LuW6YWN572u6aG5IOWPr+S4uuepuiDpu5jorqTkuLpqc+WKqOeUuyDliqjnlLvnsbvlnovkuLoib2N0b3B1cy5lYXNpbmcuIgogICAgICogQHBhcmFtIG9wdGlvbnMuZWFzZSB7U3RyaW5nIHwgT2JqZWN0fSDliqjnlLvnsbsg5aaC5p6c5Li65a2X56ym5LiyIOWImemHh+eUqGNzczPnmoR0cmFuc2l0aW9u5Yqo55S7IOWQpuWImemcgOimgeS8oOWFpSJvY3RvcHVzLmVhc2luZy5YWFgi55qE5Yqo55S75a+56LGhCiAgICAgKiBAZXhhbXBsZQogICAgICogdmFyIG5ld3R3ZWVuID0gbmV3IFR3ZWVuKGVsLCBbIndpZHRoIiwgIndlYmtpdFRyYW5zZm9ybSJdLCBbNjQsICJ0cmFuc2xhdGUzZCgwLCAwLCAwKSJdLAogICAgICogIFsxMjgsICJ0cmFuc2xhdGUzZCgzMHB4LCAwLCAwKSJdLCAuNCwgZnVuY3Rpb24oKSB7CiAgICAgKiAgICAgY29uc29sZS5sb2coQW5pbWF0aW9uIGZpbmlzaGVkISk7CiAgICAgKiB9LCB7CiAgICAgKiAgICAgZWFzZTogImVhc2Utb3V0IiB8IG9jdG9wdXMuZWFzaW5nLmxpbmVhci5lYXNlT3V0CiAgICAgKiB9KTsKICAgICAqIEB0aHJvdwogICAgICogQHJldHVybiB7b2N0b3B1cy5Ud2Vlbn0KICAgICAqLwogICAgby5Ud2VlbiA9IG8uZGVmaW5lKHsKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgZWwKICAgICAgICAgKiB7RE9NRWxlbWVudH0KICAgICAgICAgKi8KICAgICAgICBlbDogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgcHJvcGVydHlOYW1lCiAgICAgICAgICoge1N0cmluZ30KICAgICAgICAgKi8KICAgICAgICBwcm9wZXJ0eU5hbWU6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IHN0YXJ0VmFsdWUKICAgICAgICAgKiB7U3RyaW5nfQogICAgICAgICAqLwogICAgICAgIHN0YXJ0VmFsdWU6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IGVuZFZhbHVlCiAgICAgICAgICoge1N0cmluZ30KICAgICAgICAgKi8KICAgICAgICBlbmRWYWx1ZTogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgZHVyYXRpb24KICAgICAgICAgKiB7TnVtYmVyfQogICAgICAgICAqLwogICAgICAgIGR1cmF0aW9uOiBudWxsLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSBmdW5jCiAgICAgICAgICoge0Z1bmN0aW9ufQogICAgICAgICAqLwogICAgICAgIGZ1bmM6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IGVhc2UKICAgICAgICAgKiB7T2JqZWN0fQogICAgICAgICAqLwogICAgICAgIGVhc2U6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IG5lZWRQYXJhbXMKICAgICAgICAgKiB7QXJyYXl9CiAgICAgICAgICovCiAgICAgICAgbmVlZFBhcmFtczogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgcGFyYW1zRGljcwogICAgICAgICAqIHtBcnJheX0KICAgICAgICAgKi8KICAgICAgICBwYXJhbXNEaWNzOiBudWxsLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSByZXF1ZXN0QW5pbWF0aW9uCiAgICAgICAgICoge09iamVjdH0KICAgICAgICAgKi8KICAgICAgICByZXF1ZXN0QW5pbWF0aW9uOiBudWxsLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSBjb2xvckxpc3QKICAgICAgICAgKiB7QXJyYXl9CiAgICAgICAgICovCiAgICAgICAgY29sb3JMaXN0OiBudWxsLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSBzdG9wUmVxdWVzdAogICAgICAgICAqIHtCb29sZWFufQogICAgICAgICAqLwogICAgICAgIHN0b3BSZXF1ZXN0OiB0cnVlLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSB2ZWN0b3IKICAgICAgICAgKiB7T2JqZWN0fQogICAgICAgICAqLwogICAgICAgIHZlY3RvcjogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgcHJlZml4CiAgICAgICAgICoge1N0cmluZ30KICAgICAgICAgKi8KICAgICAgICBwcmVmaXg6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IGV2ZW50UHJlZml4CiAgICAgICAgICoge1N0cmluZ30KICAgICAgICAgKi8KICAgICAgICBldmVudFByZWZpeDogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgaXNPZmZDc3MKICAgICAgICAgKiB7Qm9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBpc09mZkNzczogZmFsc2UsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IGVuZEV2ZW50CiAgICAgICAgICoge1N0cmluZ30KICAgICAgICAgKi8KICAgICAgICBlbmRFdmVudDogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgaXNUcmFuc2Zvcm0KICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn0KICAgICAgICAgKi8KICAgICAgICBpc1RyYW5zZm9ybTogZmFsc2UsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IGV2ZW50VGltZXIKICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAqLwogICAgICAgIGV2ZW50VGltZXI6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IGRlbGF5CiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKi8KICAgICAgICBkZWxheTogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAY29uc3RydWN0b3Igb2N0b3B1cy5Ud2VlbgogICAgICAgICAqLwogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGVsLCBwcm8sIHN0YXJ0diwgZW5kdiwgZHVyYXRpb24sIGZ1bmMsIG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYoIW8udXRpbC5pc05vZGUoZWwpKSAgICB0aHJvdyBuZXcgRXJyb3IoInJlcXVpcmUgYSBub2RlISIpOwogICAgICAgICAgICBvLmV4dGVuZCh0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgdGhpcy5lbCA9IGVsOwogICAgICAgICAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHBybzsKICAgICAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gc3RhcnR2OwogICAgICAgICAgICB0aGlzLmVuZFZhbHVlID0gZW5kdjsKICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uOwogICAgICAgICAgICB0aGlzLmZ1bmMgPSBmdW5jIHx8IG8udXRpbC5lbXB0eTsKICAgICAgICAgICAgdGhpcy5uZWVkUGFyYW1zID0gW107CiAgICAgICAgICAgIHRoaXMuY29sb3JMaXN0ID0gW107CiAgICAgICAgICAgIHRoaXMucGFyYW1zRGljcyA9IFsid2lkdGgiLCAiaGVpZ2h0IiwgImxlZnQiLCAidG9wIiwgInJpZ2h0IiwgImJvdHRvbSIsICJwYWRkaW5nIiwKICAgICAgICAgICAgICAgICJwYWRkaW5nLWxlZnQiLCAicGFkZGluZy10b3AiLCAicGFkZGluZy1ib3R0b20iLCAicGFkZGluZy1yaWdodCIsICJtYXJnaW4iLAogICAgICAgICAgICAgICAgIm1hcmdpbi1sZWZ0IiwgIm1hcmdpbi10b3AiLCAibWFyZ2luLWJvdHRvbSIsICJtYXJnaW4tcmlnaHQiLCAiZm9udC1zaXplIiwKICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLXBvc2l0aW9uIiwgImxpbmUtaGVpZ2h0IiwgImJvcmRlci13aWR0aCIsICJib3JkZXItbGVmdC13aWR0aCIsCiAgICAgICAgICAgICAgICAiYm9yZGVyLXRvcC13aWR0aCIsICJib3JkZXItcmlnaHQtd2lkdGgiLCAiYm9yZGVyLWJvdHRvbS13aWR0aCJdOwogICAgICAgICAgICB2YXIgbGVnYWxpdHkgPSB0aGlzLmNoZWNrKCk7CiAgICAgICAgICAgIHRoaXMuZWFzZSA9IHRoaXMuZWFzZSB8fCAodGhpcy5pc1RyYW5zZm9ybSA/ICJlYXNlLW91dCIgOiBvLmVhc2luZy5saW5lYXIuZWFzZU91dCk7CiAgICAgICAgICAgIHRoaXMuZGVsYXkgPSB0aGlzLmRlbGF5IHx8IDA7CiAgICAgICAgICAgIGlmKCFsZWdhbGl0eSkgdGhyb3cgbmV3IEVycm9yKCJJbGxlZ2FsIGFyZ3VtZW50cyEiKTsKICAgICAgICAgICAgaWYoby51dGlsLmlzT2JqZWN0KHRoaXMuZWFzZSkgJiYgIXRoaXMuaXNUcmFuc2Zvcm0pIHsKICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbiA9IG8udXRpbC5yZXF1ZXN0QW5pbWF0aW9uOwogICAgICAgICAgICAgICAgaWYodGhpcy5kZWxheSA+IDApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuZXhlY3V0ZVdpdGhKcygpOwogICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuZGVsYXkgKiAxMDAwKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlV2l0aEpzKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLnZlY3RvciA9IHsiIiA6ICIiLCBXZWJraXQ6ICJ3ZWJraXQiLCBNb3o6ICIiLCBPOiAibyIsIG1zOiAiTVMifTsKICAgICAgICAgICAgICAgIGZvcih2YXIgayBpbiB0aGlzLnZlY3RvcikgewogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVsLnN0eWxlW2sgKyAiVHJhbnNpdGlvblByb3BlcnR5Il0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWZpeCA9ICctJyArIGsudG9Mb3dlckNhc2UoKSArICctJwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50UHJlZml4ID0gdGhpcy52ZWN0b3Jba10KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5pc09mZkNzcyA9ICh0aGlzLmV2ZW50UHJlZml4ID09IG51bGwgJiYgdGhpcy5lbC5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgPT0gdW5kZWZpbmVkKTsKICAgICAgICAgICAgICAgIHRoaXMuZW5kRXZlbnQgPSB0aGlzLmV2ZW50UHJlZml4ID8gdGhpcy5ldmVudFByZWZpeCArICJUcmFuc2l0aW9uRW5kIiA6ICJ0cmFuc2l0aW9uRW5kIjsKICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZVdpdGhDc3MoKTsKICAgICAgICAgICAgfQoKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBtZXRob2QgY2hlY2sKICAgICAgICAgKiBAZGVzYyDmo4Dmn6Xlj4LmlbDmmK/lkKZvawogICAgICAgICAqLwogICAgICAgIGNoZWNrOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHF1ZXVlID0gby51dGlsLmlzQXJyYXkodGhpcy5wcm9wZXJ0eU5hbWUpICYmCiAgICAgICAgICAgICAgICAgICAgby51dGlsLmlzQXJyYXkodGhpcy5zdGFydFZhbHVlKSAmJiBvLnV0aWwuaXNBcnJheSh0aGlzLmVuZFZhbHVlKSwKICAgICAgICAgICAgICAgIHBhc3MgPSBmYWxzZSwKICAgICAgICAgICAgICAgIF9wYXNzOwogICAgICAgICAgICBpZighcXVldWUpewogICAgICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBbdGhpcy5wcm9wZXJ0eU5hbWVdOwogICAgICAgICAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gW3RoaXMuc3RhcnRWYWx1ZV07CiAgICAgICAgICAgICAgICB0aGlzLmVuZFZhbHVlID0gW3RoaXMuZW5kVmFsdWVdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBwYXJhbXNNYXRjaCA9ICh0aGlzLnByb3BlcnR5TmFtZS5sZW5ndGggPT0gdGhpcy5zdGFydFZhbHVlLmxlbmd0aCkgJiYKICAgICAgICAgICAgICAgICAgICAodGhpcy5zdGFydFZhbHVlLmxlbmd0aCA9PSB0aGlzLmVuZFZhbHVlLmxlbmd0aCk7CiAgICAgICAgICAgIGlmKHBhcmFtc01hdGNoKSB7CiAgICAgICAgICAgICAgICB2YXIgdW5PayA9IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIGxlbiA9IHRoaXMucHJvcGVydHlOYW1lLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICBpID0gbGVuOwogICAgICAgICAgICAgICAgZm9yKDsgaS0tOyApIHsKICAgICAgICAgICAgICAgICAgICBfcGFzcyA9IHRoaXMuY2hlY2tWYWx1ZSh0aGlzLnByb3BlcnR5TmFtZVtpXSwgdGhpcy5zdGFydFZhbHVlW2ldLCB0aGlzLmVuZFZhbHVlW2ldKTsKICAgICAgICAgICAgICAgICAgICBpZighX3Bhc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdW5PayA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMubmVlZFBhcmFtc1tpXSA9IHRoaXMucGFyYW1zRGljcy5pbmRleE9mKHRoaXMucHJvcGVydHlOYW1lW2ldKSAhPSAtMTsKICAgICAgICAgICAgICAgICAgICB2YXIgaXNDb2xvciA9IG5ldyBSZWdFeHAoIi9jb2xvcnxiYWNrZ3JvdW5kLWNvbG9yfGJvcmRlci1jb2xvci9pIikudGVzdCh0aGlzLnByb3BlcnR5TmFtZVtpXSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvckxpc3RbaV0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29sb3I6IGlzQ29sb3IsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IGlzQ29sb3IgPyB0aGlzLmdldENvbG9yKHRoaXMuc3RhcnRWYWx1ZVtpXSkgOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZTogaXNDb2xvciA/IHRoaXMuZ2V0Q29sb3IodGhpcy5lbmRWYWx1ZVtpXSkgOiBudWxsCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhc3MgPSAhdW5PayAmJiAhaXNOYU4odGhpcy5kdXJhdGlvbik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwYXNzID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHBhc3M7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAbWV0aG9kIGNoZWNrVmFsdWUKICAgICAgICAgKiBAZGVzYyDpqozor4HlgLzmmK/lkKblkIjms5UKICAgICAgICAgKi8KICAgICAgICBjaGVja1ZhbHVlOiBmdW5jdGlvbihwcm9wZXJ0eU5hbWUsIHN0YXJ0VmFsdWUsIGVuZFZhbHVlKXsKICAgICAgICAgICAgdmFyIHBhc3MgPSBmYWxzZTsKICAgICAgICAgICAgaWYoL3RyYW5zZm9ybS9pLnRlc3QocHJvcGVydHlOYW1lKSB8fCAvLXdlYmtpdC0vaS50ZXN0KHByb3BlcnR5TmFtZSkpIHsKICAgICAgICAgICAgICAgIHRoaXMuaXNUcmFuc2Zvcm0gPSB0cnVlOwogICAgICAgICAgICAgICAgcGFzcyA9ICEhc3RhcnRWYWx1ZSAmJiBvLnV0aWwuaXNTdHJpbmcoc3RhcnRWYWx1ZSkgJiYgISFlbmRWYWx1ZSAmJiBvLnV0aWwuaXNTdHJpbmcoZW5kVmFsdWUpCiAgICAgICAgICAgIH0gZWxzZSBpZihwcm9wZXJ0eU5hbWUuaW5kZXhPZignY29sb3InKSAhPSAtMSkgewogICAgICAgICAgICAgICAgdmFyIHJlZyA9IC8oXlxzKil8KFxzKiQpL2c7CiAgICAgICAgICAgICAgICBwYXNzID0gISFzdGFydFZhbHVlICYmIHN0YXJ0VmFsdWUucmVwbGFjZShyZWcsICcnKSAhPSAnJyAmJiAhISBlbmRWYWx1ZSAmJiBlbmRWYWx1ZS5yZXBsYWNlKHJlZywgJycpICE9ICcnCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwYXNzID0gIWlzTmFOKHN0YXJ0VmFsdWUpICYmICFpc05hTihlbmRWYWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHBhc3M7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAbWV0aG9kIGdldENvbG9yCiAgICAgICAgICovCiAgICAgICAgZ2V0Q29sb3I6IGZ1bmN0aW9uKHN0cikgewogICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvKF5ccyopfChccyokKS9nLCAnJyk7CiAgICAgICAgICAgIHZhciByZ2JSZWcgPSAvXlxzKnJnYlxzKlwoXHMqXGR7MSwzfVxzKlwsXHMqXGR7MSwzfVxzKlwsXHMqXGR7MSwzfVxzKlwpXHMqJC9pOwogICAgICAgICAgICB2YXIgc2l4UmVnQSA9IC9eXHMqXCNbYS16QS1aMC05XXszfVxzKiQvOwogICAgICAgICAgICB2YXIgc2l4UmVnQiA9IC9eXHMqXCNbYS16QS1aMC05XXs2fVxzKiQvOwogICAgICAgICAgICB2YXIgYXJyID0gW107CiAgICAgICAgICAgIGlmKHJnYlJlZy50ZXN0KHN0cikpeyAvLyDku6VSR0LlvaLlvI/mjIflrprnmoTpopzoibIKICAgICAgICAgICAgICAgIHZhciBuU3RyID0gc3RyLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpOwogICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCA7IGkgPCBuU3RyLmxlbmd0aCA7IGkgKyspewogICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKG5TdHJbaV0gLyAxKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBhcnI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoc2l4UmVnQi50ZXN0KHN0cikpIHsgLy8g5LulMTbov5vliLbmjIflrprpopzoibIgKDbkvY0pCiAgICAgICAgICAgICAgICB2YXIgbSA9IHN0ci5yZXBsYWNlKCcjJywgJycpLm1hdGNoKC8oXHd8XGQpezJ9L2cpOwoKICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDAgOyBpIDwgbS5sZW5ndGg7IGkgKyspewogICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKE51bWJlcignMHgnICsgbVtpXSkudG9TdHJpbmcoMTApIC8gMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gYXJyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKHNpeFJlZ0EudGVzdChzdHIpKXsgLy8g5LulMTbov5vliLbmjIflrprpopzoibIoM+S9jSkKICAgICAgICAgICAgICAgIHZhciBjQXJyID0gc3RyLnJlcGxhY2UoJyMnLCAnJykuc3BsaXQoJycpOwogICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCA7IGkgPCBjQXJyLmxlbmd0aCA7IGkgKyspewogICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKE51bWJlcignMHgnICsgKGNBcnJbaV0gKyBjQXJyW2ldKSkudG9TdHJpbmcoMTApIC8gMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gYXJyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQG1ldGhvZCBleGVjdXRlV2l0aEpzCiAgICAgICAgICog5omn6KGMCiAgICAgICAgICovCiAgICAgICAgZXhlY3V0ZVdpdGhKczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuc3RvcFJlcXVlc3QgPSBmYWxzZTsKICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLAogICAgICAgICAgICAgICAgY3VyVGltZSA9IDA7CiAgICAgICAgICAgIHZhciBhbmltYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZighdGhhdC5lbCB8fCB0aGF0LnN0b3BSZXF1ZXN0KXsKICAgICAgICAgICAgICAgICAgICB0aGF0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGF0LmdldFNldFZhbHVlKGN1clRpbWUsIGZhbHNlKTsKICAgICAgICAgICAgICAgIGlmKGN1clRpbWUgPj0gdGhhdC5kdXJhdGlvbiAqIDEwMDApewogICAgICAgICAgICAgICAgICAgIHRoYXQuZ2V0U2V0VmFsdWUobnVsbCwgdHJ1ZSk7CgogICAgICAgICAgICAgICAgICAgIHRoYXQuZnVuYyAmJiB0aGF0LmZ1bmMoKTsKICAgICAgICAgICAgICAgICAgICB0aGF0LmVsID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjdXJUaW1lICs9IDE2OwogICAgICAgICAgICAgICAgdGhhdC5yZXF1ZXN0QW5pbWF0aW9uKGFuaW1hdGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbihhbmltYXRlLCB0aGlzLmVsKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBtZXRob2QgZXhlY3V0ZVdpdGhDc3MKICAgICAgICAgKi8KICAgICAgICBleGVjdXRlV2l0aENzczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmKHRoaXMuaXNPZmZDc3MpIHRoaXMuZHVyYXRpb24gPSAwOwogICAgICAgICAgICB2YXIgcHJvYXJyID0gdGhpcy5wcm9wZXJ0eU5hbWUsCiAgICAgICAgICAgICAgICBsZW4gPSBwcm9hcnIubGVuZ3RoLAogICAgICAgICAgICAgICAgdGhhdCA9IHRoaXMsCiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uQXJyID0gW10sCiAgICAgICAgICAgICAgICBfcHJlZml4ID0gdGhpcy5wcmVmaXggKyAidHJhbnNpdGlvbiI7CiAgICAgICAgICAgIHRoaXMuZWwuc3R5bGVbX3ByZWZpeF0gPSAiIjsKICAgICAgICAgICAgby51dGlsLmVhY2gocHJvYXJyLCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgdGhhdC5lbC5zdHlsZVtpdGVtXSA9IHRoYXQuZ2V0VmFsdWUodGhhdC5zdGFydFZhbHVlW2luZGV4XSwgaW5kZXgpOwogICAgICAgICAgICAgICAgdHJhbnNpdGlvbkFyci5wdXNoKGl0ZW0gKyAiICIgKyB0aGF0LmR1cmF0aW9uICsgInMgIiArIHRoYXQuZWFzZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBvLmV2ZW50Lm9uKHRoaXMuZWwsIHRoaXMuZW5kRXZlbnQsIG8udXRpbC5iaW5kQXNFdmVudExpc3RlbmVyKHRoaXMub25FbmRFdmVudENvbXBsZXRlZCwgdGhpcyksIGZhbHNlKTsKICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB0aGF0LmVsLnN0eWxlW19wcmVmaXhdID0gdHJhbnNpdGlvbkFyci5qb2luKCIsICIpOwogICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhhdDsKICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB6ID0gMDsKICAgICAgICAgICAgICAgICAgICBmb3IoOyB6IDwgbGVuOyB6KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1clZhbHVlID0gX3RoaXMuZW5kVmFsdWVbel07CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmVsLnN0eWxlW3Byb2Fyclt6XV0gPSBfdGhpcy5nZXRWYWx1ZShjdXJWYWx1ZSwgeik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF90aGlzLmNsZWFyRXZlbnRUaW1lcigpOwogICAgICAgICAgICAgICAgICAgIF90aGlzLmV2ZW50VGltZXIgPSBzZXRUaW1lb3V0KG8udXRpbC5iaW5kKF90aGlzLm9uRmluaXNoLCBfdGhpcyksIF90aGlzLmR1cmF0aW9uICogMTAwMCk7CgogICAgICAgICAgICAgICAgfSwgdGhhdC5kZWxheSAqIDEwMDApOwogICAgICAgICAgICB9LCAwKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBtZXRob2QgY2xlYXJFdmVudFRpbWVyCiAgICAgICAgICovCiAgICAgICAgY2xlYXJFdmVudFRpbWVyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYodGhpcy5ldmVudFRpbWVyKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuZXZlbnRUaW1lcik7CiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50VGltZXIgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAbWV0aG9kIG9uRmluaXNoCiAgICAgICAgICovCiAgICAgICAgb25GaW5pc2g6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZih0aGlzLmVsKSB7CiAgICAgICAgICAgICAgICBvLmV2ZW50LnN0b3BFdmVudE9ic2VydmVyKHRoaXMuZWwsIHRoaXMuZW5kRXZlbnQpOwogICAgICAgICAgICAgICAgdGhpcy5lbC5zdHlsZVt0aGlzLnByZWZpeCArICJ0cmFuc2l0aW9uIl0gPSAiIjsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmZ1bmMgJiYgdGhpcy5mdW5jKCk7CiAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQG1ldGhvZCBvbkVuZEV2ZW50Q29tcGxldGVkCiAgICAgICAgICovCiAgICAgICAgb25FbmRFdmVudENvbXBsZXRlZDogZnVuY3Rpb24oZSkgewogICAgICAgICAgICBpZihlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSAgICByZXR1cm47CiAgICAgICAgICAgIHRoaXMuY2xlYXJFdmVudFRpbWVyKCk7CiAgICAgICAgICAgIHRoaXMub25GaW5pc2goKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuVHdlZW4uc3RvcAogICAgICAgICAqIEBkZXNjIOWBnOaOieWKqOeUuyDlubbop6PohLHoh6rmiJEKICAgICAgICAgKi8KICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYodGhpcy5lbmRFdmVudCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICB0aGlzLnN0b3BSZXF1ZXN0ID0gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZnVuYyAmJiB0aGlzLmZ1bmMoKTsKICAgICAgICAgICAgICAgIGlmKHRoaXMuZWwpIHsKICAgICAgICAgICAgICAgICAgICBvLmV2ZW50LnN0b3BFdmVudE9ic2VydmVyKHRoaXMuZWwsIHRoaXMuZW5kRXZlbnQpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZWwuc3R5bGVbdGhpcy5wcmVmaXggKyAidHJhbnNpdGlvbiJdID0gIiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLlR3ZWVuLmRlc3Ryb3kKICAgICAgICAgKiBAZGVzYyDnnIvlkI3lrZflsLHnn6XpgZPlubLlmJvnmoQKICAgICAgICAgKi8KICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5lbCA9IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAbWV0aG9kIGdldFNldFZhbHVlCiAgICAgICAgICogQGRlc2Mg5Y+W5Ye65b2T5YmN55qE5bGe5oCn5YC8CiAgICAgICAgICogUGFyYW1ldGVyczoKICAgICAgICAgKiBjdXJUaW1lICAtICAge051bWJlcn0KICAgICAgICAgKiBpc0VuZCAgICAtICAge0Jvb2xlYW59CiAgICAgICAgICovCiAgICAgICAgZ2V0U2V0VmFsdWU6IGZ1bmN0aW9uKGN1clRpbWUsIGlzRW5kKSB7CiAgICAgICAgICAgIHZhciB2YWx1ZUluZm8gPSBbXSwKICAgICAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICAgICAgaUxlbiA9IHRoaXMucHJvcGVydHlOYW1lLmxlbmd0aDsKICAgICAgICAgICAgZm9yKDsgaSA8IGlMZW47IGkrKykgewogICAgICAgICAgICAgICAgdmFyIGN1clZhbHVlOwogICAgICAgICAgICAgICAgaWYodGhpcy5jb2xvckxpc3RbaV0uaXNDb2xvcikgewogICAgICAgICAgICAgICAgICAgIHZhciBzdGFydFJSID0gdGhpcy5jb2xvckxpc3RbaV0uc3RhcnRWYWx1ZVswXSwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRHRyA9IHRoaXMuY29sb3JMaXN0W2ldLnN0YXJ0VmFsdWVbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QkIgPSB0aGlzLmNvbG9yTGlzdFtpXS5zdGFydFZhbHVlWzJdLAoKICAgICAgICAgICAgICAgICAgICAgICAgZW5kUlIgPSB0aGlzLmNvbG9yTGlzdFtpXS5lbmRWYWx1ZVswXSwKICAgICAgICAgICAgICAgICAgICAgICAgZW5kR0cgPSB0aGlzLmNvbG9yTGlzdFtpXS5lbmRWYWx1ZVsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgZW5kQkIgPSB0aGlzLmNvbG9yTGlzdFtpXS5lbmRWYWx1ZVsyXTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHJyLCBnZywgYmI7CiAgICAgICAgICAgICAgICAgICAgaWYoaXNFbmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcnIgPSBlbmRSUjsKICAgICAgICAgICAgICAgICAgICAgICAgZ2cgPSBlbmRHRzsKICAgICAgICAgICAgICAgICAgICAgICAgYmIgPSBlbmRCQjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByciA9IE1hdGguY2VpbCh0aGlzLmVhc2UoY3VyVGltZSwgc3RhcnRSUiwgZW5kUlIgLSBzdGFydFJSLCB0aGlzLmR1cmF0aW9uICogMTAwMCkpOwogICAgICAgICAgICAgICAgICAgICAgICBnZyA9IE1hdGguY2VpbCh0aGlzLmVhc2UoY3VyVGltZSwgc3RhcnRHRywgZW5kR0cgLSBzdGFydEdHLCB0aGlzLmR1cmF0aW9uICogMTAwMCkpOwogICAgICAgICAgICAgICAgICAgICAgICBiYiA9IE1hdGguY2VpbCh0aGlzLmVhc2UoY3VyVGltZSwgc3RhcnRCQiwgZW5kQkIgLSBzdGFydEJCLCB0aGlzLmR1cmF0aW9uICogMTAwMCkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjdXJWYWx1ZSA9ICdyZ2IoJyArIHJyICsgJywgJyArIGdnICsgJywgJyArIGJiICsgJyknOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZihpc0VuZCkgewogICAgICAgICAgICAgICAgICAgICAgICBjdXJWYWx1ZSA9IHRoaXMuZW5kVmFsdWVbaV07CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VyVmFsdWUgPSB0aGlzLmVhc2UoY3VyVGltZSwgdGhpcy5zdGFydFZhbHVlW2ldLCB0aGlzLmVuZFZhbHVlW2ldIC0gdGhpcy5zdGFydFZhbHVlW2ldLCB0aGlzLmR1cmF0aW9uICogMTAwMCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFsdWVJbmZvLnB1c2goewogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogdGhpcy5wcm9wZXJ0eU5hbWVbaV0sCiAgICAgICAgICAgICAgICAgICAgY3VyVmFsdWUgOiBjdXJWYWx1ZSwKICAgICAgICAgICAgICAgICAgICBpc0NvbG9yOiB0aGlzLmNvbG9yTGlzdFtpXS5pc0NvbG9yCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnNldFZhbHVlKHZhbHVlSW5mbyk7CgogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQG1ldGhvZCBzZXRWYWx1ZQogICAgICAgICAqIEBkZXNjIOaUueWPmOWAvAogICAgICAgICAqLwogICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbih2YWx1ZUluZm8pIHsKICAgICAgICAgICAgdmFyIHNldEluZm8gPSB7fSwKICAgICAgICAgICAgICAgIG5lZWRTZXQgPSBmYWxzZSwKICAgICAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICAgICAgaUxlbiA9IHZhbHVlSW5mby5sZW5ndGg7CiAgICAgICAgICAgIGZvcig7IGkgPCBpTGVuOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSB2YWx1ZUluZm9baV0ucHJvcGVydHlOYW1lLAogICAgICAgICAgICAgICAgICAgIGN1clZhbHVlID0gdmFsdWVJbmZvW2ldLmN1clZhbHVlLAogICAgICAgICAgICAgICAgICAgIGlzQ29sb3IgPSB2YWx1ZUluZm9baV0uaXNDb2xvcjsKICAgICAgICAgICAgICAgIGlmKHByb3BlcnR5TmFtZSA9PSAnc2Nyb2xsTGVmdCcgfHwgcHJvcGVydHlOYW1lID09ICdzY3JvbGxUb3AnKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbFtwcm9wZXJ0eU5hbWVdID0gdGhpcy5nZXRWYWx1ZShjdXJWYWx1ZSwgaSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNldEluZm9bcHJvcGVydHlOYW1lXSA9IGlzQ29sb3IgPyBjdXJWYWx1ZSA6IHRoaXMuZ2V0VmFsdWUoY3VyVmFsdWUsIGkpOwogICAgICAgICAgICAgICAgICAgIG5lZWRTZXQgPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZihuZWVkU2V0KSB7CiAgICAgICAgICAgICAgICBmb3IodmFyIGtleSBpbiBzZXRJbmZvKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5zdHlsZVtrZXldID0gc2V0SW5mb1trZXldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAbWV0aG9kIGdldFZhbHVlCiAgICAgICAgICogQHBhcmFtIHZhbHVlICAgIC0gICB7U3RyaW5nfQogICAgICAgICAqIEBwYXJhbSBvcmRlciAgICAtICAge251bWJlcn0KICAgICAgICAgKi8KICAgICAgICBnZXRWYWx1ZTogZnVuY3Rpb24odmFsdWUsIG9yZGVyKXsKICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVlZFBhcmFtc1tvcmRlcl0gPyB2YWx1ZSArICdweCcgOiB2YWx1ZTsKICAgICAgICB9LAoKICAgICAgICBDTEFTU19OQU1FOiAib2N0b3B1cy5Ud2VlbiIKICAgIH0pOwoKICAgIC8qKgogICAgICogQGNsYXNzIG9jdG9wdXMuU3RlcFR3ZWVuCiAgICAgKi8KICAgIG8uU3RlcFR3ZWVuID0gby5kZWZpbmUoewoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSB0eXBlCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVzYyDmlYjmnpzkvJjlhYjmiJbmgKfog73kvJjlhYgKICAgICAgICAgKi8KICAgICAgICB0eXBlOiAibm9ybWFsIiwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgZWFzZQogICAgICAgICAqLwogICAgICAgIGVhc2U6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IHN0YXJ0VmFsdWUKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqLwogICAgICAgIHN0YXJ0VmFsdWU6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IGVuZFZhbHVlCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKi8KICAgICAgICBlbmRWYWx1ZTogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgZHVyYXRpb24KICAgICAgICAgKiBAZGVzYyDkuI5vY3RvcHVzLnR3ZWVu5LiN5ZCMIOi/memHjOeahGR1cmF0aW9u6KGo56S65Yqo55S75omn6KGM55qE5qyh5pWwCiAgICAgICAgICovCiAgICAgICAgZHVyYXRpb246IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IGZ1bmMKICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259CiAgICAgICAgICovCiAgICAgICAgZnVuYzogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgY291bnQKICAgICAgICAgKi8KICAgICAgICBjb3VudDogMCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgcGxheWluZwogICAgICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICAgICAqIEBkZXNjIOagh+W/l+S9jSDmoIflv5fmmK/lkKblnKjliqjnlLsKICAgICAgICAgKi8KICAgICAgICBwbGF5aW5nOiBmYWxzZSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAY29uc3RydWN0b3IKICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucwogICAgICAgICAqLwogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICAgICAgby5leHRlbmQodGhpcywgb3B0aW9ucyk7CiAgICAgICAgICAgIHRoaXMuZWFzZSA9IHRoaXMuZWFzZSB8fCBvLmVhc2luZy5leHBvLmVhc2VPdXQ7CiAgICAgICAgICAgIHRoaXMuc3RhcnQodGhpcy5zdGFydFZhbHVlLCB0aGlzLmVuZFZhbHVlLCB0aGlzLmR1cmF0aW9uLCB0aGlzLmZ1bmMpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQG1ldGhvZCBzdGFydAogICAgICAgICAqIEBwYXJhbSBzdGFydFZhbHVlCiAgICAgICAgICogQHBhcmFtIGVuZFZhbHVlCiAgICAgICAgICogQHBhcmFtIGR1cmF0aW9uCiAgICAgICAgICogQHBhcmFtIGZ1bmMKICAgICAgICAgKi8KICAgICAgICBzdGFydDogZnVuY3Rpb24oc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGR1cmF0aW9uLCBmdW5jKSB7CiAgICAgICAgICAgIHRoaXMucGxheWluZyA9IHRydWU7CiAgICAgICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWU7CiAgICAgICAgICAgIHRoaXMuZW5kVmFsdWUgPSBlbmRWYWx1ZTsKICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uOwogICAgICAgICAgICB0aGlzLmZ1bmMgPSBmdW5jOwogICAgICAgICAgICB0aGlzLmNvdW50ID0gMDsKICAgICAgICAgICAgaWYodGhpcy5mdW5jICYmIHRoaXMuZnVuYy5zdGFydCkgewogICAgICAgICAgICAgICAgdGhpcy5mdW5jLnN0YXJ0LmNhbGwodGhpcywgdGhpcy5zdGFydFZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBvLnV0aWwucmVxdWVzdEFuaW1hdGlvbihvLnV0aWwuYmluZCh0aGlzLnBsYXksIHRoaXMpKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHVibGljCiAgICAgICAgICogQG1ldGhvZCBvY3RvcHVzLlN0ZXBUd2Vlbi5zdG9wCiAgICAgICAgICogQGRlc2Mg5YGc5q2i5Yqo55S7CiAgICAgICAgICovCiAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmKCF0aGlzLnBsYXlpbmcpIHJldHVybjsKCiAgICAgICAgICAgIGlmKHRoaXMuZnVuYyAmJiB0aGlzLmZ1bmMuZG9uZSkgewogICAgICAgICAgICAgICAgdGhpcy5mdW5jLmRvbmUuY2FsbCh0aGlzLCB0aGlzLmVuZFZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAbWV0aG9kIGRlc3Ryb3kKICAgICAgICAgKi8KICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5mdW5jID0gbnVsbDsKICAgICAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gbnVsbDsKICAgICAgICAgICAgdGhpcy5lbmRWYWx1ZSA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuZHVyYXRpb24gPSBudWxsOwogICAgICAgICAgICB0aGlzLmNvdW50ID0gbnVsbDsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBtZXRob2QgcGxheQogICAgICAgICAqLwogICAgICAgIHBsYXk6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZih0aGlzLnBsYXlpbmcgPT0gZmFsc2UpCXJldHVybjsKICAgICAgICAgICAgdmFyIHZhbHVlID0ge307CiAgICAgICAgICAgIGZvcih2YXIgayBpbiB0aGlzLnN0YXJ0VmFsdWUpIHsKICAgICAgICAgICAgICAgIHZhciBiID0gdGhpcy5zdGFydFZhbHVlW2tdOwogICAgICAgICAgICAgICAgdmFyIGYgPSB0aGlzLmVuZFZhbHVlW2tdOwogICAgICAgICAgICAgICAgaWYoYiA9PSBudWxsIHx8IGYgPT0gbnVsbCB8fCBpc05hTihiKSB8fCBpc05hTihmKSkgewogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB2YWx1ZSBmb3IgVHdlZW4nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBjID0gZiAtIGI7CiAgICAgICAgICAgICAgICB2YWx1ZVtrXSA9IHRoaXMuZWFzZS5hcHBseSh0aGlzLCBbdGhpcy5jb3VudCwgYiwgYywgdGhpcy5kdXJhdGlvbl0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuY291bnQrKzsKICAgICAgICAgICAgaWYodGhpcy5mdW5jICYmIHRoaXMuZnVuYy5lYWNoU3RlcCkgewogICAgICAgICAgICAgICAgdGhpcy5mdW5jLmVhY2hTdGVwLmNhbGwodGhpcywgdmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKHRoaXMuY291bnQgPiB0aGlzLmR1cmF0aW9uKSB7CiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBvLnV0aWwucmVxdWVzdEFuaW1hdGlvbihvLnV0aWwuYmluZCh0aGlzLnBsYXksIHRoaXMpKTsKICAgICAgICB9LAoKICAgICAgICBDTEFTU19OQU1FOiAib2N0b3B1cy5TdGVwVHdlZW4iCiAgICB9KTsKCiAgICAvKioKICAgICAqIEBuYW1lc3BhY2Ugb2N0b3B1cy5lYXNpbmcKICAgICAqIEBkZXNjIOWKqOeUu+aWueazlSDmr4/kuKrmlrnms5Xpg73ljIXmi6wgImVhc2VJbiIg5riQ5b+rICJlYXNlT3V0IiDmuJDmhaIgImVhc2VJbk91dCIg57qg57uT55qE5LiJ5Liq5YC85Y+v6YCJCiAgICAgKi8KICAgIG8uZWFzaW5nID0gby5lYXNpbmcgfHwge307CgogICAgLyoqCiAgICAgKiBAbmFtZSBvY3RvcHVzLmVhc2luZy5saW5lYXIKICAgICAqIEBkZXNjIOe6v+aAp+WKqOeUuwogICAgICovCiAgICBvLmVhc2luZy5saW5lYXIgPSB7CgogICAgICAgIC8qKgogICAgICAgICAqIEBuYW1lIG9jdG9wdXMuZWFzaW5nLmxpbmVhci5lYXNlSW4KICAgICAgICAgKiBAZGVzYyDnur/mgKfmuJDlv6sKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZUluCiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VJbjogZnVuY3Rpb24odCwgYiwgYywgZCkgewogICAgICAgICAgICByZXR1cm4gYyp0L2QgKyBiOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBuYW1lIG9jdG9wdXMuZWFzaW5nLmxpbmVhci5lYXNlT3V0CiAgICAgICAgICogQGRlc2Mg57q/5oCn5riQ5oWiCiAgICAgICAgICogRnVuY3Rpb246IGVhc2VPdXQKICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZU91dDogZnVuY3Rpb24odCwgYiwgYywgZCkgewogICAgICAgICAgICByZXR1cm4gYyp0L2QgKyBiOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBuYW1lIG9jdG9wdXMuZWFzaW5nLmxpbmVhci5lYXNlSW5PdXQKICAgICAgICAgKiBAZGVzYyDnur/mgKfnuqDnu5MKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZUluT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VJbk91dDogZnVuY3Rpb24odCwgYiwgYywgZCkgewogICAgICAgICAgICByZXR1cm4gYyp0L2QgKyBiOwogICAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBAbmFtZSBvY3RvcHVzLmVhc2luZy5leHBvCiAgICAgKiBAZGVzYyDmjIfmlbDmm7Lnur/nmoTnvJPliqgKICAgICAqCiAgICAgKi8KICAgIG8uZWFzaW5nLmV4cG8gPSB7CgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5leHBvLmVhc2VJbgogICAgICAgICAqIEBkZXNjIOa4kOW/qwogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlSW4KICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZUluOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiAodD09MCkgPyBiIDogYyAqIE1hdGgucG93KDIsIDEwICogKHQvZCAtIDEpKSArIGI7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLmV4cG8uZWFzZU91dAogICAgICAgICAqIEBkZXNjIOa4kOaFogogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VPdXQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgcmV0dXJuICh0PT1kKSA/IGIrYyA6IGMgKiAoLU1hdGgucG93KDIsIC0xMCAqIHQvZCkgKyAxKSArIGI7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLmV4cG8uZWFzZUluT3V0CiAgICAgICAgICogQGRlc2Mg57qg57uTCiAgICAgICAgICogRnVuY3Rpb246IGVhc2VJbk91dAogICAgICAgICAqCiAgICAgICAgICogUGFyYW1ldGVyczoKICAgICAgICAgKiB0IC0ge0Zsb2F0fSB0aW1lCiAgICAgICAgICogYiAtIHtGbG9hdH0gYmVnaW5uaW5nIHBvc2l0aW9uCiAgICAgICAgICogYyAtIHtGbG9hdH0gdG90YWwgY2hhbmdlCiAgICAgICAgICogZCAtIHtGbG9hdH0gZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24KICAgICAgICAgKi8KICAgICAgICBlYXNlSW5PdXQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgaWYgKHQ9PTApIHJldHVybiBiOwogICAgICAgICAgICBpZiAodD09ZCkgcmV0dXJuIGIrYzsKICAgICAgICAgICAgaWYgKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIGMvMiAqIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSkgKyBiOwogICAgICAgICAgICByZXR1cm4gYy8yICogKC1NYXRoLnBvdygyLCAtMTAgKiAtLXQpICsgMikgKyBiOwogICAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBAbmFtZSBvY3RvcHVzLmVhc2luZy5xdWFkCiAgICAgKiBAZGVzYyDkuozmrKHmlrnnmoTnvJPliqgKICAgICAqLwogICAgby5lYXNpbmcucXVhZCA9IHsKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLnF1YWQuZWFzZUluCiAgICAgICAgICogQGRlc2Mg5riQ5b+rCiAgICAgICAgICogRnVuY3Rpb246IGVhc2VJbgogICAgICAgICAqCiAgICAgICAgICogUGFyYW1ldGVyczoKICAgICAgICAgKiB0IC0ge0Zsb2F0fSB0aW1lCiAgICAgICAgICogYiAtIHtGbG9hdH0gYmVnaW5uaW5nIHBvc2l0aW9uCiAgICAgICAgICogYyAtIHtGbG9hdH0gdG90YWwgY2hhbmdlCiAgICAgICAgICogZCAtIHtGbG9hdH0gZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24KICAgICAgICAgKi8KICAgICAgICBlYXNlSW46IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgcmV0dXJuIGMqKHQvPWQpKnQgKyBiOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5xdWFkLmVhc2VPdXQKICAgICAgICAgKiBAZGVzYyDmuJDmhaIKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZU91dAogICAgICAgICAqCiAgICAgICAgICogUGFyYW1ldGVyczoKICAgICAgICAgKiB0IC0ge0Zsb2F0fSB0aW1lCiAgICAgICAgICogYiAtIHtGbG9hdH0gYmVnaW5uaW5nIHBvc2l0aW9uCiAgICAgICAgICogYyAtIHtGbG9hdH0gdG90YWwgY2hhbmdlCiAgICAgICAgICogZCAtIHtGbG9hdH0gZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24KICAgICAgICAgKi8KICAgICAgICBlYXNlT3V0OiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiAtYyAqKHQvPWQpKih0LTIpICsgYjsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJvcGVydHkgb2N0b3B1cy5lYXNpbmcucXVhZC5lYXNlSW5PdXQKICAgICAgICAgKiBAZGVzYyDnuqDnu5MKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZUluT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VJbk91dDogZnVuY3Rpb24odCwgYiwgYywgZCkgewogICAgICAgICAgICBpZiAoKHQvPWQvMikgPCAxKSByZXR1cm4gYy8yKnQqdCArIGI7CiAgICAgICAgICAgIHJldHVybiAtYy8yICogKCgtLXQpKih0LTIpIC0gMSkgKyBiOwogICAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBAbmFtZSBvY3RvcHVzLmVhc2luZy5iYWNrCiAgICAgKiBAZGVzYyDlnKjov4fmuKHojIPlm7TlpJbnmoTkuIDnq6/miJbkuKTnq6/mianlsZXliqjnlLvkuIDmrKHvvIzku6XkuqfnlJ/ku47lhbbojIPlm7TlpJblm57mi4nnmoTmlYjmnpzjgIIKICAgICAqIOmAmuS/l+iusuWwseaYr+WFiOWQkeWQjiDlho3lkJHlj43mlrnlkJEKICAgICAqLwogICAgby5lYXNpbmcuYmFjayA9IHsKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLmJhY2suZWFzZUluCiAgICAgICAgICogQGRlc2Mg5riQ5b+rCiAgICAgICAgICogRnVuY3Rpb246IGVhc2VJbgogICAgICAgICAqCiAgICAgICAgICogUGFyYW1ldGVyczoKICAgICAgICAgKiB0IC0ge0Zsb2F0fSB0aW1lCiAgICAgICAgICogYiAtIHtGbG9hdH0gYmVnaW5uaW5nIHBvc2l0aW9uCiAgICAgICAgICogYyAtIHtGbG9hdH0gdG90YWwgY2hhbmdlCiAgICAgICAgICogZCAtIHtGbG9hdH0gZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24KICAgICAgICAgKi8KICAgICAgICBlYXNlSW46IGZ1bmN0aW9uKHQsIGIsIGMsIGQsIHMpIHsKICAgICAgICAgICAgaWYgKHMgPT0gdW5kZWZpbmVkKSBzID0gMS43MDE1ODsKICAgICAgICAgICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSArIGIKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJvcGVydHkgb2N0b3B1cy5lYXNpbmcuYmFjay5lYXNlT3V0CiAgICAgICAgICogQGRlc2Mg5riQ5oWiCiAgICAgICAgICogRnVuY3Rpb246IGVhc2VPdXQKICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZU91dDogZnVuY3Rpb24odCwgYiwgYywgZCwgcykgewogICAgICAgICAgICBpZiAocyA9PSB1bmRlZmluZWQpIHMgPSAxLjcwMTU4OwogICAgICAgICAgICByZXR1cm4gYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxKSArIGIKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJvcGVydHkgb2N0b3B1cy5lYXNpbmcuYmFjay5lYXNlSW5PdXQKICAgICAgICAgKiBAZGVzYyDnuqDnu5MKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZUluT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VJbk91dDogZnVuY3Rpb24odCwgYiwgYywgZCwgcykgewogICAgICAgICAgICBpZiAocyA9PSB1bmRlZmluZWQpIHMgPSAxLjcwMTU4OwogICAgICAgICAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkgcmV0dXJuIGMgLyAyICogKHQgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCAtIHMpKSArIGI7CiAgICAgICAgICAgIHJldHVybiBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0ICsgcykgKyAyKSArIGIKICAgICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogQG5hbWUgb2N0b3B1cy5lYXNpbmcuYm91bmNlCiAgICAgKiBAZGVzYyDlnKjov4fmuKHojIPlm7TnmoTkuIDnq6/miJbkuKTnq6/lhoXmt7vliqDlvLnot7PmlYjmnpzjgILnsbvkvLzkuIDkuKrnkIPokL3lkJHlnLDmnb/lj4jlvLnotbflkI7vvIzlh6DmrKHpgJDmuJDlh4/lsI/nmoTlm57lvLnov5DliqgKICAgICAqLwogICAgby5lYXNpbmcuYm91bmNlID0gewoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJvcGVydHkgb2N0b3B1cy5lYXNpbmcuYm91bmNlLmVhc2VJbgogICAgICAgICAqIEBkZXNjIOa4kOW/qwogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlSW4KICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZUluOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiBjIC0gby5lYXNpbmcuYm91bmNlLmVhc2VPdXQoZCAtIHQsIDAsIGMsIGQpICsgYgogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5ib3VuY2UuZWFzZU91dAogICAgICAgICAqIEBkZXNjIOa4kOaFogogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VPdXQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgaWYgKCh0IC89IGQpIDwgKDEgLyAyLjc1KSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogdCAqIHQpICsgYgogICAgICAgICAgICB9IGVsc2UgaWYgKHQgPCAoMiAvIDIuNzUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiAodCAtPSAoMS41IC8gMi43NSkpICogdCArIC43NSkgKyBiCiAgICAgICAgICAgIH0gZWxzZSBpZiAodCA8ICgyLjUgLyAyLjc1KSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gKDIuMjUgLyAyLjc1KSkgKiB0ICsgLjkzNzUpICsgYgogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gKDIuNjI1IC8gMi43NSkpICogdCArIC45ODQzNzUpICsgYgogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLmJvdW5jZS5lYXNlSW5PdXQKICAgICAgICAgKiBAZGVzYyDnuqDnu5MKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZUluT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VJbk91dDogZnVuY3Rpb24odCwgYiwgYywgZCkgewogICAgICAgICAgICBpZiAodCA8IGQgLyAyKSByZXR1cm4gby5lYXNpbmcuYm91bmNlLmVhc2VJbih0ICogMiwgMCwgYywgZCkgKiAuNSArIGI7CiAgICAgICAgICAgIGVsc2UgcmV0dXJuIG8uZWFzaW5nLmJvdW5jZS5lYXNlT3V0KHQgKiAyIC0gZCwgMCwgYywgZCkgKiAuNSArIGMgKiAuNSArIGIKICAgICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogQG5hbWUgb2N0b3B1cy5lYXNpbmcuZWxhc3RpYwogICAgICogQGRlc2Mg5re75Yqg5LiA56uv5oiW5Lik56uv6LaF5Ye66L+H5rih6IyD5Zu055qE5by55oCn5pWI5p6cIOWFtuS4reeahOi/kOWKqOeUseaMieeFp+aMh+aVsOaWueW8j+ihsOWHj+eahOato+W8puazouadpeWumuS5iQogICAgICog5oyH5pWw6KGw5YeP55qE5q2j5bym5puy57q/57yT5YqoCiAgICAgKi8KICAgIG8uZWFzaW5nLmVsYXN0aWMgPSB7CgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5lbGFzdGljLmVhc2VJbgogICAgICAgICAqIEBkZXNjIOa4kOW/qwogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlSW4KICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZUluOiBmdW5jdGlvbih0LCBiLCBjLCBkLCBhLCBwKSB7CiAgICAgICAgICAgIGlmICh0ID09IDApIHJldHVybiBiOwogICAgICAgICAgICBpZiAoKHQgLz0gZCkgPT0gMSkgcmV0dXJuIGIgKyBjOwogICAgICAgICAgICBpZiAoIXApIHAgPSBkICogLjM7CiAgICAgICAgICAgIGlmICghYSB8fCBhIDwgTWF0aC5hYnMoYykpIHsKICAgICAgICAgICAgICAgIGEgPSBjOwogICAgICAgICAgICAgICAgdmFyIHMgPSBwIC8gNAogICAgICAgICAgICB9IGVsc2UgdmFyIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbihjIC8gYSk7CiAgICAgICAgICAgIHJldHVybiAtIChhICogTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSkgKyBiCiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLmVsYXN0aWMuZWFzZU91dAogICAgICAgICAqIEBkZXNjIOa4kOaFogogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VPdXQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQsIGEsIHApIHsKICAgICAgICAgICAgaWYgKHQgPT0gMCkgcmV0dXJuIGI7CiAgICAgICAgICAgIGlmICgodCAvPSBkKSA9PSAxKSByZXR1cm4gYiArIGM7CiAgICAgICAgICAgIGlmICghcCkgcCA9IGQgKiAuMzsKICAgICAgICAgICAgaWYgKCFhIHx8IGEgPCBNYXRoLmFicyhjKSkgewogICAgICAgICAgICAgICAgYSA9IGM7CiAgICAgICAgICAgICAgICB2YXIgcyA9IHAgLyA0CiAgICAgICAgICAgIH0gZWxzZSB2YXIgcyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKGMgLyBhKTsKICAgICAgICAgICAgcmV0dXJuIChhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSArIGMgKyBiKQogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5lbGFzdGljLmVhc2VJbk91dAogICAgICAgICAqIEBkZXNjIOe6oOe7kwogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlSW5PdXQKICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZUluT3V0OiBmdW5jdGlvbih0LCBiLCBjLCBkLCBhLCBwKSB7CiAgICAgICAgICAgIGlmICh0ID09IDApIHJldHVybiBiOwogICAgICAgICAgICBpZiAoKHQgLz0gZCAvIDIpID09IDIpIHJldHVybiBiICsgYzsKICAgICAgICAgICAgaWYgKCFwKSBwID0gZCAqICguMyAqIDEuNSk7CiAgICAgICAgICAgIGlmICghYSB8fCBhIDwgTWF0aC5hYnMoYykpIHsKICAgICAgICAgICAgICAgIGEgPSBjOwogICAgICAgICAgICAgICAgdmFyIHMgPSBwIC8gNAogICAgICAgICAgICB9IGVsc2UgdmFyIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbihjIC8gYSk7CiAgICAgICAgICAgIGlmICh0IDwgMSkgcmV0dXJuIC0gLjUgKiAoYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpICsgYjsKICAgICAgICAgICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSAqIC41ICsgYyArIGIKICAgICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogQG5hbWUgb2N0b3B1cy5lYXNpbmcuY2lyYwogICAgICogQGRlc2Mg5ZyG5b2i5puy57q/55qE57yT5YqoCiAgICAgKi8KICAgIG8uZWFzaW5nLmNpcmMgPSB7CgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5jaXJjLmVhc2VJbgogICAgICAgICAqIEBkZXNjIOa4kOW/qwogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlSW4KICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZUluOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiAtIGMgKiAoTWF0aC5zcXJ0KDEgLSAodCAvPSBkKSAqIHQpIC0gMSkgKyBiCiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLmNpcmMuZWFzZU91dAogICAgICAgICAqIEBkZXNjIOa4kOaFogogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VPdXQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgcmV0dXJuIGMgKiBNYXRoLnNxcnQoMSAtICh0ID0gdCAvIGQgLSAxKSAqIHQpICsgYgogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5jaXJjLmVhc2VJbk91dAogICAgICAgICAqIEBkZXNjIOe6oOe7kwogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlSW5PdXQKICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZUluT3V0OiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIGlmICgodCAvPSBkIC8gMikgPCAxKSByZXR1cm4gLSBjIC8gMiAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpICsgYjsKICAgICAgICAgICAgcmV0dXJuIGMgLyAyICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpICsgYgogICAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBAbmFtZSBvY3RvcHVzLmVhc2luZy5zaW5lCiAgICAgKiBAZGVzYyDmraPlvKbmm7Lnur/nvJPliqgKICAgICAqLwogICAgby5lYXNpbmcuc2luZSA9IHsKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLnNpbmUuZWFzZUluCiAgICAgICAgICogQGRlc2Mg5riQ5b+rCiAgICAgICAgICogRnVuY3Rpb246IGVhc2VJbgogICAgICAgICAqCiAgICAgICAgICogUGFyYW1ldGVyczoKICAgICAgICAgKiB0IC0ge0Zsb2F0fSB0aW1lCiAgICAgICAgICogYiAtIHtGbG9hdH0gYmVnaW5uaW5nIHBvc2l0aW9uCiAgICAgICAgICogYyAtIHtGbG9hdH0gdG90YWwgY2hhbmdlCiAgICAgICAgICogZCAtIHtGbG9hdH0gZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24KICAgICAgICAgKi8KICAgICAgICBlYXNlSW46IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgcmV0dXJuIC0gYyAqIE1hdGguY29zKHQgLyBkICogKE1hdGguUEkgLyAyKSkgKyBjICsgYgogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5zaW5lLmVhc2VPdXQKICAgICAgICAgKiBAZGVzYyDmuJDmhaIKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZU91dAogICAgICAgICAqCiAgICAgICAgICogUGFyYW1ldGVyczoKICAgICAgICAgKiB0IC0ge0Zsb2F0fSB0aW1lCiAgICAgICAgICogYiAtIHtGbG9hdH0gYmVnaW5uaW5nIHBvc2l0aW9uCiAgICAgICAgICogYyAtIHtGbG9hdH0gdG90YWwgY2hhbmdlCiAgICAgICAgICogZCAtIHtGbG9hdH0gZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24KICAgICAgICAgKi8KICAgICAgICBlYXNlT3V0OiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiBjICogTWF0aC5zaW4odCAvIGQgKiAoTWF0aC5QSSAvIDIpKSArIGIKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJvcGVydHkgb2N0b3B1cy5lYXNpbmcuc2luZS5lYXNlSW5PdXQKICAgICAgICAgKiBAZGVzYyDnuqDnu5MKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZUluT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VJbk91dDogZnVuY3Rpb24odCwgYiwgYywgZCkgewogICAgICAgICAgICByZXR1cm4gLSBjIC8gMiAqIChNYXRoLmNvcyhNYXRoLlBJICogdCAvIGQpIC0gMSkgKyBiCiAgICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIEBuYW1lIG9jdG9wdXMuZWFzaW5nLnF1aW50CiAgICAgKiBAZGVzYyDkupTmrKHmlrnnmoTnvJPliqgKICAgICAqLwogICAgby5lYXNpbmcucXVpbnQgPSB7CgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5xdWludC5lYXNlSW4KICAgICAgICAgKiBAZGVzYyDmuJDlv6sKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZUluCiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VJbjogZnVuY3Rpb24odCwgYiwgYywgZCkgewogICAgICAgICAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqIHQgKiB0ICogdCArIGIKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJvcGVydHkgb2N0b3B1cy5lYXNpbmcucXVpbnQuZWFzZU91dAogICAgICAgICAqIEBkZXNjIOa4kOaFogogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VPdXQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKiB0ICogdCArIDEpICsgYgogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5xdWludC5lYXNlSW5PdXQKICAgICAgICAgKiBAZGVzYyDnuqDnu5MKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZUluT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VJbk91dDogZnVuY3Rpb24odCwgYiwgYywgZCkgewogICAgICAgICAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkgcmV0dXJuIGMgLyAyICogdCAqIHQgKiB0ICogdCAqIHQgKyBiOwogICAgICAgICAgICByZXR1cm4gYyAvIDIgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMikgKyBiCiAgICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIEBuYW1lIG9jdG9wdXMuZWFzaW5nLnF1YXJ0CiAgICAgKiBAZGVzYyDlm5vmrKHmlrnnmoTnvJPliqgKICAgICAqLwogICAgby5lYXNpbmcucXVhcnQgPSB7CgogICAgICAgIC8qKgogICAgICAgICAqIEBwcm9wZXJ0eSBvY3RvcHVzLmVhc2luZy5xdWFydC5lYXNlSW4KICAgICAgICAgKiBAZGVzYyDmuJDlv6sKICAgICAgICAgKgogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlSW4KICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZUluOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCAqIHQgKyBiCiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLnF1YXJ0LmVhc2VPdXQKICAgICAgICAgKiBAZGVzYyDmuJDmhaIKICAgICAgICAgKiBGdW5jdGlvbjogZWFzZU91dAogICAgICAgICAqCiAgICAgICAgICogUGFyYW1ldGVyczoKICAgICAgICAgKiB0IC0ge0Zsb2F0fSB0aW1lCiAgICAgICAgICogYiAtIHtGbG9hdH0gYmVnaW5uaW5nIHBvc2l0aW9uCiAgICAgICAgICogYyAtIHtGbG9hdH0gdG90YWwgY2hhbmdlCiAgICAgICAgICogZCAtIHtGbG9hdH0gZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24KICAgICAgICAgKi8KICAgICAgICBlYXNlT3V0OiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiAtIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKiB0IC0gMSkgKyBiCiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLnF1YXJ0LmVhc2VJbk91dAogICAgICAgICAqIEBkZXNjIOe6oOe7kwogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlSW5PdXQKICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZUluT3V0OiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIGlmICgodCAvPSBkIC8gMikgPCAxKSByZXR1cm4gYyAvIDIgKiB0ICogdCAqIHQgKiB0ICsgYjsKICAgICAgICAgICAgcmV0dXJuIC0gYyAvIDIgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgLSAyKSArIGIKICAgICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogQG5hbWUgb2N0b3B1cy5lYXNpbmcuY3ViaWMKICAgICAqIEBkZXNjIOS4ieasoeaWueeahOe8k+WKqAogICAgICovCiAgICBvLmVhc2luZy5jdWJpYyA9IHsKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByb3BlcnR5IG9jdG9wdXMuZWFzaW5nLmN1YmljLmVhc2VJbgogICAgICAgICAqIEBkZXNjIOa4kOW/qwogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlSW4KICAgICAgICAgKgogICAgICAgICAqIFBhcmFtZXRlcnM6CiAgICAgICAgICogdCAtIHtGbG9hdH0gdGltZQogICAgICAgICAqIGIgLSB7RmxvYXR9IGJlZ2lubmluZyBwb3NpdGlvbgogICAgICAgICAqIGMgLSB7RmxvYXR9IHRvdGFsIGNoYW5nZQogICAgICAgICAqIGQgLSB7RmxvYXR9IGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uCiAgICAgICAgICovCiAgICAgICAgZWFzZUluOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCArIGIKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJvcGVydHkgb2N0b3B1cy5lYXNpbmcuY3ViaWMuZWFzZU91dAogICAgICAgICAqIEBkZXNjIOa4kOaFogogICAgICAgICAqIEZ1bmN0aW9uOiBlYXNlT3V0CiAgICAgICAgICoKICAgICAgICAgKiBQYXJhbWV0ZXJzOgogICAgICAgICAqIHQgLSB7RmxvYXR9IHRpbWUKICAgICAgICAgKiBiIC0ge0Zsb2F0fSBiZWdpbm5pbmcgcG9zaXRpb24KICAgICAgICAgKiBjIC0ge0Zsb2F0fSB0b3RhbCBjaGFuZ2UKICAgICAgICAgKiBkIC0ge0Zsb2F0fSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbgogICAgICAgICAqLwogICAgICAgIGVhc2VPdXQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKyAxKSArIGIKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJvcGVydHkgb2N0b3B1cy5lYXNpbmcuY3ViaWMuZWFzZUluT3V0CiAgICAgICAgICogQGRlc2Mg57qg57uTCiAgICAgICAgICogRnVuY3Rpb246IGVhc2VJbk91dAogICAgICAgICAqCiAgICAgICAgICogUGFyYW1ldGVyczoKICAgICAgICAgKiB0IC0ge0Zsb2F0fSB0aW1lCiAgICAgICAgICogYiAtIHtGbG9hdH0gYmVnaW5uaW5nIHBvc2l0aW9uCiAgICAgICAgICogYyAtIHtGbG9hdH0gdG90YWwgY2hhbmdlCiAgICAgICAgICogZCAtIHtGbG9hdH0gZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24KICAgICAgICAgKi8KICAgICAgICBlYXNlSW5PdXQ6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHsKICAgICAgICAgICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHJldHVybiBjIC8gMiAqIHQgKiB0ICogdCArIGI7CiAgICAgICAgICAgIHJldHVybiBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICsgMikgKyBiCiAgICAgICAgfQogICAgfTsKCn0pKG9jdG9wdXMpOwovKioKICogQGZpbGUKICogd2ViYXBw6YCa55So57uE5Lu25Z+656GA5bqT5paH5Lu2CiAqIOeugOWNleWunueOsOaMh+WumuWuueWZqOS4i+eahGxhenlsb2FkCiAqIEByZXF1aXJlIGxpYi9jbGFzcy5qcwogKiBAcmVxdWlyZSBsaWIvdXRpbC5qcwogKiBAcmVxdWlyZSBsaWIvZXZlbnQuanMKICogQHJlcXVpcmUgbGliL2RvbS5qcwogKiBAYXV0aG9yIG91cGVuZy1mZQogKiBAdmVyc2lvbiAxLjEKICovCjsoZnVuY3Rpb24obywgdW5kZWZpbmVkKSB7CgogICAgInVzZSBzdHJpY3QiOwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLmxhenlJbWcKICAgICAqIEBwYXJhbSBvcHRzCiAgICAgKi8KICAgIG8ubGF6eUltZyA9IGZ1bmN0aW9uKG9wdHMpIHsKICAgICAgICByZXR1cm4gbmV3IG8uSW1nTGF6eUxvYWQob3B0cyB8fCB7fSkuY2hlY2soKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAY2xhc3Mgb2N0b3B1cy5JbWdMYXp5TG9hZAogICAgICogQGRlc2Mg55So5p2l5a+55oyH5a6a5Zu+54mH5oiW6ICF5a655Zmo5YaF55qE5Zu+54mH6L+b6KGM5bu25ZCO5Yqg6L29CiAgICAgKiBAcGFyYW0gb3B0aW9ucyDlj4LmlbAKICAgICAqIEBwYXJhbSBvcHRpb25zLmltZ3Mge1N0cmluZyB8IEFycmF5IHwgRE9NRWxlbWVudH0g6ZyA6KaB5bu25ZCO5Yqg6L2955qE5Zu+54mH5pWw57uE5oiW6IqC54K55oiW6IqC54K5aWQKICAgICAqIEBwYXJhbSBvcHRpb25zLmVsIHtET01FbGVtZW50IHwgU3RyaW5nfSDpnIDopoHlu7blkI7liqDovb3nmoToioLngrnlrrnlmajmiJboioLngrnlrrnlmahpZCDlpoLmnpzlt7LkvKDlhaVvcHRpb25zLmltZ3Mg5YiZ5q2k5Y+C5pWw5LiN55Sf5pWICiAgICAgKiBAcGFyYW0gb3B0aW9ucy5jb250YWluZXIge0RPTUVsZW1lbnQgfCBTdHJpbmd9IOWHuua7muWKqOadoeeahOWuueWZqAogICAgICogQHBhcmFtIG9wdGlvbnMuc3JjTmFtZSB7U3RyaW5nfSDlu7bov5/liqDovb3nmoTlm77niYfnmoTnnJ/lrp5zcmPlsZ7mgKflrZfmrrXpu5jorqTkuLoic3JjIgogICAgICovCiAgICBvLkltZ0xhenlMb2FkID0gby5kZWZpbmUoewoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSBlbAogICAgICAgICAqIEB0eXBlIHtET01FbGVtZW50IHwgU3RyaW5nfQogICAgICAgICAqIEBkZXNjIOaMh+WumuWuueWZqOaIluWbvueJhwogICAgICAgICAqLwogICAgICAgIGVsOiBudWxsLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSBjb250YWluZXIKICAgICAgICAgKiBAdHlwZSB7RE9NRWxlbWVudCB8IFN0cmluZ30KICAgICAgICAgKiBAZGVzYyDmjIflrprnmoTmu5rliqjlrrnlmagKICAgICAgICAgKi8KICAgICAgICBjb250YWluZXI6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IGltZ3MKICAgICAgICAgKiBAdHlwZSB7QXJyYXl9CiAgICAgICAgICogQGRlc2Mg6ZyA6KaB5ZCO5Yqg6L2955qE6ZuG5ZCICiAgICAgICAgICovCiAgICAgICAgaW1nczogbnVsbCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgKiBAcHJvcGVydHkgc3JjTmFtZQogICAgICAgICAqIEB0eXBlIHtTdHJpbmd9CiAgICAgICAgICovCiAgICAgICAgc3JjTmFtZTogInNyYyIsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IG9wdHMKICAgICAgICAgKiBAZGVzYyDkvKDlhaXnmoTlj4LmlbAKICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICAgICAqLwogICAgICAgIG9wdHM6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQHByb3BlcnR5IGlzU2Nyb2xsCiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59CiAgICAgICAgICogQGRlc2Mg5qCH5b+X5L2NCiAgICAgICAgICovCiAgICAgICAgaXNTY3JvbGw6IGZhbHNlLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBwcm9wZXJ0eSBldmVudAogICAgICAgICAqIEB0eXBlIHtvY3RvcHVzLkV2ZW50fQogICAgICAgICAqIEBkZXNjIOiHqui6q+S6i+S7tgogICAgICAgICAqLwogICAgICAgIGV2ZW50OiBudWxsLAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBjb25zdHJ1Y3RvcgogICAgICAgICAqLwogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICAgICAgdGhpcy5vcHRzID0gby5leHRlbmQoe30sIG9wdGlvbnMpOwogICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG8uZyhvcHRpb25zLmNvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keTsKICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLAogICAgICAgICAgICAgICAgcG5vZGUgPSAodGhpcy5jb250YWluZXIgPT0gZG9jdW1lbnQuYm9keSkgPyB3aW5kb3cgOiB0aGlzLmNvbnRhaW5lcjsKICAgICAgICAgICAgdmFyIGltZ3MgPSBvcHRpb25zLmltZ3M7CiAgICAgICAgICAgIHRoaXMuaW1ncyA9IFtdOwogICAgICAgICAgICB0aGlzLmV2ZW50ID0gbmV3IG8uRXZlbnRzKHRoaXMpOwogICAgICAgICAgICB0aGlzLnNldERvbXMoaW1ncykKICAgICAgICAgICAgby5ldmVudC5vbihwbm9kZSwgInNjcm9sbCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYoIXRoYXQuaXNTY3JvbGwpIHsKICAgICAgICAgICAgICAgICAgICBvLnV0aWwucmVxdWVzdEFuaW1hdGlvbihvLnV0aWwuYmluZCh0aGF0LmNoZWNrLCB0aGF0KSk7CiAgICAgICAgICAgICAgICAgICAgdGhhdC5pc1Njcm9sbCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIGZhbHNlKTsKICAgICAgICAgICAgby5ldmVudC5vbih3aW5kb3csICJvcnRjaGFuZ2UiLCBvLnV0aWwuYmluZCh0aGlzLnJlc2V0LCB0aGlzKSwgZmFsc2UpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwdWJsaWMKICAgICAgICAgKiBAbWV0aG9kIG9jdG9wdXMuSW1nTGF6eUxvYWQub24KICAgICAgICAgKiBAcGFyYW0gZXZ0IHtTdHJpbmd9IOS6i+S7tuebkeWQrOWQjQogICAgICAgICAqIEBwYXJhbSBmdW5jIHtGdW5jdGlvbn0g5Zue6LCD5Ye95pWwCiAgICAgICAgICogQGRlc2Mg5re75Yqg55uR5ZCs5ZmoCiAgICAgICAgICovCiAgICAgICAgb246IGZ1bmN0aW9uKGV2dCwgZnVuYykgewogICAgICAgICAgICB0aGlzLmV2ZW50Lm9uKGV2dCwgZnVuYyk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHB1YmxpYwogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5JbWdMYXp5TG9hZC51bgogICAgICAgICAqIEBwYXJhbSBldnQge1N0cmluZ30g5LqL5Lu255uR5ZCs5ZCNCiAgICAgICAgICogQHBhcmFtIGZ1bmMge0Z1bmN0aW9ufSDlm57osIPlh73mlbAKICAgICAgICAgKiBAZGVzYyDljbjovb3nm5HlkKzlmagKICAgICAgICAgKi8KICAgICAgICB1bjogZnVuY3Rpb24oZXZ0LCBmdW5jKSB7CiAgICAgICAgICAgIHRoaXMuZXZlbnQudW4oZXZ0LCBmdW5jKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5JbWdMYXp5TG9hZC5ub3RpZnkKICAgICAgICAgKi8KICAgICAgICBub3RpZnk6IGZ1bmN0aW9uKGV2dCwgb3B0cykgewogICAgICAgICAgICB0aGlzLmV2ZW50LnRyaWdnZXJFdmVudChldnQsIG9wdHMpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICogQG1ldGhvZCBzZXREb21zCiAgICAgICAgICogQGRlc2Mg5Yid5aeL5YyW5Zu+54mH6IqC54K5CiAgICAgICAgICovCiAgICAgICAgc2V0RG9tczogZnVuY3Rpb24oaW1ncykgewogICAgICAgICAgICBpZihpbWdzKSB7CiAgICAgICAgICAgICAgICBpZihvLnV0aWwuaXNBcnJheShpbWdzKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuaW1ncyA9IHRoaXMuaW1ncy5jb25jYXQoaW1ncyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBvLmcoaW1ncyk7CiAgICAgICAgICAgICAgICAgICAgby51dGlsLmlzTm9kZShpbWcpICYmIHRoaXMuaW1ncy5wdXNoKGltZyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLm9wdHMuZWwpIHsKICAgICAgICAgICAgICAgIHRoaXMuZWwgPSB0aGlzLmVsIHx8IG8uZyh0aGlzLm9wdHMuZWwpOwogICAgICAgICAgICAgICAgdmFyIF9pbWdzID0gby4kKCJpbWciLCB0aGlzLmVsKSwKICAgICAgICAgICAgICAgICAgICBsZW4gPSBfaW1ncy5sZW5ndGg7CiAgICAgICAgICAgICAgICBpZihsZW4gPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgIG8udXRpbC5lYWNoKF9pbWdzLCBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFvLnV0aWwuaXNOb2RlKGl0ZW0pKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFvLmRvbS5kYXRhKGl0ZW0sICJsb2FkZWQiKSAmJiBvLmRvbS5kYXRhKGl0ZW0sIHRoYXQuc3JjTmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuaW1ncy5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYodGhpcy5lbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gImltZyIgJiYgIW8uZG9tLmRhdGEodGhpcy5lbCwgImxvYWRlZCIpICYmIG8uZG9tLmRhdGEodGhpcy5lbCwgdGhpcy5zcmNOYW1lKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuaW1ncy5wdXNoKHRoaXMuZWwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHB1YmxpYwogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5JbWdMYXp5TG9hZC5yZXNldAogICAgICAgICAqIEBwYXJhbSBpbWdzIHtTdHJpbmcgfCBBcnJheSB8IERPTUVMZW1lbnR9IOaWsOeahOmcgOimgeWKoOi9veeahGltZyDlpoLmnpzliJ3lp4vljJbml7bkvKDlhaXnmoTmmK9lbCDliJnmraTml7bkuI3pnIDopoHlj4LmlbByCiAgICAgICAgICogQGRlc2Mg6YeN572u5Yqg6L29CiAgICAgICAgICovCiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uKGltZ3MpIHsKICAgICAgICAgICAgdGhpcy5zZXREb21zKGltZ3MpOwogICAgICAgICAgICB0aGlzLmNoZWNrKCk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQHB1YmxpYwogICAgICAgICAqIEBtZXRob2Qgb2N0b3B1cy5JbWdMYXp5TG9hZC5jaGVjawogICAgICAgICAqIEBkZXNjIOafpeeci+W9k+WJjeaYr+WQpuespuWQiOWKoOi9veadoeS7tgogICAgICAgICAqLwogICAgICAgIGNoZWNrOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5pc1Njcm9sbCA9IGZhbHNlOwogICAgICAgICAgICB2YXIgbGVuID0gdGhpcy5pbWdzLmxlbmd0aDsKICAgICAgICAgICAgaWYobGVuID09IDApICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB2YXIgdCA9IHRoaXMuY29udGFpbmVyLnNjcm9sbFRvcCwKICAgICAgICAgICAgICAgIGggPSBvLmRvbS5nZXRIZWlnaHQodGhpcy5jb250YWluZXIpOwogICAgICAgICAgICBpZih0aGlzLmNvbnRhaW5lciA9PSBkb2N1bWVudC5ib2R5KSB7CiAgICAgICAgICAgICAgICB2YXIgX2ggPSBvLmRvbS5nZXRTY3JlZW5IZWlnaHQoKTsKICAgICAgICAgICAgICAgIGggPiBfaCAmJiAoaCA9IF9oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaSA9IGxlbjsKICAgICAgICAgICAgZm9yKDsgaS0tOyApIHsKICAgICAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5pbWdzW2ldOwogICAgICAgICAgICAgICAgaWYoby5kb20uZGF0YShpdGVtLCAibG9hZGVkIikpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmltZ3Muc3BsaWNlKGksIDEpOwogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5jaGVja0ltZyhpdGVtLCB0LCBoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAqIEBtZXRob2QgY2hlY2tJbWcKICAgICAgICAgKi8KICAgICAgICBjaGVja0ltZzogZnVuY3Rpb24oaXRlbSwgdCwgaCkgewogICAgICAgICAgICB2YXIgdSA9IG8udXRpbDsKICAgICAgICAgICAgaWYoIXUuaXNOb2RlKGl0ZW0pKSByZXR1cm47CiAgICAgICAgICAgIHZhciBkID0gby5kb20sCiAgICAgICAgICAgICAgICBsb2FkZWQgPSBkLmRhdGEoaXRlbSwgImxvYWRlZCIpLAogICAgICAgICAgICAgICAgc3JjID0gZC5kYXRhKGl0ZW0sIHRoaXMuc3JjTmFtZSk7CiAgICAgICAgICAgIGlmKGxvYWRlZCkgIHJldHVybjsKICAgICAgICAgICAgdmFyIHBvcyA9IGQuZ2V0UG9zaXRpb24oaXRlbSksCiAgICAgICAgICAgICAgICBoZWlnaHQgPSBkLmdldEhlaWdodChpdGVtKSwKICAgICAgICAgICAgICAgIHRvcCA9IHBvcy50b3A7CiAgICAgICAgICAgIGlmKHQgPj0gdG9wIC0gaCAmJiB0IDw9IHRvcCArIGhlaWdodCArIGgpIHsKICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpczsKICAgICAgICAgICAgICAgIHUubG9hZEltYWdlKHNyYywgdS5lbXB0eSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhhdC5ub3RpZnkoImltZ2xhenlsb2FkLWNvcmUtbG9hZGltZ3N1Y2Nlc3MiLCBpdGVtKTsKICAgICAgICAgICAgICAgICAgICBkLmF0dHIoaXRlbSwgewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHNyYywKICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtbG9hZGVkIjogImxvYWRlZCIKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB0aGF0Lm5vdGlmeSgiaW1nbGF6eWxvYWQtY29yZS1sb2FkaW1nZmFpbGUiLCBpdGVtKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7Cgp9KShvY3RvcHVzKTs=",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 21:16:57 GMT",
                    "Content-Length": "157817",
                    "Date": "Fri, 07 Nov 2014 21:17:02 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}