{
    "url": "http://localhost:9999/redbadger/backbone-modelbinder/public/javascripts/backbone.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>window.location.search</b> and written to <b>window.location.replace()</b> via the following statement:<ul><li>window.location.replace(this.options.root + window.location.search + '#' + this.fragment);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/redbadger/backbone-modelbinder/public/javascripts/backbone.js",
                "path": "/redbadger/backbone-modelbinder/public/javascripts/backbone.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9yZWRiYWRnZXIvYmFja2JvbmUtbW9kZWxiaW5kZXIvcHVibGljL2phdmFzY3JpcHRzL2JhY2tib25lLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNTk3NjMNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IFRodSwgMDYgTm92IDIwMTQgMTE6MzA6NTIgR01UDQpMYXN0LU1vZGlmaWVkOiBUaHUsIDA2IE5vdiAyMDE0IDExOjMwOjUwIEdNVA0KDQovLyAgICAgQmFja2JvbmUuanMgMC45LjIKCi8vICAgICAoYykgMjAxMC0yMDEyIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBJbmMuCi8vICAgICBCYWNrYm9uZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KLy8gICAgIEZvciBhbGwgZGV0YWlscyBhbmQgZG9jdW1lbnRhdGlvbjoKLy8gICAgIGh0dHA6Ly9iYWNrYm9uZWpzLm9yZwoKKGZ1bmN0aW9uKCl7CgogICAgLy8gSW5pdGlhbCBTZXR1cAogICAgLy8gLS0tLS0tLS0tLS0tLQoKICAgIC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBgZ2xvYmFsYAogICAgLy8gb24gdGhlIHNlcnZlcikuCiAgICB2YXIgcm9vdCA9IHRoaXM7CgogICAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBCYWNrYm9uZWAgdmFyaWFibGUsIHNvIHRoYXQgaXQgY2FuIGJlCiAgICAvLyByZXN0b3JlZCBsYXRlciBvbiwgaWYgYG5vQ29uZmxpY3RgIGlzIHVzZWQuCiAgICB2YXIgcHJldmlvdXNCYWNrYm9uZSA9IHJvb3QuQmFja2JvbmU7CgogICAgLy8gQ3JlYXRlIGEgbG9jYWwgcmVmZXJlbmNlIHRvIHNwbGljZS4KICAgIHZhciBzcGxpY2UgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlOwoKICAgIC8vIFRoZSB0b3AtbGV2ZWwgbmFtZXNwYWNlLiBBbGwgcHVibGljIEJhY2tib25lIGNsYXNzZXMgYW5kIG1vZHVsZXMgd2lsbAogICAgLy8gYmUgYXR0YWNoZWQgdG8gdGhpcy4gRXhwb3J0ZWQgZm9yIGJvdGggQ29tbW9uSlMgYW5kIHRoZSBicm93c2VyLgogICAgdmFyIEJhY2tib25lOwogICAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIEJhY2tib25lID0gZXhwb3J0czsKICAgIH0gZWxzZSB7CiAgICAgICAgQmFja2JvbmUgPSByb290LkJhY2tib25lID0ge307CiAgICB9CgogICAgLy8gQ3VycmVudCB2ZXJzaW9uIG9mIHRoZSBsaWJyYXJ5LiBLZWVwIGluIHN5bmMgd2l0aCBgcGFja2FnZS5qc29uYC4KICAgIEJhY2tib25lLlZFUlNJT04gPSAnMC45LjInOwoKICAgIC8vIFJlcXVpcmUgVW5kZXJzY29yZSwgaWYgd2UncmUgb24gdGhlIHNlcnZlciwgYW5kIGl0J3Mgbm90IGFscmVhZHkgcHJlc2VudC4KICAgIHZhciBfID0gcm9vdC5fOwogICAgaWYgKCFfICYmICh0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcpKSBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpOwoKICAgIC8vIEZvciBCYWNrYm9uZSdzIHB1cnBvc2VzLCBqUXVlcnksIFplcHRvLCBvciBFbmRlciBvd25zIHRoZSBgJGAgdmFyaWFibGUuCiAgICB2YXIgJCA9IHJvb3QualF1ZXJ5IHx8IHJvb3QuWmVwdG8gfHwgcm9vdC5lbmRlcjsKCiAgICAvLyBTZXQgdGhlIEphdmFTY3JpcHQgbGlicmFyeSB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgRE9NIG1hbmlwdWxhdGlvbiBhbmQKICAgIC8vIEFqYXggY2FsbHMgKGEuay5hLiB0aGUgYCRgIHZhcmlhYmxlKS4gQnkgZGVmYXVsdCBCYWNrYm9uZSB3aWxsIHVzZTogalF1ZXJ5LAogICAgLy8gWmVwdG8sIG9yIEVuZGVyOyBidXQgdGhlIGBzZXREb21MaWJyYXJ5KClgIG1ldGhvZCBsZXRzIHlvdSBpbmplY3QgYW4KICAgIC8vIGFsdGVybmF0ZSBKYXZhU2NyaXB0IGxpYnJhcnkgKG9yIGEgbW9jayBsaWJyYXJ5IGZvciB0ZXN0aW5nIHlvdXIgdmlld3MKICAgIC8vIG91dHNpZGUgb2YgYSBicm93c2VyKS4KICAgIEJhY2tib25lLnNldERvbUxpYnJhcnkgPSBmdW5jdGlvbihsaWIpIHsKICAgICAgICAkID0gbGliOwogICAgfTsKCiAgICAvLyBSdW5zIEJhY2tib25lLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBCYWNrYm9uZWAgdmFyaWFibGUKICAgIC8vIHRvIGl0cyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGlzIEJhY2tib25lIG9iamVjdC4KICAgIEJhY2tib25lLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHsKICAgICAgICByb290LkJhY2tib25lID0gcHJldmlvdXNCYWNrYm9uZTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CgogICAgLy8gVHVybiBvbiBgZW11bGF0ZUhUVFBgIHRvIHN1cHBvcnQgbGVnYWN5IEhUVFAgc2VydmVycy4gU2V0dGluZyB0aGlzIG9wdGlvbgogICAgLy8gd2lsbCBmYWtlIGAiUFVUImAgYW5kIGAiREVMRVRFImAgcmVxdWVzdHMgdmlhIHRoZSBgX21ldGhvZGAgcGFyYW1ldGVyIGFuZAogICAgLy8gc2V0IGEgYFgtSHR0cC1NZXRob2QtT3ZlcnJpZGVgIGhlYWRlci4KICAgIEJhY2tib25lLmVtdWxhdGVIVFRQID0gZmFsc2U7CgogICAgLy8gVHVybiBvbiBgZW11bGF0ZUpTT05gIHRvIHN1cHBvcnQgbGVnYWN5IHNlcnZlcnMgdGhhdCBjYW4ndCBkZWFsIHdpdGggZGlyZWN0CiAgICAvLyBgYXBwbGljYXRpb24vanNvbmAgcmVxdWVzdHMgLi4uIHdpbGwgZW5jb2RlIHRoZSBib2R5IGFzCiAgICAvLyBgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkYCBpbnN0ZWFkIGFuZCB3aWxsIHNlbmQgdGhlIG1vZGVsIGluIGEKICAgIC8vIGZvcm0gcGFyYW0gbmFtZWQgYG1vZGVsYC4KICAgIEJhY2tib25lLmVtdWxhdGVKU09OID0gZmFsc2U7CgogICAgLy8gQmFja2JvbmUuRXZlbnRzCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHNwbGl0IGV2ZW50IHN0cmluZ3MKICAgIHZhciBldmVudFNwbGl0dGVyID0gL1xzKy87CgogICAgLy8gQSBtb2R1bGUgdGhhdCBjYW4gYmUgbWl4ZWQgaW4gdG8gKmFueSBvYmplY3QqIGluIG9yZGVyIHRvIHByb3ZpZGUgaXQgd2l0aAogICAgLy8gY3VzdG9tIGV2ZW50cy4gWW91IG1heSBiaW5kIHdpdGggYG9uYCBvciByZW1vdmUgd2l0aCBgb2ZmYCBjYWxsYmFjayBmdW5jdGlvbnMKICAgIC8vIHRvIGFuIGV2ZW50OyB0cmlnZ2VyYC1pbmcgYW4gZXZlbnQgZmlyZXMgYWxsIGNhbGxiYWNrcyBpbiBzdWNjZXNzaW9uLgogICAgLy8KICAgIC8vICAgICB2YXIgb2JqZWN0ID0ge307CiAgICAvLyAgICAgXy5leHRlbmQob2JqZWN0LCBCYWNrYm9uZS5FdmVudHMpOwogICAgLy8gICAgIG9iamVjdC5vbignZXhwYW5kJywgZnVuY3Rpb24oKXsgYWxlcnQoJ2V4cGFuZGVkJyk7IH0pOwogICAgLy8gICAgIG9iamVjdC50cmlnZ2VyKCdleHBhbmQnKTsKICAgIC8vCiAgICB2YXIgRXZlbnRzID0gQmFja2JvbmUuRXZlbnRzID0gewoKICAgICAgICAvLyBCaW5kIG9uZSBvciBtb3JlIHNwYWNlIHNlcGFyYXRlZCBldmVudHMsIGBldmVudHNgLCB0byBhIGBjYWxsYmFja2AKICAgICAgICAvLyBmdW5jdGlvbi4gUGFzc2luZyBgImFsbCJgIHdpbGwgYmluZCB0aGUgY2FsbGJhY2sgdG8gYWxsIGV2ZW50cyBmaXJlZC4KICAgICAgICBvbjogZnVuY3Rpb24oZXZlbnRzLCBjYWxsYmFjaywgY29udGV4dCkgewogICAgICAgICAgICB2YXIgY2FsbHMsIGV2ZW50LCBsaXN0OwogICAgICAgICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gdGhpczsKCiAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5zcGxpdChldmVudFNwbGl0dGVyKTsKICAgICAgICAgICAgY2FsbHMgPSB0aGlzLl9jYWxsYmFja3MgfHwgKHRoaXMuX2NhbGxiYWNrcyA9IHt9KTsKCiAgICAgICAgICAgIHdoaWxlIChldmVudCA9IGV2ZW50cy5zaGlmdCgpKSB7CiAgICAgICAgICAgICAgICBsaXN0ID0gY2FsbHNbZXZlbnRdIHx8IChjYWxsc1tldmVudF0gPSBbXSk7CiAgICAgICAgICAgICAgICBsaXN0LnB1c2goY2FsbGJhY2ssIGNvbnRleHQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICAvLyBSZW1vdmUgb25lIG9yIG1hbnkgY2FsbGJhY2tzLiBJZiBgY29udGV4dGAgaXMgbnVsbCwgcmVtb3ZlcyBhbGwgY2FsbGJhY2tzCiAgICAgICAgLy8gd2l0aCB0aGF0IGZ1bmN0aW9uLiBJZiBgY2FsbGJhY2tgIGlzIG51bGwsIHJlbW92ZXMgYWxsIGNhbGxiYWNrcyBmb3IgdGhlCiAgICAgICAgLy8gZXZlbnQuIElmIGBldmVudHNgIGlzIG51bGwsIHJlbW92ZXMgYWxsIGJvdW5kIGNhbGxiYWNrcyBmb3IgYWxsIGV2ZW50cy4KICAgICAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50cywgY2FsbGJhY2ssIGNvbnRleHQpIHsKICAgICAgICAgICAgdmFyIGV2ZW50LCBjYWxscywgbGlzdCwgaSwgbGVuZ3RoOwoKICAgICAgICAgICAgLy8gTm8gZXZlbnRzLCBvciByZW1vdmluZyAqYWxsKiBldmVudHMuCiAgICAgICAgICAgIGlmICghKGNhbGxzID0gdGhpcy5fY2FsbGJhY2tzKSkgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIGlmICghKGV2ZW50cyB8fCBjYWxsYmFjayB8fCBjb250ZXh0KSkgewogICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrczsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9CgogICAgICAgICAgICBldmVudHMgPSBldmVudHMgPyBldmVudHMuc3BsaXQoZXZlbnRTcGxpdHRlcikgOiBfLmtleXMoY2FsbHMpOwoKICAgICAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBjYWxsYmFjayBsaXN0LCBzcGxpY2luZyB3aGVyZSBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgd2hpbGUgKGV2ZW50ID0gZXZlbnRzLnNoaWZ0KCkpIHsKICAgICAgICAgICAgICAgIGlmICghKGxpc3QgPSBjYWxsc1tldmVudF0pIHx8ICEoY2FsbGJhY2sgfHwgY29udGV4dCkpIHsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgY2FsbHNbZXZlbnRdOwogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIShjYWxsYmFjayAmJiBsaXN0W2ldICE9PSBjYWxsYmFjayB8fCBjb250ZXh0ICYmIGxpc3RbaSArIDFdICE9PSBjb250ZXh0KSkgewogICAgICAgICAgICAgICAgICAgICAgICBsaXN0LnNwbGljZShpLCAyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIC8vIFRyaWdnZXIgb25lIG9yIG1hbnkgZXZlbnRzLCBmaXJpbmcgYWxsIGJvdW5kIGNhbGxiYWNrcy4gQ2FsbGJhY2tzIGFyZQogICAgICAgIC8vIHBhc3NlZCB0aGUgc2FtZSBhcmd1bWVudHMgYXMgYHRyaWdnZXJgIGlzLCBhcGFydCBmcm9tIHRoZSBldmVudCBuYW1lCiAgICAgICAgLy8gKHVubGVzcyB5b3UncmUgbGlzdGVuaW5nIG9uIGAiYWxsImAsIHdoaWNoIHdpbGwgY2F1c2UgeW91ciBjYWxsYmFjayB0bwogICAgICAgIC8vIHJlY2VpdmUgdGhlIHRydWUgbmFtZSBvZiB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50KS4KICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbihldmVudHMpIHsKICAgICAgICAgICAgdmFyIGV2ZW50LCBjYWxscywgbGlzdCwgaSwgbGVuZ3RoLCBhcmdzLCBhbGwsIHJlc3Q7CiAgICAgICAgICAgIGlmICghKGNhbGxzID0gdGhpcy5fY2FsbGJhY2tzKSkgcmV0dXJuIHRoaXM7CgogICAgICAgICAgICByZXN0ID0gW107CiAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5zcGxpdChldmVudFNwbGl0dGVyKTsKICAgICAgICAgICAgZm9yIChpID0gMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICByZXN0W2kgLSAxXSA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gRm9yIGVhY2ggZXZlbnQsIHdhbGsgdGhyb3VnaCB0aGUgbGlzdCBvZiBjYWxsYmFja3MgdHdpY2UsIGZpcnN0IHRvCiAgICAgICAgICAgIC8vIHRyaWdnZXIgdGhlIGV2ZW50LCB0aGVuIHRvIHRyaWdnZXIgYW55IGAiYWxsImAgY2FsbGJhY2tzLgogICAgICAgICAgICB3aGlsZSAoZXZlbnQgPSBldmVudHMuc2hpZnQoKSkgewogICAgICAgICAgICAgICAgLy8gQ29weSBjYWxsYmFjayBsaXN0cyB0byBwcmV2ZW50IG1vZGlmaWNhdGlvbi4KICAgICAgICAgICAgICAgIGlmIChhbGwgPSBjYWxscy5hbGwpIGFsbCA9IGFsbC5zbGljZSgpOwogICAgICAgICAgICAgICAgaWYgKGxpc3QgPSBjYWxsc1tldmVudF0pIGxpc3QgPSBsaXN0LnNsaWNlKCk7CgogICAgICAgICAgICAgICAgLy8gRXhlY3V0ZSBldmVudCBjYWxsYmFja3MuCiAgICAgICAgICAgICAgICBpZiAobGlzdCkgewogICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFtpXS5hcHBseShsaXN0W2kgKyAxXSB8fCB0aGlzLCByZXN0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gRXhlY3V0ZSAiYWxsIiBjYWxsYmFja3MuCiAgICAgICAgICAgICAgICBpZiAoYWxsKSB7CiAgICAgICAgICAgICAgICAgICAgYXJncyA9IFtldmVudF0uY29uY2F0KHJlc3QpOwogICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFsbC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMikgewogICAgICAgICAgICAgICAgICAgICAgICBhbGxbaV0uYXBwbHkoYWxsW2kgKyAxXSB8fCB0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCiAgICB9OwoKICAgIC8vIEFsaWFzZXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LgogICAgRXZlbnRzLmJpbmQgICA9IEV2ZW50cy5vbjsKICAgIEV2ZW50cy51bmJpbmQgPSBFdmVudHMub2ZmOwoKICAgIC8vIEJhY2tib25lLk1vZGVsCiAgICAvLyAtLS0tLS0tLS0tLS0tLQoKICAgIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCwgd2l0aCBkZWZpbmVkIGF0dHJpYnV0ZXMuIEEgY2xpZW50IGlkIChgY2lkYCkKICAgIC8vIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGFuZCBhc3NpZ25lZCBmb3IgeW91LgogICAgdmFyIE1vZGVsID0gQmFja2JvbmUuTW9kZWwgPSBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7CiAgICAgICAgdmFyIGRlZmF1bHRzOwogICAgICAgIGF0dHJpYnV0ZXMgfHwgKGF0dHJpYnV0ZXMgPSB7fSk7CiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5wYXJzZSkgYXR0cmlidXRlcyA9IHRoaXMucGFyc2UoYXR0cmlidXRlcyk7CiAgICAgICAgaWYgKGRlZmF1bHRzID0gZ2V0VmFsdWUodGhpcywgJ2RlZmF1bHRzJykpIHsKICAgICAgICAgICAgYXR0cmlidXRlcyA9IF8uZXh0ZW5kKHt9LCBkZWZhdWx0cywgYXR0cmlidXRlcyk7CiAgICAgICAgfQogICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29sbGVjdGlvbikgdGhpcy5jb2xsZWN0aW9uID0gb3B0aW9ucy5jb2xsZWN0aW9uOwogICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9OwogICAgICAgIHRoaXMuX2VzY2FwZWRBdHRyaWJ1dGVzID0ge307CiAgICAgICAgdGhpcy5jaWQgPSBfLnVuaXF1ZUlkKCdjJyk7CiAgICAgICAgdGhpcy5jaGFuZ2VkID0ge307CiAgICAgICAgdGhpcy5fc2lsZW50ID0ge307CiAgICAgICAgdGhpcy5fcGVuZGluZyA9IHt9OwogICAgICAgIHRoaXMuc2V0KGF0dHJpYnV0ZXMsIHtzaWxlbnQ6IHRydWV9KTsKICAgICAgICAvLyBSZXNldCBjaGFuZ2UgdHJhY2tpbmcuCiAgICAgICAgdGhpcy5jaGFuZ2VkID0ge307CiAgICAgICAgdGhpcy5fc2lsZW50ID0ge307CiAgICAgICAgdGhpcy5fcGVuZGluZyA9IHt9OwogICAgICAgIHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTsKICAgICAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CgogICAgLy8gQXR0YWNoIGFsbCBpbmhlcml0YWJsZSBtZXRob2RzIHRvIHRoZSBNb2RlbCBwcm90b3R5cGUuCiAgICBfLmV4dGVuZChNb2RlbC5wcm90b3R5cGUsIEV2ZW50cywgewoKICAgICAgICAvLyBBIGhhc2ggb2YgYXR0cmlidXRlcyB3aG9zZSBjdXJyZW50IGFuZCBwcmV2aW91cyB2YWx1ZSBkaWZmZXIuCiAgICAgICAgY2hhbmdlZDogbnVsbCwKCiAgICAgICAgLy8gQSBoYXNoIG9mIGF0dHJpYnV0ZXMgdGhhdCBoYXZlIHNpbGVudGx5IGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgdGltZQogICAgICAgIC8vIGBjaGFuZ2VgIHdhcyBjYWxsZWQuICBXaWxsIGJlY29tZSBwZW5kaW5nIGF0dHJpYnV0ZXMgb24gdGhlIG5leHQgY2FsbC4KICAgICAgICBfc2lsZW50OiBudWxsLAoKICAgICAgICAvLyBBIGhhc2ggb2YgYXR0cmlidXRlcyB0aGF0IGhhdmUgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBgJ2NoYW5nZSdgIGV2ZW50CiAgICAgICAgLy8gYmVnYW4uCiAgICAgICAgX3BlbmRpbmc6IG51bGwsCgogICAgICAgIC8vIFRoZSBkZWZhdWx0IG5hbWUgZm9yIHRoZSBKU09OIGBpZGAgYXR0cmlidXRlIGlzIGAiaWQiYC4gTW9uZ29EQiBhbmQKICAgICAgICAvLyBDb3VjaERCIHVzZXJzIG1heSB3YW50IHRvIHNldCB0aGlzIHRvIGAiX2lkImAuCiAgICAgICAgaWRBdHRyaWJ1dGU6ICdpZCcsCgogICAgICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSwKCiAgICAgICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgbW9kZWwncyBgYXR0cmlidXRlc2Agb2JqZWN0LgogICAgICAgIHRvSlNPTjogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgICAgICByZXR1cm4gXy5jbG9uZSh0aGlzLmF0dHJpYnV0ZXMpOwogICAgICAgIH0sCgogICAgICAgIC8vIEdldCB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlLgogICAgICAgIGdldDogZnVuY3Rpb24oYXR0cikgewogICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJdOwogICAgICAgIH0sCgogICAgICAgIC8vIEdldCB0aGUgSFRNTC1lc2NhcGVkIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZS4KICAgICAgICBlc2NhcGU6IGZ1bmN0aW9uKGF0dHIpIHsKICAgICAgICAgICAgdmFyIGh0bWw7CiAgICAgICAgICAgIGlmIChodG1sID0gdGhpcy5fZXNjYXBlZEF0dHJpYnV0ZXNbYXR0cl0pIHJldHVybiBodG1sOwogICAgICAgICAgICB2YXIgdmFsID0gdGhpcy5nZXQoYXR0cik7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lc2NhcGVkQXR0cmlidXRlc1thdHRyXSA9IF8uZXNjYXBlKHZhbCA9PSBudWxsID8gJycgOiAnJyArIHZhbCk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGF0dHJpYnV0ZSBjb250YWlucyBhIHZhbHVlIHRoYXQgaXMgbm90IG51bGwKICAgICAgICAvLyBvciB1bmRlZmluZWQuCiAgICAgICAgaGFzOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChhdHRyKSAhPSBudWxsOwogICAgICAgIH0sCgogICAgICAgIC8vIFNldCBhIGhhc2ggb2YgbW9kZWwgYXR0cmlidXRlcyBvbiB0aGUgb2JqZWN0LCBmaXJpbmcgYCJjaGFuZ2UiYCB1bmxlc3MKICAgICAgICAvLyB5b3UgY2hvb3NlIHRvIHNpbGVuY2UgaXQuCiAgICAgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlLCBvcHRpb25zKSB7CiAgICAgICAgICAgIHZhciBhdHRycywgYXR0ciwgdmFsOwoKICAgICAgICAgICAgLy8gSGFuZGxlIGJvdGggYCJrZXkiLCB2YWx1ZWAgYW5kIGB7a2V5OiB2YWx1ZX1gIC1zdHlsZSBhcmd1bWVudHMuCiAgICAgICAgICAgIGlmIChfLmlzT2JqZWN0KGtleSkgfHwga2V5ID09IG51bGwpIHsKICAgICAgICAgICAgICAgIGF0dHJzID0ga2V5OwogICAgICAgICAgICAgICAgb3B0aW9ucyA9IHZhbHVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYXR0cnMgPSB7fTsKICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gRXh0cmFjdCBhdHRyaWJ1dGVzIGFuZCBvcHRpb25zLgogICAgICAgICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgICAgICAgICBpZiAoIWF0dHJzKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgaWYgKGF0dHJzIGluc3RhbmNlb2YgTW9kZWwpIGF0dHJzID0gYXR0cnMuYXR0cmlidXRlczsKICAgICAgICAgICAgaWYgKG9wdGlvbnMudW5zZXQpIGZvciAoYXR0ciBpbiBhdHRycykgYXR0cnNbYXR0cl0gPSB2b2lkIDA7CgogICAgICAgICAgICAvLyBSdW4gdmFsaWRhdGlvbi4KICAgICAgICAgICAgaWYgKCF0aGlzLl92YWxpZGF0ZShhdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKCiAgICAgICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIG9mIGBpZGAuCiAgICAgICAgICAgIGlmICh0aGlzLmlkQXR0cmlidXRlIGluIGF0dHJzKSB0aGlzLmlkID0gYXR0cnNbdGhpcy5pZEF0dHJpYnV0ZV07CgogICAgICAgICAgICB2YXIgY2hhbmdlcyA9IG9wdGlvbnMuY2hhbmdlcyA9IHt9OwogICAgICAgICAgICB2YXIgbm93ID0gdGhpcy5hdHRyaWJ1dGVzOwogICAgICAgICAgICB2YXIgZXNjYXBlZCA9IHRoaXMuX2VzY2FwZWRBdHRyaWJ1dGVzOwogICAgICAgICAgICB2YXIgcHJldiA9IHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyB8fCB7fTsKCiAgICAgICAgICAgIC8vIEZvciBlYWNoIGBzZXRgIGF0dHJpYnV0ZS4uLgogICAgICAgICAgICBmb3IgKGF0dHIgaW4gYXR0cnMpIHsKICAgICAgICAgICAgICAgIHZhbCA9IGF0dHJzW2F0dHJdOwoKICAgICAgICAgICAgICAgIC8vIElmIHRoZSBuZXcgYW5kIGN1cnJlbnQgdmFsdWUgZGlmZmVyLCByZWNvcmQgdGhlIGNoYW5nZS4KICAgICAgICAgICAgICAgIGlmICghXy5pc0VxdWFsKG5vd1thdHRyXSwgdmFsKSB8fCAob3B0aW9ucy51bnNldCAmJiBfLmhhcyhub3csIGF0dHIpKSkgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlc2NhcGVkW2F0dHJdOwogICAgICAgICAgICAgICAgICAgIChvcHRpb25zLnNpbGVudCA/IHRoaXMuX3NpbGVudCA6IGNoYW5nZXMpW2F0dHJdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgb3IgZGVsZXRlIHRoZSBjdXJyZW50IHZhbHVlLgogICAgICAgICAgICAgICAgb3B0aW9ucy51bnNldCA/IGRlbGV0ZSBub3dbYXR0cl0gOiBub3dbYXR0cl0gPSB2YWw7CgogICAgICAgICAgICAgICAgLy8gSWYgdGhlIG5ldyBhbmQgcHJldmlvdXMgdmFsdWUgZGlmZmVyLCByZWNvcmQgdGhlIGNoYW5nZS4gIElmIG5vdCwKICAgICAgICAgICAgICAgIC8vIHRoZW4gcmVtb3ZlIGNoYW5nZXMgZm9yIHRoaXMgYXR0cmlidXRlLgogICAgICAgICAgICAgICAgaWYgKCFfLmlzRXF1YWwocHJldlthdHRyXSwgdmFsKSB8fCAoXy5oYXMobm93LCBhdHRyKSAhPSBfLmhhcyhwcmV2LCBhdHRyKSkpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZWRbYXR0cl0gPSB2YWw7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5fcGVuZGluZ1thdHRyXSA9IHRydWU7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNoYW5nZWRbYXR0cl07CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3BlbmRpbmdbYXR0cl07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEZpcmUgdGhlIGAiY2hhbmdlImAgZXZlbnRzLgogICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLmNoYW5nZShvcHRpb25zKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgLy8gUmVtb3ZlIGFuIGF0dHJpYnV0ZSBmcm9tIHRoZSBtb2RlbCwgZmlyaW5nIGAiY2hhbmdlImAgdW5sZXNzIHlvdSBjaG9vc2UKICAgICAgICAvLyB0byBzaWxlbmNlIGl0LiBgdW5zZXRgIGlzIGEgbm9vcCBpZiB0aGUgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3QuCiAgICAgICAgdW5zZXQ6IGZ1bmN0aW9uKGF0dHIsIG9wdGlvbnMpIHsKICAgICAgICAgICAgb3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCBvcHRpb25zLCB7dW5zZXQ6IHRydWV9KTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHIsIG51bGwsIG9wdGlvbnMpOwogICAgICAgIH0sCgogICAgICAgIC8vIENsZWFyIGFsbCBhdHRyaWJ1dGVzIG9uIHRoZSBtb2RlbCwgZmlyaW5nIGAiY2hhbmdlImAgdW5sZXNzIHlvdSBjaG9vc2UKICAgICAgICAvLyB0byBzaWxlbmNlIGl0LgogICAgICAgIGNsZWFyOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgICAgIG9wdGlvbnMgPSBfLmV4dGVuZCh7fSwgb3B0aW9ucywge3Vuc2V0OiB0cnVlfSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldChfLmNsb25lKHRoaXMuYXR0cmlidXRlcyksIG9wdGlvbnMpOwogICAgICAgIH0sCgogICAgICAgIC8vIEZldGNoIHRoZSBtb2RlbCBmcm9tIHRoZSBzZXJ2ZXIuIElmIHRoZSBzZXJ2ZXIncyByZXByZXNlbnRhdGlvbiBvZiB0aGUKICAgICAgICAvLyBtb2RlbCBkaWZmZXJzIGZyb20gaXRzIGN1cnJlbnQgYXR0cmlidXRlcywgdGhleSB3aWxsIGJlIG92ZXJyaWRlbiwKICAgICAgICAvLyB0cmlnZ2VyaW5nIGEgYCJjaGFuZ2UiYCBldmVudC4KICAgICAgICBmZXRjaDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgICAgICAgdmFyIG1vZGVsID0gdGhpczsKICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7CiAgICAgICAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3AsIHN0YXR1cywgeGhyKSB7CiAgICAgICAgICAgICAgICBpZiAoIW1vZGVsLnNldChtb2RlbC5wYXJzZShyZXNwLCB4aHIpLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3ApOwogICAgICAgICAgICB9OwogICAgICAgICAgICBvcHRpb25zLmVycm9yID0gQmFja2JvbmUud3JhcEVycm9yKG9wdGlvbnMuZXJyb3IsIG1vZGVsLCBvcHRpb25zKTsKICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN5bmMgfHwgQmFja2JvbmUuc3luYykuY2FsbCh0aGlzLCAncmVhZCcsIHRoaXMsIG9wdGlvbnMpOwogICAgICAgIH0sCgogICAgICAgIC8vIFNldCBhIGhhc2ggb2YgbW9kZWwgYXR0cmlidXRlcywgYW5kIHN5bmMgdGhlIG1vZGVsIHRvIHRoZSBzZXJ2ZXIuCiAgICAgICAgLy8gSWYgdGhlIHNlcnZlciByZXR1cm5zIGFuIGF0dHJpYnV0ZXMgaGFzaCB0aGF0IGRpZmZlcnMsIHRoZSBtb2RlbCdzCiAgICAgICAgLy8gc3RhdGUgd2lsbCBiZSBgc2V0YCBhZ2Fpbi4KICAgICAgICBzYXZlOiBmdW5jdGlvbihrZXksIHZhbHVlLCBvcHRpb25zKSB7CiAgICAgICAgICAgIHZhciBhdHRycywgY3VycmVudDsKCiAgICAgICAgICAgIC8vIEhhbmRsZSBib3RoIGAoImtleSIsIHZhbHVlKWAgYW5kIGAoe2tleTogdmFsdWV9KWAgLXN0eWxlIGNhbGxzLgogICAgICAgICAgICBpZiAoXy5pc09iamVjdChrZXkpIHx8IGtleSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBhdHRycyA9IGtleTsKICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB2YWx1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGF0dHJzID0ge307CiAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CgogICAgICAgICAgICAvLyBJZiB3ZSdyZSAid2FpdCItaW5nIHRvIHNldCBjaGFuZ2VkIGF0dHJpYnV0ZXMsIHZhbGlkYXRlIGVhcmx5LgogICAgICAgICAgICBpZiAob3B0aW9ucy53YWl0KSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgY3VycmVudCA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gUmVndWxhciBzYXZlcyBgc2V0YCBhdHRyaWJ1dGVzIGJlZm9yZSBwZXJzaXN0aW5nIHRvIHRoZSBzZXJ2ZXIuCiAgICAgICAgICAgIHZhciBzaWxlbnRPcHRpb25zID0gXy5leHRlbmQoe30sIG9wdGlvbnMsIHtzaWxlbnQ6IHRydWV9KTsKICAgICAgICAgICAgaWYgKGF0dHJzICYmICF0aGlzLnNldChhdHRycywgb3B0aW9ucy53YWl0ID8gc2lsZW50T3B0aW9ucyA6IG9wdGlvbnMpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEFmdGVyIGEgc3VjY2Vzc2Z1bCBzZXJ2ZXItc2lkZSBzYXZlLCB0aGUgY2xpZW50IGlzIChvcHRpb25hbGx5KQogICAgICAgICAgICAvLyB1cGRhdGVkIHdpdGggdGhlIHNlcnZlci1zaWRlIHN0YXRlLgogICAgICAgICAgICB2YXIgbW9kZWwgPSB0aGlzOwogICAgICAgICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKICAgICAgICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCwgc3RhdHVzLCB4aHIpIHsKICAgICAgICAgICAgICAgIHZhciBzZXJ2ZXJBdHRycyA9IG1vZGVsLnBhcnNlKHJlc3AsIHhocik7CiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy53YWl0KSB7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMud2FpdDsKICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJBdHRycyA9IF8uZXh0ZW5kKGF0dHJzIHx8IHt9LCBzZXJ2ZXJBdHRycyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIW1vZGVsLnNldChzZXJ2ZXJBdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzcyhtb2RlbCwgcmVzcCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvLyBGaW5pc2ggY29uZmlndXJpbmcgYW5kIHNlbmRpbmcgdGhlIEFqYXggcmVxdWVzdC4KICAgICAgICAgICAgb3B0aW9ucy5lcnJvciA9IEJhY2tib25lLndyYXBFcnJvcihvcHRpb25zLmVycm9yLCBtb2RlbCwgb3B0aW9ucyk7CiAgICAgICAgICAgIHZhciBtZXRob2QgPSB0aGlzLmlzTmV3KCkgPyAnY3JlYXRlJyA6ICd1cGRhdGUnOwogICAgICAgICAgICB2YXIgeGhyID0gKHRoaXMuc3luYyB8fCBCYWNrYm9uZS5zeW5jKS5jYWxsKHRoaXMsIG1ldGhvZCwgdGhpcywgb3B0aW9ucyk7CiAgICAgICAgICAgIGlmIChvcHRpb25zLndhaXQpIHRoaXMuY2xlYXIoc2lsZW50T3B0aW9ucykuc2V0KGN1cnJlbnQsIHNpbGVudE9wdGlvbnMpOwogICAgICAgICAgICByZXR1cm4geGhyOwogICAgICAgIH0sCgogICAgICAgIC8vIERlc3Ryb3kgdGhpcyBtb2RlbCBvbiB0aGUgc2VydmVyIGlmIGl0IHdhcyBhbHJlYWR5IHBlcnNpc3RlZC4KICAgICAgICAvLyBPcHRpbWlzdGljYWxseSByZW1vdmVzIHRoZSBtb2RlbCBmcm9tIGl0cyBjb2xsZWN0aW9uLCBpZiBpdCBoYXMgb25lLgogICAgICAgIC8vIElmIGB3YWl0OiB0cnVlYCBpcyBwYXNzZWQsIHdhaXRzIGZvciB0aGUgc2VydmVyIHRvIHJlc3BvbmQgYmVmb3JlIHJlbW92YWwuCiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgICAgICAgdmFyIG1vZGVsID0gdGhpczsKICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7CgogICAgICAgICAgICB2YXIgdHJpZ2dlckRlc3Ryb3kgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIG1vZGVsLnRyaWdnZXIoJ2Rlc3Ryb3knLCBtb2RlbCwgbW9kZWwuY29sbGVjdGlvbiwgb3B0aW9ucyk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBpZiAodGhpcy5pc05ldygpKSB7CiAgICAgICAgICAgICAgICB0cmlnZ2VyRGVzdHJveSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7CiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy53YWl0KSB0cmlnZ2VyRGVzdHJveSgpOwogICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKG1vZGVsLCByZXNwKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbW9kZWwudHJpZ2dlcignc3luYycsIG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9wdGlvbnMuZXJyb3IgPSBCYWNrYm9uZS53cmFwRXJyb3Iob3B0aW9ucy5lcnJvciwgbW9kZWwsIG9wdGlvbnMpOwogICAgICAgICAgICB2YXIgeGhyID0gKHRoaXMuc3luYyB8fCBCYWNrYm9uZS5zeW5jKS5jYWxsKHRoaXMsICdkZWxldGUnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgaWYgKCFvcHRpb25zLndhaXQpIHRyaWdnZXJEZXN0cm95KCk7CiAgICAgICAgICAgIHJldHVybiB4aHI7CiAgICAgICAgfSwKCiAgICAgICAgLy8gRGVmYXVsdCBVUkwgZm9yIHRoZSBtb2RlbCdzIHJlcHJlc2VudGF0aW9uIG9uIHRoZSBzZXJ2ZXIgLS0gaWYgeW91J3JlCiAgICAgICAgLy8gdXNpbmcgQmFja2JvbmUncyByZXN0ZnVsIG1ldGhvZHMsIG92ZXJyaWRlIHRoaXMgdG8gY2hhbmdlIHRoZSBlbmRwb2ludAogICAgICAgIC8vIHRoYXQgd2lsbCBiZSBjYWxsZWQuCiAgICAgICAgdXJsOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGJhc2UgPSBnZXRWYWx1ZSh0aGlzLCAndXJsUm9vdCcpIHx8IGdldFZhbHVlKHRoaXMuY29sbGVjdGlvbiwgJ3VybCcpIHx8IHVybEVycm9yKCk7CiAgICAgICAgICAgIGlmICh0aGlzLmlzTmV3KCkpIHJldHVybiBiYXNlOwogICAgICAgICAgICByZXR1cm4gYmFzZSArIChiYXNlLmNoYXJBdChiYXNlLmxlbmd0aCAtIDEpID09ICcvJyA/ICcnIDogJy8nKSArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmlkKTsKICAgICAgICB9LAoKICAgICAgICAvLyAqKnBhcnNlKiogY29udmVydHMgYSByZXNwb25zZSBpbnRvIHRoZSBoYXNoIG9mIGF0dHJpYnV0ZXMgdG8gYmUgYHNldGAgb24KICAgICAgICAvLyB0aGUgbW9kZWwuIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGlzIGp1c3QgdG8gcGFzcyB0aGUgcmVzcG9uc2UgYWxvbmcuCiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uKHJlc3AsIHhocikgewogICAgICAgICAgICByZXR1cm4gcmVzcDsKICAgICAgICB9LAoKICAgICAgICAvLyBDcmVhdGUgYSBuZXcgbW9kZWwgd2l0aCBpZGVudGljYWwgYXR0cmlidXRlcyB0byB0aGlzIG9uZS4KICAgICAgICBjbG9uZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmF0dHJpYnV0ZXMpOwogICAgICAgIH0sCgogICAgICAgIC8vIEEgbW9kZWwgaXMgbmV3IGlmIGl0IGhhcyBuZXZlciBiZWVuIHNhdmVkIHRvIHRoZSBzZXJ2ZXIsIGFuZCBsYWNrcyBhbiBpZC4KICAgICAgICBpc05ldzogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmlkID09IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgLy8gQ2FsbCB0aGlzIG1ldGhvZCB0byBtYW51YWxseSBmaXJlIGEgYCJjaGFuZ2UiYCBldmVudCBmb3IgdGhpcyBtb2RlbCBhbmQKICAgICAgICAvLyBhIGAiY2hhbmdlOmF0dHJpYnV0ZSJgIGV2ZW50IGZvciBlYWNoIGNoYW5nZWQgYXR0cmlidXRlLgogICAgICAgIC8vIENhbGxpbmcgdGhpcyB3aWxsIGNhdXNlIGFsbCBvYmplY3RzIG9ic2VydmluZyB0aGUgbW9kZWwgdG8gdXBkYXRlLgogICAgICAgIGNoYW5nZTogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgICAgICAgICB2YXIgY2hhbmdpbmcgPSB0aGlzLl9jaGFuZ2luZzsKICAgICAgICAgICAgdGhpcy5fY2hhbmdpbmcgPSB0cnVlOwoKICAgICAgICAgICAgLy8gU2lsZW50IGNoYW5nZXMgYmVjb21lIHBlbmRpbmcgY2hhbmdlcy4KICAgICAgICAgICAgZm9yICh2YXIgYXR0ciBpbiB0aGlzLl9zaWxlbnQpIHRoaXMuX3BlbmRpbmdbYXR0cl0gPSB0cnVlOwoKICAgICAgICAgICAgLy8gU2lsZW50IGNoYW5nZXMgYXJlIHRyaWdnZXJlZC4KICAgICAgICAgICAgdmFyIGNoYW5nZXMgPSBfLmV4dGVuZCh7fSwgb3B0aW9ucy5jaGFuZ2VzLCB0aGlzLl9zaWxlbnQpOwogICAgICAgICAgICB0aGlzLl9zaWxlbnQgPSB7fTsKICAgICAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBjaGFuZ2VzKSB7CiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZTonICsgYXR0ciwgdGhpcywgdGhpcy5nZXQoYXR0ciksIG9wdGlvbnMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjaGFuZ2luZykgcmV0dXJuIHRoaXM7CgogICAgICAgICAgICAvLyBDb250aW51ZSBmaXJpbmcgYCJjaGFuZ2UiYCBldmVudHMgd2hpbGUgdGhlcmUgYXJlIHBlbmRpbmcgY2hhbmdlcy4KICAgICAgICAgICAgd2hpbGUgKCFfLmlzRW1wdHkodGhpcy5fcGVuZGluZykpIHsKICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmcgPSB7fTsKICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJywgdGhpcywgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICAvLyBQZW5kaW5nIGFuZCBzaWxlbnQgY2hhbmdlcyBzdGlsbCByZW1haW4uCiAgICAgICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIHRoaXMuY2hhbmdlZCkgewogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wZW5kaW5nW2F0dHJdIHx8IHRoaXMuX3NpbGVudFthdHRyXSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2hhbmdlZFthdHRyXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5fY2hhbmdpbmcgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBtb2RlbCBoYXMgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBgImNoYW5nZSJgIGV2ZW50LgogICAgICAgIC8vIElmIHlvdSBzcGVjaWZ5IGFuIGF0dHJpYnV0ZSBuYW1lLCBkZXRlcm1pbmUgaWYgdGhhdCBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQuCiAgICAgICAgaGFzQ2hhbmdlZDogZnVuY3Rpb24oYXR0cikgewogICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiAhXy5pc0VtcHR5KHRoaXMuY2hhbmdlZCk7CiAgICAgICAgICAgIHJldHVybiBfLmhhcyh0aGlzLmNoYW5nZWQsIGF0dHIpOwogICAgICAgIH0sCgogICAgICAgIC8vIFJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGF0dHJpYnV0ZXMgdGhhdCBoYXZlIGNoYW5nZWQsIG9yCiAgICAgICAgLy8gZmFsc2UgaWYgdGhlcmUgYXJlIG5vIGNoYW5nZWQgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBkZXRlcm1pbmluZyB3aGF0CiAgICAgICAgLy8gcGFydHMgb2YgYSB2aWV3IG5lZWQgdG8gYmUgdXBkYXRlZCBhbmQvb3Igd2hhdCBhdHRyaWJ1dGVzIG5lZWQgdG8gYmUKICAgICAgICAvLyBwZXJzaXN0ZWQgdG8gdGhlIHNlcnZlci4gVW5zZXQgYXR0cmlidXRlcyB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuCiAgICAgICAgLy8gWW91IGNhbiBhbHNvIHBhc3MgYW4gYXR0cmlidXRlcyBvYmplY3QgdG8gZGlmZiBhZ2FpbnN0IHRoZSBtb2RlbCwKICAgICAgICAvLyBkZXRlcm1pbmluZyBpZiB0aGVyZSAqd291bGQgYmUqIGEgY2hhbmdlLgogICAgICAgIGNoYW5nZWRBdHRyaWJ1dGVzOiBmdW5jdGlvbihkaWZmKSB7CiAgICAgICAgICAgIGlmICghZGlmZikgcmV0dXJuIHRoaXMuaGFzQ2hhbmdlZCgpID8gXy5jbG9uZSh0aGlzLmNoYW5nZWQpIDogZmFsc2U7CiAgICAgICAgICAgIHZhciB2YWwsIGNoYW5nZWQgPSBmYWxzZSwgb2xkID0gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzOwogICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIGRpZmYpIHsKICAgICAgICAgICAgICAgIGlmIChfLmlzRXF1YWwob2xkW2F0dHJdLCAodmFsID0gZGlmZlthdHRyXSkpKSBjb250aW51ZTsKICAgICAgICAgICAgICAgIChjaGFuZ2VkIHx8IChjaGFuZ2VkID0ge30pKVthdHRyXSA9IHZhbDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY2hhbmdlZDsKICAgICAgICB9LAoKICAgICAgICAvLyBHZXQgdGhlIHByZXZpb3VzIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZSwgcmVjb3JkZWQgYXQgdGhlIHRpbWUgdGhlIGxhc3QKICAgICAgICAvLyBgImNoYW5nZSJgIGV2ZW50IHdhcyBmaXJlZC4KICAgICAgICBwcmV2aW91czogZnVuY3Rpb24oYXR0cikgewogICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGggfHwgIXRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcykgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXNbYXR0cl07CiAgICAgICAgfSwKCiAgICAgICAgLy8gR2V0IGFsbCBvZiB0aGUgYXR0cmlidXRlcyBvZiB0aGUgbW9kZWwgYXQgdGhlIHRpbWUgb2YgdGhlIHByZXZpb3VzCiAgICAgICAgLy8gYCJjaGFuZ2UiYCBldmVudC4KICAgICAgICBwcmV2aW91c0F0dHJpYnV0ZXM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gXy5jbG9uZSh0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMpOwogICAgICAgIH0sCgogICAgICAgIC8vIENoZWNrIGlmIHRoZSBtb2RlbCBpcyBjdXJyZW50bHkgaW4gYSB2YWxpZCBzdGF0ZS4gSXQncyBvbmx5IHBvc3NpYmxlIHRvCiAgICAgICAgLy8gZ2V0IGludG8gYW4gKmludmFsaWQqIHN0YXRlIGlmIHlvdSdyZSB1c2luZyBzaWxlbnQgY2hhbmdlcy4KICAgICAgICBpc1ZhbGlkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICF0aGlzLnZhbGlkYXRlIHx8ICF0aGlzLnZhbGlkYXRlKHRoaXMuYXR0cmlidXRlcyk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gUnVuIHZhbGlkYXRpb24gYWdhaW5zdCB0aGUgbmV4dCBjb21wbGV0ZSBzZXQgb2YgbW9kZWwgYXR0cmlidXRlcywKICAgICAgICAvLyByZXR1cm5pbmcgYHRydWVgIGlmIGFsbCBpcyB3ZWxsLiBJZiBhIHNwZWNpZmljIGBlcnJvcmAgY2FsbGJhY2sgaGFzCiAgICAgICAgLy8gYmVlbiBwYXNzZWQsIGNhbGwgdGhhdCBpbnN0ZWFkIG9mIGZpcmluZyB0aGUgZ2VuZXJhbCBgImVycm9yImAgZXZlbnQuCiAgICAgICAgX3ZhbGlkYXRlOiBmdW5jdGlvbihhdHRycywgb3B0aW9ucykgewogICAgICAgICAgICBpZiAob3B0aW9ucy5zaWxlbnQgfHwgIXRoaXMudmFsaWRhdGUpIHJldHVybiB0cnVlOwogICAgICAgICAgICBhdHRycyA9IF8uZXh0ZW5kKHt9LCB0aGlzLmF0dHJpYnV0ZXMsIGF0dHJzKTsKICAgICAgICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZShhdHRycywgb3B0aW9ucyk7CiAgICAgICAgICAgIGlmICghZXJyb3IpIHJldHVybiB0cnVlOwogICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVycm9yKSB7CiAgICAgICAgICAgICAgICBvcHRpb25zLmVycm9yKHRoaXMsIGVycm9yLCBvcHRpb25zKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignZXJyb3InLCB0aGlzLCBlcnJvciwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICB9KTsKCiAgICAvLyBCYWNrYm9uZS5Db2xsZWN0aW9uCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgLy8gUHJvdmlkZXMgYSBzdGFuZGFyZCBjb2xsZWN0aW9uIGNsYXNzIGZvciBvdXIgc2V0cyBvZiBtb2RlbHMsIG9yZGVyZWQKICAgIC8vIG9yIHVub3JkZXJlZC4gSWYgYSBgY29tcGFyYXRvcmAgaXMgc3BlY2lmaWVkLCB0aGUgQ29sbGVjdGlvbiB3aWxsIG1haW50YWluCiAgICAvLyBpdHMgbW9kZWxzIGluIHNvcnQgb3JkZXIsIGFzIHRoZXkncmUgYWRkZWQgYW5kIHJlbW92ZWQuCiAgICB2YXIgQ29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24gPSBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgICAgIGlmIChvcHRpb25zLm1vZGVsKSB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDsKICAgICAgICBpZiAob3B0aW9ucy5jb21wYXJhdG9yKSB0aGlzLmNvbXBhcmF0b3IgPSBvcHRpb25zLmNvbXBhcmF0b3I7CiAgICAgICAgdGhpcy5fcmVzZXQoKTsKICAgICAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICBpZiAobW9kZWxzKSB0aGlzLnJlc2V0KG1vZGVscywge3NpbGVudDogdHJ1ZSwgcGFyc2U6IG9wdGlvbnMucGFyc2V9KTsKICAgIH07CgogICAgLy8gRGVmaW5lIHRoZSBDb2xsZWN0aW9uJ3MgaW5oZXJpdGFibGUgbWV0aG9kcy4KICAgIF8uZXh0ZW5kKENvbGxlY3Rpb24ucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAgICAgLy8gVGhlIGRlZmF1bHQgbW9kZWwgZm9yIGEgY29sbGVjdGlvbiBpcyBqdXN0IGEgKipCYWNrYm9uZS5Nb2RlbCoqLgogICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIG92ZXJyaWRkZW4gaW4gbW9zdCBjYXNlcy4KICAgICAgICBtb2RlbDogTW9kZWwsCgogICAgICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSwKCiAgICAgICAgLy8gVGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYSBDb2xsZWN0aW9uIGlzIGFuIGFycmF5IG9mIHRoZQogICAgICAgIC8vIG1vZGVscycgYXR0cmlidXRlcy4KICAgICAgICB0b0pTT046IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKG1vZGVsKXsgcmV0dXJuIG1vZGVsLnRvSlNPTihvcHRpb25zKTsgfSk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gQWRkIGEgbW9kZWwsIG9yIGxpc3Qgb2YgbW9kZWxzIHRvIHRoZSBzZXQuIFBhc3MgKipzaWxlbnQqKiB0byBhdm9pZAogICAgICAgIC8vIGZpcmluZyB0aGUgYGFkZGAgZXZlbnQgZm9yIGV2ZXJ5IG5ldyBtb2RlbC4KICAgICAgICBhZGQ6IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykgewogICAgICAgICAgICB2YXIgaSwgaW5kZXgsIGxlbmd0aCwgbW9kZWwsIGNpZCwgaWQsIGNpZHMgPSB7fSwgaWRzID0ge30sIGR1cHMgPSBbXTsKICAgICAgICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgICAgICAgbW9kZWxzID0gXy5pc0FycmF5KG1vZGVscykgPyBtb2RlbHMuc2xpY2UoKSA6IFttb2RlbHNdOwoKICAgICAgICAgICAgLy8gQmVnaW4gYnkgdHVybmluZyBiYXJlIG9iamVjdHMgaW50byBtb2RlbCByZWZlcmVuY2VzLCBhbmQgcHJldmVudGluZwogICAgICAgICAgICAvLyBpbnZhbGlkIG1vZGVscyBvciBkdXBsaWNhdGUgbW9kZWxzIGZyb20gYmVpbmcgYWRkZWQuCiAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKCEobW9kZWwgPSBtb2RlbHNbaV0gPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWxzW2ldLCBvcHRpb25zKSkpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkNhbid0IGFkZCBhbiBpbnZhbGlkIG1vZGVsIHRvIGEgY29sbGVjdGlvbiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2lkID0gbW9kZWwuY2lkOwogICAgICAgICAgICAgICAgaWQgPSBtb2RlbC5pZDsKICAgICAgICAgICAgICAgIGlmIChjaWRzW2NpZF0gfHwgdGhpcy5fYnlDaWRbY2lkXSB8fCAoKGlkICE9IG51bGwpICYmIChpZHNbaWRdIHx8IHRoaXMuX2J5SWRbaWRdKSkpIHsKICAgICAgICAgICAgICAgICAgICBkdXBzLnB1c2goaSk7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjaWRzW2NpZF0gPSBpZHNbaWRdID0gbW9kZWw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzLgogICAgICAgICAgICBpID0gZHVwcy5sZW5ndGg7CiAgICAgICAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICAgICAgICAgIGR1cHNbaV0gPSBtb2RlbHMuc3BsaWNlKGR1cHNbaV0sIDEpWzBdOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBMaXN0ZW4gdG8gYWRkZWQgbW9kZWxzJyBldmVudHMsIGFuZCBpbmRleCBtb2RlbHMgZm9yIGxvb2t1cCBieQogICAgICAgICAgICAvLyBgaWRgIGFuZCBieSBgY2lkYC4KICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbW9kZWxzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAobW9kZWwgPSBtb2RlbHNbaV0pLm9uKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpOwogICAgICAgICAgICAgICAgdGhpcy5fYnlDaWRbbW9kZWwuY2lkXSA9IG1vZGVsOwogICAgICAgICAgICAgICAgaWYgKG1vZGVsLmlkICE9IG51bGwpIHRoaXMuX2J5SWRbbW9kZWwuaWRdID0gbW9kZWw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEluc2VydCBtb2RlbHMgaW50byB0aGUgY29sbGVjdGlvbiwgcmUtc29ydGluZyBpZiBuZWVkZWQsIGFuZCB0cmlnZ2VyaW5nCiAgICAgICAgICAgIC8vIGBhZGRgIGV2ZW50cyB1bmxlc3Mgc2lsZW5jZWQuCiAgICAgICAgICAgIHRoaXMubGVuZ3RoICs9IGxlbmd0aDsKICAgICAgICAgICAgaW5kZXggPSBvcHRpb25zLmF0ICE9IG51bGwgPyBvcHRpb25zLmF0IDogdGhpcy5tb2RlbHMubGVuZ3RoOwogICAgICAgICAgICBzcGxpY2UuYXBwbHkodGhpcy5tb2RlbHMsIFtpbmRleCwgMF0uY29uY2F0KG1vZGVscykpOwogICAgICAgICAgICBpZiAodGhpcy5jb21wYXJhdG9yICYmIG9wdGlvbnMuYXQgPT0gbnVsbCkgdGhpcy5zb3J0KHtzaWxlbnQ6IHRydWV9KTsKICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2lsZW50KSByZXR1cm4gdGhpczsKICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdGhpcy5tb2RlbHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmICghY2lkc1sobW9kZWwgPSB0aGlzLm1vZGVsc1tpXSkuY2lkXSkgY29udGludWU7CiAgICAgICAgICAgICAgICBvcHRpb25zLmluZGV4ID0gaTsKICAgICAgICAgICAgICAgIG1vZGVsLnRyaWdnZXIoJ2FkZCcsIG1vZGVsLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gTWVyZ2UgaW4gZHVwbGljYXRlIG1vZGVscy4KICAgICAgICAgICAgaWYgKG9wdGlvbnMubWVyZ2UpIHsKICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGR1cHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwgPSB0aGlzLl9ieUlkW2R1cHNbaV0uaWRdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnNldChkdXBzW2ldLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIC8vIFJlbW92ZSBhIG1vZGVsLCBvciBhIGxpc3Qgb2YgbW9kZWxzIGZyb20gdGhlIHNldC4gUGFzcyBzaWxlbnQgdG8gYXZvaWQKICAgICAgICAvLyBmaXJpbmcgdGhlIGByZW1vdmVgIGV2ZW50IGZvciBldmVyeSBtb2RlbCByZW1vdmVkLgogICAgICAgIHJlbW92ZTogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgICAgICAgIHZhciBpLCBsLCBpbmRleCwgbW9kZWw7CiAgICAgICAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICAgICAgICAgIG1vZGVscyA9IF8uaXNBcnJheShtb2RlbHMpID8gbW9kZWxzLnNsaWNlKCkgOiBbbW9kZWxzXTsKICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgIG1vZGVsID0gdGhpcy5nZXRCeUNpZChtb2RlbHNbaV0pIHx8IHRoaXMuZ2V0KG1vZGVsc1tpXSk7CiAgICAgICAgICAgICAgICBpZiAoIW1vZGVsKSBjb250aW51ZTsKICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLmlkXTsKICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ieUNpZFttb2RlbC5jaWRdOwogICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLmluZGV4T2YobW9kZWwpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbHMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoLS07CiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5pbmRleCA9IGluZGV4OwogICAgICAgICAgICAgICAgICAgIG1vZGVsLnRyaWdnZXIoJ3JlbW92ZScsIG1vZGVsLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZShtb2RlbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgLy8gQWRkIGEgbW9kZWwgdG8gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi4KICAgICAgICBwdXNoOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykgewogICAgICAgICAgICBtb2RlbCA9IHRoaXMuX3ByZXBhcmVNb2RlbChtb2RlbCwgb3B0aW9ucyk7CiAgICAgICAgICAgIHRoaXMuYWRkKG1vZGVsLCBvcHRpb25zKTsKICAgICAgICAgICAgcmV0dXJuIG1vZGVsOwogICAgICAgIH0sCgogICAgICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi4KICAgICAgICBwb3A6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5hdCh0aGlzLmxlbmd0aCAtIDEpOwogICAgICAgICAgICB0aGlzLnJlbW92ZShtb2RlbCwgb3B0aW9ucyk7CiAgICAgICAgICAgIHJldHVybiBtb2RlbDsKICAgICAgICB9LAoKICAgICAgICAvLyBBZGQgYSBtb2RlbCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb2xsZWN0aW9uLgogICAgICAgIHVuc2hpZnQ6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgICAgICAgIG1vZGVsID0gdGhpcy5fcHJlcGFyZU1vZGVsKG1vZGVsLCBvcHRpb25zKTsKICAgICAgICAgICAgdGhpcy5hZGQobW9kZWwsIF8uZXh0ZW5kKHthdDogMH0sIG9wdGlvbnMpKTsKICAgICAgICAgICAgcmV0dXJuIG1vZGVsOwogICAgICAgIH0sCgogICAgICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgY29sbGVjdGlvbi4KICAgICAgICBzaGlmdDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgICAgICB2YXIgbW9kZWwgPSB0aGlzLmF0KDApOwogICAgICAgICAgICB0aGlzLnJlbW92ZShtb2RlbCwgb3B0aW9ucyk7CiAgICAgICAgICAgIHJldHVybiBtb2RlbDsKICAgICAgICB9LAoKICAgICAgICAvLyBHZXQgYSBtb2RlbCBmcm9tIHRoZSBzZXQgYnkgaWQuCiAgICAgICAgZ2V0OiBmdW5jdGlvbihpZCkgewogICAgICAgICAgICBpZiAoaWQgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J5SWRbaWQuaWQgIT0gbnVsbCA/IGlkLmlkIDogaWRdOwogICAgICAgIH0sCgogICAgICAgIC8vIEdldCBhIG1vZGVsIGZyb20gdGhlIHNldCBieSBjbGllbnQgaWQuCiAgICAgICAgZ2V0QnlDaWQ6IGZ1bmN0aW9uKGNpZCkgewogICAgICAgICAgICByZXR1cm4gY2lkICYmIHRoaXMuX2J5Q2lkW2NpZC5jaWQgfHwgY2lkXTsKICAgICAgICB9LAoKICAgICAgICAvLyBHZXQgdGhlIG1vZGVsIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgICAgICBhdDogZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWxzW2luZGV4XTsKICAgICAgICB9LAoKICAgICAgICAvLyBSZXR1cm4gbW9kZWxzIHdpdGggbWF0Y2hpbmcgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBzaW1wbGUgY2FzZXMgb2YgYGZpbHRlcmAuCiAgICAgICAgd2hlcmU6IGZ1bmN0aW9uKGF0dHJzKSB7CiAgICAgICAgICAgIGlmIChfLmlzRW1wdHkoYXR0cnMpKSByZXR1cm4gW107CiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihtb2RlbCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzW2tleV0gIT09IG1vZGVsLmdldChrZXkpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gRm9yY2UgdGhlIGNvbGxlY3Rpb24gdG8gcmUtc29ydCBpdHNlbGYuIFlvdSBkb24ndCBuZWVkIHRvIGNhbGwgdGhpcyB1bmRlcgogICAgICAgIC8vIG5vcm1hbCBjaXJjdW1zdGFuY2VzLCBhcyB0aGUgc2V0IHdpbGwgbWFpbnRhaW4gc29ydCBvcmRlciBhcyBlYWNoIGl0ZW0KICAgICAgICAvLyBpcyBhZGRlZC4KICAgICAgICBzb3J0OiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICAgICAgICAgIGlmICghdGhpcy5jb21wYXJhdG9yKSB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzb3J0IGEgc2V0IHdpdGhvdXQgYSBjb21wYXJhdG9yJyk7CiAgICAgICAgICAgIHZhciBib3VuZENvbXBhcmF0b3IgPSBfLmJpbmQodGhpcy5jb21wYXJhdG9yLCB0aGlzKTsKICAgICAgICAgICAgaWYgKHRoaXMuY29tcGFyYXRvci5sZW5ndGggPT0gMSkgewogICAgICAgICAgICAgICAgdGhpcy5tb2RlbHMgPSB0aGlzLnNvcnRCeShib3VuZENvbXBhcmF0b3IpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5tb2RlbHMuc29ydChib3VuZENvbXBhcmF0b3IpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMudHJpZ2dlcigncmVzZXQnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgLy8gUGx1Y2sgYW4gYXR0cmlidXRlIGZyb20gZWFjaCBtb2RlbCBpbiB0aGUgY29sbGVjdGlvbi4KICAgICAgICBwbHVjazogZnVuY3Rpb24oYXR0cikgewogICAgICAgICAgICByZXR1cm4gXy5tYXAodGhpcy5tb2RlbHMsIGZ1bmN0aW9uKG1vZGVsKXsgcmV0dXJuIG1vZGVsLmdldChhdHRyKTsgfSk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gV2hlbiB5b3UgaGF2ZSBtb3JlIGl0ZW1zIHRoYW4geW91IHdhbnQgdG8gYWRkIG9yIHJlbW92ZSBpbmRpdmlkdWFsbHksCiAgICAgICAgLy8geW91IGNhbiByZXNldCB0aGUgZW50aXJlIHNldCB3aXRoIGEgbmV3IGxpc3Qgb2YgbW9kZWxzLCB3aXRob3V0IGZpcmluZwogICAgICAgIC8vIGFueSBgYWRkYCBvciBgcmVtb3ZlYCBldmVudHMuIEZpcmVzIGByZXNldGAgd2hlbiBmaW5pc2hlZC4KICAgICAgICByZXNldDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgICAgICAgIG1vZGVscyAgfHwgKG1vZGVscyA9IFtdKTsKICAgICAgICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLm1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZSh0aGlzLm1vZGVsc1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5fcmVzZXQoKTsKICAgICAgICAgICAgdGhpcy5hZGQobW9kZWxzLCBfLmV4dGVuZCh7c2lsZW50OiB0cnVlfSwgb3B0aW9ucykpOwogICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLnRyaWdnZXIoJ3Jlc2V0JywgdGhpcywgb3B0aW9ucyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIC8vIEZldGNoIHRoZSBkZWZhdWx0IHNldCBvZiBtb2RlbHMgZm9yIHRoaXMgY29sbGVjdGlvbiwgcmVzZXR0aW5nIHRoZQogICAgICAgIC8vIGNvbGxlY3Rpb24gd2hlbiB0aGV5IGFycml2ZS4gSWYgYGFkZDogdHJ1ZWAgaXMgcGFzc2VkLCBhcHBlbmRzIHRoZQogICAgICAgIC8vIG1vZGVscyB0byB0aGUgY29sbGVjdGlvbiBpbnN0ZWFkIG9mIHJlc2V0dGluZy4KICAgICAgICBmZXRjaDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHVuZGVmaW5lZCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7CiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpczsKICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7CiAgICAgICAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3AsIHN0YXR1cywgeGhyKSB7CiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uW29wdGlvbnMuYWRkID8gJ2FkZCcgOiAncmVzZXQnXShjb2xsZWN0aW9uLnBhcnNlKHJlc3AsIHhociksIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MoY29sbGVjdGlvbiwgcmVzcCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIG9wdGlvbnMuZXJyb3IgPSBCYWNrYm9uZS53cmFwRXJyb3Iob3B0aW9ucy5lcnJvciwgY29sbGVjdGlvbiwgb3B0aW9ucyk7CiAgICAgICAgICAgIHJldHVybiAodGhpcy5zeW5jIHx8IEJhY2tib25lLnN5bmMpLmNhbGwodGhpcywgJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICB9LAoKICAgICAgICAvLyBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgYSBtb2RlbCBpbiB0aGlzIGNvbGxlY3Rpb24uIEFkZCB0aGUgbW9kZWwgdG8gdGhlCiAgICAgICAgLy8gY29sbGVjdGlvbiBpbW1lZGlhdGVseSwgdW5sZXNzIGB3YWl0OiB0cnVlYCBpcyBwYXNzZWQsIGluIHdoaWNoIGNhc2Ugd2UKICAgICAgICAvLyB3YWl0IGZvciB0aGUgc2VydmVyIHRvIGFncmVlLgogICAgICAgIGNyZWF0ZTogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHsKICAgICAgICAgICAgdmFyIGNvbGwgPSB0aGlzOwogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgICAgICAgbW9kZWwgPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWwsIG9wdGlvbnMpOwogICAgICAgICAgICBpZiAoIW1vZGVsKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGlmICghb3B0aW9ucy53YWl0KSBjb2xsLmFkZChtb2RlbCwgb3B0aW9ucyk7CiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzOwogICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihuZXh0TW9kZWwsIHJlc3AsIHhocikgewogICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMud2FpdCkgY29sbC5hZGQobmV4dE1vZGVsLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyhuZXh0TW9kZWwsIHJlc3ApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBuZXh0TW9kZWwudHJpZ2dlcignc3luYycsIG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgbW9kZWwuc2F2ZShudWxsLCBvcHRpb25zKTsKICAgICAgICAgICAgcmV0dXJuIG1vZGVsOwogICAgICAgIH0sCgogICAgICAgIC8vICoqcGFyc2UqKiBjb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gYSBsaXN0IG9mIG1vZGVscyB0byBiZSBhZGRlZCB0byB0aGUKICAgICAgICAvLyBjb2xsZWN0aW9uLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgaXQgdGhyb3VnaC4KICAgICAgICBwYXJzZTogZnVuY3Rpb24ocmVzcCwgeGhyKSB7CiAgICAgICAgICAgIHJldHVybiByZXNwOwogICAgICAgIH0sCgogICAgICAgIC8vIENyZWF0ZSBhIG5ldyBjb2xsZWN0aW9uIHdpdGggYW4gaWRlbnRpY2FsIGxpc3Qgb2YgbW9kZWxzIGFzIHRoaXMgb25lLgogICAgICAgIGNsb25lOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMubW9kZWxzKTsKICAgICAgICB9LAoKICAgICAgICAvLyBQcm94eSB0byBfJ3MgY2hhaW4uIENhbid0IGJlIHByb3hpZWQgdGhlIHNhbWUgd2F5IHRoZSByZXN0IG9mIHRoZQogICAgICAgIC8vIHVuZGVyc2NvcmUgbWV0aG9kcyBhcmUgcHJveGllZCBiZWNhdXNlIGl0IHJlbGllcyBvbiB0aGUgdW5kZXJzY29yZQogICAgICAgIC8vIGNvbnN0cnVjdG9yLgogICAgICAgIGNoYWluOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIF8odGhpcy5tb2RlbHMpLmNoYWluKCk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gUmVzZXQgYWxsIGludGVybmFsIHN0YXRlLiBDYWxsZWQgd2hlbiB0aGUgY29sbGVjdGlvbiBpcyByZXNldC4KICAgICAgICBfcmVzZXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICAgICAgdGhpcy5sZW5ndGggPSAwOwogICAgICAgICAgICB0aGlzLm1vZGVscyA9IFtdOwogICAgICAgICAgICB0aGlzLl9ieUlkICA9IHt9OwogICAgICAgICAgICB0aGlzLl9ieUNpZCA9IHt9OwogICAgICAgIH0sCgogICAgICAgIC8vIFByZXBhcmUgYSBtb2RlbCBvciBoYXNoIG9mIGF0dHJpYnV0ZXMgdG8gYmUgYWRkZWQgdG8gdGhpcyBjb2xsZWN0aW9uLgogICAgICAgIF9wcmVwYXJlTW9kZWw6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmIChhdHRycyBpbnN0YW5jZW9mIE1vZGVsKSB7CiAgICAgICAgICAgICAgICBpZiAoIWF0dHJzLmNvbGxlY3Rpb24pIGF0dHJzLmNvbGxlY3Rpb24gPSB0aGlzOwogICAgICAgICAgICAgICAgcmV0dXJuIGF0dHJzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICAgICAgICAgIG9wdGlvbnMuY29sbGVjdGlvbiA9IHRoaXM7CiAgICAgICAgICAgIHZhciBtb2RlbCA9IG5ldyB0aGlzLm1vZGVsKGF0dHJzLCBvcHRpb25zKTsKICAgICAgICAgICAgaWYgKCFtb2RlbC5fdmFsaWRhdGUobW9kZWwuYXR0cmlidXRlcywgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuIG1vZGVsOwogICAgICAgIH0sCgogICAgICAgIC8vIEludGVybmFsIG1ldGhvZCB0byByZW1vdmUgYSBtb2RlbCdzIHRpZXMgdG8gYSBjb2xsZWN0aW9uLgogICAgICAgIF9yZW1vdmVSZWZlcmVuY2U6IGZ1bmN0aW9uKG1vZGVsKSB7CiAgICAgICAgICAgIGlmICh0aGlzID09IG1vZGVsLmNvbGxlY3Rpb24pIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSBtb2RlbC5jb2xsZWN0aW9uOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG1vZGVsLm9mZignYWxsJywgdGhpcy5fb25Nb2RlbEV2ZW50LCB0aGlzKTsKICAgICAgICB9LAoKICAgICAgICAvLyBJbnRlcm5hbCBtZXRob2QgY2FsbGVkIGV2ZXJ5IHRpbWUgYSBtb2RlbCBpbiB0aGUgc2V0IGZpcmVzIGFuIGV2ZW50LgogICAgICAgIC8vIFNldHMgbmVlZCB0byB1cGRhdGUgdGhlaXIgaW5kZXhlcyB3aGVuIG1vZGVscyBjaGFuZ2UgaWRzLiBBbGwgb3RoZXIKICAgICAgICAvLyBldmVudHMgc2ltcGx5IHByb3h5IHRocm91Z2guICJhZGQiIGFuZCAicmVtb3ZlIiBldmVudHMgdGhhdCBvcmlnaW5hdGUKICAgICAgICAvLyBpbiBvdGhlciBjb2xsZWN0aW9ucyBhcmUgaWdub3JlZC4KICAgICAgICBfb25Nb2RlbEV2ZW50OiBmdW5jdGlvbihldmVudCwgbW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYgKChldmVudCA9PSAnYWRkJyB8fCBldmVudCA9PSAncmVtb3ZlJykgJiYgY29sbGVjdGlvbiAhPSB0aGlzKSByZXR1cm47CiAgICAgICAgICAgIGlmIChldmVudCA9PSAnZGVzdHJveScpIHsKICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobW9kZWwgJiYgZXZlbnQgPT09ICdjaGFuZ2U6JyArIG1vZGVsLmlkQXR0cmlidXRlKSB7CiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fYnlJZFttb2RlbC5wcmV2aW91cyhtb2RlbC5pZEF0dHJpYnV0ZSldOwogICAgICAgICAgICAgICAgaWYgKG1vZGVsLmlkICE9IG51bGwpIHRoaXMuX2J5SWRbbW9kZWwuaWRdID0gbW9kZWw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy50cmlnZ2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfQoKICAgIH0pOwoKICAgIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHdlIHdhbnQgdG8gaW1wbGVtZW50IG9uIHRoZSBDb2xsZWN0aW9uLgogICAgdmFyIG1ldGhvZHMgPSBbJ2ZvckVhY2gnLCAnZWFjaCcsICdtYXAnLCAncmVkdWNlJywgJ3JlZHVjZVJpZ2h0JywgJ2ZpbmQnLAogICAgICAgICdkZXRlY3QnLCAnZmlsdGVyJywgJ3NlbGVjdCcsICdyZWplY3QnLCAnZXZlcnknLCAnYWxsJywgJ3NvbWUnLCAnYW55JywKICAgICAgICAnaW5jbHVkZScsICdjb250YWlucycsICdpbnZva2UnLCAnbWF4JywgJ21pbicsICdzb3J0QnknLCAnc29ydGVkSW5kZXgnLAogICAgICAgICd0b0FycmF5JywgJ3NpemUnLCAnZmlyc3QnLCAnaW5pdGlhbCcsICdyZXN0JywgJ2xhc3QnLCAnd2l0aG91dCcsICdpbmRleE9mJywKICAgICAgICAnc2h1ZmZsZScsICdsYXN0SW5kZXhPZicsICdpc0VtcHR5JywgJ2dyb3VwQnknXTsKCiAgICAvLyBNaXggaW4gZWFjaCBVbmRlcnNjb3JlIG1ldGhvZCBhcyBhIHByb3h5IHRvIGBDb2xsZWN0aW9uI21vZGVsc2AuCiAgICBfLmVhY2gobWV0aG9kcywgZnVuY3Rpb24obWV0aG9kKSB7CiAgICAgICAgQ29sbGVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gX1ttZXRob2RdLmFwcGx5KF8sIFt0aGlzLm1vZGVsc10uY29uY2F0KF8udG9BcnJheShhcmd1bWVudHMpKSk7CiAgICAgICAgfTsKICAgIH0pOwoKICAgIC8vIEJhY2tib25lLlJvdXRlcgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8vIFJvdXRlcnMgbWFwIGZhdXgtVVJMcyB0byBhY3Rpb25zLCBhbmQgZmlyZSBldmVudHMgd2hlbiByb3V0ZXMgYXJlCiAgICAvLyBtYXRjaGVkLiBDcmVhdGluZyBhIG5ldyBvbmUgc2V0cyBpdHMgYHJvdXRlc2AgaGFzaCwgaWYgbm90IHNldCBzdGF0aWNhbGx5LgogICAgdmFyIFJvdXRlciA9IEJhY2tib25lLlJvdXRlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgICAgIGlmIChvcHRpb25zLnJvdXRlcykgdGhpcy5yb3V0ZXMgPSBvcHRpb25zLnJvdXRlczsKICAgICAgICB0aGlzLl9iaW5kUm91dGVzKCk7CiAgICAgICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwoKICAgIC8vIENhY2hlZCByZWd1bGFyIGV4cHJlc3Npb25zIGZvciBtYXRjaGluZyBuYW1lZCBwYXJhbSBwYXJ0cyBhbmQgc3BsYXR0ZWQKICAgIC8vIHBhcnRzIG9mIHJvdXRlIHN0cmluZ3MuCiAgICB2YXIgbmFtZWRQYXJhbSAgICA9IC86XHcrL2c7CiAgICB2YXIgc3BsYXRQYXJhbSAgICA9IC9cKlx3Ky9nOwogICAgdmFyIGVzY2FwZVJlZ0V4cCAgPSAvWy1bXF17fSgpKz8uLFxcXiR8I1xzXS9nOwoKICAgIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5Sb3V0ZXIqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLgogICAgXy5leHRlbmQoUm91dGVyLnByb3RvdHlwZSwgRXZlbnRzLCB7CgogICAgICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSwKCiAgICAgICAgLy8gTWFudWFsbHkgYmluZCBhIHNpbmdsZSBuYW1lZCByb3V0ZSB0byBhIGNhbGxiYWNrLiBGb3IgZXhhbXBsZToKICAgICAgICAvLwogICAgICAgIC8vICAgICB0aGlzLnJvdXRlKCdzZWFyY2gvOnF1ZXJ5L3A6bnVtJywgJ3NlYXJjaCcsIGZ1bmN0aW9uKHF1ZXJ5LCBudW0pIHsKICAgICAgICAvLyAgICAgICAuLi4KICAgICAgICAvLyAgICAgfSk7CiAgICAgICAgLy8KICAgICAgICByb3V0ZTogZnVuY3Rpb24ocm91dGUsIG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIEJhY2tib25lLmhpc3RvcnkgfHwgKEJhY2tib25lLmhpc3RvcnkgPSBuZXcgSGlzdG9yeSk7CiAgICAgICAgICAgIGlmICghXy5pc1JlZ0V4cChyb3V0ZSkpIHJvdXRlID0gdGhpcy5fcm91dGVUb1JlZ0V4cChyb3V0ZSk7CiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gdGhpc1tuYW1lXTsKICAgICAgICAgICAgQmFja2JvbmUuaGlzdG9yeS5yb3V0ZShyb3V0ZSwgXy5iaW5kKGZ1bmN0aW9uKGZyYWdtZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHRoaXMuX2V4dHJhY3RQYXJhbWV0ZXJzKHJvdXRlLCBmcmFnbWVudCk7CiAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlci5hcHBseSh0aGlzLCBbJ3JvdXRlOicgKyBuYW1lXS5jb25jYXQoYXJncykpOwogICAgICAgICAgICAgICAgQmFja2JvbmUuaGlzdG9yeS50cmlnZ2VyKCdyb3V0ZScsIHRoaXMsIG5hbWUsIGFyZ3MpOwogICAgICAgICAgICB9LCB0aGlzKSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIC8vIFNpbXBsZSBwcm94eSB0byBgQmFja2JvbmUuaGlzdG9yeWAgdG8gc2F2ZSBhIGZyYWdtZW50IGludG8gdGhlIGhpc3RvcnkuCiAgICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LCBvcHRpb25zKSB7CiAgICAgICAgICAgIEJhY2tib25lLmhpc3RvcnkubmF2aWdhdGUoZnJhZ21lbnQsIG9wdGlvbnMpOwogICAgICAgIH0sCgogICAgICAgIC8vIEJpbmQgYWxsIGRlZmluZWQgcm91dGVzIHRvIGBCYWNrYm9uZS5oaXN0b3J5YC4gV2UgaGF2ZSB0byByZXZlcnNlIHRoZQogICAgICAgIC8vIG9yZGVyIG9mIHRoZSByb3V0ZXMgaGVyZSB0byBzdXBwb3J0IGJlaGF2aW9yIHdoZXJlIHRoZSBtb3N0IGdlbmVyYWwKICAgICAgICAvLyByb3V0ZXMgY2FuIGJlIGRlZmluZWQgYXQgdGhlIGJvdHRvbSBvZiB0aGUgcm91dGUgbWFwLgogICAgICAgIF9iaW5kUm91dGVzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCF0aGlzLnJvdXRlcykgcmV0dXJuOwogICAgICAgICAgICB2YXIgcm91dGVzID0gW107CiAgICAgICAgICAgIGZvciAodmFyIHJvdXRlIGluIHRoaXMucm91dGVzKSB7CiAgICAgICAgICAgICAgICByb3V0ZXMudW5zaGlmdChbcm91dGUsIHRoaXMucm91dGVzW3JvdXRlXV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcm91dGVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgdGhpcy5yb3V0ZShyb3V0ZXNbaV1bMF0sIHJvdXRlc1tpXVsxXSwgdGhpc1tyb3V0ZXNbaV1bMV1dKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8vIENvbnZlcnQgYSByb3V0ZSBzdHJpbmcgaW50byBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgc3VpdGFibGUgZm9yIG1hdGNoaW5nCiAgICAgICAgLy8gYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbiBoYXNoLgogICAgICAgIF9yb3V0ZVRvUmVnRXhwOiBmdW5jdGlvbihyb3V0ZSkgewogICAgICAgICAgICByb3V0ZSA9IHJvdXRlLnJlcGxhY2UoZXNjYXBlUmVnRXhwLCAnXFwkJicpCiAgICAgICAgICAgICAgICAucmVwbGFjZShuYW1lZFBhcmFtLCAnKFteXC9dKyknKQogICAgICAgICAgICAgICAgLnJlcGxhY2Uoc3BsYXRQYXJhbSwgJyguKj8pJyk7CiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHJvdXRlICsgJyQnKTsKICAgICAgICB9LAoKICAgICAgICAvLyBHaXZlbiBhIHJvdXRlLCBhbmQgYSBVUkwgZnJhZ21lbnQgdGhhdCBpdCBtYXRjaGVzLCByZXR1cm4gdGhlIGFycmF5IG9mCiAgICAgICAgLy8gZXh0cmFjdGVkIHBhcmFtZXRlcnMuCiAgICAgICAgX2V4dHJhY3RQYXJhbWV0ZXJzOiBmdW5jdGlvbihyb3V0ZSwgZnJhZ21lbnQpIHsKICAgICAgICAgICAgcmV0dXJuIHJvdXRlLmV4ZWMoZnJhZ21lbnQpLnNsaWNlKDEpOwogICAgICAgIH0KCiAgICB9KTsKCiAgICAvLyBCYWNrYm9uZS5IaXN0b3J5CiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tCgogICAgLy8gSGFuZGxlcyBjcm9zcy1icm93c2VyIGhpc3RvcnkgbWFuYWdlbWVudCwgYmFzZWQgb24gVVJMIGZyYWdtZW50cy4gSWYgdGhlCiAgICAvLyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgYG9uaGFzaGNoYW5nZWAsIGZhbGxzIGJhY2sgdG8gcG9sbGluZy4KICAgIHZhciBIaXN0b3J5ID0gQmFja2JvbmUuSGlzdG9yeSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTsKICAgICAgICBfLmJpbmRBbGwodGhpcywgJ2NoZWNrVXJsJyk7CiAgICB9OwoKICAgIC8vIENhY2hlZCByZWdleCBmb3IgY2xlYW5pbmcgbGVhZGluZyBoYXNoZXMgYW5kIHNsYXNoZXMgLgogICAgdmFyIHJvdXRlU3RyaXBwZXIgPSAvXlsjXC9dLzsKCiAgICAvLyBDYWNoZWQgcmVnZXggZm9yIGRldGVjdGluZyBNU0lFLgogICAgdmFyIGlzRXhwbG9yZXIgPSAvbXNpZSBbXHcuXSsvOwoKICAgIC8vIEhhcyB0aGUgaGlzdG9yeSBoYW5kbGluZyBhbHJlYWR5IGJlZW4gc3RhcnRlZD8KICAgIEhpc3Rvcnkuc3RhcnRlZCA9IGZhbHNlOwoKICAgIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5IaXN0b3J5KiogcHJvcGVydGllcyBhbmQgbWV0aG9kcy4KICAgIF8uZXh0ZW5kKEhpc3RvcnkucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAgICAgLy8gVGhlIGRlZmF1bHQgaW50ZXJ2YWwgdG8gcG9sbCBmb3IgaGFzaCBjaGFuZ2VzLCBpZiBuZWNlc3NhcnksIGlzCiAgICAgICAgLy8gdHdlbnR5IHRpbWVzIGEgc2Vjb25kLgogICAgICAgIGludGVydmFsOiA1MCwKCiAgICAgICAgLy8gR2V0cyB0aGUgdHJ1ZSBoYXNoIHZhbHVlLiBDYW5ub3QgdXNlIGxvY2F0aW9uLmhhc2ggZGlyZWN0bHkgZHVlIHRvIGJ1ZwogICAgICAgIC8vIGluIEZpcmVmb3ggd2hlcmUgbG9jYXRpb24uaGFzaCB3aWxsIGFsd2F5cyBiZSBkZWNvZGVkLgogICAgICAgIGdldEhhc2g6IGZ1bmN0aW9uKHdpbmRvd092ZXJyaWRlKSB7CiAgICAgICAgICAgIHZhciBsb2MgPSB3aW5kb3dPdmVycmlkZSA/IHdpbmRvd092ZXJyaWRlLmxvY2F0aW9uIDogd2luZG93LmxvY2F0aW9uOwogICAgICAgICAgICB2YXIgbWF0Y2ggPSBsb2MuaHJlZi5tYXRjaCgvIyguKikkLyk7CiAgICAgICAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJyc7CiAgICAgICAgfSwKCiAgICAgICAgLy8gR2V0IHRoZSBjcm9zcy1icm93c2VyIG5vcm1hbGl6ZWQgVVJMIGZyYWdtZW50LCBlaXRoZXIgZnJvbSB0aGUgVVJMLAogICAgICAgIC8vIHRoZSBoYXNoLCBvciB0aGUgb3ZlcnJpZGUuCiAgICAgICAgZ2V0RnJhZ21lbnQ6IGZ1bmN0aW9uKGZyYWdtZW50LCBmb3JjZVB1c2hTdGF0ZSkgewogICAgICAgICAgICBpZiAoZnJhZ21lbnQgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSB8fCAhdGhpcy5fd2FudHNIYXNoQ2hhbmdlIHx8IGZvcmNlUHVzaFN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gdGhpcy5nZXRIYXNoKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFmcmFnbWVudC5pbmRleE9mKHRoaXMub3B0aW9ucy5yb290KSkgZnJhZ21lbnQgPSBmcmFnbWVudC5zdWJzdHIodGhpcy5vcHRpb25zLnJvb3QubGVuZ3RoKTsKICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50LnJlcGxhY2Uocm91dGVTdHJpcHBlciwgJycpOwogICAgICAgIH0sCgogICAgICAgIC8vIFN0YXJ0IHRoZSBoYXNoIGNoYW5nZSBoYW5kbGluZywgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgY3VycmVudCBVUkwgbWF0Y2hlcwogICAgICAgIC8vIGFuIGV4aXN0aW5nIHJvdXRlLCBhbmQgYGZhbHNlYCBvdGhlcndpc2UuCiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYgKEhpc3Rvcnkuc3RhcnRlZCkgdGhyb3cgbmV3IEVycm9yKCJCYWNrYm9uZS5oaXN0b3J5IGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZCIpOwogICAgICAgICAgICBIaXN0b3J5LnN0YXJ0ZWQgPSB0cnVlOwoKICAgICAgICAgICAgLy8gRmlndXJlIG91dCB0aGUgaW5pdGlhbCBjb25maWd1cmF0aW9uLiBEbyB3ZSBuZWVkIGFuIGlmcmFtZT8KICAgICAgICAgICAgLy8gSXMgcHVzaFN0YXRlIGRlc2lyZWQgLi4uIGlzIGl0IGF2YWlsYWJsZT8KICAgICAgICAgICAgdGhpcy5vcHRpb25zICAgICAgICAgID0gXy5leHRlbmQoe30sIHtyb290OiAnLyd9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpOwogICAgICAgICAgICB0aGlzLl93YW50c0hhc2hDaGFuZ2UgPSB0aGlzLm9wdGlvbnMuaGFzaENoYW5nZSAhPT0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuX3dhbnRzUHVzaFN0YXRlICA9ICEhdGhpcy5vcHRpb25zLnB1c2hTdGF0ZTsKICAgICAgICAgICAgdGhpcy5faGFzUHVzaFN0YXRlICAgID0gISEodGhpcy5vcHRpb25zLnB1c2hTdGF0ZSAmJiB3aW5kb3cuaGlzdG9yeSAmJiB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpOwogICAgICAgICAgICB2YXIgZnJhZ21lbnQgICAgICAgICAgPSB0aGlzLmdldEZyYWdtZW50KCk7CiAgICAgICAgICAgIHZhciBkb2NNb2RlICAgICAgICAgICA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTsKICAgICAgICAgICAgdmFyIG9sZElFICAgICAgICAgICAgID0gKGlzRXhwbG9yZXIuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpICYmICghZG9jTW9kZSB8fCBkb2NNb2RlIDw9IDcpKTsKCiAgICAgICAgICAgIGlmIChvbGRJRSAmJiB0aGlzLl93YW50c0hhc2hDaGFuZ2UpIHsKICAgICAgICAgICAgICAgIHRoaXMuaWZyYW1lID0gJCgnPGlmcmFtZSBzcmM9ImphdmFzY3JpcHQ6MCIgdGFiaW5kZXg9Ii0xIiAvPicpLmhpZGUoKS5hcHBlbmRUbygnYm9keScpWzBdLmNvbnRlbnRXaW5kb3c7CiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlKGZyYWdtZW50KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gRGVwZW5kaW5nIG9uIHdoZXRoZXIgd2UncmUgdXNpbmcgcHVzaFN0YXRlIG9yIGhhc2hlcywgYW5kIHdoZXRoZXIKICAgICAgICAgICAgLy8gJ29uaGFzaGNoYW5nZScgaXMgc3VwcG9ydGVkLCBkZXRlcm1pbmUgaG93IHdlIGNoZWNrIHRoZSBVUkwgc3RhdGUuCiAgICAgICAgICAgIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUpIHsKICAgICAgICAgICAgICAgICQod2luZG93KS5iaW5kKCdwb3BzdGF0ZScsIHRoaXMuY2hlY2tVcmwpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSAmJiAoJ29uaGFzaGNoYW5nZScgaW4gd2luZG93KSAmJiAhb2xkSUUpIHsKICAgICAgICAgICAgICAgICQod2luZG93KS5iaW5kKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1VybEludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5jaGVja1VybCwgdGhpcy5pbnRlcnZhbCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIERldGVybWluZSBpZiB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgYmFzZSB1cmwsIGZvciBhIHB1c2hTdGF0ZSBsaW5rCiAgICAgICAgICAgIC8vIG9wZW5lZCBieSBhIG5vbi1wdXNoU3RhdGUgYnJvd3Nlci4KICAgICAgICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWdtZW50OwogICAgICAgICAgICB2YXIgbG9jID0gd2luZG93LmxvY2F0aW9uOwogICAgICAgICAgICB2YXIgYXRSb290ICA9IChsb2MucGF0aG5hbWUgPT0gdGhpcy5vcHRpb25zLnJvb3QpICYmICFsb2Muc2VhcmNoOwoKICAgICAgICAgICAgLy8gSWYgd2UndmUgc3RhcnRlZCBvZmYgd2l0aCBhIHJvdXRlIGZyb20gYSBgcHVzaFN0YXRlYC1lbmFibGVkIGJyb3dzZXIsCiAgICAgICAgICAgIC8vIGJ1dCB3ZSdyZSBjdXJyZW50bHkgaW4gYSBicm93c2VyIHRoYXQgZG9lc24ndCBzdXBwb3J0IGl0Li4uCiAgICAgICAgICAgIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UgJiYgdGhpcy5fd2FudHNQdXNoU3RhdGUgJiYgIXRoaXMuX2hhc1B1c2hTdGF0ZSAmJiAhYXRSb290KSB7CiAgICAgICAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHRoaXMub3B0aW9ucy5yb290ICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArICcjJyArIHRoaXMuZnJhZ21lbnQpOwogICAgICAgICAgICAgICAgLy8gUmV0dXJuIGltbWVkaWF0ZWx5IGFzIGJyb3dzZXIgd2lsbCBkbyByZWRpcmVjdCB0byBuZXcgdXJsCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgICAgICAgICAvLyBPciBpZiB3ZSd2ZSBzdGFydGVkIG91dCB3aXRoIGEgaGFzaC1iYXNlZCByb3V0ZSwgYnV0IHdlJ3JlIGN1cnJlbnRseQogICAgICAgICAgICAgICAgLy8gaW4gYSBicm93c2VyIHdoZXJlIGl0IGNvdWxkIGJlIGBwdXNoU3RhdGVgLWJhc2VkIGluc3RlYWQuLi4KICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c1B1c2hTdGF0ZSAmJiB0aGlzLl9oYXNQdXNoU3RhdGUgJiYgYXRSb290ICYmIGxvYy5oYXNoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRIYXNoKCkucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7CiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIGRvY3VtZW50LnRpdGxlLCBsb2MucHJvdG9jb2wgKyAnLy8nICsgbG9jLmhvc3QgKyB0aGlzLm9wdGlvbnMucm9vdCArIHRoaXMuZnJhZ21lbnQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaWxlbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRVcmwoKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8vIERpc2FibGUgQmFja2JvbmUuaGlzdG9yeSwgcGVyaGFwcyB0ZW1wb3JhcmlseS4gTm90IHVzZWZ1bCBpbiBhIHJlYWwgYXBwLAogICAgICAgIC8vIGJ1dCBwb3NzaWJseSB1c2VmdWwgZm9yIHVuaXQgdGVzdGluZyBSb3V0ZXJzLgogICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkKHdpbmRvdykudW5iaW5kKCdwb3BzdGF0ZScsIHRoaXMuY2hlY2tVcmwpLnVuYmluZCgnaGFzaGNoYW5nZScsIHRoaXMuY2hlY2tVcmwpOwogICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2NoZWNrVXJsSW50ZXJ2YWwpOwogICAgICAgICAgICBIaXN0b3J5LnN0YXJ0ZWQgPSBmYWxzZTsKICAgICAgICB9LAoKICAgICAgICAvLyBBZGQgYSByb3V0ZSB0byBiZSB0ZXN0ZWQgd2hlbiB0aGUgZnJhZ21lbnQgY2hhbmdlcy4gUm91dGVzIGFkZGVkIGxhdGVyCiAgICAgICAgLy8gbWF5IG92ZXJyaWRlIHByZXZpb3VzIHJvdXRlcy4KICAgICAgICByb3V0ZTogZnVuY3Rpb24ocm91dGUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHRoaXMuaGFuZGxlcnMudW5zaGlmdCh7cm91dGU6IHJvdXRlLCBjYWxsYmFjazogY2FsbGJhY2t9KTsKICAgICAgICB9LAoKICAgICAgICAvLyBDaGVja3MgdGhlIGN1cnJlbnQgVVJMIHRvIHNlZSBpZiBpdCBoYXMgY2hhbmdlZCwgYW5kIGlmIGl0IGhhcywKICAgICAgICAvLyBjYWxscyBgbG9hZFVybGAsIG5vcm1hbGl6aW5nIGFjcm9zcyB0aGUgaGlkZGVuIGlmcmFtZS4KICAgICAgICBjaGVja1VybDogZnVuY3Rpb24oZSkgewogICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoKTsKICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT0gdGhpcy5mcmFnbWVudCAmJiB0aGlzLmlmcmFtZSkgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQodGhpcy5nZXRIYXNoKHRoaXMuaWZyYW1lKSk7CiAgICAgICAgICAgIGlmIChjdXJyZW50ID09IHRoaXMuZnJhZ21lbnQpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgaWYgKHRoaXMuaWZyYW1lKSB0aGlzLm5hdmlnYXRlKGN1cnJlbnQpOwogICAgICAgICAgICB0aGlzLmxvYWRVcmwoKSB8fCB0aGlzLmxvYWRVcmwodGhpcy5nZXRIYXNoKCkpOwogICAgICAgIH0sCgogICAgICAgIC8vIEF0dGVtcHQgdG8gbG9hZCB0aGUgY3VycmVudCBVUkwgZnJhZ21lbnQuIElmIGEgcm91dGUgc3VjY2VlZHMgd2l0aCBhCiAgICAgICAgLy8gbWF0Y2gsIHJldHVybnMgYHRydWVgLiBJZiBubyBkZWZpbmVkIHJvdXRlcyBtYXRjaGVzIHRoZSBmcmFnbWVudCwKICAgICAgICAvLyByZXR1cm5zIGBmYWxzZWAuCiAgICAgICAgbG9hZFVybDogZnVuY3Rpb24oZnJhZ21lbnRPdmVycmlkZSkgewogICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChmcmFnbWVudE92ZXJyaWRlKTsKICAgICAgICAgICAgdmFyIG1hdGNoZWQgPSBfLmFueSh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbihoYW5kbGVyKSB7CiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlci5yb3V0ZS50ZXN0KGZyYWdtZW50KSkgewogICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbGJhY2soZnJhZ21lbnQpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIG1hdGNoZWQ7CiAgICAgICAgfSwKCiAgICAgICAgLy8gU2F2ZSBhIGZyYWdtZW50IGludG8gdGhlIGhhc2ggaGlzdG9yeSwgb3IgcmVwbGFjZSB0aGUgVVJMIHN0YXRlIGlmIHRoZQogICAgICAgIC8vICdyZXBsYWNlJyBvcHRpb24gaXMgcGFzc2VkLiBZb3UgYXJlIHJlc3BvbnNpYmxlIGZvciBwcm9wZXJseSBVUkwtZW5jb2RpbmcKICAgICAgICAvLyB0aGUgZnJhZ21lbnQgaW4gYWR2YW5jZS4KICAgICAgICAvLwogICAgICAgIC8vIFRoZSBvcHRpb25zIG9iamVjdCBjYW4gY29udGFpbiBgdHJpZ2dlcjogdHJ1ZWAgaWYgeW91IHdpc2ggdG8gaGF2ZSB0aGUKICAgICAgICAvLyByb3V0ZSBjYWxsYmFjayBiZSBmaXJlZCAobm90IHVzdWFsbHkgZGVzaXJhYmxlKSwgb3IgYHJlcGxhY2U6IHRydWVgLCBpZgogICAgICAgIC8vIHlvdSB3aXNoIHRvIG1vZGlmeSB0aGUgY3VycmVudCBVUkwgd2l0aG91dCBhZGRpbmcgYW4gZW50cnkgdG8gdGhlIGhpc3RvcnkuCiAgICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmICghSGlzdG9yeS5zdGFydGVkKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGlmICghb3B0aW9ucyB8fCBvcHRpb25zID09PSB0cnVlKSBvcHRpb25zID0ge3RyaWdnZXI6IG9wdGlvbnN9OwogICAgICAgICAgICB2YXIgZnJhZyA9IChmcmFnbWVudCB8fCAnJykucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7CiAgICAgICAgICAgIGlmICh0aGlzLmZyYWdtZW50ID09IGZyYWcpIHJldHVybjsKICAgICAgICAgICAgdmFyIGZ1bGxGcmFnID0gKGZyYWcuaW5kZXhPZih0aGlzLm9wdGlvbnMucm9vdCkgIT0gMCA/IHRoaXMub3B0aW9ucy5yb290IDogJycpICsgZnJhZzsKCiAgICAgICAgICAgIC8vIElmIHB1c2hTdGF0ZSBpcyBhdmFpbGFibGUsIHdlIHVzZSBpdCB0byBzZXQgdGhlIGZyYWdtZW50IGFzIGEgcmVhbCBVUkwuCiAgICAgICAgICAgIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUpIHsKICAgICAgICAgICAgICAgIHRoaXMuZnJhZ21lbnQgPSBmdWxsRnJhZzsKICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5W29wdGlvbnMucmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKHt9LCBkb2N1bWVudC50aXRsZSwgZnVsbEZyYWcpOwoKICAgICAgICAgICAgICAgIC8vIElmIGhhc2ggY2hhbmdlcyBoYXZlbid0IGJlZW4gZXhwbGljaXRseSBkaXNhYmxlZCwgdXBkYXRlIHRoZSBoYXNoCiAgICAgICAgICAgICAgICAvLyBmcmFnbWVudCB0byBzdG9yZSBoaXN0b3J5LgogICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSkgewogICAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWc7CiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVIYXNoKHdpbmRvdy5sb2NhdGlvbiwgZnJhZywgb3B0aW9ucy5yZXBsYWNlKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmlmcmFtZSAmJiAoZnJhZyAhPSB0aGlzLmdldEZyYWdtZW50KHRoaXMuZ2V0SGFzaCh0aGlzLmlmcmFtZSkpKSkgewogICAgICAgICAgICAgICAgICAgIC8vIE9wZW5pbmcgYW5kIGNsb3NpbmcgdGhlIGlmcmFtZSB0cmlja3MgSUU3IGFuZCBlYXJsaWVyIHRvIHB1c2ggYSBoaXN0b3J5IGVudHJ5IG9uIGhhc2gtdGFnIGNoYW5nZS4KICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHJlcGxhY2UgaXMgdHJ1ZSwgd2UgZG9uJ3Qgd2FudCB0aGlzLgogICAgICAgICAgICAgICAgICAgIGlmKCFvcHRpb25zLnJlcGxhY2UpIHRoaXMuaWZyYW1lLmRvY3VtZW50Lm9wZW4oKS5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhhc2godGhpcy5pZnJhbWUubG9jYXRpb24sIGZyYWcsIG9wdGlvbnMucmVwbGFjZSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gSWYgeW91J3ZlIHRvbGQgdXMgdGhhdCB5b3UgZXhwbGljaXRseSBkb24ndCB3YW50IGZhbGxiYWNrIGhhc2hjaGFuZ2UtCiAgICAgICAgICAgICAgICAvLyBiYXNlZCBoaXN0b3J5LCB0aGVuIGBuYXZpZ2F0ZWAgYmVjb21lcyBhIHBhZ2UgcmVmcmVzaC4KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uYXNzaWduKGZ1bGxGcmFnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAob3B0aW9ucy50cmlnZ2VyKSB0aGlzLmxvYWRVcmwoZnJhZ21lbnQpOwogICAgICAgIH0sCgogICAgICAgIC8vIFVwZGF0ZSB0aGUgaGFzaCBsb2NhdGlvbiwgZWl0aGVyIHJlcGxhY2luZyB0aGUgY3VycmVudCBlbnRyeSwgb3IgYWRkaW5nCiAgICAgICAgLy8gYSBuZXcgb25lIHRvIHRoZSBicm93c2VyIGhpc3RvcnkuCiAgICAgICAgX3VwZGF0ZUhhc2g6IGZ1bmN0aW9uKGxvY2F0aW9uLCBmcmFnbWVudCwgcmVwbGFjZSkgewogICAgICAgICAgICBpZiAocmVwbGFjZSkgewogICAgICAgICAgICAgICAgbG9jYXRpb24ucmVwbGFjZShsb2NhdGlvbi50b1N0cmluZygpLnJlcGxhY2UoLyhqYXZhc2NyaXB0OnwjKS4qJC8sICcnKSArICcjJyArIGZyYWdtZW50KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSBmcmFnbWVudDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKICAgIC8vIEJhY2tib25lLlZpZXcKICAgIC8vIC0tLS0tLS0tLS0tLS0KCiAgICAvLyBDcmVhdGluZyBhIEJhY2tib25lLlZpZXcgY3JlYXRlcyBpdHMgaW5pdGlhbCBlbGVtZW50IG91dHNpZGUgb2YgdGhlIERPTSwKICAgIC8vIGlmIGFuIGV4aXN0aW5nIGVsZW1lbnQgaXMgbm90IHByb3ZpZGVkLi4uCiAgICB2YXIgVmlldyA9IEJhY2tib25lLlZpZXcgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgdGhpcy5jaWQgPSBfLnVuaXF1ZUlkKCd2aWV3Jyk7CiAgICAgICAgdGhpcy5fY29uZmlndXJlKG9wdGlvbnMgfHwge30pOwogICAgICAgIHRoaXMuX2Vuc3VyZUVsZW1lbnQoKTsKICAgICAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKCk7CiAgICB9OwoKICAgIC8vIENhY2hlZCByZWdleCB0byBzcGxpdCBrZXlzIGZvciBgZGVsZWdhdGVgLgogICAgdmFyIGRlbGVnYXRlRXZlbnRTcGxpdHRlciA9IC9eKFxTKylccyooLiopJC87CgogICAgLy8gTGlzdCBvZiB2aWV3IG9wdGlvbnMgdG8gYmUgbWVyZ2VkIGFzIHByb3BlcnRpZXMuCiAgICB2YXIgdmlld09wdGlvbnMgPSBbJ21vZGVsJywgJ2NvbGxlY3Rpb24nLCAnZWwnLCAnaWQnLCAnYXR0cmlidXRlcycsICdjbGFzc05hbWUnLCAndGFnTmFtZSddOwoKICAgIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5WaWV3KiogcHJvcGVydGllcyBhbmQgbWV0aG9kcy4KICAgIF8uZXh0ZW5kKFZpZXcucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAgICAgLy8gVGhlIGRlZmF1bHQgYHRhZ05hbWVgIG9mIGEgVmlldydzIGVsZW1lbnQgaXMgYCJkaXYiYC4KICAgICAgICB0YWdOYW1lOiAnZGl2JywKCiAgICAgICAgLy8galF1ZXJ5IGRlbGVnYXRlIGZvciBlbGVtZW50IGxvb2t1cCwgc2NvcGVkIHRvIERPTSBlbGVtZW50cyB3aXRoaW4gdGhlCiAgICAgICAgLy8gY3VycmVudCB2aWV3LiBUaGlzIHNob3VsZCBiZSBwcmVmZXJlZCB0byBnbG9iYWwgbG9va3VwcyB3aGVyZSBwb3NzaWJsZS4KICAgICAgICAkOiBmdW5jdGlvbihzZWxlY3RvcikgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChzZWxlY3Rvcik7CiAgICAgICAgfSwKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duCiAgICAgICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXt9LAoKICAgICAgICAvLyAqKnJlbmRlcioqIGlzIHRoZSBjb3JlIGZ1bmN0aW9uIHRoYXQgeW91ciB2aWV3IHNob3VsZCBvdmVycmlkZSwgaW4gb3JkZXIKICAgICAgICAvLyB0byBwb3B1bGF0ZSBpdHMgZWxlbWVudCAoYHRoaXMuZWxgKSwgd2l0aCB0aGUgYXBwcm9wcmlhdGUgSFRNTC4gVGhlCiAgICAgICAgLy8gY29udmVudGlvbiBpcyBmb3IgKipyZW5kZXIqKiB0byBhbHdheXMgcmV0dXJuIGB0aGlzYC4KICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICAvLyBSZW1vdmUgdGhpcyB2aWV3IGZyb20gdGhlIERPTS4gTm90ZSB0aGF0IHRoZSB2aWV3IGlzbid0IHByZXNlbnQgaW4gdGhlCiAgICAgICAgLy8gRE9NIGJ5IGRlZmF1bHQsIHNvIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IGJlIGEgbm8tb3AuCiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy4kZWwucmVtb3ZlKCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIC8vIEZvciBzbWFsbCBhbW91bnRzIG9mIERPTSBFbGVtZW50cywgd2hlcmUgYSBmdWxsLWJsb3duIHRlbXBsYXRlIGlzbid0CiAgICAgICAgLy8gbmVlZGVkLCB1c2UgKiptYWtlKiogdG8gbWFudWZhY3R1cmUgZWxlbWVudHMsIG9uZSBhdCBhIHRpbWUuCiAgICAgICAgLy8KICAgICAgICAvLyAgICAgdmFyIGVsID0gdGhpcy5tYWtlKCdsaScsIHsnY2xhc3MnOiAncm93J30sIHRoaXMubW9kZWwuZXNjYXBlKCd0aXRsZScpKTsKICAgICAgICAvLwogICAgICAgIG1ha2U6IGZ1bmN0aW9uKHRhZ05hbWUsIGF0dHJpYnV0ZXMsIGNvbnRlbnQpIHsKICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTsKICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMpICQoZWwpLmF0dHIoYXR0cmlidXRlcyk7CiAgICAgICAgICAgIGlmIChjb250ZW50ICE9IG51bGwpICQoZWwpLmh0bWwoY29udGVudCk7CiAgICAgICAgICAgIHJldHVybiBlbDsKICAgICAgICB9LAoKICAgICAgICAvLyBDaGFuZ2UgdGhlIHZpZXcncyBlbGVtZW50IChgdGhpcy5lbGAgcHJvcGVydHkpLCBpbmNsdWRpbmcgZXZlbnQKICAgICAgICAvLyByZS1kZWxlZ2F0aW9uLgogICAgICAgIHNldEVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGRlbGVnYXRlKSB7CiAgICAgICAgICAgIGlmICh0aGlzLiRlbCkgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7CiAgICAgICAgICAgIHRoaXMuJGVsID0gKGVsZW1lbnQgaW5zdGFuY2VvZiAkKSA/IGVsZW1lbnQgOiAkKGVsZW1lbnQpOwogICAgICAgICAgICB0aGlzLmVsID0gdGhpcy4kZWxbMF07CiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZSAhPT0gZmFsc2UpIHRoaXMuZGVsZWdhdGVFdmVudHMoKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgLy8gU2V0IGNhbGxiYWNrcywgd2hlcmUgYHRoaXMuZXZlbnRzYCBpcyBhIGhhc2ggb2YKICAgICAgICAvLwogICAgICAgIC8vICp7ImV2ZW50IHNlbGVjdG9yIjogImNhbGxiYWNrIn0qCiAgICAgICAgLy8KICAgICAgICAvLyAgICAgewogICAgICAgIC8vICAgICAgICdtb3VzZWRvd24gLnRpdGxlJzogICdlZGl0JywKICAgICAgICAvLyAgICAgICAnY2xpY2sgLmJ1dHRvbic6ICAgICAnc2F2ZScKICAgICAgICAvLyAgICAgICAnY2xpY2sgLm9wZW4nOiAgICAgICBmdW5jdGlvbihlKSB7IC4uLiB9CiAgICAgICAgLy8gICAgIH0KICAgICAgICAvLwogICAgICAgIC8vIHBhaXJzLiBDYWxsYmFja3Mgd2lsbCBiZSBib3VuZCB0byB0aGUgdmlldywgd2l0aCBgdGhpc2Agc2V0IHByb3Blcmx5LgogICAgICAgIC8vIFVzZXMgZXZlbnQgZGVsZWdhdGlvbiBmb3IgZWZmaWNpZW5jeS4KICAgICAgICAvLyBPbWl0dGluZyB0aGUgc2VsZWN0b3IgYmluZHMgdGhlIGV2ZW50IHRvIGB0aGlzLmVsYC4KICAgICAgICAvLyBUaGlzIG9ubHkgd29ya3MgZm9yIGRlbGVnYXRlLWFibGUgZXZlbnRzOiBub3QgYGZvY3VzYCwgYGJsdXJgLCBhbmQKICAgICAgICAvLyBub3QgYGNoYW5nZWAsIGBzdWJtaXRgLCBhbmQgYHJlc2V0YCBpbiBJbnRlcm5ldCBFeHBsb3Jlci4KICAgICAgICBkZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7CiAgICAgICAgICAgIGlmICghKGV2ZW50cyB8fCAoZXZlbnRzID0gZ2V0VmFsdWUodGhpcywgJ2V2ZW50cycpKSkpIHJldHVybjsKICAgICAgICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7CiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBldmVudHMpIHsKICAgICAgICAgICAgICAgIHZhciBtZXRob2QgPSBldmVudHNba2V5XTsKICAgICAgICAgICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKG1ldGhvZCkpIG1ldGhvZCA9IHRoaXNbZXZlbnRzW2tleV1dOwogICAgICAgICAgICAgICAgaWYgKCFtZXRob2QpIHRocm93IG5ldyBFcnJvcignTWV0aG9kICInICsgZXZlbnRzW2tleV0gKyAnIiBkb2VzIG5vdCBleGlzdCcpOwogICAgICAgICAgICAgICAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGRlbGVnYXRlRXZlbnRTcGxpdHRlcik7CiAgICAgICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gbWF0Y2hbMV0sIHNlbGVjdG9yID0gbWF0Y2hbMl07CiAgICAgICAgICAgICAgICBtZXRob2QgPSBfLmJpbmQobWV0aG9kLCB0aGlzKTsKICAgICAgICAgICAgICAgIGV2ZW50TmFtZSArPSAnLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkOwogICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yID09PSAnJykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmJpbmQoZXZlbnROYW1lLCBtZXRob2QpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbC5kZWxlZ2F0ZShzZWxlY3RvciwgZXZlbnROYW1lLCBtZXRob2QpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLy8gQ2xlYXJzIGFsbCBjYWxsYmFja3MgcHJldmlvdXNseSBib3VuZCB0byB0aGUgdmlldyB3aXRoIGBkZWxlZ2F0ZUV2ZW50c2AuCiAgICAgICAgLy8gWW91IHVzdWFsbHkgZG9uJ3QgbmVlZCB0byB1c2UgdGhpcywgYnV0IG1heSB3aXNoIHRvIGlmIHlvdSBoYXZlIG11bHRpcGxlCiAgICAgICAgLy8gQmFja2JvbmUgdmlld3MgYXR0YWNoZWQgdG8gdGhlIHNhbWUgRE9NIGVsZW1lbnQuCiAgICAgICAgdW5kZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuJGVsLnVuYmluZCgnLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkKTsKICAgICAgICB9LAoKICAgICAgICAvLyBQZXJmb3JtcyB0aGUgaW5pdGlhbCBjb25maWd1cmF0aW9uIG9mIGEgVmlldyB3aXRoIGEgc2V0IG9mIG9wdGlvbnMuCiAgICAgICAgLy8gS2V5cyB3aXRoIHNwZWNpYWwgbWVhbmluZyAqKG1vZGVsLCBjb2xsZWN0aW9uLCBpZCwgY2xhc3NOYW1lKSosIGFyZQogICAgICAgIC8vIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZSB2aWV3LgogICAgICAgIF9jb25maWd1cmU6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucykgb3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZpZXdPcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgdmFyIGF0dHIgPSB2aWV3T3B0aW9uc1tpXTsKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zW2F0dHJdKSB0aGlzW2F0dHJdID0gb3B0aW9uc1thdHRyXTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOwogICAgICAgIH0sCgogICAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBWaWV3IGhhcyBhIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLgogICAgICAgIC8vIElmIGB0aGlzLmVsYCBpcyBhIHN0cmluZywgcGFzcyBpdCB0aHJvdWdoIGAkKClgLCB0YWtlIHRoZSBmaXJzdAogICAgICAgIC8vIG1hdGNoaW5nIGVsZW1lbnQsIGFuZCByZS1hc3NpZ24gaXQgdG8gYGVsYC4gT3RoZXJ3aXNlLCBjcmVhdGUKICAgICAgICAvLyBhbiBlbGVtZW50IGZyb20gdGhlIGBpZGAsIGBjbGFzc05hbWVgIGFuZCBgdGFnTmFtZWAgcHJvcGVydGllcy4KICAgICAgICBfZW5zdXJlRWxlbWVudDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5lbCkgewogICAgICAgICAgICAgICAgdmFyIGF0dHJzID0gXy5leHRlbmQoe30sIGdldFZhbHVlKHRoaXMsICdhdHRyaWJ1dGVzJykpOwogICAgICAgICAgICAgICAgaWYgKHRoaXMuaWQpIGF0dHJzLmlkID0gdGhpcy5pZDsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSkgYXR0cnNbJ2NsYXNzJ10gPSB0aGlzLmNsYXNzTmFtZTsKICAgICAgICAgICAgICAgIHRoaXMuc2V0RWxlbWVudCh0aGlzLm1ha2UoZ2V0VmFsdWUodGhpcywgJ3RhZ05hbWUnKSwgYXR0cnMpLCBmYWxzZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLnNldEVsZW1lbnQodGhpcy5lbCwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH0pOwoKICAgIC8vIFRoZSBzZWxmLXByb3BhZ2F0aW5nIGV4dGVuZCBmdW5jdGlvbiB0aGF0IEJhY2tib25lIGNsYXNzZXMgdXNlLgogICAgdmFyIGV4dGVuZCA9IGZ1bmN0aW9uKHByb3RvUHJvcHMsIGNsYXNzUHJvcHMpIHsKICAgICAgICB2YXIgY2hpbGQgPSBpbmhlcml0cyh0aGlzLCBwcm90b1Byb3BzLCBjbGFzc1Byb3BzKTsKICAgICAgICBjaGlsZC5leHRlbmQgPSB0aGlzLmV4dGVuZDsKICAgICAgICByZXR1cm4gY2hpbGQ7CiAgICB9OwoKICAgIC8vIFNldCB1cCBpbmhlcml0YW5jZSBmb3IgdGhlIG1vZGVsLCBjb2xsZWN0aW9uLCBhbmQgdmlldy4KICAgIE1vZGVsLmV4dGVuZCA9IENvbGxlY3Rpb24uZXh0ZW5kID0gUm91dGVyLmV4dGVuZCA9IFZpZXcuZXh0ZW5kID0gZXh0ZW5kOwoKICAgIC8vIEJhY2tib25lLnN5bmMKICAgIC8vIC0tLS0tLS0tLS0tLS0KCiAgICAvLyBNYXAgZnJvbSBDUlVEIHRvIEhUVFAgZm9yIG91ciBkZWZhdWx0IGBCYWNrYm9uZS5zeW5jYCBpbXBsZW1lbnRhdGlvbi4KICAgIHZhciBtZXRob2RNYXAgPSB7CiAgICAgICAgJ2NyZWF0ZSc6ICdQT1NUJywKICAgICAgICAndXBkYXRlJzogJ1BVVCcsCiAgICAgICAgJ2RlbGV0ZSc6ICdERUxFVEUnLAogICAgICAgICdyZWFkJzogICAnR0VUJwogICAgfTsKCiAgICAvLyBPdmVycmlkZSB0aGlzIGZ1bmN0aW9uIHRvIGNoYW5nZSB0aGUgbWFubmVyIGluIHdoaWNoIEJhY2tib25lIHBlcnNpc3RzCiAgICAvLyBtb2RlbHMgdG8gdGhlIHNlcnZlci4gWW91IHdpbGwgYmUgcGFzc2VkIHRoZSB0eXBlIG9mIHJlcXVlc3QsIGFuZCB0aGUKICAgIC8vIG1vZGVsIGluIHF1ZXN0aW9uLiBCeSBkZWZhdWx0LCBtYWtlcyBhIFJFU1RmdWwgQWpheCByZXF1ZXN0CiAgICAvLyB0byB0aGUgbW9kZWwncyBgdXJsKClgLiBTb21lIHBvc3NpYmxlIGN1c3RvbWl6YXRpb25zIGNvdWxkIGJlOgogICAgLy8KICAgIC8vICogVXNlIGBzZXRUaW1lb3V0YCB0byBiYXRjaCByYXBpZC1maXJlIHVwZGF0ZXMgaW50byBhIHNpbmdsZSByZXF1ZXN0LgogICAgLy8gKiBTZW5kIHVwIHRoZSBtb2RlbHMgYXMgWE1MIGluc3RlYWQgb2YgSlNPTi4KICAgIC8vICogUGVyc2lzdCBtb2RlbHMgdmlhIFdlYlNvY2tldHMgaW5zdGVhZCBvZiBBamF4LgogICAgLy8KICAgIC8vIFR1cm4gb24gYEJhY2tib25lLmVtdWxhdGVIVFRQYCBpbiBvcmRlciB0byBzZW5kIGBQVVRgIGFuZCBgREVMRVRFYCByZXF1ZXN0cwogICAgLy8gYXMgYFBPU1RgLCB3aXRoIGEgYF9tZXRob2RgIHBhcmFtZXRlciBjb250YWluaW5nIHRoZSB0cnVlIEhUVFAgbWV0aG9kLAogICAgLy8gYXMgd2VsbCBhcyBhbGwgcmVxdWVzdHMgd2l0aCB0aGUgYm9keSBhcyBgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkYAogICAgLy8gaW5zdGVhZCBvZiBgYXBwbGljYXRpb24vanNvbmAgd2l0aCB0aGUgbW9kZWwgaW4gYSBwYXJhbSBuYW1lZCBgbW9kZWxgLgogICAgLy8gVXNlZnVsIHdoZW4gaW50ZXJmYWNpbmcgd2l0aCBzZXJ2ZXItc2lkZSBsYW5ndWFnZXMgbGlrZSAqKlBIUCoqIHRoYXQgbWFrZQogICAgLy8gaXQgZGlmZmljdWx0IHRvIHJlYWQgdGhlIGJvZHkgb2YgYFBVVGAgcmVxdWVzdHMuCiAgICBCYWNrYm9uZS5zeW5jID0gZnVuY3Rpb24obWV0aG9kLCBtb2RlbCwgb3B0aW9ucykgewogICAgICAgIHZhciB0eXBlID0gbWV0aG9kTWFwW21ldGhvZF07CgogICAgICAgIC8vIERlZmF1bHQgb3B0aW9ucywgdW5sZXNzIHNwZWNpZmllZC4KICAgICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwoKICAgICAgICAvLyBEZWZhdWx0IEpTT04tcmVxdWVzdCBvcHRpb25zLgogICAgICAgIHZhciBwYXJhbXMgPSB7dHlwZTogdHlwZSwgZGF0YVR5cGU6ICdqc29uJ307CgogICAgICAgIC8vIEVuc3VyZSB0aGF0IHdlIGhhdmUgYSBVUkwuCiAgICAgICAgaWYgKCFvcHRpb25zLnVybCkgewogICAgICAgICAgICBwYXJhbXMudXJsID0gZ2V0VmFsdWUobW9kZWwsICd1cmwnKSB8fCB1cmxFcnJvcigpOwogICAgICAgIH0KCiAgICAgICAgLy8gRW5zdXJlIHRoYXQgd2UgaGF2ZSB0aGUgYXBwcm9wcmlhdGUgcmVxdWVzdCBkYXRhLgogICAgICAgIGlmICghb3B0aW9ucy5kYXRhICYmIG1vZGVsICYmIChtZXRob2QgPT0gJ2NyZWF0ZScgfHwgbWV0aG9kID09ICd1cGRhdGUnKSkgewogICAgICAgICAgICBwYXJhbXMuY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7CiAgICAgICAgICAgIHBhcmFtcy5kYXRhID0gSlNPTi5zdHJpbmdpZnkobW9kZWwpOwogICAgICAgIH0KCiAgICAgICAgLy8gRm9yIG9sZGVyIHNlcnZlcnMsIGVtdWxhdGUgSlNPTiBieSBlbmNvZGluZyB0aGUgcmVxdWVzdCBpbnRvIGFuIEhUTUwtZm9ybS4KICAgICAgICBpZiAoQmFja2JvbmUuZW11bGF0ZUpTT04pIHsKICAgICAgICAgICAgcGFyYW1zLmNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7CiAgICAgICAgICAgIHBhcmFtcy5kYXRhID0gcGFyYW1zLmRhdGEgPyB7bW9kZWw6IHBhcmFtcy5kYXRhfSA6IHt9OwogICAgICAgIH0KCiAgICAgICAgLy8gRm9yIG9sZGVyIHNlcnZlcnMsIGVtdWxhdGUgSFRUUCBieSBtaW1pY2tpbmcgdGhlIEhUVFAgbWV0aG9kIHdpdGggYF9tZXRob2RgCiAgICAgICAgLy8gQW5kIGFuIGBYLUhUVFAtTWV0aG9kLU92ZXJyaWRlYCBoZWFkZXIuCiAgICAgICAgaWYgKEJhY2tib25lLmVtdWxhdGVIVFRQKSB7CiAgICAgICAgICAgIGlmICh0eXBlID09PSAnUFVUJyB8fCB0eXBlID09PSAnREVMRVRFJykgewogICAgICAgICAgICAgICAgaWYgKEJhY2tib25lLmVtdWxhdGVKU09OKSBwYXJhbXMuZGF0YS5fbWV0aG9kID0gdHlwZTsKICAgICAgICAgICAgICAgIHBhcmFtcy50eXBlID0gJ1BPU1QnOwogICAgICAgICAgICAgICAgcGFyYW1zLmJlZm9yZVNlbmQgPSBmdW5jdGlvbih4aHIpIHsKICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1IVFRQLU1ldGhvZC1PdmVycmlkZScsIHR5cGUpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gRG9uJ3QgcHJvY2VzcyBkYXRhIG9uIGEgbm9uLUdFVCByZXF1ZXN0LgogICAgICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ0dFVCcgJiYgIUJhY2tib25lLmVtdWxhdGVKU09OKSB7CiAgICAgICAgICAgIHBhcmFtcy5wcm9jZXNzRGF0YSA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgLy8gTWFrZSB0aGUgcmVxdWVzdCwgYWxsb3dpbmcgdGhlIHVzZXIgdG8gb3ZlcnJpZGUgYW55IEFqYXggb3B0aW9ucy4KICAgICAgICByZXR1cm4gQmFja2JvbmUuYWpheChfLmV4dGVuZChwYXJhbXMsIG9wdGlvbnMpKTsKICAgIH07CgogICAgLy8gU2V0IHRoZSBkZWZhdWx0IGFqYXggbWV0aG9kIGlmICQgaXMgZGVmaW5lZC4KICAgIGlmICgkKSBCYWNrYm9uZS5hamF4ID0gJC5hamF4OwoKICAgIC8vIFdyYXAgYW4gb3B0aW9uYWwgZXJyb3IgY2FsbGJhY2sgd2l0aCBhIGZhbGxiYWNrIGVycm9yIGV2ZW50LgogICAgQmFja2JvbmUud3JhcEVycm9yID0gZnVuY3Rpb24ob25FcnJvciwgb3JpZ2luYWxNb2RlbCwgb3B0aW9ucykgewogICAgICAgIHJldHVybiBmdW5jdGlvbihtb2RlbCwgcmVzcCkgewogICAgICAgICAgICByZXNwID0gbW9kZWwgPT09IG9yaWdpbmFsTW9kZWwgPyByZXNwIDogbW9kZWw7CiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7CiAgICAgICAgICAgICAgICBvbkVycm9yKG9yaWdpbmFsTW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgb3JpZ2luYWxNb2RlbC50cmlnZ2VyKCdlcnJvcicsIG9yaWdpbmFsTW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH07CgogICAgLy8gSGVscGVycwogICAgLy8gLS0tLS0tLQoKICAgIC8vIFNoYXJlZCBlbXB0eSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBhaWQgaW4gcHJvdG90eXBlLWNoYWluIGNyZWF0aW9uLgogICAgdmFyIGN0b3IgPSBmdW5jdGlvbigpe307CgogICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvcnJlY3RseSBzZXQgdXAgdGhlIHByb3RvdHlwZSBjaGFpbiwgZm9yIHN1YmNsYXNzZXMuCiAgICAvLyBTaW1pbGFyIHRvIGBnb29nLmluaGVyaXRzYCwgYnV0IHVzZXMgYSBoYXNoIG9mIHByb3RvdHlwZSBwcm9wZXJ0aWVzIGFuZAogICAgLy8gY2xhc3MgcHJvcGVydGllcyB0byBiZSBleHRlbmRlZC4KICAgIHZhciBpbmhlcml0cyA9IGZ1bmN0aW9uKHBhcmVudCwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICAgICAgICB2YXIgY2hpbGQ7CgogICAgICAgIC8vIFRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIG5ldyBzdWJjbGFzcyBpcyBlaXRoZXIgZGVmaW5lZCBieSB5b3UKICAgICAgICAvLyAodGhlICJjb25zdHJ1Y3RvciIgcHJvcGVydHkgaW4geW91ciBgZXh0ZW5kYCBkZWZpbml0aW9uKSwgb3IgZGVmYXVsdGVkCiAgICAgICAgLy8gYnkgdXMgdG8gc2ltcGx5IGNhbGwgdGhlIHBhcmVudCdzIGNvbnN0cnVjdG9yLgogICAgICAgIGlmIChwcm90b1Byb3BzICYmIHByb3RvUHJvcHMuaGFzT3duUHJvcGVydHkoJ2NvbnN0cnVjdG9yJykpIHsKICAgICAgICAgICAgY2hpbGQgPSBwcm90b1Byb3BzLmNvbnN0cnVjdG9yOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNoaWxkID0gZnVuY3Rpb24oKXsgcGFyZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07CiAgICAgICAgfQoKICAgICAgICAvLyBJbmhlcml0IGNsYXNzIChzdGF0aWMpIHByb3BlcnRpZXMgZnJvbSBwYXJlbnQuCiAgICAgICAgXy5leHRlbmQoY2hpbGQsIHBhcmVudCk7CgogICAgICAgIC8vIFNldCB0aGUgcHJvdG90eXBlIGNoYWluIHRvIGluaGVyaXQgZnJvbSBgcGFyZW50YCwgd2l0aG91dCBjYWxsaW5nCiAgICAgICAgLy8gYHBhcmVudGAncyBjb25zdHJ1Y3RvciBmdW5jdGlvbi4KICAgICAgICBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7CiAgICAgICAgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsKCiAgICAgICAgLy8gQWRkIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChpbnN0YW5jZSBwcm9wZXJ0aWVzKSB0byB0aGUgc3ViY2xhc3MsCiAgICAgICAgLy8gaWYgc3VwcGxpZWQuCiAgICAgICAgaWYgKHByb3RvUHJvcHMpIF8uZXh0ZW5kKGNoaWxkLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CgogICAgICAgIC8vIEFkZCBzdGF0aWMgcHJvcGVydGllcyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24sIGlmIHN1cHBsaWVkLgogICAgICAgIGlmIChzdGF0aWNQcm9wcykgXy5leHRlbmQoY2hpbGQsIHN0YXRpY1Byb3BzKTsKCiAgICAgICAgLy8gQ29ycmVjdGx5IHNldCBjaGlsZCdzIGBwcm90b3R5cGUuY29uc3RydWN0b3JgLgogICAgICAgIGNoaWxkLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNoaWxkOwoKICAgICAgICAvLyBTZXQgYSBjb252ZW5pZW5jZSBwcm9wZXJ0eSBpbiBjYXNlIHRoZSBwYXJlbnQncyBwcm90b3R5cGUgaXMgbmVlZGVkIGxhdGVyLgogICAgICAgIGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7CgogICAgICAgIHJldHVybiBjaGlsZDsKICAgIH07CgogICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBhIHZhbHVlIGZyb20gYSBCYWNrYm9uZSBvYmplY3QgYXMgYSBwcm9wZXJ0eQogICAgLy8gb3IgYXMgYSBmdW5jdGlvbi4KICAgIHZhciBnZXRWYWx1ZSA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcCkgewogICAgICAgIGlmICghKG9iamVjdCAmJiBvYmplY3RbcHJvcF0pKSByZXR1cm4gbnVsbDsKICAgICAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKG9iamVjdFtwcm9wXSkgPyBvYmplY3RbcHJvcF0oKSA6IG9iamVjdFtwcm9wXTsKICAgIH07CgogICAgLy8gVGhyb3cgYW4gZXJyb3Igd2hlbiBhIFVSTCBpcyBuZWVkZWQsIGFuZCBub25lIGlzIHN1cHBsaWVkLgogICAgdmFyIHVybEVycm9yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBICJ1cmwiIHByb3BlcnR5IG9yIGZ1bmN0aW9uIG11c3QgYmUgc3BlY2lmaWVkJyk7CiAgICB9OwoKfSkuY2FsbCh0aGlzKTs=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 11:30:50 GMT",
                    "Content-Length": "59763",
                    "Date": "Thu, 06 Nov 2014 11:30:52 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}