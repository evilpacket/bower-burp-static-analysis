{
    "url": "http://localhost:9999/feedhenry/fh-js-sdk/src/appforms/src/core/000-api-v2.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location</b> and written to <b>the 'setAttribute()' function of a DOM element</b> via the following statements:<ul><li>var xir = (xiRedirectUrl) ? xiRedirectUrl : window.location;</li><li>this.setAttribute('xiRedirectUrl', xir);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/feedhenry/fh-js-sdk/src/appforms/src/core/000-api-v2.js",
                "path": "/feedhenry/fh-js-sdk/src/appforms/src/core/000-api-v2.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9mZWVkaGVucnkvZmgtanMtc2RrL3NyYy9hcHBmb3Jtcy9zcmMvY29yZS8wMDAtYXBpLXYyLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNjQzNDENCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMDA6MTQ6MTUgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDAwOjE0OjE0IEdNVA0KDQo7CihmdW5jdGlvbihyb290KSB7CgogIC8vISEhbGliIHN0YXJ0ISEhCiAgLyoKICAgIGpzb24yLmpzCiAgICAyMDA4LTAzLTI0CgogICAgUHVibGljIERvbWFpbi4KCiAgICBOTyBXQVJSQU5UWSBFWFBSRVNTRUQgT1IgSU1QTElFRC4gVVNFIEFUIFlPVVIgT1dOIFJJU0suCgogICAgU2VlIGh0dHA6Ly93d3cuSlNPTi5vcmcvanMuaHRtbAoKICAgIFRoaXMgZmlsZSBjcmVhdGVzIGEgZ2xvYmFsIEpTT04gb2JqZWN0IGNvbnRhaW5pbmcgdGhyZWUgbWV0aG9kczogc3RyaW5naWZ5LAogICAgcGFyc2UsIGFuZCBxdW90ZS4KCgogICAgICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlLCByZXBsYWNlciwgc3BhY2UpCiAgICAgICAgICAgIHZhbHVlICAgICAgIGFueSBKYXZhU2NyaXB0IHZhbHVlLCB1c3VhbGx5IGFuIG9iamVjdCBvciBhcnJheS4KCiAgICAgICAgICAgIHJlcGxhY2VyICAgIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IGRldGVybWluZXMgaG93IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgYXJlIHN0cmluZ2lmaWVkIGZvciBvYmplY3RzIHdpdGhvdXQgYSB0b0pTT04KICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kLiBJdCBjYW4gYmUgYSBmdW5jdGlvbiBvciBhbiBhcnJheS4KCiAgICAgICAgICAgIHNwYWNlICAgICAgIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHNwZWNpZmllcyB0aGUgaW5kZW50YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgb2YgbmVzdGVkIHN0cnVjdHVyZXMuIElmIGl0IGlzIG9taXR0ZWQsIHRoZSB0ZXh0IHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgYmUgcGFja2VkIHdpdGhvdXQgZXh0cmEgd2hpdGVzcGFjZS4gSWYgaXQgaXMgYSBudW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIGl0IHdpbGwgc3BlY2lmeSB0aGUgbnVtYmVyIG9mIHNwYWNlcyB0byBpbmRlbnQgYXQgZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBsZXZlbC4gSWYgaXQgaXMgYSBzdHJpbmcgKHN1Y2ggYXMgJ1x0JyksIGl0IGNvbnRhaW5zIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJzIHVzZWQgdG8gaW5kZW50IGF0IGVhY2ggbGV2ZWwuCgogICAgICAgICAgICBUaGlzIG1ldGhvZCBwcm9kdWNlcyBhIEpTT04gdGV4dCBmcm9tIGEgSmF2YVNjcmlwdCB2YWx1ZS4KCiAgICAgICAgICAgIFdoZW4gYW4gb2JqZWN0IHZhbHVlIGlzIGZvdW5kLCBpZiB0aGUgb2JqZWN0IGNvbnRhaW5zIGEgdG9KU09OCiAgICAgICAgICAgIG1ldGhvZCwgaXRzIHRvSlNPTiBtZXRob2Qgd2l0aCBiZSBjYWxsZWQgYW5kIHRoZSByZXN1bHQgd2lsbCBiZQogICAgICAgICAgICBzdHJpbmdpZmllZC4gQSB0b0pTT04gbWV0aG9kIGRvZXMgbm90IHNlcmlhbGl6ZTogaXQgcmV0dXJucyB0aGUKICAgICAgICAgICAgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIG5hbWUvdmFsdWUgcGFpciB0aGF0IHNob3VsZCBiZSBzZXJpYWxpemVkLAogICAgICAgICAgICBvciB1bmRlZmluZWQgaWYgbm90aGluZyBzaG91bGQgYmUgc2VyaWFsaXplZC4gVGhlIHRvSlNPTiBtZXRob2Qgd2lsbAogICAgICAgICAgICBiZSBwYXNzZWQgdGhlIGtleSBhc3NvY2lhdGVkIHdpdGggdGhlIHZhbHVlLCBhbmQgdGhpcyB3aWxsIGJlIGJvdW5kCiAgICAgICAgICAgIHRvIHRoZSBvYmplY3QgaG9sZGluZyB0aGUga2V5LgoKICAgICAgICAgICAgVGhpcyBpcyB0aGUgdG9KU09OIG1ldGhvZCBhZGRlZCB0byBEYXRlczoKCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0b0pTT04oa2V5KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VVRDRnVsbFllYXIoKSAgICsgJy0nICsKICAgICAgICAgICAgICAgICAgICAgICAgIGYodGhpcy5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKwogICAgICAgICAgICAgICAgICAgICAgICAgZih0aGlzLmdldFVUQ0RhdGUoKSkgICAgICArICdUJyArCiAgICAgICAgICAgICAgICAgICAgICAgICBmKHRoaXMuZ2V0VVRDSG91cnMoKSkgICAgICsgJzonICsKICAgICAgICAgICAgICAgICAgICAgICAgIGYodGhpcy5nZXRVVENNaW51dGVzKCkpICAgKyAnOicgKwogICAgICAgICAgICAgICAgICAgICAgICAgZih0aGlzLmdldFVUQ1NlY29uZHMoKSkgICArICdaJzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbCByZXBsYWNlciBtZXRob2QuIEl0IHdpbGwgYmUgcGFzc2VkIHRoZQogICAgICAgICAgICBrZXkgYW5kIHZhbHVlIG9mIGVhY2ggbWVtYmVyLCB3aXRoIHRoaXMgYm91bmQgdG8gdGhlIGNvbnRhaW5pbmcKICAgICAgICAgICAgb2JqZWN0LiBUaGUgdmFsdWUgdGhhdCBpcyByZXR1cm5lZCBmcm9tIHlvdXIgbWV0aG9kIHdpbGwgYmUKICAgICAgICAgICAgc2VyaWFsaXplZC4gSWYgeW91ciBtZXRob2QgcmV0dXJucyB1bmRlZmluZWQsIHRoZW4gdGhlIG1lbWJlciB3aWxsCiAgICAgICAgICAgIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIHNlcmlhbGl6YXRpb24uCgogICAgICAgICAgICBJZiBubyByZXBsYWNlciBwYXJhbWV0ZXIgaXMgcHJvdmlkZWQsIHRoZW4gYSBkZWZhdWx0IHJlcGxhY2VyCiAgICAgICAgICAgIHdpbGwgYmUgdXNlZDoKCiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXBsYWNlcihrZXksIHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIGtleSkgPwogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFRoZSBkZWZhdWx0IHJlcGxhY2VyIGlzIHBhc3NlZCB0aGUga2V5IGFuZCB2YWx1ZSBmb3IgZWFjaCBpdGVtIGluCiAgICAgICAgICAgIHRoZSBzdHJ1Y3R1cmUuIEl0IGV4Y2x1ZGVzIGluaGVyaXRlZCBtZW1iZXJzLgoKICAgICAgICAgICAgSWYgdGhlIHJlcGxhY2VyIHBhcmFtZXRlciBpcyBhbiBhcnJheSwgdGhlbiBpdCB3aWxsIGJlIHVzZWQgdG8KICAgICAgICAgICAgc2VsZWN0IHRoZSBtZW1iZXJzIHRvIGJlIHNlcmlhbGl6ZWQuIEl0IGZpbHRlcnMgdGhlIHJlc3VsdHMgc3VjaAogICAgICAgICAgICB0aGF0IG9ubHkgbWVtYmVycyB3aXRoIGtleXMgbGlzdGVkIGluIHRoZSByZXBsYWNlciBhcnJheSBhcmUKICAgICAgICAgICAgc3RyaW5naWZpZWQuCgogICAgICAgICAgICBWYWx1ZXMgdGhhdCBkbyBub3QgaGF2ZSBKU09OIHJlcHJlc2VudGFpb25zLCBzdWNoIGFzIHVuZGVmaW5lZCBvcgogICAgICAgICAgICBmdW5jdGlvbnMsIHdpbGwgbm90IGJlIHNlcmlhbGl6ZWQuIFN1Y2ggdmFsdWVzIGluIG9iamVjdHMgd2lsbCBiZQogICAgICAgICAgICBkcm9wcGVkOyBpbiBhcnJheXMgdGhleSB3aWxsIGJlIHJlcGxhY2VkIHdpdGggbnVsbC4gWW91IGNhbiB1c2UKICAgICAgICAgICAgYSByZXBsYWNlciBmdW5jdGlvbiB0byByZXBsYWNlIHRob3NlIHdpdGggSlNPTiB2YWx1ZXMuCiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHVuZGVmaW5lZCkgcmV0dXJucyB1bmRlZmluZWQuCgogICAgICAgICAgICBUaGUgb3B0aW9uYWwgc3BhY2UgcGFyYW1ldGVyIHByb2R1Y2VzIGEgc3RyaW5naWZpY2F0aW9uIG9mIHRoZSB2YWx1ZQogICAgICAgICAgICB0aGF0IGlzIGZpbGxlZCB3aXRoIGxpbmUgYnJlYWtzIGFuZCBpbmRlbnRhdGlvbiB0byBtYWtlIGl0IGVhc2llciB0bwogICAgICAgICAgICByZWFkLgoKICAgICAgICAgICAgSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIG5vbi1lbXB0eSBzdHJpbmcsIHRoZW4gdGhhdCBzdHJpbmcgd2lsbAogICAgICAgICAgICBiZSB1c2VkIGZvciBpbmRlbnRhdGlvbi4gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIG51bWJlciwgdGhlbgogICAgICAgICAgICB0aGVuIGluZGVudGF0aW9uIHdpbGwgYmUgdGhhdCBtYW55IHNwYWNlcy4KCiAgICAgICAgICAgIEV4YW1wbGU6CgogICAgICAgICAgICB0ZXh0ID0gSlNPTi5zdHJpbmdpZnkoWydlJywge3BsdXJpYnVzOiAndW51bSd9XSk7CiAgICAgICAgICAgIC8vIHRleHQgaXMgJ1siZSIseyJwbHVyaWJ1cyI6InVudW0ifV0nCgoKICAgICAgICAgICAgdGV4dCA9IEpTT04uc3RyaW5naWZ5KFsnZScsIHtwbHVyaWJ1czogJ3VudW0nfV0sIG51bGwsICdcdCcpOwogICAgICAgICAgICAvLyB0ZXh0IGlzICdbXG5cdCJlIixcblx0e1xuXHRcdCJwbHVyaWJ1cyI6ICJ1bnVtIlxuXHR9XG5dJwoKCiAgICAgICAgSlNPTi5wYXJzZSh0ZXh0LCByZXZpdmVyKQogICAgICAgICAgICBUaGlzIG1ldGhvZCBwYXJzZXMgYSBKU09OIHRleHQgdG8gcHJvZHVjZSBhbiBvYmplY3Qgb3IgYXJyYXkuCiAgICAgICAgICAgIEl0IGNhbiB0aHJvdyBhIFN5bnRheEVycm9yIGV4Y2VwdGlvbi4KCiAgICAgICAgICAgIFRoZSBvcHRpb25hbCByZXZpdmVyIHBhcmFtZXRlciBpcyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGZpbHRlciBhbmQKICAgICAgICAgICAgdHJhbnNmb3JtIHRoZSByZXN1bHRzLiBJdCByZWNlaXZlcyBlYWNoIG9mIHRoZSBrZXlzIGFuZCB2YWx1ZXMsIGFuZAogICAgICAgICAgICBpdHMgcmV0dXJuIHZhbHVlIGlzIHVzZWQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgdmFsdWUuIElmIGl0CiAgICAgICAgICAgIHJldHVybnMgd2hhdCBpdCByZWNlaXZlZCwgdGhlbiBzdHJ1Y3R1cmUgaXMgbm90IG1vZGlmaWVkLiBJZiBpdAogICAgICAgICAgICByZXR1cm5zIHVuZGVmaW5lZCB0aGVuIHRoZSBtZW1iZXIgaXMgZGVsZXRlZC4KCiAgICAgICAgICAgIEV4YW1wbGU6CgogICAgICAgICAgICAvLyBQYXJzZSB0aGUgdGV4dC4gVmFsdWVzIHRoYXQgbG9vayBsaWtlIElTTyBkYXRlIHN0cmluZ3Mgd2lsbAogICAgICAgICAgICAvLyBiZSBjb252ZXJ0ZWQgdG8gRGF0ZSBvYmplY3RzLgoKICAgICAgICAgICAgbXlEYXRhID0gSlNPTi5wYXJzZSh0ZXh0LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICAgICAgICAgICAgdmFyIGE7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgIGEgPQovXihcZHs0fSktKFxkezJ9KS0oXGR7Mn0pVChcZHsyfSk6KFxkezJ9KTooXGR7Mn0oPzpcLlxkKik/KVokLy5leGVjKHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBpZiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoK2FbMV0sICthWzJdIC0gMSwgK2FbM10sICthWzRdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgK2FbNV0sICthWzZdKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgICB9KTsKCgogICAgICAgIEpTT04ucXVvdGUodGV4dCkKICAgICAgICAgICAgVGhpcyBtZXRob2Qgd3JhcHMgYSBzdHJpbmcgaW4gcXVvdGVzLCBlc2NhcGluZyBzb21lIGNoYXJhY3RlcnMKICAgICAgICAgICAgYXMgbmVlZGVkLgoKCiAgICBUaGlzIGlzIGEgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uLiBZb3UgYXJlIGZyZWUgdG8gY29weSwgbW9kaWZ5LCBvcgogICAgcmVkaXN0cmlidXRlLgoKICAgIFVTRSBZT1VSIE9XTiBDT1BZLiBJVCBJUyBFWFRSRU1FTFkgVU5XSVNFIFRPIExPQUQgVEhJUkQgUEFSVFkKICAgIENPREUgSU5UTyBZT1VSIFBBR0VTLgoqLwoKICAvKmpzbGludCByZWdleHA6IHRydWUsIGZvcmluOiB0cnVlLCBldmlsOiB0cnVlICovCgogIC8qZ2xvYmFsIEpTT04gKi8KCiAgLyptZW1iZXJzICIiLCAiXGIiLCAiXHQiLCAiXG4iLCAiXGYiLCAiXHIiLCAiXCIiLCBKU09OLCAiXFwiLCBhcHBseSwKICAgIGNhbGwsIGNoYXJDb2RlQXQsIGZsb29yLCBnZXRVVENEYXRlLCBnZXRVVENGdWxsWWVhciwgZ2V0VVRDSG91cnMsCiAgICBnZXRVVENNaW51dGVzLCBnZXRVVENNb250aCwgZ2V0VVRDU2Vjb25kcywgaGFzT3duUHJvcGVydHksIGpvaW4sIGxlbmd0aCwKICAgIHBhcnNlLCBwcm9wZXJ0eUlzRW51bWVyYWJsZSwgcHJvdG90eXBlLCBwdXNoLCBxdW90ZSwgcmVwbGFjZSwgc3RyaW5naWZ5LAogICAgdGVzdCwgdG9KU09OLCB0b1N0cmluZwoqLwoKICBpZiAoIUpTT04pIHsKCiAgICAvLyBDcmVhdGUgYSBKU09OIG9iamVjdCBvbmx5IGlmIG9uZSBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0LiBXZSBjcmVhdGUgdGhlCiAgICAvLyBvYmplY3QgaW4gYSBjbG9zdXJlIHRvIGF2b2lkIGdsb2JhbCB2YXJpYWJsZXMuCgogICAgdmFyIEpTT04gPSBmdW5jdGlvbigpIHsKCiAgICAgIGZ1bmN0aW9uIGYobikgeyAvLyBGb3JtYXQgaW50ZWdlcnMgdG8gaGF2ZSBhdCBsZWFzdCB0d28gZGlnaXRzLgogICAgICAgIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuIDogbjsKICAgICAgfQoKICAgICAgRGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24oKSB7CgogICAgICAgIC8vIEV2ZW50dWFsbHksIHRoaXMgbWV0aG9kIHdpbGwgYmUgYmFzZWQgb24gdGhlIGRhdGUudG9JU09TdHJpbmcgbWV0aG9kLgoKICAgICAgICByZXR1cm4gdGhpcy5nZXRVVENGdWxsWWVhcigpICsgJy0nICsKICAgICAgICAgIGYodGhpcy5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKwogICAgICAgICAgZih0aGlzLmdldFVUQ0RhdGUoKSkgKyAnVCcgKwogICAgICAgICAgZih0aGlzLmdldFVUQ0hvdXJzKCkpICsgJzonICsKICAgICAgICAgIGYodGhpcy5nZXRVVENNaW51dGVzKCkpICsgJzonICsKICAgICAgICAgIGYodGhpcy5nZXRVVENTZWNvbmRzKCkpICsgJ1onOwogICAgICB9OwoKCiAgICAgIHZhciBlc2NhcGVhYmxlID0gL1siXFxceDAwLVx4MWZceDdmLVx4OWZdL2csCiAgICAgICAgZ2FwLAogICAgICAgIGluZGVudCwKICAgICAgICBtZXRhID0geyAvLyB0YWJsZSBvZiBjaGFyYWN0ZXIgc3Vic3RpdHV0aW9ucwogICAgICAgICAgJ1xiJzogJ1xcYicsCiAgICAgICAgICAnXHQnOiAnXFx0JywKICAgICAgICAgICdcbic6ICdcXG4nLAogICAgICAgICAgJ1xmJzogJ1xcZicsCiAgICAgICAgICAnXHInOiAnXFxyJywKICAgICAgICAgICciJzogJ1xcIicsCiAgICAgICAgICAnXFwnOiAnXFxcXCcKICAgICAgICB9LAogICAgICAgIHJlcDsKCgogICAgICBmdW5jdGlvbiBxdW90ZShzdHJpbmcpIHsKCiAgICAgICAgLy8gSWYgdGhlIHN0cmluZyBjb250YWlucyBubyBjb250cm9sIGNoYXJhY3RlcnMsIG5vIHF1b3RlIGNoYXJhY3RlcnMsIGFuZCBubwogICAgICAgIC8vIGJhY2tzbGFzaCBjaGFyYWN0ZXJzLCB0aGVuIHdlIGNhbiBzYWZlbHkgc2xhcCBzb21lIHF1b3RlcyBhcm91bmQgaXQuCiAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIG11c3QgYWxzbyByZXBsYWNlIHRoZSBvZmZlbmRpbmcgY2hhcmFjdGVycyB3aXRoIHNhZmUgZXNjYXBlCiAgICAgICAgLy8gc2VxdWVuY2VzLgoKICAgICAgICByZXR1cm4gZXNjYXBlYWJsZS50ZXN0KHN0cmluZykgPwogICAgICAgICAgJyInICsgc3RyaW5nLnJlcGxhY2UoZXNjYXBlYWJsZSwgZnVuY3Rpb24oYSkgewogICAgICAgICAgICB2YXIgYyA9IG1ldGFbYV07CiAgICAgICAgICAgIGlmICh0eXBlb2YgYyA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICByZXR1cm4gYzsKICAgICAgICAgICAgfQogICAgICAgICAgICBjID0gYS5jaGFyQ29kZUF0KCk7CiAgICAgICAgICAgIHJldHVybiAnXFx1MDAnICsgTWF0aC5mbG9vcihjIC8gMTYpLnRvU3RyaW5nKDE2KSArCiAgICAgICAgICAgICAgKGMgJSAxNikudG9TdHJpbmcoMTYpOwogICAgICAgICAgfSkgKyAnIicgOgogICAgICAgICAgJyInICsgc3RyaW5nICsgJyInOwogICAgICB9CgoKICAgICAgZnVuY3Rpb24gc3RyKGtleSwgaG9sZGVyKSB7CgogICAgICAgIC8vIFByb2R1Y2UgYSBzdHJpbmcgZnJvbSBob2xkZXJba2V5XS4KCiAgICAgICAgdmFyIGksIC8vIFRoZSBsb29wIGNvdW50ZXIuCiAgICAgICAgICBrLCAvLyBUaGUgbWVtYmVyIGtleS4KICAgICAgICAgIHYsIC8vIFRoZSBtZW1iZXIgdmFsdWUuCiAgICAgICAgICBsZW5ndGgsCiAgICAgICAgICBtaW5kID0gZ2FwLAogICAgICAgICAgcGFydGlhbCwKICAgICAgICAgIHZhbHVlID0gaG9sZGVyW2tleV07CgogICAgICAgIC8vIElmIHRoZSB2YWx1ZSBoYXMgYSB0b0pTT04gbWV0aG9kLCBjYWxsIGl0IHRvIG9idGFpbiBhIHJlcGxhY2VtZW50IHZhbHVlLgoKICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJgogICAgICAgICAgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0pTT04oa2V5KTsKICAgICAgICB9CgogICAgICAgIC8vIElmIHdlIHdlcmUgY2FsbGVkIHdpdGggYSByZXBsYWNlciBmdW5jdGlvbiwgdGhlbiBjYWxsIHRoZSByZXBsYWNlciB0bwogICAgICAgIC8vIG9idGFpbiBhIHJlcGxhY2VtZW50IHZhbHVlLgoKICAgICAgICBpZiAodHlwZW9mIHJlcCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgdmFsdWUgPSByZXAuY2FsbChob2xkZXIsIGtleSwgdmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgLy8gV2hhdCBoYXBwZW5zIG5leHQgZGVwZW5kcyBvbiB0aGUgdmFsdWUncyB0eXBlLgoKICAgICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkgewogICAgICAgICAgY2FzZSAnc3RyaW5nJzoKICAgICAgICAgICAgcmV0dXJuIHF1b3RlKHZhbHVlKTsKCiAgICAgICAgICBjYXNlICdudW1iZXInOgoKICAgICAgICAgICAgLy8gSlNPTiBudW1iZXJzIG11c3QgYmUgZmluaXRlLiBFbmNvZGUgbm9uLWZpbml0ZSBudW1iZXJzIGFzIG51bGwuCgogICAgICAgICAgICByZXR1cm4gaXNGaW5pdGUodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6ICdudWxsJzsKCiAgICAgICAgICBjYXNlICdib29sZWFuJzoKICAgICAgICAgIGNhc2UgJ251bGwnOgoKICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbiBvciBudWxsLCBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nLiBOb3RlOgogICAgICAgICAgICAvLyB0eXBlb2YgbnVsbCBkb2VzIG5vdCBwcm9kdWNlICdudWxsJy4gVGhlIGNhc2UgaXMgaW5jbHVkZWQgaGVyZSBpbgogICAgICAgICAgICAvLyB0aGUgcmVtb3RlIGNoYW5jZSB0aGF0IHRoaXMgZ2V0cyBmaXhlZCBzb21lZGF5LgoKICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7CgogICAgICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyAnb2JqZWN0Jywgd2UgbWlnaHQgYmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCBvciBhbiBhcnJheSBvcgogICAgICAgICAgICAvLyBudWxsLgoKICAgICAgICAgIGNhc2UgJ29iamVjdCc6CgogICAgICAgICAgICAvLyBEdWUgdG8gYSBzcGVjaWZpY2F0aW9uIGJsdW5kZXIgaW4gRUNNQVNjcmlwdCwgdHlwZW9mIG51bGwgaXMgJ29iamVjdCcsCiAgICAgICAgICAgIC8vIHNvIHdhdGNoIG91dCBmb3IgdGhhdCBjYXNlLgoKICAgICAgICAgICAgaWYgKCF2YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiAnbnVsbCc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIE1ha2UgYW4gYXJyYXkgdG8gaG9sZCB0aGUgcGFydGlhbCByZXN1bHRzIG9mIHN0cmluZ2lmeWluZyB0aGlzIG9iamVjdCB2YWx1ZS4KCiAgICAgICAgICAgIGdhcCArPSBpbmRlbnQ7CiAgICAgICAgICAgIHBhcnRpYWwgPSBbXTsKCiAgICAgICAgICAgIC8vIElmIHRoZSBvYmplY3QgaGFzIGEgZG9udEVudW0gbGVuZ3RoIHByb3BlcnR5LCB3ZSdsbCB0cmVhdCBpdCBhcyBhbiBhcnJheS4KCiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJiAhKHZhbHVlLnByb3BlcnR5SXNFbnVtZXJhYmxlKCdsZW5ndGgnKSkpIHsKCiAgICAgICAgICAgICAgLy8gVGhlIG9iamVjdCBpcyBhbiBhcnJheS4gU3RyaW5naWZ5IGV2ZXJ5IGVsZW1lbnQuIFVzZSBudWxsIGFzIGEgcGxhY2Vob2xkZXIKICAgICAgICAgICAgICAvLyBmb3Igbm9uLUpTT04gdmFsdWVzLgoKICAgICAgICAgICAgICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7CiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBwYXJ0aWFsW2ldID0gc3RyKGksIHZhbHVlKSB8fCAnbnVsbCc7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAvLyBKb2luIGFsbCBvZiB0aGUgZWxlbWVudHMgdG9nZXRoZXIsIHNlcGFyYXRlZCB3aXRoIGNvbW1hcywgYW5kIHdyYXAgdGhlbSBpbgogICAgICAgICAgICAgIC8vIGJyYWNrZXRzLgoKICAgICAgICAgICAgICB2ID0gcGFydGlhbC5sZW5ndGggPT09IDAgPyAnW10nIDoKICAgICAgICAgICAgICAgIGdhcCA/ICdbXG4nICsgZ2FwICsgcGFydGlhbC5qb2luKCcsXG4nICsgZ2FwKSArCiAgICAgICAgICAgICAgICAnXG4nICsgbWluZCArICddJyA6CiAgICAgICAgICAgICAgICAnWycgKyBwYXJ0aWFsLmpvaW4oJywnKSArICddJzsKICAgICAgICAgICAgICBnYXAgPSBtaW5kOwogICAgICAgICAgICAgIHJldHVybiB2OwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBJZiB0aGUgcmVwbGFjZXIgaXMgYW4gYXJyYXksIHVzZSBpdCB0byBzZWxlY3QgdGhlIG1lbWJlcnMgdG8gYmUgc3RyaW5naWZpZWQuCgogICAgICAgICAgICBpZiAodHlwZW9mIHJlcCA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICBsZW5ndGggPSByZXAubGVuZ3RoOwogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgayA9IHJlcFtpXTsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgayA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSwgcmVwKTsKICAgICAgICAgICAgICAgICAgaWYgKHYpIHsKICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsLnB1c2gocXVvdGUoaykgKyAoZ2FwID8gJzogJyA6ICc6JykgKyB2KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdGVyYXRlIHRocm91Z2ggYWxsIG9mIHRoZSBrZXlzIGluIHRoZSBvYmplY3QuCgogICAgICAgICAgICAgIGZvciAoayBpbiB2YWx1ZSkgewogICAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSwgcmVwKTsKICAgICAgICAgICAgICAgIGlmICh2KSB7CiAgICAgICAgICAgICAgICAgIHBhcnRpYWwucHVzaChxdW90ZShrKSArIChnYXAgPyAnOiAnIDogJzonKSArIHYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSm9pbiBhbGwgb2YgdGhlIG1lbWJlciB0ZXh0cyB0b2dldGhlciwgc2VwYXJhdGVkIHdpdGggY29tbWFzLAogICAgICAgICAgICAvLyBhbmQgd3JhcCB0aGVtIGluIGJyYWNlcy4KCiAgICAgICAgICAgIHYgPSBwYXJ0aWFsLmxlbmd0aCA9PT0gMCA/ICd7fScgOgogICAgICAgICAgICAgIGdhcCA/ICd7XG4nICsgZ2FwICsgcGFydGlhbC5qb2luKCcsXG4nICsgZ2FwKSArCiAgICAgICAgICAgICAgJ1xuJyArIG1pbmQgKyAnfScgOgogICAgICAgICAgICAgICd7JyArIHBhcnRpYWwuam9pbignLCcpICsgJ30nOwogICAgICAgICAgICBnYXAgPSBtaW5kOwogICAgICAgICAgICByZXR1cm4gdjsKICAgICAgICB9CiAgICAgIH0KCgogICAgICAvLyBSZXR1cm4gdGhlIEpTT04gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0cmluZ2lmeSwgcGFyc2UsIGFuZCBxdW90ZSBtZXRob2RzLgoKICAgICAgcmV0dXJuIHsKICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uKHZhbHVlLCByZXBsYWNlciwgc3BhY2UpIHsKCiAgICAgICAgICAvLyBUaGUgc3RyaW5naWZ5IG1ldGhvZCB0YWtlcyBhIHZhbHVlIGFuZCBhbiBvcHRpb25hbCByZXBsYWNlciwgYW5kIGFuIG9wdGlvbmFsCiAgICAgICAgICAvLyBzcGFjZSBwYXJhbWV0ZXIsIGFuZCByZXR1cm5zIGEgSlNPTiB0ZXh0LiBUaGUgcmVwbGFjZXIgY2FuIGJlIGEgZnVuY3Rpb24KICAgICAgICAgIC8vIHRoYXQgY2FuIHJlcGxhY2UgdmFsdWVzLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgd2lsbCBzZWxlY3QgdGhlIGtleXMuCiAgICAgICAgICAvLyBBIGRlZmF1bHQgcmVwbGFjZXIgbWV0aG9kIGNhbiBiZSBwcm92aWRlZC4gVXNlIG9mIHRoZSBzcGFjZSBwYXJhbWV0ZXIgY2FuCiAgICAgICAgICAvLyBwcm9kdWNlIHRleHQgdGhhdCBpcyBtb3JlIGVhc2lseSByZWFkYWJsZS4KCiAgICAgICAgICB2YXIgaTsKICAgICAgICAgIGdhcCA9ICcnOwogICAgICAgICAgaW5kZW50ID0gJyc7CiAgICAgICAgICBpZiAoc3BhY2UpIHsKCiAgICAgICAgICAgIC8vIElmIHRoZSBzcGFjZSBwYXJhbWV0ZXIgaXMgYSBudW1iZXIsIG1ha2UgYW4gaW5kZW50IHN0cmluZyBjb250YWluaW5nIHRoYXQKICAgICAgICAgICAgLy8gbWFueSBzcGFjZXMuCgogICAgICAgICAgICBpZiAodHlwZW9mIHNwYWNlID09PSAnbnVtYmVyJykgewogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzcGFjZTsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBpbmRlbnQgKz0gJyAnOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgLy8gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIHN0cmluZywgaXQgd2lsbCBiZSB1c2VkIGFzIHRoZSBpbmRlbnQgc3RyaW5nLgoKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgaW5kZW50ID0gc3BhY2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyByZXBsYWNlciBwYXJhbWV0ZXIsIHVzZSB0aGUgZGVmYXVsdCByZXBsYWNlci4KCiAgICAgICAgICBpZiAoIXJlcGxhY2VyKSB7CiAgICAgICAgICAgIHJlcCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgICBpZiAoIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIGtleSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIC8vIFRoZSByZXBsYWNlciBjYW4gYmUgYSBmdW5jdGlvbiBvciBhbiBhcnJheS4gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvci4KCiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJyB8fAogICAgICAgICAgICAodHlwZW9mIHJlcGxhY2VyID09PSAnb2JqZWN0JyAmJgogICAgICAgICAgICAgIHR5cGVvZiByZXBsYWNlci5sZW5ndGggPT09ICdudW1iZXInKSkgewogICAgICAgICAgICByZXAgPSByZXBsYWNlcjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSlNPTi5zdHJpbmdpZnknKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBNYWtlIGEgZmFrZSByb290IG9iamVjdCBjb250YWluaW5nIG91ciB2YWx1ZSB1bmRlciB0aGUga2V5IG9mICcnLgogICAgICAgICAgLy8gUmV0dXJuIHRoZSByZXN1bHQgb2Ygc3RyaW5naWZ5aW5nIHRoZSB2YWx1ZS4KCiAgICAgICAgICByZXR1cm4gc3RyKCcnLCB7CiAgICAgICAgICAgICcnOiB2YWx1ZQogICAgICAgICAgfSk7CiAgICAgICAgfSwKCgogICAgICAgIHBhcnNlOiBmdW5jdGlvbih0ZXh0LCByZXZpdmVyKSB7CgogICAgICAgICAgLy8gVGhlIHBhcnNlIG1ldGhvZCB0YWtlcyBhIHRleHQgYW5kIGFuIG9wdGlvbmFsIHJldml2ZXIgZnVuY3Rpb24sIGFuZCByZXR1cm5zCiAgICAgICAgICAvLyBhIEphdmFTY3JpcHQgdmFsdWUgaWYgdGhlIHRleHQgaXMgYSB2YWxpZCBKU09OIHRleHQuCgogICAgICAgICAgdmFyIGo7CgogICAgICAgICAgZnVuY3Rpb24gd2Fsayhob2xkZXIsIGtleSkgewoKICAgICAgICAgICAgLy8gVGhlIHdhbGsgbWV0aG9kIGlzIHVzZWQgdG8gcmVjdXJzaXZlbHkgd2FsayB0aGUgcmVzdWx0aW5nIHN0cnVjdHVyZSBzbwogICAgICAgICAgICAvLyB0aGF0IG1vZGlmaWNhdGlvbnMgY2FuIGJlIG1hZGUuCgogICAgICAgICAgICB2YXIgaywgdiwgdmFsdWUgPSBob2xkZXJba2V5XTsKICAgICAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICBmb3IgKGsgaW4gdmFsdWUpIHsKICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHsKICAgICAgICAgICAgICAgICAgdiA9IHdhbGsodmFsdWUsIGspOwogICAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVba10gPSB2OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtrXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmV2aXZlci5jYWxsKGhvbGRlciwga2V5LCB2YWx1ZSk7CiAgICAgICAgICB9CgoKICAgICAgICAgIC8vIFBhcnNpbmcgaGFwcGVucyBpbiB0aHJlZSBzdGFnZXMuIEluIHRoZSBmaXJzdCBzdGFnZSwgd2UgcnVuIHRoZSB0ZXh0IGFnYWluc3QKICAgICAgICAgIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbnMgdGhhdCBsb29rIGZvciBub24tSlNPTiBwYXR0ZXJucy4gV2UgYXJlIGVzcGVjaWFsbHkKICAgICAgICAgIC8vIGNvbmNlcm5lZCB3aXRoICcoKScgYW5kICduZXcnIGJlY2F1c2UgdGhleSBjYW4gY2F1c2UgaW52b2NhdGlvbiwgYW5kICc9JwogICAgICAgICAgLy8gYmVjYXVzZSBpdCBjYW4gY2F1c2UgbXV0YXRpb24uIEJ1dCBqdXN0IHRvIGJlIHNhZmUsIHdlIHdhbnQgdG8gcmVqZWN0IGFsbAogICAgICAgICAgLy8gdW5leHBlY3RlZCBmb3Jtcy4KCiAgICAgICAgICAvLyBXZSBzcGxpdCB0aGUgZmlyc3Qgc3RhZ2UgaW50byA0IHJlZ2V4cCBvcGVyYXRpb25zIGluIG9yZGVyIHRvIHdvcmsgYXJvdW5kCiAgICAgICAgICAvLyBjcmlwcGxpbmcgaW5lZmZpY2llbmNpZXMgaW4gSUUncyBhbmQgU2FmYXJpJ3MgcmVnZXhwIGVuZ2luZXMuIEZpcnN0IHdlCiAgICAgICAgICAvLyByZXBsYWNlIGFsbCBiYWNrc2xhc2ggcGFpcnMgd2l0aCAnQCcgKGEgbm9uLUpTT04gY2hhcmFjdGVyKS4gU2Vjb25kLCB3ZQogICAgICAgICAgLy8gcmVwbGFjZSBhbGwgc2ltcGxlIHZhbHVlIHRva2VucyB3aXRoICddJyBjaGFyYWN0ZXJzLiBUaGlyZCwgd2UgZGVsZXRlIGFsbAogICAgICAgICAgLy8gb3BlbiBicmFja2V0cyB0aGF0IGZvbGxvdyBhIGNvbG9uIG9yIGNvbW1hIG9yIHRoYXQgYmVnaW4gdGhlIHRleHQuIEZpbmFsbHksCiAgICAgICAgICAvLyB3ZSBsb29rIHRvIHNlZSB0aGF0IHRoZSByZW1haW5pbmcgY2hhcmFjdGVycyBhcmUgb25seSB3aGl0ZXNwYWNlIG9yICddJyBvcgogICAgICAgICAgLy8gJywnIG9yICc6JyBvciAneycgb3IgJ30nLiBJZiB0aGF0IGlzIHNvLCB0aGVuIHRoZSB0ZXh0IGlzIHNhZmUgZm9yIGV2YWwuCgogICAgICAgICAgaWYgKC9eW1xdLDp7fVxzXSokLy50ZXN0KHRleHQucmVwbGFjZSgvXFxbIlxcXC9iZm5ydHVdL2csICdAJykucmVwbGFjZSgvIlteIlxcXG5ccl0qInx0cnVlfGZhbHNlfG51bGx8LT9cZCsoPzpcLlxkKik/KD86W2VFXVsrXC1dP1xkKyk/L2csICddJykucmVwbGFjZSgvKD86Xnw6fCwpKD86XHMqXFspKy9nLCAnJykpKSB7CgogICAgICAgICAgICAvLyBJbiB0aGUgc2Vjb25kIHN0YWdlIHdlIHVzZSB0aGUgZXZhbCBmdW5jdGlvbiB0byBjb21waWxlIHRoZSB0ZXh0IGludG8gYQogICAgICAgICAgICAvLyBKYXZhU2NyaXB0IHN0cnVjdHVyZS4gVGhlICd7JyBvcGVyYXRvciBpcyBzdWJqZWN0IHRvIGEgc3ludGFjdGljIGFtYmlndWl0eQogICAgICAgICAgICAvLyBpbiBKYXZhU2NyaXB0OiBpdCBjYW4gYmVnaW4gYSBibG9jayBvciBhbiBvYmplY3QgbGl0ZXJhbC4gV2Ugd3JhcCB0aGUgdGV4dAogICAgICAgICAgICAvLyBpbiBwYXJlbnMgdG8gZWxpbWluYXRlIHRoZSBhbWJpZ3VpdHkuCgogICAgICAgICAgICBqID0gZXZhbCgnKCcgKyB0ZXh0ICsgJyknKTsKCiAgICAgICAgICAgIC8vIEluIHRoZSBvcHRpb25hbCB0aGlyZCBzdGFnZSwgd2UgcmVjdXJzaXZlbHkgd2FsayB0aGUgbmV3IHN0cnVjdHVyZSwgcGFzc2luZwogICAgICAgICAgICAvLyBlYWNoIG5hbWUvdmFsdWUgcGFpciB0byBhIHJldml2ZXIgZnVuY3Rpb24gZm9yIHBvc3NpYmxlIHRyYW5zZm9ybWF0aW9uLgoKICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiByZXZpdmVyID09PSAnZnVuY3Rpb24nID8KICAgICAgICAgICAgICB3YWxrKHsKICAgICAgICAgICAgICAgICcnOiBqCiAgICAgICAgICAgICAgfSwgJycpIDogajsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBJZiB0aGUgdGV4dCBpcyBub3QgSlNPTiBwYXJzZWFibGUsIHRoZW4gYSBTeW50YXhFcnJvciBpcyB0aHJvd24uCgogICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdKU09OLnBhcnNlJyk7CiAgICAgICAgfSwKCiAgICAgICAgcXVvdGU6IHF1b3RlCiAgICAgIH07CiAgICB9KCk7CiAgfQoKICAvL2pzb24gZW5kCgogIC8vcGVyc2lzdC1taW4gc3RhcnQKCiAgKGZ1bmN0aW9uKCkgewogICAgaWYgKHdpbmRvdy5nb29nbGUgJiYgZ29vZ2xlLmdlYXJzKQogICAgICByZXR1cm47CiAgICB2YXIgRiA9IG51bGw7CiAgICBpZiAodHlwZW9mIEdlYXJzRmFjdG9yeSAhPSAndW5kZWZpbmVkJykgewogICAgICBGID0gbmV3IEdlYXJzRmFjdG9yeSgpOwogICAgfSBlbHNlIHsKICAgICAgdHJ5IHsKICAgICAgICBGID0gbmV3IEFjdGl2ZVhPYmplY3QoJ0dlYXJzLkZhY3RvcnknKTsKICAgICAgICBpZiAoRi5nZXRCdWlsZEluZm8oKS5pbmRleE9mKCdpZV9tb2JpbGUnKSAhPSAtMSkKICAgICAgICAgIEYucHJpdmF0ZVNldEdsb2JhbE9iamVjdCh0aGlzKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGlmICgodHlwZW9mIG5hdmlnYXRvci5taW1lVHlwZXMgIT0gJ3VuZGVmaW5lZCcpICYmIG5hdmlnYXRvci5taW1lVHlwZXNbImFwcGxpY2F0aW9uL3gtZ29vZ2xlZ2VhcnMiXSkgewogICAgICAgICAgRiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9iamVjdCIpOwogICAgICAgICAgRi5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgICAgRi53aWR0aCA9IDA7CiAgICAgICAgICBGLmhlaWdodCA9IDA7CiAgICAgICAgICBGLnR5cGUgPSAiYXBwbGljYXRpb24veC1nb29nbGVnZWFycyI7CiAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoRik7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAoIUYpCiAgICAgIHJldHVybjsKICAgIGlmICghd2luZG93Lmdvb2dsZSkKICAgICAgZ29vZ2xlID0ge307CiAgICBpZiAoIWdvb2dsZS5nZWFycykKICAgICAgZ29vZ2xlLmdlYXJzID0gewogICAgICAgIGZhY3Rvcnk6IEYKICAgICAgfTsKICB9KSgpOwogIFBlcnNpc3QgPSAoZnVuY3Rpb24oKSB7CiAgICB2YXIgVkVSU0lPTiA9ICcwLjIuMCcsCiAgICAgIFAsIEIsIGVzYywgaW5pdCwgZW1wdHksIGVjOwogICAgZWMgPSAoZnVuY3Rpb24oKSB7CiAgICAgIHZhciBFUE9DSCA9ICdUaHUsIDAxLUphbi0xOTcwIDAwOjAwOjAxIEdNVCcsCiAgICAgICAgUkFUSU8gPSAxMDAwICogNjAgKiA2MCAqIDI0LAogICAgICAgIEtFWVMgPSBbJ2V4cGlyZXMnLCAncGF0aCcsICdkb21haW4nXSwKICAgICAgICBlc2MgPSBlc2NhcGUsCiAgICAgICAgdW4gPSB1bmVzY2FwZSwKICAgICAgICBkb2MgPSBkb2N1bWVudCwKICAgICAgICBtZTsKICAgICAgdmFyIGdldF9ub3cgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgciA9IG5ldyBEYXRlKCk7CiAgICAgICAgci5zZXRUaW1lKHIuZ2V0VGltZSgpKTsKICAgICAgICByZXR1cm4gcjsKICAgICAgfQogICAgICB2YXIgY29va2lmeSA9IGZ1bmN0aW9uKGNfa2V5LCBjX3ZhbCkgewogICAgICAgIHZhciBpLCBrZXksIHZhbCwgciA9IFtdLAogICAgICAgICAgb3B0ID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyKSA/IGFyZ3VtZW50c1syXSA6IHt9OwogICAgICAgIHIucHVzaChlc2MoY19rZXkpICsgJz0nICsgZXNjKGNfdmFsKSk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IEtFWVMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGtleSA9IEtFWVNbaV07CiAgICAgICAgICBpZiAodmFsID0gb3B0W2tleV0pCiAgICAgICAgICAgIHIucHVzaChrZXkgKyAnPScgKyB2YWwpOwogICAgICAgIH0KICAgICAgICBpZiAob3B0LnNlY3VyZSkKICAgICAgICAgIHIucHVzaCgnc2VjdXJlJyk7CiAgICAgICAgcmV0dXJuIHIuam9pbignOyAnKTsKICAgICAgfQogICAgICB2YXIgYWxpdmUgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgayA9ICdfX0VDX1RFU1RfXycsCiAgICAgICAgICB2ID0gbmV3IERhdGUoKTsKICAgICAgICB2ID0gdi50b0dNVFN0cmluZygpOwogICAgICAgIHRoaXMuc2V0KGssIHYpOwogICAgICAgIHRoaXMuZW5hYmxlZCA9ICh0aGlzLnJlbW92ZShrKSA9PSB2KTsKICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVkOwogICAgICB9CiAgICAgIG1lID0gewogICAgICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWwpIHsKICAgICAgICAgIHZhciBvcHQgPSAoYXJndW1lbnRzLmxlbmd0aCA+IDIpID8gYXJndW1lbnRzWzJdIDoge30sIG5vdyA9IGdldF9ub3coKSwKICAgICAgICAgICAgZXhwaXJlX2F0LCBjZmcgPSB7fTsKICAgICAgICAgIGlmIChvcHQuZXhwaXJlcykgewogICAgICAgICAgICBvcHQuZXhwaXJlcyAqPSBSQVRJTzsKICAgICAgICAgICAgY2ZnLmV4cGlyZXMgPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpICsgb3B0LmV4cGlyZXMpOwogICAgICAgICAgICBjZmcuZXhwaXJlcyA9IGNmZy5leHBpcmVzLnRvR01UU3RyaW5nKCk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIga2V5cyA9IFsncGF0aCcsICdkb21haW4nLCAnc2VjdXJlJ107CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykKICAgICAgICAgICAgaWYgKG9wdFtrZXlzW2ldXSkKICAgICAgICAgICAgICBjZmdba2V5c1tpXV0gPSBvcHRba2V5c1tpXV07CiAgICAgICAgICB2YXIgciA9IGNvb2tpZnkoa2V5LCB2YWwsIGNmZyk7CiAgICAgICAgICBkb2MuY29va2llID0gcjsKICAgICAgICAgIHJldHVybiB2YWw7CiAgICAgICAgfSwKICAgICAgICBoYXM6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAga2V5ID0gZXNjKGtleSk7CiAgICAgICAgICB2YXIgYyA9IGRvYy5jb29raWUsCiAgICAgICAgICAgIG9mcyA9IGMuaW5kZXhPZihrZXkgKyAnPScpLAogICAgICAgICAgICBsZW4gPSBvZnMgKyBrZXkubGVuZ3RoICsgMSwKICAgICAgICAgICAgc3ViID0gYy5zdWJzdHJpbmcoMCwga2V5Lmxlbmd0aCk7CiAgICAgICAgICByZXR1cm4gKCghb2ZzICYmIGtleSAhPSBzdWIpIHx8IG9mcyA8IDApID8gZmFsc2UgOiB0cnVlOwogICAgICAgIH0sCiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgIGtleSA9IGVzYyhrZXkpOwogICAgICAgICAgdmFyIGMgPSBkb2MuY29va2llLAogICAgICAgICAgICBvZnMgPSBjLmluZGV4T2Yoa2V5ICsgJz0nKSwKICAgICAgICAgICAgbGVuID0gb2ZzICsga2V5Lmxlbmd0aCArIDEsCiAgICAgICAgICAgIHN1YiA9IGMuc3Vic3RyaW5nKDAsIGtleS5sZW5ndGgpLAogICAgICAgICAgICBlbmQ7CiAgICAgICAgICBpZiAoKCFvZnMgJiYga2V5ICE9IHN1YikgfHwgb2ZzIDwgMCkKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICBlbmQgPSBjLmluZGV4T2YoJzsnLCBsZW4pOwogICAgICAgICAgaWYgKGVuZCA8IDApCiAgICAgICAgICAgIGVuZCA9IGMubGVuZ3RoOwogICAgICAgICAgcmV0dXJuIHVuKGMuc3Vic3RyaW5nKGxlbiwgZW5kKSk7CiAgICAgICAgfSwKICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGspIHsKICAgICAgICAgIHZhciByID0gbWUuZ2V0KGspLAogICAgICAgICAgICBvcHQgPSB7CiAgICAgICAgICAgICAgZXhwaXJlczogRVBPQ0gKICAgICAgICAgICAgfTsKICAgICAgICAgIGRvYy5jb29raWUgPSBjb29raWZ5KGssICcnLCBvcHQpOwogICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgfSwKICAgICAgICBrZXlzOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBjID0gZG9jLmNvb2tpZSwKICAgICAgICAgICAgcHMgPSBjLnNwbGl0KCc7ICcpLAogICAgICAgICAgICBpLCBwLCByID0gW107CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcCA9IHBzW2ldLnNwbGl0KCc9Jyk7CiAgICAgICAgICAgIHIucHVzaCh1bihwWzBdKSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcjsKICAgICAgICB9LAogICAgICAgIGFsbDogZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgYyA9IGRvYy5jb29raWUsCiAgICAgICAgICAgIHBzID0gYy5zcGxpdCgnOyAnKSwKICAgICAgICAgICAgaSwgcCwgciA9IFtdOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHAgPSBwc1tpXS5zcGxpdCgnPScpOwogICAgICAgICAgICByLnB1c2goW3VuKHBbMF0pLCB1bihwWzFdKV0pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgfSwKICAgICAgICB2ZXJzaW9uOiAnMC4yLjEnLAogICAgICAgIGVuYWJsZWQ6IGZhbHNlCiAgICAgIH07CiAgICAgIG1lLmVuYWJsZWQgPSBhbGl2ZS5jYWxsKG1lKTsKICAgICAgcmV0dXJuIG1lOwogICAgfSgpKTsKICAgIHZhciBpbmRleF9vZiA9IChmdW5jdGlvbigpIHsKICAgICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKQogICAgICAgIHJldHVybiBmdW5jdGlvbihhcnksIHZhbCkgewogICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYXJ5LCB2YWwpOwogICAgICAgIH07CiAgICAgIGVsc2UKICAgICAgICByZXR1cm4gZnVuY3Rpb24oYXJ5LCB2YWwpIHsKICAgICAgICAgIHZhciBpLCBsOwogICAgICAgICAgZm9yIChpID0gMCwgbCA9IGFyeS5sZW5ndGg7IGkgPCBsOyBpKyspCiAgICAgICAgICAgIGlmIChhcnlbaV0gPT0gdmFsKQogICAgICAgICAgICAgIHJldHVybiBpOwogICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH07CiAgICB9KSgpOwogICAgZW1wdHkgPSBmdW5jdGlvbigpIHt9OwogICAgZXNjID0gZnVuY3Rpb24oc3RyKSB7CiAgICAgIHJldHVybiAnUFMnICsgc3RyLnJlcGxhY2UoL18vZywgJ19fJykucmVwbGFjZSgvIC9nLCAnX3MnKTsKICAgIH07CiAgICBDID0gewogICAgICBzZWFyY2hfb3JkZXI6IFsnbG9jYWxzdG9yYWdlJywgJ3doYXR3Z19kYicsICdnbG9iYWxzdG9yYWdlJywgJ2dlYXJzJywgJ2llJywgJ2ZsYXNoJywgJ2Nvb2tpZSddLAogICAgICBuYW1lX3JlOiAvXlthLXpdW2EtejAtOV8gLV0rJC9pLAogICAgICBtZXRob2RzOiBbJ2luaXQnLCAnZ2V0JywgJ3NldCcsICdyZW1vdmUnLCAnbG9hZCcsICdzYXZlJ10sCiAgICAgIHNxbDogewogICAgICAgIHZlcnNpb246ICcxJywKICAgICAgICBjcmVhdGU6ICJDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBwZXJzaXN0X2RhdGEgKGsgVEVYVCBVTklRVUUgTk9UIE5VTEwgUFJJTUFSWSBLRVksIHYgVEVYVCBOT1QgTlVMTCkiLAogICAgICAgIGdldDogIlNFTEVDVCB2IEZST00gcGVyc2lzdF9kYXRhIFdIRVJFIGsgPSA/IiwKICAgICAgICBzZXQ6ICJJTlNFUlQgSU5UTyBwZXJzaXN0X2RhdGEoaywgdikgVkFMVUVTICg/LCA/KSIsCiAgICAgICAgcmVtb3ZlOiAiREVMRVRFIEZST00gcGVyc2lzdF9kYXRhIFdIRVJFIGsgPSA/IgogICAgICB9LAogICAgICBmbGFzaDogewogICAgICAgIGRpdl9pZDogJ19wZXJzaXN0X2ZsYXNoX3dyYXAnLAogICAgICAgIGlkOiAnX3BlcnNpc3RfZmxhc2gnLAogICAgICAgIHBhdGg6ICdwZXJzaXN0LnN3ZicsCiAgICAgICAgc2l6ZTogewogICAgICAgICAgdzogMSwKICAgICAgICAgIGg6IDEKICAgICAgICB9LAogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGF1dG9zdGFydDogdHJ1ZQogICAgICAgIH0KICAgICAgfQogICAgfTsKICAgIEIgPSB7CiAgICAgIGdlYXJzOiB7CiAgICAgICAgc2l6ZTogLTEsCiAgICAgICAgdGVzdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICByZXR1cm4gKHdpbmRvdy5nb29nbGUgJiYgd2luZG93Lmdvb2dsZS5nZWFycykgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KCiAgICAgICAgfSwKICAgICAgICBtZXRob2RzOiB7CiAgICAgICAgICB0cmFuc2FjdGlvbjogZnVuY3Rpb24oZm4pIHsKICAgICAgICAgICAgdmFyIGRiID0gdGhpcy5kYjsKICAgICAgICAgICAgZGIuZXhlY3V0ZSgnQkVHSU4nKS5jbG9zZSgpOwogICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGRiKTsKICAgICAgICAgICAgZGIuZXhlY3V0ZSgnQ09NTUlUJykuY2xvc2UoKTsKICAgICAgICAgIH0sCiAgICAgICAgICBpbml0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGRiOwogICAgICAgICAgICBkYiA9IHRoaXMuZGIgPSBnb29nbGUuZ2VhcnMuZmFjdG9yeS5jcmVhdGUoJ2JldGEuZGF0YWJhc2UnKTsKICAgICAgICAgICAgZGIub3Blbihlc2ModGhpcy5uYW1lKSk7CiAgICAgICAgICAgIGRiLmV4ZWN1dGUoQy5zcWwuY3JlYXRlKS5jbG9zZSgpOwogICAgICAgICAgfSwKICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHIsIHNxbCA9IEMuc3FsLmdldDsKICAgICAgICAgICAgaWYgKCFmbikKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb24oZnVuY3Rpb24odCkgewogICAgICAgICAgICAgIHZhciBpc192YWxpZCwgdmFsOwogICAgICAgICAgICAgIHIgPSB0LmV4ZWN1dGUoc3FsLCBba2V5XSk7CiAgICAgICAgICAgICAgaXNfdmFsaWQgPSByLmlzVmFsaWRSb3coKTsKICAgICAgICAgICAgICB2YWwgPSBpc192YWxpZCA/IHIuZmllbGQoMCkgOiBudWxsOwogICAgICAgICAgICAgIHIuY2xvc2UoKTsKICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIGlzX3ZhbGlkLCB2YWwpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0sCiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsLCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHJtX3NxbCA9IEMuc3FsLnJlbW92ZSwKICAgICAgICAgICAgICBzcWwgPSBDLnNxbC5zZXQsCiAgICAgICAgICAgICAgcjsKICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgdC5leGVjdXRlKHJtX3NxbCwgW2tleV0pLmNsb3NlKCk7CiAgICAgICAgICAgICAgdC5leGVjdXRlKHNxbCwgW2tleSwgdmFsXSkuY2xvc2UoKTsKICAgICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIHRydWUsIHZhbCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIGdldF9zcWwgPSBDLnNxbC5nZXQ7CiAgICAgICAgICAgIHNxbCA9IEMuc3FsLnJlbW92ZSwgciwgdmFsID0gbnVsbCwgaXNfdmFsaWQgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgaWYgKGZuKSB7CiAgICAgICAgICAgICAgICByID0gdC5leGVjdXRlKGdldF9zcWwsIFtrZXldKTsKICAgICAgICAgICAgICAgIGlzX3ZhbGlkID0gci5pc1ZhbGlkUm93KCk7CiAgICAgICAgICAgICAgICB2YWwgPSBpc192YWxpZCA/IHIuZmllbGQoMCkgOiBudWxsOwogICAgICAgICAgICAgICAgci5jbG9zZSgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoIWZuIHx8IGlzX3ZhbGlkKSB7CiAgICAgICAgICAgICAgICB0LmV4ZWN1dGUoc3FsLCBba2V5XSkuY2xvc2UoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCBpc192YWxpZCwgdmFsKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICB3aGF0d2dfZGI6IHsKICAgICAgICBzaXplOiAyMDAgKiAxMDI0LAogICAgICAgIHRlc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIG5hbWUgPSAnUGVyc2lzdEpTIFRlc3QnLAogICAgICAgICAgICAgIGRlc2MgPSAnUGVyc2lzdGVudCBkYXRhYmFzZSB0ZXN0Lic7CiAgICAgICAgICAgIGlmICghd2luZG93Lm9wZW5EYXRhYmFzZSkKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGlmICghd2luZG93Lm9wZW5EYXRhYmFzZShuYW1lLCBDLnNxbC52ZXJzaW9uLCBkZXNjLCBCLndoYXR3Z19kYi5zaXplKSkKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAgdHJhbnNhY3Rpb246IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5kYl9jcmVhdGVkKSB7CiAgICAgICAgICAgICAgdGhpcy5kYi50cmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICB0LmV4ZWN1dGVTcWwoQy5zcWwuY3JlYXRlLCBbXSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuZGJfY3JlYXRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9LCBlbXB0eSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5kYi50cmFuc2FjdGlvbihmbik7CiAgICAgICAgICB9LAogICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuZGIgPSBvcGVuRGF0YWJhc2UodGhpcy5uYW1lLCBDLnNxbC52ZXJzaW9uLCB0aGlzLm8uYWJvdXQgfHwgKCJQZXJzaXN0ZW50IHN0b3JhZ2UgZm9yICIgKyB0aGlzLm5hbWUpLCB0aGlzLm8uc2l6ZSB8fCBCLndoYXR3Z19kYi5zaXplKTsKICAgICAgICAgIH0sCiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSwgZm4sIHNjb3BlKSB7CiAgICAgICAgICAgIHZhciBzcWwgPSBDLnNxbC5nZXQ7CiAgICAgICAgICAgIGlmICghZm4pCiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICBzY29wZSA9IHNjb3BlIHx8IHRoaXM7CiAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb24oZnVuY3Rpb24odCkgewogICAgICAgICAgICAgIHQuZXhlY3V0ZVNxbChzcWwsIFtrZXldLCBmdW5jdGlvbih0LCByKSB7CiAgICAgICAgICAgICAgICBpZiAoci5yb3dzLmxlbmd0aCA+IDApCiAgICAgICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUsIHRydWUsIHIucm93cy5pdGVtKDApWyd2J10pOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlLCBmYWxzZSwgbnVsbCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWwsIGZuLCBzY29wZSkgewogICAgICAgICAgICB2YXIgcm1fc3FsID0gQy5zcWwucmVtb3ZlLAogICAgICAgICAgICAgIHNxbCA9IEMuc3FsLnNldDsKICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgdC5leGVjdXRlU3FsKHJtX3NxbCwgW2tleV0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdC5leGVjdXRlU3FsKHNxbCwgW2tleSwgdmFsXSwgZnVuY3Rpb24odCwgcikgewogICAgICAgICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB0cnVlLCB2YWwpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gdmFsOwogICAgICAgICAgfSwKICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIGdldF9zcWwgPSBDLnNxbC5nZXQ7CiAgICAgICAgICAgIHNxbCA9IEMuc3FsLnJlbW92ZTsKICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgaWYgKGZuKSB7CiAgICAgICAgICAgICAgICB0LmV4ZWN1dGVTcWwoZ2V0X3NxbCwgW2tleV0sIGZ1bmN0aW9uKHQsIHIpIHsKICAgICAgICAgICAgICAgICAgaWYgKHIucm93cy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHIucm93cy5pdGVtKDApWyd2J107CiAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlU3FsKHNxbCwgW2tleV0sIGZ1bmN0aW9uKHQsIHIpIHsKICAgICAgICAgICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdHJ1ZSwgdmFsKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIGZhbHNlLCBudWxsKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHQuZXhlY3V0ZVNxbChzcWwsIFtrZXldKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgZ2xvYmFsc3RvcmFnZTogewogICAgICAgIHNpemU6IDUgKiAxMDI0ICogMTAyNCwKICAgICAgICB0ZXN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZ2xvYmFsU3RvcmFnZSA/IHRydWUgOiBmYWxzZTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAga2V5OiBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgICAgcmV0dXJuIGVzYyh0aGlzLm5hbWUpICsgZXNjKGtleSk7CiAgICAgICAgICB9LAogICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFsZXJ0KCdkb21haW4gPSAnICsgdGhpcy5vLmRvbWFpbik7CiAgICAgICAgICAgIHRoaXMuc3RvcmUgPSBnbG9iYWxTdG9yYWdlW3RoaXMuby5kb21haW5dOwogICAgICAgICAgfSwKICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAga2V5ID0gdGhpcy5rZXkoa2V5KTsKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdHJ1ZSwgdGhpcy5zdG9yZS5nZXRJdGVtKGtleSkpOwogICAgICAgICAgfSwKICAgICAgICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWwsIGZuLCBzY29wZSkgewogICAgICAgICAgICBrZXkgPSB0aGlzLmtleShrZXkpOwogICAgICAgICAgICB0aGlzLnN0b3JlLnNldEl0ZW0oa2V5LCB2YWwpOwogICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB0cnVlLCB2YWwpOwogICAgICAgICAgfSwKICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHZhbDsKICAgICAgICAgICAga2V5ID0gdGhpcy5rZXkoa2V5KTsKICAgICAgICAgICAgdmFsID0gdGhpcy5zdG9yZVtrZXldOwogICAgICAgICAgICB0aGlzLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KTsKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgKHZhbCAhPT0gbnVsbCksIHZhbCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBsb2NhbHN0b3JhZ2U6IHsKICAgICAgICBzaXplOiAtMSwKICAgICAgICB0ZXN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAga2V5OiBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgICAgcmV0dXJuIGVzYyh0aGlzLm5hbWUpICsgZXNjKGtleSk7CiAgICAgICAgICB9LAogICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuc3RvcmUgPSBsb2NhbFN0b3JhZ2U7CiAgICAgICAgICB9LAogICAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXksIGZuLCBzY29wZSkgewogICAgICAgICAgICBrZXkgPSB0aGlzLmtleShrZXkpOwogICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB0cnVlLCB0aGlzLnN0b3JlLmdldEl0ZW0oa2V5KSk7CiAgICAgICAgICB9LAogICAgICAgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbCwgZm4sIHNjb3BlKSB7CiAgICAgICAgICAgIGtleSA9IHRoaXMua2V5KGtleSk7CiAgICAgICAgICAgIHRoaXMuc3RvcmUuc2V0SXRlbShrZXksIHZhbCk7CiAgICAgICAgICAgIGlmIChmbikKICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIHRydWUsIHZhbCk7CiAgICAgICAgICB9LAogICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXksIGZuLCBzY29wZSkgewogICAgICAgICAgICB2YXIgdmFsOwogICAgICAgICAgICBrZXkgPSB0aGlzLmtleShrZXkpOwogICAgICAgICAgICB2YWwgPSB0aGlzLnN0b3JlLmdldEl0ZW0oa2V5KTsKICAgICAgICAgICAgdGhpcy5zdG9yZS5yZW1vdmVJdGVtKGtleSk7CiAgICAgICAgICAgIGlmIChmbikKICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsICh2YWwgIT09IG51bGwpLCB2YWwpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgaWU6IHsKICAgICAgICBwcmVmaXg6ICdfcGVyc2lzdF9kYXRhLScsCiAgICAgICAgc2l6ZTogNjQgKiAxMDI0LAogICAgICAgIHRlc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5BY3RpdmVYT2JqZWN0ID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgbWFrZV91c2VyZGF0YTogZnVuY3Rpb24oaWQpIHsKICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgZWwuaWQgPSBpZDsKICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICBlbC5hZGRCZWhhdmlvcignI2RlZmF1bHQjdXNlcmRhdGEnKTsKICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpOwogICAgICAgICAgcmV0dXJuIGVsOwogICAgICAgIH0sCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBpZCA9IEIuaWUucHJlZml4ICsgZXNjKHRoaXMubmFtZSk7CiAgICAgICAgICAgIHRoaXMuZWwgPSBCLmllLm1ha2VfdXNlcmRhdGEoaWQpOwogICAgICAgICAgICBpZiAodGhpcy5vLmRlZmVyKQogICAgICAgICAgICAgIHRoaXMubG9hZCgpOwogICAgICAgICAgfSwKICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHZhbDsKICAgICAgICAgICAga2V5ID0gZXNjKGtleSk7CiAgICAgICAgICAgIGlmICghdGhpcy5vLmRlZmVyKQogICAgICAgICAgICAgIHRoaXMubG9hZCgpOwogICAgICAgICAgICB2YWwgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShrZXkpOwogICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB2YWwgPyB0cnVlIDogZmFsc2UsIHZhbCk7CiAgICAgICAgICB9LAogICAgICAgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbCwgZm4sIHNjb3BlKSB7CiAgICAgICAgICAgIGtleSA9IGVzYyhrZXkpOwogICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZShrZXksIHZhbCk7CiAgICAgICAgICAgIGlmICghdGhpcy5vLmRlZmVyKQogICAgICAgICAgICAgIHRoaXMuc2F2ZSgpOwogICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB0cnVlLCB2YWwpOwogICAgICAgICAgfSwKICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHZhbDsKICAgICAgICAgICAga2V5ID0gZXNjKGtleSk7CiAgICAgICAgICAgIGlmICghdGhpcy5vLmRlZmVyKQogICAgICAgICAgICAgIHRoaXMubG9hZCgpOwogICAgICAgICAgICB2YWwgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShrZXkpOwogICAgICAgICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpOwogICAgICAgICAgICBpZiAoIXRoaXMuby5kZWZlcikKICAgICAgICAgICAgICB0aGlzLnNhdmUoKTsKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdmFsID8gdHJ1ZSA6IGZhbHNlLCB2YWwpOwogICAgICAgICAgfSwKICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0aGlzLmVsLmxvYWQoZXNjKHRoaXMubmFtZSkpOwogICAgICAgICAgfSwKICAgICAgICAgIHNhdmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0aGlzLmVsLnNhdmUoZXNjKHRoaXMubmFtZSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgY29va2llOiB7CiAgICAgICAgZGVsaW06ICc6JywKICAgICAgICBzaXplOiA0MDAwLAogICAgICAgIHRlc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIFAuQ29va2llLmVuYWJsZWQgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KCiAgICAgICAgfSwKICAgICAgICBtZXRob2RzOiB7CiAgICAgICAgICBrZXk6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgQi5jb29raWUuZGVsaW0gKyBrZXk7CiAgICAgICAgICB9LAogICAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXksIGZuLCBzY29wZSkgewogICAgICAgICAgICB2YXIgdmFsOwogICAgICAgICAgICBrZXkgPSB0aGlzLmtleShrZXkpOwogICAgICAgICAgICB2YWwgPSBlYy5nZXQoa2V5KTsKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdmFsICE9IG51bGwsIHZhbCk7CiAgICAgICAgICB9LAogICAgICAgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbCwgZm4sIHNjb3BlKSB7CiAgICAgICAgICAgIGtleSA9IHRoaXMua2V5KGtleSk7CiAgICAgICAgICAgIGVjLnNldChrZXksIHZhbCwgdGhpcy5vKTsKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdHJ1ZSwgdmFsKTsKICAgICAgICAgIH0sCiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSwgdmFsLCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHZhbDsKICAgICAgICAgICAga2V5ID0gdGhpcy5rZXkoa2V5KTsKICAgICAgICAgICAgdmFsID0gZWMucmVtb3ZlKGtleSkKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdmFsICE9IG51bGwsIHZhbCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBmbGFzaDogewogICAgICAgIHRlc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKCFkZWNvbmNlcHQgfHwgIWRlY29uY2VwdC5TV0ZPYmplY3RVdGlsKQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgdmFyIG1ham9yID0gZGVjb25jZXB0LlNXRk9iamVjdFV0aWwuZ2V0UGxheWVyVmVyc2lvbigpLm1ham9yOwogICAgICAgICAgICByZXR1cm4gKG1ham9yID49IDgpID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghQi5mbGFzaC5lbCkgewogICAgICAgICAgICAgIHZhciBvLCBrZXksIGVsLCBjZmcgPSBDLmZsYXNoOwogICAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgZWwuaWQgPSBjZmcuZGl2X2lkOwogICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpOwogICAgICAgICAgICAgIG8gPSBuZXcgZGVjb25jZXB0LlNXRk9iamVjdCh0aGlzLm8uc3dmX3BhdGggfHwgY2ZnLnBhdGgsIGNmZy5pZCwgY2ZnLnNpemUudywgY2ZnLnNpemUuaCwgJzgnKTsKICAgICAgICAgICAgICBmb3IgKGtleSBpbiBjZmcuYXJncykKICAgICAgICAgICAgICAgIG8uYWRkVmFyaWFibGUoa2V5LCBjZmcuYXJnc1trZXldKTsKICAgICAgICAgICAgICBvLndyaXRlKGVsKTsKICAgICAgICAgICAgICBCLmZsYXNoLmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2ZnLmlkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmVsID0gQi5mbGFzaC5lbDsKICAgICAgICAgIH0sCiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSwgZm4sIHNjb3BlKSB7CiAgICAgICAgICAgIHZhciB2YWw7CiAgICAgICAgICAgIGtleSA9IGVzYyhrZXkpOwogICAgICAgICAgICB2YWwgPSB0aGlzLmVsLmdldCh0aGlzLm5hbWUsIGtleSk7CiAgICAgICAgICAgIGlmIChmbikKICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIHZhbCAhPT0gbnVsbCwgdmFsKTsKICAgICAgICAgIH0sCiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsLCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIG9sZF92YWw7CiAgICAgICAgICAgIGtleSA9IGVzYyhrZXkpOwogICAgICAgICAgICBvbGRfdmFsID0gdGhpcy5lbC5zZXQodGhpcy5uYW1lLCBrZXksIHZhbCk7CiAgICAgICAgICAgIGlmIChmbikKICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIHRydWUsIHZhbCk7CiAgICAgICAgICB9LAogICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXksIGZuLCBzY29wZSkgewogICAgICAgICAgICB2YXIgdmFsOwogICAgICAgICAgICBrZXkgPSBlc2Moa2V5KTsKICAgICAgICAgICAgdmFsID0gdGhpcy5lbC5yZW1vdmUodGhpcy5uYW1lLCBrZXkpOwogICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB0cnVlLCB2YWwpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfTsKICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBpLCBsLCBiLCBrZXksIGZucyA9IEMubWV0aG9kcywKICAgICAgICBrZXlzID0gQy5zZWFyY2hfb3JkZXI7CiAgICAgIGZvciAoaSA9IDAsIGwgPSBmbnMubGVuZ3RoOyBpIDwgbDsgaSsrKQogICAgICAgIFAuU3RvcmUucHJvdG90eXBlW2Zuc1tpXV0gPSBlbXB0eTsKICAgICAgUC50eXBlID0gbnVsbDsKICAgICAgUC5zaXplID0gLTE7CiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgIVAudHlwZSAmJiBpIDwgbDsgaSsrKSB7CiAgICAgICAgYiA9IEJba2V5c1tpXV07CiAgICAgICAgaWYgKGIudGVzdCgpKSB7CiAgICAgICAgICBQLnR5cGUgPSBrZXlzW2ldOwogICAgICAgICAgUC5zaXplID0gYi5zaXplOwogICAgICAgICAgZm9yIChrZXkgaW4gYi5tZXRob2RzKQogICAgICAgICAgICBQLlN0b3JlLnByb3RvdHlwZVtrZXldID0gYi5tZXRob2RzW2tleV07CiAgICAgICAgfQogICAgICB9CiAgICAgIFAuX2luaXQgPSB0cnVlOwogICAgfTsKICAgIFAgPSB7CiAgICAgIFZFUlNJT046IFZFUlNJT04sCiAgICAgIHR5cGU6IG51bGwsCiAgICAgIHNpemU6IDAsCiAgICAgIGFkZDogZnVuY3Rpb24obykgewogICAgICAgIEJbby5pZF0gPSBvOwogICAgICAgIEMuc2VhcmNoX29yZGVyID0gW28uaWRdLmNvbmNhdChDLnNlYXJjaF9vcmRlcik7CiAgICAgICAgaW5pdCgpOwogICAgICB9LAogICAgICByZW1vdmU6IGZ1bmN0aW9uKGlkKSB7CiAgICAgICAgdmFyIG9mcyA9IGluZGV4X29mKEMuc2VhcmNoX29yZGVyLCBpZCk7CiAgICAgICAgaWYgKG9mcyA8IDApCiAgICAgICAgICByZXR1cm47CiAgICAgICAgQy5zZWFyY2hfb3JkZXIuc3BsaWNlKG9mcywgMSk7CiAgICAgICAgZGVsZXRlIEJbaWRdOwogICAgICAgIGluaXQoKTsKICAgICAgfSwKICAgICAgQ29va2llOiBlYywKICAgICAgU3RvcmU6IGZ1bmN0aW9uKG5hbWUsIG8pIHsKICAgICAgICBpZiAoIUMubmFtZV9yZS5leGVjKG5hbWUpKQogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIG5hbWUiKTsKICAgICAgICBpZiAoIVAudHlwZSkKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTm8gc3VpdGFibGUgc3RvcmFnZSBmb3VuZCIpOwogICAgICAgIG8gPSBvIHx8IHt9OwogICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgby5kb21haW4gPSBvLmRvbWFpbiB8fCBsb2NhdGlvbi5ob3N0IHx8ICdsb2NhbGhvc3QnOwogICAgICAgIG8uZG9tYWluID0gby5kb21haW4ucmVwbGFjZSgvOlxkKyQvLCAnJykKICAgICAgICB0aGlzLm8gPSBvOwogICAgICAgIG8uZXhwaXJlcyA9IG8uZXhwaXJlcyB8fCAzNjUgKiAyOwogICAgICAgIG8ucGF0aCA9IG8ucGF0aCB8fCAnLyc7CiAgICAgICAgdGhpcy5pbml0KCk7CiAgICAgIH0KICAgIH07CiAgICBpbml0KCk7CiAgICByZXR1cm4gUDsKICB9KSgpOwogIC8vcGVyc2lzdC1taW4gZW5kCgogIC8vc3dmb2JqZWN0LW1pbiBzdGFydAoKICBpZiAodHlwZW9mIGRlY29uY2VwdCA9PSAidW5kZWZpbmVkIikgdmFyIGRlY29uY2VwdCA9IG5ldyBPYmplY3QoKTsKICBpZiAodHlwZW9mIGRlY29uY2VwdC51dGlsID09ICJ1bmRlZmluZWQiKSBkZWNvbmNlcHQudXRpbCA9IG5ldyBPYmplY3QoKTsKICBpZiAodHlwZW9mIGRlY29uY2VwdC5TV0ZPYmplY3RVdGlsID09ICJ1bmRlZmluZWQiKSBkZWNvbmNlcHQuU1dGT2JqZWN0VXRpbCA9IG5ldyBPYmplY3QoKTsKICBkZWNvbmNlcHQuU1dGT2JqZWN0ID0gZnVuY3Rpb24oc3dmLCBpZCwgdywgaCwgdmVyLCBjLCBxdWFsaXR5LCB4aVJlZGlyZWN0VXJsLCByZWRpcmVjdFVybCwgZGV0ZWN0S2V5KSB7CiAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMuREVURUNUX0tFWSA9IGRldGVjdEtleSA/IGRldGVjdEtleSA6ICdkZXRlY3RmbGFzaCc7CiAgICB0aGlzLnNraXBEZXRlY3QgPSBkZWNvbmNlcHQudXRpbC5nZXRSZXF1ZXN0UGFyYW1ldGVyKHRoaXMuREVURUNUX0tFWSk7CiAgICB0aGlzLnBhcmFtcyA9IG5ldyBPYmplY3QoKTsKICAgIHRoaXMudmFyaWFibGVzID0gbmV3IE9iamVjdCgpOwogICAgdGhpcy5hdHRyaWJ1dGVzID0gbmV3IEFycmF5KCk7CiAgICBpZiAoc3dmKSB7CiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdzd2YnLCBzd2YpOwogICAgfQogICAgaWYgKGlkKSB7CiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTsKICAgIH0KICAgIGlmICh3KSB7CiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHcpOwogICAgfQogICAgaWYgKGgpIHsKICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGgpOwogICAgfQogICAgaWYgKHZlcikgewogICAgICB0aGlzLnNldEF0dHJpYnV0ZSgndmVyc2lvbicsIG5ldyBkZWNvbmNlcHQuUGxheWVyVmVyc2lvbih2ZXIudG9TdHJpbmcoKS5zcGxpdCgiLiIpKSk7CiAgICB9CiAgICB0aGlzLmluc3RhbGxlZFZlciA9IGRlY29uY2VwdC5TV0ZPYmplY3RVdGlsLmdldFBsYXllclZlcnNpb24oKTsKICAgIGlmICghd2luZG93Lm9wZXJhICYmIGRvY3VtZW50LmFsbCAmJiB0aGlzLmluc3RhbGxlZFZlci5tYWpvciA+IDcpIHsKICAgICAgZGVjb25jZXB0LlNXRk9iamVjdC5kb1ByZXBVbmxvYWQgPSB0cnVlOwogICAgfQogICAgaWYgKGMpIHsKICAgICAgdGhpcy5hZGRQYXJhbSgnYmdjb2xvcicsIGMpOwogICAgfQogICAgdmFyIHEgPSBxdWFsaXR5ID8gcXVhbGl0eSA6ICdoaWdoJzsKICAgIHRoaXMuYWRkUGFyYW0oJ3F1YWxpdHknLCBxKTsKICAgIHRoaXMuc2V0QXR0cmlidXRlKCd1c2VFeHByZXNzSW5zdGFsbCcsIGZhbHNlKTsKICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkb0V4cHJlc3NJbnN0YWxsJywgZmFsc2UpOwogICAgdmFyIHhpciA9ICh4aVJlZGlyZWN0VXJsKSA/IHhpUmVkaXJlY3RVcmwgOiB3aW5kb3cubG9jYXRpb247CiAgICB0aGlzLnNldEF0dHJpYnV0ZSgneGlSZWRpcmVjdFVybCcsIHhpcik7CiAgICB0aGlzLnNldEF0dHJpYnV0ZSgncmVkaXJlY3RVcmwnLCAnJyk7CiAgICBpZiAocmVkaXJlY3RVcmwpIHsKICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3JlZGlyZWN0VXJsJywgcmVkaXJlY3RVcmwpOwogICAgfQogIH0KICBkZWNvbmNlcHQuU1dGT2JqZWN0LnByb3RvdHlwZSA9IHsKICAgIHVzZUV4cHJlc3NJbnN0YWxsOiBmdW5jdGlvbihwYXRoKSB7CiAgICAgIHRoaXMueGlTV0ZQYXRoID0gIXBhdGggPyAiZXhwcmVzc2luc3RhbGwuc3dmIiA6IHBhdGg7CiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd1c2VFeHByZXNzSW5zdGFsbCcsIHRydWUpOwogICAgfSwKICAgIHNldEF0dHJpYnV0ZTogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgICAgdGhpcy5hdHRyaWJ1dGVzW25hbWVdID0gdmFsdWU7CiAgICB9LAogICAgZ2V0QXR0cmlidXRlOiBmdW5jdGlvbihuYW1lKSB7CiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07CiAgICB9LAogICAgYWRkUGFyYW06IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7CiAgICAgIHRoaXMucGFyYW1zW25hbWVdID0gdmFsdWU7CiAgICB9LAogICAgZ2V0UGFyYW1zOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMucGFyYW1zOwogICAgfSwKICAgIGFkZFZhcmlhYmxlOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgICB0aGlzLnZhcmlhYmxlc1tuYW1lXSA9IHZhbHVlOwogICAgfSwKICAgIGdldFZhcmlhYmxlOiBmdW5jdGlvbihuYW1lKSB7CiAgICAgIHJldHVybiB0aGlzLnZhcmlhYmxlc1tuYW1lXTsKICAgIH0sCiAgICBnZXRWYXJpYWJsZXM6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy52YXJpYWJsZXM7CiAgICB9LAogICAgZ2V0VmFyaWFibGVQYWlyczogZnVuY3Rpb24oKSB7CiAgICAgIHZhciB2YXJpYWJsZVBhaXJzID0gbmV3IEFycmF5KCk7CiAgICAgIHZhciBrZXk7CiAgICAgIHZhciB2YXJpYWJsZXMgPSB0aGlzLmdldFZhcmlhYmxlcygpOwogICAgICBmb3IgKGtleSBpbiB2YXJpYWJsZXMpIHsKICAgICAgICB2YXJpYWJsZVBhaXJzLnB1c2goa2V5ICsgIj0iICsgdmFyaWFibGVzW2tleV0pOwogICAgICB9CiAgICAgIHJldHVybiB2YXJpYWJsZVBhaXJzOwogICAgfSwKICAgIGdldFNXRkhUTUw6IGZ1bmN0aW9uKCkgewogICAgICB2YXIgc3dmTm9kZSA9ICIiOwogICAgICBpZiAobmF2aWdhdG9yLnBsdWdpbnMgJiYgbmF2aWdhdG9yLm1pbWVUeXBlcyAmJiBuYXZpZ2F0b3IubWltZVR5cGVzLmxlbmd0aCkgewogICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgiZG9FeHByZXNzSW5zdGFsbCIpKSB7CiAgICAgICAgICB0aGlzLmFkZFZhcmlhYmxlKCJNTXBsYXllclR5cGUiLCAiUGx1Z0luIik7CiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnc3dmJywgdGhpcy54aVNXRlBhdGgpOwogICAgICAgIH0KICAgICAgICBzd2ZOb2RlID0gJzxlbWJlZCB0eXBlPSJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCIgc3JjPSInICsgdGhpcy5nZXRBdHRyaWJ1dGUoJ3N3ZicpICsgJyIgd2lkdGg9IicgKyB0aGlzLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSArICciIGhlaWdodD0iJyArIHRoaXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSArICciJzsKICAgICAgICBzd2ZOb2RlICs9ICcgaWQ9IicgKyB0aGlzLmdldEF0dHJpYnV0ZSgnaWQnKSArICciIG5hbWU9IicgKyB0aGlzLmdldEF0dHJpYnV0ZSgnaWQnKSArICciICc7CiAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMuZ2V0UGFyYW1zKCk7CiAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykgewogICAgICAgICAgc3dmTm9kZSArPSBba2V5XSArICc9IicgKyBwYXJhbXNba2V5XSArICciICc7CiAgICAgICAgfQogICAgICAgIHZhciBwYWlycyA9IHRoaXMuZ2V0VmFyaWFibGVQYWlycygpLmpvaW4oIiYiKTsKICAgICAgICBpZiAocGFpcnMubGVuZ3RoID4gMCkgewogICAgICAgICAgc3dmTm9kZSArPSAnZmxhc2h2YXJzPSInICsgcGFpcnMgKyAnIic7CiAgICAgICAgfQogICAgICAgIHN3Zk5vZGUgKz0gJy8+JzsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoImRvRXhwcmVzc0luc3RhbGwiKSkgewogICAgICAgICAgdGhpcy5hZGRWYXJpYWJsZSgiTU1wbGF5ZXJUeXBlIiwgIkFjdGl2ZVgiKTsKICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdzd2YnLCB0aGlzLnhpU1dGUGF0aCk7CiAgICAgICAgfQogICAgICAgIHN3Zk5vZGUgPSAnPG9iamVjdCBpZD0iJyArIHRoaXMuZ2V0QXR0cmlidXRlKCdpZCcpICsgJyIgY2xhc3NpZD0iY2xzaWQ6RDI3Q0RCNkUtQUU2RC0xMWNmLTk2QjgtNDQ0NTUzNTQwMDAwIiB3aWR0aD0iJyArIHRoaXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpICsgJyIgaGVpZ2h0PSInICsgdGhpcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpICsgJyI+JzsKICAgICAgICBzd2ZOb2RlICs9ICc8cGFyYW0gbmFtZT0ibW92aWUiIHZhbHVlPSInICsgdGhpcy5nZXRBdHRyaWJ1dGUoJ3N3ZicpICsgJyIgLz4nOwogICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLmdldFBhcmFtcygpOwogICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMpIHsKICAgICAgICAgIHN3Zk5vZGUgKz0gJzxwYXJhbSBuYW1lPSInICsga2V5ICsgJyIgdmFsdWU9IicgKyBwYXJhbXNba2V5XSArICciIC8+JzsKICAgICAgICB9CiAgICAgICAgdmFyIHBhaXJzID0gdGhpcy5nZXRWYXJpYWJsZVBhaXJzKCkuam9pbigiJiIpOwogICAgICAgIGlmIChwYWlycy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBzd2ZOb2RlICs9ICc8cGFyYW0gbmFtZT0iZmxhc2h2YXJzIiB2YWx1ZT0iJyArIHBhaXJzICsgJyIgLz4nOwogICAgICAgIH0KICAgICAgICBzd2ZOb2RlICs9ICI8L29iamVjdD4iOwogICAgICB9CiAgICAgIHJldHVybiBzd2ZOb2RlOwogICAgfSwKICAgIHdyaXRlOiBmdW5jdGlvbihlbGVtZW50SWQpIHsKICAgICAgaWYgKHRoaXMuZ2V0QXR0cmlidXRlKCd1c2VFeHByZXNzSW5zdGFsbCcpKSB7CiAgICAgICAgdmFyIGV4cHJlc3NJbnN0YWxsUmVxVmVyID0gbmV3IGRlY29uY2VwdC5QbGF5ZXJWZXJzaW9uKFs2LCAwLCA2NV0pOwogICAgICAgIGlmICh0aGlzLmluc3RhbGxlZFZlci52ZXJzaW9uSXNWYWxpZChleHByZXNzSW5zdGFsbFJlcVZlcikgJiYgIXRoaXMuaW5zdGFsbGVkVmVyLnZlcnNpb25Jc1ZhbGlkKHRoaXMuZ2V0QXR0cmlidXRlKCd2ZXJzaW9uJykpKSB7CiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZG9FeHByZXNzSW5zdGFsbCcsIHRydWUpOwogICAgICAgICAgdGhpcy5hZGRWYXJpYWJsZSgiTU1yZWRpcmVjdFVSTCIsIGVzY2FwZSh0aGlzLmdldEF0dHJpYnV0ZSgneGlSZWRpcmVjdFVybCcpKSk7CiAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IGRvY3VtZW50LnRpdGxlLnNsaWNlKDAsIDQ3KSArICIgLSBGbGFzaCBQbGF5ZXIgSW5zdGFsbGF0aW9uIjsKICAgICAgICAgIHRoaXMuYWRkVmFyaWFibGUoIk1NZG9jdGl0bGUiLCBkb2N1bWVudC50aXRsZSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICh0aGlzLnNraXBEZXRlY3QgfHwgdGhpcy5nZXRBdHRyaWJ1dGUoJ2RvRXhwcmVzc0luc3RhbGwnKSB8fCB0aGlzLmluc3RhbGxlZFZlci52ZXJzaW9uSXNWYWxpZCh0aGlzLmdldEF0dHJpYnV0ZSgndmVyc2lvbicpKSkgewogICAgICAgIHZhciBuID0gKHR5cGVvZiBlbGVtZW50SWQgPT0gJ3N0cmluZycpID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudElkKSA6IGVsZW1lbnRJZDsKICAgICAgICBuLmlubmVySFRNTCA9IHRoaXMuZ2V0U1dGSFRNTCgpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgncmVkaXJlY3RVcmwnKSAhPSAiIikgewogICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24ucmVwbGFjZSh0aGlzLmdldEF0dHJpYnV0ZSgncmVkaXJlY3RVcmwnKSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CiAgZGVjb25jZXB0LlNXRk9iamVjdFV0aWwuZ2V0UGxheWVyVmVyc2lvbiA9IGZ1bmN0aW9uKCkgewogICAgdmFyIFBsYXllclZlcnNpb24gPSBuZXcgZGVjb25jZXB0LlBsYXllclZlcnNpb24oWzAsIDAsIDBdKTsKICAgIGlmIChuYXZpZ2F0b3IucGx1Z2lucyAmJiBuYXZpZ2F0b3IubWltZVR5cGVzLmxlbmd0aCkgewogICAgICB2YXIgeCA9IG5hdmlnYXRvci5wbHVnaW5zWyJTaG9ja3dhdmUgRmxhc2giXTsKICAgICAgaWYgKHggJiYgeC5kZXNjcmlwdGlvbikgewogICAgICAgIFBsYXllclZlcnNpb24gPSBuZXcgZGVjb25jZXB0LlBsYXllclZlcnNpb24oeC5kZXNjcmlwdGlvbi5yZXBsYWNlKC8oW2EtekEtWl18XHMpKy8sICIiKS5yZXBsYWNlKC8oXHMrcnxccytiWzAtOV0rKS8sICIuIikuc3BsaXQoIi4iKSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIGF4byA9IG5ldyBBY3RpdmVYT2JqZWN0KCJTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaC43Iik7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIGF4byA9IG5ldyBBY3RpdmVYT2JqZWN0KCJTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaC42Iik7CiAgICAgICAgICBQbGF5ZXJWZXJzaW9uID0gbmV3IGRlY29uY2VwdC5QbGF5ZXJWZXJzaW9uKFs2LCAwLCAyMV0pOwogICAgICAgICAgYXhvLkFsbG93U2NyaXB0QWNjZXNzID0gImFsd2F5cyI7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgaWYgKFBsYXllclZlcnNpb24ubWFqb3IgPT0gNikgewogICAgICAgICAgICByZXR1cm4gUGxheWVyVmVyc2lvbjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGF4byA9IG5ldyBBY3RpdmVYT2JqZWN0KCJTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaCIpOwogICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgIH0KICAgICAgaWYgKGF4byAhPSBudWxsKSB7CiAgICAgICAgUGxheWVyVmVyc2lvbiA9IG5ldyBkZWNvbmNlcHQuUGxheWVyVmVyc2lvbihheG8uR2V0VmFyaWFibGUoIiR2ZXJzaW9uIikuc3BsaXQoIiAiKVsxXS5zcGxpdCgiLCIpKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIFBsYXllclZlcnNpb247CiAgfQogIGRlY29uY2VwdC5QbGF5ZXJWZXJzaW9uID0gZnVuY3Rpb24oYXJyVmVyc2lvbikgewogICAgdGhpcy5tYWpvciA9IGFyclZlcnNpb25bMF0gIT0gbnVsbCA/IHBhcnNlSW50KGFyclZlcnNpb25bMF0pIDogMDsKICAgIHRoaXMubWlub3IgPSBhcnJWZXJzaW9uWzFdICE9IG51bGwgPyBwYXJzZUludChhcnJWZXJzaW9uWzFdKSA6IDA7CiAgICB0aGlzLnJldiA9IGFyclZlcnNpb25bMl0gIT0gbnVsbCA/IHBhcnNlSW50KGFyclZlcnNpb25bMl0pIDogMDsKICB9CiAgZGVjb25jZXB0LlBsYXllclZlcnNpb24ucHJvdG90eXBlLnZlcnNpb25Jc1ZhbGlkID0gZnVuY3Rpb24oZnYpIHsKICAgIGlmICh0aGlzLm1ham9yIDwgZnYubWFqb3IpIHJldHVybiBmYWxzZTsKICAgIGlmICh0aGlzLm1ham9yID4gZnYubWFqb3IpIHJldHVybiB0cnVlOwogICAgaWYgKHRoaXMubWlub3IgPCBmdi5taW5vcikgcmV0dXJuIGZhbHNlOwogICAgaWYgKHRoaXMubWlub3IgPiBmdi5taW5vcikgcmV0dXJuIHRydWU7CiAgICBpZiAodGhpcy5yZXYgPCBmdi5yZXYpIHJldHVybiBmYWxzZTsKICAgIHJldHVybiB0cnVlOwogIH0KICBkZWNvbmNlcHQudXRpbCA9IHsKICAgIGdldFJlcXVlc3RQYXJhbWV0ZXI6IGZ1bmN0aW9uKHBhcmFtKSB7CiAgICAgIHZhciBxID0gZG9jdW1lbnQubG9jYXRpb24uc2VhcmNoIHx8IGRvY3VtZW50LmxvY2F0aW9uLmhhc2g7CiAgICAgIGlmIChxKSB7CiAgICAgICAgdmFyIHBhaXJzID0gcS5zdWJzdHJpbmcoMSkuc3BsaXQoIiYiKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpZiAocGFpcnNbaV0uc3Vic3RyaW5nKDAsIHBhaXJzW2ldLmluZGV4T2YoIj0iKSkgPT0gcGFyYW0pIHsKICAgICAgICAgICAgcmV0dXJuIHBhaXJzW2ldLnN1YnN0cmluZygocGFpcnNbaV0uaW5kZXhPZigiPSIpICsgMSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gIiI7CiAgICB9CiAgfQogIGRlY29uY2VwdC5TV0ZPYmplY3RVdGlsLmNsZWFudXBTV0ZzID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgb2JqZWN0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJPQkpFQ1QiKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykgewogICAgICBvYmplY3RzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgIGZvciAodmFyIHggaW4gb2JqZWN0c1tpXSkgewogICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0c1tpXVt4XSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBvYmplY3RzW2ldW3hdID0gZnVuY3Rpb24oKSB7fTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgaWYgKGRlY29uY2VwdC5TV0ZPYmplY3QuZG9QcmVwVW5sb2FkKSB7CiAgICBkZWNvbmNlcHQuU1dGT2JqZWN0VXRpbC5wcmVwVW5sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgIF9fZmxhc2hfdW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge307CiAgICAgIF9fZmxhc2hfc2F2ZWRVbmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7fTsKICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCJvbnVubG9hZCIsIGRlY29uY2VwdC5TV0ZPYmplY3RVdGlsLmNsZWFudXBTV0ZzKTsKICAgIH0KICAgIHdpbmRvdy5hdHRhY2hFdmVudCgib25iZWZvcmV1bmxvYWQiLCBkZWNvbmNlcHQuU1dGT2JqZWN0VXRpbC5wcmVwVW5sb2FkKTsKICB9CiAgaWYgKEFycmF5LnByb3RvdHlwZS5wdXNoID09IG51bGwpIHsKICAgIEFycmF5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oaXRlbSkgewogICAgICB0aGlzW3RoaXMubGVuZ3RoXSA9IGl0ZW07CiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDsKICAgIH0KICB9CiAgdmFyIGdldFF1ZXJ5UGFyYW1WYWx1ZSA9IGRlY29uY2VwdC51dGlsLmdldFJlcXVlc3RQYXJhbWV0ZXI7CiAgdmFyIEZsYXNoT2JqZWN0ID0gZGVjb25jZXB0LlNXRk9iamVjdDsKICB2YXIgU1dGT2JqZWN0ID0gZGVjb25jZXB0LlNXRk9iamVjdDsKICAvL3N3Zm9iamVjdC1taW4gZW5kCgogIC8vISEhbGliIGVuZCEhIQoKICB2YXIgJGZoID0gcm9vdC4kZmggfHwge307CiAgaWYgKHR5cGVvZiBmaF9hcHBfcHJvcHMgPT09ICJvYmplY3QiKSB7CiAgICAkZmguYXBwX3Byb3BzID0gZmhfYXBwX3Byb3BzOwogIH0KCiAgJGZoLmxlZ2FjeSA9IHt9OwoKICB2YXIgZGVmYXVsdGFyZ3MgPSB7CiAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHt9LAogICAgZmFpbHVyZTogZnVuY3Rpb24oKSB7fSwKICAgIHBhcmFtczoge30KICB9OwoKICB2YXIgaGFuZGxlYXJncyA9IGZ1bmN0aW9uKGluYXJncywgZGVmYXVsdHBhcmFtcywgYXBwbHl0bykgewogICAgdmFyIG91dGFyZ3MgPSBbbnVsbCwgbnVsbCwgbnVsbF07CiAgICB2YXIgb3JpZ2FyZ3MgPSBbbnVsbCwgbnVsbCwgbnVsbF07CiAgICB2YXIgbnVtYXJncyA9IGluYXJncy5sZW5ndGg7CgogICAgaWYgKDIgPCBudW1hcmdzKSB7CiAgICAgIG9yaWdhcmdzWzBdID0gaW5hcmdzW251bWFyZ3MgLSAzXTsKICAgICAgb3JpZ2FyZ3NbMV0gPSBpbmFyZ3NbbnVtYXJncyAtIDJdOwogICAgICBvcmlnYXJnc1syXSA9IGluYXJnc1tudW1hcmdzIC0gMV07CiAgICB9IGVsc2UgaWYgKDIgPT0gbnVtYXJncykgewogICAgICBvcmlnYXJnc1sxXSA9IGluYXJnc1swXTsKICAgICAgb3JpZ2FyZ3NbMl0gPSBpbmFyZ3NbMV07CiAgICB9IGVsc2UgaWYgKDEgPT0gbnVtYXJncykgewogICAgICBvcmlnYXJnc1syXSA9IGluYXJnc1swXTsKICAgIH0KCiAgICB2YXIgaSA9IDAsCiAgICAgIGogPSAwOwogICAgZm9yICg7IGkgPCAzOyBpKyspIHsKICAgICAgdmFyIGEgPSBvcmlnYXJnc1tpXTsKICAgICAgdmFyIHRhID0gdHlwZW9mIGE7CiAgICAgIC8vY29uc29sZS5sb2coJ2l0ZXIgaTonK2krJyBqOicraisnIHRhOicrdGEpOwogICAgICBpZiAoYSAmJiAwID09IGogJiYgKCdvYmplY3QnID09IHRhIHx8ICdib29sZWFuJyA9PSB0YSkpIHsKICAgICAgICAvL2NvbnNvbGUubG9nKCdvYmplY3QgaTonK2krJyBqOicraisnIHRhOicrdGEpOwogICAgICAgIG91dGFyZ3NbaisrXSA9IGE7CiAgICAgIH0gZWxzZSBpZiAoYSAmJiAnZnVuY3Rpb24nID09IHRhKSB7CiAgICAgICAgaiA9IDAgPT0gaiA/IDEgOiBqOwogICAgICAgIC8vY29uc29sZS5sb2coJ2Z1bmN0aW9uIGk6JytpKycgajonK2orJyB0YTonK3RhKTsKICAgICAgICBvdXRhcmdzW2orK10gPSBhOwogICAgICB9CiAgICB9CgogICAgaWYgKG51bGwgPT0gb3V0YXJnc1swXSkgewogICAgICBvdXRhcmdzWzBdID0gZGVmYXVsdHBhcmFtcyA/IGRlZmF1bHRwYXJhbXMgOiBkZWZhdWx0YXJncy5wYXJhbXM7CiAgICB9IGVsc2UgewogICAgICB2YXIgcGFyYW1zYXJnID0gb3V0YXJnc1swXTsKICAgICAgcGFyYW1zYXJnLl9kZWZhdWx0cyA9IFtdOwogICAgICBmb3IgKHZhciBuIGluIGRlZmF1bHRwYXJhbXMpIHsKICAgICAgICBpZiAoZGVmYXVsdHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShuKSkgewogICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNhcmdbbl0gPT09ICJ1bmRlZmluZWQiKSB7IC8vd2UgZG9uJ3Qgd2FudCB0byB1c2UgIXBhcmFtc2FyZ1tuXSBoZXJlIGJlY2F1c2UgdGhlIHBhcmFtZXRlciBjb3VsZCBleGlzdHMgaW4gdGhlIGFyZ3VtZW50IGFuZCBpdCBjb3VsZCBiZSBmYWxzZQogICAgICAgICAgICBwYXJhbXNhcmdbbl0gPSBkZWZhdWx0cGFyYW1zW25dOwogICAgICAgICAgICBwYXJhbXNhcmcuX2RlZmF1bHRzLnB1c2gobik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgb3V0YXJnc1sxXSA9IG51bGwgPT0gb3V0YXJnc1sxXSA/IGRlZmF1bHRhcmdzLnN1Y2Nlc3MgOiBvdXRhcmdzWzFdOwogICAgb3V0YXJnc1syXSA9IG51bGwgPT0gb3V0YXJnc1syXSA/IGRlZmF1bHRhcmdzLmZhaWx1cmUgOiBvdXRhcmdzWzJdOwoKICAgIGFwcGx5dG8ob3V0YXJnc1swXSwgb3V0YXJnc1sxXSwgb3V0YXJnc1syXSk7CiAgfQoKICB2YXIgZXZlbnRTdXBwb3J0ZWQgPSBmdW5jdGlvbihldmVudCkgewogICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7CiAgICByZXR1cm4gZXZlbnQgaW4gZWxlbWVudCB8fCBlbGVtZW50LnNldEF0dHJpYnV0ZSAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudCwgInJldHVybjsiKSB8fCBmYWxzZTsKICB9CgogIHZhciBfX2lzX3JlYWR5ID0gZmFsc2U7CiAgdmFyIF9fcmVhZHlfbGlzdCA9IFtdOwogIHZhciBfX3JlYWR5X2JvdW5kID0gZmFsc2U7CiAgdmFyIGJveHByZWZpeCA9ICIvYm94L3Nydi8xLjEvIjsKCiAgX2dldEhvc3RQcmVmaXggPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiAkZmguYXBwX3Byb3BzLmhvc3QgKyBib3hwcmVmaXg7CiAgfQoKICB2YXIgX19yZWFkeSA9IGZ1bmN0aW9uKCkgewogICAgaWYgKCFfX2lzX3JlYWR5KSB7CiAgICAgIF9faXNfcmVhZHkgPSB0cnVlOwogICAgICBpZiAoX19yZWFkeV9saXN0KSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHdoaWxlIChfX3JlYWR5X2xpc3RbMF0pIHsKICAgICAgICAgICAgX19yZWFkeV9saXN0LnNoaWZ0KCkuYXBwbHkoZG9jdW1lbnQsIFtdKTsKICAgICAgICAgIH0KCiAgICAgICAgfSBmaW5hbGx5IHsKCiAgICAgICAgfQogICAgICAgIF9fcmVhZHlfbGlzdCA9IG51bGw7CiAgICAgIH0KICAgIH0KICB9OwoKICB2YXIgX19iaW5kX3JlYWR5ID0gZnVuY3Rpb24oKSB7CiAgICBpZiAoX19yZWFkeV9ib3VuZCkgcmV0dXJuOwogICAgX19yZWFkeV9ib3VuZCA9IHRydWU7CgogICAgLy8gTW96aWxsYSwgT3BlcmEgYW5kIHdlYmtpdCBuaWdodGxpZXMgY3VycmVudGx5IHN1cHBvcnQgdGhpcyBldmVudAogICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHsKICAgICAgLy8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFjawogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGFyZ3VtZW50cy5jYWxsZWUsIGZhbHNlKTsKICAgICAgICBfX3JlYWR5KCk7CiAgICAgIH0sIGZhbHNlKTsKCiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgX19yZWFkeSwgZmFsc2UpOwoKICAgICAgLy8gSWYgSUUgZXZlbnQgbW9kZWwgaXMgdXNlZAogICAgfSBlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkgewogICAgICAvLyBlbnN1cmUgZmlyaW5nIGJlZm9yZSBvbmxvYWQsCiAgICAgIC8vIG1heWJlIGxhdGUgYnV0IHNhZmUgYWxzbyBmb3IgaWZyYW1lcwogICAgICBkb2N1bWVudC5hdHRhY2hFdmVudCgib25yZWFkeXN0YXRlY2hhbmdlIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIpIHsKICAgICAgICAgIGRvY3VtZW50LmRldGFjaEV2ZW50KCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCBhcmd1bWVudHMuY2FsbGVlKTsKICAgICAgICAgIF9fcmVhZHkoKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCJvbmxvYWQiLCBfX3JlYWR5KTsKCiAgICAgIC8vIElmIElFIGFuZCBub3QgYW4gaWZyYW1lCiAgICAgIC8vIGNvbnRpbnVhbGx5IGNoZWNrIHRvIHNlZSBpZiB0aGUgZG9jdW1lbnQgaXMgcmVhZHkKICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCAmJiB3aW5kb3cgPT0gd2luZG93LnRvcCkoZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKF9faXNfcmVhZHkpIHJldHVybjsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIC8vIElmIElFIGlzIHVzZWQsIHVzZSB0aGUgdHJpY2sgYnkgRGllZ28gUGVyaW5pCiAgICAgICAgICAvLyBodHRwOi8vamF2YXNjcmlwdC5ud2JveC5jb20vSUVDb250ZW50TG9hZGVkLwogICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKCJsZWZ0Iik7CiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgIHNldFRpbWVvdXQoYXJndW1lbnRzLmNhbGxlZSwgMCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBhbmQgZXhlY3V0ZSBhbnkgd2FpdGluZyBmdW5jdGlvbnMKICAgICAgICBfX3JlYWR5KCk7CiAgICAgIH0pKCk7CiAgICB9CiAgfTsKCiAgX19iaW5kX3JlYWR5KCk7CgogIC8vIGRlc3RpbmF0aW9uIGZ1bmN0aW9ucwogIHZhciBfbWFwU2NyaXB0TG9hZGVkID0gKHR5cGVvZiBnb29nbGUgIT0gInVuZGVmaW5lZCIpICYmICh0eXBlb2YgZ29vZ2xlLm1hcHMgIT0gInVuZGVmaW5lZCIpICYmICh0eXBlb2YgZ29vZ2xlLm1hcHMuTWFwICE9ICJ1bmRlZmluZWQiKTsKICAvL0NvbnRhaW5zIHRoZSB0YXJnZXQgZWxlbWVudCBhbmQgc3VjY2VzcyBmdW5jdGlvbiBmb3IgJGZoLm1hcCBmdW5jdGlvbnMKICB2YXIgX21hcExvYWRTdWNjZXNzUGFyYW1ldGVycyA9IFtdOwogIC8vRmxhZyB0byBzaG93IGlmIGEgbWFwIHNjcmlwdCBpcyBsb2FkaW5nIG9yIG5vdC4KICB2YXIgX21hcFNjcmlwdExvYWRpbmcgPSBmYWxzZTsgCiAgdmFyIF9sb2FkTWFwU2NyaXB0ID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogICAgdmFyIHByb3RvY29sID0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2w7CiAgICBwcm90b2NvbCA9IChwcm90b2NvbCA9PT0gImh0dHA6IiB8fCBwcm90b2NvbCA9PT0gImh0dHBzOiIpID8gcHJvdG9jb2wgOiAiaHR0cHM6IjsKICAgIHNjcmlwdC5zcmMgPSBwcm90b2NvbCArICIvL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2FwaS9qcz9zZW5zb3I9dHJ1ZSZjYWxsYmFjaz0kZmguX21hcExvYWRlZCI7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgfTsKCiAgdmFyIGF1ZGlvX29iaiA9IG51bGw7CiAgdmFyIGF1ZGlvX2lzX3BsYXlpbmcgPSBmYWxzZTsKCiAgJGZoLl9fZGVzdF9fID0gewogICAgc2VuZDogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBmKCdzZW5kX25vc3VwcG9ydCcpOwogICAgfSwKICAgIG5vdGlmeTogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBmKCdub3RpZnlfbm9zdXBwb3J0Jyk7CiAgICB9LAogICAgY29udGFjdHM6IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgICAgZignY29udGFjdHNfbm9zdXBwb3J0Jyk7CiAgICB9LAogICAgYWNjOiBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICAgIGYoJ2FjY19ub3N1cHBvcnQnKTsKICAgIH0sCiAgICBnZW86IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgICAgZignZ2VvX25vc3VwcG9ydCcpOwogICAgfSwKICAgIGNhbTogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBmKCdjYW1fbm9zdXBwb3J0Jyk7CiAgICB9LAogICAgZGV2aWNlOiBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICAgIGYoJ2RldmljZV9ub3N1cHBvcnQnKTsKICAgIH0sCiAgICBsaXN0ZW46IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgICAgZignbGlzdGVuX25vc3VwcG9ydCcpOwogICAgfSwKICAgIGhhbmRsZXJzOiBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICAgIGYoJ2hhbmRsZXJzX25vX3N1cHBvcnQnKTsKICAgIH0sCiAgICBmaWxlOiBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICAgIGYoJ2ZpbGVfbm9zdXBwb3J0Jyk7CiAgICB9LAogICAgcHVzaDogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBmKCdwdXNoX25vc3VwcG9ydCcpOwogICAgfSwKICAgIGVudjogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBzKHsKICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCwKICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgKICAgICAgfSk7CiAgICB9CgogICAgLAogICAgZGF0YTogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBpZiAoISRmaC5fcGVyc2lzdCkgewogICAgICAgICRmaC5fcGVyc2lzdCA9IG5ldyBQZXJzaXN0LlN0b3JlKCdGSCcgKyAkZmguYXBwX3Byb3BzLmFwcGlkLCB7CiAgICAgICAgICBzd2ZfcGF0aDogJy9zdGF0aWMvYy9zdGFydC9zd2YvcGVyc2lzdC5zd2YnCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmICghcC5rZXkpIHsKICAgICAgICBmKCdkYXRhX25va2V5Jyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYWN0cyA9IHsKICAgICAgICBsb2FkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICRmaC5fcGVyc2lzdC5nZXQocC5rZXksIGZ1bmN0aW9uKG9rLCB2YWwpIHsKICAgICAgICAgICAgb2sgPyBzKHsKICAgICAgICAgICAgICBrZXk6IHAua2V5LAogICAgICAgICAgICAgIHZhbDogdmFsCiAgICAgICAgICAgIH0pIDogcyh7CiAgICAgICAgICAgICAga2V5OiBwLmtleSwKICAgICAgICAgICAgICB2YWw6IG51bGwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIHNhdmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCFwLnZhbCkgewogICAgICAgICAgICBmKCdkYXRhX25vdmFsJyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICRmaC5fcGVyc2lzdC5zZXQocC5rZXksIHAudmFsKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgZignZGF0YV9lcnJvcicsIHt9LCBwKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgcygpOwogICAgICAgIH0sCiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICRmaC5fcGVyc2lzdC5yZW1vdmUocC5rZXksIGZ1bmN0aW9uKG9rLCB2YWwpIHsKICAgICAgICAgICAgb2sgPyBzKHsKICAgICAgICAgICAgICBrZXk6IHAua2V5LAogICAgICAgICAgICAgIHZhbDogdmFsCiAgICAgICAgICAgIH0pIDogcyh7CiAgICAgICAgICAgICAga2V5OiBwLmtleSwKICAgICAgICAgICAgICB2YWw6IG51bGwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH07CgogICAgICBhY3RzW3AuYWN0XSA/IGFjdHNbcC5hY3RdKCkgOiBmKCdkYXRhX2JhZGFjdCcsIHApOwogICAgfQoKICAgICwKICAgIGxvZzogZnVuY3Rpb24ocCwgcywgZikgewogICAgICB0eXBlb2YgY29uc29sZSA9PT0gInVuZGVmaW5lZCIgPyBmKCdsb2dfbm9zdXBwb3J0JykgOiBjb25zb2xlLmxvZyhwLm1lc3NhZ2UpOwogICAgfQoKICAgICwKICAgIG9yaTogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBpZiAodHlwZW9mIHAuYWN0ID09ICJ1bmRlZmluZWQiIHx8IHAuYWN0ID09ICJsaXN0ZW4iKSB7CiAgICAgICAgaWYgKGV2ZW50U3VwcG9ydGVkKCdvbm9yaWVudGF0aW9uY2hhbmdlJykpIHsKICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHMsIGZhbHNlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZignb3JpX25vc3VwcG9ydCcsIHt9LCBwKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocC5hY3QgPT0gInNldCIpIHsKICAgICAgICBpZiAoIXAudmFsdWUpIHsKICAgICAgICAgIGYoJ29yaV9ub192YWx1ZScsIHt9LCBwKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKHAudmFsdWUgPT0gInBvcnRyYWl0IikgewogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXS5zdHlsZVsnLW1vei10cmFuc2Zvcm0nXSA9ICIiOwogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXS5zdHlsZVsnLXdlYmtpdC10cmFuc2Zvcm0nXSA9ICIiOwogICAgICAgICAgcyh7CiAgICAgICAgICAgIG9yaWVudGF0aW9uOiAncG9ydHJhaXQnCiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXS5zdHlsZVsnLW1vei10cmFuc2Zvcm0nXSA9ICdyb3RhdGUoOTBkZWcpJzsKICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF0uc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtJ10gPSAncm90YXRlKDkwZGVnKSc7CiAgICAgICAgICBzKHsKICAgICAgICAgICAgb3JpZW50YXRpb246ICdsYW5kc2NhcGUnCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZignb3JpX2JhZGFjdCcsIHt9LCBwKTsKICAgICAgfQogICAgfSwKICAgIG1hcDogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBpZiAoIXAudGFyZ2V0KSB7CiAgICAgICAgZignbWFwX25vdGFyZ2V0Jywge30sIHApOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAoIXAubGF0KSB7CiAgICAgICAgZignbWFwX25vbGF0aXR1ZGUnLCB7fSwgcCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmICghcC5sb24pIHsKICAgICAgICBmKCdtYXBfbm9sb2dpdHVkZScsIHt9LCBwKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIHRhcmdldCA9IHAudGFyZ2V0OwogICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gInN0cmluZyIpIHsKICAgICAgICB2YXIgdGFyZ2V0X2RvbSA9IG51bGw7CiAgICAgICAgaWYgKHR5cGVvZiBqUXVlcnkgIT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciBqcV9vYmogPSBqUXVlcnkodGFyZ2V0KTsKICAgICAgICAgICAgaWYgKGpxX29iai5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgdGFyZ2V0X2RvbSA9IGpxX29ialswXTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICB0YXJnZXRfZG9tID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKG51bGwgPT0gdGFyZ2V0X2RvbSkgewogICAgICAgICAgdGFyZ2V0X2RvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldCk7CiAgICAgICAgfQogICAgICAgIHRhcmdldCA9IHRhcmdldF9kb207CiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldCA9PT0gIm9iamVjdCIpIHsKICAgICAgICBpZiAodGFyZ2V0Lm5vZGVUeXBlID09PSAxICYmIHR5cGVvZiB0YXJnZXQubm9kZU5hbWUgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAvLyBBIERPTSBFbGVtZW50LCBkbyBub3RoaW5nCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vQSBqUXVlcnkgbm9kZQogICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0WzBdOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0YXJnZXQgPSBudWxsOwogICAgICB9CgogICAgICBpZiAoIXRhcmdldCkgewogICAgICAgIGYoJ21hcF9ub2NvbnRhaW5lcicsIHt9LCBwKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCgoKCiAgICAgIGlmICghX21hcFNjcmlwdExvYWRlZCkgewoKICAgICAgICAvL1F1ZXVlIHRoZSBzdWNjZXNzIGZ1bmN0aW9uCiAgICAgICAgaWYodHlwZW9mKHMpID09PSAnZnVuY3Rpb24nKXsKICAgICAgICAgICAgX21hcExvYWRTdWNjZXNzUGFyYW1ldGVycy5wdXNoKHt0YXJnZXQ6IHRhcmdldCwgc3VjY2Vzc0Z1bmN0aW9uOiBzLCBtT3B0aW9uczogcH0pOyAgICAKICAgICAgICB9CiAgICAgICAgCgogICAgICAgICRmaC5fbWFwTG9hZGVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBfbWFwU2NyaXB0TG9hZGVkID0gdHJ1ZTsKICAgICAgICAgIHZhciBtYXBMb2FkU3VjY2Vzc1BhcmFtZXRlciA9IF9tYXBMb2FkU3VjY2Vzc1BhcmFtZXRlcnMuc2hpZnQoKTsKCiAgICAgICAgICB3aGlsZSh0eXBlb2YobWFwTG9hZFN1Y2Nlc3NQYXJhbWV0ZXIpICE9PSAndW5kZWZpbmVkJyl7CiAgICAgICAgICAgIHZhciBtT3B0aW9ucyA9IG1hcExvYWRTdWNjZXNzUGFyYW1ldGVyLm1PcHRpb25zOwogICAgICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHt9OwogICAgICAgICAgICBtYXBPcHRpb25zLnpvb20gPSBtT3B0aW9ucy56b29tID8gbU9wdGlvbnMuem9vbSA6IDg7CiAgICAgICAgICAgIG1hcE9wdGlvbnMuY2VudGVyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhtT3B0aW9ucy5sYXQsIG1PcHRpb25zLmxvbik7CiAgICAgICAgICAgIG1hcE9wdGlvbnMubWFwVHlwZUlkID0gZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVA7CgogICAgICAgICAgICB2YXIgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChtYXBMb2FkU3VjY2Vzc1BhcmFtZXRlci50YXJnZXQsIG1hcE9wdGlvbnMpOwogICAgICAgICAgICBtYXBMb2FkU3VjY2Vzc1BhcmFtZXRlci5zdWNjZXNzRnVuY3Rpb24oe21hcDogbWFwfSk7ICAKICAgICAgICAgICAgbWFwTG9hZFN1Y2Nlc3NQYXJhbWV0ZXIgPSBfbWFwTG9hZFN1Y2Nlc3NQYXJhbWV0ZXJzLnNoaWZ0KCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgaWYoIV9tYXBTY3JpcHRMb2FkaW5nKXsKICAgICAgICAgICAgX21hcFNjcmlwdExvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICBfbG9hZE1hcFNjcmlwdCgpOyAgICAKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy9hZnRlciAyMCBzZWNzLCBpZiB0aGUgbWFwIHNjcmlwdCBpcyBzdGlsbCBub3QgbG9hZGVkLCBydW4gdGhlIGZhaWwgZnVuY3Rpb24KICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCFfbWFwU2NyaXB0TG9hZGVkKSB7CiAgICAgICAgICAgIGYoJ21hcF90aW1lb3V0Jywge30sIHApOwogICAgICAgICAgfQogICAgICAgIH0sIDIwMDAwKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHt9OwogICAgICAgIG1hcE9wdGlvbnMuem9vbSA9IHAuem9vbSA/IHAuem9vbSA6IDg7CiAgICAgICAgbWFwT3B0aW9ucy5jZW50ZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKHAubGF0LCBwLmxvbik7CiAgICAgICAgbWFwT3B0aW9ucy5tYXBUeXBlSWQgPSBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUDsKICAgICAgICB2YXIgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcCh0YXJnZXQsIG1hcE9wdGlvbnMpOwogICAgICAgIHMoewogICAgICAgICAgbWFwOiBtYXAKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgICwKICAgIGF1ZGlvOiBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICAgIGlmICghYXVkaW9fb2JqID09IG51bGwgJiYgcC5hY3QgPT0gInBsYXkiICYmICghcC5wYXRoIHx8IHAucGF0aCA9PSAiIikpIHsKICAgICAgICBmKCdub19hdWRpb19wYXRoJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciBhY3RzID0gewogICAgICAgICdwbGF5JzogZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAobnVsbCA9PSBhdWRpb19vYmopIHsKICAgICAgICAgICAgYXVkaW9fb2JqID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYXVkaW8iKTsKICAgICAgICAgICAgaWYgKCEoKGF1ZGlvX29iai5wbGF5KSA/IHRydWUgOiBmYWxzZSkpIHsKICAgICAgICAgICAgICBmKCdhdWRpb19ub3Rfc3VwcG9ydCcpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocC50eXBlKSB7CiAgICAgICAgICAgICAgdmFyIGNhbnBsYXkgPSBhdWRpb19vYmouY2FuUGxheVR5cGUocC50eXBlKTsKICAgICAgICAgICAgICBpZiAoY2FucGxheSA9PSAibm8iIHx8IGNhbnBsYXkgPT0gIiIpIHsKICAgICAgICAgICAgICAgIGYoImF1ZGlvX3R5cGVfbm90X3N1cHBvcnRlZCIpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBhdWRpb19vYmouc3JjID0gcC5wYXRoOwogICAgICAgICAgICBpZiAocC5jb250cm9scykgewogICAgICAgICAgICAgIGF1ZGlvX29iai5jb250cm9scyA9ICJjb250cm9scyI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHAuYXV0b3BsYXkpIHsKICAgICAgICAgICAgICBhdWRpb19vYmouYXV0b3BsYXkgPSAiYXV0b3BsYXkiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwLmxvb3ApIHsKICAgICAgICAgICAgICBhdWRpb19vYmoubG9vcCA9ICJsb29wIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGF1ZGlvX29iaik7CiAgICAgICAgICAgIGF1ZGlvX29iai5wbGF5KCk7CiAgICAgICAgICAgIGF1ZGlvX2lzX3BsYXlpbmcgPSB0cnVlOwogICAgICAgICAgICBzKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvL3BsYXlpbmcgYSBuZXcgYXVkaW8KICAgICAgICAgICAgaWYgKHAucGF0aCAmJiAocC5wYXRoICE9IGF1ZGlvX29iai5zcmMpKSB7CiAgICAgICAgICAgICAgaWYgKGF1ZGlvX2lzX3BsYXlpbmcpIHsKICAgICAgICAgICAgICAgIGFjdHNbJ3N0b3AnXSh0cnVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYWN0c1sncGxheSddKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy9yZXN1bWUgdGhlIGV4aXN0aW5nIGF1ZGlvCiAgICAgICAgICAgICAgaWYgKCFhdWRpb19pc19wbGF5aW5nKSB7CiAgICAgICAgICAgICAgICBhdWRpb19vYmoucGxheSgpOwogICAgICAgICAgICAgICAgYXVkaW9faXNfcGxheWluZyA9IHRydWU7CiAgICAgICAgICAgICAgICBzKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgJ3BhdXNlJzogZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAobnVsbCAhPSBhdWRpb19vYmogJiYgYXVkaW9faXNfcGxheWluZykgewogICAgICAgICAgICBpZiAodHlwZW9mIGF1ZGlvX29iai5wYXVzZSA9PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgYXVkaW9fb2JqLnBhdXNlKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGF1ZGlvX29iai5zdG9wID09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICBhdWRpb19vYmouc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGF1ZGlvX2lzX3BsYXlpbmcgPSBmYWxzZTsKICAgICAgICAgICAgcygpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZignbm9fYXVkaW9fcGxheWluZycpOwogICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgICdzdG9wJzogZnVuY3Rpb24obm9jYWxsYmFjaykgewogICAgICAgICAgaWYgKG51bGwgIT0gYXVkaW9fb2JqKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgYXVkaW9fb2JqLnN0b3AgPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgIGF1ZGlvX29iai5zdG9wKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGF1ZGlvX29iai5wYXVzZSA9PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgYXVkaW9fb2JqLnBhdXNlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhdWRpb19vYmopOwogICAgICAgICAgICBhdWRpb19vYmogPSBudWxsOwogICAgICAgICAgICBhdWRpb19pc19wbGF5aW5nID0gZmFsc2U7CiAgICAgICAgICAgIGlmICghbm9jYWxsYmFjaykgewogICAgICAgICAgICAgIHMoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZignbm9fYXVkaW8nKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGFjdHNbcC5hY3RdID8gYWN0c1twLmFjdF0oKSA6IGYoJ2RhdGFfYmFkYWN0JywgcCk7CiAgICB9CgogICAgLAogICAgd2VidmlldzogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBmKCd3ZWJ2aWV3X25vc3VwcG9ydCcpOwogICAgfSwKCiAgICByZWFkeTogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBfX2JpbmRfcmVhZHkoKTsKICAgICAgaWYgKF9faXNfcmVhZHkpIHsKICAgICAgICBzLmFwcGx5KGRvY3VtZW50LCBbXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgX19yZWFkeV9saXN0LnB1c2gocyk7CiAgICAgIH0KICAgIH0KICB9CgogICRmaC5zZW5kID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywgewogICAgICB0eXBlOiAnZW1haWwnCiAgICB9LCAkZmguX19kZXN0X18uc2VuZCk7CiAgfQoKICAkZmgubm90aWZ5ID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywgewogICAgICB0eXBlOiAndmlicmF0ZScKICAgIH0sICRmaC5fX2Rlc3RfXy5ub3RpZnkpOwogIH0KCiAgJGZoLmNvbnRhY3RzID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywgewogICAgICBhY3Q6ICdsaXN0JwogICAgfSwgJGZoLl9fZGVzdF9fLmNvbnRhY3RzKTsKICB9CgogICRmaC5hY2MgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7CiAgICAgIGFjdDogJ3JlZ2lzdGVyJywKICAgICAgaW50ZXJ2YWw6IDAKICAgIH0sICRmaC5fX2Rlc3RfXy5hY2MpOwogIH0KCiAgJGZoLmdlbyA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHsKICAgICAgYWN0OiAncmVnaXN0ZXInLAogICAgICBpbnRlcnZhbDogMAogICAgfSwgJGZoLl9fZGVzdF9fLmdlbyk7CiAgfQoKICAkZmguY2FtID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywgewogICAgICBhY3Q6ICdwaWN0dXJlJwogICAgfSwgJGZoLl9fZGVzdF9fLmNhbSk7CiAgfQoKICAkZmguZGF0YSA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHsKICAgICAgYWN0OiAnbG9hZCcKICAgIH0sICRmaC5fX2Rlc3RfXy5kYXRhKTsKICB9CgogICRmaC5sb2cgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7CiAgICAgIG1lc3NhZ2U6ICdub25lJwogICAgfSwgJGZoLl9fZGVzdF9fLmxvZyk7CiAgfQoKICAkZmguZGV2aWNlID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywge30sICRmaC5fX2Rlc3RfXy5kZXZpY2UpOwogIH0KCiAgJGZoLmxpc3RlbiA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHsKICAgICAgYWN0OiAnYWRkJwogICAgfSwgJGZoLl9fZGVzdF9fLmxpc3Rlbik7CiAgfQoKICAkZmgub3JpID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywge30sICRmaC5fX2Rlc3RfXy5vcmkpOwogIH0KCiAgJGZoLm1hcCA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHt9LCAkZmguX19kZXN0X18ubWFwKTsKICB9CgogICRmaC5hdWRpbyA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHt9LCAkZmguX19kZXN0X18uYXVkaW8pOwogIH0KCiAgJGZoLndlYnZpZXcgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7fSwgJGZoLl9fZGVzdF9fLndlYnZpZXcpOwogIH0KCiAgJGZoLnJlYWR5ID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywge30sICRmaC5fX2Rlc3RfXy5yZWFkeSk7CiAgfTsKCiAgJGZoLmhhbmRsZXJzID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywgewogICAgICB0eXBlOiAnYmFjaycKICAgIH0sICRmaC5fX2Rlc3RfXy5oYW5kbGVycyk7CiAgfTsKCiAgJGZoLmZpbGUgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7CiAgICAgIGFjdDogJ3VwbG9hZCcKICAgIH0sICRmaC5fX2Rlc3RfXy5maWxlKTsKICB9OwoKICAkZmgucHVzaCA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHt9LCAkZmguX19kZXN0X18ucHVzaCk7CiAgfTsKCiAgLy8gbmV3IGZ1bmN0aW9ucwogICRmaC5lbnYgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7fSwgZnVuY3Rpb24ocCwgcywgZikgewogICAgICAvLyBmbGF0IHByb3BlcnR5IHNldCAtIG5vIHN1YiBvYmplY3RzIQogICAgICAkZmguX19kZXN0X18uZW52KHt9LCBmdW5jdGlvbihkZXN0RW52KSB7CiAgICAgICAgZGVzdEVudi5hcHBsaWNhdGlvbiA9ICRmaC5hcHBfcHJvcHMuYXBwaWQ7CiAgICAgICAgaWYgKCRmaC5fZ2V0RGV2aWNlSWQpIHsKICAgICAgICAgIGRlc3RFbnYudXVpZCA9ICRmaC5fZ2V0RGV2aWNlSWQoKTsKICAgICAgICB9CiAgICAgICAgZGVzdEVudi5hZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJ3Vua25vd24nOwogICAgICAgIHMoZGVzdEVudik7CiAgICAgIH0pOwogICAgfSk7CiAgfQoKICAkZmguZGV2aWNlID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywge30sIGZ1bmN0aW9uKHAsIHMsIGYpIHsKCiAgICB9KTsKICB9CgoKICAvLyBkZWZhdWx0czogCiAgLy8gICAge2FjdDonZ2V0J30gLT4ge2dlb2lwOnsuLi59fQogIC8vICBmYWlsdXJlczogZ2VvaXBfYmFkYWN0CiAgLy8KICAkZmguZ2VvaXAgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7CiAgICAgIGFjdDogJ2dldCcKICAgIH0sIGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgICAgaWYgKCdnZXQnID09IHAuYWN0KSB7CiAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICBpbnN0YW5jZTogJGZoLmFwcF9wcm9wcy5hcHBpZCwKICAgICAgICAgIGRvbWFpbjogJGZoLmNsb3VkX3Byb3BzLmRvbWFpbgogICAgICAgIH0KICAgICAgICAkZmguX19hamF4KHsKICAgICAgICAgICJ1cmwiOiBfZ2V0SG9zdFByZWZpeCgpICsgImFjdC93aWQvZ2VvaXAvcmVzb2x2ZSIsCiAgICAgICAgICAidHlwZSI6ICJQT1NUIiwKICAgICAgICAgICJkYXRhIjogSlNPTi5zdHJpbmdpZnkoZGF0YSksCiAgICAgICAgICAic3VjY2VzcyI6IGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0CiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gcmVzLmdlb2lwKSB7CiAgICAgICAgICAgICAgcmVzW25dID0gcmVzWydnZW9pcCddW25dOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHMocmVzKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmKCdnZW9pcF9iYWRhY3QnLCBwKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgJGZoLndlYiA9IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7CiAgICAgIG1ldGhvZDogJ0dFVCcKICAgIH0sIGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgICAgaWYgKCFwLnVybCkgewogICAgICAgIGYoJ2JhZF91cmwnKTsKICAgICAgfQoKICAgICAgaWYgKHAuaXNfbG9jYWwpIHsKICAgICAgICAkZmguX19hamF4KHsKICAgICAgICAgIHVybDogcC51cmwsCiAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgIGRhdGFUeXBlOiAiaHRtbCIsCiAgICAgICAgICAvL3hocjogJGZoLnhociwKICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgdmFyIHJlcyA9IHt9OwogICAgICAgICAgICByZXMuc3RhdHVzID0gMjAwOwogICAgICAgICAgICByZXMuYm9keSA9IGRhdGE7CiAgICAgICAgICAgIHMocmVzKTsKICAgICAgICAgIH0sCiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGYoKTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICB9IGVsc2UgewogICAgICAgICRmaC5fX2FqYXgoewogICAgICAgICAgInVybCI6IF9nZXRIb3N0UHJlZml4KCkgKyAiYWN0L3dpZC93ZWIiLAogICAgICAgICAgInR5cGUiOiAiUE9TVCIsCiAgICAgICAgICAiZGF0YSI6IEpTT04uc3RyaW5naWZ5KHApLAogICAgICAgICAgInN1Y2Nlc3MiOiBmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgcyhyZXMpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKICB9OwoKICAkZmguX193ZWJ2aWV3X3dpbiA9IHVuZGVmaW5lZDsKICAkZmguX19kZXN0X18ud2VidmlldyA9IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgIGlmICghKCdhY3QnIGluIHApIHx8IHAuYWN0ID09PSAnb3BlbicpIHsKICAgICAgaWYgKCFwLnVybCkgewogICAgICAgIGYoJ25vX3VybCcpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB2YXIgb2xkX3VybCA9IHAudXJsOwogICAgICAkZmguX193ZWJ2aWV3X3dpbiA9IHdpbmRvdy5vcGVuKHAudXJsLCAnX2JsYW5rJyk7CiAgICAgIHMoIm9wZW5lZCIpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKHAuYWN0ID09PSAnY2xvc2UnKSB7CiAgICAgICAgaWYgKHR5cGVvZiAkZmguX193ZWJ2aWV3X3dpbiAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgJGZoLl9fd2Vidmlld193aW4uY2xvc2UoKTsKICAgICAgICAgICRmaC5fX3dlYnZpZXdfd2luID0gdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgICBzKCJjbG9zZWQiKTsKICAgICAgfQogICAgfQogIH07CgogIGlmICh0eXBlb2Yod2luZG93LlBob25lR2FwKSAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mKHdpbmRvdy5jb3Jkb3ZhKSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICRmaC5fcmVhZHlDYWxsYmFja3MgPSBbXTsKICAgICRmaC5fcmVhZHlTdGF0ZSA9IGZhbHNlOwogICAgJGZoLl9fZGVzdF9fLnJlYWR5ID0gZnVuY3Rpb24ocCwgcywgZikgewogICAgICBpZiAoJGZoLl9yZWFkeVN0YXRlKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHMoKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygiRXJyb3IgZHVyaW5nICRmaC5yZWFkeS4gU2tpcC4gRXJyb3IgPSAiICsgZS5tZXNzYWdlKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJGZoLl9yZWFkeUNhbGxiYWNrcy5wdXNoKHMpOwogICAgICB9CiAgICB9OwogIH0KCiAgJGZoLl9fZGVzdF9fLmdlbyA9IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yLmdlb2xvY2F0aW9uICE9ICd1bmRlZmluZWQnKSB7CiAgICAgIGlmICghcC5hY3QgfHwgcC5hY3QgPT0gInJlZ2lzdGVyIikgewogICAgICAgIGlmICgkZmguX19kZXN0X18uX2dlb1dhdGNoZXIpIHsKICAgICAgICAgIGYoJ2dlb19pbnVzZScsIHt9LCBwKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKHAuaW50ZXJ2YWwgPT0gMCkgewogICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihmdW5jdGlvbihwb3NpdGlvbikgewogICAgICAgICAgICB2YXIgY29vcmRzID0gcG9zaXRpb24uY29vcmRzOwogICAgICAgICAgICB2YXIgcmVzZGF0YSA9IHsKICAgICAgICAgICAgICBsb246IGNvb3Jkcy5sb25naXR1ZGUsCiAgICAgICAgICAgICAgbGF0OiBjb29yZHMubGF0aXR1ZGUsCiAgICAgICAgICAgICAgYWx0OiBjb29yZHMuYWx0aXR1ZGUsCiAgICAgICAgICAgICAgYWNjOiBjb29yZHMuYWNjdXJhY3ksCiAgICAgICAgICAgICAgaGVhZDogY29vcmRzLmhlYWRpbmcsCiAgICAgICAgICAgICAgc3BlZWQ6IGNvb3Jkcy5zcGVlZCwKICAgICAgICAgICAgICB3aGVuOiBwb3NpdGlvbi50aW1lc3RhbXAKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcyhyZXNkYXRhKTsKICAgICAgICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmKCdlcnJvcl9nZW8nLCB7fSwgcCk7CiAgICAgICAgICB9KQogICAgICAgIH07CiAgICAgICAgaWYgKHAuaW50ZXJ2YWwgPiAwKSB7CiAgICAgICAgICB2YXIgaW50ZXJuYWxXYXRjaGVyID0gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24oZnVuY3Rpb24ocG9zaXRpb24pIHsKICAgICAgICAgICAgdmFyIGNvb3JkcyA9IHBvc2l0aW9uLmNvb3JkczsKICAgICAgICAgICAgdmFyIHJlc2RhdGEgPSB7CiAgICAgICAgICAgICAgbG9uOiBjb29yZHMubG9uZ2l0dWRlLAogICAgICAgICAgICAgIGxhdDogY29vcmRzLmxhdGl0dWRlLAogICAgICAgICAgICAgIGFsdDogY29vcmRzLmFsdGl0dWRlLAogICAgICAgICAgICAgIGFjYzogY29vcmRzLmFjY3VyYWN5LAogICAgICAgICAgICAgIGhlYWQ6IGNvb3Jkcy5oZWFkaW5nLAogICAgICAgICAgICAgIHNwZWVkOiBjb29yZHMuc3BlZWQsCiAgICAgICAgICAgICAgd2hlbjogcG9zaXRpb24udGltZXN0YW1wCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHMocmVzZGF0YSk7CiAgICAgICAgICB9LCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZignZXJyb3JfZ2VvJywge30sIHApOwogICAgICAgICAgfSwgewogICAgICAgICAgICBmcmVxdWVuY3k6IHAuaW50ZXJ2YWwKICAgICAgICAgIH0pOwogICAgICAgICAgJGZoLl9fZGVzdF9fLl9nZW9XYXRjaGVyID0gaW50ZXJuYWxXYXRjaGVyOwogICAgICAgIH07CiAgICAgIH0gZWxzZSBpZiAocC5hY3QgPT0gInVucmVnaXN0ZXIiKSB7CiAgICAgICAgaWYgKCRmaC5fX2Rlc3RfXy5fZ2VvV2F0Y2hlcikgewogICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2goJGZoLl9fZGVzdF9fLl9nZW9XYXRjaGVyKTsKICAgICAgICAgICRmaC5fX2Rlc3RfXy5fZ2VvV2F0Y2hlciA9IHVuZGVmaW5lZDsKICAgICAgICB9OwogICAgICAgIHMoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmKCdnZW9fYmFkYWN0Jywge30sIHApOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmKCdnZW9fbm9zdXBwb3J0Jywge30sIHApOwogICAgfQogIH07CgogICRmaC5fX2Rlc3RfXy5hY2MgPSBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICBzKHsKICAgICAgeDogKE1hdGgucmFuZG9tKCkgKiA0KSAtIDIsCiAgICAgIHk6IChNYXRoLnJhbmRvbSgpICogNCkgLSAyLAogICAgICB6OiAoTWF0aC5yYW5kb20oKSAqIDQpIC0gMiwKICAgICAgd2hlbjogbmV3IERhdGUoKS5nZXRUaW1lKCkKICAgIH0pOwogIH0KCiAgcm9vdC4kZmggPSAkZmg7Cgp9KSh0aGlzKTs=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 00:14:14 GMT",
                    "Content-Length": "64341",
                    "Date": "Fri, 07 Nov 2014 00:14:15 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}