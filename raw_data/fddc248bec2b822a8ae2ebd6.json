{
    "url": "http://localhost:9999/qrantine/Hackbone/build/hackbone.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.href</b> and written to <b>location.replace()</b> via the following statements:<ul><li>var href = location.href.replace(/(javascript:|#).*$/, '');</li><li>location.replace(href + '#' + fragment);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/qrantine/Hackbone/build/hackbone.js",
                "path": "/qrantine/Hackbone/build/hackbone.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9xcmFudGluZS9IYWNrYm9uZS9idWlsZC9oYWNrYm9uZS5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogODAzNjMNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMDI6NTY6NDYgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDAyOjU2OjQ2IEdNVA0KDQovKioKICogSGFja2JvbmUgLSAwLjUuMAogKi8KKGZ1bmN0aW9uICgpIHsKCiAgICAvLyBJbml0aWFsIFNldHVwCiAgICAvLyAtLS0tLS0tLS0tLS0tCiAgICAKICAgIC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBgZXhwb3J0c2AKICAgIC8vIG9uIHRoZSBzZXJ2ZXIpLgogICAgdmFyIHJvb3QgPSB0aGlzOwogICAgCiAgICAvLyBTYXZlIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYEhhY2tib25lYCB2YXJpYWJsZSwgc28gdGhhdCBpdCBjYW4gYmUKICAgIC8vIHJlc3RvcmVkIGxhdGVyIG9uLCBpZiBgbm9Db25mbGljdGAgaXMgdXNlZC4KICAgIHZhciBwcmV2aW91c0hhY2tib25lID0gcm9vdC5IYWNrYm9uZTsKICAgIAogICAgLy8gQ3JlYXRlIGxvY2FsIHJlZmVyZW5jZXMgdG8gYXJyYXkgbWV0aG9kcyB3ZSdsbCB3YW50IHRvIHVzZSBsYXRlci4KICAgIHZhciBhcnJheSA9IFtdOwogICAgdmFyIHB1c2ggPSBhcnJheS5wdXNoOwogICAgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7CiAgICB2YXIgc3BsaWNlID0gYXJyYXkuc3BsaWNlOwogICAgCiAgICAvLyBUaGUgdG9wLWxldmVsIG5hbWVzcGFjZS4gQWxsIHB1YmxpYyBIYWNrYm9uZSBjbGFzc2VzIGFuZCBtb2R1bGVzIHdpbGwKICAgIC8vIGJlIGF0dGFjaGVkIHRvIHRoaXMuIEV4cG9ydGVkIGZvciBib3RoIHRoZSBicm93c2VyIGFuZCB0aGUgc2VydmVyLgogICAgdmFyIEhhY2tib25lOwogICAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIEhhY2tib25lID0gZXhwb3J0czsKICAgIH0gZWxzZSB7CiAgICAgICAgSGFja2JvbmUgPSByb290LkhhY2tib25lID0ge307CiAgICB9CiAgICAKICAgIC8vIEN1cnJlbnQgdmVyc2lvbiBvZiB0aGUgbGlicmFyeS4gS2VlcCBpbiBzeW5jIHdpdGggYHBhY2thZ2UuanNvbmAuCiAgICBIYWNrYm9uZS5WRVJTSU9OID0gJzAuNS4wJzsKICAgIAogICAgLy8gUmVxdWlyZSBVbmRlcnNjb3JlLCBpZiB3ZSdyZSBvbiB0aGUgc2VydmVyLCBhbmQgaXQncyBub3QgYWxyZWFkeSBwcmVzZW50LgogICAgdmFyIF8gPSByb290Ll87CiAgICBpZiAoIV8gJiYgKHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJykpIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7CiAgICAKICAgIC8vIEZvciBIYWNrYm9uZSdzIHB1cnBvc2VzLCBqUXVlcnksIFplcHRvLCBFbmRlciwgb3IgTXkgTGlicmFyeSAoa2lkZGluZykgb3ducwogICAgLy8gdGhlIGAkYCB2YXJpYWJsZS4KICAgIEhhY2tib25lLiQgPSByb290LmpRdWVyeSB8fCByb290LlplcHRvIHx8IHJvb3QuZW5kZXIgfHwgcm9vdC4kOwogICAgCiAgICAvLyBSdW5zIEhhY2tib25lLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBIYWNrYm9uZWAgdmFyaWFibGUKICAgIC8vIHRvIGl0cyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGlzIEhhY2tib25lIG9iamVjdC4KICAgIEhhY2tib25lLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcm9vdC5IYWNrYm9uZSA9IHByZXZpb3VzSGFja2JvbmU7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwogICAgCiAgICAvLyBUdXJuIG9uIGBlbXVsYXRlSFRUUGAgdG8gc3VwcG9ydCBsZWdhY3kgSFRUUCBzZXJ2ZXJzLiBTZXR0aW5nIHRoaXMgb3B0aW9uCiAgICAvLyB3aWxsIGZha2UgYCJQQVRDSCJgLCBgIlBVVCJgIGFuZCBgIkRFTEVURSJgIHJlcXVlc3RzIHZpYSB0aGUgYF9tZXRob2RgIHBhcmFtZXRlciBhbmQKICAgIC8vIHNldCBhIGBYLUh0dHAtTWV0aG9kLU92ZXJyaWRlYCBoZWFkZXIuCiAgICBIYWNrYm9uZS5lbXVsYXRlSFRUUCA9IGZhbHNlOwogICAgCiAgICAvLyBUdXJuIG9uIGBlbXVsYXRlSlNPTmAgdG8gc3VwcG9ydCBsZWdhY3kgc2VydmVycyB0aGF0IGNhbid0IGRlYWwgd2l0aCBkaXJlY3QKICAgIC8vIGBhcHBsaWNhdGlvbi9qc29uYCByZXF1ZXN0cyAuLi4gd2lsbCBlbmNvZGUgdGhlIGJvZHkgYXMKICAgIC8vIGBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRgIGluc3RlYWQgYW5kIHdpbGwgc2VuZCB0aGUgbW9kZWwgaW4gYQogICAgLy8gZm9ybSBwYXJhbSBuYW1lZCBgbW9kZWxgLgogICAgSGFja2JvbmUuZW11bGF0ZUpTT04gPSBmYWxzZTsKICAgIAogICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvcnJlY3RseSBzZXQgdXAgdGhlIHByb3RvdHlwZSBjaGFpbiwgZm9yIHN1YmNsYXNzZXMuCiAgICAvLyBTaW1pbGFyIHRvIGBnb29nLmluaGVyaXRzYCwgYnV0IHVzZXMgYSBoYXNoIG9mIHByb3RvdHlwZSBwcm9wZXJ0aWVzIGFuZAogICAgLy8gY2xhc3MgcHJvcGVydGllcyB0byBiZSBleHRlbmRlZC4KICAgIC8vIFRPRE86IHRoaXMgaXMgYSB2ZXJ5IGZhc3QgaW1wbGVtZW50YXRpb24sIHJlcXVpcmVzIGEgZGVjZW50IG9uZQogICAgdmFyIGV4dGVuZCA9IEhhY2tib25lLmV4dGVuZCA9IGZ1bmN0aW9uIChjb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICAgICAgICByZXR1cm4gQmFzZS5leHRlbmQuY2FsbChjb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpOwogICAgfTsKCgogICAgLy8gSGVscGVycwogICAgLy8gLS0tLS0tLQogICAgCiAgICAvLyBUaHJvdyBhbiBlcnJvciB3aGVuIGEgVVJMIGlzIG5lZWRlZCwgYW5kIG5vbmUgaXMgc3VwcGxpZWQuCiAgICB2YXIgdXJsRXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBICJ1cmwiIHByb3BlcnR5IG9yIGZ1bmN0aW9uIG11c3QgYmUgc3BlY2lmaWVkJyk7CiAgICB9OwogICAgCiAgICAvLyBXcmFwIGFuIG9wdGlvbmFsIGVycm9yIGNhbGxiYWNrIHdpdGggYSBmYWxsYmFjayBlcnJvciBldmVudC4KICAgIHZhciB3cmFwRXJyb3IgPSBmdW5jdGlvbiAobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgZXJyb3IgPSBvcHRpb25zLmVycm9yOwogICAgICAgIG9wdGlvbnMuZXJyb3IgPSBmdW5jdGlvbiAocmVzcCkgewogICAgICAgICAgICBpZiAoZXJyb3IpIGVycm9yKG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgICAgICAgbW9kZWwudHJpZ2dlcignZXJyb3InLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgICAgfTsKICAgIH07CgogICAgdmFyIEJhc2UgPSBIYWNrYm9uZS5CYXNlID0gZnVuY3Rpb24gKCkge307CiAgICAKICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb3JyZWN0bHkgc2V0IHVwIHRoZSBwcm90b3R5cGUgY2hhaW4sIGZvciBzdWJjbGFzc2VzLgogICAgLy8gU2ltaWxhciB0byBgZ29vZy5pbmhlcml0c2AsIGJ1dCB1c2VzIGEgaGFzaCBvZiBwcm90b3R5cGUgcHJvcGVydGllcyBhbmQKICAgIC8vIGNsYXNzIHByb3BlcnRpZXMgdG8gYmUgZXh0ZW5kZWQuCiAgICBCYXNlLmV4dGVuZCA9IGZ1bmN0aW9uIChwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogICAgICAgIHZhciBwYXJlbnQgPSB0aGlzOwogICAgICAgIHZhciBjaGlsZDsKICAgIAogICAgICAgIC8vIFRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIG5ldyBzdWJjbGFzcyBpcyBlaXRoZXIgZGVmaW5lZCBieSB5b3UKICAgICAgICAvLyAodGhlICJjb25zdHJ1Y3RvciIgcHJvcGVydHkgaW4geW91ciBgZXh0ZW5kYCBkZWZpbml0aW9uKSwgb3IgZGVmYXVsdGVkCiAgICAgICAgLy8gYnkgdXMgdG8gc2ltcGx5IGNhbGwgdGhlIHBhcmVudCdzIGNvbnN0cnVjdG9yLgogICAgICAgIGlmIChwcm90b1Byb3BzICYmIF8uaGFzKHByb3RvUHJvcHMsICdjb25zdHJ1Y3RvcicpKSB7CiAgICAgICAgICAgIGNoaWxkID0gcHJvdG9Qcm9wcy5jb25zdHJ1Y3RvcjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjaGlsZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICAKICAgICAgICAvLyBBZGQgc3RhdGljIHByb3BlcnRpZXMgdG8gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLCBpZiBzdXBwbGllZC4KICAgICAgICBfLmV4dGVuZChjaGlsZCwgcGFyZW50LCBzdGF0aWNQcm9wcyk7CiAgICAKICAgICAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBjaGFpbiB0byBpbmhlcml0IGZyb20gYHBhcmVudGAsIHdpdGhvdXQgY2FsbGluZwogICAgICAgIC8vIGBwYXJlbnRgJ3MgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAgICAgICAgdmFyIFN1cnJvZ2F0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOwogICAgICAgIH07CiAgICAgICAgU3Vycm9nYXRlLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7CiAgICAgICAgY2hpbGQucHJvdG90eXBlID0gbmV3IFN1cnJvZ2F0ZSgpOwogICAgCiAgICAgICAgLy8gQWRkIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChpbnN0YW5jZSBwcm9wZXJ0aWVzKSB0byB0aGUgc3ViY2xhc3MsCiAgICAgICAgLy8gaWYgc3VwcGxpZWQuCiAgICAgICAgaWYgKHByb3RvUHJvcHMpIF8uZXh0ZW5kKGNoaWxkLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgICAKICAgICAgICAvLyBTZXQgYSBjb252ZW5pZW5jZSBwcm9wZXJ0eSBpbiBjYXNlIHRoZSBwYXJlbnQncyBwcm90b3R5cGUgaXMgbmVlZGVkCiAgICAgICAgLy8gbGF0ZXIuCiAgICAgICAgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsKICAgIAogICAgICAgIHJldHVybiBjaGlsZDsKICAgIH07CiAgICAKICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBtaXggbXVsdGlwbGUgaW50ZXJmYWNlcywgYmVoYXZpb3VycyBvciBmZWF0dXJlcyBmcm9tCiAgICBCYXNlLm1peGluID0gZnVuY3Rpb24gKC8qIGNsYXNzZXMgYW5kIHByb3BlcnR5IG1hcHMgKi8pIHsKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7CiAgICAgICAgdmFyIG1peGluID0ge307CiAgICAgICAgdmFyIGZlYXR1cmU7CiAgICAKICAgICAgICB3aGlsZSAoYXJncy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGZlYXR1cmUgPSBhcmdzLnNoaWZ0KCk7CiAgICAgICAgICAgIGlmICh0eXBlb2YgZmVhdHVyZSA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgZmVhdHVyZSA9IGZlYXR1cmUucHJvdG90eXBlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIF8uZXh0ZW5kKG1peGluLCBmZWF0dXJlKTsKICAgICAgICB9CiAgICAKICAgICAgICByZXR1cm4gdGhpcy5leHRlbmQobWl4aW4pOwogICAgfTsKICAgIAogICAgQmFzZS5pbXBsZW1lbnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApOwogICAgICAgIHZhciBwcm90byA9IHRoaXMucHJvdG90eXBlOwogICAgICAgIHZhciBmZWF0dXJlOwogICAgCiAgICAgICAgd2hpbGUgKGFyZ3MubGVuZ3RoID4gMCkgewogICAgICAgICAgICBmZWF0dXJlID0gYXJncy5zaGlmdCgpOwogICAgICAgICAgICBpZiAodHlwZW9mIGZlYXR1cmUgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgIGZlYXR1cmUgPSBmZWF0dXJlLnByb3RvdHlwZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBfLmV4dGVuZChwcm90bywgZmVhdHVyZSk7CiAgICAgICAgfQogICAgCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKCiAgICAvLyBDb21wb25lbnQgY2xhc3MgcHJvdmlkZXMgZ2VuZXJhbC9iYXNpYyBsaWZlY3ljbGUgaW50ZXJmYWNlLgogICAgdmFyIENvbXBvbmVudCA9IEhhY2tib25lLkNvbXBvbmVudCA9IEJhc2UuZXh0ZW5kKHsKICAgICAgICAvLyBJbml0aWFsaXplcyB0aGUgQ29tcG9uZW50LiBPdmVycmlkZSBpZiBjdXN0b20gbG9naWMgbmVlZGVkLgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFBhdXNlcyBvciBtdXRlcyB0aGUgQ29tcG9uZW50LiBPdmVycmlkZSBpZiBjdXN0b20gbG9naWMgbmVlZGVkLgogICAgICAgIHBhdXNlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBSZXN1bWVzIHRoZSBDb21wb25lbnQgZnJvbSBwYXVzZWQgb3IgbXV0ZWQgc3RhdGUuIE92ZXJyaWRlIGlmIGN1c3RvbSBsb2dpYyBuZWVkZWQuCiAgICAgICAgcmVzdW1lOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBEZXN0cm95cyB0aGUgQ29tcG9uZW50LiBPdmVycmlkZSBpZiBjdXN0b20gbG9naWMgbmVlZGVkLgogICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQogICAgfSk7CgogICAgLy8gSGFja2JvbmUuRXZlbnRzCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0KICAgIAogICAgLy8gQSBtb2R1bGUgdGhhdCBjYW4gYmUgbWl4ZWQgaW4gdG8gKmFueSBvYmplY3QqIGluIG9yZGVyIHRvIHByb3ZpZGUgaXQgd2l0aAogICAgLy8gY3VzdG9tIGV2ZW50cy4gWW91IG1heSBiaW5kIHdpdGggYG9uYCBvciByZW1vdmUgd2l0aCBgb2ZmYCBjYWxsYmFjawogICAgLy8gZnVuY3Rpb25zIHRvIGFuIGV2ZW50OyBgdHJpZ2dlcmAtaW5nIGFuIGV2ZW50IGZpcmVzIGFsbCBjYWxsYmFja3MgaW4KICAgIC8vIHN1Y2Nlc3Npb24uCiAgICAvLwogICAgLy8gICAgIHZhciBvYmplY3QgPSB7fTsKICAgIC8vICAgICBfLmV4dGVuZChvYmplY3QsIEhhY2tib25lLkV2ZW50cyk7CiAgICAvLyAgICAgb2JqZWN0Lm9uKCdleHBhbmQnLCBmdW5jdGlvbigpeyBhbGVydCgnZXhwYW5kZWQnKTsgfSk7CiAgICAvLyAgICAgb2JqZWN0LnRyaWdnZXIoJ2V4cGFuZCcpOwogICAgLy8KICAgIHZhciBFdmVudHMgPSBIYWNrYm9uZS5FdmVudHMgPSB7CiAgICAKICAgICAgICAvLyBCaW5kIGFuIGV2ZW50IHRvIGEgYGNhbGxiYWNrYCBmdW5jdGlvbi4gUGFzc2luZyBgImFsbCJgIHdpbGwgYmluZAogICAgICAgIC8vIHRoZSBjYWxsYmFjayB0byBhbGwgZXZlbnRzIGZpcmVkLgogICAgICAgIG9uOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHsKICAgICAgICAgICAgaWYgKCFldmVudHNBcGkodGhpcywgJ29uJywgbmFtZSwgW2NhbGxiYWNrLCBjb250ZXh0XSkgfHwgIWNhbGxiYWNrKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgdGhpcy5fZXZlbnRzIHx8ICh0aGlzLl9ldmVudHMgPSB7fSk7CiAgICAgICAgICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHNbbmFtZV0gfHwgKHRoaXMuX2V2ZW50c1tuYW1lXSA9IFtdKTsKICAgICAgICAgICAgZXZlbnRzLnB1c2goe2NhbGxiYWNrOiBjYWxsYmFjaywgY29udGV4dDogY29udGV4dCwgY3R4OiBjb250ZXh0IHx8IHRoaXN9KTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEJpbmQgYW4gZXZlbnQgdG8gb25seSBiZSB0cmlnZ2VyZWQgYSBzaW5nbGUgdGltZS4gQWZ0ZXIgdGhlIGZpcnN0IHRpbWUKICAgICAgICAvLyB0aGUgY2FsbGJhY2sgaXMgaW52b2tlZCwgaXQgd2lsbCBiZSByZW1vdmVkLgogICAgICAgIG9uY2U6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgY29udGV4dCkgewogICAgICAgICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAnb25jZScsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pIHx8ICFjYWxsYmFjaykgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgdmFyIG9uY2UgPSBfLm9uY2UoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgc2VsZi5vZmYobmFtZSwgb25jZSk7CiAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgb25jZS5fY2FsbGJhY2sgPSBjYWxsYmFjazsKICAgICAgICAgICAgcmV0dXJuIHRoaXMub24obmFtZSwgb25jZSwgY29udGV4dCk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFJlbW92ZSBvbmUgb3IgbWFueSBjYWxsYmFja3MuIElmIGBjb250ZXh0YCBpcyBudWxsLCByZW1vdmVzIGFsbAogICAgICAgIC8vIGNhbGxiYWNrcyB3aXRoIHRoYXQgZnVuY3Rpb24uIElmIGBjYWxsYmFja2AgaXMgbnVsbCwgcmVtb3ZlcyBhbGwKICAgICAgICAvLyBjYWxsYmFja3MgZm9yIHRoZSBldmVudC4gSWYgYG5hbWVgIGlzIG51bGwsIHJlbW92ZXMgYWxsIGJvdW5kCiAgICAgICAgLy8gY2FsbGJhY2tzIGZvciBhbGwgZXZlbnRzLgogICAgICAgIG9mZjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7CiAgICAgICAgICAgIHZhciByZXRhaW4sIGV2LCBldmVudHMsIG5hbWVzLCBpLCBsLCBqLCBrOwogICAgICAgICAgICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhZXZlbnRzQXBpKHRoaXMsICdvZmYnLCBuYW1lLCBbY2FsbGJhY2ssIGNvbnRleHRdKSkgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIGlmICghbmFtZSAmJiAhY2FsbGJhY2sgJiYgIWNvbnRleHQpIHsKICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IHt9OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICBuYW1lcyA9IG5hbWUgPyBbbmFtZV0gOiBfLmtleXModGhpcy5fZXZlbnRzKTsKICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgbmFtZSA9IG5hbWVzW2ldOwogICAgICAgICAgICAgICAgaWYgKGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tuYW1lXSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1tuYW1lXSA9IHJldGFpbiA9IFtdOwogICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayB8fCBjb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGsgPSBldmVudHMubGVuZ3RoOyBqIDwgazsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldiA9IGV2ZW50c1tqXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoY2FsbGJhY2sgJiYgY2FsbGJhY2sgIT09IGV2LmNhbGxiYWNrICYmIGNhbGxiYWNrICE9PSBldi5jYWxsYmFjay5fY2FsbGJhY2spIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnRleHQgJiYgY29udGV4dCAhPT0gZXYuY29udGV4dCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRhaW4ucHVzaChldik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXRhaW4ubGVuZ3RoKSBkZWxldGUgdGhpcy5fZXZlbnRzW25hbWVdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFRyaWdnZXIgb25lIG9yIG1hbnkgZXZlbnRzLCBmaXJpbmcgYWxsIGJvdW5kIGNhbGxiYWNrcy4gQ2FsbGJhY2tzIGFyZQogICAgICAgIC8vIHBhc3NlZCB0aGUgc2FtZSBhcmd1bWVudHMgYXMgYHRyaWdnZXJgIGlzLCBhcGFydCBmcm9tIHRoZSBldmVudCBuYW1lCiAgICAgICAgLy8gKHVubGVzcyB5b3UncmUgbGlzdGVuaW5nIG9uIGAiYWxsImAsIHdoaWNoIHdpbGwgY2F1c2UgeW91ciBjYWxsYmFjayB0bwogICAgICAgIC8vIHJlY2VpdmUgdGhlIHRydWUgbmFtZSBvZiB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50KS4KICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICBpZiAoIXRoaXMuX2V2ZW50cykgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgICAgICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAndHJpZ2dlcicsIG5hbWUsIGFyZ3MpKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tuYW1lXTsKICAgICAgICAgICAgdmFyIGFsbEV2ZW50cyA9IHRoaXMuX2V2ZW50cy5hbGw7CiAgICAgICAgICAgIGlmIChldmVudHMpIHRyaWdnZXJFdmVudHMoZXZlbnRzLCBhcmdzKTsKICAgICAgICAgICAgaWYgKGFsbEV2ZW50cykgdHJpZ2dlckV2ZW50cyhhbGxFdmVudHMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBUZWxsIHRoaXMgb2JqZWN0IHRvIHN0b3AgbGlzdGVuaW5nIHRvIGVpdGhlciBzcGVjaWZpYyBldmVudHMgLi4uIG9yCiAgICAgICAgLy8gdG8gZXZlcnkgb2JqZWN0IGl0J3MgY3VycmVudGx5IGxpc3RlbmluZyB0by4KICAgICAgICBzdG9wTGlzdGVuaW5nOiBmdW5jdGlvbiAob2JqLCBuYW1lLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzOwogICAgICAgICAgICBpZiAoIWxpc3RlbmVycykgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIHZhciBkZWxldGVMaXN0ZW5lciA9ICFuYW1lICYmICFjYWxsYmFjazsKICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgY2FsbGJhY2sgPSB0aGlzOwogICAgICAgICAgICBpZiAob2JqKSAobGlzdGVuZXJzID0ge30pW29iai5fbGlzdGVuZXJJZF0gPSBvYmo7CiAgICAgICAgICAgIGZvciAodmFyIGlkIGluIGxpc3RlbmVycykgewogICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHsKICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNbaWRdLm9mZihuYW1lLCBjYWxsYmFjaywgdGhpcyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbGV0ZUxpc3RlbmVyKSBkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2lkXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CiAgICAKICAgIH07CiAgICAKICAgIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHNwbGl0IGV2ZW50IHN0cmluZ3MuCiAgICB2YXIgZXZlbnRTcGxpdHRlciA9IC9ccysvOwogICAgCiAgICAvLyBJbXBsZW1lbnQgZmFuY3kgZmVhdHVyZXMgb2YgdGhlIEV2ZW50cyBBUEkgc3VjaCBhcyBtdWx0aXBsZSBldmVudAogICAgLy8gbmFtZXMgYCJjaGFuZ2UgYmx1ciJgIGFuZCBqUXVlcnktc3R5bGUgZXZlbnQgbWFwcyBge2NoYW5nZTogYWN0aW9ufWAKICAgIC8vIGluIHRlcm1zIG9mIHRoZSBleGlzdGluZyBBUEkuCiAgICB2YXIgZXZlbnRzQXBpID0gZnVuY3Rpb24gKG9iaiwgYWN0aW9uLCBuYW1lLCByZXN0KSB7CiAgICAgICAgaWYgKCFuYW1lKSByZXR1cm4gdHJ1ZTsKICAgIAogICAgICAgIC8vIEhhbmRsZSBldmVudCBtYXBzLgogICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHsKICAgICAgICAgICAgICAgIGlmIChuYW1lLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgICAgICBvYmpbYWN0aW9uXS5hcHBseShvYmosIFtrZXksIG5hbWVba2V5XV0uY29uY2F0KHJlc3QpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgCiAgICAgICAgLy8gSGFuZGxlIHNwYWNlIHNlcGFyYXRlZCBldmVudCBuYW1lcy4KICAgICAgICBpZiAoZXZlbnRTcGxpdHRlci50ZXN0KG5hbWUpKSB7CiAgICAgICAgICAgIHZhciBuYW1lcyA9IG5hbWUuc3BsaXQoZXZlbnRTcGxpdHRlcik7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbmFtZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgICAgICBvYmpbYWN0aW9uXS5hcHBseShvYmosIFtuYW1lc1tpXV0uY29uY2F0KHJlc3QpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9OwogICAgCiAgICAvLyBBIGRpZmZpY3VsdC10by1iZWxpZXZlLCBidXQgb3B0aW1pemVkIGludGVybmFsIGRpc3BhdGNoIGZ1bmN0aW9uIGZvcgogICAgLy8gdHJpZ2dlcmluZyBldmVudHMuIFRyaWVzIHRvIGtlZXAgdGhlIHVzdWFsIGNhc2VzIHNwZWVkeSAobW9zdCBpbnRlcm5hbAogICAgLy8gSGFja2JvbmUgZXZlbnRzIGhhdmUgMyBhcmd1bWVudHMpLgogICAgdmFyIHRyaWdnZXJFdmVudHMgPSBmdW5jdGlvbiAoZXZlbnRzLCBhcmdzKSB7CiAgICAgICAgdmFyIGV2LCBpID0gLTEsIGwgPSBldmVudHMubGVuZ3RoLCBhMSA9IGFyZ3NbMF0sIGEyID0gYXJnc1sxXSwgYTMgPSBhcmdzWzJdOwogICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEsIGEyKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgsIGExLCBhMiwgYTMpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suYXBwbHkoZXYuY3R4LCBhcmdzKTsKICAgICAgICB9CiAgICB9OwogICAgCiAgICB2YXIgbGlzdGVuTWV0aG9kcyA9IHtsaXN0ZW5UbzogJ29uJywgbGlzdGVuVG9PbmNlOiAnb25jZSd9OwogICAgCiAgICAvLyBJbnZlcnNpb24tb2YtY29udHJvbCB2ZXJzaW9ucyBvZiBgb25gIGFuZCBgb25jZWAuIFRlbGwgKnRoaXMqIG9iamVjdCB0bwogICAgLy8gbGlzdGVuIHRvIGFuIGV2ZW50IGluIGFub3RoZXIgb2JqZWN0IC4uLiBrZWVwaW5nIHRyYWNrIG9mIHdoYXQgaXQncwogICAgLy8gbGlzdGVuaW5nIHRvLgogICAgXy5lYWNoKGxpc3Rlbk1ldGhvZHMsIGZ1bmN0aW9uIChpbXBsZW1lbnRhdGlvbiwgbWV0aG9kKSB7CiAgICAgICAgRXZlbnRzW21ldGhvZF0gPSBmdW5jdGlvbiAob2JqLCBuYW1lLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzIHx8ICh0aGlzLl9saXN0ZW5lcnMgPSB7fSk7CiAgICAgICAgICAgIHZhciBpZCA9IG9iai5fbGlzdGVuZXJJZCB8fCAob2JqLl9saXN0ZW5lcklkID0gXy51bmlxdWVJZCgnbCcpKTsKICAgICAgICAgICAgbGlzdGVuZXJzW2lkXSA9IG9iajsKICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgY2FsbGJhY2sgPSB0aGlzOwogICAgICAgICAgICBvYmpbaW1wbGVtZW50YXRpb25dKG5hbWUsIGNhbGxiYWNrLCB0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgIH0pOwogICAgCiAgICAvLyBBbGlhc2VzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4KICAgIEV2ZW50cy5iaW5kID0gRXZlbnRzLm9uOwogICAgRXZlbnRzLnVuYmluZCA9IEV2ZW50cy5vZmY7CiAgICAKICAgIC8vIEFsbG93IHRoZSBgSGFja2JvbmVgIG9iamVjdCB0byBzZXJ2ZSBhcyBhIGdsb2JhbCBldmVudCBidXMsIGZvciBmb2xrcyB3aG8KICAgIC8vIHdhbnQgZ2xvYmFsICJwdWJzdWIiIGluIGEgY29udmVuaWVudCBwbGFjZS4KICAgIF8uZXh0ZW5kKEhhY2tib25lLCBFdmVudHMpOwoKICAgIC8vQmFja2JvbmUuU3RhdGUKICAgIAogICAgLy9IYWNrYm9uZS5TdGF0ZSBwcm92aWRlcyBhIHNpbXBsZSBldmVudGVkIGRhdGEtc3RvcmUgd2l0aG91dCBhbnkgUkVTVGZ1bCBmZWF0dXJlcy4KICAgIHZhciBTdGF0ZSA9IEhhY2tib25lLlN0YXRlID0gQ29tcG9uZW50LmV4dGVuZCh7CiAgICAKICAgICAgICAvLyBUaGUgZGVmYXVsdCBuYW1lIGZvciB0aGUgSlNPTiBgaWRgIGF0dHJpYnV0ZSBpcyBgImlkImAuIE1vbmdvREIgYW5kCiAgICAgICAgLy8gQ291Y2hEQiB1c2VycyBtYXkgd2FudCB0byBzZXQgdGhpcyB0byBgIl9pZCJgLgogICAgICAgIGlkQXR0cmlidXRlOiAnaWQnLAogICAgCiAgICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBvcHRpb25zKSB7CiAgICAgICAgICAgIHZhciBkZWZhdWx0czsKICAgICAgICAgICAgdmFyIGF0dHJzID0gYXR0cmlidXRlcyB8fCB7fTsKICAgICAgICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgICAgICAgdGhpcy5jaWQgPSBfLnVuaXF1ZUlkKCdjJyk7CiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9OwogICAgICAgICAgICBpZiAob3B0aW9ucy5jb2xsZWN0aW9uKSB0aGlzLmNvbGxlY3Rpb24gPSBvcHRpb25zLmNvbGxlY3Rpb247CiAgICAgICAgICAgIGlmIChvcHRpb25zLnBhcnNlKSBhdHRycyA9IHRoaXMucGFyc2UoYXR0cnMsIG9wdGlvbnMpIHx8IHt9OwogICAgICAgICAgICBvcHRpb25zLl9hdHRycyB8fCAob3B0aW9ucy5fYXR0cnMgPSBhdHRycyk7CiAgICAgICAgICAgIGlmIChkZWZhdWx0cyA9IF8ucmVzdWx0KHRoaXMsICdkZWZhdWx0cycpKSB7CiAgICAgICAgICAgICAgICBhdHRycyA9IF8uZGVmYXVsdHMoe30sIGF0dHJzLCBkZWZhdWx0cyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5zZXQoYXR0cnMsIG9wdGlvbnMpOwogICAgICAgICAgICB0aGlzLmNoYW5nZWQgPSB7fTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gQSBoYXNoIG9mIGF0dHJpYnV0ZXMgd2hvc2UgY3VycmVudCBhbmQgcHJldmlvdXMgdmFsdWUgZGlmZmVyLgogICAgICAgIGNoYW5nZWQ6IG51bGwsCiAgICAKICAgICAgICAvLyBUaGUgdmFsdWUgcmV0dXJuZWQgZHVyaW5nIHRoZSBsYXN0IGZhaWxlZCB2YWxpZGF0aW9uLgogICAgICAgIHZhbGlkYXRpb25FcnJvcjogbnVsbCwKICAgIAogICAgICAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIFN0YXRlJ3MgYGF0dHJpYnV0ZXNgIG9iamVjdC4KICAgICAgICB0b0pTT046IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICAgICAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEdldCB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlLgogICAgICAgIGdldDogZnVuY3Rpb24gKGF0dHIpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlc1thdHRyXTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gR2V0IHRoZSBIVE1MLWVzY2FwZWQgdmFsdWUgb2YgYW4gYXR0cmlidXRlLgogICAgICAgIGVzY2FwZTogZnVuY3Rpb24gKGF0dHIpIHsKICAgICAgICAgICAgcmV0dXJuIF8uZXNjYXBlKHRoaXMuZ2V0KGF0dHIpKTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGF0dHJpYnV0ZSBjb250YWlucyBhIHZhbHVlIHRoYXQgaXMgbm90IG51bGwKICAgICAgICAvLyBvciB1bmRlZmluZWQuCiAgICAgICAgaGFzOiBmdW5jdGlvbiAoYXR0cikgewogICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoYXR0cikgIT0gbnVsbDsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gU2V0IGEgaGFzaCBvZiBTdGF0ZSBhdHRyaWJ1dGVzIG9uIHRoZSBvYmplY3QsIGZpcmluZyBgImNoYW5nZSJgLiBUaGlzIGlzCiAgICAgICAgLy8gdGhlIGNvcmUgcHJpbWl0aXZlIG9wZXJhdGlvbiBvZiBhIFN0YXRlLCB1cGRhdGluZyB0aGUgZGF0YSBhbmQgbm90aWZ5aW5nCiAgICAgICAgLy8gYW55b25lIHdobyBuZWVkcyB0byBrbm93IGFib3V0IHRoZSBjaGFuZ2UgaW4gc3RhdGUuIFRoZSBoZWFydCBvZiB0aGUgYmVhc3QuCiAgICAgICAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWwsIG9wdGlvbnMpIHsKICAgICAgICAgICAgdmFyIGF0dHIsIGF0dHJzLCB1bnNldCwgY2hhbmdlcywgc2lsZW50LCBjaGFuZ2luZywgcHJldiwgY3VycmVudDsKICAgICAgICAgICAgaWYgKGtleSA9PSBudWxsKSByZXR1cm4gdGhpczsKICAgIAogICAgICAgICAgICAvLyBIYW5kbGUgYm90aCBgImtleSIsIHZhbHVlYCBhbmQgYHtrZXk6IHZhbHVlfWAgLXN0eWxlIGFyZ3VtZW50cy4KICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICBhdHRycyA9IGtleTsKICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB2YWw7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAoYXR0cnMgPSB7fSlba2V5XSA9IHZhbDsKICAgICAgICAgICAgfQogICAgCiAgICAgICAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICAKICAgICAgICAgICAgLy8gUnVuIHZhbGlkYXRpb24uCiAgICAgICAgICAgIGlmICghdGhpcy5fdmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7CiAgICAKICAgICAgICAgICAgLy8gRXh0cmFjdCBhdHRyaWJ1dGVzIGFuZCBvcHRpb25zLgogICAgICAgICAgICB1bnNldCA9IG9wdGlvbnMudW5zZXQ7CiAgICAgICAgICAgIHNpbGVudCA9IG9wdGlvbnMuc2lsZW50OwogICAgICAgICAgICBjaGFuZ2VzID0gW107CiAgICAgICAgICAgIGNoYW5naW5nID0gdGhpcy5fY2hhbmdpbmc7CiAgICAgICAgICAgIHRoaXMuX2NoYW5naW5nID0gdHJ1ZTsKICAgIAogICAgICAgICAgICBpZiAoIWNoYW5naW5nKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMgPSBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7CiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZWQgPSB7fTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjdXJyZW50ID0gdGhpcy5hdHRyaWJ1dGVzLCBwcmV2ID0gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzOwogICAgCiAgICAgICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIG9mIGBpZGAuCiAgICAgICAgICAgIGlmICh0aGlzLmlkQXR0cmlidXRlIGluIGF0dHJzKSB0aGlzLmlkID0gYXR0cnNbdGhpcy5pZEF0dHJpYnV0ZV07CiAgICAKICAgICAgICAgICAgLy8gRm9yIGVhY2ggYHNldGAgYXR0cmlidXRlLCB1cGRhdGUgb3IgZGVsZXRlIHRoZSBjdXJyZW50IHZhbHVlLgogICAgICAgICAgICBmb3IgKGF0dHIgaW4gYXR0cnMpIHsKICAgICAgICAgICAgICAgIHZhbCA9IGF0dHJzW2F0dHJdOwogICAgICAgICAgICAgICAgaWYgKCFfLmlzRXF1YWwoY3VycmVudFthdHRyXSwgdmFsKSkgY2hhbmdlcy5wdXNoKGF0dHIpOwogICAgICAgICAgICAgICAgaWYgKCFfLmlzRXF1YWwocHJldlthdHRyXSwgdmFsKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlZFthdHRyXSA9IHZhbDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2hhbmdlZFthdHRyXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHVuc2V0ID8gZGVsZXRlIGN1cnJlbnRbYXR0cl0gOiBjdXJyZW50W2F0dHJdID0gdmFsOwogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgLy8gVHJpZ2dlciBhbGwgcmVsZXZhbnQgYXR0cmlidXRlIGNoYW5nZXMuCiAgICAgICAgICAgIGlmICghc2lsZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlcy5sZW5ndGgpIHRoaXMuX3BlbmRpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGFuZ2VzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlOicgKyBjaGFuZ2VzW2ldLCB0aGlzLCBjdXJyZW50W2NoYW5nZXNbaV1dLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgCiAgICAgICAgICAgIC8vIFlvdSBtaWdodCBiZSB3b25kZXJpbmcgd2h5IHRoZXJlJ3MgYSBgd2hpbGVgIGxvb3AgaGVyZS4gQ2hhbmdlcyBjYW4KICAgICAgICAgICAgLy8gYmUgcmVjdXJzaXZlbHkgbmVzdGVkIHdpdGhpbiBgImNoYW5nZSJgIGV2ZW50cy4KICAgICAgICAgICAgaWYgKGNoYW5naW5nKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgaWYgKCFzaWxlbnQpIHsKICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLl9wZW5kaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJywgdGhpcywgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5fcGVuZGluZyA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLl9jaGFuZ2luZyA9IGZhbHNlOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gUmVtb3ZlIGFuIGF0dHJpYnV0ZSBmcm9tIHRoZSBTdGF0ZSwgZmlyaW5nIGAiY2hhbmdlImAuIGB1bnNldGAgaXMgYSBub29wCiAgICAgICAgLy8gaWYgdGhlIGF0dHJpYnV0ZSBkb2Vzbid0IGV4aXN0LgogICAgICAgIHVuc2V0OiBmdW5jdGlvbiAoYXR0ciwgb3B0aW9ucykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZXQoYXR0ciwgdm9pZCAwLCBfLmV4dGVuZCh7fSwgb3B0aW9ucywge3Vuc2V0OiB0cnVlfSkpOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBDbGVhciBhbGwgYXR0cmlidXRlcyBvbiB0aGUgU3RhdGUsIGZpcmluZyBgImNoYW5nZSJgLgogICAgICAgIGNsZWFyOiBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgICAgICB2YXIgYXR0cnMgPSB7fTsKICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuYXR0cmlidXRlcykgYXR0cnNba2V5XSA9IHZvaWQgMDsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHJzLCBfLmV4dGVuZCh7fSwgb3B0aW9ucywge3Vuc2V0OiB0cnVlfSkpOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBEZXN0cm95cyB0aGUgU3RhdGUgYnkgY2xlYXJpbmcgYWxsIGF0dHJpYnV0ZXMuCiAgICAgICAgLy8gQ29udmVuaWVuY2UgbWV0aG9kIGZvciBleHRlbmRpbmcgYmFzZSBDb21wb25lbnQuCiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jbGVhci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIFN0YXRlIGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IGAiY2hhbmdlImAgZXZlbnQuCiAgICAgICAgLy8gSWYgeW91IHNwZWNpZnkgYW4gYXR0cmlidXRlIG5hbWUsIGRldGVybWluZSBpZiB0aGF0IGF0dHJpYnV0ZSBoYXMgY2hhbmdlZC4KICAgICAgICBoYXNDaGFuZ2VkOiBmdW5jdGlvbiAoYXR0cikgewogICAgICAgICAgICBpZiAoYXR0ciA9PSBudWxsKSByZXR1cm4gIV8uaXNFbXB0eSh0aGlzLmNoYW5nZWQpOwogICAgICAgICAgICByZXR1cm4gXy5oYXModGhpcy5jaGFuZ2VkLCBhdHRyKTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gUmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgYXR0cmlidXRlcyB0aGF0IGhhdmUgY2hhbmdlZCwgb3IKICAgICAgICAvLyBmYWxzZSBpZiB0aGVyZSBhcmUgbm8gY2hhbmdlZCBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIGRldGVybWluaW5nIHdoYXQKICAgICAgICAvLyBwYXJ0cyBvZiBhIHZpZXcgbmVlZCB0byBiZSB1cGRhdGVkIGFuZC9vciB3aGF0IGF0dHJpYnV0ZXMgbmVlZCB0byBiZQogICAgICAgIC8vIHBlcnNpc3RlZCB0byB0aGUgc2VydmVyLiBVbnNldCBhdHRyaWJ1dGVzIHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICAgICAgICAvLyBZb3UgY2FuIGFsc28gcGFzcyBhbiBhdHRyaWJ1dGVzIG9iamVjdCB0byBkaWZmIGFnYWluc3QgdGhlIFN0YXRlLAogICAgICAgIC8vIGRldGVybWluaW5nIGlmIHRoZXJlICp3b3VsZCBiZSogYSBjaGFuZ2UuCiAgICAgICAgY2hhbmdlZEF0dHJpYnV0ZXM6IGZ1bmN0aW9uIChkaWZmKSB7CiAgICAgICAgICAgIGlmICghZGlmZikgcmV0dXJuIHRoaXMuaGFzQ2hhbmdlZCgpID8gXy5jbG9uZSh0aGlzLmNoYW5nZWQpIDogZmFsc2U7CiAgICAgICAgICAgIHZhciB2YWwsIGNoYW5nZWQgPSBmYWxzZTsKICAgICAgICAgICAgdmFyIG9sZCA9IHRoaXMuX2NoYW5naW5nID8gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzIDogdGhpcy5hdHRyaWJ1dGVzOwogICAgICAgICAgICBmb3IgKHZhciBhdHRyIGluIGRpZmYpIHsKICAgICAgICAgICAgICAgIGlmIChfLmlzRXF1YWwob2xkW2F0dHJdLCAodmFsID0gZGlmZlthdHRyXSkpKSBjb250aW51ZTsKICAgICAgICAgICAgICAgIChjaGFuZ2VkIHx8IChjaGFuZ2VkID0ge30pKVthdHRyXSA9IHZhbDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY2hhbmdlZDsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gR2V0IHRoZSBwcmV2aW91cyB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUsIHJlY29yZGVkIGF0IHRoZSB0aW1lIHRoZSBsYXN0CiAgICAgICAgLy8gYCJjaGFuZ2UiYCBldmVudCB3YXMgZmlyZWQuCiAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uIChhdHRyKSB7CiAgICAgICAgICAgIGlmIChhdHRyID09IG51bGwgfHwgIXRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcykgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXNbYXR0cl07CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEdldCBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIFN0YXRlIGF0IHRoZSB0aW1lIG9mIHRoZSBwcmV2aW91cwogICAgICAgIC8vIGAiY2hhbmdlImAgZXZlbnQuCiAgICAgICAgcHJldmlvdXNBdHRyaWJ1dGVzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIENyZWF0ZSBhIG5ldyBTdGF0ZSB3aXRoIGlkZW50aWNhbCBhdHRyaWJ1dGVzIHRvIHRoaXMgb25lLgogICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmF0dHJpYnV0ZXMpOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBSdW4gdmFsaWRhdGlvbiBhZ2FpbnN0IHRoZSBuZXh0IGNvbXBsZXRlIHNldCBvZiBTdGF0ZSBhdHRyaWJ1dGVzLAogICAgICAgIC8vIHJldHVybmluZyBgdHJ1ZWAgaWYgYWxsIGlzIHdlbGwuIE90aGVyd2lzZSwgZmlyZSBhbiBgImludmFsaWQiYCBldmVudC4KICAgICAgICBfdmFsaWRhdGU6IGZ1bmN0aW9uIChhdHRycywgb3B0aW9ucykgewogICAgICAgICAgICBpZiAoIW9wdGlvbnMudmFsaWRhdGUgfHwgIXRoaXMudmFsaWRhdGUpIHJldHVybiB0cnVlOwogICAgICAgICAgICBhdHRycyA9IF8uZXh0ZW5kKHt9LCB0aGlzLmF0dHJpYnV0ZXMsIGF0dHJzKTsKICAgICAgICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0aW9uRXJyb3IgPSB0aGlzLnZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSB8fCBudWxsOwogICAgICAgICAgICBpZiAoIWVycm9yKSByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdpbnZhbGlkJywgdGhpcywgZXJyb3IsIF8uZXh0ZW5kKG9wdGlvbnMgfHwge30sIHt2YWxpZGF0aW9uRXJyb3I6IGVycm9yfSkpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vICoqcGFyc2UqKiBjb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gdGhlIGhhc2ggb2YgYXR0cmlidXRlcyB0byBiZSBgc2V0YCBvbgogICAgICAgIC8vIHRoZSBtb2RlbC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaXMganVzdCB0byBwYXNzIHRoZSByZXNwb25zZSBhbG9uZy4KICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHJlc3AsIG9wdGlvbnMpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3A7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEEgbW9kZWwgaXMgbmV3IGlmIGl0IGhhcyBuZXZlciBiZWVuIHNhdmVkIHRvIHRoZSBzZXJ2ZXIsIGFuZCBsYWNrcyBhbiBpZC4KICAgICAgICBpc05ldzogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5pZCA9PSBudWxsOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBDaGVjayBpZiB0aGUgbW9kZWwgaXMgY3VycmVudGx5IGluIGEgdmFsaWQgc3RhdGUuCiAgICAgICAgaXNWYWxpZDogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlKHt9LCBfLmV4dGVuZChvcHRpb25zIHx8IHt9LCB7IHZhbGlkYXRlOiB0cnVlIH0pKTsKICAgICAgICB9CiAgICB9KTsKICAgIAogICAgXy5leHRlbmQoU3RhdGUucHJvdG90eXBlLCBFdmVudHMpOwogICAgCiAgICAvLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB3ZSB3YW50IHRvIGltcGxlbWVudCBvbiB0aGUgU3RhdGUuCiAgICB2YXIgc3RhdGVNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdwYWlycycsICdpbnZlcnQnLCAncGljaycsICdvbWl0J107CiAgICAKICAgIC8vIE1peCBpbiBlYWNoIFVuZGVyc2NvcmUgbWV0aG9kIGFzIGEgcHJveHkgdG8gYFN0YXRlI2F0dHJpYnV0ZXNgLgogICAgXy5lYWNoKHN0YXRlTWV0aG9kcywgZnVuY3Rpb24gKG1ldGhvZCkgewogICAgICAgIFN0YXRlLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgICAgICAgYXJncy51bnNoaWZ0KHRoaXMuYXR0cmlidXRlcyk7CiAgICAgICAgICAgIHJldHVybiBfW21ldGhvZF0uYXBwbHkoXywgYXJncyk7CiAgICAgICAgfTsKICAgIH0pOwoKICAgIC8vIEhhY2tib25lLkNvbGxlY3Rpb24KICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIAogICAgLy8gSWYgbW9kZWxzIHRlbmQgdG8gcmVwcmVzZW50IGEgc2luZ2xlIHJvdyBvZiBkYXRhLCBhIEhhY2tib25lIENvbGxlY3Rpb24gaXMKICAgIC8vIG1vcmUgYW5hbGFnb3VzIHRvIGEgdGFibGUgZnVsbCBvZiBkYXRhIC4uLiBvciBhIHNtYWxsIHNsaWNlIG9yIHBhZ2Ugb2YgdGhhdAogICAgLy8gdGFibGUsIG9yIGEgY29sbGVjdGlvbiBvZiByb3dzIHRoYXQgYmVsb25nIHRvZ2V0aGVyIGZvciBhIHBhcnRpY3VsYXIgcmVhc29uCiAgICAvLyAtLSBhbGwgb2YgdGhlIG1lc3NhZ2VzIGluIHRoaXMgcGFydGljdWxhciBmb2xkZXIsIGFsbCBvZiB0aGUgZG9jdW1lbnRzCiAgICAvLyBiZWxvbmdpbmcgdG8gdGhpcyBwYXJ0aWN1bGFyIGF1dGhvciwgYW5kIHNvIG9uLiBDb2xsZWN0aW9ucyBtYWludGFpbgogICAgLy8gaW5kZXhlcyBvZiB0aGVpciBtb2RlbHMsIGJvdGggaW4gb3JkZXIsIGFuZCBmb3IgbG9va3VwIGJ5IGBpZGAuCiAgICAKICAgIC8vIENyZWF0ZSBhIG5ldyAqKkNvbGxlY3Rpb24qKiwgcGVyaGFwcyB0byBjb250YWluIGEgc3BlY2lmaWMgdHlwZSBvZiBgbW9kZWxgLgogICAgLy8gSWYgYSBgY29tcGFyYXRvcmAgaXMgc3BlY2lmaWVkLCB0aGUgQ29sbGVjdGlvbiB3aWxsIG1haW50YWluCiAgICAvLyBpdHMgbW9kZWxzIGluIHNvcnQgb3JkZXIsIGFzIHRoZXkncmUgYWRkZWQgYW5kIHJlbW92ZWQuCiAgICAvLyBEZWZhdWx0IG9wdGlvbnMgZm9yIGBDb2xsZWN0aW9uI3NldGAuCiAgICB2YXIgc2V0T3B0aW9ucyA9IHthZGQ6IHRydWUsIHJlbW92ZTogdHJ1ZSwgbWVyZ2U6IHRydWV9OwogICAgdmFyIGFkZE9wdGlvbnMgPSB7YWRkOiB0cnVlLCByZW1vdmU6IGZhbHNlfTsKICAgIAogICAgLy8gRGVmaW5lIHRoZSBDb2xsZWN0aW9uJ3MgaW5oZXJpdGFibGUgbWV0aG9kcy4KICAgIHZhciBDb2xsZWN0aW9uID0gSGFja2JvbmUuQ29sbGVjdGlvbiA9IENvbXBvbmVudC5leHRlbmQoewogICAgICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAobW9kZWxzLCBvcHRpb25zKSB7CiAgICAgICAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICAgICAgICAgIGlmIChvcHRpb25zLm1vZGVsKSB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDsKICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29tcGFyYXRvciAhPT0gdm9pZCAwKSB0aGlzLmNvbXBhcmF0b3IgPSBvcHRpb25zLmNvbXBhcmF0b3I7CiAgICAgICAgICAgIHRoaXMuX3Jlc2V0KCk7CiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICBpZiAobW9kZWxzKSB0aGlzLnJlc2V0KG1vZGVscywgXy5leHRlbmQoe3NpbGVudDogdHJ1ZX0sIG9wdGlvbnMpKTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gVGhlIGRlZmF1bHQgbW9kZWwgZm9yIGEgY29sbGVjdGlvbiBpcyBqdXN0IGEgKipIYWNrYm9uZS5TdGF0ZSoqLgogICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIG92ZXJyaWRkZW4gaW4gbW9zdCBjYXNlcy4KICAgICAgICBtb2RlbDogU3RhdGUsCiAgICAKICAgICAgICAvLyBUaGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhIENvbGxlY3Rpb24gaXMgYW4gYXJyYXkgb2YgdGhlCiAgICAgICAgLy8gbW9kZWxzJyBhdHRyaWJ1dGVzLgogICAgICAgIHRvSlNPTjogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChtb2RlbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsLnRvSlNPTihvcHRpb25zKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFByb3h5IGBIYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0LgogICAgICAgIHN5bmM6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIEhhY2tib25lLnN5bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gQWRkIGEgbW9kZWwsIG9yIGxpc3Qgb2YgbW9kZWxzIHRvIHRoZSBzZXQuCiAgICAgICAgYWRkOiBmdW5jdGlvbiAobW9kZWxzLCBvcHRpb25zKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldChtb2RlbHMsIF8uZXh0ZW5kKHttZXJnZTogZmFsc2V9LCBvcHRpb25zLCBhZGRPcHRpb25zKSk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFJlbW92ZSBhIG1vZGVsLCBvciBhIGxpc3Qgb2YgbW9kZWxzIGZyb20gdGhlIHNldC4KICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChtb2RlbHMsIG9wdGlvbnMpIHsKICAgICAgICAgICAgbW9kZWxzID0gXy5pc0FycmF5KG1vZGVscykgPyBtb2RlbHMuc2xpY2UoKSA6IFttb2RlbHNdOwogICAgICAgICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgICAgICAgICB2YXIgaSwgbCwgaW5kZXgsIG1vZGVsOwogICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gbW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgbW9kZWwgPSB0aGlzLmdldChtb2RlbHNbaV0pOwogICAgICAgICAgICAgICAgaWYgKCFtb2RlbCkgY29udGludWU7CiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fYnlJZFttb2RlbC5pZF07CiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fYnlJZFttb2RlbC5jaWRdOwogICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLmluZGV4T2YobW9kZWwpOwogICAgICAgICAgICAgICAgdGhpcy5tb2RlbHMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoLS07CiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5pbmRleCA9IGluZGV4OwogICAgICAgICAgICAgICAgICAgIG1vZGVsLnRyaWdnZXIoJ3JlbW92ZScsIG1vZGVsLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZShtb2RlbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFJlbW92ZXMgYWxsIG1vZGVscyBmcm9tIHRoZSBjb2xsZWN0aW9uCiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgdmFyIG1vZGVscyA9IHRoaXMubW9kZWxzOwogICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmUobW9kZWxzLCBvcHRpb25zKTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gVXBkYXRlIGEgY29sbGVjdGlvbiBieSBgc2V0YC1pbmcgYSBuZXcgbGlzdCBvZiBtb2RlbHMsIGFkZGluZyBuZXcgb25lcywKICAgICAgICAvLyByZW1vdmluZyBtb2RlbHMgdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnQsIGFuZCBtZXJnaW5nIG1vZGVscyB0aGF0CiAgICAgICAgLy8gYWxyZWFkeSBleGlzdCBpbiB0aGUgY29sbGVjdGlvbiwgYXMgbmVjZXNzYXJ5LiBTaW1pbGFyIHRvICoqU3RhdGUjc2V0KiosCiAgICAgICAgLy8gdGhlIGNvcmUgb3BlcmF0aW9uIGZvciB1cGRhdGluZyB0aGUgZGF0YSBjb250YWluZWQgYnkgdGhlIGNvbGxlY3Rpb24uCiAgICAgICAgc2V0OiBmdW5jdGlvbiAobW9kZWxzLCBvcHRpb25zKSB7CiAgICAgICAgICAgIG9wdGlvbnMgPSBfLmRlZmF1bHRzKHt9LCBvcHRpb25zLCBzZXRPcHRpb25zKTsKICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFyc2UpIG1vZGVscyA9IHRoaXMucGFyc2UobW9kZWxzLCBvcHRpb25zKTsKICAgICAgICAgICAgaWYgKCFfLmlzQXJyYXkobW9kZWxzKSkgbW9kZWxzID0gbW9kZWxzID8gW21vZGVsc10gOiBbXTsKICAgICAgICAgICAgdmFyIGksIGwsIG1vZGVsLCBhdHRycywgZXhpc3RpbmcsIHNvcnQ7CiAgICAgICAgICAgIHZhciBhdCA9IG9wdGlvbnMuYXQ7CiAgICAgICAgICAgIHZhciBzb3J0YWJsZSA9IHRoaXMuY29tcGFyYXRvciAmJiAoYXQgPT0gbnVsbCkgJiYgb3B0aW9ucy5zb3J0ICE9PSBmYWxzZTsKICAgICAgICAgICAgdmFyIHNvcnRBdHRyID0gXy5pc1N0cmluZyh0aGlzLmNvbXBhcmF0b3IpID8gdGhpcy5jb21wYXJhdG9yIDogbnVsbDsKICAgICAgICAgICAgdmFyIHRvQWRkID0gW10sIHRvUmVtb3ZlID0gW10sIG1vZGVsTWFwID0ge307CiAgICAgICAgICAgIHZhciBhZGQgPSBvcHRpb25zLmFkZCwgbWVyZ2UgPSBvcHRpb25zLm1lcmdlLCByZW1vdmUgPSBvcHRpb25zLnJlbW92ZTsKICAgICAgICAgICAgdmFyIG9yZGVyID0gIXNvcnRhYmxlICYmIGFkZCAmJiByZW1vdmUgPyBbXSA6IGZhbHNlOwogICAgCiAgICAgICAgICAgIC8vIFR1cm4gYmFyZSBvYmplY3RzIGludG8gbW9kZWwgcmVmZXJlbmNlcywgYW5kIHByZXZlbnQgaW52YWxpZCBtb2RlbHMKICAgICAgICAgICAgLy8gZnJvbSBiZWluZyBhZGRlZC4KICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmICghKG1vZGVsID0gdGhpcy5fcHJlcGFyZU1vZGVsKGF0dHJzID0gbW9kZWxzW2ldLCBvcHRpb25zKSkpIGNvbnRpbnVlOwogICAgCiAgICAgICAgICAgICAgICAvLyBJZiBhIGR1cGxpY2F0ZSBpcyBmb3VuZCwgcHJldmVudCBpdCBmcm9tIGJlaW5nIGFkZGVkIGFuZAogICAgICAgICAgICAgICAgLy8gb3B0aW9uYWxseSBtZXJnZSBpdCBpbnRvIHRoZSBleGlzdGluZyBtb2RlbC4KICAgICAgICAgICAgICAgIGlmIChleGlzdGluZyA9IHRoaXMuZ2V0KG1vZGVsKSkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmUpIG1vZGVsTWFwW2V4aXN0aW5nLmNpZF0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGlmIChtZXJnZSkgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRycyA9IGF0dHJzID09PSBtb2RlbCA/IG1vZGVsLmF0dHJpYnV0ZXMgOiBvcHRpb25zLl9hdHRyczsKICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3Rpbmcuc2V0KGF0dHJzLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRhYmxlICYmICFzb3J0ICYmIGV4aXN0aW5nLmhhc0NoYW5nZWQoc29ydEF0dHIpKSBzb3J0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbmV3IG1vZGVsLCBwdXNoIGl0IHRvIHRoZSBgdG9BZGRgIGxpc3QuCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFkZCkgewogICAgICAgICAgICAgICAgICAgIHRvQWRkLnB1c2gobW9kZWwpOwogICAgCiAgICAgICAgICAgICAgICAgICAgLy8gTGlzdGVuIHRvIGFkZGVkIG1vZGVscycgZXZlbnRzLCBhbmQgaW5kZXggbW9kZWxzIGZvciBsb29rdXAgYnkKICAgICAgICAgICAgICAgICAgICAvLyBgaWRgIGFuZCBieSBgY2lkYC4KICAgICAgICAgICAgICAgICAgICBtb2RlbC5vbignYWxsJywgdGhpcy5fb25Nb2RlbEV2ZW50LCB0aGlzKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9ieUlkW21vZGVsLmNpZF0gPSBtb2RlbDsKICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwuaWQgIT0gbnVsbCkgdGhpcy5fYnlJZFttb2RlbC5pZF0gPSBtb2RlbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChvcmRlcikgb3JkZXIucHVzaChleGlzdGluZyB8fCBtb2RlbCk7CiAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5fYXR0cnM7CiAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICAvLyBSZW1vdmUgbm9uZXhpc3RlbnQgbW9kZWxzIGlmIGFwcHJvcHJpYXRlLgogICAgICAgICAgICBpZiAocmVtb3ZlKSB7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyArK2kpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIW1vZGVsTWFwWyhtb2RlbCA9IHRoaXMubW9kZWxzW2ldKS5jaWRdKSB0b1JlbW92ZS5wdXNoKG1vZGVsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0b1JlbW92ZS5sZW5ndGgpIHRoaXMucmVtb3ZlKHRvUmVtb3ZlLCBvcHRpb25zKTsKICAgICAgICAgICAgfQogICAgCiAgICAgICAgICAgIC8vIFNlZSBpZiBzb3J0aW5nIGlzIG5lZWRlZCwgdXBkYXRlIGBsZW5ndGhgIGFuZCBzcGxpY2UgaW4gbmV3IG1vZGVscy4KICAgICAgICAgICAgaWYgKHRvQWRkLmxlbmd0aCB8fCAob3JkZXIgJiYgb3JkZXIubGVuZ3RoKSkgewogICAgICAgICAgICAgICAgaWYgKHNvcnRhYmxlKSBzb3J0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoICs9IHRvQWRkLmxlbmd0aDsKICAgICAgICAgICAgICAgIGlmIChhdCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgc3BsaWNlLmFwcGx5KHRoaXMubW9kZWxzLCBbYXQsIDBdLmNvbmNhdCh0b0FkZCkpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXIpIHRoaXMubW9kZWxzLmxlbmd0aCA9IDA7CiAgICAgICAgICAgICAgICAgICAgcHVzaC5hcHBseSh0aGlzLm1vZGVscywgb3JkZXIgfHwgdG9BZGQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgLy8gU2lsZW50bHkgc29ydCB0aGUgY29sbGVjdGlvbiBpZiBhcHByb3ByaWF0ZS4KICAgICAgICAgICAgaWYgKHNvcnQpIHRoaXMuc29ydCh7c2lsZW50OiB0cnVlfSk7CiAgICAKICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2lsZW50KSByZXR1cm4gdGhpczsKICAgIAogICAgICAgICAgICAvLyBUcmlnZ2VyIGBhZGRgIGV2ZW50cy4KICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRvQWRkLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgKG1vZGVsID0gdG9BZGRbaV0pLnRyaWdnZXIoJ2FkZCcsIG1vZGVsLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgfQogICAgCiAgICAgICAgICAgIC8vIFRyaWdnZXIgYHNvcnRgIGlmIHRoZSBjb2xsZWN0aW9uIHdhcyBzb3J0ZWQuCiAgICAgICAgICAgIGlmIChzb3J0IHx8IChvcmRlciAmJiBvcmRlci5sZW5ndGgpKSB0aGlzLnRyaWdnZXIoJ3NvcnQnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFdoZW4geW91IGhhdmUgbW9yZSBpdGVtcyB0aGFuIHlvdSB3YW50IHRvIGFkZCBvciByZW1vdmUgaW5kaXZpZHVhbGx5LAogICAgICAgIC8vIHlvdSBjYW4gcmVzZXQgdGhlIGVudGlyZSBzZXQgd2l0aCBhIG5ldyBsaXN0IG9mIG1vZGVscywgd2l0aG91dCBmaXJpbmcKICAgICAgICAvLyBhbnkgZ3JhbnVsYXIgYGFkZGAgb3IgYHJlbW92ZWAgZXZlbnRzLiBGaXJlcyBgcmVzZXRgIHdoZW4gZmluaXNoZWQuCiAgICAgICAgLy8gVXNlZnVsIGZvciBidWxrIG9wZXJhdGlvbnMgYW5kIG9wdGltaXphdGlvbnMuCiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uIChtb2RlbHMsIG9wdGlvbnMpIHsKICAgICAgICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLm1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZSh0aGlzLm1vZGVsc1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3B0aW9ucy5wcmV2aW91c01vZGVscyA9IHRoaXMubW9kZWxzOwogICAgICAgICAgICB0aGlzLl9yZXNldCgpOwogICAgICAgICAgICB0aGlzLmFkZChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7CiAgICAgICAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMudHJpZ2dlcigncmVzZXQnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEFkZCBhIG1vZGVsIHRvIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uCiAgICAgICAgcHVzaDogZnVuY3Rpb24gKG1vZGVsLCBvcHRpb25zKSB7CiAgICAgICAgICAgIG1vZGVsID0gdGhpcy5fcHJlcGFyZU1vZGVsKG1vZGVsLCBvcHRpb25zKTsKICAgICAgICAgICAgdGhpcy5hZGQobW9kZWwsIF8uZXh0ZW5kKHthdDogdGhpcy5sZW5ndGh9LCBvcHRpb25zKSk7CiAgICAgICAgICAgIHJldHVybiBtb2RlbDsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gUmVtb3ZlIGEgbW9kZWwgZnJvbSB0aGUgZW5kIG9mIHRoZSBjb2xsZWN0aW9uLgogICAgICAgIHBvcDogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5hdCh0aGlzLmxlbmd0aCAtIDEpOwogICAgICAgICAgICB0aGlzLnJlbW92ZShtb2RlbCwgb3B0aW9ucyk7CiAgICAgICAgICAgIHJldHVybiBtb2RlbDsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gQWRkIGEgbW9kZWwgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgY29sbGVjdGlvbi4KICAgICAgICB1bnNoaWZ0OiBmdW5jdGlvbiAobW9kZWwsIG9wdGlvbnMpIHsKICAgICAgICAgICAgbW9kZWwgPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWwsIG9wdGlvbnMpOwogICAgICAgICAgICB0aGlzLmFkZChtb2RlbCwgXy5leHRlbmQoe2F0OiAwfSwgb3B0aW9ucykpOwogICAgICAgICAgICByZXR1cm4gbW9kZWw7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgY29sbGVjdGlvbi4KICAgICAgICBzaGlmdDogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgdmFyIG1vZGVsID0gdGhpcy5hdCgwKTsKICAgICAgICAgICAgdGhpcy5yZW1vdmUobW9kZWwsIG9wdGlvbnMpOwogICAgICAgICAgICByZXR1cm4gbW9kZWw7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFNsaWNlIG91dCBhIHN1Yi1hcnJheSBvZiBtb2RlbHMgZnJvbSB0aGUgY29sbGVjdGlvbi4KICAgICAgICBzbGljZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gc2xpY2UuYXBwbHkodGhpcy5tb2RlbHMsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEdldCBhIG1vZGVsIGZyb20gdGhlIHNldCBieSBpZC4KICAgICAgICBnZXQ6IGZ1bmN0aW9uIChvYmopIHsKICAgICAgICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdm9pZCAwOwogICAgICAgICAgICByZXR1cm4gdGhpcy5fYnlJZFtvYmouaWRdIHx8IHRoaXMuX2J5SWRbb2JqLmNpZF0gfHwgdGhpcy5fYnlJZFtvYmpdOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBHZXQgdGhlIG1vZGVsIGF0IHRoZSBnaXZlbiBpbmRleC4KICAgICAgICBhdDogZnVuY3Rpb24gKGluZGV4KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsc1tpbmRleF07CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFJldHVybiBtb2RlbHMgd2l0aCBtYXRjaGluZyBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIHNpbXBsZSBjYXNlcyBvZgogICAgICAgIC8vIGBmaWx0ZXJgLgogICAgICAgIHdoZXJlOiBmdW5jdGlvbiAoYXR0cnMsIGZpcnN0KSB7CiAgICAgICAgICAgIGlmIChfLmlzRW1wdHkoYXR0cnMpKSByZXR1cm4gZmlyc3QgPyB2b2lkIDAgOiBbXTsKICAgICAgICAgICAgcmV0dXJuIHRoaXNbZmlyc3QgPyAnZmluZCcgOiAnZmlsdGVyJ10oZnVuY3Rpb24gKG1vZGVsKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnMuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnNba2V5XSAhPT0gbW9kZWwuZ2V0KGtleSkpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFJldHVybiB0aGUgZmlyc3QgbW9kZWwgd2l0aCBtYXRjaGluZyBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIHNpbXBsZSBjYXNlcwogICAgICAgIC8vIG9mIGBmaW5kYC4KICAgICAgICBmaW5kV2hlcmU6IGZ1bmN0aW9uIChhdHRycykgewogICAgICAgICAgICByZXR1cm4gdGhpcy53aGVyZShhdHRycywgdHJ1ZSk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEZvcmNlIHRoZSBjb2xsZWN0aW9uIHRvIHJlLXNvcnQgaXRzZWxmLiBZb3UgZG9uJ3QgbmVlZCB0byBjYWxsIHRoaXMgdW5kZXIKICAgICAgICAvLyBub3JtYWwgY2lyY3Vtc3RhbmNlcywgYXMgdGhlIHNldCB3aWxsIG1haW50YWluIHNvcnQgb3JkZXIgYXMgZWFjaCBpdGVtCiAgICAgICAgLy8gaXMgYWRkZWQuCiAgICAgICAgc29ydDogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYgKCF0aGlzLmNvbXBhcmF0b3IpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNvcnQgYSBzZXQgd2l0aG91dCBhIGNvbXBhcmF0b3InKTsKICAgICAgICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgIAogICAgICAgICAgICAvLyBSdW4gc29ydCBiYXNlZCBvbiB0eXBlIG9mIGBjb21wYXJhdG9yYC4KICAgICAgICAgICAgaWYgKF8uaXNTdHJpbmcodGhpcy5jb21wYXJhdG9yKSB8fCB0aGlzLmNvbXBhcmF0b3IubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVscyA9IHRoaXMuc29ydEJ5KHRoaXMuY29tcGFyYXRvciwgdGhpcyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLm1vZGVscy5zb3J0KF8uYmluZCh0aGlzLmNvbXBhcmF0b3IsIHRoaXMpKTsKICAgICAgICAgICAgfQogICAgCiAgICAgICAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMudHJpZ2dlcignc29ydCcsIHRoaXMsIG9wdGlvbnMpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gRmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2ggYSBtb2RlbCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMKICAgICAgICAvLyB0byBtYWludGFpbiBvcmRlci4KICAgICAgICBzb3J0ZWRJbmRleDogZnVuY3Rpb24gKG1vZGVsLCB2YWx1ZSwgY29udGV4dCkgewogICAgICAgICAgICB2YWx1ZSB8fCAodmFsdWUgPSB0aGlzLmNvbXBhcmF0b3IpOwogICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUgOiBmdW5jdGlvbiAobW9kZWwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBtb2RlbC5nZXQodmFsdWUpOwogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gXy5zb3J0ZWRJbmRleCh0aGlzLm1vZGVscywgbW9kZWwsIGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gUGx1Y2sgYW4gYXR0cmlidXRlIGZyb20gZWFjaCBtb2RlbCBpbiB0aGUgY29sbGVjdGlvbi4KICAgICAgICBwbHVjazogZnVuY3Rpb24gKGF0dHIpIHsKICAgICAgICAgICAgcmV0dXJuIF8uaW52b2tlKHRoaXMubW9kZWxzLCAnZ2V0JywgYXR0cik7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEZldGNoIHRoZSBkZWZhdWx0IHNldCBvZiBtb2RlbHMgZm9yIHRoaXMgY29sbGVjdGlvbiwgcmVzZXR0aW5nIHRoZQogICAgICAgIC8vIGNvbGxlY3Rpb24gd2hlbiB0aGV5IGFycml2ZS4gSWYgYHJlc2V0OiB0cnVlYCBpcyBwYXNzZWQsIHRoZSByZXNwb25zZQogICAgICAgIC8vIGRhdGEgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCB0aGUgYHJlc2V0YCBtZXRob2QgaW5zdGVhZCBvZiBgc2V0YC4KICAgICAgICBmZXRjaDogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CiAgICAgICAgICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB2b2lkIDApIG9wdGlvbnMucGFyc2UgPSB0cnVlOwogICAgICAgICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzOwogICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbiAocmVzcCkgewogICAgICAgICAgICAgICAgdmFyIG1ldGhvZCA9IG9wdGlvbnMucmVzZXQgPyAncmVzZXQnIDogJ3NldCc7CiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uW21ldGhvZF0ocmVzcCwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhjb2xsZWN0aW9uLCByZXNwLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24udHJpZ2dlcignc3luYycsIGNvbGxlY3Rpb24sIHJlc3AsIG9wdGlvbnMpOwogICAgICAgICAgICB9OwogICAgICAgICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmMoJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgbW9kZWwgaW4gdGhpcyBjb2xsZWN0aW9uLiBBZGQgdGhlIG1vZGVsIHRvIHRoZQogICAgICAgIC8vIGNvbGxlY3Rpb24gaW1tZWRpYXRlbHksIHVubGVzcyBgd2FpdDogdHJ1ZWAgaXMgcGFzc2VkLCBpbiB3aGljaCBjYXNlIHdlCiAgICAgICAgLy8gd2FpdCBmb3IgdGhlIHNlcnZlciB0byBhZ3JlZS4KICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIChtb2RlbCwgb3B0aW9ucykgewogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgICAgICAgaWYgKCEobW9kZWwgPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWwsIG9wdGlvbnMpKSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBpZiAoIW9wdGlvbnMud2FpdCkgdGhpcy5hZGQobW9kZWwsIG9wdGlvbnMpOwogICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7CiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzOwogICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbiAobW9kZWwsIHJlc3AsIG9wdGlvbnMpIHsKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLndhaXQpIGNvbGxlY3Rpb24uYWRkKG1vZGVsLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgbW9kZWwgaW5zdGFuY2VvZiBNb2RlbCAmJiBtb2RlbC5zYXZlKG51bGwsIG9wdGlvbnMpOwogICAgICAgICAgICByZXR1cm4gbW9kZWw7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vICoqcGFyc2UqKiBjb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gYSBsaXN0IG9mIG1vZGVscyB0byBiZSBhZGRlZCB0byB0aGUKICAgICAgICAvLyBjb2xsZWN0aW9uLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgaXQgdGhyb3VnaC4KICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHJlc3AsIG9wdGlvbnMpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3A7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIENyZWF0ZSBhIG5ldyBjb2xsZWN0aW9uIHdpdGggYW4gaWRlbnRpY2FsIGxpc3Qgb2YgbW9kZWxzIGFzIHRoaXMgb25lLgogICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLm1vZGVscyk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFByaXZhdGUgbWV0aG9kIHRvIHJlc2V0IGFsbCBpbnRlcm5hbCBzdGF0ZS4gQ2FsbGVkIHdoZW4gdGhlIGNvbGxlY3Rpb24KICAgICAgICAvLyBpcyBmaXJzdCBpbml0aWFsaXplZCBvciByZXNldC4KICAgICAgICBfcmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5sZW5ndGggPSAwOwogICAgICAgICAgICB0aGlzLm1vZGVscyA9IFtdOwogICAgICAgICAgICB0aGlzLl9ieUlkID0ge307CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFByZXBhcmUgYSBoYXNoIG9mIGF0dHJpYnV0ZXMgKG9yIG90aGVyIG1vZGVsKSB0byBiZSBhZGRlZCB0byB0aGlzCiAgICAgICAgLy8gY29sbGVjdGlvbi4KICAgICAgICBfcHJlcGFyZU1vZGVsOiBmdW5jdGlvbiAoYXR0cnMsIG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYgKGF0dHJzIGluc3RhbmNlb2YgU3RhdGUpIHsKICAgICAgICAgICAgICAgIGlmICghYXR0cnMuY29sbGVjdGlvbikgYXR0cnMuY29sbGVjdGlvbiA9IHRoaXM7CiAgICAgICAgICAgICAgICByZXR1cm4gYXR0cnM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgICAgICAgb3B0aW9ucy5jb2xsZWN0aW9uID0gdGhpczsKICAgICAgICAgICAgdmFyIG1vZGVsID0gbmV3IHRoaXMubW9kZWwoYXR0cnMsIG9wdGlvbnMpOwogICAgICAgICAgICBpZiAoIW1vZGVsLnZhbGlkYXRpb25FcnJvcikgcmV0dXJuIG1vZGVsOwogICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2ludmFsaWQnLCB0aGlzLCBhdHRycywgb3B0aW9ucyk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gSW50ZXJuYWwgbWV0aG9kIHRvIHNldmVyIGEgbW9kZWwncyB0aWVzIHRvIGEgY29sbGVjdGlvbi4KICAgICAgICBfcmVtb3ZlUmVmZXJlbmNlOiBmdW5jdGlvbiAobW9kZWwpIHsKICAgICAgICAgICAgaWYgKHRoaXMgPT09IG1vZGVsLmNvbGxlY3Rpb24pIGRlbGV0ZSBtb2RlbC5jb2xsZWN0aW9uOwogICAgICAgICAgICBtb2RlbC5vZmYoJ2FsbCcsIHRoaXMuX29uTW9kZWxFdmVudCwgdGhpcyk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEludGVybmFsIG1ldGhvZCBjYWxsZWQgZXZlcnkgdGltZSBhIG1vZGVsIGluIHRoZSBzZXQgZmlyZXMgYW4gZXZlbnQuCiAgICAgICAgLy8gU2V0cyBuZWVkIHRvIHVwZGF0ZSB0aGVpciBpbmRleGVzIHdoZW4gbW9kZWxzIGNoYW5nZSBpZHMuIEFsbCBvdGhlcgogICAgICAgIC8vIGV2ZW50cyBzaW1wbHkgcHJveHkgdGhyb3VnaC4gImFkZCIgYW5kICJyZW1vdmUiIGV2ZW50cyB0aGF0IG9yaWdpbmF0ZQogICAgICAgIC8vIGluIG90aGVyIGNvbGxlY3Rpb25zIGFyZSBpZ25vcmVkLgogICAgICAgIF9vbk1vZGVsRXZlbnQ6IGZ1bmN0aW9uIChldmVudCwgbW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYgKChldmVudCA9PT0gJ2FkZCcgfHwgZXZlbnQgPT09ICdyZW1vdmUnKSAmJiBjb2xsZWN0aW9uICE9PSB0aGlzKSByZXR1cm47CiAgICAgICAgICAgIGlmIChldmVudCA9PT0gJ2Rlc3Ryb3knKSB0aGlzLnJlbW92ZShtb2RlbCwgb3B0aW9ucyk7CiAgICAgICAgICAgIGlmIChtb2RlbCAmJiBldmVudCA9PT0gJ2NoYW5nZTonICsgbW9kZWwuaWRBdHRyaWJ1dGUpIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLnByZXZpb3VzKG1vZGVsLmlkQXR0cmlidXRlKV07CiAgICAgICAgICAgICAgICBpZiAobW9kZWwuaWQgIT0gbnVsbCkgdGhpcy5fYnlJZFttb2RlbC5pZF0gPSBtb2RlbDsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnRyaWdnZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9CiAgICAKICAgIH0sIEV2ZW50cyk7CiAgICAKICAgIF8uZXh0ZW5kKENvbGxlY3Rpb24ucHJvdG90eXBlLCBFdmVudHMpOwogICAgCiAgICAvLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB3ZSB3YW50IHRvIGltcGxlbWVudCBvbiB0aGUgQ29sbGVjdGlvbi4KICAgIC8vIDkwJSBvZiB0aGUgY29yZSB1c2VmdWxuZXNzIG9mIEhhY2tib25lIENvbGxlY3Rpb25zIGlzIGFjdHVhbGx5IGltcGxlbWVudGVkCiAgICAvLyByaWdodCBoZXJlOgogICAgdmFyIG1ldGhvZHMgPSBbJ2ZvckVhY2gnLCAnZWFjaCcsICdtYXAnLCAnY29sbGVjdCcsICdyZWR1Y2UnLCAnZm9sZGwnLAogICAgICAgICdpbmplY3QnLCAncmVkdWNlUmlnaHQnLCAnZm9sZHInLCAnZmluZCcsICdkZXRlY3QnLCAnZmlsdGVyJywgJ3NlbGVjdCcsCiAgICAgICAgJ3JlamVjdCcsICdldmVyeScsICdhbGwnLCAnc29tZScsICdhbnknLCAnaW5jbHVkZScsICdjb250YWlucycsICdpbnZva2UnLAogICAgICAgICdtYXgnLCAnbWluJywgJ3RvQXJyYXknLCAnc2l6ZScsICdmaXJzdCcsICdoZWFkJywgJ3Rha2UnLCAnaW5pdGlhbCcsICdyZXN0JywKICAgICAgICAndGFpbCcsICdkcm9wJywgJ2xhc3QnLCAnd2l0aG91dCcsICdkaWZmZXJlbmNlJywgJ2luZGV4T2YnLCAnc2h1ZmZsZScsCiAgICAgICAgJ2xhc3RJbmRleE9mJywgJ2lzRW1wdHknLCAnY2hhaW4nXTsKICAgIAogICAgLy8gTWl4IGluIGVhY2ggVW5kZXJzY29yZSBtZXRob2QgYXMgYSBwcm94eSB0byBgQ29sbGVjdGlvbiNtb2RlbHNgLgogICAgXy5lYWNoKG1ldGhvZHMsIGZ1bmN0aW9uIChtZXRob2QpIHsKICAgICAgICBDb2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgICAgICAgYXJncy51bnNoaWZ0KHRoaXMubW9kZWxzKTsKICAgICAgICAgICAgcmV0dXJuIF9bbWV0aG9kXS5hcHBseShfLCBhcmdzKTsKICAgICAgICB9OwogICAgfSk7CiAgICAKICAgIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHRha2UgYSBwcm9wZXJ0eSBuYW1lIGFzIGFuIGFyZ3VtZW50LgogICAgdmFyIGF0dHJpYnV0ZU1ldGhvZHMgPSBbJ2dyb3VwQnknLCAnY291bnRCeScsICdzb3J0QnknXTsKICAgIAogICAgLy8gVXNlIGF0dHJpYnV0ZXMgaW5zdGVhZCBvZiBwcm9wZXJ0aWVzLgogICAgXy5lYWNoKGF0dHJpYnV0ZU1ldGhvZHMsIGZ1bmN0aW9uIChtZXRob2QpIHsKICAgICAgICBDb2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gKHZhbHVlLCBjb250ZXh0KSB7CiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IGZ1bmN0aW9uIChtb2RlbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsLmdldCh2YWx1ZSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiBfW21ldGhvZF0odGhpcy5tb2RlbHMsIGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgICAgICB9OwogICAgfSk7CgogICAgLy8gSGFja2JvbmUuSGlzdG9yeQogICAgLy8gLS0tLS0tLS0tLS0tLS0tLQogICAgCiAgICAvLyBIYW5kbGVzIGNyb3NzLWJyb3dzZXIgaGlzdG9yeSBtYW5hZ2VtZW50LCBiYXNlZCBvbiBlaXRoZXIKICAgIC8vIFtwdXNoU3RhdGVdKGh0dHA6Ly9kaXZlaW50b2h0bWw1LmluZm8vaGlzdG9yeS5odG1sKSBhbmQgcmVhbCBVUkxzLCBvcgogICAgLy8gW29uaGFzaGNoYW5nZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9ET00vd2luZG93Lm9uaGFzaGNoYW5nZSkKICAgIC8vIGFuZCBVUkwgZnJhZ21lbnRzLiBJZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBuZWl0aGVyIChvbGQgSUUsIG5hdGNoKSwKICAgIC8vIGZhbGxzIGJhY2sgdG8gcG9sbGluZy4KICAgIHZhciBIaXN0b3J5ID0gSGFja2JvbmUuSGlzdG9yeSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLmhhbmRsZXJzID0gW107CiAgICAgICAgXy5iaW5kQWxsKHRoaXMsICdjaGVja1VybCcpOwogICAgCiAgICAgICAgLy8gRW5zdXJlIHRoYXQgYEhpc3RvcnlgIGNhbiBiZSB1c2VkIG91dHNpZGUgb2YgdGhlIGJyb3dzZXIuCiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIHRoaXMubG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247CiAgICAgICAgICAgIHRoaXMuaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5OwogICAgICAgIH0KICAgIH07CiAgICAKICAgIC8vIENhY2hlZCByZWdleCBmb3Igc3RyaXBwaW5nIGEgbGVhZGluZyBoYXNoL3NsYXNoIGFuZCB0cmFpbGluZyBzcGFjZS4KICAgIHZhciByb3V0ZVN0cmlwcGVyID0gL15bI1wvXXxccyskL2c7CiAgICAKICAgIC8vIENhY2hlZCByZWdleCBmb3Igc3RyaXBwaW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMuCiAgICB2YXIgcm9vdFN0cmlwcGVyID0gL15cLyt8XC8rJC9nOwogICAgCiAgICAvLyBDYWNoZWQgcmVnZXggZm9yIGRldGVjdGluZyBNU0lFLgogICAgdmFyIGlzRXhwbG9yZXIgPSAvbXNpZSBbXHcuXSsvOwogICAgCiAgICAvLyBDYWNoZWQgcmVnZXggZm9yIHJlbW92aW5nIGEgdHJhaWxpbmcgc2xhc2guCiAgICB2YXIgdHJhaWxpbmdTbGFzaCA9IC9cLyQvOwogICAgCiAgICAvLyBIYXMgdGhlIGhpc3RvcnkgaGFuZGxpbmcgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQ/CiAgICBIaXN0b3J5LnN0YXJ0ZWQgPSBmYWxzZTsKICAgIAogICAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkhhY2tib25lLkhpc3RvcnkqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLgogICAgXy5leHRlbmQoSGlzdG9yeS5wcm90b3R5cGUsIEV2ZW50cywgewogICAgCiAgICAgICAgLy8gVGhlIGRlZmF1bHQgaW50ZXJ2YWwgdG8gcG9sbCBmb3IgaGFzaCBjaGFuZ2VzLCBpZiBuZWNlc3NhcnksIGlzCiAgICAgICAgLy8gdHdlbnR5IHRpbWVzIGEgc2Vjb25kLgogICAgICAgIGludGVydmFsOiA1MCwKICAgIAogICAgICAgIC8vIEdldHMgdGhlIHRydWUgaGFzaCB2YWx1ZS4gQ2Fubm90IHVzZSBsb2NhdGlvbi5oYXNoIGRpcmVjdGx5IGR1ZSB0byBidWcKICAgICAgICAvLyBpbiBGaXJlZm94IHdoZXJlIGxvY2F0aW9uLmhhc2ggd2lsbCBhbHdheXMgYmUgZGVjb2RlZC4KICAgICAgICBnZXRIYXNoOiBmdW5jdGlvbiAod2luZG93KSB7CiAgICAgICAgICAgIHZhciBtYXRjaCA9ICh3aW5kb3cgfHwgdGhpcykubG9jYXRpb24uaHJlZi5tYXRjaCgvIyguKikkLyk7CiAgICAgICAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJyc7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEdldCB0aGUgY3Jvc3MtYnJvd3NlciBub3JtYWxpemVkIFVSTCBmcmFnbWVudCwgZWl0aGVyIGZyb20gdGhlIFVSTCwKICAgICAgICAvLyB0aGUgaGFzaCwgb3IgdGhlIG92ZXJyaWRlLgogICAgICAgIGdldEZyYWdtZW50OiBmdW5jdGlvbiAoZnJhZ21lbnQsIGZvcmNlUHVzaFN0YXRlKSB7CiAgICAgICAgICAgIGlmIChmcmFnbWVudCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlIHx8ICF0aGlzLl93YW50c0hhc2hDaGFuZ2UgfHwgZm9yY2VQdXNoU3RhdGUpIHsKICAgICAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMubG9jYXRpb24ucGF0aG5hbWU7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJvb3QgPSB0aGlzLnJvb3QucmVwbGFjZSh0cmFpbGluZ1NsYXNoLCAnJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFmcmFnbWVudC5pbmRleE9mKHJvb3QpKSBmcmFnbWVudCA9IGZyYWdtZW50LnNsaWNlKHJvb3QubGVuZ3RoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmdldEhhc2goKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZnJhZ21lbnQucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFN0YXJ0IHRoZSBoYXNoIGNoYW5nZSBoYW5kbGluZywgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgY3VycmVudCBVUkwgbWF0Y2hlcwogICAgICAgIC8vIGFuIGV4aXN0aW5nIHJvdXRlLCBhbmQgYGZhbHNlYCBvdGhlcndpc2UuCiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICAgICAgICAgIGlmIChIaXN0b3J5LnN0YXJ0ZWQpIHRocm93IG5ldyBFcnJvcigiSGFja2JvbmUuaGlzdG9yeSBoYXMgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQiKTsKICAgICAgICAgICAgSGlzdG9yeS5zdGFydGVkID0gdHJ1ZTsKICAgIAogICAgICAgICAgICAvLyBGaWd1cmUgb3V0IHRoZSBpbml0aWFsIGNvbmZpZ3VyYXRpb24uIERvIHdlIG5lZWQgYW4gaWZyYW1lPwogICAgICAgICAgICAvLyBJcyBwdXNoU3RhdGUgZGVzaXJlZCAuLi4gaXMgaXQgYXZhaWxhYmxlPwogICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBfLmV4dGVuZCh7fSwge3Jvb3Q6ICcvJ30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7CiAgICAgICAgICAgIHRoaXMucm9vdCA9IHRoaXMub3B0aW9ucy5yb290OwogICAgICAgICAgICB0aGlzLl93YW50c0hhc2hDaGFuZ2UgPSB0aGlzLm9wdGlvbnMuaGFzaENoYW5nZSAhPT0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuX3dhbnRzUHVzaFN0YXRlID0gISF0aGlzLm9wdGlvbnMucHVzaFN0YXRlOwogICAgICAgICAgICB0aGlzLl9oYXNQdXNoU3RhdGUgPSAhISh0aGlzLm9wdGlvbnMucHVzaFN0YXRlICYmIHRoaXMuaGlzdG9yeSAmJiB0aGlzLmhpc3RvcnkucHVzaFN0YXRlKTsKICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudCgpOwogICAgICAgICAgICB2YXIgZG9jTW9kZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTsKICAgICAgICAgICAgdmFyIG9sZElFID0gKGlzRXhwbG9yZXIuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpICYmICghZG9jTW9kZSB8fCBkb2NNb2RlIDw9IDcpKTsKICAgIAogICAgICAgICAgICAvLyBOb3JtYWxpemUgcm9vdCB0byBhbHdheXMgaW5jbHVkZSBhIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoLgogICAgICAgICAgICB0aGlzLnJvb3QgPSAoJy8nICsgdGhpcy5yb290ICsgJy8nKS5yZXBsYWNlKHJvb3RTdHJpcHBlciwgJy8nKTsKICAgIAogICAgICAgICAgICBpZiAob2xkSUUgJiYgdGhpcy5fd2FudHNIYXNoQ2hhbmdlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmlmcmFtZSA9IEhhY2tib25lLiQoJzxpZnJhbWUgc3JjPSJqYXZhc2NyaXB0OjAiIHRhYmluZGV4PSItMSIgLz4nKS5oaWRlKCkuYXBwZW5kVG8oJ2JvZHknKVswXS5jb250ZW50V2luZG93OwogICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZShmcmFnbWVudCk7CiAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICAvLyBEZXBlbmRpbmcgb24gd2hldGhlciB3ZSdyZSB1c2luZyBwdXNoU3RhdGUgb3IgaGFzaGVzLCBhbmQgd2hldGhlcgogICAgICAgICAgICAvLyAnb25oYXNoY2hhbmdlJyBpcyBzdXBwb3J0ZWQsIGRldGVybWluZSBob3cgd2UgY2hlY2sgdGhlIFVSTCBzdGF0ZS4KICAgICAgICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSkgewogICAgICAgICAgICAgICAgSGFja2JvbmUuJCh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRoaXMuY2hlY2tVcmwpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSAmJiAoJ29uaGFzaGNoYW5nZScgaW4gd2luZG93KSAmJiAhb2xkSUUpIHsKICAgICAgICAgICAgICAgIEhhY2tib25lLiQod2luZG93KS5vbignaGFzaGNoYW5nZScsIHRoaXMuY2hlY2tVcmwpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSkgewogICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tVcmxJbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMuY2hlY2tVcmwsIHRoaXMuaW50ZXJ2YWwpOwogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gY2hhbmdlIHRoZSBiYXNlIHVybCwgZm9yIGEgcHVzaFN0YXRlIGxpbmsKICAgICAgICAgICAgLy8gb3BlbmVkIGJ5IGEgbm9uLXB1c2hTdGF0ZSBicm93c2VyLgogICAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gZnJhZ21lbnQ7CiAgICAgICAgICAgIHZhciBsb2MgPSB0aGlzLmxvY2F0aW9uOwogICAgICAgICAgICB2YXIgYXRSb290ID0gbG9jLnBhdGhuYW1lLnJlcGxhY2UoL1teXC9dJC8sICckJi8nKSA9PT0gdGhpcy5yb290OwogICAgCiAgICAgICAgICAgIC8vIFRyYW5zaXRpb24gZnJvbSBoYXNoQ2hhbmdlIHRvIHB1c2hTdGF0ZSBvciB2aWNlIHZlcnNhIGlmIGJvdGggYXJlCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZC4KICAgICAgICAgICAgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSAmJiB0aGlzLl93YW50c1B1c2hTdGF0ZSkgewogICAgCiAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSBzdGFydGVkIG9mZiB3aXRoIGEgcm91dGUgZnJvbSBhIGBwdXNoU3RhdGVgLWVuYWJsZWQKICAgICAgICAgICAgICAgIC8vIGJyb3dzZXIsIGJ1dCB3ZSdyZSBjdXJyZW50bHkgaW4gYSBicm93c2VyIHRoYXQgZG9lc24ndCBzdXBwb3J0IGl0Li4uCiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2hhc1B1c2hTdGF0ZSAmJiAhYXRSb290KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQobnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2NhdGlvbi5yZXBsYWNlKHRoaXMucm9vdCArIHRoaXMubG9jYXRpb24uc2VhcmNoICsgJyMnICsgdGhpcy5mcmFnbWVudCk7CiAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIGltbWVkaWF0ZWx5IGFzIGJyb3dzZXIgd2lsbCBkbyByZWRpcmVjdCB0byBuZXcgdXJsCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAKICAgICAgICAgICAgICAgICAgICAvLyBPciBpZiB3ZSd2ZSBzdGFydGVkIG91dCB3aXRoIGEgaGFzaC1iYXNlZCByb3V0ZSwgYnV0IHdlJ3JlIGN1cnJlbnRseQogICAgICAgICAgICAgICAgICAgIC8vIGluIGEgYnJvd3NlciB3aGVyZSBpdCBjb3VsZCBiZSBgcHVzaFN0YXRlYC1iYXNlZCBpbnN0ZWFkLi4uCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSAmJiBhdFJvb3QgJiYgbG9jLmhhc2gpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRIYXNoKCkucmVwbGFjZShyb3V0ZVN0cmlwcGVyLCAnJyk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgZG9jdW1lbnQudGl0bGUsIHRoaXMucm9vdCArIHRoaXMuZnJhZ21lbnQgKyBsb2Muc2VhcmNoKTsKICAgICAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2lsZW50KSByZXR1cm4gdGhpcy5sb2FkVXJsKCk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIERpc2FibGUgSGFja2JvbmUuaGlzdG9yeSwgcGVyaGFwcyB0ZW1wb3JhcmlseS4gTm90IHVzZWZ1bCBpbiBhIHJlYWwgYXBwLAogICAgICAgIC8vIGJ1dCBwb3NzaWJseSB1c2VmdWwgZm9yIHVuaXQgdGVzdGluZyBSb3V0ZXJzLgogICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgSGFja2JvbmUuJCh3aW5kb3cpLm9mZigncG9wc3RhdGUnLCB0aGlzLmNoZWNrVXJsKS5vZmYoJ2hhc2hjaGFuZ2UnLCB0aGlzLmNoZWNrVXJsKTsKICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9jaGVja1VybEludGVydmFsKTsKICAgICAgICAgICAgSGlzdG9yeS5zdGFydGVkID0gZmFsc2U7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEFkZCBhIHJvdXRlIHRvIGJlIHRlc3RlZCB3aGVuIHRoZSBmcmFnbWVudCBjaGFuZ2VzLiBSb3V0ZXMgYWRkZWQgbGF0ZXIKICAgICAgICAvLyBtYXkgb3ZlcnJpZGUgcHJldmlvdXMgcm91dGVzLgogICAgICAgIHJvdXRlOiBmdW5jdGlvbiAocm91dGUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHRoaXMuaGFuZGxlcnMudW5zaGlmdCh7cm91dGU6IHJvdXRlLCBjYWxsYmFjazogY2FsbGJhY2t9KTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gQ2hlY2tzIHRoZSBjdXJyZW50IFVSTCB0byBzZWUgaWYgaXQgaGFzIGNoYW5nZWQsIGFuZCBpZiBpdCBoYXMsCiAgICAgICAgLy8gY2FsbHMgYGxvYWRVcmxgLCBub3JtYWxpemluZyBhY3Jvc3MgdGhlIGhpZGRlbiBpZnJhbWUuCiAgICAgICAgY2hlY2tVcmw6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5nZXRGcmFnbWVudCgpOwogICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gdGhpcy5mcmFnbWVudCAmJiB0aGlzLmlmcmFtZSkgewogICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQodGhpcy5nZXRIYXNoKHRoaXMuaWZyYW1lKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZnJhZ21lbnQpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgaWYgKHRoaXMuaWZyYW1lKSB0aGlzLm5hdmlnYXRlKGN1cnJlbnQpOwogICAgICAgICAgICB0aGlzLmxvYWRVcmwoKTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gQXR0ZW1wdCB0byBsb2FkIHRoZSBjdXJyZW50IFVSTCBmcmFnbWVudC4gSWYgYSByb3V0ZSBzdWNjZWVkcyB3aXRoIGEKICAgICAgICAvLyBtYXRjaCwgcmV0dXJucyBgdHJ1ZWAuIElmIG5vIGRlZmluZWQgcm91dGVzIG1hdGNoZXMgdGhlIGZyYWdtZW50LAogICAgICAgIC8vIHJldHVybnMgYGZhbHNlYC4KICAgICAgICBsb2FkVXJsOiBmdW5jdGlvbiAoZnJhZ21lbnRPdmVycmlkZSkgewogICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChmcmFnbWVudE92ZXJyaWRlKTsKICAgICAgICAgICAgcmV0dXJuIF8uYW55KHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIChoYW5kbGVyKSB7CiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlci5yb3V0ZS50ZXN0KGZyYWdtZW50KSkgewogICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbGJhY2soZnJhZ21lbnQpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gU2F2ZSBhIGZyYWdtZW50IGludG8gdGhlIGhhc2ggaGlzdG9yeSwgb3IgcmVwbGFjZSB0aGUgVVJMIHN0YXRlIGlmIHRoZQogICAgICAgIC8vICdyZXBsYWNlJyBvcHRpb24gaXMgcGFzc2VkLiBZb3UgYXJlIHJlc3BvbnNpYmxlIGZvciBwcm9wZXJseSBVUkwtZW5jb2RpbmcKICAgICAgICAvLyB0aGUgZnJhZ21lbnQgaW4gYWR2YW5jZS4KICAgICAgICAvLwogICAgICAgIC8vIFRoZSBvcHRpb25zIG9iamVjdCBjYW4gY29udGFpbiBgdHJpZ2dlcjogdHJ1ZWAgaWYgeW91IHdpc2ggdG8gaGF2ZSB0aGUKICAgICAgICAvLyByb3V0ZSBjYWxsYmFjayBiZSBmaXJlZCAobm90IHVzdWFsbHkgZGVzaXJhYmxlKSwgb3IgYHJlcGxhY2U6IHRydWVgLCBpZgogICAgICAgIC8vIHlvdSB3aXNoIHRvIG1vZGlmeSB0aGUgY3VycmVudCBVUkwgd2l0aG91dCBhZGRpbmcgYW4gZW50cnkgdG8gdGhlIGhpc3RvcnkuCiAgICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIChmcmFnbWVudCwgb3B0aW9ucykgewogICAgICAgICAgICBpZiAoIUhpc3Rvcnkuc3RhcnRlZCkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucyA9PT0gdHJ1ZSkgb3B0aW9ucyA9IHt0cmlnZ2VyOiAhIW9wdGlvbnN9OwogICAgCiAgICAgICAgICAgIGZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChmcmFnbWVudCB8fCAnJyk7CiAgICAgICAgICAgIGlmICh0aGlzLmZyYWdtZW50ID09PSBmcmFnbWVudCkgcmV0dXJuOwogICAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gZnJhZ21lbnQ7CiAgICAKICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMucm9vdCArIGZyYWdtZW50OwogICAgCiAgICAgICAgICAgIC8vIERvbid0IGluY2x1ZGUgYSB0cmFpbGluZyBzbGFzaCBvbiB0aGUgcm9vdC4KICAgICAgICAgICAgaWYgKGZyYWdtZW50ID09PSAnJyAmJiB1cmwgIT09ICcvJykgdXJsID0gdXJsLnNsaWNlKDAsIC0xKTsKICAgIAogICAgICAgICAgICAvLyBJZiBwdXNoU3RhdGUgaXMgYXZhaWxhYmxlLCB3ZSB1c2UgaXQgdG8gc2V0IHRoZSBmcmFnbWVudCBhcyBhIHJlYWwgVVJMLgogICAgICAgICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlKSB7CiAgICAgICAgICAgICAgICB0aGlzLmhpc3Rvcnlbb3B0aW9ucy5yZXBsYWNlID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oe30sIGRvY3VtZW50LnRpdGxlLCB1cmwpOwogICAgCiAgICAgICAgICAgICAgICAvLyBJZiBoYXNoIGNoYW5nZXMgaGF2ZW4ndCBiZWVuIGV4cGxpY2l0bHkgZGlzYWJsZWQsIHVwZGF0ZSB0aGUgaGFzaAogICAgICAgICAgICAgICAgLy8gZnJhZ21lbnQgdG8gc3RvcmUgaGlzdG9yeS4KICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UpIHsKICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhhc2godGhpcy5sb2NhdGlvbiwgZnJhZ21lbnQsIG9wdGlvbnMucmVwbGFjZSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5pZnJhbWUgJiYgKGZyYWdtZW50ICE9PSB0aGlzLmdldEZyYWdtZW50KHRoaXMuZ2V0SGFzaCh0aGlzLmlmcmFtZSkpKSkgewogICAgICAgICAgICAgICAgICAgIC8vIE9wZW5pbmcgYW5kIGNsb3NpbmcgdGhlIGlmcmFtZSB0cmlja3MgSUU3IGFuZCBlYXJsaWVyIHRvIHB1c2ggYQogICAgICAgICAgICAgICAgICAgIC8vIGhpc3RvcnkgZW50cnkgb24gaGFzaC10YWcgY2hhbmdlLiAgV2hlbiByZXBsYWNlIGlzIHRydWUsIHdlIGRvbid0CiAgICAgICAgICAgICAgICAgICAgLy8gd2FudCB0aGlzLgogICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5yZXBsYWNlKSB0aGlzLmlmcmFtZS5kb2N1bWVudC5vcGVuKCkuY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVIYXNoKHRoaXMuaWZyYW1lLmxvY2F0aW9uLCBmcmFnbWVudCwgb3B0aW9ucy5yZXBsYWNlKTsKICAgICAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICAgICAgLy8gSWYgeW91J3ZlIHRvbGQgdXMgdGhhdCB5b3UgZXhwbGljaXRseSBkb24ndCB3YW50IGZhbGxiYWNrIGhhc2hjaGFuZ2UtCiAgICAgICAgICAgICAgICAvLyBiYXNlZCBoaXN0b3J5LCB0aGVuIGBuYXZpZ2F0ZWAgYmVjb21lcyBhIHBhZ2UgcmVmcmVzaC4KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2F0aW9uLmFzc2lnbih1cmwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChvcHRpb25zLnRyaWdnZXIpIHJldHVybiB0aGlzLmxvYWRVcmwoZnJhZ21lbnQpOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBVcGRhdGUgdGhlIGhhc2ggbG9jYXRpb24sIGVpdGhlciByZXBsYWNpbmcgdGhlIGN1cnJlbnQgZW50cnksIG9yIGFkZGluZwogICAgICAgIC8vIGEgbmV3IG9uZSB0byB0aGUgYnJvd3NlciBoaXN0b3J5LgogICAgICAgIF91cGRhdGVIYXNoOiBmdW5jdGlvbiAobG9jYXRpb24sIGZyYWdtZW50LCByZXBsYWNlKSB7CiAgICAgICAgICAgIGlmIChyZXBsYWNlKSB7CiAgICAgICAgICAgICAgICB2YXIgaHJlZiA9IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvKGphdmFzY3JpcHQ6fCMpLiokLywgJycpOwogICAgICAgICAgICAgICAgbG9jYXRpb24ucmVwbGFjZShocmVmICsgJyMnICsgZnJhZ21lbnQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gU29tZSBicm93c2VycyByZXF1aXJlIHRoYXQgYGhhc2hgIGNvbnRhaW5zIGEgbGVhZGluZyAjLgogICAgICAgICAgICAgICAgbG9jYXRpb24uaGFzaCA9ICcjJyArIGZyYWdtZW50OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgCiAgICB9KTsKICAgIAogICAgLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IEhhY2tib25lLmhpc3RvcnkuCiAgICBIYWNrYm9uZS5oaXN0b3J5ID0gbmV3IEhpc3Rvcnk7CgogICAgLy8gSGFja2JvbmUuUm91dGVyCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0KICAgIAogICAgLy8gQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZm9yIG1hdGNoaW5nIG5hbWVkIHBhcmFtIHBhcnRzIGFuZCBzcGxhdHRlZAogICAgLy8gcGFydHMgb2Ygcm91dGUgc3RyaW5ncy4KICAgIHZhciBvcHRpb25hbFBhcmFtID0gL1woKC4qPylcKS9nOwogICAgdmFyIG5hbWVkUGFyYW0gPSAvKFwoXD8pPzpcdysvZzsKICAgIHZhciBzcGxhdFBhcmFtID0gL1wqXHcrL2c7CiAgICB2YXIgZXNjYXBlUmVnRXhwID0gL1tcLXt9XFtcXSs/LixcXFxeJHwjXHNdL2c7CiAgICAKICAgIC8vIFJvdXRlcnMgbWFwIGZhdXgtVVJMcyB0byBhY3Rpb25zLCBhbmQgZmlyZSBldmVudHMgd2hlbiByb3V0ZXMgYXJlCiAgICAvLyBtYXRjaGVkLiBDcmVhdGluZyBhIG5ldyBvbmUgc2V0cyBpdHMgYHJvdXRlc2AgaGFzaCwgaWYgbm90IHNldCBzdGF0aWNhbGx5LgogICAgdmFyIFJvdXRlciA9IEhhY2tib25lLlJvdXRlciA9IENvbXBvbmVudC5leHRlbmQoewogICAgICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgICAgICAgICBpZiAob3B0aW9ucy5yb3V0ZXMpIHRoaXMucm91dGVzID0gb3B0aW9ucy5yb3V0ZXM7CiAgICAgICAgICAgIHRoaXMuX2JpbmRSb3V0ZXMoKTsKICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIE1hbnVhbGx5IGJpbmQgYSBzaW5nbGUgbmFtZWQgcm91dGUgdG8gYSBjYWxsYmFjay4gRm9yIGV4YW1wbGU6CiAgICAgICAgLy8KICAgICAgICAvLyAgICAgdGhpcy5yb3V0ZSgnc2VhcmNoLzpxdWVyeS9wOm51bScsICdzZWFyY2gnLCBmdW5jdGlvbihxdWVyeSwgbnVtKSB7CiAgICAgICAgLy8gICAgICAgLi4uCiAgICAgICAgLy8gICAgIH0pOwogICAgICAgIC8vCiAgICAgICAgcm91dGU6IGZ1bmN0aW9uIChyb3V0ZSwgbmFtZSwgY2FsbGJhY2spIHsKICAgICAgICAgICAgaWYgKCFfLmlzUmVnRXhwKHJvdXRlKSkgcm91dGUgPSB0aGlzLl9yb3V0ZVRvUmVnRXhwKHJvdXRlKTsKICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihuYW1lKSkgewogICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBuYW1lOwogICAgICAgICAgICAgICAgbmFtZSA9ICcnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gdGhpc1tuYW1lXTsKICAgICAgICAgICAgdmFyIHJvdXRlciA9IHRoaXM7CiAgICAgICAgICAgIEhhY2tib25lLmhpc3Rvcnkucm91dGUocm91dGUsIGZ1bmN0aW9uIChmcmFnbWVudCkgewogICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSByb3V0ZXIuX2V4dHJhY3RQYXJhbWV0ZXJzKHJvdXRlLCBmcmFnbWVudCk7CiAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjay5hcHBseShyb3V0ZXIsIGFyZ3MpOwogICAgICAgICAgICAgICAgcm91dGVyLnRyaWdnZXIuYXBwbHkocm91dGVyLCBbJ3JvdXRlOicgKyBuYW1lXS5jb25jYXQoYXJncykpOwogICAgICAgICAgICAgICAgcm91dGVyLnRyaWdnZXIoJ3JvdXRlJywgbmFtZSwgYXJncyk7CiAgICAgICAgICAgICAgICBIYWNrYm9uZS5oaXN0b3J5LnRyaWdnZXIoJ3JvdXRlJywgcm91dGVyLCBuYW1lLCBhcmdzKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBTaW1wbGUgcHJveHkgdG8gYEhhY2tib25lLmhpc3RvcnlgIHRvIHNhdmUgYSBmcmFnbWVudCBpbnRvIHRoZSBoaXN0b3J5LgogICAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbiAoZnJhZ21lbnQsIG9wdGlvbnMpIHsKICAgICAgICAgICAgSGFja2JvbmUuaGlzdG9yeS5uYXZpZ2F0ZShmcmFnbWVudCwgb3B0aW9ucyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBCaW5kIGFsbCBkZWZpbmVkIHJvdXRlcyB0byBgSGFja2JvbmUuaGlzdG9yeWAuIFdlIGhhdmUgdG8gcmV2ZXJzZSB0aGUKICAgICAgICAvLyBvcmRlciBvZiB0aGUgcm91dGVzIGhlcmUgdG8gc3VwcG9ydCBiZWhhdmlvciB3aGVyZSB0aGUgbW9zdCBnZW5lcmFsCiAgICAgICAgLy8gcm91dGVzIGNhbiBiZSBkZWZpbmVkIGF0IHRoZSBib3R0b20gb2YgdGhlIHJvdXRlIG1hcC4KICAgICAgICBfYmluZFJvdXRlczogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoIXRoaXMucm91dGVzKSByZXR1cm47CiAgICAgICAgICAgIHRoaXMucm91dGVzID0gXy5yZXN1bHQodGhpcywgJ3JvdXRlcycpOwogICAgICAgICAgICB2YXIgcm91dGUsIHJvdXRlcyA9IF8ua2V5cyh0aGlzLnJvdXRlcyk7CiAgICAgICAgICAgIHdoaWxlICgocm91dGUgPSByb3V0ZXMucG9wKCkpICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHRoaXMucm91dGUocm91dGUsIHRoaXMucm91dGVzW3JvdXRlXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgCiAgICAgICAgLy8gQ29udmVydCBhIHJvdXRlIHN0cmluZyBpbnRvIGEgcmVndWxhciBleHByZXNzaW9uLCBzdWl0YWJsZSBmb3IgbWF0Y2hpbmcKICAgICAgICAvLyBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uIGhhc2guCiAgICAgICAgX3JvdXRlVG9SZWdFeHA6IGZ1bmN0aW9uIChyb3V0ZSkgewogICAgICAgICAgICByb3V0ZSA9IHJvdXRlLnJlcGxhY2UoZXNjYXBlUmVnRXhwLCAnXFwkJicpCiAgICAgICAgICAgICAgICAucmVwbGFjZShvcHRpb25hbFBhcmFtLCAnKD86JDEpPycpCiAgICAgICAgICAgICAgICAucmVwbGFjZShuYW1lZFBhcmFtLCBmdW5jdGlvbiAobWF0Y2gsIG9wdGlvbmFsKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbmFsID8gbWF0Y2ggOiAnKFteXC9dKyknOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5yZXBsYWNlKHNwbGF0UGFyYW0sICcoLio/KScpOwogICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyByb3V0ZSArICckJyk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEdpdmVuIGEgcm91dGUsIGFuZCBhIFVSTCBmcmFnbWVudCB0aGF0IGl0IG1hdGNoZXMsIHJldHVybiB0aGUgYXJyYXkgb2YKICAgICAgICAvLyBleHRyYWN0ZWQgZGVjb2RlZCBwYXJhbWV0ZXJzLiBFbXB0eSBvciB1bm1hdGNoZWQgcGFyYW1ldGVycyB3aWxsIGJlCiAgICAgICAgLy8gdHJlYXRlZCBhcyBgbnVsbGAgdG8gbm9ybWFsaXplIGNyb3NzLWJyb3dzZXIgYmVoYXZpb3IuCiAgICAgICAgX2V4dHJhY3RQYXJhbWV0ZXJzOiBmdW5jdGlvbiAocm91dGUsIGZyYWdtZW50KSB7CiAgICAgICAgICAgIHZhciBwYXJhbXMgPSByb3V0ZS5leGVjKGZyYWdtZW50KS5zbGljZSgxKTsKICAgICAgICAgICAgcmV0dXJuIF8ubWFwKHBhcmFtcywgZnVuY3Rpb24gKHBhcmFtKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW0gPyBkZWNvZGVVUklDb21wb25lbnQocGFyYW0pIDogbnVsbDsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfSk7CiAgICAKICAgIF8uZXh0ZW5kKFJvdXRlci5wcm90b3R5cGUsIEV2ZW50cyk7CgogICAgLy8gSGFja2JvbmUuc3luYwogICAgLy8gLS0tLS0tLS0tLS0tLQogICAgCiAgICAvLyBPdmVycmlkZSB0aGlzIGZ1bmN0aW9uIHRvIGNoYW5nZSB0aGUgbWFubmVyIGluIHdoaWNoIEhhY2tib25lIHBlcnNpc3RzCiAgICAvLyBtb2RlbHMgdG8gdGhlIHNlcnZlci4gWW91IHdpbGwgYmUgcGFzc2VkIHRoZSB0eXBlIG9mIHJlcXVlc3QsIGFuZCB0aGUKICAgIC8vIG1vZGVsIGluIHF1ZXN0aW9uLiBCeSBkZWZhdWx0LCBtYWtlcyBhIFJFU1RmdWwgQWpheCByZXF1ZXN0CiAgICAvLyB0byB0aGUgbW9kZWwncyBgdXJsKClgLiBTb21lIHBvc3NpYmxlIGN1c3RvbWl6YXRpb25zIGNvdWxkIGJlOgogICAgLy8KICAgIC8vICogVXNlIGBzZXRUaW1lb3V0YCB0byBiYXRjaCByYXBpZC1maXJlIHVwZGF0ZXMgaW50byBhIHNpbmdsZSByZXF1ZXN0LgogICAgLy8gKiBTZW5kIHVwIHRoZSBtb2RlbHMgYXMgWE1MIGluc3RlYWQgb2YgSlNPTi4KICAgIC8vICogUGVyc2lzdCBtb2RlbHMgdmlhIFdlYlNvY2tldHMgaW5zdGVhZCBvZiBBamF4LgogICAgLy8KICAgIC8vIFR1cm4gb24gYEhhY2tib25lLmVtdWxhdGVIVFRQYCBpbiBvcmRlciB0byBzZW5kIGBQVVRgIGFuZCBgREVMRVRFYCByZXF1ZXN0cwogICAgLy8gYXMgYFBPU1RgLCB3aXRoIGEgYF9tZXRob2RgIHBhcmFtZXRlciBjb250YWluaW5nIHRoZSB0cnVlIEhUVFAgbWV0aG9kLAogICAgLy8gYXMgd2VsbCBhcyBhbGwgcmVxdWVzdHMgd2l0aCB0aGUgYm9keSBhcyBgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkYAogICAgLy8gaW5zdGVhZCBvZiBgYXBwbGljYXRpb24vanNvbmAgd2l0aCB0aGUgbW9kZWwgaW4gYSBwYXJhbSBuYW1lZCBgbW9kZWxgLgogICAgLy8gVXNlZnVsIHdoZW4gaW50ZXJmYWNpbmcgd2l0aCBzZXJ2ZXItc2lkZSBsYW5ndWFnZXMgbGlrZSAqKlBIUCoqIHRoYXQgbWFrZQogICAgLy8gaXQgZGlmZmljdWx0IHRvIHJlYWQgdGhlIGJvZHkgb2YgYFBVVGAgcmVxdWVzdHMuCiAgICBIYWNrYm9uZS5zeW5jID0gZnVuY3Rpb24gKG1ldGhvZCwgbW9kZWwsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgdHlwZSA9IG1ldGhvZE1hcFttZXRob2RdOwogICAgCiAgICAgICAgLy8gRGVmYXVsdCBvcHRpb25zLCB1bmxlc3Mgc3BlY2lmaWVkLgogICAgICAgIF8uZGVmYXVsdHMob3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KSwgewogICAgICAgICAgICBlbXVsYXRlSFRUUDogSGFja2JvbmUuZW11bGF0ZUhUVFAsCiAgICAgICAgICAgIGVtdWxhdGVKU09OOiBIYWNrYm9uZS5lbXVsYXRlSlNPTgogICAgICAgIH0pOwogICAgCiAgICAgICAgLy8gRGVmYXVsdCBKU09OLXJlcXVlc3Qgb3B0aW9ucy4KICAgICAgICB2YXIgcGFyYW1zID0ge3R5cGU6IHR5cGUsIGRhdGFUeXBlOiAnanNvbid9OwogICAgCiAgICAgICAgLy8gRW5zdXJlIHRoYXQgd2UgaGF2ZSBhIFVSTC4KICAgICAgICBpZiAoIW9wdGlvbnMudXJsKSB7CiAgICAgICAgICAgIHBhcmFtcy51cmwgPSBfLnJlc3VsdChtb2RlbCwgJ3VybCcpIHx8IHVybEVycm9yKCk7CiAgICAgICAgfQogICAgCiAgICAgICAgLy8gRW5zdXJlIHRoYXQgd2UgaGF2ZSB0aGUgYXBwcm9wcmlhdGUgcmVxdWVzdCBkYXRhLgogICAgICAgIGlmIChvcHRpb25zLmRhdGEgPT0gbnVsbCAmJiBtb2RlbCAmJiAobWV0aG9kID09PSAnY3JlYXRlJyB8fCBtZXRob2QgPT09ICd1cGRhdGUnIHx8IG1ldGhvZCA9PT0gJ3BhdGNoJykpIHsKICAgICAgICAgICAgcGFyYW1zLmNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nOwogICAgICAgICAgICBwYXJhbXMuZGF0YSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYXR0cnMgfHwgbW9kZWwudG9KU09OKG9wdGlvbnMpKTsKICAgICAgICB9CiAgICAKICAgICAgICAvLyBGb3Igb2xkZXIgc2VydmVycywgZW11bGF0ZSBKU09OIGJ5IGVuY29kaW5nIHRoZSByZXF1ZXN0IGludG8gYW4gSFRNTC1mb3JtLgogICAgICAgIGlmIChvcHRpb25zLmVtdWxhdGVKU09OKSB7CiAgICAgICAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOwogICAgICAgICAgICBwYXJhbXMuZGF0YSA9IHBhcmFtcy5kYXRhID8ge21vZGVsOiBwYXJhbXMuZGF0YX0gOiB7fTsKICAgICAgICB9CiAgICAKICAgICAgICAvLyBGb3Igb2xkZXIgc2VydmVycywgZW11bGF0ZSBIVFRQIGJ5IG1pbWlja2luZyB0aGUgSFRUUCBtZXRob2Qgd2l0aCBgX21ldGhvZGAKICAgICAgICAvLyBBbmQgYW4gYFgtSFRUUC1NZXRob2QtT3ZlcnJpZGVgIGhlYWRlci4KICAgICAgICBpZiAob3B0aW9ucy5lbXVsYXRlSFRUUCAmJiAodHlwZSA9PT0gJ1BVVCcgfHwgdHlwZSA9PT0gJ0RFTEVURScgfHwgdHlwZSA9PT0gJ1BBVENIJykpIHsKICAgICAgICAgICAgcGFyYW1zLnR5cGUgPSAnUE9TVCc7CiAgICAgICAgICAgIGlmIChvcHRpb25zLmVtdWxhdGVKU09OKSBwYXJhbXMuZGF0YS5fbWV0aG9kID0gdHlwZTsKICAgICAgICAgICAgdmFyIGJlZm9yZVNlbmQgPSBvcHRpb25zLmJlZm9yZVNlbmQ7CiAgICAgICAgICAgIG9wdGlvbnMuYmVmb3JlU2VuZCA9IGZ1bmN0aW9uICh4aHIpIHsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQ7CiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1IVFRQLU1ldGhvZC1PdmVycmlkZScsIHR5cGUpOwogICAgICAgICAgICAgICAgaWYgKGJlZm9yZVNlbmQpIHJlc3VsdCA9IGJlZm9yZVNlbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgCiAgICAgICAgLy8gRG9uJ3QgcHJvY2VzcyBkYXRhIG9uIGEgbm9uLUdFVCByZXF1ZXN0LgogICAgICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ0dFVCcgJiYgIW9wdGlvbnMuZW11bGF0ZUpTT04pIHsKICAgICAgICAgICAgcGFyYW1zLnByb2Nlc3NEYXRhID0gZmFsc2U7CiAgICAgICAgfQogICAgCiAgICAgICAgLy8gSWYgd2UncmUgc2VuZGluZyBhIGBQQVRDSGAgcmVxdWVzdCwgYW5kIHdlJ3JlIGluIGFuIG9sZCBJbnRlcm5ldCBFeHBsb3JlcgogICAgICAgIC8vIHRoYXQgc3RpbGwgaGFzIEFjdGl2ZVggZW5hYmxlZCBieSBkZWZhdWx0LCBvdmVycmlkZSBqUXVlcnkgdG8gdXNlIHRoYXQKICAgICAgICAvLyBmb3IgWEhSIGluc3RlYWQuIFJlbW92ZSB0aGlzIGxpbmUgd2hlbiBqUXVlcnkgc3VwcG9ydHMgYFBBVENIYCBvbiBJRTguCiAgICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnUEFUQ0gnICYmIG5vWGhyUGF0Y2gpIHsKICAgICAgICAgICAgcGFyYW1zLnhociA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICAKICAgICAgICAvLyBNYWtlIHRoZSByZXF1ZXN0LCBhbGxvd2luZyB0aGUgdXNlciB0byBvdmVycmlkZSBhbnkgQWpheCBvcHRpb25zLgogICAgICAgIHZhciB4aHIgPSBvcHRpb25zLnhociA9IEhhY2tib25lLmFqYXgoXy5leHRlbmQocGFyYW1zLCBvcHRpb25zKSk7CiAgICAgICAgbW9kZWwudHJpZ2dlcigncmVxdWVzdCcsIG1vZGVsLCB4aHIsIG9wdGlvbnMpOwogICAgICAgIHJldHVybiB4aHI7CiAgICB9OwogICAgCiAgICB2YXIgbm9YaHJQYXRjaCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICEhd2luZG93LkFjdGl2ZVhPYmplY3QgJiYgISh3aW5kb3cuWE1MSHR0cFJlcXVlc3QgJiYgKG5ldyBYTUxIdHRwUmVxdWVzdCkuZGlzcGF0Y2hFdmVudCk7CiAgICAKICAgIC8vIE1hcCBmcm9tIENSVUQgdG8gSFRUUCBmb3Igb3VyIGRlZmF1bHQgYEhhY2tib25lLnN5bmNgIGltcGxlbWVudGF0aW9uLgogICAgdmFyIG1ldGhvZE1hcCA9IEhhY2tib25lLnN5bmMuaHR0cE1hcCA9IHsKICAgICAgICAnY3JlYXRlJzogJ1BPU1QnLAogICAgICAgICd1cGRhdGUnOiAnUFVUJywKICAgICAgICAncGF0Y2gnOiAnUEFUQ0gnLAogICAgICAgICdkZWxldGUnOiAnREVMRVRFJywKICAgICAgICAncmVhZCc6ICdHRVQnCiAgICB9OwogICAgCiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYEhhY2tib25lLmFqYXhgIHRvIHByb3h5IHRocm91Z2ggdG8gYCRgLgogICAgLy8gT3ZlcnJpZGUgdGhpcyBpZiB5b3UnZCBsaWtlIHRvIHVzZSBhIGRpZmZlcmVudCBsaWJyYXJ5LgogICAgSGFja2JvbmUuYWpheCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gSGFja2JvbmUuJC5hamF4LmFwcGx5KEhhY2tib25lLiQsIGFyZ3VtZW50cyk7CiAgICB9OwoKICAgIC8vIEJhY2tib25lLkJhc2VWaWV3CiAgICAvLyAtLS0tLS0tLS0tLS0tCiAgICAKICAgIC8vIEhhY2tib25lIEJhc2VWaWV3cyBhcmUgYWxtb3N0IG1vcmUgY29udmVudGlvbiB0aGFuIHRoZXkgYXJlIGFjdHVhbCBjb2RlLiBBIEJhc2VWaWV3CiAgICAvLyBpcyBzaW1wbHkgYSBKYXZhU2NyaXB0IG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsb2dpY2FsIGNodW5rIG9mIFVJIGluIHRoZQogICAgLy8gRE9NLiBUaGlzIG1pZ2h0IGJlIGEgc2luZ2xlIGl0ZW0sIGFuIGVudGlyZSBsaXN0LCBhIHNpZGViYXIgb3IgcGFuZWwsIG9yCiAgICAvLyBldmVuIHRoZSBzdXJyb3VuZGluZyBmcmFtZSB3aGljaCB3cmFwcyB5b3VyIHdob2xlIGFwcC4gRGVmaW5pbmcgYSBjaHVuayBvZgogICAgLy8gVUkgYXMgYSAqKlZpZXcqKiBhbGxvd3MgeW91IHRvIGRlZmluZSB5b3VyIERPTSBldmVudHMgZGVjbGFyYXRpdmVseSwgd2l0aG91dAogICAgLy8gaGF2aW5nIHRvIHdvcnJ5IGFib3V0IHJlbmRlciBvcmRlci4KICAgIAogICAgLy8gSGFja2JvbmUgQmFzZVZpZXcgaW5zdGFuY2VzIGFyZSBnZW5lcmljIE1WQy9NVlAgcGF0dGVybiB2aWV3cy4gVGhleSBhcmUgJ2NvbnRyb2xsZWQnCiAgICAvLyBieSB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHZpZXcgaW5zdGFuY2UgYW5kIHRoZXkgaGF2ZSBubyByZWZlcmVuY2UgdG8gYW55CiAgICAvLyBIYWNrYm9uZS5Nb2RlbCBvciBIYWNrYm9uZS5Db2xsZWN0aW9uIGluc3RhbmNlLgogICAgCiAgICAvLyBPcHRpb25zIHdpdGggc3BlY2lhbCBtZWFuaW5nICooZS5nLiBtb2RlbCwgY29sbGVjdGlvbiwgaWQsIGNsYXNzTmFtZSkqIGFyZQogICAgLy8gYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlIHZpZXcuICBTZWUgYGJhc2VWaWV3T3B0aW9uc2AgZm9yIGFuIGV4aGF1c3RpdmUKICAgIC8vIGxpc3QuCiAgICAKICAgIC8vIENyZWF0aW5nIGEgSGFja2JvbmUuQmFzZVZpZXcgY3JlYXRlcyBpdHMgaW5pdGlhbCBlbGVtZW50IG91dHNpZGUgb2YgdGhlIERPTSwKICAgIC8vIGlmIGFuIGV4aXN0aW5nIGVsZW1lbnQgaXMgbm90IHByb3ZpZGVkLi4uCiAgICAKICAgIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipIYWNrYm9uZS5CYXNlVmlldyoqIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMuCiAgICB2YXIgQmFzZVZpZXcgPSBIYWNrYm9uZS5CYXNlVmlldyA9IENvbXBvbmVudC5leHRlbmQoewogICAgICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgICAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ3ZpZXcnKTsKICAgICAgICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgICAgICAgXy5leHRlbmQodGhpcywgXy5waWNrKG9wdGlvbnMsIEJhc2VWaWV3LnZpZXdPcHRpb25zKSk7CiAgICAgICAgICAgIHRoaXMuX2Vuc3VyZUVsZW1lbnQoKTsKICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoKTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gVGhlIGRlZmF1bHQgYHRhZ05hbWVgIG9mIGEgQmFzZVZpZXcncyBlbGVtZW50IGlzIGAiZGl2ImAuCiAgICAgICAgdGFnTmFtZTogJ2RpdicsCiAgICAKICAgICAgICAvLyBqUXVlcnkgZGVsZWdhdGUgZm9yIGVsZW1lbnQgbG9va3VwLCBzY29wZWQgdG8gRE9NIGVsZW1lbnRzIHdpdGhpbiB0aGUKICAgICAgICAvLyBjdXJyZW50IHZpZXcuIFRoaXMgc2hvdWxkIGJlIHByZWZlcmVkIHRvIGdsb2JhbCBsb29rdXBzIHdoZXJlIHBvc3NpYmxlLgogICAgICAgICQ6IGZ1bmN0aW9uIChzZWxlY3RvcikgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChzZWxlY3Rvcik7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vICoqcmVuZGVyKiogaXMgdGhlIGNvcmUgZnVuY3Rpb24gdGhhdCB5b3VyIHZpZXcgc2hvdWxkIG92ZXJyaWRlLCBpbiBvcmRlcgogICAgICAgIC8vIHRvIHBvcHVsYXRlIGl0cyBlbGVtZW50IChgdGhpcy5lbGApLCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBIVE1MLiBUaGUKICAgICAgICAvLyBjb252ZW50aW9uIGlzIGZvciAqKnJlbmRlcioqIHRvIGFsd2F5cyByZXR1cm4gYHRoaXNgLgogICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gUmVtb3ZlIHRoaXMgdmlldyBieSB0YWtpbmcgdGhlIGVsZW1lbnQgb3V0IG9mIHRoZSBET00sIGFuZCByZW1vdmluZyBhbnkKICAgICAgICAvLyBhcHBsaWNhYmxlIEhhY2tib25lLkV2ZW50cyBsaXN0ZW5lcnMuCiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMuJGVsLnJlbW92ZSgpOwogICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIERlc3Ryb3lzIHRoZSBCYXNlVmlldyBieSBpbnZva2luZyB0aGUgQmFzZVZpZXcjcmVtb3ZlIG1ldGhvZC4KICAgICAgICAvLyBDb252ZW5pZW5jZSBtZXRob2QgZm9yIGV4dGVuZGluZyBiYXNlIENvbXBvbmVudC4KICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBDaGFuZ2UgdGhlIHZpZXcncyBlbGVtZW50IChgdGhpcy5lbGAgcHJvcGVydHkpLCBpbmNsdWRpbmcgZXZlbnQKICAgICAgICAvLyByZS1kZWxlZ2F0aW9uLgogICAgICAgIHNldEVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBkZWxlZ2F0ZSkgewogICAgICAgICAgICBpZiAodGhpcy4kZWwpIHRoaXMudW5kZWxlZ2F0ZUV2ZW50cygpOwogICAgICAgICAgICB0aGlzLiRlbCA9IGVsZW1lbnQgaW5zdGFuY2VvZiBIYWNrYm9uZS4kID8gZWxlbWVudCA6IEhhY2tib25lLiQoZWxlbWVudCk7CiAgICAgICAgICAgIHRoaXMuZWwgPSB0aGlzLiRlbFswXTsKICAgICAgICAgICAgaWYgKGRlbGVnYXRlICE9PSBmYWxzZSkgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gU2V0IGNhbGxiYWNrcywgd2hlcmUgYHRoaXMuZXZlbnRzYCBpcyBhIGhhc2ggb2YKICAgICAgICAvLwogICAgICAgIC8vICp7ImV2ZW50IHNlbGVjdG9yIjogImNhbGxiYWNrIn0qCiAgICAgICAgLy8KICAgICAgICAvLyAgICAgewogICAgICAgIC8vICAgICAgICdtb3VzZWRvd24gLnRpdGxlJzogICdlZGl0JywKICAgICAgICAvLyAgICAgICAnY2xpY2sgLmJ1dHRvbic6ICAgICAnc2F2ZScsCiAgICAgICAgLy8gICAgICAgJ2NsaWNrIC5vcGVuJzogICAgICAgZnVuY3Rpb24oZSkgeyAuLi4gfQogICAgICAgIC8vICAgICB9CiAgICAgICAgLy8KICAgICAgICAvLyBwYWlycy4gQ2FsbGJhY2tzIHdpbGwgYmUgYm91bmQgdG8gdGhlIHZpZXcsIHdpdGggYHRoaXNgIHNldCBwcm9wZXJseS4KICAgICAgICAvLyBVc2VzIGV2ZW50IGRlbGVnYXRpb24gZm9yIGVmZmljaWVuY3kuCiAgICAgICAgLy8gT21pdHRpbmcgdGhlIHNlbGVjdG9yIGJpbmRzIHRoZSBldmVudCB0byBgdGhpcy5lbGAuCiAgICAgICAgLy8gVGhpcyBvbmx5IHdvcmtzIGZvciBkZWxlZ2F0ZS1hYmxlIGV2ZW50czogbm90IGBmb2N1c2AsIGBibHVyYCwgYW5kCiAgICAgICAgLy8gbm90IGBjaGFuZ2VgLCBgc3VibWl0YCwgYW5kIGByZXNldGAgaW4gSW50ZXJuZXQgRXhwbG9yZXIuCiAgICAgICAgZGVsZWdhdGVFdmVudHM6IGZ1bmN0aW9uIChldmVudHMpIHsKICAgICAgICAgICAgaWYgKCEoZXZlbnRzIHx8IChldmVudHMgPSBfLnJlc3VsdCh0aGlzLCAnZXZlbnRzJykpKSkgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIHRoaXMudW5kZWxlZ2F0ZUV2ZW50cygpOwogICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZXZlbnRzKSB7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gZXZlbnRzW2tleV07CiAgICAgICAgICAgICAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24obWV0aG9kKSkgbWV0aG9kID0gdGhpc1tldmVudHNba2V5XV07CiAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXRob2QpIGNvbnRpbnVlOwogICAgCiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGRlbGVnYXRlRXZlbnRTcGxpdHRlcik7CiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9IG1hdGNoWzFdLCBzZWxlY3RvciA9IG1hdGNoWzJdOwogICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IF8uYmluZChtZXRob2QsIHRoaXMpOwogICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSArPSAnLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkOwogICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RvciA9PT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwub24oZXZlbnROYW1lLCBtZXRob2QpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLm9uKGV2ZW50TmFtZSwgc2VsZWN0b3IsIG1ldGhvZCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBDbGVhcnMgYWxsIGNhbGxiYWNrcyBwcmV2aW91c2x5IGJvdW5kIHRvIHRoZSB2aWV3IHdpdGggYGRlbGVnYXRlRXZlbnRzYC4KICAgICAgICAvLyBZb3UgdXN1YWxseSBkb24ndCBuZWVkIHRvIHVzZSB0aGlzLCBidXQgbWF5IHdpc2ggdG8gaWYgeW91IGhhdmUgbXVsdGlwbGUKICAgICAgICAvLyBIYWNrYm9uZSB2aWV3cyBhdHRhY2hlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudC4KICAgICAgICB1bmRlbGVnYXRlRXZlbnRzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMuJGVsLm9mZignLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBCYXNlVmlldyBoYXMgYSBET00gZWxlbWVudCB0byByZW5kZXIgaW50by4KICAgICAgICAvLyBJZiBgdGhpcy5lbGAgaXMgYSBzdHJpbmcsIHBhc3MgaXQgdGhyb3VnaCBgJCgpYCwgdGFrZSB0aGUgZmlyc3QKICAgICAgICAvLyBtYXRjaGluZyBlbGVtZW50LCBhbmQgcmUtYXNzaWduIGl0IHRvIGBlbGAuIE90aGVyd2lzZSwgY3JlYXRlCiAgICAgICAgLy8gYW4gZWxlbWVudCBmcm9tIHRoZSBgaWRgLCBgY2xhc3NOYW1lYCBhbmQgYHRhZ05hbWVgIHByb3BlcnRpZXMuCiAgICAgICAgX2Vuc3VyZUVsZW1lbnQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCF0aGlzLmVsKSB7CiAgICAgICAgICAgICAgICB2YXIgYXR0cnMgPSBfLmV4dGVuZCh7fSwgXy5yZXN1bHQodGhpcywgJ2F0dHJpYnV0ZXMnKSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5pZCkgYXR0cnMuaWQgPSBfLnJlc3VsdCh0aGlzLCAnaWQnKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSkgYXR0cnNbJ2NsYXNzJ10gPSBfLnJlc3VsdCh0aGlzLCAnY2xhc3NOYW1lJyk7CiAgICAgICAgICAgICAgICB2YXIgJGVsID0gSGFja2JvbmUuJCgnPCcgKyBfLnJlc3VsdCh0aGlzLCAndGFnTmFtZScpICsgJz4nKS5hdHRyKGF0dHJzKTsKICAgICAgICAgICAgICAgIHRoaXMuc2V0RWxlbWVudCgkZWwsIGZhbHNlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuc2V0RWxlbWVudChfLnJlc3VsdCh0aGlzLCAnZWwnKSwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwgRXZlbnRzKTsKICAgIAogICAgLy8gTGlzdCBvZiB2aWV3IG9wdGlvbnMgdG8gYmUgbWVyZ2VkIGFzIHByb3BlcnRpZXMuCiAgICBCYXNlVmlldy52aWV3T3B0aW9ucyA9IFsnZWwnLCAnaWQnLCAnYXR0cmlidXRlcycsICdjbGFzc05hbWUnLCAndGFnTmFtZScsICdldmVudHMnXTsKICAgIAogICAgXy5leHRlbmQoQmFzZVZpZXcucHJvdG90eXBlLCBFdmVudHMpOwogICAgCiAgICAvLyBDYWNoZWQgcmVnZXggdG8gc3BsaXQga2V5cyBmb3IgYGRlbGVnYXRlYC4KICAgIHZhciBkZWxlZ2F0ZUV2ZW50U3BsaXR0ZXIgPSAvXihcUyspXHMqKC4qKSQvOwoKICAgIC8vIEhhY2tib25lLlZpZXcKICAgIC8vIC0tLS0tLS0tLS0tLS0KICAgIAogICAgLy8gT3B0aW9ucyB3aXRoIHNwZWNpYWwgbWVhbmluZyAqKGUuZy4gbW9kZWwsIGNvbGxlY3Rpb24sIGlkLCBjbGFzc05hbWUpKiBhcmUKICAgIC8vIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZSB2aWV3LiAgU2VlIGB2aWV3T3B0aW9uc2AgZm9yIGFuIGV4aGF1c3RpdmUKICAgIC8vIGxpc3QuCiAgICAKICAgIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipIYWNrYm9uZS5WaWV3KiogcHJvcGVydGllcyBhbmQgbWV0aG9kcy4KICAgIHZhciBWaWV3ID0gSGFja2JvbmUuVmlldyA9IEJhc2VWaWV3LmV4dGVuZCh7CiAgICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICAgICAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICAgICAgICAgIF8uZXh0ZW5kKHRoaXMsIF8ucGljayhvcHRpb25zLCBWaWV3LnZpZXdPcHRpb25zKSk7CiAgICAgICAgICAgIEJhc2VWaWV3LmNhbGwodGhpcywgb3B0aW9ucyk7CiAgICAgICAgfQogICAgfSwgewogICAgICAgIC8vIExpc3Qgb2YgdmlldyBvcHRpb25zIHRvIGJlIG1lcmdlZCBhcyBwcm9wZXJ0aWVzLgogICAgICAgIHZpZXdPcHRpb25zOiBbJ21vZGVsJywgJ2NvbGxlY3Rpb24nXQogICAgfSk7CgogICAgdmFyIENhY2hlID0gSGFja2JvbmUuQ2FjaGUgPSBCYXNlLmV4dGVuZCh7CiAgICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5yb290ID0ge307CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIE5vbi1BUEkgbWV0aG9kLiBDcmVhdGVzIGEgcGF0aCBvbiBnaXZlbiByb290IG9yIHRoZSBDYWNoZSNyb290LgogICAgICAgIF9jcmVhdGU6IGZ1bmN0aW9uIChwYXRoLCByb290KSB7CiAgICAgICAgICAgIHZhciBicmFuY2g7CiAgICAgICAgICAgIHZhciB0cmVlID0gKHJvb3QgfHwgdGhpcy5yb290KTsKICAgIAogICAgICAgICAgICB3aGlsZSAocGF0aC5sZW5ndGggPiAwICYmIHRyZWUpIHsKICAgICAgICAgICAgICAgIGJyYW5jaCA9IHBhdGguc2hpZnQoKTsKICAgICAgICAgICAgICAgIHRyZWVbYnJhbmNoXSB8fCAodHJlZVticmFuY2hdID0ge30pOwogICAgICAgICAgICAgICAgdHJlZSA9IHRyZWVbYnJhbmNoXTsKICAgICAgICAgICAgfQogICAgCiAgICAgICAgICAgIHJldHVybiB0cmVlOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBOb24tQVBJIG1ldGhvZC4gRGlncyBhIHBhdGggb24gdGhlIGdpdmVuIHJvb3Qgb3IgdGhlIENhY2hlI3Jvb3QuCiAgICAgICAgX3Jlc29sdmU6IGZ1bmN0aW9uIChyYXdQYXRoLCByb290KSB7CiAgICAgICAgICAgIHZhciByZXNvbHZlZCwgcGF0aDsKICAgIAogICAgICAgICAgICBpZiAocmF3UGF0aCBpbnN0YW5jZW9mIEFycmF5KSB7CiAgICAgICAgICAgICAgICBwYXRoID0gcmF3UGF0aDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHBhdGggPSAocmF3UGF0aC50b1N0cmluZygpLnNwbGl0KCIuIikgfHwgW10pOwogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSAocm9vdCB8fCB0aGlzLnJvb3QpOwogICAgCiAgICAgICAgICAgICAgICB3aGlsZSAocGF0aC5sZW5ndGggPiAwICYmIHJlc29sdmVkKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSByZXNvbHZlZFtwYXRoLnNoaWZ0KCldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBRdWVyaWVzIHRoZSBzcGVjaWZpZWQgYnJhbmNoKGVzKSBpbiB0aGUgQ2FjaGUuCiAgICAgICAgLy8gVGFrZXMgYW4gQXJyYXkgb2YgU3RyaW5ncywgTWFwIG9mIHN0cmluZ3Mgb3IgYSBTdHJpbmcuCiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoYXJnKSB7CiAgICAgICAgICAgIHZhciByZXN1bHQsIGk7CiAgICAKICAgICAgICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEFycmF5KSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTsKICAgIAogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHRoaXMuX3Jlc29sdmUoYXJnW2ldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBPYmplY3QpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHt9OwogICAgCiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gYXJnKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5oYXNPd25Qcm9wZXJ0eShpKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSB0aGlzLl9yZXNvbHZlKGFyZ1tpXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmdldChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fcmVzb2x2ZShhcmcpOwogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gQ3JlYXRlcyB0aGUgc3BlY2lmaWVkIGJyYW5jaChlcykgaW4gdGhlIENhY2hlLgogICAgICAgIC8vIFRha2VzIGFuIEFycmF5IG9mIFN0cmluZ3MsIE1hcCBvZiBzdHJpbmdzIG9yIGEgU3RyaW5nLgogICAgICAgIHNldDogZnVuY3Rpb24gKGFyZywgdmFsdWUpIHsKICAgICAgICAgICAgdmFyIHBhdGgsIG5hbWUsIHJvb3Q7CiAgICAKICAgICAgICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIE9iamVjdCkgewogICAgICAgICAgICAgICAgZm9yIChuYW1lIGluIGFyZykgewogICAgICAgICAgICAgICAgICAgIGlmIChhcmcuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQobmFtZSwgYXJnW25hbWVdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZyA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICBwYXRoID0gYXJnLnNwbGl0KCIuIik7CiAgICAgICAgICAgICAgICBuYW1lID0gcGF0aC5wb3AoKTsKICAgICAgICAgICAgICAgIHJvb3QgPSB0aGlzLl9jcmVhdGUocGF0aCk7CiAgICAgICAgICAgICAgICByb290W25hbWVdID0gdmFsdWU7CiAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gUmVtb3ZlcyB0aGUgc3BlY2lmaWVkIGJyYW5jaCBmcm9tIHRoZSBDYWNoZS4KICAgICAgICAvLyBUYWtlcyBhbiBBcnJheSBvZiBTdHJpbmdzLCBNYXAgb2Ygc3RyaW5ncyBvciBhIFN0cmluZy4KICAgICAgICB1bnNldDogZnVuY3Rpb24gKGFyZykgewogICAgICAgICAgICB2YXIgcGF0aCwgbmFtZSwgcm9vdCwgaTsKICAgIAogICAgICAgICAgICBpZiAoYXJnIGluc3RhbmNlb2YgQXJyYXkpIHsKICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmcubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc2V0KGFyZ1tpXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICAgICAgICAgICAgICBmb3IgKG5hbWUgaW4gYXJnKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc2V0KG5hbWUsIGFyZ1tuYW1lXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIHBhdGggPSBhcmcuc3BsaXQoIi4iKTsKICAgICAgICAgICAgICAgIG5hbWUgPSBwYXRoLnBvcCgpOwogICAgICAgICAgICAgICAgcm9vdCA9IHRoaXMuX3Jlc29sdmUocGF0aCk7CiAgICAgICAgICAgICAgICBkZWxldGUgcm9vdFtuYW1lXTsKICAgICAgICAgICAgfQogICAgCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KICAgIH0pOwoKICAgIC8vIEdlbmVyaWMgY2xhc3MgZm9yIGhhbmRsaW5nIGNoaWxkcmVuIGluIG9yZGVyIC0gd2VsbCwgb3Igbm90Li4uCiAgICB2YXIgQ29tcG9zaXRlID0gSGFja2JvbmUuQ29tcG9zaXRlID0gQ29tcG9uZW50LmV4dGVuZCh7CiAgICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IHt9OwogICAgICAgICAgICB0aGlzLm9yZGVyID0gW107CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEFkZHMgYSBuZXcgaXRlbSBpbnRvIHRoZSBvcmRlcgogICAgICAgIGFkZDogZnVuY3Rpb24gKGFyZywgaXRlbSkgewogICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuOwogICAgICAgICAgICB2YXIgb3JkZXIgPSB0aGlzLm9yZGVyOwogICAgICAgICAgICB2YXIgaTsKICAgIAogICAgICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gInN0cmluZyIgJiYgaXRlbSAmJiAhY2hpbGRyZW4uaGFzT3duUHJvcGVydHkoYXJnKSkgewogICAgICAgICAgICAgICAgY2hpbGRyZW5bYXJnXSA9IGl0ZW07CiAgICAgICAgICAgICAgICBvcmRlci5wdXNoKGFyZyk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gIm51bWJlciIgJiYgIWlzTmFOKGFyZykgJiYgYXJnID49IDApIHsKICAgICAgICAgICAgICAgIHRoaXMuYWRkKGFyZy50b1N0cmluZygpLCBpdGVtKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBBcnJheSkgewogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGlmIChvcmRlci5pbmRleE9mKGFyZ1tpXSkgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW29yZGVyLmxlbmd0aF0gPSBhcmdbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyLnB1c2gob3JkZXIubGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gYXJnKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5oYXNPd25Qcm9wZXJ0eShpKSAmJiAhY2hpbGRyZW4uaGFzT3duUHJvcGVydHkoaSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5baV0gPSBhcmdbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyLnB1c2goaSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgCiAgICAgICAgLy9SZXR1cm5zIGEgY2hpbGQgYnkgaXQncyBuYW1lIG9yIGJ5IHRoZSBvcmRlciBzcGVjaWZpZWQuCiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoYXJnKSB7CiAgICAgICAgICAgIHJldHVybiAodGhpcy5nZXRCeU5hbWUoYXJnKSB8fCB0aGlzLmdldEJ5T3JkZXIoYXJnKSk7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIERldGVybWluZXMgd2hldGhlciB0aGUgQ29tcG9zaXRlIGNvbnRhaW5zIGFuZCBpdGVtLgogICAgICAgIGNvbnRhaW5zOiBmdW5jdGlvbiAoYXJnKSB7CiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47CiAgICAgICAgICAgIHZhciByZXN1bHQgPSAhIXRoaXMuZ2V0KGFyZyk7CiAgICAgICAgICAgIHZhciBrZXk7CiAgICAKICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHsKICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGNoaWxkcmVuKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmhhc093blByb3BlcnR5KGtleSkgJiYgY2hpbGRyZW5ba2V5XSA9PT0gYXJnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgCiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIFJldHVybnMgYSBjaGlsZCBieSBpdCdzIG5hbWUuCiAgICAgICAgZ2V0QnlOYW1lOiBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbltuYW1lXTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gUmV0dXJucyBhIGNoaWxkIGJ5IHRoZSBvcmRlciBzcGVjaWZpZWQuCiAgICAgICAgZ2V0QnlPcmRlcjogZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuW3RoaXMub3JkZXJbaWRdXTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gUmVtb3ZlcyBhIGNoaWxkIGJ5IGl0J3MgbmFtZSBvciBieSB0aGUgb3JkZXIgc3BlY2lmaWVkLgogICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKGFyZykgewogICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuOwogICAgICAgICAgICB2YXIgb3JkZXIgPSB0aGlzLm9yZGVyOwogICAgICAgICAgICB2YXIga2V5LCBpZCwgaTsKICAgIAogICAgICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgIGlkID0gXy5pbmRleE9mKG9yZGVyLCBhcmcpOwogICAgICAgICAgICAgICAgZGVsZXRlIGNoaWxkcmVuW29yZGVyW2lkXV07CiAgICAgICAgICAgICAgICBvcmRlci5zcGxpY2UoaWQsIDEpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICJudW1iZXIiICYmICFpc05hTihhcmcpICYmIGFyZyA+IC0xKSB7CiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShhcmcudG9TdHJpbmcoKSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnKSB7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb3JkZXIubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBrZXkgPSBvcmRlcltpXTsKICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5ba2V5XSA9PT0gYXJnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjaGlsZHJlbltrZXldOwogICAgICAgICAgICAgICAgICAgICAgICBvcmRlci5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vRGVzdHJveXMgYW5kIHJlbW92ZXMgYWxsIGNoaWxkcmVuCiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47CiAgICAgICAgICAgIHZhciBvcmRlciA9IHRoaXMub3JkZXI7CiAgICAgICAgICAgIHZhciBjaGlsZDsKICAgIAogICAgICAgICAgICB3aGlsZSAob3JkZXIubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgY2hpbGQgPSBvcmRlclswXTsKICAgICAgICAgICAgICAgIGNoaWxkcmVuW2NoaWxkXS5kZXN0cm95KCk7CiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShjaGlsZCk7CiAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gRXhlY3V0ZXMgdGhlIHNwZWNpZmllZCBmdW5jdGlvbiBvbiBlYWNoIGNoaWxkLgogICAgICAgIGVhY2g6IGZ1bmN0aW9uIChwcm9jKSB7CiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47CiAgICAgICAgICAgIHZhciBvcmRlciA9IHRoaXMub3JkZXI7CiAgICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgICAgdmFyIGNoaWxkOwogICAgCiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvYyA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgZm9yICg7IGkgPCBvcmRlci5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGRyZW5bb3JkZXJbaV1dOwogICAgICAgICAgICAgICAgICAgIHByb2MuY2FsbCh0aGlzLCBjaGlsZCwgb3JkZXJbaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIEludm9rZXMgdGhlIHNwZWNpZmllZCBtZXRob2Qgb24gZWFjaCBjaGlsZCB3aXRoIHRoZSByZW1haW5pbmcgYXJndW1lbnRzLgogICAgICAgIGludm9rZTogZnVuY3Rpb24gKG1ldGhvZCkgewogICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47CiAgICAgICAgICAgIHZhciBvcmRlciA9IHRoaXMub3JkZXI7CiAgICAgICAgICAgIHZhciBpID0gMDsKICAgIAogICAgICAgICAgICBmb3IgKDsgaSA8IG9yZGVyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgY2hpbGRyZW5bb3JkZXJbaV1dW21ldGhvZF0oYXJncyk7CiAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAogICAgCiAgICAgICAgLy9GaW5kcyB0aGUgZmlyc3QgY2hpbGQgYmFzZWQgb24gdGhlIGdpdmVuIGNvbXBhcmF0b3IgZnVuY3Rpb24uCiAgICAgICAgZmluZDogZnVuY3Rpb24gKGNvbXBhcmF0b3IpIHsKICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjsKICAgICAgICAgICAgdmFyIG9yZGVyID0gdGhpcy5vcmRlcjsKICAgICAgICAgICAgdmFyIGkgPSAwOwogICAgICAgICAgICB2YXIgY2hpbGQ7CiAgICAKICAgICAgICAgICAgaWYgKHR5cGVvZiBjb21wYXJhdG9yID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IG9yZGVyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltvcmRlcltpXV07CiAgICAKICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGFyYXRvci5jYWxsKHRoaXMsIGNoaWxkLCBvcmRlcltpXSkpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgCiAgICAgICAgLy8gT3ZlcnJpZGVzIENvbXBvbmVudCNkZXN0cm95IG1ldGhvZC4KICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsKCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KICAgIH0pOwoKICAgIC8vIEJhY2tib25lLk1vZGVsCiAgICAvLyAtLS0tLS0tLS0tLS0tLQogICAgCiAgICAvLyBIYWNrYm9uZSAqKk1vZGVscyoqIGFyZSB0aGUgYmFzaWMgZGF0YSBvYmplY3QgaW4gdGhlIGZyYW1ld29yayAtLQogICAgLy8gZnJlcXVlbnRseSByZXByZXNlbnRpbmcgYSByb3cgaW4gYSB0YWJsZSBpbiBhIGRhdGFiYXNlIG9uIHlvdXIgc2VydmVyLgogICAgLy8gQSBkaXNjcmV0ZSBjaHVuayBvZiBkYXRhIGFuZCBhIGJ1bmNoIG9mIHVzZWZ1bCwgcmVsYXRlZCBtZXRob2RzIGZvcgogICAgLy8gcGVyZm9ybWluZyBjb21wdXRhdGlvbnMgYW5kIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGF0IGRhdGEuCiAgICAKICAgIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCB3aXRoIHRoZSBzcGVjaWZpZWQgYXR0cmlidXRlcy4gQSBjbGllbnQgaWQgKGBjaWRgKQogICAgLy8gaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYW5kIGFzc2lnbmVkIGZvciB5b3UuCiAgICB2YXIgTW9kZWwgPSBIYWNrYm9uZS5Nb2RlbCA9IFN0YXRlLmV4dGVuZCh7CiAgICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBvcHRpb25zKSB7CiAgICAgICAgICAgIFN0YXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBQcm94eSBgSGFja2JvbmUuc3luY2AgYnkgZGVmYXVsdCAtLSBidXQgb3ZlcnJpZGUgdGhpcyBpZiB5b3UgbmVlZAogICAgICAgIC8vIGN1c3RvbSBzeW5jaW5nIHNlbWFudGljcyBmb3IgKnRoaXMqIHBhcnRpY3VsYXIgbW9kZWwuCiAgICAgICAgc3luYzogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gSGFja2JvbmUuc3luYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAKICAgICAgICAvLyBGZXRjaCB0aGUgbW9kZWwgZnJvbSB0aGUgc2VydmVyLiBJZiB0aGUgc2VydmVyJ3MgcmVwcmVzZW50YXRpb24gb2YgdGhlCiAgICAgICAgLy8gbW9kZWwgZGlmZmVycyBmcm9tIGl0cyBjdXJyZW50IGF0dHJpYnV0ZXMsIHRoZXkgd2lsbCBiZSBvdmVycmlkZGVuLAogICAgICAgIC8vIHRyaWdnZXJpbmcgYSBgImNoYW5nZSJgIGV2ZW50LgogICAgICAgIGZldGNoOiBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7CiAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXM7CiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzOwogICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbiAocmVzcCkgewogICAgICAgICAgICAgICAgaWYgKCFtb2RlbC5zZXQobW9kZWwucGFyc2UocmVzcCwgb3B0aW9ucyksIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICAgICAgICB9OwogICAgICAgICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmMoJ3JlYWQnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gU2V0IGEgaGFzaCBvZiBtb2RlbCBhdHRyaWJ1dGVzLCBhbmQgc3luYyB0aGUgbW9kZWwgdG8gdGhlIHNlcnZlci4KICAgICAgICAvLyBJZiB0aGUgc2VydmVyIHJldHVybnMgYW4gYXR0cmlidXRlcyBoYXNoIHRoYXQgZGlmZmVycywgdGhlIG1vZGVsJ3MKICAgICAgICAvLyBzdGF0ZSB3aWxsIGJlIGBzZXRgIGFnYWluLgogICAgICAgIHNhdmU6IGZ1bmN0aW9uIChrZXksIHZhbCwgb3B0aW9ucykgewogICAgICAgICAgICB2YXIgYXR0cnMsIG1ldGhvZCwgeGhyLCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzOwogICAgCiAgICAgICAgICAgIC8vIEhhbmRsZSBib3RoIGAia2V5IiwgdmFsdWVgIGFuZCBge2tleTogdmFsdWV9YCAtc3R5bGUgYXJndW1lbnRzLgogICAgICAgICAgICBpZiAoa2V5ID09IG51bGwgfHwgdHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICAgIGF0dHJzID0ga2V5OwogICAgICAgICAgICAgICAgb3B0aW9ucyA9IHZhbDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIChhdHRycyA9IHt9KVtrZXldID0gdmFsOwogICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgb3B0aW9ucyA9IF8uZXh0ZW5kKHt2YWxpZGF0ZTogdHJ1ZX0sIG9wdGlvbnMpOwogICAgCiAgICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIGFuZCBhdHRyaWJ1dGVzIGV4aXN0LCBzYXZlIGFjdHMgYXMKICAgICAgICAgICAgLy8gYHNldChhdHRyKS5zYXZlKG51bGwsIG9wdHMpYCB3aXRoIHZhbGlkYXRpb24uIE90aGVyd2lzZSwgY2hlY2sgaWYKICAgICAgICAgICAgLy8gdGhlIG1vZGVsIHdpbGwgYmUgdmFsaWQgd2hlbiB0aGUgYXR0cmlidXRlcywgaWYgYW55LCBhcmUgc2V0LgogICAgICAgICAgICBpZiAoYXR0cnMgJiYgIW9wdGlvbnMud2FpdCkgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNldChhdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5fdmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICAvLyBTZXQgdGVtcG9yYXJ5IGF0dHJpYnV0ZXMgaWYgYHt3YWl0OiB0cnVlfWAuCiAgICAgICAgICAgIGlmIChhdHRycyAmJiBvcHRpb25zLndhaXQpIHsKICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IF8uZXh0ZW5kKHt9LCBhdHRyaWJ1dGVzLCBhdHRycyk7CiAgICAgICAgICAgIH0KICAgIAogICAgICAgICAgICAvLyBBZnRlciBhIHN1Y2Nlc3NmdWwgc2VydmVyLXNpZGUgc2F2ZSwgdGhlIGNsaWVudCBpcyAob3B0aW9uYWxseSkKICAgICAgICAgICAgLy8gdXBkYXRlZCB3aXRoIHRoZSBzZXJ2ZXItc2lkZSBzdGF0ZS4KICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7CiAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXM7CiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzOwogICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbiAocmVzcCkgewogICAgICAgICAgICAgICAgLy8gRW5zdXJlIGF0dHJpYnV0ZXMgYXJlIHJlc3RvcmVkIGR1cmluZyBzeW5jaHJvbm91cyBzYXZlcy4KICAgICAgICAgICAgICAgIG1vZGVsLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzOwogICAgICAgICAgICAgICAgdmFyIHNlcnZlckF0dHJzID0gbW9kZWwucGFyc2UocmVzcCwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy53YWl0KSBzZXJ2ZXJBdHRycyA9IF8uZXh0ZW5kKGF0dHJzIHx8IHt9LCBzZXJ2ZXJBdHRycyk7CiAgICAgICAgICAgICAgICBpZiAoXy5pc09iamVjdChzZXJ2ZXJBdHRycykgJiYgIW1vZGVsLnNldChzZXJ2ZXJBdHRycywgb3B0aW9ucykpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICAgICAgICB9OwogICAgICAgICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7CiAgICAKICAgICAgICAgICAgbWV0aG9kID0gdGhpcy5pc05ldygpID8gJ2NyZWF0ZScgOiAob3B0aW9ucy5wYXRjaCA/ICdwYXRjaCcgOiAndXBkYXRlJyk7CiAgICAgICAgICAgIGlmIChtZXRob2QgPT09ICdwYXRjaCcpIG9wdGlvbnMuYXR0cnMgPSBhdHRyczsKICAgICAgICAgICAgeGhyID0gdGhpcy5zeW5jKG1ldGhvZCwgdGhpcywgb3B0aW9ucyk7CiAgICAKICAgICAgICAgICAgLy8gUmVzdG9yZSBhdHRyaWJ1dGVzLgogICAgICAgICAgICBpZiAoYXR0cnMgJiYgb3B0aW9ucy53YWl0KSB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzOwogICAgCiAgICAgICAgICAgIHJldHVybiB4aHI7CiAgICAgICAgfSwKICAgIAogICAgICAgIC8vIERlc3Ryb3kgdGhpcyBtb2RlbCBvbiB0aGUgc2VydmVyIGlmIGl0IHdhcyBhbHJlYWR5IHBlcnNpc3RlZC4KICAgICAgICAvLyBPcHRpbWlzdGljYWxseSByZW1vdmVzIHRoZSBtb2RlbCBmcm9tIGl0cyBjb2xsZWN0aW9uLCBpZiBpdCBoYXMgb25lLgogICAgICAgIC8vIElmIGB3YWl0OiB0cnVlYCBpcyBwYXNzZWQsIHdhaXRzIGZvciB0aGUgc2VydmVyIHRvIHJlc3BvbmQgYmVmb3JlIHJlbW92YWwuCiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CiAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXM7CiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzOwogICAgCiAgICAgICAgICAgIHZhciBkZXN0cm95ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgbW9kZWwudHJpZ2dlcignZGVzdHJveScsIG1vZGVsLCBtb2RlbC5jb2xsZWN0aW9uLCBvcHRpb25zKTsKICAgICAgICAgICAgfTsKICAgIAogICAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbiAocmVzcCkgewogICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMud2FpdCB8fCBtb2RlbC5pc05ldygpKSBkZXN0cm95KCk7CiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICBpZiAoIW1vZGVsLmlzTmV3KCkpIG1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgICAgICAgIH07CiAgICAKICAgICAgICAgICAgaWYgKHRoaXMuaXNOZXcoKSkgewogICAgICAgICAgICAgICAgb3B0aW9ucy5zdWNjZXNzKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd3JhcEVycm9yKHRoaXMsIG9wdGlvbnMpOwogICAgCiAgICAgICAgICAgIHZhciB4aHIgPSB0aGlzLnN5bmMoJ2RlbGV0ZScsIHRoaXMsIG9wdGlvbnMpOwogICAgICAgICAgICBpZiAoIW9wdGlvbnMud2FpdCkgZGVzdHJveSgpOwogICAgCiAgICAgICAgICAgIFN0YXRlLnByb3RvdHlwZS5kZXN0cm95LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAKICAgICAgICAgICAgcmV0dXJuIHhocjsKICAgICAgICB9LAogICAgCiAgICAgICAgLy8gRGVmYXVsdCBVUkwgZm9yIHRoZSBtb2RlbCdzIHJlcHJlc2VudGF0aW9uIG9uIHRoZSBzZXJ2ZXIgLS0gaWYgeW91J3JlCiAgICAgICAgLy8gdXNpbmcgSGFja2JvbmUncyByZXN0ZnVsIG1ldGhvZHMsIG92ZXJyaWRlIHRoaXMgdG8gY2hhbmdlIHRoZSBlbmRwb2ludAogICAgICAgIC8vIHRoYXQgd2lsbCBiZSBjYWxsZWQuCiAgICAgICAgdXJsOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBiYXNlID0gXy5yZXN1bHQodGhpcywgJ3VybFJvb3QnKSB8fCBfLnJlc3VsdCh0aGlzLmNvbGxlY3Rpb24sICd1cmwnKSB8fCB1cmxFcnJvcigpOwogICAgICAgICAgICBpZiAodGhpcy5pc05ldygpKSByZXR1cm4gYmFzZTsKICAgICAgICAgICAgcmV0dXJuIGJhc2UgKyAoYmFzZS5jaGFyQXQoYmFzZS5sZW5ndGggLSAxKSA9PT0gJy8nID8gJycgOiAnLycpICsgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuaWQpOwogICAgICAgIH0KICAgIH0sIEV2ZW50cyk7CgogICAgLy9BTUQgc3VwcG9ydCB3aXRoIGRlZmluZQogICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICBkZWZpbmUoJ0hhY2tib25lJywgW10sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHJvb3QuSGFja2JvbmU7CiAgICAgICAgfSk7CiAgICB9Cgp9KS5jYWxsKHRoaXMpOw==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 02:56:46 GMT",
                    "Content-Length": "80363",
                    "Date": "Fri, 07 Nov 2014 02:56:46 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}