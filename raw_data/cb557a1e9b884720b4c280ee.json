{
    "url": "http://localhost:9999/michaelbromley/horizonal/src/eventHandlers.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location.hash</b> and written to <b>$()</b> via the following statements:<ul><li>var hash = window.location.hash;</li><li>var page = $(hash).closest('.hrz-page');</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/michaelbromley/horizonal/src/eventHandlers.js",
                "path": "/michaelbromley/horizonal/src/eventHandlers.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9taWNoYWVsYnJvbWxleS9ob3Jpem9uYWwvc3JjL2V2ZW50SGFuZGxlcnMuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTAwMjQNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMDM6MTk6NDMgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDAzOjE5OjQzIEdNVA0KDQovKioKICogV2hlbiB0aGUgd2luZG93IGlzIHJlLXNpemVkLCB3ZSBuZWVkIHRvIHJlLWNhbGN1bGF0ZSB0aGUgbGF5b3V0IG9mIHRoZSBhbGwgdGhlIGVsZW1lbnRzLgogKiBUbyBlbnN1cmUgdGhhdCB3ZSBnZXQgdGhlIHNhbWUgcmVzdWx0cyBhcyB0aGUgaW5pdGlhbCBsb2FkLCB3ZSBzaW1wbGUgcHVyZ2UgdGhlIGVudGlyZSBST09UIGVsZW1lbnQKICogYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgY2xvbmUgdGhhdCB3ZSBtYWRlIHJpZ2h0IGF0IHRoZSBzdGFydCBvZiB0aGUgaW5pdCgpIG1ldGhvZC4KICovCmZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7CiAgICBkZWJvdW5jZShmdW5jdGlvbigpIHsKICAgICAgICB2YXIgY3VycmVudFNjcm9sbCA9IFBBR0VfQ09MTEVDVElPTi5nZXRDdXJyZW50KCkubm9kZXNbMF0ubGF5b3V0LnRvcCAvIE9QVElPTlMuc2Nyb2xsYmFyU2hvcnRlblJhdGlvOwogICAgICAgIFJPT1QucmVwbGFjZVdpdGgoUk9PVF9DTE9ORS5jbG9uZSgpKTsKICAgICAgICBjb21wb3NlUGFnZShjdXJyZW50U2Nyb2xsKS50aGVuKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsVG9wKGN1cnJlbnRTY3JvbGwpOwogICAgICAgICAgICB1cGRhdGVQYWdlQ291bnQoKTsKICAgICAgICAgICAgT1BUSU9OUy5vblJlc2l6ZSgpOwogICAgICAgIH0pOwogICAgfSwgMjUwKSgpOwp9CgovKioKICogQWxsb3cga2V5Ym9hcmQgcGFnaW5nIHdpdGggdGhlIGFycm93IGtleXMuCiAqIEBwYXJhbSBlCiAqLwpmdW5jdGlvbiBrZXlkb3duSGFuZGxlcihlKSB7CiAgICBpZiAoZS53aGljaCA9PT0gNDAgfHwgZS53aGljaCA9PT0gMzkpIHsKICAgICAgICBzY3JvbGxUb05leHRQYWdlKCk7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgfSBlbHNlIGlmIChlLndoaWNoID09PSAzOCB8fCBlLndoaWNoID09PSAzNykgewogICAgICAgIHNjcm9sbFRvUHJldmlvdXNQYWdlKCk7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgfQp9CgovKioKICogV2hlbiB0aGUgdmVydGljYWwgc2Nyb2xsYmFyIGlzIGVuYWJsZWQsIHdlIHdhbnQgdG8gdHJpZ2dlciBwYWdlIGNoYW5nZXMgYXQgdGhlIGFwcHJvcHJpYXRlIHBvaW50cywKICogd2hlcmUgdGhhdCBwYWdlIHdvdWxkIGhhdmUgYmVlbiBpbiBhIHJlZ3VsYXIgc2Nyb2xsaW5nIEhUTUwgcGFnZS4KICovCmZ1bmN0aW9uIHNjcm9sbEhhbmRsZXIoKSB7CiAgICBpZiAodHlwZW9mIFBBR0VfQ09MTEVDVElPTiAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICB2YXIgc2Nyb2xsVG9wID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpOwogICAgICAgIHZhciBjdXJyZW50UGFnZU51bWJlciA9IFBBR0VfQ09MTEVDVElPTi5jdXJyZW50UGFnZTsKCiAgICAgICAgdmFyIG5ld1BhZ2VOdW1iZXIgPSBQQUdFX0NPTExFQ1RJT04uZ2V0UGFnZUF0T2Zmc2V0KHNjcm9sbFRvcCAqIE9QVElPTlMuc2Nyb2xsYmFyU2hvcnRlblJhdGlvKS5wYWdlTnVtYmVyOwogICAgICAgIGlmIChuZXdQYWdlTnVtYmVyICE9PSBjdXJyZW50UGFnZU51bWJlcikgewogICAgICAgICAgICBQQUdFX0NPTExFQ1RJT04uc2hvd1BhZ2UobmV3UGFnZU51bWJlcik7CiAgICAgICAgICAgIHVwZGF0ZVBhZ2VDb3VudCgpOwogICAgICAgIH0KICAgIH0KfQoKdmFyIF9tb3VzZXdoZWVsTGFzdEV2ZW50OwovKioKICogSGFuZGxlciB0byB0aHJvdHRsZSB0aGUgYWN0aW9uIG9mIGEgc2Nyb2xsIHdoZWVsIG9uIGEgbW91c2UvbGFwdG9wIHRyYWNrcGFkLiBUaGlzIHByZXZlbnRzCiAqIHBhZ2VzIGJlaW5nIHNraXBwZWQgd2hlbiBhIGZhc3Qgc2Nyb2xsIG1vdGlvbiBpcyBwZXJmb3JtZWQuCiAqIEBwYXJhbSBlCiAqLwpmdW5jdGlvbiBtb3VzZXdoZWVsSGFuZGxlcihlKSB7CiAgICBlLnByZXZlbnREZWZhdWx0KCk7CgogICAgdmFyIG5vdyA9ICBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKCiAgICBpZiAoMjUwIDwgbm93IC0gX21vdXNld2hlZWxMYXN0RXZlbnQgfHwgIV9tb3VzZXdoZWVsTGFzdEV2ZW50KSB7CiAgICAgICAgdmFyIGRlbHRhWSA9IGUub3JpZ2luYWxFdmVudC5kZWx0YVk7CiAgICAgICAgX21vdXNld2hlZWxMYXN0RXZlbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKCiAgICAgICAgaWYgKGRlbHRhWSA8IDApIHsKICAgICAgICAgICAgc2Nyb2xsVG9QcmV2aW91c1BhZ2UoKTsKICAgICAgICB9IGVsc2UgaWYgKDAgPCBkZWx0YVkpIHsKICAgICAgICAgICAgc2Nyb2xsVG9OZXh0UGFnZSgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKDI1MCA8IG5vdyAtIF9tb3VzZXdoZWVsTGFzdEV2ZW50KSB7CiAgICAgICAgICAgIF9tb3VzZXdoZWVsTGFzdEV2ZW50ID0gbnVsbDsKICAgICAgICB9CiAgICB9Cn0KCi8qKgogKiBUbyBhbGxvdyBVUkwgZnJhZ21lbnRzICgjKSB0byB3b3JrLCB3ZSBuZWVkIHRvIGZpbmQgdGhlIGxvY2F0aW9uIG9mIHRoZSBlbGVtZW50IHdpdGggdGhlIElECiAqIG1hdGNoaW5nIHRoZSBmcmFnbWVudCwgZmlndXJlIG91dCB3aGF0IHBhZ2UgaXQgaXMgb24sIGFuZCB0aGVuIGdvIHRvIHRoYXQgcGFnZS4KICovCmZ1bmN0aW9uIGhhc2hDaGFuZ2VIYW5kbGVyKCkgewogICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDsKICAgIGlmIChoYXNoICE9PSAnJykgewogICAgICAgIHZhciBwYWdlID0gJChoYXNoKS5jbG9zZXN0KCcuaHJ6LXBhZ2UnKTsKICAgICAgICB2YXIgcGFnZU51bWJlciA9IHBhcnNlSW50KHBhZ2UuYXR0cignaWQnKS5yZXBsYWNlKC9eXEQrL2csICcnKSk7CiAgICAgICAgUEFHRV9DT0xMRUNUSU9OLnNob3dQYWdlKHBhZ2VOdW1iZXIpOwogICAgICAgICQod2luZG93KS5zY3JvbGxUb3AoUEFHRV9DT0xMRUNUSU9OLmdldEN1cnJlbnQoKS5taWRQb2ludCk7CiAgICAgICAgdXBkYXRlUGFnZUNvdW50KCk7CiAgICB9Cn0KCi8qKgogKiBUaGlzIGV2ZW50IGhhbmRsZXIgaXMgZm9yIHRoZSBwYXJ0aWN1bGFyIHNjZW5hcmlvIG9mIHdoZW4gYSBsaW5rIHRvIGEgVVJMIGZyYWdtZW50IGluIHRoaXMgZG9jdW1lbnQgaXMgY2xpY2tlZCwKICogYnV0IHRoYXQgZnJhZ21lbnQgaXMgYWxyZWFkeSBpbiB0aGUgaGFzaCBwYXJ0IG9mIHRoZSB3aW5kb3cubG9jYXRpb24uIEluIHRoaXMgY2FzZSwgdGhlIGhhc2ggd2lsbCBub3QgY2hhbmdlIHNvCiAqIHdlIG5lZWQgdG8gbWFudWFsbHkgdHJpZ2dlciB0aGUgaGFzaGNoYW5nZSBldmVudCB0byBzaW11bGF0ZSB0aGUgZXhwZWN0ZWQgYmVoYXZpb3VyLgogKi8KZnVuY3Rpb24gbGlua0hhbmRsZXIoZSkgewogICAgdmFyIGN1cnJlbnRIYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7CiAgICBpZiAoY3VycmVudEhhc2ggIT09ICcnKSB7CiAgICAgICAgdmFyIHVybCA9ICQodGhpcykuYXR0cignaHJlZicpOwogICAgICAgIGlmICh1cmwuc3Vic3RyKDAsIDEpID09PSAnIycpIHsKICAgICAgICAgICAgaWYgKHVybCA9PT0gY3VycmVudEhhc2gpIHsKICAgICAgICAgICAgICAgIGhhc2hDaGFuZ2VIYW5kbGVyKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCnZhciBfdG91Y2hTdGFydFBvczsKdmFyIF90b3VjaFN0YXJ0VGltZTsKLyoqCiAqIEF0IHRoZSBzdGFydCBvZiBhIHRvdWNoIHdlIHNpbXBseSBuZWVkIHRvIHJlY29yZCB0aGUgdGltZSBhbmQgcG9zaXRpb24gb2YgdGhlIHRvdWNoLAogKiB0byB1c2UgbGF0ZXIgaW4gd29ya2luZyBvdXQgaG93IHRvIGhhbmRsZSBpdC4KICogQHBhcmFtIGUKICovCmZ1bmN0aW9uIHRvdWNoc3RhcnRIYW5kbGVyKGUpIHsKICAgIGlmIChpc1ZhbGlkVG91Y2hFdmVudChlKSkgewogICAgICAgIF90b3VjaFN0YXJ0UG9zID0gIHsKICAgICAgICAgICAgeDogZ2V0VG91Y2hYKGUpLAogICAgICAgICAgICB5OiBnZXRUb3VjaFkoZSkKICAgICAgICB9OwogICAgICAgIF90b3VjaFN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgfQp9CgovKioKICogV2UgcHJldmVudCB0aGUgZGVmYXVsdCB0b3VjaG1vdmUgYmVoYXZpb3VyIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0aGUgcGFnZSB0byBzY3JvbGwgbmF0dXJhbGx5IC0gd2UKICogd2FudCB0byBjb250cm9sIHRoZSBzY3JvbGxpbmcgcHJvZ3JhbW1hdGljYWxseSB0byBlbnN1cmUgb25seSBvbmUgcGFnZSBpcyBhZHZhbmNlZCBwZXIgc3dpcGUuCiAqIEBwYXJhbSBlCiAqLwpmdW5jdGlvbiB0b3VjaG1vdmVIYW5kbGVyKGUpIHsKICAgIGlmIChpc1ZhbGlkVG91Y2hFdmVudChlKSkgewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgdmFyIHRvdWNoRW5kUG9zID0gewogICAgICAgICAgICB4OiBnZXRUb3VjaFgoZSksCiAgICAgICAgICAgIHk6IGdldFRvdWNoWShlKQogICAgICAgIH07CiAgICAgICAgdmFyIHRvdWNoRW5kVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwoKICAgICAgICBpZiAoaXNWYWxpZFN3aXBlKF90b3VjaFN0YXJ0VGltZSwgdG91Y2hFbmRUaW1lLCBfdG91Y2hTdGFydFBvcywgdG91Y2hFbmRQb3MpKSB7CiAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBnZXRTd2lwZURpcmVjdGlvbihfdG91Y2hTdGFydFBvcywgdG91Y2hFbmRQb3MpOwogICAgICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikgewogICAgICAgICAgICAgICAgY2FzZSAndXAnOgogICAgICAgICAgICAgICAgICAgIENPTlRBSU5FUi5jc3MoJ3RvcCcsICctMzBweCcpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAnZG93bic6CiAgICAgICAgICAgICAgICAgICAgQ09OVEFJTkVSLmNzcygndG9wJywgJzMwcHgnKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOgogICAgICAgICAgICAgICAgICAgIENPTlRBSU5FUi5jc3MoJ2xlZnQnLCAnLTMwcHgnKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzoKICAgICAgICAgICAgICAgICAgICBDT05UQUlORVIuY3NzKCdsZWZ0JywgJzMwcHgnKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLyoqCiAqIEF0IHRoZSBlbmQgb2YgdGhlIHRvdWNoLCB3ZSBhZ2FpbiByZWNvcmQgdGhlIHRpbWUgYW5kIHBvc2l0aW9uLCBhbmQgdGhlbiB1c2UgdGhlc2UgZGF0YSB0byBmaWd1cmUgb3V0CiAqIGlmIHdlIHNob3VsZCB0cmVhdCB0aGlzIGFzIGEgInN3aXBlIiwgYW5kIGlmIHNvLCBpbiB3aGF0IGRpcmVjdGlvbiB0aGUgc3dpcGUgd2FzLiBUaGVuIHdlIGNhbgogKiBtb3ZlIHRvIHRoZSBuZXh0IG9yIHByZXZpb3VzIHBhZ2UgYXMgYXBwcm9wcmlhdGUuCiAqIEBwYXJhbSBlCiAqLwpmdW5jdGlvbiB0b3VjaGVuZEhhbmRsZXIoZSkgewogICAgaWYgKGlzVmFsaWRUb3VjaEV2ZW50KGUpKSB7CiAgICAgICAgdmFyIHNjcm9sbFRvOwogICAgICAgIHZhciB0b3VjaEVuZFBvcyA9IHsKICAgICAgICAgICAgeDogZ2V0VG91Y2hYKGUpLAogICAgICAgICAgICB5OiBnZXRUb3VjaFkoZSkKICAgICAgICB9OwogICAgICAgIHZhciB0b3VjaEVuZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKCiAgICAgICAgQ09OVEFJTkVSLmNzcygndG9wJywgJzBweCcpOwogICAgICAgIENPTlRBSU5FUi5jc3MoJ2xlZnQnLCAnMHB4Jyk7CgogICAgICAgIGlmIChpc1ZhbGlkU3dpcGUoX3RvdWNoU3RhcnRUaW1lLCB0b3VjaEVuZFRpbWUsIF90b3VjaFN0YXJ0UG9zLCB0b3VjaEVuZFBvcykpIHsKICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGdldFN3aXBlRGlyZWN0aW9uKF90b3VjaFN0YXJ0UG9zLCB0b3VjaEVuZFBvcyk7CiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICJkb3duIiB8fCBkaXJlY3Rpb24gPT09ICJyaWdodCIpIHsKICAgICAgICAgICAgICAgIHNjcm9sbFRvUHJldmlvdXNQYWdlKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzY3JvbGxUb05leHRQYWdlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbFRvcChzY3JvbGxUbyk7CiAgICAgICAgfQogICAgfQp9CgovLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQovLwovLyBVdGlsaXR5IGZ1bmN0aW9ucyB1c2VkIGJ5IHRoZSBldmVudCBoYW5kbGVycwovLwovLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKLyoqCiAqIFRoZSB3YXkgdGhlIGV2ZW50IGhhbmRsZXJzIGNoYW5nZSBmcm9tIG9uZSBwYWdlIHRvIHRoZSBuZXh0IGlzIGJ5CiAqIHNldHRpbmcgdGhlIHZhbHVlIG9mIHdpbmRvdy5zY3JvbGxUb3AsIGFuZCB0aGVuIGxldHRpbmcgdGhlCiAqIHNjcm9sbCBoYW5kbGVyIHRha2UgY2FyZSBvZiBhY3R1YWxseSBkb2luZyB0aGUgdHJhbnNpdGlvbgogKi8KZnVuY3Rpb24gc2Nyb2xsVG9OZXh0UGFnZSgpIHsKICAgIHZhciBzY3JvbGxUbzsKICAgIGlmIChQQUdFX0NPTExFQ1RJT04uY3VycmVudFBhZ2UgPCBQQUdFX0NPTExFQ1RJT04ubGVuZ3RoKSB7CiAgICAgICAgc2Nyb2xsVG8gPSBQQUdFX0NPTExFQ1RJT04uZ2V0TmV4dCgpLm1pZFBvaW50OwogICAgICAgICQod2luZG93KS5zY3JvbGxUb3Aoc2Nyb2xsVG8pOwogICAgfQp9CgpmdW5jdGlvbiBzY3JvbGxUb1ByZXZpb3VzUGFnZSgpIHsKICAgIHZhciBzY3JvbGxUbzsKICAgIGlmIChQQUdFX0NPTExFQ1RJT04uY3VycmVudFBhZ2UgPT09IDIpIHsKICAgICAgICBzY3JvbGxUbyA9IDA7CiAgICB9IGVsc2UgaWYgKDEgPCBQQUdFX0NPTExFQ1RJT04uY3VycmVudFBhZ2UpIHsKICAgICAgICBzY3JvbGxUbyA9IFBBR0VfQ09MTEVDVElPTi5nZXRQcmV2aW91cygpLm1pZFBvaW50OwogICAgfQogICAgaWYgKHR5cGVvZiBzY3JvbGxUbyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAkKHdpbmRvdykuc2Nyb2xsVG9wKHNjcm9sbFRvKTsKICAgIH0KfQoKLyoqCiAqIFdlIHdhbnQgdG8gcHJldmVudCB0aGUgcmVzaXplSGFuZGxlciBiZWluZyBjYWxsZWQgdG9vIG9mdGVuIGFzIHRoZSBwYWdlIGlzIHJlLXNpemVkLgogKiBAcGFyYW0gZnVuCiAqIEBwYXJhbSBtaWwKICogQHJldHVybnMge0Z1bmN0aW9ufQogKi8KZnVuY3Rpb24gZGVib3VuY2UoZnVuLCBtaWwpewogICAgdmFyIHRpbWVyOwogICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTsKICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgZnVuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwgbWlsKTsKICAgIH07Cn0KCi8qKgogKiBJbnRlcm5ldCBFeHBsb3JlciB1c2VzIHRoZSBQb2ludGVyIEV2ZW50cyBtb2RlbCBmb3IgYm90aCB0b3VjaCBhbmQgbW91c2UgZXZlbnRzLiBUaGVyZWZvcmUsIHdoZW4gd2UgYmluZCB0byB0aGUKICogJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJ1cCcgZXRjLiBldmVudHMsIHRoZXkgd2lsbCBhbHNvIGJlIGZpcmVkIHdoZW4gdGhlIG1vdXNlIGlzIGNsaWNrZWQsIHdoaWNoIHdlIGRvIG5vdCB3YW50LgogKiBUaGVyZWZvcmUgd2UgZmlsdGVyIG91dCB0aGUgZXZlbnRzIHRoYXQgYXJlIHRyaWdnZXJlZCBieSBtb3VzZS4KICogQHBhcmFtIGUKICogQHJldHVybnMge2Jvb2xlYW59CiAqLwpmdW5jdGlvbiBpc1ZhbGlkVG91Y2hFdmVudChlKSB7CiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50Lmhhc093blByb3BlcnR5KCdwb2ludGVyVHlwZScpKSB7CiAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRydWU7Cn0KCi8qKgogKiBUbyBiZSB2YWxpZCwgYSBzd2lwZSBtdXN0IHRyYXZlbCBhIHN1ZmZpY2llbnQgZGlzdGFuY2UgYWNyb3NzIHRoZSBzY3JlZW4gKHRvIGRpc3Rpbmd1aXNoIGZyb20gc2xvcHB5CiAqIGNsaWNrcyksIGFuZCBtdXN0IGJlIGZhaXJseSBmYXN0ICh0byBkaXN0aW5ndWlzaCBmcm9tIGhpZ2hsaWdodGluZyB0ZXh0IGF0dGVtcHRzKQogKiBAcGFyYW0gc3RhcnRUaW1lCiAqIEBwYXJhbSBlbmRUaW1lCiAqIEBwYXJhbSBzdGFydFBvcwogKiBAcGFyYW0gZW5kUG9zCiAqLwpmdW5jdGlvbiBpc1ZhbGlkU3dpcGUoc3RhcnRUaW1lLCBlbmRUaW1lLCBzdGFydFBvcywgZW5kUG9zKSB7CiAgICB2YXIgTUFYX0lOVEVSVkFMID0gNzAwOwogICAgdmFyIE1JTl9ESVNUQU5DRSA9IDc1OwogICAgdmFyIHRpbWVJbnRlcnZhbCA9IGVuZFRpbWUgLSBzdGFydFRpbWU7CiAgICB2YXIgZFggPSBlbmRQb3MueCAtIHN0YXJ0UG9zLng7CiAgICB2YXIgZFkgPSBlbmRQb3MueSAtIHN0YXJ0UG9zLnk7CiAgICB2YXIgc3dpcGVEaXN0YW5jZSA9IE1hdGguc3FydChkWCAqIGRYICsgZFkgKiBkWSk7CgogICAgaWYgKE1BWF9JTlRFUlZBTCA8IHRpbWVJbnRlcnZhbCB8fAogICAgICAgIHN3aXBlRGlzdGFuY2UgPCBNSU5fRElTVEFOQ0UpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQp9CgovKioKICogR2l2ZW4gYSBwYWlyIG9mIGNvb3JkaW5hdGVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb25zIG9mIHRoZSBzd2lwZSwgd2UgY2FuCiAqIGNhbGN1bGF0ZSBhIHZlY3RvciBhbmQgaXRzIGFuZ2xlIHJlbGF0aXZlIHRvIHRoZSB4LWF4aXMuIFVzaW5nIHRoaXMgaW5mb3JtYXRpb24gd2UgY2FuIGZpZ3VyZQogKiBvdXQgdGhlIGRpcmVjdGlvbiBvZiB0aGUgc3dpcGUgKHVwLCBkb3duLCBsZWZ0IG9yIHJpZ2h0KS4KICogQHBhcmFtIHN0YXJ0UG9zCiAqIEBwYXJhbSBlbmRQb3MKICogQHJldHVybnMgeyp9CiAqLwpmdW5jdGlvbiBnZXRTd2lwZURpcmVjdGlvbihzdGFydFBvcywgZW5kUG9zKSB7CiAgICB2YXIgZFggPSBlbmRQb3MueCAtIHN0YXJ0UG9zLng7CiAgICB2YXIgZFkgPSBlbmRQb3MueSAtIHN0YXJ0UG9zLnk7CiAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKGRZLCBkWCk7CiAgICB2YXIgZGlyZWN0aW9uOwogICAgaWYgKC1NYXRoLlBJLzQgPCBhbmdsZSAmJiBhbmdsZSA8PSBNYXRoLlBJLzQpIHsKICAgICAgICBkaXJlY3Rpb24gPSAicmlnaHQiOwogICAgfSBlbHNlIGlmICgtMy80Kk1hdGguUEkgPCBhbmdsZSAmJiBhbmdsZSA8PSAtTWF0aC5QSS80KSB7CiAgICAgICAgZGlyZWN0aW9uID0gInVwIjsKICAgIH0gZWxzZSBpZiAoMy80Kk1hdGguUEkgPCBhbmdsZSB8fCBhbmdsZSA8IC0zLzQqTWF0aC5QSSkgewogICAgICAgIGRpcmVjdGlvbiA9ICJsZWZ0IjsKICAgIH0gZWxzZSB7CiAgICAgICAgZGlyZWN0aW9uID0gImRvd24iOwogICAgfQogICAgcmV0dXJuIGRpcmVjdGlvbjsKfQoKLyoqCiAqIEludGVybmV0IEV4cGxvcmVyIHVzZXMgYSBkaWZmZXJlbnQgbW9kZWwgZm9yIHRvdWNoIGV2ZW50cyBmcm9tIFdlYmtpdCBicm93c2VycyBhbmQgb3RoZXJzLAogKiBzbyB3ZSBuZWVkIHRvIGRvIGEgc21hbGwgY2hlY2sgdG8gZ2V0IHRoZSBjb3JyZWN0IHBvc2l0aW9ucyBvZiB0b3VjaCBldmVudHMuCiAqIEBwYXJhbSBlCiAqIEByZXR1cm5zIHsqfQogKi8KZnVuY3Rpb24gZ2V0VG91Y2hYKGUpIHsKICAgIHZhciB4OwogICAgaWYgKGUub3JpZ2luYWxFdmVudC5oYXNPd25Qcm9wZXJ0eSgnY2hhbmdlZFRvdWNoZXMnKSkgewogICAgICAgIHggPSBlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WDsKICAgIH0gZWxzZSB7CiAgICAgICAgeCA9IGUub3JpZ2luYWxFdmVudC5jbGllbnRYOwogICAgfQogICAgcmV0dXJuIHg7Cn0KCmZ1bmN0aW9uIGdldFRvdWNoWShlKSB7CiAgICB2YXIgeTsKICAgIGlmIChlLm9yaWdpbmFsRXZlbnQuaGFzT3duUHJvcGVydHkoJ2NoYW5nZWRUb3VjaGVzJykpIHsKICAgICAgICB5ID0gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFk7CiAgICB9IGVsc2UgewogICAgICAgIHkgPSBlLm9yaWdpbmFsRXZlbnQuY2xpZW50WTsKICAgIH0KICAgIHJldHVybiB5Owp9",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 03:19:43 GMT",
                    "Content-Length": "10024",
                    "Date": "Fri, 07 Nov 2014 03:19:43 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}