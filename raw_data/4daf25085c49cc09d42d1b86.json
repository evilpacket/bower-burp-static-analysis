{
    "url": "http://localhost:9999/piwik/piwik/plugins/CoreHome/javascripts/broadcast.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>window.location.search</b> and written to <b>window.location.href</b> via the following statements:<ul><li>var currentSearchStr = window.location.search;</li><li>var newUrl = currentSearchStr + currentHashStr;</li><li>window.location.href = newUrl;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/piwik/piwik/plugins/CoreHome/javascripts/broadcast.js",
                "path": "/piwik/piwik/plugins/CoreHome/javascripts/broadcast.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9waXdpay9waXdpay9wbHVnaW5zL0NvcmVIb21lL2phdmFzY3JpcHRzL2Jyb2FkY2FzdC5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMjI3MTQNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMjI6MDc6MTkgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDIyOjA3OjEzIEdNVA0KDQovKiEKICogUGl3aWsgLSBmcmVlL2xpYnJlIGFuYWx5dGljcyBwbGF0Zm9ybQogKgogKiBAbGluayBodHRwOi8vcGl3aWsub3JnCiAqIEBsaWNlbnNlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9ncGwtMy4wLmh0bWwgR1BMIHYzIG9yIGxhdGVyCiAqLwoKLyoqCiAqICBicm9hZGNhc3Qgb2JqZWN0IGlzIHRvIGhlbHAgbWFpbnRhaW4gYSBoYXNoIGZvciBsaW5rIGNsaWNrcyBhbmQgYWpheCBjYWxscwogKiAgc28gd2UgY2FuIGhhdmUgYmFjayBidXR0b24gYW5kIHJlZnJlc2ggYnV0dG9uIHdvcmtpbmcuCiAqCiAqIEB0eXBlIHtvYmplY3R9CiAqLwp2YXIgYnJvYWRjYXN0ID0gewoKICAgIC8qKgogICAgICogSW5pdGlhbGlzYXRpb24gc3RhdGUKICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICovCiAgICBfaXNJbml0OiBmYWxzZSwKCiAgICAvKioKICAgICAqIExhc3Qga25vd24gaGFzaCB1cmwgd2l0aG91dCBwb3BvdmVyIHBhcmFtZXRlcgogICAgICovCiAgICBjdXJyZW50SGFzaFVybDogZmFsc2UsCgogICAgLyoqCiAgICAgKiBMYXN0IGtub3duIHBvcG92ZXIgcGFyYW1ldGVyCiAgICAgKi8KICAgIGN1cnJlbnRQb3BvdmVyUGFyYW1ldGVyOiBmYWxzZSwKCiAgICAvKioKICAgICAqIENhbGxiYWNrcyBmb3IgcG9wb3ZlciBwYXJhbWV0ZXIgY2hhbmdlCiAgICAgKi8KICAgIHBvcG92ZXJIYW5kbGVyczogW10sCgogICAgLyoqCiAgICAgKiBGb3JjZSByZWxvYWQgb25jZQogICAgICovCiAgICBmb3JjZVJlbG9hZDogZmFsc2UsCgogICAgLyoqCiAgICAgKiBTdXBwcmVzcyBjb250ZW50IHVwZGF0ZSBvbiBoYXNoIGNoYW5naW5nCiAgICAgKi8KICAgIHVwZGF0ZUhhc2hPbmx5OiBmYWxzZSwKCiAgICAvKioKICAgICAqIEluaXRpYWxpemVzIGJyb2FkY2FzdCBvYmplY3QKICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KICAgIGluaXQ6IGZ1bmN0aW9uIChub0xvYWRpbmdNZXNzYWdlKSB7CiAgICAgICAgaWYgKGJyb2FkY2FzdC5faXNJbml0KSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgYnJvYWRjYXN0Ll9pc0luaXQgPSB0cnVlOwoKICAgICAgICAvLyBJbml0aWFsaXplIGhpc3RvcnkgcGx1Z2luLgogICAgICAgIC8vIFRoZSBjYWxsYmFjayBpcyBjYWxsZWQgYXQgb25jZSBieSBwcmVzZW50IGxvY2F0aW9uLmhhc2gKICAgICAgICAkLmhpc3RvcnkuaW5pdChicm9hZGNhc3QucGFnZWxvYWQsIHt1bmVzY2FwZTogdHJ1ZX0pOwoKICAgICAgICBpZihub0xvYWRpbmdNZXNzYWdlICE9IHRydWUpIHsKICAgICAgICAgICAgcGl3aWtIZWxwZXIuc2hvd0FqYXhMb2FkaW5nKCk7CiAgICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqID09PT09PT09PT0gUGFnZUxvYWQgZnVuY3Rpb24gPT09PT09PT09PT09PT09PT0KICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW46CiAgICAgKiAxLiBhZnRlciBjYWxsaW5nICQuaGlzdG9yeS5pbml0KCk7CiAgICAgKiAyLiBhZnRlciBjYWxsaW5nICQuaGlzdG9yeS5sb2FkKCk7ICAvL2xvb2sgYXQgYnJvYWRjYXN0LmNoYW5nZVBhcmFtZXRlcigpOwogICAgICogMy4gYWZ0ZXIgcHVzaGluZyAiR28gQmFjayIgYnV0dG9uIG9mIGEgYnJvd3NlcgogICAgICoKICAgICAqICogTm90ZTogdGhlIG1ldGhvZCBpcyBtYW5pcHVsYXRlZCBpbiBPdmVybGF5L2phdmFzY3JpcHRzL1Bpd2lrX092ZXJsYXkuanMgLSBrZWVwIHRoaXMgaW4gbWluZCB3aGVuIG1ha2luZyBjaGFuZ2VzLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgaGFzaCB0byBsb2FkIHBhZ2Ugd2l0aAogICAgICogQHJldHVybiB7dm9pZH0KICAgICAqLwogICAgcGFnZWxvYWQ6IGZ1bmN0aW9uIChoYXNoKSB7CiAgICAgICAgYnJvYWRjYXN0LmluaXQoKTsKCiAgICAgICAgLy8gVW5iaW5kIGFueSBwcmV2aW91c2x5IGF0dGFjaGVkIHJlc2l6ZSBoYW5kbGVycwogICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZScpOwoKICAgICAgICAvLyBkbyBub3QgdXBkYXRlIGNvbnRlbnQgaWYgaXQgc2hvdWxkIGJlIHN1cHByZXNzZWQKICAgICAgICBpZiAoYnJvYWRjYXN0LnVwZGF0ZUhhc2hPbmx5KSB7CiAgICAgICAgICAgIGJyb2FkY2FzdC51cGRhdGVIYXNoT25seSA9IGZhbHNlOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBoYXNoIGRvZXNuJ3QgY29udGFpbiB0aGUgZmlyc3QgIyBjaGFyYWN0ZXIuCiAgICAgICAgaWYgKGhhc2ggJiYgMCA9PT0gKCcnK2hhc2gpLmluZGV4T2YoJy8nKSkgewogICAgICAgICAgICBoYXNoID0gKCcnK2hhc2gpLnN1YnN0cigxKTsKICAgICAgICB9CgogICAgICAgIGlmIChoYXNoKSB7CgogICAgICAgICAgICBpZiAoL15wb3BvdmVyPS8udGVzdChoYXNoKSkgewogICAgICAgICAgICAgICAgdmFyIGhhc2hQYXJ0cyA9IFsKICAgICAgICAgICAgICAgICAgICAnJywKICAgICAgICAgICAgICAgICAgICBoYXNoLnJlcGxhY2UoL15wb3BvdmVyPS8sICcnKQogICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBoYXNoUGFydHMgPSBoYXNoLnNwbGl0KCcmcG9wb3Zlcj0nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaGFzaFVybCA9IGhhc2hQYXJ0c1swXTsKICAgICAgICAgICAgdmFyIHBvcG92ZXJQYXJhbSA9ICcnOwogICAgICAgICAgICBpZiAoaGFzaFBhcnRzLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgIHBvcG92ZXJQYXJhbSA9IGhhc2hQYXJ0c1sxXTsKICAgICAgICAgICAgICAgIC8vIGluIGNhc2UgdGhlICQgd2FzIGVuY29kZWQgKGUuZy4gd2hlbiB1c2luZyBjb3B5JnBhc3RlIG9uIHVybHMgaW4gc29tZSBicm93c2VycykKICAgICAgICAgICAgICAgIHBvcG92ZXJQYXJhbSA9IGRlY29kZVVSSUNvbXBvbmVudChwb3BvdmVyUGFyYW0pOwogICAgICAgICAgICAgICAgLy8gcmV2ZXJ0IHNwZWNpYWwgZW5jb2RpbmcgZnJvbSBicm9hZGNhc3QucHJvcGFnYXRlTmV3UG9wb3ZlclBhcmFtZXRlcigpCiAgICAgICAgICAgICAgICBwb3BvdmVyUGFyYW0gPSBwb3BvdmVyUGFyYW0ucmVwbGFjZSgvXCQvZywgJyUnKTsKICAgICAgICAgICAgICAgIHBvcG92ZXJQYXJhbSA9IGRlY29kZVVSSUNvbXBvbmVudChwb3BvdmVyUGFyYW0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcGFnZVVybFVwZGF0ZWQgPSAocG9wb3ZlclBhcmFtID09ICcnIHx8CiAgICAgICAgICAgICAgICAoYnJvYWRjYXN0LmN1cnJlbnRIYXNoVXJsICE9PSBmYWxzZSAmJiBicm9hZGNhc3QuY3VycmVudEhhc2hVcmwgIT0gaGFzaFVybCkpOwoKICAgICAgICAgICAgdmFyIHBvcG92ZXJQYXJhbVVwZGF0ZWQgPSAocG9wb3ZlclBhcmFtICE9ICcnICYmIGhhc2hVcmwgPT0gYnJvYWRjYXN0LmN1cnJlbnRIYXNoVXJsKTsKCiAgICAgICAgICAgIGlmIChicm9hZGNhc3QuY3VycmVudEhhc2hVcmwgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAvLyBuZXcgcGFnZSBsb2FkCiAgICAgICAgICAgICAgICBwYWdlVXJsVXBkYXRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBwb3BvdmVyUGFyYW1VcGRhdGVkID0gKHBvcG92ZXJQYXJhbSAhPSAnJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwYWdlVXJsVXBkYXRlZCB8fCBicm9hZGNhc3QuZm9yY2VSZWxvYWQpIHsKICAgICAgICAgICAgICAgIFBpd2lrX1BvcG92ZXIuY2xvc2UoKTsKCiAgICAgICAgICAgICAgICBpZiAoaGFzaFVybCAhPSBicm9hZGNhc3QuY3VycmVudEhhc2hVcmwgfHwgYnJvYWRjYXN0LmZvcmNlUmVsb2FkKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gcmVzdG9yZSBhamF4IGxvYWRlZCBzdGF0ZQogICAgICAgICAgICAgICAgICAgIGJyb2FkY2FzdC5sb2FkQWpheENvbnRlbnQoaGFzaFVybCk7CgogICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgIldpZGdldHMgJiBEYXNoYm9hcmQiIGlzIGRlbGV0ZWQgb24gcmVsb2FkCiAgICAgICAgICAgICAgICAgICAgJCgnLnRvcF9jb250cm9scyAuZGFzaGJvYXJkLW1hbmFnZXInKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgJCgnI2Rhc2hib2FyZFdpZGdldHNBcmVhJykuZGFzaGJvYXJkKCdkZXN0cm95Jyk7CgogICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB1bnVzZWQgY29udHJvbHMKICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdwaXdpay9VSScpLlVJQ29udHJvbC5jbGVhbnVwVW51c2VkQ29udHJvbHMoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJvYWRjYXN0LmZvcmNlUmVsb2FkID0gZmFsc2U7CiAgICAgICAgICAgIGJyb2FkY2FzdC5jdXJyZW50SGFzaFVybCA9IGhhc2hVcmw7CiAgICAgICAgICAgIGJyb2FkY2FzdC5jdXJyZW50UG9wb3ZlclBhcmFtZXRlciA9IHBvcG92ZXJQYXJhbTsKCiAgICAgICAgICAgIGlmIChwb3BvdmVyUGFyYW1VcGRhdGVkICYmIHBvcG92ZXJQYXJhbSA9PSAnJykgewogICAgICAgICAgICAgICAgUGl3aWtfUG9wb3Zlci5jbG9zZSgpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHBvcG92ZXJQYXJhbVVwZGF0ZWQpIHsKICAgICAgICAgICAgICAgIHZhciBwb3BvdmVyUGFyYW1QYXJ0cyA9IHBvcG92ZXJQYXJhbS5zcGxpdCgnOicpOwogICAgICAgICAgICAgICAgdmFyIGhhbmRsZXJOYW1lID0gcG9wb3ZlclBhcmFtUGFydHNbMF07CiAgICAgICAgICAgICAgICBwb3BvdmVyUGFyYW1QYXJ0cy5zaGlmdCgpOwogICAgICAgICAgICAgICAgdmFyIHBhcmFtID0gcG9wb3ZlclBhcmFtUGFydHMuam9pbignOicpOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBicm9hZGNhc3QucG9wb3ZlckhhbmRsZXJzW2hhbmRsZXJOYW1lXSAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgIGJyb2FkY2FzdC5wb3BvdmVySGFuZGxlcnNbaGFuZGxlck5hbWVdKHBhcmFtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBzdGFydCBwYWdlCiAgICAgICAgICAgIFBpd2lrX1BvcG92ZXIuY2xvc2UoKTsKCiAgICAgICAgICAgICQoJy5wYWdlV3JhcCAjY29udGVudDpub3QoLmFkbWluKScpLmVtcHR5KCk7CiAgICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIHByb3BhZ2F0ZUFqYXggLS0gdXBkYXRlIGhhc2ggdmFsdWVzIHRoZW4gbWFrZSBhamF4IGNhbGxzLgogICAgICogICAgZXhhbXBsZSA6CiAgICAgKiAgICAgICAxKSA8YSBocmVmPSJqYXZhc2NyaXB0OmJyb2FkY2FzdC5wcm9wYWdhdGVBamF4KCdtb2R1bGU9UmVmZXJyZXJzJmFjdGlvbj1nZXRLZXl3b3JkcycpIj5WaWV3IGtleXdvcmRzIHJlcG9ydDwvYT4KICAgICAqICAgICAgIDIpIE1haW4gbWVudSBsaSBhbHNvIGdvZXMgdGhyb3VnaCB0aGlzIGZ1bmN0aW9uLgogICAgICoKICAgICAqIFdpbGwgcHJvcGFnYXRlIHlvdXIgbmV3IHZhbHVlIGludG8gdGhlIGN1cnJlbnQgaGFzaCBzdHJpbmcgYW5kIG1ha2UgYWpheCBjYWxscy4KICAgICAqCiAgICAgKiBOT1RFOiB0aGlzIG1ldGhvZCB3aWxsIG9ubHkgbWFrZSBhamF4IGNhbGwgYW5kIHJlcGxhY2luZyBtYWluIGNvbnRlbnQuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IGFqYXhVcmwgIHF1ZXJ5c3RyaW5nIHdpdGggcGFyYW1ldGVycyB0byBiZSB1cGRhdGVkCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkaXNhYmxlSGlzdG9yeV0gIHRoZSBoYXNoIGNoYW5nZSB3b24ndCBiZSBhdmFpbGFibGUgaW4gdGhlIGJyb3dzZXIgaGlzdG9yeQogICAgICogQHJldHVybiB7dm9pZH0KICAgICAqLwogICAgcHJvcGFnYXRlQWpheDogZnVuY3Rpb24gKGFqYXhVcmwsIGRpc2FibGVIaXN0b3J5KSB7CiAgICAgICAgYnJvYWRjYXN0LmluaXQoKTsKCiAgICAgICAgLy8gYWJvcnQgYWxsIGV4aXN0aW5nIGFqYXggcmVxdWVzdHMKICAgICAgICBnbG9iYWxBamF4UXVldWUuYWJvcnQoKTsKCiAgICAgICAgLy8gYXZhaWxhYmxlIGluIGdsb2JhbCBzY29wZQogICAgICAgIHZhciBjdXJyZW50SGFzaFN0ciA9IGJyb2FkY2FzdC5nZXRIYXNoKCk7CgogICAgICAgIGFqYXhVcmwgPSBhamF4VXJsLnJlcGxhY2UoL15cP3wmIy8sICcnKTsKCiAgICAgICAgdmFyIHBhcmFtc192YWxzID0gYWpheFVybC5zcGxpdCgiJiIpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zX3ZhbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgY3VycmVudEhhc2hTdHIgPSBicm9hZGNhc3QudXBkYXRlUGFyYW1WYWx1ZShwYXJhbXNfdmFsc1tpXSwgY3VycmVudEhhc2hTdHIpOwogICAgICAgIH0KCiAgICAgICAgLy8gaWYgdGhlIG1vZHVsZSBpcyBub3QgJ0dvYWxzJywgd2Ugc3BlY2lmaWNhbGx5IHVuc2V0IHRoZSAnaWRHb2FsJyBwYXJhbWV0ZXIKICAgICAgICAvLyB0aGlzIGlzIHRvIGVuc3VyZSB0aGF0IHRoZSBVUkxzIGFyZSBjbGVhbiAoYW5kIHRoYXQgY2xpY2tzIG9uIGdyYXBocyB3b3JrIGFzIGV4cGVjdGVkIC0gdGhleSBhcmUgYnJva2VuIHdpdGggdGhlIGV4dHJhIHBhcmFtZXRlcikKICAgICAgICB2YXIgYWN0aW9uID0gYnJvYWRjYXN0LmdldFBhcmFtVmFsdWUoJ2FjdGlvbicsIGN1cnJlbnRIYXNoU3RyKTsKICAgICAgICBpZiAoYWN0aW9uICE9ICdnb2FsUmVwb3J0JyAmJiBhY3Rpb24gIT0gJ2Vjb21tZXJjZVJlcG9ydCcpIHsKICAgICAgICAgICAgY3VycmVudEhhc2hTdHIgPSBicm9hZGNhc3QudXBkYXRlUGFyYW1WYWx1ZSgnaWRHb2FsPScsIGN1cnJlbnRIYXNoU3RyKTsKICAgICAgICB9CiAgICAgICAgLy8gdW5zZXQgaWREYXNoYm9hcmQgaWYgdXNlIGRvZXNuJ3QgZGlzcGxheSBhIGRhc2hib2FyZAogICAgICAgIHZhciBtb2R1bGUgPSBicm9hZGNhc3QuZ2V0UGFyYW1WYWx1ZSgnbW9kdWxlJywgY3VycmVudEhhc2hTdHIpOwogICAgICAgIGlmIChtb2R1bGUgIT0gJ0Rhc2hib2FyZCcpIHsKICAgICAgICAgICAgY3VycmVudEhhc2hTdHIgPSBicm9hZGNhc3QudXBkYXRlUGFyYW1WYWx1ZSgnaWREYXNoYm9hcmQ9JywgY3VycmVudEhhc2hTdHIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRpc2FibGVIaXN0b3J5KSB7CiAgICAgICAgICAgIHZhciBuZXdMb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcjJylbMF0gKyAnIycgKyBjdXJyZW50SGFzaFN0cjsKICAgICAgICAgICAgLy8gd2luZG93LmxvY2F0aW9uLnJlcGxhY2UgY2hhbmdlcyB0aGUgY3VycmVudCB1cmwgd2l0aG91dCBwdXNoaW5nIGl0IG9uIHRoZSBicm93c2VyJ3MgaGlzdG9yeSBzdGFjawogICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShuZXdMb2NhdGlvbik7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAvLyBMZXQgaGlzdG9yeSBrbm93IGFib3V0IHRoaXMgbmV3IEhhc2ggYW5kIGxvYWQgaXQuCiAgICAgICAgICAgIGJyb2FkY2FzdC5mb3JjZVJlbG9hZCA9IHRydWU7CiAgICAgICAgICAgICQuaGlzdG9yeS5sb2FkKGN1cnJlbnRIYXNoU3RyKTsKICAgICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogcHJvcGFnYXRlTmV3UGFnZSgpIC0tIHVwZGF0ZSB1cmwgdmFsdWUgYW5kIGxvYWQgbmV3IHBhZ2UsCiAgICAgKiBFeGFtcGxlOgogICAgICogICAgICAgICAxKSBXZSB3YW50IHRvIHVwZGF0ZSBpZFNpdGUgdG8gYm90aCBzZWFyY2ggcXVlcnkgYW5kIGhhc2ggdGhlbiByZWxvYWQgdGhlIHBhZ2UsCiAgICAgKiAgICAgICAgIDIpIHVwZGF0ZSBwZXJpb2QgdG8gYm90aCBzZWFyY2ggcXVlcnkgYW5kIGhhc2ggdGhlbiByZWxvYWQgcGFnZS4KICAgICAqCiAgICAgKiAqKiBJZiB5b3UnZCBsaWtlIHRvIG1ha2UgYWpheCBjYWxsIHdpdGggbmV3IHZhbHVlcyB0aGVuIHVzZSBwcm9wYWdhdGVBamF4ICoqICoKICAgICAqCiAgICAgKiBFeHBlY3Rpbmc6CiAgICAgKiAgICAgICAgIHN0ciA9ICJwYXJhbTE9bmV3VmFsMSZwYXJhbTI9bmV3VmFsMiI7CiAgICAgKgogICAgICogTk9URTogVGhpcyBtZXRob2Qgd2lsbCByZWZyZXNoIHRoZSBwYWdlIHdpdGggbmV3IHZhbHVlcy4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyICB1cmwgd2l0aCBwYXJhbWV0ZXJzIHRvIGJlIHVwZGF0ZWQKICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Nob3dBamF4TG9hZGluZ10gd2hldGhlciB0byBzaG93IHRoZSBhamF4IGxvYWRpbmcgZ2lmIG9yIG5vdC4KICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KICAgIHByb3BhZ2F0ZU5ld1BhZ2U6IGZ1bmN0aW9uIChzdHIsIHNob3dBamF4TG9hZGluZykgewogICAgICAgIC8vIGFib3J0IGFsbCBleGlzdGluZyBhamF4IHJlcXVlc3RzCiAgICAgICAgZ2xvYmFsQWpheFF1ZXVlLmFib3J0KCk7CgogICAgICAgIGlmICh0eXBlb2Ygc2hvd0FqYXhMb2FkaW5nID09PSAndW5kZWZpbmVkJyB8fCBzaG93QWpheExvYWRpbmcpIHsKICAgICAgICAgICAgcGl3aWtIZWxwZXIuc2hvd0FqYXhMb2FkaW5nKCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgcGFyYW1zX3ZhbHMgPSBzdHIuc3BsaXQoIiYiKTsKCiAgICAgICAgLy8gYXZhaWxhYmxlIGluIGdsb2JhbCBzY29wZQogICAgICAgIHZhciBjdXJyZW50U2VhcmNoU3RyID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDsKICAgICAgICB2YXIgY3VycmVudEhhc2hTdHIgPSBicm9hZGNhc3QuZ2V0SGFzaEZyb21VcmwoKTsKICAgICAgICB2YXIgb2xkVXJsID0gY3VycmVudFNlYXJjaFN0ciArIGN1cnJlbnRIYXNoU3RyOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtc192YWxzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIC8vIHVwZGF0ZSBib3RoIHRoZSBjdXJyZW50IHNlYXJjaCBxdWVyeSBhbmQgaGFzaCBzdHJpbmcKICAgICAgICAgICAgY3VycmVudFNlYXJjaFN0ciA9IGJyb2FkY2FzdC51cGRhdGVQYXJhbVZhbHVlKHBhcmFtc192YWxzW2ldLCBjdXJyZW50U2VhcmNoU3RyKTsKCiAgICAgICAgICAgIGlmIChjdXJyZW50SGFzaFN0ci5sZW5ndGggIT0gMCkgewogICAgICAgICAgICAgICAgY3VycmVudEhhc2hTdHIgPSBicm9hZGNhc3QudXBkYXRlUGFyYW1WYWx1ZShwYXJhbXNfdmFsc1tpXSwgY3VycmVudEhhc2hTdHIpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBOb3cgbG9hZCB0aGUgbmV3IHBhZ2UuCiAgICAgICAgdmFyIG5ld1VybCA9IGN1cnJlbnRTZWFyY2hTdHIgKyBjdXJyZW50SGFzaFN0cjsKCiAgICAgICAgaWYgKG9sZFVybCA9PSBuZXdVcmwpIHsKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuZm9yY2VSZWxvYWQgPSB0cnVlOwogICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG5ld1VybDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgICoKICAgICAqICAgICAgQnJvYWRjYXN0IFN1cHBvcnRlciBNZXRob2RzOgogICAgICoKICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKICAgIC8qKgogICAgICogdXBkYXRlUGFyYW1WYWx1ZShuZXdQYXJhbVZhbHVlLHVybFN0cikgLS0gSGVscGluZyBwcm9wYWdhdGUgZnVuY3Rpb25zIHRvIHVwZGF0ZSB2YWx1ZSB0byB1cmwgc3RyaW5nLgogICAgICogZWcuIEkgd2FudCB0byB1cGRhdGUgZGF0ZSB2YWx1ZSB0byBzZWFyY2ggcXVlcnkgb3IgaGFzaCBxdWVyeQogICAgICoKICAgICAqIEV4cGVjdGluZzoKICAgICAqICAgICAgICB1cmxTdHIgOiBBIEhhc2ggb3Igc2VhcmNoIHF1ZXJ5IHN0cmluZy4gZS5nOiBtb2R1bGU9d2hhdGV2ZXImYWN0aW9uPWluZGV4PWRhdGU9eWVzdGVyZGF5CiAgICAgKiAgICAgICAgbmV3UGFyYW1WYWx1ZSA6IEEgcGFyYW0gdmFsdWUgcGFpcjogZS5nOiBkYXRlPTIwMDktMDUtMDIKICAgICAqCiAgICAgKiBSZXR1cm4gbW9kdWxlPXdoYXRldmVyJmFjdGlvbj1pbmRleCZkYXRlPTIwMDktMDUtMDIKICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3UGFyYW1WYWx1ZSAgIHBhcmFtIHRvIGJlIHVwZGF0ZWQKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxTdHIgICAgICAgICAgdXJsIHRvIGJlIHVwZGF0ZWQKICAgICAqIEByZXR1cm4ge3N0cmluZ30gIHVybFN0ciB3aXRoIHVwZGF0ZWQgcGFyYW0KICAgICAqLwogICAgdXBkYXRlUGFyYW1WYWx1ZTogZnVuY3Rpb24gKG5ld1BhcmFtVmFsdWUsIHVybFN0cikgewogICAgICAgIHZhciBwX3YgPSBuZXdQYXJhbVZhbHVlLnNwbGl0KCI9Iik7CgogICAgICAgIHZhciBwYXJhbU5hbWUgPSBwX3ZbMF07CiAgICAgICAgdmFyIHZhbEZyb21VcmwgPSBicm9hZGNhc3QuZ2V0UGFyYW1WYWx1ZShwYXJhbU5hbWUsIHVybFN0cik7CiAgICAgICAgLy8gaWYgc2V0ICdpZEdvYWw9JyB0aGVuIHdlIHJlbW92ZSB0aGUgcGFyYW1ldGVyIGZyb20gdGhlIFVSTCBhdXRvbWF0aWNhbGx5IChyYXRoZXIgdGhhbiBwYXNzaW5nIGFuIGVtcHR5IHZhbHVlKQogICAgICAgIHZhciBwYXJhbVZhbHVlID0gcF92WzFdOwogICAgICAgIGlmIChwYXJhbVZhbHVlID09ICcnKSB7CiAgICAgICAgICAgIG5ld1BhcmFtVmFsdWUgPSAnJzsKICAgICAgICB9CiAgICAgICAgdmFyIGdldFF1b3RlZFJlZ2V4ID0gZnVuY3Rpb24oc3RyKSB7CiAgICAgICAgICAgIHJldHVybiAoc3RyKycnKS5yZXBsYWNlKC8oWy4/KiteJFtcXVxcKCl7fXwtXSkvZywgIlxcJDEiKTsKICAgICAgICB9OwoKICAgICAgICBpZiAodmFsRnJvbVVybCAhPSAnJykgewogICAgICAgICAgICAvLyByZXBsYWNpbmcgY3VycmVudCBwYXJhbT12YWx1ZSB0byBuZXdQYXJhbVZhbHVlOwogICAgICAgICAgICB2YWxGcm9tVXJsID0gZ2V0UXVvdGVkUmVnZXgodmFsRnJvbVVybCk7CiAgICAgICAgICAgIHZhciByZWdUb0JlUmVwbGFjZSA9IG5ldyBSZWdFeHAocGFyYW1OYW1lICsgJz0nICsgdmFsRnJvbVVybCwgJ2lnJyk7CiAgICAgICAgICAgIGlmIChuZXdQYXJhbVZhbHVlID09ICcnKSB7CiAgICAgICAgICAgICAgICAvLyBpZiBuZXcgdmFsdWUgaXMgZW1wdHkgcmVtb3ZlIGxlYWRpbmcgJiwgYXN3ZWxsCiAgICAgICAgICAgICAgICByZWdUb0JlUmVwbGFjZSA9IG5ldyBSZWdFeHAoJ1tcJl0/JyArIHBhcmFtTmFtZSArICc9JyArIHZhbEZyb21VcmwsICdpZycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVybFN0ciA9IHVybFN0ci5yZXBsYWNlKHJlZ1RvQmVSZXBsYWNlLCBuZXdQYXJhbVZhbHVlKTsKICAgICAgICB9IGVsc2UgaWYgKG5ld1BhcmFtVmFsdWUgIT0gJycpIHsKICAgICAgICAgICAgdXJsU3RyICs9ICh1cmxTdHIgPT0gJycpID8gbmV3UGFyYW1WYWx1ZSA6ICcmJyArIG5ld1BhcmFtVmFsdWU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdXJsU3RyOwogICAgfSwKCiAgICAvKioKICAgICAqIExvYWRzIGEgcG9wb3ZlciBieSBhZGRpbmcgYSAncG9wb3ZlcicgcXVlcnkgcGFyYW1ldGVyIHRvIHRoZSBjdXJyZW50IFVSTCBhbmQKICAgICAqIGluZGlyZWN0bHkgZXhlY3V0aW5nIHRoZSBwb3BvdmVyIGhhbmRsZXIuCiAgICAgKgogICAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIHRvIG9wZW4gcG9wb3ZlcnMgdGhhdCBjYW4gYmUgb3BlbmVkIGJ5IFVSTCBhbG9uZS4KICAgICAqIFRoYXQgaXMsIGlmIHlvdSB3YW50IHVzZXJzIHRvIGJlIGFibGUgdG8gY29weS1wYXN0ZSB0aGUgVVJMIGRpc3BsYXllZCB3aGVuIGEgcG9wb3ZlcgogICAgICogaXMgb3BlbiBpbnRvIGEgbmV3IGJyb3dzZXIgd2luZG93L3RhYiBhbmQgaGF2ZSB0aGUgc2FtZSBwb3BvdmVyIG9wZW4sIHlvdSBzaG91bGQKICAgICAqIGNhbGwgdGhpcyBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBJbiBvcmRlciBmb3IgdGhpcyBmdW5jdGlvbiB0byBvcGVuIGEgcG9wb3ZlciwgdGhlcmUgbXVzdCBiZSBhIHBvcG92ZXIgaGFuZGxlcgogICAgICogYXNzb2NpYXRlZCB3aXRoIGhhbmRsZXJOYW1lLiBUbyBhc3NvY2lhdGUgb25lLCBjYWxsIGJyb2FkY2FzdC5hZGRQb3BvdmVySGFuZGxlci4KICAgICAqCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaGFuZGxlck5hbWUgVGhlIG5hbWUgb2YgdGhlIHBvcG92ZXIgaGFuZGxlci4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBUaGUgU3RyaW5nIHZhbHVlIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgcG9wb3ZlcgogICAgICogICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuCiAgICAgKi8KICAgIHByb3BhZ2F0ZU5ld1BvcG92ZXJQYXJhbWV0ZXI6IGZ1bmN0aW9uIChoYW5kbGVyTmFtZSwgdmFsdWUpIHsKICAgICAgICAvLyBpbml0IGJyb2FkY2FzdCBpZiBub3QgYWxyZWFkeSBkb25lIChpdCBpcyByZXF1aXJlZCB0byBtYWtlIHBvcG92ZXJzIHdvcmsgaW4gd2lkZ2V0aXplIG1vZGUpCiAgICAgICAgYnJvYWRjYXN0LmluaXQodHJ1ZSk7CgogICAgICAgIHZhciBoYXNoID0gYnJvYWRjYXN0LmdldEhhc2hGcm9tVXJsKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTsKCiAgICAgICAgdmFyIHBvcG92ZXIgPSAnJzsKICAgICAgICBpZiAoaGFuZGxlck5hbWUpIHsKICAgICAgICAgICAgcG9wb3ZlciA9IGhhbmRsZXJOYW1lICsgJzonICsgdmFsdWU7CgogICAgICAgICAgICAvLyBiZXR3ZWVuIGpxdWVyeS5oaXN0b3J5IGFuZCBkaWZmZXJlbnQgYnJvd3NlciBidWdzLCBpdCdzIGltcG9zc2libGUgdG8gZW5zdXJlCiAgICAgICAgICAgIC8vIHRoYXQgdGhlIHBhcmFtZXRlciBpcyBlbi0gYW5kIGRlY29kZWQgdGhlIHNhbWUgbnVtYmVyIG9mIHRpbWVzLiBpbiBvcmRlciB0bwogICAgICAgICAgICAvLyBtYWtlIHN1cmUgaXQgZG9lc24ndCBjaGFuZ2UsIHdlIGhhdmUgdG8gbWFuaXB1bGF0ZSB0aGUgdXJsIGVuY29kaW5nIGEgYml0LgogICAgICAgICAgICBwb3BvdmVyID0gZW5jb2RlVVJJQ29tcG9uZW50KHBvcG92ZXIpOwogICAgICAgICAgICBwb3BvdmVyID0gcG9wb3Zlci5yZXBsYWNlKC8lL2csICdcJCcpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCcnID09IHZhbHVlIHx8ICd1bmRlZmluZWQnID09IHR5cGVvZiB2YWx1ZSkgewogICAgICAgICAgICB2YXIgbmV3SGFzaCA9IGhhc2gucmVwbGFjZSgvKCY/cG9wb3Zlcj0uKikvLCAnJyk7CiAgICAgICAgfSBlbHNlIGlmIChicm9hZGNhc3QuZ2V0UGFyYW1WYWx1ZSgncG9wb3ZlcicsIGhhc2gpKSB7CiAgICAgICAgICAgIHZhciBuZXdIYXNoID0gYnJvYWRjYXN0LnVwZGF0ZVBhcmFtVmFsdWUoJ3BvcG92ZXI9Jytwb3BvdmVyLCBoYXNoKTsKICAgICAgICB9IGVsc2UgaWYgKGhhc2ggJiYgaGFzaCAhPSAnIycpIHsKICAgICAgICAgICAgdmFyIG5ld0hhc2ggPSBoYXNoICsgJyZwb3BvdmVyPScgKyBwb3BvdmVyCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIG5ld0hhc2ggPSAnI3BvcG92ZXI9Jytwb3BvdmVyOwogICAgICAgIH0KCiAgICAgICAgLy8gbmV2ZXIgdXNlIGFuIGVtcHR5IGhhc2gsIGFzIHRoYXQgbWlnaHQgcmVsb2FkIHRoZSBwYWdlCiAgICAgICAgaWYgKCcnID09IG5ld0hhc2gpIHsKICAgICAgICAgICAgbmV3SGFzaCA9ICcjJzsKICAgICAgICB9CgogICAgICAgIGJyb2FkY2FzdC5mb3JjZVJlbG9hZCA9IGZhbHNlOwogICAgICAgICQuaGlzdG9yeS5sb2FkKG5ld0hhc2gpOwogICAgfSwKCiAgICAvKioKICAgICAqIEFkZHMgYSBoYW5kbGVyIGZvciB0aGUgJ3BvcG92ZXInIHF1ZXJ5IHBhcmFtZXRlci4KICAgICAqCiAgICAgKiBAc2VlIGJyb2FkY2FzdCNwcm9wYWdhdGVOZXdQb3BvdmVyUGFyYW1ldGVyCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd9IGhhbmRsZXJOYW1lIFRoZSBoYW5kbGVyIG5hbWUsIGVnLCAndmlzaXRvclByb2ZpbGUnLiBTaG91bGQgaWRlbnRpZnkKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcG9wb3ZlciB0aGF0IHRoZSBjYWxsYmFjayB3aWxsIG9wZW4gdXAuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGlzIGZ1bmN0aW9uIHNob3VsZCBvcGVuIHRoZSBwb3BvdmVyLiBJdCBzaG91bGQgdGFrZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgb25lIHN0cmluZyBwYXJhbWV0ZXIuCiAgICAgKi8KICAgIGFkZFBvcG92ZXJIYW5kbGVyOiBmdW5jdGlvbiAoaGFuZGxlck5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgYnJvYWRjYXN0LnBvcG92ZXJIYW5kbGVyc1toYW5kbGVyTmFtZV0gPSBjYWxsYmFjazsKICAgIH0sCgogICAgLyoqCiAgICAgKiBMb2FkcyB0aGUgZ2l2ZW4gdXJsIHdpdGggYWpheCBhbmQgcmVwbGFjZXMgdGhlIGNvbnRlbnQKICAgICAqCiAgICAgKiBOb3RlOiB0aGUgbWV0aG9kIGlzIHJlcGxhY2VkIGluIE92ZXJsYXkvamF2YXNjcmlwdHMvUGl3aWtfT3ZlcmxheS5qcyAtIGtlZXAgdGhpcyBpbiBtaW5kIHdoZW4gbWFraW5nIGNoYW5nZXMuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybEFqYXggIHVybCB0byBsb2FkCiAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICovCiAgICBsb2FkQWpheENvbnRlbnQ6IGZ1bmN0aW9uICh1cmxBamF4KSB7CiAgICAgICAgaWYgKHR5cGVvZiBwaXdpa01lbnUgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIHBpd2lrTWVudS5hY3RpdmF0ZU1lbnUoCiAgICAgICAgICAgICAgICBicm9hZGNhc3QuZ2V0UGFyYW1WYWx1ZSgnbW9kdWxlJywgdXJsQWpheCksCiAgICAgICAgICAgICAgICBicm9hZGNhc3QuZ2V0UGFyYW1WYWx1ZSgnYWN0aW9uJywgdXJsQWpheCksCiAgICAgICAgICAgICAgICBicm9hZGNhc3QuZ2V0UGFyYW1WYWx1ZSgnaWRHb2FsJywgdXJsQWpheCkgfHwgYnJvYWRjYXN0LmdldFBhcmFtVmFsdWUoJ2lkRGFzaGJvYXJkJywgdXJsQWpheCkKICAgICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgIHBpd2lrSGVscGVyLmhpZGVBamF4RXJyb3IoJ2xvYWRpbmdFcnJvcicpOwogICAgICAgIHBpd2lrSGVscGVyLnNob3dBamF4TG9hZGluZygpOwogICAgICAgICQoJyNjb250ZW50JykuZW1wdHkoKTsKICAgICAgICAkKCJvYmplY3QiKS5yZW1vdmUoKTsKCiAgICAgICAgdXJsQWpheCA9IHVybEFqYXgubWF0Y2goL15cPy8pID8gdXJsQWpheCA6ICI/IiArIHVybEFqYXg7CiAgICAgICAgYnJvYWRjYXN0Lmxhc3RVcmxSZXF1ZXN0ZWQgPSB1cmxBamF4OwogICAgICAgIGZ1bmN0aW9uIHNlY3Rpb25Mb2FkZWQoY29udGVudCkgewogICAgICAgICAgICAvLyBpZiBjb250ZW50IGlzIHdob2xlIEhUTUwgZG9jdW1lbnQsIGRvIG5vdCBzaG93IGl0LCBvdGhlcndpc2UgcmVjdXJzaXZlIHBhZ2UgbG9hZCBjb3VsZCBvY2N1cgogICAgICAgICAgICB2YXIgaHRtbERvY1R5cGUgPSAnPCFET0NUWVBFJzsKICAgICAgICAgICAgaWYgKGNvbnRlbnQuc3Vic3RyaW5nKDAsIGh0bWxEb2NUeXBlLmxlbmd0aCkgPT0gaHRtbERvY1R5cGUpIHsKICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBjb250ZW50IGhhcyBhbiBlcnJvciBtZXNzYWdlLCBkaXNwbGF5IGl0CiAgICAgICAgICAgICAgICBpZiAoJChjb250ZW50KS5maWx0ZXIoJ3RpdGxlJykudGV4dCgpID09ICdQaXdpayDigLogRXJyb3InKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9ICQoY29udGVudCkuZmlsdGVyKCcjY29udGVudHNpbXBsZScpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh1cmxBamF4ID09IGJyb2FkY2FzdC5sYXN0VXJsUmVxdWVzdGVkKSB7CiAgICAgICAgICAgICAgICAkKCcjY29udGVudCcpLmh0bWwoY29udGVudCkuc2hvdygpOwogICAgICAgICAgICAgICAgJChicm9hZGNhc3QpLnRyaWdnZXIoJ2xvY2F0aW9uQ2hhbmdlU3VjY2VzcycsIHtlbGVtZW50OiAkKCcjY29udGVudCcpLCBjb250ZW50OiBjb250ZW50fSk7CiAgICAgICAgICAgICAgICBwaXdpa0hlbHBlci5oaWRlQWpheExvYWRpbmcoKTsKICAgICAgICAgICAgICAgIGJyb2FkY2FzdC5sYXN0VXJsUmVxdWVzdGVkID0gbnVsbDsKCiAgICAgICAgICAgICAgICBwaXdpa0hlbHBlci5jb21waWxlQW5ndWxhckNvbXBvbmVudHMoJyNjb250ZW50Jyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGluaXRUb3BDb250cm9scygpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGFqYXggPSBuZXcgYWpheEhlbHBlcigpOwogICAgICAgIGFqYXguc2V0VXJsKHVybEFqYXgpOwogICAgICAgIGFqYXguc2V0RXJyb3JDYWxsYmFjayhicm9hZGNhc3QuY3VzdG9tQWpheEhhbmRsZUVycm9yKTsKICAgICAgICBhamF4LnNldENhbGxiYWNrKHNlY3Rpb25Mb2FkZWQpOwogICAgICAgIGFqYXguc2V0Rm9ybWF0KCdodG1sJyk7CiAgICAgICAgYWpheC5zZW5kKCk7CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBNZXRob2QgdG8gaGFuZGxlIGFqYXggZXJyb3JzCiAgICAgKiBAcGFyYW0ge1hNTEh0dHBSZXF1ZXN0fSBkZWZlcnJlZAogICAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1cwogICAgICogQHJldHVybiB7dm9pZH0KICAgICAqLwogICAgY3VzdG9tQWpheEhhbmRsZUVycm9yOiBmdW5jdGlvbiAoZGVmZXJyZWQsIHN0YXR1cykgewogICAgICAgIGJyb2FkY2FzdC5sYXN0VXJsUmVxdWVzdGVkID0gbnVsbDsKCiAgICAgICAgcGl3aWtIZWxwZXIuaGlkZUFqYXhMb2FkaW5nKCk7CgogICAgICAgIC8vIGRvIG5vdCBkaXNwbGF5IGVycm9yIG1lc3NhZ2UgaWYgcmVxdWVzdCB3YXMgYWJvcnRlZAogICAgICAgIGlmKHN0YXR1cyA9PSAnYWJvcnQnKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgICQoJyNsb2FkaW5nRXJyb3InKS5zaG93KCk7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJuIGhhc2ggc3RyaW5nIGlmIGhhc2ggZXhpc3RzIG9uIGFkZHJlc3MgYmFyLgogICAgICogZWxzZSByZXR1cm4gZmFsc2U7CiAgICAgKgogICAgICogQHJldHVybiB7c3RyaW5nfGJvb2xlYW59ICBjdXJyZW50IGhhc2ggb3IgZmFsc2UgaWYgaXQgaXMgZW1wdHkKICAgICAqLwogICAgaXNIYXNoRXhpc3RzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGhhc2hTdHIgPSBicm9hZGNhc3QuZ2V0SGFzaEZyb21VcmwoKTsKCiAgICAgICAgaWYgKGhhc2hTdHIgIT0gIiIpIHsKICAgICAgICAgICAgcmV0dXJuIGhhc2hTdHI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBHZXQgSGFzaCBmcm9tIGdpdmVuIHVybCBvciBmcm9tIGN1cnJlbnQgbG9jYXRpb24uCiAgICAgKiByZXR1cm4gZW1wdHkgc3RyaW5nIGlmIG5vIGhhc2ggcHJlc2VudC4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIFt1cmxdICB1cmwgdG8gZ2V0IGhhc2ggZnJvbSAoZGVmYXVsdHMgdG8gY3VycmVudCBsb2NhdGlvbikKICAgICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGhhc2ggcGFydCBvZiB0aGUgZ2l2ZW4gdXJsCiAgICAgKi8KICAgIGdldEhhc2hGcm9tVXJsOiBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgdmFyIGhhc2hTdHIgPSAiIjsKICAgICAgICAvLyBJZiB1cmwgcHJvdmlkZWQsIGdpdmUgYmFjayB0aGUgaGFzaCBmcm9tIHVybCwgZWxzZSBnZXQgaGFzaCBmcm9tIGN1cnJlbnQgYWRkcmVzcy4KICAgICAgICBpZiAodXJsICYmIHVybC5tYXRjaCgnIycpKSB7CiAgICAgICAgICAgIGhhc2hTdHIgPSB1cmwuc3Vic3RyaW5nKHVybC5pbmRleE9mKCIjIiksIHVybC5sZW5ndGgpOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgbG9jYXRpb25TcGxpdCA9IGxvY2F0aW9uLmhyZWYuc3BsaXQoJyMnKTsKICAgICAgICAgICAgaWYodHlwZW9mIGxvY2F0aW9uU3BsaXRbMV0gIT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIGhhc2hTdHIgPSAnIycgKyBsb2NhdGlvblNwbGl0WzFdOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gaGFzaFN0cjsKICAgIH0sCgogICAgLyoqCiAgICAgKiBHZXQgc2VhcmNoIHF1ZXJ5IGZyb20gZ2l2ZW4gdXJsIG9yIGZyb20gY3VycmVudCBsb2NhdGlvbi4KICAgICAqIHJldHVybiBlbXB0eSBzdHJpbmcgaWYgbm8gc2VhcmNoIHF1ZXJ5IHByZXNlbnQuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybAogICAgICogQHJldHVybiB7c3RyaW5nfSAgdGhlIHF1ZXJ5IHBhcnQgb2YgdGhlIGdpdmVuIHVybAogICAgICovCiAgICBnZXRTZWFyY2hGcm9tVXJsOiBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgdmFyIHNlYXJjaFN0ciA9ICIiOwogICAgICAgIC8vIElmIHVybCBwcm92aWRlZCwgZ2l2ZSBiYWNrIHRoZSBxdWVyeSBzdHJpbmcgZnJvbSB1cmwsIGVsc2UgZ2V0IHF1ZXJ5IHN0cmluZyBmcm9tIGN1cnJlbnQgYWRkcmVzcy4KICAgICAgICBpZiAodXJsICYmIHVybC5tYXRjaCgvXD8vKSkgewogICAgICAgICAgICBzZWFyY2hTdHIgPSB1cmwuc3Vic3RyaW5nKHVybC5pbmRleE9mKCI/IiksIHVybC5sZW5ndGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNlYXJjaFN0ciA9IGxvY2F0aW9uLnNlYXJjaDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzZWFyY2hTdHI7CiAgICB9LAoKICAgIC8qKgogICAgICogRXh0cmFjdHMgZnJvbSBhIHF1ZXJ5IHN0cmluZ3MsIHRoZSByZXF1ZXN0IGFycmF5CiAgICAgKiBAcGFyYW0gcXVlcnlTdHJpbmcKICAgICAqIEByZXR1cm5zIHtvYmplY3R9CiAgICAgKi8KICAgIGV4dHJhY3RLZXlWYWx1ZVBhaXJzRnJvbVF1ZXJ5U3RyaW5nOiBmdW5jdGlvbiAocXVlcnlTdHJpbmcpIHsKICAgICAgICB2YXIgcGFpcnMgPSBxdWVyeVN0cmluZy5zcGxpdCgnJicpOwogICAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSAhPSBwYWlycy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAvLyBhdHRuOiBzcGxpdCB3aXRoIHJlZ2V4IGhhcyBidWdzIGluIHNldmVyYWwgYnJvd3NlcnMgc3VjaCBhcyBJRSA4CiAgICAgICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gc3BsaXQsIHVzZSB0aGUgZmlyc3QgcGFydCBhcyBrZXkgYW5kIHJlam9pbiB0aGUgcmVzdAogICAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7CiAgICAgICAgICAgIHZhciBrZXkgPSBwYWlyLnNoaWZ0KCk7CiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gcGFpci5qb2luKCc9Jyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhbGwga2V5LXZhbHVlIHBhaXJzIGluIHF1ZXJ5IHN0cmluZyBvZiB1cmwuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCB1cmwgdG8gY2hlY2suIGlmIHVuZGVmaW5lZCwgbnVsbCBvciBlbXB0eSwgY3VycmVudCB1cmwgaXMgdXNlZC4KICAgICAqIEByZXR1cm4ge29iamVjdH0ga2V5IHZhbHVlIHBhaXIgZGVzY3JpYmluZyBxdWVyeSBzdHJpbmcgcGFyYW1ldGVycwogICAgICovCiAgICBnZXRWYWx1ZXNGcm9tVXJsOiBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgdmFyIHNlYXJjaFN0cmluZyA9IHRoaXMuX3JlbW92ZUhhc2hGcm9tVXJsKHVybCkuc3BsaXQoJz8nKVsxXSB8fCAnJzsKICAgICAgICByZXR1cm4gdGhpcy5leHRyYWN0S2V5VmFsdWVQYWlyc0Zyb21RdWVyeVN0cmluZyhzZWFyY2hTdHJpbmcpOwogICAgfSwKCiAgICAvKioKICAgICAqIGhlbHAgdG8gZ2V0IHBhcmFtIHZhbHVlIGZvciBhbnkgZ2l2ZW4gdXJsIHN0cmluZyB3aXRoIHByb3ZpZGVkIHBhcmFtIG5hbWUKICAgICAqIGlmIG5vIHVybCBpcyBwcm92aWRlZCwgaXQgd2lsbCBnZXQgcGFyYW0gZnJvbSBjdXJyZW50IGFkZHJlc3MuCiAgICAgKiByZXR1cm46CiAgICAgKiAgIEVtcHR5IFN0cmluZyBpZiBwYXJhbSBpcyBub3QgZm91bmQuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtICAgcGFyYW1ldGVyIHRvIHNlYXJjaCBmb3IKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXJsXSAgICAgdXJsIHRvIGNoZWNrLCBkZWZhdWx0cyB0byBjdXJyZW50IGxvY2F0aW9uCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHZhbHVlIG9mIHRoZSBnaXZlbiBwYXJhbSB3aXRoaW4gdGhlIGdpdmVuIHVybAogICAgICovCiAgICBnZXRWYWx1ZUZyb21Vcmw6IGZ1bmN0aW9uIChwYXJhbSwgdXJsKSB7CiAgICAgICAgdmFyIHNlYXJjaFN0cmluZyA9IHRoaXMuX3JlbW92ZUhhc2hGcm9tVXJsKHVybCk7CiAgICAgICAgcmV0dXJuIGJyb2FkY2FzdC5nZXRQYXJhbVZhbHVlKHBhcmFtLCBzZWFyY2hTdHJpbmcpOwogICAgfSwKCiAgICAvKioKICAgICAqIE5PVEU6IHlvdSBzaG91bGQgcHJvYmFibHkgYmUgdXNpbmcgYnJvYWRjYXN0LmdldFZhbHVlRnJvbVVybCBpbnN0ZWFkIQogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbSAgIHBhcmFtZXRlciB0byBzZWFyY2ggZm9yCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3VybF0gICB1cmwgdG8gY2hlY2sKICAgICAqIEByZXR1cm4ge3N0cmluZ30gdmFsdWUgb2YgdGhlIGdpdmVuIHBhcmFtIHdpdGhpbiB0aGUgaGFzaCBwYXJ0IG9mIHRoZSBnaXZlbiB1cmwKICAgICAqLwogICAgZ2V0VmFsdWVGcm9tSGFzaDogZnVuY3Rpb24gKHBhcmFtLCB1cmwpIHsKICAgICAgICB2YXIgaGFzaFN0ciA9IGJyb2FkY2FzdC5nZXRIYXNoRnJvbVVybCh1cmwpOwogICAgICAgIGlmIChoYXNoU3RyLnN1YnN0cigwLCAxKSA9PSAnIycpIHsKICAgICAgICAgICAgaGFzaFN0ciA9IGhhc2hTdHIuc3Vic3RyKDEpOwogICAgICAgIH0KICAgICAgICBoYXNoU3RyID0gaGFzaFN0ci5zcGxpdCgnIycpWzBdOwoKICAgICAgICByZXR1cm4gYnJvYWRjYXN0LmdldFBhcmFtVmFsdWUocGFyYW0sIGhhc2hTdHIpOwogICAgfSwKCiAgICAvKioKICAgICAqIHJldHVybiB2YWx1ZSBmb3IgdGhlIHJlcXVlc3RlZCBwYXJhbSwgd2lsbCByZXR1cm4gdGhlIGZpcnN0IG1hdGNoLgogICAgICogb3V0IHNpZGUgb2YgdGhpcyBjbGFzcyBzaG91bGQgdXNlIGdldFZhbHVlRnJvbUhhc2goKSBvciBnZXRWYWx1ZUZyb21VcmwoKSBpbnN0ZWFkLgogICAgICogcmV0dXJuOgogICAgICogICBFbXB0eSBTdHJpbmcgaWYgcGFyYW0gaXMgbm90IGZvdW5kLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbSAgIHBhcmFtZXRlciB0byBzZWFyY2ggZm9yCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsICAgICB1cmwgdG8gY2hlY2sKICAgICAqIEByZXR1cm4ge3N0cmluZ30gdmFsdWUgb2YgdGhlIGdpdmVuIHBhcmFtIHdpdGhpbiB0aGUgZ2l2ZW4gdXJsCiAgICAgKi8KICAgIGdldFBhcmFtVmFsdWU6IGZ1bmN0aW9uIChwYXJhbSwgdXJsKSB7CiAgICAgICAgdmFyIGxvb2tGb3IgPSBwYXJhbSArICc9JzsKICAgICAgICB2YXIgc3RhcnRTdHIgPSB1cmwuaW5kZXhPZihsb29rRm9yKTsKCiAgICAgICAgaWYgKHN0YXJ0U3RyID49IDApIHsKICAgICAgICAgICAgdmFyIGVuZFN0ciA9IHVybC5pbmRleE9mKCImIiwgc3RhcnRTdHIpOwogICAgICAgICAgICBpZiAoZW5kU3RyID09IC0xKSB7CiAgICAgICAgICAgICAgICBlbmRTdHIgPSB1cmwubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHVybC5zdWJzdHJpbmcoc3RhcnRTdHIgKyBwYXJhbS5sZW5ndGggKyAxLCBlbmRTdHIpOwoKICAgICAgICAgICAgLy8gd2Ugc2FuaXRpemUgdmFsdWVzIHRvIGFkZCBhIHByb3RlY3Rpb24gbGF5ZXIgYWdhaW5zdCBYU1MKICAgICAgICAgICAgLy8gJnNlZ21lbnQ9IHZhbHVlIGlzIG5vdCBzYW5pdGl6ZWQsIHNpbmNlIHNlZ21lbnRzIGFyZSBkZXNpZ25lZCB0byBhY2NlcHQgYW55IHVzZXIgaW5wdXQKICAgICAgICAgICAgaWYocGFyYW0gIT0gJ3NlZ21lbnQnKSB7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teXyV+XCpcK1wtXDxcPiFAXCRcLigpPSw7MC05YS16QS1aXS9naSwgJycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIGhhc2ggd2l0aG91dCB0aGUgc3RhcnRpbmcgIwogICAgICogQHJldHVybiB7c3RyaW5nfSBoYXNoIHBhcnQgb2YgdGhlIGN1cnJlbnQgdXJsCiAgICAgKi8KICAgIGdldEhhc2g6IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gYnJvYWRjYXN0LmdldEhhc2hGcm9tVXJsKCkucmVwbGFjZSgvXiMvLCAnJykuc3BsaXQoJyMnKVswXTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBSZW1vdmVzIHRoZSBoYXNoIHBvcnRpb24gb2YgYSBVUkwgYW5kIHJldHVybnMgdGhlIHJlc3QuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybAogICAgICogQHJldHVybiB7c3RyaW5nfSB1cmwgdy9vIGhhc2gKICAgICAqLwogICAgX3JlbW92ZUhhc2hGcm9tVXJsOiBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgdmFyIHNlYXJjaFN0cmluZyA9ICcnOwogICAgICAgIGlmICh1cmwpIHsKICAgICAgICAgICAgdmFyIHVybFBhcnRzID0gdXJsLnNwbGl0KCcjJyk7CiAgICAgICAgICAgIHNlYXJjaFN0cmluZyA9IHVybFBhcnRzWzBdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNlYXJjaFN0cmluZyA9IGxvY2F0aW9uLnNlYXJjaDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNlYXJjaFN0cmluZzsKICAgIH0KfTsK",
                "body": "LyohCiAqIFBpd2lrIC0gZnJlZS9saWJyZSBhbmFseXRpY3MgcGxhdGZvcm0KICoKICogQGxpbmsgaHR0cDovL3Bpd2lrLm9yZwogKiBAbGljZW5zZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC5odG1sIEdQTCB2MyBvciBsYXRlcgogKi8KCi8qKgogKiAgYnJvYWRjYXN0IG9iamVjdCBpcyB0byBoZWxwIG1haW50YWluIGEgaGFzaCBmb3IgbGluayBjbGlja3MgYW5kIGFqYXggY2FsbHMKICogIHNvIHdlIGNhbiBoYXZlIGJhY2sgYnV0dG9uIGFuZCByZWZyZXNoIGJ1dHRvbiB3b3JraW5nLgogKgogKiBAdHlwZSB7b2JqZWN0fQogKi8KdmFyIGJyb2FkY2FzdCA9IHsKCiAgICAvKioKICAgICAqIEluaXRpYWxpc2F0aW9uIHN0YXRlCiAgICAgKiBAdHlwZSB7Qm9vbGVhbn0KICAgICAqLwogICAgX2lzSW5pdDogZmFsc2UsCgogICAgLyoqCiAgICAgKiBMYXN0IGtub3duIGhhc2ggdXJsIHdpdGhvdXQgcG9wb3ZlciBwYXJhbWV0ZXIKICAgICAqLwogICAgY3VycmVudEhhc2hVcmw6IGZhbHNlLAoKICAgIC8qKgogICAgICogTGFzdCBrbm93biBwb3BvdmVyIHBhcmFtZXRlcgogICAgICovCiAgICBjdXJyZW50UG9wb3ZlclBhcmFtZXRlcjogZmFsc2UsCgogICAgLyoqCiAgICAgKiBDYWxsYmFja3MgZm9yIHBvcG92ZXIgcGFyYW1ldGVyIGNoYW5nZQogICAgICovCiAgICBwb3BvdmVySGFuZGxlcnM6IFtdLAoKICAgIC8qKgogICAgICogRm9yY2UgcmVsb2FkIG9uY2UKICAgICAqLwogICAgZm9yY2VSZWxvYWQ6IGZhbHNlLAoKICAgIC8qKgogICAgICogU3VwcHJlc3MgY29udGVudCB1cGRhdGUgb24gaGFzaCBjaGFuZ2luZwogICAgICovCiAgICB1cGRhdGVIYXNoT25seTogZmFsc2UsCgogICAgLyoqCiAgICAgKiBJbml0aWFsaXplcyBicm9hZGNhc3Qgb2JqZWN0CiAgICAgKiBAcmV0dXJuIHt2b2lkfQogICAgICovCiAgICBpbml0OiBmdW5jdGlvbiAobm9Mb2FkaW5nTWVzc2FnZSkgewogICAgICAgIGlmIChicm9hZGNhc3QuX2lzSW5pdCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGJyb2FkY2FzdC5faXNJbml0ID0gdHJ1ZTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBoaXN0b3J5IHBsdWdpbi4KICAgICAgICAvLyBUaGUgY2FsbGJhY2sgaXMgY2FsbGVkIGF0IG9uY2UgYnkgcHJlc2VudCBsb2NhdGlvbi5oYXNoCiAgICAgICAgJC5oaXN0b3J5LmluaXQoYnJvYWRjYXN0LnBhZ2Vsb2FkLCB7dW5lc2NhcGU6IHRydWV9KTsKCiAgICAgICAgaWYobm9Mb2FkaW5nTWVzc2FnZSAhPSB0cnVlKSB7CiAgICAgICAgICAgIHBpd2lrSGVscGVyLnNob3dBamF4TG9hZGluZygpOwogICAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiA9PT09PT09PT09IFBhZ2VMb2FkIGZ1bmN0aW9uID09PT09PT09PT09PT09PT09CiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuOgogICAgICogMS4gYWZ0ZXIgY2FsbGluZyAkLmhpc3RvcnkuaW5pdCgpOwogICAgICogMi4gYWZ0ZXIgY2FsbGluZyAkLmhpc3RvcnkubG9hZCgpOyAgLy9sb29rIGF0IGJyb2FkY2FzdC5jaGFuZ2VQYXJhbWV0ZXIoKTsKICAgICAqIDMuIGFmdGVyIHB1c2hpbmcgIkdvIEJhY2siIGJ1dHRvbiBvZiBhIGJyb3dzZXIKICAgICAqCiAgICAgKiAqIE5vdGU6IHRoZSBtZXRob2QgaXMgbWFuaXB1bGF0ZWQgaW4gT3ZlcmxheS9qYXZhc2NyaXB0cy9QaXdpa19PdmVybGF5LmpzIC0ga2VlcCB0aGlzIGluIG1pbmQgd2hlbiBtYWtpbmcgY2hhbmdlcy4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIGhhc2ggdG8gbG9hZCBwYWdlIHdpdGgKICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KICAgIHBhZ2Vsb2FkOiBmdW5jdGlvbiAoaGFzaCkgewogICAgICAgIGJyb2FkY2FzdC5pbml0KCk7CgogICAgICAgIC8vIFVuYmluZCBhbnkgcHJldmlvdXNseSBhdHRhY2hlZCByZXNpemUgaGFuZGxlcnMKICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUnKTsKCiAgICAgICAgLy8gZG8gbm90IHVwZGF0ZSBjb250ZW50IGlmIGl0IHNob3VsZCBiZSBzdXBwcmVzc2VkCiAgICAgICAgaWYgKGJyb2FkY2FzdC51cGRhdGVIYXNoT25seSkgewogICAgICAgICAgICBicm9hZGNhc3QudXBkYXRlSGFzaE9ubHkgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgLy8gaGFzaCBkb2Vzbid0IGNvbnRhaW4gdGhlIGZpcnN0ICMgY2hhcmFjdGVyLgogICAgICAgIGlmIChoYXNoICYmIDAgPT09ICgnJytoYXNoKS5pbmRleE9mKCcvJykpIHsKICAgICAgICAgICAgaGFzaCA9ICgnJytoYXNoKS5zdWJzdHIoMSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoaGFzaCkgewoKICAgICAgICAgICAgaWYgKC9ecG9wb3Zlcj0vLnRlc3QoaGFzaCkpIHsKICAgICAgICAgICAgICAgIHZhciBoYXNoUGFydHMgPSBbCiAgICAgICAgICAgICAgICAgICAgJycsCiAgICAgICAgICAgICAgICAgICAgaGFzaC5yZXBsYWNlKC9ecG9wb3Zlcj0vLCAnJykKICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgaGFzaFBhcnRzID0gaGFzaC5zcGxpdCgnJnBvcG92ZXI9Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGhhc2hVcmwgPSBoYXNoUGFydHNbMF07CiAgICAgICAgICAgIHZhciBwb3BvdmVyUGFyYW0gPSAnJzsKICAgICAgICAgICAgaWYgKGhhc2hQYXJ0cy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICBwb3BvdmVyUGFyYW0gPSBoYXNoUGFydHNbMV07CiAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIHRoZSAkIHdhcyBlbmNvZGVkIChlLmcuIHdoZW4gdXNpbmcgY29weSZwYXN0ZSBvbiB1cmxzIGluIHNvbWUgYnJvd3NlcnMpCiAgICAgICAgICAgICAgICBwb3BvdmVyUGFyYW0gPSBkZWNvZGVVUklDb21wb25lbnQocG9wb3ZlclBhcmFtKTsKICAgICAgICAgICAgICAgIC8vIHJldmVydCBzcGVjaWFsIGVuY29kaW5nIGZyb20gYnJvYWRjYXN0LnByb3BhZ2F0ZU5ld1BvcG92ZXJQYXJhbWV0ZXIoKQogICAgICAgICAgICAgICAgcG9wb3ZlclBhcmFtID0gcG9wb3ZlclBhcmFtLnJlcGxhY2UoL1wkL2csICclJyk7CiAgICAgICAgICAgICAgICBwb3BvdmVyUGFyYW0gPSBkZWNvZGVVUklDb21wb25lbnQocG9wb3ZlclBhcmFtKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHBhZ2VVcmxVcGRhdGVkID0gKHBvcG92ZXJQYXJhbSA9PSAnJyB8fAogICAgICAgICAgICAgICAgKGJyb2FkY2FzdC5jdXJyZW50SGFzaFVybCAhPT0gZmFsc2UgJiYgYnJvYWRjYXN0LmN1cnJlbnRIYXNoVXJsICE9IGhhc2hVcmwpKTsKCiAgICAgICAgICAgIHZhciBwb3BvdmVyUGFyYW1VcGRhdGVkID0gKHBvcG92ZXJQYXJhbSAhPSAnJyAmJiBoYXNoVXJsID09IGJyb2FkY2FzdC5jdXJyZW50SGFzaFVybCk7CgogICAgICAgICAgICBpZiAoYnJvYWRjYXN0LmN1cnJlbnRIYXNoVXJsID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgLy8gbmV3IHBhZ2UgbG9hZAogICAgICAgICAgICAgICAgcGFnZVVybFVwZGF0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgcG9wb3ZlclBhcmFtVXBkYXRlZCA9IChwb3BvdmVyUGFyYW0gIT0gJycpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAocGFnZVVybFVwZGF0ZWQgfHwgYnJvYWRjYXN0LmZvcmNlUmVsb2FkKSB7CiAgICAgICAgICAgICAgICBQaXdpa19Qb3BvdmVyLmNsb3NlKCk7CgogICAgICAgICAgICAgICAgaWYgKGhhc2hVcmwgIT0gYnJvYWRjYXN0LmN1cnJlbnRIYXNoVXJsIHx8IGJyb2FkY2FzdC5mb3JjZVJlbG9hZCkgewogICAgICAgICAgICAgICAgICAgIC8vIHJlc3RvcmUgYWpheCBsb2FkZWQgc3RhdGUKICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3QubG9hZEFqYXhDb250ZW50KGhhc2hVcmwpOwoKICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlICJXaWRnZXRzICYgRGFzaGJvYXJkIiBpcyBkZWxldGVkIG9uIHJlbG9hZAogICAgICAgICAgICAgICAgICAgICQoJy50b3BfY29udHJvbHMgLmRhc2hib2FyZC1tYW5hZ2VyJykuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICQoJyNkYXNoYm9hcmRXaWRnZXRzQXJlYScpLmRhc2hib2FyZCgnZGVzdHJveScpOwoKICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgdW51c2VkIGNvbnRyb2xzCiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgncGl3aWsvVUknKS5VSUNvbnRyb2wuY2xlYW51cFVudXNlZENvbnRyb2xzKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJyb2FkY2FzdC5mb3JjZVJlbG9hZCA9IGZhbHNlOwogICAgICAgICAgICBicm9hZGNhc3QuY3VycmVudEhhc2hVcmwgPSBoYXNoVXJsOwogICAgICAgICAgICBicm9hZGNhc3QuY3VycmVudFBvcG92ZXJQYXJhbWV0ZXIgPSBwb3BvdmVyUGFyYW07CgogICAgICAgICAgICBpZiAocG9wb3ZlclBhcmFtVXBkYXRlZCAmJiBwb3BvdmVyUGFyYW0gPT0gJycpIHsKICAgICAgICAgICAgICAgIFBpd2lrX1BvcG92ZXIuY2xvc2UoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChwb3BvdmVyUGFyYW1VcGRhdGVkKSB7CiAgICAgICAgICAgICAgICB2YXIgcG9wb3ZlclBhcmFtUGFydHMgPSBwb3BvdmVyUGFyYW0uc3BsaXQoJzonKTsKICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyTmFtZSA9IHBvcG92ZXJQYXJhbVBhcnRzWzBdOwogICAgICAgICAgICAgICAgcG9wb3ZlclBhcmFtUGFydHMuc2hpZnQoKTsKICAgICAgICAgICAgICAgIHZhciBwYXJhbSA9IHBvcG92ZXJQYXJhbVBhcnRzLmpvaW4oJzonKTsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYnJvYWRjYXN0LnBvcG92ZXJIYW5kbGVyc1toYW5kbGVyTmFtZV0gIT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3QucG9wb3ZlckhhbmRsZXJzW2hhbmRsZXJOYW1lXShwYXJhbSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gc3RhcnQgcGFnZQogICAgICAgICAgICBQaXdpa19Qb3BvdmVyLmNsb3NlKCk7CgogICAgICAgICAgICAkKCcucGFnZVdyYXAgI2NvbnRlbnQ6bm90KC5hZG1pbiknKS5lbXB0eSgpOwogICAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBwcm9wYWdhdGVBamF4IC0tIHVwZGF0ZSBoYXNoIHZhbHVlcyB0aGVuIG1ha2UgYWpheCBjYWxscy4KICAgICAqICAgIGV4YW1wbGUgOgogICAgICogICAgICAgMSkgPGEgaHJlZj0iamF2YXNjcmlwdDpicm9hZGNhc3QucHJvcGFnYXRlQWpheCgnbW9kdWxlPVJlZmVycmVycyZhY3Rpb249Z2V0S2V5d29yZHMnKSI+VmlldyBrZXl3b3JkcyByZXBvcnQ8L2E+CiAgICAgKiAgICAgICAyKSBNYWluIG1lbnUgbGkgYWxzbyBnb2VzIHRocm91Z2ggdGhpcyBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBXaWxsIHByb3BhZ2F0ZSB5b3VyIG5ldyB2YWx1ZSBpbnRvIHRoZSBjdXJyZW50IGhhc2ggc3RyaW5nIGFuZCBtYWtlIGFqYXggY2FsbHMuCiAgICAgKgogICAgICogTk9URTogdGhpcyBtZXRob2Qgd2lsbCBvbmx5IG1ha2UgYWpheCBjYWxsIGFuZCByZXBsYWNpbmcgbWFpbiBjb250ZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhamF4VXJsICBxdWVyeXN0cmluZyB3aXRoIHBhcmFtZXRlcnMgdG8gYmUgdXBkYXRlZAogICAgICogQHBhcmFtIHtib29sZWFufSBbZGlzYWJsZUhpc3RvcnldICB0aGUgaGFzaCBjaGFuZ2Ugd29uJ3QgYmUgYXZhaWxhYmxlIGluIHRoZSBicm93c2VyIGhpc3RvcnkKICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KICAgIHByb3BhZ2F0ZUFqYXg6IGZ1bmN0aW9uIChhamF4VXJsLCBkaXNhYmxlSGlzdG9yeSkgewogICAgICAgIGJyb2FkY2FzdC5pbml0KCk7CgogICAgICAgIC8vIGFib3J0IGFsbCBleGlzdGluZyBhamF4IHJlcXVlc3RzCiAgICAgICAgZ2xvYmFsQWpheFF1ZXVlLmFib3J0KCk7CgogICAgICAgIC8vIGF2YWlsYWJsZSBpbiBnbG9iYWwgc2NvcGUKICAgICAgICB2YXIgY3VycmVudEhhc2hTdHIgPSBicm9hZGNhc3QuZ2V0SGFzaCgpOwoKICAgICAgICBhamF4VXJsID0gYWpheFVybC5yZXBsYWNlKC9eXD98JiMvLCAnJyk7CgogICAgICAgIHZhciBwYXJhbXNfdmFscyA9IGFqYXhVcmwuc3BsaXQoIiYiKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtc192YWxzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGN1cnJlbnRIYXNoU3RyID0gYnJvYWRjYXN0LnVwZGF0ZVBhcmFtVmFsdWUocGFyYW1zX3ZhbHNbaV0sIGN1cnJlbnRIYXNoU3RyKTsKICAgICAgICB9CgogICAgICAgIC8vIGlmIHRoZSBtb2R1bGUgaXMgbm90ICdHb2FscycsIHdlIHNwZWNpZmljYWxseSB1bnNldCB0aGUgJ2lkR29hbCcgcGFyYW1ldGVyCiAgICAgICAgLy8gdGhpcyBpcyB0byBlbnN1cmUgdGhhdCB0aGUgVVJMcyBhcmUgY2xlYW4gKGFuZCB0aGF0IGNsaWNrcyBvbiBncmFwaHMgd29yayBhcyBleHBlY3RlZCAtIHRoZXkgYXJlIGJyb2tlbiB3aXRoIHRoZSBleHRyYSBwYXJhbWV0ZXIpCiAgICAgICAgdmFyIGFjdGlvbiA9IGJyb2FkY2FzdC5nZXRQYXJhbVZhbHVlKCdhY3Rpb24nLCBjdXJyZW50SGFzaFN0cik7CiAgICAgICAgaWYgKGFjdGlvbiAhPSAnZ29hbFJlcG9ydCcgJiYgYWN0aW9uICE9ICdlY29tbWVyY2VSZXBvcnQnKSB7CiAgICAgICAgICAgIGN1cnJlbnRIYXNoU3RyID0gYnJvYWRjYXN0LnVwZGF0ZVBhcmFtVmFsdWUoJ2lkR29hbD0nLCBjdXJyZW50SGFzaFN0cik7CiAgICAgICAgfQogICAgICAgIC8vIHVuc2V0IGlkRGFzaGJvYXJkIGlmIHVzZSBkb2Vzbid0IGRpc3BsYXkgYSBkYXNoYm9hcmQKICAgICAgICB2YXIgbW9kdWxlID0gYnJvYWRjYXN0LmdldFBhcmFtVmFsdWUoJ21vZHVsZScsIGN1cnJlbnRIYXNoU3RyKTsKICAgICAgICBpZiAobW9kdWxlICE9ICdEYXNoYm9hcmQnKSB7CiAgICAgICAgICAgIGN1cnJlbnRIYXNoU3RyID0gYnJvYWRjYXN0LnVwZGF0ZVBhcmFtVmFsdWUoJ2lkRGFzaGJvYXJkPScsIGN1cnJlbnRIYXNoU3RyKTsKICAgICAgICB9CgogICAgICAgIGlmIChkaXNhYmxlSGlzdG9yeSkgewogICAgICAgICAgICB2YXIgbmV3TG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnIycpWzBdICsgJyMnICsgY3VycmVudEhhc2hTdHI7CiAgICAgICAgICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlIGNoYW5nZXMgdGhlIGN1cnJlbnQgdXJsIHdpdGhvdXQgcHVzaGluZyBpdCBvbiB0aGUgYnJvd3NlcidzIGhpc3Rvcnkgc3RhY2sKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UobmV3TG9jYXRpb24pOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgLy8gTGV0IGhpc3Rvcnkga25vdyBhYm91dCB0aGlzIG5ldyBIYXNoIGFuZCBsb2FkIGl0LgogICAgICAgICAgICBicm9hZGNhc3QuZm9yY2VSZWxvYWQgPSB0cnVlOwogICAgICAgICAgICAkLmhpc3RvcnkubG9hZChjdXJyZW50SGFzaFN0cik7CiAgICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIHByb3BhZ2F0ZU5ld1BhZ2UoKSAtLSB1cGRhdGUgdXJsIHZhbHVlIGFuZCBsb2FkIG5ldyBwYWdlLAogICAgICogRXhhbXBsZToKICAgICAqICAgICAgICAgMSkgV2Ugd2FudCB0byB1cGRhdGUgaWRTaXRlIHRvIGJvdGggc2VhcmNoIHF1ZXJ5IGFuZCBoYXNoIHRoZW4gcmVsb2FkIHRoZSBwYWdlLAogICAgICogICAgICAgICAyKSB1cGRhdGUgcGVyaW9kIHRvIGJvdGggc2VhcmNoIHF1ZXJ5IGFuZCBoYXNoIHRoZW4gcmVsb2FkIHBhZ2UuCiAgICAgKgogICAgICogKiogSWYgeW91J2QgbGlrZSB0byBtYWtlIGFqYXggY2FsbCB3aXRoIG5ldyB2YWx1ZXMgdGhlbiB1c2UgcHJvcGFnYXRlQWpheCAqKiAqCiAgICAgKgogICAgICogRXhwZWN0aW5nOgogICAgICogICAgICAgICBzdHIgPSAicGFyYW0xPW5ld1ZhbDEmcGFyYW0yPW5ld1ZhbDIiOwogICAgICoKICAgICAqIE5PVEU6IFRoaXMgbWV0aG9kIHdpbGwgcmVmcmVzaCB0aGUgcGFnZSB3aXRoIG5ldyB2YWx1ZXMuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciAgdXJsIHdpdGggcGFyYW1ldGVycyB0byBiZSB1cGRhdGVkCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG93QWpheExvYWRpbmddIHdoZXRoZXIgdG8gc2hvdyB0aGUgYWpheCBsb2FkaW5nIGdpZiBvciBub3QuCiAgICAgKiBAcmV0dXJuIHt2b2lkfQogICAgICovCiAgICBwcm9wYWdhdGVOZXdQYWdlOiBmdW5jdGlvbiAoc3RyLCBzaG93QWpheExvYWRpbmcpIHsKICAgICAgICAvLyBhYm9ydCBhbGwgZXhpc3RpbmcgYWpheCByZXF1ZXN0cwogICAgICAgIGdsb2JhbEFqYXhRdWV1ZS5hYm9ydCgpOwoKICAgICAgICBpZiAodHlwZW9mIHNob3dBamF4TG9hZGluZyA9PT0gJ3VuZGVmaW5lZCcgfHwgc2hvd0FqYXhMb2FkaW5nKSB7CiAgICAgICAgICAgIHBpd2lrSGVscGVyLnNob3dBamF4TG9hZGluZygpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHBhcmFtc192YWxzID0gc3RyLnNwbGl0KCImIik7CgogICAgICAgIC8vIGF2YWlsYWJsZSBpbiBnbG9iYWwgc2NvcGUKICAgICAgICB2YXIgY3VycmVudFNlYXJjaFN0ciA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7CiAgICAgICAgdmFyIGN1cnJlbnRIYXNoU3RyID0gYnJvYWRjYXN0LmdldEhhc2hGcm9tVXJsKCk7CiAgICAgICAgdmFyIG9sZFVybCA9IGN1cnJlbnRTZWFyY2hTdHIgKyBjdXJyZW50SGFzaFN0cjsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXNfdmFscy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAvLyB1cGRhdGUgYm90aCB0aGUgY3VycmVudCBzZWFyY2ggcXVlcnkgYW5kIGhhc2ggc3RyaW5nCiAgICAgICAgICAgIGN1cnJlbnRTZWFyY2hTdHIgPSBicm9hZGNhc3QudXBkYXRlUGFyYW1WYWx1ZShwYXJhbXNfdmFsc1tpXSwgY3VycmVudFNlYXJjaFN0cik7CgogICAgICAgICAgICBpZiAoY3VycmVudEhhc2hTdHIubGVuZ3RoICE9IDApIHsKICAgICAgICAgICAgICAgIGN1cnJlbnRIYXNoU3RyID0gYnJvYWRjYXN0LnVwZGF0ZVBhcmFtVmFsdWUocGFyYW1zX3ZhbHNbaV0sIGN1cnJlbnRIYXNoU3RyKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gTm93IGxvYWQgdGhlIG5ldyBwYWdlLgogICAgICAgIHZhciBuZXdVcmwgPSBjdXJyZW50U2VhcmNoU3RyICsgY3VycmVudEhhc2hTdHI7CgogICAgICAgIGlmIChvbGRVcmwgPT0gbmV3VXJsKSB7CiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmZvcmNlUmVsb2FkID0gdHJ1ZTsKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBuZXdVcmw7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sCgogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAqCiAgICAgKiAgICAgIEJyb2FkY2FzdCBTdXBwb3J0ZXIgTWV0aG9kczoKICAgICAqCiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiAgICAvKioKICAgICAqIHVwZGF0ZVBhcmFtVmFsdWUobmV3UGFyYW1WYWx1ZSx1cmxTdHIpIC0tIEhlbHBpbmcgcHJvcGFnYXRlIGZ1bmN0aW9ucyB0byB1cGRhdGUgdmFsdWUgdG8gdXJsIHN0cmluZy4KICAgICAqIGVnLiBJIHdhbnQgdG8gdXBkYXRlIGRhdGUgdmFsdWUgdG8gc2VhcmNoIHF1ZXJ5IG9yIGhhc2ggcXVlcnkKICAgICAqCiAgICAgKiBFeHBlY3Rpbmc6CiAgICAgKiAgICAgICAgdXJsU3RyIDogQSBIYXNoIG9yIHNlYXJjaCBxdWVyeSBzdHJpbmcuIGUuZzogbW9kdWxlPXdoYXRldmVyJmFjdGlvbj1pbmRleD1kYXRlPXllc3RlcmRheQogICAgICogICAgICAgIG5ld1BhcmFtVmFsdWUgOiBBIHBhcmFtIHZhbHVlIHBhaXI6IGUuZzogZGF0ZT0yMDA5LTA1LTAyCiAgICAgKgogICAgICogUmV0dXJuIG1vZHVsZT13aGF0ZXZlciZhY3Rpb249aW5kZXgmZGF0ZT0yMDA5LTA1LTAyCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1BhcmFtVmFsdWUgICBwYXJhbSB0byBiZSB1cGRhdGVkCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsU3RyICAgICAgICAgIHVybCB0byBiZSB1cGRhdGVkCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9ICB1cmxTdHIgd2l0aCB1cGRhdGVkIHBhcmFtCiAgICAgKi8KICAgIHVwZGF0ZVBhcmFtVmFsdWU6IGZ1bmN0aW9uIChuZXdQYXJhbVZhbHVlLCB1cmxTdHIpIHsKICAgICAgICB2YXIgcF92ID0gbmV3UGFyYW1WYWx1ZS5zcGxpdCgiPSIpOwoKICAgICAgICB2YXIgcGFyYW1OYW1lID0gcF92WzBdOwogICAgICAgIHZhciB2YWxGcm9tVXJsID0gYnJvYWRjYXN0LmdldFBhcmFtVmFsdWUocGFyYW1OYW1lLCB1cmxTdHIpOwogICAgICAgIC8vIGlmIHNldCAnaWRHb2FsPScgdGhlbiB3ZSByZW1vdmUgdGhlIHBhcmFtZXRlciBmcm9tIHRoZSBVUkwgYXV0b21hdGljYWxseSAocmF0aGVyIHRoYW4gcGFzc2luZyBhbiBlbXB0eSB2YWx1ZSkKICAgICAgICB2YXIgcGFyYW1WYWx1ZSA9IHBfdlsxXTsKICAgICAgICBpZiAocGFyYW1WYWx1ZSA9PSAnJykgewogICAgICAgICAgICBuZXdQYXJhbVZhbHVlID0gJyc7CiAgICAgICAgfQogICAgICAgIHZhciBnZXRRdW90ZWRSZWdleCA9IGZ1bmN0aW9uKHN0cikgewogICAgICAgICAgICByZXR1cm4gKHN0cisnJykucmVwbGFjZSgvKFsuPyorXiRbXF1cXCgpe318LV0pL2csICJcXCQxIik7CiAgICAgICAgfTsKCiAgICAgICAgaWYgKHZhbEZyb21VcmwgIT0gJycpIHsKICAgICAgICAgICAgLy8gcmVwbGFjaW5nIGN1cnJlbnQgcGFyYW09dmFsdWUgdG8gbmV3UGFyYW1WYWx1ZTsKICAgICAgICAgICAgdmFsRnJvbVVybCA9IGdldFF1b3RlZFJlZ2V4KHZhbEZyb21VcmwpOwogICAgICAgICAgICB2YXIgcmVnVG9CZVJlcGxhY2UgPSBuZXcgUmVnRXhwKHBhcmFtTmFtZSArICc9JyArIHZhbEZyb21VcmwsICdpZycpOwogICAgICAgICAgICBpZiAobmV3UGFyYW1WYWx1ZSA9PSAnJykgewogICAgICAgICAgICAgICAgLy8gaWYgbmV3IHZhbHVlIGlzIGVtcHR5IHJlbW92ZSBsZWFkaW5nICYsIGFzd2VsbAogICAgICAgICAgICAgICAgcmVnVG9CZVJlcGxhY2UgPSBuZXcgUmVnRXhwKCdbXCZdPycgKyBwYXJhbU5hbWUgKyAnPScgKyB2YWxGcm9tVXJsLCAnaWcnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB1cmxTdHIgPSB1cmxTdHIucmVwbGFjZShyZWdUb0JlUmVwbGFjZSwgbmV3UGFyYW1WYWx1ZSk7CiAgICAgICAgfSBlbHNlIGlmIChuZXdQYXJhbVZhbHVlICE9ICcnKSB7CiAgICAgICAgICAgIHVybFN0ciArPSAodXJsU3RyID09ICcnKSA/IG5ld1BhcmFtVmFsdWUgOiAnJicgKyBuZXdQYXJhbVZhbHVlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHVybFN0cjsKICAgIH0sCgogICAgLyoqCiAgICAgKiBMb2FkcyBhIHBvcG92ZXIgYnkgYWRkaW5nIGEgJ3BvcG92ZXInIHF1ZXJ5IHBhcmFtZXRlciB0byB0aGUgY3VycmVudCBVUkwgYW5kCiAgICAgKiBpbmRpcmVjdGx5IGV4ZWN1dGluZyB0aGUgcG9wb3ZlciBoYW5kbGVyLgogICAgICoKICAgICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCB0byBvcGVuIHBvcG92ZXJzIHRoYXQgY2FuIGJlIG9wZW5lZCBieSBVUkwgYWxvbmUuCiAgICAgKiBUaGF0IGlzLCBpZiB5b3Ugd2FudCB1c2VycyB0byBiZSBhYmxlIHRvIGNvcHktcGFzdGUgdGhlIFVSTCBkaXNwbGF5ZWQgd2hlbiBhIHBvcG92ZXIKICAgICAqIGlzIG9wZW4gaW50byBhIG5ldyBicm93c2VyIHdpbmRvdy90YWIgYW5kIGhhdmUgdGhlIHNhbWUgcG9wb3ZlciBvcGVuLCB5b3Ugc2hvdWxkCiAgICAgKiBjYWxsIHRoaXMgZnVuY3Rpb24uCiAgICAgKgogICAgICogSW4gb3JkZXIgZm9yIHRoaXMgZnVuY3Rpb24gdG8gb3BlbiBhIHBvcG92ZXIsIHRoZXJlIG11c3QgYmUgYSBwb3BvdmVyIGhhbmRsZXIKICAgICAqIGFzc29jaWF0ZWQgd2l0aCBoYW5kbGVyTmFtZS4gVG8gYXNzb2NpYXRlIG9uZSwgY2FsbCBicm9hZGNhc3QuYWRkUG9wb3ZlckhhbmRsZXIuCiAgICAgKgogICAgICogQHBhcmFtIHtTdHJpbmd9IGhhbmRsZXJOYW1lIFRoZSBuYW1lIG9mIHRoZSBwb3BvdmVyIGhhbmRsZXIuCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgVGhlIFN0cmluZyB2YWx1ZSB0aGF0IHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIHBvcG92ZXIKICAgICAqICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLgogICAgICovCiAgICBwcm9wYWdhdGVOZXdQb3BvdmVyUGFyYW1ldGVyOiBmdW5jdGlvbiAoaGFuZGxlck5hbWUsIHZhbHVlKSB7CiAgICAgICAgLy8gaW5pdCBicm9hZGNhc3QgaWYgbm90IGFscmVhZHkgZG9uZSAoaXQgaXMgcmVxdWlyZWQgdG8gbWFrZSBwb3BvdmVycyB3b3JrIGluIHdpZGdldGl6ZSBtb2RlKQogICAgICAgIGJyb2FkY2FzdC5pbml0KHRydWUpOwoKICAgICAgICB2YXIgaGFzaCA9IGJyb2FkY2FzdC5nZXRIYXNoRnJvbVVybCh3aW5kb3cubG9jYXRpb24uaHJlZik7CgogICAgICAgIHZhciBwb3BvdmVyID0gJyc7CiAgICAgICAgaWYgKGhhbmRsZXJOYW1lKSB7CiAgICAgICAgICAgIHBvcG92ZXIgPSBoYW5kbGVyTmFtZSArICc6JyArIHZhbHVlOwoKICAgICAgICAgICAgLy8gYmV0d2VlbiBqcXVlcnkuaGlzdG9yeSBhbmQgZGlmZmVyZW50IGJyb3dzZXIgYnVncywgaXQncyBpbXBvc3NpYmxlIHRvIGVuc3VyZQogICAgICAgICAgICAvLyB0aGF0IHRoZSBwYXJhbWV0ZXIgaXMgZW4tIGFuZCBkZWNvZGVkIHRoZSBzYW1lIG51bWJlciBvZiB0aW1lcy4gaW4gb3JkZXIgdG8KICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGl0IGRvZXNuJ3QgY2hhbmdlLCB3ZSBoYXZlIHRvIG1hbmlwdWxhdGUgdGhlIHVybCBlbmNvZGluZyBhIGJpdC4KICAgICAgICAgICAgcG9wb3ZlciA9IGVuY29kZVVSSUNvbXBvbmVudChwb3BvdmVyKTsKICAgICAgICAgICAgcG9wb3ZlciA9IHBvcG92ZXIucmVwbGFjZSgvJS9nLCAnXCQnKTsKICAgICAgICB9CgogICAgICAgIGlmICgnJyA9PSB2YWx1ZSB8fCAndW5kZWZpbmVkJyA9PSB0eXBlb2YgdmFsdWUpIHsKICAgICAgICAgICAgdmFyIG5ld0hhc2ggPSBoYXNoLnJlcGxhY2UoLygmP3BvcG92ZXI9LiopLywgJycpOwogICAgICAgIH0gZWxzZSBpZiAoYnJvYWRjYXN0LmdldFBhcmFtVmFsdWUoJ3BvcG92ZXInLCBoYXNoKSkgewogICAgICAgICAgICB2YXIgbmV3SGFzaCA9IGJyb2FkY2FzdC51cGRhdGVQYXJhbVZhbHVlKCdwb3BvdmVyPScrcG9wb3ZlciwgaGFzaCk7CiAgICAgICAgfSBlbHNlIGlmIChoYXNoICYmIGhhc2ggIT0gJyMnKSB7CiAgICAgICAgICAgIHZhciBuZXdIYXNoID0gaGFzaCArICcmcG9wb3Zlcj0nICsgcG9wb3ZlcgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBuZXdIYXNoID0gJyNwb3BvdmVyPScrcG9wb3ZlcjsKICAgICAgICB9CgogICAgICAgIC8vIG5ldmVyIHVzZSBhbiBlbXB0eSBoYXNoLCBhcyB0aGF0IG1pZ2h0IHJlbG9hZCB0aGUgcGFnZQogICAgICAgIGlmICgnJyA9PSBuZXdIYXNoKSB7CiAgICAgICAgICAgIG5ld0hhc2ggPSAnIyc7CiAgICAgICAgfQoKICAgICAgICBicm9hZGNhc3QuZm9yY2VSZWxvYWQgPSBmYWxzZTsKICAgICAgICAkLmhpc3RvcnkubG9hZChuZXdIYXNoKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBZGRzIGEgaGFuZGxlciBmb3IgdGhlICdwb3BvdmVyJyBxdWVyeSBwYXJhbWV0ZXIuCiAgICAgKgogICAgICogQHNlZSBicm9hZGNhc3QjcHJvcGFnYXRlTmV3UG9wb3ZlclBhcmFtZXRlcgogICAgICoKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBoYW5kbGVyTmFtZSBUaGUgaGFuZGxlciBuYW1lLCBlZywgJ3Zpc2l0b3JQcm9maWxlJy4gU2hvdWxkIGlkZW50aWZ5CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBvcG92ZXIgdGhhdCB0aGUgY2FsbGJhY2sgd2lsbCBvcGVuIHVwLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhpcyBmdW5jdGlvbiBzaG91bGQgb3BlbiB0aGUgcG9wb3Zlci4gSXQgc2hvdWxkIHRha2UKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZSBzdHJpbmcgcGFyYW1ldGVyLgogICAgICovCiAgICBhZGRQb3BvdmVySGFuZGxlcjogZnVuY3Rpb24gKGhhbmRsZXJOYW1lLCBjYWxsYmFjaykgewogICAgICAgIGJyb2FkY2FzdC5wb3BvdmVySGFuZGxlcnNbaGFuZGxlck5hbWVdID0gY2FsbGJhY2s7CiAgICB9LAoKICAgIC8qKgogICAgICogTG9hZHMgdGhlIGdpdmVuIHVybCB3aXRoIGFqYXggYW5kIHJlcGxhY2VzIHRoZSBjb250ZW50CiAgICAgKgogICAgICogTm90ZTogdGhlIG1ldGhvZCBpcyByZXBsYWNlZCBpbiBPdmVybGF5L2phdmFzY3JpcHRzL1Bpd2lrX092ZXJsYXkuanMgLSBrZWVwIHRoaXMgaW4gbWluZCB3aGVuIG1ha2luZyBjaGFuZ2VzLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxBamF4ICB1cmwgdG8gbG9hZAogICAgICogQHJldHVybiB7Qm9vbGVhbn0KICAgICAqLwogICAgbG9hZEFqYXhDb250ZW50OiBmdW5jdGlvbiAodXJsQWpheCkgewogICAgICAgIGlmICh0eXBlb2YgcGl3aWtNZW51ICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICBwaXdpa01lbnUuYWN0aXZhdGVNZW51KAogICAgICAgICAgICAgICAgYnJvYWRjYXN0LmdldFBhcmFtVmFsdWUoJ21vZHVsZScsIHVybEFqYXgpLAogICAgICAgICAgICAgICAgYnJvYWRjYXN0LmdldFBhcmFtVmFsdWUoJ2FjdGlvbicsIHVybEFqYXgpLAogICAgICAgICAgICAgICAgYnJvYWRjYXN0LmdldFBhcmFtVmFsdWUoJ2lkR29hbCcsIHVybEFqYXgpIHx8IGJyb2FkY2FzdC5nZXRQYXJhbVZhbHVlKCdpZERhc2hib2FyZCcsIHVybEFqYXgpCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICBwaXdpa0hlbHBlci5oaWRlQWpheEVycm9yKCdsb2FkaW5nRXJyb3InKTsKICAgICAgICBwaXdpa0hlbHBlci5zaG93QWpheExvYWRpbmcoKTsKICAgICAgICAkKCcjY29udGVudCcpLmVtcHR5KCk7CiAgICAgICAgJCgib2JqZWN0IikucmVtb3ZlKCk7CgogICAgICAgIHVybEFqYXggPSB1cmxBamF4Lm1hdGNoKC9eXD8vKSA/IHVybEFqYXggOiAiPyIgKyB1cmxBamF4OwogICAgICAgIGJyb2FkY2FzdC5sYXN0VXJsUmVxdWVzdGVkID0gdXJsQWpheDsKICAgICAgICBmdW5jdGlvbiBzZWN0aW9uTG9hZGVkKGNvbnRlbnQpIHsKICAgICAgICAgICAgLy8gaWYgY29udGVudCBpcyB3aG9sZSBIVE1MIGRvY3VtZW50LCBkbyBub3Qgc2hvdyBpdCwgb3RoZXJ3aXNlIHJlY3Vyc2l2ZSBwYWdlIGxvYWQgY291bGQgb2NjdXIKICAgICAgICAgICAgdmFyIGh0bWxEb2NUeXBlID0gJzwhRE9DVFlQRSc7CiAgICAgICAgICAgIGlmIChjb250ZW50LnN1YnN0cmluZygwLCBodG1sRG9jVHlwZS5sZW5ndGgpID09IGh0bWxEb2NUeXBlKSB7CiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgY29udGVudCBoYXMgYW4gZXJyb3IgbWVzc2FnZSwgZGlzcGxheSBpdAogICAgICAgICAgICAgICAgaWYgKCQoY29udGVudCkuZmlsdGVyKCd0aXRsZScpLnRleHQoKSA9PSAnUGl3aWsg4oC6IEVycm9yJykgewogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAkKGNvbnRlbnQpLmZpbHRlcignI2NvbnRlbnRzaW1wbGUnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodXJsQWpheCA9PSBicm9hZGNhc3QubGFzdFVybFJlcXVlc3RlZCkgewogICAgICAgICAgICAgICAgJCgnI2NvbnRlbnQnKS5odG1sKGNvbnRlbnQpLnNob3coKTsKICAgICAgICAgICAgICAgICQoYnJvYWRjYXN0KS50cmlnZ2VyKCdsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCB7ZWxlbWVudDogJCgnI2NvbnRlbnQnKSwgY29udGVudDogY29udGVudH0pOwogICAgICAgICAgICAgICAgcGl3aWtIZWxwZXIuaGlkZUFqYXhMb2FkaW5nKCk7CiAgICAgICAgICAgICAgICBicm9hZGNhc3QubGFzdFVybFJlcXVlc3RlZCA9IG51bGw7CgogICAgICAgICAgICAgICAgcGl3aWtIZWxwZXIuY29tcGlsZUFuZ3VsYXJDb21wb25lbnRzKCcjY29udGVudCcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpbml0VG9wQ29udHJvbHMoKTsKICAgICAgICB9CgogICAgICAgIHZhciBhamF4ID0gbmV3IGFqYXhIZWxwZXIoKTsKICAgICAgICBhamF4LnNldFVybCh1cmxBamF4KTsKICAgICAgICBhamF4LnNldEVycm9yQ2FsbGJhY2soYnJvYWRjYXN0LmN1c3RvbUFqYXhIYW5kbGVFcnJvcik7CiAgICAgICAgYWpheC5zZXRDYWxsYmFjayhzZWN0aW9uTG9hZGVkKTsKICAgICAgICBhamF4LnNldEZvcm1hdCgnaHRtbCcpOwogICAgICAgIGFqYXguc2VuZCgpOwoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAoKICAgIC8qKgogICAgICogTWV0aG9kIHRvIGhhbmRsZSBhamF4IGVycm9ycwogICAgICogQHBhcmFtIHtYTUxIdHRwUmVxdWVzdH0gZGVmZXJyZWQKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXMKICAgICAqIEByZXR1cm4ge3ZvaWR9CiAgICAgKi8KICAgIGN1c3RvbUFqYXhIYW5kbGVFcnJvcjogZnVuY3Rpb24gKGRlZmVycmVkLCBzdGF0dXMpIHsKICAgICAgICBicm9hZGNhc3QubGFzdFVybFJlcXVlc3RlZCA9IG51bGw7CgogICAgICAgIHBpd2lrSGVscGVyLmhpZGVBamF4TG9hZGluZygpOwoKICAgICAgICAvLyBkbyBub3QgZGlzcGxheSBlcnJvciBtZXNzYWdlIGlmIHJlcXVlc3Qgd2FzIGFib3J0ZWQKICAgICAgICBpZihzdGF0dXMgPT0gJ2Fib3J0JykgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAkKCcjbG9hZGluZ0Vycm9yJykuc2hvdygpOwogICAgfSwKCiAgICAvKioKICAgICAqIFJldHVybiBoYXNoIHN0cmluZyBpZiBoYXNoIGV4aXN0cyBvbiBhZGRyZXNzIGJhci4KICAgICAqIGVsc2UgcmV0dXJuIGZhbHNlOwogICAgICoKICAgICAqIEByZXR1cm4ge3N0cmluZ3xib29sZWFufSAgY3VycmVudCBoYXNoIG9yIGZhbHNlIGlmIGl0IGlzIGVtcHR5CiAgICAgKi8KICAgIGlzSGFzaEV4aXN0czogZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBoYXNoU3RyID0gYnJvYWRjYXN0LmdldEhhc2hGcm9tVXJsKCk7CgogICAgICAgIGlmIChoYXNoU3RyICE9ICIiKSB7CiAgICAgICAgICAgIHJldHVybiBoYXNoU3RyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogR2V0IEhhc2ggZnJvbSBnaXZlbiB1cmwgb3IgZnJvbSBjdXJyZW50IGxvY2F0aW9uLgogICAgICogcmV0dXJuIGVtcHR5IHN0cmluZyBpZiBubyBoYXNoIHByZXNlbnQuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9ICBbdXJsXSAgdXJsIHRvIGdldCBoYXNoIGZyb20gKGRlZmF1bHRzIHRvIGN1cnJlbnQgbG9jYXRpb24pCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBoYXNoIHBhcnQgb2YgdGhlIGdpdmVuIHVybAogICAgICovCiAgICBnZXRIYXNoRnJvbVVybDogZnVuY3Rpb24gKHVybCkgewogICAgICAgIHZhciBoYXNoU3RyID0gIiI7CiAgICAgICAgLy8gSWYgdXJsIHByb3ZpZGVkLCBnaXZlIGJhY2sgdGhlIGhhc2ggZnJvbSB1cmwsIGVsc2UgZ2V0IGhhc2ggZnJvbSBjdXJyZW50IGFkZHJlc3MuCiAgICAgICAgaWYgKHVybCAmJiB1cmwubWF0Y2goJyMnKSkgewogICAgICAgICAgICBoYXNoU3RyID0gdXJsLnN1YnN0cmluZyh1cmwuaW5kZXhPZigiIyIpLCB1cmwubGVuZ3RoKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGxvY2F0aW9uU3BsaXQgPSBsb2NhdGlvbi5ocmVmLnNwbGl0KCcjJyk7CiAgICAgICAgICAgIGlmKHR5cGVvZiBsb2NhdGlvblNwbGl0WzFdICE9ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICBoYXNoU3RyID0gJyMnICsgbG9jYXRpb25TcGxpdFsxXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGhhc2hTdHI7CiAgICB9LAoKICAgIC8qKgogICAgICogR2V0IHNlYXJjaCBxdWVyeSBmcm9tIGdpdmVuIHVybCBvciBmcm9tIGN1cnJlbnQgbG9jYXRpb24uCiAgICAgKiByZXR1cm4gZW1wdHkgc3RyaW5nIGlmIG5vIHNlYXJjaCBxdWVyeSBwcmVzZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwKICAgICAqIEByZXR1cm4ge3N0cmluZ30gIHRoZSBxdWVyeSBwYXJ0IG9mIHRoZSBnaXZlbiB1cmwKICAgICAqLwogICAgZ2V0U2VhcmNoRnJvbVVybDogZnVuY3Rpb24gKHVybCkgewogICAgICAgIHZhciBzZWFyY2hTdHIgPSAiIjsKICAgICAgICAvLyBJZiB1cmwgcHJvdmlkZWQsIGdpdmUgYmFjayB0aGUgcXVlcnkgc3RyaW5nIGZyb20gdXJsLCBlbHNlIGdldCBxdWVyeSBzdHJpbmcgZnJvbSBjdXJyZW50IGFkZHJlc3MuCiAgICAgICAgaWYgKHVybCAmJiB1cmwubWF0Y2goL1w/LykpIHsKICAgICAgICAgICAgc2VhcmNoU3RyID0gdXJsLnN1YnN0cmluZyh1cmwuaW5kZXhPZigiPyIpLCB1cmwubGVuZ3RoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZWFyY2hTdHIgPSBsb2NhdGlvbi5zZWFyY2g7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc2VhcmNoU3RyOwogICAgfSwKCiAgICAvKioKICAgICAqIEV4dHJhY3RzIGZyb20gYSBxdWVyeSBzdHJpbmdzLCB0aGUgcmVxdWVzdCBhcnJheQogICAgICogQHBhcmFtIHF1ZXJ5U3RyaW5nCiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fQogICAgICovCiAgICBleHRyYWN0S2V5VmFsdWVQYWlyc0Zyb21RdWVyeVN0cmluZzogZnVuY3Rpb24gKHF1ZXJ5U3RyaW5nKSB7CiAgICAgICAgdmFyIHBhaXJzID0gcXVlcnlTdHJpbmcuc3BsaXQoJyYnKTsKICAgICAgICB2YXIgcmVzdWx0ID0ge307CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgIT0gcGFpcnMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgLy8gYXR0bjogc3BsaXQgd2l0aCByZWdleCBoYXMgYnVncyBpbiBzZXZlcmFsIGJyb3dzZXJzIHN1Y2ggYXMgSUUgOAogICAgICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIHNwbGl0LCB1c2UgdGhlIGZpcnN0IHBhcnQgYXMga2V5IGFuZCByZWpvaW4gdGhlIHJlc3QKICAgICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpOwogICAgICAgICAgICB2YXIga2V5ID0gcGFpci5zaGlmdCgpOwogICAgICAgICAgICByZXN1bHRba2V5XSA9IHBhaXIuam9pbignPScpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfSwKCiAgICAvKioKICAgICAqIFJldHVybnMgYWxsIGtleS12YWx1ZSBwYWlycyBpbiBxdWVyeSBzdHJpbmcgb2YgdXJsLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgdXJsIHRvIGNoZWNrLiBpZiB1bmRlZmluZWQsIG51bGwgb3IgZW1wdHksIGN1cnJlbnQgdXJsIGlzIHVzZWQuCiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IGtleSB2YWx1ZSBwYWlyIGRlc2NyaWJpbmcgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnMKICAgICAqLwogICAgZ2V0VmFsdWVzRnJvbVVybDogZnVuY3Rpb24gKHVybCkgewogICAgICAgIHZhciBzZWFyY2hTdHJpbmcgPSB0aGlzLl9yZW1vdmVIYXNoRnJvbVVybCh1cmwpLnNwbGl0KCc/JylbMV0gfHwgJyc7CiAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFjdEtleVZhbHVlUGFpcnNGcm9tUXVlcnlTdHJpbmcoc2VhcmNoU3RyaW5nKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBoZWxwIHRvIGdldCBwYXJhbSB2YWx1ZSBmb3IgYW55IGdpdmVuIHVybCBzdHJpbmcgd2l0aCBwcm92aWRlZCBwYXJhbSBuYW1lCiAgICAgKiBpZiBubyB1cmwgaXMgcHJvdmlkZWQsIGl0IHdpbGwgZ2V0IHBhcmFtIGZyb20gY3VycmVudCBhZGRyZXNzLgogICAgICogcmV0dXJuOgogICAgICogICBFbXB0eSBTdHJpbmcgaWYgcGFyYW0gaXMgbm90IGZvdW5kLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbSAgIHBhcmFtZXRlciB0byBzZWFyY2ggZm9yCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3VybF0gICAgIHVybCB0byBjaGVjaywgZGVmYXVsdHMgdG8gY3VycmVudCBsb2NhdGlvbgogICAgICogQHJldHVybiB7c3RyaW5nfSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gcGFyYW0gd2l0aGluIHRoZSBnaXZlbiB1cmwKICAgICAqLwogICAgZ2V0VmFsdWVGcm9tVXJsOiBmdW5jdGlvbiAocGFyYW0sIHVybCkgewogICAgICAgIHZhciBzZWFyY2hTdHJpbmcgPSB0aGlzLl9yZW1vdmVIYXNoRnJvbVVybCh1cmwpOwogICAgICAgIHJldHVybiBicm9hZGNhc3QuZ2V0UGFyYW1WYWx1ZShwYXJhbSwgc2VhcmNoU3RyaW5nKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBOT1RFOiB5b3Ugc2hvdWxkIHByb2JhYmx5IGJlIHVzaW5nIGJyb2FkY2FzdC5nZXRWYWx1ZUZyb21VcmwgaW5zdGVhZCEKICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0gICBwYXJhbWV0ZXIgdG8gc2VhcmNoIGZvcgogICAgICogQHBhcmFtIHtzdHJpbmd9IFt1cmxdICAgdXJsIHRvIGNoZWNrCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHZhbHVlIG9mIHRoZSBnaXZlbiBwYXJhbSB3aXRoaW4gdGhlIGhhc2ggcGFydCBvZiB0aGUgZ2l2ZW4gdXJsCiAgICAgKi8KICAgIGdldFZhbHVlRnJvbUhhc2g6IGZ1bmN0aW9uIChwYXJhbSwgdXJsKSB7CiAgICAgICAgdmFyIGhhc2hTdHIgPSBicm9hZGNhc3QuZ2V0SGFzaEZyb21VcmwodXJsKTsKICAgICAgICBpZiAoaGFzaFN0ci5zdWJzdHIoMCwgMSkgPT0gJyMnKSB7CiAgICAgICAgICAgIGhhc2hTdHIgPSBoYXNoU3RyLnN1YnN0cigxKTsKICAgICAgICB9CiAgICAgICAgaGFzaFN0ciA9IGhhc2hTdHIuc3BsaXQoJyMnKVswXTsKCiAgICAgICAgcmV0dXJuIGJyb2FkY2FzdC5nZXRQYXJhbVZhbHVlKHBhcmFtLCBoYXNoU3RyKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiByZXR1cm4gdmFsdWUgZm9yIHRoZSByZXF1ZXN0ZWQgcGFyYW0sIHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBtYXRjaC4KICAgICAqIG91dCBzaWRlIG9mIHRoaXMgY2xhc3Mgc2hvdWxkIHVzZSBnZXRWYWx1ZUZyb21IYXNoKCkgb3IgZ2V0VmFsdWVGcm9tVXJsKCkgaW5zdGVhZC4KICAgICAqIHJldHVybjoKICAgICAqICAgRW1wdHkgU3RyaW5nIGlmIHBhcmFtIGlzIG5vdCBmb3VuZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0gICBwYXJhbWV0ZXIgdG8gc2VhcmNoIGZvcgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAgICAgdXJsIHRvIGNoZWNrCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHZhbHVlIG9mIHRoZSBnaXZlbiBwYXJhbSB3aXRoaW4gdGhlIGdpdmVuIHVybAogICAgICovCiAgICBnZXRQYXJhbVZhbHVlOiBmdW5jdGlvbiAocGFyYW0sIHVybCkgewogICAgICAgIHZhciBsb29rRm9yID0gcGFyYW0gKyAnPSc7CiAgICAgICAgdmFyIHN0YXJ0U3RyID0gdXJsLmluZGV4T2YobG9va0Zvcik7CgogICAgICAgIGlmIChzdGFydFN0ciA+PSAwKSB7CiAgICAgICAgICAgIHZhciBlbmRTdHIgPSB1cmwuaW5kZXhPZigiJiIsIHN0YXJ0U3RyKTsKICAgICAgICAgICAgaWYgKGVuZFN0ciA9PSAtMSkgewogICAgICAgICAgICAgICAgZW5kU3RyID0gdXJsLmxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdmFsdWUgPSB1cmwuc3Vic3RyaW5nKHN0YXJ0U3RyICsgcGFyYW0ubGVuZ3RoICsgMSwgZW5kU3RyKTsKCiAgICAgICAgICAgIC8vIHdlIHNhbml0aXplIHZhbHVlcyB0byBhZGQgYSBwcm90ZWN0aW9uIGxheWVyIGFnYWluc3QgWFNTCiAgICAgICAgICAgIC8vICZzZWdtZW50PSB2YWx1ZSBpcyBub3Qgc2FuaXRpemVkLCBzaW5jZSBzZWdtZW50cyBhcmUgZGVzaWduZWQgdG8gYWNjZXB0IGFueSB1c2VyIGlucHV0CiAgICAgICAgICAgIGlmKHBhcmFtICE9ICdzZWdtZW50JykgewogICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXl8lflwqXCtcLVw8XD4hQFwkXC4oKT0sOzAtOWEtekEtWl0vZ2ksICcnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBSZXR1cm5zIHRoZSBoYXNoIHdpdGhvdXQgdGhlIHN0YXJ0aW5nICMKICAgICAqIEByZXR1cm4ge3N0cmluZ30gaGFzaCBwYXJ0IG9mIHRoZSBjdXJyZW50IHVybAogICAgICovCiAgICBnZXRIYXNoOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGJyb2FkY2FzdC5nZXRIYXNoRnJvbVVybCgpLnJlcGxhY2UoL14jLywgJycpLnNwbGl0KCcjJylbMF07CiAgICB9LAoKICAgIC8qKgogICAgICogUmVtb3ZlcyB0aGUgaGFzaCBwb3J0aW9uIG9mIGEgVVJMIGFuZCByZXR1cm5zIHRoZSByZXN0LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwKICAgICAqIEByZXR1cm4ge3N0cmluZ30gdXJsIHcvbyBoYXNoCiAgICAgKi8KICAgIF9yZW1vdmVIYXNoRnJvbVVybDogZnVuY3Rpb24gKHVybCkgewogICAgICAgIHZhciBzZWFyY2hTdHJpbmcgPSAnJzsKICAgICAgICBpZiAodXJsKSB7CiAgICAgICAgICAgIHZhciB1cmxQYXJ0cyA9IHVybC5zcGxpdCgnIycpOwogICAgICAgICAgICBzZWFyY2hTdHJpbmcgPSB1cmxQYXJ0c1swXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZWFyY2hTdHJpbmcgPSBsb2NhdGlvbi5zZWFyY2g7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzZWFyY2hTdHJpbmc7CiAgICB9Cn07Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 22:07:13 GMT",
                    "Content-Length": "22714",
                    "Date": "Fri, 07 Nov 2014 22:07:19 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}