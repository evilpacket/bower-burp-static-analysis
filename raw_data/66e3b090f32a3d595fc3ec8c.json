{
    "url": "http://localhost:9999/michaelbromley/horizonal/dist/horizonal.debug.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location.hash</b> and written to <b>$()</b> via the following statements:<ul><li>var hash = window.location.hash;</li><li>var page = $(hash).closest('.hrz-page');</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/michaelbromley/horizonal/dist/horizonal.debug.js",
                "path": "/michaelbromley/horizonal/dist/horizonal.debug.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9taWNoYWVsYnJvbWxleS9ob3Jpem9uYWwvZGlzdC9ob3Jpem9uYWwuZGVidWcuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNDM1NTQNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMDM6MTk6NDMgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDAzOjE5OjQzIEdNVA0KDQooZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCkgewovKioKICogVGhpcyBvYmplY3QgaXMgcmVzcG9uc2libGUgZm9yIHRha2luZyBhIG5vZGVDb2xsZWN0aW9uIGFuZCBzcGxpdHRpbmcgaXQgdXAgaW50byB0aGUgY29ycmVjdCBudW1iZXIgb2YgcGFnZXMsCiAqIHBsYWNpbmcgdGhlIGNvcnJlY3Qgbm9kZXMgb24gZWFjaCBwYWdlLgogKi8KdmFyIHBhZ2VDb2xsZWN0aW9uR2VuZXJhdG9yID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgbW9kdWxlID0ge307CgogICAgZnVuY3Rpb24gZnJvbU5vZGVDb2xsZWN0aW9uKG5vZGVDb2xsZWN0aW9uKSB7CiAgICAgICAgdmFyIGxhc3RQYWdlID0gMTsKICAgICAgICB2YXIgaW5kZXg7CiAgICAgICAgdmFyIHBhZ2VDb2xsZWN0aW9uID0gbmV3IFBhZ2VDb2xsZWN0aW9uKCk7CgogICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG5vZGVDb2xsZWN0aW9uLmxlbmd0aDsgaW5kZXggKyspIHsKICAgICAgICAgICAgdmFyIG5vZGUgPSBub2RlQ29sbGVjdGlvbltpbmRleF07CiAgICAgICAgICAgIHZhciBwYWdlVXBwZXJCb3VuZCA9IHBhZ2VDb2xsZWN0aW9uLmdldExhc3RPZmZzZXQoKSArIFZJRVdQT1JUX0hFSUdIVDsKCiAgICAgICAgICAgIHZhciBub2RlSXNUYWxsQW5kRG9lc05vdEZpdE9uUGFnZSA9IGlzTm9kZVRhbGwobm9kZSwgcGFnZVVwcGVyQm91bmQpOwogICAgICAgICAgICBpZiAobm9kZUlzVGFsbEFuZERvZXNOb3RGaXRPblBhZ2UgJiYgIW5vZGUuaXNDbG9uZSkgewogICAgICAgICAgICAgICAgbm9kZS5pc1RhbGwgPSB0cnVlOwogICAgICAgICAgICAgICAgdmFyIHBhZ2VPdmVyaGFuZyA9IG5vZGUubGF5b3V0LmJvdHRvbSAtIHBhZ2VVcHBlckJvdW5kOwogICAgICAgICAgICAgICAgdmFyIGkgPSAxOwogICAgICAgICAgICAgICAgLy8gQXMgbG9uZyBhcyB0aGUgbm9kZSBoYW5ncyBvdmVyIHRoZSBlZGdlIG9mIHRoZSBwYWdlLCB3ZSBuZWVkIHRvIGtlZXAKICAgICAgICAgICAgICAgIC8vIGFkZGluZyBjbG9uZXMgdGhhdCB3aWxsIGVhY2ggYXBwZWFyIG9uIHN1YnNlcXVlbnQgcGFnZXMuCiAgICAgICAgICAgICAgICB3aGlsZSgwIDwgcGFnZU92ZXJoYW5nKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNsb25lSW5kZXggPSBpbmRleCArIGk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNsb25lID0gbm9kZS5tYWtlQ2xvbmUoY2xvbmVJbmRleCk7CiAgICAgICAgICAgICAgICAgICAgY2xvbmUucGFnZU92ZXJoYW5nID0gcGFnZU92ZXJoYW5nOwogICAgICAgICAgICAgICAgICAgIG5vZGVDb2xsZWN0aW9uLnNwbGljZShjbG9uZUluZGV4LCAwICwgY2xvbmUpOwogICAgICAgICAgICAgICAgICAgIHBhZ2VPdmVyaGFuZyA9IHBhZ2VPdmVyaGFuZyAtIFZJRVdQT1JUX0hFSUdIVDsKICAgICAgICAgICAgICAgICAgICBpICsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGxhc3RQYWdlID0gY2FsY3VsYXRlTGFzdFBhZ2VBbmRQYWdlT2Zmc2V0KG5vZGUsIHBhZ2VDb2xsZWN0aW9uLCBsYXN0UGFnZSk7CgogICAgICAgICAgICB2YXIgcGFnZVRvQWRkVG87CiAgICAgICAgICAgIHZhciBub2RlSXNCb3R0b21Nb3N0RWxlbWVudCA9IHBhZ2VDb2xsZWN0aW9uLmxhc3QoKS5ib3R0b20gPT09IG5vZGUubGF5b3V0LmJvdHRvbTsKICAgICAgICAgICAgaWYgKG5vZGVJc0JvdHRvbU1vc3RFbGVtZW50IHx8IG5vZGUuaXNDbG9uZSB8fCBub2RlLm5ld1BhZ2UpIHsKICAgICAgICAgICAgICAgIHBhZ2VUb0FkZFRvID0gbGFzdFBhZ2U7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwYWdlVG9BZGRUbyA9IHBhZ2VDb2xsZWN0aW9uLmdldFBhZ2VBdE9mZnNldChub2RlLmxheW91dC50b3ApLnBhZ2VOdW1iZXI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHBhZ2VDb2xsZWN0aW9uLmdldFBhZ2UocGFnZVRvQWRkVG8pLmFkZE5vZGUobm9kZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcGFnZUNvbGxlY3Rpb247CiAgICB9CgogICAgZnVuY3Rpb24gaXNOb2RlVGFsbChub2RlLCBwYWdlVXBwZXJCb3VuZCkgewogICAgICAgIHZhciBpc1RhbGwgPSBmYWxzZTsKICAgICAgICBpZiAoJChub2RlLmRvbU5vZGUpLmhhc0NsYXNzKE9QVElPTlMubmV3UGFnZUNsYXNzKSkgewogICAgICAgICAgICBpZiAoVklFV1BPUlRfSEVJR0hUIDwgbm9kZS5sYXlvdXQuaGVpZ2h0KSB7CiAgICAgICAgICAgICAgICBpc1RhbGwgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKFZJRVdQT1JUX0hFSUdIVCAvIDIgPCBub2RlLmxheW91dC5oZWlnaHQgJiYgcGFnZVVwcGVyQm91bmQgPCBub2RlLmxheW91dC5ib3R0b20pIHsKICAgICAgICAgICAgICAgIGlzVGFsbCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGlzVGFsbDsKICAgIH0KCiAgICAvKioKICAgICAqIEZvciBhIGdpdmVuIG5vZGUsIHdlIG5lZWQgdG8ga25vdyB3aGF0IHBhZ2UgaXQgc2hvdWxkIGJlIG9uLCBhbmQgd2hldGhlciBpdCBleHRlbmRzIG9mZiB0aGUgYm90dG9tCiAgICAgKiBvZmYgdGhlIGN1cnJlbnQgcGFnZSAobGFzdFBhZ2UpLiBJZiBzbywgd2UgbmVlZCB0byBzdGFydCBhIG5ldyBwYWdlLiBTb3JyeSBhYm91dCB0aGUgY29tcGxleGl0eS4KICAgICAqIEBwYXJhbSBub2RlCiAgICAgKiBAcGFyYW0gbGFzdFBhZ2UKICAgICAqIEBwYXJhbSBwYWdlQ29sbGVjdGlvbgogICAgICovCiAgICBmdW5jdGlvbiBjYWxjdWxhdGVMYXN0UGFnZUFuZFBhZ2VPZmZzZXQobm9kZSwgcGFnZUNvbGxlY3Rpb24sIGxhc3RQYWdlKSB7CiAgICAgICAgaWYgKCQobm9kZS5kb21Ob2RlKS5oYXNDbGFzcyhPUFRJT05TLm5ld1BhZ2VDbGFzcykpIHsKICAgICAgICAgICAgbGFzdFBhZ2UgKys7CiAgICAgICAgICAgIG5vZGUubmV3UGFnZSA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmIChwYWdlQ29sbGVjdGlvbltsYXN0UGFnZSAtIDFdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdmFyIHBhZ2UgPSBwYWdlQ29sbGVjdGlvbi5nZXRQYWdlKGxhc3RQYWdlKTsKICAgICAgICAgICAgdmFyIHBhZ2VVcHBlckJvdW5kID0gcGFnZS50b3AgKyBWSUVXUE9SVF9IRUlHSFQ7CiAgICAgICAgICAgIGlmIChwYWdlLmJvdHRvbSA8PSBub2RlLmxheW91dC5ib3R0b20pIHsKICAgICAgICAgICAgICAgIHZhciBub2RlRG9lc05vdEZpdE9uUGFnZSA9IHBhZ2VVcHBlckJvdW5kIDwgbm9kZS5sYXlvdXQuYm90dG9tOwogICAgICAgICAgICAgICAgaWYgKCFub2RlLmlzVGFsbCkgewogICAgICAgICAgICAgICAgICAgIGlmIChub2RlRG9lc05vdEZpdE9uUGFnZSB8fCBub2RlLmlzQ2xvbmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFBhZ2UgKys7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VDb2xsZWN0aW9uLmFkZCgpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UGFnZSA9IHBhZ2VDb2xsZWN0aW9uLmxhc3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFZJRVdQT1JUX0hFSUdIVCA8IG5vZGUubGF5b3V0LmhlaWdodCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGFnZS5ib3R0b20gPSBwYWdlVXBwZXJCb3VuZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnBhZ2VPdmVyaGFuZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1BhZ2UuYm90dG9tICs9IE1hdGgubWluKG5vZGUucGFnZU92ZXJoYW5nLCBWSUVXUE9SVF9IRUlHSFQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGFnZS5ib3R0b20gPSBub2RlLmxheW91dC5ib3R0b207CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBwYWdlLmJvdHRvbSA9IG5vZGUubGF5b3V0LmJvdHRvbTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmIChub2RlRG9lc05vdEZpdE9uUGFnZSkgewogICAgICAgICAgICAgICAgICAgICAgICBwYWdlLmJvdHRvbSA9IHBhZ2VVcHBlckJvdW5kOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBhZ2VDb2xsZWN0aW9uLmFkZCgpOwogICAgICAgICAgICBwYWdlQ29sbGVjdGlvbi5sYXN0KCkuYm90dG9tID0gbm9kZS5sYXlvdXQuYm90dG9tOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGxhc3RQYWdlOwogICAgfQoKICAgIG1vZHVsZS5mcm9tTm9kZUNvbGxlY3Rpb24gPSBmcm9tTm9kZUNvbGxlY3Rpb247CiAgICByZXR1cm4gbW9kdWxlOwp9KCk7CnZhciBQQUdFX0NPTExFQ1RJT047CnZhciBPUFRJT05TOwp2YXIgQ09OVEFJTkVSOwp2YXIgUk9PVDsKdmFyIFJPT1RfQ0xPTkU7CnZhciBWSUVXUE9SVF9IRUlHSFQ7CnZhciBDVVNUT01fQ1NTOwoKCmZ1bmN0aW9uIEhvcml6b25hbCgpIHsKCiAgICB2YXIgX2hhc0JlZW5Jbml0aWFsaXplZCA9IGZhbHNlOwogICAgdmFyIF9kaXNhYmxlZCA9IGZhbHNlOwogICAgdmFyIGRlZmF1bHRzID0gewogICAgICAgIHNlbGVjdG9yOiAnaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgbGksIGltZywgdGFibGUnLAogICAgICAgIHN0YWdnZXJEZWxheTogMC4xLAogICAgICAgIHN0YWdnZXI6ICdyYW5kb20nLAogICAgICAgIGN1c3RvbUNzc0ZpbGU6IGZhbHNlLAogICAgICAgIGRpc3BsYXlTY3JvbGxiYXI6IGZhbHNlLAogICAgICAgIHNjcm9sbGJhclNob3J0ZW5SYXRpbzogMiwgLy8gbG9uZyBzY3JvbGxpbmcgYmV0d2VlbiBwYWdlcyBjYW4gYmUgYSBwYWluLCBzbyBhIGhpZ2hlciB2YWx1ZSBoZXJlIHdpbGwgc2hvcnRlbiB0aGUgc2Nyb2xsIGRpc3RhbmNlIGJldHdlZW4gcGFnZXMKICAgICAgICBwYWdlTWFyZ2luOiAyMCwKICAgICAgICBkaXNwbGF5UGFnZUNvdW50OiB0cnVlLAogICAgICAgIHJvb3RFbGVtZW50OiAnYm9keScsCiAgICAgICAgbmV3UGFnZUNsYXNzOiAnaHJ6LXN0YXJ0LW5ldy1wYWdlJywKICAgICAgICBwYWdlSGlkZURlbGF5OiAxLCAvLyBzZWNvbmRzIGJlZm9yZSB0aGUgJ2hyei1oaWRkZW4nIGNsYXNzIGdldHMgYWRkZWQgdG8gYSBwYWdlIHRoZSBpcyBub3QgaW4gZm9jdXMKICAgICAgICBvblJlc2l6ZTogbm9vcCwKICAgICAgICBvbk5vZGVUcmFuc2l0aW9uOiBub29wLAogICAgICAgIG9uUGFnZVRyYW5zaXRpb246IG5vb3AKICAgIH07CgogICAgZnVuY3Rpb24gaW5pdChfT1BUSU9OUykgewogICAgICAgIHZhciBjdXJyZW50U2Nyb2xsID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpOwogICAgICAgIE9QVElPTlMgPSAkLmV4dGVuZCgge30sIGRlZmF1bHRzLCBfT1BUSU9OUyk7CiAgICAgICAgbG9hZEN1c3RvbUNzcygpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghX2hhc0JlZW5Jbml0aWFsaXplZCkgewogICAgICAgICAgICAgICAgUk9PVCA9ICQoT1BUSU9OUy5yb290RWxlbWVudCk7CiAgICAgICAgICAgICAgICBST09UX0NMT05FID0gUk9PVC5jbG9uZSgpOwogICAgICAgICAgICAgICAgY29tcG9zZVBhZ2UoY3VycmVudFNjcm9sbCkKICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUGFnZUNvdW50KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyRXZlbnRIYW5kbGVycygpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggIT09ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNoQ2hhbmdlSGFuZGxlcigpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF9oYXNCZWVuSW5pdGlhbGl6ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVzaXplSGFuZGxlcigpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gZGlzYWJsZSgpIHsKICAgICAgICBpZiAoIV9kaXNhYmxlZCkgewogICAgICAgICAgICBST09ULnJlcGxhY2VXaXRoKFJPT1RfQ0xPTkUuY2xvbmUoKSk7CiAgICAgICAgICAgIGlmICghT1BUSU9OUy5kaXNwbGF5U2Nyb2xsYmFyKSB7CiAgICAgICAgICAgICAgICAkKCdib2R5JykuY3NzKCdvdmVyZmxvdy15JywgJycpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVucmVnaXN0ZXJFdmVudEhhbmRsZXJzKCk7CiAgICAgICAgICAgIHJlbW92ZVBhZ2VDb3VudCgpOwogICAgICAgICAgICBfZGlzYWJsZWQgPSB0cnVlOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBlbmFibGUoKSB7CiAgICAgICAgaWYgKF9kaXNhYmxlZCkgewogICAgICAgICAgICByZXNpemVIYW5kbGVyKCk7CiAgICAgICAgICAgIHJlZ2lzdGVyRXZlbnRIYW5kbGVycygpOwogICAgICAgICAgICBfZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBUYWtlcyBhIHBhZ2UgbnVtYmVyIG9yIFVSTCBmcmFnbWVudCAoIykgYW5kIGdvZXMgdG8gdGhhdCBwYWdlLgogICAgICogQHBhcmFtIHRhcmdldAogICAgICovCiAgICBmdW5jdGlvbiBnb1RvKHRhcmdldCkgewogICAgICAgIHZhciBwYWdlTnVtYmVyOwogICAgICAgIGlmICh0YXJnZXQuc3Vic3RyKDAsIDEpID09PSAiIyIpIHsKICAgICAgICAgICAgaGFzaENoYW5nZUhhbmRsZXIodGFyZ2V0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBUT0RPOiB2ZXJpZnkgdGFyZ2V0IGlzIHZhbGlkIGludGVnZXIKICAgICAgICAgICAgcGFnZU51bWJlciA9IHRhcmdldDsKICAgICAgICAgICAgUEFHRV9DT0xMRUNUSU9OLnNob3dQYWdlKHBhZ2VOdW1iZXIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBuZXh0KCkgewogICAgICAgIHZhciBjdXJyZW50ID0gUEFHRV9DT0xMRUNUSU9OLmN1cnJlbnRQYWdlOwogICAgICAgIHZhciBsYXN0ID0gUEFHRV9DT0xMRUNUSU9OLmxlbmd0aDsKCiAgICAgICAgaWYgKGN1cnJlbnQgPCBsYXN0KSB7CiAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSBQQUdFX0NPTExFQ1RJT04uZ2V0UGFnZShjdXJyZW50ICsgMSkubWlkUG9pbnQ7CiAgICAgICAgICAgICQod2luZG93KS5zY3JvbGxUb3Aoc2Nyb2xsVG9wKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcHJldmlvdXMoKSB7CiAgICAgICAgdmFyIGN1cnJlbnQgPSBQQUdFX0NPTExFQ1RJT04uY3VycmVudFBhZ2U7CgogICAgICAgIGlmICgxIDwgY3VycmVudCkgewogICAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gUEFHRV9DT0xMRUNUSU9OLmdldFBhZ2UoY3VycmVudCAtIDEpLm1pZFBvaW50OwogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsVG9wKHNjcm9sbFRvcCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRIYW5kbGVycygpIHsKICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpOwogICAgICAgICQod2luZG93KS5vbigna2V5ZG93bicsIGtleWRvd25IYW5kbGVyKTsKICAgICAgICAkKHdpbmRvdykub24oJ3Njcm9sbCcsIHNjcm9sbEhhbmRsZXIpOwogICAgICAgICQod2luZG93KS5vbignaGFzaGNoYW5nZScsIGhhc2hDaGFuZ2VIYW5kbGVyKTsKICAgICAgICAkKHdpbmRvdykub24oJ3RvdWNoc3RhcnQgcG9pbnRlcmRvd24gTVNQb2ludGVyRG93bicsIHRvdWNoc3RhcnRIYW5kbGVyKTsKICAgICAgICAkKHdpbmRvdykub24oJ3RvdWNoZW5kIHBvaW50ZXJ1cCBNU1BvaW50ZXJVcCcsIHRvdWNoZW5kSGFuZGxlcik7CiAgICAgICAgJCh3aW5kb3cpLm9uKCd0b3VjaG1vdmUgcG9pbnRlcm1vdmUgTVNQb2ludGVyTW92ZScsIHRvdWNobW92ZUhhbmRsZXIpOwogICAgICAgICQod2luZG93LmRvY3VtZW50KS5vbignd2hlZWwnLCBtb3VzZXdoZWVsSGFuZGxlcik7CiAgICAgICAgJCgnYScpLm9uKCdjbGljaycsIGxpbmtIYW5kbGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiB1bnJlZ2lzdGVyRXZlbnRIYW5kbGVycygpIHsKICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTsKICAgICAgICAkKHdpbmRvdykub2ZmKCdrZXlkb3duJywga2V5ZG93bkhhbmRsZXIpOwogICAgICAgICQod2luZG93KS5vZmYoJ3Njcm9sbCcsIHNjcm9sbEhhbmRsZXIpOwogICAgICAgICQod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2UnLCBoYXNoQ2hhbmdlSGFuZGxlcik7CiAgICAgICAgJCh3aW5kb3cpLm9mZigndG91Y2hzdGFydCBwb2ludGVyZG93biBNU1BvaW50ZXJEb3duJywgdG91Y2hzdGFydEhhbmRsZXIpOwogICAgICAgICQod2luZG93KS5vZmYoJ3RvdWNoZW5kIHBvaW50ZXJ1cCBNU1BvaW50ZXJVcCcsIHRvdWNoZW5kSGFuZGxlcik7CiAgICAgICAgJCh3aW5kb3cpLm9mZigndG91Y2htb3ZlIHBvaW50ZXJtb3ZlIE1TUG9pbnRlck1vdmUnLCB0b3VjaG1vdmVIYW5kbGVyKTsKICAgICAgICAkKHdpbmRvdy5kb2N1bWVudCkub2ZmKCd3aGVlbCcsIG1vdXNld2hlZWxIYW5kbGVyKTsKICAgICAgICAkKCdhJykub2ZmKCdjbGljaycsIGxpbmtIYW5kbGVyKTsKICAgIH0KCiAgICAvKioKICAgICAqIExvYWRzIGFueSBjdXN0b20gQ1NTIGZpbGUgaW50byBhbiBpbmxpbmUgPHN0eWxlPiB0YWcgaW4gdGhlIGRvY3VtZW50IGhlYWRlci4gVGhpcyBtZXRob2QgaXMKICAgICAqIHByZWZlcnJlZCBvdmVyIHNpbXBseSBsb2FkaW5nIGEgPGxpbms+IGVsZW1lbnQsIGJlY2F1c2UgYnJvd3NlciBzdXBwb3J0IGZvciBkZXRlY3RpbmcgdGhlICJsb2FkIgogICAgICogZXZlbnQgb2YgZHluYW1pY2FsbHkgbG9hZGVkIENTUyBmaWxlcyBpcyBjdXJyZW50bHkgdmVyeSBwb29yIGFuZCBpbmNvbnNpc3RlbnQuIFRoZXJlZm9yZSB3ZSB1c2UKICAgICAqIEFKQVggdG8gbG9hZCB0aGUgQ1NTIGZpbGUgYW5kIGp1c3QgcHV0IHRoZSBjb250ZW50cyBpbiB0aGUgaGVhZC4gVGhhdCB3YXkgd2UgY2FuIGd1YXJhbnRlZSB0aGF0IGl0CiAgICAgKiBpcyBsb2FkZWQgYmVmb3JlIGNvbnRpbnVpbmcsIGluIGEgY3Jvc3MtYnJvd3NlciBjb21wYXRpYmxlIHdheS4KICAgICAqIEByZXR1cm5zIHsqfQogICAgICovCiAgICBmdW5jdGlvbiBsb2FkQ3VzdG9tQ3NzKCkgewoKICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgJC5EZWZlcnJlZCgpOwoKICAgICAgICBpZiAoT1BUSU9OUy5jdXN0b21Dc3NGaWxlKSB7CiAgICAgICAgICAgICQuZ2V0KE9QVElPTlMuY3VzdG9tQ3NzRmlsZSkudGhlbihzdWNjZXNzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkKCcjaHJ6LWN1c3RvbS1jc3MnKS5yZW1vdmUoKTsKICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpOwoKICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKGRhdGEpIHsKICAgICAgICAgICAgQ1VTVE9NX0NTUyA9IGRhdGE7CiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXR1cm4gdGhlIHB1YmxpYyBBUEkKICAgICAqLwogICAgcmV0dXJuIHsKICAgICAgICBpbml0OiBpbml0LAogICAgICAgIGRpc2FibGU6IGRpc2FibGUsCiAgICAgICAgZW5hYmxlOiBlbmFibGUsCiAgICAgICAgZ29UbzogZ29UbywKICAgICAgICBuZXh0OiBuZXh0LAogICAgICAgIHByZXZpb3VzOiBwcmV2aW91cwogICAgfTsKfQoKd2luZG93Lmhvcml6b25hbCA9IG5ldyBIb3Jpem9uYWwoKTsKCi8qKgogKiBUaGlzIGlzIHRoZSBtYWluIG1ldGhvZCB0aGF0IGNvbnZlcnRzIHRoZSBkb2N1bWVudCB0byBhIGNvbGxlY3Rpb24gb2YgcGFnZXMuIFNpbmNlIHRoaXMgbWV0aG9kIGNhbiBiZSBzbG93IChkZXBlbmRpbmcKICogb24gdGhlIG51bWJlciBvZiBET00gZWxlbWVudHMgaW4gdGhlIGRvY3VtZW50KSwgaXQgcnVucyBhc3luYyBhbmQgcmV0dXJucyBhIHByb21pc2UuCiAqIEBwYXJhbSBjdXJyZW50U2Nyb2xsCiAqLwpmdW5jdGlvbiBjb21wb3NlUGFnZShjdXJyZW50U2Nyb2xsKSB7CgogICAgdmFyIGRlZmVycmVkID0gbmV3ICQuRGVmZXJyZWQoKTsKICAgIFJPT1QgPSAkKE9QVElPTlMucm9vdEVsZW1lbnQpOwogICAgdmFyIGZyYWdtZW50ID0gY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwogICAgQ09OVEFJTkVSID0gJChmcmFnbWVudC5xdWVyeVNlbGVjdG9yKCcjaHJ6LWNvbnRhaW5lcicpKTsKICAgIENPTlRBSU5FUi5jc3MoewogICAgICAgICdkaXNwbGF5JzogJ25vbmUnLCAvLyBzZXR0aW5nIGRpc3BsYXk6bm9uZSBjb25zaWRlcmFibHkgc3BlZWRzIHVwIHJlbmRlcmluZwogICAgICAgICd0b3AnOiAwLAogICAgICAgICdsZWZ0JzogMAogICAgfSk7CiAgICBWSUVXUE9SVF9IRUlHSFQgPSAkKHdpbmRvdykuaGVpZ2h0KCkgLSBPUFRJT05TLnBhZ2VNYXJnaW4gKiAyOwoKICAgIGRpc3BsYXlMb2FkaW5nSW5kaWNhdG9yKCkudGhlbihmdW5jdGlvbigpIHsKICAgICAgICAvLyBhIHNldFRpbWVvdXQgaXMgdXNlZCB0byBmb3JjZSBhc3luYyBleGVjdXRpb24gYW5kIGFsbG93IHRoZSBsb2FkaW5nSW5kaWNhdG9yIHRvIGRpc3BsYXkgYmVmb3JlIHRoZQogICAgICAgIC8vIGhlYXZ5IGNvbXB1dGF0aW9ucyBvZiBjb21wb3NlUGFnZSgpIGFyZSBiZWd1bi4KICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgaWYgKCFPUFRJT05TLmRpc3BsYXlTY3JvbGxiYXIpIHsKICAgICAgICAgICAgICAgICQoJ2JvZHknKS5jc3MoJ292ZXJmbG93LXknLCAnaGlkZGVuJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBhbGxOb2RlcyA9IG5ldyBOb2RlQ29sbGVjdGlvbihPUFRJT05TLnNlbGVjdG9yKTsKCiAgICAgICAgICAgIFBBR0VfQ09MTEVDVElPTiA9IHBhZ2VDb2xsZWN0aW9uR2VuZXJhdG9yLmZyb21Ob2RlQ29sbGVjdGlvbihhbGxOb2Rlcyk7CiAgICAgICAgICAgIFBBR0VfQ09MTEVDVElPTi5hcHBlbmRUb0RvbShjdXJyZW50U2Nyb2xsKTsKCiAgICAgICAgICAgIC8vIHJlbW92ZSBhbnkgRE9NIG5vZGVzIHRoYXQgYXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUgc2VsZWN0b3IsCiAgICAgICAgICAgIC8vIHNpbmNlIHRoZXkgd2lsbCBqdXN0IGJlIGxlZnQgZmxvYXRpbmcgYXJvdW5kIGluIHRoZSB3cm9uZyBwbGFjZS4KICAgICAgICAgICAgQ09OVEFJTkVSLmNoaWxkcmVuKCkubm90KCcuaHJ6LXBhZ2UnKS5maWx0ZXIoJzp2aXNpYmxlJykucmVtb3ZlKCk7CiAgICAgICAgICAgIFJPT1QuZW1wdHkoKS5hcHBlbmQoZnJhZ21lbnQpOwoKICAgICAgICAgICAgLy8gYWRkIHRoZSB0aGVtZSdzIGN1c3RvbSBDU1MgdG8gdGhlIGRvY3VtZW50IG5vdyBzbyB0aGF0IGl0IGNhbiBiZQogICAgICAgICAgICAvLyB1c2VkIGluIGNhbGN1bGF0aW5nIHRoZSBlbGVtZW50cycgc3R5bGVzLgogICAgICAgICAgICBhZGRDdXN0b21Dc3NUb0RvY3VtZW50KCk7CgogICAgICAgICAgICBQQUdFX0NPTExFQ1RJT04uZm9yRWFjaChmdW5jdGlvbihwYWdlKSB7CiAgICAgICAgICAgICAgICBwYWdlLm5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSkgewogICAgICAgICAgICAgICAgICAgbm9kZS5yZW5kZXJTdHlsZXMocGFnZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBDT05UQUlORVIuY3NzKCdkaXNwbGF5JywgJycpOwoKICAgICAgICAgICAgdmFyIGRvY3VtZW50SGVpZ2h0ID0gUEFHRV9DT0xMRUNUSU9OLmxhc3QoKS5ib3R0b20gLyBPUFRJT05TLnNjcm9sbGJhclNob3J0ZW5SYXRpbyArIFZJRVdQT1JUX0hFSUdIVDsKICAgICAgICAgICAgUk9PVC5oZWlnaHQoZG9jdW1lbnRIZWlnaHQpOwogICAgICAgICAgICByZW5kZXJQYWdlQ291bnQoKTsKICAgICAgICAgICAgcmVtb3ZlTG9hZGluZ0luZGljYXRvcigpOwogICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7CiAgICAgICAgfSwgMCk7CiAgICB9KTsKCiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpOwp9CgovKioKICogQWRkIHRoZSBDU1MgdGV4dCBsb2FkZWQgYnkgbG9hZEN1c3RvbUNzcygpIGludG8gdGhlIGRvY3VtZW50IGhlYWQuCiAqLwpmdW5jdGlvbiBhZGRDdXN0b21Dc3NUb0RvY3VtZW50KCkgewogICAgdmFyICRjdXN0b21Dc3NFbGVtZW50ID0gJCgnI2hyei1jdXN0b20tY3NzJyk7CiAgICBpZiAoMCA8ICRjdXN0b21Dc3NFbGVtZW50Lmxlbmd0aCkgewogICAgICAgICRjdXN0b21Dc3NFbGVtZW50LnRleHQoQ1VTVE9NX0NTUyk7CiAgICB9IGVsc2UgewogICAgICAgICQoJ2hlYWQnKS5hcHBlbmQoJzxzdHlsZSBpZD0iaHJ6LWN1c3RvbS1jc3MiIHR5cGU9InRleHQvY3NzIj4nICsgQ1VTVE9NX0NTUyArICc8L3N0eWxlPicpOwogICAgfQp9CgovKioKICogQnVpbGRpbmcgdXAgYSBkb2N1bWVudEZyYWdtZW50IGFuZCB0aGVuIGFwcGVuZGluZyBpdCBhbGwgYXQgb25jZSB0byB0aGUgRE9NCiAqIGlzIGRvbmUgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS4KICogQHJldHVybnMgeyp9CiAqLwpmdW5jdGlvbiBjcmVhdGVEb2N1bWVudEZyYWdtZW50KCkgewogICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwogICAgdmFyIGNvbnRhaW5lckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgY29udGFpbmVyRGl2LmlkID0gJ2hyei1jb250YWluZXInOwogICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyRGl2KTsKICAgIHJldHVybiBmcmFnbWVudDsKfQoKZnVuY3Rpb24gZGlzcGxheUxvYWRpbmdJbmRpY2F0b3IoKSB7CiAgICB2YXIgZGVmZXJyZWQgPSBuZXcgJC5EZWZlcnJlZCgpOwogICAgaWYgKCQoJy5ocnotbG9hZGluZy1pbmRpY2F0b3InKS5sZW5ndGggPT09IDApIHsKICAgICAgICAkKCdib2R5JykuYXBwZW5kKCc8ZGl2IGNsYXNzPSJocnotbG9hZGluZy1pbmRpY2F0b3IiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij48cCBjbGFzcz0iaHJ6LWxvYWRpbmctaW5kaWNhdG9yIj5Mb2FkaW5nLi4uPC9wPjwvZGl2PicpOwogICAgICAgICQoJ2Rpdi5ocnotbG9hZGluZy1pbmRpY2F0b3InKS5mYWRlSW4oNTAsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7CiAgICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpOwp9CgpmdW5jdGlvbiByZW1vdmVMb2FkaW5nSW5kaWNhdG9yKCkgewogICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAkKCdkaXYuaHJ6LWxvYWRpbmctaW5kaWNhdG9yJykuZmFkZU91dCg1MCwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7CiAgICAgICAgfSk7CiAgICB9LCAzMDApOwp9CgpmdW5jdGlvbiByZW5kZXJQYWdlQ291bnQoKSB7CiAgICBpZiAoJCgnLmhyei1wYWdlLWNvdW50JykubGVuZ3RoID09PSAwKSB7CiAgICAgICAgdmFyIHBhZ2VDb3VudERpdiA9ICQoJzxkaXYgY2xhc3M9Imhyei1wYWdlLWNvdW50Ij48L2Rpdj4nKTsKICAgICAgICAkKCdib2R5JykuYXBwZW5kKHBhZ2VDb3VudERpdik7CiAgICAgICAgcGFnZUNvdW50RGl2LmFwcGVuZCgnPHNwYW4gaWQ9Imhyei1jdXJyZW50LXBhZ2UiPjwvc3Bhbj4gLyA8c3BhbiBpZD0iaHJ6LXRvdGFsLXBhZ2VzIj48L3NwYW4+Jyk7CiAgICAgICAgJCgnI2hyei10b3RhbC1wYWdlcycpLmh0bWwoUEFHRV9DT0xMRUNUSU9OLmxlbmd0aCk7CiAgICAgICAgaWYgKCFPUFRJT05TLmRpc3BsYXlQYWdlQ291bnQpIHsKICAgICAgICAgICAgcGFnZUNvdW50RGl2LmFkZENsYXNzKCdoaWRkZW4nKTsKICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIHJlbW92ZVBhZ2VDb3VudCgpIHsKICAgICQoJy5ocnotcGFnZS1jb3VudCcpLnJlbW92ZSgpOwp9CgpmdW5jdGlvbiB1cGRhdGVQYWdlQ291bnQoKSB7CiAgICAkKCcjaHJ6LWN1cnJlbnQtcGFnZScpLmh0bWwoUEFHRV9DT0xMRUNUSU9OLmN1cnJlbnRQYWdlKTsKfQoKLyoqCiAqICsgSm9uYXMgUmFvbmkgU29hcmVzIFNpbHZhCiAqIEAgaHR0cDovL2pzZnJvbWhlbGwuY29tL2FycmF5L3NodWZmbGUgW3YxLjBdCiAqIEBwYXJhbSBvCiAqIEByZXR1cm5zIHsqfQogKi8KZnVuY3Rpb24gc2h1ZmZsZShvKXsKICAgIGZvcih2YXIgaiwgeCwgaSA9IG8ubGVuZ3RoOyBpOyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaSksIHggPSBvWy0taV0sIG9baV0gPSBvW2pdLCBvW2pdID0geCk7CiAgICByZXR1cm4gbzsKfQoKZnVuY3Rpb24gbm9vcCgpIHt9Ci8qKgogKiBXaGVuIHRoZSB3aW5kb3cgaXMgcmUtc2l6ZWQsIHdlIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZSBsYXlvdXQgb2YgdGhlIGFsbCB0aGUgZWxlbWVudHMuCiAqIFRvIGVuc3VyZSB0aGF0IHdlIGdldCB0aGUgc2FtZSByZXN1bHRzIGFzIHRoZSBpbml0aWFsIGxvYWQsIHdlIHNpbXBsZSBwdXJnZSB0aGUgZW50aXJlIFJPT1QgZWxlbWVudAogKiBhbmQgcmVwbGFjZSBpdCB3aXRoIHRoZSBjbG9uZSB0aGF0IHdlIG1hZGUgcmlnaHQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbml0KCkgbWV0aG9kLgogKi8KZnVuY3Rpb24gcmVzaXplSGFuZGxlcigpIHsKICAgIGRlYm91bmNlKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBjdXJyZW50U2Nyb2xsID0gUEFHRV9DT0xMRUNUSU9OLmdldEN1cnJlbnQoKS5ub2Rlc1swXS5sYXlvdXQudG9wIC8gT1BUSU9OUy5zY3JvbGxiYXJTaG9ydGVuUmF0aW87CiAgICAgICAgUk9PVC5yZXBsYWNlV2l0aChST09UX0NMT05FLmNsb25lKCkpOwogICAgICAgIGNvbXBvc2VQYWdlKGN1cnJlbnRTY3JvbGwpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICQod2luZG93KS5zY3JvbGxUb3AoY3VycmVudFNjcm9sbCk7CiAgICAgICAgICAgIHVwZGF0ZVBhZ2VDb3VudCgpOwogICAgICAgICAgICBPUFRJT05TLm9uUmVzaXplKCk7CiAgICAgICAgfSk7CiAgICB9LCAyNTApKCk7Cn0KCi8qKgogKiBBbGxvdyBrZXlib2FyZCBwYWdpbmcgd2l0aCB0aGUgYXJyb3cga2V5cy4KICogQHBhcmFtIGUKICovCmZ1bmN0aW9uIGtleWRvd25IYW5kbGVyKGUpIHsKICAgIGlmIChlLndoaWNoID09PSA0MCB8fCBlLndoaWNoID09PSAzOSkgewogICAgICAgIHNjcm9sbFRvTmV4dFBhZ2UoKTsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT09IDM4IHx8IGUud2hpY2ggPT09IDM3KSB7CiAgICAgICAgc2Nyb2xsVG9QcmV2aW91c1BhZ2UoKTsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB9Cn0KCi8qKgogKiBXaGVuIHRoZSB2ZXJ0aWNhbCBzY3JvbGxiYXIgaXMgZW5hYmxlZCwgd2Ugd2FudCB0byB0cmlnZ2VyIHBhZ2UgY2hhbmdlcyBhdCB0aGUgYXBwcm9wcmlhdGUgcG9pbnRzLAogKiB3aGVyZSB0aGF0IHBhZ2Ugd291bGQgaGF2ZSBiZWVuIGluIGEgcmVndWxhciBzY3JvbGxpbmcgSFRNTCBwYWdlLgogKi8KZnVuY3Rpb24gc2Nyb2xsSGFuZGxlcigpIHsKICAgIGlmICh0eXBlb2YgUEFHRV9DT0xMRUNUSU9OICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIHZhciBzY3JvbGxUb3AgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7CiAgICAgICAgdmFyIGN1cnJlbnRQYWdlTnVtYmVyID0gUEFHRV9DT0xMRUNUSU9OLmN1cnJlbnRQYWdlOwoKICAgICAgICB2YXIgbmV3UGFnZU51bWJlciA9IFBBR0VfQ09MTEVDVElPTi5nZXRQYWdlQXRPZmZzZXQoc2Nyb2xsVG9wICogT1BUSU9OUy5zY3JvbGxiYXJTaG9ydGVuUmF0aW8pLnBhZ2VOdW1iZXI7CiAgICAgICAgaWYgKG5ld1BhZ2VOdW1iZXIgIT09IGN1cnJlbnRQYWdlTnVtYmVyKSB7CiAgICAgICAgICAgIFBBR0VfQ09MTEVDVElPTi5zaG93UGFnZShuZXdQYWdlTnVtYmVyKTsKICAgICAgICAgICAgdXBkYXRlUGFnZUNvdW50KCk7CiAgICAgICAgfQogICAgfQp9Cgp2YXIgX21vdXNld2hlZWxMYXN0RXZlbnQ7Ci8qKgogKiBIYW5kbGVyIHRvIHRocm90dGxlIHRoZSBhY3Rpb24gb2YgYSBzY3JvbGwgd2hlZWwgb24gYSBtb3VzZS9sYXB0b3AgdHJhY2twYWQuIFRoaXMgcHJldmVudHMKICogcGFnZXMgYmVpbmcgc2tpcHBlZCB3aGVuIGEgZmFzdCBzY3JvbGwgbW90aW9uIGlzIHBlcmZvcm1lZC4KICogQHBhcmFtIGUKICovCmZ1bmN0aW9uIG1vdXNld2hlZWxIYW5kbGVyKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKCiAgICB2YXIgbm93ID0gIG5ldyBEYXRlKCkuZ2V0VGltZSgpOwoKICAgIGlmICgyNTAgPCBub3cgLSBfbW91c2V3aGVlbExhc3RFdmVudCB8fCAhX21vdXNld2hlZWxMYXN0RXZlbnQpIHsKICAgICAgICB2YXIgZGVsdGFZID0gZS5vcmlnaW5hbEV2ZW50LmRlbHRhWTsKICAgICAgICBfbW91c2V3aGVlbExhc3RFdmVudCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwoKICAgICAgICBpZiAoZGVsdGFZIDwgMCkgewogICAgICAgICAgICBzY3JvbGxUb1ByZXZpb3VzUGFnZSgpOwogICAgICAgIH0gZWxzZSBpZiAoMCA8IGRlbHRhWSkgewogICAgICAgICAgICBzY3JvbGxUb05leHRQYWdlKCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoMjUwIDwgbm93IC0gX21vdXNld2hlZWxMYXN0RXZlbnQpIHsKICAgICAgICAgICAgX21vdXNld2hlZWxMYXN0RXZlbnQgPSBudWxsOwogICAgICAgIH0KICAgIH0KfQoKLyoqCiAqIFRvIGFsbG93IFVSTCBmcmFnbWVudHMgKCMpIHRvIHdvcmssIHdlIG5lZWQgdG8gZmluZCB0aGUgbG9jYXRpb24gb2YgdGhlIGVsZW1lbnQgd2l0aCB0aGUgSUQKICogbWF0Y2hpbmcgdGhlIGZyYWdtZW50LCBmaWd1cmUgb3V0IHdoYXQgcGFnZSBpdCBpcyBvbiwgYW5kIHRoZW4gZ28gdG8gdGhhdCBwYWdlLgogKi8KZnVuY3Rpb24gaGFzaENoYW5nZUhhbmRsZXIoKSB7CiAgICB2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoOwogICAgaWYgKGhhc2ggIT09ICcnKSB7CiAgICAgICAgdmFyIHBhZ2UgPSAkKGhhc2gpLmNsb3Nlc3QoJy5ocnotcGFnZScpOwogICAgICAgIHZhciBwYWdlTnVtYmVyID0gcGFyc2VJbnQocGFnZS5hdHRyKCdpZCcpLnJlcGxhY2UoL15cRCsvZywgJycpKTsKICAgICAgICBQQUdFX0NPTExFQ1RJT04uc2hvd1BhZ2UocGFnZU51bWJlcik7CiAgICAgICAgJCh3aW5kb3cpLnNjcm9sbFRvcChQQUdFX0NPTExFQ1RJT04uZ2V0Q3VycmVudCgpLm1pZFBvaW50KTsKICAgICAgICB1cGRhdGVQYWdlQ291bnQoKTsKICAgIH0KfQoKLyoqCiAqIFRoaXMgZXZlbnQgaGFuZGxlciBpcyBmb3IgdGhlIHBhcnRpY3VsYXIgc2NlbmFyaW8gb2Ygd2hlbiBhIGxpbmsgdG8gYSBVUkwgZnJhZ21lbnQgaW4gdGhpcyBkb2N1bWVudCBpcyBjbGlja2VkLAogKiBidXQgdGhhdCBmcmFnbWVudCBpcyBhbHJlYWR5IGluIHRoZSBoYXNoIHBhcnQgb2YgdGhlIHdpbmRvdy5sb2NhdGlvbi4gSW4gdGhpcyBjYXNlLCB0aGUgaGFzaCB3aWxsIG5vdCBjaGFuZ2Ugc28KICogd2UgbmVlZCB0byBtYW51YWxseSB0cmlnZ2VyIHRoZSBoYXNoY2hhbmdlIGV2ZW50IHRvIHNpbXVsYXRlIHRoZSBleHBlY3RlZCBiZWhhdmlvdXIuCiAqLwpmdW5jdGlvbiBsaW5rSGFuZGxlcihlKSB7CiAgICB2YXIgY3VycmVudEhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDsKICAgIGlmIChjdXJyZW50SGFzaCAhPT0gJycpIHsKICAgICAgICB2YXIgdXJsID0gJCh0aGlzKS5hdHRyKCdocmVmJyk7CiAgICAgICAgaWYgKHVybC5zdWJzdHIoMCwgMSkgPT09ICcjJykgewogICAgICAgICAgICBpZiAodXJsID09PSBjdXJyZW50SGFzaCkgewogICAgICAgICAgICAgICAgaGFzaENoYW5nZUhhbmRsZXIoKTsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKdmFyIF90b3VjaFN0YXJ0UG9zOwp2YXIgX3RvdWNoU3RhcnRUaW1lOwovKioKICogQXQgdGhlIHN0YXJ0IG9mIGEgdG91Y2ggd2Ugc2ltcGx5IG5lZWQgdG8gcmVjb3JkIHRoZSB0aW1lIGFuZCBwb3NpdGlvbiBvZiB0aGUgdG91Y2gsCiAqIHRvIHVzZSBsYXRlciBpbiB3b3JraW5nIG91dCBob3cgdG8gaGFuZGxlIGl0LgogKiBAcGFyYW0gZQogKi8KZnVuY3Rpb24gdG91Y2hzdGFydEhhbmRsZXIoZSkgewogICAgaWYgKGlzVmFsaWRUb3VjaEV2ZW50KGUpKSB7CiAgICAgICAgX3RvdWNoU3RhcnRQb3MgPSAgewogICAgICAgICAgICB4OiBnZXRUb3VjaFgoZSksCiAgICAgICAgICAgIHk6IGdldFRvdWNoWShlKQogICAgICAgIH07CiAgICAgICAgX3RvdWNoU3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICB9Cn0KCi8qKgogKiBXZSBwcmV2ZW50IHRoZSBkZWZhdWx0IHRvdWNobW92ZSBiZWhhdmlvdXIgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRoZSBwYWdlIHRvIHNjcm9sbCBuYXR1cmFsbHkgLSB3ZQogKiB3YW50IHRvIGNvbnRyb2wgdGhlIHNjcm9sbGluZyBwcm9ncmFtbWF0aWNhbGx5IHRvIGVuc3VyZSBvbmx5IG9uZSBwYWdlIGlzIGFkdmFuY2VkIHBlciBzd2lwZS4KICogQHBhcmFtIGUKICovCmZ1bmN0aW9uIHRvdWNobW92ZUhhbmRsZXIoZSkgewogICAgaWYgKGlzVmFsaWRUb3VjaEV2ZW50KGUpKSB7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICB2YXIgdG91Y2hFbmRQb3MgPSB7CiAgICAgICAgICAgIHg6IGdldFRvdWNoWChlKSwKICAgICAgICAgICAgeTogZ2V0VG91Y2hZKGUpCiAgICAgICAgfTsKICAgICAgICB2YXIgdG91Y2hFbmRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CgogICAgICAgIGlmIChpc1ZhbGlkU3dpcGUoX3RvdWNoU3RhcnRUaW1lLCB0b3VjaEVuZFRpbWUsIF90b3VjaFN0YXJ0UG9zLCB0b3VjaEVuZFBvcykpIHsKICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGdldFN3aXBlRGlyZWN0aW9uKF90b3VjaFN0YXJ0UG9zLCB0b3VjaEVuZFBvcyk7CiAgICAgICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7CiAgICAgICAgICAgICAgICBjYXNlICd1cCc6CiAgICAgICAgICAgICAgICAgICAgQ09OVEFJTkVSLmNzcygndG9wJywgJy0zMHB4Jyk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICdkb3duJzoKICAgICAgICAgICAgICAgICAgICBDT05UQUlORVIuY3NzKCd0b3AnLCAnMzBweCcpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6CiAgICAgICAgICAgICAgICAgICAgQ09OVEFJTkVSLmNzcygnbGVmdCcsICctMzBweCcpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOgogICAgICAgICAgICAgICAgICAgIENPTlRBSU5FUi5jc3MoJ2xlZnQnLCAnMzBweCcpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgovKioKICogQXQgdGhlIGVuZCBvZiB0aGUgdG91Y2gsIHdlIGFnYWluIHJlY29yZCB0aGUgdGltZSBhbmQgcG9zaXRpb24sIGFuZCB0aGVuIHVzZSB0aGVzZSBkYXRhIHRvIGZpZ3VyZSBvdXQKICogaWYgd2Ugc2hvdWxkIHRyZWF0IHRoaXMgYXMgYSAic3dpcGUiLCBhbmQgaWYgc28sIGluIHdoYXQgZGlyZWN0aW9uIHRoZSBzd2lwZSB3YXMuIFRoZW4gd2UgY2FuCiAqIG1vdmUgdG8gdGhlIG5leHQgb3IgcHJldmlvdXMgcGFnZSBhcyBhcHByb3ByaWF0ZS4KICogQHBhcmFtIGUKICovCmZ1bmN0aW9uIHRvdWNoZW5kSGFuZGxlcihlKSB7CiAgICBpZiAoaXNWYWxpZFRvdWNoRXZlbnQoZSkpIHsKICAgICAgICB2YXIgc2Nyb2xsVG87CiAgICAgICAgdmFyIHRvdWNoRW5kUG9zID0gewogICAgICAgICAgICB4OiBnZXRUb3VjaFgoZSksCiAgICAgICAgICAgIHk6IGdldFRvdWNoWShlKQogICAgICAgIH07CiAgICAgICAgdmFyIHRvdWNoRW5kVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwoKICAgICAgICBDT05UQUlORVIuY3NzKCd0b3AnLCAnMHB4Jyk7CiAgICAgICAgQ09OVEFJTkVSLmNzcygnbGVmdCcsICcwcHgnKTsKCiAgICAgICAgaWYgKGlzVmFsaWRTd2lwZShfdG91Y2hTdGFydFRpbWUsIHRvdWNoRW5kVGltZSwgX3RvdWNoU3RhcnRQb3MsIHRvdWNoRW5kUG9zKSkgewogICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gZ2V0U3dpcGVEaXJlY3Rpb24oX3RvdWNoU3RhcnRQb3MsIHRvdWNoRW5kUG9zKTsKICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gImRvd24iIHx8IGRpcmVjdGlvbiA9PT0gInJpZ2h0IikgewogICAgICAgICAgICAgICAgc2Nyb2xsVG9QcmV2aW91c1BhZ2UoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNjcm9sbFRvTmV4dFBhZ2UoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsVG9wKHNjcm9sbFRvKTsKICAgICAgICB9CiAgICB9Cn0KCi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci8vCi8vIFV0aWxpdHkgZnVuY3Rpb25zIHVzZWQgYnkgdGhlIGV2ZW50IGhhbmRsZXJzCi8vCi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgovKioKICogVGhlIHdheSB0aGUgZXZlbnQgaGFuZGxlcnMgY2hhbmdlIGZyb20gb25lIHBhZ2UgdG8gdGhlIG5leHQgaXMgYnkKICogc2V0dGluZyB0aGUgdmFsdWUgb2Ygd2luZG93LnNjcm9sbFRvcCwgYW5kIHRoZW4gbGV0dGluZyB0aGUKICogc2Nyb2xsIGhhbmRsZXIgdGFrZSBjYXJlIG9mIGFjdHVhbGx5IGRvaW5nIHRoZSB0cmFuc2l0aW9uCiAqLwpmdW5jdGlvbiBzY3JvbGxUb05leHRQYWdlKCkgewogICAgdmFyIHNjcm9sbFRvOwogICAgaWYgKFBBR0VfQ09MTEVDVElPTi5jdXJyZW50UGFnZSA8IFBBR0VfQ09MTEVDVElPTi5sZW5ndGgpIHsKICAgICAgICBzY3JvbGxUbyA9IFBBR0VfQ09MTEVDVElPTi5nZXROZXh0KCkubWlkUG9pbnQ7CiAgICAgICAgJCh3aW5kb3cpLnNjcm9sbFRvcChzY3JvbGxUbyk7CiAgICB9Cn0KCmZ1bmN0aW9uIHNjcm9sbFRvUHJldmlvdXNQYWdlKCkgewogICAgdmFyIHNjcm9sbFRvOwogICAgaWYgKFBBR0VfQ09MTEVDVElPTi5jdXJyZW50UGFnZSA9PT0gMikgewogICAgICAgIHNjcm9sbFRvID0gMDsKICAgIH0gZWxzZSBpZiAoMSA8IFBBR0VfQ09MTEVDVElPTi5jdXJyZW50UGFnZSkgewogICAgICAgIHNjcm9sbFRvID0gUEFHRV9DT0xMRUNUSU9OLmdldFByZXZpb3VzKCkubWlkUG9pbnQ7CiAgICB9CiAgICBpZiAodHlwZW9mIHNjcm9sbFRvICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICQod2luZG93KS5zY3JvbGxUb3Aoc2Nyb2xsVG8pOwogICAgfQp9CgovKioKICogV2Ugd2FudCB0byBwcmV2ZW50IHRoZSByZXNpemVIYW5kbGVyIGJlaW5nIGNhbGxlZCB0b28gb2Z0ZW4gYXMgdGhlIHBhZ2UgaXMgcmUtc2l6ZWQuCiAqIEBwYXJhbSBmdW4KICogQHBhcmFtIG1pbAogKiBAcmV0dXJucyB7RnVuY3Rpb259CiAqLwpmdW5jdGlvbiBkZWJvdW5jZShmdW4sIG1pbCl7CiAgICB2YXIgdGltZXI7CiAgICByZXR1cm4gZnVuY3Rpb24oKXsKICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpOwogICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICBmdW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgICB9LCBtaWwpOwogICAgfTsKfQoKLyoqCiAqIEludGVybmV0IEV4cGxvcmVyIHVzZXMgdGhlIFBvaW50ZXIgRXZlbnRzIG1vZGVsIGZvciBib3RoIHRvdWNoIGFuZCBtb3VzZSBldmVudHMuIFRoZXJlZm9yZSwgd2hlbiB3ZSBiaW5kIHRvIHRoZQogKiAncG9pbnRlcmRvd24nLCAncG9pbnRlcnVwJyBldGMuIGV2ZW50cywgdGhleSB3aWxsIGFsc28gYmUgZmlyZWQgd2hlbiB0aGUgbW91c2UgaXMgY2xpY2tlZCwgd2hpY2ggd2UgZG8gbm90IHdhbnQuCiAqIFRoZXJlZm9yZSB3ZSBmaWx0ZXIgb3V0IHRoZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIGJ5IG1vdXNlLgogKiBAcGFyYW0gZQogKiBAcmV0dXJucyB7Ym9vbGVhbn0KICovCmZ1bmN0aW9uIGlzVmFsaWRUb3VjaEV2ZW50KGUpIHsKICAgIGlmIChlLm9yaWdpbmFsRXZlbnQuaGFzT3duUHJvcGVydHkoJ3BvaW50ZXJUeXBlJykpIHsKICAgICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50LnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKfQoKLyoqCiAqIFRvIGJlIHZhbGlkLCBhIHN3aXBlIG11c3QgdHJhdmVsIGEgc3VmZmljaWVudCBkaXN0YW5jZSBhY3Jvc3MgdGhlIHNjcmVlbiAodG8gZGlzdGluZ3Vpc2ggZnJvbSBzbG9wcHkKICogY2xpY2tzKSwgYW5kIG11c3QgYmUgZmFpcmx5IGZhc3QgKHRvIGRpc3Rpbmd1aXNoIGZyb20gaGlnaGxpZ2h0aW5nIHRleHQgYXR0ZW1wdHMpCiAqIEBwYXJhbSBzdGFydFRpbWUKICogQHBhcmFtIGVuZFRpbWUKICogQHBhcmFtIHN0YXJ0UG9zCiAqIEBwYXJhbSBlbmRQb3MKICovCmZ1bmN0aW9uIGlzVmFsaWRTd2lwZShzdGFydFRpbWUsIGVuZFRpbWUsIHN0YXJ0UG9zLCBlbmRQb3MpIHsKICAgIHZhciBNQVhfSU5URVJWQUwgPSA3MDA7CiAgICB2YXIgTUlOX0RJU1RBTkNFID0gNzU7CiAgICB2YXIgdGltZUludGVydmFsID0gZW5kVGltZSAtIHN0YXJ0VGltZTsKICAgIHZhciBkWCA9IGVuZFBvcy54IC0gc3RhcnRQb3MueDsKICAgIHZhciBkWSA9IGVuZFBvcy55IC0gc3RhcnRQb3MueTsKICAgIHZhciBzd2lwZURpc3RhbmNlID0gTWF0aC5zcXJ0KGRYICogZFggKyBkWSAqIGRZKTsKCiAgICBpZiAoTUFYX0lOVEVSVkFMIDwgdGltZUludGVydmFsIHx8CiAgICAgICAgc3dpcGVEaXN0YW5jZSA8IE1JTl9ESVNUQU5DRSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0KCi8qKgogKiBHaXZlbiBhIHBhaXIgb2YgY29vcmRpbmF0ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbnMgb2YgdGhlIHN3aXBlLCB3ZSBjYW4KICogY2FsY3VsYXRlIGEgdmVjdG9yIGFuZCBpdHMgYW5nbGUgcmVsYXRpdmUgdG8gdGhlIHgtYXhpcy4gVXNpbmcgdGhpcyBpbmZvcm1hdGlvbiB3ZSBjYW4gZmlndXJlCiAqIG91dCB0aGUgZGlyZWN0aW9uIG9mIHRoZSBzd2lwZSAodXAsIGRvd24sIGxlZnQgb3IgcmlnaHQpLgogKiBAcGFyYW0gc3RhcnRQb3MKICogQHBhcmFtIGVuZFBvcwogKiBAcmV0dXJucyB7Kn0KICovCmZ1bmN0aW9uIGdldFN3aXBlRGlyZWN0aW9uKHN0YXJ0UG9zLCBlbmRQb3MpIHsKICAgIHZhciBkWCA9IGVuZFBvcy54IC0gc3RhcnRQb3MueDsKICAgIHZhciBkWSA9IGVuZFBvcy55IC0gc3RhcnRQb3MueTsKICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIoZFksIGRYKTsKICAgIHZhciBkaXJlY3Rpb247CiAgICBpZiAoLU1hdGguUEkvNCA8IGFuZ2xlICYmIGFuZ2xlIDw9IE1hdGguUEkvNCkgewogICAgICAgIGRpcmVjdGlvbiA9ICJyaWdodCI7CiAgICB9IGVsc2UgaWYgKC0zLzQqTWF0aC5QSSA8IGFuZ2xlICYmIGFuZ2xlIDw9IC1NYXRoLlBJLzQpIHsKICAgICAgICBkaXJlY3Rpb24gPSAidXAiOwogICAgfSBlbHNlIGlmICgzLzQqTWF0aC5QSSA8IGFuZ2xlIHx8IGFuZ2xlIDwgLTMvNCpNYXRoLlBJKSB7CiAgICAgICAgZGlyZWN0aW9uID0gImxlZnQiOwogICAgfSBlbHNlIHsKICAgICAgICBkaXJlY3Rpb24gPSAiZG93biI7CiAgICB9CiAgICByZXR1cm4gZGlyZWN0aW9uOwp9CgovKioKICogSW50ZXJuZXQgRXhwbG9yZXIgdXNlcyBhIGRpZmZlcmVudCBtb2RlbCBmb3IgdG91Y2ggZXZlbnRzIGZyb20gV2Via2l0IGJyb3dzZXJzIGFuZCBvdGhlcnMsCiAqIHNvIHdlIG5lZWQgdG8gZG8gYSBzbWFsbCBjaGVjayB0byBnZXQgdGhlIGNvcnJlY3QgcG9zaXRpb25zIG9mIHRvdWNoIGV2ZW50cy4KICogQHBhcmFtIGUKICogQHJldHVybnMgeyp9CiAqLwpmdW5jdGlvbiBnZXRUb3VjaFgoZSkgewogICAgdmFyIHg7CiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50Lmhhc093blByb3BlcnR5KCdjaGFuZ2VkVG91Y2hlcycpKSB7CiAgICAgICAgeCA9IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYOwogICAgfSBlbHNlIHsKICAgICAgICB4ID0gZS5vcmlnaW5hbEV2ZW50LmNsaWVudFg7CiAgICB9CiAgICByZXR1cm4geDsKfQoKZnVuY3Rpb24gZ2V0VG91Y2hZKGUpIHsKICAgIHZhciB5OwogICAgaWYgKGUub3JpZ2luYWxFdmVudC5oYXNPd25Qcm9wZXJ0eSgnY2hhbmdlZFRvdWNoZXMnKSkgewogICAgICAgIHkgPSBlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WTsKICAgIH0gZWxzZSB7CiAgICAgICAgeSA9IGUub3JpZ2luYWxFdmVudC5jbGllbnRZOwogICAgfQogICAgcmV0dXJuIHk7Cn0KLyoqCiAqIEEgaGVscGVyIHNlcnZpY2UgZm9yIEphdmFTY3JpcHQtYmFzZWQgdHJhbnNpdGlvbiBhbmltYXRpb25zLiBVc2luZyB0aGlzIHNlcnZpY2UgZW5zdXJlcyB0aGF0IG9ubHkgYSBzaW5nbGUKICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGxvb3AgaXMgY3JlYXRlZCwgYW5kIGFsbCBhbmltYXRpb24gZnVuY3Rpb25zIGFyZSBleGVjdXRlZCB3aXRoaW4gdGhpcyBzaW5nbGUgbG9vcC4KICoKICogVGhlIGBhbmltYXRvcmAgb2JqZWN0IGlzIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgY2FsbGJhY2sgZnVuY3Rpb25zIGRlZmluZWQgaW4gdGhlIGNvbmZpZyBvYmplY3QuCiAqLwp2YXIgYW5pbWF0b3IgPSBmdW5jdGlvbigpIHsKICAgIHZhciBtb2R1bGUgPSB7fTsKICAgIHZhciBhbmltYXRpb25GdW5jdGlvbnMgPSBbXTsKCiAgICBtb2R1bGUuc3RhcnQgPSBmdW5jdGlvbihmbikgewogICAgICAgIGFuaW1hdGlvbkZ1bmN0aW9ucy5wdXNoKGZuKTsKICAgICAgICBpZiAoYW5pbWF0aW9uRnVuY3Rpb25zLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spOwogICAgICAgIH0KICAgIH07CgogICAgbW9kdWxlLnN0b3AgPSBmdW5jdGlvbihmbikgewogICAgICAgIGFuaW1hdGlvbkZ1bmN0aW9ucy5zcGxpY2UoYW5pbWF0aW9uRnVuY3Rpb25zLmluZGV4T2YoZm4pLCAxKTsKICAgIH07CgogICAgZnVuY3Rpb24gdGljayh0aW1lc3RhbXApIHsKICAgICAgICBhbmltYXRpb25GdW5jdGlvbnMuZm9yRWFjaChmdW5jdGlvbihmbikgewogICAgICAgICAgICBmbi5jYWxsKGZuLCB0aW1lc3RhbXApOwogICAgICAgIH0pOwogICAgICAgIGlmICgwIDwgYW5pbWF0aW9uRnVuY3Rpb25zLmxlbmd0aCkgewogICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbW9kdWxlOwp9KCk7Ci8qKgogKiBBIE5vZGUgb2JqZWN0IHJlcHJlc2VudHMgYSBET00gZWxlbWVudC4gQW4gYWN0dWFsIHJlZmVyZW5jZSB0byB0aGUgSFRNTEVsZW1lbnQgb2JqZWN0IGlzIGNvbnRhaW5lZCBpbiB0aGUgJ2RvbU5vZGUnIHByb3BlcnR5LgogKiBAcGFyYW0gZG9tTm9kZQogKiBAcGFyYW0gaW5kZXgKICogQGNvbnN0cnVjdG9yCiAqLwpmdW5jdGlvbiBOb2RlKGRvbU5vZGUsIGluZGV4KSB7CiAgICB0aGlzLmRvbU5vZGUgPSBkb21Ob2RlOwogICAgdGhpcy5pbmRleCA9IGluZGV4OwogICAgdGhpcy5pc0Nsb25lID0gZmFsc2U7CiAgICB0aGlzLmxheW91dCA9IHRoaXMuZ2V0TGF5b3V0KCk7CiAgICB0aGlzLmlzVGFsbCA9IGZhbHNlOwogICAgdGhpcy5wYWdlT3ZlcmhhbmcgPSAwOwogICAgdGhpcy5vcmlnaW5hbENvbXB1dGVkU3R5bGUgPSB0aGlzLmNsb25lQ29tcHV0ZWRTdHlsZSgpOwogICAgdGhpcy5zdGFnZ2VyT3JkZXIgPSAwOwp9CgpOb2RlLnByb3RvdHlwZSA9IHsKCiAgICAvKioKICAgICAqIEluIG9yZGVyIHRvIGVuc3VyZSBhIGZhaXRoZnVsIHZpc3VhbCByZXByb2R1Y3Rpb24gb2YgdGhlIG9yaWdpbmFsIHBhZ2UsIGJlZm9yZSB3ZSBkbyBhbnl0aGluZyB3aXRoIHRoZSBET00sIHdlCiAgICAgKiBuZWVkIHRvIHN0b3JlIGEgY29weSBvZiAqYWxsKiBvZiB0aGUgY29tcHV0ZWQgQ1NTIHN0eWxlIHJ1bGVzIHRoYXQgYXBwbHkgdG8gdGhpcyBET00gbm9kZS4gV2Ugd2lsbCB1c2UgdGhpcwogICAgICogaW5mb3JtYXRpb24gYXQgdGhlIGZpbmFsIHJlbmRlcmluZyBzdGVwIGluIG9yZGVyIHRvIHBlcmZvcm0gYSBkaWZmIGFuZCBpbmxpbmUgYW55IGNoYW5nZWQgc3R5bGVzLgogICAgICogQHJldHVybnMgeyp9CiAgICAgKi8KICAgIGNsb25lQ29tcHV0ZWRTdHlsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGVDbG9uZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlOwogICAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5kb21Ob2RlKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXB1dGVkU3R5bGUubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIG5hbWUgPSBjb21wdXRlZFN0eWxlW2ldOwogICAgICAgICAgICBjb21wdXRlZFN0eWxlQ2xvbmUuc2V0UHJvcGVydHkobmFtZSwKICAgICAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSwKICAgICAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShuYW1lKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjb21wdXRlZFN0eWxlQ2xvbmU7CiAgICB9LAoKICAgIC8qKgogICAgICogQ2FsY3VsYXRlIHRoZSBib3VuZGluZyBib3ggYW5kIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBub2RlIGFuZCByZXR1cm4gaXQgYXMgYW4gb2JqZWN0LgogICAgICogQHJldHVybnMge3t0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyLCBib3R0b206IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXJ9fQogICAgICovCiAgICBnZXRMYXlvdXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciAkbm9kZSA9ICQodGhpcy5kb21Ob2RlKSwKICAgICAgICAgICAgbGVmdCA9ICRub2RlLm9mZnNldCgpLmxlZnQgLSBST09ULm9mZnNldCgpLmxlZnQsCiAgICAgICAgICAgIHRvcCA9ICRub2RlLm9mZnNldCgpLnRvcCAtIFJPT1Qub2Zmc2V0KCkudG9wIC0gcGFyc2VJbnQoJG5vZGUuY3NzKCdtYXJnaW4tdG9wJykpLAogICAgICAgICAgICB3aWR0aCA9ICRub2RlLndpZHRoKCkgKyBwYXJzZUludCgkbm9kZS5jc3MoJ3BhZGRpbmctbGVmdCcpKSArIHBhcnNlSW50KCRub2RlLmNzcygncGFkZGluZy1yaWdodCcpKSwKICAgICAgICAgICAgaGVpZ2h0ID0gJG5vZGUuaGVpZ2h0KCkgKyBwYXJzZUludCgkbm9kZS5jc3MoJ3BhZGRpbmctdG9wJykpICsgcGFyc2VJbnQoJG5vZGUuY3NzKCdwYWRkaW5nLWJvdHRvbScpKSwKICAgICAgICAgICAgYm90dG9tID0gdG9wICsgaGVpZ2h0OwoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICB0b3A6IHRvcCwKICAgICAgICAgICAgbGVmdDogbGVmdCwKICAgICAgICAgICAgYm90dG9tOiBib3R0b20sCiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCwKICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQKICAgICAgICB9OwogICAgfSwKCiAgICAvKioKICAgICAqIFdoZW4gYSBub2RlIGlzIG92ZXIgaGFsZiB0aGUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydCwgYW5kIGFsc28gZXh0ZW5kcyBvZmYgdGhlIGJvdHRvbSBvZiBhIGdpdmVuIHBhZ2UsCiAgICAgKiB3ZSBuZWVkIHRvIGNsb25lIGl0IGFuZCBwdXQgdGhlIGNsb25lIG9uIHRoZSBuZXh0IHBhZ2UsIHRvIGdpdmUgdGhlIGltcHJlc3Npb24gdGhhdCB0aGUgbm9kZSBpcyBzcGFubmluZwogICAgICogdHdvIChvciBtb3JlKSBwYWdlcy4gRGVwZW5kaW5nIG9uIHRoZSBoZWlnaHQgb2YgdGhlIG5vZGUsIGl0IHdpbGwgYmUgY2xvbmVkIGhvd2V2ZXIgbWFueSB0aW1lcyBhcmUKICAgICAqIHJlcXVpcmVkIHRvIGFsbG93IHRoZSBlbnRpcmUgbm9kZSB0byBiZSBkaXNwbGF5ZWQgb3ZlciBzdWNjZXNzaXZlIHBhZ2VzLgogICAgICogQHBhcmFtIGluZGV4CiAgICAgKi8KICAgIG1ha2VDbG9uZTogZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICB2YXIgY2xvbmVkRG9tTm9kZSA9ICQodGhpcy5kb21Ob2RlKS5jbG9uZSgpWzBdOwogICAgICAgIHZhciBjbG9uZSA9IG5ldyBOb2RlKGNsb25lZERvbU5vZGUsIGluZGV4KTsKICAgICAgICBjbG9uZS5sYXlvdXQgPSB7CiAgICAgICAgICAgICd0b3AnIDogdGhpcy5sYXlvdXQudG9wLAogICAgICAgICAgICAnbGVmdCcgOiB0aGlzLmxheW91dC5sZWZ0LAogICAgICAgICAgICAnd2lkdGgnIDogdGhpcy5sYXlvdXQud2lkdGgsCiAgICAgICAgICAgICdoZWlnaHQnIDogdGhpcy5sYXlvdXQuaGVpZ2h0LAogICAgICAgICAgICAnYm90dG9tJyA6IHRoaXMubGF5b3V0LmJvdHRvbQogICAgICAgIH07CiAgICAgICAgY2xvbmUuaXNDbG9uZSA9IHRydWU7CgogICAgICAgIHJldHVybiBjbG9uZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBcHBlbmQgdGhlIERPTSBub2RlIHRvIHRoZSBjb3JyZWN0IHBhZ2UgZGl2CiAgICAgKiBAcGFyYW0gcGFyZW50UGFnZQogICAgICovCiAgICBhcHBlbmRUb0RvbTogZnVuY3Rpb24ocGFyZW50UGFnZSkgewogICAgICAgICQodGhpcy5kb21Ob2RlKS5hZGRDbGFzcyhwYXJlbnRQYWdlLnBhZ2VJZCk7CiAgICAgICAgQ09OVEFJTkVSLmZpbmQoJyMnICsgcGFyZW50UGFnZS5wYWdlSWQpLmFwcGVuZCh0aGlzLmRvbU5vZGUpOwogICAgfSwKCiAgICAvKioKICAgICAqIEFwcGx5IHRoZSBDU1Mgc3R5bGVzIHRoYXQgZW5zdXJlIHRoZSBub2RlIGxvb2tzIHRoZSBzYW1lIGFzIGl0IGRpZCBpbiB0aGUKICAgICAqIG9yaWdpbmFsIGRvY3VtZW50LgogICAgICogQHBhcmFtIHBhcmVudFBhZ2UKICAgICAqLwogICAgcmVuZGVyU3R5bGVzOiBmdW5jdGlvbihwYXJlbnRQYWdlKSB7CiAgICAgICAgdGhpcy5hcHBseVN0eWxlRGlmZigpOwogICAgICAgICQodGhpcy5kb21Ob2RlKS5hZGRDbGFzcygnaHJ6LWVsZW1lbnQnKTsKICAgICAgICB0aGlzLnNldENzc1Bvc2l0aW9uKHBhcmVudFBhZ2UpOwogICAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbkRlbGF5KCk7CiAgICAgICAgdGhpcy5zZXRSZXN0b3JlUG9pbnQoKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBcHBseSB0aGUgc3R5bGUgcnVsZXMgbmVlZGVkIHRvIG1ha2UgdGhlCiAgICAgKiBET00gbm9kZSBhcHBlYXIgaWRlbnRpY2FsIHRvIHRoZSBvcmlnaW5hbCBmb3JtLgogICAgICovCiAgICBhcHBseVN0eWxlRGlmZjogZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHN0eWxlRGlmZiA9IHRoaXMuZ2V0U3R5bGVEaWZmKCk7CiAgICAgICAgJCh0aGlzLmRvbU5vZGUpLmNzcyhzdHlsZURpZmYpOwogICAgfSwKCiAgICAvKioKICAgICAqIEFwcGx5IHRoZSBhYnNvbHV0ZSBwb3NpdGlvbmluZyB0byBtYWtlIHRoZSBET00gbm9kZSBhcHBlYXIgaW4KICAgICAqIHRoZSBjb3JyZWN0IHBsYWNlIG9uIHRoZSBwYWdlLgogICAgICogQHBhcmFtIHBhcmVudFBhZ2UKICAgICAqLwogICAgc2V0Q3NzUG9zaXRpb246IGZ1bmN0aW9uKHBhcmVudFBhZ2UpIHsKICAgICAgICB2YXIgcGFnZU1hcmdpbiA9IHBhcmVudFBhZ2UucGFnZU51bWJlciA9PT0gMSA/IDAgOiBPUFRJT05TLnBhZ2VNYXJnaW47CiAgICAgICAgJCh0aGlzLmRvbU5vZGUpLmNzcyh7CiAgICAgICAgICAgICdwb3NpdGlvbic6ICdhYnNvbHV0ZScsCiAgICAgICAgICAgICd0b3AnIDogdGhpcy5sYXlvdXQudG9wIC0gcGFyZW50UGFnZS50b3AgKyBwYWdlTWFyZ2luICsgJ3B4JywKICAgICAgICAgICAgJ2xlZnQnIDogdGhpcy5sYXlvdXQubGVmdCArICdweCcsCiAgICAgICAgICAgICd3aWR0aCcgOiB0aGlzLmxheW91dC53aWR0aCArICdweCcsCiAgICAgICAgICAgICdoZWlnaHQnIDogdGhpcy5sYXlvdXQuaGVpZ2h0ICsgJ3B4JwogICAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIElmIHRoZSBzdGFnZ2VyRGVsYXkgb3B0aW9uIGlzIHNldCwgdGhlbiB3ZSBjaGVjayB0byBzZWUgaWYgdGhpcyBub2RlIGhhcyBlaXRoZXIgYSBDU1MgdHJhbnNpdGlvbiBvciBDU1MgYW5pbWF0aW9uCiAgICAgKiBzdHlsZSBydWxlIGFwcGxpZWQgdG8gaXQuIElmIHNvLCB3ZSBkeW5hbWljYWxseSBzZXQgdGhlIHRyYW5zaXRpb24tZGVsYXkgb3IgYW5pbWF0aW9uLWRlbGF5IHZhbHVlIHRvIGdpdmUgdGhlCiAgICAgKiBzdGFnZ2VyIGVmZmVjdC4KICAgICAqLwogICAgc2V0VHJhbnNpdGlvbkRlbGF5OiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgc3RhZ2dlciA9IHRoaXMuZ2V0U3RhZ2dlckRlbGF5KCk7CiAgICAgICAgaWYgKDAgPCBzdGFnZ2VyKSB7CiAgICAgICAgICAgIHZhciBjc3MgPSAkKHRoaXMuZG9tTm9kZSkuY3NzLmJpbmQoJCh0aGlzLmRvbU5vZGUpKTsKICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbklzRGVmaW5lZCA9IGV4aXN0c0FuZElzTm90WmVybyhjc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nKSkgfHwgZXhpc3RzQW5kSXNOb3RaZXJvKGNzcygnLXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uJykpOwogICAgICAgICAgICB2YXIgYW5pbWF0aW9uRHVyYXRpb25Jc0RlZmluZWQgPSBleGlzdHNBbmRJc05vdFplcm8oY3NzKCdhbmltYXRpb24tZHVyYXRpb24nKSkgfHwgZXhpc3RzQW5kSXNOb3RaZXJvKGNzcygnLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb24nKSk7CiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uRHVyYXRpb25Jc0RlZmluZWQpIHsKICAgICAgICAgICAgICAgIGNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ3RyYW5zaXRpb24tZGVsYXknOiBzdGFnZ2VyICsgJ3MnLAogICAgICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zaXRpb24tZGVsYXknOiBzdGFnZ2VyICsgJ3MnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYW5pbWF0aW9uRHVyYXRpb25Jc0RlZmluZWQpIHsKICAgICAgICAgICAgICAgIGNzcyh7CiAgICAgICAgICAgICAgICAgICAgJ2FuaW1hdGlvbi1kZWxheSc6IHN0YWdnZXIgKyAncycsCiAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtYW5pbWF0aW9uLWRlbGF5Jzogc3RhZ2dlciArICdzJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGV4aXN0c0FuZElzTm90WmVybyhwcm9wZXJ0eSkgewogICAgICAgICAgICByZXR1cm4gdHlwZW9mIHByb3BlcnR5ICE9PSAndW5kZWZpbmVkJyAmJiBwcm9wZXJ0eSAhPT0gJzBzJzsKICAgICAgICB9CiAgICB9LAoKICAgIGdldFN0YWdnZXJEZWxheTogZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGRlbGF5ID0gT1BUSU9OUy5zdGFnZ2VyRGVsYXkgKiB0aGlzLnN0YWdnZXJPcmRlcjsKICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChkZWxheSAqIDEwMCkgLyAxMDA7CiAgICB9LAoKICAgIC8qKgogICAgICogSW4gb3JkZXIgdG8gbWFrZSB0aGUgZmluYWwgcmVuZGVyZWQgRE9NIG5vZGUgYXBwZWFyIGlkZW50aWNhbCB0byBob3cgaXQgZGlkIG9uIHRoZSBvcmlnaW5hbCBwYWdlLAogICAgICogd2UgdG9vayBhIHNuYXBzaG90IG9mIGFsbCB0aGUgY29tcHV0ZWQgQ1NTIHN0eWxlcyBiZWZvcmUgbWFraW5nIGFueSBjaGFuZ2VzIHRvIHRoZSBwYWdlIGxheW91dC4KICAgICAqIE5vdyB0aGF0IHdlIGhhdmUgcmVtb3ZlZCB0aGUgRE9NIG5vZGUgZnJvbSB0aGUgb3JpZ2luYWwgcGxhY2UgaW4gdGhlIGRvY3VtZW50LCBhbnkgY2FzY2FkZWQKICAgICAqIHN0eWxlcyBmcm9tIHBhcmVudCBkaXZzIHdpbGwgaGF2ZSBiZWVuIGxvc3QuCiAgICAgKgogICAgICogVGhpcyBkaWZmIG1ldGhvZCBnZXRzIHRoZSBjdXJyZW50IGNvbXB1dGVkIENTUyBzdHlsZXMgZm9yIHRoZSBub2RlLCBhbmQgY29tcGFyZXMgdGhlbSB0byB0aGUKICAgICAqIHNuYXBzaG90IHdlIHRvb2sgd2l0aCB0aGUgY2xvbmVDb21wdXRlZFN0eWxlKCkgbWV0aG9kLiBJZiBhbnkgb2YgdGhlIHN0eWxlIHJ1bGVzIGFyZSBub3QgZXF1YWwsCiAgICAgKiB3ZSBhZGQgdGhlbSB0byB0aGUgc3R5bGVEaWZmIG9iamVjdCBzbyB3ZSBjYW4gYXBwbHkgdGhlbSBpbmxpbmUgdG8gdGhlIERPTSBub2RlLgogICAgICogQHJldHVybnMge3t9fQogICAgICovCiAgICBnZXRTdHlsZURpZmY6IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBzdHlsZURpZmYgPSB7fTsKICAgICAgICB2YXIgbmV3Q29tcHV0ZWRTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmRvbU5vZGUpOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0NvbXB1dGVkU3R5bGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBuYW1lID0gbmV3Q29tcHV0ZWRTdHlsZXNbaV07CiAgICAgICAgICAgIHZhciBvbGRQcm9wZXJ0eVZhbHVlID0gdGhpcy5vcmlnaW5hbENvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTsKCiAgICAgICAgICAgIGlmIChuZXdDb21wdXRlZFN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpICE9IG9sZFByb3BlcnR5VmFsdWUpIHsKICAgICAgICAgICAgICAgIC8vIEludGVybmV0IEV4cGxvcmVyIGhhcyBzdHJhbmdlIGJlaGF2aW91ciB3aXRoIGl0cyBvd24gZGVwcmVjYXRlZCBwcmVmaXhlZCB2ZXJzaW9uIG9mIHRyYW5zaXRpb24sIGFuaW1hdGlvbiBhbmQKICAgICAgICAgICAgICAgIC8vIG90aGVycy4gVGhpcyBicmVha3MgdGhlc2UgQ1NTIGZlYXR1cmVzIGluIHRoYXQgYnJvd3Nlciwgc28gdGhlIHdvcmthcm91bmQgaGVyZSBpcyB0byBqdXN0IG9taXQgYWxsIHRob3NlCiAgICAgICAgICAgICAgICAvLyBJRS1zcGVjaWZpYyBwcmVmaXhlcy4KICAgICAgICAgICAgICAgIGlmICggbmFtZS5zdWJzdHJpbmcoMCwgMykgPT0gIi1tcyIpIHsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChvbGRQcm9wZXJ0eVZhbHVlICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgc3R5bGVEaWZmW25ld0NvbXB1dGVkU3R5bGVzW2ldXSA9IG9sZFByb3BlcnR5VmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBzdHlsZURpZmY7CiAgICB9LAoKICAgIC8qKgogICAgICogVHJpZ2dlciB0aGUgb25Ob2RlVHJhbnNpdGlvbiBjYWxsYmFjayBhbmQgcGFzcyB0aGlzIG5vZGUgYW5kIHRoZSB0eXBlIG9mIHRyYW5zaXRpb246CiAgICAgKiAtIHRvRm9yZWdyb3VuZAogICAgICogLSB0b0JhY2tncm91bmQKICAgICAqIC0gdG9Gb2N1c0Zyb21Gb3JlCiAgICAgKiAtIHRvRm9jdXNGcm9tQmFjawogICAgICogQHBhcmFtIHR5cGUKICAgICAqLwogICAgbW92ZVRvOiBmdW5jdGlvbih0eXBlKSB7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIE9QVElPTlMub25Ob2RlVHJhbnNpdGlvbih0eXBlLCBzZWxmLmdldFB1YmxpY09iamVjdCgpLCBhbmltYXRvcik7CiAgICAgICAgfSwgdGhpcy5nZXRTdGFnZ2VyRGVsYXkoKSAqIDEwMDApOwogICAgfSwKCiAgICAvKioKICAgICAqIFN0b3JlIGEgY29weSBvZiB0aGUgZmluYWwgY29tcHV0ZWQgaW5saW5lIHN0eWxlIHNvIHRoYXQgdGhlIG5vZGUKICAgICAqIGNhbiBiZSBlYXNpbHkgcmVzdG9yZWQgdG8gdGhlIHN0eWxlIGl0IGhhZCBhZnRlciBpbml0aWFsaXphdGlvbi4KICAgICAqIFRoZSBjbG9uZU5vZGUoKSBtZXRob2QgaXMgbmVjZXNzYXJ5IGFzIG90aGVyd2lzZSB3ZSB3aWxsIGp1c3QKICAgICAqIGdldCBhIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBzdHlsZSwgd2hpY2ggd2lsbCBjaGFuZ2UgYXMgdGhlCiAgICAgKiBjdXJyZW50IHN0eWxlIGNoYW5nZXMuCiAgICAgKi8KICAgIHNldFJlc3RvcmVQb2ludDogZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy5pbmxpbmVTdHlsZSA9IHRoaXMuZG9tTm9kZS5jbG9uZU5vZGUoKS5zdHlsZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBSZXN0b3JlIHRoZSBkb21Ob2RlIHRvIHRoZSBzdHlsZSBpdCBoYWQgYWZ0ZXIgaW5pdGlhbGl6YXRpb24uCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBhcyBhIGNvbnZlbmllbnQgaGVscGVyIGZvciB0aG9zZSB3cml0aW5nCiAgICAgKiBKYXZhU2NyaXB0LWJhc2VkIHRyYW5zaXRpb25zLgogICAgICovCiAgICByZXN0b3JlOiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgbmFtZSwgaTsKICAgICAgICAvLyBmaXJzdCB3ZSBuZWVkIHRvIGRlbGV0ZSBhbGwgdGhlIHN0eWxlIHJ1bGVzCiAgICAgICAgLy8gY3VycmVudGx5IGRlZmluZWQgb24gdGhlIGVsZW1lbnQKICAgICAgICBmb3IgKGkgPSB0aGlzLmRvbU5vZGUuc3R5bGUubGVuZ3RoOyBpID49IDA7IGktLSkgewogICAgICAgICAgICBuYW1lID0gdGhpcy5kb21Ob2RlLnN0eWxlW2ldOwogICAgICAgICAgICB0aGlzLmRvbU5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7CiAgICAgICAgfQogICAgICAgIC8vIG5vdyB3ZSBsb29wIHRocm91Z2ggdGhlIG9yaWdpbmFsIENTU1N0eWxlRGVjbGFyYXRpb24KICAgICAgICAvLyBvYmplY3QgYW5kIHNldCBlYWNoIHByb3BlcnR5IHRvIGl0cyBvcmlnaW5hbCB2YWx1ZQogICAgICAgIGZvciAoaSA9IHRoaXMuaW5saW5lU3R5bGUubGVuZ3RoOyBpID49IDA7IGktLSkgewogICAgICAgICAgICBuYW1lID0gdGhpcy5pbmxpbmVTdHlsZVtpXTsKICAgICAgICAgICAgdGhpcy5kb21Ob2RlLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsCiAgICAgICAgICAgICAgICB0aGlzLmlubGluZVN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSksCiAgICAgICAgICAgICAgICBwcmlvcml0eSA9IHRoaXMuaW5saW5lU3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShuYW1lKSk7CiAgICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIFJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIG9mIHRoZSBwcml2YXRlIE5vZGUgb2JqZWN0LCBmb3IgdXNlIGluCiAgICAgKiB0aGUgamF2YXNjcmlwdCBjYWxsYmFja3Mgc2V0IHVwIGluIHRoZSBob3Jpem9uYWwgY29uZmlnIG9iamVjdC4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7e2RvbU5vZGU6ICosIGluZGV4OiAqLCBzdGFnZ2VyT3JkZXI6ICp9fQogICAgICovCiAgICBnZXRQdWJsaWNPYmplY3Q6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGRvbU5vZGU6IHRoaXMuZG9tTm9kZSwKICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsCiAgICAgICAgICAgIHN0YWdnZXJPcmRlcjogdGhpcy5zdGFnZ2VyT3JkZXIsCiAgICAgICAgICAgIHJlc3RvcmU6IHRoaXMucmVzdG9yZS5iaW5kKHRoaXMpCiAgICAgICAgfTsKICAgIH0KfTsKCgoKZnVuY3Rpb24gTm9kZUNvbGxlY3Rpb24oc2VsZWN0b3IpIHsKICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgdGhpcy5mcm9tU2VsZWN0b3Ioc2VsZWN0b3IpOwogICAgfQp9Cgp2YXIgTm9kZUNvbGxlY3Rpb25BUEkgPSB7CgogICAgZnJvbVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgewogICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICB2YXIgYWxsTm9kZXMgPSBST09ULmZpbmQoc2VsZWN0b3IpLmZpbHRlcignOnZpc2libGUnKS5ub3QoJy5ocnotbG9hZGluZy1pbmRpY2F0b3InKTsKCiAgICAgICAgdmFyIHRvcExldmVsTm9kZXMgPSAkKFtdKTsKICAgICAgICBhbGxOb2Rlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBkb21Ob2RlKSB7CiAgICAgICAgICAgIGlmICgkKGRvbU5vZGUpLnBhcmVudHMoc2VsZWN0b3IpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgdG9wTGV2ZWxOb2RlcyA9IHRvcExldmVsTm9kZXMuYWRkKGRvbU5vZGUpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHRvcExldmVsTm9kZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZG9tTm9kZSkgewogICAgICAgICAgICB2YXIgbm9kZSA9IG5ldyBOb2RlKGRvbU5vZGUsIGluZGV4KTsKICAgICAgICAgICAgc2VsZi5wdXNoKG5vZGUpOwogICAgICAgIH0pOwogICAgfSwKCiAgICBhcHBlbmRUb0RvbTogZnVuY3Rpb24ocGFyZW50UGFnZSkgewogICAgICAgIC8vIGF0IHRoaXMgc3RhZ2Ugd2UgY2FuIGFzc2lnbiBhbiBhcHByb3ByaWF0ZSBzdGFnZ2VyT3JkZXIgdG8KICAgICAgICAvLyB0aGUgbm9kZXMsIHNpbmNlIHdlIG5vdyBrbm93IGhvdyBtYW55IGFyZSBvbiBlYWNoIHBhZ2UuCiAgICAgICAgdmFyIHN0YWdnZXJPcmRlciA9IFtdOwogICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgc3RhZ2dlck9yZGVyLnB1c2goaSk7CiAgICAgICAgfQogICAgICAgIGlmIChPUFRJT05TLnN0YWdnZXIgPT09ICdyYW5kb20nKSB7CiAgICAgICAgICAgIHN0YWdnZXJPcmRlciA9IHNodWZmbGUoc3RhZ2dlck9yZGVyKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbihub2RlLCBpbmRleCkgewogICAgICAgICAgICBub2RlLnN0YWdnZXJPcmRlciA9IHN0YWdnZXJPcmRlcltpbmRleF07CiAgICAgICAgICAgIG5vZGUuYXBwZW5kVG9Eb20ocGFyZW50UGFnZSk7CiAgICAgICAgfSk7CiAgICB9Cn07CgpOb2RlQ29sbGVjdGlvbi5wcm90b3R5cGUgPSBbXTsKJC5leHRlbmQoTm9kZUNvbGxlY3Rpb24ucHJvdG90eXBlLCBOb2RlQ29sbGVjdGlvbkFQSSk7CgpmdW5jdGlvbiBQYWdlKHBhZ2VOdW1iZXIpIHsKICAgIHRoaXMudG9wID0gMDsKICAgIHRoaXMuYm90dG9tID0gMDsKICAgIHRoaXMuaGVpZ2h0ID0gMDsKICAgIHRoaXMubm9kZXMgPSBuZXcgTm9kZUNvbGxlY3Rpb24oKTsKICAgIHRoaXMucGFnZU51bWJlciA9IHBhZ2VOdW1iZXIgfHwgMDsKICAgIHRoaXMuZG9tTm9kZSA9IG51bGw7CiAgICB0aGlzLmhpZGVUaW1lciA9IG51bGw7CgogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICJwYWdlSWQiLCB7CiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICJocnotcGFnZS0iICsgdGhpcy5wYWdlTnVtYmVyOwogICAgICAgIH0KICAgIH0pOwoKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAibWlkUG9pbnQiLCB7CiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICh0aGlzLmJvdHRvbSArIHRoaXMudG9wKSAvIDIgLyBPUFRJT05TLnNjcm9sbGJhclNob3J0ZW5SYXRpbzsKICAgICAgICB9CiAgICB9KTsKfQoKUGFnZS5wcm90b3R5cGUgPSB7CgogICAgYWRkTm9kZTogZnVuY3Rpb24obm9kZSkgewogICAgICAgIHRoaXMubm9kZXMucHVzaChub2RlKTsKICAgIH0sCgogICAgYXBwZW5kVG9Eb206IGZ1bmN0aW9uKGN1cnJlbnRQYWdlKSB7CiAgICAgICAgdmFyIHpDbGFzcyA9ICIiOwogICAgICAgIGlmICh0aGlzLnBhZ2VOdW1iZXIgPCBjdXJyZW50UGFnZSkgewogICAgICAgICAgICB6Q2xhc3MgPSAiaHJ6LWJhY2sgaHJ6LWhpZGRlbiI7CiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UGFnZSA8IHRoaXMucGFnZU51bWJlcikgewogICAgICAgICAgICB6Q2xhc3MgPSAiaHJ6LWZvcmUgaHJ6LWhpZGRlbiI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgekNsYXNzID0gImhyei1mb2N1cy1mcm9tLWZvcmUiOwogICAgICAgIH0KICAgICAgICBDT05UQUlORVIuYXBwZW5kKCc8ZGl2IGNsYXNzPSJocnotcGFnZSAnICsgekNsYXNzICsgJyIgaWQ9IicgKyB0aGlzLnBhZ2VJZCArICciIC8+Jyk7CiAgICAgICAgdGhpcy5kb21Ob2RlID0gQ09OVEFJTkVSLmZpbmQoJyMnICsgdGhpcy5wYWdlSWQpWzBdOwogICAgICAgIHRoaXMubm9kZXMuYXBwZW5kVG9Eb20odGhpcyk7CiAgICB9LAoKICAgIG1vdmVUb0ZvcmVncm91bmQ6IGZ1bmN0aW9uKCkgewogICAgICAgIE9QVElPTlMub25QYWdlVHJhbnNpdGlvbigndG9Gb3JlZ3JvdW5kJywgdGhpcy5nZXRQdWJsaWNPYmplY3QoKSwgYW5pbWF0b3IpOwogICAgICAgICQodGhpcy5kb21Ob2RlKS5hZGRDbGFzcygnaHJ6LWZvcmUnKS5yZW1vdmVDbGFzcygnaHJ6LWJhY2sgaHJ6LWZvY3VzLWZyb20tYmFjayBocnotZm9jdXMtZnJvbS1mb3JlJyk7CiAgICAgICAgdGhpcy5oaWRlQWZ0ZXJEZWxheSgpOwogICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaChmdW5jdGlvbihub2RlKSB7CiAgICAgICAgICAgIG5vZGUubW92ZVRvKCd0b0ZvcmVncm91bmQnKTsKICAgICAgICB9KTsKICAgIH0sCgogICAgbW92ZVRvQmFja2dyb3VuZDogZnVuY3Rpb24oKSB7CiAgICAgICAgT1BUSU9OUy5vblBhZ2VUcmFuc2l0aW9uKCd0b0JhY2tncm91bmQnLCB0aGlzLmdldFB1YmxpY09iamVjdCgpLCBhbmltYXRvcik7CiAgICAgICAgJCh0aGlzLmRvbU5vZGUpLmFkZENsYXNzKCdocnotYmFjaycpLnJlbW92ZUNsYXNzKCdocnotZm9yZSBocnotZm9jdXMtZnJvbS1iYWNrIGhyei1mb2N1cy1mcm9tLWZvcmUnKTsKICAgICAgICB0aGlzLmhpZGVBZnRlckRlbGF5KCk7CiAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5tb3ZlVG8oJ3RvQmFja2dyb3VuZCcpOwogICAgICAgIH0pOwogICAgfSwKCiAgICBtb3ZlVG9Gb2N1c0Zyb21CYWNrZ3JvdW5kOiBmdW5jdGlvbigpIHsKICAgICAgICBPUFRJT05TLm9uUGFnZVRyYW5zaXRpb24oJ3RvRm9jdXNGcm9tQmFjaycsIHRoaXMuZ2V0UHVibGljT2JqZWN0KCksIGFuaW1hdG9yKTsKICAgICAgICAkKHRoaXMuZG9tTm9kZSkuYWRkQ2xhc3MoJ2hyei1mb2N1cy1mcm9tLWJhY2snKTsKICAgICAgICB0aGlzLl9tb3ZlVG9Gb2N1cygndG9Gb2N1c0Zyb21CYWNrJyk7CiAgICB9LAoKICAgIG1vdmVUb0ZvY3VzRnJvbUZvcmVncm91bmQ6IGZ1bmN0aW9uKCkgewogICAgICAgIE9QVElPTlMub25QYWdlVHJhbnNpdGlvbigndG9Gb2N1c0Zyb21Gb3JlJywgdGhpcy5nZXRQdWJsaWNPYmplY3QoKSwgYW5pbWF0b3IpOwogICAgICAgICQodGhpcy5kb21Ob2RlKS5hZGRDbGFzcygnaHJ6LWZvY3VzLWZyb20tZm9yZScpOwogICAgICAgIHRoaXMuX21vdmVUb0ZvY3VzKCd0b0ZvY3VzRnJvbUZvcmUnKTsKICAgIH0sCgogICAgX21vdmVUb0ZvY3VzOiBmdW5jdGlvbih0eXBlKSB7CiAgICAgICAgJCh0aGlzLmRvbU5vZGUpLnJlbW92ZUNsYXNzKCdocnotZm9yZSBocnotYmFjayBocnotaGlkZGVuJyk7CiAgICAgICAgaWYgKHRoaXMuaGlkZVRpbWVyICE9PSBudWxsKSB7CiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmhpZGVUaW1lcik7CiAgICAgICAgICAgIHRoaXMuaGlkZVRpbWVyID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgICAgICAgbm9kZS5tb3ZlVG8odHlwZSk7CiAgICAgICAgfSk7CiAgICB9LAoKICAgIGhpZGVBZnRlckRlbGF5OiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgJHRoaXNOb2RlID0gJCh0aGlzLmRvbU5vZGUpOwogICAgICAgIHRoaXMuaGlkZVRpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICR0aGlzTm9kZS5hZGRDbGFzcygnaHJ6LWhpZGRlbicpOwogICAgICAgIH0sIE9QVElPTlMucGFnZUhpZGVEZWxheSAqIDEwMDApOwogICAgfSwKCiAgICAvKioKICAgICAqIFJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIG9mIHRoZSBwcml2YXRlIFBhZ2Ugb2JqZWN0LCBmb3IgdXNlIGluCiAgICAgKiB0aGUgamF2YXNjcmlwdCBjYWxsYmFja3Mgc2V0IHVwIGluIHRoZSBob3Jpem9uYWwgY29uZmlnIG9iamVjdC4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7e2RvbU5vZGU6ICosIGluZGV4OiAqLCBzdGFnZ2VyT3JkZXI6ICp9fQogICAgICovCiAgICBnZXRQdWJsaWNPYmplY3Q6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGRvbU5vZGU6IHRoaXMuZG9tTm9kZSwKICAgICAgICAgICAgcGFnZU51bWJlcjogdGhpcy5wYWdlTnVtYmVyCiAgICAgICAgfTsKICAgIH0KfTsKZnVuY3Rpb24gUGFnZUNvbGxlY3Rpb24oKSB7CgogICAgdmFyIF9jdXJyZW50UGFnZSA9IDE7CgogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICJjdXJyZW50UGFnZSIsIHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gX2N1cnJlbnRQYWdlOwogICAgICAgIH0sCiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWwpIHsKICAgICAgICAgICAgaWYgKHRoaXMubGFzdCgpIDwgdmFsKSB7CiAgICAgICAgICAgICAgICBfY3VycmVudFBhZ2UgPSB0aGlzLmxhc3QoKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh2YWwgPCAxKSB7CiAgICAgICAgICAgICAgICBfY3VycmVudFBhZ2UgPSAxOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX2N1cnJlbnRQYWdlID0gdmFsOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7Cn0KCnZhciBQYWdlQ29sbGVjdGlvbkFQSSA9IHsKCiAgICBnZXRQYWdlOiBmdW5jdGlvbihwYWdlTnVtYmVyKSB7CiAgICAgICAgaWYgKDAgPCBwYWdlTnVtYmVyICYmIHBhZ2VOdW1iZXIgPD0gdGhpcy5sZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXNbcGFnZU51bWJlciAtIDFdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZSgpOwogICAgICAgIH0KICAgIH0sCgogICAgZ2V0Q3VycmVudDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFnZSh0aGlzLmN1cnJlbnRQYWdlKTsKICAgIH0sCgogICAgZ2V0TmV4dDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFnZSh0aGlzLmN1cnJlbnRQYWdlICsgMSk7CiAgICB9LAoKICAgIGdldFByZXZpb3VzOiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5nZXRQYWdlKHRoaXMuY3VycmVudFBhZ2UgLSAxKTsKICAgIH0sCgogICAgYWRkOiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgcGFnZU51bWJlciA9IHRoaXMubGVuZ3RoICsgMTsKICAgICAgICB2YXIgbmV3UGFnZSA9IG5ldyBQYWdlKHBhZ2VOdW1iZXIpOwogICAgICAgIG5ld1BhZ2UudG9wID0gdGhpcy5nZXRQYWdlKHRoaXMubGVuZ3RoKS5ib3R0b207CiAgICAgICAgdGhpcy5wdXNoKG5ld1BhZ2UpOwogICAgfSwKCiAgICBsYXN0OiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpc1t0aGlzLmxlbmd0aCAtIDFdOwogICAgfSwKCiAgICBnZXRMYXN0T2Zmc2V0OiBmdW5jdGlvbigpIHsKICAgICAgICBpZiAodGhpcy5sZW5ndGggPD0gMSkgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gdGhpcy5sYXN0KCkudG9wOwogICAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBHaXZlbiBhIHktYXhpcyBvZmZzZXQgaW4gcGl4ZWxzLCByZXR1cm4gdGhlIHBhZ2UgaW4gdGhlIGNvbGxlY3Rpb24gd2hpY2ggY29udGFpbnMgdGhpcwogICAgICogb2Zmc2V0IGJldHdlZW4gaXRzIHRvcCBhbmQgYm90dG9tIHByb3BlcnRpZXMuIElmIHRoZSBvZmZzZXQgaXMgbm90IHZhbGlkLCByZXR1cm4gdGhlCiAgICAgKiBmaXJzdCBwYWdlLgogICAgICogQHBhcmFtIG9mZnNldAogICAgICovCiAgICBnZXRQYWdlQXRPZmZzZXQ6IGZ1bmN0aW9uKG9mZnNldCkgewogICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihwYWdlKSB7CiAgICAgICAgICAgIHJldHVybiAocGFnZS50b3AgPD0gb2Zmc2V0ICYmIG9mZnNldCA8IHBhZ2UuYm90dG9tKTsKICAgICAgICB9KVswXSB8fCB0aGlzWzBdOwogICAgfSwKCiAgICAvKioKICAgICAqIEFwcGVuZHMgYWxsIHRoZSBwYWdlcyBhbmQgcGFnZSBlbGVtZW50cyB0byB0aGUgZG9jdW1lbnRGcmFnbWVudCByZWZlcmVuY2VkIGJ5IENPTlRBSU5FUgogICAgICogQHBhcmFtIGN1cnJlbnRTY3JvbGwKICAgICAqLwogICAgYXBwZW5kVG9Eb206IGZ1bmN0aW9uKGN1cnJlbnRTY3JvbGwpIHsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgY3VycmVudFNjcm9sbCA9IGN1cnJlbnRTY3JvbGwgfHwgMDsKICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gdGhpcy5nZXRQYWdlQXRPZmZzZXQoY3VycmVudFNjcm9sbCAqIE9QVElPTlMuc2Nyb2xsYmFyU2hvcnRlblJhdGlvKS5wYWdlTnVtYmVyOwogICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbihwYWdlKSB7CiAgICAgICAgICAgIHBhZ2UuYXBwZW5kVG9Eb20oc2VsZi5jdXJyZW50UGFnZSk7CiAgICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogVG8gc2hvdyBhIGdpdmVuIHBhZ2UsIHdlIGp1c3QgbmVlZCB0byByZW1vdmUgdGhlIC1mb3JlIGFuZCAtYmFjayBDU1MgY2xhc3NlcwogICAgICogZnJvbSB0aGUgcGFnZSBhbmQgdGhlIG5vZGVzIG9uIHRoYXQgcGFnZS4gTG93ZXItb3JkZXJlZCBwYWdlcyBoYXZlIHRoZSAtZm9yZQogICAgICogY2xhc3MgYWRkZWQsIGFuZCBoaWdoZXItb3JkZXJlZCBwYWdlcyBoYXZlIHRoZSAtYmFjayBjbGFzcyBhZGRlZC4KICAgICAqCiAgICAgKgogICAgICogQHBhcmFtIHBhZ2VOdW1iZXIKICAgICAqLwogICAgc2hvd1BhZ2U6IGZ1bmN0aW9uKHBhZ2VOdW1iZXIpIHsKICAgICAgICB2YXIgb2xkUGFnZU51bWJlciA9IHRoaXMuY3VycmVudFBhZ2U7CiAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IHBhZ2VOdW1iZXI7CiAgICAgICAgdmFyIG5ld1BhZ2VOdW1iZXIgPSB0aGlzLmN1cnJlbnRQYWdlOwoKICAgICAgICBpZiAob2xkUGFnZU51bWJlciA9PT0gMCkgewogICAgICAgICAgICB0aGlzLmdldFBhZ2UobmV3UGFnZU51bWJlcikuX21vdmVUb0ZvY3VzKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGk7CiAgICAgICAgICAgIGlmIChvbGRQYWdlTnVtYmVyIDwgbmV3UGFnZU51bWJlcikgewogICAgICAgICAgICAgICAgZm9yIChpID0gb2xkUGFnZU51bWJlcjsgaSA8IG5ld1BhZ2VOdW1iZXI7IGkgKyspIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFBhZ2UoaSkubW92ZVRvQmFja2dyb3VuZCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5nZXRQYWdlKG5ld1BhZ2VOdW1iZXIpLm1vdmVUb0ZvY3VzRnJvbUZvcmVncm91bmQoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChuZXdQYWdlTnVtYmVyIDwgb2xkUGFnZU51bWJlcikgewogICAgICAgICAgICAgICAgZm9yIChpID0gb2xkUGFnZU51bWJlcjsgbmV3UGFnZU51bWJlciA8IGk7IGkgLS0pIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFBhZ2UoaSkubW92ZVRvRm9yZWdyb3VuZCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5nZXRQYWdlKG5ld1BhZ2VOdW1iZXIpLm1vdmVUb0ZvY3VzRnJvbUJhY2tncm91bmQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfTsKClBhZ2VDb2xsZWN0aW9uLnByb3RvdHlwZSA9IFtdOwokLmV4dGVuZChQYWdlQ29sbGVjdGlvbi5wcm90b3R5cGUsIFBhZ2VDb2xsZWN0aW9uQVBJKTsKfSkoalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTs=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 03:19:43 GMT",
                    "Content-Length": "43554",
                    "Date": "Fri, 07 Nov 2014 03:19:43 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}