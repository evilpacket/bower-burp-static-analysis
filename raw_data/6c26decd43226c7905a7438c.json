{
    "url": "http://localhost:9999/andrewchilds/collectionize/collectionize.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "HTML5 storage manipulation (DOM-based)",
    "issueType": 5246720,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based HTML5 storage manipulation occurs when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and stores this data in the HTML5 storage of the web browser (either localStorage or sessionStorage). An attacker may be able to use this behavior to construct a URL which, if visited by another application user, will cause the user's browser to store attacker-controllable data.<br><br>This behavior does not in itself constitute a security vulnerability. However, if the application later reads the data back from storage and processes it in an unsafe way, then an attacker may be able to leverage the storage mechanism to deliver other DOM-based attacks, such as cross-site scripting and JavaScript injection.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>You should also review the ways in which the wider application uses data that is retrieved from HTML5 storage. If the data is never handled in an unsafe manner, then this behavior may not constitute any kind of vulnerability.<br><br>The most effective way to avoid DOM-based HTML5 storage manipulation is not to place in HTML5 storage any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored.",
    "issueDetail": "The application may be vulnerable to DOM-based HTML5 storage manipulation. Data is read from <b>self.name</b> and written to <b>window.localStorage.setItem()</b> via the following statement:<ul><li>window.localStorage.setItem(window.Collectionize.localStoragePrefix + self.name, JSON.stringify(data));</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/andrewchilds/collectionize/collectionize.js",
                "path": "/andrewchilds/collectionize/collectionize.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hbmRyZXdjaGlsZHMvY29sbGVjdGlvbml6ZS9jb2xsZWN0aW9uaXplLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNDMwNg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KRGF0ZTogVGh1LCAwNiBOb3YgMjAxNCAxNTo1MjowOCBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMDYgTm92IDIwMTQgMTU6NTI6MDUgR01UDQoNCihmdW5jdGlvbiAoKSB7CgogIGZ1bmN0aW9uIGFycmF5TW92ZShhcnIsIG9sZEluZGV4LCBuZXdJbmRleCkgewogICAgaWYgKG5ld0luZGV4ID49IGFyci5sZW5ndGgpIHsKICAgICAgdmFyIGsgPSBuZXdJbmRleCAtIGFyci5sZW5ndGg7CiAgICAgIHdoaWxlICgoay0tKSArIDEpIHsKICAgICAgICBhcnIucHVzaCh1bmRlZmluZWQpOwogICAgICB9CiAgICB9CiAgICBhcnIuc3BsaWNlKG5ld0luZGV4LCAwLCBhcnIuc3BsaWNlKG9sZEluZGV4LCAxKVswXSk7CgogICAgcmV0dXJuIGFycjsKICB9CgogIGZ1bmN0aW9uIENvbGxlY3Rpb25pemUobmFtZSkgewogICAgdmFyIHNlbGYgPSB7CiAgICAgIGRiOiBbXSwKICAgICAgbGlzdGVuZXJzOiBbXSwKICAgICAgbmFtZTogbmFtZSAvLyB1c2VkIGZvciBsb2NhbFN0b3JhZ2UgcHJvcGVydHkgbmFtaW5nCiAgICB9OwoKICAgIHZhciBsb2Rhc2hNZXRob2RzID0gWydhdCcsICdlYWNoJywgJ2V2ZXJ5JywgJ2ZpbHRlcicsICdmaW5kJywgJ2ZpbmRJbmRleCcsCiAgICAgICdmaW5kTGFzdEluZGV4JywgJ2ZpcnN0JywgJ2xhc3QnLCAnbWFwJywgJ21heCcsICdtaW4nLCAncGx1Y2snLCAncmVkdWNlJywKICAgICAgJ3JlZHVjZVJpZ2h0JywgJ3JlamVjdCcsICdzYW1wbGUnLCAnc2l6ZScsICdzaHVmZmxlJywgJ3NvbWUnLCAnc29ydEJ5JywgJ3doZXJlJ107CgogICAgXy5lYWNoKGxvZGFzaE1ldGhvZHMsIGZ1bmN0aW9uIChmbikgewogICAgICBzZWxmW2ZuXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYXJncyA9IF8udG9BcnJheShhcmd1bWVudHMpOwogICAgICAgIGFyZ3MudW5zaGlmdChzZWxmLmRiKTsKICAgICAgICByZXR1cm4gX1tmbl0uYXBwbHkodGhpcywgYXJncyk7CiAgICAgIH07CiAgICB9KTsKCiAgICBzZWxmLm9uID0gZnVuY3Rpb24gKGV2ZW50TmFtZXMsIGZuKSB7CiAgICAgIF8uZWFjaChldmVudE5hbWVzLnNwbGl0KCcgJyksIGZ1bmN0aW9uIChldmVudE5hbWUpIHsKICAgICAgICBzZWxmLmxpc3RlbmVycy5wdXNoKHsgbmFtZTogZXZlbnROYW1lLCBmbjogZm4gfSk7CiAgICAgIH0pOwogICAgfTsKCiAgICBzZWxmLnRyaWdnZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBhcmdzID0gXy50b0FycmF5KGFyZ3VtZW50cyk7CiAgICAgIHZhciBldmVudE5hbWUgPSBhcmdzLnNoaWZ0KCk7CiAgICAgIF8uZWFjaChzZWxmLmxpc3RlbmVycywgZnVuY3Rpb24gKGxpc3RlbmVyKSB7CiAgICAgICAgaWYgKGxpc3RlbmVyLm5hbWUgPT09IGV2ZW50TmFtZSkgewogICAgICAgICAgbGlzdGVuZXIuZm4uYXBwbHkodGhpcywgYXJncyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CgogICAgc2VsZi5vZmYgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7CiAgICAgIF8ucmVtb3ZlKHNlbGYubGlzdGVuZXJzLCBmdW5jdGlvbiAobGlzdGVuZXIpIHsKICAgICAgICByZXR1cm4gbGlzdGVuZXIubmFtZSA9PT0gZXZlbnROYW1lOwogICAgICB9KTsKICAgIH07CgogICAgc2VsZi5pc0VtcHR5ID0gZnVuY3Rpb24gKHF1ZXJ5KSB7CiAgICAgIHJldHVybiBzZWxmLmZpbHRlcihxdWVyeSkubGVuZ3RoID09PSAwOwogICAgfTsKCiAgICBzZWxmLmluY3IgPSBmdW5jdGlvbiAocXVlcnksIHByb3ApIHsKICAgICAgdmFyIG1hdGNoZXMgPSBzZWxmLmZpbHRlcihxdWVyeSk7CiAgICAgIF8uZWFjaChtYXRjaGVzLCBmdW5jdGlvbiAob2JqKSB7CiAgICAgICAgaWYgKG9iaikgewogICAgICAgICAgaWYgKF8uaXNOdW1iZXIob2JqW3Byb3BdKSkgewogICAgICAgICAgICBvYmpbcHJvcF0rKzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG9ialtwcm9wXSA9IDA7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CgogICAgc2VsZi5tb3ZlID0gZnVuY3Rpb24gKG9sZEluZGV4LCBuZXdJbmRleCkgewogICAgICBzZWxmLmRiID0gYXJyYXlNb3ZlKHNlbGYuZGIsIG9sZEluZGV4LCBuZXdJbmRleCk7CiAgICAgIHNlbGYudHJpZ2dlcignbW92ZWQnKTsKICAgIH07CgogICAgc2VsZi5hZGQgPSBmdW5jdGlvbiAob2JqKSB7CiAgICAgIHNlbGYudHJpZ2dlcignYmVmb3JlQWRkJywgb2JqKTsKICAgICAgc2VsZi5kYltzZWxmLmRiLmxlbmd0aF0gPSBvYmo7CiAgICAgIHNlbGYudHJpZ2dlcignYWRkZWQnLCBvYmopOwoKICAgICAgcmV0dXJuIG9iajsKICAgIH07CgogICAgc2VsZi51cGRhdGUgPSBmdW5jdGlvbiAob2JqLCBrZXkpIHsKICAgICAga2V5ID0ga2V5IHx8ICdpZCc7CgogICAgICB2YXIgcXVlcnkgPSB7fTsKICAgICAgaWYgKF8uaXNTdHJpbmcoa2V5KSAmJiBvYmpba2V5XSkgewogICAgICAgIHF1ZXJ5W2tleV0gPSBvYmpba2V5XTsKICAgICAgfSBlbHNlIGlmIChfLmlzUGxhaW5PYmplY3Qoa2V5KSkgewogICAgICAgIHF1ZXJ5ID0ga2V5OwogICAgICB9CgogICAgICB2YXIgb3V0cHV0ID0gW107CiAgICAgIHZhciBtYXRjaGVzID0gc2VsZi5maWx0ZXIocXVlcnkpOwoKICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID4gMCkgewogICAgICAgIF8uZWFjaChtYXRjaGVzLCBmdW5jdGlvbiAobWF0Y2gpIHsKICAgICAgICAgIF8uZXh0ZW5kKG1hdGNoLCBvYmopOwogICAgICAgICAgc2VsZi50cmlnZ2VyKCdiZWZvcmVVcGRhdGUnLCBtYXRjaCk7CiAgICAgICAgICBvdXRwdXRbb3V0cHV0Lmxlbmd0aF0gPSBtYXRjaDsKICAgICAgICAgIHNlbGYudHJpZ2dlcigndXBkYXRlZCcsIG1hdGNoKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBvdXRwdXRbb3V0cHV0Lmxlbmd0aF0gPSBzZWxmLmFkZChvYmopOwogICAgICB9CgogICAgICByZXR1cm4gb3V0cHV0OwogICAgfTsKCiAgICBzZWxmLnJlbW92ZSA9IGZ1bmN0aW9uIChxdWVyeSkgewogICAgICB2YXIgcmVtb3ZlZCA9IHNlbGYuZmlsdGVyKHF1ZXJ5KTsKICAgICAgc2VsZi5kYiA9IHNlbGYucmVqZWN0KHF1ZXJ5KTsKICAgICAgXy5lYWNoKHJlbW92ZWQsIGZ1bmN0aW9uIChvYmopIHsKICAgICAgICBzZWxmLnRyaWdnZXIoJ3JlbW92ZWQnLCBvYmopOwogICAgICB9KTsKICAgIH07CgogICAgc2VsZi5mbHVzaCA9IGZ1bmN0aW9uIChkYikgewogICAgICBzZWxmLmRiID0gZGIgfHwgW107CiAgICAgIHNlbGYudHJpZ2dlcignZmx1c2hlZCcpOwogICAgfTsKCiAgICBzZWxmLmFsbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHNlbGYuZGI7CiAgICB9OwoKICAgIHNlbGYuY2xpZW50U2F2ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGRhdGEgPSBbXTsKICAgICAgc2VsZi5lYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgIGRhdGFbaW5kZXhdID0ge307CiAgICAgICAgXy5lYWNoKGl0ZW0sIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7CiAgICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKHZhbHVlKSkgewogICAgICAgICAgICB2YWx1ZSA9ICcoJyArIHZhbHVlICsgJyk7JzsKICAgICAgICAgIH0KICAgICAgICAgIC8vIERyb3AgRE9NIGVsZW1lbnRzLCBzaW5jZSB0aGV5IGRvbid0IHdvcmsgd2l0aCBKU09OLnN0cmluZ2lmeS4KICAgICAgICAgIGlmICghXy5pc0VsZW1lbnQodmFsdWUpKSB7CiAgICAgICAgICAgIGRhdGFbaW5kZXhdW2tleV0gPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CgogICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0od2luZG93LkNvbGxlY3Rpb25pemUubG9jYWxTdG9yYWdlUHJlZml4ICsgc2VsZi5uYW1lLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7CiAgICB9OwoKICAgIHNlbGYuY2xpZW50TG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGRhdGEgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0od2luZG93LkNvbGxlY3Rpb25pemUubG9jYWxTdG9yYWdlUHJlZml4ICsgc2VsZi5uYW1lKTsKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHNlbGYudHJpZ2dlcigncGFyc2VFcnJvcicsIGRhdGEsIGUpOwogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfTsKCiAgICAvLyBBbGlhc2VzCgogICAgc2VsZi5nZXQgPSBzZWxmLmZpbmQ7CiAgICBzZWxmLmluZGV4ID0gc2VsZi5maW5kSW5kZXg7CiAgICBzZWxmLnNlYXJjaCA9IHNlbGYuZmlsdGVyOwogICAgc2VsZi5sZW5ndGggPSBzZWxmLnNpemU7CgogICAgcmV0dXJuIHNlbGY7CiAgfQoKICAvLyBFeHBvc2UKCiAgd2luZG93LkNvbGxlY3Rpb25pemUgPSBDb2xsZWN0aW9uaXplOwogIHdpbmRvdy5Db2xsZWN0aW9uaXplLmxvY2FsU3RvcmFnZVByZWZpeCA9ICdDb2xsZWN0aW9uaXplLic7Cgp9KCkpOwo=",
                "body": "KGZ1bmN0aW9uICgpIHsKCiAgZnVuY3Rpb24gYXJyYXlNb3ZlKGFyciwgb2xkSW5kZXgsIG5ld0luZGV4KSB7CiAgICBpZiAobmV3SW5kZXggPj0gYXJyLmxlbmd0aCkgewogICAgICB2YXIgayA9IG5ld0luZGV4IC0gYXJyLmxlbmd0aDsKICAgICAgd2hpbGUgKChrLS0pICsgMSkgewogICAgICAgIGFyci5wdXNoKHVuZGVmaW5lZCk7CiAgICAgIH0KICAgIH0KICAgIGFyci5zcGxpY2UobmV3SW5kZXgsIDAsIGFyci5zcGxpY2Uob2xkSW5kZXgsIDEpWzBdKTsKCiAgICByZXR1cm4gYXJyOwogIH0KCiAgZnVuY3Rpb24gQ29sbGVjdGlvbml6ZShuYW1lKSB7CiAgICB2YXIgc2VsZiA9IHsKICAgICAgZGI6IFtdLAogICAgICBsaXN0ZW5lcnM6IFtdLAogICAgICBuYW1lOiBuYW1lIC8vIHVzZWQgZm9yIGxvY2FsU3RvcmFnZSBwcm9wZXJ0eSBuYW1pbmcKICAgIH07CgogICAgdmFyIGxvZGFzaE1ldGhvZHMgPSBbJ2F0JywgJ2VhY2gnLCAnZXZlcnknLCAnZmlsdGVyJywgJ2ZpbmQnLCAnZmluZEluZGV4JywKICAgICAgJ2ZpbmRMYXN0SW5kZXgnLCAnZmlyc3QnLCAnbGFzdCcsICdtYXAnLCAnbWF4JywgJ21pbicsICdwbHVjaycsICdyZWR1Y2UnLAogICAgICAncmVkdWNlUmlnaHQnLCAncmVqZWN0JywgJ3NhbXBsZScsICdzaXplJywgJ3NodWZmbGUnLCAnc29tZScsICdzb3J0QnknLCAnd2hlcmUnXTsKCiAgICBfLmVhY2gobG9kYXNoTWV0aG9kcywgZnVuY3Rpb24gKGZuKSB7CiAgICAgIHNlbGZbZm5dID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBhcmdzID0gXy50b0FycmF5KGFyZ3VtZW50cyk7CiAgICAgICAgYXJncy51bnNoaWZ0KHNlbGYuZGIpOwogICAgICAgIHJldHVybiBfW2ZuXS5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgfTsKICAgIH0pOwoKICAgIHNlbGYub24gPSBmdW5jdGlvbiAoZXZlbnROYW1lcywgZm4pIHsKICAgICAgXy5lYWNoKGV2ZW50TmFtZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24gKGV2ZW50TmFtZSkgewogICAgICAgIHNlbGYubGlzdGVuZXJzLnB1c2goeyBuYW1lOiBldmVudE5hbWUsIGZuOiBmbiB9KTsKICAgICAgfSk7CiAgICB9OwoKICAgIHNlbGYudHJpZ2dlciA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGFyZ3MgPSBfLnRvQXJyYXkoYXJndW1lbnRzKTsKICAgICAgdmFyIGV2ZW50TmFtZSA9IGFyZ3Muc2hpZnQoKTsKICAgICAgXy5lYWNoKHNlbGYubGlzdGVuZXJzLCBmdW5jdGlvbiAobGlzdGVuZXIpIHsKICAgICAgICBpZiAobGlzdGVuZXIubmFtZSA9PT0gZXZlbnROYW1lKSB7CiAgICAgICAgICBsaXN0ZW5lci5mbi5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKCiAgICBzZWxmLm9mZiA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHsKICAgICAgXy5yZW1vdmUoc2VsZi5saXN0ZW5lcnMsIGZ1bmN0aW9uIChsaXN0ZW5lcikgewogICAgICAgIHJldHVybiBsaXN0ZW5lci5uYW1lID09PSBldmVudE5hbWU7CiAgICAgIH0pOwogICAgfTsKCiAgICBzZWxmLmlzRW1wdHkgPSBmdW5jdGlvbiAocXVlcnkpIHsKICAgICAgcmV0dXJuIHNlbGYuZmlsdGVyKHF1ZXJ5KS5sZW5ndGggPT09IDA7CiAgICB9OwoKICAgIHNlbGYuaW5jciA9IGZ1bmN0aW9uIChxdWVyeSwgcHJvcCkgewogICAgICB2YXIgbWF0Y2hlcyA9IHNlbGYuZmlsdGVyKHF1ZXJ5KTsKICAgICAgXy5lYWNoKG1hdGNoZXMsIGZ1bmN0aW9uIChvYmopIHsKICAgICAgICBpZiAob2JqKSB7CiAgICAgICAgICBpZiAoXy5pc051bWJlcihvYmpbcHJvcF0pKSB7CiAgICAgICAgICAgIG9ialtwcm9wXSsrOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb2JqW3Byb3BdID0gMDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKCiAgICBzZWxmLm1vdmUgPSBmdW5jdGlvbiAob2xkSW5kZXgsIG5ld0luZGV4KSB7CiAgICAgIHNlbGYuZGIgPSBhcnJheU1vdmUoc2VsZi5kYiwgb2xkSW5kZXgsIG5ld0luZGV4KTsKICAgICAgc2VsZi50cmlnZ2VyKCdtb3ZlZCcpOwogICAgfTsKCiAgICBzZWxmLmFkZCA9IGZ1bmN0aW9uIChvYmopIHsKICAgICAgc2VsZi50cmlnZ2VyKCdiZWZvcmVBZGQnLCBvYmopOwogICAgICBzZWxmLmRiW3NlbGYuZGIubGVuZ3RoXSA9IG9iajsKICAgICAgc2VsZi50cmlnZ2VyKCdhZGRlZCcsIG9iaik7CgogICAgICByZXR1cm4gb2JqOwogICAgfTsKCiAgICBzZWxmLnVwZGF0ZSA9IGZ1bmN0aW9uIChvYmosIGtleSkgewogICAgICBrZXkgPSBrZXkgfHwgJ2lkJzsKCiAgICAgIHZhciBxdWVyeSA9IHt9OwogICAgICBpZiAoXy5pc1N0cmluZyhrZXkpICYmIG9ialtrZXldKSB7CiAgICAgICAgcXVlcnlba2V5XSA9IG9ialtrZXldOwogICAgICB9IGVsc2UgaWYgKF8uaXNQbGFpbk9iamVjdChrZXkpKSB7CiAgICAgICAgcXVlcnkgPSBrZXk7CiAgICAgIH0KCiAgICAgIHZhciBvdXRwdXQgPSBbXTsKICAgICAgdmFyIG1hdGNoZXMgPSBzZWxmLmZpbHRlcihxdWVyeSk7CgogICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgXy5lYWNoKG1hdGNoZXMsIGZ1bmN0aW9uIChtYXRjaCkgewogICAgICAgICAgXy5leHRlbmQobWF0Y2gsIG9iaik7CiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ2JlZm9yZVVwZGF0ZScsIG1hdGNoKTsKICAgICAgICAgIG91dHB1dFtvdXRwdXQubGVuZ3RoXSA9IG1hdGNoOwogICAgICAgICAgc2VsZi50cmlnZ2VyKCd1cGRhdGVkJywgbWF0Y2gpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIG91dHB1dFtvdXRwdXQubGVuZ3RoXSA9IHNlbGYuYWRkKG9iaik7CiAgICAgIH0KCiAgICAgIHJldHVybiBvdXRwdXQ7CiAgICB9OwoKICAgIHNlbGYucmVtb3ZlID0gZnVuY3Rpb24gKHF1ZXJ5KSB7CiAgICAgIHZhciByZW1vdmVkID0gc2VsZi5maWx0ZXIocXVlcnkpOwogICAgICBzZWxmLmRiID0gc2VsZi5yZWplY3QocXVlcnkpOwogICAgICBfLmVhY2gocmVtb3ZlZCwgZnVuY3Rpb24gKG9iaikgewogICAgICAgIHNlbGYudHJpZ2dlcigncmVtb3ZlZCcsIG9iaik7CiAgICAgIH0pOwogICAgfTsKCiAgICBzZWxmLmZsdXNoID0gZnVuY3Rpb24gKGRiKSB7CiAgICAgIHNlbGYuZGIgPSBkYiB8fCBbXTsKICAgICAgc2VsZi50cmlnZ2VyKCdmbHVzaGVkJyk7CiAgICB9OwoKICAgIHNlbGYuYWxsID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gc2VsZi5kYjsKICAgIH07CgogICAgc2VsZi5jbGllbnRTYXZlID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgZGF0YSA9IFtdOwogICAgICBzZWxmLmVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgZGF0YVtpbmRleF0gPSB7fTsKICAgICAgICBfLmVhY2goaXRlbSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsKICAgICAgICAgIGlmIChfLmlzRnVuY3Rpb24odmFsdWUpKSB7CiAgICAgICAgICAgIHZhbHVlID0gJygnICsgdmFsdWUgKyAnKTsnOwogICAgICAgICAgfQogICAgICAgICAgLy8gRHJvcCBET00gZWxlbWVudHMsIHNpbmNlIHRoZXkgZG9uJ3Qgd29yayB3aXRoIEpTT04uc3RyaW5naWZ5LgogICAgICAgICAgaWYgKCFfLmlzRWxlbWVudCh2YWx1ZSkpIHsKICAgICAgICAgICAgZGF0YVtpbmRleF1ba2V5XSA9IHZhbHVlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKCiAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSh3aW5kb3cuQ29sbGVjdGlvbml6ZS5sb2NhbFN0b3JhZ2VQcmVmaXggKyBzZWxmLm5hbWUsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTsKICAgIH07CgogICAgc2VsZi5jbGllbnRMb2FkID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgZGF0YSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSh3aW5kb3cuQ29sbGVjdGlvbml6ZS5sb2NhbFN0b3JhZ2VQcmVmaXggKyBzZWxmLm5hbWUpOwogICAgICB0cnkgewogICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgc2VsZi50cmlnZ2VyKCdwYXJzZUVycm9yJywgZGF0YSwgZSk7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9OwoKICAgIC8vIEFsaWFzZXMKCiAgICBzZWxmLmdldCA9IHNlbGYuZmluZDsKICAgIHNlbGYuaW5kZXggPSBzZWxmLmZpbmRJbmRleDsKICAgIHNlbGYuc2VhcmNoID0gc2VsZi5maWx0ZXI7CiAgICBzZWxmLmxlbmd0aCA9IHNlbGYuc2l6ZTsKCiAgICByZXR1cm4gc2VsZjsKICB9CgogIC8vIEV4cG9zZQoKICB3aW5kb3cuQ29sbGVjdGlvbml6ZSA9IENvbGxlY3Rpb25pemU7CiAgd2luZG93LkNvbGxlY3Rpb25pemUubG9jYWxTdG9yYWdlUHJlZml4ID0gJ0NvbGxlY3Rpb25pemUuJzsKCn0oKSk7Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 15:52:05 GMT",
                    "Content-Length": "4306",
                    "Date": "Thu, 06 Nov 2014 15:52:08 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}