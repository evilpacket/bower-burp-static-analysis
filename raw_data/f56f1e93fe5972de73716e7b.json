{
    "url": "http://localhost:9999/mikefowler/instajam/src/instajam.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Denial of service (DOM-based)",
    "issueType": 5246208,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based denial of service vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and passes this data to a problematic platform API in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a denial of service condition on the user's computer when the relevant API is invoked. Depending on the nature of the API, the invocation may cause the user's computer to consume excessive amounts of CPU or disk space.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based denial of service vulnerabilities is not to dynamically pass data into problematic platform APIs that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from causing a denial of service condition. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe.",
    "issueDetail": "The application may be vulnerable to DOM-based denial of service. Data is read from <b>window.location.hash</b> and written to <b>the RegExp() constructor</b> via the following statements:<ul><li>var matches = window.location.hash.match(regex);</li><li>var removeRegex = new RegExp(\"(?:&amp;|#)\" + param + \"=\" + matches[1], \"i\");</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/mikefowler/instajam/src/instajam.js",
                "path": "/mikefowler/instajam/src/instajam.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9taWtlZm93bGVyL2luc3RhamFtL3NyYy9pbnN0YWphbS5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "KGZ1bmN0aW9uKEluc3RhamFtKSB7CgogICd1c2Ugc3RyaWN0JzsKCiAgLy8gIyBJbml0aWFsaXphdGlvbgoKICBJbnN0YWphbS5pbml0ID0gZnVuY3Rpb24ob3B0aW9ucykgewoKICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICAgIC8vIFRocm93IGFuIGVycm9yIGlmIGVpdGhlciB0aGUgY2xpZW50IElEIG9yIHRoZSAKICAgIC8vIHJlZGlyZWN0IFVSSSBpc24ndCBwcm92aWRlZC4KCiAgICBpZiAoIW9wdGlvbnMuY2xpZW50SWQgfHwgIW9wdGlvbnMucmVkaXJlY3RVcmkpIHsKICAgICAgdGhyb3cgbmV3IEluc3RhamFtRXJyb3IoIkNsaWVudCBJRCBhbmQgUmVkaXJlY3QgVVJJIGFyZSByZXF1aXJlZC4iKTsKICAgIH0KCiAgICAvLyBJZiB0aGUgYXBwIGlzIHJlcXVlc3RpbmcgYWRkaXRpb25hbCAKICAgIC8vIHNjb3BlcywgYnVpbGQgYSBzdHJpbmcgdG8gYXBwZW5kIHRvCiAgICAvLyB0aGUgYXV0aCBVUkwuCiAgICBpZiAob3B0aW9ucy5zY29wZSAmJiB0eXBlb2Ygb3B0aW9ucy5zY29wZSA9PT0gJ29iamVjdCcpIHsKICAgICAgdGhpcy5zY29wZSA9ICcmc2NvcGU9JyArIG9wdGlvbnMuc2NvcGUuam9pbignKycpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5zY29wZSA9ICcmc2NvcGU9YmFzaWMnOwogICAgfQoKICAgIC8vIEJ1aWxkIGFuIGF1dGhlbnRpY2F0aW9uIFVSTCB1c2luZwogICAgLy8gY29uc3RydWN0b3IgcGFyYW1ldGVycy4KICAgIHRoaXMuYXV0aFVybCA9ICdodHRwczovL2luc3RhZ3JhbS5jb20vb2F1dGgvYXV0aG9yaXplLz9jbGllbnRfaWQ9JyArIG9wdGlvbnMuY2xpZW50SWQgKyAnJnJlZGlyZWN0X3VyaT0nICsgb3B0aW9ucy5yZWRpcmVjdFVyaSArICcmcmVzcG9uc2VfdHlwZT10b2tlbicgKyAodGhpcy5zY29wZSB8fCAnJyk7CgogICAgLy8gV2hlbiB0aGUgbGlicmFyeSBpcyBpbml0aWFsaXplZCwgdmVyaWZ5IHdoZXRoZXIKICAgIC8vIGEgdXNlciBpcyBjdXJyZW50bHkgYXV0aGVudGljYXRlZC4KICAgIHRoaXMuYXV0aGVudGljYXRlKCk7CgogICAgcmV0dXJuIHRoaXM7CgogIH07CgogIC8vICMgQXV0aGVudGljYXRpb24KCiAgLy8gQXR0ZW1wdHMgdG8gYXV0aGVudGljYXRlIGEgdXNlciB2aWEgCiAgLy8gbG9jYWxTdG9yYWdlIGRhdGEgb3IgYnkgcGFyc2luZyBkYXRhIAogIC8vIGZyb20gdGhlIFVSTCBoYXNoLgoKICBJbnN0YWphbS5hdXRoZW50aWNhdGUgPSBmdW5jdGlvbigpIHsKCiAgICAvLyBGaXJzdCwgY2hlY2sgaWYgYSBsb2NhbFN0b3JhZ2Uga2V5IAogICAgLy8gZXhpc3RzIGZvciB0aGUgYWNjZXNzX3Rva2VuLi4uCiAgICAKICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaW5zdGFncmFtX2FjY2Vzc190b2tlbicpKSB7CiAgICAgIAogICAgICAvLyAuLi5hbmQgaWYgdGhlcmUgaXMsIHNldCB0aGUKICAgICAgLy8gYXV0aGVudGljYXRlZCBwcm9wZXJ0eSB0byB0cnVlLiAKICAgICAgdGhpcy5hdXRoZW50aWNhdGVkID0gdHJ1ZTsKICAgIAogICAgLy8gSWYgdGhlcmUgaXMgbm8gbG9jYWxTdG9yYWdlIGtleS4uLgogICAgCiAgICB9IGVsc2UgewogICAgICAKICAgICAgLy8gLi4udGhlbiBjaGVjayBpZiB0aGVyZSdzIGEgbWF0Y2gKICAgICAgLy8gZm9yIGFjY2Vzc190b2tlbiBpbiB0aGUgVVJMIGhhc2guCiAgICAgIGlmIChoYXNoUGFyYW0oJ2FjY2Vzc190b2tlbicpKSB7CiAgICAgICAgCiAgICAgICAgLy8gSWYgd2UgY2FuIHBhcnNlIHRoZSBhY2Nlc3NfdG9rZW4gZnJvbQogICAgICAgIC8vIHRoZSBVUkwgaGFzaCwgc2V0IHRoZSBsb2NhbFN0b3JhZ2UgcGFyYW0uLi4KICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaW5zdGFncmFtX2FjY2Vzc190b2tlbicsIGhhc2hQYXJhbSgnYWNjZXNzX3Rva2VuJywgdHJ1ZSkpOwogICAgICAgIAogICAgICAgIC8vIC4uLmFuZCBzZXQgdGhlIGF1dGhlbnRpY2F0ZWQgcHJvcGVydHkgdG8gdHJ1ZQogICAgICAgIHRoaXMuYXV0aGVudGljYXRlZCA9IHRydWU7CgogICAgICB9IGVsc2UgewogICAgICAgIAogICAgICAgIC8vIE90aGVyd2lzZSwgaWYgdGhlcmUgaXMgbm8gbG9jYWxTdG9yYWdlCiAgICAgICAgLy8ga2V5IGFuZCB0aGVyZSBpcyBub3RoaW5nIHRvIHBhcnNlIGZyb20KICAgICAgICAvLyB0aGUgaGFzaCwgc2V0IHRoZSBhdXRoZW50aWNhdGVkIAogICAgICAgIC8vIHByb3BlcnR5IHRvIGZhbHNlCiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGVkID0gZmFsc2U7CgogICAgICB9CgogICAgfQoKICB9OwoKICAvLyBFZmZlY3RpdmVseSBkZS1hdXRoZW50aWNhdGVzIHRoZSBjdXJyZW50IAogIC8vIHVzZXIgYnkgcmVtb3ZpbmcgdGhlaXIgYWNjZXNzIHRva2VuIGZyb20gCiAgLy8gbG9jYWxTdG9yYWdlIGFuZCBzZXR0aW5nIHRoZSBhdXRoZW50aWNhdGVkIAogIC8vIHByb3BlcnR5IHRvIGZhbHNlLiBUaGlzIGRvZXMgKipub3QqKiAKICAvLyByZXZva2UgeW91ciBhcHAncyBwZXJtaXNzaW9ucyBvbiB0aGUgc2VydmVyLgoKICBJbnN0YWphbS5kZWF1dGhlbnRpY2F0ZSA9IGZ1bmN0aW9uKCkgewogICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2luc3RhZ3JhbV9hY2Nlc3NfdG9rZW4nKTsKICAgIHRoaXMuYXV0aGVudGljYXRlZCA9IGZhbHNlOwogIH07CgogIC8vICMgRW5kcG9pbnRzCgogIC8vICMjIFVzZXJzCgogIHZhciBVc2VyID0gZnVuY3Rpb24oKSB7fTsKICB2YXIgU2VsZiA9IGZ1bmN0aW9uKCkge307CiAgVXNlci5wcm90b3R5cGUuc2VsZiA9IG5ldyBTZWxmKCk7CgogIC8vICMjIyBGZXRjaGluZyB0aGUgYXV0aGVudGljYXRlZCB1c2VycydzIHByb2ZpbGUKCiAgU2VsZi5wcm90b3R5cGUucHJvZmlsZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICByZXF1ZXN0KHsKICAgICAgdXJsOiAndXNlcnMvc2VsZicsCiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICB9KTsKICB9OwoKICAvLyAjIyMgRmV0Y2hpbmcgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlcidzIG1lZGlhCgogIFNlbGYucHJvdG90eXBlLm1lZGlhID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHsKCiAgICAvLyBNYWtlIHRoZSBvcHRpb25zIGFyZ3VtZW50IG9wdGlvbmFsCiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHsKICAgICAgY2FsbGJhY2sgPSBvcHRpb25zOwogICAgICBvcHRpb25zID0gbnVsbDsKICAgIH0KCiAgICAvLyBNYWtlIGEgcmVxdWVzdCB0byB0aGUgQVBJCiAgICByZXF1ZXN0KHsKICAgICAgdXJsOiAndXNlcnMvc2VsZi9tZWRpYS9yZWNlbnQnLAogICAgICBkYXRhOiBvcHRpb25zLAogICAgICBzdWNjZXNzOiBjYWxsYmFjawogICAgfSk7CgogIH07CgogIC8vICMjIyBGZXRjaGluZyB0aGUgYXV0aGVudGljYXRlZCB1c2VyJ3MgYWN0aXZpdHkgZmVlZAoKICBTZWxmLnByb3RvdHlwZS5mZWVkID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHsKICAgIAogICAgLy8gTWFrZSB0aGUgb3B0aW9ucyBhcmd1bWVudCBvcHRpb25hbAogICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgb3B0aW9ucyA9IG51bGw7CiAgICB9CgogICAgLy8gTWFrZSBhIHJlcXVlc3QgdG8gdGhlIEFQSQogICAgcmVxdWVzdCh7CiAgICAgIHVybDogJ3VzZXJzL3NlbGYvZmVlZCcsCiAgICAgIGRhdGE6IG9wdGlvbnMsCiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICB9KTsKCiAgfTsKCiAgLy8gIyMjIEZldGNoaW5nIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIncyBmYXZvcml0ZXMuCgogIFNlbGYucHJvdG90eXBlLmZhdm9yaXRlcyA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7CgogICAgLy8gTWFrZSB0aGUgb3B0aW9ucyBhcmd1bWVudCBvcHRpb25hbAogICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgb3B0aW9ucyA9IG51bGw7CiAgICB9CgogICAgLy8gTWFrZSBhIHJlcXVlc3QgdG8gdGhlIEFQSQogICAgcmVxdWVzdCh7CiAgICAgIHVybDogJ3VzZXJzL3NlbGYvbWVkaWEvbGlrZWQnLAogICAgICBkYXRhOiBvcHRpb25zLAogICAgICBzdWNjZXNzOiBjYWxsYmFjawogICAgfSk7CgogIH07CgogIC8vICMjIyBGZXRjaGluZyBhIGxpc3Qgb2YgcmVsYXRpb25zaGlwIHJlcXVlc3RzIGZvciB0aGUgY3VycmVudGx5IGF1dGhlbnRpY2F0ZWQgdXNlcgoKICBVc2VyLnByb3RvdHlwZS5yZXF1ZXN0cyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAKICAgIC8vIE1ha2UgYSByZXF1ZXN0IHRvIHRoZSBBUEkKICAgIHJlcXVlc3QoewogICAgICB1cmw6ICd1c2Vycy9zZWxmL3JlcXVlc3RlZC1ieScsCiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICB9KTsKCiAgfTsKCiAgLy8gIyMjIEdldHRpbmcgYSByZWxhdGlvbnNoaXAgaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50bHkgYXV0aGVuY2lhdGVkIHVzZXIgYW5kIGEgZ2l2ZW4gdXNlciBJRAoKICBVc2VyLnByb3RvdHlwZS5yZWxhdGlvbnNoaXBXaXRoID0gZnVuY3Rpb24oaWQsIGNhbGxiYWNrKSB7CiAgICAKICAgIC8vIE1ha2UgYSByZXF1ZXN0IHRvIHRoZSBBUEkKICAgIHJlcXVlc3QoewogICAgICB1cmw6ICd1c2Vycy8nICsgaWQgKyAnL3JlbGF0aW9uc2hpcCcsCiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICB9KTsKCiAgfTsKCiAgLy8gIyMjIEZldGNoaW5nIHRoZSBwcm9maWxlIG9mIGEgdXNlciBieSBJRCBvciB1c2VybmFtZQoKICBVc2VyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpZCwgY2FsbGJhY2spIHsKICAgIAogICAgLy8gUmVxdWlyZSB0aGF0IGFuIElEIG9yIHVzZXJuYW1lIGJlIHBhc3NlZAogICAgaWYgKCFpZCkgewogICAgICB0aHJvdyBuZXcgSW5zdGFqYW1FcnJvcignQSB1c2VyXCdzIElEIG9yIHVzZXJuYW1lIGlzIHJlcXVpcmVkIGZvciB1c2VyLmdldCgpJyk7CiAgICB9CgogICAgaWYgKHR5cGVvZiBpZCA9PT0gJ251bWJlcicpIHsKICAgICAgCiAgICAgIC8vIE1ha2UgYSByZXF1ZXN0IHRvIHRoZSBBUEkKICAgICAgcmVxdWVzdCh7CiAgICAgICAgdXJsOiAndXNlcnMvJyArIGlkLAogICAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICAgIH0pOwogICAgCiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHsKCiAgICAgIC8vIE1ha2UgYSByZXF1ZXN0IHRvIHRoZSBBUEkKICAgICAgVXNlci5wcm90b3R5cGUuc2VhcmNoLmNhbGwodGhpcywgaWQsIHt9LCBmdW5jdGlvbihyZXN1bHQpIHsKCiAgICAgICAgLy8gSWYgdGhlIGluaXRpYWwgdXNlciBzZWFyY2ggeWllbGRzIGFueQogICAgICAgIC8vIHJlc3VsdHMsIHRoZW4ganVzdCByZXR1cm4gdGhlIGZpcnN0LCBidXQKICAgICAgICAvLyBvdGhlcndpc2UgcmV0dXJuIG5vdGhpbmcuCiAgICAgICAgaWYgKHJlc3VsdC5kYXRhICYmIHJlc3VsdC5kYXRhLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmRhdGFbMF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdCA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgLy8gQ2FsbCB0aGUgaW5pdGlhbCBjYWxsYmFjaywgcGFzc2luZyB0aGUgcmVzdWx0CiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgY2FsbGJhY2socmVzdWx0KTsKICAgICAgICB9CgogICAgICB9KTsKCiAgICB9CiAgCiAgfTsKCiAgLy8gIyMjIEZldGNoaW5nIHRoZSBtZWRpYSBvZiBhIHVzZXIgSUQgb3IgdXNlcm5hbWUKCiAgVXNlci5wcm90b3R5cGUubWVkaWEgPSBmdW5jdGlvbihpZCwgb3B0aW9ucywgY2FsbGJhY2spIHsKCiAgICAvLyBSZXF1aXJlIHRoYXQgYW4gSUQgYmUgcGFzc2VkCiAgICAKICAgIGlmICghaWQpIHsKICAgICAgdGhyb3cgbmV3IEluc3RhamFtRXJyb3IoJ0EgdXNlclwncyBJRCBvciB1c2VybmFtZSBpcyByZXF1aXJlZCBmb3IgdXNlci5tZWRpYSgpJyk7CiAgICB9CgogICAgLy8gTWFrZSB0aGUgb3B0aW9ucyBhcmd1bWVudCBvcHRpb25hbAogICAgCiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicgJiYgIWNhbGxiYWNrKSB7CiAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgb3B0aW9ucyA9IG51bGw7CiAgICB9CgogICAgLy8gSWYgd2UncmUgbG9va2luZyB1cCB0aGUgdXNlciBieSBJRC4uLgogICAgCiAgICBpZiAodHlwZW9mIGlkID09PSAnbnVtYmVyJykgewogICAgICAKICAgICAgLy8gTWFrZSBhIHJlcXVlc3QgdG8gdGhhdCBBUEkKICAgICAgcmVxdWVzdCh7CiAgICAgICAgdXJsOiAndXNlcnMvJyArIGlkICsgJy9tZWRpYS9yZWNlbnQnLAogICAgICAgIGRhdGE6IG9wdGlvbnMsCiAgICAgICAgc3VjY2VzczogY2FsbGJhY2sKICAgICAgfSk7CiAgICAKICAgIH0KCiAgICAvLyBPciByYXRoZXIgbG9va2luZyB1cCB0aGUgdXNlciBieSB1c2VybmFtZS4uLgoKICAgIGVsc2UgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHsKCiAgICAgIC8vIC4uLnRoZW4gZmlyc3Qgc2VhcmNoIGZvciB0aGUgdXNlcm5hbWUuLi4KICAgICAgVXNlci5wcm90b3R5cGUuc2VhcmNoLmNhbGwodGhpcywgaWQsIHt9LCBmdW5jdGlvbihyZXN1bHQpIHsKCiAgICAgICAgLy8gSWYgdGhlIGluaXRpYWwgdXNlciBzZWFyY2ggeWllbGRzIGFueQogICAgICAgIC8vIHJlc3VsdHMsIHRoZW4ganVzdCByZXR1cm4gdGhlIGZpcnN0LCBidXQKICAgICAgICAvLyBvdGhlcndpc2UgcmV0dXJuIG5vdGhpbmcuCiAgICAgICAgaWYgKHJlc3VsdC5kYXRhICYmIHJlc3VsdC5kYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kYXRhWzBdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGlmIChyZXN1bHQpIHsKCiAgICAgICAgICAvLyBNYWtlIGEgcmVxdWVzdCB0byB0aGF0IEFQSQogICAgICAgICAgcmVxdWVzdCh7CiAgICAgICAgICAgIHVybDogJ3VzZXJzLycgKyByZXN1bHQuaWQgKyAnL21lZGlhL3JlY2VudCcsCiAgICAgICAgICAgIGRhdGE6IG9wdGlvbnMsCiAgICAgICAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICAgICAgICB9KTsKCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCk7CiAgICAgICAgICB9CgogICAgICAgIH0KCiAgICAgIH0pOwoKICAgIH0KCiAgfTsKCiAgLy8gIyMjIFNlYXJjaGluZyBmb3IgdXNlcnMgYnkgdXNlcm5hbWUKCiAgVXNlci5wcm90b3R5cGUuc2VhcmNoID0gZnVuY3Rpb24odGVybSwgb3B0aW9ucywgY2FsbGJhY2spIHsKICAgIAogICAgLy8gUmVxdWlyZSB0aGF0IGEgc2VhcmNoIHRlcm0gYmUgcGFzc2VkCiAgICBpZiAoIXRlcm0pIHsKICAgICAgdGhyb3cgbmV3IEluc3RhamFtRXJyb3IoJ0Egc2VhcmNoIHRlcm0gaXMgcmVxdWlyZWQgZm9yIHVzZXIuc2VhcmNoKCknKTsKICAgIH0KCiAgICAvLyBNYWtlIHRoZSBvcHRpb25zIGFyZ3VtZW50IG9wdGlvbmFsCiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHsKICAgICAgY2FsbGJhY2sgPSBvcHRpb25zOwogICAgICBvcHRpb25zID0ge307CiAgICB9CgogICAgLy8gQWRkIHRoZSBzZWFyY2ggdGVybSB0byB0aGUgb3B0aW9ucyBvYmplY3QKICAgIG9wdGlvbnMucSA9IHRlcm07CgogICAgLy8gTWFrZSBhIHJlcXVlc3QgdG8gdGhlIEFQSQogICAgcmVxdWVzdCh7CiAgICAgIHVybDogJ3VzZXJzL3NlYXJjaCcsCiAgICAgIGRhdGE6IG9wdGlvbnMsCiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICB9KTsKCiAgfTsKCiAgLy8gIyMjIEZldGNoaW5nIGEgbGlzdCBvZiB1c2VycyB0aGF0IHVzZXIgW2lkXSBmb2xsb3dzCgogIFVzZXIucHJvdG90eXBlLmZvbGxvd3MgPSBmdW5jdGlvbihpZCwgY2FsbGJhY2spIHsKICAgIAogICAgLy8gTWFrZSBhIHJlcXVlc3QgdG8gdGhlIEFQSQogICAgcmVxdWVzdCh7CiAgICAgIHVybDogJ3VzZXJzLycgKyBpZCArICcvZm9sbG93cycsCiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICB9KTsKCiAgfTsKCiAgLy8gIyMjIEZldGNoaW5nIGEgbGlzdCBvZiBmb2xsb3dlcnMgb2YgdXNlciBbaWRdCgogIFVzZXIucHJvdG90eXBlLmZvbGxvd2luZyA9IGZ1bmN0aW9uKGlkLCBjYWxsYmFjaykgewogICAgCiAgICAvLyBNYWtlIGEgcmVxdWVzdCB0byB0aGUgQVBJCiAgICByZXF1ZXN0KHsKICAgICAgdXJsOiAndXNlcnMvJyArIGlkICsgJy9mb2xsb3dlZC1ieScsCiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICB9KTsKCiAgfTsKCiAgLy8gIyMgTWVkaWEKCiAgdmFyIE1lZGlhID0gZnVuY3Rpb24oKSB7fTsKCiAgTWVkaWEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGlkLCBjYWxsYmFjaykgewoKICAgIC8vIE1ha2UgYSByZXF1ZXN0IHRvIHRoZSBBUEkKICAgIHJlcXVlc3QoewogICAgICB1cmw6ICdtZWRpYS8nICsgaWQsCiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICB9KTsKCiAgfTsKCiAgTWVkaWEucHJvdG90eXBlLnNlYXJjaCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7CgogICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgogICAgLy8gUmVxdWlyZSB0aGF0IGEgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBhcmUKICAgIC8vIHBhc3NlZCBpbiwgYXQgYSBtaW5pbXVtLgogICAgaWYgKCFvcHRpb25zLmxhdCB8fCAhb3B0aW9ucy5sbmcpIHsKICAgICAgdGhyb3cgbmV3IEluc3RhamFtRXJyb3IoJ0EgbGF0aXR1ZGUgQU5EIGEgbG9uZ2l0dWRlIGFyZSByZXF1aXJlZCBmb3IgbWVkaWEuc2VhcmNoKCknKTsKICAgIH0KCiAgICAvLyBNYWtlIGEgcmVxdWVzdCB0byB0aGUgQVBJCiAgICByZXF1ZXN0KHsKICAgICAgdXJsOiAnbWVkaWEvc2VhcmNoJywKICAgICAgZGF0YTogb3B0aW9ucywKICAgICAgc3VjY2VzczogY2FsbGJhY2sKICAgIH0pOwoKICB9OwoKICBNZWRpYS5wcm90b3R5cGUucG9wdWxhciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CgogICAgLy8gTWFrZSBhIHJlcXVlc3QgdG8gdGhlIEFQSQogICAgcmVxdWVzdCh7CiAgICAgIHVybDogJ21lZGlhL3BvcHVsYXInLAogICAgICBzdWNjZXNzOiBjYWxsYmFjawogICAgfSk7CgogIH07CgogIE1lZGlhLnByb3RvdHlwZS5jb21tZW50cyA9IGZ1bmN0aW9uKGlkLCBjYWxsYmFjaykgewoKICAgIGlmICghaWQpIHsKICAgICAgdGhyb3cgbmV3IEluc3RhamFtRXJyb3IoJ0EgbWVkaWEgSUQgaXMgcmVxdWlyZWQgZm9yIG1lZGlhLmNvbW1lbnRzKCknKTsKICAgIH0KCiAgICAvLyBNYWtlIGEgcmVxdWVzdCB0byB0aGUgQVBJCiAgICByZXF1ZXN0KHsKICAgICAgdXJsOiAnbWVkaWEvJyArIGlkICsgJy9jb21tZW50cycsCiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICB9KTsKCiAgfTsKCiAgTWVkaWEucHJvdG90eXBlLmxpa2VzID0gZnVuY3Rpb24oaWQsIGNhbGxiYWNrKSB7CgogICAgaWYgKCFpZCkgewogICAgICB0aHJvdyBuZXcgSW5zdGFqYW1FcnJvcignQSBtZWRpYSBJRCBpcyByZXF1aXJlZCBmb3IgbWVkaWEubGlrZXMoKScpOwogICAgfQoKICAgIC8vIE1ha2UgYSByZXF1ZXN0IHRvIHRoZSBBUEkKICAgIHJlcXVlc3QoewogICAgICB1cmw6ICdtZWRpYS8nICsgaWQgKyAnL2xpa2VzJywKICAgICAgc3VjY2VzczogY2FsbGJhY2sKICAgIH0pOwoKICB9OwoKICAvLyAjIyBUYWdzCgogIHZhciBUYWcgPSBmdW5jdGlvbigpIHt9OwoKICBUYWcucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrKSB7CiAgICAKICAgIC8vIFdlIG5lZWQgYXQgbGVhc3QgYSB0YWcgbmFtZSB0byBnZXQgaW5mb3JtYXRpb24gZm9yCiAgICBpZiAoIW5hbWUpIHsKICAgICAgdGhyb3cgbmV3IEluc3RhamFtRXJyb3IoJ0EgdGFnIG5hbWUgaXMgcmVxdWlyZWQgZm9yIHRhZy5nZXQoKScpOwogICAgfQoKICAgIC8vIE1ha2UgYSByZXF1ZXN0IHRvIHRoZSBBUEkKICAgIHJlcXVlc3QoewogICAgICB1cmw6ICd0YWdzLycgKyBuYW1lLAogICAgICBzdWNjZXNzOiBjYWxsYmFjawogICAgfSk7CgogIH07CgogIFRhZy5wcm90b3R5cGUubWVkaWEgPSBmdW5jdGlvbihuYW1lLCBvcHRpb25zLCBjYWxsYmFjaykgewogICAgICAKICAgIC8vIFdlIG5lZWQgYXQgbGVhc3QgYSB0YWcgbmFtZSB0byB3b3JrIHdpdGgKICAgIGlmICghbmFtZSkgewogICAgICB0aHJvdyBuZXcgSW5zdGFqYW1FcnJvcignQSB0YWcgbmFtZSBpcyByZXF1aXJlZCBmb3IgdGFnLm1lZGlhKCknKTsKICAgIH0KCiAgICAvLyBNYWtlIHRoZSBvcHRpb25zIGFyZ3VtZW50IG9wdGlvbmFsCiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicgJiYgIWNhbGxiYWNrKSB7CiAgICAgIGNhbGxiYWNrID0gb3B0aW9uczsKICAgICAgb3B0aW9ucyA9IHt9OwogICAgfQoKICAgIC8vIE1ha2UgYSByZXF1ZXN0IHRvIHRoZSBBUEkKICAgIHJlcXVlc3QoewogICAgICB1cmw6ICd0YWdzLycgKyBuYW1lICsgJy9tZWRpYS9yZWNlbnQnLAogICAgICBkYXRhOiBvcHRpb25zLAogICAgICBzdWNjZXNzOiBjYWxsYmFjawogICAgfSk7CgogIH07CgogIFRhZy5wcm90b3R5cGUuc2VhcmNoID0gZnVuY3Rpb24odGVybSwgY2FsbGJhY2spIHsKICAgIAogICAgLy8gV2UgbmVlZCBhdCBsZWFzdCBhIHRhZyBzdHJpbmcgdG8gc2VhcmNoIGZvcgogICAgaWYgKCF0ZXJtKSB7CiAgICAgIHRocm93IG5ldyBJbnN0YWphbUVycm9yKCdBIHRhZyBuYW1lIGlzIHJlcXVpcmVkIGZvciB0YWcuc2VhcmNoKCknKTsKICAgIH0KCiAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgcTogdGVybQogICAgfTsKCiAgICAvLyBNYWtlIGEgcmVxdWVzdCB0byB0aGUgQVBJCiAgICByZXF1ZXN0KHsKICAgICAgdXJsOiAnL3RhZ3Mvc2VhcmNoJywKICAgICAgZGF0YTogb3B0aW9ucywKICAgICAgc3VjY2VzczogY2FsbGJhY2sKICAgIH0pOwoKICB9OwoKICAvLyAjIyBMb2NhdGlvbnMKCiAgdmFyIExvY2F0aW9uID0gZnVuY3Rpb24oKSB7fTsKCiAgTG9jYXRpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGlkLCBjYWxsYmFjaykgewogICAgCiAgICAvLyBXZSBuZWVkIGF0IGxlYXN0IGEgbG9jYXRpb24gSUQgdG8gd29yayB3aXRoCiAgICBpZiAoIWlkKSB7CiAgICAgIHRocm93IG5ldyBJbnN0YWphbUVycm9yKCdBbiBJRCBpcyByZXF1aXJlZCBmb3IgbG9jYXRpb24uZ2V0KCknKTsKICAgIH0KCiAgICAvLyBNYWtlIGEgcmVxdWVzdCB0byB0aGUgQVBJCiAgICByZXF1ZXN0KHsKICAgICAgdXJsOiAnbG9jYXRpb25zLycgKyBpZCwKICAgICAgc3VjY2VzczogY2FsbGJhY2sKICAgIH0pOwoKICB9OwoKICBMb2NhdGlvbi5wcm90b3R5cGUubWVkaWEgPSBmdW5jdGlvbihpZCwgb3B0aW9ucywgY2FsbGJhY2spIHsKICAgIAogICAgLy8gV2UgbmVlZCBhdCBsZWFzdCBhIGxvY2F0aW9uIElEIHRvIHdvcmsgd2l0aAogICAgaWYgKCFpZCkgewogICAgICB0aHJvdyBuZXcgSW5zdGFqYW1FcnJvcignQW4gSUQgaXMgcmVxdWlyZWQgZm9yIGxvY2F0aW9uLmdldCgpJyk7CiAgICB9CgogICAgLy8gTWFrZSB0aGUgb3B0aW9ucyBhcmd1bWVudCBvcHRpb25hbAogICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nICYmICFjYWxsYmFjaykgewogICAgICBjYWxsYmFjayA9IG9wdGlvbnM7CiAgICAgIG9wdGlvbnMgPSB7fTsKICAgIH0KCiAgICAvLyBNYWtlIGEgcmVxdWVzdCB0byB0aGUgQVBJCiAgICByZXF1ZXN0KHsKICAgICAgdXJsOiAnbG9jYXRpb25zLycgKyBpZCArICcvbWVkaWEvcmVjZW50JywKICAgICAgc3VjY2VzczogY2FsbGJhY2sKICAgIH0pOwoKICB9OwoKICBMb2NhdGlvbi5wcm90b3R5cGUuc2VhcmNoID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHsKICAKICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICAgIC8vIFdlIG5lZWQgYXQgTEVBU1QgYSBsYXQvbG5nIHBhaXIsIG9yIGEgRm91cnNxdWFyZSBJRCB0byB3b3JrIHdpdGgKICAgIGlmICggKCFvcHRpb25zLmxhdCB8fCAhb3B0aW9ucy5sbmcpICYmICFvcHRpb25zLmZvdXJzcXVhcmVfdjJfaWQpIHsKICAgICAgdGhyb3cgbmV3IEluc3RhamFtRXJyb3IoJ0EgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBPUiBhIEZvdXJzcXVhcmUgcGxhY2UgSUQgaXMgcmVxdWlyZWQgZm9yIGxvY2F0aW9uLnNlYXJjaCgpJyk7CiAgICB9CgogICAgLy8gTWFrZSBhIHJlcXVlc3QgdG8gdGhlIEFQSQogICAgcmVxdWVzdCh7CiAgICAgIHVybDogJ2xvY2F0aW9ucy9zZWFyY2gnLAogICAgICBkYXRhOiBvcHRpb25zLAogICAgICBzdWNjZXNzOiBjYWxsYmFjawogICAgfSk7CgogIH07CgogIC8vICMjIEdlb2dyYXBoaWVzCgogIHZhciBHZW9ncmFwaHkgPSBmdW5jdGlvbigpIHt9OwoKICBHZW9ncmFwaHkucHJvdG90eXBlLm1lZGlhID0gZnVuY3Rpb24oaWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7CiAgICAgIAogICAgLy8gV2UgbmVlZCBhdCBsZWFzdCBhIEdlb2dyYXBoeSBJRCB0byB3b3JrIHdpdGgKICAgIGlmICghaWQpIHsKICAgICAgdGhyb3cgbmV3IEluc3RhamFtRXJyb3IoJ0EgR2VvZ3JhcGh5IElEIGlzIHJlcXVpcmVkIGZvciBnZW9ncmFwaHkuZ2V0KCknKTsKICAgIH0KCiAgICAvLyBUaGUgb3B0aW9ucyBhcmd1bWVudCBkZWZhdWx0cyB0byBhbiBlbXB0eSBvYmplY3QKICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICAgIC8vIE1ha2UgYSByZXF1ZXN0IHRvIHRoZSBBUEkKICAgIHJlcXVlc3QoewogICAgICB1cmw6ICdnZW9ncmFwaGllcy8nICsgaWQgKyAnL21lZGlhL3JlY2VudCcsCiAgICAgIGRhdGE6IG9wdGlvbnMsCiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrCiAgICB9KTsKCiAgfTsKCiAgLy8gIyBIZWxwZXJzCgogIC8vIFJldHVybnMgdGhlIGNsaWVudC1zcGVjaWZpYyBhdXRoZW50aWNhdGlvbiBVUkwgdGhhdCBpcyBjcmVhdGVkIHVwb24gaW5pdGlhbGl6YXRpb24uCgogIC8vIFBhcnNlcyBhIGdpdmVuIHBhcmFtZXRlciBmcm9tIHRoZSBicm93c2VycyBoYXNoLiAKICAvLyBPcHRpb25hbGx5LCB0aGUgcGFyYW1ldGVyIGNhbiBiZSByZW1vdmVkIGZyb20gCiAgLy8gdGhlIFVSTCB1cG9uIHN1Y2Nlc3NmdWwgbWF0Y2hpbmcuCgogIGZ1bmN0aW9uIGhhc2hQYXJhbSAocGFyYW0sIHJlbW92ZSkgewoKICAgIC8vIENyZWF0ZSBhIFJlZ0V4cCBvYmplY3QgZm9yIHBhcnNpbmcgcGFyYW1zCiAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCIoPzomfCMpIiArIHBhcmFtICsgIj0oW2EtejAtOS5fLV0rKSIsICJpIik7CgogICAgLy8gTG9vayBmb3IgbWF0Y2hlcyBpbiB0aGUgd2luZG93cyBoYXNoCiAgICB2YXIgbWF0Y2hlcyA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLm1hdGNoKHJlZ2V4KTsKCiAgICAvLyBJZiBtYXRjaGVzIGFyZSBmb3VuZC4uLgogICAgaWYgKG1hdGNoZXMpIHsKCiAgICAgIC8vIC4uLnRoZW4gcmVtb3ZlIHRoZSBwYXJhbWV0ZXIgaWYgc3BlY2lmaWVkCiAgICAgIGlmIChyZW1vdmUpIHsKICAgICAgICB2YXIgcmVtb3ZlUmVnZXggPSBuZXcgUmVnRXhwKCIoPzomfCMpIiArIHBhcmFtICsgIj0iICsgbWF0Y2hlc1sxXSwgImkiKTsKICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UocmVtb3ZlUmVnZXgsICcnKTsKICAgICAgfQoKICAgICAgLy8gLi4uYW5kIHJldHVybiB0aGUgZmlyc3QgbWF0Y2hpbmcgcGFyYW0KICAgICAgcmV0dXJuIG1hdGNoZXNbMV07CgogICAgfQoKICAgIC8vIE90aGVyd2lzZSByZXR1cm4gZmFsc2UgaWYgbm8gbWF0Y2hpbmcgcGFyYW1zIGFyZSBmb3VuZAogICAgcmV0dXJuIGZhbHNlOwoKICB9CgogIC8vIE1ha2VzIEpTT05QIHJlcXVlc3RzIHRvIHRoZSBJbnN0YWdyYW0gQVBJCgogIGZ1bmN0aW9uIHJlcXVlc3QgKG9wdGlvbnMpIHsKCiAgICB2YXIgdXJsQmFzZSA9ICdodHRwczovL2FwaS5pbnN0YWdyYW0uY29tL3YxLycsCiAgICAgICAgY2FsbGJhY2tOYW1lID0gJ2luc3RhamFtJyArIE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCk7CgogICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICBvcHRpb25zLmRhdGEgPSBvcHRpb25zLmRhdGEgfHwge307CiAgICBvcHRpb25zLmRhdGEuYWNjZXNzX3Rva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2luc3RhZ3JhbV9hY2Nlc3NfdG9rZW4nKTsKICAgIG9wdGlvbnMuZGF0YS5jYWxsYmFjayA9IGNhbGxiYWNrTmFtZTsKICAgIAogICAgdmFyIHF1ZXJ5U3RyaW5nID0gc2VyaWFsaXplUGFyYW1zKG9wdGlvbnMuZGF0YSk7CgogICAgaWYgKG9wdGlvbnMudXJsKSB7CiAgICAgIG9wdGlvbnMudXJsID0gdXJsQmFzZSArIG9wdGlvbnMudXJsICsgJz8nICsgcXVlcnlTdHJpbmc7CgogICAgICB3aW5kb3dbY2FsbGJhY2tOYW1lXSA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgIAogICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zdWNjZXNzID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBvcHRpb25zLnN1Y2Nlc3MoZGF0YSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7CiAgICAgICAgZGVsZXRlIHdpbmRvd1tjYWxsYmFja05hbWVdOwogICAgICB9OwoKICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgICBzY3JpcHQuc3JjID0gb3B0aW9ucy51cmw7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTsKCiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgSW5zdGFqYW1FcnJvcigiSW5zdGFqYW06OiBNaXNzaW5nIHJlcXVlc3QgVVJMIik7CiAgICB9CgogIH0KCiAgLy8gR2l2ZW4gYSBKYXZhU2NyaXB0IG9iamVjdCwgcmV0dXJuIGEgCiAgLy8gc3RyaW5nIHN1aXRhYmxlIGZvciBwYXNzaW5nIGluIGEgVVJMCgogIGZ1bmN0aW9uIHNlcmlhbGl6ZVBhcmFtcyAob2JqKSB7CiAgICB2YXIgc3RyID0gW107CiAgICBmb3IgKHZhciBwIGluIG9iaikgewogICAgICBzdHIucHVzaChlbmNvZGVVUklDb21wb25lbnQocCkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW3BdKSk7CiAgICB9CiAgICByZXR1cm4gc3RyLmpvaW4oJyYnKTsKICB9CgogIC8vIERlZmluZSBhIGN1c3RvbSBlcnJvciBvYmplY3QKCiAgZnVuY3Rpb24gSW5zdGFqYW1FcnJvciAobWVzc2FnZSkgewogICAgdGhpcy5uYW1lID0gIkluc3RhamFtRXJyb3IiOwogICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSB8fCAnJzsKICB9CgogIEluc3RhamFtRXJyb3IucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlOwoKICAvLyBSZXR1cm4gbmV3IGluc3RhbmNlcyBvZiB0aGUgZW5kcG9pbnQgCiAgLy8gaGVscGVycyBhcyB0b3AtbGV2ZWwga2V5cwoKICBJbnN0YWphbS51c2VyID0gbmV3IFVzZXIoKTsKICBJbnN0YWphbS5tZWRpYSA9IG5ldyBNZWRpYSgpOwogIEluc3RhamFtLnRhZyA9IG5ldyBUYWcoKTsKICBJbnN0YWphbS5sb2NhdGlvbiA9IG5ldyBMb2NhdGlvbigpOwogIC8vIEluc3RhamFtLmdlb2dyYXBoeSA9IG5ldyBHZW9ncmFwaHkoKTsKCn0od2luZG93Lkluc3RhamFtID0gd2luZG93Lkluc3RhamFtIHx8IHt9KSk7",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 04:52:42 GMT",
                    "Content-Length": "15627",
                    "Date": "Fri, 07 Nov 2014 04:52:42 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}