{
    "url": "http://localhost:9999/Breeze/breeze.js.bower/adapters/breeze.dataService.mongo.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cookie manipulation (DOM-based)",
    "issueType": 5245696,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based cookie manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the value of a cookie in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will set an arbitrary value in the user's cookie.<br><br>The potential impact of the vulnerability depends on the role that the cookie plays within the application. If the cookie is used to control the behavior that results from certain user actions (for example, a 'production' versus 'demo' mode setting), then the attacker may be able to cause the user to perform unintended actions by manipulating the cookie's value. If the cookie is used to track the user's session, then the attacker may be able to perform a session fixation attack, in which they set the cookie's value to a valid token that they have obtained from the application, and then hijack the session during the victim user's subsequent interaction with the application.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cookie manipulation vulnerabilities is not to dynamically write to cookies using data that originated from any untrusted source. This behavior should never be implemented for cookies that have any role in controlling privileged actions or user sessions within the application.",
    "issueDetail": "The application may be vulnerable to DOM-based cookie manipulation. Data is read from <b>document.cookie</b> and written to <b>document.cookie</b> via the following statements:<ul><li>var cookieList = document.cookie.split('; ');</li><li>var cookie = cookieList[i].split('=');</li><li>machine = cookie[1];</li><li>document.cookie = 'mongoMachineId=' + machine + ';expires=Tue, 19 Jan 2038 05:00:00 GMT';</li></ul>Because the data originates from a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability. ",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/Breeze/breeze.js.bower/adapters/breeze.dataService.mongo.js",
                "path": "/Breeze/breeze.js.bower/adapters/breeze.dataService.mongo.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9CcmVlemUvYnJlZXplLmpzLmJvd2VyL2FkYXB0ZXJzL2JyZWV6ZS5kYXRhU2VydmljZS5tb25nby5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNzg4Mg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KRGF0ZTogVGh1LCAwNiBOb3YgMjAxNCAxNDowNjoyMSBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMDYgTm92IDIwMTQgMTQ6MDY6MjAgR01UDQoNCihmdW5jdGlvbiAoZGVmaW5pdGlvbiwgZ2xvYmFsKSB7CiAgdmFyIGZhY3RvcnkgPSBmdW5jdGlvbiAoYnJlZXplKSB7CiAgICByZXR1cm4gZGVmaW5pdGlvbihicmVlemUsIGdsb2JhbCk7CiAgfTsKCiAgaWYgKGJyZWV6ZSkgewogICAgZmFjdG9yeShicmVlemUpOwogIH0gZWxzZSBpZiAodHlwZW9mIHJlcXVpcmUgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIGV4cG9ydHMgPT09ICJvYmplY3QiICYmIHR5cGVvZiBtb2R1bGUgPT09ICJvYmplY3QiKSB7CiAgICAvLyBDb21tb25KUyBvciBOb2RlOiBoYXJkLWNvZGVkIGRlcGVuZGVuY3kgb24gImJyZWV6ZSIKICAgIGZhY3RvcnkocmVxdWlyZSgiYnJlZXplIikpOwogIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmVbImFtZCJdICYmICFicmVlemUpIHsKICAgIC8vIEFNRCBhbm9ueW1vdXMgbW9kdWxlIHdpdGggaGFyZC1jb2RlZCBkZXBlbmRlbmN5IG9uICJicmVlemUiCiAgICBkZWZpbmUoWyJicmVlemUiXSwgZmFjdG9yeSk7CiAgfQp9KGZ1bmN0aW9uIChicmVlemUsIGdsb2JhbCkgewogICJ1c2Ugc3RyaWN0IjsKCiAgdmFyIEpzb25SZXN1bHRzQWRhcHRlciA9IGJyZWV6ZS5Kc29uUmVzdWx0c0FkYXB0ZXI7CiAgdmFyIEFic3RyYWN0RGF0YVNlcnZpY2VBZGFwdGVyID0gYnJlZXplLkFic3RyYWN0RGF0YVNlcnZpY2VBZGFwdGVyOwoKICBmdW5jdGlvbiBmbXRPRGF0YSh2YWwpIHsKICAgIHJldHVybiB2YWwgPT0gbnVsbCA/IG51bGwgOiAiJyIgKyB2YWwgKyAiJyI7CiAgfQoKICBmdW5jdGlvbiBnZXROZXh0T2JqZWN0SWQoKSB7CiAgICByZXR1cm4gbmV3IE9iamVjdElkKCkudG9TdHJpbmcoKTsKICB9CgogIHZhciBjdG9yID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5uYW1lID0gIm1vbmdvIjsKICAgIGJyZWV6ZS5EYXRhVHlwZS5Nb25nb09iamVjdElkID0gYnJlZXplLkRhdGFUeXBlLmFkZFN5bWJvbCh7CiAgICAgIGRlZmF1bHRWYWx1ZTogIiIsCiAgICAgIGZtdE9EYXRhOiBmbXRPRGF0YSwKICAgICAgZ2V0TmV4dDogZ2V0TmV4dE9iamVjdElkCiAgICB9KTsKICB9OwoKICB2YXIgcHJvdG8gPSBjdG9yLnByb3RvdHlwZSA9IG5ldyBBYnN0cmFjdERhdGFTZXJ2aWNlQWRhcHRlcigpOwoKICBwcm90by5fcHJlcGFyZVNhdmVCdW5kbGUgPSBmdW5jdGlvbiAoc2F2ZUNvbnRleHQsIHNhdmVCdW5kbGUpIHsKICAgIHZhciBjaGFuZ2VSZXF1ZXN0SW50ZXJjZXB0b3IgPSB0aGlzLl9jcmVhdGVDaGFuZ2VSZXF1ZXN0SW50ZXJjZXB0b3Ioc2F2ZUNvbnRleHQsIHNhdmVCdW5kbGUpOwogICAgdmFyIGVtID0gc2F2ZUNvbnRleHQuZW50aXR5TWFuYWdlcjsKICAgIHZhciBtZXRhZGF0YVN0b3JlID0gZW0ubWV0YWRhdGFTdG9yZTsKICAgIHZhciBoZWxwZXIgPSBlbS5oZWxwZXI7CiAgICB2YXIgbWV0YWRhdGEgPSB7fTsKCiAgICBzYXZlQnVuZGxlLmVudGl0aWVzID0gc2F2ZUJ1bmRsZS5lbnRpdGllcy5tYXAoZnVuY3Rpb24gKGUsIGl4KSB7CiAgICAgIHZhciByYXdFbnRpdHkgPSBoZWxwZXIudW53cmFwSW5zdGFuY2UoZSk7CiAgICAgIHZhciBlbnRpdHlUeXBlTmFtZSA9IGUuZW50aXR5VHlwZS5uYW1lOwogICAgICB2YXIgZXRJbmZvID0gbWV0YWRhdGFbZW50aXR5VHlwZU5hbWVdOwogICAgICBpZiAoIWV0SW5mbykgewogICAgICAgIGV0SW5mbyA9IHt9OwogICAgICAgIHZhciBlbnRpdHlUeXBlID0gZS5lbnRpdHlUeXBlOwogICAgICAgIGV0SW5mby5lbnRpdHlUeXBlTmFtZSA9IGVudGl0eVR5cGVOYW1lOwogICAgICAgIGV0SW5mby5kZWZhdWx0UmVzb3VyY2VOYW1lID0gZW50aXR5VHlwZS5kZWZhdWx0UmVzb3VyY2VOYW1lOwogICAgICAgIGV0SW5mby5hdXRvR2VuZXJhdGVkS2V5VHlwZSA9IGVudGl0eVR5cGUuYXV0b0dlbmVyYXRlZEtleVR5cGUubmFtZTsKICAgICAgICBldEluZm8uZGF0YVByb3BlcnRpZXMgPSBlbnRpdHlUeXBlLmRhdGFQcm9wZXJ0aWVzLm1hcChmdW5jdGlvbiAoZHApIHsKICAgICAgICAgIHZhciBwID0geyBuYW1lOiBkcC5uYW1lT25TZXJ2ZXIsIGRhdGFUeXBlOiBkcC5kYXRhVHlwZS5uYW1lIH07CiAgICAgICAgICBpZiAoZHAucmVsYXRlZE5hdmlnYXRpb25Qcm9wZXJ0eSAhPSBudWxsKSB7CiAgICAgICAgICAgIHAuaXNGayA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZHAuY29uY3VycmVuY3lNb2RlICYmIGRwLmNvbmN1cnJlbmN5TW9kZSA9PT0gIkZpeGVkIikgewogICAgICAgICAgICBwLmlzQ29uY3VycmVuY3lQcm9wID0gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBwOwogICAgICAgIH0pOwoKICAgICAgICBtZXRhZGF0YVtlbnRpdHlUeXBlTmFtZV0gPSBldEluZm87CiAgICAgICAgaWYgKCFtZXRhZGF0YS5kZWZhdWx0TmFtZXNwYWNlKSB7CiAgICAgICAgICBtZXRhZGF0YS5kZWZhdWx0TmFtZXNwYWNlID0gZS5lbnRpdHlUeXBlLm5hbWVzcGFjZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdmFyIG9yaWdpbmFsVmFsdWVzT25TZXJ2ZXIgPSBoZWxwZXIudW53cmFwT3JpZ2luYWxWYWx1ZXMoZSwgbWV0YWRhdGFTdG9yZSk7CgogICAgICByYXdFbnRpdHkuZW50aXR5QXNwZWN0ID0gewogICAgICAgIGVudGl0eVR5cGVOYW1lOiBlbnRpdHlUeXBlTmFtZSwKICAgICAgICBlbnRpdHlTdGF0ZTogZS5lbnRpdHlBc3BlY3QuZW50aXR5U3RhdGUubmFtZSwKICAgICAgICBvcmlnaW5hbFZhbHVlc01hcDogb3JpZ2luYWxWYWx1ZXNPblNlcnZlcgogICAgICB9OwogICAgICByYXdFbnRpdHkgPSBjaGFuZ2VSZXF1ZXN0SW50ZXJjZXB0b3IuZ2V0UmVxdWVzdChyYXdFbnRpdHksIGUsIGl4KTsKICAgICAgcmV0dXJuIHJhd0VudGl0eTsKICAgIH0pOwoKICAgIHNhdmVCdW5kbGUubWV0YWRhdGEgPSBtZXRhZGF0YTsKICAgIHNhdmVCdW5kbGUuc2F2ZU9wdGlvbnMgPSB7IHRhZzogc2F2ZUJ1bmRsZS5zYXZlT3B0aW9ucy50YWcgfTsKICAgIGNoYW5nZVJlcXVlc3RJbnRlcmNlcHRvci5kb25lKHNhdmVCdW5kbGUuZW50aXRpZXMpOwogICAgcmV0dXJuIHNhdmVCdW5kbGU7CiAgfTsKCiAgcHJvdG8uX3ByZXBhcmVTYXZlUmVzdWx0ID0gZnVuY3Rpb24gKHNhdmVDb250ZXh0LCBkYXRhKSB7CgogICAgdmFyIGVtID0gc2F2ZUNvbnRleHQuZW50aXR5TWFuYWdlcjsKICAgIHZhciBrZXlzID0gZGF0YS5pbnNlcnRlZEtleXMuY29uY2F0KGRhdGEudXBkYXRlZEtleXMsIGRhdGEuZGVsZXRlZEtleXMpOwogICAgdmFyIGVudGl0aWVzID0gW107CiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICB2YXIgZW50aXR5ID0gZW0uZ2V0RW50aXR5QnlLZXkoa2V5LmVudGl0eVR5cGVOYW1lLCBrZXkuX2lkKTsKICAgICAgLy8gZW50aXRpZXMgY3JlYXRlZCBvbiB0aGUgc2VydmVyIHdpbGwgbm90IGJlIHZpYSBnZXRFbnRpdHlCeUtleSBhbmQgaGVuY2UgbnVsbDsKICAgICAgaWYgKGVudGl0eSkgewogICAgICAgIGVudGl0aWVzLnB1c2goZW50aXR5KTsKICAgICAgfQogICAgfSk7CgogICAgaWYgKGRhdGEuZW50aXRpZXNDcmVhdGVkT25TZXJ2ZXIubGVuZ3RoID4gMCkgewogICAgICBlbnRpdGllcyA9IGVudGl0aWVzLmNvbmNhdChkYXRhLmVudGl0aWVzQ3JlYXRlZE9uU2VydmVyKTsKICAgIH0KCiAgICByZXR1cm4geyBlbnRpdGllczogZW50aXRpZXMsIGtleU1hcHBpbmdzOiBkYXRhLmtleU1hcHBpbmdzLCBodHRwUmVzcG9uc2U6IGRhdGEuaHR0cFJlc3BvbnNlIH07CiAgfTsKCgogIHByb3RvLmpzb25SZXN1bHRzQWRhcHRlciA9IG5ldyBKc29uUmVzdWx0c0FkYXB0ZXIoewogICAgbmFtZTogIm1vbmdvIiwKCiAgICB2aXNpdE5vZGU6IGZ1bmN0aW9uIChub2RlLCBtYXBwaW5nQ29udGV4dCAvKiwgbm9kZUNvbnRleHQqLykgewogICAgICBpZiAobm9kZSA9PSBudWxsKSByZXR1cm4ge307CiAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgLy8gdGhpcyB3aWxsIG9ubHkgYmUgc2V0IG9uIHNhdmVSZXN1bHRzIGFuZCBwcm9qZWN0aW9ucy4KICAgICAgaWYgKG5vZGUuJHR5cGUpIHsKICAgICAgICByZXN1bHQuZW50aXR5VHlwZSA9IG1hcHBpbmdDb250ZXh0LmVudGl0eU1hbmFnZXIubWV0YWRhdGFTdG9yZS5fZ2V0RW50aXR5VHlwZShub2RlLiR0eXBlLCB0cnVlKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0pOwoKICAvKgogICAqCiAgICogQ29weXJpZ2h0IChjKSAyMDExIEp1c3RpbiBEZWFyaW5nICh6aXBweTE5ODFAZ21haWwuY29tKQogICAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApCiAgICogYW5kIEdQTCAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ncGwtbGljZW5zZS5waHApIHZlcnNpb24gMiBsaWNlbnNlcy4KICAgKiBUaGlzIHNvZnR3YXJlIGlzIG5vdCBkaXN0cmlidXRlZCB1bmRlciB2ZXJzaW9uIDMgb3IgbGF0ZXIgb2YgdGhlIEdQTC4KICAgKgogICAqIFZlcnNpb24gMS4wLjAKICAgKgogICAqLwoKICAvKgogICAqIEphdmFzY3JpcHQgY2xhc3MgdGhhdCBtaW1pY3MgaG93IFdDRiBzZXJpYWxpemVzIGEgb2JqZWN0IG9mIHR5cGUgTW9uZ29EQi5Cc29uLk9iamVjdElkCiAgICogYW5kIGNvbnZlcnRzIGJldHdlZW4gdGhhdCBmb3JtYXQgYW5kIHRoZSBzdGFuZGFyZCAyNCBjaGFyYWN0ZXIgcmVwcmVzZW50YXRpb24uCiAgICovCiAgaWYgKGdsb2JhbC5kb2N1bWVudCkgewogICAgdmFyIE9iamVjdElkID0gKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGluY3JlbWVudCA9IDA7CiAgICAgIHZhciBwaWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMzI3NjcpKTsKICAgICAgdmFyIG1hY2hpbmUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTY3NzcyMTYpKTsKCiAgICAgIGlmICh0eXBlb2YgKGxvY2FsU3RvcmFnZSkgIT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICB2YXIgbW9uZ29NYWNoaW5lSWQgPSBwYXJzZUludChsb2NhbFN0b3JhZ2VbJ21vbmdvTWFjaGluZUlkJ10pOwogICAgICAgIGlmIChtb25nb01hY2hpbmVJZCA+PSAwICYmIG1vbmdvTWFjaGluZUlkIDw9IDE2Nzc3MjE1KSB7CiAgICAgICAgICBtYWNoaW5lID0gTWF0aC5mbG9vcihsb2NhbFN0b3JhZ2VbJ21vbmdvTWFjaGluZUlkJ10pOwogICAgICAgIH0KICAgICAgICAvLyBKdXN0IGFsd2F5cyBzdGljayB0aGUgdmFsdWUgaW4uCiAgICAgICAgbG9jYWxTdG9yYWdlWydtb25nb01hY2hpbmVJZCddID0gbWFjaGluZTsKICAgICAgICBkb2N1bWVudC5jb29raWUgPSAnbW9uZ29NYWNoaW5lSWQ9JyArIG1hY2hpbmUgKyAnO2V4cGlyZXM9VHVlLCAxOSBKYW4gMjAzOCAwNTowMDowMCBHTVQnCiAgICAgIH0KICAgICAgZWxzZSBpZiAoZG9jdW1lbnQpIHsKICAgICAgICB2YXIgY29va2llTGlzdCA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKTsKICAgICAgICBmb3IgKHZhciBpIGluIGNvb2tpZUxpc3QpIHsKICAgICAgICAgIHZhciBjb29raWUgPSBjb29raWVMaXN0W2ldLnNwbGl0KCc9Jyk7CiAgICAgICAgICBpZiAoY29va2llWzBdID09ICdtb25nb01hY2hpbmVJZCcgJiYgY29va2llWzFdID49IDAgJiYgY29va2llWzFdIDw9IDE2Nzc3MjE1KSB7CiAgICAgICAgICAgIG1hY2hpbmUgPSBjb29raWVbMV07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBkb2N1bWVudC5jb29raWUgPSAnbW9uZ29NYWNoaW5lSWQ9JyArIG1hY2hpbmUgKyAnO2V4cGlyZXM9VHVlLCAxOSBKYW4gMjAzOCAwNTowMDowMCBHTVQnOwoKICAgICAgfQoKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgT2JqZWN0SWQpKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE9iamVjdElkKGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSkudG9TdHJpbmcoKTsKICAgICAgICB9CgogICAgICAgIGlmICh0eXBlb2YgKGFyZ3VtZW50c1swXSkgPT0gJ29iamVjdCcpIHsKICAgICAgICAgIHRoaXMudGltZXN0YW1wID0gYXJndW1lbnRzWzBdLnRpbWVzdGFtcDsKICAgICAgICAgIHRoaXMubWFjaGluZSA9IGFyZ3VtZW50c1swXS5tYWNoaW5lOwogICAgICAgICAgdGhpcy5waWQgPSBhcmd1bWVudHNbMF0ucGlkOwogICAgICAgICAgdGhpcy5pbmNyZW1lbnQgPSBhcmd1bWVudHNbMF0uaW5jcmVtZW50OwogICAgICAgIH0KICAgICAgICBlbHNlIGlmICh0eXBlb2YgKGFyZ3VtZW50c1swXSkgPT0gJ3N0cmluZycgJiYgYXJndW1lbnRzWzBdLmxlbmd0aCA9PSAyNCkgewogICAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBOdW1iZXIoJzB4JyArIGFyZ3VtZW50c1swXS5zdWJzdHIoMCwgOCkpLAogICAgICAgICAgICAgIHRoaXMubWFjaGluZSA9IE51bWJlcignMHgnICsgYXJndW1lbnRzWzBdLnN1YnN0cig4LCA2KSksCiAgICAgICAgICAgICAgdGhpcy5waWQgPSBOdW1iZXIoJzB4JyArIGFyZ3VtZW50c1swXS5zdWJzdHIoMTQsIDQpKSwKICAgICAgICAgICAgICB0aGlzLmluY3JlbWVudCA9IE51bWJlcignMHgnICsgYXJndW1lbnRzWzBdLnN1YnN0cigxOCwgNikpCiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gNCAmJiBhcmd1bWVudHNbMF0gIT0gbnVsbCkgewogICAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBhcmd1bWVudHNbMF07CiAgICAgICAgICB0aGlzLm1hY2hpbmUgPSBhcmd1bWVudHNbMV07CiAgICAgICAgICB0aGlzLnBpZCA9IGFyZ3VtZW50c1syXTsKICAgICAgICAgIHRoaXMuaW5jcmVtZW50ID0gYXJndW1lbnRzWzNdOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgIHRoaXMudGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpLnZhbHVlT2YoKSAvIDEwMDApOwogICAgICAgICAgdGhpcy5tYWNoaW5lID0gbWFjaGluZTsKICAgICAgICAgIHRoaXMucGlkID0gcGlkOwogICAgICAgICAgaWYgKGluY3JlbWVudCA+IDB4ZmZmZmZmKSB7CiAgICAgICAgICAgIGluY3JlbWVudCA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmluY3JlbWVudCA9IGluY3JlbWVudCsrOwoKICAgICAgICB9CiAgICAgIH07CiAgICB9KSgpOwoKICAgIE9iamVjdElkLnByb3RvdHlwZS5nZXREYXRlID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gbmV3IERhdGUodGhpcy50aW1lc3RhbXAgKiAxMDAwKTsKICAgIH07CgogICAgLyoKICAgICAqIFR1cm5zIGEgV0NGIHJlcHJlc2VudGF0aW9uIG9mIGEgQlNPTiBPYmplY3RJZCBpbnRvIGEgMjQgY2hhcmFjdGVyIHN0cmluZyByZXByZXNlbnRhdGlvbi4KICAgICAqLwogICAgT2JqZWN0SWQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgdGltZXN0YW1wID0gdGhpcy50aW1lc3RhbXAudG9TdHJpbmcoMTYpOwogICAgICB2YXIgbWFjaGluZSA9IHRoaXMubWFjaGluZS50b1N0cmluZygxNik7CiAgICAgIHZhciBwaWQgPSB0aGlzLnBpZC50b1N0cmluZygxNik7CiAgICAgIHZhciBpbmNyZW1lbnQgPSB0aGlzLmluY3JlbWVudC50b1N0cmluZygxNik7CiAgICAgIHJldHVybiAnMDAwMDAwMDAnLnN1YnN0cigwLCA2IC0gdGltZXN0YW1wLmxlbmd0aCkgKyB0aW1lc3RhbXAgKwogICAgICAgICAgJzAwMDAwMCcuc3Vic3RyKDAsIDYgLSBtYWNoaW5lLmxlbmd0aCkgKyBtYWNoaW5lICsKICAgICAgICAgICcwMDAwJy5zdWJzdHIoMCwgNCAtIHBpZC5sZW5ndGgpICsgcGlkICsKICAgICAgICAgICcwMDAwMDAnLnN1YnN0cigwLCA2IC0gaW5jcmVtZW50Lmxlbmd0aCkgKyBpbmNyZW1lbnQ7CiAgICB9CiAgfQoKICBicmVlemUuY29uZmlnLnJlZ2lzdGVyQWRhcHRlcigiZGF0YVNlcnZpY2UiLCBjdG9yKTsKCn0sIHRoaXMpKTs=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 14:06:20 GMT",
                    "Content-Length": "7882",
                    "Date": "Thu, 06 Nov 2014 14:06:21 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}