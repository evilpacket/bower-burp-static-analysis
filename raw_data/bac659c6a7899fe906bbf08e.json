{
    "url": "http://localhost:9999/docluv/spa/js/dev/spa.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>window.location.href</b> and written to <b>window.location.replace()</b> via the following statements:<ul><li>loc = window.location.href.split(\"#!\");</li><li>window.location.replace(loc[0] + \"?\" +                         this.settings.forceReload + \"=\" + loc[1]);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/docluv/spa/js/dev/spa.js",
                "path": "/docluv/spa/js/dev/spa.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9kb2NsdXYvc3BhL2pzL2Rldi9zcGEuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "Ly8vIDxyZWZlcmVuY2UgcGF0aD0iYmFja2Fjay5qcyIgLz4KLy8vIDxyZWZlcmVuY2UgcGF0aD0iaGVscGVyLmV4dGVuc2lvbnMuanMiIC8+CjsKCihmdW5jdGlvbiAod2luZG93LCB1bmRlZmluZWQpIHsKCiAgICAidXNlIHN0cmljdCI7CgovLyAgICB2YXIgX2dhcSA9IF9nYXEgfHwgdW5kZWZpbmVkOwoKICAgIC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgZGVmZXJyZWQKICAgIHZhciBTUEEgPSBmdW5jdGlvbiAoY3VzdG9tU2V0dGluZ3MpIHsKCiAgICAgICAgdmFyIHNwYSA9IG5ldyBTUEEuZm4uaW5pdCgpLAogICAgICAgICAgICBhcHBOYW1lID0gIiI7CgogICAgICAgIHNwYS5zZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBzcGEuc2V0dGluZ3MsIGN1c3RvbVNldHRpbmdzKTsKCiAgICAgICAgaWYgKHNwYS5zZXR0aW5ncy5BcHBDb250ZXh0KSB7CiAgICAgICAgICAgIHNwYS4kY29udGV4dCA9IHNwYS5zZXR0aW5ncy5BcHBDb250ZXh0OwogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICB2YXIgc3BhQXBwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiW3NwYS1hcHBdIik7CgogICAgICAgICAgICBpZiAoc3BhQXBwKSB7CgogICAgICAgICAgICAgICAgYXBwTmFtZSA9IHdpbmRvd1tzcGFBcHAuZ2V0QXR0cmlidXRlKCJzcGEtYXBwIildOwoKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXBwTmFtZSA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgICAgIGFwcE5hbWUgPSBhcHBOYW1lKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc3BhLiRjb250ZXh0ID0gYXBwTmFtZTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJNdXN0IGhhdmUgYW4gYXBwbGljYXRpb24gY29udGV4dCBkZWZpbmVkIik7CgogICAgICAgICAgICAgICAgdGhyb3cgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJTUEEgRXJyb3IiLAogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICJNdXN0IGhhdmUgYW4gYXBwbGljYXRpb24gY29udGV4dCBkZWZpbmVkIgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQoKICAgICAgICB9CgogICAgICAgIHNwYS52aWV3Q2FjaGUgPSBzcGEuc2V0dGluZ3Mudmlld0NhY2hlIHx8IEJhY2twYWNrKCk7CgogICAgICAgIHNwYS5hbmFseXRpY3MgPSBzcGEuc2V0dGluZ3MuYW5hbHl0aWNzOwoKICAgICAgICBzcGEudGl0bGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzcGEuc2V0dGluZ3MudGl0bGVTZWxlY3Rvcik7CgogICAgICAgIGlmIChzcGEuc2V0dGluZ3MucGFyc2VET00pIHsKCiAgICAgICAgICAgIHNwYS5zZXR1cFJvdXRlcyhzcGEuc2V0dGluZ3Mudmlld1NlbGVjdG9yKTsKCiAgICAgICAgfQoKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigiaGFzaGNoYW5nZSIsIGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgIHNwYS5zd2FwVmlldygpOwoKICAgICAgICB9KTsKCiAgICAgICAgaWYgKHNwYS5nZXRQYXJhbWV0ZXJCeU5hbWUoc3BhLnNldHRpbmdzLmZvcmNlUmVsb2FkKSkgewoKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoIj8iKVswXSArICIjISIgKwogICAgICAgICAgICAgICAgc3BhLmdldFBhcmFtZXRlckJ5TmFtZShzcGEuc2V0dGluZ3MuZm9yY2VSZWxvYWQpKTsKICAgICAgICAgICAgcmV0dXJuIHNwYTsKCiAgICAgICAgfSBlbHNlIGlmIChzcGEuc2V0dGluZ3MuaW5pdFZpZXcpIHsKICAgICAgICAgICAgc3BhLnN3YXBWaWV3KCk7CiAgICAgICAgfQoKICAgICAgICAvKgoKICAgICAgICAvL2RlY2lkZWQgdG8gc2hlbHZlIHRoaXMgZm9yIHRoZSB0aW1lIGJlaW5nLiBXaWxsIGNvbXBsZXRlIHRoaXMgZnVuY3Rpb25hbGl0eQogICAgICAgIC8vYWZ0ZXIgdGhlIGJvb2sgaXMgcHVibGlzaGVkCgogICAgICAgIGlmIChzcGEuc2V0dGluZ3MuYXN5bmNVcmwgJiYgdHlwZW9mIHNwYS5zZXR0aW5ncy5hc3luY1VybCA9PT0gInN0cmluZyIpIHsKCiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLCBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgZS50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLnR5cGUsIGFyZ3VtZW50cy5jYWxsZWUpOwoKICAgICAgICAgICAgICAgIHNwYS5sb2FkQXN5bmNDb250ZW50LmNhbGwoc3BhLCBzcGEuc2V0dGluZ3MuYXN5bmNVcmwpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgICovCgogICAgICAgIHJldHVybiBzcGE7CgogICAgfTsKCiAgICBTUEEuZm4gPSBTUEEucHJvdG90eXBlID0gewoKICAgICAgICBjb25zdHJ1Y3RvcjogU1BBLAoKICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHZlcnNpb246ICIwLjAuNiIsCgogICAgICAgIHZpZXdDYWNoZTogdW5kZWZpbmVkLAoKCiAgICAgICAgLy9iYXJyb3dpbmcgbmFtaW5nIGNvbnZlbnRpb25zIGZyb20gQW5ndWxhcgogICAgICAgIC8vVGhpcyBpcyBsaWtlIHJlbmFtaW5nIGEgYnJhbmQgd2l0aCBhIGJhZCByZXB1dGF0aW9uLAogICAgICAgIC8vbWFpbnRhaW5pbmcgYW5kIHVzaW5nIHRoZSBjb250ZXh0ICh0aGlzKSBwcm9wZXJseQogICAgICAgIC8vaXMgY29uZnVzaW5nIGZvciBtYW55IGRldmVsb3BlcnMgbmV3IHRvIEphdmFTY3JpcHQuCiAgICAgICAgLy9DaGFuZ2luZyB0aGUgbmFtZSBhYnN0cmFjdHMgdGhlIG1pbmQgZnJvbSBhc3NvY2lhdGluZwogICAgICAgIC8vdGhlIG5hbWUgdG8gc29tZXRoaW5nIHRoZXkgcGVyY2VpdmUgYXMgYW5ub3lpbmcuCiAgICAgICAgJGNvbnRleHQ6IHVuZGVmaW5lZCwKICAgICAgICAkY29udHJvbGxlcjogdW5kZWZpbmVkLAogICAgICAgICRvbGRDb250cm9sbGVyOiB1bmRlZmluZWQsCgogICAgICAgIHNldHVwUm91dGVzOiBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICB2YXIgc3BhID0gdGhpcywKICAgICAgICAgICAgICAgIHNldHRpbmdzID0gc3BhLnNldHRpbmdzLAogICAgICAgICAgICAgICAgcm91dGVzID0gJC5leHRlbmQoJC5wYXJzZUxvY2FsU3RvcmFnZSgicm91dGVzIikgfHwge30sIHNldHRpbmdzLnJvdXRlcyksCiAgICAgICAgICAgICAgICBpID0gMCwKICAgICAgICAgICAgICAgIHJhd1BhdGgsIHZpZXcsIHJvdXRlLCB2aWV3SWQsCiAgICAgICAgICAgICAgICBWaWV3cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2V0dGluZ3Mudmlld1NlbGVjdG9yKTsKCiAgICAgICAgICAgIGZvciAoOyBpIDwgVmlld3MubGVuZ3RoOyBpKyspIHsKCiAgICAgICAgICAgICAgICB2aWV3ID0gVmlld3NbaV07CgogICAgICAgICAgICAgICAgaWYgKHZpZXcuaGFzQXR0cmlidXRlcygpICYmIHZpZXcuaGFzQXR0cmlidXRlKCJpZCIpKSB7CgogICAgICAgICAgICAgICAgICAgIHZpZXdJZCA9IHZpZXcuZ2V0QXR0cmlidXRlKCJpZCIpOwogICAgICAgICAgICAgICAgICAgIHJhd1BhdGggPSAodmlldy5oYXNBdHRyaWJ1dGUoInNwYS1yb3V0ZSIpID8gdmlldy5nZXRBdHRyaWJ1dGUoInNwYS1yb3V0ZSIpIDogIiIpOwoKICAgICAgICAgICAgICAgICAgICByb3V0ZSA9IHNwYS5jcmVhdGVSb3V0ZSh2aWV3SWQsIHJhd1BhdGgsIHZpZXcpOwogICAgICAgICAgICAgICAgICAgIHJvdXRlc1tyb3V0ZS5wYXRoXSA9IHJvdXRlOwoKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNwYS5zZXR0aW5ncy5yb3V0ZXMgPSByb3V0ZXM7CgogICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgicm91dGVzIiwgSlNPTi5zdHJpbmdpZnkocm91dGVzKSk7CgogICAgICAgICAgICBpZiAoc3BhLnZpZXdDYWNoZSAmJiAoc3BhLmdldFBhcmFtZXRlckJ5TmFtZSgiX2VzY2FwZWRfZnJhZ21lbnRfIikgPT09ICIiKSkgewogICAgICAgICAgICAgICAgc3BhLnZpZXdDYWNoZS51cGRhdGVWaWV3cyhzZXR0aW5ncy52aWV3U2VsZWN0b3IpOwogICAgICAgICAgICB9CgogICAgICAgIH0sCgogICAgICAgIGNyZWF0ZVJvdXRlOiBmdW5jdGlvbiAodmlld0lkLCByYXdQYXRoLCB2aWV3KSB7CgogICAgICAgICAgICAvL25lZWQgdG8gY2hlY2sgZm9yIGR1cGxpY2F0ZSBwYXRoCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICB2aWV3SWQ6IHZpZXdJZCwKICAgICAgICAgICAgICAgIHZpZXdNb2R1bGU6ICh2aWV3Lmhhc0F0dHJpYnV0ZSgic3BhLW1vZHVsZSIpID8gdmlldy5nZXRBdHRyaWJ1dGUoInNwYS12aWV3SWQiKSA6CiAgICAgICAgICAgICAgICAgICAgdmlld0lkKSwKICAgICAgICAgICAgICAgIHBhdGg6IHJhd1BhdGguc3BsaXQoIlxcOiIpWzBdLAogICAgICAgICAgICAgICAgcGFyYW1zOiByYXdQYXRoLnNwbGl0KCJcXDoiKS5zbGljZSgxKSwKICAgICAgICAgICAgICAgIHRpdGxlOiAodmlldy5oYXNBdHRyaWJ1dGUoInNwYS10aXRsZSIpID8gdmlldy5nZXRBdHRyaWJ1dGUoInNwYS10aXRsZSIpIDoKICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLmRlZmF1bHRUaXRsZSksCiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAodmlldy5oYXNBdHRyaWJ1dGUoInNwYS10cmFuc2l0aW9uIikgPwogICAgICAgICAgICAgICAgICAgIHZpZXcuZ2V0QXR0cmlidXRlKCJzcGEtdHJhbnNpdGlvbiIpIDoKICAgICAgICAgICAgICAgICAgICAiIiksCiAgICAgICAgICAgICAgICBwYXJhbVZhbHVlczoge30sCiAgICAgICAgICAgICAgICBiZWZvcmVvbmxvYWQ6ICh2aWV3Lmhhc0F0dHJpYnV0ZSgic3BhLWJlZm9yZW9ubG9hZCIpID8gdmlldy5nZXRBdHRyaWJ1dGUoInNwYS1iZWZvcmVvbmxvYWQiKSA6IHVuZGVmaW5lZCksCiAgICAgICAgICAgICAgICBvbmxvYWQ6ICh2aWV3Lmhhc0F0dHJpYnV0ZSgic3BhLW9ubG9hZCIpID8gdmlldy5nZXRBdHRyaWJ1dGUoInNwYS1vbmxvYWQiKSA6IHVuZGVmaW5lZCksCiAgICAgICAgICAgICAgICBhZnRlcm9ubG9hZDogKHZpZXcuaGFzQXR0cmlidXRlKCJzcGEtYWZ0ZXJvbmxvYWQiKSA/IHZpZXcuZ2V0QXR0cmlidXRlKCJzcGEtYWZ0ZXJvbmxvYWQiKSA6IHVuZGVmaW5lZCksCiAgICAgICAgICAgICAgICBiZWZvcmV1bmxvYWQ6ICh2aWV3Lmhhc0F0dHJpYnV0ZSgic3BhLWJlZm9yZXVubG9hZCIpID8gdmlldy5nZXRBdHRyaWJ1dGUoInNwYS1iZWZvcmV1bmxvYWQiKSA6IHVuZGVmaW5lZCksCiAgICAgICAgICAgICAgICB1bmxvYWQ6ICh2aWV3Lmhhc0F0dHJpYnV0ZSgic3BhLXVubG9hZCIpID8gdmlldy5nZXRBdHRyaWJ1dGUoInNwYS11bmxvYWQiKSA6IHVuZGVmaW5lZCksCiAgICAgICAgICAgICAgICBhZnRlcnVubG9hZDogKHZpZXcuaGFzQXR0cmlidXRlKCJzcGEtYWZ0ZXJ1bmxvYWQiKSA/IHZpZXcuZ2V0QXR0cmlidXRlKCJzcGEtYWZ0ZXJ1bmxvYWQiKSA6IHVuZGVmaW5lZCkKICAgICAgICAgICAgfTsKCiAgICAgICAgfSwKCiAgICAgICAgbWF0Y2hSb3V0ZUJ5UGF0aDogZnVuY3Rpb24gKHBhdGgsIHJvdXRlcykgewoKICAgICAgICAgICAgaWYgKCFyb3V0ZXMpIHsKICAgICAgICAgICAgICAgIHJvdXRlcyA9IHRoaXMuc2V0dGluZ3Mucm91dGVzOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIga2V5LCByb3V0ZSwgcGFyYW1zLCBpLAogICAgICAgICAgICAgICAgcGFyYW1WYWx1ZXMgPSB7fSwKICAgICAgICAgICAgICAgIHNlYXJjaDsKCiAgICAgICAgICAgIC8vcm91dGVzIGlzIGFuIG9iamVjdCBzbyB3ZSBjYW4gbWF0Y2ggdGhlIHBhdGggdG8gdGhlIHJvdXRlIGFzIGl0IHdpbGwgYmUgYSBwcm9wZXJ0eSBuYW1lLgogICAgICAgICAgICBpZiAocm91dGVzLmhhc093blByb3BlcnR5KHBhdGgpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcm91dGVzW3BhdGhdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKGtleSBpbiByb3V0ZXMpIHsKCiAgICAgICAgICAgICAgICBpZiAocm91dGVzLmhhc093blByb3BlcnR5KGtleSkpIHsKCiAgICAgICAgICAgICAgICAgICAgcm91dGUgPSByb3V0ZXNba2V5XTsKCiAgICAgICAgICAgICAgICAgICAgc2VhcmNoID0gbmV3IFJlZ0V4cCgnXFxiJyArIHJvdXRlLnBhdGggKyAnXFxiJywgJ2dpJyk7CgogICAgICAgICAgICAgICAgICAgIGlmIChyb3V0ZS5wYXRoICE9PSAiIiAmJgogICAgICAgICAgICAgICAgICAgICAgICBwYXRoLnNlYXJjaChzZWFyY2gpID09PSAwKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSBwYXRoLnJlcGxhY2Uocm91dGUucGF0aCwgIiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoIi8iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDEpOyAvL3RoZSBmaXJzdCBpdGVtIHdpbGwgYmUgZW1wdHkKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtVmFsdWVzW3JvdXRlLnBhcmFtc1tpXV0gPSBwYXJhbXNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlLnBhcmFtVmFsdWVzID0gcGFyYW1WYWx1ZXM7CgogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByb3V0ZSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJvdXRlOwogICAgICAgIH0sCgogICAgICAgIG1hdGNoUm91dGVCeUlkOiBmdW5jdGlvbiAoaWQsIHJvdXRlcykgewoKICAgICAgICAgICAgaWYgKCFyb3V0ZXMpIHsKICAgICAgICAgICAgICAgIHJvdXRlcyA9IHRoaXMuc2V0dGluZ3Mucm91dGVzOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcm91dGU7CgogICAgICAgICAgICBmb3IgKHJvdXRlIGluIHJvdXRlcykgewogICAgICAgICAgICAgICAgaWYgKHJvdXRlc1tyb3V0ZV0udmlld0lkID09PSBpZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiByb3V0ZXNbcm91dGVdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgIH0sCgogICAgICAgIC8vICBuZXdWaWV3OiB1bmRlZmluZWQsIC8vcGxhY2Vob2xkZXIgZm9yIG5ldyB2aWV3CiAgICAgICAgLy8gIGN1cnJlbnRWaWV3OiB1bmRlZmluZWQsIC8vcGxhY2Vob2xkZXIgZm9yIGN1cnJlbnQgdmlldyBiZWZvcmUgYSBzd2FwCiAgICAgICAgYW5pbWF0aW9uOiB1bmRlZmluZWQsCgogICAgICAgIGdldFBhcmFtZXRlckJ5TmFtZTogZnVuY3Rpb24gKG5hbWUpIHsKCiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcW10vLCAiXFxcWyIpLnJlcGxhY2UoL1tcXV0vLCAiXFxcXSIpOwoKICAgICAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgiW1xcPyZdIiArIG5hbWUgKyAiPShbXiYjXSopIiksCiAgICAgICAgICAgICAgICByZXN1bHRzID0gcmVnZXguZXhlYyhsb2NhdGlvbi5zZWFyY2gpOwoKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMgPT09IG51bGwgPyAiIiA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1wrL2csICIgIikpOwogICAgICAgIH0sCgogICAgICAgIGdldFZlbmRvclByb3BlcnR5TmFtZTogZnVuY3Rpb24gKHByb3ApIHsKCiAgICAgICAgICAgIHZhciBwcmVmaXhlcyA9IFsnTW96JywgJ1dlYmtpdCcsICdPJywgJ21zJ10sCiAgICAgICAgICAgICAgICB2ZW5kb3JQcm9wLCBpLAogICAgICAgICAgICAgICAgcHJvcF8gPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zdWJzdHIoMSk7CgogICAgICAgICAgICBpZiAocHJvcCBpbiB0aGlzLmRpdi5zdHlsZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHByb3A7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7ICsraSkgewoKICAgICAgICAgICAgICAgIHZlbmRvclByb3AgPSBwcmVmaXhlc1tpXSArIHByb3BfOwoKICAgICAgICAgICAgICAgIGlmICh2ZW5kb3JQcm9wIGluIHRoaXMuZGl2LnN0eWxlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZlbmRvclByb3A7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgdHJhbnNpdGlvbmVuZDogewogICAgICAgICAgICAnYW5pbWF0aW9uJzogJ2FuaW1hdGlvbmVuZCcsCiAgICAgICAgICAgICd3ZWJraXRBbmltYXRpb24nOiAnd2Via2l0QW5pbWF0aW9uRW5kJywKICAgICAgICAgICAgJ01vekFuaW1hdGlvbic6ICdhbmltYXRpb25lbmQnLAogICAgICAgICAgICAnT0FuaW1hdGlvbic6ICdvQW5pbWF0aW9uRW5kJwogICAgICAgIH0sCgogICAgICAgIC8vIHJlcHVycG9zZWQgaGVscGVyCiAgICAgICAgY3NzUHJlZml4OiBmdW5jdGlvbiAoc3VmZml4KSB7CgogICAgICAgICAgICBpZiAoIXN1ZmZpeCkgewogICAgICAgICAgICAgICAgcmV0dXJuICcnOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgaSwgbGVuLCBwYXJ0cywgcHJlZml4ZXMsCiAgICAgICAgICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlOwoKICAgICAgICAgICAgaWYgKHN1ZmZpeC5pbmRleE9mKCctJykgPj0gMCkgewoKICAgICAgICAgICAgICAgIHBhcnRzID0gKCcnICsgc3VmZml4KS5zcGxpdCgnLScpOwoKICAgICAgICAgICAgICAgIGZvciAoaSA9IDEsIGxlbiA9IHBhcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgcGFydHNbaV0gPSBwYXJ0c1tpXS5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArIHBhcnRzW2ldLnN1YnN0cigxKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN1ZmZpeCA9IHBhcnRzLmpvaW4oJycpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3VmZml4IGluIGJvZHlTdHlsZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHN1ZmZpeDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3VmZml4ID0gc3VmZml4LnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgc3VmZml4LnN1YnN0cigxKTsKCiAgICAgICAgICAgIHByZWZpeGVzID0gWyd3ZWJraXQnLCAnTW96JywgJ21zJywgJ08nXTsKCiAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHByZWZpeGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAocHJlZml4ZXNbaV0gKyBzdWZmaXggaW4gYm9keVN0eWxlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeGVzW2ldICsgc3VmZml4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlRXh0cmFWaWV3czogZnVuY3Rpb24gKGN1cnJlbnRWaWV3KSB7CgogICAgICAgICAgICB2YXIgbGVuZ3RoID0gY3VycmVudFZpZXcubGVuZ3RoOwoKICAgICAgICAgICAgd2hpbGUgKGxlbmd0aCA+IDEpIHsKCiAgICAgICAgICAgICAgICBsZW5ndGgtLTsKICAgICAgICAgICAgICAgIGN1cnJlbnRWaWV3W2xlbmd0aF0KICAgICAgICAgICAgICAgICAgICAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50Vmlld1tsZW5ndGhdKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHB1c2hWaWV3OiBmdW5jdGlvbiAocGF0aCkgewoKICAgICAgICAgICAgdmFyIHNwYSA9IHRoaXM7CgogICAgICAgICAgICBpZiAoc3BhLmFuYWx5dGljcykgewogICAgICAgICAgICAgICAgc3BhLmFuYWx5dGljcy5wdXNoVmlldyhbJ190cmFja1BhZ2V2aWV3JywgcGF0aF0pOwogICAgICAgICAgICB9CgogICAgICAgIH0sCgogICAgICAgIHN3YXBWaWV3OiBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICB2YXIgc3BhID0gdGhpcywKICAgICAgICAgICAgICAgIHNldHRpbmdzID0gc3BhLnNldHRpbmdzLAogICAgICAgICAgICAgICAgcm91dGUsIG9sZFJvdXRlLCBhbmltLAogICAgICAgICAgICAgICAgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLAogICAgICAgICAgICAgICAgbmV3VmlldywKICAgICAgICAgICAgICAgIGhhc0VzY2FwZUZyYWdtZW50ID0gc3BhLmdldFBhcmFtZXRlckJ5TmFtZSgiX2VzY2FwZWRfZnJhZ21lbnRfIiksCiAgICAgICAgICAgICAgICBoYXNoRnJhZ21lbnQgPSAoaGFzaCAhPT0gIiMiKSA/IGhhc2gucmVwbGFjZSgiIyEiLCAiIikgOiAiIiwKICAgICAgICAgICAgICAgIHBhdGggPSBoYXNoRnJhZ21lbnQuc3BsaXQoIjoiKVswXSwKICAgICAgICAgICAgICAgIGN1cnJlbnRWaWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLiIgKyBzZXR0aW5ncy5jdXJyZW50Q2xhc3MpOwoKICAgICAgICAgICAgc3BhLiRvbGRDb250cm9sbGVyID0gc3BhLiRjb250cm9sbGVyOwoKICAgICAgICAgICAgaWYgKGN1cnJlbnRWaWV3Lmxlbmd0aCAmJiBjdXJyZW50Vmlldy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAvL2FkZGluZyB0aGlzIGJlY2F1c2UgSSBmb3VuZCBteXNlbGYgc29tZXRpbWVzIHRhcHBpbmcgaXRlbXMgdG8gbGF1bmNoIGEgbmV3IHZpZXcgYmVmb3JlIHRoZSBhbmltYXRpb24gd2FzIGNvbXBsZXRlLgogICAgICAgICAgICAgICAgc3BhLnJlbW92ZUV4dHJhVmlld3MoY3VycmVudFZpZXcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvL2NvbnZlcnQgbm9kZWxpc3QgdG8gYSBzaW5nbGUgbm9kZQogICAgICAgICAgICBjdXJyZW50VmlldyA9IGN1cnJlbnRWaWV3WzBdOwoKICAgICAgICAgICAgaWYgKGN1cnJlbnRWaWV3ICYmIGN1cnJlbnRWaWV3LmlkKSB7CiAgICAgICAgICAgICAgICBvbGRSb3V0ZSA9IHNwYS5tYXRjaFJvdXRlQnlJZChjdXJyZW50Vmlldy5pZCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJvdXRlID0gc3BhLm1hdGNoUm91dGVCeVBhdGgocGF0aCk7CgogICAgICAgICAgICBpZiAocm91dGUgIT09IHVuZGVmaW5lZCkgewoKICAgICAgICAgICAgICAgIGlmIChzcGEuJGNvbnRleHRbcm91dGUudmlld0lkXSAmJgogICAgICAgICAgICAgICAgICAgIHR5cGVvZiBzcGEuJGNvbnRleHRbcm91dGUudmlld0lkXSA9PT0gImZ1bmN0aW9uIikgewoKICAgICAgICAgICAgICAgICAgICBzcGEuJGNvbnRyb2xsZXIgPSBuZXcgc3BhLiRjb250ZXh0W3JvdXRlLnZpZXdJZF0oc3BhLiRjb250ZXh0KTsKCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNwYS4kY29udGV4dFtyb3V0ZS52aWV3SWRdICYmCiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHNwYS4kY29udGV4dFtyb3V0ZS52aWV3SWRdID09PSAib2JqZWN0IikgewoKICAgICAgICAgICAgICAgICAgICBzcGEuJGNvbnRyb2xsZXIgPSBuZXcgc3BhLiRjb250ZXh0W3JvdXRlLnZpZXdJZF07CgogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc3BhLnB1c2hWaWV3KHBhdGgpOwoKICAgICAgICAgICAgICAgIHNwYS5lbnN1cmVWaWV3QXZhaWxhYmxlKGN1cnJlbnRWaWV3LCByb3V0ZS52aWV3SWQpOwoKICAgICAgICAgICAgICAgIG5ld1ZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyb3V0ZS52aWV3SWQpOwoKICAgICAgICAgICAgICAgIGlmIChuZXdWaWV3KSB7CgogICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmlldykgewoKICAgICAgICAgICAgICAgICAgICAgICAgLy9zcGEubWFrZVZpZXdDYWxsYmFjayhvbGRSb3V0ZSwgImJlZm9yZXVubG9hZCIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgc3BhLm1ha2VWaWV3Q2FsbGJhY2sxKHNwYS4kb2xkQ29udHJvbGxlciwgImJlZm9yZXVubG9hZCIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwYS5oYXNBbmltYXRpb25zKCkpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltID0gc3BhLmdldEFuaW1hdGlvbihyb3V0ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGEuYW5pbWF0aW9uID0gYW5pbTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Vmlldy5hZGRFdmVudExpc3RlbmVyKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGEudHJhbnNpdGlvbmVuZFtzcGEuY3NzUHJlZml4KCJhbmltYXRpb24iKV0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGEuZW5kU3dhcEFuaW1hdGlvbi5jYWxsKHNwYSwgb2xkUm91dGUsIHJvdXRlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWaWV3ID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tb2RpZnkgb25jZSBhZGRDbGFzcyBzdXBwb3J0cyBhcnJheSBvZiBjbGFzc2VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChjdXJyZW50VmlldykuYWRkQ2xhc3MoImFuaW1hdGVkIG91dCAiICsgYW5pbSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCJpbiIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKG5ld1ZpZXcpLmFkZENsYXNzKHNldHRpbmdzLmN1cnJlbnRDbGFzcyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgYW5pbWF0ZWQgIiArIGFuaW0gKyAiIGluIik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChuZXdWaWV3KS5hZGRDbGFzcyhzZXR0aW5ncy5jdXJyZW50Q2xhc3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYS5lbmRTd2FwQW5pbWF0aW9uLmNhbGwoc3BhLCBvbGRSb3V0ZSwgcm91dGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLmludG9BbmltYXRpb24pIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWaWV3LmFkZEV2ZW50TGlzdGVuZXIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhLnRyYW5zaXRpb25lbmRbc3BhLmNzc1ByZWZpeCgiYW5pbWF0aW9uIildLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGEuZW5kU3dhcEFuaW1hdGlvbi5jYWxsKHNwYSwgb2xkUm91dGUsIHJvdXRlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZpZXcgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJChuZXdWaWV3KS5hZGRDbGFzcyhzZXR0aW5ncy5jdXJyZW50Q2xhc3MgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgYW5pbWF0ZWQgIiArIGFuaW0gKyAiIGluIik7CgogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQobmV3VmlldykuYWRkQ2xhc3Moc2V0dGluZ3MuY3VycmVudENsYXNzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYS5lbmRTd2FwQW5pbWF0aW9uLmNhbGwoc3BhLCBvbGRSb3V0ZSwgcm91dGUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgc3BhLnNldERvY3VtZW50VGl0bGUocm91dGUpOwoKICAgICAgICAgICAgICAgICAgICBpZiAocm91dGUpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vc3BhLm1ha2VWaWV3Q2FsbGJhY2socm91dGUsICJiZWZvcmVvbmxvYWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy9zcGEubWFrZVZpZXdDYWxsYmFjayhyb3V0ZSwgIm9ubG9hZCIpOwogICAgICAgICAgICAgICAgICAgICAgICAvL3NwYS5tYWtlVmlld0NhbGxiYWNrKHJvdXRlLCAiYWZ0ZXJvbmxvYWQiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHNwYS5tYWtlVmlld0NhbGxiYWNrMShzcGEuJGNvbnRyb2xsZXIsICJiZWZvcmVvbmxvYWQiLCByb3V0ZS5wYXJhbVZhbHVlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNwYS5tYWtlVmlld0NhbGxiYWNrMShzcGEuJGNvbnRyb2xsZXIsICJvbmxvYWQiLCByb3V0ZS5wYXJhbVZhbHVlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNwYS5tYWtlVmlld0NhbGxiYWNrMShzcGEuJGNvbnRyb2xsZXIsICJhZnRlcm9ubG9hZCIsIHJvdXRlLnBhcmFtVmFsdWVzKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNFc2NhcGVGcmFnbWVudCA9PT0gIiIpIHsgLy9Hb3RvIDQwNCBoYW5kbGVyCgogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAiIyEiICsgc2V0dGluZ3MuTm90Rm91bmRSb3V0ZTsKCiAgICAgICAgICAgIH0gZWxzZSB7IC8vc2hvdWxkIG9ubHkgZ2V0IGhlcmUgaXMgdGhpcyBpcyBhbiBlc2NhcGVmcmFnZW1lbnRlZCB1cmwgZm9yIHRoZSBzcGlkZXJzCiAgICAgICAgICAgICAgICBuZXdWaWV3ID0gJChzZXR0aW5ncy52aWV3U2VsZWN0b3IpLmFkZENsYXNzKHNldHRpbmdzLmN1cnJlbnRDbGFzcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgfSwKCiAgICAgICAgZ2V0QW5pbWF0aW9uOiBmdW5jdGlvbiAocm91dGUpIHsKCiAgICAgICAgICAgIGlmICghcm91dGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnZpZXdUcmFuc2l0aW9uOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25zW3JvdXRlLnRyYW5zaXRpb25dIHx8IHRoaXMuc2V0dGluZ3Mudmlld1RyYW5zaXRpb247CgogICAgICAgIH0sCgogICAgICAgIGVuZFN3YXBBbmltYXRpb246IGZ1bmN0aW9uIChyb3V0ZSwgbmV3Um91dGUpIHsKICAgICAgICAgICAgLy9jdXJyZW50VmlldywgbmV3VmlldywgCiAgICAgICAgICAgIHZhciBzcGEgPSB0aGlzLAogICAgICAgICAgICAgICAgY3VycmVudFZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuY3VycmVudC5vdXQiKSwKICAgICAgICAgICAgICAgIG5ld1ZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChuZXdSb3V0ZS52aWV3SWQpLAogICAgICAgICAgICAgICAgcGFyZW50LAogICAgICAgICAgICAgICAgYW5pbSA9IHNwYS5hbmltYXRpb247CgogICAgICAgICAgICBpZiAocm91dGUpIHsKICAgICAgICAgICAgICAgIHNwYS5tYWtlVmlld0NhbGxiYWNrMShzcGEuJG9sZENvbnRyb2xsZXIsICJ1bmxvYWQiKTsKICAgICAgICAgICAgICAgIHNwYS5tYWtlVmlld0NhbGxiYWNrMShzcGEuJG9sZENvbnRyb2xsZXIsICJhZnRlcnVubG9hZCIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobmV3Vmlldy5jbGFzc0xpc3QuY29udGFpbnMoImluIikpIHsKICAgICAgICAgICAgICAgIG5ld1ZpZXcuY2xhc3NMaXN0LnJlbW92ZSgiaW4iKTsKICAgICAgICAgICAgICAgIG5ld1ZpZXcuY2xhc3NMaXN0LnJlbW92ZShhbmltKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGN1cnJlbnRWaWV3ICYmIHNwYS52aWV3Q2FjaGUgJiYgY3VycmVudFZpZXcucGFyZW50Tm9kZSkgewoKICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1cnJlbnRWaWV3LnBhcmVudE5vZGUKICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChjdXJyZW50Vmlldyk7CgogICAgICAgICAgICB9CgogICAgICAgIH0sCgogICAgICAgIC8vbWFrZSBzdXJlIHRoZSB2aWV3IGlzIGFjdHVhbGx5IGF2YWlsYWJsZSwgdGhpcyByZWxpZXMgb24gYmFja3BhY2sgdG8gc3VwcGx5IHRoZSBtYXJrdXAgYW5kIGluamVjdCBpdCBpbnRvIHRoZSBET00KICAgICAgICBlbnN1cmVWaWV3QXZhaWxhYmxlOiBmdW5jdGlvbiAoY3VycmVudFZpZXcsIG5ld1ZpZXdJZCkgewogICAgICAgICAgICAvL211c3QgaGF2ZSBiYWNrcGFjayBvciBzb21ldGhpbmcgc2ltaWxhciBzcGEgaW1wbGVtZW50cyBpdHMgaW50ZXJmYWNlCiAgICAgICAgICAgIGlmICh0aGlzLnZpZXdDYWNoZSkgewoKICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcy52aWV3Q2FjaGUuZ2V0Vmlld0luZm8obmV3Vmlld0lkKSwKICAgICAgICAgICAgICAgICAgICBuZXdWaWV3LCBsb2M7CgogICAgICAgICAgICAgICAgaWYgKHZpZXcpIHsKICAgICAgICAgICAgICAgICAgICBuZXdWaWV3ID0gdGhpcy5jcmVhdGVGcmFnbWVudCh2aWV3LmNvbnRlbnQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsb2MgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgiIyEiKTsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShsb2NbMF0gKyAiPyIgKwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLmZvcmNlUmVsb2FkICsgIj0iICsgbG9jWzFdKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZpZXcpIHsKICAgICAgICAgICAgICAgICAgICBjdXJyZW50Vmlldy5wYXJlbnROb2RlCiAgICAgICAgICAgICAgICAgICAgICAgIC5pbnNlcnRCZWZvcmUobmV3VmlldywgY3VycmVudFZpZXcpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuc2V0dGluZ3MubWFpbldyYXBwcGVyU2VsZWN0b3IpCiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRDaGlsZChuZXdWaWV3KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9lbHNlIGFzc3VtZSB0aGUgdmlldyBpcyBhbHJlYWR5IGluIHRoZSBtYXJrdXAKCiAgICAgICAgfSwKCiAgICAgICAgbWFrZVZpZXdDYWxsYmFjazE6IGZ1bmN0aW9uIChjb250cm9sbGVyLCBhY3Rpb24sIHBhcmFtcykgewoKICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIgJiYgY29udHJvbGxlclthY3Rpb25dKSB7CiAgICAgICAgICAgICAgICBjb250cm9sbGVyW2FjdGlvbl0uY2FsbChjb250cm9sbGVyLCBwYXJhbXMgfHwge30pOwogICAgICAgICAgICB9CgogICAgICAgIH0sCgogICAgICAgIG1ha2VWaWV3Q2FsbGJhY2s6IGZ1bmN0aW9uIChyb3V0ZSwgYWN0aW9uKSB7CgogICAgICAgICAgICB2YXIgc3BhID0gdGhpcywKICAgICAgICAgICAgICAgICRjb250ZXh0ID0gc3BhLiRjb250ZXh0LAogICAgICAgICAgICAgICAgc2V0dGluZ3MgPSBzcGEuc2V0dGluZ3MsCiAgICAgICAgICAgICAgICBhLCBjYlBhdGhzLCBjYWxsYmFjazsKCiAgICAgICAgICAgIGlmIChhY3Rpb24gJiYgIXJvdXRlW2FjdGlvbl0pIHsKCiAgICAgICAgICAgICAgICBpZiAoJGNvbnRleHQpIHsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCRjb250ZXh0W3JvdXRlLnZpZXdNb2R1bGVdICYmICRjb250ZXh0W3JvdXRlLnZpZXdNb2R1bGVdW2FjdGlvbl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbcm91dGUudmlld01vZHVsZV1bYWN0aW9uXS5jYWxsKCRjb250ZXh0LCByb3V0ZS5wYXJhbVZhbHVlcyB8fCB7fSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNiUGF0aHMgPSByb3V0ZVthY3Rpb25dLnNwbGl0KCIuIik7CgogICAgICAgICAgICBjYWxsYmFjayA9IHdpbmRvd1tjYlBhdGhzWzBdXTsKCiAgICAgICAgICAgIGZvciAoYSA9IDE7IGEgPCBjYlBhdGhzLmxlbmd0aDsgYSsrKSB7CgogICAgICAgICAgICAgICAgaWYgKGEgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICBzcGEgPSBjYWxsYmFjazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrW2NiUGF0aHNbYV1dOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoc3BhLCByb3V0ZS5wYXJhbVZhbHVlcyB8fCB7fSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgfSwKCiAgICAgICAgc2V0RG9jdW1lbnRUaXRsZTogZnVuY3Rpb24gKHJvdXRlKSB7CgogICAgICAgICAgICB2YXIgdGl0bGUgPSByb3V0ZS50aXRsZSwKICAgICAgICAgICAgICAgIGk7CgogICAgICAgICAgICBpZiAodGl0bGUgPT09ICIiKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByb3V0ZS5wYXJhbXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHRpdGxlID0gdGl0bGUucmVwbGFjZSgiOiIgKwogICAgICAgICAgICAgICAgICAgIHJvdXRlLnBhcmFtc1tpXSwKICAgICAgICAgICAgICAgICAgICByb3V0ZS5wYXJhbVZhbHVlc1tyb3V0ZS5wYXJhbXNbaV1dKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSB0aXRsZTsKCiAgICAgICAgfSwKCiAgICAgICAgY3JlYXRlRnJhZ21lbnQ6IGZ1bmN0aW9uIChodG1sU3RyKSB7CgogICAgICAgICAgICB2YXIgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwKICAgICAgICAgICAgICAgIHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKCiAgICAgICAgICAgIHRlbXAuaW5uZXJIVE1MID0gaHRtbFN0cjsKCiAgICAgICAgICAgIHdoaWxlICh0ZW1wLmZpcnN0Q2hpbGQpIHsKICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQodGVtcC5maXJzdENoaWxkKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGZyYWc7CiAgICAgICAgfSwKCiAgICAgICAgaGFzQW5pbWF0aW9uczogZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IGZhbHNlLAogICAgICAgICAgICAgICAgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IiksCiAgICAgICAgICAgICAgICBhbmltYXRpb25zdHJpbmcgPSAnYW5pbWF0aW9uJywKICAgICAgICAgICAgICAgIGtleWZyYW1lcHJlZml4ID0gJycsCiAgICAgICAgICAgICAgICBkb21QcmVmaXhlcyA9ICdXZWJraXQgTW96IE8gbXMgS2h0bWwnLnNwbGl0KCcgJyksCiAgICAgICAgICAgICAgICBwZnggPSAnJywKICAgICAgICAgICAgICAgIGkgPSAwOwoKICAgICAgICAgICAgaWYgKGVsbS5zdHlsZS5hbmltYXRpb25OYW1lKSB7CiAgICAgICAgICAgICAgICBhbmltYXRpb24gPSB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoYW5pbWF0aW9uID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRvbVByZWZpeGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVsbS5zdHlsZVtkb21QcmVmaXhlc1tpXSArICdBbmltYXRpb25OYW1lJ10gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICBwZnggPSBkb21QcmVmaXhlc1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uc3RyaW5nID0gcGZ4ICsgJ0FuaW1hdGlvbic7CiAgICAgICAgICAgICAgICAgICAgICAgIGtleWZyYW1lcHJlZml4ID0gJy0nICsgcGZ4LnRvTG93ZXJDYXNlKCkgKyAnLSc7CiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGlvbjsKCiAgICAgICAgfSwKCiAgICAgICAgLyoKICAgICAgICBzdG9yZUFzeW5jQ29udGVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHsKCiAgICAgICAgICAgIHRoaXMudmlld0NhY2hlLnVwZGF0ZVZpZXdzRnJvbUZyYWdtZW50KHRoaXMuc2V0dGluZ3Mudmlld1NlbGVjdG9yLCBjb250ZW50KTsKICAgICAgICB9LAoKICAgICAgICBsb2FkQXN5bmNDb250ZW50OiBmdW5jdGlvbiAodXJsLCBjYWxsYmFjaykgewoKICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCB0aGlzLnN0b3JlQXN5bmNDb250ZW50OwoKICAgICAgICAgICAgdmFyIG9SZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICAgICAgICAgIG9SZXEub25sb2FkID0gY2FsbGJhY2s7CiAgICAgICAgICAgIG9SZXEub3BlbigiZ2V0IiwgdXJsLCB0cnVlKTsKICAgICAgICAgICAgb1JlcS5zZW5kKCk7CiAgICAgICAgfSwKICAgICAgICAqLwoKICAgICAgICAvL2FycmF5IG9mIGFuaW1hdGlvbnMuIFRoZSBuYW1lcyBtYXRjaCB0aGUgQ1NTIGNsYXNzIHNvIG1ha2Ugc3VyZSB5b3UgaGF2ZSB0aGUgQ1NTIGZvciB0aGlzIGFuaW1hdGlvbiBvciB5b3Ugd2lsbCBiZSBkaXNzYXBvaW50ZWQuCiAgICAgICAgYW5pbWF0aW9uczogewogICAgICAgICAgICAic2xpZGUiOiAic2xpZGUiLAogICAgICAgICAgICAiZmFkZSI6ICJmYWRlIiwKICAgICAgICAgICAgImZsaXAiOiAiZmxpcCIKICAgICAgICB9LAoKICAgICAgICBzZXR0aW5nczogewogICAgICAgICAgICByb3V0ZXM6IFtdLAogICAgICAgICAgICB2aWV3U2VsZWN0b3I6ICIuY29udGVudC1wYW5lIiwKICAgICAgICAgICAgY3VycmVudENsYXNzOiAiY3VycmVudCIsCiAgICAgICAgICAgIG1haW5XcmFwcHBlclNlbGVjdG9yOiAibWFpbiIsCiAgICAgICAgICAgIE5vdEZvdW5kVmlldzogIm5vZm91bmRWaWV3IiwKICAgICAgICAgICAgTm90Rm91bmRSb3V0ZTogIjQwNCIsCiAgICAgICAgICAgIGRlZmF1bHRUaXRsZTogIkEgU2luZ2xlIFBhZ2UgQXBwbGljYXRpb24gd2l0aCBSb3V0ZXMiLAogICAgICAgICAgICB0aXRsZVNlbGVjdG9yOiAiLnZpZXctdGl0bGUiLAogICAgICAgICAgICBmb3JjZVJlbG9hZDogIl9mb3JjZV9yZWxvYWRfIiwKICAgICAgICAgICAgYXV0b1NldFRpdGxlOiB0cnVlLAogICAgICAgICAgICBwYXJzZURPTTogdHJ1ZSwKICAgICAgICAgICAgaW5pdFZpZXc6IHRydWUsCiAgICAgICAgICAgIGludG9BbmltYXRpb246IHRydWUsCiAgICAgICAgICAgIHZpZXdUcmFuc2l0aW9uOiAic2xpZGUiLAogICAgICAgICAgICBhc3luY1VybDogdW5kZWZpbmVkCiAgICAgICAgfQoKICAgIH07CgogICAgLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgc3BhIHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvbgogICAgU1BBLmZuLmluaXQucHJvdG90eXBlID0gU1BBLmZuOwoKICAgIHJldHVybiAod2luZG93LlNQQSA9IFNQQSk7Cgp9KSh3aW5kb3cpOw==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 05:16:36 GMT",
                    "Content-Length": "21427",
                    "Date": "Sat, 08 Nov 2014 05:16:37 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}