{
    "url": "http://localhost:9999/facadejs/Facade.js/docs/",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location.hash</b> and written to <b>$()</b> via the following statement:<ul><li>$('[id=\"' + e.replace(/#/ , \"\" ) + '\"]' ) </li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/facadejs/Facade.js/docs/",
                "path": "/facadejs/Facade.js/docs/",
                "httpVersion": "HTTP/0.0",
                "method": "GET",
                "headers": {
                    "Referer": "http://localhost:9999/facadejs/Facade.js/docs",
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9mYWNhZGVqcy9GYWNhZGUuanMvZG9jcy8gSFRUUC8wLjANCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQpSZWZlcmVyOiBodHRwOi8vbG9jYWxob3N0Ojk5OTkvZmFjYWRlanMvRmFjYWRlLmpzL2RvY3MNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "HTTP/1.1 200 OK
Content-Length: 224331
Accept-Ranges: bytes
Content-Type: text/html; charset=utf-8
Date: Fri, 07 Nov 2014 00:00:50 GMT
Last-Modified: Fri, 07 Nov 2014 00:00:50 GMT

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="initial-scale=1">
<title>facade.js &#8212; Drawing shapes, images and text in HTML5 canvas made easy.</title>
<style>

.back-to-top {
    display: none;
    position: fixed;
    right: 1em;
    bottom: 1em;
    z-index: 999;
}

.back-to-top a {
    display: block;
    padding: .5em .5em .5em 1.5em;
    line-height: 1em;
    border-radius: .25em;
    background: #fff url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxM3B4IiBoZWlnaHQ9IjE0cHgiIHZpZXdCb3g9IjAgMCAxMyAxNCI+CiAgICA8cGF0aCBkPSJNNy4xODc2MTE1NiwxMyBMNy4xODc2MTE1Niw1LjQ5MjQ5NzAzIEwxMC40NTg3ODUzLDUuNDkyNDk3MDMgTDUuMDk5MzE3NjMsMC4xMTM1NTgxMjkgTC0wLjI2MDE1LDUuNDkyNDk3MDMgTDMuMDExMDIzNzEsNS40OTI0OTcwMyBMMy4wMTEwMjM3MSwxMyBMNy4xODc2MTE1NiwxMyBaIiBmaWxsPSIjNDI4YmNhIj48L3BhdGg+Cjwvc3ZnPgo=) no-repeat .5em center;
}

.menu {
    margin: 1.5em 0 0 0;
    padding: 0;
}

.menu li {
    list-style: none;
}

.menu li a {
    display: block;
    padding: .25em;
    overflow: hidden;
    text-overflow: ellipsis;
}

.menu li ul {
    margin: .25em 0 .25em 1em;
    padding: 0;
}

.menu .scope-private {
    opacity: 0.5;
}

.method h2 {
    line-height: 1.3em;
    text-overflow: ellipsis;
    overflow: hidden;
}

.permalink {
    position: absolute;
    margin-left: -.75em;
    font-weight: normal;
    color: #eee;
}

.permalink:hover {
    color: #666;
    text-decoration: none;
}

.bs-footer {
    margin: 50px auto;
    color: #777;
    text-align: center;
}

pre .hljs {
    padding: 0;
    background: none;
}

</style>
<script>
(function(e,i,t){"use strict";var c=e.location.protocol==="file:"?"http:":e.location.protocol,o=["//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css","//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.1/styles/github.min.css","//code.jquery.com/jquery-2.1.1.js","//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.1/highlight.min.js"];function s(e){var l;if(e.match(/\.js$/)){l=i.createElement("script");l.setAttribute("src",c+e)}else if(e.match(/\.css$/)){l=i.createElement("link");l.setAttribute("rel","stylesheet");l.setAttribute("href",c+e)}l.addEventListener("load",function(){if(o.length){s(o.shift())}else{if($.isReady){t()}else{$(document).ready(t)}}});i.head.appendChild(l)}s(o.shift())})(window,document,function(){"use strict";var e=window.location.hash,i=$('[id="'+e.replace(/#/,"")+'"]'),t=$(".code"),c=$(".scope-private"),o=$(".toggle-code-blocks"),s=$(".toggle-private"),l=$(".back-to-top");function n(){if(window.scrollY>100&&l.not(":visible")){l.fadeIn()}else if(window.scrollY<100&&l.is(":visible")){l.fadeOut()}}o.on("click",function(){if(o.is(":checked")){t.show()}else{t.hide()}});s.on("click",function(){if(s.is(":checked")){c.show()}else{c.hide()}});t.hide();c.hide();if(i.length&&!i.is(":visible")){s.trigger("click")}$(".examples pre code, .code pre code").each(function(){hljs.highlightBlock(this)});$(window).on("scroll",n);n()});
</script>
</head>

<body>

<style>

header {
    padding: 1em;
    font-size: 1.2em;
    line-height: 1em;
    color: #fff;
    background-color: #322957;
    -webkit-font-smoothing: antialiased;
}

header a,
header a:hover {
    color: inherit;
}

</style>

<header>

    <a href="http://docs.facadejs.com/list">&larr; View all versions of documentation</a></i>

</header>

<div class="back-to-top"><a href="#">Back to Top</a></div>

<div class="wrap">

    <div class="container">

        <div class="page-header">

            <div class="pull-right hidden-sm hidden-xs">

                <div>
                    <label>
                        <input type="checkbox" name="toggle-code" class="toggle-code-blocks">
                        Toggle Code Blocks
                    </label>
                </div>
                <div>
                    <label>
                        <input type="checkbox" name="toggle-private" class="toggle-private">
                        Toggle Private Methods
                    </label>
                </div>

            </div>

            <h1>facade.js <small>Drawing shapes, images and text in HTML5 canvas made easy.</small></h1>

        </div>

        <div class="row">

            <div class="col-md-3 hidden-sm hidden-xs">

                <ul class="menu">


                    <li>
                        <b>facade.js</b>
                        <ul>








                                    <li class="scope-public">
                                        <a href="#facade.js-facade" title="Facade()">Facade()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.addtostage" title="Facade.addToStage()">Facade.addToStage()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.clear" title="Facade.clear()">Facade.clear()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.draw" title="Facade.draw()">Facade.draw()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.exportbase64" title="Facade.exportBase64()">Facade.exportBase64()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.height" title="Facade.height()">Facade.height()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.renderwithcontext" title="Facade.renderWithContext()">Facade.renderWithContext()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.resizeforhdpi" title="Facade.resizeForHDPI()">Facade.resizeForHDPI()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.start" title="Facade.start()">Facade.start()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.stop" title="Facade.stop()">Facade.stop()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.width" title="Facade.width()">Facade.width()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.prototype._animate" title="Facade._animate()">Facade._animate()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity" title="Facade.Entity()">Facade.Entity()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._defaultoptions" title="Facade.Entity._defaultOptions()">Facade.Entity._defaultOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._defaultmetrics" title="Facade.Entity._defaultMetrics()">Facade.Entity._defaultMetrics()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._getanchorpoint" title="Facade.Entity._getAnchorPoint()">Facade.Entity._getAnchorPoint()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._getstrokewidthoffset" title="Facade.Entity._getStrokeWidthOffset()">Facade.Entity._getStrokeWidthOffset()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._applytransforms" title="Facade.Entity._applyTransforms()">Facade.Entity._applyTransforms()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.getoption" title="Facade.Entity.getOption()">Facade.Entity.getOption()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.getalloptions" title="Facade.Entity.getAllOptions()">Facade.Entity.getAllOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._setoption" title="Facade.Entity._setOption()">Facade.Entity._setOption()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.setoptions" title="Facade.Entity.setOptions()">Facade.Entity.setOptions()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.getmetric" title="Facade.Entity.getMetric()">Facade.Entity.getMetric()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.getallmetrics" title="Facade.Entity.getAllMetrics()">Facade.Entity.getAllMetrics()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.draw" title="Facade.Entity.draw()">Facade.Entity.draw()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.polygon" title="Facade.Polygon()">Facade.Polygon()</a>
                                    </li>








                                    <li class="scope-private">
                                        <a href="#facade.js-facade.polygon.prototype._defaultoptions" title="Facade.Polygon._defaultOptions()">Facade.Polygon._defaultOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.polygon.prototype._draw" title="Facade.Polygon._draw()">Facade.Polygon._draw()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.polygon.prototype._configoptions" title="Facade.Polygon._configOptions()">Facade.Polygon._configOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.polygon.prototype._setmetrics" title="Facade.Polygon._setMetrics()">Facade.Polygon._setMetrics()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.circle" title="Facade.Circle()">Facade.Circle()</a>
                                    </li>








                                    <li class="scope-private">
                                        <a href="#facade.js-facade.circle.prototype._configoptions" title="Facade.Circle._configOptions()">Facade.Circle._configOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.circle.prototype._getanchorpoint" title="Facade.Circle._getAnchorPoint()">Facade.Circle._getAnchorPoint()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.circle.prototype._setmetrics" title="Facade.Circle._setMetrics()">Facade.Circle._setMetrics()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.line" title="Facade.Line()">Facade.Line()</a>
                                    </li>








                                    <li class="scope-private">
                                        <a href="#facade.js-facade.line.prototype._configoptions" title="Facade.Line._configOptions()">Facade.Line._configOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.line.prototype._getanchorpoint" title="Facade.Line._getAnchorPoint()">Facade.Line._getAnchorPoint()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.rect" title="Facade.Rect()">Facade.Rect()</a>
                                    </li>








                                    <li class="scope-private">
                                        <a href="#facade.js-facade.rect.prototype._configoptions" title="Facade.Rect._configOptions()">Facade.Rect._configOptions()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image" title="Facade.Image()">Facade.Image()</a>
                                    </li>








                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image.prototype.load" title="Facade.Image.load()">Facade.Image.load()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image.prototype.play" title="Facade.Image.play()">Facade.Image.play()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image.prototype.pause" title="Facade.Image.pause()">Facade.Image.pause()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image.prototype.reset" title="Facade.Image.reset()">Facade.Image.reset()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image.prototype.stop" title="Facade.Image.stop()">Facade.Image.stop()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.image.prototype._configoptions" title="Facade.Image._configOptions()">Facade.Image._configOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.image.prototype._setmetrics" title="Facade.Image._setMetrics()">Facade.Image._setMetrics()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.image.prototype._draw" title="Facade.Image._draw()">Facade.Image._draw()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.text" title="Facade.Text()">Facade.Text()</a>
                                    </li>








                                    <li class="scope-public">
                                        <a href="#facade.js-facade.text.prototype.settext" title="Facade.Text.setText()">Facade.Text.setText()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.text.prototype._draw" title="Facade.Text._draw()">Facade.Text._draw()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.text.prototype._configoptions" title="Facade.Text._configOptions()">Facade.Text._configOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.text.prototype._setmetrics" title="Facade.Text._setMetrics()">Facade.Text._setMetrics()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.group" title="Facade.Group()">Facade.Group()</a>
                                    </li>








                                    <li class="scope-private">
                                        <a href="#facade.js-facade.group.prototype._draw" title="Facade.Group._draw()">Facade.Group._draw()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.group.prototype._configoptions" title="Facade.Group._configOptions()">Facade.Group._configOptions()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.group.prototype.addtogroup" title="Facade.Group.addToGroup()">Facade.Group.addToGroup()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.group.prototype.hasentity" title="Facade.Group.hasEntity()">Facade.Group.hasEntity()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.group.prototype.removefromgroup" title="Facade.Group.removeFromGroup()">Facade.Group.removeFromGroup()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.group.prototype._setmetrics" title="Facade.Group._setMetrics()">Facade.Group._setMetrics()</a>
                                    </li>






                        </ul>

                    </li>


                </ul>

            </div>

            <div class="col-md-9">









                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade">
                                    <a href="#facade.js-facade" class="permalink">#</a> Facade()
                                </h2>

                                <p>Creates a new Facade.js object with either a preexisting canvas tag or a unique name, width, and height.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>













                                            <p>
                                                <b>canvas</b>
                                                    <code>Object</code>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Reference to an HTML canvas element or a unique name.</p>




                                            <p>
                                                <b>width</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the canvas.</p>




                                            <p>
                                                <b>height</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Height of the canvas.</p>







                                </section>


                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="properties">

                                    <h3>Properties</h3>



                                            <p>
                                                <b>canvas</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Reference to the canvas element.</p>




                                            <p>
                                                <b>context</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Reference to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D" target="_blank">CanvasRenderingContext2D</a> object.</p>




                                            <p>
                                                <b>dt</b>
                                                    <code>Integer</code>
                                            </p>
                                            <p>Current time in milliseconds since last canvas draw.</p>




                                            <p>
                                                <b>fps</b>
                                                    <code>Integer</code>
                                            </p>
                                            <p>Current frames per second.</p>




                                            <p>
                                                <b>ftime</b>
                                                    <code>Integer</code>
                                            </p>
                                            <p>Time of last canvas draw.</p>













                                </section>


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var stage = new Facade(document.querySelector(&#39;canvas&#39;));
var stage = new Facade(&#39;stage&#39;, 500, 300);
</code></pre>






















                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>function Facade(canvas, width, height) {

    if (!(this instanceof Facade)) {

        return new Facade(canvas, width, height);

    }

    this.dt = null;
    this.fps = null;
    this.ftime = null;

    this._callback = null;

    this._requestAnimation = null;

    this._width = null;
    this._height = null;

    if (canvas &amp;&amp; typeof canvas === &#x27;object&#x27; &amp;&amp; canvas.nodeType === 1) {

        this.canvas = canvas;

    } else {

        this.canvas = document.createElement(&#x27;canvas&#x27;);

        if (typeof canvas === &#x27;string&#x27;) {

            this.canvas.setAttribute(&#x27;id&#x27;, canvas);

        }

    }

    if (width) {

        this.width(width);

    } else if (this.canvas.hasAttribute(&#x27;width&#x27;)) {

        this._width = parseInt(this.canvas.getAttribute(&#x27;width&#x27;), 10);

    } else {

        this.width(this.canvas.clientWidth);

    }

    if (height) {

        this.height(height);

    } else if (this.canvas.hasAttribute(&#x27;height&#x27;)) {

        this._height = parseInt(this.canvas.getAttribute(&#x27;height&#x27;), 10);

    } else {

        this.height(this.canvas.clientHeight);

    }

    try {

        this.context = this.canvas.getContext(&#x27;2d&#x27;);

    } catch (e) {

        throw new Error(&#x27;Object passed to Facade.js was not a valid canvas element.&#x27;);

    }

}</code></pre>

                                </section>

                                <h3>Returns</h3>



















                                        <p><code>Object</code>  New Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.addtostage">
                                    <a href="#facade.js-facade.prototype.addtostage" class="permalink">#</a> Facade.addToStage()
                                </h2>

                                <p>Draws a Facade.js entity (or multiple entities) to the stage.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>obj</b>
                                                    <code>Object</code>
                                                    <code>Array</code>
                                            </p>
                                            <p>Facade.js entity or an array of entities.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Temporary options for rendering a Facade.js entity (or multiple entities).</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.addToStage(circle);
stage.addToStage(circle, { x: 100, y: 100 });
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.addToStage = function (obj, options) {

    var i,
        length;

    if (obj instanceof Facade.Entity) {

        obj.draw(this, options);

    } else if (Array.isArray(obj)) {

        for (i = 0, length = obj.length; i &lt; length; i += 1) {

            this.addToStage(obj[i], options);

        }

    } else {

        throw new Error(&#x27;Object passed to Facade.addToStage is not a valid Facade.js entity.&#x27;);

    }

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.clear">
                                    <a href="#facade.js-facade.prototype.clear" class="permalink">#</a> Facade.clear()
                                </h2>

                                <p>Clears the canvas.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code> stage.clear();
</code></pre>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.clear = function () {

    this.context.clearRect(0, 0, this.width(), this.height());

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.draw">
                                    <a href="#facade.js-facade.prototype.draw" class="permalink">#</a> Facade.draw()
                                </h2>

                                <p>Sets a callback function to run in a loop using <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame" target="_blank">requestAnimationFrame</a> or available polyfill.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>callback</b>
                                                    <code>Function</code>
                                            </p>
                                            <p>Function callback.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.draw(function () {

    this.clear();

    this.addToStage(circle, { x: 100, y: 100 });

});
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.draw = function (callback) {

    if (typeof callback === &#x27;function&#x27;) {

        this._callback = callback;

        this.start();

    } else {

        throw new Error(&#x27;Parameter passed to Facade.draw is not a valid function.&#x27;);

    }

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.exportbase64">
                                    <a href="#facade.js-facade.prototype.exportbase64" class="permalink">#</a> Facade.exportBase64()
                                </h2>

                                <p>Exports a base64 encoded representation of the current rendered canvas.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>type</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Image format: <code>image/png</code> (Default), <code>image/jpeg</code>, <code>image/webp</code> (Google Chrome Only)</p>




                                            <p>
                                                <b>quality</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Number between 0 and 100.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(stage.exportBase64(&#39;image/png&#39;, 100));
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.exportBase64 = function (type, quality) {

    if (!type) {

        type = &#x27;image/png&#x27;;

    }

    if (typeof quality === &#x27;number&#x27;) {

        quality = quality / 100;

    } else {

        quality = 1;

    }

    return this.canvas.toDataURL(type, quality);

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>String</code>  Base64 encoded string.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.height">
                                    <a href="#facade.js-facade.prototype.height" class="permalink">#</a> Facade.height()
                                </h2>

                                <p>Gets and sets the canvas height.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>height</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Height in pixels.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(stage.height()); // 300
console.log(stage.height(600)); // 600
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.height = function (height) {

    if (height) {

        this._height = parseInt(height, 10);

        if (this.canvas.hasAttribute(&#x27;data-resized-for-hdpi&#x27;)) {

            this.resizeForHDPI();

        } else {

            this.canvas.setAttribute(&#x27;height&#x27;, this._height);

        }

    }

    return this._height;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Integer</code>  Height in pixels.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.renderwithcontext">
                                    <a href="#facade.js-facade.prototype.renderwithcontext" class="permalink">#</a> Facade.renderWithContext()
                                </h2>

                                <p>Applies key-value pairs to appropriate <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D" target="_blank">CanvasRenderingContext2D</a> properties and methods.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Object containing context property and/or method names with corresponding values.</p>




                                            <p>
                                                <b>callback</b>
                                                    <code>Function</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Function to be called when context options have been rendered to the canvas.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.renderWithContext({ fillStyle: &#39;#f00&#39;, globalAlpha: 0.5, fillRect: [ 0, 0, 100, 100 ]});
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.renderWithContext = function (options, callback) {

    var keys = Object.keys(options),
        i,
        length;

    this.context.save();

    for (i = 0, length = keys.length; i &lt; length; i += 1) {

        if (_contextProperties.indexOf(keys[i]) !== -1) {

            this.context[keys[i]] = options[keys[i]];

        } else if (Array.isArray(options[keys[i]]) &amp;&amp; typeof this.context[keys[i]] === &#x27;function&#x27;) {

            this.context[keys[i]].apply(this.context, options[keys[i]]);

        }

    }

    if (callback) {

        callback.call(null, this);

    }

    this.context.restore();

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.resizeforhdpi">
                                    <a href="#facade.js-facade.prototype.resizeforhdpi" class="permalink">#</a> Facade.resizeForHDPI()
                                </h2>

                                <p>Resizes the canvas width and height to be multiplied by the pixel ratio of the device to allow for sub-pixel aliasing. Canvas tag maintains original width and height through CSS. Must be called before creating/adding any Facade entities as scaling is applied to the canvas context.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>ratio</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Ratio to scale the canvas.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.resizeForHDPI();
stage.resizeForHDPI(2);
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.resizeForHDPI = function (ratio) {

    if (ratio === undefined) {

        ratio = window.devicePixelRatio;

    } else {

        ratio = parseFloat(ratio);

    }

    if (ratio &gt; 1) {

        this.canvas.setAttribute(&#x27;style&#x27;, &#x27;width: &#x27; + this.width() + &#x27;px; height: &#x27; + this.height() + &#x27;px;&#x27;);

        this.canvas.setAttribute(&#x27;width&#x27;, this.width() * ratio);
        this.canvas.setAttribute(&#x27;height&#x27;, this.height() * ratio);

        this.context.scale(ratio, ratio);

        this.canvas.setAttribute(&#x27;data-resized-for-hdpi&#x27;, true);

    }

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.start">
                                    <a href="#facade.js-facade.prototype.start" class="permalink">#</a> Facade.start()
                                </h2>

                                <p>Starts the callback supplied in <code>Facade.draw</code>.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.start();
</code></pre>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.start = function () {

    this._requestAnimation = _requestAnimationFrame(this._animate.bind(this));

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.stop">
                                    <a href="#facade.js-facade.prototype.stop" class="permalink">#</a> Facade.stop()
                                </h2>

                                <p>Stops the callback supplied in <code>Facade.draw</code>.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.stop();
</code></pre>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.stop = function () {

    this.dt = null;
    this.fps = null;
    this.ftime = null;

    _cancelAnimationFrame(this._requestAnimation);

    this._requestAnimation = null;

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.width">
                                    <a href="#facade.js-facade.prototype.width" class="permalink">#</a> Facade.width()
                                </h2>

                                <p>Gets and sets the canvas width.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>width</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width in pixels.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(stage.width()); // 400
console.log(stage.width(800)); // 800
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.width = function (width) {

    if (width) {

        this._width = parseInt(width, 10);

        if (this.canvas.hasAttribute(&#x27;data-resized-for-hdpi&#x27;)) {

            this.resizeForHDPI();

        } else {

            this.canvas.setAttribute(&#x27;width&#x27;, this._width);

        }

    }

    return this._width;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Integer</code>  Width in pixels.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.prototype._animate">
                                    <a href="#facade.js-facade.prototype._animate" class="permalink">#</a> Facade._animate()
                                    <small>private method</small>
                                </h2>

                                <p>Method called by <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame" target="_blank">requestAnimationFrame</a>. Sets <code>Facade.dt</code>, <code>Facade.fps</code> and  <code>Facade.ftime</code>.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>time</b>
                                                    <code>Integer</code>
                                            </p>
                                            <p><a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp" target="_blank">DOMTimeStamp</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp" target="_blank">DOMHighResTimeStamp</a> (Google Chrome Only)</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>this._requestAnimation = _requestAnimationFrame(this._animate.bind(this));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype._animate = function (time) {

    if (typeof this._callback === &#x27;function&#x27;) {

        if (this.ftime) {

            this.dt = time - this.ftime;

            this.fps = (1000 / this.dt).toFixed(2);

        }

        this.ftime = time;

        this._requestAnimation = _requestAnimationFrame(this._animate.bind(this));

        this.context.save();

        this._callback();

        this.context.restore();

    } else {

        this.stop();

    }

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity">
                                    <a href="#facade.js-facade.entity" class="permalink">#</a> Facade.Entity()
                                </h2>

                                <p>The constructor for all Facade.js shape, image and text objects.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity = function (options) {

    if (!(this instanceof Facade.Entity)) {

        return new Facade.Entity();

    }

    this._options = this._defaultOptions();
    this._metrics = this._defaultMetrics();

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  New Facade.Entity object.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._defaultoptions">
                                    <a href="#facade.js-facade.entity.prototype._defaultoptions" class="permalink">#</a> Facade.Entity._defaultOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Returns a default set of options common to all Facade.js entities.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Additional options as key-value pairs.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(Facade.Entity.prototype._defaultOptions());
console.log(Facade.Entity.prototype._defaultOptions({ lineWidth: 0 }));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._defaultOptions = function (updated) {

    var options,
        keys,
        i,
        length;

    options = {
        x: 0,
        y: 0,
        anchor: &#x27;top/left&#x27;,
        rotate: 0,
        scale: 1
    };

    if (typeof updated === &#x27;object&#x27;) {

        keys = Object.keys(updated);

        for (i = 0, length = keys.length; i &lt; length; i += 1) {

            options[keys[i]] = updated[keys[i]];

        }

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Default set of options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._defaultmetrics">
                                    <a href="#facade.js-facade.entity.prototype._defaultmetrics" class="permalink">#</a> Facade.Entity._defaultMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Returns a default set of metrics common to all Facade.js entities.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Additional metrics as key-value pairs.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(Facade.Entity.prototype._defaultMetrics());
console.log(Facade.Entity.prototype._defaultMetrics({ scale: null }));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._defaultMetrics = function (updated) {

    var metrics,
        keys,
        i,
        length;

    metrics = {
        x: null,
        y: null,
        width: null,
        height: null
    };

    if (typeof updated === &#x27;object&#x27;) {

        keys = Object.keys(updated);

        for (i = 0, length = keys.length; i &lt; length; i += 1) {

            metrics[keys[i]] = updated[keys[i]];

        }

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Default set of metrics.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._getanchorpoint">
                                    <a href="#facade.js-facade.entity.prototype._getanchorpoint" class="permalink">#</a> Facade.Entity._getAnchorPoint()
                                    <small>private method</small>
                                </h2>

                                <p>Returns an array of the x and y anchor positions based on given options and metrics.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Entity options.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Entity metrics.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(rect._getAnchorPoint(options, metrics));
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._getAnchorPoint = function (options, metrics) {

    var pos = [0, 0],
        strokeWidthOffset;

    if (options.anchor.match(/center$/)) {

        pos[0] = -metrics.width / 2;

    } else if (options.anchor.match(/right$/)) {

        pos[0] = -metrics.width;

    }

    if (options.anchor.match(/^center/)) {

        pos[1] = -metrics.height / 2;

    } else if (options.anchor.match(/^bottom/)) {

        pos[1] = -metrics.height;

    }

    if (this instanceof Facade.Polygon) {

        strokeWidthOffset = this._getStrokeWidthOffset(options);

        pos[0] = pos[0] + strokeWidthOffset;
        pos[1] = pos[1] + strokeWidthOffset;

    }

    return pos;

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>Array</code>  Array with the x and y anchor positions.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._getstrokewidthoffset">
                                    <a href="#facade.js-facade.entity.prototype._getstrokewidthoffset" class="permalink">#</a> Facade.Entity._getStrokeWidthOffset()
                                    <small>private method</small>
                                </h2>

                                <p>Returns an integer for the stroke width offset. Used to calculate metrics.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Entity options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(rect._getStrokeWidthOffset(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._getStrokeWidthOffset = function (options) {

    var strokeWidthOffset = 0;

    if (options.lineWidth !== undefined) {

        strokeWidthOffset = options.lineWidth / 2;

    }

    return strokeWidthOffset;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Integer</code>  Integer representing the stroke width offset.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._applytransforms">
                                    <a href="#facade.js-facade.entity.prototype._applytransforms" class="permalink">#</a> Facade.Entity._applyTransforms()
                                    <small>private method</small>
                                </h2>

                                <p>Applies transforms (translate, rotate and scale) to an entity.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>context</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Reference to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D" target="_blank">CanvasRenderingContext2D</a> object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Entity options.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Entity metrics.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(rect._applyTransforms(context, options, metrics));
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._applyTransforms = function (context, options, metrics) {

    var anchor = this._getAnchorPoint(options, {
        x: metrics.x,
        y: metrics.y,
        width: metrics.width / options.scale,
        height: metrics.height / options.scale
    });

    context.translate.apply(context, anchor);

    if (options.rotate) {

        context.translate(-anchor[0], -anchor[1]);
        context.rotate(options.rotate * _TO_RADIANS);
        context.translate(anchor[0], anchor[1]);

    }

    if (options.scale !== 1) {

        context.translate(-anchor[0], -anchor[1]);
        context.scale(options.scale, options.scale);
        context.translate(anchor[0], anchor[1]);

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.getoption">
                                    <a href="#facade.js-facade.entity.prototype.getoption" class="permalink">#</a> Facade.Entity.getOption()
                                </h2>

                                <p>Retrieves the value of a given option. Only retrieves options set when creating a new Facade.js entity or using <a href="#facade.entity.prototype.setoptions"><code>setOptions</code></a> not through temporary options set when using <a href="#facade.addtostage"><code>Facade.addToStage</code></a>.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>key</b>
                                                    <code>String</code>
                                            </p>
                                            <p>The name of the option.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.getOption(&#39;value&#39;));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.getOption = function (key) {

    if (this._options[key] !== undefined) {

        return this._options[key];

    }

    return undefined;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code> <code>Function</code> <code>String</code> <code>Integer</code>  Value of the option requested.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.getalloptions">
                                    <a href="#facade.js-facade.entity.prototype.getalloptions" class="permalink">#</a> Facade.Entity.getAllOptions()
                                </h2>

                                <p>Retrieves the value of all options. Only retrieves options set when creating a new Facade.js entity or using <a href="#facade.entity.prototype.setoptions"><code>setOptions</code></a> not through temporary options set when using <a href="#facade.addtostage"><code>Facade.addToStage</code></a>.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.getAllOptions());
</code></pre>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.getAllOptions = function () {

    var options = {},
        keys = Object.keys(this._options),
        i,
        length;

    for (i = 0, length = keys.length; i &lt; length; i += 1) {

        options[keys[i]] = this._options[keys[i]];

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Object containing all options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._setoption">
                                    <a href="#facade.js-facade.entity.prototype._setoption" class="permalink">#</a> Facade.Entity._setOption()
                                    <small>private method</small>
                                </h2>

                                <p>Sets an option for a given entity.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>key</b>
                                                    <code>String</code>
                                            </p>
                                            <p>The option to update.</p>




                                            <p>
                                                <b>value</b>
                                                    <code>Object</code>
                                                    <code>Function</code>
                                                    <code>String</code>
                                                    <code>Integer</code>
                                            </p>
                                            <p>The new value of the specified option.</p>




                                            <p>
                                                <b>test</b>
                                                    <code>Boolean</code>
                                            </p>
                                            <p>Flag to determine if options are to be persisted in the entity or just returned.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text._setOption(&#39;value&#39;, &#39;Hello world!&#39;));
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._setOption = function (key, value, test) {

    if (this._options[key] !== undefined) {

        if (typeof this._options[key] === &#x27;number&#x27; &amp;&amp; typeof value === &#x27;string&#x27;) {

            if (value.match(_OPERATOR_TEST)) {

                value = this._options[key] + parseFloat(value.replace(&#x27;=&#x27;, &#x27;&#x27;));

            } else {

                value = parseFloat(value);

            }

        }

        if (String(typeof this._options[key]) === String(typeof value)) {

            if (!test) {

                this._options[key] = value;

            }

        } else {

            throw new Error(&#x27;The value for &#x27; + key + &#x27; (&#x27; + value + &#x27;) was a &#x27; + String(typeof value) + &#x27; not a &#x27; + String(typeof this._options[key]) + &#x27;.&#x27;);

        }

        return value;

    }

    return undefined;

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>Object</code> <code>Function</code> <code>String</code> <code>Integer</code>  Returns value of the updated option.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.setoptions">
                                    <a href="#facade.js-facade.entity.prototype.setoptions" class="permalink">#</a> Facade.Entity.setOptions()
                                </h2>

                                <p>Sets a group of options as key-value pairs to an entity.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The options to update. Does not need to be entire set of options.</p>




                                            <p>
                                                <b>test</b>
                                                    <code>Boolean</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Flag to determine if options are to be persisted in the entity or just returned.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.setOptions({ fontFamily: &#39;Georgia&#39;, fontSize: 20 }));
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.setOptions = function (updated, test) {

    var options = this.getAllOptions(),
        keys,
        i,
        length;

    if (updated) {

        keys = Object.keys(updated);

        for (i = 0, length = keys.length; i &lt; length; i += 1) {

            if (options[keys[i]] !== undefined) {

                options[keys[i]] = this._setOption(keys[i], updated[keys[i]], test);

            }

        }

        if (!test) {

            this._setMetrics();

        }

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>Object</code>  Updated options.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.getmetric">
                                    <a href="#facade.js-facade.entity.prototype.getmetric" class="permalink">#</a> Facade.Entity.getMetric()
                                </h2>

                                <p>Retrieves the value of a given metric. Only retrieves metrics set when creating a new Facade.js entity or using <a href="#facade.entity.prototype.setoptions"><code>setOptions</code></a> not through temporary options set when using <a href="#facade.addtostage"><code>Facade.addToStage</code></a>.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>key</b>
                                                    <code>String</code>
                                            </p>
                                            <p>The name of the metric.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.getMetric(&#39;width&#39;));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.getMetric = function (key) {

    if (this._metrics[key] !== undefined) {

        return this._metrics[key];

    }

    return undefined;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Integer</code>  Value of the metric requested.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.getallmetrics">
                                    <a href="#facade.js-facade.entity.prototype.getallmetrics" class="permalink">#</a> Facade.Entity.getAllMetrics()
                                </h2>

                                <p>Retrieves the value of all metrics. Only retrieves metrics set when creating a new Facade.js entity or using <a href="#facade.entity.prototype.setoptions"><code>setOptions</code></a> not through temporary options set when using <a href="#facade.addtostage"><code>Facade.addToStage</code></a>.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.getAllMetrics());
</code></pre>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.getAllMetrics = function () {

    var metrics = {},
        keys = Object.keys(this._metrics),
        i,
        length;

    for (i = 0, length = keys.length; i &lt; length; i += 1) {

        metrics[keys[i]] = this._metrics[keys[i]];

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Object containing all metrics.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.draw">
                                    <a href="#facade.js-facade.entity.prototype.draw" class="permalink">#</a> Facade.Entity.draw()
                                </h2>

                                <p>Renders an entity to a canvas.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>facade</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js object.</p>




                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Temporary options for rendering a Facade.js entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>entity.draw(stage);
entity.draw(stage, { x: 100, y: 100 });
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.draw = function (facade, updated) {

    var options = this.setOptions(updated, true),
        metrics;

    if (typeof this._configOptions === &#x27;function&#x27;) {

        options = this._configOptions(options);

    }

    metrics = updated ? this._setMetrics(options) : this.getAllMetrics();

    if (typeof this._draw === &#x27;function&#x27;) {

        facade.renderWithContext(options, this._draw.bind(this, facade, options, metrics));

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.polygon">
                                    <a href="#facade.js-facade.polygon" class="permalink">#</a> Facade.Polygon()
                                </h2>

                                <p>Create a polygon object. Inherits all methods from <b>Facade.Entity</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the polygon with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position the polygon. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position the polygon. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the polygon. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the polygon. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a polygon. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.opacity</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Opacity of the polygon. Integer between 0 and 100. <i>Default:</i> 100</p>




                                            <p>
                                                <b>options.points</b>
                                                    <code>Array</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Multi-dimensional array of points used to render a polygon. Point arrays with 2 values is rendered as a line, 5 values is rendered as an arc and 6 values is rendered as a bezier curve.</p>




                                            <p>
                                                <b>options.fillStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Fill color for the polygon. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.strokeStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Color of a polygon's stroke. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.lineWidth</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the stroke. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.lineCap</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of line cap. <i>Default:</i> "butt"<br><ul><li>butt</li><li>round</li><li>square</li></ul></p>




                                            <p>
                                                <b>options.lineJoin</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of line join. <i>Default:</i> "miter"<br><ul><li>miter</li><li>round</li><li>bevel</li></ul></p>




                                            <p>
                                                <b>options.closePath</b>
                                                    <code>Boolean</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Boolean to determine if the polygon should be self closing or not. <i>Default:</i> true</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var polygon = new Facade.Polygon({
    x: 0,
    y: 0,
    points: [ [100, 0], [200, 100], [100, 200], [0, 100] ],
    lineWidth: 10,
    strokeStyle: &#39;#333E4B&#39;,
    fillStyle: &#39;#1C73A8&#39;,
    anchor: &#39;top/left&#39;
});
</code></pre>


































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Polygon = function (options) {

    if (!(this instanceof Facade.Polygon)) {

        return new Facade.Polygon(options);

    }

    this._options = this._defaultOptions();
    this._metrics = this._defaultMetrics();

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>































                                        <p><code>Object</code>  New Facade.Polygon object.</p>





                            </div>








                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.polygon.prototype._defaultoptions">
                                    <a href="#facade.js-facade.polygon.prototype._defaultoptions" class="permalink">#</a> Facade.Polygon._defaultOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Returns a default set of options common to all Facade.js polygon entities.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Additional options as key-value pairs.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(Facade.Polygon.prototype._defaultOptions());
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Polygon.prototype._defaultOptions = function (updated) {

    var options,
        keys,
        i,
        length;

    options = Facade.Entity.prototype._defaultOptions({
        opacity: 100,
        points: [],
        fillStyle: &#x27;#000&#x27;,
        strokeStyle: &#x27;&#x27;,
        lineWidth: 0,
        lineCap: &#x27;butt&#x27;,
        lineJoin: &#x27;miter&#x27;,
        closePath: true
    });

    if (updated) {

        keys = Object.keys(updated);

        for (i = 0, length = keys.length; i &lt; length; i += 1) {

            options[keys[i]] = updated[keys[i]];

        }

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Default set of options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.polygon.prototype._draw">
                                    <a href="#facade.js-facade.polygon.prototype._draw" class="permalink">#</a> Facade.Polygon._draw()
                                    <small>private method</small>
                                </h2>

                                <p>Renders a polygon entity to a canvas.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>facade</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Options used to render the polygon.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Metrics used to render the polygon.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>polygon._draw(facade, options, metrics);
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Polygon.prototype._draw = function (facade, options, metrics) {

    var context = facade.context,
        i,
        length;

    this._applyTransforms(context, options, metrics);

    if (options.points.length) {

        context.beginPath();

        for (i = 0, length = options.points.length; i &lt; length; i += 1) {

            if (options.points[i].length === 6) {

                context.bezierCurveTo.apply(context, options.points[i]);

            } else if (options.points[i].length === 5) {

                context.arc.apply(context, options.points[i]);

            } else if (options.points[i].length === 2) {

                context.lineTo.apply(context, options.points[i]);

            }

        }

        if (options.closePath) {

            context.closePath();

        } else {

            context.moveTo.apply(context, options.points[length - 1]);

        }

        if (options.fillStyle) {

            context.fill();

        }

        if (options.lineWidth &gt; 0) {

            context.stroke();

        }

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.polygon.prototype._configoptions">
                                    <a href="#facade.js-facade.polygon.prototype._configoptions" class="permalink">#</a> Facade.Polygon._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a polygon entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of polygon specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(polygon._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Polygon.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];
    options.globalAlpha = options.opacity / 100;

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.polygon.prototype._setmetrics">
                                    <a href="#facade.js-facade.polygon.prototype._setmetrics" class="permalink">#</a> Facade.Polygon._setMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Set metrics based on the polygon&#39;s options.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Custom options used to render the polygon.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(polygon._setMetrics());
console.log(polygon._setMetrics(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Polygon.prototype._setMetrics = function (updated) {

    var metrics = this._defaultMetrics(),
        options = updated || this.getAllOptions(),
        bounds = { top: null, right: null, bottom: null, left: null },
        point,
        i,
        length,
        anchor,
        strokeWidthOffset = this._getStrokeWidthOffset(options);

    if (typeof this._configOptions === &#x27;function&#x27;) {

        options = this._configOptions(options);

    }

    for (i = 0, length = options.points.length; i &lt; length; i += 1) {

        if (options.points[i].length === 2) { // Rect

            point = { x: options.points[i][0], y: options.points[i][1] };

        } else if (options.points[i].length === 5) { // Circle

            metrics.width = options.points[i][2] * 2;
            metrics.height = options.points[i][2] * 2;

            point = {
                x: options.points[i][0] - options.points[i][2],
                y: options.points[i][1] - options.points[i][2]
            };

        }

        if (point.x &lt; bounds.left || bounds.left === null) {

            bounds.left = point.x;

        }

        if (point.y &lt; bounds.top || bounds.top === null) {

            bounds.top = point.y;

        }

        if (point.x &gt; bounds.right || bounds.right === null) {

            bounds.right = point.x;

        }

        if (point.y &gt; bounds.bottom || bounds.bottom === null) {

            bounds.bottom = point.y;

        }

    }

    metrics.x = options.x + bounds.left;
    metrics.y = options.y + bounds.top;

    if (metrics.width === null &amp;&amp; metrics.height === null) {

        metrics.width = bounds.right - bounds.left;
        metrics.height = bounds.bottom - bounds.top;

    }

    metrics.width = (metrics.width + strokeWidthOffset * 2) * options.scale;
    metrics.height = (metrics.height + strokeWidthOffset * 2) * options.scale;

    anchor = this._getAnchorPoint(options, metrics);

    metrics.x = metrics.x + anchor[0] - strokeWidthOffset;
    metrics.y = metrics.y + anchor[1] - strokeWidthOffset;

    if (this instanceof Facade.Circle) {

        metrics.x = metrics.x + options.radius;
        metrics.y = metrics.y + options.radius;

    }

    if (!updated) {

        this._metrics = metrics;

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Object with metrics as key-value pairs.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.circle">
                                    <a href="#facade.js-facade.circle" class="permalink">#</a> Facade.Circle()
                                </h2>

                                <p>Create a circle object. Inherits all methods from <b>Facade.Polygon</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the circle with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position the circle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position the circle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the circle. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the circle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a circle. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.opacity</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Opacity of the circle. Integer between 0 and 100. <i>Default:</i> 100</p>




                                            <p>
                                                <b>options.fillStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Fill color for the circle. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.strokeStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Color of a circle's stroke. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.lineWidth</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the stroke. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.lineCap</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of line cap. <i>Default:</i> "butt"<br><ul><li>butt</li><li>round</li><li>square</li></ul></p>




                                            <p>
                                                <b>options.lineJoin</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of line join. <i>Default:</i> "miter"<br><ul><li>miter</li><li>round</li><li>bevel</li></ul></p>




                                            <p>
                                                <b>options.radius</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Radius of the circle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.start</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degree at which the circle begins. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.end</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degree at which the circle ends. <i>Default:</i> 360</p>




                                            <p>
                                                <b>options.counterclockwise</b>
                                                    <code>Boolean</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Boolean determining if the circle will be drawn in a counter clockwise direction. <i>Default:</i> false</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var circle = new Facade.Circle({
    x: 0,
    y: 0,
    radius: 100,
    lineWidth: 10,
    strokeStyle: &#39;#333E4B&#39;,
    fillStyle: &#39;#1C73A8&#39;,
    anchor: &#39;top/left&#39;
});
</code></pre>






































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Circle = function (options) {

    if (!(this instanceof Facade.Circle)) {

        return new Facade.Circle(options);

    }

    this._options = this._defaultOptions({
        radius: 0,
        begin: 0,
        end: 360,
        counterclockwise: false
    });
    this._metrics = this._defaultMetrics();

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>



































                                        <p><code>Object</code>  New Facade.Circle object.</p>





                            </div>








                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.circle.prototype._configoptions">
                                    <a href="#facade.js-facade.circle.prototype._configoptions" class="permalink">#</a> Facade.Circle._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a circle entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of circle specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(circle._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Circle.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];
    options.globalAlpha = options.opacity / 100;

    if (options.counterclockwise) {

        options.points = [ [ 0, 0, options.radius, options.end * _TO_RADIANS, options.begin * _TO_RADIANS ] ];

    } else {

        options.points = [ [ 0, 0, options.radius, options.begin * _TO_RADIANS, options.end * _TO_RADIANS ] ];

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.circle.prototype._getanchorpoint">
                                    <a href="#facade.js-facade.circle.prototype._getanchorpoint" class="permalink">#</a> Facade.Circle._getAnchorPoint()
                                    <small>private method</small>
                                </h2>

                                <p>Returns an array of the x and y anchor positions based on given options and metrics.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Circle options.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Circle metrics.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(circle._getAnchorPoint(options, metrics));
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Circle.prototype._getAnchorPoint = function (options, metrics) {

    var pos = Facade.Polygon.prototype._getAnchorPoint.call(this, options, metrics);

    pos[0] = pos[0] + options.radius;
    pos[1] = pos[1] + options.radius;

    return pos;

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>Array</code>  Array with the x and y anchor positions.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.circle.prototype._setmetrics">
                                    <a href="#facade.js-facade.circle.prototype._setmetrics" class="permalink">#</a> Facade.Circle._setMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Set metrics based on the circle&#39;s options.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Custom options used to render the circle.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(circle._setMetrics());
console.log(circle._setMetrics(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Circle.prototype._setMetrics = function (updated) {

    var metrics = Facade.Polygon.prototype._setMetrics.call(this, updated),
        options = updated || this.getAllOptions();

    metrics.x = metrics.x - options.radius;
    metrics.y = metrics.y - options.radius;

    if (!updated) {

        this._metrics = metrics;

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Object with metrics as key-value pairs.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.line">
                                    <a href="#facade.js-facade.line" class="permalink">#</a> Facade.Line()
                                </h2>

                                <p>Create a line object. Inherits all methods from <b>Facade.Polygon</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the line with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position the line. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position the line. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the line. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the line. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a line. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.opacity</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Opacity of the line. Integer between 0 and 100. <i>Default:</i> 100</p>




                                            <p>
                                                <b>options.strokeStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Color of a line. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.lineWidth</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the stroke. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.lineCap</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of line cap. <i>Default:</i> "butt"<br><ul><li>butt</li><li>round</li><li>square</li></ul></p>




                                            <p>
                                                <b>options.x1</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate where line begins. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y1</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate where line begins. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.x2</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate where line ends. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y2</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate where line ends. <i>Default:</i> 0</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var line = new Facade.Line({
    x: 0,
    y: 0,
    x1: 0,
    x2: 200,
    lineWidth: 10,
    strokeStyle: &#39;#333E4B&#39;,
    anchor: &#39;top/left&#39;
});
</code></pre>


































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Line = function (options) {

    if (!(this instanceof Facade.Line)) {

        return new Facade.Line(options);

    }

    this._options = this._defaultOptions({
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0,
        lineWidth: 1
    });
    this._metrics = this._defaultMetrics();

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>































                                        <p><code>Object</code>  New Facade.Line object.</p>





                            </div>








                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.line.prototype._configoptions">
                                    <a href="#facade.js-facade.line.prototype._configoptions" class="permalink">#</a> Facade.Line._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a line entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of line specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(line._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Line.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];
    options.globalAlpha = options.opacity / 100;
    options.closePath = false;

    options.points = [ [ options.x1, options.y1 ], [ options.x2, options.y2 ] ];

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.line.prototype._getanchorpoint">
                                    <a href="#facade.js-facade.line.prototype._getanchorpoint" class="permalink">#</a> Facade.Line._getAnchorPoint()
                                    <small>private method</small>
                                </h2>

                                <p>Returns an array of the x and y anchor positions based on given options and metrics.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Line options.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Line metrics.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(line._getAnchorPoint(options, metrics));
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Line.prototype._getAnchorPoint = function (options, metrics) {

    var pos = [0, 0];

    if (options.anchor.match(/center$/)) {

        pos[0] = -(metrics.width / 2 - options.lineWidth / 2);

    } else if (options.anchor.match(/right$/)) {

        pos[0] = -(metrics.width - options.lineWidth);

    }

    if (options.anchor.match(/^center/)) {

        pos[1] = -(metrics.height / 2 - options.lineWidth / 2);

    } else if (options.anchor.match(/^bottom/)) {

        pos[1] = -(metrics.height - options.lineWidth);

    }

    return pos;

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>Array</code>  Array with the x and y anchor positions.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.rect">
                                    <a href="#facade.js-facade.rect" class="permalink">#</a> Facade.Rect()
                                </h2>

                                <p>Create a rectangle object. Inherits all methods from <b>Facade.Polygon</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the rectangle with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position the rectangle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position the rectangle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the rectangle. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the rectangle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a rectangle. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.opacity</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Opacity of the rectangle. Integer between 0 and 100. <i>Default:</i> 100</p>




                                            <p>
                                                <b>options.fillStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Fill color for the rectangle. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.strokeStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Color of a rectangle's stroke. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.lineWidth</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the stroke. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.lineJoin</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of rectangle join. <i>Default:</i> "miter"<br><ul><li>miter</li><li>round</li><li>bevel</li></ul></p>




                                            <p>
                                                <b>options.width</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the rectangle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.height</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Height of the rectangle. <i>Default:</i> 0</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var rect = new Facade.Rect({
    x: 0,
    y: 0,
    width: 200,
    height: 200,
    lineWidth: 10,
    strokeStyle: &#39;#333E4B&#39;,
    fillStyle: &#39;#1C73A8&#39;,
    anchor: &#39;top/left&#39;
});
</code></pre>
































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Rect = function (options) {

    if (!(this instanceof Facade.Rect)) {

        return new Facade.Rect(options);

    }

    this._options = this._defaultOptions({
        width: 0,
        height: 0
    });
    this._metrics = this._defaultMetrics();

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>





























                                        <p><code>Object</code>  New Facade.Rect object.</p>





                            </div>








                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.rect.prototype._configoptions">
                                    <a href="#facade.js-facade.rect.prototype._configoptions" class="permalink">#</a> Facade.Rect._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a rectangle entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of rectangle specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(rect._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Rect.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];
    options.globalAlpha = options.opacity / 100;

    options.points = [ [ 0, 0 ], [ options.width, 0 ], [ options.width, options.height ], [ 0, options.height ] ];

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image">
                                    <a href="#facade.js-facade.image" class="permalink">#</a> Facade.Image()
                                </h2>

                                <p>Create an image object. Inherits all methods from <b>Facade.Entity</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>source</b>
                                                    <code>Object</code>
                                                    <code>String</code>
                                            </p>
                                            <p>Local image file or reference to an HTML image element.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the image with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position an image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position an image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the image. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of an image. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.width</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.height</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Height of the image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.tileX</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Number of times to tile the image horizontally. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.tileY</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Number of times to tile the image vertically. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.offsetX</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Starting X coordinate within the image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.offsetY</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Starting Y coordinate within the image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.frames</b>
                                                    <code>Array</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Array of frame numbers (integers starting at 0) for sprite animation. <i>Default:</i> [0]</p>




                                            <p>
                                                <b>options.speed</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Speed of sprite animation. <i>Default:</i> 120</p>




                                            <p>
                                                <b>options.loop</b>
                                                    <code>Boolean</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Determines if the animation should loop. <i>Default:</i> true</p>




                                            <p>
                                                <b>options.callback</b>
                                                    <code>Function</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Function called for every frame of a sprite animation. <i>Default:</i> `function (frame) { };`</p>













                                </section>


                                
                                
                                
                                
                                
                                
                                


                                <section class="properties">

                                    <h3>Properties</h3>





































                                            <p>
                                                <b>image</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Reference to the image element.</p>




                                            <p>
                                                <b>animating</b>
                                                    <code>Boolean</code>
                                            </p>
                                            <p>Boolean state of the animation.</p>




                                            <p>
                                                <b>currentFrame</b>
                                                    <code>Integer</code>
                                            </p>
                                            <p>Current frame of animation.</p>







                                </section>


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var image = new Facade.Image(&#39;images/sprite.png&#39;, {
    x: 0,
    y: 0,
    width: 100,
    height: 200,
    anchor: &#39;top/left&#39;
});
</code></pre>














































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image = function (img, options) {

    if (!(this instanceof Facade.Image)) {

        return new Facade.Image(img, options);

    }

    this._options = this._defaultOptions({
        width: 0,
        height: 0,
        tileX: 1,
        tileY: 1,
        offsetX: 0,
        offsetY: 0,
        frames: [0],
        speed: 120,
        loop: true,
        callback: function () { return undefined; }
    });
    this._metrics = this._defaultMetrics();

    this.animating = false;
    this.currentFrame = 0;

    this.setOptions(options);

    this.load(img);

};</code></pre>

                                </section>

                                <h3>Returns</h3>











































                                        <p><code>Object</code>  New Facade.Image object.</p>





                            </div>








                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image.prototype.load">
                                    <a href="#facade.js-facade.image.prototype.load" class="permalink">#</a> Facade.Image.load()
                                </h2>

                                <p>Loads either a reference to an image tag or an image URL into a Facade.Image entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>source</b>
                                                    <code>Object</code>
                                                    <code>String</code>
                                            </p>
                                            <p>A reference to an image tag or an image URL.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(image.load(document.querySelector(&#39;img&#39;)));
console.log(image.load(&#39;images/sprite.png&#39;));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype.load = function (source) {

    if (typeof source === &#x27;object&#x27; &amp;&amp; source.nodeType === 1) {

        this.image = source;

    } else {

        this.image = document.createElement(&#x27;img&#x27;);
        this.image.setAttribute(&#x27;src&#x27;, source);

    }

    if (this.image.complete) {

        this._setMetrics();

    } else {

        this.image.addEventListener(&#x27;load&#x27;, this._setMetrics.bind(this, null));

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image.prototype.play">
                                    <a href="#facade.js-facade.image.prototype.play" class="permalink">#</a> Facade.Image.play()
                                </h2>

                                <p>Starts an image sprite animation.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <p> image.play();</p>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype.play = function () {

    this.animating = true;

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js image object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image.prototype.pause">
                                    <a href="#facade.js-facade.image.prototype.pause" class="permalink">#</a> Facade.Image.pause()
                                </h2>

                                <p>Pauses an image sprite animation.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <p> image.pause();</p>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype.pause = function () {

    this.animating = false;

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js image object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image.prototype.reset">
                                    <a href="#facade.js-facade.image.prototype.reset" class="permalink">#</a> Facade.Image.reset()
                                </h2>

                                <p>Resets an image sprite animation to the first frame.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <p> image.reset();</p>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype.reset = function () {

    this.currentFrame = 0;

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js image object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image.prototype.stop">
                                    <a href="#facade.js-facade.image.prototype.stop" class="permalink">#</a> Facade.Image.stop()
                                </h2>

                                <p>Stops and resets an image sprite animation.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <p> image.stop();</p>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype.stop = function () {

    this.currentFrame = 0;

    this.animating = false;

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js image object.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.image.prototype._configoptions">
                                    <a href="#facade.js-facade.image.prototype._configoptions" class="permalink">#</a> Facade.Image._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a image entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of image specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(image._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];

    if (this.image &amp;&amp; this.image.complete) {

        if (!options.width) {

            options.width = this.image.width;

        }

        if (!options.height) {

            options.height = this.image.height;

        }

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.image.prototype._setmetrics">
                                    <a href="#facade.js-facade.image.prototype._setmetrics" class="permalink">#</a> Facade.Image._setMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Set metrics based on the image&#39;s options.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Custom options used to render the image.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(image._setMetrics());
console.log(image._setMetrics(updated));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype._setMetrics = function (updated) {

    var metrics = this._defaultMetrics(),
        options = updated || this.getAllOptions(),
        anchor;

    if (typeof this._configOptions === &#x27;function&#x27;) {

        options = this._configOptions(options);

    }

    metrics.width = options.width * options.tileX * options.scale;
    metrics.height = options.height * options.tileY * options.scale;

    anchor = this._getAnchorPoint(options, metrics);

    metrics.x = options.x + anchor[0];
    metrics.y = options.y + anchor[1];

    if (!updated) {

        this._metrics = metrics;

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Object with metrics as key-value pairs.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.image.prototype._draw">
                                    <a href="#facade.js-facade.image.prototype._draw" class="permalink">#</a> Facade.Image._draw()
                                    <small>private method</small>
                                </h2>

                                <p>Renders an image entity to a canvas.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>facade</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Options used to render the image.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Metrics used to render the image.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>image._draw(facade, options, metrics);
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype._draw = function (facade, options, metrics) {

    var context = facade.context,
        currentOffsetX = options.offsetX,
        currentOffsetY = options.offsetY,
        currentWidth = options.width,
        currentHeight = options.height,
        originalWidth = this.image.width,
        originalHeight = this.image.height,
        x,
        y;

    if (this.image.complete) {

        this._applyTransforms(context, options, metrics);

        if (options.frames.length) {

            currentOffsetX += options.frames[this.currentFrame] * options.width;

            if (currentOffsetX + options.width &gt; originalWidth) {

                currentOffsetY += Math.floor(currentOffsetX / originalWidth) * options.height;

                currentOffsetX = currentOffsetX % originalWidth;

            }

        }

        if (currentOffsetX + currentWidth &gt; originalWidth) {

            currentWidth = currentOffsetX + currentWidth - originalWidth;

        }

        if (currentOffsetY + currentHeight &gt; originalHeight) {

            currentHeight = currentOffsetY + currentHeight - originalHeight;

        }

        for (x = 0; x &lt; options.tileX; x += 1) {

            for (y = 0; y &lt; options.tileY; y += 1) {

                context.drawImage(
                    this.image,
                    currentOffsetX,
                    currentOffsetY,
                    currentWidth,
                    currentHeight,
                    options.width * x,
                    options.height * y,
                    currentWidth,
                    currentHeight
                );

            }

        }

        if (this.animating) {

            if (!this.ftime || facade.ftime - this.ftime &gt;= options.speed) {

                if (this.ftime) {

                    this.currentFrame += 1;

                }

                this.ftime = facade.ftime;

                if (this.currentFrame &gt;= options.frames.length) {

                    if (options.loop) {

                        this.currentFrame = 0;

                    } else {

                        this.currentFrame = options.frames.length - 1;

                        this.isAnimating = false;

                    }

                }

                if (typeof options.callback === &#x27;function&#x27;) {

                    options.callback.call(this, options.frames[this.currentFrame]);

                }

            }

        }

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.text">
                                    <a href="#facade.js-facade.text" class="permalink">#</a> Facade.Text()
                                </h2>

                                <p>Create a text object. Inherits all methods from <b>Facade.Entity</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>value</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Value of the text object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the text entity with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position a text object. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position a text object. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the text object. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the text object. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a text object. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.opacity</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Opacity of the text object. Integer between 0 and 100. <i>Default:</i> 100</p>




                                            <p>
                                                <b>options.width</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Max width of the text object. Will cause text to wrap onto a new line if necessary. No wrapping will occur if the value is set to 0. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.fontFamily</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Sets the font family of the text. Only one font can be specified at a time. <i>Default:</i> "Arial"</p>




                                            <p>
                                                <b>options.fontStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Font style of the text. <i>Default:</i> "normal"<br><ul><li>normal</li><li>bold</li><li>italic</li></ul></p>




                                            <p>
                                                <b>options.fontSize</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Font size in pixels. <i>Default:</i> 30</p>




                                            <p>
                                                <b>options.lineHeight</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Line height of the text. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.textAlignment</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Horizontal alignment of the text. <i>Default:</i> "left"<br><ul><li>left</li><li>center</li><li>right</li></ul></p>




                                            <p>
                                                <b>options.textBaseline</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Baseline to set the vertical alignment of the text drawn. <i>Default:</i> "top"<br><ul><li>top</li><li>hanging</li><li>middle</li><li>alphabetic</li><li>ideographic</li><li>bottom</li></ul></p>




                                            <p>
                                                <b>options.fillStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Fill color for the text object. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.strokeStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Color of a text object's stroke. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.lineWidth</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the stroke. <i>Default:</i> 0</p>









                                </section>


                                
                                
                                


                                <section class="properties">

                                    <h3>Properties</h3>







































                                            <p>
                                                <b>value</b>
                                                    <code>String</code>
                                            </p>
                                            <p>Current value of the text object.</p>







                                </section>


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var text = new Facade.Text(&#39;Hello World!&#39;, {
    x: 0,
    y: 0,
    fontFamily: &#39;Helvetica&#39;,
    fontSize: 40,
    fillStyle: &#39;#333&#39;,
    anchor: &#39;top/left&#39;
});
</code></pre>












































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Text = function (value, options) {

    if (!(this instanceof Facade.Text)) {

        return new Facade.Text(value, options);

    }

    this._options = this._defaultOptions({
        opacity: 100,
        width: 0,
        fontFamily: &#x27;Arial&#x27;,
        fontStyle: &#x27;normal&#x27;,
        fontSize: 16,
        lineHeight: 1,
        textAlignment: &#x27;left&#x27;,
        textBaseline: &#x27;top&#x27;,
        fillStyle: &#x27;#000&#x27;,
        strokeStyle: &#x27;#000&#x27;,
        lineWidth: 0
    });
    this._metrics = this._defaultMetrics();

    this._maxLineWidth = 0;

    this._lines = [];

    this.setOptions(options);

    if (value !== undefined) {

        this.setText(value);

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









































                                        <p><code>Object</code>  New Facade.Text object.</p>





                            </div>








                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.text.prototype.settext">
                                    <a href="#facade.js-facade.text.prototype.settext" class="permalink">#</a> Facade.Text.setText()
                                </h2>

                                <p>Sets the text entities value.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>value</b>
                                                    <code>String</code>
                                            </p>
                                            <p>The new value of the text entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.setText(&#39;Lorem ipsum dolor sit amet&#39;));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Text.prototype.setText = function (value) {

    var options = this.getAllOptions(),
        words = [],
        currentWord = null,
        currentLine = &#x27;&#x27;,
        currentLineWidth = 0,
        i,
        length;

    this.value = value;

    this._maxLineWidth = options.width;

    this._lines = [];

    if (value) {

        words = String(value).match(/\n|[\S]+ ?/g);

    }

    if (typeof this._configOptions === &#x27;function&#x27;) {

        options = this._configOptions(options);

    }

    _context.save();

    _context.font = options.font;

    while (words.length) {

        currentWord = words.shift();
        currentLineWidth = _context.measureText(currentLine + currentWord.replace(/\s$/, &#x27;&#x27;)).width;

        if ((options.width &gt; 0 &amp;&amp; currentLineWidth &gt; options.width) || currentWord.match(/\n/)) {

            this._lines.push([currentLine.replace(/\s$/, &#x27;&#x27;), 0, this._lines.length * (options.fontSize * options.lineHeight)]);

            currentLine = currentWord.replace(/\n/, &#x27;&#x27;);

        } else {

            currentLine = currentLine + currentWord;

            if (currentLineWidth &gt; this._maxLineWidth) {

                this._maxLineWidth = currentLineWidth;

            }

        }

    }

    this._lines.push([currentLine.replace(/\s$/, &#x27;&#x27;), 0, this._lines.length * (options.fontSize * options.lineHeight)]);

    for (i = 0, length = this._lines.length; i &lt; length; i += 1) {

        currentLineWidth = _context.measureText(this._lines[i][0]).width;

        if (options.textAlignment === &#x27;center&#x27;) {

            this._lines[i][1] = (this._maxLineWidth - currentLineWidth) / 2;

        } else if (options.textAlignment === &#x27;right&#x27;) {

            this._lines[i][1] = this._maxLineWidth - currentLineWidth;

        }

    }

    _context.restore();

    this._setMetrics();

    return this._lines;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Array</code>  An array of lines and the position to render using <a href="https://developer.mozilla.org/en-US/docs/Drawing_text_using_a_canvas#fillText()">fillText()</a> and <a href="https://developer.mozilla.org/en-US/docs/Drawing_text_using_a_canvas#strokeText()">strokeText()</a>.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.text.prototype._draw">
                                    <a href="#facade.js-facade.text.prototype._draw" class="permalink">#</a> Facade.Text._draw()
                                    <small>private method</small>
                                </h2>

                                <p>Renders a text entity to a canvas.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>facade</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Options used to render the text entity.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Metrics used to render the text entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>text._draw(facade, options, metrics);
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Text.prototype._draw = function (facade, options, metrics) {

    var context = facade.context,
        i,
        length;

    this._applyTransforms(context, options, metrics);

    for (i = 0, length = this._lines.length; i &lt; length; i += 1) {

        if (options.fillStyle) {

            context.fillText.apply(context, this._lines[i]);

        }

        if (options.lineWidth) {

            context.strokeText.apply(context, this._lines[i]);

        }

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.text.prototype._configoptions">
                                    <a href="#facade.js-facade.text.prototype._configoptions" class="permalink">#</a> Facade.Text._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a text entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of text specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Text.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];
    options.globalAlpha = options.opacity / 100;
    options.font = options.fontStyle + &#x27; &#x27; + parseInt(options.fontSize, 10) + &#x27;px &#x27; + options.fontFamily;

    if (options.width === 0) {

        options.width = this._maxLineWidth;

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.text.prototype._setmetrics">
                                    <a href="#facade.js-facade.text.prototype._setmetrics" class="permalink">#</a> Facade.Text._setMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Set metrics based on the text&#39;s options.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Custom options used to render the text entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text._setMetrics());
console.log(text._setMetrics(updated));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Text.prototype._setMetrics = function (updated) {

    var metrics = this._defaultMetrics(),
        options = updated || this.getAllOptions(),
        anchor;

    if (typeof this._configOptions === &#x27;function&#x27;) {

        options = this._configOptions(options);

    }

    if (this._lines) {

        metrics.width = options.width * options.scale;
        metrics.height = this._lines.length * (options.fontSize * options.lineHeight) * options.scale;

    }

    anchor = this._getAnchorPoint(options, metrics);

    metrics.x = options.x + anchor[0];
    metrics.y = options.y + anchor[1];

    if (!updated) {

        this._metrics = metrics;

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Object with metrics as key-value pairs.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.group">
                                    <a href="#facade.js-facade.group" class="permalink">#</a> Facade.Group()
                                </h2>

                                <p>Create a group object. Inherits all methods from <b>Facade.Entity</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the group with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position a group. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position a group. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the group. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the group. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a group. <i>Default:</i> 1</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var group = new Facade.Group({ x: 100, y: 100 });

group.addToGroup(polygon);
group.addToGroup(circle);
group.addToGroup(line);
group.addToGroup(rect);
</code></pre>


















                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group = function (options) {

    if (!(this instanceof Facade.Group)) {

        return new Facade.Group(options);

    }

    this._options = this._defaultOptions();
    this._metrics = this._defaultMetrics();

    this._objects = [];

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>















                                        <p><code>Object</code>  New Facade.Group object.</p>





                            </div>








                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.group.prototype._draw">
                                    <a href="#facade.js-facade.group.prototype._draw" class="permalink">#</a> Facade.Group._draw()
                                    <small>private method</small>
                                </h2>

                                <p>Renders a group of entities to a canvas.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>facade</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Options used to render the group.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Metrics used to render the group.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>group._draw(stage, options, metrics);
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype._draw = function (facade, options, metrics) {

    var context = facade.context,
        i,
        length;

    this._applyTransforms(context, options, metrics);

    for (i = 0, length = this._objects.length; i &lt; length; i += 1) {

        facade.addToStage(this._objects[i]);

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.group.prototype._configoptions">
                                    <a href="#facade.js-facade.group.prototype._configoptions" class="permalink">#</a> Facade.Group._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a group entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of group specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(group._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.group.prototype.addtogroup">
                                    <a href="#facade.js-facade.group.prototype.addtogroup" class="permalink">#</a> Facade.Group.addToGroup()
                                </h2>

                                <p>Adds a Facade.js entity to a group.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>obj</b>
                                                    <code>Object</code>
                                                    <code>Array</code>
                                            </p>
                                            <p>Facade.js entity or an array of entities.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>group.addToGroup(circle);
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype.addToGroup = function (obj) {

    var i,
        length;

    if (obj instanceof Facade.Entity) {

        if (!this.hasEntity(obj)) {

            this._objects.push(obj);

            this._setMetrics();

        }

    } else if (Array.isArray(obj)) {

        for (i = 0, length = obj.length; i &lt; length; i += 1) {

            this.addToGroup(obj[i]);

        }

    } else {

        throw new Error(&#x27;Object passed to Facade.addToStage is not a valid Facade.js entity.&#x27;);

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.group.prototype.hasentity">
                                    <a href="#facade.js-facade.group.prototype.hasentity" class="permalink">#</a> Facade.Group.hasEntity()
                                </h2>

                                <p>Tests the existence of an entity within a group.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>obj</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>group.addToGroup(circle);
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype.hasEntity = function (obj) {

    return this._objects.indexOf(obj) !== -1;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Boolean</code>  Boolean result of the test.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.group.prototype.removefromgroup">
                                    <a href="#facade.js-facade.group.prototype.removefromgroup" class="permalink">#</a> Facade.Group.removeFromGroup()
                                </h2>

                                <p>Removes a Facade.js entity from a group.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>obj</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>group.removeFromGroup(circle);
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype.removeFromGroup = function (obj) {

    if (obj instanceof Facade.Entity) {

        if (this.hasEntity(obj)) {

            this._objects.splice(this._objects.indexOf(obj), 1);

            this._setMetrics();

        }

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.group.prototype._setmetrics">
                                    <a href="#facade.js-facade.group.prototype._setmetrics" class="permalink">#</a> Facade.Group._setMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Set metrics based on the groups&#39;s entities and options.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Custom options used to render the group.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(group._setMetrics());
console.log(group._setMetrics(updated));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype._setMetrics = function (updated) {

    var metrics = this._defaultMetrics(),
        options = updated || this.getAllOptions(),
        bounds = { top: null, right: null, bottom: null, left: null },
        i,
        length,
        anchor,
        obj_metrics;

    for (i = 0, length = this._objects.length; i &lt; length; i += 1) {

        obj_metrics = this._objects[i].getAllMetrics();

        if (obj_metrics.x &lt; bounds.left || bounds.left === null) {

            bounds.left = obj_metrics.x;

        }

        if (obj_metrics.y &lt; bounds.top || bounds.top === null) {

            bounds.top = obj_metrics.y;

        }

        if (obj_metrics.x + obj_metrics.width &gt; bounds.right || bounds.right === null) {

            bounds.right = obj_metrics.x + obj_metrics.width;

        }

        if (obj_metrics.y + obj_metrics.height &gt; bounds.bottom || bounds.bottom === null) {

            bounds.bottom = obj_metrics.y + obj_metrics.height;

        }

    }

    metrics.x = options.x + bounds.left;
    metrics.y = options.y + bounds.top;

    metrics.width = (bounds.right - bounds.left) * options.scale;
    metrics.height = (bounds.bottom - bounds.top) * options.scale;

    anchor = this._getAnchorPoint(options, metrics);

    metrics.x = options.x + anchor[0];
    metrics.y = options.y + anchor[1];

    if (!updated) {

        this._metrics = metrics;

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Object with metrics as key-value pairs.</p>





                            </div>







            </div>

        </div>

    </div>

</div>

<footer class="bs-footer">

    <div class="container">

        <p>Documentation generated with <a href="https://github.com/neogeek/doxdox">doxdox</a>.</p>

    </div>

</footer>

</body>
</html>
",
                "body": "<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="initial-scale=1">
<title>facade.js &#8212; Drawing shapes, images and text in HTML5 canvas made easy.</title>
<style>

.back-to-top {
    display: none;
    position: fixed;
    right: 1em;
    bottom: 1em;
    z-index: 999;
}

.back-to-top a {
    display: block;
    padding: .5em .5em .5em 1.5em;
    line-height: 1em;
    border-radius: .25em;
    background: #fff url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxM3B4IiBoZWlnaHQ9IjE0cHgiIHZpZXdCb3g9IjAgMCAxMyAxNCI+CiAgICA8cGF0aCBkPSJNNy4xODc2MTE1NiwxMyBMNy4xODc2MTE1Niw1LjQ5MjQ5NzAzIEwxMC40NTg3ODUzLDUuNDkyNDk3MDMgTDUuMDk5MzE3NjMsMC4xMTM1NTgxMjkgTC0wLjI2MDE1LDUuNDkyNDk3MDMgTDMuMDExMDIzNzEsNS40OTI0OTcwMyBMMy4wMTEwMjM3MSwxMyBMNy4xODc2MTE1NiwxMyBaIiBmaWxsPSIjNDI4YmNhIj48L3BhdGg+Cjwvc3ZnPgo=) no-repeat .5em center;
}

.menu {
    margin: 1.5em 0 0 0;
    padding: 0;
}

.menu li {
    list-style: none;
}

.menu li a {
    display: block;
    padding: .25em;
    overflow: hidden;
    text-overflow: ellipsis;
}

.menu li ul {
    margin: .25em 0 .25em 1em;
    padding: 0;
}

.menu .scope-private {
    opacity: 0.5;
}

.method h2 {
    line-height: 1.3em;
    text-overflow: ellipsis;
    overflow: hidden;
}

.permalink {
    position: absolute;
    margin-left: -.75em;
    font-weight: normal;
    color: #eee;
}

.permalink:hover {
    color: #666;
    text-decoration: none;
}

.bs-footer {
    margin: 50px auto;
    color: #777;
    text-align: center;
}

pre .hljs {
    padding: 0;
    background: none;
}

</style>
<script>
(function(e,i,t){"use strict";var c=e.location.protocol==="file:"?"http:":e.location.protocol,o=["//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css","//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.1/styles/github.min.css","//code.jquery.com/jquery-2.1.1.js","//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.1/highlight.min.js"];function s(e){var l;if(e.match(/\.js$/)){l=i.createElement("script");l.setAttribute("src",c+e)}else if(e.match(/\.css$/)){l=i.createElement("link");l.setAttribute("rel","stylesheet");l.setAttribute("href",c+e)}l.addEventListener("load",function(){if(o.length){s(o.shift())}else{if($.isReady){t()}else{$(document).ready(t)}}});i.head.appendChild(l)}s(o.shift())})(window,document,function(){"use strict";var e=window.location.hash,i=$('[id="'+e.replace(/#/,"")+'"]'),t=$(".code"),c=$(".scope-private"),o=$(".toggle-code-blocks"),s=$(".toggle-private"),l=$(".back-to-top");function n(){if(window.scrollY>100&&l.not(":visible")){l.fadeIn()}else if(window.scrollY<100&&l.is(":visible")){l.fadeOut()}}o.on("click",function(){if(o.is(":checked")){t.show()}else{t.hide()}});s.on("click",function(){if(s.is(":checked")){c.show()}else{c.hide()}});t.hide();c.hide();if(i.length&&!i.is(":visible")){s.trigger("click")}$(".examples pre code, .code pre code").each(function(){hljs.highlightBlock(this)});$(window).on("scroll",n);n()});
</script>
</head>

<body>

<style>

header {
    padding: 1em;
    font-size: 1.2em;
    line-height: 1em;
    color: #fff;
    background-color: #322957;
    -webkit-font-smoothing: antialiased;
}

header a,
header a:hover {
    color: inherit;
}

</style>

<header>

    <a href="http://docs.facadejs.com/list">&larr; View all versions of documentation</a></i>

</header>

<div class="back-to-top"><a href="#">Back to Top</a></div>

<div class="wrap">

    <div class="container">

        <div class="page-header">

            <div class="pull-right hidden-sm hidden-xs">

                <div>
                    <label>
                        <input type="checkbox" name="toggle-code" class="toggle-code-blocks">
                        Toggle Code Blocks
                    </label>
                </div>
                <div>
                    <label>
                        <input type="checkbox" name="toggle-private" class="toggle-private">
                        Toggle Private Methods
                    </label>
                </div>

            </div>

            <h1>facade.js <small>Drawing shapes, images and text in HTML5 canvas made easy.</small></h1>

        </div>

        <div class="row">

            <div class="col-md-3 hidden-sm hidden-xs">

                <ul class="menu">


                    <li>
                        <b>facade.js</b>
                        <ul>








                                    <li class="scope-public">
                                        <a href="#facade.js-facade" title="Facade()">Facade()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.addtostage" title="Facade.addToStage()">Facade.addToStage()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.clear" title="Facade.clear()">Facade.clear()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.draw" title="Facade.draw()">Facade.draw()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.exportbase64" title="Facade.exportBase64()">Facade.exportBase64()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.height" title="Facade.height()">Facade.height()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.renderwithcontext" title="Facade.renderWithContext()">Facade.renderWithContext()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.resizeforhdpi" title="Facade.resizeForHDPI()">Facade.resizeForHDPI()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.start" title="Facade.start()">Facade.start()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.stop" title="Facade.stop()">Facade.stop()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.prototype.width" title="Facade.width()">Facade.width()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.prototype._animate" title="Facade._animate()">Facade._animate()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity" title="Facade.Entity()">Facade.Entity()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._defaultoptions" title="Facade.Entity._defaultOptions()">Facade.Entity._defaultOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._defaultmetrics" title="Facade.Entity._defaultMetrics()">Facade.Entity._defaultMetrics()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._getanchorpoint" title="Facade.Entity._getAnchorPoint()">Facade.Entity._getAnchorPoint()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._getstrokewidthoffset" title="Facade.Entity._getStrokeWidthOffset()">Facade.Entity._getStrokeWidthOffset()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._applytransforms" title="Facade.Entity._applyTransforms()">Facade.Entity._applyTransforms()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.getoption" title="Facade.Entity.getOption()">Facade.Entity.getOption()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.getalloptions" title="Facade.Entity.getAllOptions()">Facade.Entity.getAllOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.entity.prototype._setoption" title="Facade.Entity._setOption()">Facade.Entity._setOption()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.setoptions" title="Facade.Entity.setOptions()">Facade.Entity.setOptions()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.getmetric" title="Facade.Entity.getMetric()">Facade.Entity.getMetric()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.getallmetrics" title="Facade.Entity.getAllMetrics()">Facade.Entity.getAllMetrics()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.entity.prototype.draw" title="Facade.Entity.draw()">Facade.Entity.draw()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.polygon" title="Facade.Polygon()">Facade.Polygon()</a>
                                    </li>








                                    <li class="scope-private">
                                        <a href="#facade.js-facade.polygon.prototype._defaultoptions" title="Facade.Polygon._defaultOptions()">Facade.Polygon._defaultOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.polygon.prototype._draw" title="Facade.Polygon._draw()">Facade.Polygon._draw()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.polygon.prototype._configoptions" title="Facade.Polygon._configOptions()">Facade.Polygon._configOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.polygon.prototype._setmetrics" title="Facade.Polygon._setMetrics()">Facade.Polygon._setMetrics()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.circle" title="Facade.Circle()">Facade.Circle()</a>
                                    </li>








                                    <li class="scope-private">
                                        <a href="#facade.js-facade.circle.prototype._configoptions" title="Facade.Circle._configOptions()">Facade.Circle._configOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.circle.prototype._getanchorpoint" title="Facade.Circle._getAnchorPoint()">Facade.Circle._getAnchorPoint()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.circle.prototype._setmetrics" title="Facade.Circle._setMetrics()">Facade.Circle._setMetrics()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.line" title="Facade.Line()">Facade.Line()</a>
                                    </li>








                                    <li class="scope-private">
                                        <a href="#facade.js-facade.line.prototype._configoptions" title="Facade.Line._configOptions()">Facade.Line._configOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.line.prototype._getanchorpoint" title="Facade.Line._getAnchorPoint()">Facade.Line._getAnchorPoint()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.rect" title="Facade.Rect()">Facade.Rect()</a>
                                    </li>








                                    <li class="scope-private">
                                        <a href="#facade.js-facade.rect.prototype._configoptions" title="Facade.Rect._configOptions()">Facade.Rect._configOptions()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image" title="Facade.Image()">Facade.Image()</a>
                                    </li>








                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image.prototype.load" title="Facade.Image.load()">Facade.Image.load()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image.prototype.play" title="Facade.Image.play()">Facade.Image.play()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image.prototype.pause" title="Facade.Image.pause()">Facade.Image.pause()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image.prototype.reset" title="Facade.Image.reset()">Facade.Image.reset()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.image.prototype.stop" title="Facade.Image.stop()">Facade.Image.stop()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.image.prototype._configoptions" title="Facade.Image._configOptions()">Facade.Image._configOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.image.prototype._setmetrics" title="Facade.Image._setMetrics()">Facade.Image._setMetrics()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.image.prototype._draw" title="Facade.Image._draw()">Facade.Image._draw()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.text" title="Facade.Text()">Facade.Text()</a>
                                    </li>








                                    <li class="scope-public">
                                        <a href="#facade.js-facade.text.prototype.settext" title="Facade.Text.setText()">Facade.Text.setText()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.text.prototype._draw" title="Facade.Text._draw()">Facade.Text._draw()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.text.prototype._configoptions" title="Facade.Text._configOptions()">Facade.Text._configOptions()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.text.prototype._setmetrics" title="Facade.Text._setMetrics()">Facade.Text._setMetrics()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.group" title="Facade.Group()">Facade.Group()</a>
                                    </li>








                                    <li class="scope-private">
                                        <a href="#facade.js-facade.group.prototype._draw" title="Facade.Group._draw()">Facade.Group._draw()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.group.prototype._configoptions" title="Facade.Group._configOptions()">Facade.Group._configOptions()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.group.prototype.addtogroup" title="Facade.Group.addToGroup()">Facade.Group.addToGroup()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.group.prototype.hasentity" title="Facade.Group.hasEntity()">Facade.Group.hasEntity()</a>
                                    </li>






                                    <li class="scope-public">
                                        <a href="#facade.js-facade.group.prototype.removefromgroup" title="Facade.Group.removeFromGroup()">Facade.Group.removeFromGroup()</a>
                                    </li>






                                    <li class="scope-private">
                                        <a href="#facade.js-facade.group.prototype._setmetrics" title="Facade.Group._setMetrics()">Facade.Group._setMetrics()</a>
                                    </li>






                        </ul>

                    </li>


                </ul>

            </div>

            <div class="col-md-9">









                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade">
                                    <a href="#facade.js-facade" class="permalink">#</a> Facade()
                                </h2>

                                <p>Creates a new Facade.js object with either a preexisting canvas tag or a unique name, width, and height.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>













                                            <p>
                                                <b>canvas</b>
                                                    <code>Object</code>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Reference to an HTML canvas element or a unique name.</p>




                                            <p>
                                                <b>width</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the canvas.</p>




                                            <p>
                                                <b>height</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Height of the canvas.</p>







                                </section>


                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="properties">

                                    <h3>Properties</h3>



                                            <p>
                                                <b>canvas</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Reference to the canvas element.</p>




                                            <p>
                                                <b>context</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Reference to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D" target="_blank">CanvasRenderingContext2D</a> object.</p>




                                            <p>
                                                <b>dt</b>
                                                    <code>Integer</code>
                                            </p>
                                            <p>Current time in milliseconds since last canvas draw.</p>




                                            <p>
                                                <b>fps</b>
                                                    <code>Integer</code>
                                            </p>
                                            <p>Current frames per second.</p>




                                            <p>
                                                <b>ftime</b>
                                                    <code>Integer</code>
                                            </p>
                                            <p>Time of last canvas draw.</p>













                                </section>


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var stage = new Facade(document.querySelector(&#39;canvas&#39;));
var stage = new Facade(&#39;stage&#39;, 500, 300);
</code></pre>






















                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>function Facade(canvas, width, height) {

    if (!(this instanceof Facade)) {

        return new Facade(canvas, width, height);

    }

    this.dt = null;
    this.fps = null;
    this.ftime = null;

    this._callback = null;

    this._requestAnimation = null;

    this._width = null;
    this._height = null;

    if (canvas &amp;&amp; typeof canvas === &#x27;object&#x27; &amp;&amp; canvas.nodeType === 1) {

        this.canvas = canvas;

    } else {

        this.canvas = document.createElement(&#x27;canvas&#x27;);

        if (typeof canvas === &#x27;string&#x27;) {

            this.canvas.setAttribute(&#x27;id&#x27;, canvas);

        }

    }

    if (width) {

        this.width(width);

    } else if (this.canvas.hasAttribute(&#x27;width&#x27;)) {

        this._width = parseInt(this.canvas.getAttribute(&#x27;width&#x27;), 10);

    } else {

        this.width(this.canvas.clientWidth);

    }

    if (height) {

        this.height(height);

    } else if (this.canvas.hasAttribute(&#x27;height&#x27;)) {

        this._height = parseInt(this.canvas.getAttribute(&#x27;height&#x27;), 10);

    } else {

        this.height(this.canvas.clientHeight);

    }

    try {

        this.context = this.canvas.getContext(&#x27;2d&#x27;);

    } catch (e) {

        throw new Error(&#x27;Object passed to Facade.js was not a valid canvas element.&#x27;);

    }

}</code></pre>

                                </section>

                                <h3>Returns</h3>



















                                        <p><code>Object</code>  New Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.addtostage">
                                    <a href="#facade.js-facade.prototype.addtostage" class="permalink">#</a> Facade.addToStage()
                                </h2>

                                <p>Draws a Facade.js entity (or multiple entities) to the stage.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>obj</b>
                                                    <code>Object</code>
                                                    <code>Array</code>
                                            </p>
                                            <p>Facade.js entity or an array of entities.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Temporary options for rendering a Facade.js entity (or multiple entities).</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.addToStage(circle);
stage.addToStage(circle, { x: 100, y: 100 });
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.addToStage = function (obj, options) {

    var i,
        length;

    if (obj instanceof Facade.Entity) {

        obj.draw(this, options);

    } else if (Array.isArray(obj)) {

        for (i = 0, length = obj.length; i &lt; length; i += 1) {

            this.addToStage(obj[i], options);

        }

    } else {

        throw new Error(&#x27;Object passed to Facade.addToStage is not a valid Facade.js entity.&#x27;);

    }

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.clear">
                                    <a href="#facade.js-facade.prototype.clear" class="permalink">#</a> Facade.clear()
                                </h2>

                                <p>Clears the canvas.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code> stage.clear();
</code></pre>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.clear = function () {

    this.context.clearRect(0, 0, this.width(), this.height());

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.draw">
                                    <a href="#facade.js-facade.prototype.draw" class="permalink">#</a> Facade.draw()
                                </h2>

                                <p>Sets a callback function to run in a loop using <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame" target="_blank">requestAnimationFrame</a> or available polyfill.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>callback</b>
                                                    <code>Function</code>
                                            </p>
                                            <p>Function callback.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.draw(function () {

    this.clear();

    this.addToStage(circle, { x: 100, y: 100 });

});
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.draw = function (callback) {

    if (typeof callback === &#x27;function&#x27;) {

        this._callback = callback;

        this.start();

    } else {

        throw new Error(&#x27;Parameter passed to Facade.draw is not a valid function.&#x27;);

    }

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.exportbase64">
                                    <a href="#facade.js-facade.prototype.exportbase64" class="permalink">#</a> Facade.exportBase64()
                                </h2>

                                <p>Exports a base64 encoded representation of the current rendered canvas.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>type</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Image format: <code>image/png</code> (Default), <code>image/jpeg</code>, <code>image/webp</code> (Google Chrome Only)</p>




                                            <p>
                                                <b>quality</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Number between 0 and 100.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(stage.exportBase64(&#39;image/png&#39;, 100));
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.exportBase64 = function (type, quality) {

    if (!type) {

        type = &#x27;image/png&#x27;;

    }

    if (typeof quality === &#x27;number&#x27;) {

        quality = quality / 100;

    } else {

        quality = 1;

    }

    return this.canvas.toDataURL(type, quality);

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>String</code>  Base64 encoded string.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.height">
                                    <a href="#facade.js-facade.prototype.height" class="permalink">#</a> Facade.height()
                                </h2>

                                <p>Gets and sets the canvas height.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>height</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Height in pixels.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(stage.height()); // 300
console.log(stage.height(600)); // 600
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.height = function (height) {

    if (height) {

        this._height = parseInt(height, 10);

        if (this.canvas.hasAttribute(&#x27;data-resized-for-hdpi&#x27;)) {

            this.resizeForHDPI();

        } else {

            this.canvas.setAttribute(&#x27;height&#x27;, this._height);

        }

    }

    return this._height;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Integer</code>  Height in pixels.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.renderwithcontext">
                                    <a href="#facade.js-facade.prototype.renderwithcontext" class="permalink">#</a> Facade.renderWithContext()
                                </h2>

                                <p>Applies key-value pairs to appropriate <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D" target="_blank">CanvasRenderingContext2D</a> properties and methods.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Object containing context property and/or method names with corresponding values.</p>




                                            <p>
                                                <b>callback</b>
                                                    <code>Function</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Function to be called when context options have been rendered to the canvas.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.renderWithContext({ fillStyle: &#39;#f00&#39;, globalAlpha: 0.5, fillRect: [ 0, 0, 100, 100 ]});
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.renderWithContext = function (options, callback) {

    var keys = Object.keys(options),
        i,
        length;

    this.context.save();

    for (i = 0, length = keys.length; i &lt; length; i += 1) {

        if (_contextProperties.indexOf(keys[i]) !== -1) {

            this.context[keys[i]] = options[keys[i]];

        } else if (Array.isArray(options[keys[i]]) &amp;&amp; typeof this.context[keys[i]] === &#x27;function&#x27;) {

            this.context[keys[i]].apply(this.context, options[keys[i]]);

        }

    }

    if (callback) {

        callback.call(null, this);

    }

    this.context.restore();

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.resizeforhdpi">
                                    <a href="#facade.js-facade.prototype.resizeforhdpi" class="permalink">#</a> Facade.resizeForHDPI()
                                </h2>

                                <p>Resizes the canvas width and height to be multiplied by the pixel ratio of the device to allow for sub-pixel aliasing. Canvas tag maintains original width and height through CSS. Must be called before creating/adding any Facade entities as scaling is applied to the canvas context.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>ratio</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Ratio to scale the canvas.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.resizeForHDPI();
stage.resizeForHDPI(2);
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.resizeForHDPI = function (ratio) {

    if (ratio === undefined) {

        ratio = window.devicePixelRatio;

    } else {

        ratio = parseFloat(ratio);

    }

    if (ratio &gt; 1) {

        this.canvas.setAttribute(&#x27;style&#x27;, &#x27;width: &#x27; + this.width() + &#x27;px; height: &#x27; + this.height() + &#x27;px;&#x27;);

        this.canvas.setAttribute(&#x27;width&#x27;, this.width() * ratio);
        this.canvas.setAttribute(&#x27;height&#x27;, this.height() * ratio);

        this.context.scale(ratio, ratio);

        this.canvas.setAttribute(&#x27;data-resized-for-hdpi&#x27;, true);

    }

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.start">
                                    <a href="#facade.js-facade.prototype.start" class="permalink">#</a> Facade.start()
                                </h2>

                                <p>Starts the callback supplied in <code>Facade.draw</code>.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.start();
</code></pre>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.start = function () {

    this._requestAnimation = _requestAnimationFrame(this._animate.bind(this));

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.stop">
                                    <a href="#facade.js-facade.prototype.stop" class="permalink">#</a> Facade.stop()
                                </h2>

                                <p>Stops the callback supplied in <code>Facade.draw</code>.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>stage.stop();
</code></pre>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.stop = function () {

    this.dt = null;
    this.fps = null;
    this.ftime = null;

    _cancelAnimationFrame(this._requestAnimation);

    this._requestAnimation = null;

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.prototype.width">
                                    <a href="#facade.js-facade.prototype.width" class="permalink">#</a> Facade.width()
                                </h2>

                                <p>Gets and sets the canvas width.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>width</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width in pixels.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(stage.width()); // 400
console.log(stage.width(800)); // 800
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype.width = function (width) {

    if (width) {

        this._width = parseInt(width, 10);

        if (this.canvas.hasAttribute(&#x27;data-resized-for-hdpi&#x27;)) {

            this.resizeForHDPI();

        } else {

            this.canvas.setAttribute(&#x27;width&#x27;, this._width);

        }

    }

    return this._width;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Integer</code>  Width in pixels.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.prototype._animate">
                                    <a href="#facade.js-facade.prototype._animate" class="permalink">#</a> Facade._animate()
                                    <small>private method</small>
                                </h2>

                                <p>Method called by <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame" target="_blank">requestAnimationFrame</a>. Sets <code>Facade.dt</code>, <code>Facade.fps</code> and  <code>Facade.ftime</code>.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>time</b>
                                                    <code>Integer</code>
                                            </p>
                                            <p><a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp" target="_blank">DOMTimeStamp</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp" target="_blank">DOMHighResTimeStamp</a> (Google Chrome Only)</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>this._requestAnimation = _requestAnimationFrame(this._animate.bind(this));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.prototype._animate = function (time) {

    if (typeof this._callback === &#x27;function&#x27;) {

        if (this.ftime) {

            this.dt = time - this.ftime;

            this.fps = (1000 / this.dt).toFixed(2);

        }

        this.ftime = time;

        this._requestAnimation = _requestAnimationFrame(this._animate.bind(this));

        this.context.save();

        this._callback();

        this.context.restore();

    } else {

        this.stop();

    }

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Facade.js object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity">
                                    <a href="#facade.js-facade.entity" class="permalink">#</a> Facade.Entity()
                                </h2>

                                <p>The constructor for all Facade.js shape, image and text objects.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity = function (options) {

    if (!(this instanceof Facade.Entity)) {

        return new Facade.Entity();

    }

    this._options = this._defaultOptions();
    this._metrics = this._defaultMetrics();

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  New Facade.Entity object.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._defaultoptions">
                                    <a href="#facade.js-facade.entity.prototype._defaultoptions" class="permalink">#</a> Facade.Entity._defaultOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Returns a default set of options common to all Facade.js entities.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Additional options as key-value pairs.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(Facade.Entity.prototype._defaultOptions());
console.log(Facade.Entity.prototype._defaultOptions({ lineWidth: 0 }));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._defaultOptions = function (updated) {

    var options,
        keys,
        i,
        length;

    options = {
        x: 0,
        y: 0,
        anchor: &#x27;top/left&#x27;,
        rotate: 0,
        scale: 1
    };

    if (typeof updated === &#x27;object&#x27;) {

        keys = Object.keys(updated);

        for (i = 0, length = keys.length; i &lt; length; i += 1) {

            options[keys[i]] = updated[keys[i]];

        }

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Default set of options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._defaultmetrics">
                                    <a href="#facade.js-facade.entity.prototype._defaultmetrics" class="permalink">#</a> Facade.Entity._defaultMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Returns a default set of metrics common to all Facade.js entities.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Additional metrics as key-value pairs.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(Facade.Entity.prototype._defaultMetrics());
console.log(Facade.Entity.prototype._defaultMetrics({ scale: null }));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._defaultMetrics = function (updated) {

    var metrics,
        keys,
        i,
        length;

    metrics = {
        x: null,
        y: null,
        width: null,
        height: null
    };

    if (typeof updated === &#x27;object&#x27;) {

        keys = Object.keys(updated);

        for (i = 0, length = keys.length; i &lt; length; i += 1) {

            metrics[keys[i]] = updated[keys[i]];

        }

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Default set of metrics.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._getanchorpoint">
                                    <a href="#facade.js-facade.entity.prototype._getanchorpoint" class="permalink">#</a> Facade.Entity._getAnchorPoint()
                                    <small>private method</small>
                                </h2>

                                <p>Returns an array of the x and y anchor positions based on given options and metrics.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Entity options.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Entity metrics.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(rect._getAnchorPoint(options, metrics));
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._getAnchorPoint = function (options, metrics) {

    var pos = [0, 0],
        strokeWidthOffset;

    if (options.anchor.match(/center$/)) {

        pos[0] = -metrics.width / 2;

    } else if (options.anchor.match(/right$/)) {

        pos[0] = -metrics.width;

    }

    if (options.anchor.match(/^center/)) {

        pos[1] = -metrics.height / 2;

    } else if (options.anchor.match(/^bottom/)) {

        pos[1] = -metrics.height;

    }

    if (this instanceof Facade.Polygon) {

        strokeWidthOffset = this._getStrokeWidthOffset(options);

        pos[0] = pos[0] + strokeWidthOffset;
        pos[1] = pos[1] + strokeWidthOffset;

    }

    return pos;

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>Array</code>  Array with the x and y anchor positions.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._getstrokewidthoffset">
                                    <a href="#facade.js-facade.entity.prototype._getstrokewidthoffset" class="permalink">#</a> Facade.Entity._getStrokeWidthOffset()
                                    <small>private method</small>
                                </h2>

                                <p>Returns an integer for the stroke width offset. Used to calculate metrics.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Entity options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(rect._getStrokeWidthOffset(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._getStrokeWidthOffset = function (options) {

    var strokeWidthOffset = 0;

    if (options.lineWidth !== undefined) {

        strokeWidthOffset = options.lineWidth / 2;

    }

    return strokeWidthOffset;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Integer</code>  Integer representing the stroke width offset.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._applytransforms">
                                    <a href="#facade.js-facade.entity.prototype._applytransforms" class="permalink">#</a> Facade.Entity._applyTransforms()
                                    <small>private method</small>
                                </h2>

                                <p>Applies transforms (translate, rotate and scale) to an entity.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>context</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Reference to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D" target="_blank">CanvasRenderingContext2D</a> object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Entity options.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Entity metrics.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(rect._applyTransforms(context, options, metrics));
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._applyTransforms = function (context, options, metrics) {

    var anchor = this._getAnchorPoint(options, {
        x: metrics.x,
        y: metrics.y,
        width: metrics.width / options.scale,
        height: metrics.height / options.scale
    });

    context.translate.apply(context, anchor);

    if (options.rotate) {

        context.translate(-anchor[0], -anchor[1]);
        context.rotate(options.rotate * _TO_RADIANS);
        context.translate(anchor[0], anchor[1]);

    }

    if (options.scale !== 1) {

        context.translate(-anchor[0], -anchor[1]);
        context.scale(options.scale, options.scale);
        context.translate(anchor[0], anchor[1]);

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.getoption">
                                    <a href="#facade.js-facade.entity.prototype.getoption" class="permalink">#</a> Facade.Entity.getOption()
                                </h2>

                                <p>Retrieves the value of a given option. Only retrieves options set when creating a new Facade.js entity or using <a href="#facade.entity.prototype.setoptions"><code>setOptions</code></a> not through temporary options set when using <a href="#facade.addtostage"><code>Facade.addToStage</code></a>.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>key</b>
                                                    <code>String</code>
                                            </p>
                                            <p>The name of the option.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.getOption(&#39;value&#39;));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.getOption = function (key) {

    if (this._options[key] !== undefined) {

        return this._options[key];

    }

    return undefined;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code> <code>Function</code> <code>String</code> <code>Integer</code>  Value of the option requested.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.getalloptions">
                                    <a href="#facade.js-facade.entity.prototype.getalloptions" class="permalink">#</a> Facade.Entity.getAllOptions()
                                </h2>

                                <p>Retrieves the value of all options. Only retrieves options set when creating a new Facade.js entity or using <a href="#facade.entity.prototype.setoptions"><code>setOptions</code></a> not through temporary options set when using <a href="#facade.addtostage"><code>Facade.addToStage</code></a>.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.getAllOptions());
</code></pre>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.getAllOptions = function () {

    var options = {},
        keys = Object.keys(this._options),
        i,
        length;

    for (i = 0, length = keys.length; i &lt; length; i += 1) {

        options[keys[i]] = this._options[keys[i]];

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Object containing all options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.entity.prototype._setoption">
                                    <a href="#facade.js-facade.entity.prototype._setoption" class="permalink">#</a> Facade.Entity._setOption()
                                    <small>private method</small>
                                </h2>

                                <p>Sets an option for a given entity.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>key</b>
                                                    <code>String</code>
                                            </p>
                                            <p>The option to update.</p>




                                            <p>
                                                <b>value</b>
                                                    <code>Object</code>
                                                    <code>Function</code>
                                                    <code>String</code>
                                                    <code>Integer</code>
                                            </p>
                                            <p>The new value of the specified option.</p>




                                            <p>
                                                <b>test</b>
                                                    <code>Boolean</code>
                                            </p>
                                            <p>Flag to determine if options are to be persisted in the entity or just returned.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text._setOption(&#39;value&#39;, &#39;Hello world!&#39;));
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype._setOption = function (key, value, test) {

    if (this._options[key] !== undefined) {

        if (typeof this._options[key] === &#x27;number&#x27; &amp;&amp; typeof value === &#x27;string&#x27;) {

            if (value.match(_OPERATOR_TEST)) {

                value = this._options[key] + parseFloat(value.replace(&#x27;=&#x27;, &#x27;&#x27;));

            } else {

                value = parseFloat(value);

            }

        }

        if (String(typeof this._options[key]) === String(typeof value)) {

            if (!test) {

                this._options[key] = value;

            }

        } else {

            throw new Error(&#x27;The value for &#x27; + key + &#x27; (&#x27; + value + &#x27;) was a &#x27; + String(typeof value) + &#x27; not a &#x27; + String(typeof this._options[key]) + &#x27;.&#x27;);

        }

        return value;

    }

    return undefined;

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>Object</code> <code>Function</code> <code>String</code> <code>Integer</code>  Returns value of the updated option.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.setoptions">
                                    <a href="#facade.js-facade.entity.prototype.setoptions" class="permalink">#</a> Facade.Entity.setOptions()
                                </h2>

                                <p>Sets a group of options as key-value pairs to an entity.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The options to update. Does not need to be entire set of options.</p>




                                            <p>
                                                <b>test</b>
                                                    <code>Boolean</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Flag to determine if options are to be persisted in the entity or just returned.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.setOptions({ fontFamily: &#39;Georgia&#39;, fontSize: 20 }));
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.setOptions = function (updated, test) {

    var options = this.getAllOptions(),
        keys,
        i,
        length;

    if (updated) {

        keys = Object.keys(updated);

        for (i = 0, length = keys.length; i &lt; length; i += 1) {

            if (options[keys[i]] !== undefined) {

                options[keys[i]] = this._setOption(keys[i], updated[keys[i]], test);

            }

        }

        if (!test) {

            this._setMetrics();

        }

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>Object</code>  Updated options.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.getmetric">
                                    <a href="#facade.js-facade.entity.prototype.getmetric" class="permalink">#</a> Facade.Entity.getMetric()
                                </h2>

                                <p>Retrieves the value of a given metric. Only retrieves metrics set when creating a new Facade.js entity or using <a href="#facade.entity.prototype.setoptions"><code>setOptions</code></a> not through temporary options set when using <a href="#facade.addtostage"><code>Facade.addToStage</code></a>.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>key</b>
                                                    <code>String</code>
                                            </p>
                                            <p>The name of the metric.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.getMetric(&#39;width&#39;));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.getMetric = function (key) {

    if (this._metrics[key] !== undefined) {

        return this._metrics[key];

    }

    return undefined;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Integer</code>  Value of the metric requested.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.getallmetrics">
                                    <a href="#facade.js-facade.entity.prototype.getallmetrics" class="permalink">#</a> Facade.Entity.getAllMetrics()
                                </h2>

                                <p>Retrieves the value of all metrics. Only retrieves metrics set when creating a new Facade.js entity or using <a href="#facade.entity.prototype.setoptions"><code>setOptions</code></a> not through temporary options set when using <a href="#facade.addtostage"><code>Facade.addToStage</code></a>.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.getAllMetrics());
</code></pre>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.getAllMetrics = function () {

    var metrics = {},
        keys = Object.keys(this._metrics),
        i,
        length;

    for (i = 0, length = keys.length; i &lt; length; i += 1) {

        metrics[keys[i]] = this._metrics[keys[i]];

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Object containing all metrics.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.entity.prototype.draw">
                                    <a href="#facade.js-facade.entity.prototype.draw" class="permalink">#</a> Facade.Entity.draw()
                                </h2>

                                <p>Renders an entity to a canvas.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>facade</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js object.</p>




                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Temporary options for rendering a Facade.js entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>entity.draw(stage);
entity.draw(stage, { x: 100, y: 100 });
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Entity.prototype.draw = function (facade, updated) {

    var options = this.setOptions(updated, true),
        metrics;

    if (typeof this._configOptions === &#x27;function&#x27;) {

        options = this._configOptions(options);

    }

    metrics = updated ? this._setMetrics(options) : this.getAllMetrics();

    if (typeof this._draw === &#x27;function&#x27;) {

        facade.renderWithContext(options, this._draw.bind(this, facade, options, metrics));

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.polygon">
                                    <a href="#facade.js-facade.polygon" class="permalink">#</a> Facade.Polygon()
                                </h2>

                                <p>Create a polygon object. Inherits all methods from <b>Facade.Entity</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the polygon with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position the polygon. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position the polygon. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the polygon. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the polygon. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a polygon. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.opacity</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Opacity of the polygon. Integer between 0 and 100. <i>Default:</i> 100</p>




                                            <p>
                                                <b>options.points</b>
                                                    <code>Array</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Multi-dimensional array of points used to render a polygon. Point arrays with 2 values is rendered as a line, 5 values is rendered as an arc and 6 values is rendered as a bezier curve.</p>




                                            <p>
                                                <b>options.fillStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Fill color for the polygon. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.strokeStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Color of a polygon's stroke. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.lineWidth</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the stroke. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.lineCap</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of line cap. <i>Default:</i> "butt"<br><ul><li>butt</li><li>round</li><li>square</li></ul></p>




                                            <p>
                                                <b>options.lineJoin</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of line join. <i>Default:</i> "miter"<br><ul><li>miter</li><li>round</li><li>bevel</li></ul></p>




                                            <p>
                                                <b>options.closePath</b>
                                                    <code>Boolean</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Boolean to determine if the polygon should be self closing or not. <i>Default:</i> true</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var polygon = new Facade.Polygon({
    x: 0,
    y: 0,
    points: [ [100, 0], [200, 100], [100, 200], [0, 100] ],
    lineWidth: 10,
    strokeStyle: &#39;#333E4B&#39;,
    fillStyle: &#39;#1C73A8&#39;,
    anchor: &#39;top/left&#39;
});
</code></pre>


































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Polygon = function (options) {

    if (!(this instanceof Facade.Polygon)) {

        return new Facade.Polygon(options);

    }

    this._options = this._defaultOptions();
    this._metrics = this._defaultMetrics();

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>































                                        <p><code>Object</code>  New Facade.Polygon object.</p>





                            </div>








                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.polygon.prototype._defaultoptions">
                                    <a href="#facade.js-facade.polygon.prototype._defaultoptions" class="permalink">#</a> Facade.Polygon._defaultOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Returns a default set of options common to all Facade.js polygon entities.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Additional options as key-value pairs.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(Facade.Polygon.prototype._defaultOptions());
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Polygon.prototype._defaultOptions = function (updated) {

    var options,
        keys,
        i,
        length;

    options = Facade.Entity.prototype._defaultOptions({
        opacity: 100,
        points: [],
        fillStyle: &#x27;#000&#x27;,
        strokeStyle: &#x27;&#x27;,
        lineWidth: 0,
        lineCap: &#x27;butt&#x27;,
        lineJoin: &#x27;miter&#x27;,
        closePath: true
    });

    if (updated) {

        keys = Object.keys(updated);

        for (i = 0, length = keys.length; i &lt; length; i += 1) {

            options[keys[i]] = updated[keys[i]];

        }

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Default set of options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.polygon.prototype._draw">
                                    <a href="#facade.js-facade.polygon.prototype._draw" class="permalink">#</a> Facade.Polygon._draw()
                                    <small>private method</small>
                                </h2>

                                <p>Renders a polygon entity to a canvas.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>facade</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Options used to render the polygon.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Metrics used to render the polygon.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>polygon._draw(facade, options, metrics);
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Polygon.prototype._draw = function (facade, options, metrics) {

    var context = facade.context,
        i,
        length;

    this._applyTransforms(context, options, metrics);

    if (options.points.length) {

        context.beginPath();

        for (i = 0, length = options.points.length; i &lt; length; i += 1) {

            if (options.points[i].length === 6) {

                context.bezierCurveTo.apply(context, options.points[i]);

            } else if (options.points[i].length === 5) {

                context.arc.apply(context, options.points[i]);

            } else if (options.points[i].length === 2) {

                context.lineTo.apply(context, options.points[i]);

            }

        }

        if (options.closePath) {

            context.closePath();

        } else {

            context.moveTo.apply(context, options.points[length - 1]);

        }

        if (options.fillStyle) {

            context.fill();

        }

        if (options.lineWidth &gt; 0) {

            context.stroke();

        }

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.polygon.prototype._configoptions">
                                    <a href="#facade.js-facade.polygon.prototype._configoptions" class="permalink">#</a> Facade.Polygon._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a polygon entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of polygon specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(polygon._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Polygon.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];
    options.globalAlpha = options.opacity / 100;

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.polygon.prototype._setmetrics">
                                    <a href="#facade.js-facade.polygon.prototype._setmetrics" class="permalink">#</a> Facade.Polygon._setMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Set metrics based on the polygon&#39;s options.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Custom options used to render the polygon.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(polygon._setMetrics());
console.log(polygon._setMetrics(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Polygon.prototype._setMetrics = function (updated) {

    var metrics = this._defaultMetrics(),
        options = updated || this.getAllOptions(),
        bounds = { top: null, right: null, bottom: null, left: null },
        point,
        i,
        length,
        anchor,
        strokeWidthOffset = this._getStrokeWidthOffset(options);

    if (typeof this._configOptions === &#x27;function&#x27;) {

        options = this._configOptions(options);

    }

    for (i = 0, length = options.points.length; i &lt; length; i += 1) {

        if (options.points[i].length === 2) { // Rect

            point = { x: options.points[i][0], y: options.points[i][1] };

        } else if (options.points[i].length === 5) { // Circle

            metrics.width = options.points[i][2] * 2;
            metrics.height = options.points[i][2] * 2;

            point = {
                x: options.points[i][0] - options.points[i][2],
                y: options.points[i][1] - options.points[i][2]
            };

        }

        if (point.x &lt; bounds.left || bounds.left === null) {

            bounds.left = point.x;

        }

        if (point.y &lt; bounds.top || bounds.top === null) {

            bounds.top = point.y;

        }

        if (point.x &gt; bounds.right || bounds.right === null) {

            bounds.right = point.x;

        }

        if (point.y &gt; bounds.bottom || bounds.bottom === null) {

            bounds.bottom = point.y;

        }

    }

    metrics.x = options.x + bounds.left;
    metrics.y = options.y + bounds.top;

    if (metrics.width === null &amp;&amp; metrics.height === null) {

        metrics.width = bounds.right - bounds.left;
        metrics.height = bounds.bottom - bounds.top;

    }

    metrics.width = (metrics.width + strokeWidthOffset * 2) * options.scale;
    metrics.height = (metrics.height + strokeWidthOffset * 2) * options.scale;

    anchor = this._getAnchorPoint(options, metrics);

    metrics.x = metrics.x + anchor[0] - strokeWidthOffset;
    metrics.y = metrics.y + anchor[1] - strokeWidthOffset;

    if (this instanceof Facade.Circle) {

        metrics.x = metrics.x + options.radius;
        metrics.y = metrics.y + options.radius;

    }

    if (!updated) {

        this._metrics = metrics;

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Object with metrics as key-value pairs.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.circle">
                                    <a href="#facade.js-facade.circle" class="permalink">#</a> Facade.Circle()
                                </h2>

                                <p>Create a circle object. Inherits all methods from <b>Facade.Polygon</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the circle with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position the circle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position the circle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the circle. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the circle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a circle. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.opacity</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Opacity of the circle. Integer between 0 and 100. <i>Default:</i> 100</p>




                                            <p>
                                                <b>options.fillStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Fill color for the circle. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.strokeStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Color of a circle's stroke. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.lineWidth</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the stroke. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.lineCap</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of line cap. <i>Default:</i> "butt"<br><ul><li>butt</li><li>round</li><li>square</li></ul></p>




                                            <p>
                                                <b>options.lineJoin</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of line join. <i>Default:</i> "miter"<br><ul><li>miter</li><li>round</li><li>bevel</li></ul></p>




                                            <p>
                                                <b>options.radius</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Radius of the circle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.start</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degree at which the circle begins. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.end</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degree at which the circle ends. <i>Default:</i> 360</p>




                                            <p>
                                                <b>options.counterclockwise</b>
                                                    <code>Boolean</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Boolean determining if the circle will be drawn in a counter clockwise direction. <i>Default:</i> false</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var circle = new Facade.Circle({
    x: 0,
    y: 0,
    radius: 100,
    lineWidth: 10,
    strokeStyle: &#39;#333E4B&#39;,
    fillStyle: &#39;#1C73A8&#39;,
    anchor: &#39;top/left&#39;
});
</code></pre>






































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Circle = function (options) {

    if (!(this instanceof Facade.Circle)) {

        return new Facade.Circle(options);

    }

    this._options = this._defaultOptions({
        radius: 0,
        begin: 0,
        end: 360,
        counterclockwise: false
    });
    this._metrics = this._defaultMetrics();

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>



































                                        <p><code>Object</code>  New Facade.Circle object.</p>





                            </div>








                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.circle.prototype._configoptions">
                                    <a href="#facade.js-facade.circle.prototype._configoptions" class="permalink">#</a> Facade.Circle._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a circle entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of circle specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(circle._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Circle.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];
    options.globalAlpha = options.opacity / 100;

    if (options.counterclockwise) {

        options.points = [ [ 0, 0, options.radius, options.end * _TO_RADIANS, options.begin * _TO_RADIANS ] ];

    } else {

        options.points = [ [ 0, 0, options.radius, options.begin * _TO_RADIANS, options.end * _TO_RADIANS ] ];

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.circle.prototype._getanchorpoint">
                                    <a href="#facade.js-facade.circle.prototype._getanchorpoint" class="permalink">#</a> Facade.Circle._getAnchorPoint()
                                    <small>private method</small>
                                </h2>

                                <p>Returns an array of the x and y anchor positions based on given options and metrics.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Circle options.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Circle metrics.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(circle._getAnchorPoint(options, metrics));
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Circle.prototype._getAnchorPoint = function (options, metrics) {

    var pos = Facade.Polygon.prototype._getAnchorPoint.call(this, options, metrics);

    pos[0] = pos[0] + options.radius;
    pos[1] = pos[1] + options.radius;

    return pos;

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>Array</code>  Array with the x and y anchor positions.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.circle.prototype._setmetrics">
                                    <a href="#facade.js-facade.circle.prototype._setmetrics" class="permalink">#</a> Facade.Circle._setMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Set metrics based on the circle&#39;s options.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Custom options used to render the circle.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(circle._setMetrics());
console.log(circle._setMetrics(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Circle.prototype._setMetrics = function (updated) {

    var metrics = Facade.Polygon.prototype._setMetrics.call(this, updated),
        options = updated || this.getAllOptions();

    metrics.x = metrics.x - options.radius;
    metrics.y = metrics.y - options.radius;

    if (!updated) {

        this._metrics = metrics;

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Object with metrics as key-value pairs.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.line">
                                    <a href="#facade.js-facade.line" class="permalink">#</a> Facade.Line()
                                </h2>

                                <p>Create a line object. Inherits all methods from <b>Facade.Polygon</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the line with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position the line. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position the line. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the line. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the line. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a line. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.opacity</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Opacity of the line. Integer between 0 and 100. <i>Default:</i> 100</p>




                                            <p>
                                                <b>options.strokeStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Color of a line. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.lineWidth</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the stroke. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.lineCap</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of line cap. <i>Default:</i> "butt"<br><ul><li>butt</li><li>round</li><li>square</li></ul></p>




                                            <p>
                                                <b>options.x1</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate where line begins. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y1</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate where line begins. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.x2</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate where line ends. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y2</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate where line ends. <i>Default:</i> 0</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var line = new Facade.Line({
    x: 0,
    y: 0,
    x1: 0,
    x2: 200,
    lineWidth: 10,
    strokeStyle: &#39;#333E4B&#39;,
    anchor: &#39;top/left&#39;
});
</code></pre>


































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Line = function (options) {

    if (!(this instanceof Facade.Line)) {

        return new Facade.Line(options);

    }

    this._options = this._defaultOptions({
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0,
        lineWidth: 1
    });
    this._metrics = this._defaultMetrics();

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>































                                        <p><code>Object</code>  New Facade.Line object.</p>





                            </div>








                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.line.prototype._configoptions">
                                    <a href="#facade.js-facade.line.prototype._configoptions" class="permalink">#</a> Facade.Line._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a line entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of line specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(line._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Line.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];
    options.globalAlpha = options.opacity / 100;
    options.closePath = false;

    options.points = [ [ options.x1, options.y1 ], [ options.x2, options.y2 ] ];

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.line.prototype._getanchorpoint">
                                    <a href="#facade.js-facade.line.prototype._getanchorpoint" class="permalink">#</a> Facade.Line._getAnchorPoint()
                                    <small>private method</small>
                                </h2>

                                <p>Returns an array of the x and y anchor positions based on given options and metrics.</p>

                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Line options.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.Line metrics.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(line._getAnchorPoint(options, metrics));
</code></pre>










                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Line.prototype._getAnchorPoint = function (options, metrics) {

    var pos = [0, 0];

    if (options.anchor.match(/center$/)) {

        pos[0] = -(metrics.width / 2 - options.lineWidth / 2);

    } else if (options.anchor.match(/right$/)) {

        pos[0] = -(metrics.width - options.lineWidth);

    }

    if (options.anchor.match(/^center/)) {

        pos[1] = -(metrics.height / 2 - options.lineWidth / 2);

    } else if (options.anchor.match(/^bottom/)) {

        pos[1] = -(metrics.height - options.lineWidth);

    }

    return pos;

};</code></pre>

                                </section>

                                <h3>Returns</h3>







                                        <p><code>Array</code>  Array with the x and y anchor positions.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.rect">
                                    <a href="#facade.js-facade.rect" class="permalink">#</a> Facade.Rect()
                                </h2>

                                <p>Create a rectangle object. Inherits all methods from <b>Facade.Polygon</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the rectangle with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position the rectangle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position the rectangle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the rectangle. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the rectangle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a rectangle. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.opacity</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Opacity of the rectangle. Integer between 0 and 100. <i>Default:</i> 100</p>




                                            <p>
                                                <b>options.fillStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Fill color for the rectangle. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.strokeStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Color of a rectangle's stroke. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.lineWidth</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the stroke. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.lineJoin</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>The style of rectangle join. <i>Default:</i> "miter"<br><ul><li>miter</li><li>round</li><li>bevel</li></ul></p>




                                            <p>
                                                <b>options.width</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the rectangle. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.height</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Height of the rectangle. <i>Default:</i> 0</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var rect = new Facade.Rect({
    x: 0,
    y: 0,
    width: 200,
    height: 200,
    lineWidth: 10,
    strokeStyle: &#39;#333E4B&#39;,
    fillStyle: &#39;#1C73A8&#39;,
    anchor: &#39;top/left&#39;
});
</code></pre>
































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Rect = function (options) {

    if (!(this instanceof Facade.Rect)) {

        return new Facade.Rect(options);

    }

    this._options = this._defaultOptions({
        width: 0,
        height: 0
    });
    this._metrics = this._defaultMetrics();

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>





























                                        <p><code>Object</code>  New Facade.Rect object.</p>





                            </div>








                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.rect.prototype._configoptions">
                                    <a href="#facade.js-facade.rect.prototype._configoptions" class="permalink">#</a> Facade.Rect._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a rectangle entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of rectangle specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(rect._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Rect.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];
    options.globalAlpha = options.opacity / 100;

    options.points = [ [ 0, 0 ], [ options.width, 0 ], [ options.width, options.height ], [ 0, options.height ] ];

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image">
                                    <a href="#facade.js-facade.image" class="permalink">#</a> Facade.Image()
                                </h2>

                                <p>Create an image object. Inherits all methods from <b>Facade.Entity</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>source</b>
                                                    <code>Object</code>
                                                    <code>String</code>
                                            </p>
                                            <p>Local image file or reference to an HTML image element.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the image with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position an image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position an image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the image. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of an image. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.width</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.height</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Height of the image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.tileX</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Number of times to tile the image horizontally. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.tileY</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Number of times to tile the image vertically. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.offsetX</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Starting X coordinate within the image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.offsetY</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Starting Y coordinate within the image. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.frames</b>
                                                    <code>Array</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Array of frame numbers (integers starting at 0) for sprite animation. <i>Default:</i> [0]</p>




                                            <p>
                                                <b>options.speed</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Speed of sprite animation. <i>Default:</i> 120</p>




                                            <p>
                                                <b>options.loop</b>
                                                    <code>Boolean</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Determines if the animation should loop. <i>Default:</i> true</p>




                                            <p>
                                                <b>options.callback</b>
                                                    <code>Function</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Function called for every frame of a sprite animation. <i>Default:</i> `function (frame) { };`</p>













                                </section>


                                
                                
                                
                                
                                
                                
                                


                                <section class="properties">

                                    <h3>Properties</h3>





































                                            <p>
                                                <b>image</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Reference to the image element.</p>




                                            <p>
                                                <b>animating</b>
                                                    <code>Boolean</code>
                                            </p>
                                            <p>Boolean state of the animation.</p>




                                            <p>
                                                <b>currentFrame</b>
                                                    <code>Integer</code>
                                            </p>
                                            <p>Current frame of animation.</p>







                                </section>


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var image = new Facade.Image(&#39;images/sprite.png&#39;, {
    x: 0,
    y: 0,
    width: 100,
    height: 200,
    anchor: &#39;top/left&#39;
});
</code></pre>














































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image = function (img, options) {

    if (!(this instanceof Facade.Image)) {

        return new Facade.Image(img, options);

    }

    this._options = this._defaultOptions({
        width: 0,
        height: 0,
        tileX: 1,
        tileY: 1,
        offsetX: 0,
        offsetY: 0,
        frames: [0],
        speed: 120,
        loop: true,
        callback: function () { return undefined; }
    });
    this._metrics = this._defaultMetrics();

    this.animating = false;
    this.currentFrame = 0;

    this.setOptions(options);

    this.load(img);

};</code></pre>

                                </section>

                                <h3>Returns</h3>











































                                        <p><code>Object</code>  New Facade.Image object.</p>





                            </div>








                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image.prototype.load">
                                    <a href="#facade.js-facade.image.prototype.load" class="permalink">#</a> Facade.Image.load()
                                </h2>

                                <p>Loads either a reference to an image tag or an image URL into a Facade.Image entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>source</b>
                                                    <code>Object</code>
                                                    <code>String</code>
                                            </p>
                                            <p>A reference to an image tag or an image URL.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(image.load(document.querySelector(&#39;img&#39;)));
console.log(image.load(&#39;images/sprite.png&#39;));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype.load = function (source) {

    if (typeof source === &#x27;object&#x27; &amp;&amp; source.nodeType === 1) {

        this.image = source;

    } else {

        this.image = document.createElement(&#x27;img&#x27;);
        this.image.setAttribute(&#x27;src&#x27;, source);

    }

    if (this.image.complete) {

        this._setMetrics();

    } else {

        this.image.addEventListener(&#x27;load&#x27;, this._setMetrics.bind(this, null));

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image.prototype.play">
                                    <a href="#facade.js-facade.image.prototype.play" class="permalink">#</a> Facade.Image.play()
                                </h2>

                                <p>Starts an image sprite animation.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <p> image.play();</p>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype.play = function () {

    this.animating = true;

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js image object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image.prototype.pause">
                                    <a href="#facade.js-facade.image.prototype.pause" class="permalink">#</a> Facade.Image.pause()
                                </h2>

                                <p>Pauses an image sprite animation.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <p> image.pause();</p>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype.pause = function () {

    this.animating = false;

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js image object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image.prototype.reset">
                                    <a href="#facade.js-facade.image.prototype.reset" class="permalink">#</a> Facade.Image.reset()
                                </h2>

                                <p>Resets an image sprite animation to the first frame.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <p> image.reset();</p>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype.reset = function () {

    this.currentFrame = 0;

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js image object.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.image.prototype.stop">
                                    <a href="#facade.js-facade.image.prototype.stop" class="permalink">#</a> Facade.Image.stop()
                                </h2>

                                <p>Stops and resets an image sprite animation.</p>

                                


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <p> image.stop();</p>






                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype.stop = function () {

    this.currentFrame = 0;

    this.animating = false;

    return this;

};</code></pre>

                                </section>

                                <h3>Returns</h3>



                                        <p><code>Object</code>  Facade.js image object.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.image.prototype._configoptions">
                                    <a href="#facade.js-facade.image.prototype._configoptions" class="permalink">#</a> Facade.Image._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a image entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of image specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(image._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];

    if (this.image &amp;&amp; this.image.complete) {

        if (!options.width) {

            options.width = this.image.width;

        }

        if (!options.height) {

            options.height = this.image.height;

        }

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.image.prototype._setmetrics">
                                    <a href="#facade.js-facade.image.prototype._setmetrics" class="permalink">#</a> Facade.Image._setMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Set metrics based on the image&#39;s options.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Custom options used to render the image.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(image._setMetrics());
console.log(image._setMetrics(updated));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype._setMetrics = function (updated) {

    var metrics = this._defaultMetrics(),
        options = updated || this.getAllOptions(),
        anchor;

    if (typeof this._configOptions === &#x27;function&#x27;) {

        options = this._configOptions(options);

    }

    metrics.width = options.width * options.tileX * options.scale;
    metrics.height = options.height * options.tileY * options.scale;

    anchor = this._getAnchorPoint(options, metrics);

    metrics.x = options.x + anchor[0];
    metrics.y = options.y + anchor[1];

    if (!updated) {

        this._metrics = metrics;

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Object with metrics as key-value pairs.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.image.prototype._draw">
                                    <a href="#facade.js-facade.image.prototype._draw" class="permalink">#</a> Facade.Image._draw()
                                    <small>private method</small>
                                </h2>

                                <p>Renders an image entity to a canvas.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>facade</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Options used to render the image.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Metrics used to render the image.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>image._draw(facade, options, metrics);
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Image.prototype._draw = function (facade, options, metrics) {

    var context = facade.context,
        currentOffsetX = options.offsetX,
        currentOffsetY = options.offsetY,
        currentWidth = options.width,
        currentHeight = options.height,
        originalWidth = this.image.width,
        originalHeight = this.image.height,
        x,
        y;

    if (this.image.complete) {

        this._applyTransforms(context, options, metrics);

        if (options.frames.length) {

            currentOffsetX += options.frames[this.currentFrame] * options.width;

            if (currentOffsetX + options.width &gt; originalWidth) {

                currentOffsetY += Math.floor(currentOffsetX / originalWidth) * options.height;

                currentOffsetX = currentOffsetX % originalWidth;

            }

        }

        if (currentOffsetX + currentWidth &gt; originalWidth) {

            currentWidth = currentOffsetX + currentWidth - originalWidth;

        }

        if (currentOffsetY + currentHeight &gt; originalHeight) {

            currentHeight = currentOffsetY + currentHeight - originalHeight;

        }

        for (x = 0; x &lt; options.tileX; x += 1) {

            for (y = 0; y &lt; options.tileY; y += 1) {

                context.drawImage(
                    this.image,
                    currentOffsetX,
                    currentOffsetY,
                    currentWidth,
                    currentHeight,
                    options.width * x,
                    options.height * y,
                    currentWidth,
                    currentHeight
                );

            }

        }

        if (this.animating) {

            if (!this.ftime || facade.ftime - this.ftime &gt;= options.speed) {

                if (this.ftime) {

                    this.currentFrame += 1;

                }

                this.ftime = facade.ftime;

                if (this.currentFrame &gt;= options.frames.length) {

                    if (options.loop) {

                        this.currentFrame = 0;

                    } else {

                        this.currentFrame = options.frames.length - 1;

                        this.isAnimating = false;

                    }

                }

                if (typeof options.callback === &#x27;function&#x27;) {

                    options.callback.call(this, options.frames[this.currentFrame]);

                }

            }

        }

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.text">
                                    <a href="#facade.js-facade.text" class="permalink">#</a> Facade.Text()
                                </h2>

                                <p>Create a text object. Inherits all methods from <b>Facade.Entity</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>value</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Value of the text object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the text entity with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position a text object. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position a text object. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the text object. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the text object. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a text object. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.opacity</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Opacity of the text object. Integer between 0 and 100. <i>Default:</i> 100</p>




                                            <p>
                                                <b>options.width</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Max width of the text object. Will cause text to wrap onto a new line if necessary. No wrapping will occur if the value is set to 0. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.fontFamily</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Sets the font family of the text. Only one font can be specified at a time. <i>Default:</i> "Arial"</p>




                                            <p>
                                                <b>options.fontStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Font style of the text. <i>Default:</i> "normal"<br><ul><li>normal</li><li>bold</li><li>italic</li></ul></p>




                                            <p>
                                                <b>options.fontSize</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Font size in pixels. <i>Default:</i> 30</p>




                                            <p>
                                                <b>options.lineHeight</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Line height of the text. <i>Default:</i> 1</p>




                                            <p>
                                                <b>options.textAlignment</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Horizontal alignment of the text. <i>Default:</i> "left"<br><ul><li>left</li><li>center</li><li>right</li></ul></p>




                                            <p>
                                                <b>options.textBaseline</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Baseline to set the vertical alignment of the text drawn. <i>Default:</i> "top"<br><ul><li>top</li><li>hanging</li><li>middle</li><li>alphabetic</li><li>ideographic</li><li>bottom</li></ul></p>




                                            <p>
                                                <b>options.fillStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Fill color for the text object. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.strokeStyle</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Color of a text object's stroke. Can be a text representation of a color, HEX, RGB(a), HSL(a). <i>Default:</i> "#000"<br><ul><li>HTML Colors: red, green, blue, etc.</li><li>HEX: #f00, #ff0000</li><li>RGB(a): rgb(255, 0, 0), rgba(0, 255, 0, 0.5)</li><li>HSL(a): hsl(100, 100%, 50%), hsla(100, 100%, 50%, 0.5)</li></ul></p>




                                            <p>
                                                <b>options.lineWidth</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Width of the stroke. <i>Default:</i> 0</p>









                                </section>


                                
                                
                                


                                <section class="properties">

                                    <h3>Properties</h3>







































                                            <p>
                                                <b>value</b>
                                                    <code>String</code>
                                            </p>
                                            <p>Current value of the text object.</p>







                                </section>


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var text = new Facade.Text(&#39;Hello World!&#39;, {
    x: 0,
    y: 0,
    fontFamily: &#39;Helvetica&#39;,
    fontSize: 40,
    fillStyle: &#39;#333&#39;,
    anchor: &#39;top/left&#39;
});
</code></pre>












































                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Text = function (value, options) {

    if (!(this instanceof Facade.Text)) {

        return new Facade.Text(value, options);

    }

    this._options = this._defaultOptions({
        opacity: 100,
        width: 0,
        fontFamily: &#x27;Arial&#x27;,
        fontStyle: &#x27;normal&#x27;,
        fontSize: 16,
        lineHeight: 1,
        textAlignment: &#x27;left&#x27;,
        textBaseline: &#x27;top&#x27;,
        fillStyle: &#x27;#000&#x27;,
        strokeStyle: &#x27;#000&#x27;,
        lineWidth: 0
    });
    this._metrics = this._defaultMetrics();

    this._maxLineWidth = 0;

    this._lines = [];

    this.setOptions(options);

    if (value !== undefined) {

        this.setText(value);

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









































                                        <p><code>Object</code>  New Facade.Text object.</p>





                            </div>








                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.text.prototype.settext">
                                    <a href="#facade.js-facade.text.prototype.settext" class="permalink">#</a> Facade.Text.setText()
                                </h2>

                                <p>Sets the text entities value.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>value</b>
                                                    <code>String</code>
                                            </p>
                                            <p>The new value of the text entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text.setText(&#39;Lorem ipsum dolor sit amet&#39;));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Text.prototype.setText = function (value) {

    var options = this.getAllOptions(),
        words = [],
        currentWord = null,
        currentLine = &#x27;&#x27;,
        currentLineWidth = 0,
        i,
        length;

    this.value = value;

    this._maxLineWidth = options.width;

    this._lines = [];

    if (value) {

        words = String(value).match(/\n|[\S]+ ?/g);

    }

    if (typeof this._configOptions === &#x27;function&#x27;) {

        options = this._configOptions(options);

    }

    _context.save();

    _context.font = options.font;

    while (words.length) {

        currentWord = words.shift();
        currentLineWidth = _context.measureText(currentLine + currentWord.replace(/\s$/, &#x27;&#x27;)).width;

        if ((options.width &gt; 0 &amp;&amp; currentLineWidth &gt; options.width) || currentWord.match(/\n/)) {

            this._lines.push([currentLine.replace(/\s$/, &#x27;&#x27;), 0, this._lines.length * (options.fontSize * options.lineHeight)]);

            currentLine = currentWord.replace(/\n/, &#x27;&#x27;);

        } else {

            currentLine = currentLine + currentWord;

            if (currentLineWidth &gt; this._maxLineWidth) {

                this._maxLineWidth = currentLineWidth;

            }

        }

    }

    this._lines.push([currentLine.replace(/\s$/, &#x27;&#x27;), 0, this._lines.length * (options.fontSize * options.lineHeight)]);

    for (i = 0, length = this._lines.length; i &lt; length; i += 1) {

        currentLineWidth = _context.measureText(this._lines[i][0]).width;

        if (options.textAlignment === &#x27;center&#x27;) {

            this._lines[i][1] = (this._maxLineWidth - currentLineWidth) / 2;

        } else if (options.textAlignment === &#x27;right&#x27;) {

            this._lines[i][1] = this._maxLineWidth - currentLineWidth;

        }

    }

    _context.restore();

    this._setMetrics();

    return this._lines;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Array</code>  An array of lines and the position to render using <a href="https://developer.mozilla.org/en-US/docs/Drawing_text_using_a_canvas#fillText()">fillText()</a> and <a href="https://developer.mozilla.org/en-US/docs/Drawing_text_using_a_canvas#strokeText()">strokeText()</a>.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.text.prototype._draw">
                                    <a href="#facade.js-facade.text.prototype._draw" class="permalink">#</a> Facade.Text._draw()
                                    <small>private method</small>
                                </h2>

                                <p>Renders a text entity to a canvas.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>facade</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Options used to render the text entity.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Metrics used to render the text entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>text._draw(facade, options, metrics);
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Text.prototype._draw = function (facade, options, metrics) {

    var context = facade.context,
        i,
        length;

    this._applyTransforms(context, options, metrics);

    for (i = 0, length = this._lines.length; i &lt; length; i += 1) {

        if (options.fillStyle) {

            context.fillText.apply(context, this._lines[i]);

        }

        if (options.lineWidth) {

            context.strokeText.apply(context, this._lines[i]);

        }

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.text.prototype._configoptions">
                                    <a href="#facade.js-facade.text.prototype._configoptions" class="permalink">#</a> Facade.Text._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a text entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of text specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Text.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];
    options.globalAlpha = options.opacity / 100;
    options.font = options.fontStyle + &#x27; &#x27; + parseInt(options.fontSize, 10) + &#x27;px &#x27; + options.fontFamily;

    if (options.width === 0) {

        options.width = this._maxLineWidth;

    }

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.text.prototype._setmetrics">
                                    <a href="#facade.js-facade.text.prototype._setmetrics" class="permalink">#</a> Facade.Text._setMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Set metrics based on the text&#39;s options.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Custom options used to render the text entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(text._setMetrics());
console.log(text._setMetrics(updated));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Text.prototype._setMetrics = function (updated) {

    var metrics = this._defaultMetrics(),
        options = updated || this.getAllOptions(),
        anchor;

    if (typeof this._configOptions === &#x27;function&#x27;) {

        options = this._configOptions(options);

    }

    if (this._lines) {

        metrics.width = options.width * options.scale;
        metrics.height = this._lines.length * (options.fontSize * options.lineHeight) * options.scale;

    }

    anchor = this._getAnchorPoint(options, metrics);

    metrics.x = options.x + anchor[0];
    metrics.y = options.y + anchor[1];

    if (!updated) {

        this._metrics = metrics;

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Object with metrics as key-value pairs.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.group">
                                    <a href="#facade.js-facade.group" class="permalink">#</a> Facade.Group()
                                </h2>

                                <p>Create a group object. Inherits all methods from <b>Facade.Entity</b>.</p>

                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Options to create the group with.</p>




                                            <p>
                                                <b>options.x</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>X coordinate to position a group. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.y</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Y coordinate to position a group. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.anchor</b>
                                                    <code>String</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Position to anchor the group. <i>Default:</i> "top/left"<br><ul><li>top/left</li><li>top/center</li><li>top/right</li><li>center/left</li><li>center</li><li>center/right</li><li>bottom/left</li><li>bottom/center</li><li>bottom/right</li></ul></p>




                                            <p>
                                                <b>options.rotate</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Degrees to rotate the group. <i>Default:</i> 0</p>




                                            <p>
                                                <b>options.scale</b>
                                                    <code>Integer</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>A float representing the scale of a group. <i>Default:</i> 1</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>var group = new Facade.Group({ x: 100, y: 100 });

group.addToGroup(polygon);
group.addToGroup(circle);
group.addToGroup(line);
group.addToGroup(rect);
</code></pre>


















                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group = function (options) {

    if (!(this instanceof Facade.Group)) {

        return new Facade.Group(options);

    }

    this._options = this._defaultOptions();
    this._metrics = this._defaultMetrics();

    this._objects = [];

    this.setOptions(options);

};</code></pre>

                                </section>

                                <h3>Returns</h3>















                                        <p><code>Object</code>  New Facade.Group object.</p>





                            </div>








                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.group.prototype._draw">
                                    <a href="#facade.js-facade.group.prototype._draw" class="permalink">#</a> Facade.Group._draw()
                                    <small>private method</small>
                                </h2>

                                <p>Renders a group of entities to a canvas.</p>

                                
                                
                                
                                
                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>facade</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js object.</p>




                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Options used to render the group.</p>




                                            <p>
                                                <b>metrics</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Metrics used to render the group.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>group._draw(stage, options, metrics);
</code></pre>












                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype._draw = function (facade, options, metrics) {

    var context = facade.context,
        i,
        length;

    this._applyTransforms(context, options, metrics);

    for (i = 0, length = this._objects.length; i &lt; length; i += 1) {

        facade.addToStage(this._objects[i]);

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>









                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.group.prototype._configoptions">
                                    <a href="#facade.js-facade.group.prototype._configoptions" class="permalink">#</a> Facade.Group._configOptions()
                                    <small>private method</small>
                                </h2>

                                <p>Custom configuration for options specific to a group entity.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>options</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Complete set of group specific options.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(group._configOptions(options));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype._configOptions = function (options) {

    options.translate = [ options.x, options.y ];

    return options;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Converted options.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.group.prototype.addtogroup">
                                    <a href="#facade.js-facade.group.prototype.addtogroup" class="permalink">#</a> Facade.Group.addToGroup()
                                </h2>

                                <p>Adds a Facade.js entity to a group.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>obj</b>
                                                    <code>Object</code>
                                                    <code>Array</code>
                                            </p>
                                            <p>Facade.js entity or an array of entities.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>group.addToGroup(circle);
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype.addToGroup = function (obj) {

    var i,
        length;

    if (obj instanceof Facade.Entity) {

        if (!this.hasEntity(obj)) {

            this._objects.push(obj);

            this._setMetrics();

        }

    } else if (Array.isArray(obj)) {

        for (i = 0, length = obj.length; i &lt; length; i += 1) {

            this.addToGroup(obj[i]);

        }

    } else {

        throw new Error(&#x27;Object passed to Facade.addToStage is not a valid Facade.js entity.&#x27;);

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.group.prototype.hasentity">
                                    <a href="#facade.js-facade.group.prototype.hasentity" class="permalink">#</a> Facade.Group.hasEntity()
                                </h2>

                                <p>Tests the existence of an entity within a group.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>obj</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>group.addToGroup(circle);
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype.hasEntity = function (obj) {

    return this._objects.indexOf(obj) !== -1;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Boolean</code>  Boolean result of the test.</p>





                            </div>






                            <div class="method scope-public">

                                

                                <h2 id="facade.js-facade.group.prototype.removefromgroup">
                                    <a href="#facade.js-facade.group.prototype.removefromgroup" class="permalink">#</a> Facade.Group.removeFromGroup()
                                </h2>

                                <p>Removes a Facade.js entity from a group.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>obj</b>
                                                    <code>Object</code>
                                            </p>
                                            <p>Facade.js entity.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>group.removeFromGroup(circle);
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype.removeFromGroup = function (obj) {

    if (obj instanceof Facade.Entity) {

        if (this.hasEntity(obj)) {

            this._objects.splice(this._objects.indexOf(obj), 1);

            this._setMetrics();

        }

    }

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>void</code>  </p>





                            </div>






                            <div class="method scope-private">

                                

                                <h2 id="facade.js-facade.group.prototype._setmetrics">
                                    <a href="#facade.js-facade.group.prototype._setmetrics" class="permalink">#</a> Facade.Group._setMetrics()
                                    <small>private method</small>
                                </h2>

                                <p>Set metrics based on the groups&#39;s entities and options.</p>

                                
                                
                                


                                <section class="parameters">

                                    <h3>Parameters</h3>



                                            <p>
                                                <b>updated</b>
                                                    <code>Object</code>
                                                    <span class="label label-default">Optional</span>
                                            </p>
                                            <p>Custom options used to render the group.</p>







                                </section>


                                


                                <section class="examples">

                                    <h3>Examples</h3>

                                    <pre><code>console.log(group._setMetrics());
console.log(group._setMetrics(updated));
</code></pre>








                                </section>

                                <section class="code">

                                    <h3>Code</h3>

                                    <pre><code>Facade.Group.prototype._setMetrics = function (updated) {

    var metrics = this._defaultMetrics(),
        options = updated || this.getAllOptions(),
        bounds = { top: null, right: null, bottom: null, left: null },
        i,
        length,
        anchor,
        obj_metrics;

    for (i = 0, length = this._objects.length; i &lt; length; i += 1) {

        obj_metrics = this._objects[i].getAllMetrics();

        if (obj_metrics.x &lt; bounds.left || bounds.left === null) {

            bounds.left = obj_metrics.x;

        }

        if (obj_metrics.y &lt; bounds.top || bounds.top === null) {

            bounds.top = obj_metrics.y;

        }

        if (obj_metrics.x + obj_metrics.width &gt; bounds.right || bounds.right === null) {

            bounds.right = obj_metrics.x + obj_metrics.width;

        }

        if (obj_metrics.y + obj_metrics.height &gt; bounds.bottom || bounds.bottom === null) {

            bounds.bottom = obj_metrics.y + obj_metrics.height;

        }

    }

    metrics.x = options.x + bounds.left;
    metrics.y = options.y + bounds.top;

    metrics.width = (bounds.right - bounds.left) * options.scale;
    metrics.height = (bounds.bottom - bounds.top) * options.scale;

    anchor = this._getAnchorPoint(options, metrics);

    metrics.x = options.x + anchor[0];
    metrics.y = options.y + anchor[1];

    if (!updated) {

        this._metrics = metrics;

    }

    return metrics;

};</code></pre>

                                </section>

                                <h3>Returns</h3>





                                        <p><code>Object</code>  Object with metrics as key-value pairs.</p>





                            </div>







            </div>

        </div>

    </div>

</div>

<footer class="bs-footer">

    <div class="container">

        <p>Documentation generated with <a href="https://github.com/neogeek/doxdox">doxdox</a>.</p>

    </div>

</footer>

</body>
</html>
",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 00:00:50 GMT",
                    "Content-Length": "224331",
                    "Date": "Fri, 07 Nov 2014 00:00:50 GMT",
                    "Content-Type": "text/html; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "HTML",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}