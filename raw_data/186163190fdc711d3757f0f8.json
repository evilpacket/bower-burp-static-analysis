{
    "url": "http://localhost:9999/andrzejdus/parallaxer.js/custom_components/closure-library-20130212-95c19e7f0f5f/closure/goog/testing/testrunner.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>window.location.search</b> and written to <b>the 'href' property of a DOM element</b> via the following statements:<ul><li>var search = window.location.search;</li><li>newSearch = search + '&amp;' + newSearch;</li><li>newSearch= search.substr(0 , oldTests.index) + newSearch+ search.substr(oldTests.index+ oldTests[0 ] .length);</li><li>href = href.split('#')[0].split('?')[0] + newSearch + hash;</li><li>a.href = href;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/andrzejdus/parallaxer.js/custom_components/closure-library-20130212-95c19e7f0f5f/closure/goog/testing/testrunner.js",
                "path": "/andrzejdus/parallaxer.js/custom_components/closure-library-20130212-95c19e7f0f5f/closure/goog/testing/testrunner.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hbmRyemVqZHVzL3BhcmFsbGF4ZXIuanMvY3VzdG9tX2NvbXBvbmVudHMvY2xvc3VyZS1saWJyYXJ5LTIwMTMwMjEyLTk1YzE5ZTdmMGY1Zi9jbG9zdXJlL2dvb2cvdGVzdGluZy90ZXN0cnVubmVyLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTE0OTQNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMjE6Mzk6MTIgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDIxOjM5OjA4IEdNVA0KDQovLyBDb3B5cmlnaHQgMjAwNyBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCi8vCi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwovLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAovLwovLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAovLwovLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUy1JUyIgQkFTSVMsCi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgovLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKLyoqCiAqIEBmaWxlb3ZlcnZpZXcgVGhlIHRlc3QgcnVubmVyIGlzIGEgc2luZ2xldG9uIG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gZXhlY3V0ZQogKiBhIGdvb2cudGVzdGluZy5UZXN0Q2FzZXMsIGRpc3BsYXkgdGhlIHJlc3VsdHMsIGFuZCBleHBvc2UgdGhlIHJlc3VsdHMgdG8KICogU2VsZW5pdW0gZm9yIGF1dG9tYXRpb24uICBJZiBhIFRlc3RDYXNlIGhhc24ndCBiZWVuIHJlZ2lzdGVyZWQgd2l0aCB0aGUKICogcnVubmVyIGJ5IHRoZSB0aW1lIHdpbmRvdy5vbmxvYWQgb2NjdXJzLCB0aGUgdGVzdFJ1bm5lciB3aWxsIHRyeSB0byBhdXRvLQogKiBkaXNjb3ZlciBKc1VuaXQgc3R5bGUgdGVzdCBwYWdlcy4KICoKICogVGhlIGhvb2tzIGZvciBzZWxlbml1bSBhcmUgOi0KICogIC0gQm9vbGVhbiBHX3Rlc3RSdW5uZXIuaXNGaW5pc2hlZCgpCiAqICAtIEJvb2xlYW4gR190ZXN0UnVubmVyLmlzU3VjY2VzcygpCiAqICAtIFN0cmluZyBHX3Rlc3RSdW5uZXIuZ2V0UmVwb3J0KCkKICogIC0gbnVtYmVyIEdfdGVzdFJ1bm5lci5nZXRSdW5UaW1lKCkKICoKICogVGVzdGluZyBjb2RlIHNob3VsZCBub3QgaGF2ZSBkZXBlbmRlbmNpZXMgb3V0c2lkZSBvZiBnb29nLnRlc3Rpbmcgc28gYXMgdG8KICogcmVkdWNlIHRoZSBjaGFuY2Ugb2YgbWFza2luZyBtaXNzaW5nIGRlcGVuZGVuY2llcy4KICoKICovCgpnb29nLnByb3ZpZGUoJ2dvb2cudGVzdGluZy5UZXN0UnVubmVyJyk7Cgpnb29nLnJlcXVpcmUoJ2dvb2cudGVzdGluZy5UZXN0Q2FzZScpOwoKCgovKioKICogQ29uc3RydWN0IGEgdGVzdCBydW5uZXIuCiAqCiAqIE5PVEUodXNlcik6IFRoaXMgaXMgY3VycmVudGx5IHByZXR0eSB3ZWlyZCwgSSdtIGVzc2VudGlhbGx5IHRyeWluZyB0bwogKiBjcmVhdGUgYSB3cmFwcGVyIHRoYXQgdGhlIFNlbGVuaXVtIHRlc3QgY2FuIGhvb2sgaW50byB0byBxdWVyeSB0aGUgc3RhdGUgb2YKICogdGhlIHJ1bm5pbmcgdGVzdCBjYXNlLCB3aGlsZSBtYWtpbmcgZ29vZy50ZXN0aW5nLlRlc3RDYXNlIGdlbmVyYWwuCiAqCiAqIEBjb25zdHJ1Y3RvcgogKi8KZ29vZy50ZXN0aW5nLlRlc3RSdW5uZXIgPSBmdW5jdGlvbigpIHsKICAvKioKICAgKiBFcnJvcnMgdGhhdCBvY2N1cnJlZCBpbiB0aGUgd2luZG93LgogICAqIEB0eXBlIHtBcnJheS48c3RyaW5nPn0KICAgKi8KICB0aGlzLmVycm9ycyA9IFtdOwp9OwoKCi8qKgogKiBSZWZlcmVuY2UgdG8gdGhlIGFjdGl2ZSB0ZXN0IGNhc2UuCiAqIEB0eXBlIHtnb29nLnRlc3RpbmcuVGVzdENhc2U/fQogKi8KZ29vZy50ZXN0aW5nLlRlc3RSdW5uZXIucHJvdG90eXBlLnRlc3RDYXNlID0gbnVsbDsKCgovKioKICogV2hldGhlciB0aGUgdGVzdCBydW5uZXIgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgeWV0LgogKiBAdHlwZSB7Ym9vbGVhbn0KICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS5pbml0aWFsaXplZCA9IGZhbHNlOwoKCi8qKgogKiBFbGVtZW50IGNyZWF0ZWQgaW4gdGhlIGRvY3VtZW50IHRvIGFkZCB0ZXN0IHJlc3VsdHMgdG8uCiAqIEB0eXBlIHtFbGVtZW50fQogKiBAcHJpdmF0ZQogKi8KZ29vZy50ZXN0aW5nLlRlc3RSdW5uZXIucHJvdG90eXBlLmxvZ0VsXyA9IG51bGw7CgoKLyoqCiAqIEZ1bmN0aW9uIHRvIHVzZSB3aGVuIGZpbHRlcmluZyBlcnJvcnMuCiAqIEB0eXBlIHsoZnVuY3Rpb24oc3RyaW5nKSk/fQogKiBAcHJpdmF0ZQogKi8KZ29vZy50ZXN0aW5nLlRlc3RSdW5uZXIucHJvdG90eXBlLmVycm9yRmlsdGVyXyA9IG51bGw7CgoKLyoqCiAqIFdoZXRoZXIgYW4gZW1wdHkgdGVzdCBjYXNlIGNvdW50cyBhcyBhbiBlcnJvci4KICogQHR5cGUge2Jvb2xlYW59CiAqIEBwcml2YXRlCiAqLwpnb29nLnRlc3RpbmcuVGVzdFJ1bm5lci5wcm90b3R5cGUuc3RyaWN0XyA9IHRydWU7CgoKLyoqCiAqIEluaXRpYWxpemVzIHRoZSB0ZXN0IHJ1bm5lci4KICogQHBhcmFtIHtnb29nLnRlc3RpbmcuVGVzdENhc2V9IHRlc3RDYXNlIFRoZSB0ZXN0IGNhc2UgdG8gaW5pdGlhbGl6ZSB3aXRoLgogKi8KZ29vZy50ZXN0aW5nLlRlc3RSdW5uZXIucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbih0ZXN0Q2FzZSkgewogIGlmICh0aGlzLnRlc3RDYXNlICYmIHRoaXMudGVzdENhc2UucnVubmluZykgewogICAgdGhyb3cgRXJyb3IoJ1RoZSB0ZXN0IHJ1bm5lciBpcyBhbHJlYWR5IHdhaXRpbmcgZm9yIGEgdGVzdCB0byBjb21wbGV0ZScpOwogIH0KICB0aGlzLnRlc3RDYXNlID0gdGVzdENhc2U7CiAgdGVzdENhc2Uuc2V0VGVzdFJ1bm5lcih0aGlzKTsKICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTsKfTsKCgovKioKICogQnkgZGVmYXVsdCwgdGhlIHRlc3QgcnVubmVyIGlzIHN0cmljdCwgYW5kIGZhaWxzIGlmIGl0IHJ1bnMgYW4gZW1wdHkKICogdGVzdCBjYXNlLgogKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdCBXaGV0aGVyIHRoZSB0ZXN0IHJ1bm5lciBzaG91bGQgZmFpbCBvbiBhbiBlbXB0eQogKiAgICAgdGVzdCBjYXNlLgogKi8KZ29vZy50ZXN0aW5nLlRlc3RSdW5uZXIucHJvdG90eXBlLnNldFN0cmljdCA9IGZ1bmN0aW9uKHN0cmljdCkgewogIHRoaXMuc3RyaWN0XyA9IHN0cmljdDsKfTsKCgovKioKICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdGVzdCBydW5uZXIgc2hvdWxkIGZhaWwgb24gYW4gZW1wdHkKICogICAgIHRlc3QgY2FzZS4KICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS5pc1N0cmljdCA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB0aGlzLnN0cmljdF87Cn07CgoKLyoqCiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdGVzdCBydW5uZXIgaXMgaW5pdGlhbGl6ZWQuCiAqIFVzZWQgYnkgU2VsZW5pdW0gSG9va3MuCiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHRlc3QgcnVubmVyIGlzIGFjdGl2ZS4KICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS5pc0luaXRpYWxpemVkID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZWQ7Cn07CgoKLyoqCiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdGVzdCBydW5uZXIgaXMgZmluaXNoZWQuCiAqIFVzZWQgYnkgU2VsZW5pdW0gSG9va3MuCiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHRlc3QgcnVubmVyIGlzIGFjdGl2ZS4KICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS5pc0ZpbmlzaGVkID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHRoaXMuZXJyb3JzLmxlbmd0aCA+IDAgfHwKICAgICAgdGhpcy5pbml0aWFsaXplZCAmJiAhIXRoaXMudGVzdENhc2UgJiYgdGhpcy50ZXN0Q2FzZS5zdGFydGVkICYmCiAgICAgICF0aGlzLnRlc3RDYXNlLnJ1bm5pbmc7Cn07CgoKLyoqCiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdGVzdCBjYXNlIGRpZG4ndCBmYWlsLgogKiBVc2VkIGJ5IFNlbGVuaXVtIEhvb2tzLgogKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjdXJyZW50IHRlc3QgcmV0dXJuZWQgc3VjY2Vzc2Z1bGx5LgogKi8KZ29vZy50ZXN0aW5nLlRlc3RSdW5uZXIucHJvdG90eXBlLmlzU3VjY2VzcyA9IGZ1bmN0aW9uKCkgewogIHJldHVybiAhdGhpcy5oYXNFcnJvcnMoKSAmJiAhIXRoaXMudGVzdENhc2UgJiYgdGhpcy50ZXN0Q2FzZS5pc1N1Y2Nlc3MoKTsKfTsKCgovKioKICogUmV0dXJucyB0cnVlIGlmIHRoZSB0ZXN0IGNhc2UgcnVubmVyIGhhcyBlcnJvcnMgdGhhdCB3ZXJlIGNhdWdodCBvdXRzaWRlIG9mCiAqIHRoZSB0ZXN0IGNhc2UuCiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlcmUgd2VyZSBKUyBlcnJvcnMuCiAqLwpnb29nLnRlc3RpbmcuVGVzdFJ1bm5lci5wcm90b3R5cGUuaGFzRXJyb3JzID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHRoaXMuZXJyb3JzLmxlbmd0aCA+IDA7Cn07CgoKLyoqCiAqIExvZ3MgYW4gZXJyb3IgdGhhdCBvY2N1cnJlZC4gIFVzZWQgaW4gdGhlIGNhc2Ugb2YgZW52aXJvbm1lbnQgc2V0dGluZyB1cAogKiBhbiBvbmVycm9yIGhhbmRsZXIuCiAqIEBwYXJhbSB7c3RyaW5nfSBtc2cgRXJyb3IgbWVzc2FnZS4KICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS5sb2dFcnJvciA9IGZ1bmN0aW9uKG1zZykgewogIGlmICghdGhpcy5lcnJvckZpbHRlcl8gfHwgdGhpcy5lcnJvckZpbHRlcl8uY2FsbChudWxsLCBtc2cpKSB7CiAgICB0aGlzLmVycm9ycy5wdXNoKG1zZyk7CiAgfQp9OwoKCi8qKgogKiBMb2cgZmFpbHVyZSBpbiBjdXJyZW50IHJ1bm5pbmcgdGVzdC4KICogQHBhcmFtIHtFcnJvcn0gZXggRXhjZXB0aW9uLgogKi8KZ29vZy50ZXN0aW5nLlRlc3RSdW5uZXIucHJvdG90eXBlLmxvZ1Rlc3RGYWlsdXJlID0gZnVuY3Rpb24oZXgpIHsKICB2YXIgdGVzdE5hbWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGdvb2cudGVzdGluZy5UZXN0Q2FzZS5jdXJyZW50VGVzdE5hbWUpOwogIGlmICh0aGlzLnRlc3RDYXNlKSB7CiAgICB0aGlzLnRlc3RDYXNlLmxvZ0Vycm9yKHRlc3ROYW1lLCBleCk7CiAgfSBlbHNlIHsKICAgIC8vIE5PVEU6IERvIG5vdCBmb3JnZXQgdG8gbG9nIHRoZSBvcmlnaW5hbCBleGNlcHRpb24gcmFpc2VkLgogICAgdGhyb3cgbmV3IEVycm9yKCdUZXN0IHJ1bm5lciBub3QgaW5pdGlhbGl6ZWQgd2l0aCBhIHRlc3QgY2FzZS4gT3JpZ2luYWwgJyArCiAgICAgICAgICAgICAgICAgICAgJ2V4Y2VwdGlvbjogJyArIGV4Lm1lc3NhZ2UpOwogIH0KfTsKCgovKioKICogU2V0cyBhIGZ1bmN0aW9uIHRvIHVzZSBhcyBhIGZpbHRlciBmb3IgZXJyb3JzLgogKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGZuIEZpbHRlciBmdW5jdGlvbi4KICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS5zZXRFcnJvckZpbHRlciA9IGZ1bmN0aW9uKGZuKSB7CiAgdGhpcy5lcnJvckZpbHRlcl8gPSBmbjsKfTsKCgovKioKICogUmV0dXJucyBhIHJlcG9ydCBvZiB0aGUgdGVzdCBjYXNlIHRoYXQgcmFuLgogKiBVc2VkIGJ5IFNlbGVuaXVtIEhvb2tzLgogKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfdmVyYm9zZSBJZiB0cnVlIHJlc3VsdHMgd2lsbCBpbmNsdWRlIGRhdGEgYWJvdXQgYWxsCiAqICAgICB0ZXN0cywgbm90IGp1c3Qgd2hhdCBmYWlsZWQuCiAqIEByZXR1cm4ge3N0cmluZ30gQSByZXBvcnQgc3VtbWFyeSBvZiB0aGUgdGVzdC4KICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS5nZXRSZXBvcnQgPSBmdW5jdGlvbihvcHRfdmVyYm9zZSkgewogIHZhciByZXBvcnQgPSBbXTsKICBpZiAodGhpcy50ZXN0Q2FzZSkgewogICAgcmVwb3J0LnB1c2godGhpcy50ZXN0Q2FzZS5nZXRSZXBvcnQob3B0X3ZlcmJvc2UpKTsKICB9CiAgaWYgKHRoaXMuZXJyb3JzLmxlbmd0aCA+IDApIHsKICAgIHJlcG9ydC5wdXNoKCdKYXZhU2NyaXB0IGVycm9ycyBkZXRlY3RlZCBieSB0ZXN0IHJ1bm5lcjonKTsKICAgIHJlcG9ydC5wdXNoLmFwcGx5KHJlcG9ydCwgdGhpcy5lcnJvcnMpOwogICAgcmVwb3J0LnB1c2goJ1xuJyk7CiAgfQogIHJldHVybiByZXBvcnQuam9pbignXG4nKTsKfTsKCgovKioKICogUmV0dXJucyB0aGUgYW1vdW50IG9mIHRpbWUgaXQgdG9vayBmb3IgdGhlIHRlc3QgdG8gcnVuLgogKiBVc2VkIGJ5IFNlbGVuaXVtIEhvb2tzLgogKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBydW4gdGltZSwgaW4gbWlsbGlzZWNvbmRzLgogKi8KZ29vZy50ZXN0aW5nLlRlc3RSdW5uZXIucHJvdG90eXBlLmdldFJ1blRpbWUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gdGhpcy50ZXN0Q2FzZSA/IHRoaXMudGVzdENhc2UuZ2V0UnVuVGltZSgpIDogMDsKfTsKCgovKioKICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHNjcmlwdCBmaWxlcyB0aGF0IHdlcmUgbG9hZGVkIGluIG9yZGVyIHRvIHJ1biB0aGUgdGVzdC4KICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIHNjcmlwdCBmaWxlcy4KICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS5nZXROdW1GaWxlc0xvYWRlZCA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB0aGlzLnRlc3RDYXNlID8gdGhpcy50ZXN0Q2FzZS5nZXROdW1GaWxlc0xvYWRlZCgpIDogMDsKfTsKCgovKioKICogRXhlY3V0ZXMgYSB0ZXN0IGNhc2UgYW5kIHByaW50cyB0aGUgcmVzdWx0cyB0byB0aGUgd2luZG93LgogKi8KZ29vZy50ZXN0aW5nLlRlc3RSdW5uZXIucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbigpIHsKICBpZiAoIXRoaXMudGVzdENhc2UpIHsKICAgIHRocm93IEVycm9yKCdUaGUgdGVzdCBydW5uZXIgbXVzdCBiZSBpbml0aWFsaXplZCB3aXRoIGEgdGVzdCBjYXNlIGJlZm9yZSAnICsKICAgICAgICAgICAgICAgICdleGVjdXRlIGNhbiBiZSBjYWxsZWQuJyk7CiAgfQogIHRoaXMudGVzdENhc2Uuc2V0Q29tcGxldGVkQ2FsbGJhY2soZ29vZy5iaW5kKHRoaXMub25Db21wbGV0ZV8sIHRoaXMpKTsKICB0aGlzLnRlc3RDYXNlLnJ1blRlc3RzKCk7Cn07CgoKLyoqCiAqIFdyaXRlcyB0aGUgcmVzdWx0cyB0byB0aGUgZG9jdW1lbnQgd2hlbiB0aGUgdGVzdCBjYXNlIGNvbXBsZXRlcy4KICogQHByaXZhdGUKICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS5vbkNvbXBsZXRlXyA9IGZ1bmN0aW9uKCkgewogIHZhciBsb2cgPSB0aGlzLnRlc3RDYXNlLmdldFJlcG9ydCh0cnVlKTsKICBpZiAodGhpcy5lcnJvcnMubGVuZ3RoID4gMCkgewogICAgbG9nICs9ICdcbicgKyB0aGlzLmVycm9ycy5qb2luKCdcbicpOwogIH0KCiAgaWYgKCF0aGlzLmxvZ0VsXykgewogICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nsb3N1cmVUZXN0UnVubmVyTG9nJyk7CiAgICBpZiAoZWwgPT0gbnVsbCkgewogICAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTsKICAgIH0KICAgIHRoaXMubG9nRWxfID0gZWw7CiAgfQoKICAvLyBSZW1vdmUgYWxsIGNoaWxkcmVuIGZyb20gdGhlIGxvZyBlbGVtZW50LgogIHZhciBsb2dFbCA9IHRoaXMubG9nRWxfOwogIHdoaWxlIChsb2dFbC5maXJzdENoaWxkKSB7CiAgICBsb2dFbC5yZW1vdmVDaGlsZChsb2dFbC5maXJzdENoaWxkKTsKICB9CgogIC8vIEhpZ2hsaWdodCB0aGUgcGFnZSB0byBpbmRpY2F0ZSB0aGUgb3ZlcmFsbCBvdXRjb21lLgogIHRoaXMud3JpdGVMb2cobG9nKTsKCiAgdmFyIHJ1bkFnYWluTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICBydW5BZ2Fpbkxpbmsuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgcnVuQWdhaW5MaW5rLnN0eWxlLmZvbnRTaXplID0gJ3NtYWxsJzsKICBydW5BZ2FpbkxpbmsuaHJlZiA9ICcnOwogIHJ1bkFnYWluTGluay5vbmNsaWNrID0gZ29vZy5iaW5kKGZ1bmN0aW9uKCkgewogICAgdGhpcy5leGVjdXRlKCk7CiAgICByZXR1cm4gZmFsc2U7CiAgfSwgdGhpcyk7CiAgcnVuQWdhaW5MaW5rLmlubmVySFRNTCA9ICdSdW4gYWdhaW4gd2l0aG91dCByZWxvYWRpbmcnOwogIGxvZ0VsLmFwcGVuZENoaWxkKHJ1bkFnYWluTGluayk7Cn07CgoKLyoqCiAqIFdyaXRlcyBhIG5pY2VseSBmb3JtYXR0ZWQgbG9nIG91dCB0byB0aGUgZG9jdW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBsb2cgVGhlIHN0cmluZyB0byB3cml0ZS4KICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS53cml0ZUxvZyA9IGZ1bmN0aW9uKGxvZykgewogIHZhciBsaW5lcyA9IGxvZy5zcGxpdCgnXG4nKTsKICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgbGluZSA9IGxpbmVzW2ldOwogICAgdmFyIGNvbG9yOwogICAgdmFyIGlzRmFpbE9yRXJyb3IgPSAvRkFJTEVELy50ZXN0KGxpbmUpIHx8IC9FUlJPUi8udGVzdChsaW5lKTsKICAgIGlmICgvUEFTU0VELy50ZXN0KGxpbmUpKSB7CiAgICAgIGNvbG9yID0gJ2RhcmtncmVlbic7CiAgICB9IGVsc2UgaWYgKGlzRmFpbE9yRXJyb3IpIHsKICAgICAgY29sb3IgPSAnZGFya3JlZCc7CiAgICB9IGVsc2UgewogICAgICBjb2xvciA9ICcjMzMzJzsKICAgIH0KICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIGlmIChsaW5lLnN1YnN0cigwLCAyKSA9PSAnPiAnKSB7CiAgICAgIC8vIFRoZSBzdGFjayB0cmFjZSBtYXkgY29udGFpbiBsaW5rcyBzbyBpdCBoYXMgdG8gYmUgaW50ZXJwcmV0ZWQgYXMgSFRNTC4KICAgICAgZGl2LmlubmVySFRNTCA9IGxpbmU7CiAgICB9IGVsc2UgewogICAgICBkaXYuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGluZSkpOwogICAgfQoKICAgIGlmIChpc0ZhaWxPckVycm9yKSB7CiAgICAgIHZhciB0ZXN0TmFtZU1hdGNoID0gLyhcUyspIChcW1teXF1dKl0gKT86IChGQUlMRUR8RVJST1IpLy5leGVjKGxpbmUpOwogICAgICBpZiAodGVzdE5hbWVNYXRjaCkgewogICAgICAgIC8vIEJ1aWxkIGEgVVJMIHRvIHJ1biB0aGUgdGVzdCBpbmRpdmlkdWFsbHkuICBJZiB0aGlzIHRlc3Qgd2FzIGFscmVhZHkKICAgICAgICAvLyBwYXJ0IG9mIGFub3RoZXIgc3Vic2V0IHRlc3QsIHdlIG5lZWQgdG8gb3ZlcndyaXRlIHRoZSBvbGQgcnVuVGVzdHMKICAgICAgICAvLyBxdWVyeSBwYXJhbWV0ZXIuICBXZSBhbHNvIG5lZWQgdG8gZG8gdGhpcyB3aXRob3V0IGJyaW5naW5nIGluIGFueQogICAgICAgIC8vIGV4dHJhIGRlcGVuZGVuY2llcywgb3RoZXJ3aXNlIHdlIGNvdWxkIG1hc2sgbWlzc2luZyBkZXBlbmRlbmN5IGJ1Z3MuCiAgICAgICAgdmFyIG5ld1NlYXJjaCA9ICdydW5UZXN0cz0nICsgdGVzdE5hbWVNYXRjaFsxXTsKICAgICAgICB2YXIgc2VhcmNoID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDsKICAgICAgICBpZiAoc2VhcmNoKSB7CiAgICAgICAgICB2YXIgb2xkVGVzdHMgPSAvcnVuVGVzdHM9KFteJl0qKS8uZXhlYyhzZWFyY2gpOwogICAgICAgICAgaWYgKG9sZFRlc3RzKSB7CiAgICAgICAgICAgIG5ld1NlYXJjaCA9IHNlYXJjaC5zdWJzdHIoMCwgb2xkVGVzdHMuaW5kZXgpICsKICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2VhcmNoICsKICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLnN1YnN0cihvbGRUZXN0cy5pbmRleCArIG9sZFRlc3RzWzBdLmxlbmd0aCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdTZWFyY2ggPSBzZWFyY2ggKyAnJicgKyBuZXdTZWFyY2g7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG5ld1NlYXJjaCA9ICc/JyArIG5ld1NlYXJjaDsKICAgICAgICB9CiAgICAgICAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICB2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoOwogICAgICAgIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9ICcjJykgewogICAgICAgICAgaGFzaCA9ICcjJyArIGhhc2g7CiAgICAgICAgfQogICAgICAgIGhyZWYgPSBocmVmLnNwbGl0KCcjJylbMF0uc3BsaXQoJz8nKVswXSArIG5ld1NlYXJjaCArIGhhc2g7CgogICAgICAgIC8vIEFkZCB0aGUgbGluay4KICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0EnKTsKICAgICAgICBhLmlubmVySFRNTCA9ICcocnVuIGluZGl2aWR1YWxseSknOwogICAgICAgIGEuc3R5bGUuZm9udFNpemUgPSAnMC44ZW0nOwogICAgICAgIGEuaHJlZiA9IGhyZWY7CiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcgJykpOwogICAgICAgIGRpdi5hcHBlbmRDaGlsZChhKTsKICAgICAgfQogICAgfQoKICAgIGRpdi5zdHlsZS5jb2xvciA9IGNvbG9yOwogICAgZGl2LnN0eWxlLmZvbnQgPSAnbm9ybWFsIDEwMCUgbW9ub3NwYWNlJzsKICAgIGlmIChpID09IDApIHsKICAgICAgLy8gSGlnaGxpZ2h0IHRoZSBmaXJzdCBsaW5lIGFzIGEgaGVhZGVyIHRoYXQgaW5kaWNhdGVzIHRoZSB0ZXN0IG91dGNvbWUuCiAgICAgIGRpdi5zdHlsZS5wYWRkaW5nID0gJzIwcHgnOwogICAgICBkaXYuc3R5bGUubWFyZ2luQm90dG9tID0gJzEwcHgnOwogICAgICBpZiAoaXNGYWlsT3JFcnJvcikgewogICAgICAgIGRpdi5zdHlsZS5ib3JkZXIgPSAnNXB4IHNvbGlkICcgKyBjb2xvcjsKICAgICAgICBkaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNmZmVlZWUnOwogICAgICB9IGVsc2UgewogICAgICAgIGRpdi5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkIGJsYWNrJzsKICAgICAgICBkaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNlZWZmZWUnOwogICAgICB9CiAgICB9CgogICAgdHJ5IHsKICAgICAgZGl2LnN0eWxlLndoaXRlU3BhY2UgPSAncHJlLXdyYXAnOwogICAgfSBjYXRjaCAoZSkgewogICAgICAvLyBOT1RFKGJyZW5uZW1hbik6IElFIHJhaXNlcyBhbiBleGNlcHRpb24gd2hlbiBhc3NpZ25pbmcgdG8gcHJlLXdyYXAuCiAgICAgIC8vIFRoYW5rZnVsbHksIGl0IGRvZXNuJ3QgY29sbGFwc2Ugd2hpdGVzcGFjZSB3aGVuIHVzaW5nIG1vbm9zcGFjZSBmb250cywKICAgICAgLy8gc28gaXQgd2lsbCBkaXNwbGF5IGNvcnJlY3RseSBpZiB3ZSBpZ25vcmUgdGhlIGV4Y2VwdGlvbi4KICAgIH0KCiAgICBpZiAoaSA8IDIpIHsKICAgICAgZGl2LnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7CiAgICB9CiAgICB0aGlzLmxvZ0VsXy5hcHBlbmRDaGlsZChkaXYpOwogIH0KfTsKCgovKioKICogTG9ncyBhIG1lc3NhZ2UgdG8gdGhlIGN1cnJlbnQgdGVzdCBjYXNlLgogKiBAcGFyYW0ge3N0cmluZ30gcyBUaGUgdGV4dCB0byBvdXRwdXQgdG8gdGhlIGxvZy4KICovCmdvb2cudGVzdGluZy5UZXN0UnVubmVyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbihzKSB7CiAgaWYgKHRoaXMudGVzdENhc2UpIHsKICAgIHRoaXMudGVzdENhc2UubG9nKHMpOwogIH0KfTsK",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 21:39:08 GMT",
                    "Content-Length": "11494",
                    "Date": "Fri, 07 Nov 2014 21:39:12 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}