{
    "url": "http://localhost:9999/alohaeditor/Aloha-Editor/src/plugins/common/ui/lib/tab.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.href</b> and written to <b>$()</b> via the following statement:<ul><li>this.handle = $('&lt;li&gt;&lt;a href=\"' + location.href.replace(/#.*$/, '') + '#' + this.id + '\"&gt;' +     settings.label + '&lt;/a&gt;&lt;/li&gt;');</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/alohaeditor/Aloha-Editor/src/plugins/common/ui/lib/tab.js",
                "path": "/alohaeditor/Aloha-Editor/src/plugins/common/ui/lib/tab.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hbG9oYWVkaXRvci9BbG9oYS1FZGl0b3Ivc3JjL3BsdWdpbnMvY29tbW9uL3VpL2xpYi90YWIuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "ZGVmaW5lKFsKCSdhbG9oYS9jb3JlJywKCSdqcXVlcnknLAoJJ3VpL2NvbnRhaW5lcicsCgkndWkvY29tcG9uZW50JywKCSdQdWJTdWInLAoJJ2pxdWVyeXVpJwpdLCBmdW5jdGlvbiAoCglBbG9oYSwKCSQsCglDb250YWluZXIsCglDb21wb25lbnQsCglQdWJTdWIKKSB7CgkndXNlIHN0cmljdCc7CgoJdmFyIGlkQ291bnRlciA9IDA7Cgl2YXIgc2xvdHRlZENvbXBvbmVudHMgPSB7fTsKCglmdW5jdGlvbiBoYXNWaXNpYmxlQ29tcG9uZW50cyh0YWIpIHsKCQl2YXIgaSwgc2xvdCwgY29tcG9uZW50LCBoYXNWaXNpYmxlID0gZmFsc2U7CgoJCS8vIHRoZSBwcm9ibGVtIGlzLCBhIGNvbnRhaW5lciBjb21wb25lbnQgaGFkIGEgYnV0dG9uIHRvIGV4cGFuZCB0aGUgb3B0aW9ucwoJCWlmICgkKAoJCQkJJ2J1dHRvbjpub3QoLmFsb2hhLW11bHRpc3BsaXQtdG9nZ2xlKScsCgkJCQl0YWIucGFuZWwKCQkJKS5sZW5ndGggIT09IDAKCQkpIHsKCQkJaGFzVmlzaWJsZSA9IHRydWU7CgkJfQoKCQkvKgoJCS8vIEB0b2RvIHRoaXMgYWxnb3JpdGhtIG11c3QgYmUgZW5oYW5jZWQsIGFza2luZyBlYWNoIGNvbXBvbmVudCBpZiBpcyB2aXNpYmxlCgkJLy8gdGhpcyBpcyB0aGUgbG9uZ2VzdCBhcHJvYWNoLCBJIGl0ZXJhdGUgdGhlIGNvbXBvbmVudHMgcmVnaXN0ZXJlZCBpbgoJCS8vIHRoaXMgdGFiCgkJZm9yIChpID0gMDsgaSA8IHRhYi5fc2xvdHNMaXN0Lmxlbmd0aDsgaSsrKXsKCQkJaWYodW5kZWZpbmVkICE9PSBzbG90dGVkQ29tcG9uZW50c1tzbG90TmFtZV0pewoJCQkJaWYoJCgKCQkJCQkJJ2J1dHRvbjpub3QoLmFsb2hhLW11bHRpc3BsaXQtdG9nZ2xlKScsCgkJCQkJCXNsb3R0ZWRDb21wb25lbnRzW3Nsb3ROYW1lXS5lbGVtZW50CgkJCQkJKS5sZW5ndGggIT09IDAKCQkJCSl7CgkJCQkJaGFzVmlzaWJsZSA9IHRydWU7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCX0KCQl9CgkJKi8KCQlyZXR1cm4gaGFzVmlzaWJsZTsKCX0KCgkvKioKCSAqIERlZmluZXMgYSBDb250YWluZXIgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyBhIGNvbGxlY3Rpb24gb2YgcmVsYXRlZAoJICogY29tcG9uZW50IGdyb3VwcyB0byBiZSByZW5kZXJlZCB0b2dldGhlciBvbiB0aGUgdG9vbGJhci4gIFRhYnMgYXJlCgkgKiBvcmdhbml6ZWQgYnkgZmVhdHVyZSBhbmQgZnVuY3Rpb25hbGl0eSBzbyB0aGF0IHJlbGF0ZWQgY29udHJvbHMgY2FuIGJlCgkgKiBicm91Z2h0IGluIGFuZCBvdXQgb2YgdmlldyBkZXBlbmRpbmcgb24gd2hldGhlciB0aGV5IGFyZQoJICogYXBwcm9wcmlhdGUgZm9yIGEgZ2l2ZW4gdXNlciBjb250ZXh0LgoJICoKCSAqIFRhYnMgY2FuIGJlIGRlZmluZWQgZGVjbGFyaXRpdmVseSBpbiB0aGUgQWxvaGEgY29uZmlndXJhdGlvbiBpbiB0aGUKCSAqIGZvbGxvd2luZyBtYW5uZXI6CgkgKgoJICogICAgQWxvaGEuc2V0dGluZ3MudG9vbGJhcjogWwoJICogICAgICB7CgkgKiAgICAgICAgIGxhYmVsOiAnTGlzdHMnLAoJICogICAgICAgICBzaG93T246ICd1bCxvbCwqLnBhcmVudCguYWxvaGEtZWRpdGFibGUgdWwsLmFsb2hhLWVkaXRhYmxlIG9sKScsCgkgKiAgICAgICAgIGNvbXBvbmVudHM6IFsgWyAnb3JkZXJlZExpc3QnLCAndW5vcmRlcmVkTGlzdCcgXSBdCgkgKiAgICAgIH0KCSAqICAgIF0KCSAqCgkgKiBBbHRlcm5hdGl2ZWx5LCB0YWJzIGNhbiBhbHNvIGJlIGNyZWF0ZWQgaW1wZXJhdGl2ZWx5IGluIHRoaXMgd2F5OgoJICogbmV3IFRhYiggb3B0aW9ucywgY29tcG9uZW50cyApLgoJICoKCSAqIEBjbGFzcwoJICogQGV4dGVuZHMge0NvbnRhaW5lcn0KCSAqLwoJdmFyIFRhYiA9IENvbnRhaW5lci5leHRlbmQoewoKCQlfZWxlbUJ5U2xvdDogbnVsbCwKCQlfZ3JvdXBCeVNsb3Q6IG51bGwsCgkJX2dyb3VwQnlDb21wb25lbnQ6IG51bGwsCgoJCS8qKgoJCSAqIEFsbCB0aGF0IHRoaXMgY29uc3RydWN0b3IgZG9lcyBpcyBzYXZlIHRoZSBjb21wb25lbnRzIGFycmF5IGludG8gYQoJCSAqIGxvY2FsIHZhcmlhYmxlLCB0byBiZSB1c2VkIGR1cmluZyBpbnN0YW50aWFsaXphdGlvbi4KCQkgKgoJCSAqIEBwYXJhbSB7b2JqZWN0fSBzZXR0aW5ncwoJCSAqIEBwYXJhbSB7QXJyYXkuPEFycmF5PHN0cmluZz4+fSBjb21wb25lbnRzCgkJICogQGNvbnN0cnVjdG9yCgkJICovCgkJX2NvbnN0cnVjdG9yOiBmdW5jdGlvbiAoY29udGV4dCwgc2V0dGluZ3MsIGNvbXBvbmVudHMpIHsKCQkJdmFyIHRoaXNUYWIgPSB0aGlzLAoJCQkJaSwgaiwKCQkJCWVsZW0sCgkJCQlncm91cGVkQ29tcG9uZW50cywKCQkJCWdyb3VwLAoJCQkJZ3JvdXBQcm9wcywKCQkJCWNvbXBvbmVudE5hbWU7CgoJCQl0aGlzLl9lbGVtQnlTbG90ID0ge307CgkJCXRoaXMuX2dyb3VwQnlTbG90ID0ge307CgkJCXRoaXMuX2dyb3VwQnlDb21wb25lbnQgPSB7fTsKCQkJdGhpcy5fc2xvdHNMaXN0ID0gW107CgkJCXRoaXMuX3N1cGVyKGNvbnRleHQsIHNldHRpbmdzKTsKCgkJCXRoaXMuY29udGFpbmVyID0gc2V0dGluZ3MuY29udGFpbmVyOwoJCQl0aGlzLmxpc3QgPSB0aGlzLmNvbnRhaW5lci5kYXRhKCdsaXN0Jyk7CgkJCXRoaXMucGFuZWxzID0gdGhpcy5jb250YWluZXIuZGF0YSgncGFuZWxzJyk7CgkJCXRoaXMuaWQgPSAndGFiLXVpLWNvbnRhaW5lci0nICsgKCsraWRDb3VudGVyKTsKCQkJdGhpcy5wYW5lbCA9ICQoJzxkaXY+Jywge2lkIDogdGhpcy5pZCwgJ3Vuc2VsZWN0YWJsZSc6ICdvbid9KTsKCQkJdGhpcy5oYW5kbGUgPSAkKCc8bGk+PGEgaHJlZj0iJyArIGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvIy4qJC8sICcnKSArICcjJyArIHRoaXMuaWQgKyAnIj4nICsKCQkJCXNldHRpbmdzLmxhYmVsICsgJzwvYT48L2xpPicpOwoKCQkJZm9yIChpID0gMDsgaSA8IGNvbXBvbmVudHMubGVuZ3RoOyBpKyspIHsKCQkJCWlmICh0eXBlb2YgY29tcG9uZW50c1tpXSA9PT0gJ3N0cmluZycpIHsKCQkJCQlpZiAoMSA9PT0gY29tcG9uZW50c1tpXS5sZW5ndGggJiYgY29tcG9uZW50c1tpXS5jaGFyQ29kZUF0KDApID09PSAxMCkgewoJCQkJCQl0aGlzLnBhbmVsLmFwcGVuZCgnPGRpdj4nLCB7J3Vuc2VsZWN0YWJsZSc6ICdvbid9KTsKCQkJCQl9IGVsc2UgewoJCQkJCQllbGVtID0gJCgnPHNwYW4+Jywgeyd1bnNlbGVjdGFibGUnOiAnb24nfSk7CgkJCQkJCXRoaXMuX2VsZW1CeVNsb3RbY29tcG9uZW50c1tpXV0gPSBlbGVtOwoJCQkJCQl0aGlzLnBhbmVsLmFwcGVuZChlbGVtKTsKCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCS8vIEhpZGUgdGhlIGdyb3VwIHVudGlsIHRoZSBmaXJzdCBidXR0b24gaXMgYWRvcHRlZCBpbnRvIGl0LgoJCQkJCWdyb3VwID0gJCgnPGRpdj4nLCB7CgkJCQkJCSdjbGFzcyc6ICdhbG9oYS11aS1jb21wb25lbnQtZ3JvdXAgYWxvaGEtdWktaGlkZGVuJywKCQkJCQkJJ3Vuc2VsZWN0YWJsZSc6ICdvbicKCQkJCQl9KS5hcHBlbmRUbyh0aGlzLnBhbmVsKTsKCQkJCQlncm91cFByb3BzID0ge2VsZW1lbnQ6IGdyb3VwLCB2aXNpYmxlQ291bnRlcjogMH07CgkJCQkJZ3JvdXBlZENvbXBvbmVudHMgPSBjb21wb25lbnRzW2ldOwoJCQkJCWZvciAoaiA9IDA7IGogPCBncm91cGVkQ29tcG9uZW50cy5sZW5ndGg7IGorKykgewoJCQkJCQl0aGlzLl9ncm91cEJ5U2xvdFtncm91cGVkQ29tcG9uZW50c1tqXV0gPSBncm91cFByb3BzOwoJCQkJCQlpZiAoZ3JvdXBlZENvbXBvbmVudHNbal0gJiYKCQkJCQkJCTEgPT09IGdyb3VwZWRDb21wb25lbnRzW2pdLmxlbmd0aCAmJgoJCQkJCQkgICAgZ3JvdXBlZENvbXBvbmVudHNbal0uY2hhckNvZGVBdCgwKSA9PT0gMTApIHsKCQkJCQkJCWdyb3VwLmFwcGVuZCgkKCc8ZGl2PicsIHsndW5zZWxlY3RhYmxlJzogJ29uJ30pKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCWNvbXBvbmVudE5hbWUgPSBncm91cGVkQ29tcG9uZW50c1tqXTsKCQkJCQkJCWVsZW0gPSAkKCc8c3Bhbj4nLCB7J3Vuc2VsZWN0YWJsZSc6ICdvbid9KTsKCQkJCQkJCXRoaXMuX2VsZW1CeVNsb3RbZ3JvdXBlZENvbXBvbmVudHNbal1dID0gZWxlbTsKCQkJCQkJCWdyb3VwLmFwcGVuZChlbGVtKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJdGhpcy5wYW5lbC5hcHBlbmQoJCgnPGRpdj4nLCB7J2NsYXNzJzogJ2Fsb2hhLXVpLWNsZWFyJywgJ3Vuc2VsZWN0YWJsZSc6ICdvbid9KSk7CgkJCXRoaXMuaGFuZGxlLmFwcGVuZFRvKHRoaXMubGlzdCk7CgkJCXRoaXMucGFuZWwuYXBwZW5kVG8odGhpcy5wYW5lbHMpOwoJCQl0aGlzLmNvbnRhaW5lci50YWJzKCdyZWZyZXNoJyk7CgoJCQl2YXIgYWxvaGFUYWJzID0gc2V0dGluZ3MuY29udGFpbmVyLmRhdGEoJ2Fsb2hhLXRhYnMnKTsKCQkJdGhpcy5pbmRleCA9IGFsb2hhVGFicy5sZW5ndGg7CgkJCWFsb2hhVGFicy5wdXNoKHRoaXMpOwoJCX0sCgoJCWFkb3B0SW50bzogZnVuY3Rpb24gKHNsb3QsIGNvbXBvbmVudCkgewoJCQl2YXIgZWxlbSA9IHRoaXMuX2VsZW1CeVNsb3Rbc2xvdF0sCgkJCSAgICBncm91cDsKCQkJaWYgKCFlbGVtKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQkJc2xvdHRlZENvbXBvbmVudHNbc2xvdF0gPSBjb21wb25lbnQ7CgkJCWNvbXBvbmVudC5hZG9wdFBhcmVudCh0aGlzKTsKCQkJZWxlbS5hcHBlbmQoY29tcG9uZW50LmVsZW1lbnQpOwoJCQlncm91cCA9IHRoaXMuX2dyb3VwQnlTbG90W3Nsb3RdOwoJCQl0aGlzLl9zbG90c0xpc3QucHVzaChzbG90KTsKCQkJaWYgKGdyb3VwKSB7CgkJCQl0aGlzLl9ncm91cEJ5Q29tcG9uZW50W2NvbXBvbmVudC5pZF0gPSBncm91cDsKCQkJCWlmIChjb21wb25lbnQuaXNWaXNpYmxlKCkpIHsKCQkJCQlpZiAoIWdyb3VwLnZpc2libGVDb3VudGVyKSB7CgkJCQkJCWdyb3VwLmVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2Fsb2hhLXVpLWhpZGRlbicpOwoJCQkJCX0KCQkJCQlncm91cC52aXNpYmxlQ291bnRlciArPSAxOwoJCQkJfQoJCQl9CgkJCXJldHVybiB0cnVlOwoJCX0sCgoJCWZvcmVncm91bmQ6IGZ1bmN0aW9uICgpIHsKCQkJdGhpcy5jb250YWluZXIudGFicygnc2VsZWN0JywgdGhpcy5pbmRleCk7CgkJfSwKCgkJY2hpbGRGb3JlZ3JvdW5kOiBmdW5jdGlvbiAoY2hpbGRDb21wb25lbnQpIHsKCQkJdGhpcy5mb3JlZ3JvdW5kKCk7CgkJfSwKCgkJaGFzVmlzaWJsZUNvbXBvbmVudHM6IGZ1bmN0aW9uICgpIHsKCQkJdmFyIHNpYmxpbmdzID0gdGhpcy5fZWxlbUJ5U2xvdDsKCQkJdmFyIHNsb3Q7CgkJCWZvciAoc2xvdCBpbiBzaWJsaW5ncykgewoJCQkJaWYgKHNpYmxpbmdzLmhhc093blByb3BlcnR5KHNsb3QpICYmIHNsb3R0ZWRDb21wb25lbnRzW3Nsb3RdKSB7CgkJCQkJaWYgKHNsb3R0ZWRDb21wb25lbnRzW3Nsb3RdLnZpc2libGUpIHsKCQkJCQkJcmV0dXJuIHRydWU7CgkJCQkJfQoJCQkJfQoJCQl9CgkJCXJldHVybiBmYWxzZTsKCQl9LAoKCQljaGlsZFZpc2libGU6IGZ1bmN0aW9uIChjaGlsZENvbXBvbmVudCwgdmlzaWJsZSkgewoJCQlpZiAodmlzaWJsZSkgewoJCQkJY2hpbGRDb21wb25lbnQuY29udGFpbmVyLnNob3coKTsKCQkJfSBlbHNlIGlmICghY2hpbGRDb21wb25lbnQuY29udGFpbmVyLmhhc1Zpc2libGVDb21wb25lbnRzKCkpIHsKCQkJCWNoaWxkQ29tcG9uZW50LmNvbnRhaW5lci5oaWRlKCk7CgkJCX0KCQkJdmFyIGdyb3VwID0gdGhpcy5fZ3JvdXBCeUNvbXBvbmVudFtjaGlsZENvbXBvbmVudC5pZF07CgkJCWlmICghZ3JvdXApIHsKCQkJCXJldHVybjsKCQkJfQoJCQlpZiAodmlzaWJsZSkgewoJCQkJaWYgKDAgPT09IGdyb3VwLnZpc2libGVDb3VudGVyKSB7CgkJCQkJZ3JvdXAuZWxlbWVudC5yZW1vdmVDbGFzcygnYWxvaGEtdWktaGlkZGVuJyk7CgkJCQl9CgkJCQlncm91cC52aXNpYmxlQ291bnRlciArPSAxOwoJCQl9IGVsc2UgewoJCQkJZ3JvdXAudmlzaWJsZUNvdW50ZXIgLT0gMTsKCQkJCWlmICgwID09PSBncm91cC52aXNpYmxlQ291bnRlcikgewoJCQkJCWdyb3VwLmVsZW1lbnQuYWRkQ2xhc3MoJ2Fsb2hhLXVpLWhpZGRlbicpOwoJCQkJfQoJCQl9CgkJfSwKCgkJLyoqCgkJICogQG92ZXJyaWRlCgkJICovCgkJc2hvdzogZnVuY3Rpb24gKCkgewoJCQlpZiAoIXRoaXMubGlzdC5jaGlsZHJlbigpLmxlbmd0aCB8fCAhaGFzVmlzaWJsZUNvbXBvbmVudHModGhpcykpIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJdGhpcy5oYW5kbGUuc2hvdygpOwoJCQl0aGlzLnZpc2libGUgPSB0cnVlOwoKCQkJLy8gSGlkaW5nIGFsbCB0YWJzIG1heSBoaWRlIHRoZSB0b29sYmFyLCBzbyBzaG93aW5nIHRoZQoJCQkvLyBmaXJzdCB0YWIgYWdhaW4gbXVzdCBhbHNvIHNob3cgdGhlIHRvb2xiYXIuCgkJCXRoaXMuY29udGFpbmVyLnNob3coKTsKCgkJCS8vIElmIG5vIHRhYnMgYXJlIHNlbGVjdGVkLCB0aGVuIHNlbGVjdCB0aGUgdGFiIHdoaWNoIHdhcyBqdXN0IHNob3duLgoJCQlpZiAoIXRoaXMuY29udGFpbmVyLmZpbmQoJy51aS10YWJzLWFjdGl2ZScpLmxlbmd0aCB8fAoJCQkJdGhpcy5jb250YWluZXIudGFicygnb3B0aW9uJywgJ3NlbGVjdGVkJykgPT09IHRoaXMuaW5kZXgpIHsKCQkJCXRoaXMuZm9yZWdyb3VuZCgpOwoJCQl9CgkJfSwKCgkJLyoqCgkJICogQG92ZXJyaWRlCgkJICovCgkJaGlkZTogZnVuY3Rpb24gKCkgewoJCQl2YXIgdGFicyA9IHRoaXMubGlzdC5jaGlsZHJlbigpOwoJCQlpZiAoMCA9PT0gdGFicy5sZW5ndGgpIHsKCQkJCXJldHVybjsKCQkJfQoJCQl0aGlzLmhhbmRsZS5oaWRlKCk7CgkJCXRoaXMudmlzaWJsZSA9IGZhbHNlOwoKCQkJLy8gSWYgdGhlIHRhYiB3ZSBqdXN0IGhpZCB3YXMgdGhlIHNlbGVjdGVkIHRhYiwgdGhlbiB3ZSBuZWVkIHRvCgkJCS8vIHNlbGVjdCBhbm90aGVyIHRhYiBpbiBpdHMgc3RlYWQuICBXZSB3aWxsIHNlbGVjdCB0aGUgZmlyc3QKCQkJLy8gdmlzaWJsZSB0YWIgd2UgZmluZCwgb3IgZWxzZSB3ZSBkZXNlbGVjdCBhbGwgdGFicy4KCQkJaWYgKHRoaXMuaW5kZXggPT09IHRoaXMuY29udGFpbmVyLnRhYnMoJ29wdGlvbicsICdzZWxlY3RlZCcpKSB7CgkJCQl0YWJzID0gdGhpcy5jb250YWluZXIuZGF0YSgnYWxvaGEtdGFicycpOwoKCQkJCXZhciBpOwoJCQkJZm9yIChpID0gMDsgaSA8IHRhYnMubGVuZ3RoOyArK2kpIHsKCQkJCQlpZiAodGFic1tpXS52aXNpYmxlKSB7CgkJCQkJCXRoaXMuY29udGFpbmVyLnRhYnMoJ3NlbGVjdCcsIGkpOwoJCQkJCQlyZXR1cm47CgkJCQkJfQoJCQkJfQoKCQkJCS8vIFRoaXMgZG9lcyBub3Qgd29yay4uLgoJCQkJLy8gdGhpcy5jb250YWluZXIudGFicyggJ3NlbGVjdCcsIC0xICk7CgoJCQkJLy8gV2h5IGRvIHdlIHJlbW92ZSB0aGlzIGNsYXNzPwoJCQkJdGhpcy5oYW5kbGUucmVtb3ZlQ2xhc3MoJ3VpLXRhYnMtYWN0aXZlJyk7CgoJCQkJLy8gSXQgZG9lc24ndCBtYWtlIGFueSBzZW5zZSB0byBsZWF2ZSB0aGUgdG9vbGJhcgoJCQkJLy8gdmlzaWJsZSBhZnRlciBhbGwgdGFicyBoYXZlIGJlZW4gaGlkZGVuLgoJCQkJdGhpcy5jb250YWluZXIuaGlkZSgpOwoJCQl9CgkJfQoKCX0pOwoKCSQuZXh0ZW5kKFRhYiwgewoKCQkvKioKCQkgKiBDcmVhdGVzIGhvbGRpbmcgZWxlbWVudHMgZm9yIGpRdWVyeSBVSSBUYWJzIGZvciBhIHN1cmZhY2UuCgkJICoKCQkgKiBAc3RhdGljCgkJICogQHJldHVybiB7alF1ZXJ5LjxIVE1MRWxlbWVudD59IFRoZSBob2xkZXIgY29udGFpbmVyIG9uIHdoaWNoIHdlCgkJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludm9rZSBqUXVlcnkgVUkgVGFicyBvbmNlIGl0IGlzCgkJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlZCB3aXRoIHRhYiBjb250YWluZXJzLgoJCSAqLwoJCWNyZWF0ZUNvbnRhaW5lcjogZnVuY3Rpb24gKCkgewoJCQl2YXIgJGNvbnRhaW5lciA9ICQoJzxkaXY+Jywgeyd1bnNlbGVjdGFibGUnOiAnb24nfSk7CgkJCXZhciAkbGlzdCA9ICQoJzx1bD4nLCB7J3Vuc2VsZWN0YWJsZSc6ICdvbid9KS5hcHBlbmRUbygkY29udGFpbmVyKTsKCQkJdmFyICRwYW5lbHMgPSAkKCc8ZGl2PicsIHsndW5zZWxlY3RhYmxlJzogJ29uJ30pLmFwcGVuZFRvKCRjb250YWluZXIpOwoKCQkJJGNvbnRhaW5lcgoJCQkJLmRhdGEoJ2xpc3QnLCAkbGlzdCkKCQkJCS5kYXRhKCdwYW5lbHMnLCAkcGFuZWxzKQoJCQkJLmRhdGEoJ2Fsb2hhLXRhYnMnLCBbXSkKCQkJCS50YWJzKHsKCQkJCQlzZWxlY3Q6IGZ1bmN0aW9uIChldmVudCwgdWkpIHsKCQkJCQkJdmFyIHRhYnMgPSAkY29udGFpbmVyLmRhdGEoJ2Fsb2hhLXRhYnMnKTsKCQkJCQkJJGNvbnRhaW5lci5kYXRhKCdhbG9oYS1hY3RpdmUtY29udGFpbmVyJywgdGFic1t1aS5pbmRleF0pOwoJCQkJCQlQdWJTdWIucHViKCdhbG9oYS51aS5jb250YWluZXIuc2VsZWN0ZWQnLCB7ZGF0YTogdGFic1t1aS5pbmRleF19KTsKCQkJCQl9CgkJCQl9KTsKCgkJCXJldHVybiAkY29udGFpbmVyOwoJCX0KCX0pOwoKCXJldHVybiBUYWI7Cn0pOwo=",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 06:51:55 GMT",
                    "Content-Length": "8393",
                    "Date": "Thu, 06 Nov 2014 06:52:00 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}