{
    "url": "http://localhost:9999/EvanPalmer/Research/ServiceStack/TheService/packages/Microsoft.AspNet.ScriptManager.WebForms.4.5.6/content/Scripts/WebForms/WebForms.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>document.location.pathname</b> and written to <b>the 'open()' function of an XMLHttpRequest object</b> via the following statements:<ul><li>var action = theForm.action || document.location.pathname, fragmentIndex = action.indexOf('#');</li><li>action = action.substr(0, fragmentIndex);</li><li>action = encodeURI(path) + action.substr(queryIndex);</li><li>xmlRequest.open(\"POST\", action, true);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/EvanPalmer/Research/ServiceStack/TheService/packages/Microsoft.AspNet.ScriptManager.WebForms.4.5.6/content/Scripts/WebForms/WebForms.js",
                "path": "/EvanPalmer/Research/ServiceStack/TheService/packages/Microsoft.AspNet.ScriptManager.WebForms.4.5.6/content/Scripts/WebForms/WebForms.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9FdmFuUGFsbWVyL1Jlc2VhcmNoL1NlcnZpY2VTdGFjay9UaGVTZXJ2aWNlL3BhY2thZ2VzL01pY3Jvc29mdC5Bc3BOZXQuU2NyaXB0TWFuYWdlci5XZWJGb3Jtcy40LjUuNi9jb250ZW50L1NjcmlwdHMvV2ViRm9ybXMvV2ViRm9ybXMuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "Ly9DZG5QYXRoPWh0dHA6Ly9hamF4LmFzcG5ldGNkbi5jb20vYWpheC80LjUvNi9XZWJGb3Jtcy5qcwpmdW5jdGlvbiBXZWJGb3JtX1Bvc3RCYWNrT3B0aW9ucyhldmVudFRhcmdldCwgZXZlbnRBcmd1bWVudCwgdmFsaWRhdGlvbiwgdmFsaWRhdGlvbkdyb3VwLCBhY3Rpb25VcmwsIHRyYWNrRm9jdXMsIGNsaWVudFN1Ym1pdCkgewogICAgdGhpcy5ldmVudFRhcmdldCA9IGV2ZW50VGFyZ2V0OwogICAgdGhpcy5ldmVudEFyZ3VtZW50ID0gZXZlbnRBcmd1bWVudDsKICAgIHRoaXMudmFsaWRhdGlvbiA9IHZhbGlkYXRpb247CiAgICB0aGlzLnZhbGlkYXRpb25Hcm91cCA9IHZhbGlkYXRpb25Hcm91cDsKICAgIHRoaXMuYWN0aW9uVXJsID0gYWN0aW9uVXJsOwogICAgdGhpcy50cmFja0ZvY3VzID0gdHJhY2tGb2N1czsKICAgIHRoaXMuY2xpZW50U3VibWl0ID0gY2xpZW50U3VibWl0Owp9CmZ1bmN0aW9uIFdlYkZvcm1fRG9Qb3N0QmFja1dpdGhPcHRpb25zKG9wdGlvbnMpIHsKICAgIHZhciB2YWxpZGF0aW9uUmVzdWx0ID0gdHJ1ZTsKICAgIGlmIChvcHRpb25zLnZhbGlkYXRpb24pIHsKICAgICAgICBpZiAodHlwZW9mKFBhZ2VfQ2xpZW50VmFsaWRhdGUpID09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgdmFsaWRhdGlvblJlc3VsdCA9IFBhZ2VfQ2xpZW50VmFsaWRhdGUob3B0aW9ucy52YWxpZGF0aW9uR3JvdXApOwogICAgICAgIH0KICAgIH0KICAgIGlmICh2YWxpZGF0aW9uUmVzdWx0KSB7CiAgICAgICAgaWYgKCh0eXBlb2Yob3B0aW9ucy5hY3Rpb25VcmwpICE9ICJ1bmRlZmluZWQiKSAmJiAob3B0aW9ucy5hY3Rpb25VcmwgIT0gbnVsbCkgJiYgKG9wdGlvbnMuYWN0aW9uVXJsLmxlbmd0aCA+IDApKSB7CiAgICAgICAgICAgIHRoZUZvcm0uYWN0aW9uID0gb3B0aW9ucy5hY3Rpb25Vcmw7CiAgICAgICAgfQogICAgICAgIGlmIChvcHRpb25zLnRyYWNrRm9jdXMpIHsKICAgICAgICAgICAgdmFyIGxhc3RGb2N1cyA9IHRoZUZvcm0uZWxlbWVudHNbIl9fTEFTVEZPQ1VTIl07CiAgICAgICAgICAgIGlmICgodHlwZW9mKGxhc3RGb2N1cykgIT0gInVuZGVmaW5lZCIpICYmIChsYXN0Rm9jdXMgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgICAgICBsYXN0Rm9jdXMudmFsdWUgPSBvcHRpb25zLmV2ZW50VGFyZ2V0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YoYWN0aXZlKSAhPSAidW5kZWZpbmVkIikgJiYgKGFjdGl2ZSAhPSBudWxsKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZihhY3RpdmUuaWQpICE9ICJ1bmRlZmluZWQiKSAmJiAoYWN0aXZlLmlkICE9IG51bGwpICYmIChhY3RpdmUuaWQubGVuZ3RoID4gMCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RGb2N1cy52YWx1ZSA9IGFjdGl2ZS5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YoYWN0aXZlLm5hbWUpICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0Rm9jdXMudmFsdWUgPSBhY3RpdmUubmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmIChvcHRpb25zLmNsaWVudFN1Ym1pdCkgewogICAgICAgIF9fZG9Qb3N0QmFjayhvcHRpb25zLmV2ZW50VGFyZ2V0LCBvcHRpb25zLmV2ZW50QXJndW1lbnQpOwogICAgfQp9CnZhciBfX3BlbmRpbmdDYWxsYmFja3MgPSBuZXcgQXJyYXkoKTsKdmFyIF9fc3luY2hyb25vdXNDYWxsQmFja0luZGV4ID0gLTE7CmZ1bmN0aW9uIFdlYkZvcm1fRG9DYWxsYmFjayhldmVudFRhcmdldCwgZXZlbnRBcmd1bWVudCwgZXZlbnRDYWxsYmFjaywgY29udGV4dCwgZXJyb3JDYWxsYmFjaywgdXNlQXN5bmMpIHsKICAgIHZhciBwb3N0RGF0YSA9IF9fdGhlRm9ybVBvc3REYXRhICsKICAgICAgICAgICAgICAgICJfX0NBTExCQUNLSUQ9IiArIFdlYkZvcm1fRW5jb2RlQ2FsbGJhY2soZXZlbnRUYXJnZXQpICsKICAgICAgICAgICAgICAgICImX19DQUxMQkFDS1BBUkFNPSIgKyBXZWJGb3JtX0VuY29kZUNhbGxiYWNrKGV2ZW50QXJndW1lbnQpOwogICAgaWYgKHRoZUZvcm1bIl9fRVZFTlRWQUxJREFUSU9OIl0pIHsKICAgICAgICBwb3N0RGF0YSArPSAiJl9fRVZFTlRWQUxJREFUSU9OPSIgKyBXZWJGb3JtX0VuY29kZUNhbGxiYWNrKHRoZUZvcm1bIl9fRVZFTlRWQUxJREFUSU9OIl0udmFsdWUpOwogICAgfQogICAgdmFyIHhtbFJlcXVlc3QsZTsKICAgIHRyeSB7CiAgICAgICAgeG1sUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgfQogICAgY2F0Y2goZSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHhtbFJlcXVlc3QgPSBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICAgICAgICB9CiAgICAgICAgY2F0Y2goZSkgewogICAgICAgIH0KICAgIH0KICAgIHZhciBzZXRSZXF1ZXN0SGVhZGVyTWV0aG9kRXhpc3RzID0gdHJ1ZTsKICAgIHRyeSB7CiAgICAgICAgc2V0UmVxdWVzdEhlYWRlck1ldGhvZEV4aXN0cyA9ICh4bWxSZXF1ZXN0ICYmIHhtbFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcik7CiAgICB9CiAgICBjYXRjaChlKSB7fQogICAgdmFyIGNhbGxiYWNrID0gbmV3IE9iamVjdCgpOwogICAgY2FsbGJhY2suZXZlbnRDYWxsYmFjayA9IGV2ZW50Q2FsbGJhY2s7CiAgICBjYWxsYmFjay5jb250ZXh0ID0gY29udGV4dDsKICAgIGNhbGxiYWNrLmVycm9yQ2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrOwogICAgY2FsbGJhY2suYXN5bmMgPSB1c2VBc3luYzsKICAgIHZhciBjYWxsYmFja0luZGV4ID0gV2ViRm9ybV9GaWxsRmlyc3RBdmFpbGFibGVTbG90KF9fcGVuZGluZ0NhbGxiYWNrcywgY2FsbGJhY2spOwogICAgaWYgKCF1c2VBc3luYykgewogICAgICAgIGlmIChfX3N5bmNocm9ub3VzQ2FsbEJhY2tJbmRleCAhPSAtMSkgewogICAgICAgICAgICBfX3BlbmRpbmdDYWxsYmFja3NbX19zeW5jaHJvbm91c0NhbGxCYWNrSW5kZXhdID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgX19zeW5jaHJvbm91c0NhbGxCYWNrSW5kZXggPSBjYWxsYmFja0luZGV4OwogICAgfQogICAgaWYgKHNldFJlcXVlc3RIZWFkZXJNZXRob2RFeGlzdHMpIHsKICAgICAgICB4bWxSZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IFdlYkZvcm1fQ2FsbGJhY2tDb21wbGV0ZTsKICAgICAgICBjYWxsYmFjay54bWxSZXF1ZXN0ID0geG1sUmVxdWVzdDsKICAgICAgICAvLyBlLmcuIGh0dHA6CiAgICAgICAgdmFyIGFjdGlvbiA9IHRoZUZvcm0uYWN0aW9uIHx8IGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lLCBmcmFnbWVudEluZGV4ID0gYWN0aW9uLmluZGV4T2YoJyMnKTsKICAgICAgICBpZiAoZnJhZ21lbnRJbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgYWN0aW9uID0gYWN0aW9uLnN1YnN0cigwLCBmcmFnbWVudEluZGV4KTsKICAgICAgICB9CiAgICAgICAgaWYgKCFfX25vbk1TRE9NQnJvd3NlcikgewogICAgICAgICAgICB2YXIgcXVlcnlJbmRleCA9IGFjdGlvbi5pbmRleE9mKCc/Jyk7CiAgICAgICAgICAgIGlmIChxdWVyeUluZGV4ICE9PSAtMSkgewogICAgICAgICAgICAgICAgdmFyIHBhdGggPSBhY3Rpb24uc3Vic3RyKDAsIHF1ZXJ5SW5kZXgpOwogICAgICAgICAgICAgICAgaWYgKHBhdGguaW5kZXhPZigiJSIpID09PSAtMSkgewogICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IGVuY29kZVVSSShwYXRoKSArIGFjdGlvbi5zdWJzdHIocXVlcnlJbmRleCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAoYWN0aW9uLmluZGV4T2YoIiUiKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgIGFjdGlvbiA9IGVuY29kZVVSSShhY3Rpb24pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHhtbFJlcXVlc3Qub3BlbigiUE9TVCIsIGFjdGlvbiwgdHJ1ZSk7CiAgICAgICAgeG1sUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04Iik7CiAgICAgICAgeG1sUmVxdWVzdC5zZW5kKHBvc3REYXRhKTsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBjYWxsYmFjay54bWxSZXF1ZXN0ID0gbmV3IE9iamVjdCgpOwogICAgdmFyIGNhbGxiYWNrRnJhbWVJRCA9ICJfX0NBTExCQUNLRlJBTUUiICsgY2FsbGJhY2tJbmRleDsKICAgIHZhciB4bWxSZXF1ZXN0RnJhbWUgPSBkb2N1bWVudC5mcmFtZXNbY2FsbGJhY2tGcmFtZUlEXTsKICAgIGlmICgheG1sUmVxdWVzdEZyYW1lKSB7CiAgICAgICAgeG1sUmVxdWVzdEZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiSUZSQU1FIik7CiAgICAgICAgeG1sUmVxdWVzdEZyYW1lLndpZHRoID0gIjEiOwogICAgICAgIHhtbFJlcXVlc3RGcmFtZS5oZWlnaHQgPSAiMSI7CiAgICAgICAgeG1sUmVxdWVzdEZyYW1lLmZyYW1lQm9yZGVyID0gIjAiOwogICAgICAgIHhtbFJlcXVlc3RGcmFtZS5pZCA9IGNhbGxiYWNrRnJhbWVJRDsKICAgICAgICB4bWxSZXF1ZXN0RnJhbWUubmFtZSA9IGNhbGxiYWNrRnJhbWVJRDsKICAgICAgICB4bWxSZXF1ZXN0RnJhbWUuc3R5bGUucG9zaXRpb24gPSAiYWJzb2x1dGUiOwogICAgICAgIHhtbFJlcXVlc3RGcmFtZS5zdHlsZS50b3AgPSAiLTEwMHB4IgogICAgICAgIHhtbFJlcXVlc3RGcmFtZS5zdHlsZS5sZWZ0ID0gIi0xMDBweCI7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKGNhbGxCYWNrRnJhbWVVcmwpIHsKICAgICAgICAgICAgICAgIHhtbFJlcXVlc3RGcmFtZS5zcmMgPSBjYWxsQmFja0ZyYW1lVXJsOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNhdGNoKGUpIHt9CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh4bWxSZXF1ZXN0RnJhbWUpOwogICAgfQogICAgdmFyIGludGVydmFsID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCkgewogICAgICAgIHhtbFJlcXVlc3RGcmFtZSA9IGRvY3VtZW50LmZyYW1lc1tjYWxsYmFja0ZyYW1lSURdOwogICAgICAgIGlmICh4bWxSZXF1ZXN0RnJhbWUgJiYgeG1sUmVxdWVzdEZyYW1lLmRvY3VtZW50KSB7CiAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKGludGVydmFsKTsKICAgICAgICAgICAgeG1sUmVxdWVzdEZyYW1lLmRvY3VtZW50LndyaXRlKCIiKTsKICAgICAgICAgICAgeG1sUmVxdWVzdEZyYW1lLmRvY3VtZW50LmNsb3NlKCk7CiAgICAgICAgICAgIHhtbFJlcXVlc3RGcmFtZS5kb2N1bWVudC53cml0ZSgnPGh0bWw+PGJvZHk+PGZvcm0gbWV0aG9kPSJwb3N0Ij48aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfX0NBTExCQUNLTE9BRFNDUklQVCIgdmFsdWU9InQiPjwvZm9ybT48L2JvZHk+PC9odG1sPicpOwogICAgICAgICAgICB4bWxSZXF1ZXN0RnJhbWUuZG9jdW1lbnQuY2xvc2UoKTsKICAgICAgICAgICAgeG1sUmVxdWVzdEZyYW1lLmRvY3VtZW50LmZvcm1zWzBdLmFjdGlvbiA9IHRoZUZvcm0uYWN0aW9uOwogICAgICAgICAgICB2YXIgY291bnQgPSBfX3RoZUZvcm1Qb3N0Q29sbGVjdGlvbi5sZW5ndGg7CiAgICAgICAgICAgIHZhciBlbGVtZW50OwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBfX3RoZUZvcm1Qb3N0Q29sbGVjdGlvbltpXTsKICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkRWxlbWVudCA9IHhtbFJlcXVlc3RGcmFtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJJTlBVVCIpOwogICAgICAgICAgICAgICAgICAgIGZpZWxkRWxlbWVudC50eXBlID0gImhpZGRlbiI7CiAgICAgICAgICAgICAgICAgICAgZmllbGRFbGVtZW50Lm5hbWUgPSBlbGVtZW50Lm5hbWU7CiAgICAgICAgICAgICAgICAgICAgZmllbGRFbGVtZW50LnZhbHVlID0gZWxlbWVudC52YWx1ZTsKICAgICAgICAgICAgICAgICAgICB4bWxSZXF1ZXN0RnJhbWUuZG9jdW1lbnQuZm9ybXNbMF0uYXBwZW5kQ2hpbGQoZmllbGRFbGVtZW50KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgY2FsbGJhY2tJZEZpZWxkRWxlbWVudCA9IHhtbFJlcXVlc3RGcmFtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJJTlBVVCIpOwogICAgICAgICAgICBjYWxsYmFja0lkRmllbGRFbGVtZW50LnR5cGUgPSAiaGlkZGVuIjsKICAgICAgICAgICAgY2FsbGJhY2tJZEZpZWxkRWxlbWVudC5uYW1lID0gIl9fQ0FMTEJBQ0tJRCI7CiAgICAgICAgICAgIGNhbGxiYWNrSWRGaWVsZEVsZW1lbnQudmFsdWUgPSBldmVudFRhcmdldDsKICAgICAgICAgICAgeG1sUmVxdWVzdEZyYW1lLmRvY3VtZW50LmZvcm1zWzBdLmFwcGVuZENoaWxkKGNhbGxiYWNrSWRGaWVsZEVsZW1lbnQpOwogICAgICAgICAgICB2YXIgY2FsbGJhY2tQYXJhbUZpZWxkRWxlbWVudCA9IHhtbFJlcXVlc3RGcmFtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJJTlBVVCIpOwogICAgICAgICAgICBjYWxsYmFja1BhcmFtRmllbGRFbGVtZW50LnR5cGUgPSAiaGlkZGVuIjsKICAgICAgICAgICAgY2FsbGJhY2tQYXJhbUZpZWxkRWxlbWVudC5uYW1lID0gIl9fQ0FMTEJBQ0tQQVJBTSI7CiAgICAgICAgICAgIGNhbGxiYWNrUGFyYW1GaWVsZEVsZW1lbnQudmFsdWUgPSBldmVudEFyZ3VtZW50OwogICAgICAgICAgICB4bWxSZXF1ZXN0RnJhbWUuZG9jdW1lbnQuZm9ybXNbMF0uYXBwZW5kQ2hpbGQoY2FsbGJhY2tQYXJhbUZpZWxkRWxlbWVudCk7CiAgICAgICAgICAgIGlmICh0aGVGb3JtWyJfX0VWRU5UVkFMSURBVElPTiJdKSB7CiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2tWYWxpZGF0aW9uRmllbGRFbGVtZW50ID0geG1sUmVxdWVzdEZyYW1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIklOUFVUIik7CiAgICAgICAgICAgICAgICBjYWxsYmFja1ZhbGlkYXRpb25GaWVsZEVsZW1lbnQudHlwZSA9ICJoaWRkZW4iOwogICAgICAgICAgICAgICAgY2FsbGJhY2tWYWxpZGF0aW9uRmllbGRFbGVtZW50Lm5hbWUgPSAiX19FVkVOVFZBTElEQVRJT04iOwogICAgICAgICAgICAgICAgY2FsbGJhY2tWYWxpZGF0aW9uRmllbGRFbGVtZW50LnZhbHVlID0gdGhlRm9ybVsiX19FVkVOVFZBTElEQVRJT04iXS52YWx1ZTsKICAgICAgICAgICAgICAgIHhtbFJlcXVlc3RGcmFtZS5kb2N1bWVudC5mb3Jtc1swXS5hcHBlbmRDaGlsZChjYWxsYmFja1ZhbGlkYXRpb25GaWVsZEVsZW1lbnQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBjYWxsYmFja0luZGV4RmllbGRFbGVtZW50ID0geG1sUmVxdWVzdEZyYW1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIklOUFVUIik7CiAgICAgICAgICAgIGNhbGxiYWNrSW5kZXhGaWVsZEVsZW1lbnQudHlwZSA9ICJoaWRkZW4iOwogICAgICAgICAgICBjYWxsYmFja0luZGV4RmllbGRFbGVtZW50Lm5hbWUgPSAiX19DQUxMQkFDS0lOREVYIjsKICAgICAgICAgICAgY2FsbGJhY2tJbmRleEZpZWxkRWxlbWVudC52YWx1ZSA9IGNhbGxiYWNrSW5kZXg7CiAgICAgICAgICAgIHhtbFJlcXVlc3RGcmFtZS5kb2N1bWVudC5mb3Jtc1swXS5hcHBlbmRDaGlsZChjYWxsYmFja0luZGV4RmllbGRFbGVtZW50KTsKICAgICAgICAgICAgeG1sUmVxdWVzdEZyYW1lLmRvY3VtZW50LmZvcm1zWzBdLnN1Ym1pdCgpOwogICAgICAgIH0KICAgIH0sIDEwKTsKfQpmdW5jdGlvbiBXZWJGb3JtX0NhbGxiYWNrQ29tcGxldGUoKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9fcGVuZGluZ0NhbGxiYWNrcy5sZW5ndGg7IGkrKykgewogICAgICAgIGNhbGxiYWNrT2JqZWN0ID0gX19wZW5kaW5nQ2FsbGJhY2tzW2ldOwogICAgICAgIGlmIChjYWxsYmFja09iamVjdCAmJiBjYWxsYmFja09iamVjdC54bWxSZXF1ZXN0ICYmIChjYWxsYmFja09iamVjdC54bWxSZXF1ZXN0LnJlYWR5U3RhdGUgPT0gNCkpIHsKICAgICAgICAgICAgaWYgKCFfX3BlbmRpbmdDYWxsYmFja3NbaV0uYXN5bmMpIHsKICAgICAgICAgICAgICAgIF9fc3luY2hyb25vdXNDYWxsQmFja0luZGV4ID0gLTE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX19wZW5kaW5nQ2FsbGJhY2tzW2ldID0gbnVsbDsKICAgICAgICAgICAgdmFyIGNhbGxiYWNrRnJhbWVJRCA9ICJfX0NBTExCQUNLRlJBTUUiICsgaTsKICAgICAgICAgICAgdmFyIHhtbFJlcXVlc3RGcmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNhbGxiYWNrRnJhbWVJRCk7CiAgICAgICAgICAgIGlmICh4bWxSZXF1ZXN0RnJhbWUpIHsKICAgICAgICAgICAgICAgIHhtbFJlcXVlc3RGcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHhtbFJlcXVlc3RGcmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgV2ViRm9ybV9FeGVjdXRlQ2FsbGJhY2soY2FsbGJhY2tPYmplY3QpOwogICAgICAgIH0KICAgIH0KfQpmdW5jdGlvbiBXZWJGb3JtX0V4ZWN1dGVDYWxsYmFjayhjYWxsYmFja09iamVjdCkgewogICAgdmFyIHJlc3BvbnNlID0gY2FsbGJhY2tPYmplY3QueG1sUmVxdWVzdC5yZXNwb25zZVRleHQ7CiAgICBpZiAocmVzcG9uc2UuY2hhckF0KDApID09ICJzIikgewogICAgICAgIGlmICgodHlwZW9mKGNhbGxiYWNrT2JqZWN0LmV2ZW50Q2FsbGJhY2spICE9ICJ1bmRlZmluZWQiKSAmJiAoY2FsbGJhY2tPYmplY3QuZXZlbnRDYWxsYmFjayAhPSBudWxsKSkgewogICAgICAgICAgICBjYWxsYmFja09iamVjdC5ldmVudENhbGxiYWNrKHJlc3BvbnNlLnN1YnN0cmluZygxKSwgY2FsbGJhY2tPYmplY3QuY29udGV4dCk7CiAgICAgICAgfQogICAgfQogICAgZWxzZSBpZiAocmVzcG9uc2UuY2hhckF0KDApID09ICJlIikgewogICAgICAgIGlmICgodHlwZW9mKGNhbGxiYWNrT2JqZWN0LmVycm9yQ2FsbGJhY2spICE9ICJ1bmRlZmluZWQiKSAmJiAoY2FsbGJhY2tPYmplY3QuZXJyb3JDYWxsYmFjayAhPSBudWxsKSkgewogICAgICAgICAgICBjYWxsYmFja09iamVjdC5lcnJvckNhbGxiYWNrKHJlc3BvbnNlLnN1YnN0cmluZygxKSwgY2FsbGJhY2tPYmplY3QuY29udGV4dCk7CiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CiAgICAgICAgdmFyIHNlcGFyYXRvckluZGV4ID0gcmVzcG9uc2UuaW5kZXhPZigifCIpOwogICAgICAgIGlmIChzZXBhcmF0b3JJbmRleCAhPSAtMSkgewogICAgICAgICAgICB2YXIgdmFsaWRhdGlvbkZpZWxkTGVuZ3RoID0gcGFyc2VJbnQocmVzcG9uc2Uuc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KSk7CiAgICAgICAgICAgIGlmICghaXNOYU4odmFsaWRhdGlvbkZpZWxkTGVuZ3RoKSkgewogICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRpb25GaWVsZCA9IHJlc3BvbnNlLnN1YnN0cmluZyhzZXBhcmF0b3JJbmRleCArIDEsIHNlcGFyYXRvckluZGV4ICsgdmFsaWRhdGlvbkZpZWxkTGVuZ3RoICsgMSk7CiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkZpZWxkICE9ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRpb25GaWVsZEVsZW1lbnQgPSB0aGVGb3JtWyJfX0VWRU5UVkFMSURBVElPTiJdOwogICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWRhdGlvbkZpZWxkRWxlbWVudCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uRmllbGRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiSU5QVVQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbkZpZWxkRWxlbWVudC50eXBlID0gImhpZGRlbiI7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25GaWVsZEVsZW1lbnQubmFtZSA9ICJfX0VWRU5UVkFMSURBVElPTiI7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZUZvcm0uYXBwZW5kQ2hpbGQodmFsaWRhdGlvbkZpZWxkRWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25GaWVsZEVsZW1lbnQudmFsdWUgPSB2YWxpZGF0aW9uRmllbGQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZihjYWxsYmFja09iamVjdC5ldmVudENhbGxiYWNrKSAhPSAidW5kZWZpbmVkIikgJiYgKGNhbGxiYWNrT2JqZWN0LmV2ZW50Q2FsbGJhY2sgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFja09iamVjdC5ldmVudENhbGxiYWNrKHJlc3BvbnNlLnN1YnN0cmluZyhzZXBhcmF0b3JJbmRleCArIHZhbGlkYXRpb25GaWVsZExlbmd0aCArIDEpLCBjYWxsYmFja09iamVjdC5jb250ZXh0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQpmdW5jdGlvbiBXZWJGb3JtX0ZpbGxGaXJzdEF2YWlsYWJsZVNsb3QoYXJyYXksIGVsZW1lbnQpIHsKICAgIHZhciBpOwogICAgZm9yIChpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKCFhcnJheVtpXSkgYnJlYWs7CiAgICB9CiAgICBhcnJheVtpXSA9IGVsZW1lbnQ7CiAgICByZXR1cm4gaTsKfQp2YXIgX19ub25NU0RPTUJyb3dzZXIgPSAod2luZG93Lm5hdmlnYXRvci5hcHBOYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZXhwbG9yZXInKSA9PSAtMSk7CnZhciBfX3RoZUZvcm1Qb3N0RGF0YSA9ICIiOwp2YXIgX190aGVGb3JtUG9zdENvbGxlY3Rpb24gPSBuZXcgQXJyYXkoKTsKdmFyIF9fY2FsbGJhY2tUZXh0VHlwZXMgPSAvXih0ZXh0fHBhc3N3b3JkfGhpZGRlbnxzZWFyY2h8dGVsfHVybHxlbWFpbHxudW1iZXJ8cmFuZ2V8Y29sb3J8ZGF0ZXRpbWV8ZGF0ZXxtb250aHx3ZWVrfHRpbWV8ZGF0ZXRpbWUtbG9jYWwpJC9pOwpmdW5jdGlvbiBXZWJGb3JtX0luaXRDYWxsYmFjaygpIHsKICAgIHZhciBmb3JtRWxlbWVudHMgPSB0aGVGb3JtLmVsZW1lbnRzLAogICAgICAgIGNvdW50ID0gZm9ybUVsZW1lbnRzLmxlbmd0aCwKICAgICAgICBlbGVtZW50OwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgICAgZWxlbWVudCA9IGZvcm1FbGVtZW50c1tpXTsKICAgICAgICB2YXIgdGFnTmFtZSA9IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgIGlmICh0YWdOYW1lID09ICJpbnB1dCIpIHsKICAgICAgICAgICAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7CiAgICAgICAgICAgIGlmICgoX19jYWxsYmFja1RleHRUeXBlcy50ZXN0KHR5cGUpIHx8ICgodHlwZSA9PSAiY2hlY2tib3giIHx8IHR5cGUgPT0gInJhZGlvIikgJiYgZWxlbWVudC5jaGVja2VkKSkKICAgICAgICAgICAgICAgICYmIChlbGVtZW50LmlkICE9ICJfX0VWRU5UVkFMSURBVElPTiIpKSB7CiAgICAgICAgICAgICAgICBXZWJGb3JtX0luaXRDYWxsYmFja0FkZEZpZWxkKGVsZW1lbnQubmFtZSwgZWxlbWVudC52YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAodGFnTmFtZSA9PSAic2VsZWN0IikgewogICAgICAgICAgICB2YXIgc2VsZWN0Q291bnQgPSBlbGVtZW50Lm9wdGlvbnMubGVuZ3RoOwogICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGVjdENvdW50OyBqKyspIHsKICAgICAgICAgICAgICAgIHZhciBzZWxlY3RDaGlsZCA9IGVsZW1lbnQub3B0aW9uc1tqXTsKICAgICAgICAgICAgICAgIGlmIChzZWxlY3RDaGlsZC5zZWxlY3RlZCA9PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgV2ViRm9ybV9Jbml0Q2FsbGJhY2tBZGRGaWVsZChlbGVtZW50Lm5hbWUsIGVsZW1lbnQudmFsdWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKHRhZ05hbWUgPT0gInRleHRhcmVhIikgewogICAgICAgICAgICBXZWJGb3JtX0luaXRDYWxsYmFja0FkZEZpZWxkKGVsZW1lbnQubmFtZSwgZWxlbWVudC52YWx1ZSk7CiAgICAgICAgfQogICAgfQp9CmZ1bmN0aW9uIFdlYkZvcm1fSW5pdENhbGxiYWNrQWRkRmllbGQobmFtZSwgdmFsdWUpIHsKICAgIHZhciBuYW1lVmFsdWUgPSBuZXcgT2JqZWN0KCk7CiAgICBuYW1lVmFsdWUubmFtZSA9IG5hbWU7CiAgICBuYW1lVmFsdWUudmFsdWUgPSB2YWx1ZTsKICAgIF9fdGhlRm9ybVBvc3RDb2xsZWN0aW9uW19fdGhlRm9ybVBvc3RDb2xsZWN0aW9uLmxlbmd0aF0gPSBuYW1lVmFsdWU7CiAgICBfX3RoZUZvcm1Qb3N0RGF0YSArPSBXZWJGb3JtX0VuY29kZUNhbGxiYWNrKG5hbWUpICsgIj0iICsgV2ViRm9ybV9FbmNvZGVDYWxsYmFjayh2YWx1ZSkgKyAiJiI7Cn0KZnVuY3Rpb24gV2ViRm9ybV9FbmNvZGVDYWxsYmFjayhwYXJhbWV0ZXIpIHsKICAgIGlmIChlbmNvZGVVUklDb21wb25lbnQpIHsKICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtZXRlcik7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICByZXR1cm4gZXNjYXBlKHBhcmFtZXRlcik7CiAgICB9Cn0KdmFyIF9fZGlzYWJsZWRDb250cm9sQXJyYXkgPSBuZXcgQXJyYXkoKTsKZnVuY3Rpb24gV2ViRm9ybV9SZUVuYWJsZUNvbnRyb2xzKCkgewogICAgaWYgKHR5cGVvZihfX2VuYWJsZWRDb250cm9sQXJyYXkpID09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgdmFyIGRpc2FibGVkSW5kZXggPSAwOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfX2VuYWJsZWRDb250cm9sQXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgYzsKICAgICAgICBpZiAoX19ub25NU0RPTUJyb3dzZXIpIHsKICAgICAgICAgICAgYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKF9fZW5hYmxlZENvbnRyb2xBcnJheVtpXSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBjID0gZG9jdW1lbnQuYWxsW19fZW5hYmxlZENvbnRyb2xBcnJheVtpXV07CiAgICAgICAgfQogICAgICAgIGlmICgodHlwZW9mKGMpICE9ICJ1bmRlZmluZWQiKSAmJiAoYyAhPSBudWxsKSAmJiAoYy5kaXNhYmxlZCA9PSB0cnVlKSkgewogICAgICAgICAgICBjLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgIF9fZGlzYWJsZWRDb250cm9sQXJyYXlbZGlzYWJsZWRJbmRleCsrXSA9IGM7CiAgICAgICAgfQogICAgfQogICAgc2V0VGltZW91dCgiV2ViRm9ybV9SZURpc2FibGVDb250cm9scygpIiwgMCk7CiAgICByZXR1cm4gdHJ1ZTsKfQpmdW5jdGlvbiBXZWJGb3JtX1JlRGlzYWJsZUNvbnRyb2xzKCkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfX2Rpc2FibGVkQ29udHJvbEFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgX19kaXNhYmxlZENvbnRyb2xBcnJheVtpXS5kaXNhYmxlZCA9IHRydWU7CiAgICB9Cn0KZnVuY3Rpb24gV2ViRm9ybV9TaW11bGF0ZUNsaWNrKGVsZW1lbnQsIGV2ZW50KSB7CiAgICB2YXIgY2xpY2tFdmVudDsKICAgIGlmIChlbGVtZW50KSB7CiAgICAgICAgaWYgKGVsZW1lbnQuY2xpY2spIHsKICAgICAgICAgICAgZWxlbWVudC5jbGljaygpOwogICAgICAgIH0gZWxzZSB7IAogICAgICAgICAgICBjbGlja0V2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoIk1vdXNlRXZlbnRzIik7CiAgICAgICAgICAgIGNsaWNrRXZlbnQuaW5pdE1vdXNlRXZlbnQoImNsaWNrIiwgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAwLCAwLCAwLCAwLCAwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7CiAgICAgICAgICAgIGlmICghZWxlbWVudC5kaXNwYXRjaEV2ZW50KGNsaWNrRXZlbnQpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlOwogICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHsKICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB0cnVlOwp9CmZ1bmN0aW9uIFdlYkZvcm1fRmlyZURlZmF1bHRCdXR0b24oZXZlbnQsIHRhcmdldCkgewogICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMTMpIHsKICAgICAgICB2YXIgc3JjID0gZXZlbnQuc3JjRWxlbWVudCB8fCBldmVudC50YXJnZXQ7CiAgICAgICAgaWYgKHNyYyAmJgogICAgICAgICAgICAoKHNyYy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gImlucHV0IikgJiYKICAgICAgICAgICAgIChzcmMudHlwZS50b0xvd2VyQ2FzZSgpID09ICJzdWJtaXQiIHx8IHNyYy50eXBlLnRvTG93ZXJDYXNlKCkgPT0gImJ1dHRvbiIpKSB8fAogICAgICAgICAgICAoKHNyYy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gImEiKSAmJgogICAgICAgICAgICAgKHNyYy5ocmVmICE9IG51bGwpICYmIChzcmMuaHJlZiAhPSAiIikpIHx8CiAgICAgICAgICAgIChzcmMudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICJ0ZXh0YXJlYSIpKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICB2YXIgZGVmYXVsdEJ1dHRvbjsKICAgICAgICBpZiAoX19ub25NU0RPTUJyb3dzZXIpIHsKICAgICAgICAgICAgZGVmYXVsdEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBkZWZhdWx0QnV0dG9uID0gZG9jdW1lbnQuYWxsW3RhcmdldF07CiAgICAgICAgfQogICAgICAgIGlmIChkZWZhdWx0QnV0dG9uKSB7CiAgICAgICAgICAgIHJldHVybiBXZWJGb3JtX1NpbXVsYXRlQ2xpY2soZGVmYXVsdEJ1dHRvbiwgZXZlbnQpOwogICAgICAgIH0gCiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKfQpmdW5jdGlvbiBXZWJGb3JtX0dldFNjcm9sbFgoKSB7CiAgICBpZiAoX19ub25NU0RPTUJyb3dzZXIpIHsKICAgICAgICByZXR1cm4gd2luZG93LnBhZ2VYT2Zmc2V0OwogICAgfQogICAgZWxzZSB7CiAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCkgewogICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LmJvZHkpIHsKICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdDsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gMDsKfQpmdW5jdGlvbiBXZWJGb3JtX0dldFNjcm9sbFkoKSB7CiAgICBpZiAoX19ub25NU0RPTUJyb3dzZXIpIHsKICAgICAgICByZXR1cm4gd2luZG93LnBhZ2VZT2Zmc2V0OwogICAgfQogICAgZWxzZSB7CiAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSB7CiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChkb2N1bWVudC5ib2R5KSB7CiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gMDsKfQpmdW5jdGlvbiBXZWJGb3JtX1NhdmVTY3JvbGxQb3NpdGlvblN1Ym1pdCgpIHsKICAgIGlmIChfX25vbk1TRE9NQnJvd3NlcikgewogICAgICAgIHRoZUZvcm0uZWxlbWVudHNbJ19fU0NST0xMUE9TSVRJT05ZJ10udmFsdWUgPSB3aW5kb3cucGFnZVlPZmZzZXQ7CiAgICAgICAgdGhlRm9ybS5lbGVtZW50c1snX19TQ1JPTExQT1NJVElPTlgnXS52YWx1ZSA9IHdpbmRvdy5wYWdlWE9mZnNldDsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHRoZUZvcm0uX19TQ1JPTExQT1NJVElPTlgudmFsdWUgPSBXZWJGb3JtX0dldFNjcm9sbFgoKTsKICAgICAgICB0aGVGb3JtLl9fU0NST0xMUE9TSVRJT05ZLnZhbHVlID0gV2ViRm9ybV9HZXRTY3JvbGxZKCk7CiAgICB9CiAgICBpZiAoKHR5cGVvZih0aGlzLm9sZFN1Ym1pdCkgIT0gInVuZGVmaW5lZCIpICYmICh0aGlzLm9sZFN1Ym1pdCAhPSBudWxsKSkgewogICAgICAgIHJldHVybiB0aGlzLm9sZFN1Ym1pdCgpOwogICAgfQogICAgcmV0dXJuIHRydWU7Cn0KZnVuY3Rpb24gV2ViRm9ybV9TYXZlU2Nyb2xsUG9zaXRpb25PblN1Ym1pdCgpIHsKICAgIHRoZUZvcm0uX19TQ1JPTExQT1NJVElPTlgudmFsdWUgPSBXZWJGb3JtX0dldFNjcm9sbFgoKTsKICAgIHRoZUZvcm0uX19TQ1JPTExQT1NJVElPTlkudmFsdWUgPSBXZWJGb3JtX0dldFNjcm9sbFkoKTsKICAgIGlmICgodHlwZW9mKHRoaXMub2xkT25TdWJtaXQpICE9ICJ1bmRlZmluZWQiKSAmJiAodGhpcy5vbGRPblN1Ym1pdCAhPSBudWxsKSkgewogICAgICAgIHJldHVybiB0aGlzLm9sZE9uU3VibWl0KCk7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKfQpmdW5jdGlvbiBXZWJGb3JtX1Jlc3RvcmVTY3JvbGxQb3NpdGlvbigpIHsKICAgIGlmIChfX25vbk1TRE9NQnJvd3NlcikgewogICAgICAgIHdpbmRvdy5zY3JvbGxUbyh0aGVGb3JtLmVsZW1lbnRzWydfX1NDUk9MTFBPU0lUSU9OWCddLnZhbHVlLCB0aGVGb3JtLmVsZW1lbnRzWydfX1NDUk9MTFBPU0lUSU9OWSddLnZhbHVlKTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHdpbmRvdy5zY3JvbGxUbyh0aGVGb3JtLl9fU0NST0xMUE9TSVRJT05YLnZhbHVlLCB0aGVGb3JtLl9fU0NST0xMUE9TSVRJT05ZLnZhbHVlKTsKICAgIH0KICAgIGlmICgodHlwZW9mKHRoZUZvcm0ub2xkT25Mb2FkKSAhPSAidW5kZWZpbmVkIikgJiYgKHRoZUZvcm0ub2xkT25Mb2FkICE9IG51bGwpKSB7CiAgICAgICAgcmV0dXJuIHRoZUZvcm0ub2xkT25Mb2FkKCk7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKfQpmdW5jdGlvbiBXZWJGb3JtX1RleHRCb3hLZXlIYW5kbGVyKGV2ZW50KSB7CiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSAxMykgewogICAgICAgIHZhciB0YXJnZXQ7CiAgICAgICAgaWYgKF9fbm9uTVNET01Ccm93c2VyKSB7CiAgICAgICAgICAgIHRhcmdldCA9IGV2ZW50LnRhcmdldDsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHRhcmdldCA9IGV2ZW50LnNyY0VsZW1lbnQ7CiAgICAgICAgfQogICAgICAgIGlmICgodHlwZW9mKHRhcmdldCkgIT0gInVuZGVmaW5lZCIpICYmICh0YXJnZXQgIT0gbnVsbCkpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZih0YXJnZXQub25jaGFuZ2UpICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICB0YXJnZXQub25jaGFuZ2UoKTsKICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7CiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0cnVlOwp9CmZ1bmN0aW9uIFdlYkZvcm1fVHJpbVN0cmluZyh2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL15ccyt8XHMrJC9nLCAnJykKfQpmdW5jdGlvbiBXZWJGb3JtX0FwcGVuZFRvQ2xhc3NOYW1lKGVsZW1lbnQsIGNsYXNzTmFtZSkgewogICAgdmFyIGN1cnJlbnRDbGFzc05hbWUgPSAnICcgKyBXZWJGb3JtX1RyaW1TdHJpbmcoZWxlbWVudC5jbGFzc05hbWUpICsgJyAnOwogICAgY2xhc3NOYW1lID0gV2ViRm9ybV9UcmltU3RyaW5nKGNsYXNzTmFtZSk7CiAgICB2YXIgaW5kZXggPSBjdXJyZW50Q2xhc3NOYW1lLmluZGV4T2YoJyAnICsgY2xhc3NOYW1lICsgJyAnKTsKICAgIGlmIChpbmRleCA9PT0gLTEpIHsKICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IChlbGVtZW50LmNsYXNzTmFtZSA9PT0gJycpID8gY2xhc3NOYW1lIDogZWxlbWVudC5jbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7CiAgICB9Cn0KZnVuY3Rpb24gV2ViRm9ybV9SZW1vdmVDbGFzc05hbWUoZWxlbWVudCwgY2xhc3NOYW1lKSB7CiAgICB2YXIgY3VycmVudENsYXNzTmFtZSA9ICcgJyArIFdlYkZvcm1fVHJpbVN0cmluZyhlbGVtZW50LmNsYXNzTmFtZSkgKyAnICc7CiAgICBjbGFzc05hbWUgPSBXZWJGb3JtX1RyaW1TdHJpbmcoY2xhc3NOYW1lKTsKICAgIHZhciBpbmRleCA9IGN1cnJlbnRDbGFzc05hbWUuaW5kZXhPZignICcgKyBjbGFzc05hbWUgKyAnICcpOwogICAgaWYgKGluZGV4ID49IDApIHsKICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IFdlYkZvcm1fVHJpbVN0cmluZyhjdXJyZW50Q2xhc3NOYW1lLnN1YnN0cmluZygwLCBpbmRleCkgKyAnICcgKwogICAgICAgICAgICBjdXJyZW50Q2xhc3NOYW1lLnN1YnN0cmluZyhpbmRleCArIGNsYXNzTmFtZS5sZW5ndGggKyAxLCBjdXJyZW50Q2xhc3NOYW1lLmxlbmd0aCkpOwogICAgfQp9CmZ1bmN0aW9uIFdlYkZvcm1fR2V0RWxlbWVudEJ5SWQoZWxlbWVudElkKSB7CiAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQpIHsKICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudElkKTsKICAgIH0KICAgIGVsc2UgaWYgKGRvY3VtZW50LmFsbCkgewogICAgICAgIHJldHVybiBkb2N1bWVudC5hbGxbZWxlbWVudElkXTsKICAgIH0KICAgIGVsc2UgcmV0dXJuIG51bGw7Cn0KZnVuY3Rpb24gV2ViRm9ybV9HZXRFbGVtZW50QnlUYWdOYW1lKGVsZW1lbnQsIHRhZ05hbWUpIHsKICAgIHZhciBlbGVtZW50cyA9IFdlYkZvcm1fR2V0RWxlbWVudHNCeVRhZ05hbWUoZWxlbWVudCwgdGFnTmFtZSk7CiAgICBpZiAoZWxlbWVudHMgJiYgZWxlbWVudHMubGVuZ3RoID4gMCkgewogICAgICAgIHJldHVybiBlbGVtZW50c1swXTsKICAgIH0KICAgIGVsc2UgcmV0dXJuIG51bGw7Cn0KZnVuY3Rpb24gV2ViRm9ybV9HZXRFbGVtZW50c0J5VGFnTmFtZShlbGVtZW50LCB0YWdOYW1lKSB7CiAgICBpZiAoZWxlbWVudCAmJiB0YWdOYW1lKSB7CiAgICAgICAgaWYgKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSk7CiAgICAgICAgfQogICAgICAgIGlmIChlbGVtZW50LmFsbCAmJiBlbGVtZW50LmFsbC50YWdzKSB7CiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmFsbC50YWdzKHRhZ05hbWUpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9CmZ1bmN0aW9uIFdlYkZvcm1fR2V0RWxlbWVudERpcihlbGVtZW50KSB7CiAgICBpZiAoZWxlbWVudCkgewogICAgICAgIGlmIChlbGVtZW50LmRpcikgewogICAgICAgICAgICByZXR1cm4gZWxlbWVudC5kaXI7CiAgICAgICAgfQogICAgICAgIHJldHVybiBXZWJGb3JtX0dldEVsZW1lbnREaXIoZWxlbWVudC5wYXJlbnROb2RlKTsKICAgIH0KICAgIHJldHVybiAibHRyIjsKfQpmdW5jdGlvbiBXZWJGb3JtX0dldEVsZW1lbnRQb3NpdGlvbihlbGVtZW50KSB7CiAgICB2YXIgcmVzdWx0ID0gbmV3IE9iamVjdCgpOwogICAgcmVzdWx0LnggPSAwOwogICAgcmVzdWx0LnkgPSAwOwogICAgcmVzdWx0LndpZHRoID0gMDsKICAgIHJlc3VsdC5oZWlnaHQgPSAwOwogICAgaWYgKGVsZW1lbnQub2Zmc2V0UGFyZW50KSB7CiAgICAgICAgcmVzdWx0LnggPSBlbGVtZW50Lm9mZnNldExlZnQ7CiAgICAgICAgcmVzdWx0LnkgPSBlbGVtZW50Lm9mZnNldFRvcDsKICAgICAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7CiAgICAgICAgd2hpbGUgKHBhcmVudCkgewogICAgICAgICAgICByZXN1bHQueCArPSBwYXJlbnQub2Zmc2V0TGVmdDsKICAgICAgICAgICAgcmVzdWx0LnkgKz0gcGFyZW50Lm9mZnNldFRvcDsKICAgICAgICAgICAgdmFyIHBhcmVudFRhZ05hbWUgPSBwYXJlbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICBpZiAocGFyZW50VGFnTmFtZSAhPSAidGFibGUiICYmCiAgICAgICAgICAgICAgICBwYXJlbnRUYWdOYW1lICE9ICJib2R5IiAmJiAKICAgICAgICAgICAgICAgIHBhcmVudFRhZ05hbWUgIT0gImh0bWwiICYmIAogICAgICAgICAgICAgICAgcGFyZW50VGFnTmFtZSAhPSAiZGl2IiAmJiAKICAgICAgICAgICAgICAgIHBhcmVudC5jbGllbnRUb3AgJiYgCiAgICAgICAgICAgICAgICBwYXJlbnQuY2xpZW50TGVmdCkgewogICAgICAgICAgICAgICAgcmVzdWx0LnggKz0gcGFyZW50LmNsaWVudExlZnQ7CiAgICAgICAgICAgICAgICByZXN1bHQueSArPSBwYXJlbnQuY2xpZW50VG9wOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5vZmZzZXRQYXJlbnQ7CiAgICAgICAgfQogICAgfQogICAgZWxzZSBpZiAoZWxlbWVudC5sZWZ0ICYmIGVsZW1lbnQudG9wKSB7CiAgICAgICAgcmVzdWx0LnggPSBlbGVtZW50LmxlZnQ7CiAgICAgICAgcmVzdWx0LnkgPSBlbGVtZW50LnRvcDsKICAgIH0KICAgIGVsc2UgewogICAgICAgIGlmIChlbGVtZW50LngpIHsKICAgICAgICAgICAgcmVzdWx0LnggPSBlbGVtZW50Lng7CiAgICAgICAgfQogICAgICAgIGlmIChlbGVtZW50LnkpIHsKICAgICAgICAgICAgcmVzdWx0LnkgPSBlbGVtZW50Lnk7CiAgICAgICAgfQogICAgfQogICAgaWYgKGVsZW1lbnQub2Zmc2V0V2lkdGggJiYgZWxlbWVudC5vZmZzZXRIZWlnaHQpIHsKICAgICAgICByZXN1bHQud2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoOwogICAgICAgIHJlc3VsdC5oZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDsKICAgIH0KICAgIGVsc2UgaWYgKGVsZW1lbnQuc3R5bGUgJiYgZWxlbWVudC5zdHlsZS5waXhlbFdpZHRoICYmIGVsZW1lbnQuc3R5bGUucGl4ZWxIZWlnaHQpIHsKICAgICAgICByZXN1bHQud2lkdGggPSBlbGVtZW50LnN0eWxlLnBpeGVsV2lkdGg7CiAgICAgICAgcmVzdWx0LmhlaWdodCA9IGVsZW1lbnQuc3R5bGUucGl4ZWxIZWlnaHQ7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0Owp9CmZ1bmN0aW9uIFdlYkZvcm1fR2V0UGFyZW50QnlUYWdOYW1lKGVsZW1lbnQsIHRhZ05hbWUpIHsKICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgICB2YXIgdXBwZXJUYWdOYW1lID0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpOwogICAgd2hpbGUgKHBhcmVudCAmJiAocGFyZW50LnRhZ05hbWUudG9VcHBlckNhc2UoKSAhPSB1cHBlclRhZ05hbWUpKSB7CiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGUgPyBwYXJlbnQucGFyZW50Tm9kZSA6IHBhcmVudC5wYXJlbnRFbGVtZW50OwogICAgfQogICAgcmV0dXJuIHBhcmVudDsKfQpmdW5jdGlvbiBXZWJGb3JtX1NldEVsZW1lbnRIZWlnaHQoZWxlbWVudCwgaGVpZ2h0KSB7CiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnN0eWxlKSB7CiAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAicHgiOwogICAgfQp9CmZ1bmN0aW9uIFdlYkZvcm1fU2V0RWxlbWVudFdpZHRoKGVsZW1lbnQsIHdpZHRoKSB7CiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnN0eWxlKSB7CiAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoICsgInB4IjsKICAgIH0KfQpmdW5jdGlvbiBXZWJGb3JtX1NldEVsZW1lbnRYKGVsZW1lbnQsIHgpIHsKICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuc3R5bGUpIHsKICAgICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSB4ICsgInB4IjsKICAgIH0KfQpmdW5jdGlvbiBXZWJGb3JtX1NldEVsZW1lbnRZKGVsZW1lbnQsIHkpIHsKICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuc3R5bGUpIHsKICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHkgKyAicHgiOwogICAgfQp9",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 12:01:57 GMT",
                    "Content-Length": "21840",
                    "Date": "Thu, 06 Nov 2014 12:02:03 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}