{
    "url": "http://localhost:9999/OceanInternet/jquery-mobile-build/tests/jquery.testHelper.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.search</b> and written to <b>location.href</b> via the following statements:<ul><li>search = location.search.replace( \"?\", \"\");</li><li>pairs = search.split( \"&amp;\" );</li><li>pairs = pairs.concat( paramPairs ? paramPairs : [] );</li><li>location.href= location.href.toString() .replace(/\\/[^\\/]*\\..., \"/\" + filename) .replace(search, \"\" ) + (pairs.length? \"?\" + pairs.join(\"&amp;\" ) : \"\" ) </li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/OceanInternet/jquery-mobile-build/tests/jquery.testHelper.js",
                "path": "/OceanInternet/jquery-mobile-build/tests/jquery.testHelper.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9PY2VhbkludGVybmV0L2pxdWVyeS1tb2JpbGUtYnVpbGQvdGVzdHMvanF1ZXJ5LnRlc3RIZWxwZXIuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTQ1ODQNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMDY6NDc6MzMgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDA2OjQ3OjI5IEdNVA0KDQovKgogKiBtb2JpbGUgc3VwcG9ydCB1bml0IHRlc3RzCiAqLwoKKGZ1bmN0aW9uKCAkICkgewoJJC50ZXN0SGVscGVyID0gewoJCS8vIFRoaXMgZnVuY3Rpb24gdGFrZXMgc2V0cyBvZiBmaWxlcyB0byBsb2FkIGFzeW5jaHJvbm91c2x5LiBFYWNoIHNldCB3aWxsIGJlIGxvYWRlZCBhZnRlcgoJCS8vIHRoZSBwcmV2aW91cyBzZXQgaGFzIGNvbXBsZXRlZCBsb2FkaW5nLiBUaGF0IGlzLCBlYWNoIHJlcXVpcmUgYW5kIGl0J3MgZGVwZW5kZW5jaWVzIGluIGEKCQkvLyBzZXQgd2lsbCBiZSBsb2FkZWQgYXN5bmNocm9ub3VzbHksIGJ1dCBlYWNoIHNldCB3aWxsIGJlIHJ1biBpbiBzZXJpYWwuCgkJYXN5bmNMb2FkOiBmdW5jdGlvbiggc2VxLCBiYXNlVXJsICkgewoJCQlyZXF1aXJlKHsKCQkJCWJhc2VVcmw6IGJhc2VVcmwgfHwgIi4uLy4uLy4uL2pzIgoJCQl9KTsKCgkJCWZ1bmN0aW9uIGxvYWRTZXEoIHNlcSwgaSApewoJCQkJaWYoICFzZXFbaV0gKXsKCQkJCQkkKCBkb2N1bWVudCApLnJlYWR5KCBmdW5jdGlvbigpIHsKCQkJCQkJdmFyICRmaXh0dXJlID0gJCggJyNxdW5pdC1maXh0dXJlJyApOwoJCQkJCQlpZiAoICRmaXh0dXJlLmxlbmd0aCApIHsKCQkJCQkJCVFVbml0LmNvbmZpZy5maXh0dXJlID0gJGZpeHR1cmUuaHRtbCgpOwoJCQkJCQl9CgkJCQkJCVFVbml0LnN0YXJ0KCk7CgkJCQkJfSk7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCXJlcXVpcmUoIHNlcVtpXSwgZnVuY3Rpb24oKSB7CgkJCQkJbG9hZFNlcShzZXEsIGkgKyAxKTsKCQkJCX0pOwoJCQl9CgoJCQkvLyBzdG9wIHF1bml0IGZyb20gcnVubmluZyB0aGUgdGVzdHMgdW50aWwgZXZlcnl0aGluZyBpcyBpbiB0aGUgcGFnZQoJCQlRVW5pdC5jb25maWcuYXV0b3N0YXJ0ID0gZmFsc2U7CgoJCQlsb2FkU2VxKCBzZXEsIDAgKTsKCQl9LAoKCQlleGNsdWRlRmlsZVByb3RvY29sOiBmdW5jdGlvbihjYWxsYmFjayl7CgkJCXZhciBtZXNzYWdlID0gIlRlc3RzIHJlcXVpcmUgc2NyaXB0IHJlbG9hZCBhbmQgY2Fubm90IGJlIHJ1biB2aWEgZmlsZTogcHJvdG9jb2wiOwoKCQkJaWYgKGxvY2F0aW9uLnByb3RvY29sID09ICJmaWxlOiIpIHsKCQkJCXRlc3QobWVzc2FnZSwgZnVuY3Rpb24oKXsKCQkJCQlvayhmYWxzZSwgbWVzc2FnZSk7CgkJCQl9KTsKCQkJfSBlbHNlIHsKCQkJCWNhbGxiYWNrKCk7CgkJCX0KCQl9LAoKCQkvLyBUT0RPIHByZXZlbnQgdGVzdCBzdWl0ZSBsb2FkcyB3aGVuIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBwdXNoIHN0YXRlCgkJLy8gYW5kIHB1c2gtc3RhdGUgZmFsc2UgaXMgZGVmaW5lZC4KCQlzZXRQdXNoU3RhdGU6IGZ1bmN0aW9uKCkgewoJCQlpZiggJC5zdXBwb3J0LnB1c2hTdGF0ZSAmJiBsb2NhdGlvbi5zZWFyY2guaW5kZXhPZiggInB1c2gtc3RhdGUiICkgPj0gMCApIHsKCQkJCSQuc3VwcG9ydC5wdXNoU3RhdGUgPSBmYWxzZTsKCQkJCSQubW9iaWxlLndpbmRvdy51bmJpbmQoICJwb3BzdGF0ZS5uYXZpZ2F0ZSIgKTsKCQkJCSQubW9iaWxlLndpbmRvdy51bmJpbmQoICJwb3BzdGF0ZS5oYXNoY2hhbmdlIiApOwoJCQkJJC5ldmVudC5zcGVjaWFsLm5hdmlnYXRlLmJvdW5kID0gZmFsc2U7CgkJCQkkLmV2ZW50LnNwZWNpYWwubmF2aWdhdGUuc2V0dXAoKTsKCQkJfQoJCX0sCgoJCXNldFBhZ2VUcmFuc2l0aW9uOiBmdW5jdGlvbigpIHsKCQkJaWYoIGxvY2F0aW9uLnNlYXJjaC5pbmRleE9mKCAidHJhbnNpdGlvbj1ub25lIiApID49IDAgKSB7CgkJCQkkKCBkb2N1bWVudCApLmJpbmQoICdtb2JpbGVpbml0JywgZnVuY3Rpb24oKSB7CgkJCQkJJC5tb2JpbGUuZGVmYXVsdFBhZ2VUcmFuc2l0aW9uID0gIm5vbmUiOwoJCQkJfSk7CgkJCX0KCQl9LAoKCQlyZWRpcmVjdDogZnVuY3Rpb24oIGZpbGVuYW1lLCBwYXJhbVBhaXJzICkgewoJCQl2YXIgc2VhcmNoLCBwYWlycyA9IFtdOwoKCQkJc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLnJlcGxhY2UoICI/IiwgIiIpOwoKCQkJaWYoIHNlYXJjaCApewoJCQkJcGFpcnMgPSBzZWFyY2guc3BsaXQoICImIiApOwoJCQl9CgoJCQlwYWlycyA9IHBhaXJzLmNvbmNhdCggcGFyYW1QYWlycyA/IHBhcmFtUGFpcnMgOiBbXSApOwoKCQkJbG9jYXRpb24uaHJlZiA9IGxvY2F0aW9uLmhyZWYudG9TdHJpbmcoKQoJCQkJLnJlcGxhY2UoL1wvW15cL10qXD98XC9bXlwvXSokLywgIi8iICsgZmlsZW5hbWUgKQoJCQkJLnJlcGxhY2UoIHNlYXJjaCwgIiIpICsgKHBhaXJzLmxlbmd0aCA/ICI/IiArIHBhaXJzLmpvaW4oICImIiApIDogIiIpOwoJCX0sCgoJCXB1c2hTdGF0ZVJlZGlyZWN0OiBmdW5jdGlvbiggZmlsZW5hbWUgKSB7CgkJCXRoaXMucmVkaXJlY3QoIGZpbGVuYW1lLCBbInB1c2gtc3RhdGU9ZmFsc2UiXSApOwoJCX0sCgoJCXJlbG9hZHM6IHt9LAoKCQlyZWxvYWRNb2R1bGU6IGZ1bmN0aW9uKGxpYk5hbWUpewoJCQl2YXIgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7CgoJCQkvLyB3aGVyZSBhIG1vZHVsZSBsb2FkZXIgaXNuJ3QgZGVmaW5lZCB1c2UgdGhlIG9sZCB3YXkKCQkJaWYoICF3aW5kb3cucmVxdWlyZSApIHsKCQkJCXRoaXMucmVsb2FkTGliKCBsaWJOYW1lICk7CgkJCQlkZWZlcnJlZC5yZXNvbHZlKCk7CgkJCQlyZXR1cm4gZGVmZXJyZWQ7CgkJCX0KCgkJCWlmKHRoaXMucmVsb2Fkc1tsaWJOYW1lXSA9PT0gdW5kZWZpbmVkKSB7CgkJCQl0aGlzLnJlbG9hZHNbbGliTmFtZV0gPSB7CgkJCQkJY291bnQ6IDAKCQkJCX07CgkJCX0KCgkJCS8vQ2xlYXIgaW50ZXJuYWwgY2FjaGUgb2YgbW9kdWxlIGluc2lkZSBvZiByZXF1aXJlCgkJCXJlcXVpcmVqcy51bmRlZiggbGliTmFtZSApOwoKCQkJcmVxdWlyZSgKCQkJCXsKCQkJCQliYXNlVXJsOiAiLi4vLi4vLi4vanMiCgkJCQl9LCBbbGliTmFtZV0sCgkJCQlmdW5jdGlvbigpIHsKCQkJCQlkZWZlcnJlZC5yZXNvbHZlKCk7CgkJCQl9CgkJCSk7CgoJCQlyZXR1cm4gZGVmZXJyZWQ7CgkJfSwKCgkJcmVsb2FkTGliOiBmdW5jdGlvbihsaWJOYW1lKXsKCQkJdmFyIHJlbG9hZDsKCgkJCWlmKHRoaXMucmVsb2Fkc1tsaWJOYW1lXSA9PT0gdW5kZWZpbmVkKSB7CgkJCQl0aGlzLnJlbG9hZHNbbGliTmFtZV0gPSB7CgkJCQkJbGliOiAkKCAic2NyaXB0W3NyYyQ9JyIgKyBsaWJOYW1lICsgIiddIiApLAoJCQkJCWRhdGFTcmNMaWI6ICQoICJzY3JpcHRbZGF0YS1zcmMkPSciICsgbGliTmFtZSArICInXSIpLAoJCQkJCWNvdW50OiAwCgkJCQl9OwoJCQl9CgoJCQlyZWxvYWQgPSB0aGlzLnJlbG9hZHNbbGliTmFtZV07CgoJCQl2YXIgc3JjID0gcmVsb2FkLmxpYi5hdHRyKCdzcmMnKSB8fCByZWxvYWQuZGF0YVNyY0xpYi5hdHRyKCAiZGF0YS1zcmMiICkgKyAiPyIgKyB0aGlzLnJlbG9hZHNbbGliTmFtZV0uY291bnQrKzsKCQkJJC5hamF4KCB7IHVybDogc3JjLCBkYXRhVHlwZTogInNjcmlwdCIsIGFzeW5jOiBmYWxzZSB9ICk7CgkJfSwKCgkJcmVydW5RdW5pdDogZnVuY3Rpb24oKXsKCQkJdmFyIHNlbGYgPSB0aGlzOwoJCQlRVW5pdC5pbml0KCk7CgkJCSQoInNjcmlwdDpub3QoW3NyYyo9Jy5cLyddKSIpLmVhY2goZnVuY3Rpb24oaSwgZWxlbSl7CgkJCQl2YXIgc3JjID0gZWxlbS5zcmMuc3BsaXQoIi8iKTsKCQkJCXNlbGYucmVsb2FkTGliKHNyY1tzcmMubGVuZ3RoIC0gMV0pOwoJCQl9KTsKCQkJUVVuaXQuc3RhcnQoKTsKCQl9LAoKCQlhbHRlckV4dGVuZDogZnVuY3Rpb24oZXh0cmFFeHRlbnNpb24pewoJCQl2YXIgZXh0ZW5kRm4gPSAkLmV4dGVuZDsKCgkJCSQuZXh0ZW5kID0gZnVuY3Rpb24ob2JqZWN0LCBleHRlbnNpb24pewoJCQkJLy8gTk9URSBleHRlbmQgdGhlIG9iamVjdCBhcyBub3JtYWwKCQkJCXZhciByZXN1bHQgPSBleHRlbmRGbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKCQkJCS8vIE5PVEUgYWRkIGN1c3RvbSBleHRlbnNpb25zCgkJCQlyZXN1bHQgPSBleHRlbmRGbihyZXN1bHQsIGV4dHJhRXh0ZW5zaW9uKTsKCQkJCXJldHVybiByZXN1bHQ7CgkJCX07CgkJfSwKCgkJaGlkZUFjdGl2ZVBhZ2VXaGVuQ29tcGxldGU6IGZ1bmN0aW9uKCkgewoJCQlpZiggJCgnI3F1bml0LXRlc3RyZXN1bHQnKS5sZW5ndGggPiAwICkgewoJCQkJJCgnLnVpLXBhZ2UtYWN0aXZlJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTsKCQkJfSBlbHNlIHsKCQkJCXNldFRpbWVvdXQoJC50ZXN0SGVscGVyLmhpZGVBY3RpdmVQYWdlV2hlbkNvbXBsZXRlLCA1MDApOwoJCQl9CgkJfSwKCgkJb3BlblBhZ2U6IGZ1bmN0aW9uKGhhc2gpewoJCQlsb2NhdGlvbi5oYXNoID0gaGFzaDsKCQl9LAoKCQlzZXF1ZW5jZTogZnVuY3Rpb24oZm5zLCBpbnRlcnZhbCl7CgkJCSQuZWFjaChmbnMsIGZ1bmN0aW9uKGksIGZuKXsKCQkJCXNldFRpbWVvdXQoZm4sIGkgKiBpbnRlcnZhbCk7CgkJCX0pOwoJCX0sCgoJCXBhZ2VTZXF1ZW5jZTogZnVuY3Rpb24oIGZucyApewoJCQl0aGlzLmV2ZW50U2VxdWVuY2UoICJwYWdlY2hhbmdlIiwgZm5zICk7CgkJfSwKCgkJZXZlbnRTZXF1ZW5jZTogZnVuY3Rpb24oIGV2ZW50LCBmbnMsIHRpbWVkT3V0ICl7CgkJCXZhciBzZXEgPSBbXTsKCQkJJC5lYWNoKGZucywgZnVuY3Rpb24oIGksIGZuICkgewoJCQkJc2VxLnB1c2goIGZuICk7CgkJCQlpZiggaSAhPT0gZm5zLmxlbmd0aCAtIDEpIHNlcS5wdXNoKCBldmVudCApOwoJCQl9KTsKCgkJCXRoaXMuZXZlbnRDYXNjYWRlKCBzZXEgKTsKCQl9LAoKCQlldmVudFRhcmdldDogdW5kZWZpbmVkLAoKCQlldmVudENhc2NhZGU6IGZ1bmN0aW9uKCBzZXF1ZW5jZSwgdGltZWRPdXQsIGRhdGEgKSB7CgkJCXZhciBmbiA9IHNlcXVlbmNlLnNoaWZ0KCksCgkJCQlldmVudCA9IHNlcXVlbmNlLnNoaWZ0KCksCgkJCQlzZWxmID0gdGhpczsKCgkJCWlmKCBmbiA9PT0gdW5kZWZpbmVkICkgewoJCQkJc2VsZi5ldmVudENhc2NhZGVUYXJnZXQgPSB1bmRlZmluZWQ7CgkJCQlyZXR1cm47CgkJCX0KCgkJCWlmKCBldmVudCApewoJCQkJLy8gaWYgYSBwYWdlY2hhbmdlIG9yIGRlZmluZWQgZXZlbnQgaXMgbmV2ZXIgdHJpZ2dlcmVkCgkJCQkvLyBjb250aW51ZSBpbiB0aGUgc2VxdWVuY2UgdG8gYWxlcnQgcG9zc2libGUgZmFpbHVyZXMKCQkJCXZhciB3YXJuVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQkJCXNlbGYuZXZlbnRDYXNjYWRlKCBzZXF1ZW5jZSwgdHJ1ZSApOwoJCQkJfSwgMTAwMDApOwoKCQkJCS8vIGJpbmQgdGhlIHJlY3Vyc2l2ZSBjYWxsIHRvIHRoZSBldmVudAoJCQkJKCBzZWxmLmV2ZW50VGFyZ2V0IHx8ICQubW9iaWxlLnBhZ2VDb250YWluZXIgKS5vbmUoZXZlbnQsIGZ1bmN0aW9uKCBldmVudCwgZGF0YSApIHsKCQkJCQljbGVhclRpbWVvdXQoIHdhcm5UaW1lciApOwoKCQkJCQkvLyBMZXQgdGhlIGN1cnJlbnQgc3RhY2sgdW53aW5kIGJlZm9yZSB3ZSBmaXJlIG9mZiB0aGUgbmV4dCBpdGVtIGluIHRoZSBzZXF1ZW5jZS4KCQkJCQkvLyBUT0RPIHNldFRpbWVvdXQoc2VsZi5wYWdlU2VxdWVuY2UsIDAsIHNlcXVlbmNlKTsKCQkJCQlzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7IHNlbGYuZXZlbnRDYXNjYWRlKHNlcXVlbmNlLCBmYWxzZSwgZGF0YSApOyB9LCAwKTsKCQkJCX0pOwoJCQl9CgoJCQkvLyBpbnZva2UgdGhlIGZ1bmN0aW9uIHdoaWNoIHNob3VsZCwgaW4gc29tZSBmYXNoaW9uLAoJCQkvLyB0cmlnZ2VyIHRoZSBuZXh0IGV2ZW50CgkJCWZuKCB0aW1lZE91dCwgZGF0YSApOwoJCX0sCgovLyBkZXRhaWxlZEV2ZW50Q2FzY2FkZTogY2FsbCBhIGZ1bmN0aW9uIGFuZCBleHBlY3QgYSBzZXJpZXMgb2YgZXZlbnRzIHRvIGJlIHRyaWdnZXJlZCAob3Igbm90IHRvIGJlIHRyaWdnZXJlZCksIGFuZCBndWFyZAovLyB3aXRoIGEgdGltZW91dCBhZ2FpbnN0IGdldHRpbmcgc3Rvb2QgdXAuIFJlY29yZCB0aGUgcmVzdWx0ICh0aW1lZCBvdXQgLyB3YXMgdHJpZ2dlcmVkKSBmb3IgZWFjaCBldmVudCwgYW5kIHRoZSBvcmRlcgovLyBpbiB3aGljaCB0aGUgZXZlbnQgYXJyaXZlZCB3cnQuIGFueSBvdGhlciBldmVudHMgZXhwZWN0ZWQuCi8vCQlzZXEgOiBbCi8vCQkJZm4ocmVzdWx0KSwKLy8JCQl7IGtleTogewovLwkJCQkJc3JjOiBldmVudCBzb3VyY2UgKGlzIGpRdWVyeSBvYmplY3Qgb3IgZnVuY3Rpb24gcmV0dXJuaW5nIGpRdWVyeSBvYmplY3QpLAovLwkJCQkJICAgICAoTkI6IFlvdSBzaG91bGQgdXNlIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgalF1ZXJ5IG9iamVjdCBhcyB0aGUgdmFsdWUgZm9yIHRoaXMgcGFyYW1ldGVyCi8vCQkJCQkgICAgICBpZiB0aGVyZSBpcyBhIGNoYW5jZSB0aGF0IGF0IHRoZSB0aW1lIG9mIGNvbnN0cnVjdGlvbiBvZiB0aGUgalF1ZXJ5IG9iamVjdCAodGhhdCBpcywgd2hlbgovLwkJCQkJICAgICAgdGhlIGNhbGwgdG8gZGV0YWlsZWRFdmVudENhc2NhZGUgaXMgbWFkZSkgdGhlIGVsZW1lbnRzIHNlbGVjdGVkIGJ5IHRoZSBqUXVlcnkgb2JqZWN0IGFyZQovLwkJCQkJICAgICAgbm90IHlldCBwcmVzZW50IGluIHRoZSBET00gLSBzdWNoIGFzLCBmb3IgaW5zdGFuY2UsIHdoZW4gdGhlIGVsZW1lbnRzIGFyZSBwYXJ0IG9mIGEgcGFnZQovLwkJCQkJICAgICAgdGhhdCBnZXRzIEFKQVhlZCBpbiBzdWJzZXF1ZW50bHksIHN1Y2ggYXMgZHVyaW5nIGEgZnVuY3Rpb24gdGhhdCdzIHBhcnQgb2YgdGhlIHNlcXVlbmNlIG9mCi8vCQkJCQkgICAgICBmdW5jdGlvbnMgcGFzc2VkIHRvIGRldGFpbGVkRXZlbnRDYXNjYWRlLikKLy8JCQkJCWxlbmd0aDogdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0aW1lb3V0IC0gb25seSB1c2VkIGlmIHNyYyBpcyBub3Qgc2V0LAovLwkJCQkJZXZlbnQ6IGV2ZW50IG5hbWUgKGlzIHN0cmluZyksIG9ubHkgdXNlZCBpZiBzcmMgaXMgc2V0LAovLwkJCQkJICAgICAgIChOQjogSXQncyBhIGdvb2QgaWRlYSB0byBuYW1lc3BhY2UgeW91ciBldmVudHMsIGJlY2F1c2UgdGhlIGhhbmRsZXIgd2lsbCBiZSByZW1vdmVkCi8vCQkJCQkgICAgICAgIGJhc2VkIG9uIHRoZSBuYW1lIHlvdSBnaXZlIGhlcmUgaWYgYSB0aW1lb3V0IG9jY3VycyBiZWZvcmUgdGhlIGV2ZW50IGZpcmVzLikKLy8KLy8JCQkJCXVzZXJEYXRhMTogdmFsdWUsCi8vCQkJCQkuLi4KLy8JCQkJCXVzZXJEYXRhbjogdmFsdWUKLy8JCQkgIH0sCi8vCQkJCS4uLgovLwkJCV0KLy8JCQkuLi4KLy8JCV0KLy8JCXJlc3VsdDogewovLwkJCWtleTogewovLwkJCQlpZHg6IG9yZGVyIGluIHdoaWNoIHRoZSBldmVudCBmaXJlZAovLwkJCQlzcmM6IGV2ZW50IHNvdXJjZSAoaXMgalF1ZXJ5IG9iamVjdCksCi8vCQkJCWV2ZW50OiBldmVudCBuYW1lIChpcyBzdHJpbmcpCi8vCQkJCXRpbWVkT3V0OiB0aW1lZCBvdXQgKGlzIGJvb2xlYW4pCi8vCQkJCXVzZXJEYXRhMTogdmFsdWUsCi8vCQkJCS4uLgovLwkJCQl1c2VyRGF0YW46IHZhbHVlCi8vCQkJfQovLwkJCS4uLgovLwkJfQoJCWRldGFpbGVkRXZlbnRDYXNjYWRlOiBmdW5jdGlvbiggc2VxLCByZXN1bHQgKSB7CgkJCS8vIGdyYWIgb25lIHN0ZXAgZnJvbSB0aGUgc2VxdWVuY2UKCQkJdmFyIGZuID0gc2VxLnNoaWZ0KCksCgkJCQlldmVudHMgPSBzZXEuc2hpZnQoKSwKCQkJCXNlbGYgPSB0aGlzLAoJCQkJZGVyZWZTcmMgPSBmdW5jdGlvbiggc3JjICkgewoJCQkJCXJldHVybiAoICQuaXNGdW5jdGlvbiggc3JjICkgPyBzcmMoKSA6IHNyYyApOwoJCQkJfTsKCgkJCS8vIHdlJ3JlIGRvbmUKCQkJaWYgKCBmbiA9PT0gdW5kZWZpbmVkICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBBdHRhY2ggaGFuZGxlcnMgdG8gdGhlIHZhcmlvdXMgb2JqZWN0cyB3aGljaCBhcmUgdG8gYmUgY2hlY2tlZCBmb3IgY29ycmVjdCBldmVudCBnZW5lcmF0aW9uCgkJCWlmICggZXZlbnRzICkgewoJCQkJdmFyIG5ld1Jlc3VsdCA9IHt9LAoJCQkJCW5FdmVudHNEb25lID0gMCwKCQkJCQluRXZlbnRzID0gMCwKCQkJCQlyZWNvcmRSZXN1bHQgPSBmdW5jdGlvbigga2V5LCBldmVudCwgcmVzdWx0ICkgewoJCQkJCQkvLyBSZWNvcmQgdGhlIHJlc3VsdAoJCQkJCQluZXdSZXN1bHRbIGtleSBdID0gJC5leHRlbmQoIHt9LCBldmVudCwgcmVzdWx0ICk7CgkJCQkJCS8vIEluY3JlbWVudCB0aGUgbnVtYmVyIG9mIHJlY2VpdmVkIHJlc3BvbnNlcwoJCQkJCQluRXZlbnRzRG9uZSsrOwoJCQkJCQlpZiAoIG5FdmVudHNEb25lID09PSBuRXZlbnRzICkgewoJCQkJCQkJLy8gY2xlYXIgdGhlIHRpbWVvdXQgYW5kIG1vdmUgb24gdG8gdGhlIG5leHQgc3RlcCB3aGVuIGFsbCBldmVudHMgaGF2ZSBiZWVuIHJlY2VpdmVkCgkJCQkJCQlpZiAoIHdhcm5UaW1lciApIHsKCQkJCQkJCQljbGVhclRpbWVvdXQoIHdhcm5UaW1lciApOwoJCQkJCQkJfQoJCQkJCQkJc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCQkJCQkJc2VsZi5kZXRhaWxlZEV2ZW50Q2FzY2FkZSggc2VxLCBuZXdSZXN1bHQgKTsKCQkJCQkJCX0sIDApOwoJCQkJCQl9CgkJCQkJfSwKCQkJCQkvLyBzZXQgYSBmYWlsc2FmZSB0aW1lciBpbiBjYXNlIG9uZSBvZiB0aGUgZXZlbnRzIG5ldmVyIGhhcHBlbnMKCQkJCQl3YXJuVGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHsKCQkJCQkJd2FyblRpbWVyID0gMDsKCQkJCQkJJC5lYWNoKCBldmVudHMsIGZ1bmN0aW9uKCBrZXksIGV2ZW50ICkgewoJCQkJCQkJLy8gVGltZW91dHMgYXJlIGxlZnQgb3V0IG9mIHRoaXMsIGJlY2F1c2UgdGhleSB3aWxsIGNvbXBsZXRlIGZvcgoJCQkJCQkJLy8gc3VyZSwgY2FsbGluZyByZWNvcmRSZXN1bHQgd2hlbiB0aGV5IGRvCgkJCQkJCQlpZiAoIG5ld1Jlc3VsdFsga2V5IF0gPT09IHVuZGVmaW5lZCAmJiBldmVudC5zcmMgKSB7CgkJCQkJCQkJLy8gY2xlYW4gdXAgdGhlIHVudXNlZCBoYW5kbGVyCgkJCQkJCQkJZGVyZWZTcmMoIGV2ZW50LnNyYyApLnVuYmluZCggZXZlbnQuZXZlbnQgKTsKCQkJCQkJCQlyZWNvcmRSZXN1bHQoIGtleSwgZXZlbnQsIHsgdGltZWRPdXQ6IHRydWUgfSApOwoJCQkJCQkJfQoJCQkJCQl9KTsKCQkJCQl9LCA1MDAwKTsKCgkJCQkkLmVhY2goIGV2ZW50cywgZnVuY3Rpb24oIGtleSwgZXZlbnQgKSB7CgkJCQkJLy8gQ291bnQgdGhlIGV2ZW50cyBzbyB0aGF0IHdlIG1heSBrbm93IGhvdyBtYW55IHJlc3BvbnNlcyB0byBleHBlY3QKCQkJCQluRXZlbnRzKys7CgkJCQkJLy8gSWYgaXQncyBhbiBldmVudAoJCQkJCWlmICggZXZlbnQuc3JjICkgewoJCQkJCQkvLyBIb29rIHVwIHRvIHRoZSBldmVudAoJCQkJCQlkZXJlZlNyYyggZXZlbnQuc3JjICkub25lKCBldmVudC5ldmVudCwgZnVuY3Rpb24oKSB7CgkJCQkJCQlyZWNvcmRSZXN1bHQoIGtleSwgZXZlbnQsIHsgdGltZWRPdXQ6IGZhbHNlLCBpZHg6IG5FdmVudHNEb25lIH0gKTsKCQkJCQkJfSk7CgkJCQkJfQoJCQkJCS8vIElmIGl0J3MgYSB0aW1lb3V0CgkJCQkJZWxzZSB7CgkJCQkJCXNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgewoJCQkJCQkJcmVjb3JkUmVzdWx0KCBrZXksIGV2ZW50LCB7IHRpbWVkT3V0OiB0cnVlLCBpZHg6IC0xIH0gKTsKCQkJCQkJfSwgZXZlbnQubGVuZ3RoICk7CgkJCQkJfQoJCQkJfSk7CgkJCX0KCgkJCS8vIENhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgZXZlbnRzCgkJCWZuKCByZXN1bHQgKTsKCQl9LAoKCQlkZWZlcnJlZFNlcXVlbmNlOiBmdW5jdGlvbihmbnMpIHsKCQkJdmFyIGZuID0gZm5zLnNoaWZ0KCksCgkJCQlkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKSwKCQkJCXNlbGYgPSB0aGlzLCByZXM7CgoJCQlpZiAoZm4pIHsKCQkJCXJlcyA9IGZuKCk7CgkJCQlpZiAoIHJlcyAmJiAkLnR5cGUoIHJlcy5kb25lICkgPT09ICJmdW5jdGlvbiIgKSB7CgkJCQkJcmVzLmRvbmUoZnVuY3Rpb24oKSB7CgkJCQkJCXNlbGYuZGVmZXJyZWRTZXF1ZW5jZSggZm5zICkuZG9uZShmdW5jdGlvbigpIHsKCQkJCQkJCWRlZmVycmVkLnJlc29sdmUoKTsKCQkJCQkJfSk7CgkJCQkJfSk7CgkJCQl9IGVsc2UgewoJCQkJCXNlbGYuZGVmZXJyZWRTZXF1ZW5jZSggZm5zICkuZG9uZShmdW5jdGlvbigpIHsKCQkJCQkJZGVmZXJyZWQucmVzb2x2ZSgpOwoJCQkJCX0pOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJZGVmZXJyZWQucmVzb2x2ZSgpOwoJCQl9CgkJCXJldHVybiBkZWZlcnJlZDsKCQl9LAoKCQlkZWNvcmF0ZTogZnVuY3Rpb24ob3B0cyl7CgkJCXZhciB0aGlzVmFsID0gb3B0cy5zZWxmIHx8IHdpbmRvdzsKCgkJCWNvbnNvbGUubG9nKCAiZGVjb3JhdGUgY2FsbGVkIiApOwoKCQkJcmV0dXJuIGZ1bmN0aW9uKCl7CgkJCQljb25zb2xlLmxvZyggImRlY29yYXRlZCBmdW5jdGlvbiBjYWxsZWQiICk7CgkJCQl2YXIgcmV0dXJuVmFsOwoJCQkJb3B0cy5iZWZvcmUgJiYgb3B0cy5iZWZvcmUuYXBwbHkodGhpc1ZhbCwgYXJndW1lbnRzKTsKCQkJCXJldHVyblZhbCA9IG9wdHMuZm4uYXBwbHkodGhpc1ZhbCwgYXJndW1lbnRzKTsKCQkJCW9wdHMuYWZ0ZXIgJiYgb3B0cy5hZnRlci5hcHBseSh0aGlzVmFsLCBhcmd1bWVudHMpOwoKCQkJCXJldHVybiByZXR1cm5WYWw7CgkJCX07CgkJfSwKCgkJYXNzZXJ0VXJsTG9jYXRpb246IGZ1bmN0aW9uKCBhcmdzICkgewoJCQl2YXIgcGFydHMgPSAkLm1vYmlsZS5wYXRoLnBhcnNlVXJsKCBsb2NhdGlvbi5ocmVmICksCgkJCQlwYXRobmFtZU9ud2FyZCA9IGxvY2F0aW9uLmhyZWYucmVwbGFjZSggcGFydHMuZG9tYWluLCAiIiApOwoKCQkJaWYoICQuc3VwcG9ydC5wdXNoU3RhdGUgKSB7CgkJCQlkZWVwRXF1YWwoIHBhdGhuYW1lT253YXJkLCBhcmdzLmhhc2hPclB1c2ggfHwgYXJncy5wdXNoLCBhcmdzLnJlcG9ydCApOwoJCQl9IGVsc2UgewoJCQkJZGVlcEVxdWFsKCBwYXJ0cy5oYXNoLCAiIyIgKyAoYXJncy5oYXNoT3JQdXNoIHx8IGFyZ3MuaGFzaCksIGFyZ3MucmVwb3J0ICk7CgkJCX0KCQl9LAoKCQkvLyBDb252ZXJ0IGEgcGFpciBvZiB2ZXJzaW9uIHN0cmluZ3MgaW50byBhIHBhaXIgb2YgaW50ZWdlcnMgYW5kIHBhc3MgdGhlCgkJLy8gcmVzdWx0aW5nIGludGVnZXJzIHRvIGEgY29tcGFyaXNvbiBmdW5jdGlvbgoJCXZlcnNpb25UZXN0OiBmdW5jdGlvbiggbCwgdCwgciApIHsKCQkJdmFyIGxBciA9IGwuc3BsaXQoICIuIiApLCBsTGVuZ3RoID0gbEFyLmxlbmd0aCwKCQkJCXJBciA9IHIuc3BsaXQoICIuIiApLCByTGVuZ3RoID0gckFyLmxlbmd0aCwKCQkJCWxWYWwsIHJWYWwsIGxSZXMgPSAiIiwgclJlcyA9ICIiLCBtaW4sIG1heCwgc3RyLCBpZHgsIGlkeDEsIGRpZmY7CgkJCWZvciAoIGlkeCA9IDAgOyBpZHggPCBsTGVuZ3RoIHx8IGlkeCA8IHJMZW5ndGggOyBpZHgrKyApIHsKCQkJCXN0ciA9IHt9OwoJCQkJbFZhbCA9ICggaWR4IDwgbExlbmd0aCA/IHBhcnNlSW50KCBsQXJbIGlkeCBdICkgOiAwICk7CgkJCQlyVmFsID0gKCBpZHggPCByTGVuZ3RoID8gcGFyc2VJbnQoIHJBclsgaWR4IF0gKSA6IDAgKTsKCgkJCQkvLyBUaGlzIGlnbm9yZXMgdGhpbmdzIGxpa2UgMTBhIHZzLiAxMGIgZm9yIG5vdwoJCQkJc3RyLmwgPSBTdHJpbmcoIGxWYWwgKTsKCQkJCXN0ci5yID0gU3RyaW5nKCByVmFsICk7CgkJCQltaW4gPSAoIHN0ci5sLmxlbmd0aCA8IHN0ci5yLmxlbmd0aCApID8gImwiIDogInIiOwoJCQkJbWF4ID0gKCBzdHIubC5sZW5ndGggPCBzdHIuci5sZW5ndGggKSA/ICJyIiA6ICJsIjsKCQkJCWRpZmYgPSBzdHJbIG1heCBdLmxlbmd0aCAtIHN0clsgbWluIF0ubGVuZ3RoOwoKCQkJCS8vIE1ha2Ugc3VyZSBvcmRlcnMgb2YgbWFnbml0dWRlIGFsaWduCgkJCQlmb3IgKCBpZHgxID0gMDsgaWR4MSA8IGRpZmYgOyBpZHgxKysgKSB7CgkJCQkJc3RyWyBtaW4gXSA9ICIwIiArIHN0clsgbWluIF07CgkJCQl9CgkJCQlsUmVzID0gbFJlcyArIHN0ci5sOwoJCQkJclJlcyA9IHJSZXMgKyBzdHIucjsKCQkJfQoKCQkJLy8gdHJpbSBpbml0aWFsIDBzIGFuZCByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgY29tcGFyaXNvbgoJCQlyZXR1cm4gdCggcGFyc2VJbnQoIGxSZXMucmVwbGFjZSggL14wKi8sICIiICkgKSwgcGFyc2VJbnQoIHJSZXMucmVwbGFjZSggL14wKi8sICIiICkgKSApOwoJCX0sCgoJCW5hdlJlc2V0OiBmdW5jdGlvbiggaGFzaCApIHsKCQkJdmFyIHRpbWVvdXQ7CgoJCQlzdG9wKCk7CgoJCQl0aW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCQlzdGFydCgpOwoJCQkJdGhyb3cgIm5hdmlnYXRpb24gcmVzZXQgdGltZWQgb3V0IjsKCQkJfSwgNTAwMCk7CgoJCQkkKGRvY3VtZW50KS5vbmUoICJwYWdlY2hhbmdlIiwgZnVuY3Rpb24oKSB7CgkJCQljbGVhclRpbWVvdXQoIHRpbWVvdXQgKTsKCQkJCXN0YXJ0KCk7CgkJCX0pOwoKCQkJbG9jYXRpb24uaGFzaCA9IGxvY2F0aW9uLmhhc2gucmVwbGFjZSgiIyIsICIiKSA9PT0gaGFzaCA/ICIiIDogIiMiICsgaGFzaDsKCQl9LAoKCQkvLyBDaGVjayBpZiB0d28gY2h1bmtzIG9mIERPTSBhcmUgaWRlbnRpY2FsCgkJZG9tRXF1YWw6IGZ1bmN0aW9uKCBsLCByICkgewoJCQl2YXIgaWR4LCBpZHhBdHRyLCBsYXR0ciwgcmF0dHIsCgkJCQkvLyBEZWNpZGUgd2hldGhlciBhbiBhdHRyaWJ1dGUgc2hvdWxkIGJlIGFkZGVkIHRvIHRob3NlIHRoYXQgd2lsbCBiZSBjb21wYXJlZAoJCQkJYWRkQXR0ciA9IGZ1bmN0aW9uKCBlbCwgaWR4ICkgewoJCQkJCS8vIFNwZWNpYWwgY2FzZSBmb3IgZW1wdHkgY2xhc3MgYXR0cmlidXRlCgkJCQkJaWYgKCBlbC5hdHRyaWJ1dGVzWyBpZHggXS5uYW1lID09PSAiY2xhc3MiICYmICFlbC5hdHRyaWJ1dGVzWyBpZHggXS52YWx1ZSApIHsKCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCX0KCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCX0sCgkJCQlhdHRyc0hhc2ggPSBmdW5jdGlvbiggZWwgKSB7CgkJCQkJdmFyIGlkeCwgYXR0cnMgPSB7IGxlbmd0aDogMCwgYXR0cnM6IHt9IH07CgoJCQkJCWZvciAoIGlkeCA9IDAgOyBpZHggPCBlbC5hdHRyaWJ1dGVzLmxlbmd0aCA7IGlkeCsrICkgewoJCQkJCQlpZiAoIGFkZEF0dHIoIGVsLCBpZHggKSApIHsKCQkJCQkJCWF0dHJzLmxlbmd0aCsrOwoJCQkJCQkJYXR0cnMuYXR0cnNbIGVsLmF0dHJpYnV0ZXNbIGlkeCBdLm5hbWUgXSA9IGVsLmF0dHJpYnV0ZXNbIGlkeCBdLnZhbHVlOwoJCQkJCQl9CgkJCQkJfQoKCQkJCQlyZXR1cm4gYXR0cnM7CgkJCQl9OwoKCQkJLy8gSWYgdGhlIGxlbmd0aHMgb2YgdGhlIHR3byBqUXVlcnkgb2JqZWN0cyBhcmUgZGlmZmVyZW50LCB0aGUgRE9NCgkJCS8vIG11c3QgYmUgZGlmZmVyZW50IHNvIGRvbid0IGJvdGhlciBjaGVja2luZwoJCQlpZiAoIGwubGVuZ3RoID09PSByLmxlbmd0aCApIHsKCQkJCS8vIE90aGVyd2lzZSwgZXhhbWluZSBlYWNoIGVsZW1lbnQKCQkJCWZvciAoIGlkeCA9IDAgOyBpZHggPCBsLmxlbmd0aCA7IGlkeCsrICkgewoJCQkJCWwgPSBsLmVxKCBpZHggKTsgciA9IHIuZXEoIGlkeCApOwoKCQkJCQkvLyBJZiB0aGUgdGFnTmFtZSBpcyBkaWZmZXJlbnQgdGhlIERPTSBtdXN0IGJlIGRpZmZlcmVudAoJCQkJCWlmICggbFsgMCBdLnRhZ05hbWUgIT09IHJbIDAgXS50YWdOYW1lICl7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgoJCQkJCS8vIE90aGVyd2lzZSwgY2hlY2sgdGhlIGF0dHJpYnV0ZXMsIGJ1dCBmaXJzdCBjb252ZXJ0IHRoZSBhdHRyaWJ1dGVzCgkJCQkJLy8gYXJyYXkgdG8gYSBkaWN0aW9uYXJ5LCBiZWNhdXNlIHRoZSBvcmRlciBvZiB0aGUgYXR0cmlidXRlcyBtYXkgYmUKCQkJCQkvLyBkaWZmZXJlbnQgYmV0d2VlbiBsIGFuZCByCgkJCQkJbGF0dHIgPSBhdHRyc0hhc2goIGxbIDAgXSApOwoJCQkJCXJhdHRyID0gYXR0cnNIYXNoKCByWyAwIF0gKTsKCgkJCQkJLy8gSWYgbCBhbmQgciBoYXZlIGEgZGlmZmVyZW50IG51bWJlciBvZiBhdHRyaWJ1dGVzLCBkb24ndCBjb250aW51ZQoJCQkJCWlmICggbGF0dHIubGVuZ3RoICE9PSByYXR0ci5sZW5ndGggKSB7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgoJCQkJCS8vIENoZWNrIGlmIGVhY2ggYXR0cmlidXRlIGluIGxhdHRyIGhhcyB0aGUgc2FtZSB2YWx1ZSBpbiByYXR0cgoJCQkJCWZvciAoIGlkeEF0dHIgaW4gbGF0dHIuYXR0cnMgKSB7CgkJCQkJCWlmICggcmF0dHIuYXR0cnNbIGlkeEF0dHIgXSAhPT0gbGF0dHIuYXR0cnNbIGlkeEF0dHIgXSApIHsKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJfQoJCQkJCX0KCgkJCQkJLy8gSWYgc28sIGNvbXBhcmUgdGhlIGNoaWxkcmVuIG9mIGwgYW5kIHIgcmVjdXJzaXZlbHkKCQkJCQlpZiAoICF0aGlzLmRvbUVxdWFsKCAkKCBsWyAwIF0gKS5jaGlsZHJlbigpLCAkKCByWyAwIF0gKS5jaGlsZHJlbigpICkgKSB7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQkJbCA9IGwuZW5kKCk7IHIgPSByLmVuZCgpOwoJCQkJfQoJCQkJaWYgKCBpZHggPT09IGwubGVuZ3RoICkgewoJCQkJCXJldHVybiB0cnVlOwoJCQkJfQoJCQl9CgoJCQlyZXR1cm4gZmFsc2U7CgkJfSwKCgkJZGVsYXlTdGFydDogZnVuY3Rpb24oIG1pbGxpc2Vjb25kcyApIHsKCQkJLy8gc3RvcCBxdW5pdCBmcm9tIHJ1bm5pbmcgdGhlIHRlc3RzIHVudGlsIGV2ZXJ5dGhpbmcgaXMgaW4gdGhlIHBhZ2UKCQkJUVVuaXQuY29uZmlnLmF1dG9zdGFydCA9IGZhbHNlOwoKCQkJc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCXN0YXJ0KCk7CgkJCX0sIG1pbGxpc2Vjb25kcyB8fCAyMDAwICk7CgkJfQoJfTsKfSkoalF1ZXJ5KTsK",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 06:47:29 GMT",
                    "Content-Length": "14584",
                    "Date": "Fri, 07 Nov 2014 06:47:33 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}