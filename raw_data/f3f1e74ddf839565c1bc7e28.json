{
    "url": "http://localhost:9999/ariya/phantomjs/src/qt/qtwebkit/Source/WebCore/inspector/front-end/WorkerManager.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>window.location.href</b> and written to <b>window.open()</b> via the following statements:<ul><li>var url = window.location.href;</li><li>url = url.replace(hash, \"\");</li><li>url = url.replace(\"docked=true&amp;\", \"\");</li><li>var workerInspectorWindow = window.open(url, undefined, \"location=0,width=\" + width + \",height=\" + height);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/ariya/phantomjs/src/qt/qtwebkit/Source/WebCore/inspector/front-end/WorkerManager.js",
                "path": "/ariya/phantomjs/src/qt/qtwebkit/Source/WebCore/inspector/front-end/WorkerManager.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hcml5YS9waGFudG9tanMvc3JjL3F0L3F0d2Via2l0L1NvdXJjZS9XZWJDb3JlL2luc3BlY3Rvci9mcm9udC1lbmQvV29ya2VyTWFuYWdlci5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyoKICogQ29weXJpZ2h0IChDKSAyMDExIEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqCiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dAogKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlCiAqIG1ldDoKICoKICogICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKICogbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgogKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlCiAqIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIKICogaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZQogKiBkaXN0cmlidXRpb24uCiAqICAgICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgR29vZ2xlIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMKICogY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20KICogdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi4KICoKICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUwogKiAiQVMgSVMiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVAogKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IKICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQKICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsCiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QKICogTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsCiAqIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWQogKiBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUCiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRQogKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgogKi8KCi8qKgogKiBAY29uc3RydWN0b3IKICogQGV4dGVuZHMge1dlYkluc3BlY3Rvci5PYmplY3R9CiAqLwpXZWJJbnNwZWN0b3IuV29ya2VyTWFuYWdlciA9IGZ1bmN0aW9uKCkKewogICAgdGhpcy5fd29ya2VySWRUb1dpbmRvdyA9IHt9OwogICAgSW5zcGVjdG9yQmFja2VuZC5yZWdpc3RlcldvcmtlckRpc3BhdGNoZXIobmV3IFdlYkluc3BlY3Rvci5Xb3JrZXJEaXNwYXRjaGVyKHRoaXMpKTsKfQoKV2ViSW5zcGVjdG9yLldvcmtlck1hbmFnZXIuaXNXb3JrZXJGcm9udGVuZCA9IGZ1bmN0aW9uKCkKewogICAgcmV0dXJuICEhV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0WyJkZWRpY2F0ZWRXb3JrZXJJZCJdIHx8CiAgICAgICAgICAgISFXZWJJbnNwZWN0b3IucXVlcnlQYXJhbXNPYmplY3RbImlzU2hhcmVkV29ya2VyIl07Cn0KCldlYkluc3BlY3Rvci5Xb3JrZXJNYW5hZ2VyLmlzRGVkaWNhdGVkV29ya2VyRnJvbnRlbmQgPSBmdW5jdGlvbigpCnsKICAgIHJldHVybiAhIVdlYkluc3BlY3Rvci5xdWVyeVBhcmFtc09iamVjdFsiZGVkaWNhdGVkV29ya2VySWQiXTsKfQoKV2ViSW5zcGVjdG9yLldvcmtlck1hbmFnZXIubG9hZGVkID0gZnVuY3Rpb24oKQp7CiAgICB2YXIgd29ya2VySWQgPSBXZWJJbnNwZWN0b3IucXVlcnlQYXJhbXNPYmplY3RbImRlZGljYXRlZFdvcmtlcklkIl07CiAgICBpZiAod29ya2VySWQpCiAgICAgICAgV2ViSW5zcGVjdG9yLldvcmtlck1hbmFnZXIuX2luaXRpYWxpemVEZWRpY2F0ZWRXb3JrZXJGcm9udGVuZCh3b3JrZXJJZCk7CiAgICBlbHNlCiAgICAgICAgV2ViSW5zcGVjdG9yLndvcmtlck1hbmFnZXIgPSBuZXcgV2ViSW5zcGVjdG9yLldvcmtlck1hbmFnZXIoKTsKfQoKV2ViSW5zcGVjdG9yLldvcmtlck1hbmFnZXIubG9hZENvbXBsZXRlZCA9IGZ1bmN0aW9uKCkKewogICAgLy8gTWFrZSBzdXJlIHNjcmlwdCBleGVjdXRpb24gb2YgZGVkaWNhdGVkIHdvcmtlciBpcyByZXN1bWVkIGFuZCB0aGVuIHBhdXNlZAogICAgLy8gb24gdGhlIGZpcnN0IHNjcmlwdCBzdGF0ZW1lbnQgaW4gY2FzZSB3ZSBhdXRvYXR0YWNoZWQgdG8gaXQuCiAgICBpZiAoV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0WyJ3b3JrZXJQYXVzZWQiXSkgewogICAgICAgIERlYnVnZ2VyQWdlbnQucGF1c2UoKTsKICAgICAgICBSdW50aW1lQWdlbnQucnVuKGNhbGN1bGF0ZVRpdGxlKTsKICAgIH0gZWxzZSBpZiAoV2ViSW5zcGVjdG9yLldvcmtlck1hbmFnZXIuaXNXb3JrZXJGcm9udGVuZCgpKQogICAgICAgIGNhbGN1bGF0ZVRpdGxlKCk7CgogICAgZnVuY3Rpb24gY2FsY3VsYXRlVGl0bGUoKQogICAgewogICAgICAgIFdlYkluc3BlY3Rvci5Xb3JrZXJNYW5hZ2VyLl9jYWxjdWxhdGVXb3JrZXJJbnNwZWN0b3JUaXRsZSgpOwogICAgfQoKICAgIGlmIChXZWJJbnNwZWN0b3Iud29ya2VyTWFuYWdlcikKICAgICAgICBXZWJJbnNwZWN0b3IucmVzb3VyY2VUcmVlTW9kZWwuYWRkRXZlbnRMaXN0ZW5lcihXZWJJbnNwZWN0b3IuUmVzb3VyY2VUcmVlTW9kZWwuRXZlbnRUeXBlcy5NYWluRnJhbWVOYXZpZ2F0ZWQsIFdlYkluc3BlY3Rvci53b3JrZXJNYW5hZ2VyLl9tYWluRnJhbWVOYXZpZ2F0ZWQsIFdlYkluc3BlY3Rvci53b3JrZXJNYW5hZ2VyKTsKfQoKV2ViSW5zcGVjdG9yLldvcmtlck1hbmFnZXIuX2luaXRpYWxpemVEZWRpY2F0ZWRXb3JrZXJGcm9udGVuZCA9IGZ1bmN0aW9uKHdvcmtlcklkKQp7CiAgICBmdW5jdGlvbiByZWNlaXZlTWVzc2FnZShldmVudCkKICAgIHsKICAgICAgICB2YXIgbWVzc2FnZSA9IGV2ZW50LmRhdGE7CiAgICAgICAgSW5zcGVjdG9yQmFja2VuZC5kaXNwYXRjaChtZXNzYWdlKTsKICAgIH0KICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgcmVjZWl2ZU1lc3NhZ2UsIHRydWUpOwoKCiAgICBJbnNwZWN0b3JCYWNrZW5kLnNlbmRNZXNzYWdlT2JqZWN0VG9CYWNrZW5kID0gZnVuY3Rpb24obWVzc2FnZSkKICAgIHsKICAgICAgICB3aW5kb3cub3BlbmVyLnBvc3RNZXNzYWdlKHt3b3JrZXJJZDogd29ya2VySWQsIGNvbW1hbmQ6ICJzZW5kTWVzc2FnZVRvQmFja2VuZCIsIG1lc3NhZ2U6IG1lc3NhZ2V9LCAiKiIpOwogICAgfQoKICAgIEluc3BlY3RvckZyb250ZW5kSG9zdC5sb2FkZWQgPSBmdW5jdGlvbigpCiAgICB7CiAgICAgICAgd2luZG93Lm9wZW5lci5wb3N0TWVzc2FnZSh7d29ya2VySWQ6IHdvcmtlcklkLCBjb21tYW5kOiAibG9hZGVkIn0sICIqIik7CiAgICB9Cn0KCldlYkluc3BlY3Rvci5Xb3JrZXJNYW5hZ2VyLl9jYWxjdWxhdGVXb3JrZXJJbnNwZWN0b3JUaXRsZSA9IGZ1bmN0aW9uKCkKewogICAgdmFyIGV4cHJlc3Npb24gPSAibG9jYXRpb24uaHJlZiI7CiAgICBpZiAoV2ViSW5zcGVjdG9yLnF1ZXJ5UGFyYW1zT2JqZWN0WyJpc1NoYXJlZFdvcmtlciJdKQogICAgICAgIGV4cHJlc3Npb24gKz0gIiArICh0aGlzLm5hbWUgPyAnICgnICsgdGhpcy5uYW1lICsgJyknIDogJycpIjsKICAgIFJ1bnRpbWVBZ2VudC5ldmFsdWF0ZS5pbnZva2Uoe2V4cHJlc3Npb246ZXhwcmVzc2lvbiwgZG9Ob3RQYXVzZU9uRXhjZXB0aW9uc0FuZE11dGVDb25zb2xlOnRydWUsIHJldHVybkJ5VmFsdWU6IHRydWV9LCBldmFsQ2FsbGJhY2suYmluZCh0aGlzKSk7CiAgICAKICAgIC8qKgogICAgICogQHBhcmFtIHs/UHJvdG9jb2wuRXJyb3J9IGVycm9yCiAgICAgKiBAcGFyYW0ge1J1bnRpbWVBZ2VudC5SZW1vdGVPYmplY3R9IHJlc3VsdAogICAgICogQHBhcmFtIHtib29sZWFuPX0gd2FzVGhyb3duCiAgICAgKi8KICAgIGZ1bmN0aW9uIGV2YWxDYWxsYmFjayhlcnJvciwgcmVzdWx0LCB3YXNUaHJvd24pCiAgICB7CiAgICAgICAgaWYgKGVycm9yIHx8IHdhc1Rocm93bikgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBJbnNwZWN0b3JGcm9udGVuZEhvc3QuaW5zcGVjdGVkVVJMQ2hhbmdlZChyZXN1bHQudmFsdWUpOwogICAgfQp9CgpXZWJJbnNwZWN0b3IuV29ya2VyTWFuYWdlci5FdmVudHMgPSB7CiAgICBXb3JrZXJBZGRlZDogIndvcmtlci1hZGRlZCIsCiAgICBXb3JrZXJSZW1vdmVkOiAid29ya2VyLXJlbW92ZWQiLAogICAgV29ya2Vyc0NsZWFyZWQ6ICJ3b3JrZXJzLWNsZWFyZWQiLAp9CgpXZWJJbnNwZWN0b3IuV29ya2VyTWFuYWdlci5wcm90b3R5cGUgPSB7CiAgICBfd29ya2VyQ3JlYXRlZDogZnVuY3Rpb24od29ya2VySWQsIHVybCwgaW5zcGVjdG9yQ29ubmVjdGVkKQogICAgIHsKICAgICAgICBpZiAoaW5zcGVjdG9yQ29ubmVjdGVkKQogICAgICAgICAgICB0aGlzLl9vcGVuSW5zcGVjdG9yV2luZG93KHdvcmtlcklkLCB0cnVlKTsKICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnRUb0xpc3RlbmVycyhXZWJJbnNwZWN0b3IuV29ya2VyTWFuYWdlci5FdmVudHMuV29ya2VyQWRkZWQsIHt3b3JrZXJJZDogd29ya2VySWQsIHVybDogdXJsLCBpbnNwZWN0b3JDb25uZWN0ZWQ6IGluc3BlY3RvckNvbm5lY3RlZH0pOwogICAgIH0sCgogICAgX3dvcmtlclRlcm1pbmF0ZWQ6IGZ1bmN0aW9uKHdvcmtlcklkKQogICAgIHsKICAgICAgICB0aGlzLmNsb3NlV29ya2VySW5zcGVjdG9yKHdvcmtlcklkKTsKICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnRUb0xpc3RlbmVycyhXZWJJbnNwZWN0b3IuV29ya2VyTWFuYWdlci5FdmVudHMuV29ya2VyUmVtb3ZlZCwgd29ya2VySWQpOwogICAgIH0sCgogICAgX3NlbmRNZXNzYWdlVG9Xb3JrZXJJbnNwZWN0b3I6IGZ1bmN0aW9uKHdvcmtlcklkLCBtZXNzYWdlKQogICAgewogICAgICAgIHZhciB3b3JrZXJJbnNwZWN0b3JXaW5kb3cgPSB0aGlzLl93b3JrZXJJZFRvV2luZG93W3dvcmtlcklkXTsKICAgICAgICBpZiAod29ya2VySW5zcGVjdG9yV2luZG93KQogICAgICAgICAgICB3b3JrZXJJbnNwZWN0b3JXaW5kb3cucG9zdE1lc3NhZ2UobWVzc2FnZSwgIioiKTsKICAgIH0sCgogICAgb3Blbldvcmtlckluc3BlY3RvcjogZnVuY3Rpb24od29ya2VySWQpCiAgICB7CiAgICAgICAgdmFyIGV4aXN0aW5nSW5zcGVjdG9yID0gdGhpcy5fd29ya2VySWRUb1dpbmRvd1t3b3JrZXJJZF07CiAgICAgICAgaWYgKGV4aXN0aW5nSW5zcGVjdG9yKSB7CiAgICAgICAgICAgIGV4aXN0aW5nSW5zcGVjdG9yLmZvY3VzKCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHRoaXMuX29wZW5JbnNwZWN0b3JXaW5kb3cod29ya2VySWQsIGZhbHNlKTsKICAgICAgICBXb3JrZXJBZ2VudC5jb25uZWN0VG9Xb3JrZXIod29ya2VySWQpOwogICAgfSwKCiAgICBfb3Blbkluc3BlY3RvcldpbmRvdzogZnVuY3Rpb24od29ya2VySWQsIHdvcmtlcklzUGF1c2VkKQogICAgewogICAgICAgIHZhciBzZWFyY2ggPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoOwogICAgICAgIHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7CiAgICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICAgIC8vIE1ha2Ugc3VyZSBoYXNoIGlzIGluIHJlYXIKICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShoYXNoLCAiIik7CiAgICAgICAgdXJsICs9IChzZWFyY2ggPyAiJmRlZGljYXRlZFdvcmtlcklkPSIgOiAiP2RlZGljYXRlZFdvcmtlcklkPSIpICsgd29ya2VySWQ7CiAgICAgICAgaWYgKHdvcmtlcklzUGF1c2VkKQogICAgICAgICAgICB1cmwgKz0gIiZ3b3JrZXJQYXVzZWQ9dHJ1ZSI7CiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoImRvY2tlZD10cnVlJiIsICIiKTsKICAgICAgICB1cmwgKz0gaGFzaDsKICAgICAgICB2YXIgd2lkdGggPSBXZWJJbnNwZWN0b3Iuc2V0dGluZ3Mud29ya2VySW5zcGVjdG9yV2lkdGguZ2V0KCk7CiAgICAgICAgdmFyIGhlaWdodCA9IFdlYkluc3BlY3Rvci5zZXR0aW5ncy53b3JrZXJJbnNwZWN0b3JIZWlnaHQuZ2V0KCk7CiAgICAgICAgLy8gU2V0IGxvY2F0aW9uPTAganVzdCB0byBtYWtlIHN1cmUgdGhlIGZyb250LWVuZCB3aWxsIGJlIG9wZW5lZCBpbiBhIHNlcGFyYXRlIHdpbmRvdywgbm90IGluIG5ldyB0YWIuCiAgICAgICAgdmFyIHdvcmtlckluc3BlY3RvcldpbmRvdyA9IHdpbmRvdy5vcGVuKHVybCwgdW5kZWZpbmVkLCAibG9jYXRpb249MCx3aWR0aD0iICsgd2lkdGggKyAiLGhlaWdodD0iICsgaGVpZ2h0KTsKICAgICAgICB3b3JrZXJJbnNwZWN0b3JXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgdGhpcy5fb25Xb3JrZXJJbnNwZWN0b3JSZXNpemUuYmluZCh0aGlzLCB3b3JrZXJJbnNwZWN0b3JXaW5kb3cpLCBmYWxzZSk7CiAgICAgICAgdGhpcy5fd29ya2VySWRUb1dpbmRvd1t3b3JrZXJJZF0gPSB3b3JrZXJJbnNwZWN0b3JXaW5kb3c7CiAgICAgICAgd29ya2VySW5zcGVjdG9yV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImJlZm9yZXVubG9hZCIsIHRoaXMuX3dvcmtlckluc3BlY3RvckNsb3NpbmcuYmluZCh0aGlzLCB3b3JrZXJJZCksIHRydWUpOwoKICAgICAgICAvLyBMaXN0ZW4gdG8gYmVmb3JldW5sb2FkIGluIGRldGFjaGVkIHN0YXRlIGFuZCB0byB0aGUgSW5zcGVjdG9yQ2xvc2luZyBldmVudCBpbiBjYXNlIG9mIGF0dGFjaGVkIGluc3BlY3Rvci4KICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigiYmVmb3JldW5sb2FkIiwgdGhpcy5fcGFnZUluc3BlY3RvckNsb3NpbmcuYmluZCh0aGlzKSwgdHJ1ZSk7CiAgICAgICAgV2ViSW5zcGVjdG9yLm5vdGlmaWNhdGlvbnMuYWRkRXZlbnRMaXN0ZW5lcihXZWJJbnNwZWN0b3IuRXZlbnRzLkluc3BlY3RvckNsb3NpbmcsIHRoaXMuX3BhZ2VJbnNwZWN0b3JDbG9zaW5nLCB0aGlzKTsKICAgIH0sCgogICAgY2xvc2VXb3JrZXJJbnNwZWN0b3I6IGZ1bmN0aW9uKHdvcmtlcklkKQogICAgewogICAgICAgIHZhciB3b3JrZXJJbnNwZWN0b3JXaW5kb3cgPSB0aGlzLl93b3JrZXJJZFRvV2luZG93W3dvcmtlcklkXTsKICAgICAgICBpZiAod29ya2VySW5zcGVjdG9yV2luZG93KQogICAgICAgICAgICB3b3JrZXJJbnNwZWN0b3JXaW5kb3cuY2xvc2UoKTsKICAgIH0sCgogICAgX21haW5GcmFtZU5hdmlnYXRlZDogZnVuY3Rpb24oZXZlbnQpCiAgICB7CiAgICAgICAgZm9yICh2YXIgd29ya2VySWQgaW4gdGhpcy5fd29ya2VySWRUb1dpbmRvdykKICAgICAgICAgICAgdGhpcy5jbG9zZVdvcmtlckluc3BlY3Rvcih3b3JrZXJJZCk7CiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50VG9MaXN0ZW5lcnMoV2ViSW5zcGVjdG9yLldvcmtlck1hbmFnZXIuRXZlbnRzLldvcmtlcnNDbGVhcmVkKTsKICAgIH0sCgogICAgX3BhZ2VJbnNwZWN0b3JDbG9zaW5nOiBmdW5jdGlvbigpCiAgICB7CiAgICAgICAgdGhpcy5faWdub3JlV29ya2VySW5zcGVjdG9yQ2xvc2luZyA9IHRydWU7CiAgICAgICAgZm9yICh2YXIgd29ya2VySWQgaW4gdGhpcy5fd29ya2VySWRUb1dpbmRvdykgewogICAgICAgICAgICB0aGlzLl93b3JrZXJJZFRvV2luZG93W3dvcmtlcklkXS5jbG9zZSgpOwogICAgICAgICAgICBXb3JrZXJBZ2VudC5kaXNjb25uZWN0RnJvbVdvcmtlcihwYXJzZUludCh3b3JrZXJJZCwgMTApKTsKICAgICAgICB9CiAgICB9LAoKICAgIF9vbldvcmtlckluc3BlY3RvclJlc2l6ZTogZnVuY3Rpb24od29ya2VySW5zcGVjdG9yV2luZG93KQogICAgewogICAgICAgIHZhciBkb2MgPSB3b3JrZXJJbnNwZWN0b3JXaW5kb3cuZG9jdW1lbnQ7CiAgICAgICAgV2ViSW5zcGVjdG9yLnNldHRpbmdzLndvcmtlckluc3BlY3RvcldpZHRoLnNldChkb2Mud2lkdGgpOwogICAgICAgIFdlYkluc3BlY3Rvci5zZXR0aW5ncy53b3JrZXJJbnNwZWN0b3JIZWlnaHQuc2V0KGRvYy5oZWlnaHQpOwogICAgfSwKCiAgICBfd29ya2VySW5zcGVjdG9yQ2xvc2luZzogZnVuY3Rpb24od29ya2VySWQsIGV2ZW50KQogICAgewogICAgICAgIGlmIChldmVudC50YXJnZXQubG9jYXRpb24uaHJlZiA9PT0gImFib3V0OmJsYW5rIikKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIGlmICh0aGlzLl9pZ25vcmVXb3JrZXJJbnNwZWN0b3JDbG9zaW5nKQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgZGVsZXRlIHRoaXMuX3dvcmtlcklkVG9XaW5kb3dbd29ya2VySWRdOwogICAgICAgIFdvcmtlckFnZW50LmRpc2Nvbm5lY3RGcm9tV29ya2VyKHdvcmtlcklkKTsKICAgIH0sCgogICAgX2Rpc2Nvbm5lY3RlZEZyb21Xb3JrZXI6IGZ1bmN0aW9uKCkKICAgIHsKICAgICAgICB2YXIgc2NyZWVuID0gbmV3IFdlYkluc3BlY3Rvci5Xb3JrZXJUZXJtaW5hdGVkU2NyZWVuKCk7CiAgICAgICAgV2ViSW5zcGVjdG9yLmRlYnVnZ2VyTW9kZWwuYWRkRXZlbnRMaXN0ZW5lcihXZWJJbnNwZWN0b3IuRGVidWdnZXJNb2RlbC5FdmVudHMuR2xvYmFsT2JqZWN0Q2xlYXJlZCwgc2NyZWVuLmhpZGUsIHNjcmVlbik7CiAgICAgICAgc2NyZWVuLnNob3dNb2RhbCgpOwogICAgfSwKCiAgICBfX3Byb3RvX186IFdlYkluc3BlY3Rvci5PYmplY3QucHJvdG90eXBlCn0KCi8qKgogKiBAY29uc3RydWN0b3IKICogQGltcGxlbWVudHMge1dvcmtlckFnZW50LkRpc3BhdGNoZXJ9CiAqLwpXZWJJbnNwZWN0b3IuV29ya2VyRGlzcGF0Y2hlciA9IGZ1bmN0aW9uKHdvcmtlck1hbmFnZXIpCnsKICAgIHRoaXMuX3dvcmtlck1hbmFnZXIgPSB3b3JrZXJNYW5hZ2VyOwogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCB0aGlzLl9yZWNlaXZlTWVzc2FnZS5iaW5kKHRoaXMpLCB0cnVlKTsKfQoKV2ViSW5zcGVjdG9yLldvcmtlckRpc3BhdGNoZXIucHJvdG90eXBlID0gewogICAgX3JlY2VpdmVNZXNzYWdlOiBmdW5jdGlvbihldmVudCkKICAgIHsKICAgICAgICB2YXIgd29ya2VySWQgPSBldmVudC5kYXRhWyJ3b3JrZXJJZCJdOwogICAgICAgIHdvcmtlcklkID0gcGFyc2VJbnQod29ya2VySWQsIDEwKTsKICAgICAgICB2YXIgY29tbWFuZCA9IGV2ZW50LmRhdGEuY29tbWFuZDsKICAgICAgICB2YXIgbWVzc2FnZSA9IGV2ZW50LmRhdGEubWVzc2FnZTsKCiAgICAgICAgaWYgKGNvbW1hbmQgPT0gInNlbmRNZXNzYWdlVG9CYWNrZW5kIikKICAgICAgICAgICAgV29ya2VyQWdlbnQuc2VuZE1lc3NhZ2VUb1dvcmtlcih3b3JrZXJJZCwgbWVzc2FnZSk7CiAgICB9LAoKICAgIHdvcmtlckNyZWF0ZWQ6IGZ1bmN0aW9uKHdvcmtlcklkLCB1cmwsIGluc3BlY3RvckNvbm5lY3RlZCkKICAgIHsKICAgICAgICB0aGlzLl93b3JrZXJNYW5hZ2VyLl93b3JrZXJDcmVhdGVkKHdvcmtlcklkLCB1cmwsIGluc3BlY3RvckNvbm5lY3RlZCk7CiAgICB9LAoKICAgIHdvcmtlclRlcm1pbmF0ZWQ6IGZ1bmN0aW9uKHdvcmtlcklkKQogICAgewogICAgICAgIHRoaXMuX3dvcmtlck1hbmFnZXIuX3dvcmtlclRlcm1pbmF0ZWQod29ya2VySWQpOwogICAgfSwKCiAgICBkaXNwYXRjaE1lc3NhZ2VGcm9tV29ya2VyOiBmdW5jdGlvbih3b3JrZXJJZCwgbWVzc2FnZSkKICAgIHsKICAgICAgICB0aGlzLl93b3JrZXJNYW5hZ2VyLl9zZW5kTWVzc2FnZVRvV29ya2VySW5zcGVjdG9yKHdvcmtlcklkLCBtZXNzYWdlKTsKICAgIH0sCgogICAgZGlzY29ubmVjdGVkRnJvbVdvcmtlcjogZnVuY3Rpb24oKQogICAgewogICAgICAgIHRoaXMuX3dvcmtlck1hbmFnZXIuX2Rpc2Nvbm5lY3RlZEZyb21Xb3JrZXIoKTsKICAgIH0KfQoKLyoqCiAqIEBjb25zdHJ1Y3RvcgogKiBAZXh0ZW5kcyB7V2ViSW5zcGVjdG9yLkhlbHBTY3JlZW59CiAqLwpXZWJJbnNwZWN0b3IuV29ya2VyVGVybWluYXRlZFNjcmVlbiA9IGZ1bmN0aW9uKCkKewogICAgV2ViSW5zcGVjdG9yLkhlbHBTY3JlZW4uY2FsbCh0aGlzLCBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIkluc3BlY3RlZCB3b3JrZXIgdGVybWluYXRlZCIpKTsKICAgIHZhciBwID0gdGhpcy5jb250ZW50RWxlbWVudC5jcmVhdGVDaGlsZCgicCIpOwogICAgcC5hZGRTdHlsZUNsYXNzKCJoZWxwLXNlY3Rpb24iKTsKICAgIHAudGV4dENvbnRlbnQgPSBXZWJJbnNwZWN0b3IuVUlTdHJpbmcoIkluc3BlY3RlZCB3b3JrZXIgaGFzIHRlcm1pbmF0ZWQuIE9uY2UgaXQgcmVzdGFydHMgd2Ugd2lsbCBhdHRhY2ggdG8gaXQgYXV0b21hdGljYWxseS4iKTsKfQoKV2ViSW5zcGVjdG9yLldvcmtlclRlcm1pbmF0ZWRTY3JlZW4ucHJvdG90eXBlID0gewogICAgLyoqCiAgICAgKiBAb3ZlcnJpZGUKICAgICAqLwogICAgd2lsbEhpZGU6IGZ1bmN0aW9uKCkKICAgIHsKICAgICAgICBXZWJJbnNwZWN0b3IuZGVidWdnZXJNb2RlbC5yZW1vdmVFdmVudExpc3RlbmVyKFdlYkluc3BlY3Rvci5EZWJ1Z2dlck1vZGVsLkV2ZW50cy5HbG9iYWxPYmplY3RDbGVhcmVkLCB0aGlzLmhpZGUsIHRoaXMpOwogICAgICAgIFdlYkluc3BlY3Rvci5IZWxwU2NyZWVuLnByb3RvdHlwZS53aWxsSGlkZS5jYWxsKHRoaXMpOwogICAgfSwKCiAgICBfX3Byb3RvX186IFdlYkluc3BlY3Rvci5IZWxwU2NyZWVuLnByb3RvdHlwZQp9Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 21:49:58 GMT",
                    "Content-Length": "10960",
                    "Date": "Fri, 07 Nov 2014 21:50:47 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}