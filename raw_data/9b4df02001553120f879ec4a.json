{
    "url": "http://localhost:9999/Yann29/bower-ol3/examples/",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.location.search</b> and written to <b>the 'value' property of a DOM element</b> via the following statements:<ul><li>var list = window.location.search.substring(1).split(\"&amp;\");</li><li>var pair = list[i].split(\"=\");</li><li>params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);</li><li>input.value = params[\"q\"];</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/Yann29/bower-ol3/examples/",
                "path": "/Yann29/bower-ol3/examples/",
                "httpVersion": "HTTP/0.0",
                "method": "GET",
                "headers": {
                    "Referer": "http://localhost:9999/Yann29/bower-ol3/examples",
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9ZYW5uMjkvYm93ZXItb2wzL2V4YW1wbGVzLyBIVFRQLzAuMA0KSG9zdDogbG9jYWxob3N0Ojk5OTkNClJlZmVyZXI6IGh0dHA6Ly9sb2NhbGhvc3Q6OTk5OS9ZYW5uMjkvYm93ZXItb2wzL2V4YW1wbGVzDQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNjQzMg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04DQpEYXRlOiBGcmksIDA3IE5vdiAyMDE0IDIxOjE5OjU1IEdNVA0KTGFzdC1Nb2RpZmllZDogRnJpLCAwNyBOb3YgMjAxNCAyMToxOTo1NSBHTVQNCg0KPCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iY2hyb21lPTEiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9ImluaXRpYWwtc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPW5vLCB3aWR0aD1kZXZpY2Utd2lkdGgiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIuLi9jc3Mvb2wuY3NzIiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii4uL3Jlc291cmNlcy9ib290c3RyYXAvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii4uL3Jlc291cmNlcy9sYXlvdXQuY3NzIiB0eXBlPSJ0ZXh0L2NzcyI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii4uL3Jlc291cmNlcy9ib290c3RyYXAvY3NzL2Jvb3RzdHJhcC1yZXNwb25zaXZlLm1pbi5jc3MiIHR5cGU9InRleHQvY3NzIj4KICAgIDxzdHlsZT4KICAgICAgLmV4YW1wbGUgewogICAgICAgIGhlaWdodDogMTQwcHg7CiAgICAgICAgcGFkZGluZzogM3B4OwogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7CiAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4OwogICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgICAgICAgb3ZlcmZsb3c6IGF1dG87CiAgICAgIH0KICAgICAgLmV4YW1wbGU6aG92ZXIgewogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7CiAgICAgIH0KICAgICAgLm5hdmJhci1zZWFyY2gucHVsbC1sZWZ0IHsKICAgICAgICBwYWRkaW5nOiA1cHg7CiAgICAgIH0KCiAgICAgIDo6LXdlYmtpdC1zY3JvbGxiYXIgewogICAgICAgIHdpZHRoOiA4cHg7CiAgICAgIH0KCiAgICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItYnV0dG9uIHsKICAgICAgICB3aWR0aDogMDsKICAgICAgICBoZWlnaHQ6IDA7CiAgICAgICAgZGlzcGxheTogbm9uZTsKICAgICAgfQoKICAgICAgOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjIpOwogICAgICAgIC13ZWJraXQtYm94LXNoYWRvdzogaW5zZXQgMXB4IDFweCAwIHJnYmEoMCwgMCwgMCwgMC4xMCksaW5zZXQgMCAtMXB4IDAgcmdiYSgwLCAwLCAwLCAwLjA3KTsKICAgICAgfQoKICAgICAgOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjpob3ZlciB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjQpOwogICAgICB9CgogICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgICAgIH0KICAgIDwvc3R5bGU+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJKdWdsLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImV4YW1wbGUtbGlzdC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgIHZhciB0ZW1wbGF0ZSwgdGFyZ2V0OwoKICAgICAgZnVuY3Rpb24gbGlzdEV4YW1wbGVzKGV4YW1wbGVzKSB7CiAgICAgICAgdGFyZ2V0LmlubmVySFRNTCA9ICIiOwogICAgICAgIHZhciBub2RlID0gdGVtcGxhdGUucHJvY2Vzcyh7CiAgICAgICAgICBjb250ZXh0OiB7ZXhhbXBsZXM6IGV4YW1wbGVzfSwKICAgICAgICAgIGNsb25lOiB0cnVlLAogICAgICAgICAgcGFyZW50OiB0YXJnZXQKICAgICAgICB9KTsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY291bnQiKS5pbm5lckhUTUwgPSAiKCIgKyBleGFtcGxlcy5sZW5ndGggKyAiKSI7CiAgICAgIH0KCiAgICAgIHZhciB0aW1lcklkOwogICAgICBmdW5jdGlvbiBpbnB1dENoYW5nZSgpIHsKICAgICAgICBpZiAodGltZXJJZCkgewogICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lcklkKTsKICAgICAgICB9CiAgICAgICAgdmFyIHRleHQgPSB0aGlzLnZhbHVlOwogICAgICAgIHRpbWVySWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgIGZpbHRlckxpc3QodGV4dCk7CiAgICAgICAgfSwgNTAwKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gZmlsdGVyTGlzdCh0ZXh0KSB7CiAgICAgICAgdmFyIGV4YW1wbGVzOwogICAgICAgIGlmICh0ZXh0Lmxlbmd0aCA8IDIpIHsKICAgICAgICAgIGV4YW1wbGVzID0gaW5mby5leGFtcGxlczsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHdvcmRzID0gdGV4dC5zcGxpdCgvXFcrLyk7CiAgICAgICAgICB2YXIgc2NvcmVzID0ge307CiAgICAgICAgICBmb3IodmFyIGk9MDsgaTx3b3Jkcy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICB2YXIgd29yZCA9IHdvcmRzW2ldLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgIHZhciBkaWN0ID0gaW5mby5pbmRleFt3b3JkXTsKICAgICAgICAgICAgdmFyIHVwZGF0ZVNjb3JlcyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGZvcihleEluZGV4IGluIGRpY3QpIHsKICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IGRpY3RbZXhJbmRleF07CiAgICAgICAgICAgICAgICBpZihzY29yZXNbZXhJbmRleF0pIHsKICAgICAgICAgICAgICAgICAgaWYoc2NvcmVzW2V4SW5kZXhdW3dvcmRdKSB7CiAgICAgICAgICAgICAgICAgICAgc2NvcmVzW2V4SW5kZXhdW3dvcmRdICs9IGNvdW50OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNjb3Jlc1tleEluZGV4XVt3b3JkXSA9IGNvdW50OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBzY29yZXNbZXhJbmRleF0gPSB7fTsKICAgICAgICAgICAgICAgICAgc2NvcmVzW2V4SW5kZXhdW3dvcmRdID0gY291bnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAoZGljdCkgewogICAgICAgICAgICAgIHVwZGF0ZVNjb3JlcygpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciByOwogICAgICAgICAgICAgIGZvciAoaWR4IGluIGluZm8uaW5kZXgpIHsKICAgICAgICAgICAgICAgIHIgPSBuZXcgUmVnRXhwKHdvcmQpOwogICAgICAgICAgICAgICAgaWYgKHIudGVzdChpZHgpKSB7CiAgICAgICAgICAgICAgICAgIGRpY3QgPSBpbmZvLmluZGV4W2lkeF07CiAgICAgICAgICAgICAgICAgIHVwZGF0ZVNjb3JlcygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgZXhhbXBsZXMgPSBbXTsKICAgICAgICAgIGZvciAodmFyIGogaW4gc2NvcmVzKSB7CiAgICAgICAgICAgIHZhciBleCA9IGluZm8uZXhhbXBsZXNbal07CiAgICAgICAgICAgIGV4LnNjb3JlID0gc2NvcmVzW2pdOwogICAgICAgICAgICBleGFtcGxlcy5wdXNoKGV4KTsKICAgICAgICAgIH0KICAgICAgICAgIC8vIHNvcnQgZXhhbXBsZXMgYnkgZmlyc3QgYnkgbnVtYmVyIG9mIHdvcmRzIG1hdGNoZWQsIHRoZW4KICAgICAgICAgIC8vIGJ5IHdvcmQgZnJlcXVlbmN5CiAgICAgICAgICBleGFtcGxlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgdmFyIGNtcDsKICAgICAgICAgICAgdmFyIGFXb3JkcyA9IDAsIGJXb3JkcyA9IDA7CiAgICAgICAgICAgIHZhciBhU2NvcmUgPSAwLCBiU2NvcmUgPSAwOwogICAgICAgICAgICBmb3IgKHZhciBpIGluIGEuc2NvcmUpIHsKICAgICAgICAgICAgICBhU2NvcmUgKz0gYS5zY29yZVtpXTsKICAgICAgICAgICAgICBhV29yZHMgKz0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHZhciBqIGluIGIuc2NvcmUpIHsKICAgICAgICAgICAgICBiU2NvcmUgKz0gYi5zY29yZVtqXTsKICAgICAgICAgICAgICBiV29yZHMgKz0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYVdvcmRzID09IGJXb3JkcykgewogICAgICAgICAgICAgIGNtcCA9IGJTY29yZSAtIGFTY29yZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjbXAgPSBiV29yZHMgLSBhV29yZHM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGNtcDsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBsaXN0RXhhbXBsZXMoZXhhbXBsZXMpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBwYXJzZVF1ZXJ5KCkgewogICAgICAgIHZhciBwYXJhbXMgPSB7fTsKICAgICAgICB2YXIgbGlzdCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLnNwbGl0KCImIik7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7CiAgICAgICAgICB2YXIgcGFpciA9IGxpc3RbaV0uc3BsaXQoIj0iKTsKICAgICAgICAgIGlmIChwYWlyLmxlbmd0aCA9PSAyKSB7CiAgICAgICAgICAgIHBhcmFtc1tkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAocGFyYW1zWyJxIl0pIHsKICAgICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJrZXl3b3JkcyIpOwogICAgICAgICAgaW5wdXQudmFsdWUgPSBwYXJhbXNbInEiXTsKICAgICAgICAgIGlucHV0Q2hhbmdlLmNhbGwoaW5wdXQpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5mby5leGFtcGxlcy5sZW5ndGg7ICsraSkgewogICAgICAgICAgaW5mby5leGFtcGxlc1tpXS5saW5rICs9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7CiAgICAgICAgfQogICAgICAgIC8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrZXl3b3JkcycpLmZvY3VzKCk7CiAgICAgICAgdGVtcGxhdGUgPSBuZXcganVnbC5UZW1wbGF0ZSgidGVtcGxhdGUiKTsKICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZXhhbXBsZXMiKTsKICAgICAgICBsaXN0RXhhbXBsZXMoaW5mby5leGFtcGxlcyk7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImtleXdvcmRzIikub25rZXl1cCA9IGlucHV0Q2hhbmdlOwogICAgICAgIHBhcnNlUXVlcnkoKTsKICAgICAgfTsKICAgIDwvc2NyaXB0PgoKICAgIDx0aXRsZT5PcGVuTGF5ZXJzIDMgRXhhbXBsZXM8L3RpdGxlPgogIDwvaGVhZD4KICA8Ym9keT4KCiAgICA8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWludmVyc2UgbmF2YmFyLWZpeGVkLXRvcCI+CiAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1pbm5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgIDxhIGNsYXNzPSJicmFuZCIgaHJlZj0iLi8iPjxpbWcgc3JjPSIuLi9yZXNvdXJjZXMvbG9nby5wbmciPiBPcGVuTGF5ZXJzIDMgRXhhbXBsZXM8L2E+CiAgICAgICAgICA8Zm9ybSBjbGFzcz0ibmF2YmFyLXNlYXJjaCBwdWxsLWxlZnQiPgogICAgICAgICAgICA8aW5wdXQgbmFtZT0icSIgdHlwZT0idGV4dCIgaWQ9ImtleXdvcmRzIiBjbGFzcz0ic2VhcmNoLXF1ZXJ5IiBwbGFjZWhvbGRlcj0iU2VhcmNoIj4KICAgICAgICAgICAgPHNwYW4gaWQ9ImNvdW50Ij48L3NwYW4+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KCiAgICAgIDxkaXYgaWQ9ImV4YW1wbGVzIj48L2Rpdj4KCiAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KICAgICAgICA8ZGl2IGlkPSJ0ZW1wbGF0ZSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJzcGFuNCBleGFtcGxlIiBqdWdsOnJlcGVhdD0iZXhhbXBsZSBleGFtcGxlcyI+CiAgICAgICAgICAgIDxhIGp1Z2w6YXR0cmlidXRlcz0iaHJlZiBleGFtcGxlLmxpbmsiIGNsYXNzPSJtYWlubGluayI+CiAgICAgICAgICAgICAgPHN0cm9uZz48c3BhbiBqdWdsOnJlcGxhY2U9ImV4YW1wbGUudGl0bGUiPnRpdGxlPC9zcGFuPjwvc3Ryb25nPjxicj4KICAgICAgICAgICAgICA8c21hbGwganVnbDpjb250ZW50PSInKCcgKyBleGFtcGxlLmV4YW1wbGUgKyAnKSciPjwvc21hbGw+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPHA+PGRpdiBqdWdsOmNvbnRlbnQ9ImV4YW1wbGUuc2hvcnRkZXNjIj48L2Rpdj48L3A+CiAgICAgICAgICAgIDxwPjxzbWFsbCBqdWdsOmNvbnRlbnQ9Iid0YWdzOiAnICsgZXhhbXBsZS50YWdzIj48L3NtYWxsPjwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KICA8L2JvZHk+CjwvaHRtbD4K",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 21:19:55 GMT",
                    "Content-Length": "6432",
                    "Date": "Fri, 07 Nov 2014 21:19:55 GMT",
                    "Content-Type": "text/html; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "HTML",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}