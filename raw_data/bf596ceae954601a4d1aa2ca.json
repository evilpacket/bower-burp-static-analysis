{
    "url": "http://localhost:9999/mixxen/cesiumjs/Build/Documentation/Matrix4.html",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>window.location.href</b> and written to <b>the 'href' property of a DOM element</b> via the following statement:<ul><li>ele.href = window.location.href;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/mixxen/cesiumjs/Build/Documentation/Matrix4.html",
                "path": "/mixxen/cesiumjs/Build/Documentation/Matrix4.html",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9taXh4ZW4vY2VzaXVtanMvQnVpbGQvRG9jdW1lbnRhdGlvbi9NYXRyaXg0Lmh0bWwgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "HTTP/1.1 200 OK
Content-Length: 210044
Accept-Ranges: bytes
Content-Type: text/html; charset=utf-8
Date: Thu, 06 Nov 2014 14:54:46 GMT
Last-Modified: Thu, 06 Nov 2014 14:54:25 GMT

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <title>Matrix4 - Cesium Documentation</title>

    <!--[if lt IE 9]>
      <script src="javascript/html5.js"></script>
    <![endif]-->
    <link href="styles/jsdoc-default.css" rel="stylesheet">
    <link href="styles/prism.css" rel="stylesheet">
</head>
<body>

<div id="bkgd">

<div class="nav">
    <div class="menu">
        <a href="index.html"><img id="cesium-logo" src="images/CesiumLogo.jpg" class="menuLogo"></a>
        <div class="divider"></div>

        <input type="text" class="classFilter" id="ClassFilter" placeholder="Filter">

        <ul id="ClassList"><li data-name="Animation"><a href="Animation.html">Animation</a></li><li data-name="AnimationViewModel"><a href="AnimationViewModel.html">AnimationViewModel</a></li><li data-name="Appearance"><a href="Appearance.html">Appearance</a></li><li data-name="ArcGisImageServerTerrainProvider"><a href="ArcGisImageServerTerrainProvider.html">ArcGisImageServerTerrainProvider</a></li><li data-name="ArcGisMapServerImageryProvider"><a href="ArcGisMapServerImageryProvider.html">ArcGisMapServerImageryProvider</a></li><li data-name="AssociativeArray"><a href="AssociativeArray.html">AssociativeArray</a></li><li data-name="AxisAlignedBoundingBox"><a href="AxisAlignedBoundingBox.html">AxisAlignedBoundingBox</a></li><li data-name="barycentricCoordinates"><a href="barycentricCoordinates.html">barycentricCoordinates</a></li><li data-name="BaseLayerPicker"><a href="BaseLayerPicker.html">BaseLayerPicker</a></li><li data-name="BaseLayerPickerViewModel"><a href="BaseLayerPickerViewModel.html">BaseLayerPickerViewModel</a></li><li data-name="Billboard"><a href="Billboard.html">Billboard</a></li><li data-name="BillboardCollection"><a href="BillboardCollection.html">BillboardCollection</a></li><li data-name="BillboardGraphics"><a href="BillboardGraphics.html">BillboardGraphics</a></li><li data-name="BillboardVisualizer"><a href="BillboardVisualizer.html">BillboardVisualizer</a></li><li data-name="binarySearch"><a href="binarySearch.html">binarySearch</a></li><li data-name="BingMapsImageryProvider"><a href="BingMapsImageryProvider.html">BingMapsImageryProvider</a></li><li data-name="BingMapsStyle"><a href="BingMapsStyle.html">BingMapsStyle</a></li><li data-name="BlendEquation"><a href="BlendEquation.html">BlendEquation</a></li><li data-name="BlendFunction"><a href="BlendFunction.html">BlendFunction</a></li><li data-name="BlendingState"><a href="BlendingState.html">BlendingState</a></li><li data-name="BoundingRectangle"><a href="BoundingRectangle.html">BoundingRectangle</a></li><li data-name="BoundingSphere"><a href="BoundingSphere.html">BoundingSphere</a></li><li data-name="BoxGeometry"><a href="BoxGeometry.html">BoxGeometry</a></li><li data-name="BoxOutlineGeometry"><a href="BoxOutlineGeometry.html">BoxOutlineGeometry</a></li><li data-name="Camera"><a href="Camera.html">Camera</a></li><li data-name="CameraEventAggregator"><a href="CameraEventAggregator.html">CameraEventAggregator</a></li><li data-name="CameraEventType"><a href="CameraEventType.html">CameraEventType</a></li><li data-name="cancelAnimationFrame"><a href="cancelAnimationFrame.html">cancelAnimationFrame</a></li><li data-name="Cartesian2"><a href="Cartesian2.html">Cartesian2</a></li><li data-name="Cartesian3"><a href="Cartesian3.html">Cartesian3</a></li><li data-name="Cartesian4"><a href="Cartesian4.html">Cartesian4</a></li><li data-name="Cartographic"><a href="Cartographic.html">Cartographic</a></li><li data-name="CatmullRomSpline"><a href="CatmullRomSpline.html">CatmullRomSpline</a></li><li data-name="CesiumInspector"><a href="CesiumInspector.html">CesiumInspector</a></li><li data-name="CesiumInspectorViewModel"><a href="CesiumInspectorViewModel.html">CesiumInspectorViewModel</a></li><li data-name="CesiumMath"><a href="CesiumMath.html">CesiumMath</a></li><li data-name="CesiumTerrainProvider"><a href="CesiumTerrainProvider.html">CesiumTerrainProvider</a></li><li data-name="CesiumWidget"><a href="CesiumWidget.html">CesiumWidget</a></li><li data-name="CircleGeometry"><a href="CircleGeometry.html">CircleGeometry</a></li><li data-name="CircleOutlineGeometry"><a href="CircleOutlineGeometry.html">CircleOutlineGeometry</a></li><li data-name="Clock"><a href="Clock.html">Clock</a></li><li data-name="ClockRange"><a href="ClockRange.html">ClockRange</a></li><li data-name="ClockStep"><a href="ClockStep.html">ClockStep</a></li><li data-name="ClockViewModel"><a href="ClockViewModel.html">ClockViewModel</a></li><li data-name="clone"><a href="clone.html">clone</a></li><li data-name="Color"><a href="Color.html">Color</a></li><li data-name="ColorGeometryInstanceAttribute"><a href="ColorGeometryInstanceAttribute.html">ColorGeometryInstanceAttribute</a></li><li data-name="ColorMaterialProperty"><a href="ColorMaterialProperty.html">ColorMaterialProperty</a></li><li data-name="combine"><a href="combine.html">combine</a></li><li data-name="Command"><a href="Command.html">Command</a></li><li data-name="ComponentDatatype"><a href="ComponentDatatype.html">ComponentDatatype</a></li><li data-name="CompositeEntityCollection"><a href="CompositeEntityCollection.html">CompositeEntityCollection</a></li><li data-name="CompositeMaterialProperty"><a href="CompositeMaterialProperty.html">CompositeMaterialProperty</a></li><li data-name="CompositePositionProperty"><a href="CompositePositionProperty.html">CompositePositionProperty</a></li><li data-name="CompositeProperty"><a href="CompositeProperty.html">CompositeProperty</a></li><li data-name="ConstantPositionProperty"><a href="ConstantPositionProperty.html">ConstantPositionProperty</a></li><li data-name="ConstantProperty"><a href="ConstantProperty.html">ConstantProperty</a></li><li data-name="CornerType"><a href="CornerType.html">CornerType</a></li><li data-name="CorridorGeometry"><a href="CorridorGeometry.html">CorridorGeometry</a></li><li data-name="CorridorOutlineGeometry"><a href="CorridorOutlineGeometry.html">CorridorOutlineGeometry</a></li><li data-name="createCommand"><a href="createCommand.html">createCommand</a></li><li data-name="createGuid"><a href="createGuid.html">createGuid</a></li><li data-name="createTaskProcessorWorker"><a href="createTaskProcessorWorker.html">createTaskProcessorWorker</a></li><li data-name="Credit"><a href="Credit.html">Credit</a></li><li data-name="CreditDisplay"><a href="CreditDisplay.html">CreditDisplay</a></li><li data-name="CubicRealPolynomial"><a href="CubicRealPolynomial.html">CubicRealPolynomial</a></li><li data-name="CullFace"><a href="CullFace.html">CullFace</a></li><li data-name="CullingVolume"><a href="CullingVolume.html">CullingVolume</a></li><li data-name="CylinderGeometry"><a href="CylinderGeometry.html">CylinderGeometry</a></li><li data-name="CylinderOutlineGeometry"><a href="CylinderOutlineGeometry.html">CylinderOutlineGeometry</a></li><li data-name="CzmlDataSource"><a href="CzmlDataSource.html">CzmlDataSource</a></li><li data-name="DataSource"><a href="DataSource.html">DataSource</a></li><li data-name="DataSourceClock"><a href="DataSourceClock.html">DataSourceClock</a></li><li data-name="DataSourceCollection"><a href="DataSourceCollection.html">DataSourceCollection</a></li><li data-name="DataSourceDisplay"><a href="DataSourceDisplay.html">DataSourceDisplay</a></li><li data-name="DebugAppearance"><a href="DebugAppearance.html">DebugAppearance</a></li><li data-name="DebugModelMatrixPrimitive"><a href="DebugModelMatrixPrimitive.html">DebugModelMatrixPrimitive</a></li><li data-name="DefaultProxy"><a href="DefaultProxy.html">DefaultProxy</a></li><li data-name="defaultValue"><a href="defaultValue.html">defaultValue</a></li><li data-name="defined"><a href="defined.html">defined</a></li><li data-name="DepthFunction"><a href="DepthFunction.html">DepthFunction</a></li><li data-name="destroyObject"><a href="destroyObject.html">destroyObject</a></li><li data-name="DeveloperError"><a href="DeveloperError.html">DeveloperError</a></li><li data-name="DiscardMissingTileImagePolicy"><a href="DiscardMissingTileImagePolicy.html">DiscardMissingTileImagePolicy</a></li><li data-name="DynamicGeometryUpdater"><a href="DynamicGeometryUpdater.html">DynamicGeometryUpdater</a></li><li data-name="EllipseGeometry"><a href="EllipseGeometry.html">EllipseGeometry</a></li><li data-name="EllipseGeometryUpdater"><a href="EllipseGeometryUpdater.html">EllipseGeometryUpdater</a></li><li data-name="EllipseGraphics"><a href="EllipseGraphics.html">EllipseGraphics</a></li><li data-name="EllipseOutlineGeometry"><a href="EllipseOutlineGeometry.html">EllipseOutlineGeometry</a></li><li data-name="Ellipsoid"><a href="Ellipsoid.html">Ellipsoid</a></li><li data-name="EllipsoidGeodesic"><a href="EllipsoidGeodesic.html">EllipsoidGeodesic</a></li><li data-name="EllipsoidGeometry"><a href="EllipsoidGeometry.html">EllipsoidGeometry</a></li><li data-name="EllipsoidGeometryUpdater"><a href="EllipsoidGeometryUpdater.html">EllipsoidGeometryUpdater</a></li><li data-name="EllipsoidGraphics"><a href="EllipsoidGraphics.html">EllipsoidGraphics</a></li><li data-name="EllipsoidOutlineGeometry"><a href="EllipsoidOutlineGeometry.html">EllipsoidOutlineGeometry</a></li><li data-name="EllipsoidPrimitive"><a href="EllipsoidPrimitive.html">EllipsoidPrimitive</a></li><li data-name="EllipsoidSurfaceAppearance"><a href="EllipsoidSurfaceAppearance.html">EllipsoidSurfaceAppearance</a></li><li data-name="EllipsoidTangentPlane"><a href="EllipsoidTangentPlane.html">EllipsoidTangentPlane</a></li><li data-name="EllipsoidTerrainProvider"><a href="EllipsoidTerrainProvider.html">EllipsoidTerrainProvider</a></li><li data-name="Entity"><a href="Entity.html">Entity</a></li><li data-name="EntityCollection"><a href="EntityCollection.html">EntityCollection</a></li><li data-name="EntityView"><a href="EntityView.html">EntityView</a></li><li data-name="Event"><a href="Event.html">Event</a></li><li data-name="EventHelper"><a href="EventHelper.html">EventHelper</a></li><li data-name="ExtrapolationType"><a href="ExtrapolationType.html">ExtrapolationType</a></li><li data-name="FeatureDetection"><a href="FeatureDetection.html">FeatureDetection</a></li><li data-name="formatError"><a href="formatError.html">formatError</a></li><li data-name="FrameRateMonitor"><a href="FrameRateMonitor.html">FrameRateMonitor</a></li><li data-name="Fullscreen"><a href="Fullscreen.html">Fullscreen</a></li><li data-name="FullscreenButton"><a href="FullscreenButton.html">FullscreenButton</a></li><li data-name="FullscreenButtonViewModel"><a href="FullscreenButtonViewModel.html">FullscreenButtonViewModel</a></li><li data-name="Geocoder"><a href="Geocoder.html">Geocoder</a></li><li data-name="GeocoderViewModel"><a href="GeocoderViewModel.html">GeocoderViewModel</a></li><li data-name="GeographicProjection"><a href="GeographicProjection.html">GeographicProjection</a></li><li data-name="GeographicTilingScheme"><a href="GeographicTilingScheme.html">GeographicTilingScheme</a></li><li data-name="GeoJsonDataSource"><a href="GeoJsonDataSource.html">GeoJsonDataSource</a></li><li data-name="Geometry"><a href="Geometry.html">Geometry</a></li><li data-name="GeometryAttribute"><a href="GeometryAttribute.html">GeometryAttribute</a></li><li data-name="GeometryAttributes"><a href="GeometryAttributes.html">GeometryAttributes</a></li><li data-name="GeometryInstance"><a href="GeometryInstance.html">GeometryInstance</a></li><li data-name="GeometryInstanceAttribute"><a href="GeometryInstanceAttribute.html">GeometryInstanceAttribute</a></li><li data-name="GeometryPipeline"><a href="GeometryPipeline.html">GeometryPipeline</a></li><li data-name="GeometryUpdater"><a href="GeometryUpdater.html">GeometryUpdater</a></li><li data-name="GeometryVisualizer"><a href="GeometryVisualizer.html">GeometryVisualizer</a></li><li data-name="getFilenameFromUri"><a href="getFilenameFromUri.html">getFilenameFromUri</a></li><li data-name="getImagePixels"><a href="getImagePixels.html">getImagePixels</a></li><li data-name="getTimestamp"><a href="getTimestamp.html">getTimestamp</a></li><li data-name="Globe"><a href="Globe.html">Globe</a></li><li data-name="GoogleEarthImageryProvider"><a href="GoogleEarthImageryProvider.html">GoogleEarthImageryProvider</a></li><li data-name="GregorianDate"><a href="GregorianDate.html">GregorianDate</a></li><li data-name="GridImageryProvider"><a href="GridImageryProvider.html">GridImageryProvider</a></li><li data-name="GridMaterialProperty"><a href="GridMaterialProperty.html">GridMaterialProperty</a></li><li data-name="HeightmapTerrainData"><a href="HeightmapTerrainData.html">HeightmapTerrainData</a></li><li data-name="HeightmapTessellator"><a href="HeightmapTessellator.html">HeightmapTessellator</a></li><li data-name="HermitePolynomialApproximation"><a href="HermitePolynomialApproximation.html">HermitePolynomialApproximation</a></li><li data-name="HermiteSpline"><a href="HermiteSpline.html">HermiteSpline</a></li><li data-name="HomeButton"><a href="HomeButton.html">HomeButton</a></li><li data-name="HomeButtonViewModel"><a href="HomeButtonViewModel.html">HomeButtonViewModel</a></li><li data-name="HorizontalOrigin"><a href="HorizontalOrigin.html">HorizontalOrigin</a></li><li data-name="ImageMaterialProperty"><a href="ImageMaterialProperty.html">ImageMaterialProperty</a></li><li data-name="ImageryLayer"><a href="ImageryLayer.html">ImageryLayer</a></li><li data-name="ImageryLayerCollection"><a href="ImageryLayerCollection.html">ImageryLayerCollection</a></li><li data-name="ImageryLayerFeatureInfo"><a href="ImageryLayerFeatureInfo.html">ImageryLayerFeatureInfo</a></li><li data-name="ImageryProvider"><a href="ImageryProvider.html">ImageryProvider</a></li><li data-name="IndexDatatype"><a href="IndexDatatype.html">IndexDatatype</a></li><li data-name="InfoBox"><a href="InfoBox.html">InfoBox</a></li><li data-name="InfoBoxViewModel"><a href="InfoBoxViewModel.html">InfoBoxViewModel</a></li><li data-name="InterpolationAlgorithm"><a href="InterpolationAlgorithm.html">InterpolationAlgorithm</a></li><li data-name="Intersect"><a href="Intersect.html">Intersect</a></li><li data-name="Intersections2D"><a href="Intersections2D.html">Intersections2D</a></li><li data-name="IntersectionTests"><a href="IntersectionTests.html">IntersectionTests</a></li><li data-name="Interval"><a href="Interval.html">Interval</a></li><li data-name="isArray"><a href="isArray.html">isArray</a></li><li data-name="Iso8601"><a href="Iso8601.html">Iso8601</a></li><li data-name="jsonp"><a href="jsonp.html">jsonp</a></li><li data-name="JulianDate"><a href="JulianDate.html">JulianDate</a></li><li data-name="KeyboardEventModifier"><a href="KeyboardEventModifier.html">KeyboardEventModifier</a></li><li data-name="Label"><a href="Label.html">Label</a></li><li data-name="LabelCollection"><a href="LabelCollection.html">LabelCollection</a></li><li data-name="LabelGraphics"><a href="LabelGraphics.html">LabelGraphics</a></li><li data-name="LabelStyle"><a href="LabelStyle.html">LabelStyle</a></li><li data-name="LabelVisualizer"><a href="LabelVisualizer.html">LabelVisualizer</a></li><li data-name="LagrangePolynomialApproximation"><a href="LagrangePolynomialApproximation.html">LagrangePolynomialApproximation</a></li><li data-name="LeapSecond"><a href="LeapSecond.html">LeapSecond</a></li><li data-name="LinearApproximation"><a href="LinearApproximation.html">LinearApproximation</a></li><li data-name="LinearSpline"><a href="LinearSpline.html">LinearSpline</a></li><li data-name="loadArrayBuffer"><a href="loadArrayBuffer.html">loadArrayBuffer</a></li><li data-name="loadBlob"><a href="loadBlob.html">loadBlob</a></li><li data-name="loadImage"><a href="loadImage.html">loadImage</a></li><li data-name="loadImageViaBlob"><a href="loadImageViaBlob.html">loadImageViaBlob</a></li><li data-name="loadJson"><a href="loadJson.html">loadJson</a></li><li data-name="loadText"><a href="loadText.html">loadText</a></li><li data-name="loadWithXhr"><a href="loadWithXhr.html">loadWithXhr</a></li><li data-name="loadXML"><a href="loadXML.html">loadXML</a></li><li data-name="MapProjection"><a href="MapProjection.html">MapProjection</a></li><li data-name="Material"><a href="Material.html">Material</a></li><li data-name="MaterialAppearance"><a href="MaterialAppearance.html">MaterialAppearance</a></li><li data-name="MaterialProperty"><a href="MaterialProperty.html">MaterialProperty</a></li><li data-name="Matrix2"><a href="Matrix2.html">Matrix2</a></li><li data-name="Matrix3"><a href="Matrix3.html">Matrix3</a></li><li data-name="Matrix4"><a href="Matrix4.html">Matrix4</a></li><li data-name="mergeSort"><a href="mergeSort.html">mergeSort</a></li><li data-name="Model"><a href="Model.html">Model</a></li><li data-name="ModelAnimation"><a href="ModelAnimation.html">ModelAnimation</a></li><li data-name="ModelAnimationCollection"><a href="ModelAnimationCollection.html">ModelAnimationCollection</a></li><li data-name="ModelAnimationLoop"><a href="ModelAnimationLoop.html">ModelAnimationLoop</a></li><li data-name="ModelGraphics"><a href="ModelGraphics.html">ModelGraphics</a></li><li data-name="ModelMaterial"><a href="ModelMaterial.html">ModelMaterial</a></li><li data-name="ModelMesh"><a href="ModelMesh.html">ModelMesh</a></li><li data-name="ModelNode"><a href="ModelNode.html">ModelNode</a></li><li data-name="ModelVisualizer"><a href="ModelVisualizer.html">ModelVisualizer</a></li><li data-name="Moon"><a href="Moon.html">Moon</a></li><li data-name="NavigationHelpButton"><a href="NavigationHelpButton.html">NavigationHelpButton</a></li><li data-name="NavigationHelpButtonViewModel"><a href="NavigationHelpButtonViewModel.html">NavigationHelpButtonViewModel</a></li><li data-name="NearFarScalar"><a href="NearFarScalar.html">NearFarScalar</a></li><li data-name="NeverTileDiscardPolicy"><a href="NeverTileDiscardPolicy.html">NeverTileDiscardPolicy</a></li><li data-name="ObjectOrientedBoundingBox"><a href="ObjectOrientedBoundingBox.html">ObjectOrientedBoundingBox</a></li><li data-name="Occluder"><a href="Occluder.html">Occluder</a></li><li data-name="OpenStreetMapImageryProvider"><a href="OpenStreetMapImageryProvider.html">OpenStreetMapImageryProvider</a></li><li data-name="OrthographicFrustum"><a href="OrthographicFrustum.html">OrthographicFrustum</a></li><li data-name="Packable"><a href="Packable.html">Packable</a></li><li data-name="PackableForInterpolation"><a href="PackableForInterpolation.html">PackableForInterpolation</a></li><li data-name="PathGraphics"><a href="PathGraphics.html">PathGraphics</a></li><li data-name="PathVisualizer"><a href="PathVisualizer.html">PathVisualizer</a></li><li data-name="PerformanceWatchdog"><a href="PerformanceWatchdog.html">PerformanceWatchdog</a></li><li data-name="PerformanceWatchdogViewModel"><a href="PerformanceWatchdogViewModel.html">PerformanceWatchdogViewModel</a></li><li data-name="PerInstanceColorAppearance"><a href="PerInstanceColorAppearance.html">PerInstanceColorAppearance</a></li><li data-name="PerspectiveFrustum"><a href="PerspectiveFrustum.html">PerspectiveFrustum</a></li><li data-name="PerspectiveOffCenterFrustum"><a href="PerspectiveOffCenterFrustum.html">PerspectiveOffCenterFrustum</a></li><li data-name="PinBuilder"><a href="PinBuilder.html">PinBuilder</a></li><li data-name="PixelFormat"><a href="PixelFormat.html">PixelFormat</a></li><li data-name="Plane"><a href="Plane.html">Plane</a></li><li data-name="PointGraphics"><a href="PointGraphics.html">PointGraphics</a></li><li data-name="pointInsideTriangle"><a href="pointInsideTriangle.html">pointInsideTriangle</a></li><li data-name="PointVisualizer"><a href="PointVisualizer.html">PointVisualizer</a></li><li data-name="Polygon"><a href="Polygon.html">Polygon</a></li><li data-name="PolygonGeometry"><a href="PolygonGeometry.html">PolygonGeometry</a></li><li data-name="PolygonGeometryUpdater"><a href="PolygonGeometryUpdater.html">PolygonGeometryUpdater</a></li><li data-name="PolygonGraphics"><a href="PolygonGraphics.html">PolygonGraphics</a></li><li data-name="PolygonOutlineGeometry"><a href="PolygonOutlineGeometry.html">PolygonOutlineGeometry</a></li><li data-name="Polyline"><a href="Polyline.html">Polyline</a></li><li data-name="PolylineCollection"><a href="PolylineCollection.html">PolylineCollection</a></li><li data-name="PolylineColorAppearance"><a href="PolylineColorAppearance.html">PolylineColorAppearance</a></li><li data-name="PolylineGeometry"><a href="PolylineGeometry.html">PolylineGeometry</a></li><li data-name="PolylineGeometryUpdater"><a href="PolylineGeometryUpdater.html">PolylineGeometryUpdater</a></li><li data-name="PolylineGlowProperty"><a href="PolylineGlowProperty.html">PolylineGlowProperty</a></li><li data-name="PolylineGraphics"><a href="PolylineGraphics.html">PolylineGraphics</a></li><li data-name="PolylineMaterialAppearance"><a href="PolylineMaterialAppearance.html">PolylineMaterialAppearance</a></li><li data-name="PolylineOutlineMaterialProperty"><a href="PolylineOutlineMaterialProperty.html">PolylineOutlineMaterialProperty</a></li><li data-name="PolylineVolumeGeometry"><a href="PolylineVolumeGeometry.html">PolylineVolumeGeometry</a></li><li data-name="PolylineVolumeOutlineGeometry"><a href="PolylineVolumeOutlineGeometry.html">PolylineVolumeOutlineGeometry</a></li><li data-name="PositionProperty"><a href="PositionProperty.html">PositionProperty</a></li><li data-name="PositionPropertyArray"><a href="PositionPropertyArray.html">PositionPropertyArray</a></li><li data-name="Primitive"><a href="Primitive.html">Primitive</a></li><li data-name="PrimitiveCollection"><a href="PrimitiveCollection.html">PrimitiveCollection</a></li><li data-name="PrimitiveType"><a href="PrimitiveType.html">PrimitiveType</a></li><li data-name="Property"><a href="Property.html">Property</a></li><li data-name="PropertyArray"><a href="PropertyArray.html">PropertyArray</a></li><li data-name="ProviderViewModel"><a href="ProviderViewModel.html">ProviderViewModel</a></li><li data-name="QuadraticRealPolynomial"><a href="QuadraticRealPolynomial.html">QuadraticRealPolynomial</a></li><li data-name="QuantizedMeshTerrainData"><a href="QuantizedMeshTerrainData.html">QuantizedMeshTerrainData</a></li><li data-name="QuarticRealPolynomial"><a href="QuarticRealPolynomial.html">QuarticRealPolynomial</a></li><li data-name="Quaternion"><a href="Quaternion.html">Quaternion</a></li><li data-name="QuaternionSpline"><a href="QuaternionSpline.html">QuaternionSpline</a></li><li data-name="Queue"><a href="Queue.html">Queue</a></li><li data-name="Ray"><a href="Ray.html">Ray</a></li><li data-name="Rectangle"><a href="Rectangle.html">Rectangle</a></li><li data-name="RectangleGeometry"><a href="RectangleGeometry.html">RectangleGeometry</a></li><li data-name="RectangleGeometryUpdater"><a href="RectangleGeometryUpdater.html">RectangleGeometryUpdater</a></li><li data-name="RectangleGraphics"><a href="RectangleGraphics.html">RectangleGraphics</a></li><li data-name="RectangleOutlineGeometry"><a href="RectangleOutlineGeometry.html">RectangleOutlineGeometry</a></li><li data-name="RectanglePrimitive"><a href="RectanglePrimitive.html">RectanglePrimitive</a></li><li data-name="ReferenceFrame"><a href="ReferenceFrame.html">ReferenceFrame</a></li><li data-name="ReferenceProperty"><a href="ReferenceProperty.html">ReferenceProperty</a></li><li data-name="requestAnimationFrame"><a href="requestAnimationFrame.html">requestAnimationFrame</a></li><li data-name="RequestErrorEvent"><a href="RequestErrorEvent.html">RequestErrorEvent</a></li><li data-name="RuntimeError"><a href="RuntimeError.html">RuntimeError</a></li><li data-name="SampledPositionProperty"><a href="SampledPositionProperty.html">SampledPositionProperty</a></li><li data-name="SampledProperty"><a href="SampledProperty.html">SampledProperty</a></li><li data-name="sampleTerrain"><a href="sampleTerrain.html">sampleTerrain</a></li><li data-name="sanitize"><a href="sanitize.html">sanitize</a></li><li data-name="Scene"><a href="Scene.html">Scene</a></li><li data-name="SceneMode"><a href="SceneMode.html">SceneMode</a></li><li data-name="SceneModePicker"><a href="SceneModePicker.html">SceneModePicker</a></li><li data-name="SceneModePickerViewModel"><a href="SceneModePickerViewModel.html">SceneModePickerViewModel</a></li><li data-name="SceneTransforms"><a href="SceneTransforms.html">SceneTransforms</a></li><li data-name="ScreenSpaceCameraController"><a href="ScreenSpaceCameraController.html">ScreenSpaceCameraController</a></li><li data-name="ScreenSpaceEventHandler"><a href="ScreenSpaceEventHandler.html">ScreenSpaceEventHandler</a></li><li data-name="ScreenSpaceEventType"><a href="ScreenSpaceEventType.html">ScreenSpaceEventType</a></li><li data-name="SelectionIndicator"><a href="SelectionIndicator.html">SelectionIndicator</a></li><li data-name="SelectionIndicatorViewModel"><a href="SelectionIndicatorViewModel.html">SelectionIndicatorViewModel</a></li><li data-name="ShowGeometryInstanceAttribute"><a href="ShowGeometryInstanceAttribute.html">ShowGeometryInstanceAttribute</a></li><li data-name="Simon1994PlanetaryPositions"><a href="Simon1994PlanetaryPositions.html">Simon1994PlanetaryPositions</a></li><li data-name="SimplePolylineGeometry"><a href="SimplePolylineGeometry.html">SimplePolylineGeometry</a></li><li data-name="SingleTileImageryProvider"><a href="SingleTileImageryProvider.html">SingleTileImageryProvider</a></li><li data-name="SkyAtmosphere"><a href="SkyAtmosphere.html">SkyAtmosphere</a></li><li data-name="SkyBox"><a href="SkyBox.html">SkyBox</a></li><li data-name="SphereGeometry"><a href="SphereGeometry.html">SphereGeometry</a></li><li data-name="SphereOutlineGeometry"><a href="SphereOutlineGeometry.html">SphereOutlineGeometry</a></li><li data-name="Spherical"><a href="Spherical.html">Spherical</a></li><li data-name="Spline"><a href="Spline.html">Spline</a></li><li data-name="StencilFunction"><a href="StencilFunction.html">StencilFunction</a></li><li data-name="StencilOperation"><a href="StencilOperation.html">StencilOperation</a></li><li data-name="StripeMaterialProperty"><a href="StripeMaterialProperty.html">StripeMaterialProperty</a></li><li data-name="StripeOrientation"><a href="StripeOrientation.html">StripeOrientation</a></li><li data-name="subdivideArray"><a href="subdivideArray.html">subdivideArray</a></li><li data-name="Sun"><a href="Sun.html">Sun</a></li><li data-name="SvgPathBindingHandler"><a href="SvgPathBindingHandler.html">SvgPathBindingHandler</a></li><li data-name="TaskProcessor"><a href="TaskProcessor.html">TaskProcessor</a></li><li data-name="TerrainData"><a href="TerrainData.html">TerrainData</a></li><li data-name="TerrainMesh"><a href="TerrainMesh.html">TerrainMesh</a></li><li data-name="TerrainProvider"><a href="TerrainProvider.html">TerrainProvider</a></li><li data-name="throttleRequestByServer"><a href="throttleRequestByServer.html">throttleRequestByServer</a></li><li data-name="TileCoordinatesImageryProvider"><a href="TileCoordinatesImageryProvider.html">TileCoordinatesImageryProvider</a></li><li data-name="TileDiscardPolicy"><a href="TileDiscardPolicy.html">TileDiscardPolicy</a></li><li data-name="TileMapServiceImageryProvider"><a href="TileMapServiceImageryProvider.html">TileMapServiceImageryProvider</a></li><li data-name="TileProviderError"><a href="TileProviderError.html">TileProviderError</a></li><li data-name="TilingScheme"><a href="TilingScheme.html">TilingScheme</a></li><li data-name="TimeInterval"><a href="TimeInterval.html">TimeInterval</a></li><li data-name="TimeIntervalCollection"><a href="TimeIntervalCollection.html">TimeIntervalCollection</a></li><li data-name="TimeIntervalCollectionPositionProperty"><a href="TimeIntervalCollectionPositionProperty.html">TimeIntervalCollectionPositionProperty</a></li><li data-name="TimeIntervalCollectionProperty"><a href="TimeIntervalCollectionProperty.html">TimeIntervalCollectionProperty</a></li><li data-name="Timeline"><a href="Timeline.html">Timeline</a></li><li data-name="TimeStandard"><a href="TimeStandard.html">TimeStandard</a></li><li data-name="ToggleButtonViewModel"><a href="ToggleButtonViewModel.html">ToggleButtonViewModel</a></li><li data-name="Transforms"><a href="Transforms.html">Transforms</a></li><li data-name="TridiagonalSystemSolver"><a href="TridiagonalSystemSolver.html">TridiagonalSystemSolver</a></li><li data-name="VertexFormat"><a href="VertexFormat.html">VertexFormat</a></li><li data-name="VerticalOrigin"><a href="VerticalOrigin.html">VerticalOrigin</a></li><li data-name="Viewer"><a href="Viewer.html">Viewer</a></li><li data-name="viewerCesiumInspectorMixin"><a href="viewerCesiumInspectorMixin.html">viewerCesiumInspectorMixin</a></li><li data-name="viewerDragDropMixin"><a href="viewerDragDropMixin.html">viewerDragDropMixin</a></li><li data-name="viewerEntityMixin"><a href="viewerEntityMixin.html">viewerEntityMixin</a></li><li data-name="viewerPerformanceWatchdogMixin"><a href="viewerPerformanceWatchdogMixin.html">viewerPerformanceWatchdogMixin</a></li><li data-name="ViewportQuad"><a href="ViewportQuad.html">ViewportQuad</a></li><li data-name="Visibility"><a href="Visibility.html">Visibility</a></li><li data-name="Visualizer"><a href="Visualizer.html">Visualizer</a></li><li data-name="VRTheWorldTerrainProvider"><a href="VRTheWorldTerrainProvider.html">VRTheWorldTerrainProvider</a></li><li data-name="WallGeometry"><a href="WallGeometry.html">WallGeometry</a></li><li data-name="WallGeometryUpdater"><a href="WallGeometryUpdater.html">WallGeometryUpdater</a></li><li data-name="WallGraphics"><a href="WallGraphics.html">WallGraphics</a></li><li data-name="WallOutlineGeometry"><a href="WallOutlineGeometry.html">WallOutlineGeometry</a></li><li data-name="WebMapServiceImageryProvider"><a href="WebMapServiceImageryProvider.html">WebMapServiceImageryProvider</a></li><li data-name="WebMapTileServiceImageryProvider"><a href="WebMapTileServiceImageryProvider.html">WebMapTileServiceImageryProvider</a></li><li data-name="WebMercatorProjection"><a href="WebMercatorProjection.html">WebMercatorProjection</a></li><li data-name="WebMercatorTilingScheme"><a href="WebMercatorTilingScheme.html">WebMercatorTilingScheme</a></li><li data-name="WindingOrder"><a href="WindingOrder.html">WindingOrder</a></li></ul>
    </div>
</div>

<div class="nav navStatic"></div>

<div id="main">

    <h1 class="page-title">Matrix4</h1>

    



<section>

<header>
    
</header>

<article>
    <div class="container-overview">
    

    
        
<dt>
    <div class="nameContainer">
    <h4 class="name" id="Matrix4">
        new Matrix4<span class="signature">(<span class="optional">column0Row0</span>, <span class="optional">column1Row0</span>, <span class="optional">column2Row0</span>, <span class="optional">column3Row0</span>, <span class="optional">column0Row1</span>, <span class="optional">column1Row1</span>, <span class="optional">column2Row1</span>, <span class="optional">column3Row1</span>, <span class="optional">column0Row2</span>, <span class="optional">column1Row2</span>, <span class="optional">column2Row2</span>, <span class="optional">column3Row2</span>, <span class="optional">column0Row3</span>, <span class="optional">column1Row3</span>, <span class="optional">column2Row3</span>, <span class="optional">column3Row3</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        A 4x4 matrix, indexable as a column-major order array.Constructor parameters are in row-major order for code readability.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>column0Row0</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 0, row 0.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column1Row0</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 1, row 0.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column2Row0</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 2, row 0.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column3Row0</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 3, row 0.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column0Row1</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 0, row 1.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column1Row1</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 1, row 1.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column2Row1</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 2, row 1.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column3Row1</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 3, row 1.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column0Row2</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 0, row 2.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column1Row2</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 1, row 2.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column2Row2</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 2, row 2.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column3Row2</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 3, row 2.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column0Row3</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 0, row 3.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column1Row3</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 1, row 3.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column2Row3</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 2, row 3.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column3Row3</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 3, row 3.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    
    <h5>See:</h5>
    <ul class="see-list">
        <li><a href="Matrix4.html#fromColumnMajorArray">Matrix4.fromColumnMajorArray</a></li>
    
        <li><a href="Matrix4.html#fromRowMajorArray">Matrix4.fromRowMajorArray</a></li>
    
        <li><a href="Matrix4.html#fromRotationTranslation">Matrix4.fromRotationTranslation</a></li>
    
        <li><a href="Matrix4.html#fromTranslationQuaternionRotationScale">Matrix4.fromTranslationQuaternionRotationScale</a></li>
    
        <li><a href="Matrix4.html#fromTranslation">Matrix4.fromTranslation</a></li>
    
        <li><a href="Matrix4.html#fromScale">Matrix4.fromScale</a></li>
    
        <li><a href="Matrix4.html#fromUniformScale">Matrix4.fromUniformScale</a></li>
    
        <li><a href="Matrix4.html#fromCamera">Matrix4.fromCamera</a></li>
    
        <li><a href="Matrix4.html#computePerspectiveFieldOfView">Matrix4.computePerspectiveFieldOfView</a></li>
    
        <li><a href="Matrix4.html#computeOrthographicOffCenter">Matrix4.computeOrthographicOffCenter</a></li>
    
        <li><a href="Matrix4.html#computePerspectiveOffCenter">Matrix4.computePerspectiveOffCenter</a></li>
    
        <li><a href="Matrix4.html#computeInfinitePerspectiveOffCenter">Matrix4.computeInfinitePerspectiveOffCenter</a></li>
    
        <li><a href="Matrix4.html#computeViewportTransformation">Matrix4.computeViewportTransformation</a></li>
    
        <li><a href="Matrix2.html">Matrix2</a></li>
    
        <li><a href="Matrix3.html">Matrix3</a></li>
    
        <li><a href="Packable.html">Packable</a></li>
    </ul>
    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L62">Core/Matrix4.js, line 62</a>
    </div>
    
</dl>

</dd>

    
    </div>

    

    

    

    

    

    
        <h3 class="subsection-title">Members</h3>

        <dl>
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN0ROW0">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN0ROW0<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 0, row 0.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2383">Core/Matrix4.js, line 2383</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN0ROW1">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN0ROW1<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 0, row 1.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2391">Core/Matrix4.js, line 2391</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN0ROW2">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN0ROW2<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 0, row 2.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2399">Core/Matrix4.js, line 2399</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN0ROW3">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN0ROW3<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 0, row 3.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2407">Core/Matrix4.js, line 2407</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN1ROW0">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN1ROW0<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 1, row 0.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2415">Core/Matrix4.js, line 2415</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN1ROW1">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN1ROW1<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 1, row 1.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2423">Core/Matrix4.js, line 2423</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN1ROW2">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN1ROW2<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 1, row 2.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2431">Core/Matrix4.js, line 2431</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN1ROW3">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN1ROW3<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 1, row 3.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2439">Core/Matrix4.js, line 2439</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN2ROW0">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN2ROW0<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 2, row 0.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2447">Core/Matrix4.js, line 2447</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN2ROW1">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN2ROW1<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 2, row 1.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2455">Core/Matrix4.js, line 2455</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN2ROW2">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN2ROW2<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 2, row 2.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2463">Core/Matrix4.js, line 2463</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN2ROW3">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN2ROW3<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 2, row 3.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2471">Core/Matrix4.js, line 2471</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN3ROW0">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN3ROW0<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 3, row 0.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2479">Core/Matrix4.js, line 2479</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN3ROW1">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN3ROW1<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 3, row 1.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2487">Core/Matrix4.js, line 2487</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN3ROW2">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN3ROW2<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 3, row 2.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2495">Core/Matrix4.js, line 2495</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN3ROW3">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN3ROW3<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 3, row 3.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2503">Core/Matrix4.js, line 2503</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="IDENTITY">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.IDENTITY<span class="type-signature"> :<a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        An immutable Matrix4 instance initialized to the identity matrix.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2372">Core/Matrix4.js, line 2372</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="packedLength">
        <span class="type-signature attribute-static">static</span>Matrix4.packedLength<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The number of elements used to pack the object into an array.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L88">Core/Matrix4.js, line 88</a>
    </div>
    
</dl>

</dd>

        </dl>
    

    
        <h3 class="subsection-title">Methods</h3>

        <dl>
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="clone">
        clone<span class="signature">(<span class="optional">result</span>)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Duplicates the provided Matrix4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2511">Core/Matrix4.js, line 2511</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="equals">
        equals<span class="signature">(<span class="optional">right</span>)</span> &rarr; <span class="type-signature returnType">Boolean</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Compares this matrix to the provided matrix componentwise and returns<code>true</code> if they are equal, <code>false</code> otherwise.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The right hand side matrix.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    <code>true</code> if they are equal, <code>false</code> otherwise.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2522">Core/Matrix4.js, line 2522</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="equalsEpsilon">
        equalsEpsilon<span class="signature">(<span class="optional">right</span>, epsilon)</span> &rarr; <span class="type-signature returnType">Boolean</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Compares this matrix to the provided matrix componentwise and returns<code>true</code> if they are within the provided epsilon,<code>false</code> otherwise.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The right hand side matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>epsilon</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The epsilon to use for equality testing.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2535">Core/Matrix4.js, line 2535</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="toString">
        toString<span class="signature">()</span> &rarr; <span class="type-signature returnType">String</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a string representing this Matrix with each row beingon a separate line and in the format '(column0, column1, column2, column3)'.
    </div>
    

    

    

    

    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2, column3)'.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2545">Core/Matrix4.js, line 2545</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="abs">
        <span class="type-signature attribute-static">static</span>Matrix4.abs<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix with signed elements.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1973">Core/Matrix4.js, line 1973</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="add">
        <span class="type-signature attribute-static">static</span>Matrix4.add<span class="signature">(left, right, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the sum of two matrices.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The second matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1363">Core/Matrix4.js, line 1363</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="clone">
        <span class="type-signature attribute-static">static</span>Matrix4.clone<span class="signature">(matrix, <span class="optional">result</span>)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Duplicates a Matrix4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The matrix to duplicate.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter or a new Matrix4 instance if one was not provided. (Returns undefined if matrix is undefined)
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L174">Core/Matrix4.js, line 174</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="computeInfinitePerspectiveOffCenter">
        <span class="type-signature attribute-static">static</span>Matrix4.computeInfinitePerspectiveOffCenter<span class="signature">(left, right, bottom, top, near, far, result)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing an infinite off center perspective transformation.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the left of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the right of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>bottom</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters below of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>top</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters above of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>near</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the near plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>far</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the far plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object in which the result will be stored.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L820">Core/Matrix4.js, line 820</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="computeOrthographicOffCenter">
        <span class="type-signature attribute-static">static</span>Matrix4.computeOrthographicOffCenter<span class="signature">(left, right, bottom, top, near, far, result)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing an orthographic transformation matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the left of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the right of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>bottom</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters below of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>top</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters above of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>near</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the near plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>far</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the far plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object in which the result will be stored.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L689">Core/Matrix4.js, line 689</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="computePerspectiveFieldOfView">
        <span class="type-signature attribute-static">static</span>Matrix4.computePerspectiveFieldOfView<span class="signature">(fovY, aspectRatio, near, far, result)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing a perspective transformation matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>fovY</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The field of view along the Y axis in radians.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>aspectRatio</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The aspect ratio.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>near</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the near plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>far</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the far plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object in which the result will be stored.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: fovY must be in [0, PI).
    </div>

</li>
        
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: aspectRatio must be greater than zero.
    </div>

</li>
        
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: near must be greater than zero.
    </div>

</li>
        
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: far must be greater than zero.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L632">Core/Matrix4.js, line 632</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="computePerspectiveOffCenter">
        <span class="type-signature attribute-static">static</span>Matrix4.computePerspectiveOffCenter<span class="signature">(left, right, bottom, top, near, far, result)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing an off center perspective transformation.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the left of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the right of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>bottom</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters below of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>top</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters above of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>near</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the near plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>far</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the far plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object in which the result will be stored.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L756">Core/Matrix4.js, line 756</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="computeViewportTransformation">
        <span class="type-signature attribute-static">static</span>Matrix4.computeViewportTransformation<span class="signature">(<span class="optional">viewport</span>, <span class="optional">nearDepthRange</span>, <span class="optional">farDepthRange</span>, result)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance that transforms from normalized device coordinates to window coordinates.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>viewport</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">{ x : 0.0, y : 0.0, width : 0.0, height : 0.0 }</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The viewport's corners as shown in Example 1.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>nearDepthRange</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The near plane distance in window coordinates.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>farDepthRange</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">1.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The far plane distance in window coordinates.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                

                
            
                The object in which the result will be stored.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Create viewport transformation using an explicit viewport and depth range.var m = Cesium.Matrix4.computeViewportTransformation({    x : 0.0,    y : 0.0,    width : 1024.0,    height : 768.0}, 0.0, 1.0, new Cesium.Matrix4());</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L887">Core/Matrix4.js, line 887</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="equals">
        <span class="type-signature attribute-static">static</span>Matrix4.equals<span class="signature">(<span class="optional">left</span>, <span class="optional">right</span>)</span> &rarr; <span class="type-signature returnType">Boolean</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Compares the provided matrices componentwise and returns<code>true</code> if they are equal, <code>false</code> otherwise.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The second matrix.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    <code>true</code> if left and right are equal, <code>false</code> otherwise.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//compares two Matrix4 instances// a = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]// b = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]if(Cesium.Matrix4.equals(a,b)) {     console.log("Both matrices are equal");} else {     console.log("They are not equal");}//Prints "Both matrices are equal" on the console</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2032">Core/Matrix4.js, line 2032</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="equalsEpsilon">
        <span class="type-signature attribute-static">static</span>Matrix4.equalsEpsilon<span class="signature">(<span class="optional">left</span>, <span class="optional">right</span>, epsilon)</span> &rarr; <span class="type-signature returnType">Boolean</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Compares the provided matrices componentwise and returns<code>true</code> if they are within the provided epsilon,<code>false</code> otherwise.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The second matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>epsilon</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The epsilon to use for equality testing.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//compares two Matrix4 instances// a = [10.5, 14.5, 18.5, 22.5]//     [11.5, 15.5, 19.5, 23.5]//     [12.5, 16.5, 20.5, 24.5]//     [13.5, 17.5, 21.5, 25.5]// b = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]if(Cesium.Matrix4.equalsEpsilon(a,b,0.1)){     console.log("Difference between both the matrices is less than 0.1");} else {     console.log("Difference between both the matrices is not less than 0.1");}//Prints "Difference between both the matrices is not less than 0.1" on the console</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2085">Core/Matrix4.js, line 2085</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromArray">
        <span class="type-signature attribute-static">static</span>Matrix4.fromArray<span class="signature">(array, <span class="optional">startingIndex</span>, <span class="optional">result</span>)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Creates a Matrix4 from 16 consecutive elements in an array.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                

                
            
                The array whose 16 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>startingIndex</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The offset into the array of the first element, which corresponds to first column first row position in the matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Create the Matrix4:// [1.0, 2.0, 3.0, 4.0]// [1.0, 2.0, 3.0, 4.0]// [1.0, 2.0, 3.0, 4.0]// [1.0, 2.0, 3.0, 4.0]var v = [1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];var m = Cesium.Matrix4.fromArray(v);// Create same Matrix4 with using an offset into an arrayvar v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];var m2 = Cesium.Matrix4.fromArray(v2, 2);</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L226">Core/Matrix4.js, line 226</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromCamera">
        <span class="type-signature attribute-static">static</span>Matrix4.fromCamera<span class="signature">(camera, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance from a Camera.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>camera</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Camera.html">Camera</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The camera to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L532">Core/Matrix4.js, line 532</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromColumnMajorArray">
        <span class="type-signature attribute-static">static</span>Matrix4.fromColumnMajorArray<span class="signature">(values, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance from a column-major order array.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>values</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The column-major order array.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L235">Core/Matrix4.js, line 235</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromRotationTranslation">
        <span class="type-signature attribute-static">static</span>Matrix4.fromRotationTranslation<span class="signature">(rotation, translation, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance from a Matrix3 representing the rotationand a Cartesian3 representing the translation.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>rotation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix3.html">Matrix3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The upper left portion of the matrix representing the rotation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>translation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The upper right portion of the matrix representing the translation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L294">Core/Matrix4.js, line 294</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromRowMajorArray">
        <span class="type-signature attribute-static">static</span>Matrix4.fromRowMajorArray<span class="signature">(values, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance from a row-major order array.The resulting matrix will be in column-major order.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>values</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The row-major order array.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L253">Core/Matrix4.js, line 253</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromScale">
        <span class="type-signature attribute-static">static</span>Matrix4.fromScale<span class="signature">(scale, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing a non-uniform scale.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>scale</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The x, y, and z scale factors.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Creates//   [7.0, 0.0, 0.0, 0.0]//   [0.0, 8.0, 0.0, 0.0]//   [0.0, 0.0, 9.0, 0.0]//   [0.0, 0.0, 0.0, 1.0]var m = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L439">Core/Matrix4.js, line 439</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromTranslation">
        <span class="type-signature attribute-static">static</span>Matrix4.fromTranslation<span class="signature">(translation, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Creates a Matrix4 instance from a Cartesian3 representing the translation.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>translation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The upper right portion of the matrix representing the translation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    
    <h5>See:</h5>
    <ul class="see-list">
        <li><a href="Matrix4.html#multiplyByTranslation">Matrix4.multiplyByTranslation</a></li>
    </ul>
    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L420">Core/Matrix4.js, line 420</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromTranslationQuaternionRotationScale">
        <span class="type-signature attribute-static">static</span>Matrix4.fromTranslationQuaternionRotationScale<span class="signature">(translation, rotation, scale, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance from a translation, rotation, and scale (TRS)representation with the rotation represented as a quaternion.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>translation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The translation transformation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>rotation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Quaternion.html">Quaternion</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The rotation transformation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>scale</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The non-uniform scale transformation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">var result = Cesium.Matrix4.fromTranslationQuaternionRotationScale(  new Cesium.Cartesian3(1.0, 2.0, 3.0), // translation  Cesium.Quaternion.IDENTITY,           // rotation  new Cesium.Cartesian3(7.0, 8.0, 9.0), // scale  result);</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L347">Core/Matrix4.js, line 347</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromUniformScale">
        <span class="type-signature attribute-static">static</span>Matrix4.fromUniformScale<span class="signature">(scale, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing a uniform scale.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>scale</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The uniform scale factor.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Creates//   [2.0, 0.0, 0.0, 0.0]//   [0.0, 2.0, 0.0, 0.0]//   [0.0, 0.0, 2.0, 0.0]//   [0.0, 0.0, 0.0, 1.0]var m = Cesium.Matrix4.fromUniformScale(2.0);</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L488">Core/Matrix4.js, line 488</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getColumn">
        <span class="type-signature attribute-static">static</span>Matrix4.getColumn<span class="signature">(matrix, index, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian4.html">Cartesian4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Retrieves a copy of the matrix column at the provided index as a Cartesian4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>index</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the column to retrieve.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: index must be 0, 1, 2, or 3.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Examples:</h5>
        
    <pre><code class="language-javascript">//returns a Cartesian4 instance with values from the specified column// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]//Example 1: Creates an instance of Cartesianvar a = Cesium.Matrix4.getColumn(m, 2, new Cesium.Cartesian4());</code></pre>

    <pre><code class="language-javascript">//Example 2: Sets values for Cartesian instancevar a = new Cesium.Cartesian4();Cesium.Matrix4.getColumn(m, 2, a);// a.x = 12.0; a.y = 16.0; a.z = 20.0; a.w = 24.0;</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1040">Core/Matrix4.js, line 1040</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getElementIndex">
        <span class="type-signature attribute-static">static</span>Matrix4.getElementIndex<span class="signature">(row, column)</span> &rarr; <span class="type-signature returnType">Number</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the array index of the element at the provided row and column.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>row</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the row.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the column.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The index of the element at the provided row and column.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: row must be 0, 1, 2, or 3.
    </div>

</li>
        
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: column must be 0, 1, 2, or 3.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">var myMatrix = new Cesium.Matrix4();var column1Row0Index = Cesium.Matrix4.getElementIndex(1, 0);var column1Row0 = myMatrix[column1Row0Index];myMatrix[column1Row0Index] = 10.0;</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1000">Core/Matrix4.js, line 1000</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getMaximumScale">
        <span class="type-signature attribute-static">static</span>Matrix4.getMaximumScale<span class="signature">(matrix)</span> &rarr; <span class="type-signature returnType">Number</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the maximum scale assuming the matrix is an affine transformation.The maximum scale is the maximum length of the column vectors in the upper-left3x3 matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The maximum scale.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1256">Core/Matrix4.js, line 1256</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getRotation">
        <span class="type-signature attribute-static">static</span>Matrix4.getRotation<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix3.html">Matrix3</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Gets the upper left 3x3 rotation matrix of the provided matrix, assuming the matrix is a affine transformation matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix3.html">Matrix3</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// returns a Matrix3 instance from a Matrix4 instance// m = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]var b = new Cesium.Matrix3();Cesium.Matrix4.getRotation(m,b);// b = [10.0, 14.0, 18.0]//     [11.0, 15.0, 19.0]//     [12.0, 16.0, 20.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2158">Core/Matrix4.js, line 2158</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getRow">
        <span class="type-signature attribute-static">static</span>Matrix4.getRow<span class="signature">(matrix, index, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian4.html">Cartesian4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Retrieves a copy of the matrix row at the provided index as a Cartesian4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>index</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the row to retrieve.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: index must be 0, 1, 2, or 3.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Examples:</h5>
        
    <pre><code class="language-javascript">//returns a Cartesian4 instance with values from the specified column// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]//Example 1: Returns an instance of Cartesianvar a = Cesium.Matrix4.getRow(m, 2, new Cesium.Cartesian4());</code></pre>

    <pre><code class="language-javascript">//Example 2: Sets values for a Cartesian instancevar a = new Cesium.Cartesian4();Cesium.Matrix4.getRow(m, 2, a);// a.x = 18.0; a.y = 19.0; a.z = 20.0; a.w = 21.0;</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1145">Core/Matrix4.js, line 1145</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getScale">
        <span class="type-signature attribute-static">static</span>Matrix4.getScale<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian3.html">Cartesian3</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Extracts the non-uniform scale assuming the matrix is an affine transformation.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1230">Core/Matrix4.js, line 1230</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getTranslation">
        <span class="type-signature attribute-static">static</span>Matrix4.getTranslation<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian3.html">Cartesian3</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Gets the translation portion of the provided matrix, assuming the matrix is a affine transformation matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2120">Core/Matrix4.js, line 2120</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="inverse">
        <span class="type-signature attribute-static">static</span>Matrix4.inverse<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the inverse of the provided matrix using Cramers Rule.If the determinant is zero, the matrix can not be inverted, and an exception is thrown.If the matrix is an affine transformation matrix, it is more efficientto invert it with <a href="Matrix4.html#inverseTransformation"><code>Matrix4.inverseTransformation</code></a>.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to invert.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="RuntimeError.html">RuntimeError</a></span>

: matrix is not invertible because its determinate is zero.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2192">Core/Matrix4.js, line 2192</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="inverseTransformation">
        <span class="type-signature attribute-static">static</span>Matrix4.inverseTransformation<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the inverse of the provided matrix assuming it isan affine transformation matrix, where the upper left 3x3 elementsare a rotation matrix, and the upper three elements in the fourthcolumn are the translation.  The bottom row is assumed to be [0, 0, 0, 1].The matrix is not verified to be in the proper form.This method is faster than computing the inverse for a general 4x4matrix using <a href="Matrix4.html#inverse"><code>Matrix4.inverse</code></a>.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to invert.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2313">Core/Matrix4.js, line 2313</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiply">
        <span class="type-signature attribute-static">static</span>Matrix4.multiply<span class="signature">(left, right, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of two matrices.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The second matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1269">Core/Matrix4.js, line 1269</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByPoint">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByPoint<span class="signature">(matrix, cartesian, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian3.html">Cartesian3</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of a matrix and a <a href="Cartesian3.html"><code>Cartesian3</code></a>. This is equivalent to calling <a href="Matrix4.html#multiplyByVector"><code>Matrix4.multiplyByVector</code></a>with a <a href="Cartesian4.html"><code>Cartesian4</code></a> with a <code>w</code> component of 1, but returns a <a href="Cartesian3.html"><code>Cartesian3</code></a> instead of a <a href="Cartesian4.html"><code>Cartesian4</code></a>.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cartesian</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The point.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);var result = Cesium.Matrix4.multiplyByPoint(matrix, p, new Cesium.Cartesian3());</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1774">Core/Matrix4.js, line 1774</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByPointAsVector">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByPointAsVector<span class="signature">(matrix, cartesian, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian3.html">Cartesian3</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of a matrix and a <a href="Cartesian3.html"><code>Cartesian3</code></a>.  This is equivalent to calling <a href="Matrix4.html#multiplyByVector"><code>Matrix4.multiplyByVector</code></a>with a <a href="Cartesian4.html"><code>Cartesian4</code></a> with a <code>w</code> component of zero.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cartesian</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The point.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);var result = Cesium.Matrix4.multiplyByPointAsVector(matrix, p, new Cesium.Cartesian3());// A shortcut for//   Cartesian3 p = ...//   Cesium.Matrix4.multiplyByVector(matrix, new Cesium.Cartesian4(p.x, p.y, p.z, 0.0), result);</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1734">Core/Matrix4.js, line 1734</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByScalar">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByScalar<span class="signature">(matrix, scalar, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of a matrix and a scalar.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>scalar</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number to multiply by.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//create a Matrix4 instance which is a scaled version of the supplied Matrix4// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]var a = Cesium.Matrix4.multiplyByScalar(m, -2, new Cesium.Matrix4());// m remains the same// a = [-20.0, -22.0, -24.0, -26.0]//     [-28.0, -30.0, -32.0, -34.0]//     [-36.0, -38.0, -40.0, -42.0]//     [-44.0, -46.0, -48.0, -50.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1825">Core/Matrix4.js, line 1825</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByScale">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByScale<span class="signature">(matrix, scale, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)by an implicit non-uniform scale matrix.  This is an optimizationfor <code>Matrix4.multiply(m, Matrix4.fromScale(scale), m);</code> with less allocations and arithmetic operations.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix on the left-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>scale</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The non-uniform scale on the right-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromScale(scale), m);Cesium.Matrix4.multiplyByScale(m, scale, m);</code></pre>

    

    

    

    
    <h5>See:</h5>
    <ul class="see-list">
        <li><a href="Matrix4.html#fromScale">Matrix4.fromScale</a></li>
    
        <li><a href="Matrix4.html#multiplyByUniformScale">Matrix4.multiplyByUniformScale</a></li>
    </ul>
    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1639">Core/Matrix4.js, line 1639</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByTranslation">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByTranslation<span class="signature">(matrix, translation, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)by an implicit translation matrix defined by a <a href="Cartesian3.html"><code>Cartesian3</code></a>.  This is an optimizationfor <code>Matrix4.multiply(m, Matrix4.fromTranslation(position), m);</code> with less allocations and arithmetic operations.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix on the left-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>translation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The translation on the right-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromTranslation(position), m);Cesium.Matrix4.multiplyByTranslation(m, position, m);</code></pre>

    

    

    

    
    <h5>See:</h5>
    <ul class="see-list">
        <li><a href="Matrix4.html#fromTranslation">Matrix4.fromTranslation</a></li>
    </ul>
    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1544">Core/Matrix4.js, line 1544</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByUniformScale">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByUniformScale<span class="signature">(matrix, scale, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)by an implicit uniform scale matrix.  This is an optimizationfor <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code> with less allocations and arithmetic operations.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix on the left-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>scale</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The uniform scale on the right-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromUniformScale(scale), m);Cesium.Matrix4.multiplyByUniformScale(m, scale, m);</code></pre>

    

    

    

    
    <h5>See:</h5>
    <ul class="see-list">
        <li><a href="Matrix4.html#fromUniformScale">Matrix4.fromUniformScale</a></li>
    
        <li><a href="Matrix4.html#multiplyByScale">Matrix4.multiplyByScale</a></li>
    </ul>
    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1603">Core/Matrix4.js, line 1603</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByVector">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByVector<span class="signature">(matrix, cartesian, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian4.html">Cartesian4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of a matrix and a column vector.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cartesian</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The vector.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1688">Core/Matrix4.js, line 1688</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyTransformation">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyTransformation<span class="signature">(left, right, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of two matrices assuming the matrices areaffine transformation matrices, where the upper left 3x3 elementsare a rotation matrix, and the upper three elements in the fourthcolumn are the translation.  The bottom row is assumed to be [0, 0, 0, 1].The matrix is not verified to be in the proper form.This method is faster than computing the product for general 4x4matrices using <a href="Matrix4.html#multiply"><code>Matrix4.multiply</code></a>.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The second matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">var m1 = new Cesium.Matrix4(1.0, 6.0, 7.0, 0.0, 2.0, 5.0, 8.0, 0.0, 3.0, 4.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0);var m2 = Cesium.Transforms.eastNorthUpToFixedFrame(new Cesium.Cartesian3(1.0, 1.0, 1.0));var m3 = Cesium.Matrix4.multiplyTransformation(m1, m2, new Cesium.Matrix4());</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1454">Core/Matrix4.js, line 1454</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="negate">
        <span class="type-signature attribute-static">static</span>Matrix4.negate<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a negated copy of the provided matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to negate.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//create a new Matrix4 instance which is a negation of a Matrix4// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]var a = Cesium.Matrix4.negate(m, new Cesium.Matrix4());// m remains the same// a = [-10.0, -11.0, -12.0, -13.0]//     [-14.0, -15.0, -16.0, -17.0]//     [-18.0, -19.0, -20.0, -21.0]//     [-22.0, -23.0, -24.0, -25.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1879">Core/Matrix4.js, line 1879</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="pack">
        <span class="type-signature attribute-static">static</span>Matrix4.pack<span class="signature">(value, array, <span class="optional">startingIndex</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Stores the provided instance into the provided array.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>value</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                

                
            
                The value to pack.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                

                
            
                The array to pack into.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>startingIndex</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The index into the array at which to start packing the elements.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L97">Core/Matrix4.js, line 97</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="setColumn">
        <span class="type-signature attribute-static">static</span>Matrix4.setColumn<span class="signature">(matrix, index, cartesian, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>index</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the column to set.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cartesian</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The Cartesian whose values will be assigned to the specified column.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: index must be 0, 1, 2, or 3.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//creates a new Matrix4 instance with new column values from the Cartesian4 instance// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]var a = Cesium.Matrix4.setColumn(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());// m remains the same// a = [10.0, 11.0, 99.0, 13.0]//     [14.0, 15.0, 98.0, 17.0]//     [18.0, 19.0, 97.0, 21.0]//     [22.0, 23.0, 96.0, 25.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1093">Core/Matrix4.js, line 1093</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="setRow">
        <span class="type-signature attribute-static">static</span>Matrix4.setRow<span class="signature">(matrix, index, cartesian, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>index</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the row to set.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cartesian</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The Cartesian whose values will be assigned to the specified row.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: index must be 0, 1, 2, or 3.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//create a new Matrix4 instance with new row values from the Cartesian4 instance// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]var a = Cesium.Matrix4.setRow(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());// m remains the same// a = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [99.0, 98.0, 97.0, 96.0]//     [22.0, 23.0, 24.0, 25.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1197">Core/Matrix4.js, line 1197</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="subtract">
        <span class="type-signature attribute-static">static</span>Matrix4.subtract<span class="signature">(left, right, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the difference of two matrices.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The second matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1403">Core/Matrix4.js, line 1403</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="toArray">
        <span class="type-signature attribute-static">static</span>Matrix4.toArray<span class="signature">(matrix, <span class="optional">result</span>)</span> &rarr; <span class="type-signature returnType">Array.&lt;Number></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes an Array from the provided Matrix4 instance.The array will be in column-major order.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The matrix to use..</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The Array onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified Array parameter or a new Array instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//create an array from an instance of Matrix4// m = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]var a = Cesium.Matrix4.toArray(m);// m remains the same//creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L952">Core/Matrix4.js, line 952</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="transpose">
        <span class="type-signature attribute-static">static</span>Matrix4.transpose<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the transpose of the provided matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to transpose.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//returns transpose of a Matrix4// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]var a = Cesium.Matrix4.transpose(m, new Cesium.Matrix4());// m remains the same// a = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1930">Core/Matrix4.js, line 1930</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="unpack">
        <span class="type-signature attribute-static">static</span>Matrix4.unpack<span class="signature">(array, <span class="optional">startingIndex</span>, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Retrieves an instance from a packed array.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                

                
            
                The packed array.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>startingIndex</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The starting index of the element to be unpacked.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object into which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L135">Core/Matrix4.js, line 135</a>
    </div>
    
</dl>

</dd>

        </dl>
    

    

    
</article>

</section>





    <footer>
        Documentation generated by <a href="https://github.com/jsdoc3/jsdoc">JSDoc 3.3.0-alpha9</a>
    </footer>
</div>

</div>

<br clear="both">

<script>
if (window.frameElement) {
    document.body.className = 'embedded';

    var ele = document.createElement('a');
    ele.className = 'popout';
    ele.target = '_blank';
    ele.href = window.location.href;
    ele.title = 'Pop out';
    document.getElementById('main').appendChild(ele);

    ele = document.createElement('a');
    ele.className = 'back';
    ele.href = 'index.html';
    ele.title = 'Home';
    ele.target = '_self';
    document.getElementById('main').appendChild(ele);
} else {
    document.getElementById('bkgd').className = 'show-bkgd';
}

// Set targets on external links.  Sandcastle and GitHub shouldn't be embedded in any iframe.
Array.prototype.forEach.call(document.getElementsByTagName('a'), function(a) {
    if (/^https?:/i.test(a.getAttribute('href'))) {
        a.target='_blank';
    }
});
</script>

<script src="javascript/prism.js"></script>
<script src="javascript/cesiumDoc.js"></script>

</body>
</html>",
                "body": "<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <title>Matrix4 - Cesium Documentation</title>

    <!--[if lt IE 9]>
      <script src="javascript/html5.js"></script>
    <![endif]-->
    <link href="styles/jsdoc-default.css" rel="stylesheet">
    <link href="styles/prism.css" rel="stylesheet">
</head>
<body>

<div id="bkgd">

<div class="nav">
    <div class="menu">
        <a href="index.html"><img id="cesium-logo" src="images/CesiumLogo.jpg" class="menuLogo"></a>
        <div class="divider"></div>

        <input type="text" class="classFilter" id="ClassFilter" placeholder="Filter">

        <ul id="ClassList"><li data-name="Animation"><a href="Animation.html">Animation</a></li><li data-name="AnimationViewModel"><a href="AnimationViewModel.html">AnimationViewModel</a></li><li data-name="Appearance"><a href="Appearance.html">Appearance</a></li><li data-name="ArcGisImageServerTerrainProvider"><a href="ArcGisImageServerTerrainProvider.html">ArcGisImageServerTerrainProvider</a></li><li data-name="ArcGisMapServerImageryProvider"><a href="ArcGisMapServerImageryProvider.html">ArcGisMapServerImageryProvider</a></li><li data-name="AssociativeArray"><a href="AssociativeArray.html">AssociativeArray</a></li><li data-name="AxisAlignedBoundingBox"><a href="AxisAlignedBoundingBox.html">AxisAlignedBoundingBox</a></li><li data-name="barycentricCoordinates"><a href="barycentricCoordinates.html">barycentricCoordinates</a></li><li data-name="BaseLayerPicker"><a href="BaseLayerPicker.html">BaseLayerPicker</a></li><li data-name="BaseLayerPickerViewModel"><a href="BaseLayerPickerViewModel.html">BaseLayerPickerViewModel</a></li><li data-name="Billboard"><a href="Billboard.html">Billboard</a></li><li data-name="BillboardCollection"><a href="BillboardCollection.html">BillboardCollection</a></li><li data-name="BillboardGraphics"><a href="BillboardGraphics.html">BillboardGraphics</a></li><li data-name="BillboardVisualizer"><a href="BillboardVisualizer.html">BillboardVisualizer</a></li><li data-name="binarySearch"><a href="binarySearch.html">binarySearch</a></li><li data-name="BingMapsImageryProvider"><a href="BingMapsImageryProvider.html">BingMapsImageryProvider</a></li><li data-name="BingMapsStyle"><a href="BingMapsStyle.html">BingMapsStyle</a></li><li data-name="BlendEquation"><a href="BlendEquation.html">BlendEquation</a></li><li data-name="BlendFunction"><a href="BlendFunction.html">BlendFunction</a></li><li data-name="BlendingState"><a href="BlendingState.html">BlendingState</a></li><li data-name="BoundingRectangle"><a href="BoundingRectangle.html">BoundingRectangle</a></li><li data-name="BoundingSphere"><a href="BoundingSphere.html">BoundingSphere</a></li><li data-name="BoxGeometry"><a href="BoxGeometry.html">BoxGeometry</a></li><li data-name="BoxOutlineGeometry"><a href="BoxOutlineGeometry.html">BoxOutlineGeometry</a></li><li data-name="Camera"><a href="Camera.html">Camera</a></li><li data-name="CameraEventAggregator"><a href="CameraEventAggregator.html">CameraEventAggregator</a></li><li data-name="CameraEventType"><a href="CameraEventType.html">CameraEventType</a></li><li data-name="cancelAnimationFrame"><a href="cancelAnimationFrame.html">cancelAnimationFrame</a></li><li data-name="Cartesian2"><a href="Cartesian2.html">Cartesian2</a></li><li data-name="Cartesian3"><a href="Cartesian3.html">Cartesian3</a></li><li data-name="Cartesian4"><a href="Cartesian4.html">Cartesian4</a></li><li data-name="Cartographic"><a href="Cartographic.html">Cartographic</a></li><li data-name="CatmullRomSpline"><a href="CatmullRomSpline.html">CatmullRomSpline</a></li><li data-name="CesiumInspector"><a href="CesiumInspector.html">CesiumInspector</a></li><li data-name="CesiumInspectorViewModel"><a href="CesiumInspectorViewModel.html">CesiumInspectorViewModel</a></li><li data-name="CesiumMath"><a href="CesiumMath.html">CesiumMath</a></li><li data-name="CesiumTerrainProvider"><a href="CesiumTerrainProvider.html">CesiumTerrainProvider</a></li><li data-name="CesiumWidget"><a href="CesiumWidget.html">CesiumWidget</a></li><li data-name="CircleGeometry"><a href="CircleGeometry.html">CircleGeometry</a></li><li data-name="CircleOutlineGeometry"><a href="CircleOutlineGeometry.html">CircleOutlineGeometry</a></li><li data-name="Clock"><a href="Clock.html">Clock</a></li><li data-name="ClockRange"><a href="ClockRange.html">ClockRange</a></li><li data-name="ClockStep"><a href="ClockStep.html">ClockStep</a></li><li data-name="ClockViewModel"><a href="ClockViewModel.html">ClockViewModel</a></li><li data-name="clone"><a href="clone.html">clone</a></li><li data-name="Color"><a href="Color.html">Color</a></li><li data-name="ColorGeometryInstanceAttribute"><a href="ColorGeometryInstanceAttribute.html">ColorGeometryInstanceAttribute</a></li><li data-name="ColorMaterialProperty"><a href="ColorMaterialProperty.html">ColorMaterialProperty</a></li><li data-name="combine"><a href="combine.html">combine</a></li><li data-name="Command"><a href="Command.html">Command</a></li><li data-name="ComponentDatatype"><a href="ComponentDatatype.html">ComponentDatatype</a></li><li data-name="CompositeEntityCollection"><a href="CompositeEntityCollection.html">CompositeEntityCollection</a></li><li data-name="CompositeMaterialProperty"><a href="CompositeMaterialProperty.html">CompositeMaterialProperty</a></li><li data-name="CompositePositionProperty"><a href="CompositePositionProperty.html">CompositePositionProperty</a></li><li data-name="CompositeProperty"><a href="CompositeProperty.html">CompositeProperty</a></li><li data-name="ConstantPositionProperty"><a href="ConstantPositionProperty.html">ConstantPositionProperty</a></li><li data-name="ConstantProperty"><a href="ConstantProperty.html">ConstantProperty</a></li><li data-name="CornerType"><a href="CornerType.html">CornerType</a></li><li data-name="CorridorGeometry"><a href="CorridorGeometry.html">CorridorGeometry</a></li><li data-name="CorridorOutlineGeometry"><a href="CorridorOutlineGeometry.html">CorridorOutlineGeometry</a></li><li data-name="createCommand"><a href="createCommand.html">createCommand</a></li><li data-name="createGuid"><a href="createGuid.html">createGuid</a></li><li data-name="createTaskProcessorWorker"><a href="createTaskProcessorWorker.html">createTaskProcessorWorker</a></li><li data-name="Credit"><a href="Credit.html">Credit</a></li><li data-name="CreditDisplay"><a href="CreditDisplay.html">CreditDisplay</a></li><li data-name="CubicRealPolynomial"><a href="CubicRealPolynomial.html">CubicRealPolynomial</a></li><li data-name="CullFace"><a href="CullFace.html">CullFace</a></li><li data-name="CullingVolume"><a href="CullingVolume.html">CullingVolume</a></li><li data-name="CylinderGeometry"><a href="CylinderGeometry.html">CylinderGeometry</a></li><li data-name="CylinderOutlineGeometry"><a href="CylinderOutlineGeometry.html">CylinderOutlineGeometry</a></li><li data-name="CzmlDataSource"><a href="CzmlDataSource.html">CzmlDataSource</a></li><li data-name="DataSource"><a href="DataSource.html">DataSource</a></li><li data-name="DataSourceClock"><a href="DataSourceClock.html">DataSourceClock</a></li><li data-name="DataSourceCollection"><a href="DataSourceCollection.html">DataSourceCollection</a></li><li data-name="DataSourceDisplay"><a href="DataSourceDisplay.html">DataSourceDisplay</a></li><li data-name="DebugAppearance"><a href="DebugAppearance.html">DebugAppearance</a></li><li data-name="DebugModelMatrixPrimitive"><a href="DebugModelMatrixPrimitive.html">DebugModelMatrixPrimitive</a></li><li data-name="DefaultProxy"><a href="DefaultProxy.html">DefaultProxy</a></li><li data-name="defaultValue"><a href="defaultValue.html">defaultValue</a></li><li data-name="defined"><a href="defined.html">defined</a></li><li data-name="DepthFunction"><a href="DepthFunction.html">DepthFunction</a></li><li data-name="destroyObject"><a href="destroyObject.html">destroyObject</a></li><li data-name="DeveloperError"><a href="DeveloperError.html">DeveloperError</a></li><li data-name="DiscardMissingTileImagePolicy"><a href="DiscardMissingTileImagePolicy.html">DiscardMissingTileImagePolicy</a></li><li data-name="DynamicGeometryUpdater"><a href="DynamicGeometryUpdater.html">DynamicGeometryUpdater</a></li><li data-name="EllipseGeometry"><a href="EllipseGeometry.html">EllipseGeometry</a></li><li data-name="EllipseGeometryUpdater"><a href="EllipseGeometryUpdater.html">EllipseGeometryUpdater</a></li><li data-name="EllipseGraphics"><a href="EllipseGraphics.html">EllipseGraphics</a></li><li data-name="EllipseOutlineGeometry"><a href="EllipseOutlineGeometry.html">EllipseOutlineGeometry</a></li><li data-name="Ellipsoid"><a href="Ellipsoid.html">Ellipsoid</a></li><li data-name="EllipsoidGeodesic"><a href="EllipsoidGeodesic.html">EllipsoidGeodesic</a></li><li data-name="EllipsoidGeometry"><a href="EllipsoidGeometry.html">EllipsoidGeometry</a></li><li data-name="EllipsoidGeometryUpdater"><a href="EllipsoidGeometryUpdater.html">EllipsoidGeometryUpdater</a></li><li data-name="EllipsoidGraphics"><a href="EllipsoidGraphics.html">EllipsoidGraphics</a></li><li data-name="EllipsoidOutlineGeometry"><a href="EllipsoidOutlineGeometry.html">EllipsoidOutlineGeometry</a></li><li data-name="EllipsoidPrimitive"><a href="EllipsoidPrimitive.html">EllipsoidPrimitive</a></li><li data-name="EllipsoidSurfaceAppearance"><a href="EllipsoidSurfaceAppearance.html">EllipsoidSurfaceAppearance</a></li><li data-name="EllipsoidTangentPlane"><a href="EllipsoidTangentPlane.html">EllipsoidTangentPlane</a></li><li data-name="EllipsoidTerrainProvider"><a href="EllipsoidTerrainProvider.html">EllipsoidTerrainProvider</a></li><li data-name="Entity"><a href="Entity.html">Entity</a></li><li data-name="EntityCollection"><a href="EntityCollection.html">EntityCollection</a></li><li data-name="EntityView"><a href="EntityView.html">EntityView</a></li><li data-name="Event"><a href="Event.html">Event</a></li><li data-name="EventHelper"><a href="EventHelper.html">EventHelper</a></li><li data-name="ExtrapolationType"><a href="ExtrapolationType.html">ExtrapolationType</a></li><li data-name="FeatureDetection"><a href="FeatureDetection.html">FeatureDetection</a></li><li data-name="formatError"><a href="formatError.html">formatError</a></li><li data-name="FrameRateMonitor"><a href="FrameRateMonitor.html">FrameRateMonitor</a></li><li data-name="Fullscreen"><a href="Fullscreen.html">Fullscreen</a></li><li data-name="FullscreenButton"><a href="FullscreenButton.html">FullscreenButton</a></li><li data-name="FullscreenButtonViewModel"><a href="FullscreenButtonViewModel.html">FullscreenButtonViewModel</a></li><li data-name="Geocoder"><a href="Geocoder.html">Geocoder</a></li><li data-name="GeocoderViewModel"><a href="GeocoderViewModel.html">GeocoderViewModel</a></li><li data-name="GeographicProjection"><a href="GeographicProjection.html">GeographicProjection</a></li><li data-name="GeographicTilingScheme"><a href="GeographicTilingScheme.html">GeographicTilingScheme</a></li><li data-name="GeoJsonDataSource"><a href="GeoJsonDataSource.html">GeoJsonDataSource</a></li><li data-name="Geometry"><a href="Geometry.html">Geometry</a></li><li data-name="GeometryAttribute"><a href="GeometryAttribute.html">GeometryAttribute</a></li><li data-name="GeometryAttributes"><a href="GeometryAttributes.html">GeometryAttributes</a></li><li data-name="GeometryInstance"><a href="GeometryInstance.html">GeometryInstance</a></li><li data-name="GeometryInstanceAttribute"><a href="GeometryInstanceAttribute.html">GeometryInstanceAttribute</a></li><li data-name="GeometryPipeline"><a href="GeometryPipeline.html">GeometryPipeline</a></li><li data-name="GeometryUpdater"><a href="GeometryUpdater.html">GeometryUpdater</a></li><li data-name="GeometryVisualizer"><a href="GeometryVisualizer.html">GeometryVisualizer</a></li><li data-name="getFilenameFromUri"><a href="getFilenameFromUri.html">getFilenameFromUri</a></li><li data-name="getImagePixels"><a href="getImagePixels.html">getImagePixels</a></li><li data-name="getTimestamp"><a href="getTimestamp.html">getTimestamp</a></li><li data-name="Globe"><a href="Globe.html">Globe</a></li><li data-name="GoogleEarthImageryProvider"><a href="GoogleEarthImageryProvider.html">GoogleEarthImageryProvider</a></li><li data-name="GregorianDate"><a href="GregorianDate.html">GregorianDate</a></li><li data-name="GridImageryProvider"><a href="GridImageryProvider.html">GridImageryProvider</a></li><li data-name="GridMaterialProperty"><a href="GridMaterialProperty.html">GridMaterialProperty</a></li><li data-name="HeightmapTerrainData"><a href="HeightmapTerrainData.html">HeightmapTerrainData</a></li><li data-name="HeightmapTessellator"><a href="HeightmapTessellator.html">HeightmapTessellator</a></li><li data-name="HermitePolynomialApproximation"><a href="HermitePolynomialApproximation.html">HermitePolynomialApproximation</a></li><li data-name="HermiteSpline"><a href="HermiteSpline.html">HermiteSpline</a></li><li data-name="HomeButton"><a href="HomeButton.html">HomeButton</a></li><li data-name="HomeButtonViewModel"><a href="HomeButtonViewModel.html">HomeButtonViewModel</a></li><li data-name="HorizontalOrigin"><a href="HorizontalOrigin.html">HorizontalOrigin</a></li><li data-name="ImageMaterialProperty"><a href="ImageMaterialProperty.html">ImageMaterialProperty</a></li><li data-name="ImageryLayer"><a href="ImageryLayer.html">ImageryLayer</a></li><li data-name="ImageryLayerCollection"><a href="ImageryLayerCollection.html">ImageryLayerCollection</a></li><li data-name="ImageryLayerFeatureInfo"><a href="ImageryLayerFeatureInfo.html">ImageryLayerFeatureInfo</a></li><li data-name="ImageryProvider"><a href="ImageryProvider.html">ImageryProvider</a></li><li data-name="IndexDatatype"><a href="IndexDatatype.html">IndexDatatype</a></li><li data-name="InfoBox"><a href="InfoBox.html">InfoBox</a></li><li data-name="InfoBoxViewModel"><a href="InfoBoxViewModel.html">InfoBoxViewModel</a></li><li data-name="InterpolationAlgorithm"><a href="InterpolationAlgorithm.html">InterpolationAlgorithm</a></li><li data-name="Intersect"><a href="Intersect.html">Intersect</a></li><li data-name="Intersections2D"><a href="Intersections2D.html">Intersections2D</a></li><li data-name="IntersectionTests"><a href="IntersectionTests.html">IntersectionTests</a></li><li data-name="Interval"><a href="Interval.html">Interval</a></li><li data-name="isArray"><a href="isArray.html">isArray</a></li><li data-name="Iso8601"><a href="Iso8601.html">Iso8601</a></li><li data-name="jsonp"><a href="jsonp.html">jsonp</a></li><li data-name="JulianDate"><a href="JulianDate.html">JulianDate</a></li><li data-name="KeyboardEventModifier"><a href="KeyboardEventModifier.html">KeyboardEventModifier</a></li><li data-name="Label"><a href="Label.html">Label</a></li><li data-name="LabelCollection"><a href="LabelCollection.html">LabelCollection</a></li><li data-name="LabelGraphics"><a href="LabelGraphics.html">LabelGraphics</a></li><li data-name="LabelStyle"><a href="LabelStyle.html">LabelStyle</a></li><li data-name="LabelVisualizer"><a href="LabelVisualizer.html">LabelVisualizer</a></li><li data-name="LagrangePolynomialApproximation"><a href="LagrangePolynomialApproximation.html">LagrangePolynomialApproximation</a></li><li data-name="LeapSecond"><a href="LeapSecond.html">LeapSecond</a></li><li data-name="LinearApproximation"><a href="LinearApproximation.html">LinearApproximation</a></li><li data-name="LinearSpline"><a href="LinearSpline.html">LinearSpline</a></li><li data-name="loadArrayBuffer"><a href="loadArrayBuffer.html">loadArrayBuffer</a></li><li data-name="loadBlob"><a href="loadBlob.html">loadBlob</a></li><li data-name="loadImage"><a href="loadImage.html">loadImage</a></li><li data-name="loadImageViaBlob"><a href="loadImageViaBlob.html">loadImageViaBlob</a></li><li data-name="loadJson"><a href="loadJson.html">loadJson</a></li><li data-name="loadText"><a href="loadText.html">loadText</a></li><li data-name="loadWithXhr"><a href="loadWithXhr.html">loadWithXhr</a></li><li data-name="loadXML"><a href="loadXML.html">loadXML</a></li><li data-name="MapProjection"><a href="MapProjection.html">MapProjection</a></li><li data-name="Material"><a href="Material.html">Material</a></li><li data-name="MaterialAppearance"><a href="MaterialAppearance.html">MaterialAppearance</a></li><li data-name="MaterialProperty"><a href="MaterialProperty.html">MaterialProperty</a></li><li data-name="Matrix2"><a href="Matrix2.html">Matrix2</a></li><li data-name="Matrix3"><a href="Matrix3.html">Matrix3</a></li><li data-name="Matrix4"><a href="Matrix4.html">Matrix4</a></li><li data-name="mergeSort"><a href="mergeSort.html">mergeSort</a></li><li data-name="Model"><a href="Model.html">Model</a></li><li data-name="ModelAnimation"><a href="ModelAnimation.html">ModelAnimation</a></li><li data-name="ModelAnimationCollection"><a href="ModelAnimationCollection.html">ModelAnimationCollection</a></li><li data-name="ModelAnimationLoop"><a href="ModelAnimationLoop.html">ModelAnimationLoop</a></li><li data-name="ModelGraphics"><a href="ModelGraphics.html">ModelGraphics</a></li><li data-name="ModelMaterial"><a href="ModelMaterial.html">ModelMaterial</a></li><li data-name="ModelMesh"><a href="ModelMesh.html">ModelMesh</a></li><li data-name="ModelNode"><a href="ModelNode.html">ModelNode</a></li><li data-name="ModelVisualizer"><a href="ModelVisualizer.html">ModelVisualizer</a></li><li data-name="Moon"><a href="Moon.html">Moon</a></li><li data-name="NavigationHelpButton"><a href="NavigationHelpButton.html">NavigationHelpButton</a></li><li data-name="NavigationHelpButtonViewModel"><a href="NavigationHelpButtonViewModel.html">NavigationHelpButtonViewModel</a></li><li data-name="NearFarScalar"><a href="NearFarScalar.html">NearFarScalar</a></li><li data-name="NeverTileDiscardPolicy"><a href="NeverTileDiscardPolicy.html">NeverTileDiscardPolicy</a></li><li data-name="ObjectOrientedBoundingBox"><a href="ObjectOrientedBoundingBox.html">ObjectOrientedBoundingBox</a></li><li data-name="Occluder"><a href="Occluder.html">Occluder</a></li><li data-name="OpenStreetMapImageryProvider"><a href="OpenStreetMapImageryProvider.html">OpenStreetMapImageryProvider</a></li><li data-name="OrthographicFrustum"><a href="OrthographicFrustum.html">OrthographicFrustum</a></li><li data-name="Packable"><a href="Packable.html">Packable</a></li><li data-name="PackableForInterpolation"><a href="PackableForInterpolation.html">PackableForInterpolation</a></li><li data-name="PathGraphics"><a href="PathGraphics.html">PathGraphics</a></li><li data-name="PathVisualizer"><a href="PathVisualizer.html">PathVisualizer</a></li><li data-name="PerformanceWatchdog"><a href="PerformanceWatchdog.html">PerformanceWatchdog</a></li><li data-name="PerformanceWatchdogViewModel"><a href="PerformanceWatchdogViewModel.html">PerformanceWatchdogViewModel</a></li><li data-name="PerInstanceColorAppearance"><a href="PerInstanceColorAppearance.html">PerInstanceColorAppearance</a></li><li data-name="PerspectiveFrustum"><a href="PerspectiveFrustum.html">PerspectiveFrustum</a></li><li data-name="PerspectiveOffCenterFrustum"><a href="PerspectiveOffCenterFrustum.html">PerspectiveOffCenterFrustum</a></li><li data-name="PinBuilder"><a href="PinBuilder.html">PinBuilder</a></li><li data-name="PixelFormat"><a href="PixelFormat.html">PixelFormat</a></li><li data-name="Plane"><a href="Plane.html">Plane</a></li><li data-name="PointGraphics"><a href="PointGraphics.html">PointGraphics</a></li><li data-name="pointInsideTriangle"><a href="pointInsideTriangle.html">pointInsideTriangle</a></li><li data-name="PointVisualizer"><a href="PointVisualizer.html">PointVisualizer</a></li><li data-name="Polygon"><a href="Polygon.html">Polygon</a></li><li data-name="PolygonGeometry"><a href="PolygonGeometry.html">PolygonGeometry</a></li><li data-name="PolygonGeometryUpdater"><a href="PolygonGeometryUpdater.html">PolygonGeometryUpdater</a></li><li data-name="PolygonGraphics"><a href="PolygonGraphics.html">PolygonGraphics</a></li><li data-name="PolygonOutlineGeometry"><a href="PolygonOutlineGeometry.html">PolygonOutlineGeometry</a></li><li data-name="Polyline"><a href="Polyline.html">Polyline</a></li><li data-name="PolylineCollection"><a href="PolylineCollection.html">PolylineCollection</a></li><li data-name="PolylineColorAppearance"><a href="PolylineColorAppearance.html">PolylineColorAppearance</a></li><li data-name="PolylineGeometry"><a href="PolylineGeometry.html">PolylineGeometry</a></li><li data-name="PolylineGeometryUpdater"><a href="PolylineGeometryUpdater.html">PolylineGeometryUpdater</a></li><li data-name="PolylineGlowProperty"><a href="PolylineGlowProperty.html">PolylineGlowProperty</a></li><li data-name="PolylineGraphics"><a href="PolylineGraphics.html">PolylineGraphics</a></li><li data-name="PolylineMaterialAppearance"><a href="PolylineMaterialAppearance.html">PolylineMaterialAppearance</a></li><li data-name="PolylineOutlineMaterialProperty"><a href="PolylineOutlineMaterialProperty.html">PolylineOutlineMaterialProperty</a></li><li data-name="PolylineVolumeGeometry"><a href="PolylineVolumeGeometry.html">PolylineVolumeGeometry</a></li><li data-name="PolylineVolumeOutlineGeometry"><a href="PolylineVolumeOutlineGeometry.html">PolylineVolumeOutlineGeometry</a></li><li data-name="PositionProperty"><a href="PositionProperty.html">PositionProperty</a></li><li data-name="PositionPropertyArray"><a href="PositionPropertyArray.html">PositionPropertyArray</a></li><li data-name="Primitive"><a href="Primitive.html">Primitive</a></li><li data-name="PrimitiveCollection"><a href="PrimitiveCollection.html">PrimitiveCollection</a></li><li data-name="PrimitiveType"><a href="PrimitiveType.html">PrimitiveType</a></li><li data-name="Property"><a href="Property.html">Property</a></li><li data-name="PropertyArray"><a href="PropertyArray.html">PropertyArray</a></li><li data-name="ProviderViewModel"><a href="ProviderViewModel.html">ProviderViewModel</a></li><li data-name="QuadraticRealPolynomial"><a href="QuadraticRealPolynomial.html">QuadraticRealPolynomial</a></li><li data-name="QuantizedMeshTerrainData"><a href="QuantizedMeshTerrainData.html">QuantizedMeshTerrainData</a></li><li data-name="QuarticRealPolynomial"><a href="QuarticRealPolynomial.html">QuarticRealPolynomial</a></li><li data-name="Quaternion"><a href="Quaternion.html">Quaternion</a></li><li data-name="QuaternionSpline"><a href="QuaternionSpline.html">QuaternionSpline</a></li><li data-name="Queue"><a href="Queue.html">Queue</a></li><li data-name="Ray"><a href="Ray.html">Ray</a></li><li data-name="Rectangle"><a href="Rectangle.html">Rectangle</a></li><li data-name="RectangleGeometry"><a href="RectangleGeometry.html">RectangleGeometry</a></li><li data-name="RectangleGeometryUpdater"><a href="RectangleGeometryUpdater.html">RectangleGeometryUpdater</a></li><li data-name="RectangleGraphics"><a href="RectangleGraphics.html">RectangleGraphics</a></li><li data-name="RectangleOutlineGeometry"><a href="RectangleOutlineGeometry.html">RectangleOutlineGeometry</a></li><li data-name="RectanglePrimitive"><a href="RectanglePrimitive.html">RectanglePrimitive</a></li><li data-name="ReferenceFrame"><a href="ReferenceFrame.html">ReferenceFrame</a></li><li data-name="ReferenceProperty"><a href="ReferenceProperty.html">ReferenceProperty</a></li><li data-name="requestAnimationFrame"><a href="requestAnimationFrame.html">requestAnimationFrame</a></li><li data-name="RequestErrorEvent"><a href="RequestErrorEvent.html">RequestErrorEvent</a></li><li data-name="RuntimeError"><a href="RuntimeError.html">RuntimeError</a></li><li data-name="SampledPositionProperty"><a href="SampledPositionProperty.html">SampledPositionProperty</a></li><li data-name="SampledProperty"><a href="SampledProperty.html">SampledProperty</a></li><li data-name="sampleTerrain"><a href="sampleTerrain.html">sampleTerrain</a></li><li data-name="sanitize"><a href="sanitize.html">sanitize</a></li><li data-name="Scene"><a href="Scene.html">Scene</a></li><li data-name="SceneMode"><a href="SceneMode.html">SceneMode</a></li><li data-name="SceneModePicker"><a href="SceneModePicker.html">SceneModePicker</a></li><li data-name="SceneModePickerViewModel"><a href="SceneModePickerViewModel.html">SceneModePickerViewModel</a></li><li data-name="SceneTransforms"><a href="SceneTransforms.html">SceneTransforms</a></li><li data-name="ScreenSpaceCameraController"><a href="ScreenSpaceCameraController.html">ScreenSpaceCameraController</a></li><li data-name="ScreenSpaceEventHandler"><a href="ScreenSpaceEventHandler.html">ScreenSpaceEventHandler</a></li><li data-name="ScreenSpaceEventType"><a href="ScreenSpaceEventType.html">ScreenSpaceEventType</a></li><li data-name="SelectionIndicator"><a href="SelectionIndicator.html">SelectionIndicator</a></li><li data-name="SelectionIndicatorViewModel"><a href="SelectionIndicatorViewModel.html">SelectionIndicatorViewModel</a></li><li data-name="ShowGeometryInstanceAttribute"><a href="ShowGeometryInstanceAttribute.html">ShowGeometryInstanceAttribute</a></li><li data-name="Simon1994PlanetaryPositions"><a href="Simon1994PlanetaryPositions.html">Simon1994PlanetaryPositions</a></li><li data-name="SimplePolylineGeometry"><a href="SimplePolylineGeometry.html">SimplePolylineGeometry</a></li><li data-name="SingleTileImageryProvider"><a href="SingleTileImageryProvider.html">SingleTileImageryProvider</a></li><li data-name="SkyAtmosphere"><a href="SkyAtmosphere.html">SkyAtmosphere</a></li><li data-name="SkyBox"><a href="SkyBox.html">SkyBox</a></li><li data-name="SphereGeometry"><a href="SphereGeometry.html">SphereGeometry</a></li><li data-name="SphereOutlineGeometry"><a href="SphereOutlineGeometry.html">SphereOutlineGeometry</a></li><li data-name="Spherical"><a href="Spherical.html">Spherical</a></li><li data-name="Spline"><a href="Spline.html">Spline</a></li><li data-name="StencilFunction"><a href="StencilFunction.html">StencilFunction</a></li><li data-name="StencilOperation"><a href="StencilOperation.html">StencilOperation</a></li><li data-name="StripeMaterialProperty"><a href="StripeMaterialProperty.html">StripeMaterialProperty</a></li><li data-name="StripeOrientation"><a href="StripeOrientation.html">StripeOrientation</a></li><li data-name="subdivideArray"><a href="subdivideArray.html">subdivideArray</a></li><li data-name="Sun"><a href="Sun.html">Sun</a></li><li data-name="SvgPathBindingHandler"><a href="SvgPathBindingHandler.html">SvgPathBindingHandler</a></li><li data-name="TaskProcessor"><a href="TaskProcessor.html">TaskProcessor</a></li><li data-name="TerrainData"><a href="TerrainData.html">TerrainData</a></li><li data-name="TerrainMesh"><a href="TerrainMesh.html">TerrainMesh</a></li><li data-name="TerrainProvider"><a href="TerrainProvider.html">TerrainProvider</a></li><li data-name="throttleRequestByServer"><a href="throttleRequestByServer.html">throttleRequestByServer</a></li><li data-name="TileCoordinatesImageryProvider"><a href="TileCoordinatesImageryProvider.html">TileCoordinatesImageryProvider</a></li><li data-name="TileDiscardPolicy"><a href="TileDiscardPolicy.html">TileDiscardPolicy</a></li><li data-name="TileMapServiceImageryProvider"><a href="TileMapServiceImageryProvider.html">TileMapServiceImageryProvider</a></li><li data-name="TileProviderError"><a href="TileProviderError.html">TileProviderError</a></li><li data-name="TilingScheme"><a href="TilingScheme.html">TilingScheme</a></li><li data-name="TimeInterval"><a href="TimeInterval.html">TimeInterval</a></li><li data-name="TimeIntervalCollection"><a href="TimeIntervalCollection.html">TimeIntervalCollection</a></li><li data-name="TimeIntervalCollectionPositionProperty"><a href="TimeIntervalCollectionPositionProperty.html">TimeIntervalCollectionPositionProperty</a></li><li data-name="TimeIntervalCollectionProperty"><a href="TimeIntervalCollectionProperty.html">TimeIntervalCollectionProperty</a></li><li data-name="Timeline"><a href="Timeline.html">Timeline</a></li><li data-name="TimeStandard"><a href="TimeStandard.html">TimeStandard</a></li><li data-name="ToggleButtonViewModel"><a href="ToggleButtonViewModel.html">ToggleButtonViewModel</a></li><li data-name="Transforms"><a href="Transforms.html">Transforms</a></li><li data-name="TridiagonalSystemSolver"><a href="TridiagonalSystemSolver.html">TridiagonalSystemSolver</a></li><li data-name="VertexFormat"><a href="VertexFormat.html">VertexFormat</a></li><li data-name="VerticalOrigin"><a href="VerticalOrigin.html">VerticalOrigin</a></li><li data-name="Viewer"><a href="Viewer.html">Viewer</a></li><li data-name="viewerCesiumInspectorMixin"><a href="viewerCesiumInspectorMixin.html">viewerCesiumInspectorMixin</a></li><li data-name="viewerDragDropMixin"><a href="viewerDragDropMixin.html">viewerDragDropMixin</a></li><li data-name="viewerEntityMixin"><a href="viewerEntityMixin.html">viewerEntityMixin</a></li><li data-name="viewerPerformanceWatchdogMixin"><a href="viewerPerformanceWatchdogMixin.html">viewerPerformanceWatchdogMixin</a></li><li data-name="ViewportQuad"><a href="ViewportQuad.html">ViewportQuad</a></li><li data-name="Visibility"><a href="Visibility.html">Visibility</a></li><li data-name="Visualizer"><a href="Visualizer.html">Visualizer</a></li><li data-name="VRTheWorldTerrainProvider"><a href="VRTheWorldTerrainProvider.html">VRTheWorldTerrainProvider</a></li><li data-name="WallGeometry"><a href="WallGeometry.html">WallGeometry</a></li><li data-name="WallGeometryUpdater"><a href="WallGeometryUpdater.html">WallGeometryUpdater</a></li><li data-name="WallGraphics"><a href="WallGraphics.html">WallGraphics</a></li><li data-name="WallOutlineGeometry"><a href="WallOutlineGeometry.html">WallOutlineGeometry</a></li><li data-name="WebMapServiceImageryProvider"><a href="WebMapServiceImageryProvider.html">WebMapServiceImageryProvider</a></li><li data-name="WebMapTileServiceImageryProvider"><a href="WebMapTileServiceImageryProvider.html">WebMapTileServiceImageryProvider</a></li><li data-name="WebMercatorProjection"><a href="WebMercatorProjection.html">WebMercatorProjection</a></li><li data-name="WebMercatorTilingScheme"><a href="WebMercatorTilingScheme.html">WebMercatorTilingScheme</a></li><li data-name="WindingOrder"><a href="WindingOrder.html">WindingOrder</a></li></ul>
    </div>
</div>

<div class="nav navStatic"></div>

<div id="main">

    <h1 class="page-title">Matrix4</h1>

    



<section>

<header>
    
</header>

<article>
    <div class="container-overview">
    

    
        
<dt>
    <div class="nameContainer">
    <h4 class="name" id="Matrix4">
        new Matrix4<span class="signature">(<span class="optional">column0Row0</span>, <span class="optional">column1Row0</span>, <span class="optional">column2Row0</span>, <span class="optional">column3Row0</span>, <span class="optional">column0Row1</span>, <span class="optional">column1Row1</span>, <span class="optional">column2Row1</span>, <span class="optional">column3Row1</span>, <span class="optional">column0Row2</span>, <span class="optional">column1Row2</span>, <span class="optional">column2Row2</span>, <span class="optional">column3Row2</span>, <span class="optional">column0Row3</span>, <span class="optional">column1Row3</span>, <span class="optional">column2Row3</span>, <span class="optional">column3Row3</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        A 4x4 matrix, indexable as a column-major order array.Constructor parameters are in row-major order for code readability.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>column0Row0</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 0, row 0.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column1Row0</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 1, row 0.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column2Row0</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 2, row 0.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column3Row0</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 3, row 0.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column0Row1</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 0, row 1.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column1Row1</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 1, row 1.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column2Row1</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 2, row 1.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column3Row1</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 3, row 1.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column0Row2</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 0, row 2.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column1Row2</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 1, row 2.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column2Row2</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 2, row 2.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column3Row2</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 3, row 2.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column0Row3</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 0, row 3.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column1Row3</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 1, row 3.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column2Row3</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 2, row 3.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column3Row3</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The value for column 3, row 3.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    
    <h5>See:</h5>
    <ul class="see-list">
        <li><a href="Matrix4.html#fromColumnMajorArray">Matrix4.fromColumnMajorArray</a></li>
    
        <li><a href="Matrix4.html#fromRowMajorArray">Matrix4.fromRowMajorArray</a></li>
    
        <li><a href="Matrix4.html#fromRotationTranslation">Matrix4.fromRotationTranslation</a></li>
    
        <li><a href="Matrix4.html#fromTranslationQuaternionRotationScale">Matrix4.fromTranslationQuaternionRotationScale</a></li>
    
        <li><a href="Matrix4.html#fromTranslation">Matrix4.fromTranslation</a></li>
    
        <li><a href="Matrix4.html#fromScale">Matrix4.fromScale</a></li>
    
        <li><a href="Matrix4.html#fromUniformScale">Matrix4.fromUniformScale</a></li>
    
        <li><a href="Matrix4.html#fromCamera">Matrix4.fromCamera</a></li>
    
        <li><a href="Matrix4.html#computePerspectiveFieldOfView">Matrix4.computePerspectiveFieldOfView</a></li>
    
        <li><a href="Matrix4.html#computeOrthographicOffCenter">Matrix4.computeOrthographicOffCenter</a></li>
    
        <li><a href="Matrix4.html#computePerspectiveOffCenter">Matrix4.computePerspectiveOffCenter</a></li>
    
        <li><a href="Matrix4.html#computeInfinitePerspectiveOffCenter">Matrix4.computeInfinitePerspectiveOffCenter</a></li>
    
        <li><a href="Matrix4.html#computeViewportTransformation">Matrix4.computeViewportTransformation</a></li>
    
        <li><a href="Matrix2.html">Matrix2</a></li>
    
        <li><a href="Matrix3.html">Matrix3</a></li>
    
        <li><a href="Packable.html">Packable</a></li>
    </ul>
    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L62">Core/Matrix4.js, line 62</a>
    </div>
    
</dl>

</dd>

    
    </div>

    

    

    

    

    

    
        <h3 class="subsection-title">Members</h3>

        <dl>
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN0ROW0">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN0ROW0<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 0, row 0.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2383">Core/Matrix4.js, line 2383</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN0ROW1">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN0ROW1<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 0, row 1.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2391">Core/Matrix4.js, line 2391</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN0ROW2">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN0ROW2<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 0, row 2.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2399">Core/Matrix4.js, line 2399</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN0ROW3">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN0ROW3<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 0, row 3.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2407">Core/Matrix4.js, line 2407</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN1ROW0">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN1ROW0<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 1, row 0.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2415">Core/Matrix4.js, line 2415</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN1ROW1">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN1ROW1<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 1, row 1.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2423">Core/Matrix4.js, line 2423</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN1ROW2">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN1ROW2<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 1, row 2.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2431">Core/Matrix4.js, line 2431</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN1ROW3">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN1ROW3<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 1, row 3.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2439">Core/Matrix4.js, line 2439</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN2ROW0">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN2ROW0<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 2, row 0.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2447">Core/Matrix4.js, line 2447</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN2ROW1">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN2ROW1<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 2, row 1.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2455">Core/Matrix4.js, line 2455</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN2ROW2">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN2ROW2<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 2, row 2.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2463">Core/Matrix4.js, line 2463</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN2ROW3">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN2ROW3<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 2, row 3.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2471">Core/Matrix4.js, line 2471</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN3ROW0">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN3ROW0<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 3, row 0.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2479">Core/Matrix4.js, line 2479</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN3ROW1">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN3ROW1<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 3, row 1.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2487">Core/Matrix4.js, line 2487</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN3ROW2">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN3ROW2<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 3, row 2.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2495">Core/Matrix4.js, line 2495</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="COLUMN3ROW3">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.COLUMN3ROW3<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The index into Matrix4 for column 3, row 3.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2503">Core/Matrix4.js, line 2503</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="IDENTITY">
        <span class="type-signature attribute-static">static</span><span class="type-signature attribute-constant">constant</span>Matrix4.IDENTITY<span class="type-signature"> :<a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        An immutable Matrix4 instance initialized to the identity matrix.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2372">Core/Matrix4.js, line 2372</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="packedLength">
        <span class="type-signature attribute-static">static</span>Matrix4.packedLength<span class="type-signature"> :Number</span>
    </h4>

    </div>

    
</dt>
<dd>
    
    <div class="description">
        The number of elements used to pack the object into an array.
    </div>
    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L88">Core/Matrix4.js, line 88</a>
    </div>
    
</dl>

</dd>

        </dl>
    

    
        <h3 class="subsection-title">Methods</h3>

        <dl>
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="clone">
        clone<span class="signature">(<span class="optional">result</span>)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Duplicates the provided Matrix4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2511">Core/Matrix4.js, line 2511</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="equals">
        equals<span class="signature">(<span class="optional">right</span>)</span> &rarr; <span class="type-signature returnType">Boolean</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Compares this matrix to the provided matrix componentwise and returns<code>true</code> if they are equal, <code>false</code> otherwise.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The right hand side matrix.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    <code>true</code> if they are equal, <code>false</code> otherwise.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2522">Core/Matrix4.js, line 2522</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="equalsEpsilon">
        equalsEpsilon<span class="signature">(<span class="optional">right</span>, epsilon)</span> &rarr; <span class="type-signature returnType">Boolean</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Compares this matrix to the provided matrix componentwise and returns<code>true</code> if they are within the provided epsilon,<code>false</code> otherwise.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The right hand side matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>epsilon</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The epsilon to use for equality testing.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2535">Core/Matrix4.js, line 2535</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="toString">
        toString<span class="signature">()</span> &rarr; <span class="type-signature returnType">String</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a string representing this Matrix with each row beingon a separate line and in the format '(column0, column1, column2, column3)'.
    </div>
    

    

    

    

    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    A string representing the provided Matrix with each row being on a separate line and in the format '(column0, column1, column2, column3)'.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2545">Core/Matrix4.js, line 2545</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="abs">
        <span class="type-signature attribute-static">static</span>Matrix4.abs<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a matrix, which contains the absolute (unsigned) values of the provided matrix's elements.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix with signed elements.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1973">Core/Matrix4.js, line 1973</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="add">
        <span class="type-signature attribute-static">static</span>Matrix4.add<span class="signature">(left, right, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the sum of two matrices.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The second matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1363">Core/Matrix4.js, line 1363</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="clone">
        <span class="type-signature attribute-static">static</span>Matrix4.clone<span class="signature">(matrix, <span class="optional">result</span>)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Duplicates a Matrix4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The matrix to duplicate.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter or a new Matrix4 instance if one was not provided. (Returns undefined if matrix is undefined)
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L174">Core/Matrix4.js, line 174</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="computeInfinitePerspectiveOffCenter">
        <span class="type-signature attribute-static">static</span>Matrix4.computeInfinitePerspectiveOffCenter<span class="signature">(left, right, bottom, top, near, far, result)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing an infinite off center perspective transformation.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the left of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the right of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>bottom</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters below of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>top</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters above of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>near</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the near plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>far</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the far plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object in which the result will be stored.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L820">Core/Matrix4.js, line 820</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="computeOrthographicOffCenter">
        <span class="type-signature attribute-static">static</span>Matrix4.computeOrthographicOffCenter<span class="signature">(left, right, bottom, top, near, far, result)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing an orthographic transformation matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the left of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the right of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>bottom</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters below of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>top</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters above of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>near</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the near plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>far</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the far plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object in which the result will be stored.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L689">Core/Matrix4.js, line 689</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="computePerspectiveFieldOfView">
        <span class="type-signature attribute-static">static</span>Matrix4.computePerspectiveFieldOfView<span class="signature">(fovY, aspectRatio, near, far, result)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing a perspective transformation matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>fovY</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The field of view along the Y axis in radians.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>aspectRatio</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The aspect ratio.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>near</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the near plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>far</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the far plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object in which the result will be stored.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: fovY must be in [0, PI).
    </div>

</li>
        
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: aspectRatio must be greater than zero.
    </div>

</li>
        
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: near must be greater than zero.
    </div>

</li>
        
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: far must be greater than zero.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L632">Core/Matrix4.js, line 632</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="computePerspectiveOffCenter">
        <span class="type-signature attribute-static">static</span>Matrix4.computePerspectiveOffCenter<span class="signature">(left, right, bottom, top, near, far, result)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing an off center perspective transformation.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the left of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters to the right of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>bottom</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters below of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>top</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number of meters above of the camera that will be in view.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>near</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the near plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>far</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The distance to the far plane in meters.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object in which the result will be stored.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L756">Core/Matrix4.js, line 756</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="computeViewportTransformation">
        <span class="type-signature attribute-static">static</span>Matrix4.computeViewportTransformation<span class="signature">(<span class="optional">viewport</span>, <span class="optional">nearDepthRange</span>, <span class="optional">farDepthRange</span>, result)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance that transforms from normalized device coordinates to window coordinates.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>viewport</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">{ x : 0.0, y : 0.0, width : 0.0, height : 0.0 }</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The viewport's corners as shown in Example 1.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>nearDepthRange</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The near plane distance in window coordinates.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>farDepthRange</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">1.0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The far plane distance in window coordinates.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                

                
            
                The object in which the result will be stored.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Create viewport transformation using an explicit viewport and depth range.var m = Cesium.Matrix4.computeViewportTransformation({    x : 0.0,    y : 0.0,    width : 1024.0,    height : 768.0}, 0.0, 1.0, new Cesium.Matrix4());</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L887">Core/Matrix4.js, line 887</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="equals">
        <span class="type-signature attribute-static">static</span>Matrix4.equals<span class="signature">(<span class="optional">left</span>, <span class="optional">right</span>)</span> &rarr; <span class="type-signature returnType">Boolean</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Compares the provided matrices componentwise and returns<code>true</code> if they are equal, <code>false</code> otherwise.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The second matrix.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    <code>true</code> if left and right are equal, <code>false</code> otherwise.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//compares two Matrix4 instances// a = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]// b = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]if(Cesium.Matrix4.equals(a,b)) {     console.log("Both matrices are equal");} else {     console.log("They are not equal");}//Prints "Both matrices are equal" on the console</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2032">Core/Matrix4.js, line 2032</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="equalsEpsilon">
        <span class="type-signature attribute-static">static</span>Matrix4.equalsEpsilon<span class="signature">(<span class="optional">left</span>, <span class="optional">right</span>, epsilon)</span> &rarr; <span class="type-signature returnType">Boolean</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Compares the provided matrices componentwise and returns<code>true</code> if they are within the provided epsilon,<code>false</code> otherwise.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The second matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>epsilon</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The epsilon to use for equality testing.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//compares two Matrix4 instances// a = [10.5, 14.5, 18.5, 22.5]//     [11.5, 15.5, 19.5, 23.5]//     [12.5, 16.5, 20.5, 24.5]//     [13.5, 17.5, 21.5, 25.5]// b = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]if(Cesium.Matrix4.equalsEpsilon(a,b,0.1)){     console.log("Difference between both the matrices is less than 0.1");} else {     console.log("Difference between both the matrices is not less than 0.1");}//Prints "Difference between both the matrices is not less than 0.1" on the console</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2085">Core/Matrix4.js, line 2085</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromArray">
        <span class="type-signature attribute-static">static</span>Matrix4.fromArray<span class="signature">(array, <span class="optional">startingIndex</span>, <span class="optional">result</span>)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Creates a Matrix4 from 16 consecutive elements in an array.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                

                
            
                The array whose 16 consecutive elements correspond to the positions of the matrix.  Assumes column-major order.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>startingIndex</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The offset into the array of the first element, which corresponds to first column first row position in the matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Create the Matrix4:// [1.0, 2.0, 3.0, 4.0]// [1.0, 2.0, 3.0, 4.0]// [1.0, 2.0, 3.0, 4.0]// [1.0, 2.0, 3.0, 4.0]var v = [1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];var m = Cesium.Matrix4.fromArray(v);// Create same Matrix4 with using an offset into an arrayvar v2 = [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0];var m2 = Cesium.Matrix4.fromArray(v2, 2);</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L226">Core/Matrix4.js, line 226</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromCamera">
        <span class="type-signature attribute-static">static</span>Matrix4.fromCamera<span class="signature">(camera, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance from a Camera.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>camera</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Camera.html">Camera</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The camera to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L532">Core/Matrix4.js, line 532</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromColumnMajorArray">
        <span class="type-signature attribute-static">static</span>Matrix4.fromColumnMajorArray<span class="signature">(values, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance from a column-major order array.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>values</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The column-major order array.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L235">Core/Matrix4.js, line 235</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromRotationTranslation">
        <span class="type-signature attribute-static">static</span>Matrix4.fromRotationTranslation<span class="signature">(rotation, translation, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance from a Matrix3 representing the rotationand a Cartesian3 representing the translation.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>rotation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix3.html">Matrix3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The upper left portion of the matrix representing the rotation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>translation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The upper right portion of the matrix representing the translation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L294">Core/Matrix4.js, line 294</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromRowMajorArray">
        <span class="type-signature attribute-static">static</span>Matrix4.fromRowMajorArray<span class="signature">(values, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance from a row-major order array.The resulting matrix will be in column-major order.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>values</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The row-major order array.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L253">Core/Matrix4.js, line 253</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromScale">
        <span class="type-signature attribute-static">static</span>Matrix4.fromScale<span class="signature">(scale, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing a non-uniform scale.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>scale</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The x, y, and z scale factors.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Creates//   [7.0, 0.0, 0.0, 0.0]//   [0.0, 8.0, 0.0, 0.0]//   [0.0, 0.0, 9.0, 0.0]//   [0.0, 0.0, 0.0, 1.0]var m = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(7.0, 8.0, 9.0));</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L439">Core/Matrix4.js, line 439</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromTranslation">
        <span class="type-signature attribute-static">static</span>Matrix4.fromTranslation<span class="signature">(translation, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Creates a Matrix4 instance from a Cartesian3 representing the translation.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>translation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The upper right portion of the matrix representing the translation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    
    <h5>See:</h5>
    <ul class="see-list">
        <li><a href="Matrix4.html#multiplyByTranslation">Matrix4.multiplyByTranslation</a></li>
    </ul>
    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L420">Core/Matrix4.js, line 420</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromTranslationQuaternionRotationScale">
        <span class="type-signature attribute-static">static</span>Matrix4.fromTranslationQuaternionRotationScale<span class="signature">(translation, rotation, scale, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance from a translation, rotation, and scale (TRS)representation with the rotation represented as a quaternion.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>translation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The translation transformation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>rotation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Quaternion.html">Quaternion</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The rotation transformation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>scale</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The non-uniform scale transformation.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">var result = Cesium.Matrix4.fromTranslationQuaternionRotationScale(  new Cesium.Cartesian3(1.0, 2.0, 3.0), // translation  Cesium.Quaternion.IDENTITY,           // rotation  new Cesium.Cartesian3(7.0, 8.0, 9.0), // scale  result);</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L347">Core/Matrix4.js, line 347</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="fromUniformScale">
        <span class="type-signature attribute-static">static</span>Matrix4.fromUniformScale<span class="signature">(scale, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a Matrix4 instance representing a uniform scale.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>scale</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The uniform scale factor.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object in which the result will be stored, if undefined a new instance will be created.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter, or a new Matrix4 instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Creates//   [2.0, 0.0, 0.0, 0.0]//   [0.0, 2.0, 0.0, 0.0]//   [0.0, 0.0, 2.0, 0.0]//   [0.0, 0.0, 0.0, 1.0]var m = Cesium.Matrix4.fromUniformScale(2.0);</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L488">Core/Matrix4.js, line 488</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getColumn">
        <span class="type-signature attribute-static">static</span>Matrix4.getColumn<span class="signature">(matrix, index, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian4.html">Cartesian4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Retrieves a copy of the matrix column at the provided index as a Cartesian4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>index</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the column to retrieve.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: index must be 0, 1, 2, or 3.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Examples:</h5>
        
    <pre><code class="language-javascript">//returns a Cartesian4 instance with values from the specified column// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]//Example 1: Creates an instance of Cartesianvar a = Cesium.Matrix4.getColumn(m, 2, new Cesium.Cartesian4());</code></pre>

    <pre><code class="language-javascript">//Example 2: Sets values for Cartesian instancevar a = new Cesium.Cartesian4();Cesium.Matrix4.getColumn(m, 2, a);// a.x = 12.0; a.y = 16.0; a.z = 20.0; a.w = 24.0;</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1040">Core/Matrix4.js, line 1040</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getElementIndex">
        <span class="type-signature attribute-static">static</span>Matrix4.getElementIndex<span class="signature">(row, column)</span> &rarr; <span class="type-signature returnType">Number</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the array index of the element at the provided row and column.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>row</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the row.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>column</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the column.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The index of the element at the provided row and column.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: row must be 0, 1, 2, or 3.
    </div>

</li>
        
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: column must be 0, 1, 2, or 3.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">var myMatrix = new Cesium.Matrix4();var column1Row0Index = Cesium.Matrix4.getElementIndex(1, 0);var column1Row0 = myMatrix[column1Row0Index];myMatrix[column1Row0Index] = 10.0;</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1000">Core/Matrix4.js, line 1000</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getMaximumScale">
        <span class="type-signature attribute-static">static</span>Matrix4.getMaximumScale<span class="signature">(matrix)</span> &rarr; <span class="type-signature returnType">Number</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the maximum scale assuming the matrix is an affine transformation.The maximum scale is the maximum length of the column vectors in the upper-left3x3 matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The maximum scale.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1256">Core/Matrix4.js, line 1256</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getRotation">
        <span class="type-signature attribute-static">static</span>Matrix4.getRotation<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix3.html">Matrix3</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Gets the upper left 3x3 rotation matrix of the provided matrix, assuming the matrix is a affine transformation matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix3.html">Matrix3</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// returns a Matrix3 instance from a Matrix4 instance// m = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]var b = new Cesium.Matrix3();Cesium.Matrix4.getRotation(m,b);// b = [10.0, 14.0, 18.0]//     [11.0, 15.0, 19.0]//     [12.0, 16.0, 20.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2158">Core/Matrix4.js, line 2158</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getRow">
        <span class="type-signature attribute-static">static</span>Matrix4.getRow<span class="signature">(matrix, index, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian4.html">Cartesian4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Retrieves a copy of the matrix row at the provided index as a Cartesian4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>index</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the row to retrieve.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: index must be 0, 1, 2, or 3.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Examples:</h5>
        
    <pre><code class="language-javascript">//returns a Cartesian4 instance with values from the specified column// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]//Example 1: Returns an instance of Cartesianvar a = Cesium.Matrix4.getRow(m, 2, new Cesium.Cartesian4());</code></pre>

    <pre><code class="language-javascript">//Example 2: Sets values for a Cartesian instancevar a = new Cesium.Cartesian4();Cesium.Matrix4.getRow(m, 2, a);// a.x = 18.0; a.y = 19.0; a.z = 20.0; a.w = 21.0;</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1145">Core/Matrix4.js, line 1145</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getScale">
        <span class="type-signature attribute-static">static</span>Matrix4.getScale<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian3.html">Cartesian3</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Extracts the non-uniform scale assuming the matrix is an affine transformation.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1230">Core/Matrix4.js, line 1230</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="getTranslation">
        <span class="type-signature attribute-static">static</span>Matrix4.getTranslation<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian3.html">Cartesian3</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Gets the translation portion of the provided matrix, assuming the matrix is a affine transformation matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2120">Core/Matrix4.js, line 2120</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="inverse">
        <span class="type-signature attribute-static">static</span>Matrix4.inverse<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the inverse of the provided matrix using Cramers Rule.If the determinant is zero, the matrix can not be inverted, and an exception is thrown.If the matrix is an affine transformation matrix, it is more efficientto invert it with <a href="Matrix4.html#inverseTransformation"><code>Matrix4.inverseTransformation</code></a>.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to invert.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="RuntimeError.html">RuntimeError</a></span>

: matrix is not invertible because its determinate is zero.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2192">Core/Matrix4.js, line 2192</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="inverseTransformation">
        <span class="type-signature attribute-static">static</span>Matrix4.inverseTransformation<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the inverse of the provided matrix assuming it isan affine transformation matrix, where the upper left 3x3 elementsare a rotation matrix, and the upper three elements in the fourthcolumn are the translation.  The bottom row is assumed to be [0, 0, 0, 1].The matrix is not verified to be in the proper form.This method is faster than computing the inverse for a general 4x4matrix using <a href="Matrix4.html#inverse"><code>Matrix4.inverse</code></a>.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to invert.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L2313">Core/Matrix4.js, line 2313</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiply">
        <span class="type-signature attribute-static">static</span>Matrix4.multiply<span class="signature">(left, right, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of two matrices.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The second matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1269">Core/Matrix4.js, line 1269</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByPoint">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByPoint<span class="signature">(matrix, cartesian, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian3.html">Cartesian3</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of a matrix and a <a href="Cartesian3.html"><code>Cartesian3</code></a>. This is equivalent to calling <a href="Matrix4.html#multiplyByVector"><code>Matrix4.multiplyByVector</code></a>with a <a href="Cartesian4.html"><code>Cartesian4</code></a> with a <code>w</code> component of 1, but returns a <a href="Cartesian3.html"><code>Cartesian3</code></a> instead of a <a href="Cartesian4.html"><code>Cartesian4</code></a>.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cartesian</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The point.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);var result = Cesium.Matrix4.multiplyByPoint(matrix, p, new Cesium.Cartesian3());</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1774">Core/Matrix4.js, line 1774</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByPointAsVector">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByPointAsVector<span class="signature">(matrix, cartesian, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian3.html">Cartesian3</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of a matrix and a <a href="Cartesian3.html"><code>Cartesian3</code></a>.  This is equivalent to calling <a href="Matrix4.html#multiplyByVector"><code>Matrix4.multiplyByVector</code></a>with a <a href="Cartesian4.html"><code>Cartesian4</code></a> with a <code>w</code> component of zero.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cartesian</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The point.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">var p = new Cesium.Cartesian3(1.0, 2.0, 3.0);var result = Cesium.Matrix4.multiplyByPointAsVector(matrix, p, new Cesium.Cartesian3());// A shortcut for//   Cartesian3 p = ...//   Cesium.Matrix4.multiplyByVector(matrix, new Cesium.Cartesian4(p.x, p.y, p.z, 0.0), result);</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1734">Core/Matrix4.js, line 1734</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByScalar">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByScalar<span class="signature">(matrix, scalar, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of a matrix and a scalar.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>scalar</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The number to multiply by.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//create a Matrix4 instance which is a scaled version of the supplied Matrix4// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]var a = Cesium.Matrix4.multiplyByScalar(m, -2, new Cesium.Matrix4());// m remains the same// a = [-20.0, -22.0, -24.0, -26.0]//     [-28.0, -30.0, -32.0, -34.0]//     [-36.0, -38.0, -40.0, -42.0]//     [-44.0, -46.0, -48.0, -50.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1825">Core/Matrix4.js, line 1825</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByScale">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByScale<span class="signature">(matrix, scale, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)by an implicit non-uniform scale matrix.  This is an optimizationfor <code>Matrix4.multiply(m, Matrix4.fromScale(scale), m);</code> with less allocations and arithmetic operations.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix on the left-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>scale</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The non-uniform scale on the right-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromScale(scale), m);Cesium.Matrix4.multiplyByScale(m, scale, m);</code></pre>

    

    

    

    
    <h5>See:</h5>
    <ul class="see-list">
        <li><a href="Matrix4.html#fromScale">Matrix4.fromScale</a></li>
    
        <li><a href="Matrix4.html#multiplyByUniformScale">Matrix4.multiplyByUniformScale</a></li>
    </ul>
    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1639">Core/Matrix4.js, line 1639</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByTranslation">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByTranslation<span class="signature">(matrix, translation, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)by an implicit translation matrix defined by a <a href="Cartesian3.html"><code>Cartesian3</code></a>.  This is an optimizationfor <code>Matrix4.multiply(m, Matrix4.fromTranslation(position), m);</code> with less allocations and arithmetic operations.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix on the left-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>translation</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian3.html">Cartesian3</a></span>


            
            </td>

            

            <td class="description last">
            
                The translation on the right-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromTranslation(position), m);Cesium.Matrix4.multiplyByTranslation(m, position, m);</code></pre>

    

    

    

    
    <h5>See:</h5>
    <ul class="see-list">
        <li><a href="Matrix4.html#fromTranslation">Matrix4.fromTranslation</a></li>
    </ul>
    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1544">Core/Matrix4.js, line 1544</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByUniformScale">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByUniformScale<span class="signature">(matrix, scale, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Multiplies a transformation matrix (with a bottom row of <code>[0.0, 0.0, 0.0, 1.0]</code>)by an implicit uniform scale matrix.  This is an optimizationfor <code>Matrix4.multiply(m, Matrix4.fromUniformScale(scale), m);</code> with less allocations and arithmetic operations.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix on the left-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>scale</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The uniform scale on the right-hand side.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">// Instead of Cesium.Matrix4.multiply(m, Cesium.Matrix4.fromUniformScale(scale), m);Cesium.Matrix4.multiplyByUniformScale(m, scale, m);</code></pre>

    

    

    

    
    <h5>See:</h5>
    <ul class="see-list">
        <li><a href="Matrix4.html#fromUniformScale">Matrix4.fromUniformScale</a></li>
    
        <li><a href="Matrix4.html#multiplyByScale">Matrix4.multiplyByScale</a></li>
    </ul>
    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1603">Core/Matrix4.js, line 1603</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyByVector">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyByVector<span class="signature">(matrix, cartesian, result)</span> &rarr; <span class="type-signature returnType"><a href="Cartesian4.html">Cartesian4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of a matrix and a column vector.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cartesian</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The vector.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1688">Core/Matrix4.js, line 1688</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="multiplyTransformation">
        <span class="type-signature attribute-static">static</span>Matrix4.multiplyTransformation<span class="signature">(left, right, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the product of two matrices assuming the matrices areaffine transformation matrices, where the upper left 3x3 elementsare a rotation matrix, and the upper three elements in the fourthcolumn are the translation.  The bottom row is assumed to be [0, 0, 0, 1].The matrix is not verified to be in the proper form.This method is faster than computing the product for general 4x4matrices using <a href="Matrix4.html#multiply"><code>Matrix4.multiply</code></a>.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The second matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">var m1 = new Cesium.Matrix4(1.0, 6.0, 7.0, 0.0, 2.0, 5.0, 8.0, 0.0, 3.0, 4.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0);var m2 = Cesium.Transforms.eastNorthUpToFixedFrame(new Cesium.Cartesian3(1.0, 1.0, 1.0));var m3 = Cesium.Matrix4.multiplyTransformation(m1, m2, new Cesium.Matrix4());</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1454">Core/Matrix4.js, line 1454</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="negate">
        <span class="type-signature attribute-static">static</span>Matrix4.negate<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a negated copy of the provided matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to negate.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//create a new Matrix4 instance which is a negation of a Matrix4// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]var a = Cesium.Matrix4.negate(m, new Cesium.Matrix4());// m remains the same// a = [-10.0, -11.0, -12.0, -13.0]//     [-14.0, -15.0, -16.0, -17.0]//     [-18.0, -19.0, -20.0, -21.0]//     [-22.0, -23.0, -24.0, -25.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1879">Core/Matrix4.js, line 1879</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="pack">
        <span class="type-signature attribute-static">static</span>Matrix4.pack<span class="signature">(value, array, <span class="optional">startingIndex</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Stores the provided instance into the provided array.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>value</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                

                
            
                The value to pack.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                

                
            
                The array to pack into.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>startingIndex</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The index into the array at which to start packing the elements.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L97">Core/Matrix4.js, line 97</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="setColumn">
        <span class="type-signature attribute-static">static</span>Matrix4.setColumn<span class="signature">(matrix, index, cartesian, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a new matrix that replaces the specified column in the provided matrix with the provided Cartesian4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>index</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the column to set.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cartesian</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The Cartesian whose values will be assigned to the specified column.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: index must be 0, 1, 2, or 3.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//creates a new Matrix4 instance with new column values from the Cartesian4 instance// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]var a = Cesium.Matrix4.setColumn(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());// m remains the same// a = [10.0, 11.0, 99.0, 13.0]//     [14.0, 15.0, 98.0, 17.0]//     [18.0, 19.0, 97.0, 21.0]//     [22.0, 23.0, 96.0, 25.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1093">Core/Matrix4.js, line 1093</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="setRow">
        <span class="type-signature attribute-static">static</span>Matrix4.setRow<span class="signature">(matrix, index, cartesian, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes a new matrix that replaces the specified row in the provided matrix with the provided Cartesian4 instance.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to use.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>index</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            <td class="description last">
            
                The zero-based index of the row to set.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>cartesian</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The Cartesian whose values will be assigned to the specified row.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Cartesian4.html">Cartesian4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    
    <h5>Throws:</h5>
    <ul>
            <li>

    <div class="param-desc">
        
<span class="param-type"><a href="DeveloperError.html">DeveloperError</a></span>

: index must be 0, 1, 2, or 3.
    </div>

</li>
        </ul>
    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//create a new Matrix4 instance with new row values from the Cartesian4 instance// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]var a = Cesium.Matrix4.setRow(m, 2, new Cesium.Cartesian4(99.0, 98.0, 97.0, 96.0), new Cesium.Matrix4());// m remains the same// a = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [99.0, 98.0, 97.0, 96.0]//     [22.0, 23.0, 24.0, 25.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1197">Core/Matrix4.js, line 1197</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="subtract">
        <span class="type-signature attribute-static">static</span>Matrix4.subtract<span class="signature">(left, right, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the difference of two matrices.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>left</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The first matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>right</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The second matrix.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1403">Core/Matrix4.js, line 1403</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="toArray">
        <span class="type-signature attribute-static">static</span>Matrix4.toArray<span class="signature">(matrix, <span class="optional">result</span>)</span> &rarr; <span class="type-signature returnType">Array.&lt;Number></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes an Array from the provided Matrix4 instance.The array will be in column-major order.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                
                

                
            
                The matrix to use..</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The Array onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified Array parameter or a new Array instance if one was not provided.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//create an array from an instance of Matrix4// m = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]var a = Cesium.Matrix4.toArray(m);// m remains the same//creates a = [10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L952">Core/Matrix4.js, line 952</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="transpose">
        <span class="type-signature attribute-static">static</span>Matrix4.transpose<span class="signature">(matrix, result)</span> &rarr; <span class="type-signature returnType"><a href="Matrix4.html">Matrix4</a></span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Computes the transpose of the provided matrix.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>matrix</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The matrix to transpose.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            

            <td class="description last">
            
                The object onto which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    
    <h5>Returns:</h5>
    
            
<div class="param-desc">
    The modified result parameter.
</div>


        

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    
        <h5>Example:</h5>
        
    <pre><code class="language-javascript">//returns transpose of a Matrix4// m = [10.0, 11.0, 12.0, 13.0]//     [14.0, 15.0, 16.0, 17.0]//     [18.0, 19.0, 20.0, 21.0]//     [22.0, 23.0, 24.0, 25.0]var a = Cesium.Matrix4.transpose(m, new Cesium.Matrix4());// m remains the same// a = [10.0, 14.0, 18.0, 22.0]//     [11.0, 15.0, 19.0, 23.0]//     [12.0, 16.0, 20.0, 24.0]//     [13.0, 17.0, 21.0, 25.0]</code></pre>

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L1930">Core/Matrix4.js, line 1930</a>
    </div>
    
</dl>

</dd>

        
            
<dt>
    <div class="nameContainer">
    <h4 class="name" id="unpack">
        <span class="type-signature attribute-static">static</span>Matrix4.unpack<span class="signature">(array, <span class="optional">startingIndex</span>, <span class="optional">result</span>)</span>
    </h4>

    </div>

    
</dt>
<dd>

    
    <div class="description">
        Retrieves an instance from a packed array.
    </div>
    

    

    

    

    
        

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array.&lt;Number></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                

                
            
                The packed array.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>startingIndex</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="default">
                
                    <code class="language-javascript">0</code>
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The starting index of the element to be unpacked.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>result</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="Matrix4.html">Matrix4</a></span>


            
            </td>

            
                <td class="default">
                
                </td>
            

            <td class="description last">
            
                
                        <span class="optional">optional</span>
                
                

                
            
                The object into which to store the result.</td>
        </tr>

    
    </tbody>
</table>
    

    

    

    

    

    

    

    
<dl class="details">
    

    

    

    

    

    

    

    

    

    

    

    

    

    
    
    
    <div class="source-link">
        Source: 
        <a href="https://github.com/AnalyticalGraphicsInc/cesium/blob/1.2/Source/Core/Matrix4.js#L135">Core/Matrix4.js, line 135</a>
    </div>
    
</dl>

</dd>

        </dl>
    

    

    
</article>

</section>





    <footer>
        Documentation generated by <a href="https://github.com/jsdoc3/jsdoc">JSDoc 3.3.0-alpha9</a>
    </footer>
</div>

</div>

<br clear="both">

<script>
if (window.frameElement) {
    document.body.className = 'embedded';

    var ele = document.createElement('a');
    ele.className = 'popout';
    ele.target = '_blank';
    ele.href = window.location.href;
    ele.title = 'Pop out';
    document.getElementById('main').appendChild(ele);

    ele = document.createElement('a');
    ele.className = 'back';
    ele.href = 'index.html';
    ele.title = 'Home';
    ele.target = '_self';
    document.getElementById('main').appendChild(ele);
} else {
    document.getElementById('bkgd').className = 'show-bkgd';
}

// Set targets on external links.  Sandcastle and GitHub shouldn't be embedded in any iframe.
Array.prototype.forEach.call(document.getElementsByTagName('a'), function(a) {
    if (/^https?:/i.test(a.getAttribute('href'))) {
        a.target='_blank';
    }
});
</script>

<script src="javascript/prism.js"></script>
<script src="javascript/cesiumDoc.js"></script>

</body>
</html>",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 14:54:25 GMT",
                    "Content-Length": "210044",
                    "Date": "Thu, 06 Nov 2014 14:54:46 GMT",
                    "Content-Type": "text/html; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "HTML",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}