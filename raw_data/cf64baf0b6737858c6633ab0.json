{
    "url": "http://localhost:9999/mariusGundersen/OrdnungJS/Dist/ordnung.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>document.location.href</b> and written to <b>the 'after()' function of JQuery</b> via the following statement:<ul><li>var path = _.after(document.location.href, '#');</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/mariusGundersen/OrdnungJS/Dist/ordnung.js",
                "path": "/mariusGundersen/OrdnungJS/Dist/ordnung.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9tYXJpdXNHdW5kZXJzZW4vT3JkbnVuZ0pTL0Rpc3Qvb3JkbnVuZy5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMzIzMzANCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMjE6Mjk6MDIgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDIxOjI5OjAyIEdNVA0KDQoKZGVmaW5lKCdvcmRudW5nL3V0aWxzJyxbXSwgZnVuY3Rpb24oKXsKCXJldHVybiB7CgkJdG9BcnJheTogZnVuY3Rpb24ob2JqKXsKCQkJdmFyIGFycmF5ID0gW107CgkJCS8vIGl0ZXJhdGUgYmFja3dhcmRzIGVuc3VyaW5nIHRoYXQgbGVuZ3RoIGlzIGFuIFVJbnQzMgoJCQlmb3IgKHZhciBpID0gb2JqLmxlbmd0aCA+Pj4gMDsgaS0tOykgeyAKCQkJCWFycmF5W2ldID0gb2JqW2ldOwoJCQl9CgkJCXJldHVybiBhcnJheTsKCQl9LAoJCWV4dGVuZDogZnVuY3Rpb24oZHN0LCBzcmMpewoJCQlzcmMgPSBzcmMgfHwge307CgkJCWRzdCA9IGRzdCB8fCB7fTsKCQkJZm9yKHZhciBpIGluIHNyYyl7CgkJCQlkc3RbaV0gPSBzcmNbaV07CgkJCX0KCQkJcmV0dXJuIGRzdDsKCQl9LAoJCWFycmF5VG9PYmplY3Q6IGZ1bmN0aW9uKGFycmF5LCBmdW5jKXsKCQkJcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVtKXsKCQkJCWZ1bmMoaXRlbSwgY29sbGVjdGlvbik7CgkJCQlyZXR1cm4gY29sbGVjdGlvbjsKCQkJfSwge30pOwoJCX0sCgkJdHJpbTogZnVuY3Rpb24od29yZCwgY2hhcmFjdGVyKXsKCQkJd2hpbGUod29yZC5jaGFyQXQoMCkgPT0gY2hhcmFjdGVyKSB3b3JkID0gd29yZC5zdWJzdHIoMSk7CgkJCXdoaWxlKHdvcmQuY2hhckF0KHdvcmQubGVuZ3RoIC0gMSkgPT0gY2hhcmFjdGVyKSB3b3JkID0gd29yZC5zdWJzdHIoMCwgd29yZC5sZW5ndGggLSAxKTsKCQkJcmV0dXJuIHdvcmQ7CgkJfSwKCQlhZnRlcjogZnVuY3Rpb24od29yZCwgY2hhcmFjdGVyKXsKCQkJdmFyIGluZGV4ID0gd29yZC5pbmRleE9mKGNoYXJhY3Rlcik7CgkJCWlmKGluZGV4IDwgMCl7CgkJCQlyZXR1cm4gIiI7CgkJCX1lbHNlewoJCQkJcmV0dXJuIHdvcmQuc3Vic3RyKGluZGV4KzEpOwoJCQl9CgkJfSwKCQlwb3BUYWlsOiBmdW5jdGlvbihhcnJheSl7CgkJCXJldHVybiBhcnJheS5zbGljZSgwLCAtMSk7CgkJfSwKCQlzdGFydHNXaXRoOiBmdW5jdGlvbih3b3JkLCBjaGFyYWN0ZXIpewoJCQlyZXR1cm4gd29yZC5jaGFyQXQoMCkgPT09IGNoYXJhY3RlcjsKCQl9LAoJCWVuZHNXaXRoOiBmdW5jdGlvbih3b3JkLCBjaGFyYWN0ZXIpewoJCQlyZXR1cm4gd29yZC5jaGFyQXQod29yZC5sZW5ndGggLSAxKSA9PT0gY2hhcmFjdGVyOwoJCX0sCgkJYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGxpc3RlbmVyLCBidWJibGUpewoJCQlpZignYWRkRXZlbnRMaXN0ZW5lcicgaW4gZWxlbWVudCl7CgkJCQllbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBidWJibGUpOwoJCQl9ZWxzZXsKCQkJCWVsZW1lbnQuYXR0YWNoRXZlbnQoIm9uIitldmVudCwgbGlzdGVuZXIpOwkJCgkJCX0KCQl9Cgl9Owp9KTsKCmRlZmluZSgnb3JkbnVuZy9xdmMvRXhlY3V0YWJsZVJlc3VsdCcsWyJvcmRudW5nL3V0aWxzIl0sIGZ1bmN0aW9uKHV0aWxzKXsKCWZ1bmN0aW9uIEV4ZWN1dGFibGVSZXN1bHQocmVzdWx0KXsKCQkKCQl0aGlzLnN1Y2Nlc3MgPSBmYWxzZTsKCQl0aGlzLnZhbGlkID0gZmFsc2U7CgkJdGhpcy5yZXN1bHQgPSBudWxsOwoJCXRoaXMuZXhjZXB0aW9uID0gbnVsbDsKCQl0aGlzLnZpb2xhdGlvbnMgPSBbXTsKCQoJCXV0aWxzLmV4dGVuZCh0aGlzLCByZXN1bHQpOwoJCgl9OwoJCglyZXR1cm4gRXhlY3V0YWJsZVJlc3VsdDsKfSk7CmRlZmluZSgnb3JkbnVuZy9xdmMvQ29uc3RyYWludCcsW10sIGZ1bmN0aW9uKCl7CgkKCWZ1bmN0aW9uIENvbnN0cmFpbnQodHlwZSwgYXR0cmlidXRlcyl7CQkKCQl0aGlzLnR5cGUgPSB0eXBlOwoJCXRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7CgkJdGhpcy5tZXNzYWdlID0gYXR0cmlidXRlcy5tZXNzYWdlOwoJCQoJCQoJCXRoaXMuaW5pdCh0eXBlKTsKCX0KCQkKCUNvbnN0cmFpbnQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbih0eXBlKXsKCQlyZXF1aXJlKFsib3JkbnVuZy9xdmMvY29uc3RyYWludHMvIiArIHR5cGVdLCBmdW5jdGlvbihUZXN0ZXIpewoJCQl2YXIgdGVzdGVyID0gbmV3IFRlc3Rlcih0aGlzLmF0dHJpYnV0ZXMpOwoJCQl0aGlzLnZhbGlkYXRlID0gdGVzdGVyLmlzVmFsaWQuYmluZCh0ZXN0ZXIpOwoJCX0uYmluZCh0aGlzKSk7Cgl9OwoJCglDb25zdHJhaW50LnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uKHZhbHVlKXsKCQlyZXR1cm4gdHJ1ZTsvL3JlYWwgdGVzdCBub3QgbG9hZGVkIHlldAoJfTsKCQoJCglyZXR1cm4gQ29uc3RyYWludDsKfSk7CmRlZmluZSgnb3JkbnVuZy9xdmMvVmFsaWRhdG9yJyxbCgkib3JkbnVuZy9xdmMvQ29uc3RyYWludCIsIAoJImtub2Nrb3V0IgpdLCBmdW5jdGlvbigKCUNvbnN0cmFpbnQsIAoJa28KKXsKCglmdW5jdGlvbiBpbnRlcnBvbGF0ZShtZXNzYWdlLCBhdHRyaWJ1dGVzLCB2YWx1ZSwgbmFtZSwgcGF0aCl7CgkJcmV0dXJuIG1lc3NhZ2UucmVwbGFjZSgvXHsoW159XSspXH0vZywgZnVuY3Rpb24obWF0Y2gsIGtleSl7CgkJCWlmKGtleSA9PSAidmFsdWUiKSByZXR1cm4gdmFsdWU7CgkJCWlmKGtleSA9PSAidGhpcy5uYW1lIikgcmV0dXJuIG5hbWU7CgkJCWlmKGtleSA9PSAidGhpcy5wYXRoIikgcmV0dXJuIHBhdGg7CgkJCWlmKGtleSBpbiBhdHRyaWJ1dGVzKSByZXR1cm4gYXR0cmlidXRlc1trZXldOwoJCQlyZXR1cm4gbWF0Y2g7CgkJfSk7Cgl9CgkKCglmdW5jdGlvbiBWYWxpZGF0b3IodGFyZ2V0LCBvcHRpb25zKXsKCQl2YXIgc2VsZiA9IHRoaXM7CgkJCgkJdGhpcy5jb25zdHJhaW50cyA9IFtdOwoJCQoJCXRoaXMuaXNWYWxpZCA9IGtvLm9ic2VydmFibGUodHJ1ZSk7CgkJdGhpcy5tZXNzYWdlID0ga28ub2JzZXJ2YWJsZSgiIik7CgoJCXRoaXMubmFtZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5uYW1lOwoJCXRoaXMucGF0aCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wYXRoOwoJfQoJCglWYWxpZGF0b3IucHJvdG90eXBlLnNldENvbnN0cmFpbnRzID0gZnVuY3Rpb24oY29uc3RyYWludHMpewoJCXRoaXMuY29uc3RyYWludHMgPSBjb25zdHJhaW50cy5tYXAoZnVuY3Rpb24oY29uc3RyYWludCl7CgkJCXJldHVybiBuZXcgQ29uc3RyYWludChjb25zdHJhaW50Lm5hbWUsIGNvbnN0cmFpbnQuYXR0cmlidXRlcyk7CgkJfSk7Cgl9OwoJCglWYWxpZGF0b3IucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXsKCQl0aGlzLmlzVmFsaWQodHJ1ZSk7CgkJdGhpcy5tZXNzYWdlKCIiKTsKCX07CgkKCVZhbGlkYXRvci5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbih2YWx1ZSl7CgkJaWYodGhpcy5jb25zdHJhaW50cy5sZW5ndGggPT0gMCl7CgkJCXRoaXMucmVzZXQoKTsKCQl9ZWxzZSBpZih0aGlzLmNvbnN0cmFpbnRzLmV2ZXJ5KGZ1bmN0aW9uIChjb25zdHJhaW50KSB7CgkJCWlmKGNvbnN0cmFpbnQudmFsaWRhdGUodmFsdWUpKXsKCQkJCXJldHVybiB0cnVlOwoJCQl9ZWxzZXsKCQkJCXRoaXMuaXNWYWxpZChmYWxzZSk7CgkJCQl0aGlzLm1lc3NhZ2UoaW50ZXJwb2xhdGUoY29uc3RyYWludC5tZXNzYWdlLCBjb25zdHJhaW50LmF0dHJpYnV0ZXMsIHZhbHVlLCB0aGlzLm5hbWUsIHRoaXMucGF0aCkpOwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfS5iaW5kKHRoaXMpKSl7CgkJCXRoaXMuaXNWYWxpZCh0cnVlKTsKCQkJdGhpcy5tZXNzYWdlKCIiKTsKCQl9Cgl9OwoJCglyZXR1cm4gVmFsaWRhdG9yOwp9KTsKZGVmaW5lKCdvcmRudW5nL3F2Yy9rb0V4dGVuc2lvbnMnLFsib3JkbnVuZy9xdmMvVmFsaWRhdG9yIiwgImtub2Nrb3V0Il0sIGZ1bmN0aW9uKFZhbGlkYXRvciwga28pewoKCWlmIChrbyAhPSBudWxsKSB7CgkJa28uYmluZGluZ0hhbmRsZXJzLnZhbGlkYXRpb25NZXNzYWdlRm9yID0gewoJCQlpbml0OiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3NBY2Nlc3Nvciwgdmlld01vZGVsKSB7CgkJCQl2YXIgdmFsdWUgPSB2YWx1ZUFjY2Vzc29yKCk7CgkJCQl2YXIgdmFsaWRhdG9yID0gdmFsdWUudmFsaWRhdG9yOwoJCQkJaWYgKHZhbGlkYXRvcikgewoJCQkJCWtvLmFwcGx5QmluZGluZ3NUb05vZGUoZWxlbWVudCwgeyBoaWRkZW46IHZhbGlkYXRvci5pc1ZhbGlkLCB0ZXh0OiB2YWxpZGF0b3IubWVzc2FnZSB9LCB2YWxpZGF0b3IpOwoJCQkJfWVsc2V7CgkJCQkJdmFyIGF0dHJpYnV0ZXMgPSBBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoZWxlbWVudC5hdHRyaWJ1dGVzLCBmdW5jdGlvbihzLGUpe3JldHVybiBzKyIgIitlLmxvY2FsTmFtZSsiPVwiIitlLnZhbHVlKyJcIiJ9LCAiIik7CgkJCQkJdGhyb3cgbmV3IEVycm9yKCJDb3VsZCBub3QgYmluZCBgdmFsaWRhdGlvbk1lc3NhZ2VGb3JgIHRvIHZhbHVlIG9uIGVsZW1lbnQgPCIrZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgKyBhdHRyaWJ1dGVzICsiPiIpOwoJCQkJfQoJCQl9CgkJfTsKCQkKCQlrby5leHRlbmRlcnMudmFsaWRhdGlvbiA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHsKCQkJdGFyZ2V0LnZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IodGFyZ2V0LCBvcHRpb25zKTsKCQkJdGFyZ2V0LnN1YnNjcmliZShmdW5jdGlvbiAobmV3VmFsdWUpIHsKCQkJCXRhcmdldC52YWxpZGF0b3IudmFsaWRhdGUobmV3VmFsdWUpOwoJCQl9KTsKCQkJcmV0dXJuIHRhcmdldDsKCQl9OwoJCQoJCWtvLmJpbmRpbmdIYW5kbGVycy5jb21tYW5kID0ga28uYmluZGluZ0hhbmRsZXJzLnF1ZXJ5ID0gewoJCQlpbml0OiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ0FjY2Vzc29yLCB2aWV3TW9kZWwpIHsKCQkJCWtvLmFwcGx5QmluZGluZ3NUb05vZGUoZWxlbWVudCwgeyBjbGljazogdmFsdWVBY2Nlc3NvcigpIH0sIHZpZXdNb2RlbCk7CgkJCX0KCQl9OwoJfQoJCgp9KTsKZGVmaW5lKCdvcmRudW5nL3F2Yy9WYWxpZGF0YWJsZScsWyJvcmRudW5nL3V0aWxzIiwgIm9yZG51bmcvcXZjL1ZhbGlkYXRvciIsICJrbm9ja291dCIsICJvcmRudW5nL3F2Yy9rb0V4dGVuc2lvbnMiXSxmdW5jdGlvbih1dGlscywgVmFsaWRhdG9yLCBrbyl7CgkKCWZ1bmN0aW9uIHJlY3Vyc2l2bHlFeHRlbmRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMsIHZhbGlkYXRhYmxlRmllbGRzLCBwYXJlbnRzKSB7CgkJZm9yICh2YXIga2V5IGluIHBhcmFtZXRlcnMpIHsKCQkJdmFyIHByb3BlcnR5ID0gcGFyYW1ldGVyc1trZXldOwoJCQl2YXIgcGF0aCA9IHBhcmVudHMuY29uY2F0KFtrZXldKTsKCQkJaWYgKGtvLmlzT2JzZXJ2YWJsZShwcm9wZXJ0eSkpIHsKCQkJCXByb3BlcnR5LmV4dGVuZCh7CgkJCQkJdmFsaWRhdGlvbjogewoJCQkJCQluYW1lOmtleSwKCQkJCQkJcGF0aDpwYXRoLmpvaW4oIi4iKQoJCQkJCX0KCQkJCX0pOwoJCQkJdmFsaWRhdGFibGVGaWVsZHMucHVzaChwcm9wZXJ0eSk7CgkJCX0KCQkJcHJvcGVydHkgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHByb3BlcnR5KTsKCQkJaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gIm9iamVjdCIpIHsKCQkJCXJlY3Vyc2l2bHlFeHRlbmRQYXJhbWV0ZXJzKHByb3BlcnR5LCB2YWxpZGF0YWJsZUZpZWxkcywgcGF0aCk7CgkJCX0KCQl9Cgl9CgoKCWZ1bmN0aW9uIGZpbmRGaWVsZChmaWVsZFBhdGgsIHBhcmFtZXRlcnMsIGVycm9yTWVzc2FnZSl7CgkJcmV0dXJuIGZpZWxkUGF0aC5zcGxpdCgiLiIpLnJlZHVjZShmdW5jdGlvbihvYmplY3QsIG5hbWUpewoJCQl2YXIgcGF0aCA9IG9iamVjdC5wYXRoOwoJCQl2YXIgZmllbGQgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG9iamVjdC5maWVsZCk7CgkJCWlmIChuYW1lIGluIGZpZWxkKSB7CgkJCQlyZXR1cm4gewoJCQkJCWZpZWxkOiBmaWVsZFtuYW1lXSwKCQkJCQlwYXRoOiBwYXRoICsgIi4iICsgbmFtZQoJCQkJfTsKCQkJfSBlbHNlIHsKCQkJCXRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UgKyAiOiAiICsgZmllbGRQYXRoICsgIlxuIiArCgkJCQkJbmFtZSArICIgaXMgbm90IGEgbWVtYmVyIG9mICIgKyBwYXRoICsgIlxuIiArCgkJCQkJcGF0aCArICIgPSBgIiArIGtvLnRvSlNPTihmaWVsZCkgKyAiYCIpOwoJCQl9CgkJfSwgewoJCQlmaWVsZDogcGFyYW1ldGVycywKCQkJcGF0aDogInBhcmFtZXRlcnMiCgkJfSkuZmllbGQ7Cgl9CgoKCgkKCWZ1bmN0aW9uIGFwcGx5VmlvbGF0aW9uTWVzc2FnZVRvRmllbGQocGFyYW1ldGVycywgZmllbGRQYXRoLCBtZXNzYWdlKSB7CgkJdmFyIG9iamVjdCA9IGZpbmRGaWVsZChmaWVsZFBhdGgsIHBhcmFtZXRlcnMsICJFcnJvciBhcHBseWluZyB2aW9sYXRpb24iKTsKCQkKCQlpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICJzdHJpbmciICYmICJ2YWxpZGF0b3IiIGluIG9iamVjdCkgewoJCQlvYmplY3QudmFsaWRhdG9yLmlzVmFsaWQoZmFsc2UpOwoJCQlvYmplY3QudmFsaWRhdG9yLm1lc3NhZ2UobWVzc2FnZSk7CgkJfWVsc2V7CgkJCXRocm93IG5ldyBFcnJvcigiRXJyb3IgYXBwbHlpbmcgdmlvbGF0aW9uXG4iK2ZpZWxkUGF0aCsiIGlzIG5vdCB2YWxpZGF0YWJsZVxuaXQgc2hvdWxkIGJlIGFuIG9ic2VydmFibGUiKTsKCQl9Cgl9OwoKCWZ1bmN0aW9uIGFwcGx5VmlvbGF0aW9uTWVzc2FnZVRvVmFsaWRhdGFibGUodmFsaWRhdGFibGUsIG1lc3NhZ2UpIHsKCQl2YWxpZGF0YWJsZS52YWxpZGF0b3IuaXNWYWxpZChmYWxzZSk7CgkJdmFyIG9sZE1lc3NhZ2UgPSB2YWxpZGF0YWJsZS52YWxpZGF0b3IubWVzc2FnZSgpOwoJCXZhciBuZXdNZXNzYWdlID0gb2xkTWVzc2FnZS5sZW5ndGggPT0gMCA/IG1lc3NhZ2UgOiBvbGRNZXNzYWdlICsgIiwgIiArIG1lc3NhZ2U7CgkJdmFsaWRhdGFibGUudmFsaWRhdG9yLm1lc3NhZ2UobmV3TWVzc2FnZSk7Cgl9OwoKCgoJZnVuY3Rpb24gVmFsaWRhdGFibGUobmFtZSwgcGFyYW1ldGVycywgY29uc3RyYWludFJlc29sdmVyKXsKCQl2YXIgc2VsZiA9IHRoaXM7CgkJCgkJdGhpcy52YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKCk7CgkJdGhpcy52YWxpZGF0YWJsZUZpZWxkcyA9IFtdOwoJCXRoaXMudmFsaWRhdGFibGVQYXJhbWV0ZXJzID0gcGFyYW1ldGVyczsKCQkKCQkKCQlpbml0OiB7CgkJCXJlY3Vyc2l2bHlFeHRlbmRQYXJhbWV0ZXJzKHNlbGYudmFsaWRhdGFibGVQYXJhbWV0ZXJzLCBzZWxmLnZhbGlkYXRhYmxlRmllbGRzLCBbXSk7CgkJCWlmKGNvbnN0cmFpbnRSZXNvbHZlcikKCQkJCWNvbnN0cmFpbnRSZXNvbHZlci5hcHBseVZhbGlkYXRpb25Db25zdHJhaW50cyhuYW1lLCBzZWxmKTsKCQl9Cgl9CgkKCVZhbGlkYXRhYmxlLnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24gKCkgewoJCXJldHVybiB0aGlzLnZhbGlkYXRhYmxlRmllbGRzLmV2ZXJ5KGZ1bmN0aW9uKGNvbnN0cmFpbnQpewoJCQlyZXR1cm4gY29uc3RyYWludC52YWxpZGF0b3IgJiYgY29uc3RyYWludC52YWxpZGF0b3IuaXNWYWxpZCgpOwoJCX0pICYmIHRoaXMudmFsaWRhdG9yLmlzVmFsaWQoKTsKCX07CgkJCglWYWxpZGF0YWJsZS5wcm90b3R5cGUuYXBwbHlWaW9sYXRpb25zID0gZnVuY3Rpb24odmlvbGF0aW9ucyl7CgkJdmlvbGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHZpb2xhdGlvbil7CgkJCXZhciBtZXNzYWdlID0gdmlvbGF0aW9uLm1lc3NhZ2U7CgkJCXZhciBmaWVsZE5hbWUgPSB2aW9sYXRpb24uZmllbGROYW1lOwoJCQlpZiAoZmllbGROYW1lLmxlbmd0aCA+IDApIHsKCQkJCS8vb25lIG9mIHRoZSBmaWVsZHMgdmlvbGF0ZXMgYSBjb25zdHJhaW50CgkJCQlhcHBseVZpb2xhdGlvbk1lc3NhZ2VUb0ZpZWxkKHRoaXMudmFsaWRhdGFibGVQYXJhbWV0ZXJzLCBmaWVsZE5hbWUsIG1lc3NhZ2UpOwoJCQl9IGVsc2UgewoJCQkJLy90aGUgdmFsaWRhdGFibGUgdmlvbGF0ZXMgYSBjb25zdHJhaW50CgkJCQlhcHBseVZpb2xhdGlvbk1lc3NhZ2VUb1ZhbGlkYXRhYmxlKHRoaXMsIG1lc3NhZ2UpOwoJCQl9CgkJfS5iaW5kKHRoaXMpKTsKCX07CgkKCVZhbGlkYXRhYmxlLnByb3RvdHlwZS5hcHBseUNvbnN0cmFpbnRzID0gZnVuY3Rpb24oZmllbGRzKXsKCQl2YXIgcGFyYW1ldGVycyA9IHRoaXMudmFsaWRhdGFibGVQYXJhbWV0ZXJzOwoJCQoJCWZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkKXsKCQkJdmFyIGZpZWxkTmFtZSA9IGZpZWxkLm5hbWU7CgkJCXZhciBjb25zdHJhaW50cyA9IGZpZWxkLmNvbnN0cmFpbnRzOwoKCQkJaWYoY29uc3RyYWludHMgPT0gbnVsbCB8fCBjb25zdHJhaW50cy5sZW5ndGggPT0gMCkKCQkJCXJldHVybjsKCQkJCgkJCXZhciBvYmplY3QgPSBmaW5kRmllbGQoZmllbGROYW1lLCBwYXJhbWV0ZXJzLCAiRXJyb3IgYXBwbHlpbmcgY29uc3RyYWludHMgdG8gZmllbGQiKTsKCQkJCgkJCWlmIChrby5pc09ic2VydmFibGUob2JqZWN0KSAmJiAidmFsaWRhdG9yIiBpbiBvYmplY3QpIHsKCQkJCW9iamVjdC52YWxpZGF0b3Iuc2V0Q29uc3RyYWludHMoY29uc3RyYWludHMpOwoJCQl9IGVsc2UgewoJCQkJdGhyb3cgbmV3IEVycm9yKCJFcnJvciBhcHBseWluZyBjb25zdHJhaW50cyB0byBmaWVsZDogIiArIGZpZWxkTmFtZSArICJcbiIgKwoJCQkJCSJJdCBpcyBub3QgYW4gb2JzZXJ2YWJsZSBvciBpcyBub3QgZXh0ZW5kZWQgd2l0aCBhIHZhbGlkYXRvci4gXG4iICsKCQkJCQlmaWVsZE5hbWUgKyAiPWAiICsga28udG9KU09OKG9iamVjdCkgKyAiYCIpOwoJCQl9CgkJfSk7Cgl9OwoJCglWYWxpZGF0YWJsZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbigpewoJCXRoaXMudmFsaWRhdG9yLnZhbGlkYXRlKHRydWUpOwoJCWlmICh0aGlzLnZhbGlkYXRvci5pc1ZhbGlkKCkpIHsKCQkJdGhpcy52YWxpZGF0YWJsZUZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGNvbnN0cmFpbnQpewoJCQkJdmFyIHZhbGlkYXRvciA9IGNvbnN0cmFpbnQudmFsaWRhdG9yOwoJCQkJaWYgKHZhbGlkYXRvcikgewoJCQkJCXZhbGlkYXRvci52YWxpZGF0ZShjb25zdHJhaW50KCkpOwoJCQkJfQoJCQl9KTsKCQl9Cgl9OwoJCglWYWxpZGF0YWJsZS5wcm90b3R5cGUuY2xlYXJWYWxpZGF0aW9uTWVzc2FnZXMgPSBmdW5jdGlvbiAoKSB7CgkJdGhpcy52YWxpZGF0b3IucmVzZXQoKTsKCQl0aGlzLnZhbGlkYXRhYmxlRmllbGRzLmZvckVhY2goZnVuY3Rpb24oY29uc3RyYWludCl7CgkJCXZhciB2YWxpZGF0b3IgPSBjb25zdHJhaW50LnZhbGlkYXRvcjsKCQkJaWYgKHZhbGlkYXRvcikgewoJCQkJdmFsaWRhdG9yLnJlc2V0KCk7CgkJCX0KCQl9KTsKCX07CgkKCQoJCglyZXR1cm4gVmFsaWRhdGFibGU7Cn0pOwpkZWZpbmUoJ29yZG51bmcvcXZjL0V4ZWN1dGFibGUnLFsib3JkbnVuZy9xdmMvRXhlY3V0YWJsZVJlc3VsdCIsICJvcmRudW5nL3F2Yy9WYWxpZGF0YWJsZSIsICJvcmRudW5nL3V0aWxzIiwgImtub2Nrb3V0Il0sIGZ1bmN0aW9uKEV4ZWN1dGFibGVSZXN1bHQsIFZhbGlkYXRhYmxlLCB1dGlscywga28pewoKCWZ1bmN0aW9uIEV4ZWN1dGFibGUobmFtZSwgdHlwZSwgcGFyYW1ldGVycywgY2FsbGJhY2tzLCBxdmMpewoJCXZhciBzZWxmID0gdGhpczsKCQkKCQl0aGlzLm5hbWU7CgkJdGhpcy50eXBlOwoJCXRoaXMuaXNCdXN5ID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7CgkJdGhpcy5oYXNFcnJvciA9IGtvLm9ic2VydmFibGUoZmFsc2UpOwoJCXRoaXMucmVzdWx0ID0gbmV3IEV4ZWN1dGFibGVSZXN1bHQoKTsKCQkKCQl0aGlzLnBhcmFtZXRlcnMgPSB7fTsKCQl0aGlzLmNhbGxiYWNrcyA9IHsKCQkJYmVmb3JlRXhlY3V0ZTogZnVuY3Rpb24gKCkge30sCgkJCWNhbkV4ZWN1dGU6IGZ1bmN0aW9uKCl7cmV0dXJuIHRydWU7fSwKCQkJZXJyb3I6IGZ1bmN0aW9uICgpIHt9LAoJCQlzdWNjZXNzOiBmdW5jdGlvbiAoKSB7fSwKCQkJcmVzdWx0OiBmdW5jdGlvbigpe30sCgkJCWNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7fQoJCX07CgkJCgkJCgkJdGhpcy5leGVjdXRlID0gZnVuY3Rpb24gKCkgewoJCQlpZiAoc2VsZi5vbkJlZm9yZUV4ZWN1dGUoKSA9PT0gZmFsc2UpIHsKCQkJCXJldHVybjsKCQkJfQoJCQlxdmMuZXhlY3V0ZShzZWxmKTsKCQl9OwoKCQl0aGlzLm9uQmVmb3JlRXhlY3V0ZSA9IGZ1bmN0aW9uICgpIHsKCQkJCgkJCWlmIChzZWxmLmlzQnVzeSgpKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQkJCgkJCXNlbGYuaGFzRXJyb3IoZmFsc2UpOwoJCQkKCQkJc2VsZi5jYWxsYmFja3MuYmVmb3JlRXhlY3V0ZSgpOwoJCQkKCQkJc2VsZi52YWxpZGF0ZSgpOwoJCQlpZiAoIXNlbGYuaXNWYWxpZCgpKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQkJCgkJCWlmIChzZWxmLmNhbGxiYWNrcy5jYW5FeGVjdXRlKCkgPT09IGZhbHNlKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQkJc2VsZi5pc0J1c3kodHJ1ZSk7CgkJCQoJCQlyZXR1cm4gdHJ1ZTsKCQl9OwoJCQoJCQoJCXRoaXMub25FcnJvciA9IGZ1bmN0aW9uICgpIHsKCQkJc2VsZi5oYXNFcnJvcih0cnVlKTsKCQkJaWYoInZpb2xhdGlvbnMiIGluIHNlbGYucmVzdWx0ICYmIHNlbGYucmVzdWx0LnZpb2xhdGlvbnMgIT0gbnVsbCkKCQkJCXNlbGYuYXBwbHlWaW9sYXRpb25zKHNlbGYucmVzdWx0LnZpb2xhdGlvbnMpOwoJCQlzZWxmLmNhbGxiYWNrcy5lcnJvcihzZWxmLnJlc3VsdCk7CgkJfTsKCgkJdGhpcy5vblN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7CgkJCXNlbGYuaGFzRXJyb3IoZmFsc2UpOwoJCQlzZWxmLmNsZWFyVmFsaWRhdGlvbk1lc3NhZ2VzKCk7CgkJCXNlbGYuY2FsbGJhY2tzLnN1Y2Nlc3Moc2VsZi5yZXN1bHQpOwoJCQlzZWxmLmNhbGxiYWNrcy5yZXN1bHQoc2VsZi5yZXN1bHQucmVzdWx0KTsKCQl9OwoKCQl0aGlzLm9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7CgkJCWlmICghc2VsZi5oYXNFcnJvcigpKSB7CgkJCQlzZWxmLmNhbGxiYWNrcy5jb21wbGV0ZShzZWxmLnJlc3VsdCk7CgkJCQlzZWxmLmNsZWFyVmFsaWRhdGlvbk1lc3NhZ2VzKCk7CgkJCX0KCQkJc2VsZi5pc0J1c3koZmFsc2UpOwoJCX07CgkJCgkJCgkJaW5pdDogewoJCQlzZWxmLm5hbWUgPSBuYW1lOwoJCQlzZWxmLnR5cGUgPSB0eXBlOwoJCQl1dGlscy5leHRlbmQoc2VsZi5wYXJhbWV0ZXJzLCBwYXJhbWV0ZXJzKTsKCQkJdXRpbHMuZXh0ZW5kKHNlbGYuY2FsbGJhY2tzLCBjYWxsYmFja3MpOwoJCQl1dGlscy5leHRlbmQoc2VsZiwgbmV3IFZhbGlkYXRhYmxlKHNlbGYubmFtZSwgc2VsZi5wYXJhbWV0ZXJzLCBxdmMuY29uc3RyYWludFJlc29sdmVyKSk7CgkJfQoJfQoJCglFeGVjdXRhYmxlLkNvbW1hbmQgPSAiY29tbWFuZCI7CglFeGVjdXRhYmxlLlF1ZXJ5ID0gInF1ZXJ5IjsKCQoJcmV0dXJuIEV4ZWN1dGFibGU7Cn0pOwpkZWZpbmUoJ29yZG51bmcvYWpheCcsW10sIGZ1bmN0aW9uKCl7CglmdW5jdGlvbiBkYXRhVG9QYXJhbXMoZGF0YSl7CgkJdmFyIHBhcmFtcyA9IFtdCgkJZm9yKHZhciBrZXkgaW4gZGF0YSl7CgkJCXZhciB2YWx1ZSA9IGRhdGFba2V5XTsKCQkJcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTsKCQl9CgkJcmV0dXJuIHBhcmFtcy5qb2luKCImIik7Cgl9CgoJZnVuY3Rpb24gYWRkUGFyYW1Ub1VybCh1cmwsIG5hbWUsIHZhbHVlKXsKCQlyZXR1cm4gdXJsICsgKHVybC5tYXRjaCgvXD8vKSA/ICh1cmwubWF0Y2goLyYkLykgPyAiIiA6ICImIikgOiAiPyIpICsgZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKCX0KCglmdW5jdGlvbiBhZGRQYXJhbXNUb1VybCh1cmwsIGRhdGEpewoJCXZhciBwYXJhbXMgPSBkYXRhVG9QYXJhbXMoZGF0YSk7CgkJcmV0dXJuIHVybCArICh1cmwubWF0Y2goL1w/LykgPyAodXJsLm1hdGNoKC8mJC8pID8gIiIgOiAocGFyYW1zLmxlbmd0aCA+IDAgPyAiJiIgOiAiIikpIDogIj8iKSArIHBhcmFtczsKCX0KCglmdW5jdGlvbiBhZGRUb1BhdGgodXJsLCBzZWdtZW50KXsKCQlyZXR1cm4gdXJsICsgKHVybC5tYXRjaCgvXC8kLykgPyAiIiA6ICIvIikgKyBzZWdtZW50OwoJfQoKCWZ1bmN0aW9uIGNhY2hlQnVzdCh1cmwpewoJCXJldHVybiBhZGRQYXJhbVRvVXJsKHVybCwgImNhY2hlS2V5IiwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKk1hdGgucG93KDIsNTMpKSk7Cgl9CgoJZnVuY3Rpb24gYWpheCh1cmwsIG9iamVjdCwgbWV0aG9kLCBjYWxsYmFjayl7CgkJdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwoJCQoJCXZhciBpc1Bvc3QgPSAobWV0aG9kID09PSAiUE9TVCIpOwoJCXZhciBkYXRhID0gbnVsbDsKCQkKCQlpZihvYmplY3QpewoKCQkJaWYoaXNQb3N0KXsKCQkJCWRhdGEgPSBkYXRhVG9QYXJhbXMob2JqZWN0KTsKCQkJfSBlbHNlIHsKCQkJCXVybCA9IGFkZFBhcmFtc1RvVXJsKHVybCwgb2JqZWN0KTsKCQkJfQoJCX0KCQkKCQlpZihpc1Bvc3QpewoJCQl1cmwgPSBjYWNoZUJ1c3QodXJsKTsKCQl9CgoJCXhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTsKCQkKCQlpZihpc1Bvc3QgJiYgZGF0YSl7CgkJCXhoci5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LXR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CgkJfQoJCQoJCXhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLVJlcXVlc3RlZC1XaXRoJywgJ1hNTEh0dHBSZXF1ZXN0Jyk7CgkJCgkJeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCl7CgkJCWlmKHhoci5yZWFkeVN0YXRlID09IDQpewoJCQkJY2FsbGJhY2soeGhyKTsKCQkJfQoJCX0KCQkKCQl4aHIuc2VuZChkYXRhKTsKCQlyZXR1cm4geGhyOwoJfQoKCWFqYXguYWRkUGFyYW1Ub1VybCA9IGFkZFBhcmFtVG9Vcmw7CglhamF4LmFkZFBhcmFtc1RvVXJsID0gYWRkUGFyYW1zVG9Vcmw7CglhamF4LmFkZFRvUGF0aCA9IGFkZFRvUGF0aDsKCWFqYXguY2FjaGVCdXN0ID0gY2FjaGVCdXN0OwoKCglyZXR1cm4gYWpheDsKfSk7CmRlZmluZSgnb3JkbnVuZy9xdmMvQ29uc3RyYWludFJlc29sdmVyJyxbXSwgZnVuY3Rpb24oKXsKCgoJZnVuY3Rpb24gZmluZENvbnN0cmFpbnQobmFtZSwgY29uc3RyYWludHMpIHsKCQlmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKSB7CgkJCWlmIChjb25zdHJhaW50c1tpXS5uYW1lID09IG5hbWUpIHsKCQkJCXJldHVybiBjb25zdHJhaW50c1tpXTsKCQkJfQoJCX0KCQlyZXR1cm4gZmFsc2U7Cgl9CgoJZnVuY3Rpb24gY29uc3RyYWludHNMb2FkZWQobmFtZSwgZmllbGRzKXsKCQl2YXIgY29uc3RyYWludCA9IGZpbmRDb25zdHJhaW50KG5hbWUsIHRoaXMuY29uc3RyYWludHMpOwoJCWlmKGNvbnN0cmFpbnQpewoJCQljb25zdHJhaW50LnZhbGlkYXRhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbGlkYXRhYmxlKXsKCQkJCXZhbGlkYXRhYmxlLmFwcGx5Q29uc3RyYWludHMoZmllbGRzKTsKCQkJfSk7CgkJCWNvbnN0cmFpbnQuZmllbGRzID0gZmllbGRzOwoJCQljb25zdHJhaW50LnN0YXRlID0gImxvYWRlZCI7CgkJfQoJfQoKCglmdW5jdGlvbiBDb25zdHJhaW50UmVzb2x2ZXIocXZjKXsKCQl0aGlzLnF2YyA9IHF2YzsKCQl0aGlzLmNvbnN0cmFpbnRzID0gW107Cgl9CgkKCUNvbnN0cmFpbnRSZXNvbHZlci5wcm90b3R5cGUuYXBwbHlWYWxpZGF0aW9uQ29uc3RyYWludHMgPSBmdW5jdGlvbihuYW1lLCB2YWxpZGF0YWJsZSl7CgkJdmFyIGNvbnN0cmFpbnQgPSBmaW5kQ29uc3RyYWludChuYW1lLCB0aGlzLmNvbnN0cmFpbnRzKTsKCQlpZihjb25zdHJhaW50ID09IGZhbHNlKXsKCQkJdGhpcy5jb25zdHJhaW50cy5wdXNoKHsKCQkJCW5hbWU6IG5hbWUsCgkJCQlzdGF0ZTogImxvYWRpbmciLAoJCQkJdmFsaWRhdGFibGVzOiBbdmFsaWRhdGFibGVdCgkJCX0pOwoJCQl0aGlzLnF2Yy5sb2FkQ29uc3RyYWludHMobmFtZSwgY29uc3RyYWludHNMb2FkZWQuYmluZCh0aGlzKSk7CgkJfWVsc2V7CgkJCWlmKGNvbnN0cmFpbnQuc3RhdGUgPT09ICJsb2FkaW5nIil7CgkJCQljb25zdHJhaW50LnZhbGlkYXRhYmxlcy5wdXNoKHZhbGlkYXRhYmxlKTsKCQkJfWVsc2V7CgkJCQl2YWxpZGF0YWJsZS5hcHBseUNvbnN0cmFpbnRzKGNvbnN0cmFpbnQuZmllbGRzKTsKCQkJfQoJCX0KCX07CgkKCXJldHVybiBDb25zdHJhaW50UmVzb2x2ZXI7Cn0pOwpkZWZpbmUoJ29yZG51bmcvZXJyb3JIYW5kbGVyJyxbXSwgZnVuY3Rpb24oKXsKCXJldHVybiB7CgkJb25FcnJvcjogZnVuY3Rpb24oZXJyb3IpewoJCQlzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CgkJCQl0aHJvdyBlcnJvcjsKCQkJfSwxKTsKCQl9Cgl9Owp9KTsKZGVmaW5lKCdvcmRudW5nL3F2YycsWwoJIm9yZG51bmcvcXZjL0V4ZWN1dGFibGUiLCAKCSJvcmRudW5nL3F2Yy9FeGVjdXRhYmxlUmVzdWx0IiwgCgkib3JkbnVuZy91dGlscyIsIAoJIm9yZG51bmcvYWpheCIsCgkib3JkbnVuZy9xdmMvQ29uc3RyYWludFJlc29sdmVyIiwKCSJvcmRudW5nL2Vycm9ySGFuZGxlciIsCgkia25vY2tvdXQiLCAKCSJvcmRudW5nL3F2Yy9rb0V4dGVuc2lvbnMiXSwgCglmdW5jdGlvbigKCQlFeGVjdXRhYmxlLAoJCUV4ZWN1dGFibGVSZXN1bHQsCgkJdXRpbHMsCgkJYWpheCwKCQlDb25zdHJhaW50UmVzb2x2ZXIsCgkJZXJyb3JIYW5kbGVyLAoJCWtvKXsKCQoJZnVuY3Rpb24gUVZDKCl7CgoJCXZhciBxdmMgPSB0aGlzOwoKCQl0aGlzLmNvbnN0cmFpbnRSZXNvbHZlciA9IG5ldyBDb25zdHJhaW50UmVzb2x2ZXIocXZjKTsKCgkJdGhpcy5leGVjdXRlID0gZnVuY3Rpb24oZXhlY3V0YWJsZSl7CgkJCXZhciBwYXJhbWV0ZXJzID0ga28udG9KUyhleGVjdXRhYmxlLnBhcmFtZXRlcnMpOwoJCQl2YXIgZGF0YSA9IHsKCQkJCXBhcmFtZXRlcnM6IEpTT04uc3RyaW5naWZ5KHBhcmFtZXRlcnMpLAoJCQkJY3NyZlRva2VuOiBxdmMuY29uZmlnLmNzcmYKCQkJfTsKCQkJdmFyIHVybCA9IGFqYXguYWRkVG9QYXRoKHF2Yy5jb25maWcuYmFzZVVybCwgZXhlY3V0YWJsZS50eXBlICsgIi8iICsgZXhlY3V0YWJsZS5uYW1lKTsKCQkJYWpheCh1cmwsIGRhdGEsICJQT1NUIiwgZnVuY3Rpb24gKHhocikgewoJCQkJaWYgKHhoci5zdGF0dXMgPT09IDIwMCkgewoJCQkJCWV4ZWN1dGFibGUucmVzdWx0ID0gbmV3IEV4ZWN1dGFibGVSZXN1bHQoSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0IHx8ICJ7fSIpKTsKCQkJCQlpZiAoZXhlY3V0YWJsZS5yZXN1bHQuc3VjY2VzcyA9PT0gdHJ1ZSkgewoJCQkJCQlleGVjdXRhYmxlLm9uU3VjY2VzcygpOwoJCQkJCX0gZWxzZSB7CgkJCQkJCWlmKGV4ZWN1dGFibGUucmVzdWx0LmV4Y2VwdGlvbiAmJiBleGVjdXRhYmxlLnJlc3VsdC5leGNlcHRpb24ubWVzc2FnZSl7CgkJCQkJCQllcnJvckhhbmRsZXIub25FcnJvcihleGVjdXRhYmxlLnJlc3VsdC5leGNlcHRpb24ubWVzc2FnZSk7CgkJCQkJCX0KCQkJCQkJZXhlY3V0YWJsZS5vbkVycm9yKCk7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlleGVjdXRhYmxlLnJlc3VsdCA9IG5ldyBFeGVjdXRhYmxlUmVzdWx0KHtleGNlcHRpb246IHttZXNzYWdlOiB4aHIucmVzcG9uc2VUZXh0LCBjYXVzZTogeGhyfX0pOwoJCQkJCWVycm9ySGFuZGxlci5vbkVycm9yKGV4ZWN1dGFibGUucmVzdWx0LmV4Y2VwdGlvbi5tZXNzYWdlKTsKCQkJCQlleGVjdXRhYmxlLm9uRXJyb3IoKTsKCQkJCX0KCQkJCWV4ZWN1dGFibGUub25Db21wbGV0ZSgpOwoJCQl9KTsKCQkKCQl9OwoJCQoJCXRoaXMubG9hZENvbnN0cmFpbnRzID0gZnVuY3Rpb24obmFtZSwgY2FsbGJhY2spewoJCQl2YXIgdXJsID0gYWpheC5hZGRUb1BhdGgocXZjLmNvbmZpZy5iYXNlVXJsLCAiY29uc3RyYWludHMvIiArIG5hbWUpOwoJCQlhamF4KHVybCwgbnVsbCwgIkdFVCIsIGZ1bmN0aW9uKHhocil7CgkJCQlpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7CgkJCQkJdHJ5ewoJCQkJCQl2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQgfHwgIntcInBhcmFtZXRlcnNcIjpbXX0iKTsKCQkJCQkJaWYoInBhcmFtZXRlcnMiIGluIHJlc3BvbnNlID09IGZhbHNlKXsKCQkJCQkJCXJlc3BvbnNlLnBhcmFtZXRlcnMgPSBbXTsKCQkJCQkJfQoJCQkJCQlpZihyZXNwb25zZS5leGNlcHRpb24gJiYgcmVzcG9uc2UuZXhjZXB0aW9uLm1lc3NhZ2UpewoJCQkJCQkJZXJyb3JIYW5kbGVyLm9uRXJyb3IocmVzcG9uc2UuZXhjZXB0aW9uLm1lc3NhZ2UpOwoJCQkJCQl9CgkJCQkJfWNhdGNoKGUpewoJCQkJCQl2YXIgcmVzcG9uc2UgPSB7cGFyYW1ldGVyczogW119OwoJCQkJCX0KCQkJCQljYWxsYmFjayhuYW1lLCByZXNwb25zZS5wYXJhbWV0ZXJzKTsKCQkJCX1lbHNlewoJCQkJCWVycm9ySGFuZGxlci5vbkVycm9yKHhoci5yZXNwb25zZVRleHQpOwoJCQkJfQoJCQl9KTsKCQl9OwoKCQkKCQl0aGlzLmNvbmZpZyA9IHsKCQkJYmFzZVVybDogIi8iLAoJCQljc3JmOiAiIgoJCX0KCX07CgoJdmFyIHF2YyA9IG5ldyBRVkMoKTsKCQoJZnVuY3Rpb24gY3JlYXRlRXhlY3V0YWJsZShuYW1lLCB0eXBlLCBwYXJhbWV0ZXJzLCBjYWxsYmFja3MpewoJCWlmKG5hbWUgPT0gbnVsbCB8fCBuYW1lLmxlbmd0aCA9PSAwKQoJCQl0aHJvdyBuZXcgRXJyb3IodHlwZSArICIgaXMgbWlzc2luZyBuYW1lXG5BICIgKyB0eXBlICsgIiBtdXN0IGhhdmUgYSBuYW1lIVxudXNhZ2U6IGNyZWF0ZUNvbW1hbmQoJ25hbWUnLCBbcGFyYW1ldGVycywgY2FsbGJhY2tzXSkiKTsKCQoJCXZhciBleGVjdXRhYmxlID0gbmV3IEV4ZWN1dGFibGUobmFtZSwgdHlwZSwgcGFyYW1ldGVycyB8fCB7fSwgY2FsbGJhY2tzIHx8IHt9LCBxdmMpOwoJCXZhciBleGVjdXRlID0gZXhlY3V0YWJsZS5leGVjdXRlLmJpbmQoZXhlY3V0YWJsZSk7CgkJZXhlY3V0ZS5pc1ZhbGlkID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKXtyZXR1cm4gZXhlY3V0YWJsZS5pc1ZhbGlkKCk7IH0pOwoJCWV4ZWN1dGUuaXNCdXN5ID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKXtyZXR1cm4gZXhlY3V0YWJsZS5pc0J1c3koKTt9KTsKCQlleGVjdXRlLmhhc0Vycm9yID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKXtyZXR1cm4gZXhlY3V0YWJsZS5oYXNFcnJvcigpO30pOwoJCWV4ZWN1dGUuc3VjY2VzcyA9IGZ1bmN0aW9uKGNhbGxiYWNrKXsKCQkJZXhlY3V0YWJsZS5jYWxsYmFja3Muc3VjY2VzcyA9IGNhbGxiYWNrOwoJCQlyZXR1cm4gZXhlY3V0ZTsKCQl9OwoJCWV4ZWN1dGUuZXJyb3IgPSBmdW5jdGlvbihjYWxsYmFjayl7CgkJCWV4ZWN1dGFibGUuY2FsbGJhY2tzLmVycm9yID0gY2FsbGJhY2s7CgkJCXJldHVybiBleGVjdXRlOwoJCX07CgkJZXhlY3V0ZS5iZWZvcmVFeGVjdXRlID0gZnVuY3Rpb24oY2FsbGJhY2spewoJCQlleGVjdXRhYmxlLmNhbGxiYWNrcy5iZWZvcmVFeGVjdXRlID0gY2FsbGJhY2s7CgkJCXJldHVybiBleGVjdXRlOwoJCX07CgkJZXhlY3V0ZS5jYW5FeGVjdXRlID0gZnVuY3Rpb24oY2FsbGJhY2spewoJCQlleGVjdXRhYmxlLmNhbGxiYWNrcy5jYW5FeGVjdXRlID0gY2FsbGJhY2s7CgkJCXJldHVybiBleGVjdXRlOwoJCX07CgkJZXhlY3V0ZS5yZXN1bHQgPSBmdW5jdGlvbigpewoJCQlpZihhcmd1bWVudHMubGVuZ3RoID09IDEpewoJCQkJZXhlY3V0YWJsZS5jYWxsYmFja3MucmVzdWx0ID0gYXJndW1lbnRzWzBdOwoJCQkJcmV0dXJuIGV4ZWN1dGU7CgkJCX0KCQkJcmV0dXJuIGV4ZWN1dGFibGUucmVzdWx0LnJlc3VsdDsKCQl9OwoJCWV4ZWN1dGUuY29tcGxldGUgPSBmdW5jdGlvbihjYWxsYmFjayl7CgkJCWV4ZWN1dGFibGUuY2FsbGJhY2tzLmNvbXBsZXRlID0gY2FsbGJhY2s7CgkJCXJldHVybiBleGVjdXRlOwoJCX07CgkJZXhlY3V0ZS5jbGVhclZhbGlkYXRpb25NZXNzYWdlcyA9IGV4ZWN1dGFibGUuY2xlYXJWYWxpZGF0aW9uTWVzc2FnZXMuYmluZChleGVjdXRhYmxlKTsKCQlleGVjdXRlLnZhbGlkYXRvciA9IGV4ZWN1dGFibGUudmFsaWRhdG9yOwoJCQoJCXJldHVybiBleGVjdXRlOwoJfQoJCglyZXR1cm4gewoJCWNyZWF0ZUNvbW1hbmQ6IGZ1bmN0aW9uKG5hbWUsIHBhcmFtZXRlcnMsIGNhbGxiYWNrcyl7CgkJCXJldHVybiBjcmVhdGVFeGVjdXRhYmxlKG5hbWUsIEV4ZWN1dGFibGUuQ29tbWFuZCwgcGFyYW1ldGVycywgY2FsbGJhY2tzKTsKCQl9LAoJCWNyZWF0ZVF1ZXJ5OiBmdW5jdGlvbihuYW1lLCBwYXJhbWV0ZXJzLCBjYWxsYmFja3MpewoJCQlyZXR1cm4gY3JlYXRlRXhlY3V0YWJsZShuYW1lLCBFeGVjdXRhYmxlLlF1ZXJ5LCBwYXJhbWV0ZXJzLCBjYWxsYmFja3MpOwoJCX0sCgkJY29uZmlnOiBmdW5jdGlvbihjb25maWcpewoJCQl1dGlscy5leHRlbmQocXZjLmNvbmZpZywgY29uZmlnKTsKCQl9Cgl9Cn0pOwpkZWZpbmUoJ29yZG51bmcvc3BhL091dGxldCcsWwoJImtub2Nrb3V0IgpdLCBmdW5jdGlvbigKCWtvCil7CgoJZnVuY3Rpb24gT3V0bGV0KGVsZW1lbnQsIGRvY3VtZW50KXsKCQl0aGlzLmVsZW1lbnQgPSBlbGVtZW50OwoJCXRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudCB8fCB3aW5kb3cuZG9jdW1lbnQ7Cgl9CgoJT3V0bGV0LnByb3RvdHlwZS5vdXRsZXRFeGlzdHMgPSBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzLmVsZW1lbnQgIT0gbnVsbDsKCX07CgoJT3V0bGV0LnByb3RvdHlwZS51bmxvYWRDdXJyZW50UGFnZSA9IGZ1bmN0aW9uKCl7CgkJa28uY2xlYW5Ob2RlKHRoaXMuZWxlbWVudCk7CgkJdGhpcy5lbGVtZW50LmlubmVySFRNTCA9ICIiOwoJfTsKCglPdXRsZXQucHJvdG90eXBlLnNldFBhZ2VDb250ZW50ID0gZnVuY3Rpb24oY29udGVudCl7CgkJdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7Cgl9OwoKCU91dGxldC5wcm90b3R5cGUuZ2V0UGFnZVRpdGxlID0gZnVuY3Rpb24oKXsKCQl2YXIgdGl0bGVNZXRhVGFnID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoIm1ldGFbbmFtZT10aXRsZV0iKTsKCQlyZXR1cm4gKHRpdGxlTWV0YVRhZyAmJiB0aXRsZU1ldGFUYWcuZ2V0QXR0cmlidXRlKCJjb250ZW50IikpOwoJfTsKCglPdXRsZXQucHJvdG90eXBlLnNldERvY3VtZW50VGl0bGUgPSBmdW5jdGlvbih0aXRsZSl7CgkJdGhpcy5kb2N1bWVudC50aXRsZSA9IHRpdGxlOwoJfTsKCglPdXRsZXQucHJvdG90eXBlLmV4dHJhY3RBbmRSdW5QYWdlSmF2YVNjcmlwdCA9IGZ1bmN0aW9uKCl7CgkJdmFyIHNjcmlwdHMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgic2NyaXB0W3R5cGU9J3RleHQvamF2YXNjcmlwdCddIik7CgkJZm9yKHZhciBpPTA7IGk8c2NyaXB0cy5sZW5ndGg7IGkrKyl7CgkJCXNjcmlwdHNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHRzW2ldKTsKCQkJaWYoc2NyaXB0c1tpXS5pZCA9PT0gJycpIHRocm93IG5ldyBFcnJvcigiVGhlIHNjcmlwdCBtdXN0IGhhdmUgYW4gaWQiKTsKCQkJaWYodGhpcy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChzY3JpcHRzW2ldLmlkKSA9PSBudWxsKXsKCQkJCXZhciBzY3JpcHQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwoJCQkJc2NyaXB0LmlkID0gc2NyaXB0c1tpXS5pZDsKCQkJCXNjcmlwdC50ZXh0ID0gc2NyaXB0c1tpXS50ZXh0Q29udGVudDsKCQkJCXNjcmlwdC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCBzY3JpcHRzW2ldLmdldEF0dHJpYnV0ZSgndHlwZScpKTsKCQkJCXRoaXMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOwoJCQl9CgkJfQoJfTsKCglPdXRsZXQucHJvdG90eXBlLmluZGljYXRlUGFnZUlzTG9hZGluZyA9IGZ1bmN0aW9uKCl7CgkJdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgiZGF0YS1sb2FkaW5nIiwgInRydWUiKTsKCX07CgoJT3V0bGV0LnByb3RvdHlwZS5wYWdlSGFzTG9hZGVkID0gZnVuY3Rpb24oKXsKCQl0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCJkYXRhLWxvYWRpbmciLCAiZmFsc2UiKTsKCX07CgoJcmV0dXJuIE91dGxldDsKCn0pOwpkZWZpbmUoJ29yZG51bmcvc3BhL3doZW5Db250ZXh0JyxbCgkKXSwgZnVuY3Rpb24oCgkKKXsKCglmdW5jdGlvbiB1bnN1YnNjcmliZShldmVudCwgcmVhY3Rpb24pewoJCWV2ZW50LmRvbnQocmVhY3Rpb24pOwoJfQoKCWZ1bmN0aW9uIHN1YnNjcmliZShldmVudCwgcmVhY3Rpb24pewoJCWV2ZW50KHJlYWN0aW9uKTsKCQlyZXR1cm4gZXZlbnQuZG9udC5iaW5kKG51bGwsIHJlYWN0aW9uKTsKCX0KCglmdW5jdGlvbiB3aGVuU29tZXRoaW5nKCl7CgkJaWYodGhpcy5kZXN0cm95ZWQpIHRocm93IG5ldyBFcnJvcigiVGhpcyBjb250ZXh0IGhhcyBiZWVuIGRlc3Ryb3llZCEiKTsKCgkJaWYoYXJndW1lbnRzLmxlbmd0aCA9PSAwKXsKCQkJdmFyIGNoaWxkQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTsKCQkJdGhpcy5jaGlsZENvbnRleHRzLnB1c2goY2hpbGRDb250ZXh0KTsKCQkJcmV0dXJuIGNoaWxkQ29udGV4dC53aGVuOwoJCX1lbHNlIGlmKGFyZ3VtZW50cy5sZW5ndGggPT0gMSAmJiB0eXBlb2YgYXJndW1lbnRzWzBdID09PSAiZnVuY3Rpb24iKXsKCQkJcmV0dXJuIHsKCQkJCWRvbnQ6IHVuc3Vic2NyaWJlLmJpbmQobnVsbCwgYXJndW1lbnRzWzBdKQoJCQl9CgkJfWVsc2UgaWYoYXJndW1lbnRzLmxlbmd0aCA9PSAyICYmIHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICJmdW5jdGlvbiIpewoJCQl0aGlzLmV2ZW50U3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmUoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pKTsKCQl9Cgl9CgoJZnVuY3Rpb24gdGhpc0lzRGVzdHJveWVkKHJlYWN0aW9uKXsKCQl0aGlzLm9uRGVzdHJveUxpc3RlbmVycy5wdXNoKHJlYWN0aW9uKTsKCX0KCglmdW5jdGlvbiBkZXN0cm95Q2hpbGRDb250ZXh0cygpewoJCXZhciBjb250ZXh0OwoJCXdoaWxlKGNvbnRleHQgPSB0aGlzLmNoaWxkQ29udGV4dHMucG9wKCkpCgkJCWNvbnRleHQuZGVzdHJveUNvbnRleHQoKTsKCX0KCglmdW5jdGlvbiBkZXN0cm95Q29udGV4dCgpewoJCXZhciBzdWJzY3JpYmVyLCBsaXN0ZW5lciwgY29udGV4dDsKCQl3aGlsZShzdWJzY3JpYmVyID0gdGhpcy5ldmVudFN1YnNjcmliZXJzLnBvcCgpKQoJCQlzdWJzY3JpYmVyKCk7CgkJd2hpbGUobGlzdGVuZXIgPSB0aGlzLm9uRGVzdHJveUxpc3RlbmVycy5wb3AoKSkKCQkJbGlzdGVuZXIoKTsKCQl3aGlsZShjb250ZXh0ID0gdGhpcy5jaGlsZENvbnRleHRzLnBvcCgpKQoJCQljb250ZXh0LmRlc3Ryb3lDb250ZXh0KCk7CgkJdGhpcy5kZXN0cm95ZWQgPSB0cnVlOwoJfQoKCWZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQoKXsKCQl2YXIgY29udGV4dCA9IHsKCQkJZGVzdHJveWVkOiBmYWxzZSwKCQkJb25EZXN0cm95TGlzdGVuZXJzOiBbXSwKCQkJY2hpbGRDb250ZXh0czogW10sCgkJCWV2ZW50U3Vic2NyaWJlcnM6IFtdCgkJfTsKCgkJdmFyIHdoZW4gPSB3aGVuU29tZXRoaW5nLmJpbmQoY29udGV4dCk7CgoJCXdoZW4udGhpc0lzRGVzdHJveWVkID0gdGhpc0lzRGVzdHJveWVkLmJpbmQoY29udGV4dCk7CgoJCXdoZW4uZGVzdHJveUNoaWxkQ29udGV4dHMgPSBkZXN0cm95Q2hpbGRDb250ZXh0cy5iaW5kKGNvbnRleHQpOwoKCQlyZXR1cm4gewoJCQl3aGVuOiB3aGVuLAoJCQlkZXN0cm95Q29udGV4dDogZGVzdHJveUNvbnRleHQuYmluZChjb250ZXh0KQoJCX07Cgl9CgoJcmV0dXJuIGNyZWF0ZUNvbnRleHQoKS53aGVuOwp9KTsKZGVmaW5lKCdvcmRudW5nL3NwYS9hcHBseVZpZXdNb2RlbHMnLFsKCSJvcmRudW5nL3V0aWxzIiwKCSJvcmRudW5nL2Vycm9ySGFuZGxlciIsCgkia25vY2tvdXQiLCAKCSJ3aGVuIiwgCgkid2hlbi9jYWxsYmFja3MiCl0sIGZ1bmN0aW9uICgKCXV0aWxzLCAKCWVycm9ySGFuZGxlciwKCWtvLCAKCXdoZW4sIAoJY2FsbGJhY2tzCikgewoKCglmdW5jdGlvbiBnZXRBdHRyaWJ1dGVzKHRhcmdldCl7CgoJCXZhciB2aWV3TW9kZWxOYW1lID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgiZGF0YS12aWV3bW9kZWwiKTsKCQl2YXIgbW9kZWwgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCJkYXRhLW1vZGVsIik7CgkJaWYgKG1vZGVsICYmIG1vZGVsLmluZGV4T2YoInsiKSA9PSAwKSB7CgkJCW1vZGVsID0gSlNPTi5wYXJzZShtb2RlbCk7CgkJfQoKCQlyZXR1cm4gewoJCQl0YXJnZXQ6IHRhcmdldCwKCQkJdmlld01vZGVsTmFtZTogdmlld01vZGVsTmFtZSwKCQkJbW9kZWw6IG1vZGVsCgkJfTsKCX0KCgoJZnVuY3Rpb24gbG9hZFZpZXdNb2RlbChkYXRhKXsKCgkJcmV0dXJuIGNhbGxiYWNrcy5jYWxsKHJlcXVpcmUsIFsKCQkJZGF0YS52aWV3TW9kZWxOYW1lCgkJXSkudGhlbihmdW5jdGlvbihWaWV3TW9kZWwpewoJCQlkYXRhLlZpZXdNb2RlbCA9IFZpZXdNb2RlbDsKCQkJcmV0dXJuIGRhdGE7CgkJfSwgZnVuY3Rpb24oZXJyb3IpewoJCQllcnJvckhhbmRsZXIub25FcnJvcihuZXcgRXJyb3IoIkNvdWxkIG5vdCBsb2FkIHRoZSBmb2xsb3dpbmcgbW9kdWxlczpcbiIrZXJyb3IucmVxdWlyZU1vZHVsZXMuam9pbigiXG4iKSkpOwoJCQlyZXR1cm4gbnVsbDsKCQl9KTsKCX0KCglmdW5jdGlvbiBhcHBseVZpZXdNb2RlbChzdWJzY3JpYmUsIGRhdGEpIHsKCQl0cnl7CgkJCXZhciB2aWV3TW9kZWwgPSBuZXcgZGF0YS5WaWV3TW9kZWwoZGF0YS5tb2RlbCB8fCB7fSwgc3Vic2NyaWJlKTsKCQkJa28uYXBwbHlCaW5kaW5ncyh2aWV3TW9kZWwsIGRhdGEudGFyZ2V0KTsKCQl9Y2F0Y2goZSl7CgkJCWVycm9ySGFuZGxlci5vbkVycm9yKGUpOwoJCX0KCX0KCglmdW5jdGlvbiB2aWV3TW9kZWxMb2FkZWRTdWNjZXNzZnVsbHkoZGF0YSl7CgkJcmV0dXJuIGRhdGEgIT0gbnVsbCAmJiBkYXRhLlZpZXdNb2RlbCAhPSBudWxsOwoJfQoKCXJldHVybiBmdW5jdGlvbiAoZG9tRWxlbWVudCwgc3Vic2NyaWJlKSB7CgoJCWRvbUVsZW1lbnQgPSBkb21FbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7CgoJCXZhciBlbGVtZW50TGlzdCA9IHV0aWxzLnRvQXJyYXkoZG9tRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCIqW2RhdGEtdmlld21vZGVsXSIpKTsKCgkJdmFyIHZpZXdNb2RlbHNMb2FkZWQgPSBlbGVtZW50TGlzdC5tYXAoZ2V0QXR0cmlidXRlcykubWFwKGxvYWRWaWV3TW9kZWwpOwoKCQlyZXR1cm4gd2hlbi5hbGwodmlld01vZGVsc0xvYWRlZCkudGhlbihmdW5jdGlvbihsaXN0KXsKCQkJbGlzdC5maWx0ZXIodmlld01vZGVsTG9hZGVkU3VjY2Vzc2Z1bGx5KS5mb3JFYWNoKGFwcGx5Vmlld01vZGVsLmJpbmQobnVsbCwgc3Vic2NyaWJlKSkKCQl9KTsKCX07Cn0pOwpkZWZpbmUoJ29yZG51bmcvc3BhL2hhc2hOYXZpZ2F0aW9uJyxbCgkib3JkbnVuZy91dGlscyIKXSxmdW5jdGlvbigKCV8KKXsKCgoJCglmdW5jdGlvbiBuZXdQYXRoKGN1cnJlbnRQYXRoLCBsaW5rLCBpbmRleCl7CgkJdmFyIGlzUmVsYXRpdmUgPSBfLnN0YXJ0c1dpdGgobGluaywgJy8nKSA9PT0gZmFsc2U7CgkJdmFyIGlzRm9sZGVyID0gXy5lbmRzV2l0aChsaW5rLCAnLycpOwoJCQoJCWlmKGxpbmsgPT09ICIvIil7CgkJCXZhciBwYXRoID0gW107CgkJfWVsc2UgaWYobGluayA9PT0gIiIpewoJCQl2YXIgcGF0aCA9IFtpbmRleF07CgkJfWVsc2V7CgkJCXZhciBwYXRoID0gXy50cmltKGxpbmssICIvIikuc3BsaXQoIi8iKTsKCQl9CgoJCWlmKGlzRm9sZGVyKXsKCQkJcGF0aC5wdXNoKGluZGV4KTsKCQl9CgkJaWYoaXNSZWxhdGl2ZSl7CgkJCXBhdGggPSBfLnBvcFRhaWwoY3VycmVudFBhdGgpLmNvbmNhdChwYXRoKTsKCQl9CgoJCXZhciBvdXQgPSBbXTsKCgkJZm9yKHZhciBpID0gcGF0aC5sZW5ndGg+Pj4wOyBpLS07KXsKCQkJaWYocGF0aFtpXSA9PT0gIiIpewoJCQkJY29udGludWU7CgkJCX1lbHNlIGlmKHBhdGhbaV0gPT09ICIuIil7CgkJCQljb250aW51ZTsKCQkJfWVsc2UgaWYocGF0aFtpXSA9PT0gIi4uIikgewoJCQkJaS0tOwoJCQl9ZWxzZXsKCQkJCW91dC51bnNoaWZ0KHBhdGhbaV0pOwoJCQl9CgkJfQoKCQlyZXR1cm4gb3V0OwoJfQoKCWZ1bmN0aW9uIGhhc2hDaGFuZ2VkKGNvbmZpZywgb25QYWdlQ2hhbmdlZCwgZG9jdW1lbnQpewoKCQl2YXIgcGF0aCA9IF8uYWZ0ZXIoZG9jdW1lbnQubG9jYXRpb24uaHJlZiwgJyMnKTsKCgkJdmFyIGlzUmVsYXRpdmUgPSBfLnN0YXJ0c1dpdGgocGF0aCwgJy8nKSA9PSBmYWxzZTsKCQl2YXIgaXNGb2xkZXIgPSBfLmVuZHNXaXRoKHBhdGgsICcvJyk7CgoJCWlmKGlzUmVsYXRpdmUgfHwgaXNGb2xkZXIpewoJCQl2YXIgbmV3SGFzaCA9IG5ld1BhdGgodGhpcy5jdXJyZW50UGF0aCwgcGF0aCwgY29uZmlnLmluZGV4KS5qb2luKCcvJyk7CgkJCWRvY3VtZW50LmxvY2F0aW9uLnJlcGxhY2UoIiMvIiArIG5ld0hhc2gpOwoJCX1lbHNlewoJCQl0aGlzLmN1cnJlbnRQYXRoID0gbmV3UGF0aCh0aGlzLmN1cnJlbnRQYXRoLCBwYXRoLCBjb25maWcuaW5kZXgpOwoJCQlvblBhZ2VDaGFuZ2VkKHRoaXMuY3VycmVudFBhdGguam9pbignLycpLCB0aGlzLmN1cnJlbnRQYXRoLm1hcChmdW5jdGlvbihwKXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHApO30pKTsKCQl9CgoJfQoJCglmdW5jdGlvbiBzdGFydEhhc2hOYXZpZ2F0aW9uKGNvbmZpZywgb25QYWdlQ2hhbmdlZCwgZG9jLCBnbG9iYWwpewoJCWRvYyA9IGRvYyB8fCBkb2N1bWVudDsKCQlnbG9iYWwgPSBnbG9iYWwgfHwgd2luZG93OwoKCQl2YXIgc3RhdGUgPSB7CgkJCWN1cnJlbnRQYXRoOiBbXQoJCX07CgkJdmFyIG9uSGFzaENoYW5nZWQgPSBoYXNoQ2hhbmdlZC5iaW5kKHN0YXRlLCBjb25maWcsIG9uUGFnZUNoYW5nZWQsIGRvYyk7CgkJb25IYXNoQ2hhbmdlZCgpOwoJCV8uYWRkRXZlbnRMaXN0ZW5lcihnbG9iYWwsICJoYXNoY2hhbmdlIiwgb25IYXNoQ2hhbmdlZCwgZmFsc2UpOwoKCQlyZXR1cm4gewoJCQlzdG9wOiBmdW5jdGlvbigpewoJCQkJZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoImhhc2hjaGFuZ2UiLCBvbkhhc2hDaGFuZ2VkLCBmYWxzZSk7CgkJCX0KCQl9OwoJfQoKCglyZXR1cm4gewoJCXN0YXJ0OiBzdGFydEhhc2hOYXZpZ2F0aW9uCgl9OwoKfSk7CmRlZmluZSgnb3JkbnVuZy9zcGEvUGFnZUxvYWRlcicsWwoJIm9yZG51bmcvYWpheCIKXSwgZnVuY3Rpb24oCglhamF4Cil7CgoJZnVuY3Rpb24gUGFnZUxvYWRlcihjb25maWcpewoJCXRoaXMucGF0aFRvVXJsID0gY29uZmlnICYmIGNvbmZpZy5wYXRoVG9VcmwgfHwgZnVuY3Rpb24oYSl7IHJldHVybiBhOyB9OwoJCXRoaXMuY2FjaGUgPSAoY29uZmlnICYmICdjYWNoZVBhZ2VzJyBpbiBjb25maWcgPyBjb25maWcuY2FjaGVQYWdlcyA6IHRydWUpOwoJCXRoaXMuY3VycmVudFhIUiA9IG51bGw7Cgl9CgoJUGFnZUxvYWRlci5wcm90b3R5cGUubG9hZFBhZ2UgPSBmdW5jdGlvbihwYXRoLCByZXNvbHZlcil7CgoJCXRoaXMuYWJvcnQoKTsKCgkJdmFyIHVybCA9IHRoaXMucGF0aFRvVXJsKHBhdGgpOwoKCQlpZih0aGlzLmNhY2hlID09PSBmYWxzZSkKCQkJdXJsID0gYWpheC5jYWNoZUJ1c3QodXJsKTsKCgkJdGhpcy5jdXJyZW50WEhSID0gYWpheCh1cmwsIHt9LCAiR0VUIiwgZnVuY3Rpb24oeGhyKXsKCQkJaWYoeGhyLnN0YXR1cyA9PT0gMjAwKQoJCQkJcmVzb2x2ZXIucmVzb2x2ZSh4aHIucmVzcG9uc2VUZXh0KTsKCQkJZWxzZQoJCQkJcmVzb2x2ZXIucmVqZWN0KHtlcnJvcjogeGhyLnN0YXR1cywgY29udGVudDogeGhyLnJlc3BvbnNlVGV4dH0pOwoJCX0pOwoJfTsKCglQYWdlTG9hZGVyLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCl7CgkJaWYodGhpcy5jdXJyZW50WEhSICYmIHRoaXMuY3VycmVudFhIUi5yZWFkeVN0YXRlICE9PSA0KXsKCQkJdGhpcy5jdXJyZW50WEhSLmFib3J0KCk7CgkJfQoJfTsKCglyZXR1cm4gUGFnZUxvYWRlcjsKfSk7CmRlZmluZSgnb3JkbnVuZy9zcGEvVGVtcGxhdGVzJyxbCgkib3JkbnVuZy9zcGEvUGFnZUxvYWRlciIsCgkib3JkbnVuZy91dGlscyIsCgkid2hlbiIKXSwgZnVuY3Rpb24oCglQYWdlTG9hZGVyLAoJdXRpbHMsCgl3aGVuCil7CgoJZnVuY3Rpb24gZGVmYXVsdENvbmZpZygpewoJCXJldHVybiB7CgkJCXBhdGhUb1VybDogZnVuY3Rpb24oYSl7IHJldHVybiBhOyB9CgkJfQoJfQoKCWZ1bmN0aW9uIGZpbmRUZW1wbGF0ZXNJbkRvY3VtZW50KGRvYyl7CgoJCXZhciBub2RlTGlzdCA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKCJbdHlwZT0ndGV4dC9wYWdlLXRlbXBsYXRlJ10iKTsKCQl2YXIgbm9kZXMgPSB1dGlscy50b0FycmF5KG5vZGVMaXN0KTsKCQl2YXIgdGVtcGxhdGVMaXN0ID0gbm9kZXMubWFwKGZ1bmN0aW9uKHRlbXBsYXRlKXsKCQkJcmV0dXJuIHsKCQkJCWlkOiB0ZW1wbGF0ZS5pZC50b0xvd2VyQ2FzZSgpLAoJCQkJY29udGVudDogdGVtcGxhdGUuaW5uZXJIVE1MCgkJCX07CgkJfSk7CgoJCXJldHVybiB1dGlscy5hcnJheVRvT2JqZWN0KHRlbXBsYXRlTGlzdCwgZnVuY3Rpb24oaXRlbSwgb2JqZWN0KXsKCQkJb2JqZWN0W2l0ZW0uaWRdID0gaXRlbS5jb250ZW50OwoJCX0pOwoJfQoKCglmdW5jdGlvbiBUZW1wbGF0ZXMoZG9jdW1lbnQsIGNvbmZpZyl7CgkJdGhpcy5wYWdlTG9hZGVyID0gbmV3IFBhZ2VMb2FkZXIoY29uZmlnIHx8IGRlZmF1bHRDb25maWcoKSk7CgkJdGhpcy5jYWNoZVBhZ2VzID0gKGNvbmZpZyAmJiAnY2FjaGVQYWdlcycgaW4gY29uZmlnID8gY29uZmlnLmNhY2hlUGFnZXMgOiB0cnVlKQoJCXRoaXMudGVtcGxhdGVzID0gZmluZFRlbXBsYXRlc0luRG9jdW1lbnQoZG9jdW1lbnQpOwoJfQoKCVRlbXBsYXRlcy5wcm90b3R5cGUuZ2V0VGVtcGxhdGUgPSBmdW5jdGlvbihwYXRoKXsKCgkJdGhpcy5wYWdlTG9hZGVyLmFib3J0KCk7CgoJCXZhciBub3JtYWxpemVkUGF0aCA9IHBhdGgudG9Mb3dlckNhc2UoKTsKCgkJaWYobm9ybWFsaXplZFBhdGggaW4gdGhpcy50ZW1wbGF0ZXMpewoJCQlyZXR1cm4gd2hlbi5yZXNvbHZlKHRoaXMudGVtcGxhdGVzW25vcm1hbGl6ZWRQYXRoXSk7CgkJfWVsc2V7CgkJCXZhciBkZWZlcnJlZCA9IHdoZW4uZGVmZXIoKTsKCgkJCXRoaXMucGFnZUxvYWRlci5sb2FkUGFnZShwYXRoLCBkZWZlcnJlZC5yZXNvbHZlcik7CgkJCQoJCQlyZXR1cm4gZGVmZXJyZWQucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpewoJCQkJaWYodGhpcy5jYWNoZVBhZ2VzKQoJCQkJCXRoaXMudGVtcGxhdGVzW25vcm1hbGl6ZWRQYXRoXSA9IGNvbnRlbnQ7CgkJCQkKCQkJCXJldHVybiBjb250ZW50OwoJCQl9LmJpbmQodGhpcyksIGZ1bmN0aW9uKG5vdEZvdW5kKXsKCQkJCXZhciBlcnJvclRlbXBsYXRlID0gImVycm9yIiArIG5vdEZvdW5kLmVycm9yOwoJCQkJaWYoZXJyb3JUZW1wbGF0ZSBpbiB0aGlzLnRlbXBsYXRlcyl7CgkJCQkJcmV0dXJuIHRoaXMudGVtcGxhdGVzW2Vycm9yVGVtcGxhdGVdOwoJCQkJfWVsc2V7CgkJCQkJcmV0dXJuIG5vdEZvdW5kLmNvbnRlbnQ7CgkJCQl9CgkJCX0uYmluZCh0aGlzKSk7CgkJfQoJfTsKCglyZXR1cm4gVGVtcGxhdGVzOwp9KTsKZGVmaW5lKCdvcmRudW5nL3Byb2NsYWltV2hlbicsW10sIGZ1bmN0aW9uICgpIHsKCglmdW5jdGlvbiBwdWJsaXNoKG5hbWUsIHN1YnNjcmliZXJzLCBkYXRhKSB7CgkJc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewoJCQlpdGVtLmFwcGx5KGl0ZW0sIGRhdGEpOwoJCX0pOwoJfQoKCWZ1bmN0aW9uIHN1YnNjcmliZVRvKG5hbWUsIHN1YnNjcmliZXJzLCBzdWJzY3JpYmVyKSB7CgkJdmFyIGluZGV4ID0gc3Vic2NyaWJlcnMuaW5kZXhPZihzdWJzY3JpYmVyKTsKCQlpZihpbmRleCA8IDApCgkJCXN1YnNjcmliZXJzLnB1c2goc3Vic2NyaWJlcik7CgkJcmV0dXJuIGluZGV4IDwgMDsKCX0KCQoJZnVuY3Rpb24gdW5zdWJzY3JpYmVGcm9tKG5hbWUsIHN1YnNjcmliZXJzLCBzdWJzY3JpYmVyKXsKCQl2YXIgaW5kZXggPSBzdWJzY3JpYmVycy5pbmRleE9mKHN1YnNjcmliZXIpOwoJCWlmKGluZGV4ID49IDApCgkJCXN1YnNjcmliZXJzLnNwbGljZShpbmRleCwgMSk7CgkJcmV0dXJuIGluZGV4ID49IDA7Cgl9CglmdW5jdGlvbiBleHRlbmRFdmVudChuYW1lLCBldmVudCl7CgkJZXZlbnQuc3Vic2NyaWJlcnMgPSBbXTsKCQlldmVudC5zdWJzY3JpYmVTdWJzY3JpYmVycyA9IFtdOwoJCWV2ZW50LnVuc3Vic2NyaWJlU3Vic2NyaWJlcnMgPSBbXTsKCgkJdmFyIGV4dGVuZGVkRXZlbnQgPSBmdW5jdGlvbigpewoJCQlpZihhcmd1bWVudHMubGVuZ3RoID09IDEgJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gImZ1bmN0aW9uIil7CgkJCQlpZihzdWJzY3JpYmVUbyhuYW1lLCBldmVudC5zdWJzY3JpYmVycywgYXJndW1lbnRzWzBdKSkKCQkJCQlwdWJsaXNoKG5hbWUrIi5pc1N1YnNjcmliZWRUbyIsIGV2ZW50LnN1YnNjcmliZVN1YnNjcmliZXJzKTsKCQkJfWVsc2V7CgkJCQlwdWJsaXNoKG5hbWUsIGV2ZW50LnN1YnNjcmliZXJzLCBhcmd1bWVudHMpOwoJCQl9CgkJfQoKCQlleHRlbmRlZEV2ZW50LmRvbnQgPSBmdW5jdGlvbihzdWJzY3JpYmVyKXsKCQkJaWYodW5zdWJzY3JpYmVGcm9tKG5hbWUsIGV2ZW50LnN1YnNjcmliZXJzLCBzdWJzY3JpYmVyKSkKCQkJCXB1Ymxpc2gobmFtZSsiLmlzVW5zdWJzY3JpYmVkRnJvbSIsIGV2ZW50LnVuc3Vic2NyaWJlU3Vic2NyaWJlcnMpOwoJCX07CgoJCWV4dGVuZGVkRXZlbnQuaXNTdWJzY3JpYmVkVG8gPSBmdW5jdGlvbihzdWJzY3JpYmVyKXsKCQkJc3Vic2NyaWJlVG8obmFtZSsiLmlzU3Vic2NyaWJlZFRvIiwgZXZlbnQuc3Vic2NyaWJlU3Vic2NyaWJlcnMsIHN1YnNjcmliZXIpOwoJCX07CgoJCWV4dGVuZGVkRXZlbnQuaXNTdWJzY3JpYmVkVG8uZG9udCA9IGZ1bmN0aW9uKHN1YnNjcmliZXIpewoJCQl1bnN1YnNjcmliZUZyb20obmFtZSsiLmlzU3Vic2NyaWJlZFRvIiwgZXZlbnQuc3Vic2NyaWJlU3Vic2NyaWJlcnMsIHN1YnNjcmliZXIpOwoJCX07CgoJCWV4dGVuZGVkRXZlbnQuaXNVbnN1YnNjcmliZWRGcm9tID0gZnVuY3Rpb24oc3Vic2NyaWJlcil7CgkJCXN1YnNjcmliZVRvKG5hbWUrIi5pc1Vuc3Vic2NyaWJlZEZyb20iLCBldmVudC51bnN1YnNjcmliZVN1YnNjcmliZXJzLCBzdWJzY3JpYmVyKTsKCQl9OwoKCQlleHRlbmRlZEV2ZW50LmlzVW5zdWJzY3JpYmVkRnJvbS5kb250ID0gZnVuY3Rpb24oc3Vic2NyaWJlcil7CgkJCXVuc3Vic2NyaWJlRnJvbShuYW1lKyIuaXNVbnN1YnNjcmliZWRGcm9tIiwgZXZlbnQudW5zdWJzY3JpYmVTdWJzY3JpYmVycywgc3Vic2NyaWJlcik7CgkJfTsKCgkJZXh0ZW5kZWRFdmVudC50b1N0cmluZyA9IGZ1bmN0aW9uKCl7CgkJCXJldHVybiAiW0V2ZW50ICIrbmFtZSsiXSI7CgkJfQoKCQlyZXR1cm4gZXh0ZW5kZWRFdmVudDsKCX0KCQoJZnVuY3Rpb24gZXh0ZW5kKGV2ZW50cyl7CgkJZm9yKHZhciBpIGluIGV2ZW50cyl7CgkJCWV2ZW50c1tpXSA9IGV4dGVuZEV2ZW50KGksIGV2ZW50c1tpXSk7CgkJfQoJCXJldHVybiBldmVudHM7Cgl9CgoJZnVuY3Rpb24gY3JlYXRlKGFyZzEsIGFyZzIpewoJCWlmKGFyZzIpCgkJCXJldHVybiBleHRlbmRFdmVudChhcmcxLCBhcmcyKTsKCQllbHNlCgkJCXJldHVybiBleHRlbmRFdmVudCgiYW5vbnltb3VzIGV2ZW50IiwgYXJnMSkKCX0KCglyZXR1cm4gewoJCWV4dGVuZDogZXh0ZW5kLAoJCWNyZWF0ZTogY3JlYXRlCgl9OwoJCn0pOwoKZGVmaW5lKCdvcmRudW5nL2V2ZW50cycsWydvcmRudW5nL3Byb2NsYWltV2hlbiddLCBmdW5jdGlvbihwcm9jbGFpbVdoZW4pewoJcmV0dXJuIHByb2NsYWltV2hlbi5leHRlbmQoewoJCXRoZVBhZ2VIYXNDaGFuZ2VkOiBmdW5jdGlvbihwYXRoLCBzZWdtZW50cywgdXJsKXsgfQoJfSk7Cn0pOwpkZWZpbmUoJ29yZG51bmcvc3BhJyxbCgkib3JkbnVuZy9zcGEvT3V0bGV0IiwKCSJvcmRudW5nL3NwYS93aGVuQ29udGV4dCIsCgkib3JkbnVuZy9zcGEvYXBwbHlWaWV3TW9kZWxzIiwKCSJvcmRudW5nL3NwYS9oYXNoTmF2aWdhdGlvbiIsCgkib3JkbnVuZy9zcGEvVGVtcGxhdGVzIiwKCSJvcmRudW5nL3V0aWxzIiwKCSJvcmRudW5nL2V2ZW50cyIKXSwgZnVuY3Rpb24oCglPdXRsZXQsCgl3aGVuQ29udGV4dCwKCWFwcGx5Vmlld01vZGVscywKCWhhc2hOYXZpZ2F0aW9uLAoJVGVtcGxhdGVzLAoJdXRpbHMsCglwcm9jbGFpbQopewoKCXZhciBfY29uZmlnID0gewoJCQlpbmRleDogImluZGV4IgoJCX0sCgkJX2RvY3VtZW50LAoJCV9vdXRsZXQsCgkJX29yaWdpbmFsVGl0bGUsCgkJX3RlbXBsYXRlcywKCQlfd2hlbkNvbnRleHQ7CgoJZnVuY3Rpb24gYXBwbHlDb250ZW50KGNvbnRlbnQpewoJCV9vdXRsZXQudW5sb2FkQ3VycmVudFBhZ2UoKTsKCQlfb3V0bGV0LnNldFBhZ2VDb250ZW50KGNvbnRlbnQpOwoJCV9vdXRsZXQuc2V0RG9jdW1lbnRUaXRsZShfb3V0bGV0LmdldFBhZ2VUaXRsZSgpIHx8IF9vcmlnaW5hbFRpdGxlKTsKCQlfb3V0bGV0LmV4dHJhY3RBbmRSdW5QYWdlSmF2YVNjcmlwdCgpOwoJCXJldHVybiBhcHBseVZpZXdNb2RlbHMoX291dGxldC5lbGVtZW50LCBfd2hlbkNvbnRleHQoKSk7Cgl9CgoJZnVuY3Rpb24gcGFnZUNoYW5nZWQocGF0aCwgc2VnbWVudHMpewoJCV9vdXRsZXQuaW5kaWNhdGVQYWdlSXNMb2FkaW5nKCk7CgkJX3doZW5Db250ZXh0LmRlc3Ryb3lDaGlsZENvbnRleHRzKCk7CgkJcmV0dXJuIF90ZW1wbGF0ZXMuZ2V0VGVtcGxhdGUocGF0aCkKCQkJLnRoZW4oYXBwbHlDb250ZW50KQoJCQkudGhlbihmdW5jdGlvbigpewoJCQkJX291dGxldC5wYWdlSGFzTG9hZGVkKCk7CgkJCQlwcm9jbGFpbS50aGVQYWdlSGFzQ2hhbmdlZChwYXRoLCBzZWdtZW50cywgZG9jdW1lbnQubG9jYXRpb24pCgkJCX0pOwoJfQoKCWZ1bmN0aW9uIHN0YXJ0KGNvbmZpZywgZG9jdW1lbnQpewoJCV9kb2N1bWVudCA9IGRvY3VtZW50IHx8IHdpbmRvdy5kb2N1bWVudDsKCQlfY29uZmlnID0gdXRpbHMuZXh0ZW5kKF9jb25maWcsIGNvbmZpZyk7CgkJX291dGxldCA9IG5ldyBPdXRsZXQoX2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIltkYXRhLW91dGxldF0iKSwgX2RvY3VtZW50KTsKCQlfb3JpZ2luYWxUaXRsZSA9IF9kb2N1bWVudC50aXRsZTsKCQlfd2hlbkNvbnRleHQgPSB3aGVuQ29udGV4dCgpOwoKCQlyZXR1cm4gYXBwbHlWaWV3TW9kZWxzKF9kb2N1bWVudCwgd2hlbkNvbnRleHQoKSkudGhlbihmdW5jdGlvbigpewoJCQlpZihfb3V0bGV0Lm91dGxldEV4aXN0cygpKXsKCQkJCV90ZW1wbGF0ZXMgPSBuZXcgVGVtcGxhdGVzKF9kb2N1bWVudCwgX2NvbmZpZyk7CgkJCQloYXNoTmF2aWdhdGlvbi5zdGFydChfY29uZmlnLCBwYWdlQ2hhbmdlZCwgX2RvY3VtZW50KTsKCQkJfQoJCX0pOwoJfQoKCXJldHVybiB7CgkJc3RhcnQ6IHN0YXJ0Cgl9Owp9KTsKZGVmaW5lKCdvcmRudW5nL29yZG51bmcnLFsKICAnb3JkbnVuZy9xdmMnLAogICdvcmRudW5nL3NwYScKXSwgZnVuY3Rpb24oCiAgcXZjLAogIHNwYQopewoKICAKCiAgZnVuY3Rpb24gY29uZmlnKGNvbmZpZyl7CgogICAgY29uZmlnID0gY29uZmlnIHx8IHt9OwoKICAgIHZhciBzcGFDb25maWcgPSBjb25maWcuc3BhIHx8IHt9OwogICAgdmFyIHF2Y0NvbmZpZyA9IGNvbmZpZy5xdmMgfHwge307CgogICAgcXZjLmNvbmZpZyhxdmNDb25maWcpOwoKICAgIHJldHVybiB7CiAgICAgIHN0YXJ0OiBzcGEuc3RhcnQuYmluZChudWxsLCBzcGFDb25maWcsIGRvY3VtZW50KQogICAgfQogIH0KICAKICByZXR1cm4gewogICAgY29uZmlnOiBjb25maWcKICB9OwoKfSk7CmRlZmluZSgnb3JkbnVuZycsIFsnb3JkbnVuZy9vcmRudW5nJ10sIGZ1bmN0aW9uIChtYWluKSB7IHJldHVybiBtYWluOyB9KTsKCmRlZmluZSgnb3JkbnVuZy9xdmMvY29uc3RyYWludHMvTm90RW1wdHknLFtdLCBmdW5jdGlvbigpewoJZnVuY3Rpb24gTm90RW1wdHkoYXR0cmlidXRlcyl7CgkJCgl9CgkKCU5vdEVtcHR5LnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24odmFsdWUpewoJCWlmKHZhbHVlID09IG51bGwpIHJldHVybiBmYWxzZTsKCQlpZih0eXBlb2YgdmFsdWUgPT0gInN0cmluZyIgJiYgdmFsdWUubGVuZ3RoID09IDApIHJldHVybiBmYWxzZTsKCQlyZXR1cm4gdHJ1ZTsKCX07CgkKCXJldHVybiBOb3RFbXB0eTsKfSk7CmRlZmluZSgnb3JkbnVuZy9xdmMvY29uc3RyYWludHMvUGF0dGVybicsW10sIGZ1bmN0aW9uKCl7CglmdW5jdGlvbiBQYXR0ZXJuKGF0dHJpYnV0ZXMpewkJCgoJCWF0dHJpYnV0ZXMuZmxhZ3MgPSBhdHRyaWJ1dGVzLmZsYWdzIHx8IFtdOwoJCQoJCXZhciBmbGFncyA9ICcnOwoJCWlmKGF0dHJpYnV0ZXMuZmxhZ3MuaW5kZXhPZigiQ0FTRV9JTlNFTlNJVElWRSIpID49IDApIGZsYWdzICs9ICdpJzsKCQkKCQl0aGlzLnJlZ2V4ID0gbmV3IFJlZ0V4cChhdHRyaWJ1dGVzLnJlZ2V4cCwgZmxhZ3MpOwoJfQoJCgkKCVBhdHRlcm4ucHJvdG90eXBlLmlzVmFsaWQgPSBmdW5jdGlvbih2YWx1ZSl7CgkJCgkJaWYodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGZhbHNlOwoJCQoJCXZhciByZXN1bHQgPSB0aGlzLnJlZ2V4LmV4ZWModmFsdWUpOwoJCQoJCWlmKHJlc3VsdCA9PSBudWxsKSByZXR1cm4gZmFsc2U7CgkJCgkJcmV0dXJuIHJlc3VsdFswXSA9PSB2YWx1ZTsKCX07CgkKCQoJcmV0dXJuIFBhdHRlcm47Cn0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1vcmRudW5nLmpzLm1hcA==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 21:29:02 GMT",
                    "Content-Length": "32330",
                    "Date": "Fri, 07 Nov 2014 21:29:02 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}