{
    "url": "http://localhost:9999/xingyan/octopus/src/util.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>window.location.href</b> and written to <b>the 'href' property of a DOM element</b> via the following statements:<ul><li>url = url || window.location.href;</li><li>url = fullUrl + url;</li><li>a.href = url;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/xingyan/octopus/src/util.js",
                "path": "/xingyan/octopus/src/util.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC94aW5neWFuL29jdG9wdXMvc3JjL3V0aWwuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMjM4NTMNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMjE6MTc6MDIgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDIxOjE2OjU3IEdNVA0KDQovKioKICogQGZpbGUKICogd2ViYXBw6YCa55So57uE5Lu25Z+656GA5bqT5paH5Lu2CiAqIHV0aWwgLSAgIOW3peWFt+WHveaVsOmDqOWIhgogKiBAYXV0aG9yIG91cGVuZy1mZQogKiBAdmVyc2lvbiAxLjEKICovCjsoZnVuY3Rpb24obywgdW5kZWZpbmVkKSB7CgogICAgInVzZSBzdHJpY3QiOwoKICAgIC8qKgogICAgICog6YG/5YWN5pyq5aOw5piOIG9jdG9wdXMudXRpbAogICAgICovCiAgICB2YXIgdXRpbCA9IG8udXRpbCA9IG8udXRpbCB8fCB7fTsKCiAgICAvKioKICAgICAqIEBjb25zdCBvY3RvcHVzLnV0aWwuTEVGVCB7U3RyaW5nfSAibGVmdCIKICAgICAqIEBjb25zdCBvY3RvcHVzLnV0aWwuUklHSFQge1N0cmluZ30gInJpZ2h0IgogICAgICogQGNvbnN0IG9jdG9wdXMudXRpbC5VUCB7U3RyaW5nfSAidXAiCiAgICAgKiBAY29uc3Qgb2N0b3B1cy51dGlsLkRPV04ge1N0cmluZ30gImRvd24iCiAgICAgKi8KICAgIHV0aWwuTEVGVCA9ICJsZWZ0IjsKICAgIHV0aWwuUklHSFQgPSAicmlnaHQiOwogICAgdXRpbC5VUCA9ICJ1cCI7CiAgICB1dGlsLkRPV04gPSAiZG93biI7CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5nZXRDZW50ZXIKICAgICAqIEBwYXJhbSB0b3VjaGVzIHtBcnJheX0KICAgICAqIEByZXR1cm4ge29iamVjdH0KICAgICAqIEBkZXNjIOiOt+W+l+aJgOacieinpuaRuOeCueeahOS4reW/gwogICAgICovCiAgICB1dGlsLmdldENlbnRlciA9IGZ1bmN0aW9uKHRvdWNoZXMpIHsKICAgICAgICB2YXIgdmFsdWVzWCA9IFtdLCB2YWx1ZXNZID0gW107CgogICAgICAgIGZvcih2YXIgdD0gMCxsZW49dG91Y2hlcy5sZW5ndGg7IHQ8bGVuOyB0KyspIHsKICAgICAgICAgICAgdmFsdWVzWC5wdXNoKHRvdWNoZXNbdF0ucGFnZVgpOwogICAgICAgICAgICB2YWx1ZXNZLnB1c2godG91Y2hlc1t0XS5wYWdlWSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBwYWdlWDogKChNYXRoLm1pbi5hcHBseShNYXRoLCB2YWx1ZXNYKSArIE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbHVlc1gpKSAvIDIpLAogICAgICAgICAgICBwYWdlWTogKChNYXRoLm1pbi5hcHBseShNYXRoLCB2YWx1ZXNZKSArIE1hdGgubWF4LmFwcGx5KE1hdGgsIHZhbHVlc1kpKSAvIDIpCiAgICAgICAgfTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5nZXRWZWxvY2l0eQogICAgICogQGRlc2Mg6I635b6X5Lik54K56Ze0556s56e76YCf5bqmCiAgICAgKiBAcGFyYW0gZGVsdGFfdGltZSB7TnVtYmVyfQogICAgICogQHBhcmFtIGRlbHRhX3gge051bWJlcn0KICAgICAqIEBwYXJhbSBkZWx0YV95IHtOdW1iZXJ9CiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IHjkuLrmqKrlkJHpgJ/luqYgeeS4uue6teWQkemAn+W6pgogICAgICovCiAgICB1dGlsLmdldFZlbG9jaXR5ID0gZnVuY3Rpb24oZGVsdGFfdGltZSwgZGVsdGFfeCwgZGVsdGFfeSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHg6IE1hdGguYWJzKGRlbHRhX3ggLyBkZWx0YV90aW1lKSB8fCAwLAogICAgICAgICAgICB5OiBNYXRoLmFicyhkZWx0YV95IC8gZGVsdGFfdGltZSkgfHwgMAogICAgICAgIH07CgogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmdldEFuZ2xlCiAgICAgKiBAZGVzYyDojrflvpfkuKTngrnpl7Top5LluqYKICAgICAqIEBwYXJhbSB0b3VjaDEge09iamVjdH0KICAgICAqIEBwYXJhbSB0b3VjaDIge09iamVjdH0KICAgICAqIEByZXR1cm4ge051bWJlcn0KICAgICAqLwogICAgdXRpbC5nZXRBbmdsZSA9IGZ1bmN0aW9uKHRvdWNoMSwgdG91Y2gyKSB7CiAgICAgICAgdmFyIHkgPSB0b3VjaDIucGFnZVkgLSB0b3VjaDEucGFnZVksCiAgICAgICAgICAgIHggPSB0b3VjaDIucGFnZVggLSB0b3VjaDEucGFnZVg7CiAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIoeSwgeCkgKiAxODAgLyBNYXRoLlBJOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmdldERpcmVjdGlvbgogICAgICogQGRlc2Mg6I635b6X6Kem56Kw5ruR5Yqo5pa55ZCRCiAgICAgKiBAcGFyYW0gdG91Y2gxIHtPYmplY3R9CiAgICAgKiBAcGFyYW0gdG91Y2gyIHtPYmplY3R9CiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9CiAgICAgKi8KICAgIHV0aWwuZ2V0RGlyZWN0aW9uID0gZnVuY3Rpb24odG91Y2gxLCB0b3VjaDIpIHsKICAgICAgICB2YXIgeCA9IE1hdGguYWJzKHRvdWNoMS5wYWdlWCAtIHRvdWNoMi5wYWdlWCksCiAgICAgICAgICAgIHkgPSBNYXRoLmFicyh0b3VjaDEucGFnZVkgLSB0b3VjaDIucGFnZVkpOwoKICAgICAgICBpZih4ID49IHkpIHsKICAgICAgICAgICAgcmV0dXJuIHRvdWNoMS5wYWdlWCAtIHRvdWNoMi5wYWdlWCA+IDAgPyB1dGlsLkxFRlQgOiB1dGlsLlJJR0hUOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHRvdWNoMS5wYWdlWSAtIHRvdWNoMi5wYWdlWSA+IDAgPyB1dGlsLlVQIDogdXRpbC5ET1dOOwogICAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5nZXREaXN0YW5jZQogICAgICogQGRlc2Mg6I635b6X5Lik54K56Ze06Led56a7CiAgICAgKiBAcGFyYW0gdG91Y2gxIHtPYmplY3R9CiAgICAgKiBAcGFyYW0gdG91Y2gyIHtPYmplY3R9CiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9CiAgICAgKi8KICAgIHV0aWwuZ2V0RGlzdGFuY2UgPSBmdW5jdGlvbih0b3VjaDEsIHRvdWNoMikgewogICAgICAgIHZhciB4ID0gdG91Y2gyLnBhZ2VYIC0gdG91Y2gxLnBhZ2VYLAogICAgICAgICAgICB5ID0gdG91Y2gyLnBhZ2VZIC0gdG91Y2gxLnBhZ2VZOwogICAgICAgIHJldHVybiBNYXRoLnNxcnQoKHggKiB4KSArICh5ICogeSkpOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmdldFNjYWxlCiAgICAgKiBAZGVzYyDojrflvpfkuKTop6bmkbjngrnmu5HliqjlkI7lvpfliLDnmoTkuKTop6bmkbjngrnkuYvkuo7kuYvliY3nmoTmlL7lpKflgI3mlbAKICAgICAqIEBwYXJhbSBzdGFydCB7QXJyYXl9CiAgICAgKiBAcGFyYW0gZW5kIHtBcnJheX0KICAgICAqIEByZXR1cm4ge051bWJlcn0KICAgICAqLwogICAgdXRpbC5nZXRTY2FsZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHsKICAgICAgICBpZihzdGFydC5sZW5ndGggPj0gMiAmJiBlbmQubGVuZ3RoID49IDIpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGlzdGFuY2UoZW5kWzBdLCBlbmRbMV0pIC8KICAgICAgICAgICAgICAgIHRoaXMuZ2V0RGlzdGFuY2Uoc3RhcnRbMF0sIHN0YXJ0WzFdKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDE7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuZ2V0Um90YXRpb24KICAgICAqIEBkZXNjIOiOt+W+l+S4pOinpuaRuOeCuea7keWKqOWQjuW+l+WIsOeahOS4pOinpuaRuOeCueS5i+S6juS5i+WJjeeahOaXi+i9rOW6puaVsAogICAgICogQHBhcmFtIHN0YXJ0IHtBcnJheX0KICAgICAqIEBwYXJhbSBlbmQge0FycmF5fQogICAgICogQHJldHVybiB7TnVtYmVyfQogICAgICovCiAgICB1dGlsLmdldFJvdGF0aW9uID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkgewogICAgICAgIGlmKHN0YXJ0Lmxlbmd0aCA+PSAyICYmIGVuZC5sZW5ndGggPj0gMikgewogICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBbmdsZShlbmRbMV0sIGVuZFswXSkgLQogICAgICAgICAgICAgICAgdGhpcy5nZXRBbmdsZShzdGFydFsxXSwgc3RhcnRbMF0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gMDsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5lbmNvZGVIdG1sCiAgICAgKiBAZGVzYyDlr7nlrZfnrKbkuLLkuK3nmoTnibnmrorlrZfnrKbov5vooYxodG1s57yW56CBCiAgICAgKiBAcGFyYW0gc3RyIHtTdHJpbmd9CiAgICAgKi8KICAgIHV0aWwuZW5jb2RlSHRtbCA9IGZ1bmN0aW9uKHN0cikgewogICAgICAgIHJldHVybiBTdHJpbmcoc3RyKQogICAgICAgICAgICAucmVwbGFjZSgvJi9nLCAiJmFtcDsiKQogICAgICAgICAgICAucmVwbGFjZSgvPC9nLCAiJmx0OyIpCiAgICAgICAgICAgIC5yZXBsYWNlKC8+L2csICImZ3Q7IikKICAgICAgICAgICAgLnJlcGxhY2UoLyIvZywgIiZxdW90OyIpCiAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csICImIzM5OyIpOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmRlY29kZUh0bWwKICAgICAqIEBkZXNjIOWvueWtl+espuS4suS4reeahGh0bWzov5vooYznvJbnoIEKICAgICAqIEBwYXJhbSBzdHIge1N0cmluZ30KICAgICAqLwogICAgdXRpbC5odG1sRGVjb2RlRGljdCA9IHsicXVvdCI6ICciJywgImx0IjogIjwiLCAiZ3QiOiAiPiIsICJhbXAiOiAiJiIsICIjMzkiOiAiJyJ9OwogICAgdXRpbC5kZWNvZGVIdG1sID0gZnVuY3Rpb24oc3RyKSB7CiAgICAgICAgcmV0dXJuIFN0cmluZyhzdHIpLnJlcGxhY2UoLyYocXVvdHxsdHxndHxhbXB8IzM5KTsvaWcsIGZ1bmN0aW9uKGFsbCwga2V5KSB7CiAgICAgICAgICAgIHJldHVybiB1dGlsLmh0bWxEZWNvZGVEaWN0W2tleV07CiAgICAgICAgfSkucmVwbGFjZSgvJiN1KFthLWZcZF17NH0pOy9pZywgZnVuY3Rpb24oYWxsLCBoZXgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KCIweCIgKyBoZXgpKTsKICAgICAgICAgICAgfSkucmVwbGFjZSgvJiMoXGQrKTsvaWcsIGZ1bmN0aW9uKGFsbCwgbnVtYmVyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgrbnVtYmVyKTsKICAgICAgICAgICAgfSk7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwubG9hZEltYWdlCiAgICAgKiBAZGVzYyDliqDovb3lm77niYfmlrnms5UKICAgICAqIEBwYXJhbSB1cmwge1N0cmluZ30g5Zu+54mHdXJsCiAgICAgKiBAcGFyYW0gcmVhZHkge0Z1bmN0aW9ufSDmraTml7blm77niYfmsqHmnInliqDovb3lrowg5L2G5piv5a696auY5bey55+lCiAgICAgKiBAcGFyYW0gbG9hZCB7RnVuY3Rpb259IOWbvueJh29ubG9hZOeahGNhbGxiYWNrCiAgICAgKiBAcGFyYW0gZXJyb3Ige0Z1bmN0aW9ufSDlm77niYfliqDovb3lpLHotKXnmoRjYWxsYmFjawogICAgICovCiAgICB1dGlsLmxvYWRJbWFnZSA9IChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgbGlzdCA9IFtdLAogICAgICAgICAgICBpbnRlcnZhbElkID0gbnVsbCwKICAgICAgICAvL+eUqOadpeaJp+ihjOmYn+WIlwogICAgICAgICAgICB0aWNrID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7CiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBsaXN0W2ldLmVuZCA/IGxpc3Quc3BsaWNlKGktLSwgMSkgOiBsaXN0W2ldKCk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgIWxpc3QubGVuZ3RoICYmIHN0b3AoKTsKICAgICAgICAgICAgfSwKICAgICAgICAvLyDlgZzmraLmiYDmnInlrprml7blmajpmJ/liJcKICAgICAgICAgICAgc3RvcCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7CiAgICAgICAgICAgICAgICBpbnRlcnZhbElkID0gbnVsbDsKICAgICAgICAgICAgfTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHVybCwgcmVhZHksIGxvYWQsIGVycm9yKSB7CiAgICAgICAgICAgIHZhciBvbnJlYWR5LCB3aWR0aCwgaGVpZ2h0LCBuZXdXaWR0aCwgbmV3SGVpZ2h0LAogICAgICAgICAgICAgICAgaW1nID0gbmV3IEltYWdlKCk7CiAgICAgICAgICAgIGltZy5zcmMgPSB1cmw7CiAgICAgICAgICAgIC8vIOWmguaenOWbvueJh+iiq+e8k+WtmO+8jOWImeebtOaOpei/lOWbnue8k+WtmOaVsOaNrgogICAgICAgICAgICBpZiAoaW1nLmNvbXBsZXRlKSB7CiAgICAgICAgICAgICAgICByZWFkeS5jYWxsKGltZyk7CiAgICAgICAgICAgICAgICBsb2FkICYmIGxvYWQuY2FsbChpbWcpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9OwogICAgICAgICAgICB3aWR0aCA9IGltZy53aWR0aDsKICAgICAgICAgICAgaGVpZ2h0ID0gaW1nLmhlaWdodDsKICAgICAgICAgICAgLy8g5Yqg6L296ZSZ6K+v5ZCO55qE5LqL5Lu2CiAgICAgICAgICAgIGltZy5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgZXJyb3IgJiYgZXJyb3IuY2FsbChpbWcpOwogICAgICAgICAgICAgICAgb25yZWFkeS5lbmQgPSB0cnVlOwogICAgICAgICAgICAgICAgaW1nID0gaW1nLm9ubG9hZCA9IGltZy5vbmVycm9yID0gbnVsbDsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgLy8g5Zu+54mH5bC65a+45bCx57uqCiAgICAgICAgICAgIG9ucmVhZHkgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBuZXdXaWR0aCA9IGltZy53aWR0aDsKICAgICAgICAgICAgICAgIG5ld0hlaWdodCA9IGltZy5oZWlnaHQ7CiAgICAgICAgICAgICAgICBpZiAobmV3V2lkdGggIT09IHdpZHRoIHx8IG5ld0hlaWdodCAhPT0gaGVpZ2h0IHx8IG5ld1dpZHRoICogbmV3SGVpZ2h0ID4gMTAyNCkgewogICAgICAgICAgICAgICAgICAgIHJlYWR5LmNhbGwoaW1nKTsKICAgICAgICAgICAgICAgICAgICBvbnJlYWR5LmVuZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9OwogICAgICAgICAgICBvbnJlYWR5KCk7CiAgICAgICAgICAgIC8vIOWujOWFqOWKoOi9veWujOavleeahOS6i+S7tgogICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgLy8gb25sb2Fk5Zyo5a6a5pe25Zmo5pe26Ze05beu6IyD5Zu05YaF5Y+v6IO95q+Ub25yZWFkeeW/qwogICAgICAgICAgICAgICAgLy8g6L+Z6YeM6L+b6KGM5qOA5p+l5bm25L+d6K+Bb25yZWFkeeS8mOWFiOaJp+ihjAogICAgICAgICAgICAgICAgIW9ucmVhZHkuZW5kICYmIG9ucmVhZHkoKTsKICAgICAgICAgICAgICAgIGxvYWQgJiYgbG9hZC5jYWxsKGltZyk7CiAgICAgICAgICAgICAgICAvLyBJRSBnaWbliqjnlLvkvJrlvqrnjq/miafooYxvbmxvYWTvvIznva7nqbpvbmxvYWTljbPlj68KICAgICAgICAgICAgICAgIGltZyA9IGltZy5vbmxvYWQgPSBpbWcub25lcnJvciA9IG51bGw7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIC8vIOWKoOWFpemYn+WIl+S4reWumuacn+aJp+ihjAogICAgICAgICAgICBpZighb25yZWFkeS5lbmQpIHsKICAgICAgICAgICAgICAgIGxpc3QucHVzaChvbnJlYWR5KTsKICAgICAgICAgICAgICAgIC8vIOaXoOiuuuS9leaXtuWPquWFgeiuuOWHuueOsOS4gOS4quWumuaXtuWZqO+8jOWHj+Wwkea1j+iniOWZqOaAp+iDveaNn+iAlwogICAgICAgICAgICAgICAgaWYgKGludGVydmFsSWQgPT09IG51bGwpIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbCh0aWNrLCA0MCk7CiAgICAgICAgICAgIH07CiAgICAgICAgfTsKICAgIH0pKCk7CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5lbXB0eQogICAgICogQGRlc2Mg56m65Ye95pWwCiAgICAgKi8KICAgIHV0aWwuZW1wdHkgPSBmdW5jdGlvbigpIHt9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuYmluZAogICAgICogQGRlc2Mg5o2i5L2c55So5Z+fCiAgICAgKiBAcGFyYW0gZnVuYyB7RnVuY3Rpb259CiAgICAgKiBAcGFyYW0gb2JqZWN0IHtPYmplY3R9CiAgICAgKi8KICAgIHV0aWwuYmluZCA9IGZ1bmN0aW9uKGZ1bmMsIG9iamVjdCkgewogICAgICAgIC8vIGNyZWF0ZSBhIHJlZmVyZW5jZSB0byBhbGwgYXJndW1lbnRzIHBhc3QgdGhlIHNlY29uZCBvbmUKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMsIFsyXSk7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAvLyBQdXNoIG9uIGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBmcm9tIHRoZSBhY3R1YWwgZnVuY3Rpb24gY2FsbC4KICAgICAgICAgICAgLy8gVGhlc2Ugd2lsbCBjb21lIGFmdGVyIHRob3NlIHNlbnQgdG8gdGhlIGJpbmQgY2FsbC4KICAgICAgICAgICAgdmFyIG5ld0FyZ3MgPSBhcmdzLmNvbmNhdCgKICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMsIFswXSkKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBuZXdBcmdzKTsKICAgICAgICB9OwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmJpbmRBc0V2ZW50TGlzdGVuZXIKICAgICAqIEBwYXJhbSBmdW5jIHtGdW5jdGlvbn0g5L2c5Li65LqL5Lu255uR5ZCs55qE5Ye95pWwCiAgICAgKiBAcGFyYW0gb2JqZWN0IHtPYmplY3R9IOS9nOeUqOWfnwogICAgICovCiAgICB1dGlsLmJpbmRBc0V2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihmdW5jLCBvYmplY3QpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChvYmplY3QsIGV2ZW50IHx8IHdpbmRvdy5ldmVudCk7CiAgICAgICAgfTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5pc05vZGUKICAgICAqIEBkZXNjIOWIpOaWreWvueixoeaYr+WQpuaYr+iKgueCuQogICAgICogQHBhcmFtIG8ge09iamVjdH0KICAgICAqIEByZXR1cm4ge0Jvb2xlYW59CiAgICAgKi8KICAgIHV0aWwuaXNOb2RlID0gZnVuY3Rpb24obykgewogICAgICAgIHJldHVybiAhIShvICYmIG8ubm9kZVR5cGUgPT09IDEpOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmlzT2JqZWN0CiAgICAgKiBAZGVzYyDliKTmlq3lr7nosaHmmK/lkKbmmK/lr7nosaEKICAgICAqIEByZXR1cm4ge0Jvb2xlYW59CiAgICAgKi8KICAgIHV0aWwuaXNPYmplY3QgPSBmdW5jdGlvbiAoc291cmNlKSB7CiAgICAgICAgcmV0dXJuICdmdW5jdGlvbicgPT0gdHlwZW9mIHNvdXJjZSB8fCAhIShzb3VyY2UgJiYgJ29iamVjdCcgPT0gdHlwZW9mIHNvdXJjZSk7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuaXNTdHJpbmcKICAgICAqIEBkZXNjIOWIpOaWreWvueixoeaYr+WQpuaYr+Wtl+espuS4sgogICAgICogQHJldHVybiB7Qm9vbGVhbn0KICAgICAqLwogICAgdXRpbC5pc1N0cmluZyA9IGZ1bmN0aW9uIChzb3VyY2UpIHsKICAgICAgICByZXR1cm4gJ1tvYmplY3QgU3RyaW5nXScgPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHNvdXJjZSk7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuaXNBcnJheQogICAgICogQGRlc2Mg5Yik5pat5a+56LGh5piv5ZCm5piv5pWw57uECiAgICAgKiBAcmV0dXJuIHtCb29sZWFufQogICAgICovCiAgICB1dGlsLmlzQXJyYXkgPSBmdW5jdGlvbihzb3VyY2UpIHsKICAgICAgICByZXR1cm4gKCdbb2JqZWN0IEFycmF5XScgPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHNvdXJjZSkpOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmlzTnVtZXJpYwogICAgICogQGRlc2Mg5Yik5pat5a+56LGh5piv5ZCm5piv5pWw5a2XCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgICAqLwogICAgdXRpbC5pc051bWVyaWMgPSBmdW5jdGlvbihvYmopIHsKICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQob2JqKSkgJiYgaXNGaW5pdGUob2JqKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5pc1BsYWluCiAgICAgKiBAZGVzYyDliKTmlq3mmK/lkKbmmK/mma7pgJrlr7nosaEg6Z2eZnVuY3Rpb24KICAgICAqLwogICAgdXRpbC5pc1BsYWluICA9IGZ1bmN0aW9uKG9iail7CiAgICAgICAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSwKICAgICAgICAgICAga2V5OwogICAgICAgIGlmICggIW9iaiB8fAogICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSAhPT0gIltvYmplY3QgT2JqZWN0XSIgfHwKICAgICAgICAgICAgISgnaXNQcm90b3R5cGVPZicgaW4gb2JqKQogICAgICAgICAgICApIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoIG9iai5jb25zdHJ1Y3RvciAmJgogICAgICAgICAgICAhaGFzT3duUHJvcGVydHkuY2FsbChvYmosICJjb25zdHJ1Y3RvciIpICYmCiAgICAgICAgICAgICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICJpc1Byb3RvdHlwZU9mIikgKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgZm9yICgga2V5IGluIG9iaiApIHt9CiAgICAgICAgcmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkIHx8IGhhc093blByb3BlcnR5LmNhbGwoIG9iaiwga2V5ICk7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuaXNFbXB0eQogICAgICogQGRlc2Mg5Yik5pat5Lyg5YWl55qE5Y+C5pWw5piv5ZCm5Li656m677yMCiAgICAgKiAgICAgICDljIXmi6x1bmRlZmluZWQsIG51bGwsIGZhbHNlLCBudW1iZXIgMCwKICAgICAqICAgICAgIGVtcHR5IHN0cmluZywgc3RyaW5nICIwIiwge30gYW5kIFtdCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0KICAgICAqLwogICAgdXRpbC5pc0VtcHR5ID0gZnVuY3Rpb24obWl4ZWRfdmFyKSB7CiAgICAgICAgdmFyIHVuZGVmLCBrZXksIGksIGxlbjsKICAgICAgICB2YXIgZW1wdHlWYWx1ZXMgPSBbdW5kZWYsIG51bGwsIGZhbHNlLCAwLCAiIiwgIjAiXTsKCiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gZW1wdHlWYWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgaWYgKG1peGVkX3ZhciA9PT0gZW1wdHlWYWx1ZXNbaV0pIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAodHlwZW9mIG1peGVkX3ZhciA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgZm9yIChrZXkgaW4gbWl4ZWRfdmFyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuY2xvbmUKICAgICAqIEBkZXNjIOa3seW6puaLt+i0neS4gOS4quWvueixoQogICAgICogQHJldHVybiDmi7fotJ3lkI7nmoTlr7nosaEKICAgICAqLwogICAgdXRpbC5jbG9uZSA9IGZ1bmN0aW9uKHNvdXJjZSkgewogICAgICAgIHZhciByZXN1bHQgPSBzb3VyY2UsIGksIGxlbjsKICAgICAgICBpZiAoIXNvdXJjZQogICAgICAgICAgICB8fCBzb3VyY2UgaW5zdGFuY2VvZiBOdW1iZXIKICAgICAgICAgICAgfHwgc291cmNlIGluc3RhbmNlb2YgU3RyaW5nCiAgICAgICAgICAgIHx8IHNvdXJjZSBpbnN0YW5jZW9mIEJvb2xlYW4pIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9IGVsc2UgaWYodXRpbC5pc05vZGUoc291cmNlKSkgewogICAgICAgICAgICByZXR1cm4gc291cmNlLmNsb25lTm9kZSh0cnVlKTsKICAgICAgICB9IGVsc2UgaWYgKHV0aWwuaXNBcnJheShzb3VyY2UpKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IFtdOwogICAgICAgICAgICB2YXIgcmVzdWx0TGVuID0gMCwKICAgICAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICAgICAgbGVuID0gc291cmNlLmxlbmd0aDsKICAgICAgICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdExlbisrXSA9IHV0aWwuY2xvbmUoc291cmNlW2ldKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAodXRpbC5pc1BsYWluKHNvdXJjZSkpIHsKICAgICAgICAgICAgcmVzdWx0ID0ge307CiAgICAgICAgICAgIGZvciAoaSBpbiBzb3VyY2UpIHsKICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkoaSkpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSB1dGlsLmNsb25lKHNvdXJjZVtpXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5lYWNoCiAgICAgKiBAcGFyYW0gc291cmNlIHtBcnJheSB8IE9iamVjdH0KICAgICAqIEBwYXJhbSBjYWxsYmFjayB7RnVuY3Rpb259CiAgICAgKiBAcmV0dXJucyB7Kn0KICAgICAqIEBkZXNjIOmBjeWOhuaVsOe7hOaIluWvueixoQogICAgICovCiAgICB1dGlsLmVhY2ggPSBmdW5jdGlvbihzb3VyY2UsIGNhbGxiYWNrKSB7CiAgICAgICAgaWYodXRpbC5pc0FycmF5KHNvdXJjZSkpIHsKICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZvckVhY2ggPyBzb3VyY2UuZm9yRWFjaChjYWxsYmFjaykgOiBmdW5jdGlvbihhciwgZnVuYykgewogICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFyLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICBpID0gMDsKICAgICAgICAgICAgICAgIGZvcig7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmNhbGwodGhpcywgYXJbaV0sIGkpOwogICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdCA9PT0gdHJ1ZSkgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0oc291cmNlLCBjYWxsYmFjayk7CiAgICAgICAgfQogICAgICAgIGlmKHV0aWwuaXNPYmplY3Qoc291cmNlKSkgewogICAgICAgICAgICBmb3IodmFyIGsgaW4gc291cmNlKSB7CiAgICAgICAgICAgICAgICBpZihzb3VyY2UuaGFzT3duUHJvcGVydHkoaykpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzb3VyY2Vba10sIGspOwogICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdCA9PT0gdHJ1ZSkgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmZvcm1hdAogICAgICogQHBhcmFtIHN0ciB7U3RyaW5nfSDlvoXovazmjaLnmoTlrZfnrKbkuLIKICAgICAqIEBwYXJhbSBkYXRhIHt9IOaVsOaNrgogICAgICogQHJldHVybnMge1N0cmluZ30KICAgICAqLwogICAgdXRpbC5mb3JtYXQgPSBmdW5jdGlvbihzdHIsIGRhdGEpIHsKICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLygjKVx7KC4qPylcfS9nLCBmdW5jdGlvbihhbGwsIGZsYWcsIHBhcmFtKSB7CiAgICAgICAgICAgIHJldHVybiBkYXRhICYmIHR5cGVvZiBkYXRhW3BhcmFtXSAhPSAidW5kZWZpbmVkIiA/IGRhdGFbcGFyYW1dIDogIiI7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwuYXBwbHlEZWZhdWx0cwogICAgICogQGRlc2Mg5bCG5LiA5Liq5a+56LGh6YeM5rKh5pyJ55qE5Y+C5pWw5aSN5Yi257uZ5Y+m5LiA5Liq5a+56LGhIOS4jmV4dGVuZOeahOWMuuWIq+WcqOS6jiDlpoLmnpzkuI3kvJrlpI3liLblt7LlrZjlnKjlsZ7mgKcKICAgICAqIEBwYXJhbSB0byB7T2JqZWN0fQogICAgICogQHBhcmFtIGZyb20ge09iamVjdH0KICAgICAqLwogICAgdXRpbC5hcHBseURlZmF1bHRzID0gZnVuY3Rpb24odG8sIGZyb20pIHsKICAgICAgICB0byA9IHRvIHx8IHt9OwogICAgICAgIHZhciBmcm9tSXNFdnQgPSB0eXBlb2Ygd2luZG93LkV2ZW50ID09ICJmdW5jdGlvbiIKICAgICAgICAgICAgJiYgZnJvbSBpbnN0YW5jZW9mIHdpbmRvdy5FdmVudDsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gZnJvbSkgewogICAgICAgICAgICBpZih0b1trZXldID09PSB1bmRlZmluZWQgfHwKICAgICAgICAgICAgICAgICghZnJvbUlzRXZ0ICYmIGZyb20uaGFzT3duUHJvcGVydHkKICAgICAgICAgICAgICAgICAgICAmJiBmcm9tLmhhc093blByb3BlcnR5KGtleSkgJiYgIXRvLmhhc093blByb3BlcnR5KGtleSkpKSB7CiAgICAgICAgICAgICAgICB0b1trZXldID0gZnJvbVtrZXldOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmKCFmcm9tSXNFdnQgJiYgZnJvbSAmJiBmcm9tLmhhc093blByb3BlcnR5CiAgICAgICAgICAgICYmIGZyb20uaGFzT3duUHJvcGVydHkoJ3RvU3RyaW5nJykgJiYgIXRvLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpKSB7CiAgICAgICAgICAgIHRvLnRvU3RyaW5nID0gZnJvbS50b1N0cmluZzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRvOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmFwcGx5QWRkCiAgICAgKiBAZGVzYyDlsIbkuIDkuKrlr7nosaHph4znmoTlj4LmlbDmt7Hluqbmi7fotJ3nu5nlj6bkuIDkuKrlr7nosaEg5aaC5p6c5Y+C5pWw5bey5a2Y5ZyoIOWImeimhuebliDlpoLmnpzkuI3lrZjlnKgg5YiZ6L+95YqgCiAgICAgKiBAcGFyYW0gdG8ge09iamVjdH0KICAgICAqIEBwYXJhbSBmcm9tICB7T2JqZWN0fQogICAgICovCiAgICB1dGlsLmFwcGx5QWRkID0gZnVuY3Rpb24odG8sIGZyb20pIHsKICAgICAgICB0byA9IHRvIHx8IHt9OwogICAgICAgIHZhciBmcm9tSXNFdnQgPSB0eXBlb2Ygd2luZG93LkV2ZW50ID09ICJmdW5jdGlvbiIKICAgICAgICAgICAgJiYgZnJvbSBpbnN0YW5jZW9mIHdpbmRvdy5FdmVudDsKICAgICAgICBmb3IodmFyIGsgaW4gZnJvbSkgewogICAgICAgICAgICBpZih1dGlsLmlzT2JqZWN0KHRvW2tdKSAmJiB1dGlsLmlzT2JqZWN0KGZyb21ba10pKSB7CiAgICAgICAgICAgICAgICB0b1trXSA9IHV0aWwuYXBwbHlBZGQodG9ba10sIGZyb21ba10pOwogICAgICAgICAgICB9IGVsc2UgaWYoZnJvbVtrXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICB0b1trXSA9IGZyb21ba10KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZighZnJvbUlzRXZ0ICYmIGZyb20gJiYgZnJvbS5oYXNPd25Qcm9wZXJ0eQogICAgICAgICAgICAmJiBmcm9tLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpICYmICF0by5oYXNPd25Qcm9wZXJ0eSgndG9TdHJpbmcnKSkgewogICAgICAgICAgICB0by50b1N0cmluZyA9IGZyb20udG9TdHJpbmc7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0bzsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC51cmxBcHBlbmQKICAgICAqIEBkZXNjIOWwhuaMh+WumuWtl+espuS4sumHjOeahOWGheWuueaLvOi/m3VybAogICAgICogQHBhcmFtIHVybCB7U3RyaW5nfQogICAgICogQHBhcmFtIHBhcmFtU3RyIHtTdHJpbmd9CiAgICAgKiBAZXhhbXBsZQogICAgICogdXJsID0gImh0dHA6Ly93d3cuZ29vZ2xlLmNvbSI7CiAgICAgKiBvY3RvcHVzLnV0aWwudXJsQXBwZW5kKHVybCwgImE9MSZiPTIiKTsKICAgICAqIHJldHVybiAiaHR0cDovL3d3dy5nb29nbGUuY29tP2E9MSZiPTIiCiAgICAgKi8KICAgIHV0aWwudXJsQXBwZW5kID0gZnVuY3Rpb24odXJsLCBwYXJhbVN0cikgewogICAgICAgIHZhciBuZXdVcmwgPSB1cmw7CiAgICAgICAgaWYocGFyYW1TdHIpIHsKICAgICAgICAgICAgdmFyIHBhcnRzID0gKHVybCArICIgIikuc3BsaXQoL1s/Jl0vKTsKICAgICAgICAgICAgbmV3VXJsICs9IChwYXJ0cy5wb3AoKSA9PT0gIiAiID8KICAgICAgICAgICAgICAgIHBhcmFtU3RyIDoKICAgICAgICAgICAgICAgIHBhcnRzLmxlbmd0aCA/ICImIiArIHBhcmFtU3RyIDogIj8iICsgcGFyYW1TdHIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3VXJsOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmdldFBhcmFtZXRlclN0cmluZwogICAgICogQGRlc2Mg5LuO5oyH5a6a5ZCN5YC85a+56YeM5pCe5Ye65p2l5a2X56ym5Liy5b2i5byPCiAgICAgKiBAcGFyYW0gcGFyYW1zIHtPYmplY3R9CiAgICAgKiBAZXhhbXBsZQogICAgICogcGFyYW0gPSB7IGE6IDEsIGI6IDIgfQogICAgICogb2N0b3B1cy51dGlsLmdldFBhcmFtZXRlclN0cmluZyhwYXJhbSkKICAgICAqIHJldHVybiAiYT0xJmI9MiIKICAgICAqLwogICAgdXRpbC5nZXRQYXJhbWV0ZXJTdHJpbmcgPSBmdW5jdGlvbihwYXJhbXMpIHsKICAgICAgICB2YXIgcGFyYW1zQXJyYXkgPSBbXTsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKSB7CiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHBhcmFtc1trZXldOwogICAgICAgICAgICBpZiAoKHZhbHVlICE9IG51bGwpICYmICh0eXBlb2YgdmFsdWUgIT0gJ2Z1bmN0aW9uJykpIHsKICAgICAgICAgICAgICAgIHZhciBlbmNvZGVkVmFsdWU7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHZhbHVlLmNvbnN0cnVjdG9yID09IEFycmF5KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGVuY29kZWRJdGVtQXJyYXkgPSBbXTsKICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpdGVtSW5kZXg9MCwgbGVuPXZhbHVlLmxlbmd0aDsgaXRlbUluZGV4PGxlbjsgaXRlbUluZGV4KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IHZhbHVlW2l0ZW1JbmRleF07CiAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZWRJdGVtQXJyYXkucHVzaChlbmNvZGVVUklDb21wb25lbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaXRlbSA9PT0gbnVsbCB8fCBpdGVtID09PSB1bmRlZmluZWQpID8gIiIgOiBpdGVtKQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbmNvZGVkVmFsdWUgPSBlbmNvZGVkSXRlbUFycmF5LmpvaW4oIiwiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVuY29kZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJhbXNBcnJheS5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgIj0iICsgZW5jb2RlZFZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcGFyYW1zQXJyYXkuam9pbigiJiIpOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmdldFBhcmFtZXRlcnMKICAgICAqIEBkZXNjIOS7jnVybOS4rT/lkI7nmoTlrZfnrKbkuLLku6Xlr7nosaHlvaLlvI/ov5Tlm54KICAgICAqIEBwYXJhbSB1cmwge1N0cmluZ30KICAgICAqIEBleGFtcGxlCiAgICAgKiB1cmwgPSAiaHR0cDovL3d3dy5iYWlkdS5jb20/YT0xJmI9MiIKICAgICAqIG9jdG9wdXMudXRpbC5nZXRQYXJhbWV0ZXJzKHVybCk7CiAgICAgKiByZXR1cm4geyBhOiAxLCBiOiAyIH0KICAgICAqLwogICAgdXRpbC5nZXRQYXJhbWV0ZXJzID0gZnVuY3Rpb24odXJsKSB7CiAgICAgICAgdXJsID0gKHVybCA9PT0gbnVsbCB8fCB1cmwgPT09IHVuZGVmaW5lZCkgPyB3aW5kb3cubG9jYXRpb24uaHJlZiA6IHVybDsKICAgICAgICB2YXIgcGFyYW1zU3RyaW5nID0gIiI7CiAgICAgICAgaWYodXJsLmluZGV4T2YoIj8iKSAhPSAtMSkgewogICAgICAgICAgICB2YXIgc3RhcnQgPSB1cmwuaW5kZXhPZignPycpICsgMTsKICAgICAgICAgICAgdmFyIGVuZCA9IHVybC5pbmRleE9mKCIjIikgIT0gLTEgPwogICAgICAgICAgICAgICAgdXJsLmluZGV4T2YoJyMnKSA6IHVybC5sZW5ndGg7CiAgICAgICAgICAgIHBhcmFtc1N0cmluZyA9IHVybC5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7CiAgICAgICAgfQogICAgICAgIHZhciBwYXJhbWV0ZXJzID0ge307CiAgICAgICAgdmFyIHBhaXJzID0gcGFyYW1zU3RyaW5nLnNwbGl0KC9bJjtdLyksCiAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICBsZW4gPSBwYWlycy5sZW5ndGg7CiAgICAgICAgZm9yKCA7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBwYWlyc1tpXS5zcGxpdCgnPScpOwogICAgICAgICAgICBpZihrZXlWYWx1ZVswXSkgewogICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleVZhbHVlWzBdOwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5KTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgIGtleSA9IHVuZXNjYXBlKGtleSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAoa2V5VmFsdWVbMV0gfHwgJycpLnJlcGxhY2UoL1wrL2csICIgIik7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdW5lc2NhcGUodmFsdWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgiLCIpOwogICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVswXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcmFtZXRlcnNba2V5XSA9IHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXJhbWV0ZXJzOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLmNyZWF0ZVVybE9iamVjdAogICAgICogQGRlc2Mg5Yib5bu65LiA5LiqdXJs5a+56LGh55qE5ZCN5YC85a+5CiAgICAgKiDph4zpnaLmjInnhad3M2MgdXJs5qCH5YeG5o+Q5L6b5LqG5q+P5LiA5Liq55qE5YC8CiAgICAgKiBAZXhhbXBsZQogICAgICogdXJsID0gImh0dHA6Ly93d3cuZ29vZ2xlLmNvbT9hPTEmYj0yI2FiYz0xIjsKICAgICAqIG9jdG9wdXMudXRpbC5jcmVhdGVVcmxPYmplY3QodXJsKTsKICAgICAqIHJldHVybgogICAgICogewogICAgICogIGFyZ3M6IE9iamVjdCwKICAgICAqICBhOiAiMSIsCiAgICAgKiAgYjogIjIiLAogICAgICogIGhhc2g6ICIjYWJjPTEiLAogICAgICogIGhvc3Q6ICJ3d3cuZ29vZ2xlLmNvbSIsCiAgICAgKiAgcGF0aG5hbWU6ICIvIiwKICAgICAqICBwb3J0OiAiODAiLAogICAgICogIHByb3RvY29sOiAiaHR0cDoiLAogICAgICogfQogICAgICovCiAgICB1dGlsLmNyZWF0ZVVybE9iamVjdCA9IGZ1bmN0aW9uKHVybCwgb3B0aW9ucykgewogICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICAgIHVybCA9IHVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICBpZighKC9eXHcrOlwvXC8vKS50ZXN0KHVybCkpIHsKICAgICAgICAgICAgdmFyIGxvYyA9IHdpbmRvdy5sb2NhdGlvbjsKICAgICAgICAgICAgdmFyIHBvcnQgPSBsb2MucG9ydCA/ICI6IiArIGxvYy5wb3J0IDogIiI7CiAgICAgICAgICAgIHZhciBmdWxsVXJsID0gbG9jLnByb3RvY29sICsgIi8vIiArIGxvYy5ob3N0LnNwbGl0KCI6Iikuc2hpZnQoKSArIHBvcnQ7CiAgICAgICAgICAgIGlmKHVybC5pbmRleE9mKCIvIikgPT09IDApIHsKICAgICAgICAgICAgICAgIHVybCA9IGZ1bGxVcmwgKyB1cmw7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSBsb2MucGF0aG5hbWUuc3BsaXQoIi8iKTsKICAgICAgICAgICAgICAgIHBhcnRzLnBvcCgpOwogICAgICAgICAgICAgICAgdXJsID0gZnVsbFVybCArIHBhcnRzLmpvaW4oIi8iKSArICIvIiArIHVybDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAob3B0aW9ucy5pZ25vcmVDYXNlKSB7CiAgICAgICAgICAgIHVybCA9IHVybC50b0xvd2VyQ2FzZSgpOwogICAgICAgIH0KICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICBhLmhyZWYgPSB1cmw7CiAgICAgICAgdmFyIHVybE9iamVjdCA9IHt9OwogICAgICAgIHVybE9iamVjdC5ob3N0ID0gYS5ob3N0LnNwbGl0KCI6Iikuc2hpZnQoKTsKICAgICAgICB1cmxPYmplY3QucHJvdG9jb2wgPSBhLnByb3RvY29sOwogICAgICAgIGlmKG9wdGlvbnMuaWdub3JlUG9ydDgwKSB7CiAgICAgICAgICAgIHVybE9iamVjdC5wb3J0ID0gKGEucG9ydCA9PSAiODAiIHx8IGEucG9ydCA9PSAiMCIpID8gIiIgOiBhLnBvcnQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdXJsT2JqZWN0LnBvcnQgPSAoYS5wb3J0ID09ICIiIHx8IGEucG9ydCA9PSAiMCIpID8gIjgwIiA6IGEucG9ydDsKICAgICAgICB9CgogICAgICAgIC8vaGFzaAogICAgICAgIHVybE9iamVjdC5oYXNoID0gKG9wdGlvbnMuaWdub3JlSGFzaCB8fCBhLmhhc2ggPT09ICIjIikgPyAiIiA6IGEuaGFzaDsKICAgICAgICB2YXIgcXVlcnlTdHJpbmcgPSBhLnNlYXJjaDsKICAgICAgICBpZiAoIXF1ZXJ5U3RyaW5nKSB7CiAgICAgICAgICAgIHZhciBxTWFyayA9IHVybC5pbmRleE9mKCI/Iik7CiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nID0gKHFNYXJrICE9IC0xKSA/IHVybC5zdWJzdHIocU1hcmspIDogIiI7CiAgICAgICAgfQogICAgICAgIHVybE9iamVjdC5hcmdzID0gdXRpbC5nZXRQYXJhbWV0ZXJzKHF1ZXJ5U3RyaW5nKTsKICAgICAgICB1cmxPYmplY3QucGF0aG5hbWUgPSAoYS5wYXRobmFtZS5jaGFyQXQoMCkgPT0gIi8iKSA/IGEucGF0aG5hbWUgOiAiLyIgKyBhLnBhdGhuYW1lOwogICAgICAgIHJldHVybiB1cmxPYmplY3Q7CiAgICB9OwoKICAgIC8qKgogICAgICogQG1ldGhvZCBvY3RvcHVzLnV0aWwudHJpbQogICAgICogQGRlc2Mg5Y675o6J5a2X56ym5Liy5Lik5L6n56m655m9CiAgICAgKiBAcGFyYW0gc3RyIHtTdHJpbmd9CiAgICAgKi8KICAgIHV0aWwudHJpbSA9IGZ1bmN0aW9uKHN0cikgewogICAgICAgIHN0ciA9IFN0cmluZyhzdHIpOwogICAgICAgIHJldHVybiAhIXN0ci50cmltID8gc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoIiheW1xcc1xcdFxceGEwXFx1MzAwMF0rKXwoW1xcdTMwMDBcXHhhMFxcc1xcdF0rXHgyNCkiLCAiZyIpLCAnJyk7CiAgICB9OwoKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLnJlbW92ZUl0ZW0KICAgICAqIEBwYXJhbSBzb3VyY2UKICAgICAqIEBwYXJhbSBpdGVtCiAgICAgKi8KICAgIHV0aWwucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uKHNvdXJjZSwgaXRlbSkgewogICAgICAgIHZhciBsZW4gPSBzb3VyY2UubGVuZ3RoLAogICAgICAgICAgICBpID0gbGVuOwogICAgICAgIGZvcig7IGktLTsgKSB7CiAgICAgICAgICAgIGlmKHNvdXJjZVtpXSA9PT0gaXRlbSkgewogICAgICAgICAgICAgICAgc291cmNlLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gc291cmNlOwogICAgfTsKCiAgICAvKioKICAgICAqIEBtZXRob2Qgb2N0b3B1cy51dGlsLnVwcGVyQ2FzZU9iamVjdAogICAgICogQGRlc2Mg5bCG5oyH5a6a5a+56LGh6YeM55qEa2V56aaW5a2X5q+N5aSn5YaZCiAgICAgKiBAcGFyYW0gb2JqZWN0IHtPYmplY3R9CiAgICAgKi8KICAgIHV0aWwudXBwZXJDYXNlT2JqZWN0ID0gZnVuY3Rpb24gKG9iamVjdCkgewogICAgICAgIHZhciB1T2JqZWN0ID0ge307CiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgewogICAgICAgICAgICB1T2JqZWN0W2tleS50b1VwcGVyQ2FzZSgpXSA9IG9iamVjdFtrZXldOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdU9iamVjdDsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5jYW1lbGl6ZQogICAgICogQGRlc2Mg6am85bOw5YyW5a2X56ym5LiyCiAgICAgKiBAcGFyYW0gc291cmNlIHtTdHJpbmd9CiAgICAgKi8KICAgIHV0aWwuY2FtZWxpemUgPSBmdW5jdGlvbihzb3VyY2UpIHsKICAgICAgICB2YXIgb1N0cmluZ0xpc3QgPSBzb3VyY2Uuc3BsaXQoL1tcLXxffFxzfFwuXS9nKTsKICAgICAgICB2YXIgY2FtZWxpemVkU3RyaW5nID0gb1N0cmluZ0xpc3RbMF0sCiAgICAgICAgICAgIGkgPSAxLAogICAgICAgICAgICBsZW4gPSBvU3RyaW5nTGlzdC5sZW5ndGg7CiAgICAgICAgZm9yICggOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgdmFyIHMgPSBvU3RyaW5nTGlzdFtpXTsKICAgICAgICAgICAgY2FtZWxpemVkU3RyaW5nICs9IHMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzLnN1YnN0cmluZygxKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNhbWVsaXplZFN0cmluZzsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5zdHlsZUNzcwogICAgICogQGRlc2Mg5bCG5YmN57yA57G7Y3NzIOagt+W8j+WMlgogICAgICogQGV4YW1wbGUKICAgICAqIHZhciBjc3MgPSAiLXdlYmtpdC10cmFuc2l0aW9uIjsKICAgICAqIG9jdG9wdXMudXRpbC5zdHlsZUNzcyhjc3MpOwogICAgICogcmV0dXJuICJ3ZWJraXRUcmFuc2l0aW9uIgogICAgICovCiAgICB1dGlsLnN0eWxlQ3NzID0gZnVuY3Rpb24oc3RyKSB7CiAgICAgICAgdmFyIGZsYWcgPSB0cnVlOwogICAgICAgIHZhciBzdHIgPSBzdHIucmVwbGFjZSgvXC0oXFMpL2csIGZ1bmN0aW9uKCQxLCAkMikgewogICAgICAgICAgICByZXR1cm4gZmxhZyA/IChmbGFnID0gZmFsc2UsICQyKSA6ICQyLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHN0cjsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5jc3NTdHlsZQogICAgICogQGRlc2Mg5bCG5qC35byP5YyW55qE5YmN57yAIGNzc+WMlgogICAgICogQGV4YW1wbGUKICAgICAqIHZhciBzdHlsZSA9ICJ3ZWJraXRUcmFuc2l0aW9uIgogICAgICogb2N0b3B1cy51dGlsLmNzc1N0eWxlKHN0eWxlKTsKICAgICAqIHJldHVybiAtd2Via2l0LXRyYW5zaXRpb24KICAgICAqLwogICAgdXRpbC5jc3NTdHlsZSA9IGZ1bmN0aW9uKHN0cikgewogICAgICAgIHZhciBzdHIgPSBzdHIucmVwbGFjZSgvKF5cU3xbQS1aXSkvZywgZnVuY3Rpb24oJDEpIHsKICAgICAgICAgICAgcmV0dXJuICItIiArICQxLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHN0cjsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbWV0aG9kIG9jdG9wdXMudXRpbC5yZXF1ZXN0QW5pbWF0aW9uCiAgICAgKi8KICAgIHV0aWwucmVxdWVzdEFuaW1hdGlvbiA9IChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgcmVxdWVzdCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwKICAgICAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fAogICAgICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgIHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgIHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fAogICAgICAgICAgICBmdW5jdGlvbihjYWxsYmFjaywgZWxlbWVudCkgewogICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDE2KTsKICAgICAgICAgICAgfTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2ssIGVsZW1lbnQpIHsKICAgICAgICAgICAgcmVxdWVzdC5hcHBseSh3aW5kb3csIFtjYWxsYmFjaywgZWxlbWVudF0pOwogICAgICAgIH07CiAgICB9KSgpOwp9KShvY3RvcHVzKTs=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 21:16:57 GMT",
                    "Content-Length": "23853",
                    "Date": "Fri, 07 Nov 2014 21:17:02 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}