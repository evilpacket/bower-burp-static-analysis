{
    "url": "http://localhost:9999/aeosynth/demos/apps/lib/backbone.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.href</b> and written to <b>location.replace()</b> via the following statements:<ul><li>var href = location.href.replace(/(javascript:|#).*$/, '');</li><li>location.replace(href + '#' + fragment);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/aeosynth/demos/apps/lib/backbone.js",
                "path": "/aeosynth/demos/apps/lib/backbone.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hZW9zeW50aC9kZW1vcy9hcHBzL2xpYi9iYWNrYm9uZS5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "Ly8gICAgIEJhY2tib25lLmpzIDAuOS4yCgovLyAgICAgKGMpIDIwMTAtMjAxMiBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgSW5jLgovLyAgICAgQmFja2JvbmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCi8vICAgICBGb3IgYWxsIGRldGFpbHMgYW5kIGRvY3VtZW50YXRpb246Ci8vICAgICBodHRwOi8vYmFja2JvbmVqcy5vcmcKCihmdW5jdGlvbigpewoKICAvLyBJbml0aWFsIFNldHVwCiAgLy8gLS0tLS0tLS0tLS0tLQoKICAvLyBTYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0IChgd2luZG93YCBpbiB0aGUgYnJvd3NlciwgYGdsb2JhbGAKICAvLyBvbiB0aGUgc2VydmVyKS4KICB2YXIgcm9vdCA9IHRoaXM7CgogIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgQmFja2JvbmVgIHZhcmlhYmxlLCBzbyB0aGF0IGl0IGNhbiBiZQogIC8vIHJlc3RvcmVkIGxhdGVyIG9uLCBpZiBgbm9Db25mbGljdGAgaXMgdXNlZC4KICB2YXIgcHJldmlvdXNCYWNrYm9uZSA9IHJvb3QuQmFja2JvbmU7CgogIC8vIENyZWF0ZSBhIGxvY2FsIHJlZmVyZW5jZSB0byBhcnJheSBtZXRob2RzLgogIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlOwogIHZhciBwdXNoID0gQXJyYXlQcm90by5wdXNoOwogIHZhciBzbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7CiAgdmFyIHNwbGljZSA9IEFycmF5UHJvdG8uc3BsaWNlOwoKICAvLyBUaGUgdG9wLWxldmVsIG5hbWVzcGFjZS4gQWxsIHB1YmxpYyBCYWNrYm9uZSBjbGFzc2VzIGFuZCBtb2R1bGVzIHdpbGwKICAvLyBiZSBhdHRhY2hlZCB0byB0aGlzLiBFeHBvcnRlZCBmb3IgYm90aCBDb21tb25KUyBhbmQgdGhlIGJyb3dzZXIuCiAgdmFyIEJhY2tib25lOwogIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIEJhY2tib25lID0gZXhwb3J0czsKICB9IGVsc2UgewogICAgQmFja2JvbmUgPSByb290LkJhY2tib25lID0ge307CiAgfQoKICAvLyBDdXJyZW50IHZlcnNpb24gb2YgdGhlIGxpYnJhcnkuIEtlZXAgaW4gc3luYyB3aXRoIGBwYWNrYWdlLmpzb25gLgogIEJhY2tib25lLlZFUlNJT04gPSAnMC45LjInOwoKICAvLyBSZXF1aXJlIFVuZGVyc2NvcmUsIGlmIHdlJ3JlIG9uIHRoZSBzZXJ2ZXIsIGFuZCBpdCdzIG5vdCBhbHJlYWR5IHByZXNlbnQuCiAgdmFyIF8gPSByb290Ll87CiAgaWYgKCFfICYmICh0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcpKSBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpOwoKICAvLyBGb3IgQmFja2JvbmUncyBwdXJwb3NlcywgalF1ZXJ5LCBaZXB0bywgb3IgRW5kZXIgb3ducyB0aGUgYCRgIHZhcmlhYmxlLgogIEJhY2tib25lLiQgPSByb290LmpRdWVyeSB8fCByb290LlplcHRvIHx8IHJvb3QuZW5kZXI7CgogIC8vIFJ1bnMgQmFja2JvbmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYEJhY2tib25lYCB2YXJpYWJsZQogIC8vIHRvIGl0cyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGlzIEJhY2tib25lIG9iamVjdC4KICBCYWNrYm9uZS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7CiAgICByb290LkJhY2tib25lID0gcHJldmlvdXNCYWNrYm9uZTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIC8vIFR1cm4gb24gYGVtdWxhdGVIVFRQYCB0byBzdXBwb3J0IGxlZ2FjeSBIVFRQIHNlcnZlcnMuIFNldHRpbmcgdGhpcyBvcHRpb24KICAvLyB3aWxsIGZha2UgYCJQVVQiYCBhbmQgYCJERUxFVEUiYCByZXF1ZXN0cyB2aWEgdGhlIGBfbWV0aG9kYCBwYXJhbWV0ZXIgYW5kCiAgLy8gc2V0IGEgYFgtSHR0cC1NZXRob2QtT3ZlcnJpZGVgIGhlYWRlci4KICBCYWNrYm9uZS5lbXVsYXRlSFRUUCA9IGZhbHNlOwoKICAvLyBUdXJuIG9uIGBlbXVsYXRlSlNPTmAgdG8gc3VwcG9ydCBsZWdhY3kgc2VydmVycyB0aGF0IGNhbid0IGRlYWwgd2l0aCBkaXJlY3QKICAvLyBgYXBwbGljYXRpb24vanNvbmAgcmVxdWVzdHMgLi4uIHdpbGwgZW5jb2RlIHRoZSBib2R5IGFzCiAgLy8gYGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZGAgaW5zdGVhZCBhbmQgd2lsbCBzZW5kIHRoZSBtb2RlbCBpbiBhCiAgLy8gZm9ybSBwYXJhbSBuYW1lZCBgbW9kZWxgLgogIEJhY2tib25lLmVtdWxhdGVKU09OID0gZmFsc2U7CgogIC8vIEJhY2tib25lLkV2ZW50cwogIC8vIC0tLS0tLS0tLS0tLS0tLS0tCgogIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHNwbGl0IGV2ZW50IHN0cmluZ3MKICB2YXIgZXZlbnRTcGxpdHRlciA9IC9ccysvOwoKICAvLyBBIG1vZHVsZSB0aGF0IGNhbiBiZSBtaXhlZCBpbiB0byAqYW55IG9iamVjdCogaW4gb3JkZXIgdG8gcHJvdmlkZSBpdCB3aXRoCiAgLy8gY3VzdG9tIGV2ZW50cy4gWW91IG1heSBiaW5kIHdpdGggYG9uYCBvciByZW1vdmUgd2l0aCBgb2ZmYCBjYWxsYmFjayBmdW5jdGlvbnMKICAvLyB0byBhbiBldmVudDsgYHRyaWdnZXJgLWluZyBhbiBldmVudCBmaXJlcyBhbGwgY2FsbGJhY2tzIGluIHN1Y2Nlc3Npb24uCiAgLy8KICAvLyAgICAgdmFyIG9iamVjdCA9IHt9OwogIC8vICAgICBfLmV4dGVuZChvYmplY3QsIEJhY2tib25lLkV2ZW50cyk7CiAgLy8gICAgIG9iamVjdC5vbignZXhwYW5kJywgZnVuY3Rpb24oKXsgYWxlcnQoJ2V4cGFuZGVkJyk7IH0pOwogIC8vICAgICBvYmplY3QudHJpZ2dlcignZXhwYW5kJyk7CiAgLy8KICB2YXIgRXZlbnRzID0gQmFja2JvbmUuRXZlbnRzID0gewoKICAgIC8vIEJpbmQgb25lIG9yIG1vcmUgc3BhY2Ugc2VwYXJhdGVkIGV2ZW50cywgYGV2ZW50c2AsIHRvIGEgYGNhbGxiYWNrYAogICAgLy8gZnVuY3Rpb24uIFBhc3NpbmcgYCJhbGwiYCB3aWxsIGJpbmQgdGhlIGNhbGxiYWNrIHRvIGFsbCBldmVudHMgZmlyZWQuCiAgICBvbjogZnVuY3Rpb24oZXZlbnRzLCBjYWxsYmFjaywgY29udGV4dCkgewogICAgICB2YXIgY2FsbHMsIGV2ZW50LCBsaXN0OwogICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gdGhpczsKCiAgICAgIGV2ZW50cyA9IGV2ZW50cy5zcGxpdChldmVudFNwbGl0dGVyKTsKICAgICAgY2FsbHMgPSB0aGlzLl9jYWxsYmFja3MgfHwgKHRoaXMuX2NhbGxiYWNrcyA9IHt9KTsKCiAgICAgIHdoaWxlIChldmVudCA9IGV2ZW50cy5zaGlmdCgpKSB7CiAgICAgICAgbGlzdCA9IGNhbGxzW2V2ZW50XSB8fCAoY2FsbHNbZXZlbnRdID0gW10pOwogICAgICAgIGxpc3QucHVzaChjYWxsYmFjaywgY29udGV4dCk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBSZW1vdmUgb25lIG9yIG1hbnkgY2FsbGJhY2tzLiBJZiBgY29udGV4dGAgaXMgbnVsbCwgcmVtb3ZlcyBhbGwgY2FsbGJhY2tzCiAgICAvLyB3aXRoIHRoYXQgZnVuY3Rpb24uIElmIGBjYWxsYmFja2AgaXMgbnVsbCwgcmVtb3ZlcyBhbGwgY2FsbGJhY2tzIGZvciB0aGUKICAgIC8vIGV2ZW50LiBJZiBgZXZlbnRzYCBpcyBudWxsLCByZW1vdmVzIGFsbCBib3VuZCBjYWxsYmFja3MgZm9yIGFsbCBldmVudHMuCiAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50cywgY2FsbGJhY2ssIGNvbnRleHQpIHsKICAgICAgdmFyIGV2ZW50LCBjYWxscywgbGlzdCwgaTsKCiAgICAgIC8vIE5vIGV2ZW50cywgb3IgcmVtb3ZpbmcgKmFsbCogZXZlbnRzLgogICAgICBpZiAoIShjYWxscyA9IHRoaXMuX2NhbGxiYWNrcykpIHJldHVybiB0aGlzOwogICAgICBpZiAoIShldmVudHMgfHwgY2FsbGJhY2sgfHwgY29udGV4dCkpIHsKICAgICAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CgogICAgICBldmVudHMgPSBldmVudHMgPyBldmVudHMuc3BsaXQoZXZlbnRTcGxpdHRlcikgOiBfLmtleXMoY2FsbHMpOwoKICAgICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBjYWxsYmFjayBsaXN0LCBzcGxpY2luZyB3aGVyZSBhcHByb3ByaWF0ZS4KICAgICAgd2hpbGUgKGV2ZW50ID0gZXZlbnRzLnNoaWZ0KCkpIHsKICAgICAgICBpZiAoIShsaXN0ID0gY2FsbHNbZXZlbnRdKSB8fCAhKGNhbGxiYWNrIHx8IGNvbnRleHQpKSB7CiAgICAgICAgICBkZWxldGUgY2FsbHNbZXZlbnRdOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDI7IGkgPj0gMDsgaSAtPSAyKSB7CiAgICAgICAgICBpZiAoIShjYWxsYmFjayAmJiBsaXN0W2ldICE9PSBjYWxsYmFjayB8fCBjb250ZXh0ICYmIGxpc3RbaSArIDFdICE9PSBjb250ZXh0KSkgewogICAgICAgICAgICBsaXN0LnNwbGljZShpLCAyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBUcmlnZ2VyIG9uZSBvciBtYW55IGV2ZW50cywgZmlyaW5nIGFsbCBib3VuZCBjYWxsYmFja3MuIENhbGxiYWNrcyBhcmUKICAgIC8vIHBhc3NlZCB0aGUgc2FtZSBhcmd1bWVudHMgYXMgYHRyaWdnZXJgIGlzLCBhcGFydCBmcm9tIHRoZSBldmVudCBuYW1lCiAgICAvLyAodW5sZXNzIHlvdSdyZSBsaXN0ZW5pbmcgb24gYCJhbGwiYCwgd2hpY2ggd2lsbCBjYXVzZSB5b3VyIGNhbGxiYWNrIHRvCiAgICAvLyByZWNlaXZlIHRoZSB0cnVlIG5hbWUgb2YgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBhcmd1bWVudCkuCiAgICB0cmlnZ2VyOiBmdW5jdGlvbihldmVudHMpIHsKICAgICAgdmFyIGV2ZW50LCBjYWxscywgbGlzdCwgaSwgbGVuZ3RoLCBhcmdzLCBhbGwsIHJlc3Q7CiAgICAgIGlmICghKGNhbGxzID0gdGhpcy5fY2FsbGJhY2tzKSkgcmV0dXJuIHRoaXM7CgogICAgICByZXN0ID0gW107CiAgICAgIGV2ZW50cyA9IGV2ZW50cy5zcGxpdChldmVudFNwbGl0dGVyKTsKCiAgICAgIC8vIEZpbGwgdXAgYHJlc3RgIHdpdGggdGhlIGNhbGxiYWNrIGFyZ3VtZW50cy4gIFNpbmNlIHdlJ3JlIG9ubHkgY29weWluZwogICAgICAvLyB0aGUgdGFpbCBvZiBgYXJndW1lbnRzYCwgYSBsb29wIGlzIG11Y2ggZmFzdGVyIHRoYW4gQXJyYXkjc2xpY2UuCiAgICAgIGZvciAoaSA9IDEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgIHJlc3RbaSAtIDFdID0gYXJndW1lbnRzW2ldOwogICAgICB9CgogICAgICAvLyBGb3IgZWFjaCBldmVudCwgd2FsayB0aHJvdWdoIHRoZSBsaXN0IG9mIGNhbGxiYWNrcyB0d2ljZSwgZmlyc3QgdG8KICAgICAgLy8gdHJpZ2dlciB0aGUgZXZlbnQsIHRoZW4gdG8gdHJpZ2dlciBhbnkgYCJhbGwiYCBjYWxsYmFja3MuCiAgICAgIHdoaWxlIChldmVudCA9IGV2ZW50cy5zaGlmdCgpKSB7CiAgICAgICAgLy8gQ29weSBjYWxsYmFjayBsaXN0cyB0byBwcmV2ZW50IG1vZGlmaWNhdGlvbi4KICAgICAgICBpZiAoYWxsID0gY2FsbHMuYWxsKSBhbGwgPSBhbGwuc2xpY2UoKTsKICAgICAgICBpZiAobGlzdCA9IGNhbGxzW2V2ZW50XSkgbGlzdCA9IGxpc3Quc2xpY2UoKTsKCiAgICAgICAgLy8gRXhlY3V0ZSBldmVudCBjYWxsYmFja3MuCiAgICAgICAgaWYgKGxpc3QpIHsKICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDIpIHsKICAgICAgICAgICAgbGlzdFtpXS5hcHBseShsaXN0W2kgKyAxXSB8fCB0aGlzLCByZXN0KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIEV4ZWN1dGUgImFsbCIgY2FsbGJhY2tzLgogICAgICAgIGlmIChhbGwpIHsKICAgICAgICAgIGFyZ3MgPSBbZXZlbnRdLmNvbmNhdChyZXN0KTsKICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFsbC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMikgewogICAgICAgICAgICBhbGxbaV0uYXBwbHkoYWxsW2kgKyAxXSB8fCB0aGlzLCBhcmdzKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICB9OwoKICAvLyBBbGlhc2VzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4KICBFdmVudHMuYmluZCAgID0gRXZlbnRzLm9uOwogIEV2ZW50cy51bmJpbmQgPSBFdmVudHMub2ZmOwoKICAvLyBCYWNrYm9uZS5Nb2RlbAogIC8vIC0tLS0tLS0tLS0tLS0tCgogIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCwgd2l0aCBkZWZpbmVkIGF0dHJpYnV0ZXMuIEEgY2xpZW50IGlkIChgY2lkYCkKICAvLyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBhbmQgYXNzaWduZWQgZm9yIHlvdS4KICB2YXIgTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbCA9IGZ1bmN0aW9uKGF0dHJpYnV0ZXMsIG9wdGlvbnMpIHsKICAgIHZhciBkZWZhdWx0czsKICAgIHZhciBhdHRycyA9IGF0dHJpYnV0ZXMgfHwge307CiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNvbGxlY3Rpb24pIHRoaXMuY29sbGVjdGlvbiA9IG9wdGlvbnMuY29sbGVjdGlvbjsKICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucGFyc2UpIGF0dHJpYnV0ZXMgPSB0aGlzLnBhcnNlKGF0dHJpYnV0ZXMpOwogICAgaWYgKGRlZmF1bHRzID0gXy5yZXN1bHQodGhpcywgJ2RlZmF1bHRzJykpIHsKICAgICAgYXR0cnMgPSBfLmV4dGVuZCh7fSwgZGVmYXVsdHMsIGF0dHJzKTsKICAgIH0KICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9OwogICAgdGhpcy5fZXNjYXBlZEF0dHJpYnV0ZXMgPSB7fTsKICAgIHRoaXMuY2lkID0gXy51bmlxdWVJZCgnYycpOwogICAgdGhpcy5jaGFuZ2VkID0ge307CiAgICB0aGlzLl9jaGFuZ2VzID0ge307CiAgICB0aGlzLl9wZW5kaW5nID0ge307CiAgICB0aGlzLnNldChhdHRycywge3NpbGVudDogdHJ1ZX0pOwogICAgLy8gUmVzZXQgY2hhbmdlIHRyYWNraW5nLgogICAgdGhpcy5jaGFuZ2VkID0ge307CiAgICB0aGlzLl9jaGFuZ2VzID0ge307CiAgICB0aGlzLl9wZW5kaW5nID0ge307CiAgICB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMgPSBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7CiAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9OwoKICAvLyBBdHRhY2ggYWxsIGluaGVyaXRhYmxlIG1ldGhvZHMgdG8gdGhlIE1vZGVsIHByb3RvdHlwZS4KICBfLmV4dGVuZChNb2RlbC5wcm90b3R5cGUsIEV2ZW50cywgewoKICAgIC8vIEEgaGFzaCBvZiBhdHRyaWJ1dGVzIHdob3NlIGN1cnJlbnQgYW5kIHByZXZpb3VzIHZhbHVlIGRpZmZlci4KICAgIGNoYW5nZWQ6IG51bGwsCgogICAgLy8gQSBoYXNoIG9mIGF0dHJpYnV0ZXMgdGhhdCBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgdGltZSBgY2hhbmdlYAogICAgLy8gd2FzIGNhbGxlZC4KICAgIF9jaGFuZ2VzOiBudWxsLAoKICAgIC8vIEEgaGFzaCBvZiBhdHRyaWJ1dGVzIHRoYXQgaGF2ZSBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IGBjaGFuZ2VgIGV2ZW50CiAgICAvLyBiZWdhbi4KICAgIF9wZW5kaW5nOiBudWxsLAoKICAgIC8vIEEgaGFzaCBvZiBhdHRyaWJ1dGVzIHdpdGggdGhlIGN1cnJlbnQgbW9kZWwgc3RhdGUgdG8gZGV0ZXJtaW5lIGlmCiAgICAvLyBhIGBjaGFuZ2VgIHNob3VsZCBiZSByZWNvcmRlZCB3aXRoaW4gYSBuZXN0ZWQgYGNoYW5nZWAgYmxvY2suCiAgICBfY2hhbmdpbmcgOiBudWxsLAoKICAgIC8vIFRoZSBkZWZhdWx0IG5hbWUgZm9yIHRoZSBKU09OIGBpZGAgYXR0cmlidXRlIGlzIGAiaWQiYC4gTW9uZ29EQiBhbmQKICAgIC8vIENvdWNoREIgdXNlcnMgbWF5IHdhbnQgdG8gc2V0IHRoaXMgdG8gYCJfaWQiYC4KICAgIGlkQXR0cmlidXRlOiAnaWQnLAoKICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sCgogICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgbW9kZWwncyBgYXR0cmlidXRlc2Agb2JqZWN0LgogICAgdG9KU09OOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7CiAgICB9LAoKICAgIC8vIFByb3h5IGBCYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0LgogICAgc3luYzogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBCYWNrYm9uZS5zeW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9LAoKICAgIC8vIEdldCB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlLgogICAgZ2V0OiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbYXR0cl07CiAgICB9LAoKICAgIC8vIEdldCB0aGUgSFRNTC1lc2NhcGVkIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZS4KICAgIGVzY2FwZTogZnVuY3Rpb24oYXR0cikgewogICAgICB2YXIgaHRtbDsKICAgICAgaWYgKGh0bWwgPSB0aGlzLl9lc2NhcGVkQXR0cmlidXRlc1thdHRyXSkgcmV0dXJuIGh0bWw7CiAgICAgIHZhciB2YWwgPSB0aGlzLmdldChhdHRyKTsKICAgICAgcmV0dXJuIHRoaXMuX2VzY2FwZWRBdHRyaWJ1dGVzW2F0dHJdID0gXy5lc2NhcGUodmFsID09IG51bGwgPyAnJyA6ICcnICsgdmFsKTsKICAgIH0sCgogICAgLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGF0dHJpYnV0ZSBjb250YWlucyBhIHZhbHVlIHRoYXQgaXMgbm90IG51bGwKICAgIC8vIG9yIHVuZGVmaW5lZC4KICAgIGhhczogZnVuY3Rpb24oYXR0cikgewogICAgICByZXR1cm4gdGhpcy5nZXQoYXR0cikgIT0gbnVsbDsKICAgIH0sCgogICAgLy8gU2V0IGEgaGFzaCBvZiBtb2RlbCBhdHRyaWJ1dGVzIG9uIHRoZSBvYmplY3QsIGZpcmluZyBgImNoYW5nZSJgIHVubGVzcwogICAgLy8geW91IGNob29zZSB0byBzaWxlbmNlIGl0LgogICAgc2V0OiBmdW5jdGlvbihhdHRycywgb3B0aW9ucykgewogICAgICB2YXIgYXR0ciwga2V5LCB2YWw7CiAgICAgIGlmIChhdHRycyA9PSBudWxsKSByZXR1cm4gdGhpczsKCiAgICAgIC8vIEhhbmRsZSBib3RoIGAia2V5IiwgdmFsdWVgIGFuZCBge2tleTogdmFsdWV9YCAtc3R5bGUgYXJndW1lbnRzLgogICAgICBpZiAoIV8uaXNPYmplY3QoYXR0cnMpKSB7CiAgICAgICAga2V5ID0gYXR0cnM7CiAgICAgICAgKGF0dHJzID0ge30pW2tleV0gPSBvcHRpb25zOwogICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbMl07CiAgICAgIH0KCiAgICAgIC8vIEV4dHJhY3QgYXR0cmlidXRlcyBhbmQgb3B0aW9ucy4KICAgICAgdmFyIHNpbGVudCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnQ7CiAgICAgIHZhciB1bnNldCA9IG9wdGlvbnMgJiYgb3B0aW9ucy51bnNldDsKICAgICAgaWYgKGF0dHJzIGluc3RhbmNlb2YgTW9kZWwpIGF0dHJzID0gYXR0cnMuYXR0cmlidXRlczsKICAgICAgaWYgKHVuc2V0KSBmb3IgKGF0dHIgaW4gYXR0cnMpIGF0dHJzW2F0dHJdID0gdm9pZCAwOwoKICAgICAgLy8gUnVuIHZhbGlkYXRpb24uCiAgICAgIGlmICghdGhpcy5fdmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7CgogICAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyBvZiBgaWRgLgogICAgICBpZiAodGhpcy5pZEF0dHJpYnV0ZSBpbiBhdHRycykgdGhpcy5pZCA9IGF0dHJzW3RoaXMuaWRBdHRyaWJ1dGVdOwoKICAgICAgdmFyIGNoYW5naW5nID0gdGhpcy5fY2hhbmdpbmc7CiAgICAgIHZhciBub3cgPSB0aGlzLmF0dHJpYnV0ZXM7CiAgICAgIHZhciBlc2NhcGVkID0gdGhpcy5fZXNjYXBlZEF0dHJpYnV0ZXM7CiAgICAgIHZhciBwcmV2ID0gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzIHx8IHt9OwoKICAgICAgLy8gRm9yIGVhY2ggYHNldGAgYXR0cmlidXRlLi4uCiAgICAgIGZvciAoYXR0ciBpbiBhdHRycykgewogICAgICAgIHZhbCA9IGF0dHJzW2F0dHJdOwoKICAgICAgICAvLyBJZiB0aGUgbmV3IGFuZCBjdXJyZW50IHZhbHVlIGRpZmZlciwgcmVjb3JkIHRoZSBjaGFuZ2UuCiAgICAgICAgaWYgKCFfLmlzRXF1YWwobm93W2F0dHJdLCB2YWwpIHx8ICh1bnNldCAmJiBfLmhhcyhub3csIGF0dHIpKSkgewogICAgICAgICAgZGVsZXRlIGVzY2FwZWRbYXR0cl07CiAgICAgICAgICB0aGlzLl9jaGFuZ2VzW2F0dHJdID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIC8vIFVwZGF0ZSBvciBkZWxldGUgdGhlIGN1cnJlbnQgdmFsdWUuCiAgICAgICAgdW5zZXQgPyBkZWxldGUgbm93W2F0dHJdIDogbm93W2F0dHJdID0gdmFsOwoKICAgICAgICAvLyBJZiB0aGUgbmV3IGFuZCBwcmV2aW91cyB2YWx1ZSBkaWZmZXIsIHJlY29yZCB0aGUgY2hhbmdlLiAgSWYgbm90LAogICAgICAgIC8vIHRoZW4gcmVtb3ZlIGNoYW5nZXMgZm9yIHRoaXMgYXR0cmlidXRlLgogICAgICAgIGlmICghXy5pc0VxdWFsKHByZXZbYXR0cl0sIHZhbCkgfHwgKF8uaGFzKG5vdywgYXR0cikgIT09IF8uaGFzKHByZXYsIGF0dHIpKSkgewogICAgICAgICAgdGhpcy5jaGFuZ2VkW2F0dHJdID0gdmFsOwogICAgICAgICAgaWYgKCFzaWxlbnQpIHRoaXMuX3BlbmRpbmdbYXR0cl0gPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBkZWxldGUgdGhpcy5jaGFuZ2VkW2F0dHJdOwogICAgICAgICAgZGVsZXRlIHRoaXMuX3BlbmRpbmdbYXR0cl07CiAgICAgICAgICBpZiAoIWNoYW5naW5nKSBkZWxldGUgdGhpcy5fY2hhbmdlc1thdHRyXTsKICAgICAgICB9CgogICAgICAgIGlmIChjaGFuZ2luZyAmJiBfLmlzRXF1YWwobm93W2F0dHJdLCBjaGFuZ2luZ1thdHRyXSkpIGRlbGV0ZSB0aGlzLl9jaGFuZ2VzW2F0dHJdOwogICAgICB9CgogICAgICAvLyBGaXJlIHRoZSBgImNoYW5nZSJgIGV2ZW50cy4KICAgICAgaWYgKCFzaWxlbnQpIHRoaXMuY2hhbmdlKG9wdGlvbnMpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gUmVtb3ZlIGFuIGF0dHJpYnV0ZSBmcm9tIHRoZSBtb2RlbCwgZmlyaW5nIGAiY2hhbmdlImAgdW5sZXNzIHlvdSBjaG9vc2UKICAgIC8vIHRvIHNpbGVuY2UgaXQuIGB1bnNldGAgaXMgYSBub29wIGlmIHRoZSBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdC4KICAgIHVuc2V0OiBmdW5jdGlvbihhdHRyLCBvcHRpb25zKSB7CiAgICAgIG9wdGlvbnMgPSBfLmV4dGVuZCh7fSwgb3B0aW9ucywge3Vuc2V0OiB0cnVlfSk7CiAgICAgIHJldHVybiB0aGlzLnNldChhdHRyLCBudWxsLCBvcHRpb25zKTsKICAgIH0sCgogICAgLy8gQ2xlYXIgYWxsIGF0dHJpYnV0ZXMgb24gdGhlIG1vZGVsLCBmaXJpbmcgYCJjaGFuZ2UiYCB1bmxlc3MgeW91IGNob29zZQogICAgLy8gdG8gc2lsZW5jZSBpdC4KICAgIGNsZWFyOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIG9wdGlvbnMgPSBfLmV4dGVuZCh7fSwgb3B0aW9ucywge3Vuc2V0OiB0cnVlfSk7CiAgICAgIHJldHVybiB0aGlzLnNldChfLmNsb25lKHRoaXMuYXR0cmlidXRlcyksIG9wdGlvbnMpOwogICAgfSwKCiAgICAvLyBGZXRjaCB0aGUgbW9kZWwgZnJvbSB0aGUgc2VydmVyLiBJZiB0aGUgc2VydmVyJ3MgcmVwcmVzZW50YXRpb24gb2YgdGhlCiAgICAvLyBtb2RlbCBkaWZmZXJzIGZyb20gaXRzIGN1cnJlbnQgYXR0cmlidXRlcywgdGhleSB3aWxsIGJlIG92ZXJyaWRlbiwKICAgIC8vIHRyaWdnZXJpbmcgYSBgImNoYW5nZSJgIGV2ZW50LgogICAgZmV0Y2g6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CiAgICAgIHZhciBtb2RlbCA9IHRoaXM7CiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzOwogICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwLCBzdGF0dXMsIHhocikgewogICAgICAgIGlmICghbW9kZWwuc2V0KG1vZGVsLnBhcnNlKHJlc3AsIHhociksIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICB9OwogICAgICByZXR1cm4gdGhpcy5zeW5jKCdyZWFkJywgdGhpcywgb3B0aW9ucyk7CiAgICB9LAoKICAgIC8vIFNldCBhIGhhc2ggb2YgbW9kZWwgYXR0cmlidXRlcywgYW5kIHN5bmMgdGhlIG1vZGVsIHRvIHRoZSBzZXJ2ZXIuCiAgICAvLyBJZiB0aGUgc2VydmVyIHJldHVybnMgYW4gYXR0cmlidXRlcyBoYXNoIHRoYXQgZGlmZmVycywgdGhlIG1vZGVsJ3MKICAgIC8vIHN0YXRlIHdpbGwgYmUgYHNldGAgYWdhaW4uCiAgICBzYXZlOiBmdW5jdGlvbihhdHRycywgb3B0aW9ucykgewogICAgICB2YXIga2V5LCBjdXJyZW50LCBkb25lOwoKICAgICAgLy8gSGFuZGxlIGJvdGggYCJrZXkiLCB2YWx1ZWAgYW5kIGB7a2V5OiB2YWx1ZX1gIC1zdHlsZSBhcmd1bWVudHMuCiAgICAgIGlmIChhdHRycyAhPSBudWxsICYmICFfLmlzT2JqZWN0KGF0dHJzKSkgewogICAgICAgIGtleSA9IGF0dHJzOwogICAgICAgIChhdHRycyA9IHt9KVtrZXldID0gb3B0aW9uczsKICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzWzJdOwogICAgICB9CiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9OwoKICAgICAgLy8gSWYgd2UncmUgIndhaXQiLWluZyB0byBzZXQgY2hhbmdlZCBhdHRyaWJ1dGVzLCB2YWxpZGF0ZSBlYXJseS4KICAgICAgaWYgKG9wdGlvbnMud2FpdCkgewogICAgICAgIGlmICghdGhpcy5fdmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgY3VycmVudCA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTsKICAgICAgfQoKICAgICAgLy8gUmVndWxhciBzYXZlcyBgc2V0YCBhdHRyaWJ1dGVzIGJlZm9yZSBwZXJzaXN0aW5nIHRvIHRoZSBzZXJ2ZXIuCiAgICAgIHZhciBzaWxlbnRPcHRpb25zID0gXy5leHRlbmQoe30sIG9wdGlvbnMsIHtzaWxlbnQ6IHRydWV9KTsKICAgICAgaWYgKGF0dHJzICYmICF0aGlzLnNldChhdHRycywgb3B0aW9ucy53YWl0ID8gc2lsZW50T3B0aW9ucyA6IG9wdGlvbnMpKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICAvLyBEbyBub3QgcGVyc2lzdCBpbnZhbGlkIG1vZGVscy4KICAgICAgaWYgKCFhdHRycyAmJiAhdGhpcy5fdmFsaWRhdGUobnVsbCwgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKCiAgICAgIC8vIEFmdGVyIGEgc3VjY2Vzc2Z1bCBzZXJ2ZXItc2lkZSBzYXZlLCB0aGUgY2xpZW50IGlzIChvcHRpb25hbGx5KQogICAgICAvLyB1cGRhdGVkIHdpdGggdGhlIHNlcnZlci1zaWRlIHN0YXRlLgogICAgICB2YXIgbW9kZWwgPSB0aGlzOwogICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCwgc3RhdHVzLCB4aHIpIHsKICAgICAgICBkb25lID0gdHJ1ZTsKICAgICAgICB2YXIgc2VydmVyQXR0cnMgPSBtb2RlbC5wYXJzZShyZXNwLCB4aHIpOwogICAgICAgIGlmIChvcHRpb25zLndhaXQpIHNlcnZlckF0dHJzID0gXy5leHRlbmQoYXR0cnMgfHwge30sIHNlcnZlckF0dHJzKTsKICAgICAgICBpZiAoIW1vZGVsLnNldChzZXJ2ZXJBdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgIH07CgogICAgICAvLyBGaW5pc2ggY29uZmlndXJpbmcgYW5kIHNlbmRpbmcgdGhlIEFqYXggcmVxdWVzdC4KICAgICAgdmFyIHhociA9IHRoaXMuc3luYyh0aGlzLmlzTmV3KCkgPyAnY3JlYXRlJyA6ICd1cGRhdGUnLCB0aGlzLCBvcHRpb25zKTsKCiAgICAgIC8vIFdoZW4gdXNpbmcgYHdhaXRgLCByZXNldCBhdHRyaWJ1dGVzIHRvIG9yaWdpbmFsIHZhbHVlcyB1bmxlc3MKICAgICAgLy8gYHN1Y2Nlc3NgIGhhcyBiZWVuIGNhbGxlZCBhbHJlYWR5LgogICAgICBpZiAoIWRvbmUgJiYgb3B0aW9ucy53YWl0KSB7CiAgICAgICAgdGhpcy5jbGVhcihzaWxlbnRPcHRpb25zKTsKICAgICAgICB0aGlzLnNldChjdXJyZW50LCBzaWxlbnRPcHRpb25zKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHhocjsKICAgIH0sCgogICAgLy8gRGVzdHJveSB0aGlzIG1vZGVsIG9uIHRoZSBzZXJ2ZXIgaWYgaXQgd2FzIGFscmVhZHkgcGVyc2lzdGVkLgogICAgLy8gT3B0aW1pc3RpY2FsbHkgcmVtb3ZlcyB0aGUgbW9kZWwgZnJvbSBpdHMgY29sbGVjdGlvbiwgaWYgaXQgaGFzIG9uZS4KICAgIC8vIElmIGB3YWl0OiB0cnVlYCBpcyBwYXNzZWQsIHdhaXRzIGZvciB0aGUgc2VydmVyIHRvIHJlc3BvbmQgYmVmb3JlIHJlbW92YWwuCiAgICBkZXN0cm95OiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9OwogICAgICB2YXIgbW9kZWwgPSB0aGlzOwogICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKCiAgICAgIHZhciBkZXN0cm95ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgbW9kZWwudHJpZ2dlcignZGVzdHJveScsIG1vZGVsLCBtb2RlbC5jb2xsZWN0aW9uLCBvcHRpb25zKTsKICAgICAgfTsKCiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHsKICAgICAgICBpZiAob3B0aW9ucy53YWl0IHx8IG1vZGVsLmlzTmV3KCkpIGRlc3Ryb3koKTsKICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgIH07CgogICAgICBpZiAodGhpcy5pc05ldygpKSB7CiAgICAgICAgb3B0aW9ucy5zdWNjZXNzKCk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB2YXIgeGhyID0gdGhpcy5zeW5jKCdkZWxldGUnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgaWYgKCFvcHRpb25zLndhaXQpIGRlc3Ryb3koKTsKICAgICAgcmV0dXJuIHhocjsKICAgIH0sCgogICAgLy8gRGVmYXVsdCBVUkwgZm9yIHRoZSBtb2RlbCdzIHJlcHJlc2VudGF0aW9uIG9uIHRoZSBzZXJ2ZXIgLS0gaWYgeW91J3JlCiAgICAvLyB1c2luZyBCYWNrYm9uZSdzIHJlc3RmdWwgbWV0aG9kcywgb3ZlcnJpZGUgdGhpcyB0byBjaGFuZ2UgdGhlIGVuZHBvaW50CiAgICAvLyB0aGF0IHdpbGwgYmUgY2FsbGVkLgogICAgdXJsOiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGJhc2UgPSBfLnJlc3VsdCh0aGlzLCAndXJsUm9vdCcpIHx8IF8ucmVzdWx0KHRoaXMuY29sbGVjdGlvbiwgJ3VybCcpIHx8IHVybEVycm9yKCk7CiAgICAgIGlmICh0aGlzLmlzTmV3KCkpIHJldHVybiBiYXNlOwogICAgICByZXR1cm4gYmFzZSArIChiYXNlLmNoYXJBdChiYXNlLmxlbmd0aCAtIDEpID09PSAnLycgPyAnJyA6ICcvJykgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5pZCk7CiAgICB9LAoKICAgIC8vICoqcGFyc2UqKiBjb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gdGhlIGhhc2ggb2YgYXR0cmlidXRlcyB0byBiZSBgc2V0YCBvbgogICAgLy8gdGhlIG1vZGVsLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgdGhlIHJlc3BvbnNlIGFsb25nLgogICAgcGFyc2U6IGZ1bmN0aW9uKHJlc3AsIHhocikgewogICAgICByZXR1cm4gcmVzcDsKICAgIH0sCgogICAgLy8gQ3JlYXRlIGEgbmV3IG1vZGVsIHdpdGggaWRlbnRpY2FsIGF0dHJpYnV0ZXMgdG8gdGhpcyBvbmUuCiAgICBjbG9uZTogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmF0dHJpYnV0ZXMpOwogICAgfSwKCiAgICAvLyBBIG1vZGVsIGlzIG5ldyBpZiBpdCBoYXMgbmV2ZXIgYmVlbiBzYXZlZCB0byB0aGUgc2VydmVyLCBhbmQgbGFja3MgYW4gaWQuCiAgICBpc05ldzogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmlkID09IG51bGw7CiAgICB9LAoKICAgIC8vIENhbGwgdGhpcyBtZXRob2QgdG8gbWFudWFsbHkgZmlyZSBhIGAiY2hhbmdlImAgZXZlbnQgZm9yIHRoaXMgbW9kZWwgYW5kCiAgICAvLyBhIGAiY2hhbmdlOmF0dHJpYnV0ZSJgIGV2ZW50IGZvciBlYWNoIGNoYW5nZWQgYXR0cmlidXRlLgogICAgLy8gQ2FsbGluZyB0aGlzIHdpbGwgY2F1c2UgYWxsIG9iamVjdHMgb2JzZXJ2aW5nIHRoZSBtb2RlbCB0byB1cGRhdGUuCiAgICBjaGFuZ2U6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgdmFyIGNoYW5naW5nID0gdGhpcy5fY2hhbmdpbmc7CiAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY2hhbmdpbmcgPSB7fTsKCiAgICAgIC8vIFNpbGVudCBjaGFuZ2VzIGJlY29tZSBwZW5kaW5nIGNoYW5nZXMuCiAgICAgIGZvciAodmFyIGF0dHIgaW4gdGhpcy5fY2hhbmdlcykgdGhpcy5fcGVuZGluZ1thdHRyXSA9IHRydWU7CgogICAgICAvLyBUcmlnZ2VyICdjaGFuZ2U6YXR0cicgZm9yIGFueSBuZXcgb3Igc2lsZW50IGNoYW5nZXMuCiAgICAgIHZhciBjaGFuZ2VzID0gdGhpcy5fY2hhbmdlczsKICAgICAgdGhpcy5fY2hhbmdlcyA9IHt9OwoKICAgICAgLy8gU2V0IHRoZSBjb3JyZWN0IHN0YXRlIGZvciB0aGlzLl9jaGFuZ2luZyB2YWx1ZXMKICAgICAgdmFyIHRyaWdnZXJzID0gW107CiAgICAgIGZvciAodmFyIGF0dHIgaW4gY2hhbmdlcykgewogICAgICAgIGN1cnJlbnRbYXR0cl0gPSB0aGlzLmdldChhdHRyKTsKICAgICAgICB0cmlnZ2Vycy5wdXNoKGF0dHIpOwogICAgICB9CgogICAgICBmb3IgKHZhciBpPTAsIGw9dHJpZ2dlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgdGhpcy50cmlnZ2VyKCdjaGFuZ2U6JyArIHRyaWdnZXJzW2ldLCB0aGlzLCBjdXJyZW50W3RyaWdnZXJzW2ldXSwgb3B0aW9ucyk7CiAgICAgIH0KICAgICAgaWYgKGNoYW5naW5nKSByZXR1cm4gdGhpczsKCiAgICAgIC8vIENvbnRpbnVlIGZpcmluZyBgImNoYW5nZSJgIGV2ZW50cyB3aGlsZSB0aGVyZSBhcmUgcGVuZGluZyBjaGFuZ2VzLgogICAgICB3aGlsZSAoIV8uaXNFbXB0eSh0aGlzLl9wZW5kaW5nKSkgewogICAgICAgIHRoaXMuX3BlbmRpbmcgPSB7fTsKICAgICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZScsIHRoaXMsIG9wdGlvbnMpOwogICAgICAgIC8vIFBlbmRpbmcgYW5kIHNpbGVudCBjaGFuZ2VzIHN0aWxsIHJlbWFpbi4KICAgICAgICBmb3IgKHZhciBhdHRyIGluIHRoaXMuY2hhbmdlZCkgewogICAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdbYXR0cl0gfHwgdGhpcy5fY2hhbmdlc1thdHRyXSkgY29udGludWU7CiAgICAgICAgICBkZWxldGUgdGhpcy5jaGFuZ2VkW2F0dHJdOwogICAgICAgIH0KICAgICAgICB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMgPSBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7CiAgICAgIH0KCiAgICAgIHRoaXMuX2NoYW5naW5nID0gbnVsbDsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIERldGVybWluZSBpZiB0aGUgbW9kZWwgaGFzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYCJjaGFuZ2UiYCBldmVudC4KICAgIC8vIElmIHlvdSBzcGVjaWZ5IGFuIGF0dHJpYnV0ZSBuYW1lLCBkZXRlcm1pbmUgaWYgdGhhdCBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQuCiAgICBoYXNDaGFuZ2VkOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIGlmIChhdHRyID09IG51bGwpIHJldHVybiAhXy5pc0VtcHR5KHRoaXMuY2hhbmdlZCk7CiAgICAgIHJldHVybiBfLmhhcyh0aGlzLmNoYW5nZWQsIGF0dHIpOwogICAgfSwKCiAgICAvLyBSZXR1cm4gYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBhdHRyaWJ1dGVzIHRoYXQgaGF2ZSBjaGFuZ2VkLCBvcgogICAgLy8gZmFsc2UgaWYgdGhlcmUgYXJlIG5vIGNoYW5nZWQgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBkZXRlcm1pbmluZyB3aGF0CiAgICAvLyBwYXJ0cyBvZiBhIHZpZXcgbmVlZCB0byBiZSB1cGRhdGVkIGFuZC9vciB3aGF0IGF0dHJpYnV0ZXMgbmVlZCB0byBiZQogICAgLy8gcGVyc2lzdGVkIHRvIHRoZSBzZXJ2ZXIuIFVuc2V0IGF0dHJpYnV0ZXMgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLgogICAgLy8gWW91IGNhbiBhbHNvIHBhc3MgYW4gYXR0cmlidXRlcyBvYmplY3QgdG8gZGlmZiBhZ2FpbnN0IHRoZSBtb2RlbCwKICAgIC8vIGRldGVybWluaW5nIGlmIHRoZXJlICp3b3VsZCBiZSogYSBjaGFuZ2UuCiAgICBjaGFuZ2VkQXR0cmlidXRlczogZnVuY3Rpb24oZGlmZikgewogICAgICBpZiAoIWRpZmYpIHJldHVybiB0aGlzLmhhc0NoYW5nZWQoKSA/IF8uY2xvbmUodGhpcy5jaGFuZ2VkKSA6IGZhbHNlOwogICAgICB2YXIgdmFsLCBjaGFuZ2VkID0gZmFsc2UsIG9sZCA9IHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlczsKICAgICAgZm9yICh2YXIgYXR0ciBpbiBkaWZmKSB7CiAgICAgICAgaWYgKF8uaXNFcXVhbChvbGRbYXR0cl0sICh2YWwgPSBkaWZmW2F0dHJdKSkpIGNvbnRpbnVlOwogICAgICAgIChjaGFuZ2VkIHx8IChjaGFuZ2VkID0ge30pKVthdHRyXSA9IHZhbDsKICAgICAgfQogICAgICByZXR1cm4gY2hhbmdlZDsKICAgIH0sCgogICAgLy8gR2V0IHRoZSBwcmV2aW91cyB2YWx1ZSBvZiBhbiBhdHRyaWJ1dGUsIHJlY29yZGVkIGF0IHRoZSB0aW1lIHRoZSBsYXN0CiAgICAvLyBgImNoYW5nZSJgIGV2ZW50IHdhcyBmaXJlZC4KICAgIHByZXZpb3VzOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIGlmIChhdHRyID09IG51bGwgfHwgIXRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcykgcmV0dXJuIG51bGw7CiAgICAgIHJldHVybiB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXNbYXR0cl07CiAgICB9LAoKICAgIC8vIEdldCBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIG1vZGVsIGF0IHRoZSB0aW1lIG9mIHRoZSBwcmV2aW91cwogICAgLy8gYCJjaGFuZ2UiYCBldmVudC4KICAgIHByZXZpb3VzQXR0cmlidXRlczogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyk7CiAgICB9LAoKICAgIC8vIENoZWNrIGlmIHRoZSBtb2RlbCBpcyBjdXJyZW50bHkgaW4gYSB2YWxpZCBzdGF0ZS4gSXQncyBvbmx5IHBvc3NpYmxlIHRvCiAgICAvLyBnZXQgaW50byBhbiAqaW52YWxpZCogc3RhdGUgaWYgeW91J3JlIHVzaW5nIHNpbGVudCBjaGFuZ2VzLgogICAgaXNWYWxpZDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICByZXR1cm4gIXRoaXMudmFsaWRhdGUgfHwgIXRoaXMudmFsaWRhdGUodGhpcy5hdHRyaWJ1dGVzLCBvcHRpb25zKTsKICAgIH0sCgogICAgLy8gUnVuIHZhbGlkYXRpb24gYWdhaW5zdCB0aGUgbmV4dCBjb21wbGV0ZSBzZXQgb2YgbW9kZWwgYXR0cmlidXRlcywKICAgIC8vIHJldHVybmluZyBgdHJ1ZWAgaWYgYWxsIGlzIHdlbGwuIElmIGEgc3BlY2lmaWMgYGVycm9yYCBjYWxsYmFjayBoYXMKICAgIC8vIGJlZW4gcGFzc2VkLCBjYWxsIHRoYXQgaW5zdGVhZCBvZiBmaXJpbmcgdGhlIGdlbmVyYWwgYCJlcnJvciJgIGV2ZW50LgogICAgX3ZhbGlkYXRlOiBmdW5jdGlvbihhdHRycywgb3B0aW9ucykgewogICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNpbGVudCB8fCAhdGhpcy52YWxpZGF0ZSkgcmV0dXJuIHRydWU7CiAgICAgIGF0dHJzID0gXy5leHRlbmQoe30sIHRoaXMuYXR0cmlidXRlcywgYXR0cnMpOwogICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKTsKICAgICAgaWYgKCFlcnJvcikgcmV0dXJuIHRydWU7CiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZXJyb3IpIG9wdGlvbnMuZXJyb3IodGhpcywgZXJyb3IsIG9wdGlvbnMpOwogICAgICB0aGlzLnRyaWdnZXIoJ2Vycm9yJywgdGhpcywgZXJyb3IsIG9wdGlvbnMpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogIH0pOwoKICAvLyBCYWNrYm9uZS5Db2xsZWN0aW9uCiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBQcm92aWRlcyBhIHN0YW5kYXJkIGNvbGxlY3Rpb24gY2xhc3MgZm9yIG91ciBzZXRzIG9mIG1vZGVscywgb3JkZXJlZAogIC8vIG9yIHVub3JkZXJlZC4gSWYgYSBgY29tcGFyYXRvcmAgaXMgc3BlY2lmaWVkLCB0aGUgQ29sbGVjdGlvbiB3aWxsIG1haW50YWluCiAgLy8gaXRzIG1vZGVscyBpbiBzb3J0IG9yZGVyLCBhcyB0aGV5J3JlIGFkZGVkIGFuZCByZW1vdmVkLgogIHZhciBDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykgewogICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgIGlmIChvcHRpb25zLm1vZGVsKSB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDsKICAgIGlmIChvcHRpb25zLmNvbXBhcmF0b3IgIT09IHZvaWQgMCkgdGhpcy5jb21wYXJhdG9yID0gb3B0aW9ucy5jb21wYXJhdG9yOwogICAgdGhpcy5fcmVzZXQoKTsKICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgaWYgKG1vZGVscykgewogICAgICBpZiAob3B0aW9ucy5wYXJzZSkgbW9kZWxzID0gdGhpcy5wYXJzZShtb2RlbHMpOwogICAgICB0aGlzLnJlc2V0KG1vZGVscywge3NpbGVudDogdHJ1ZSwgcGFyc2U6IG9wdGlvbnMucGFyc2V9KTsKICAgIH0KICB9OwoKICAvLyBEZWZpbmUgdGhlIENvbGxlY3Rpb24ncyBpbmhlcml0YWJsZSBtZXRob2RzLgogIF8uZXh0ZW5kKENvbGxlY3Rpb24ucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAvLyBUaGUgZGVmYXVsdCBtb2RlbCBmb3IgYSBjb2xsZWN0aW9uIGlzIGp1c3QgYSAqKkJhY2tib25lLk1vZGVsKiouCiAgICAvLyBUaGlzIHNob3VsZCBiZSBvdmVycmlkZGVuIGluIG1vc3QgY2FzZXMuCiAgICBtb2RlbDogTW9kZWwsCgogICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duCiAgICAvLyBpbml0aWFsaXphdGlvbiBsb2dpYy4KICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSwKCiAgICAvLyBUaGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhIENvbGxlY3Rpb24gaXMgYW4gYXJyYXkgb2YgdGhlCiAgICAvLyBtb2RlbHMnIGF0dHJpYnV0ZXMuCiAgICB0b0pTT046IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKG1vZGVsKXsgcmV0dXJuIG1vZGVsLnRvSlNPTihvcHRpb25zKTsgfSk7CiAgICB9LAoKICAgIC8vIFByb3h5IGBCYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0LgogICAgc3luYzogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBCYWNrYm9uZS5zeW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9LAoKICAgIC8vIEFkZCBhIG1vZGVsLCBvciBsaXN0IG9mIG1vZGVscyB0byB0aGUgc2V0LiBQYXNzICoqc2lsZW50KiogdG8gYXZvaWQKICAgIC8vIGZpcmluZyB0aGUgYGFkZGAgZXZlbnQgZm9yIGV2ZXJ5IG5ldyBtb2RlbC4KICAgIGFkZDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgIHZhciBpLCBhcmdzLCBsZW5ndGgsIG1vZGVsLCBleGlzdGluZzsKICAgICAgdmFyIGF0ID0gb3B0aW9ucyAmJiBvcHRpb25zLmF0OwogICAgICBtb2RlbHMgPSBfLmlzQXJyYXkobW9kZWxzKSA/IG1vZGVscy5zbGljZSgpIDogW21vZGVsc107CgogICAgICAvLyBCZWdpbiBieSB0dXJuaW5nIGJhcmUgb2JqZWN0cyBpbnRvIG1vZGVsIHJlZmVyZW5jZXMsIGFuZCBwcmV2ZW50aW5nCiAgICAgIC8vIGludmFsaWQgbW9kZWxzIGZyb20gYmVpbmcgYWRkZWQuCiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgIGlmIChtb2RlbHNbaV0gPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWxzW2ldLCBvcHRpb25zKSkgY29udGludWU7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW4ndCBhZGQgYW4gaW52YWxpZCBtb2RlbCB0byBhIGNvbGxlY3Rpb24iKTsKICAgICAgfQoKICAgICAgZm9yIChpID0gbW9kZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgbW9kZWwgPSBtb2RlbHNbaV07CiAgICAgICAgZXhpc3RpbmcgPSBtb2RlbC5pZCAhPSBudWxsICYmIHRoaXMuX2J5SWRbbW9kZWwuaWRdOwoKICAgICAgICAvLyBJZiBhIGR1cGxpY2F0ZSBpcyBmb3VuZCwgc3BsaWNlIGl0IG91dCBhbmQgb3B0aW9uYWxseSBtZXJnZSBpdCBpbnRvCiAgICAgICAgLy8gdGhlIGV4aXN0aW5nIG1vZGVsLgogICAgICAgIGlmIChleGlzdGluZyB8fCB0aGlzLl9ieUNpZFttb2RlbC5jaWRdKSB7CiAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm1lcmdlICYmIGV4aXN0aW5nKSB7CiAgICAgICAgICAgIGV4aXN0aW5nLnNldChtb2RlbCwgb3B0aW9ucyk7CiAgICAgICAgICB9CiAgICAgICAgICBtb2RlbHMuc3BsaWNlKGksIDEpOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBMaXN0ZW4gdG8gYWRkZWQgbW9kZWxzJyBldmVudHMsIGFuZCBpbmRleCBtb2RlbHMgZm9yIGxvb2t1cCBieQogICAgICAgIC8vIGBpZGAgYW5kIGJ5IGBjaWRgLgogICAgICAgIG1vZGVsLm9uKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpOwogICAgICAgIHRoaXMuX2J5Q2lkW21vZGVsLmNpZF0gPSBtb2RlbDsKICAgICAgICBpZiAobW9kZWwuaWQgIT0gbnVsbCkgdGhpcy5fYnlJZFttb2RlbC5pZF0gPSBtb2RlbDsKICAgICAgfQoKICAgICAgLy8gVXBkYXRlIGBsZW5ndGhgIGFuZCBzcGxpY2UgaW4gbmV3IG1vZGVscy4KICAgICAgdGhpcy5sZW5ndGggKz0gbW9kZWxzLmxlbmd0aDsKICAgICAgYXJncyA9IFthdCAhPSBudWxsID8gYXQgOiB0aGlzLm1vZGVscy5sZW5ndGgsIDBdOwogICAgICBwdXNoLmFwcGx5KGFyZ3MsIG1vZGVscyk7CiAgICAgIHNwbGljZS5hcHBseSh0aGlzLm1vZGVscywgYXJncyk7CgogICAgICAvLyBTb3J0IHRoZSBjb2xsZWN0aW9uIGlmIGFwcHJvcHJpYXRlLgogICAgICBpZiAodGhpcy5jb21wYXJhdG9yICYmIGF0ID09IG51bGwpIHRoaXMuc29ydCh7c2lsZW50OiB0cnVlfSk7CgogICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNpbGVudCkgcmV0dXJuIHRoaXM7CgogICAgICAvLyBUcmlnZ2VyIGBhZGRgIGV2ZW50cy4KICAgICAgd2hpbGUgKG1vZGVsID0gbW9kZWxzLnNoaWZ0KCkpIHsKICAgICAgICBtb2RlbC50cmlnZ2VyKCdhZGQnLCBtb2RlbCwgdGhpcywgb3B0aW9ucyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBSZW1vdmUgYSBtb2RlbCwgb3IgYSBsaXN0IG9mIG1vZGVscyBmcm9tIHRoZSBzZXQuIFBhc3Mgc2lsZW50IHRvIGF2b2lkCiAgICAvLyBmaXJpbmcgdGhlIGByZW1vdmVgIGV2ZW50IGZvciBldmVyeSBtb2RlbCByZW1vdmVkLgogICAgcmVtb3ZlOiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHsKICAgICAgdmFyIGksIGwsIGluZGV4LCBtb2RlbDsKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgbW9kZWxzID0gXy5pc0FycmF5KG1vZGVscykgPyBtb2RlbHMuc2xpY2UoKSA6IFttb2RlbHNdOwogICAgICBmb3IgKGkgPSAwLCBsID0gbW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIG1vZGVsID0gdGhpcy5nZXRCeUNpZChtb2RlbHNbaV0pIHx8IHRoaXMuZ2V0KG1vZGVsc1tpXSk7CiAgICAgICAgaWYgKCFtb2RlbCkgY29udGludWU7CiAgICAgICAgZGVsZXRlIHRoaXMuX2J5SWRbbW9kZWwuaWRdOwogICAgICAgIGRlbGV0ZSB0aGlzLl9ieUNpZFttb2RlbC5jaWRdOwogICAgICAgIGluZGV4ID0gdGhpcy5pbmRleE9mKG1vZGVsKTsKICAgICAgICB0aGlzLm1vZGVscy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICAgIHRoaXMubGVuZ3RoLS07CiAgICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkgewogICAgICAgICAgb3B0aW9ucy5pbmRleCA9IGluZGV4OwogICAgICAgICAgbW9kZWwudHJpZ2dlcigncmVtb3ZlJywgbW9kZWwsIHRoaXMsIG9wdGlvbnMpOwogICAgICAgIH0KICAgICAgICB0aGlzLl9yZW1vdmVSZWZlcmVuY2UobW9kZWwpOwogICAgICB9CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBBZGQgYSBtb2RlbCB0byB0aGUgZW5kIG9mIHRoZSBjb2xsZWN0aW9uLgogICAgcHVzaDogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHsKICAgICAgbW9kZWwgPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWwsIG9wdGlvbnMpOwogICAgICB0aGlzLmFkZChtb2RlbCwgb3B0aW9ucyk7CiAgICAgIHJldHVybiBtb2RlbDsKICAgIH0sCgogICAgLy8gUmVtb3ZlIGEgbW9kZWwgZnJvbSB0aGUgZW5kIG9mIHRoZSBjb2xsZWN0aW9uLgogICAgcG9wOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHZhciBtb2RlbCA9IHRoaXMuYXQodGhpcy5sZW5ndGggLSAxKTsKICAgICAgdGhpcy5yZW1vdmUobW9kZWwsIG9wdGlvbnMpOwogICAgICByZXR1cm4gbW9kZWw7CiAgICB9LAoKICAgIC8vIEFkZCBhIG1vZGVsIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGNvbGxlY3Rpb24uCiAgICB1bnNoaWZ0OiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykgewogICAgICBtb2RlbCA9IHRoaXMuX3ByZXBhcmVNb2RlbChtb2RlbCwgb3B0aW9ucyk7CiAgICAgIHRoaXMuYWRkKG1vZGVsLCBfLmV4dGVuZCh7YXQ6IDB9LCBvcHRpb25zKSk7CiAgICAgIHJldHVybiBtb2RlbDsKICAgIH0sCgogICAgLy8gUmVtb3ZlIGEgbW9kZWwgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb2xsZWN0aW9uLgogICAgc2hpZnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgdmFyIG1vZGVsID0gdGhpcy5hdCgwKTsKICAgICAgdGhpcy5yZW1vdmUobW9kZWwsIG9wdGlvbnMpOwogICAgICByZXR1cm4gbW9kZWw7CiAgICB9LAoKICAgIC8vIFNsaWNlIG91dCBhIHN1Yi1hcnJheSBvZiBtb2RlbHMgZnJvbSB0aGUgY29sbGVjdGlvbi4KICAgIHNsaWNlOiBmdW5jdGlvbihiZWdpbiwgZW5kKSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVscy5zbGljZShiZWdpbiwgZW5kKTsKICAgIH0sCgogICAgLy8gR2V0IGEgbW9kZWwgZnJvbSB0aGUgc2V0IGJ5IGlkLgogICAgZ2V0OiBmdW5jdGlvbihpZCkgewogICAgICBpZiAoaWQgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDsKICAgICAgcmV0dXJuIHRoaXMuX2J5SWRbaWQuaWQgIT0gbnVsbCA/IGlkLmlkIDogaWRdOwogICAgfSwKCiAgICAvLyBHZXQgYSBtb2RlbCBmcm9tIHRoZSBzZXQgYnkgY2xpZW50IGlkLgogICAgZ2V0QnlDaWQ6IGZ1bmN0aW9uKGNpZCkgewogICAgICByZXR1cm4gY2lkICYmIHRoaXMuX2J5Q2lkW2NpZC5jaWQgfHwgY2lkXTsKICAgIH0sCgogICAgLy8gR2V0IHRoZSBtb2RlbCBhdCB0aGUgZ2l2ZW4gaW5kZXguCiAgICBhdDogZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgcmV0dXJuIHRoaXMubW9kZWxzW2luZGV4XTsKICAgIH0sCgogICAgLy8gUmV0dXJuIG1vZGVscyB3aXRoIG1hdGNoaW5nIGF0dHJpYnV0ZXMuIFVzZWZ1bCBmb3Igc2ltcGxlIGNhc2VzIG9mIGBmaWx0ZXJgLgogICAgd2hlcmU6IGZ1bmN0aW9uKGF0dHJzKSB7CiAgICAgIGlmIChfLmlzRW1wdHkoYXR0cnMpKSByZXR1cm4gW107CiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihtb2RlbCkgewogICAgICAgIGZvciAodmFyIGtleSBpbiBhdHRycykgewogICAgICAgICAgaWYgKGF0dHJzW2tleV0gIT09IG1vZGVsLmdldChrZXkpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9KTsKICAgIH0sCgogICAgLy8gRm9yY2UgdGhlIGNvbGxlY3Rpb24gdG8gcmUtc29ydCBpdHNlbGYuIFlvdSBkb24ndCBuZWVkIHRvIGNhbGwgdGhpcyB1bmRlcgogICAgLy8gbm9ybWFsIGNpcmN1bXN0YW5jZXMsIGFzIHRoZSBzZXQgd2lsbCBtYWludGFpbiBzb3J0IG9yZGVyIGFzIGVhY2ggaXRlbQogICAgLy8gaXMgYWRkZWQuCiAgICBzb3J0OiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIGlmICghdGhpcy5jb21wYXJhdG9yKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc29ydCBhIHNldCB3aXRob3V0IGEgY29tcGFyYXRvcicpOwogICAgICB9CgogICAgICBpZiAoXy5pc1N0cmluZyh0aGlzLmNvbXBhcmF0b3IpIHx8IHRoaXMuY29tcGFyYXRvci5sZW5ndGggPT09IDEpIHsKICAgICAgICB0aGlzLm1vZGVscyA9IHRoaXMuc29ydEJ5KHRoaXMuY29tcGFyYXRvciwgdGhpcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5tb2RlbHMuc29ydChfLmJpbmQodGhpcy5jb21wYXJhdG9yLCB0aGlzKSk7CiAgICAgIH0KCiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5zaWxlbnQpIHRoaXMudHJpZ2dlcigncmVzZXQnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFBsdWNrIGFuIGF0dHJpYnV0ZSBmcm9tIGVhY2ggbW9kZWwgaW4gdGhlIGNvbGxlY3Rpb24uCiAgICBwbHVjazogZnVuY3Rpb24oYXR0cikgewogICAgICByZXR1cm4gXy5pbnZva2UodGhpcy5tb2RlbHMsICdnZXQnLCBhdHRyKTsKICAgIH0sCgogICAgLy8gV2hlbiB5b3UgaGF2ZSBtb3JlIGl0ZW1zIHRoYW4geW91IHdhbnQgdG8gYWRkIG9yIHJlbW92ZSBpbmRpdmlkdWFsbHksCiAgICAvLyB5b3UgY2FuIHJlc2V0IHRoZSBlbnRpcmUgc2V0IHdpdGggYSBuZXcgbGlzdCBvZiBtb2RlbHMsIHdpdGhvdXQgZmlyaW5nCiAgICAvLyBhbnkgYGFkZGAgb3IgYHJlbW92ZWAgZXZlbnRzLiBGaXJlcyBgcmVzZXRgIHdoZW4gZmluaXNoZWQuCiAgICByZXNldDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5tb2RlbHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgdGhpcy5fcmVtb3ZlUmVmZXJlbmNlKHRoaXMubW9kZWxzW2ldKTsKICAgICAgfQogICAgICB0aGlzLl9yZXNldCgpOwogICAgICBpZiAobW9kZWxzKSB0aGlzLmFkZChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7CiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5zaWxlbnQpIHRoaXMudHJpZ2dlcigncmVzZXQnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIEZldGNoIHRoZSBkZWZhdWx0IHNldCBvZiBtb2RlbHMgZm9yIHRoaXMgY29sbGVjdGlvbiwgcmVzZXR0aW5nIHRoZQogICAgLy8gY29sbGVjdGlvbiB3aGVuIHRoZXkgYXJyaXZlLiBJZiBgYWRkOiB0cnVlYCBpcyBwYXNzZWQsIGFwcGVuZHMgdGhlCiAgICAvLyBtb2RlbHMgdG8gdGhlIGNvbGxlY3Rpb24gaW5zdGVhZCBvZiByZXNldHRpbmcuCiAgICBmZXRjaDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7CiAgICAgIHZhciBjb2xsZWN0aW9uID0gdGhpczsKICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7CiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3AsIHN0YXR1cywgeGhyKSB7CiAgICAgICAgY29sbGVjdGlvbltvcHRpb25zLmFkZCA/ICdhZGQnIDogJ3Jlc2V0J10oY29sbGVjdGlvbi5wYXJzZShyZXNwLCB4aHIpLCBvcHRpb25zKTsKICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhjb2xsZWN0aW9uLCByZXNwLCBvcHRpb25zKTsKICAgICAgfTsKICAgICAgcmV0dXJuIHRoaXMuc3luYygncmVhZCcsIHRoaXMsIG9wdGlvbnMpOwogICAgfSwKCiAgICAvLyBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgYSBtb2RlbCBpbiB0aGlzIGNvbGxlY3Rpb24uIEFkZCB0aGUgbW9kZWwgdG8gdGhlCiAgICAvLyBjb2xsZWN0aW9uIGltbWVkaWF0ZWx5LCB1bmxlc3MgYHdhaXQ6IHRydWVgIGlzIHBhc3NlZCwgaW4gd2hpY2ggY2FzZSB3ZQogICAgLy8gd2FpdCBmb3IgdGhlIHNlcnZlciB0byBhZ3JlZS4KICAgIGNyZWF0ZTogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHsKICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzOwogICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgbW9kZWwgPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWwsIG9wdGlvbnMpOwogICAgICBpZiAoIW1vZGVsKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmICghb3B0aW9ucy53YWl0KSBjb2xsZWN0aW9uLmFkZChtb2RlbCwgb3B0aW9ucyk7CiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzOwogICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihtb2RlbCwgcmVzcCwgb3B0aW9ucykgewogICAgICAgIGlmIChvcHRpb25zLndhaXQpIGNvbGxlY3Rpb24uYWRkKG1vZGVsLCBvcHRpb25zKTsKICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgIH07CiAgICAgIG1vZGVsLnNhdmUobnVsbCwgb3B0aW9ucyk7CiAgICAgIHJldHVybiBtb2RlbDsKICAgIH0sCgogICAgLy8gKipwYXJzZSoqIGNvbnZlcnRzIGEgcmVzcG9uc2UgaW50byBhIGxpc3Qgb2YgbW9kZWxzIHRvIGJlIGFkZGVkIHRvIHRoZQogICAgLy8gY29sbGVjdGlvbi4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaXMganVzdCB0byBwYXNzIGl0IHRocm91Z2guCiAgICBwYXJzZTogZnVuY3Rpb24ocmVzcCwgeGhyKSB7CiAgICAgIHJldHVybiByZXNwOwogICAgfSwKCiAgICAvLyBDcmVhdGUgYSBuZXcgY29sbGVjdGlvbiB3aXRoIGFuIGlkZW50aWNhbCBsaXN0IG9mIG1vZGVscyBhcyB0aGlzIG9uZS4KICAgIGNsb25lOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMubW9kZWxzKTsKICAgIH0sCgogICAgLy8gUHJveHkgdG8gXydzIGNoYWluLiBDYW4ndCBiZSBwcm94aWVkIHRoZSBzYW1lIHdheSB0aGUgcmVzdCBvZiB0aGUKICAgIC8vIHVuZGVyc2NvcmUgbWV0aG9kcyBhcmUgcHJveGllZCBiZWNhdXNlIGl0IHJlbGllcyBvbiB0aGUgdW5kZXJzY29yZQogICAgLy8gY29uc3RydWN0b3IuCiAgICBjaGFpbjogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBfKHRoaXMubW9kZWxzKS5jaGFpbigpOwogICAgfSwKCiAgICAvLyBSZXNldCBhbGwgaW50ZXJuYWwgc3RhdGUuIENhbGxlZCB3aGVuIHRoZSBjb2xsZWN0aW9uIGlzIHJlc2V0LgogICAgX3Jlc2V0OiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHRoaXMubGVuZ3RoID0gMDsKICAgICAgdGhpcy5tb2RlbHMgPSBbXTsKICAgICAgdGhpcy5fYnlJZCAgPSB7fTsKICAgICAgdGhpcy5fYnlDaWQgPSB7fTsKICAgIH0sCgogICAgLy8gUHJlcGFyZSBhIG1vZGVsIG9yIGhhc2ggb2YgYXR0cmlidXRlcyB0byBiZSBhZGRlZCB0byB0aGlzIGNvbGxlY3Rpb24uCiAgICBfcHJlcGFyZU1vZGVsOiBmdW5jdGlvbihhdHRycywgb3B0aW9ucykgewogICAgICBpZiAoYXR0cnMgaW5zdGFuY2VvZiBNb2RlbCkgewogICAgICAgIGlmICghYXR0cnMuY29sbGVjdGlvbikgYXR0cnMuY29sbGVjdGlvbiA9IHRoaXM7CiAgICAgICAgcmV0dXJuIGF0dHJzOwogICAgICB9CiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICAgIG9wdGlvbnMuY29sbGVjdGlvbiA9IHRoaXM7CiAgICAgIHZhciBtb2RlbCA9IG5ldyB0aGlzLm1vZGVsKGF0dHJzLCBvcHRpb25zKTsKICAgICAgaWYgKCFtb2RlbC5fdmFsaWRhdGUobW9kZWwuYXR0cmlidXRlcywgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKICAgICAgcmV0dXJuIG1vZGVsOwogICAgfSwKCiAgICAvLyBJbnRlcm5hbCBtZXRob2QgdG8gcmVtb3ZlIGEgbW9kZWwncyB0aWVzIHRvIGEgY29sbGVjdGlvbi4KICAgIF9yZW1vdmVSZWZlcmVuY2U6IGZ1bmN0aW9uKG1vZGVsKSB7CiAgICAgIGlmICh0aGlzID09PSBtb2RlbC5jb2xsZWN0aW9uKSBkZWxldGUgbW9kZWwuY29sbGVjdGlvbjsKICAgICAgbW9kZWwub2ZmKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpOwogICAgfSwKCiAgICAvLyBJbnRlcm5hbCBtZXRob2QgY2FsbGVkIGV2ZXJ5IHRpbWUgYSBtb2RlbCBpbiB0aGUgc2V0IGZpcmVzIGFuIGV2ZW50LgogICAgLy8gU2V0cyBuZWVkIHRvIHVwZGF0ZSB0aGVpciBpbmRleGVzIHdoZW4gbW9kZWxzIGNoYW5nZSBpZHMuIEFsbCBvdGhlcgogICAgLy8gZXZlbnRzIHNpbXBseSBwcm94eSB0aHJvdWdoLiAiYWRkIiBhbmQgInJlbW92ZSIgZXZlbnRzIHRoYXQgb3JpZ2luYXRlCiAgICAvLyBpbiBvdGhlciBjb2xsZWN0aW9ucyBhcmUgaWdub3JlZC4KICAgIF9vbk1vZGVsRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50LCBtb2RlbCwgY29sbGVjdGlvbiwgb3B0aW9ucykgewogICAgICBpZiAoKGV2ZW50ID09PSAnYWRkJyB8fCBldmVudCA9PT0gJ3JlbW92ZScpICYmIGNvbGxlY3Rpb24gIT09IHRoaXMpIHJldHVybjsKICAgICAgaWYgKGV2ZW50ID09PSAnZGVzdHJveScpIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTsKICAgICAgaWYgKG1vZGVsICYmIGV2ZW50ID09PSAnY2hhbmdlOicgKyBtb2RlbC5pZEF0dHJpYnV0ZSkgewogICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLnByZXZpb3VzKG1vZGVsLmlkQXR0cmlidXRlKV07CiAgICAgICAgaWYgKG1vZGVsLmlkICE9IG51bGwpIHRoaXMuX2J5SWRbbW9kZWwuaWRdID0gbW9kZWw7CiAgICAgIH0KICAgICAgdGhpcy50cmlnZ2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogIH0pOwoKICAvLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB3ZSB3YW50IHRvIGltcGxlbWVudCBvbiB0aGUgQ29sbGVjdGlvbi4KICB2YXIgbWV0aG9kcyA9IFsnZm9yRWFjaCcsICdlYWNoJywgJ21hcCcsICdjb2xsZWN0JywgJ3JlZHVjZScsICdmb2xkbCcsCiAgICAnaW5qZWN0JywgJ3JlZHVjZVJpZ2h0JywgJ2ZvbGRyJywgJ2ZpbmQnLCAnZGV0ZWN0JywgJ2ZpbHRlcicsICdzZWxlY3QnLAogICAgJ3JlamVjdCcsICdldmVyeScsICdhbGwnLCAnc29tZScsICdhbnknLCAnaW5jbHVkZScsICdjb250YWlucycsICdpbnZva2UnLAogICAgJ21heCcsICdtaW4nLCAnc29ydGVkSW5kZXgnLCAndG9BcnJheScsICdzaXplJywgJ2ZpcnN0JywgJ2hlYWQnLCAndGFrZScsCiAgICAnaW5pdGlhbCcsICdyZXN0JywgJ3RhaWwnLCAnbGFzdCcsICd3aXRob3V0JywgJ2luZGV4T2YnLCAnc2h1ZmZsZScsCiAgICAnbGFzdEluZGV4T2YnLCAnaXNFbXB0eSddOwoKICAvLyBNaXggaW4gZWFjaCBVbmRlcnNjb3JlIG1ldGhvZCBhcyBhIHByb3h5IHRvIGBDb2xsZWN0aW9uI21vZGVsc2AuCiAgXy5lYWNoKG1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkgewogICAgQ29sbGVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgYXJncy51bnNoaWZ0KHRoaXMubW9kZWxzKTsKICAgICAgcmV0dXJuIF9bbWV0aG9kXS5hcHBseShfLCBhcmdzKTsKICAgIH07CiAgfSk7CgogIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHRha2UgYSBwcm9wZXJ0eSBuYW1lIGFzIGFuIGFyZ3VtZW50LgogIHZhciBhdHRyaWJ1dGVNZXRob2RzID0gWydncm91cEJ5JywgJ2NvdW50QnknLCAnc29ydEJ5J107CgogIC8vIFVzZSBhdHRyaWJ1dGVzIGluc3RlYWQgb2YgcHJvcGVydGllcy4KICBfLmVhY2goYXR0cmlidXRlTWV0aG9kcywgZnVuY3Rpb24obWV0aG9kKSB7CiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHsKICAgICAgdmFyIGl0ZXJhdG9yID0gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlIDogZnVuY3Rpb24obW9kZWwpIHsKICAgICAgICByZXR1cm4gbW9kZWwuZ2V0KHZhbHVlKTsKICAgICAgfTsKICAgICAgcmV0dXJuIF9bbWV0aG9kXSh0aGlzLm1vZGVscywgaXRlcmF0b3IsIGNvbnRleHQpOwogICAgfTsKICB9KTsKCiAgLy8gQmFja2JvbmUuUm91dGVyCiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBSb3V0ZXJzIG1hcCBmYXV4LVVSTHMgdG8gYWN0aW9ucywgYW5kIGZpcmUgZXZlbnRzIHdoZW4gcm91dGVzIGFyZQogIC8vIG1hdGNoZWQuIENyZWF0aW5nIGEgbmV3IG9uZSBzZXRzIGl0cyBgcm91dGVzYCBoYXNoLCBpZiBub3Qgc2V0IHN0YXRpY2FsbHkuCiAgdmFyIFJvdXRlciA9IEJhY2tib25lLlJvdXRlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICBpZiAob3B0aW9ucy5yb3V0ZXMpIHRoaXMucm91dGVzID0gb3B0aW9ucy5yb3V0ZXM7CiAgICB0aGlzLl9iaW5kUm91dGVzKCk7CiAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9OwoKICAvLyBDYWNoZWQgcmVndWxhciBleHByZXNzaW9ucyBmb3IgbWF0Y2hpbmcgbmFtZWQgcGFyYW0gcGFydHMgYW5kIHNwbGF0dGVkCiAgLy8gcGFydHMgb2Ygcm91dGUgc3RyaW5ncy4KICB2YXIgb3B0aW9uYWxQYXJhbSA9IC9cKCguKj8pXCkvZzsKICB2YXIgbmFtZWRQYXJhbSAgICA9IC86XHcrL2c7CiAgdmFyIHNwbGF0UGFyYW0gICAgPSAvXCpcdysvZzsKICB2YXIgZXNjYXBlUmVnRXhwICA9IC9bLXt9W1xdKz8uLFxcXiR8I1xzXS9nOwoKICAvLyBTZXQgdXAgYWxsIGluaGVyaXRhYmxlICoqQmFja2JvbmUuUm91dGVyKiogcHJvcGVydGllcyBhbmQgbWV0aG9kcy4KICBfLmV4dGVuZChSb3V0ZXIucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAvLyBJbml0aWFsaXplIGlzIGFuIGVtcHR5IGZ1bmN0aW9uIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGl0IHdpdGggeW91ciBvd24KICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLgogICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXt9LAoKICAgIC8vIE1hbnVhbGx5IGJpbmQgYSBzaW5nbGUgbmFtZWQgcm91dGUgdG8gYSBjYWxsYmFjay4gRm9yIGV4YW1wbGU6CiAgICAvLwogICAgLy8gICAgIHRoaXMucm91dGUoJ3NlYXJjaC86cXVlcnkvcDpudW0nLCAnc2VhcmNoJywgZnVuY3Rpb24ocXVlcnksIG51bSkgewogICAgLy8gICAgICAgLi4uCiAgICAvLyAgICAgfSk7CiAgICAvLwogICAgcm91dGU6IGZ1bmN0aW9uKHJvdXRlLCBuYW1lLCBjYWxsYmFjaykgewogICAgICBpZiAoIV8uaXNSZWdFeHAocm91dGUpKSByb3V0ZSA9IHRoaXMuX3JvdXRlVG9SZWdFeHAocm91dGUpOwogICAgICBpZiAoIWNhbGxiYWNrKSBjYWxsYmFjayA9IHRoaXNbbmFtZV07CiAgICAgIEJhY2tib25lLmhpc3Rvcnkucm91dGUocm91dGUsIF8uYmluZChmdW5jdGlvbihmcmFnbWVudCkgewogICAgICAgIHZhciBhcmdzID0gdGhpcy5fZXh0cmFjdFBhcmFtZXRlcnMocm91dGUsIGZyYWdtZW50KTsKICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgICB0aGlzLnRyaWdnZXIuYXBwbHkodGhpcywgWydyb3V0ZTonICsgbmFtZV0uY29uY2F0KGFyZ3MpKTsKICAgICAgICBCYWNrYm9uZS5oaXN0b3J5LnRyaWdnZXIoJ3JvdXRlJywgdGhpcywgbmFtZSwgYXJncyk7CiAgICAgIH0sIHRoaXMpKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFNpbXBsZSBwcm94eSB0byBgQmFja2JvbmUuaGlzdG9yeWAgdG8gc2F2ZSBhIGZyYWdtZW50IGludG8gdGhlIGhpc3RvcnkuCiAgICBuYXZpZ2F0ZTogZnVuY3Rpb24oZnJhZ21lbnQsIG9wdGlvbnMpIHsKICAgICAgQmFja2JvbmUuaGlzdG9yeS5uYXZpZ2F0ZShmcmFnbWVudCwgb3B0aW9ucyk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBCaW5kIGFsbCBkZWZpbmVkIHJvdXRlcyB0byBgQmFja2JvbmUuaGlzdG9yeWAuIFdlIGhhdmUgdG8gcmV2ZXJzZSB0aGUKICAgIC8vIG9yZGVyIG9mIHRoZSByb3V0ZXMgaGVyZSB0byBzdXBwb3J0IGJlaGF2aW9yIHdoZXJlIHRoZSBtb3N0IGdlbmVyYWwKICAgIC8vIHJvdXRlcyBjYW4gYmUgZGVmaW5lZCBhdCB0aGUgYm90dG9tIG9mIHRoZSByb3V0ZSBtYXAuCiAgICBfYmluZFJvdXRlczogZnVuY3Rpb24oKSB7CiAgICAgIGlmICghdGhpcy5yb3V0ZXMpIHJldHVybjsKICAgICAgdmFyIHJvdXRlcyA9IFtdOwogICAgICBmb3IgKHZhciByb3V0ZSBpbiB0aGlzLnJvdXRlcykgewogICAgICAgIHJvdXRlcy51bnNoaWZ0KFtyb3V0ZSwgdGhpcy5yb3V0ZXNbcm91dGVdXSk7CiAgICAgIH0KICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSByb3V0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgdGhpcy5yb3V0ZShyb3V0ZXNbaV1bMF0sIHJvdXRlc1tpXVsxXSwgdGhpc1tyb3V0ZXNbaV1bMV1dKTsKICAgICAgfQogICAgfSwKCiAgICAvLyBDb252ZXJ0IGEgcm91dGUgc3RyaW5nIGludG8gYSByZWd1bGFyIGV4cHJlc3Npb24sIHN1aXRhYmxlIGZvciBtYXRjaGluZwogICAgLy8gYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbiBoYXNoLgogICAgX3JvdXRlVG9SZWdFeHA6IGZ1bmN0aW9uKHJvdXRlKSB7CiAgICAgIHJvdXRlID0gcm91dGUucmVwbGFjZShlc2NhcGVSZWdFeHAsICdcXCQmJykKICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKG9wdGlvbmFsUGFyYW0sICcoPzokMSk/JykKICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKG5hbWVkUGFyYW0sICcoW15cL10rKScpCiAgICAgICAgICAgICAgICAgICAucmVwbGFjZShzcGxhdFBhcmFtLCAnKC4qPyknKTsKICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcm91dGUgKyAnJCcpOwogICAgfSwKCiAgICAvLyBHaXZlbiBhIHJvdXRlLCBhbmQgYSBVUkwgZnJhZ21lbnQgdGhhdCBpdCBtYXRjaGVzLCByZXR1cm4gdGhlIGFycmF5IG9mCiAgICAvLyBleHRyYWN0ZWQgcGFyYW1ldGVycy4KICAgIF9leHRyYWN0UGFyYW1ldGVyczogZnVuY3Rpb24ocm91dGUsIGZyYWdtZW50KSB7CiAgICAgIHJldHVybiByb3V0ZS5leGVjKGZyYWdtZW50KS5zbGljZSgxKTsKICAgIH0KCiAgfSk7CgogIC8vIEJhY2tib25lLkhpc3RvcnkKICAvLyAtLS0tLS0tLS0tLS0tLS0tCgogIC8vIEhhbmRsZXMgY3Jvc3MtYnJvd3NlciBoaXN0b3J5IG1hbmFnZW1lbnQsIGJhc2VkIG9uIFVSTCBmcmFnbWVudHMuIElmIHRoZQogIC8vIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBgb25oYXNoY2hhbmdlYCwgZmFsbHMgYmFjayB0byBwb2xsaW5nLgogIHZhciBIaXN0b3J5ID0gQmFja2JvbmUuSGlzdG9yeSA9IGZ1bmN0aW9uKCkgewogICAgdGhpcy5oYW5kbGVycyA9IFtdOwogICAgXy5iaW5kQWxsKHRoaXMsICdjaGVja1VybCcpOwoKICAgIC8vICMxNjUzIC0gRW5zdXJlIHRoYXQgYEhpc3RvcnlgIGNhbiBiZSB1c2VkIG91dHNpZGUgb2YgdGhlIGJyb3dzZXIuCiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgdGhpcy5sb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjsKICAgICAgdGhpcy5oaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7CiAgICB9CiAgfTsKCiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBjbGVhbmluZyBsZWFkaW5nIGhhc2hlcyBhbmQgc2xhc2hlcy4KICB2YXIgcm91dGVTdHJpcHBlciA9IC9eWyNcL10vOwoKICAvLyBDYWNoZWQgcmVnZXggZm9yIHN0cmlwcGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzLgogIHZhciByb290U3RyaXBwZXIgPSAvXlwvK3xcLyskL2c7CgogIC8vIENhY2hlZCByZWdleCBmb3IgZGV0ZWN0aW5nIE1TSUUuCiAgdmFyIGlzRXhwbG9yZXIgPSAvbXNpZSBbXHcuXSsvOwoKICAvLyBDYWNoZWQgcmVnZXggZm9yIHJlbW92aW5nIGEgdHJhaWxpbmcgc2xhc2guCiAgdmFyIHRyYWlsaW5nU2xhc2ggPSAvXC8kLzsKCiAgLy8gSGFzIHRoZSBoaXN0b3J5IGhhbmRsaW5nIGFscmVhZHkgYmVlbiBzdGFydGVkPwogIEhpc3Rvcnkuc3RhcnRlZCA9IGZhbHNlOwoKICAvLyBTZXQgdXAgYWxsIGluaGVyaXRhYmxlICoqQmFja2JvbmUuSGlzdG9yeSoqIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMuCiAgXy5leHRlbmQoSGlzdG9yeS5wcm90b3R5cGUsIEV2ZW50cywgewoKICAgIC8vIFRoZSBkZWZhdWx0IGludGVydmFsIHRvIHBvbGwgZm9yIGhhc2ggY2hhbmdlcywgaWYgbmVjZXNzYXJ5LCBpcwogICAgLy8gdHdlbnR5IHRpbWVzIGEgc2Vjb25kLgogICAgaW50ZXJ2YWw6IDUwLAoKICAgIC8vIEdldHMgdGhlIHRydWUgaGFzaCB2YWx1ZS4gQ2Fubm90IHVzZSBsb2NhdGlvbi5oYXNoIGRpcmVjdGx5IGR1ZSB0byBidWcKICAgIC8vIGluIEZpcmVmb3ggd2hlcmUgbG9jYXRpb24uaGFzaCB3aWxsIGFsd2F5cyBiZSBkZWNvZGVkLgogICAgZ2V0SGFzaDogZnVuY3Rpb24od2luZG93KSB7CiAgICAgIHZhciBtYXRjaCA9ICh3aW5kb3cgfHwgdGhpcykubG9jYXRpb24uaHJlZi5tYXRjaCgvIyguKikkLyk7CiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJyc7CiAgICB9LAoKICAgIC8vIEdldCB0aGUgY3Jvc3MtYnJvd3NlciBub3JtYWxpemVkIFVSTCBmcmFnbWVudCwgZWl0aGVyIGZyb20gdGhlIFVSTCwKICAgIC8vIHRoZSBoYXNoLCBvciB0aGUgb3ZlcnJpZGUuCiAgICBnZXRGcmFnbWVudDogZnVuY3Rpb24oZnJhZ21lbnQsIGZvcmNlUHVzaFN0YXRlKSB7CiAgICAgIGlmIChmcmFnbWVudCA9PSBudWxsKSB7CiAgICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSB8fCAhdGhpcy5fd2FudHNIYXNoQ2hhbmdlIHx8IGZvcmNlUHVzaFN0YXRlKSB7CiAgICAgICAgICBmcmFnbWVudCA9IHRoaXMubG9jYXRpb24ucGF0aG5hbWU7CiAgICAgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdC5yZXBsYWNlKHRyYWlsaW5nU2xhc2gsICcnKTsKICAgICAgICAgIGlmICghZnJhZ21lbnQuaW5kZXhPZihyb290KSkgZnJhZ21lbnQgPSBmcmFnbWVudC5zdWJzdHIocm9vdC5sZW5ndGgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZ2V0SGFzaCgpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGZyYWdtZW50LnJlcGxhY2Uocm91dGVTdHJpcHBlciwgJycpKTsKICAgIH0sCgogICAgLy8gU3RhcnQgdGhlIGhhc2ggY2hhbmdlIGhhbmRsaW5nLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBjdXJyZW50IFVSTCBtYXRjaGVzCiAgICAvLyBhbiBleGlzdGluZyByb3V0ZSwgYW5kIGBmYWxzZWAgb3RoZXJ3aXNlLgogICAgc3RhcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgaWYgKEhpc3Rvcnkuc3RhcnRlZCkgdGhyb3cgbmV3IEVycm9yKCJCYWNrYm9uZS5oaXN0b3J5IGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZCIpOwogICAgICBIaXN0b3J5LnN0YXJ0ZWQgPSB0cnVlOwoKICAgICAgLy8gRmlndXJlIG91dCB0aGUgaW5pdGlhbCBjb25maWd1cmF0aW9uLiBEbyB3ZSBuZWVkIGFuIGlmcmFtZT8KICAgICAgLy8gSXMgcHVzaFN0YXRlIGRlc2lyZWQgLi4uIGlzIGl0IGF2YWlsYWJsZT8KICAgICAgdGhpcy5vcHRpb25zICAgICAgICAgID0gXy5leHRlbmQoe30sIHtyb290OiAnLyd9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpOwogICAgICB0aGlzLnJvb3QgICAgICAgICAgICAgPSB0aGlzLm9wdGlvbnMucm9vdDsKICAgICAgdGhpcy5fd2FudHNIYXNoQ2hhbmdlID0gdGhpcy5vcHRpb25zLmhhc2hDaGFuZ2UgIT09IGZhbHNlOwogICAgICB0aGlzLl93YW50c1B1c2hTdGF0ZSAgPSAhIXRoaXMub3B0aW9ucy5wdXNoU3RhdGU7CiAgICAgIHRoaXMuX2hhc1B1c2hTdGF0ZSAgICA9ICEhKHRoaXMub3B0aW9ucy5wdXNoU3RhdGUgJiYgdGhpcy5oaXN0b3J5ICYmIHRoaXMuaGlzdG9yeS5wdXNoU3RhdGUpOwogICAgICB2YXIgZnJhZ21lbnQgICAgICAgICAgPSB0aGlzLmdldEZyYWdtZW50KCk7CiAgICAgIHZhciBkb2NNb2RlICAgICAgICAgICA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTsKICAgICAgdmFyIG9sZElFICAgICAgICAgICAgID0gKGlzRXhwbG9yZXIuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpICYmICghZG9jTW9kZSB8fCBkb2NNb2RlIDw9IDcpKTsKCiAgICAgIC8vIE5vcm1hbGl6ZSByb290IHRvIGFsd2F5cyBpbmNsdWRlIGEgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2guCiAgICAgIHRoaXMucm9vdCA9ICgnLycgKyB0aGlzLnJvb3QgKyAnLycpLnJlcGxhY2Uocm9vdFN0cmlwcGVyLCAnLycpOwoKICAgICAgaWYgKG9sZElFICYmIHRoaXMuX3dhbnRzSGFzaENoYW5nZSkgewogICAgICAgIHRoaXMuaWZyYW1lID0gQmFja2JvbmUuJCgnPGlmcmFtZSBzcmM9ImphdmFzY3JpcHQ6MCIgdGFiaW5kZXg9Ii0xIiAvPicpLmhpZGUoKS5hcHBlbmRUbygnYm9keScpWzBdLmNvbnRlbnRXaW5kb3c7CiAgICAgICAgdGhpcy5uYXZpZ2F0ZShmcmFnbWVudCk7CiAgICAgIH0KCiAgICAgIC8vIERlcGVuZGluZyBvbiB3aGV0aGVyIHdlJ3JlIHVzaW5nIHB1c2hTdGF0ZSBvciBoYXNoZXMsIGFuZCB3aGV0aGVyCiAgICAgIC8vICdvbmhhc2hjaGFuZ2UnIGlzIHN1cHBvcnRlZCwgZGV0ZXJtaW5lIGhvdyB3ZSBjaGVjayB0aGUgVVJMIHN0YXRlLgogICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlKSB7CiAgICAgICAgQmFja2JvbmUuJCh3aW5kb3cpLmJpbmQoJ3BvcHN0YXRlJywgdGhpcy5jaGVja1VybCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlICYmICgnb25oYXNoY2hhbmdlJyBpbiB3aW5kb3cpICYmICFvbGRJRSkgewogICAgICAgIEJhY2tib25lLiQod2luZG93KS5iaW5kKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlKSB7CiAgICAgICAgdGhpcy5fY2hlY2tVcmxJbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMuY2hlY2tVcmwsIHRoaXMuaW50ZXJ2YWwpOwogICAgICB9CgogICAgICAvLyBEZXRlcm1pbmUgaWYgd2UgbmVlZCB0byBjaGFuZ2UgdGhlIGJhc2UgdXJsLCBmb3IgYSBwdXNoU3RhdGUgbGluawogICAgICAvLyBvcGVuZWQgYnkgYSBub24tcHVzaFN0YXRlIGJyb3dzZXIuCiAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDsKICAgICAgdmFyIGxvYyA9IHRoaXMubG9jYXRpb247CiAgICAgIHZhciBhdFJvb3QgPSBsb2MucGF0aG5hbWUucmVwbGFjZSgvW15cL10kLywgJyQmLycpID09PSB0aGlzLnJvb3Q7CgogICAgICAvLyBJZiB3ZSd2ZSBzdGFydGVkIG9mZiB3aXRoIGEgcm91dGUgZnJvbSBhIGBwdXNoU3RhdGVgLWVuYWJsZWQgYnJvd3NlciwKICAgICAgLy8gYnV0IHdlJ3JlIGN1cnJlbnRseSBpbiBhIGJyb3dzZXIgdGhhdCBkb2Vzbid0IHN1cHBvcnQgaXQuLi4KICAgICAgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSAmJiB0aGlzLl93YW50c1B1c2hTdGF0ZSAmJiAhdGhpcy5faGFzUHVzaFN0YXRlICYmICFhdFJvb3QpIHsKICAgICAgICB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChudWxsLCB0cnVlKTsKICAgICAgICB0aGlzLmxvY2F0aW9uLnJlcGxhY2UodGhpcy5yb290ICsgdGhpcy5sb2NhdGlvbi5zZWFyY2ggKyAnIycgKyB0aGlzLmZyYWdtZW50KTsKICAgICAgICAvLyBSZXR1cm4gaW1tZWRpYXRlbHkgYXMgYnJvd3NlciB3aWxsIGRvIHJlZGlyZWN0IHRvIG5ldyB1cmwKICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgIC8vIE9yIGlmIHdlJ3ZlIHN0YXJ0ZWQgb3V0IHdpdGggYSBoYXNoLWJhc2VkIHJvdXRlLCBidXQgd2UncmUgY3VycmVudGx5CiAgICAgIC8vIGluIGEgYnJvd3NlciB3aGVyZSBpdCBjb3VsZCBiZSBgcHVzaFN0YXRlYC1iYXNlZCBpbnN0ZWFkLi4uCiAgICAgIH0gZWxzZSBpZiAodGhpcy5fd2FudHNQdXNoU3RhdGUgJiYgdGhpcy5faGFzUHVzaFN0YXRlICYmIGF0Um9vdCAmJiBsb2MuaGFzaCkgewogICAgICAgIHRoaXMuZnJhZ21lbnQgPSB0aGlzLmdldEhhc2goKS5yZXBsYWNlKHJvdXRlU3RyaXBwZXIsICcnKTsKICAgICAgICB0aGlzLmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBkb2N1bWVudC50aXRsZSwgdGhpcy5yb290ICsgdGhpcy5mcmFnbWVudCArIGxvYy5zZWFyY2gpOwogICAgICB9CgogICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaWxlbnQpIHJldHVybiB0aGlzLmxvYWRVcmwoKTsKICAgIH0sCgogICAgLy8gRGlzYWJsZSBCYWNrYm9uZS5oaXN0b3J5LCBwZXJoYXBzIHRlbXBvcmFyaWx5LiBOb3QgdXNlZnVsIGluIGEgcmVhbCBhcHAsCiAgICAvLyBidXQgcG9zc2libHkgdXNlZnVsIGZvciB1bml0IHRlc3RpbmcgUm91dGVycy4KICAgIHN0b3A6IGZ1bmN0aW9uKCkgewogICAgICBCYWNrYm9uZS4kKHdpbmRvdykudW5iaW5kKCdwb3BzdGF0ZScsIHRoaXMuY2hlY2tVcmwpLnVuYmluZCgnaGFzaGNoYW5nZScsIHRoaXMuY2hlY2tVcmwpOwogICAgICBjbGVhckludGVydmFsKHRoaXMuX2NoZWNrVXJsSW50ZXJ2YWwpOwogICAgICBIaXN0b3J5LnN0YXJ0ZWQgPSBmYWxzZTsKICAgIH0sCgogICAgLy8gQWRkIGEgcm91dGUgdG8gYmUgdGVzdGVkIHdoZW4gdGhlIGZyYWdtZW50IGNoYW5nZXMuIFJvdXRlcyBhZGRlZCBsYXRlcgogICAgLy8gbWF5IG92ZXJyaWRlIHByZXZpb3VzIHJvdXRlcy4KICAgIHJvdXRlOiBmdW5jdGlvbihyb3V0ZSwgY2FsbGJhY2spIHsKICAgICAgdGhpcy5oYW5kbGVycy51bnNoaWZ0KHtyb3V0ZTogcm91dGUsIGNhbGxiYWNrOiBjYWxsYmFja30pOwogICAgfSwKCiAgICAvLyBDaGVja3MgdGhlIGN1cnJlbnQgVVJMIHRvIHNlZSBpZiBpdCBoYXMgY2hhbmdlZCwgYW5kIGlmIGl0IGhhcywKICAgIC8vIGNhbGxzIGBsb2FkVXJsYCwgbm9ybWFsaXppbmcgYWNyb3NzIHRoZSBoaWRkZW4gaWZyYW1lLgogICAgY2hlY2tVcmw6IGZ1bmN0aW9uKGUpIHsKICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldEZyYWdtZW50KCk7CiAgICAgIGlmIChjdXJyZW50ID09PSB0aGlzLmZyYWdtZW50ICYmIHRoaXMuaWZyYW1lKSB7CiAgICAgICAgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQodGhpcy5nZXRIYXNoKHRoaXMuaWZyYW1lKSk7CiAgICAgIH0KICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZnJhZ21lbnQpIHJldHVybiBmYWxzZTsKICAgICAgaWYgKHRoaXMuaWZyYW1lKSB0aGlzLm5hdmlnYXRlKGN1cnJlbnQpOwogICAgICB0aGlzLmxvYWRVcmwoKSB8fCB0aGlzLmxvYWRVcmwodGhpcy5nZXRIYXNoKCkpOwogICAgfSwKCiAgICAvLyBBdHRlbXB0IHRvIGxvYWQgdGhlIGN1cnJlbnQgVVJMIGZyYWdtZW50LiBJZiBhIHJvdXRlIHN1Y2NlZWRzIHdpdGggYQogICAgLy8gbWF0Y2gsIHJldHVybnMgYHRydWVgLiBJZiBubyBkZWZpbmVkIHJvdXRlcyBtYXRjaGVzIHRoZSBmcmFnbWVudCwKICAgIC8vIHJldHVybnMgYGZhbHNlYC4KICAgIGxvYWRVcmw6IGZ1bmN0aW9uKGZyYWdtZW50T3ZlcnJpZGUpIHsKICAgICAgdmFyIGZyYWdtZW50ID0gdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoZnJhZ21lbnRPdmVycmlkZSk7CiAgICAgIHZhciBtYXRjaGVkID0gXy5hbnkodGhpcy5oYW5kbGVycywgZnVuY3Rpb24oaGFuZGxlcikgewogICAgICAgIGlmIChoYW5kbGVyLnJvdXRlLnRlc3QoZnJhZ21lbnQpKSB7CiAgICAgICAgICBoYW5kbGVyLmNhbGxiYWNrKGZyYWdtZW50KTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBtYXRjaGVkOwogICAgfSwKCiAgICAvLyBTYXZlIGEgZnJhZ21lbnQgaW50byB0aGUgaGFzaCBoaXN0b3J5LCBvciByZXBsYWNlIHRoZSBVUkwgc3RhdGUgaWYgdGhlCiAgICAvLyAncmVwbGFjZScgb3B0aW9uIGlzIHBhc3NlZC4gWW91IGFyZSByZXNwb25zaWJsZSBmb3IgcHJvcGVybHkgVVJMLWVuY29kaW5nCiAgICAvLyB0aGUgZnJhZ21lbnQgaW4gYWR2YW5jZS4KICAgIC8vCiAgICAvLyBUaGUgb3B0aW9ucyBvYmplY3QgY2FuIGNvbnRhaW4gYHRyaWdnZXI6IHRydWVgIGlmIHlvdSB3aXNoIHRvIGhhdmUgdGhlCiAgICAvLyByb3V0ZSBjYWxsYmFjayBiZSBmaXJlZCAobm90IHVzdWFsbHkgZGVzaXJhYmxlKSwgb3IgYHJlcGxhY2U6IHRydWVgLCBpZgogICAgLy8geW91IHdpc2ggdG8gbW9kaWZ5IHRoZSBjdXJyZW50IFVSTCB3aXRob3V0IGFkZGluZyBhbiBlbnRyeSB0byB0aGUgaGlzdG9yeS4KICAgIG5hdmlnYXRlOiBmdW5jdGlvbihmcmFnbWVudCwgb3B0aW9ucykgewogICAgICBpZiAoIUhpc3Rvcnkuc3RhcnRlZCkgcmV0dXJuIGZhbHNlOwogICAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucyA9PT0gdHJ1ZSkgb3B0aW9ucyA9IHt0cmlnZ2VyOiBvcHRpb25zfTsKICAgICAgZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KGZyYWdtZW50IHx8ICcnKTsKICAgICAgaWYgKHRoaXMuZnJhZ21lbnQgPT09IGZyYWdtZW50KSByZXR1cm47CiAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDsKICAgICAgdmFyIHVybCA9IHRoaXMucm9vdCArIGZyYWdtZW50OwoKICAgICAgLy8gSWYgcHVzaFN0YXRlIGlzIGF2YWlsYWJsZSwgd2UgdXNlIGl0IHRvIHNldCB0aGUgZnJhZ21lbnQgYXMgYSByZWFsIFVSTC4KICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSkgewogICAgICAgIHRoaXMuaGlzdG9yeVtvcHRpb25zLnJlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXSh7fSwgZG9jdW1lbnQudGl0bGUsIHVybCk7CgogICAgICAvLyBJZiBoYXNoIGNoYW5nZXMgaGF2ZW4ndCBiZWVuIGV4cGxpY2l0bHkgZGlzYWJsZWQsIHVwZGF0ZSB0aGUgaGFzaAogICAgICAvLyBmcmFnbWVudCB0byBzdG9yZSBoaXN0b3J5LgogICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSkgewogICAgICAgIHRoaXMuX3VwZGF0ZUhhc2godGhpcy5sb2NhdGlvbiwgZnJhZ21lbnQsIG9wdGlvbnMucmVwbGFjZSk7CiAgICAgICAgaWYgKHRoaXMuaWZyYW1lICYmIChmcmFnbWVudCAhPT0gdGhpcy5nZXRGcmFnbWVudCh0aGlzLmdldEhhc2godGhpcy5pZnJhbWUpKSkpIHsKICAgICAgICAgIC8vIE9wZW5pbmcgYW5kIGNsb3NpbmcgdGhlIGlmcmFtZSB0cmlja3MgSUU3IGFuZCBlYXJsaWVyIHRvIHB1c2ggYQogICAgICAgICAgLy8gaGlzdG9yeSBlbnRyeSBvbiBoYXNoLXRhZyBjaGFuZ2UuICBXaGVuIHJlcGxhY2UgaXMgdHJ1ZSwgd2UgZG9uJ3QKICAgICAgICAgIC8vIHdhbnQgdGhpcy4KICAgICAgICAgIGlmKCFvcHRpb25zLnJlcGxhY2UpIHRoaXMuaWZyYW1lLmRvY3VtZW50Lm9wZW4oKS5jbG9zZSgpOwogICAgICAgICAgdGhpcy5fdXBkYXRlSGFzaCh0aGlzLmlmcmFtZS5sb2NhdGlvbiwgZnJhZ21lbnQsIG9wdGlvbnMucmVwbGFjZSk7CiAgICAgICAgfQoKICAgICAgLy8gSWYgeW91J3ZlIHRvbGQgdXMgdGhhdCB5b3UgZXhwbGljaXRseSBkb24ndCB3YW50IGZhbGxiYWNrIGhhc2hjaGFuZ2UtCiAgICAgIC8vIGJhc2VkIGhpc3RvcnksIHRoZW4gYG5hdmlnYXRlYCBiZWNvbWVzIGEgcGFnZSByZWZyZXNoLgogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLmxvY2F0aW9uLmFzc2lnbih1cmwpOwogICAgICB9CiAgICAgIGlmIChvcHRpb25zLnRyaWdnZXIpIHRoaXMubG9hZFVybChmcmFnbWVudCk7CiAgICB9LAoKICAgIC8vIFVwZGF0ZSB0aGUgaGFzaCBsb2NhdGlvbiwgZWl0aGVyIHJlcGxhY2luZyB0aGUgY3VycmVudCBlbnRyeSwgb3IgYWRkaW5nCiAgICAvLyBhIG5ldyBvbmUgdG8gdGhlIGJyb3dzZXIgaGlzdG9yeS4KICAgIF91cGRhdGVIYXNoOiBmdW5jdGlvbihsb2NhdGlvbiwgZnJhZ21lbnQsIHJlcGxhY2UpIHsKICAgICAgaWYgKHJlcGxhY2UpIHsKICAgICAgICB2YXIgaHJlZiA9IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvKGphdmFzY3JpcHQ6fCMpLiokLywgJycpOwogICAgICAgIGxvY2F0aW9uLnJlcGxhY2UoaHJlZiArICcjJyArIGZyYWdtZW50KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyAjMTY0OSAtIFNvbWUgYnJvd3NlcnMgcmVxdWlyZSB0aGF0IGBoYXNoYCBjb250YWlucyBhIGxlYWRpbmcgIy4KICAgICAgICBsb2NhdGlvbi5oYXNoID0gJyMnICsgZnJhZ21lbnQ7CiAgICAgIH0KICAgIH0KCiAgfSk7CgogIC8vIENyZWF0ZSB0aGUgZGVmYXVsdCBCYWNrYm9uZS5oaXN0b3J5LgogIEJhY2tib25lLmhpc3RvcnkgPSBuZXcgSGlzdG9yeTsKCiAgLy8gQmFja2JvbmUuVmlldwogIC8vIC0tLS0tLS0tLS0tLS0KCiAgLy8gQ3JlYXRpbmcgYSBCYWNrYm9uZS5WaWV3IGNyZWF0ZXMgaXRzIGluaXRpYWwgZWxlbWVudCBvdXRzaWRlIG9mIHRoZSBET00sCiAgLy8gaWYgYW4gZXhpc3RpbmcgZWxlbWVudCBpcyBub3QgcHJvdmlkZWQuLi4KICB2YXIgVmlldyA9IEJhY2tib25lLlZpZXcgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ3ZpZXcnKTsKICAgIHRoaXMuX2NvbmZpZ3VyZShvcHRpb25zIHx8IHt9KTsKICAgIHRoaXMuX2Vuc3VyZUVsZW1lbnQoKTsKICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpOwogIH07CgogIC8vIENhY2hlZCByZWdleCB0byBzcGxpdCBrZXlzIGZvciBgZGVsZWdhdGVgLgogIHZhciBkZWxlZ2F0ZUV2ZW50U3BsaXR0ZXIgPSAvXihcUyspXHMqKC4qKSQvOwoKICAvLyBMaXN0IG9mIHZpZXcgb3B0aW9ucyB0byBiZSBtZXJnZWQgYXMgcHJvcGVydGllcy4KICB2YXIgdmlld09wdGlvbnMgPSBbJ21vZGVsJywgJ2NvbGxlY3Rpb24nLCAnZWwnLCAnaWQnLCAnYXR0cmlidXRlcycsICdjbGFzc05hbWUnLCAndGFnTmFtZSddOwoKICAvLyBTZXQgdXAgYWxsIGluaGVyaXRhYmxlICoqQmFja2JvbmUuVmlldyoqIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMuCiAgXy5leHRlbmQoVmlldy5wcm90b3R5cGUsIEV2ZW50cywgewoKICAgIC8vIFRoZSBkZWZhdWx0IGB0YWdOYW1lYCBvZiBhIFZpZXcncyBlbGVtZW50IGlzIGAiZGl2ImAuCiAgICB0YWdOYW1lOiAnZGl2JywKCiAgICAvLyBqUXVlcnkgZGVsZWdhdGUgZm9yIGVsZW1lbnQgbG9va3VwLCBzY29wZWQgdG8gRE9NIGVsZW1lbnRzIHdpdGhpbiB0aGUKICAgIC8vIGN1cnJlbnQgdmlldy4gVGhpcyBzaG91bGQgYmUgcHJlZmVyZWQgdG8gZ2xvYmFsIGxvb2t1cHMgd2hlcmUgcG9zc2libGUuCiAgICAkOiBmdW5jdGlvbihzZWxlY3RvcikgewogICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChzZWxlY3Rvcik7CiAgICB9LAoKICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sCgogICAgLy8gKipyZW5kZXIqKiBpcyB0aGUgY29yZSBmdW5jdGlvbiB0aGF0IHlvdXIgdmlldyBzaG91bGQgb3ZlcnJpZGUsIGluIG9yZGVyCiAgICAvLyB0byBwb3B1bGF0ZSBpdHMgZWxlbWVudCAoYHRoaXMuZWxgKSwgd2l0aCB0aGUgYXBwcm9wcmlhdGUgSFRNTC4gVGhlCiAgICAvLyBjb252ZW50aW9uIGlzIGZvciAqKnJlbmRlcioqIHRvIGFsd2F5cyByZXR1cm4gYHRoaXNgLgogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIENsZWFuIHVwIHJlZmVyZW5jZXMgdG8gdGhpcyB2aWV3IGluIG9yZGVyIHRvIHByZXZlbnQgbGF0ZW50IGVmZmVjdHMgYW5kCiAgICAvLyBtZW1vcnkgbGVha3MuCiAgICBkaXNwb3NlOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7CiAgICAgIGlmICh0aGlzLm1vZGVsICYmIHRoaXMubW9kZWwub2ZmKSB0aGlzLm1vZGVsLm9mZihudWxsLCBudWxsLCB0aGlzKTsKICAgICAgaWYgKHRoaXMuY29sbGVjdGlvbiAmJiB0aGlzLmNvbGxlY3Rpb24ub2ZmKSB0aGlzLmNvbGxlY3Rpb24ub2ZmKG51bGwsIG51bGwsIHRoaXMpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gUmVtb3ZlIHRoaXMgdmlldyBmcm9tIHRoZSBET00uIE5vdGUgdGhhdCB0aGUgdmlldyBpc24ndCBwcmVzZW50IGluIHRoZQogICAgLy8gRE9NIGJ5IGRlZmF1bHQsIHNvIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IGJlIGEgbm8tb3AuCiAgICByZW1vdmU6IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmRpc3Bvc2UoKTsKICAgICAgdGhpcy4kZWwucmVtb3ZlKCk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBGb3Igc21hbGwgYW1vdW50cyBvZiBET00gRWxlbWVudHMsIHdoZXJlIGEgZnVsbC1ibG93biB0ZW1wbGF0ZSBpc24ndAogICAgLy8gbmVlZGVkLCB1c2UgKiptYWtlKiogdG8gbWFudWZhY3R1cmUgZWxlbWVudHMsIG9uZSBhdCBhIHRpbWUuCiAgICAvLwogICAgLy8gICAgIHZhciBlbCA9IHRoaXMubWFrZSgnbGknLCB7J2NsYXNzJzogJ3Jvdyd9LCB0aGlzLm1vZGVsLmVzY2FwZSgndGl0bGUnKSk7CiAgICAvLwogICAgbWFrZTogZnVuY3Rpb24odGFnTmFtZSwgYXR0cmlidXRlcywgY29udGVudCkgewogICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpOwogICAgICBpZiAoYXR0cmlidXRlcykgQmFja2JvbmUuJChlbCkuYXR0cihhdHRyaWJ1dGVzKTsKICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkgQmFja2JvbmUuJChlbCkuaHRtbChjb250ZW50KTsKICAgICAgcmV0dXJuIGVsOwogICAgfSwKCiAgICAvLyBDaGFuZ2UgdGhlIHZpZXcncyBlbGVtZW50IChgdGhpcy5lbGAgcHJvcGVydHkpLCBpbmNsdWRpbmcgZXZlbnQKICAgIC8vIHJlLWRlbGVnYXRpb24uCiAgICBzZXRFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBkZWxlZ2F0ZSkgewogICAgICBpZiAodGhpcy4kZWwpIHRoaXMudW5kZWxlZ2F0ZUV2ZW50cygpOwogICAgICB0aGlzLiRlbCA9IGVsZW1lbnQgaW5zdGFuY2VvZiBCYWNrYm9uZS4kID8gZWxlbWVudCA6IEJhY2tib25lLiQoZWxlbWVudCk7CiAgICAgIHRoaXMuZWwgPSB0aGlzLiRlbFswXTsKICAgICAgaWYgKGRlbGVnYXRlICE9PSBmYWxzZSkgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gU2V0IGNhbGxiYWNrcywgd2hlcmUgYHRoaXMuZXZlbnRzYCBpcyBhIGhhc2ggb2YKICAgIC8vCiAgICAvLyAqeyJldmVudCBzZWxlY3RvciI6ICJjYWxsYmFjayJ9KgogICAgLy8KICAgIC8vICAgICB7CiAgICAvLyAgICAgICAnbW91c2Vkb3duIC50aXRsZSc6ICAnZWRpdCcsCiAgICAvLyAgICAgICAnY2xpY2sgLmJ1dHRvbic6ICAgICAnc2F2ZScKICAgIC8vICAgICAgICdjbGljayAub3Blbic6ICAgICAgIGZ1bmN0aW9uKGUpIHsgLi4uIH0KICAgIC8vICAgICB9CiAgICAvLwogICAgLy8gcGFpcnMuIENhbGxiYWNrcyB3aWxsIGJlIGJvdW5kIHRvIHRoZSB2aWV3LCB3aXRoIGB0aGlzYCBzZXQgcHJvcGVybHkuCiAgICAvLyBVc2VzIGV2ZW50IGRlbGVnYXRpb24gZm9yIGVmZmljaWVuY3kuCiAgICAvLyBPbWl0dGluZyB0aGUgc2VsZWN0b3IgYmluZHMgdGhlIGV2ZW50IHRvIGB0aGlzLmVsYC4KICAgIC8vIFRoaXMgb25seSB3b3JrcyBmb3IgZGVsZWdhdGUtYWJsZSBldmVudHM6IG5vdCBgZm9jdXNgLCBgYmx1cmAsIGFuZAogICAgLy8gbm90IGBjaGFuZ2VgLCBgc3VibWl0YCwgYW5kIGByZXNldGAgaW4gSW50ZXJuZXQgRXhwbG9yZXIuCiAgICBkZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7CiAgICAgIGlmICghKGV2ZW50cyB8fCAoZXZlbnRzID0gXy5yZXN1bHQodGhpcywgJ2V2ZW50cycpKSkpIHJldHVybjsKICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7CiAgICAgIGZvciAodmFyIGtleSBpbiBldmVudHMpIHsKICAgICAgICB2YXIgbWV0aG9kID0gZXZlbnRzW2tleV07CiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24obWV0aG9kKSkgbWV0aG9kID0gdGhpc1tldmVudHNba2V5XV07CiAgICAgICAgaWYgKCFtZXRob2QpIHRocm93IG5ldyBFcnJvcignTWV0aG9kICInICsgZXZlbnRzW2tleV0gKyAnIiBkb2VzIG5vdCBleGlzdCcpOwogICAgICAgIHZhciBtYXRjaCA9IGtleS5tYXRjaChkZWxlZ2F0ZUV2ZW50U3BsaXR0ZXIpOwogICAgICAgIHZhciBldmVudE5hbWUgPSBtYXRjaFsxXSwgc2VsZWN0b3IgPSBtYXRjaFsyXTsKICAgICAgICBtZXRob2QgPSBfLmJpbmQobWV0aG9kLCB0aGlzKTsKICAgICAgICBldmVudE5hbWUgKz0gJy5kZWxlZ2F0ZUV2ZW50cycgKyB0aGlzLmNpZDsKICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICcnKSB7CiAgICAgICAgICB0aGlzLiRlbC5iaW5kKGV2ZW50TmFtZSwgbWV0aG9kKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kZWwuZGVsZWdhdGUoc2VsZWN0b3IsIGV2ZW50TmFtZSwgbWV0aG9kKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgLy8gQ2xlYXJzIGFsbCBjYWxsYmFja3MgcHJldmlvdXNseSBib3VuZCB0byB0aGUgdmlldyB3aXRoIGBkZWxlZ2F0ZUV2ZW50c2AuCiAgICAvLyBZb3UgdXN1YWxseSBkb24ndCBuZWVkIHRvIHVzZSB0aGlzLCBidXQgbWF5IHdpc2ggdG8gaWYgeW91IGhhdmUgbXVsdGlwbGUKICAgIC8vIEJhY2tib25lIHZpZXdzIGF0dGFjaGVkIHRvIHRoZSBzYW1lIERPTSBlbGVtZW50LgogICAgdW5kZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuJGVsLnVuYmluZCgnLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkKTsKICAgIH0sCgogICAgLy8gUGVyZm9ybXMgdGhlIGluaXRpYWwgY29uZmlndXJhdGlvbiBvZiBhIFZpZXcgd2l0aCBhIHNldCBvZiBvcHRpb25zLgogICAgLy8gS2V5cyB3aXRoIHNwZWNpYWwgbWVhbmluZyAqKG1vZGVsLCBjb2xsZWN0aW9uLCBpZCwgY2xhc3NOYW1lKSosIGFyZQogICAgLy8gYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlIHZpZXcuCiAgICBfY29uZmlndXJlOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIGlmICh0aGlzLm9wdGlvbnMpIG9wdGlvbnMgPSBfLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTsKICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2aWV3T3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICB2YXIgYXR0ciA9IHZpZXdPcHRpb25zW2ldOwogICAgICAgIGlmIChvcHRpb25zW2F0dHJdKSB0aGlzW2F0dHJdID0gb3B0aW9uc1thdHRyXTsKICAgICAgfQogICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOwogICAgfSwKCiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgVmlldyBoYXMgYSBET00gZWxlbWVudCB0byByZW5kZXIgaW50by4KICAgIC8vIElmIGB0aGlzLmVsYCBpcyBhIHN0cmluZywgcGFzcyBpdCB0aHJvdWdoIGAkKClgLCB0YWtlIHRoZSBmaXJzdAogICAgLy8gbWF0Y2hpbmcgZWxlbWVudCwgYW5kIHJlLWFzc2lnbiBpdCB0byBgZWxgLiBPdGhlcndpc2UsIGNyZWF0ZQogICAgLy8gYW4gZWxlbWVudCBmcm9tIHRoZSBgaWRgLCBgY2xhc3NOYW1lYCBhbmQgYHRhZ05hbWVgIHByb3BlcnRpZXMuCiAgICBfZW5zdXJlRWxlbWVudDogZnVuY3Rpb24oKSB7CiAgICAgIGlmICghdGhpcy5lbCkgewogICAgICAgIHZhciBhdHRycyA9IF8uZXh0ZW5kKHt9LCBfLnJlc3VsdCh0aGlzLCAnYXR0cmlidXRlcycpKTsKICAgICAgICBpZiAodGhpcy5pZCkgYXR0cnMuaWQgPSBfLnJlc3VsdCh0aGlzLCAnaWQnKTsKICAgICAgICBpZiAodGhpcy5jbGFzc05hbWUpIGF0dHJzWydjbGFzcyddID0gXy5yZXN1bHQodGhpcywgJ2NsYXNzTmFtZScpOwogICAgICAgIHRoaXMuc2V0RWxlbWVudCh0aGlzLm1ha2UoXy5yZXN1bHQodGhpcywgJ3RhZ05hbWUnKSwgYXR0cnMpLCBmYWxzZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zZXRFbGVtZW50KF8ucmVzdWx0KHRoaXMsICdlbCcpLCBmYWxzZSk7CiAgICAgIH0KICAgIH0KCiAgfSk7CgogIC8vIEJhY2tib25lLnN5bmMKICAvLyAtLS0tLS0tLS0tLS0tCgogIC8vIE1hcCBmcm9tIENSVUQgdG8gSFRUUCBmb3Igb3VyIGRlZmF1bHQgYEJhY2tib25lLnN5bmNgIGltcGxlbWVudGF0aW9uLgogIHZhciBtZXRob2RNYXAgPSB7CiAgICAnY3JlYXRlJzogJ1BPU1QnLAogICAgJ3VwZGF0ZSc6ICdQVVQnLAogICAgJ2RlbGV0ZSc6ICdERUxFVEUnLAogICAgJ3JlYWQnOiAgICdHRVQnCiAgfTsKCiAgLy8gT3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiB0byBjaGFuZ2UgdGhlIG1hbm5lciBpbiB3aGljaCBCYWNrYm9uZSBwZXJzaXN0cwogIC8vIG1vZGVscyB0byB0aGUgc2VydmVyLiBZb3Ugd2lsbCBiZSBwYXNzZWQgdGhlIHR5cGUgb2YgcmVxdWVzdCwgYW5kIHRoZQogIC8vIG1vZGVsIGluIHF1ZXN0aW9uLiBCeSBkZWZhdWx0LCBtYWtlcyBhIFJFU1RmdWwgQWpheCByZXF1ZXN0CiAgLy8gdG8gdGhlIG1vZGVsJ3MgYHVybCgpYC4gU29tZSBwb3NzaWJsZSBjdXN0b21pemF0aW9ucyBjb3VsZCBiZToKICAvLwogIC8vICogVXNlIGBzZXRUaW1lb3V0YCB0byBiYXRjaCByYXBpZC1maXJlIHVwZGF0ZXMgaW50byBhIHNpbmdsZSByZXF1ZXN0LgogIC8vICogU2VuZCB1cCB0aGUgbW9kZWxzIGFzIFhNTCBpbnN0ZWFkIG9mIEpTT04uCiAgLy8gKiBQZXJzaXN0IG1vZGVscyB2aWEgV2ViU29ja2V0cyBpbnN0ZWFkIG9mIEFqYXguCiAgLy8KICAvLyBUdXJuIG9uIGBCYWNrYm9uZS5lbXVsYXRlSFRUUGAgaW4gb3JkZXIgdG8gc2VuZCBgUFVUYCBhbmQgYERFTEVURWAgcmVxdWVzdHMKICAvLyBhcyBgUE9TVGAsIHdpdGggYSBgX21ldGhvZGAgcGFyYW1ldGVyIGNvbnRhaW5pbmcgdGhlIHRydWUgSFRUUCBtZXRob2QsCiAgLy8gYXMgd2VsbCBhcyBhbGwgcmVxdWVzdHMgd2l0aCB0aGUgYm9keSBhcyBgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkYAogIC8vIGluc3RlYWQgb2YgYGFwcGxpY2F0aW9uL2pzb25gIHdpdGggdGhlIG1vZGVsIGluIGEgcGFyYW0gbmFtZWQgYG1vZGVsYC4KICAvLyBVc2VmdWwgd2hlbiBpbnRlcmZhY2luZyB3aXRoIHNlcnZlci1zaWRlIGxhbmd1YWdlcyBsaWtlICoqUEhQKiogdGhhdCBtYWtlCiAgLy8gaXQgZGlmZmljdWx0IHRvIHJlYWQgdGhlIGJvZHkgb2YgYFBVVGAgcmVxdWVzdHMuCiAgQmFja2JvbmUuc3luYyA9IGZ1bmN0aW9uKG1ldGhvZCwgbW9kZWwsIG9wdGlvbnMpIHsKICAgIHZhciB0eXBlID0gbWV0aG9kTWFwW21ldGhvZF07CgogICAgLy8gRGVmYXVsdCBvcHRpb25zLCB1bmxlc3Mgc3BlY2lmaWVkLgogICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKCiAgICAvLyBEZWZhdWx0IEpTT04tcmVxdWVzdCBvcHRpb25zLgogICAgdmFyIHBhcmFtcyA9IHt0eXBlOiB0eXBlLCBkYXRhVHlwZTogJ2pzb24nfTsKCiAgICAvLyBFbnN1cmUgdGhhdCB3ZSBoYXZlIGEgVVJMLgogICAgaWYgKCFvcHRpb25zLnVybCkgewogICAgICBwYXJhbXMudXJsID0gXy5yZXN1bHQobW9kZWwsICd1cmwnKSB8fCB1cmxFcnJvcigpOwogICAgfQoKICAgIC8vIEVuc3VyZSB0aGF0IHdlIGhhdmUgdGhlIGFwcHJvcHJpYXRlIHJlcXVlc3QgZGF0YS4KICAgIGlmICghb3B0aW9ucy5kYXRhICYmIG1vZGVsICYmIChtZXRob2QgPT09ICdjcmVhdGUnIHx8IG1ldGhvZCA9PT0gJ3VwZGF0ZScpKSB7CiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJzsKICAgICAgcGFyYW1zLmRhdGEgPSBKU09OLnN0cmluZ2lmeShtb2RlbCk7CiAgICB9CgogICAgLy8gRm9yIG9sZGVyIHNlcnZlcnMsIGVtdWxhdGUgSlNPTiBieSBlbmNvZGluZyB0aGUgcmVxdWVzdCBpbnRvIGFuIEhUTUwtZm9ybS4KICAgIGlmIChCYWNrYm9uZS5lbXVsYXRlSlNPTikgewogICAgICBwYXJhbXMuY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJzsKICAgICAgcGFyYW1zLmRhdGEgPSBwYXJhbXMuZGF0YSA/IHttb2RlbDogcGFyYW1zLmRhdGF9IDoge307CiAgICB9CgogICAgLy8gRm9yIG9sZGVyIHNlcnZlcnMsIGVtdWxhdGUgSFRUUCBieSBtaW1pY2tpbmcgdGhlIEhUVFAgbWV0aG9kIHdpdGggYF9tZXRob2RgCiAgICAvLyBBbmQgYW4gYFgtSFRUUC1NZXRob2QtT3ZlcnJpZGVgIGhlYWRlci4KICAgIGlmIChCYWNrYm9uZS5lbXVsYXRlSFRUUCkgewogICAgICBpZiAodHlwZSA9PT0gJ1BVVCcgfHwgdHlwZSA9PT0gJ0RFTEVURScpIHsKICAgICAgICBpZiAoQmFja2JvbmUuZW11bGF0ZUpTT04pIHBhcmFtcy5kYXRhLl9tZXRob2QgPSB0eXBlOwogICAgICAgIHBhcmFtcy50eXBlID0gJ1BPU1QnOwogICAgICAgIHBhcmFtcy5iZWZvcmVTZW5kID0gZnVuY3Rpb24oeGhyKSB7CiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1IVFRQLU1ldGhvZC1PdmVycmlkZScsIHR5cGUpOwogICAgICAgIH07CiAgICAgIH0KICAgIH0KCiAgICAvLyBEb24ndCBwcm9jZXNzIGRhdGEgb24gYSBub24tR0VUIHJlcXVlc3QuCiAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdHRVQnICYmICFCYWNrYm9uZS5lbXVsYXRlSlNPTikgewogICAgICBwYXJhbXMucHJvY2Vzc0RhdGEgPSBmYWxzZTsKICAgIH0KCiAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3AsIHN0YXR1cywgeGhyKSB7CiAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKHJlc3AsIHN0YXR1cywgeGhyKTsKICAgICAgbW9kZWwudHJpZ2dlcignc3luYycsIG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgIH07CgogICAgdmFyIGVycm9yID0gb3B0aW9ucy5lcnJvcjsKICAgIG9wdGlvbnMuZXJyb3IgPSBmdW5jdGlvbih4aHIsIHN0YXR1cywgdGhyb3duKSB7CiAgICAgIGlmIChlcnJvcikgZXJyb3IobW9kZWwsIHhociwgb3B0aW9ucyk7CiAgICAgIG1vZGVsLnRyaWdnZXIoJ2Vycm9yJywgbW9kZWwsIHhociwgb3B0aW9ucyk7CiAgICB9OwoKICAgIC8vIE1ha2UgdGhlIHJlcXVlc3QsIGFsbG93aW5nIHRoZSB1c2VyIHRvIG92ZXJyaWRlIGFueSBBamF4IG9wdGlvbnMuCiAgICByZXR1cm4gQmFja2JvbmUuYWpheChfLmV4dGVuZChwYXJhbXMsIG9wdGlvbnMpKTsKICB9OwoKICAvLyBTZXQgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYEJhY2tib25lLmFqYXhgIHRvIHByb3h5IHRocm91Z2ggdG8gYCRgLgogIEJhY2tib25lLmFqYXggPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBCYWNrYm9uZS4kLmFqYXguYXBwbHkoQmFja2JvbmUuJCwgYXJndW1lbnRzKTsKICB9OwoKICAvLyBIZWxwZXJzCiAgLy8gLS0tLS0tLQoKICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY29ycmVjdGx5IHNldCB1cCB0aGUgcHJvdG90eXBlIGNoYWluLCBmb3Igc3ViY2xhc3Nlcy4KICAvLyBTaW1pbGFyIHRvIGBnb29nLmluaGVyaXRzYCwgYnV0IHVzZXMgYSBoYXNoIG9mIHByb3RvdHlwZSBwcm9wZXJ0aWVzIGFuZAogIC8vIGNsYXNzIHByb3BlcnRpZXMgdG8gYmUgZXh0ZW5kZWQuCiAgdmFyIGV4dGVuZCA9IGZ1bmN0aW9uKHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgICB2YXIgcGFyZW50ID0gdGhpczsKICAgIHZhciBjaGlsZDsKCiAgICAvLyBUaGUgY29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBuZXcgc3ViY2xhc3MgaXMgZWl0aGVyIGRlZmluZWQgYnkgeW91CiAgICAvLyAodGhlICJjb25zdHJ1Y3RvciIgcHJvcGVydHkgaW4geW91ciBgZXh0ZW5kYCBkZWZpbml0aW9uKSwgb3IgZGVmYXVsdGVkCiAgICAvLyBieSB1cyB0byBzaW1wbHkgY2FsbCB0aGUgcGFyZW50J3MgY29uc3RydWN0b3IuCiAgICBpZiAocHJvdG9Qcm9wcyAmJiBfLmhhcyhwcm90b1Byb3BzLCAnY29uc3RydWN0b3InKSkgewogICAgICBjaGlsZCA9IHByb3RvUHJvcHMuY29uc3RydWN0b3I7CiAgICB9IGVsc2UgewogICAgICBjaGlsZCA9IGZ1bmN0aW9uKCl7IHBhcmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9OwogICAgfQoKICAgIC8vIEFkZCBzdGF0aWMgcHJvcGVydGllcyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24sIGlmIHN1cHBsaWVkLgogICAgXy5leHRlbmQoY2hpbGQsIHBhcmVudCwgc3RhdGljUHJvcHMpOwoKICAgIC8vIFNldCB0aGUgcHJvdG90eXBlIGNoYWluIHRvIGluaGVyaXQgZnJvbSBgcGFyZW50YCwgd2l0aG91dCBjYWxsaW5nCiAgICAvLyBgcGFyZW50YCdzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLgogICAgdmFyIFN1cnJvZ2F0ZSA9IGZ1bmN0aW9uKCl7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfTsKICAgIFN1cnJvZ2F0ZS5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOwogICAgY2hpbGQucHJvdG90eXBlID0gbmV3IFN1cnJvZ2F0ZTsKCiAgICAvLyBBZGQgcHJvdG90eXBlIHByb3BlcnRpZXMgKGluc3RhbmNlIHByb3BlcnRpZXMpIHRvIHRoZSBzdWJjbGFzcywKICAgIC8vIGlmIHN1cHBsaWVkLgogICAgaWYgKHByb3RvUHJvcHMpIF8uZXh0ZW5kKGNoaWxkLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CgogICAgLy8gU2V0IGEgY29udmVuaWVuY2UgcHJvcGVydHkgaW4gY2FzZSB0aGUgcGFyZW50J3MgcHJvdG90eXBlIGlzIG5lZWRlZAogICAgLy8gbGF0ZXIuCiAgICBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOwoKICAgIHJldHVybiBjaGlsZDsKICB9OwoKICAvLyBTZXQgdXAgaW5oZXJpdGFuY2UgZm9yIHRoZSBtb2RlbCwgY29sbGVjdGlvbiwgcm91dGVyLCBhbmQgdmlldy4KICBNb2RlbC5leHRlbmQgPSBDb2xsZWN0aW9uLmV4dGVuZCA9IFJvdXRlci5leHRlbmQgPSBWaWV3LmV4dGVuZCA9IGV4dGVuZDsKCiAgLy8gVGhyb3cgYW4gZXJyb3Igd2hlbiBhIFVSTCBpcyBuZWVkZWQsIGFuZCBub25lIGlzIHN1cHBsaWVkLgogIHZhciB1cmxFcnJvciA9IGZ1bmN0aW9uKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdBICJ1cmwiIHByb3BlcnR5IG9yIGZ1bmN0aW9uIG11c3QgYmUgc3BlY2lmaWVkJyk7CiAgfTsKCn0pLmNhbGwodGhpcyk7Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 19:34:26 GMT",
                    "Content-Length": "54253",
                    "Date": "Fri, 07 Nov 2014 19:34:27 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}