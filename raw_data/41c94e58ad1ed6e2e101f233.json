{
    "url": "http://localhost:9999/jkphl/TYPO3-ext-squeezr/Resources/Private/Squeezr/squeezr/plugins/minify/min/builder/index.php",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.pathname</b> and written to <b>document.write()</b> via the following statements:<ul><li>var src = \"../?f=\" + location.pathname.replace(/\\/[^\\/]*$/, '/_index.js').substr(1);</li><li>document.write('&lt;\\script src=\"' + src + '\"&gt;&lt;\\/script&gt;');</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/jkphl/TYPO3-ext-squeezr/Resources/Private/Squeezr/squeezr/plugins/minify/min/builder/index.php",
                "path": "/jkphl/TYPO3-ext-squeezr/Resources/Private/Squeezr/squeezr/plugins/minify/min/builder/index.php",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9qa3BobC9UWVBPMy1leHQtc3F1ZWV6ci9SZXNvdXJjZXMvUHJpdmF0ZS9TcXVlZXpyL3NxdWVlenIvcGx1Z2lucy9taW5pZnkvbWluL2J1aWxkZXIvaW5kZXgucGhwIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 05:24:49 GMT",
                    "Content-Length": "9904",
                    "Date": "Sat, 08 Nov 2014 05:24:49 GMT",
                    "Content-Type": "text/plain; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "text",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}