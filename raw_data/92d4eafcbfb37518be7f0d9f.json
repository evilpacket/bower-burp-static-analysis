{
    "url": "http://localhost:9999/menglr/turbolinks/lib/assets/javascripts/turbolinks.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>document.location.hash</b> and written to <b>window.history.replaceState()</b> via the following statements:<ul><li>preservedHash = location.hasNoHash() ? document.location.hash : '';</li><li>return window.history.replaceState(currentState, '', location.href + preservedHash);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/menglr/turbolinks/lib/assets/javascripts/turbolinks.js",
                "path": "/menglr/turbolinks/lib/assets/javascripts/turbolinks.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9tZW5nbHIvdHVyYm9saW5rcy9saWIvYXNzZXRzL2phdmFzY3JpcHRzL3R1cmJvbGlua3MuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMjI3NTENCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IFNhdCwgMDggTm92IDIwMTQgMjM6NDc6MzggR01UDQpMYXN0LU1vZGlmaWVkOiBTYXQsIDA4IE5vdiAyMDE0IDIzOjQ3OjM4IEdNVA0KDQovLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOC4wCihmdW5jdGlvbigpIHsKICB2YXIgQ1NSRlRva2VuLCBDbGljaywgQ29tcG9uZW50VXJsLCBFVkVOVFMsIExpbmssIGJyb3dzZXJDb21wYXRpYmxlRG9jdW1lbnRQYXJzZXIsIGJyb3dzZXJJc250QnVnZ3ksIGJyb3dzZXJTdXBwb3J0c0N1c3RvbUV2ZW50cywgYnJvd3NlclN1cHBvcnRzUHVzaFN0YXRlLCBicm93c2VyU3VwcG9ydHNUdXJib2xpbmtzLCBieXBhc3NPbkxvYWRQb3BzdGF0ZSwgY2FjaGVDdXJyZW50UGFnZSwgY2FjaGVTaXplLCBjaGFuZ2VQYWdlLCBjbG9uZSwgY29uc3RyYWluUGFnZUNhY2hlVG8sIGNyZWF0ZURvY3VtZW50LCBjcm9zc09yaWdpblJlZGlyZWN0LCBjdXJyZW50U3RhdGUsIGVuYWJsZVRyYW5zaXRpb25DYWNoZSwgZXhlY3V0ZVNjcmlwdFRhZ3MsIGV4dHJhY3RUaXRsZUFuZEJvZHksIGZldGNoLCBmZXRjaEhpc3RvcnksIGZldGNoUmVwbGFjZW1lbnQsIGhpc3RvcnlTdGF0ZUlzRGVmaW5lZCwgaW5pdGlhbGl6ZVR1cmJvbGlua3MsIGluc3RhbGxEb2N1bWVudFJlYWR5UGFnZUV2ZW50VHJpZ2dlcnMsIGluc3RhbGxIaXN0b3J5Q2hhbmdlSGFuZGxlciwgaW5zdGFsbEpxdWVyeUFqYXhTdWNjZXNzUGFnZVVwZGF0ZVRyaWdnZXIsIGxvYWRlZEFzc2V0cywgbWFudWFsbHlUcmlnZ2VySGFzaENoYW5nZUZvckZpcmVmb3gsIHBhZ2VDYWNoZSwgcGFnZUNoYW5nZVByZXZlbnRlZCwgcGFnZXNDYWNoZWQsIHBvcENvb2tpZSwgcHJvY2Vzc1Jlc3BvbnNlLCByZWNhbGxTY3JvbGxQb3NpdGlvbiwgcmVmZXJlciwgcmVmbGVjdE5ld1VybCwgcmVmbGVjdFJlZGlyZWN0ZWRVcmwsIHJlbWVtYmVyQ3VycmVudFN0YXRlLCByZW1lbWJlckN1cnJlbnRVcmwsIHJlbWVtYmVyUmVmZXJlciwgcmVtb3ZlTm9zY3JpcHRUYWdzLCByZXF1ZXN0TWV0aG9kSXNTYWZlLCByZXNldFNjcm9sbFBvc2l0aW9uLCBzZXRBdXRvZm9jdXNFbGVtZW50LCB0cmFuc2l0aW9uQ2FjaGVFbmFibGVkLCB0cmFuc2l0aW9uQ2FjaGVGb3IsIHRyaWdnZXJFdmVudCwgdmlzaXQsIHhociwgX3JlZiwKICAgIF9faW5kZXhPZiA9IFtdLmluZGV4T2YgfHwgZnVuY3Rpb24oaXRlbSkgeyBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7IGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7IH0gcmV0dXJuIC0xOyB9LAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSwKICAgIF9fc2xpY2UgPSBbXS5zbGljZTsKCiAgcGFnZUNhY2hlID0ge307CgogIGNhY2hlU2l6ZSA9IDEwOwoKICB0cmFuc2l0aW9uQ2FjaGVFbmFibGVkID0gZmFsc2U7CgogIGN1cnJlbnRTdGF0ZSA9IG51bGw7CgogIGxvYWRlZEFzc2V0cyA9IG51bGw7CgogIHJlZmVyZXIgPSBudWxsOwoKICBjcmVhdGVEb2N1bWVudCA9IG51bGw7CgogIHhociA9IG51bGw7CgogIEVWRU5UUyA9IHsKICAgIEJFRk9SRV9DSEFOR0U6ICdwYWdlOmJlZm9yZS1jaGFuZ2UnLAogICAgRkVUQ0g6ICdwYWdlOmZldGNoJywKICAgIFJFQ0VJVkU6ICdwYWdlOnJlY2VpdmUnLAogICAgQ0hBTkdFOiAncGFnZTpjaGFuZ2UnLAogICAgVVBEQVRFOiAncGFnZTp1cGRhdGUnLAogICAgTE9BRDogJ3BhZ2U6bG9hZCcsCiAgICBSRVNUT1JFOiAncGFnZTpyZXN0b3JlJywKICAgIEJFRk9SRV9VTkxPQUQ6ICdwYWdlOmJlZm9yZS11bmxvYWQnLAogICAgRVhQSVJFOiAncGFnZTpleHBpcmUnCiAgfTsKCiAgZmV0Y2ggPSBmdW5jdGlvbih1cmwpIHsKICAgIHZhciBjYWNoZWRQYWdlOwogICAgdXJsID0gbmV3IENvbXBvbmVudFVybCh1cmwpOwogICAgcmVtZW1iZXJSZWZlcmVyKCk7CiAgICBjYWNoZUN1cnJlbnRQYWdlKCk7CiAgICBpZiAodHJhbnNpdGlvbkNhY2hlRW5hYmxlZCAmJiAoY2FjaGVkUGFnZSA9IHRyYW5zaXRpb25DYWNoZUZvcih1cmwuYWJzb2x1dGUpKSkgewogICAgICBmZXRjaEhpc3RvcnkoY2FjaGVkUGFnZSk7CiAgICAgIHJldHVybiBmZXRjaFJlcGxhY2VtZW50KHVybCk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZmV0Y2hSZXBsYWNlbWVudCh1cmwsIHJlc2V0U2Nyb2xsUG9zaXRpb24pOwogICAgfQogIH07CgogIHRyYW5zaXRpb25DYWNoZUZvciA9IGZ1bmN0aW9uKHVybCkgewogICAgdmFyIGNhY2hlZFBhZ2U7CiAgICBjYWNoZWRQYWdlID0gcGFnZUNhY2hlW3VybF07CiAgICBpZiAoY2FjaGVkUGFnZSAmJiAhY2FjaGVkUGFnZS50cmFuc2l0aW9uQ2FjaGVEaXNhYmxlZCkgewogICAgICByZXR1cm4gY2FjaGVkUGFnZTsKICAgIH0KICB9OwoKICBlbmFibGVUcmFuc2l0aW9uQ2FjaGUgPSBmdW5jdGlvbihlbmFibGUpIHsKICAgIGlmIChlbmFibGUgPT0gbnVsbCkgewogICAgICBlbmFibGUgPSB0cnVlOwogICAgfQogICAgcmV0dXJuIHRyYW5zaXRpb25DYWNoZUVuYWJsZWQgPSBlbmFibGU7CiAgfTsKCiAgZmV0Y2hSZXBsYWNlbWVudCA9IGZ1bmN0aW9uKHVybCwgb25Mb2FkRnVuY3Rpb24pIHsKICAgIGlmIChvbkxvYWRGdW5jdGlvbiA9PSBudWxsKSB7CiAgICAgIG9uTG9hZEZ1bmN0aW9uID0gKGZ1bmN0aW9uKF90aGlzKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge307CiAgICAgIH0pKHRoaXMpOwogICAgfQogICAgdHJpZ2dlckV2ZW50KEVWRU5UUy5GRVRDSCwgewogICAgICB1cmw6IHVybC5hYnNvbHV0ZQogICAgfSk7CiAgICBpZiAoeGhyICE9IG51bGwpIHsKICAgICAgeGhyLmFib3J0KCk7CiAgICB9CiAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Q7CiAgICB4aHIub3BlbignR0VUJywgdXJsLndpdGhvdXRIYXNoRm9ySUUxMGNvbXBhdGliaWxpdHkoKSwgdHJ1ZSk7CiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sLCBhcHBsaWNhdGlvbi94bWwnKTsKICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLVhIUi1SZWZlcmVyJywgcmVmZXJlcik7CiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBkb2M7CiAgICAgIHRyaWdnZXJFdmVudChFVkVOVFMuUkVDRUlWRSwgewogICAgICAgIHVybDogdXJsLmFic29sdXRlCiAgICAgIH0pOwogICAgICBpZiAoZG9jID0gcHJvY2Vzc1Jlc3BvbnNlKCkpIHsKICAgICAgICByZWZsZWN0TmV3VXJsKHVybCk7CiAgICAgICAgY2hhbmdlUGFnZS5hcHBseShudWxsLCBleHRyYWN0VGl0bGVBbmRCb2R5KGRvYykpOwogICAgICAgIG1hbnVhbGx5VHJpZ2dlckhhc2hDaGFuZ2VGb3JGaXJlZm94KCk7CiAgICAgICAgcmVmbGVjdFJlZGlyZWN0ZWRVcmwoKTsKICAgICAgICBvbkxvYWRGdW5jdGlvbigpOwogICAgICAgIHJldHVybiB0cmlnZ2VyRXZlbnQoRVZFTlRTLkxPQUQpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gY3Jvc3NPcmlnaW5SZWRpcmVjdCgpIHx8IHVybC5hYnNvbHV0ZTsKICAgICAgfQogICAgfTsKICAgIHhoci5vbmxvYWRlbmQgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHhociA9IG51bGw7CiAgICB9OwogICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSB1cmwuYWJzb2x1dGU7CiAgICB9OwogICAgcmV0dXJuIHhoci5zZW5kKCk7CiAgfTsKCiAgZmV0Y2hIaXN0b3J5ID0gZnVuY3Rpb24oY2FjaGVkUGFnZSkgewogICAgaWYgKHhociAhPSBudWxsKSB7CiAgICAgIHhoci5hYm9ydCgpOwogICAgfQogICAgY2hhbmdlUGFnZShjYWNoZWRQYWdlLnRpdGxlLCBjYWNoZWRQYWdlLmJvZHkpOwogICAgcmVjYWxsU2Nyb2xsUG9zaXRpb24oY2FjaGVkUGFnZSk7CiAgICByZXR1cm4gdHJpZ2dlckV2ZW50KEVWRU5UUy5SRVNUT1JFKTsKICB9OwoKICBjYWNoZUN1cnJlbnRQYWdlID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgY3VycmVudFN0YXRlVXJsOwogICAgY3VycmVudFN0YXRlVXJsID0gbmV3IENvbXBvbmVudFVybChjdXJyZW50U3RhdGUudXJsKTsKICAgIHBhZ2VDYWNoZVtjdXJyZW50U3RhdGVVcmwuYWJzb2x1dGVdID0gewogICAgICB1cmw6IGN1cnJlbnRTdGF0ZVVybC5yZWxhdGl2ZSwKICAgICAgYm9keTogZG9jdW1lbnQuYm9keSwKICAgICAgdGl0bGU6IGRvY3VtZW50LnRpdGxlLAogICAgICBwb3NpdGlvblk6IHdpbmRvdy5wYWdlWU9mZnNldCwKICAgICAgcG9zaXRpb25YOiB3aW5kb3cucGFnZVhPZmZzZXQsCiAgICAgIGNhY2hlZEF0OiBuZXcgRGF0ZSgpLmdldFRpbWUoKSwKICAgICAgdHJhbnNpdGlvbkNhY2hlRGlzYWJsZWQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5vLXRyYW5zaXRpb24tY2FjaGVdJykgIT0gbnVsbAogICAgfTsKICAgIHJldHVybiBjb25zdHJhaW5QYWdlQ2FjaGVUbyhjYWNoZVNpemUpOwogIH07CgogIHBhZ2VzQ2FjaGVkID0gZnVuY3Rpb24oc2l6ZSkgewogICAgaWYgKHNpemUgPT0gbnVsbCkgewogICAgICBzaXplID0gY2FjaGVTaXplOwogICAgfQogICAgaWYgKC9eW1xkXSskLy50ZXN0KHNpemUpKSB7CiAgICAgIHJldHVybiBjYWNoZVNpemUgPSBwYXJzZUludChzaXplKTsKICAgIH0KICB9OwoKICBjb25zdHJhaW5QYWdlQ2FjaGVUbyA9IGZ1bmN0aW9uKGxpbWl0KSB7CiAgICB2YXIgY2FjaGVUaW1lc1JlY2VudEZpcnN0LCBrZXksIHBhZ2VDYWNoZUtleXMsIF9pLCBfbGVuLCBfcmVzdWx0czsKICAgIHBhZ2VDYWNoZUtleXMgPSBPYmplY3Qua2V5cyhwYWdlQ2FjaGUpOwogICAgY2FjaGVUaW1lc1JlY2VudEZpcnN0ID0gcGFnZUNhY2hlS2V5cy5tYXAoZnVuY3Rpb24odXJsKSB7CiAgICAgIHJldHVybiBwYWdlQ2FjaGVbdXJsXS5jYWNoZWRBdDsKICAgIH0pLnNvcnQoZnVuY3Rpb24oYSwgYikgewogICAgICByZXR1cm4gYiAtIGE7CiAgICB9KTsKICAgIF9yZXN1bHRzID0gW107CiAgICBmb3IgKF9pID0gMCwgX2xlbiA9IHBhZ2VDYWNoZUtleXMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAga2V5ID0gcGFnZUNhY2hlS2V5c1tfaV07CiAgICAgIGlmICghKHBhZ2VDYWNoZVtrZXldLmNhY2hlZEF0IDw9IGNhY2hlVGltZXNSZWNlbnRGaXJzdFtsaW1pdF0pKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgdHJpZ2dlckV2ZW50KEVWRU5UUy5FWFBJUkUsIHBhZ2VDYWNoZVtrZXldKTsKICAgICAgX3Jlc3VsdHMucHVzaChkZWxldGUgcGFnZUNhY2hlW2tleV0pOwogICAgfQogICAgcmV0dXJuIF9yZXN1bHRzOwogIH07CgogIGNoYW5nZVBhZ2UgPSBmdW5jdGlvbih0aXRsZSwgYm9keSwgY3NyZlRva2VuLCBydW5TY3JpcHRzKSB7CiAgICB0cmlnZ2VyRXZlbnQoRVZFTlRTLkJFRk9SRV9VTkxPQUQpOwogICAgZG9jdW1lbnQudGl0bGUgPSB0aXRsZTsKICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQoYm9keSwgZG9jdW1lbnQuYm9keSk7CiAgICBpZiAoY3NyZlRva2VuICE9IG51bGwpIHsKICAgICAgQ1NSRlRva2VuLnVwZGF0ZShjc3JmVG9rZW4pOwogICAgfQogICAgc2V0QXV0b2ZvY3VzRWxlbWVudCgpOwogICAgaWYgKHJ1blNjcmlwdHMpIHsKICAgICAgZXhlY3V0ZVNjcmlwdFRhZ3MoKTsKICAgIH0KICAgIGN1cnJlbnRTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnN0YXRlOwogICAgdHJpZ2dlckV2ZW50KEVWRU5UUy5DSEFOR0UpOwogICAgcmV0dXJuIHRyaWdnZXJFdmVudChFVkVOVFMuVVBEQVRFKTsKICB9OwoKICBleGVjdXRlU2NyaXB0VGFncyA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGF0dHIsIGNvcHksIG5leHRTaWJsaW5nLCBwYXJlbnROb2RlLCBzY3JpcHQsIHNjcmlwdHMsIF9pLCBfaiwgX2xlbiwgX2xlbjEsIF9yZWYsIF9yZWYxOwogICAgc2NyaXB0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0Om5vdChbZGF0YS10dXJib2xpbmtzLWV2YWw9ImZhbHNlIl0pJykpOwogICAgZm9yIChfaSA9IDAsIF9sZW4gPSBzY3JpcHRzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgIHNjcmlwdCA9IHNjcmlwdHNbX2ldOwogICAgICBpZiAoISgoX3JlZiA9IHNjcmlwdC50eXBlKSA9PT0gJycgfHwgX3JlZiA9PT0gJ3RleHQvamF2YXNjcmlwdCcpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29weSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICBfcmVmMSA9IHNjcmlwdC5hdHRyaWJ1dGVzOwogICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBfcmVmMS5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHsKICAgICAgICBhdHRyID0gX3JlZjFbX2pdOwogICAgICAgIGNvcHkuc2V0QXR0cmlidXRlKGF0dHIubmFtZSwgYXR0ci52YWx1ZSk7CiAgICAgIH0KICAgICAgaWYgKCFzY3JpcHQuaGFzQXR0cmlidXRlKCdhc3luYycpKSB7CiAgICAgICAgY29weS5hc3luYyA9IGZhbHNlOwogICAgICB9CiAgICAgIGNvcHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc2NyaXB0LmlubmVySFRNTCkpOwogICAgICBwYXJlbnROb2RlID0gc2NyaXB0LnBhcmVudE5vZGUsIG5leHRTaWJsaW5nID0gc2NyaXB0Lm5leHRTaWJsaW5nOwogICAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7CiAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvcHksIG5leHRTaWJsaW5nKTsKICAgIH0KICB9OwoKICByZW1vdmVOb3NjcmlwdFRhZ3MgPSBmdW5jdGlvbihub2RlKSB7CiAgICBub2RlLmlubmVySFRNTCA9IG5vZGUuaW5uZXJIVE1MLnJlcGxhY2UoLzxub3NjcmlwdFtcU1xzXSo/PFwvbm9zY3JpcHQ+L2lnLCAnJyk7CiAgICByZXR1cm4gbm9kZTsKICB9OwoKICBzZXRBdXRvZm9jdXNFbGVtZW50ID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgYXV0b2ZvY3VzRWxlbWVudCwgbGlzdDsKICAgIGF1dG9mb2N1c0VsZW1lbnQgPSAobGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W2F1dG9mb2N1c10sIHRleHRhcmVhW2F1dG9mb2N1c10nKSlbbGlzdC5sZW5ndGggLSAxXTsKICAgIGlmIChhdXRvZm9jdXNFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGF1dG9mb2N1c0VsZW1lbnQpIHsKICAgICAgcmV0dXJuIGF1dG9mb2N1c0VsZW1lbnQuZm9jdXMoKTsKICAgIH0KICB9OwoKICByZWZsZWN0TmV3VXJsID0gZnVuY3Rpb24odXJsKSB7CiAgICBpZiAoKHVybCA9IG5ldyBDb21wb25lbnRVcmwodXJsKSkuYWJzb2x1dGUgIT09IHJlZmVyZXIpIHsKICAgICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7CiAgICAgICAgdHVyYm9saW5rczogdHJ1ZSwKICAgICAgICB1cmw6IHVybC5hYnNvbHV0ZQogICAgICB9LCAnJywgdXJsLmFic29sdXRlKTsKICAgIH0KICB9OwoKICByZWZsZWN0UmVkaXJlY3RlZFVybCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGxvY2F0aW9uLCBwcmVzZXJ2ZWRIYXNoOwogICAgaWYgKGxvY2F0aW9uID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdYLVhIUi1SZWRpcmVjdGVkLVRvJykpIHsKICAgICAgbG9jYXRpb24gPSBuZXcgQ29tcG9uZW50VXJsKGxvY2F0aW9uKTsKICAgICAgcHJlc2VydmVkSGFzaCA9IGxvY2F0aW9uLmhhc05vSGFzaCgpID8gZG9jdW1lbnQubG9jYXRpb24uaGFzaCA6ICcnOwogICAgICByZXR1cm4gd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKGN1cnJlbnRTdGF0ZSwgJycsIGxvY2F0aW9uLmhyZWYgKyBwcmVzZXJ2ZWRIYXNoKTsKICAgIH0KICB9OwoKICBjcm9zc09yaWdpblJlZGlyZWN0ID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgcmVkaXJlY3Q7CiAgICBpZiAoKChyZWRpcmVjdCA9IHhoci5nZXRSZXNwb25zZUhlYWRlcignTG9jYXRpb24nKSkgIT0gbnVsbCkgJiYgKG5ldyBDb21wb25lbnRVcmwocmVkaXJlY3QpKS5jcm9zc09yaWdpbigpKSB7CiAgICAgIHJldHVybiByZWRpcmVjdDsKICAgIH0KICB9OwoKICByZW1lbWJlclJlZmVyZXIgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiByZWZlcmVyID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjsKICB9OwoKICByZW1lbWJlckN1cnJlbnRVcmwgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoewogICAgICB0dXJib2xpbmtzOiB0cnVlLAogICAgICB1cmw6IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYKICAgIH0sICcnLCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmKTsKICB9OwoKICByZW1lbWJlckN1cnJlbnRTdGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGN1cnJlbnRTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnN0YXRlOwogIH07CgogIG1hbnVhbGx5VHJpZ2dlckhhc2hDaGFuZ2VGb3JGaXJlZm94ID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgdXJsOwogICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3gvKSAmJiAhKHVybCA9IG5ldyBDb21wb25lbnRVcmwpLmhhc05vSGFzaCgpKSB7CiAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShjdXJyZW50U3RhdGUsICcnLCB1cmwud2l0aG91dEhhc2goKSk7CiAgICAgIHJldHVybiBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gdXJsLmhhc2g7CiAgICB9CiAgfTsKCiAgcmVjYWxsU2Nyb2xsUG9zaXRpb24gPSBmdW5jdGlvbihwYWdlKSB7CiAgICByZXR1cm4gd2luZG93LnNjcm9sbFRvKHBhZ2UucG9zaXRpb25YLCBwYWdlLnBvc2l0aW9uWSk7CiAgfTsKCiAgcmVzZXRTY3JvbGxQb3NpdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgaWYgKGRvY3VtZW50LmxvY2F0aW9uLmhhc2gpIHsKICAgICAgcmV0dXJuIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHdpbmRvdy5zY3JvbGxUbygwLCAwKTsKICAgIH0KICB9OwoKICBjbG9uZSA9IGZ1bmN0aW9uKG9yaWdpbmFsKSB7CiAgICB2YXIgY29weSwga2V5LCB2YWx1ZTsKICAgIGlmICgob3JpZ2luYWwgPT0gbnVsbCkgfHwgdHlwZW9mIG9yaWdpbmFsICE9PSAnb2JqZWN0JykgewogICAgICByZXR1cm4gb3JpZ2luYWw7CiAgICB9CiAgICBjb3B5ID0gbmV3IG9yaWdpbmFsLmNvbnN0cnVjdG9yKCk7CiAgICBmb3IgKGtleSBpbiBvcmlnaW5hbCkgewogICAgICB2YWx1ZSA9IG9yaWdpbmFsW2tleV07CiAgICAgIGNvcHlba2V5XSA9IGNsb25lKHZhbHVlKTsKICAgIH0KICAgIHJldHVybiBjb3B5OwogIH07CgogIHBvcENvb2tpZSA9IGZ1bmN0aW9uKG5hbWUpIHsKICAgIHZhciB2YWx1ZSwgX3JlZjsKICAgIHZhbHVlID0gKChfcmVmID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAobmFtZSArICI9KFxcdyspIikpKSAhPSBudWxsID8gX3JlZlsxXS50b1VwcGVyQ2FzZSgpIDogdm9pZCAwKSB8fCAnJzsKICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyAnPTsgZXhwaXJlcz1UaHUsIDAxLUphbi03MCAwMDowMDowMSBHTVQ7IHBhdGg9Lyc7CiAgICByZXR1cm4gdmFsdWU7CiAgfTsKCiAgdHJpZ2dlckV2ZW50ID0gZnVuY3Rpb24obmFtZSwgZGF0YSkgewogICAgdmFyIGV2ZW50OwogICAgaWYgKHR5cGVvZiBQcm90b3R5cGUgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIEV2ZW50LmZpcmUoZG9jdW1lbnQsIG5hbWUsIGRhdGEsIHRydWUpOwogICAgfQogICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnRzJyk7CiAgICBpZiAoZGF0YSkgewogICAgICBldmVudC5kYXRhID0gZGF0YTsKICAgIH0KICAgIGV2ZW50LmluaXRFdmVudChuYW1lLCB0cnVlLCB0cnVlKTsKICAgIHJldHVybiBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICB9OwoKICBwYWdlQ2hhbmdlUHJldmVudGVkID0gZnVuY3Rpb24odXJsKSB7CiAgICByZXR1cm4gIXRyaWdnZXJFdmVudChFVkVOVFMuQkVGT1JFX0NIQU5HRSwgewogICAgICB1cmw6IHVybAogICAgfSk7CiAgfTsKCiAgcHJvY2Vzc1Jlc3BvbnNlID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgYXNzZXRzQ2hhbmdlZCwgY2xpZW50T3JTZXJ2ZXJFcnJvciwgZG9jLCBleHRyYWN0VHJhY2tBc3NldHMsIGludGVyc2VjdGlvbiwgdmFsaWRDb250ZW50OwogICAgY2xpZW50T3JTZXJ2ZXJFcnJvciA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgX3JlZjsKICAgICAgcmV0dXJuICg0MDAgPD0gKF9yZWYgPSB4aHIuc3RhdHVzKSAmJiBfcmVmIDwgNjAwKTsKICAgIH07CiAgICB2YWxpZENvbnRlbnQgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNvbnRlbnRUeXBlOwogICAgICByZXR1cm4gKChjb250ZW50VHlwZSA9IHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJykpICE9IG51bGwpICYmIGNvbnRlbnRUeXBlLm1hdGNoKC9eKD86dGV4dFwvaHRtbHxhcHBsaWNhdGlvblwveGh0bWxcK3htbHxhcHBsaWNhdGlvblwveG1sKSg/Ojt8JCkvKTsKICAgIH07CiAgICBleHRyYWN0VHJhY2tBc3NldHMgPSBmdW5jdGlvbihkb2MpIHsKICAgICAgdmFyIG5vZGUsIF9pLCBfbGVuLCBfcmVmLCBfcmVzdWx0czsKICAgICAgX3JlZiA9IGRvYy5xdWVyeVNlbGVjdG9yKCdoZWFkJykuY2hpbGROb2RlczsKICAgICAgX3Jlc3VsdHMgPSBbXTsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgbm9kZSA9IF9yZWZbX2ldOwogICAgICAgIGlmICgodHlwZW9mIG5vZGUuZ2V0QXR0cmlidXRlID09PSAiZnVuY3Rpb24iID8gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdHVyYm9saW5rcy10cmFjaycpIDogdm9pZCAwKSAhPSBudWxsKSB7CiAgICAgICAgICBfcmVzdWx0cy5wdXNoKG5vZGUuZ2V0QXR0cmlidXRlKCdzcmMnKSB8fCBub2RlLmdldEF0dHJpYnV0ZSgnaHJlZicpKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgfTsKICAgIGFzc2V0c0NoYW5nZWQgPSBmdW5jdGlvbihkb2MpIHsKICAgICAgdmFyIGZldGNoZWRBc3NldHM7CiAgICAgIGxvYWRlZEFzc2V0cyB8fCAobG9hZGVkQXNzZXRzID0gZXh0cmFjdFRyYWNrQXNzZXRzKGRvY3VtZW50KSk7CiAgICAgIGZldGNoZWRBc3NldHMgPSBleHRyYWN0VHJhY2tBc3NldHMoZG9jKTsKICAgICAgcmV0dXJuIGZldGNoZWRBc3NldHMubGVuZ3RoICE9PSBsb2FkZWRBc3NldHMubGVuZ3RoIHx8IGludGVyc2VjdGlvbihmZXRjaGVkQXNzZXRzLCBsb2FkZWRBc3NldHMpLmxlbmd0aCAhPT0gbG9hZGVkQXNzZXRzLmxlbmd0aDsKICAgIH07CiAgICBpbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhLCBiKSB7CiAgICAgIHZhciB2YWx1ZSwgX2ksIF9sZW4sIF9yZWYsIF9yZXN1bHRzOwogICAgICBpZiAoYS5sZW5ndGggPiBiLmxlbmd0aCkgewogICAgICAgIF9yZWYgPSBbYiwgYV0sIGEgPSBfcmVmWzBdLCBiID0gX3JlZlsxXTsKICAgICAgfQogICAgICBfcmVzdWx0cyA9IFtdOwogICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICB2YWx1ZSA9IGFbX2ldOwogICAgICAgIGlmIChfX2luZGV4T2YuY2FsbChiLCB2YWx1ZSkgPj0gMCkgewogICAgICAgICAgX3Jlc3VsdHMucHVzaCh2YWx1ZSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBfcmVzdWx0czsKICAgIH07CiAgICBpZiAoIWNsaWVudE9yU2VydmVyRXJyb3IoKSAmJiB2YWxpZENvbnRlbnQoKSkgewogICAgICBkb2MgPSBjcmVhdGVEb2N1bWVudCh4aHIucmVzcG9uc2VUZXh0KTsKICAgICAgaWYgKGRvYyAmJiAhYXNzZXRzQ2hhbmdlZChkb2MpKSB7CiAgICAgICAgcmV0dXJuIGRvYzsKICAgICAgfQogICAgfQogIH07CgogIGV4dHJhY3RUaXRsZUFuZEJvZHkgPSBmdW5jdGlvbihkb2MpIHsKICAgIHZhciB0aXRsZTsKICAgIHRpdGxlID0gZG9jLnF1ZXJ5U2VsZWN0b3IoJ3RpdGxlJyk7CiAgICByZXR1cm4gW3RpdGxlICE9IG51bGwgPyB0aXRsZS50ZXh0Q29udGVudCA6IHZvaWQgMCwgcmVtb3ZlTm9zY3JpcHRUYWdzKGRvYy5xdWVyeVNlbGVjdG9yKCdib2R5JykpLCBDU1JGVG9rZW4uZ2V0KGRvYykudG9rZW4sICdydW5TY3JpcHRzJ107CiAgfTsKCiAgQ1NSRlRva2VuID0gewogICAgZ2V0OiBmdW5jdGlvbihkb2MpIHsKICAgICAgdmFyIHRhZzsKICAgICAgaWYgKGRvYyA9PSBudWxsKSB7CiAgICAgICAgZG9jID0gZG9jdW1lbnQ7CiAgICAgIH0KICAgICAgcmV0dXJuIHsKICAgICAgICBub2RlOiB0YWcgPSBkb2MucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPSJjc3JmLXRva2VuIl0nKSwKICAgICAgICB0b2tlbjogdGFnICE9IG51bGwgPyB0eXBlb2YgdGFnLmdldEF0dHJpYnV0ZSA9PT0gImZ1bmN0aW9uIiA/IHRhZy5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSA6IHZvaWQgMCA6IHZvaWQgMAogICAgICB9OwogICAgfSwKICAgIHVwZGF0ZTogZnVuY3Rpb24obGF0ZXN0KSB7CiAgICAgIHZhciBjdXJyZW50OwogICAgICBjdXJyZW50ID0gdGhpcy5nZXQoKTsKICAgICAgaWYgKChjdXJyZW50LnRva2VuICE9IG51bGwpICYmIChsYXRlc3QgIT0gbnVsbCkgJiYgY3VycmVudC50b2tlbiAhPT0gbGF0ZXN0KSB7CiAgICAgICAgcmV0dXJuIGN1cnJlbnQubm9kZS5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnLCBsYXRlc3QpOwogICAgICB9CiAgICB9CiAgfTsKCiAgYnJvd3NlckNvbXBhdGlibGVEb2N1bWVudFBhcnNlciA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGJ1aWxkVGVzdHNVc2luZywgY3JlYXRlRG9jdW1lbnRVc2luZ0RPTSwgY3JlYXRlRG9jdW1lbnRVc2luZ0ZyYWdtZW50LCBjcmVhdGVEb2N1bWVudFVzaW5nUGFyc2VyLCBjcmVhdGVEb2N1bWVudFVzaW5nV3JpdGUsIGRvY1Rlc3QsIGRvY1Rlc3RzLCBlLCBfaSwgX2xlbjsKICAgIGNyZWF0ZURvY3VtZW50VXNpbmdQYXJzZXIgPSBmdW5jdGlvbihodG1sKSB7CiAgICAgIHJldHVybiAobmV3IERPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKGh0bWwsICd0ZXh0L2h0bWwnKTsKICAgIH07CiAgICBjcmVhdGVEb2N1bWVudFVzaW5nRE9NID0gZnVuY3Rpb24oaHRtbCkgewogICAgICB2YXIgZG9jOwogICAgICBkb2MgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoJycpOwogICAgICBkb2MuZG9jdW1lbnRFbGVtZW50LmlubmVySFRNTCA9IGh0bWw7CiAgICAgIHJldHVybiBkb2M7CiAgICB9OwogICAgY3JlYXRlRG9jdW1lbnRVc2luZ1dyaXRlID0gZnVuY3Rpb24oaHRtbCkgewogICAgICB2YXIgZG9jOwogICAgICBkb2MgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoJycpOwogICAgICBkb2Mub3BlbigncmVwbGFjZScpOwogICAgICBkb2Mud3JpdGUoaHRtbCk7CiAgICAgIGRvYy5jbG9zZSgpOwogICAgICByZXR1cm4gZG9jOwogICAgfTsKICAgIGNyZWF0ZURvY3VtZW50VXNpbmdGcmFnbWVudCA9IGZ1bmN0aW9uKGh0bWwpIHsKICAgICAgdmFyIGJvZHksIGRvYywgaGVhZCwgaHRtbFdyYXBwZXIsIF9yZWYsIF9yZWYxOwogICAgICBoZWFkID0gKChfcmVmID0gaHRtbC5tYXRjaCgvPGhlYWRbXj5dKj4oW1xzXFMuXSopPFwvaGVhZD4vaSkpICE9IG51bGwgPyBfcmVmWzBdIDogdm9pZCAwKSB8fCAnPGhlYWQ+PC9oZWFkPic7CiAgICAgIGJvZHkgPSAoKF9yZWYxID0gaHRtbC5tYXRjaCgvPGJvZHlbXj5dKj4oW1xzXFMuXSopPFwvYm9keT4vaSkpICE9IG51bGwgPyBfcmVmMVswXSA6IHZvaWQgMCkgfHwgJzxib2R5PjwvYm9keT4nOwogICAgICBodG1sV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2h0bWwnKTsKICAgICAgaHRtbFdyYXBwZXIuaW5uZXJIVE1MID0gaGVhZCArIGJvZHk7CiAgICAgIGRvYyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICAgICAgZG9jLmFwcGVuZENoaWxkKGh0bWxXcmFwcGVyKTsKICAgICAgcmV0dXJuIGRvYzsKICAgIH07CiAgICBidWlsZFRlc3RzVXNpbmcgPSBmdW5jdGlvbihjcmVhdGVNZXRob2QpIHsKICAgICAgdmFyIGJ1aWxkVGVzdCwgZm9ybU5lc3RpbmdUZXN0LCBzdHJ1Y3R1cmVUZXN0OwogICAgICBidWlsZFRlc3QgPSBmdW5jdGlvbihmYWxsYmFjaywgcGFzc2VzKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHBhc3NlczogcGFzc2VzKCksCiAgICAgICAgICBmYWxsYmFjazogZmFsbGJhY2sKICAgICAgICB9OwogICAgICB9OwogICAgICBzdHJ1Y3R1cmVUZXN0ID0gYnVpbGRUZXN0KGNyZWF0ZURvY3VtZW50VXNpbmdXcml0ZSwgKGZ1bmN0aW9uKF90aGlzKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIF9yZWYsIF9yZWYxOwogICAgICAgICAgcmV0dXJuICgoX3JlZiA9IGNyZWF0ZU1ldGhvZCgnPGh0bWw+PGJvZHk+PHA+dGVzdCcpKSAhPSBudWxsID8gKF9yZWYxID0gX3JlZi5ib2R5KSAhPSBudWxsID8gX3JlZjEuY2hpbGROb2Rlcy5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDApID09PSAxOwogICAgICAgIH07CiAgICAgIH0pKHRoaXMpKTsKICAgICAgZm9ybU5lc3RpbmdUZXN0ID0gYnVpbGRUZXN0KGNyZWF0ZURvY3VtZW50VXNpbmdGcmFnbWVudCwgKGZ1bmN0aW9uKF90aGlzKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIF9yZWYsIF9yZWYxOwogICAgICAgICAgcmV0dXJuICgoX3JlZiA9IGNyZWF0ZU1ldGhvZCgnPGh0bWw+PGJvZHk+PGZvcm0+PC9mb3JtPjxkaXY+PC9kaXY+PC9ib2R5PjwvaHRtbD4nKSkgIT0gbnVsbCA/IChfcmVmMSA9IF9yZWYuYm9keSkgIT0gbnVsbCA/IF9yZWYxLmNoaWxkTm9kZXMubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSA9PT0gMjsKICAgICAgICB9OwogICAgICB9KSh0aGlzKSk7CiAgICAgIHJldHVybiBbc3RydWN0dXJlVGVzdCwgZm9ybU5lc3RpbmdUZXN0XTsKICAgIH07CiAgICB0cnkgewogICAgICBpZiAod2luZG93LkRPTVBhcnNlcikgewogICAgICAgIGRvY1Rlc3RzID0gYnVpbGRUZXN0c1VzaW5nKGNyZWF0ZURvY3VtZW50VXNpbmdQYXJzZXIpOwogICAgICAgIHJldHVybiBjcmVhdGVEb2N1bWVudFVzaW5nUGFyc2VyOwogICAgICB9CiAgICB9IGNhdGNoIChfZXJyb3IpIHsKICAgICAgZSA9IF9lcnJvcjsKICAgICAgZG9jVGVzdHMgPSBidWlsZFRlc3RzVXNpbmcoY3JlYXRlRG9jdW1lbnRVc2luZ0RPTSk7CiAgICAgIHJldHVybiBjcmVhdGVEb2N1bWVudFVzaW5nRE9NOwogICAgfSBmaW5hbGx5IHsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBkb2NUZXN0cy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIGRvY1Rlc3QgPSBkb2NUZXN0c1tfaV07CiAgICAgICAgaWYgKCFkb2NUZXN0LnBhc3NlcykgewogICAgICAgICAgcmV0dXJuIGRvY1Rlc3QuZmFsbGJhY2s7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKCiAgQ29tcG9uZW50VXJsID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gQ29tcG9uZW50VXJsKG9yaWdpbmFsKSB7CiAgICAgIHRoaXMub3JpZ2luYWwgPSBvcmlnaW5hbCAhPSBudWxsID8gb3JpZ2luYWwgOiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmOwogICAgICBpZiAodGhpcy5vcmlnaW5hbC5jb25zdHJ1Y3RvciA9PT0gQ29tcG9uZW50VXJsKSB7CiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWw7CiAgICAgIH0KICAgICAgdGhpcy5fcGFyc2UoKTsKICAgIH0KCiAgICBDb21wb25lbnRVcmwucHJvdG90eXBlLndpdGhvdXRIYXNoID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmhyZWYucmVwbGFjZSh0aGlzLmhhc2gsICcnKS5yZXBsYWNlKCcjJywgJycpOwogICAgfTsKCiAgICBDb21wb25lbnRVcmwucHJvdG90eXBlLndpdGhvdXRIYXNoRm9ySUUxMGNvbXBhdGliaWxpdHkgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMud2l0aG91dEhhc2goKTsKICAgIH07CgogICAgQ29tcG9uZW50VXJsLnByb3RvdHlwZS5oYXNOb0hhc2ggPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuaGFzaC5sZW5ndGggPT09IDA7CiAgICB9OwoKICAgIENvbXBvbmVudFVybC5wcm90b3R5cGUuY3Jvc3NPcmlnaW4gPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMub3JpZ2luICE9PSAobmV3IENvbXBvbmVudFVybCkub3JpZ2luOwogICAgfTsKCiAgICBDb21wb25lbnRVcmwucHJvdG90eXBlLl9wYXJzZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgX3JlZjsKICAgICAgKHRoaXMubGluayAhPSBudWxsID8gdGhpcy5saW5rIDogdGhpcy5saW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpKS5ocmVmID0gdGhpcy5vcmlnaW5hbDsKICAgICAgX3JlZiA9IHRoaXMubGluaywgdGhpcy5ocmVmID0gX3JlZi5ocmVmLCB0aGlzLnByb3RvY29sID0gX3JlZi5wcm90b2NvbCwgdGhpcy5ob3N0ID0gX3JlZi5ob3N0LCB0aGlzLmhvc3RuYW1lID0gX3JlZi5ob3N0bmFtZSwgdGhpcy5wb3J0ID0gX3JlZi5wb3J0LCB0aGlzLnBhdGhuYW1lID0gX3JlZi5wYXRobmFtZSwgdGhpcy5zZWFyY2ggPSBfcmVmLnNlYXJjaCwgdGhpcy5oYXNoID0gX3JlZi5oYXNoOwogICAgICB0aGlzLm9yaWdpbiA9IFt0aGlzLnByb3RvY29sLCAnLy8nLCB0aGlzLmhvc3RuYW1lXS5qb2luKCcnKTsKICAgICAgaWYgKHRoaXMucG9ydC5sZW5ndGggIT09IDApIHsKICAgICAgICB0aGlzLm9yaWdpbiArPSAiOiIgKyB0aGlzLnBvcnQ7CiAgICAgIH0KICAgICAgdGhpcy5yZWxhdGl2ZSA9IFt0aGlzLnBhdGhuYW1lLCB0aGlzLnNlYXJjaCwgdGhpcy5oYXNoXS5qb2luKCcnKTsKICAgICAgcmV0dXJuIHRoaXMuYWJzb2x1dGUgPSB0aGlzLmhyZWY7CiAgICB9OwoKICAgIHJldHVybiBDb21wb25lbnRVcmw7CgogIH0pKCk7CgogIExpbmsgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoTGluaywgX3N1cGVyKTsKCiAgICBMaW5rLkhUTUxfRVhURU5TSU9OUyA9IFsnaHRtbCddOwoKICAgIExpbmsuYWxsb3dFeHRlbnNpb25zID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBleHRlbnNpb24sIGV4dGVuc2lvbnMsIF9pLCBfbGVuOwogICAgICBleHRlbnNpb25zID0gMSA8PSBhcmd1bWVudHMubGVuZ3RoID8gX19zbGljZS5jYWxsKGFyZ3VtZW50cywgMCkgOiBbXTsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBleHRlbnNpb25zLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgZXh0ZW5zaW9uID0gZXh0ZW5zaW9uc1tfaV07CiAgICAgICAgTGluay5IVE1MX0VYVEVOU0lPTlMucHVzaChleHRlbnNpb24pOwogICAgICB9CiAgICAgIHJldHVybiBMaW5rLkhUTUxfRVhURU5TSU9OUzsKICAgIH07CgogICAgZnVuY3Rpb24gTGluayhsaW5rKSB7CiAgICAgIHRoaXMubGluayA9IGxpbms7CiAgICAgIGlmICh0aGlzLmxpbmsuY29uc3RydWN0b3IgPT09IExpbmspIHsKICAgICAgICByZXR1cm4gdGhpcy5saW5rOwogICAgICB9CiAgICAgIHRoaXMub3JpZ2luYWwgPSB0aGlzLmxpbmsuaHJlZjsKICAgICAgdGhpcy5vcmlnaW5hbEVsZW1lbnQgPSB0aGlzLmxpbms7CiAgICAgIHRoaXMubGluayA9IHRoaXMubGluay5jbG9uZU5vZGUoZmFsc2UpOwogICAgICBMaW5rLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIExpbmsucHJvdG90eXBlLnNob3VsZElnbm9yZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5jcm9zc09yaWdpbigpIHx8IHRoaXMuX2FuY2hvcmVkKCkgfHwgdGhpcy5fbm9uSHRtbCgpIHx8IHRoaXMuX29wdE91dCgpIHx8IHRoaXMuX3RhcmdldCgpOwogICAgfTsKCiAgICBMaW5rLnByb3RvdHlwZS5fYW5jaG9yZWQgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuICh0aGlzLmhhc2gubGVuZ3RoID4gMCB8fCB0aGlzLmhyZWYuY2hhckF0KHRoaXMuaHJlZi5sZW5ndGggLSAxKSA9PT0gJyMnKSAmJiAodGhpcy53aXRob3V0SGFzaCgpID09PSAobmV3IENvbXBvbmVudFVybCkud2l0aG91dEhhc2goKSk7CiAgICB9OwoKICAgIExpbmsucHJvdG90eXBlLl9ub25IdG1sID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLnBhdGhuYW1lLm1hdGNoKC9cLlthLXpdKyQvZykgJiYgIXRoaXMucGF0aG5hbWUubWF0Y2gobmV3IFJlZ0V4cCgiXFwuKD86IiArIChMaW5rLkhUTUxfRVhURU5TSU9OUy5qb2luKCd8JykpICsgIik/JCIsICdnJykpOwogICAgfTsKCiAgICBMaW5rLnByb3RvdHlwZS5fb3B0T3V0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBpZ25vcmUsIGxpbms7CiAgICAgIGxpbmsgPSB0aGlzLm9yaWdpbmFsRWxlbWVudDsKICAgICAgd2hpbGUgKCEoaWdub3JlIHx8IGxpbmsgPT09IGRvY3VtZW50KSkgewogICAgICAgIGlnbm9yZSA9IGxpbmsuZ2V0QXR0cmlidXRlKCdkYXRhLW5vLXR1cmJvbGluaycpICE9IG51bGw7CiAgICAgICAgbGluayA9IGxpbmsucGFyZW50Tm9kZTsKICAgICAgfQogICAgICByZXR1cm4gaWdub3JlOwogICAgfTsKCiAgICBMaW5rLnByb3RvdHlwZS5fdGFyZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmxpbmsudGFyZ2V0Lmxlbmd0aCAhPT0gMDsKICAgIH07CgogICAgcmV0dXJuIExpbms7CgogIH0pKENvbXBvbmVudFVybCk7CgogIENsaWNrID0gKGZ1bmN0aW9uKCkgewogICAgQ2xpY2suaW5zdGFsbEhhbmRsZXJMYXN0ID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7CiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBDbGljay5oYW5kbGUsIGZhbHNlKTsKICAgICAgICByZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBDbGljay5oYW5kbGUsIGZhbHNlKTsKICAgICAgfQogICAgfTsKCiAgICBDbGljay5oYW5kbGUgPSBmdW5jdGlvbihldmVudCkgewogICAgICByZXR1cm4gbmV3IENsaWNrKGV2ZW50KTsKICAgIH07CgogICAgZnVuY3Rpb24gQ2xpY2soZXZlbnQpIHsKICAgICAgdGhpcy5ldmVudCA9IGV2ZW50OwogICAgICBpZiAodGhpcy5ldmVudC5kZWZhdWx0UHJldmVudGVkKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMuX2V4dHJhY3RMaW5rKCk7CiAgICAgIGlmICh0aGlzLl92YWxpZEZvclR1cmJvbGlua3MoKSkgewogICAgICAgIGlmICghcGFnZUNoYW5nZVByZXZlbnRlZCh0aGlzLmxpbmsuYWJzb2x1dGUpKSB7CiAgICAgICAgICB2aXNpdCh0aGlzLmxpbmsuaHJlZik7CiAgICAgICAgfQogICAgICAgIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgfQogICAgfQoKICAgIENsaWNrLnByb3RvdHlwZS5fZXh0cmFjdExpbmsgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGxpbms7CiAgICAgIGxpbmsgPSB0aGlzLmV2ZW50LnRhcmdldDsKICAgICAgd2hpbGUgKCEoIWxpbmsucGFyZW50Tm9kZSB8fCBsaW5rLm5vZGVOYW1lID09PSAnQScpKSB7CiAgICAgICAgbGluayA9IGxpbmsucGFyZW50Tm9kZTsKICAgICAgfQogICAgICBpZiAobGluay5ub2RlTmFtZSA9PT0gJ0EnICYmIGxpbmsuaHJlZi5sZW5ndGggIT09IDApIHsKICAgICAgICByZXR1cm4gdGhpcy5saW5rID0gbmV3IExpbmsobGluayk7CiAgICAgIH0KICAgIH07CgogICAgQ2xpY2sucHJvdG90eXBlLl92YWxpZEZvclR1cmJvbGlua3MgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuICh0aGlzLmxpbmsgIT0gbnVsbCkgJiYgISh0aGlzLmxpbmsuc2hvdWxkSWdub3JlKCkgfHwgdGhpcy5fbm9uU3RhbmRhcmRDbGljaygpKTsKICAgIH07CgogICAgQ2xpY2sucHJvdG90eXBlLl9ub25TdGFuZGFyZENsaWNrID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmV2ZW50LndoaWNoID4gMSB8fCB0aGlzLmV2ZW50Lm1ldGFLZXkgfHwgdGhpcy5ldmVudC5jdHJsS2V5IHx8IHRoaXMuZXZlbnQuc2hpZnRLZXkgfHwgdGhpcy5ldmVudC5hbHRLZXk7CiAgICB9OwoKICAgIHJldHVybiBDbGljazsKCiAgfSkoKTsKCiAgYnlwYXNzT25Mb2FkUG9wc3RhdGUgPSBmdW5jdGlvbihmbikgewogICAgcmV0dXJuIHNldFRpbWVvdXQoZm4sIDUwMCk7CiAgfTsKCiAgaW5zdGFsbERvY3VtZW50UmVhZHlQYWdlRXZlbnRUcmlnZ2VycyA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoZnVuY3Rpb24oKSB7CiAgICAgIHRyaWdnZXJFdmVudChFVkVOVFMuQ0hBTkdFKTsKICAgICAgcmV0dXJuIHRyaWdnZXJFdmVudChFVkVOVFMuVVBEQVRFKTsKICAgIH0pLCB0cnVlKTsKICB9OwoKICBpbnN0YWxsSnF1ZXJ5QWpheFN1Y2Nlc3NQYWdlVXBkYXRlVHJpZ2dlciA9IGZ1bmN0aW9uKCkgewogICAgaWYgKHR5cGVvZiBqUXVlcnkgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIHJldHVybiBqUXVlcnkoZG9jdW1lbnQpLm9uKCdhamF4U3VjY2VzcycsIGZ1bmN0aW9uKGV2ZW50LCB4aHIsIHNldHRpbmdzKSB7CiAgICAgICAgaWYgKCFqUXVlcnkudHJpbSh4aHIucmVzcG9uc2VUZXh0KSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJpZ2dlckV2ZW50KEVWRU5UUy5VUERBVEUpOwogICAgICB9KTsKICAgIH0KICB9OwoKICBpbnN0YWxsSGlzdG9yeUNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkgewogICAgdmFyIGNhY2hlZFBhZ2UsIF9yZWY7CiAgICBpZiAoKF9yZWYgPSBldmVudC5zdGF0ZSkgIT0gbnVsbCA/IF9yZWYudHVyYm9saW5rcyA6IHZvaWQgMCkgewogICAgICBpZiAoY2FjaGVkUGFnZSA9IHBhZ2VDYWNoZVsobmV3IENvbXBvbmVudFVybChldmVudC5zdGF0ZS51cmwpKS5hYnNvbHV0ZV0pIHsKICAgICAgICBjYWNoZUN1cnJlbnRQYWdlKCk7CiAgICAgICAgcmV0dXJuIGZldGNoSGlzdG9yeShjYWNoZWRQYWdlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdmlzaXQoZXZlbnQudGFyZ2V0LmxvY2F0aW9uLmhyZWYpOwogICAgICB9CiAgICB9CiAgfTsKCiAgaW5pdGlhbGl6ZVR1cmJvbGlua3MgPSBmdW5jdGlvbigpIHsKICAgIHJlbWVtYmVyQ3VycmVudFVybCgpOwogICAgcmVtZW1iZXJDdXJyZW50U3RhdGUoKTsKICAgIGNyZWF0ZURvY3VtZW50ID0gYnJvd3NlckNvbXBhdGlibGVEb2N1bWVudFBhcnNlcigpOwogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBDbGljay5pbnN0YWxsSGFuZGxlckxhc3QsIHRydWUpOwogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBmdW5jdGlvbihldmVudCkgewogICAgICByZW1lbWJlckN1cnJlbnRVcmwoKTsKICAgICAgcmV0dXJuIHJlbWVtYmVyQ3VycmVudFN0YXRlKCk7CiAgICB9LCBmYWxzZSk7CiAgICByZXR1cm4gYnlwYXNzT25Mb2FkUG9wc3RhdGUoZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBpbnN0YWxsSGlzdG9yeUNoYW5nZUhhbmRsZXIsIGZhbHNlKTsKICAgIH0pOwogIH07CgogIGhpc3RvcnlTdGF0ZUlzRGVmaW5lZCA9IHdpbmRvdy5oaXN0b3J5LnN0YXRlICE9PSB2b2lkIDAgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRmlyZWZveFwvMls2fDddLyk7CgogIGJyb3dzZXJTdXBwb3J0c1B1c2hTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSAmJiB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUgJiYgaGlzdG9yeVN0YXRlSXNEZWZpbmVkOwoKICBicm93c2VySXNudEJ1Z2d5ID0gIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0NyaU9TXC8vKTsKCiAgcmVxdWVzdE1ldGhvZElzU2FmZSA9IChfcmVmID0gcG9wQ29va2llKCdyZXF1ZXN0X21ldGhvZCcpKSA9PT0gJ0dFVCcgfHwgX3JlZiA9PT0gJyc7CgogIGJyb3dzZXJTdXBwb3J0c1R1cmJvbGlua3MgPSBicm93c2VyU3VwcG9ydHNQdXNoU3RhdGUgJiYgYnJvd3NlcklzbnRCdWdneSAmJiByZXF1ZXN0TWV0aG9kSXNTYWZlOwoKICBicm93c2VyU3VwcG9ydHNDdXN0b21FdmVudHMgPSBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50OwoKICBpZiAoYnJvd3NlclN1cHBvcnRzQ3VzdG9tRXZlbnRzKSB7CiAgICBpbnN0YWxsRG9jdW1lbnRSZWFkeVBhZ2VFdmVudFRyaWdnZXJzKCk7CiAgICBpbnN0YWxsSnF1ZXJ5QWpheFN1Y2Nlc3NQYWdlVXBkYXRlVHJpZ2dlcigpOwogIH0KCiAgaWYgKGJyb3dzZXJTdXBwb3J0c1R1cmJvbGlua3MpIHsKICAgIHZpc2l0ID0gZmV0Y2g7CiAgICBpbml0aWFsaXplVHVyYm9saW5rcygpOwogIH0gZWxzZSB7CiAgICB2aXNpdCA9IGZ1bmN0aW9uKHVybCkgewogICAgICByZXR1cm4gZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHVybDsKICAgIH07CiAgfQoKICB0aGlzLlR1cmJvbGlua3MgPSB7CiAgICB2aXNpdDogdmlzaXQsCiAgICBwYWdlc0NhY2hlZDogcGFnZXNDYWNoZWQsCiAgICBlbmFibGVUcmFuc2l0aW9uQ2FjaGU6IGVuYWJsZVRyYW5zaXRpb25DYWNoZSwKICAgIGFsbG93TGlua0V4dGVuc2lvbnM6IExpbmsuYWxsb3dFeHRlbnNpb25zLAogICAgc3VwcG9ydGVkOiBicm93c2VyU3VwcG9ydHNUdXJib2xpbmtzLAogICAgRVZFTlRTOiBjbG9uZShFVkVOVFMpCiAgfTsKCn0pLmNhbGwodGhpcyk7Cg==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 23:47:38 GMT",
                    "Content-Length": "22751",
                    "Date": "Sat, 08 Nov 2014 23:47:38 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}