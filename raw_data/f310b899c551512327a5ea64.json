{
    "url": "http://localhost:9999/cubing/tnoodle/mootools/WebContent/mootools/.mootools-core-1.4.2.js.orig",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>document.location.pathname</b> and written to <b>the 'open()' function of an XMLHttpRequest object</b> via the following statements:<ul><li>url = document.location.pathname;</li><li>url = url.substr(0, trimPosition);</li><li>xhr.open(method.toUpperCase(), url, this.options.async, this.options.user, this.options.password);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/cubing/tnoodle/mootools/WebContent/mootools/.mootools-core-1.4.2.js.orig",
                "path": "/cubing/tnoodle/mootools/WebContent/mootools/.mootools-core-1.4.2.js.orig",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9jdWJpbmcvdG5vb2RsZS9tb290b29scy9XZWJDb250ZW50L21vb3Rvb2xzLy5tb290b29scy1jb3JlLTEuNC4yLmpzLm9yaWcgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTk1NzQ3DQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04DQpEYXRlOiBTYXQsIDA4IE5vdiAyMDE0IDIwOjI1OjE2IEdNVA0KTGFzdC1Nb2RpZmllZDogU2F0LCAwOCBOb3YgMjAxNCAyMDoyNToxNSBHTVQNCg0KLyoKLS0tCk1vb1Rvb2xzOiB0aGUgamF2YXNjcmlwdCBmcmFtZXdvcmsKCndlYiBidWlsZDoKIC0gaHR0cDovL21vb3Rvb2xzLm5ldC9jb3JlLzc2YmY0NzA2MmQ2YzE5ODNkNjZjZTQ3YWQ2NmFhMGUwCgpwYWNrYWdlciBidWlsZDoKIC0gcGFja2FnZXIgYnVpbGQgQ29yZS9Db3JlIENvcmUvQXJyYXkgQ29yZS9TdHJpbmcgQ29yZS9OdW1iZXIgQ29yZS9GdW5jdGlvbiBDb3JlL09iamVjdCBDb3JlL0V2ZW50IENvcmUvQnJvd3NlciBDb3JlL0NsYXNzIENvcmUvQ2xhc3MuRXh0cmFzIENvcmUvU2xpY2suUGFyc2VyIENvcmUvU2xpY2suRmluZGVyIENvcmUvRWxlbWVudCBDb3JlL0VsZW1lbnQuU3R5bGUgQ29yZS9FbGVtZW50LkV2ZW50IENvcmUvRWxlbWVudC5EZWxlZ2F0aW9uIENvcmUvRWxlbWVudC5EaW1lbnNpb25zIENvcmUvRnggQ29yZS9GeC5DU1MgQ29yZS9GeC5Ud2VlbiBDb3JlL0Z4Lk1vcnBoIENvcmUvRnguVHJhbnNpdGlvbnMgQ29yZS9SZXF1ZXN0IENvcmUvUmVxdWVzdC5IVE1MIENvcmUvUmVxdWVzdC5KU09OIENvcmUvQ29va2llIENvcmUvSlNPTiBDb3JlL0RPTVJlYWR5IENvcmUvU3dpZmYKCi4uLgoqLwoKLyoKLS0tCgpuYW1lOiBDb3JlCgpkZXNjcmlwdGlvbjogVGhlIGhlYXJ0IG9mIE1vb1Rvb2xzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjb3B5cmlnaHQ6IENvcHlyaWdodCAoYykgMjAwNi0yMDEwIFtWYWxlcmlvIFByb2lldHRpXShodHRwOi8vbWFkNG1pbGsubmV0LykuCgphdXRob3JzOiBUaGUgTW9vVG9vbHMgcHJvZHVjdGlvbiB0ZWFtIChodHRwOi8vbW9vdG9vbHMubmV0L2RldmVsb3BlcnMvKQoKaW5zcGlyYXRpb246CiAgLSBDbGFzcyBpbXBsZW1lbnRhdGlvbiBpbnNwaXJlZCBieSBbQmFzZS5qc10oaHR0cDovL2RlYW4uZWR3YXJkcy5uYW1lL3dlYmxvZy8yMDA2LzAzL2Jhc2UvKSBDb3B5cmlnaHQgKGMpIDIwMDYgRGVhbiBFZHdhcmRzLCBbR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXShodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbGdwbC1saWNlbnNlLnBocCkKICAtIFNvbWUgZnVuY3Rpb25hbGl0eSBpbnNwaXJlZCBieSBbUHJvdG90eXBlLmpzXShodHRwOi8vcHJvdG90eXBlanMub3JnKSBDb3B5cmlnaHQgKGMpIDIwMDUtMjAwNyBTYW0gU3RlcGhlbnNvbiwgW01JVCBMaWNlbnNlXShodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKQoKcHJvdmlkZXM6IFtDb3JlLCBNb29Ub29scywgVHlwZSwgdHlwZU9mLCBpbnN0YW5jZU9mLCBOYXRpdmVdCgouLi4KKi8KCihmdW5jdGlvbigpewoKdGhpcy5Nb29Ub29scyA9IHsKICAgICAgICB2ZXJzaW9uOiAnMS40LjInLAogICAgICAgIGJ1aWxkOiAnNTUyZGZkNDcwNGZjY2ZmZWQ0NDRlMDIxMWM1MDgzMWEyYmZlMjA5ZicKfTsKCi8vIHR5cGVPZiwgaW5zdGFuY2VPZgoKdmFyIHR5cGVPZiA9IHRoaXMudHlwZU9mID0gZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgaWYgKGl0ZW0gPT0gbnVsbCkgcmV0dXJuICdudWxsJzsKICAgICAgICBpZiAoaXRlbS4kZmFtaWx5ICE9IG51bGwpIHJldHVybiBpdGVtLiRmYW1pbHkoKTsKCiAgICAgICAgaWYgKGl0ZW0ubm9kZU5hbWUpewogICAgICAgICAgICAgICAgaWYgKGl0ZW0ubm9kZVR5cGUgPT0gMSkgcmV0dXJuICdlbGVtZW50JzsKICAgICAgICAgICAgICAgIGlmIChpdGVtLm5vZGVUeXBlID09IDMpIHJldHVybiAoL1xTLykudGVzdChpdGVtLm5vZGVWYWx1ZSkgPyAndGV4dG5vZGUnIDogJ3doaXRlc3BhY2UnOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0ubGVuZ3RoID09ICdudW1iZXInKXsKICAgICAgICAgICAgICAgIGlmIChpdGVtLmNhbGxlZSkgcmV0dXJuICdhcmd1bWVudHMnOwogICAgICAgICAgICAgICAgaWYgKCdpdGVtJyBpbiBpdGVtKSByZXR1cm4gJ2NvbGxlY3Rpb24nOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHR5cGVvZiBpdGVtOwp9OwoKdmFyIGluc3RhbmNlT2YgPSB0aGlzLmluc3RhbmNlT2YgPSBmdW5jdGlvbihpdGVtLCBvYmplY3QpewogICAgICAgIGlmIChpdGVtID09IG51bGwpIHJldHVybiBmYWxzZTsKICAgICAgICB2YXIgY29uc3RydWN0b3IgPSBpdGVtLiRjb25zdHJ1Y3RvciB8fCBpdGVtLmNvbnN0cnVjdG9yOwogICAgICAgIHdoaWxlIChjb25zdHJ1Y3Rvcil7CiAgICAgICAgICAgICAgICBpZiAoY29uc3RydWN0b3IgPT09IG9iamVjdCkgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yLnBhcmVudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGl0ZW0gaW5zdGFuY2VvZiBvYmplY3Q7Cn07CgovLyBGdW5jdGlvbiBvdmVybG9hZGluZwoKdmFyIEZ1bmN0aW9uID0gdGhpcy5GdW5jdGlvbjsKCnZhciBlbnVtZXJhYmxlcyA9IHRydWU7CmZvciAodmFyIGkgaW4ge3RvU3RyaW5nOiAxfSkgZW51bWVyYWJsZXMgPSBudWxsOwppZiAoZW51bWVyYWJsZXMpIGVudW1lcmFibGVzID0gWydoYXNPd25Qcm9wZXJ0eScsICd2YWx1ZU9mJywgJ2lzUHJvdG90eXBlT2YnLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAndG9Mb2NhbGVTdHJpbmcnLCAndG9TdHJpbmcnLCAnY29uc3RydWN0b3InXTsKCkZ1bmN0aW9uLnByb3RvdHlwZS5vdmVybG9hZFNldHRlciA9IGZ1bmN0aW9uKHVzZVBsdXJhbCl7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgIHJldHVybiBmdW5jdGlvbihhLCBiKXsKICAgICAgICAgICAgICAgIGlmIChhID09IG51bGwpIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgaWYgKHVzZVBsdXJhbCB8fCB0eXBlb2YgYSAhPSAnc3RyaW5nJyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYSkgc2VsZi5jYWxsKHRoaXMsIGssIGFba10pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW51bWVyYWJsZXMpIGZvciAodmFyIGkgPSBlbnVtZXJhYmxlcy5sZW5ndGg7IGktLTspewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBlbnVtZXJhYmxlc1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYS5oYXNPd25Qcm9wZXJ0eShrKSkgc2VsZi5jYWxsKHRoaXMsIGssIGFba10pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbGwodGhpcywgYSwgYik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Owp9OwoKRnVuY3Rpb24ucHJvdG90eXBlLm92ZXJsb2FkR2V0dGVyID0gZnVuY3Rpb24odXNlUGx1cmFsKXsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEpewogICAgICAgICAgICAgICAgdmFyIGFyZ3MsIHJlc3VsdDsKICAgICAgICAgICAgICAgIGlmICh1c2VQbHVyYWwgfHwgdHlwZW9mIGEgIT0gJ3N0cmluZycpIGFyZ3MgPSBhOwogICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICAgICAgICBpZiAoYXJncyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHJlc3VsdFthcmdzW2ldXSA9IHNlbGYuY2FsbCh0aGlzLCBhcmdzW2ldKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuY2FsbCh0aGlzLCBhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfTsKfTsKCkZ1bmN0aW9uLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbihrZXksIHZhbHVlKXsKICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTsKfS5vdmVybG9hZFNldHRlcigpOwoKRnVuY3Rpb24ucHJvdG90eXBlLmltcGxlbWVudCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpewogICAgICAgIHRoaXMucHJvdG90eXBlW2tleV0gPSB2YWx1ZTsKfS5vdmVybG9hZFNldHRlcigpOwoKLy8gRnJvbQoKdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlOwoKRnVuY3Rpb24uZnJvbSA9IGZ1bmN0aW9uKGl0ZW0pewogICAgICAgIHJldHVybiAodHlwZU9mKGl0ZW0pID09ICdmdW5jdGlvbicpID8gaXRlbSA6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTsKICAgICAgICB9Owp9OwoKQXJyYXkuZnJvbSA9IGZ1bmN0aW9uKGl0ZW0pewogICAgICAgIGlmIChpdGVtID09IG51bGwpIHJldHVybiBbXTsKICAgICAgICByZXR1cm4gKFR5cGUuaXNFbnVtZXJhYmxlKGl0ZW0pICYmIHR5cGVvZiBpdGVtICE9ICdzdHJpbmcnKSA/ICh0eXBlT2YoaXRlbSkgPT0gJ2FycmF5JykgPyBpdGVtIDogc2xpY2UuY2FsbChpdGVtKSA6IFtpdGVtXTsKfTsKCk51bWJlci5mcm9tID0gZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgdmFyIG51bWJlciA9IHBhcnNlRmxvYXQoaXRlbSk7CiAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bWJlcikgPyBudW1iZXIgOiBudWxsOwp9OwoKU3RyaW5nLmZyb20gPSBmdW5jdGlvbihpdGVtKXsKICAgICAgICByZXR1cm4gaXRlbSArICcnOwp9OwoKLy8gaGlkZSwgcHJvdGVjdAoKRnVuY3Rpb24uaW1wbGVtZW50KHsKCiAgICAgICAgaGlkZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMuJGhpZGRlbiA9IHRydWU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBwcm90ZWN0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy4kcHJvdGVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKLy8gVHlwZQoKdmFyIFR5cGUgPSB0aGlzLlR5cGUgPSBmdW5jdGlvbihuYW1lLCBvYmplY3QpewogICAgICAgIGlmIChuYW1lKXsKICAgICAgICAgICAgICAgIHZhciBsb3dlciA9IG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgIHZhciB0eXBlQ2hlY2sgPSBmdW5jdGlvbihpdGVtKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlT2YoaXRlbSkgPT0gbG93ZXIpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBUeXBlWydpcycgKyBuYW1lXSA9IHR5cGVDaGVjazsKICAgICAgICAgICAgICAgIGlmIChvYmplY3QgIT0gbnVsbCl7CiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5wcm90b3R5cGUuJGZhbWlseSA9IChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb3dlcjsKICAgICAgICAgICAgICAgICAgICAgICAgfSkuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuIG51bGw7CgogICAgICAgIG9iamVjdC5leHRlbmQodGhpcyk7CiAgICAgICAgb2JqZWN0LiRjb25zdHJ1Y3RvciA9IFR5cGU7CiAgICAgICAgb2JqZWN0LnByb3RvdHlwZS4kY29uc3RydWN0b3IgPSBvYmplY3Q7CgogICAgICAgIHJldHVybiBvYmplY3Q7Cn07Cgp2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOwoKVHlwZS5pc0VudW1lcmFibGUgPSBmdW5jdGlvbihpdGVtKXsKICAgICAgICByZXR1cm4gKGl0ZW0gIT0gbnVsbCAmJiB0eXBlb2YgaXRlbS5sZW5ndGggPT0gJ251bWJlcicgJiYgdG9TdHJpbmcuY2FsbChpdGVtKSAhPSAnW29iamVjdCBGdW5jdGlvbl0nICk7Cn07Cgp2YXIgaG9va3MgPSB7fTsKCnZhciBob29rc09mID0gZnVuY3Rpb24ob2JqZWN0KXsKICAgICAgICB2YXIgdHlwZSA9IHR5cGVPZihvYmplY3QucHJvdG90eXBlKTsKICAgICAgICByZXR1cm4gaG9va3NbdHlwZV0gfHwgKGhvb2tzW3R5cGVdID0gW10pOwp9OwoKdmFyIGltcGxlbWVudCA9IGZ1bmN0aW9uKG5hbWUsIG1ldGhvZCl7CiAgICAgICAgaWYgKG1ldGhvZCAmJiBtZXRob2QuJGhpZGRlbikgcmV0dXJuOwoKICAgICAgICB2YXIgaG9va3MgPSBob29rc09mKHRoaXMpOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgIHZhciBob29rID0gaG9va3NbaV07CiAgICAgICAgICAgICAgICBpZiAodHlwZU9mKGhvb2spID09ICd0eXBlJykgaW1wbGVtZW50LmNhbGwoaG9vaywgbmFtZSwgbWV0aG9kKTsKICAgICAgICAgICAgICAgIGVsc2UgaG9vay5jYWxsKHRoaXMsIG5hbWUsIG1ldGhvZCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgcHJldmlvdXMgPSB0aGlzLnByb3RvdHlwZVtuYW1lXTsKICAgICAgICBpZiAocHJldmlvdXMgPT0gbnVsbCB8fCAhcHJldmlvdXMuJHByb3RlY3RlZCkgdGhpcy5wcm90b3R5cGVbbmFtZV0gPSBtZXRob2Q7CgogICAgICAgIGlmICh0aGlzW25hbWVdID09IG51bGwgJiYgdHlwZU9mKG1ldGhvZCkgPT0gJ2Z1bmN0aW9uJykgZXh0ZW5kLmNhbGwodGhpcywgbmFtZSwgZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KGl0ZW0sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICAgICAgfSk7Cn07Cgp2YXIgZXh0ZW5kID0gZnVuY3Rpb24obmFtZSwgbWV0aG9kKXsKICAgICAgICBpZiAobWV0aG9kICYmIG1ldGhvZC4kaGlkZGVuKSByZXR1cm47CiAgICAgICAgdmFyIHByZXZpb3VzID0gdGhpc1tuYW1lXTsKICAgICAgICBpZiAocHJldmlvdXMgPT0gbnVsbCB8fCAhcHJldmlvdXMuJHByb3RlY3RlZCkgdGhpc1tuYW1lXSA9IG1ldGhvZDsKfTsKClR5cGUuaW1wbGVtZW50KHsKCiAgICAgICAgaW1wbGVtZW50OiBpbXBsZW1lbnQub3ZlcmxvYWRTZXR0ZXIoKSwKCiAgICAgICAgZXh0ZW5kOiBleHRlbmQub3ZlcmxvYWRTZXR0ZXIoKSwKCiAgICAgICAgYWxpYXM6IGZ1bmN0aW9uKG5hbWUsIGV4aXN0aW5nKXsKICAgICAgICAgICAgICAgIGltcGxlbWVudC5jYWxsKHRoaXMsIG5hbWUsIHRoaXMucHJvdG90eXBlW2V4aXN0aW5nXSk7CiAgICAgICAgfS5vdmVybG9hZFNldHRlcigpLAoKICAgICAgICBtaXJyb3I6IGZ1bmN0aW9uKGhvb2spewogICAgICAgICAgICAgICAgaG9va3NPZih0aGlzKS5wdXNoKGhvb2spOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQoKfSk7CgpuZXcgVHlwZSgnVHlwZScsIFR5cGUpOwoKLy8gRGVmYXVsdCBUeXBlcwoKdmFyIGZvcmNlID0gZnVuY3Rpb24obmFtZSwgb2JqZWN0LCBtZXRob2RzKXsKICAgICAgICB2YXIgaXNUeXBlID0gKG9iamVjdCAhPSBPYmplY3QpLAogICAgICAgICAgICAgICAgcHJvdG90eXBlID0gb2JqZWN0LnByb3RvdHlwZTsKCiAgICAgICAgaWYgKGlzVHlwZSkgb2JqZWN0ID0gbmV3IFR5cGUobmFtZSwgb2JqZWN0KTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBtZXRob2RzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIga2V5ID0gbWV0aG9kc1tpXSwKICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJpYyA9IG9iamVjdFtrZXldLAogICAgICAgICAgICAgICAgICAgICAgICBwcm90byA9IHByb3RvdHlwZVtrZXldOwoKICAgICAgICAgICAgICAgIGlmIChnZW5lcmljKSBnZW5lcmljLnByb3RlY3QoKTsKCiAgICAgICAgICAgICAgICBpZiAoaXNUeXBlICYmIHByb3RvKXsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHByb3RvdHlwZVtrZXldOwogICAgICAgICAgICAgICAgICAgICAgICBwcm90b3R5cGVba2V5XSA9IHByb3RvLnByb3RlY3QoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChpc1R5cGUpIG9iamVjdC5pbXBsZW1lbnQocHJvdG90eXBlKTsKCiAgICAgICAgcmV0dXJuIGZvcmNlOwp9OwoKZm9yY2UoJ1N0cmluZycsIFN0cmluZywgWwogICAgICAgICdjaGFyQXQnLCAnY2hhckNvZGVBdCcsICdjb25jYXQnLCAnaW5kZXhPZicsICdsYXN0SW5kZXhPZicsICdtYXRjaCcsICdxdW90ZScsICdyZXBsYWNlJywgJ3NlYXJjaCcsCiAgICAgICAgJ3NsaWNlJywgJ3NwbGl0JywgJ3N1YnN0cicsICdzdWJzdHJpbmcnLCAndHJpbScsICd0b0xvd2VyQ2FzZScsICd0b1VwcGVyQ2FzZScKXSkoJ0FycmF5JywgQXJyYXksIFsKICAgICAgICAncG9wJywgJ3B1c2gnLCAncmV2ZXJzZScsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0JywgJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJywKICAgICAgICAnaW5kZXhPZicsICdsYXN0SW5kZXhPZicsICdmaWx0ZXInLCAnZm9yRWFjaCcsICdldmVyeScsICdtYXAnLCAnc29tZScsICdyZWR1Y2UnLCAncmVkdWNlUmlnaHQnCl0pKCdOdW1iZXInLCBOdW1iZXIsIFsKICAgICAgICAndG9FeHBvbmVudGlhbCcsICd0b0ZpeGVkJywgJ3RvTG9jYWxlU3RyaW5nJywgJ3RvUHJlY2lzaW9uJwpdKSgnRnVuY3Rpb24nLCBGdW5jdGlvbiwgWwogICAgICAgICdhcHBseScsICdjYWxsJywgJ2JpbmQnCl0pKCdSZWdFeHAnLCBSZWdFeHAsIFsKICAgICAgICAnZXhlYycsICd0ZXN0JwpdKSgnT2JqZWN0JywgT2JqZWN0LCBbCiAgICAgICAgJ2NyZWF0ZScsICdkZWZpbmVQcm9wZXJ0eScsICdkZWZpbmVQcm9wZXJ0aWVzJywgJ2tleXMnLAogICAgICAgICdnZXRQcm90b3R5cGVPZicsICdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCAnZ2V0T3duUHJvcGVydHlOYW1lcycsCiAgICAgICAgJ3ByZXZlbnRFeHRlbnNpb25zJywgJ2lzRXh0ZW5zaWJsZScsICdzZWFsJywgJ2lzU2VhbGVkJywgJ2ZyZWV6ZScsICdpc0Zyb3plbicKXSkoJ0RhdGUnLCBEYXRlLCBbJ25vdyddKTsKCk9iamVjdC5leHRlbmQgPSBleHRlbmQub3ZlcmxvYWRTZXR0ZXIoKTsKCkRhdGUuZXh0ZW5kKCdub3cnLCBmdW5jdGlvbigpewogICAgICAgIHJldHVybiArKG5ldyBEYXRlKTsKfSk7CgpuZXcgVHlwZSgnQm9vbGVhbicsIEJvb2xlYW4pOwoKLy8gZml4ZXMgTmFOIHJldHVybmluZyBhcyBOdW1iZXIKCk51bWJlci5wcm90b3R5cGUuJGZhbWlseSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgcmV0dXJuIGlzRmluaXRlKHRoaXMpID8gJ251bWJlcicgOiAnbnVsbCc7Cn0uaGlkZSgpOwoKLy8gTnVtYmVyLnJhbmRvbQoKTnVtYmVyLmV4dGVuZCgncmFuZG9tJywgZnVuY3Rpb24obWluLCBtYXgpewogICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pOwp9KTsKCi8vIGZvckVhY2gsIGVhY2gKCnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7Ck9iamVjdC5leHRlbmQoJ2ZvckVhY2gnLCBmdW5jdGlvbihvYmplY3QsIGZuLCBiaW5kKXsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkgZm4uY2FsbChiaW5kLCBvYmplY3Rba2V5XSwga2V5LCBvYmplY3QpOwogICAgICAgIH0KfSk7CgpPYmplY3QuZWFjaCA9IE9iamVjdC5mb3JFYWNoOwoKQXJyYXkuaW1wbGVtZW50KHsKCiAgICAgICAgZm9yRWFjaDogZnVuY3Rpb24oZm4sIGJpbmQpewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIGluIHRoaXMpIGZuLmNhbGwoYmluZCwgdGhpc1tpXSwgaSwgdGhpcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgZWFjaDogZnVuY3Rpb24oZm4sIGJpbmQpewogICAgICAgICAgICAgICAgQXJyYXkuZm9yRWFjaCh0aGlzLCBmbiwgYmluZCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCi8vIEFycmF5ICYgT2JqZWN0IGNsb25pbmcsIE9iamVjdCBtZXJnaW5nIGFuZCBhcHBlbmRpbmcKCnZhciBjbG9uZU9mID0gZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgc3dpdGNoICh0eXBlT2YoaXRlbSkpewogICAgICAgICAgICAgICAgY2FzZSAnYXJyYXknOiByZXR1cm4gaXRlbS5jbG9uZSgpOwogICAgICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzogcmV0dXJuIE9iamVjdC5jbG9uZShpdGVtKTsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBpdGVtOwogICAgICAgIH0KfTsKCkFycmF5LmltcGxlbWVudCgnY2xvbmUnLCBmdW5jdGlvbigpewogICAgICAgIHZhciBpID0gdGhpcy5sZW5ndGgsIGNsb25lID0gbmV3IEFycmF5KGkpOwogICAgICAgIHdoaWxlIChpLS0pIGNsb25lW2ldID0gY2xvbmVPZih0aGlzW2ldKTsKICAgICAgICByZXR1cm4gY2xvbmU7Cn0pOwoKdmFyIG1lcmdlT25lID0gZnVuY3Rpb24oc291cmNlLCBrZXksIGN1cnJlbnQpewogICAgICAgIHN3aXRjaCAodHlwZU9mKGN1cnJlbnQpKXsKICAgICAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlT2Yoc291cmNlW2tleV0pID09ICdvYmplY3QnKSBPYmplY3QubWVyZ2Uoc291cmNlW2tleV0sIGN1cnJlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHNvdXJjZVtrZXldID0gT2JqZWN0LmNsb25lKGN1cnJlbnQpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICdhcnJheSc6IHNvdXJjZVtrZXldID0gY3VycmVudC5jbG9uZSgpOyBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHNvdXJjZVtrZXldID0gY3VycmVudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNvdXJjZTsKfTsKCk9iamVjdC5leHRlbmQoewoKICAgICAgICBtZXJnZTogZnVuY3Rpb24oc291cmNlLCBrLCB2KXsKICAgICAgICAgICAgICAgIGlmICh0eXBlT2YoaykgPT0gJ3N0cmluZycpIHJldHVybiBtZXJnZU9uZShzb3VyY2UsIGssIHYpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDEsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWVyZ2VPbmUoc291cmNlLCBrZXksIG9iamVjdFtrZXldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2U7CiAgICAgICAgfSwKCiAgICAgICAgY2xvbmU6IGZ1bmN0aW9uKG9iamVjdCl7CiAgICAgICAgICAgICAgICB2YXIgY2xvbmUgPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIGNsb25lW2tleV0gPSBjbG9uZU9mKG9iamVjdFtrZXldKTsKICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTsKICAgICAgICB9LAoKICAgICAgICBhcHBlbmQ6IGZ1bmN0aW9uKG9yaWdpbmFsKXsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHRlbmRlZCA9IGFyZ3VtZW50c1tpXSB8fCB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGV4dGVuZGVkKSBvcmlnaW5hbFtrZXldID0gZXh0ZW5kZWRba2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbDsKICAgICAgICB9Cgp9KTsKCi8vIE9iamVjdC1sZXNzIHR5cGVzCgpbJ09iamVjdCcsICdXaGl0ZVNwYWNlJywgJ1RleHROb2RlJywgJ0NvbGxlY3Rpb24nLCAnQXJndW1lbnRzJ10uZWFjaChmdW5jdGlvbihuYW1lKXsKICAgICAgICBuZXcgVHlwZShuYW1lKTsKfSk7CgovLyBVbmlxdWUgSUQKCnZhciBVSUQgPSBEYXRlLm5vdygpOwoKU3RyaW5nLmV4dGVuZCgndW5pcXVlSUQnLCBmdW5jdGlvbigpewogICAgICAgIHJldHVybiAoVUlEKyspLnRvU3RyaW5nKDM2KTsKfSk7CgoKCn0pKCk7CgoKLyoKLS0tCgpuYW1lOiBBcnJheQoKZGVzY3JpcHRpb246IENvbnRhaW5zIEFycmF5IFByb3RvdHlwZXMgbGlrZSBlYWNoLCBjb250YWlucywgYW5kIGVyYXNlLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogVHlwZQoKcHJvdmlkZXM6IEFycmF5CgouLi4KKi8KCkFycmF5LmltcGxlbWVudCh7CgogICAgICAgIC8qPCFFUzU+Ki8KICAgICAgICBldmVyeTogZnVuY3Rpb24oZm4sIGJpbmQpewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aCA+Pj4gMDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaSBpbiB0aGlzKSAmJiAhZm4uY2FsbChiaW5kLCB0aGlzW2ldLCBpLCB0aGlzKSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSwKCiAgICAgICAgZmlsdGVyOiBmdW5jdGlvbihmbiwgYmluZCl7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aCA+Pj4gMDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaSBpbiB0aGlzKSAmJiBmbi5jYWxsKGJpbmQsIHRoaXNbaV0sIGksIHRoaXMpKSByZXN1bHRzLnB1c2godGhpc1tpXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9LAoKICAgICAgICBpbmRleE9mOiBmdW5jdGlvbihpdGVtLCBmcm9tKXsKICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCA+Pj4gMDsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAoZnJvbSA8IDApID8gTWF0aC5tYXgoMCwgbGVuZ3RoICsgZnJvbSkgOiBmcm9tIHx8IDA7IGkgPCBsZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9LAoKICAgICAgICBtYXA6IGZ1bmN0aW9uKGZuLCBiaW5kKXsKICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCA+Pj4gMCwgcmVzdWx0cyA9IEFycmF5KGxlbmd0aCk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgaW4gdGhpcykgcmVzdWx0c1tpXSA9IGZuLmNhbGwoYmluZCwgdGhpc1tpXSwgaSwgdGhpcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9LAoKICAgICAgICBzb21lOiBmdW5jdGlvbihmbiwgYmluZCl7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoID4+PiAwOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpIGluIHRoaXMpICYmIGZuLmNhbGwoYmluZCwgdGhpc1tpXSwgaSwgdGhpcykpIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0sCiAgICAgICAgLyo8LyFFUzU+Ki8KCiAgICAgICAgY2xlYW46IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtICE9IG51bGw7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBpbnZva2U6IGZ1bmN0aW9uKG1ldGhvZE5hbWUpewogICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5zbGljZShhcmd1bWVudHMsIDEpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKGl0ZW0pewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVttZXRob2ROYW1lXS5hcHBseShpdGVtLCBhcmdzKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIGFzc29jaWF0ZTogZnVuY3Rpb24oa2V5cyl7CiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge30sIGxlbmd0aCA9IE1hdGgubWluKHRoaXMubGVuZ3RoLCBrZXlzLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSBvYmpba2V5c1tpXV0gPSB0aGlzW2ldOwogICAgICAgICAgICAgICAgcmV0dXJuIG9iajsKICAgICAgICB9LAoKICAgICAgICBsaW5rOiBmdW5jdGlvbihvYmplY3QpewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9OwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3Rba2V5XSh0aGlzW2ldKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHRoaXNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqZWN0W2tleV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKCiAgICAgICAgY29udGFpbnM6IGZ1bmN0aW9uKGl0ZW0sIGZyb20pewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihpdGVtLCBmcm9tKSAhPSAtMTsKICAgICAgICB9LAoKICAgICAgICBhcHBlbmQ6IGZ1bmN0aW9uKGFycmF5KXsKICAgICAgICAgICAgICAgIHRoaXMucHVzaC5hcHBseSh0aGlzLCBhcnJheSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBnZXRMYXN0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmxlbmd0aCkgPyB0aGlzW3RoaXMubGVuZ3RoIC0gMV0gOiBudWxsOwogICAgICAgIH0sCgogICAgICAgIGdldFJhbmRvbTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5sZW5ndGgpID8gdGhpc1tOdW1iZXIucmFuZG9tKDAsIHRoaXMubGVuZ3RoIC0gMSldIDogbnVsbDsKICAgICAgICB9LAoKICAgICAgICBpbmNsdWRlOiBmdW5jdGlvbihpdGVtKXsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250YWlucyhpdGVtKSkgdGhpcy5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgY29tYmluZTogZnVuY3Rpb24oYXJyYXkpewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHRoaXMuaW5jbHVkZShhcnJheVtpXSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBlcmFzZTogZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGktLTspewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gaXRlbSkgdGhpcy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBlbXB0eTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gMDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGZsYXR0ZW46IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVPZih0aGlzW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ251bGwnKSBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkgPSBhcnJheS5jb25jYXQoKHR5cGUgPT0gJ2FycmF5JyB8fCB0eXBlID09ICdjb2xsZWN0aW9uJyB8fCB0eXBlID09ICdhcmd1bWVudHMnIHx8IGluc3RhbmNlT2YodGhpc1tpXSwgQXJyYXkpKSA/IEFycmF5LmZsYXR0ZW4odGhpc1tpXSkgOiB0aGlzW2ldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBhcnJheTsKICAgICAgICB9LAoKICAgICAgICBwaWNrOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldICE9IG51bGwpIHJldHVybiB0aGlzW2ldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgaGV4VG9SZ2I6IGZ1bmN0aW9uKGFycmF5KXsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCAhPSAzKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIHZhciByZ2IgPSB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT0gMSkgdmFsdWUgKz0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b0ludCgxNik7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiAoYXJyYXkpID8gcmdiIDogJ3JnYignICsgcmdiICsgJyknOwogICAgICAgIH0sCgogICAgICAgIHJnYlRvSGV4OiBmdW5jdGlvbihhcnJheSl7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPCAzKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PSA0ICYmIHRoaXNbM10gPT0gMCAmJiAhYXJyYXkpIHJldHVybiAndHJhbnNwYXJlbnQnOwogICAgICAgICAgICAgICAgdmFyIGhleCA9IFtdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYml0ID0gKHRoaXNbaV0gLSAwKS50b1N0cmluZygxNik7CiAgICAgICAgICAgICAgICAgICAgICAgIGhleC5wdXNoKChiaXQubGVuZ3RoID09IDEpID8gJzAnICsgYml0IDogYml0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAoYXJyYXkpID8gaGV4IDogJyMnICsgaGV4LmpvaW4oJycpOwogICAgICAgIH0KCn0pOwoKCgoKLyoKLS0tCgpuYW1lOiBTdHJpbmcKCmRlc2NyaXB0aW9uOiBDb250YWlucyBTdHJpbmcgUHJvdG90eXBlcyBsaWtlIGNhbWVsQ2FzZSwgY2FwaXRhbGl6ZSwgdGVzdCwgYW5kIHRvSW50LgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogVHlwZQoKcHJvdmlkZXM6IFN0cmluZwoKLi4uCiovCgpTdHJpbmcuaW1wbGVtZW50KHsKCiAgICAgICAgdGVzdDogZnVuY3Rpb24ocmVnZXgsIHBhcmFtcyl7CiAgICAgICAgICAgICAgICByZXR1cm4gKCh0eXBlT2YocmVnZXgpID09ICdyZWdleHAnKSA/IHJlZ2V4IDogbmV3IFJlZ0V4cCgnJyArIHJlZ2V4LCBwYXJhbXMpKS50ZXN0KHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIGNvbnRhaW5zOiBmdW5jdGlvbihzdHJpbmcsIHNlcGFyYXRvcil7CiAgICAgICAgICAgICAgICByZXR1cm4gKHNlcGFyYXRvcikgPyAoc2VwYXJhdG9yICsgdGhpcyArIHNlcGFyYXRvcikuaW5kZXhPZihzZXBhcmF0b3IgKyBzdHJpbmcgKyBzZXBhcmF0b3IpID4gLTEgOiBTdHJpbmcodGhpcykuaW5kZXhPZihzdHJpbmcpID4gLTE7CiAgICAgICAgfSwKCiAgICAgICAgdHJpbTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvXlxzK3xccyskL2csICcnKTsKICAgICAgICB9LAoKICAgICAgICBjbGVhbjogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvXHMrL2csICcgJykudHJpbSgpOwogICAgICAgIH0sCgogICAgICAgIGNhbWVsQ2FzZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvLVxEL2csIGZ1bmN0aW9uKG1hdGNoKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgaHlwaGVuYXRlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbihtYXRjaCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoJy0nICsgbWF0Y2guY2hhckF0KDApLnRvTG93ZXJDYXNlKCkpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgY2FwaXRhbGl6ZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvXGJbYS16XS9nLCBmdW5jdGlvbihtYXRjaCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgZXNjYXBlUmVnRXhwOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC8oWy0uKis/XiR7fSgpfFtcXVwvXFxdKS9nLCAnXFwkMScpOwogICAgICAgIH0sCgogICAgICAgIHRvSW50OiBmdW5jdGlvbihiYXNlKXsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLCBiYXNlIHx8IDEwKTsKICAgICAgICB9LAoKICAgICAgICB0b0Zsb2F0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcyk7CiAgICAgICAgfSwKCiAgICAgICAgaGV4VG9SZ2I6IGZ1bmN0aW9uKGFycmF5KXsKICAgICAgICAgICAgICAgIHZhciBoZXggPSBTdHJpbmcodGhpcykubWF0Y2goL14jPyhcd3sxLDJ9KShcd3sxLDJ9KShcd3sxLDJ9KSQvKTsKICAgICAgICAgICAgICAgIHJldHVybiAoaGV4KSA/IGhleC5zbGljZSgxKS5oZXhUb1JnYihhcnJheSkgOiBudWxsOwogICAgICAgIH0sCgogICAgICAgIHJnYlRvSGV4OiBmdW5jdGlvbihhcnJheSl7CiAgICAgICAgICAgICAgICB2YXIgcmdiID0gU3RyaW5nKHRoaXMpLm1hdGNoKC9cZHsxLDN9L2cpOwogICAgICAgICAgICAgICAgcmV0dXJuIChyZ2IpID8gcmdiLnJnYlRvSGV4KGFycmF5KSA6IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgc3Vic3RpdHV0ZTogZnVuY3Rpb24ob2JqZWN0LCByZWdleHApewogICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKHJlZ2V4cCB8fCAoL1xcP1x7KFtee31dKylcfS9nKSwgZnVuY3Rpb24obWF0Y2gsIG5hbWUpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guY2hhckF0KDApID09ICdcXCcpIHJldHVybiBtYXRjaC5zbGljZSgxKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChvYmplY3RbbmFtZV0gIT0gbnVsbCkgPyBvYmplY3RbbmFtZV0gOiAnJzsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH0KCn0pOwoKCi8qCi0tLQoKbmFtZTogTnVtYmVyCgpkZXNjcmlwdGlvbjogQ29udGFpbnMgTnVtYmVyIFByb3RvdHlwZXMgbGlrZSBsaW1pdCwgcm91bmQsIHRpbWVzLCBhbmQgY2VpbC4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFR5cGUKCnByb3ZpZGVzOiBOdW1iZXIKCi4uLgoqLwoKTnVtYmVyLmltcGxlbWVudCh7CgogICAgICAgIGxpbWl0OiBmdW5jdGlvbihtaW4sIG1heCl7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5taW4obWF4LCBNYXRoLm1heChtaW4sIHRoaXMpKTsKICAgICAgICB9LAoKICAgICAgICByb3VuZDogZnVuY3Rpb24ocHJlY2lzaW9uKXsKICAgICAgICAgICAgICAgIHByZWNpc2lvbiA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24gfHwgMCkudG9GaXhlZChwcmVjaXNpb24gPCAwID8gLXByZWNpc2lvbiA6IDApOwogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcyAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247CiAgICAgICAgfSwKCiAgICAgICAgdGltZXM6IGZ1bmN0aW9uKGZuLCBiaW5kKXsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpczsgaSsrKSBmbi5jYWxsKGJpbmQsIGksIHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIHRvRmxvYXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzKTsKICAgICAgICB9LAoKICAgICAgICB0b0ludDogZnVuY3Rpb24oYmFzZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcywgYmFzZSB8fCAxMCk7CiAgICAgICAgfQoKfSk7CgpOdW1iZXIuYWxpYXMoJ2VhY2gnLCAndGltZXMnKTsKCihmdW5jdGlvbihtYXRoKXsKICAgICAgICB2YXIgbWV0aG9kcyA9IHt9OwogICAgICAgIG1hdGguZWFjaChmdW5jdGlvbihuYW1lKXsKICAgICAgICAgICAgICAgIGlmICghTnVtYmVyW25hbWVdKSBtZXRob2RzW25hbWVdID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGhbbmFtZV0uYXBwbHkobnVsbCwgW3RoaXNdLmNvbmNhdChBcnJheS5mcm9tKGFyZ3VtZW50cykpKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICAgICAgTnVtYmVyLmltcGxlbWVudChtZXRob2RzKTsKfSkoWydhYnMnLCAnYWNvcycsICdhc2luJywgJ2F0YW4nLCAnYXRhbjInLCAnY2VpbCcsICdjb3MnLCAnZXhwJywgJ2Zsb29yJywgJ2xvZycsICdtYXgnLCAnbWluJywgJ3BvdycsICdzaW4nLCAnc3FydCcsICd0YW4nXSk7CgoKLyoKLS0tCgpuYW1lOiBGdW5jdGlvbgoKZGVzY3JpcHRpb246IENvbnRhaW5zIEZ1bmN0aW9uIFByb3RvdHlwZXMgbGlrZSBjcmVhdGUsIGJpbmQsIHBhc3MsIGFuZCBkZWxheS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFR5cGUKCnByb3ZpZGVzOiBGdW5jdGlvbgoKLi4uCiovCgpGdW5jdGlvbi5leHRlbmQoewoKICAgICAgICBhdHRlbXB0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzW2ldKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpe30KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KCn0pOwoKRnVuY3Rpb24uaW1wbGVtZW50KHsKCiAgICAgICAgYXR0ZW1wdDogZnVuY3Rpb24oYXJncywgYmluZCl7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseShiaW5kLCBBcnJheS5mcm9tKGFyZ3MpKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpe30KCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9LAoKICAgICAgICAvKjwhRVM1LWJpbmQ+Ki8KICAgICAgICBiaW5kOiBmdW5jdGlvbih0aGF0KXsKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gQXJyYXkuc2xpY2UoYXJndW1lbnRzLCAxKSA6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgIEYgPSBmdW5jdGlvbigpe307CgogICAgICAgICAgICAgICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGF0LCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGLnByb3RvdHlwZSA9IHNlbGYucHJvdG90eXBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBuZXcgRjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gKCFhcmdzICYmICFsZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNhbGwoY29udGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYuYXBwbHkoY29udGV4dCwgYXJncyAmJiBsZW5ndGggPyBhcmdzLmNvbmNhdChBcnJheS5zbGljZShhcmd1bWVudHMpKSA6IGFyZ3MgfHwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgPT0gdGhhdCA/IHJlc3VsdCA6IGNvbnRleHQ7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcmV0dXJuIGJvdW5kOwogICAgICAgIH0sCiAgICAgICAgLyo8LyFFUzUtYmluZD4qLwoKICAgICAgICBwYXNzOiBmdW5jdGlvbihhcmdzLCBiaW5kKXsKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgIGlmIChhcmdzICE9IG51bGwpIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3MpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmFwcGx5KGJpbmQsIGFyZ3MgfHwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgfSwKCiAgICAgICAgZGVsYXk6IGZ1bmN0aW9uKGRlbGF5LCBiaW5kLCBhcmdzKXsKICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KHRoaXMucGFzcygoYXJncyA9PSBudWxsID8gW10gOiBhcmdzKSwgYmluZCksIGRlbGF5KTsKICAgICAgICB9LAoKICAgICAgICBwZXJpb2RpY2FsOiBmdW5jdGlvbihwZXJpb2RpY2FsLCBiaW5kLCBhcmdzKXsKICAgICAgICAgICAgICAgIHJldHVybiBzZXRJbnRlcnZhbCh0aGlzLnBhc3MoKGFyZ3MgPT0gbnVsbCA/IFtdIDogYXJncyksIGJpbmQpLCBwZXJpb2RpY2FsKTsKICAgICAgICB9Cgp9KTsKCgoKCi8qCi0tLQoKbmFtZTogT2JqZWN0CgpkZXNjcmlwdGlvbjogT2JqZWN0IGdlbmVyaWMgbWV0aG9kcwoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogVHlwZQoKcHJvdmlkZXM6IFtPYmplY3QsIEhhc2hdCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKCk9iamVjdC5leHRlbmQoewoKICAgICAgICBzdWJzZXQ6IGZ1bmN0aW9uKG9iamVjdCwga2V5cyl7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IHt9OwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrID0ga2V5c1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgaW4gb2JqZWN0KSByZXN1bHRzW2tdID0gb2JqZWN0W2tdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgfSwKCiAgICAgICAgbWFwOiBmdW5jdGlvbihvYmplY3QsIGZuLCBiaW5kKXsKICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0ge307CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSByZXN1bHRzW2tleV0gPSBmbi5jYWxsKGJpbmQsIG9iamVjdFtrZXldLCBrZXksIG9iamVjdCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9LAoKICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKG9iamVjdCwgZm4sIGJpbmQpewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGZuLmNhbGwoYmluZCwgdmFsdWUsIGtleSwgb2JqZWN0KSkgcmVzdWx0c1trZXldID0gdmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9LAoKICAgICAgICBldmVyeTogZnVuY3Rpb24ob2JqZWN0LCBmbiwgYmluZCl7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmICFmbi5jYWxsKGJpbmQsIG9iamVjdFtrZXldLCBrZXkpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAoKICAgICAgICBzb21lOiBmdW5jdGlvbihvYmplY3QsIGZuLCBiaW5kKXsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZm4uY2FsbChiaW5kLCBvYmplY3Rba2V5XSwga2V5KSkgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSwKCiAgICAgICAga2V5czogZnVuY3Rpb24ob2JqZWN0KXsKICAgICAgICAgICAgICAgIHZhciBrZXlzID0gW107CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSBrZXlzLnB1c2goa2V5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBrZXlzOwogICAgICAgIH0sCgogICAgICAgIHZhbHVlczogZnVuY3Rpb24ob2JqZWN0KXsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHZhbHVlcy5wdXNoKG9iamVjdFtrZXldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0TGVuZ3RoOiBmdW5jdGlvbihvYmplY3QpewogICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoOwogICAgICAgIH0sCgogICAgICAgIGtleU9mOiBmdW5jdGlvbihvYmplY3QsIHZhbHVlKXsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgb2JqZWN0W2tleV0gPT09IHZhbHVlKSByZXR1cm4ga2V5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgY29udGFpbnM6IGZ1bmN0aW9uKG9iamVjdCwgdmFsdWUpewogICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlPZihvYmplY3QsIHZhbHVlKSAhPSBudWxsOwogICAgICAgIH0sCgogICAgICAgIHRvUXVlcnlTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgYmFzZSl7CiAgICAgICAgICAgICAgICB2YXIgcXVlcnlTdHJpbmcgPSBbXTsKCiAgICAgICAgICAgICAgICBPYmplY3QuZWFjaChvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZSkga2V5ID0gYmFzZSArICdbJyArIGtleSArICddJzsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlT2YodmFsdWUpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvYmplY3QnOiByZXN1bHQgPSBPYmplY3QudG9RdWVyeVN0cmluZyh2YWx1ZSwga2V5KTsgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXJyYXknOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHFzID0ge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5lYWNoKGZ1bmN0aW9uKHZhbCwgaSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFzW2ldID0gdmFsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBPYmplY3QudG9RdWVyeVN0cmluZyhxcywga2V5KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXN1bHQgPSBrZXkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSBxdWVyeVN0cmluZy5wdXNoKHJlc3VsdCk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlTdHJpbmcuam9pbignJicpOwogICAgICAgIH0KCn0pOwoKfSkoKTsKCgoKCi8qCi0tLQoKbmFtZTogQnJvd3NlcgoKZGVzY3JpcHRpb246IFRoZSBCcm93c2VyIE9iamVjdC4gQ29udGFpbnMgQnJvd3NlciBpbml0aWFsaXphdGlvbiwgV2luZG93IGFuZCBEb2N1bWVudCwgYW5kIHRoZSBCcm93c2VyIEhhc2guCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbQXJyYXksIEZ1bmN0aW9uLCBOdW1iZXIsIFN0cmluZ10KCnByb3ZpZGVzOiBbQnJvd3NlciwgV2luZG93LCBEb2N1bWVudF0KCi4uLgoqLwoKKGZ1bmN0aW9uKCl7Cgp2YXIgZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50Owp2YXIgd2luZG93ID0gZG9jdW1lbnQud2luZG93ID0gdGhpczsKCnZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSwKICAgICAgICBwbGF0Zm9ybSA9IG5hdmlnYXRvci5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpLAogICAgICAgIFVBID0gdWEubWF0Y2goLyhvcGVyYXxpZXxmaXJlZm94fGNocm9tZXx2ZXJzaW9uKVtcc1wvOl0oW1x3XGRcLl0rKT8uKj8oc2FmYXJpfHZlcnNpb25bXHNcLzpdKFtcd1xkXC5dKyl8JCkvKSB8fCBbbnVsbCwgJ3Vua25vd24nLCAwXSwKICAgICAgICBtb2RlID0gVUFbMV0gPT0gJ2llJyAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGU7Cgp2YXIgQnJvd3NlciA9IHRoaXMuQnJvd3NlciA9IHsKCiAgICAgICAgZXh0ZW5kOiBGdW5jdGlvbi5wcm90b3R5cGUuZXh0ZW5kLAoKICAgICAgICBuYW1lOiAoVUFbMV0gPT0gJ3ZlcnNpb24nKSA/IFVBWzNdIDogVUFbMV0sCgogICAgICAgIHZlcnNpb246IG1vZGUgfHwgcGFyc2VGbG9hdCgoVUFbMV0gPT0gJ29wZXJhJyAmJiBVQVs0XSkgPyBVQVs0XSA6IFVBWzJdKSwKCiAgICAgICAgUGxhdGZvcm06IHsKICAgICAgICAgICAgICAgIG5hbWU6IHVhLm1hdGNoKC9pcCg/OmFkfG9kfGhvbmUpLykgPyAnaW9zJyA6ICh1YS5tYXRjaCgvKD86d2Vib3N8YW5kcm9pZCkvKSB8fCBwbGF0Zm9ybS5tYXRjaCgvbWFjfHdpbnxsaW51eC8pIHx8IFsnb3RoZXInXSlbMF0KICAgICAgICB9LAoKICAgICAgICBGZWF0dXJlczogewogICAgICAgICAgICAgICAgeHBhdGg6ICEhKGRvY3VtZW50LmV2YWx1YXRlKSwKICAgICAgICAgICAgICAgIGFpcjogISEod2luZG93LnJ1bnRpbWUpLAogICAgICAgICAgICAgICAgcXVlcnk6ICEhKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IpLAogICAgICAgICAgICAgICAganNvbjogISEod2luZG93LkpTT04pCiAgICAgICAgfSwKCiAgICAgICAgUGx1Z2luczoge30KCn07CgpCcm93c2VyW0Jyb3dzZXIubmFtZV0gPSB0cnVlOwpCcm93c2VyW0Jyb3dzZXIubmFtZSArIHBhcnNlSW50KEJyb3dzZXIudmVyc2lvbiwgMTApXSA9IHRydWU7CkJyb3dzZXIuUGxhdGZvcm1bQnJvd3Nlci5QbGF0Zm9ybS5uYW1lXSA9IHRydWU7CgovLyBSZXF1ZXN0CgpCcm93c2VyLlJlcXVlc3QgPSAoZnVuY3Rpb24oKXsKCiAgICAgICAgdmFyIFhNTEhUVFAgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgIH07CgogICAgICAgIHZhciBNU1hNTDIgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNU1hNTDIuWE1MSFRUUCcpOwogICAgICAgIH07CgogICAgICAgIHZhciBNU1hNTCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJyk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLmF0dGVtcHQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIFhNTEhUVFAoKTsKICAgICAgICAgICAgICAgIHJldHVybiBYTUxIVFRQOwogICAgICAgIH0sIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBNU1hNTDIoKTsKICAgICAgICAgICAgICAgIHJldHVybiBNU1hNTDI7CiAgICAgICAgfSwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIE1TWE1MKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gTVNYTUw7CiAgICAgICAgfSk7Cgp9KSgpOwoKQnJvd3Nlci5GZWF0dXJlcy54aHIgPSAhIShCcm93c2VyLlJlcXVlc3QpOwoKLy8gRmxhc2ggZGV0ZWN0aW9uCgp2YXIgdmVyc2lvbiA9IChGdW5jdGlvbi5hdHRlbXB0KGZ1bmN0aW9uKCl7CiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5wbHVnaW5zWydTaG9ja3dhdmUgRmxhc2gnXS5kZXNjcmlwdGlvbjsKfSwgZnVuY3Rpb24oKXsKICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ1Nob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoJykuR2V0VmFyaWFibGUoJyR2ZXJzaW9uJyk7Cn0pIHx8ICcwIHIwJykubWF0Y2goL1xkKy9nKTsKCkJyb3dzZXIuUGx1Z2lucy5GbGFzaCA9IHsKICAgICAgICB2ZXJzaW9uOiBOdW1iZXIodmVyc2lvblswXSB8fCAnMC4nICsgdmVyc2lvblsxXSkgfHwgMCwKICAgICAgICBidWlsZDogTnVtYmVyKHZlcnNpb25bMl0pIHx8IDAKfTsKCi8vIFN0cmluZyBzY3JpcHRzCgpCcm93c2VyLmV4ZWMgPSBmdW5jdGlvbih0ZXh0KXsKICAgICAgICBpZiAoIXRleHQpIHJldHVybiB0ZXh0OwogICAgICAgIGlmICh3aW5kb3cuZXhlY1NjcmlwdCl7CiAgICAgICAgICAgICAgICB3aW5kb3cuZXhlY1NjcmlwdCh0ZXh0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgICAgICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2phdmFzY3JpcHQnKTsKICAgICAgICAgICAgICAgIHNjcmlwdC50ZXh0ID0gdGV4dDsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoc2NyaXB0KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRleHQ7Cn07CgpTdHJpbmcuaW1wbGVtZW50KCdzdHJpcFNjcmlwdHMnLCBmdW5jdGlvbihleGVjKXsKICAgICAgICB2YXIgc2NyaXB0cyA9ICcnOwogICAgICAgIHZhciB0ZXh0ID0gdGhpcy5yZXBsYWNlKC88c2NyaXB0W14+XSo+KFtcc1xTXSo/KTxcL3NjcmlwdD4vZ2ksIGZ1bmN0aW9uKGFsbCwgY29kZSl7CiAgICAgICAgICAgICAgICBzY3JpcHRzICs9IGNvZGUgKyAnXG4nOwogICAgICAgICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0pOwogICAgICAgIGlmIChleGVjID09PSB0cnVlKSBCcm93c2VyLmV4ZWMoc2NyaXB0cyk7CiAgICAgICAgZWxzZSBpZiAodHlwZU9mKGV4ZWMpID09ICdmdW5jdGlvbicpIGV4ZWMoc2NyaXB0cywgdGV4dCk7CiAgICAgICAgcmV0dXJuIHRleHQ7Cn0pOwoKLy8gV2luZG93LCBEb2N1bWVudAoKQnJvd3Nlci5leHRlbmQoewogICAgICAgIERvY3VtZW50OiB0aGlzLkRvY3VtZW50LAogICAgICAgIFdpbmRvdzogdGhpcy5XaW5kb3csCiAgICAgICAgRWxlbWVudDogdGhpcy5FbGVtZW50LAogICAgICAgIEV2ZW50OiB0aGlzLkV2ZW50Cn0pOwoKdGhpcy5XaW5kb3cgPSB0aGlzLiRjb25zdHJ1Y3RvciA9IG5ldyBUeXBlKCdXaW5kb3cnLCBmdW5jdGlvbigpe30pOwoKdGhpcy4kZmFtaWx5ID0gRnVuY3Rpb24uZnJvbSgnd2luZG93JykuaGlkZSgpOwoKV2luZG93Lm1pcnJvcihmdW5jdGlvbihuYW1lLCBtZXRob2QpewogICAgICAgIHdpbmRvd1tuYW1lXSA9IG1ldGhvZDsKfSk7Cgp0aGlzLkRvY3VtZW50ID0gZG9jdW1lbnQuJGNvbnN0cnVjdG9yID0gbmV3IFR5cGUoJ0RvY3VtZW50JywgZnVuY3Rpb24oKXt9KTsKCmRvY3VtZW50LiRmYW1pbHkgPSBGdW5jdGlvbi5mcm9tKCdkb2N1bWVudCcpLmhpZGUoKTsKCkRvY3VtZW50Lm1pcnJvcihmdW5jdGlvbihuYW1lLCBtZXRob2QpewogICAgICAgIGRvY3VtZW50W25hbWVdID0gbWV0aG9kOwp9KTsKCmRvY3VtZW50Lmh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CmlmICghZG9jdW1lbnQuaGVhZCkgZG9jdW1lbnQuaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07CgppZiAoZG9jdW1lbnQuZXhlY0NvbW1hbmQpIHRyeSB7CiAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoIkJhY2tncm91bmRJbWFnZUNhY2hlIiwgZmFsc2UsIHRydWUpOwp9IGNhdGNoIChlKXt9CgovKjxsdElFOT4qLwppZiAodGhpcy5hdHRhY2hFdmVudCAmJiAhdGhpcy5hZGRFdmVudExpc3RlbmVyKXsKICAgICAgICB2YXIgdW5sb2FkRXZlbnQgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy5kZXRhY2hFdmVudCgnb251bmxvYWQnLCB1bmxvYWRFdmVudCk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkID0gZG9jdW1lbnQuaHRtbCA9IGRvY3VtZW50LndpbmRvdyA9IG51bGw7CiAgICAgICAgfTsKICAgICAgICB0aGlzLmF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIHVubG9hZEV2ZW50KTsKfQoKLy8gSUUgZmFpbHMgb24gY29sbGVjdGlvbnMgYW5kIDxzZWxlY3Q+Lm9wdGlvbnMgKHJlZmVycyB0byA8c2VsZWN0PikKdmFyIGFycmF5RnJvbSA9IEFycmF5LmZyb207CnRyeSB7CiAgICAgICAgYXJyYXlGcm9tKGRvY3VtZW50Lmh0bWwuY2hpbGROb2Rlcyk7Cn0gY2F0Y2goZSl7CiAgICAgICAgQXJyYXkuZnJvbSA9IGZ1bmN0aW9uKGl0ZW0pewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtICE9ICdzdHJpbmcnICYmIFR5cGUuaXNFbnVtZXJhYmxlKGl0ZW0pICYmIHR5cGVPZihpdGVtKSAhPSAnYXJyYXknKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBpdGVtLmxlbmd0aCwgYXJyYXkgPSBuZXcgQXJyYXkoaSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIGFycmF5W2ldID0gaXRlbVtpXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5RnJvbShpdGVtKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgcHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlLAogICAgICAgICAgICAgICAgc2xpY2UgPSBwcm90b3R5cGUuc2xpY2U7CiAgICAgICAgWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnLCAnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXS5lYWNoKGZ1bmN0aW9uKG5hbWUpewogICAgICAgICAgICAgICAgdmFyIG1ldGhvZCA9IHByb3RvdHlwZVtuYW1lXTsKICAgICAgICAgICAgICAgIEFycmF5W25hbWVdID0gZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkoQXJyYXkuZnJvbShpdGVtKSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgfSk7Cn0KLyo8L2x0SUU5PiovCgoKCn0pKCk7CgoKLyoKLS0tCgpuYW1lOiBFdmVudAoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBFdmVudCBUeXBlLCB0byBtYWtlIHRoZSBldmVudCBvYmplY3QgY3Jvc3MtYnJvd3Nlci4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtXaW5kb3csIERvY3VtZW50LCBBcnJheSwgRnVuY3Rpb24sIFN0cmluZywgT2JqZWN0XQoKcHJvdmlkZXM6IEV2ZW50CgouLi4KKi8KCihmdW5jdGlvbigpIHsKCnZhciBfa2V5cyA9IHt9OwoKdmFyIERPTUV2ZW50ID0gdGhpcy5ET01FdmVudCA9IG5ldyBUeXBlKCdET01FdmVudCcsIGZ1bmN0aW9uKGV2ZW50LCB3aW4pewogICAgICAgIGlmICghd2luKSB3aW4gPSB3aW5kb3c7CiAgICAgICAgZXZlbnQgPSBldmVudCB8fCB3aW4uZXZlbnQ7CiAgICAgICAgaWYgKGV2ZW50LiRleHRlbmRlZCkgcmV0dXJuIGV2ZW50OwogICAgICAgIHRoaXMuZXZlbnQgPSBldmVudDsKICAgICAgICB0aGlzLiRleHRlbmRlZCA9IHRydWU7CiAgICAgICAgdGhpcy5zaGlmdCA9IGV2ZW50LnNoaWZ0S2V5OwogICAgICAgIHRoaXMuY29udHJvbCA9IGV2ZW50LmN0cmxLZXk7CiAgICAgICAgdGhpcy5hbHQgPSBldmVudC5hbHRLZXk7CiAgICAgICAgdGhpcy5tZXRhID0gZXZlbnQubWV0YUtleTsKICAgICAgICB2YXIgdHlwZSA9IHRoaXMudHlwZSA9IGV2ZW50LnR5cGU7CiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50OwogICAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0Lm5vZGVUeXBlID09IDMpIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlOwogICAgICAgIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQuaWQodGFyZ2V0KTsKCiAgICAgICAgaWYgKHR5cGUuaW5kZXhPZigna2V5JykgPT0gMCl7CiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHRoaXMuY29kZSA9IChldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlKTsKICAgICAgICAgICAgICAgIHRoaXMua2V5ID0gX2tleXNbY29kZV07CiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAna2V5ZG93bicpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA+IDExMSAmJiBjb2RlIDwgMTI0KSB0aGlzLmtleSA9ICdmJyArIChjb2RlIC0gMTExKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY29kZSA+IDk1ICYmIGNvZGUgPCAxMDYpIHRoaXMua2V5ID0gY29kZSAtIDk2OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHRoaXMua2V5ID09IG51bGwpIHRoaXMua2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKS50b0xvd2VyQ2FzZSgpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnY2xpY2snIHx8IHR5cGUgPT0gJ2RibGNsaWNrJyB8fCB0eXBlID09ICdjb250ZXh0bWVudScgfHwgdHlwZSA9PSAnRE9NTW91c2VTY3JvbGwnIHx8IHR5cGUuaW5kZXhPZignbW91c2UnKSA9PSAwKXsKICAgICAgICAgICAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7CiAgICAgICAgICAgICAgICBkb2MgPSAoIWRvYy5jb21wYXRNb2RlIHx8IGRvYy5jb21wYXRNb2RlID09ICdDU1MxQ29tcGF0JykgPyBkb2MuaHRtbCA6IGRvYy5ib2R5OwogICAgICAgICAgICAgICAgdGhpcy5wYWdlID0gewogICAgICAgICAgICAgICAgICAgICAgICB4OiAoZXZlbnQucGFnZVggIT0gbnVsbCkgPyBldmVudC5wYWdlWCA6IGV2ZW50LmNsaWVudFggKyBkb2Muc2Nyb2xsTGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgeTogKGV2ZW50LnBhZ2VZICE9IG51bGwpID8gZXZlbnQucGFnZVkgOiBldmVudC5jbGllbnRZICsgZG9jLnNjcm9sbFRvcAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50ID0gewogICAgICAgICAgICAgICAgICAgICAgICB4OiAoZXZlbnQucGFnZVggIT0gbnVsbCkgPyBldmVudC5wYWdlWCAtIHdpbi5wYWdlWE9mZnNldCA6IGV2ZW50LmNsaWVudFgsCiAgICAgICAgICAgICAgICAgICAgICAgIHk6IChldmVudC5wYWdlWSAhPSBudWxsKSA/IGV2ZW50LnBhZ2VZIC0gd2luLnBhZ2VZT2Zmc2V0IDogZXZlbnQuY2xpZW50WQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdET01Nb3VzZVNjcm9sbCcgfHwgdHlwZSA9PSAnbW91c2V3aGVlbCcpCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hlZWwgPSAoZXZlbnQud2hlZWxEZWx0YSkgPyBldmVudC53aGVlbERlbHRhIC8gMTIwIDogLShldmVudC5kZXRhaWwgfHwgMCkgLyAzOwoKICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDbGljayA9IChldmVudC53aGljaCA9PSAzIHx8IGV2ZW50LmJ1dHRvbiA9PSAyKTsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdtb3VzZW92ZXInIHx8IHR5cGUgPT0gJ21vdXNlb3V0Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCB8fCBldmVudFsodHlwZSA9PSAnbW91c2VvdmVyJyA/ICdmcm9tJyA6ICd0bycpICsgJ0VsZW1lbnQnXTsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJlbGF0ZWQgJiYgcmVsYXRlZC5ub2RlVHlwZSA9PSAzKSByZWxhdGVkID0gcmVsYXRlZC5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0ZWRUYXJnZXQgPSBkb2N1bWVudC5pZChyZWxhdGVkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZigndG91Y2gnKSA9PSAwIHx8IHR5cGUuaW5kZXhPZignZ2VzdHVyZScpID09IDApewogICAgICAgICAgICAgICAgdGhpcy5yb3RhdGlvbiA9IGV2ZW50LnJvdGF0aW9uOwogICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IGV2ZW50LnNjYWxlOwogICAgICAgICAgICAgICAgdGhpcy50YXJnZXRUb3VjaGVzID0gZXZlbnQudGFyZ2V0VG91Y2hlczsKICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlZFRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlczsKICAgICAgICAgICAgICAgIHZhciB0b3VjaGVzID0gdGhpcy50b3VjaGVzID0gZXZlbnQudG91Y2hlczsKICAgICAgICAgICAgICAgIGlmICh0b3VjaGVzICYmIHRvdWNoZXNbMF0pewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2ggPSB0b3VjaGVzWzBdOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2UgPSB7eDogdG91Y2gucGFnZVgsIHk6IHRvdWNoLnBhZ2VZfTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnQgPSB7eDogdG91Y2guY2xpZW50WCwgeTogdG91Y2guY2xpZW50WX07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoIXRoaXMuY2xpZW50KSB0aGlzLmNsaWVudCA9IHt9OwogICAgICAgIGlmICghdGhpcy5wYWdlKSB0aGlzLnBhZ2UgPSB7fTsKfSk7CgpET01FdmVudC5pbXBsZW1lbnQoewoKICAgICAgICBzdG9wOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldmVudERlZmF1bHQoKS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICB9LAoKICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5ldmVudC5zdG9wUHJvcGFnYXRpb24pIHRoaXMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICBlbHNlIHRoaXMuZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQpIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5ldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQoKfSk7CgpET01FdmVudC5kZWZpbmVLZXkgPSBmdW5jdGlvbihjb2RlLCBrZXkpewogICAgICAgIF9rZXlzW2NvZGVdID0ga2V5OwogICAgICAgIHJldHVybiB0aGlzOwp9OwoKRE9NRXZlbnQuZGVmaW5lS2V5cyA9IERPTUV2ZW50LmRlZmluZUtleS5vdmVybG9hZFNldHRlcih0cnVlKTsKCkRPTUV2ZW50LmRlZmluZUtleXMoewogICAgICAgICczOCc6ICd1cCcsICc0MCc6ICdkb3duJywgJzM3JzogJ2xlZnQnLCAnMzknOiAncmlnaHQnLAogICAgICAgICcyNyc6ICdlc2MnLCAnMzInOiAnc3BhY2UnLCAnOCc6ICdiYWNrc3BhY2UnLCAnOSc6ICd0YWInLAogICAgICAgICc0Nic6ICdkZWxldGUnLCAnMTMnOiAnZW50ZXInCn0pOwoKfSkoKTsKCgoKCgoKLyoKLS0tCgpuYW1lOiBDbGFzcwoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBDbGFzcyBGdW5jdGlvbiBmb3IgZWFzaWx5IGNyZWF0aW5nLCBleHRlbmRpbmcsIGFuZCBpbXBsZW1lbnRpbmcgcmV1c2FibGUgQ2xhc3Nlcy4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtBcnJheSwgU3RyaW5nLCBGdW5jdGlvbiwgTnVtYmVyXQoKcHJvdmlkZXM6IENsYXNzCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIENsYXNzID0gdGhpcy5DbGFzcyA9IG5ldyBUeXBlKCdDbGFzcycsIGZ1bmN0aW9uKHBhcmFtcyl7CiAgICAgICAgaWYgKGluc3RhbmNlT2YocGFyYW1zLCBGdW5jdGlvbikpIHBhcmFtcyA9IHtpbml0aWFsaXplOiBwYXJhbXN9OwoKICAgICAgICB2YXIgbmV3Q2xhc3MgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmVzZXQodGhpcyk7CiAgICAgICAgICAgICAgICBpZiAobmV3Q2xhc3MuJHByb3RvdHlwaW5nKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHRoaXMuJGNhbGxlciA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAodGhpcy5pbml0aWFsaXplKSA/IHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdGhpczsKICAgICAgICAgICAgICAgIHRoaXMuJGNhbGxlciA9IHRoaXMuY2FsbGVyID0gbnVsbDsKICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9LmV4dGVuZCh0aGlzKS5pbXBsZW1lbnQocGFyYW1zKTsKCiAgICAgICAgbmV3Q2xhc3MuJGNvbnN0cnVjdG9yID0gQ2xhc3M7CiAgICAgICAgbmV3Q2xhc3MucHJvdG90eXBlLiRjb25zdHJ1Y3RvciA9IG5ld0NsYXNzOwogICAgICAgIG5ld0NsYXNzLnByb3RvdHlwZS5wYXJlbnQgPSBwYXJlbnQ7CgogICAgICAgIHJldHVybiBuZXdDbGFzczsKfSk7Cgp2YXIgcGFyZW50ID0gZnVuY3Rpb24oKXsKICAgICAgICBpZiAoIXRoaXMuJGNhbGxlcikgdGhyb3cgbmV3IEVycm9yKCdUaGUgbWV0aG9kICJwYXJlbnQiIGNhbm5vdCBiZSBjYWxsZWQuJyk7CiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLiRjYWxsZXIuJG5hbWUsCiAgICAgICAgICAgICAgICBwYXJlbnQgPSB0aGlzLiRjYWxsZXIuJG93bmVyLnBhcmVudCwKICAgICAgICAgICAgICAgIHByZXZpb3VzID0gKHBhcmVudCkgPyBwYXJlbnQucHJvdG90eXBlW25hbWVdIDogbnVsbDsKICAgICAgICBpZiAoIXByZXZpb3VzKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBtZXRob2QgIicgKyBuYW1lICsgJyIgaGFzIG5vIHBhcmVudC4nKTsKICAgICAgICByZXR1cm4gcHJldmlvdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfTsKCnZhciByZXNldCA9IGZ1bmN0aW9uKG9iamVjdCl7CiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCl7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTsKICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZU9mKHZhbHVlKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIEYgPSBmdW5jdGlvbigpe307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRi5wcm90b3R5cGUgPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Rba2V5XSA9IHJlc2V0KG5ldyBGKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FycmF5Jzogb2JqZWN0W2tleV0gPSB2YWx1ZS5jbG9uZSgpOyBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG9iamVjdDsKfTsKCnZhciB3cmFwID0gZnVuY3Rpb24oc2VsZiwga2V5LCBtZXRob2QpewogICAgICAgIGlmIChtZXRob2QuJG9yaWdpbikgbWV0aG9kID0gbWV0aG9kLiRvcmlnaW47CiAgICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYgKG1ldGhvZC4kcHJvdGVjdGVkICYmIHRoaXMuJGNhbGxlciA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBtZXRob2QgIicgKyBrZXkgKyAnIiBjYW5ub3QgYmUgY2FsbGVkLicpOwogICAgICAgICAgICAgICAgdmFyIGNhbGxlciA9IHRoaXMuY2FsbGVyLCBjdXJyZW50ID0gdGhpcy4kY2FsbGVyOwogICAgICAgICAgICAgICAgdGhpcy5jYWxsZXIgPSBjdXJyZW50OyB0aGlzLiRjYWxsZXIgPSB3cmFwcGVyOwogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgdGhpcy4kY2FsbGVyID0gY3VycmVudDsgdGhpcy5jYWxsZXIgPSBjYWxsZXI7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0uZXh0ZW5kKHskb3duZXI6IHNlbGYsICRvcmlnaW46IG1ldGhvZCwgJG5hbWU6IGtleX0pOwogICAgICAgIHJldHVybiB3cmFwcGVyOwp9OwoKdmFyIGltcGxlbWVudCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHJldGFpbil7CiAgICAgICAgaWYgKENsYXNzLk11dGF0b3JzLmhhc093blByb3BlcnR5KGtleSkpewogICAgICAgICAgICAgICAgdmFsdWUgPSBDbGFzcy5NdXRhdG9yc1trZXldLmNhbGwodGhpcywgdmFsdWUpOwogICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzOwogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGVPZih2YWx1ZSkgPT0gJ2Z1bmN0aW9uJyl7CiAgICAgICAgICAgICAgICBpZiAodmFsdWUuJGhpZGRlbikgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB0aGlzLnByb3RvdHlwZVtrZXldID0gKHJldGFpbikgPyB2YWx1ZSA6IHdyYXAodGhpcywga2V5LCB2YWx1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIE9iamVjdC5tZXJnZSh0aGlzLnByb3RvdHlwZSwga2V5LCB2YWx1ZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKfTsKCnZhciBnZXRJbnN0YW5jZSA9IGZ1bmN0aW9uKGtsYXNzKXsKICAgICAgICBrbGFzcy4kcHJvdG90eXBpbmcgPSB0cnVlOwogICAgICAgIHZhciBwcm90byA9IG5ldyBrbGFzczsKICAgICAgICBkZWxldGUga2xhc3MuJHByb3RvdHlwaW5nOwogICAgICAgIHJldHVybiBwcm90bzsKfTsKCkNsYXNzLmltcGxlbWVudCgnaW1wbGVtZW50JywgaW1wbGVtZW50Lm92ZXJsb2FkU2V0dGVyKCkpOwoKQ2xhc3MuTXV0YXRvcnMgPSB7CgogICAgICAgIEV4dGVuZHM6IGZ1bmN0aW9uKHBhcmVudCl7CiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDsKICAgICAgICAgICAgICAgIHRoaXMucHJvdG90eXBlID0gZ2V0SW5zdGFuY2UocGFyZW50KTsKICAgICAgICB9LAoKICAgICAgICBJbXBsZW1lbnRzOiBmdW5jdGlvbihpdGVtcyl7CiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGl0ZW1zKS5lYWNoKGZ1bmN0aW9uKGl0ZW0pewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgaXRlbTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGluc3RhbmNlKSBpbXBsZW1lbnQuY2FsbCh0aGlzLCBrZXksIGluc3RhbmNlW2tleV0sIHRydWUpOwogICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgfQp9OwoKfSkoKTsKCgovKgotLS0KCm5hbWU6IENsYXNzLkV4dHJhcwoKZGVzY3JpcHRpb246IENvbnRhaW5zIFV0aWxpdHkgQ2xhc3NlcyB0aGF0IGNhbiBiZSBpbXBsZW1lbnRlZCBpbnRvIHlvdXIgb3duIENsYXNzZXMgdG8gZWFzZSB0aGUgZXhlY3V0aW9uIG9mIG1hbnkgY29tbW9uIHRhc2tzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogQ2xhc3MKCnByb3ZpZGVzOiBbQ2xhc3MuRXh0cmFzLCBDaGFpbiwgRXZlbnRzLCBPcHRpb25zXQoKLi4uCiovCgooZnVuY3Rpb24oKXsKCnRoaXMuQ2hhaW4gPSBuZXcgQ2xhc3MoewoKICAgICAgICAkY2hhaW46IFtdLAoKICAgICAgICBjaGFpbjogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMuJGNoYWluLmFwcGVuZChBcnJheS5mbGF0dGVuKGFyZ3VtZW50cykpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgY2FsbENoYWluOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLiRjaGFpbi5sZW5ndGgpID8gdGhpcy4kY2hhaW4uc2hpZnQoKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogZmFsc2U7CiAgICAgICAgfSwKCiAgICAgICAgY2xlYXJDaGFpbjogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMuJGNoYWluLmVtcHR5KCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCnZhciByZW1vdmVPbiA9IGZ1bmN0aW9uKHN0cmluZyl7CiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9eb24oW0EtWl0pLywgZnVuY3Rpb24oZnVsbCwgZmlyc3QpewogICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0LnRvTG93ZXJDYXNlKCk7CiAgICAgICAgfSk7Cn07Cgp0aGlzLkV2ZW50cyA9IG5ldyBDbGFzcyh7CgogICAgICAgICRldmVudHM6IHt9LAoKICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24odHlwZSwgZm4sIGludGVybmFsKXsKICAgICAgICAgICAgICAgIHR5cGUgPSByZW1vdmVPbih0eXBlKTsKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICB0aGlzLiRldmVudHNbdHlwZV0gPSAodGhpcy4kZXZlbnRzW3R5cGVdIHx8IFtdKS5pbmNsdWRlKGZuKTsKICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbCkgZm4uaW50ZXJuYWwgPSB0cnVlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgYWRkRXZlbnRzOiBmdW5jdGlvbihldmVudHMpewogICAgICAgICAgICAgICAgZm9yICh2YXIgdHlwZSBpbiBldmVudHMpIHRoaXMuYWRkRXZlbnQodHlwZSwgZXZlbnRzW3R5cGVdKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGZpcmVFdmVudDogZnVuY3Rpb24odHlwZSwgYXJncywgZGVsYXkpewogICAgICAgICAgICAgICAgdHlwZSA9IHJlbW92ZU9uKHR5cGUpOwogICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuJGV2ZW50c1t0eXBlXTsKICAgICAgICAgICAgICAgIGlmICghZXZlbnRzKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3MpOwogICAgICAgICAgICAgICAgZXZlbnRzLmVhY2goZnVuY3Rpb24oZm4pewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsYXkpIGZuLmRlbGF5KGRlbGF5LCB0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBmbi5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIGZuKXsKICAgICAgICAgICAgICAgIHR5cGUgPSByZW1vdmVPbih0eXBlKTsKICAgICAgICAgICAgICAgIHZhciBldmVudHMgPSB0aGlzLiRldmVudHNbdHlwZV07CiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzICYmICFmbi5pbnRlcm5hbCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICBldmVudHMuaW5kZXhPZihmbik7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPSAtMSkgZGVsZXRlIGV2ZW50c1tpbmRleF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICByZW1vdmVFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cyl7CiAgICAgICAgICAgICAgICB2YXIgdHlwZTsKICAgICAgICAgICAgICAgIGlmICh0eXBlT2YoZXZlbnRzKSA9PSAnb2JqZWN0Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodHlwZSBpbiBldmVudHMpIHRoaXMucmVtb3ZlRXZlbnQodHlwZSwgZXZlbnRzW3R5cGVdKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzKSBldmVudHMgPSByZW1vdmVPbihldmVudHMpOwogICAgICAgICAgICAgICAgZm9yICh0eXBlIGluIHRoaXMuJGV2ZW50cyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudHMgJiYgZXZlbnRzICE9IHR5cGUpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm5zID0gdGhpcy4kZXZlbnRzW3R5cGVdOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gZm5zLmxlbmd0aDsgaS0tOykgaWYgKGkgaW4gZm5zKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50KHR5cGUsIGZuc1tpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKdGhpcy5PcHRpb25zID0gbmV3IENsYXNzKHsKCiAgICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zID0gT2JqZWN0Lm1lcmdlLmFwcGx5KG51bGwsIFt7fSwgdGhpcy5vcHRpb25zXS5hcHBlbmQoYXJndW1lbnRzKSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5hZGRFdmVudCkgZm9yICh2YXIgb3B0aW9uIGluIG9wdGlvbnMpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZU9mKG9wdGlvbnNbb3B0aW9uXSkgIT0gJ2Z1bmN0aW9uJyB8fCAhKC9eb25bQS1aXS8pLnRlc3Qob3B0aW9uKSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRXZlbnQob3B0aW9uLCBvcHRpb25zW29wdGlvbl0pOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9uc1tvcHRpb25dOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQoKfSk7Cgp9KSgpOwoKCi8qCi0tLQpuYW1lOiBTbGljay5QYXJzZXIKZGVzY3JpcHRpb246IFN0YW5kYWxvbmUgQ1NTMyBTZWxlY3RvciBwYXJzZXIKcHJvdmlkZXM6IFNsaWNrLlBhcnNlcgouLi4KKi8KCjsoZnVuY3Rpb24oKXsKCnZhciBwYXJzZWQsCiAgICAgICAgc2VwYXJhdG9ySW5kZXgsCiAgICAgICAgY29tYmluYXRvckluZGV4LAogICAgICAgIHJldmVyc2VkLAogICAgICAgIGNhY2hlID0ge30sCiAgICAgICAgcmV2ZXJzZUNhY2hlID0ge30sCiAgICAgICAgcmVVbmVzY2FwZSA9IC9cXC9nOwoKdmFyIHBhcnNlID0gZnVuY3Rpb24oZXhwcmVzc2lvbiwgaXNSZXZlcnNlZCl7CiAgICAgICAgaWYgKGV4cHJlc3Npb24gPT0gbnVsbCkgcmV0dXJuIG51bGw7CiAgICAgICAgaWYgKGV4cHJlc3Npb24uU2xpY2sgPT09IHRydWUpIHJldHVybiBleHByZXNzaW9uOwogICAgICAgIGV4cHJlc3Npb24gPSAoJycgKyBleHByZXNzaW9uKS5yZXBsYWNlKC9eXHMrfFxzKyQvZywgJycpOwogICAgICAgIHJldmVyc2VkID0gISFpc1JldmVyc2VkOwogICAgICAgIHZhciBjdXJyZW50Q2FjaGUgPSAocmV2ZXJzZWQpID8gcmV2ZXJzZUNhY2hlIDogY2FjaGU7CiAgICAgICAgaWYgKGN1cnJlbnRDYWNoZVtleHByZXNzaW9uXSkgcmV0dXJuIGN1cnJlbnRDYWNoZVtleHByZXNzaW9uXTsKICAgICAgICBwYXJzZWQgPSB7CiAgICAgICAgICAgICAgICBTbGljazogdHJ1ZSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zOiBbXSwKICAgICAgICAgICAgICAgIHJhdzogZXhwcmVzc2lvbiwKICAgICAgICAgICAgICAgIHJldmVyc2U6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZSh0aGlzLnJhdywgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBzZXBhcmF0b3JJbmRleCA9IC0xOwogICAgICAgIHdoaWxlIChleHByZXNzaW9uICE9IChleHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKHJlZ2V4cCwgcGFyc2VyKSkpOwogICAgICAgIHBhcnNlZC5sZW5ndGggPSBwYXJzZWQuZXhwcmVzc2lvbnMubGVuZ3RoOwogICAgICAgIHJldHVybiBjdXJyZW50Q2FjaGVbcGFyc2VkLnJhd10gPSAocmV2ZXJzZWQpID8gcmV2ZXJzZShwYXJzZWQpIDogcGFyc2VkOwp9OwoKdmFyIHJldmVyc2VDb21iaW5hdG9yID0gZnVuY3Rpb24oY29tYmluYXRvcil7CiAgICAgICAgaWYgKGNvbWJpbmF0b3IgPT09ICchJykgcmV0dXJuICcgJzsKICAgICAgICBlbHNlIGlmIChjb21iaW5hdG9yID09PSAnICcpIHJldHVybiAnISc7CiAgICAgICAgZWxzZSBpZiAoKC9eIS8pLnRlc3QoY29tYmluYXRvcikpIHJldHVybiBjb21iaW5hdG9yLnJlcGxhY2UoL14hLywgJycpOwogICAgICAgIGVsc2UgcmV0dXJuICchJyArIGNvbWJpbmF0b3I7Cn07Cgp2YXIgcmV2ZXJzZSA9IGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgIHZhciBleHByZXNzaW9ucyA9IGV4cHJlc3Npb24uZXhwcmVzc2lvbnM7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByZXNzaW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIgZXhwID0gZXhwcmVzc2lvbnNbaV07CiAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IHtwYXJ0czogW10sIHRhZzogJyonLCBjb21iaW5hdG9yOiByZXZlcnNlQ29tYmluYXRvcihleHBbMF0uY29tYmluYXRvcil9OwoKICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZXhwLmxlbmd0aDsgaisrKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNleHAgPSBleHBbal07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2V4cC5yZXZlcnNlQ29tYmluYXRvcikgY2V4cC5yZXZlcnNlQ29tYmluYXRvciA9ICcgJzsKICAgICAgICAgICAgICAgICAgICAgICAgY2V4cC5jb21iaW5hdG9yID0gY2V4cC5yZXZlcnNlQ29tYmluYXRvcjsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNleHAucmV2ZXJzZUNvbWJpbmF0b3I7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZXhwLnJldmVyc2UoKS5wdXNoKGxhc3QpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjsKfTsKCnZhciBlc2NhcGVSZWdFeHAgPSBmdW5jdGlvbihzdHJpbmcpey8vIENyZWRpdDogWFJlZ0V4cCAwLjYuMSAoYykgMjAwNy0yMDA4IFN0ZXZlbiBMZXZpdGhhbiA8aHR0cDovL3N0ZXZlbmxldml0aGFuLmNvbS9yZWdleC94cmVnZXhwLz4gTUlUIExpY2Vuc2UKICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1stW1xde30oKSorPy5cXF4kfCwjXHNdL2csIGZ1bmN0aW9uKG1hdGNoKXsKICAgICAgICAgICAgICAgIHJldHVybiAnXFwnICsgbWF0Y2g7CiAgICAgICAgfSk7Cn07Cgp2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgKLyoKIyEvdXNyL2Jpbi9lbnYgcnVieQpwdXRzICJcdFx0IiArIERBVEEucmVhZC5nc3ViKC9cKFw/eFwpfFxzKyMuKiR8XHMrfFxcJHxcXG4vLCcnKQpfX0VORF9fCiAgICAgICAgIig/eCleKD86XAogICAgICAgICAgXFxzKiAoICwgKSBcXHMqICAgICAgICAgICAgICAgIyBTZXBhcmF0b3IgICAgICAgICAgXG5cCiAgICAgICAgfCBcXHMqICggPGNvbWJpbmF0b3I+KyApIFxccyogICAjIENvbWJpbmF0b3IgICAgICAgICBcblwKICAgICAgICB8ICAgICAgKCBcXHMrICkgICAgICAgICAgICAgICAgICMgQ29tYmluYXRvckNoaWxkcmVuIFxuXAogICAgICAgIHwgICAgICAoIDx1bmljb2RlPisgfCBcXCogKSAgICAgIyBUYWcgICAgICAgICAgICAgICAgXG5cCiAgICAgICAgfCBcXCMgICggPHVuaWNvZGU+KyAgICAgICApICAgICAjIElEICAgICAgICAgICAgICAgICBcblwKICAgICAgICB8IFxcLiAgKCA8dW5pY29kZT4rICAgICAgICkgICAgICMgQ2xhc3NOYW1lICAgICAgICAgIFxuXAogICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBBdHRyaWJ1dGUgICAgICAgICAgXG5cCiAgICAgICAgXFxbICBcCiAgICAgICAgICAgICAgICBcXHMqICg8dW5pY29kZTE+KykgICg/OiAgXAogICAgICAgICAgICAgICAgICAgICAgICBcXHMqIChbKl4kIX58XT89KSAgKD86ICBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxzKiAoPzpcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoW1wiJ10/KSguKj8pXFw5IFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXAogICAgICAgICAgICAgICAgICAgICAgICApICBcCiAgICAgICAgICAgICAgICApPyAgXFxzKiAgXAogICAgICAgIFxcXSg/IVxcXSkgXG5cCiAgICAgICAgfCAgIDorICggPHVuaWNvZGU+KyApKD86XAogICAgICAgIFxcKCAoPzpcCiAgICAgICAgICAgICAgICAoPzooW1wiJ10pKFteXFwxMl0qKVxcMTIpfCgoPzpcXChbXildK1xcKXxbXigpXSopKylcCiAgICAgICAgKSBcXClcCiAgICAgICAgKT9cCiAgICAgICAgKSIKKi8KICAgICAgICAiXig/OlxccyooLClcXHMqfFxccyooPGNvbWJpbmF0b3I+KylcXHMqfChcXHMrKXwoPHVuaWNvZGU+K3xcXCopfFxcIyg8dW5pY29kZT4rKXxcXC4oPHVuaWNvZGU+Kyl8XFxbXFxzKig8dW5pY29kZTE+KykoPzpcXHMqKFsqXiQhfnxdPz0pKD86XFxzKig/OihbXCInXT8pKC4qPylcXDkpKSk/XFxzKlxcXSg/IVxcXSl8KDorKSg8dW5pY29kZT4rKSg/OlxcKCg/Oig/OihbXCInXSkoW15cXDEzXSopXFwxMyl8KCg/OlxcKFteKV0rXFwpfFteKCldKikrKSlcXCkpPykiCiAgICAgICAgLnJlcGxhY2UoLzxjb21iaW5hdG9yPi8sICdbJyArIGVzY2FwZVJlZ0V4cCgiPit+YCFAJCVeJj17fVxcOzwvIikgKyAnXScpCiAgICAgICAgLnJlcGxhY2UoLzx1bmljb2RlPi9nLCAnKD86W1xcd1xcdTAwYTEtXFx1RkZGRi1dfFxcXFxbXlxcczAtOWEtZl0pJykKICAgICAgICAucmVwbGFjZSgvPHVuaWNvZGUxPi9nLCAnKD86WzpcXHdcXHUwMGExLVxcdUZGRkYtXXxcXFxcW15cXHMwLTlhLWZdKScpCik7CgpmdW5jdGlvbiBwYXJzZXIoCiAgICAgICAgcmF3TWF0Y2gsCgogICAgICAgIHNlcGFyYXRvciwKICAgICAgICBjb21iaW5hdG9yLAogICAgICAgIGNvbWJpbmF0b3JDaGlsZHJlbiwKCiAgICAgICAgdGFnTmFtZSwKICAgICAgICBpZCwKICAgICAgICBjbGFzc05hbWUsCgogICAgICAgIGF0dHJpYnV0ZUtleSwKICAgICAgICBhdHRyaWJ1dGVPcGVyYXRvciwKICAgICAgICBhdHRyaWJ1dGVRdW90ZSwKICAgICAgICBhdHRyaWJ1dGVWYWx1ZSwKCiAgICAgICAgcHNldWRvTWFya2VyLAogICAgICAgIHBzZXVkb0NsYXNzLAogICAgICAgIHBzZXVkb1F1b3RlLAogICAgICAgIHBzZXVkb0NsYXNzUXVvdGVkVmFsdWUsCiAgICAgICAgcHNldWRvQ2xhc3NWYWx1ZQopewogICAgICAgIGlmIChzZXBhcmF0b3IgfHwgc2VwYXJhdG9ySW5kZXggPT09IC0xKXsKICAgICAgICAgICAgICAgIHBhcnNlZC5leHByZXNzaW9uc1srK3NlcGFyYXRvckluZGV4XSA9IFtdOwogICAgICAgICAgICAgICAgY29tYmluYXRvckluZGV4ID0gLTE7CiAgICAgICAgICAgICAgICBpZiAoc2VwYXJhdG9yKSByZXR1cm4gJyc7CiAgICAgICAgfQoKICAgICAgICBpZiAoY29tYmluYXRvciB8fCBjb21iaW5hdG9yQ2hpbGRyZW4gfHwgY29tYmluYXRvckluZGV4ID09PSAtMSl7CiAgICAgICAgICAgICAgICBjb21iaW5hdG9yID0gY29tYmluYXRvciB8fCAnICc7CiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNlcGFyYXRvciA9IHBhcnNlZC5leHByZXNzaW9uc1tzZXBhcmF0b3JJbmRleF07CiAgICAgICAgICAgICAgICBpZiAocmV2ZXJzZWQgJiYgY3VycmVudFNlcGFyYXRvcltjb21iaW5hdG9ySW5kZXhdKQogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VwYXJhdG9yW2NvbWJpbmF0b3JJbmRleF0ucmV2ZXJzZUNvbWJpbmF0b3IgPSByZXZlcnNlQ29tYmluYXRvcihjb21iaW5hdG9yKTsKICAgICAgICAgICAgICAgIGN1cnJlbnRTZXBhcmF0b3JbKytjb21iaW5hdG9ySW5kZXhdID0ge2NvbWJpbmF0b3I6IGNvbWJpbmF0b3IsIHRhZzogJyonfTsKICAgICAgICB9CgogICAgICAgIHZhciBjdXJyZW50UGFyc2VkID0gcGFyc2VkLmV4cHJlc3Npb25zW3NlcGFyYXRvckluZGV4XVtjb21iaW5hdG9ySW5kZXhdOwoKICAgICAgICBpZiAodGFnTmFtZSl7CiAgICAgICAgICAgICAgICBjdXJyZW50UGFyc2VkLnRhZyA9IHRhZ05hbWUucmVwbGFjZShyZVVuZXNjYXBlLCAnJyk7CgogICAgICAgIH0gZWxzZSBpZiAoaWQpewogICAgICAgICAgICAgICAgY3VycmVudFBhcnNlZC5pZCA9IGlkLnJlcGxhY2UocmVVbmVzY2FwZSwgJycpOwoKICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSl7CiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShyZVVuZXNjYXBlLCAnJyk7CgogICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50UGFyc2VkLmNsYXNzTGlzdCkgY3VycmVudFBhcnNlZC5jbGFzc0xpc3QgPSBbXTsKICAgICAgICAgICAgICAgIGlmICghY3VycmVudFBhcnNlZC5jbGFzc2VzKSBjdXJyZW50UGFyc2VkLmNsYXNzZXMgPSBbXTsKICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJzZWQuY2xhc3NMaXN0LnB1c2goY2xhc3NOYW1lKTsKICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJzZWQuY2xhc3Nlcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNsYXNzTmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhwOiBuZXcgUmVnRXhwKCcoXnxcXHMpJyArIGVzY2FwZVJlZ0V4cChjbGFzc05hbWUpICsgJyhcXHN8JCknKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgIH0gZWxzZSBpZiAocHNldWRvQ2xhc3MpewogICAgICAgICAgICAgICAgcHNldWRvQ2xhc3NWYWx1ZSA9IHBzZXVkb0NsYXNzVmFsdWUgfHwgcHNldWRvQ2xhc3NRdW90ZWRWYWx1ZTsKICAgICAgICAgICAgICAgIHBzZXVkb0NsYXNzVmFsdWUgPSBwc2V1ZG9DbGFzc1ZhbHVlID8gcHNldWRvQ2xhc3NWYWx1ZS5yZXBsYWNlKHJlVW5lc2NhcGUsICcnKSA6IG51bGw7CgogICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50UGFyc2VkLnBzZXVkb3MpIGN1cnJlbnRQYXJzZWQucHNldWRvcyA9IFtdOwogICAgICAgICAgICAgICAgY3VycmVudFBhcnNlZC5wc2V1ZG9zLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHBzZXVkb0NsYXNzLnJlcGxhY2UocmVVbmVzY2FwZSwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcHNldWRvQ2xhc3NWYWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcHNldWRvTWFya2VyLmxlbmd0aCA9PSAxID8gJ2NsYXNzJyA6ICdlbGVtZW50JwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgIH0gZWxzZSBpZiAoYXR0cmlidXRlS2V5KXsKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUtleSA9IGF0dHJpYnV0ZUtleS5yZXBsYWNlKHJlVW5lc2NhcGUsICcnKTsKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlID0gKGF0dHJpYnV0ZVZhbHVlIHx8ICcnKS5yZXBsYWNlKHJlVW5lc2NhcGUsICcnKTsKCiAgICAgICAgICAgICAgICB2YXIgdGVzdCwgcmVnZXhwOwoKICAgICAgICAgICAgICAgIHN3aXRjaCAoYXR0cmlidXRlT3BlcmF0b3IpewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdePScgOiByZWdleHAgPSBuZXcgUmVnRXhwKCAgICAgICAnXicrIGVzY2FwZVJlZ0V4cChhdHRyaWJ1dGVWYWx1ZSkgICAgICAgICAgICApOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJD0nIDogcmVnZXhwID0gbmV3IFJlZ0V4cCggICAgICAgICAgICBlc2NhcGVSZWdFeHAoYXR0cmlidXRlVmFsdWUpICsnJCcgICAgICAgKTsgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ349JyA6IHJlZ2V4cCA9IG5ldyBSZWdFeHAoICcoXnxcXHMpJysgZXNjYXBlUmVnRXhwKGF0dHJpYnV0ZVZhbHVlKSArJyhcXHN8JCknICk7IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd8PScgOiByZWdleHAgPSBuZXcgUmVnRXhwKCAgICAgICAnXicrIGVzY2FwZVJlZ0V4cChhdHRyaWJ1dGVWYWx1ZSkgKycoLXwkKScgICApOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAgJz0nIDogdGVzdCA9IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlVmFsdWUgPT0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH07IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcqPScgOiB0ZXN0ID0gZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5pbmRleE9mKGF0dHJpYnV0ZVZhbHVlKSA+IC0xOwogICAgICAgICAgICAgICAgICAgICAgICB9OyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnIT0nIDogdGVzdCA9IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlVmFsdWUgIT0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH07IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0ICAgOiB0ZXN0ID0gZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhIXZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVWYWx1ZSA9PSAnJyAmJiAoL15bKiReXT0kLykudGVzdChhdHRyaWJ1dGVPcGVyYXRvcikpIHRlc3QgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGlmICghdGVzdCkgdGVzdCA9IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICYmIHJlZ2V4cC50ZXN0KHZhbHVlKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50UGFyc2VkLmF0dHJpYnV0ZXMpIGN1cnJlbnRQYXJzZWQuYXR0cmlidXRlcyA9IFtdOwogICAgICAgICAgICAgICAgY3VycmVudFBhcnNlZC5hdHRyaWJ1dGVzLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGF0dHJpYnV0ZUtleSwKICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6IGF0dHJpYnV0ZU9wZXJhdG9yLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXR0cmlidXRlVmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3Q6IHRlc3QKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICB9CgogICAgICAgIHJldHVybiAnJzsKfTsKCi8vIFNsaWNrIE5TCgp2YXIgU2xpY2sgPSAodGhpcy5TbGljayB8fCB7fSk7CgpTbGljay5wYXJzZSA9IGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgIHJldHVybiBwYXJzZShleHByZXNzaW9uKTsKfTsKClNsaWNrLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDsKCmlmICghdGhpcy5TbGljaykgdGhpcy5TbGljayA9IFNsaWNrOwoKfSkuYXBwbHkoLyo8Q29tbW9uSlM+Ki8odHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcpID8gZXhwb3J0cyA6IC8qPC9Db21tb25KUz4qL3RoaXMpOwoKCi8qCi0tLQpuYW1lOiBTbGljay5GaW5kZXIKZGVzY3JpcHRpb246IFRoZSBuZXcsIHN1cGVyZmFzdCBjc3Mgc2VsZWN0b3IgZW5naW5lLgpwcm92aWRlczogU2xpY2suRmluZGVyCnJlcXVpcmVzOiBTbGljay5QYXJzZXIKLi4uCiovCgo7KGZ1bmN0aW9uKCl7Cgp2YXIgbG9jYWwgPSB7fSwKICAgICAgICBmZWF0dXJlc0NhY2hlID0ge30sCiAgICAgICAgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOwoKLy8gRmVhdHVyZSAvIEJ1ZyBkZXRlY3Rpb24KCmxvY2FsLmlzTmF0aXZlQ29kZSA9IGZ1bmN0aW9uKGZuKXsKICAgICAgICByZXR1cm4gKC9ce1xzKlxbbmF0aXZlIGNvZGVcXVxzKlx9LykudGVzdCgnJyArIGZuKTsKfTsKCmxvY2FsLmlzWE1MID0gZnVuY3Rpb24oZG9jdW1lbnQpewogICAgICAgIHJldHVybiAoISFkb2N1bWVudC54bWxWZXJzaW9uKSB8fCAoISFkb2N1bWVudC54bWwpIHx8ICh0b1N0cmluZy5jYWxsKGRvY3VtZW50KSA9PSAnW29iamVjdCBYTUxEb2N1bWVudF0nKSB8fAogICAgICAgIChkb2N1bWVudC5ub2RlVHlwZSA9PSA5ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPSAnSFRNTCcpOwp9OwoKbG9jYWwuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbihkb2N1bWVudCl7CgogICAgICAgIC8vIGNvbnZlcnQgZWxlbWVudHMgLyB3aW5kb3cgYXJndW1lbnRzIHRvIGRvY3VtZW50LiBpZiBkb2N1bWVudCBjYW5ub3QgYmUgZXh0cmFwb2xhdGVkLCB0aGUgZnVuY3Rpb24gcmV0dXJucy4KICAgICAgICB2YXIgbm9kZVR5cGUgPSBkb2N1bWVudC5ub2RlVHlwZTsKICAgICAgICBpZiAobm9kZVR5cGUgPT0gOSk7IC8vIGRvY3VtZW50CiAgICAgICAgZWxzZSBpZiAobm9kZVR5cGUpIGRvY3VtZW50ID0gZG9jdW1lbnQub3duZXJEb2N1bWVudDsgLy8gbm9kZQogICAgICAgIGVsc2UgaWYgKGRvY3VtZW50Lm5hdmlnYXRvcikgZG9jdW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudDsgLy8gd2luZG93CiAgICAgICAgZWxzZSByZXR1cm47CgogICAgICAgIC8vIGNoZWNrIGlmIGl0J3MgdGhlIG9sZCBkb2N1bWVudAoKICAgICAgICBpZiAodGhpcy5kb2N1bWVudCA9PT0gZG9jdW1lbnQpIHJldHVybjsKICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7CgogICAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgZG9uZSBmZWF0dXJlIGRldGVjdGlvbiBvbiB0aGlzIGRvY3VtZW50IGJlZm9yZQoKICAgICAgICB2YXIgcm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwKICAgICAgICAgICAgICAgIHJvb3RVaWQgPSB0aGlzLmdldFVJRFhNTChyb290KSwKICAgICAgICAgICAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXNDYWNoZVtyb290VWlkXSwKICAgICAgICAgICAgICAgIGZlYXR1cmU7CgogICAgICAgIGlmIChmZWF0dXJlcyl7CiAgICAgICAgICAgICAgICBmb3IgKGZlYXR1cmUgaW4gZmVhdHVyZXMpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2ZlYXR1cmVdID0gZmVhdHVyZXNbZmVhdHVyZV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzQ2FjaGVbcm9vdFVpZF0gPSB7fTsKCiAgICAgICAgZmVhdHVyZXMucm9vdCA9IHJvb3Q7CiAgICAgICAgZmVhdHVyZXMuaXNYTUxEb2N1bWVudCA9IHRoaXMuaXNYTUwoZG9jdW1lbnQpOwoKICAgICAgICBmZWF0dXJlcy5icm9rZW5TdGFyR0VCVE4KICAgICAgICA9IGZlYXR1cmVzLnN0YXJTZWxlY3RzQ2xvc2VkUVNBCiAgICAgICAgPSBmZWF0dXJlcy5pZEdldHNOYW1lCiAgICAgICAgPSBmZWF0dXJlcy5icm9rZW5NaXhlZENhc2VRU0EKICAgICAgICA9IGZlYXR1cmVzLmJyb2tlbkdFQkNOCiAgICAgICAgPSBmZWF0dXJlcy5icm9rZW5DaGVja2VkUVNBCiAgICAgICAgPSBmZWF0dXJlcy5icm9rZW5FbXB0eUF0dHJpYnV0ZVFTQQogICAgICAgID0gZmVhdHVyZXMuaXNIVE1MRG9jdW1lbnQKICAgICAgICA9IGZlYXR1cmVzLm5hdGl2ZU1hdGNoZXNTZWxlY3RvcgogICAgICAgID0gZmFsc2U7CgogICAgICAgIHZhciBzdGFyU2VsZWN0c0Nsb3NlZCwgc3RhclNlbGVjdHNDb21tZW50cywKICAgICAgICAgICAgICAgIGJyb2tlblNlY29uZENsYXNzTmFtZUdFQkNOLCBjYWNoZWRHZXRFbGVtZW50c0J5Q2xhc3NOYW1lLAogICAgICAgICAgICAgICAgYnJva2VuRm9ybUF0dHJpYnV0ZUdldHRlcjsKCiAgICAgICAgdmFyIHNlbGVjdGVkLCBpZCA9ICdzbGlja191bmlxdWVpZCc7CiAgICAgICAgdmFyIHRlc3ROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgogICAgICAgIHZhciB0ZXN0Um9vdCA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSB8fCByb290OwogICAgICAgIHRlc3RSb290LmFwcGVuZENoaWxkKHRlc3ROb2RlKTsKCiAgICAgICAgLy8gb24gbm9uLUhUTUwgZG9jdW1lbnRzIGlubmVySFRNTCBhbmQgZ2V0RWxlbWVudHNCeUlkIGRvZXNudCB3b3JrIHByb3Blcmx5CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHRlc3ROb2RlLmlubmVySFRNTCA9ICc8YSBpZD0iJytpZCsnIj48L2E+JzsKICAgICAgICAgICAgICAgIGZlYXR1cmVzLmlzSFRNTERvY3VtZW50ID0gISFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CiAgICAgICAgfSBjYXRjaChlKXt9OwoKICAgICAgICBpZiAoZmVhdHVyZXMuaXNIVE1MRG9jdW1lbnQpewoKICAgICAgICAgICAgICAgIHRlc3ROb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CgogICAgICAgICAgICAgICAgLy8gSUUgcmV0dXJucyBjb21tZW50IG5vZGVzIGZvciBnZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpIGZvciBzb21lIGRvY3VtZW50cwogICAgICAgICAgICAgICAgdGVzdE5vZGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnJykpOwogICAgICAgICAgICAgICAgc3RhclNlbGVjdHNDb21tZW50cyA9ICh0ZXN0Tm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpLmxlbmd0aCA+IDEpOwoKICAgICAgICAgICAgICAgIC8vIElFIHJldHVybnMgY2xvc2VkIG5vZGVzIChFRzoiPC9mb28+IikgZm9yIGdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJykgZm9yIHNvbWUgZG9jdW1lbnRzCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0Tm9kZS5pbm5lckhUTUwgPSAnZm9vPC9mb28+JzsKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSB0ZXN0Tm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpOwogICAgICAgICAgICAgICAgICAgICAgICBzdGFyU2VsZWN0c0Nsb3NlZCA9IChzZWxlY3RlZCAmJiAhIXNlbGVjdGVkLmxlbmd0aCAmJiBzZWxlY3RlZFswXS5ub2RlTmFtZS5jaGFyQXQoMCkgPT0gJy8nKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fTsKCiAgICAgICAgICAgICAgICBmZWF0dXJlcy5icm9rZW5TdGFyR0VCVE4gPSBzdGFyU2VsZWN0c0NvbW1lbnRzIHx8IHN0YXJTZWxlY3RzQ2xvc2VkOwoKICAgICAgICAgICAgICAgIC8vIElFIHJldHVybnMgZWxlbWVudHMgd2l0aCB0aGUgbmFtZSBpbnN0ZWFkIG9mIGp1c3QgaWQgZm9yIGdldEVsZW1lbnRzQnlJZCBmb3Igc29tZSBkb2N1bWVudHMKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3ROb2RlLmlubmVySFRNTCA9ICc8YSBuYW1lPSInKyBpZCArJyI+PC9hPjxiIGlkPSInKyBpZCArJyI+PC9iPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzLmlkR2V0c05hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgPT09IHRlc3ROb2RlLmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpe307CgogICAgICAgICAgICAgICAgaWYgKHRlc3ROb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpewoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpIDMuMiBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIGNhY2hlcyByZXN1bHRzCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE5vZGUuaW5uZXJIVE1MID0gJzxhIGNsYXNzPSJmIj48L2E+PGEgY2xhc3M9ImIiPjwvYT4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3ROb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2InKS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE5vZGUuZmlyc3RDaGlsZC5jbGFzc05hbWUgPSAnYic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVkR2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9ICh0ZXN0Tm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdiJykubGVuZ3RoICE9IDIpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGUpe307CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSA5LjYgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSBkb2VzbnQgZGV0ZWN0cyB0aGUgY2xhc3MgaWYgaXRzIG5vdCB0aGUgZmlyc3Qgb25lCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE5vZGUuaW5uZXJIVE1MID0gJzxhIGNsYXNzPSJhIj48L2E+PGEgY2xhc3M9ImYgYiBhIj48L2E+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicm9rZW5TZWNvbmRDbGFzc05hbWVHRUJDTiA9ICh0ZXN0Tm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhJykubGVuZ3RoICE9IDIpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGUpe307CgogICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5icm9rZW5HRUJDTiA9IGNhY2hlZEdldEVsZW1lbnRzQnlDbGFzc05hbWUgfHwgYnJva2VuU2Vjb25kQ2xhc3NOYW1lR0VCQ047CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHRlc3ROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwpewogICAgICAgICAgICAgICAgICAgICAgICAvLyBJRSA4IHJldHVybnMgY2xvc2VkIG5vZGVzIChFRzoiPC9mb28+IikgZm9yIHF1ZXJ5U2VsZWN0b3JBbGwoJyonKSBmb3Igc29tZSBkb2N1bWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0Tm9kZS5pbm5lckhUTUwgPSAnZm9vPC9mb28+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRlc3ROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5zdGFyU2VsZWN0c0Nsb3NlZFFTQSA9IChzZWxlY3RlZCAmJiAhIXNlbGVjdGVkLmxlbmd0aCAmJiBzZWxlY3RlZFswXS5ub2RlTmFtZS5jaGFyQXQoMCkgPT0gJy8nKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKXt9OwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpIDMuMiBxdWVyeVNlbGVjdG9yQWxsIGRvZXNudCB3b3JrIHdpdGggbWl4ZWRjYXNlIG9uIHF1aXJrc21vZGUKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0Tm9kZS5pbm5lckhUTUwgPSAnPGEgY2xhc3M9Ik1pWCI+PC9hPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMuYnJva2VuTWl4ZWRDYXNlUVNBID0gIXRlc3ROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5NaVgnKS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlYmtpdCBhbmQgT3BlcmEgZG9udCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9ucyBvbiBxdWVyeVNlbGVjdG9yQWxsCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE5vZGUuaW5uZXJIVE1MID0gJzxzZWxlY3Q+PG9wdGlvbiBzZWxlY3RlZD0ic2VsZWN0ZWQiPmE8L29wdGlvbj48L3NlbGVjdD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzLmJyb2tlbkNoZWNrZWRRU0EgPSAodGVzdE5vZGUucXVlcnlTZWxlY3RvckFsbCgnOmNoZWNrZWQnKS5sZW5ndGggPT0gMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElFIHJldHVybnMgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIGF0dHJbKl4kXT0iIiBzZWxlY3RvcnMgb24gcXVlcnlTZWxlY3RvckFsbAogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3ROb2RlLmlubmVySFRNTCA9ICc8YSBjbGFzcz0iIj48L2E+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5icm9rZW5FbXB0eUF0dHJpYnV0ZVFTQSA9ICh0ZXN0Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbY2xhc3MqPSIiXScpLmxlbmd0aCAhPSAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKXt9OwoKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBJRTYtNywgaWYgYSBmb3JtIGhhcyBhbiBpbnB1dCBvZiBpZCB4LCBmb3JtLmdldEF0dHJpYnV0ZSh4KSByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnB1dAogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE5vZGUuaW5uZXJIVE1MID0gJzxmb3JtIGFjdGlvbj0icyI+PGlucHV0IGlkPSJhY3Rpb24iLz48L2Zvcm0+JzsKICAgICAgICAgICAgICAgICAgICAgICAgYnJva2VuRm9ybUF0dHJpYnV0ZUdldHRlciA9ICh0ZXN0Tm9kZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgnYWN0aW9uJykgIT0gJ3MnKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fTsKCiAgICAgICAgICAgICAgICAvLyBuYXRpdmUgbWF0Y2hlc1NlbGVjdG9yIGZ1bmN0aW9uCgogICAgICAgICAgICAgICAgZmVhdHVyZXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yID0gcm9vdC5tYXRjaGVzU2VsZWN0b3IgfHwgLypyb290Lm1zTWF0Y2hlc1NlbGVjdG9yIHx8Ki8gcm9vdC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgcm9vdC53ZWJraXRNYXRjaGVzU2VsZWN0b3I7CiAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yKSB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBtYXRjaGVzU2VsZWN0b3IgdHJvd3MgZXJyb3JzIG9uIGluY29ycmVjdCBzaW50YXhlcyB3ZSBjYW4gdXNlIGl0CiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzLm5hdGl2ZU1hdGNoZXNTZWxlY3Rvci5jYWxsKHJvb3QsICc6c2xpY2snKTsKICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yID0gbnVsbDsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fTsKCiAgICAgICAgfQoKICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcm9vdC5zbGlja19leHBhbmRvID0gMTsKICAgICAgICAgICAgICAgIGRlbGV0ZSByb290LnNsaWNrX2V4cGFuZG87CiAgICAgICAgICAgICAgICBmZWF0dXJlcy5nZXRVSUQgPSB0aGlzLmdldFVJREhUTUw7CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBmZWF0dXJlcy5nZXRVSUQgPSB0aGlzLmdldFVJRFhNTDsKICAgICAgICB9CgogICAgICAgIHRlc3RSb290LnJlbW92ZUNoaWxkKHRlc3ROb2RlKTsKICAgICAgICB0ZXN0Tm9kZSA9IHNlbGVjdGVkID0gdGVzdFJvb3QgPSBudWxsOwoKICAgICAgICAvLyBnZXRBdHRyaWJ1dGUKCiAgICAgICAgZmVhdHVyZXMuZ2V0QXR0cmlidXRlID0gKGZlYXR1cmVzLmlzSFRNTERvY3VtZW50ICYmIGJyb2tlbkZvcm1BdHRyaWJ1dGVHZXR0ZXIpID8gZnVuY3Rpb24obm9kZSwgbmFtZSl7CiAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5hdHRyaWJ1dGVHZXR0ZXJzW25hbWVdOwogICAgICAgICAgICAgICAgaWYgKG1ldGhvZCkgcmV0dXJuIG1ldGhvZC5jYWxsKG5vZGUpOwogICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5vZGUgPSBub2RlLmdldEF0dHJpYnV0ZU5vZGUobmFtZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gKGF0dHJpYnV0ZU5vZGUpID8gYXR0cmlidXRlTm9kZS5ub2RlVmFsdWUgOiBudWxsOwogICAgICAgIH0gOiBmdW5jdGlvbihub2RlLCBuYW1lKXsKICAgICAgICAgICAgICAgIHZhciBtZXRob2QgPSB0aGlzLmF0dHJpYnV0ZUdldHRlcnNbbmFtZV07CiAgICAgICAgICAgICAgICByZXR1cm4gKG1ldGhvZCkgPyBtZXRob2QuY2FsbChub2RlKSA6IG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUpOwogICAgICAgIH07CgogICAgICAgIC8vIGhhc0F0dHJpYnV0ZQoKICAgICAgICBmZWF0dXJlcy5oYXNBdHRyaWJ1dGUgPSAocm9vdCAmJiB0aGlzLmlzTmF0aXZlQ29kZShyb290Lmhhc0F0dHJpYnV0ZSkpID8gZnVuY3Rpb24obm9kZSwgYXR0cmlidXRlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKTsKICAgICAgICB9IDogZnVuY3Rpb24obm9kZSwgYXR0cmlidXRlKSB7CiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5nZXRBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gISEobm9kZSAmJiAobm9kZS5zcGVjaWZpZWQgfHwgbm9kZS5ub2RlVmFsdWUpKTsKICAgICAgICB9OwoKICAgICAgICAvLyBjb250YWlucwogICAgICAgIC8vIEZJWE1FOiBBZGQgc3BlY3M6IGxvY2FsLmNvbnRhaW5zIHNob3VsZCBiZSBkaWZmZXJlbnQgZm9yIHhtbCBhbmQgaHRtbCBkb2N1bWVudHM/CiAgICAgICAgZmVhdHVyZXMuY29udGFpbnMgPSAocm9vdCAmJiB0aGlzLmlzTmF0aXZlQ29kZShyb290LmNvbnRhaW5zKSkgPyBmdW5jdGlvbihjb250ZXh0LCBub2RlKXsKICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbnRhaW5zKG5vZGUpOwogICAgICAgIH0gOiAocm9vdCAmJiByb290LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSA/IGZ1bmN0aW9uKGNvbnRleHQsIG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgPT09IG5vZGUgfHwgISEoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIDE2KTsKICAgICAgICB9IDogZnVuY3Rpb24oY29udGV4dCwgbm9kZSl7CiAgICAgICAgICAgICAgICBpZiAobm9kZSkgZG8gewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gY29udGV4dCkgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9IHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH07CgogICAgICAgIC8vIGRvY3VtZW50IG9yZGVyIHNvcnRpbmcKICAgICAgICAvLyBjcmVkaXRzIHRvIFNpenpsZSAoaHR0cDovL3NpenpsZWpzLmNvbS8pCgogICAgICAgIGZlYXR1cmVzLmRvY3VtZW50U29ydGVyID0gKHJvb3QuY29tcGFyZURvY3VtZW50UG9zaXRpb24pID8gZnVuY3Rpb24oYSwgYil7CiAgICAgICAgICAgICAgICBpZiAoIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gfHwgIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHJldHVybiAwOwogICAgICAgICAgICAgICAgcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikgJiA0ID8gLTEgOiBhID09PSBiID8gMCA6IDE7CiAgICAgICAgfSA6ICgnc291cmNlSW5kZXgnIGluIHJvb3QpID8gZnVuY3Rpb24oYSwgYil7CiAgICAgICAgICAgICAgICBpZiAoIWEuc291cmNlSW5kZXggfHwgIWIuc291cmNlSW5kZXgpIHJldHVybiAwOwogICAgICAgICAgICAgICAgcmV0dXJuIGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4OwogICAgICAgIH0gOiAoZG9jdW1lbnQuY3JlYXRlUmFuZ2UpID8gZnVuY3Rpb24oYSwgYil7CiAgICAgICAgICAgICAgICBpZiAoIWEub3duZXJEb2N1bWVudCB8fCAhYi5vd25lckRvY3VtZW50KSByZXR1cm4gMDsKICAgICAgICAgICAgICAgIHZhciBhUmFuZ2UgPSBhLm93bmVyRG9jdW1lbnQuY3JlYXRlUmFuZ2UoKSwgYlJhbmdlID0gYi5vd25lckRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7CiAgICAgICAgICAgICAgICBhUmFuZ2Uuc2V0U3RhcnQoYSwgMCk7CiAgICAgICAgICAgICAgICBhUmFuZ2Uuc2V0RW5kKGEsIDApOwogICAgICAgICAgICAgICAgYlJhbmdlLnNldFN0YXJ0KGIsIDApOwogICAgICAgICAgICAgICAgYlJhbmdlLnNldEVuZChiLCAwKTsKICAgICAgICAgICAgICAgIHJldHVybiBhUmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKFJhbmdlLlNUQVJUX1RPX0VORCwgYlJhbmdlKTsKICAgICAgICB9IDogbnVsbCA7CgogICAgICAgIHJvb3QgPSBudWxsOwoKICAgICAgICBmb3IgKGZlYXR1cmUgaW4gZmVhdHVyZXMpewogICAgICAgICAgICAgICAgdGhpc1tmZWF0dXJlXSA9IGZlYXR1cmVzW2ZlYXR1cmVdOwogICAgICAgIH0KfTsKCi8vIE1haW4gTWV0aG9kCgp2YXIgcmVTaW1wbGVTZWxlY3RvciA9IC9eKFsjLl0/KSgoPzpbXHctXSt8XCopKSQvLAogICAgICAgIHJlRW1wdHlBdHRyaWJ1dGUgPSAvXFsuK1sqJF5dPSg/OiIifCcnKT9cXS8sCiAgICAgICAgcXNhRmFpbEV4cENhY2hlID0ge307Cgpsb2NhbC5zZWFyY2ggPSBmdW5jdGlvbihjb250ZXh0LCBleHByZXNzaW9uLCBhcHBlbmQsIGZpcnN0KXsKCiAgICAgICAgdmFyIGZvdW5kID0gdGhpcy5mb3VuZCA9IChmaXJzdCkgPyBudWxsIDogKGFwcGVuZCB8fCBbXSk7CgogICAgICAgIGlmICghY29udGV4dCkgcmV0dXJuIGZvdW5kOwogICAgICAgIGVsc2UgaWYgKGNvbnRleHQubmF2aWdhdG9yKSBjb250ZXh0ID0gY29udGV4dC5kb2N1bWVudDsgLy8gQ29udmVydCB0aGUgbm9kZSBmcm9tIGEgd2luZG93IHRvIGEgZG9jdW1lbnQKICAgICAgICBlbHNlIGlmICghY29udGV4dC5ub2RlVHlwZSkgcmV0dXJuIGZvdW5kOwoKICAgICAgICAvLyBzZXR1cAoKICAgICAgICB2YXIgcGFyc2VkLCBpLAogICAgICAgICAgICAgICAgdW5pcXVlcyA9IHRoaXMudW5pcXVlcyA9IHt9LAogICAgICAgICAgICAgICAgaGFzT3RoZXJzID0gISEoYXBwZW5kICYmIGFwcGVuZC5sZW5ndGgpLAogICAgICAgICAgICAgICAgY29udGV4dElzRG9jdW1lbnQgPSAoY29udGV4dC5ub2RlVHlwZSA9PSA5KTsKCiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnQgIT09IChjb250ZXh0SXNEb2N1bWVudCA/IGNvbnRleHQgOiBjb250ZXh0Lm93bmVyRG9jdW1lbnQpKSB0aGlzLnNldERvY3VtZW50KGNvbnRleHQpOwoKICAgICAgICAvLyBhdm9pZCBkdXBsaWNhdGluZyBpdGVtcyBhbHJlYWR5IGluIHRoZSBhcHBlbmQgYXJyYXkKICAgICAgICBpZiAoaGFzT3RoZXJzKSBmb3IgKGkgPSBmb3VuZC5sZW5ndGg7IGktLTspIHVuaXF1ZXNbdGhpcy5nZXRVSUQoZm91bmRbaV0pXSA9IHRydWU7CgogICAgICAgIC8vIGV4cHJlc3Npb24gY2hlY2tzCgogICAgICAgIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PSAnc3RyaW5nJyl7IC8vIGV4cHJlc3Npb24gaXMgYSBzdHJpbmcKCiAgICAgICAgICAgICAgICAvKjxzaW1wbGUtc2VsZWN0b3JzLW92ZXJyaWRlPiovCiAgICAgICAgICAgICAgICB2YXIgc2ltcGxlU2VsZWN0b3IgPSBleHByZXNzaW9uLm1hdGNoKHJlU2ltcGxlU2VsZWN0b3IpOwogICAgICAgICAgICAgICAgc2ltcGxlU2VsZWN0b3JzOiBpZiAoc2ltcGxlU2VsZWN0b3IpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzeW1ib2wgPSBzaW1wbGVTZWxlY3RvclsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gc2ltcGxlU2VsZWN0b3JbMl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSwgbm9kZXM7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN5bWJvbCl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09ICcqJyAmJiB0aGlzLmJyb2tlblN0YXJHRUJUTikgYnJlYWsgc2ltcGxlU2VsZWN0b3JzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZShuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3QpIHJldHVybiBub2Rlc1swXSB8fCBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IG5vZGUgPSBub2Rlc1tpKytdOyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShoYXNPdGhlcnMgJiYgdW5pcXVlc1t0aGlzLmdldFVJRChub2RlKV0pKSBmb3VuZC5wdXNoKG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sID09ICcjJyl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0hUTUxEb2N1bWVudCB8fCAhY29udGV4dElzRG9jdW1lbnQpIGJyZWFrIHNpbXBsZVNlbGVjdG9yczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gY29udGV4dC5nZXRFbGVtZW50QnlJZChuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUpIHJldHVybiBmb3VuZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pZEdldHNOYW1lICYmIG5vZGUuZ2V0QXR0cmlidXRlTm9kZSgnaWQnKS5ub2RlVmFsdWUgIT0gbmFtZSkgYnJlYWsgc2ltcGxlU2VsZWN0b3JzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCkgcmV0dXJuIG5vZGUgfHwgbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShoYXNPdGhlcnMgJiYgdW5pcXVlc1t0aGlzLmdldFVJRChub2RlKV0pKSBmb3VuZC5wdXNoKG5vZGUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzeW1ib2wgPT0gJy4nKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzSFRNTERvY3VtZW50IHx8ICgoIWNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSB8fCB0aGlzLmJyb2tlbkdFQkNOKSAmJiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwpKSBicmVhayBzaW1wbGVTZWxlY3RvcnM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiAhdGhpcy5icm9rZW5HRUJDTil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCkgcmV0dXJuIG5vZGVzWzBdIHx8IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBub2RlID0gbm9kZXNbaSsrXTspewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShoYXNPdGhlcnMgJiYgdW5pcXVlc1t0aGlzLmdldFVJRChub2RlKV0pKSBmb3VuZC5wdXNoKG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hDbGFzcyA9IG5ldyBSZWdFeHAoJyhefFxccyknKyBTbGljay5lc2NhcGVSZWdFeHAobmFtZSkgKycoXFxzfCQpJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IG5vZGUgPSBub2Rlc1tpKytdOyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IG5vZGUuY2xhc3NOYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShjbGFzc05hbWUgJiYgbWF0Y2hDbGFzcy50ZXN0KGNsYXNzTmFtZSkpKSBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0KSByZXR1cm4gbm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaGFzT3RoZXJzICYmIHVuaXF1ZXNbdGhpcy5nZXRVSUQobm9kZSldKSkgZm91bmQucHVzaChub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3RoZXJzKSB0aGlzLnNvcnQoZm91bmQpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZpcnN0KSA/IG51bGwgOiBmb3VuZDsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvKjwvc2ltcGxlLXNlbGVjdG9ycy1vdmVycmlkZT4qLwoKICAgICAgICAgICAgICAgIC8qPHF1ZXJ5LXNlbGVjdG9yLW92ZXJyaWRlPiovCiAgICAgICAgICAgICAgICBxdWVyeVNlbGVjdG9yOiBpZiAoY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNIVE1MRG9jdW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBxc2FGYWlsRXhwQ2FjaGVbZXhwcmVzc2lvbl0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86IG9ubHkgc2tpcCB3aGVuIGV4cHJlc3Npb24gaXMgYWN0dWFsbHkgbWl4ZWQgY2FzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHRoaXMuYnJva2VuTWl4ZWRDYXNlUVNBCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKHRoaXMuYnJva2VuQ2hlY2tlZFFTQSAmJiBleHByZXNzaW9uLmluZGV4T2YoJzpjaGVja2VkJykgPiAtMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAodGhpcy5icm9rZW5FbXB0eUF0dHJpYnV0ZVFTQSAmJiByZUVtcHR5QXR0cmlidXRlLnRlc3QoZXhwcmVzc2lvbikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKCFjb250ZXh0SXNEb2N1bWVudCAvL0Fib3J0IHdoZW4gIWNvbnRleHRJc0RvY3VtZW50IGFuZC4uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIHRoZXJlIGFyZSBtdWx0aXBsZSBleHByZXNzaW9ucyBpbiB0aGUgc2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICBzaW5jZSB3ZSBjdXJyZW50bHkgb25seSBmaXggbm9uLWRvY3VtZW50IHJvb3RlZCBRU0EgZm9yIHNpbmdsZSBleHByZXNzaW9uIHNlbGVjdG9ycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgZXhwcmVzc2lvbi5pbmRleE9mKCcsJykgPiAtMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBTbGljay5kaXNhYmxlUVNBCiAgICAgICAgICAgICAgICAgICAgICAgICkgYnJlYWsgcXVlcnlTZWxlY3RvcjsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24sIF9jb250ZXh0ID0gY29udGV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0SXNEb2N1bWVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9uLWRvY3VtZW50IHJvb3RlZCBRU0EKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjcmVkaXRzIHRvIEFuZHJldyBEdXBvbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudElkID0gX2NvbnRleHQuZ2V0QXR0cmlidXRlKCdpZCcpLCBzbGlja2lkID0gJ3NsaWNraWRfXyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQuc2V0QXR0cmlidXRlKCdpZCcsIHNsaWNraWQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9leHByZXNzaW9uID0gJyMnICsgc2xpY2tpZCArICcgJyArIF9leHByZXNzaW9uOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBfY29udGV4dC5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCkgcmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvcihfZXhwcmVzc2lvbikgfHwgbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIG5vZGVzID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKF9leHByZXNzaW9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXNhRmFpbEV4cENhY2hlW2V4cHJlc3Npb25dID0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBxdWVyeVNlbGVjdG9yOwogICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29udGV4dElzRG9jdW1lbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJZCkgX2NvbnRleHQuc2V0QXR0cmlidXRlKCdpZCcsIGN1cnJlbnRJZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIF9jb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBfY29udGV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJTZWxlY3RzQ2xvc2VkUVNBKSBmb3IgKGkgPSAwOyBub2RlID0gbm9kZXNbaSsrXTspewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lID4gJ0AnICYmICEoaGFzT3RoZXJzICYmIHVuaXF1ZXNbdGhpcy5nZXRVSUQobm9kZSldKSkgZm91bmQucHVzaChub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGZvciAoaSA9IDA7IG5vZGUgPSBub2Rlc1tpKytdOyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaGFzT3RoZXJzICYmIHVuaXF1ZXNbdGhpcy5nZXRVSUQobm9kZSldKSkgZm91bmQucHVzaChub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc090aGVycykgdGhpcy5zb3J0KGZvdW5kKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kOwoKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qPC9xdWVyeS1zZWxlY3Rvci1vdmVycmlkZT4qLwoKICAgICAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMuU2xpY2sucGFyc2UoZXhwcmVzc2lvbik7CiAgICAgICAgICAgICAgICBpZiAoIXBhcnNlZC5sZW5ndGgpIHJldHVybiBmb3VuZDsKICAgICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24gPT0gbnVsbCl7IC8vIHRoZXJlIGlzIG5vIGV4cHJlc3Npb24KICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZDsKICAgICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24uU2xpY2speyAvLyBleHByZXNzaW9uIGlzIGEgcGFyc2VkIFNsaWNrIG9iamVjdAogICAgICAgICAgICAgICAgcGFyc2VkID0gZXhwcmVzc2lvbjsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29udGFpbnMoY29udGV4dC5kb2N1bWVudEVsZW1lbnQgfHwgY29udGV4dCwgZXhwcmVzc2lvbikpeyAvLyBleHByZXNzaW9uIGlzIGEgbm9kZQogICAgICAgICAgICAgICAgKGZvdW5kKSA/IGZvdW5kLnB1c2goZXhwcmVzc2lvbikgOiBmb3VuZCA9IGV4cHJlc3Npb247CiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7CiAgICAgICAgfSBlbHNlIHsgLy8gb3RoZXIganVuawogICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kOwogICAgICAgIH0KCiAgICAgICAgLyo8cHNldWRvLXNlbGVjdG9ycz4qLy8qPG50aC1wc2V1ZG8tc2VsZWN0b3JzPiovCgogICAgICAgIC8vIGNhY2hlIGVsZW1lbnRzIGZvciB0aGUgbnRoIHNlbGVjdG9ycwoKICAgICAgICB0aGlzLnBvc05USCA9IHt9OwogICAgICAgIHRoaXMucG9zTlRITGFzdCA9IHt9OwogICAgICAgIHRoaXMucG9zTlRIVHlwZSA9IHt9OwogICAgICAgIHRoaXMucG9zTlRIVHlwZUxhc3QgPSB7fTsKCiAgICAgICAgLyo8L250aC1wc2V1ZG8tc2VsZWN0b3JzPiovLyo8L3BzZXVkby1zZWxlY3RvcnM+Ki8KCiAgICAgICAgLy8gaWYgYXBwZW5kIGlzIG51bGwgYW5kIHRoZXJlIGlzIG9ubHkgYSBzaW5nbGUgc2VsZWN0b3Igd2l0aCBvbmUgZXhwcmVzc2lvbiB1c2UgcHVzaEFycmF5LCBlbHNlIHVzZSBwdXNoVUlECiAgICAgICAgdGhpcy5wdXNoID0gKCFoYXNPdGhlcnMgJiYgKGZpcnN0IHx8IChwYXJzZWQubGVuZ3RoID09IDEgJiYgcGFyc2VkLmV4cHJlc3Npb25zWzBdLmxlbmd0aCA9PSAxKSkpID8gdGhpcy5wdXNoQXJyYXkgOiB0aGlzLnB1c2hVSUQ7CgogICAgICAgIGlmIChmb3VuZCA9PSBudWxsKSBmb3VuZCA9IFtdOwoKICAgICAgICAvLyBkZWZhdWx0IGVuZ2luZQoKICAgICAgICB2YXIgaiwgbSwgbjsKICAgICAgICB2YXIgY29tYmluYXRvciwgdGFnLCBpZCwgY2xhc3NMaXN0LCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zOwogICAgICAgIHZhciBjdXJyZW50SXRlbXMsIGN1cnJlbnRFeHByZXNzaW9uLCBjdXJyZW50Qml0LCBsYXN0Qml0LCBleHByZXNzaW9ucyA9IHBhcnNlZC5leHByZXNzaW9uczsKCiAgICAgICAgc2VhcmNoOiBmb3IgKGkgPSAwOyAoY3VycmVudEV4cHJlc3Npb24gPSBleHByZXNzaW9uc1tpXSk7IGkrKykgZm9yIChqID0gMDsgKGN1cnJlbnRCaXQgPSBjdXJyZW50RXhwcmVzc2lvbltqXSk7IGorKyl7CgogICAgICAgICAgICAgICAgY29tYmluYXRvciA9ICdjb21iaW5hdG9yOicgKyBjdXJyZW50Qml0LmNvbWJpbmF0b3I7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXNbY29tYmluYXRvcl0pIGNvbnRpbnVlIHNlYXJjaDsKCiAgICAgICAgICAgICAgICB0YWcgICAgICAgID0gKHRoaXMuaXNYTUxEb2N1bWVudCkgPyBjdXJyZW50Qml0LnRhZyA6IGN1cnJlbnRCaXQudGFnLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgICAgICBpZCAgICAgICAgID0gY3VycmVudEJpdC5pZDsKICAgICAgICAgICAgICAgIGNsYXNzTGlzdCAgPSBjdXJyZW50Qml0LmNsYXNzTGlzdDsKICAgICAgICAgICAgICAgIGNsYXNzZXMgICAgPSBjdXJyZW50Qml0LmNsYXNzZXM7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gY3VycmVudEJpdC5hdHRyaWJ1dGVzOwogICAgICAgICAgICAgICAgcHNldWRvcyAgICA9IGN1cnJlbnRCaXQucHNldWRvczsKICAgICAgICAgICAgICAgIGxhc3RCaXQgICAgPSAoaiA9PT0gKGN1cnJlbnRFeHByZXNzaW9uLmxlbmd0aCAtIDEpKTsKCiAgICAgICAgICAgICAgICB0aGlzLmJpdFVuaXF1ZXMgPSB7fTsKCiAgICAgICAgICAgICAgICBpZiAobGFzdEJpdCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5pcXVlcyA9IHVuaXF1ZXM7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm91bmQgPSBmb3VuZDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5pcXVlcyA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvdW5kID0gW107CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKGogPT09IDApewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2NvbWJpbmF0b3JdKGNvbnRleHQsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MsIGNsYXNzTGlzdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCAmJiBsYXN0Qml0ICYmIGZvdW5kLmxlbmd0aCkgYnJlYWsgc2VhcmNoOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0ICYmIGxhc3RCaXQpIGZvciAobSA9IDAsIG4gPSBjdXJyZW50SXRlbXMubGVuZ3RoOyBtIDwgbjsgbSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2NvbWJpbmF0b3JdKGN1cnJlbnRJdGVtc1ttXSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcywgY2xhc3NMaXN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmQubGVuZ3RoKSBicmVhayBzZWFyY2g7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBmb3IgKG0gPSAwLCBuID0gY3VycmVudEl0ZW1zLmxlbmd0aDsgbSA8IG47IG0rKykgdGhpc1tjb21iaW5hdG9yXShjdXJyZW50SXRlbXNbbV0sIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MsIGNsYXNzTGlzdCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY3VycmVudEl0ZW1zID0gdGhpcy5mb3VuZDsKICAgICAgICB9CgogICAgICAgIC8vIHNob3VsZCBzb3J0IGlmIHRoZXJlIGFyZSBub2RlcyBpbiBhcHBlbmQgYW5kIGlmIHlvdSBwYXNzIG11bHRpcGxlIGV4cHJlc3Npb25zLgogICAgICAgIGlmIChoYXNPdGhlcnMgfHwgKHBhcnNlZC5leHByZXNzaW9ucy5sZW5ndGggPiAxKSkgdGhpcy5zb3J0KGZvdW5kKTsKCiAgICAgICAgcmV0dXJuIChmaXJzdCkgPyAoZm91bmRbMF0gfHwgbnVsbCkgOiBmb3VuZDsKfTsKCi8vIFV0aWxzCgpsb2NhbC51aWR4ID0gMTsKbG9jYWwudWlkayA9ICdzbGljay11bmlxdWVpZCc7Cgpsb2NhbC5nZXRVSURYTUwgPSBmdW5jdGlvbihub2RlKXsKICAgICAgICB2YXIgdWlkID0gbm9kZS5nZXRBdHRyaWJ1dGUodGhpcy51aWRrKTsKICAgICAgICBpZiAoIXVpZCl7CiAgICAgICAgICAgICAgICB1aWQgPSB0aGlzLnVpZHgrKzsKICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKHRoaXMudWlkaywgdWlkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVpZDsKfTsKCmxvY2FsLmdldFVJREhUTUwgPSBmdW5jdGlvbihub2RlKXsKICAgICAgICByZXR1cm4gbm9kZS51bmlxdWVOdW1iZXIgfHwgKG5vZGUudW5pcXVlTnVtYmVyID0gdGhpcy51aWR4KyspOwp9OwoKLy8gc29ydCBiYXNlZCBvbiB0aGUgc2V0RG9jdW1lbnQgZG9jdW1lbnRTb3J0ZXIgbWV0aG9kLgoKbG9jYWwuc29ydCA9IGZ1bmN0aW9uKHJlc3VsdHMpewogICAgICAgIGlmICghdGhpcy5kb2N1bWVudFNvcnRlcikgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgcmVzdWx0cy5zb3J0KHRoaXMuZG9jdW1lbnRTb3J0ZXIpOwogICAgICAgIHJldHVybiByZXN1bHRzOwp9OwoKLyo8cHNldWRvLXNlbGVjdG9ycz4qLy8qPG50aC1wc2V1ZG8tc2VsZWN0b3JzPiovCgpsb2NhbC5jYWNoZU5USCA9IHt9OwoKbG9jYWwubWF0Y2hOVEggPSAvXihbKy1dP1xkKik/KFthLXpdKyk/KFsrLV1cZCspPyQvOwoKbG9jYWwucGFyc2VOVEhBcmd1bWVudCA9IGZ1bmN0aW9uKGFyZ3VtZW50KXsKICAgICAgICB2YXIgcGFyc2VkID0gYXJndW1lbnQubWF0Y2godGhpcy5tYXRjaE5USCk7CiAgICAgICAgaWYgKCFwYXJzZWQpIHJldHVybiBmYWxzZTsKICAgICAgICB2YXIgc3BlY2lhbCA9IHBhcnNlZFsyXSB8fCBmYWxzZTsKICAgICAgICB2YXIgYSA9IHBhcnNlZFsxXSB8fCAxOwogICAgICAgIGlmIChhID09ICctJykgYSA9IC0xOwogICAgICAgIHZhciBiID0gK3BhcnNlZFszXSB8fCAwOwogICAgICAgIHBhcnNlZCA9CiAgICAgICAgICAgICAgICAoc3BlY2lhbCA9PSAnbicpICAgICAgICA/IHthOiBhLCBiOiBifSA6CiAgICAgICAgICAgICAgICAoc3BlY2lhbCA9PSAnb2RkJykgICAgICA/IHthOiAyLCBiOiAxfSA6CiAgICAgICAgICAgICAgICAoc3BlY2lhbCA9PSAnZXZlbicpICAgICA/IHthOiAyLCBiOiAwfSA6IHthOiAwLCBiOiBhfTsKCiAgICAgICAgcmV0dXJuICh0aGlzLmNhY2hlTlRIW2FyZ3VtZW50XSA9IHBhcnNlZCk7Cn07Cgpsb2NhbC5jcmVhdGVOVEhQc2V1ZG8gPSBmdW5jdGlvbihjaGlsZCwgc2libGluZywgcG9zaXRpb25zLCBvZlR5cGUpewogICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlLCBhcmd1bWVudCl7CiAgICAgICAgICAgICAgICB2YXIgdWlkID0gdGhpcy5nZXRVSUQobm9kZSk7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXNbcG9zaXRpb25zXVt1aWRdKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJlbnQpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gcGFyZW50W2NoaWxkXSwgY291bnQgPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAob2ZUeXBlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbC5ub2RlTmFtZSAhPSBub2RlTmFtZSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Bvc2l0aW9uc11bdGhpcy5nZXRVSUQoZWwpXSA9IGNvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoKGVsID0gZWxbc2libGluZ10pKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwubm9kZVR5cGUgIT0gMSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Bvc2l0aW9uc11bdGhpcy5nZXRVSUQoZWwpXSA9IGNvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoKGVsID0gZWxbc2libGluZ10pKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYXJndW1lbnQgPSBhcmd1bWVudCB8fCAnbic7CiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gdGhpcy5jYWNoZU5USFthcmd1bWVudF0gfHwgdGhpcy5wYXJzZU5USEFyZ3VtZW50KGFyZ3VtZW50KTsKICAgICAgICAgICAgICAgIGlmICghcGFyc2VkKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB2YXIgYSA9IHBhcnNlZC5hLCBiID0gcGFyc2VkLmIsIHBvcyA9IHRoaXNbcG9zaXRpb25zXVt1aWRdOwogICAgICAgICAgICAgICAgaWYgKGEgPT0gMCkgcmV0dXJuIGIgPT0gcG9zOwogICAgICAgICAgICAgICAgaWYgKGEgPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA8IGIpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiIDwgcG9zKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gKChwb3MgLSBiKSAlIGEpID09IDA7CiAgICAgICAgfTsKfTsKCi8qPC9udGgtcHNldWRvLXNlbGVjdG9ycz4qLy8qPC9wc2V1ZG8tc2VsZWN0b3JzPiovCgpsb2NhbC5wdXNoQXJyYXkgPSBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsKICAgICAgICBpZiAodGhpcy5tYXRjaFNlbGVjdG9yKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpKSB0aGlzLmZvdW5kLnB1c2gobm9kZSk7Cn07Cgpsb2NhbC5wdXNoVUlEID0gZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7CiAgICAgICAgdmFyIHVpZCA9IHRoaXMuZ2V0VUlEKG5vZGUpOwogICAgICAgIGlmICghdGhpcy51bmlxdWVzW3VpZF0gJiYgdGhpcy5tYXRjaFNlbGVjdG9yKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpKXsKICAgICAgICAgICAgICAgIHRoaXMudW5pcXVlc1t1aWRdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRoaXMuZm91bmQucHVzaChub2RlKTsKICAgICAgICB9Cn07Cgpsb2NhbC5tYXRjaE5vZGUgPSBmdW5jdGlvbihub2RlLCBzZWxlY3Rvcil7CiAgICAgICAgaWYgKHRoaXMuaXNIVE1MRG9jdW1lbnQgJiYgdGhpcy5uYXRpdmVNYXRjaGVzU2VsZWN0b3IpewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yLmNhbGwobm9kZSwgc2VsZWN0b3IucmVwbGFjZSgvXFsoW149XSspPVxzKihbXiciXF1dKz8pXHMqXF0vZywgJ1skMT0iJDIiXScpKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2gobWF0Y2hFcnJvcikge30KICAgICAgICB9CgogICAgICAgIHZhciBwYXJzZWQgPSB0aGlzLlNsaWNrLnBhcnNlKHNlbGVjdG9yKTsKICAgICAgICBpZiAoIXBhcnNlZCkgcmV0dXJuIHRydWU7CgogICAgICAgIC8vIHNpbXBsZSAoc2luZ2xlKSBzZWxlY3RvcnMKICAgICAgICB2YXIgZXhwcmVzc2lvbnMgPSBwYXJzZWQuZXhwcmVzc2lvbnMsIHNpbXBsZUV4cENvdW50ZXIgPSAwLCBpOwogICAgICAgIGZvciAoaSA9IDA7IChjdXJyZW50RXhwcmVzc2lvbiA9IGV4cHJlc3Npb25zW2ldKTsgaSsrKXsKICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RXhwcmVzc2lvbi5sZW5ndGggPT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHAgPSBjdXJyZW50RXhwcmVzc2lvblswXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hTZWxlY3Rvcihub2RlLCAodGhpcy5pc1hNTERvY3VtZW50KSA/IGV4cC50YWcgOiBleHAudGFnLnRvVXBwZXJDYXNlKCksIGV4cC5pZCwgZXhwLmNsYXNzZXMsIGV4cC5hdHRyaWJ1dGVzLCBleHAucHNldWRvcykpIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBzaW1wbGVFeHBDb3VudGVyKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoc2ltcGxlRXhwQ291bnRlciA9PSBwYXJzZWQubGVuZ3RoKSByZXR1cm4gZmFsc2U7CgogICAgICAgIHZhciBub2RlcyA9IHRoaXMuc2VhcmNoKHRoaXMuZG9jdW1lbnQsIHBhcnNlZCksIGl0ZW07CiAgICAgICAgZm9yIChpID0gMDsgaXRlbSA9IG5vZGVzW2krK107KXsKICAgICAgICAgICAgICAgIGlmIChpdGVtID09PSBub2RlKSByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwp9OwoKbG9jYWwubWF0Y2hQc2V1ZG8gPSBmdW5jdGlvbihub2RlLCBuYW1lLCBhcmd1bWVudCl7CiAgICAgICAgdmFyIHBzZXVkb05hbWUgPSAncHNldWRvOicgKyBuYW1lOwogICAgICAgIGlmICh0aGlzW3BzZXVkb05hbWVdKSByZXR1cm4gdGhpc1twc2V1ZG9OYW1lXShub2RlLCBhcmd1bWVudCk7CiAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKG5vZGUsIG5hbWUpOwogICAgICAgIHJldHVybiAoYXJndW1lbnQpID8gYXJndW1lbnQgPT0gYXR0cmlidXRlIDogISFhdHRyaWJ1dGU7Cn07Cgpsb2NhbC5tYXRjaFNlbGVjdG9yID0gZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7CiAgICAgICAgaWYgKHRhZyl7CiAgICAgICAgICAgICAgICB2YXIgbm9kZU5hbWUgPSAodGhpcy5pc1hNTERvY3VtZW50KSA/IG5vZGUubm9kZU5hbWUgOiBub2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgICAgICBpZiAodGFnID09ICcqJyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlTmFtZSA8ICdAJykgcmV0dXJuIGZhbHNlOyAvLyBGaXggZm9yIGNvbW1lbnQgbm9kZXMgYW5kIGNsb3NlZCBub2RlcwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lICE9IHRhZykgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGlkICYmIG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpICE9IGlkKSByZXR1cm4gZmFsc2U7CgogICAgICAgIHZhciBpLCBwYXJ0LCBjbHM7CiAgICAgICAgaWYgKGNsYXNzZXMpIGZvciAoaSA9IGNsYXNzZXMubGVuZ3RoOyBpLS07KXsKICAgICAgICAgICAgICAgIGNscyA9IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8IG5vZGUuY2xhc3NOYW1lOwogICAgICAgICAgICAgICAgaWYgKCEoY2xzICYmIGNsYXNzZXNbaV0ucmVnZXhwLnRlc3QoY2xzKSkpIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKGF0dHJpYnV0ZXMpIGZvciAoaSA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBpLS07KXsKICAgICAgICAgICAgICAgIHBhcnQgPSBhdHRyaWJ1dGVzW2ldOwogICAgICAgICAgICAgICAgaWYgKHBhcnQub3BlcmF0b3IgPyAhcGFydC50ZXN0KHRoaXMuZ2V0QXR0cmlidXRlKG5vZGUsIHBhcnQua2V5KSkgOiAhdGhpcy5oYXNBdHRyaWJ1dGUobm9kZSwgcGFydC5rZXkpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmIChwc2V1ZG9zKSBmb3IgKGkgPSBwc2V1ZG9zLmxlbmd0aDsgaS0tOyl7CiAgICAgICAgICAgICAgICBwYXJ0ID0gcHNldWRvc1tpXTsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaFBzZXVkbyhub2RlLCBwYXJ0LmtleSwgcGFydC52YWx1ZSkpIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7Cn07Cgp2YXIgY29tYmluYXRvcnMgPSB7CgogICAgICAgICcgJzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcywgY2xhc3NMaXN0KXsgLy8gYWxsIGNoaWxkIG5vZGVzLCBhbnkgbGV2ZWwKCiAgICAgICAgICAgICAgICB2YXIgaSwgaXRlbSwgY2hpbGRyZW47CgogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNIVE1MRG9jdW1lbnQpewogICAgICAgICAgICAgICAgICAgICAgICBnZXRCeUlkOiBpZiAoaWQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCFpdGVtICYmIG5vZGUuYWxsKSB8fCAodGhpcy5pZEdldHNOYW1lICYmIGl0ZW0gJiYgaXRlbS5nZXRBdHRyaWJ1dGVOb2RlKCdpZCcpLm5vZGVWYWx1ZSAhPSBpZCkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxsW2lkXSByZXR1cm5zIGFsbCB0aGUgZWxlbWVudHMgd2l0aCB0aGF0IG5hbWUgb3IgaWQgaW5zaWRlIG5vZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlcyBqdXN0IG9uZSBpdCB3aWxsIHJldHVybiB0aGUgZWxlbWVudCwgZWxzZSBpdCB3aWxsIGJlIGEgY29sbGVjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBub2RlLmFsbFtpZF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuWzBdKSBjaGlsZHJlbiA9IFtjaGlsZHJlbl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpdGVtID0gY2hpbGRyZW5baSsrXTspewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWROb2RlID0gaXRlbS5nZXRBdHRyaWJ1dGVOb2RlKCdpZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWROb2RlICYmIGlkTm9kZS5ub2RlVmFsdWUgPT0gaWQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChpdGVtLCB0YWcsIG51bGwsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXRlbSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgY29udGV4dCBpcyBpbiB0aGUgZG9tIHdlIHJldHVybiwgZWxzZSB3ZSB3aWxsIHRyeSBHRUJUTiwgYnJlYWtpbmcgdGhlIGdldEJ5SWQgbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5zKHRoaXMucm9vdCwgbm9kZSkpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgYnJlYWsgZ2V0QnlJZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZG9jdW1lbnQgIT09IG5vZGUgJiYgIXRoaXMuY29udGFpbnMobm9kZSwgaXRlbSkpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2goaXRlbSwgdGFnLCBudWxsLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QnlDbGFzczogaWYgKGNsYXNzZXMgJiYgbm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmICF0aGlzLmJyb2tlbkdFQkNOKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IG5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc0xpc3Quam9pbignICcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpKSBicmVhayBnZXRCeUNsYXNzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGl0ZW0gPSBjaGlsZHJlbltpKytdOykgdGhpcy5wdXNoKGl0ZW0sIHRhZywgaWQsIG51bGwsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZ2V0QnlUYWc6IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkpIGJyZWFrIGdldEJ5VGFnOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYnJva2VuU3RhckdFQlROKSB0YWcgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpdGVtID0gY2hpbGRyZW5baSsrXTspIHRoaXMucHVzaChpdGVtLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAnPic6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBkaXJlY3QgY2hpbGRyZW4KICAgICAgICAgICAgICAgIGlmICgobm9kZSA9IG5vZGUuZmlyc3RDaGlsZCkpIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkgdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgfSB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSk7CiAgICAgICAgfSwKCiAgICAgICAgJysnOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gbmV4dCBzaWJsaW5nCiAgICAgICAgICAgICAgICB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSkgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgJ14nOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gZmlyc3QgY2hpbGQKICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgICAgICBpZiAobm9kZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHRoaXMucHVzaChub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB0aGlzWydjb21iaW5hdG9yOisnXShub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAnfic6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBuZXh0IHNpYmxpbmdzCiAgICAgICAgICAgICAgICB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9IDEpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdWlkID0gdGhpcy5nZXRVSUQobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJpdFVuaXF1ZXNbdWlkXSkgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYml0VW5pcXVlc1t1aWRdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgICcrKyc6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBuZXh0IHNpYmxpbmcgYW5kIHByZXZpb3VzIHNpYmxpbmcKICAgICAgICAgICAgICAgIHRoaXNbJ2NvbWJpbmF0b3I6KyddKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgdGhpc1snY29tYmluYXRvcjohKyddKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgIH0sCgogICAgICAgICd+fic6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBuZXh0IHNpYmxpbmdzIGFuZCBwcmV2aW91cyBzaWJsaW5ncwogICAgICAgICAgICAgICAgdGhpc1snY29tYmluYXRvcjp+J10obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyk7CiAgICAgICAgICAgICAgICB0aGlzWydjb21iaW5hdG9yOiF+J10obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyk7CiAgICAgICAgfSwKCiAgICAgICAgJyEnOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gYWxsIHBhcmVudCBub2RlcyB1cCB0byBkb2N1bWVudAogICAgICAgICAgICAgICAgd2hpbGUgKChub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgaWYgKG5vZGUgIT09IHRoaXMuZG9jdW1lbnQpIHRoaXMucHVzaChub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICB9LAoKICAgICAgICAnIT4nOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gZGlyZWN0IHBhcmVudCAob25lIGxldmVsKQogICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIGlmIChub2RlICE9PSB0aGlzLmRvY3VtZW50KSB0aGlzLnB1c2gobm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyk7CiAgICAgICAgfSwKCiAgICAgICAgJyErJzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7IC8vIHByZXZpb3VzIHNpYmxpbmcKICAgICAgICAgICAgICAgIHdoaWxlICgobm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSkgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgJyFeJzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7IC8vIGxhc3QgY2hpbGQKICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDsKICAgICAgICAgICAgICAgIGlmIChub2RlKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkgdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXNbJ2NvbWJpbmF0b3I6ISsnXShub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAnIX4nOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gcHJldmlvdXMgc2libGluZ3MKICAgICAgICAgICAgICAgIHdoaWxlICgobm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9IDEpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdWlkID0gdGhpcy5nZXRVSUQobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJpdFVuaXF1ZXNbdWlkXSkgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYml0VW5pcXVlc1t1aWRdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KCn07Cgpmb3IgKHZhciBjIGluIGNvbWJpbmF0b3JzKSBsb2NhbFsnY29tYmluYXRvcjonICsgY10gPSBjb21iaW5hdG9yc1tjXTsKCnZhciBwc2V1ZG9zID0gewoKICAgICAgICAvKjxwc2V1ZG8tc2VsZWN0b3JzPiovCgogICAgICAgICdlbXB0eSc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkOwogICAgICAgICAgICAgICAgcmV0dXJuICEoY2hpbGQgJiYgY2hpbGQubm9kZVR5cGUgPT0gMSkgJiYgIShub2RlLmlubmVyVGV4dCB8fCBub2RlLnRleHRDb250ZW50IHx8ICcnKS5sZW5ndGg7CiAgICAgICAgfSwKCiAgICAgICAgJ25vdCc6IGZ1bmN0aW9uKG5vZGUsIGV4cHJlc3Npb24pewogICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLm1hdGNoTm9kZShub2RlLCBleHByZXNzaW9uKTsKICAgICAgICB9LAoKICAgICAgICAnY29udGFpbnMnOiBmdW5jdGlvbihub2RlLCB0ZXh0KXsKICAgICAgICAgICAgICAgIHJldHVybiAobm9kZS5pbm5lclRleHQgfHwgbm9kZS50ZXh0Q29udGVudCB8fCAnJykuaW5kZXhPZih0ZXh0KSA+IC0xOwogICAgICAgIH0sCgogICAgICAgICdmaXJzdC1jaGlsZCc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgd2hpbGUgKChub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmcpKSBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAoKICAgICAgICAnbGFzdC1jaGlsZCc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgd2hpbGUgKChub2RlID0gbm9kZS5uZXh0U2libGluZykpIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sCgogICAgICAgICdvbmx5LWNoaWxkJzogZnVuY3Rpb24obm9kZSl7CiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IG5vZGU7CiAgICAgICAgICAgICAgICB3aGlsZSAoKHByZXYgPSBwcmV2LnByZXZpb3VzU2libGluZykpIGlmIChwcmV2Lm5vZGVUeXBlID09IDEpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gbm9kZTsKICAgICAgICAgICAgICAgIHdoaWxlICgobmV4dCA9IG5leHQubmV4dFNpYmxpbmcpKSBpZiAobmV4dC5ub2RlVHlwZSA9PSAxKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAoKICAgICAgICAvKjxudGgtcHNldWRvLXNlbGVjdG9ycz4qLwoKICAgICAgICAnbnRoLWNoaWxkJzogbG9jYWwuY3JlYXRlTlRIUHNldWRvKCdmaXJzdENoaWxkJywgJ25leHRTaWJsaW5nJywgJ3Bvc05USCcpLAoKICAgICAgICAnbnRoLWxhc3QtY2hpbGQnOiBsb2NhbC5jcmVhdGVOVEhQc2V1ZG8oJ2xhc3RDaGlsZCcsICdwcmV2aW91c1NpYmxpbmcnLCAncG9zTlRITGFzdCcpLAoKICAgICAgICAnbnRoLW9mLXR5cGUnOiBsb2NhbC5jcmVhdGVOVEhQc2V1ZG8oJ2ZpcnN0Q2hpbGQnLCAnbmV4dFNpYmxpbmcnLCAncG9zTlRIVHlwZScsIHRydWUpLAoKICAgICAgICAnbnRoLWxhc3Qtb2YtdHlwZSc6IGxvY2FsLmNyZWF0ZU5USFBzZXVkbygnbGFzdENoaWxkJywgJ3ByZXZpb3VzU2libGluZycsICdwb3NOVEhUeXBlTGFzdCcsIHRydWUpLAoKICAgICAgICAnaW5kZXgnOiBmdW5jdGlvbihub2RlLCBpbmRleCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1sncHNldWRvOm50aC1jaGlsZCddKG5vZGUsICcnICsgaW5kZXggKyAxKTsKICAgICAgICB9LAoKICAgICAgICAnZXZlbic6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbJ3BzZXVkbzpudGgtY2hpbGQnXShub2RlLCAnMm4nKTsKICAgICAgICB9LAoKICAgICAgICAnb2RkJzogZnVuY3Rpb24obm9kZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1sncHNldWRvOm50aC1jaGlsZCddKG5vZGUsICcybisxJyk7CiAgICAgICAgfSwKCiAgICAgICAgLyo8L250aC1wc2V1ZG8tc2VsZWN0b3JzPiovCgogICAgICAgIC8qPG9mLXR5cGUtcHNldWRvLXNlbGVjdG9ycz4qLwoKICAgICAgICAnZmlyc3Qtb2YtdHlwZSc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgdmFyIG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZTsKICAgICAgICAgICAgICAgIHdoaWxlICgobm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSkgaWYgKG5vZGUubm9kZU5hbWUgPT0gbm9kZU5hbWUpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sCgogICAgICAgICdsYXN0LW9mLXR5cGUnOiBmdW5jdGlvbihub2RlKXsKICAgICAgICAgICAgICAgIHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWU7CiAgICAgICAgICAgICAgICB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSkgaWYgKG5vZGUubm9kZU5hbWUgPT0gbm9kZU5hbWUpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sCgogICAgICAgICdvbmx5LW9mLXR5cGUnOiBmdW5jdGlvbihub2RlKXsKICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gbm9kZSwgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lOwogICAgICAgICAgICAgICAgd2hpbGUgKChwcmV2ID0gcHJldi5wcmV2aW91c1NpYmxpbmcpKSBpZiAocHJldi5ub2RlTmFtZSA9PSBub2RlTmFtZSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgdmFyIG5leHQgPSBub2RlOwogICAgICAgICAgICAgICAgd2hpbGUgKChuZXh0ID0gbmV4dC5uZXh0U2libGluZykpIGlmIChuZXh0Lm5vZGVOYW1lID09IG5vZGVOYW1lKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAoKICAgICAgICAvKjwvb2YtdHlwZS1wc2V1ZG8tc2VsZWN0b3JzPiovCgogICAgICAgIC8vIGN1c3RvbSBwc2V1ZG9zCgogICAgICAgICdlbmFibGVkJzogZnVuY3Rpb24obm9kZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gIW5vZGUuZGlzYWJsZWQ7CiAgICAgICAgfSwKCiAgICAgICAgJ2Rpc2FibGVkJzogZnVuY3Rpb24obm9kZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5kaXNhYmxlZDsKICAgICAgICB9LAoKICAgICAgICAnY2hlY2tlZCc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2hlY2tlZCB8fCBub2RlLnNlbGVjdGVkOwogICAgICAgIH0sCgogICAgICAgICdmb2N1cyc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNIVE1MRG9jdW1lbnQgJiYgdGhpcy5kb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBub2RlICYmIChub2RlLmhyZWYgfHwgbm9kZS50eXBlIHx8IHRoaXMuaGFzQXR0cmlidXRlKG5vZGUsICd0YWJpbmRleCcpKTsKICAgICAgICB9LAoKICAgICAgICAncm9vdCc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIChub2RlID09PSB0aGlzLnJvb3QpOwogICAgICAgIH0sCgogICAgICAgICdzZWxlY3RlZCc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuc2VsZWN0ZWQ7CiAgICAgICAgfQoKICAgICAgICAvKjwvcHNldWRvLXNlbGVjdG9ycz4qLwp9OwoKZm9yICh2YXIgcCBpbiBwc2V1ZG9zKSBsb2NhbFsncHNldWRvOicgKyBwXSA9IHBzZXVkb3NbcF07CgovLyBhdHRyaWJ1dGVzIG1ldGhvZHMKCnZhciBhdHRyaWJ1dGVHZXR0ZXJzID0gbG9jYWwuYXR0cmlidXRlR2V0dGVycyA9IHsKCiAgICAgICAgJ2NsYXNzJzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCB0aGlzLmNsYXNzTmFtZTsKICAgICAgICB9LAoKICAgICAgICAnZm9yJzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiAoJ2h0bWxGb3InIGluIHRoaXMpID8gdGhpcy5odG1sRm9yIDogdGhpcy5nZXRBdHRyaWJ1dGUoJ2ZvcicpOwogICAgICAgIH0sCgogICAgICAgICdocmVmJzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiAoJ2hyZWYnIGluIHRoaXMpID8gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnLCAyKSA6IHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyk7CiAgICAgICAgfSwKCiAgICAgICAgJ3N0eWxlJzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5zdHlsZSkgPyB0aGlzLnN0eWxlLmNzc1RleHQgOiB0aGlzLmdldEF0dHJpYnV0ZSgnc3R5bGUnKTsKICAgICAgICB9LAoKICAgICAgICAndGFiaW5kZXgnOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5vZGUgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUoJ3RhYmluZGV4Jyk7CiAgICAgICAgICAgICAgICByZXR1cm4gKGF0dHJpYnV0ZU5vZGUgJiYgYXR0cmlidXRlTm9kZS5zcGVjaWZpZWQpID8gYXR0cmlidXRlTm9kZS5ub2RlVmFsdWUgOiBudWxsOwogICAgICAgIH0sCgogICAgICAgICd0eXBlJzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgndHlwZScpOwogICAgICAgIH0sCgogICAgICAgICdtYXhsZW5ndGgnOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5vZGUgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUoJ21heExlbmd0aCcpOwogICAgICAgICAgICAgICAgcmV0dXJuIChhdHRyaWJ1dGVOb2RlICYmIGF0dHJpYnV0ZU5vZGUuc3BlY2lmaWVkKSA/IGF0dHJpYnV0ZU5vZGUubm9kZVZhbHVlIDogbnVsbDsKICAgICAgICB9Cgp9OwoKYXR0cmlidXRlR2V0dGVycy5NQVhMRU5HVEggPSBhdHRyaWJ1dGVHZXR0ZXJzLm1heExlbmd0aCA9IGF0dHJpYnV0ZUdldHRlcnMubWF4bGVuZ3RoOwoKLy8gU2xpY2sKCnZhciBTbGljayA9IGxvY2FsLlNsaWNrID0gKHRoaXMuU2xpY2sgfHwge30pOwoKU2xpY2sudmVyc2lvbiA9ICcxLjEuNic7CgovLyBTbGljayBmaW5kZXIKClNsaWNrLnNlYXJjaCA9IGZ1bmN0aW9uKGNvbnRleHQsIGV4cHJlc3Npb24sIGFwcGVuZCl7CiAgICAgICAgcmV0dXJuIGxvY2FsLnNlYXJjaChjb250ZXh0LCBleHByZXNzaW9uLCBhcHBlbmQpOwp9OwoKU2xpY2suZmluZCA9IGZ1bmN0aW9uKGNvbnRleHQsIGV4cHJlc3Npb24pewogICAgICAgIHJldHVybiBsb2NhbC5zZWFyY2goY29udGV4dCwgZXhwcmVzc2lvbiwgbnVsbCwgdHJ1ZSk7Cn07CgovLyBTbGljayBjb250YWlubWVudCBjaGVja2VyCgpTbGljay5jb250YWlucyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgbm9kZSl7CiAgICAgICAgbG9jYWwuc2V0RG9jdW1lbnQoY29udGFpbmVyKTsKICAgICAgICByZXR1cm4gbG9jYWwuY29udGFpbnMoY29udGFpbmVyLCBub2RlKTsKfTsKCi8vIFNsaWNrIGF0dHJpYnV0ZSBnZXR0ZXIKClNsaWNrLmdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5vZGUsIG5hbWUpewogICAgICAgIGxvY2FsLnNldERvY3VtZW50KG5vZGUpOwogICAgICAgIHJldHVybiBsb2NhbC5nZXRBdHRyaWJ1dGUobm9kZSwgbmFtZSk7Cn07CgpTbGljay5oYXNBdHRyaWJ1dGUgPSBmdW5jdGlvbihub2RlLCBuYW1lKXsKICAgICAgICBsb2NhbC5zZXREb2N1bWVudChub2RlKTsKICAgICAgICByZXR1cm4gbG9jYWwuaGFzQXR0cmlidXRlKG5vZGUsIG5hbWUpOwp9OwoKLy8gU2xpY2sgbWF0Y2hlcgoKU2xpY2subWF0Y2ggPSBmdW5jdGlvbihub2RlLCBzZWxlY3Rvcil7CiAgICAgICAgaWYgKCEobm9kZSAmJiBzZWxlY3RvcikpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBub2RlKSByZXR1cm4gdHJ1ZTsKICAgICAgICBsb2NhbC5zZXREb2N1bWVudChub2RlKTsKICAgICAgICByZXR1cm4gbG9jYWwubWF0Y2hOb2RlKG5vZGUsIHNlbGVjdG9yKTsKfTsKCi8vIFNsaWNrIGF0dHJpYnV0ZSBhY2Nlc3NvcgoKU2xpY2suZGVmaW5lQXR0cmlidXRlR2V0dGVyID0gZnVuY3Rpb24obmFtZSwgZm4pewogICAgICAgIGxvY2FsLmF0dHJpYnV0ZUdldHRlcnNbbmFtZV0gPSBmbjsKICAgICAgICByZXR1cm4gdGhpczsKfTsKClNsaWNrLmxvb2t1cEF0dHJpYnV0ZUdldHRlciA9IGZ1bmN0aW9uKG5hbWUpewogICAgICAgIHJldHVybiBsb2NhbC5hdHRyaWJ1dGVHZXR0ZXJzW25hbWVdOwp9OwoKLy8gU2xpY2sgcHNldWRvIGFjY2Vzc29yCgpTbGljay5kZWZpbmVQc2V1ZG8gPSBmdW5jdGlvbihuYW1lLCBmbil7CiAgICAgICAgbG9jYWxbJ3BzZXVkbzonICsgbmFtZV0gPSBmdW5jdGlvbihub2RlLCBhcmd1bWVudCl7CiAgICAgICAgICAgICAgICByZXR1cm4gZm4uY2FsbChub2RlLCBhcmd1bWVudCk7CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gdGhpczsKfTsKClNsaWNrLmxvb2t1cFBzZXVkbyA9IGZ1bmN0aW9uKG5hbWUpewogICAgICAgIHZhciBwc2V1ZG8gPSBsb2NhbFsncHNldWRvOicgKyBuYW1lXTsKICAgICAgICBpZiAocHNldWRvKSByZXR1cm4gZnVuY3Rpb24oYXJndW1lbnQpewogICAgICAgICAgICAgICAgcmV0dXJuIHBzZXVkby5jYWxsKHRoaXMsIGFyZ3VtZW50KTsKICAgICAgICB9OwogICAgICAgIHJldHVybiBudWxsOwp9OwoKLy8gU2xpY2sgb3ZlcnJpZGVzIGFjY2Vzc29yCgpTbGljay5vdmVycmlkZSA9IGZ1bmN0aW9uKHJlZ2V4cCwgZm4pewogICAgICAgIGxvY2FsLm92ZXJyaWRlKHJlZ2V4cCwgZm4pOwogICAgICAgIHJldHVybiB0aGlzOwp9OwoKU2xpY2suaXNYTUwgPSBsb2NhbC5pc1hNTDsKClNsaWNrLnVpZE9mID0gZnVuY3Rpb24obm9kZSl7CiAgICAgICAgcmV0dXJuIGxvY2FsLmdldFVJREhUTUwobm9kZSk7Cn07CgppZiAoIXRoaXMuU2xpY2spIHRoaXMuU2xpY2sgPSBTbGljazsKCn0pLmFwcGx5KC8qPENvbW1vbkpTPiovKHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnKSA/IGV4cG9ydHMgOiAvKjwvQ29tbW9uSlM+Ki90aGlzKTsKCgovKgotLS0KCm5hbWU6IEVsZW1lbnQKCmRlc2NyaXB0aW9uOiBPbmUgb2YgdGhlIG1vc3QgaW1wb3J0YW50IGl0ZW1zIGluIE1vb1Rvb2xzLiBDb250YWlucyB0aGUgZG9sbGFyIGZ1bmN0aW9uLCB0aGUgZG9sbGFycyBmdW5jdGlvbiwgYW5kIGFuIGhhbmRmdWwgb2YgY3Jvc3MtYnJvd3NlciwgdGltZS1zYXZlciBtZXRob2RzIHRvIGxldCB5b3UgZWFzaWx5IHdvcmsgd2l0aCBIVE1MIEVsZW1lbnRzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW1dpbmRvdywgRG9jdW1lbnQsIEFycmF5LCBTdHJpbmcsIEZ1bmN0aW9uLCBPYmplY3QsIE51bWJlciwgU2xpY2suUGFyc2VyLCBTbGljay5GaW5kZXJdCgpwcm92aWRlczogW0VsZW1lbnQsIEVsZW1lbnRzLCAkLCAkJCwgSWZyYW1lLCBTZWxlY3RvcnNdCgouLi4KKi8KCnZhciBFbGVtZW50ID0gZnVuY3Rpb24odGFnLCBwcm9wcyl7CiAgICAgICAgdmFyIGtvbnN0cnVjdG9yID0gRWxlbWVudC5Db25zdHJ1Y3RvcnNbdGFnXTsKICAgICAgICBpZiAoa29uc3RydWN0b3IpIHJldHVybiBrb25zdHJ1Y3Rvcihwcm9wcyk7CiAgICAgICAgaWYgKHR5cGVvZiB0YWcgIT0gJ3N0cmluZycpIHJldHVybiBkb2N1bWVudC5pZCh0YWcpLnNldChwcm9wcyk7CgogICAgICAgIGlmICghcHJvcHMpIHByb3BzID0ge307CgogICAgICAgIGlmICghKC9eW1x3LV0rJC8pLnRlc3QodGFnKSl7CiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gU2xpY2sucGFyc2UodGFnKS5leHByZXNzaW9uc1swXVswXTsKICAgICAgICAgICAgICAgIHRhZyA9IChwYXJzZWQudGFnID09ICcqJykgPyAnZGl2JyA6IHBhcnNlZC50YWc7CiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLmlkICYmIHByb3BzLmlkID09IG51bGwpIHByb3BzLmlkID0gcGFyc2VkLmlkOwoKICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gcGFyc2VkLmF0dHJpYnV0ZXM7CiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlcykgZm9yICh2YXIgYXR0ciwgaSA9IDAsIGwgPSBhdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSBhdHRyaWJ1dGVzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHNbYXR0ci5rZXldICE9IG51bGwpIGNvbnRpbnVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHIudmFsdWUgIT0gbnVsbCAmJiBhdHRyLm9wZXJhdG9yID09ICc9JykgcHJvcHNbYXR0ci5rZXldID0gYXR0ci52YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWF0dHIudmFsdWUgJiYgIWF0dHIub3BlcmF0b3IpIHByb3BzW2F0dHIua2V5XSA9IHRydWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHBhcnNlZC5jbGFzc0xpc3QgJiYgcHJvcHNbJ2NsYXNzJ10gPT0gbnVsbCkgcHJvcHNbJ2NsYXNzJ10gPSBwYXJzZWQuY2xhc3NMaXN0LmpvaW4oJyAnKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBkb2N1bWVudC5uZXdFbGVtZW50KHRhZywgcHJvcHMpOwp9OwoKCmlmIChCcm93c2VyLkVsZW1lbnQpewogICAgICAgIEVsZW1lbnQucHJvdG90eXBlID0gQnJvd3Nlci5FbGVtZW50LnByb3RvdHlwZTsKICAgICAgICAvLyBJRTggYW5kIElFOSByZXF1aXJlIHRoZSB3cmFwcGluZy4KICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5fZmlyZUV2ZW50ID0gKGZ1bmN0aW9uKGZpcmVFdmVudCl7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odHlwZSwgZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlyZUV2ZW50LmNhbGwodGhpcywgdHlwZSwgZXZlbnQpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICB9KShFbGVtZW50LnByb3RvdHlwZS5maXJlRXZlbnQpOwp9CgpuZXcgVHlwZSgnRWxlbWVudCcsIEVsZW1lbnQpLm1pcnJvcihmdW5jdGlvbihuYW1lKXsKICAgICAgICBpZiAoQXJyYXkucHJvdG90eXBlW25hbWVdKSByZXR1cm47CgogICAgICAgIHZhciBvYmogPSB7fTsKICAgICAgICBvYmpbbmFtZV0gPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBbXSwgYXJncyA9IGFyZ3VtZW50cywgZWxlbWVudHMgPSB0cnVlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpc1tpXSwgcmVzdWx0ID0gcmVzdWx0c1tpXSA9IGVsZW1lbnRbbmFtZV0uYXBwbHkoZWxlbWVudCwgYXJncyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzID0gKGVsZW1lbnRzICYmIHR5cGVPZihyZXN1bHQpID09ICdlbGVtZW50Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gKGVsZW1lbnRzKSA/IG5ldyBFbGVtZW50cyhyZXN1bHRzKSA6IHJlc3VsdHM7CiAgICAgICAgfTsKCiAgICAgICAgRWxlbWVudHMuaW1wbGVtZW50KG9iaik7Cn0pOwoKaWYgKCFCcm93c2VyLkVsZW1lbnQpewogICAgICAgIEVsZW1lbnQucGFyZW50ID0gT2JqZWN0OwoKICAgICAgICBFbGVtZW50LlByb3RvdHlwZSA9IHsnJGZhbWlseSc6IEZ1bmN0aW9uLmZyb20oJ2VsZW1lbnQnKS5oaWRlKCl9OwoKICAgICAgICBFbGVtZW50Lm1pcnJvcihmdW5jdGlvbihuYW1lLCBtZXRob2QpewogICAgICAgICAgICAgICAgRWxlbWVudC5Qcm90b3R5cGVbbmFtZV0gPSBtZXRob2Q7CiAgICAgICAgfSk7Cn0KCkVsZW1lbnQuQ29uc3RydWN0b3JzID0ge307CgoKCnZhciBJRnJhbWUgPSBuZXcgVHlwZSgnSUZyYW1lJywgZnVuY3Rpb24oKXsKICAgICAgICB2YXIgcGFyYW1zID0gQXJyYXkubGluayhhcmd1bWVudHMsIHsKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFR5cGUuaXNPYmplY3QsCiAgICAgICAgICAgICAgICBpZnJhbWU6IGZ1bmN0aW9uKG9iail7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAob2JqICE9IG51bGwpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB2YXIgcHJvcHMgPSBwYXJhbXMucHJvcGVydGllcyB8fCB7fSwgaWZyYW1lOwogICAgICAgIGlmIChwYXJhbXMuaWZyYW1lKSBpZnJhbWUgPSBkb2N1bWVudC5pZChwYXJhbXMuaWZyYW1lKTsKICAgICAgICB2YXIgb25sb2FkID0gcHJvcHMub25sb2FkIHx8IGZ1bmN0aW9uKCl7fTsKICAgICAgICBkZWxldGUgcHJvcHMub25sb2FkOwogICAgICAgIHByb3BzLmlkID0gcHJvcHMubmFtZSA9IFtwcm9wcy5pZCwgcHJvcHMubmFtZSwgaWZyYW1lID8gKGlmcmFtZS5pZCB8fCBpZnJhbWUubmFtZSkgOiAnSUZyYW1lXycgKyBTdHJpbmcudW5pcXVlSUQoKV0ucGljaygpOwogICAgICAgIGlmcmFtZSA9IG5ldyBFbGVtZW50KGlmcmFtZSB8fCAnaWZyYW1lJywgcHJvcHMpOwoKICAgICAgICB2YXIgb25Mb2FkID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIG9ubG9hZC5jYWxsKGlmcmFtZS5jb250ZW50V2luZG93KTsKICAgICAgICB9OwoKICAgICAgICBpZiAod2luZG93LmZyYW1lc1twcm9wcy5pZF0pIG9uTG9hZCgpOwogICAgICAgIGVsc2UgaWZyYW1lLmFkZExpc3RlbmVyKCdsb2FkJywgb25Mb2FkKTsKICAgICAgICByZXR1cm4gaWZyYW1lOwp9KTsKCnZhciBFbGVtZW50cyA9IHRoaXMuRWxlbWVudHMgPSBmdW5jdGlvbihub2Rlcyl7CiAgICAgICAgaWYgKG5vZGVzICYmIG5vZGVzLmxlbmd0aCl7CiAgICAgICAgICAgICAgICB2YXIgdW5pcXVlcyA9IHt9LCBub2RlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IG5vZGUgPSBub2Rlc1tpKytdOyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1aWQgPSBTbGljay51aWRPZihub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1bmlxdWVzW3VpZF0pewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZXNbdWlkXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoKG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQp9OwoKRWxlbWVudHMucHJvdG90eXBlID0ge2xlbmd0aDogMH07CkVsZW1lbnRzLnBhcmVudCA9IEFycmF5OwoKbmV3IFR5cGUoJ0VsZW1lbnRzJywgRWxlbWVudHMpLmltcGxlbWVudCh7CgogICAgICAgIGZpbHRlcjogZnVuY3Rpb24oZmlsdGVyLCBiaW5kKXsKICAgICAgICAgICAgICAgIGlmICghZmlsdGVyKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRWxlbWVudHMoQXJyYXkuZmlsdGVyKHRoaXMsICh0eXBlT2YoZmlsdGVyKSA9PSAnc3RyaW5nJykgPyBmdW5jdGlvbihpdGVtKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubWF0Y2goZmlsdGVyKTsKICAgICAgICAgICAgICAgIH0gOiBmaWx0ZXIsIGJpbmQpKTsKICAgICAgICB9LnByb3RlY3QoKSwKCiAgICAgICAgcHVzaDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gZG9jdW1lbnQuaWQoYXJndW1lbnRzW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHRoaXNbbGVuZ3RoKytdID0gaXRlbTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5sZW5ndGggPSBsZW5ndGgpOwogICAgICAgIH0ucHJvdGVjdCgpLAoKICAgICAgICB1bnNoaWZ0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGRvY3VtZW50LmlkKGFyZ3VtZW50c1tpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtKSBpdGVtcy5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KHRoaXMsIGl0ZW1zKTsKICAgICAgICB9LnByb3RlY3QoKSwKCiAgICAgICAgY29uY2F0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIG5ld0VsZW1lbnRzID0gbmV3IEVsZW1lbnRzKHRoaXMpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBhcmd1bWVudHNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUeXBlLmlzRW51bWVyYWJsZShpdGVtKSkgbmV3RWxlbWVudHMuYXBwZW5kKGl0ZW0pOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIG5ld0VsZW1lbnRzLnB1c2goaXRlbSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3RWxlbWVudHM7CiAgICAgICAgfS5wcm90ZWN0KCksCgogICAgICAgIGFwcGVuZDogZnVuY3Rpb24oY29sbGVjdGlvbil7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNvbGxlY3Rpb24ubGVuZ3RoOyBpIDwgbDsgaSsrKSB0aGlzLnB1c2goY29sbGVjdGlvbltpXSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LnByb3RlY3QoKSwKCiAgICAgICAgZW1wdHk6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5sZW5ndGgpIGRlbGV0ZSB0aGlzWy0tdGhpcy5sZW5ndGhdOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfS5wcm90ZWN0KCkKCn0pOwoKCgooZnVuY3Rpb24oKXsKCi8vIEZGLCBJRQp2YXIgc3BsaWNlID0gQXJyYXkucHJvdG90eXBlLnNwbGljZSwgb2JqZWN0ID0geycwJzogMCwgJzEnOiAxLCBsZW5ndGg6IDJ9OwoKc3BsaWNlLmNhbGwob2JqZWN0LCAxLCAxKTsKaWYgKG9iamVjdFsxXSA9PSAxKSBFbGVtZW50cy5pbXBsZW1lbnQoJ3NwbGljZScsIGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoOwogICAgICAgIHZhciByZXN1bHQgPSBzcGxpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB3aGlsZSAobGVuZ3RoID49IHRoaXMubGVuZ3RoKSBkZWxldGUgdGhpc1tsZW5ndGgtLV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKfS5wcm90ZWN0KCkpOwoKRWxlbWVudHMuaW1wbGVtZW50KEFycmF5LnByb3RvdHlwZSk7CgpBcnJheS5taXJyb3IoRWxlbWVudHMpOwoKLyo8bHRJRTg+Ki8KdmFyIGNyZWF0ZUVsZW1lbnRBY2NlcHRzSFRNTDsKdHJ5IHsKICAgICAgICB2YXIgeCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJzxpbnB1dCBuYW1lPXg+Jyk7CiAgICAgICAgY3JlYXRlRWxlbWVudEFjY2VwdHNIVE1MID0gKHgubmFtZSA9PSAneCcpOwp9IGNhdGNoKGUpe30KCnZhciBlc2NhcGVRdW90ZXMgPSBmdW5jdGlvbihodG1sKXsKICAgICAgICByZXR1cm4gKCcnICsgaHRtbCkucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC8iL2csICcmcXVvdDsnKTsKfTsKLyo8L2x0SUU4PiovCgpEb2N1bWVudC5pbXBsZW1lbnQoewoKICAgICAgICBuZXdFbGVtZW50OiBmdW5jdGlvbih0YWcsIHByb3BzKXsKICAgICAgICAgICAgICAgIGlmIChwcm9wcyAmJiBwcm9wcy5jaGVja2VkICE9IG51bGwpIHByb3BzLmRlZmF1bHRDaGVja2VkID0gcHJvcHMuY2hlY2tlZDsKICAgICAgICAgICAgICAgIC8qPGx0SUU4PiovLy8gRml4IGZvciByZWFkb25seSBuYW1lIGFuZCB0eXBlIHByb3BlcnRpZXMgaW4gSUUgPCA4CiAgICAgICAgICAgICAgICBpZiAoY3JlYXRlRWxlbWVudEFjY2VwdHNIVE1MICYmIHByb3BzKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGFnID0gJzwnICsgdGFnOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMubmFtZSkgdGFnICs9ICcgbmFtZT0iJyArIGVzY2FwZVF1b3Rlcyhwcm9wcy5uYW1lKSArICciJzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLnR5cGUpIHRhZyArPSAnIHR5cGU9IicgKyBlc2NhcGVRdW90ZXMocHJvcHMudHlwZSkgKyAnIic7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhZyArPSAnPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwcm9wcy5uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcHJvcHMudHlwZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qPC9sdElFOD4qLwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaWQodGhpcy5jcmVhdGVFbGVtZW50KHRhZykpLnNldChwcm9wcyk7CiAgICAgICAgfQoKfSk7Cgp9KSgpOwoKKGZ1bmN0aW9uKCl7CgpTbGljay51aWRPZih3aW5kb3cpOwpTbGljay51aWRPZihkb2N1bWVudCk7CgpEb2N1bWVudC5pbXBsZW1lbnQoewoKICAgICAgICBuZXdUZXh0Tm9kZTogZnVuY3Rpb24odGV4dCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTsKICAgICAgICB9LAoKICAgICAgICBnZXREb2N1bWVudDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGdldFdpbmRvdzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndpbmRvdzsKICAgICAgICB9LAoKICAgICAgICBpZDogKGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgdmFyIHR5cGVzID0gewoKICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nOiBmdW5jdGlvbihpZCwgbm9jYXNoLCBkb2MpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gU2xpY2suZmluZChkb2MsICcjJyArIGlkLnJlcGxhY2UoLyhcVykvZywgJ1xcJDEnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpZCkgPyB0eXBlcy5lbGVtZW50KGlkLCBub2Nhc2gpIDogbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGZ1bmN0aW9uKGVsLCBub2Nhc2gpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNsaWNrLnVpZE9mKGVsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vY2FzaCAmJiAhZWwuJGZhbWlseSAmJiAhKC9eKD86b2JqZWN0fGVtYmVkKSQvaSkudGVzdChlbC50YWdOYW1lKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5fZmlyZUV2ZW50ID0gZWwuZmlyZUV2ZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFwcGVuZChlbCwgRWxlbWVudC5Qcm90b3R5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IGZ1bmN0aW9uKG9iaiwgbm9jYXNoLCBkb2MpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudG9FbGVtZW50KSByZXR1cm4gdHlwZXMuZWxlbWVudChvYmoudG9FbGVtZW50KGRvYyksIG5vY2FzaCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHR5cGVzLnRleHRub2RlID0gdHlwZXMud2hpdGVzcGFjZSA9IHR5cGVzLndpbmRvdyA9IHR5cGVzLmRvY3VtZW50ID0gZnVuY3Rpb24oemVybyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWwsIG5vY2FzaCwgZG9jKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsICYmIGVsLiRmYW1pbHkgJiYgZWwudW5pcXVlTnVtYmVyKSByZXR1cm4gZWw7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZU9mKGVsKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlc1t0eXBlXSkgPyB0eXBlc1t0eXBlXShlbCwgbm9jYXNoLCBkb2MgfHwgZG9jdW1lbnQpIDogbnVsbDsKICAgICAgICAgICAgICAgIH07CgogICAgICAgIH0pKCkKCn0pOwoKaWYgKHdpbmRvdy4kID09IG51bGwpIFdpbmRvdy5pbXBsZW1lbnQoJyQnLCBmdW5jdGlvbihlbCwgbmMpewogICAgICAgIHJldHVybiBkb2N1bWVudC5pZChlbCwgbmMsIHRoaXMuZG9jdW1lbnQpOwp9KTsKCldpbmRvdy5pbXBsZW1lbnQoewoKICAgICAgICBnZXREb2N1bWVudDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50OwogICAgICAgIH0sCgogICAgICAgIGdldFdpbmRvdzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKW0RvY3VtZW50LCBFbGVtZW50XS5pbnZva2UoJ2ltcGxlbWVudCcsIHsKCiAgICAgICAgZ2V0RWxlbWVudHM6IGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgICAgICAgICAgcmV0dXJuIFNsaWNrLnNlYXJjaCh0aGlzLCBleHByZXNzaW9uLCBuZXcgRWxlbWVudHMpOwogICAgICAgIH0sCgogICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmlkKFNsaWNrLmZpbmQodGhpcywgZXhwcmVzc2lvbikpOwogICAgICAgIH0KCn0pOwoKdmFyIGNvbnRhaW5zID0ge2NvbnRhaW5zOiBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICByZXR1cm4gU2xpY2suY29udGFpbnModGhpcywgZWxlbWVudCk7Cn19OwoKaWYgKCFkb2N1bWVudC5jb250YWlucykgRG9jdW1lbnQuaW1wbGVtZW50KGNvbnRhaW5zKTsKaWYgKCFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5jb250YWlucykgRWxlbWVudC5pbXBsZW1lbnQoY29udGFpbnMpOwoKCgovLyB0cmVlIHdhbGtpbmcKCnZhciBpbmplY3RDb21iaW5hdG9yID0gZnVuY3Rpb24oZXhwcmVzc2lvbiwgY29tYmluYXRvcil7CiAgICAgICAgaWYgKCFleHByZXNzaW9uKSByZXR1cm4gY29tYmluYXRvcjsKCiAgICAgICAgZXhwcmVzc2lvbiA9IE9iamVjdC5jbG9uZShTbGljay5wYXJzZShleHByZXNzaW9uKSk7CgogICAgICAgIHZhciBleHByZXNzaW9ucyA9IGV4cHJlc3Npb24uZXhwcmVzc2lvbnM7CiAgICAgICAgZm9yICh2YXIgaSA9IGV4cHJlc3Npb25zLmxlbmd0aDsgaS0tOykKICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zW2ldWzBdLmNvbWJpbmF0b3IgPSBjb21iaW5hdG9yOwoKICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjsKfTsKCk9iamVjdC5mb3JFYWNoKHsKICAgICAgICBnZXROZXh0OiAnficsCiAgICAgICAgZ2V0UHJldmlvdXM6ICchficsCiAgICAgICAgZ2V0UGFyZW50OiAnIScKfSwgZnVuY3Rpb24oY29tYmluYXRvciwgbWV0aG9kKXsKICAgICAgICBFbGVtZW50LmltcGxlbWVudChtZXRob2QsIGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudChpbmplY3RDb21iaW5hdG9yKGV4cHJlc3Npb24sIGNvbWJpbmF0b3IpKTsKICAgICAgICB9KTsKfSk7CgpPYmplY3QuZm9yRWFjaCh7CiAgICAgICAgZ2V0QWxsTmV4dDogJ34nLAogICAgICAgIGdldEFsbFByZXZpb3VzOiAnIX4nLAogICAgICAgIGdldFNpYmxpbmdzOiAnfn4nLAogICAgICAgIGdldENoaWxkcmVuOiAnPicsCiAgICAgICAgZ2V0UGFyZW50czogJyEnCn0sIGZ1bmN0aW9uKGNvbWJpbmF0b3IsIG1ldGhvZCl7CiAgICAgICAgRWxlbWVudC5pbXBsZW1lbnQobWV0aG9kLCBmdW5jdGlvbihleHByZXNzaW9uKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnRzKGluamVjdENvbWJpbmF0b3IoZXhwcmVzc2lvbiwgY29tYmluYXRvcikpOwogICAgICAgIH0pOwp9KTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCiAgICAgICAgZ2V0Rmlyc3Q6IGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmlkKFNsaWNrLnNlYXJjaCh0aGlzLCBpbmplY3RDb21iaW5hdG9yKGV4cHJlc3Npb24sICc+JykpWzBdKTsKICAgICAgICB9LAoKICAgICAgICBnZXRMYXN0OiBmdW5jdGlvbihleHByZXNzaW9uKXsKICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5pZChTbGljay5zZWFyY2godGhpcywgaW5qZWN0Q29tYmluYXRvcihleHByZXNzaW9uLCAnPicpKS5nZXRMYXN0KCkpOwogICAgICAgIH0sCgogICAgICAgIGdldFdpbmRvdzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQud2luZG93OwogICAgICAgIH0sCgogICAgICAgIGdldERvY3VtZW50OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudDsKICAgICAgICB9LAoKICAgICAgICBnZXRFbGVtZW50QnlJZDogZnVuY3Rpb24oaWQpewogICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmlkKFNsaWNrLmZpbmQodGhpcywgJyMnICsgKCcnICsgaWQpLnJlcGxhY2UoLyhcVykvZywgJ1xcJDEnKSkpOwogICAgICAgIH0sCgogICAgICAgIG1hdGNoOiBmdW5jdGlvbihleHByZXNzaW9uKXsKICAgICAgICAgICAgICAgIHJldHVybiAhZXhwcmVzc2lvbiB8fCBTbGljay5tYXRjaCh0aGlzLCBleHByZXNzaW9uKTsKICAgICAgICB9Cgp9KTsKCgoKaWYgKHdpbmRvdy4kJCA9PSBudWxsKSBXaW5kb3cuaW1wbGVtZW50KCckJCcsIGZ1bmN0aW9uKHNlbGVjdG9yKXsKICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKXsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT0gJ3N0cmluZycpIHJldHVybiBTbGljay5zZWFyY2godGhpcy5kb2N1bWVudCwgc2VsZWN0b3IsIG5ldyBFbGVtZW50cyk7CiAgICAgICAgICAgICAgICBlbHNlIGlmIChUeXBlLmlzRW51bWVyYWJsZShzZWxlY3RvcikpIHJldHVybiBuZXcgRWxlbWVudHMoc2VsZWN0b3IpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEVsZW1lbnRzKGFyZ3VtZW50cyk7Cn0pOwoKLy8gSW5zZXJ0ZXJzCgp2YXIgaW5zZXJ0ZXJzID0gewoKICAgICAgICBiZWZvcmU6IGZ1bmN0aW9uKGNvbnRleHQsIGVsZW1lbnQpewogICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIGlmIChwYXJlbnQpIHBhcmVudC5pbnNlcnRCZWZvcmUoY29udGV4dCwgZWxlbWVudCk7CiAgICAgICAgfSwKCiAgICAgICAgYWZ0ZXI6IGZ1bmN0aW9uKGNvbnRleHQsIGVsZW1lbnQpewogICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIGlmIChwYXJlbnQpIHBhcmVudC5pbnNlcnRCZWZvcmUoY29udGV4dCwgZWxlbWVudC5uZXh0U2libGluZyk7CiAgICAgICAgfSwKCiAgICAgICAgYm90dG9tOiBmdW5jdGlvbihjb250ZXh0LCBlbGVtZW50KXsKICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGV4dCk7CiAgICAgICAgfSwKCiAgICAgICAgdG9wOiBmdW5jdGlvbihjb250ZXh0LCBlbGVtZW50KXsKICAgICAgICAgICAgICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNvbnRleHQsIGVsZW1lbnQuZmlyc3RDaGlsZCk7CiAgICAgICAgfQoKfTsKCmluc2VydGVycy5pbnNpZGUgPSBpbnNlcnRlcnMuYm90dG9tOwoKCgovLyBnZXRQcm9wZXJ0eSAvIHNldFByb3BlcnR5Cgp2YXIgcHJvcGVydHlHZXR0ZXJzID0ge30sIHByb3BlcnR5U2V0dGVycyA9IHt9OwoKLy8gcHJvcGVydGllcwoKdmFyIHByb3BlcnRpZXMgPSB7fTsKQXJyYXkuZm9yRWFjaChbCiAgICAgICAgJ3R5cGUnLCAndmFsdWUnLCAnZGVmYXVsdFZhbHVlJywgJ2FjY2Vzc0tleScsICdjZWxsUGFkZGluZycsICdjZWxsU3BhY2luZycsICdjb2xTcGFuJywKICAgICAgICAnZnJhbWVCb3JkZXInLCAncm93U3BhbicsICd0YWJJbmRleCcsICd1c2VNYXAnCl0sIGZ1bmN0aW9uKHByb3BlcnR5KXsKICAgICAgICBwcm9wZXJ0aWVzW3Byb3BlcnR5LnRvTG93ZXJDYXNlKCldID0gcHJvcGVydHk7Cn0pOwoKT2JqZWN0LmFwcGVuZChwcm9wZXJ0aWVzLCB7CiAgICAgICAgJ2h0bWwnOiAnaW5uZXJIVE1MJywKICAgICAgICAndGV4dCc6IChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgIHJldHVybiAodGVtcC50ZXh0Q29udGVudCA9PSBudWxsKSA/ICdpbm5lclRleHQnOiAndGV4dENvbnRlbnQnOwogICAgICAgIH0pKCkKfSk7CgpPYmplY3QuZm9yRWFjaChwcm9wZXJ0aWVzLCBmdW5jdGlvbihyZWFsLCBrZXkpewogICAgICAgIHByb3BlcnR5U2V0dGVyc1trZXldID0gZnVuY3Rpb24obm9kZSwgdmFsdWUpewogICAgICAgICAgICAgICAgbm9kZVtyZWFsXSA9IHZhbHVlOwogICAgICAgIH07CiAgICAgICAgcHJvcGVydHlHZXR0ZXJzW2tleV0gPSBmdW5jdGlvbihub2RlKXsKICAgICAgICAgICAgICAgIHJldHVybiBub2RlW3JlYWxdOwogICAgICAgIH07Cn0pOwoKLy8gQm9vbGVhbnMKCnZhciBib29scyA9IFsKICAgICAgICAnY29tcGFjdCcsICdub3dyYXAnLCAnaXNtYXAnLCAnZGVjbGFyZScsICdub3NoYWRlJywgJ2NoZWNrZWQnLAogICAgICAgICdkaXNhYmxlZCcsICdyZWFkT25seScsICdtdWx0aXBsZScsICdzZWxlY3RlZCcsICdub3Jlc2l6ZScsCiAgICAgICAgJ2RlZmVyJywgJ2RlZmF1bHRDaGVja2VkJywgJ2F1dG9mb2N1cycsICdjb250cm9scycsICdhdXRvcGxheScsCiAgICAgICAgJ2xvb3AnCl07Cgp2YXIgYm9vbGVhbnMgPSB7fTsKQXJyYXkuZm9yRWFjaChib29scywgZnVuY3Rpb24oYm9vbCl7CiAgICAgICAgdmFyIGxvd2VyID0gYm9vbC50b0xvd2VyQ2FzZSgpOwogICAgICAgIGJvb2xlYW5zW2xvd2VyXSA9IGJvb2w7CiAgICAgICAgcHJvcGVydHlTZXR0ZXJzW2xvd2VyXSA9IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKXsKICAgICAgICAgICAgICAgIG5vZGVbYm9vbF0gPSAhIXZhbHVlOwogICAgICAgIH07CiAgICAgICAgcHJvcGVydHlHZXR0ZXJzW2xvd2VyXSA9IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuICEhbm9kZVtib29sXTsKICAgICAgICB9Owp9KTsKCi8vIFNwZWNpYWwgY2FzZXMKCk9iamVjdC5hcHBlbmQocHJvcGVydHlTZXR0ZXJzLCB7CgogICAgICAgICdjbGFzcyc6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKXsKICAgICAgICAgICAgICAgICgnY2xhc3NOYW1lJyBpbiBub2RlKSA/IG5vZGUuY2xhc3NOYW1lID0gKHZhbHVlIHx8ICcnKSA6IG5vZGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIHZhbHVlKTsKICAgICAgICB9LAoKICAgICAgICAnZm9yJzogZnVuY3Rpb24obm9kZSwgdmFsdWUpewogICAgICAgICAgICAgICAgKCdodG1sRm9yJyBpbiBub2RlKSA/IG5vZGUuaHRtbEZvciA9IHZhbHVlIDogbm9kZS5zZXRBdHRyaWJ1dGUoJ2ZvcicsIHZhbHVlKTsKICAgICAgICB9LAoKICAgICAgICAnc3R5bGUnOiBmdW5jdGlvbihub2RlLCB2YWx1ZSl7CiAgICAgICAgICAgICAgICAobm9kZS5zdHlsZSkgPyBub2RlLnN0eWxlLmNzc1RleHQgPSB2YWx1ZSA6IG5vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsIHZhbHVlKTsKICAgICAgICB9LAoKICAgICAgICAndmFsdWUnOiBmdW5jdGlvbihub2RlLCB2YWx1ZSl7CiAgICAgICAgICAgICAgICBub2RlLnZhbHVlID0gdmFsdWUgfHwgJyc7CiAgICAgICAgfQoKfSk7Cgpwcm9wZXJ0eUdldHRlcnNbJ2NsYXNzJ10gPSBmdW5jdGlvbihub2RlKXsKICAgICAgICByZXR1cm4gKCdjbGFzc05hbWUnIGluIG5vZGUpID8gbm9kZS5jbGFzc05hbWUgfHwgbnVsbCA6IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpOwp9OwoKLyogPHdlYmtpdD4gKi8KdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7Ci8vIElFIHNldHMgdHlwZSBhcyByZWFkb25seSBhbmQgdGhyb3dzCnRyeSB7IGVsLnR5cGUgPSAnYnV0dG9uJzsgfSBjYXRjaChlKXt9CmlmIChlbC50eXBlICE9ICdidXR0b24nKSBwcm9wZXJ0eVNldHRlcnMudHlwZSA9IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKXsKICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgndHlwZScsIHZhbHVlKTsKfTsKLyogPC93ZWJraXQ+ICovCgovKiBnZXRQcm9wZXJ0eSwgc2V0UHJvcGVydHkgKi8KCkVsZW1lbnQuaW1wbGVtZW50KHsKCiAgICAgICAgc2V0UHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXsKICAgICAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eVNldHRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXTsKICAgICAgICAgICAgICAgIGlmIChzZXR0ZXIpewogICAgICAgICAgICAgICAgICAgICAgICBzZXR0ZXIodGhpcywgdmFsdWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHNldFByb3BlcnRpZXM6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMpewogICAgICAgICAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlIGluIGF0dHJpYnV0ZXMpIHRoaXMuc2V0UHJvcGVydHkoYXR0cmlidXRlLCBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUpewogICAgICAgICAgICAgICAgdmFyIGdldHRlciA9IHByb3BlcnR5R2V0dGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldOwogICAgICAgICAgICAgICAgaWYgKGdldHRlcikgcmV0dXJuIGdldHRlcih0aGlzKTsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBTbGljay5nZXRBdHRyaWJ1dGUodGhpcywgbmFtZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gKCFyZXN1bHQgJiYgIVNsaWNrLmhhc0F0dHJpYnV0ZSh0aGlzLCBuYW1lKSkgPyBudWxsIDogcmVzdWx0OwogICAgICAgIH0sCgogICAgICAgIGdldFByb3BlcnRpZXM6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIHJldHVybiBhcmdzLm1hcCh0aGlzLmdldFByb3BlcnR5LCB0aGlzKS5hc3NvY2lhdGUoYXJncyk7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlUHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0UHJvcGVydHkobmFtZSwgbnVsbCk7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlUHJvcGVydGllczogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIEFycmF5LmVhY2goYXJndW1lbnRzLCB0aGlzLnJlbW92ZVByb3BlcnR5LCB0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHNldDogZnVuY3Rpb24ocHJvcCwgdmFsdWUpewogICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gRWxlbWVudC5Qcm9wZXJ0aWVzW3Byb3BdOwogICAgICAgICAgICAgICAgKHByb3BlcnR5ICYmIHByb3BlcnR5LnNldCkgPyBwcm9wZXJ0eS5zZXQuY2FsbCh0aGlzLCB2YWx1ZSkgOiB0aGlzLnNldFByb3BlcnR5KHByb3AsIHZhbHVlKTsKICAgICAgICB9Lm92ZXJsb2FkU2V0dGVyKCksCgogICAgICAgIGdldDogZnVuY3Rpb24ocHJvcCl7CiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBFbGVtZW50LlByb3BlcnRpZXNbcHJvcF07CiAgICAgICAgICAgICAgICByZXR1cm4gKHByb3BlcnR5ICYmIHByb3BlcnR5LmdldCkgPyBwcm9wZXJ0eS5nZXQuYXBwbHkodGhpcykgOiB0aGlzLmdldFByb3BlcnR5KHByb3ApOwogICAgICAgIH0ub3ZlcmxvYWRHZXR0ZXIoKSwKCiAgICAgICAgZXJhc2U6IGZ1bmN0aW9uKHByb3ApewogICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gRWxlbWVudC5Qcm9wZXJ0aWVzW3Byb3BdOwogICAgICAgICAgICAgICAgKHByb3BlcnR5ICYmIHByb3BlcnR5LmVyYXNlKSA/IHByb3BlcnR5LmVyYXNlLmFwcGx5KHRoaXMpIDogdGhpcy5yZW1vdmVQcm9wZXJ0eShwcm9wKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbihjbGFzc05hbWUpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3NOYW1lLmNsZWFuKCkuY29udGFpbnMoY2xhc3NOYW1lLCAnICcpOwogICAgICAgIH0sCgogICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbihjbGFzc05hbWUpewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0NsYXNzKGNsYXNzTmFtZSkpIHRoaXMuY2xhc3NOYW1lID0gKHRoaXMuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lKS5jbGVhbigpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSl7CiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxzKScgKyBjbGFzc05hbWUgKyAnKD86XFxzfCQpJyksICckMScpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSwgZm9yY2UpewogICAgICAgICAgICAgICAgaWYgKGZvcmNlID09IG51bGwpIGZvcmNlID0gIXRoaXMuaGFzQ2xhc3MoY2xhc3NOYW1lKTsKICAgICAgICAgICAgICAgIHJldHVybiAoZm9yY2UpID8gdGhpcy5hZGRDbGFzcyhjbGFzc05hbWUpIDogdGhpcy5yZW1vdmVDbGFzcyhjbGFzc05hbWUpOwogICAgICAgIH0sCgogICAgICAgIGFkb3B0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMsIGZyYWdtZW50LCBlbGVtZW50cyA9IEFycmF5LmZsYXR0ZW4oYXJndW1lbnRzKSwgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA+IDEpIHBhcmVudCA9IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmlkKGVsZW1lbnRzW2ldLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtZW50KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoZnJhZ21lbnQpIHRoaXMuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpOwoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGFwcGVuZFRleHQ6IGZ1bmN0aW9uKHRleHQsIHdoZXJlKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWIodGhpcy5nZXREb2N1bWVudCgpLm5ld1RleHROb2RlKHRleHQpLCB3aGVyZSk7CiAgICAgICAgfSwKCiAgICAgICAgZ3JhYjogZnVuY3Rpb24oZWwsIHdoZXJlKXsKICAgICAgICAgICAgICAgIGluc2VydGVyc1t3aGVyZSB8fCAnYm90dG9tJ10oZG9jdW1lbnQuaWQoZWwsIHRydWUpLCB0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGluamVjdDogZnVuY3Rpb24oZWwsIHdoZXJlKXsKICAgICAgICAgICAgICAgIGluc2VydGVyc1t3aGVyZSB8fCAnYm90dG9tJ10odGhpcywgZG9jdW1lbnQuaWQoZWwsIHRydWUpKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlcGxhY2VzOiBmdW5jdGlvbihlbCl7CiAgICAgICAgICAgICAgICBlbCA9IGRvY3VtZW50LmlkKGVsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHRoaXMsIGVsKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHdyYXBzOiBmdW5jdGlvbihlbCwgd2hlcmUpewogICAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5pZChlbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlcyhlbCkuZ3JhYihlbCwgd2hlcmUpOwogICAgICAgIH0sCgogICAgICAgIGdldFNlbGVjdGVkOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4OyAvLyBTYWZhcmkgMy4yLjEKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRWxlbWVudHMoQXJyYXkuZnJvbSh0aGlzLm9wdGlvbnMpLmZpbHRlcihmdW5jdGlvbihvcHRpb24pewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uLnNlbGVjdGVkOwogICAgICAgICAgICAgICAgfSkpOwogICAgICAgIH0sCgogICAgICAgIHRvUXVlcnlTdHJpbmc6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgcXVlcnlTdHJpbmcgPSBbXTsKICAgICAgICAgICAgICAgIHRoaXMuZ2V0RWxlbWVudHMoJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhJykuZWFjaChmdW5jdGlvbihlbCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZWwudHlwZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlbC5uYW1lIHx8IGVsLmRpc2FibGVkIHx8IHR5cGUgPT0gJ3N1Ym1pdCcgfHwgdHlwZSA9PSAncmVzZXQnIHx8IHR5cGUgPT0gJ2ZpbGUnIHx8IHR5cGUgPT0gJ2ltYWdlJykgcmV0dXJuOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gKGVsLmdldCgndGFnJykgPT0gJ3NlbGVjdCcpID8gZWwuZ2V0U2VsZWN0ZWQoKS5tYXAoZnVuY3Rpb24ob3B0KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJRQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5pZChvcHQpLmdldCgndmFsdWUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiAoKHR5cGUgPT0gJ3JhZGlvJyB8fCB0eXBlID09ICdjaGVja2JveCcpICYmICFlbC5jaGVja2VkKSA/IG51bGwgOiBlbC5nZXQoJ3ZhbHVlJyk7CgogICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKHZhbHVlKS5lYWNoKGZ1bmN0aW9uKHZhbCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgIT0gJ3VuZGVmaW5lZCcpIHF1ZXJ5U3RyaW5nLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGVsLm5hbWUpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5U3RyaW5nLmpvaW4oJyYnKTsKICAgICAgICB9Cgp9KTsKCnZhciBjb2xsZWN0ZWQgPSB7fSwgc3RvcmFnZSA9IHt9OwoKdmFyIGdldCA9IGZ1bmN0aW9uKHVpZCl7CiAgICAgICAgcmV0dXJuIChzdG9yYWdlW3VpZF0gfHwgKHN0b3JhZ2VbdWlkXSA9IHt9KSk7Cn07Cgp2YXIgY2xlYW4gPSBmdW5jdGlvbihpdGVtKXsKICAgICAgICB2YXIgdWlkID0gaXRlbS51aWQ7CiAgICAgICAgaWYgKGl0ZW0ucmVtb3ZlRXZlbnRzKSBpdGVtLnJlbW92ZUV2ZW50cygpOwogICAgICAgIGlmIChpdGVtLmNsZWFyQXR0cmlidXRlcykgaXRlbS5jbGVhckF0dHJpYnV0ZXMoKTsKICAgICAgICBpZiAodWlkICE9IG51bGwpewogICAgICAgICAgICAgICAgZGVsZXRlIGNvbGxlY3RlZFt1aWRdOwogICAgICAgICAgICAgICAgZGVsZXRlIHN0b3JhZ2VbdWlkXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGl0ZW07Cn07Cgp2YXIgZm9ybVByb3BzID0ge2lucHV0OiAnY2hlY2tlZCcsIG9wdGlvbjogJ3NlbGVjdGVkJywgdGV4dGFyZWE6ICd2YWx1ZSd9OwoKRWxlbWVudC5pbXBsZW1lbnQoewoKICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gY2xlYW4odGhpcykuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTsKICAgICAgICAgICAgICAgIEFycmF5LmVhY2goY2hpbGRyZW4sIGNsZWFuKTsKICAgICAgICAgICAgICAgIEVsZW1lbnQuZGlzcG9zZSh0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0sCgogICAgICAgIGVtcHR5OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmNoaWxkTm9kZXMpLmVhY2goRWxlbWVudC5kaXNwb3NlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucGFyZW50Tm9kZSkgPyB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcykgOiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGNsb25lOiBmdW5jdGlvbihjb250ZW50cywga2VlcGlkKXsKICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gY29udGVudHMgIT09IGZhbHNlOwogICAgICAgICAgICAgICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUoY29udGVudHMpLCBjZSA9IFtjbG9uZV0sIHRlID0gW3RoaXNdLCBpOwoKICAgICAgICAgICAgICAgIGlmIChjb250ZW50cyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNlLmFwcGVuZChBcnJheS5mcm9tKGNsb25lLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJykpKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGUuYXBwZW5kKEFycmF5LmZyb20odGhpcy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpKSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZm9yIChpID0gY2UubGVuZ3RoOyBpLS07KXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBjZVtpXSwgZWxlbWVudCA9IHRlW2ldOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWtlZXBpZCkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qPGx0SUU5PiovCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmNsZWFyQXR0cmlidXRlcyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5jbGVhckF0dHJpYnV0ZXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLm1lcmdlQXR0cmlidXRlcyhlbGVtZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgndWlkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUub3B0aW9ucyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm8gPSBub2RlLm9wdGlvbnMsIGVvID0gZWxlbWVudC5vcHRpb25zOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IG5vLmxlbmd0aDsgai0tOykgbm9bal0uc2VsZWN0ZWQgPSBlb1tqXS5zZWxlY3RlZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLyo8L2x0SUU5PiovCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wID0gZm9ybVByb3BzW2VsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgJiYgZWxlbWVudFtwcm9wXSkgbm9kZVtwcm9wXSA9IGVsZW1lbnRbcHJvcF07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLyo8bHRJRTk+Ki8KICAgICAgICAgICAgICAgIGlmIChCcm93c2VyLmllKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvID0gY2xvbmUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ29iamVjdCcpLCB0byA9IHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ29iamVjdCcpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjby5sZW5ndGg7IGktLTspIGNvW2ldLm91dGVySFRNTCA9IHRvW2ldLm91dGVySFRNTDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qPC9sdElFOT4qLwogICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmlkKGNsb25lKTsKICAgICAgICB9Cgp9KTsKCltFbGVtZW50LCBXaW5kb3csIERvY3VtZW50XS5pbnZva2UoJ2ltcGxlbWVudCcsIHsKCiAgICAgICAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uKHR5cGUsIGZuKXsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICd1bmxvYWQnKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZCA9IGZuLCBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgICAgICAgICAgZm4gPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VubG9hZCcsIGZuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZFtTbGljay51aWRPZih0aGlzKV0gPSB0aGlzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkRXZlbnRMaXN0ZW5lcikgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZuLCAhIWFyZ3VtZW50c1syXSk7CiAgICAgICAgICAgICAgICBlbHNlIHRoaXMuYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGZuKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZUxpc3RlbmVyOiBmdW5jdGlvbih0eXBlLCBmbil7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKSB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sICEhYXJndW1lbnRzWzJdKTsKICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5kZXRhY2hFdmVudCgnb24nICsgdHlwZSwgZm4pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgcmV0cmlldmU6IGZ1bmN0aW9uKHByb3BlcnR5LCBkZmx0KXsKICAgICAgICAgICAgICAgIHZhciBzdG9yYWdlID0gZ2V0KFNsaWNrLnVpZE9mKHRoaXMpKSwgcHJvcCA9IHN0b3JhZ2VbcHJvcGVydHldOwogICAgICAgICAgICAgICAgaWYgKGRmbHQgIT0gbnVsbCAmJiBwcm9wID09IG51bGwpIHByb3AgPSBzdG9yYWdlW3Byb3BlcnR5XSA9IGRmbHQ7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcCAhPSBudWxsID8gcHJvcCA6IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgc3RvcmU6IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSl7CiAgICAgICAgICAgICAgICB2YXIgc3RvcmFnZSA9IGdldChTbGljay51aWRPZih0aGlzKSk7CiAgICAgICAgICAgICAgICBzdG9yYWdlW3Byb3BlcnR5XSA9IHZhbHVlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZWxpbWluYXRlOiBmdW5jdGlvbihwcm9wZXJ0eSl7CiAgICAgICAgICAgICAgICB2YXIgc3RvcmFnZSA9IGdldChTbGljay51aWRPZih0aGlzKSk7CiAgICAgICAgICAgICAgICBkZWxldGUgc3RvcmFnZVtwcm9wZXJ0eV07CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCi8qPGx0SUU5PiovCmlmICh3aW5kb3cuYXR0YWNoRXZlbnQgJiYgIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB3aW5kb3cuYWRkTGlzdGVuZXIoJ3VubG9hZCcsIGZ1bmN0aW9uKCl7CiAgICAgICAgT2JqZWN0LmVhY2goY29sbGVjdGVkLCBjbGVhbik7CiAgICAgICAgaWYgKHdpbmRvdy5Db2xsZWN0R2FyYmFnZSkgQ29sbGVjdEdhcmJhZ2UoKTsKfSk7Ci8qPC9sdElFOT4qLwoKRWxlbWVudC5Qcm9wZXJ0aWVzID0ge307CgoKCkVsZW1lbnQuUHJvcGVydGllcy5zdHlsZSA9IHsKCiAgICAgICAgc2V0OiBmdW5jdGlvbihzdHlsZSl7CiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLmNzc1RleHQgPSBzdHlsZTsKICAgICAgICB9LAoKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5jc3NUZXh0OwogICAgICAgIH0sCgogICAgICAgIGVyYXNlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gJyc7CiAgICAgICAgfQoKfTsKCkVsZW1lbnQuUHJvcGVydGllcy50YWcgPSB7CgogICAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhZ05hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICB9Cgp9OwoKLyo8IXdlYmtpdD4qLwpFbGVtZW50LlByb3BlcnRpZXMuaHRtbCA9IChmdW5jdGlvbigpewoKICAgICAgICB2YXIgdGFibGVUZXN0ID0gRnVuY3Rpb24uYXR0ZW1wdChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTsKICAgICAgICAgICAgICAgIHRhYmxlLmlubmVySFRNTCA9ICc8dHI+PHRkPjwvdGQ+PC90cj4nOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoKICAgICAgICB2YXIgdHJhbnNsYXRpb25zID0gewogICAgICAgICAgICAgICAgdGFibGU6IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddLAogICAgICAgICAgICAgICAgc2VsZWN0OiBbMSwgJzxzZWxlY3Q+JywgJzwvc2VsZWN0PiddLAogICAgICAgICAgICAgICAgdGJvZHk6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLAogICAgICAgICAgICAgICAgdHI6IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddCiAgICAgICAgfTsKICAgICAgICB0cmFuc2xhdGlvbnMudGhlYWQgPSB0cmFuc2xhdGlvbnMudGZvb3QgPSB0cmFuc2xhdGlvbnMudGJvZHk7CgogICAgICAgIC8qPGx0SUU5PiovCiAgICAgICAgLy8gdGVjaG5pcXVlIGJ5IGpkYmFybGV0dCAtIGh0dHA6Ly9qZGJhcnRsZXR0LmNvbS9pbm5lcnNoaXYvCiAgICAgICAgd3JhcHBlci5pbm5lckhUTUwgPSAnPG5hdj48L25hdj4nOwogICAgICAgIHZhciBIVE1MNVRlc3QgPSB3cmFwcGVyLmNoaWxkTm9kZXMubGVuZ3RoID09IDE7CiAgICAgICAgaWYgKCFIVE1MNVRlc3QpewogICAgICAgICAgICAgICAgdmFyIHRhZ3MgPSAnYWJiciBhcnRpY2xlIGFzaWRlIGF1ZGlvIGNhbnZhcyBkYXRhbGlzdCBkZXRhaWxzIGZpZ2NhcHRpb24gZmlndXJlIGZvb3RlciBoZWFkZXIgaGdyb3VwIG1hcmsgbWV0ZXIgbmF2IG91dHB1dCBwcm9ncmVzcyBzZWN0aW9uIHN1bW1hcnkgdGltZSB2aWRlbycuc3BsaXQoJyAnKSwKICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIGwgPSB0YWdzLmxlbmd0aDsKICAgICAgICAgICAgICAgIHdoaWxlIChsLS0pIGZyYWdtZW50LmNyZWF0ZUVsZW1lbnQodGFnc1tsXSk7CiAgICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCh3cmFwcGVyKTsKICAgICAgICB9CiAgICAgICAgLyo8L2x0SUU5PiovCgogICAgICAgIHZhciBodG1sID0gewogICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihodG1sKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVPZihodG1sKSA9PSAnYXJyYXknKSBodG1sID0gaHRtbC5qb2luKCcnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3cmFwID0gKCF0YWJsZVRlc3QgJiYgdHJhbnNsYXRpb25zW3RoaXMuZ2V0KCd0YWcnKV0pOwogICAgICAgICAgICAgICAgICAgICAgICAvKjxsdElFOT4qLwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdyYXAgJiYgIUhUTUw1VGVzdCkgd3JhcCA9IFswLCAnJywgJyddOwogICAgICAgICAgICAgICAgICAgICAgICAvKjwvbHRJRTk+Ki8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdyYXApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IHdyYXBwZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QuaW5uZXJIVE1MID0gd3JhcFsxXSArIGh0bWwgKyB3cmFwWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSB3cmFwWzBdOyBpLS07KSBmaXJzdCA9IGZpcnN0LmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbXB0eSgpLmFkb3B0KGZpcnN0LmNoaWxkTm9kZXMpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJIVE1MID0gaHRtbDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGh0bWwuZXJhc2UgPSBodG1sLnNldDsKCiAgICAgICAgcmV0dXJuIGh0bWw7Cn0pKCk7Ci8qPC8hd2Via2l0PiovCgovKjxsdElFOT4qLwp2YXIgdGVzdEZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7CnRlc3RGb3JtLmlubmVySFRNTCA9ICc8c2VsZWN0PjxvcHRpb24+czwvb3B0aW9uPjwvc2VsZWN0Pic7CgppZiAodGVzdEZvcm0uZmlyc3RDaGlsZC52YWx1ZSAhPSAncycpIEVsZW1lbnQuUHJvcGVydGllcy52YWx1ZSA9IHsKCiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgICAgICAgICB2YXIgdGFnID0gdGhpcy5nZXQoJ3RhZycpOwogICAgICAgICAgICAgICAgaWYgKHRhZyAhPSAnc2VsZWN0JykgcmV0dXJuIHRoaXMuc2V0UHJvcGVydHkoJ3ZhbHVlJywgdmFsdWUpOwogICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmdldEVsZW1lbnRzKCdvcHRpb24nKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zW2ldLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSBvcHRpb24uZ2V0QXR0cmlidXRlTm9kZSgndmFsdWUnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25WYWx1ZSA9IChhdHRyICYmIGF0dHIuc3BlY2lmaWVkKSA/IG9wdGlvbi52YWx1ZSA6IG9wdGlvbi5nZXQoJ3RleHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvblZhbHVlID09IHZhbHVlKSByZXR1cm4gb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gdGhpcywgdGFnID0gb3B0aW9uLmdldCgndGFnJyk7CgogICAgICAgICAgICAgICAgaWYgKHRhZyAhPSAnc2VsZWN0JyAmJiB0YWcgIT0gJ29wdGlvbicpIHJldHVybiB0aGlzLmdldFByb3BlcnR5KCd2YWx1ZScpOwoKICAgICAgICAgICAgICAgIGlmICh0YWcgPT0gJ3NlbGVjdCcgJiYgIShvcHRpb24gPSBvcHRpb24uZ2V0U2VsZWN0ZWQoKVswXSkpIHJldHVybiAnJzsKCiAgICAgICAgICAgICAgICB2YXIgYXR0ciA9IG9wdGlvbi5nZXRBdHRyaWJ1dGVOb2RlKCd2YWx1ZScpOwogICAgICAgICAgICAgICAgcmV0dXJuIChhdHRyICYmIGF0dHIuc3BlY2lmaWVkKSA/IG9wdGlvbi52YWx1ZSA6IG9wdGlvbi5nZXQoJ3RleHQnKTsKICAgICAgICB9Cgp9OwovKjwvbHRJRTk+Ki8KCi8qPElFPiovCnZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwppZiAoZWwuZ2V0QXR0cmlidXRlTm9kZSgnaWQnKSkgRWxlbWVudC5Qcm9wZXJ0aWVzLmlkID0gewogICAgICAgIHNldDogZnVuY3Rpb24oaWQpewogICAgICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZSgnaWQnKS52YWx1ZSA9IGlkOwogICAgICAgIH0sCiAgICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaWQgfHwgbnVsbDsKICAgICAgICB9LAogICAgICAgIGVyYXNlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZSgnaWQnKS52YWx1ZSA9ICcnOwogICAgICAgIH0KfTsKLyo8L0lFPiovCgp9KSgpOwoKCi8qCi0tLQoKbmFtZTogRWxlbWVudC5TdHlsZQoKZGVzY3JpcHRpb246IENvbnRhaW5zIG1ldGhvZHMgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIHN0eWxlcyBvZiBFbGVtZW50cyBpbiBhIGZhc2hpb25hYmxlIHdheS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IEVsZW1lbnQKCnByb3ZpZGVzOiBFbGVtZW50LlN0eWxlCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGh0bWwgPSBkb2N1bWVudC5odG1sOwoKRWxlbWVudC5Qcm9wZXJ0aWVzLnN0eWxlcyA9IHtzZXQ6IGZ1bmN0aW9uKHN0eWxlcyl7CiAgICAgICAgdGhpcy5zZXRTdHlsZXMoc3R5bGVzKTsKfX07Cgp2YXIgaGFzT3BhY2l0eSA9IChodG1sLnN0eWxlLm9wYWNpdHkgIT0gbnVsbCksCiAgICAgICAgaGFzRmlsdGVyID0gKGh0bWwuc3R5bGUuZmlsdGVyICE9IG51bGwpLAogICAgICAgIHJlQWxwaGEgPSAvYWxwaGFcKG9wYWNpdHk9KFtcZC5dKylcKS9pOwoKdmFyIHNldFZpc2liaWxpdHkgPSBmdW5jdGlvbihlbGVtZW50LCBvcGFjaXR5KXsKICAgICAgICBlbGVtZW50LnN0b3JlKCckb3BhY2l0eScsIG9wYWNpdHkpOwogICAgICAgIGVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9IG9wYWNpdHkgPiAwID8gJ3Zpc2libGUnIDogJ2hpZGRlbic7Cn07Cgp2YXIgc2V0T3BhY2l0eSA9IChoYXNPcGFjaXR5ID8gZnVuY3Rpb24oZWxlbWVudCwgb3BhY2l0eSl7CiAgICAgICAgZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eTsKfSA6IChoYXNGaWx0ZXIgPyBmdW5jdGlvbihlbGVtZW50LCBvcGFjaXR5KXsKICAgICAgICBpZiAoIWVsZW1lbnQuY3VycmVudFN0eWxlIHx8ICFlbGVtZW50LmN1cnJlbnRTdHlsZS5oYXNMYXlvdXQpIGVsZW1lbnQuc3R5bGUuem9vbSA9IDE7CiAgICAgICAgb3BhY2l0eSA9IChvcGFjaXR5ICogMTAwKS5saW1pdCgwLCAxMDApLnJvdW5kKCk7CiAgICAgICAgb3BhY2l0eSA9IChvcGFjaXR5ID09IDEwMCkgPyAnJyA6ICdhbHBoYShvcGFjaXR5PScgKyBvcGFjaXR5ICsgJyknOwogICAgICAgIHZhciBmaWx0ZXIgPSBlbGVtZW50LnN0eWxlLmZpbHRlciB8fCBlbGVtZW50LmdldENvbXB1dGVkU3R5bGUoJ2ZpbHRlcicpIHx8ICcnOwogICAgICAgIGVsZW1lbnQuc3R5bGUuZmlsdGVyID0gcmVBbHBoYS50ZXN0KGZpbHRlcikgPyBmaWx0ZXIucmVwbGFjZShyZUFscGhhLCBvcGFjaXR5KSA6IGZpbHRlciArIG9wYWNpdHk7Cn0gOiBzZXRWaXNpYmlsaXR5KSk7Cgp2YXIgZ2V0T3BhY2l0eSA9IChoYXNPcGFjaXR5ID8gZnVuY3Rpb24oZWxlbWVudCl7CiAgICAgICAgdmFyIG9wYWNpdHkgPSBlbGVtZW50LnN0eWxlLm9wYWNpdHkgfHwgZWxlbWVudC5nZXRDb21wdXRlZFN0eWxlKCdvcGFjaXR5Jyk7CiAgICAgICAgcmV0dXJuIChvcGFjaXR5ID09ICcnKSA/IDEgOiBvcGFjaXR5LnRvRmxvYXQoKTsKfSA6IChoYXNGaWx0ZXIgPyBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICB2YXIgZmlsdGVyID0gKGVsZW1lbnQuc3R5bGUuZmlsdGVyIHx8IGVsZW1lbnQuZ2V0Q29tcHV0ZWRTdHlsZSgnZmlsdGVyJykpLAogICAgICAgICAgICAgICAgb3BhY2l0eTsKICAgICAgICBpZiAoZmlsdGVyKSBvcGFjaXR5ID0gZmlsdGVyLm1hdGNoKHJlQWxwaGEpOwogICAgICAgIHJldHVybiAob3BhY2l0eSA9PSBudWxsIHx8IGZpbHRlciA9PSBudWxsKSA/IDEgOiAob3BhY2l0eVsxXSAvIDEwMCk7Cn0gOiBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICB2YXIgb3BhY2l0eSA9IGVsZW1lbnQucmV0cmlldmUoJyRvcGFjaXR5Jyk7CiAgICAgICAgaWYgKG9wYWNpdHkgPT0gbnVsbCkgb3BhY2l0eSA9IChlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPT0gJ2hpZGRlbicgPyAwIDogMSk7CiAgICAgICAgcmV0dXJuIG9wYWNpdHk7Cn0pKTsKCnZhciBmbG9hdE5hbWUgPSAoaHRtbC5zdHlsZS5jc3NGbG9hdCA9PSBudWxsKSA/ICdzdHlsZUZsb2F0JyA6ICdjc3NGbG9hdCc7CgpFbGVtZW50LmltcGxlbWVudCh7CgogICAgICAgIGdldENvbXB1dGVkU3R5bGU6IGZ1bmN0aW9uKHByb3BlcnR5KXsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTdHlsZSkgcmV0dXJuIHRoaXMuY3VycmVudFN0eWxlW3Byb3BlcnR5LmNhbWVsQ2FzZSgpXTsKICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0VmlldyA9IEVsZW1lbnQuZ2V0RG9jdW1lbnQodGhpcykuZGVmYXVsdFZpZXcsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkID0gZGVmYXVsdFZpZXcgPyBkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpIDogbnVsbDsKICAgICAgICAgICAgICAgIHJldHVybiAoY29tcHV0ZWQpID8gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgocHJvcGVydHkgPT0gZmxvYXROYW1lKSA/ICdmbG9hdCcgOiBwcm9wZXJ0eS5oeXBoZW5hdGUoKSkgOiBudWxsOwogICAgICAgIH0sCgogICAgICAgIHNldFN0eWxlOiBmdW5jdGlvbihwcm9wZXJ0eSwgdmFsdWUpewogICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09ICdvcGFjaXR5Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldE9wYWNpdHkodGhpcywgcGFyc2VGbG9hdCh2YWx1ZSkpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gKHByb3BlcnR5ID09ICdmbG9hdCcgPyBmbG9hdE5hbWUgOiBwcm9wZXJ0eSkuY2FtZWxDYXNlKCk7CiAgICAgICAgICAgICAgICBpZiAodHlwZU9mKHZhbHVlKSAhPSAnc3RyaW5nJyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXAgPSAoRWxlbWVudC5TdHlsZXNbcHJvcGVydHldIHx8ICdAJykuc3BsaXQoJyAnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBBcnJheS5mcm9tKHZhbHVlKS5tYXAoZnVuY3Rpb24odmFsLCBpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1hcFtpXSkgcmV0dXJuICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAodHlwZU9mKHZhbCkgPT0gJ251bWJlcicpID8gbWFwW2ldLnJlcGxhY2UoJ0AnLCBNYXRoLnJvdW5kKHZhbCkpIDogdmFsOwogICAgICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCcgJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09IFN0cmluZyhOdW1iZXIodmFsdWUpKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0U3R5bGU6IGZ1bmN0aW9uKHByb3BlcnR5KXsKICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PSAnb3BhY2l0eScpIHJldHVybiBnZXRPcGFjaXR5KHRoaXMpOwogICAgICAgICAgICAgICAgcHJvcGVydHkgPSAocHJvcGVydHkgPT0gJ2Zsb2F0JyA/IGZsb2F0TmFtZSA6IHByb3BlcnR5KS5jYW1lbENhc2UoKTsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnN0eWxlW3Byb3BlcnR5XTsKICAgICAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHByb3BlcnR5ID09ICd6SW5kZXgnKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHN0eWxlIGluIEVsZW1lbnQuU2hvcnRTdHlsZXMpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPSBzdHlsZSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcyBpbiBFbGVtZW50LlNob3J0U3R5bGVzW3N0eWxlXSkgcmVzdWx0LnB1c2godGhpcy5nZXRTdHlsZShzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcgJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5nZXRDb21wdXRlZFN0eWxlKHByb3BlcnR5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBTdHJpbmcocmVzdWx0KTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gcmVzdWx0Lm1hdGNoKC9yZ2JhP1woW1xkXHMsXStcKS8pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3IpIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKGNvbG9yWzBdLCBjb2xvclswXS5yZ2JUb0hleCgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChCcm93c2VyLm9wZXJhIHx8IChCcm93c2VyLmllICYmIGlzTmFOKHBhcnNlRmxvYXQocmVzdWx0KSkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgvXihoZWlnaHR8d2lkdGgpJC8pLnRlc3QocHJvcGVydHkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gKHByb3BlcnR5ID09ICd3aWR0aCcpID8gWydsZWZ0JywgJ3JpZ2h0J10gOiBbJ3RvcCcsICdib3R0b20nXSwgc2l6ZSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmVhY2goZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSB0aGlzLmdldFN0eWxlKCdib3JkZXItJyArIHZhbHVlICsgJy13aWR0aCcpLnRvSW50KCkgKyB0aGlzLmdldFN0eWxlKCdwYWRkaW5nLScgKyB2YWx1ZSkudG9JbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1snb2Zmc2V0JyArIHByb3BlcnR5LmNhcGl0YWxpemUoKV0gLSBzaXplICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoQnJvd3Nlci5vcGVyYSAmJiBTdHJpbmcocmVzdWx0KS5pbmRleE9mKCdweCcpICE9IC0xKSByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoKC9eYm9yZGVyKC4rKVdpZHRofG1hcmdpbnxwYWRkaW5nLykudGVzdChwcm9wZXJ0eSkpIHJldHVybiAnMHB4JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKCiAgICAgICAgc2V0U3R5bGVzOiBmdW5jdGlvbihzdHlsZXMpewogICAgICAgICAgICAgICAgZm9yICh2YXIgc3R5bGUgaW4gc3R5bGVzKSB0aGlzLnNldFN0eWxlKHN0eWxlLCBzdHlsZXNbc3R5bGVdKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGdldFN0eWxlczogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgICAgICAgICAgIEFycmF5LmZsYXR0ZW4oYXJndW1lbnRzKS5lYWNoKGZ1bmN0aW9uKGtleSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdGhpcy5nZXRTdHlsZShrZXkpOwogICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KCn0pOwoKRWxlbWVudC5TdHlsZXMgPSB7CiAgICAgICAgbGVmdDogJ0BweCcsIHRvcDogJ0BweCcsIGJvdHRvbTogJ0BweCcsIHJpZ2h0OiAnQHB4JywKICAgICAgICB3aWR0aDogJ0BweCcsIGhlaWdodDogJ0BweCcsIG1heFdpZHRoOiAnQHB4JywgbWF4SGVpZ2h0OiAnQHB4JywgbWluV2lkdGg6ICdAcHgnLCBtaW5IZWlnaHQ6ICdAcHgnLAogICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYihALCBALCBAKScsIGJhY2tncm91bmRQb3NpdGlvbjogJ0BweCBAcHgnLCBjb2xvcjogJ3JnYihALCBALCBAKScsCiAgICAgICAgZm9udFNpemU6ICdAcHgnLCBsZXR0ZXJTcGFjaW5nOiAnQHB4JywgbGluZUhlaWdodDogJ0BweCcsIGNsaXA6ICdyZWN0KEBweCBAcHggQHB4IEBweCknLAogICAgICAgIG1hcmdpbjogJ0BweCBAcHggQHB4IEBweCcsIHBhZGRpbmc6ICdAcHggQHB4IEBweCBAcHgnLCBib3JkZXI6ICdAcHggQCByZ2IoQCwgQCwgQCkgQHB4IEAgcmdiKEAsIEAsIEApIEBweCBAIHJnYihALCBALCBAKScsCiAgICAgICAgYm9yZGVyV2lkdGg6ICdAcHggQHB4IEBweCBAcHgnLCBib3JkZXJTdHlsZTogJ0AgQCBAIEAnLCBib3JkZXJDb2xvcjogJ3JnYihALCBALCBAKSByZ2IoQCwgQCwgQCkgcmdiKEAsIEAsIEApIHJnYihALCBALCBAKScsCiAgICAgICAgekluZGV4OiAnQCcsICd6b29tJzogJ0AnLCBmb250V2VpZ2h0OiAnQCcsIHRleHRJbmRlbnQ6ICdAcHgnLCBvcGFjaXR5OiAnQCcKfTsKCgoKCgpFbGVtZW50LlNob3J0U3R5bGVzID0ge21hcmdpbjoge30sIHBhZGRpbmc6IHt9LCBib3JkZXI6IHt9LCBib3JkZXJXaWR0aDoge30sIGJvcmRlclN0eWxlOiB7fSwgYm9yZGVyQ29sb3I6IHt9fTsKClsnVG9wJywgJ1JpZ2h0JywgJ0JvdHRvbScsICdMZWZ0J10uZWFjaChmdW5jdGlvbihkaXJlY3Rpb24pewogICAgICAgIHZhciBTaG9ydCA9IEVsZW1lbnQuU2hvcnRTdHlsZXM7CiAgICAgICAgdmFyIEFsbCA9IEVsZW1lbnQuU3R5bGVzOwogICAgICAgIFsnbWFyZ2luJywgJ3BhZGRpbmcnXS5lYWNoKGZ1bmN0aW9uKHN0eWxlKXsKICAgICAgICAgICAgICAgIHZhciBzZCA9IHN0eWxlICsgZGlyZWN0aW9uOwogICAgICAgICAgICAgICAgU2hvcnRbc3R5bGVdW3NkXSA9IEFsbFtzZF0gPSAnQHB4JzsKICAgICAgICB9KTsKICAgICAgICB2YXIgYmQgPSAnYm9yZGVyJyArIGRpcmVjdGlvbjsKICAgICAgICBTaG9ydC5ib3JkZXJbYmRdID0gQWxsW2JkXSA9ICdAcHggQCByZ2IoQCwgQCwgQCknOwogICAgICAgIHZhciBiZHcgPSBiZCArICdXaWR0aCcsIGJkcyA9IGJkICsgJ1N0eWxlJywgYmRjID0gYmQgKyAnQ29sb3InOwogICAgICAgIFNob3J0W2JkXSA9IHt9OwogICAgICAgIFNob3J0LmJvcmRlcldpZHRoW2Jkd10gPSBTaG9ydFtiZF1bYmR3XSA9IEFsbFtiZHddID0gJ0BweCc7CiAgICAgICAgU2hvcnQuYm9yZGVyU3R5bGVbYmRzXSA9IFNob3J0W2JkXVtiZHNdID0gQWxsW2Jkc10gPSAnQCc7CiAgICAgICAgU2hvcnQuYm9yZGVyQ29sb3JbYmRjXSA9IFNob3J0W2JkXVtiZGNdID0gQWxsW2JkY10gPSAncmdiKEAsIEAsIEApJzsKfSk7Cgp9KSgpOwoKCi8qCi0tLQoKbmFtZTogRWxlbWVudC5FdmVudAoKZGVzY3JpcHRpb246IENvbnRhaW5zIEVsZW1lbnQgbWV0aG9kcyBmb3IgZGVhbGluZyB3aXRoIGV2ZW50cy4gVGhpcyBmaWxlIGFsc28gaW5jbHVkZXMgbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZSBjdXN0b20gRWxlbWVudCBFdmVudHMsIGlmIG5lY2Vzc2FyeS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtFbGVtZW50LCBFdmVudF0KCnByb3ZpZGVzOiBFbGVtZW50LkV2ZW50CgouLi4KKi8KCihmdW5jdGlvbigpewoKRWxlbWVudC5Qcm9wZXJ0aWVzLmV2ZW50cyA9IHtzZXQ6IGZ1bmN0aW9uKGV2ZW50cyl7CiAgICAgICAgdGhpcy5hZGRFdmVudHMoZXZlbnRzKTsKfX07CgpbRWxlbWVudCwgV2luZG93LCBEb2N1bWVudF0uaW52b2tlKCdpbXBsZW1lbnQnLCB7CgogICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbih0eXBlLCBmbil7CiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5yZXRyaWV2ZSgnZXZlbnRzJywge30pOwogICAgICAgICAgICAgICAgaWYgKCFldmVudHNbdHlwZV0pIGV2ZW50c1t0eXBlXSA9IHtrZXlzOiBbXSwgdmFsdWVzOiBbXX07CiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzW3R5cGVdLmtleXMuY29udGFpbnMoZm4pKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIGV2ZW50c1t0eXBlXS5rZXlzLnB1c2goZm4pOwogICAgICAgICAgICAgICAgdmFyIHJlYWxUeXBlID0gdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tID0gRWxlbWVudC5FdmVudHNbdHlwZV0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbiA9IGZuLAogICAgICAgICAgICAgICAgICAgICAgICBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgIGlmIChjdXN0b20pewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tLm9uQWRkKSBjdXN0b20ub25BZGQuY2FsbCh0aGlzLCBmbiwgdHlwZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b20uY29uZGl0aW9uKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24gPSBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tLmNvbmRpdGlvbi5jYWxsKHRoaXMsIGV2ZW50LCB0eXBlKSkgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tLmJhc2UpIHJlYWxUeXBlID0gRnVuY3Rpb24uZnJvbShjdXN0b20uYmFzZSkuY2FsbCh0aGlzLCB0eXBlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBkZWZuID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuLmNhbGwoc2VsZik7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIG5hdGl2ZUV2ZW50ID0gRWxlbWVudC5OYXRpdmVFdmVudHNbcmVhbFR5cGVdOwogICAgICAgICAgICAgICAgaWYgKG5hdGl2ZUV2ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hdGl2ZUV2ZW50ID09IDIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZm4gPSBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudCA9IG5ldyBET01FdmVudChldmVudCwgc2VsZi5nZXRXaW5kb3coKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uLmNhbGwoc2VsZiwgZXZlbnQpID09PSBmYWxzZSkgZXZlbnQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcihyZWFsVHlwZSwgZGVmbiwgYXJndW1lbnRzWzJdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGV2ZW50c1t0eXBlXS52YWx1ZXMucHVzaChkZWZuKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZUV2ZW50OiBmdW5jdGlvbih0eXBlLCBmbil7CiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5yZXRyaWV2ZSgnZXZlbnRzJyk7CiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50cyB8fCAhZXZlbnRzW3R5cGVdKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gZXZlbnRzW3R5cGVdOwogICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbGlzdC5rZXlzLmluZGV4T2YoZm4pOwogICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IC0xKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxpc3QudmFsdWVzW2luZGV4XTsKICAgICAgICAgICAgICAgIGRlbGV0ZSBsaXN0LmtleXNbaW5kZXhdOwogICAgICAgICAgICAgICAgZGVsZXRlIGxpc3QudmFsdWVzW2luZGV4XTsKICAgICAgICAgICAgICAgIHZhciBjdXN0b20gPSBFbGVtZW50LkV2ZW50c1t0eXBlXTsKICAgICAgICAgICAgICAgIGlmIChjdXN0b20pewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tLm9uUmVtb3ZlKSBjdXN0b20ub25SZW1vdmUuY2FsbCh0aGlzLCBmbiwgdHlwZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b20uYmFzZSkgdHlwZSA9IEZ1bmN0aW9uLmZyb20oY3VzdG9tLmJhc2UpLmNhbGwodGhpcywgdHlwZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gKEVsZW1lbnQuTmF0aXZlRXZlbnRzW3R5cGVdKSA/IHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgdmFsdWUsIGFyZ3VtZW50c1syXSkgOiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGFkZEV2ZW50czogZnVuY3Rpb24oZXZlbnRzKXsKICAgICAgICAgICAgICAgIGZvciAodmFyIGV2ZW50IGluIGV2ZW50cykgdGhpcy5hZGRFdmVudChldmVudCwgZXZlbnRzW2V2ZW50XSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICByZW1vdmVFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cyl7CiAgICAgICAgICAgICAgICB2YXIgdHlwZTsKICAgICAgICAgICAgICAgIGlmICh0eXBlT2YoZXZlbnRzKSA9PSAnb2JqZWN0Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodHlwZSBpbiBldmVudHMpIHRoaXMucmVtb3ZlRXZlbnQodHlwZSwgZXZlbnRzW3R5cGVdKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgYXR0YWNoZWQgPSB0aGlzLnJldHJpZXZlKCdldmVudHMnKTsKICAgICAgICAgICAgICAgIGlmICghYXR0YWNoZWQpIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgaWYgKCFldmVudHMpewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHR5cGUgaW4gYXR0YWNoZWQpIHRoaXMucmVtb3ZlRXZlbnRzKHR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsaW1pbmF0ZSgnZXZlbnRzJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0dGFjaGVkW2V2ZW50c10pewogICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hlZFtldmVudHNdLmtleXMuZWFjaChmdW5jdGlvbihmbil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudChldmVudHMsIGZuKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRhY2hlZFtldmVudHNdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZmlyZUV2ZW50OiBmdW5jdGlvbih0eXBlLCBhcmdzLCBkZWxheSl7CiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5yZXRyaWV2ZSgnZXZlbnRzJyk7CiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50cyB8fCAhZXZlbnRzW3R5cGVdKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3MpOwoKICAgICAgICAgICAgICAgIGV2ZW50c1t0eXBlXS5rZXlzLmVhY2goZnVuY3Rpb24oZm4pewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsYXkpIGZuLmRlbGF5KGRlbGF5LCB0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBmbi5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgY2xvbmVFdmVudHM6IGZ1bmN0aW9uKGZyb20sIHR5cGUpewogICAgICAgICAgICAgICAgZnJvbSA9IGRvY3VtZW50LmlkKGZyb20pOwogICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IGZyb20ucmV0cmlldmUoJ2V2ZW50cycpOwogICAgICAgICAgICAgICAgaWYgKCFldmVudHMpIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgaWYgKCF0eXBlKXsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZXZlbnRUeXBlIGluIGV2ZW50cykgdGhpcy5jbG9uZUV2ZW50cyhmcm9tLCBldmVudFR5cGUpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0pewogICAgICAgICAgICAgICAgICAgICAgICBldmVudHNbdHlwZV0ua2V5cy5lYWNoKGZ1bmN0aW9uKGZuKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50KHR5cGUsIGZuKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCkVsZW1lbnQuTmF0aXZlRXZlbnRzID0gewogICAgICAgIGNsaWNrOiAyLCBkYmxjbGljazogMiwgbW91c2V1cDogMiwgbW91c2Vkb3duOiAyLCBjb250ZXh0bWVudTogMiwgLy9tb3VzZSBidXR0b25zCiAgICAgICAgbW91c2V3aGVlbDogMiwgRE9NTW91c2VTY3JvbGw6IDIsIC8vbW91c2Ugd2hlZWwKICAgICAgICBtb3VzZW92ZXI6IDIsIG1vdXNlb3V0OiAyLCBtb3VzZW1vdmU6IDIsIHNlbGVjdHN0YXJ0OiAyLCBzZWxlY3RlbmQ6IDIsIC8vbW91c2UgbW92ZW1lbnQKICAgICAgICBrZXlkb3duOiAyLCBrZXlwcmVzczogMiwga2V5dXA6IDIsIC8va2V5Ym9hcmQKICAgICAgICBvcmllbnRhdGlvbmNoYW5nZTogMiwgLy8gbW9iaWxlCiAgICAgICAgdG91Y2hzdGFydDogMiwgdG91Y2htb3ZlOiAyLCB0b3VjaGVuZDogMiwgdG91Y2hjYW5jZWw6IDIsIC8vIHRvdWNoCiAgICAgICAgZ2VzdHVyZXN0YXJ0OiAyLCBnZXN0dXJlY2hhbmdlOiAyLCBnZXN0dXJlZW5kOiAyLCAvLyBnZXN0dXJlCiAgICAgICAgZm9jdXM6IDIsIGJsdXI6IDIsIGNoYW5nZTogMiwgcmVzZXQ6IDIsIHNlbGVjdDogMiwgc3VibWl0OiAyLCBwYXN0ZTogMiwgaW5wdXQ6IDIsIC8vZm9ybSBlbGVtZW50cwogICAgICAgIGxvYWQ6IDIsIHVubG9hZDogMSwgYmVmb3JldW5sb2FkOiAyLCByZXNpemU6IDEsIG1vdmU6IDEsIERPTUNvbnRlbnRMb2FkZWQ6IDEsIHJlYWR5c3RhdGVjaGFuZ2U6IDEsIC8vd2luZG93CiAgICAgICAgZXJyb3I6IDEsIGFib3J0OiAxLCBzY3JvbGw6IDEgLy9taXNjCn07CgpFbGVtZW50LkV2ZW50cyA9IHttb3VzZXdoZWVsOiB7CiAgICAgICAgYmFzZTogKEJyb3dzZXIuZmlyZWZveCkgPyAnRE9NTW91c2VTY3JvbGwnIDogJ21vdXNld2hlZWwnCn19OwoKaWYgKCdvbm1vdXNlZW50ZXInIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCl7CiAgICAgICAgRWxlbWVudC5OYXRpdmVFdmVudHMubW91c2VlbnRlciA9IEVsZW1lbnQuTmF0aXZlRXZlbnRzLm1vdXNlbGVhdmUgPSAyOwp9IGVsc2UgewogICAgICAgIHZhciBjaGVjayA9IGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDsKICAgICAgICAgICAgICAgIGlmIChyZWxhdGVkID09IG51bGwpIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgaWYgKCFyZWxhdGVkKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICByZXR1cm4gKHJlbGF0ZWQgIT0gdGhpcyAmJiByZWxhdGVkLnByZWZpeCAhPSAneHVsJyAmJiB0eXBlT2YodGhpcykgIT0gJ2RvY3VtZW50JyAmJiAhdGhpcy5jb250YWlucyhyZWxhdGVkKSk7CiAgICAgICAgfTsKCiAgICAgICAgRWxlbWVudC5FdmVudHMubW91c2VlbnRlciA9IHsKICAgICAgICAgICAgICAgIGJhc2U6ICdtb3VzZW92ZXInLAogICAgICAgICAgICAgICAgY29uZGl0aW9uOiBjaGVjawogICAgICAgIH07CgogICAgICAgIEVsZW1lbnQuRXZlbnRzLm1vdXNlbGVhdmUgPSB7CiAgICAgICAgICAgICAgICBiYXNlOiAnbW91c2VvdXQnLAogICAgICAgICAgICAgICAgY29uZGl0aW9uOiBjaGVjawogICAgICAgIH07Cn0KCi8qPGx0SUU5PiovCmlmICghd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpewogICAgICAgIEVsZW1lbnQuTmF0aXZlRXZlbnRzLnByb3BlcnR5Y2hhbmdlID0gMjsKICAgICAgICBFbGVtZW50LkV2ZW50cy5jaGFuZ2UgPSB7CiAgICAgICAgICAgICAgICBiYXNlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMudHlwZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmdldCgndGFnJykgPT0gJ2lucHV0JyAmJiAodHlwZSA9PSAncmFkaW8nIHx8IHR5cGUgPT0gJ2NoZWNrYm94JykpID8gJ3Byb3BlcnR5Y2hhbmdlJyA6ICdjaGFuZ2UnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY29uZGl0aW9uOiBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhISh0aGlzLnR5cGUgIT0gJ3JhZGlvJyB8fCB0aGlzLmNoZWNrZWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KfQovKjwvbHRJRTk+Ki8KCgoKfSkoKTsKCgovKgotLS0KCm5hbWU6IEVsZW1lbnQuRGVsZWdhdGlvbgoKZGVzY3JpcHRpb246IEV4dGVuZHMgdGhlIEVsZW1lbnQgbmF0aXZlIG9iamVjdCB0byBpbmNsdWRlIHRoZSBkZWxlZ2F0ZSBtZXRob2QgZm9yIG1vcmUgZWZmaWNpZW50IGV2ZW50IG1hbmFnZW1lbnQuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbRWxlbWVudC5FdmVudF0KCnByb3ZpZGVzOiBbRWxlbWVudC5EZWxlZ2F0aW9uXQoKLi4uCiovCgooZnVuY3Rpb24oKXsKCnZhciBldmVudExpc3RlbmVyU3VwcG9ydCA9ICEhd2luZG93LmFkZEV2ZW50TGlzdGVuZXI7CgpFbGVtZW50Lk5hdGl2ZUV2ZW50cy5mb2N1c2luID0gRWxlbWVudC5OYXRpdmVFdmVudHMuZm9jdXNvdXQgPSAyOwoKdmFyIGJ1YmJsZVVwID0gZnVuY3Rpb24oc2VsZiwgbWF0Y2gsIGZuLCBldmVudCwgdGFyZ2V0KXsKICAgICAgICB3aGlsZSAodGFyZ2V0ICYmIHRhcmdldCAhPSBzZWxmKXsKICAgICAgICAgICAgICAgIGlmIChtYXRjaCh0YXJnZXQsIGV2ZW50KSkgcmV0dXJuIGZuLmNhbGwodGFyZ2V0LCBldmVudCwgdGFyZ2V0KTsKICAgICAgICAgICAgICAgIHRhcmdldCA9IGRvY3VtZW50LmlkKHRhcmdldC5wYXJlbnROb2RlKTsKICAgICAgICB9Cn07Cgp2YXIgbWFwID0gewogICAgICAgIG1vdXNlZW50ZXI6IHsKICAgICAgICAgICAgICAgIGJhc2U6ICdtb3VzZW92ZXInCiAgICAgICAgfSwKICAgICAgICBtb3VzZWxlYXZlOiB7CiAgICAgICAgICAgICAgICBiYXNlOiAnbW91c2VvdXQnCiAgICAgICAgfSwKICAgICAgICBmb2N1czogewogICAgICAgICAgICAgICAgYmFzZTogJ2ZvY3VzJyArIChldmVudExpc3RlbmVyU3VwcG9ydCA/ICcnIDogJ2luJyksCiAgICAgICAgICAgICAgICBjYXB0dXJlOiB0cnVlCiAgICAgICAgfSwKICAgICAgICBibHVyOiB7CiAgICAgICAgICAgICAgICBiYXNlOiBldmVudExpc3RlbmVyU3VwcG9ydCA/ICdibHVyJyA6ICdmb2N1c291dCcsCiAgICAgICAgICAgICAgICBjYXB0dXJlOiB0cnVlCiAgICAgICAgfQp9OwoKLyo8bHRJRTk+Ki8KdmFyIF9rZXkgPSAnJGRlbGVnYXRpb246JzsKdmFyIGZvcm1PYnNlcnZlciA9IGZ1bmN0aW9uKHR5cGUpewoKICAgICAgICByZXR1cm4gewoKICAgICAgICAgICAgICAgIGJhc2U6ICdmb2N1c2luJywKCiAgICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKHNlbGYsIHVpZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gc2VsZi5yZXRyaWV2ZShfa2V5ICsgdHlwZSArICdsaXN0ZW5lcnMnLCB7fSlbdWlkXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3QgJiYgbGlzdC5mb3JtcykgZm9yICh2YXIgaSA9IGxpc3QuZm9ybXMubGVuZ3RoOyBpLS07KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmZvcm1zW2ldLnJlbW92ZUV2ZW50KHR5cGUsIGxpc3QuZm5zW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBsaXN0ZW46IGZ1bmN0aW9uKHNlbGYsIG1hdGNoLCBmbiwgZXZlbnQsIHRhcmdldCwgdWlkKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm0gPSAodGFyZ2V0LmdldCgndGFnJykgPT0gJ2Zvcm0nKSA/IHRhcmdldCA6IGV2ZW50LnRhcmdldC5nZXRQYXJlbnQoJ2Zvcm0nKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JtKSByZXR1cm47CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gc2VsZi5yZXRyaWV2ZShfa2V5ICsgdHlwZSArICdsaXN0ZW5lcnMnLCB7fSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbdWlkXSB8fCB7Zm9ybXM6IFtdLCBmbnM6IFtdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtcyA9IGxpc3RlbmVyLmZvcm1zLCBmbnMgPSBsaXN0ZW5lci5mbnM7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybXMuaW5kZXhPZihmb3JtKSAhPSAtMSkgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICBmb3Jtcy5wdXNoKGZvcm0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9mbiA9IGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWJibGVVcChzZWxmLCBtYXRjaCwgZm4sIGV2ZW50LCB0YXJnZXQpOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmFkZEV2ZW50KHR5cGUsIF9mbik7CiAgICAgICAgICAgICAgICAgICAgICAgIGZucy5wdXNoKF9mbik7CgogICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNbdWlkXSA9IGxpc3RlbmVyOwogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0b3JlKF9rZXkgKyB0eXBlICsgJ2xpc3RlbmVycycsIGxpc3RlbmVycyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfTsKfTsKCnZhciBpbnB1dE9ic2VydmVyID0gZnVuY3Rpb24odHlwZSl7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGJhc2U6ICdmb2N1c2luJywKICAgICAgICAgICAgICAgIGxpc3RlbjogZnVuY3Rpb24oc2VsZiwgbWF0Y2gsIGZuLCBldmVudCwgdGFyZ2V0KXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHtibHVyOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRzKGV2ZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH19OwogICAgICAgICAgICAgICAgICAgICAgICBldmVudHNbdHlwZV0gPSBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlVXAoc2VsZiwgbWF0Y2gsIGZuLCBldmVudCwgdGFyZ2V0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmFkZEV2ZW50cyhldmVudHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH07Cn07CgppZiAoIWV2ZW50TGlzdGVuZXJTdXBwb3J0KSBPYmplY3QuYXBwZW5kKG1hcCwgewogICAgICAgIHN1Ym1pdDogZm9ybU9ic2VydmVyKCdzdWJtaXQnKSwKICAgICAgICByZXNldDogZm9ybU9ic2VydmVyKCdyZXNldCcpLAogICAgICAgIGNoYW5nZTogaW5wdXRPYnNlcnZlcignY2hhbmdlJyksCiAgICAgICAgc2VsZWN0OiBpbnB1dE9ic2VydmVyKCdzZWxlY3QnKQp9KTsKLyo8L2x0SUU5PiovCgp2YXIgcHJvdG8gPSBFbGVtZW50LnByb3RvdHlwZSwKICAgICAgICBhZGRFdmVudCA9IHByb3RvLmFkZEV2ZW50LAogICAgICAgIHJlbW92ZUV2ZW50ID0gcHJvdG8ucmVtb3ZlRXZlbnQ7Cgp2YXIgcmVsYXkgPSBmdW5jdGlvbihvbGQsIG1ldGhvZCl7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHR5cGUsIGZuLCB1c2VDYXB0dXJlKXsKICAgICAgICAgICAgICAgIGlmICh0eXBlLmluZGV4T2YoJzpyZWxheScpID09IC0xKSByZXR1cm4gb2xkLmNhbGwodGhpcywgdHlwZSwgZm4sIHVzZUNhcHR1cmUpOwogICAgICAgICAgICAgICAgdmFyIHBhcnNlZCA9IFNsaWNrLnBhcnNlKHR5cGUpLmV4cHJlc3Npb25zWzBdWzBdOwogICAgICAgICAgICAgICAgaWYgKHBhcnNlZC5wc2V1ZG9zWzBdLmtleSAhPSAncmVsYXknKSByZXR1cm4gb2xkLmNhbGwodGhpcywgdHlwZSwgZm4sIHVzZUNhcHR1cmUpOwogICAgICAgICAgICAgICAgdmFyIG5ld1R5cGUgPSBwYXJzZWQudGFnOwogICAgICAgICAgICAgICAgcGFyc2VkLnBzZXVkb3Muc2xpY2UoMSkuZWFjaChmdW5jdGlvbihwc2V1ZG8pewogICAgICAgICAgICAgICAgICAgICAgICBuZXdUeXBlICs9ICc6JyArIHBzZXVkby5rZXkgKyAocHNldWRvLnZhbHVlID8gJygnICsgcHNldWRvLnZhbHVlICsgJyknIDogJycpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBvbGQuY2FsbCh0aGlzLCB0eXBlLCBmbik7CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgbmV3VHlwZSwgcGFyc2VkLnBzZXVkb3NbMF0udmFsdWUsIGZuKTsKICAgICAgICB9Owp9OwoKdmFyIGRlbGVnYXRpb24gPSB7CgogICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbih0eXBlLCBtYXRjaCwgZm4pewogICAgICAgICAgICAgICAgdmFyIHN0b3JhZ2UgPSB0aGlzLnJldHJpZXZlKCckZGVsZWdhdGVzJywge30pLCBzdG9yZWQgPSBzdG9yYWdlW3R5cGVdOwogICAgICAgICAgICAgICAgaWYgKHN0b3JlZCkgZm9yICh2YXIgX3VpZCBpbiBzdG9yZWQpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcmVkW191aWRdLmZuID09IGZuICYmIHN0b3JlZFtfdWlkXS5tYXRjaCA9PSBtYXRjaCkgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIF90eXBlID0gdHlwZSwgX21hdGNoID0gbWF0Y2gsIF9mbiA9IGZuLCBfbWFwID0gbWFwW3R5cGVdIHx8IHt9OwogICAgICAgICAgICAgICAgdHlwZSA9IF9tYXAuYmFzZSB8fCBfdHlwZTsKCiAgICAgICAgICAgICAgICBtYXRjaCA9IGZ1bmN0aW9uKHRhcmdldCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTbGljay5tYXRjaCh0YXJnZXQsIF9tYXRjaCk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHZhciBlbGVtZW50RXZlbnQgPSBFbGVtZW50LkV2ZW50c1tfdHlwZV07CiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudEV2ZW50ICYmIGVsZW1lbnRFdmVudC5jb25kaXRpb24pewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX19tYXRjaCA9IG1hdGNoLCBjb25kaXRpb24gPSBlbGVtZW50RXZlbnQuY29uZGl0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGZ1bmN0aW9uKHRhcmdldCwgZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX21hdGNoKHRhcmdldCwgZXZlbnQpICYmIGNvbmRpdGlvbi5jYWxsKHRhcmdldCwgZXZlbnQsIHR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgdWlkID0gU3RyaW5nLnVuaXF1ZUlEKCk7CiAgICAgICAgICAgICAgICB2YXIgZGVsZWdhdG9yID0gX21hcC5saXN0ZW4gPyBmdW5jdGlvbihldmVudCwgdGFyZ2V0KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQgJiYgZXZlbnQgJiYgZXZlbnQudGFyZ2V0KSB0YXJnZXQgPSBldmVudC50YXJnZXQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIF9tYXAubGlzdGVuKHNlbGYsIG1hdGNoLCBmbiwgZXZlbnQsIHRhcmdldCwgdWlkKTsKICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbihldmVudCwgdGFyZ2V0KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQgJiYgZXZlbnQgJiYgZXZlbnQudGFyZ2V0KSB0YXJnZXQgPSBldmVudC50YXJnZXQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIGJ1YmJsZVVwKHNlbGYsIG1hdGNoLCBmbiwgZXZlbnQsIHRhcmdldCk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGlmICghc3RvcmVkKSBzdG9yZWQgPSB7fTsKICAgICAgICAgICAgICAgIHN0b3JlZFt1aWRdID0gewogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDogX21hdGNoLAogICAgICAgICAgICAgICAgICAgICAgICBmbjogX2ZuLAogICAgICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0b3I6IGRlbGVnYXRvcgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHN0b3JhZ2VbX3R5cGVdID0gc3RvcmVkOwogICAgICAgICAgICAgICAgcmV0dXJuIGFkZEV2ZW50LmNhbGwodGhpcywgdHlwZSwgZGVsZWdhdG9yLCBfbWFwLmNhcHR1cmUpOwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZUV2ZW50OiBmdW5jdGlvbih0eXBlLCBtYXRjaCwgZm4sIF91aWQpewogICAgICAgICAgICAgICAgdmFyIHN0b3JhZ2UgPSB0aGlzLnJldHJpZXZlKCckZGVsZWdhdGVzJywge30pLCBzdG9yZWQgPSBzdG9yYWdlW3R5cGVdOwogICAgICAgICAgICAgICAgaWYgKCFzdG9yZWQpIHJldHVybiB0aGlzOwoKICAgICAgICAgICAgICAgIGlmIChfdWlkKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90eXBlID0gdHlwZSwgZGVsZWdhdG9yID0gc3RvcmVkW191aWRdLmRlbGVnYXRvciwgX21hcCA9IG1hcFt0eXBlXSB8fCB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IF9tYXAuYmFzZSB8fCBfdHlwZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9tYXAucmVtb3ZlKSBfbWFwLnJlbW92ZSh0aGlzLCBfdWlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN0b3JlZFtfdWlkXTsKICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVtfdHlwZV0gPSBzdG9yZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZW1vdmVFdmVudC5jYWxsKHRoaXMsIHR5cGUsIGRlbGVnYXRvcik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIF9fdWlkLCBzOwogICAgICAgICAgICAgICAgaWYgKGZuKSBmb3IgKF9fdWlkIGluIHN0b3JlZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBzdG9yZWRbX191aWRdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5tYXRjaCA9PSBtYXRjaCAmJiBzLmZuID09IGZuKSByZXR1cm4gZGVsZWdhdGlvbi5yZW1vdmVFdmVudC5jYWxsKHRoaXMsIHR5cGUsIG1hdGNoLCBmbiwgX191aWQpOwogICAgICAgICAgICAgICAgfSBlbHNlIGZvciAoX191aWQgaW4gc3RvcmVkKXsKICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHN0b3JlZFtfX3VpZF07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLm1hdGNoID09IG1hdGNoKSBkZWxlZ2F0aW9uLnJlbW92ZUV2ZW50LmNhbGwodGhpcywgdHlwZSwgbWF0Y2gsIHMuZm4sIF9fdWlkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn07CgpbRWxlbWVudCwgV2luZG93LCBEb2N1bWVudF0uaW52b2tlKCdpbXBsZW1lbnQnLCB7CiAgICAgICAgYWRkRXZlbnQ6IHJlbGF5KGFkZEV2ZW50LCBkZWxlZ2F0aW9uLmFkZEV2ZW50KSwKICAgICAgICByZW1vdmVFdmVudDogcmVsYXkocmVtb3ZlRXZlbnQsIGRlbGVnYXRpb24ucmVtb3ZlRXZlbnQpCn0pOwoKfSkoKTsKCgovKgotLS0KCm5hbWU6IEVsZW1lbnQuRGltZW5zaW9ucwoKZGVzY3JpcHRpb246IENvbnRhaW5zIG1ldGhvZHMgdG8gd29yayB3aXRoIHNpemUsIHNjcm9sbCwgb3IgcG9zaXRpb25pbmcgb2YgRWxlbWVudHMgYW5kIHRoZSB3aW5kb3cgb2JqZWN0LgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjcmVkaXRzOgogIC0gRWxlbWVudCBwb3NpdGlvbmluZyBiYXNlZCBvbiB0aGUgW3Fvb3hkb29dKGh0dHA6Ly9xb294ZG9vLm9yZy8pIGNvZGUgYW5kIHNtYXJ0IGJyb3dzZXIgZml4ZXMsIFtMR1BMIExpY2Vuc2VdKGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWwpLgogIC0gVmlld3BvcnQgZGltZW5zaW9ucyBiYXNlZCBvbiBbWVVJXShodHRwOi8vZGV2ZWxvcGVyLnlhaG9vLmNvbS95dWkvKSBjb2RlLCBbQlNEIExpY2Vuc2VdKGh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9saWNlbnNlLmh0bWwpLgoKcmVxdWlyZXM6IFtFbGVtZW50LCBFbGVtZW50LlN0eWxlXQoKcHJvdmlkZXM6IFtFbGVtZW50LkRpbWVuc2lvbnNdCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwKICAgICAgICBjaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwplbGVtZW50LnN0eWxlLmhlaWdodCA9ICcwJzsKZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7CnZhciBicm9rZW5PZmZzZXRQYXJlbnQgPSAoY2hpbGQub2Zmc2V0UGFyZW50ID09PSBlbGVtZW50KTsKZWxlbWVudCA9IGNoaWxkID0gbnVsbDsKCnZhciBpc09mZnNldCA9IGZ1bmN0aW9uKGVsKXsKICAgICAgICByZXR1cm4gc3R5bGVTdHJpbmcoZWwsICdwb3NpdGlvbicpICE9ICdzdGF0aWMnIHx8IGlzQm9keShlbCk7Cn07Cgp2YXIgaXNPZmZzZXRTdGF0aWMgPSBmdW5jdGlvbihlbCl7CiAgICAgICAgcmV0dXJuIGlzT2Zmc2V0KGVsKSB8fCAoL14oPzp0YWJsZXx0ZHx0aCkkL2kpLnRlc3QoZWwudGFnTmFtZSk7Cn07CgpFbGVtZW50LmltcGxlbWVudCh7CgogICAgICAgIHNjcm9sbFRvOiBmdW5jdGlvbih4LCB5KXsKICAgICAgICAgICAgICAgIGlmIChpc0JvZHkodGhpcykpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFdpbmRvdygpLnNjcm9sbFRvKHgsIHkpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxMZWZ0ID0geDsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb3AgPSB5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0U2l6ZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmIChpc0JvZHkodGhpcykpIHJldHVybiB0aGlzLmdldFdpbmRvdygpLmdldFNpemUoKTsKICAgICAgICAgICAgICAgIHJldHVybiB7eDogdGhpcy5vZmZzZXRXaWR0aCwgeTogdGhpcy5vZmZzZXRIZWlnaHR9OwogICAgICAgIH0sCgogICAgICAgIGdldFNjcm9sbFNpemU6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KHRoaXMpKSByZXR1cm4gdGhpcy5nZXRXaW5kb3coKS5nZXRTY3JvbGxTaXplKCk7CiAgICAgICAgICAgICAgICByZXR1cm4ge3g6IHRoaXMuc2Nyb2xsV2lkdGgsIHk6IHRoaXMuc2Nyb2xsSGVpZ2h0fTsKICAgICAgICB9LAoKICAgICAgICBnZXRTY3JvbGw6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KHRoaXMpKSByZXR1cm4gdGhpcy5nZXRXaW5kb3coKS5nZXRTY3JvbGwoKTsKICAgICAgICAgICAgICAgIHJldHVybiB7eDogdGhpcy5zY3JvbGxMZWZ0LCB5OiB0aGlzLnNjcm9sbFRvcH07CiAgICAgICAgfSwKCiAgICAgICAgZ2V0U2Nyb2xsczogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5wYXJlbnROb2RlLCBwb3NpdGlvbiA9IHt4OiAwLCB5OiAwfTsKICAgICAgICAgICAgICAgIHdoaWxlIChlbGVtZW50ICYmICFpc0JvZHkoZWxlbWVudCkpewogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54ICs9IGVsZW1lbnQuc2Nyb2xsTGVmdDsKICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueSArPSBlbGVtZW50LnNjcm9sbFRvcDsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjsKICAgICAgICB9LAoKICAgICAgICBnZXRPZmZzZXRQYXJlbnQ6IGJyb2tlbk9mZnNldFBhcmVudCA/IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXM7CiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KGVsZW1lbnQpIHx8IHN0eWxlU3RyaW5nKGVsZW1lbnQsICdwb3NpdGlvbicpID09ICdmaXhlZCcpIHJldHVybiBudWxsOwoKICAgICAgICAgICAgICAgIHZhciBpc09mZnNldENoZWNrID0gKHN0eWxlU3RyaW5nKGVsZW1lbnQsICdwb3NpdGlvbicpID09ICdzdGF0aWMnKSA/IGlzT2Zmc2V0U3RhdGljIDogaXNPZmZzZXQ7CiAgICAgICAgICAgICAgICB3aGlsZSAoKGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUpKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzT2Zmc2V0Q2hlY2soZWxlbWVudCkpIHJldHVybiBlbGVtZW50OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfSA6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXM7CiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KGVsZW1lbnQpIHx8IHN0eWxlU3RyaW5nKGVsZW1lbnQsICdwb3NpdGlvbicpID09ICdmaXhlZCcpIHJldHVybiBudWxsOwoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkge30KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0sCgogICAgICAgIGdldE9mZnNldHM6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgIUJyb3dzZXIuUGxhdGZvcm0uaW9zKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvdW5kID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sID0gZG9jdW1lbnQuaWQodGhpcy5nZXREb2N1bWVudCgpLmRvY3VtZW50RWxlbWVudCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbFNjcm9sbCA9IGh0bWwuZ2V0U2Nyb2xsKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbVNjcm9sbHMgPSB0aGlzLmdldFNjcm9sbHMoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZpeGVkID0gKHN0eWxlU3RyaW5nKHRoaXMsICdwb3NpdGlvbicpID09ICdmaXhlZCcpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBib3VuZC5sZWZ0LnRvSW50KCkgKyBlbGVtU2Nyb2xscy54ICsgKChpc0ZpeGVkKSA/IDAgOiBodG1sU2Nyb2xsLngpIC0gaHRtbC5jbGllbnRMZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGJvdW5kLnRvcC50b0ludCgpICArIGVsZW1TY3JvbGxzLnkgKyAoKGlzRml4ZWQpID8gMCA6IGh0bWxTY3JvbGwueSkgLSBodG1sLmNsaWVudFRvcAogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpcywgcG9zaXRpb24gPSB7eDogMCwgeTogMH07CiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KHRoaXMpKSByZXR1cm4gcG9zaXRpb247CgogICAgICAgICAgICAgICAgd2hpbGUgKGVsZW1lbnQgJiYgIWlzQm9keShlbGVtZW50KSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnggKz0gZWxlbWVudC5vZmZzZXRMZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi55ICs9IGVsZW1lbnQub2Zmc2V0VG9wOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEJyb3dzZXIuZmlyZWZveCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFib3JkZXJCb3goZWxlbWVudCkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueCArPSBsZWZ0Qm9yZGVyKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueSArPSB0b3BCb3JkZXIoZWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudCAmJiBzdHlsZVN0cmluZyhwYXJlbnQsICdvdmVyZmxvdycpICE9ICd2aXNpYmxlJyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54ICs9IGxlZnRCb3JkZXIocGFyZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnkgKz0gdG9wQm9yZGVyKHBhcmVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQgIT0gdGhpcyAmJiBCcm93c2VyLnNhZmFyaSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueCArPSBsZWZ0Qm9yZGVyKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnkgKz0gdG9wQm9yZGVyKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoQnJvd3Nlci5maXJlZm94ICYmICFib3JkZXJCb3godGhpcykpewogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54IC09IGxlZnRCb3JkZXIodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnkgLT0gdG9wQm9yZGVyKHRoaXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uOwogICAgICAgIH0sCgogICAgICAgIGdldFBvc2l0aW9uOiBmdW5jdGlvbihyZWxhdGl2ZSl7CiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5nZXRPZmZzZXRzKCksCiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbCA9IHRoaXMuZ2V0U2Nyb2xscygpOwogICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gewogICAgICAgICAgICAgICAgICAgICAgICB4OiBvZmZzZXQueCAtIHNjcm9sbC54LAogICAgICAgICAgICAgICAgICAgICAgICB5OiBvZmZzZXQueSAtIHNjcm9sbC55CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZSAmJiAocmVsYXRpdmUgPSBkb2N1bWVudC5pZChyZWxhdGl2ZSkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbGF0aXZlUG9zaXRpb24gPSByZWxhdGl2ZS5nZXRQb3NpdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3g6IHBvc2l0aW9uLnggLSByZWxhdGl2ZVBvc2l0aW9uLnggLSBsZWZ0Qm9yZGVyKHJlbGF0aXZlKSwgeTogcG9zaXRpb24ueSAtIHJlbGF0aXZlUG9zaXRpb24ueSAtIHRvcEJvcmRlcihyZWxhdGl2ZSl9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uOwogICAgICAgIH0sCgogICAgICAgIGdldENvb3JkaW5hdGVzOiBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICAgICAgICAgIGlmIChpc0JvZHkodGhpcykpIHJldHVybiB0aGlzLmdldFdpbmRvdygpLmdldENvb3JkaW5hdGVzKCk7CiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmdldFBvc2l0aW9uKGVsZW1lbnQpLAogICAgICAgICAgICAgICAgICAgICAgICBzaXplID0gdGhpcy5nZXRTaXplKCk7CiAgICAgICAgICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBwb3NpdGlvbi54LAogICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHBvc2l0aW9uLnksCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzaXplLngsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZS55CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgb2JqLnJpZ2h0ID0gb2JqLmxlZnQgKyBvYmoud2lkdGg7CiAgICAgICAgICAgICAgICBvYmouYm90dG9tID0gb2JqLnRvcCArIG9iai5oZWlnaHQ7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqOwogICAgICAgIH0sCgogICAgICAgIGNvbXB1dGVQb3NpdGlvbjogZnVuY3Rpb24ob2JqKXsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IG9iai54IC0gc3R5bGVOdW1iZXIodGhpcywgJ21hcmdpbi1sZWZ0JyksCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogb2JqLnkgLSBzdHlsZU51bWJlcih0aGlzLCAnbWFyZ2luLXRvcCcpCiAgICAgICAgICAgICAgICB9OwogICAgICAgIH0sCgogICAgICAgIHNldFBvc2l0aW9uOiBmdW5jdGlvbihvYmopewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3R5bGVzKHRoaXMuY29tcHV0ZVBvc2l0aW9uKG9iaikpOwogICAgICAgIH0KCn0pOwoKCltEb2N1bWVudCwgV2luZG93XS5pbnZva2UoJ2ltcGxlbWVudCcsIHsKCiAgICAgICAgZ2V0U2l6ZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBkb2MgPSBnZXRDb21wYXRFbGVtZW50KHRoaXMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHt4OiBkb2MuY2xpZW50V2lkdGgsIHk6IGRvYy5jbGllbnRIZWlnaHR9OwogICAgICAgIH0sCgogICAgICAgIGdldFNjcm9sbDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciB3aW4gPSB0aGlzLmdldFdpbmRvdygpLCBkb2MgPSBnZXRDb21wYXRFbGVtZW50KHRoaXMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHt4OiB3aW4ucGFnZVhPZmZzZXQgfHwgZG9jLnNjcm9sbExlZnQsIHk6IHdpbi5wYWdlWU9mZnNldCB8fCBkb2Muc2Nyb2xsVG9wfTsKICAgICAgICB9LAoKICAgICAgICBnZXRTY3JvbGxTaXplOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIGRvYyA9IGdldENvbXBhdEVsZW1lbnQodGhpcyksCiAgICAgICAgICAgICAgICAgICAgICAgIG1pbiA9IHRoaXMuZ2V0U2l6ZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy5nZXREb2N1bWVudCgpLmJvZHk7CgogICAgICAgICAgICAgICAgcmV0dXJuIHt4OiBNYXRoLm1heChkb2Muc2Nyb2xsV2lkdGgsIGJvZHkuc2Nyb2xsV2lkdGgsIG1pbi54KSwgeTogTWF0aC5tYXgoZG9jLnNjcm9sbEhlaWdodCwgYm9keS5zY3JvbGxIZWlnaHQsIG1pbi55KX07CiAgICAgICAgfSwKCiAgICAgICAgZ2V0UG9zaXRpb246IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4ge3g6IDAsIHk6IDB9OwogICAgICAgIH0sCgogICAgICAgIGdldENvb3JkaW5hdGVzOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHNpemUgPSB0aGlzLmdldFNpemUoKTsKICAgICAgICAgICAgICAgIHJldHVybiB7dG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IHNpemUueSwgcmlnaHQ6IHNpemUueCwgaGVpZ2h0OiBzaXplLnksIHdpZHRoOiBzaXplLnh9OwogICAgICAgIH0KCn0pOwoKLy8gcHJpdmF0ZSBtZXRob2RzCgp2YXIgc3R5bGVTdHJpbmcgPSBFbGVtZW50LmdldENvbXB1dGVkU3R5bGU7CgpmdW5jdGlvbiBzdHlsZU51bWJlcihlbGVtZW50LCBzdHlsZSl7CiAgICAgICAgcmV0dXJuIHN0eWxlU3RyaW5nKGVsZW1lbnQsIHN0eWxlKS50b0ludCgpIHx8IDA7Cn0KCmZ1bmN0aW9uIGJvcmRlckJveChlbGVtZW50KXsKICAgICAgICByZXR1cm4gc3R5bGVTdHJpbmcoZWxlbWVudCwgJy1tb3otYm94LXNpemluZycpID09ICdib3JkZXItYm94JzsKfQoKZnVuY3Rpb24gdG9wQm9yZGVyKGVsZW1lbnQpewogICAgICAgIHJldHVybiBzdHlsZU51bWJlcihlbGVtZW50LCAnYm9yZGVyLXRvcC13aWR0aCcpOwp9CgpmdW5jdGlvbiBsZWZ0Qm9yZGVyKGVsZW1lbnQpewogICAgICAgIHJldHVybiBzdHlsZU51bWJlcihlbGVtZW50LCAnYm9yZGVyLWxlZnQtd2lkdGgnKTsKfQoKZnVuY3Rpb24gaXNCb2R5KGVsZW1lbnQpewogICAgICAgIHJldHVybiAoL14oPzpib2R5fGh0bWwpJC9pKS50ZXN0KGVsZW1lbnQudGFnTmFtZSk7Cn0KCmZ1bmN0aW9uIGdldENvbXBhdEVsZW1lbnQoZWxlbWVudCl7CiAgICAgICAgdmFyIGRvYyA9IGVsZW1lbnQuZ2V0RG9jdW1lbnQoKTsKICAgICAgICByZXR1cm4gKCFkb2MuY29tcGF0TW9kZSB8fCBkb2MuY29tcGF0TW9kZSA9PSAnQ1NTMUNvbXBhdCcpID8gZG9jLmh0bWwgOiBkb2MuYm9keTsKfQoKfSkoKTsKCi8vYWxpYXNlcwpFbGVtZW50LmFsaWFzKHtwb3NpdGlvbjogJ3NldFBvc2l0aW9uJ30pOyAvL2NvbXBhdGFiaWxpdHkKCltXaW5kb3csIERvY3VtZW50LCBFbGVtZW50XS5pbnZva2UoJ2ltcGxlbWVudCcsIHsKCiAgICAgICAgZ2V0SGVpZ2h0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2l6ZSgpLnk7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0V2lkdGg6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTaXplKCkueDsKICAgICAgICB9LAoKICAgICAgICBnZXRTY3JvbGxUb3A6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGwoKS55OwogICAgICAgIH0sCgogICAgICAgIGdldFNjcm9sbExlZnQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGwoKS54OwogICAgICAgIH0sCgogICAgICAgIGdldFNjcm9sbEhlaWdodDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbFNpemUoKS55OwogICAgICAgIH0sCgogICAgICAgIGdldFNjcm9sbFdpZHRoOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsU2l6ZSgpLng7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0VG9wOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UG9zaXRpb24oKS55OwogICAgICAgIH0sCgogICAgICAgIGdldExlZnQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQb3NpdGlvbigpLng7CiAgICAgICAgfQoKfSk7CgoKLyoKLS0tCgpuYW1lOiBGeAoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBiYXNpYyBhbmltYXRpb24gbG9naWMgdG8gYmUgZXh0ZW5kZWQgYnkgYWxsIG90aGVyIEZ4IENsYXNzZXMuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbQ2hhaW4sIEV2ZW50cywgT3B0aW9uc10KCnByb3ZpZGVzOiBGeAoKLi4uCiovCgooZnVuY3Rpb24oKXsKCnZhciBGeCA9IHRoaXMuRnggPSBuZXcgQ2xhc3MoewoKICAgICAgICBJbXBsZW1lbnRzOiBbQ2hhaW4sIEV2ZW50cywgT3B0aW9uc10sCgogICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgIC8qCiAgICAgICAgICAgICAgICBvblN0YXJ0OiBuaWwsCiAgICAgICAgICAgICAgICBvbkNhbmNlbDogbmlsLAogICAgICAgICAgICAgICAgb25Db21wbGV0ZTogbmlsLAogICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGZwczogNjAsCiAgICAgICAgICAgICAgICB1bml0OiBmYWxzZSwKICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsCiAgICAgICAgICAgICAgICBmcmFtZXM6IG51bGwsCiAgICAgICAgICAgICAgICBmcmFtZVNraXA6IHRydWUsCiAgICAgICAgICAgICAgICBsaW5rOiAnaWdub3JlJwogICAgICAgIH0sCgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpewogICAgICAgICAgICAgICAgdGhpcy5zdWJqZWN0ID0gdGhpcy5zdWJqZWN0IHx8IHRoaXM7CiAgICAgICAgICAgICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0VHJhbnNpdGlvbjogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihwKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0oTWF0aC5jb3MoTWF0aC5QSSAqIHApIC0gMSkgLyAyOwogICAgICAgICAgICAgICAgfTsKICAgICAgICB9LAoKICAgICAgICBzdGVwOiBmdW5jdGlvbihub3cpewogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5mcmFtZVNraXApewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZiA9ICh0aGlzLnRpbWUgIT0gbnVsbCkgPyAobm93IC0gdGhpcy50aW1lKSA6IDAsIGZyYW1lcyA9IGRpZmYgLyB0aGlzLmZyYW1lSW50ZXJ2YWw7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGltZSA9IG5vdzsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmFtZSArPSBmcmFtZXM7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lKys7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWUgPCB0aGlzLmZyYW1lcyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IHRoaXMudHJhbnNpdGlvbih0aGlzLmZyYW1lIC8gdGhpcy5mcmFtZXMpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldCh0aGlzLmNvbXB1dGUodGhpcy5mcm9tLCB0aGlzLnRvLCBkZWx0YSkpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmFtZSA9IHRoaXMuZnJhbWVzOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldCh0aGlzLmNvbXB1dGUodGhpcy5mcm9tLCB0aGlzLnRvLCAxKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHNldDogZnVuY3Rpb24obm93KXsKICAgICAgICAgICAgICAgIHJldHVybiBub3c7CiAgICAgICAgfSwKCiAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKICAgICAgICAgICAgICAgIHJldHVybiBGeC5jb21wdXRlKGZyb20sIHRvLCBkZWx0YSk7CiAgICAgICAgfSwKCiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKCkpIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLm9wdGlvbnMubGluayl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NhbmNlbCc6IHRoaXMuY2FuY2VsKCk7IHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjaGFpbic6IHRoaXMuY2hhaW4odGhpcy5jYWxsZXIucGFzcyhhcmd1bWVudHMsIHRoaXMpKTsgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0sCgogICAgICAgIHN0YXJ0OiBmdW5jdGlvbihmcm9tLCB0byl7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2soZnJvbSwgdG8pKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHRoaXMuZnJvbSA9IGZyb207CiAgICAgICAgICAgICAgICB0aGlzLnRvID0gdG87CiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lID0gKHRoaXMub3B0aW9ucy5mcmFtZVNraXApID8gMCA6IC0xOwogICAgICAgICAgICAgICAgdGhpcy50aW1lID0gbnVsbDsKICAgICAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbiA9IHRoaXMuZ2V0VHJhbnNpdGlvbigpOwogICAgICAgICAgICAgICAgdmFyIGZyYW1lcyA9IHRoaXMub3B0aW9ucy5mcmFtZXMsIGZwcyA9IHRoaXMub3B0aW9ucy5mcHMsIGR1cmF0aW9uID0gdGhpcy5vcHRpb25zLmR1cmF0aW9uOwogICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IEZ4LkR1cmF0aW9uc1tkdXJhdGlvbl0gfHwgZHVyYXRpb24udG9JbnQoKTsKICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVJbnRlcnZhbCA9IDEwMDAgLyBmcHM7CiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lcyA9IGZyYW1lcyB8fCBNYXRoLnJvdW5kKHRoaXMuZHVyYXRpb24gLyB0aGlzLmZyYW1lSW50ZXJ2YWwpOwogICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3N0YXJ0JywgdGhpcy5zdWJqZWN0KTsKICAgICAgICAgICAgICAgIHB1c2hJbnN0YW5jZS5jYWxsKHRoaXMsIGZwcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBzdG9wOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nKCkpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWUgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICBwdWxsSW5zdGFuY2UuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMuZnBzKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWVzID09IHRoaXMuZnJhbWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdjb21wbGV0ZScsIHRoaXMuc3ViamVjdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNhbGxDaGFpbigpKSB0aGlzLmZpcmVFdmVudCgnY2hhaW5Db21wbGV0ZScsIHRoaXMuc3ViamVjdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3N0b3AnLCB0aGlzLnN1YmplY3QpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmcoKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGltZSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIHB1bGxJbnN0YW5jZS5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucy5mcHMpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lID0gdGhpcy5mcmFtZXM7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdjYW5jZWwnLCB0aGlzLnN1YmplY3QpLmNsZWFyQ2hhaW4oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHBhdXNlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nKCkpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWUgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICBwdWxsSW5zdGFuY2UuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMuZnBzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlc3VtZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmICgodGhpcy5mcmFtZSA8IHRoaXMuZnJhbWVzKSAmJiAhdGhpcy5pc1J1bm5pbmcoKSkgcHVzaEluc3RhbmNlLmNhbGwodGhpcywgdGhpcy5vcHRpb25zLmZwcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBpc1J1bm5pbmc6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IGluc3RhbmNlc1t0aGlzLm9wdGlvbnMuZnBzXTsKICAgICAgICAgICAgICAgIHJldHVybiBsaXN0ICYmIGxpc3QuY29udGFpbnModGhpcyk7CiAgICAgICAgfQoKfSk7CgpGeC5jb21wdXRlID0gZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKICAgICAgICByZXR1cm4gKHRvIC0gZnJvbSkgKiBkZWx0YSArIGZyb207Cn07CgpGeC5EdXJhdGlvbnMgPSB7J3Nob3J0JzogMjUwLCAnbm9ybWFsJzogNTAwLCAnbG9uZyc6IDEwMDB9OwoKLy8gZ2xvYmFsIHRpbWVycwoKdmFyIGluc3RhbmNlcyA9IHt9LCB0aW1lcnMgPSB7fTsKCnZhciBsb29wID0gZnVuY3Rpb24oKXsKICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTsKICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGktLTspewogICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpc1tpXTsKICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkgaW5zdGFuY2Uuc3RlcChub3cpOwogICAgICAgIH0KfTsKCnZhciBwdXNoSW5zdGFuY2UgPSBmdW5jdGlvbihmcHMpewogICAgICAgIHZhciBsaXN0ID0gaW5zdGFuY2VzW2Zwc10gfHwgKGluc3RhbmNlc1tmcHNdID0gW10pOwogICAgICAgIGxpc3QucHVzaCh0aGlzKTsKICAgICAgICBpZiAoIXRpbWVyc1tmcHNdKSB0aW1lcnNbZnBzXSA9IGxvb3AucGVyaW9kaWNhbChNYXRoLnJvdW5kKDEwMDAgLyBmcHMpLCBsaXN0KTsKfTsKCnZhciBwdWxsSW5zdGFuY2UgPSBmdW5jdGlvbihmcHMpewogICAgICAgIHZhciBsaXN0ID0gaW5zdGFuY2VzW2Zwc107CiAgICAgICAgaWYgKGxpc3QpewogICAgICAgICAgICAgICAgbGlzdC5lcmFzZSh0aGlzKTsKICAgICAgICAgICAgICAgIGlmICghbGlzdC5sZW5ndGggJiYgdGltZXJzW2Zwc10pewogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5zdGFuY2VzW2Zwc107CiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyc1tmcHNdID0gY2xlYXJJbnRlcnZhbCh0aW1lcnNbZnBzXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQp9OwoKfSkoKTsKCgovKgotLS0KCm5hbWU6IEZ4LkNTUwoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBDU1MgYW5pbWF0aW9uIGxvZ2ljLiBVc2VkIGJ5IEZ4LlR3ZWVuLCBGeC5Nb3JwaCwgRnguRWxlbWVudHMuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbRngsIEVsZW1lbnQuU3R5bGVdCgpwcm92aWRlczogRnguQ1NTCgouLi4KKi8KCkZ4LkNTUyA9IG5ldyBDbGFzcyh7CgogICAgICAgIEV4dGVuZHM6IEZ4LAoKICAgICAgICAvL3ByZXBhcmVzIHRoZSBiYXNlIGZyb20vdG8gb2JqZWN0CgogICAgICAgIHByZXBhcmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZXMpewogICAgICAgICAgICAgICAgdmFsdWVzID0gQXJyYXkuZnJvbSh2YWx1ZXMpOwogICAgICAgICAgICAgICAgaWYgKHZhbHVlc1sxXSA9PSBudWxsKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzWzFdID0gdmFsdWVzWzBdOwogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbMF0gPSBlbGVtZW50LmdldFN0eWxlKHByb3BlcnR5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSB2YWx1ZXMubWFwKHRoaXMucGFyc2UpOwogICAgICAgICAgICAgICAgcmV0dXJuIHtmcm9tOiBwYXJzZWRbMF0sIHRvOiBwYXJzZWRbMV19OwogICAgICAgIH0sCgogICAgICAgIC8vcGFyc2VzIGEgdmFsdWUgaW50byBhbiBhcnJheQoKICAgICAgICBwYXJzZTogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgdmFsdWUgPSBGdW5jdGlvbi5mcm9tKHZhbHVlKSgpOwogICAgICAgICAgICAgICAgdmFsdWUgPSAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSA/IHZhbHVlLnNwbGl0KCcgJykgOiBBcnJheS5mcm9tKHZhbHVlKTsKICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoZnVuY3Rpb24odmFsKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gU3RyaW5nKHZhbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZWFjaChGeC5DU1MuUGFyc2VycywgZnVuY3Rpb24ocGFyc2VyLCBrZXkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCkgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZXIucGFyc2UodmFsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkIHx8IHBhcnNlZCA9PT0gMCkgZm91bmQgPSB7dmFsdWU6IHBhcnNlZCwgcGFyc2VyOiBwYXJzZXJ9OwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBmb3VuZCB8fCB7dmFsdWU6IHZhbCwgcGFyc2VyOiBGeC5DU1MuUGFyc2Vycy5TdHJpbmd9OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICAvL2NvbXB1dGVzIGJ5IGEgZnJvbSBhbmQgdG8gcHJlcGFyZWQgb2JqZWN0cywgdXNpbmcgdGhlaXIgcGFyc2Vycy4KCiAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKICAgICAgICAgICAgICAgIHZhciBjb21wdXRlZCA9IFtdOwogICAgICAgICAgICAgICAgKE1hdGgubWluKGZyb20ubGVuZ3RoLCB0by5sZW5ndGgpKS50aW1lcyhmdW5jdGlvbihpKXsKICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQucHVzaCh7dmFsdWU6IGZyb21baV0ucGFyc2VyLmNvbXB1dGUoZnJvbVtpXS52YWx1ZSwgdG9baV0udmFsdWUsIGRlbHRhKSwgcGFyc2VyOiBmcm9tW2ldLnBhcnNlcn0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjb21wdXRlZC4kZmFtaWx5ID0gRnVuY3Rpb24uZnJvbSgnZng6Y3NzOnZhbHVlJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tcHV0ZWQ7CiAgICAgICAgfSwKCiAgICAgICAgLy9zZXJ2ZXMgdGhlIHZhbHVlIGFzIHNldHRhYmxlCgogICAgICAgIHNlcnZlOiBmdW5jdGlvbih2YWx1ZSwgdW5pdCl7CiAgICAgICAgICAgICAgICBpZiAodHlwZU9mKHZhbHVlKSAhPSAnZng6Y3NzOnZhbHVlJykgdmFsdWUgPSB0aGlzLnBhcnNlKHZhbHVlKTsKICAgICAgICAgICAgICAgIHZhciByZXR1cm5lZCA9IFtdOwogICAgICAgICAgICAgICAgdmFsdWUuZWFjaChmdW5jdGlvbihiaXQpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5lZCA9IHJldHVybmVkLmNvbmNhdChiaXQucGFyc2VyLnNlcnZlKGJpdC52YWx1ZSwgdW5pdCkpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuZWQ7CiAgICAgICAgfSwKCiAgICAgICAgLy9yZW5kZXJzIHRoZSBjaGFuZ2UgdG8gYW4gZWxlbWVudAoKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCl7CiAgICAgICAgICAgICAgICBlbGVtZW50LnNldFN0eWxlKHByb3BlcnR5LCB0aGlzLnNlcnZlKHZhbHVlLCB1bml0KSk7CiAgICAgICAgfSwKCiAgICAgICAgLy9zZWFyY2hlcyBpbnNpZGUgdGhlIHBhZ2UgY3NzIHRvIGZpbmQgdGhlIHZhbHVlcyBmb3IgYSBzZWxlY3RvcgoKICAgICAgICBzZWFyY2g6IGZ1bmN0aW9uKHNlbGVjdG9yKXsKICAgICAgICAgICAgICAgIGlmIChGeC5DU1MuQ2FjaGVbc2VsZWN0b3JdKSByZXR1cm4gRnguQ1NTLkNhY2hlW3NlbGVjdG9yXTsKICAgICAgICAgICAgICAgIHZhciB0byA9IHt9LCBzZWxlY3RvclRlc3QgPSBuZXcgUmVnRXhwKCdeJyArIHNlbGVjdG9yLmVzY2FwZVJlZ0V4cCgpICsgJyQnKTsKICAgICAgICAgICAgICAgIEFycmF5LmVhY2goZG9jdW1lbnQuc3R5bGVTaGVldHMsIGZ1bmN0aW9uKHNoZWV0LCBqKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhyZWYgPSBzaGVldC5ocmVmOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaHJlZiAmJiBocmVmLmNvbnRhaW5zKCc6Ly8nKSAmJiAhaHJlZi5jb250YWlucyhkb2N1bWVudC5kb21haW4pKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBydWxlcyA9IHNoZWV0LnJ1bGVzIHx8IHNoZWV0LmNzc1J1bGVzOwogICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5lYWNoKHJ1bGVzLCBmdW5jdGlvbihydWxlLCBpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJ1bGUuc3R5bGUpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JUZXh0ID0gKHJ1bGUuc2VsZWN0b3JUZXh0KSA/IHJ1bGUuc2VsZWN0b3JUZXh0LnJlcGxhY2UoL15cdysvLCBmdW5jdGlvbihtKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0b3JUZXh0IHx8ICFzZWxlY3RvclRlc3QudGVzdChzZWxlY3RvclRleHQpKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmVhY2goRWxlbWVudC5TdHlsZXMsIGZ1bmN0aW9uKHZhbHVlLCBzdHlsZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJ1bGUuc3R5bGVbc3R5bGVdIHx8IEVsZW1lbnQuU2hvcnRTdHlsZXNbc3R5bGVdKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFN0cmluZyhydWxlLnN0eWxlW3N0eWxlXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b1tzdHlsZV0gPSAoKC9ecmdiLykudGVzdCh2YWx1ZSkpID8gdmFsdWUucmdiVG9IZXgoKSA6IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIEZ4LkNTUy5DYWNoZVtzZWxlY3Rvcl0gPSB0bzsKICAgICAgICB9Cgp9KTsKCkZ4LkNTUy5DYWNoZSA9IHt9OwoKRnguQ1NTLlBhcnNlcnMgPSB7CgogICAgICAgIENvbG9yOiB7CiAgICAgICAgICAgICAgICBwYXJzZTogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubWF0Y2goL14jWzAtOWEtZl17Myw2fSQvaSkpIHJldHVybiB2YWx1ZS5oZXhUb1JnYih0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgodmFsdWUgPSB2YWx1ZS5tYXRjaCgvKFxkKyksXHMqKFxkKyksXHMqKFxkKykvKSkpID8gW3ZhbHVlWzFdLCB2YWx1ZVsyXSwgdmFsdWVbM11dIDogZmFsc2U7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyb20ubWFwKGZ1bmN0aW9uKHZhbHVlLCBpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChGeC5jb21wdXRlKGZyb21baV0sIHRvW2ldLCBkZWx0YSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzZXJ2ZTogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKE51bWJlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgTnVtYmVyOiB7CiAgICAgICAgICAgICAgICBwYXJzZTogcGFyc2VGbG9hdCwKICAgICAgICAgICAgICAgIGNvbXB1dGU6IEZ4LmNvbXB1dGUsCiAgICAgICAgICAgICAgICBzZXJ2ZTogZnVuY3Rpb24odmFsdWUsIHVuaXQpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHVuaXQpID8gdmFsdWUgKyB1bml0IDogdmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgU3RyaW5nOiB7CiAgICAgICAgICAgICAgICBwYXJzZTogRnVuY3Rpb24uZnJvbShmYWxzZSksCiAgICAgICAgICAgICAgICBjb21wdXRlOiBmdW5jdGlvbih6ZXJvLCBvbmUpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb25lOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHNlcnZlOiBmdW5jdGlvbih6ZXJvKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHplcm87CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQoKfTsKCgoKCi8qCi0tLQoKbmFtZTogRnguVHdlZW4KCmRlc2NyaXB0aW9uOiBGb3JtZXJseSBGeC5TdHlsZSwgZWZmZWN0IHRvIHRyYW5zaXRpb24gYW55IENTUyBwcm9wZXJ0eSBmb3IgYW4gZWxlbWVudC4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IEZ4LkNTUwoKcHJvdmlkZXM6IFtGeC5Ud2VlbiwgRWxlbWVudC5mYWRlLCBFbGVtZW50LmhpZ2hsaWdodF0KCi4uLgoqLwoKRnguVHdlZW4gPSBuZXcgQ2xhc3MoewoKICAgICAgICBFeHRlbmRzOiBGeC5DU1MsCgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpewogICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5zdWJqZWN0ID0gZG9jdW1lbnQuaWQoZWxlbWVudCk7CiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudChvcHRpb25zKTsKICAgICAgICB9LAoKICAgICAgICBzZXQ6IGZ1bmN0aW9uKHByb3BlcnR5LCBub3cpewogICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IHByb3BlcnR5OwogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IHRoaXMucHJvcGVydHkgfHwgdGhpcy5vcHRpb25zLnByb3BlcnR5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIodGhpcy5lbGVtZW50LCBwcm9wZXJ0eSwgbm93LCB0aGlzLm9wdGlvbnMudW5pdCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBzdGFydDogZnVuY3Rpb24ocHJvcGVydHksIGZyb20sIHRvKXsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVjayhwcm9wZXJ0eSwgZnJvbSwgdG8pKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkuZmxhdHRlbihhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IHRoaXMub3B0aW9ucy5wcm9wZXJ0eSB8fCBhcmdzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gdGhpcy5wcmVwYXJlKHRoaXMuZWxlbWVudCwgdGhpcy5wcm9wZXJ0eSwgYXJncyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQocGFyc2VkLmZyb20sIHBhcnNlZC50byk7CiAgICAgICAgfQoKfSk7CgpFbGVtZW50LlByb3BlcnRpZXMudHdlZW4gPSB7CgogICAgICAgIHNldDogZnVuY3Rpb24ob3B0aW9ucyl7CiAgICAgICAgICAgICAgICB0aGlzLmdldCgndHdlZW4nKS5jYW5jZWwoKS5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHR3ZWVuID0gdGhpcy5yZXRyaWV2ZSgndHdlZW4nKTsKICAgICAgICAgICAgICAgIGlmICghdHdlZW4pewogICAgICAgICAgICAgICAgICAgICAgICB0d2VlbiA9IG5ldyBGeC5Ud2Vlbih0aGlzLCB7bGluazogJ2NhbmNlbCd9KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZSgndHdlZW4nLCB0d2Vlbik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHdlZW47CiAgICAgICAgfQoKfTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCiAgICAgICAgdHdlZW46IGZ1bmN0aW9uKHByb3BlcnR5LCBmcm9tLCB0byl7CiAgICAgICAgICAgICAgICB0aGlzLmdldCgndHdlZW4nKS5zdGFydChwcm9wZXJ0eSwgZnJvbSwgdG8pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZmFkZTogZnVuY3Rpb24oaG93KXsKICAgICAgICAgICAgICAgIHZhciBmYWRlID0gdGhpcy5nZXQoJ3R3ZWVuJyksIG1ldGhvZCwgdG8sIHRvZ2dsZTsKICAgICAgICAgICAgICAgIGlmIChob3cgPT0gbnVsbCkgaG93ID0gJ3RvZ2dsZSc7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGhvdyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2luJzogbWV0aG9kID0gJ3N0YXJ0JzsgdG8gPSAxOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb3V0JzogbWV0aG9kID0gJ3N0YXJ0JzsgdG8gPSAwOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2hvdyc6IG1ldGhvZCA9ICdzZXQnOyB0byA9IDE7IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdoaWRlJzogbWV0aG9kID0gJ3NldCc7IHRvID0gMDsgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RvZ2dsZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWcgPSB0aGlzLnJldHJpZXZlKCdmYWRlOmZsYWcnLCB0aGlzLmdldFN0eWxlKCdvcGFjaXR5JykgPT0gMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gJ3N0YXJ0JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byA9IGZsYWcgPyAwIDogMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JlKCdmYWRlOmZsYWcnLCAhZmxhZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG1ldGhvZCA9ICdzdGFydCc7IHRvID0gaG93OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCF0b2dnbGUpIHRoaXMuZWxpbWluYXRlKCdmYWRlOmZsYWcnKTsKICAgICAgICAgICAgICAgIGZhZGVbbWV0aG9kXSgnb3BhY2l0eScsIHRvKTsKICAgICAgICAgICAgICAgIGlmIChtZXRob2QgPT0gJ3NldCcgfHwgdG8gIT0gMCkgdGhpcy5zZXRTdHlsZSgndmlzaWJpbGl0eScsIHRvID09IDAgPyAnaGlkZGVuJyA6ICd2aXNpYmxlJyk7CiAgICAgICAgICAgICAgICBlbHNlIGZhZGUuY2hhaW4oZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldFN0eWxlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxDaGFpbigpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBoaWdobGlnaHQ6IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpewogICAgICAgICAgICAgICAgaWYgKCFlbmQpewogICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLnJldHJpZXZlKCdoaWdobGlnaHQ6b3JpZ2luYWwnLCB0aGlzLmdldFN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJykpOwogICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSAoZW5kID09ICd0cmFuc3BhcmVudCcpID8gJyNmZmYnIDogZW5kOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHR3ZWVuID0gdGhpcy5nZXQoJ3R3ZWVuJyk7CiAgICAgICAgICAgICAgICB0d2Vlbi5zdGFydCgnYmFja2dyb3VuZC1jb2xvcicsIHN0YXJ0IHx8ICcjZmZmZjg4JywgZW5kKS5jaGFpbihmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgdGhpcy5yZXRyaWV2ZSgnaGlnaGxpZ2h0Om9yaWdpbmFsJykpOwogICAgICAgICAgICAgICAgICAgICAgICB0d2Vlbi5jYWxsQ2hhaW4oKTsKICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCgovKgotLS0KCm5hbWU6IEZ4Lk1vcnBoCgpkZXNjcmlwdGlvbjogRm9ybWVybHkgRnguU3R5bGVzLCBlZmZlY3QgdG8gdHJhbnNpdGlvbiBhbnkgbnVtYmVyIG9mIENTUyBwcm9wZXJ0aWVzIGZvciBhbiBlbGVtZW50IHVzaW5nIGFuIG9iamVjdCBvZiBydWxlcywgb3IgQ1NTIGJhc2VkIHNlbGVjdG9yIHJ1bGVzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogRnguQ1NTCgpwcm92aWRlczogRnguTW9ycGgKCi4uLgoqLwoKRnguTW9ycGggPSBuZXcgQ2xhc3MoewoKICAgICAgICBFeHRlbmRzOiBGeC5DU1MsCgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpewogICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5zdWJqZWN0ID0gZG9jdW1lbnQuaWQoZWxlbWVudCk7CiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudChvcHRpb25zKTsKICAgICAgICB9LAoKICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5vdyl7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5vdyA9PSAnc3RyaW5nJykgbm93ID0gdGhpcy5zZWFyY2gobm93KTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gbm93KSB0aGlzLnJlbmRlcih0aGlzLmVsZW1lbnQsIHAsIG5vd1twXSwgdGhpcy5vcHRpb25zLnVuaXQpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKICAgICAgICAgICAgICAgIHZhciBub3cgPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gZnJvbSkgbm93W3BdID0gdGhpcy5wYXJlbnQoZnJvbVtwXSwgdG9bcF0sIGRlbHRhKTsKICAgICAgICAgICAgICAgIHJldHVybiBub3c7CiAgICAgICAgfSwKCiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKHByb3BlcnRpZXMpewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrKHByb3BlcnRpZXMpKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydGllcyA9PSAnc3RyaW5nJykgcHJvcGVydGllcyA9IHRoaXMuc2VhcmNoKHByb3BlcnRpZXMpOwogICAgICAgICAgICAgICAgdmFyIGZyb20gPSB7fSwgdG8gPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcHJvcGVydGllcyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSB0aGlzLnByZXBhcmUodGhpcy5lbGVtZW50LCBwLCBwcm9wZXJ0aWVzW3BdKTsKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVtwXSA9IHBhcnNlZC5mcm9tOwogICAgICAgICAgICAgICAgICAgICAgICB0b1twXSA9IHBhcnNlZC50bzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudChmcm9tLCB0byk7CiAgICAgICAgfQoKfSk7CgpFbGVtZW50LlByb3BlcnRpZXMubW9ycGggPSB7CgogICAgICAgIHNldDogZnVuY3Rpb24ob3B0aW9ucyl7CiAgICAgICAgICAgICAgICB0aGlzLmdldCgnbW9ycGgnKS5jYW5jZWwoKS5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIG1vcnBoID0gdGhpcy5yZXRyaWV2ZSgnbW9ycGgnKTsKICAgICAgICAgICAgICAgIGlmICghbW9ycGgpewogICAgICAgICAgICAgICAgICAgICAgICBtb3JwaCA9IG5ldyBGeC5Nb3JwaCh0aGlzLCB7bGluazogJ2NhbmNlbCd9KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZSgnbW9ycGgnLCBtb3JwaCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbW9ycGg7CiAgICAgICAgfQoKfTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCiAgICAgICAgbW9ycGg6IGZ1bmN0aW9uKHByb3BzKXsKICAgICAgICAgICAgICAgIHRoaXMuZ2V0KCdtb3JwaCcpLnN0YXJ0KHByb3BzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKCi8qCi0tLQoKbmFtZTogRnguVHJhbnNpdGlvbnMKCmRlc2NyaXB0aW9uOiBDb250YWlucyBhIHNldCBvZiBhZHZhbmNlZCB0cmFuc2l0aW9ucyB0byBiZSB1c2VkIHdpdGggYW55IG9mIHRoZSBGeCBDbGFzc2VzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjcmVkaXRzOgogIC0gRWFzaW5nIEVxdWF0aW9ucyBieSBSb2JlcnQgUGVubmVyLCA8aHR0cDovL3d3dy5yb2JlcnRwZW5uZXIuY29tL2Vhc2luZy8+LCBtb2RpZmllZCBhbmQgb3B0aW1pemVkIHRvIGJlIHVzZWQgd2l0aCBNb29Ub29scy4KCnJlcXVpcmVzOiBGeAoKcHJvdmlkZXM6IEZ4LlRyYW5zaXRpb25zCgouLi4KKi8KCkZ4LmltcGxlbWVudCh7CgogICAgICAgIGdldFRyYW5zaXRpb246IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgdHJhbnMgPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbiB8fCBGeC5UcmFuc2l0aW9ucy5TaW5lLmVhc2VJbk91dDsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdHJhbnMgPT0gJ3N0cmluZycpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHRyYW5zLnNwbGl0KCc6Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zID0gRnguVHJhbnNpdGlvbnM7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zID0gdHJhbnNbZGF0YVswXV0gfHwgdHJhbnNbZGF0YVswXS5jYXBpdGFsaXplKCldOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVsxXSkgdHJhbnMgPSB0cmFuc1snZWFzZScgKyBkYXRhWzFdLmNhcGl0YWxpemUoKSArIChkYXRhWzJdID8gZGF0YVsyXS5jYXBpdGFsaXplKCkgOiAnJyldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zOwogICAgICAgIH0KCn0pOwoKRnguVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHRyYW5zaXRpb24sIHBhcmFtcyl7CiAgICAgICAgcGFyYW1zID0gQXJyYXkuZnJvbShwYXJhbXMpOwogICAgICAgIHZhciBlYXNlSW4gPSBmdW5jdGlvbihwb3MpewogICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zaXRpb24ocG9zLCBwYXJhbXMpOwogICAgICAgIH07CiAgICAgICAgcmV0dXJuIE9iamVjdC5hcHBlbmQoZWFzZUluLCB7CiAgICAgICAgICAgICAgICBlYXNlSW46IGVhc2VJbiwKICAgICAgICAgICAgICAgIGVhc2VPdXQ6IGZ1bmN0aW9uKHBvcyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxIC0gdHJhbnNpdGlvbigxIC0gcG9zLCBwYXJhbXMpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVhc2VJbk91dDogZnVuY3Rpb24ocG9zKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChwb3MgPD0gMC41ID8gdHJhbnNpdGlvbigyICogcG9zLCBwYXJhbXMpIDogKDIgLSB0cmFuc2l0aW9uKDIgKiAoMSAtIHBvcyksIHBhcmFtcykpKSAvIDI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSk7Cn07CgpGeC5UcmFuc2l0aW9ucyA9IHsKCiAgICAgICAgbGluZWFyOiBmdW5jdGlvbih6ZXJvKXsKICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvOwogICAgICAgIH0KCn07CgoKCkZ4LlRyYW5zaXRpb25zLmV4dGVuZCA9IGZ1bmN0aW9uKHRyYW5zaXRpb25zKXsKICAgICAgICBmb3IgKHZhciB0cmFuc2l0aW9uIGluIHRyYW5zaXRpb25zKSBGeC5UcmFuc2l0aW9uc1t0cmFuc2l0aW9uXSA9IG5ldyBGeC5UcmFuc2l0aW9uKHRyYW5zaXRpb25zW3RyYW5zaXRpb25dKTsKfTsKCkZ4LlRyYW5zaXRpb25zLmV4dGVuZCh7CgogICAgICAgIFBvdzogZnVuY3Rpb24ocCwgeCl7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5wb3cocCwgeCAmJiB4WzBdIHx8IDYpOwogICAgICAgIH0sCgogICAgICAgIEV4cG86IGZ1bmN0aW9uKHApewogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KDIsIDggKiAocCAtIDEpKTsKICAgICAgICB9LAoKICAgICAgICBDaXJjOiBmdW5jdGlvbihwKXsKICAgICAgICAgICAgICAgIHJldHVybiAxIC0gTWF0aC5zaW4oTWF0aC5hY29zKHApKTsKICAgICAgICB9LAoKICAgICAgICBTaW5lOiBmdW5jdGlvbihwKXsKICAgICAgICAgICAgICAgIHJldHVybiAxIC0gTWF0aC5jb3MocCAqIE1hdGguUEkgLyAyKTsKICAgICAgICB9LAoKICAgICAgICBCYWNrOiBmdW5jdGlvbihwLCB4KXsKICAgICAgICAgICAgICAgIHggPSB4ICYmIHhbMF0gfHwgMS42MTg7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5wb3cocCwgMikgKiAoKHggKyAxKSAqIHAgLSB4KTsKICAgICAgICB9LAoKICAgICAgICBCb3VuY2U6IGZ1bmN0aW9uKHApewogICAgICAgICAgICAgICAgdmFyIHZhbHVlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDAsIGIgPSAxOyAxOyBhICs9IGIsIGIgLz0gMil7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwID49ICg3IC0gNCAqIGEpIC8gMTEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYiAqIGIgLSBNYXRoLnBvdygoMTEgLSA2ICogYSAtIDExICogcCkgLyA0LCAyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0sCgogICAgICAgIEVsYXN0aWM6IGZ1bmN0aW9uKHAsIHgpewogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KDIsIDEwICogLS1wKSAqIE1hdGguY29zKDIwICogcCAqIE1hdGguUEkgKiAoeCAmJiB4WzBdIHx8IDEpIC8gMyk7CiAgICAgICAgfQoKfSk7CgpbJ1F1YWQnLCAnQ3ViaWMnLCAnUXVhcnQnLCAnUXVpbnQnXS5lYWNoKGZ1bmN0aW9uKHRyYW5zaXRpb24sIGkpewogICAgICAgIEZ4LlRyYW5zaXRpb25zW3RyYW5zaXRpb25dID0gbmV3IEZ4LlRyYW5zaXRpb24oZnVuY3Rpb24ocCl7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5wb3cocCwgaSArIDIpOwogICAgICAgIH0pOwp9KTsKCgovKgotLS0KCm5hbWU6IFJlcXVlc3QKCmRlc2NyaXB0aW9uOiBQb3dlcmZ1bCBhbGwgcHVycG9zZSBSZXF1ZXN0IENsYXNzLiBVc2VzIFhNTEhUVFBSZXF1ZXN0LgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW09iamVjdCwgRWxlbWVudCwgQ2hhaW4sIEV2ZW50cywgT3B0aW9ucywgQnJvd3Nlcl0KCnByb3ZpZGVzOiBSZXF1ZXN0CgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGVtcHR5ID0gZnVuY3Rpb24oKXt9LAogICAgICAgIHByb2dyZXNzU3VwcG9ydCA9ICgnb25wcm9ncmVzcycgaW4gbmV3IEJyb3dzZXIuUmVxdWVzdCk7Cgp2YXIgUmVxdWVzdCA9IHRoaXMuUmVxdWVzdCA9IG5ldyBDbGFzcyh7CgogICAgICAgIEltcGxlbWVudHM6IFtDaGFpbiwgRXZlbnRzLCBPcHRpb25zXSwKCiAgICAgICAgb3B0aW9uczogey8qCiAgICAgICAgICAgICAgICBvblJlcXVlc3Q6IGZ1bmN0aW9uKCl7fSwKICAgICAgICAgICAgICAgIG9uTG9hZHN0YXJ0OiBmdW5jdGlvbihldmVudCwgeGhyKXt9LAogICAgICAgICAgICAgICAgb25Qcm9ncmVzczogZnVuY3Rpb24oZXZlbnQsIHhocil7fSwKICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uKCl7fSwKICAgICAgICAgICAgICAgIG9uQ2FuY2VsOiBmdW5jdGlvbigpe30sCiAgICAgICAgICAgICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlVGV4dCwgcmVzcG9uc2VYTUwpe30sCiAgICAgICAgICAgICAgICBvbkZhaWx1cmU6IGZ1bmN0aW9uKHhocil7fSwKICAgICAgICAgICAgICAgIG9uRXhjZXB0aW9uOiBmdW5jdGlvbihoZWFkZXJOYW1lLCB2YWx1ZSl7fSwKICAgICAgICAgICAgICAgIG9uVGltZW91dDogZnVuY3Rpb24oKXt9LAogICAgICAgICAgICAgICAgdXNlcjogJycsCiAgICAgICAgICAgICAgICBwYXNzd29yZDogJycsKi8KICAgICAgICAgICAgICAgIHVybDogJycsCiAgICAgICAgICAgICAgICBkYXRhOiAnJywKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnLAogICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ3RleHQvamF2YXNjcmlwdCwgdGV4dC9odG1sLCBhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sLCAqLyonCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsCiAgICAgICAgICAgICAgICBmb3JtYXQ6IGZhbHNlLAogICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgICAgICAgICAgICBsaW5rOiAnaWdub3JlJywKICAgICAgICAgICAgICAgIGlzU3VjY2VzczogbnVsbCwKICAgICAgICAgICAgICAgIGVtdWxhdGlvbjogdHJ1ZSwKICAgICAgICAgICAgICAgIHVybEVuY29kZWQ6IHRydWUsCiAgICAgICAgICAgICAgICBlbmNvZGluZzogJ3V0Zi04JywKICAgICAgICAgICAgICAgIGV2YWxTY3JpcHRzOiBmYWxzZSwKICAgICAgICAgICAgICAgIGV2YWxSZXNwb25zZTogZmFsc2UsCiAgICAgICAgICAgICAgICB0aW1lb3V0OiAwLAogICAgICAgICAgICAgICAgbm9DYWNoZTogZmFsc2UKICAgICAgICB9LAoKICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKXsKICAgICAgICAgICAgICAgIHRoaXMueGhyID0gbmV3IEJyb3dzZXIuUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJzID0gdGhpcy5vcHRpb25zLmhlYWRlcnM7CiAgICAgICAgfSwKCiAgICAgICAgb25TdGF0ZUNoYW5nZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciB4aHIgPSB0aGlzLnhocjsKICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPSA0IHx8ICF0aGlzLnJ1bm5pbmcpIHJldHVybjsKICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSAwOwogICAgICAgICAgICAgICAgRnVuY3Rpb24uYXR0ZW1wdChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1czsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSAoc3RhdHVzID09IDEyMjMpID8gMjA0IDogc3RhdHVzOwogICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTsKICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTsKICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzc1N1cHBvcnQpIHhoci5vbnByb2dyZXNzID0geGhyLm9ubG9hZHN0YXJ0ID0gZW1wdHk7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7CgogICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZSA9IHt0ZXh0OiB0aGlzLnhoci5yZXNwb25zZVRleHQgfHwgJycsIHhtbDogdGhpcy54aHIucmVzcG9uc2VYTUx9OwogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pc1N1Y2Nlc3MuY2FsbCh0aGlzLCB0aGlzLnN0YXR1cykpCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzcyh0aGlzLnJlc3BvbnNlLnRleHQsIHRoaXMucmVzcG9uc2UueG1sKTsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsdXJlKCk7CiAgICAgICAgfSwKCiAgICAgICAgaXNTdWNjZXNzOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdHVzOwogICAgICAgICAgICAgICAgcmV0dXJuIChzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCk7CiAgICAgICAgfSwKCiAgICAgICAgaXNSdW5uaW5nOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5ydW5uaW5nOwogICAgICAgIH0sCgogICAgICAgIHByb2Nlc3NTY3JpcHRzOiBmdW5jdGlvbih0ZXh0KXsKICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXZhbFJlc3BvbnNlIHx8ICgvKGVjbWF8amF2YSlzY3JpcHQvKS50ZXN0KHRoaXMuZ2V0SGVhZGVyKCdDb250ZW50LXR5cGUnKSkpIHJldHVybiBCcm93c2VyLmV4ZWModGV4dCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dC5zdHJpcFNjcmlwdHModGhpcy5vcHRpb25zLmV2YWxTY3JpcHRzKTsKICAgICAgICB9LAoKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbih0ZXh0LCB4bWwpewogICAgICAgICAgICAgICAgdGhpcy5vblN1Y2Nlc3ModGhpcy5wcm9jZXNzU2NyaXB0cyh0ZXh0KSwgeG1sKTsKICAgICAgICB9LAoKICAgICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnY29tcGxldGUnLCBhcmd1bWVudHMpLmZpcmVFdmVudCgnc3VjY2VzcycsIGFyZ3VtZW50cykuY2FsbENoYWluKCk7CiAgICAgICAgfSwKCiAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMub25GYWlsdXJlKCk7CiAgICAgICAgfSwKCiAgICAgICAgb25GYWlsdXJlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2NvbXBsZXRlJykuZmlyZUV2ZW50KCdmYWlsdXJlJywgdGhpcy54aHIpOwogICAgICAgIH0sCgogICAgICAgIGxvYWRzdGFydDogZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2xvYWRzdGFydCcsIFtldmVudCwgdGhpcy54aHJdKTsKICAgICAgICB9LAoKICAgICAgICBwcm9ncmVzczogZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3Byb2dyZXNzJywgW2V2ZW50LCB0aGlzLnhocl0pOwogICAgICAgIH0sCgogICAgICAgIHRpbWVvdXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgndGltZW91dCcsIHRoaXMueGhyKTsKICAgICAgICB9LAoKICAgICAgICBzZXRIZWFkZXI6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXsKICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyc1tuYW1lXSA9IHZhbHVlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0SGVhZGVyOiBmdW5jdGlvbihuYW1lKXsKICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5hdHRlbXB0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcihuYW1lKTsKICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7CiAgICAgICAgfSwKCiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucnVubmluZykgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5saW5rKXsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2FuY2VsJzogdGhpcy5jYW5jZWwoKTsgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoYWluJzogdGhpcy5jaGFpbih0aGlzLmNhbGxlci5wYXNzKGFyZ3VtZW50cywgdGhpcykpOyByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSwKCiAgICAgICAgc2VuZDogZnVuY3Rpb24ob3B0aW9ucyl7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2sob3B0aW9ucykpIHJldHVybiB0aGlzOwoKICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5pc1N1Y2Nlc3MgPSB0aGlzLm9wdGlvbnMuaXNTdWNjZXNzIHx8IHRoaXMuaXNTdWNjZXNzOwogICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVPZihvcHRpb25zKTsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ2VsZW1lbnQnKSBvcHRpb25zID0ge2RhdGE6IG9wdGlvbnN9OwoKICAgICAgICAgICAgICAgIHZhciBvbGQgPSB0aGlzLm9wdGlvbnM7CiAgICAgICAgICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFwcGVuZCh7ZGF0YTogb2xkLmRhdGEsIHVybDogb2xkLnVybCwgbWV0aG9kOiBvbGQubWV0aG9kfSwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZGF0YSwgdXJsID0gU3RyaW5nKG9wdGlvbnMudXJsKSwgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QudG9Mb3dlckNhc2UoKTsKCiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGVPZihkYXRhKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VsZW1lbnQnOiBkYXRhID0gZG9jdW1lbnQuaWQoZGF0YSkudG9RdWVyeVN0cmluZygpOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzogY2FzZSAnaGFzaCc6IGRhdGEgPSBPYmplY3QudG9RdWVyeVN0cmluZyhkYXRhKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZvcm1hdCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXQgPSAnZm9ybWF0PScgKyB0aGlzLm9wdGlvbnMuZm9ybWF0OwogICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gKGRhdGEpID8gZm9ybWF0ICsgJyYnICsgZGF0YSA6IGZvcm1hdDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVtdWxhdGlvbiAmJiAhWydnZXQnLCAncG9zdCddLmNvbnRhaW5zKG1ldGhvZCkpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX21ldGhvZCA9ICdfbWV0aG9kPScgKyBtZXRob2Q7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAoZGF0YSkgPyBfbWV0aG9kICsgJyYnICsgZGF0YSA6IF9tZXRob2Q7CiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9ICdwb3N0JzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVybEVuY29kZWQgJiYgWydwb3N0JywgJ3B1dCddLmNvbnRhaW5zKG1ldGhvZCkpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5jb2RpbmcgPSAodGhpcy5vcHRpb25zLmVuY29kaW5nKSA/ICc7IGNoYXJzZXQ9JyArIHRoaXMub3B0aW9ucy5lbmNvZGluZyA6ICcnOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlcnNbJ0NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgKyBlbmNvZGluZzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIXVybCkgdXJsID0gZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWU7CgogICAgICAgICAgICAgICAgdmFyIHRyaW1Qb3NpdGlvbiA9IHVybC5sYXN0SW5kZXhPZignLycpOwogICAgICAgICAgICAgICAgaWYgKHRyaW1Qb3NpdGlvbiA+IC0xICYmICh0cmltUG9zaXRpb24gPSB1cmwuaW5kZXhPZignIycpKSA+IC0xKSB1cmwgPSB1cmwuc3Vic3RyKDAsIHRyaW1Qb3NpdGlvbik7CgogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub0NhY2hlKQogICAgICAgICAgICAgICAgICAgICAgICB1cmwgKz0gKHVybC5jb250YWlucygnPycpID8gJyYnIDogJz8nKSArIFN0cmluZy51bmlxdWVJRCgpOwoKICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIG1ldGhvZCA9PSAnZ2V0Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAodXJsLmNvbnRhaW5zKCc/JykgPyAnJicgOiAnPycpICsgZGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IG51bGw7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIHhociA9IHRoaXMueGhyOwogICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzU3VwcG9ydCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vbmxvYWRzdGFydCA9IHRoaXMubG9hZHN0YXJ0LmJpbmQodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vbnByb2dyZXNzID0gdGhpcy5wcm9ncmVzcy5iaW5kKHRoaXMpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHhoci5vcGVuKG1ldGhvZC50b1VwcGVyQ2FzZSgpLCB1cmwsIHRoaXMub3B0aW9ucy5hc3luYywgdGhpcy5vcHRpb25zLnVzZXIsIHRoaXMub3B0aW9ucy5wYXNzd29yZCk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVzZXIgJiYgJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gdGhpcy5vblN0YXRlQ2hhbmdlLmJpbmQodGhpcyk7CgogICAgICAgICAgICAgICAgT2JqZWN0LmVhY2godGhpcy5oZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KXsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2V4Y2VwdGlvbicsIFtrZXksIHZhbHVlXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIHRoaXMpOwoKICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdyZXF1ZXN0Jyk7CiAgICAgICAgICAgICAgICB4aHIuc2VuZChkYXRhKTsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmFzeW5jKSB0aGlzLm9uU3RhdGVDaGFuZ2UoKTsKICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9ucy50aW1lb3V0KSB0aGlzLnRpbWVyID0gdGhpcy50aW1lb3V0LmRlbGF5KHRoaXMub3B0aW9ucy50aW1lb3V0LCB0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5ydW5uaW5nKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgdmFyIHhociA9IHRoaXMueGhyOwogICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7CiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7CiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3NTdXBwb3J0KSB4aHIub25wcm9ncmVzcyA9IHhoci5vbmxvYWRzdGFydCA9IGVtcHR5OwogICAgICAgICAgICAgICAgdGhpcy54aHIgPSBuZXcgQnJvd3Nlci5SZXF1ZXN0KCk7CiAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnY2FuY2VsJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCnZhciBtZXRob2RzID0ge307ClsnZ2V0JywgJ3Bvc3QnLCAncHV0JywgJ2RlbGV0ZScsICdHRVQnLCAnUE9TVCcsICdQVVQnLCAnREVMRVRFJ10uZWFjaChmdW5jdGlvbihtZXRob2QpewogICAgICAgIG1ldGhvZHNbbWV0aG9kXSA9IGZ1bmN0aW9uKGRhdGEpewogICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpZiAoZGF0YSAhPSBudWxsKSBvYmplY3QuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kKG9iamVjdCk7CiAgICAgICAgfTsKfSk7CgpSZXF1ZXN0LmltcGxlbWVudChtZXRob2RzKTsKCkVsZW1lbnQuUHJvcGVydGllcy5zZW5kID0gewoKICAgICAgICBzZXQ6IGZ1bmN0aW9uKG9wdGlvbnMpewogICAgICAgICAgICAgICAgdmFyIHNlbmQgPSB0aGlzLmdldCgnc2VuZCcpLmNhbmNlbCgpOwogICAgICAgICAgICAgICAgc2VuZC5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHNlbmQgPSB0aGlzLnJldHJpZXZlKCdzZW5kJyk7CiAgICAgICAgICAgICAgICBpZiAoIXNlbmQpewogICAgICAgICAgICAgICAgICAgICAgICBzZW5kID0gbmV3IFJlcXVlc3QoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMsIGxpbms6ICdjYW5jZWwnLCBtZXRob2Q6IHRoaXMuZ2V0KCdtZXRob2QnKSB8fCAncG9zdCcsIHVybDogdGhpcy5nZXQoJ2FjdGlvbicpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JlKCdzZW5kJywgc2VuZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gc2VuZDsKICAgICAgICB9Cgp9OwoKRWxlbWVudC5pbXBsZW1lbnQoewoKICAgICAgICBzZW5kOiBmdW5jdGlvbih1cmwpewogICAgICAgICAgICAgICAgdmFyIHNlbmRlciA9IHRoaXMuZ2V0KCdzZW5kJyk7CiAgICAgICAgICAgICAgICBzZW5kZXIuc2VuZCh7ZGF0YTogdGhpcywgdXJsOiB1cmwgfHwgc2VuZGVyLm9wdGlvbnMudXJsfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCn0pKCk7CgoKLyoKLS0tCgpuYW1lOiBSZXF1ZXN0LkhUTUwKCmRlc2NyaXB0aW9uOiBFeHRlbmRzIHRoZSBiYXNpYyBSZXF1ZXN0IENsYXNzIHdpdGggYWRkaXRpb25hbCBtZXRob2RzIGZvciBpbnRlcmFjdGluZyB3aXRoIEhUTUwgcmVzcG9uc2VzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW0VsZW1lbnQsIFJlcXVlc3RdCgpwcm92aWRlczogUmVxdWVzdC5IVE1MCgouLi4KKi8KClJlcXVlc3QuSFRNTCA9IG5ldyBDbGFzcyh7CgogICAgICAgIEV4dGVuZHM6IFJlcXVlc3QsCgogICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgIHVwZGF0ZTogZmFsc2UsCiAgICAgICAgICAgICAgICBhcHBlbmQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZXZhbFNjcmlwdHM6IHRydWUsCiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZhbHNlLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgICAgICBBY2NlcHQ6ICd0ZXh0L2h0bWwsIGFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwsICovKicKICAgICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbih0ZXh0KXsKICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLCByZXNwb25zZSA9IHRoaXMucmVzcG9uc2U7CgogICAgICAgICAgICAgICAgcmVzcG9uc2UuaHRtbCA9IHRleHQuc3RyaXBTY3JpcHRzKGZ1bmN0aW9uKHNjcmlwdCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmphdmFzY3JpcHQgPSBzY3JpcHQ7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSByZXNwb25zZS5odG1sLm1hdGNoKC88Ym9keVtePl0qPihbXHNcU10qPyk8XC9ib2R5Pi9pKTsKICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgcmVzcG9uc2UuaHRtbCA9IG1hdGNoWzFdOwogICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBuZXcgRWxlbWVudCgnZGl2Jykuc2V0KCdodG1sJywgcmVzcG9uc2UuaHRtbCk7CgogICAgICAgICAgICAgICAgcmVzcG9uc2UudHJlZSA9IHRlbXAuY2hpbGROb2RlczsKICAgICAgICAgICAgICAgIHJlc3BvbnNlLmVsZW1lbnRzID0gdGVtcC5nZXRFbGVtZW50cyhvcHRpb25zLmZpbHRlciB8fCAnKicpOwoKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmZpbHRlcikgcmVzcG9uc2UudHJlZSA9IHJlc3BvbnNlLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudXBkYXRlKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IGRvY3VtZW50LmlkKG9wdGlvbnMudXBkYXRlKS5lbXB0eSgpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5maWx0ZXIpIHVwZGF0ZS5hZG9wdChyZXNwb25zZS5lbGVtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgdXBkYXRlLnNldCgnaHRtbCcsIHJlc3BvbnNlLmh0bWwpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmFwcGVuZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcHBlbmQgPSBkb2N1bWVudC5pZChvcHRpb25zLmFwcGVuZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmZpbHRlcikgcmVzcG9uc2UuZWxlbWVudHMucmV2ZXJzZSgpLmluamVjdChhcHBlbmQpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGFwcGVuZC5hZG9wdCh0ZW1wLmdldENoaWxkcmVuKCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXZhbFNjcmlwdHMpIEJyb3dzZXIuZXhlYyhyZXNwb25zZS5qYXZhc2NyaXB0KTsKCiAgICAgICAgICAgICAgICB0aGlzLm9uU3VjY2VzcyhyZXNwb25zZS50cmVlLCByZXNwb25zZS5lbGVtZW50cywgcmVzcG9uc2UuaHRtbCwgcmVzcG9uc2UuamF2YXNjcmlwdCk7CiAgICAgICAgfQoKfSk7CgpFbGVtZW50LlByb3BlcnRpZXMubG9hZCA9IHsKCiAgICAgICAgc2V0OiBmdW5jdGlvbihvcHRpb25zKXsKICAgICAgICAgICAgICAgIHZhciBsb2FkID0gdGhpcy5nZXQoJ2xvYWQnKS5jYW5jZWwoKTsKICAgICAgICAgICAgICAgIGxvYWQuc2V0T3B0aW9ucyhvcHRpb25zKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBsb2FkID0gdGhpcy5yZXRyaWV2ZSgnbG9hZCcpOwogICAgICAgICAgICAgICAgaWYgKCFsb2FkKXsKICAgICAgICAgICAgICAgICAgICAgICAgbG9hZCA9IG5ldyBSZXF1ZXN0LkhUTUwoe2RhdGE6IHRoaXMsIGxpbms6ICdjYW5jZWwnLCB1cGRhdGU6IHRoaXMsIG1ldGhvZDogJ2dldCd9KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZSgnbG9hZCcsIGxvYWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGxvYWQ7CiAgICAgICAgfQoKfTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCiAgICAgICAgbG9hZDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMuZ2V0KCdsb2FkJykuc2VuZChBcnJheS5saW5rKGFyZ3VtZW50cywge2RhdGE6IFR5cGUuaXNPYmplY3QsIHVybDogVHlwZS5pc1N0cmluZ30pKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKCi8qCi0tLQoKbmFtZTogSlNPTgoKZGVzY3JpcHRpb246IEpTT04gZW5jb2RlciBhbmQgZGVjb2Rlci4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKU2VlQWxzbzogPGh0dHA6Ly93d3cuanNvbi5vcmcvPgoKcmVxdWlyZXM6IFtBcnJheSwgU3RyaW5nLCBOdW1iZXIsIEZ1bmN0aW9uXQoKcHJvdmlkZXM6IEpTT04KCi4uLgoqLwoKaWYgKHR5cGVvZiBKU09OID09ICd1bmRlZmluZWQnKSB0aGlzLkpTT04gPSB7fTsKCgoKKGZ1bmN0aW9uKCl7Cgp2YXIgc3BlY2lhbCA9IHsnXGInOiAnXFxiJywgJ1x0JzogJ1xcdCcsICdcbic6ICdcXG4nLCAnXGYnOiAnXFxmJywgJ1xyJzogJ1xccicsICciJyA6ICdcXCInLCAnXFwnOiAnXFxcXCd9OwoKdmFyIGVzY2FwZSA9IGZ1bmN0aW9uKGNocil7CiAgICAgICAgcmV0dXJuIHNwZWNpYWxbY2hyXSB8fCAnXFx1JyArICgnMDAwMCcgKyBjaHIuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KTsKfTsKCkpTT04udmFsaWRhdGUgPSBmdW5jdGlvbihzdHJpbmcpewogICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9cXCg/OlsiXFxcL2JmbnJ0XXx1WzAtOWEtZkEtRl17NH0pL2csICdAJykuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlKC8iW14iXFxcblxyXSoifHRydWV8ZmFsc2V8bnVsbHwtP1xkKyg/OlwuXGQqKT8oPzpbZUVdWytcLV0/XGQrKT8vZywgJ10nKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2UoLyg/Ol58OnwsKSg/OlxzKlxbKSsvZywgJycpOwoKICAgICAgICByZXR1cm4gKC9eW1xdLDp7fVxzXSokLykudGVzdChzdHJpbmcpOwp9OwoKSlNPTi5lbmNvZGUgPSBKU09OLnN0cmluZ2lmeSA/IGZ1bmN0aW9uKG9iail7CiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7Cn0gOiBmdW5jdGlvbihvYmopewogICAgICAgIGlmIChvYmogJiYgb2JqLnRvSlNPTikgb2JqID0gb2JqLnRvSlNPTigpOwoKICAgICAgICBzd2l0Y2ggKHR5cGVPZihvYmopKXsKICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnIicgKyBvYmoucmVwbGFjZSgvW1x4MDAtXHgxZlxcIl0vZywgZXNjYXBlKSArICciJzsKICAgICAgICAgICAgICAgIGNhc2UgJ2FycmF5JzoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbJyArIG9iai5tYXAoSlNPTi5lbmNvZGUpLmNsZWFuKCkgKyAnXSc7CiAgICAgICAgICAgICAgICBjYXNlICdvYmplY3QnOiBjYXNlICdoYXNoJzoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmluZyA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5lbmNvZGUodmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uKSBzdHJpbmcucHVzaChKU09OLmVuY29kZShrZXkpICsgJzonICsganNvbik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3snICsgc3RyaW5nICsgJ30nOwogICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzogY2FzZSAnYm9vbGVhbic6IHJldHVybiAnJyArIG9iajsKICAgICAgICAgICAgICAgIGNhc2UgJ251bGwnOiByZXR1cm4gJ251bGwnOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG51bGw7Cn07CgpKU09OLmRlY29kZSA9IGZ1bmN0aW9uKHN0cmluZywgc2VjdXJlKXsKICAgICAgICBpZiAoIXN0cmluZyB8fCB0eXBlT2Yoc3RyaW5nKSAhPSAnc3RyaW5nJykgcmV0dXJuIG51bGw7CgogICAgICAgIGlmIChzZWN1cmUgfHwgSlNPTi5zZWN1cmUpewogICAgICAgICAgICAgICAgaWYgKEpTT04ucGFyc2UpIHJldHVybiBKU09OLnBhcnNlKHN0cmluZyk7CiAgICAgICAgICAgICAgICBpZiAoIUpTT04udmFsaWRhdGUoc3RyaW5nKSkgdGhyb3cgbmV3IEVycm9yKCdKU09OIGNvdWxkIG5vdCBkZWNvZGUgdGhlIGlucHV0OyBzZWN1cml0eSBpcyBlbmFibGVkIGFuZCB0aGUgdmFsdWUgaXMgbm90IHNlY3VyZS4nKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBldmFsKCcoJyArIHN0cmluZyArICcpJyk7Cn07Cgp9KSgpOwoKCi8qCi0tLQoKbmFtZTogUmVxdWVzdC5KU09OCgpkZXNjcmlwdGlvbjogRXh0ZW5kcyB0aGUgYmFzaWMgUmVxdWVzdCBDbGFzcyB3aXRoIGFkZGl0aW9uYWwgbWV0aG9kcyBmb3Igc2VuZGluZyBhbmQgcmVjZWl2aW5nIEpTT04gZGF0YS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtSZXF1ZXN0LCBKU09OXQoKcHJvdmlkZXM6IFJlcXVlc3QuSlNPTgoKLi4uCiovCgpSZXF1ZXN0LkpTT04gPSBuZXcgQ2xhc3MoewoKICAgICAgICBFeHRlbmRzOiBSZXF1ZXN0LAoKICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAvKm9uRXJyb3I6IGZ1bmN0aW9uKHRleHQsIGVycm9yKXt9LCovCiAgICAgICAgICAgICAgICBzZWN1cmU6IHRydWUKICAgICAgICB9LAoKICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKXsKICAgICAgICAgICAgICAgIHRoaXMucGFyZW50KG9wdGlvbnMpOwogICAgICAgICAgICAgICAgT2JqZWN0LmFwcGVuZCh0aGlzLmhlYWRlcnMsIHsKICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgICAgICAgJ1gtUmVxdWVzdCc6ICdKU09OJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24odGV4dCl7CiAgICAgICAgICAgICAgICB2YXIganNvbjsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGpzb24gPSB0aGlzLnJlc3BvbnNlLmpzb24gPSBKU09OLmRlY29kZSh0ZXh0LCB0aGlzLm9wdGlvbnMuc2VjdXJlKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2Vycm9yJywgW3RleHQsIGVycm9yXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChqc29uID09IG51bGwpIHRoaXMub25GYWlsdXJlKCk7CiAgICAgICAgICAgICAgICBlbHNlIHRoaXMub25TdWNjZXNzKGpzb24sIHRleHQpOwogICAgICAgIH0KCn0pOwoKCi8qCi0tLQoKbmFtZTogQ29va2llCgpkZXNjcmlwdGlvbjogQ2xhc3MgZm9yIGNyZWF0aW5nLCByZWFkaW5nLCBhbmQgZGVsZXRpbmcgYnJvd3NlciBDb29raWVzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjcmVkaXRzOgogIC0gQmFzZWQgb24gdGhlIGZ1bmN0aW9ucyBieSBQZXRlci1QYXVsIEtvY2ggKGh0dHA6Ly9xdWlya3Ntb2RlLm9yZykuCgpyZXF1aXJlczogW09wdGlvbnMsIEJyb3dzZXJdCgpwcm92aWRlczogQ29va2llCgouLi4KKi8KCnZhciBDb29raWUgPSBuZXcgQ2xhc3MoewoKICAgICAgICBJbXBsZW1lbnRzOiBPcHRpb25zLAoKICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICBwYXRoOiAnLycsCiAgICAgICAgICAgICAgICBkb21haW46IGZhbHNlLAogICAgICAgICAgICAgICAgZHVyYXRpb246IGZhbHNlLAogICAgICAgICAgICAgICAgc2VjdXJlOiBmYWxzZSwKICAgICAgICAgICAgICAgIGRvY3VtZW50OiBkb2N1bWVudCwKICAgICAgICAgICAgICAgIGVuY29kZTogdHJ1ZQogICAgICAgIH0sCgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGtleSwgb3B0aW9ucyl7CiAgICAgICAgICAgICAgICB0aGlzLmtleSA9IGtleTsKICAgICAgICAgICAgICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTsKICAgICAgICB9LAoKICAgICAgICB3cml0ZTogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5lbmNvZGUpIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZG9tYWluKSB2YWx1ZSArPSAnOyBkb21haW49JyArIHRoaXMub3B0aW9ucy5kb21haW47CiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhdGgpIHZhbHVlICs9ICc7IHBhdGg9JyArIHRoaXMub3B0aW9ucy5wYXRoOwogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kdXJhdGlvbil7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogMjQgKiA2MCAqIDYwICogMTAwMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9ICc7IGV4cGlyZXM9JyArIGRhdGUudG9HTVRTdHJpbmcoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2VjdXJlKSB2YWx1ZSArPSAnOyBzZWN1cmUnOwogICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRvY3VtZW50LmNvb2tpZSA9IHRoaXMua2V5ICsgJz0nICsgdmFsdWU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICByZWFkOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5vcHRpb25zLmRvY3VtZW50LmNvb2tpZS5tYXRjaCgnKD86Xnw7KVxccyonICsgdGhpcy5rZXkuZXNjYXBlUmVnRXhwKCkgKyAnPShbXjtdKiknKTsKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUpID8gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlWzFdKSA6IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIG5ldyBDb29raWUodGhpcy5rZXksIE9iamVjdC5tZXJnZSh7fSwgdGhpcy5vcHRpb25zLCB7ZHVyYXRpb246IC0xfSkpLndyaXRlKCcnKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKQ29va2llLndyaXRlID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSwgb3B0aW9ucyl7CiAgICAgICAgcmV0dXJuIG5ldyBDb29raWUoa2V5LCBvcHRpb25zKS53cml0ZSh2YWx1ZSk7Cn07CgpDb29raWUucmVhZCA9IGZ1bmN0aW9uKGtleSl7CiAgICAgICAgcmV0dXJuIG5ldyBDb29raWUoa2V5KS5yZWFkKCk7Cn07CgpDb29raWUuZGlzcG9zZSA9IGZ1bmN0aW9uKGtleSwgb3B0aW9ucyl7CiAgICAgICAgcmV0dXJuIG5ldyBDb29raWUoa2V5LCBvcHRpb25zKS5kaXNwb3NlKCk7Cn07CgoKLyoKLS0tCgpuYW1lOiBET01SZWFkeQoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBjdXN0b20gZXZlbnQgZG9tcmVhZHkuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbQnJvd3NlciwgRWxlbWVudCwgRWxlbWVudC5FdmVudF0KCnByb3ZpZGVzOiBbRE9NUmVhZHksIERvbVJlYWR5XQoKLi4uCiovCgooZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCl7Cgp2YXIgcmVhZHksCiAgICAgICAgbG9hZGVkLAogICAgICAgIGNoZWNrcyA9IFtdLAogICAgICAgIHNob3VsZFBvbGwsCiAgICAgICAgdGltZXIsCiAgICAgICAgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCnZhciBkb21yZWFkeSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTsKICAgICAgICBpZiAocmVhZHkpIHJldHVybjsKICAgICAgICBCcm93c2VyLmxvYWRlZCA9IHJlYWR5ID0gdHJ1ZTsKICAgICAgICBkb2N1bWVudC5yZW1vdmVMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGRvbXJlYWR5KS5yZW1vdmVMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGNoZWNrKTsKCiAgICAgICAgZG9jdW1lbnQuZmlyZUV2ZW50KCdkb21yZWFkeScpOwogICAgICAgIHdpbmRvdy5maXJlRXZlbnQoJ2RvbXJlYWR5Jyk7Cn07Cgp2YXIgY2hlY2sgPSBmdW5jdGlvbigpewogICAgICAgIGZvciAodmFyIGkgPSBjaGVja3MubGVuZ3RoOyBpLS07KSBpZiAoY2hlY2tzW2ldKCkpewogICAgICAgICAgICAgICAgZG9tcmVhZHkoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7Cn07Cgp2YXIgcG9sbCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTsKICAgICAgICBpZiAoIWNoZWNrKCkpIHRpbWVyID0gc2V0VGltZW91dChwb2xsLCAxMCk7Cn07Cgpkb2N1bWVudC5hZGRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGRvbXJlYWR5KTsKCi8qPGx0SUU4PiovCi8vIGRvU2Nyb2xsIHRlY2huaXF1ZSBieSBEaWVnbyBQZXJpbmkgaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0lFQ29udGVudExvYWRlZC8KLy8gdGVzdEVsZW1lbnQuZG9TY3JvbGwoKSB0aHJvd3Mgd2hlbiB0aGUgRE9NIGlzIG5vdCByZWFkeSwgb25seSBpbiB0aGUgdG9wIHdpbmRvdwp2YXIgZG9TY3JvbGxXb3JrcyA9IGZ1bmN0aW9uKCl7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHRlc3RFbGVtZW50LmRvU2Nyb2xsKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGNhdGNoIChlKXt9CiAgICAgICAgcmV0dXJuIGZhbHNlOwp9OwovLyBJZiBkb1Njcm9sbCB3b3JrcyBhbHJlYWR5LCBpdCBjYW4ndCBiZSB1c2VkIHRvIGRldGVybWluZSBkb21yZWFkeQovLyAgIGUuZy4gaW4gYW4gaWZyYW1lCmlmICh0ZXN0RWxlbWVudC5kb1Njcm9sbCAmJiAhZG9TY3JvbGxXb3JrcygpKXsKICAgICAgICBjaGVja3MucHVzaChkb1Njcm9sbFdvcmtzKTsKICAgICAgICBzaG91bGRQb2xsID0gdHJ1ZTsKfQovKjwvbHRJRTg+Ki8KCmlmIChkb2N1bWVudC5yZWFkeVN0YXRlKSBjaGVja3MucHVzaChmdW5jdGlvbigpewogICAgICAgIHZhciBzdGF0ZSA9IGRvY3VtZW50LnJlYWR5U3RhdGU7CiAgICAgICAgcmV0dXJuIChzdGF0ZSA9PSAnbG9hZGVkJyB8fCBzdGF0ZSA9PSAnY29tcGxldGUnKTsKfSk7CgppZiAoJ29ucmVhZHlzdGF0ZWNoYW5nZScgaW4gZG9jdW1lbnQpIGRvY3VtZW50LmFkZExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgY2hlY2spOwplbHNlIHNob3VsZFBvbGwgPSB0cnVlOwoKaWYgKHNob3VsZFBvbGwpIHBvbGwoKTsKCkVsZW1lbnQuRXZlbnRzLmRvbXJlYWR5ID0gewogICAgICAgIG9uQWRkOiBmdW5jdGlvbihmbil7CiAgICAgICAgICAgICAgICBpZiAocmVhZHkpIGZuLmNhbGwodGhpcyk7CiAgICAgICAgfQp9OwoKLy8gTWFrZSBzdXJlIHRoYXQgZG9tcmVhZHkgZmlyZXMgYmVmb3JlIGxvYWQKRWxlbWVudC5FdmVudHMubG9hZCA9IHsKICAgICAgICBiYXNlOiAnbG9hZCcsCiAgICAgICAgb25BZGQ6IGZ1bmN0aW9uKGZuKXsKICAgICAgICAgICAgICAgIGlmIChsb2FkZWQgJiYgdGhpcyA9PSB3aW5kb3cpIGZuLmNhbGwodGhpcyk7CiAgICAgICAgfSwKICAgICAgICBjb25kaXRpb246IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PSB3aW5kb3cpewogICAgICAgICAgICAgICAgICAgICAgICBkb21yZWFkeSgpOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgRWxlbWVudC5FdmVudHMubG9hZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KfTsKCi8vIFRoaXMgaXMgYmFzZWQgb24gdGhlIGN1c3RvbSBsb2FkIGV2ZW50CndpbmRvdy5hZGRFdmVudCgnbG9hZCcsIGZ1bmN0aW9uKCl7CiAgICAgICAgbG9hZGVkID0gdHJ1ZTsKfSk7Cgp9KSh3aW5kb3csIGRvY3VtZW50KTsKCgovKgotLS0KCm5hbWU6IFN3aWZmCgpkZXNjcmlwdGlvbjogV3JhcHBlciBmb3IgZW1iZWRkaW5nIFNXRiBtb3ZpZXMuIFN1cHBvcnRzIEV4dGVybmFsIEludGVyZmFjZSBDb21tdW5pY2F0aW9uLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjcmVkaXRzOgogIC0gRmxhc2ggZGV0ZWN0aW9uICYgSW50ZXJuZXQgRXhwbG9yZXIgKyBGbGFzaCBQbGF5ZXIgOSBmaXggaW5zcGlyZWQgYnkgU1dGT2JqZWN0LgoKcmVxdWlyZXM6IFtPcHRpb25zLCBPYmplY3QsIEVsZW1lbnRdCgpwcm92aWRlczogU3dpZmYKCi4uLgoqLwoKKGZ1bmN0aW9uKCl7Cgp2YXIgU3dpZmYgPSB0aGlzLlN3aWZmID0gbmV3IENsYXNzKHsKCiAgICAgICAgSW1wbGVtZW50czogT3B0aW9ucywKCiAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgaWQ6IG51bGwsCiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEsCiAgICAgICAgICAgICAgICB3aWR0aDogMSwKICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogbnVsbCwKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9LAogICAgICAgICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpdHk6ICdoaWdoJywKICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dTY3JpcHRBY2Nlc3M6ICdhbHdheXMnLAogICAgICAgICAgICAgICAgICAgICAgICB3TW9kZTogJ3dpbmRvdycsCiAgICAgICAgICAgICAgICAgICAgICAgIHN3TGl2ZUNvbm5lY3Q6IHRydWUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjYWxsQmFja3M6IHt9LAogICAgICAgICAgICAgICAgdmFyczoge30KICAgICAgICB9LAoKICAgICAgICB0b0VsZW1lbnQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vYmplY3Q7CiAgICAgICAgfSwKCiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucyl7CiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gJ1N3aWZmXycgKyBTdHJpbmcudW5pcXVlSUQoKTsKCiAgICAgICAgICAgICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7CiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zOwogICAgICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5pZCA9IG9wdGlvbnMuaWQgfHwgdGhpcy5pbnN0YW5jZTsKICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5pZChvcHRpb25zLmNvbnRhaW5lcik7CgogICAgICAgICAgICAgICAgU3dpZmYuQ2FsbEJhY2tzW3RoaXMuaW5zdGFuY2VdID0ge307CgogICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IG9wdGlvbnMucGFyYW1zLCB2YXJzID0gb3B0aW9ucy52YXJzLCBjYWxsQmFja3MgPSBvcHRpb25zLmNhbGxCYWNrczsKICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gT2JqZWN0LmFwcGVuZCh7aGVpZ2h0OiBvcHRpb25zLmhlaWdodCwgd2lkdGg6IG9wdGlvbnMud2lkdGh9LCBvcHRpb25zLnByb3BlcnRpZXMpOwoKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAgICAgICAgICAgICBmb3IgKHZhciBjYWxsQmFjayBpbiBjYWxsQmFja3MpewogICAgICAgICAgICAgICAgICAgICAgICBTd2lmZi5DYWxsQmFja3NbdGhpcy5pbnN0YW5jZV1bY2FsbEJhY2tdID0gKGZ1bmN0aW9uKG9wdGlvbil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uLmFwcGx5KHNlbGYub2JqZWN0LCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKGNhbGxCYWNrc1tjYWxsQmFja10pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXJzW2NhbGxCYWNrXSA9ICdTd2lmZi5DYWxsQmFja3MuJyArIHRoaXMuaW5zdGFuY2UgKyAnLicgKyBjYWxsQmFjazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBwYXJhbXMuZmxhc2hWYXJzID0gT2JqZWN0LnRvUXVlcnlTdHJpbmcodmFycyk7CiAgICAgICAgICAgICAgICBpZiAoQnJvd3Nlci5pZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuY2xhc3NpZCA9ICdjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDAnOwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMubW92aWUgPSBwYXRoOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcy50eXBlID0gJ2FwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuZGF0YSA9IHBhdGg7CgogICAgICAgICAgICAgICAgdmFyIGJ1aWxkID0gJzxvYmplY3QgaWQ9IicgKyBpZCArICciJzsKICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3BlcnRpZXMpIGJ1aWxkICs9ICcgJyArIHByb3BlcnR5ICsgJz0iJyArIHByb3BlcnRpZXNbcHJvcGVydHldICsgJyInOwogICAgICAgICAgICAgICAgYnVpbGQgKz0gJz4nOwogICAgICAgICAgICAgICAgZm9yICh2YXIgcGFyYW0gaW4gcGFyYW1zKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtc1twYXJhbV0pIGJ1aWxkICs9ICc8cGFyYW0gbmFtZT0iJyArIHBhcmFtICsgJyIgdmFsdWU9IicgKyBwYXJhbXNbcGFyYW1dICsgJyIgLz4nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnVpbGQgKz0gJzwvb2JqZWN0Pic7CiAgICAgICAgICAgICAgICB0aGlzLm9iamVjdCA9ICgoY29udGFpbmVyKSA/IGNvbnRhaW5lci5lbXB0eSgpIDogbmV3IEVsZW1lbnQoJ2RpdicpKS5zZXQoJ2h0bWwnLCBidWlsZCkuZmlyc3RDaGlsZDsKICAgICAgICB9LAoKICAgICAgICByZXBsYWNlczogZnVuY3Rpb24oZWxlbWVudCl7CiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuaWQoZWxlbWVudCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHRoaXMudG9FbGVtZW50KCksIGVsZW1lbnQpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgaW5qZWN0OiBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmlkKGVsZW1lbnQsIHRydWUpLmFwcGVuZENoaWxkKHRoaXMudG9FbGVtZW50KCkpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3RlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIFN3aWZmLnJlbW90ZS5hcHBseShTd2lmZiwgW3RoaXMudG9FbGVtZW50KCldLmFwcGVuZChhcmd1bWVudHMpKTsKICAgICAgICB9Cgp9KTsKClN3aWZmLkNhbGxCYWNrcyA9IHt9OwoKU3dpZmYucmVtb3RlID0gZnVuY3Rpb24ob2JqLCBmbil7CiAgICAgICAgdmFyIHJzID0gb2JqLkNhbGxGdW5jdGlvbignPGludm9rZSBuYW1lPSInICsgZm4gKyAnIiByZXR1cm50eXBlPSJqYXZhc2NyaXB0Ij4nICsgX19mbGFzaF9fYXJndW1lbnRzVG9YTUwoYXJndW1lbnRzLCAyKSArICc8L2ludm9rZT4nKTsKICAgICAgICByZXR1cm4gZXZhbChycyk7Cn07Cgp9KSgpOwoK",
                "body": "LyoKLS0tCk1vb1Rvb2xzOiB0aGUgamF2YXNjcmlwdCBmcmFtZXdvcmsKCndlYiBidWlsZDoKIC0gaHR0cDovL21vb3Rvb2xzLm5ldC9jb3JlLzc2YmY0NzA2MmQ2YzE5ODNkNjZjZTQ3YWQ2NmFhMGUwCgpwYWNrYWdlciBidWlsZDoKIC0gcGFja2FnZXIgYnVpbGQgQ29yZS9Db3JlIENvcmUvQXJyYXkgQ29yZS9TdHJpbmcgQ29yZS9OdW1iZXIgQ29yZS9GdW5jdGlvbiBDb3JlL09iamVjdCBDb3JlL0V2ZW50IENvcmUvQnJvd3NlciBDb3JlL0NsYXNzIENvcmUvQ2xhc3MuRXh0cmFzIENvcmUvU2xpY2suUGFyc2VyIENvcmUvU2xpY2suRmluZGVyIENvcmUvRWxlbWVudCBDb3JlL0VsZW1lbnQuU3R5bGUgQ29yZS9FbGVtZW50LkV2ZW50IENvcmUvRWxlbWVudC5EZWxlZ2F0aW9uIENvcmUvRWxlbWVudC5EaW1lbnNpb25zIENvcmUvRnggQ29yZS9GeC5DU1MgQ29yZS9GeC5Ud2VlbiBDb3JlL0Z4Lk1vcnBoIENvcmUvRnguVHJhbnNpdGlvbnMgQ29yZS9SZXF1ZXN0IENvcmUvUmVxdWVzdC5IVE1MIENvcmUvUmVxdWVzdC5KU09OIENvcmUvQ29va2llIENvcmUvSlNPTiBDb3JlL0RPTVJlYWR5IENvcmUvU3dpZmYKCi4uLgoqLwoKLyoKLS0tCgpuYW1lOiBDb3JlCgpkZXNjcmlwdGlvbjogVGhlIGhlYXJ0IG9mIE1vb1Rvb2xzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjb3B5cmlnaHQ6IENvcHlyaWdodCAoYykgMjAwNi0yMDEwIFtWYWxlcmlvIFByb2lldHRpXShodHRwOi8vbWFkNG1pbGsubmV0LykuCgphdXRob3JzOiBUaGUgTW9vVG9vbHMgcHJvZHVjdGlvbiB0ZWFtIChodHRwOi8vbW9vdG9vbHMubmV0L2RldmVsb3BlcnMvKQoKaW5zcGlyYXRpb246CiAgLSBDbGFzcyBpbXBsZW1lbnRhdGlvbiBpbnNwaXJlZCBieSBbQmFzZS5qc10oaHR0cDovL2RlYW4uZWR3YXJkcy5uYW1lL3dlYmxvZy8yMDA2LzAzL2Jhc2UvKSBDb3B5cmlnaHQgKGMpIDIwMDYgRGVhbiBFZHdhcmRzLCBbR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXShodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbGdwbC1saWNlbnNlLnBocCkKICAtIFNvbWUgZnVuY3Rpb25hbGl0eSBpbnNwaXJlZCBieSBbUHJvdG90eXBlLmpzXShodHRwOi8vcHJvdG90eXBlanMub3JnKSBDb3B5cmlnaHQgKGMpIDIwMDUtMjAwNyBTYW0gU3RlcGhlbnNvbiwgW01JVCBMaWNlbnNlXShodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKQoKcHJvdmlkZXM6IFtDb3JlLCBNb29Ub29scywgVHlwZSwgdHlwZU9mLCBpbnN0YW5jZU9mLCBOYXRpdmVdCgouLi4KKi8KCihmdW5jdGlvbigpewoKdGhpcy5Nb29Ub29scyA9IHsKICAgICAgICB2ZXJzaW9uOiAnMS40LjInLAogICAgICAgIGJ1aWxkOiAnNTUyZGZkNDcwNGZjY2ZmZWQ0NDRlMDIxMWM1MDgzMWEyYmZlMjA5ZicKfTsKCi8vIHR5cGVPZiwgaW5zdGFuY2VPZgoKdmFyIHR5cGVPZiA9IHRoaXMudHlwZU9mID0gZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgaWYgKGl0ZW0gPT0gbnVsbCkgcmV0dXJuICdudWxsJzsKICAgICAgICBpZiAoaXRlbS4kZmFtaWx5ICE9IG51bGwpIHJldHVybiBpdGVtLiRmYW1pbHkoKTsKCiAgICAgICAgaWYgKGl0ZW0ubm9kZU5hbWUpewogICAgICAgICAgICAgICAgaWYgKGl0ZW0ubm9kZVR5cGUgPT0gMSkgcmV0dXJuICdlbGVtZW50JzsKICAgICAgICAgICAgICAgIGlmIChpdGVtLm5vZGVUeXBlID09IDMpIHJldHVybiAoL1xTLykudGVzdChpdGVtLm5vZGVWYWx1ZSkgPyAndGV4dG5vZGUnIDogJ3doaXRlc3BhY2UnOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0ubGVuZ3RoID09ICdudW1iZXInKXsKICAgICAgICAgICAgICAgIGlmIChpdGVtLmNhbGxlZSkgcmV0dXJuICdhcmd1bWVudHMnOwogICAgICAgICAgICAgICAgaWYgKCdpdGVtJyBpbiBpdGVtKSByZXR1cm4gJ2NvbGxlY3Rpb24nOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHR5cGVvZiBpdGVtOwp9OwoKdmFyIGluc3RhbmNlT2YgPSB0aGlzLmluc3RhbmNlT2YgPSBmdW5jdGlvbihpdGVtLCBvYmplY3QpewogICAgICAgIGlmIChpdGVtID09IG51bGwpIHJldHVybiBmYWxzZTsKICAgICAgICB2YXIgY29uc3RydWN0b3IgPSBpdGVtLiRjb25zdHJ1Y3RvciB8fCBpdGVtLmNvbnN0cnVjdG9yOwogICAgICAgIHdoaWxlIChjb25zdHJ1Y3Rvcil7CiAgICAgICAgICAgICAgICBpZiAoY29uc3RydWN0b3IgPT09IG9iamVjdCkgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yLnBhcmVudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGl0ZW0gaW5zdGFuY2VvZiBvYmplY3Q7Cn07CgovLyBGdW5jdGlvbiBvdmVybG9hZGluZwoKdmFyIEZ1bmN0aW9uID0gdGhpcy5GdW5jdGlvbjsKCnZhciBlbnVtZXJhYmxlcyA9IHRydWU7CmZvciAodmFyIGkgaW4ge3RvU3RyaW5nOiAxfSkgZW51bWVyYWJsZXMgPSBudWxsOwppZiAoZW51bWVyYWJsZXMpIGVudW1lcmFibGVzID0gWydoYXNPd25Qcm9wZXJ0eScsICd2YWx1ZU9mJywgJ2lzUHJvdG90eXBlT2YnLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAndG9Mb2NhbGVTdHJpbmcnLCAndG9TdHJpbmcnLCAnY29uc3RydWN0b3InXTsKCkZ1bmN0aW9uLnByb3RvdHlwZS5vdmVybG9hZFNldHRlciA9IGZ1bmN0aW9uKHVzZVBsdXJhbCl7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgIHJldHVybiBmdW5jdGlvbihhLCBiKXsKICAgICAgICAgICAgICAgIGlmIChhID09IG51bGwpIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgaWYgKHVzZVBsdXJhbCB8fCB0eXBlb2YgYSAhPSAnc3RyaW5nJyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYSkgc2VsZi5jYWxsKHRoaXMsIGssIGFba10pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW51bWVyYWJsZXMpIGZvciAodmFyIGkgPSBlbnVtZXJhYmxlcy5sZW5ndGg7IGktLTspewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBlbnVtZXJhYmxlc1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYS5oYXNPd25Qcm9wZXJ0eShrKSkgc2VsZi5jYWxsKHRoaXMsIGssIGFba10pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbGwodGhpcywgYSwgYik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Owp9OwoKRnVuY3Rpb24ucHJvdG90eXBlLm92ZXJsb2FkR2V0dGVyID0gZnVuY3Rpb24odXNlUGx1cmFsKXsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEpewogICAgICAgICAgICAgICAgdmFyIGFyZ3MsIHJlc3VsdDsKICAgICAgICAgICAgICAgIGlmICh1c2VQbHVyYWwgfHwgdHlwZW9mIGEgIT0gJ3N0cmluZycpIGFyZ3MgPSBhOwogICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICAgICAgICBpZiAoYXJncyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHJlc3VsdFthcmdzW2ldXSA9IHNlbGYuY2FsbCh0aGlzLCBhcmdzW2ldKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuY2FsbCh0aGlzLCBhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfTsKfTsKCkZ1bmN0aW9uLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbihrZXksIHZhbHVlKXsKICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTsKfS5vdmVybG9hZFNldHRlcigpOwoKRnVuY3Rpb24ucHJvdG90eXBlLmltcGxlbWVudCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpewogICAgICAgIHRoaXMucHJvdG90eXBlW2tleV0gPSB2YWx1ZTsKfS5vdmVybG9hZFNldHRlcigpOwoKLy8gRnJvbQoKdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlOwoKRnVuY3Rpb24uZnJvbSA9IGZ1bmN0aW9uKGl0ZW0pewogICAgICAgIHJldHVybiAodHlwZU9mKGl0ZW0pID09ICdmdW5jdGlvbicpID8gaXRlbSA6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTsKICAgICAgICB9Owp9OwoKQXJyYXkuZnJvbSA9IGZ1bmN0aW9uKGl0ZW0pewogICAgICAgIGlmIChpdGVtID09IG51bGwpIHJldHVybiBbXTsKICAgICAgICByZXR1cm4gKFR5cGUuaXNFbnVtZXJhYmxlKGl0ZW0pICYmIHR5cGVvZiBpdGVtICE9ICdzdHJpbmcnKSA/ICh0eXBlT2YoaXRlbSkgPT0gJ2FycmF5JykgPyBpdGVtIDogc2xpY2UuY2FsbChpdGVtKSA6IFtpdGVtXTsKfTsKCk51bWJlci5mcm9tID0gZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgdmFyIG51bWJlciA9IHBhcnNlRmxvYXQoaXRlbSk7CiAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bWJlcikgPyBudW1iZXIgOiBudWxsOwp9OwoKU3RyaW5nLmZyb20gPSBmdW5jdGlvbihpdGVtKXsKICAgICAgICByZXR1cm4gaXRlbSArICcnOwp9OwoKLy8gaGlkZSwgcHJvdGVjdAoKRnVuY3Rpb24uaW1wbGVtZW50KHsKCiAgICAgICAgaGlkZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMuJGhpZGRlbiA9IHRydWU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBwcm90ZWN0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy4kcHJvdGVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKLy8gVHlwZQoKdmFyIFR5cGUgPSB0aGlzLlR5cGUgPSBmdW5jdGlvbihuYW1lLCBvYmplY3QpewogICAgICAgIGlmIChuYW1lKXsKICAgICAgICAgICAgICAgIHZhciBsb3dlciA9IG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgIHZhciB0eXBlQ2hlY2sgPSBmdW5jdGlvbihpdGVtKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlT2YoaXRlbSkgPT0gbG93ZXIpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBUeXBlWydpcycgKyBuYW1lXSA9IHR5cGVDaGVjazsKICAgICAgICAgICAgICAgIGlmIChvYmplY3QgIT0gbnVsbCl7CiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5wcm90b3R5cGUuJGZhbWlseSA9IChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb3dlcjsKICAgICAgICAgICAgICAgICAgICAgICAgfSkuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuIG51bGw7CgogICAgICAgIG9iamVjdC5leHRlbmQodGhpcyk7CiAgICAgICAgb2JqZWN0LiRjb25zdHJ1Y3RvciA9IFR5cGU7CiAgICAgICAgb2JqZWN0LnByb3RvdHlwZS4kY29uc3RydWN0b3IgPSBvYmplY3Q7CgogICAgICAgIHJldHVybiBvYmplY3Q7Cn07Cgp2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOwoKVHlwZS5pc0VudW1lcmFibGUgPSBmdW5jdGlvbihpdGVtKXsKICAgICAgICByZXR1cm4gKGl0ZW0gIT0gbnVsbCAmJiB0eXBlb2YgaXRlbS5sZW5ndGggPT0gJ251bWJlcicgJiYgdG9TdHJpbmcuY2FsbChpdGVtKSAhPSAnW29iamVjdCBGdW5jdGlvbl0nICk7Cn07Cgp2YXIgaG9va3MgPSB7fTsKCnZhciBob29rc09mID0gZnVuY3Rpb24ob2JqZWN0KXsKICAgICAgICB2YXIgdHlwZSA9IHR5cGVPZihvYmplY3QucHJvdG90eXBlKTsKICAgICAgICByZXR1cm4gaG9va3NbdHlwZV0gfHwgKGhvb2tzW3R5cGVdID0gW10pOwp9OwoKdmFyIGltcGxlbWVudCA9IGZ1bmN0aW9uKG5hbWUsIG1ldGhvZCl7CiAgICAgICAgaWYgKG1ldGhvZCAmJiBtZXRob2QuJGhpZGRlbikgcmV0dXJuOwoKICAgICAgICB2YXIgaG9va3MgPSBob29rc09mKHRoaXMpOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgIHZhciBob29rID0gaG9va3NbaV07CiAgICAgICAgICAgICAgICBpZiAodHlwZU9mKGhvb2spID09ICd0eXBlJykgaW1wbGVtZW50LmNhbGwoaG9vaywgbmFtZSwgbWV0aG9kKTsKICAgICAgICAgICAgICAgIGVsc2UgaG9vay5jYWxsKHRoaXMsIG5hbWUsIG1ldGhvZCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgcHJldmlvdXMgPSB0aGlzLnByb3RvdHlwZVtuYW1lXTsKICAgICAgICBpZiAocHJldmlvdXMgPT0gbnVsbCB8fCAhcHJldmlvdXMuJHByb3RlY3RlZCkgdGhpcy5wcm90b3R5cGVbbmFtZV0gPSBtZXRob2Q7CgogICAgICAgIGlmICh0aGlzW25hbWVdID09IG51bGwgJiYgdHlwZU9mKG1ldGhvZCkgPT0gJ2Z1bmN0aW9uJykgZXh0ZW5kLmNhbGwodGhpcywgbmFtZSwgZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KGl0ZW0sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICAgICAgfSk7Cn07Cgp2YXIgZXh0ZW5kID0gZnVuY3Rpb24obmFtZSwgbWV0aG9kKXsKICAgICAgICBpZiAobWV0aG9kICYmIG1ldGhvZC4kaGlkZGVuKSByZXR1cm47CiAgICAgICAgdmFyIHByZXZpb3VzID0gdGhpc1tuYW1lXTsKICAgICAgICBpZiAocHJldmlvdXMgPT0gbnVsbCB8fCAhcHJldmlvdXMuJHByb3RlY3RlZCkgdGhpc1tuYW1lXSA9IG1ldGhvZDsKfTsKClR5cGUuaW1wbGVtZW50KHsKCiAgICAgICAgaW1wbGVtZW50OiBpbXBsZW1lbnQub3ZlcmxvYWRTZXR0ZXIoKSwKCiAgICAgICAgZXh0ZW5kOiBleHRlbmQub3ZlcmxvYWRTZXR0ZXIoKSwKCiAgICAgICAgYWxpYXM6IGZ1bmN0aW9uKG5hbWUsIGV4aXN0aW5nKXsKICAgICAgICAgICAgICAgIGltcGxlbWVudC5jYWxsKHRoaXMsIG5hbWUsIHRoaXMucHJvdG90eXBlW2V4aXN0aW5nXSk7CiAgICAgICAgfS5vdmVybG9hZFNldHRlcigpLAoKICAgICAgICBtaXJyb3I6IGZ1bmN0aW9uKGhvb2spewogICAgICAgICAgICAgICAgaG9va3NPZih0aGlzKS5wdXNoKGhvb2spOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQoKfSk7CgpuZXcgVHlwZSgnVHlwZScsIFR5cGUpOwoKLy8gRGVmYXVsdCBUeXBlcwoKdmFyIGZvcmNlID0gZnVuY3Rpb24obmFtZSwgb2JqZWN0LCBtZXRob2RzKXsKICAgICAgICB2YXIgaXNUeXBlID0gKG9iamVjdCAhPSBPYmplY3QpLAogICAgICAgICAgICAgICAgcHJvdG90eXBlID0gb2JqZWN0LnByb3RvdHlwZTsKCiAgICAgICAgaWYgKGlzVHlwZSkgb2JqZWN0ID0gbmV3IFR5cGUobmFtZSwgb2JqZWN0KTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBtZXRob2RzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIga2V5ID0gbWV0aG9kc1tpXSwKICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJpYyA9IG9iamVjdFtrZXldLAogICAgICAgICAgICAgICAgICAgICAgICBwcm90byA9IHByb3RvdHlwZVtrZXldOwoKICAgICAgICAgICAgICAgIGlmIChnZW5lcmljKSBnZW5lcmljLnByb3RlY3QoKTsKCiAgICAgICAgICAgICAgICBpZiAoaXNUeXBlICYmIHByb3RvKXsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHByb3RvdHlwZVtrZXldOwogICAgICAgICAgICAgICAgICAgICAgICBwcm90b3R5cGVba2V5XSA9IHByb3RvLnByb3RlY3QoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChpc1R5cGUpIG9iamVjdC5pbXBsZW1lbnQocHJvdG90eXBlKTsKCiAgICAgICAgcmV0dXJuIGZvcmNlOwp9OwoKZm9yY2UoJ1N0cmluZycsIFN0cmluZywgWwogICAgICAgICdjaGFyQXQnLCAnY2hhckNvZGVBdCcsICdjb25jYXQnLCAnaW5kZXhPZicsICdsYXN0SW5kZXhPZicsICdtYXRjaCcsICdxdW90ZScsICdyZXBsYWNlJywgJ3NlYXJjaCcsCiAgICAgICAgJ3NsaWNlJywgJ3NwbGl0JywgJ3N1YnN0cicsICdzdWJzdHJpbmcnLCAndHJpbScsICd0b0xvd2VyQ2FzZScsICd0b1VwcGVyQ2FzZScKXSkoJ0FycmF5JywgQXJyYXksIFsKICAgICAgICAncG9wJywgJ3B1c2gnLCAncmV2ZXJzZScsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0JywgJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJywKICAgICAgICAnaW5kZXhPZicsICdsYXN0SW5kZXhPZicsICdmaWx0ZXInLCAnZm9yRWFjaCcsICdldmVyeScsICdtYXAnLCAnc29tZScsICdyZWR1Y2UnLCAncmVkdWNlUmlnaHQnCl0pKCdOdW1iZXInLCBOdW1iZXIsIFsKICAgICAgICAndG9FeHBvbmVudGlhbCcsICd0b0ZpeGVkJywgJ3RvTG9jYWxlU3RyaW5nJywgJ3RvUHJlY2lzaW9uJwpdKSgnRnVuY3Rpb24nLCBGdW5jdGlvbiwgWwogICAgICAgICdhcHBseScsICdjYWxsJywgJ2JpbmQnCl0pKCdSZWdFeHAnLCBSZWdFeHAsIFsKICAgICAgICAnZXhlYycsICd0ZXN0JwpdKSgnT2JqZWN0JywgT2JqZWN0LCBbCiAgICAgICAgJ2NyZWF0ZScsICdkZWZpbmVQcm9wZXJ0eScsICdkZWZpbmVQcm9wZXJ0aWVzJywgJ2tleXMnLAogICAgICAgICdnZXRQcm90b3R5cGVPZicsICdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCAnZ2V0T3duUHJvcGVydHlOYW1lcycsCiAgICAgICAgJ3ByZXZlbnRFeHRlbnNpb25zJywgJ2lzRXh0ZW5zaWJsZScsICdzZWFsJywgJ2lzU2VhbGVkJywgJ2ZyZWV6ZScsICdpc0Zyb3plbicKXSkoJ0RhdGUnLCBEYXRlLCBbJ25vdyddKTsKCk9iamVjdC5leHRlbmQgPSBleHRlbmQub3ZlcmxvYWRTZXR0ZXIoKTsKCkRhdGUuZXh0ZW5kKCdub3cnLCBmdW5jdGlvbigpewogICAgICAgIHJldHVybiArKG5ldyBEYXRlKTsKfSk7CgpuZXcgVHlwZSgnQm9vbGVhbicsIEJvb2xlYW4pOwoKLy8gZml4ZXMgTmFOIHJldHVybmluZyBhcyBOdW1iZXIKCk51bWJlci5wcm90b3R5cGUuJGZhbWlseSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgcmV0dXJuIGlzRmluaXRlKHRoaXMpID8gJ251bWJlcicgOiAnbnVsbCc7Cn0uaGlkZSgpOwoKLy8gTnVtYmVyLnJhbmRvbQoKTnVtYmVyLmV4dGVuZCgncmFuZG9tJywgZnVuY3Rpb24obWluLCBtYXgpewogICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pOwp9KTsKCi8vIGZvckVhY2gsIGVhY2gKCnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7Ck9iamVjdC5leHRlbmQoJ2ZvckVhY2gnLCBmdW5jdGlvbihvYmplY3QsIGZuLCBiaW5kKXsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkgZm4uY2FsbChiaW5kLCBvYmplY3Rba2V5XSwga2V5LCBvYmplY3QpOwogICAgICAgIH0KfSk7CgpPYmplY3QuZWFjaCA9IE9iamVjdC5mb3JFYWNoOwoKQXJyYXkuaW1wbGVtZW50KHsKCiAgICAgICAgZm9yRWFjaDogZnVuY3Rpb24oZm4sIGJpbmQpewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIGluIHRoaXMpIGZuLmNhbGwoYmluZCwgdGhpc1tpXSwgaSwgdGhpcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgZWFjaDogZnVuY3Rpb24oZm4sIGJpbmQpewogICAgICAgICAgICAgICAgQXJyYXkuZm9yRWFjaCh0aGlzLCBmbiwgYmluZCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCi8vIEFycmF5ICYgT2JqZWN0IGNsb25pbmcsIE9iamVjdCBtZXJnaW5nIGFuZCBhcHBlbmRpbmcKCnZhciBjbG9uZU9mID0gZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgc3dpdGNoICh0eXBlT2YoaXRlbSkpewogICAgICAgICAgICAgICAgY2FzZSAnYXJyYXknOiByZXR1cm4gaXRlbS5jbG9uZSgpOwogICAgICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzogcmV0dXJuIE9iamVjdC5jbG9uZShpdGVtKTsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBpdGVtOwogICAgICAgIH0KfTsKCkFycmF5LmltcGxlbWVudCgnY2xvbmUnLCBmdW5jdGlvbigpewogICAgICAgIHZhciBpID0gdGhpcy5sZW5ndGgsIGNsb25lID0gbmV3IEFycmF5KGkpOwogICAgICAgIHdoaWxlIChpLS0pIGNsb25lW2ldID0gY2xvbmVPZih0aGlzW2ldKTsKICAgICAgICByZXR1cm4gY2xvbmU7Cn0pOwoKdmFyIG1lcmdlT25lID0gZnVuY3Rpb24oc291cmNlLCBrZXksIGN1cnJlbnQpewogICAgICAgIHN3aXRjaCAodHlwZU9mKGN1cnJlbnQpKXsKICAgICAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlT2Yoc291cmNlW2tleV0pID09ICdvYmplY3QnKSBPYmplY3QubWVyZ2Uoc291cmNlW2tleV0sIGN1cnJlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHNvdXJjZVtrZXldID0gT2JqZWN0LmNsb25lKGN1cnJlbnQpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICdhcnJheSc6IHNvdXJjZVtrZXldID0gY3VycmVudC5jbG9uZSgpOyBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHNvdXJjZVtrZXldID0gY3VycmVudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNvdXJjZTsKfTsKCk9iamVjdC5leHRlbmQoewoKICAgICAgICBtZXJnZTogZnVuY3Rpb24oc291cmNlLCBrLCB2KXsKICAgICAgICAgICAgICAgIGlmICh0eXBlT2YoaykgPT0gJ3N0cmluZycpIHJldHVybiBtZXJnZU9uZShzb3VyY2UsIGssIHYpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDEsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWVyZ2VPbmUoc291cmNlLCBrZXksIG9iamVjdFtrZXldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2U7CiAgICAgICAgfSwKCiAgICAgICAgY2xvbmU6IGZ1bmN0aW9uKG9iamVjdCl7CiAgICAgICAgICAgICAgICB2YXIgY2xvbmUgPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIGNsb25lW2tleV0gPSBjbG9uZU9mKG9iamVjdFtrZXldKTsKICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTsKICAgICAgICB9LAoKICAgICAgICBhcHBlbmQ6IGZ1bmN0aW9uKG9yaWdpbmFsKXsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHRlbmRlZCA9IGFyZ3VtZW50c1tpXSB8fCB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGV4dGVuZGVkKSBvcmlnaW5hbFtrZXldID0gZXh0ZW5kZWRba2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbDsKICAgICAgICB9Cgp9KTsKCi8vIE9iamVjdC1sZXNzIHR5cGVzCgpbJ09iamVjdCcsICdXaGl0ZVNwYWNlJywgJ1RleHROb2RlJywgJ0NvbGxlY3Rpb24nLCAnQXJndW1lbnRzJ10uZWFjaChmdW5jdGlvbihuYW1lKXsKICAgICAgICBuZXcgVHlwZShuYW1lKTsKfSk7CgovLyBVbmlxdWUgSUQKCnZhciBVSUQgPSBEYXRlLm5vdygpOwoKU3RyaW5nLmV4dGVuZCgndW5pcXVlSUQnLCBmdW5jdGlvbigpewogICAgICAgIHJldHVybiAoVUlEKyspLnRvU3RyaW5nKDM2KTsKfSk7CgoKCn0pKCk7CgoKLyoKLS0tCgpuYW1lOiBBcnJheQoKZGVzY3JpcHRpb246IENvbnRhaW5zIEFycmF5IFByb3RvdHlwZXMgbGlrZSBlYWNoLCBjb250YWlucywgYW5kIGVyYXNlLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogVHlwZQoKcHJvdmlkZXM6IEFycmF5CgouLi4KKi8KCkFycmF5LmltcGxlbWVudCh7CgogICAgICAgIC8qPCFFUzU+Ki8KICAgICAgICBldmVyeTogZnVuY3Rpb24oZm4sIGJpbmQpewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aCA+Pj4gMDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaSBpbiB0aGlzKSAmJiAhZm4uY2FsbChiaW5kLCB0aGlzW2ldLCBpLCB0aGlzKSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSwKCiAgICAgICAgZmlsdGVyOiBmdW5jdGlvbihmbiwgYmluZCl7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aCA+Pj4gMDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoaSBpbiB0aGlzKSAmJiBmbi5jYWxsKGJpbmQsIHRoaXNbaV0sIGksIHRoaXMpKSByZXN1bHRzLnB1c2godGhpc1tpXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9LAoKICAgICAgICBpbmRleE9mOiBmdW5jdGlvbihpdGVtLCBmcm9tKXsKICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCA+Pj4gMDsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAoZnJvbSA8IDApID8gTWF0aC5tYXgoMCwgbGVuZ3RoICsgZnJvbSkgOiBmcm9tIHx8IDA7IGkgPCBsZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9LAoKICAgICAgICBtYXA6IGZ1bmN0aW9uKGZuLCBiaW5kKXsKICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCA+Pj4gMCwgcmVzdWx0cyA9IEFycmF5KGxlbmd0aCk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgaW4gdGhpcykgcmVzdWx0c1tpXSA9IGZuLmNhbGwoYmluZCwgdGhpc1tpXSwgaSwgdGhpcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9LAoKICAgICAgICBzb21lOiBmdW5jdGlvbihmbiwgYmluZCl7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoID4+PiAwOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpIGluIHRoaXMpICYmIGZuLmNhbGwoYmluZCwgdGhpc1tpXSwgaSwgdGhpcykpIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0sCiAgICAgICAgLyo8LyFFUzU+Ki8KCiAgICAgICAgY2xlYW46IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtICE9IG51bGw7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBpbnZva2U6IGZ1bmN0aW9uKG1ldGhvZE5hbWUpewogICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5zbGljZShhcmd1bWVudHMsIDEpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKGl0ZW0pewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVttZXRob2ROYW1lXS5hcHBseShpdGVtLCBhcmdzKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIGFzc29jaWF0ZTogZnVuY3Rpb24oa2V5cyl7CiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge30sIGxlbmd0aCA9IE1hdGgubWluKHRoaXMubGVuZ3RoLCBrZXlzLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSBvYmpba2V5c1tpXV0gPSB0aGlzW2ldOwogICAgICAgICAgICAgICAgcmV0dXJuIG9iajsKICAgICAgICB9LAoKICAgICAgICBsaW5rOiBmdW5jdGlvbihvYmplY3QpewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9OwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3Rba2V5XSh0aGlzW2ldKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHRoaXNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqZWN0W2tleV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKCiAgICAgICAgY29udGFpbnM6IGZ1bmN0aW9uKGl0ZW0sIGZyb20pewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihpdGVtLCBmcm9tKSAhPSAtMTsKICAgICAgICB9LAoKICAgICAgICBhcHBlbmQ6IGZ1bmN0aW9uKGFycmF5KXsKICAgICAgICAgICAgICAgIHRoaXMucHVzaC5hcHBseSh0aGlzLCBhcnJheSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBnZXRMYXN0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmxlbmd0aCkgPyB0aGlzW3RoaXMubGVuZ3RoIC0gMV0gOiBudWxsOwogICAgICAgIH0sCgogICAgICAgIGdldFJhbmRvbTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5sZW5ndGgpID8gdGhpc1tOdW1iZXIucmFuZG9tKDAsIHRoaXMubGVuZ3RoIC0gMSldIDogbnVsbDsKICAgICAgICB9LAoKICAgICAgICBpbmNsdWRlOiBmdW5jdGlvbihpdGVtKXsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250YWlucyhpdGVtKSkgdGhpcy5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgY29tYmluZTogZnVuY3Rpb24oYXJyYXkpewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHRoaXMuaW5jbHVkZShhcnJheVtpXSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBlcmFzZTogZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGktLTspewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gaXRlbSkgdGhpcy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBlbXB0eTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gMDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGZsYXR0ZW46IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVPZih0aGlzW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ251bGwnKSBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkgPSBhcnJheS5jb25jYXQoKHR5cGUgPT0gJ2FycmF5JyB8fCB0eXBlID09ICdjb2xsZWN0aW9uJyB8fCB0eXBlID09ICdhcmd1bWVudHMnIHx8IGluc3RhbmNlT2YodGhpc1tpXSwgQXJyYXkpKSA/IEFycmF5LmZsYXR0ZW4odGhpc1tpXSkgOiB0aGlzW2ldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBhcnJheTsKICAgICAgICB9LAoKICAgICAgICBwaWNrOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldICE9IG51bGwpIHJldHVybiB0aGlzW2ldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgaGV4VG9SZ2I6IGZ1bmN0aW9uKGFycmF5KXsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCAhPSAzKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIHZhciByZ2IgPSB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT0gMSkgdmFsdWUgKz0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b0ludCgxNik7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiAoYXJyYXkpID8gcmdiIDogJ3JnYignICsgcmdiICsgJyknOwogICAgICAgIH0sCgogICAgICAgIHJnYlRvSGV4OiBmdW5jdGlvbihhcnJheSl7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPCAzKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PSA0ICYmIHRoaXNbM10gPT0gMCAmJiAhYXJyYXkpIHJldHVybiAndHJhbnNwYXJlbnQnOwogICAgICAgICAgICAgICAgdmFyIGhleCA9IFtdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYml0ID0gKHRoaXNbaV0gLSAwKS50b1N0cmluZygxNik7CiAgICAgICAgICAgICAgICAgICAgICAgIGhleC5wdXNoKChiaXQubGVuZ3RoID09IDEpID8gJzAnICsgYml0IDogYml0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAoYXJyYXkpID8gaGV4IDogJyMnICsgaGV4LmpvaW4oJycpOwogICAgICAgIH0KCn0pOwoKCgoKLyoKLS0tCgpuYW1lOiBTdHJpbmcKCmRlc2NyaXB0aW9uOiBDb250YWlucyBTdHJpbmcgUHJvdG90eXBlcyBsaWtlIGNhbWVsQ2FzZSwgY2FwaXRhbGl6ZSwgdGVzdCwgYW5kIHRvSW50LgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogVHlwZQoKcHJvdmlkZXM6IFN0cmluZwoKLi4uCiovCgpTdHJpbmcuaW1wbGVtZW50KHsKCiAgICAgICAgdGVzdDogZnVuY3Rpb24ocmVnZXgsIHBhcmFtcyl7CiAgICAgICAgICAgICAgICByZXR1cm4gKCh0eXBlT2YocmVnZXgpID09ICdyZWdleHAnKSA/IHJlZ2V4IDogbmV3IFJlZ0V4cCgnJyArIHJlZ2V4LCBwYXJhbXMpKS50ZXN0KHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIGNvbnRhaW5zOiBmdW5jdGlvbihzdHJpbmcsIHNlcGFyYXRvcil7CiAgICAgICAgICAgICAgICByZXR1cm4gKHNlcGFyYXRvcikgPyAoc2VwYXJhdG9yICsgdGhpcyArIHNlcGFyYXRvcikuaW5kZXhPZihzZXBhcmF0b3IgKyBzdHJpbmcgKyBzZXBhcmF0b3IpID4gLTEgOiBTdHJpbmcodGhpcykuaW5kZXhPZihzdHJpbmcpID4gLTE7CiAgICAgICAgfSwKCiAgICAgICAgdHJpbTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvXlxzK3xccyskL2csICcnKTsKICAgICAgICB9LAoKICAgICAgICBjbGVhbjogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvXHMrL2csICcgJykudHJpbSgpOwogICAgICAgIH0sCgogICAgICAgIGNhbWVsQ2FzZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvLVxEL2csIGZ1bmN0aW9uKG1hdGNoKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgaHlwaGVuYXRlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbihtYXRjaCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoJy0nICsgbWF0Y2guY2hhckF0KDApLnRvTG93ZXJDYXNlKCkpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgY2FwaXRhbGl6ZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvXGJbYS16XS9nLCBmdW5jdGlvbihtYXRjaCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgZXNjYXBlUmVnRXhwOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC8oWy0uKis/XiR7fSgpfFtcXVwvXFxdKS9nLCAnXFwkMScpOwogICAgICAgIH0sCgogICAgICAgIHRvSW50OiBmdW5jdGlvbihiYXNlKXsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLCBiYXNlIHx8IDEwKTsKICAgICAgICB9LAoKICAgICAgICB0b0Zsb2F0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcyk7CiAgICAgICAgfSwKCiAgICAgICAgaGV4VG9SZ2I6IGZ1bmN0aW9uKGFycmF5KXsKICAgICAgICAgICAgICAgIHZhciBoZXggPSBTdHJpbmcodGhpcykubWF0Y2goL14jPyhcd3sxLDJ9KShcd3sxLDJ9KShcd3sxLDJ9KSQvKTsKICAgICAgICAgICAgICAgIHJldHVybiAoaGV4KSA/IGhleC5zbGljZSgxKS5oZXhUb1JnYihhcnJheSkgOiBudWxsOwogICAgICAgIH0sCgogICAgICAgIHJnYlRvSGV4OiBmdW5jdGlvbihhcnJheSl7CiAgICAgICAgICAgICAgICB2YXIgcmdiID0gU3RyaW5nKHRoaXMpLm1hdGNoKC9cZHsxLDN9L2cpOwogICAgICAgICAgICAgICAgcmV0dXJuIChyZ2IpID8gcmdiLnJnYlRvSGV4KGFycmF5KSA6IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgc3Vic3RpdHV0ZTogZnVuY3Rpb24ob2JqZWN0LCByZWdleHApewogICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKHJlZ2V4cCB8fCAoL1xcP1x7KFtee31dKylcfS9nKSwgZnVuY3Rpb24obWF0Y2gsIG5hbWUpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guY2hhckF0KDApID09ICdcXCcpIHJldHVybiBtYXRjaC5zbGljZSgxKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChvYmplY3RbbmFtZV0gIT0gbnVsbCkgPyBvYmplY3RbbmFtZV0gOiAnJzsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH0KCn0pOwoKCi8qCi0tLQoKbmFtZTogTnVtYmVyCgpkZXNjcmlwdGlvbjogQ29udGFpbnMgTnVtYmVyIFByb3RvdHlwZXMgbGlrZSBsaW1pdCwgcm91bmQsIHRpbWVzLCBhbmQgY2VpbC4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFR5cGUKCnByb3ZpZGVzOiBOdW1iZXIKCi4uLgoqLwoKTnVtYmVyLmltcGxlbWVudCh7CgogICAgICAgIGxpbWl0OiBmdW5jdGlvbihtaW4sIG1heCl7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5taW4obWF4LCBNYXRoLm1heChtaW4sIHRoaXMpKTsKICAgICAgICB9LAoKICAgICAgICByb3VuZDogZnVuY3Rpb24ocHJlY2lzaW9uKXsKICAgICAgICAgICAgICAgIHByZWNpc2lvbiA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24gfHwgMCkudG9GaXhlZChwcmVjaXNpb24gPCAwID8gLXByZWNpc2lvbiA6IDApOwogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcyAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247CiAgICAgICAgfSwKCiAgICAgICAgdGltZXM6IGZ1bmN0aW9uKGZuLCBiaW5kKXsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpczsgaSsrKSBmbi5jYWxsKGJpbmQsIGksIHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIHRvRmxvYXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzKTsKICAgICAgICB9LAoKICAgICAgICB0b0ludDogZnVuY3Rpb24oYmFzZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcywgYmFzZSB8fCAxMCk7CiAgICAgICAgfQoKfSk7CgpOdW1iZXIuYWxpYXMoJ2VhY2gnLCAndGltZXMnKTsKCihmdW5jdGlvbihtYXRoKXsKICAgICAgICB2YXIgbWV0aG9kcyA9IHt9OwogICAgICAgIG1hdGguZWFjaChmdW5jdGlvbihuYW1lKXsKICAgICAgICAgICAgICAgIGlmICghTnVtYmVyW25hbWVdKSBtZXRob2RzW25hbWVdID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGhbbmFtZV0uYXBwbHkobnVsbCwgW3RoaXNdLmNvbmNhdChBcnJheS5mcm9tKGFyZ3VtZW50cykpKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICAgICAgTnVtYmVyLmltcGxlbWVudChtZXRob2RzKTsKfSkoWydhYnMnLCAnYWNvcycsICdhc2luJywgJ2F0YW4nLCAnYXRhbjInLCAnY2VpbCcsICdjb3MnLCAnZXhwJywgJ2Zsb29yJywgJ2xvZycsICdtYXgnLCAnbWluJywgJ3BvdycsICdzaW4nLCAnc3FydCcsICd0YW4nXSk7CgoKLyoKLS0tCgpuYW1lOiBGdW5jdGlvbgoKZGVzY3JpcHRpb246IENvbnRhaW5zIEZ1bmN0aW9uIFByb3RvdHlwZXMgbGlrZSBjcmVhdGUsIGJpbmQsIHBhc3MsIGFuZCBkZWxheS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFR5cGUKCnByb3ZpZGVzOiBGdW5jdGlvbgoKLi4uCiovCgpGdW5jdGlvbi5leHRlbmQoewoKICAgICAgICBhdHRlbXB0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzW2ldKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpe30KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KCn0pOwoKRnVuY3Rpb24uaW1wbGVtZW50KHsKCiAgICAgICAgYXR0ZW1wdDogZnVuY3Rpb24oYXJncywgYmluZCl7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseShiaW5kLCBBcnJheS5mcm9tKGFyZ3MpKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpe30KCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9LAoKICAgICAgICAvKjwhRVM1LWJpbmQ+Ki8KICAgICAgICBiaW5kOiBmdW5jdGlvbih0aGF0KXsKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gQXJyYXkuc2xpY2UoYXJndW1lbnRzLCAxKSA6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgIEYgPSBmdW5jdGlvbigpe307CgogICAgICAgICAgICAgICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGF0LCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGLnByb3RvdHlwZSA9IHNlbGYucHJvdG90eXBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBuZXcgRjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gKCFhcmdzICYmICFsZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNhbGwoY29udGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYuYXBwbHkoY29udGV4dCwgYXJncyAmJiBsZW5ndGggPyBhcmdzLmNvbmNhdChBcnJheS5zbGljZShhcmd1bWVudHMpKSA6IGFyZ3MgfHwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgPT0gdGhhdCA/IHJlc3VsdCA6IGNvbnRleHQ7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcmV0dXJuIGJvdW5kOwogICAgICAgIH0sCiAgICAgICAgLyo8LyFFUzUtYmluZD4qLwoKICAgICAgICBwYXNzOiBmdW5jdGlvbihhcmdzLCBiaW5kKXsKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgIGlmIChhcmdzICE9IG51bGwpIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3MpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmFwcGx5KGJpbmQsIGFyZ3MgfHwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgfSwKCiAgICAgICAgZGVsYXk6IGZ1bmN0aW9uKGRlbGF5LCBiaW5kLCBhcmdzKXsKICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KHRoaXMucGFzcygoYXJncyA9PSBudWxsID8gW10gOiBhcmdzKSwgYmluZCksIGRlbGF5KTsKICAgICAgICB9LAoKICAgICAgICBwZXJpb2RpY2FsOiBmdW5jdGlvbihwZXJpb2RpY2FsLCBiaW5kLCBhcmdzKXsKICAgICAgICAgICAgICAgIHJldHVybiBzZXRJbnRlcnZhbCh0aGlzLnBhc3MoKGFyZ3MgPT0gbnVsbCA/IFtdIDogYXJncyksIGJpbmQpLCBwZXJpb2RpY2FsKTsKICAgICAgICB9Cgp9KTsKCgoKCi8qCi0tLQoKbmFtZTogT2JqZWN0CgpkZXNjcmlwdGlvbjogT2JqZWN0IGdlbmVyaWMgbWV0aG9kcwoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogVHlwZQoKcHJvdmlkZXM6IFtPYmplY3QsIEhhc2hdCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKCk9iamVjdC5leHRlbmQoewoKICAgICAgICBzdWJzZXQ6IGZ1bmN0aW9uKG9iamVjdCwga2V5cyl7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IHt9OwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrID0ga2V5c1tpXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsgaW4gb2JqZWN0KSByZXN1bHRzW2tdID0gb2JqZWN0W2tdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgfSwKCiAgICAgICAgbWFwOiBmdW5jdGlvbihvYmplY3QsIGZuLCBiaW5kKXsKICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0ge307CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSByZXN1bHRzW2tleV0gPSBmbi5jYWxsKGJpbmQsIG9iamVjdFtrZXldLCBrZXksIG9iamVjdCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9LAoKICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uKG9iamVjdCwgZm4sIGJpbmQpewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGZuLmNhbGwoYmluZCwgdmFsdWUsIGtleSwgb2JqZWN0KSkgcmVzdWx0c1trZXldID0gdmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICB9LAoKICAgICAgICBldmVyeTogZnVuY3Rpb24ob2JqZWN0LCBmbiwgYmluZCl7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmICFmbi5jYWxsKGJpbmQsIG9iamVjdFtrZXldLCBrZXkpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAoKICAgICAgICBzb21lOiBmdW5jdGlvbihvYmplY3QsIGZuLCBiaW5kKXsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZm4uY2FsbChiaW5kLCBvYmplY3Rba2V5XSwga2V5KSkgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSwKCiAgICAgICAga2V5czogZnVuY3Rpb24ob2JqZWN0KXsKICAgICAgICAgICAgICAgIHZhciBrZXlzID0gW107CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSBrZXlzLnB1c2goa2V5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBrZXlzOwogICAgICAgIH0sCgogICAgICAgIHZhbHVlczogZnVuY3Rpb24ob2JqZWN0KXsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHZhbHVlcy5wdXNoKG9iamVjdFtrZXldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0TGVuZ3RoOiBmdW5jdGlvbihvYmplY3QpewogICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoOwogICAgICAgIH0sCgogICAgICAgIGtleU9mOiBmdW5jdGlvbihvYmplY3QsIHZhbHVlKXsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgb2JqZWN0W2tleV0gPT09IHZhbHVlKSByZXR1cm4ga2V5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgY29udGFpbnM6IGZ1bmN0aW9uKG9iamVjdCwgdmFsdWUpewogICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlPZihvYmplY3QsIHZhbHVlKSAhPSBudWxsOwogICAgICAgIH0sCgogICAgICAgIHRvUXVlcnlTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgYmFzZSl7CiAgICAgICAgICAgICAgICB2YXIgcXVlcnlTdHJpbmcgPSBbXTsKCiAgICAgICAgICAgICAgICBPYmplY3QuZWFjaChvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZSkga2V5ID0gYmFzZSArICdbJyArIGtleSArICddJzsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlT2YodmFsdWUpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvYmplY3QnOiByZXN1bHQgPSBPYmplY3QudG9RdWVyeVN0cmluZyh2YWx1ZSwga2V5KTsgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXJyYXknOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHFzID0ge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5lYWNoKGZ1bmN0aW9uKHZhbCwgaSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFzW2ldID0gdmFsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBPYmplY3QudG9RdWVyeVN0cmluZyhxcywga2V5KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXN1bHQgPSBrZXkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSBxdWVyeVN0cmluZy5wdXNoKHJlc3VsdCk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlTdHJpbmcuam9pbignJicpOwogICAgICAgIH0KCn0pOwoKfSkoKTsKCgoKCi8qCi0tLQoKbmFtZTogQnJvd3NlcgoKZGVzY3JpcHRpb246IFRoZSBCcm93c2VyIE9iamVjdC4gQ29udGFpbnMgQnJvd3NlciBpbml0aWFsaXphdGlvbiwgV2luZG93IGFuZCBEb2N1bWVudCwgYW5kIHRoZSBCcm93c2VyIEhhc2guCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbQXJyYXksIEZ1bmN0aW9uLCBOdW1iZXIsIFN0cmluZ10KCnByb3ZpZGVzOiBbQnJvd3NlciwgV2luZG93LCBEb2N1bWVudF0KCi4uLgoqLwoKKGZ1bmN0aW9uKCl7Cgp2YXIgZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50Owp2YXIgd2luZG93ID0gZG9jdW1lbnQud2luZG93ID0gdGhpczsKCnZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSwKICAgICAgICBwbGF0Zm9ybSA9IG5hdmlnYXRvci5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpLAogICAgICAgIFVBID0gdWEubWF0Y2goLyhvcGVyYXxpZXxmaXJlZm94fGNocm9tZXx2ZXJzaW9uKVtcc1wvOl0oW1x3XGRcLl0rKT8uKj8oc2FmYXJpfHZlcnNpb25bXHNcLzpdKFtcd1xkXC5dKyl8JCkvKSB8fCBbbnVsbCwgJ3Vua25vd24nLCAwXSwKICAgICAgICBtb2RlID0gVUFbMV0gPT0gJ2llJyAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGU7Cgp2YXIgQnJvd3NlciA9IHRoaXMuQnJvd3NlciA9IHsKCiAgICAgICAgZXh0ZW5kOiBGdW5jdGlvbi5wcm90b3R5cGUuZXh0ZW5kLAoKICAgICAgICBuYW1lOiAoVUFbMV0gPT0gJ3ZlcnNpb24nKSA/IFVBWzNdIDogVUFbMV0sCgogICAgICAgIHZlcnNpb246IG1vZGUgfHwgcGFyc2VGbG9hdCgoVUFbMV0gPT0gJ29wZXJhJyAmJiBVQVs0XSkgPyBVQVs0XSA6IFVBWzJdKSwKCiAgICAgICAgUGxhdGZvcm06IHsKICAgICAgICAgICAgICAgIG5hbWU6IHVhLm1hdGNoKC9pcCg/OmFkfG9kfGhvbmUpLykgPyAnaW9zJyA6ICh1YS5tYXRjaCgvKD86d2Vib3N8YW5kcm9pZCkvKSB8fCBwbGF0Zm9ybS5tYXRjaCgvbWFjfHdpbnxsaW51eC8pIHx8IFsnb3RoZXInXSlbMF0KICAgICAgICB9LAoKICAgICAgICBGZWF0dXJlczogewogICAgICAgICAgICAgICAgeHBhdGg6ICEhKGRvY3VtZW50LmV2YWx1YXRlKSwKICAgICAgICAgICAgICAgIGFpcjogISEod2luZG93LnJ1bnRpbWUpLAogICAgICAgICAgICAgICAgcXVlcnk6ICEhKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IpLAogICAgICAgICAgICAgICAganNvbjogISEod2luZG93LkpTT04pCiAgICAgICAgfSwKCiAgICAgICAgUGx1Z2luczoge30KCn07CgpCcm93c2VyW0Jyb3dzZXIubmFtZV0gPSB0cnVlOwpCcm93c2VyW0Jyb3dzZXIubmFtZSArIHBhcnNlSW50KEJyb3dzZXIudmVyc2lvbiwgMTApXSA9IHRydWU7CkJyb3dzZXIuUGxhdGZvcm1bQnJvd3Nlci5QbGF0Zm9ybS5uYW1lXSA9IHRydWU7CgovLyBSZXF1ZXN0CgpCcm93c2VyLlJlcXVlc3QgPSAoZnVuY3Rpb24oKXsKCiAgICAgICAgdmFyIFhNTEhUVFAgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgIH07CgogICAgICAgIHZhciBNU1hNTDIgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNU1hNTDIuWE1MSFRUUCcpOwogICAgICAgIH07CgogICAgICAgIHZhciBNU1hNTCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJyk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLmF0dGVtcHQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIFhNTEhUVFAoKTsKICAgICAgICAgICAgICAgIHJldHVybiBYTUxIVFRQOwogICAgICAgIH0sIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBNU1hNTDIoKTsKICAgICAgICAgICAgICAgIHJldHVybiBNU1hNTDI7CiAgICAgICAgfSwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIE1TWE1MKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gTVNYTUw7CiAgICAgICAgfSk7Cgp9KSgpOwoKQnJvd3Nlci5GZWF0dXJlcy54aHIgPSAhIShCcm93c2VyLlJlcXVlc3QpOwoKLy8gRmxhc2ggZGV0ZWN0aW9uCgp2YXIgdmVyc2lvbiA9IChGdW5jdGlvbi5hdHRlbXB0KGZ1bmN0aW9uKCl7CiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5wbHVnaW5zWydTaG9ja3dhdmUgRmxhc2gnXS5kZXNjcmlwdGlvbjsKfSwgZnVuY3Rpb24oKXsKICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ1Nob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoJykuR2V0VmFyaWFibGUoJyR2ZXJzaW9uJyk7Cn0pIHx8ICcwIHIwJykubWF0Y2goL1xkKy9nKTsKCkJyb3dzZXIuUGx1Z2lucy5GbGFzaCA9IHsKICAgICAgICB2ZXJzaW9uOiBOdW1iZXIodmVyc2lvblswXSB8fCAnMC4nICsgdmVyc2lvblsxXSkgfHwgMCwKICAgICAgICBidWlsZDogTnVtYmVyKHZlcnNpb25bMl0pIHx8IDAKfTsKCi8vIFN0cmluZyBzY3JpcHRzCgpCcm93c2VyLmV4ZWMgPSBmdW5jdGlvbih0ZXh0KXsKICAgICAgICBpZiAoIXRleHQpIHJldHVybiB0ZXh0OwogICAgICAgIGlmICh3aW5kb3cuZXhlY1NjcmlwdCl7CiAgICAgICAgICAgICAgICB3aW5kb3cuZXhlY1NjcmlwdCh0ZXh0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgICAgICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2phdmFzY3JpcHQnKTsKICAgICAgICAgICAgICAgIHNjcmlwdC50ZXh0ID0gdGV4dDsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmhlYWQucmVtb3ZlQ2hpbGQoc2NyaXB0KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRleHQ7Cn07CgpTdHJpbmcuaW1wbGVtZW50KCdzdHJpcFNjcmlwdHMnLCBmdW5jdGlvbihleGVjKXsKICAgICAgICB2YXIgc2NyaXB0cyA9ICcnOwogICAgICAgIHZhciB0ZXh0ID0gdGhpcy5yZXBsYWNlKC88c2NyaXB0W14+XSo+KFtcc1xTXSo/KTxcL3NjcmlwdD4vZ2ksIGZ1bmN0aW9uKGFsbCwgY29kZSl7CiAgICAgICAgICAgICAgICBzY3JpcHRzICs9IGNvZGUgKyAnXG4nOwogICAgICAgICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0pOwogICAgICAgIGlmIChleGVjID09PSB0cnVlKSBCcm93c2VyLmV4ZWMoc2NyaXB0cyk7CiAgICAgICAgZWxzZSBpZiAodHlwZU9mKGV4ZWMpID09ICdmdW5jdGlvbicpIGV4ZWMoc2NyaXB0cywgdGV4dCk7CiAgICAgICAgcmV0dXJuIHRleHQ7Cn0pOwoKLy8gV2luZG93LCBEb2N1bWVudAoKQnJvd3Nlci5leHRlbmQoewogICAgICAgIERvY3VtZW50OiB0aGlzLkRvY3VtZW50LAogICAgICAgIFdpbmRvdzogdGhpcy5XaW5kb3csCiAgICAgICAgRWxlbWVudDogdGhpcy5FbGVtZW50LAogICAgICAgIEV2ZW50OiB0aGlzLkV2ZW50Cn0pOwoKdGhpcy5XaW5kb3cgPSB0aGlzLiRjb25zdHJ1Y3RvciA9IG5ldyBUeXBlKCdXaW5kb3cnLCBmdW5jdGlvbigpe30pOwoKdGhpcy4kZmFtaWx5ID0gRnVuY3Rpb24uZnJvbSgnd2luZG93JykuaGlkZSgpOwoKV2luZG93Lm1pcnJvcihmdW5jdGlvbihuYW1lLCBtZXRob2QpewogICAgICAgIHdpbmRvd1tuYW1lXSA9IG1ldGhvZDsKfSk7Cgp0aGlzLkRvY3VtZW50ID0gZG9jdW1lbnQuJGNvbnN0cnVjdG9yID0gbmV3IFR5cGUoJ0RvY3VtZW50JywgZnVuY3Rpb24oKXt9KTsKCmRvY3VtZW50LiRmYW1pbHkgPSBGdW5jdGlvbi5mcm9tKCdkb2N1bWVudCcpLmhpZGUoKTsKCkRvY3VtZW50Lm1pcnJvcihmdW5jdGlvbihuYW1lLCBtZXRob2QpewogICAgICAgIGRvY3VtZW50W25hbWVdID0gbWV0aG9kOwp9KTsKCmRvY3VtZW50Lmh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CmlmICghZG9jdW1lbnQuaGVhZCkgZG9jdW1lbnQuaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07CgppZiAoZG9jdW1lbnQuZXhlY0NvbW1hbmQpIHRyeSB7CiAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoIkJhY2tncm91bmRJbWFnZUNhY2hlIiwgZmFsc2UsIHRydWUpOwp9IGNhdGNoIChlKXt9CgovKjxsdElFOT4qLwppZiAodGhpcy5hdHRhY2hFdmVudCAmJiAhdGhpcy5hZGRFdmVudExpc3RlbmVyKXsKICAgICAgICB2YXIgdW5sb2FkRXZlbnQgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy5kZXRhY2hFdmVudCgnb251bmxvYWQnLCB1bmxvYWRFdmVudCk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkID0gZG9jdW1lbnQuaHRtbCA9IGRvY3VtZW50LndpbmRvdyA9IG51bGw7CiAgICAgICAgfTsKICAgICAgICB0aGlzLmF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIHVubG9hZEV2ZW50KTsKfQoKLy8gSUUgZmFpbHMgb24gY29sbGVjdGlvbnMgYW5kIDxzZWxlY3Q+Lm9wdGlvbnMgKHJlZmVycyB0byA8c2VsZWN0PikKdmFyIGFycmF5RnJvbSA9IEFycmF5LmZyb207CnRyeSB7CiAgICAgICAgYXJyYXlGcm9tKGRvY3VtZW50Lmh0bWwuY2hpbGROb2Rlcyk7Cn0gY2F0Y2goZSl7CiAgICAgICAgQXJyYXkuZnJvbSA9IGZ1bmN0aW9uKGl0ZW0pewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtICE9ICdzdHJpbmcnICYmIFR5cGUuaXNFbnVtZXJhYmxlKGl0ZW0pICYmIHR5cGVPZihpdGVtKSAhPSAnYXJyYXknKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBpdGVtLmxlbmd0aCwgYXJyYXkgPSBuZXcgQXJyYXkoaSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIGFycmF5W2ldID0gaXRlbVtpXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5RnJvbShpdGVtKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgcHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlLAogICAgICAgICAgICAgICAgc2xpY2UgPSBwcm90b3R5cGUuc2xpY2U7CiAgICAgICAgWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnLCAnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXS5lYWNoKGZ1bmN0aW9uKG5hbWUpewogICAgICAgICAgICAgICAgdmFyIG1ldGhvZCA9IHByb3RvdHlwZVtuYW1lXTsKICAgICAgICAgICAgICAgIEFycmF5W25hbWVdID0gZnVuY3Rpb24oaXRlbSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkoQXJyYXkuZnJvbShpdGVtKSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgfSk7Cn0KLyo8L2x0SUU5PiovCgoKCn0pKCk7CgoKLyoKLS0tCgpuYW1lOiBFdmVudAoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBFdmVudCBUeXBlLCB0byBtYWtlIHRoZSBldmVudCBvYmplY3QgY3Jvc3MtYnJvd3Nlci4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtXaW5kb3csIERvY3VtZW50LCBBcnJheSwgRnVuY3Rpb24sIFN0cmluZywgT2JqZWN0XQoKcHJvdmlkZXM6IEV2ZW50CgouLi4KKi8KCihmdW5jdGlvbigpIHsKCnZhciBfa2V5cyA9IHt9OwoKdmFyIERPTUV2ZW50ID0gdGhpcy5ET01FdmVudCA9IG5ldyBUeXBlKCdET01FdmVudCcsIGZ1bmN0aW9uKGV2ZW50LCB3aW4pewogICAgICAgIGlmICghd2luKSB3aW4gPSB3aW5kb3c7CiAgICAgICAgZXZlbnQgPSBldmVudCB8fCB3aW4uZXZlbnQ7CiAgICAgICAgaWYgKGV2ZW50LiRleHRlbmRlZCkgcmV0dXJuIGV2ZW50OwogICAgICAgIHRoaXMuZXZlbnQgPSBldmVudDsKICAgICAgICB0aGlzLiRleHRlbmRlZCA9IHRydWU7CiAgICAgICAgdGhpcy5zaGlmdCA9IGV2ZW50LnNoaWZ0S2V5OwogICAgICAgIHRoaXMuY29udHJvbCA9IGV2ZW50LmN0cmxLZXk7CiAgICAgICAgdGhpcy5hbHQgPSBldmVudC5hbHRLZXk7CiAgICAgICAgdGhpcy5tZXRhID0gZXZlbnQubWV0YUtleTsKICAgICAgICB2YXIgdHlwZSA9IHRoaXMudHlwZSA9IGV2ZW50LnR5cGU7CiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50OwogICAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0Lm5vZGVUeXBlID09IDMpIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlOwogICAgICAgIHRoaXMudGFyZ2V0ID0gZG9jdW1lbnQuaWQodGFyZ2V0KTsKCiAgICAgICAgaWYgKHR5cGUuaW5kZXhPZigna2V5JykgPT0gMCl7CiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHRoaXMuY29kZSA9IChldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlKTsKICAgICAgICAgICAgICAgIHRoaXMua2V5ID0gX2tleXNbY29kZV07CiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAna2V5ZG93bicpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA+IDExMSAmJiBjb2RlIDwgMTI0KSB0aGlzLmtleSA9ICdmJyArIChjb2RlIC0gMTExKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY29kZSA+IDk1ICYmIGNvZGUgPCAxMDYpIHRoaXMua2V5ID0gY29kZSAtIDk2OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHRoaXMua2V5ID09IG51bGwpIHRoaXMua2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKS50b0xvd2VyQ2FzZSgpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnY2xpY2snIHx8IHR5cGUgPT0gJ2RibGNsaWNrJyB8fCB0eXBlID09ICdjb250ZXh0bWVudScgfHwgdHlwZSA9PSAnRE9NTW91c2VTY3JvbGwnIHx8IHR5cGUuaW5kZXhPZignbW91c2UnKSA9PSAwKXsKICAgICAgICAgICAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7CiAgICAgICAgICAgICAgICBkb2MgPSAoIWRvYy5jb21wYXRNb2RlIHx8IGRvYy5jb21wYXRNb2RlID09ICdDU1MxQ29tcGF0JykgPyBkb2MuaHRtbCA6IGRvYy5ib2R5OwogICAgICAgICAgICAgICAgdGhpcy5wYWdlID0gewogICAgICAgICAgICAgICAgICAgICAgICB4OiAoZXZlbnQucGFnZVggIT0gbnVsbCkgPyBldmVudC5wYWdlWCA6IGV2ZW50LmNsaWVudFggKyBkb2Muc2Nyb2xsTGVmdCwKICAgICAgICAgICAgICAgICAgICAgICAgeTogKGV2ZW50LnBhZ2VZICE9IG51bGwpID8gZXZlbnQucGFnZVkgOiBldmVudC5jbGllbnRZICsgZG9jLnNjcm9sbFRvcAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50ID0gewogICAgICAgICAgICAgICAgICAgICAgICB4OiAoZXZlbnQucGFnZVggIT0gbnVsbCkgPyBldmVudC5wYWdlWCAtIHdpbi5wYWdlWE9mZnNldCA6IGV2ZW50LmNsaWVudFgsCiAgICAgICAgICAgICAgICAgICAgICAgIHk6IChldmVudC5wYWdlWSAhPSBudWxsKSA/IGV2ZW50LnBhZ2VZIC0gd2luLnBhZ2VZT2Zmc2V0IDogZXZlbnQuY2xpZW50WQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdET01Nb3VzZVNjcm9sbCcgfHwgdHlwZSA9PSAnbW91c2V3aGVlbCcpCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hlZWwgPSAoZXZlbnQud2hlZWxEZWx0YSkgPyBldmVudC53aGVlbERlbHRhIC8gMTIwIDogLShldmVudC5kZXRhaWwgfHwgMCkgLyAzOwoKICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDbGljayA9IChldmVudC53aGljaCA9PSAzIHx8IGV2ZW50LmJ1dHRvbiA9PSAyKTsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdtb3VzZW92ZXInIHx8IHR5cGUgPT0gJ21vdXNlb3V0Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCB8fCBldmVudFsodHlwZSA9PSAnbW91c2VvdmVyJyA/ICdmcm9tJyA6ICd0bycpICsgJ0VsZW1lbnQnXTsKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHJlbGF0ZWQgJiYgcmVsYXRlZC5ub2RlVHlwZSA9PSAzKSByZWxhdGVkID0gcmVsYXRlZC5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0ZWRUYXJnZXQgPSBkb2N1bWVudC5pZChyZWxhdGVkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZigndG91Y2gnKSA9PSAwIHx8IHR5cGUuaW5kZXhPZignZ2VzdHVyZScpID09IDApewogICAgICAgICAgICAgICAgdGhpcy5yb3RhdGlvbiA9IGV2ZW50LnJvdGF0aW9uOwogICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IGV2ZW50LnNjYWxlOwogICAgICAgICAgICAgICAgdGhpcy50YXJnZXRUb3VjaGVzID0gZXZlbnQudGFyZ2V0VG91Y2hlczsKICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlZFRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlczsKICAgICAgICAgICAgICAgIHZhciB0b3VjaGVzID0gdGhpcy50b3VjaGVzID0gZXZlbnQudG91Y2hlczsKICAgICAgICAgICAgICAgIGlmICh0b3VjaGVzICYmIHRvdWNoZXNbMF0pewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2ggPSB0b3VjaGVzWzBdOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2UgPSB7eDogdG91Y2gucGFnZVgsIHk6IHRvdWNoLnBhZ2VZfTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnQgPSB7eDogdG91Y2guY2xpZW50WCwgeTogdG91Y2guY2xpZW50WX07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoIXRoaXMuY2xpZW50KSB0aGlzLmNsaWVudCA9IHt9OwogICAgICAgIGlmICghdGhpcy5wYWdlKSB0aGlzLnBhZ2UgPSB7fTsKfSk7CgpET01FdmVudC5pbXBsZW1lbnQoewoKICAgICAgICBzdG9wOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldmVudERlZmF1bHQoKS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICB9LAoKICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5ldmVudC5zdG9wUHJvcGFnYXRpb24pIHRoaXMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICBlbHNlIHRoaXMuZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQpIHRoaXMuZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5ldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQoKfSk7CgpET01FdmVudC5kZWZpbmVLZXkgPSBmdW5jdGlvbihjb2RlLCBrZXkpewogICAgICAgIF9rZXlzW2NvZGVdID0ga2V5OwogICAgICAgIHJldHVybiB0aGlzOwp9OwoKRE9NRXZlbnQuZGVmaW5lS2V5cyA9IERPTUV2ZW50LmRlZmluZUtleS5vdmVybG9hZFNldHRlcih0cnVlKTsKCkRPTUV2ZW50LmRlZmluZUtleXMoewogICAgICAgICczOCc6ICd1cCcsICc0MCc6ICdkb3duJywgJzM3JzogJ2xlZnQnLCAnMzknOiAncmlnaHQnLAogICAgICAgICcyNyc6ICdlc2MnLCAnMzInOiAnc3BhY2UnLCAnOCc6ICdiYWNrc3BhY2UnLCAnOSc6ICd0YWInLAogICAgICAgICc0Nic6ICdkZWxldGUnLCAnMTMnOiAnZW50ZXInCn0pOwoKfSkoKTsKCgoKCgoKLyoKLS0tCgpuYW1lOiBDbGFzcwoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBDbGFzcyBGdW5jdGlvbiBmb3IgZWFzaWx5IGNyZWF0aW5nLCBleHRlbmRpbmcsIGFuZCBpbXBsZW1lbnRpbmcgcmV1c2FibGUgQ2xhc3Nlcy4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtBcnJheSwgU3RyaW5nLCBGdW5jdGlvbiwgTnVtYmVyXQoKcHJvdmlkZXM6IENsYXNzCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIENsYXNzID0gdGhpcy5DbGFzcyA9IG5ldyBUeXBlKCdDbGFzcycsIGZ1bmN0aW9uKHBhcmFtcyl7CiAgICAgICAgaWYgKGluc3RhbmNlT2YocGFyYW1zLCBGdW5jdGlvbikpIHBhcmFtcyA9IHtpbml0aWFsaXplOiBwYXJhbXN9OwoKICAgICAgICB2YXIgbmV3Q2xhc3MgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmVzZXQodGhpcyk7CiAgICAgICAgICAgICAgICBpZiAobmV3Q2xhc3MuJHByb3RvdHlwaW5nKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHRoaXMuJGNhbGxlciA9IG51bGw7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAodGhpcy5pbml0aWFsaXplKSA/IHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdGhpczsKICAgICAgICAgICAgICAgIHRoaXMuJGNhbGxlciA9IHRoaXMuY2FsbGVyID0gbnVsbDsKICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9LmV4dGVuZCh0aGlzKS5pbXBsZW1lbnQocGFyYW1zKTsKCiAgICAgICAgbmV3Q2xhc3MuJGNvbnN0cnVjdG9yID0gQ2xhc3M7CiAgICAgICAgbmV3Q2xhc3MucHJvdG90eXBlLiRjb25zdHJ1Y3RvciA9IG5ld0NsYXNzOwogICAgICAgIG5ld0NsYXNzLnByb3RvdHlwZS5wYXJlbnQgPSBwYXJlbnQ7CgogICAgICAgIHJldHVybiBuZXdDbGFzczsKfSk7Cgp2YXIgcGFyZW50ID0gZnVuY3Rpb24oKXsKICAgICAgICBpZiAoIXRoaXMuJGNhbGxlcikgdGhyb3cgbmV3IEVycm9yKCdUaGUgbWV0aG9kICJwYXJlbnQiIGNhbm5vdCBiZSBjYWxsZWQuJyk7CiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLiRjYWxsZXIuJG5hbWUsCiAgICAgICAgICAgICAgICBwYXJlbnQgPSB0aGlzLiRjYWxsZXIuJG93bmVyLnBhcmVudCwKICAgICAgICAgICAgICAgIHByZXZpb3VzID0gKHBhcmVudCkgPyBwYXJlbnQucHJvdG90eXBlW25hbWVdIDogbnVsbDsKICAgICAgICBpZiAoIXByZXZpb3VzKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBtZXRob2QgIicgKyBuYW1lICsgJyIgaGFzIG5vIHBhcmVudC4nKTsKICAgICAgICByZXR1cm4gcHJldmlvdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfTsKCnZhciByZXNldCA9IGZ1bmN0aW9uKG9iamVjdCl7CiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCl7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTsKICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZU9mKHZhbHVlKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIEYgPSBmdW5jdGlvbigpe307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRi5wcm90b3R5cGUgPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Rba2V5XSA9IHJlc2V0KG5ldyBGKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FycmF5Jzogb2JqZWN0W2tleV0gPSB2YWx1ZS5jbG9uZSgpOyBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG9iamVjdDsKfTsKCnZhciB3cmFwID0gZnVuY3Rpb24oc2VsZiwga2V5LCBtZXRob2QpewogICAgICAgIGlmIChtZXRob2QuJG9yaWdpbikgbWV0aG9kID0gbWV0aG9kLiRvcmlnaW47CiAgICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYgKG1ldGhvZC4kcHJvdGVjdGVkICYmIHRoaXMuJGNhbGxlciA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBtZXRob2QgIicgKyBrZXkgKyAnIiBjYW5ub3QgYmUgY2FsbGVkLicpOwogICAgICAgICAgICAgICAgdmFyIGNhbGxlciA9IHRoaXMuY2FsbGVyLCBjdXJyZW50ID0gdGhpcy4kY2FsbGVyOwogICAgICAgICAgICAgICAgdGhpcy5jYWxsZXIgPSBjdXJyZW50OyB0aGlzLiRjYWxsZXIgPSB3cmFwcGVyOwogICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgdGhpcy4kY2FsbGVyID0gY3VycmVudDsgdGhpcy5jYWxsZXIgPSBjYWxsZXI7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0uZXh0ZW5kKHskb3duZXI6IHNlbGYsICRvcmlnaW46IG1ldGhvZCwgJG5hbWU6IGtleX0pOwogICAgICAgIHJldHVybiB3cmFwcGVyOwp9OwoKdmFyIGltcGxlbWVudCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHJldGFpbil7CiAgICAgICAgaWYgKENsYXNzLk11dGF0b3JzLmhhc093blByb3BlcnR5KGtleSkpewogICAgICAgICAgICAgICAgdmFsdWUgPSBDbGFzcy5NdXRhdG9yc1trZXldLmNhbGwodGhpcywgdmFsdWUpOwogICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzOwogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGVPZih2YWx1ZSkgPT0gJ2Z1bmN0aW9uJyl7CiAgICAgICAgICAgICAgICBpZiAodmFsdWUuJGhpZGRlbikgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB0aGlzLnByb3RvdHlwZVtrZXldID0gKHJldGFpbikgPyB2YWx1ZSA6IHdyYXAodGhpcywga2V5LCB2YWx1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIE9iamVjdC5tZXJnZSh0aGlzLnByb3RvdHlwZSwga2V5LCB2YWx1ZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKfTsKCnZhciBnZXRJbnN0YW5jZSA9IGZ1bmN0aW9uKGtsYXNzKXsKICAgICAgICBrbGFzcy4kcHJvdG90eXBpbmcgPSB0cnVlOwogICAgICAgIHZhciBwcm90byA9IG5ldyBrbGFzczsKICAgICAgICBkZWxldGUga2xhc3MuJHByb3RvdHlwaW5nOwogICAgICAgIHJldHVybiBwcm90bzsKfTsKCkNsYXNzLmltcGxlbWVudCgnaW1wbGVtZW50JywgaW1wbGVtZW50Lm92ZXJsb2FkU2V0dGVyKCkpOwoKQ2xhc3MuTXV0YXRvcnMgPSB7CgogICAgICAgIEV4dGVuZHM6IGZ1bmN0aW9uKHBhcmVudCl7CiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDsKICAgICAgICAgICAgICAgIHRoaXMucHJvdG90eXBlID0gZ2V0SW5zdGFuY2UocGFyZW50KTsKICAgICAgICB9LAoKICAgICAgICBJbXBsZW1lbnRzOiBmdW5jdGlvbihpdGVtcyl7CiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGl0ZW1zKS5lYWNoKGZ1bmN0aW9uKGl0ZW0pewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgaXRlbTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGluc3RhbmNlKSBpbXBsZW1lbnQuY2FsbCh0aGlzLCBrZXksIGluc3RhbmNlW2tleV0sIHRydWUpOwogICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgfQp9OwoKfSkoKTsKCgovKgotLS0KCm5hbWU6IENsYXNzLkV4dHJhcwoKZGVzY3JpcHRpb246IENvbnRhaW5zIFV0aWxpdHkgQ2xhc3NlcyB0aGF0IGNhbiBiZSBpbXBsZW1lbnRlZCBpbnRvIHlvdXIgb3duIENsYXNzZXMgdG8gZWFzZSB0aGUgZXhlY3V0aW9uIG9mIG1hbnkgY29tbW9uIHRhc2tzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogQ2xhc3MKCnByb3ZpZGVzOiBbQ2xhc3MuRXh0cmFzLCBDaGFpbiwgRXZlbnRzLCBPcHRpb25zXQoKLi4uCiovCgooZnVuY3Rpb24oKXsKCnRoaXMuQ2hhaW4gPSBuZXcgQ2xhc3MoewoKICAgICAgICAkY2hhaW46IFtdLAoKICAgICAgICBjaGFpbjogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMuJGNoYWluLmFwcGVuZChBcnJheS5mbGF0dGVuKGFyZ3VtZW50cykpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgY2FsbENoYWluOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLiRjaGFpbi5sZW5ndGgpID8gdGhpcy4kY2hhaW4uc2hpZnQoKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogZmFsc2U7CiAgICAgICAgfSwKCiAgICAgICAgY2xlYXJDaGFpbjogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMuJGNoYWluLmVtcHR5KCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCnZhciByZW1vdmVPbiA9IGZ1bmN0aW9uKHN0cmluZyl7CiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9eb24oW0EtWl0pLywgZnVuY3Rpb24oZnVsbCwgZmlyc3QpewogICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0LnRvTG93ZXJDYXNlKCk7CiAgICAgICAgfSk7Cn07Cgp0aGlzLkV2ZW50cyA9IG5ldyBDbGFzcyh7CgogICAgICAgICRldmVudHM6IHt9LAoKICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24odHlwZSwgZm4sIGludGVybmFsKXsKICAgICAgICAgICAgICAgIHR5cGUgPSByZW1vdmVPbih0eXBlKTsKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICB0aGlzLiRldmVudHNbdHlwZV0gPSAodGhpcy4kZXZlbnRzW3R5cGVdIHx8IFtdKS5pbmNsdWRlKGZuKTsKICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbCkgZm4uaW50ZXJuYWwgPSB0cnVlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgYWRkRXZlbnRzOiBmdW5jdGlvbihldmVudHMpewogICAgICAgICAgICAgICAgZm9yICh2YXIgdHlwZSBpbiBldmVudHMpIHRoaXMuYWRkRXZlbnQodHlwZSwgZXZlbnRzW3R5cGVdKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGZpcmVFdmVudDogZnVuY3Rpb24odHlwZSwgYXJncywgZGVsYXkpewogICAgICAgICAgICAgICAgdHlwZSA9IHJlbW92ZU9uKHR5cGUpOwogICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuJGV2ZW50c1t0eXBlXTsKICAgICAgICAgICAgICAgIGlmICghZXZlbnRzKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3MpOwogICAgICAgICAgICAgICAgZXZlbnRzLmVhY2goZnVuY3Rpb24oZm4pewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsYXkpIGZuLmRlbGF5KGRlbGF5LCB0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBmbi5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIGZuKXsKICAgICAgICAgICAgICAgIHR5cGUgPSByZW1vdmVPbih0eXBlKTsKICAgICAgICAgICAgICAgIHZhciBldmVudHMgPSB0aGlzLiRldmVudHNbdHlwZV07CiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzICYmICFmbi5pbnRlcm5hbCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICBldmVudHMuaW5kZXhPZihmbik7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPSAtMSkgZGVsZXRlIGV2ZW50c1tpbmRleF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICByZW1vdmVFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cyl7CiAgICAgICAgICAgICAgICB2YXIgdHlwZTsKICAgICAgICAgICAgICAgIGlmICh0eXBlT2YoZXZlbnRzKSA9PSAnb2JqZWN0Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodHlwZSBpbiBldmVudHMpIHRoaXMucmVtb3ZlRXZlbnQodHlwZSwgZXZlbnRzW3R5cGVdKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzKSBldmVudHMgPSByZW1vdmVPbihldmVudHMpOwogICAgICAgICAgICAgICAgZm9yICh0eXBlIGluIHRoaXMuJGV2ZW50cyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudHMgJiYgZXZlbnRzICE9IHR5cGUpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm5zID0gdGhpcy4kZXZlbnRzW3R5cGVdOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gZm5zLmxlbmd0aDsgaS0tOykgaWYgKGkgaW4gZm5zKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50KHR5cGUsIGZuc1tpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKdGhpcy5PcHRpb25zID0gbmV3IENsYXNzKHsKCiAgICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zID0gT2JqZWN0Lm1lcmdlLmFwcGx5KG51bGwsIFt7fSwgdGhpcy5vcHRpb25zXS5hcHBlbmQoYXJndW1lbnRzKSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5hZGRFdmVudCkgZm9yICh2YXIgb3B0aW9uIGluIG9wdGlvbnMpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZU9mKG9wdGlvbnNbb3B0aW9uXSkgIT0gJ2Z1bmN0aW9uJyB8fCAhKC9eb25bQS1aXS8pLnRlc3Qob3B0aW9uKSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRXZlbnQob3B0aW9uLCBvcHRpb25zW29wdGlvbl0pOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9uc1tvcHRpb25dOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQoKfSk7Cgp9KSgpOwoKCi8qCi0tLQpuYW1lOiBTbGljay5QYXJzZXIKZGVzY3JpcHRpb246IFN0YW5kYWxvbmUgQ1NTMyBTZWxlY3RvciBwYXJzZXIKcHJvdmlkZXM6IFNsaWNrLlBhcnNlcgouLi4KKi8KCjsoZnVuY3Rpb24oKXsKCnZhciBwYXJzZWQsCiAgICAgICAgc2VwYXJhdG9ySW5kZXgsCiAgICAgICAgY29tYmluYXRvckluZGV4LAogICAgICAgIHJldmVyc2VkLAogICAgICAgIGNhY2hlID0ge30sCiAgICAgICAgcmV2ZXJzZUNhY2hlID0ge30sCiAgICAgICAgcmVVbmVzY2FwZSA9IC9cXC9nOwoKdmFyIHBhcnNlID0gZnVuY3Rpb24oZXhwcmVzc2lvbiwgaXNSZXZlcnNlZCl7CiAgICAgICAgaWYgKGV4cHJlc3Npb24gPT0gbnVsbCkgcmV0dXJuIG51bGw7CiAgICAgICAgaWYgKGV4cHJlc3Npb24uU2xpY2sgPT09IHRydWUpIHJldHVybiBleHByZXNzaW9uOwogICAgICAgIGV4cHJlc3Npb24gPSAoJycgKyBleHByZXNzaW9uKS5yZXBsYWNlKC9eXHMrfFxzKyQvZywgJycpOwogICAgICAgIHJldmVyc2VkID0gISFpc1JldmVyc2VkOwogICAgICAgIHZhciBjdXJyZW50Q2FjaGUgPSAocmV2ZXJzZWQpID8gcmV2ZXJzZUNhY2hlIDogY2FjaGU7CiAgICAgICAgaWYgKGN1cnJlbnRDYWNoZVtleHByZXNzaW9uXSkgcmV0dXJuIGN1cnJlbnRDYWNoZVtleHByZXNzaW9uXTsKICAgICAgICBwYXJzZWQgPSB7CiAgICAgICAgICAgICAgICBTbGljazogdHJ1ZSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zOiBbXSwKICAgICAgICAgICAgICAgIHJhdzogZXhwcmVzc2lvbiwKICAgICAgICAgICAgICAgIHJldmVyc2U6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZSh0aGlzLnJhdywgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBzZXBhcmF0b3JJbmRleCA9IC0xOwogICAgICAgIHdoaWxlIChleHByZXNzaW9uICE9IChleHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKHJlZ2V4cCwgcGFyc2VyKSkpOwogICAgICAgIHBhcnNlZC5sZW5ndGggPSBwYXJzZWQuZXhwcmVzc2lvbnMubGVuZ3RoOwogICAgICAgIHJldHVybiBjdXJyZW50Q2FjaGVbcGFyc2VkLnJhd10gPSAocmV2ZXJzZWQpID8gcmV2ZXJzZShwYXJzZWQpIDogcGFyc2VkOwp9OwoKdmFyIHJldmVyc2VDb21iaW5hdG9yID0gZnVuY3Rpb24oY29tYmluYXRvcil7CiAgICAgICAgaWYgKGNvbWJpbmF0b3IgPT09ICchJykgcmV0dXJuICcgJzsKICAgICAgICBlbHNlIGlmIChjb21iaW5hdG9yID09PSAnICcpIHJldHVybiAnISc7CiAgICAgICAgZWxzZSBpZiAoKC9eIS8pLnRlc3QoY29tYmluYXRvcikpIHJldHVybiBjb21iaW5hdG9yLnJlcGxhY2UoL14hLywgJycpOwogICAgICAgIGVsc2UgcmV0dXJuICchJyArIGNvbWJpbmF0b3I7Cn07Cgp2YXIgcmV2ZXJzZSA9IGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgIHZhciBleHByZXNzaW9ucyA9IGV4cHJlc3Npb24uZXhwcmVzc2lvbnM7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByZXNzaW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICB2YXIgZXhwID0gZXhwcmVzc2lvbnNbaV07CiAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IHtwYXJ0czogW10sIHRhZzogJyonLCBjb21iaW5hdG9yOiByZXZlcnNlQ29tYmluYXRvcihleHBbMF0uY29tYmluYXRvcil9OwoKICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZXhwLmxlbmd0aDsgaisrKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNleHAgPSBleHBbal07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2V4cC5yZXZlcnNlQ29tYmluYXRvcikgY2V4cC5yZXZlcnNlQ29tYmluYXRvciA9ICcgJzsKICAgICAgICAgICAgICAgICAgICAgICAgY2V4cC5jb21iaW5hdG9yID0gY2V4cC5yZXZlcnNlQ29tYmluYXRvcjsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNleHAucmV2ZXJzZUNvbWJpbmF0b3I7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZXhwLnJldmVyc2UoKS5wdXNoKGxhc3QpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjsKfTsKCnZhciBlc2NhcGVSZWdFeHAgPSBmdW5jdGlvbihzdHJpbmcpey8vIENyZWRpdDogWFJlZ0V4cCAwLjYuMSAoYykgMjAwNy0yMDA4IFN0ZXZlbiBMZXZpdGhhbiA8aHR0cDovL3N0ZXZlbmxldml0aGFuLmNvbS9yZWdleC94cmVnZXhwLz4gTUlUIExpY2Vuc2UKICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1stW1xde30oKSorPy5cXF4kfCwjXHNdL2csIGZ1bmN0aW9uKG1hdGNoKXsKICAgICAgICAgICAgICAgIHJldHVybiAnXFwnICsgbWF0Y2g7CiAgICAgICAgfSk7Cn07Cgp2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgKLyoKIyEvdXNyL2Jpbi9lbnYgcnVieQpwdXRzICJcdFx0IiArIERBVEEucmVhZC5nc3ViKC9cKFw/eFwpfFxzKyMuKiR8XHMrfFxcJHxcXG4vLCcnKQpfX0VORF9fCiAgICAgICAgIig/eCleKD86XAogICAgICAgICAgXFxzKiAoICwgKSBcXHMqICAgICAgICAgICAgICAgIyBTZXBhcmF0b3IgICAgICAgICAgXG5cCiAgICAgICAgfCBcXHMqICggPGNvbWJpbmF0b3I+KyApIFxccyogICAjIENvbWJpbmF0b3IgICAgICAgICBcblwKICAgICAgICB8ICAgICAgKCBcXHMrICkgICAgICAgICAgICAgICAgICMgQ29tYmluYXRvckNoaWxkcmVuIFxuXAogICAgICAgIHwgICAgICAoIDx1bmljb2RlPisgfCBcXCogKSAgICAgIyBUYWcgICAgICAgICAgICAgICAgXG5cCiAgICAgICAgfCBcXCMgICggPHVuaWNvZGU+KyAgICAgICApICAgICAjIElEICAgICAgICAgICAgICAgICBcblwKICAgICAgICB8IFxcLiAgKCA8dW5pY29kZT4rICAgICAgICkgICAgICMgQ2xhc3NOYW1lICAgICAgICAgIFxuXAogICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBBdHRyaWJ1dGUgICAgICAgICAgXG5cCiAgICAgICAgXFxbICBcCiAgICAgICAgICAgICAgICBcXHMqICg8dW5pY29kZTE+KykgICg/OiAgXAogICAgICAgICAgICAgICAgICAgICAgICBcXHMqIChbKl4kIX58XT89KSAgKD86ICBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxzKiAoPzpcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoW1wiJ10/KSguKj8pXFw5IFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXAogICAgICAgICAgICAgICAgICAgICAgICApICBcCiAgICAgICAgICAgICAgICApPyAgXFxzKiAgXAogICAgICAgIFxcXSg/IVxcXSkgXG5cCiAgICAgICAgfCAgIDorICggPHVuaWNvZGU+KyApKD86XAogICAgICAgIFxcKCAoPzpcCiAgICAgICAgICAgICAgICAoPzooW1wiJ10pKFteXFwxMl0qKVxcMTIpfCgoPzpcXChbXildK1xcKXxbXigpXSopKylcCiAgICAgICAgKSBcXClcCiAgICAgICAgKT9cCiAgICAgICAgKSIKKi8KICAgICAgICAiXig/OlxccyooLClcXHMqfFxccyooPGNvbWJpbmF0b3I+KylcXHMqfChcXHMrKXwoPHVuaWNvZGU+K3xcXCopfFxcIyg8dW5pY29kZT4rKXxcXC4oPHVuaWNvZGU+Kyl8XFxbXFxzKig8dW5pY29kZTE+KykoPzpcXHMqKFsqXiQhfnxdPz0pKD86XFxzKig/OihbXCInXT8pKC4qPylcXDkpKSk/XFxzKlxcXSg/IVxcXSl8KDorKSg8dW5pY29kZT4rKSg/OlxcKCg/Oig/OihbXCInXSkoW15cXDEzXSopXFwxMyl8KCg/OlxcKFteKV0rXFwpfFteKCldKikrKSlcXCkpPykiCiAgICAgICAgLnJlcGxhY2UoLzxjb21iaW5hdG9yPi8sICdbJyArIGVzY2FwZVJlZ0V4cCgiPit+YCFAJCVeJj17fVxcOzwvIikgKyAnXScpCiAgICAgICAgLnJlcGxhY2UoLzx1bmljb2RlPi9nLCAnKD86W1xcd1xcdTAwYTEtXFx1RkZGRi1dfFxcXFxbXlxcczAtOWEtZl0pJykKICAgICAgICAucmVwbGFjZSgvPHVuaWNvZGUxPi9nLCAnKD86WzpcXHdcXHUwMGExLVxcdUZGRkYtXXxcXFxcW15cXHMwLTlhLWZdKScpCik7CgpmdW5jdGlvbiBwYXJzZXIoCiAgICAgICAgcmF3TWF0Y2gsCgogICAgICAgIHNlcGFyYXRvciwKICAgICAgICBjb21iaW5hdG9yLAogICAgICAgIGNvbWJpbmF0b3JDaGlsZHJlbiwKCiAgICAgICAgdGFnTmFtZSwKICAgICAgICBpZCwKICAgICAgICBjbGFzc05hbWUsCgogICAgICAgIGF0dHJpYnV0ZUtleSwKICAgICAgICBhdHRyaWJ1dGVPcGVyYXRvciwKICAgICAgICBhdHRyaWJ1dGVRdW90ZSwKICAgICAgICBhdHRyaWJ1dGVWYWx1ZSwKCiAgICAgICAgcHNldWRvTWFya2VyLAogICAgICAgIHBzZXVkb0NsYXNzLAogICAgICAgIHBzZXVkb1F1b3RlLAogICAgICAgIHBzZXVkb0NsYXNzUXVvdGVkVmFsdWUsCiAgICAgICAgcHNldWRvQ2xhc3NWYWx1ZQopewogICAgICAgIGlmIChzZXBhcmF0b3IgfHwgc2VwYXJhdG9ySW5kZXggPT09IC0xKXsKICAgICAgICAgICAgICAgIHBhcnNlZC5leHByZXNzaW9uc1srK3NlcGFyYXRvckluZGV4XSA9IFtdOwogICAgICAgICAgICAgICAgY29tYmluYXRvckluZGV4ID0gLTE7CiAgICAgICAgICAgICAgICBpZiAoc2VwYXJhdG9yKSByZXR1cm4gJyc7CiAgICAgICAgfQoKICAgICAgICBpZiAoY29tYmluYXRvciB8fCBjb21iaW5hdG9yQ2hpbGRyZW4gfHwgY29tYmluYXRvckluZGV4ID09PSAtMSl7CiAgICAgICAgICAgICAgICBjb21iaW5hdG9yID0gY29tYmluYXRvciB8fCAnICc7CiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNlcGFyYXRvciA9IHBhcnNlZC5leHByZXNzaW9uc1tzZXBhcmF0b3JJbmRleF07CiAgICAgICAgICAgICAgICBpZiAocmV2ZXJzZWQgJiYgY3VycmVudFNlcGFyYXRvcltjb21iaW5hdG9ySW5kZXhdKQogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VwYXJhdG9yW2NvbWJpbmF0b3JJbmRleF0ucmV2ZXJzZUNvbWJpbmF0b3IgPSByZXZlcnNlQ29tYmluYXRvcihjb21iaW5hdG9yKTsKICAgICAgICAgICAgICAgIGN1cnJlbnRTZXBhcmF0b3JbKytjb21iaW5hdG9ySW5kZXhdID0ge2NvbWJpbmF0b3I6IGNvbWJpbmF0b3IsIHRhZzogJyonfTsKICAgICAgICB9CgogICAgICAgIHZhciBjdXJyZW50UGFyc2VkID0gcGFyc2VkLmV4cHJlc3Npb25zW3NlcGFyYXRvckluZGV4XVtjb21iaW5hdG9ySW5kZXhdOwoKICAgICAgICBpZiAodGFnTmFtZSl7CiAgICAgICAgICAgICAgICBjdXJyZW50UGFyc2VkLnRhZyA9IHRhZ05hbWUucmVwbGFjZShyZVVuZXNjYXBlLCAnJyk7CgogICAgICAgIH0gZWxzZSBpZiAoaWQpewogICAgICAgICAgICAgICAgY3VycmVudFBhcnNlZC5pZCA9IGlkLnJlcGxhY2UocmVVbmVzY2FwZSwgJycpOwoKICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSl7CiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShyZVVuZXNjYXBlLCAnJyk7CgogICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50UGFyc2VkLmNsYXNzTGlzdCkgY3VycmVudFBhcnNlZC5jbGFzc0xpc3QgPSBbXTsKICAgICAgICAgICAgICAgIGlmICghY3VycmVudFBhcnNlZC5jbGFzc2VzKSBjdXJyZW50UGFyc2VkLmNsYXNzZXMgPSBbXTsKICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJzZWQuY2xhc3NMaXN0LnB1c2goY2xhc3NOYW1lKTsKICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJzZWQuY2xhc3Nlcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNsYXNzTmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhwOiBuZXcgUmVnRXhwKCcoXnxcXHMpJyArIGVzY2FwZVJlZ0V4cChjbGFzc05hbWUpICsgJyhcXHN8JCknKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgIH0gZWxzZSBpZiAocHNldWRvQ2xhc3MpewogICAgICAgICAgICAgICAgcHNldWRvQ2xhc3NWYWx1ZSA9IHBzZXVkb0NsYXNzVmFsdWUgfHwgcHNldWRvQ2xhc3NRdW90ZWRWYWx1ZTsKICAgICAgICAgICAgICAgIHBzZXVkb0NsYXNzVmFsdWUgPSBwc2V1ZG9DbGFzc1ZhbHVlID8gcHNldWRvQ2xhc3NWYWx1ZS5yZXBsYWNlKHJlVW5lc2NhcGUsICcnKSA6IG51bGw7CgogICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50UGFyc2VkLnBzZXVkb3MpIGN1cnJlbnRQYXJzZWQucHNldWRvcyA9IFtdOwogICAgICAgICAgICAgICAgY3VycmVudFBhcnNlZC5wc2V1ZG9zLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHBzZXVkb0NsYXNzLnJlcGxhY2UocmVVbmVzY2FwZSwgJycpLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcHNldWRvQ2xhc3NWYWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcHNldWRvTWFya2VyLmxlbmd0aCA9PSAxID8gJ2NsYXNzJyA6ICdlbGVtZW50JwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgIH0gZWxzZSBpZiAoYXR0cmlidXRlS2V5KXsKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZUtleSA9IGF0dHJpYnV0ZUtleS5yZXBsYWNlKHJlVW5lc2NhcGUsICcnKTsKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlID0gKGF0dHJpYnV0ZVZhbHVlIHx8ICcnKS5yZXBsYWNlKHJlVW5lc2NhcGUsICcnKTsKCiAgICAgICAgICAgICAgICB2YXIgdGVzdCwgcmVnZXhwOwoKICAgICAgICAgICAgICAgIHN3aXRjaCAoYXR0cmlidXRlT3BlcmF0b3IpewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdePScgOiByZWdleHAgPSBuZXcgUmVnRXhwKCAgICAgICAnXicrIGVzY2FwZVJlZ0V4cChhdHRyaWJ1dGVWYWx1ZSkgICAgICAgICAgICApOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJD0nIDogcmVnZXhwID0gbmV3IFJlZ0V4cCggICAgICAgICAgICBlc2NhcGVSZWdFeHAoYXR0cmlidXRlVmFsdWUpICsnJCcgICAgICAgKTsgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ349JyA6IHJlZ2V4cCA9IG5ldyBSZWdFeHAoICcoXnxcXHMpJysgZXNjYXBlUmVnRXhwKGF0dHJpYnV0ZVZhbHVlKSArJyhcXHN8JCknICk7IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd8PScgOiByZWdleHAgPSBuZXcgUmVnRXhwKCAgICAgICAnXicrIGVzY2FwZVJlZ0V4cChhdHRyaWJ1dGVWYWx1ZSkgKycoLXwkKScgICApOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAgJz0nIDogdGVzdCA9IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlVmFsdWUgPT0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH07IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcqPScgOiB0ZXN0ID0gZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5pbmRleE9mKGF0dHJpYnV0ZVZhbHVlKSA+IC0xOwogICAgICAgICAgICAgICAgICAgICAgICB9OyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnIT0nIDogdGVzdCA9IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlVmFsdWUgIT0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH07IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0ICAgOiB0ZXN0ID0gZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhIXZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVWYWx1ZSA9PSAnJyAmJiAoL15bKiReXT0kLykudGVzdChhdHRyaWJ1dGVPcGVyYXRvcikpIHRlc3QgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGlmICghdGVzdCkgdGVzdCA9IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICYmIHJlZ2V4cC50ZXN0KHZhbHVlKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50UGFyc2VkLmF0dHJpYnV0ZXMpIGN1cnJlbnRQYXJzZWQuYXR0cmlidXRlcyA9IFtdOwogICAgICAgICAgICAgICAgY3VycmVudFBhcnNlZC5hdHRyaWJ1dGVzLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGF0dHJpYnV0ZUtleSwKICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6IGF0dHJpYnV0ZU9wZXJhdG9yLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXR0cmlidXRlVmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3Q6IHRlc3QKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICB9CgogICAgICAgIHJldHVybiAnJzsKfTsKCi8vIFNsaWNrIE5TCgp2YXIgU2xpY2sgPSAodGhpcy5TbGljayB8fCB7fSk7CgpTbGljay5wYXJzZSA9IGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgIHJldHVybiBwYXJzZShleHByZXNzaW9uKTsKfTsKClNsaWNrLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDsKCmlmICghdGhpcy5TbGljaykgdGhpcy5TbGljayA9IFNsaWNrOwoKfSkuYXBwbHkoLyo8Q29tbW9uSlM+Ki8odHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcpID8gZXhwb3J0cyA6IC8qPC9Db21tb25KUz4qL3RoaXMpOwoKCi8qCi0tLQpuYW1lOiBTbGljay5GaW5kZXIKZGVzY3JpcHRpb246IFRoZSBuZXcsIHN1cGVyZmFzdCBjc3Mgc2VsZWN0b3IgZW5naW5lLgpwcm92aWRlczogU2xpY2suRmluZGVyCnJlcXVpcmVzOiBTbGljay5QYXJzZXIKLi4uCiovCgo7KGZ1bmN0aW9uKCl7Cgp2YXIgbG9jYWwgPSB7fSwKICAgICAgICBmZWF0dXJlc0NhY2hlID0ge30sCiAgICAgICAgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOwoKLy8gRmVhdHVyZSAvIEJ1ZyBkZXRlY3Rpb24KCmxvY2FsLmlzTmF0aXZlQ29kZSA9IGZ1bmN0aW9uKGZuKXsKICAgICAgICByZXR1cm4gKC9ce1xzKlxbbmF0aXZlIGNvZGVcXVxzKlx9LykudGVzdCgnJyArIGZuKTsKfTsKCmxvY2FsLmlzWE1MID0gZnVuY3Rpb24oZG9jdW1lbnQpewogICAgICAgIHJldHVybiAoISFkb2N1bWVudC54bWxWZXJzaW9uKSB8fCAoISFkb2N1bWVudC54bWwpIHx8ICh0b1N0cmluZy5jYWxsKGRvY3VtZW50KSA9PSAnW29iamVjdCBYTUxEb2N1bWVudF0nKSB8fAogICAgICAgIChkb2N1bWVudC5ub2RlVHlwZSA9PSA5ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPSAnSFRNTCcpOwp9OwoKbG9jYWwuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbihkb2N1bWVudCl7CgogICAgICAgIC8vIGNvbnZlcnQgZWxlbWVudHMgLyB3aW5kb3cgYXJndW1lbnRzIHRvIGRvY3VtZW50LiBpZiBkb2N1bWVudCBjYW5ub3QgYmUgZXh0cmFwb2xhdGVkLCB0aGUgZnVuY3Rpb24gcmV0dXJucy4KICAgICAgICB2YXIgbm9kZVR5cGUgPSBkb2N1bWVudC5ub2RlVHlwZTsKICAgICAgICBpZiAobm9kZVR5cGUgPT0gOSk7IC8vIGRvY3VtZW50CiAgICAgICAgZWxzZSBpZiAobm9kZVR5cGUpIGRvY3VtZW50ID0gZG9jdW1lbnQub3duZXJEb2N1bWVudDsgLy8gbm9kZQogICAgICAgIGVsc2UgaWYgKGRvY3VtZW50Lm5hdmlnYXRvcikgZG9jdW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudDsgLy8gd2luZG93CiAgICAgICAgZWxzZSByZXR1cm47CgogICAgICAgIC8vIGNoZWNrIGlmIGl0J3MgdGhlIG9sZCBkb2N1bWVudAoKICAgICAgICBpZiAodGhpcy5kb2N1bWVudCA9PT0gZG9jdW1lbnQpIHJldHVybjsKICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7CgogICAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgZG9uZSBmZWF0dXJlIGRldGVjdGlvbiBvbiB0aGlzIGRvY3VtZW50IGJlZm9yZQoKICAgICAgICB2YXIgcm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwKICAgICAgICAgICAgICAgIHJvb3RVaWQgPSB0aGlzLmdldFVJRFhNTChyb290KSwKICAgICAgICAgICAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXNDYWNoZVtyb290VWlkXSwKICAgICAgICAgICAgICAgIGZlYXR1cmU7CgogICAgICAgIGlmIChmZWF0dXJlcyl7CiAgICAgICAgICAgICAgICBmb3IgKGZlYXR1cmUgaW4gZmVhdHVyZXMpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2ZlYXR1cmVdID0gZmVhdHVyZXNbZmVhdHVyZV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBmZWF0dXJlcyA9IGZlYXR1cmVzQ2FjaGVbcm9vdFVpZF0gPSB7fTsKCiAgICAgICAgZmVhdHVyZXMucm9vdCA9IHJvb3Q7CiAgICAgICAgZmVhdHVyZXMuaXNYTUxEb2N1bWVudCA9IHRoaXMuaXNYTUwoZG9jdW1lbnQpOwoKICAgICAgICBmZWF0dXJlcy5icm9rZW5TdGFyR0VCVE4KICAgICAgICA9IGZlYXR1cmVzLnN0YXJTZWxlY3RzQ2xvc2VkUVNBCiAgICAgICAgPSBmZWF0dXJlcy5pZEdldHNOYW1lCiAgICAgICAgPSBmZWF0dXJlcy5icm9rZW5NaXhlZENhc2VRU0EKICAgICAgICA9IGZlYXR1cmVzLmJyb2tlbkdFQkNOCiAgICAgICAgPSBmZWF0dXJlcy5icm9rZW5DaGVja2VkUVNBCiAgICAgICAgPSBmZWF0dXJlcy5icm9rZW5FbXB0eUF0dHJpYnV0ZVFTQQogICAgICAgID0gZmVhdHVyZXMuaXNIVE1MRG9jdW1lbnQKICAgICAgICA9IGZlYXR1cmVzLm5hdGl2ZU1hdGNoZXNTZWxlY3RvcgogICAgICAgID0gZmFsc2U7CgogICAgICAgIHZhciBzdGFyU2VsZWN0c0Nsb3NlZCwgc3RhclNlbGVjdHNDb21tZW50cywKICAgICAgICAgICAgICAgIGJyb2tlblNlY29uZENsYXNzTmFtZUdFQkNOLCBjYWNoZWRHZXRFbGVtZW50c0J5Q2xhc3NOYW1lLAogICAgICAgICAgICAgICAgYnJva2VuRm9ybUF0dHJpYnV0ZUdldHRlcjsKCiAgICAgICAgdmFyIHNlbGVjdGVkLCBpZCA9ICdzbGlja191bmlxdWVpZCc7CiAgICAgICAgdmFyIHRlc3ROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgogICAgICAgIHZhciB0ZXN0Um9vdCA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSB8fCByb290OwogICAgICAgIHRlc3RSb290LmFwcGVuZENoaWxkKHRlc3ROb2RlKTsKCiAgICAgICAgLy8gb24gbm9uLUhUTUwgZG9jdW1lbnRzIGlubmVySFRNTCBhbmQgZ2V0RWxlbWVudHNCeUlkIGRvZXNudCB3b3JrIHByb3Blcmx5CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHRlc3ROb2RlLmlubmVySFRNTCA9ICc8YSBpZD0iJytpZCsnIj48L2E+JzsKICAgICAgICAgICAgICAgIGZlYXR1cmVzLmlzSFRNTERvY3VtZW50ID0gISFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CiAgICAgICAgfSBjYXRjaChlKXt9OwoKICAgICAgICBpZiAoZmVhdHVyZXMuaXNIVE1MRG9jdW1lbnQpewoKICAgICAgICAgICAgICAgIHRlc3ROb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CgogICAgICAgICAgICAgICAgLy8gSUUgcmV0dXJucyBjb21tZW50IG5vZGVzIGZvciBnZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpIGZvciBzb21lIGRvY3VtZW50cwogICAgICAgICAgICAgICAgdGVzdE5vZGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnJykpOwogICAgICAgICAgICAgICAgc3RhclNlbGVjdHNDb21tZW50cyA9ICh0ZXN0Tm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpLmxlbmd0aCA+IDEpOwoKICAgICAgICAgICAgICAgIC8vIElFIHJldHVybnMgY2xvc2VkIG5vZGVzIChFRzoiPC9mb28+IikgZm9yIGdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJykgZm9yIHNvbWUgZG9jdW1lbnRzCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICB0ZXN0Tm9kZS5pbm5lckhUTUwgPSAnZm9vPC9mb28+JzsKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSB0ZXN0Tm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpOwogICAgICAgICAgICAgICAgICAgICAgICBzdGFyU2VsZWN0c0Nsb3NlZCA9IChzZWxlY3RlZCAmJiAhIXNlbGVjdGVkLmxlbmd0aCAmJiBzZWxlY3RlZFswXS5ub2RlTmFtZS5jaGFyQXQoMCkgPT0gJy8nKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fTsKCiAgICAgICAgICAgICAgICBmZWF0dXJlcy5icm9rZW5TdGFyR0VCVE4gPSBzdGFyU2VsZWN0c0NvbW1lbnRzIHx8IHN0YXJTZWxlY3RzQ2xvc2VkOwoKICAgICAgICAgICAgICAgIC8vIElFIHJldHVybnMgZWxlbWVudHMgd2l0aCB0aGUgbmFtZSBpbnN0ZWFkIG9mIGp1c3QgaWQgZm9yIGdldEVsZW1lbnRzQnlJZCBmb3Igc29tZSBkb2N1bWVudHMKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3ROb2RlLmlubmVySFRNTCA9ICc8YSBuYW1lPSInKyBpZCArJyI+PC9hPjxiIGlkPSInKyBpZCArJyI+PC9iPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzLmlkR2V0c05hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgPT09IHRlc3ROb2RlLmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpe307CgogICAgICAgICAgICAgICAgaWYgKHRlc3ROb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpewoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpIDMuMiBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIGNhY2hlcyByZXN1bHRzCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE5vZGUuaW5uZXJIVE1MID0gJzxhIGNsYXNzPSJmIj48L2E+PGEgY2xhc3M9ImIiPjwvYT4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3ROb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2InKS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE5vZGUuZmlyc3RDaGlsZC5jbGFzc05hbWUgPSAnYic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVkR2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9ICh0ZXN0Tm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdiJykubGVuZ3RoICE9IDIpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGUpe307CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSA5LjYgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSBkb2VzbnQgZGV0ZWN0cyB0aGUgY2xhc3MgaWYgaXRzIG5vdCB0aGUgZmlyc3Qgb25lCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE5vZGUuaW5uZXJIVE1MID0gJzxhIGNsYXNzPSJhIj48L2E+PGEgY2xhc3M9ImYgYiBhIj48L2E+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicm9rZW5TZWNvbmRDbGFzc05hbWVHRUJDTiA9ICh0ZXN0Tm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhJykubGVuZ3RoICE9IDIpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGUpe307CgogICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5icm9rZW5HRUJDTiA9IGNhY2hlZEdldEVsZW1lbnRzQnlDbGFzc05hbWUgfHwgYnJva2VuU2Vjb25kQ2xhc3NOYW1lR0VCQ047CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHRlc3ROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwpewogICAgICAgICAgICAgICAgICAgICAgICAvLyBJRSA4IHJldHVybnMgY2xvc2VkIG5vZGVzIChFRzoiPC9mb28+IikgZm9yIHF1ZXJ5U2VsZWN0b3JBbGwoJyonKSBmb3Igc29tZSBkb2N1bWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0Tm9kZS5pbm5lckhUTUwgPSAnZm9vPC9mb28+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRlc3ROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5zdGFyU2VsZWN0c0Nsb3NlZFFTQSA9IChzZWxlY3RlZCAmJiAhIXNlbGVjdGVkLmxlbmd0aCAmJiBzZWxlY3RlZFswXS5ub2RlTmFtZS5jaGFyQXQoMCkgPT0gJy8nKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKXt9OwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpIDMuMiBxdWVyeVNlbGVjdG9yQWxsIGRvZXNudCB3b3JrIHdpdGggbWl4ZWRjYXNlIG9uIHF1aXJrc21vZGUKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0Tm9kZS5pbm5lckhUTUwgPSAnPGEgY2xhc3M9Ik1pWCI+PC9hPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMuYnJva2VuTWl4ZWRDYXNlUVNBID0gIXRlc3ROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5NaVgnKS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlYmtpdCBhbmQgT3BlcmEgZG9udCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9ucyBvbiBxdWVyeVNlbGVjdG9yQWxsCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE5vZGUuaW5uZXJIVE1MID0gJzxzZWxlY3Q+PG9wdGlvbiBzZWxlY3RlZD0ic2VsZWN0ZWQiPmE8L29wdGlvbj48L3NlbGVjdD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzLmJyb2tlbkNoZWNrZWRRU0EgPSAodGVzdE5vZGUucXVlcnlTZWxlY3RvckFsbCgnOmNoZWNrZWQnKS5sZW5ndGggPT0gMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElFIHJldHVybnMgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIGF0dHJbKl4kXT0iIiBzZWxlY3RvcnMgb24gcXVlcnlTZWxlY3RvckFsbAogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3ROb2RlLmlubmVySFRNTCA9ICc8YSBjbGFzcz0iIj48L2E+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5icm9rZW5FbXB0eUF0dHJpYnV0ZVFTQSA9ICh0ZXN0Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbY2xhc3MqPSIiXScpLmxlbmd0aCAhPSAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKXt9OwoKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBJRTYtNywgaWYgYSBmb3JtIGhhcyBhbiBpbnB1dCBvZiBpZCB4LCBmb3JtLmdldEF0dHJpYnV0ZSh4KSByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnB1dAogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE5vZGUuaW5uZXJIVE1MID0gJzxmb3JtIGFjdGlvbj0icyI+PGlucHV0IGlkPSJhY3Rpb24iLz48L2Zvcm0+JzsKICAgICAgICAgICAgICAgICAgICAgICAgYnJva2VuRm9ybUF0dHJpYnV0ZUdldHRlciA9ICh0ZXN0Tm9kZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgnYWN0aW9uJykgIT0gJ3MnKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fTsKCiAgICAgICAgICAgICAgICAvLyBuYXRpdmUgbWF0Y2hlc1NlbGVjdG9yIGZ1bmN0aW9uCgogICAgICAgICAgICAgICAgZmVhdHVyZXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yID0gcm9vdC5tYXRjaGVzU2VsZWN0b3IgfHwgLypyb290Lm1zTWF0Y2hlc1NlbGVjdG9yIHx8Ki8gcm9vdC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgcm9vdC53ZWJraXRNYXRjaGVzU2VsZWN0b3I7CiAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yKSB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBtYXRjaGVzU2VsZWN0b3IgdHJvd3MgZXJyb3JzIG9uIGluY29ycmVjdCBzaW50YXhlcyB3ZSBjYW4gdXNlIGl0CiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzLm5hdGl2ZU1hdGNoZXNTZWxlY3Rvci5jYWxsKHJvb3QsICc6c2xpY2snKTsKICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yID0gbnVsbDsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSl7fTsKCiAgICAgICAgfQoKICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcm9vdC5zbGlja19leHBhbmRvID0gMTsKICAgICAgICAgICAgICAgIGRlbGV0ZSByb290LnNsaWNrX2V4cGFuZG87CiAgICAgICAgICAgICAgICBmZWF0dXJlcy5nZXRVSUQgPSB0aGlzLmdldFVJREhUTUw7CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBmZWF0dXJlcy5nZXRVSUQgPSB0aGlzLmdldFVJRFhNTDsKICAgICAgICB9CgogICAgICAgIHRlc3RSb290LnJlbW92ZUNoaWxkKHRlc3ROb2RlKTsKICAgICAgICB0ZXN0Tm9kZSA9IHNlbGVjdGVkID0gdGVzdFJvb3QgPSBudWxsOwoKICAgICAgICAvLyBnZXRBdHRyaWJ1dGUKCiAgICAgICAgZmVhdHVyZXMuZ2V0QXR0cmlidXRlID0gKGZlYXR1cmVzLmlzSFRNTERvY3VtZW50ICYmIGJyb2tlbkZvcm1BdHRyaWJ1dGVHZXR0ZXIpID8gZnVuY3Rpb24obm9kZSwgbmFtZSl7CiAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5hdHRyaWJ1dGVHZXR0ZXJzW25hbWVdOwogICAgICAgICAgICAgICAgaWYgKG1ldGhvZCkgcmV0dXJuIG1ldGhvZC5jYWxsKG5vZGUpOwogICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5vZGUgPSBub2RlLmdldEF0dHJpYnV0ZU5vZGUobmFtZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gKGF0dHJpYnV0ZU5vZGUpID8gYXR0cmlidXRlTm9kZS5ub2RlVmFsdWUgOiBudWxsOwogICAgICAgIH0gOiBmdW5jdGlvbihub2RlLCBuYW1lKXsKICAgICAgICAgICAgICAgIHZhciBtZXRob2QgPSB0aGlzLmF0dHJpYnV0ZUdldHRlcnNbbmFtZV07CiAgICAgICAgICAgICAgICByZXR1cm4gKG1ldGhvZCkgPyBtZXRob2QuY2FsbChub2RlKSA6IG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUpOwogICAgICAgIH07CgogICAgICAgIC8vIGhhc0F0dHJpYnV0ZQoKICAgICAgICBmZWF0dXJlcy5oYXNBdHRyaWJ1dGUgPSAocm9vdCAmJiB0aGlzLmlzTmF0aXZlQ29kZShyb290Lmhhc0F0dHJpYnV0ZSkpID8gZnVuY3Rpb24obm9kZSwgYXR0cmlidXRlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKTsKICAgICAgICB9IDogZnVuY3Rpb24obm9kZSwgYXR0cmlidXRlKSB7CiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5nZXRBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gISEobm9kZSAmJiAobm9kZS5zcGVjaWZpZWQgfHwgbm9kZS5ub2RlVmFsdWUpKTsKICAgICAgICB9OwoKICAgICAgICAvLyBjb250YWlucwogICAgICAgIC8vIEZJWE1FOiBBZGQgc3BlY3M6IGxvY2FsLmNvbnRhaW5zIHNob3VsZCBiZSBkaWZmZXJlbnQgZm9yIHhtbCBhbmQgaHRtbCBkb2N1bWVudHM/CiAgICAgICAgZmVhdHVyZXMuY29udGFpbnMgPSAocm9vdCAmJiB0aGlzLmlzTmF0aXZlQ29kZShyb290LmNvbnRhaW5zKSkgPyBmdW5jdGlvbihjb250ZXh0LCBub2RlKXsKICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbnRhaW5zKG5vZGUpOwogICAgICAgIH0gOiAocm9vdCAmJiByb290LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSA/IGZ1bmN0aW9uKGNvbnRleHQsIG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgPT09IG5vZGUgfHwgISEoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIDE2KTsKICAgICAgICB9IDogZnVuY3Rpb24oY29udGV4dCwgbm9kZSl7CiAgICAgICAgICAgICAgICBpZiAobm9kZSkgZG8gewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gY29udGV4dCkgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9IHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH07CgogICAgICAgIC8vIGRvY3VtZW50IG9yZGVyIHNvcnRpbmcKICAgICAgICAvLyBjcmVkaXRzIHRvIFNpenpsZSAoaHR0cDovL3NpenpsZWpzLmNvbS8pCgogICAgICAgIGZlYXR1cmVzLmRvY3VtZW50U29ydGVyID0gKHJvb3QuY29tcGFyZURvY3VtZW50UG9zaXRpb24pID8gZnVuY3Rpb24oYSwgYil7CiAgICAgICAgICAgICAgICBpZiAoIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gfHwgIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHJldHVybiAwOwogICAgICAgICAgICAgICAgcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikgJiA0ID8gLTEgOiBhID09PSBiID8gMCA6IDE7CiAgICAgICAgfSA6ICgnc291cmNlSW5kZXgnIGluIHJvb3QpID8gZnVuY3Rpb24oYSwgYil7CiAgICAgICAgICAgICAgICBpZiAoIWEuc291cmNlSW5kZXggfHwgIWIuc291cmNlSW5kZXgpIHJldHVybiAwOwogICAgICAgICAgICAgICAgcmV0dXJuIGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4OwogICAgICAgIH0gOiAoZG9jdW1lbnQuY3JlYXRlUmFuZ2UpID8gZnVuY3Rpb24oYSwgYil7CiAgICAgICAgICAgICAgICBpZiAoIWEub3duZXJEb2N1bWVudCB8fCAhYi5vd25lckRvY3VtZW50KSByZXR1cm4gMDsKICAgICAgICAgICAgICAgIHZhciBhUmFuZ2UgPSBhLm93bmVyRG9jdW1lbnQuY3JlYXRlUmFuZ2UoKSwgYlJhbmdlID0gYi5vd25lckRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7CiAgICAgICAgICAgICAgICBhUmFuZ2Uuc2V0U3RhcnQoYSwgMCk7CiAgICAgICAgICAgICAgICBhUmFuZ2Uuc2V0RW5kKGEsIDApOwogICAgICAgICAgICAgICAgYlJhbmdlLnNldFN0YXJ0KGIsIDApOwogICAgICAgICAgICAgICAgYlJhbmdlLnNldEVuZChiLCAwKTsKICAgICAgICAgICAgICAgIHJldHVybiBhUmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKFJhbmdlLlNUQVJUX1RPX0VORCwgYlJhbmdlKTsKICAgICAgICB9IDogbnVsbCA7CgogICAgICAgIHJvb3QgPSBudWxsOwoKICAgICAgICBmb3IgKGZlYXR1cmUgaW4gZmVhdHVyZXMpewogICAgICAgICAgICAgICAgdGhpc1tmZWF0dXJlXSA9IGZlYXR1cmVzW2ZlYXR1cmVdOwogICAgICAgIH0KfTsKCi8vIE1haW4gTWV0aG9kCgp2YXIgcmVTaW1wbGVTZWxlY3RvciA9IC9eKFsjLl0/KSgoPzpbXHctXSt8XCopKSQvLAogICAgICAgIHJlRW1wdHlBdHRyaWJ1dGUgPSAvXFsuK1sqJF5dPSg/OiIifCcnKT9cXS8sCiAgICAgICAgcXNhRmFpbEV4cENhY2hlID0ge307Cgpsb2NhbC5zZWFyY2ggPSBmdW5jdGlvbihjb250ZXh0LCBleHByZXNzaW9uLCBhcHBlbmQsIGZpcnN0KXsKCiAgICAgICAgdmFyIGZvdW5kID0gdGhpcy5mb3VuZCA9IChmaXJzdCkgPyBudWxsIDogKGFwcGVuZCB8fCBbXSk7CgogICAgICAgIGlmICghY29udGV4dCkgcmV0dXJuIGZvdW5kOwogICAgICAgIGVsc2UgaWYgKGNvbnRleHQubmF2aWdhdG9yKSBjb250ZXh0ID0gY29udGV4dC5kb2N1bWVudDsgLy8gQ29udmVydCB0aGUgbm9kZSBmcm9tIGEgd2luZG93IHRvIGEgZG9jdW1lbnQKICAgICAgICBlbHNlIGlmICghY29udGV4dC5ub2RlVHlwZSkgcmV0dXJuIGZvdW5kOwoKICAgICAgICAvLyBzZXR1cAoKICAgICAgICB2YXIgcGFyc2VkLCBpLAogICAgICAgICAgICAgICAgdW5pcXVlcyA9IHRoaXMudW5pcXVlcyA9IHt9LAogICAgICAgICAgICAgICAgaGFzT3RoZXJzID0gISEoYXBwZW5kICYmIGFwcGVuZC5sZW5ndGgpLAogICAgICAgICAgICAgICAgY29udGV4dElzRG9jdW1lbnQgPSAoY29udGV4dC5ub2RlVHlwZSA9PSA5KTsKCiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnQgIT09IChjb250ZXh0SXNEb2N1bWVudCA/IGNvbnRleHQgOiBjb250ZXh0Lm93bmVyRG9jdW1lbnQpKSB0aGlzLnNldERvY3VtZW50KGNvbnRleHQpOwoKICAgICAgICAvLyBhdm9pZCBkdXBsaWNhdGluZyBpdGVtcyBhbHJlYWR5IGluIHRoZSBhcHBlbmQgYXJyYXkKICAgICAgICBpZiAoaGFzT3RoZXJzKSBmb3IgKGkgPSBmb3VuZC5sZW5ndGg7IGktLTspIHVuaXF1ZXNbdGhpcy5nZXRVSUQoZm91bmRbaV0pXSA9IHRydWU7CgogICAgICAgIC8vIGV4cHJlc3Npb24gY2hlY2tzCgogICAgICAgIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PSAnc3RyaW5nJyl7IC8vIGV4cHJlc3Npb24gaXMgYSBzdHJpbmcKCiAgICAgICAgICAgICAgICAvKjxzaW1wbGUtc2VsZWN0b3JzLW92ZXJyaWRlPiovCiAgICAgICAgICAgICAgICB2YXIgc2ltcGxlU2VsZWN0b3IgPSBleHByZXNzaW9uLm1hdGNoKHJlU2ltcGxlU2VsZWN0b3IpOwogICAgICAgICAgICAgICAgc2ltcGxlU2VsZWN0b3JzOiBpZiAoc2ltcGxlU2VsZWN0b3IpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzeW1ib2wgPSBzaW1wbGVTZWxlY3RvclsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gc2ltcGxlU2VsZWN0b3JbMl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSwgbm9kZXM7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN5bWJvbCl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09ICcqJyAmJiB0aGlzLmJyb2tlblN0YXJHRUJUTikgYnJlYWsgc2ltcGxlU2VsZWN0b3JzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZShuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3QpIHJldHVybiBub2Rlc1swXSB8fCBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IG5vZGUgPSBub2Rlc1tpKytdOyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShoYXNPdGhlcnMgJiYgdW5pcXVlc1t0aGlzLmdldFVJRChub2RlKV0pKSBmb3VuZC5wdXNoKG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sID09ICcjJyl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0hUTUxEb2N1bWVudCB8fCAhY29udGV4dElzRG9jdW1lbnQpIGJyZWFrIHNpbXBsZVNlbGVjdG9yczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gY29udGV4dC5nZXRFbGVtZW50QnlJZChuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUpIHJldHVybiBmb3VuZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pZEdldHNOYW1lICYmIG5vZGUuZ2V0QXR0cmlidXRlTm9kZSgnaWQnKS5ub2RlVmFsdWUgIT0gbmFtZSkgYnJlYWsgc2ltcGxlU2VsZWN0b3JzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCkgcmV0dXJuIG5vZGUgfHwgbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShoYXNPdGhlcnMgJiYgdW5pcXVlc1t0aGlzLmdldFVJRChub2RlKV0pKSBmb3VuZC5wdXNoKG5vZGUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzeW1ib2wgPT0gJy4nKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzSFRNTERvY3VtZW50IHx8ICgoIWNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSB8fCB0aGlzLmJyb2tlbkdFQkNOKSAmJiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwpKSBicmVhayBzaW1wbGVTZWxlY3RvcnM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiAhdGhpcy5icm9rZW5HRUJDTil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCkgcmV0dXJuIG5vZGVzWzBdIHx8IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBub2RlID0gbm9kZXNbaSsrXTspewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShoYXNPdGhlcnMgJiYgdW5pcXVlc1t0aGlzLmdldFVJRChub2RlKV0pKSBmb3VuZC5wdXNoKG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hDbGFzcyA9IG5ldyBSZWdFeHAoJyhefFxccyknKyBTbGljay5lc2NhcGVSZWdFeHAobmFtZSkgKycoXFxzfCQpJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IG5vZGUgPSBub2Rlc1tpKytdOyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IG5vZGUuY2xhc3NOYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShjbGFzc05hbWUgJiYgbWF0Y2hDbGFzcy50ZXN0KGNsYXNzTmFtZSkpKSBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0KSByZXR1cm4gbm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaGFzT3RoZXJzICYmIHVuaXF1ZXNbdGhpcy5nZXRVSUQobm9kZSldKSkgZm91bmQucHVzaChub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3RoZXJzKSB0aGlzLnNvcnQoZm91bmQpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZpcnN0KSA/IG51bGwgOiBmb3VuZDsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvKjwvc2ltcGxlLXNlbGVjdG9ycy1vdmVycmlkZT4qLwoKICAgICAgICAgICAgICAgIC8qPHF1ZXJ5LXNlbGVjdG9yLW92ZXJyaWRlPiovCiAgICAgICAgICAgICAgICBxdWVyeVNlbGVjdG9yOiBpZiAoY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNIVE1MRG9jdW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBxc2FGYWlsRXhwQ2FjaGVbZXhwcmVzc2lvbl0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86IG9ubHkgc2tpcCB3aGVuIGV4cHJlc3Npb24gaXMgYWN0dWFsbHkgbWl4ZWQgY2FzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHRoaXMuYnJva2VuTWl4ZWRDYXNlUVNBCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKHRoaXMuYnJva2VuQ2hlY2tlZFFTQSAmJiBleHByZXNzaW9uLmluZGV4T2YoJzpjaGVja2VkJykgPiAtMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAodGhpcy5icm9rZW5FbXB0eUF0dHJpYnV0ZVFTQSAmJiByZUVtcHR5QXR0cmlidXRlLnRlc3QoZXhwcmVzc2lvbikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKCFjb250ZXh0SXNEb2N1bWVudCAvL0Fib3J0IHdoZW4gIWNvbnRleHRJc0RvY3VtZW50IGFuZC4uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIHRoZXJlIGFyZSBtdWx0aXBsZSBleHByZXNzaW9ucyBpbiB0aGUgc2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICBzaW5jZSB3ZSBjdXJyZW50bHkgb25seSBmaXggbm9uLWRvY3VtZW50IHJvb3RlZCBRU0EgZm9yIHNpbmdsZSBleHByZXNzaW9uIHNlbGVjdG9ycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgZXhwcmVzc2lvbi5pbmRleE9mKCcsJykgPiAtMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBTbGljay5kaXNhYmxlUVNBCiAgICAgICAgICAgICAgICAgICAgICAgICkgYnJlYWsgcXVlcnlTZWxlY3RvcjsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24sIF9jb250ZXh0ID0gY29udGV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0SXNEb2N1bWVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9uLWRvY3VtZW50IHJvb3RlZCBRU0EKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjcmVkaXRzIHRvIEFuZHJldyBEdXBvbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudElkID0gX2NvbnRleHQuZ2V0QXR0cmlidXRlKCdpZCcpLCBzbGlja2lkID0gJ3NsaWNraWRfXyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQuc2V0QXR0cmlidXRlKCdpZCcsIHNsaWNraWQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9leHByZXNzaW9uID0gJyMnICsgc2xpY2tpZCArICcgJyArIF9leHByZXNzaW9uOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBfY29udGV4dC5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCkgcmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvcihfZXhwcmVzc2lvbikgfHwgbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIG5vZGVzID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKF9leHByZXNzaW9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXNhRmFpbEV4cENhY2hlW2V4cHJlc3Npb25dID0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBxdWVyeVNlbGVjdG9yOwogICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29udGV4dElzRG9jdW1lbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJZCkgX2NvbnRleHQuc2V0QXR0cmlidXRlKCdpZCcsIGN1cnJlbnRJZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIF9jb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBfY29udGV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJTZWxlY3RzQ2xvc2VkUVNBKSBmb3IgKGkgPSAwOyBub2RlID0gbm9kZXNbaSsrXTspewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lID4gJ0AnICYmICEoaGFzT3RoZXJzICYmIHVuaXF1ZXNbdGhpcy5nZXRVSUQobm9kZSldKSkgZm91bmQucHVzaChub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGZvciAoaSA9IDA7IG5vZGUgPSBub2Rlc1tpKytdOyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaGFzT3RoZXJzICYmIHVuaXF1ZXNbdGhpcy5nZXRVSUQobm9kZSldKSkgZm91bmQucHVzaChub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc090aGVycykgdGhpcy5zb3J0KGZvdW5kKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kOwoKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qPC9xdWVyeS1zZWxlY3Rvci1vdmVycmlkZT4qLwoKICAgICAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMuU2xpY2sucGFyc2UoZXhwcmVzc2lvbik7CiAgICAgICAgICAgICAgICBpZiAoIXBhcnNlZC5sZW5ndGgpIHJldHVybiBmb3VuZDsKICAgICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24gPT0gbnVsbCl7IC8vIHRoZXJlIGlzIG5vIGV4cHJlc3Npb24KICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZDsKICAgICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24uU2xpY2speyAvLyBleHByZXNzaW9uIGlzIGEgcGFyc2VkIFNsaWNrIG9iamVjdAogICAgICAgICAgICAgICAgcGFyc2VkID0gZXhwcmVzc2lvbjsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29udGFpbnMoY29udGV4dC5kb2N1bWVudEVsZW1lbnQgfHwgY29udGV4dCwgZXhwcmVzc2lvbikpeyAvLyBleHByZXNzaW9uIGlzIGEgbm9kZQogICAgICAgICAgICAgICAgKGZvdW5kKSA/IGZvdW5kLnB1c2goZXhwcmVzc2lvbikgOiBmb3VuZCA9IGV4cHJlc3Npb247CiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7CiAgICAgICAgfSBlbHNlIHsgLy8gb3RoZXIganVuawogICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kOwogICAgICAgIH0KCiAgICAgICAgLyo8cHNldWRvLXNlbGVjdG9ycz4qLy8qPG50aC1wc2V1ZG8tc2VsZWN0b3JzPiovCgogICAgICAgIC8vIGNhY2hlIGVsZW1lbnRzIGZvciB0aGUgbnRoIHNlbGVjdG9ycwoKICAgICAgICB0aGlzLnBvc05USCA9IHt9OwogICAgICAgIHRoaXMucG9zTlRITGFzdCA9IHt9OwogICAgICAgIHRoaXMucG9zTlRIVHlwZSA9IHt9OwogICAgICAgIHRoaXMucG9zTlRIVHlwZUxhc3QgPSB7fTsKCiAgICAgICAgLyo8L250aC1wc2V1ZG8tc2VsZWN0b3JzPiovLyo8L3BzZXVkby1zZWxlY3RvcnM+Ki8KCiAgICAgICAgLy8gaWYgYXBwZW5kIGlzIG51bGwgYW5kIHRoZXJlIGlzIG9ubHkgYSBzaW5nbGUgc2VsZWN0b3Igd2l0aCBvbmUgZXhwcmVzc2lvbiB1c2UgcHVzaEFycmF5LCBlbHNlIHVzZSBwdXNoVUlECiAgICAgICAgdGhpcy5wdXNoID0gKCFoYXNPdGhlcnMgJiYgKGZpcnN0IHx8IChwYXJzZWQubGVuZ3RoID09IDEgJiYgcGFyc2VkLmV4cHJlc3Npb25zWzBdLmxlbmd0aCA9PSAxKSkpID8gdGhpcy5wdXNoQXJyYXkgOiB0aGlzLnB1c2hVSUQ7CgogICAgICAgIGlmIChmb3VuZCA9PSBudWxsKSBmb3VuZCA9IFtdOwoKICAgICAgICAvLyBkZWZhdWx0IGVuZ2luZQoKICAgICAgICB2YXIgaiwgbSwgbjsKICAgICAgICB2YXIgY29tYmluYXRvciwgdGFnLCBpZCwgY2xhc3NMaXN0LCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zOwogICAgICAgIHZhciBjdXJyZW50SXRlbXMsIGN1cnJlbnRFeHByZXNzaW9uLCBjdXJyZW50Qml0LCBsYXN0Qml0LCBleHByZXNzaW9ucyA9IHBhcnNlZC5leHByZXNzaW9uczsKCiAgICAgICAgc2VhcmNoOiBmb3IgKGkgPSAwOyAoY3VycmVudEV4cHJlc3Npb24gPSBleHByZXNzaW9uc1tpXSk7IGkrKykgZm9yIChqID0gMDsgKGN1cnJlbnRCaXQgPSBjdXJyZW50RXhwcmVzc2lvbltqXSk7IGorKyl7CgogICAgICAgICAgICAgICAgY29tYmluYXRvciA9ICdjb21iaW5hdG9yOicgKyBjdXJyZW50Qml0LmNvbWJpbmF0b3I7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXNbY29tYmluYXRvcl0pIGNvbnRpbnVlIHNlYXJjaDsKCiAgICAgICAgICAgICAgICB0YWcgICAgICAgID0gKHRoaXMuaXNYTUxEb2N1bWVudCkgPyBjdXJyZW50Qml0LnRhZyA6IGN1cnJlbnRCaXQudGFnLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgICAgICBpZCAgICAgICAgID0gY3VycmVudEJpdC5pZDsKICAgICAgICAgICAgICAgIGNsYXNzTGlzdCAgPSBjdXJyZW50Qml0LmNsYXNzTGlzdDsKICAgICAgICAgICAgICAgIGNsYXNzZXMgICAgPSBjdXJyZW50Qml0LmNsYXNzZXM7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gY3VycmVudEJpdC5hdHRyaWJ1dGVzOwogICAgICAgICAgICAgICAgcHNldWRvcyAgICA9IGN1cnJlbnRCaXQucHNldWRvczsKICAgICAgICAgICAgICAgIGxhc3RCaXQgICAgPSAoaiA9PT0gKGN1cnJlbnRFeHByZXNzaW9uLmxlbmd0aCAtIDEpKTsKCiAgICAgICAgICAgICAgICB0aGlzLmJpdFVuaXF1ZXMgPSB7fTsKCiAgICAgICAgICAgICAgICBpZiAobGFzdEJpdCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5pcXVlcyA9IHVuaXF1ZXM7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm91bmQgPSBmb3VuZDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5pcXVlcyA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvdW5kID0gW107CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKGogPT09IDApewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2NvbWJpbmF0b3JdKGNvbnRleHQsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MsIGNsYXNzTGlzdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCAmJiBsYXN0Qml0ICYmIGZvdW5kLmxlbmd0aCkgYnJlYWsgc2VhcmNoOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0ICYmIGxhc3RCaXQpIGZvciAobSA9IDAsIG4gPSBjdXJyZW50SXRlbXMubGVuZ3RoOyBtIDwgbjsgbSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2NvbWJpbmF0b3JdKGN1cnJlbnRJdGVtc1ttXSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcywgY2xhc3NMaXN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmQubGVuZ3RoKSBicmVhayBzZWFyY2g7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBmb3IgKG0gPSAwLCBuID0gY3VycmVudEl0ZW1zLmxlbmd0aDsgbSA8IG47IG0rKykgdGhpc1tjb21iaW5hdG9yXShjdXJyZW50SXRlbXNbbV0sIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MsIGNsYXNzTGlzdCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY3VycmVudEl0ZW1zID0gdGhpcy5mb3VuZDsKICAgICAgICB9CgogICAgICAgIC8vIHNob3VsZCBzb3J0IGlmIHRoZXJlIGFyZSBub2RlcyBpbiBhcHBlbmQgYW5kIGlmIHlvdSBwYXNzIG11bHRpcGxlIGV4cHJlc3Npb25zLgogICAgICAgIGlmIChoYXNPdGhlcnMgfHwgKHBhcnNlZC5leHByZXNzaW9ucy5sZW5ndGggPiAxKSkgdGhpcy5zb3J0KGZvdW5kKTsKCiAgICAgICAgcmV0dXJuIChmaXJzdCkgPyAoZm91bmRbMF0gfHwgbnVsbCkgOiBmb3VuZDsKfTsKCi8vIFV0aWxzCgpsb2NhbC51aWR4ID0gMTsKbG9jYWwudWlkayA9ICdzbGljay11bmlxdWVpZCc7Cgpsb2NhbC5nZXRVSURYTUwgPSBmdW5jdGlvbihub2RlKXsKICAgICAgICB2YXIgdWlkID0gbm9kZS5nZXRBdHRyaWJ1dGUodGhpcy51aWRrKTsKICAgICAgICBpZiAoIXVpZCl7CiAgICAgICAgICAgICAgICB1aWQgPSB0aGlzLnVpZHgrKzsKICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKHRoaXMudWlkaywgdWlkKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVpZDsKfTsKCmxvY2FsLmdldFVJREhUTUwgPSBmdW5jdGlvbihub2RlKXsKICAgICAgICByZXR1cm4gbm9kZS51bmlxdWVOdW1iZXIgfHwgKG5vZGUudW5pcXVlTnVtYmVyID0gdGhpcy51aWR4KyspOwp9OwoKLy8gc29ydCBiYXNlZCBvbiB0aGUgc2V0RG9jdW1lbnQgZG9jdW1lbnRTb3J0ZXIgbWV0aG9kLgoKbG9jYWwuc29ydCA9IGZ1bmN0aW9uKHJlc3VsdHMpewogICAgICAgIGlmICghdGhpcy5kb2N1bWVudFNvcnRlcikgcmV0dXJuIHJlc3VsdHM7CiAgICAgICAgcmVzdWx0cy5zb3J0KHRoaXMuZG9jdW1lbnRTb3J0ZXIpOwogICAgICAgIHJldHVybiByZXN1bHRzOwp9OwoKLyo8cHNldWRvLXNlbGVjdG9ycz4qLy8qPG50aC1wc2V1ZG8tc2VsZWN0b3JzPiovCgpsb2NhbC5jYWNoZU5USCA9IHt9OwoKbG9jYWwubWF0Y2hOVEggPSAvXihbKy1dP1xkKik/KFthLXpdKyk/KFsrLV1cZCspPyQvOwoKbG9jYWwucGFyc2VOVEhBcmd1bWVudCA9IGZ1bmN0aW9uKGFyZ3VtZW50KXsKICAgICAgICB2YXIgcGFyc2VkID0gYXJndW1lbnQubWF0Y2godGhpcy5tYXRjaE5USCk7CiAgICAgICAgaWYgKCFwYXJzZWQpIHJldHVybiBmYWxzZTsKICAgICAgICB2YXIgc3BlY2lhbCA9IHBhcnNlZFsyXSB8fCBmYWxzZTsKICAgICAgICB2YXIgYSA9IHBhcnNlZFsxXSB8fCAxOwogICAgICAgIGlmIChhID09ICctJykgYSA9IC0xOwogICAgICAgIHZhciBiID0gK3BhcnNlZFszXSB8fCAwOwogICAgICAgIHBhcnNlZCA9CiAgICAgICAgICAgICAgICAoc3BlY2lhbCA9PSAnbicpICAgICAgICA/IHthOiBhLCBiOiBifSA6CiAgICAgICAgICAgICAgICAoc3BlY2lhbCA9PSAnb2RkJykgICAgICA/IHthOiAyLCBiOiAxfSA6CiAgICAgICAgICAgICAgICAoc3BlY2lhbCA9PSAnZXZlbicpICAgICA/IHthOiAyLCBiOiAwfSA6IHthOiAwLCBiOiBhfTsKCiAgICAgICAgcmV0dXJuICh0aGlzLmNhY2hlTlRIW2FyZ3VtZW50XSA9IHBhcnNlZCk7Cn07Cgpsb2NhbC5jcmVhdGVOVEhQc2V1ZG8gPSBmdW5jdGlvbihjaGlsZCwgc2libGluZywgcG9zaXRpb25zLCBvZlR5cGUpewogICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlLCBhcmd1bWVudCl7CiAgICAgICAgICAgICAgICB2YXIgdWlkID0gdGhpcy5nZXRVSUQobm9kZSk7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXNbcG9zaXRpb25zXVt1aWRdKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJlbnQpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gcGFyZW50W2NoaWxkXSwgY291bnQgPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAob2ZUeXBlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbC5ub2RlTmFtZSAhPSBub2RlTmFtZSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Bvc2l0aW9uc11bdGhpcy5nZXRVSUQoZWwpXSA9IGNvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoKGVsID0gZWxbc2libGluZ10pKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwubm9kZVR5cGUgIT0gMSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Bvc2l0aW9uc11bdGhpcy5nZXRVSUQoZWwpXSA9IGNvdW50Kys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoKGVsID0gZWxbc2libGluZ10pKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYXJndW1lbnQgPSBhcmd1bWVudCB8fCAnbic7CiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gdGhpcy5jYWNoZU5USFthcmd1bWVudF0gfHwgdGhpcy5wYXJzZU5USEFyZ3VtZW50KGFyZ3VtZW50KTsKICAgICAgICAgICAgICAgIGlmICghcGFyc2VkKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB2YXIgYSA9IHBhcnNlZC5hLCBiID0gcGFyc2VkLmIsIHBvcyA9IHRoaXNbcG9zaXRpb25zXVt1aWRdOwogICAgICAgICAgICAgICAgaWYgKGEgPT0gMCkgcmV0dXJuIGIgPT0gcG9zOwogICAgICAgICAgICAgICAgaWYgKGEgPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA8IGIpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiIDwgcG9zKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gKChwb3MgLSBiKSAlIGEpID09IDA7CiAgICAgICAgfTsKfTsKCi8qPC9udGgtcHNldWRvLXNlbGVjdG9ycz4qLy8qPC9wc2V1ZG8tc2VsZWN0b3JzPiovCgpsb2NhbC5wdXNoQXJyYXkgPSBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsKICAgICAgICBpZiAodGhpcy5tYXRjaFNlbGVjdG9yKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpKSB0aGlzLmZvdW5kLnB1c2gobm9kZSk7Cn07Cgpsb2NhbC5wdXNoVUlEID0gZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7CiAgICAgICAgdmFyIHVpZCA9IHRoaXMuZ2V0VUlEKG5vZGUpOwogICAgICAgIGlmICghdGhpcy51bmlxdWVzW3VpZF0gJiYgdGhpcy5tYXRjaFNlbGVjdG9yKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpKXsKICAgICAgICAgICAgICAgIHRoaXMudW5pcXVlc1t1aWRdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRoaXMuZm91bmQucHVzaChub2RlKTsKICAgICAgICB9Cn07Cgpsb2NhbC5tYXRjaE5vZGUgPSBmdW5jdGlvbihub2RlLCBzZWxlY3Rvcil7CiAgICAgICAgaWYgKHRoaXMuaXNIVE1MRG9jdW1lbnQgJiYgdGhpcy5uYXRpdmVNYXRjaGVzU2VsZWN0b3IpewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yLmNhbGwobm9kZSwgc2VsZWN0b3IucmVwbGFjZSgvXFsoW149XSspPVxzKihbXiciXF1dKz8pXHMqXF0vZywgJ1skMT0iJDIiXScpKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2gobWF0Y2hFcnJvcikge30KICAgICAgICB9CgogICAgICAgIHZhciBwYXJzZWQgPSB0aGlzLlNsaWNrLnBhcnNlKHNlbGVjdG9yKTsKICAgICAgICBpZiAoIXBhcnNlZCkgcmV0dXJuIHRydWU7CgogICAgICAgIC8vIHNpbXBsZSAoc2luZ2xlKSBzZWxlY3RvcnMKICAgICAgICB2YXIgZXhwcmVzc2lvbnMgPSBwYXJzZWQuZXhwcmVzc2lvbnMsIHNpbXBsZUV4cENvdW50ZXIgPSAwLCBpOwogICAgICAgIGZvciAoaSA9IDA7IChjdXJyZW50RXhwcmVzc2lvbiA9IGV4cHJlc3Npb25zW2ldKTsgaSsrKXsKICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RXhwcmVzc2lvbi5sZW5ndGggPT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHAgPSBjdXJyZW50RXhwcmVzc2lvblswXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hTZWxlY3Rvcihub2RlLCAodGhpcy5pc1hNTERvY3VtZW50KSA/IGV4cC50YWcgOiBleHAudGFnLnRvVXBwZXJDYXNlKCksIGV4cC5pZCwgZXhwLmNsYXNzZXMsIGV4cC5hdHRyaWJ1dGVzLCBleHAucHNldWRvcykpIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBzaW1wbGVFeHBDb3VudGVyKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoc2ltcGxlRXhwQ291bnRlciA9PSBwYXJzZWQubGVuZ3RoKSByZXR1cm4gZmFsc2U7CgogICAgICAgIHZhciBub2RlcyA9IHRoaXMuc2VhcmNoKHRoaXMuZG9jdW1lbnQsIHBhcnNlZCksIGl0ZW07CiAgICAgICAgZm9yIChpID0gMDsgaXRlbSA9IG5vZGVzW2krK107KXsKICAgICAgICAgICAgICAgIGlmIChpdGVtID09PSBub2RlKSByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwp9OwoKbG9jYWwubWF0Y2hQc2V1ZG8gPSBmdW5jdGlvbihub2RlLCBuYW1lLCBhcmd1bWVudCl7CiAgICAgICAgdmFyIHBzZXVkb05hbWUgPSAncHNldWRvOicgKyBuYW1lOwogICAgICAgIGlmICh0aGlzW3BzZXVkb05hbWVdKSByZXR1cm4gdGhpc1twc2V1ZG9OYW1lXShub2RlLCBhcmd1bWVudCk7CiAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKG5vZGUsIG5hbWUpOwogICAgICAgIHJldHVybiAoYXJndW1lbnQpID8gYXJndW1lbnQgPT0gYXR0cmlidXRlIDogISFhdHRyaWJ1dGU7Cn07Cgpsb2NhbC5tYXRjaFNlbGVjdG9yID0gZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7CiAgICAgICAgaWYgKHRhZyl7CiAgICAgICAgICAgICAgICB2YXIgbm9kZU5hbWUgPSAodGhpcy5pc1hNTERvY3VtZW50KSA/IG5vZGUubm9kZU5hbWUgOiBub2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgICAgICBpZiAodGFnID09ICcqJyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlTmFtZSA8ICdAJykgcmV0dXJuIGZhbHNlOyAvLyBGaXggZm9yIGNvbW1lbnQgbm9kZXMgYW5kIGNsb3NlZCBub2RlcwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lICE9IHRhZykgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGlkICYmIG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpICE9IGlkKSByZXR1cm4gZmFsc2U7CgogICAgICAgIHZhciBpLCBwYXJ0LCBjbHM7CiAgICAgICAgaWYgKGNsYXNzZXMpIGZvciAoaSA9IGNsYXNzZXMubGVuZ3RoOyBpLS07KXsKICAgICAgICAgICAgICAgIGNscyA9IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8IG5vZGUuY2xhc3NOYW1lOwogICAgICAgICAgICAgICAgaWYgKCEoY2xzICYmIGNsYXNzZXNbaV0ucmVnZXhwLnRlc3QoY2xzKSkpIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKGF0dHJpYnV0ZXMpIGZvciAoaSA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBpLS07KXsKICAgICAgICAgICAgICAgIHBhcnQgPSBhdHRyaWJ1dGVzW2ldOwogICAgICAgICAgICAgICAgaWYgKHBhcnQub3BlcmF0b3IgPyAhcGFydC50ZXN0KHRoaXMuZ2V0QXR0cmlidXRlKG5vZGUsIHBhcnQua2V5KSkgOiAhdGhpcy5oYXNBdHRyaWJ1dGUobm9kZSwgcGFydC5rZXkpKSByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmIChwc2V1ZG9zKSBmb3IgKGkgPSBwc2V1ZG9zLmxlbmd0aDsgaS0tOyl7CiAgICAgICAgICAgICAgICBwYXJ0ID0gcHNldWRvc1tpXTsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaFBzZXVkbyhub2RlLCBwYXJ0LmtleSwgcGFydC52YWx1ZSkpIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7Cn07Cgp2YXIgY29tYmluYXRvcnMgPSB7CgogICAgICAgICcgJzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcywgY2xhc3NMaXN0KXsgLy8gYWxsIGNoaWxkIG5vZGVzLCBhbnkgbGV2ZWwKCiAgICAgICAgICAgICAgICB2YXIgaSwgaXRlbSwgY2hpbGRyZW47CgogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNIVE1MRG9jdW1lbnQpewogICAgICAgICAgICAgICAgICAgICAgICBnZXRCeUlkOiBpZiAoaWQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCFpdGVtICYmIG5vZGUuYWxsKSB8fCAodGhpcy5pZEdldHNOYW1lICYmIGl0ZW0gJiYgaXRlbS5nZXRBdHRyaWJ1dGVOb2RlKCdpZCcpLm5vZGVWYWx1ZSAhPSBpZCkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxsW2lkXSByZXR1cm5zIGFsbCB0aGUgZWxlbWVudHMgd2l0aCB0aGF0IG5hbWUgb3IgaWQgaW5zaWRlIG5vZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlcyBqdXN0IG9uZSBpdCB3aWxsIHJldHVybiB0aGUgZWxlbWVudCwgZWxzZSBpdCB3aWxsIGJlIGEgY29sbGVjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBub2RlLmFsbFtpZF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuWzBdKSBjaGlsZHJlbiA9IFtjaGlsZHJlbl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpdGVtID0gY2hpbGRyZW5baSsrXTspewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWROb2RlID0gaXRlbS5nZXRBdHRyaWJ1dGVOb2RlKCdpZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWROb2RlICYmIGlkTm9kZS5ub2RlVmFsdWUgPT0gaWQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChpdGVtLCB0YWcsIG51bGwsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXRlbSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgY29udGV4dCBpcyBpbiB0aGUgZG9tIHdlIHJldHVybiwgZWxzZSB3ZSB3aWxsIHRyeSBHRUJUTiwgYnJlYWtpbmcgdGhlIGdldEJ5SWQgbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5zKHRoaXMucm9vdCwgbm9kZSkpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgYnJlYWsgZ2V0QnlJZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZG9jdW1lbnQgIT09IG5vZGUgJiYgIXRoaXMuY29udGFpbnMobm9kZSwgaXRlbSkpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1c2goaXRlbSwgdGFnLCBudWxsLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QnlDbGFzczogaWYgKGNsYXNzZXMgJiYgbm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmICF0aGlzLmJyb2tlbkdFQkNOKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IG5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc0xpc3Quam9pbignICcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpKSBicmVhayBnZXRCeUNsYXNzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGl0ZW0gPSBjaGlsZHJlbltpKytdOykgdGhpcy5wdXNoKGl0ZW0sIHRhZywgaWQsIG51bGwsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZ2V0QnlUYWc6IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkpIGJyZWFrIGdldEJ5VGFnOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYnJva2VuU3RhckdFQlROKSB0YWcgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpdGVtID0gY2hpbGRyZW5baSsrXTspIHRoaXMucHVzaChpdGVtLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAnPic6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBkaXJlY3QgY2hpbGRyZW4KICAgICAgICAgICAgICAgIGlmICgobm9kZSA9IG5vZGUuZmlyc3RDaGlsZCkpIGRvIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkgdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgfSB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSk7CiAgICAgICAgfSwKCiAgICAgICAgJysnOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gbmV4dCBzaWJsaW5nCiAgICAgICAgICAgICAgICB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSkgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgJ14nOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gZmlyc3QgY2hpbGQKICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgICAgICBpZiAobm9kZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHRoaXMucHVzaChub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB0aGlzWydjb21iaW5hdG9yOisnXShub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAnfic6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBuZXh0IHNpYmxpbmdzCiAgICAgICAgICAgICAgICB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9IDEpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdWlkID0gdGhpcy5nZXRVSUQobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJpdFVuaXF1ZXNbdWlkXSkgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYml0VW5pcXVlc1t1aWRdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgICcrKyc6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBuZXh0IHNpYmxpbmcgYW5kIHByZXZpb3VzIHNpYmxpbmcKICAgICAgICAgICAgICAgIHRoaXNbJ2NvbWJpbmF0b3I6KyddKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgdGhpc1snY29tYmluYXRvcjohKyddKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgIH0sCgogICAgICAgICd+fic6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBuZXh0IHNpYmxpbmdzIGFuZCBwcmV2aW91cyBzaWJsaW5ncwogICAgICAgICAgICAgICAgdGhpc1snY29tYmluYXRvcjp+J10obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyk7CiAgICAgICAgICAgICAgICB0aGlzWydjb21iaW5hdG9yOiF+J10obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyk7CiAgICAgICAgfSwKCiAgICAgICAgJyEnOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gYWxsIHBhcmVudCBub2RlcyB1cCB0byBkb2N1bWVudAogICAgICAgICAgICAgICAgd2hpbGUgKChub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgaWYgKG5vZGUgIT09IHRoaXMuZG9jdW1lbnQpIHRoaXMucHVzaChub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICB9LAoKICAgICAgICAnIT4nOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gZGlyZWN0IHBhcmVudCAob25lIGxldmVsKQogICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIGlmIChub2RlICE9PSB0aGlzLmRvY3VtZW50KSB0aGlzLnB1c2gobm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyk7CiAgICAgICAgfSwKCiAgICAgICAgJyErJzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7IC8vIHByZXZpb3VzIHNpYmxpbmcKICAgICAgICAgICAgICAgIHdoaWxlICgobm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSkgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgJyFeJzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7IC8vIGxhc3QgY2hpbGQKICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDsKICAgICAgICAgICAgICAgIGlmIChub2RlKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkgdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXNbJ2NvbWJpbmF0b3I6ISsnXShub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAnIX4nOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gcHJldmlvdXMgc2libGluZ3MKICAgICAgICAgICAgICAgIHdoaWxlICgobm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9IDEpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdWlkID0gdGhpcy5nZXRVSUQobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJpdFVuaXF1ZXNbdWlkXSkgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYml0VW5pcXVlc1t1aWRdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KCn07Cgpmb3IgKHZhciBjIGluIGNvbWJpbmF0b3JzKSBsb2NhbFsnY29tYmluYXRvcjonICsgY10gPSBjb21iaW5hdG9yc1tjXTsKCnZhciBwc2V1ZG9zID0gewoKICAgICAgICAvKjxwc2V1ZG8tc2VsZWN0b3JzPiovCgogICAgICAgICdlbXB0eSc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkOwogICAgICAgICAgICAgICAgcmV0dXJuICEoY2hpbGQgJiYgY2hpbGQubm9kZVR5cGUgPT0gMSkgJiYgIShub2RlLmlubmVyVGV4dCB8fCBub2RlLnRleHRDb250ZW50IHx8ICcnKS5sZW5ndGg7CiAgICAgICAgfSwKCiAgICAgICAgJ25vdCc6IGZ1bmN0aW9uKG5vZGUsIGV4cHJlc3Npb24pewogICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLm1hdGNoTm9kZShub2RlLCBleHByZXNzaW9uKTsKICAgICAgICB9LAoKICAgICAgICAnY29udGFpbnMnOiBmdW5jdGlvbihub2RlLCB0ZXh0KXsKICAgICAgICAgICAgICAgIHJldHVybiAobm9kZS5pbm5lclRleHQgfHwgbm9kZS50ZXh0Q29udGVudCB8fCAnJykuaW5kZXhPZih0ZXh0KSA+IC0xOwogICAgICAgIH0sCgogICAgICAgICdmaXJzdC1jaGlsZCc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgd2hpbGUgKChub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmcpKSBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAoKICAgICAgICAnbGFzdC1jaGlsZCc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgd2hpbGUgKChub2RlID0gbm9kZS5uZXh0U2libGluZykpIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sCgogICAgICAgICdvbmx5LWNoaWxkJzogZnVuY3Rpb24obm9kZSl7CiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IG5vZGU7CiAgICAgICAgICAgICAgICB3aGlsZSAoKHByZXYgPSBwcmV2LnByZXZpb3VzU2libGluZykpIGlmIChwcmV2Lm5vZGVUeXBlID09IDEpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gbm9kZTsKICAgICAgICAgICAgICAgIHdoaWxlICgobmV4dCA9IG5leHQubmV4dFNpYmxpbmcpKSBpZiAobmV4dC5ub2RlVHlwZSA9PSAxKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAoKICAgICAgICAvKjxudGgtcHNldWRvLXNlbGVjdG9ycz4qLwoKICAgICAgICAnbnRoLWNoaWxkJzogbG9jYWwuY3JlYXRlTlRIUHNldWRvKCdmaXJzdENoaWxkJywgJ25leHRTaWJsaW5nJywgJ3Bvc05USCcpLAoKICAgICAgICAnbnRoLWxhc3QtY2hpbGQnOiBsb2NhbC5jcmVhdGVOVEhQc2V1ZG8oJ2xhc3RDaGlsZCcsICdwcmV2aW91c1NpYmxpbmcnLCAncG9zTlRITGFzdCcpLAoKICAgICAgICAnbnRoLW9mLXR5cGUnOiBsb2NhbC5jcmVhdGVOVEhQc2V1ZG8oJ2ZpcnN0Q2hpbGQnLCAnbmV4dFNpYmxpbmcnLCAncG9zTlRIVHlwZScsIHRydWUpLAoKICAgICAgICAnbnRoLWxhc3Qtb2YtdHlwZSc6IGxvY2FsLmNyZWF0ZU5USFBzZXVkbygnbGFzdENoaWxkJywgJ3ByZXZpb3VzU2libGluZycsICdwb3NOVEhUeXBlTGFzdCcsIHRydWUpLAoKICAgICAgICAnaW5kZXgnOiBmdW5jdGlvbihub2RlLCBpbmRleCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1sncHNldWRvOm50aC1jaGlsZCddKG5vZGUsICcnICsgaW5kZXggKyAxKTsKICAgICAgICB9LAoKICAgICAgICAnZXZlbic6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbJ3BzZXVkbzpudGgtY2hpbGQnXShub2RlLCAnMm4nKTsKICAgICAgICB9LAoKICAgICAgICAnb2RkJzogZnVuY3Rpb24obm9kZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1sncHNldWRvOm50aC1jaGlsZCddKG5vZGUsICcybisxJyk7CiAgICAgICAgfSwKCiAgICAgICAgLyo8L250aC1wc2V1ZG8tc2VsZWN0b3JzPiovCgogICAgICAgIC8qPG9mLXR5cGUtcHNldWRvLXNlbGVjdG9ycz4qLwoKICAgICAgICAnZmlyc3Qtb2YtdHlwZSc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgdmFyIG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZTsKICAgICAgICAgICAgICAgIHdoaWxlICgobm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSkgaWYgKG5vZGUubm9kZU5hbWUgPT0gbm9kZU5hbWUpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sCgogICAgICAgICdsYXN0LW9mLXR5cGUnOiBmdW5jdGlvbihub2RlKXsKICAgICAgICAgICAgICAgIHZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWU7CiAgICAgICAgICAgICAgICB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSkgaWYgKG5vZGUubm9kZU5hbWUgPT0gbm9kZU5hbWUpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sCgogICAgICAgICdvbmx5LW9mLXR5cGUnOiBmdW5jdGlvbihub2RlKXsKICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gbm9kZSwgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lOwogICAgICAgICAgICAgICAgd2hpbGUgKChwcmV2ID0gcHJldi5wcmV2aW91c1NpYmxpbmcpKSBpZiAocHJldi5ub2RlTmFtZSA9PSBub2RlTmFtZSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgdmFyIG5leHQgPSBub2RlOwogICAgICAgICAgICAgICAgd2hpbGUgKChuZXh0ID0gbmV4dC5uZXh0U2libGluZykpIGlmIChuZXh0Lm5vZGVOYW1lID09IG5vZGVOYW1lKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAoKICAgICAgICAvKjwvb2YtdHlwZS1wc2V1ZG8tc2VsZWN0b3JzPiovCgogICAgICAgIC8vIGN1c3RvbSBwc2V1ZG9zCgogICAgICAgICdlbmFibGVkJzogZnVuY3Rpb24obm9kZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gIW5vZGUuZGlzYWJsZWQ7CiAgICAgICAgfSwKCiAgICAgICAgJ2Rpc2FibGVkJzogZnVuY3Rpb24obm9kZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5kaXNhYmxlZDsKICAgICAgICB9LAoKICAgICAgICAnY2hlY2tlZCc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2hlY2tlZCB8fCBub2RlLnNlbGVjdGVkOwogICAgICAgIH0sCgogICAgICAgICdmb2N1cyc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNIVE1MRG9jdW1lbnQgJiYgdGhpcy5kb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBub2RlICYmIChub2RlLmhyZWYgfHwgbm9kZS50eXBlIHx8IHRoaXMuaGFzQXR0cmlidXRlKG5vZGUsICd0YWJpbmRleCcpKTsKICAgICAgICB9LAoKICAgICAgICAncm9vdCc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIChub2RlID09PSB0aGlzLnJvb3QpOwogICAgICAgIH0sCgogICAgICAgICdzZWxlY3RlZCc6IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuc2VsZWN0ZWQ7CiAgICAgICAgfQoKICAgICAgICAvKjwvcHNldWRvLXNlbGVjdG9ycz4qLwp9OwoKZm9yICh2YXIgcCBpbiBwc2V1ZG9zKSBsb2NhbFsncHNldWRvOicgKyBwXSA9IHBzZXVkb3NbcF07CgovLyBhdHRyaWJ1dGVzIG1ldGhvZHMKCnZhciBhdHRyaWJ1dGVHZXR0ZXJzID0gbG9jYWwuYXR0cmlidXRlR2V0dGVycyA9IHsKCiAgICAgICAgJ2NsYXNzJzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCB0aGlzLmNsYXNzTmFtZTsKICAgICAgICB9LAoKICAgICAgICAnZm9yJzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiAoJ2h0bWxGb3InIGluIHRoaXMpID8gdGhpcy5odG1sRm9yIDogdGhpcy5nZXRBdHRyaWJ1dGUoJ2ZvcicpOwogICAgICAgIH0sCgogICAgICAgICdocmVmJzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiAoJ2hyZWYnIGluIHRoaXMpID8gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnLCAyKSA6IHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyk7CiAgICAgICAgfSwKCiAgICAgICAgJ3N0eWxlJzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5zdHlsZSkgPyB0aGlzLnN0eWxlLmNzc1RleHQgOiB0aGlzLmdldEF0dHJpYnV0ZSgnc3R5bGUnKTsKICAgICAgICB9LAoKICAgICAgICAndGFiaW5kZXgnOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5vZGUgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUoJ3RhYmluZGV4Jyk7CiAgICAgICAgICAgICAgICByZXR1cm4gKGF0dHJpYnV0ZU5vZGUgJiYgYXR0cmlidXRlTm9kZS5zcGVjaWZpZWQpID8gYXR0cmlidXRlTm9kZS5ub2RlVmFsdWUgOiBudWxsOwogICAgICAgIH0sCgogICAgICAgICd0eXBlJzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgndHlwZScpOwogICAgICAgIH0sCgogICAgICAgICdtYXhsZW5ndGgnOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5vZGUgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUoJ21heExlbmd0aCcpOwogICAgICAgICAgICAgICAgcmV0dXJuIChhdHRyaWJ1dGVOb2RlICYmIGF0dHJpYnV0ZU5vZGUuc3BlY2lmaWVkKSA/IGF0dHJpYnV0ZU5vZGUubm9kZVZhbHVlIDogbnVsbDsKICAgICAgICB9Cgp9OwoKYXR0cmlidXRlR2V0dGVycy5NQVhMRU5HVEggPSBhdHRyaWJ1dGVHZXR0ZXJzLm1heExlbmd0aCA9IGF0dHJpYnV0ZUdldHRlcnMubWF4bGVuZ3RoOwoKLy8gU2xpY2sKCnZhciBTbGljayA9IGxvY2FsLlNsaWNrID0gKHRoaXMuU2xpY2sgfHwge30pOwoKU2xpY2sudmVyc2lvbiA9ICcxLjEuNic7CgovLyBTbGljayBmaW5kZXIKClNsaWNrLnNlYXJjaCA9IGZ1bmN0aW9uKGNvbnRleHQsIGV4cHJlc3Npb24sIGFwcGVuZCl7CiAgICAgICAgcmV0dXJuIGxvY2FsLnNlYXJjaChjb250ZXh0LCBleHByZXNzaW9uLCBhcHBlbmQpOwp9OwoKU2xpY2suZmluZCA9IGZ1bmN0aW9uKGNvbnRleHQsIGV4cHJlc3Npb24pewogICAgICAgIHJldHVybiBsb2NhbC5zZWFyY2goY29udGV4dCwgZXhwcmVzc2lvbiwgbnVsbCwgdHJ1ZSk7Cn07CgovLyBTbGljayBjb250YWlubWVudCBjaGVja2VyCgpTbGljay5jb250YWlucyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgbm9kZSl7CiAgICAgICAgbG9jYWwuc2V0RG9jdW1lbnQoY29udGFpbmVyKTsKICAgICAgICByZXR1cm4gbG9jYWwuY29udGFpbnMoY29udGFpbmVyLCBub2RlKTsKfTsKCi8vIFNsaWNrIGF0dHJpYnV0ZSBnZXR0ZXIKClNsaWNrLmdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5vZGUsIG5hbWUpewogICAgICAgIGxvY2FsLnNldERvY3VtZW50KG5vZGUpOwogICAgICAgIHJldHVybiBsb2NhbC5nZXRBdHRyaWJ1dGUobm9kZSwgbmFtZSk7Cn07CgpTbGljay5oYXNBdHRyaWJ1dGUgPSBmdW5jdGlvbihub2RlLCBuYW1lKXsKICAgICAgICBsb2NhbC5zZXREb2N1bWVudChub2RlKTsKICAgICAgICByZXR1cm4gbG9jYWwuaGFzQXR0cmlidXRlKG5vZGUsIG5hbWUpOwp9OwoKLy8gU2xpY2sgbWF0Y2hlcgoKU2xpY2subWF0Y2ggPSBmdW5jdGlvbihub2RlLCBzZWxlY3Rvcil7CiAgICAgICAgaWYgKCEobm9kZSAmJiBzZWxlY3RvcikpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBub2RlKSByZXR1cm4gdHJ1ZTsKICAgICAgICBsb2NhbC5zZXREb2N1bWVudChub2RlKTsKICAgICAgICByZXR1cm4gbG9jYWwubWF0Y2hOb2RlKG5vZGUsIHNlbGVjdG9yKTsKfTsKCi8vIFNsaWNrIGF0dHJpYnV0ZSBhY2Nlc3NvcgoKU2xpY2suZGVmaW5lQXR0cmlidXRlR2V0dGVyID0gZnVuY3Rpb24obmFtZSwgZm4pewogICAgICAgIGxvY2FsLmF0dHJpYnV0ZUdldHRlcnNbbmFtZV0gPSBmbjsKICAgICAgICByZXR1cm4gdGhpczsKfTsKClNsaWNrLmxvb2t1cEF0dHJpYnV0ZUdldHRlciA9IGZ1bmN0aW9uKG5hbWUpewogICAgICAgIHJldHVybiBsb2NhbC5hdHRyaWJ1dGVHZXR0ZXJzW25hbWVdOwp9OwoKLy8gU2xpY2sgcHNldWRvIGFjY2Vzc29yCgpTbGljay5kZWZpbmVQc2V1ZG8gPSBmdW5jdGlvbihuYW1lLCBmbil7CiAgICAgICAgbG9jYWxbJ3BzZXVkbzonICsgbmFtZV0gPSBmdW5jdGlvbihub2RlLCBhcmd1bWVudCl7CiAgICAgICAgICAgICAgICByZXR1cm4gZm4uY2FsbChub2RlLCBhcmd1bWVudCk7CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gdGhpczsKfTsKClNsaWNrLmxvb2t1cFBzZXVkbyA9IGZ1bmN0aW9uKG5hbWUpewogICAgICAgIHZhciBwc2V1ZG8gPSBsb2NhbFsncHNldWRvOicgKyBuYW1lXTsKICAgICAgICBpZiAocHNldWRvKSByZXR1cm4gZnVuY3Rpb24oYXJndW1lbnQpewogICAgICAgICAgICAgICAgcmV0dXJuIHBzZXVkby5jYWxsKHRoaXMsIGFyZ3VtZW50KTsKICAgICAgICB9OwogICAgICAgIHJldHVybiBudWxsOwp9OwoKLy8gU2xpY2sgb3ZlcnJpZGVzIGFjY2Vzc29yCgpTbGljay5vdmVycmlkZSA9IGZ1bmN0aW9uKHJlZ2V4cCwgZm4pewogICAgICAgIGxvY2FsLm92ZXJyaWRlKHJlZ2V4cCwgZm4pOwogICAgICAgIHJldHVybiB0aGlzOwp9OwoKU2xpY2suaXNYTUwgPSBsb2NhbC5pc1hNTDsKClNsaWNrLnVpZE9mID0gZnVuY3Rpb24obm9kZSl7CiAgICAgICAgcmV0dXJuIGxvY2FsLmdldFVJREhUTUwobm9kZSk7Cn07CgppZiAoIXRoaXMuU2xpY2spIHRoaXMuU2xpY2sgPSBTbGljazsKCn0pLmFwcGx5KC8qPENvbW1vbkpTPiovKHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnKSA/IGV4cG9ydHMgOiAvKjwvQ29tbW9uSlM+Ki90aGlzKTsKCgovKgotLS0KCm5hbWU6IEVsZW1lbnQKCmRlc2NyaXB0aW9uOiBPbmUgb2YgdGhlIG1vc3QgaW1wb3J0YW50IGl0ZW1zIGluIE1vb1Rvb2xzLiBDb250YWlucyB0aGUgZG9sbGFyIGZ1bmN0aW9uLCB0aGUgZG9sbGFycyBmdW5jdGlvbiwgYW5kIGFuIGhhbmRmdWwgb2YgY3Jvc3MtYnJvd3NlciwgdGltZS1zYXZlciBtZXRob2RzIHRvIGxldCB5b3UgZWFzaWx5IHdvcmsgd2l0aCBIVE1MIEVsZW1lbnRzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW1dpbmRvdywgRG9jdW1lbnQsIEFycmF5LCBTdHJpbmcsIEZ1bmN0aW9uLCBPYmplY3QsIE51bWJlciwgU2xpY2suUGFyc2VyLCBTbGljay5GaW5kZXJdCgpwcm92aWRlczogW0VsZW1lbnQsIEVsZW1lbnRzLCAkLCAkJCwgSWZyYW1lLCBTZWxlY3RvcnNdCgouLi4KKi8KCnZhciBFbGVtZW50ID0gZnVuY3Rpb24odGFnLCBwcm9wcyl7CiAgICAgICAgdmFyIGtvbnN0cnVjdG9yID0gRWxlbWVudC5Db25zdHJ1Y3RvcnNbdGFnXTsKICAgICAgICBpZiAoa29uc3RydWN0b3IpIHJldHVybiBrb25zdHJ1Y3Rvcihwcm9wcyk7CiAgICAgICAgaWYgKHR5cGVvZiB0YWcgIT0gJ3N0cmluZycpIHJldHVybiBkb2N1bWVudC5pZCh0YWcpLnNldChwcm9wcyk7CgogICAgICAgIGlmICghcHJvcHMpIHByb3BzID0ge307CgogICAgICAgIGlmICghKC9eW1x3LV0rJC8pLnRlc3QodGFnKSl7CiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gU2xpY2sucGFyc2UodGFnKS5leHByZXNzaW9uc1swXVswXTsKICAgICAgICAgICAgICAgIHRhZyA9IChwYXJzZWQudGFnID09ICcqJykgPyAnZGl2JyA6IHBhcnNlZC50YWc7CiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLmlkICYmIHByb3BzLmlkID09IG51bGwpIHByb3BzLmlkID0gcGFyc2VkLmlkOwoKICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gcGFyc2VkLmF0dHJpYnV0ZXM7CiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlcykgZm9yICh2YXIgYXR0ciwgaSA9IDAsIGwgPSBhdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSBhdHRyaWJ1dGVzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHNbYXR0ci5rZXldICE9IG51bGwpIGNvbnRpbnVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHIudmFsdWUgIT0gbnVsbCAmJiBhdHRyLm9wZXJhdG9yID09ICc9JykgcHJvcHNbYXR0ci5rZXldID0gYXR0ci52YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWF0dHIudmFsdWUgJiYgIWF0dHIub3BlcmF0b3IpIHByb3BzW2F0dHIua2V5XSA9IHRydWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHBhcnNlZC5jbGFzc0xpc3QgJiYgcHJvcHNbJ2NsYXNzJ10gPT0gbnVsbCkgcHJvcHNbJ2NsYXNzJ10gPSBwYXJzZWQuY2xhc3NMaXN0LmpvaW4oJyAnKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBkb2N1bWVudC5uZXdFbGVtZW50KHRhZywgcHJvcHMpOwp9OwoKCmlmIChCcm93c2VyLkVsZW1lbnQpewogICAgICAgIEVsZW1lbnQucHJvdG90eXBlID0gQnJvd3Nlci5FbGVtZW50LnByb3RvdHlwZTsKICAgICAgICAvLyBJRTggYW5kIElFOSByZXF1aXJlIHRoZSB3cmFwcGluZy4KICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5fZmlyZUV2ZW50ID0gKGZ1bmN0aW9uKGZpcmVFdmVudCl7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odHlwZSwgZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlyZUV2ZW50LmNhbGwodGhpcywgdHlwZSwgZXZlbnQpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICB9KShFbGVtZW50LnByb3RvdHlwZS5maXJlRXZlbnQpOwp9CgpuZXcgVHlwZSgnRWxlbWVudCcsIEVsZW1lbnQpLm1pcnJvcihmdW5jdGlvbihuYW1lKXsKICAgICAgICBpZiAoQXJyYXkucHJvdG90eXBlW25hbWVdKSByZXR1cm47CgogICAgICAgIHZhciBvYmogPSB7fTsKICAgICAgICBvYmpbbmFtZV0gPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBbXSwgYXJncyA9IGFyZ3VtZW50cywgZWxlbWVudHMgPSB0cnVlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpc1tpXSwgcmVzdWx0ID0gcmVzdWx0c1tpXSA9IGVsZW1lbnRbbmFtZV0uYXBwbHkoZWxlbWVudCwgYXJncyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzID0gKGVsZW1lbnRzICYmIHR5cGVPZihyZXN1bHQpID09ICdlbGVtZW50Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gKGVsZW1lbnRzKSA/IG5ldyBFbGVtZW50cyhyZXN1bHRzKSA6IHJlc3VsdHM7CiAgICAgICAgfTsKCiAgICAgICAgRWxlbWVudHMuaW1wbGVtZW50KG9iaik7Cn0pOwoKaWYgKCFCcm93c2VyLkVsZW1lbnQpewogICAgICAgIEVsZW1lbnQucGFyZW50ID0gT2JqZWN0OwoKICAgICAgICBFbGVtZW50LlByb3RvdHlwZSA9IHsnJGZhbWlseSc6IEZ1bmN0aW9uLmZyb20oJ2VsZW1lbnQnKS5oaWRlKCl9OwoKICAgICAgICBFbGVtZW50Lm1pcnJvcihmdW5jdGlvbihuYW1lLCBtZXRob2QpewogICAgICAgICAgICAgICAgRWxlbWVudC5Qcm90b3R5cGVbbmFtZV0gPSBtZXRob2Q7CiAgICAgICAgfSk7Cn0KCkVsZW1lbnQuQ29uc3RydWN0b3JzID0ge307CgoKCnZhciBJRnJhbWUgPSBuZXcgVHlwZSgnSUZyYW1lJywgZnVuY3Rpb24oKXsKICAgICAgICB2YXIgcGFyYW1zID0gQXJyYXkubGluayhhcmd1bWVudHMsIHsKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFR5cGUuaXNPYmplY3QsCiAgICAgICAgICAgICAgICBpZnJhbWU6IGZ1bmN0aW9uKG9iail7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAob2JqICE9IG51bGwpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB2YXIgcHJvcHMgPSBwYXJhbXMucHJvcGVydGllcyB8fCB7fSwgaWZyYW1lOwogICAgICAgIGlmIChwYXJhbXMuaWZyYW1lKSBpZnJhbWUgPSBkb2N1bWVudC5pZChwYXJhbXMuaWZyYW1lKTsKICAgICAgICB2YXIgb25sb2FkID0gcHJvcHMub25sb2FkIHx8IGZ1bmN0aW9uKCl7fTsKICAgICAgICBkZWxldGUgcHJvcHMub25sb2FkOwogICAgICAgIHByb3BzLmlkID0gcHJvcHMubmFtZSA9IFtwcm9wcy5pZCwgcHJvcHMubmFtZSwgaWZyYW1lID8gKGlmcmFtZS5pZCB8fCBpZnJhbWUubmFtZSkgOiAnSUZyYW1lXycgKyBTdHJpbmcudW5pcXVlSUQoKV0ucGljaygpOwogICAgICAgIGlmcmFtZSA9IG5ldyBFbGVtZW50KGlmcmFtZSB8fCAnaWZyYW1lJywgcHJvcHMpOwoKICAgICAgICB2YXIgb25Mb2FkID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIG9ubG9hZC5jYWxsKGlmcmFtZS5jb250ZW50V2luZG93KTsKICAgICAgICB9OwoKICAgICAgICBpZiAod2luZG93LmZyYW1lc1twcm9wcy5pZF0pIG9uTG9hZCgpOwogICAgICAgIGVsc2UgaWZyYW1lLmFkZExpc3RlbmVyKCdsb2FkJywgb25Mb2FkKTsKICAgICAgICByZXR1cm4gaWZyYW1lOwp9KTsKCnZhciBFbGVtZW50cyA9IHRoaXMuRWxlbWVudHMgPSBmdW5jdGlvbihub2Rlcyl7CiAgICAgICAgaWYgKG5vZGVzICYmIG5vZGVzLmxlbmd0aCl7CiAgICAgICAgICAgICAgICB2YXIgdW5pcXVlcyA9IHt9LCBub2RlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IG5vZGUgPSBub2Rlc1tpKytdOyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1aWQgPSBTbGljay51aWRPZihub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1bmlxdWVzW3VpZF0pewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZXNbdWlkXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoKG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQp9OwoKRWxlbWVudHMucHJvdG90eXBlID0ge2xlbmd0aDogMH07CkVsZW1lbnRzLnBhcmVudCA9IEFycmF5OwoKbmV3IFR5cGUoJ0VsZW1lbnRzJywgRWxlbWVudHMpLmltcGxlbWVudCh7CgogICAgICAgIGZpbHRlcjogZnVuY3Rpb24oZmlsdGVyLCBiaW5kKXsKICAgICAgICAgICAgICAgIGlmICghZmlsdGVyKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRWxlbWVudHMoQXJyYXkuZmlsdGVyKHRoaXMsICh0eXBlT2YoZmlsdGVyKSA9PSAnc3RyaW5nJykgPyBmdW5jdGlvbihpdGVtKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubWF0Y2goZmlsdGVyKTsKICAgICAgICAgICAgICAgIH0gOiBmaWx0ZXIsIGJpbmQpKTsKICAgICAgICB9LnByb3RlY3QoKSwKCiAgICAgICAgcHVzaDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gZG9jdW1lbnQuaWQoYXJndW1lbnRzW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHRoaXNbbGVuZ3RoKytdID0gaXRlbTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5sZW5ndGggPSBsZW5ndGgpOwogICAgICAgIH0ucHJvdGVjdCgpLAoKICAgICAgICB1bnNoaWZ0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGRvY3VtZW50LmlkKGFyZ3VtZW50c1tpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtKSBpdGVtcy5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KHRoaXMsIGl0ZW1zKTsKICAgICAgICB9LnByb3RlY3QoKSwKCiAgICAgICAgY29uY2F0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIG5ld0VsZW1lbnRzID0gbmV3IEVsZW1lbnRzKHRoaXMpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBhcmd1bWVudHNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUeXBlLmlzRW51bWVyYWJsZShpdGVtKSkgbmV3RWxlbWVudHMuYXBwZW5kKGl0ZW0pOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIG5ld0VsZW1lbnRzLnB1c2goaXRlbSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3RWxlbWVudHM7CiAgICAgICAgfS5wcm90ZWN0KCksCgogICAgICAgIGFwcGVuZDogZnVuY3Rpb24oY29sbGVjdGlvbil7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNvbGxlY3Rpb24ubGVuZ3RoOyBpIDwgbDsgaSsrKSB0aGlzLnB1c2goY29sbGVjdGlvbltpXSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LnByb3RlY3QoKSwKCiAgICAgICAgZW1wdHk6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5sZW5ndGgpIGRlbGV0ZSB0aGlzWy0tdGhpcy5sZW5ndGhdOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfS5wcm90ZWN0KCkKCn0pOwoKCgooZnVuY3Rpb24oKXsKCi8vIEZGLCBJRQp2YXIgc3BsaWNlID0gQXJyYXkucHJvdG90eXBlLnNwbGljZSwgb2JqZWN0ID0geycwJzogMCwgJzEnOiAxLCBsZW5ndGg6IDJ9OwoKc3BsaWNlLmNhbGwob2JqZWN0LCAxLCAxKTsKaWYgKG9iamVjdFsxXSA9PSAxKSBFbGVtZW50cy5pbXBsZW1lbnQoJ3NwbGljZScsIGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoOwogICAgICAgIHZhciByZXN1bHQgPSBzcGxpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB3aGlsZSAobGVuZ3RoID49IHRoaXMubGVuZ3RoKSBkZWxldGUgdGhpc1tsZW5ndGgtLV07CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKfS5wcm90ZWN0KCkpOwoKRWxlbWVudHMuaW1wbGVtZW50KEFycmF5LnByb3RvdHlwZSk7CgpBcnJheS5taXJyb3IoRWxlbWVudHMpOwoKLyo8bHRJRTg+Ki8KdmFyIGNyZWF0ZUVsZW1lbnRBY2NlcHRzSFRNTDsKdHJ5IHsKICAgICAgICB2YXIgeCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJzxpbnB1dCBuYW1lPXg+Jyk7CiAgICAgICAgY3JlYXRlRWxlbWVudEFjY2VwdHNIVE1MID0gKHgubmFtZSA9PSAneCcpOwp9IGNhdGNoKGUpe30KCnZhciBlc2NhcGVRdW90ZXMgPSBmdW5jdGlvbihodG1sKXsKICAgICAgICByZXR1cm4gKCcnICsgaHRtbCkucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC8iL2csICcmcXVvdDsnKTsKfTsKLyo8L2x0SUU4PiovCgpEb2N1bWVudC5pbXBsZW1lbnQoewoKICAgICAgICBuZXdFbGVtZW50OiBmdW5jdGlvbih0YWcsIHByb3BzKXsKICAgICAgICAgICAgICAgIGlmIChwcm9wcyAmJiBwcm9wcy5jaGVja2VkICE9IG51bGwpIHByb3BzLmRlZmF1bHRDaGVja2VkID0gcHJvcHMuY2hlY2tlZDsKICAgICAgICAgICAgICAgIC8qPGx0SUU4PiovLy8gRml4IGZvciByZWFkb25seSBuYW1lIGFuZCB0eXBlIHByb3BlcnRpZXMgaW4gSUUgPCA4CiAgICAgICAgICAgICAgICBpZiAoY3JlYXRlRWxlbWVudEFjY2VwdHNIVE1MICYmIHByb3BzKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGFnID0gJzwnICsgdGFnOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMubmFtZSkgdGFnICs9ICcgbmFtZT0iJyArIGVzY2FwZVF1b3Rlcyhwcm9wcy5uYW1lKSArICciJzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLnR5cGUpIHRhZyArPSAnIHR5cGU9IicgKyBlc2NhcGVRdW90ZXMocHJvcHMudHlwZSkgKyAnIic7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhZyArPSAnPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwcm9wcy5uYW1lOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcHJvcHMudHlwZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qPC9sdElFOD4qLwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaWQodGhpcy5jcmVhdGVFbGVtZW50KHRhZykpLnNldChwcm9wcyk7CiAgICAgICAgfQoKfSk7Cgp9KSgpOwoKKGZ1bmN0aW9uKCl7CgpTbGljay51aWRPZih3aW5kb3cpOwpTbGljay51aWRPZihkb2N1bWVudCk7CgpEb2N1bWVudC5pbXBsZW1lbnQoewoKICAgICAgICBuZXdUZXh0Tm9kZTogZnVuY3Rpb24odGV4dCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTsKICAgICAgICB9LAoKICAgICAgICBnZXREb2N1bWVudDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGdldFdpbmRvdzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndpbmRvdzsKICAgICAgICB9LAoKICAgICAgICBpZDogKGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgdmFyIHR5cGVzID0gewoKICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nOiBmdW5jdGlvbihpZCwgbm9jYXNoLCBkb2MpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gU2xpY2suZmluZChkb2MsICcjJyArIGlkLnJlcGxhY2UoLyhcVykvZywgJ1xcJDEnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpZCkgPyB0eXBlcy5lbGVtZW50KGlkLCBub2Nhc2gpIDogbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGZ1bmN0aW9uKGVsLCBub2Nhc2gpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNsaWNrLnVpZE9mKGVsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vY2FzaCAmJiAhZWwuJGZhbWlseSAmJiAhKC9eKD86b2JqZWN0fGVtYmVkKSQvaSkudGVzdChlbC50YWdOYW1lKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5fZmlyZUV2ZW50ID0gZWwuZmlyZUV2ZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFwcGVuZChlbCwgRWxlbWVudC5Qcm90b3R5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IGZ1bmN0aW9uKG9iaiwgbm9jYXNoLCBkb2MpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmoudG9FbGVtZW50KSByZXR1cm4gdHlwZXMuZWxlbWVudChvYmoudG9FbGVtZW50KGRvYyksIG5vY2FzaCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHR5cGVzLnRleHRub2RlID0gdHlwZXMud2hpdGVzcGFjZSA9IHR5cGVzLndpbmRvdyA9IHR5cGVzLmRvY3VtZW50ID0gZnVuY3Rpb24oemVybyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWwsIG5vY2FzaCwgZG9jKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsICYmIGVsLiRmYW1pbHkgJiYgZWwudW5pcXVlTnVtYmVyKSByZXR1cm4gZWw7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZU9mKGVsKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlc1t0eXBlXSkgPyB0eXBlc1t0eXBlXShlbCwgbm9jYXNoLCBkb2MgfHwgZG9jdW1lbnQpIDogbnVsbDsKICAgICAgICAgICAgICAgIH07CgogICAgICAgIH0pKCkKCn0pOwoKaWYgKHdpbmRvdy4kID09IG51bGwpIFdpbmRvdy5pbXBsZW1lbnQoJyQnLCBmdW5jdGlvbihlbCwgbmMpewogICAgICAgIHJldHVybiBkb2N1bWVudC5pZChlbCwgbmMsIHRoaXMuZG9jdW1lbnQpOwp9KTsKCldpbmRvdy5pbXBsZW1lbnQoewoKICAgICAgICBnZXREb2N1bWVudDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50OwogICAgICAgIH0sCgogICAgICAgIGdldFdpbmRvdzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKW0RvY3VtZW50LCBFbGVtZW50XS5pbnZva2UoJ2ltcGxlbWVudCcsIHsKCiAgICAgICAgZ2V0RWxlbWVudHM6IGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgICAgICAgICAgcmV0dXJuIFNsaWNrLnNlYXJjaCh0aGlzLCBleHByZXNzaW9uLCBuZXcgRWxlbWVudHMpOwogICAgICAgIH0sCgogICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmlkKFNsaWNrLmZpbmQodGhpcywgZXhwcmVzc2lvbikpOwogICAgICAgIH0KCn0pOwoKdmFyIGNvbnRhaW5zID0ge2NvbnRhaW5zOiBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICByZXR1cm4gU2xpY2suY29udGFpbnModGhpcywgZWxlbWVudCk7Cn19OwoKaWYgKCFkb2N1bWVudC5jb250YWlucykgRG9jdW1lbnQuaW1wbGVtZW50KGNvbnRhaW5zKTsKaWYgKCFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5jb250YWlucykgRWxlbWVudC5pbXBsZW1lbnQoY29udGFpbnMpOwoKCgovLyB0cmVlIHdhbGtpbmcKCnZhciBpbmplY3RDb21iaW5hdG9yID0gZnVuY3Rpb24oZXhwcmVzc2lvbiwgY29tYmluYXRvcil7CiAgICAgICAgaWYgKCFleHByZXNzaW9uKSByZXR1cm4gY29tYmluYXRvcjsKCiAgICAgICAgZXhwcmVzc2lvbiA9IE9iamVjdC5jbG9uZShTbGljay5wYXJzZShleHByZXNzaW9uKSk7CgogICAgICAgIHZhciBleHByZXNzaW9ucyA9IGV4cHJlc3Npb24uZXhwcmVzc2lvbnM7CiAgICAgICAgZm9yICh2YXIgaSA9IGV4cHJlc3Npb25zLmxlbmd0aDsgaS0tOykKICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zW2ldWzBdLmNvbWJpbmF0b3IgPSBjb21iaW5hdG9yOwoKICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjsKfTsKCk9iamVjdC5mb3JFYWNoKHsKICAgICAgICBnZXROZXh0OiAnficsCiAgICAgICAgZ2V0UHJldmlvdXM6ICchficsCiAgICAgICAgZ2V0UGFyZW50OiAnIScKfSwgZnVuY3Rpb24oY29tYmluYXRvciwgbWV0aG9kKXsKICAgICAgICBFbGVtZW50LmltcGxlbWVudChtZXRob2QsIGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudChpbmplY3RDb21iaW5hdG9yKGV4cHJlc3Npb24sIGNvbWJpbmF0b3IpKTsKICAgICAgICB9KTsKfSk7CgpPYmplY3QuZm9yRWFjaCh7CiAgICAgICAgZ2V0QWxsTmV4dDogJ34nLAogICAgICAgIGdldEFsbFByZXZpb3VzOiAnIX4nLAogICAgICAgIGdldFNpYmxpbmdzOiAnfn4nLAogICAgICAgIGdldENoaWxkcmVuOiAnPicsCiAgICAgICAgZ2V0UGFyZW50czogJyEnCn0sIGZ1bmN0aW9uKGNvbWJpbmF0b3IsIG1ldGhvZCl7CiAgICAgICAgRWxlbWVudC5pbXBsZW1lbnQobWV0aG9kLCBmdW5jdGlvbihleHByZXNzaW9uKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnRzKGluamVjdENvbWJpbmF0b3IoZXhwcmVzc2lvbiwgY29tYmluYXRvcikpOwogICAgICAgIH0pOwp9KTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCiAgICAgICAgZ2V0Rmlyc3Q6IGZ1bmN0aW9uKGV4cHJlc3Npb24pewogICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmlkKFNsaWNrLnNlYXJjaCh0aGlzLCBpbmplY3RDb21iaW5hdG9yKGV4cHJlc3Npb24sICc+JykpWzBdKTsKICAgICAgICB9LAoKICAgICAgICBnZXRMYXN0OiBmdW5jdGlvbihleHByZXNzaW9uKXsKICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5pZChTbGljay5zZWFyY2godGhpcywgaW5qZWN0Q29tYmluYXRvcihleHByZXNzaW9uLCAnPicpKS5nZXRMYXN0KCkpOwogICAgICAgIH0sCgogICAgICAgIGdldFdpbmRvdzogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQud2luZG93OwogICAgICAgIH0sCgogICAgICAgIGdldERvY3VtZW50OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudDsKICAgICAgICB9LAoKICAgICAgICBnZXRFbGVtZW50QnlJZDogZnVuY3Rpb24oaWQpewogICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmlkKFNsaWNrLmZpbmQodGhpcywgJyMnICsgKCcnICsgaWQpLnJlcGxhY2UoLyhcVykvZywgJ1xcJDEnKSkpOwogICAgICAgIH0sCgogICAgICAgIG1hdGNoOiBmdW5jdGlvbihleHByZXNzaW9uKXsKICAgICAgICAgICAgICAgIHJldHVybiAhZXhwcmVzc2lvbiB8fCBTbGljay5tYXRjaCh0aGlzLCBleHByZXNzaW9uKTsKICAgICAgICB9Cgp9KTsKCgoKaWYgKHdpbmRvdy4kJCA9PSBudWxsKSBXaW5kb3cuaW1wbGVtZW50KCckJCcsIGZ1bmN0aW9uKHNlbGVjdG9yKXsKICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKXsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT0gJ3N0cmluZycpIHJldHVybiBTbGljay5zZWFyY2godGhpcy5kb2N1bWVudCwgc2VsZWN0b3IsIG5ldyBFbGVtZW50cyk7CiAgICAgICAgICAgICAgICBlbHNlIGlmIChUeXBlLmlzRW51bWVyYWJsZShzZWxlY3RvcikpIHJldHVybiBuZXcgRWxlbWVudHMoc2VsZWN0b3IpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IEVsZW1lbnRzKGFyZ3VtZW50cyk7Cn0pOwoKLy8gSW5zZXJ0ZXJzCgp2YXIgaW5zZXJ0ZXJzID0gewoKICAgICAgICBiZWZvcmU6IGZ1bmN0aW9uKGNvbnRleHQsIGVsZW1lbnQpewogICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIGlmIChwYXJlbnQpIHBhcmVudC5pbnNlcnRCZWZvcmUoY29udGV4dCwgZWxlbWVudCk7CiAgICAgICAgfSwKCiAgICAgICAgYWZ0ZXI6IGZ1bmN0aW9uKGNvbnRleHQsIGVsZW1lbnQpewogICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIGlmIChwYXJlbnQpIHBhcmVudC5pbnNlcnRCZWZvcmUoY29udGV4dCwgZWxlbWVudC5uZXh0U2libGluZyk7CiAgICAgICAgfSwKCiAgICAgICAgYm90dG9tOiBmdW5jdGlvbihjb250ZXh0LCBlbGVtZW50KXsKICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGV4dCk7CiAgICAgICAgfSwKCiAgICAgICAgdG9wOiBmdW5jdGlvbihjb250ZXh0LCBlbGVtZW50KXsKICAgICAgICAgICAgICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNvbnRleHQsIGVsZW1lbnQuZmlyc3RDaGlsZCk7CiAgICAgICAgfQoKfTsKCmluc2VydGVycy5pbnNpZGUgPSBpbnNlcnRlcnMuYm90dG9tOwoKCgovLyBnZXRQcm9wZXJ0eSAvIHNldFByb3BlcnR5Cgp2YXIgcHJvcGVydHlHZXR0ZXJzID0ge30sIHByb3BlcnR5U2V0dGVycyA9IHt9OwoKLy8gcHJvcGVydGllcwoKdmFyIHByb3BlcnRpZXMgPSB7fTsKQXJyYXkuZm9yRWFjaChbCiAgICAgICAgJ3R5cGUnLCAndmFsdWUnLCAnZGVmYXVsdFZhbHVlJywgJ2FjY2Vzc0tleScsICdjZWxsUGFkZGluZycsICdjZWxsU3BhY2luZycsICdjb2xTcGFuJywKICAgICAgICAnZnJhbWVCb3JkZXInLCAncm93U3BhbicsICd0YWJJbmRleCcsICd1c2VNYXAnCl0sIGZ1bmN0aW9uKHByb3BlcnR5KXsKICAgICAgICBwcm9wZXJ0aWVzW3Byb3BlcnR5LnRvTG93ZXJDYXNlKCldID0gcHJvcGVydHk7Cn0pOwoKT2JqZWN0LmFwcGVuZChwcm9wZXJ0aWVzLCB7CiAgICAgICAgJ2h0bWwnOiAnaW5uZXJIVE1MJywKICAgICAgICAndGV4dCc6IChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgIHJldHVybiAodGVtcC50ZXh0Q29udGVudCA9PSBudWxsKSA/ICdpbm5lclRleHQnOiAndGV4dENvbnRlbnQnOwogICAgICAgIH0pKCkKfSk7CgpPYmplY3QuZm9yRWFjaChwcm9wZXJ0aWVzLCBmdW5jdGlvbihyZWFsLCBrZXkpewogICAgICAgIHByb3BlcnR5U2V0dGVyc1trZXldID0gZnVuY3Rpb24obm9kZSwgdmFsdWUpewogICAgICAgICAgICAgICAgbm9kZVtyZWFsXSA9IHZhbHVlOwogICAgICAgIH07CiAgICAgICAgcHJvcGVydHlHZXR0ZXJzW2tleV0gPSBmdW5jdGlvbihub2RlKXsKICAgICAgICAgICAgICAgIHJldHVybiBub2RlW3JlYWxdOwogICAgICAgIH07Cn0pOwoKLy8gQm9vbGVhbnMKCnZhciBib29scyA9IFsKICAgICAgICAnY29tcGFjdCcsICdub3dyYXAnLCAnaXNtYXAnLCAnZGVjbGFyZScsICdub3NoYWRlJywgJ2NoZWNrZWQnLAogICAgICAgICdkaXNhYmxlZCcsICdyZWFkT25seScsICdtdWx0aXBsZScsICdzZWxlY3RlZCcsICdub3Jlc2l6ZScsCiAgICAgICAgJ2RlZmVyJywgJ2RlZmF1bHRDaGVja2VkJywgJ2F1dG9mb2N1cycsICdjb250cm9scycsICdhdXRvcGxheScsCiAgICAgICAgJ2xvb3AnCl07Cgp2YXIgYm9vbGVhbnMgPSB7fTsKQXJyYXkuZm9yRWFjaChib29scywgZnVuY3Rpb24oYm9vbCl7CiAgICAgICAgdmFyIGxvd2VyID0gYm9vbC50b0xvd2VyQ2FzZSgpOwogICAgICAgIGJvb2xlYW5zW2xvd2VyXSA9IGJvb2w7CiAgICAgICAgcHJvcGVydHlTZXR0ZXJzW2xvd2VyXSA9IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKXsKICAgICAgICAgICAgICAgIG5vZGVbYm9vbF0gPSAhIXZhbHVlOwogICAgICAgIH07CiAgICAgICAgcHJvcGVydHlHZXR0ZXJzW2xvd2VyXSA9IGZ1bmN0aW9uKG5vZGUpewogICAgICAgICAgICAgICAgcmV0dXJuICEhbm9kZVtib29sXTsKICAgICAgICB9Owp9KTsKCi8vIFNwZWNpYWwgY2FzZXMKCk9iamVjdC5hcHBlbmQocHJvcGVydHlTZXR0ZXJzLCB7CgogICAgICAgICdjbGFzcyc6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKXsKICAgICAgICAgICAgICAgICgnY2xhc3NOYW1lJyBpbiBub2RlKSA/IG5vZGUuY2xhc3NOYW1lID0gKHZhbHVlIHx8ICcnKSA6IG5vZGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIHZhbHVlKTsKICAgICAgICB9LAoKICAgICAgICAnZm9yJzogZnVuY3Rpb24obm9kZSwgdmFsdWUpewogICAgICAgICAgICAgICAgKCdodG1sRm9yJyBpbiBub2RlKSA/IG5vZGUuaHRtbEZvciA9IHZhbHVlIDogbm9kZS5zZXRBdHRyaWJ1dGUoJ2ZvcicsIHZhbHVlKTsKICAgICAgICB9LAoKICAgICAgICAnc3R5bGUnOiBmdW5jdGlvbihub2RlLCB2YWx1ZSl7CiAgICAgICAgICAgICAgICAobm9kZS5zdHlsZSkgPyBub2RlLnN0eWxlLmNzc1RleHQgPSB2YWx1ZSA6IG5vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsIHZhbHVlKTsKICAgICAgICB9LAoKICAgICAgICAndmFsdWUnOiBmdW5jdGlvbihub2RlLCB2YWx1ZSl7CiAgICAgICAgICAgICAgICBub2RlLnZhbHVlID0gdmFsdWUgfHwgJyc7CiAgICAgICAgfQoKfSk7Cgpwcm9wZXJ0eUdldHRlcnNbJ2NsYXNzJ10gPSBmdW5jdGlvbihub2RlKXsKICAgICAgICByZXR1cm4gKCdjbGFzc05hbWUnIGluIG5vZGUpID8gbm9kZS5jbGFzc05hbWUgfHwgbnVsbCA6IG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpOwp9OwoKLyogPHdlYmtpdD4gKi8KdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7Ci8vIElFIHNldHMgdHlwZSBhcyByZWFkb25seSBhbmQgdGhyb3dzCnRyeSB7IGVsLnR5cGUgPSAnYnV0dG9uJzsgfSBjYXRjaChlKXt9CmlmIChlbC50eXBlICE9ICdidXR0b24nKSBwcm9wZXJ0eVNldHRlcnMudHlwZSA9IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKXsKICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgndHlwZScsIHZhbHVlKTsKfTsKLyogPC93ZWJraXQ+ICovCgovKiBnZXRQcm9wZXJ0eSwgc2V0UHJvcGVydHkgKi8KCkVsZW1lbnQuaW1wbGVtZW50KHsKCiAgICAgICAgc2V0UHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXsKICAgICAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eVNldHRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXTsKICAgICAgICAgICAgICAgIGlmIChzZXR0ZXIpewogICAgICAgICAgICAgICAgICAgICAgICBzZXR0ZXIodGhpcywgdmFsdWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHNldFByb3BlcnRpZXM6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMpewogICAgICAgICAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlIGluIGF0dHJpYnV0ZXMpIHRoaXMuc2V0UHJvcGVydHkoYXR0cmlidXRlLCBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUpewogICAgICAgICAgICAgICAgdmFyIGdldHRlciA9IHByb3BlcnR5R2V0dGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldOwogICAgICAgICAgICAgICAgaWYgKGdldHRlcikgcmV0dXJuIGdldHRlcih0aGlzKTsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBTbGljay5nZXRBdHRyaWJ1dGUodGhpcywgbmFtZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gKCFyZXN1bHQgJiYgIVNsaWNrLmhhc0F0dHJpYnV0ZSh0aGlzLCBuYW1lKSkgPyBudWxsIDogcmVzdWx0OwogICAgICAgIH0sCgogICAgICAgIGdldFByb3BlcnRpZXM6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIHJldHVybiBhcmdzLm1hcCh0aGlzLmdldFByb3BlcnR5LCB0aGlzKS5hc3NvY2lhdGUoYXJncyk7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlUHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0UHJvcGVydHkobmFtZSwgbnVsbCk7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlUHJvcGVydGllczogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIEFycmF5LmVhY2goYXJndW1lbnRzLCB0aGlzLnJlbW92ZVByb3BlcnR5LCB0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHNldDogZnVuY3Rpb24ocHJvcCwgdmFsdWUpewogICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gRWxlbWVudC5Qcm9wZXJ0aWVzW3Byb3BdOwogICAgICAgICAgICAgICAgKHByb3BlcnR5ICYmIHByb3BlcnR5LnNldCkgPyBwcm9wZXJ0eS5zZXQuY2FsbCh0aGlzLCB2YWx1ZSkgOiB0aGlzLnNldFByb3BlcnR5KHByb3AsIHZhbHVlKTsKICAgICAgICB9Lm92ZXJsb2FkU2V0dGVyKCksCgogICAgICAgIGdldDogZnVuY3Rpb24ocHJvcCl7CiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBFbGVtZW50LlByb3BlcnRpZXNbcHJvcF07CiAgICAgICAgICAgICAgICByZXR1cm4gKHByb3BlcnR5ICYmIHByb3BlcnR5LmdldCkgPyBwcm9wZXJ0eS5nZXQuYXBwbHkodGhpcykgOiB0aGlzLmdldFByb3BlcnR5KHByb3ApOwogICAgICAgIH0ub3ZlcmxvYWRHZXR0ZXIoKSwKCiAgICAgICAgZXJhc2U6IGZ1bmN0aW9uKHByb3ApewogICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gRWxlbWVudC5Qcm9wZXJ0aWVzW3Byb3BdOwogICAgICAgICAgICAgICAgKHByb3BlcnR5ICYmIHByb3BlcnR5LmVyYXNlKSA/IHByb3BlcnR5LmVyYXNlLmFwcGx5KHRoaXMpIDogdGhpcy5yZW1vdmVQcm9wZXJ0eShwcm9wKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbihjbGFzc05hbWUpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3NOYW1lLmNsZWFuKCkuY29udGFpbnMoY2xhc3NOYW1lLCAnICcpOwogICAgICAgIH0sCgogICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbihjbGFzc05hbWUpewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0NsYXNzKGNsYXNzTmFtZSkpIHRoaXMuY2xhc3NOYW1lID0gKHRoaXMuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lKS5jbGVhbigpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSl7CiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxzKScgKyBjbGFzc05hbWUgKyAnKD86XFxzfCQpJyksICckMScpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSwgZm9yY2UpewogICAgICAgICAgICAgICAgaWYgKGZvcmNlID09IG51bGwpIGZvcmNlID0gIXRoaXMuaGFzQ2xhc3MoY2xhc3NOYW1lKTsKICAgICAgICAgICAgICAgIHJldHVybiAoZm9yY2UpID8gdGhpcy5hZGRDbGFzcyhjbGFzc05hbWUpIDogdGhpcy5yZW1vdmVDbGFzcyhjbGFzc05hbWUpOwogICAgICAgIH0sCgogICAgICAgIGFkb3B0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMsIGZyYWdtZW50LCBlbGVtZW50cyA9IEFycmF5LmZsYXR0ZW4oYXJndW1lbnRzKSwgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA+IDEpIHBhcmVudCA9IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmlkKGVsZW1lbnRzW2ldLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtZW50KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoZnJhZ21lbnQpIHRoaXMuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpOwoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGFwcGVuZFRleHQ6IGZ1bmN0aW9uKHRleHQsIHdoZXJlKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyYWIodGhpcy5nZXREb2N1bWVudCgpLm5ld1RleHROb2RlKHRleHQpLCB3aGVyZSk7CiAgICAgICAgfSwKCiAgICAgICAgZ3JhYjogZnVuY3Rpb24oZWwsIHdoZXJlKXsKICAgICAgICAgICAgICAgIGluc2VydGVyc1t3aGVyZSB8fCAnYm90dG9tJ10oZG9jdW1lbnQuaWQoZWwsIHRydWUpLCB0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGluamVjdDogZnVuY3Rpb24oZWwsIHdoZXJlKXsKICAgICAgICAgICAgICAgIGluc2VydGVyc1t3aGVyZSB8fCAnYm90dG9tJ10odGhpcywgZG9jdW1lbnQuaWQoZWwsIHRydWUpKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlcGxhY2VzOiBmdW5jdGlvbihlbCl7CiAgICAgICAgICAgICAgICBlbCA9IGRvY3VtZW50LmlkKGVsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHRoaXMsIGVsKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHdyYXBzOiBmdW5jdGlvbihlbCwgd2hlcmUpewogICAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5pZChlbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlcyhlbCkuZ3JhYihlbCwgd2hlcmUpOwogICAgICAgIH0sCgogICAgICAgIGdldFNlbGVjdGVkOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4OyAvLyBTYWZhcmkgMy4yLjEKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRWxlbWVudHMoQXJyYXkuZnJvbSh0aGlzLm9wdGlvbnMpLmZpbHRlcihmdW5jdGlvbihvcHRpb24pewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uLnNlbGVjdGVkOwogICAgICAgICAgICAgICAgfSkpOwogICAgICAgIH0sCgogICAgICAgIHRvUXVlcnlTdHJpbmc6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgcXVlcnlTdHJpbmcgPSBbXTsKICAgICAgICAgICAgICAgIHRoaXMuZ2V0RWxlbWVudHMoJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhJykuZWFjaChmdW5jdGlvbihlbCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZWwudHlwZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlbC5uYW1lIHx8IGVsLmRpc2FibGVkIHx8IHR5cGUgPT0gJ3N1Ym1pdCcgfHwgdHlwZSA9PSAncmVzZXQnIHx8IHR5cGUgPT0gJ2ZpbGUnIHx8IHR5cGUgPT0gJ2ltYWdlJykgcmV0dXJuOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gKGVsLmdldCgndGFnJykgPT0gJ3NlbGVjdCcpID8gZWwuZ2V0U2VsZWN0ZWQoKS5tYXAoZnVuY3Rpb24ob3B0KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJRQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5pZChvcHQpLmdldCgndmFsdWUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiAoKHR5cGUgPT0gJ3JhZGlvJyB8fCB0eXBlID09ICdjaGVja2JveCcpICYmICFlbC5jaGVja2VkKSA/IG51bGwgOiBlbC5nZXQoJ3ZhbHVlJyk7CgogICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKHZhbHVlKS5lYWNoKGZ1bmN0aW9uKHZhbCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgIT0gJ3VuZGVmaW5lZCcpIHF1ZXJ5U3RyaW5nLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGVsLm5hbWUpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5U3RyaW5nLmpvaW4oJyYnKTsKICAgICAgICB9Cgp9KTsKCnZhciBjb2xsZWN0ZWQgPSB7fSwgc3RvcmFnZSA9IHt9OwoKdmFyIGdldCA9IGZ1bmN0aW9uKHVpZCl7CiAgICAgICAgcmV0dXJuIChzdG9yYWdlW3VpZF0gfHwgKHN0b3JhZ2VbdWlkXSA9IHt9KSk7Cn07Cgp2YXIgY2xlYW4gPSBmdW5jdGlvbihpdGVtKXsKICAgICAgICB2YXIgdWlkID0gaXRlbS51aWQ7CiAgICAgICAgaWYgKGl0ZW0ucmVtb3ZlRXZlbnRzKSBpdGVtLnJlbW92ZUV2ZW50cygpOwogICAgICAgIGlmIChpdGVtLmNsZWFyQXR0cmlidXRlcykgaXRlbS5jbGVhckF0dHJpYnV0ZXMoKTsKICAgICAgICBpZiAodWlkICE9IG51bGwpewogICAgICAgICAgICAgICAgZGVsZXRlIGNvbGxlY3RlZFt1aWRdOwogICAgICAgICAgICAgICAgZGVsZXRlIHN0b3JhZ2VbdWlkXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGl0ZW07Cn07Cgp2YXIgZm9ybVByb3BzID0ge2lucHV0OiAnY2hlY2tlZCcsIG9wdGlvbjogJ3NlbGVjdGVkJywgdGV4dGFyZWE6ICd2YWx1ZSd9OwoKRWxlbWVudC5pbXBsZW1lbnQoewoKICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gY2xlYW4odGhpcykuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTsKICAgICAgICAgICAgICAgIEFycmF5LmVhY2goY2hpbGRyZW4sIGNsZWFuKTsKICAgICAgICAgICAgICAgIEVsZW1lbnQuZGlzcG9zZSh0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0sCgogICAgICAgIGVtcHR5OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmNoaWxkTm9kZXMpLmVhY2goRWxlbWVudC5kaXNwb3NlKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucGFyZW50Tm9kZSkgPyB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcykgOiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGNsb25lOiBmdW5jdGlvbihjb250ZW50cywga2VlcGlkKXsKICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gY29udGVudHMgIT09IGZhbHNlOwogICAgICAgICAgICAgICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUoY29udGVudHMpLCBjZSA9IFtjbG9uZV0sIHRlID0gW3RoaXNdLCBpOwoKICAgICAgICAgICAgICAgIGlmIChjb250ZW50cyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNlLmFwcGVuZChBcnJheS5mcm9tKGNsb25lLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJykpKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGUuYXBwZW5kKEFycmF5LmZyb20odGhpcy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpKSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZm9yIChpID0gY2UubGVuZ3RoOyBpLS07KXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBjZVtpXSwgZWxlbWVudCA9IHRlW2ldOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWtlZXBpZCkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qPGx0SUU5PiovCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmNsZWFyQXR0cmlidXRlcyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5jbGVhckF0dHJpYnV0ZXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLm1lcmdlQXR0cmlidXRlcyhlbGVtZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgndWlkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUub3B0aW9ucyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm8gPSBub2RlLm9wdGlvbnMsIGVvID0gZWxlbWVudC5vcHRpb25zOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IG5vLmxlbmd0aDsgai0tOykgbm9bal0uc2VsZWN0ZWQgPSBlb1tqXS5zZWxlY3RlZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLyo8L2x0SUU5PiovCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wID0gZm9ybVByb3BzW2VsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgJiYgZWxlbWVudFtwcm9wXSkgbm9kZVtwcm9wXSA9IGVsZW1lbnRbcHJvcF07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLyo8bHRJRTk+Ki8KICAgICAgICAgICAgICAgIGlmIChCcm93c2VyLmllKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvID0gY2xvbmUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ29iamVjdCcpLCB0byA9IHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ29iamVjdCcpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjby5sZW5ndGg7IGktLTspIGNvW2ldLm91dGVySFRNTCA9IHRvW2ldLm91dGVySFRNTDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8qPC9sdElFOT4qLwogICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmlkKGNsb25lKTsKICAgICAgICB9Cgp9KTsKCltFbGVtZW50LCBXaW5kb3csIERvY3VtZW50XS5pbnZva2UoJ2ltcGxlbWVudCcsIHsKCiAgICAgICAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uKHR5cGUsIGZuKXsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICd1bmxvYWQnKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZCA9IGZuLCBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgICAgICAgICAgZm4gPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VubG9hZCcsIGZuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZFtTbGljay51aWRPZih0aGlzKV0gPSB0aGlzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkRXZlbnRMaXN0ZW5lcikgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZuLCAhIWFyZ3VtZW50c1syXSk7CiAgICAgICAgICAgICAgICBlbHNlIHRoaXMuYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGZuKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZUxpc3RlbmVyOiBmdW5jdGlvbih0eXBlLCBmbil7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKSB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sICEhYXJndW1lbnRzWzJdKTsKICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5kZXRhY2hFdmVudCgnb24nICsgdHlwZSwgZm4pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgcmV0cmlldmU6IGZ1bmN0aW9uKHByb3BlcnR5LCBkZmx0KXsKICAgICAgICAgICAgICAgIHZhciBzdG9yYWdlID0gZ2V0KFNsaWNrLnVpZE9mKHRoaXMpKSwgcHJvcCA9IHN0b3JhZ2VbcHJvcGVydHldOwogICAgICAgICAgICAgICAgaWYgKGRmbHQgIT0gbnVsbCAmJiBwcm9wID09IG51bGwpIHByb3AgPSBzdG9yYWdlW3Byb3BlcnR5XSA9IGRmbHQ7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcCAhPSBudWxsID8gcHJvcCA6IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgc3RvcmU6IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSl7CiAgICAgICAgICAgICAgICB2YXIgc3RvcmFnZSA9IGdldChTbGljay51aWRPZih0aGlzKSk7CiAgICAgICAgICAgICAgICBzdG9yYWdlW3Byb3BlcnR5XSA9IHZhbHVlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZWxpbWluYXRlOiBmdW5jdGlvbihwcm9wZXJ0eSl7CiAgICAgICAgICAgICAgICB2YXIgc3RvcmFnZSA9IGdldChTbGljay51aWRPZih0aGlzKSk7CiAgICAgICAgICAgICAgICBkZWxldGUgc3RvcmFnZVtwcm9wZXJ0eV07CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCi8qPGx0SUU5PiovCmlmICh3aW5kb3cuYXR0YWNoRXZlbnQgJiYgIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB3aW5kb3cuYWRkTGlzdGVuZXIoJ3VubG9hZCcsIGZ1bmN0aW9uKCl7CiAgICAgICAgT2JqZWN0LmVhY2goY29sbGVjdGVkLCBjbGVhbik7CiAgICAgICAgaWYgKHdpbmRvdy5Db2xsZWN0R2FyYmFnZSkgQ29sbGVjdEdhcmJhZ2UoKTsKfSk7Ci8qPC9sdElFOT4qLwoKRWxlbWVudC5Qcm9wZXJ0aWVzID0ge307CgoKCkVsZW1lbnQuUHJvcGVydGllcy5zdHlsZSA9IHsKCiAgICAgICAgc2V0OiBmdW5jdGlvbihzdHlsZSl7CiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLmNzc1RleHQgPSBzdHlsZTsKICAgICAgICB9LAoKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5jc3NUZXh0OwogICAgICAgIH0sCgogICAgICAgIGVyYXNlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gJyc7CiAgICAgICAgfQoKfTsKCkVsZW1lbnQuUHJvcGVydGllcy50YWcgPSB7CgogICAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhZ05hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICB9Cgp9OwoKLyo8IXdlYmtpdD4qLwpFbGVtZW50LlByb3BlcnRpZXMuaHRtbCA9IChmdW5jdGlvbigpewoKICAgICAgICB2YXIgdGFibGVUZXN0ID0gRnVuY3Rpb24uYXR0ZW1wdChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTsKICAgICAgICAgICAgICAgIHRhYmxlLmlubmVySFRNTCA9ICc8dHI+PHRkPjwvdGQ+PC90cj4nOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoKICAgICAgICB2YXIgdHJhbnNsYXRpb25zID0gewogICAgICAgICAgICAgICAgdGFibGU6IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddLAogICAgICAgICAgICAgICAgc2VsZWN0OiBbMSwgJzxzZWxlY3Q+JywgJzwvc2VsZWN0PiddLAogICAgICAgICAgICAgICAgdGJvZHk6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLAogICAgICAgICAgICAgICAgdHI6IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddCiAgICAgICAgfTsKICAgICAgICB0cmFuc2xhdGlvbnMudGhlYWQgPSB0cmFuc2xhdGlvbnMudGZvb3QgPSB0cmFuc2xhdGlvbnMudGJvZHk7CgogICAgICAgIC8qPGx0SUU5PiovCiAgICAgICAgLy8gdGVjaG5pcXVlIGJ5IGpkYmFybGV0dCAtIGh0dHA6Ly9qZGJhcnRsZXR0LmNvbS9pbm5lcnNoaXYvCiAgICAgICAgd3JhcHBlci5pbm5lckhUTUwgPSAnPG5hdj48L25hdj4nOwogICAgICAgIHZhciBIVE1MNVRlc3QgPSB3cmFwcGVyLmNoaWxkTm9kZXMubGVuZ3RoID09IDE7CiAgICAgICAgaWYgKCFIVE1MNVRlc3QpewogICAgICAgICAgICAgICAgdmFyIHRhZ3MgPSAnYWJiciBhcnRpY2xlIGFzaWRlIGF1ZGlvIGNhbnZhcyBkYXRhbGlzdCBkZXRhaWxzIGZpZ2NhcHRpb24gZmlndXJlIGZvb3RlciBoZWFkZXIgaGdyb3VwIG1hcmsgbWV0ZXIgbmF2IG91dHB1dCBwcm9ncmVzcyBzZWN0aW9uIHN1bW1hcnkgdGltZSB2aWRlbycuc3BsaXQoJyAnKSwKICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIGwgPSB0YWdzLmxlbmd0aDsKICAgICAgICAgICAgICAgIHdoaWxlIChsLS0pIGZyYWdtZW50LmNyZWF0ZUVsZW1lbnQodGFnc1tsXSk7CiAgICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCh3cmFwcGVyKTsKICAgICAgICB9CiAgICAgICAgLyo8L2x0SUU5PiovCgogICAgICAgIHZhciBodG1sID0gewogICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihodG1sKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVPZihodG1sKSA9PSAnYXJyYXknKSBodG1sID0gaHRtbC5qb2luKCcnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3cmFwID0gKCF0YWJsZVRlc3QgJiYgdHJhbnNsYXRpb25zW3RoaXMuZ2V0KCd0YWcnKV0pOwogICAgICAgICAgICAgICAgICAgICAgICAvKjxsdElFOT4qLwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdyYXAgJiYgIUhUTUw1VGVzdCkgd3JhcCA9IFswLCAnJywgJyddOwogICAgICAgICAgICAgICAgICAgICAgICAvKjwvbHRJRTk+Ki8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdyYXApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IHdyYXBwZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QuaW5uZXJIVE1MID0gd3JhcFsxXSArIGh0bWwgKyB3cmFwWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSB3cmFwWzBdOyBpLS07KSBmaXJzdCA9IGZpcnN0LmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbXB0eSgpLmFkb3B0KGZpcnN0LmNoaWxkTm9kZXMpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJIVE1MID0gaHRtbDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGh0bWwuZXJhc2UgPSBodG1sLnNldDsKCiAgICAgICAgcmV0dXJuIGh0bWw7Cn0pKCk7Ci8qPC8hd2Via2l0PiovCgovKjxsdElFOT4qLwp2YXIgdGVzdEZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7CnRlc3RGb3JtLmlubmVySFRNTCA9ICc8c2VsZWN0PjxvcHRpb24+czwvb3B0aW9uPjwvc2VsZWN0Pic7CgppZiAodGVzdEZvcm0uZmlyc3RDaGlsZC52YWx1ZSAhPSAncycpIEVsZW1lbnQuUHJvcGVydGllcy52YWx1ZSA9IHsKCiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgICAgICAgICB2YXIgdGFnID0gdGhpcy5nZXQoJ3RhZycpOwogICAgICAgICAgICAgICAgaWYgKHRhZyAhPSAnc2VsZWN0JykgcmV0dXJuIHRoaXMuc2V0UHJvcGVydHkoJ3ZhbHVlJywgdmFsdWUpOwogICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmdldEVsZW1lbnRzKCdvcHRpb24nKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zW2ldLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSBvcHRpb24uZ2V0QXR0cmlidXRlTm9kZSgndmFsdWUnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25WYWx1ZSA9IChhdHRyICYmIGF0dHIuc3BlY2lmaWVkKSA/IG9wdGlvbi52YWx1ZSA6IG9wdGlvbi5nZXQoJ3RleHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvblZhbHVlID09IHZhbHVlKSByZXR1cm4gb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gdGhpcywgdGFnID0gb3B0aW9uLmdldCgndGFnJyk7CgogICAgICAgICAgICAgICAgaWYgKHRhZyAhPSAnc2VsZWN0JyAmJiB0YWcgIT0gJ29wdGlvbicpIHJldHVybiB0aGlzLmdldFByb3BlcnR5KCd2YWx1ZScpOwoKICAgICAgICAgICAgICAgIGlmICh0YWcgPT0gJ3NlbGVjdCcgJiYgIShvcHRpb24gPSBvcHRpb24uZ2V0U2VsZWN0ZWQoKVswXSkpIHJldHVybiAnJzsKCiAgICAgICAgICAgICAgICB2YXIgYXR0ciA9IG9wdGlvbi5nZXRBdHRyaWJ1dGVOb2RlKCd2YWx1ZScpOwogICAgICAgICAgICAgICAgcmV0dXJuIChhdHRyICYmIGF0dHIuc3BlY2lmaWVkKSA/IG9wdGlvbi52YWx1ZSA6IG9wdGlvbi5nZXQoJ3RleHQnKTsKICAgICAgICB9Cgp9OwovKjwvbHRJRTk+Ki8KCi8qPElFPiovCnZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwppZiAoZWwuZ2V0QXR0cmlidXRlTm9kZSgnaWQnKSkgRWxlbWVudC5Qcm9wZXJ0aWVzLmlkID0gewogICAgICAgIHNldDogZnVuY3Rpb24oaWQpewogICAgICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZSgnaWQnKS52YWx1ZSA9IGlkOwogICAgICAgIH0sCiAgICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaWQgfHwgbnVsbDsKICAgICAgICB9LAogICAgICAgIGVyYXNlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZSgnaWQnKS52YWx1ZSA9ICcnOwogICAgICAgIH0KfTsKLyo8L0lFPiovCgp9KSgpOwoKCi8qCi0tLQoKbmFtZTogRWxlbWVudC5TdHlsZQoKZGVzY3JpcHRpb246IENvbnRhaW5zIG1ldGhvZHMgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIHN0eWxlcyBvZiBFbGVtZW50cyBpbiBhIGZhc2hpb25hYmxlIHdheS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IEVsZW1lbnQKCnByb3ZpZGVzOiBFbGVtZW50LlN0eWxlCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGh0bWwgPSBkb2N1bWVudC5odG1sOwoKRWxlbWVudC5Qcm9wZXJ0aWVzLnN0eWxlcyA9IHtzZXQ6IGZ1bmN0aW9uKHN0eWxlcyl7CiAgICAgICAgdGhpcy5zZXRTdHlsZXMoc3R5bGVzKTsKfX07Cgp2YXIgaGFzT3BhY2l0eSA9IChodG1sLnN0eWxlLm9wYWNpdHkgIT0gbnVsbCksCiAgICAgICAgaGFzRmlsdGVyID0gKGh0bWwuc3R5bGUuZmlsdGVyICE9IG51bGwpLAogICAgICAgIHJlQWxwaGEgPSAvYWxwaGFcKG9wYWNpdHk9KFtcZC5dKylcKS9pOwoKdmFyIHNldFZpc2liaWxpdHkgPSBmdW5jdGlvbihlbGVtZW50LCBvcGFjaXR5KXsKICAgICAgICBlbGVtZW50LnN0b3JlKCckb3BhY2l0eScsIG9wYWNpdHkpOwogICAgICAgIGVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9IG9wYWNpdHkgPiAwID8gJ3Zpc2libGUnIDogJ2hpZGRlbic7Cn07Cgp2YXIgc2V0T3BhY2l0eSA9IChoYXNPcGFjaXR5ID8gZnVuY3Rpb24oZWxlbWVudCwgb3BhY2l0eSl7CiAgICAgICAgZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eTsKfSA6IChoYXNGaWx0ZXIgPyBmdW5jdGlvbihlbGVtZW50LCBvcGFjaXR5KXsKICAgICAgICBpZiAoIWVsZW1lbnQuY3VycmVudFN0eWxlIHx8ICFlbGVtZW50LmN1cnJlbnRTdHlsZS5oYXNMYXlvdXQpIGVsZW1lbnQuc3R5bGUuem9vbSA9IDE7CiAgICAgICAgb3BhY2l0eSA9IChvcGFjaXR5ICogMTAwKS5saW1pdCgwLCAxMDApLnJvdW5kKCk7CiAgICAgICAgb3BhY2l0eSA9IChvcGFjaXR5ID09IDEwMCkgPyAnJyA6ICdhbHBoYShvcGFjaXR5PScgKyBvcGFjaXR5ICsgJyknOwogICAgICAgIHZhciBmaWx0ZXIgPSBlbGVtZW50LnN0eWxlLmZpbHRlciB8fCBlbGVtZW50LmdldENvbXB1dGVkU3R5bGUoJ2ZpbHRlcicpIHx8ICcnOwogICAgICAgIGVsZW1lbnQuc3R5bGUuZmlsdGVyID0gcmVBbHBoYS50ZXN0KGZpbHRlcikgPyBmaWx0ZXIucmVwbGFjZShyZUFscGhhLCBvcGFjaXR5KSA6IGZpbHRlciArIG9wYWNpdHk7Cn0gOiBzZXRWaXNpYmlsaXR5KSk7Cgp2YXIgZ2V0T3BhY2l0eSA9IChoYXNPcGFjaXR5ID8gZnVuY3Rpb24oZWxlbWVudCl7CiAgICAgICAgdmFyIG9wYWNpdHkgPSBlbGVtZW50LnN0eWxlLm9wYWNpdHkgfHwgZWxlbWVudC5nZXRDb21wdXRlZFN0eWxlKCdvcGFjaXR5Jyk7CiAgICAgICAgcmV0dXJuIChvcGFjaXR5ID09ICcnKSA/IDEgOiBvcGFjaXR5LnRvRmxvYXQoKTsKfSA6IChoYXNGaWx0ZXIgPyBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICB2YXIgZmlsdGVyID0gKGVsZW1lbnQuc3R5bGUuZmlsdGVyIHx8IGVsZW1lbnQuZ2V0Q29tcHV0ZWRTdHlsZSgnZmlsdGVyJykpLAogICAgICAgICAgICAgICAgb3BhY2l0eTsKICAgICAgICBpZiAoZmlsdGVyKSBvcGFjaXR5ID0gZmlsdGVyLm1hdGNoKHJlQWxwaGEpOwogICAgICAgIHJldHVybiAob3BhY2l0eSA9PSBudWxsIHx8IGZpbHRlciA9PSBudWxsKSA/IDEgOiAob3BhY2l0eVsxXSAvIDEwMCk7Cn0gOiBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICB2YXIgb3BhY2l0eSA9IGVsZW1lbnQucmV0cmlldmUoJyRvcGFjaXR5Jyk7CiAgICAgICAgaWYgKG9wYWNpdHkgPT0gbnVsbCkgb3BhY2l0eSA9IChlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPT0gJ2hpZGRlbicgPyAwIDogMSk7CiAgICAgICAgcmV0dXJuIG9wYWNpdHk7Cn0pKTsKCnZhciBmbG9hdE5hbWUgPSAoaHRtbC5zdHlsZS5jc3NGbG9hdCA9PSBudWxsKSA/ICdzdHlsZUZsb2F0JyA6ICdjc3NGbG9hdCc7CgpFbGVtZW50LmltcGxlbWVudCh7CgogICAgICAgIGdldENvbXB1dGVkU3R5bGU6IGZ1bmN0aW9uKHByb3BlcnR5KXsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTdHlsZSkgcmV0dXJuIHRoaXMuY3VycmVudFN0eWxlW3Byb3BlcnR5LmNhbWVsQ2FzZSgpXTsKICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0VmlldyA9IEVsZW1lbnQuZ2V0RG9jdW1lbnQodGhpcykuZGVmYXVsdFZpZXcsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkID0gZGVmYXVsdFZpZXcgPyBkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpIDogbnVsbDsKICAgICAgICAgICAgICAgIHJldHVybiAoY29tcHV0ZWQpID8gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSgocHJvcGVydHkgPT0gZmxvYXROYW1lKSA/ICdmbG9hdCcgOiBwcm9wZXJ0eS5oeXBoZW5hdGUoKSkgOiBudWxsOwogICAgICAgIH0sCgogICAgICAgIHNldFN0eWxlOiBmdW5jdGlvbihwcm9wZXJ0eSwgdmFsdWUpewogICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09ICdvcGFjaXR5Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldE9wYWNpdHkodGhpcywgcGFyc2VGbG9hdCh2YWx1ZSkpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gKHByb3BlcnR5ID09ICdmbG9hdCcgPyBmbG9hdE5hbWUgOiBwcm9wZXJ0eSkuY2FtZWxDYXNlKCk7CiAgICAgICAgICAgICAgICBpZiAodHlwZU9mKHZhbHVlKSAhPSAnc3RyaW5nJyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXAgPSAoRWxlbWVudC5TdHlsZXNbcHJvcGVydHldIHx8ICdAJykuc3BsaXQoJyAnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBBcnJheS5mcm9tKHZhbHVlKS5tYXAoZnVuY3Rpb24odmFsLCBpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1hcFtpXSkgcmV0dXJuICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAodHlwZU9mKHZhbCkgPT0gJ251bWJlcicpID8gbWFwW2ldLnJlcGxhY2UoJ0AnLCBNYXRoLnJvdW5kKHZhbCkpIDogdmFsOwogICAgICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCcgJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09IFN0cmluZyhOdW1iZXIodmFsdWUpKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0U3R5bGU6IGZ1bmN0aW9uKHByb3BlcnR5KXsKICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PSAnb3BhY2l0eScpIHJldHVybiBnZXRPcGFjaXR5KHRoaXMpOwogICAgICAgICAgICAgICAgcHJvcGVydHkgPSAocHJvcGVydHkgPT0gJ2Zsb2F0JyA/IGZsb2F0TmFtZSA6IHByb3BlcnR5KS5jYW1lbENhc2UoKTsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnN0eWxlW3Byb3BlcnR5XTsKICAgICAgICAgICAgICAgIGlmICghcmVzdWx0IHx8IHByb3BlcnR5ID09ICd6SW5kZXgnKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHN0eWxlIGluIEVsZW1lbnQuU2hvcnRTdHlsZXMpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPSBzdHlsZSkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcyBpbiBFbGVtZW50LlNob3J0U3R5bGVzW3N0eWxlXSkgcmVzdWx0LnB1c2godGhpcy5nZXRTdHlsZShzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcgJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5nZXRDb21wdXRlZFN0eWxlKHByb3BlcnR5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBTdHJpbmcocmVzdWx0KTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gcmVzdWx0Lm1hdGNoKC9yZ2JhP1woW1xkXHMsXStcKS8pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3IpIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKGNvbG9yWzBdLCBjb2xvclswXS5yZ2JUb0hleCgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChCcm93c2VyLm9wZXJhIHx8IChCcm93c2VyLmllICYmIGlzTmFOKHBhcnNlRmxvYXQocmVzdWx0KSkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgvXihoZWlnaHR8d2lkdGgpJC8pLnRlc3QocHJvcGVydHkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gKHByb3BlcnR5ID09ICd3aWR0aCcpID8gWydsZWZ0JywgJ3JpZ2h0J10gOiBbJ3RvcCcsICdib3R0b20nXSwgc2l6ZSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmVhY2goZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSB0aGlzLmdldFN0eWxlKCdib3JkZXItJyArIHZhbHVlICsgJy13aWR0aCcpLnRvSW50KCkgKyB0aGlzLmdldFN0eWxlKCdwYWRkaW5nLScgKyB2YWx1ZSkudG9JbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1snb2Zmc2V0JyArIHByb3BlcnR5LmNhcGl0YWxpemUoKV0gLSBzaXplICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoQnJvd3Nlci5vcGVyYSAmJiBTdHJpbmcocmVzdWx0KS5pbmRleE9mKCdweCcpICE9IC0xKSByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoKC9eYm9yZGVyKC4rKVdpZHRofG1hcmdpbnxwYWRkaW5nLykudGVzdChwcm9wZXJ0eSkpIHJldHVybiAnMHB4JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKCiAgICAgICAgc2V0U3R5bGVzOiBmdW5jdGlvbihzdHlsZXMpewogICAgICAgICAgICAgICAgZm9yICh2YXIgc3R5bGUgaW4gc3R5bGVzKSB0aGlzLnNldFN0eWxlKHN0eWxlLCBzdHlsZXNbc3R5bGVdKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGdldFN0eWxlczogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgICAgICAgICAgIEFycmF5LmZsYXR0ZW4oYXJndW1lbnRzKS5lYWNoKGZ1bmN0aW9uKGtleSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdGhpcy5nZXRTdHlsZShrZXkpOwogICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KCn0pOwoKRWxlbWVudC5TdHlsZXMgPSB7CiAgICAgICAgbGVmdDogJ0BweCcsIHRvcDogJ0BweCcsIGJvdHRvbTogJ0BweCcsIHJpZ2h0OiAnQHB4JywKICAgICAgICB3aWR0aDogJ0BweCcsIGhlaWdodDogJ0BweCcsIG1heFdpZHRoOiAnQHB4JywgbWF4SGVpZ2h0OiAnQHB4JywgbWluV2lkdGg6ICdAcHgnLCBtaW5IZWlnaHQ6ICdAcHgnLAogICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYihALCBALCBAKScsIGJhY2tncm91bmRQb3NpdGlvbjogJ0BweCBAcHgnLCBjb2xvcjogJ3JnYihALCBALCBAKScsCiAgICAgICAgZm9udFNpemU6ICdAcHgnLCBsZXR0ZXJTcGFjaW5nOiAnQHB4JywgbGluZUhlaWdodDogJ0BweCcsIGNsaXA6ICdyZWN0KEBweCBAcHggQHB4IEBweCknLAogICAgICAgIG1hcmdpbjogJ0BweCBAcHggQHB4IEBweCcsIHBhZGRpbmc6ICdAcHggQHB4IEBweCBAcHgnLCBib3JkZXI6ICdAcHggQCByZ2IoQCwgQCwgQCkgQHB4IEAgcmdiKEAsIEAsIEApIEBweCBAIHJnYihALCBALCBAKScsCiAgICAgICAgYm9yZGVyV2lkdGg6ICdAcHggQHB4IEBweCBAcHgnLCBib3JkZXJTdHlsZTogJ0AgQCBAIEAnLCBib3JkZXJDb2xvcjogJ3JnYihALCBALCBAKSByZ2IoQCwgQCwgQCkgcmdiKEAsIEAsIEApIHJnYihALCBALCBAKScsCiAgICAgICAgekluZGV4OiAnQCcsICd6b29tJzogJ0AnLCBmb250V2VpZ2h0OiAnQCcsIHRleHRJbmRlbnQ6ICdAcHgnLCBvcGFjaXR5OiAnQCcKfTsKCgoKCgpFbGVtZW50LlNob3J0U3R5bGVzID0ge21hcmdpbjoge30sIHBhZGRpbmc6IHt9LCBib3JkZXI6IHt9LCBib3JkZXJXaWR0aDoge30sIGJvcmRlclN0eWxlOiB7fSwgYm9yZGVyQ29sb3I6IHt9fTsKClsnVG9wJywgJ1JpZ2h0JywgJ0JvdHRvbScsICdMZWZ0J10uZWFjaChmdW5jdGlvbihkaXJlY3Rpb24pewogICAgICAgIHZhciBTaG9ydCA9IEVsZW1lbnQuU2hvcnRTdHlsZXM7CiAgICAgICAgdmFyIEFsbCA9IEVsZW1lbnQuU3R5bGVzOwogICAgICAgIFsnbWFyZ2luJywgJ3BhZGRpbmcnXS5lYWNoKGZ1bmN0aW9uKHN0eWxlKXsKICAgICAgICAgICAgICAgIHZhciBzZCA9IHN0eWxlICsgZGlyZWN0aW9uOwogICAgICAgICAgICAgICAgU2hvcnRbc3R5bGVdW3NkXSA9IEFsbFtzZF0gPSAnQHB4JzsKICAgICAgICB9KTsKICAgICAgICB2YXIgYmQgPSAnYm9yZGVyJyArIGRpcmVjdGlvbjsKICAgICAgICBTaG9ydC5ib3JkZXJbYmRdID0gQWxsW2JkXSA9ICdAcHggQCByZ2IoQCwgQCwgQCknOwogICAgICAgIHZhciBiZHcgPSBiZCArICdXaWR0aCcsIGJkcyA9IGJkICsgJ1N0eWxlJywgYmRjID0gYmQgKyAnQ29sb3InOwogICAgICAgIFNob3J0W2JkXSA9IHt9OwogICAgICAgIFNob3J0LmJvcmRlcldpZHRoW2Jkd10gPSBTaG9ydFtiZF1bYmR3XSA9IEFsbFtiZHddID0gJ0BweCc7CiAgICAgICAgU2hvcnQuYm9yZGVyU3R5bGVbYmRzXSA9IFNob3J0W2JkXVtiZHNdID0gQWxsW2Jkc10gPSAnQCc7CiAgICAgICAgU2hvcnQuYm9yZGVyQ29sb3JbYmRjXSA9IFNob3J0W2JkXVtiZGNdID0gQWxsW2JkY10gPSAncmdiKEAsIEAsIEApJzsKfSk7Cgp9KSgpOwoKCi8qCi0tLQoKbmFtZTogRWxlbWVudC5FdmVudAoKZGVzY3JpcHRpb246IENvbnRhaW5zIEVsZW1lbnQgbWV0aG9kcyBmb3IgZGVhbGluZyB3aXRoIGV2ZW50cy4gVGhpcyBmaWxlIGFsc28gaW5jbHVkZXMgbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZSBjdXN0b20gRWxlbWVudCBFdmVudHMsIGlmIG5lY2Vzc2FyeS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtFbGVtZW50LCBFdmVudF0KCnByb3ZpZGVzOiBFbGVtZW50LkV2ZW50CgouLi4KKi8KCihmdW5jdGlvbigpewoKRWxlbWVudC5Qcm9wZXJ0aWVzLmV2ZW50cyA9IHtzZXQ6IGZ1bmN0aW9uKGV2ZW50cyl7CiAgICAgICAgdGhpcy5hZGRFdmVudHMoZXZlbnRzKTsKfX07CgpbRWxlbWVudCwgV2luZG93LCBEb2N1bWVudF0uaW52b2tlKCdpbXBsZW1lbnQnLCB7CgogICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbih0eXBlLCBmbil7CiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5yZXRyaWV2ZSgnZXZlbnRzJywge30pOwogICAgICAgICAgICAgICAgaWYgKCFldmVudHNbdHlwZV0pIGV2ZW50c1t0eXBlXSA9IHtrZXlzOiBbXSwgdmFsdWVzOiBbXX07CiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzW3R5cGVdLmtleXMuY29udGFpbnMoZm4pKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIGV2ZW50c1t0eXBlXS5rZXlzLnB1c2goZm4pOwogICAgICAgICAgICAgICAgdmFyIHJlYWxUeXBlID0gdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tID0gRWxlbWVudC5FdmVudHNbdHlwZV0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbiA9IGZuLAogICAgICAgICAgICAgICAgICAgICAgICBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgIGlmIChjdXN0b20pewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tLm9uQWRkKSBjdXN0b20ub25BZGQuY2FsbCh0aGlzLCBmbiwgdHlwZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b20uY29uZGl0aW9uKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24gPSBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tLmNvbmRpdGlvbi5jYWxsKHRoaXMsIGV2ZW50LCB0eXBlKSkgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tLmJhc2UpIHJlYWxUeXBlID0gRnVuY3Rpb24uZnJvbShjdXN0b20uYmFzZSkuY2FsbCh0aGlzLCB0eXBlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBkZWZuID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuLmNhbGwoc2VsZik7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIG5hdGl2ZUV2ZW50ID0gRWxlbWVudC5OYXRpdmVFdmVudHNbcmVhbFR5cGVdOwogICAgICAgICAgICAgICAgaWYgKG5hdGl2ZUV2ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hdGl2ZUV2ZW50ID09IDIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZm4gPSBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudCA9IG5ldyBET01FdmVudChldmVudCwgc2VsZi5nZXRXaW5kb3coKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uLmNhbGwoc2VsZiwgZXZlbnQpID09PSBmYWxzZSkgZXZlbnQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcihyZWFsVHlwZSwgZGVmbiwgYXJndW1lbnRzWzJdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGV2ZW50c1t0eXBlXS52YWx1ZXMucHVzaChkZWZuKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZUV2ZW50OiBmdW5jdGlvbih0eXBlLCBmbil7CiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5yZXRyaWV2ZSgnZXZlbnRzJyk7CiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50cyB8fCAhZXZlbnRzW3R5cGVdKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gZXZlbnRzW3R5cGVdOwogICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbGlzdC5rZXlzLmluZGV4T2YoZm4pOwogICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IC0xKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxpc3QudmFsdWVzW2luZGV4XTsKICAgICAgICAgICAgICAgIGRlbGV0ZSBsaXN0LmtleXNbaW5kZXhdOwogICAgICAgICAgICAgICAgZGVsZXRlIGxpc3QudmFsdWVzW2luZGV4XTsKICAgICAgICAgICAgICAgIHZhciBjdXN0b20gPSBFbGVtZW50LkV2ZW50c1t0eXBlXTsKICAgICAgICAgICAgICAgIGlmIChjdXN0b20pewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tLm9uUmVtb3ZlKSBjdXN0b20ub25SZW1vdmUuY2FsbCh0aGlzLCBmbiwgdHlwZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b20uYmFzZSkgdHlwZSA9IEZ1bmN0aW9uLmZyb20oY3VzdG9tLmJhc2UpLmNhbGwodGhpcywgdHlwZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gKEVsZW1lbnQuTmF0aXZlRXZlbnRzW3R5cGVdKSA/IHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgdmFsdWUsIGFyZ3VtZW50c1syXSkgOiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGFkZEV2ZW50czogZnVuY3Rpb24oZXZlbnRzKXsKICAgICAgICAgICAgICAgIGZvciAodmFyIGV2ZW50IGluIGV2ZW50cykgdGhpcy5hZGRFdmVudChldmVudCwgZXZlbnRzW2V2ZW50XSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICByZW1vdmVFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cyl7CiAgICAgICAgICAgICAgICB2YXIgdHlwZTsKICAgICAgICAgICAgICAgIGlmICh0eXBlT2YoZXZlbnRzKSA9PSAnb2JqZWN0Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodHlwZSBpbiBldmVudHMpIHRoaXMucmVtb3ZlRXZlbnQodHlwZSwgZXZlbnRzW3R5cGVdKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgYXR0YWNoZWQgPSB0aGlzLnJldHJpZXZlKCdldmVudHMnKTsKICAgICAgICAgICAgICAgIGlmICghYXR0YWNoZWQpIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgaWYgKCFldmVudHMpewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHR5cGUgaW4gYXR0YWNoZWQpIHRoaXMucmVtb3ZlRXZlbnRzKHR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsaW1pbmF0ZSgnZXZlbnRzJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0dGFjaGVkW2V2ZW50c10pewogICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hlZFtldmVudHNdLmtleXMuZWFjaChmdW5jdGlvbihmbil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudChldmVudHMsIGZuKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRhY2hlZFtldmVudHNdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZmlyZUV2ZW50OiBmdW5jdGlvbih0eXBlLCBhcmdzLCBkZWxheSl7CiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5yZXRyaWV2ZSgnZXZlbnRzJyk7CiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50cyB8fCAhZXZlbnRzW3R5cGVdKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3MpOwoKICAgICAgICAgICAgICAgIGV2ZW50c1t0eXBlXS5rZXlzLmVhY2goZnVuY3Rpb24oZm4pewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsYXkpIGZuLmRlbGF5KGRlbGF5LCB0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBmbi5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgY2xvbmVFdmVudHM6IGZ1bmN0aW9uKGZyb20sIHR5cGUpewogICAgICAgICAgICAgICAgZnJvbSA9IGRvY3VtZW50LmlkKGZyb20pOwogICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IGZyb20ucmV0cmlldmUoJ2V2ZW50cycpOwogICAgICAgICAgICAgICAgaWYgKCFldmVudHMpIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgaWYgKCF0eXBlKXsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZXZlbnRUeXBlIGluIGV2ZW50cykgdGhpcy5jbG9uZUV2ZW50cyhmcm9tLCBldmVudFR5cGUpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0pewogICAgICAgICAgICAgICAgICAgICAgICBldmVudHNbdHlwZV0ua2V5cy5lYWNoKGZ1bmN0aW9uKGZuKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50KHR5cGUsIGZuKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCkVsZW1lbnQuTmF0aXZlRXZlbnRzID0gewogICAgICAgIGNsaWNrOiAyLCBkYmxjbGljazogMiwgbW91c2V1cDogMiwgbW91c2Vkb3duOiAyLCBjb250ZXh0bWVudTogMiwgLy9tb3VzZSBidXR0b25zCiAgICAgICAgbW91c2V3aGVlbDogMiwgRE9NTW91c2VTY3JvbGw6IDIsIC8vbW91c2Ugd2hlZWwKICAgICAgICBtb3VzZW92ZXI6IDIsIG1vdXNlb3V0OiAyLCBtb3VzZW1vdmU6IDIsIHNlbGVjdHN0YXJ0OiAyLCBzZWxlY3RlbmQ6IDIsIC8vbW91c2UgbW92ZW1lbnQKICAgICAgICBrZXlkb3duOiAyLCBrZXlwcmVzczogMiwga2V5dXA6IDIsIC8va2V5Ym9hcmQKICAgICAgICBvcmllbnRhdGlvbmNoYW5nZTogMiwgLy8gbW9iaWxlCiAgICAgICAgdG91Y2hzdGFydDogMiwgdG91Y2htb3ZlOiAyLCB0b3VjaGVuZDogMiwgdG91Y2hjYW5jZWw6IDIsIC8vIHRvdWNoCiAgICAgICAgZ2VzdHVyZXN0YXJ0OiAyLCBnZXN0dXJlY2hhbmdlOiAyLCBnZXN0dXJlZW5kOiAyLCAvLyBnZXN0dXJlCiAgICAgICAgZm9jdXM6IDIsIGJsdXI6IDIsIGNoYW5nZTogMiwgcmVzZXQ6IDIsIHNlbGVjdDogMiwgc3VibWl0OiAyLCBwYXN0ZTogMiwgaW5wdXQ6IDIsIC8vZm9ybSBlbGVtZW50cwogICAgICAgIGxvYWQ6IDIsIHVubG9hZDogMSwgYmVmb3JldW5sb2FkOiAyLCByZXNpemU6IDEsIG1vdmU6IDEsIERPTUNvbnRlbnRMb2FkZWQ6IDEsIHJlYWR5c3RhdGVjaGFuZ2U6IDEsIC8vd2luZG93CiAgICAgICAgZXJyb3I6IDEsIGFib3J0OiAxLCBzY3JvbGw6IDEgLy9taXNjCn07CgpFbGVtZW50LkV2ZW50cyA9IHttb3VzZXdoZWVsOiB7CiAgICAgICAgYmFzZTogKEJyb3dzZXIuZmlyZWZveCkgPyAnRE9NTW91c2VTY3JvbGwnIDogJ21vdXNld2hlZWwnCn19OwoKaWYgKCdvbm1vdXNlZW50ZXInIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCl7CiAgICAgICAgRWxlbWVudC5OYXRpdmVFdmVudHMubW91c2VlbnRlciA9IEVsZW1lbnQuTmF0aXZlRXZlbnRzLm1vdXNlbGVhdmUgPSAyOwp9IGVsc2UgewogICAgICAgIHZhciBjaGVjayA9IGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDsKICAgICAgICAgICAgICAgIGlmIChyZWxhdGVkID09IG51bGwpIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgaWYgKCFyZWxhdGVkKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICByZXR1cm4gKHJlbGF0ZWQgIT0gdGhpcyAmJiByZWxhdGVkLnByZWZpeCAhPSAneHVsJyAmJiB0eXBlT2YodGhpcykgIT0gJ2RvY3VtZW50JyAmJiAhdGhpcy5jb250YWlucyhyZWxhdGVkKSk7CiAgICAgICAgfTsKCiAgICAgICAgRWxlbWVudC5FdmVudHMubW91c2VlbnRlciA9IHsKICAgICAgICAgICAgICAgIGJhc2U6ICdtb3VzZW92ZXInLAogICAgICAgICAgICAgICAgY29uZGl0aW9uOiBjaGVjawogICAgICAgIH07CgogICAgICAgIEVsZW1lbnQuRXZlbnRzLm1vdXNlbGVhdmUgPSB7CiAgICAgICAgICAgICAgICBiYXNlOiAnbW91c2VvdXQnLAogICAgICAgICAgICAgICAgY29uZGl0aW9uOiBjaGVjawogICAgICAgIH07Cn0KCi8qPGx0SUU5PiovCmlmICghd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpewogICAgICAgIEVsZW1lbnQuTmF0aXZlRXZlbnRzLnByb3BlcnR5Y2hhbmdlID0gMjsKICAgICAgICBFbGVtZW50LkV2ZW50cy5jaGFuZ2UgPSB7CiAgICAgICAgICAgICAgICBiYXNlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMudHlwZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmdldCgndGFnJykgPT0gJ2lucHV0JyAmJiAodHlwZSA9PSAncmFkaW8nIHx8IHR5cGUgPT0gJ2NoZWNrYm94JykpID8gJ3Byb3BlcnR5Y2hhbmdlJyA6ICdjaGFuZ2UnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY29uZGl0aW9uOiBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhISh0aGlzLnR5cGUgIT0gJ3JhZGlvJyB8fCB0aGlzLmNoZWNrZWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KfQovKjwvbHRJRTk+Ki8KCgoKfSkoKTsKCgovKgotLS0KCm5hbWU6IEVsZW1lbnQuRGVsZWdhdGlvbgoKZGVzY3JpcHRpb246IEV4dGVuZHMgdGhlIEVsZW1lbnQgbmF0aXZlIG9iamVjdCB0byBpbmNsdWRlIHRoZSBkZWxlZ2F0ZSBtZXRob2QgZm9yIG1vcmUgZWZmaWNpZW50IGV2ZW50IG1hbmFnZW1lbnQuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbRWxlbWVudC5FdmVudF0KCnByb3ZpZGVzOiBbRWxlbWVudC5EZWxlZ2F0aW9uXQoKLi4uCiovCgooZnVuY3Rpb24oKXsKCnZhciBldmVudExpc3RlbmVyU3VwcG9ydCA9ICEhd2luZG93LmFkZEV2ZW50TGlzdGVuZXI7CgpFbGVtZW50Lk5hdGl2ZUV2ZW50cy5mb2N1c2luID0gRWxlbWVudC5OYXRpdmVFdmVudHMuZm9jdXNvdXQgPSAyOwoKdmFyIGJ1YmJsZVVwID0gZnVuY3Rpb24oc2VsZiwgbWF0Y2gsIGZuLCBldmVudCwgdGFyZ2V0KXsKICAgICAgICB3aGlsZSAodGFyZ2V0ICYmIHRhcmdldCAhPSBzZWxmKXsKICAgICAgICAgICAgICAgIGlmIChtYXRjaCh0YXJnZXQsIGV2ZW50KSkgcmV0dXJuIGZuLmNhbGwodGFyZ2V0LCBldmVudCwgdGFyZ2V0KTsKICAgICAgICAgICAgICAgIHRhcmdldCA9IGRvY3VtZW50LmlkKHRhcmdldC5wYXJlbnROb2RlKTsKICAgICAgICB9Cn07Cgp2YXIgbWFwID0gewogICAgICAgIG1vdXNlZW50ZXI6IHsKICAgICAgICAgICAgICAgIGJhc2U6ICdtb3VzZW92ZXInCiAgICAgICAgfSwKICAgICAgICBtb3VzZWxlYXZlOiB7CiAgICAgICAgICAgICAgICBiYXNlOiAnbW91c2VvdXQnCiAgICAgICAgfSwKICAgICAgICBmb2N1czogewogICAgICAgICAgICAgICAgYmFzZTogJ2ZvY3VzJyArIChldmVudExpc3RlbmVyU3VwcG9ydCA/ICcnIDogJ2luJyksCiAgICAgICAgICAgICAgICBjYXB0dXJlOiB0cnVlCiAgICAgICAgfSwKICAgICAgICBibHVyOiB7CiAgICAgICAgICAgICAgICBiYXNlOiBldmVudExpc3RlbmVyU3VwcG9ydCA/ICdibHVyJyA6ICdmb2N1c291dCcsCiAgICAgICAgICAgICAgICBjYXB0dXJlOiB0cnVlCiAgICAgICAgfQp9OwoKLyo8bHRJRTk+Ki8KdmFyIF9rZXkgPSAnJGRlbGVnYXRpb246JzsKdmFyIGZvcm1PYnNlcnZlciA9IGZ1bmN0aW9uKHR5cGUpewoKICAgICAgICByZXR1cm4gewoKICAgICAgICAgICAgICAgIGJhc2U6ICdmb2N1c2luJywKCiAgICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKHNlbGYsIHVpZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gc2VsZi5yZXRyaWV2ZShfa2V5ICsgdHlwZSArICdsaXN0ZW5lcnMnLCB7fSlbdWlkXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3QgJiYgbGlzdC5mb3JtcykgZm9yICh2YXIgaSA9IGxpc3QuZm9ybXMubGVuZ3RoOyBpLS07KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmZvcm1zW2ldLnJlbW92ZUV2ZW50KHR5cGUsIGxpc3QuZm5zW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBsaXN0ZW46IGZ1bmN0aW9uKHNlbGYsIG1hdGNoLCBmbiwgZXZlbnQsIHRhcmdldCwgdWlkKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm0gPSAodGFyZ2V0LmdldCgndGFnJykgPT0gJ2Zvcm0nKSA/IHRhcmdldCA6IGV2ZW50LnRhcmdldC5nZXRQYXJlbnQoJ2Zvcm0nKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JtKSByZXR1cm47CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gc2VsZi5yZXRyaWV2ZShfa2V5ICsgdHlwZSArICdsaXN0ZW5lcnMnLCB7fSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbdWlkXSB8fCB7Zm9ybXM6IFtdLCBmbnM6IFtdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtcyA9IGxpc3RlbmVyLmZvcm1zLCBmbnMgPSBsaXN0ZW5lci5mbnM7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybXMuaW5kZXhPZihmb3JtKSAhPSAtMSkgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICBmb3Jtcy5wdXNoKGZvcm0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9mbiA9IGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWJibGVVcChzZWxmLCBtYXRjaCwgZm4sIGV2ZW50LCB0YXJnZXQpOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmFkZEV2ZW50KHR5cGUsIF9mbik7CiAgICAgICAgICAgICAgICAgICAgICAgIGZucy5wdXNoKF9mbik7CgogICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNbdWlkXSA9IGxpc3RlbmVyOwogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN0b3JlKF9rZXkgKyB0eXBlICsgJ2xpc3RlbmVycycsIGxpc3RlbmVycyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfTsKfTsKCnZhciBpbnB1dE9ic2VydmVyID0gZnVuY3Rpb24odHlwZSl7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGJhc2U6ICdmb2N1c2luJywKICAgICAgICAgICAgICAgIGxpc3RlbjogZnVuY3Rpb24oc2VsZiwgbWF0Y2gsIGZuLCBldmVudCwgdGFyZ2V0KXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHtibHVyOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRzKGV2ZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH19OwogICAgICAgICAgICAgICAgICAgICAgICBldmVudHNbdHlwZV0gPSBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlVXAoc2VsZiwgbWF0Y2gsIGZuLCBldmVudCwgdGFyZ2V0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmFkZEV2ZW50cyhldmVudHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH07Cn07CgppZiAoIWV2ZW50TGlzdGVuZXJTdXBwb3J0KSBPYmplY3QuYXBwZW5kKG1hcCwgewogICAgICAgIHN1Ym1pdDogZm9ybU9ic2VydmVyKCdzdWJtaXQnKSwKICAgICAgICByZXNldDogZm9ybU9ic2VydmVyKCdyZXNldCcpLAogICAgICAgIGNoYW5nZTogaW5wdXRPYnNlcnZlcignY2hhbmdlJyksCiAgICAgICAgc2VsZWN0OiBpbnB1dE9ic2VydmVyKCdzZWxlY3QnKQp9KTsKLyo8L2x0SUU5PiovCgp2YXIgcHJvdG8gPSBFbGVtZW50LnByb3RvdHlwZSwKICAgICAgICBhZGRFdmVudCA9IHByb3RvLmFkZEV2ZW50LAogICAgICAgIHJlbW92ZUV2ZW50ID0gcHJvdG8ucmVtb3ZlRXZlbnQ7Cgp2YXIgcmVsYXkgPSBmdW5jdGlvbihvbGQsIG1ldGhvZCl7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHR5cGUsIGZuLCB1c2VDYXB0dXJlKXsKICAgICAgICAgICAgICAgIGlmICh0eXBlLmluZGV4T2YoJzpyZWxheScpID09IC0xKSByZXR1cm4gb2xkLmNhbGwodGhpcywgdHlwZSwgZm4sIHVzZUNhcHR1cmUpOwogICAgICAgICAgICAgICAgdmFyIHBhcnNlZCA9IFNsaWNrLnBhcnNlKHR5cGUpLmV4cHJlc3Npb25zWzBdWzBdOwogICAgICAgICAgICAgICAgaWYgKHBhcnNlZC5wc2V1ZG9zWzBdLmtleSAhPSAncmVsYXknKSByZXR1cm4gb2xkLmNhbGwodGhpcywgdHlwZSwgZm4sIHVzZUNhcHR1cmUpOwogICAgICAgICAgICAgICAgdmFyIG5ld1R5cGUgPSBwYXJzZWQudGFnOwogICAgICAgICAgICAgICAgcGFyc2VkLnBzZXVkb3Muc2xpY2UoMSkuZWFjaChmdW5jdGlvbihwc2V1ZG8pewogICAgICAgICAgICAgICAgICAgICAgICBuZXdUeXBlICs9ICc6JyArIHBzZXVkby5rZXkgKyAocHNldWRvLnZhbHVlID8gJygnICsgcHNldWRvLnZhbHVlICsgJyknIDogJycpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBvbGQuY2FsbCh0aGlzLCB0eXBlLCBmbik7CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgbmV3VHlwZSwgcGFyc2VkLnBzZXVkb3NbMF0udmFsdWUsIGZuKTsKICAgICAgICB9Owp9OwoKdmFyIGRlbGVnYXRpb24gPSB7CgogICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbih0eXBlLCBtYXRjaCwgZm4pewogICAgICAgICAgICAgICAgdmFyIHN0b3JhZ2UgPSB0aGlzLnJldHJpZXZlKCckZGVsZWdhdGVzJywge30pLCBzdG9yZWQgPSBzdG9yYWdlW3R5cGVdOwogICAgICAgICAgICAgICAgaWYgKHN0b3JlZCkgZm9yICh2YXIgX3VpZCBpbiBzdG9yZWQpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcmVkW191aWRdLmZuID09IGZuICYmIHN0b3JlZFtfdWlkXS5tYXRjaCA9PSBtYXRjaCkgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIF90eXBlID0gdHlwZSwgX21hdGNoID0gbWF0Y2gsIF9mbiA9IGZuLCBfbWFwID0gbWFwW3R5cGVdIHx8IHt9OwogICAgICAgICAgICAgICAgdHlwZSA9IF9tYXAuYmFzZSB8fCBfdHlwZTsKCiAgICAgICAgICAgICAgICBtYXRjaCA9IGZ1bmN0aW9uKHRhcmdldCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTbGljay5tYXRjaCh0YXJnZXQsIF9tYXRjaCk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHZhciBlbGVtZW50RXZlbnQgPSBFbGVtZW50LkV2ZW50c1tfdHlwZV07CiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudEV2ZW50ICYmIGVsZW1lbnRFdmVudC5jb25kaXRpb24pewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX19tYXRjaCA9IG1hdGNoLCBjb25kaXRpb24gPSBlbGVtZW50RXZlbnQuY29uZGl0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGZ1bmN0aW9uKHRhcmdldCwgZXZlbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX21hdGNoKHRhcmdldCwgZXZlbnQpICYmIGNvbmRpdGlvbi5jYWxsKHRhcmdldCwgZXZlbnQsIHR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywgdWlkID0gU3RyaW5nLnVuaXF1ZUlEKCk7CiAgICAgICAgICAgICAgICB2YXIgZGVsZWdhdG9yID0gX21hcC5saXN0ZW4gPyBmdW5jdGlvbihldmVudCwgdGFyZ2V0KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQgJiYgZXZlbnQgJiYgZXZlbnQudGFyZ2V0KSB0YXJnZXQgPSBldmVudC50YXJnZXQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIF9tYXAubGlzdGVuKHNlbGYsIG1hdGNoLCBmbiwgZXZlbnQsIHRhcmdldCwgdWlkKTsKICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbihldmVudCwgdGFyZ2V0KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQgJiYgZXZlbnQgJiYgZXZlbnQudGFyZ2V0KSB0YXJnZXQgPSBldmVudC50YXJnZXQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIGJ1YmJsZVVwKHNlbGYsIG1hdGNoLCBmbiwgZXZlbnQsIHRhcmdldCk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGlmICghc3RvcmVkKSBzdG9yZWQgPSB7fTsKICAgICAgICAgICAgICAgIHN0b3JlZFt1aWRdID0gewogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDogX21hdGNoLAogICAgICAgICAgICAgICAgICAgICAgICBmbjogX2ZuLAogICAgICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0b3I6IGRlbGVnYXRvcgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHN0b3JhZ2VbX3R5cGVdID0gc3RvcmVkOwogICAgICAgICAgICAgICAgcmV0dXJuIGFkZEV2ZW50LmNhbGwodGhpcywgdHlwZSwgZGVsZWdhdG9yLCBfbWFwLmNhcHR1cmUpOwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZUV2ZW50OiBmdW5jdGlvbih0eXBlLCBtYXRjaCwgZm4sIF91aWQpewogICAgICAgICAgICAgICAgdmFyIHN0b3JhZ2UgPSB0aGlzLnJldHJpZXZlKCckZGVsZWdhdGVzJywge30pLCBzdG9yZWQgPSBzdG9yYWdlW3R5cGVdOwogICAgICAgICAgICAgICAgaWYgKCFzdG9yZWQpIHJldHVybiB0aGlzOwoKICAgICAgICAgICAgICAgIGlmIChfdWlkKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90eXBlID0gdHlwZSwgZGVsZWdhdG9yID0gc3RvcmVkW191aWRdLmRlbGVnYXRvciwgX21hcCA9IG1hcFt0eXBlXSB8fCB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IF9tYXAuYmFzZSB8fCBfdHlwZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9tYXAucmVtb3ZlKSBfbWFwLnJlbW92ZSh0aGlzLCBfdWlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN0b3JlZFtfdWlkXTsKICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVtfdHlwZV0gPSBzdG9yZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZW1vdmVFdmVudC5jYWxsKHRoaXMsIHR5cGUsIGRlbGVnYXRvcik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIF9fdWlkLCBzOwogICAgICAgICAgICAgICAgaWYgKGZuKSBmb3IgKF9fdWlkIGluIHN0b3JlZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBzdG9yZWRbX191aWRdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5tYXRjaCA9PSBtYXRjaCAmJiBzLmZuID09IGZuKSByZXR1cm4gZGVsZWdhdGlvbi5yZW1vdmVFdmVudC5jYWxsKHRoaXMsIHR5cGUsIG1hdGNoLCBmbiwgX191aWQpOwogICAgICAgICAgICAgICAgfSBlbHNlIGZvciAoX191aWQgaW4gc3RvcmVkKXsKICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHN0b3JlZFtfX3VpZF07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLm1hdGNoID09IG1hdGNoKSBkZWxlZ2F0aW9uLnJlbW92ZUV2ZW50LmNhbGwodGhpcywgdHlwZSwgbWF0Y2gsIHMuZm4sIF9fdWlkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn07CgpbRWxlbWVudCwgV2luZG93LCBEb2N1bWVudF0uaW52b2tlKCdpbXBsZW1lbnQnLCB7CiAgICAgICAgYWRkRXZlbnQ6IHJlbGF5KGFkZEV2ZW50LCBkZWxlZ2F0aW9uLmFkZEV2ZW50KSwKICAgICAgICByZW1vdmVFdmVudDogcmVsYXkocmVtb3ZlRXZlbnQsIGRlbGVnYXRpb24ucmVtb3ZlRXZlbnQpCn0pOwoKfSkoKTsKCgovKgotLS0KCm5hbWU6IEVsZW1lbnQuRGltZW5zaW9ucwoKZGVzY3JpcHRpb246IENvbnRhaW5zIG1ldGhvZHMgdG8gd29yayB3aXRoIHNpemUsIHNjcm9sbCwgb3IgcG9zaXRpb25pbmcgb2YgRWxlbWVudHMgYW5kIHRoZSB3aW5kb3cgb2JqZWN0LgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjcmVkaXRzOgogIC0gRWxlbWVudCBwb3NpdGlvbmluZyBiYXNlZCBvbiB0aGUgW3Fvb3hkb29dKGh0dHA6Ly9xb294ZG9vLm9yZy8pIGNvZGUgYW5kIHNtYXJ0IGJyb3dzZXIgZml4ZXMsIFtMR1BMIExpY2Vuc2VdKGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWwpLgogIC0gVmlld3BvcnQgZGltZW5zaW9ucyBiYXNlZCBvbiBbWVVJXShodHRwOi8vZGV2ZWxvcGVyLnlhaG9vLmNvbS95dWkvKSBjb2RlLCBbQlNEIExpY2Vuc2VdKGh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9saWNlbnNlLmh0bWwpLgoKcmVxdWlyZXM6IFtFbGVtZW50LCBFbGVtZW50LlN0eWxlXQoKcHJvdmlkZXM6IFtFbGVtZW50LkRpbWVuc2lvbnNdCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwKICAgICAgICBjaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwplbGVtZW50LnN0eWxlLmhlaWdodCA9ICcwJzsKZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7CnZhciBicm9rZW5PZmZzZXRQYXJlbnQgPSAoY2hpbGQub2Zmc2V0UGFyZW50ID09PSBlbGVtZW50KTsKZWxlbWVudCA9IGNoaWxkID0gbnVsbDsKCnZhciBpc09mZnNldCA9IGZ1bmN0aW9uKGVsKXsKICAgICAgICByZXR1cm4gc3R5bGVTdHJpbmcoZWwsICdwb3NpdGlvbicpICE9ICdzdGF0aWMnIHx8IGlzQm9keShlbCk7Cn07Cgp2YXIgaXNPZmZzZXRTdGF0aWMgPSBmdW5jdGlvbihlbCl7CiAgICAgICAgcmV0dXJuIGlzT2Zmc2V0KGVsKSB8fCAoL14oPzp0YWJsZXx0ZHx0aCkkL2kpLnRlc3QoZWwudGFnTmFtZSk7Cn07CgpFbGVtZW50LmltcGxlbWVudCh7CgogICAgICAgIHNjcm9sbFRvOiBmdW5jdGlvbih4LCB5KXsKICAgICAgICAgICAgICAgIGlmIChpc0JvZHkodGhpcykpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFdpbmRvdygpLnNjcm9sbFRvKHgsIHkpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxMZWZ0ID0geDsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb3AgPSB5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0U2l6ZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmIChpc0JvZHkodGhpcykpIHJldHVybiB0aGlzLmdldFdpbmRvdygpLmdldFNpemUoKTsKICAgICAgICAgICAgICAgIHJldHVybiB7eDogdGhpcy5vZmZzZXRXaWR0aCwgeTogdGhpcy5vZmZzZXRIZWlnaHR9OwogICAgICAgIH0sCgogICAgICAgIGdldFNjcm9sbFNpemU6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KHRoaXMpKSByZXR1cm4gdGhpcy5nZXRXaW5kb3coKS5nZXRTY3JvbGxTaXplKCk7CiAgICAgICAgICAgICAgICByZXR1cm4ge3g6IHRoaXMuc2Nyb2xsV2lkdGgsIHk6IHRoaXMuc2Nyb2xsSGVpZ2h0fTsKICAgICAgICB9LAoKICAgICAgICBnZXRTY3JvbGw6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KHRoaXMpKSByZXR1cm4gdGhpcy5nZXRXaW5kb3coKS5nZXRTY3JvbGwoKTsKICAgICAgICAgICAgICAgIHJldHVybiB7eDogdGhpcy5zY3JvbGxMZWZ0LCB5OiB0aGlzLnNjcm9sbFRvcH07CiAgICAgICAgfSwKCiAgICAgICAgZ2V0U2Nyb2xsczogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5wYXJlbnROb2RlLCBwb3NpdGlvbiA9IHt4OiAwLCB5OiAwfTsKICAgICAgICAgICAgICAgIHdoaWxlIChlbGVtZW50ICYmICFpc0JvZHkoZWxlbWVudCkpewogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54ICs9IGVsZW1lbnQuc2Nyb2xsTGVmdDsKICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueSArPSBlbGVtZW50LnNjcm9sbFRvcDsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjsKICAgICAgICB9LAoKICAgICAgICBnZXRPZmZzZXRQYXJlbnQ6IGJyb2tlbk9mZnNldFBhcmVudCA/IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXM7CiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KGVsZW1lbnQpIHx8IHN0eWxlU3RyaW5nKGVsZW1lbnQsICdwb3NpdGlvbicpID09ICdmaXhlZCcpIHJldHVybiBudWxsOwoKICAgICAgICAgICAgICAgIHZhciBpc09mZnNldENoZWNrID0gKHN0eWxlU3RyaW5nKGVsZW1lbnQsICdwb3NpdGlvbicpID09ICdzdGF0aWMnKSA/IGlzT2Zmc2V0U3RhdGljIDogaXNPZmZzZXQ7CiAgICAgICAgICAgICAgICB3aGlsZSAoKGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUpKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzT2Zmc2V0Q2hlY2soZWxlbWVudCkpIHJldHVybiBlbGVtZW50OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfSA6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXM7CiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KGVsZW1lbnQpIHx8IHN0eWxlU3RyaW5nKGVsZW1lbnQsICdwb3NpdGlvbicpID09ICdmaXhlZCcpIHJldHVybiBudWxsOwoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkge30KICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0sCgogICAgICAgIGdldE9mZnNldHM6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgIUJyb3dzZXIuUGxhdGZvcm0uaW9zKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvdW5kID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sID0gZG9jdW1lbnQuaWQodGhpcy5nZXREb2N1bWVudCgpLmRvY3VtZW50RWxlbWVudCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbFNjcm9sbCA9IGh0bWwuZ2V0U2Nyb2xsKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbVNjcm9sbHMgPSB0aGlzLmdldFNjcm9sbHMoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZpeGVkID0gKHN0eWxlU3RyaW5nKHRoaXMsICdwb3NpdGlvbicpID09ICdmaXhlZCcpOwoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBib3VuZC5sZWZ0LnRvSW50KCkgKyBlbGVtU2Nyb2xscy54ICsgKChpc0ZpeGVkKSA/IDAgOiBodG1sU2Nyb2xsLngpIC0gaHRtbC5jbGllbnRMZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IGJvdW5kLnRvcC50b0ludCgpICArIGVsZW1TY3JvbGxzLnkgKyAoKGlzRml4ZWQpID8gMCA6IGh0bWxTY3JvbGwueSkgLSBodG1sLmNsaWVudFRvcAogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpcywgcG9zaXRpb24gPSB7eDogMCwgeTogMH07CiAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KHRoaXMpKSByZXR1cm4gcG9zaXRpb247CgogICAgICAgICAgICAgICAgd2hpbGUgKGVsZW1lbnQgJiYgIWlzQm9keShlbGVtZW50KSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnggKz0gZWxlbWVudC5vZmZzZXRMZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi55ICs9IGVsZW1lbnQub2Zmc2V0VG9wOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEJyb3dzZXIuZmlyZWZveCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFib3JkZXJCb3goZWxlbWVudCkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueCArPSBsZWZ0Qm9yZGVyKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueSArPSB0b3BCb3JkZXIoZWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudCAmJiBzdHlsZVN0cmluZyhwYXJlbnQsICdvdmVyZmxvdycpICE9ICd2aXNpYmxlJyl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54ICs9IGxlZnRCb3JkZXIocGFyZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnkgKz0gdG9wQm9yZGVyKHBhcmVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQgIT0gdGhpcyAmJiBCcm93c2VyLnNhZmFyaSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueCArPSBsZWZ0Qm9yZGVyKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnkgKz0gdG9wQm9yZGVyKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoQnJvd3Nlci5maXJlZm94ICYmICFib3JkZXJCb3godGhpcykpewogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54IC09IGxlZnRCb3JkZXIodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnkgLT0gdG9wQm9yZGVyKHRoaXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uOwogICAgICAgIH0sCgogICAgICAgIGdldFBvc2l0aW9uOiBmdW5jdGlvbihyZWxhdGl2ZSl7CiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5nZXRPZmZzZXRzKCksCiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbCA9IHRoaXMuZ2V0U2Nyb2xscygpOwogICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gewogICAgICAgICAgICAgICAgICAgICAgICB4OiBvZmZzZXQueCAtIHNjcm9sbC54LAogICAgICAgICAgICAgICAgICAgICAgICB5OiBvZmZzZXQueSAtIHNjcm9sbC55CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZSAmJiAocmVsYXRpdmUgPSBkb2N1bWVudC5pZChyZWxhdGl2ZSkpKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbGF0aXZlUG9zaXRpb24gPSByZWxhdGl2ZS5nZXRQb3NpdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3g6IHBvc2l0aW9uLnggLSByZWxhdGl2ZVBvc2l0aW9uLnggLSBsZWZ0Qm9yZGVyKHJlbGF0aXZlKSwgeTogcG9zaXRpb24ueSAtIHJlbGF0aXZlUG9zaXRpb24ueSAtIHRvcEJvcmRlcihyZWxhdGl2ZSl9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uOwogICAgICAgIH0sCgogICAgICAgIGdldENvb3JkaW5hdGVzOiBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICAgICAgICAgIGlmIChpc0JvZHkodGhpcykpIHJldHVybiB0aGlzLmdldFdpbmRvdygpLmdldENvb3JkaW5hdGVzKCk7CiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLmdldFBvc2l0aW9uKGVsZW1lbnQpLAogICAgICAgICAgICAgICAgICAgICAgICBzaXplID0gdGhpcy5nZXRTaXplKCk7CiAgICAgICAgICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBwb3NpdGlvbi54LAogICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHBvc2l0aW9uLnksCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzaXplLngsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZS55CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgb2JqLnJpZ2h0ID0gb2JqLmxlZnQgKyBvYmoud2lkdGg7CiAgICAgICAgICAgICAgICBvYmouYm90dG9tID0gb2JqLnRvcCArIG9iai5oZWlnaHQ7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqOwogICAgICAgIH0sCgogICAgICAgIGNvbXB1dGVQb3NpdGlvbjogZnVuY3Rpb24ob2JqKXsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IG9iai54IC0gc3R5bGVOdW1iZXIodGhpcywgJ21hcmdpbi1sZWZ0JyksCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogb2JqLnkgLSBzdHlsZU51bWJlcih0aGlzLCAnbWFyZ2luLXRvcCcpCiAgICAgICAgICAgICAgICB9OwogICAgICAgIH0sCgogICAgICAgIHNldFBvc2l0aW9uOiBmdW5jdGlvbihvYmopewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3R5bGVzKHRoaXMuY29tcHV0ZVBvc2l0aW9uKG9iaikpOwogICAgICAgIH0KCn0pOwoKCltEb2N1bWVudCwgV2luZG93XS5pbnZva2UoJ2ltcGxlbWVudCcsIHsKCiAgICAgICAgZ2V0U2l6ZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBkb2MgPSBnZXRDb21wYXRFbGVtZW50KHRoaXMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHt4OiBkb2MuY2xpZW50V2lkdGgsIHk6IGRvYy5jbGllbnRIZWlnaHR9OwogICAgICAgIH0sCgogICAgICAgIGdldFNjcm9sbDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciB3aW4gPSB0aGlzLmdldFdpbmRvdygpLCBkb2MgPSBnZXRDb21wYXRFbGVtZW50KHRoaXMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHt4OiB3aW4ucGFnZVhPZmZzZXQgfHwgZG9jLnNjcm9sbExlZnQsIHk6IHdpbi5wYWdlWU9mZnNldCB8fCBkb2Muc2Nyb2xsVG9wfTsKICAgICAgICB9LAoKICAgICAgICBnZXRTY3JvbGxTaXplOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIGRvYyA9IGdldENvbXBhdEVsZW1lbnQodGhpcyksCiAgICAgICAgICAgICAgICAgICAgICAgIG1pbiA9IHRoaXMuZ2V0U2l6ZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy5nZXREb2N1bWVudCgpLmJvZHk7CgogICAgICAgICAgICAgICAgcmV0dXJuIHt4OiBNYXRoLm1heChkb2Muc2Nyb2xsV2lkdGgsIGJvZHkuc2Nyb2xsV2lkdGgsIG1pbi54KSwgeTogTWF0aC5tYXgoZG9jLnNjcm9sbEhlaWdodCwgYm9keS5zY3JvbGxIZWlnaHQsIG1pbi55KX07CiAgICAgICAgfSwKCiAgICAgICAgZ2V0UG9zaXRpb246IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4ge3g6IDAsIHk6IDB9OwogICAgICAgIH0sCgogICAgICAgIGdldENvb3JkaW5hdGVzOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHNpemUgPSB0aGlzLmdldFNpemUoKTsKICAgICAgICAgICAgICAgIHJldHVybiB7dG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IHNpemUueSwgcmlnaHQ6IHNpemUueCwgaGVpZ2h0OiBzaXplLnksIHdpZHRoOiBzaXplLnh9OwogICAgICAgIH0KCn0pOwoKLy8gcHJpdmF0ZSBtZXRob2RzCgp2YXIgc3R5bGVTdHJpbmcgPSBFbGVtZW50LmdldENvbXB1dGVkU3R5bGU7CgpmdW5jdGlvbiBzdHlsZU51bWJlcihlbGVtZW50LCBzdHlsZSl7CiAgICAgICAgcmV0dXJuIHN0eWxlU3RyaW5nKGVsZW1lbnQsIHN0eWxlKS50b0ludCgpIHx8IDA7Cn0KCmZ1bmN0aW9uIGJvcmRlckJveChlbGVtZW50KXsKICAgICAgICByZXR1cm4gc3R5bGVTdHJpbmcoZWxlbWVudCwgJy1tb3otYm94LXNpemluZycpID09ICdib3JkZXItYm94JzsKfQoKZnVuY3Rpb24gdG9wQm9yZGVyKGVsZW1lbnQpewogICAgICAgIHJldHVybiBzdHlsZU51bWJlcihlbGVtZW50LCAnYm9yZGVyLXRvcC13aWR0aCcpOwp9CgpmdW5jdGlvbiBsZWZ0Qm9yZGVyKGVsZW1lbnQpewogICAgICAgIHJldHVybiBzdHlsZU51bWJlcihlbGVtZW50LCAnYm9yZGVyLWxlZnQtd2lkdGgnKTsKfQoKZnVuY3Rpb24gaXNCb2R5KGVsZW1lbnQpewogICAgICAgIHJldHVybiAoL14oPzpib2R5fGh0bWwpJC9pKS50ZXN0KGVsZW1lbnQudGFnTmFtZSk7Cn0KCmZ1bmN0aW9uIGdldENvbXBhdEVsZW1lbnQoZWxlbWVudCl7CiAgICAgICAgdmFyIGRvYyA9IGVsZW1lbnQuZ2V0RG9jdW1lbnQoKTsKICAgICAgICByZXR1cm4gKCFkb2MuY29tcGF0TW9kZSB8fCBkb2MuY29tcGF0TW9kZSA9PSAnQ1NTMUNvbXBhdCcpID8gZG9jLmh0bWwgOiBkb2MuYm9keTsKfQoKfSkoKTsKCi8vYWxpYXNlcwpFbGVtZW50LmFsaWFzKHtwb3NpdGlvbjogJ3NldFBvc2l0aW9uJ30pOyAvL2NvbXBhdGFiaWxpdHkKCltXaW5kb3csIERvY3VtZW50LCBFbGVtZW50XS5pbnZva2UoJ2ltcGxlbWVudCcsIHsKCiAgICAgICAgZ2V0SGVpZ2h0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2l6ZSgpLnk7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0V2lkdGg6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTaXplKCkueDsKICAgICAgICB9LAoKICAgICAgICBnZXRTY3JvbGxUb3A6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGwoKS55OwogICAgICAgIH0sCgogICAgICAgIGdldFNjcm9sbExlZnQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGwoKS54OwogICAgICAgIH0sCgogICAgICAgIGdldFNjcm9sbEhlaWdodDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbFNpemUoKS55OwogICAgICAgIH0sCgogICAgICAgIGdldFNjcm9sbFdpZHRoOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsU2l6ZSgpLng7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0VG9wOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UG9zaXRpb24oKS55OwogICAgICAgIH0sCgogICAgICAgIGdldExlZnQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQb3NpdGlvbigpLng7CiAgICAgICAgfQoKfSk7CgoKLyoKLS0tCgpuYW1lOiBGeAoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBiYXNpYyBhbmltYXRpb24gbG9naWMgdG8gYmUgZXh0ZW5kZWQgYnkgYWxsIG90aGVyIEZ4IENsYXNzZXMuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbQ2hhaW4sIEV2ZW50cywgT3B0aW9uc10KCnByb3ZpZGVzOiBGeAoKLi4uCiovCgooZnVuY3Rpb24oKXsKCnZhciBGeCA9IHRoaXMuRnggPSBuZXcgQ2xhc3MoewoKICAgICAgICBJbXBsZW1lbnRzOiBbQ2hhaW4sIEV2ZW50cywgT3B0aW9uc10sCgogICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgIC8qCiAgICAgICAgICAgICAgICBvblN0YXJ0OiBuaWwsCiAgICAgICAgICAgICAgICBvbkNhbmNlbDogbmlsLAogICAgICAgICAgICAgICAgb25Db21wbGV0ZTogbmlsLAogICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGZwczogNjAsCiAgICAgICAgICAgICAgICB1bml0OiBmYWxzZSwKICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsCiAgICAgICAgICAgICAgICBmcmFtZXM6IG51bGwsCiAgICAgICAgICAgICAgICBmcmFtZVNraXA6IHRydWUsCiAgICAgICAgICAgICAgICBsaW5rOiAnaWdub3JlJwogICAgICAgIH0sCgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpewogICAgICAgICAgICAgICAgdGhpcy5zdWJqZWN0ID0gdGhpcy5zdWJqZWN0IHx8IHRoaXM7CiAgICAgICAgICAgICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0VHJhbnNpdGlvbjogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihwKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0oTWF0aC5jb3MoTWF0aC5QSSAqIHApIC0gMSkgLyAyOwogICAgICAgICAgICAgICAgfTsKICAgICAgICB9LAoKICAgICAgICBzdGVwOiBmdW5jdGlvbihub3cpewogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5mcmFtZVNraXApewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZiA9ICh0aGlzLnRpbWUgIT0gbnVsbCkgPyAobm93IC0gdGhpcy50aW1lKSA6IDAsIGZyYW1lcyA9IGRpZmYgLyB0aGlzLmZyYW1lSW50ZXJ2YWw7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGltZSA9IG5vdzsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmFtZSArPSBmcmFtZXM7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lKys7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWUgPCB0aGlzLmZyYW1lcyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IHRoaXMudHJhbnNpdGlvbih0aGlzLmZyYW1lIC8gdGhpcy5mcmFtZXMpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldCh0aGlzLmNvbXB1dGUodGhpcy5mcm9tLCB0aGlzLnRvLCBkZWx0YSkpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmFtZSA9IHRoaXMuZnJhbWVzOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldCh0aGlzLmNvbXB1dGUodGhpcy5mcm9tLCB0aGlzLnRvLCAxKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHNldDogZnVuY3Rpb24obm93KXsKICAgICAgICAgICAgICAgIHJldHVybiBub3c7CiAgICAgICAgfSwKCiAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKICAgICAgICAgICAgICAgIHJldHVybiBGeC5jb21wdXRlKGZyb20sIHRvLCBkZWx0YSk7CiAgICAgICAgfSwKCiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKCkpIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLm9wdGlvbnMubGluayl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NhbmNlbCc6IHRoaXMuY2FuY2VsKCk7IHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjaGFpbic6IHRoaXMuY2hhaW4odGhpcy5jYWxsZXIucGFzcyhhcmd1bWVudHMsIHRoaXMpKTsgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0sCgogICAgICAgIHN0YXJ0OiBmdW5jdGlvbihmcm9tLCB0byl7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2soZnJvbSwgdG8pKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHRoaXMuZnJvbSA9IGZyb207CiAgICAgICAgICAgICAgICB0aGlzLnRvID0gdG87CiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lID0gKHRoaXMub3B0aW9ucy5mcmFtZVNraXApID8gMCA6IC0xOwogICAgICAgICAgICAgICAgdGhpcy50aW1lID0gbnVsbDsKICAgICAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbiA9IHRoaXMuZ2V0VHJhbnNpdGlvbigpOwogICAgICAgICAgICAgICAgdmFyIGZyYW1lcyA9IHRoaXMub3B0aW9ucy5mcmFtZXMsIGZwcyA9IHRoaXMub3B0aW9ucy5mcHMsIGR1cmF0aW9uID0gdGhpcy5vcHRpb25zLmR1cmF0aW9uOwogICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IEZ4LkR1cmF0aW9uc1tkdXJhdGlvbl0gfHwgZHVyYXRpb24udG9JbnQoKTsKICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVJbnRlcnZhbCA9IDEwMDAgLyBmcHM7CiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lcyA9IGZyYW1lcyB8fCBNYXRoLnJvdW5kKHRoaXMuZHVyYXRpb24gLyB0aGlzLmZyYW1lSW50ZXJ2YWwpOwogICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3N0YXJ0JywgdGhpcy5zdWJqZWN0KTsKICAgICAgICAgICAgICAgIHB1c2hJbnN0YW5jZS5jYWxsKHRoaXMsIGZwcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBzdG9wOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nKCkpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWUgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICBwdWxsSW5zdGFuY2UuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMuZnBzKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWVzID09IHRoaXMuZnJhbWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdjb21wbGV0ZScsIHRoaXMuc3ViamVjdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNhbGxDaGFpbigpKSB0aGlzLmZpcmVFdmVudCgnY2hhaW5Db21wbGV0ZScsIHRoaXMuc3ViamVjdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3N0b3AnLCB0aGlzLnN1YmplY3QpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmcoKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGltZSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIHB1bGxJbnN0YW5jZS5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucy5mcHMpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lID0gdGhpcy5mcmFtZXM7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdjYW5jZWwnLCB0aGlzLnN1YmplY3QpLmNsZWFyQ2hhaW4oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHBhdXNlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nKCkpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWUgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICBwdWxsSW5zdGFuY2UuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMuZnBzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlc3VtZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmICgodGhpcy5mcmFtZSA8IHRoaXMuZnJhbWVzKSAmJiAhdGhpcy5pc1J1bm5pbmcoKSkgcHVzaEluc3RhbmNlLmNhbGwodGhpcywgdGhpcy5vcHRpb25zLmZwcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBpc1J1bm5pbmc6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IGluc3RhbmNlc1t0aGlzLm9wdGlvbnMuZnBzXTsKICAgICAgICAgICAgICAgIHJldHVybiBsaXN0ICYmIGxpc3QuY29udGFpbnModGhpcyk7CiAgICAgICAgfQoKfSk7CgpGeC5jb21wdXRlID0gZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKICAgICAgICByZXR1cm4gKHRvIC0gZnJvbSkgKiBkZWx0YSArIGZyb207Cn07CgpGeC5EdXJhdGlvbnMgPSB7J3Nob3J0JzogMjUwLCAnbm9ybWFsJzogNTAwLCAnbG9uZyc6IDEwMDB9OwoKLy8gZ2xvYmFsIHRpbWVycwoKdmFyIGluc3RhbmNlcyA9IHt9LCB0aW1lcnMgPSB7fTsKCnZhciBsb29wID0gZnVuY3Rpb24oKXsKICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTsKICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGktLTspewogICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpc1tpXTsKICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkgaW5zdGFuY2Uuc3RlcChub3cpOwogICAgICAgIH0KfTsKCnZhciBwdXNoSW5zdGFuY2UgPSBmdW5jdGlvbihmcHMpewogICAgICAgIHZhciBsaXN0ID0gaW5zdGFuY2VzW2Zwc10gfHwgKGluc3RhbmNlc1tmcHNdID0gW10pOwogICAgICAgIGxpc3QucHVzaCh0aGlzKTsKICAgICAgICBpZiAoIXRpbWVyc1tmcHNdKSB0aW1lcnNbZnBzXSA9IGxvb3AucGVyaW9kaWNhbChNYXRoLnJvdW5kKDEwMDAgLyBmcHMpLCBsaXN0KTsKfTsKCnZhciBwdWxsSW5zdGFuY2UgPSBmdW5jdGlvbihmcHMpewogICAgICAgIHZhciBsaXN0ID0gaW5zdGFuY2VzW2Zwc107CiAgICAgICAgaWYgKGxpc3QpewogICAgICAgICAgICAgICAgbGlzdC5lcmFzZSh0aGlzKTsKICAgICAgICAgICAgICAgIGlmICghbGlzdC5sZW5ndGggJiYgdGltZXJzW2Zwc10pewogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaW5zdGFuY2VzW2Zwc107CiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyc1tmcHNdID0gY2xlYXJJbnRlcnZhbCh0aW1lcnNbZnBzXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQp9OwoKfSkoKTsKCgovKgotLS0KCm5hbWU6IEZ4LkNTUwoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBDU1MgYW5pbWF0aW9uIGxvZ2ljLiBVc2VkIGJ5IEZ4LlR3ZWVuLCBGeC5Nb3JwaCwgRnguRWxlbWVudHMuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbRngsIEVsZW1lbnQuU3R5bGVdCgpwcm92aWRlczogRnguQ1NTCgouLi4KKi8KCkZ4LkNTUyA9IG5ldyBDbGFzcyh7CgogICAgICAgIEV4dGVuZHM6IEZ4LAoKICAgICAgICAvL3ByZXBhcmVzIHRoZSBiYXNlIGZyb20vdG8gb2JqZWN0CgogICAgICAgIHByZXBhcmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZXMpewogICAgICAgICAgICAgICAgdmFsdWVzID0gQXJyYXkuZnJvbSh2YWx1ZXMpOwogICAgICAgICAgICAgICAgaWYgKHZhbHVlc1sxXSA9PSBudWxsKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzWzFdID0gdmFsdWVzWzBdOwogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbMF0gPSBlbGVtZW50LmdldFN0eWxlKHByb3BlcnR5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSB2YWx1ZXMubWFwKHRoaXMucGFyc2UpOwogICAgICAgICAgICAgICAgcmV0dXJuIHtmcm9tOiBwYXJzZWRbMF0sIHRvOiBwYXJzZWRbMV19OwogICAgICAgIH0sCgogICAgICAgIC8vcGFyc2VzIGEgdmFsdWUgaW50byBhbiBhcnJheQoKICAgICAgICBwYXJzZTogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgdmFsdWUgPSBGdW5jdGlvbi5mcm9tKHZhbHVlKSgpOwogICAgICAgICAgICAgICAgdmFsdWUgPSAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSA/IHZhbHVlLnNwbGl0KCcgJykgOiBBcnJheS5mcm9tKHZhbHVlKTsKICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoZnVuY3Rpb24odmFsKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gU3RyaW5nKHZhbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZWFjaChGeC5DU1MuUGFyc2VycywgZnVuY3Rpb24ocGFyc2VyLCBrZXkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCkgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZXIucGFyc2UodmFsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkIHx8IHBhcnNlZCA9PT0gMCkgZm91bmQgPSB7dmFsdWU6IHBhcnNlZCwgcGFyc2VyOiBwYXJzZXJ9OwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBmb3VuZCB8fCB7dmFsdWU6IHZhbCwgcGFyc2VyOiBGeC5DU1MuUGFyc2Vycy5TdHJpbmd9OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICAvL2NvbXB1dGVzIGJ5IGEgZnJvbSBhbmQgdG8gcHJlcGFyZWQgb2JqZWN0cywgdXNpbmcgdGhlaXIgcGFyc2Vycy4KCiAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKICAgICAgICAgICAgICAgIHZhciBjb21wdXRlZCA9IFtdOwogICAgICAgICAgICAgICAgKE1hdGgubWluKGZyb20ubGVuZ3RoLCB0by5sZW5ndGgpKS50aW1lcyhmdW5jdGlvbihpKXsKICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQucHVzaCh7dmFsdWU6IGZyb21baV0ucGFyc2VyLmNvbXB1dGUoZnJvbVtpXS52YWx1ZSwgdG9baV0udmFsdWUsIGRlbHRhKSwgcGFyc2VyOiBmcm9tW2ldLnBhcnNlcn0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjb21wdXRlZC4kZmFtaWx5ID0gRnVuY3Rpb24uZnJvbSgnZng6Y3NzOnZhbHVlJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gY29tcHV0ZWQ7CiAgICAgICAgfSwKCiAgICAgICAgLy9zZXJ2ZXMgdGhlIHZhbHVlIGFzIHNldHRhYmxlCgogICAgICAgIHNlcnZlOiBmdW5jdGlvbih2YWx1ZSwgdW5pdCl7CiAgICAgICAgICAgICAgICBpZiAodHlwZU9mKHZhbHVlKSAhPSAnZng6Y3NzOnZhbHVlJykgdmFsdWUgPSB0aGlzLnBhcnNlKHZhbHVlKTsKICAgICAgICAgICAgICAgIHZhciByZXR1cm5lZCA9IFtdOwogICAgICAgICAgICAgICAgdmFsdWUuZWFjaChmdW5jdGlvbihiaXQpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5lZCA9IHJldHVybmVkLmNvbmNhdChiaXQucGFyc2VyLnNlcnZlKGJpdC52YWx1ZSwgdW5pdCkpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuZWQ7CiAgICAgICAgfSwKCiAgICAgICAgLy9yZW5kZXJzIHRoZSBjaGFuZ2UgdG8gYW4gZWxlbWVudAoKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCl7CiAgICAgICAgICAgICAgICBlbGVtZW50LnNldFN0eWxlKHByb3BlcnR5LCB0aGlzLnNlcnZlKHZhbHVlLCB1bml0KSk7CiAgICAgICAgfSwKCiAgICAgICAgLy9zZWFyY2hlcyBpbnNpZGUgdGhlIHBhZ2UgY3NzIHRvIGZpbmQgdGhlIHZhbHVlcyBmb3IgYSBzZWxlY3RvcgoKICAgICAgICBzZWFyY2g6IGZ1bmN0aW9uKHNlbGVjdG9yKXsKICAgICAgICAgICAgICAgIGlmIChGeC5DU1MuQ2FjaGVbc2VsZWN0b3JdKSByZXR1cm4gRnguQ1NTLkNhY2hlW3NlbGVjdG9yXTsKICAgICAgICAgICAgICAgIHZhciB0byA9IHt9LCBzZWxlY3RvclRlc3QgPSBuZXcgUmVnRXhwKCdeJyArIHNlbGVjdG9yLmVzY2FwZVJlZ0V4cCgpICsgJyQnKTsKICAgICAgICAgICAgICAgIEFycmF5LmVhY2goZG9jdW1lbnQuc3R5bGVTaGVldHMsIGZ1bmN0aW9uKHNoZWV0LCBqKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhyZWYgPSBzaGVldC5ocmVmOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaHJlZiAmJiBocmVmLmNvbnRhaW5zKCc6Ly8nKSAmJiAhaHJlZi5jb250YWlucyhkb2N1bWVudC5kb21haW4pKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBydWxlcyA9IHNoZWV0LnJ1bGVzIHx8IHNoZWV0LmNzc1J1bGVzOwogICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5lYWNoKHJ1bGVzLCBmdW5jdGlvbihydWxlLCBpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJ1bGUuc3R5bGUpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3JUZXh0ID0gKHJ1bGUuc2VsZWN0b3JUZXh0KSA/IHJ1bGUuc2VsZWN0b3JUZXh0LnJlcGxhY2UoL15cdysvLCBmdW5jdGlvbihtKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0b3JUZXh0IHx8ICFzZWxlY3RvclRlc3QudGVzdChzZWxlY3RvclRleHQpKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmVhY2goRWxlbWVudC5TdHlsZXMsIGZ1bmN0aW9uKHZhbHVlLCBzdHlsZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJ1bGUuc3R5bGVbc3R5bGVdIHx8IEVsZW1lbnQuU2hvcnRTdHlsZXNbc3R5bGVdKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFN0cmluZyhydWxlLnN0eWxlW3N0eWxlXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b1tzdHlsZV0gPSAoKC9ecmdiLykudGVzdCh2YWx1ZSkpID8gdmFsdWUucmdiVG9IZXgoKSA6IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIEZ4LkNTUy5DYWNoZVtzZWxlY3Rvcl0gPSB0bzsKICAgICAgICB9Cgp9KTsKCkZ4LkNTUy5DYWNoZSA9IHt9OwoKRnguQ1NTLlBhcnNlcnMgPSB7CgogICAgICAgIENvbG9yOiB7CiAgICAgICAgICAgICAgICBwYXJzZTogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubWF0Y2goL14jWzAtOWEtZl17Myw2fSQvaSkpIHJldHVybiB2YWx1ZS5oZXhUb1JnYih0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgodmFsdWUgPSB2YWx1ZS5tYXRjaCgvKFxkKyksXHMqKFxkKyksXHMqKFxkKykvKSkpID8gW3ZhbHVlWzFdLCB2YWx1ZVsyXSwgdmFsdWVbM11dIDogZmFsc2U7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyb20ubWFwKGZ1bmN0aW9uKHZhbHVlLCBpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChGeC5jb21wdXRlKGZyb21baV0sIHRvW2ldLCBkZWx0YSkpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzZXJ2ZTogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKE51bWJlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgTnVtYmVyOiB7CiAgICAgICAgICAgICAgICBwYXJzZTogcGFyc2VGbG9hdCwKICAgICAgICAgICAgICAgIGNvbXB1dGU6IEZ4LmNvbXB1dGUsCiAgICAgICAgICAgICAgICBzZXJ2ZTogZnVuY3Rpb24odmFsdWUsIHVuaXQpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHVuaXQpID8gdmFsdWUgKyB1bml0IDogdmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgU3RyaW5nOiB7CiAgICAgICAgICAgICAgICBwYXJzZTogRnVuY3Rpb24uZnJvbShmYWxzZSksCiAgICAgICAgICAgICAgICBjb21wdXRlOiBmdW5jdGlvbih6ZXJvLCBvbmUpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb25lOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHNlcnZlOiBmdW5jdGlvbih6ZXJvKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHplcm87CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQoKfTsKCgoKCi8qCi0tLQoKbmFtZTogRnguVHdlZW4KCmRlc2NyaXB0aW9uOiBGb3JtZXJseSBGeC5TdHlsZSwgZWZmZWN0IHRvIHRyYW5zaXRpb24gYW55IENTUyBwcm9wZXJ0eSBmb3IgYW4gZWxlbWVudC4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IEZ4LkNTUwoKcHJvdmlkZXM6IFtGeC5Ud2VlbiwgRWxlbWVudC5mYWRlLCBFbGVtZW50LmhpZ2hsaWdodF0KCi4uLgoqLwoKRnguVHdlZW4gPSBuZXcgQ2xhc3MoewoKICAgICAgICBFeHRlbmRzOiBGeC5DU1MsCgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpewogICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5zdWJqZWN0ID0gZG9jdW1lbnQuaWQoZWxlbWVudCk7CiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudChvcHRpb25zKTsKICAgICAgICB9LAoKICAgICAgICBzZXQ6IGZ1bmN0aW9uKHByb3BlcnR5LCBub3cpewogICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSl7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IHByb3BlcnR5OwogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IHRoaXMucHJvcGVydHkgfHwgdGhpcy5vcHRpb25zLnByb3BlcnR5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIodGhpcy5lbGVtZW50LCBwcm9wZXJ0eSwgbm93LCB0aGlzLm9wdGlvbnMudW5pdCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBzdGFydDogZnVuY3Rpb24ocHJvcGVydHksIGZyb20sIHRvKXsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVjayhwcm9wZXJ0eSwgZnJvbSwgdG8pKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkuZmxhdHRlbihhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IHRoaXMub3B0aW9ucy5wcm9wZXJ0eSB8fCBhcmdzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gdGhpcy5wcmVwYXJlKHRoaXMuZWxlbWVudCwgdGhpcy5wcm9wZXJ0eSwgYXJncyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQocGFyc2VkLmZyb20sIHBhcnNlZC50byk7CiAgICAgICAgfQoKfSk7CgpFbGVtZW50LlByb3BlcnRpZXMudHdlZW4gPSB7CgogICAgICAgIHNldDogZnVuY3Rpb24ob3B0aW9ucyl7CiAgICAgICAgICAgICAgICB0aGlzLmdldCgndHdlZW4nKS5jYW5jZWwoKS5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHR3ZWVuID0gdGhpcy5yZXRyaWV2ZSgndHdlZW4nKTsKICAgICAgICAgICAgICAgIGlmICghdHdlZW4pewogICAgICAgICAgICAgICAgICAgICAgICB0d2VlbiA9IG5ldyBGeC5Ud2Vlbih0aGlzLCB7bGluazogJ2NhbmNlbCd9KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZSgndHdlZW4nLCB0d2Vlbik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdHdlZW47CiAgICAgICAgfQoKfTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCiAgICAgICAgdHdlZW46IGZ1bmN0aW9uKHByb3BlcnR5LCBmcm9tLCB0byl7CiAgICAgICAgICAgICAgICB0aGlzLmdldCgndHdlZW4nKS5zdGFydChwcm9wZXJ0eSwgZnJvbSwgdG8pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZmFkZTogZnVuY3Rpb24oaG93KXsKICAgICAgICAgICAgICAgIHZhciBmYWRlID0gdGhpcy5nZXQoJ3R3ZWVuJyksIG1ldGhvZCwgdG8sIHRvZ2dsZTsKICAgICAgICAgICAgICAgIGlmIChob3cgPT0gbnVsbCkgaG93ID0gJ3RvZ2dsZSc7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGhvdyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2luJzogbWV0aG9kID0gJ3N0YXJ0JzsgdG8gPSAxOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb3V0JzogbWV0aG9kID0gJ3N0YXJ0JzsgdG8gPSAwOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2hvdyc6IG1ldGhvZCA9ICdzZXQnOyB0byA9IDE7IGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdoaWRlJzogbWV0aG9kID0gJ3NldCc7IHRvID0gMDsgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RvZ2dsZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWcgPSB0aGlzLnJldHJpZXZlKCdmYWRlOmZsYWcnLCB0aGlzLmdldFN0eWxlKCdvcGFjaXR5JykgPT0gMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gJ3N0YXJ0JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byA9IGZsYWcgPyAwIDogMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JlKCdmYWRlOmZsYWcnLCAhZmxhZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG1ldGhvZCA9ICdzdGFydCc7IHRvID0gaG93OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCF0b2dnbGUpIHRoaXMuZWxpbWluYXRlKCdmYWRlOmZsYWcnKTsKICAgICAgICAgICAgICAgIGZhZGVbbWV0aG9kXSgnb3BhY2l0eScsIHRvKTsKICAgICAgICAgICAgICAgIGlmIChtZXRob2QgPT0gJ3NldCcgfHwgdG8gIT0gMCkgdGhpcy5zZXRTdHlsZSgndmlzaWJpbGl0eScsIHRvID09IDAgPyAnaGlkZGVuJyA6ICd2aXNpYmxlJyk7CiAgICAgICAgICAgICAgICBlbHNlIGZhZGUuY2hhaW4oZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldFN0eWxlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxDaGFpbigpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBoaWdobGlnaHQ6IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpewogICAgICAgICAgICAgICAgaWYgKCFlbmQpewogICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLnJldHJpZXZlKCdoaWdobGlnaHQ6b3JpZ2luYWwnLCB0aGlzLmdldFN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJykpOwogICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSAoZW5kID09ICd0cmFuc3BhcmVudCcpID8gJyNmZmYnIDogZW5kOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHR3ZWVuID0gdGhpcy5nZXQoJ3R3ZWVuJyk7CiAgICAgICAgICAgICAgICB0d2Vlbi5zdGFydCgnYmFja2dyb3VuZC1jb2xvcicsIHN0YXJ0IHx8ICcjZmZmZjg4JywgZW5kKS5jaGFpbihmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgdGhpcy5yZXRyaWV2ZSgnaGlnaGxpZ2h0Om9yaWdpbmFsJykpOwogICAgICAgICAgICAgICAgICAgICAgICB0d2Vlbi5jYWxsQ2hhaW4oKTsKICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCgovKgotLS0KCm5hbWU6IEZ4Lk1vcnBoCgpkZXNjcmlwdGlvbjogRm9ybWVybHkgRnguU3R5bGVzLCBlZmZlY3QgdG8gdHJhbnNpdGlvbiBhbnkgbnVtYmVyIG9mIENTUyBwcm9wZXJ0aWVzIGZvciBhbiBlbGVtZW50IHVzaW5nIGFuIG9iamVjdCBvZiBydWxlcywgb3IgQ1NTIGJhc2VkIHNlbGVjdG9yIHJ1bGVzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogRnguQ1NTCgpwcm92aWRlczogRnguTW9ycGgKCi4uLgoqLwoKRnguTW9ycGggPSBuZXcgQ2xhc3MoewoKICAgICAgICBFeHRlbmRzOiBGeC5DU1MsCgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpewogICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5zdWJqZWN0ID0gZG9jdW1lbnQuaWQoZWxlbWVudCk7CiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudChvcHRpb25zKTsKICAgICAgICB9LAoKICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5vdyl7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5vdyA9PSAnc3RyaW5nJykgbm93ID0gdGhpcy5zZWFyY2gobm93KTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gbm93KSB0aGlzLnJlbmRlcih0aGlzLmVsZW1lbnQsIHAsIG5vd1twXSwgdGhpcy5vcHRpb25zLnVuaXQpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKICAgICAgICAgICAgICAgIHZhciBub3cgPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gZnJvbSkgbm93W3BdID0gdGhpcy5wYXJlbnQoZnJvbVtwXSwgdG9bcF0sIGRlbHRhKTsKICAgICAgICAgICAgICAgIHJldHVybiBub3c7CiAgICAgICAgfSwKCiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKHByb3BlcnRpZXMpewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrKHByb3BlcnRpZXMpKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydGllcyA9PSAnc3RyaW5nJykgcHJvcGVydGllcyA9IHRoaXMuc2VhcmNoKHByb3BlcnRpZXMpOwogICAgICAgICAgICAgICAgdmFyIGZyb20gPSB7fSwgdG8gPSB7fTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcHJvcGVydGllcyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSB0aGlzLnByZXBhcmUodGhpcy5lbGVtZW50LCBwLCBwcm9wZXJ0aWVzW3BdKTsKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVtwXSA9IHBhcnNlZC5mcm9tOwogICAgICAgICAgICAgICAgICAgICAgICB0b1twXSA9IHBhcnNlZC50bzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudChmcm9tLCB0byk7CiAgICAgICAgfQoKfSk7CgpFbGVtZW50LlByb3BlcnRpZXMubW9ycGggPSB7CgogICAgICAgIHNldDogZnVuY3Rpb24ob3B0aW9ucyl7CiAgICAgICAgICAgICAgICB0aGlzLmdldCgnbW9ycGgnKS5jYW5jZWwoKS5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIG1vcnBoID0gdGhpcy5yZXRyaWV2ZSgnbW9ycGgnKTsKICAgICAgICAgICAgICAgIGlmICghbW9ycGgpewogICAgICAgICAgICAgICAgICAgICAgICBtb3JwaCA9IG5ldyBGeC5Nb3JwaCh0aGlzLCB7bGluazogJ2NhbmNlbCd9KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZSgnbW9ycGgnLCBtb3JwaCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbW9ycGg7CiAgICAgICAgfQoKfTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCiAgICAgICAgbW9ycGg6IGZ1bmN0aW9uKHByb3BzKXsKICAgICAgICAgICAgICAgIHRoaXMuZ2V0KCdtb3JwaCcpLnN0YXJ0KHByb3BzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKCi8qCi0tLQoKbmFtZTogRnguVHJhbnNpdGlvbnMKCmRlc2NyaXB0aW9uOiBDb250YWlucyBhIHNldCBvZiBhZHZhbmNlZCB0cmFuc2l0aW9ucyB0byBiZSB1c2VkIHdpdGggYW55IG9mIHRoZSBGeCBDbGFzc2VzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjcmVkaXRzOgogIC0gRWFzaW5nIEVxdWF0aW9ucyBieSBSb2JlcnQgUGVubmVyLCA8aHR0cDovL3d3dy5yb2JlcnRwZW5uZXIuY29tL2Vhc2luZy8+LCBtb2RpZmllZCBhbmQgb3B0aW1pemVkIHRvIGJlIHVzZWQgd2l0aCBNb29Ub29scy4KCnJlcXVpcmVzOiBGeAoKcHJvdmlkZXM6IEZ4LlRyYW5zaXRpb25zCgouLi4KKi8KCkZ4LmltcGxlbWVudCh7CgogICAgICAgIGdldFRyYW5zaXRpb246IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgdHJhbnMgPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbiB8fCBGeC5UcmFuc2l0aW9ucy5TaW5lLmVhc2VJbk91dDsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdHJhbnMgPT0gJ3N0cmluZycpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHRyYW5zLnNwbGl0KCc6Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zID0gRnguVHJhbnNpdGlvbnM7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zID0gdHJhbnNbZGF0YVswXV0gfHwgdHJhbnNbZGF0YVswXS5jYXBpdGFsaXplKCldOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVsxXSkgdHJhbnMgPSB0cmFuc1snZWFzZScgKyBkYXRhWzFdLmNhcGl0YWxpemUoKSArIChkYXRhWzJdID8gZGF0YVsyXS5jYXBpdGFsaXplKCkgOiAnJyldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zOwogICAgICAgIH0KCn0pOwoKRnguVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHRyYW5zaXRpb24sIHBhcmFtcyl7CiAgICAgICAgcGFyYW1zID0gQXJyYXkuZnJvbShwYXJhbXMpOwogICAgICAgIHZhciBlYXNlSW4gPSBmdW5jdGlvbihwb3MpewogICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zaXRpb24ocG9zLCBwYXJhbXMpOwogICAgICAgIH07CiAgICAgICAgcmV0dXJuIE9iamVjdC5hcHBlbmQoZWFzZUluLCB7CiAgICAgICAgICAgICAgICBlYXNlSW46IGVhc2VJbiwKICAgICAgICAgICAgICAgIGVhc2VPdXQ6IGZ1bmN0aW9uKHBvcyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxIC0gdHJhbnNpdGlvbigxIC0gcG9zLCBwYXJhbXMpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVhc2VJbk91dDogZnVuY3Rpb24ocG9zKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChwb3MgPD0gMC41ID8gdHJhbnNpdGlvbigyICogcG9zLCBwYXJhbXMpIDogKDIgLSB0cmFuc2l0aW9uKDIgKiAoMSAtIHBvcyksIHBhcmFtcykpKSAvIDI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfSk7Cn07CgpGeC5UcmFuc2l0aW9ucyA9IHsKCiAgICAgICAgbGluZWFyOiBmdW5jdGlvbih6ZXJvKXsKICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvOwogICAgICAgIH0KCn07CgoKCkZ4LlRyYW5zaXRpb25zLmV4dGVuZCA9IGZ1bmN0aW9uKHRyYW5zaXRpb25zKXsKICAgICAgICBmb3IgKHZhciB0cmFuc2l0aW9uIGluIHRyYW5zaXRpb25zKSBGeC5UcmFuc2l0aW9uc1t0cmFuc2l0aW9uXSA9IG5ldyBGeC5UcmFuc2l0aW9uKHRyYW5zaXRpb25zW3RyYW5zaXRpb25dKTsKfTsKCkZ4LlRyYW5zaXRpb25zLmV4dGVuZCh7CgogICAgICAgIFBvdzogZnVuY3Rpb24ocCwgeCl7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5wb3cocCwgeCAmJiB4WzBdIHx8IDYpOwogICAgICAgIH0sCgogICAgICAgIEV4cG86IGZ1bmN0aW9uKHApewogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KDIsIDggKiAocCAtIDEpKTsKICAgICAgICB9LAoKICAgICAgICBDaXJjOiBmdW5jdGlvbihwKXsKICAgICAgICAgICAgICAgIHJldHVybiAxIC0gTWF0aC5zaW4oTWF0aC5hY29zKHApKTsKICAgICAgICB9LAoKICAgICAgICBTaW5lOiBmdW5jdGlvbihwKXsKICAgICAgICAgICAgICAgIHJldHVybiAxIC0gTWF0aC5jb3MocCAqIE1hdGguUEkgLyAyKTsKICAgICAgICB9LAoKICAgICAgICBCYWNrOiBmdW5jdGlvbihwLCB4KXsKICAgICAgICAgICAgICAgIHggPSB4ICYmIHhbMF0gfHwgMS42MTg7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5wb3cocCwgMikgKiAoKHggKyAxKSAqIHAgLSB4KTsKICAgICAgICB9LAoKICAgICAgICBCb3VuY2U6IGZ1bmN0aW9uKHApewogICAgICAgICAgICAgICAgdmFyIHZhbHVlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDAsIGIgPSAxOyAxOyBhICs9IGIsIGIgLz0gMil7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwID49ICg3IC0gNCAqIGEpIC8gMTEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYiAqIGIgLSBNYXRoLnBvdygoMTEgLSA2ICogYSAtIDExICogcCkgLyA0LCAyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0sCgogICAgICAgIEVsYXN0aWM6IGZ1bmN0aW9uKHAsIHgpewogICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KDIsIDEwICogLS1wKSAqIE1hdGguY29zKDIwICogcCAqIE1hdGguUEkgKiAoeCAmJiB4WzBdIHx8IDEpIC8gMyk7CiAgICAgICAgfQoKfSk7CgpbJ1F1YWQnLCAnQ3ViaWMnLCAnUXVhcnQnLCAnUXVpbnQnXS5lYWNoKGZ1bmN0aW9uKHRyYW5zaXRpb24sIGkpewogICAgICAgIEZ4LlRyYW5zaXRpb25zW3RyYW5zaXRpb25dID0gbmV3IEZ4LlRyYW5zaXRpb24oZnVuY3Rpb24ocCl7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5wb3cocCwgaSArIDIpOwogICAgICAgIH0pOwp9KTsKCgovKgotLS0KCm5hbWU6IFJlcXVlc3QKCmRlc2NyaXB0aW9uOiBQb3dlcmZ1bCBhbGwgcHVycG9zZSBSZXF1ZXN0IENsYXNzLiBVc2VzIFhNTEhUVFBSZXF1ZXN0LgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW09iamVjdCwgRWxlbWVudCwgQ2hhaW4sIEV2ZW50cywgT3B0aW9ucywgQnJvd3Nlcl0KCnByb3ZpZGVzOiBSZXF1ZXN0CgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGVtcHR5ID0gZnVuY3Rpb24oKXt9LAogICAgICAgIHByb2dyZXNzU3VwcG9ydCA9ICgnb25wcm9ncmVzcycgaW4gbmV3IEJyb3dzZXIuUmVxdWVzdCk7Cgp2YXIgUmVxdWVzdCA9IHRoaXMuUmVxdWVzdCA9IG5ldyBDbGFzcyh7CgogICAgICAgIEltcGxlbWVudHM6IFtDaGFpbiwgRXZlbnRzLCBPcHRpb25zXSwKCiAgICAgICAgb3B0aW9uczogey8qCiAgICAgICAgICAgICAgICBvblJlcXVlc3Q6IGZ1bmN0aW9uKCl7fSwKICAgICAgICAgICAgICAgIG9uTG9hZHN0YXJ0OiBmdW5jdGlvbihldmVudCwgeGhyKXt9LAogICAgICAgICAgICAgICAgb25Qcm9ncmVzczogZnVuY3Rpb24oZXZlbnQsIHhocil7fSwKICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uKCl7fSwKICAgICAgICAgICAgICAgIG9uQ2FuY2VsOiBmdW5jdGlvbigpe30sCiAgICAgICAgICAgICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlVGV4dCwgcmVzcG9uc2VYTUwpe30sCiAgICAgICAgICAgICAgICBvbkZhaWx1cmU6IGZ1bmN0aW9uKHhocil7fSwKICAgICAgICAgICAgICAgIG9uRXhjZXB0aW9uOiBmdW5jdGlvbihoZWFkZXJOYW1lLCB2YWx1ZSl7fSwKICAgICAgICAgICAgICAgIG9uVGltZW91dDogZnVuY3Rpb24oKXt9LAogICAgICAgICAgICAgICAgdXNlcjogJycsCiAgICAgICAgICAgICAgICBwYXNzd29yZDogJycsKi8KICAgICAgICAgICAgICAgIHVybDogJycsCiAgICAgICAgICAgICAgICBkYXRhOiAnJywKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnLAogICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ3RleHQvamF2YXNjcmlwdCwgdGV4dC9odG1sLCBhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sLCAqLyonCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsCiAgICAgICAgICAgICAgICBmb3JtYXQ6IGZhbHNlLAogICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgICAgICAgICAgICBsaW5rOiAnaWdub3JlJywKICAgICAgICAgICAgICAgIGlzU3VjY2VzczogbnVsbCwKICAgICAgICAgICAgICAgIGVtdWxhdGlvbjogdHJ1ZSwKICAgICAgICAgICAgICAgIHVybEVuY29kZWQ6IHRydWUsCiAgICAgICAgICAgICAgICBlbmNvZGluZzogJ3V0Zi04JywKICAgICAgICAgICAgICAgIGV2YWxTY3JpcHRzOiBmYWxzZSwKICAgICAgICAgICAgICAgIGV2YWxSZXNwb25zZTogZmFsc2UsCiAgICAgICAgICAgICAgICB0aW1lb3V0OiAwLAogICAgICAgICAgICAgICAgbm9DYWNoZTogZmFsc2UKICAgICAgICB9LAoKICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKXsKICAgICAgICAgICAgICAgIHRoaXMueGhyID0gbmV3IEJyb3dzZXIuUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJzID0gdGhpcy5vcHRpb25zLmhlYWRlcnM7CiAgICAgICAgfSwKCiAgICAgICAgb25TdGF0ZUNoYW5nZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciB4aHIgPSB0aGlzLnhocjsKICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPSA0IHx8ICF0aGlzLnJ1bm5pbmcpIHJldHVybjsKICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSAwOwogICAgICAgICAgICAgICAgRnVuY3Rpb24uYXR0ZW1wdChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1czsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSAoc3RhdHVzID09IDEyMjMpID8gMjA0IDogc3RhdHVzOwogICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTsKICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTsKICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzc1N1cHBvcnQpIHhoci5vbnByb2dyZXNzID0geGhyLm9ubG9hZHN0YXJ0ID0gZW1wdHk7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7CgogICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZSA9IHt0ZXh0OiB0aGlzLnhoci5yZXNwb25zZVRleHQgfHwgJycsIHhtbDogdGhpcy54aHIucmVzcG9uc2VYTUx9OwogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pc1N1Y2Nlc3MuY2FsbCh0aGlzLCB0aGlzLnN0YXR1cykpCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzcyh0aGlzLnJlc3BvbnNlLnRleHQsIHRoaXMucmVzcG9uc2UueG1sKTsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsdXJlKCk7CiAgICAgICAgfSwKCiAgICAgICAgaXNTdWNjZXNzOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdHVzOwogICAgICAgICAgICAgICAgcmV0dXJuIChzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCk7CiAgICAgICAgfSwKCiAgICAgICAgaXNSdW5uaW5nOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5ydW5uaW5nOwogICAgICAgIH0sCgogICAgICAgIHByb2Nlc3NTY3JpcHRzOiBmdW5jdGlvbih0ZXh0KXsKICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXZhbFJlc3BvbnNlIHx8ICgvKGVjbWF8amF2YSlzY3JpcHQvKS50ZXN0KHRoaXMuZ2V0SGVhZGVyKCdDb250ZW50LXR5cGUnKSkpIHJldHVybiBCcm93c2VyLmV4ZWModGV4dCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dC5zdHJpcFNjcmlwdHModGhpcy5vcHRpb25zLmV2YWxTY3JpcHRzKTsKICAgICAgICB9LAoKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbih0ZXh0LCB4bWwpewogICAgICAgICAgICAgICAgdGhpcy5vblN1Y2Nlc3ModGhpcy5wcm9jZXNzU2NyaXB0cyh0ZXh0KSwgeG1sKTsKICAgICAgICB9LAoKICAgICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnY29tcGxldGUnLCBhcmd1bWVudHMpLmZpcmVFdmVudCgnc3VjY2VzcycsIGFyZ3VtZW50cykuY2FsbENoYWluKCk7CiAgICAgICAgfSwKCiAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMub25GYWlsdXJlKCk7CiAgICAgICAgfSwKCiAgICAgICAgb25GYWlsdXJlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2NvbXBsZXRlJykuZmlyZUV2ZW50KCdmYWlsdXJlJywgdGhpcy54aHIpOwogICAgICAgIH0sCgogICAgICAgIGxvYWRzdGFydDogZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2xvYWRzdGFydCcsIFtldmVudCwgdGhpcy54aHJdKTsKICAgICAgICB9LAoKICAgICAgICBwcm9ncmVzczogZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3Byb2dyZXNzJywgW2V2ZW50LCB0aGlzLnhocl0pOwogICAgICAgIH0sCgogICAgICAgIHRpbWVvdXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgndGltZW91dCcsIHRoaXMueGhyKTsKICAgICAgICB9LAoKICAgICAgICBzZXRIZWFkZXI6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXsKICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyc1tuYW1lXSA9IHZhbHVlOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0SGVhZGVyOiBmdW5jdGlvbihuYW1lKXsKICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5hdHRlbXB0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcihuYW1lKTsKICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7CiAgICAgICAgfSwKCiAgICAgICAgY2hlY2s6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucnVubmluZykgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5saW5rKXsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2FuY2VsJzogdGhpcy5jYW5jZWwoKTsgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NoYWluJzogdGhpcy5jaGFpbih0aGlzLmNhbGxlci5wYXNzKGFyZ3VtZW50cywgdGhpcykpOyByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSwKCiAgICAgICAgc2VuZDogZnVuY3Rpb24ob3B0aW9ucyl7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2sob3B0aW9ucykpIHJldHVybiB0aGlzOwoKICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5pc1N1Y2Nlc3MgPSB0aGlzLm9wdGlvbnMuaXNTdWNjZXNzIHx8IHRoaXMuaXNTdWNjZXNzOwogICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVPZihvcHRpb25zKTsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ2VsZW1lbnQnKSBvcHRpb25zID0ge2RhdGE6IG9wdGlvbnN9OwoKICAgICAgICAgICAgICAgIHZhciBvbGQgPSB0aGlzLm9wdGlvbnM7CiAgICAgICAgICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFwcGVuZCh7ZGF0YTogb2xkLmRhdGEsIHVybDogb2xkLnVybCwgbWV0aG9kOiBvbGQubWV0aG9kfSwgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZGF0YSwgdXJsID0gU3RyaW5nKG9wdGlvbnMudXJsKSwgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QudG9Mb3dlckNhc2UoKTsKCiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGVPZihkYXRhKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VsZW1lbnQnOiBkYXRhID0gZG9jdW1lbnQuaWQoZGF0YSkudG9RdWVyeVN0cmluZygpOyBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzogY2FzZSAnaGFzaCc6IGRhdGEgPSBPYmplY3QudG9RdWVyeVN0cmluZyhkYXRhKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZvcm1hdCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXQgPSAnZm9ybWF0PScgKyB0aGlzLm9wdGlvbnMuZm9ybWF0OwogICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gKGRhdGEpID8gZm9ybWF0ICsgJyYnICsgZGF0YSA6IGZvcm1hdDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVtdWxhdGlvbiAmJiAhWydnZXQnLCAncG9zdCddLmNvbnRhaW5zKG1ldGhvZCkpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgX21ldGhvZCA9ICdfbWV0aG9kPScgKyBtZXRob2Q7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAoZGF0YSkgPyBfbWV0aG9kICsgJyYnICsgZGF0YSA6IF9tZXRob2Q7CiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9ICdwb3N0JzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVybEVuY29kZWQgJiYgWydwb3N0JywgJ3B1dCddLmNvbnRhaW5zKG1ldGhvZCkpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5jb2RpbmcgPSAodGhpcy5vcHRpb25zLmVuY29kaW5nKSA/ICc7IGNoYXJzZXQ9JyArIHRoaXMub3B0aW9ucy5lbmNvZGluZyA6ICcnOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlcnNbJ0NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgKyBlbmNvZGluZzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIXVybCkgdXJsID0gZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWU7CgogICAgICAgICAgICAgICAgdmFyIHRyaW1Qb3NpdGlvbiA9IHVybC5sYXN0SW5kZXhPZignLycpOwogICAgICAgICAgICAgICAgaWYgKHRyaW1Qb3NpdGlvbiA+IC0xICYmICh0cmltUG9zaXRpb24gPSB1cmwuaW5kZXhPZignIycpKSA+IC0xKSB1cmwgPSB1cmwuc3Vic3RyKDAsIHRyaW1Qb3NpdGlvbik7CgogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub0NhY2hlKQogICAgICAgICAgICAgICAgICAgICAgICB1cmwgKz0gKHVybC5jb250YWlucygnPycpID8gJyYnIDogJz8nKSArIFN0cmluZy51bmlxdWVJRCgpOwoKICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIG1ldGhvZCA9PSAnZ2V0Jyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAodXJsLmNvbnRhaW5zKCc/JykgPyAnJicgOiAnPycpICsgZGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IG51bGw7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIHhociA9IHRoaXMueGhyOwogICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzU3VwcG9ydCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vbmxvYWRzdGFydCA9IHRoaXMubG9hZHN0YXJ0LmJpbmQodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vbnByb2dyZXNzID0gdGhpcy5wcm9ncmVzcy5iaW5kKHRoaXMpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHhoci5vcGVuKG1ldGhvZC50b1VwcGVyQ2FzZSgpLCB1cmwsIHRoaXMub3B0aW9ucy5hc3luYywgdGhpcy5vcHRpb25zLnVzZXIsIHRoaXMub3B0aW9ucy5wYXNzd29yZCk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVzZXIgJiYgJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gdGhpcy5vblN0YXRlQ2hhbmdlLmJpbmQodGhpcyk7CgogICAgICAgICAgICAgICAgT2JqZWN0LmVhY2godGhpcy5oZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KXsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2V4Y2VwdGlvbicsIFtrZXksIHZhbHVlXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIHRoaXMpOwoKICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdyZXF1ZXN0Jyk7CiAgICAgICAgICAgICAgICB4aHIuc2VuZChkYXRhKTsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmFzeW5jKSB0aGlzLm9uU3RhdGVDaGFuZ2UoKTsKICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9ucy50aW1lb3V0KSB0aGlzLnRpbWVyID0gdGhpcy50aW1lb3V0LmRlbGF5KHRoaXMub3B0aW9ucy50aW1lb3V0LCB0aGlzKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5ydW5uaW5nKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgdmFyIHhociA9IHRoaXMueGhyOwogICAgICAgICAgICAgICAgeGhyLmFib3J0KCk7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7CiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7CiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3NTdXBwb3J0KSB4aHIub25wcm9ncmVzcyA9IHhoci5vbmxvYWRzdGFydCA9IGVtcHR5OwogICAgICAgICAgICAgICAgdGhpcy54aHIgPSBuZXcgQnJvd3Nlci5SZXF1ZXN0KCk7CiAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnY2FuY2VsJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCnZhciBtZXRob2RzID0ge307ClsnZ2V0JywgJ3Bvc3QnLCAncHV0JywgJ2RlbGV0ZScsICdHRVQnLCAnUE9TVCcsICdQVVQnLCAnREVMRVRFJ10uZWFjaChmdW5jdGlvbihtZXRob2QpewogICAgICAgIG1ldGhvZHNbbWV0aG9kXSA9IGZ1bmN0aW9uKGRhdGEpewogICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpZiAoZGF0YSAhPSBudWxsKSBvYmplY3QuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kKG9iamVjdCk7CiAgICAgICAgfTsKfSk7CgpSZXF1ZXN0LmltcGxlbWVudChtZXRob2RzKTsKCkVsZW1lbnQuUHJvcGVydGllcy5zZW5kID0gewoKICAgICAgICBzZXQ6IGZ1bmN0aW9uKG9wdGlvbnMpewogICAgICAgICAgICAgICAgdmFyIHNlbmQgPSB0aGlzLmdldCgnc2VuZCcpLmNhbmNlbCgpOwogICAgICAgICAgICAgICAgc2VuZC5zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHNlbmQgPSB0aGlzLnJldHJpZXZlKCdzZW5kJyk7CiAgICAgICAgICAgICAgICBpZiAoIXNlbmQpewogICAgICAgICAgICAgICAgICAgICAgICBzZW5kID0gbmV3IFJlcXVlc3QoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMsIGxpbms6ICdjYW5jZWwnLCBtZXRob2Q6IHRoaXMuZ2V0KCdtZXRob2QnKSB8fCAncG9zdCcsIHVybDogdGhpcy5nZXQoJ2FjdGlvbicpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JlKCdzZW5kJywgc2VuZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gc2VuZDsKICAgICAgICB9Cgp9OwoKRWxlbWVudC5pbXBsZW1lbnQoewoKICAgICAgICBzZW5kOiBmdW5jdGlvbih1cmwpewogICAgICAgICAgICAgICAgdmFyIHNlbmRlciA9IHRoaXMuZ2V0KCdzZW5kJyk7CiAgICAgICAgICAgICAgICBzZW5kZXIuc2VuZCh7ZGF0YTogdGhpcywgdXJsOiB1cmwgfHwgc2VuZGVyLm9wdGlvbnMudXJsfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9Cgp9KTsKCn0pKCk7CgoKLyoKLS0tCgpuYW1lOiBSZXF1ZXN0LkhUTUwKCmRlc2NyaXB0aW9uOiBFeHRlbmRzIHRoZSBiYXNpYyBSZXF1ZXN0IENsYXNzIHdpdGggYWRkaXRpb25hbCBtZXRob2RzIGZvciBpbnRlcmFjdGluZyB3aXRoIEhUTUwgcmVzcG9uc2VzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW0VsZW1lbnQsIFJlcXVlc3RdCgpwcm92aWRlczogUmVxdWVzdC5IVE1MCgouLi4KKi8KClJlcXVlc3QuSFRNTCA9IG5ldyBDbGFzcyh7CgogICAgICAgIEV4dGVuZHM6IFJlcXVlc3QsCgogICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgIHVwZGF0ZTogZmFsc2UsCiAgICAgICAgICAgICAgICBhcHBlbmQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZXZhbFNjcmlwdHM6IHRydWUsCiAgICAgICAgICAgICAgICBmaWx0ZXI6IGZhbHNlLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgICAgICBBY2NlcHQ6ICd0ZXh0L2h0bWwsIGFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwsICovKicKICAgICAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbih0ZXh0KXsKICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLCByZXNwb25zZSA9IHRoaXMucmVzcG9uc2U7CgogICAgICAgICAgICAgICAgcmVzcG9uc2UuaHRtbCA9IHRleHQuc3RyaXBTY3JpcHRzKGZ1bmN0aW9uKHNjcmlwdCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmphdmFzY3JpcHQgPSBzY3JpcHQ7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSByZXNwb25zZS5odG1sLm1hdGNoKC88Ym9keVtePl0qPihbXHNcU10qPyk8XC9ib2R5Pi9pKTsKICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgcmVzcG9uc2UuaHRtbCA9IG1hdGNoWzFdOwogICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBuZXcgRWxlbWVudCgnZGl2Jykuc2V0KCdodG1sJywgcmVzcG9uc2UuaHRtbCk7CgogICAgICAgICAgICAgICAgcmVzcG9uc2UudHJlZSA9IHRlbXAuY2hpbGROb2RlczsKICAgICAgICAgICAgICAgIHJlc3BvbnNlLmVsZW1lbnRzID0gdGVtcC5nZXRFbGVtZW50cyhvcHRpb25zLmZpbHRlciB8fCAnKicpOwoKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmZpbHRlcikgcmVzcG9uc2UudHJlZSA9IHJlc3BvbnNlLmVsZW1lbnRzOwogICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudXBkYXRlKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IGRvY3VtZW50LmlkKG9wdGlvbnMudXBkYXRlKS5lbXB0eSgpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5maWx0ZXIpIHVwZGF0ZS5hZG9wdChyZXNwb25zZS5lbGVtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgdXBkYXRlLnNldCgnaHRtbCcsIHJlc3BvbnNlLmh0bWwpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmFwcGVuZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcHBlbmQgPSBkb2N1bWVudC5pZChvcHRpb25zLmFwcGVuZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmZpbHRlcikgcmVzcG9uc2UuZWxlbWVudHMucmV2ZXJzZSgpLmluamVjdChhcHBlbmQpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGFwcGVuZC5hZG9wdCh0ZW1wLmdldENoaWxkcmVuKCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXZhbFNjcmlwdHMpIEJyb3dzZXIuZXhlYyhyZXNwb25zZS5qYXZhc2NyaXB0KTsKCiAgICAgICAgICAgICAgICB0aGlzLm9uU3VjY2VzcyhyZXNwb25zZS50cmVlLCByZXNwb25zZS5lbGVtZW50cywgcmVzcG9uc2UuaHRtbCwgcmVzcG9uc2UuamF2YXNjcmlwdCk7CiAgICAgICAgfQoKfSk7CgpFbGVtZW50LlByb3BlcnRpZXMubG9hZCA9IHsKCiAgICAgICAgc2V0OiBmdW5jdGlvbihvcHRpb25zKXsKICAgICAgICAgICAgICAgIHZhciBsb2FkID0gdGhpcy5nZXQoJ2xvYWQnKS5jYW5jZWwoKTsKICAgICAgICAgICAgICAgIGxvYWQuc2V0T3B0aW9ucyhvcHRpb25zKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciBsb2FkID0gdGhpcy5yZXRyaWV2ZSgnbG9hZCcpOwogICAgICAgICAgICAgICAgaWYgKCFsb2FkKXsKICAgICAgICAgICAgICAgICAgICAgICAgbG9hZCA9IG5ldyBSZXF1ZXN0LkhUTUwoe2RhdGE6IHRoaXMsIGxpbms6ICdjYW5jZWwnLCB1cGRhdGU6IHRoaXMsIG1ldGhvZDogJ2dldCd9KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZSgnbG9hZCcsIGxvYWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGxvYWQ7CiAgICAgICAgfQoKfTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCiAgICAgICAgbG9hZDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHRoaXMuZ2V0KCdsb2FkJykuc2VuZChBcnJheS5saW5rKGFyZ3VtZW50cywge2RhdGE6IFR5cGUuaXNPYmplY3QsIHVybDogVHlwZS5pc1N0cmluZ30pKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKCi8qCi0tLQoKbmFtZTogSlNPTgoKZGVzY3JpcHRpb246IEpTT04gZW5jb2RlciBhbmQgZGVjb2Rlci4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKU2VlQWxzbzogPGh0dHA6Ly93d3cuanNvbi5vcmcvPgoKcmVxdWlyZXM6IFtBcnJheSwgU3RyaW5nLCBOdW1iZXIsIEZ1bmN0aW9uXQoKcHJvdmlkZXM6IEpTT04KCi4uLgoqLwoKaWYgKHR5cGVvZiBKU09OID09ICd1bmRlZmluZWQnKSB0aGlzLkpTT04gPSB7fTsKCgoKKGZ1bmN0aW9uKCl7Cgp2YXIgc3BlY2lhbCA9IHsnXGInOiAnXFxiJywgJ1x0JzogJ1xcdCcsICdcbic6ICdcXG4nLCAnXGYnOiAnXFxmJywgJ1xyJzogJ1xccicsICciJyA6ICdcXCInLCAnXFwnOiAnXFxcXCd9OwoKdmFyIGVzY2FwZSA9IGZ1bmN0aW9uKGNocil7CiAgICAgICAgcmV0dXJuIHNwZWNpYWxbY2hyXSB8fCAnXFx1JyArICgnMDAwMCcgKyBjaHIuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KTsKfTsKCkpTT04udmFsaWRhdGUgPSBmdW5jdGlvbihzdHJpbmcpewogICAgICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9cXCg/OlsiXFxcL2JmbnJ0XXx1WzAtOWEtZkEtRl17NH0pL2csICdAJykuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlKC8iW14iXFxcblxyXSoifHRydWV8ZmFsc2V8bnVsbHwtP1xkKyg/OlwuXGQqKT8oPzpbZUVdWytcLV0/XGQrKT8vZywgJ10nKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2UoLyg/Ol58OnwsKSg/OlxzKlxbKSsvZywgJycpOwoKICAgICAgICByZXR1cm4gKC9eW1xdLDp7fVxzXSokLykudGVzdChzdHJpbmcpOwp9OwoKSlNPTi5lbmNvZGUgPSBKU09OLnN0cmluZ2lmeSA/IGZ1bmN0aW9uKG9iail7CiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7Cn0gOiBmdW5jdGlvbihvYmopewogICAgICAgIGlmIChvYmogJiYgb2JqLnRvSlNPTikgb2JqID0gb2JqLnRvSlNPTigpOwoKICAgICAgICBzd2l0Y2ggKHR5cGVPZihvYmopKXsKICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnIicgKyBvYmoucmVwbGFjZSgvW1x4MDAtXHgxZlxcIl0vZywgZXNjYXBlKSArICciJzsKICAgICAgICAgICAgICAgIGNhc2UgJ2FycmF5JzoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbJyArIG9iai5tYXAoSlNPTi5lbmNvZGUpLmNsZWFuKCkgKyAnXSc7CiAgICAgICAgICAgICAgICBjYXNlICdvYmplY3QnOiBjYXNlICdoYXNoJzoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmluZyA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5lbmNvZGUodmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uKSBzdHJpbmcucHVzaChKU09OLmVuY29kZShrZXkpICsgJzonICsganNvbik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3snICsgc3RyaW5nICsgJ30nOwogICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzogY2FzZSAnYm9vbGVhbic6IHJldHVybiAnJyArIG9iajsKICAgICAgICAgICAgICAgIGNhc2UgJ251bGwnOiByZXR1cm4gJ251bGwnOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG51bGw7Cn07CgpKU09OLmRlY29kZSA9IGZ1bmN0aW9uKHN0cmluZywgc2VjdXJlKXsKICAgICAgICBpZiAoIXN0cmluZyB8fCB0eXBlT2Yoc3RyaW5nKSAhPSAnc3RyaW5nJykgcmV0dXJuIG51bGw7CgogICAgICAgIGlmIChzZWN1cmUgfHwgSlNPTi5zZWN1cmUpewogICAgICAgICAgICAgICAgaWYgKEpTT04ucGFyc2UpIHJldHVybiBKU09OLnBhcnNlKHN0cmluZyk7CiAgICAgICAgICAgICAgICBpZiAoIUpTT04udmFsaWRhdGUoc3RyaW5nKSkgdGhyb3cgbmV3IEVycm9yKCdKU09OIGNvdWxkIG5vdCBkZWNvZGUgdGhlIGlucHV0OyBzZWN1cml0eSBpcyBlbmFibGVkIGFuZCB0aGUgdmFsdWUgaXMgbm90IHNlY3VyZS4nKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBldmFsKCcoJyArIHN0cmluZyArICcpJyk7Cn07Cgp9KSgpOwoKCi8qCi0tLQoKbmFtZTogUmVxdWVzdC5KU09OCgpkZXNjcmlwdGlvbjogRXh0ZW5kcyB0aGUgYmFzaWMgUmVxdWVzdCBDbGFzcyB3aXRoIGFkZGl0aW9uYWwgbWV0aG9kcyBmb3Igc2VuZGluZyBhbmQgcmVjZWl2aW5nIEpTT04gZGF0YS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtSZXF1ZXN0LCBKU09OXQoKcHJvdmlkZXM6IFJlcXVlc3QuSlNPTgoKLi4uCiovCgpSZXF1ZXN0LkpTT04gPSBuZXcgQ2xhc3MoewoKICAgICAgICBFeHRlbmRzOiBSZXF1ZXN0LAoKICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAvKm9uRXJyb3I6IGZ1bmN0aW9uKHRleHQsIGVycm9yKXt9LCovCiAgICAgICAgICAgICAgICBzZWN1cmU6IHRydWUKICAgICAgICB9LAoKICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKXsKICAgICAgICAgICAgICAgIHRoaXMucGFyZW50KG9wdGlvbnMpOwogICAgICAgICAgICAgICAgT2JqZWN0LmFwcGVuZCh0aGlzLmhlYWRlcnMsIHsKICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICAgICAgICAgJ1gtUmVxdWVzdCc6ICdKU09OJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24odGV4dCl7CiAgICAgICAgICAgICAgICB2YXIganNvbjsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGpzb24gPSB0aGlzLnJlc3BvbnNlLmpzb24gPSBKU09OLmRlY29kZSh0ZXh0LCB0aGlzLm9wdGlvbnMuc2VjdXJlKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKXsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2Vycm9yJywgW3RleHQsIGVycm9yXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChqc29uID09IG51bGwpIHRoaXMub25GYWlsdXJlKCk7CiAgICAgICAgICAgICAgICBlbHNlIHRoaXMub25TdWNjZXNzKGpzb24sIHRleHQpOwogICAgICAgIH0KCn0pOwoKCi8qCi0tLQoKbmFtZTogQ29va2llCgpkZXNjcmlwdGlvbjogQ2xhc3MgZm9yIGNyZWF0aW5nLCByZWFkaW5nLCBhbmQgZGVsZXRpbmcgYnJvd3NlciBDb29raWVzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjcmVkaXRzOgogIC0gQmFzZWQgb24gdGhlIGZ1bmN0aW9ucyBieSBQZXRlci1QYXVsIEtvY2ggKGh0dHA6Ly9xdWlya3Ntb2RlLm9yZykuCgpyZXF1aXJlczogW09wdGlvbnMsIEJyb3dzZXJdCgpwcm92aWRlczogQ29va2llCgouLi4KKi8KCnZhciBDb29raWUgPSBuZXcgQ2xhc3MoewoKICAgICAgICBJbXBsZW1lbnRzOiBPcHRpb25zLAoKICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICBwYXRoOiAnLycsCiAgICAgICAgICAgICAgICBkb21haW46IGZhbHNlLAogICAgICAgICAgICAgICAgZHVyYXRpb246IGZhbHNlLAogICAgICAgICAgICAgICAgc2VjdXJlOiBmYWxzZSwKICAgICAgICAgICAgICAgIGRvY3VtZW50OiBkb2N1bWVudCwKICAgICAgICAgICAgICAgIGVuY29kZTogdHJ1ZQogICAgICAgIH0sCgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGtleSwgb3B0aW9ucyl7CiAgICAgICAgICAgICAgICB0aGlzLmtleSA9IGtleTsKICAgICAgICAgICAgICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTsKICAgICAgICB9LAoKICAgICAgICB3cml0ZTogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5lbmNvZGUpIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZG9tYWluKSB2YWx1ZSArPSAnOyBkb21haW49JyArIHRoaXMub3B0aW9ucy5kb21haW47CiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhdGgpIHZhbHVlICs9ICc7IHBhdGg9JyArIHRoaXMub3B0aW9ucy5wYXRoOwogICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kdXJhdGlvbil7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogMjQgKiA2MCAqIDYwICogMTAwMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9ICc7IGV4cGlyZXM9JyArIGRhdGUudG9HTVRTdHJpbmcoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2VjdXJlKSB2YWx1ZSArPSAnOyBzZWN1cmUnOwogICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRvY3VtZW50LmNvb2tpZSA9IHRoaXMua2V5ICsgJz0nICsgdmFsdWU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICByZWFkOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5vcHRpb25zLmRvY3VtZW50LmNvb2tpZS5tYXRjaCgnKD86Xnw7KVxccyonICsgdGhpcy5rZXkuZXNjYXBlUmVnRXhwKCkgKyAnPShbXjtdKiknKTsKICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUpID8gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlWzFdKSA6IG51bGw7CiAgICAgICAgfSwKCiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIG5ldyBDb29raWUodGhpcy5rZXksIE9iamVjdC5tZXJnZSh7fSwgdGhpcy5vcHRpb25zLCB7ZHVyYXRpb246IC0xfSkpLndyaXRlKCcnKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KCn0pOwoKQ29va2llLndyaXRlID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSwgb3B0aW9ucyl7CiAgICAgICAgcmV0dXJuIG5ldyBDb29raWUoa2V5LCBvcHRpb25zKS53cml0ZSh2YWx1ZSk7Cn07CgpDb29raWUucmVhZCA9IGZ1bmN0aW9uKGtleSl7CiAgICAgICAgcmV0dXJuIG5ldyBDb29raWUoa2V5KS5yZWFkKCk7Cn07CgpDb29raWUuZGlzcG9zZSA9IGZ1bmN0aW9uKGtleSwgb3B0aW9ucyl7CiAgICAgICAgcmV0dXJuIG5ldyBDb29raWUoa2V5LCBvcHRpb25zKS5kaXNwb3NlKCk7Cn07CgoKLyoKLS0tCgpuYW1lOiBET01SZWFkeQoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBjdXN0b20gZXZlbnQgZG9tcmVhZHkuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbQnJvd3NlciwgRWxlbWVudCwgRWxlbWVudC5FdmVudF0KCnByb3ZpZGVzOiBbRE9NUmVhZHksIERvbVJlYWR5XQoKLi4uCiovCgooZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCl7Cgp2YXIgcmVhZHksCiAgICAgICAgbG9hZGVkLAogICAgICAgIGNoZWNrcyA9IFtdLAogICAgICAgIHNob3VsZFBvbGwsCiAgICAgICAgdGltZXIsCiAgICAgICAgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCnZhciBkb21yZWFkeSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTsKICAgICAgICBpZiAocmVhZHkpIHJldHVybjsKICAgICAgICBCcm93c2VyLmxvYWRlZCA9IHJlYWR5ID0gdHJ1ZTsKICAgICAgICBkb2N1bWVudC5yZW1vdmVMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGRvbXJlYWR5KS5yZW1vdmVMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGNoZWNrKTsKCiAgICAgICAgZG9jdW1lbnQuZmlyZUV2ZW50KCdkb21yZWFkeScpOwogICAgICAgIHdpbmRvdy5maXJlRXZlbnQoJ2RvbXJlYWR5Jyk7Cn07Cgp2YXIgY2hlY2sgPSBmdW5jdGlvbigpewogICAgICAgIGZvciAodmFyIGkgPSBjaGVja3MubGVuZ3RoOyBpLS07KSBpZiAoY2hlY2tzW2ldKCkpewogICAgICAgICAgICAgICAgZG9tcmVhZHkoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7Cn07Cgp2YXIgcG9sbCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTsKICAgICAgICBpZiAoIWNoZWNrKCkpIHRpbWVyID0gc2V0VGltZW91dChwb2xsLCAxMCk7Cn07Cgpkb2N1bWVudC5hZGRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGRvbXJlYWR5KTsKCi8qPGx0SUU4PiovCi8vIGRvU2Nyb2xsIHRlY2huaXF1ZSBieSBEaWVnbyBQZXJpbmkgaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0lFQ29udGVudExvYWRlZC8KLy8gdGVzdEVsZW1lbnQuZG9TY3JvbGwoKSB0aHJvd3Mgd2hlbiB0aGUgRE9NIGlzIG5vdCByZWFkeSwgb25seSBpbiB0aGUgdG9wIHdpbmRvdwp2YXIgZG9TY3JvbGxXb3JrcyA9IGZ1bmN0aW9uKCl7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHRlc3RFbGVtZW50LmRvU2Nyb2xsKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGNhdGNoIChlKXt9CiAgICAgICAgcmV0dXJuIGZhbHNlOwp9OwovLyBJZiBkb1Njcm9sbCB3b3JrcyBhbHJlYWR5LCBpdCBjYW4ndCBiZSB1c2VkIHRvIGRldGVybWluZSBkb21yZWFkeQovLyAgIGUuZy4gaW4gYW4gaWZyYW1lCmlmICh0ZXN0RWxlbWVudC5kb1Njcm9sbCAmJiAhZG9TY3JvbGxXb3JrcygpKXsKICAgICAgICBjaGVja3MucHVzaChkb1Njcm9sbFdvcmtzKTsKICAgICAgICBzaG91bGRQb2xsID0gdHJ1ZTsKfQovKjwvbHRJRTg+Ki8KCmlmIChkb2N1bWVudC5yZWFkeVN0YXRlKSBjaGVja3MucHVzaChmdW5jdGlvbigpewogICAgICAgIHZhciBzdGF0ZSA9IGRvY3VtZW50LnJlYWR5U3RhdGU7CiAgICAgICAgcmV0dXJuIChzdGF0ZSA9PSAnbG9hZGVkJyB8fCBzdGF0ZSA9PSAnY29tcGxldGUnKTsKfSk7CgppZiAoJ29ucmVhZHlzdGF0ZWNoYW5nZScgaW4gZG9jdW1lbnQpIGRvY3VtZW50LmFkZExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgY2hlY2spOwplbHNlIHNob3VsZFBvbGwgPSB0cnVlOwoKaWYgKHNob3VsZFBvbGwpIHBvbGwoKTsKCkVsZW1lbnQuRXZlbnRzLmRvbXJlYWR5ID0gewogICAgICAgIG9uQWRkOiBmdW5jdGlvbihmbil7CiAgICAgICAgICAgICAgICBpZiAocmVhZHkpIGZuLmNhbGwodGhpcyk7CiAgICAgICAgfQp9OwoKLy8gTWFrZSBzdXJlIHRoYXQgZG9tcmVhZHkgZmlyZXMgYmVmb3JlIGxvYWQKRWxlbWVudC5FdmVudHMubG9hZCA9IHsKICAgICAgICBiYXNlOiAnbG9hZCcsCiAgICAgICAgb25BZGQ6IGZ1bmN0aW9uKGZuKXsKICAgICAgICAgICAgICAgIGlmIChsb2FkZWQgJiYgdGhpcyA9PSB3aW5kb3cpIGZuLmNhbGwodGhpcyk7CiAgICAgICAgfSwKICAgICAgICBjb25kaXRpb246IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PSB3aW5kb3cpewogICAgICAgICAgICAgICAgICAgICAgICBkb21yZWFkeSgpOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgRWxlbWVudC5FdmVudHMubG9hZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KfTsKCi8vIFRoaXMgaXMgYmFzZWQgb24gdGhlIGN1c3RvbSBsb2FkIGV2ZW50CndpbmRvdy5hZGRFdmVudCgnbG9hZCcsIGZ1bmN0aW9uKCl7CiAgICAgICAgbG9hZGVkID0gdHJ1ZTsKfSk7Cgp9KSh3aW5kb3csIGRvY3VtZW50KTsKCgovKgotLS0KCm5hbWU6IFN3aWZmCgpkZXNjcmlwdGlvbjogV3JhcHBlciBmb3IgZW1iZWRkaW5nIFNXRiBtb3ZpZXMuIFN1cHBvcnRzIEV4dGVybmFsIEludGVyZmFjZSBDb21tdW5pY2F0aW9uLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjcmVkaXRzOgogIC0gRmxhc2ggZGV0ZWN0aW9uICYgSW50ZXJuZXQgRXhwbG9yZXIgKyBGbGFzaCBQbGF5ZXIgOSBmaXggaW5zcGlyZWQgYnkgU1dGT2JqZWN0LgoKcmVxdWlyZXM6IFtPcHRpb25zLCBPYmplY3QsIEVsZW1lbnRdCgpwcm92aWRlczogU3dpZmYKCi4uLgoqLwoKKGZ1bmN0aW9uKCl7Cgp2YXIgU3dpZmYgPSB0aGlzLlN3aWZmID0gbmV3IENsYXNzKHsKCiAgICAgICAgSW1wbGVtZW50czogT3B0aW9ucywKCiAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgaWQ6IG51bGwsCiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEsCiAgICAgICAgICAgICAgICB3aWR0aDogMSwKICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogbnVsbCwKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9LAogICAgICAgICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpdHk6ICdoaWdoJywKICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dTY3JpcHRBY2Nlc3M6ICdhbHdheXMnLAogICAgICAgICAgICAgICAgICAgICAgICB3TW9kZTogJ3dpbmRvdycsCiAgICAgICAgICAgICAgICAgICAgICAgIHN3TGl2ZUNvbm5lY3Q6IHRydWUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjYWxsQmFja3M6IHt9LAogICAgICAgICAgICAgICAgdmFyczoge30KICAgICAgICB9LAoKICAgICAgICB0b0VsZW1lbnQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vYmplY3Q7CiAgICAgICAgfSwKCiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucyl7CiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gJ1N3aWZmXycgKyBTdHJpbmcudW5pcXVlSUQoKTsKCiAgICAgICAgICAgICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7CiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zOwogICAgICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5pZCA9IG9wdGlvbnMuaWQgfHwgdGhpcy5pbnN0YW5jZTsKICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5pZChvcHRpb25zLmNvbnRhaW5lcik7CgogICAgICAgICAgICAgICAgU3dpZmYuQ2FsbEJhY2tzW3RoaXMuaW5zdGFuY2VdID0ge307CgogICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IG9wdGlvbnMucGFyYW1zLCB2YXJzID0gb3B0aW9ucy52YXJzLCBjYWxsQmFja3MgPSBvcHRpb25zLmNhbGxCYWNrczsKICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gT2JqZWN0LmFwcGVuZCh7aGVpZ2h0OiBvcHRpb25zLmhlaWdodCwgd2lkdGg6IG9wdGlvbnMud2lkdGh9LCBvcHRpb25zLnByb3BlcnRpZXMpOwoKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAgICAgICAgICAgICBmb3IgKHZhciBjYWxsQmFjayBpbiBjYWxsQmFja3MpewogICAgICAgICAgICAgICAgICAgICAgICBTd2lmZi5DYWxsQmFja3NbdGhpcy5pbnN0YW5jZV1bY2FsbEJhY2tdID0gKGZ1bmN0aW9uKG9wdGlvbil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uLmFwcGx5KHNlbGYub2JqZWN0LCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKGNhbGxCYWNrc1tjYWxsQmFja10pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXJzW2NhbGxCYWNrXSA9ICdTd2lmZi5DYWxsQmFja3MuJyArIHRoaXMuaW5zdGFuY2UgKyAnLicgKyBjYWxsQmFjazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBwYXJhbXMuZmxhc2hWYXJzID0gT2JqZWN0LnRvUXVlcnlTdHJpbmcodmFycyk7CiAgICAgICAgICAgICAgICBpZiAoQnJvd3Nlci5pZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuY2xhc3NpZCA9ICdjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDAnOwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMubW92aWUgPSBwYXRoOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcy50eXBlID0gJ2FwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuZGF0YSA9IHBhdGg7CgogICAgICAgICAgICAgICAgdmFyIGJ1aWxkID0gJzxvYmplY3QgaWQ9IicgKyBpZCArICciJzsKICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3BlcnRpZXMpIGJ1aWxkICs9ICcgJyArIHByb3BlcnR5ICsgJz0iJyArIHByb3BlcnRpZXNbcHJvcGVydHldICsgJyInOwogICAgICAgICAgICAgICAgYnVpbGQgKz0gJz4nOwogICAgICAgICAgICAgICAgZm9yICh2YXIgcGFyYW0gaW4gcGFyYW1zKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtc1twYXJhbV0pIGJ1aWxkICs9ICc8cGFyYW0gbmFtZT0iJyArIHBhcmFtICsgJyIgdmFsdWU9IicgKyBwYXJhbXNbcGFyYW1dICsgJyIgLz4nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnVpbGQgKz0gJzwvb2JqZWN0Pic7CiAgICAgICAgICAgICAgICB0aGlzLm9iamVjdCA9ICgoY29udGFpbmVyKSA/IGNvbnRhaW5lci5lbXB0eSgpIDogbmV3IEVsZW1lbnQoJ2RpdicpKS5zZXQoJ2h0bWwnLCBidWlsZCkuZmlyc3RDaGlsZDsKICAgICAgICB9LAoKICAgICAgICByZXBsYWNlczogZnVuY3Rpb24oZWxlbWVudCl7CiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuaWQoZWxlbWVudCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHRoaXMudG9FbGVtZW50KCksIGVsZW1lbnQpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgaW5qZWN0OiBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmlkKGVsZW1lbnQsIHRydWUpLmFwcGVuZENoaWxkKHRoaXMudG9FbGVtZW50KCkpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3RlOiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgcmV0dXJuIFN3aWZmLnJlbW90ZS5hcHBseShTd2lmZiwgW3RoaXMudG9FbGVtZW50KCldLmFwcGVuZChhcmd1bWVudHMpKTsKICAgICAgICB9Cgp9KTsKClN3aWZmLkNhbGxCYWNrcyA9IHt9OwoKU3dpZmYucmVtb3RlID0gZnVuY3Rpb24ob2JqLCBmbil7CiAgICAgICAgdmFyIHJzID0gb2JqLkNhbGxGdW5jdGlvbignPGludm9rZSBuYW1lPSInICsgZm4gKyAnIiByZXR1cm50eXBlPSJqYXZhc2NyaXB0Ij4nICsgX19mbGFzaF9fYXJndW1lbnRzVG9YTUwoYXJndW1lbnRzLCAyKSArICc8L2ludm9rZT4nKTsKICAgICAgICByZXR1cm4gZXZhbChycyk7Cn07Cgp9KSgpOwoK",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 20:25:15 GMT",
                    "Content-Length": "195747",
                    "Date": "Sat, 08 Nov 2014 20:25:16 GMT",
                    "Content-Type": "text/plain; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "text",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}