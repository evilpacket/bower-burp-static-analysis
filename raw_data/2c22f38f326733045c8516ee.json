{
    "url": "http://localhost:9999/henrikjoreteg/icanhaz.js/test/qunit/qunit.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.href</b> and written to <b>the 'innerHTML' property of a DOM element</b> via the following statement:<ul><li>banner.innerHTML = '&lt;a href=\"' + location.href + '\"&gt;' + banner.innerHTML + '&lt;/a&gt;';</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/henrikjoreteg/icanhaz.js/test/qunit/qunit.js",
                "path": "/henrikjoreteg/icanhaz.js/test/qunit/qunit.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9oZW5yaWtqb3JldGVnL2ljYW5oYXouanMvdGVzdC9xdW5pdC9xdW5pdC5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMzMwMDINCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMDQ6MTg6MDQgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDA0OjE4OjAzIEdNVA0KDQovKgogKiBRVW5pdCAtIEEgSmF2YVNjcmlwdCBVbml0IFRlc3RpbmcgRnJhbWV3b3JrCiAqCiAqIGh0dHA6Ly9kb2NzLmpxdWVyeS5jb20vUVVuaXQKICoKICogQ29weXJpZ2h0IChjKSAyMDA5IEpvaG4gUmVzaWcsIErDtnJuIFphZWZmZXJlcgogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgKE1JVC1MSUNFTlNFLnR4dCkKICogYW5kIEdQTCAoR1BMLUxJQ0VOU0UudHh0KSBsaWNlbnNlcy4KICovCgooZnVuY3Rpb24od2luZG93KSB7Cgp2YXIgUVVuaXQgPSB7CgoJLy8gY2FsbCBvbiBzdGFydCBvZiBtb2R1bGUgdGVzdCB0byBwcmVwZW5kIG5hbWUgdG8gYWxsIHRlc3RzCgltb2R1bGU6IGZ1bmN0aW9uKG5hbWUsIHRlc3RFbnZpcm9ubWVudCkgewoJCWNvbmZpZy5jdXJyZW50TW9kdWxlID0gbmFtZTsKCgkJc3luY2hyb25pemUoZnVuY3Rpb24oKSB7CgkJCWlmICggY29uZmlnLmN1cnJlbnRNb2R1bGUgKSB7CgkJCQlRVW5pdC5tb2R1bGVEb25lKCBjb25maWcuY3VycmVudE1vZHVsZSwgY29uZmlnLm1vZHVsZVN0YXRzLmJhZCwgY29uZmlnLm1vZHVsZVN0YXRzLmFsbCApOwoJCQl9CgoJCQljb25maWcuY3VycmVudE1vZHVsZSA9IG5hbWU7CgkJCWNvbmZpZy5tb2R1bGVUZXN0RW52aXJvbm1lbnQgPSB0ZXN0RW52aXJvbm1lbnQ7CgkJCWNvbmZpZy5tb2R1bGVTdGF0cyA9IHsgYWxsOiAwLCBiYWQ6IDAgfTsKCgkJCVFVbml0Lm1vZHVsZVN0YXJ0KCBuYW1lLCB0ZXN0RW52aXJvbm1lbnQgKTsKCQl9KTsKCX0sCgoJYXN5bmNUZXN0OiBmdW5jdGlvbih0ZXN0TmFtZSwgZXhwZWN0ZWQsIGNhbGxiYWNrKSB7CgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAyICkgewoJCQljYWxsYmFjayA9IGV4cGVjdGVkOwoJCQlleHBlY3RlZCA9IDA7CgkJfQoKCQlRVW5pdC50ZXN0KHRlc3ROYW1lLCBleHBlY3RlZCwgY2FsbGJhY2ssIHRydWUpOwoJfSwKCgl0ZXN0OiBmdW5jdGlvbih0ZXN0TmFtZSwgZXhwZWN0ZWQsIGNhbGxiYWNrLCBhc3luYykgewoJCXZhciBuYW1lID0gJzxzcGFuIGNsYXNzPSJ0ZXN0LW5hbWUiPicgKyB0ZXN0TmFtZSArICc8L3NwYW4+JywgdGVzdEVudmlyb25tZW50LCB0ZXN0RW52aXJvbm1lbnRBcmc7CgoJCWlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMiApIHsKCQkJY2FsbGJhY2sgPSBleHBlY3RlZDsKCQkJZXhwZWN0ZWQgPSBudWxsOwoJCX0KCQkvLyBpcyAybmQgYXJndW1lbnQgYSB0ZXN0RW52aXJvbm1lbnQ/CgkJaWYgKCBleHBlY3RlZCAmJiB0eXBlb2YgZXhwZWN0ZWQgPT09ICdvYmplY3QnKSB7CgkJCXRlc3RFbnZpcm9ubWVudEFyZyA9ICBleHBlY3RlZDsKCQkJZXhwZWN0ZWQgPSBudWxsOwoJCX0KCgkJaWYgKCBjb25maWcuY3VycmVudE1vZHVsZSApIHsKCQkJbmFtZSA9ICc8c3BhbiBjbGFzcz0ibW9kdWxlLW5hbWUiPicgKyBjb25maWcuY3VycmVudE1vZHVsZSArICI8L3NwYW4+OiAiICsgbmFtZTsKCQl9CgoJCWlmICggIXZhbGlkVGVzdChjb25maWcuY3VycmVudE1vZHVsZSArICI6ICIgKyB0ZXN0TmFtZSkgKSB7CgkJCXJldHVybjsKCQl9CgoJCXN5bmNocm9uaXplKGZ1bmN0aW9uKCkgewoKCQkJdGVzdEVudmlyb25tZW50ID0gZXh0ZW5kKHsKCQkJCXNldHVwOiBmdW5jdGlvbigpIHt9LAoJCQkJdGVhcmRvd246IGZ1bmN0aW9uKCkge30KCQkJfSwgY29uZmlnLm1vZHVsZVRlc3RFbnZpcm9ubWVudCk7CgkJCWlmICh0ZXN0RW52aXJvbm1lbnRBcmcpIHsKCQkJCWV4dGVuZCh0ZXN0RW52aXJvbm1lbnQsdGVzdEVudmlyb25tZW50QXJnKTsKCQkJfQoKCQkJUVVuaXQudGVzdFN0YXJ0KCB0ZXN0TmFtZSwgdGVzdEVudmlyb25tZW50ICk7CgoJCQkvLyBhbGxvdyB1dGlsaXR5IGZ1bmN0aW9ucyB0byBhY2Nlc3MgdGhlIGN1cnJlbnQgdGVzdCBlbnZpcm9ubWVudAoJCQlRVW5pdC5jdXJyZW50X3Rlc3RFbnZpcm9ubWVudCA9IHRlc3RFbnZpcm9ubWVudDsKCgkJCWNvbmZpZy5hc3NlcnRpb25zID0gW107CgkJCWNvbmZpZy5leHBlY3RlZCA9IGV4cGVjdGVkOwoKCQkJdmFyIHRlc3RzID0gaWQoInF1bml0LXRlc3RzIik7CgkJCWlmICh0ZXN0cykgewoJCQkJdmFyIGIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHJvbmciKTsKCQkJCQliLmlubmVySFRNTCA9ICJSdW5uaW5nICIgKyBuYW1lOwoJCQkJdmFyIGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGkiKTsKCQkJCQlsaS5hcHBlbmRDaGlsZCggYiApOwoJCQkJCWxpLmlkID0gImN1cnJlbnQtdGVzdC1vdXRwdXQiOwoJCQkJdGVzdHMuYXBwZW5kQ2hpbGQoIGxpICkKCQkJfQoKCQkJdHJ5IHsKCQkJCWlmICggIWNvbmZpZy5wb2xsdXRpb24gKSB7CgkJCQkJc2F2ZUdsb2JhbCgpOwoJCQkJfQoKCQkJCXRlc3RFbnZpcm9ubWVudC5zZXR1cC5jYWxsKHRlc3RFbnZpcm9ubWVudCk7CgkJCX0gY2F0Y2goZSkgewoJCQkJUVVuaXQub2soIGZhbHNlLCAiU2V0dXAgZmFpbGVkIG9uICIgKyBuYW1lICsgIjogIiArIGUubWVzc2FnZSApOwoJCQl9CgkgICAgfSk7CgoJICAgIHN5bmNocm9uaXplKGZ1bmN0aW9uKCkgewoJCQlpZiAoIGFzeW5jICkgewoJCQkJUVVuaXQuc3RvcCgpOwoJCQl9CgoJCQl0cnkgewoJCQkJY2FsbGJhY2suY2FsbCh0ZXN0RW52aXJvbm1lbnQpOwoJCQl9IGNhdGNoKGUpIHsKCQkJCWZhaWwoIlRlc3QgIiArIG5hbWUgKyAiIGRpZWQsIGV4Y2VwdGlvbiBhbmQgdGVzdCBmb2xsb3dzIiwgZSwgY2FsbGJhY2spOwoJCQkJUVVuaXQub2soIGZhbHNlLCAiRGllZCBvbiB0ZXN0ICMiICsgKGNvbmZpZy5hc3NlcnRpb25zLmxlbmd0aCArIDEpICsgIjogIiArIGUubWVzc2FnZSApOwoJCQkJLy8gZWxzZSBuZXh0IHRlc3Qgd2lsbCBjYXJyeSB0aGUgcmVzcG9uc2liaWxpdHkKCQkJCXNhdmVHbG9iYWwoKTsKCgkJCQkvLyBSZXN0YXJ0IHRoZSB0ZXN0cyBpZiB0aGV5J3JlIGJsb2NraW5nCgkJCQlpZiAoIGNvbmZpZy5ibG9ja2luZyApIHsKCQkJCQlzdGFydCgpOwoJCQkJfQoJCQl9CgkJfSk7CgoJCXN5bmNocm9uaXplKGZ1bmN0aW9uKCkgewoJCQl0cnkgewoJCQkJY2hlY2tQb2xsdXRpb24oKTsKCQkJCXRlc3RFbnZpcm9ubWVudC50ZWFyZG93bi5jYWxsKHRlc3RFbnZpcm9ubWVudCk7CgkJCX0gY2F0Y2goZSkgewoJCQkJUVVuaXQub2soIGZhbHNlLCAiVGVhcmRvd24gZmFpbGVkIG9uICIgKyBuYW1lICsgIjogIiArIGUubWVzc2FnZSApOwoJCQl9CgkgICAgfSk7CgoJICAgIHN5bmNocm9uaXplKGZ1bmN0aW9uKCkgewoJCQl0cnkgewoJCQkJUVVuaXQucmVzZXQoKTsKCQkJfSBjYXRjaChlKSB7CgkJCQlmYWlsKCJyZXNldCgpIGZhaWxlZCwgZm9sbG93aW5nIFRlc3QgIiArIG5hbWUgKyAiLCBleGNlcHRpb24gYW5kIHJlc2V0IGZuIGZvbGxvd3MiLCBlLCBRVW5pdC5yZXNldCk7CgkJCX0KCgkJCWlmICggY29uZmlnLmV4cGVjdGVkICYmIGNvbmZpZy5leHBlY3RlZCAhPSBjb25maWcuYXNzZXJ0aW9ucy5sZW5ndGggKSB7CgkJCQlRVW5pdC5vayggZmFsc2UsICJFeHBlY3RlZCAiICsgY29uZmlnLmV4cGVjdGVkICsgIiBhc3NlcnRpb25zLCBidXQgIiArIGNvbmZpZy5hc3NlcnRpb25zLmxlbmd0aCArICIgd2VyZSBydW4iICk7CgkJCX0KCgkJCXZhciBnb29kID0gMCwgYmFkID0gMCwKCQkJCXRlc3RzID0gaWQoInF1bml0LXRlc3RzIik7CgoJCQljb25maWcuc3RhdHMuYWxsICs9IGNvbmZpZy5hc3NlcnRpb25zLmxlbmd0aDsKCQkJY29uZmlnLm1vZHVsZVN0YXRzLmFsbCArPSBjb25maWcuYXNzZXJ0aW9ucy5sZW5ndGg7CgoJCQlpZiAoIHRlc3RzICkgewoJCQkJdmFyIG9sICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9sIik7CgoJCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgY29uZmlnLmFzc2VydGlvbnMubGVuZ3RoOyBpKysgKSB7CgkJCQkJdmFyIGFzc2VydGlvbiA9IGNvbmZpZy5hc3NlcnRpb25zW2ldOwoKCQkJCQl2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsaSIpOwoJCQkJCWxpLmNsYXNzTmFtZSA9IGFzc2VydGlvbi5yZXN1bHQgPyAicGFzcyIgOiAiZmFpbCI7CgkJCQkJbGkuaW5uZXJIVE1MID0gYXNzZXJ0aW9uLm1lc3NhZ2UgfHwgIihubyBtZXNzYWdlKSI7CgkJCQkJb2wuYXBwZW5kQ2hpbGQoIGxpICk7CgoJCQkJCWlmICggYXNzZXJ0aW9uLnJlc3VsdCApIHsKCQkJCQkJZ29vZCsrOwoJCQkJCX0gZWxzZSB7CgkJCQkJCWJhZCsrOwoJCQkJCQljb25maWcuc3RhdHMuYmFkKys7CgkJCQkJCWNvbmZpZy5tb2R1bGVTdGF0cy5iYWQrKzsKCQkJCQl9CgkJCQl9CgkJCQlpZiAoYmFkID09IDApIHsKCQkJCQlvbC5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQkJfQoKCQkJCXZhciBiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3Ryb25nIik7CgkJCQliLmlubmVySFRNTCA9IG5hbWUgKyAiIDxiIGNsYXNzPSdjb3VudHMnPig8YiBjbGFzcz0nZmFpbGVkJz4iICsgYmFkICsgIjwvYj4sIDxiIGNsYXNzPSdwYXNzZWQnPiIgKyBnb29kICsgIjwvYj4sICIgKyBjb25maWcuYXNzZXJ0aW9ucy5sZW5ndGggKyAiKTwvYj4iOwoKCQkJCWFkZEV2ZW50KGIsICJjbGljayIsIGZ1bmN0aW9uKCkgewoJCQkJCXZhciBuZXh0ID0gYi5uZXh0U2libGluZywgZGlzcGxheSA9IG5leHQuc3R5bGUuZGlzcGxheTsKCQkJCQluZXh0LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5ID09PSAibm9uZSIgPyAiYmxvY2siIDogIm5vbmUiOwoJCQkJfSk7CgoJCQkJYWRkRXZlbnQoYiwgImRibGNsaWNrIiwgZnVuY3Rpb24oZSkgewoJCQkJCXZhciB0YXJnZXQgPSBlICYmIGUudGFyZ2V0ID8gZS50YXJnZXQgOiB3aW5kb3cuZXZlbnQuc3JjRWxlbWVudDsKCQkJCQlpZiAoIHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09ICJzcGFuIiB8fCB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSAiYiIgKSB7CgkJCQkJCXRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlOwoJCQkJCX0KCQkJCQlpZiAoIHdpbmRvdy5sb2NhdGlvbiAmJiB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gInN0cm9uZyIgKSB7CgkJCQkJCXdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggPSAiPyIgKyBlbmNvZGVVUklDb21wb25lbnQoZ2V0VGV4dChbdGFyZ2V0XSkucmVwbGFjZSgvXCguK1wpJC8sICIiKS5yZXBsYWNlKC8oXlxzKnxccyokKS9nLCAiIikpOwoJCQkJCX0KCQkJCX0pOwoKCQkJCXZhciBsaSA9IGlkKCJjdXJyZW50LXRlc3Qtb3V0cHV0Iik7CgkJCQlsaS5pZCA9ICIiOwoJCQkJbGkuY2xhc3NOYW1lID0gYmFkID8gImZhaWwiIDogInBhc3MiOwoJCQkJbGkucmVtb3ZlQ2hpbGQoIGxpLmZpcnN0Q2hpbGQgKTsKCQkJCWxpLmFwcGVuZENoaWxkKCBiICk7CgkJCQlsaS5hcHBlbmRDaGlsZCggb2wgKTsKCgkJCQlpZiAoIGJhZCApIHsKCQkJCQl2YXIgdG9vbGJhciA9IGlkKCJxdW5pdC10ZXN0cnVubmVyLXRvb2xiYXIiKTsKCQkJCQlpZiAoIHRvb2xiYXIgKSB7CgkJCQkJCXRvb2xiYXIuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CgkJCQkJCWlkKCJxdW5pdC1maWx0ZXItcGFzcyIpLmRpc2FibGVkID0gbnVsbDsKCQkJCQkJaWQoInF1bml0LWZpbHRlci1taXNzaW5nIikuZGlzYWJsZWQgPSBudWxsOwoJCQkJCX0KCQkJCX0KCgkJCX0gZWxzZSB7CgkJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb25maWcuYXNzZXJ0aW9ucy5sZW5ndGg7IGkrKyApIHsKCQkJCQlpZiAoICFjb25maWcuYXNzZXJ0aW9uc1tpXS5yZXN1bHQgKSB7CgkJCQkJCWJhZCsrOwoJCQkJCQljb25maWcuc3RhdHMuYmFkKys7CgkJCQkJCWNvbmZpZy5tb2R1bGVTdGF0cy5iYWQrKzsKCQkJCQl9CgkJCQl9CgkJCX0KCgkJCVFVbml0LnRlc3REb25lKCB0ZXN0TmFtZSwgYmFkLCBjb25maWcuYXNzZXJ0aW9ucy5sZW5ndGggKTsKCgkJCWlmICggIXdpbmRvdy5zZXRUaW1lb3V0ICYmICFjb25maWcucXVldWUubGVuZ3RoICkgewoJCQkJZG9uZSgpOwoJCQl9CgkJfSk7CgoJCXN5bmNocm9uaXplKCBkb25lICk7Cgl9LAoKCS8qKgoJICogU3BlY2lmeSB0aGUgbnVtYmVyIG9mIGV4cGVjdGVkIGFzc2VydGlvbnMgdG8gZ3VyYW50ZWUgdGhhdCBmYWlsZWQgdGVzdCAobm8gYXNzZXJ0aW9ucyBhcmUgcnVuIGF0IGFsbCkgZG9uJ3Qgc2xpcCB0aHJvdWdoLgoJICovCglleHBlY3Q6IGZ1bmN0aW9uKGFzc2VydHMpIHsKCQljb25maWcuZXhwZWN0ZWQgPSBhc3NlcnRzOwoJfSwKCgkvKioKCSAqIEFzc2VydHMgdHJ1ZS4KCSAqIEBleGFtcGxlIG9rKCAiYXNkZmFzZGYiLmxlbmd0aCA+IDUsICJUaGVyZSBtdXN0IGJlIGF0IGxlYXN0IDUgY2hhcnMiICk7CgkgKi8KCW9rOiBmdW5jdGlvbihhLCBtc2cpIHsKCQltc2cgPSBlc2NhcGVIdG1sKG1zZyk7CgkJUVVuaXQubG9nKGEsIG1zZyk7CgoJCWNvbmZpZy5hc3NlcnRpb25zLnB1c2goewoJCQlyZXN1bHQ6ICEhYSwKCQkJbWVzc2FnZTogbXNnCgkJfSk7Cgl9LAoKCS8qKgoJICogQ2hlY2tzIHRoYXQgdGhlIGZpcnN0IHR3byBhcmd1bWVudHMgYXJlIGVxdWFsLCB3aXRoIGFuIG9wdGlvbmFsIG1lc3NhZ2UuCgkgKiBQcmludHMgb3V0IGJvdGggYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMuCgkgKgoJICogUHJlZmVyZWQgdG8gb2soIGFjdHVhbCA9PSBleHBlY3RlZCwgbWVzc2FnZSApCgkgKgoJICogQGV4YW1wbGUgZXF1YWwoIGZvcm1hdCgiUmVjZWl2ZWQgezB9IGJ5dGVzLiIsIDIpLCAiUmVjZWl2ZWQgMiBieXRlcy4iICk7CgkgKgoJICogQHBhcmFtIE9iamVjdCBhY3R1YWwKCSAqIEBwYXJhbSBPYmplY3QgZXhwZWN0ZWQKCSAqIEBwYXJhbSBTdHJpbmcgbWVzc2FnZSAob3B0aW9uYWwpCgkgKi8KCWVxdWFsOiBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CgkJcHVzaChleHBlY3RlZCA9PSBhY3R1YWwsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOwoJfSwKCglub3RFcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewoJCXB1c2goZXhwZWN0ZWQgIT0gYWN0dWFsLCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKTsKCX0sCgoJZGVlcEVxdWFsOiBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CgkJcHVzaChRVW5pdC5lcXVpdihhY3R1YWwsIGV4cGVjdGVkKSwgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSk7Cgl9LAoKCW5vdERlZXBFcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewoJCXB1c2goIVFVbml0LmVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQpLCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKTsKCX0sCgoJc3RyaWN0RXF1YWw6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKCQlwdXNoKGV4cGVjdGVkID09PSBhY3R1YWwsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOwoJfSwKCglub3RTdHJpY3RFcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewoJCXB1c2goZXhwZWN0ZWQgIT09IGFjdHVhbCwgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSk7Cgl9LAoKCXJhaXNlczogZnVuY3Rpb24oZm4sICBtZXNzYWdlKSB7CgkJdHJ5IHsKCQkJZm4oKTsKCQkJb2soIGZhbHNlLCBtZXNzYWdlICk7CgkJfQoJCWNhdGNoIChlKSB7CgkJCW9rKCB0cnVlLCBtZXNzYWdlICk7CgkJfQoJfSwKCglzdGFydDogZnVuY3Rpb24oKSB7CgkJLy8gQSBzbGlnaHQgZGVsYXksIHRvIGF2b2lkIGFueSBjdXJyZW50IGNhbGxiYWNrcwoJCWlmICggd2luZG93LnNldFRpbWVvdXQgKSB7CgkJCXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoJCQkJaWYgKCBjb25maWcudGltZW91dCApIHsKCQkJCQljbGVhclRpbWVvdXQoY29uZmlnLnRpbWVvdXQpOwoJCQkJfQoKCQkJCWNvbmZpZy5ibG9ja2luZyA9IGZhbHNlOwoJCQkJcHJvY2VzcygpOwoJCQl9LCAxMyk7CgkJfSBlbHNlIHsKCQkJY29uZmlnLmJsb2NraW5nID0gZmFsc2U7CgkJCXByb2Nlc3MoKTsKCQl9Cgl9LAoKCXN0b3A6IGZ1bmN0aW9uKHRpbWVvdXQpIHsKCQljb25maWcuYmxvY2tpbmcgPSB0cnVlOwoKCQlpZiAoIHRpbWVvdXQgJiYgd2luZG93LnNldFRpbWVvdXQgKSB7CgkJCWNvbmZpZy50aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCQlRVW5pdC5vayggZmFsc2UsICJUZXN0IHRpbWVkIG91dCIgKTsKCQkJCVFVbml0LnN0YXJ0KCk7CgkJCX0sIHRpbWVvdXQpOwoJCX0KCX0KCn07CgovLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgZGVwcmVjYXRlZApRVW5pdC5lcXVhbHMgPSBRVW5pdC5lcXVhbDsKUVVuaXQuc2FtZSA9IFFVbml0LmRlZXBFcXVhbDsKCi8vIE1haW50YWluIGludGVybmFsIHN0YXRlCnZhciBjb25maWcgPSB7CgkvLyBUaGUgcXVldWUgb2YgdGVzdHMgdG8gcnVuCglxdWV1ZTogW10sCgoJLy8gYmxvY2sgdW50aWwgZG9jdW1lbnQgcmVhZHkKCWJsb2NraW5nOiB0cnVlCn07CgovLyBMb2FkIHBhcmFtYXRlcnMKKGZ1bmN0aW9uKCkgewoJdmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uIHx8IHsgc2VhcmNoOiAiIiwgcHJvdG9jb2w6ICJmaWxlOiIgfSwKCQlHRVRQYXJhbXMgPSBsb2NhdGlvbi5zZWFyY2guc2xpY2UoMSkuc3BsaXQoJyYnKTsKCglmb3IgKCB2YXIgaSA9IDA7IGkgPCBHRVRQYXJhbXMubGVuZ3RoOyBpKysgKSB7CgkJR0VUUGFyYW1zW2ldID0gZGVjb2RlVVJJQ29tcG9uZW50KCBHRVRQYXJhbXNbaV0gKTsKCQlpZiAoIEdFVFBhcmFtc1tpXSA9PT0gIm5vZ2xvYmFscyIgKSB7CgkJCUdFVFBhcmFtcy5zcGxpY2UoIGksIDEgKTsKCQkJaS0tOwoJCQljb25maWcubm9nbG9iYWxzID0gdHJ1ZTsKCQl9IGVsc2UgaWYgKCBHRVRQYXJhbXNbaV0uc2VhcmNoKCc9JykgPiAtMSApIHsKCQkJR0VUUGFyYW1zLnNwbGljZSggaSwgMSApOwoJCQlpLS07CgkJfQoJfQoKCS8vIHJlc3RyaWN0IG1vZHVsZXMvdGVzdHMgYnkgZ2V0IHBhcmFtZXRlcnMKCWNvbmZpZy5maWx0ZXJzID0gR0VUUGFyYW1zOwoKCS8vIEZpZ3VyZSBvdXQgaWYgd2UncmUgcnVubmluZyB0aGUgdGVzdHMgZnJvbSBhIHNlcnZlciBvciBub3QKCVFVbml0LmlzTG9jYWwgPSAhIShsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2ZpbGU6Jyk7Cn0pKCk7CgovLyBFeHBvc2UgdGhlIEFQSSBhcyBnbG9iYWwgdmFyaWFibGVzLCB1bmxlc3MgYW4gJ2V4cG9ydHMnCi8vIG9iamVjdCBleGlzdHMsIGluIHRoYXQgY2FzZSB3ZSBhc3N1bWUgd2UncmUgaW4gQ29tbW9uSlMKaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gInVuZGVmaW5lZCIgfHwgdHlwZW9mIHJlcXVpcmUgPT09ICJ1bmRlZmluZWQiICkgewoJZXh0ZW5kKHdpbmRvdywgUVVuaXQpOwoJd2luZG93LlFVbml0ID0gUVVuaXQ7Cn0gZWxzZSB7CglleHRlbmQoZXhwb3J0cywgUVVuaXQpOwoJZXhwb3J0cy5RVW5pdCA9IFFVbml0Owp9CgovLyBkZWZpbmUgdGhlc2UgYWZ0ZXIgZXhwb3NpbmcgZ2xvYmFscyB0byBrZWVwIHRoZW0gaW4gdGhlc2UgUVVuaXQgbmFtZXNwYWNlIG9ubHkKZXh0ZW5kKFFVbml0LCB7Cgljb25maWc6IGNvbmZpZywKCgkvLyBJbml0aWFsaXplIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMKCWluaXQ6IGZ1bmN0aW9uKCkgewoJCWV4dGVuZChjb25maWcsIHsKCQkJc3RhdHM6IHsgYWxsOiAwLCBiYWQ6IDAgfSwKCQkJbW9kdWxlU3RhdHM6IHsgYWxsOiAwLCBiYWQ6IDAgfSwKCQkJc3RhcnRlZDogK25ldyBEYXRlLAoJCQl1cGRhdGVSYXRlOiAxMDAwLAoJCQlibG9ja2luZzogZmFsc2UsCgkJCWF1dG9zdGFydDogdHJ1ZSwKCQkJYXV0b3J1bjogZmFsc2UsCgkJCWFzc2VydGlvbnM6IFtdLAoJCQlmaWx0ZXJzOiBbXSwKCQkJcXVldWU6IFtdCgkJfSk7CgoJCXZhciB0ZXN0cyA9IGlkKCJxdW5pdC10ZXN0cyIpLAoJCQliYW5uZXIgPSBpZCgicXVuaXQtYmFubmVyIiksCgkJCXJlc3VsdCA9IGlkKCJxdW5pdC10ZXN0cmVzdWx0Iik7CgoJCWlmICggdGVzdHMgKSB7CgkJCXRlc3RzLmlubmVySFRNTCA9ICIiOwoJCX0KCgkJaWYgKCBiYW5uZXIgKSB7CgkJCWJhbm5lci5jbGFzc05hbWUgPSAiIjsKCQl9CgoJCWlmICggcmVzdWx0ICkgewoJCQlyZXN1bHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggcmVzdWx0ICk7CgkJfQoJfSwKCgkvKioKCSAqIFJlc2V0cyB0aGUgdGVzdCBzZXR1cC4gVXNlZnVsIGZvciB0ZXN0cyB0aGF0IG1vZGlmeSB0aGUgRE9NLgoJICovCglyZXNldDogZnVuY3Rpb24oKSB7CgkJaWYgKCB3aW5kb3cualF1ZXJ5ICkgewoJCQlqUXVlcnkoIiNtYWluLCAjcXVuaXQtZml4dHVyZSIpLmh0bWwoIGNvbmZpZy5maXh0dXJlICk7CgkJfQoJfSwKCgkvKioKCSAqIFRyaWdnZXIgYW4gZXZlbnQgb24gYW4gZWxlbWVudC4KCSAqCgkgKiBAZXhhbXBsZSB0cmlnZ2VyRXZlbnQoIGRvY3VtZW50LmJvZHksICJjbGljayIgKTsKCSAqCgkgKiBAcGFyYW0gRE9NRWxlbWVudCBlbGVtCgkgKiBAcGFyYW0gU3RyaW5nIHR5cGUKCSAqLwoJdHJpZ2dlckV2ZW50OiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZXZlbnQgKSB7CgkJaWYgKCBkb2N1bWVudC5jcmVhdGVFdmVudCApIHsKCQkJZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgiTW91c2VFdmVudHMiKTsKCQkJZXZlbnQuaW5pdE1vdXNlRXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSwgZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LAoJCQkJMCwgMCwgMCwgMCwgMCwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpOwoJCQllbGVtLmRpc3BhdGNoRXZlbnQoIGV2ZW50ICk7CgoJCX0gZWxzZSBpZiAoIGVsZW0uZmlyZUV2ZW50ICkgewoJCQllbGVtLmZpcmVFdmVudCgib24iK3R5cGUpOwoJCX0KCX0sCgoJLy8gU2FmZSBvYmplY3QgdHlwZSBjaGVja2luZwoJaXM6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7CgkJcmV0dXJuIFFVbml0Lm9iamVjdFR5cGUoIG9iaiApID09IHR5cGU7Cgl9LAoKCW9iamVjdFR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7CgkJaWYgKHR5cGVvZiBvYmogPT09ICJ1bmRlZmluZWQiKSB7CgkJCQlyZXR1cm4gInVuZGVmaW5lZCI7CgoJCS8vIGNvbnNpZGVyOiB0eXBlb2YgbnVsbCA9PT0gb2JqZWN0CgkJfQoJCWlmIChvYmogPT09IG51bGwpIHsKCQkJCXJldHVybiAibnVsbCI7CgkJfQoKCQl2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCggb2JqICkKCQkJLm1hdGNoKC9eXFtvYmplY3RccyguKilcXSQvKVsxXSB8fCAnJzsKCgkJc3dpdGNoICh0eXBlKSB7CgkJCQljYXNlICdOdW1iZXInOgoJCQkJCQlpZiAoaXNOYU4ob2JqKSkgewoJCQkJCQkJCXJldHVybiAibmFuIjsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQlyZXR1cm4gIm51bWJlciI7CgkJCQkJCX0KCQkJCWNhc2UgJ1N0cmluZyc6CgkJCQljYXNlICdCb29sZWFuJzoKCQkJCWNhc2UgJ0FycmF5JzoKCQkJCWNhc2UgJ0RhdGUnOgoJCQkJY2FzZSAnUmVnRXhwJzoKCQkJCWNhc2UgJ0Z1bmN0aW9uJzoKCQkJCQkJcmV0dXJuIHR5cGUudG9Mb3dlckNhc2UoKTsKCQl9CgkJaWYgKHR5cGVvZiBvYmogPT09ICJvYmplY3QiKSB7CgkJCQlyZXR1cm4gIm9iamVjdCI7CgkJfQoJCXJldHVybiB1bmRlZmluZWQ7Cgl9LAoKCS8vIExvZ2dpbmcgY2FsbGJhY2tzCgliZWdpbjogZnVuY3Rpb24oKSB7fSwKCWRvbmU6IGZ1bmN0aW9uKGZhaWx1cmVzLCB0b3RhbCkge30sCglsb2c6IGZ1bmN0aW9uKHJlc3VsdCwgbWVzc2FnZSkge30sCgl0ZXN0U3RhcnQ6IGZ1bmN0aW9uKG5hbWUsIHRlc3RFbnZpcm9ubWVudCkge30sCgl0ZXN0RG9uZTogZnVuY3Rpb24obmFtZSwgZmFpbHVyZXMsIHRvdGFsKSB7fSwKCW1vZHVsZVN0YXJ0OiBmdW5jdGlvbihuYW1lLCB0ZXN0RW52aXJvbm1lbnQpIHt9LAoJbW9kdWxlRG9uZTogZnVuY3Rpb24obmFtZSwgZmFpbHVyZXMsIHRvdGFsKSB7fQp9KTsKCmlmICggdHlwZW9mIGRvY3VtZW50ID09PSAidW5kZWZpbmVkIiB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAiY29tcGxldGUiICkgewoJY29uZmlnLmF1dG9ydW4gPSB0cnVlOwp9CgphZGRFdmVudCh3aW5kb3csICJsb2FkIiwgZnVuY3Rpb24oKSB7CglRVW5pdC5iZWdpbigpOwoKCS8vIEluaXRpYWxpemUgdGhlIGNvbmZpZywgc2F2aW5nIHRoZSBleGVjdXRpb24gcXVldWUKCXZhciBvbGRjb25maWcgPSBleHRlbmQoe30sIGNvbmZpZyk7CglRVW5pdC5pbml0KCk7CglleHRlbmQoY29uZmlnLCBvbGRjb25maWcpOwoKCWNvbmZpZy5ibG9ja2luZyA9IGZhbHNlOwoKCXZhciB1c2VyQWdlbnQgPSBpZCgicXVuaXQtdXNlckFnZW50Iik7CglpZiAoIHVzZXJBZ2VudCApIHsKCQl1c2VyQWdlbnQuaW5uZXJIVE1MID0gbmF2aWdhdG9yLnVzZXJBZ2VudDsKCX0KCXZhciBiYW5uZXIgPSBpZCgicXVuaXQtaGVhZGVyIik7CglpZiAoIGJhbm5lciApIHsKCQliYW5uZXIuaW5uZXJIVE1MID0gJzxhIGhyZWY9IicgKyBsb2NhdGlvbi5ocmVmICsgJyI+JyArIGJhbm5lci5pbm5lckhUTUwgKyAnPC9hPic7Cgl9CgoJdmFyIHRvb2xiYXIgPSBpZCgicXVuaXQtdGVzdHJ1bm5lci10b29sYmFyIik7CglpZiAoIHRvb2xiYXIgKSB7CgkJdG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoKCQl2YXIgZmlsdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKTsKCQlmaWx0ZXIudHlwZSA9ICJjaGVja2JveCI7CgkJZmlsdGVyLmlkID0gInF1bml0LWZpbHRlci1wYXNzIjsKCQlmaWx0ZXIuZGlzYWJsZWQgPSB0cnVlOwoJCWFkZEV2ZW50KCBmaWx0ZXIsICJjbGljayIsIGZ1bmN0aW9uKCkgewoJCQl2YXIgbGkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgibGkiKTsKCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgbGkubGVuZ3RoOyBpKysgKSB7CgkJCQlpZiAoIGxpW2ldLmNsYXNzTmFtZS5pbmRleE9mKCJwYXNzIikgPiAtMSApIHsKCQkJCQlsaVtpXS5zdHlsZS5kaXNwbGF5ID0gZmlsdGVyLmNoZWNrZWQgPyAibm9uZSIgOiAiIjsKCQkJCX0KCQkJfQoJCX0pOwoJCXRvb2xiYXIuYXBwZW5kQ2hpbGQoIGZpbHRlciApOwoKCQl2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsYWJlbCIpOwoJCWxhYmVsLnNldEF0dHJpYnV0ZSgiZm9yIiwgInF1bml0LWZpbHRlci1wYXNzIik7CgkJbGFiZWwuaW5uZXJIVE1MID0gIkhpZGUgcGFzc2VkIHRlc3RzIjsKCQl0b29sYmFyLmFwcGVuZENoaWxkKCBsYWJlbCApOwoKCQl2YXIgbWlzc2luZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CgkJbWlzc2luZy50eXBlID0gImNoZWNrYm94IjsKCQltaXNzaW5nLmlkID0gInF1bml0LWZpbHRlci1taXNzaW5nIjsKCQltaXNzaW5nLmRpc2FibGVkID0gdHJ1ZTsKCQlhZGRFdmVudCggbWlzc2luZywgImNsaWNrIiwgZnVuY3Rpb24oKSB7CgkJCXZhciBsaSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJsaSIpOwoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBsaS5sZW5ndGg7IGkrKyApIHsKCQkJCWlmICggbGlbaV0uY2xhc3NOYW1lLmluZGV4T2YoImZhaWwiKSA+IC0xICYmIGxpW2ldLmlubmVySFRNTC5pbmRleE9mKCdtaXNzaW5nIHRlc3QgLSB1bnRlc3RlZCBjb2RlIGlzIGJyb2tlbiBjb2RlJykgPiAtIDEgKSB7CgkJCQkJbGlbaV0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSBtaXNzaW5nLmNoZWNrZWQgPyAibm9uZSIgOiAiYmxvY2siOwoJCQkJfQoJCQl9CgkJfSk7CgkJdG9vbGJhci5hcHBlbmRDaGlsZCggbWlzc2luZyApOwoKCQlsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxhYmVsIik7CgkJbGFiZWwuc2V0QXR0cmlidXRlKCJmb3IiLCAicXVuaXQtZmlsdGVyLW1pc3NpbmciKTsKCQlsYWJlbC5pbm5lckhUTUwgPSAiSGlkZSBtaXNzaW5nIHRlc3RzICh1bnRlc3RlZCBjb2RlIGlzIGJyb2tlbiBjb2RlKSI7CgkJdG9vbGJhci5hcHBlbmRDaGlsZCggbGFiZWwgKTsKCX0KCgl2YXIgbWFpbiA9IGlkKCdtYWluJykgfHwgaWQoJ3F1bml0LWZpeHR1cmUnKTsKCWlmICggbWFpbiApIHsKCQljb25maWcuZml4dHVyZSA9IG1haW4uaW5uZXJIVE1MOwoJfQoKCWlmIChjb25maWcuYXV0b3N0YXJ0KSB7CgkJUVVuaXQuc3RhcnQoKTsKCX0KfSk7CgpmdW5jdGlvbiBkb25lKCkgewoJaWYgKCBjb25maWcuZG9uZVRpbWVyICYmIHdpbmRvdy5jbGVhclRpbWVvdXQgKSB7CgkJd2luZG93LmNsZWFyVGltZW91dCggY29uZmlnLmRvbmVUaW1lciApOwoJCWNvbmZpZy5kb25lVGltZXIgPSBudWxsOwoJfQoKCWlmICggY29uZmlnLnF1ZXVlLmxlbmd0aCApIHsKCQljb25maWcuZG9uZVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXsKCQkJaWYgKCAhY29uZmlnLnF1ZXVlLmxlbmd0aCApIHsKCQkJCWRvbmUoKTsKCQkJfSBlbHNlIHsKCQkJCXN5bmNocm9uaXplKCBkb25lICk7CgkJCX0KCQl9LCAxMyk7CgoJCXJldHVybjsKCX0KCgljb25maWcuYXV0b3J1biA9IHRydWU7CgoJLy8gTG9nIHRoZSBsYXN0IG1vZHVsZSByZXN1bHRzCglpZiAoIGNvbmZpZy5jdXJyZW50TW9kdWxlICkgewoJCVFVbml0Lm1vZHVsZURvbmUoIGNvbmZpZy5jdXJyZW50TW9kdWxlLCBjb25maWcubW9kdWxlU3RhdHMuYmFkLCBjb25maWcubW9kdWxlU3RhdHMuYWxsICk7Cgl9CgoJdmFyIGJhbm5lciA9IGlkKCJxdW5pdC1iYW5uZXIiKSwKCQl0ZXN0cyA9IGlkKCJxdW5pdC10ZXN0cyIpLAoJCWh0bWwgPSBbJ1Rlc3RzIGNvbXBsZXRlZCBpbiAnLAoJCStuZXcgRGF0ZSAtIGNvbmZpZy5zdGFydGVkLCAnIG1pbGxpc2Vjb25kcy48YnIvPicsCgkJJzxzcGFuIGNsYXNzPSJwYXNzZWQiPicsIGNvbmZpZy5zdGF0cy5hbGwgLSBjb25maWcuc3RhdHMuYmFkLCAnPC9zcGFuPiB0ZXN0cyBvZiA8c3BhbiBjbGFzcz0idG90YWwiPicsIGNvbmZpZy5zdGF0cy5hbGwsICc8L3NwYW4+IHBhc3NlZCwgPHNwYW4gY2xhc3M9ImZhaWxlZCI+JywgY29uZmlnLnN0YXRzLmJhZCwnPC9zcGFuPiBmYWlsZWQuJ10uam9pbignJyk7CgoJaWYgKCBiYW5uZXIgKSB7CgkJYmFubmVyLmNsYXNzTmFtZSA9IChjb25maWcuc3RhdHMuYmFkID8gInF1bml0LWZhaWwiIDogInF1bml0LXBhc3MiKTsKCX0KCglpZiAoIHRlc3RzICkgewoJCXZhciByZXN1bHQgPSBpZCgicXVuaXQtdGVzdHJlc3VsdCIpOwoKCQlpZiAoICFyZXN1bHQgKSB7CgkJCXJlc3VsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInAiKTsKCQkJcmVzdWx0LmlkID0gInF1bml0LXRlc3RyZXN1bHQiOwoJCQlyZXN1bHQuY2xhc3NOYW1lID0gInJlc3VsdCI7CgkJCXRlc3RzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCByZXN1bHQsIHRlc3RzLm5leHRTaWJsaW5nICk7CgkJfQoKCQlyZXN1bHQuaW5uZXJIVE1MID0gaHRtbDsKCX0KCglRVW5pdC5kb25lKCBjb25maWcuc3RhdHMuYmFkLCBjb25maWcuc3RhdHMuYWxsICk7Cn0KCmZ1bmN0aW9uIHZhbGlkVGVzdCggbmFtZSApIHsKCXZhciBpID0gY29uZmlnLmZpbHRlcnMubGVuZ3RoLAoJCXJ1biA9IGZhbHNlOwoKCWlmICggIWkgKSB7CgkJcmV0dXJuIHRydWU7Cgl9CgoJd2hpbGUgKCBpLS0gKSB7CgkJdmFyIGZpbHRlciA9IGNvbmZpZy5maWx0ZXJzW2ldLAoJCQlub3QgPSBmaWx0ZXIuY2hhckF0KDApID09ICchJzsKCgkJaWYgKCBub3QgKSB7CgkJCWZpbHRlciA9IGZpbHRlci5zbGljZSgxKTsKCQl9CgoJCWlmICggbmFtZS5pbmRleE9mKGZpbHRlcikgIT09IC0xICkgewoJCQlyZXR1cm4gIW5vdDsKCQl9CgoJCWlmICggbm90ICkgewoJCQlydW4gPSB0cnVlOwoJCX0KCX0KCglyZXR1cm4gcnVuOwp9CgpmdW5jdGlvbiBlc2NhcGVIdG1sKHMpIHsKCXMgPSBzID09PSBudWxsID8gIiIgOiBzICsgIiI7CglyZXR1cm4gcy5yZXBsYWNlKC9bXCYiPD5cXF0vZywgZnVuY3Rpb24ocykgewoJCXN3aXRjaChzKSB7CgkJCWNhc2UgIiYiOiByZXR1cm4gIiZhbXA7IjsKCQkJY2FzZSAiXFwiOiByZXR1cm4gIlxcXFwiOwoJCQljYXNlICciJzogcmV0dXJuICdcIic7CgkJCWNhc2UgIjwiOiByZXR1cm4gIiZsdDsiOwoJCQljYXNlICI+IjogcmV0dXJuICImZ3Q7IjsKCQkJZGVmYXVsdDogcmV0dXJuIHM7CgkJfQoJfSk7Cn0KCmZ1bmN0aW9uIHB1c2gocmVzdWx0LCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CgltZXNzYWdlID0gZXNjYXBlSHRtbChtZXNzYWdlKSB8fCAocmVzdWx0ID8gIm9rYXkiIDogImZhaWxlZCIpOwoJbWVzc2FnZSA9ICc8c3BhbiBjbGFzcz0idGVzdC1tZXNzYWdlIj4nICsgbWVzc2FnZSArICI8L3NwYW4+IjsKCWV4cGVjdGVkID0gZXNjYXBlSHRtbChRVW5pdC5qc0R1bXAucGFyc2UoZXhwZWN0ZWQpKTsKCWFjdHVhbCA9IGVzY2FwZUh0bWwoUVVuaXQuanNEdW1wLnBhcnNlKGFjdHVhbCkpOwoJdmFyIG91dHB1dCA9IG1lc3NhZ2UgKyAnLCBleHBlY3RlZDogPHNwYW4gY2xhc3M9InRlc3QtZXhwZWN0ZWQiPicgKyBleHBlY3RlZCArICc8L3NwYW4+JzsKCWlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIHsKCQlvdXRwdXQgKz0gJyByZXN1bHQ6IDxzcGFuIGNsYXNzPSJ0ZXN0LWFjdHVhbCI+JyArIGFjdHVhbCArICc8L3NwYW4+LCBkaWZmOiAnICsgUVVuaXQuZGlmZihleHBlY3RlZCwgYWN0dWFsKTsKCX0KCgkvLyBjYW4ndCB1c2Ugb2ssIGFzIHRoYXQgd291bGQgZG91YmxlLWVzY2FwZSBtZXNzYWdlcwoJUVVuaXQubG9nKHJlc3VsdCwgb3V0cHV0KTsKCWNvbmZpZy5hc3NlcnRpb25zLnB1c2goewoJCXJlc3VsdDogISFyZXN1bHQsCgkJbWVzc2FnZTogb3V0cHV0Cgl9KTsKfQoKZnVuY3Rpb24gc3luY2hyb25pemUoIGNhbGxiYWNrICkgewoJY29uZmlnLnF1ZXVlLnB1c2goIGNhbGxiYWNrICk7CgoJaWYgKCBjb25maWcuYXV0b3J1biAmJiAhY29uZmlnLmJsb2NraW5nICkgewoJCXByb2Nlc3MoKTsKCX0KfQoKZnVuY3Rpb24gcHJvY2VzcygpIHsKCXZhciBzdGFydCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7CgoJd2hpbGUgKCBjb25maWcucXVldWUubGVuZ3RoICYmICFjb25maWcuYmxvY2tpbmcgKSB7CgkJaWYgKCBjb25maWcudXBkYXRlUmF0ZSA8PSAwIHx8ICgoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAtIHN0YXJ0KSA8IGNvbmZpZy51cGRhdGVSYXRlKSApIHsKCQkJY29uZmlnLnF1ZXVlLnNoaWZ0KCkoKTsKCgkJfSBlbHNlIHsKCQkJc2V0VGltZW91dCggcHJvY2VzcywgMTMgKTsKCQkJYnJlYWs7CgkJfQoJfQp9CgpmdW5jdGlvbiBzYXZlR2xvYmFsKCkgewoJY29uZmlnLnBvbGx1dGlvbiA9IFtdOwoKCWlmICggY29uZmlnLm5vZ2xvYmFscyApIHsKCQlmb3IgKCB2YXIga2V5IGluIHdpbmRvdyApIHsKCQkJY29uZmlnLnBvbGx1dGlvbi5wdXNoKCBrZXkgKTsKCQl9Cgl9Cn0KCmZ1bmN0aW9uIGNoZWNrUG9sbHV0aW9uKCBuYW1lICkgewoJdmFyIG9sZCA9IGNvbmZpZy5wb2xsdXRpb247CglzYXZlR2xvYmFsKCk7CgoJdmFyIG5ld0dsb2JhbHMgPSBkaWZmKCBvbGQsIGNvbmZpZy5wb2xsdXRpb24gKTsKCWlmICggbmV3R2xvYmFscy5sZW5ndGggPiAwICkgewoJCW9rKCBmYWxzZSwgIkludHJvZHVjZWQgZ2xvYmFsIHZhcmlhYmxlKHMpOiAiICsgbmV3R2xvYmFscy5qb2luKCIsICIpICk7CgkJY29uZmlnLmV4cGVjdGVkKys7Cgl9CgoJdmFyIGRlbGV0ZWRHbG9iYWxzID0gZGlmZiggY29uZmlnLnBvbGx1dGlvbiwgb2xkICk7CglpZiAoIGRlbGV0ZWRHbG9iYWxzLmxlbmd0aCA+IDAgKSB7CgkJb2soIGZhbHNlLCAiRGVsZXRlZCBnbG9iYWwgdmFyaWFibGUocyk6ICIgKyBkZWxldGVkR2xvYmFscy5qb2luKCIsICIpICk7CgkJY29uZmlnLmV4cGVjdGVkKys7Cgl9Cn0KCi8vIHJldHVybnMgYSBuZXcgQXJyYXkgd2l0aCB0aGUgZWxlbWVudHMgdGhhdCBhcmUgaW4gYSBidXQgbm90IGluIGIKZnVuY3Rpb24gZGlmZiggYSwgYiApIHsKCXZhciByZXN1bHQgPSBhLnNsaWNlKCk7Cglmb3IgKCB2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKysgKSB7CgkJZm9yICggdmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGorKyApIHsKCQkJaWYgKCByZXN1bHRbaV0gPT09IGJbal0gKSB7CgkJCQlyZXN1bHQuc3BsaWNlKGksIDEpOwoJCQkJaS0tOwoJCQkJYnJlYWs7CgkJCX0KCQl9Cgl9CglyZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBmYWlsKG1lc3NhZ2UsIGV4Y2VwdGlvbiwgY2FsbGJhY2spIHsKCWlmICggdHlwZW9mIGNvbnNvbGUgIT09ICJ1bmRlZmluZWQiICYmIGNvbnNvbGUuZXJyb3IgJiYgY29uc29sZS53YXJuICkgewoJCWNvbnNvbGUuZXJyb3IobWVzc2FnZSk7CgkJY29uc29sZS5lcnJvcihleGNlcHRpb24pOwoJCWNvbnNvbGUud2FybihjYWxsYmFjay50b1N0cmluZygpKTsKCgl9IGVsc2UgaWYgKCB3aW5kb3cub3BlcmEgJiYgb3BlcmEucG9zdEVycm9yICkgewoJCW9wZXJhLnBvc3RFcnJvcihtZXNzYWdlLCBleGNlcHRpb24sIGNhbGxiYWNrLnRvU3RyaW5nKTsKCX0KfQoKZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHsKCWZvciAoIHZhciBwcm9wIGluIGIgKSB7CgkJYVtwcm9wXSA9IGJbcHJvcF07Cgl9CgoJcmV0dXJuIGE7Cn0KCmZ1bmN0aW9uIGFkZEV2ZW50KGVsZW0sIHR5cGUsIGZuKSB7CglpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHsKCQllbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGZuLCBmYWxzZSApOwoJfSBlbHNlIGlmICggZWxlbS5hdHRhY2hFdmVudCApIHsKCQllbGVtLmF0dGFjaEV2ZW50KCAib24iICsgdHlwZSwgZm4gKTsKCX0gZWxzZSB7CgkJZm4oKTsKCX0KfQoKZnVuY3Rpb24gaWQobmFtZSkgewoJcmV0dXJuICEhKHR5cGVvZiBkb2N1bWVudCAhPT0gInVuZGVmaW5lZCIgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQpICYmCgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG5hbWUgKTsKfQoKLy8gVGVzdCBmb3IgZXF1YWxpdHkgYW55IEphdmFTY3JpcHQgdHlwZS4KLy8gRGlzY3Vzc2lvbnMgYW5kIHJlZmVyZW5jZTogaHR0cDovL3BoaWxyYXRoZS5jb20vYXJ0aWNsZXMvZXF1aXYKLy8gVGVzdCBzdWl0ZXM6IGh0dHA6Ly9waGlscmF0aGUuY29tL3Rlc3RzL2VxdWl2Ci8vIEF1dGhvcjogUGhpbGlwcGUgUmF0aMOpIDxwcmF0aGVAZ21haWwuY29tPgpRVW5pdC5lcXVpdiA9IGZ1bmN0aW9uICgpIHsKCiAgICB2YXIgaW5uZXJFcXVpdjsgLy8gdGhlIHJlYWwgZXF1aXYgZnVuY3Rpb24KICAgIHZhciBjYWxsZXJzID0gW107IC8vIHN0YWNrIHRvIGRlY2lkZSBiZXR3ZWVuIHNraXAvYWJvcnQgZnVuY3Rpb25zCiAgICB2YXIgcGFyZW50cyA9IFtdOyAvLyBzdGFjayB0byBhdm9pZGluZyBsb29wcyBmcm9tIGNpcmN1bGFyIHJlZmVyZW5jaW5nCgogICAgLy8gQ2FsbCB0aGUgbyByZWxhdGVkIGNhbGxiYWNrIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50cy4KICAgIGZ1bmN0aW9uIGJpbmRDYWxsYmFja3MobywgY2FsbGJhY2tzLCBhcmdzKSB7CiAgICAgICAgdmFyIHByb3AgPSBRVW5pdC5vYmplY3RUeXBlKG8pOwogICAgICAgIGlmIChwcm9wKSB7CiAgICAgICAgICAgIGlmIChRVW5pdC5vYmplY3RUeXBlKGNhbGxiYWNrc1twcm9wXSkgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFja3NbcHJvcF0uYXBwbHkoY2FsbGJhY2tzLCBhcmdzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFja3NbcHJvcF07IC8vIG9yIHVuZGVmaW5lZAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHZhciBjYWxsYmFja3MgPSBmdW5jdGlvbiAoKSB7CgogICAgICAgIC8vIGZvciBzdHJpbmcsIGJvb2xlYW4sIG51bWJlciBhbmQgbnVsbAogICAgICAgIGZ1bmN0aW9uIHVzZVN0cmljdEVxdWFsaXR5KGIsIGEpIHsKICAgICAgICAgICAgaWYgKGIgaW5zdGFuY2VvZiBhLmNvbnN0cnVjdG9yIHx8IGEgaW5zdGFuY2VvZiBiLmNvbnN0cnVjdG9yKSB7CiAgICAgICAgICAgICAgICAvLyB0byBjYXRjaCBzaG9ydCBhbm5vdGFpb24gVlMgJ25ldycgYW5ub3RhdGlvbiBvZiBhIGRlY2xhcmF0aW9uCiAgICAgICAgICAgICAgICAvLyBlLmcuIHZhciBpID0gMTsKICAgICAgICAgICAgICAgIC8vICAgICAgdmFyIGogPSBuZXcgTnVtYmVyKDEpOwogICAgICAgICAgICAgICAgcmV0dXJuIGEgPT0gYjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBhID09PSBiOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAic3RyaW5nIjogdXNlU3RyaWN0RXF1YWxpdHksCiAgICAgICAgICAgICJib29sZWFuIjogdXNlU3RyaWN0RXF1YWxpdHksCiAgICAgICAgICAgICJudW1iZXIiOiB1c2VTdHJpY3RFcXVhbGl0eSwKICAgICAgICAgICAgIm51bGwiOiB1c2VTdHJpY3RFcXVhbGl0eSwKICAgICAgICAgICAgInVuZGVmaW5lZCI6IHVzZVN0cmljdEVxdWFsaXR5LAoKICAgICAgICAgICAgIm5hbiI6IGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaXNOYU4oYik7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAiZGF0ZSI6IGZ1bmN0aW9uIChiLCBhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUVVuaXQub2JqZWN0VHlwZShiKSA9PT0gImRhdGUiICYmIGEudmFsdWVPZigpID09PSBiLnZhbHVlT2YoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICJyZWdleHAiOiBmdW5jdGlvbiAoYiwgYSkgewogICAgICAgICAgICAgICAgcmV0dXJuIFFVbml0Lm9iamVjdFR5cGUoYikgPT09ICJyZWdleHAiICYmCiAgICAgICAgICAgICAgICAgICAgYS5zb3VyY2UgPT09IGIuc291cmNlICYmIC8vIHRoZSByZWdleCBpdHNlbGYKICAgICAgICAgICAgICAgICAgICBhLmdsb2JhbCA9PT0gYi5nbG9iYWwgJiYgLy8gYW5kIGl0cyBtb2RpZmVycyAoZ21pKSAuLi4KICAgICAgICAgICAgICAgICAgICBhLmlnbm9yZUNhc2UgPT09IGIuaWdub3JlQ2FzZSAmJgogICAgICAgICAgICAgICAgICAgIGEubXVsdGlsaW5lID09PSBiLm11bHRpbGluZTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIC0gc2tpcCB3aGVuIHRoZSBwcm9wZXJ0eSBpcyBhIG1ldGhvZCBvZiBhbiBpbnN0YW5jZSAoT09QKQogICAgICAgICAgICAvLyAtIGFib3J0IG90aGVyd2lzZSwKICAgICAgICAgICAgLy8gICBpbml0aWFsID09PSB3b3VsZCBoYXZlIGNhdGNoIGlkZW50aWNhbCByZWZlcmVuY2VzIGFueXdheQogICAgICAgICAgICAiZnVuY3Rpb24iOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgY2FsbGVyID0gY2FsbGVyc1tjYWxsZXJzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxlciAhPT0gT2JqZWN0ICYmCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjYWxsZXIgIT09ICJ1bmRlZmluZWQiOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgImFycmF5IjogZnVuY3Rpb24gKGIsIGEpIHsKICAgICAgICAgICAgICAgIHZhciBpLCBqLCBsb29wOwogICAgICAgICAgICAgICAgdmFyIGxlbjsKCiAgICAgICAgICAgICAgICAvLyBiIGNvdWxkIGJlIGFuIG9iamVjdCBsaXRlcmFsIGhlcmUKICAgICAgICAgICAgICAgIGlmICggISAoUVVuaXQub2JqZWN0VHlwZShiKSA9PT0gImFycmF5IikpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbGVuID0gYS5sZW5ndGg7CiAgICAgICAgICAgICAgICBpZiAobGVuICE9PSBiLmxlbmd0aCkgeyAvLyBzYWZlIGFuZCBmYXN0ZXIKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy90cmFjayByZWZlcmVuY2UgdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcwogICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGEpOwogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgbG9vcCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGZvcihqPTA7ajxwYXJlbnRzLmxlbmd0aDtqKyspewogICAgICAgICAgICAgICAgICAgICAgICBpZihwYXJlbnRzW2pdID09PSBhW2ldKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3AgPSB0cnVlOy8vZG9udCByZXdhbGsgYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoIWxvb3AgJiYgISBpbm5lckVxdWl2KGFbaV0sIGJbaV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJlbnRzLnBvcCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAib2JqZWN0IjogZnVuY3Rpb24gKGIsIGEpIHsKICAgICAgICAgICAgICAgIHZhciBpLCBqLCBsb29wOwogICAgICAgICAgICAgICAgdmFyIGVxID0gdHJ1ZTsgLy8gdW5sZXNzIHdlIGNhbiBwcm9vdmUgaXQKICAgICAgICAgICAgICAgIHZhciBhUHJvcGVydGllcyA9IFtdLCBiUHJvcGVydGllcyA9IFtdOyAvLyBjb2xsZWN0aW9uIG9mIHN0cmluZ3MKCiAgICAgICAgICAgICAgICAvLyBjb21wYXJpbmcgY29uc3RydWN0b3JzIGlzIG1vcmUgc3RyaWN0IHRoYW4gdXNpbmcgaW5zdGFuY2VvZgogICAgICAgICAgICAgICAgaWYgKCBhLmNvbnN0cnVjdG9yICE9PSBiLmNvbnN0cnVjdG9yKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIHN0YWNrIGNvbnN0cnVjdG9yIGJlZm9yZSB0cmF2ZXJzaW5nIHByb3BlcnRpZXMKICAgICAgICAgICAgICAgIGNhbGxlcnMucHVzaChhLmNvbnN0cnVjdG9yKTsKICAgICAgICAgICAgICAgIC8vdHJhY2sgcmVmZXJlbmNlIHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMKICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChhKTsKCiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gYSkgeyAvLyBiZSBzdHJpY3Q6IGRvbid0IGVuc3VyZXMgaGFzT3duUHJvcGVydHkgYW5kIGdvIGRlZXAKICAgICAgICAgICAgICAgICAgICBsb29wID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgZm9yKGo9MDtqPHBhcmVudHMubGVuZ3RoO2orKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhcmVudHNbal0gPT09IGFbaV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wID0gdHJ1ZTsgLy9kb24ndCBnbyBkb3duIHRoZSBzYW1lIHBhdGggdHdpY2UKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYVByb3BlcnRpZXMucHVzaChpKTsgLy8gY29sbGVjdCBhJ3MgcHJvcGVydGllcwoKICAgICAgICAgICAgICAgICAgICBpZiAoIWxvb3AgJiYgISBpbm5lckVxdWl2KGFbaV0sIGJbaV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVxID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjYWxsZXJzLnBvcCgpOyAvLyB1bnN0YWNrLCB3ZSBhcmUgZG9uZQogICAgICAgICAgICAgICAgcGFyZW50cy5wb3AoKTsKCiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gYikgewogICAgICAgICAgICAgICAgICAgIGJQcm9wZXJ0aWVzLnB1c2goaSk7IC8vIGNvbGxlY3QgYidzIHByb3BlcnRpZXMKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBFbnN1cmVzIGlkZW50aWNhbCBwcm9wZXJ0aWVzIG5hbWUKICAgICAgICAgICAgICAgIHJldHVybiBlcSAmJiBpbm5lckVxdWl2KGFQcm9wZXJ0aWVzLnNvcnQoKSwgYlByb3BlcnRpZXMuc29ydCgpKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9KCk7CgogICAgaW5uZXJFcXVpdiA9IGZ1bmN0aW9uICgpIHsgLy8gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzCiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKTsKICAgICAgICBpZiAoYXJncy5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBlbmQgdHJhbnNpdGlvbgogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICBpZiAoYSA9PT0gYikgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIGNhdGNoIHRoZSBtb3N0IHlvdSBjYW4KICAgICAgICAgICAgfSBlbHNlIGlmIChhID09PSBudWxsIHx8IGIgPT09IG51bGwgfHwgdHlwZW9mIGEgPT09ICJ1bmRlZmluZWQiIHx8IHR5cGVvZiBiID09PSAidW5kZWZpbmVkIiB8fCBRVW5pdC5vYmplY3RUeXBlKGEpICE9PSBRVW5pdC5vYmplY3RUeXBlKGIpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGRvbid0IGxvc2UgdGltZSB3aXRoIGVycm9yIHByb25lIGNhc2VzCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYmluZENhbGxiYWNrcyhhLCBjYWxsYmFja3MsIFtiLCBhXSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgLy8gYXBwbHkgdHJhbnNpdGlvbiB3aXRoICgxLi5uKSBhcmd1bWVudHMKICAgICAgICB9KShhcmdzWzBdLCBhcmdzWzFdKSAmJiBhcmd1bWVudHMuY2FsbGVlLmFwcGx5KHRoaXMsIGFyZ3Muc3BsaWNlKDEsIGFyZ3MubGVuZ3RoIC0xKSk7CiAgICB9OwoKICAgIHJldHVybiBpbm5lckVxdWl2OwoKfSgpOwoKLyoqCiAqIGpzRHVtcAogKiBDb3B5cmlnaHQgKGMpIDIwMDggQXJpZWwgRmxlc2xlciAtIGFmbGVzbGVyKGF0KWdtYWlsKGRvdCljb20gfCBodHRwOi8vZmxlc2xlci5ibG9nc3BvdC5jb20KICogTGljZW5zZWQgdW5kZXIgQlNEIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL2JzZC1saWNlbnNlLnBocCkKICogRGF0ZTogNS8xNS8yMDA4CiAqIEBwcm9qZWN0RGVzY3JpcHRpb24gQWR2YW5jZWQgYW5kIGV4dGVuc2libGUgZGF0YSBkdW1waW5nIGZvciBKYXZhc2NyaXB0LgogKiBAdmVyc2lvbiAxLjAuMAogKiBAYXV0aG9yIEFyaWVsIEZsZXNsZXIKICogQGxpbmsge2h0dHA6Ly9mbGVzbGVyLmJsb2dzcG90LmNvbS8yMDA4LzA1L2pzZHVtcC1wcmV0dHktZHVtcC1vZi1hbnktamF2YXNjcmlwdC5odG1sfQogKi8KUVVuaXQuanNEdW1wID0gKGZ1bmN0aW9uKCkgewoJZnVuY3Rpb24gcXVvdGUoIHN0ciApIHsKCQlyZXR1cm4gJyInICsgc3RyLnRvU3RyaW5nKCkucmVwbGFjZSgvIi9nLCAnXFwiJykgKyAnIic7Cgl9OwoJZnVuY3Rpb24gbGl0ZXJhbCggbyApIHsKCQlyZXR1cm4gbyArICcnOwoJfTsKCWZ1bmN0aW9uIGpvaW4oIHByZSwgYXJyLCBwb3N0ICkgewoJCXZhciBzID0ganNEdW1wLnNlcGFyYXRvcigpLAoJCQliYXNlID0ganNEdW1wLmluZGVudCgpLAoJCQlpbm5lciA9IGpzRHVtcC5pbmRlbnQoMSk7CgkJaWYgKCBhcnIuam9pbiApCgkJCWFyciA9IGFyci5qb2luKCAnLCcgKyBzICsgaW5uZXIgKTsKCQlpZiAoICFhcnIgKQoJCQlyZXR1cm4gcHJlICsgcG9zdDsKCQlyZXR1cm4gWyBwcmUsIGlubmVyICsgYXJyLCBiYXNlICsgcG9zdCBdLmpvaW4ocyk7Cgl9OwoJZnVuY3Rpb24gYXJyYXkoIGFyciApIHsKCQl2YXIgaSA9IGFyci5sZW5ndGgsCXJldCA9IEFycmF5KGkpOwoJCXRoaXMudXAoKTsKCQl3aGlsZSAoIGktLSApCgkJCXJldFtpXSA9IHRoaXMucGFyc2UoIGFycltpXSApOwoJCXRoaXMuZG93bigpOwoJCXJldHVybiBqb2luKCAnWycsIHJldCwgJ10nICk7Cgl9OwoKCXZhciByZU5hbWUgPSAvXmZ1bmN0aW9uIChcdyspLzsKCgl2YXIganNEdW1wID0gewoJCXBhcnNlOmZ1bmN0aW9uKCBvYmosIHR5cGUgKSB7IC8vdHlwZSBpcyB1c2VkIG1vc3RseSBpbnRlcm5hbGx5LCB5b3UgY2FuIGZpeCBhIChjdXN0b20pdHlwZSBpbiBhZHZhbmNlCgkJCXZhcglwYXJzZXIgPSB0aGlzLnBhcnNlcnNbIHR5cGUgfHwgdGhpcy50eXBlT2Yob2JqKSBdOwoJCQl0eXBlID0gdHlwZW9mIHBhcnNlcjsKCgkJCXJldHVybiB0eXBlID09ICdmdW5jdGlvbicgPyBwYXJzZXIuY2FsbCggdGhpcywgb2JqICkgOgoJCQkJICAgdHlwZSA9PSAnc3RyaW5nJyA/IHBhcnNlciA6CgkJCQkgICB0aGlzLnBhcnNlcnMuZXJyb3I7CgkJfSwKCQl0eXBlT2Y6ZnVuY3Rpb24oIG9iaiApIHsKCQkJdmFyIHR5cGU7CgkJCWlmICggb2JqID09PSBudWxsICkgewoJCQkJdHlwZSA9ICJudWxsIjsKCQkJfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAidW5kZWZpbmVkIikgewoJCQkJdHlwZSA9ICJ1bmRlZmluZWQiOwoJCQl9IGVsc2UgaWYgKFFVbml0LmlzKCJSZWdFeHAiLCBvYmopKSB7CgkJCQl0eXBlID0gInJlZ2V4cCI7CgkJCX0gZWxzZSBpZiAoUVVuaXQuaXMoIkRhdGUiLCBvYmopKSB7CgkJCQl0eXBlID0gImRhdGUiOwoJCQl9IGVsc2UgaWYgKFFVbml0LmlzKCJGdW5jdGlvbiIsIG9iaikpIHsKCQkJCXR5cGUgPSAiZnVuY3Rpb24iOwoJCQl9IGVsc2UgaWYgKG9iai5zZXRJbnRlcnZhbCAmJiBvYmouZG9jdW1lbnQgJiYgIW9iai5ub2RlVHlwZSkgewoJCQkJdHlwZSA9ICJ3aW5kb3ciOwoJCQl9IGVsc2UgaWYgKG9iai5ub2RlVHlwZSA9PT0gOSkgewoJCQkJdHlwZSA9ICJkb2N1bWVudCI7CgkJCX0gZWxzZSBpZiAob2JqLm5vZGVUeXBlKSB7CgkJCQl0eXBlID0gIm5vZGUiOwoJCQl9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICJvYmplY3QiICYmIHR5cGVvZiBvYmoubGVuZ3RoID09PSAibnVtYmVyIiAmJiBvYmoubGVuZ3RoID49IDApIHsKCQkJCXR5cGUgPSAiYXJyYXkiOwoJCQl9IGVsc2UgewoJCQkJdHlwZSA9IHR5cGVvZiBvYmo7CgkJCX0KCQkJcmV0dXJuIHR5cGU7CgkJfSwKCQlzZXBhcmF0b3I6ZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLm11bHRpbGluZSA/CXRoaXMuSFRNTCA/ICc8YnIgLz4nIDogJ1xuJyA6IHRoaXMuSFRNTCA/ICcmbmJzcDsnIDogJyAnOwoJCX0sCgkJaW5kZW50OmZ1bmN0aW9uKCBleHRyYSApIHsvLyBleHRyYSBjYW4gYmUgYSBudW1iZXIsIHNob3J0Y3V0IGZvciBpbmNyZWFzaW5nLWNhbGxpbmctZGVjcmVhc2luZwoJCQlpZiAoICF0aGlzLm11bHRpbGluZSApCgkJCQlyZXR1cm4gJyc7CgkJCXZhciBjaHIgPSB0aGlzLmluZGVudENoYXI7CgkJCWlmICggdGhpcy5IVE1MICkKCQkJCWNociA9IGNoci5yZXBsYWNlKC9cdC9nLCcgICAnKS5yZXBsYWNlKC8gL2csJyZuYnNwOycpOwoJCQlyZXR1cm4gQXJyYXkoIHRoaXMuX2RlcHRoXyArIChleHRyYXx8MCkgKS5qb2luKGNocik7CgkJfSwKCQl1cDpmdW5jdGlvbiggYSApIHsKCQkJdGhpcy5fZGVwdGhfICs9IGEgfHwgMTsKCQl9LAoJCWRvd246ZnVuY3Rpb24oIGEgKSB7CgkJCXRoaXMuX2RlcHRoXyAtPSBhIHx8IDE7CgkJfSwKCQlzZXRQYXJzZXI6ZnVuY3Rpb24oIG5hbWUsIHBhcnNlciApIHsKCQkJdGhpcy5wYXJzZXJzW25hbWVdID0gcGFyc2VyOwoJCX0sCgkJLy8gVGhlIG5leHQgMyBhcmUgZXhwb3NlZCBzbyB5b3UgY2FuIHVzZSB0aGVtCgkJcXVvdGU6cXVvdGUsCgkJbGl0ZXJhbDpsaXRlcmFsLAoJCWpvaW46am9pbiwKCQkvLwoJCV9kZXB0aF86IDEsCgkJLy8gVGhpcyBpcyB0aGUgbGlzdCBvZiBwYXJzZXJzLCB0byBtb2RpZnkgdGhlbSwgdXNlIGpzRHVtcC5zZXRQYXJzZXIKCQlwYXJzZXJzOnsKCQkJd2luZG93OiAnW1dpbmRvd10nLAoJCQlkb2N1bWVudDogJ1tEb2N1bWVudF0nLAoJCQllcnJvcjonW0VSUk9SXScsIC8vd2hlbiBubyBwYXJzZXIgaXMgZm91bmQsIHNob3VsZG4ndCBoYXBwZW4KCQkJdW5rbm93bjogJ1tVbmtub3duXScsCgkJCSdudWxsJzonbnVsbCcsCgkJCXVuZGVmaW5lZDondW5kZWZpbmVkJywKCQkJJ2Z1bmN0aW9uJzpmdW5jdGlvbiggZm4gKSB7CgkJCQl2YXIgcmV0ID0gJ2Z1bmN0aW9uJywKCQkJCQluYW1lID0gJ25hbWUnIGluIGZuID8gZm4ubmFtZSA6IChyZU5hbWUuZXhlYyhmbil8fFtdKVsxXTsvL2Z1bmN0aW9ucyBuZXZlciBoYXZlIG5hbWUgaW4gSUUKCQkJCWlmICggbmFtZSApCgkJCQkJcmV0ICs9ICcgJyArIG5hbWU7CgkJCQlyZXQgKz0gJygnOwoKCQkJCXJldCA9IFsgcmV0LCB0aGlzLnBhcnNlKCBmbiwgJ2Z1bmN0aW9uQXJncycgKSwgJyl7J10uam9pbignJyk7CgkJCQlyZXR1cm4gam9pbiggcmV0LCB0aGlzLnBhcnNlKGZuLCdmdW5jdGlvbkNvZGUnKSwgJ30nICk7CgkJCX0sCgkJCWFycmF5OiBhcnJheSwKCQkJbm9kZWxpc3Q6IGFycmF5LAoJCQlhcmd1bWVudHM6IGFycmF5LAoJCQlvYmplY3Q6ZnVuY3Rpb24oIG1hcCApIHsKCQkJCXZhciByZXQgPSBbIF07CgkJCQl0aGlzLnVwKCk7CgkJCQlmb3IgKCB2YXIga2V5IGluIG1hcCApCgkJCQkJcmV0LnB1c2goIHRoaXMucGFyc2Uoa2V5LCdrZXknKSArICc6ICcgKyB0aGlzLnBhcnNlKG1hcFtrZXldKSApOwoJCQkJdGhpcy5kb3duKCk7CgkJCQlyZXR1cm4gam9pbiggJ3snLCByZXQsICd9JyApOwoJCQl9LAoJCQlub2RlOmZ1bmN0aW9uKCBub2RlICkgewoJCQkJdmFyIG9wZW4gPSB0aGlzLkhUTUwgPyAnJmx0OycgOiAnPCcsCgkJCQkJY2xvc2UgPSB0aGlzLkhUTUwgPyAnJmd0OycgOiAnPic7CgoJCQkJdmFyIHRhZyA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwKCQkJCQlyZXQgPSBvcGVuICsgdGFnOwoKCQkJCWZvciAoIHZhciBhIGluIHRoaXMuRE9NQXR0cnMgKSB7CgkJCQkJdmFyIHZhbCA9IG5vZGVbdGhpcy5ET01BdHRyc1thXV07CgkJCQkJaWYgKCB2YWwgKQoJCQkJCQlyZXQgKz0gJyAnICsgYSArICc9JyArIHRoaXMucGFyc2UoIHZhbCwgJ2F0dHJpYnV0ZScgKTsKCQkJCX0KCQkJCXJldHVybiByZXQgKyBjbG9zZSArIG9wZW4gKyAnLycgKyB0YWcgKyBjbG9zZTsKCQkJfSwKCQkJZnVuY3Rpb25BcmdzOmZ1bmN0aW9uKCBmbiApIHsvL2Z1bmN0aW9uIGNhbGxzIGl0IGludGVybmFsbHksIGl0J3MgdGhlIGFyZ3VtZW50cyBwYXJ0IG9mIHRoZSBmdW5jdGlvbgoJCQkJdmFyIGwgPSBmbi5sZW5ndGg7CgkJCQlpZiAoICFsICkgcmV0dXJuICcnOwoKCQkJCXZhciBhcmdzID0gQXJyYXkobCk7CgkJCQl3aGlsZSAoIGwtLSApCgkJCQkJYXJnc1tsXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoOTcrbCk7Ly85NyBpcyAnYScKCQkJCXJldHVybiAnICcgKyBhcmdzLmpvaW4oJywgJykgKyAnICc7CgkJCX0sCgkJCWtleTpxdW90ZSwgLy9vYmplY3QgY2FsbHMgaXQgaW50ZXJuYWxseSwgdGhlIGtleSBwYXJ0IG9mIGFuIGl0ZW0gaW4gYSBtYXAKCQkJZnVuY3Rpb25Db2RlOidbY29kZV0nLCAvL2Z1bmN0aW9uIGNhbGxzIGl0IGludGVybmFsbHksIGl0J3MgdGhlIGNvbnRlbnQgb2YgdGhlIGZ1bmN0aW9uCgkJCWF0dHJpYnV0ZTpxdW90ZSwgLy9ub2RlIGNhbGxzIGl0IGludGVybmFsbHksIGl0J3MgYW4gaHRtbCBhdHRyaWJ1dGUgdmFsdWUKCQkJc3RyaW5nOnF1b3RlLAoJCQlkYXRlOnF1b3RlLAoJCQlyZWdleHA6bGl0ZXJhbCwgLy9yZWdleAoJCQludW1iZXI6bGl0ZXJhbCwKCQkJJ2Jvb2xlYW4nOmxpdGVyYWwKCQl9LAoJCURPTUF0dHJzOnsvL2F0dHJpYnV0ZXMgdG8gZHVtcCBmcm9tIG5vZGVzLCBuYW1lPT5yZWFsTmFtZQoJCQlpZDonaWQnLAoJCQluYW1lOiduYW1lJywKCQkJJ2NsYXNzJzonY2xhc3NOYW1lJwoJCX0sCgkJSFRNTDpmYWxzZSwvL2lmIHRydWUsIGVudGl0aWVzIGFyZSBlc2NhcGVkICggPCwgPiwgXHQsIHNwYWNlIGFuZCBcbiApCgkJaW5kZW50Q2hhcjonICAgJywvL2luZGVudGF0aW9uIHVuaXQKCQltdWx0aWxpbmU6ZmFsc2UgLy9pZiB0cnVlLCBpdGVtcyBpbiBhIGNvbGxlY3Rpb24sIGFyZSBzZXBhcmF0ZWQgYnkgYSBcbiwgZWxzZSBqdXN0IGEgc3BhY2UuCgl9OwoKCXJldHVybiBqc0R1bXA7Cn0pKCk7CgovLyBmcm9tIFNpenpsZS5qcwpmdW5jdGlvbiBnZXRUZXh0KCBlbGVtcyApIHsKCXZhciByZXQgPSAiIiwgZWxlbTsKCglmb3IgKCB2YXIgaSA9IDA7IGVsZW1zW2ldOyBpKysgKSB7CgkJZWxlbSA9IGVsZW1zW2ldOwoKCQkvLyBHZXQgdGhlIHRleHQgZnJvbSB0ZXh0IG5vZGVzIGFuZCBDREFUQSBub2RlcwoJCWlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA0ICkgewoJCQlyZXQgKz0gZWxlbS5ub2RlVmFsdWU7CgoJCS8vIFRyYXZlcnNlIGV2ZXJ5dGhpbmcgZWxzZSwgZXhjZXB0IGNvbW1lbnQgbm9kZXMKCQl9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlICE9PSA4ICkgewoJCQlyZXQgKz0gZ2V0VGV4dCggZWxlbS5jaGlsZE5vZGVzICk7CgkJfQoJfQoKCXJldHVybiByZXQ7Cn07CgovKgogKiBKYXZhc2NyaXB0IERpZmYgQWxnb3JpdGhtCiAqICBCeSBKb2huIFJlc2lnIChodHRwOi8vZWpvaG4ub3JnLykKICogIE1vZGlmaWVkIGJ5IENodSBBbGFuICJzcHJpdGUiCiAqCiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KICoKICogTW9yZSBJbmZvOgogKiAgaHR0cDovL2Vqb2huLm9yZy9wcm9qZWN0cy9qYXZhc2NyaXB0LWRpZmYtYWxnb3JpdGhtLwogKgogKiBVc2FnZTogUVVuaXQuZGlmZihleHBlY3RlZCwgYWN0dWFsKQogKgogKiBRVW5pdC5kaWZmKCJ0aGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIiwgInRoZSBxdWljayBmb3gganVtcHMgb3ZlciIpID09ICJ0aGUgIHF1aWNrIDxkZWw+YnJvd24gPC9kZWw+IGZveCA8ZGVsPmp1bXBlZCA8L2RlbD48aW5zPmp1bXBzIDwvaW5zPiBvdmVyIgogKi8KUVVuaXQuZGlmZiA9IChmdW5jdGlvbigpIHsKCWZ1bmN0aW9uIGRpZmYobywgbil7CgkJdmFyIG5zID0gbmV3IE9iamVjdCgpOwoJCXZhciBvcyA9IG5ldyBPYmplY3QoKTsKCgkJZm9yICh2YXIgaSA9IDA7IGkgPCBuLmxlbmd0aDsgaSsrKSB7CgkJCWlmIChuc1tuW2ldXSA9PSBudWxsKQoJCQkJbnNbbltpXV0gPSB7CgkJCQkJcm93czogbmV3IEFycmF5KCksCgkJCQkJbzogbnVsbAoJCQkJfTsKCQkJbnNbbltpXV0ucm93cy5wdXNoKGkpOwoJCX0KCgkJZm9yICh2YXIgaSA9IDA7IGkgPCBvLmxlbmd0aDsgaSsrKSB7CgkJCWlmIChvc1tvW2ldXSA9PSBudWxsKQoJCQkJb3Nbb1tpXV0gPSB7CgkJCQkJcm93czogbmV3IEFycmF5KCksCgkJCQkJbjogbnVsbAoJCQkJfTsKCQkJb3Nbb1tpXV0ucm93cy5wdXNoKGkpOwoJCX0KCgkJZm9yICh2YXIgaSBpbiBucykgewoJCQlpZiAobnNbaV0ucm93cy5sZW5ndGggPT0gMSAmJiB0eXBlb2Yob3NbaV0pICE9ICJ1bmRlZmluZWQiICYmIG9zW2ldLnJvd3MubGVuZ3RoID09IDEpIHsKCQkJCW5bbnNbaV0ucm93c1swXV0gPSB7CgkJCQkJdGV4dDogbltuc1tpXS5yb3dzWzBdXSwKCQkJCQlyb3c6IG9zW2ldLnJvd3NbMF0KCQkJCX07CgkJCQlvW29zW2ldLnJvd3NbMF1dID0gewoJCQkJCXRleHQ6IG9bb3NbaV0ucm93c1swXV0sCgkJCQkJcm93OiBuc1tpXS5yb3dzWzBdCgkJCQl9OwoJCQl9CgkJfQoKCQlmb3IgKHZhciBpID0gMDsgaSA8IG4ubGVuZ3RoIC0gMTsgaSsrKSB7CgkJCWlmIChuW2ldLnRleHQgIT0gbnVsbCAmJiBuW2kgKyAxXS50ZXh0ID09IG51bGwgJiYgbltpXS5yb3cgKyAxIDwgby5sZW5ndGggJiYgb1tuW2ldLnJvdyArIDFdLnRleHQgPT0gbnVsbCAmJgoJCQluW2kgKyAxXSA9PSBvW25baV0ucm93ICsgMV0pIHsKCQkJCW5baSArIDFdID0gewoJCQkJCXRleHQ6IG5baSArIDFdLAoJCQkJCXJvdzogbltpXS5yb3cgKyAxCgkJCQl9OwoJCQkJb1tuW2ldLnJvdyArIDFdID0gewoJCQkJCXRleHQ6IG9bbltpXS5yb3cgKyAxXSwKCQkJCQlyb3c6IGkgKyAxCgkJCQl9OwoJCQl9CgkJfQoKCQlmb3IgKHZhciBpID0gbi5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7CgkJCWlmIChuW2ldLnRleHQgIT0gbnVsbCAmJiBuW2kgLSAxXS50ZXh0ID09IG51bGwgJiYgbltpXS5yb3cgPiAwICYmIG9bbltpXS5yb3cgLSAxXS50ZXh0ID09IG51bGwgJiYKCQkJbltpIC0gMV0gPT0gb1tuW2ldLnJvdyAtIDFdKSB7CgkJCQluW2kgLSAxXSA9IHsKCQkJCQl0ZXh0OiBuW2kgLSAxXSwKCQkJCQlyb3c6IG5baV0ucm93IC0gMQoJCQkJfTsKCQkJCW9bbltpXS5yb3cgLSAxXSA9IHsKCQkJCQl0ZXh0OiBvW25baV0ucm93IC0gMV0sCgkJCQkJcm93OiBpIC0gMQoJCQkJfTsKCQkJfQoJCX0KCgkJcmV0dXJuIHsKCQkJbzogbywKCQkJbjogbgoJCX07Cgl9CgoJcmV0dXJuIGZ1bmN0aW9uKG8sIG4pewoJCW8gPSBvLnJlcGxhY2UoL1xzKyQvLCAnJyk7CgkJbiA9IG4ucmVwbGFjZSgvXHMrJC8sICcnKTsKCQl2YXIgb3V0ID0gZGlmZihvID09ICIiID8gW10gOiBvLnNwbGl0KC9ccysvKSwgbiA9PSAiIiA/IFtdIDogbi5zcGxpdCgvXHMrLykpOwoKCQl2YXIgc3RyID0gIiI7CgoJCXZhciBvU3BhY2UgPSBvLm1hdGNoKC9ccysvZyk7CgkJaWYgKG9TcGFjZSA9PSBudWxsKSB7CgkJCW9TcGFjZSA9IFsiICJdOwoJCX0KCQllbHNlIHsKCQkJb1NwYWNlLnB1c2goIiAiKTsKCQl9CgkJdmFyIG5TcGFjZSA9IG4ubWF0Y2goL1xzKy9nKTsKCQlpZiAoblNwYWNlID09IG51bGwpIHsKCQkJblNwYWNlID0gWyIgIl07CgkJfQoJCWVsc2UgewoJCQluU3BhY2UucHVzaCgiICIpOwoJCX0KCgkJaWYgKG91dC5uLmxlbmd0aCA9PSAwKSB7CgkJCWZvciAodmFyIGkgPSAwOyBpIDwgb3V0Lm8ubGVuZ3RoOyBpKyspIHsKCQkJCXN0ciArPSAnPGRlbD4nICsgb3V0Lm9baV0gKyBvU3BhY2VbaV0gKyAiPC9kZWw+IjsKCQkJfQoJCX0KCQllbHNlIHsKCQkJaWYgKG91dC5uWzBdLnRleHQgPT0gbnVsbCkgewoJCQkJZm9yIChuID0gMDsgbiA8IG91dC5vLmxlbmd0aCAmJiBvdXQub1tuXS50ZXh0ID09IG51bGw7IG4rKykgewoJCQkJCXN0ciArPSAnPGRlbD4nICsgb3V0Lm9bbl0gKyBvU3BhY2Vbbl0gKyAiPC9kZWw+IjsKCQkJCX0KCQkJfQoKCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBvdXQubi5sZW5ndGg7IGkrKykgewoJCQkJaWYgKG91dC5uW2ldLnRleHQgPT0gbnVsbCkgewoJCQkJCXN0ciArPSAnPGlucz4nICsgb3V0Lm5baV0gKyBuU3BhY2VbaV0gKyAiPC9pbnM+IjsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCXZhciBwcmUgPSAiIjsKCgkJCQkJZm9yIChuID0gb3V0Lm5baV0ucm93ICsgMTsgbiA8IG91dC5vLmxlbmd0aCAmJiBvdXQub1tuXS50ZXh0ID09IG51bGw7IG4rKykgewoJCQkJCQlwcmUgKz0gJzxkZWw+JyArIG91dC5vW25dICsgb1NwYWNlW25dICsgIjwvZGVsPiI7CgkJCQkJfQoJCQkJCXN0ciArPSAiICIgKyBvdXQubltpXS50ZXh0ICsgblNwYWNlW2ldICsgcHJlOwoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4gc3RyOwoJfQp9KSgpOwoKfSkodGhpcyk7Cg==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 04:18:03 GMT",
                    "Content-Length": "33002",
                    "Date": "Fri, 07 Nov 2014 04:18:04 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}