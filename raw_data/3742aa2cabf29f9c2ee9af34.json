{
    "url": "http://localhost:9999/tkambler/edison.js/dist/edison.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>self.name</b> and written to <b>the 'setAttribute()' function of a DOM element</b> via the following statement:<ul><li>tpl.setAttribute('id', 'section_' + self.section.getName() + '_route_' + self.name);</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/tkambler/edison.js/dist/edison.js",
                "path": "/tkambler/edison.js/dist/edison.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC90a2FtYmxlci9lZGlzb24uanMvZGlzdC9lZGlzb24uanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNjExNjYNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IFRodSwgMDYgTm92IDIwMTQgMjI6MjY6MTQgR01UDQpMYXN0LU1vZGlmaWVkOiBUaHUsIDA2IE5vdiAyMDE0IDIyOjI2OjEzIEdNVA0KDQoKLy8gICAgIFVuZGVyc2NvcmUuanMgMS41LjIKLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnCi8vICAgICAoYykgMjAwOS0yMDEzIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzCi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgoKKGZ1bmN0aW9uKCkgewoKICAvLyBCYXNlbGluZSBzZXR1cAogIC8vIC0tLS0tLS0tLS0tLS0tCgogIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci4KICB2YXIgcm9vdCA9IHRoaXM7CgogIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuCiAgdmFyIHByZXZpb3VzVW5kZXJzY29yZSA9IHJvb3QuXzsKCiAgLy8gRXN0YWJsaXNoIHRoZSBvYmplY3QgdGhhdCBnZXRzIHJldHVybmVkIHRvIGJyZWFrIG91dCBvZiBhIGxvb3AgaXRlcmF0aW9uLgogIHZhciBicmVha2VyID0ge307CgogIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246CiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlOwoKICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy4KICB2YXIKICAgIHB1c2ggICAgICAgICAgICAgPSBBcnJheVByb3RvLnB1c2gsCiAgICBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSwKICAgIGNvbmNhdCAgICAgICAgICAgPSBBcnJheVByb3RvLmNvbmNhdCwKICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZywKICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTsKCiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlCiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuCiAgdmFyCiAgICBuYXRpdmVGb3JFYWNoICAgICAgPSBBcnJheVByb3RvLmZvckVhY2gsCiAgICBuYXRpdmVNYXAgICAgICAgICAgPSBBcnJheVByb3RvLm1hcCwKICAgIG5hdGl2ZVJlZHVjZSAgICAgICA9IEFycmF5UHJvdG8ucmVkdWNlLAogICAgbmF0aXZlUmVkdWNlUmlnaHQgID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodCwKICAgIG5hdGl2ZUZpbHRlciAgICAgICA9IEFycmF5UHJvdG8uZmlsdGVyLAogICAgbmF0aXZlRXZlcnkgICAgICAgID0gQXJyYXlQcm90by5ldmVyeSwKICAgIG5hdGl2ZVNvbWUgICAgICAgICA9IEFycmF5UHJvdG8uc29tZSwKICAgIG5hdGl2ZUluZGV4T2YgICAgICA9IEFycmF5UHJvdG8uaW5kZXhPZiwKICAgIG5hdGl2ZUxhc3RJbmRleE9mICA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2YsCiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LAogICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsCiAgICBuYXRpdmVCaW5kICAgICAgICAgPSBGdW5jUHJvdG8uYmluZDsKCiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuCiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHsKICAgIGlmIChvYmogaW5zdGFuY2VvZiBfKSByZXR1cm4gb2JqOwogICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTsKICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7CiAgfTsKCiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGgKICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3IgdGhlIG9sZCBgcmVxdWlyZSgpYCBBUEkuIElmIHdlJ3JlIGluCiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0IHZpYSBhIHN0cmluZyBpZGVudGlmaWVyLAogIC8vIGZvciBDbG9zdXJlIENvbXBpbGVyICJhZHZhbmNlZCIgbW9kZS4KICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7CiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXzsKICAgIH0KICAgIGV4cG9ydHMuXyA9IF87CiAgfSBlbHNlIHsKICAgIHJvb3QuXyA9IF87CiAgfQoKICAvLyBDdXJyZW50IHZlcnNpb24uCiAgXy5WRVJTSU9OID0gJzEuNS4yJzsKCiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC4KICAvLyBIYW5kbGVzIG9iamVjdHMgd2l0aCB0aGUgYnVpbHQtaW4gYGZvckVhY2hgLCBhcnJheXMsIGFuZCByYXcgb2JqZWN0cy4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZm9yRWFjaGAgaWYgYXZhaWxhYmxlLgogIHZhciBlYWNoID0gXy5lYWNoID0gXy5mb3JFYWNoID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm47CiAgICBpZiAobmF0aXZlRm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gbmF0aXZlRm9yRWFjaCkgewogICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7CiAgICB9IGVsc2UgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSB7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikgPT09IGJyZWFrZXIpIHJldHVybjsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTsKICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5c1tpXV0sIGtleXNbaV0sIG9iaikgPT09IGJyZWFrZXIpIHJldHVybjsKICAgICAgfQogICAgfQogIH07CgogIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0b3IgdG8gZWFjaCBlbGVtZW50LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBtYXBgIGlmIGF2YWlsYWJsZS4KICBfLm1hcCA9IF8uY29sbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzOwogICAgaWYgKG5hdGl2ZU1hcCAmJiBvYmoubWFwID09PSBuYXRpdmVNYXApIHJldHVybiBvYmoubWFwKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgcmVzdWx0cy5wdXNoKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSk7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIHZhciByZWR1Y2VFcnJvciA9ICdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJzsKCiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLAogIC8vIG9yIGBmb2xkbGAuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGByZWR1Y2VgIGlmIGF2YWlsYWJsZS4KICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIG1lbW8sIGNvbnRleHQpIHsKICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7CiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdOwogICAgaWYgKG5hdGl2ZVJlZHVjZSAmJiBvYmoucmVkdWNlID09PSBuYXRpdmVSZWR1Y2UpIHsKICAgICAgaWYgKGNvbnRleHQpIGl0ZXJhdG9yID0gXy5iaW5kKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgICAgcmV0dXJuIGluaXRpYWwgPyBvYmoucmVkdWNlKGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2UoaXRlcmF0b3IpOwogICAgfQogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAoIWluaXRpYWwpIHsKICAgICAgICBtZW1vID0gdmFsdWU7CiAgICAgICAgaW5pdGlhbCA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbWVtbyA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgbWVtbywgdmFsdWUsIGluZGV4LCBsaXN0KTsKICAgICAgfQogICAgfSk7CiAgICBpZiAoIWluaXRpYWwpIHRocm93IG5ldyBUeXBlRXJyb3IocmVkdWNlRXJyb3IpOwogICAgcmV0dXJuIG1lbW87CiAgfTsKCiAgLy8gVGhlIHJpZ2h0LWFzc29jaWF0aXZlIHZlcnNpb24gb2YgcmVkdWNlLCBhbHNvIGtub3duIGFzIGBmb2xkcmAuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZVJpZ2h0YCBpZiBhdmFpbGFibGUuCiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KSB7CiAgICB2YXIgaW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyOwogICAgaWYgKG9iaiA9PSBudWxsKSBvYmogPSBbXTsKICAgIGlmIChuYXRpdmVSZWR1Y2VSaWdodCAmJiBvYmoucmVkdWNlUmlnaHQgPT09IG5hdGl2ZVJlZHVjZVJpZ2h0KSB7CiAgICAgIGlmIChjb250ZXh0KSBpdGVyYXRvciA9IF8uYmluZChpdGVyYXRvciwgY29udGV4dCk7CiAgICAgIHJldHVybiBpbml0aWFsID8gb2JqLnJlZHVjZVJpZ2h0KGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2VSaWdodChpdGVyYXRvcik7CiAgICB9CiAgICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDsKICAgIGlmIChsZW5ndGggIT09ICtsZW5ndGgpIHsKICAgICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTsKICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7CiAgICB9CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGluZGV4ID0ga2V5cyA/IGtleXNbLS1sZW5ndGhdIDogLS1sZW5ndGg7CiAgICAgIGlmICghaW5pdGlhbCkgewogICAgICAgIG1lbW8gPSBvYmpbaW5kZXhdOwogICAgICAgIGluaXRpYWwgPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIG1lbW8gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG1lbW8sIG9ialtpbmRleF0sIGluZGV4LCBsaXN0KTsKICAgICAgfQogICAgfSk7CiAgICBpZiAoIWluaXRpYWwpIHRocm93IG5ldyBUeXBlRXJyb3IocmVkdWNlRXJyb3IpOwogICAgcmV0dXJuIG1lbW87CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBwYXNzZXMgYSB0cnV0aCB0ZXN0LiBBbGlhc2VkIGFzIGBkZXRlY3RgLgogIF8uZmluZCA9IF8uZGV0ZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgdmFyIHJlc3VsdDsKICAgIGFueShvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSB7CiAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBmaWx0ZXJgIGlmIGF2YWlsYWJsZS4KICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLgogIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0czsKICAgIGlmIChuYXRpdmVGaWx0ZXIgJiYgb2JqLmZpbHRlciA9PT0gbmF0aXZlRmlsdGVyKSByZXR1cm4gb2JqLmZpbHRlcihpdGVyYXRvciwgY29udGV4dCk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGZvciB3aGljaCBhIHRydXRoIHRlc3QgZmFpbHMuCiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgcmV0dXJuICFpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCk7CiAgICB9LCBjb250ZXh0KTsKICB9OwoKICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZXZlcnlgIGlmIGF2YWlsYWJsZS4KICAvLyBBbGlhc2VkIGFzIGBhbGxgLgogIF8uZXZlcnkgPSBfLmFsbCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIGl0ZXJhdG9yIHx8IChpdGVyYXRvciA9IF8uaWRlbnRpdHkpOwogICAgdmFyIHJlc3VsdCA9IHRydWU7CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7CiAgICBpZiAobmF0aXZlRXZlcnkgJiYgb2JqLmV2ZXJ5ID09PSBuYXRpdmVFdmVyeSkgcmV0dXJuIG9iai5ldmVyeShpdGVyYXRvciwgY29udGV4dCk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmICghKHJlc3VsdCA9IHJlc3VsdCAmJiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKSByZXR1cm4gYnJlYWtlcjsKICAgIH0pOwogICAgcmV0dXJuICEhcmVzdWx0OwogIH07CgogIC8vIERldGVybWluZSBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgb2JqZWN0IG1hdGNoZXMgYSB0cnV0aCB0ZXN0LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBzb21lYCBpZiBhdmFpbGFibGUuCiAgLy8gQWxpYXNlZCBhcyBgYW55YC4KICB2YXIgYW55ID0gXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpdGVyYXRvciB8fCAoaXRlcmF0b3IgPSBfLmlkZW50aXR5KTsKICAgIHZhciByZXN1bHQgPSBmYWxzZTsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDsKICAgIGlmIChuYXRpdmVTb21lICYmIG9iai5zb21lID09PSBuYXRpdmVTb21lKSByZXR1cm4gb2JqLnNvbWUoaXRlcmF0b3IsIGNvbnRleHQpOwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAocmVzdWx0IHx8IChyZXN1bHQgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKSByZXR1cm4gYnJlYWtlcjsKICAgIH0pOwogICAgcmV0dXJuICEhcmVzdWx0OwogIH07CgogIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gdmFsdWUgKHVzaW5nIGA9PT1gKS4KICAvLyBBbGlhc2VkIGFzIGBpbmNsdWRlYC4KICBfLmNvbnRhaW5zID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCB0YXJnZXQpIHsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZhbHNlOwogICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgb2JqLmluZGV4T2YgPT09IG5hdGl2ZUluZGV4T2YpIHJldHVybiBvYmouaW5kZXhPZih0YXJnZXQpICE9IC0xOwogICAgcmV0dXJuIGFueShvYmosIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdGFyZ2V0OwogICAgfSk7CiAgfTsKCiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uCiAgXy5pbnZva2UgPSBmdW5jdGlvbihvYmosIG1ldGhvZCkgewogICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7CiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7CiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gKGlzRnVuYyA/IG1ldGhvZCA6IHZhbHVlW21ldGhvZF0pLmFwcGx5KHZhbHVlLCBhcmdzKTsKICAgIH0pOwogIH07CgogIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYG1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuCiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7CiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSl7IHJldHVybiB2YWx1ZVtrZXldOyB9KTsKICB9OwoKICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzCiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy4KICBfLndoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycywgZmlyc3QpIHsKICAgIGlmIChfLmlzRW1wdHkoYXR0cnMpKSByZXR1cm4gZmlyc3QgPyB2b2lkIDAgOiBbXTsKICAgIHJldHVybiBfW2ZpcnN0ID8gJ2ZpbmQnIDogJ2ZpbHRlciddKG9iaiwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7CiAgICAgICAgaWYgKGF0dHJzW2tleV0gIT09IHZhbHVlW2tleV0pIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0pOwogIH07CgogIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbmRgOiBnZXR0aW5nIHRoZSBmaXJzdCBvYmplY3QKICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLgogIF8uZmluZFdoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykgewogICAgcmV0dXJuIF8ud2hlcmUob2JqLCBhdHRycywgdHJ1ZSk7CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgb3IgKGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLgogIC8vIENhbid0IG9wdGltaXplIGFycmF5cyBvZiBpbnRlZ2VycyBsb25nZXIgdGhhbiA2NSw1MzUgZWxlbWVudHMuCiAgLy8gU2VlIFtXZWJLaXQgQnVnIDgwNzk3XShodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODA3OTcpCiAgXy5tYXggPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSAmJiBvYmoubGVuZ3RoIDwgNjU1MzUpIHsKICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIG9iaik7CiAgICB9CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNFbXB0eShvYmopKSByZXR1cm4gLUluZmluaXR5OwogICAgdmFyIHJlc3VsdCA9IHtjb21wdXRlZCA6IC1JbmZpbml0eSwgdmFsdWU6IC1JbmZpbml0eX07CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7CiAgICAgIGNvbXB1dGVkID4gcmVzdWx0LmNvbXB1dGVkICYmIChyZXN1bHQgPSB7dmFsdWUgOiB2YWx1ZSwgY29tcHV0ZWQgOiBjb21wdXRlZH0pOwogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0LnZhbHVlOwogIH07CgogIC8vIFJldHVybiB0aGUgbWluaW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS4KICBfLm1pbiA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0FycmF5KG9iaikgJiYgb2JqWzBdID09PSArb2JqWzBdICYmIG9iai5sZW5ndGggPCA2NTUzNSkgewogICAgICByZXR1cm4gTWF0aC5taW4uYXBwbHkoTWF0aCwgb2JqKTsKICAgIH0KICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0VtcHR5KG9iaikpIHJldHVybiBJbmZpbml0eTsKICAgIHZhciByZXN1bHQgPSB7Y29tcHV0ZWQgOiBJbmZpbml0eSwgdmFsdWU6IEluZmluaXR5fTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTsKICAgICAgY29tcHV0ZWQgPCByZXN1bHQuY29tcHV0ZWQgJiYgKHJlc3VsdCA9IHt2YWx1ZSA6IHZhbHVlLCBjb21wdXRlZCA6IGNvbXB1dGVkfSk7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHQudmFsdWU7CiAgfTsKCiAgLy8gU2h1ZmZsZSBhbiBhcnJheSwgdXNpbmcgdGhlIG1vZGVybiB2ZXJzaW9uIG9mIHRoZSAKICAvLyBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVy4oCTWWF0ZXNfc2h1ZmZsZSkuCiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgcmFuZDsKICAgIHZhciBpbmRleCA9IDA7CiAgICB2YXIgc2h1ZmZsZWQgPSBbXTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICByYW5kID0gXy5yYW5kb20oaW5kZXgrKyk7CiAgICAgIHNodWZmbGVkW2luZGV4IC0gMV0gPSBzaHVmZmxlZFtyYW5kXTsKICAgICAgc2h1ZmZsZWRbcmFuZF0gPSB2YWx1ZTsKICAgIH0pOwogICAgcmV0dXJuIHNodWZmbGVkOwogIH07CgogIC8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYW4gYXJyYXkuCiAgLy8gSWYgKipuKiogaXMgbm90IHNwZWNpZmllZCwgcmV0dXJucyBhIHNpbmdsZSByYW5kb20gZWxlbWVudCBmcm9tIHRoZSBhcnJheS4KICAvLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBtYXBgLgogIF8uc2FtcGxlID0gZnVuY3Rpb24ob2JqLCBuLCBndWFyZCkgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyIHx8IGd1YXJkKSB7CiAgICAgIHJldHVybiBvYmpbXy5yYW5kb20ob2JqLmxlbmd0aCAtIDEpXTsKICAgIH0KICAgIHJldHVybiBfLnNodWZmbGUob2JqKS5zbGljZSgwLCBNYXRoLm1heCgwLCBuKSk7CiAgfTsKCiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgbG9va3VwIGl0ZXJhdG9ycy4KICB2YXIgbG9va3VwSXRlcmF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IGZ1bmN0aW9uKG9iail7IHJldHVybiBvYmpbdmFsdWVdOyB9OwogIH07CgogIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRvci4KICBfLnNvcnRCeSA9IGZ1bmN0aW9uKG9iaiwgdmFsdWUsIGNvbnRleHQpIHsKICAgIHZhciBpdGVyYXRvciA9IGxvb2t1cEl0ZXJhdG9yKHZhbHVlKTsKICAgIHJldHVybiBfLnBsdWNrKF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgIGluZGV4OiBpbmRleCwKICAgICAgICBjcml0ZXJpYTogaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpCiAgICAgIH07CiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7CiAgICAgIHZhciBhID0gbGVmdC5jcml0ZXJpYTsKICAgICAgdmFyIGIgPSByaWdodC5jcml0ZXJpYTsKICAgICAgaWYgKGEgIT09IGIpIHsKICAgICAgICBpZiAoYSA+IGIgfHwgYSA9PT0gdm9pZCAwKSByZXR1cm4gMTsKICAgICAgICBpZiAoYSA8IGIgfHwgYiA9PT0gdm9pZCAwKSByZXR1cm4gLTE7CiAgICAgIH0KICAgICAgcmV0dXJuIGxlZnQuaW5kZXggLSByaWdodC5pbmRleDsKICAgIH0pLCAndmFsdWUnKTsKICB9OwoKICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBhZ2dyZWdhdGUgImdyb3VwIGJ5IiBvcGVyYXRpb25zLgogIHZhciBncm91cCA9IGZ1bmN0aW9uKGJlaGF2aW9yKSB7CiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCB2YWx1ZSwgY29udGV4dCkgewogICAgICB2YXIgcmVzdWx0ID0ge307CiAgICAgIHZhciBpdGVyYXRvciA9IHZhbHVlID09IG51bGwgPyBfLmlkZW50aXR5IDogbG9va3VwSXRlcmF0b3IodmFsdWUpOwogICAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7CiAgICAgICAgdmFyIGtleSA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBvYmopOwogICAgICAgIGJlaGF2aW9yKHJlc3VsdCwga2V5LCB2YWx1ZSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKICB9OwoKICAvLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlCiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uCiAgXy5ncm91cEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCBrZXksIHZhbHVlKSB7CiAgICAoXy5oYXMocmVzdWx0LCBrZXkpID8gcmVzdWx0W2tleV0gOiAocmVzdWx0W2tleV0gPSBbXSkpLnB1c2godmFsdWUpOwogIH0pOwoKICAvLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYGdyb3VwQnlgLCBidXQgZm9yCiAgLy8gd2hlbiB5b3Uga25vdyB0aGF0IHlvdXIgaW5kZXggdmFsdWVzIHdpbGwgYmUgdW5pcXVlLgogIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwga2V5LCB2YWx1ZSkgewogICAgcmVzdWx0W2tleV0gPSB2YWx1ZTsKICB9KTsKCiAgLy8gQ291bnRzIGluc3RhbmNlcyBvZiBhbiBvYmplY3QgdGhhdCBncm91cCBieSBhIGNlcnRhaW4gY3JpdGVyaW9uLiBQYXNzCiAgLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlCiAgLy8gY3JpdGVyaW9uLgogIF8uY291bnRCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwga2V5KSB7CiAgICBfLmhhcyhyZXN1bHQsIGtleSkgPyByZXN1bHRba2V5XSsrIDogcmVzdWx0W2tleV0gPSAxOwogIH0pOwoKICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoCiAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLgogIF8uc29ydGVkSW5kZXggPSBmdW5jdGlvbihhcnJheSwgb2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaXRlcmF0b3IgPSBpdGVyYXRvciA9PSBudWxsID8gXy5pZGVudGl0eSA6IGxvb2t1cEl0ZXJhdG9yKGl0ZXJhdG9yKTsKICAgIHZhciB2YWx1ZSA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqKTsKICAgIHZhciBsb3cgPSAwLCBoaWdoID0gYXJyYXkubGVuZ3RoOwogICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHsKICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMTsKICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBhcnJheVttaWRdKSA8IHZhbHVlID8gbG93ID0gbWlkICsgMSA6IGhpZ2ggPSBtaWQ7CiAgICB9CiAgICByZXR1cm4gbG93OwogIH07CgogIC8vIFNhZmVseSBjcmVhdGUgYSByZWFsLCBsaXZlIGFycmF5IGZyb20gYW55dGhpbmcgaXRlcmFibGUuCiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7CiAgICBpZiAoIW9iaikgcmV0dXJuIFtdOwogICAgaWYgKF8uaXNBcnJheShvYmopKSByZXR1cm4gc2xpY2UuY2FsbChvYmopOwogICAgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSByZXR1cm4gXy5tYXAob2JqLCBfLmlkZW50aXR5KTsKICAgIHJldHVybiBfLnZhbHVlcyhvYmopOwogIH07CgogIC8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIG9iamVjdC4KICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIDA7CiAgICByZXR1cm4gKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSA/IG9iai5sZW5ndGggOiBfLmtleXMob2JqKS5sZW5ndGg7CiAgfTsKCiAgLy8gQXJyYXkgRnVuY3Rpb25zCiAgLy8gLS0tLS0tLS0tLS0tLS0tCgogIC8vIEdldCB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgTgogIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYGhlYWRgIGFuZCBgdGFrZWAuIFRoZSAqKmd1YXJkKiogY2hlY2sKICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuCiAgXy5maXJzdCA9IF8uaGVhZCA9IF8udGFrZSA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkgewogICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiB2b2lkIDA7CiAgICByZXR1cm4gKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyBhcnJheVswXSA6IHNsaWNlLmNhbGwoYXJyYXksIDAsIG4pOwogIH07CgogIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGxhc3QgZW50cnkgb2YgdGhlIGFycmF5LiBFc3BlY2lhbGx5IHVzZWZ1bCBvbgogIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluCiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoCiAgLy8gYF8ubWFwYC4KICBfLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHsKICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBhcnJheS5sZW5ndGggLSAoKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogbikpOwogIH07CgogIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBsYXN0IE4KICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBUaGUgKipndWFyZCoqIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC4KICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHsKICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwOwogICAgaWYgKChuID09IG51bGwpIHx8IGd1YXJkKSB7CiAgICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBNYXRoLm1heChhcnJheS5sZW5ndGggLSBuLCAwKSk7CiAgICB9CiAgfTsKCiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLgogIC8vIEVzcGVjaWFsbHkgdXNlZnVsIG9uIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nIGFuICoqbioqIHdpbGwgcmV0dXJuCiAgLy8gdGhlIHJlc3QgTiB2YWx1ZXMgaW4gdGhlIGFycmF5LiBUaGUgKipndWFyZCoqCiAgLy8gY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLgogIF8ucmVzdCA9IF8udGFpbCA9IF8uZHJvcCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkgewogICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIChuID09IG51bGwpIHx8IGd1YXJkID8gMSA6IG4pOwogIH07CgogIC8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS4KICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkgewogICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBfLmlkZW50aXR5KTsKICB9OwoKICAvLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBvZiBhIHJlY3Vyc2l2ZSBgZmxhdHRlbmAgZnVuY3Rpb24uCiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgc2hhbGxvdywgb3V0cHV0KSB7CiAgICBpZiAoc2hhbGxvdyAmJiBfLmV2ZXJ5KGlucHV0LCBfLmlzQXJyYXkpKSB7CiAgICAgIHJldHVybiBjb25jYXQuYXBwbHkob3V0cHV0LCBpbnB1dCk7CiAgICB9CiAgICBlYWNoKGlucHV0LCBmdW5jdGlvbih2YWx1ZSkgewogICAgICBpZiAoXy5pc0FycmF5KHZhbHVlKSB8fCBfLmlzQXJndW1lbnRzKHZhbHVlKSkgewogICAgICAgIHNoYWxsb3cgPyBwdXNoLmFwcGx5KG91dHB1dCwgdmFsdWUpIDogZmxhdHRlbih2YWx1ZSwgc2hhbGxvdywgb3V0cHV0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIG91dHB1dDsKICB9OwoKICAvLyBGbGF0dGVuIG91dCBhbiBhcnJheSwgZWl0aGVyIHJlY3Vyc2l2ZWx5IChieSBkZWZhdWx0KSwgb3IganVzdCBvbmUgbGV2ZWwuCiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXksIHNoYWxsb3cpIHsKICAgIHJldHVybiBmbGF0dGVuKGFycmF5LCBzaGFsbG93LCBbXSk7CiAgfTsKCiAgLy8gUmV0dXJuIGEgdmVyc2lvbiBvZiB0aGUgYXJyYXkgdGhhdCBkb2VzIG5vdCBjb250YWluIHRoZSBzcGVjaWZpZWQgdmFsdWUocykuCiAgXy53aXRob3V0ID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgfTsKCiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHkKICAvLyBiZWVuIHNvcnRlZCwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiB1c2luZyBhIGZhc3RlciBhbGdvcml0aG0uCiAgLy8gQWxpYXNlZCBhcyBgdW5pcXVlYC4KICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIGlmIChfLmlzRnVuY3Rpb24oaXNTb3J0ZWQpKSB7CiAgICAgIGNvbnRleHQgPSBpdGVyYXRvcjsKICAgICAgaXRlcmF0b3IgPSBpc1NvcnRlZDsKICAgICAgaXNTb3J0ZWQgPSBmYWxzZTsKICAgIH0KICAgIHZhciBpbml0aWFsID0gaXRlcmF0b3IgPyBfLm1hcChhcnJheSwgaXRlcmF0b3IsIGNvbnRleHQpIDogYXJyYXk7CiAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgdmFyIHNlZW4gPSBbXTsKICAgIGVhY2goaW5pdGlhbCwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7CiAgICAgIGlmIChpc1NvcnRlZCA/ICghaW5kZXggfHwgc2VlbltzZWVuLmxlbmd0aCAtIDFdICE9PSB2YWx1ZSkgOiAhXy5jb250YWlucyhzZWVuLCB2YWx1ZSkpIHsKICAgICAgICBzZWVuLnB1c2godmFsdWUpOwogICAgICAgIHJlc3VsdHMucHVzaChhcnJheVtpbmRleF0pOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZgogIC8vIHRoZSBwYXNzZWQtaW4gYXJyYXlzLgogIF8udW5pb24gPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBfLnVuaXEoXy5mbGF0dGVuKGFyZ3VtZW50cywgdHJ1ZSkpOwogIH07CgogIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGUKICAvLyBwYXNzZWQtaW4gYXJyYXlzLgogIF8uaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHZhciByZXN0ID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgcmV0dXJuIF8uZmlsdGVyKF8udW5pcShhcnJheSksIGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgcmV0dXJuIF8uZXZlcnkocmVzdCwgZnVuY3Rpb24ob3RoZXIpIHsKICAgICAgICByZXR1cm4gXy5pbmRleE9mKG90aGVyLCBpdGVtKSA+PSAwOwogICAgICB9KTsKICAgIH0pOwogIH07CgogIC8vIFRha2UgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBvbmUgYXJyYXkgYW5kIGEgbnVtYmVyIG9mIG90aGVyIGFycmF5cy4KICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLgogIF8uZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGFycmF5KSB7CiAgICB2YXIgcmVzdCA9IGNvbmNhdC5hcHBseShBcnJheVByb3RvLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpOwogICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBmdW5jdGlvbih2YWx1ZSl7IHJldHVybiAhXy5jb250YWlucyhyZXN0LCB2YWx1ZSk7IH0pOwogIH07CgogIC8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmUKICAvLyBhbiBpbmRleCBnbyB0b2dldGhlci4KICBfLnppcCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGxlbmd0aCA9IF8ubWF4KF8ucGx1Y2soYXJndW1lbnRzLCAibGVuZ3RoIikuY29uY2F0KDApKTsKICAgIHZhciByZXN1bHRzID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIHJlc3VsdHNbaV0gPSBfLnBsdWNrKGFyZ3VtZW50cywgJycgKyBpKTsKICAgIH0KICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIC8vIENvbnZlcnRzIGxpc3RzIGludG8gb2JqZWN0cy4gUGFzcyBlaXRoZXIgYSBzaW5nbGUgYXJyYXkgb2YgYFtrZXksIHZhbHVlXWAKICAvLyBwYWlycywgb3IgdHdvIHBhcmFsbGVsIGFycmF5cyBvZiB0aGUgc2FtZSBsZW5ndGggLS0gb25lIG9mIGtleXMsIGFuZCBvbmUgb2YKICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuCiAgXy5vYmplY3QgPSBmdW5jdGlvbihsaXN0LCB2YWx1ZXMpIHsKICAgIGlmIChsaXN0ID09IG51bGwpIHJldHVybiB7fTsKICAgIHZhciByZXN1bHQgPSB7fTsKICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIGlmICh2YWx1ZXMpIHsKICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzdWx0W2xpc3RbaV1bMF1dID0gbGlzdFtpXVsxXTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBJZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBseSB1cyB3aXRoIGluZGV4T2YgKEknbSBsb29raW5nIGF0IHlvdSwgKipNU0lFKiopLAogIC8vIHdlIG5lZWQgdGhpcyBmdW5jdGlvbi4gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhbgogIC8vIGl0ZW0gaW4gYW4gYXJyYXksIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGluZGV4T2ZgIGlmIGF2YWlsYWJsZS4KICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWAKICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLgogIF8uaW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBpc1NvcnRlZCkgewogICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTsKICAgIHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogICAgaWYgKGlzU29ydGVkKSB7CiAgICAgIGlmICh0eXBlb2YgaXNTb3J0ZWQgPT0gJ251bWJlcicpIHsKICAgICAgICBpID0gKGlzU29ydGVkIDwgMCA/IE1hdGgubWF4KDAsIGxlbmd0aCArIGlzU29ydGVkKSA6IGlzU29ydGVkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpID0gXy5zb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7CiAgICAgICAgcmV0dXJuIGFycmF5W2ldID09PSBpdGVtID8gaSA6IC0xOwogICAgICB9CiAgICB9CiAgICBpZiAobmF0aXZlSW5kZXhPZiAmJiBhcnJheS5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtLCBpc1NvcnRlZCk7CiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBpZiAoYXJyYXlbaV0gPT09IGl0ZW0pIHJldHVybiBpOwogICAgcmV0dXJuIC0xOwogIH07CgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBsYXN0SW5kZXhPZmAgaWYgYXZhaWxhYmxlLgogIF8ubGFzdEluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgZnJvbSkgewogICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTsKICAgIHZhciBoYXNJbmRleCA9IGZyb20gIT0gbnVsbDsKICAgIGlmIChuYXRpdmVMYXN0SW5kZXhPZiAmJiBhcnJheS5sYXN0SW5kZXhPZiA9PT0gbmF0aXZlTGFzdEluZGV4T2YpIHsKICAgICAgcmV0dXJuIGhhc0luZGV4ID8gYXJyYXkubGFzdEluZGV4T2YoaXRlbSwgZnJvbSkgOiBhcnJheS5sYXN0SW5kZXhPZihpdGVtKTsKICAgIH0KICAgIHZhciBpID0gKGhhc0luZGV4ID8gZnJvbSA6IGFycmF5Lmxlbmd0aCk7CiAgICB3aGlsZSAoaS0tKSBpZiAoYXJyYXlbaV0gPT09IGl0ZW0pIHJldHVybiBpOwogICAgcmV0dXJuIC0xOwogIH07CgogIC8vIEdlbmVyYXRlIGFuIGludGVnZXIgQXJyYXkgY29udGFpbmluZyBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLiBBIHBvcnQgb2YKICAvLyB0aGUgbmF0aXZlIFB5dGhvbiBgcmFuZ2UoKWAgZnVuY3Rpb24uIFNlZQogIC8vIFt0aGUgUHl0aG9uIGRvY3VtZW50YXRpb25dKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9mdW5jdGlvbnMuaHRtbCNyYW5nZSkuCiAgXy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAxKSB7CiAgICAgIHN0b3AgPSBzdGFydCB8fCAwOwogICAgICBzdGFydCA9IDA7CiAgICB9CiAgICBzdGVwID0gYXJndW1lbnRzWzJdIHx8IDE7CgogICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApLCAwKTsKICAgIHZhciBpZHggPSAwOwogICAgdmFyIHJhbmdlID0gbmV3IEFycmF5KGxlbmd0aCk7CgogICAgd2hpbGUoaWR4IDwgbGVuZ3RoKSB7CiAgICAgIHJhbmdlW2lkeCsrXSA9IHN0YXJ0OwogICAgICBzdGFydCArPSBzdGVwOwogICAgfQoKICAgIHJldHVybiByYW5nZTsKICB9OwoKICAvLyBGdW5jdGlvbiAoYWhlbSkgRnVuY3Rpb25zCiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tCgogIC8vIFJldXNhYmxlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciBwcm90b3R5cGUgc2V0dGluZy4KICB2YXIgY3RvciA9IGZ1bmN0aW9uKCl7fTsKCiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsCiAgLy8gb3B0aW9uYWxseSkuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBGdW5jdGlvbi5iaW5kYCBpZgogIC8vIGF2YWlsYWJsZS4KICBfLmJpbmQgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0KSB7CiAgICB2YXIgYXJncywgYm91bmQ7CiAgICBpZiAobmF0aXZlQmluZCAmJiBmdW5jLmJpbmQgPT09IG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICBpZiAoIV8uaXNGdW5jdGlvbihmdW5jKSkgdGhyb3cgbmV3IFR5cGVFcnJvcjsKICAgIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7CiAgICByZXR1cm4gYm91bmQgPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSkgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7CiAgICAgIGN0b3IucHJvdG90eXBlID0gZnVuYy5wcm90b3R5cGU7CiAgICAgIHZhciBzZWxmID0gbmV3IGN0b3I7CiAgICAgIGN0b3IucHJvdG90eXBlID0gbnVsbDsKICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkoc2VsZiwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7CiAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSByZXR1cm4gcmVzdWx0OwogICAgICByZXR1cm4gc2VsZjsKICAgIH07CiAgfTsKCiAgLy8gUGFydGlhbGx5IGFwcGx5IGEgZnVuY3Rpb24gYnkgY3JlYXRpbmcgYSB2ZXJzaW9uIHRoYXQgaGFzIGhhZCBzb21lIG9mIGl0cwogIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LgogIF8ucGFydGlhbCA9IGZ1bmN0aW9uKGZ1bmMpIHsKICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTsKICAgIH07CiAgfTsKCiAgLy8gQmluZCBhbGwgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0CiAgLy8gYWxsIGNhbGxiYWNrcyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuCiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgZnVuY3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoImJpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXMiKTsKICAgIGVhY2goZnVuY3MsIGZ1bmN0aW9uKGYpIHsgb2JqW2ZdID0gXy5iaW5kKG9ialtmXSwgb2JqKTsgfSk7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuCiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7CiAgICB2YXIgbWVtbyA9IHt9OwogICAgaGFzaGVyIHx8IChoYXNoZXIgPSBfLmlkZW50aXR5KTsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGtleSA9IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICByZXR1cm4gXy5oYXMobWVtbywga2V5KSA/IG1lbW9ba2V5XSA6IChtZW1vW2tleV0gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgfTsKICB9OwoKICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzCiAgLy8gaXQgd2l0aCB0aGUgYXJndW1lbnRzIHN1cHBsaWVkLgogIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7CiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTsKICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7IHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpOyB9LCB3YWl0KTsKICB9OwoKICAvLyBEZWZlcnMgYSBmdW5jdGlvbiwgc2NoZWR1bGluZyBpdCB0byBydW4gYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMKICAvLyBjbGVhcmVkLgogIF8uZGVmZXIgPSBmdW5jdGlvbihmdW5jKSB7CiAgICByZXR1cm4gXy5kZWxheS5hcHBseShfLCBbZnVuYywgMV0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpOwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZQogIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1bgogIC8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjsKICAvLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzcwogIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLgogIF8udGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7CiAgICB2YXIgY29udGV4dCwgYXJncywgcmVzdWx0OwogICAgdmFyIHRpbWVvdXQgPSBudWxsOwogICAgdmFyIHByZXZpb3VzID0gMDsKICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7CiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IG5ldyBEYXRlOwogICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgIH07CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBub3cgPSBuZXcgRGF0ZTsKICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IG5vdzsKICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpOwogICAgICBjb250ZXh0ID0gdGhpczsKICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgICAgaWYgKHJlbWFpbmluZyA8PSAwKSB7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpOwogICAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICAgIHByZXZpb3VzID0gbm93OwogICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHsKICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90CiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvcgogIC8vIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZQogIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuCiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkgewogICAgdmFyIHRpbWVvdXQsIGFyZ3MsIGNvbnRleHQsIHRpbWVzdGFtcCwgcmVzdWx0OwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICBjb250ZXh0ID0gdGhpczsKICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgICAgdGltZXN0YW1wID0gbmV3IERhdGUoKTsKICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGxhc3QgPSAobmV3IERhdGUoKSkgLSB0aW1lc3RhbXA7CiAgICAgICAgaWYgKGxhc3QgPCB3YWl0KSB7CiAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICAgIGlmICghaW1tZWRpYXRlKSByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICAgIH0KICAgICAgfTsKICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7CiAgICAgIGlmICghdGltZW91dCkgewogICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTsKICAgICAgfQogICAgICBpZiAoY2FsbE5vdykgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CiAgfTsKCiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93CiAgLy8gb2Z0ZW4geW91IGNhbGwgaXQuIFVzZWZ1bCBmb3IgbGF6eSBpbml0aWFsaXphdGlvbi4KICBfLm9uY2UgPSBmdW5jdGlvbihmdW5jKSB7CiAgICB2YXIgcmFuID0gZmFsc2UsIG1lbW87CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGlmIChyYW4pIHJldHVybiBtZW1vOwogICAgICByYW4gPSB0cnVlOwogICAgICBtZW1vID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICBmdW5jID0gbnVsbDsKICAgICAgcmV0dXJuIG1lbW87CiAgICB9OwogIH07CgogIC8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLAogIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmQKICAvLyBjb25kaXRpb25hbGx5IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLgogIF8ud3JhcCA9IGZ1bmN0aW9uKGZ1bmMsIHdyYXBwZXIpIHsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBbZnVuY107CiAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIHdyYXBwZXIuYXBwbHkodGhpcywgYXJncyk7CiAgICB9OwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoCiAgLy8gY29uc3VtaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgZm9sbG93cy4KICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHsKICAgIHZhciBmdW5jcyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIGZvciAodmFyIGkgPSBmdW5jcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIGFyZ3MgPSBbZnVuY3NbaV0uYXBwbHkodGhpcywgYXJncyldOwogICAgICB9CiAgICAgIHJldHVybiBhcmdzWzBdOwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgYWZ0ZXIgYmVpbmcgY2FsbGVkIE4gdGltZXMuCiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGlmICgtLXRpbWVzIDwgMSkgewogICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgIH07CiAgfTsKCiAgLy8gT2JqZWN0IEZ1bmN0aW9ucwogIC8vIC0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gUmV0cmlldmUgdGhlIG5hbWVzIG9mIGFuIG9iamVjdCdzIHByb3BlcnRpZXMuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYAogIF8ua2V5cyA9IG5hdGl2ZUtleXMgfHwgZnVuY3Rpb24ob2JqKSB7CiAgICBpZiAob2JqICE9PSBPYmplY3Qob2JqKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBvYmplY3QnKTsKICAgIHZhciBrZXlzID0gW107CiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTsKICAgIHJldHVybiBrZXlzOwogIH07CgogIC8vIFJldHJpZXZlIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy4KICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikgewogICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTsKICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDsKICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgdmFsdWVzW2ldID0gb2JqW2tleXNbaV1dOwogICAgfQogICAgcmV0dXJuIHZhbHVlczsKICB9OwoKICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy4KICBfLnBhaXJzID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopOwogICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoOwogICAgdmFyIHBhaXJzID0gbmV3IEFycmF5KGxlbmd0aCk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIHBhaXJzW2ldID0gW2tleXNbaV0sIG9ialtrZXlzW2ldXV07CiAgICB9CiAgICByZXR1cm4gcGFpcnM7CiAgfTsKCiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLgogIF8uaW52ZXJ0ID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgcmVzdWx0ID0ge307CiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopOwogICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgcmVzdWx0W29ialtrZXlzW2ldXV0gPSBrZXlzW2ldOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuCiAgLy8gQWxpYXNlZCBhcyBgbWV0aG9kc2AKICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikgewogICAgdmFyIG5hbWVzID0gW107CiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7CiAgICB9CiAgICByZXR1cm4gbmFtZXMuc29ydCgpOwogIH07CgogIC8vIEV4dGVuZCBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgcHJvcGVydGllcyBpbiBwYXNzZWQtaW4gb2JqZWN0KHMpLgogIF8uZXh0ZW5kID0gZnVuY3Rpb24ob2JqKSB7CiAgICBlYWNoKHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZnVuY3Rpb24oc291cmNlKSB7CiAgICAgIGlmIChzb3VyY2UpIHsKICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkgewogICAgICAgICAgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCBvbmx5IGNvbnRhaW5pbmcgdGhlIHdoaXRlbGlzdGVkIHByb3BlcnRpZXMuCiAgXy5waWNrID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgY29weSA9IHt9OwogICAgdmFyIGtleXMgPSBjb25jYXQuYXBwbHkoQXJyYXlQcm90bywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgIGVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7CiAgICAgIGlmIChrZXkgaW4gb2JqKSBjb3B5W2tleV0gPSBvYmpba2V5XTsKICAgIH0pOwogICAgcmV0dXJuIGNvcHk7CiAgfTsKCiAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLgogIF8ub21pdCA9IGZ1bmN0aW9uKG9iaikgewogICAgdmFyIGNvcHkgPSB7fTsKICAgIHZhciBrZXlzID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgIGlmICghXy5jb250YWlucyhrZXlzLCBrZXkpKSBjb3B5W2tleV0gPSBvYmpba2V5XTsKICAgIH0KICAgIHJldHVybiBjb3B5OwogIH07CgogIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuCiAgXy5kZWZhdWx0cyA9IGZ1bmN0aW9uKG9iaikgewogICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkgewogICAgICBpZiAoc291cmNlKSB7CiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHsKICAgICAgICAgIGlmIChvYmpbcHJvcF0gPT09IHZvaWQgMCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIENyZWF0ZSBhIChzaGFsbG93LWNsb25lZCkgZHVwbGljYXRlIG9mIGFuIG9iamVjdC4KICBfLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7CiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajsKICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogXy5leHRlbmQoe30sIG9iaik7CiAgfTsKCiAgLy8gSW52b2tlcyBpbnRlcmNlcHRvciB3aXRoIHRoZSBvYmosIGFuZCB0aGVuIHJldHVybnMgb2JqLgogIC8vIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gInRhcCBpbnRvIiBhIG1ldGhvZCBjaGFpbiwgaW4KICAvLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi4KICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHsKICAgIGludGVyY2VwdG9yKG9iaik7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIEludGVybmFsIHJlY3Vyc2l2ZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciBgaXNFcXVhbGAuCiAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHsKICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC4KICAgIC8vIFNlZSB0aGUgW0hhcm1vbnkgYGVnYWxgIHByb3Bvc2FsXShodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmVnYWwpLgogICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09IDEgLyBiOwogICAgLy8gQSBzdHJpY3QgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkgYmVjYXVzZSBgbnVsbCA9PSB1bmRlZmluZWRgLgogICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBhID09PSBiOwogICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuCiAgICBpZiAoYSBpbnN0YW5jZW9mIF8pIGEgPSBhLl93cmFwcGVkOwogICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDsKICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuCiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTsKICAgIGlmIChjbGFzc05hbWUgIT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlOwogICAgc3dpdGNoIChjbGFzc05hbWUpIHsKICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuCiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6CiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGAiNSJgIGlzCiAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZygiNSIpYC4KICAgICAgICByZXR1cm4gYSA9PSBTdHJpbmcoYik7CiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6CiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS4gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvcgogICAgICAgIC8vIG90aGVyIG51bWVyaWMgdmFsdWVzLgogICAgICAgIHJldHVybiBhICE9ICthID8gYiAhPSArYiA6IChhID09IDAgPyAxIC8gYSA9PSAxIC8gYiA6IGEgPT0gK2IpOwogICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzoKICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6CiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpcgogICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMKICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuCiAgICAgICAgcmV0dXJuICthID09ICtiOwogICAgICAvLyBSZWdFeHBzIGFyZSBjb21wYXJlZCBieSB0aGVpciBzb3VyY2UgcGF0dGVybnMgYW5kIGZsYWdzLgogICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOgogICAgICAgIHJldHVybiBhLnNvdXJjZSA9PSBiLnNvdXJjZSAmJgogICAgICAgICAgICAgICBhLmdsb2JhbCA9PSBiLmdsb2JhbCAmJgogICAgICAgICAgICAgICBhLm11bHRpbGluZSA9PSBiLm11bHRpbGluZSAmJgogICAgICAgICAgICAgICBhLmlnbm9yZUNhc2UgPT0gYi5pZ25vcmVDYXNlOwogICAgfQogICAgaWYgKHR5cGVvZiBhICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7CiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljCiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC4KICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoOwogICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZgogICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuCiAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PSBhKSByZXR1cm4gYlN0YWNrW2xlbmd0aF0gPT0gYjsKICAgIH0KICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3RgcwogICAgLy8gZnJvbSBkaWZmZXJlbnQgZnJhbWVzIGFyZS4KICAgIHZhciBhQ3RvciA9IGEuY29uc3RydWN0b3IsIGJDdG9yID0gYi5jb25zdHJ1Y3RvcjsKICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiYgIShfLmlzRnVuY3Rpb24oYUN0b3IpICYmIChhQ3RvciBpbnN0YW5jZW9mIGFDdG9yKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uaXNGdW5jdGlvbihiQ3RvcikgJiYgKGJDdG9yIGluc3RhbmNlb2YgYkN0b3IpKSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuCiAgICBhU3RhY2sucHVzaChhKTsKICAgIGJTdGFjay5wdXNoKGIpOwogICAgdmFyIHNpemUgPSAwLCByZXN1bHQgPSB0cnVlOwogICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIGFuZCBhcnJheXMuCiAgICBpZiAoY2xhc3NOYW1lID09ICdbb2JqZWN0IEFycmF5XScpIHsKICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuCiAgICAgIHNpemUgPSBhLmxlbmd0aDsKICAgICAgcmVzdWx0ID0gc2l6ZSA9PSBiLmxlbmd0aDsKICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuCiAgICAgICAgd2hpbGUgKHNpemUtLSkgewogICAgICAgICAgaWYgKCEocmVzdWx0ID0gZXEoYVtzaXplXSwgYltzaXplXSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy4KICAgICAgZm9yICh2YXIga2V5IGluIGEpIHsKICAgICAgICBpZiAoXy5oYXMoYSwga2V5KSkgewogICAgICAgICAgLy8gQ291bnQgdGhlIGV4cGVjdGVkIG51bWJlciBvZiBwcm9wZXJ0aWVzLgogICAgICAgICAgc2l6ZSsrOwogICAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyLgogICAgICAgICAgaWYgKCEocmVzdWx0ID0gXy5oYXMoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIC8vIEVuc3VyZSB0aGF0IGJvdGggb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBwcm9wZXJ0aWVzLgogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgZm9yIChrZXkgaW4gYikgewogICAgICAgICAgaWYgKF8uaGFzKGIsIGtleSkgJiYgIShzaXplLS0pKSBicmVhazsKICAgICAgICB9CiAgICAgICAgcmVzdWx0ID0gIXNpemU7CiAgICAgIH0KICAgIH0KICAgIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLgogICAgYVN0YWNrLnBvcCgpOwogICAgYlN0YWNrLnBvcCgpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC4KICBfLmlzRXF1YWwgPSBmdW5jdGlvbihhLCBiKSB7CiAgICByZXR1cm4gZXEoYSwgYiwgW10sIFtdKTsKICB9OwoKICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT8KICAvLyBBbiAiZW1wdHkiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy4KICBfLmlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHRydWU7CiAgICBpZiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIHJldHVybiBmYWxzZTsKICAgIHJldHVybiB0cnVlOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBET00gZWxlbWVudD8KICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/CiAgLy8gRGVsZWdhdGVzIHRvIEVDTUE1J3MgbmF0aXZlIEFycmF5LmlzQXJyYXkKICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBBcnJheV0nOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgYW4gb2JqZWN0PwogIF8uaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBvYmogPT09IE9iamVjdChvYmopOwogIH07CgogIC8vIEFkZCBzb21lIGlzVHlwZSBtZXRob2RzOiBpc0FyZ3VtZW50cywgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0RhdGUsIGlzUmVnRXhwLgogIGVhY2goWydBcmd1bWVudHMnLCAnRnVuY3Rpb24nLCAnU3RyaW5nJywgJ051bWJlcicsICdEYXRlJywgJ1JlZ0V4cCddLCBmdW5jdGlvbihuYW1lKSB7CiAgICBfWydpcycgKyBuYW1lXSA9IGZ1bmN0aW9uKG9iaikgewogICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0ICcgKyBuYW1lICsgJ10nOwogICAgfTsKICB9KTsKCiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSksIHdoZXJlCiAgLy8gdGhlcmUgaXNuJ3QgYW55IGluc3BlY3RhYmxlICJBcmd1bWVudHMiIHR5cGUuCiAgaWYgKCFfLmlzQXJndW1lbnRzKGFyZ3VtZW50cykpIHsKICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHsKICAgICAgcmV0dXJuICEhKG9iaiAmJiBfLmhhcyhvYmosICdjYWxsZWUnKSk7CiAgICB9OwogIH0KCiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLgogIGlmICh0eXBlb2YgKC8uLykgIT09ICdmdW5jdGlvbicpIHsKICAgIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikgewogICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJzsKICAgIH07CiAgfQoKICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/CiAgXy5pc0Zpbml0ZSA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIGlzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7CiAgfTsKCiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gPyAoTmFOIGlzIHRoZSBvbmx5IG51bWJlciB3aGljaCBkb2VzIG5vdCBlcXVhbCBpdHNlbGYpLgogIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfLmlzTnVtYmVyKG9iaikgJiYgb2JqICE9ICtvYmo7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGJvb2xlYW4/CiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQm9vbGVhbl0nOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD8KICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIG9iaiA9PT0gbnVsbDsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIHVuZGVmaW5lZD8KICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7CiAgfTsKCiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseQogIC8vIG9uIGl0c2VsZiAoaW4gb3RoZXIgd29yZHMsIG5vdCBvbiBhIHByb3RvdHlwZSkuCiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkgewogICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpOwogIH07CgogIC8vIFV0aWxpdHkgRnVuY3Rpb25zCiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cwogIC8vIHByZXZpb3VzIG93bmVyLiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC4KICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHsKICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIC8vIEtlZXAgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIGFyb3VuZCBmb3IgZGVmYXVsdCBpdGVyYXRvcnMuCiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfTsKCiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuCiAgXy50aW1lcyA9IGZ1bmN0aW9uKG4sIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGkpOwogICAgcmV0dXJuIGFjY3VtOwogIH07CgogIC8vIFJldHVybiBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gbWluIGFuZCBtYXggKGluY2x1c2l2ZSkuCiAgXy5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkgewogICAgaWYgKG1heCA9PSBudWxsKSB7CiAgICAgIG1heCA9IG1pbjsKICAgICAgbWluID0gMDsKICAgIH0KICAgIHJldHVybiBtaW4gKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpOwogIH07CgogIC8vIExpc3Qgb2YgSFRNTCBlbnRpdGllcyBmb3IgZXNjYXBpbmcuCiAgdmFyIGVudGl0eU1hcCA9IHsKICAgIGVzY2FwZTogewogICAgICAnJic6ICcmYW1wOycsCiAgICAgICc8JzogJyZsdDsnLAogICAgICAnPic6ICcmZ3Q7JywKICAgICAgJyInOiAnJnF1b3Q7JywKICAgICAgIiciOiAnJiN4Mjc7JwogICAgfQogIH07CiAgZW50aXR5TWFwLnVuZXNjYXBlID0gXy5pbnZlcnQoZW50aXR5TWFwLmVzY2FwZSk7CgogIC8vIFJlZ2V4ZXMgY29udGFpbmluZyB0aGUga2V5cyBhbmQgdmFsdWVzIGxpc3RlZCBpbW1lZGlhdGVseSBhYm92ZS4KICB2YXIgZW50aXR5UmVnZXhlcyA9IHsKICAgIGVzY2FwZTogICBuZXcgUmVnRXhwKCdbJyArIF8ua2V5cyhlbnRpdHlNYXAuZXNjYXBlKS5qb2luKCcnKSArICddJywgJ2cnKSwKICAgIHVuZXNjYXBlOiBuZXcgUmVnRXhwKCcoJyArIF8ua2V5cyhlbnRpdHlNYXAudW5lc2NhcGUpLmpvaW4oJ3wnKSArICcpJywgJ2cnKQogIH07CgogIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi4KICBfLmVhY2goWydlc2NhcGUnLCAndW5lc2NhcGUnXSwgZnVuY3Rpb24obWV0aG9kKSB7CiAgICBfW21ldGhvZF0gPSBmdW5jdGlvbihzdHJpbmcpIHsKICAgICAgaWYgKHN0cmluZyA9PSBudWxsKSByZXR1cm4gJyc7CiAgICAgIHJldHVybiAoJycgKyBzdHJpbmcpLnJlcGxhY2UoZW50aXR5UmVnZXhlc1ttZXRob2RdLCBmdW5jdGlvbihtYXRjaCkgewogICAgICAgIHJldHVybiBlbnRpdHlNYXBbbWV0aG9kXVttYXRjaF07CiAgICAgIH0pOwogICAgfTsKICB9KTsKCiAgLy8gSWYgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBgcHJvcGVydHlgIGlzIGEgZnVuY3Rpb24gdGhlbiBpbnZva2UgaXQgd2l0aCB0aGUKICAvLyBgb2JqZWN0YCBhcyBjb250ZXh0OyBvdGhlcndpc2UsIHJldHVybiBpdC4KICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsKICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDsKICAgIHZhciB2YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07CiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlOwogIH07CgogIC8vIEFkZCB5b3VyIG93biBjdXN0b20gZnVuY3Rpb25zIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC4KICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7CiAgICBlYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdOwogICAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdOwogICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTsKICAgICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7CiAgICAgIH07CiAgICB9KTsKICB9OwoKICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLgogIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuCiAgdmFyIGlkQ291bnRlciA9IDA7CiAgXy51bmlxdWVJZCA9IGZ1bmN0aW9uKHByZWZpeCkgewogICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJzsKICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkOwogIH07CgogIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZQogIC8vIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy4KICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7CiAgICBldmFsdWF0ZSAgICA6IC88JShbXHNcU10rPyklPi9nLAogICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcc1xTXSs/KSU+L2csCiAgICBlc2NhcGUgICAgICA6IC88JS0oW1xzXFNdKz8pJT4vZwogIH07CgogIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW4KICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzCiAgLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guCiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87CgogIC8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhCiAgLy8gc3RyaW5nIGxpdGVyYWwuCiAgdmFyIGVzY2FwZXMgPSB7CiAgICAiJyI6ICAgICAgIiciLAogICAgJ1xcJzogICAgICdcXCcsCiAgICAnXHInOiAgICAgJ3InLAogICAgJ1xuJzogICAgICduJywKICAgICdcdCc6ICAgICAndCcsCiAgICAnXHUyMDI4JzogJ3UyMDI4JywKICAgICdcdTIwMjknOiAndTIwMjknCiAgfTsKCiAgdmFyIGVzY2FwZXIgPSAvXFx8J3xccnxcbnxcdHxcdTIwMjh8XHUyMDI5L2c7CgogIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uCiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLAogIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLgogIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBkYXRhLCBzZXR0aW5ncykgewogICAgdmFyIHJlbmRlcjsKICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7CgogICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uCiAgICB2YXIgbWF0Y2hlciA9IG5ldyBSZWdFeHAoWwogICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSwKICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSwKICAgICAgKHNldHRpbmdzLmV2YWx1YXRlIHx8IG5vTWF0Y2gpLnNvdXJjZQogICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpOwoKICAgIC8vIENvbXBpbGUgdGhlIHRlbXBsYXRlIHNvdXJjZSwgZXNjYXBpbmcgc3RyaW5nIGxpdGVyYWxzIGFwcHJvcHJpYXRlbHkuCiAgICB2YXIgaW5kZXggPSAwOwogICAgdmFyIHNvdXJjZSA9ICJfX3ArPSciOwogICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7CiAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpCiAgICAgICAgLnJlcGxhY2UoZXNjYXBlciwgZnVuY3Rpb24obWF0Y2gpIHsgcmV0dXJuICdcXCcgKyBlc2NhcGVzW21hdGNoXTsgfSk7CgogICAgICBpZiAoZXNjYXBlKSB7CiAgICAgICAgc291cmNlICs9ICInK1xuKChfX3Q9KCIgKyBlc2NhcGUgKyAiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXG4nIjsKICAgICAgfQogICAgICBpZiAoaW50ZXJwb2xhdGUpIHsKICAgICAgICBzb3VyY2UgKz0gIicrXG4oKF9fdD0oIiArIGludGVycG9sYXRlICsgIikpPT1udWxsPycnOl9fdCkrXG4nIjsKICAgICAgfQogICAgICBpZiAoZXZhbHVhdGUpIHsKICAgICAgICBzb3VyY2UgKz0gIic7XG4iICsgZXZhbHVhdGUgKyAiXG5fX3ArPSciOwogICAgICB9CiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoOwogICAgICByZXR1cm4gbWF0Y2g7CiAgICB9KTsKICAgIHNvdXJjZSArPSAiJztcbiI7CgogICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS4KICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xuJyArIHNvdXJjZSArICd9XG4nOwoKICAgIHNvdXJjZSA9ICJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sIiArCiAgICAgICJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xuIiArCiAgICAgIHNvdXJjZSArICJyZXR1cm4gX19wO1xuIjsKCiAgICB0cnkgewogICAgICByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7CiAgICAgIHRocm93IGU7CiAgICB9CgogICAgaWYgKGRhdGEpIHJldHVybiByZW5kZXIoZGF0YSwgXyk7CiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7CiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBkYXRhLCBfKTsKICAgIH07CgogICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24gc291cmNlIGFzIGEgY29udmVuaWVuY2UgZm9yIHByZWNvbXBpbGF0aW9uLgogICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAoc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicpICsgJyl7XG4nICsgc291cmNlICsgJ30nOwoKICAgIHJldHVybiB0ZW1wbGF0ZTsKICB9OwoKICAvLyBBZGQgYSAiY2hhaW4iIGZ1bmN0aW9uLCB3aGljaCB3aWxsIGRlbGVnYXRlIHRvIHRoZSB3cmFwcGVyLgogIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfKG9iaikuY2hhaW4oKTsKICB9OwoKICAvLyBPT1AKICAvLyAtLS0tLS0tLS0tLS0tLS0KICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdAogIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlCiAgLy8gdW5kZXJzY29yZSBmdW5jdGlvbnMuIFdyYXBwZWQgb2JqZWN0cyBtYXkgYmUgY2hhaW5lZC4KCiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLgogIHZhciByZXN1bHQgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiB0aGlzLl9jaGFpbiA/IF8ob2JqKS5jaGFpbigpIDogb2JqOwogIH07CgogIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC4KICBfLm1peGluKF8pOwoKICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLgogIGVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkgewogICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07CiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDsKICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTsKICAgICAgaWYgKChuYW1lID09ICdzaGlmdCcgfHwgbmFtZSA9PSAnc3BsaWNlJykgJiYgb2JqLmxlbmd0aCA9PT0gMCkgZGVsZXRlIG9ialswXTsKICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIG9iaik7CiAgICB9OwogIH0pOwoKICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci4KICBlYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkgewogICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07CiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgbWV0aG9kLmFwcGx5KHRoaXMuX3dyYXBwZWQsIGFyZ3VtZW50cykpOwogICAgfTsKICB9KTsKCiAgXy5leHRlbmQoXy5wcm90b3R5cGUsIHsKCiAgICAvLyBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuCiAgICBjaGFpbjogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuX2NoYWluID0gdHJ1ZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LgogICAgdmFsdWU6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDsKICAgIH0KCiAgfSk7Cgp9KS5jYWxsKHRoaXMpOwoKZGVmaW5lKCJ1bmRlcnNjb3JlIiwgKGZ1bmN0aW9uIChnbG9iYWwpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHJldCwgZm47CiAgICAgICAgcmV0dXJuIHJldCB8fCBnbG9iYWwuXzsKICAgIH07Cn0odGhpcykpKTsKCmRlZmluZSgnZWRpc29uL2xpYi9taWNyb2V2ZW50JyxbXSwgZnVuY3Rpb24oKSB7CgoJLyoqCgkgKiBNaWNyb0V2ZW50IC0gdG8gbWFrZSBhbnkganMgb2JqZWN0IGFuIGV2ZW50IGVtaXR0ZXIgKHNlcnZlciBvciBicm93c2VyKQoJICoKCSAqIC0gcHVyZSBqYXZhc2NyaXB0IC0gc2VydmVyIGNvbXBhdGlibGUsIGJyb3dzZXIgY29tcGF0aWJsZQoJICogLSBkb250IHJlbHkgb24gdGhlIGJyb3dzZXIgZG9tcwoJICogLSBzdXBlciBzaW1wbGUgLSB5b3UgZ2V0IGl0IGltbWVkaWF0bHksIG5vIG1pc3RlcnksIG5vIG1hZ2ljIGludm9sdmVkCgkgKgoJICogLSBjcmVhdGUgYSBNaWNyb0V2ZW50RGVidWcgd2l0aCBnb29kaWVzIHRvIGRlYnVnCgkgKiAgIC0gbWFrZSBpdCBzYWZlciB0byB1c2UKCSovCgl2YXIgTWljcm9FdmVudAk9IGZ1bmN0aW9uKCl7fTsKCU1pY3JvRXZlbnQucHJvdG90eXBlCT0gewoJCWJpbmQJOiBmdW5jdGlvbihldmVudCwgZmN0KXsKCQkJdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9OwoJCQl0aGlzLl9ldmVudHNbZXZlbnRdID0gdGhpcy5fZXZlbnRzW2V2ZW50XQl8fCBbXTsKCQkJdGhpcy5fZXZlbnRzW2V2ZW50XS5wdXNoKGZjdCk7CgkJfSwKCQl1bmJpbmQJOiBmdW5jdGlvbihldmVudCwgZmN0KXsKCQkJdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9OwoJCQlpZiggZXZlbnQgaW4gdGhpcy5fZXZlbnRzID09PSBmYWxzZSAgKQlyZXR1cm47CgkJCXRoaXMuX2V2ZW50c1tldmVudF0uc3BsaWNlKHRoaXMuX2V2ZW50c1tldmVudF0uaW5kZXhPZihmY3QpLCAxKTsKCQl9LAoJCXRyaWdnZXIJOiBmdW5jdGlvbihldmVudCAvKiAsIGFyZ3MuLi4gKi8pewoJCQl0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307CgkJCWlmKCBldmVudCBpbiB0aGlzLl9ldmVudHMgPT09IGZhbHNlICApCXJldHVybjsKCQkJZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuX2V2ZW50c1tldmVudF0ubGVuZ3RoOyBpKyspewoJCQkJdGhpcy5fZXZlbnRzW2V2ZW50XVtpXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKCQkJfQoJCX0KCX07CgoJLyoqCgkgKiBtaXhpbiB3aWxsIGRlbGVnYXRlIGFsbCBNaWNyb0V2ZW50LmpzIGZ1bmN0aW9uIGluIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QKCSAqCgkgKiAtIHJlcXVpcmUoJ01pY3JvRXZlbnQnKS5taXhpbihGb29iYXIpIHdpbGwgbWFrZSBGb29iYXIgYWJsZSB0byB1c2UgTWljcm9FdmVudAoJICoKCSAqIEBwYXJhbSB7T2JqZWN0fSB0aGUgb2JqZWN0IHdoaWNoIHdpbGwgc3VwcG9ydCBNaWNyb0V2ZW50CgkqLwoJTWljcm9FdmVudC5taXhpbgk9IGZ1bmN0aW9uKGRlc3RPYmplY3QpewoJCXZhciBwcm9wcwk9IFsnYmluZCcsICd1bmJpbmQnLCAndHJpZ2dlciddOwoJCWZvcih2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKyspewoJCQlpZiggdHlwZW9mIGRlc3RPYmplY3QgPT09ICdmdW5jdGlvbicgKXsKCQkJCWRlc3RPYmplY3QucHJvdG90eXBlW3Byb3BzW2ldXQk9IE1pY3JvRXZlbnQucHJvdG90eXBlW3Byb3BzW2ldXTsKCQkJfWVsc2V7CgkJCQlkZXN0T2JqZWN0W3Byb3BzW2ldXSA9IE1pY3JvRXZlbnQucHJvdG90eXBlW3Byb3BzW2ldXTsKCQkJfQoJCX0KCX0KCglyZXR1cm4gTWljcm9FdmVudDsKCn0pOwoKZGVmaW5lKCdlZGlzb24vbGliL3NhbmRib3gnLFsncmVxdWlyZScsJ3VuZGVyc2NvcmUnLCcuL21pY3JvZXZlbnQnXSxmdW5jdGlvbihyZXF1aXJlKSB7CgoJdmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyksCgkJTWljcm9FdmVudCA9IHJlcXVpcmUoJy4vbWljcm9ldmVudCcpOwoKCXZhciBTYW5kYm94ID0gZnVuY3Rpb24ocm91dGUpIHsKCQl0aGlzLnJvdXRlID0gcm91dGU7Cgl9OwoKCV8uZXh0ZW5kKFNhbmRib3gucHJvdG90eXBlLCB7CgoJCSdnZXQnOiBmdW5jdGlvbihuYW1lKSB7CgkJCW5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcW10vLCAiXFxcWyIpLnJlcGxhY2UoL1tcXV0vLCAiXFxcXSIpOwoJCQl2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCJbXFw/Jl0iICsgbmFtZSArICI9KFteJiNdKikiKSwKCQkJcmVzdWx0cyA9IHJlZ2V4LmV4ZWMod2luZG93LmxvY2F0aW9uLmhhc2gpOwoJCQlyZXR1cm4gcmVzdWx0cyA9PSBudWxsID8gbnVsbCA6IGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzFdLnJlcGxhY2UoL1wrL2csICIgIikpOwoJCX0KCgl9KTsKCglNaWNyb0V2ZW50Lm1peGluKFNhbmRib3gucHJvdG90eXBlKTsKCglyZXR1cm4gU2FuZGJveDsKCn0pOwoKZGVmaW5lKCdlZGlzb24vbGliL3JvdXRlJyxbJ3JlcXVpcmUnLCd1bmRlcnNjb3JlJywnLi9zYW5kYm94J10sZnVuY3Rpb24ocmVxdWlyZSkgewoKCXZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpLAoJCVNhbmRib3ggPSByZXF1aXJlKCcuL3NhbmRib3gnKTsKCgkvKioKCSAqIEBjbGFzcyBSb3V0ZQoJICovCgl2YXIgUm91dGUgPSBmdW5jdGlvbihvcHRpb25zLCBzZWN0aW9uLCBlZGlzb24pIHsKCgkJXy5kZWZhdWx0cyhvcHRpb25zLCB7CgkJCSdpbml0JzogZnVuY3Rpb24oZm4pIHsKCQkJCWZuKCk7CgkJCX0KCQl9KTsKCgkJdmFyIHNlbGYgPSB0aGlzOwoJCXNlbGYudGl0bGUgPSBudWxsOwoJCXNlbGYubmFtZSA9IG9wdGlvbnMubmFtZTsKCQlzZWxmLnNlY3Rpb24gPSBzZWN0aW9uOwoJCXNlbGYuY2FsbGJhY2sgPSBvcHRpb25zLmNhbGxiYWNrOwoJCXNlbGYuZXh0ZW5zaW9ucyA9IG9wdGlvbnMuZXh0ZW5kOwoJCXNlbGYudGVtcGxhdGUgPSBvcHRpb25zLnRlbXBsYXRlIHx8ICI8ZGl2PjwvZGl2PiI7CgkJc2VsZi5jbGVhbnVwID0gb3B0aW9ucy5jbGVhbnVwOwoKCQlzZWxmLmxvZyA9IGZ1bmN0aW9uKCkgewoJCQlpZiAoICFlZGlzb24uZ2V0RGVidWcoKSApIHsKCQkJCXJldHVybjsKCQkJfQoJCQljb25zb2xlLmxvZyhhcmd1bWVudHMpOwoJCX07CgoJCS8qKgoJCSAqIFJldHVybnMgYSBzdHJpbmcgaW5kaWNhdGluZyB0aGUgbmFtZSBvZiB0aGUgc2VjdGlvbiArIHRoaXMgcm91dGUuCgkJICovCgkJc2VsZi5nZXRQYXRoID0gZnVuY3Rpb24oKSB7CgkJCXJldHVybiBzZWN0aW9uLmdldE5hbWUoKSArICcvJyArIHNlbGYubmFtZTsKCQl9OwoKCQlzZWxmLmxvZygnTmV3IHJvdXRlIGRlZmluZWQ6ICcgKyBzZWxmLmdldFBhdGgoKSk7CgoJCV8uZWFjaChlZGlzb24uZ2V0Um91dGVFeHRlbnNpb25zKCksIGZ1bmN0aW9uKGV4dCkgewoJCQlfLmV4dGVuZChTYW5kYm94LnByb3RvdHlwZSwgZXh0KTsKCQl9KTsKCgkJc2VsZi5zYW5kYm94ID0gbmV3IFNhbmRib3goKTsKCQlzZWxmLnNhbmRib3guc2VjdGlvbiA9IHNlY3Rpb24uZ2V0U2FuZGJveCgpOwoKCQlzZWxmLmluaXQgPSBmdW5jdGlvbihpZCwgZm4pIHsKCQkJb3B0aW9ucy5pbml0LmNhbGwoc2VsZi5zYW5kYm94LCBmdW5jdGlvbigpIHsKCQkJCWlmICggZWRpc29uLmdldEFjdGl2ZVNlY3Rpb24oKSAhPT0gc2VsZi5zZWN0aW9uICkgewoJCQkJCS8vIFRoZSB1c2VyIGlzIG1ha2luZyB0aGVpciBmaXJzdCBlbnRyeSBpbnRvIHRoaXMgc2VjdGlvbi4KCQkJCQlzZWxmLmxvZygnSW5pdGlhbCBlbnRyeSBpbnRvIHNlY3Rpb246ICcgKyBzZWN0aW9uLmdldE5hbWUoKSk7CgkJCQkJc2VsZi5zZWN0aW9uLmxvYWRUZW1wbGF0ZSgpOwoJCQkJCXNlbGYuc2VjdGlvbi5ydW5DYWxsYmFjaygpOwoJCQkJCVNhbmRib3gucHJvdG90eXBlLmNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb3V0ZScpOwoJCQkJCXNlbGYubG9hZFRlbXBsYXRlKCk7CgkJCQl9IGVsc2UgewoJCQkJCS8vIFRoZSB1c2VyIGlzIG5hdmlnYXRpbmcgd2l0aGluIHRoZSBzYW1lIHNlY3Rpb24uCgkJCQkJU2FuZGJveC5wcm90b3R5cGUuY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdXRlJyk7CgkJCQkJc2VsZi5sb2FkVGVtcGxhdGUoKTsKCQkJCX0KCQkJCWVkaXNvbi5zZXRBY3RpdmVTZWN0aW9uKHNlbGYuc2VjdGlvbik7CgkJCQllZGlzb24uc2V0QWN0aXZlUm91dGUoc2VsZi5hcGkpOwoJCQkJc2VsZi5jYWxsYmFjay5jYWxsKHNlbGYuc2FuZGJveCwgaWQpOwoJCQkJZm4oKTsKCQkJfSk7CgkJfTsKCgkJXy5lYWNoKHNlbGYuZXh0ZW5zaW9ucywgZnVuY3Rpb24oZm5jLCBleHRuYW1lKSB7CgkJCXNlbGYuc2FuZGJveFtleHRuYW1lXSA9IGZ1bmN0aW9uKCkgewoJCQkJZm5jLmFwcGx5KHNlbGYuc2FuZGJveCwgYXJndW1lbnRzKTsKCQkJfTsKCQl9KTsKCgkJc2VsZi5sb2FkVGVtcGxhdGUgPSBmdW5jdGlvbigpIHsKCQkJdmFyIHRwbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJCQl0cGwuaW5uZXJIVE1MID0gc2VsZi50ZW1wbGF0ZTsKCQkJdHBsLnNldEF0dHJpYnV0ZSgnaWQnLCAnc2VjdGlvbl8nICsgc2VsZi5zZWN0aW9uLmdldE5hbWUoKSArICdfcm91dGVfJyArIHNlbGYubmFtZSk7CgkJCXRwbC5jbGFzc05hbWUgPSAncm91dGUnOwoJCQllZGlzb24uaW5zZXJ0VGVtcGxhdGUodHBsKTsKCQl9OwoKCQkvKioKCQkgKiBQdWJsaWMgSW50ZXJmYWNlCgkJICovCgkJc2VsZi5hcGkgPSB7CgkJCWdldENhbGxiYWNrOiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiBzZWxmLmNhbGxiYWNrOwoJCQl9LAoJCQlnZXRTYW5kYm94OiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiBzZWxmLnNhbmRib3g7CgkJCX0sCgkJCWdldE5hbWU6IGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuIHNlbGYubmFtZTsKCQkJfSwKCQkJaW5pdDogZnVuY3Rpb24oKSB7CgkJCQlzZWxmLmluaXQuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsKCQkJfSwKCQkJZ2V0VGl0bGU6IGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuIHNlbGYudGl0bGU7CgkJCX0sCgkJCWdldEZ1bGxQYXRoOiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiB0aGlzLmdldEZ1bGxQYXRoLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7CgkJCX0sCgkJCWNsZWFudXA6IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCBfLmlzRnVuY3Rpb24oc2VsZi5jbGVhbnVwKSApIHsKCQkJCQlzZWxmLmNsZWFudXAuY2FsbChzZWxmLnNhbmRib3gpOwoJCQkJfQoJCQl9CgkJfTsKCgkJcmV0dXJuIHNlbGYuYXBpOwoKCX07CgoJXy5leHRlbmQoUm91dGUucHJvdG90eXBlLCB7CgoJCS8qKgoJCSAqIFJldHVybnMgdGhlIGhhc2hiYW5nIHBhdGggYXQgd2hpY2ggdGhpcyByb3V0ZSBjYW4gYmUgYWNjZXNzZWQ6IHNlY3Rpb25fbmFtZS9yb3V0ZV9uYW1lCgkJICovCgkJJ2dldEZ1bGxQYXRoJzogZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLnNlY3Rpb24uZ2V0TmFtZSgpICsgJy8nICsgdGhpcy5uYW1lOwoJCX0KCgl9KTsKCglyZXR1cm4gUm91dGU7Cgp9KTsKCmRlZmluZSgnZWRpc29uL2xpYi9zZWN0aW9uJyxbJ3JlcXVpcmUnLCd1bmRlcnNjb3JlJywnLi9yb3V0ZScsJy4vc2FuZGJveCddLGZ1bmN0aW9uKHJlcXVpcmUpIHsKCgl2YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKSwKCQlSb3V0ZSA9IHJlcXVpcmUoJy4vcm91dGUnKSwKCQlTYW5kYm94ID0gcmVxdWlyZSgnLi9zYW5kYm94Jyk7CgoJLyoqCgkgKiBAY2xhc3MgU2VjdGlvbgoJICovCgl2YXIgU2VjdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbnMsIGVkaXNvbikgewoKCQl2YXIgc2VsZiA9IHRoaXM7CgkJc2VsZi5lZGlzb24gPSBlZGlzb247CgkJc2VsZi5uYW1lID0gb3B0aW9ucy5uYW1lOwoJCXNlbGYuY29udHJvbGxlciA9IG9wdGlvbnMuY29udHJvbGxlcjsKCQlzZWxmLmNhbGxiYWNrID0gb3B0aW9ucy5jYWxsYmFjazsKCQlzZWxmLmV4dGVuc2lvbnMgPSBvcHRpb25zLmV4dGVuZDsKCQlzZWxmLnBhcmVudF9zZWN0aW9uID0gb3B0aW9ucy5wYXJlbnRfc2VjdGlvbjsKCQlzZWxmLnRlbXBsYXRlID0gb3B0aW9ucy50ZW1wbGF0ZSB8fCAiPGRpdiBpZD0ncm91dGUnPjwvZGl2PiI7CgkJc2VsZi50ZW1wbGF0ZURhdGEgPSBvcHRpb25zLnRlbXBsYXRlRGF0YTsKCQlzZWxmLmNsZWFudXAgPSBvcHRpb25zLmNsZWFudXA7CgkJc2VsZi5yb3V0ZXMgPSB7fTsKCgkJc2VsZi5jcmVhdGVSb3V0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKCQkJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgkJCV8uZGVmYXVsdHMob3B0aW9ucywgewoJCQkJJ25hbWUnOiBudWxsLAoJCQkJJ2NhbGxiYWNrJzogbnVsbCwKCQkJCSdleHRlbmQnOiB7fSwKCQkJCSdjbGVhbnVwJzogbnVsbAoJCQl9KTsKCQkJaWYgKCAhXy5pc1N0cmluZyhvcHRpb25zLm5hbWUpIHx8IG9wdGlvbnMubmFtZSA9PT0gJycgKSB7CgkJCQl0aHJvdyAnSW52YWxpZCBgbmFtZWAgc3BlY2lmaWVkLic7CgkJCX0KCQkJdmFyIG5hbWVfY2hlY2sgPSBvcHRpb25zLm5hbWUucmVwbGFjZSgvXFcvZywgJycpOwoJCQlpZiAoIG5hbWVfY2hlY2sgIT09IG9wdGlvbnMubmFtZSApIHsKCQkJCXRocm93ICdJbnZhbGlkIGBuYW1lYCBzcGVjaWZpZWQuJzsKCQkJfQoJCQlpZiAoICFfLmlzRnVuY3Rpb24ob3B0aW9ucy5jYWxsYmFjaykgJiYgIV8uaXNOdWxsKG9wdGlvbnMuY2FsbGJhY2spICkgewoJCQkJdGhyb3cgJ0ludmFsaWQgYGNhbGxiYWNrYCBzcGVjaWZpZWQuJzsKCQkJfQoJCQlpZiAoICFfLmlzT2JqZWN0KG9wdGlvbnMuZXh0ZW5kKSApIHsKCQkJCXRocm93ICdJbnZhbGlkIGBleHRlbmRgIHZhbHVlIHNwZWNpZmllZC4nOwoJCQl9CgkJCWlmICggIV8uaXNOdWxsKG9wdGlvbnMuY2xlYW51cCkgJiYgIV8uaXNGdW5jdGlvbihvcHRpb25zLmNsZWFudXApICkgewoJCQkJdGhyb3cgJ0ludmFsaWQgYGNsZWFudXBgIHZhbHVlIHNwZWNpZmllZC4nOwoJCQl9CgkJCW9wdGlvbnMudGVtcGxhdGVfY29udGFpbmVyX3NlbGVjdG9yID0gJy5yb3V0ZSc7CgkJCXZhciByb3V0ZSA9IG5ldyBSb3V0ZShvcHRpb25zLCBzZWxmLmFwaSwgZWRpc29uKTsKCQkJc2VsZi5yb3V0ZXNbb3B0aW9ucy5uYW1lXSA9IHJvdXRlOwoJCQlyZXR1cm4gcm91dGU7CgkJfTsKCgkJc2VsZi5sb2cgPSBmdW5jdGlvbigpIHsKCQkJaWYgKCAhZWRpc29uLmdldERlYnVnKCkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCQkJY29uc29sZS5sb2coYXJndW1lbnRzKTsKCQl9OwoKCQlfLmVhY2goZWRpc29uLmdldFJvdXRlRXh0ZW5zaW9ucygpLCBmdW5jdGlvbihleHQpIHsKCQkJXy5leHRlbmQoU2FuZGJveC5wcm90b3R5cGUsIGV4dCk7CgkJfSk7CgoJCV8uZXh0ZW5kKFNhbmRib3gucHJvdG90eXBlLCBzZWxmLmV4dGVuc2lvbnMpOwoKCQlzZWxmLnNhbmRib3ggPSBuZXcgU2FuZGJveCh0aGlzKTsKCgkJc2VsZi5sb2FkVGVtcGxhdGUgPSBmdW5jdGlvbigpIHsKCQkJdmFyIHRwbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJCQl0cGwuaW5uZXJIVE1MID0gc2VsZi50ZW1wbGF0ZTsKCQkJdHBsLnNldEF0dHJpYnV0ZSgnaWQnLCAnZWRpc29uX3NlY3Rpb24nKTsKCQkJdHBsLmNsYXNzTmFtZSA9ICdzZWN0aW9uJzsKCQkJZWRpc29uLmluc2VydFNlY3Rpb25UZW1wbGF0ZSh0cGwpOwoJCX07CgoJCXNlbGYuYXBpID0gewoJCQljcmVhdGVSb3V0ZTogc2VsZi5jcmVhdGVSb3V0ZS5iaW5kKHNlbGYpLAoJCQlnZXRSb3V0ZXM6IGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuIHNlbGYucm91dGVzOwoJCQl9LAoJCQloYXNSb3V0ZTogZnVuY3Rpb24obmFtZSkgewoJCQkJaWYgKCBfLmlzVW5kZWZpbmVkKHNlbGYucm91dGVzW25hbWVdKSApIHsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfSwKCQkJZ2V0Um91dGU6IGZ1bmN0aW9uKG5hbWUpIHsKCQkJCXJldHVybiBzZWxmLnJvdXRlc1tuYW1lXTsKCQkJfSwKCQkJZ2V0RGVmYXVsdFJvdXRlOiBmdW5jdGlvbigpIHsKCQkJCXZhciByb3V0ZXMgPSBfLmtleXMoc2VsZi5yb3V0ZXMpOwoJCQkJdmFyIHJvdXRlX25hbWUgPSByb3V0ZXNbMF07CgkJCQlyZXR1cm4gc2VsZi5yb3V0ZXNbcm91dGVfbmFtZV07CgkJCX0sCgkJCWdldE5hbWU6IGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuIHNlbGYubmFtZTsKCQkJfSwKCQkJZ2V0Q29udHJvbGxlcjogZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gc2VsZi5jb250cm9sbGVyOwoJCQl9LAoJCQlydW5DYWxsYmFjazogZnVuY3Rpb24oKSB7CgkJCQlzZWxmLmxvYWRUZW1wbGF0ZSgpOwoJCQkJc2VsZi5jYWxsYmFjay5jYWxsKHNlbGYuc2FuZGJveCk7CgkJCX0sCgkJCWdldFBhcmVudFNlY3Rpb246IGZ1bmN0aW9uKCkgewoJCQkJcmV0dXJuIHNlbGYucGFyZW50X3NlY3Rpb247CgkJCX0sCgkJCWNsZWFudXA6IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCBfLmlzRnVuY3Rpb24oc2VsZi5jbGVhbnVwKSApIHsKCQkJCQlzZWxmLmNsZWFudXAuY2FsbChzZWxmLnNhbmRib3gpOwoJCQkJfQoJCQl9LAoJCQlnZXRTYW5kYm94OiBmdW5jdGlvbigpIHsKCQkJCXJldHVybiBzZWxmLnNhbmRib3g7CgkJCX0sCgkJCWxvYWRUZW1wbGF0ZTogZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gc2VsZi5sb2FkVGVtcGxhdGUoKTsKCQkJfQoJCX07CgoJCXJldHVybiBzZWxmLmFwaTsKCgl9OwoKCXJldHVybiBTZWN0aW9uOwoKfSk7CgpkZWZpbmUoJ2VkaXNvbi9saWIvcm91dGVyJyxbJ3JlcXVpcmUnLCd1bmRlcnNjb3JlJywnLi9taWNyb2V2ZW50J10sZnVuY3Rpb24ocmVxdWlyZSkgewoKCXZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpLAoJCU1pY3JvRXZlbnQgPSByZXF1aXJlKCcuL21pY3JvZXZlbnQnKTsKCgkvKioKCSAqIEBjbGFzcyBSb3V0ZXIKCSAqLwoJdmFyIFJvdXRlciA9IGZ1bmN0aW9uKGVkaXNvbikgewoJCXRoaXMuaW5pdC5hcHBseSh0aGlzLCBfLnRvQXJyYXkoYXJndW1lbnRzKSk7CgkJLyoKCQlyZXR1cm4gewoJCQknYmluZCc6IHRoaXMuYmluZC5hcHBseSh0aGlzKQoJCX07CgkJKi8KCX07CgoJTWljcm9FdmVudC5taXhpbihSb3V0ZXIucHJvdG90eXBlKTsKCglfLmV4dGVuZChSb3V0ZXIucHJvdG90eXBlLCB7CgoJCSdlZGlzb24nOiBudWxsLAoKCQknbGlzdGVuaW5nJzogZmFsc2UsCgoJCSdpbml0JzogZnVuY3Rpb24oZWRpc29uKSB7CgkJCXRoaXMuZWRpc29uID0gZWRpc29uOwoJCX0sCgoJCSdsaXN0ZW4nOiBmdW5jdGlvbigpIHsKCQkJdmFyIHNlbGYgPSB0aGlzOwoJCQlpZiAoIHRoaXMubGlzdGVuaW5nICkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCXRoaXMubGlzdGVuaW5nID0gdHJ1ZTsKCQkJdGhpcy5iaW5kKCdoYXNoX2NoYW5nZScsIGZ1bmN0aW9uKGRhdGEpIHsKCQkJCXNlbGYub25IYXNoQ2hhbmdlKGRhdGEpOwoJCQl9KTsKCQkJdGhpcy53YXRjaFVSTCgpOwoJCX0sCgoJCSd3YXRjaFVSTCc6IGZ1bmN0aW9uKCkgewoJCQl3aW5kb3cub25oYXNoY2hhbmdlID0gdGhpcy5wcm9jZXNzSGFzaENoYW5nZS5iaW5kKHRoaXMpOwoJCQlpZiAoIHdpbmRvdy5sb2NhdGlvbi5oYXNoICkgewoJCQkJdGhpcy5wcm9jZXNzSGFzaENoYW5nZSgpOwoJCQl9CgkJfSwKCgkJJ3Byb2Nlc3NIYXNoQ2hhbmdlJzogZnVuY3Rpb24oKSB7CgkJCXRoaXMudHJpZ2dlcignaGFzaF9jaGFuZ2UnLCB7CgkJCQknaGFzaCc6IHdpbmRvdy5sb2NhdGlvbi5oYXNoCgkJCX0pOwoJCX0sCgoJCSdvbkhhc2hDaGFuZ2UnOiBmdW5jdGlvbihkYXRhKSB7CgkJCXZhciBwcm9jZXNzZWQ7CgkJCWRhdGEgPSBkYXRhIHx8IHt9OwoJCQlfLmRlZmF1bHRzKGRhdGEsIHsKCQkJCSdoYXNoJzogbnVsbAoJCQl9KTsKCQkJaWYgKCAhZGF0YS5oYXNoICkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCXRyeSB7CgkJCQlwcm9jZXNzZWQgPSB0aGlzLnByb2Nlc3NIYXNoKGRhdGEuaGFzaCk7CgkJCX0gY2F0Y2goZSkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCXRoaXMudHJpZ2dlcignb25fcm91dGUnLCBwcm9jZXNzZWQpOwoJCX0sCgoJCSdwcm9jZXNzSGFzaCc6IGZ1bmN0aW9uKGhhc2gpIHsKCQkJaWYgKCBoYXNoLmluZGV4T2YoJyMnKSA9PT0gMCAmJiBoYXNoLmluZGV4T2YoJyEnKSA9PT0gMSApIHsKCQkJCWhhc2ggPSBoYXNoLnN1YnN0cmluZygyKTsKCQkJfQoJCQlpZiAoIGhhc2ggPT09ICcnICkgewoJCQkJdGhyb3cgJ0ludmFsaWQgaGFzaC4nOwoJCQl9CgkJCXZhciBhZGRyZXNzID0gbnVsbCwKCQkJCXRtcCA9IGhhc2guc3BsaXQoJz8nKSwKCQkJCXNlY3Rpb25fbmFtZSA9IG51bGwsCgkJCQlyb3V0ZV9uYW1lID0gbnVsbCwKCQkJCXJvdXRlX2lkID0gbnVsbDsKCQkJaWYgKCB0bXAubGVuZ3RoID09PSAxICkgewoJCQkJYWRkcmVzcyA9IHRtcC5wb3AoKTsKCQkJfSBlbHNlIHsKCQkJCWFkZHJlc3MgPSB0bXAuc2hpZnQoKTsKCQkJfQoJCQlpZiAoIGFkZHJlc3MuaW5kZXhPZignLycpIDwgMCApIHsKCQkJCXNlY3Rpb25fbmFtZSA9IGFkZHJlc3M7CgkJCX0gZWxzZSB7CgkJCQl0bXAgPSBhZGRyZXNzLnNwbGl0KCcvJyk7CgkJCQlzd2l0Y2ggKCB0bXAubGVuZ3RoICkgewoJCQkJCWNhc2UgMToKCQkJCQkJc2VjdGlvbl9uYW1lID0gdG1wLnBvcCgpOwoJCQkJCQlicmVhazsKCQkJCQljYXNlIDI6CgkJCQkJCXNlY3Rpb25fbmFtZSA9IHRtcC5zaGlmdCgpOwoJCQkJCQlyb3V0ZV9uYW1lID0gdG1wLnNoaWZ0KCk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgMzoKCQkJCQkJc2VjdGlvbl9uYW1lID0gdG1wLnNoaWZ0KCk7CgkJCQkJCXJvdXRlX25hbWUgPSB0bXAuc2hpZnQoKTsKCQkJCQkJcm91dGVfaWQgPSB0bXAuc2hpZnQoKTsKCQkJCQkJYnJlYWs7CgkJCQl9CgkJCX0KCQkJdmFyIHBhcmFtcyA9IHt9OwoJCQlyZXR1cm4gewoJCQkJJ3NlY3Rpb25fbmFtZSc6IHNlY3Rpb25fbmFtZSwKCQkJCSdyb3V0ZV9uYW1lJzogcm91dGVfbmFtZSwKCQkJCSdyb3V0ZV9pZCc6IHJvdXRlX2lkCgkJCX07CgkJfQoKCX0pOwoKCXJldHVybiBSb3V0ZXI7Cgp9KTsKCmRlZmluZSgnZWRpc29uL2xpYi91dGlsJyxbXSwgZnVuY3Rpb24oKSB7CgoJcmV0dXJuIHsKCgkJLyoqCgkJICogUmV0dXJucyB0cnVlIC8gZmFsc2UgYXMgdG8gd2hldGhlciB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgSFRNTDUgSGlzdG9yeSBBUEkKCQkgKi8KCQknc3VwcG9ydHNIaXN0b3J5QVBJJzogZnVuY3Rpb24oKSB7CgkJCXJldHVybiAhISh3aW5kb3cuaGlzdG9yeSAmJiBoaXN0b3J5LnB1c2hTdGF0ZSk7CgkJfQoKCX07Cgp9KTsKCmRlZmluZSgnZWRpc29uL2xpYi9lZGlzb24nLFsncmVxdWlyZScsJ3VuZGVyc2NvcmUnLCcuL3NlY3Rpb24nLCcuL3JvdXRlJywnLi9yb3V0ZXInLCcuL3V0aWwnXSxmdW5jdGlvbihyZXF1aXJlKSB7CgoJdmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyksCgkJU2VjdGlvbiA9IHJlcXVpcmUoJy4vc2VjdGlvbicpLAoJCVJvdXRlID0gcmVxdWlyZSgnLi9yb3V0ZScpLAoJCVJvdXRlciA9IHJlcXVpcmUoJy4vcm91dGVyJyksCgkJdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpOwoKCXZhciBFZGlzb24gPSBmdW5jdGlvbigpIHsKCQl0aGlzLmluaXQuYXBwbHkodGhpcywgXy50b0FycmF5KGFyZ3VtZW50cykpOwoJCXJldHVybiB7CgkJCSdjcmVhdGVTZWN0aW9uJzogdGhpcy5jcmVhdGVTZWN0aW9uLmJpbmQodGhpcyksCgkJCSdpbml0Um91dGVzJzogdGhpcy5pbml0Um91dGVzLmJpbmQodGhpcyksCgkJCSdleHRlbmQnOiB0aGlzLmV4dGVuZC5iaW5kKHRoaXMpLAoJCQknZXh0ZW5kQ2xlYW51cCc6IHRoaXMuZXh0ZW5kQ2xlYW51cC5iaW5kKHRoaXMpCgkJfTsKCX07CgoJXy5leHRlbmQoRWRpc29uLnByb3RvdHlwZSwgewoKCQknaW5pdCc6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKCQkJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgkJCV8uZGVmYXVsdHMob3B0aW9ucywgdGhpcy5vcHRpb25zKTsKCQkJdGhpcy5vcHRpb25zID0gb3B0aW9uczsKCQkJaWYgKCAhXy5pc0Jvb2xlYW4ob3B0aW9ucy5wdXNoU3RhdGUpICkgewoJCQkJb3B0aW9ucy5wdXNoU3RhdGUgPSBmYWxzZTsKCQkJfQoJCQlpZiAoICFvcHRpb25zLmNvbnRhaW5lciApIHsKCQkJCXRocm93ICdBIHZhbHVlIG11c3QgYmUgc3BlY2lmaWVkIGZvciBgY29udGFpbmVyLmAnOwoJCQl9IGVsc2UgewoJCQkJdGhpcy5yb3V0ZV9jb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvcHRpb25zLmNvbnRhaW5lcik7CgkJCQlpZiAoICEgdGhpcy5yb3V0ZV9jb250YWluZXIgKSB7CgkJCQkJdGhyb3cgJ1NwZWNpZmllZCByb3V0ZSBjb250YWluZXIgZG9lcyBub3QgZXhpc3Q6IGAnICsgb3B0aW9ucy5jb250YWluZXIgKyAnLmAnOwoJCQkJfQoJCQkJaWYgKCBvcHRpb25zLnB1c2hTdGF0ZSAmJiB1dGlsLnN1cHBvcnRzSGlzdG9yeUFQSSgpICkgewoJCQkJCXRoaXMuZW5hYmxlUHVzaFN0YXRlID0gdHJ1ZTsKCQkJCX0KCQkJfQoJCX0sCgoJCSdvcHRpb25zJzogewoJCQknY29udGFpbmVyJzogbnVsbCwKCQkJJ3B1c2hTdGF0ZSc6IGZhbHNlCgkJfSwKCgkJJ2RlYnVnJzogZmFsc2UsCgoJCSdlbmFibGVQdXNoU3RhdGUnOiBmYWxzZSwKCgkJJ3JvdXRlc19pbml0aWFsaXplZCc6IGZhbHNlLAoKCQknc2VjdGlvbnMnOiB7fSwKCgkJJ2FjdGl2ZV9wYXJlbnRfc2VjdGlvbic6IG51bGwsCgoJCSdhY3RpdmVfc2VjdGlvbic6IG51bGwsCgoJCSdhY3RpdmVfc2VjdGlvbl9pbnRlcnZhbHMnOiBbXSwKCgkJJ2FjdGl2ZV9wYXJlbnRfc2VjdGlvbl9pbnRlcnZhbHMnOiBbXSwKCgkJJ2FjdGl2ZV9yb3V0ZSc6IG51bGwsCgoJCSdSb3V0ZXMnOiBudWxsLAoKCQkncm91dGVfZXh0ZW5zaW9ucyc6IFtdLAoKCQknbG9nJzogZnVuY3Rpb24oKSB7CgkJCWlmICggIXRoaXMuZGVidWcgKSB7CgkJCQlyZXR1cm47CgkJCX0KCQkJY29uc29sZS5sb2coYXJndW1lbnRzKTsKCQl9LAoKCQknY3JlYXRlU2VjdGlvbic6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKCQkJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgkJCV8uZGVmYXVsdHMob3B0aW9ucywgewoJCQkJJ25hbWUnOiBudWxsLAoJCQkJJ2NhbGxiYWNrJzogbnVsbCwKCQkJCSdleHRlbmQnOiB7fSwKCQkJCSdjbGVhbnVwJzogbnVsbAoJCQl9KTsKCQkJaWYgKCAhXy5pc1N0cmluZyhvcHRpb25zLm5hbWUpIHx8IG9wdGlvbnMubmFtZSA9PT0gJycgKSB7CgkJCQl0aHJvdyAnSW52YWxpZCBgbmFtZWAgc3BlY2lmaWVkLic7CgkJCX0KCQkJdmFyIG5hbWVfY2hlY2sgPSBvcHRpb25zLm5hbWUucmVwbGFjZSgvXFcvZywgJycpOwoJCQlpZiAoIG5hbWVfY2hlY2sgIT09IG9wdGlvbnMubmFtZSApIHsKCQkJCXRocm93ICdJbnZhbGlkIGBuYW1lYCBzcGVjaWZpZWQuJzsKCQkJfQoJCQlpZiAoICFfLmlzRnVuY3Rpb24ob3B0aW9ucy5jYWxsYmFjaykgJiYgIV8uaXNOdWxsKG9wdGlvbnMuY2FsbGJhY2spICkgewoJCQkJdGhyb3cgJ0ludmFsaWQgYGNhbGxiYWNrYCBzcGVjaWZpZWQuJzsKCQkJfQoJCQlpZiAoICFfLmlzT2JqZWN0KG9wdGlvbnMuZXh0ZW5kKSApIHsKCQkJCXRocm93ICdJbnZhbGlkIGBleHRlbmRgIHZhbHVlIHNwZWNpZmllZC4nOwoJCQl9CgkJCWlmICggIV8uaXNOdWxsKG9wdGlvbnMuY2xlYW51cCkgJiYgIV8uaXNGdW5jdGlvbihvcHRpb25zLmNsZWFudXApICkgewoJCQkJdGhyb3cgJ0ludmFsaWQgYGNsZWFudXBgIHZhbHVlIHNwZWNpZmllZC4nOwoJCQl9CgkJCXRoaXMuc2VjdGlvbnNbb3B0aW9ucy5uYW1lXSA9IG5ldyBTZWN0aW9uKG9wdGlvbnMsIHRoaXMpOwoJCQlyZXR1cm4gdGhpcy5zZWN0aW9uc1tvcHRpb25zLm5hbWVdOwoJCX0sCgoJCSdjaGVja1BhcmVudFNlY3Rpb24nOiBmdW5jdGlvbihzZWN0aW9uX25hbWUpIHsKCQkJaWYgKCBfLmlzU3RyaW5nKHRoaXMuc2VjdGlvbnNbc2VjdGlvbl9uYW1lXS5nZXRQYXJlbnRTZWN0aW9uKCkpICkgewoJCQkJaWYgKCB0aGlzLmFjdGl2ZV9wYXJlbnRfc2VjdGlvbiAhPT0gdGhpcy5zZWN0aW9uc1tzZWN0aW9uX25hbWVdLmdldFBhcmVudFNlY3Rpb24oKSApIHsKCQkJCQlpZiAoICFfLmVtcHR5KHRoaXMuYWN0aXZlX3BhcmVudF9zZWN0aW9uKSApIHsKCQkJCQkJdGhpcy5hY3RpdmVfcGFyZW50X3NlY3Rpb24uY2xlYW51cCgpOwoJCQkJCQl0aGlzLmNsZWFyUGFyZW50U2VjdGlvbkludGVydmFscygpOwoJCQkJCX0KCQkJCQl0aGlzLmFjdGl2ZV9wYXJlbnRfc2VjdGlvbiA9IHRoaXMuc2VjdGlvbnNbc2VjdGlvbl9uYW1lXS5nZXRQYXJlbnRTZWN0aW9uKCk7CgkJCQkJdmFyIHBhcmVudFNlY3Rpb24gPSB0aGlzLnNlY3Rpb25zW3NlY3Rpb25fbmFtZV0uZ2V0UGFyZW50U2VjdGlvbigpOwoJCQkJCXRoaXMuc2VjdGlvbnNbcGFyZW50U2VjdGlvbl0ucnVuQ2FsbGJhY2soKTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXRoaXMuYWN0aXZlX3BhcmVudF9zZWN0aW9uID0gbnVsbDsKCQkJCXRoaXMuY2xlYXJQYXJlbnRTZWN0aW9uSW50ZXJ2YWxzKCk7CgkJCX0KCQl9LAoKCQknY2xlYXJQYXJlbnRTZWN0aW9uSW50ZXJ2YWxzJzogZnVuY3Rpb24oKSB7CgkJCV8uZWFjaCh0aGlzLmFjdGl2ZV9wYXJlbnRfc2VjdGlvbl9pbnRlcnZhbHMsIGZ1bmN0aW9uKGludGVydmFsX2lkKSB7CgkJCQljbGVhckludGVydmFsKGludGVydmFsX2lkKTsKCQkJfSk7CgkJfSwKCgkJJ2luaXRSb3V0ZXMnOiBmdW5jdGlvbigpIHsKCQkJdmFyIHNlbGYgPSB0aGlzOwoJCQl0aGlzLmxvZygnSW5pdGlhbGl6aW5nIHJvdXRlcy4uLicpOwoJCQlpZiAoIHRoaXMucm91dGVzX2luaXRpYWxpemVkICkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCXRoaXMucm91dGVzX2luaXRpYWxpemVkID0gdHJ1ZTsKCQkJdGhpcy5yb3V0ZXIgPSBuZXcgUm91dGVyKHRoaXMpOwoJCQl0aGlzLnJvdXRlci5iaW5kKCdvbl9yb3V0ZScsIHRoaXMub25Sb3V0ZS5iaW5kKHRoaXMpKTsKCQkJdGhpcy5yb3V0ZXIubGlzdGVuKCk7CgkJfSwKCgkJJ29uUm91dGUnOiBmdW5jdGlvbihkYXRhKSB7CgkJCXRoaXMubG9nKCdvblJvdXRlJywgZGF0YSk7CgkJCXZhciBzZWxmID0gdGhpczsKCQkJaWYgKCAhdGhpcy5zZWN0aW9uc1tkYXRhLnNlY3Rpb25fbmFtZV0gKSB7CgkJCQlyZXR1cm47CgkJCX0KCQkJdmFyIHNlY3Rpb24gPSB0aGlzLnNlY3Rpb25zW2RhdGEuc2VjdGlvbl9uYW1lXSwKCQkJCXJvdXRlOwoJCQlpZiAoICFkYXRhLnJvdXRlX25hbWUgKSB7CgkJCQlyb3V0ZSA9IHNlY3Rpb24uZ2V0RGVmYXVsdFJvdXRlKCk7CgkJCX0gZWxzZSB7CgkJCQlyb3V0ZSA9IHNlY3Rpb24uZ2V0Um91dGUoZGF0YS5yb3V0ZV9uYW1lKTsKCQkJfQoJCQlpZiAoICFyb3V0ZSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJXy5lYWNoKHNlbGYuYWN0aXZlX3NlY3Rpb25faW50ZXJ2YWxzLCBmdW5jdGlvbihpbnRlcnZhbF9pZCkgewoJCQkJY2xlYXJJbnRlcnZhbChpbnRlcnZhbF9pZCk7CgkJCX0pOwoKCQkJdmFyIHByZXZpb3VzUm91dGUgPSB0aGlzLmdldEFjdGl2ZVJvdXRlKCk7CgkJCWlmICggcHJldmlvdXNSb3V0ZSApIHsKCQkJCXByZXZpb3VzUm91dGUuY2xlYW51cCgpOwoJCQkJXy5lYWNoKHRoaXMuY2xlYW51cEV4dGVuZGVycywgZnVuY3Rpb24oY2UpIHsKCQkJCQljZS5jYWxsKHByZXZpb3VzUm91dGUuZ2V0U2FuZGJveCgpKTsKCQkJCX0pOwoJCQl9CgoJCQl2YXIgcHJldmlvdXNTZWN0aW9uID0gdGhpcy5nZXRBY3RpdmVTZWN0aW9uKCk7CgkJCWlmICggcHJldmlvdXNTZWN0aW9uICkgewoJCQkJaWYgKCBwcmV2aW91c1NlY3Rpb24uZ2V0TmFtZSgpICE9PSBkYXRhLnNlY3Rpb25fbmFtZSApIHsKCQkJCQlwcmV2aW91c1NlY3Rpb24uY2xlYW51cCgpOwoJCQkJfQoJCQl9CgoJCQl0aGlzLmNoZWNrUGFyZW50U2VjdGlvbihkYXRhLnNlY3Rpb25fbmFtZSk7CgkJCXJvdXRlLmluaXQoZGF0YS5yb3V0ZV9pZCwgZnVuY3Rpb24oZXJyKSB7CgkJCQlpZiAoIGVyciApIHsKCQkJCQkvLyB0b2RvIC0gPwoJCQkJfQoJCQl9KTsKCQl9LAoKCQknbmF2aWdhdGUnOiBmdW5jdGlvbihyb3V0ZSwgbGVhdmVfaGlzdG9yeSkgewoJCQl2YXIgb3B0cyA9IHsKCQkJCXRyaWdnZXI6IHRydWUsCgkJCQlyZXBsYWNlIDogbGVhdmVfaGlzdG9yeQoJCQl9OwoJCQl0aGlzLlJvdXRlcy5uYXZpZ2F0ZShyb3V0ZSwgb3B0cyk7CgkJfSwKCgkJJ3NldEFjdGl2ZVNlY3Rpb24nOiBmdW5jdGlvbihzZWN0aW9uKSB7CgkJCXRoaXMuYWN0aXZlX3NlY3Rpb24gPSBzZWN0aW9uOwoJCX0sCgoJCSdzZXRBY3RpdmVSb3V0ZSc6IGZ1bmN0aW9uKHJvdXRlKSB7CgkJCXRoaXMuYWN0aXZlX3JvdXRlID0gcm91dGU7CgkJfSwKCgkJJ2dldERlYnVnJzogZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLmRlYnVnOwoJCX0sCgoJCSdnZXRBY3RpdmVTZWN0aW9uJzogZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLmFjdGl2ZV9zZWN0aW9uOwoJCX0sCgoJCSdnZXRBY3RpdmVSb3V0ZSc6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gdGhpcy5hY3RpdmVfcm91dGU7CgkJfSwKCgkJJ2NyZWF0ZVNlY3Rpb25JbnRlcnZhbCc6IGZ1bmN0aW9uKGZuLCBpbnRlcnZhbCkgewoJCQl0aGlzLmFjdGl2ZV9zZWN0aW9uX2ludGVydmFscy5wdXNoKHNldEludGVydmFsKGZuLCBpbnRlcnZhbCkpOwoJCX0sCgoJCSdjcmVhdGVQYXJlbnRTZWN0aW9uSW50ZXJ2YWwnOiBmdW5jdGlvbihmbiwgaW50ZXJ2YWwpIHsKCQkJdGhpcy5hY3RpdmVfcGFyZW50X3NlY3Rpb25faW50ZXJ2YWxzLnB1c2goc2V0SW50ZXJ2YWwoZm4sIGludGVydmFsKSk7CgkJfSwKCgkJJ2dldFJvdXRlcyc6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gdGhpcy5Sb3V0ZXM7CgkJfSwKCgkJJ2luc2VydFNlY3Rpb25UZW1wbGF0ZSc6IGZ1bmN0aW9uKHRlbXBsYXRlKSB7CgkJCXRoaXMucm91dGVfY29udGFpbmVyLmlubmVySFRNTCA9ICcnOwoJCQl0aGlzLnJvdXRlX2NvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZW1wbGF0ZSk7CgkJfSwKCgkJJ2luc2VydFRlbXBsYXRlJzogZnVuY3Rpb24odGVtcGxhdGUpIHsKCQkJdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb3V0ZScpOwoJCQljb250YWluZXIuaW5uZXJIVE1MID0gJyc7CgkJCWNvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZW1wbGF0ZSk7CgkJfSwKCgkJJ2V4dGVuZCc6IGZ1bmN0aW9uKGV4dCkgewoJCQlpZiAoICFfLmlzT2JqZWN0KGV4dCkgKSB7CgkJCQl0aHJvdyAnSW52YWxpZCBleHRlbnNpb24ocykgc3BlY2lmaWVkOiBleHBlY3RlZCBhbiBvYmplY3QuJzsKCQkJfQoJCQl0aGlzLnJvdXRlX2V4dGVuc2lvbnMucHVzaChleHQpOwoJCX0sCgoJCSdnZXRSb3V0ZUV4dGVuc2lvbnMnOiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuIHRoaXMucm91dGVfZXh0ZW5zaW9uczsKCQl9LAoKCQknY2xlYW51cEV4dGVuZGVycyc6IFtdLAoKCQknZXh0ZW5kQ2xlYW51cCc6IGZ1bmN0aW9uKGZuKSB7CgkJCWlmICggIV8uaXNGdW5jdGlvbihmbikgKSB7CgkJCQl0aHJvdyAnZXh0ZW5kQ2xlYW51cCBleHBlY3RzIGEgc2luZ2xlIHBhcmFtZXRlcjogYSBjYWxsYmFjayBmdW5jdGlvbi4nOwoJCQl9CgkJCXRoaXMuY2xlYW51cEV4dGVuZGVycy5wdXNoKGZuKTsKCQl9CgoJfSk7CgoJcmV0dXJuIEVkaXNvbjsKCn0pOwoKLyoqCiAqIEBwYWNrYWdlIEVkaXNvbgogKi8KZGVmaW5lKCdlZGlzb24nLCBbJ3JlcXVpcmUnLCcuL2xpYi9lZGlzb24nXSxmdW5jdGlvbihyZXF1aXJlKSB7CglyZXR1cm4gcmVxdWlyZSgnLi9saWIvZWRpc29uJyk7Cn0pOwoKZGVmaW5lKCJlZGlzb24vbWFpbiIsIGZ1bmN0aW9uKCl7fSk7Cg==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 22:26:13 GMT",
                    "Content-Length": "61166",
                    "Date": "Thu, 06 Nov 2014 22:26:14 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}