{
    "url": "http://localhost:9999/gmmorris/birdwatcherjs/test/qunit/qunit.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.search</b> and written to <b>the 'innerHTML' property of a DOM element</b> via the following statements:<ul><li>var testName = decodeURIComponent(location.search.slice(1));</li><li>banner.innerHTML = '&lt;a href=\"' + mainPageLocation + '\"&gt;' + banner.innerHTML + '&lt;/a&gt; &amp;#8250; &lt;a href=\"\"&gt;' + testName + '&lt;/a&gt;';</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/gmmorris/birdwatcherjs/test/qunit/qunit.js",
                "path": "/gmmorris/birdwatcherjs/test/qunit/qunit.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9nbW1vcnJpcy9iaXJkd2F0Y2hlcmpzL3Rlc3QvcXVuaXQvcXVuaXQuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNDU0OTkNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IFRodSwgMDYgTm92IDIwMTQgMTI6NDE6NDggR01UDQpMYXN0LU1vZGlmaWVkOiBUaHUsIDA2IE5vdiAyMDE0IDEyOjQxOjQ2IEdNVA0KDQovKgogKiBRVW5pdCAtIEEgSmF2YVNjcmlwdCBVbml0IFRlc3RpbmcgRnJhbWV3b3JrCiAqIAogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1FVbml0CiAqCiAqIENvcHlyaWdodCAoYykgMjAwOSBKb2huIFJlc2lnLCBKw7ZybiBaYWVmZmVyZXIKICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIChNSVQtTElDRU5TRS50eHQpCiAqIGFuZCBHUEwgKEdQTC1MSUNFTlNFLnR4dCkgbGljZW5zZXMuCiAqLwoKKGZ1bmN0aW9uKHdpbmRvdykgewoKICAgIHZhciBkZWZpbmVkID0gewogICAgICAgIHNldFRpbWVvdXQ6IHR5cGVvZiB3aW5kb3cuc2V0VGltZW91dCAhPT0gInVuZGVmaW5lZCIKICAgIH0KCiAgICB2YXIgUVVuaXQgPSB7CgogICAgICAgIC8vIGNhbGwgb24gc3RhcnQgb2YgbW9kdWxlIHRlc3QgdG8gcHJlcGVuZCBuYW1lIHRvIGFsbCB0ZXN0cwogICAgICAgIG1vZHVsZTogZnVuY3Rpb24obmFtZSwgdGVzdEVudmlyb25tZW50KSB7CiAgICAgICAgICAgIGNvbmZpZy5jdXJyZW50TW9kdWxlID0gbmFtZTsKCiAgICAgICAgICAgIHN5bmNocm9uaXplKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKCBjb25maWcucHJldmlvdXNNb2R1bGUgKSB7CiAgICAgICAgICAgICAgICAgICAgUVVuaXQubW9kdWxlRG9uZSggY29uZmlnLmN1cnJlbnRNb2R1bGUsIGNvbmZpZy5tb2R1bGVTdGF0cy5iYWQsIGNvbmZpZy5tb2R1bGVTdGF0cy5hbGwgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25maWcucHJldmlvdXNNb2R1bGUgPSBjb25maWcuY3VycmVudE1vZHVsZTsKICAgICAgICAgICAgICAgIGNvbmZpZy5jdXJyZW50TW9kdWxlID0gbmFtZTsKICAgICAgICAgICAgICAgIGNvbmZpZy5tb2R1bGVUZXN0RW52aXJvbm1lbnQgPSB0ZXN0RW52aXJvbm1lbnQ7CiAgICAgICAgICAgICAgICBjb25maWcubW9kdWxlU3RhdHMgPSB7IGFsbDogMCwgYmFkOiAwIH07CgogICAgICAgICAgICAgICAgUVVuaXQubW9kdWxlU3RhcnQoIG5hbWUsIHRlc3RFbnZpcm9ubWVudCApOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBhc3luY1Rlc3Q6IGZ1bmN0aW9uKHRlc3ROYW1lLCBleHBlY3RlZCwgY2FsbGJhY2spIHsKICAgICAgICAgICAgaWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAyICkgewogICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBleHBlY3RlZDsKICAgICAgICAgICAgICAgIGV4cGVjdGVkID0gMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgUVVuaXQudGVzdCh0ZXN0TmFtZSwgZXhwZWN0ZWQsIGNhbGxiYWNrLCB0cnVlKTsKICAgICAgICB9LAoKICAgICAgICB0ZXN0OiBmdW5jdGlvbih0ZXN0TmFtZSwgZXhwZWN0ZWQsIGNhbGxiYWNrLCBhc3luYykgewogICAgICAgICAgICB2YXIgbmFtZSA9ICc8c3BhbiBjbGFzcz0idGVzdC1uYW1lIj4nICsgdGVzdE5hbWUgKyAnPC9zcGFuPicsIHRlc3RFbnZpcm9ubWVudCwgdGVzdEVudmlyb25tZW50QXJnOwoKICAgICAgICAgICAgaWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAyICkgewogICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBleHBlY3RlZDsKICAgICAgICAgICAgICAgIGV4cGVjdGVkID0gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBpcyAybmQgYXJndW1lbnQgYSB0ZXN0RW52aXJvbm1lbnQ/CiAgICAgICAgICAgIGlmICggZXhwZWN0ZWQgJiYgdHlwZW9mIGV4cGVjdGVkID09PSAnb2JqZWN0JykgewogICAgICAgICAgICAgICAgdGVzdEVudmlyb25tZW50QXJnID0gIGV4cGVjdGVkOwogICAgICAgICAgICAgICAgZXhwZWN0ZWQgPSBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIGNvbmZpZy5jdXJyZW50TW9kdWxlICkgewogICAgICAgICAgICAgICAgbmFtZSA9ICc8c3BhbiBjbGFzcz0ibW9kdWxlLW5hbWUiPicgKyBjb25maWcuY3VycmVudE1vZHVsZSArICI8L3NwYW4+OiAiICsgbmFtZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCAhdmFsaWRUZXN0KGNvbmZpZy5jdXJyZW50TW9kdWxlICsgIjogIiArIHRlc3ROYW1lKSApIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3luY2hyb25pemUoZnVuY3Rpb24oKSB7CgogICAgICAgICAgICAgICAgdGVzdEVudmlyb25tZW50ID0gZXh0ZW5kKHsKICAgICAgICAgICAgICAgICAgICBzZXR1cDogZnVuY3Rpb24oKSB7fSwKICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bjogZnVuY3Rpb24oKSB7fQogICAgICAgICAgICAgICAgfSwgY29uZmlnLm1vZHVsZVRlc3RFbnZpcm9ubWVudCk7CiAgICAgICAgICAgICAgICBpZiAodGVzdEVudmlyb25tZW50QXJnKSB7CiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHRlc3RFbnZpcm9ubWVudCx0ZXN0RW52aXJvbm1lbnRBcmcpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIFFVbml0LnRlc3RTdGFydCggdGVzdE5hbWUsIHRlc3RFbnZpcm9ubWVudCApOwoKICAgICAgICAgICAgICAgIC8vIGFsbG93IHV0aWxpdHkgZnVuY3Rpb25zIHRvIGFjY2VzcyB0aGUgY3VycmVudCB0ZXN0IGVudmlyb25tZW50CiAgICAgICAgICAgICAgICBRVW5pdC5jdXJyZW50X3Rlc3RFbnZpcm9ubWVudCA9IHRlc3RFbnZpcm9ubWVudDsKCiAgICAgICAgICAgICAgICBjb25maWcuYXNzZXJ0aW9ucyA9IFtdOwogICAgICAgICAgICAgICAgY29uZmlnLmV4cGVjdGVkID0gZXhwZWN0ZWQ7CgogICAgICAgICAgICAgICAgdmFyIHRlc3RzID0gaWQoInF1bml0LXRlc3RzIik7CiAgICAgICAgICAgICAgICBpZiAodGVzdHMpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0cm9uZyIpOwogICAgICAgICAgICAgICAgICAgIGIuaW5uZXJIVE1MID0gIlJ1bm5pbmcgIiArIG5hbWU7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGkiKTsKICAgICAgICAgICAgICAgICAgICBsaS5hcHBlbmRDaGlsZCggYiApOwogICAgICAgICAgICAgICAgICAgIGxpLmlkID0gImN1cnJlbnQtdGVzdC1vdXRwdXQiOwogICAgICAgICAgICAgICAgICAgIHRlc3RzLmFwcGVuZENoaWxkKCBsaSApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhY29uZmlnLnBvbGx1dGlvbiApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUdsb2JhbCgpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdGVzdEVudmlyb25tZW50LnNldHVwLmNhbGwodGVzdEVudmlyb25tZW50KTsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgICAgIFFVbml0Lm9rKCBmYWxzZSwgIlNldHVwIGZhaWxlZCBvbiAiICsgbmFtZSArICI6ICIgKyBlLm1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBzeW5jaHJvbml6ZShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmICggYXN5bmMgKSB7CiAgICAgICAgICAgICAgICAgICAgUVVuaXQuc3RvcCgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0ZXN0RW52aXJvbm1lbnQpOwogICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgZmFpbCgiVGVzdCAiICsgbmFtZSArICIgZGllZCwgZXhjZXB0aW9uIGFuZCB0ZXN0IGZvbGxvd3MiLCBlLCBjYWxsYmFjayk7CiAgICAgICAgICAgICAgICAgICAgUVVuaXQub2soIGZhbHNlLCAiRGllZCBvbiB0ZXN0ICMiICsgKGNvbmZpZy5hc3NlcnRpb25zLmxlbmd0aCArIDEpICsgIjogIiArIGUubWVzc2FnZSArICIgLSAiICsgUVVuaXQuanNEdW1wLnBhcnNlKGUpICk7CiAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSBuZXh0IHRlc3Qgd2lsbCBjYXJyeSB0aGUgcmVzcG9uc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICBzYXZlR2xvYmFsKCk7CgogICAgICAgICAgICAgICAgICAgIC8vIFJlc3RhcnQgdGhlIHRlc3RzIGlmIHRoZXkncmUgYmxvY2tpbmcKICAgICAgICAgICAgICAgICAgICBpZiAoIGNvbmZpZy5ibG9ja2luZyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgc3luY2hyb25pemUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGNoZWNrUG9sbHV0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgdGVzdEVudmlyb25tZW50LnRlYXJkb3duLmNhbGwodGVzdEVudmlyb25tZW50KTsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgICAgIFFVbml0Lm9rKCBmYWxzZSwgIlRlYXJkb3duIGZhaWxlZCBvbiAiICsgbmFtZSArICI6ICIgKyBlLm1lc3NhZ2UgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBzeW5jaHJvbml6ZShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmICggY29uZmlnLmV4cGVjdGVkICYmIGNvbmZpZy5leHBlY3RlZCAhPSBjb25maWcuYXNzZXJ0aW9ucy5sZW5ndGggKSB7CiAgICAgICAgICAgICAgICAgICAgUVVuaXQub2soIGZhbHNlLCAiRXhwZWN0ZWQgIiArIGNvbmZpZy5leHBlY3RlZCArICIgYXNzZXJ0aW9ucywgYnV0ICIgKyBjb25maWcuYXNzZXJ0aW9ucy5sZW5ndGggKyAiIHdlcmUgcnVuIiApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBnb29kID0gMCwgYmFkID0gMCwKICAgICAgICAgICAgICAgICAgICB0ZXN0cyA9IGlkKCJxdW5pdC10ZXN0cyIpOwoKICAgICAgICAgICAgICAgIGNvbmZpZy5zdGF0cy5hbGwgKz0gY29uZmlnLmFzc2VydGlvbnMubGVuZ3RoOwogICAgICAgICAgICAgICAgY29uZmlnLm1vZHVsZVN0YXRzLmFsbCArPSBjb25maWcuYXNzZXJ0aW9ucy5sZW5ndGg7CgogICAgICAgICAgICAgICAgaWYgKCB0ZXN0cyApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgb2wgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib2wiKTsKCiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgY29uZmlnLmFzc2VydGlvbnMubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NlcnRpb24gPSBjb25maWcuYXNzZXJ0aW9uc1tpXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpLmNsYXNzTmFtZSA9IGFzc2VydGlvbi5yZXN1bHQgPyAicGFzcyIgOiAiZmFpbCI7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpLmlubmVySFRNTCA9IGFzc2VydGlvbi5tZXNzYWdlIHx8IChhc3NlcnRpb24ucmVzdWx0ID8gIm9rYXkiIDogImZhaWxlZCIpOwogICAgICAgICAgICAgICAgICAgICAgICBvbC5hcHBlbmRDaGlsZCggbGkgKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggYXNzZXJ0aW9uLnJlc3VsdCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvb2QrKzsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhZCsrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnN0YXRzLmJhZCsrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLm1vZHVsZVN0YXRzLmJhZCsrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChiYWQgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBvbC5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHJvbmciKTsKICAgICAgICAgICAgICAgICAgICBiLmlubmVySFRNTCA9IG5hbWUgKyAiIDxiIGNsYXNzPSdjb3VudHMnPig8YiBjbGFzcz0nZmFpbGVkJz4iICsgYmFkICsgIjwvYj4sIDxiIGNsYXNzPSdwYXNzZWQnPiIgKyBnb29kICsgIjwvYj4sICIgKyBjb25maWcuYXNzZXJ0aW9ucy5sZW5ndGggKyAiKTwvYj4iOwoKICAgICAgICAgICAgICAgICAgICBhZGRFdmVudChiLCAiY2xpY2siLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBiLm5leHRTaWJsaW5nLCBkaXNwbGF5ID0gbmV4dC5zdHlsZS5kaXNwbGF5OwogICAgICAgICAgICAgICAgICAgICAgICBuZXh0LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5ID09PSAibm9uZSIgPyAiYmxvY2siIDogIm5vbmUiOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICBhZGRFdmVudChiLCAiZGJsY2xpY2siLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlICYmIGUudGFyZ2V0ID8gZS50YXJnZXQgOiB3aW5kb3cuZXZlbnQuc3JjRWxlbWVudDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSAic3BhbiIgfHwgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gImIiICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cubG9jYXRpb24gJiYgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJzdHJvbmciICkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnNlYXJjaCA9ICI/IiArIGVuY29kZVVSSUNvbXBvbmVudChnZXRUZXh0KFt0YXJnZXRdKS5yZXBsYWNlKC9cKC4rXCkkLywgIiIpLnJlcGxhY2UoLyheXHMqfFxzKiQpL2csICIiKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGxpID0gaWQoImN1cnJlbnQtdGVzdC1vdXRwdXQiKTsKICAgICAgICAgICAgICAgICAgICBsaS5pZCA9ICIiOwogICAgICAgICAgICAgICAgICAgIGxpLmNsYXNzTmFtZSA9IGJhZCA/ICJmYWlsIiA6ICJwYXNzIjsKICAgICAgICAgICAgICAgICAgICBsaS5zdHlsZS5kaXNwbGF5ID0gcmVzdWx0RGlzcGxheVN0eWxlKCFiYWQpOwogICAgICAgICAgICAgICAgICAgIGxpLnJlbW92ZUNoaWxkKCBsaS5maXJzdENoaWxkICk7CiAgICAgICAgICAgICAgICAgICAgbGkuYXBwZW5kQ2hpbGQoIGIgKTsKICAgICAgICAgICAgICAgICAgICBsaS5hcHBlbmRDaGlsZCggb2wgKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCBiYWQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b29sYmFyID0gaWQoInF1bml0LXRlc3RydW5uZXItdG9vbGJhciIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRvb2xiYXIgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFyLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQoInF1bml0LWZpbHRlci1wYXNzIikuZGlzYWJsZWQgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQoInF1bml0LWZpbHRlci1taXNzaW5nIikuZGlzYWJsZWQgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgY29uZmlnLmFzc2VydGlvbnMubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIWNvbmZpZy5hc3NlcnRpb25zW2ldLnJlc3VsdCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhZCsrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnN0YXRzLmJhZCsrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLm1vZHVsZVN0YXRzLmJhZCsrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgUVVuaXQucmVzZXQoKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgICAgIGZhaWwoInJlc2V0KCkgZmFpbGVkLCBmb2xsb3dpbmcgVGVzdCAiICsgbmFtZSArICIsIGV4Y2VwdGlvbiBhbmQgcmVzZXQgZm4gZm9sbG93cyIsIGUsIFFVbml0LnJlc2V0KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBRVW5pdC50ZXN0RG9uZSggdGVzdE5hbWUsIGJhZCwgY29uZmlnLmFzc2VydGlvbnMubGVuZ3RoICk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgc3luY2hyb25pemUoIGRvbmUgKTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBTcGVjaWZ5IHRoZSBudW1iZXIgb2YgZXhwZWN0ZWQgYXNzZXJ0aW9ucyB0byBndXJhbnRlZSB0aGF0IGZhaWxlZCB0ZXN0IChubyBhc3NlcnRpb25zIGFyZSBydW4gYXQgYWxsKSBkb24ndCBzbGlwIHRocm91Z2guCiAgICAgICAgICovCiAgICAgICAgZXhwZWN0OiBmdW5jdGlvbihhc3NlcnRzKSB7CiAgICAgICAgICAgIGNvbmZpZy5leHBlY3RlZCA9IGFzc2VydHM7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQXNzZXJ0cyB0cnVlLgogICAgICAgICAqIEBleGFtcGxlIG9rKCAiYXNkZmFzZGYiLmxlbmd0aCA+IDUsICJUaGVyZSBtdXN0IGJlIGF0IGxlYXN0IDUgY2hhcnMiICk7CiAgICAgICAgICovCiAgICAgICAgb2s6IGZ1bmN0aW9uKGEsIG1zZykgewogICAgICAgICAgICBhID0gISFhOwogICAgICAgICAgICB2YXIgZGV0YWlscyA9IHsKICAgICAgICAgICAgICAgIHJlc3VsdDogYSwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZwogICAgICAgICAgICB9OwogICAgICAgICAgICBtc2cgPSBlc2NhcGVIdG1sKG1zZyk7CiAgICAgICAgICAgIFFVbml0LmxvZyhhLCBtc2csIGRldGFpbHMpOwogICAgICAgICAgICBjb25maWcuYXNzZXJ0aW9ucy5wdXNoKHsKICAgICAgICAgICAgICAgIHJlc3VsdDogYSwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZwogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBDaGVja3MgdGhhdCB0aGUgZmlyc3QgdHdvIGFyZ3VtZW50cyBhcmUgZXF1YWwsIHdpdGggYW4gb3B0aW9uYWwgbWVzc2FnZS4KICAgICAgICAgKiBQcmludHMgb3V0IGJvdGggYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMuCiAgICAgICAgICoKICAgICAgICAgKiBQcmVmZXJlZCB0byBvayggYWN0dWFsID09IGV4cGVjdGVkLCBtZXNzYWdlICkKICAgICAgICAgKgogICAgICAgICAqIEBleGFtcGxlIGVxdWFsKCBmb3JtYXQoIlJlY2VpdmVkIHswfSBieXRlcy4iLCAyKSwgIlJlY2VpdmVkIDIgYnl0ZXMuIiApOwogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIE9iamVjdCBhY3R1YWwKICAgICAgICAgKiBAcGFyYW0gT2JqZWN0IGV4cGVjdGVkCiAgICAgICAgICogQHBhcmFtIFN0cmluZyBtZXNzYWdlIChvcHRpb25hbCkKICAgICAgICAgKi8KICAgICAgICBlcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogICAgICAgICAgICBRVW5pdC5wdXNoKGV4cGVjdGVkID09IGFjdHVhbCwgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSk7CiAgICAgICAgfSwKCiAgICAgICAgbm90RXF1YWw6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKICAgICAgICAgICAgUVVuaXQucHVzaChleHBlY3RlZCAhPSBhY3R1YWwsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOwogICAgICAgIH0sCgogICAgICAgIGRlZXBFcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogICAgICAgICAgICBRVW5pdC5wdXNoKFFVbml0LmVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQpLCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKTsKICAgICAgICB9LAoKICAgICAgICBub3REZWVwRXF1YWw6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKICAgICAgICAgICAgUVVuaXQucHVzaCghUVVuaXQuZXF1aXYoYWN0dWFsLCBleHBlY3RlZCksIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOwogICAgICAgIH0sCgogICAgICAgIHN0cmljdEVxdWFsOiBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgICAgICAgICAgIFFVbml0LnB1c2goZXhwZWN0ZWQgPT09IGFjdHVhbCwgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSk7CiAgICAgICAgfSwKCiAgICAgICAgbm90U3RyaWN0RXF1YWw6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKICAgICAgICAgICAgUVVuaXQucHVzaChleHBlY3RlZCAhPT0gYWN0dWFsLCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKTsKICAgICAgICB9LAoKICAgICAgICByYWlzZXM6IGZ1bmN0aW9uKGZuLCAgbWVzc2FnZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgZm4oKTsKICAgICAgICAgICAgICAgIG9rKCBmYWxzZSwgbWVzc2FnZSApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBvayggdHJ1ZSwgbWVzc2FnZSApOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAvLyBBIHNsaWdodCBkZWxheSwgdG8gYXZvaWQgYW55IGN1cnJlbnQgY2FsbGJhY2tzCiAgICAgICAgICAgIGlmICggZGVmaW5lZC5zZXRUaW1lb3V0ICkgewogICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBjb25maWcudGltZW91dCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNvbmZpZy50aW1lb3V0KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5ibG9ja2luZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIHByb2Nlc3MoKTsKICAgICAgICAgICAgICAgIH0sIDEzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbmZpZy5ibG9ja2luZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgcHJvY2VzcygpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgc3RvcDogZnVuY3Rpb24odGltZW91dCkgewogICAgICAgICAgICBjb25maWcuYmxvY2tpbmcgPSB0cnVlOwoKICAgICAgICAgICAgaWYgKCB0aW1lb3V0ICYmIGRlZmluZWQuc2V0VGltZW91dCApIHsKICAgICAgICAgICAgICAgIGNvbmZpZy50aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgUVVuaXQub2soIGZhbHNlLCAiVGVzdCB0aW1lZCBvdXQiICk7CiAgICAgICAgICAgICAgICAgICAgUVVuaXQuc3RhcnQoKTsKICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgIH07CgovLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgZGVwcmVjYXRlZAogICAgUVVuaXQuZXF1YWxzID0gUVVuaXQuZXF1YWw7CiAgICBRVW5pdC5zYW1lID0gUVVuaXQuZGVlcEVxdWFsOwoKLy8gTWFpbnRhaW4gaW50ZXJuYWwgc3RhdGUKICAgIHZhciBjb25maWcgPSB7CiAgICAgICAgLy8gVGhlIHF1ZXVlIG9mIHRlc3RzIHRvIHJ1bgogICAgICAgIHF1ZXVlOiBbXSwKCiAgICAgICAgLy8gYmxvY2sgdW50aWwgZG9jdW1lbnQgcmVhZHkKICAgICAgICBibG9ja2luZzogdHJ1ZQogICAgfTsKCi8vIExvYWQgcGFyYW1hdGVycwogICAgKGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbiB8fCB7IHNlYXJjaDogIiIsIHByb3RvY29sOiAiZmlsZToiIH0sCiAgICAgICAgICAgIEdFVFBhcmFtcyA9IGxvY2F0aW9uLnNlYXJjaC5zbGljZSgxKS5zcGxpdCgnJicpOwoKICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBHRVRQYXJhbXMubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgIEdFVFBhcmFtc1tpXSA9IGRlY29kZVVSSUNvbXBvbmVudCggR0VUUGFyYW1zW2ldICk7CiAgICAgICAgICAgIGlmICggR0VUUGFyYW1zW2ldID09PSAibm9nbG9iYWxzIiApIHsKICAgICAgICAgICAgICAgIEdFVFBhcmFtcy5zcGxpY2UoIGksIDEgKTsKICAgICAgICAgICAgICAgIGktLTsKICAgICAgICAgICAgICAgIGNvbmZpZy5ub2dsb2JhbHMgPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgaWYgKCBHRVRQYXJhbXNbaV0uc2VhcmNoKCc9JykgPiAtMSApIHsKICAgICAgICAgICAgICAgIEdFVFBhcmFtcy5zcGxpY2UoIGksIDEgKTsKICAgICAgICAgICAgICAgIGktLTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gcmVzdHJpY3QgbW9kdWxlcy90ZXN0cyBieSBnZXQgcGFyYW1ldGVycwogICAgICAgIGNvbmZpZy5maWx0ZXJzID0gR0VUUGFyYW1zOwoKICAgICAgICAvLyBGaWd1cmUgb3V0IGlmIHdlJ3JlIHJ1bm5pbmcgdGhlIHRlc3RzIGZyb20gYSBzZXJ2ZXIgb3Igbm90CiAgICAgICAgUVVuaXQuaXNMb2NhbCA9ICEhKGxvY2F0aW9uLnByb3RvY29sID09PSAnZmlsZTonKTsKICAgIH0pKCk7CgovLyBFeHBvc2UgdGhlIEFQSSBhcyBnbG9iYWwgdmFyaWFibGVzLCB1bmxlc3MgYW4gJ2V4cG9ydHMnCi8vIG9iamVjdCBleGlzdHMsIGluIHRoYXQgY2FzZSB3ZSBhc3N1bWUgd2UncmUgaW4gQ29tbW9uSlMKICAgIGlmICggdHlwZW9mIGV4cG9ydHMgPT09ICJ1bmRlZmluZWQiIHx8IHR5cGVvZiByZXF1aXJlID09PSAidW5kZWZpbmVkIiApIHsKICAgICAgICBleHRlbmQod2luZG93LCBRVW5pdCk7CiAgICAgICAgd2luZG93LlFVbml0ID0gUVVuaXQ7CiAgICB9IGVsc2UgewogICAgICAgIGV4dGVuZChleHBvcnRzLCBRVW5pdCk7CiAgICAgICAgZXhwb3J0cy5RVW5pdCA9IFFVbml0OwogICAgfQoKLy8gZGVmaW5lIHRoZXNlIGFmdGVyIGV4cG9zaW5nIGdsb2JhbHMgdG8ga2VlcCB0aGVtIGluIHRoZXNlIFFVbml0IG5hbWVzcGFjZSBvbmx5CiAgICBleHRlbmQoUVVuaXQsIHsKICAgICAgICBjb25maWc6IGNvbmZpZywKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgY29uZmlndXJhdGlvbiBvcHRpb25zCiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4dGVuZChjb25maWcsIHsKICAgICAgICAgICAgICAgIHN0YXRzOiB7IGFsbDogMCwgYmFkOiAwIH0sCiAgICAgICAgICAgICAgICBtb2R1bGVTdGF0czogeyBhbGw6IDAsIGJhZDogMCB9LAogICAgICAgICAgICAgICAgc3RhcnRlZDogK25ldyBEYXRlLAogICAgICAgICAgICAgICAgdXBkYXRlUmF0ZTogMTAwMCwKICAgICAgICAgICAgICAgIGJsb2NraW5nOiBmYWxzZSwKICAgICAgICAgICAgICAgIGF1dG9zdGFydDogdHJ1ZSwKICAgICAgICAgICAgICAgIGF1dG9ydW46IGZhbHNlLAogICAgICAgICAgICAgICAgYXNzZXJ0aW9uczogW10sCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbXSwKICAgICAgICAgICAgICAgIHF1ZXVlOiBbXQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHZhciB0ZXN0cyA9IGlkKCJxdW5pdC10ZXN0cyIpLAogICAgICAgICAgICAgICAgYmFubmVyID0gaWQoInF1bml0LWJhbm5lciIpLAogICAgICAgICAgICAgICAgcmVzdWx0ID0gaWQoInF1bml0LXRlc3RyZXN1bHQiKTsKCiAgICAgICAgICAgIGlmICggdGVzdHMgKSB7CiAgICAgICAgICAgICAgICB0ZXN0cy5pbm5lckhUTUwgPSAiIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBiYW5uZXIgKSB7CiAgICAgICAgICAgICAgICBiYW5uZXIuY2xhc3NOYW1lID0gIiI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggcmVzdWx0ICkgewogICAgICAgICAgICAgICAgcmVzdWx0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHJlc3VsdCApOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogUmVzZXRzIHRoZSB0ZXN0IHNldHVwLiBVc2VmdWwgZm9yIHRlc3RzIHRoYXQgbW9kaWZ5IHRoZSBET00uCiAgICAgICAgICoKICAgICAgICAgKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCB1c2VzIGpRdWVyeSdzIGh0bWwoKSwgb3RoZXJ3aXNlIGp1c3QgaW5uZXJIVE1MLgogICAgICAgICAqLwogICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCB3aW5kb3cualF1ZXJ5ICkgewogICAgICAgICAgICAgICAgalF1ZXJ5KCAiI21haW4sICNxdW5pdC1maXh0dXJlIiApLmh0bWwoIGNvbmZpZy5maXh0dXJlICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgbWFpbiA9IGlkKCAnbWFpbicgKSB8fCBpZCggJ3F1bml0LWZpeHR1cmUnICk7CiAgICAgICAgICAgICAgICBpZiAoIG1haW4gKSB7CiAgICAgICAgICAgICAgICAgICAgbWFpbi5pbm5lckhUTUwgPSBjb25maWcuZml4dHVyZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIFRyaWdnZXIgYW4gZXZlbnQgb24gYW4gZWxlbWVudC4KICAgICAgICAgKgogICAgICAgICAqIEBleGFtcGxlIHRyaWdnZXJFdmVudCggZG9jdW1lbnQuYm9keSwgImNsaWNrIiApOwogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIERPTUVsZW1lbnQgZWxlbQogICAgICAgICAqIEBwYXJhbSBTdHJpbmcgdHlwZQogICAgICAgICAqLwogICAgICAgIHRyaWdnZXJFdmVudDogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGV2ZW50ICkgewogICAgICAgICAgICBpZiAoIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICkgewogICAgICAgICAgICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgiTW91c2VFdmVudHMiKTsKICAgICAgICAgICAgICAgIGV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldywKICAgICAgICAgICAgICAgICAgICAwLCAwLCAwLCAwLCAwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7CiAgICAgICAgICAgICAgICBlbGVtLmRpc3BhdGNoRXZlbnQoIGV2ZW50ICk7CgogICAgICAgICAgICB9IGVsc2UgaWYgKCBlbGVtLmZpcmVFdmVudCApIHsKICAgICAgICAgICAgICAgIGVsZW0uZmlyZUV2ZW50KCJvbiIrdHlwZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICAvLyBTYWZlIG9iamVjdCB0eXBlIGNoZWNraW5nCiAgICAgICAgaXM6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7CiAgICAgICAgICAgIHJldHVybiBRVW5pdC5vYmplY3RUeXBlKCBvYmogKSA9PSB0eXBlOwogICAgICAgIH0sCgogICAgICAgIG9iamVjdFR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgICAgcmV0dXJuICJ1bmRlZmluZWQiOwoKICAgICAgICAgICAgICAgIC8vIGNvbnNpZGVyOiB0eXBlb2YgbnVsbCA9PT0gb2JqZWN0CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG9iaiA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmV0dXJuICJudWxsIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoIG9iaiApCiAgICAgICAgICAgICAgICAubWF0Y2goL15cW29iamVjdFxzKC4qKVxdJC8pWzFdIHx8ICcnOwoKICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgICAgICAgICBjYXNlICdOdW1iZXInOgogICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihvYmopKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAibmFuIjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIm51bWJlciI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2FzZSAnU3RyaW5nJzoKICAgICAgICAgICAgICAgIGNhc2UgJ0Jvb2xlYW4nOgogICAgICAgICAgICAgICAgY2FzZSAnQXJyYXknOgogICAgICAgICAgICAgICAgY2FzZSAnRGF0ZSc6CiAgICAgICAgICAgICAgICBjYXNlICdSZWdFeHAnOgogICAgICAgICAgICAgICAgY2FzZSAnRnVuY3Rpb24nOgogICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmogPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIm9iamVjdCI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICB9LAoKICAgICAgICBwdXNoOiBmdW5jdGlvbihyZXN1bHQsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKICAgICAgICAgICAgdmFyIGRldGFpbHMgPSB7CiAgICAgICAgICAgICAgICByZXN1bHQ6IHJlc3VsdCwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsCiAgICAgICAgICAgICAgICBhY3R1YWw6IGFjdHVhbCwKICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZAogICAgICAgICAgICB9OwoKICAgICAgICAgICAgbWVzc2FnZSA9IGVzY2FwZUh0bWwobWVzc2FnZSkgfHwgKHJlc3VsdCA/ICJva2F5IiA6ICJmYWlsZWQiKTsKICAgICAgICAgICAgbWVzc2FnZSA9ICc8c3BhbiBjbGFzcz0idGVzdC1tZXNzYWdlIj4nICsgbWVzc2FnZSArICI8L3NwYW4+IjsKICAgICAgICAgICAgZXhwZWN0ZWQgPSBlc2NhcGVIdG1sKFFVbml0LmpzRHVtcC5wYXJzZShleHBlY3RlZCkpOwogICAgICAgICAgICBhY3R1YWwgPSBlc2NhcGVIdG1sKFFVbml0LmpzRHVtcC5wYXJzZShhY3R1YWwpKTsKICAgICAgICAgICAgdmFyIG91dHB1dCA9IG1lc3NhZ2UgKyAnLCBleHBlY3RlZDogPHNwYW4gY2xhc3M9InRlc3QtZXhwZWN0ZWQiPicgKyBleHBlY3RlZCArICc8L3NwYW4+JzsKICAgICAgICAgICAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkgewogICAgICAgICAgICAgICAgb3V0cHV0ICs9ICcgcmVzdWx0OiA8c3BhbiBjbGFzcz0idGVzdC1hY3R1YWwiPicgKyBhY3R1YWwgKyAnPC9zcGFuPiwgZGlmZjogJyArIFFVbml0LmRpZmYoZXhwZWN0ZWQsIGFjdHVhbCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFFVbml0LmxvZyhyZXN1bHQsIG1lc3NhZ2UsIGRldGFpbHMpOwoKICAgICAgICAgICAgY29uZmlnLmFzc2VydGlvbnMucHVzaCh7CiAgICAgICAgICAgICAgICByZXN1bHQ6ICEhcmVzdWx0LAogICAgICAgICAgICAgICAgbWVzc2FnZTogb3V0cHV0CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8vIExvZ2dpbmcgY2FsbGJhY2tzCiAgICAgICAgYmVnaW46IGZ1bmN0aW9uKCkge30sCiAgICAgICAgZG9uZTogZnVuY3Rpb24oZmFpbHVyZXMsIHRvdGFsKSB7fSwKICAgICAgICBsb2c6IGZ1bmN0aW9uKHJlc3VsdCwgbWVzc2FnZSkge30sCiAgICAgICAgdGVzdFN0YXJ0OiBmdW5jdGlvbihuYW1lLCB0ZXN0RW52aXJvbm1lbnQpIHt9LAogICAgICAgIHRlc3REb25lOiBmdW5jdGlvbihuYW1lLCBmYWlsdXJlcywgdG90YWwpIHt9LAogICAgICAgIG1vZHVsZVN0YXJ0OiBmdW5jdGlvbihuYW1lLCB0ZXN0RW52aXJvbm1lbnQpIHt9LAogICAgICAgIG1vZHVsZURvbmU6IGZ1bmN0aW9uKG5hbWUsIGZhaWx1cmVzLCB0b3RhbCkge30KICAgIH0pOwoKICAgIGlmICggdHlwZW9mIGRvY3VtZW50ID09PSAidW5kZWZpbmVkIiB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAiY29tcGxldGUiICkgewogICAgICAgIGNvbmZpZy5hdXRvcnVuID0gdHJ1ZTsKICAgIH0KCiAgICBhZGRFdmVudCh3aW5kb3csICJsb2FkIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgUVVuaXQuYmVnaW4oKTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgY29uZmlnLCBzYXZpbmcgdGhlIGV4ZWN1dGlvbiBxdWV1ZQogICAgICAgIHZhciBvbGRjb25maWcgPSBleHRlbmQoe30sIGNvbmZpZyk7CiAgICAgICAgUVVuaXQuaW5pdCgpOwogICAgICAgIGV4dGVuZChjb25maWcsIG9sZGNvbmZpZyk7CgogICAgICAgIGNvbmZpZy5ibG9ja2luZyA9IGZhbHNlOwoKICAgICAgICB2YXIgdXNlckFnZW50ID0gaWQoInF1bml0LXVzZXJBZ2VudCIpOwogICAgICAgIGlmICggdXNlckFnZW50ICkgewogICAgICAgICAgICB1c2VyQWdlbnQuaW5uZXJIVE1MID0gbmF2aWdhdG9yLnVzZXJBZ2VudDsKICAgICAgICB9CiAgICAgICAgdmFyIGJhbm5lciA9IGlkKCJxdW5pdC1oZWFkZXIiKTsKICAgICAgICBpZiAoIGJhbm5lciApIHsKICAgICAgICAgICAgdmFyIHBhcmFtc0luZGV4ID0gbG9jYXRpb24uaHJlZi5sYXN0SW5kZXhPZihsb2NhdGlvbi5zZWFyY2gpOwogICAgICAgICAgICBpZiAoIHBhcmFtc0luZGV4ID4gLTEgKSB7CiAgICAgICAgICAgICAgICB2YXIgbWFpblBhZ2VMb2NhdGlvbiA9IGxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgcGFyYW1zSW5kZXgpOwogICAgICAgICAgICAgICAgaWYgKCBtYWluUGFnZUxvY2F0aW9uID09IGxvY2F0aW9uLmhyZWYgKSB7CiAgICAgICAgICAgICAgICAgICAgYmFubmVyLmlubmVySFRNTCA9ICc8YSBocmVmPSIiPiAnICsgYmFubmVyLmlubmVySFRNTCArICc8L2E+ICc7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0TmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChsb2NhdGlvbi5zZWFyY2guc2xpY2UoMSkpOwogICAgICAgICAgICAgICAgICAgIGJhbm5lci5pbm5lckhUTUwgPSAnPGEgaHJlZj0iJyArIG1haW5QYWdlTG9jYXRpb24gKyAnIj4nICsgYmFubmVyLmlubmVySFRNTCArICc8L2E+ICYjODI1MDsgPGEgaHJlZj0iIj4nICsgdGVzdE5hbWUgKyAnPC9hPic7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciB0b29sYmFyID0gaWQoInF1bml0LXRlc3RydW5uZXItdG9vbGJhciIpOwogICAgICAgIGlmICggdG9vbGJhciApIHsKICAgICAgICAgICAgdG9vbGJhci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoKICAgICAgICAgICAgdmFyIGZpbHRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CiAgICAgICAgICAgIGZpbHRlci50eXBlID0gImNoZWNrYm94IjsKICAgICAgICAgICAgZmlsdGVyLmlkID0gInF1bml0LWZpbHRlci1wYXNzIjsKICAgICAgICAgICAgZmlsdGVyLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICAgICAgYWRkRXZlbnQoIGZpbHRlciwgImNsaWNrIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgbGkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgibGkiKTsKICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGxpLmxlbmd0aDsgaSsrICkgewogICAgICAgICAgICAgICAgICAgIGlmICggbGlbaV0uY2xhc3NOYW1lLmluZGV4T2YoInBhc3MiKSA+IC0xICkgewogICAgICAgICAgICAgICAgICAgICAgICBsaVtpXS5zdHlsZS5kaXNwbGF5ID0gZmlsdGVyLmNoZWNrZWQgPyAibm9uZSIgOiAiIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB0b29sYmFyLmFwcGVuZENoaWxkKCBmaWx0ZXIgKTsKCiAgICAgICAgICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxhYmVsIik7CiAgICAgICAgICAgIGxhYmVsLnNldEF0dHJpYnV0ZSgiZm9yIiwgInF1bml0LWZpbHRlci1wYXNzIik7CiAgICAgICAgICAgIGxhYmVsLmlubmVySFRNTCA9ICJIaWRlIHBhc3NlZCB0ZXN0cyI7CiAgICAgICAgICAgIHRvb2xiYXIuYXBwZW5kQ2hpbGQoIGxhYmVsICk7CgogICAgICAgICAgICB2YXIgbWlzc2luZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CiAgICAgICAgICAgIG1pc3NpbmcudHlwZSA9ICJjaGVja2JveCI7CiAgICAgICAgICAgIG1pc3NpbmcuaWQgPSAicXVuaXQtZmlsdGVyLW1pc3NpbmciOwogICAgICAgICAgICBtaXNzaW5nLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICAgICAgYWRkRXZlbnQoIG1pc3NpbmcsICJjbGljayIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGxpID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImxpIik7CiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBsaS5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIGxpW2ldLmNsYXNzTmFtZS5pbmRleE9mKCJmYWlsIikgPiAtMSAmJiBsaVtpXS5pbm5lckhUTUwuaW5kZXhPZignbWlzc2luZyB0ZXN0IC0gdW50ZXN0ZWQgY29kZSBpcyBicm9rZW4gY29kZScpID4gLSAxICkgewogICAgICAgICAgICAgICAgICAgICAgICBsaVtpXS5wYXJlbnROb2RlLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9IG1pc3NpbmcuY2hlY2tlZCA/ICJub25lIiA6ICJibG9jayI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdG9vbGJhci5hcHBlbmRDaGlsZCggbWlzc2luZyApOwoKICAgICAgICAgICAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsYWJlbCIpOwogICAgICAgICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoImZvciIsICJxdW5pdC1maWx0ZXItbWlzc2luZyIpOwogICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSAiSGlkZSBtaXNzaW5nIHRlc3RzICh1bnRlc3RlZCBjb2RlIGlzIGJyb2tlbiBjb2RlKSI7CiAgICAgICAgICAgIHRvb2xiYXIuYXBwZW5kQ2hpbGQoIGxhYmVsICk7CiAgICAgICAgfQoKICAgICAgICB2YXIgbWFpbiA9IGlkKCdtYWluJykgfHwgaWQoJ3F1bml0LWZpeHR1cmUnKTsKICAgICAgICBpZiAoIG1haW4gKSB7CiAgICAgICAgICAgIGNvbmZpZy5maXh0dXJlID0gbWFpbi5pbm5lckhUTUw7CiAgICAgICAgfQoKICAgICAgICBpZiAoY29uZmlnLmF1dG9zdGFydCkgewogICAgICAgICAgICBRVW5pdC5zdGFydCgpOwogICAgICAgIH0KICAgIH0pOwoKICAgIGZ1bmN0aW9uIGRvbmUoKSB7CiAgICAgICAgaWYgKCBjb25maWcuZG9uZVRpbWVyICYmIHdpbmRvdy5jbGVhclRpbWVvdXQgKSB7CiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoIGNvbmZpZy5kb25lVGltZXIgKTsKICAgICAgICAgICAgY29uZmlnLmRvbmVUaW1lciA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICBpZiAoIGNvbmZpZy5xdWV1ZS5sZW5ndGggKSB7CiAgICAgICAgICAgIGlmICggZGVmaW5lZC5zZXRUaW1lb3V0ICkgewogICAgICAgICAgICAgICAgY29uZmlnLmRvbmVUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgaWYgKCAhY29uZmlnLnF1ZXVlLmxlbmd0aCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNocm9uaXplKCBkb25lICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgMTMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBjb25maWcuYXV0b3J1biA9IHRydWU7CgogICAgICAgIC8vIExvZyB0aGUgbGFzdCBtb2R1bGUgcmVzdWx0cwogICAgICAgIGlmICggY29uZmlnLmN1cnJlbnRNb2R1bGUgKSB7CiAgICAgICAgICAgIFFVbml0Lm1vZHVsZURvbmUoIGNvbmZpZy5jdXJyZW50TW9kdWxlLCBjb25maWcubW9kdWxlU3RhdHMuYmFkLCBjb25maWcubW9kdWxlU3RhdHMuYWxsICk7CiAgICAgICAgfQoKICAgICAgICB2YXIgYmFubmVyID0gaWQoInF1bml0LWJhbm5lciIpLAogICAgICAgICAgICB0ZXN0cyA9IGlkKCJxdW5pdC10ZXN0cyIpLAogICAgICAgICAgICBodG1sID0gWydUZXN0cyBjb21wbGV0ZWQgaW4gJywKICAgICAgICAgICAgICAgICtuZXcgRGF0ZSAtIGNvbmZpZy5zdGFydGVkLCAnIG1pbGxpc2Vjb25kcy48YnIvPicsCiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9InBhc3NlZCI+JywgY29uZmlnLnN0YXRzLmFsbCAtIGNvbmZpZy5zdGF0cy5iYWQsICc8L3NwYW4+IHRlc3RzIG9mIDxzcGFuIGNsYXNzPSJ0b3RhbCI+JywgY29uZmlnLnN0YXRzLmFsbCwgJzwvc3Bhbj4gcGFzc2VkLCA8c3BhbiBjbGFzcz0iZmFpbGVkIj4nLCBjb25maWcuc3RhdHMuYmFkLCc8L3NwYW4+IGZhaWxlZC4nXS5qb2luKCcnKTsKCiAgICAgICAgaWYgKCBiYW5uZXIgKSB7CiAgICAgICAgICAgIGJhbm5lci5jbGFzc05hbWUgPSAoY29uZmlnLnN0YXRzLmJhZCA/ICJxdW5pdC1mYWlsIiA6ICJxdW5pdC1wYXNzIik7CiAgICAgICAgfQoKICAgICAgICBpZiAoIHRlc3RzICkgewogICAgICAgICAgICB2YXIgcmVzdWx0ID0gaWQoInF1bml0LXRlc3RyZXN1bHQiKTsKCiAgICAgICAgICAgIGlmICggIXJlc3VsdCApIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInAiKTsKICAgICAgICAgICAgICAgIHJlc3VsdC5pZCA9ICJxdW5pdC10ZXN0cmVzdWx0IjsKICAgICAgICAgICAgICAgIHJlc3VsdC5jbGFzc05hbWUgPSAicmVzdWx0IjsKICAgICAgICAgICAgICAgIHRlc3RzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCByZXN1bHQsIHRlc3RzLm5leHRTaWJsaW5nICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJlc3VsdC5pbm5lckhUTUwgPSBodG1sOwogICAgICAgIH0KCiAgICAgICAgUVVuaXQuZG9uZSggY29uZmlnLnN0YXRzLmJhZCwgY29uZmlnLnN0YXRzLmFsbCApOwogICAgfQoKICAgIGZ1bmN0aW9uIHZhbGlkVGVzdCggbmFtZSApIHsKICAgICAgICB2YXIgaSA9IGNvbmZpZy5maWx0ZXJzLmxlbmd0aCwKICAgICAgICAgICAgcnVuID0gZmFsc2U7CgogICAgICAgIGlmICggIWkgKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgd2hpbGUgKCBpLS0gKSB7CiAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBjb25maWcuZmlsdGVyc1tpXSwKICAgICAgICAgICAgICAgIG5vdCA9IGZpbHRlci5jaGFyQXQoMCkgPT0gJyEnOwoKICAgICAgICAgICAgaWYgKCBub3QgKSB7CiAgICAgICAgICAgICAgICBmaWx0ZXIgPSBmaWx0ZXIuc2xpY2UoMSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggbmFtZS5pbmRleE9mKGZpbHRlcikgIT09IC0xICkgewogICAgICAgICAgICAgICAgcmV0dXJuICFub3Q7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggbm90ICkgewogICAgICAgICAgICAgICAgcnVuID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJ1bjsKICAgIH0KCiAgICBmdW5jdGlvbiByZXN1bHREaXNwbGF5U3R5bGUocGFzc2VkKSB7CiAgICAgICAgcmV0dXJuIHBhc3NlZCAmJiBpZCgicXVuaXQtZmlsdGVyLXBhc3MiKSAmJiBpZCgicXVuaXQtZmlsdGVyLXBhc3MiKS5jaGVja2VkID8gJ25vbmUnIDogJyc7CiAgICB9CgogICAgZnVuY3Rpb24gZXNjYXBlSHRtbChzKSB7CiAgICAgICAgaWYgKCFzKSB7CiAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICB9CiAgICAgICAgcyA9IHMgKyAiIjsKICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bXCYiPD5cXF0vZywgZnVuY3Rpb24ocykgewogICAgICAgICAgICBzd2l0Y2gocykgewogICAgICAgICAgICAgICAgY2FzZSAiJiI6IHJldHVybiAiJmFtcDsiOwogICAgICAgICAgICAgICAgY2FzZSAiXFwiOiByZXR1cm4gIlxcXFwiOwogICAgICAgICAgICAgICAgY2FzZSAnIic6IHJldHVybiAnXCInOwogICAgICAgICAgICAgICAgY2FzZSAiPCI6IHJldHVybiAiJmx0OyI7CiAgICAgICAgICAgICAgICBjYXNlICI+IjogcmV0dXJuICImZ3Q7IjsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBzOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gc3luY2hyb25pemUoIGNhbGxiYWNrICkgewogICAgICAgIGNvbmZpZy5xdWV1ZS5wdXNoKCBjYWxsYmFjayApOwoKICAgICAgICBpZiAoIGNvbmZpZy5hdXRvcnVuICYmICFjb25maWcuYmxvY2tpbmcgKSB7CiAgICAgICAgICAgIHByb2Nlc3MoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcHJvY2VzcygpIHsKICAgICAgICB2YXIgc3RhcnQgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpOwoKICAgICAgICB3aGlsZSAoIGNvbmZpZy5xdWV1ZS5sZW5ndGggJiYgIWNvbmZpZy5ibG9ja2luZyApIHsKICAgICAgICAgICAgaWYgKCBjb25maWcudXBkYXRlUmF0ZSA8PSAwIHx8ICgoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAtIHN0YXJ0KSA8IGNvbmZpZy51cGRhdGVSYXRlKSApIHsKICAgICAgICAgICAgICAgIGNvbmZpZy5xdWV1ZS5zaGlmdCgpKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcywgMTMgKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNhdmVHbG9iYWwoKSB7CiAgICAgICAgY29uZmlnLnBvbGx1dGlvbiA9IFtdOwoKICAgICAgICBpZiAoIGNvbmZpZy5ub2dsb2JhbHMgKSB7CiAgICAgICAgICAgIGZvciAoIHZhciBrZXkgaW4gd2luZG93ICkgewogICAgICAgICAgICAgICAgY29uZmlnLnBvbGx1dGlvbi5wdXNoKCBrZXkgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjaGVja1BvbGx1dGlvbiggbmFtZSApIHsKICAgICAgICB2YXIgb2xkID0gY29uZmlnLnBvbGx1dGlvbjsKICAgICAgICBzYXZlR2xvYmFsKCk7CgogICAgICAgIHZhciBuZXdHbG9iYWxzID0gZGlmZiggb2xkLCBjb25maWcucG9sbHV0aW9uICk7CiAgICAgICAgaWYgKCBuZXdHbG9iYWxzLmxlbmd0aCA+IDAgKSB7CiAgICAgICAgICAgIG9rKCBmYWxzZSwgIkludHJvZHVjZWQgZ2xvYmFsIHZhcmlhYmxlKHMpOiAiICsgbmV3R2xvYmFscy5qb2luKCIsICIpICk7CiAgICAgICAgICAgIGNvbmZpZy5leHBlY3RlZCsrOwogICAgICAgIH0KCiAgICAgICAgdmFyIGRlbGV0ZWRHbG9iYWxzID0gZGlmZiggY29uZmlnLnBvbGx1dGlvbiwgb2xkICk7CiAgICAgICAgaWYgKCBkZWxldGVkR2xvYmFscy5sZW5ndGggPiAwICkgewogICAgICAgICAgICBvayggZmFsc2UsICJEZWxldGVkIGdsb2JhbCB2YXJpYWJsZShzKTogIiArIGRlbGV0ZWRHbG9iYWxzLmpvaW4oIiwgIikgKTsKICAgICAgICAgICAgY29uZmlnLmV4cGVjdGVkKys7CiAgICAgICAgfQogICAgfQoKLy8gcmV0dXJucyBhIG5ldyBBcnJheSB3aXRoIHRoZSBlbGVtZW50cyB0aGF0IGFyZSBpbiBhIGJ1dCBub3QgaW4gYgogICAgZnVuY3Rpb24gZGlmZiggYSwgYiApIHsKICAgICAgICB2YXIgcmVzdWx0ID0gYS5zbGljZSgpOwogICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgZm9yICggdmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGorKyApIHsKICAgICAgICAgICAgICAgIGlmICggcmVzdWx0W2ldID09PSBiW2pdICkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICAgICAgaS0tOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgZnVuY3Rpb24gZmFpbChtZXNzYWdlLCBleGNlcHRpb24sIGNhbGxiYWNrKSB7CiAgICAgICAgaWYgKCB0eXBlb2YgY29uc29sZSAhPT0gInVuZGVmaW5lZCIgJiYgY29uc29sZS5lcnJvciAmJiBjb25zb2xlLndhcm4gKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXhjZXB0aW9uKTsKICAgICAgICAgICAgY29uc29sZS53YXJuKGNhbGxiYWNrLnRvU3RyaW5nKCkpOwoKICAgICAgICB9IGVsc2UgaWYgKCB3aW5kb3cub3BlcmEgJiYgb3BlcmEucG9zdEVycm9yICkgewogICAgICAgICAgICBvcGVyYS5wb3N0RXJyb3IobWVzc2FnZSwgZXhjZXB0aW9uLCBjYWxsYmFjay50b1N0cmluZyk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7CiAgICAgICAgZm9yICggdmFyIHByb3AgaW4gYiApIHsKICAgICAgICAgICAgYVtwcm9wXSA9IGJbcHJvcF07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gYTsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGRFdmVudChlbGVtLCB0eXBlLCBmbikgewogICAgICAgIGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkgewogICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGZuLCBmYWxzZSApOwogICAgICAgIH0gZWxzZSBpZiAoIGVsZW0uYXR0YWNoRXZlbnQgKSB7CiAgICAgICAgICAgIGVsZW0uYXR0YWNoRXZlbnQoICJvbiIgKyB0eXBlLCBmbiApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZuKCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGlkKG5hbWUpIHsKICAgICAgICByZXR1cm4gISEodHlwZW9mIGRvY3VtZW50ICE9PSAidW5kZWZpbmVkIiAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCkgJiYKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG5hbWUgKTsKICAgIH0KCi8vIFRlc3QgZm9yIGVxdWFsaXR5IGFueSBKYXZhU2NyaXB0IHR5cGUuCi8vIERpc2N1c3Npb25zIGFuZCByZWZlcmVuY2U6IGh0dHA6Ly9waGlscmF0aGUuY29tL2FydGljbGVzL2VxdWl2Ci8vIFRlc3Qgc3VpdGVzOiBodHRwOi8vcGhpbHJhdGhlLmNvbS90ZXN0cy9lcXVpdgovLyBBdXRob3I6IFBoaWxpcHBlIFJhdGjDqSA8cHJhdGhlQGdtYWlsLmNvbT4KICAgIFFVbml0LmVxdWl2ID0gZnVuY3Rpb24gKCkgewoKICAgICAgICB2YXIgaW5uZXJFcXVpdjsgLy8gdGhlIHJlYWwgZXF1aXYgZnVuY3Rpb24KICAgICAgICB2YXIgY2FsbGVycyA9IFtdOyAvLyBzdGFjayB0byBkZWNpZGUgYmV0d2VlbiBza2lwL2Fib3J0IGZ1bmN0aW9ucwogICAgICAgIHZhciBwYXJlbnRzID0gW107IC8vIHN0YWNrIHRvIGF2b2lkaW5nIGxvb3BzIGZyb20gY2lyY3VsYXIgcmVmZXJlbmNpbmcKCiAgICAgICAgLy8gQ2FsbCB0aGUgbyByZWxhdGVkIGNhbGxiYWNrIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50cy4KICAgICAgICBmdW5jdGlvbiBiaW5kQ2FsbGJhY2tzKG8sIGNhbGxiYWNrcywgYXJncykgewogICAgICAgICAgICB2YXIgcHJvcCA9IFFVbml0Lm9iamVjdFR5cGUobyk7CiAgICAgICAgICAgIGlmIChwcm9wKSB7CiAgICAgICAgICAgICAgICBpZiAoUVVuaXQub2JqZWN0VHlwZShjYWxsYmFja3NbcHJvcF0pID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrc1twcm9wXS5hcHBseShjYWxsYmFja3MsIGFyZ3MpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2tzW3Byb3BdOyAvLyBvciB1bmRlZmluZWQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgIC8vIGZvciBzdHJpbmcsIGJvb2xlYW4sIG51bWJlciBhbmQgbnVsbAogICAgICAgICAgICBmdW5jdGlvbiB1c2VTdHJpY3RFcXVhbGl0eShiLCBhKSB7CiAgICAgICAgICAgICAgICBpZiAoYiBpbnN0YW5jZW9mIGEuY29uc3RydWN0b3IgfHwgYSBpbnN0YW5jZW9mIGIuY29uc3RydWN0b3IpIHsKICAgICAgICAgICAgICAgICAgICAvLyB0byBjYXRjaCBzaG9ydCBhbm5vdGFpb24gVlMgJ25ldycgYW5ub3RhdGlvbiBvZiBhIGRlY2xhcmF0aW9uCiAgICAgICAgICAgICAgICAgICAgLy8gZS5nLiB2YXIgaSA9IDE7CiAgICAgICAgICAgICAgICAgICAgLy8gICAgICB2YXIgaiA9IG5ldyBOdW1iZXIoMSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgPT0gYjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgPT09IGI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAic3RyaW5nIjogdXNlU3RyaWN0RXF1YWxpdHksCiAgICAgICAgICAgICAgICAiYm9vbGVhbiI6IHVzZVN0cmljdEVxdWFsaXR5LAogICAgICAgICAgICAgICAgIm51bWJlciI6IHVzZVN0cmljdEVxdWFsaXR5LAogICAgICAgICAgICAgICAgIm51bGwiOiB1c2VTdHJpY3RFcXVhbGl0eSwKICAgICAgICAgICAgICAgICJ1bmRlZmluZWQiOiB1c2VTdHJpY3RFcXVhbGl0eSwKCiAgICAgICAgICAgICAgICAibmFuIjogZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNOYU4oYik7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgICJkYXRlIjogZnVuY3Rpb24gKGIsIGEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gUVVuaXQub2JqZWN0VHlwZShiKSA9PT0gImRhdGUiICYmIGEudmFsdWVPZigpID09PSBiLnZhbHVlT2YoKTsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgInJlZ2V4cCI6IGZ1bmN0aW9uIChiLCBhKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFFVbml0Lm9iamVjdFR5cGUoYikgPT09ICJyZWdleHAiICYmCiAgICAgICAgICAgICAgICAgICAgICAgIGEuc291cmNlID09PSBiLnNvdXJjZSAmJiAvLyB0aGUgcmVnZXggaXRzZWxmCiAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2xvYmFsID09PSBiLmdsb2JhbCAmJiAvLyBhbmQgaXRzIG1vZGlmZXJzIChnbWkpIC4uLgogICAgICAgICAgICAgICAgICAgICAgICBhLmlnbm9yZUNhc2UgPT09IGIuaWdub3JlQ2FzZSAmJgogICAgICAgICAgICAgICAgICAgICAgICBhLm11bHRpbGluZSA9PT0gYi5tdWx0aWxpbmU7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIC8vIC0gc2tpcCB3aGVuIHRoZSBwcm9wZXJ0eSBpcyBhIG1ldGhvZCBvZiBhbiBpbnN0YW5jZSAoT09QKQogICAgICAgICAgICAgICAgLy8gLSBhYm9ydCBvdGhlcndpc2UsCiAgICAgICAgICAgICAgICAvLyAgIGluaXRpYWwgPT09IHdvdWxkIGhhdmUgY2F0Y2ggaWRlbnRpY2FsIHJlZmVyZW5jZXMgYW55d2F5CiAgICAgICAgICAgICAgICAiZnVuY3Rpb24iOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxlciA9IGNhbGxlcnNbY2FsbGVycy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGVyICE9PSBPYmplY3QgJiYKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNhbGxlciAhPT0gInVuZGVmaW5lZCI7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgICJhcnJheSI6IGZ1bmN0aW9uIChiLCBhKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGksIGosIGxvb3A7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbjsKCiAgICAgICAgICAgICAgICAgICAgLy8gYiBjb3VsZCBiZSBhbiBvYmplY3QgbGl0ZXJhbCBoZXJlCiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIChRVW5pdC5vYmplY3RUeXBlKGIpID09PSAiYXJyYXkiKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBsZW4gPSBhLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICBpZiAobGVuICE9PSBiLmxlbmd0aCkgeyAvLyBzYWZlIGFuZCBmYXN0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy90cmFjayByZWZlcmVuY2UgdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcwogICAgICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChhKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9vcCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICBmb3Ioaj0wO2o8cGFyZW50cy5sZW5ndGg7aisrKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhcmVudHNbal0gPT09IGFbaV0pewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3AgPSB0cnVlOy8vZG9udCByZXdhbGsgYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvb3AgJiYgISBpbm5lckVxdWl2KGFbaV0sIGJbaV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRzLnBvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHBhcmVudHMucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgICJvYmplY3QiOiBmdW5jdGlvbiAoYiwgYSkgewogICAgICAgICAgICAgICAgICAgIHZhciBpLCBqLCBsb29wOwogICAgICAgICAgICAgICAgICAgIHZhciBlcSA9IHRydWU7IC8vIHVubGVzcyB3ZSBjYW4gcHJvb3ZlIGl0CiAgICAgICAgICAgICAgICAgICAgdmFyIGFQcm9wZXJ0aWVzID0gW10sIGJQcm9wZXJ0aWVzID0gW107IC8vIGNvbGxlY3Rpb24gb2Ygc3RyaW5ncwoKICAgICAgICAgICAgICAgICAgICAvLyBjb21wYXJpbmcgY29uc3RydWN0b3JzIGlzIG1vcmUgc3RyaWN0IHRoYW4gdXNpbmcgaW5zdGFuY2VvZgogICAgICAgICAgICAgICAgICAgIGlmICggYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3RvcikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvLyBzdGFjayBjb25zdHJ1Y3RvciBiZWZvcmUgdHJhdmVyc2luZyBwcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgY2FsbGVycy5wdXNoKGEuY29uc3RydWN0b3IpOwogICAgICAgICAgICAgICAgICAgIC8vdHJhY2sgcmVmZXJlbmNlIHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMKICAgICAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2goYSk7CgogICAgICAgICAgICAgICAgICAgIGZvciAoaSBpbiBhKSB7IC8vIGJlIHN0cmljdDogZG9uJ3QgZW5zdXJlcyBoYXNPd25Qcm9wZXJ0eSBhbmQgZ28gZGVlcAogICAgICAgICAgICAgICAgICAgICAgICBsb29wID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihqPTA7ajxwYXJlbnRzLmxlbmd0aDtqKyspewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocGFyZW50c1tqXSA9PT0gYVtpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wID0gdHJ1ZTsgLy9kb24ndCBnbyBkb3duIHRoZSBzYW1lIHBhdGggdHdpY2UKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBhUHJvcGVydGllcy5wdXNoKGkpOyAvLyBjb2xsZWN0IGEncyBwcm9wZXJ0aWVzCgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvb3AgJiYgISBpbm5lckVxdWl2KGFbaV0sIGJbaV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGNhbGxlcnMucG9wKCk7IC8vIHVuc3RhY2ssIHdlIGFyZSBkb25lCiAgICAgICAgICAgICAgICAgICAgcGFyZW50cy5wb3AoKTsKCiAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYlByb3BlcnRpZXMucHVzaChpKTsgLy8gY29sbGVjdCBiJ3MgcHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlcyBpZGVudGljYWwgcHJvcGVydGllcyBuYW1lCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVxICYmIGlubmVyRXF1aXYoYVByb3BlcnRpZXMuc29ydCgpLCBiUHJvcGVydGllcy5zb3J0KCkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgIH0oKTsKCiAgICAgICAgaW5uZXJFcXVpdiA9IGZ1bmN0aW9uICgpIHsgLy8gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzCiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cyk7CiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBlbmQgdHJhbnNpdGlvbgogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgICAgICBpZiAoYSA9PT0gYikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBjYXRjaCB0aGUgbW9zdCB5b3UgY2FuCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGEgPT09IG51bGwgfHwgYiA9PT0gbnVsbCB8fCB0eXBlb2YgYSA9PT0gInVuZGVmaW5lZCIgfHwgdHlwZW9mIGIgPT09ICJ1bmRlZmluZWQiIHx8IFFVbml0Lm9iamVjdFR5cGUoYSkgIT09IFFVbml0Lm9iamVjdFR5cGUoYikpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGRvbid0IGxvc2UgdGltZSB3aXRoIGVycm9yIHByb25lIGNhc2VzCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBiaW5kQ2FsbGJhY2tzKGEsIGNhbGxiYWNrcywgW2IsIGFdKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBhcHBseSB0cmFuc2l0aW9uIHdpdGggKDEuLm4pIGFyZ3VtZW50cwogICAgICAgICAgICB9KShhcmdzWzBdLCBhcmdzWzFdKSAmJiBhcmd1bWVudHMuY2FsbGVlLmFwcGx5KHRoaXMsIGFyZ3Muc3BsaWNlKDEsIGFyZ3MubGVuZ3RoIC0xKSk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIGlubmVyRXF1aXY7CgogICAgfSgpOwoKICAgIC8qKgogICAgICoganNEdW1wCiAgICAgKiBDb3B5cmlnaHQgKGMpIDIwMDggQXJpZWwgRmxlc2xlciAtIGFmbGVzbGVyKGF0KWdtYWlsKGRvdCljb20gfCBodHRwOi8vZmxlc2xlci5ibG9nc3BvdC5jb20KICAgICAqIExpY2Vuc2VkIHVuZGVyIEJTRCAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ic2QtbGljZW5zZS5waHApCiAgICAgKiBEYXRlOiA1LzE1LzIwMDgKICAgICAqIEBwcm9qZWN0RGVzY3JpcHRpb24gQWR2YW5jZWQgYW5kIGV4dGVuc2libGUgZGF0YSBkdW1waW5nIGZvciBKYXZhc2NyaXB0LgogICAgICogQHZlcnNpb24gMS4wLjAKICAgICAqIEBhdXRob3IgQXJpZWwgRmxlc2xlcgogICAgICogQGxpbmsge2h0dHA6Ly9mbGVzbGVyLmJsb2dzcG90LmNvbS8yMDA4LzA1L2pzZHVtcC1wcmV0dHktZHVtcC1vZi1hbnktamF2YXNjcmlwdC5odG1sfQogICAgICovCiAgICBRVW5pdC5qc0R1bXAgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgZnVuY3Rpb24gcXVvdGUoIHN0ciApIHsKICAgICAgICAgICAgcmV0dXJuICciJyArIHN0ci50b1N0cmluZygpLnJlcGxhY2UoLyIvZywgJ1xcIicpICsgJyInOwogICAgICAgIH07CiAgICAgICAgZnVuY3Rpb24gbGl0ZXJhbCggbyApIHsKICAgICAgICAgICAgcmV0dXJuIG8gKyAnJzsKICAgICAgICB9OwogICAgICAgIGZ1bmN0aW9uIGpvaW4oIHByZSwgYXJyLCBwb3N0ICkgewogICAgICAgICAgICB2YXIgcyA9IGpzRHVtcC5zZXBhcmF0b3IoKSwKICAgICAgICAgICAgICAgIGJhc2UgPSBqc0R1bXAuaW5kZW50KCksCiAgICAgICAgICAgICAgICBpbm5lciA9IGpzRHVtcC5pbmRlbnQoMSk7CiAgICAgICAgICAgIGlmICggYXJyLmpvaW4gKQogICAgICAgICAgICAgICAgYXJyID0gYXJyLmpvaW4oICcsJyArIHMgKyBpbm5lciApOwogICAgICAgICAgICBpZiAoICFhcnIgKQogICAgICAgICAgICAgICAgcmV0dXJuIHByZSArIHBvc3Q7CiAgICAgICAgICAgIHJldHVybiBbIHByZSwgaW5uZXIgKyBhcnIsIGJhc2UgKyBwb3N0IF0uam9pbihzKTsKICAgICAgICB9OwogICAgICAgIGZ1bmN0aW9uIGFycmF5KCBhcnIgKSB7CiAgICAgICAgICAgIHZhciBpID0gYXJyLmxlbmd0aCwJcmV0ID0gQXJyYXkoaSk7CiAgICAgICAgICAgIHRoaXMudXAoKTsKICAgICAgICAgICAgd2hpbGUgKCBpLS0gKQogICAgICAgICAgICAgICAgcmV0W2ldID0gdGhpcy5wYXJzZSggYXJyW2ldICk7CiAgICAgICAgICAgIHRoaXMuZG93bigpOwogICAgICAgICAgICByZXR1cm4gam9pbiggJ1snLCByZXQsICddJyApOwogICAgICAgIH07CgogICAgICAgIHZhciByZU5hbWUgPSAvXmZ1bmN0aW9uIChcdyspLzsKCiAgICAgICAgdmFyIGpzRHVtcCA9IHsKICAgICAgICAgICAgcGFyc2U6ZnVuY3Rpb24oIG9iaiwgdHlwZSApIHsgLy90eXBlIGlzIHVzZWQgbW9zdGx5IGludGVybmFsbHksIHlvdSBjYW4gZml4IGEgKGN1c3RvbSl0eXBlIGluIGFkdmFuY2UKICAgICAgICAgICAgICAgIHZhcglwYXJzZXIgPSB0aGlzLnBhcnNlcnNbIHR5cGUgfHwgdGhpcy50eXBlT2Yob2JqKSBdOwogICAgICAgICAgICAgICAgdHlwZSA9IHR5cGVvZiBwYXJzZXI7CgogICAgICAgICAgICAgICAgcmV0dXJuIHR5cGUgPT0gJ2Z1bmN0aW9uJyA/IHBhcnNlci5jYWxsKCB0aGlzLCBvYmogKSA6CiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PSAnc3RyaW5nJyA/IHBhcnNlciA6CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2Vycy5lcnJvcjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdHlwZU9mOmZ1bmN0aW9uKCBvYmogKSB7CiAgICAgICAgICAgICAgICB2YXIgdHlwZTsKICAgICAgICAgICAgICAgIGlmICggb2JqID09PSBudWxsICkgewogICAgICAgICAgICAgICAgICAgIHR5cGUgPSAibnVsbCI7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICJ1bmRlZmluZWQiOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChRVW5pdC5pcygiUmVnRXhwIiwgb2JqKSkgewogICAgICAgICAgICAgICAgICAgIHR5cGUgPSAicmVnZXhwIjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoUVVuaXQuaXMoIkRhdGUiLCBvYmopKSB7CiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICJkYXRlIjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoUVVuaXQuaXMoIkZ1bmN0aW9uIiwgb2JqKSkgewogICAgICAgICAgICAgICAgICAgIHR5cGUgPSAiZnVuY3Rpb24iOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqLnNldEludGVydmFsICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9iai5kb2N1bWVudCAhPT0gInVuZGVmaW5lZCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgICAgICB0eXBlID0gIndpbmRvdyI7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5ub2RlVHlwZSA9PT0gOSkgewogICAgICAgICAgICAgICAgICAgIHR5cGUgPSAiZG9jdW1lbnQiOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvYmoubm9kZVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICB0eXBlID0gIm5vZGUiOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAib2JqZWN0IiAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PT0gIm51bWJlciIgJiYgb2JqLmxlbmd0aCA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICJhcnJheSI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHR5cGUgPSB0eXBlb2Ygb2JqOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHR5cGU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNlcGFyYXRvcjpmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm11bHRpbGluZSA/CXRoaXMuSFRNTCA/ICc8YnIgLz4nIDogJ1xuJyA6IHRoaXMuSFRNTCA/ICcmbmJzcDsnIDogJyAnOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpbmRlbnQ6ZnVuY3Rpb24oIGV4dHJhICkgey8vIGV4dHJhIGNhbiBiZSBhIG51bWJlciwgc2hvcnRjdXQgZm9yIGluY3JlYXNpbmctY2FsbGluZy1kZWNyZWFzaW5nCiAgICAgICAgICAgICAgICBpZiAoICF0aGlzLm11bHRpbGluZSApCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnOwogICAgICAgICAgICAgICAgdmFyIGNociA9IHRoaXMuaW5kZW50Q2hhcjsKICAgICAgICAgICAgICAgIGlmICggdGhpcy5IVE1MICkKICAgICAgICAgICAgICAgICAgICBjaHIgPSBjaHIucmVwbGFjZSgvXHQvZywnICAgJykucmVwbGFjZSgvIC9nLCcmbmJzcDsnKTsKICAgICAgICAgICAgICAgIHJldHVybiBBcnJheSggdGhpcy5fZGVwdGhfICsgKGV4dHJhfHwwKSApLmpvaW4oY2hyKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdXA6ZnVuY3Rpb24oIGEgKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9kZXB0aF8gKz0gYSB8fCAxOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkb3duOmZ1bmN0aW9uKCBhICkgewogICAgICAgICAgICAgICAgdGhpcy5fZGVwdGhfIC09IGEgfHwgMTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0UGFyc2VyOmZ1bmN0aW9uKCBuYW1lLCBwYXJzZXIgKSB7CiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlcnNbbmFtZV0gPSBwYXJzZXI7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8vIFRoZSBuZXh0IDMgYXJlIGV4cG9zZWQgc28geW91IGNhbiB1c2UgdGhlbQogICAgICAgICAgICBxdW90ZTpxdW90ZSwKICAgICAgICAgICAgbGl0ZXJhbDpsaXRlcmFsLAogICAgICAgICAgICBqb2luOmpvaW4sCiAgICAgICAgICAgIC8vCiAgICAgICAgICAgIF9kZXB0aF86IDEsCiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGxpc3Qgb2YgcGFyc2VycywgdG8gbW9kaWZ5IHRoZW0sIHVzZSBqc0R1bXAuc2V0UGFyc2VyCiAgICAgICAgICAgIHBhcnNlcnM6ewogICAgICAgICAgICAgICAgd2luZG93OiAnW1dpbmRvd10nLAogICAgICAgICAgICAgICAgZG9jdW1lbnQ6ICdbRG9jdW1lbnRdJywKICAgICAgICAgICAgICAgIGVycm9yOidbRVJST1JdJywgLy93aGVuIG5vIHBhcnNlciBpcyBmb3VuZCwgc2hvdWxkbid0IGhhcHBlbgogICAgICAgICAgICAgICAgdW5rbm93bjogJ1tVbmtub3duXScsCiAgICAgICAgICAgICAgICAnbnVsbCc6J251bGwnLAogICAgICAgICAgICAgICAgdW5kZWZpbmVkOid1bmRlZmluZWQnLAogICAgICAgICAgICAgICAgJ2Z1bmN0aW9uJzpmdW5jdGlvbiggZm4gKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJldCA9ICdmdW5jdGlvbicsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSAnbmFtZScgaW4gZm4gPyBmbi5uYW1lIDogKHJlTmFtZS5leGVjKGZuKXx8W10pWzFdOy8vZnVuY3Rpb25zIG5ldmVyIGhhdmUgbmFtZSBpbiBJRQogICAgICAgICAgICAgICAgICAgIGlmICggbmFtZSApCiAgICAgICAgICAgICAgICAgICAgICAgIHJldCArPSAnICcgKyBuYW1lOwogICAgICAgICAgICAgICAgICAgIHJldCArPSAnKCc7CgogICAgICAgICAgICAgICAgICAgIHJldCA9IFsgcmV0LCBRVW5pdC5qc0R1bXAucGFyc2UoIGZuLCAnZnVuY3Rpb25BcmdzJyApLCAnKXsnXS5qb2luKCcnKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gam9pbiggcmV0LCBRVW5pdC5qc0R1bXAucGFyc2UoZm4sJ2Z1bmN0aW9uQ29kZScpLCAnfScgKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhcnJheTogYXJyYXksCiAgICAgICAgICAgICAgICBub2RlbGlzdDogYXJyYXksCiAgICAgICAgICAgICAgICBhcmd1bWVudHM6IGFycmF5LAogICAgICAgICAgICAgICAgb2JqZWN0OmZ1bmN0aW9uKCBtYXAgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJldCA9IFsgXTsKICAgICAgICAgICAgICAgICAgICBRVW5pdC5qc0R1bXAudXAoKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIga2V5IGluIG1hcCApCiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKCBRVW5pdC5qc0R1bXAucGFyc2Uoa2V5LCdrZXknKSArICc6ICcgKyBRVW5pdC5qc0R1bXAucGFyc2UobWFwW2tleV0pICk7CiAgICAgICAgICAgICAgICAgICAgUVVuaXQuanNEdW1wLmRvd24oKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gam9pbiggJ3snLCByZXQsICd9JyApOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG5vZGU6ZnVuY3Rpb24oIG5vZGUgKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG9wZW4gPSBRVW5pdC5qc0R1bXAuSFRNTCA/ICcmbHQ7JyA6ICc8JywKICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2UgPSBRVW5pdC5qc0R1bXAuSFRNTCA/ICcmZ3Q7JyA6ICc+JzsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHRhZyA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gb3BlbiArIHRhZzsKCiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGEgaW4gUVVuaXQuanNEdW1wLkRPTUF0dHJzICkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gbm9kZVtRVW5pdC5qc0R1bXAuRE9NQXR0cnNbYV1dOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbCApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgKz0gJyAnICsgYSArICc9JyArIFFVbml0LmpzRHVtcC5wYXJzZSggdmFsLCAnYXR0cmlidXRlJyApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0ICsgY2xvc2UgKyBvcGVuICsgJy8nICsgdGFnICsgY2xvc2U7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb25BcmdzOmZ1bmN0aW9uKCBmbiApIHsvL2Z1bmN0aW9uIGNhbGxzIGl0IGludGVybmFsbHksIGl0J3MgdGhlIGFyZ3VtZW50cyBwYXJ0IG9mIHRoZSBmdW5jdGlvbgogICAgICAgICAgICAgICAgICAgIHZhciBsID0gZm4ubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIGlmICggIWwgKSByZXR1cm4gJyc7CgogICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkobCk7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCBsLS0gKQogICAgICAgICAgICAgICAgICAgICAgICBhcmdzW2xdID0gU3RyaW5nLmZyb21DaGFyQ29kZSg5NytsKTsvLzk3IGlzICdhJwogICAgICAgICAgICAgICAgICAgIHJldHVybiAnICcgKyBhcmdzLmpvaW4oJywgJykgKyAnICc7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAga2V5OnF1b3RlLCAvL29iamVjdCBjYWxscyBpdCBpbnRlcm5hbGx5LCB0aGUga2V5IHBhcnQgb2YgYW4gaXRlbSBpbiBhIG1hcAogICAgICAgICAgICAgICAgZnVuY3Rpb25Db2RlOidbY29kZV0nLCAvL2Z1bmN0aW9uIGNhbGxzIGl0IGludGVybmFsbHksIGl0J3MgdGhlIGNvbnRlbnQgb2YgdGhlIGZ1bmN0aW9uCiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6cXVvdGUsIC8vbm9kZSBjYWxscyBpdCBpbnRlcm5hbGx5LCBpdCdzIGFuIGh0bWwgYXR0cmlidXRlIHZhbHVlCiAgICAgICAgICAgICAgICBzdHJpbmc6cXVvdGUsCiAgICAgICAgICAgICAgICBkYXRlOnF1b3RlLAogICAgICAgICAgICAgICAgcmVnZXhwOmxpdGVyYWwsIC8vcmVnZXgKICAgICAgICAgICAgICAgIG51bWJlcjpsaXRlcmFsLAogICAgICAgICAgICAgICAgJ2Jvb2xlYW4nOmxpdGVyYWwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgRE9NQXR0cnM6ey8vYXR0cmlidXRlcyB0byBkdW1wIGZyb20gbm9kZXMsIG5hbWU9PnJlYWxOYW1lCiAgICAgICAgICAgICAgICBpZDonaWQnLAogICAgICAgICAgICAgICAgbmFtZTonbmFtZScsCiAgICAgICAgICAgICAgICAnY2xhc3MnOidjbGFzc05hbWUnCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEhUTUw6ZmFsc2UsLy9pZiB0cnVlLCBlbnRpdGllcyBhcmUgZXNjYXBlZCAoIDwsID4sIFx0LCBzcGFjZSBhbmQgXG4gKQogICAgICAgICAgICBpbmRlbnRDaGFyOicgICAnLC8vaW5kZW50YXRpb24gdW5pdAogICAgICAgICAgICBtdWx0aWxpbmU6ZmFsc2UgLy9pZiB0cnVlLCBpdGVtcyBpbiBhIGNvbGxlY3Rpb24sIGFyZSBzZXBhcmF0ZWQgYnkgYSBcbiwgZWxzZSBqdXN0IGEgc3BhY2UuCiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIGpzRHVtcDsKICAgIH0pKCk7CgovLyBmcm9tIFNpenpsZS5qcwogICAgZnVuY3Rpb24gZ2V0VGV4dCggZWxlbXMgKSB7CiAgICAgICAgdmFyIHJldCA9ICIiLCBlbGVtOwoKICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGVsZW1zW2ldOyBpKysgKSB7CiAgICAgICAgICAgIGVsZW0gPSBlbGVtc1tpXTsKCiAgICAgICAgICAgIC8vIEdldCB0aGUgdGV4dCBmcm9tIHRleHQgbm9kZXMgYW5kIENEQVRBIG5vZGVzCiAgICAgICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA0ICkgewogICAgICAgICAgICAgICAgcmV0ICs9IGVsZW0ubm9kZVZhbHVlOwoKICAgICAgICAgICAgICAgIC8vIFRyYXZlcnNlIGV2ZXJ5dGhpbmcgZWxzZSwgZXhjZXB0IGNvbW1lbnQgbm9kZXMKICAgICAgICAgICAgfSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSAhPT0gOCApIHsKICAgICAgICAgICAgICAgIHJldCArPSBnZXRUZXh0KCBlbGVtLmNoaWxkTm9kZXMgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJldDsKICAgIH07CgogICAgLyoKICAgICAqIEphdmFzY3JpcHQgRGlmZiBBbGdvcml0aG0KICAgICAqICBCeSBKb2huIFJlc2lnIChodHRwOi8vZWpvaG4ub3JnLykKICAgICAqICBNb2RpZmllZCBieSBDaHUgQWxhbiAic3ByaXRlIgogICAgICoKICAgICAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KICAgICAqCiAgICAgKiBNb3JlIEluZm86CiAgICAgKiAgaHR0cDovL2Vqb2huLm9yZy9wcm9qZWN0cy9qYXZhc2NyaXB0LWRpZmYtYWxnb3JpdGhtLwogICAgICoKICAgICAqIFVzYWdlOiBRVW5pdC5kaWZmKGV4cGVjdGVkLCBhY3R1YWwpCiAgICAgKgogICAgICogUVVuaXQuZGlmZigidGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciIsICJ0aGUgcXVpY2sgZm94IGp1bXBzIG92ZXIiKSA9PSAidGhlICBxdWljayA8ZGVsPmJyb3duIDwvZGVsPiBmb3ggPGRlbD5qdW1wZWQgPC9kZWw+PGlucz5qdW1wcyA8L2lucz4gb3ZlciIKICAgICAqLwogICAgUVVuaXQuZGlmZiA9IChmdW5jdGlvbigpIHsKICAgICAgICBmdW5jdGlvbiBkaWZmKG8sIG4pewogICAgICAgICAgICB2YXIgbnMgPSBuZXcgT2JqZWN0KCk7CiAgICAgICAgICAgIHZhciBvcyA9IG5ldyBPYmplY3QoKTsKCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKG5zW25baV1dID09IG51bGwpCiAgICAgICAgICAgICAgICAgICAgbnNbbltpXV0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3M6IG5ldyBBcnJheSgpLAogICAgICAgICAgICAgICAgICAgICAgICBvOiBudWxsCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIG5zW25baV1dLnJvd3MucHVzaChpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAob3Nbb1tpXV0gPT0gbnVsbCkKICAgICAgICAgICAgICAgICAgICBvc1tvW2ldXSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgcm93czogbmV3IEFycmF5KCksCiAgICAgICAgICAgICAgICAgICAgICAgIG46IG51bGwKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgb3Nbb1tpXV0ucm93cy5wdXNoKGkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKHZhciBpIGluIG5zKSB7CiAgICAgICAgICAgICAgICBpZiAobnNbaV0ucm93cy5sZW5ndGggPT0gMSAmJiB0eXBlb2Yob3NbaV0pICE9ICJ1bmRlZmluZWQiICYmIG9zW2ldLnJvd3MubGVuZ3RoID09IDEpIHsKICAgICAgICAgICAgICAgICAgICBuW25zW2ldLnJvd3NbMF1dID0gewogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBuW25zW2ldLnJvd3NbMF1dLAogICAgICAgICAgICAgICAgICAgICAgICByb3c6IG9zW2ldLnJvd3NbMF0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIG9bb3NbaV0ucm93c1swXV0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG9bb3NbaV0ucm93c1swXV0sCiAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogbnNbaV0ucm93c1swXQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChuW2ldLnRleHQgIT0gbnVsbCAmJiBuW2kgKyAxXS50ZXh0ID09IG51bGwgJiYgbltpXS5yb3cgKyAxIDwgby5sZW5ndGggJiYgb1tuW2ldLnJvdyArIDFdLnRleHQgPT0gbnVsbCAmJgogICAgICAgICAgICAgICAgICAgIG5baSArIDFdID09IG9bbltpXS5yb3cgKyAxXSkgewogICAgICAgICAgICAgICAgICAgIG5baSArIDFdID0gewogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBuW2kgKyAxXSwKICAgICAgICAgICAgICAgICAgICAgICAgcm93OiBuW2ldLnJvdyArIDEKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIG9bbltpXS5yb3cgKyAxXSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogb1tuW2ldLnJvdyArIDFdLAogICAgICAgICAgICAgICAgICAgICAgICByb3c6IGkgKyAxCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IG4ubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkgewogICAgICAgICAgICAgICAgaWYgKG5baV0udGV4dCAhPSBudWxsICYmIG5baSAtIDFdLnRleHQgPT0gbnVsbCAmJiBuW2ldLnJvdyA+IDAgJiYgb1tuW2ldLnJvdyAtIDFdLnRleHQgPT0gbnVsbCAmJgogICAgICAgICAgICAgICAgICAgIG5baSAtIDFdID09IG9bbltpXS5yb3cgLSAxXSkgewogICAgICAgICAgICAgICAgICAgIG5baSAtIDFdID0gewogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBuW2kgLSAxXSwKICAgICAgICAgICAgICAgICAgICAgICAgcm93OiBuW2ldLnJvdyAtIDEKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIG9bbltpXS5yb3cgLSAxXSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogb1tuW2ldLnJvdyAtIDFdLAogICAgICAgICAgICAgICAgICAgICAgICByb3c6IGkgLSAxCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIG86IG8sCiAgICAgICAgICAgICAgICBuOiBuCiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZnVuY3Rpb24obywgbil7CiAgICAgICAgICAgIG8gPSBvLnJlcGxhY2UoL1xzKyQvLCAnJyk7CiAgICAgICAgICAgIG4gPSBuLnJlcGxhY2UoL1xzKyQvLCAnJyk7CiAgICAgICAgICAgIHZhciBvdXQgPSBkaWZmKG8gPT0gIiIgPyBbXSA6IG8uc3BsaXQoL1xzKy8pLCBuID09ICIiID8gW10gOiBuLnNwbGl0KC9ccysvKSk7CgogICAgICAgICAgICB2YXIgc3RyID0gIiI7CgogICAgICAgICAgICB2YXIgb1NwYWNlID0gby5tYXRjaCgvXHMrL2cpOwogICAgICAgICAgICBpZiAob1NwYWNlID09IG51bGwpIHsKICAgICAgICAgICAgICAgIG9TcGFjZSA9IFsiICJdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgb1NwYWNlLnB1c2goIiAiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgblNwYWNlID0gbi5tYXRjaCgvXHMrL2cpOwogICAgICAgICAgICBpZiAoblNwYWNlID09IG51bGwpIHsKICAgICAgICAgICAgICAgIG5TcGFjZSA9IFsiICJdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgblNwYWNlLnB1c2goIiAiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG91dC5uLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dC5vLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgc3RyICs9ICc8ZGVsPicgKyBvdXQub1tpXSArIG9TcGFjZVtpXSArICI8L2RlbD4iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKG91dC5uWzBdLnRleHQgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIGZvciAobiA9IDA7IG4gPCBvdXQuby5sZW5ndGggJiYgb3V0Lm9bbl0udGV4dCA9PSBudWxsOyBuKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICc8ZGVsPicgKyBvdXQub1tuXSArIG9TcGFjZVtuXSArICI8L2RlbD4iOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dC5uLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG91dC5uW2ldLnRleHQgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJzxpbnM+JyArIG91dC5uW2ldICsgblNwYWNlW2ldICsgIjwvaW5zPiI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJlID0gIiI7CgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG4gPSBvdXQubltpXS5yb3cgKyAxOyBuIDwgb3V0Lm8ubGVuZ3RoICYmIG91dC5vW25dLnRleHQgPT0gbnVsbDsgbisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUgKz0gJzxkZWw+JyArIG91dC5vW25dICsgb1NwYWNlW25dICsgIjwvZGVsPiI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICIgIiArIG91dC5uW2ldLnRleHQgKyBuU3BhY2VbaV0gKyBwcmU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gc3RyOwogICAgICAgIH07CiAgICB9KSgpOwoKfSkodGhpcyk7",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 12:41:46 GMT",
                    "Content-Length": "45499",
                    "Date": "Thu, 06 Nov 2014 12:41:48 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}