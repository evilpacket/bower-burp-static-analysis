{
    "url": "http://localhost:9999/leapmotion/leapjs-plugins/main/transform/",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>window.location.href</b> and written to <b>the 'href' property of a DOM element</b> via the following statement:<ul><li>document.getElementById('view-source').href = window.location.href.replace(/^(.*)\\/\\//, 'view-source:')</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/leapmotion/leapjs-plugins/main/transform/",
                "path": "/leapmotion/leapjs-plugins/main/transform/",
                "httpVersion": "HTTP/0.0",
                "method": "GET",
                "headers": {
                    "Referer": "http://localhost:9999/leapmotion/leapjs-plugins/main/transform",
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9sZWFwbW90aW9uL2xlYXBqcy1wbHVnaW5zL21haW4vdHJhbnNmb3JtLyBIVFRQLzAuMA0KSG9zdDogbG9jYWxob3N0Ojk5OTkNClJlZmVyZXI6IGh0dHA6Ly9sb2NhbGhvc3Q6OTk5OS9sZWFwbW90aW9uL2xlYXBqcy1wbHVnaW5zL21haW4vdHJhbnNmb3JtDQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 08:33:02 GMT",
                    "Content-Length": "6585",
                    "Date": "Fri, 07 Nov 2014 08:33:03 GMT",
                    "Content-Type": "text/html; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "HTML",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}