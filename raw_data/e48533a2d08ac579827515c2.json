{
    "url": "http://localhost:9999/artema/FlashWarp/docs/flash/help.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location.search</b> and written to <b>the 'innerHTML' property of a DOM element</b> via the following statements:<ul><li>var query = window.location.search.substring(1);</li><li>var pairs = query.split(\",\");</li><li>var value = pairs[i].substring(pos+1);</li><li>args[argname] = unescape(value);</li><li>return args;</li><li>var args = getArgs();</li><li>return args[name];</li><li>var externalQuery = GetCookie(\"externalQuery\");</li><li>searchTerm = externalQuery;</li><li>searchTerm = searchTerm.replace (/(%20)+/g,\" \") ;</li><li>searchTerm = searchTerm.toLowerCase();</li><li>searchTerm = filterTheChars(searchTerm);</li><li>ch = line.substr(ndx,1);</li><li>retChr = ch;</li><li>retStr += retChr;</li><li>return retStr;</li><li>searchTerm = filterTheChars(searchTerm);</li><li>temp = searchTerm.replace(re_1,\"\");</li><li>searchTerm = temp;</li><li>tempArr = searchTerm.split(\" \",100);</li><li>myArr[myArr.length] = tempArr[ndx];</li><li>searchTerm = searchTerm + myArr[ndx] + \" \";</li><li>temp = searchTerm.replace(re_2,\"\");</li><li>searchTerm = temp;</li><li>srch_input_massaged = searchTerm;</li><li>stStr = \"&lt;div class=\\\"form\\\"&gt;\" + MSG_pagesContaining + \"&lt;strong&gt;\" + srch_input_massaged + \"&lt;/strong&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;\\n\";</li><li>document.getElementById(\"results\").innerHTML = stStr + buildHtmlResultsStr();</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/artema/FlashWarp/docs/flash/help.js",
                "path": "/artema/FlashWarp/docs/flash/help.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hcnRlbWEvRmxhc2hXYXJwL2RvY3MvZmxhc2gvaGVscC5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 00:24:02 GMT",
                    "Content-Length": "25367",
                    "Date": "Fri, 07 Nov 2014 00:24:02 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}