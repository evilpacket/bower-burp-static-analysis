{
    "url": "http://localhost:9999/sideroad/jquery.floatingmessage/node_modules/grunt-qunit-cov/examples/lib/qunit.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.search</b> and written to <b>the 'innerHTML' property of a DOM element</b> via the following statements:<ul><li>var testName = decodeURIComponent(location.search.slice(1));</li><li>banner.innerHTML = '&lt;a href=\"' + mainPageLocation + '\"&gt;' + banner.innerHTML + '&lt;/a&gt; &amp;#8250; &lt;a href=\"\"&gt;' + testName + '&lt;/a&gt;';</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/sideroad/jquery.floatingmessage/node_modules/grunt-qunit-cov/examples/lib/qunit.js",
                "path": "/sideroad/jquery.floatingmessage/node_modules/grunt-qunit-cov/examples/lib/qunit.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9zaWRlcm9hZC9qcXVlcnkuZmxvYXRpbmdtZXNzYWdlL25vZGVfbW9kdWxlcy9ncnVudC1xdW5pdC1jb3YvZXhhbXBsZXMvbGliL3F1bml0LmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyoNCiAqIFFVbml0IC0gQSBKYXZhU2NyaXB0IFVuaXQgVGVzdGluZyBGcmFtZXdvcmsNCiAqIA0KICogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9RVW5pdA0KICoNCiAqIENvcHlyaWdodCAoYykgMjAxMSBKb2huIFJlc2lnLCBKw7ZybiBaYWVmZmVyZXINCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCAoTUlULUxJQ0VOU0UudHh0KQ0KICogb3IgR1BMIChHUEwtTElDRU5TRS50eHQpIGxpY2Vuc2VzLg0KICovDQoNCihmdW5jdGlvbih3aW5kb3cpIHsNCg0KdmFyIGRlZmluZWQgPSB7DQoJc2V0VGltZW91dDogdHlwZW9mIHdpbmRvdy5zZXRUaW1lb3V0ICE9PSAidW5kZWZpbmVkIiwNCglzZXNzaW9uU3RvcmFnZTogKGZ1bmN0aW9uKCkgew0KCQl0cnkgew0KCQkJcmV0dXJuICEhc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbTsNCgkJfSBjYXRjaChlKXsNCgkJCXJldHVybiBmYWxzZTsNCgkJfQ0KICB9KSgpDQp9DQoNCnZhciB0ZXN0SWQgPSAwOw0KDQp2YXIgVGVzdCA9IGZ1bmN0aW9uKG5hbWUsIHRlc3ROYW1lLCBleHBlY3RlZCwgdGVzdEVudmlyb25tZW50QXJnLCBhc3luYywgY2FsbGJhY2spIHsNCgl0aGlzLm5hbWUgPSBuYW1lOw0KCXRoaXMudGVzdE5hbWUgPSB0ZXN0TmFtZTsNCgl0aGlzLmV4cGVjdGVkID0gZXhwZWN0ZWQ7DQoJdGhpcy50ZXN0RW52aXJvbm1lbnRBcmcgPSB0ZXN0RW52aXJvbm1lbnRBcmc7DQoJdGhpcy5hc3luYyA9IGFzeW5jOw0KCXRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjazsNCgl0aGlzLmFzc2VydGlvbnMgPSBbXTsNCn07DQpUZXN0LnByb3RvdHlwZSA9IHsNCglpbml0OiBmdW5jdGlvbigpIHsNCgkJdmFyIHRlc3RzID0gaWQoInF1bml0LXRlc3RzIik7DQoJCWlmICh0ZXN0cykgew0KCQkJdmFyIGIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHJvbmciKTsNCgkJCQliLmlubmVySFRNTCA9ICJSdW5uaW5nICIgKyB0aGlzLm5hbWU7DQoJCQl2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsaSIpOw0KCQkJCWxpLmFwcGVuZENoaWxkKCBiICk7DQoJCQkJbGkuaWQgPSB0aGlzLmlkID0gInRlc3Qtb3V0cHV0IiArIHRlc3RJZCsrOw0KCQkJdGVzdHMuYXBwZW5kQ2hpbGQoIGxpICk7DQoJCX0NCgl9LA0KCXNldHVwOiBmdW5jdGlvbigpIHsNCgkJaWYgKHRoaXMubW9kdWxlICE9IGNvbmZpZy5wcmV2aW91c01vZHVsZSkgew0KCQkJaWYgKCBjb25maWcucHJldmlvdXNNb2R1bGUgKSB7DQoJCQkJUVVuaXQubW9kdWxlRG9uZSggew0KCQkJCQluYW1lOiBjb25maWcucHJldmlvdXNNb2R1bGUsDQoJCQkJCWZhaWxlZDogY29uZmlnLm1vZHVsZVN0YXRzLmJhZCwNCgkJCQkJcGFzc2VkOiBjb25maWcubW9kdWxlU3RhdHMuYWxsIC0gY29uZmlnLm1vZHVsZVN0YXRzLmJhZCwNCgkJCQkJdG90YWw6IGNvbmZpZy5tb2R1bGVTdGF0cy5hbGwNCgkJCQl9ICk7DQoJCQl9DQoJCQljb25maWcucHJldmlvdXNNb2R1bGUgPSB0aGlzLm1vZHVsZTsNCgkJCWNvbmZpZy5tb2R1bGVTdGF0cyA9IHsgYWxsOiAwLCBiYWQ6IDAgfTsNCgkJCVFVbml0Lm1vZHVsZVN0YXJ0KCB7DQoJCQkJbmFtZTogdGhpcy5tb2R1bGUNCgkJCX0gKTsNCgkJfQ0KDQoJCWNvbmZpZy5jdXJyZW50ID0gdGhpczsNCgkJdGhpcy50ZXN0RW52aXJvbm1lbnQgPSBleHRlbmQoew0KCQkJc2V0dXA6IGZ1bmN0aW9uKCkge30sDQoJCQl0ZWFyZG93bjogZnVuY3Rpb24oKSB7fQ0KCQl9LCB0aGlzLm1vZHVsZVRlc3RFbnZpcm9ubWVudCk7DQoJCWlmICh0aGlzLnRlc3RFbnZpcm9ubWVudEFyZykgew0KCQkJZXh0ZW5kKHRoaXMudGVzdEVudmlyb25tZW50LCB0aGlzLnRlc3RFbnZpcm9ubWVudEFyZyk7DQoJCX0NCg0KCQlRVW5pdC50ZXN0U3RhcnQoIHsNCgkJCW5hbWU6IHRoaXMudGVzdE5hbWUNCgkJfSApOw0KDQoJCS8vIGFsbG93IHV0aWxpdHkgZnVuY3Rpb25zIHRvIGFjY2VzcyB0aGUgY3VycmVudCB0ZXN0IGVudmlyb25tZW50DQoJCS8vIFRPRE8gd2h5Pz8NCgkJUVVuaXQuY3VycmVudF90ZXN0RW52aXJvbm1lbnQgPSB0aGlzLnRlc3RFbnZpcm9ubWVudDsNCgkJDQoJCXRyeSB7DQoJCQlpZiAoICFjb25maWcucG9sbHV0aW9uICkgew0KCQkJCXNhdmVHbG9iYWwoKTsNCgkJCX0NCg0KCQkJdGhpcy50ZXN0RW52aXJvbm1lbnQuc2V0dXAuY2FsbCh0aGlzLnRlc3RFbnZpcm9ubWVudCk7DQoJCX0gY2F0Y2goZSkgew0KCQkJUVVuaXQub2soIGZhbHNlLCAiU2V0dXAgZmFpbGVkIG9uICIgKyB0aGlzLnRlc3ROYW1lICsgIjogIiArIGUubWVzc2FnZSApOw0KCQl9DQoJfSwNCglydW46IGZ1bmN0aW9uKCkgew0KCQlpZiAoIHRoaXMuYXN5bmMgKSB7DQoJCQlRVW5pdC5zdG9wKCk7DQoJCX0NCg0KCQlpZiAoIGNvbmZpZy5ub3RyeWNhdGNoICkgew0KCQkJdGhpcy5jYWxsYmFjay5jYWxsKHRoaXMudGVzdEVudmlyb25tZW50KTsNCgkJCXJldHVybjsNCgkJfQ0KCQl0cnkgew0KCQkJdGhpcy5jYWxsYmFjay5jYWxsKHRoaXMudGVzdEVudmlyb25tZW50KTsNCgkJfSBjYXRjaChlKSB7DQoJCQlmYWlsKCJUZXN0ICIgKyB0aGlzLnRlc3ROYW1lICsgIiBkaWVkLCBleGNlcHRpb24gYW5kIHRlc3QgZm9sbG93cyIsIGUsIHRoaXMuY2FsbGJhY2spOw0KCQkJUVVuaXQub2soIGZhbHNlLCAiRGllZCBvbiB0ZXN0ICMiICsgKHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGggKyAxKSArICI6ICIgKyBlLm1lc3NhZ2UgKyAiIC0gIiArIFFVbml0LmpzRHVtcC5wYXJzZShlKSApOw0KCQkJLy8gZWxzZSBuZXh0IHRlc3Qgd2lsbCBjYXJyeSB0aGUgcmVzcG9uc2liaWxpdHkNCgkJCXNhdmVHbG9iYWwoKTsNCg0KCQkJLy8gUmVzdGFydCB0aGUgdGVzdHMgaWYgdGhleSdyZSBibG9ja2luZw0KCQkJaWYgKCBjb25maWcuYmxvY2tpbmcgKSB7DQoJCQkJc3RhcnQoKTsNCgkJCX0NCgkJfQ0KCX0sDQoJdGVhcmRvd246IGZ1bmN0aW9uKCkgew0KCQl0cnkgew0KCQkJY2hlY2tQb2xsdXRpb24oKTsNCgkJCXRoaXMudGVzdEVudmlyb25tZW50LnRlYXJkb3duLmNhbGwodGhpcy50ZXN0RW52aXJvbm1lbnQpOw0KCQl9IGNhdGNoKGUpIHsNCgkJCVFVbml0Lm9rKCBmYWxzZSwgIlRlYXJkb3duIGZhaWxlZCBvbiAiICsgdGhpcy50ZXN0TmFtZSArICI6ICIgKyBlLm1lc3NhZ2UgKTsNCgkJfQ0KCX0sDQoJZmluaXNoOiBmdW5jdGlvbigpIHsNCgkJaWYgKCB0aGlzLmV4cGVjdGVkICYmIHRoaXMuZXhwZWN0ZWQgIT0gdGhpcy5hc3NlcnRpb25zLmxlbmd0aCApIHsNCgkJCVFVbml0Lm9rKCBmYWxzZSwgIkV4cGVjdGVkICIgKyB0aGlzLmV4cGVjdGVkICsgIiBhc3NlcnRpb25zLCBidXQgIiArIHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGggKyAiIHdlcmUgcnVuIiApOw0KCQl9DQoJCQ0KCQl2YXIgZ29vZCA9IDAsIGJhZCA9IDAsDQoJCQl0ZXN0cyA9IGlkKCJxdW5pdC10ZXN0cyIpOw0KDQoJCWNvbmZpZy5zdGF0cy5hbGwgKz0gdGhpcy5hc3NlcnRpb25zLmxlbmd0aDsNCgkJY29uZmlnLm1vZHVsZVN0YXRzLmFsbCArPSB0aGlzLmFzc2VydGlvbnMubGVuZ3RoOw0KDQoJCWlmICggdGVzdHMgKSB7DQoJCQl2YXIgb2wgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib2wiKTsNCg0KCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5hc3NlcnRpb25zLmxlbmd0aDsgaSsrICkgew0KCQkJCXZhciBhc3NlcnRpb24gPSB0aGlzLmFzc2VydGlvbnNbaV07DQoNCgkJCQl2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsaSIpOw0KCQkJCWxpLmNsYXNzTmFtZSA9IGFzc2VydGlvbi5yZXN1bHQgPyAicGFzcyIgOiAiZmFpbCI7DQoJCQkJbGkuaW5uZXJIVE1MID0gYXNzZXJ0aW9uLm1lc3NhZ2UgfHwgKGFzc2VydGlvbi5yZXN1bHQgPyAib2theSIgOiAiZmFpbGVkIik7DQoJCQkJb2wuYXBwZW5kQ2hpbGQoIGxpICk7DQoNCgkJCQlpZiAoIGFzc2VydGlvbi5yZXN1bHQgKSB7DQoJCQkJCWdvb2QrKzsNCgkJCQl9IGVsc2Ugew0KCQkJCQliYWQrKzsNCgkJCQkJY29uZmlnLnN0YXRzLmJhZCsrOw0KCQkJCQljb25maWcubW9kdWxlU3RhdHMuYmFkKys7DQoJCQkJfQ0KCQkJfQ0KDQoJCQkvLyBzdG9yZSByZXN1bHQgd2hlbiBwb3NzaWJsZQ0KCQkJZGVmaW5lZC5zZXNzaW9uU3RvcmFnZSAmJiBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJxdW5pdC0iICsgdGhpcy50ZXN0TmFtZSwgYmFkKTsNCg0KCQkJaWYgKGJhZCA9PSAwKSB7DQoJCQkJb2wuc3R5bGUuZGlzcGxheSA9ICJub25lIjsNCgkJCX0NCg0KCQkJdmFyIGIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHJvbmciKTsNCgkJCWIuaW5uZXJIVE1MID0gdGhpcy5uYW1lICsgIiA8YiBjbGFzcz0nY291bnRzJz4oPGIgY2xhc3M9J2ZhaWxlZCc+IiArIGJhZCArICI8L2I+LCA8YiBjbGFzcz0ncGFzc2VkJz4iICsgZ29vZCArICI8L2I+LCAiICsgdGhpcy5hc3NlcnRpb25zLmxlbmd0aCArICIpPC9iPiI7DQoJCQkNCgkJCWFkZEV2ZW50KGIsICJjbGljayIsIGZ1bmN0aW9uKCkgew0KCQkJCXZhciBuZXh0ID0gYi5uZXh0U2libGluZywgZGlzcGxheSA9IG5leHQuc3R5bGUuZGlzcGxheTsNCgkJCQluZXh0LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5ID09PSAibm9uZSIgPyAiYmxvY2siIDogIm5vbmUiOw0KCQkJfSk7DQoJCQkNCgkJCWFkZEV2ZW50KGIsICJkYmxjbGljayIsIGZ1bmN0aW9uKGUpIHsNCgkJCQl2YXIgdGFyZ2V0ID0gZSAmJiBlLnRhcmdldCA/IGUudGFyZ2V0IDogd2luZG93LmV2ZW50LnNyY0VsZW1lbnQ7DQoJCQkJaWYgKCB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSAic3BhbiIgfHwgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gImIiICkgew0KCQkJCQl0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTsNCgkJCQl9DQoJCQkJaWYgKCB3aW5kb3cubG9jYXRpb24gJiYgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICJzdHJvbmciICkgew0KCQkJCQl3aW5kb3cubG9jYXRpb24uc2VhcmNoID0gIj8iICsgZW5jb2RlVVJJQ29tcG9uZW50KGdldFRleHQoW3RhcmdldF0pLnJlcGxhY2UoL1woLitcKSQvLCAiIikucmVwbGFjZSgvKF5ccyp8XHMqJCkvZywgIiIpKTsNCgkJCQl9DQoJCQl9KTsNCg0KCQkJdmFyIGxpID0gaWQodGhpcy5pZCk7DQoJCQlsaS5jbGFzc05hbWUgPSBiYWQgPyAiZmFpbCIgOiAicGFzcyI7DQoJCQlsaS5zdHlsZS5kaXNwbGF5ID0gcmVzdWx0RGlzcGxheVN0eWxlKCFiYWQpOw0KCQkJbGkucmVtb3ZlQ2hpbGQoIGxpLmZpcnN0Q2hpbGQgKTsNCgkJCWxpLmFwcGVuZENoaWxkKCBiICk7DQoJCQlsaS5hcHBlbmRDaGlsZCggb2wgKTsNCg0KCQl9IGVsc2Ugew0KCQkJZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5hc3NlcnRpb25zLmxlbmd0aDsgaSsrICkgew0KCQkJCWlmICggIXRoaXMuYXNzZXJ0aW9uc1tpXS5yZXN1bHQgKSB7DQoJCQkJCWJhZCsrOw0KCQkJCQljb25maWcuc3RhdHMuYmFkKys7DQoJCQkJCWNvbmZpZy5tb2R1bGVTdGF0cy5iYWQrKzsNCgkJCQl9DQoJCQl9DQoJCX0NCg0KCQl0cnkgew0KCQkJUVVuaXQucmVzZXQoKTsNCgkJfSBjYXRjaChlKSB7DQoJCQlmYWlsKCJyZXNldCgpIGZhaWxlZCwgZm9sbG93aW5nIFRlc3QgIiArIHRoaXMudGVzdE5hbWUgKyAiLCBleGNlcHRpb24gYW5kIHJlc2V0IGZuIGZvbGxvd3MiLCBlLCBRVW5pdC5yZXNldCk7DQoJCX0NCg0KCQlRVW5pdC50ZXN0RG9uZSggew0KCQkJbmFtZTogdGhpcy50ZXN0TmFtZSwNCgkJCWZhaWxlZDogYmFkLA0KCQkJcGFzc2VkOiB0aGlzLmFzc2VydGlvbnMubGVuZ3RoIC0gYmFkLA0KCQkJdG90YWw6IHRoaXMuYXNzZXJ0aW9ucy5sZW5ndGgNCgkJfSApOw0KCX0sDQoJDQoJcXVldWU6IGZ1bmN0aW9uKCkgew0KCQl2YXIgdGVzdCA9IHRoaXM7DQoJCXN5bmNocm9uaXplKGZ1bmN0aW9uKCkgew0KCQkJdGVzdC5pbml0KCk7DQoJCX0pOw0KCQlmdW5jdGlvbiBydW4oKSB7DQoJCQkvLyBlYWNoIG9mIHRoZXNlIGNhbiBieSBhc3luYw0KCQkJc3luY2hyb25pemUoZnVuY3Rpb24oKSB7DQoJCQkJdGVzdC5zZXR1cCgpOw0KCQkJfSk7DQoJCQlzeW5jaHJvbml6ZShmdW5jdGlvbigpIHsNCgkJCQl0ZXN0LnJ1bigpOw0KCQkJfSk7DQoJCQlzeW5jaHJvbml6ZShmdW5jdGlvbigpIHsNCgkJCQl0ZXN0LnRlYXJkb3duKCk7DQoJCQl9KTsNCgkJCXN5bmNocm9uaXplKGZ1bmN0aW9uKCkgew0KCQkJCXRlc3QuZmluaXNoKCk7DQoJCQl9KTsNCgkJfQ0KCQkvLyBkZWZlciB3aGVuIHByZXZpb3VzIHRlc3QgcnVuIHBhc3NlZCwgaWYgc3RvcmFnZSBpcyBhdmFpbGFibGUNCgkJdmFyIGJhZCA9IGRlZmluZWQuc2Vzc2lvblN0b3JhZ2UgJiYgK3Nlc3Npb25TdG9yYWdlLmdldEl0ZW0oInF1bml0LSIgKyB0aGlzLnRlc3ROYW1lKTsNCgkJaWYgKGJhZCkgew0KCQkJcnVuKCk7DQoJCX0gZWxzZSB7DQoJCQlzeW5jaHJvbml6ZShydW4pOw0KCQl9Ow0KCX0NCgkNCn0NCg0KdmFyIFFVbml0ID0gew0KDQoJLy8gY2FsbCBvbiBzdGFydCBvZiBtb2R1bGUgdGVzdCB0byBwcmVwZW5kIG5hbWUgdG8gYWxsIHRlc3RzDQoJbW9kdWxlOiBmdW5jdGlvbihuYW1lLCB0ZXN0RW52aXJvbm1lbnQpIHsNCgkJY29uZmlnLmN1cnJlbnRNb2R1bGUgPSBuYW1lOw0KCQljb25maWcuY3VycmVudE1vZHVsZVRlc3RFbnZpcm9tZW50ID0gdGVzdEVudmlyb25tZW50Ow0KCX0sDQoNCglhc3luY1Rlc3Q6IGZ1bmN0aW9uKHRlc3ROYW1lLCBleHBlY3RlZCwgY2FsbGJhY2spIHsNCgkJaWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAyICkgew0KCQkJY2FsbGJhY2sgPSBleHBlY3RlZDsNCgkJCWV4cGVjdGVkID0gMDsNCgkJfQ0KDQoJCVFVbml0LnRlc3QodGVzdE5hbWUsIGV4cGVjdGVkLCBjYWxsYmFjaywgdHJ1ZSk7DQoJfSwNCgkNCgl0ZXN0OiBmdW5jdGlvbih0ZXN0TmFtZSwgZXhwZWN0ZWQsIGNhbGxiYWNrLCBhc3luYykgew0KCQl2YXIgbmFtZSA9ICc8c3BhbiBjbGFzcz0idGVzdC1uYW1lIj4nICsgdGVzdE5hbWUgKyAnPC9zcGFuPicsIHRlc3RFbnZpcm9ubWVudEFyZzsNCg0KCQlpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDIgKSB7DQoJCQljYWxsYmFjayA9IGV4cGVjdGVkOw0KCQkJZXhwZWN0ZWQgPSBudWxsOw0KCQl9DQoJCS8vIGlzIDJuZCBhcmd1bWVudCBhIHRlc3RFbnZpcm9ubWVudD8NCgkJaWYgKCBleHBlY3RlZCAmJiB0eXBlb2YgZXhwZWN0ZWQgPT09ICdvYmplY3QnKSB7DQoJCQl0ZXN0RW52aXJvbm1lbnRBcmcgPSAgZXhwZWN0ZWQ7DQoJCQlleHBlY3RlZCA9IG51bGw7DQoJCX0NCg0KCQlpZiAoIGNvbmZpZy5jdXJyZW50TW9kdWxlICkgew0KCQkJbmFtZSA9ICc8c3BhbiBjbGFzcz0ibW9kdWxlLW5hbWUiPicgKyBjb25maWcuY3VycmVudE1vZHVsZSArICI8L3NwYW4+OiAiICsgbmFtZTsNCgkJfQ0KDQoJCWlmICggIXZhbGlkVGVzdChjb25maWcuY3VycmVudE1vZHVsZSArICI6ICIgKyB0ZXN0TmFtZSkgKSB7DQoJCQlyZXR1cm47DQoJCX0NCgkJDQoJCXZhciB0ZXN0ID0gbmV3IFRlc3QobmFtZSwgdGVzdE5hbWUsIGV4cGVjdGVkLCB0ZXN0RW52aXJvbm1lbnRBcmcsIGFzeW5jLCBjYWxsYmFjayk7DQoJCXRlc3QubW9kdWxlID0gY29uZmlnLmN1cnJlbnRNb2R1bGU7DQoJCXRlc3QubW9kdWxlVGVzdEVudmlyb25tZW50ID0gY29uZmlnLmN1cnJlbnRNb2R1bGVUZXN0RW52aXJvbWVudDsNCgkJdGVzdC5xdWV1ZSgpOw0KCX0sDQoJDQoJLyoqDQoJICogU3BlY2lmeSB0aGUgbnVtYmVyIG9mIGV4cGVjdGVkIGFzc2VydGlvbnMgdG8gZ3VyYW50ZWUgdGhhdCBmYWlsZWQgdGVzdCAobm8gYXNzZXJ0aW9ucyBhcmUgcnVuIGF0IGFsbCkgZG9uJ3Qgc2xpcCB0aHJvdWdoLg0KCSAqLw0KCWV4cGVjdDogZnVuY3Rpb24oYXNzZXJ0cykgew0KCQljb25maWcuY3VycmVudC5leHBlY3RlZCA9IGFzc2VydHM7DQoJfSwNCg0KCS8qKg0KCSAqIEFzc2VydHMgdHJ1ZS4NCgkgKiBAZXhhbXBsZSBvayggImFzZGZhc2RmIi5sZW5ndGggPiA1LCAiVGhlcmUgbXVzdCBiZSBhdCBsZWFzdCA1IGNoYXJzIiApOw0KCSAqLw0KCW9rOiBmdW5jdGlvbihhLCBtc2cpIHsNCgkJYSA9ICEhYTsNCgkJdmFyIGRldGFpbHMgPSB7DQoJCQlyZXN1bHQ6IGEsDQoJCQltZXNzYWdlOiBtc2cNCgkJfTsNCgkJbXNnID0gZXNjYXBlSHRtbChtc2cpOw0KCQlRVW5pdC5sb2coZGV0YWlscyk7DQoJCWNvbmZpZy5jdXJyZW50LmFzc2VydGlvbnMucHVzaCh7DQoJCQlyZXN1bHQ6IGEsDQoJCQltZXNzYWdlOiBtc2cNCgkJfSk7DQoJfSwNCg0KCS8qKg0KCSAqIENoZWNrcyB0aGF0IHRoZSBmaXJzdCB0d28gYXJndW1lbnRzIGFyZSBlcXVhbCwgd2l0aCBhbiBvcHRpb25hbCBtZXNzYWdlLg0KCSAqIFByaW50cyBvdXQgYm90aCBhY3R1YWwgYW5kIGV4cGVjdGVkIHZhbHVlcy4NCgkgKg0KCSAqIFByZWZlcmVkIHRvIG9rKCBhY3R1YWwgPT0gZXhwZWN0ZWQsIG1lc3NhZ2UgKQ0KCSAqDQoJICogQGV4YW1wbGUgZXF1YWwoIGZvcm1hdCgiUmVjZWl2ZWQgezB9IGJ5dGVzLiIsIDIpLCAiUmVjZWl2ZWQgMiBieXRlcy4iICk7DQoJICoNCgkgKiBAcGFyYW0gT2JqZWN0IGFjdHVhbA0KCSAqIEBwYXJhbSBPYmplY3QgZXhwZWN0ZWQNCgkgKiBAcGFyYW0gU3RyaW5nIG1lc3NhZ2UgKG9wdGlvbmFsKQ0KCSAqLw0KCWVxdWFsOiBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7DQoJCVFVbml0LnB1c2goZXhwZWN0ZWQgPT0gYWN0dWFsLCBhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKTsNCgl9LA0KDQoJbm90RXF1YWw6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsNCgkJUVVuaXQucHVzaChleHBlY3RlZCAhPSBhY3R1YWwsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOw0KCX0sDQoJDQoJZGVlcEVxdWFsOiBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7DQoJCVFVbml0LnB1c2goUVVuaXQuZXF1aXYoYWN0dWFsLCBleHBlY3RlZCksIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOw0KCX0sDQoNCglub3REZWVwRXF1YWw6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsNCgkJUVVuaXQucHVzaCghUVVuaXQuZXF1aXYoYWN0dWFsLCBleHBlY3RlZCksIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOw0KCX0sDQoNCglzdHJpY3RFcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgew0KCQlRVW5pdC5wdXNoKGV4cGVjdGVkID09PSBhY3R1YWwsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOw0KCX0sDQoNCglub3RTdHJpY3RFcXVhbDogZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgew0KCQlRVW5pdC5wdXNoKGV4cGVjdGVkICE9PSBhY3R1YWwsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpOw0KCX0sDQoNCglyYWlzZXM6IGZ1bmN0aW9uKGJsb2NrLCBleHBlY3RlZCwgbWVzc2FnZSkgew0KCQl2YXIgYWN0dWFsLCBvayA9IGZhbHNlOw0KCQ0KCQlpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJykgew0KCQkJbWVzc2FnZSA9IGV4cGVjdGVkOw0KCQkJZXhwZWN0ZWQgPSBudWxsOw0KCQl9DQoJDQoJCXRyeSB7DQoJCQlibG9jaygpOw0KCQl9IGNhdGNoIChlKSB7DQoJCQlhY3R1YWwgPSBlOw0KCQl9DQoJDQoJCWlmIChhY3R1YWwpIHsNCgkJCS8vIHdlIGRvbid0IHdhbnQgdG8gdmFsaWRhdGUgdGhyb3duIGVycm9yDQoJCQlpZiAoIWV4cGVjdGVkKSB7DQoJCQkJb2sgPSB0cnVlOw0KCQkJLy8gZXhwZWN0ZWQgaXMgYSByZWdleHAJDQoJCQl9IGVsc2UgaWYgKFFVbml0Lm9iamVjdFR5cGUoZXhwZWN0ZWQpID09PSAicmVnZXhwIikgew0KCQkJCW9rID0gZXhwZWN0ZWQudGVzdChhY3R1YWwpOw0KCQkJLy8gZXhwZWN0ZWQgaXMgYSBjb25zdHJ1Y3RvcgkNCgkJCX0gZWxzZSBpZiAoYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHsNCgkJCQlvayA9IHRydWU7DQoJCQkvLyBleHBlY3RlZCBpcyBhIHZhbGlkYXRpb24gZnVuY3Rpb24gd2hpY2ggcmV0dXJucyB0cnVlIGlzIHZhbGlkYXRpb24gcGFzc2VkCQ0KCQkJfSBlbHNlIGlmIChleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlKSB7DQoJCQkJb2sgPSB0cnVlOw0KCQkJfQ0KCQl9DQoJCQkNCgkJUVVuaXQub2sob2ssIG1lc3NhZ2UpOw0KCX0sDQoNCglzdGFydDogZnVuY3Rpb24oKSB7DQoJCWNvbmZpZy5zZW1hcGhvcmUtLTsNCgkJaWYgKGNvbmZpZy5zZW1hcGhvcmUgPiAwKSB7DQoJCQkvLyBkb24ndCBzdGFydCB1bnRpbCBlcXVhbCBudW1iZXIgb2Ygc3RvcC1jYWxscw0KCQkJcmV0dXJuOw0KCQl9DQoJCWlmIChjb25maWcuc2VtYXBob3JlIDwgMCkgew0KCQkJLy8gaWdub3JlIGlmIHN0YXJ0IGlzIGNhbGxlZCBtb3JlIG9mdGVuIHRoZW4gc3RvcA0KCQkJY29uZmlnLnNlbWFwaG9yZSA9IDA7DQoJCX0NCgkJLy8gQSBzbGlnaHQgZGVsYXksIHRvIGF2b2lkIGFueSBjdXJyZW50IGNhbGxiYWNrcw0KCQlpZiAoIGRlZmluZWQuc2V0VGltZW91dCApIHsNCgkJCXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgew0KCQkJCWlmICggY29uZmlnLnRpbWVvdXQgKSB7DQoJCQkJCWNsZWFyVGltZW91dChjb25maWcudGltZW91dCk7DQoJCQkJfQ0KDQoJCQkJY29uZmlnLmJsb2NraW5nID0gZmFsc2U7DQoJCQkJcHJvY2VzcygpOw0KCQkJfSwgMTMpOw0KCQl9IGVsc2Ugew0KCQkJY29uZmlnLmJsb2NraW5nID0gZmFsc2U7DQoJCQlwcm9jZXNzKCk7DQoJCX0NCgl9LA0KCQ0KCXN0b3A6IGZ1bmN0aW9uKHRpbWVvdXQpIHsNCgkJY29uZmlnLnNlbWFwaG9yZSsrOw0KCQljb25maWcuYmxvY2tpbmcgPSB0cnVlOw0KDQoJCWlmICggdGltZW91dCAmJiBkZWZpbmVkLnNldFRpbWVvdXQgKSB7DQoJCQljbGVhclRpbWVvdXQoY29uZmlnLnRpbWVvdXQpOw0KCQkJY29uZmlnLnRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHsNCgkJCQlRVW5pdC5vayggZmFsc2UsICJUZXN0IHRpbWVkIG91dCIgKTsNCgkJCQlRVW5pdC5zdGFydCgpOw0KCQkJfSwgdGltZW91dCk7DQoJCX0NCgl9DQoNCn07DQoNCi8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBkZXByZWNhdGVkDQpRVW5pdC5lcXVhbHMgPSBRVW5pdC5lcXVhbDsNClFVbml0LnNhbWUgPSBRVW5pdC5kZWVwRXF1YWw7DQoNCi8vIE1haW50YWluIGludGVybmFsIHN0YXRlDQp2YXIgY29uZmlnID0gew0KCS8vIFRoZSBxdWV1ZSBvZiB0ZXN0cyB0byBydW4NCglxdWV1ZTogW10sDQoNCgkvLyBibG9jayB1bnRpbCBkb2N1bWVudCByZWFkeQ0KCWJsb2NraW5nOiB0cnVlDQp9Ow0KDQovLyBMb2FkIHBhcmFtYXRlcnMNCihmdW5jdGlvbigpIHsNCgl2YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24gfHwgeyBzZWFyY2g6ICIiLCBwcm90b2NvbDogImZpbGU6IiB9LA0KCQlHRVRQYXJhbXMgPSBsb2NhdGlvbi5zZWFyY2guc2xpY2UoMSkuc3BsaXQoJyYnKTsNCg0KCWZvciAoIHZhciBpID0gMDsgaSA8IEdFVFBhcmFtcy5sZW5ndGg7IGkrKyApIHsNCgkJR0VUUGFyYW1zW2ldID0gZGVjb2RlVVJJQ29tcG9uZW50KCBHRVRQYXJhbXNbaV0gKTsNCgkJaWYgKCBHRVRQYXJhbXNbaV0gPT09ICJub2dsb2JhbHMiICkgew0KCQkJR0VUUGFyYW1zLnNwbGljZSggaSwgMSApOw0KCQkJaS0tOw0KCQkJY29uZmlnLm5vZ2xvYmFscyA9IHRydWU7DQoJCX0gZWxzZSBpZiAoIEdFVFBhcmFtc1tpXSA9PT0gIm5vdHJ5Y2F0Y2giICkgew0KCQkJR0VUUGFyYW1zLnNwbGljZSggaSwgMSApOw0KCQkJaS0tOw0KCQkJY29uZmlnLm5vdHJ5Y2F0Y2ggPSB0cnVlOw0KCQl9IGVsc2UgaWYgKCBHRVRQYXJhbXNbaV0uc2VhcmNoKCc9JykgPiAtMSApIHsNCgkJCUdFVFBhcmFtcy5zcGxpY2UoIGksIDEgKTsNCgkJCWktLTsNCgkJfQ0KCX0NCgkNCgkvLyByZXN0cmljdCBtb2R1bGVzL3Rlc3RzIGJ5IGdldCBwYXJhbWV0ZXJzDQoJY29uZmlnLmZpbHRlcnMgPSBHRVRQYXJhbXM7DQoJDQoJLy8gRmlndXJlIG91dCBpZiB3ZSdyZSBydW5uaW5nIHRoZSB0ZXN0cyBmcm9tIGEgc2VydmVyIG9yIG5vdA0KCVFVbml0LmlzTG9jYWwgPSAhIShsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2ZpbGU6Jyk7DQp9KSgpOw0KDQovLyBFeHBvc2UgdGhlIEFQSSBhcyBnbG9iYWwgdmFyaWFibGVzLCB1bmxlc3MgYW4gJ2V4cG9ydHMnDQovLyBvYmplY3QgZXhpc3RzLCBpbiB0aGF0IGNhc2Ugd2UgYXNzdW1lIHdlJ3JlIGluIENvbW1vbkpTDQppZiAoIHR5cGVvZiBleHBvcnRzID09PSAidW5kZWZpbmVkIiB8fCB0eXBlb2YgcmVxdWlyZSA9PT0gInVuZGVmaW5lZCIgKSB7DQoJZXh0ZW5kKHdpbmRvdywgUVVuaXQpOw0KCXdpbmRvdy5RVW5pdCA9IFFVbml0Ow0KfSBlbHNlIHsNCglleHRlbmQoZXhwb3J0cywgUVVuaXQpOw0KCWV4cG9ydHMuUVVuaXQgPSBRVW5pdDsNCn0NCg0KLy8gZGVmaW5lIHRoZXNlIGFmdGVyIGV4cG9zaW5nIGdsb2JhbHMgdG8ga2VlcCB0aGVtIGluIHRoZXNlIFFVbml0IG5hbWVzcGFjZSBvbmx5DQpleHRlbmQoUVVuaXQsIHsNCgljb25maWc6IGNvbmZpZywNCg0KCS8vIEluaXRpYWxpemUgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucw0KCWluaXQ6IGZ1bmN0aW9uKCkgew0KCQlleHRlbmQoY29uZmlnLCB7DQoJCQlzdGF0czogeyBhbGw6IDAsIGJhZDogMCB9LA0KCQkJbW9kdWxlU3RhdHM6IHsgYWxsOiAwLCBiYWQ6IDAgfSwNCgkJCXN0YXJ0ZWQ6ICtuZXcgRGF0ZSwNCgkJCXVwZGF0ZVJhdGU6IDEwMDAsDQoJCQlibG9ja2luZzogZmFsc2UsDQoJCQlhdXRvc3RhcnQ6IHRydWUsDQoJCQlhdXRvcnVuOiBmYWxzZSwNCgkJCWZpbHRlcnM6IFtdLA0KCQkJcXVldWU6IFtdLA0KCQkJc2VtYXBob3JlOiAwDQoJCX0pOw0KDQoJCXZhciB0ZXN0cyA9IGlkKCJxdW5pdC10ZXN0cyIpLA0KCQkJYmFubmVyID0gaWQoInF1bml0LWJhbm5lciIpLA0KCQkJcmVzdWx0ID0gaWQoInF1bml0LXRlc3RyZXN1bHQiKTsNCg0KCQlpZiAoIHRlc3RzICkgew0KCQkJdGVzdHMuaW5uZXJIVE1MID0gIiI7DQoJCX0NCg0KCQlpZiAoIGJhbm5lciApIHsNCgkJCWJhbm5lci5jbGFzc05hbWUgPSAiIjsNCgkJfQ0KDQoJCWlmICggcmVzdWx0ICkgew0KCQkJcmVzdWx0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHJlc3VsdCApOw0KCQl9DQoJfSwNCgkNCgkvKioNCgkgKiBSZXNldHMgdGhlIHRlc3Qgc2V0dXAuIFVzZWZ1bCBmb3IgdGVzdHMgdGhhdCBtb2RpZnkgdGhlIERPTS4NCgkgKiANCgkgKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCB1c2VzIGpRdWVyeSdzIGh0bWwoKSwgb3RoZXJ3aXNlIGp1c3QgaW5uZXJIVE1MLg0KCSAqLw0KCXJlc2V0OiBmdW5jdGlvbigpIHsNCgkJaWYgKCB3aW5kb3cualF1ZXJ5ICkgew0KCQkJalF1ZXJ5KCAiI21haW4sICNxdW5pdC1maXh0dXJlIiApLmh0bWwoIGNvbmZpZy5maXh0dXJlICk7DQoJCX0gZWxzZSB7DQoJCQl2YXIgbWFpbiA9IGlkKCAnbWFpbicgKSB8fCBpZCggJ3F1bml0LWZpeHR1cmUnICk7DQoJCQlpZiAoIG1haW4gKSB7DQoJCQkJbWFpbi5pbm5lckhUTUwgPSBjb25maWcuZml4dHVyZTsNCgkJCX0NCgkJfQ0KCX0sDQoJDQoJLyoqDQoJICogVHJpZ2dlciBhbiBldmVudCBvbiBhbiBlbGVtZW50Lg0KCSAqDQoJICogQGV4YW1wbGUgdHJpZ2dlckV2ZW50KCBkb2N1bWVudC5ib2R5LCAiY2xpY2siICk7DQoJICoNCgkgKiBAcGFyYW0gRE9NRWxlbWVudCBlbGVtDQoJICogQHBhcmFtIFN0cmluZyB0eXBlDQoJICovDQoJdHJpZ2dlckV2ZW50OiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZXZlbnQgKSB7DQoJCWlmICggZG9jdW1lbnQuY3JlYXRlRXZlbnQgKSB7DQoJCQlldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCJNb3VzZUV2ZW50cyIpOw0KCQkJZXZlbnQuaW5pdE1vdXNlRXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSwgZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LA0KCQkJCTAsIDAsIDAsIDAsIDAsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTsNCgkJCWVsZW0uZGlzcGF0Y2hFdmVudCggZXZlbnQgKTsNCg0KCQl9IGVsc2UgaWYgKCBlbGVtLmZpcmVFdmVudCApIHsNCgkJCWVsZW0uZmlyZUV2ZW50KCJvbiIrdHlwZSk7DQoJCX0NCgl9LA0KCQ0KCS8vIFNhZmUgb2JqZWN0IHR5cGUgY2hlY2tpbmcNCglpczogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHsNCgkJcmV0dXJuIFFVbml0Lm9iamVjdFR5cGUoIG9iaiApID09IHR5cGU7DQoJfSwNCgkNCglvYmplY3RUeXBlOiBmdW5jdGlvbiggb2JqICkgew0KCQlpZiAodHlwZW9mIG9iaiA9PT0gInVuZGVmaW5lZCIpIHsNCgkJCQlyZXR1cm4gInVuZGVmaW5lZCI7DQoNCgkJLy8gY29uc2lkZXI6IHR5cGVvZiBudWxsID09PSBvYmplY3QNCgkJfQ0KCQlpZiAob2JqID09PSBudWxsKSB7DQoJCQkJcmV0dXJuICJudWxsIjsNCgkJfQ0KDQoJCXZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCBvYmogKQ0KCQkJLm1hdGNoKC9eXFtvYmplY3RccyguKilcXSQvKVsxXSB8fCAnJzsNCg0KCQlzd2l0Y2ggKHR5cGUpIHsNCgkJCQljYXNlICdOdW1iZXInOg0KCQkJCQkJaWYgKGlzTmFOKG9iaikpIHsNCgkJCQkJCQkJcmV0dXJuICJuYW4iOw0KCQkJCQkJfSBlbHNlIHsNCgkJCQkJCQkJcmV0dXJuICJudW1iZXIiOw0KCQkJCQkJfQ0KCQkJCWNhc2UgJ1N0cmluZyc6DQoJCQkJY2FzZSAnQm9vbGVhbic6DQoJCQkJY2FzZSAnQXJyYXknOg0KCQkJCWNhc2UgJ0RhdGUnOg0KCQkJCWNhc2UgJ1JlZ0V4cCc6DQoJCQkJY2FzZSAnRnVuY3Rpb24nOg0KCQkJCQkJcmV0dXJuIHR5cGUudG9Mb3dlckNhc2UoKTsNCgkJfQ0KCQlpZiAodHlwZW9mIG9iaiA9PT0gIm9iamVjdCIpIHsNCgkJCQlyZXR1cm4gIm9iamVjdCI7DQoJCX0NCgkJcmV0dXJuIHVuZGVmaW5lZDsNCgl9LA0KCQ0KCXB1c2g6IGZ1bmN0aW9uKHJlc3VsdCwgYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgew0KCQl2YXIgZGV0YWlscyA9IHsNCgkJCXJlc3VsdDogcmVzdWx0LA0KCQkJbWVzc2FnZTogbWVzc2FnZSwNCgkJCWFjdHVhbDogYWN0dWFsLA0KCQkJZXhwZWN0ZWQ6IGV4cGVjdGVkDQoJCX07DQoJCQ0KCQltZXNzYWdlID0gZXNjYXBlSHRtbChtZXNzYWdlKSB8fCAocmVzdWx0ID8gIm9rYXkiIDogImZhaWxlZCIpOw0KCQltZXNzYWdlID0gJzxzcGFuIGNsYXNzPSJ0ZXN0LW1lc3NhZ2UiPicgKyBtZXNzYWdlICsgIjwvc3Bhbj4iOw0KCQlleHBlY3RlZCA9IGVzY2FwZUh0bWwoUVVuaXQuanNEdW1wLnBhcnNlKGV4cGVjdGVkKSk7DQoJCWFjdHVhbCA9IGVzY2FwZUh0bWwoUVVuaXQuanNEdW1wLnBhcnNlKGFjdHVhbCkpOw0KCQl2YXIgb3V0cHV0ID0gbWVzc2FnZSArICc8dGFibGU+PHRyIGNsYXNzPSJ0ZXN0LWV4cGVjdGVkIj48dGg+RXhwZWN0ZWQ6IDwvdGg+PHRkPjxwcmU+JyArIGV4cGVjdGVkICsgJzwvcHJlPjwvdGQ+PC90cj4nOw0KCQlpZiAoYWN0dWFsICE9IGV4cGVjdGVkKSB7DQoJCQlvdXRwdXQgKz0gJzx0ciBjbGFzcz0idGVzdC1hY3R1YWwiPjx0aD5SZXN1bHQ6IDwvdGg+PHRkPjxwcmU+JyArIGFjdHVhbCArICc8L3ByZT48L3RkPjwvdHI+JzsNCgkJCW91dHB1dCArPSAnPHRyIGNsYXNzPSJ0ZXN0LWRpZmYiPjx0aD5EaWZmOiA8L3RoPjx0ZD48cHJlPicgKyBRVW5pdC5kaWZmKGV4cGVjdGVkLCBhY3R1YWwpICsnPC9wcmU+PC90ZD48L3RyPic7DQoJCX0NCgkJaWYgKCFyZXN1bHQpIHsNCgkJCXZhciBzb3VyY2UgPSBzb3VyY2VGcm9tU3RhY2t0cmFjZSgpOw0KCQkJaWYgKHNvdXJjZSkgew0KCQkJCWRldGFpbHMuc291cmNlID0gc291cmNlOw0KCQkJCW91dHB1dCArPSAnPHRyIGNsYXNzPSJ0ZXN0LXNvdXJjZSI+PHRoPlNvdXJjZTogPC90aD48dGQ+PHByZT4nICsgc291cmNlICsnPC9wcmU+PC90ZD48L3RyPic7DQoJCQl9DQoJCX0NCgkJb3V0cHV0ICs9ICI8L3RhYmxlPiI7DQoJCQ0KCQlRVW5pdC5sb2coZGV0YWlscyk7DQoJCQ0KCQljb25maWcuY3VycmVudC5hc3NlcnRpb25zLnB1c2goew0KCQkJcmVzdWx0OiAhIXJlc3VsdCwNCgkJCW1lc3NhZ2U6IG91dHB1dA0KCQl9KTsNCgl9LA0KCQ0KCS8vIExvZ2dpbmcgY2FsbGJhY2tzOyBhbGwgcmVjZWl2ZSBhIHNpbmdsZSBhcmd1bWVudCB3aXRoIHRoZSBsaXN0ZWQgcHJvcGVydGllcw0KCS8vIHJ1biB0ZXN0L2xvZ3MuaHRtbCBmb3IgYW55IHJlbGF0ZWQgY2hhbmdlcw0KCWJlZ2luOiBmdW5jdGlvbigpIHt9LA0KCS8vIGRvbmU6IHsgZmFpbGVkLCBwYXNzZWQsIHRvdGFsLCBydW50aW1lIH0NCglkb25lOiBmdW5jdGlvbigpIHt9LA0KCS8vIGxvZzogeyByZXN1bHQsIGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UgfQ0KCWxvZzogZnVuY3Rpb24oKSB7fSwNCgkvLyB0ZXN0U3RhcnQ6IHsgbmFtZSB9DQoJdGVzdFN0YXJ0OiBmdW5jdGlvbigpIHt9LA0KCS8vIHRlc3REb25lOiB7IG5hbWUsIGZhaWxlZCwgcGFzc2VkLCB0b3RhbCB9DQoJdGVzdERvbmU6IGZ1bmN0aW9uKCkge30sDQoJLy8gbW9kdWxlU3RhcnQ6IHsgbmFtZSB9DQoJbW9kdWxlU3RhcnQ6IGZ1bmN0aW9uKCkge30sDQoJLy8gbW9kdWxlRG9uZTogeyBuYW1lLCBmYWlsZWQsIHBhc3NlZCwgdG90YWwgfQ0KCW1vZHVsZURvbmU6IGZ1bmN0aW9uKCkge30NCn0pOw0KDQppZiAoIHR5cGVvZiBkb2N1bWVudCA9PT0gInVuZGVmaW5lZCIgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gImNvbXBsZXRlIiApIHsNCgljb25maWcuYXV0b3J1biA9IHRydWU7DQp9DQoNCmFkZEV2ZW50KHdpbmRvdywgImxvYWQiLCBmdW5jdGlvbigpIHsNCglRVW5pdC5iZWdpbih7fSk7DQoJDQoJLy8gSW5pdGlhbGl6ZSB0aGUgY29uZmlnLCBzYXZpbmcgdGhlIGV4ZWN1dGlvbiBxdWV1ZQ0KCXZhciBvbGRjb25maWcgPSBleHRlbmQoe30sIGNvbmZpZyk7DQoJUVVuaXQuaW5pdCgpOw0KCWV4dGVuZChjb25maWcsIG9sZGNvbmZpZyk7DQoNCgljb25maWcuYmxvY2tpbmcgPSBmYWxzZTsNCg0KCXZhciB1c2VyQWdlbnQgPSBpZCgicXVuaXQtdXNlckFnZW50Iik7DQoJaWYgKCB1c2VyQWdlbnQgKSB7DQoJCXVzZXJBZ2VudC5pbm5lckhUTUwgPSBuYXZpZ2F0b3IudXNlckFnZW50Ow0KCX0NCgl2YXIgYmFubmVyID0gaWQoInF1bml0LWhlYWRlciIpOw0KCWlmICggYmFubmVyICkgew0KCQl2YXIgcGFyYW1zSW5kZXggPSBsb2NhdGlvbi5ocmVmLmxhc3RJbmRleE9mKGxvY2F0aW9uLnNlYXJjaCk7DQoJCWlmICggcGFyYW1zSW5kZXggPiAtMSApIHsNCgkJCXZhciBtYWluUGFnZUxvY2F0aW9uID0gbG9jYXRpb24uaHJlZi5zbGljZSgwLCBwYXJhbXNJbmRleCk7DQoJCQlpZiAoIG1haW5QYWdlTG9jYXRpb24gPT0gbG9jYXRpb24uaHJlZiApIHsNCgkJCQliYW5uZXIuaW5uZXJIVE1MID0gJzxhIGhyZWY9IiI+ICcgKyBiYW5uZXIuaW5uZXJIVE1MICsgJzwvYT4gJzsNCgkJCX0gZWxzZSB7DQoJCQkJdmFyIHRlc3ROYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLnNlYXJjaC5zbGljZSgxKSk7DQoJCQkJYmFubmVyLmlubmVySFRNTCA9ICc8YSBocmVmPSInICsgbWFpblBhZ2VMb2NhdGlvbiArICciPicgKyBiYW5uZXIuaW5uZXJIVE1MICsgJzwvYT4gJiM4MjUwOyA8YSBocmVmPSIiPicgKyB0ZXN0TmFtZSArICc8L2E+JzsNCgkJCX0NCgkJfQ0KCX0NCgkNCgl2YXIgdG9vbGJhciA9IGlkKCJxdW5pdC10ZXN0cnVubmVyLXRvb2xiYXIiKTsNCglpZiAoIHRvb2xiYXIgKSB7DQoJCXZhciBmaWx0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOw0KCQlmaWx0ZXIudHlwZSA9ICJjaGVja2JveCI7DQoJCWZpbHRlci5pZCA9ICJxdW5pdC1maWx0ZXItcGFzcyI7DQoJCWFkZEV2ZW50KCBmaWx0ZXIsICJjbGljayIsIGZ1bmN0aW9uKCkgew0KCQkJdmFyIGxpID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImxpIik7DQoJCQlmb3IgKCB2YXIgaSA9IDA7IGkgPCBsaS5sZW5ndGg7IGkrKyApIHsNCgkJCQlpZiAoIGxpW2ldLmNsYXNzTmFtZS5pbmRleE9mKCJwYXNzIikgPiAtMSApIHsNCgkJCQkJbGlbaV0uc3R5bGUuZGlzcGxheSA9IGZpbHRlci5jaGVja2VkID8gIm5vbmUiIDogIiI7DQoJCQkJfQ0KCQkJfQ0KCQkJaWYgKCBkZWZpbmVkLnNlc3Npb25TdG9yYWdlICkgew0KCQkJCXNlc3Npb25TdG9yYWdlLnNldEl0ZW0oInF1bml0LWZpbHRlci1wYXNzZWQtdGVzdHMiLCBmaWx0ZXIuY2hlY2tlZCA/ICJ0cnVlIiA6ICIiKTsNCgkJCX0NCgkJfSk7DQoJCWlmICggZGVmaW5lZC5zZXNzaW9uU3RvcmFnZSAmJiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJxdW5pdC1maWx0ZXItcGFzc2VkLXRlc3RzIikgKSB7DQoJCQlmaWx0ZXIuY2hlY2tlZCA9IHRydWU7DQoJCX0NCgkJdG9vbGJhci5hcHBlbmRDaGlsZCggZmlsdGVyICk7DQoNCgkJdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsNCgkJbGFiZWwuc2V0QXR0cmlidXRlKCJmb3IiLCAicXVuaXQtZmlsdGVyLXBhc3MiKTsNCgkJbGFiZWwuaW5uZXJIVE1MID0gIkhpZGUgcGFzc2VkIHRlc3RzIjsNCgkJdG9vbGJhci5hcHBlbmRDaGlsZCggbGFiZWwgKTsNCgl9DQoNCgl2YXIgbWFpbiA9IGlkKCdtYWluJykgfHwgaWQoJ3F1bml0LWZpeHR1cmUnKTsNCglpZiAoIG1haW4gKSB7DQoJCWNvbmZpZy5maXh0dXJlID0gbWFpbi5pbm5lckhUTUw7DQoJfQ0KDQoJaWYgKGNvbmZpZy5hdXRvc3RhcnQpIHsNCgkJUVVuaXQuc3RhcnQoKTsNCgl9DQp9KTsNCg0KZnVuY3Rpb24gZG9uZSgpIHsNCgljb25maWcuYXV0b3J1biA9IHRydWU7DQoNCgkvLyBMb2cgdGhlIGxhc3QgbW9kdWxlIHJlc3VsdHMNCglpZiAoIGNvbmZpZy5jdXJyZW50TW9kdWxlICkgew0KCQlRVW5pdC5tb2R1bGVEb25lKCB7DQoJCQluYW1lOiBjb25maWcuY3VycmVudE1vZHVsZSwNCgkJCWZhaWxlZDogY29uZmlnLm1vZHVsZVN0YXRzLmJhZCwNCgkJCXBhc3NlZDogY29uZmlnLm1vZHVsZVN0YXRzLmFsbCAtIGNvbmZpZy5tb2R1bGVTdGF0cy5iYWQsDQoJCQl0b3RhbDogY29uZmlnLm1vZHVsZVN0YXRzLmFsbA0KCQl9ICk7DQoJfQ0KDQoJdmFyIGJhbm5lciA9IGlkKCJxdW5pdC1iYW5uZXIiKSwNCgkJdGVzdHMgPSBpZCgicXVuaXQtdGVzdHMiKSwNCgkJcnVudGltZSA9ICtuZXcgRGF0ZSAtIGNvbmZpZy5zdGFydGVkLA0KCQlwYXNzZWQgPSBjb25maWcuc3RhdHMuYWxsIC0gY29uZmlnLnN0YXRzLmJhZCwNCgkJaHRtbCA9IFsNCgkJCSdUZXN0cyBjb21wbGV0ZWQgaW4gJywNCgkJCXJ1bnRpbWUsDQoJCQknIG1pbGxpc2Vjb25kcy48YnIvPicsDQoJCQknPHNwYW4gY2xhc3M9InBhc3NlZCI+JywNCgkJCXBhc3NlZCwNCgkJCSc8L3NwYW4+IHRlc3RzIG9mIDxzcGFuIGNsYXNzPSJ0b3RhbCI+JywNCgkJCWNvbmZpZy5zdGF0cy5hbGwsDQoJCQknPC9zcGFuPiBwYXNzZWQsIDxzcGFuIGNsYXNzPSJmYWlsZWQiPicsDQoJCQljb25maWcuc3RhdHMuYmFkLA0KCQkJJzwvc3Bhbj4gZmFpbGVkLicNCgkJXS5qb2luKCcnKTsNCg0KCWlmICggYmFubmVyICkgew0KCQliYW5uZXIuY2xhc3NOYW1lID0gKGNvbmZpZy5zdGF0cy5iYWQgPyAicXVuaXQtZmFpbCIgOiAicXVuaXQtcGFzcyIpOw0KCX0NCg0KCWlmICggdGVzdHMgKSB7CQ0KCQl2YXIgcmVzdWx0ID0gaWQoInF1bml0LXRlc3RyZXN1bHQiKTsNCg0KCQlpZiAoICFyZXN1bHQgKSB7DQoJCQlyZXN1bHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJwIik7DQoJCQlyZXN1bHQuaWQgPSAicXVuaXQtdGVzdHJlc3VsdCI7DQoJCQlyZXN1bHQuY2xhc3NOYW1lID0gInJlc3VsdCI7DQoJCQl0ZXN0cy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggcmVzdWx0LCB0ZXN0cy5uZXh0U2libGluZyApOw0KCQl9DQoNCgkJcmVzdWx0LmlubmVySFRNTCA9IGh0bWw7DQoJfQ0KDQoJUVVuaXQuZG9uZSggew0KCQlmYWlsZWQ6IGNvbmZpZy5zdGF0cy5iYWQsDQoJCXBhc3NlZDogcGFzc2VkLCANCgkJdG90YWw6IGNvbmZpZy5zdGF0cy5hbGwsDQoJCXJ1bnRpbWU6IHJ1bnRpbWUNCgl9ICk7DQp9DQoNCmZ1bmN0aW9uIHZhbGlkVGVzdCggbmFtZSApIHsNCgl2YXIgaSA9IGNvbmZpZy5maWx0ZXJzLmxlbmd0aCwNCgkJcnVuID0gZmFsc2U7DQoNCglpZiAoICFpICkgew0KCQlyZXR1cm4gdHJ1ZTsNCgl9DQoJDQoJd2hpbGUgKCBpLS0gKSB7DQoJCXZhciBmaWx0ZXIgPSBjb25maWcuZmlsdGVyc1tpXSwNCgkJCW5vdCA9IGZpbHRlci5jaGFyQXQoMCkgPT0gJyEnOw0KDQoJCWlmICggbm90ICkgew0KCQkJZmlsdGVyID0gZmlsdGVyLnNsaWNlKDEpOw0KCQl9DQoNCgkJaWYgKCBuYW1lLmluZGV4T2YoZmlsdGVyKSAhPT0gLTEgKSB7DQoJCQlyZXR1cm4gIW5vdDsNCgkJfQ0KDQoJCWlmICggbm90ICkgew0KCQkJcnVuID0gdHJ1ZTsNCgkJfQ0KCX0NCg0KCXJldHVybiBydW47DQp9DQoNCi8vIHNvIGZhciBzdXBwb3J0cyBvbmx5IEZpcmVmb3gsIENocm9tZSBhbmQgT3BlcmEgKGJ1Z2d5KQ0KLy8gY291bGQgYmUgZXh0ZW5kZWQgaW4gdGhlIGZ1dHVyZSB0byB1c2Ugc29tZXRoaW5nIGxpa2UgaHR0cHM6Ly9naXRodWIuY29tL2Nzbm92ZXIvVHJhY2VLaXQNCmZ1bmN0aW9uIHNvdXJjZUZyb21TdGFja3RyYWNlKCkgew0KCXRyeSB7DQoJCXRocm93IG5ldyBFcnJvcigpOw0KCX0gY2F0Y2ggKCBlICkgew0KCQlpZiAoZS5zdGFja3RyYWNlKSB7DQoJCQkvLyBPcGVyYQ0KCQkJcmV0dXJuIGUuc3RhY2t0cmFjZS5zcGxpdCgiXG4iKVs2XTsNCgkJfSBlbHNlIGlmIChlLnN0YWNrKSB7DQoJCQkvLyBGaXJlZm94LCBDaHJvbWUNCgkJCXJldHVybiBlLnN0YWNrLnNwbGl0KCJcbiIpWzRdOw0KCQl9DQoJfQ0KfQ0KDQpmdW5jdGlvbiByZXN1bHREaXNwbGF5U3R5bGUocGFzc2VkKSB7DQoJcmV0dXJuIHBhc3NlZCAmJiBpZCgicXVuaXQtZmlsdGVyLXBhc3MiKSAmJiBpZCgicXVuaXQtZmlsdGVyLXBhc3MiKS5jaGVja2VkID8gJ25vbmUnIDogJyc7DQp9DQoNCmZ1bmN0aW9uIGVzY2FwZUh0bWwocykgew0KCWlmICghcykgew0KCQlyZXR1cm4gIiI7DQoJfQ0KCXMgPSBzICsgIiI7DQoJcmV0dXJuIHMucmVwbGFjZSgvW1wmIjw+XFxdL2csIGZ1bmN0aW9uKHMpIHsNCgkJc3dpdGNoKHMpIHsNCgkJCWNhc2UgIiYiOiByZXR1cm4gIiZhbXA7IjsNCgkJCWNhc2UgIlxcIjogcmV0dXJuICJcXFxcIjsNCgkJCWNhc2UgJyInOiByZXR1cm4gJ1wiJzsNCgkJCWNhc2UgIjwiOiByZXR1cm4gIiZsdDsiOw0KCQkJY2FzZSAiPiI6IHJldHVybiAiJmd0OyI7DQoJCQlkZWZhdWx0OiByZXR1cm4gczsNCgkJfQ0KCX0pOw0KfQ0KDQpmdW5jdGlvbiBzeW5jaHJvbml6ZSggY2FsbGJhY2sgKSB7DQoJY29uZmlnLnF1ZXVlLnB1c2goIGNhbGxiYWNrICk7DQoNCglpZiAoIGNvbmZpZy5hdXRvcnVuICYmICFjb25maWcuYmxvY2tpbmcgKSB7DQoJCXByb2Nlc3MoKTsNCgl9DQp9DQoNCmZ1bmN0aW9uIHByb2Nlc3MoKSB7DQoJdmFyIHN0YXJ0ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsNCg0KCXdoaWxlICggY29uZmlnLnF1ZXVlLmxlbmd0aCAmJiAhY29uZmlnLmJsb2NraW5nICkgew0KCQlpZiAoIGNvbmZpZy51cGRhdGVSYXRlIDw9IDAgfHwgKCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gc3RhcnQpIDwgY29uZmlnLnVwZGF0ZVJhdGUpICkgew0KCQkJY29uZmlnLnF1ZXVlLnNoaWZ0KCkoKTsNCgkJfSBlbHNlIHsNCgkJCXdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzLCAxMyApOw0KCQkJYnJlYWs7DQoJCX0NCgl9DQogIGlmICghY29uZmlnLmJsb2NraW5nICYmICFjb25maWcucXVldWUubGVuZ3RoKSB7DQogICAgZG9uZSgpOw0KICB9DQp9DQoNCmZ1bmN0aW9uIHNhdmVHbG9iYWwoKSB7DQoJY29uZmlnLnBvbGx1dGlvbiA9IFtdOw0KCQ0KCWlmICggY29uZmlnLm5vZ2xvYmFscyApIHsNCgkJZm9yICggdmFyIGtleSBpbiB3aW5kb3cgKSB7DQoJCQljb25maWcucG9sbHV0aW9uLnB1c2goIGtleSApOw0KCQl9DQoJfQ0KfQ0KDQpmdW5jdGlvbiBjaGVja1BvbGx1dGlvbiggbmFtZSApIHsNCgl2YXIgb2xkID0gY29uZmlnLnBvbGx1dGlvbjsNCglzYXZlR2xvYmFsKCk7DQoJDQoJdmFyIG5ld0dsb2JhbHMgPSBkaWZmKCBvbGQsIGNvbmZpZy5wb2xsdXRpb24gKTsNCglpZiAoIG5ld0dsb2JhbHMubGVuZ3RoID4gMCApIHsNCgkJb2soIGZhbHNlLCAiSW50cm9kdWNlZCBnbG9iYWwgdmFyaWFibGUocyk6ICIgKyBuZXdHbG9iYWxzLmpvaW4oIiwgIikgKTsNCgkJY29uZmlnLmN1cnJlbnQuZXhwZWN0ZWQrKzsNCgl9DQoNCgl2YXIgZGVsZXRlZEdsb2JhbHMgPSBkaWZmKCBjb25maWcucG9sbHV0aW9uLCBvbGQgKTsNCglpZiAoIGRlbGV0ZWRHbG9iYWxzLmxlbmd0aCA+IDAgKSB7DQoJCW9rKCBmYWxzZSwgIkRlbGV0ZWQgZ2xvYmFsIHZhcmlhYmxlKHMpOiAiICsgZGVsZXRlZEdsb2JhbHMuam9pbigiLCAiKSApOw0KCQljb25maWcuY3VycmVudC5leHBlY3RlZCsrOw0KCX0NCn0NCg0KLy8gcmV0dXJucyBhIG5ldyBBcnJheSB3aXRoIHRoZSBlbGVtZW50cyB0aGF0IGFyZSBpbiBhIGJ1dCBub3QgaW4gYg0KZnVuY3Rpb24gZGlmZiggYSwgYiApIHsNCgl2YXIgcmVzdWx0ID0gYS5zbGljZSgpOw0KCWZvciAoIHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKyApIHsNCgkJZm9yICggdmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGorKyApIHsNCgkJCWlmICggcmVzdWx0W2ldID09PSBiW2pdICkgew0KCQkJCXJlc3VsdC5zcGxpY2UoaSwgMSk7DQoJCQkJaS0tOw0KCQkJCWJyZWFrOw0KCQkJfQ0KCQl9DQoJfQ0KCXJldHVybiByZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIGZhaWwobWVzc2FnZSwgZXhjZXB0aW9uLCBjYWxsYmFjaykgew0KCWlmICggdHlwZW9mIGNvbnNvbGUgIT09ICJ1bmRlZmluZWQiICYmIGNvbnNvbGUuZXJyb3IgJiYgY29uc29sZS53YXJuICkgew0KCQljb25zb2xlLmVycm9yKG1lc3NhZ2UpOw0KCQljb25zb2xlLmVycm9yKGV4Y2VwdGlvbik7DQoJCWNvbnNvbGUud2FybihjYWxsYmFjay50b1N0cmluZygpKTsNCg0KCX0gZWxzZSBpZiAoIHdpbmRvdy5vcGVyYSAmJiBvcGVyYS5wb3N0RXJyb3IgKSB7DQoJCW9wZXJhLnBvc3RFcnJvcihtZXNzYWdlLCBleGNlcHRpb24sIGNhbGxiYWNrLnRvU3RyaW5nKTsNCgl9DQp9DQoNCmZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7DQoJZm9yICggdmFyIHByb3AgaW4gYiApIHsNCgkJYVtwcm9wXSA9IGJbcHJvcF07DQoJfQ0KDQoJcmV0dXJuIGE7DQp9DQoNCmZ1bmN0aW9uIGFkZEV2ZW50KGVsZW0sIHR5cGUsIGZuKSB7DQoJaWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7DQoJCWVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZm4sIGZhbHNlICk7DQoJfSBlbHNlIGlmICggZWxlbS5hdHRhY2hFdmVudCApIHsNCgkJZWxlbS5hdHRhY2hFdmVudCggIm9uIiArIHR5cGUsIGZuICk7DQoJfSBlbHNlIHsNCgkJZm4oKTsNCgl9DQp9DQoNCmZ1bmN0aW9uIGlkKG5hbWUpIHsNCglyZXR1cm4gISEodHlwZW9mIGRvY3VtZW50ICE9PSAidW5kZWZpbmVkIiAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCkgJiYNCgkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG5hbWUgKTsNCn0NCg0KLy8gVGVzdCBmb3IgZXF1YWxpdHkgYW55IEphdmFTY3JpcHQgdHlwZS4NCi8vIERpc2N1c3Npb25zIGFuZCByZWZlcmVuY2U6IGh0dHA6Ly9waGlscmF0aGUuY29tL2FydGljbGVzL2VxdWl2DQovLyBUZXN0IHN1aXRlczogaHR0cDovL3BoaWxyYXRoZS5jb20vdGVzdHMvZXF1aXYNCi8vIEF1dGhvcjogUGhpbGlwcGUgUmF0aMOpIDxwcmF0aGVAZ21haWwuY29tPg0KUVVuaXQuZXF1aXYgPSBmdW5jdGlvbiAoKSB7DQoNCiAgICB2YXIgaW5uZXJFcXVpdjsgLy8gdGhlIHJlYWwgZXF1aXYgZnVuY3Rpb24NCiAgICB2YXIgY2FsbGVycyA9IFtdOyAvLyBzdGFjayB0byBkZWNpZGUgYmV0d2VlbiBza2lwL2Fib3J0IGZ1bmN0aW9ucw0KICAgIHZhciBwYXJlbnRzID0gW107IC8vIHN0YWNrIHRvIGF2b2lkaW5nIGxvb3BzIGZyb20gY2lyY3VsYXIgcmVmZXJlbmNpbmcNCg0KICAgIC8vIENhbGwgdGhlIG8gcmVsYXRlZCBjYWxsYmFjayB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHMuDQogICAgZnVuY3Rpb24gYmluZENhbGxiYWNrcyhvLCBjYWxsYmFja3MsIGFyZ3MpIHsNCiAgICAgICAgdmFyIHByb3AgPSBRVW5pdC5vYmplY3RUeXBlKG8pOw0KICAgICAgICBpZiAocHJvcCkgew0KICAgICAgICAgICAgaWYgKFFVbml0Lm9iamVjdFR5cGUoY2FsbGJhY2tzW3Byb3BdKSA9PT0gImZ1bmN0aW9uIikgew0KICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFja3NbcHJvcF0uYXBwbHkoY2FsbGJhY2tzLCBhcmdzKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrc1twcm9wXTsgLy8gb3IgdW5kZWZpbmVkDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgdmFyIGNhbGxiYWNrcyA9IGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAvLyBmb3Igc3RyaW5nLCBib29sZWFuLCBudW1iZXIgYW5kIG51bGwNCiAgICAgICAgZnVuY3Rpb24gdXNlU3RyaWN0RXF1YWxpdHkoYiwgYSkgew0KICAgICAgICAgICAgaWYgKGIgaW5zdGFuY2VvZiBhLmNvbnN0cnVjdG9yIHx8IGEgaW5zdGFuY2VvZiBiLmNvbnN0cnVjdG9yKSB7DQogICAgICAgICAgICAgICAgLy8gdG8gY2F0Y2ggc2hvcnQgYW5ub3RhaW9uIFZTICduZXcnIGFubm90YXRpb24gb2YgYSBkZWNsYXJhdGlvbg0KICAgICAgICAgICAgICAgIC8vIGUuZy4gdmFyIGkgPSAxOw0KICAgICAgICAgICAgICAgIC8vICAgICAgdmFyIGogPSBuZXcgTnVtYmVyKDEpOw0KICAgICAgICAgICAgICAgIHJldHVybiBhID09IGI7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiBhID09PSBiOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICJzdHJpbmciOiB1c2VTdHJpY3RFcXVhbGl0eSwNCiAgICAgICAgICAgICJib29sZWFuIjogdXNlU3RyaWN0RXF1YWxpdHksDQogICAgICAgICAgICAibnVtYmVyIjogdXNlU3RyaWN0RXF1YWxpdHksDQogICAgICAgICAgICAibnVsbCI6IHVzZVN0cmljdEVxdWFsaXR5LA0KICAgICAgICAgICAgInVuZGVmaW5lZCI6IHVzZVN0cmljdEVxdWFsaXR5LA0KDQogICAgICAgICAgICAibmFuIjogZnVuY3Rpb24gKGIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gaXNOYU4oYik7DQogICAgICAgICAgICB9LA0KDQogICAgICAgICAgICAiZGF0ZSI6IGZ1bmN0aW9uIChiLCBhKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFFVbml0Lm9iamVjdFR5cGUoYikgPT09ICJkYXRlIiAmJiBhLnZhbHVlT2YoKSA9PT0gYi52YWx1ZU9mKCk7DQogICAgICAgICAgICB9LA0KDQogICAgICAgICAgICAicmVnZXhwIjogZnVuY3Rpb24gKGIsIGEpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gUVVuaXQub2JqZWN0VHlwZShiKSA9PT0gInJlZ2V4cCIgJiYNCiAgICAgICAgICAgICAgICAgICAgYS5zb3VyY2UgPT09IGIuc291cmNlICYmIC8vIHRoZSByZWdleCBpdHNlbGYNCiAgICAgICAgICAgICAgICAgICAgYS5nbG9iYWwgPT09IGIuZ2xvYmFsICYmIC8vIGFuZCBpdHMgbW9kaWZlcnMgKGdtaSkgLi4uDQogICAgICAgICAgICAgICAgICAgIGEuaWdub3JlQ2FzZSA9PT0gYi5pZ25vcmVDYXNlICYmDQogICAgICAgICAgICAgICAgICAgIGEubXVsdGlsaW5lID09PSBiLm11bHRpbGluZTsNCiAgICAgICAgICAgIH0sDQoNCiAgICAgICAgICAgIC8vIC0gc2tpcCB3aGVuIHRoZSBwcm9wZXJ0eSBpcyBhIG1ldGhvZCBvZiBhbiBpbnN0YW5jZSAoT09QKQ0KICAgICAgICAgICAgLy8gLSBhYm9ydCBvdGhlcndpc2UsDQogICAgICAgICAgICAvLyAgIGluaXRpYWwgPT09IHdvdWxkIGhhdmUgY2F0Y2ggaWRlbnRpY2FsIHJlZmVyZW5jZXMgYW55d2F5DQogICAgICAgICAgICAiZnVuY3Rpb24iOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgdmFyIGNhbGxlciA9IGNhbGxlcnNbY2FsbGVycy5sZW5ndGggLSAxXTsNCiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGVyICE9PSBPYmplY3QgJiYNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBjYWxsZXIgIT09ICJ1bmRlZmluZWQiOw0KICAgICAgICAgICAgfSwNCg0KICAgICAgICAgICAgImFycmF5IjogZnVuY3Rpb24gKGIsIGEpIHsNCiAgICAgICAgICAgICAgICB2YXIgaSwgaiwgbG9vcDsNCiAgICAgICAgICAgICAgICB2YXIgbGVuOw0KDQogICAgICAgICAgICAgICAgLy8gYiBjb3VsZCBiZSBhbiBvYmplY3QgbGl0ZXJhbCBoZXJlDQogICAgICAgICAgICAgICAgaWYgKCAhIChRVW5pdC5vYmplY3RUeXBlKGIpID09PSAiYXJyYXkiKSkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfSAgIA0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxlbiA9IGEubGVuZ3RoOw0KICAgICAgICAgICAgICAgIGlmIChsZW4gIT09IGIubGVuZ3RoKSB7IC8vIHNhZmUgYW5kIGZhc3Rlcg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIC8vdHJhY2sgcmVmZXJlbmNlIHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMNCiAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2goYSk7DQogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgIGxvb3AgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgZm9yKGo9MDtqPHBhcmVudHMubGVuZ3RoO2orKyl7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihwYXJlbnRzW2pdID09PSBhW2ldKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wID0gdHJ1ZTsvL2RvbnQgcmV3YWxrIGFycmF5DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKCFsb29wICYmICEgaW5uZXJFcXVpdihhW2ldLCBiW2ldKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50cy5wb3AoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBwYXJlbnRzLnBvcCgpOw0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfSwNCg0KICAgICAgICAgICAgIm9iamVjdCI6IGZ1bmN0aW9uIChiLCBhKSB7DQogICAgICAgICAgICAgICAgdmFyIGksIGosIGxvb3A7DQogICAgICAgICAgICAgICAgdmFyIGVxID0gdHJ1ZTsgLy8gdW5sZXNzIHdlIGNhbiBwcm9vdmUgaXQNCiAgICAgICAgICAgICAgICB2YXIgYVByb3BlcnRpZXMgPSBbXSwgYlByb3BlcnRpZXMgPSBbXTsgLy8gY29sbGVjdGlvbiBvZiBzdHJpbmdzDQoNCiAgICAgICAgICAgICAgICAvLyBjb21wYXJpbmcgY29uc3RydWN0b3JzIGlzIG1vcmUgc3RyaWN0IHRoYW4gdXNpbmcgaW5zdGFuY2VvZg0KICAgICAgICAgICAgICAgIGlmICggYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3Rvcikgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8gc3RhY2sgY29uc3RydWN0b3IgYmVmb3JlIHRyYXZlcnNpbmcgcHJvcGVydGllcw0KICAgICAgICAgICAgICAgIGNhbGxlcnMucHVzaChhLmNvbnN0cnVjdG9yKTsNCiAgICAgICAgICAgICAgICAvL3RyYWNrIHJlZmVyZW5jZSB0byBhdm9pZCBjaXJjdWxhciByZWZlcmVuY2VzDQogICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGEpOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGZvciAoaSBpbiBhKSB7IC8vIGJlIHN0cmljdDogZG9uJ3QgZW5zdXJlcyBoYXNPd25Qcm9wZXJ0eSBhbmQgZ28gZGVlcA0KICAgICAgICAgICAgICAgICAgICBsb29wID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIGZvcihqPTA7ajxwYXJlbnRzLmxlbmd0aDtqKyspew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYocGFyZW50c1tqXSA9PT0gYVtpXSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wID0gdHJ1ZTsgLy9kb24ndCBnbyBkb3duIHRoZSBzYW1lIHBhdGggdHdpY2UNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBhUHJvcGVydGllcy5wdXNoKGkpOyAvLyBjb2xsZWN0IGEncyBwcm9wZXJ0aWVzDQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCFsb29wICYmICEgaW5uZXJFcXVpdihhW2ldLCBiW2ldKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZXEgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgY2FsbGVycy5wb3AoKTsgLy8gdW5zdGFjaywgd2UgYXJlIGRvbmUNCiAgICAgICAgICAgICAgICBwYXJlbnRzLnBvcCgpOw0KDQogICAgICAgICAgICAgICAgZm9yIChpIGluIGIpIHsNCiAgICAgICAgICAgICAgICAgICAgYlByb3BlcnRpZXMucHVzaChpKTsgLy8gY29sbGVjdCBiJ3MgcHJvcGVydGllcw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIEVuc3VyZXMgaWRlbnRpY2FsIHByb3BlcnRpZXMgbmFtZQ0KICAgICAgICAgICAgICAgIHJldHVybiBlcSAmJiBpbm5lckVxdWl2KGFQcm9wZXJ0aWVzLnNvcnQoKSwgYlByb3BlcnRpZXMuc29ydCgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICB9KCk7DQoNCiAgICBpbm5lckVxdWl2ID0gZnVuY3Rpb24gKCkgeyAvLyBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMNCiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYXJndW1lbnRzKTsNCiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMikgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIGVuZCB0cmFuc2l0aW9uDQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChhLCBiKSB7DQogICAgICAgICAgICBpZiAoYSA9PT0gYikgew0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBjYXRjaCB0aGUgbW9zdCB5b3UgY2FuDQogICAgICAgICAgICB9IGVsc2UgaWYgKGEgPT09IG51bGwgfHwgYiA9PT0gbnVsbCB8fCB0eXBlb2YgYSA9PT0gInVuZGVmaW5lZCIgfHwgdHlwZW9mIGIgPT09ICJ1bmRlZmluZWQiIHx8IFFVbml0Lm9iamVjdFR5cGUoYSkgIT09IFFVbml0Lm9iamVjdFR5cGUoYikpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGRvbid0IGxvc2UgdGltZSB3aXRoIGVycm9yIHByb25lIGNhc2VzDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiBiaW5kQ2FsbGJhY2tzKGEsIGNhbGxiYWNrcywgW2IsIGFdKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAvLyBhcHBseSB0cmFuc2l0aW9uIHdpdGggKDEuLm4pIGFyZ3VtZW50cw0KICAgICAgICB9KShhcmdzWzBdLCBhcmdzWzFdKSAmJiBhcmd1bWVudHMuY2FsbGVlLmFwcGx5KHRoaXMsIGFyZ3Muc3BsaWNlKDEsIGFyZ3MubGVuZ3RoIC0xKSk7DQogICAgfTsNCg0KICAgIHJldHVybiBpbm5lckVxdWl2Ow0KDQp9KCk7DQoNCi8qKg0KICoganNEdW1wDQogKiBDb3B5cmlnaHQgKGMpIDIwMDggQXJpZWwgRmxlc2xlciAtIGFmbGVzbGVyKGF0KWdtYWlsKGRvdCljb20gfCBodHRwOi8vZmxlc2xlci5ibG9nc3BvdC5jb20NCiAqIExpY2Vuc2VkIHVuZGVyIEJTRCAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ic2QtbGljZW5zZS5waHApDQogKiBEYXRlOiA1LzE1LzIwMDgNCiAqIEBwcm9qZWN0RGVzY3JpcHRpb24gQWR2YW5jZWQgYW5kIGV4dGVuc2libGUgZGF0YSBkdW1waW5nIGZvciBKYXZhc2NyaXB0Lg0KICogQHZlcnNpb24gMS4wLjANCiAqIEBhdXRob3IgQXJpZWwgRmxlc2xlcg0KICogQGxpbmsge2h0dHA6Ly9mbGVzbGVyLmJsb2dzcG90LmNvbS8yMDA4LzA1L2pzZHVtcC1wcmV0dHktZHVtcC1vZi1hbnktamF2YXNjcmlwdC5odG1sfQ0KICovDQpRVW5pdC5qc0R1bXAgPSAoZnVuY3Rpb24oKSB7DQoJZnVuY3Rpb24gcXVvdGUoIHN0ciApIHsNCgkJcmV0dXJuICciJyArIHN0ci50b1N0cmluZygpLnJlcGxhY2UoLyIvZywgJ1xcIicpICsgJyInOw0KCX07DQoJZnVuY3Rpb24gbGl0ZXJhbCggbyApIHsNCgkJcmV0dXJuIG8gKyAnJzsJDQoJfTsNCglmdW5jdGlvbiBqb2luKCBwcmUsIGFyciwgcG9zdCApIHsNCgkJdmFyIHMgPSBqc0R1bXAuc2VwYXJhdG9yKCksDQoJCQliYXNlID0ganNEdW1wLmluZGVudCgpLA0KCQkJaW5uZXIgPSBqc0R1bXAuaW5kZW50KDEpOw0KCQlpZiAoIGFyci5qb2luICkNCgkJCWFyciA9IGFyci5qb2luKCAnLCcgKyBzICsgaW5uZXIgKTsNCgkJaWYgKCAhYXJyICkNCgkJCXJldHVybiBwcmUgKyBwb3N0Ow0KCQlyZXR1cm4gWyBwcmUsIGlubmVyICsgYXJyLCBiYXNlICsgcG9zdCBdLmpvaW4ocyk7DQoJfTsNCglmdW5jdGlvbiBhcnJheSggYXJyICkgew0KCQl2YXIgaSA9IGFyci5sZW5ndGgsCXJldCA9IEFycmF5KGkpOwkJCQkJDQoJCXRoaXMudXAoKTsNCgkJd2hpbGUgKCBpLS0gKQ0KCQkJcmV0W2ldID0gdGhpcy5wYXJzZSggYXJyW2ldICk7CQkJCQ0KCQl0aGlzLmRvd24oKTsNCgkJcmV0dXJuIGpvaW4oICdbJywgcmV0LCAnXScgKTsNCgl9Ow0KCQ0KCXZhciByZU5hbWUgPSAvXmZ1bmN0aW9uIChcdyspLzsNCgkNCgl2YXIganNEdW1wID0gew0KCQlwYXJzZTpmdW5jdGlvbiggb2JqLCB0eXBlICkgeyAvL3R5cGUgaXMgdXNlZCBtb3N0bHkgaW50ZXJuYWxseSwgeW91IGNhbiBmaXggYSAoY3VzdG9tKXR5cGUgaW4gYWR2YW5jZQ0KCQkJdmFyCXBhcnNlciA9IHRoaXMucGFyc2Vyc1sgdHlwZSB8fCB0aGlzLnR5cGVPZihvYmopIF07DQoJCQl0eXBlID0gdHlwZW9mIHBhcnNlcjsJCQkNCgkJCQ0KCQkJcmV0dXJuIHR5cGUgPT0gJ2Z1bmN0aW9uJyA/IHBhcnNlci5jYWxsKCB0aGlzLCBvYmogKSA6DQoJCQkJICAgdHlwZSA9PSAnc3RyaW5nJyA/IHBhcnNlciA6DQoJCQkJICAgdGhpcy5wYXJzZXJzLmVycm9yOw0KCQl9LA0KCQl0eXBlT2Y6ZnVuY3Rpb24oIG9iaiApIHsNCgkJCXZhciB0eXBlOw0KCQkJaWYgKCBvYmogPT09IG51bGwgKSB7DQoJCQkJdHlwZSA9ICJudWxsIjsNCgkJCX0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gInVuZGVmaW5lZCIpIHsNCgkJCQl0eXBlID0gInVuZGVmaW5lZCI7DQoJCQl9IGVsc2UgaWYgKFFVbml0LmlzKCJSZWdFeHAiLCBvYmopKSB7DQoJCQkJdHlwZSA9ICJyZWdleHAiOw0KCQkJfSBlbHNlIGlmIChRVW5pdC5pcygiRGF0ZSIsIG9iaikpIHsNCgkJCQl0eXBlID0gImRhdGUiOw0KCQkJfSBlbHNlIGlmIChRVW5pdC5pcygiRnVuY3Rpb24iLCBvYmopKSB7DQoJCQkJdHlwZSA9ICJmdW5jdGlvbiI7DQoJCQl9IGVsc2UgaWYgKHR5cGVvZiBvYmouc2V0SW50ZXJ2YWwgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2JqLmRvY3VtZW50ICE9PSAidW5kZWZpbmVkIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlID09PSAidW5kZWZpbmVkIikgew0KCQkJCXR5cGUgPSAid2luZG93IjsNCgkJCX0gZWxzZSBpZiAob2JqLm5vZGVUeXBlID09PSA5KSB7DQoJCQkJdHlwZSA9ICJkb2N1bWVudCI7DQoJCQl9IGVsc2UgaWYgKG9iai5ub2RlVHlwZSkgew0KCQkJCXR5cGUgPSAibm9kZSI7DQoJCQl9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICJvYmplY3QiICYmIHR5cGVvZiBvYmoubGVuZ3RoID09PSAibnVtYmVyIiAmJiBvYmoubGVuZ3RoID49IDApIHsNCgkJCQl0eXBlID0gImFycmF5IjsNCgkJCX0gZWxzZSB7DQoJCQkJdHlwZSA9IHR5cGVvZiBvYmo7DQoJCQl9DQoJCQlyZXR1cm4gdHlwZTsNCgkJfSwNCgkJc2VwYXJhdG9yOmZ1bmN0aW9uKCkgew0KCQkJcmV0dXJuIHRoaXMubXVsdGlsaW5lID8JdGhpcy5IVE1MID8gJzxiciAvPicgOiAnXG4nIDogdGhpcy5IVE1MID8gJyZuYnNwOycgOiAnICc7DQoJCX0sDQoJCWluZGVudDpmdW5jdGlvbiggZXh0cmEgKSB7Ly8gZXh0cmEgY2FuIGJlIGEgbnVtYmVyLCBzaG9ydGN1dCBmb3IgaW5jcmVhc2luZy1jYWxsaW5nLWRlY3JlYXNpbmcNCgkJCWlmICggIXRoaXMubXVsdGlsaW5lICkNCgkJCQlyZXR1cm4gJyc7DQoJCQl2YXIgY2hyID0gdGhpcy5pbmRlbnRDaGFyOw0KCQkJaWYgKCB0aGlzLkhUTUwgKQ0KCQkJCWNociA9IGNoci5yZXBsYWNlKC9cdC9nLCcgICAnKS5yZXBsYWNlKC8gL2csJyZuYnNwOycpOw0KCQkJcmV0dXJuIEFycmF5KCB0aGlzLl9kZXB0aF8gKyAoZXh0cmF8fDApICkuam9pbihjaHIpOw0KCQl9LA0KCQl1cDpmdW5jdGlvbiggYSApIHsNCgkJCXRoaXMuX2RlcHRoXyArPSBhIHx8IDE7DQoJCX0sDQoJCWRvd246ZnVuY3Rpb24oIGEgKSB7DQoJCQl0aGlzLl9kZXB0aF8gLT0gYSB8fCAxOw0KCQl9LA0KCQlzZXRQYXJzZXI6ZnVuY3Rpb24oIG5hbWUsIHBhcnNlciApIHsNCgkJCXRoaXMucGFyc2Vyc1tuYW1lXSA9IHBhcnNlcjsNCgkJfSwNCgkJLy8gVGhlIG5leHQgMyBhcmUgZXhwb3NlZCBzbyB5b3UgY2FuIHVzZSB0aGVtDQoJCXF1b3RlOnF1b3RlLCANCgkJbGl0ZXJhbDpsaXRlcmFsLA0KCQlqb2luOmpvaW4sDQoJCS8vDQoJCV9kZXB0aF86IDEsDQoJCS8vIFRoaXMgaXMgdGhlIGxpc3Qgb2YgcGFyc2VycywgdG8gbW9kaWZ5IHRoZW0sIHVzZSBqc0R1bXAuc2V0UGFyc2VyDQoJCXBhcnNlcnM6ew0KCQkJd2luZG93OiAnW1dpbmRvd10nLA0KCQkJZG9jdW1lbnQ6ICdbRG9jdW1lbnRdJywNCgkJCWVycm9yOidbRVJST1JdJywgLy93aGVuIG5vIHBhcnNlciBpcyBmb3VuZCwgc2hvdWxkbid0IGhhcHBlbg0KCQkJdW5rbm93bjogJ1tVbmtub3duXScsDQoJCQknbnVsbCc6J251bGwnLA0KCQkJdW5kZWZpbmVkOid1bmRlZmluZWQnLA0KCQkJJ2Z1bmN0aW9uJzpmdW5jdGlvbiggZm4gKSB7DQoJCQkJdmFyIHJldCA9ICdmdW5jdGlvbicsDQoJCQkJCW5hbWUgPSAnbmFtZScgaW4gZm4gPyBmbi5uYW1lIDogKHJlTmFtZS5leGVjKGZuKXx8W10pWzFdOy8vZnVuY3Rpb25zIG5ldmVyIGhhdmUgbmFtZSBpbiBJRQ0KCQkJCWlmICggbmFtZSApDQoJCQkJCXJldCArPSAnICcgKyBuYW1lOw0KCQkJCXJldCArPSAnKCc7DQoJCQkJDQoJCQkJcmV0ID0gWyByZXQsIFFVbml0LmpzRHVtcC5wYXJzZSggZm4sICdmdW5jdGlvbkFyZ3MnICksICcpeyddLmpvaW4oJycpOw0KCQkJCXJldHVybiBqb2luKCByZXQsIFFVbml0LmpzRHVtcC5wYXJzZShmbiwnZnVuY3Rpb25Db2RlJyksICd9JyApOw0KCQkJfSwNCgkJCWFycmF5OiBhcnJheSwNCgkJCW5vZGVsaXN0OiBhcnJheSwNCgkJCWFyZ3VtZW50czogYXJyYXksDQoJCQlvYmplY3Q6ZnVuY3Rpb24oIG1hcCApIHsNCgkJCQl2YXIgcmV0ID0gWyBdOw0KCQkJCVFVbml0LmpzRHVtcC51cCgpOw0KCQkJCWZvciAoIHZhciBrZXkgaW4gbWFwICkNCgkJCQkJcmV0LnB1c2goIFFVbml0LmpzRHVtcC5wYXJzZShrZXksJ2tleScpICsgJzogJyArIFFVbml0LmpzRHVtcC5wYXJzZShtYXBba2V5XSkgKTsNCgkJCQlRVW5pdC5qc0R1bXAuZG93bigpOw0KCQkJCXJldHVybiBqb2luKCAneycsIHJldCwgJ30nICk7DQoJCQl9LA0KCQkJbm9kZTpmdW5jdGlvbiggbm9kZSApIHsNCgkJCQl2YXIgb3BlbiA9IFFVbml0LmpzRHVtcC5IVE1MID8gJyZsdDsnIDogJzwnLA0KCQkJCQljbG9zZSA9IFFVbml0LmpzRHVtcC5IVE1MID8gJyZndDsnIDogJz4nOw0KCQkJCQkNCgkJCQl2YXIgdGFnID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLA0KCQkJCQlyZXQgPSBvcGVuICsgdGFnOw0KCQkJCQkNCgkJCQlmb3IgKCB2YXIgYSBpbiBRVW5pdC5qc0R1bXAuRE9NQXR0cnMgKSB7DQoJCQkJCXZhciB2YWwgPSBub2RlW1FVbml0LmpzRHVtcC5ET01BdHRyc1thXV07DQoJCQkJCWlmICggdmFsICkNCgkJCQkJCXJldCArPSAnICcgKyBhICsgJz0nICsgUVVuaXQuanNEdW1wLnBhcnNlKCB2YWwsICdhdHRyaWJ1dGUnICk7DQoJCQkJfQ0KCQkJCXJldHVybiByZXQgKyBjbG9zZSArIG9wZW4gKyAnLycgKyB0YWcgKyBjbG9zZTsNCgkJCX0sDQoJCQlmdW5jdGlvbkFyZ3M6ZnVuY3Rpb24oIGZuICkgey8vZnVuY3Rpb24gY2FsbHMgaXQgaW50ZXJuYWxseSwgaXQncyB0aGUgYXJndW1lbnRzIHBhcnQgb2YgdGhlIGZ1bmN0aW9uDQoJCQkJdmFyIGwgPSBmbi5sZW5ndGg7DQoJCQkJaWYgKCAhbCApIHJldHVybiAnJzsJCQkJDQoJCQkJDQoJCQkJdmFyIGFyZ3MgPSBBcnJheShsKTsNCgkJCQl3aGlsZSAoIGwtLSApDQoJCQkJCWFyZ3NbbF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDk3K2wpOy8vOTcgaXMgJ2EnDQoJCQkJcmV0dXJuICcgJyArIGFyZ3Muam9pbignLCAnKSArICcgJzsNCgkJCX0sDQoJCQlrZXk6cXVvdGUsIC8vb2JqZWN0IGNhbGxzIGl0IGludGVybmFsbHksIHRoZSBrZXkgcGFydCBvZiBhbiBpdGVtIGluIGEgbWFwDQoJCQlmdW5jdGlvbkNvZGU6J1tjb2RlXScsIC8vZnVuY3Rpb24gY2FsbHMgaXQgaW50ZXJuYWxseSwgaXQncyB0aGUgY29udGVudCBvZiB0aGUgZnVuY3Rpb24NCgkJCWF0dHJpYnV0ZTpxdW90ZSwgLy9ub2RlIGNhbGxzIGl0IGludGVybmFsbHksIGl0J3MgYW4gaHRtbCBhdHRyaWJ1dGUgdmFsdWUNCgkJCXN0cmluZzpxdW90ZSwNCgkJCWRhdGU6cXVvdGUsDQoJCQlyZWdleHA6bGl0ZXJhbCwgLy9yZWdleA0KCQkJbnVtYmVyOmxpdGVyYWwsDQoJCQknYm9vbGVhbic6bGl0ZXJhbA0KCQl9LA0KCQlET01BdHRyczp7Ly9hdHRyaWJ1dGVzIHRvIGR1bXAgZnJvbSBub2RlcywgbmFtZT0+cmVhbE5hbWUNCgkJCWlkOidpZCcsDQoJCQluYW1lOiduYW1lJywNCgkJCSdjbGFzcyc6J2NsYXNzTmFtZScNCgkJfSwNCgkJSFRNTDpmYWxzZSwvL2lmIHRydWUsIGVudGl0aWVzIGFyZSBlc2NhcGVkICggPCwgPiwgXHQsIHNwYWNlIGFuZCBcbiApDQoJCWluZGVudENoYXI6JyAgJywvL2luZGVudGF0aW9uIHVuaXQNCgkJbXVsdGlsaW5lOnRydWUgLy9pZiB0cnVlLCBpdGVtcyBpbiBhIGNvbGxlY3Rpb24sIGFyZSBzZXBhcmF0ZWQgYnkgYSBcbiwgZWxzZSBqdXN0IGEgc3BhY2UuDQoJfTsNCg0KCXJldHVybiBqc0R1bXA7DQp9KSgpOw0KDQovLyBmcm9tIFNpenpsZS5qcw0KZnVuY3Rpb24gZ2V0VGV4dCggZWxlbXMgKSB7DQoJdmFyIHJldCA9ICIiLCBlbGVtOw0KDQoJZm9yICggdmFyIGkgPSAwOyBlbGVtc1tpXTsgaSsrICkgew0KCQllbGVtID0gZWxlbXNbaV07DQoNCgkJLy8gR2V0IHRoZSB0ZXh0IGZyb20gdGV4dCBub2RlcyBhbmQgQ0RBVEEgbm9kZXMNCgkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDQgKSB7DQoJCQlyZXQgKz0gZWxlbS5ub2RlVmFsdWU7DQoNCgkJLy8gVHJhdmVyc2UgZXZlcnl0aGluZyBlbHNlLCBleGNlcHQgY29tbWVudCBub2Rlcw0KCQl9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlICE9PSA4ICkgew0KCQkJcmV0ICs9IGdldFRleHQoIGVsZW0uY2hpbGROb2RlcyApOw0KCQl9DQoJfQ0KDQoJcmV0dXJuIHJldDsNCn07DQoNCi8qDQogKiBKYXZhc2NyaXB0IERpZmYgQWxnb3JpdGhtDQogKiAgQnkgSm9obiBSZXNpZyAoaHR0cDovL2Vqb2huLm9yZy8pDQogKiAgTW9kaWZpZWQgYnkgQ2h1IEFsYW4gInNwcml0ZSINCiAqDQogKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuDQogKg0KICogTW9yZSBJbmZvOg0KICogIGh0dHA6Ly9lam9obi5vcmcvcHJvamVjdHMvamF2YXNjcmlwdC1kaWZmLWFsZ29yaXRobS8NCiAqICANCiAqIFVzYWdlOiBRVW5pdC5kaWZmKGV4cGVjdGVkLCBhY3R1YWwpDQogKiANCiAqIFFVbml0LmRpZmYoInRoZSBxdWljayBicm93biBmb3gganVtcGVkIG92ZXIiLCAidGhlIHF1aWNrIGZveCBqdW1wcyBvdmVyIikgPT0gInRoZSAgcXVpY2sgPGRlbD5icm93biA8L2RlbD4gZm94IDxkZWw+anVtcGVkIDwvZGVsPjxpbnM+anVtcHMgPC9pbnM+IG92ZXIiDQogKi8NClFVbml0LmRpZmYgPSAoZnVuY3Rpb24oKSB7DQoJZnVuY3Rpb24gZGlmZihvLCBuKXsNCgkJdmFyIG5zID0gbmV3IE9iamVjdCgpOw0KCQl2YXIgb3MgPSBuZXcgT2JqZWN0KCk7DQoJCQ0KCQlmb3IgKHZhciBpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspIHsNCgkJCWlmIChuc1tuW2ldXSA9PSBudWxsKSANCgkJCQluc1tuW2ldXSA9IHsNCgkJCQkJcm93czogbmV3IEFycmF5KCksDQoJCQkJCW86IG51bGwNCgkJCQl9Ow0KCQkJbnNbbltpXV0ucm93cy5wdXNoKGkpOw0KCQl9DQoJCQ0KCQlmb3IgKHZhciBpID0gMDsgaSA8IG8ubGVuZ3RoOyBpKyspIHsNCgkJCWlmIChvc1tvW2ldXSA9PSBudWxsKSANCgkJCQlvc1tvW2ldXSA9IHsNCgkJCQkJcm93czogbmV3IEFycmF5KCksDQoJCQkJCW46IG51bGwNCgkJCQl9Ow0KCQkJb3Nbb1tpXV0ucm93cy5wdXNoKGkpOw0KCQl9DQoJCQ0KCQlmb3IgKHZhciBpIGluIG5zKSB7DQoJCQlpZiAobnNbaV0ucm93cy5sZW5ndGggPT0gMSAmJiB0eXBlb2Yob3NbaV0pICE9ICJ1bmRlZmluZWQiICYmIG9zW2ldLnJvd3MubGVuZ3RoID09IDEpIHsNCgkJCQluW25zW2ldLnJvd3NbMF1dID0gew0KCQkJCQl0ZXh0OiBuW25zW2ldLnJvd3NbMF1dLA0KCQkJCQlyb3c6IG9zW2ldLnJvd3NbMF0NCgkJCQl9Ow0KCQkJCW9bb3NbaV0ucm93c1swXV0gPSB7DQoJCQkJCXRleHQ6IG9bb3NbaV0ucm93c1swXV0sDQoJCQkJCXJvdzogbnNbaV0ucm93c1swXQ0KCQkJCX07DQoJCQl9DQoJCX0NCgkJDQoJCWZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGggLSAxOyBpKyspIHsNCgkJCWlmIChuW2ldLnRleHQgIT0gbnVsbCAmJiBuW2kgKyAxXS50ZXh0ID09IG51bGwgJiYgbltpXS5yb3cgKyAxIDwgby5sZW5ndGggJiYgb1tuW2ldLnJvdyArIDFdLnRleHQgPT0gbnVsbCAmJg0KCQkJbltpICsgMV0gPT0gb1tuW2ldLnJvdyArIDFdKSB7DQoJCQkJbltpICsgMV0gPSB7DQoJCQkJCXRleHQ6IG5baSArIDFdLA0KCQkJCQlyb3c6IG5baV0ucm93ICsgMQ0KCQkJCX07DQoJCQkJb1tuW2ldLnJvdyArIDFdID0gew0KCQkJCQl0ZXh0OiBvW25baV0ucm93ICsgMV0sDQoJCQkJCXJvdzogaSArIDENCgkJCQl9Ow0KCQkJfQ0KCQl9DQoJCQ0KCQlmb3IgKHZhciBpID0gbi5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7DQoJCQlpZiAobltpXS50ZXh0ICE9IG51bGwgJiYgbltpIC0gMV0udGV4dCA9PSBudWxsICYmIG5baV0ucm93ID4gMCAmJiBvW25baV0ucm93IC0gMV0udGV4dCA9PSBudWxsICYmDQoJCQluW2kgLSAxXSA9PSBvW25baV0ucm93IC0gMV0pIHsNCgkJCQluW2kgLSAxXSA9IHsNCgkJCQkJdGV4dDogbltpIC0gMV0sDQoJCQkJCXJvdzogbltpXS5yb3cgLSAxDQoJCQkJfTsNCgkJCQlvW25baV0ucm93IC0gMV0gPSB7DQoJCQkJCXRleHQ6IG9bbltpXS5yb3cgLSAxXSwNCgkJCQkJcm93OiBpIC0gMQ0KCQkJCX07DQoJCQl9DQoJCX0NCgkJDQoJCXJldHVybiB7DQoJCQlvOiBvLA0KCQkJbjogbg0KCQl9Ow0KCX0NCgkNCglyZXR1cm4gZnVuY3Rpb24obywgbil7DQoJCW8gPSBvLnJlcGxhY2UoL1xzKyQvLCAnJyk7DQoJCW4gPSBuLnJlcGxhY2UoL1xzKyQvLCAnJyk7DQoJCXZhciBvdXQgPSBkaWZmKG8gPT0gIiIgPyBbXSA6IG8uc3BsaXQoL1xzKy8pLCBuID09ICIiID8gW10gOiBuLnNwbGl0KC9ccysvKSk7DQoNCgkJdmFyIHN0ciA9ICIiOw0KCQkNCgkJdmFyIG9TcGFjZSA9IG8ubWF0Y2goL1xzKy9nKTsNCgkJaWYgKG9TcGFjZSA9PSBudWxsKSB7DQoJCQlvU3BhY2UgPSBbIiAiXTsNCgkJfQ0KCQllbHNlIHsNCgkJCW9TcGFjZS5wdXNoKCIgIik7DQoJCX0NCgkJdmFyIG5TcGFjZSA9IG4ubWF0Y2goL1xzKy9nKTsNCgkJaWYgKG5TcGFjZSA9PSBudWxsKSB7DQoJCQluU3BhY2UgPSBbIiAiXTsNCgkJfQ0KCQllbHNlIHsNCgkJCW5TcGFjZS5wdXNoKCIgIik7DQoJCX0NCgkJDQoJCWlmIChvdXQubi5sZW5ndGggPT0gMCkgew0KCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBvdXQuby5sZW5ndGg7IGkrKykgew0KCQkJCXN0ciArPSAnPGRlbD4nICsgb3V0Lm9baV0gKyBvU3BhY2VbaV0gKyAiPC9kZWw+IjsNCgkJCX0NCgkJfQ0KCQllbHNlIHsNCgkJCWlmIChvdXQublswXS50ZXh0ID09IG51bGwpIHsNCgkJCQlmb3IgKG4gPSAwOyBuIDwgb3V0Lm8ubGVuZ3RoICYmIG91dC5vW25dLnRleHQgPT0gbnVsbDsgbisrKSB7DQoJCQkJCXN0ciArPSAnPGRlbD4nICsgb3V0Lm9bbl0gKyBvU3BhY2Vbbl0gKyAiPC9kZWw+IjsNCgkJCQl9DQoJCQl9DQoJCQkNCgkJCWZvciAodmFyIGkgPSAwOyBpIDwgb3V0Lm4ubGVuZ3RoOyBpKyspIHsNCgkJCQlpZiAob3V0Lm5baV0udGV4dCA9PSBudWxsKSB7DQoJCQkJCXN0ciArPSAnPGlucz4nICsgb3V0Lm5baV0gKyBuU3BhY2VbaV0gKyAiPC9pbnM+IjsNCgkJCQl9DQoJCQkJZWxzZSB7DQoJCQkJCXZhciBwcmUgPSAiIjsNCgkJCQkJDQoJCQkJCWZvciAobiA9IG91dC5uW2ldLnJvdyArIDE7IG4gPCBvdXQuby5sZW5ndGggJiYgb3V0Lm9bbl0udGV4dCA9PSBudWxsOyBuKyspIHsNCgkJCQkJCXByZSArPSAnPGRlbD4nICsgb3V0Lm9bbl0gKyBvU3BhY2Vbbl0gKyAiPC9kZWw+IjsNCgkJCQkJfQ0KCQkJCQlzdHIgKz0gIiAiICsgb3V0Lm5baV0udGV4dCArIG5TcGFjZVtpXSArIHByZTsNCgkJCQl9DQoJCQl9DQoJCX0NCgkJDQoJCXJldHVybiBzdHI7DQoJfTsNCn0pKCk7DQoNCn0pKHRoaXMpOw0K",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 06:19:39 GMT",
                    "Content-Length": "38472",
                    "Date": "Fri, 07 Nov 2014 06:19:40 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}