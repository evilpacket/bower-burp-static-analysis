{
    "url": "http://localhost:9999/miguelmota/inview/node_modules/jsdoc/node_modules/esprima/test/3rdparty/mootools-1.4.1.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>document.location.pathname</b> and written to <b>the 'open()' function of an XMLHttpRequest object</b> via the following statements:<ul><li>url = document.location.pathname;</li><li>url = url.substr(0, trimPosition);</li><li>xhr.open(method.toUpperCase(), url, this.options.async, this.options.user, this.options.password);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/miguelmota/inview/node_modules/jsdoc/node_modules/esprima/test/3rdparty/mootools-1.4.1.js",
                "path": "/miguelmota/inview/node_modules/jsdoc/node_modules/esprima/test/3rdparty/mootools-1.4.1.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9taWd1ZWxtb3RhL2ludmlldy9ub2RlX21vZHVsZXMvanNkb2Mvbm9kZV9tb2R1bGVzL2VzcHJpbWEvdGVzdC8zcmRwYXJ0eS9tb290b29scy0xLjQuMS5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTU1MjYzDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQpEYXRlOiBGcmksIDA3IE5vdiAyMDE0IDA1OjA0OjIxIEdNVA0KTGFzdC1Nb2RpZmllZDogRnJpLCAwNyBOb3YgMjAxNCAwNTowMzoyMyBHTVQNCg0KLyoKLS0tCk1vb1Rvb2xzOiB0aGUgamF2YXNjcmlwdCBmcmFtZXdvcmsKCndlYiBidWlsZDoKIC0gaHR0cDovL21vb3Rvb2xzLm5ldC9jb3JlLzc2YmY0NzA2MmQ2YzE5ODNkNjZjZTQ3YWQ2NmFhMGUwCgpwYWNrYWdlciBidWlsZDoKIC0gcGFja2FnZXIgYnVpbGQgQ29yZS9Db3JlIENvcmUvQXJyYXkgQ29yZS9TdHJpbmcgQ29yZS9OdW1iZXIgQ29yZS9GdW5jdGlvbiBDb3JlL09iamVjdCBDb3JlL0V2ZW50IENvcmUvQnJvd3NlciBDb3JlL0NsYXNzIENvcmUvQ2xhc3MuRXh0cmFzIENvcmUvU2xpY2suUGFyc2VyIENvcmUvU2xpY2suRmluZGVyIENvcmUvRWxlbWVudCBDb3JlL0VsZW1lbnQuU3R5bGUgQ29yZS9FbGVtZW50LkV2ZW50IENvcmUvRWxlbWVudC5EZWxlZ2F0aW9uIENvcmUvRWxlbWVudC5EaW1lbnNpb25zIENvcmUvRnggQ29yZS9GeC5DU1MgQ29yZS9GeC5Ud2VlbiBDb3JlL0Z4Lk1vcnBoIENvcmUvRnguVHJhbnNpdGlvbnMgQ29yZS9SZXF1ZXN0IENvcmUvUmVxdWVzdC5IVE1MIENvcmUvUmVxdWVzdC5KU09OIENvcmUvQ29va2llIENvcmUvSlNPTiBDb3JlL0RPTVJlYWR5IENvcmUvU3dpZmYKCi8qCi0tLQoKbmFtZTogQ29yZQoKZGVzY3JpcHRpb246IFRoZSBoZWFydCBvZiBNb29Ub29scy4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKY29weXJpZ2h0OiBDb3B5cmlnaHQgKGMpIDIwMDYtMjAxMCBbVmFsZXJpbyBQcm9pZXR0aV0oaHR0cDovL21hZDRtaWxrLm5ldC8pLgoKYXV0aG9yczogVGhlIE1vb1Rvb2xzIHByb2R1Y3Rpb24gdGVhbSAoaHR0cDovL21vb3Rvb2xzLm5ldC9kZXZlbG9wZXJzLykKCmluc3BpcmF0aW9uOgogIC0gQ2xhc3MgaW1wbGVtZW50YXRpb24gaW5zcGlyZWQgYnkgW0Jhc2UuanNdKGh0dHA6Ly9kZWFuLmVkd2FyZHMubmFtZS93ZWJsb2cvMjAwNi8wMy9iYXNlLykgQ29weXJpZ2h0IChjKSAyMDA2IERlYW4gRWR3YXJkcywgW0dOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZV0oaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL2xncGwtbGljZW5zZS5waHApCiAgLSBTb21lIGZ1bmN0aW9uYWxpdHkgaW5zcGlyZWQgYnkgW1Byb3RvdHlwZS5qc10oaHR0cDovL3Byb3RvdHlwZWpzLm9yZykgQ29weXJpZ2h0IChjKSAyMDA1LTIwMDcgU2FtIFN0ZXBoZW5zb24sIFtNSVQgTGljZW5zZV0oaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocCkKCnByb3ZpZGVzOiBbQ29yZSwgTW9vVG9vbHMsIFR5cGUsIHR5cGVPZiwgaW5zdGFuY2VPZiwgTmF0aXZlXQoKLi4uCiovCgooZnVuY3Rpb24oKXsKCnRoaXMuTW9vVG9vbHMgPSB7Cgl2ZXJzaW9uOiAnMS40LjEnLAoJYnVpbGQ6ICdkMWZiMjU3MTBlM2M1NDgyYTIxOWFiOWRjNjc1YTRlMGFkMjE3NmI2Jwp9OwoKLy8gdHlwZU9mLCBpbnN0YW5jZU9mCgp2YXIgdHlwZU9mID0gdGhpcy50eXBlT2YgPSBmdW5jdGlvbihpdGVtKXsKCWlmIChpdGVtID09IG51bGwpIHJldHVybiAnbnVsbCc7CglpZiAoaXRlbS4kZmFtaWx5KSByZXR1cm4gaXRlbS4kZmFtaWx5KCk7CgoJaWYgKGl0ZW0ubm9kZU5hbWUpewoJCWlmIChpdGVtLm5vZGVUeXBlID09IDEpIHJldHVybiAnZWxlbWVudCc7CgkJaWYgKGl0ZW0ubm9kZVR5cGUgPT0gMykgcmV0dXJuICgvXFMvKS50ZXN0KGl0ZW0ubm9kZVZhbHVlKSA/ICd0ZXh0bm9kZScgOiAnd2hpdGVzcGFjZSc7Cgl9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLmxlbmd0aCA9PSAnbnVtYmVyJyl7CgkJaWYgKGl0ZW0uY2FsbGVlKSByZXR1cm4gJ2FyZ3VtZW50cyc7CgkJaWYgKCdpdGVtJyBpbiBpdGVtKSByZXR1cm4gJ2NvbGxlY3Rpb24nOwoJfQoKCXJldHVybiB0eXBlb2YgaXRlbTsKfTsKCnZhciBpbnN0YW5jZU9mID0gdGhpcy5pbnN0YW5jZU9mID0gZnVuY3Rpb24oaXRlbSwgb2JqZWN0KXsKCWlmIChpdGVtID09IG51bGwpIHJldHVybiBmYWxzZTsKCXZhciBjb25zdHJ1Y3RvciA9IGl0ZW0uJGNvbnN0cnVjdG9yIHx8IGl0ZW0uY29uc3RydWN0b3I7Cgl3aGlsZSAoY29uc3RydWN0b3IpewoJCWlmIChjb25zdHJ1Y3RvciA9PT0gb2JqZWN0KSByZXR1cm4gdHJ1ZTsKCQljb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yLnBhcmVudDsKCX0KCXJldHVybiBpdGVtIGluc3RhbmNlb2Ygb2JqZWN0Owp9OwoKLy8gRnVuY3Rpb24gb3ZlcmxvYWRpbmcKCnZhciBGdW5jdGlvbiA9IHRoaXMuRnVuY3Rpb247Cgp2YXIgZW51bWVyYWJsZXMgPSB0cnVlOwpmb3IgKHZhciBpIGluIHt0b1N0cmluZzogMX0pIGVudW1lcmFibGVzID0gbnVsbDsKaWYgKGVudW1lcmFibGVzKSBlbnVtZXJhYmxlcyA9IFsnaGFzT3duUHJvcGVydHknLCAndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ3RvTG9jYWxlU3RyaW5nJywgJ3RvU3RyaW5nJywgJ2NvbnN0cnVjdG9yJ107CgpGdW5jdGlvbi5wcm90b3R5cGUub3ZlcmxvYWRTZXR0ZXIgPSBmdW5jdGlvbih1c2VQbHVyYWwpewoJdmFyIHNlbGYgPSB0aGlzOwoJcmV0dXJuIGZ1bmN0aW9uKGEsIGIpewoJCWlmIChhID09IG51bGwpIHJldHVybiB0aGlzOwoJCWlmICh1c2VQbHVyYWwgfHwgdHlwZW9mIGEgIT0gJ3N0cmluZycpewoJCQlmb3IgKHZhciBrIGluIGEpIHNlbGYuY2FsbCh0aGlzLCBrLCBhW2tdKTsKCQkJaWYgKGVudW1lcmFibGVzKSBmb3IgKHZhciBpID0gZW51bWVyYWJsZXMubGVuZ3RoOyBpLS07KXsKCQkJCWsgPSBlbnVtZXJhYmxlc1tpXTsKCQkJCWlmIChhLmhhc093blByb3BlcnR5KGspKSBzZWxmLmNhbGwodGhpcywgaywgYVtrXSk7CgkJCX0KCQl9IGVsc2UgewoJCQlzZWxmLmNhbGwodGhpcywgYSwgYik7CgkJfQoJCXJldHVybiB0aGlzOwoJfTsKfTsKCkZ1bmN0aW9uLnByb3RvdHlwZS5vdmVybG9hZEdldHRlciA9IGZ1bmN0aW9uKHVzZVBsdXJhbCl7Cgl2YXIgc2VsZiA9IHRoaXM7CglyZXR1cm4gZnVuY3Rpb24oYSl7CgkJdmFyIGFyZ3MsIHJlc3VsdDsKCQlpZiAodXNlUGx1cmFsIHx8IHR5cGVvZiBhICE9ICdzdHJpbmcnKSBhcmdzID0gYTsKCQllbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgYXJncyA9IGFyZ3VtZW50czsKCQlpZiAoYXJncyl7CgkJCXJlc3VsdCA9IHt9OwoJCQlmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHJlc3VsdFthcmdzW2ldXSA9IHNlbGYuY2FsbCh0aGlzLCBhcmdzW2ldKTsKCQl9IGVsc2UgewoJCQlyZXN1bHQgPSBzZWxmLmNhbGwodGhpcywgYSk7CgkJfQoJCXJldHVybiByZXN1bHQ7Cgl9Owp9OwoKRnVuY3Rpb24ucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpewoJdGhpc1trZXldID0gdmFsdWU7Cn0ub3ZlcmxvYWRTZXR0ZXIoKTsKCkZ1bmN0aW9uLnByb3RvdHlwZS5pbXBsZW1lbnQgPSBmdW5jdGlvbihrZXksIHZhbHVlKXsKCXRoaXMucHJvdG90eXBlW2tleV0gPSB2YWx1ZTsKfS5vdmVybG9hZFNldHRlcigpOwoKLy8gRnJvbQoKdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlOwoKRnVuY3Rpb24uZnJvbSA9IGZ1bmN0aW9uKGl0ZW0pewoJcmV0dXJuICh0eXBlT2YoaXRlbSkgPT0gJ2Z1bmN0aW9uJykgPyBpdGVtIDogZnVuY3Rpb24oKXsKCQlyZXR1cm4gaXRlbTsKCX07Cn07CgpBcnJheS5mcm9tID0gZnVuY3Rpb24oaXRlbSl7CglpZiAoaXRlbSA9PSBudWxsKSByZXR1cm4gW107CglyZXR1cm4gKFR5cGUuaXNFbnVtZXJhYmxlKGl0ZW0pICYmIHR5cGVvZiBpdGVtICE9ICdzdHJpbmcnKSA/ICh0eXBlT2YoaXRlbSkgPT0gJ2FycmF5JykgPyBpdGVtIDogc2xpY2UuY2FsbChpdGVtKSA6IFtpdGVtXTsKfTsKCk51bWJlci5mcm9tID0gZnVuY3Rpb24oaXRlbSl7Cgl2YXIgbnVtYmVyID0gcGFyc2VGbG9hdChpdGVtKTsKCXJldHVybiBpc0Zpbml0ZShudW1iZXIpID8gbnVtYmVyIDogbnVsbDsKfTsKClN0cmluZy5mcm9tID0gZnVuY3Rpb24oaXRlbSl7CglyZXR1cm4gaXRlbSArICcnOwp9OwoKLy8gaGlkZSwgcHJvdGVjdAoKRnVuY3Rpb24uaW1wbGVtZW50KHsKCgloaWRlOiBmdW5jdGlvbigpewoJCXRoaXMuJGhpZGRlbiA9IHRydWU7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXByb3RlY3Q6IGZ1bmN0aW9uKCl7CgkJdGhpcy4kcHJvdGVjdGVkID0gdHJ1ZTsKCQlyZXR1cm4gdGhpczsKCX0KCn0pOwoKLy8gVHlwZQoKdmFyIFR5cGUgPSB0aGlzLlR5cGUgPSBmdW5jdGlvbihuYW1lLCBvYmplY3QpewoJaWYgKG5hbWUpewoJCXZhciBsb3dlciA9IG5hbWUudG9Mb3dlckNhc2UoKTsKCQl2YXIgdHlwZUNoZWNrID0gZnVuY3Rpb24oaXRlbSl7CgkJCXJldHVybiAodHlwZU9mKGl0ZW0pID09IGxvd2VyKTsKCQl9OwoKCQlUeXBlWydpcycgKyBuYW1lXSA9IHR5cGVDaGVjazsKCQlpZiAob2JqZWN0ICE9IG51bGwpewoJCQlvYmplY3QucHJvdG90eXBlLiRmYW1pbHkgPSAoZnVuY3Rpb24oKXsKCQkJCXJldHVybiBsb3dlcjsKCQkJfSkuaGlkZSgpOwoJCQkvLzwxLjJjb21wYXQ+CgkJCW9iamVjdC50eXBlID0gdHlwZUNoZWNrOwoJCQkvLzwvMS4yY29tcGF0PgoJCX0KCX0KCglpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiBudWxsOwoKCW9iamVjdC5leHRlbmQodGhpcyk7CglvYmplY3QuJGNvbnN0cnVjdG9yID0gVHlwZTsKCW9iamVjdC5wcm90b3R5cGUuJGNvbnN0cnVjdG9yID0gb2JqZWN0OwoKCXJldHVybiBvYmplY3Q7Cn07Cgp2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOwoKVHlwZS5pc0VudW1lcmFibGUgPSBmdW5jdGlvbihpdGVtKXsKCXJldHVybiAoaXRlbSAhPSBudWxsICYmIHR5cGVvZiBpdGVtLmxlbmd0aCA9PSAnbnVtYmVyJyAmJiB0b1N0cmluZy5jYWxsKGl0ZW0pICE9ICdbb2JqZWN0IEZ1bmN0aW9uXScgKTsKfTsKCnZhciBob29rcyA9IHt9OwoKdmFyIGhvb2tzT2YgPSBmdW5jdGlvbihvYmplY3QpewoJdmFyIHR5cGUgPSB0eXBlT2Yob2JqZWN0LnByb3RvdHlwZSk7CglyZXR1cm4gaG9va3NbdHlwZV0gfHwgKGhvb2tzW3R5cGVdID0gW10pOwp9OwoKdmFyIGltcGxlbWVudCA9IGZ1bmN0aW9uKG5hbWUsIG1ldGhvZCl7CglpZiAobWV0aG9kICYmIG1ldGhvZC4kaGlkZGVuKSByZXR1cm47CgoJdmFyIGhvb2tzID0gaG9va3NPZih0aGlzKTsKCglmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKXsKCQl2YXIgaG9vayA9IGhvb2tzW2ldOwoJCWlmICh0eXBlT2YoaG9vaykgPT0gJ3R5cGUnKSBpbXBsZW1lbnQuY2FsbChob29rLCBuYW1lLCBtZXRob2QpOwoJCWVsc2UgaG9vay5jYWxsKHRoaXMsIG5hbWUsIG1ldGhvZCk7Cgl9CgoJdmFyIHByZXZpb3VzID0gdGhpcy5wcm90b3R5cGVbbmFtZV07CglpZiAocHJldmlvdXMgPT0gbnVsbCB8fCAhcHJldmlvdXMuJHByb3RlY3RlZCkgdGhpcy5wcm90b3R5cGVbbmFtZV0gPSBtZXRob2Q7CgoJaWYgKHRoaXNbbmFtZV0gPT0gbnVsbCAmJiB0eXBlT2YobWV0aG9kKSA9PSAnZnVuY3Rpb24nKSBleHRlbmQuY2FsbCh0aGlzLCBuYW1lLCBmdW5jdGlvbihpdGVtKXsKCQlyZXR1cm4gbWV0aG9kLmFwcGx5KGl0ZW0sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7Cgl9KTsKfTsKCnZhciBleHRlbmQgPSBmdW5jdGlvbihuYW1lLCBtZXRob2QpewoJaWYgKG1ldGhvZCAmJiBtZXRob2QuJGhpZGRlbikgcmV0dXJuOwoJdmFyIHByZXZpb3VzID0gdGhpc1tuYW1lXTsKCWlmIChwcmV2aW91cyA9PSBudWxsIHx8ICFwcmV2aW91cy4kcHJvdGVjdGVkKSB0aGlzW25hbWVdID0gbWV0aG9kOwp9OwoKVHlwZS5pbXBsZW1lbnQoewoKCWltcGxlbWVudDogaW1wbGVtZW50Lm92ZXJsb2FkU2V0dGVyKCksCgoJZXh0ZW5kOiBleHRlbmQub3ZlcmxvYWRTZXR0ZXIoKSwKCglhbGlhczogZnVuY3Rpb24obmFtZSwgZXhpc3RpbmcpewoJCWltcGxlbWVudC5jYWxsKHRoaXMsIG5hbWUsIHRoaXMucHJvdG90eXBlW2V4aXN0aW5nXSk7Cgl9Lm92ZXJsb2FkU2V0dGVyKCksCgoJbWlycm9yOiBmdW5jdGlvbihob29rKXsKCQlob29rc09mKHRoaXMpLnB1c2goaG9vayk7CgkJcmV0dXJuIHRoaXM7Cgl9Cgp9KTsKCm5ldyBUeXBlKCdUeXBlJywgVHlwZSk7CgovLyBEZWZhdWx0IFR5cGVzCgp2YXIgZm9yY2UgPSBmdW5jdGlvbihuYW1lLCBvYmplY3QsIG1ldGhvZHMpewoJdmFyIGlzVHlwZSA9IChvYmplY3QgIT0gT2JqZWN0KSwKCQlwcm90b3R5cGUgPSBvYmplY3QucHJvdG90eXBlOwoKCWlmIChpc1R5cGUpIG9iamVjdCA9IG5ldyBUeXBlKG5hbWUsIG9iamVjdCk7CgoJZm9yICh2YXIgaSA9IDAsIGwgPSBtZXRob2RzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CgkJdmFyIGtleSA9IG1ldGhvZHNbaV0sCgkJCWdlbmVyaWMgPSBvYmplY3Rba2V5XSwKCQkJcHJvdG8gPSBwcm90b3R5cGVba2V5XTsKCgkJaWYgKGdlbmVyaWMpIGdlbmVyaWMucHJvdGVjdCgpOwoKCQlpZiAoaXNUeXBlICYmIHByb3RvKXsKCQkJZGVsZXRlIHByb3RvdHlwZVtrZXldOwoJCQlwcm90b3R5cGVba2V5XSA9IHByb3RvLnByb3RlY3QoKTsKCQl9Cgl9CgoJaWYgKGlzVHlwZSkgb2JqZWN0LmltcGxlbWVudChwcm90b3R5cGUpOwoKCXJldHVybiBmb3JjZTsKfTsKCmZvcmNlKCdTdHJpbmcnLCBTdHJpbmcsIFsKCSdjaGFyQXQnLCAnY2hhckNvZGVBdCcsICdjb25jYXQnLCAnaW5kZXhPZicsICdsYXN0SW5kZXhPZicsICdtYXRjaCcsICdxdW90ZScsICdyZXBsYWNlJywgJ3NlYXJjaCcsCgknc2xpY2UnLCAnc3BsaXQnLCAnc3Vic3RyJywgJ3N1YnN0cmluZycsICd0cmltJywgJ3RvTG93ZXJDYXNlJywgJ3RvVXBwZXJDYXNlJwpdKSgnQXJyYXknLCBBcnJheSwgWwoJJ3BvcCcsICdwdXNoJywgJ3JldmVyc2UnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCcsICdjb25jYXQnLCAnam9pbicsICdzbGljZScsCgknaW5kZXhPZicsICdsYXN0SW5kZXhPZicsICdmaWx0ZXInLCAnZm9yRWFjaCcsICdldmVyeScsICdtYXAnLCAnc29tZScsICdyZWR1Y2UnLCAncmVkdWNlUmlnaHQnCl0pKCdOdW1iZXInLCBOdW1iZXIsIFsKCSd0b0V4cG9uZW50aWFsJywgJ3RvRml4ZWQnLCAndG9Mb2NhbGVTdHJpbmcnLCAndG9QcmVjaXNpb24nCl0pKCdGdW5jdGlvbicsIEZ1bmN0aW9uLCBbCgknYXBwbHknLCAnY2FsbCcsICdiaW5kJwpdKSgnUmVnRXhwJywgUmVnRXhwLCBbCgknZXhlYycsICd0ZXN0JwpdKSgnT2JqZWN0JywgT2JqZWN0LCBbCgknY3JlYXRlJywgJ2RlZmluZVByb3BlcnR5JywgJ2RlZmluZVByb3BlcnRpZXMnLCAna2V5cycsCgknZ2V0UHJvdG90eXBlT2YnLCAnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgJ2dldE93blByb3BlcnR5TmFtZXMnLAoJJ3ByZXZlbnRFeHRlbnNpb25zJywgJ2lzRXh0ZW5zaWJsZScsICdzZWFsJywgJ2lzU2VhbGVkJywgJ2ZyZWV6ZScsICdpc0Zyb3plbicKXSkoJ0RhdGUnLCBEYXRlLCBbJ25vdyddKTsKCk9iamVjdC5leHRlbmQgPSBleHRlbmQub3ZlcmxvYWRTZXR0ZXIoKTsKCkRhdGUuZXh0ZW5kKCdub3cnLCBmdW5jdGlvbigpewoJcmV0dXJuICsobmV3IERhdGUpOwp9KTsKCm5ldyBUeXBlKCdCb29sZWFuJywgQm9vbGVhbik7CgovLyBmaXhlcyBOYU4gcmV0dXJuaW5nIGFzIE51bWJlcgoKTnVtYmVyLnByb3RvdHlwZS4kZmFtaWx5ID0gZnVuY3Rpb24oKXsKCXJldHVybiBpc0Zpbml0ZSh0aGlzKSA/ICdudW1iZXInIDogJ251bGwnOwp9LmhpZGUoKTsKCi8vIE51bWJlci5yYW5kb20KCk51bWJlci5leHRlbmQoJ3JhbmRvbScsIGZ1bmN0aW9uKG1pbiwgbWF4KXsKCXJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pOwp9KTsKCi8vIGZvckVhY2gsIGVhY2gKCnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7Ck9iamVjdC5leHRlbmQoJ2ZvckVhY2gnLCBmdW5jdGlvbihvYmplY3QsIGZuLCBiaW5kKXsKCWZvciAodmFyIGtleSBpbiBvYmplY3QpewoJCWlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkgZm4uY2FsbChiaW5kLCBvYmplY3Rba2V5XSwga2V5LCBvYmplY3QpOwoJfQp9KTsKCk9iamVjdC5lYWNoID0gT2JqZWN0LmZvckVhY2g7CgpBcnJheS5pbXBsZW1lbnQoewoKCWZvckVhY2g6IGZ1bmN0aW9uKGZuLCBiaW5kKXsKCQlmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKXsKCQkJaWYgKGkgaW4gdGhpcykgZm4uY2FsbChiaW5kLCB0aGlzW2ldLCBpLCB0aGlzKTsKCQl9Cgl9LAoKCWVhY2g6IGZ1bmN0aW9uKGZuLCBiaW5kKXsKCQlBcnJheS5mb3JFYWNoKHRoaXMsIGZuLCBiaW5kKTsKCQlyZXR1cm4gdGhpczsKCX0KCn0pOwoKLy8gQXJyYXkgJiBPYmplY3QgY2xvbmluZywgT2JqZWN0IG1lcmdpbmcgYW5kIGFwcGVuZGluZwoKdmFyIGNsb25lT2YgPSBmdW5jdGlvbihpdGVtKXsKCXN3aXRjaCAodHlwZU9mKGl0ZW0pKXsKCQljYXNlICdhcnJheSc6IHJldHVybiBpdGVtLmNsb25lKCk7CgkJY2FzZSAnb2JqZWN0JzogcmV0dXJuIE9iamVjdC5jbG9uZShpdGVtKTsKCQlkZWZhdWx0OiByZXR1cm4gaXRlbTsKCX0KfTsKCkFycmF5LmltcGxlbWVudCgnY2xvbmUnLCBmdW5jdGlvbigpewoJdmFyIGkgPSB0aGlzLmxlbmd0aCwgY2xvbmUgPSBuZXcgQXJyYXkoaSk7Cgl3aGlsZSAoaS0tKSBjbG9uZVtpXSA9IGNsb25lT2YodGhpc1tpXSk7CglyZXR1cm4gY2xvbmU7Cn0pOwoKdmFyIG1lcmdlT25lID0gZnVuY3Rpb24oc291cmNlLCBrZXksIGN1cnJlbnQpewoJc3dpdGNoICh0eXBlT2YoY3VycmVudCkpewoJCWNhc2UgJ29iamVjdCc6CgkJCWlmICh0eXBlT2Yoc291cmNlW2tleV0pID09ICdvYmplY3QnKSBPYmplY3QubWVyZ2Uoc291cmNlW2tleV0sIGN1cnJlbnQpOwoJCQllbHNlIHNvdXJjZVtrZXldID0gT2JqZWN0LmNsb25lKGN1cnJlbnQpOwoJCWJyZWFrOwoJCWNhc2UgJ2FycmF5Jzogc291cmNlW2tleV0gPSBjdXJyZW50LmNsb25lKCk7IGJyZWFrOwoJCWRlZmF1bHQ6IHNvdXJjZVtrZXldID0gY3VycmVudDsKCX0KCXJldHVybiBzb3VyY2U7Cn07CgpPYmplY3QuZXh0ZW5kKHsKCgltZXJnZTogZnVuY3Rpb24oc291cmNlLCBrLCB2KXsKCQlpZiAodHlwZU9mKGspID09ICdzdHJpbmcnKSByZXR1cm4gbWVyZ2VPbmUoc291cmNlLCBrLCB2KTsKCQlmb3IgKHZhciBpID0gMSwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspewoJCQl2YXIgb2JqZWN0ID0gYXJndW1lbnRzW2ldOwoJCQlmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtZXJnZU9uZShzb3VyY2UsIGtleSwgb2JqZWN0W2tleV0pOwoJCX0KCQlyZXR1cm4gc291cmNlOwoJfSwKCgljbG9uZTogZnVuY3Rpb24ob2JqZWN0KXsKCQl2YXIgY2xvbmUgPSB7fTsKCQlmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBjbG9uZVtrZXldID0gY2xvbmVPZihvYmplY3Rba2V5XSk7CgkJcmV0dXJuIGNsb25lOwoJfSwKCglhcHBlbmQ6IGZ1bmN0aW9uKG9yaWdpbmFsKXsKCQlmb3IgKHZhciBpID0gMSwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspewoJCQl2YXIgZXh0ZW5kZWQgPSBhcmd1bWVudHNbaV0gfHwge307CgkJCWZvciAodmFyIGtleSBpbiBleHRlbmRlZCkgb3JpZ2luYWxba2V5XSA9IGV4dGVuZGVkW2tleV07CgkJfQoJCXJldHVybiBvcmlnaW5hbDsKCX0KCn0pOwoKLy8gT2JqZWN0LWxlc3MgdHlwZXMKClsnT2JqZWN0JywgJ1doaXRlU3BhY2UnLCAnVGV4dE5vZGUnLCAnQ29sbGVjdGlvbicsICdBcmd1bWVudHMnXS5lYWNoKGZ1bmN0aW9uKG5hbWUpewoJbmV3IFR5cGUobmFtZSk7Cn0pOwoKLy8gVW5pcXVlIElECgp2YXIgVUlEID0gRGF0ZS5ub3coKTsKClN0cmluZy5leHRlbmQoJ3VuaXF1ZUlEJywgZnVuY3Rpb24oKXsKCXJldHVybiAoVUlEKyspLnRvU3RyaW5nKDM2KTsKfSk7CgovLzwxLjJjb21wYXQ+Cgp2YXIgSGFzaCA9IHRoaXMuSGFzaCA9IG5ldyBUeXBlKCdIYXNoJywgZnVuY3Rpb24ob2JqZWN0KXsKCWlmICh0eXBlT2Yob2JqZWN0KSA9PSAnaGFzaCcpIG9iamVjdCA9IE9iamVjdC5jbG9uZShvYmplY3QuZ2V0Q2xlYW4oKSk7Cglmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB0aGlzW2tleV0gPSBvYmplY3Rba2V5XTsKCXJldHVybiB0aGlzOwp9KTsKCkhhc2guaW1wbGVtZW50KHsKCglmb3JFYWNoOiBmdW5jdGlvbihmbiwgYmluZCl7CgkJT2JqZWN0LmZvckVhY2godGhpcywgZm4sIGJpbmQpOwoJfSwKCglnZXRDbGVhbjogZnVuY3Rpb24oKXsKCQl2YXIgY2xlYW4gPSB7fTsKCQlmb3IgKHZhciBrZXkgaW4gdGhpcyl7CgkJCWlmICh0aGlzLmhhc093blByb3BlcnR5KGtleSkpIGNsZWFuW2tleV0gPSB0aGlzW2tleV07CgkJfQoJCXJldHVybiBjbGVhbjsKCX0sCgoJZ2V0TGVuZ3RoOiBmdW5jdGlvbigpewoJCXZhciBsZW5ndGggPSAwOwoJCWZvciAodmFyIGtleSBpbiB0aGlzKXsKCQkJaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSkgbGVuZ3RoKys7CgkJfQoJCXJldHVybiBsZW5ndGg7Cgl9Cgp9KTsKCkhhc2guYWxpYXMoJ2VhY2gnLCAnZm9yRWFjaCcpOwoKT2JqZWN0LnR5cGUgPSBUeXBlLmlzT2JqZWN0OwoKdmFyIE5hdGl2ZSA9IHRoaXMuTmF0aXZlID0gZnVuY3Rpb24ocHJvcGVydGllcyl7CglyZXR1cm4gbmV3IFR5cGUocHJvcGVydGllcy5uYW1lLCBwcm9wZXJ0aWVzLmluaXRpYWxpemUpOwp9OwoKTmF0aXZlLnR5cGUgPSBUeXBlLnR5cGU7CgpOYXRpdmUuaW1wbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0cywgbWV0aG9kcyl7Cglmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpKyspIG9iamVjdHNbaV0uaW1wbGVtZW50KG1ldGhvZHMpOwoJcmV0dXJuIE5hdGl2ZTsKfTsKCnZhciBhcnJheVR5cGUgPSBBcnJheS50eXBlOwpBcnJheS50eXBlID0gZnVuY3Rpb24oaXRlbSl7CglyZXR1cm4gaW5zdGFuY2VPZihpdGVtLCBBcnJheSkgfHwgYXJyYXlUeXBlKGl0ZW0pOwp9OwoKdGhpcy4kQSA9IGZ1bmN0aW9uKGl0ZW0pewoJcmV0dXJuIEFycmF5LmZyb20oaXRlbSkuc2xpY2UoKTsKfTsKCnRoaXMuJGFyZ3VtZW50cyA9IGZ1bmN0aW9uKGkpewoJcmV0dXJuIGZ1bmN0aW9uKCl7CgkJcmV0dXJuIGFyZ3VtZW50c1tpXTsKCX07Cn07Cgp0aGlzLiRjaGsgPSBmdW5jdGlvbihvYmopewoJcmV0dXJuICEhKG9iaiB8fCBvYmogPT09IDApOwp9OwoKdGhpcy4kY2xlYXIgPSBmdW5jdGlvbih0aW1lcil7CgljbGVhclRpbWVvdXQodGltZXIpOwoJY2xlYXJJbnRlcnZhbCh0aW1lcik7CglyZXR1cm4gbnVsbDsKfTsKCnRoaXMuJGRlZmluZWQgPSBmdW5jdGlvbihvYmopewoJcmV0dXJuIChvYmogIT0gbnVsbCk7Cn07Cgp0aGlzLiRlYWNoID0gZnVuY3Rpb24oaXRlcmFibGUsIGZuLCBiaW5kKXsKCXZhciB0eXBlID0gdHlwZU9mKGl0ZXJhYmxlKTsKCSgodHlwZSA9PSAnYXJndW1lbnRzJyB8fCB0eXBlID09ICdjb2xsZWN0aW9uJyB8fCB0eXBlID09ICdhcnJheScgfHwgdHlwZSA9PSAnZWxlbWVudHMnKSA/IEFycmF5IDogT2JqZWN0KS5lYWNoKGl0ZXJhYmxlLCBmbiwgYmluZCk7Cn07Cgp0aGlzLiRlbXB0eSA9IGZ1bmN0aW9uKCl7fTsKCnRoaXMuJGV4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbmFsLCBleHRlbmRlZCl7CglyZXR1cm4gT2JqZWN0LmFwcGVuZChvcmlnaW5hbCwgZXh0ZW5kZWQpOwp9OwoKdGhpcy4kSCA9IGZ1bmN0aW9uKG9iamVjdCl7CglyZXR1cm4gbmV3IEhhc2gob2JqZWN0KTsKfTsKCnRoaXMuJG1lcmdlID0gZnVuY3Rpb24oKXsKCXZhciBhcmdzID0gQXJyYXkuc2xpY2UoYXJndW1lbnRzKTsKCWFyZ3MudW5zaGlmdCh7fSk7CglyZXR1cm4gT2JqZWN0Lm1lcmdlLmFwcGx5KG51bGwsIGFyZ3MpOwp9OwoKdGhpcy4kbGFtYmRhID0gRnVuY3Rpb24uZnJvbTsKdGhpcy4kbWl4aW4gPSBPYmplY3QubWVyZ2U7CnRoaXMuJHJhbmRvbSA9IE51bWJlci5yYW5kb207CnRoaXMuJHNwbGF0ID0gQXJyYXkuZnJvbTsKdGhpcy4kdGltZSA9IERhdGUubm93OwoKdGhpcy4kdHlwZSA9IGZ1bmN0aW9uKG9iamVjdCl7Cgl2YXIgdHlwZSA9IHR5cGVPZihvYmplY3QpOwoJaWYgKHR5cGUgPT0gJ2VsZW1lbnRzJykgcmV0dXJuICdhcnJheSc7CglyZXR1cm4gKHR5cGUgPT0gJ251bGwnKSA/IGZhbHNlIDogdHlwZTsKfTsKCnRoaXMuJHVubGluayA9IGZ1bmN0aW9uKG9iamVjdCl7Cglzd2l0Y2ggKHR5cGVPZihvYmplY3QpKXsKCQljYXNlICdvYmplY3QnOiByZXR1cm4gT2JqZWN0LmNsb25lKG9iamVjdCk7CgkJY2FzZSAnYXJyYXknOiByZXR1cm4gQXJyYXkuY2xvbmUob2JqZWN0KTsKCQljYXNlICdoYXNoJzogcmV0dXJuIG5ldyBIYXNoKG9iamVjdCk7CgkJZGVmYXVsdDogcmV0dXJuIG9iamVjdDsKCX0KfTsKCi8vPC8xLjJjb21wYXQ+Cgp9KSgpOwoKCi8qCi0tLQoKbmFtZTogQXJyYXkKCmRlc2NyaXB0aW9uOiBDb250YWlucyBBcnJheSBQcm90b3R5cGVzIGxpa2UgZWFjaCwgY29udGFpbnMsIGFuZCBlcmFzZS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFR5cGUKCnByb3ZpZGVzOiBBcnJheQoKLi4uCiovCgpBcnJheS5pbXBsZW1lbnQoewoKCS8qPCFFUzU+Ki8KCWV2ZXJ5OiBmdW5jdGlvbihmbiwgYmluZCl7CgkJZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aCA+Pj4gMDsgaSA8IGw7IGkrKyl7CgkJCWlmICgoaSBpbiB0aGlzKSAmJiAhZm4uY2FsbChiaW5kLCB0aGlzW2ldLCBpLCB0aGlzKSkgcmV0dXJuIGZhbHNlOwoJCX0KCQlyZXR1cm4gdHJ1ZTsKCX0sCgoJZmlsdGVyOiBmdW5jdGlvbihmbiwgYmluZCl7CgkJdmFyIHJlc3VsdHMgPSBbXTsKCQlmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoID4+PiAwOyBpIDwgbDsgaSsrKXsKCQkJaWYgKChpIGluIHRoaXMpICYmIGZuLmNhbGwoYmluZCwgdGhpc1tpXSwgaSwgdGhpcykpIHJlc3VsdHMucHVzaCh0aGlzW2ldKTsKCQl9CgkJcmV0dXJuIHJlc3VsdHM7Cgl9LAoKCWluZGV4T2Y6IGZ1bmN0aW9uKGl0ZW0sIGZyb20pewoJCXZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCA+Pj4gMDsKCQlmb3IgKHZhciBpID0gKGZyb20gPCAwKSA/IE1hdGgubWF4KDAsIGxlbmd0aCArIGZyb20pIDogZnJvbSB8fCAwOyBpIDwgbGVuZ3RoOyBpKyspewoJCQlpZiAodGhpc1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7CgkJfQoJCXJldHVybiAtMTsKCX0sCgoJbWFwOiBmdW5jdGlvbihmbiwgYmluZCl7CgkJdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoID4+PiAwLCByZXN1bHRzID0gQXJyYXkobGVuZ3RoKTsKCQlmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXsKCQkJaWYgKGkgaW4gdGhpcykgcmVzdWx0c1tpXSA9IGZuLmNhbGwoYmluZCwgdGhpc1tpXSwgaSwgdGhpcyk7CgkJfQoJCXJldHVybiByZXN1bHRzOwoJfSwKCglzb21lOiBmdW5jdGlvbihmbiwgYmluZCl7CgkJZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aCA+Pj4gMDsgaSA8IGw7IGkrKyl7CgkJCWlmICgoaSBpbiB0aGlzKSAmJiBmbi5jYWxsKGJpbmQsIHRoaXNbaV0sIGksIHRoaXMpKSByZXR1cm4gdHJ1ZTsKCQl9CgkJcmV0dXJuIGZhbHNlOwoJfSwKCS8qPC8hRVM1PiovCgoJY2xlYW46IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pewoJCQlyZXR1cm4gaXRlbSAhPSBudWxsOwoJCX0pOwoJfSwKCglpbnZva2U6IGZ1bmN0aW9uKG1ldGhvZE5hbWUpewoJCXZhciBhcmdzID0gQXJyYXkuc2xpY2UoYXJndW1lbnRzLCAxKTsKCQlyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oaXRlbSl7CgkJCXJldHVybiBpdGVtW21ldGhvZE5hbWVdLmFwcGx5KGl0ZW0sIGFyZ3MpOwoJCX0pOwoJfSwKCglhc3NvY2lhdGU6IGZ1bmN0aW9uKGtleXMpewoJCXZhciBvYmogPSB7fSwgbGVuZ3RoID0gTWF0aC5taW4odGhpcy5sZW5ndGgsIGtleXMubGVuZ3RoKTsKCQlmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSBvYmpba2V5c1tpXV0gPSB0aGlzW2ldOwoJCXJldHVybiBvYmo7Cgl9LAoKCWxpbms6IGZ1bmN0aW9uKG9iamVjdCl7CgkJdmFyIHJlc3VsdCA9IHt9OwoJCWZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspewoJCQlmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKCQkJCWlmIChvYmplY3Rba2V5XSh0aGlzW2ldKSl7CgkJCQkJcmVzdWx0W2tleV0gPSB0aGlzW2ldOwoJCQkJCWRlbGV0ZSBvYmplY3Rba2V5XTsKCQkJCQlicmVhazsKCQkJCX0KCQkJfQoJCX0KCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgljb250YWluczogZnVuY3Rpb24oaXRlbSwgZnJvbSl7CgkJcmV0dXJuIHRoaXMuaW5kZXhPZihpdGVtLCBmcm9tKSAhPSAtMTsKCX0sCgoJYXBwZW5kOiBmdW5jdGlvbihhcnJheSl7CgkJdGhpcy5wdXNoLmFwcGx5KHRoaXMsIGFycmF5KTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJZ2V0TGFzdDogZnVuY3Rpb24oKXsKCQlyZXR1cm4gKHRoaXMubGVuZ3RoKSA/IHRoaXNbdGhpcy5sZW5ndGggLSAxXSA6IG51bGw7Cgl9LAoKCWdldFJhbmRvbTogZnVuY3Rpb24oKXsKCQlyZXR1cm4gKHRoaXMubGVuZ3RoKSA/IHRoaXNbTnVtYmVyLnJhbmRvbSgwLCB0aGlzLmxlbmd0aCAtIDEpXSA6IG51bGw7Cgl9LAoKCWluY2x1ZGU6IGZ1bmN0aW9uKGl0ZW0pewoJCWlmICghdGhpcy5jb250YWlucyhpdGVtKSkgdGhpcy5wdXNoKGl0ZW0pOwoJCXJldHVybiB0aGlzOwoJfSwKCgljb21iaW5lOiBmdW5jdGlvbihhcnJheSl7CgkJZm9yICh2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHRoaXMuaW5jbHVkZShhcnJheVtpXSk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWVyYXNlOiBmdW5jdGlvbihpdGVtKXsKCQlmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGktLTspewoJCQlpZiAodGhpc1tpXSA9PT0gaXRlbSkgdGhpcy5zcGxpY2UoaSwgMSk7CgkJfQoJCXJldHVybiB0aGlzOwoJfSwKCgllbXB0eTogZnVuY3Rpb24oKXsKCQl0aGlzLmxlbmd0aCA9IDA7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWZsYXR0ZW46IGZ1bmN0aW9uKCl7CgkJdmFyIGFycmF5ID0gW107CgkJZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CgkJCXZhciB0eXBlID0gdHlwZU9mKHRoaXNbaV0pOwoJCQlpZiAodHlwZSA9PSAnbnVsbCcpIGNvbnRpbnVlOwoJCQlhcnJheSA9IGFycmF5LmNvbmNhdCgodHlwZSA9PSAnYXJyYXknIHx8IHR5cGUgPT0gJ2NvbGxlY3Rpb24nIHx8IHR5cGUgPT0gJ2FyZ3VtZW50cycgfHwgaW5zdGFuY2VPZih0aGlzW2ldLCBBcnJheSkpID8gQXJyYXkuZmxhdHRlbih0aGlzW2ldKSA6IHRoaXNbaV0pOwoJCX0KCQlyZXR1cm4gYXJyYXk7Cgl9LAoKCXBpY2s6IGZ1bmN0aW9uKCl7CgkJZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CgkJCWlmICh0aGlzW2ldICE9IG51bGwpIHJldHVybiB0aGlzW2ldOwoJCX0KCQlyZXR1cm4gbnVsbDsKCX0sCgoJaGV4VG9SZ2I6IGZ1bmN0aW9uKGFycmF5KXsKCQlpZiAodGhpcy5sZW5ndGggIT0gMykgcmV0dXJuIG51bGw7CgkJdmFyIHJnYiA9IHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKXsKCQkJaWYgKHZhbHVlLmxlbmd0aCA9PSAxKSB2YWx1ZSArPSB2YWx1ZTsKCQkJcmV0dXJuIHZhbHVlLnRvSW50KDE2KTsKCQl9KTsKCQlyZXR1cm4gKGFycmF5KSA/IHJnYiA6ICdyZ2IoJyArIHJnYiArICcpJzsKCX0sCgoJcmdiVG9IZXg6IGZ1bmN0aW9uKGFycmF5KXsKCQlpZiAodGhpcy5sZW5ndGggPCAzKSByZXR1cm4gbnVsbDsKCQlpZiAodGhpcy5sZW5ndGggPT0gNCAmJiB0aGlzWzNdID09IDAgJiYgIWFycmF5KSByZXR1cm4gJ3RyYW5zcGFyZW50JzsKCQl2YXIgaGV4ID0gW107CgkJZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspewoJCQl2YXIgYml0ID0gKHRoaXNbaV0gLSAwKS50b1N0cmluZygxNik7CgkJCWhleC5wdXNoKChiaXQubGVuZ3RoID09IDEpID8gJzAnICsgYml0IDogYml0KTsKCQl9CgkJcmV0dXJuIChhcnJheSkgPyBoZXggOiAnIycgKyBoZXguam9pbignJyk7Cgl9Cgp9KTsKCi8vPDEuMmNvbXBhdD4KCkFycmF5LmFsaWFzKCdleHRlbmQnLCAnYXBwZW5kJyk7Cgp2YXIgJHBpY2sgPSBmdW5jdGlvbigpewoJcmV0dXJuIEFycmF5LmZyb20oYXJndW1lbnRzKS5waWNrKCk7Cn07CgovLzwvMS4yY29tcGF0PgoKCi8qCi0tLQoKbmFtZTogU3RyaW5nCgpkZXNjcmlwdGlvbjogQ29udGFpbnMgU3RyaW5nIFByb3RvdHlwZXMgbGlrZSBjYW1lbENhc2UsIGNhcGl0YWxpemUsIHRlc3QsIGFuZCB0b0ludC4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFR5cGUKCnByb3ZpZGVzOiBTdHJpbmcKCi4uLgoqLwoKU3RyaW5nLmltcGxlbWVudCh7CgoJdGVzdDogZnVuY3Rpb24ocmVnZXgsIHBhcmFtcyl7CgkJcmV0dXJuICgodHlwZU9mKHJlZ2V4KSA9PSAncmVnZXhwJykgPyByZWdleCA6IG5ldyBSZWdFeHAoJycgKyByZWdleCwgcGFyYW1zKSkudGVzdCh0aGlzKTsKCX0sCgoJY29udGFpbnM6IGZ1bmN0aW9uKHN0cmluZywgc2VwYXJhdG9yKXsKCQlyZXR1cm4gKHNlcGFyYXRvcikgPyAoc2VwYXJhdG9yICsgdGhpcyArIHNlcGFyYXRvcikuaW5kZXhPZihzZXBhcmF0b3IgKyBzdHJpbmcgKyBzZXBhcmF0b3IpID4gLTEgOiBTdHJpbmcodGhpcykuaW5kZXhPZihzdHJpbmcpID4gLTE7Cgl9LAoKCXRyaW06IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC9eXHMrfFxzKyQvZywgJycpOwoJfSwKCgljbGVhbjogZnVuY3Rpb24oKXsKCQlyZXR1cm4gU3RyaW5nKHRoaXMpLnJlcGxhY2UoL1xzKy9nLCAnICcpLnRyaW0oKTsKCX0sCgoJY2FtZWxDYXNlOiBmdW5jdGlvbigpewoJCXJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvLVxEL2csIGZ1bmN0aW9uKG1hdGNoKXsKCQkJcmV0dXJuIG1hdGNoLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpOwoJCX0pOwoJfSwKCgloeXBoZW5hdGU6IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbihtYXRjaCl7CgkJCXJldHVybiAoJy0nICsgbWF0Y2guY2hhckF0KDApLnRvTG93ZXJDYXNlKCkpOwoJCX0pOwoJfSwKCgljYXBpdGFsaXplOiBmdW5jdGlvbigpewoJCXJldHVybiBTdHJpbmcodGhpcykucmVwbGFjZSgvXGJbYS16XS9nLCBmdW5jdGlvbihtYXRjaCl7CgkJCXJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOwoJCX0pOwoJfSwKCgllc2NhcGVSZWdFeHA6IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKC8oWy0uKis/XiR7fSgpfFtcXVwvXFxdKS9nLCAnXFwkMScpOwoJfSwKCgl0b0ludDogZnVuY3Rpb24oYmFzZSl7CgkJcmV0dXJuIHBhcnNlSW50KHRoaXMsIGJhc2UgfHwgMTApOwoJfSwKCgl0b0Zsb2F0OiBmdW5jdGlvbigpewoJCXJldHVybiBwYXJzZUZsb2F0KHRoaXMpOwoJfSwKCgloZXhUb1JnYjogZnVuY3Rpb24oYXJyYXkpewoJCXZhciBoZXggPSBTdHJpbmcodGhpcykubWF0Y2goL14jPyhcd3sxLDJ9KShcd3sxLDJ9KShcd3sxLDJ9KSQvKTsKCQlyZXR1cm4gKGhleCkgPyBoZXguc2xpY2UoMSkuaGV4VG9SZ2IoYXJyYXkpIDogbnVsbDsKCX0sCgoJcmdiVG9IZXg6IGZ1bmN0aW9uKGFycmF5KXsKCQl2YXIgcmdiID0gU3RyaW5nKHRoaXMpLm1hdGNoKC9cZHsxLDN9L2cpOwoJCXJldHVybiAocmdiKSA/IHJnYi5yZ2JUb0hleChhcnJheSkgOiBudWxsOwoJfSwKCglzdWJzdGl0dXRlOiBmdW5jdGlvbihvYmplY3QsIHJlZ2V4cCl7CgkJcmV0dXJuIFN0cmluZyh0aGlzKS5yZXBsYWNlKHJlZ2V4cCB8fCAoL1xcP1x7KFtee31dKylcfS9nKSwgZnVuY3Rpb24obWF0Y2gsIG5hbWUpewoJCQlpZiAobWF0Y2guY2hhckF0KDApID09ICdcXCcpIHJldHVybiBtYXRjaC5zbGljZSgxKTsKCQkJcmV0dXJuIChvYmplY3RbbmFtZV0gIT0gbnVsbCkgPyBvYmplY3RbbmFtZV0gOiAnJzsKCQl9KTsKCX0KCn0pOwoKCi8qCi0tLQoKbmFtZTogTnVtYmVyCgpkZXNjcmlwdGlvbjogQ29udGFpbnMgTnVtYmVyIFByb3RvdHlwZXMgbGlrZSBsaW1pdCwgcm91bmQsIHRpbWVzLCBhbmQgY2VpbC4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFR5cGUKCnByb3ZpZGVzOiBOdW1iZXIKCi4uLgoqLwoKTnVtYmVyLmltcGxlbWVudCh7CgoJbGltaXQ6IGZ1bmN0aW9uKG1pbiwgbWF4KXsKCQlyZXR1cm4gTWF0aC5taW4obWF4LCBNYXRoLm1heChtaW4sIHRoaXMpKTsKCX0sCgoJcm91bmQ6IGZ1bmN0aW9uKHByZWNpc2lvbil7CgkJcHJlY2lzaW9uID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbiB8fCAwKS50b0ZpeGVkKHByZWNpc2lvbiA8IDAgPyAtcHJlY2lzaW9uIDogMCk7CgkJcmV0dXJuIE1hdGgucm91bmQodGhpcyAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247Cgl9LAoKCXRpbWVzOiBmdW5jdGlvbihmbiwgYmluZCl7CgkJZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzOyBpKyspIGZuLmNhbGwoYmluZCwgaSwgdGhpcyk7Cgl9LAoKCXRvRmxvYXQ6IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIHBhcnNlRmxvYXQodGhpcyk7Cgl9LAoKCXRvSW50OiBmdW5jdGlvbihiYXNlKXsKCQlyZXR1cm4gcGFyc2VJbnQodGhpcywgYmFzZSB8fCAxMCk7Cgl9Cgp9KTsKCk51bWJlci5hbGlhcygnZWFjaCcsICd0aW1lcycpOwoKKGZ1bmN0aW9uKG1hdGgpewoJdmFyIG1ldGhvZHMgPSB7fTsKCW1hdGguZWFjaChmdW5jdGlvbihuYW1lKXsKCQlpZiAoIU51bWJlcltuYW1lXSkgbWV0aG9kc1tuYW1lXSA9IGZ1bmN0aW9uKCl7CgkJCXJldHVybiBNYXRoW25hbWVdLmFwcGx5KG51bGwsIFt0aGlzXS5jb25jYXQoQXJyYXkuZnJvbShhcmd1bWVudHMpKSk7CgkJfTsKCX0pOwoJTnVtYmVyLmltcGxlbWVudChtZXRob2RzKTsKfSkoWydhYnMnLCAnYWNvcycsICdhc2luJywgJ2F0YW4nLCAnYXRhbjInLCAnY2VpbCcsICdjb3MnLCAnZXhwJywgJ2Zsb29yJywgJ2xvZycsICdtYXgnLCAnbWluJywgJ3BvdycsICdzaW4nLCAnc3FydCcsICd0YW4nXSk7CgoKLyoKLS0tCgpuYW1lOiBGdW5jdGlvbgoKZGVzY3JpcHRpb246IENvbnRhaW5zIEZ1bmN0aW9uIFByb3RvdHlwZXMgbGlrZSBjcmVhdGUsIGJpbmQsIHBhc3MsIGFuZCBkZWxheS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFR5cGUKCnByb3ZpZGVzOiBGdW5jdGlvbgoKLi4uCiovCgpGdW5jdGlvbi5leHRlbmQoewoKCWF0dGVtcHQ6IGZ1bmN0aW9uKCl7CgkJZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKXsKCQkJdHJ5IHsKCQkJCXJldHVybiBhcmd1bWVudHNbaV0oKTsKCQkJfSBjYXRjaCAoZSl7fQoJCX0KCQlyZXR1cm4gbnVsbDsKCX0KCn0pOwoKRnVuY3Rpb24uaW1wbGVtZW50KHsKCglhdHRlbXB0OiBmdW5jdGlvbihhcmdzLCBiaW5kKXsKCQl0cnkgewoJCQlyZXR1cm4gdGhpcy5hcHBseShiaW5kLCBBcnJheS5mcm9tKGFyZ3MpKTsKCQl9IGNhdGNoIChlKXt9CgoJCXJldHVybiBudWxsOwoJfSwKCgkvKjwhRVM1LWJpbmQ+Ki8KCWJpbmQ6IGZ1bmN0aW9uKHRoYXQpewoJCXZhciBzZWxmID0gdGhpcywKCQkJYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gQXJyYXkuc2xpY2UoYXJndW1lbnRzLCAxKSA6IG51bGwsCgkJCUYgPSBmdW5jdGlvbigpe307CgoJCXZhciBib3VuZCA9IGZ1bmN0aW9uKCl7CgkJCXZhciBjb250ZXh0ID0gdGhhdCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKCQkJaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCl7CgkJCQlGLnByb3RvdHlwZSA9IHNlbGYucHJvdG90eXBlOwoJCQkJY29udGV4dCA9IG5ldyBGOwoJCQl9CgkJCXZhciByZXN1bHQgPSAoIWFyZ3MgJiYgIWxlbmd0aCkKCQkJCT8gc2VsZi5jYWxsKGNvbnRleHQpCgkJCQk6IHNlbGYuYXBwbHkoY29udGV4dCwgYXJncyAmJiBsZW5ndGggPyBhcmdzLmNvbmNhdChBcnJheS5zbGljZShhcmd1bWVudHMpKSA6IGFyZ3MgfHwgYXJndW1lbnRzKTsKCQkJcmV0dXJuIGNvbnRleHQgPT0gdGhhdCA/IHJlc3VsdCA6IGNvbnRleHQ7CgkJfTsKCQlyZXR1cm4gYm91bmQ7Cgl9LAoJLyo8LyFFUzUtYmluZD4qLwoKCXBhc3M6IGZ1bmN0aW9uKGFyZ3MsIGJpbmQpewoJCXZhciBzZWxmID0gdGhpczsKCQlpZiAoYXJncyAhPSBudWxsKSBhcmdzID0gQXJyYXkuZnJvbShhcmdzKTsKCQlyZXR1cm4gZnVuY3Rpb24oKXsKCQkJcmV0dXJuIHNlbGYuYXBwbHkoYmluZCwgYXJncyB8fCBhcmd1bWVudHMpOwoJCX07Cgl9LAoKCWRlbGF5OiBmdW5jdGlvbihkZWxheSwgYmluZCwgYXJncyl7CgkJcmV0dXJuIHNldFRpbWVvdXQodGhpcy5wYXNzKChhcmdzID09IG51bGwgPyBbXSA6IGFyZ3MpLCBiaW5kKSwgZGVsYXkpOwoJfSwKCglwZXJpb2RpY2FsOiBmdW5jdGlvbihwZXJpb2RpY2FsLCBiaW5kLCBhcmdzKXsKCQlyZXR1cm4gc2V0SW50ZXJ2YWwodGhpcy5wYXNzKChhcmdzID09IG51bGwgPyBbXSA6IGFyZ3MpLCBiaW5kKSwgcGVyaW9kaWNhbCk7Cgl9Cgp9KTsKCi8vPDEuMmNvbXBhdD4KCmRlbGV0ZSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDsKCkZ1bmN0aW9uLmltcGxlbWVudCh7CgoJY3JlYXRlOiBmdW5jdGlvbihvcHRpb25zKXsKCQl2YXIgc2VsZiA9IHRoaXM7CgkJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgkJcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KXsKCQkJdmFyIGFyZ3MgPSBvcHRpb25zLmFyZ3VtZW50czsKCQkJYXJncyA9IChhcmdzICE9IG51bGwpID8gQXJyYXkuZnJvbShhcmdzKSA6IEFycmF5LnNsaWNlKGFyZ3VtZW50cywgKG9wdGlvbnMuZXZlbnQpID8gMSA6IDApOwoJCQlpZiAob3B0aW9ucy5ldmVudCkgYXJncyA9IFtldmVudCB8fCB3aW5kb3cuZXZlbnRdLmV4dGVuZChhcmdzKTsKCQkJdmFyIHJldHVybnMgPSBmdW5jdGlvbigpewoJCQkJcmV0dXJuIHNlbGYuYXBwbHkob3B0aW9ucy5iaW5kIHx8IG51bGwsIGFyZ3MpOwoJCQl9OwoJCQlpZiAob3B0aW9ucy5kZWxheSkgcmV0dXJuIHNldFRpbWVvdXQocmV0dXJucywgb3B0aW9ucy5kZWxheSk7CgkJCWlmIChvcHRpb25zLnBlcmlvZGljYWwpIHJldHVybiBzZXRJbnRlcnZhbChyZXR1cm5zLCBvcHRpb25zLnBlcmlvZGljYWwpOwoJCQlpZiAob3B0aW9ucy5hdHRlbXB0KSByZXR1cm4gRnVuY3Rpb24uYXR0ZW1wdChyZXR1cm5zKTsKCQkJcmV0dXJuIHJldHVybnMoKTsKCQl9OwoJfSwKCgliaW5kOiBmdW5jdGlvbihiaW5kLCBhcmdzKXsKCQl2YXIgc2VsZiA9IHRoaXM7CgkJaWYgKGFyZ3MgIT0gbnVsbCkgYXJncyA9IEFycmF5LmZyb20oYXJncyk7CgkJcmV0dXJuIGZ1bmN0aW9uKCl7CgkJCXJldHVybiBzZWxmLmFwcGx5KGJpbmQsIGFyZ3MgfHwgYXJndW1lbnRzKTsKCQl9OwoJfSwKCgliaW5kV2l0aEV2ZW50OiBmdW5jdGlvbihiaW5kLCBhcmdzKXsKCQl2YXIgc2VsZiA9IHRoaXM7CgkJaWYgKGFyZ3MgIT0gbnVsbCkgYXJncyA9IEFycmF5LmZyb20oYXJncyk7CgkJcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KXsKCQkJcmV0dXJuIHNlbGYuYXBwbHkoYmluZCwgKGFyZ3MgPT0gbnVsbCkgPyBhcmd1bWVudHMgOiBbZXZlbnRdLmNvbmNhdChhcmdzKSk7CgkJfTsKCX0sCgoJcnVuOiBmdW5jdGlvbihhcmdzLCBiaW5kKXsKCQlyZXR1cm4gdGhpcy5hcHBseShiaW5kLCBBcnJheS5mcm9tKGFyZ3MpKTsKCX0KCn0pOwoKaWYgKE9iamVjdC5jcmVhdGUgPT0gRnVuY3Rpb24ucHJvdG90eXBlLmNyZWF0ZSkgT2JqZWN0LmNyZWF0ZSA9IG51bGw7Cgp2YXIgJHRyeSA9IEZ1bmN0aW9uLmF0dGVtcHQ7CgovLzwvMS4yY29tcGF0PgoKCi8qCi0tLQoKbmFtZTogT2JqZWN0CgpkZXNjcmlwdGlvbjogT2JqZWN0IGdlbmVyaWMgbWV0aG9kcwoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogVHlwZQoKcHJvdmlkZXM6IFtPYmplY3QsIEhhc2hdCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKCk9iamVjdC5leHRlbmQoewoKCXN1YnNldDogZnVuY3Rpb24ob2JqZWN0LCBrZXlzKXsKCQl2YXIgcmVzdWx0cyA9IHt9OwoJCWZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspewoJCQl2YXIgayA9IGtleXNbaV07CgkJCWlmIChrIGluIG9iamVjdCkgcmVzdWx0c1trXSA9IG9iamVjdFtrXTsKCQl9CgkJcmV0dXJuIHJlc3VsdHM7Cgl9LAoKCW1hcDogZnVuY3Rpb24ob2JqZWN0LCBmbiwgYmluZCl7CgkJdmFyIHJlc3VsdHMgPSB7fTsKCQlmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKCQkJaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSByZXN1bHRzW2tleV0gPSBmbi5jYWxsKGJpbmQsIG9iamVjdFtrZXldLCBrZXksIG9iamVjdCk7CgkJfQoJCXJldHVybiByZXN1bHRzOwoJfSwKCglmaWx0ZXI6IGZ1bmN0aW9uKG9iamVjdCwgZm4sIGJpbmQpewoJCXZhciByZXN1bHRzID0ge307CgkJZm9yICh2YXIga2V5IGluIG9iamVjdCl7CgkJCXZhciB2YWx1ZSA9IG9iamVjdFtrZXldOwoJCQlpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZm4uY2FsbChiaW5kLCB2YWx1ZSwga2V5LCBvYmplY3QpKSByZXN1bHRzW2tleV0gPSB2YWx1ZTsKCQl9CgkJcmV0dXJuIHJlc3VsdHM7Cgl9LAoKCWV2ZXJ5OiBmdW5jdGlvbihvYmplY3QsIGZuLCBiaW5kKXsKCQlmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKCQkJaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmICFmbi5jYWxsKGJpbmQsIG9iamVjdFtrZXldLCBrZXkpKSByZXR1cm4gZmFsc2U7CgkJfQoJCXJldHVybiB0cnVlOwoJfSwKCglzb21lOiBmdW5jdGlvbihvYmplY3QsIGZuLCBiaW5kKXsKCQlmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKCQkJaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGZuLmNhbGwoYmluZCwgb2JqZWN0W2tleV0sIGtleSkpIHJldHVybiB0cnVlOwoJCX0KCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCWtleXM6IGZ1bmN0aW9uKG9iamVjdCl7CgkJdmFyIGtleXMgPSBbXTsKCQlmb3IgKHZhciBrZXkgaW4gb2JqZWN0KXsKCQkJaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSBrZXlzLnB1c2goa2V5KTsKCQl9CgkJcmV0dXJuIGtleXM7Cgl9LAoKCXZhbHVlczogZnVuY3Rpb24ob2JqZWN0KXsKCQl2YXIgdmFsdWVzID0gW107CgkJZm9yICh2YXIga2V5IGluIG9iamVjdCl7CgkJCWlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkgdmFsdWVzLnB1c2gob2JqZWN0W2tleV0pOwoJCX0KCQlyZXR1cm4gdmFsdWVzOwoJfSwKCglnZXRMZW5ndGg6IGZ1bmN0aW9uKG9iamVjdCl7CgkJcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoOwoJfSwKCglrZXlPZjogZnVuY3Rpb24ob2JqZWN0LCB2YWx1ZSl7CgkJZm9yICh2YXIga2V5IGluIG9iamVjdCl7CgkJCWlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBvYmplY3Rba2V5XSA9PT0gdmFsdWUpIHJldHVybiBrZXk7CgkJfQoJCXJldHVybiBudWxsOwoJfSwKCgljb250YWluczogZnVuY3Rpb24ob2JqZWN0LCB2YWx1ZSl7CgkJcmV0dXJuIE9iamVjdC5rZXlPZihvYmplY3QsIHZhbHVlKSAhPSBudWxsOwoJfSwKCgl0b1F1ZXJ5U3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIGJhc2UpewoJCXZhciBxdWVyeVN0cmluZyA9IFtdOwoKCQlPYmplY3QuZWFjaChvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpewoJCQlpZiAoYmFzZSkga2V5ID0gYmFzZSArICdbJyArIGtleSArICddJzsKCQkJdmFyIHJlc3VsdDsKCQkJc3dpdGNoICh0eXBlT2YodmFsdWUpKXsKCQkJCWNhc2UgJ29iamVjdCc6IHJlc3VsdCA9IE9iamVjdC50b1F1ZXJ5U3RyaW5nKHZhbHVlLCBrZXkpOyBicmVhazsKCQkJCWNhc2UgJ2FycmF5JzoKCQkJCQl2YXIgcXMgPSB7fTsKCQkJCQl2YWx1ZS5lYWNoKGZ1bmN0aW9uKHZhbCwgaSl7CgkJCQkJCXFzW2ldID0gdmFsOwoJCQkJCX0pOwoJCQkJCXJlc3VsdCA9IE9iamVjdC50b1F1ZXJ5U3RyaW5nKHFzLCBrZXkpOwoJCQkJYnJlYWs7CgkJCQlkZWZhdWx0OiByZXN1bHQgPSBrZXkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpOwoJCQl9CgkJCWlmICh2YWx1ZSAhPSBudWxsKSBxdWVyeVN0cmluZy5wdXNoKHJlc3VsdCk7CgkJfSk7CgoJCXJldHVybiBxdWVyeVN0cmluZy5qb2luKCcmJyk7Cgl9Cgp9KTsKCn0pKCk7CgovLzwxLjJjb21wYXQ+CgpIYXNoLmltcGxlbWVudCh7CgoJaGFzOiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LAoKCWtleU9mOiBmdW5jdGlvbih2YWx1ZSl7CgkJcmV0dXJuIE9iamVjdC5rZXlPZih0aGlzLCB2YWx1ZSk7Cgl9LAoKCWhhc1ZhbHVlOiBmdW5jdGlvbih2YWx1ZSl7CgkJcmV0dXJuIE9iamVjdC5jb250YWlucyh0aGlzLCB2YWx1ZSk7Cgl9LAoKCWV4dGVuZDogZnVuY3Rpb24ocHJvcGVydGllcyl7CgkJSGFzaC5lYWNoKHByb3BlcnRpZXMgfHwge30sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpewoJCQlIYXNoLnNldCh0aGlzLCBrZXksIHZhbHVlKTsKCQl9LCB0aGlzKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJY29tYmluZTogZnVuY3Rpb24ocHJvcGVydGllcyl7CgkJSGFzaC5lYWNoKHByb3BlcnRpZXMgfHwge30sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpewoJCQlIYXNoLmluY2x1ZGUodGhpcywga2V5LCB2YWx1ZSk7CgkJfSwgdGhpcyk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWVyYXNlOiBmdW5jdGlvbihrZXkpewoJCWlmICh0aGlzLmhhc093blByb3BlcnR5KGtleSkpIGRlbGV0ZSB0aGlzW2tleV07CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWdldDogZnVuY3Rpb24oa2V5KXsKCQlyZXR1cm4gKHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSkgPyB0aGlzW2tleV0gOiBudWxsOwoJfSwKCglzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpewoJCWlmICghdGhpc1trZXldIHx8IHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSkgdGhpc1trZXldID0gdmFsdWU7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWVtcHR5OiBmdW5jdGlvbigpewoJCUhhc2guZWFjaCh0aGlzLCBmdW5jdGlvbih2YWx1ZSwga2V5KXsKCQkJZGVsZXRlIHRoaXNba2V5XTsKCQl9LCB0aGlzKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJaW5jbHVkZTogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7CgkJaWYgKHRoaXNba2V5XSA9PSBudWxsKSB0aGlzW2tleV0gPSB2YWx1ZTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJbWFwOiBmdW5jdGlvbihmbiwgYmluZCl7CgkJcmV0dXJuIG5ldyBIYXNoKE9iamVjdC5tYXAodGhpcywgZm4sIGJpbmQpKTsKCX0sCgoJZmlsdGVyOiBmdW5jdGlvbihmbiwgYmluZCl7CgkJcmV0dXJuIG5ldyBIYXNoKE9iamVjdC5maWx0ZXIodGhpcywgZm4sIGJpbmQpKTsKCX0sCgoJZXZlcnk6IGZ1bmN0aW9uKGZuLCBiaW5kKXsKCQlyZXR1cm4gT2JqZWN0LmV2ZXJ5KHRoaXMsIGZuLCBiaW5kKTsKCX0sCgoJc29tZTogZnVuY3Rpb24oZm4sIGJpbmQpewoJCXJldHVybiBPYmplY3Quc29tZSh0aGlzLCBmbiwgYmluZCk7Cgl9LAoKCWdldEtleXM6IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMpOwoJfSwKCglnZXRWYWx1ZXM6IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcyk7Cgl9LAoKCXRvUXVlcnlTdHJpbmc6IGZ1bmN0aW9uKGJhc2UpewoJCXJldHVybiBPYmplY3QudG9RdWVyeVN0cmluZyh0aGlzLCBiYXNlKTsKCX0KCn0pOwoKSGFzaC5leHRlbmQgPSBPYmplY3QuYXBwZW5kOwoKSGFzaC5hbGlhcyh7aW5kZXhPZjogJ2tleU9mJywgY29udGFpbnM6ICdoYXNWYWx1ZSd9KTsKCi8vPC8xLjJjb21wYXQ+CgoKLyoKLS0tCgpuYW1lOiBCcm93c2VyCgpkZXNjcmlwdGlvbjogVGhlIEJyb3dzZXIgT2JqZWN0LiBDb250YWlucyBCcm93c2VyIGluaXRpYWxpemF0aW9uLCBXaW5kb3cgYW5kIERvY3VtZW50LCBhbmQgdGhlIEJyb3dzZXIgSGFzaC4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtBcnJheSwgRnVuY3Rpb24sIE51bWJlciwgU3RyaW5nXQoKcHJvdmlkZXM6IFtCcm93c2VyLCBXaW5kb3csIERvY3VtZW50XQoKLi4uCiovCgooZnVuY3Rpb24oKXsKCnZhciBkb2N1bWVudCA9IHRoaXMuZG9jdW1lbnQ7CnZhciB3aW5kb3cgPSBkb2N1bWVudC53aW5kb3cgPSB0aGlzOwoKdmFyIFVJRCA9IDE7Cgp0aGlzLiR1aWQgPSAod2luZG93LkFjdGl2ZVhPYmplY3QpID8gZnVuY3Rpb24oaXRlbSl7CglyZXR1cm4gKGl0ZW0udWlkIHx8IChpdGVtLnVpZCA9IFtVSUQrK10pKVswXTsKfSA6IGZ1bmN0aW9uKGl0ZW0pewoJcmV0dXJuIGl0ZW0udWlkIHx8IChpdGVtLnVpZCA9IFVJRCsrKTsKfTsKCiR1aWQod2luZG93KTsKJHVpZChkb2N1bWVudCk7Cgp2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCksCglwbGF0Zm9ybSA9IG5hdmlnYXRvci5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpLAoJVUEgPSB1YS5tYXRjaCgvKG9wZXJhfGllfGZpcmVmb3h8Y2hyb21lfHZlcnNpb24pW1xzXC86XShbXHdcZFwuXSspPy4qPyhzYWZhcml8dmVyc2lvbltcc1wvOl0oW1x3XGRcLl0rKXwkKS8pIHx8IFtudWxsLCAndW5rbm93bicsIDBdLAoJbW9kZSA9IFVBWzFdID09ICdpZScgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlOwoKdmFyIEJyb3dzZXIgPSB0aGlzLkJyb3dzZXIgPSB7CgoJZXh0ZW5kOiBGdW5jdGlvbi5wcm90b3R5cGUuZXh0ZW5kLAoKCW5hbWU6IChVQVsxXSA9PSAndmVyc2lvbicpID8gVUFbM10gOiBVQVsxXSwKCgl2ZXJzaW9uOiBtb2RlIHx8IHBhcnNlRmxvYXQoKFVBWzFdID09ICdvcGVyYScgJiYgVUFbNF0pID8gVUFbNF0gOiBVQVsyXSksCgoJUGxhdGZvcm06IHsKCQluYW1lOiB1YS5tYXRjaCgvaXAoPzphZHxvZHxob25lKS8pID8gJ2lvcycgOiAodWEubWF0Y2goLyg/OndlYm9zfGFuZHJvaWQpLykgfHwgcGxhdGZvcm0ubWF0Y2goL21hY3x3aW58bGludXgvKSB8fCBbJ290aGVyJ10pWzBdCgl9LAoKCUZlYXR1cmVzOiB7CgkJeHBhdGg6ICEhKGRvY3VtZW50LmV2YWx1YXRlKSwKCQlhaXI6ICEhKHdpbmRvdy5ydW50aW1lKSwKCQlxdWVyeTogISEoZG9jdW1lbnQucXVlcnlTZWxlY3RvciksCgkJanNvbjogISEod2luZG93LkpTT04pCgl9LAoKCVBsdWdpbnM6IHt9Cgp9OwoKQnJvd3NlcltCcm93c2VyLm5hbWVdID0gdHJ1ZTsKQnJvd3NlcltCcm93c2VyLm5hbWUgKyBwYXJzZUludChCcm93c2VyLnZlcnNpb24sIDEwKV0gPSB0cnVlOwpCcm93c2VyLlBsYXRmb3JtW0Jyb3dzZXIuUGxhdGZvcm0ubmFtZV0gPSB0cnVlOwoKLy8gUmVxdWVzdAoKQnJvd3Nlci5SZXF1ZXN0ID0gKGZ1bmN0aW9uKCl7CgoJdmFyIFhNTEhUVFAgPSBmdW5jdGlvbigpewoJCXJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCX07CgoJdmFyIE1TWE1MMiA9IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNU1hNTDIuWE1MSFRUUCcpOwoJfTsKCgl2YXIgTVNYTUwgPSBmdW5jdGlvbigpewoJCXJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTEhUVFAnKTsKCX07CgoJcmV0dXJuIEZ1bmN0aW9uLmF0dGVtcHQoZnVuY3Rpb24oKXsKCQlYTUxIVFRQKCk7CgkJcmV0dXJuIFhNTEhUVFA7Cgl9LCBmdW5jdGlvbigpewoJCU1TWE1MMigpOwoJCXJldHVybiBNU1hNTDI7Cgl9LCBmdW5jdGlvbigpewoJCU1TWE1MKCk7CgkJcmV0dXJuIE1TWE1MOwoJfSk7Cgp9KSgpOwoKQnJvd3Nlci5GZWF0dXJlcy54aHIgPSAhIShCcm93c2VyLlJlcXVlc3QpOwoKLy8gRmxhc2ggZGV0ZWN0aW9uCgp2YXIgdmVyc2lvbiA9IChGdW5jdGlvbi5hdHRlbXB0KGZ1bmN0aW9uKCl7CglyZXR1cm4gbmF2aWdhdG9yLnBsdWdpbnNbJ1Nob2Nrd2F2ZSBGbGFzaCddLmRlc2NyaXB0aW9uOwp9LCBmdW5jdGlvbigpewoJcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaCcpLkdldFZhcmlhYmxlKCckdmVyc2lvbicpOwp9KSB8fCAnMCByMCcpLm1hdGNoKC9cZCsvZyk7CgpCcm93c2VyLlBsdWdpbnMuRmxhc2ggPSB7Cgl2ZXJzaW9uOiBOdW1iZXIodmVyc2lvblswXSB8fCAnMC4nICsgdmVyc2lvblsxXSkgfHwgMCwKCWJ1aWxkOiBOdW1iZXIodmVyc2lvblsyXSkgfHwgMAp9OwoKLy8gU3RyaW5nIHNjcmlwdHMKCkJyb3dzZXIuZXhlYyA9IGZ1bmN0aW9uKHRleHQpewoJaWYgKCF0ZXh0KSByZXR1cm4gdGV4dDsKCWlmICh3aW5kb3cuZXhlY1NjcmlwdCl7CgkJd2luZG93LmV4ZWNTY3JpcHQodGV4dCk7Cgl9IGVsc2UgewoJCXZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKCQlzY3JpcHQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvamF2YXNjcmlwdCcpOwoJCXNjcmlwdC50ZXh0ID0gdGV4dDsKCQlkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7CgkJZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZChzY3JpcHQpOwoJfQoJcmV0dXJuIHRleHQ7Cn07CgpTdHJpbmcuaW1wbGVtZW50KCdzdHJpcFNjcmlwdHMnLCBmdW5jdGlvbihleGVjKXsKCXZhciBzY3JpcHRzID0gJyc7Cgl2YXIgdGV4dCA9IHRoaXMucmVwbGFjZSgvPHNjcmlwdFtePl0qPihbXHNcU10qPyk8XC9zY3JpcHQ+L2dpLCBmdW5jdGlvbihhbGwsIGNvZGUpewoJCXNjcmlwdHMgKz0gY29kZSArICdcbic7CgkJcmV0dXJuICcnOwoJfSk7CglpZiAoZXhlYyA9PT0gdHJ1ZSkgQnJvd3Nlci5leGVjKHNjcmlwdHMpOwoJZWxzZSBpZiAodHlwZU9mKGV4ZWMpID09ICdmdW5jdGlvbicpIGV4ZWMoc2NyaXB0cywgdGV4dCk7CglyZXR1cm4gdGV4dDsKfSk7CgovLyBXaW5kb3csIERvY3VtZW50CgpCcm93c2VyLmV4dGVuZCh7CglEb2N1bWVudDogdGhpcy5Eb2N1bWVudCwKCVdpbmRvdzogdGhpcy5XaW5kb3csCglFbGVtZW50OiB0aGlzLkVsZW1lbnQsCglFdmVudDogdGhpcy5FdmVudAp9KTsKCnRoaXMuV2luZG93ID0gdGhpcy4kY29uc3RydWN0b3IgPSBuZXcgVHlwZSgnV2luZG93JywgZnVuY3Rpb24oKXt9KTsKCnRoaXMuJGZhbWlseSA9IEZ1bmN0aW9uLmZyb20oJ3dpbmRvdycpLmhpZGUoKTsKCldpbmRvdy5taXJyb3IoZnVuY3Rpb24obmFtZSwgbWV0aG9kKXsKCXdpbmRvd1tuYW1lXSA9IG1ldGhvZDsKfSk7Cgp0aGlzLkRvY3VtZW50ID0gZG9jdW1lbnQuJGNvbnN0cnVjdG9yID0gbmV3IFR5cGUoJ0RvY3VtZW50JywgZnVuY3Rpb24oKXt9KTsKCmRvY3VtZW50LiRmYW1pbHkgPSBGdW5jdGlvbi5mcm9tKCdkb2N1bWVudCcpLmhpZGUoKTsKCkRvY3VtZW50Lm1pcnJvcihmdW5jdGlvbihuYW1lLCBtZXRob2QpewoJZG9jdW1lbnRbbmFtZV0gPSBtZXRob2Q7Cn0pOwoKZG9jdW1lbnQuaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKaWYgKCFkb2N1bWVudC5oZWFkKSBkb2N1bWVudC5oZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTsKCmlmIChkb2N1bWVudC5leGVjQ29tbWFuZCkgdHJ5IHsKCWRvY3VtZW50LmV4ZWNDb21tYW5kKCJCYWNrZ3JvdW5kSW1hZ2VDYWNoZSIsIGZhbHNlLCB0cnVlKTsKfSBjYXRjaCAoZSl7fQoKLyo8bHRJRTk+Ki8KaWYgKHRoaXMuYXR0YWNoRXZlbnQgJiYgIXRoaXMuYWRkRXZlbnRMaXN0ZW5lcil7Cgl2YXIgdW5sb2FkRXZlbnQgPSBmdW5jdGlvbigpewoJCXRoaXMuZGV0YWNoRXZlbnQoJ29udW5sb2FkJywgdW5sb2FkRXZlbnQpOwoJCWRvY3VtZW50LmhlYWQgPSBkb2N1bWVudC5odG1sID0gZG9jdW1lbnQud2luZG93ID0gbnVsbDsKCX07Cgl0aGlzLmF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIHVubG9hZEV2ZW50KTsKfQoKLy8gSUUgZmFpbHMgb24gY29sbGVjdGlvbnMgYW5kIDxzZWxlY3Q+Lm9wdGlvbnMgKHJlZmVycyB0byA8c2VsZWN0PikKdmFyIGFycmF5RnJvbSA9IEFycmF5LmZyb207CnRyeSB7CglhcnJheUZyb20oZG9jdW1lbnQuaHRtbC5jaGlsZE5vZGVzKTsKfSBjYXRjaChlKXsKCUFycmF5LmZyb20gPSBmdW5jdGlvbihpdGVtKXsKCQlpZiAodHlwZW9mIGl0ZW0gIT0gJ3N0cmluZycgJiYgVHlwZS5pc0VudW1lcmFibGUoaXRlbSkgJiYgdHlwZU9mKGl0ZW0pICE9ICdhcnJheScpewoJCQl2YXIgaSA9IGl0ZW0ubGVuZ3RoLCBhcnJheSA9IG5ldyBBcnJheShpKTsKCQkJd2hpbGUgKGktLSkgYXJyYXlbaV0gPSBpdGVtW2ldOwoJCQlyZXR1cm4gYXJyYXk7CgkJfQoJCXJldHVybiBhcnJheUZyb20oaXRlbSk7Cgl9OwoKCXZhciBwcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGUsCgkJc2xpY2UgPSBwcm90b3R5cGUuc2xpY2U7CglbJ3BvcCcsICdwdXNoJywgJ3JldmVyc2UnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCcsICdjb25jYXQnLCAnam9pbicsICdzbGljZSddLmVhY2goZnVuY3Rpb24obmFtZSl7CgkJdmFyIG1ldGhvZCA9IHByb3RvdHlwZVtuYW1lXTsKCQlBcnJheVtuYW1lXSA9IGZ1bmN0aW9uKGl0ZW0pewoJCQlyZXR1cm4gbWV0aG9kLmFwcGx5KEFycmF5LmZyb20oaXRlbSksIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CgkJfTsKCX0pOwp9Ci8qPC9sdElFOT4qLwoKLy88MS4yY29tcGF0PgoKaWYgKEJyb3dzZXIuUGxhdGZvcm0uaW9zKSBCcm93c2VyLlBsYXRmb3JtLmlwb2QgPSB0cnVlOwoKQnJvd3Nlci5FbmdpbmUgPSB7fTsKCnZhciBzZXRFbmdpbmUgPSBmdW5jdGlvbihuYW1lLCB2ZXJzaW9uKXsKCUJyb3dzZXIuRW5naW5lLm5hbWUgPSBuYW1lOwoJQnJvd3Nlci5FbmdpbmVbbmFtZSArIHZlcnNpb25dID0gdHJ1ZTsKCUJyb3dzZXIuRW5naW5lLnZlcnNpb24gPSB2ZXJzaW9uOwp9OwoKaWYgKEJyb3dzZXIuaWUpewoJQnJvd3Nlci5FbmdpbmUudHJpZGVudCA9IHRydWU7CgoJc3dpdGNoIChCcm93c2VyLnZlcnNpb24pewoJCWNhc2UgNjogc2V0RW5naW5lKCd0cmlkZW50JywgNCk7IGJyZWFrOwoJCWNhc2UgNzogc2V0RW5naW5lKCd0cmlkZW50JywgNSk7IGJyZWFrOwoJCWNhc2UgODogc2V0RW5naW5lKCd0cmlkZW50JywgNik7Cgl9Cn0KCmlmIChCcm93c2VyLmZpcmVmb3gpewoJQnJvd3Nlci5FbmdpbmUuZ2Vja28gPSB0cnVlOwoKCWlmIChCcm93c2VyLnZlcnNpb24gPj0gMykgc2V0RW5naW5lKCdnZWNrbycsIDE5KTsKCWVsc2Ugc2V0RW5naW5lKCdnZWNrbycsIDE4KTsKfQoKaWYgKEJyb3dzZXIuc2FmYXJpIHx8IEJyb3dzZXIuY2hyb21lKXsKCUJyb3dzZXIuRW5naW5lLndlYmtpdCA9IHRydWU7CgoJc3dpdGNoIChCcm93c2VyLnZlcnNpb24pewoJCWNhc2UgMjogc2V0RW5naW5lKCd3ZWJraXQnLCA0MTkpOyBicmVhazsKCQljYXNlIDM6IHNldEVuZ2luZSgnd2Via2l0JywgNDIwKTsgYnJlYWs7CgkJY2FzZSA0OiBzZXRFbmdpbmUoJ3dlYmtpdCcsIDUyNSk7Cgl9Cn0KCmlmIChCcm93c2VyLm9wZXJhKXsKCUJyb3dzZXIuRW5naW5lLnByZXN0byA9IHRydWU7CgoJaWYgKEJyb3dzZXIudmVyc2lvbiA+PSA5LjYpIHNldEVuZ2luZSgncHJlc3RvJywgOTYwKTsKCWVsc2UgaWYgKEJyb3dzZXIudmVyc2lvbiA+PSA5LjUpIHNldEVuZ2luZSgncHJlc3RvJywgOTUwKTsKCWVsc2Ugc2V0RW5naW5lKCdwcmVzdG8nLCA5MjUpOwp9CgppZiAoQnJvd3Nlci5uYW1lID09ICd1bmtub3duJyl7Cglzd2l0Y2ggKCh1YS5tYXRjaCgvKD86d2Via2l0fGtodG1sfGdlY2tvKS8pIHx8IFtdKVswXSl7CgkJY2FzZSAnd2Via2l0JzoKCQljYXNlICdraHRtbCc6CgkJCUJyb3dzZXIuRW5naW5lLndlYmtpdCA9IHRydWU7CgkJYnJlYWs7CgkJY2FzZSAnZ2Vja28nOgoJCQlCcm93c2VyLkVuZ2luZS5nZWNrbyA9IHRydWU7Cgl9Cn0KCnRoaXMuJGV4ZWMgPSBCcm93c2VyLmV4ZWM7CgovLzwvMS4yY29tcGF0PgoKfSkoKTsKCgovKgotLS0KCm5hbWU6IEV2ZW50CgpkZXNjcmlwdGlvbjogQ29udGFpbnMgdGhlIEV2ZW50IFR5cGUsIHRvIG1ha2UgdGhlIGV2ZW50IG9iamVjdCBjcm9zcy1icm93c2VyLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW1dpbmRvdywgRG9jdW1lbnQsIEFycmF5LCBGdW5jdGlvbiwgU3RyaW5nLCBPYmplY3RdCgpwcm92aWRlczogRXZlbnQKCi4uLgoqLwoKKGZ1bmN0aW9uKCkgewoKdmFyIF9rZXlzID0ge307Cgp2YXIgRE9NRXZlbnQgPSB0aGlzLkRPTUV2ZW50ID0gbmV3IFR5cGUoJ0RPTUV2ZW50JywgZnVuY3Rpb24oZXZlbnQsIHdpbil7CglpZiAoIXdpbikgd2luID0gd2luZG93OwoJZXZlbnQgPSBldmVudCB8fCB3aW4uZXZlbnQ7CglpZiAoZXZlbnQuJGV4dGVuZGVkKSByZXR1cm4gZXZlbnQ7Cgl0aGlzLmV2ZW50ID0gZXZlbnQ7Cgl0aGlzLiRleHRlbmRlZCA9IHRydWU7Cgl0aGlzLnNoaWZ0ID0gZXZlbnQuc2hpZnRLZXk7Cgl0aGlzLmNvbnRyb2wgPSBldmVudC5jdHJsS2V5OwoJdGhpcy5hbHQgPSBldmVudC5hbHRLZXk7Cgl0aGlzLm1ldGEgPSBldmVudC5tZXRhS2V5OwoJdmFyIHR5cGUgPSB0aGlzLnR5cGUgPSBldmVudC50eXBlOwoJdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50OwoJd2hpbGUgKHRhcmdldCAmJiB0YXJnZXQubm9kZVR5cGUgPT0gMykgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7Cgl0aGlzLnRhcmdldCA9IGRvY3VtZW50LmlkKHRhcmdldCk7CgoJaWYgKHR5cGUuaW5kZXhPZigna2V5JykgPT0gMCl7CgkJdmFyIGNvZGUgPSB0aGlzLmNvZGUgPSAoZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZSk7CgkJdGhpcy5rZXkgPSBfa2V5c1tjb2RlXS8qPDEuM2NvbXBhdD4qLyB8fCBPYmplY3Qua2V5T2YoRXZlbnQuS2V5cywgY29kZSkvKjwvMS4zY29tcGF0PiovOwoJCWlmICh0eXBlID09ICdrZXlkb3duJyl7CgkJCWlmIChjb2RlID4gMTExICYmIGNvZGUgPCAxMjQpIHRoaXMua2V5ID0gJ2YnICsgKGNvZGUgLSAxMTEpOwoJCQllbHNlIGlmIChjb2RlID4gOTUgJiYgY29kZSA8IDEwNikgdGhpcy5rZXkgPSBjb2RlIC0gOTY7CgkJfQoJCWlmICh0aGlzLmtleSA9PSBudWxsKSB0aGlzLmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkudG9Mb3dlckNhc2UoKTsKCX0gZWxzZSBpZiAodHlwZSA9PSAnY2xpY2snIHx8IHR5cGUgPT0gJ2RibGNsaWNrJyB8fCB0eXBlID09ICdjb250ZXh0bWVudScgfHwgdHlwZSA9PSAnRE9NTW91c2VTY3JvbGwnIHx8IHR5cGUuaW5kZXhPZignbW91c2UnKSA9PSAwKXsKCQl2YXIgZG9jID0gd2luLmRvY3VtZW50OwoJCWRvYyA9ICghZG9jLmNvbXBhdE1vZGUgfHwgZG9jLmNvbXBhdE1vZGUgPT0gJ0NTUzFDb21wYXQnKSA/IGRvYy5odG1sIDogZG9jLmJvZHk7CgkJdGhpcy5wYWdlID0gewoJCQl4OiAoZXZlbnQucGFnZVggIT0gbnVsbCkgPyBldmVudC5wYWdlWCA6IGV2ZW50LmNsaWVudFggKyBkb2Muc2Nyb2xsTGVmdCwKCQkJeTogKGV2ZW50LnBhZ2VZICE9IG51bGwpID8gZXZlbnQucGFnZVkgOiBldmVudC5jbGllbnRZICsgZG9jLnNjcm9sbFRvcAoJCX07CgkJdGhpcy5jbGllbnQgPSB7CgkJCXg6IChldmVudC5wYWdlWCAhPSBudWxsKSA/IGV2ZW50LnBhZ2VYIC0gd2luLnBhZ2VYT2Zmc2V0IDogZXZlbnQuY2xpZW50WCwKCQkJeTogKGV2ZW50LnBhZ2VZICE9IG51bGwpID8gZXZlbnQucGFnZVkgLSB3aW4ucGFnZVlPZmZzZXQgOiBldmVudC5jbGllbnRZCgkJfTsKCQlpZiAodHlwZSA9PSAnRE9NTW91c2VTY3JvbGwnIHx8IHR5cGUgPT0gJ21vdXNld2hlZWwnKQoJCQl0aGlzLndoZWVsID0gKGV2ZW50LndoZWVsRGVsdGEpID8gZXZlbnQud2hlZWxEZWx0YSAvIDEyMCA6IC0oZXZlbnQuZGV0YWlsIHx8IDApIC8gMzsKCgkJdGhpcy5yaWdodENsaWNrID0gKGV2ZW50LndoaWNoID09IDMgfHwgZXZlbnQuYnV0dG9uID09IDIpOwoJCWlmICh0eXBlID09ICdtb3VzZW92ZXInIHx8IHR5cGUgPT0gJ21vdXNlb3V0Jyl7CgkJCXZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCB8fCBldmVudFsodHlwZSA9PSAnbW91c2VvdmVyJyA/ICdmcm9tJyA6ICd0bycpICsgJ0VsZW1lbnQnXTsKCQkJd2hpbGUgKHJlbGF0ZWQgJiYgcmVsYXRlZC5ub2RlVHlwZSA9PSAzKSByZWxhdGVkID0gcmVsYXRlZC5wYXJlbnROb2RlOwoJCQl0aGlzLnJlbGF0ZWRUYXJnZXQgPSBkb2N1bWVudC5pZChyZWxhdGVkKTsKCQl9Cgl9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZigndG91Y2gnKSA9PSAwIHx8IHR5cGUuaW5kZXhPZignZ2VzdHVyZScpID09IDApewoJCXRoaXMucm90YXRpb24gPSBldmVudC5yb3RhdGlvbjsKCQl0aGlzLnNjYWxlID0gZXZlbnQuc2NhbGU7CgkJdGhpcy50YXJnZXRUb3VjaGVzID0gZXZlbnQudGFyZ2V0VG91Y2hlczsKCQl0aGlzLmNoYW5nZWRUb3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXM7CgkJdmFyIHRvdWNoZXMgPSB0aGlzLnRvdWNoZXMgPSBldmVudC50b3VjaGVzOwoJCWlmICh0b3VjaGVzICYmIHRvdWNoZXNbMF0pewoJCQl2YXIgdG91Y2ggPSB0b3VjaGVzWzBdOwoJCQl0aGlzLnBhZ2UgPSB7eDogdG91Y2gucGFnZVgsIHk6IHRvdWNoLnBhZ2VZfTsKCQkJdGhpcy5jbGllbnQgPSB7eDogdG91Y2guY2xpZW50WCwgeTogdG91Y2guY2xpZW50WX07CgkJfQoJfQoKCWlmICghdGhpcy5jbGllbnQpIHRoaXMuY2xpZW50ID0ge307CglpZiAoIXRoaXMucGFnZSkgdGhpcy5wYWdlID0ge307Cn0pOwoKRE9NRXZlbnQuaW1wbGVtZW50KHsKCglzdG9wOiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzLnByZXZlbnREZWZhdWx0KCkuc3RvcFByb3BhZ2F0aW9uKCk7Cgl9LAoKCXN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKXsKCQlpZiAodGhpcy5ldmVudC5zdG9wUHJvcGFnYXRpb24pIHRoaXMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CgkJZWxzZSB0aGlzLmV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpewoJCWlmICh0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KSB0aGlzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJZWxzZSB0aGlzLmV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7CgkJcmV0dXJuIHRoaXM7Cgl9Cgp9KTsKCkRPTUV2ZW50LmRlZmluZUtleSA9IGZ1bmN0aW9uKGNvZGUsIGtleSl7Cglfa2V5c1tjb2RlXSA9IGtleTsKCXJldHVybiB0aGlzOwp9OwoKRE9NRXZlbnQuZGVmaW5lS2V5cyA9IERPTUV2ZW50LmRlZmluZUtleS5vdmVybG9hZFNldHRlcih0cnVlKTsKCkRPTUV2ZW50LmRlZmluZUtleXMoewoJJzM4JzogJ3VwJywgJzQwJzogJ2Rvd24nLCAnMzcnOiAnbGVmdCcsICczOSc6ICdyaWdodCcsCgknMjcnOiAnZXNjJywgJzMyJzogJ3NwYWNlJywgJzgnOiAnYmFja3NwYWNlJywgJzknOiAndGFiJywKCSc0Nic6ICdkZWxldGUnLCAnMTMnOiAnZW50ZXInCn0pOwoKfSkoKTsKCi8qPDEuM2NvbXBhdD4qLwp2YXIgRXZlbnQgPSBET01FdmVudDsKRXZlbnQuS2V5cyA9IHt9OwovKjwvMS4zY29tcGF0PiovCgovKjwxLjJjb21wYXQ+Ki8KCkV2ZW50LktleXMgPSBuZXcgSGFzaChFdmVudC5LZXlzKTsKCi8qPC8xLjJjb21wYXQ+Ki8KCgovKgotLS0KCm5hbWU6IENsYXNzCgpkZXNjcmlwdGlvbjogQ29udGFpbnMgdGhlIENsYXNzIEZ1bmN0aW9uIGZvciBlYXNpbHkgY3JlYXRpbmcsIGV4dGVuZGluZywgYW5kIGltcGxlbWVudGluZyByZXVzYWJsZSBDbGFzc2VzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW0FycmF5LCBTdHJpbmcsIEZ1bmN0aW9uLCBOdW1iZXJdCgpwcm92aWRlczogQ2xhc3MKCi4uLgoqLwoKKGZ1bmN0aW9uKCl7Cgp2YXIgQ2xhc3MgPSB0aGlzLkNsYXNzID0gbmV3IFR5cGUoJ0NsYXNzJywgZnVuY3Rpb24ocGFyYW1zKXsKCWlmIChpbnN0YW5jZU9mKHBhcmFtcywgRnVuY3Rpb24pKSBwYXJhbXMgPSB7aW5pdGlhbGl6ZTogcGFyYW1zfTsKCgl2YXIgbmV3Q2xhc3MgPSBmdW5jdGlvbigpewoJCXJlc2V0KHRoaXMpOwoJCWlmIChuZXdDbGFzcy4kcHJvdG90eXBpbmcpIHJldHVybiB0aGlzOwoJCXRoaXMuJGNhbGxlciA9IG51bGw7CgkJdmFyIHZhbHVlID0gKHRoaXMuaW5pdGlhbGl6ZSkgPyB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRoaXM7CgkJdGhpcy4kY2FsbGVyID0gdGhpcy5jYWxsZXIgPSBudWxsOwoJCXJldHVybiB2YWx1ZTsKCX0uZXh0ZW5kKHRoaXMpLmltcGxlbWVudChwYXJhbXMpOwoKCW5ld0NsYXNzLiRjb25zdHJ1Y3RvciA9IENsYXNzOwoJbmV3Q2xhc3MucHJvdG90eXBlLiRjb25zdHJ1Y3RvciA9IG5ld0NsYXNzOwoJbmV3Q2xhc3MucHJvdG90eXBlLnBhcmVudCA9IHBhcmVudDsKCglyZXR1cm4gbmV3Q2xhc3M7Cn0pOwoKdmFyIHBhcmVudCA9IGZ1bmN0aW9uKCl7CglpZiAoIXRoaXMuJGNhbGxlcikgdGhyb3cgbmV3IEVycm9yKCdUaGUgbWV0aG9kICJwYXJlbnQiIGNhbm5vdCBiZSBjYWxsZWQuJyk7Cgl2YXIgbmFtZSA9IHRoaXMuJGNhbGxlci4kbmFtZSwKCQlwYXJlbnQgPSB0aGlzLiRjYWxsZXIuJG93bmVyLnBhcmVudCwKCQlwcmV2aW91cyA9IChwYXJlbnQpID8gcGFyZW50LnByb3RvdHlwZVtuYW1lXSA6IG51bGw7CglpZiAoIXByZXZpb3VzKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBtZXRob2QgIicgKyBuYW1lICsgJyIgaGFzIG5vIHBhcmVudC4nKTsKCXJldHVybiBwcmV2aW91cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9OwoKdmFyIHJlc2V0ID0gZnVuY3Rpb24ob2JqZWN0KXsKCWZvciAodmFyIGtleSBpbiBvYmplY3QpewoJCXZhciB2YWx1ZSA9IG9iamVjdFtrZXldOwoJCXN3aXRjaCAodHlwZU9mKHZhbHVlKSl7CgkJCWNhc2UgJ29iamVjdCc6CgkJCQl2YXIgRiA9IGZ1bmN0aW9uKCl7fTsKCQkJCUYucHJvdG90eXBlID0gdmFsdWU7CgkJCQlvYmplY3Rba2V5XSA9IHJlc2V0KG5ldyBGKTsKCQkJYnJlYWs7CgkJCWNhc2UgJ2FycmF5Jzogb2JqZWN0W2tleV0gPSB2YWx1ZS5jbG9uZSgpOyBicmVhazsKCQl9Cgl9CglyZXR1cm4gb2JqZWN0Owp9OwoKdmFyIHdyYXAgPSBmdW5jdGlvbihzZWxmLCBrZXksIG1ldGhvZCl7CglpZiAobWV0aG9kLiRvcmlnaW4pIG1ldGhvZCA9IG1ldGhvZC4kb3JpZ2luOwoJdmFyIHdyYXBwZXIgPSBmdW5jdGlvbigpewoJCWlmIChtZXRob2QuJHByb3RlY3RlZCAmJiB0aGlzLiRjYWxsZXIgPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdUaGUgbWV0aG9kICInICsga2V5ICsgJyIgY2Fubm90IGJlIGNhbGxlZC4nKTsKCQl2YXIgY2FsbGVyID0gdGhpcy5jYWxsZXIsIGN1cnJlbnQgPSB0aGlzLiRjYWxsZXI7CgkJdGhpcy5jYWxsZXIgPSBjdXJyZW50OyB0aGlzLiRjYWxsZXIgPSB3cmFwcGVyOwoJCXZhciByZXN1bHQgPSBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCQl0aGlzLiRjYWxsZXIgPSBjdXJyZW50OyB0aGlzLmNhbGxlciA9IGNhbGxlcjsKCQlyZXR1cm4gcmVzdWx0OwoJfS5leHRlbmQoeyRvd25lcjogc2VsZiwgJG9yaWdpbjogbWV0aG9kLCAkbmFtZToga2V5fSk7CglyZXR1cm4gd3JhcHBlcjsKfTsKCnZhciBpbXBsZW1lbnQgPSBmdW5jdGlvbihrZXksIHZhbHVlLCByZXRhaW4pewoJaWYgKENsYXNzLk11dGF0b3JzLmhhc093blByb3BlcnR5KGtleSkpewoJCXZhbHVlID0gQ2xhc3MuTXV0YXRvcnNba2V5XS5jYWxsKHRoaXMsIHZhbHVlKTsKCQlpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXM7Cgl9CgoJaWYgKHR5cGVPZih2YWx1ZSkgPT0gJ2Z1bmN0aW9uJyl7CgkJaWYgKHZhbHVlLiRoaWRkZW4pIHJldHVybiB0aGlzOwoJCXRoaXMucHJvdG90eXBlW2tleV0gPSAocmV0YWluKSA/IHZhbHVlIDogd3JhcCh0aGlzLCBrZXksIHZhbHVlKTsKCX0gZWxzZSB7CgkJT2JqZWN0Lm1lcmdlKHRoaXMucHJvdG90eXBlLCBrZXksIHZhbHVlKTsKCX0KCglyZXR1cm4gdGhpczsKfTsKCnZhciBnZXRJbnN0YW5jZSA9IGZ1bmN0aW9uKGtsYXNzKXsKCWtsYXNzLiRwcm90b3R5cGluZyA9IHRydWU7Cgl2YXIgcHJvdG8gPSBuZXcga2xhc3M7CglkZWxldGUga2xhc3MuJHByb3RvdHlwaW5nOwoJcmV0dXJuIHByb3RvOwp9OwoKQ2xhc3MuaW1wbGVtZW50KCdpbXBsZW1lbnQnLCBpbXBsZW1lbnQub3ZlcmxvYWRTZXR0ZXIoKSk7CgpDbGFzcy5NdXRhdG9ycyA9IHsKCglFeHRlbmRzOiBmdW5jdGlvbihwYXJlbnQpewoJCXRoaXMucGFyZW50ID0gcGFyZW50OwoJCXRoaXMucHJvdG90eXBlID0gZ2V0SW5zdGFuY2UocGFyZW50KTsKCX0sCgoJSW1wbGVtZW50czogZnVuY3Rpb24oaXRlbXMpewoJCUFycmF5LmZyb20oaXRlbXMpLmVhY2goZnVuY3Rpb24oaXRlbSl7CgkJCXZhciBpbnN0YW5jZSA9IG5ldyBpdGVtOwoJCQlmb3IgKHZhciBrZXkgaW4gaW5zdGFuY2UpIGltcGxlbWVudC5jYWxsKHRoaXMsIGtleSwgaW5zdGFuY2Vba2V5XSwgdHJ1ZSk7CgkJfSwgdGhpcyk7Cgl9Cn07Cgp9KSgpOwoKCi8qCi0tLQoKbmFtZTogQ2xhc3MuRXh0cmFzCgpkZXNjcmlwdGlvbjogQ29udGFpbnMgVXRpbGl0eSBDbGFzc2VzIHRoYXQgY2FuIGJlIGltcGxlbWVudGVkIGludG8geW91ciBvd24gQ2xhc3NlcyB0byBlYXNlIHRoZSBleGVjdXRpb24gb2YgbWFueSBjb21tb24gdGFza3MuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBDbGFzcwoKcHJvdmlkZXM6IFtDbGFzcy5FeHRyYXMsIENoYWluLCBFdmVudHMsIE9wdGlvbnNdCgouLi4KKi8KCihmdW5jdGlvbigpewoKdGhpcy5DaGFpbiA9IG5ldyBDbGFzcyh7CgoJJGNoYWluOiBbXSwKCgljaGFpbjogZnVuY3Rpb24oKXsKCQl0aGlzLiRjaGFpbi5hcHBlbmQoQXJyYXkuZmxhdHRlbihhcmd1bWVudHMpKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJY2FsbENoYWluOiBmdW5jdGlvbigpewoJCXJldHVybiAodGhpcy4kY2hhaW4ubGVuZ3RoKSA/IHRoaXMuJGNoYWluLnNoaWZ0KCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGZhbHNlOwoJfSwKCgljbGVhckNoYWluOiBmdW5jdGlvbigpewoJCXRoaXMuJGNoYWluLmVtcHR5KCk7CgkJcmV0dXJuIHRoaXM7Cgl9Cgp9KTsKCnZhciByZW1vdmVPbiA9IGZ1bmN0aW9uKHN0cmluZyl7CglyZXR1cm4gc3RyaW5nLnJlcGxhY2UoL15vbihbQS1aXSkvLCBmdW5jdGlvbihmdWxsLCBmaXJzdCl7CgkJcmV0dXJuIGZpcnN0LnRvTG93ZXJDYXNlKCk7Cgl9KTsKfTsKCnRoaXMuRXZlbnRzID0gbmV3IENsYXNzKHsKCgkkZXZlbnRzOiB7fSwKCglhZGRFdmVudDogZnVuY3Rpb24odHlwZSwgZm4sIGludGVybmFsKXsKCQl0eXBlID0gcmVtb3ZlT24odHlwZSk7CgoJCS8qPDEuMmNvbXBhdD4qLwoJCWlmIChmbiA9PSAkZW1wdHkpIHJldHVybiB0aGlzOwoJCS8qPC8xLjJjb21wYXQ+Ki8KCgkJdGhpcy4kZXZlbnRzW3R5cGVdID0gKHRoaXMuJGV2ZW50c1t0eXBlXSB8fCBbXSkuaW5jbHVkZShmbik7CgkJaWYgKGludGVybmFsKSBmbi5pbnRlcm5hbCA9IHRydWU7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWFkZEV2ZW50czogZnVuY3Rpb24oZXZlbnRzKXsKCQlmb3IgKHZhciB0eXBlIGluIGV2ZW50cykgdGhpcy5hZGRFdmVudCh0eXBlLCBldmVudHNbdHlwZV0pOwoJCXJldHVybiB0aGlzOwoJfSwKCglmaXJlRXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIGFyZ3MsIGRlbGF5KXsKCQl0eXBlID0gcmVtb3ZlT24odHlwZSk7CgkJdmFyIGV2ZW50cyA9IHRoaXMuJGV2ZW50c1t0eXBlXTsKCQlpZiAoIWV2ZW50cykgcmV0dXJuIHRoaXM7CgkJYXJncyA9IEFycmF5LmZyb20oYXJncyk7CgkJZXZlbnRzLmVhY2goZnVuY3Rpb24oZm4pewoJCQlpZiAoZGVsYXkpIGZuLmRlbGF5KGRlbGF5LCB0aGlzLCBhcmdzKTsKCQkJZWxzZSBmbi5hcHBseSh0aGlzLCBhcmdzKTsKCQl9LCB0aGlzKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIGZuKXsKCQl0eXBlID0gcmVtb3ZlT24odHlwZSk7CgkJdmFyIGV2ZW50cyA9IHRoaXMuJGV2ZW50c1t0eXBlXTsKCQlpZiAoZXZlbnRzICYmICFmbi5pbnRlcm5hbCl7CgkJCXZhciBpbmRleCA9ICBldmVudHMuaW5kZXhPZihmbik7CgkJCWlmIChpbmRleCAhPSAtMSkgZGVsZXRlIGV2ZW50c1tpbmRleF07CgkJfQoJCXJldHVybiB0aGlzOwoJfSwKCglyZW1vdmVFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cyl7CgkJdmFyIHR5cGU7CgkJaWYgKHR5cGVPZihldmVudHMpID09ICdvYmplY3QnKXsKCQkJZm9yICh0eXBlIGluIGV2ZW50cykgdGhpcy5yZW1vdmVFdmVudCh0eXBlLCBldmVudHNbdHlwZV0pOwoJCQlyZXR1cm4gdGhpczsKCQl9CgkJaWYgKGV2ZW50cykgZXZlbnRzID0gcmVtb3ZlT24oZXZlbnRzKTsKCQlmb3IgKHR5cGUgaW4gdGhpcy4kZXZlbnRzKXsKCQkJaWYgKGV2ZW50cyAmJiBldmVudHMgIT0gdHlwZSkgY29udGludWU7CgkJCXZhciBmbnMgPSB0aGlzLiRldmVudHNbdHlwZV07CgkJCWZvciAodmFyIGkgPSBmbnMubGVuZ3RoOyBpLS07KSBpZiAoaSBpbiBmbnMpewoJCQkJdGhpcy5yZW1vdmVFdmVudCh0eXBlLCBmbnNbaV0pOwoJCQl9CgkJfQoJCXJldHVybiB0aGlzOwoJfQoKfSk7Cgp0aGlzLk9wdGlvbnMgPSBuZXcgQ2xhc3MoewoKCXNldE9wdGlvbnM6IGZ1bmN0aW9uKCl7CgkJdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgPSBPYmplY3QubWVyZ2UuYXBwbHkobnVsbCwgW3t9LCB0aGlzLm9wdGlvbnNdLmFwcGVuZChhcmd1bWVudHMpKTsKCQlpZiAodGhpcy5hZGRFdmVudCkgZm9yICh2YXIgb3B0aW9uIGluIG9wdGlvbnMpewoJCQlpZiAodHlwZU9mKG9wdGlvbnNbb3B0aW9uXSkgIT0gJ2Z1bmN0aW9uJyB8fCAhKC9eb25bQS1aXS8pLnRlc3Qob3B0aW9uKSkgY29udGludWU7CgkJCXRoaXMuYWRkRXZlbnQob3B0aW9uLCBvcHRpb25zW29wdGlvbl0pOwoJCQlkZWxldGUgb3B0aW9uc1tvcHRpb25dOwoJCX0KCQlyZXR1cm4gdGhpczsKCX0KCn0pOwoKfSkoKTsKCgovKgotLS0KbmFtZTogU2xpY2suUGFyc2VyCmRlc2NyaXB0aW9uOiBTdGFuZGFsb25lIENTUzMgU2VsZWN0b3IgcGFyc2VyCnByb3ZpZGVzOiBTbGljay5QYXJzZXIKLi4uCiovCgo7KGZ1bmN0aW9uKCl7Cgp2YXIgcGFyc2VkLAoJc2VwYXJhdG9ySW5kZXgsCgljb21iaW5hdG9ySW5kZXgsCglyZXZlcnNlZCwKCWNhY2hlID0ge30sCglyZXZlcnNlQ2FjaGUgPSB7fSwKCXJlVW5lc2NhcGUgPSAvXFwvZzsKCnZhciBwYXJzZSA9IGZ1bmN0aW9uKGV4cHJlc3Npb24sIGlzUmV2ZXJzZWQpewoJaWYgKGV4cHJlc3Npb24gPT0gbnVsbCkgcmV0dXJuIG51bGw7CglpZiAoZXhwcmVzc2lvbi5TbGljayA9PT0gdHJ1ZSkgcmV0dXJuIGV4cHJlc3Npb247CglleHByZXNzaW9uID0gKCcnICsgZXhwcmVzc2lvbikucmVwbGFjZSgvXlxzK3xccyskL2csICcnKTsKCXJldmVyc2VkID0gISFpc1JldmVyc2VkOwoJdmFyIGN1cnJlbnRDYWNoZSA9IChyZXZlcnNlZCkgPyByZXZlcnNlQ2FjaGUgOiBjYWNoZTsKCWlmIChjdXJyZW50Q2FjaGVbZXhwcmVzc2lvbl0pIHJldHVybiBjdXJyZW50Q2FjaGVbZXhwcmVzc2lvbl07CglwYXJzZWQgPSB7CgkJU2xpY2s6IHRydWUsCgkJZXhwcmVzc2lvbnM6IFtdLAoJCXJhdzogZXhwcmVzc2lvbiwKCQlyZXZlcnNlOiBmdW5jdGlvbigpewoJCQlyZXR1cm4gcGFyc2UodGhpcy5yYXcsIHRydWUpOwoJCX0KCX07CglzZXBhcmF0b3JJbmRleCA9IC0xOwoJd2hpbGUgKGV4cHJlc3Npb24gIT0gKGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UocmVnZXhwLCBwYXJzZXIpKSk7CglwYXJzZWQubGVuZ3RoID0gcGFyc2VkLmV4cHJlc3Npb25zLmxlbmd0aDsKCXJldHVybiBjdXJyZW50Q2FjaGVbcGFyc2VkLnJhd10gPSAocmV2ZXJzZWQpID8gcmV2ZXJzZShwYXJzZWQpIDogcGFyc2VkOwp9OwoKdmFyIHJldmVyc2VDb21iaW5hdG9yID0gZnVuY3Rpb24oY29tYmluYXRvcil7CglpZiAoY29tYmluYXRvciA9PT0gJyEnKSByZXR1cm4gJyAnOwoJZWxzZSBpZiAoY29tYmluYXRvciA9PT0gJyAnKSByZXR1cm4gJyEnOwoJZWxzZSBpZiAoKC9eIS8pLnRlc3QoY29tYmluYXRvcikpIHJldHVybiBjb21iaW5hdG9yLnJlcGxhY2UoL14hLywgJycpOwoJZWxzZSByZXR1cm4gJyEnICsgY29tYmluYXRvcjsKfTsKCnZhciByZXZlcnNlID0gZnVuY3Rpb24oZXhwcmVzc2lvbil7Cgl2YXIgZXhwcmVzc2lvbnMgPSBleHByZXNzaW9uLmV4cHJlc3Npb25zOwoJZm9yICh2YXIgaSA9IDA7IGkgPCBleHByZXNzaW9ucy5sZW5ndGg7IGkrKyl7CgkJdmFyIGV4cCA9IGV4cHJlc3Npb25zW2ldOwoJCXZhciBsYXN0ID0ge3BhcnRzOiBbXSwgdGFnOiAnKicsIGNvbWJpbmF0b3I6IHJldmVyc2VDb21iaW5hdG9yKGV4cFswXS5jb21iaW5hdG9yKX07CgoJCWZvciAodmFyIGogPSAwOyBqIDwgZXhwLmxlbmd0aDsgaisrKXsKCQkJdmFyIGNleHAgPSBleHBbal07CgkJCWlmICghY2V4cC5yZXZlcnNlQ29tYmluYXRvcikgY2V4cC5yZXZlcnNlQ29tYmluYXRvciA9ICcgJzsKCQkJY2V4cC5jb21iaW5hdG9yID0gY2V4cC5yZXZlcnNlQ29tYmluYXRvcjsKCQkJZGVsZXRlIGNleHAucmV2ZXJzZUNvbWJpbmF0b3I7CgkJfQoKCQlleHAucmV2ZXJzZSgpLnB1c2gobGFzdCk7Cgl9CglyZXR1cm4gZXhwcmVzc2lvbjsKfTsKCnZhciBlc2NhcGVSZWdFeHAgPSBmdW5jdGlvbihzdHJpbmcpey8vIENyZWRpdDogWFJlZ0V4cCAwLjYuMSAoYykgMjAwNy0yMDA4IFN0ZXZlbiBMZXZpdGhhbiA8aHR0cDovL3N0ZXZlbmxldml0aGFuLmNvbS9yZWdleC94cmVnZXhwLz4gTUlUIExpY2Vuc2UKCXJldHVybiBzdHJpbmcucmVwbGFjZSgvWy1bXF17fSgpKis/LlxcXiR8LCNcc10vZywgZnVuY3Rpb24obWF0Y2gpewoJCXJldHVybiAnXFwnICsgbWF0Y2g7Cgl9KTsKfTsKCnZhciByZWdleHAgPSBuZXcgUmVnRXhwKAovKgojIS91c3IvYmluL2VudiBydWJ5CnB1dHMgIlx0XHQiICsgREFUQS5yZWFkLmdzdWIoL1woXD94XCl8XHMrIy4qJHxccyt8XFwkfFxcbi8sJycpCl9fRU5EX18KCSIoP3gpXig/OlwKCSAgXFxzKiAoICwgKSBcXHMqICAgICAgICAgICAgICAgIyBTZXBhcmF0b3IgICAgICAgICAgXG5cCgl8IFxccyogKCA8Y29tYmluYXRvcj4rICkgXFxzKiAgICMgQ29tYmluYXRvciAgICAgICAgIFxuXAoJfCAgICAgICggXFxzKyApICAgICAgICAgICAgICAgICAjIENvbWJpbmF0b3JDaGlsZHJlbiBcblwKCXwgICAgICAoIDx1bmljb2RlPisgfCBcXCogKSAgICAgIyBUYWcgICAgICAgICAgICAgICAgXG5cCgl8IFxcIyAgKCA8dW5pY29kZT4rICAgICAgICkgICAgICMgSUQgICAgICAgICAgICAgICAgIFxuXAoJfCBcXC4gICggPHVuaWNvZGU+KyAgICAgICApICAgICAjIENsYXNzTmFtZSAgICAgICAgICBcblwKCXwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBBdHRyaWJ1dGUgICAgICAgICAgXG5cCglcXFsgIFwKCQlcXHMqICg8dW5pY29kZTE+KykgICg/OiAgXAoJCQlcXHMqIChbKl4kIX58XT89KSAgKD86ICBcCgkJCQlcXHMqICg/OlwKCQkJCQkoW1wiJ10/KSguKj8pXFw5IFwKCQkJCSlcCgkJCSkgIFwKCQkpPyAgXFxzKiAgXAoJXFxdKD8hXFxdKSBcblwKCXwgICA6KyAoIDx1bmljb2RlPisgKSg/OlwKCVxcKCAoPzpcCgkJKD86KFtcIiddKShbXlxcMTJdKilcXDEyKXwoKD86XFwoW14pXStcXCl8W14oKV0qKSspXAoJKSBcXClcCgkpP1wKCSkiCiovCgkiXig/OlxccyooLClcXHMqfFxccyooPGNvbWJpbmF0b3I+KylcXHMqfChcXHMrKXwoPHVuaWNvZGU+K3xcXCopfFxcIyg8dW5pY29kZT4rKXxcXC4oPHVuaWNvZGU+Kyl8XFxbXFxzKig8dW5pY29kZTE+KykoPzpcXHMqKFsqXiQhfnxdPz0pKD86XFxzKig/OihbXCInXT8pKC4qPylcXDkpKSk/XFxzKlxcXSg/IVxcXSl8KDorKSg8dW5pY29kZT4rKSg/OlxcKCg/Oig/OihbXCInXSkoW15cXDEzXSopXFwxMyl8KCg/OlxcKFteKV0rXFwpfFteKCldKikrKSlcXCkpPykiCgkucmVwbGFjZSgvPGNvbWJpbmF0b3I+LywgJ1snICsgZXNjYXBlUmVnRXhwKCI+K35gIUAkJV4mPXt9XFw7PC8iKSArICddJykKCS5yZXBsYWNlKC88dW5pY29kZT4vZywgJyg/OltcXHdcXHUwMGExLVxcdUZGRkYtXXxcXFxcW15cXHMwLTlhLWZdKScpCgkucmVwbGFjZSgvPHVuaWNvZGUxPi9nLCAnKD86WzpcXHdcXHUwMGExLVxcdUZGRkYtXXxcXFxcW15cXHMwLTlhLWZdKScpCik7CgpmdW5jdGlvbiBwYXJzZXIoCglyYXdNYXRjaCwKCglzZXBhcmF0b3IsCgljb21iaW5hdG9yLAoJY29tYmluYXRvckNoaWxkcmVuLAoKCXRhZ05hbWUsCglpZCwKCWNsYXNzTmFtZSwKCglhdHRyaWJ1dGVLZXksCglhdHRyaWJ1dGVPcGVyYXRvciwKCWF0dHJpYnV0ZVF1b3RlLAoJYXR0cmlidXRlVmFsdWUsCgoJcHNldWRvTWFya2VyLAoJcHNldWRvQ2xhc3MsCglwc2V1ZG9RdW90ZSwKCXBzZXVkb0NsYXNzUXVvdGVkVmFsdWUsCglwc2V1ZG9DbGFzc1ZhbHVlCil7CglpZiAoc2VwYXJhdG9yIHx8IHNlcGFyYXRvckluZGV4ID09PSAtMSl7CgkJcGFyc2VkLmV4cHJlc3Npb25zWysrc2VwYXJhdG9ySW5kZXhdID0gW107CgkJY29tYmluYXRvckluZGV4ID0gLTE7CgkJaWYgKHNlcGFyYXRvcikgcmV0dXJuICcnOwoJfQoKCWlmIChjb21iaW5hdG9yIHx8IGNvbWJpbmF0b3JDaGlsZHJlbiB8fCBjb21iaW5hdG9ySW5kZXggPT09IC0xKXsKCQljb21iaW5hdG9yID0gY29tYmluYXRvciB8fCAnICc7CgkJdmFyIGN1cnJlbnRTZXBhcmF0b3IgPSBwYXJzZWQuZXhwcmVzc2lvbnNbc2VwYXJhdG9ySW5kZXhdOwoJCWlmIChyZXZlcnNlZCAmJiBjdXJyZW50U2VwYXJhdG9yW2NvbWJpbmF0b3JJbmRleF0pCgkJCWN1cnJlbnRTZXBhcmF0b3JbY29tYmluYXRvckluZGV4XS5yZXZlcnNlQ29tYmluYXRvciA9IHJldmVyc2VDb21iaW5hdG9yKGNvbWJpbmF0b3IpOwoJCWN1cnJlbnRTZXBhcmF0b3JbKytjb21iaW5hdG9ySW5kZXhdID0ge2NvbWJpbmF0b3I6IGNvbWJpbmF0b3IsIHRhZzogJyonfTsKCX0KCgl2YXIgY3VycmVudFBhcnNlZCA9IHBhcnNlZC5leHByZXNzaW9uc1tzZXBhcmF0b3JJbmRleF1bY29tYmluYXRvckluZGV4XTsKCglpZiAodGFnTmFtZSl7CgkJY3VycmVudFBhcnNlZC50YWcgPSB0YWdOYW1lLnJlcGxhY2UocmVVbmVzY2FwZSwgJycpOwoKCX0gZWxzZSBpZiAoaWQpewoJCWN1cnJlbnRQYXJzZWQuaWQgPSBpZC5yZXBsYWNlKHJlVW5lc2NhcGUsICcnKTsKCgl9IGVsc2UgaWYgKGNsYXNzTmFtZSl7CgkJY2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UocmVVbmVzY2FwZSwgJycpOwoKCQlpZiAoIWN1cnJlbnRQYXJzZWQuY2xhc3NMaXN0KSBjdXJyZW50UGFyc2VkLmNsYXNzTGlzdCA9IFtdOwoJCWlmICghY3VycmVudFBhcnNlZC5jbGFzc2VzKSBjdXJyZW50UGFyc2VkLmNsYXNzZXMgPSBbXTsKCQljdXJyZW50UGFyc2VkLmNsYXNzTGlzdC5wdXNoKGNsYXNzTmFtZSk7CgkJY3VycmVudFBhcnNlZC5jbGFzc2VzLnB1c2goewoJCQl2YWx1ZTogY2xhc3NOYW1lLAoJCQlyZWdleHA6IG5ldyBSZWdFeHAoJyhefFxccyknICsgZXNjYXBlUmVnRXhwKGNsYXNzTmFtZSkgKyAnKFxcc3wkKScpCgkJfSk7CgoJfSBlbHNlIGlmIChwc2V1ZG9DbGFzcyl7CgkJcHNldWRvQ2xhc3NWYWx1ZSA9IHBzZXVkb0NsYXNzVmFsdWUgfHwgcHNldWRvQ2xhc3NRdW90ZWRWYWx1ZTsKCQlwc2V1ZG9DbGFzc1ZhbHVlID0gcHNldWRvQ2xhc3NWYWx1ZSA/IHBzZXVkb0NsYXNzVmFsdWUucmVwbGFjZShyZVVuZXNjYXBlLCAnJykgOiBudWxsOwoKCQlpZiAoIWN1cnJlbnRQYXJzZWQucHNldWRvcykgY3VycmVudFBhcnNlZC5wc2V1ZG9zID0gW107CgkJY3VycmVudFBhcnNlZC5wc2V1ZG9zLnB1c2goewoJCQlrZXk6IHBzZXVkb0NsYXNzLnJlcGxhY2UocmVVbmVzY2FwZSwgJycpLAoJCQl2YWx1ZTogcHNldWRvQ2xhc3NWYWx1ZSwKCQkJdHlwZTogcHNldWRvTWFya2VyLmxlbmd0aCA9PSAxID8gJ2NsYXNzJyA6ICdlbGVtZW50JwoJCX0pOwoKCX0gZWxzZSBpZiAoYXR0cmlidXRlS2V5KXsKCQlhdHRyaWJ1dGVLZXkgPSBhdHRyaWJ1dGVLZXkucmVwbGFjZShyZVVuZXNjYXBlLCAnJyk7CgkJYXR0cmlidXRlVmFsdWUgPSAoYXR0cmlidXRlVmFsdWUgfHwgJycpLnJlcGxhY2UocmVVbmVzY2FwZSwgJycpOwoKCQl2YXIgdGVzdCwgcmVnZXhwOwoKCQlzd2l0Y2ggKGF0dHJpYnV0ZU9wZXJhdG9yKXsKCQkJY2FzZSAnXj0nIDogcmVnZXhwID0gbmV3IFJlZ0V4cCggICAgICAgJ14nKyBlc2NhcGVSZWdFeHAoYXR0cmlidXRlVmFsdWUpICAgICAgICAgICAgKTsgYnJlYWs7CgkJCWNhc2UgJyQ9JyA6IHJlZ2V4cCA9IG5ldyBSZWdFeHAoICAgICAgICAgICAgZXNjYXBlUmVnRXhwKGF0dHJpYnV0ZVZhbHVlKSArJyQnICAgICAgICk7IGJyZWFrOwoJCQljYXNlICd+PScgOiByZWdleHAgPSBuZXcgUmVnRXhwKCAnKF58XFxzKScrIGVzY2FwZVJlZ0V4cChhdHRyaWJ1dGVWYWx1ZSkgKycoXFxzfCQpJyApOyBicmVhazsKCQkJY2FzZSAnfD0nIDogcmVnZXhwID0gbmV3IFJlZ0V4cCggICAgICAgJ14nKyBlc2NhcGVSZWdFeHAoYXR0cmlidXRlVmFsdWUpICsnKC18JCknICAgKTsgYnJlYWs7CgkJCWNhc2UgICc9JyA6IHRlc3QgPSBmdW5jdGlvbih2YWx1ZSl7CgkJCQlyZXR1cm4gYXR0cmlidXRlVmFsdWUgPT0gdmFsdWU7CgkJCX07IGJyZWFrOwoJCQljYXNlICcqPScgOiB0ZXN0ID0gZnVuY3Rpb24odmFsdWUpewoJCQkJcmV0dXJuIHZhbHVlICYmIHZhbHVlLmluZGV4T2YoYXR0cmlidXRlVmFsdWUpID4gLTE7CgkJCX07IGJyZWFrOwoJCQljYXNlICchPScgOiB0ZXN0ID0gZnVuY3Rpb24odmFsdWUpewoJCQkJcmV0dXJuIGF0dHJpYnV0ZVZhbHVlICE9IHZhbHVlOwoJCQl9OyBicmVhazsKCQkJZGVmYXVsdCAgIDogdGVzdCA9IGZ1bmN0aW9uKHZhbHVlKXsKCQkJCXJldHVybiAhIXZhbHVlOwoJCQl9OwoJCX0KCgkJaWYgKGF0dHJpYnV0ZVZhbHVlID09ICcnICYmICgvXlsqJF5dPSQvKS50ZXN0KGF0dHJpYnV0ZU9wZXJhdG9yKSkgdGVzdCA9IGZ1bmN0aW9uKCl7CgkJCXJldHVybiBmYWxzZTsKCQl9OwoKCQlpZiAoIXRlc3QpIHRlc3QgPSBmdW5jdGlvbih2YWx1ZSl7CgkJCXJldHVybiB2YWx1ZSAmJiByZWdleHAudGVzdCh2YWx1ZSk7CgkJfTsKCgkJaWYgKCFjdXJyZW50UGFyc2VkLmF0dHJpYnV0ZXMpIGN1cnJlbnRQYXJzZWQuYXR0cmlidXRlcyA9IFtdOwoJCWN1cnJlbnRQYXJzZWQuYXR0cmlidXRlcy5wdXNoKHsKCQkJa2V5OiBhdHRyaWJ1dGVLZXksCgkJCW9wZXJhdG9yOiBhdHRyaWJ1dGVPcGVyYXRvciwKCQkJdmFsdWU6IGF0dHJpYnV0ZVZhbHVlLAoJCQl0ZXN0OiB0ZXN0CgkJfSk7CgoJfQoKCXJldHVybiAnJzsKfTsKCi8vIFNsaWNrIE5TCgp2YXIgU2xpY2sgPSAodGhpcy5TbGljayB8fCB7fSk7CgpTbGljay5wYXJzZSA9IGZ1bmN0aW9uKGV4cHJlc3Npb24pewoJcmV0dXJuIHBhcnNlKGV4cHJlc3Npb24pOwp9OwoKU2xpY2suZXNjYXBlUmVnRXhwID0gZXNjYXBlUmVnRXhwOwoKaWYgKCF0aGlzLlNsaWNrKSB0aGlzLlNsaWNrID0gU2xpY2s7Cgp9KS5hcHBseSgvKjxDb21tb25KUz4qLyh0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJykgPyBleHBvcnRzIDogLyo8L0NvbW1vbkpTPiovdGhpcyk7CgoKLyoKLS0tCm5hbWU6IFNsaWNrLkZpbmRlcgpkZXNjcmlwdGlvbjogVGhlIG5ldywgc3VwZXJmYXN0IGNzcyBzZWxlY3RvciBlbmdpbmUuCnByb3ZpZGVzOiBTbGljay5GaW5kZXIKcmVxdWlyZXM6IFNsaWNrLlBhcnNlcgouLi4KKi8KCjsoZnVuY3Rpb24oKXsKCnZhciBsb2NhbCA9IHt9LAoJZmVhdHVyZXNDYWNoZSA9IHt9LAoJdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nOwoKLy8gRmVhdHVyZSAvIEJ1ZyBkZXRlY3Rpb24KCmxvY2FsLmlzTmF0aXZlQ29kZSA9IGZ1bmN0aW9uKGZuKXsKCXJldHVybiAoL1x7XHMqXFtuYXRpdmUgY29kZVxdXHMqXH0vKS50ZXN0KCcnICsgZm4pOwp9OwoKbG9jYWwuaXNYTUwgPSBmdW5jdGlvbihkb2N1bWVudCl7CglyZXR1cm4gKCEhZG9jdW1lbnQueG1sVmVyc2lvbikgfHwgKCEhZG9jdW1lbnQueG1sKSB8fCAodG9TdHJpbmcuY2FsbChkb2N1bWVudCkgPT0gJ1tvYmplY3QgWE1MRG9jdW1lbnRdJykgfHwKCShkb2N1bWVudC5ub2RlVHlwZSA9PSA5ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPSAnSFRNTCcpOwp9OwoKbG9jYWwuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbihkb2N1bWVudCl7CgoJLy8gY29udmVydCBlbGVtZW50cyAvIHdpbmRvdyBhcmd1bWVudHMgdG8gZG9jdW1lbnQuIGlmIGRvY3VtZW50IGNhbm5vdCBiZSBleHRyYXBvbGF0ZWQsIHRoZSBmdW5jdGlvbiByZXR1cm5zLgoJdmFyIG5vZGVUeXBlID0gZG9jdW1lbnQubm9kZVR5cGU7CglpZiAobm9kZVR5cGUgPT0gOSk7IC8vIGRvY3VtZW50CgllbHNlIGlmIChub2RlVHlwZSkgZG9jdW1lbnQgPSBkb2N1bWVudC5vd25lckRvY3VtZW50OyAvLyBub2RlCgllbHNlIGlmIChkb2N1bWVudC5uYXZpZ2F0b3IpIGRvY3VtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnQ7IC8vIHdpbmRvdwoJZWxzZSByZXR1cm47CgoJLy8gY2hlY2sgaWYgaXQncyB0aGUgb2xkIGRvY3VtZW50CgoJaWYgKHRoaXMuZG9jdW1lbnQgPT09IGRvY3VtZW50KSByZXR1cm47Cgl0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7CgoJLy8gY2hlY2sgaWYgd2UgaGF2ZSBkb25lIGZlYXR1cmUgZGV0ZWN0aW9uIG9uIHRoaXMgZG9jdW1lbnQgYmVmb3JlCgoJdmFyIHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsCgkJcm9vdFVpZCA9IHRoaXMuZ2V0VUlEWE1MKHJvb3QpLAoJCWZlYXR1cmVzID0gZmVhdHVyZXNDYWNoZVtyb290VWlkXSwKCQlmZWF0dXJlOwoKCWlmIChmZWF0dXJlcyl7CgkJZm9yIChmZWF0dXJlIGluIGZlYXR1cmVzKXsKCQkJdGhpc1tmZWF0dXJlXSA9IGZlYXR1cmVzW2ZlYXR1cmVdOwoJCX0KCQlyZXR1cm47Cgl9CgoJZmVhdHVyZXMgPSBmZWF0dXJlc0NhY2hlW3Jvb3RVaWRdID0ge307CgoJZmVhdHVyZXMucm9vdCA9IHJvb3Q7CglmZWF0dXJlcy5pc1hNTERvY3VtZW50ID0gdGhpcy5pc1hNTChkb2N1bWVudCk7CgoJZmVhdHVyZXMuYnJva2VuU3RhckdFQlROCgk9IGZlYXR1cmVzLnN0YXJTZWxlY3RzQ2xvc2VkUVNBCgk9IGZlYXR1cmVzLmlkR2V0c05hbWUKCT0gZmVhdHVyZXMuYnJva2VuTWl4ZWRDYXNlUVNBCgk9IGZlYXR1cmVzLmJyb2tlbkdFQkNOCgk9IGZlYXR1cmVzLmJyb2tlbkNoZWNrZWRRU0EKCT0gZmVhdHVyZXMuYnJva2VuRW1wdHlBdHRyaWJ1dGVRU0EKCT0gZmVhdHVyZXMuaXNIVE1MRG9jdW1lbnQKCT0gZmVhdHVyZXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yCgk9IGZhbHNlOwoKCXZhciBzdGFyU2VsZWN0c0Nsb3NlZCwgc3RhclNlbGVjdHNDb21tZW50cywKCQlicm9rZW5TZWNvbmRDbGFzc05hbWVHRUJDTiwgY2FjaGVkR2V0RWxlbWVudHNCeUNsYXNzTmFtZSwKCQlicm9rZW5Gb3JtQXR0cmlidXRlR2V0dGVyOwoKCXZhciBzZWxlY3RlZCwgaWQgPSAnc2xpY2tfdW5pcXVlaWQnOwoJdmFyIHRlc3ROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgoJdmFyIHRlc3RSb290ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdIHx8IHJvb3Q7Cgl0ZXN0Um9vdC5hcHBlbmRDaGlsZCh0ZXN0Tm9kZSk7CgoJLy8gb24gbm9uLUhUTUwgZG9jdW1lbnRzIGlubmVySFRNTCBhbmQgZ2V0RWxlbWVudHNCeUlkIGRvZXNudCB3b3JrIHByb3Blcmx5Cgl0cnkgewoJCXRlc3ROb2RlLmlubmVySFRNTCA9ICc8YSBpZD0iJytpZCsnIj48L2E+JzsKCQlmZWF0dXJlcy5pc0hUTUxEb2N1bWVudCA9ICEhZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpOwoJfSBjYXRjaChlKXt9OwoKCWlmIChmZWF0dXJlcy5pc0hUTUxEb2N1bWVudCl7CgoJCXRlc3ROb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CgoJCS8vIElFIHJldHVybnMgY29tbWVudCBub2RlcyBmb3IgZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKSBmb3Igc29tZSBkb2N1bWVudHMKCQl0ZXN0Tm9kZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVDb21tZW50KCcnKSk7CgkJc3RhclNlbGVjdHNDb21tZW50cyA9ICh0ZXN0Tm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpLmxlbmd0aCA+IDEpOwoKCQkvLyBJRSByZXR1cm5zIGNsb3NlZCBub2RlcyAoRUc6IjwvZm9vPiIpIGZvciBnZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpIGZvciBzb21lIGRvY3VtZW50cwoJCXRyeSB7CgkJCXRlc3ROb2RlLmlubmVySFRNTCA9ICdmb288L2Zvbz4nOwoJCQlzZWxlY3RlZCA9IHRlc3ROb2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJyk7CgkJCXN0YXJTZWxlY3RzQ2xvc2VkID0gKHNlbGVjdGVkICYmICEhc2VsZWN0ZWQubGVuZ3RoICYmIHNlbGVjdGVkWzBdLm5vZGVOYW1lLmNoYXJBdCgwKSA9PSAnLycpOwoJCX0gY2F0Y2goZSl7fTsKCgkJZmVhdHVyZXMuYnJva2VuU3RhckdFQlROID0gc3RhclNlbGVjdHNDb21tZW50cyB8fCBzdGFyU2VsZWN0c0Nsb3NlZDsKCgkJLy8gSUUgcmV0dXJucyBlbGVtZW50cyB3aXRoIHRoZSBuYW1lIGluc3RlYWQgb2YganVzdCBpZCBmb3IgZ2V0RWxlbWVudHNCeUlkIGZvciBzb21lIGRvY3VtZW50cwoJCXRyeSB7CgkJCXRlc3ROb2RlLmlubmVySFRNTCA9ICc8YSBuYW1lPSInKyBpZCArJyI+PC9hPjxiIGlkPSInKyBpZCArJyI+PC9iPic7CgkJCWZlYXR1cmVzLmlkR2V0c05hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgPT09IHRlc3ROb2RlLmZpcnN0Q2hpbGQ7CgkJfSBjYXRjaChlKXt9OwoKCQlpZiAodGVzdE5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSl7CgoJCQkvLyBTYWZhcmkgMy4yIGdldEVsZW1lbnRzQnlDbGFzc05hbWUgY2FjaGVzIHJlc3VsdHMKCQkJdHJ5IHsKCQkJCXRlc3ROb2RlLmlubmVySFRNTCA9ICc8YSBjbGFzcz0iZiI+PC9hPjxhIGNsYXNzPSJiIj48L2E+JzsKCQkJCXRlc3ROb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2InKS5sZW5ndGg7CgkJCQl0ZXN0Tm9kZS5maXJzdENoaWxkLmNsYXNzTmFtZSA9ICdiJzsKCQkJCWNhY2hlZEdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSAodGVzdE5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYicpLmxlbmd0aCAhPSAyKTsKCQkJfSBjYXRjaChlKXt9OwoKCQkJLy8gT3BlcmEgOS42IGdldEVsZW1lbnRzQnlDbGFzc05hbWUgZG9lc250IGRldGVjdHMgdGhlIGNsYXNzIGlmIGl0cyBub3QgdGhlIGZpcnN0IG9uZQoJCQl0cnkgewoJCQkJdGVzdE5vZGUuaW5uZXJIVE1MID0gJzxhIGNsYXNzPSJhIj48L2E+PGEgY2xhc3M9ImYgYiBhIj48L2E+JzsKCQkJCWJyb2tlblNlY29uZENsYXNzTmFtZUdFQkNOID0gKHRlc3ROb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2EnKS5sZW5ndGggIT0gMik7CgkJCX0gY2F0Y2goZSl7fTsKCgkJCWZlYXR1cmVzLmJyb2tlbkdFQkNOID0gY2FjaGVkR2V0RWxlbWVudHNCeUNsYXNzTmFtZSB8fCBicm9rZW5TZWNvbmRDbGFzc05hbWVHRUJDTjsKCQl9CgoJCWlmICh0ZXN0Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKXsKCQkJLy8gSUUgOCByZXR1cm5zIGNsb3NlZCBub2RlcyAoRUc6IjwvZm9vPiIpIGZvciBxdWVyeVNlbGVjdG9yQWxsKCcqJykgZm9yIHNvbWUgZG9jdW1lbnRzCgkJCXRyeSB7CgkJCQl0ZXN0Tm9kZS5pbm5lckhUTUwgPSAnZm9vPC9mb28+JzsKCQkJCXNlbGVjdGVkID0gdGVzdE5vZGUucXVlcnlTZWxlY3RvckFsbCgnKicpOwoJCQkJZmVhdHVyZXMuc3RhclNlbGVjdHNDbG9zZWRRU0EgPSAoc2VsZWN0ZWQgJiYgISFzZWxlY3RlZC5sZW5ndGggJiYgc2VsZWN0ZWRbMF0ubm9kZU5hbWUuY2hhckF0KDApID09ICcvJyk7CgkJCX0gY2F0Y2goZSl7fTsKCgkJCS8vIFNhZmFyaSAzLjIgcXVlcnlTZWxlY3RvckFsbCBkb2VzbnQgd29yayB3aXRoIG1peGVkY2FzZSBvbiBxdWlya3Ntb2RlCgkJCXRyeSB7CgkJCQl0ZXN0Tm9kZS5pbm5lckhUTUwgPSAnPGEgY2xhc3M9Ik1pWCI+PC9hPic7CgkJCQlmZWF0dXJlcy5icm9rZW5NaXhlZENhc2VRU0EgPSAhdGVzdE5vZGUucXVlcnlTZWxlY3RvckFsbCgnLk1pWCcpLmxlbmd0aDsKCQkJfSBjYXRjaChlKXt9OwoKCQkJLy8gV2Via2l0IGFuZCBPcGVyYSBkb250IHJldHVybiBzZWxlY3RlZCBvcHRpb25zIG9uIHF1ZXJ5U2VsZWN0b3JBbGwKCQkJdHJ5IHsKCQkJCXRlc3ROb2RlLmlubmVySFRNTCA9ICc8c2VsZWN0PjxvcHRpb24gc2VsZWN0ZWQ9InNlbGVjdGVkIj5hPC9vcHRpb24+PC9zZWxlY3Q+JzsKCQkJCWZlYXR1cmVzLmJyb2tlbkNoZWNrZWRRU0EgPSAodGVzdE5vZGUucXVlcnlTZWxlY3RvckFsbCgnOmNoZWNrZWQnKS5sZW5ndGggPT0gMCk7CgkJCX0gY2F0Y2goZSl7fTsKCgkJCS8vIElFIHJldHVybnMgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIGF0dHJbKl4kXT0iIiBzZWxlY3RvcnMgb24gcXVlcnlTZWxlY3RvckFsbAoJCQl0cnkgewoJCQkJdGVzdE5vZGUuaW5uZXJIVE1MID0gJzxhIGNsYXNzPSIiPjwvYT4nOwoJCQkJZmVhdHVyZXMuYnJva2VuRW1wdHlBdHRyaWJ1dGVRU0EgPSAodGVzdE5vZGUucXVlcnlTZWxlY3RvckFsbCgnW2NsYXNzKj0iIl0nKS5sZW5ndGggIT0gMCk7CgkJCX0gY2F0Y2goZSl7fTsKCgkJfQoKCQkvLyBJRTYtNywgaWYgYSBmb3JtIGhhcyBhbiBpbnB1dCBvZiBpZCB4LCBmb3JtLmdldEF0dHJpYnV0ZSh4KSByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnB1dAoJCXRyeSB7CgkJCXRlc3ROb2RlLmlubmVySFRNTCA9ICc8Zm9ybSBhY3Rpb249InMiPjxpbnB1dCBpZD0iYWN0aW9uIi8+PC9mb3JtPic7CgkJCWJyb2tlbkZvcm1BdHRyaWJ1dGVHZXR0ZXIgPSAodGVzdE5vZGUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpICE9ICdzJyk7CgkJfSBjYXRjaChlKXt9OwoKCQkvLyBuYXRpdmUgbWF0Y2hlc1NlbGVjdG9yIGZ1bmN0aW9uCgoJCWZlYXR1cmVzLm5hdGl2ZU1hdGNoZXNTZWxlY3RvciA9IHJvb3QubWF0Y2hlc1NlbGVjdG9yIHx8IC8qcm9vdC5tc01hdGNoZXNTZWxlY3RvciB8fCovIHJvb3QubW96TWF0Y2hlc1NlbGVjdG9yIHx8IHJvb3Qud2Via2l0TWF0Y2hlc1NlbGVjdG9yOwoJCWlmIChmZWF0dXJlcy5uYXRpdmVNYXRjaGVzU2VsZWN0b3IpIHRyeSB7CgkJCS8vIGlmIG1hdGNoZXNTZWxlY3RvciB0cm93cyBlcnJvcnMgb24gaW5jb3JyZWN0IHNpbnRheGVzIHdlIGNhbiB1c2UgaXQKCQkJZmVhdHVyZXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yLmNhbGwocm9vdCwgJzpzbGljaycpOwoJCQlmZWF0dXJlcy5uYXRpdmVNYXRjaGVzU2VsZWN0b3IgPSBudWxsOwoJCX0gY2F0Y2goZSl7fTsKCgl9CgoJdHJ5IHsKCQlyb290LnNsaWNrX2V4cGFuZG8gPSAxOwoJCWRlbGV0ZSByb290LnNsaWNrX2V4cGFuZG87CgkJZmVhdHVyZXMuZ2V0VUlEID0gdGhpcy5nZXRVSURIVE1MOwoJfSBjYXRjaChlKSB7CgkJZmVhdHVyZXMuZ2V0VUlEID0gdGhpcy5nZXRVSURYTUw7Cgl9CgoJdGVzdFJvb3QucmVtb3ZlQ2hpbGQodGVzdE5vZGUpOwoJdGVzdE5vZGUgPSBzZWxlY3RlZCA9IHRlc3RSb290ID0gbnVsbDsKCgkvLyBnZXRBdHRyaWJ1dGUKCglmZWF0dXJlcy5nZXRBdHRyaWJ1dGUgPSAoZmVhdHVyZXMuaXNIVE1MRG9jdW1lbnQgJiYgYnJva2VuRm9ybUF0dHJpYnV0ZUdldHRlcikgPyBmdW5jdGlvbihub2RlLCBuYW1lKXsKCQl2YXIgbWV0aG9kID0gdGhpcy5hdHRyaWJ1dGVHZXR0ZXJzW25hbWVdOwoJCWlmIChtZXRob2QpIHJldHVybiBtZXRob2QuY2FsbChub2RlKTsKCQl2YXIgYXR0cmlidXRlTm9kZSA9IG5vZGUuZ2V0QXR0cmlidXRlTm9kZShuYW1lKTsKCQlyZXR1cm4gKGF0dHJpYnV0ZU5vZGUpID8gYXR0cmlidXRlTm9kZS5ub2RlVmFsdWUgOiBudWxsOwoJfSA6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpewoJCXZhciBtZXRob2QgPSB0aGlzLmF0dHJpYnV0ZUdldHRlcnNbbmFtZV07CgkJcmV0dXJuIChtZXRob2QpID8gbWV0aG9kLmNhbGwobm9kZSkgOiBub2RlLmdldEF0dHJpYnV0ZShuYW1lKTsKCX07CgoJLy8gaGFzQXR0cmlidXRlCgoJZmVhdHVyZXMuaGFzQXR0cmlidXRlID0gKHJvb3QgJiYgdGhpcy5pc05hdGl2ZUNvZGUocm9vdC5oYXNBdHRyaWJ1dGUpKSA/IGZ1bmN0aW9uKG5vZGUsIGF0dHJpYnV0ZSkgewoJCXJldHVybiBub2RlLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpOwoJfSA6IGZ1bmN0aW9uKG5vZGUsIGF0dHJpYnV0ZSkgewoJCW5vZGUgPSBub2RlLmdldEF0dHJpYnV0ZU5vZGUoYXR0cmlidXRlKTsKCQlyZXR1cm4gISEobm9kZSAmJiAobm9kZS5zcGVjaWZpZWQgfHwgbm9kZS5ub2RlVmFsdWUpKTsKCX07CgoJLy8gY29udGFpbnMKCS8vIEZJWE1FOiBBZGQgc3BlY3M6IGxvY2FsLmNvbnRhaW5zIHNob3VsZCBiZSBkaWZmZXJlbnQgZm9yIHhtbCBhbmQgaHRtbCBkb2N1bWVudHM/CglmZWF0dXJlcy5jb250YWlucyA9IChyb290ICYmIHRoaXMuaXNOYXRpdmVDb2RlKHJvb3QuY29udGFpbnMpKSA/IGZ1bmN0aW9uKGNvbnRleHQsIG5vZGUpewoJCXJldHVybiBjb250ZXh0LmNvbnRhaW5zKG5vZGUpOwoJfSA6IChyb290ICYmIHJvb3QuY29tcGFyZURvY3VtZW50UG9zaXRpb24pID8gZnVuY3Rpb24oY29udGV4dCwgbm9kZSl7CgkJcmV0dXJuIGNvbnRleHQgPT09IG5vZGUgfHwgISEoY29udGV4dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlKSAmIDE2KTsKCX0gOiBmdW5jdGlvbihjb250ZXh0LCBub2RlKXsKCQlpZiAobm9kZSkgZG8gewoJCQlpZiAobm9kZSA9PT0gY29udGV4dCkgcmV0dXJuIHRydWU7CgkJfSB3aGlsZSAoKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKTsKCQlyZXR1cm4gZmFsc2U7Cgl9OwoKCS8vIGRvY3VtZW50IG9yZGVyIHNvcnRpbmcKCS8vIGNyZWRpdHMgdG8gU2l6emxlIChodHRwOi8vc2l6emxlanMuY29tLykKCglmZWF0dXJlcy5kb2N1bWVudFNvcnRlciA9IChyb290LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSA/IGZ1bmN0aW9uKGEsIGIpewoJCWlmICghYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiB8fCAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikgcmV0dXJuIDA7CgkJcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikgJiA0ID8gLTEgOiBhID09PSBiID8gMCA6IDE7Cgl9IDogKCdzb3VyY2VJbmRleCcgaW4gcm9vdCkgPyBmdW5jdGlvbihhLCBiKXsKCQlpZiAoIWEuc291cmNlSW5kZXggfHwgIWIuc291cmNlSW5kZXgpIHJldHVybiAwOwoJCXJldHVybiBhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDsKCX0gOiAoZG9jdW1lbnQuY3JlYXRlUmFuZ2UpID8gZnVuY3Rpb24oYSwgYil7CgkJaWYgKCFhLm93bmVyRG9jdW1lbnQgfHwgIWIub3duZXJEb2N1bWVudCkgcmV0dXJuIDA7CgkJdmFyIGFSYW5nZSA9IGEub3duZXJEb2N1bWVudC5jcmVhdGVSYW5nZSgpLCBiUmFuZ2UgPSBiLm93bmVyRG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTsKCQlhUmFuZ2Uuc2V0U3RhcnQoYSwgMCk7CgkJYVJhbmdlLnNldEVuZChhLCAwKTsKCQliUmFuZ2Uuc2V0U3RhcnQoYiwgMCk7CgkJYlJhbmdlLnNldEVuZChiLCAwKTsKCQlyZXR1cm4gYVJhbmdlLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhSYW5nZS5TVEFSVF9UT19FTkQsIGJSYW5nZSk7Cgl9IDogbnVsbCA7CgoJcm9vdCA9IG51bGw7CgoJZm9yIChmZWF0dXJlIGluIGZlYXR1cmVzKXsKCQl0aGlzW2ZlYXR1cmVdID0gZmVhdHVyZXNbZmVhdHVyZV07Cgl9Cn07CgovLyBNYWluIE1ldGhvZAoKdmFyIHJlU2ltcGxlU2VsZWN0b3IgPSAvXihbIy5dPykoKD86W1x3LV0rfFwqKSkkLywKCXJlRW1wdHlBdHRyaWJ1dGUgPSAvXFsuK1sqJF5dPSg/OiIifCcnKT9cXS8sCglxc2FGYWlsRXhwQ2FjaGUgPSB7fTsKCmxvY2FsLnNlYXJjaCA9IGZ1bmN0aW9uKGNvbnRleHQsIGV4cHJlc3Npb24sIGFwcGVuZCwgZmlyc3QpewoKCXZhciBmb3VuZCA9IHRoaXMuZm91bmQgPSAoZmlyc3QpID8gbnVsbCA6IChhcHBlbmQgfHwgW10pOwoKCWlmICghY29udGV4dCkgcmV0dXJuIGZvdW5kOwoJZWxzZSBpZiAoY29udGV4dC5uYXZpZ2F0b3IpIGNvbnRleHQgPSBjb250ZXh0LmRvY3VtZW50OyAvLyBDb252ZXJ0IHRoZSBub2RlIGZyb20gYSB3aW5kb3cgdG8gYSBkb2N1bWVudAoJZWxzZSBpZiAoIWNvbnRleHQubm9kZVR5cGUpIHJldHVybiBmb3VuZDsKCgkvLyBzZXR1cAoKCXZhciBwYXJzZWQsIGksCgkJdW5pcXVlcyA9IHRoaXMudW5pcXVlcyA9IHt9LAoJCWhhc090aGVycyA9ICEhKGFwcGVuZCAmJiBhcHBlbmQubGVuZ3RoKSwKCQljb250ZXh0SXNEb2N1bWVudCA9IChjb250ZXh0Lm5vZGVUeXBlID09IDkpOwoKCWlmICh0aGlzLmRvY3VtZW50ICE9PSAoY29udGV4dElzRG9jdW1lbnQgPyBjb250ZXh0IDogY29udGV4dC5vd25lckRvY3VtZW50KSkgdGhpcy5zZXREb2N1bWVudChjb250ZXh0KTsKCgkvLyBhdm9pZCBkdXBsaWNhdGluZyBpdGVtcyBhbHJlYWR5IGluIHRoZSBhcHBlbmQgYXJyYXkKCWlmIChoYXNPdGhlcnMpIGZvciAoaSA9IGZvdW5kLmxlbmd0aDsgaS0tOykgdW5pcXVlc1t0aGlzLmdldFVJRChmb3VuZFtpXSldID0gdHJ1ZTsKCgkvLyBleHByZXNzaW9uIGNoZWNrcwoKCWlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PSAnc3RyaW5nJyl7IC8vIGV4cHJlc3Npb24gaXMgYSBzdHJpbmcKCgkJLyo8c2ltcGxlLXNlbGVjdG9ycy1vdmVycmlkZT4qLwoJCXZhciBzaW1wbGVTZWxlY3RvciA9IGV4cHJlc3Npb24ubWF0Y2gocmVTaW1wbGVTZWxlY3Rvcik7CgkJc2ltcGxlU2VsZWN0b3JzOiBpZiAoc2ltcGxlU2VsZWN0b3IpIHsKCgkJCXZhciBzeW1ib2wgPSBzaW1wbGVTZWxlY3RvclsxXSwKCQkJCW5hbWUgPSBzaW1wbGVTZWxlY3RvclsyXSwKCQkJCW5vZGUsIG5vZGVzOwoKCQkJaWYgKCFzeW1ib2wpewoKCQkJCWlmIChuYW1lID09ICcqJyAmJiB0aGlzLmJyb2tlblN0YXJHRUJUTikgYnJlYWsgc2ltcGxlU2VsZWN0b3JzOwoJCQkJbm9kZXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKG5hbWUpOwoJCQkJaWYgKGZpcnN0KSByZXR1cm4gbm9kZXNbMF0gfHwgbnVsbDsKCQkJCWZvciAoaSA9IDA7IG5vZGUgPSBub2Rlc1tpKytdOyl7CgkJCQkJaWYgKCEoaGFzT3RoZXJzICYmIHVuaXF1ZXNbdGhpcy5nZXRVSUQobm9kZSldKSkgZm91bmQucHVzaChub2RlKTsKCQkJCX0KCgkJCX0gZWxzZSBpZiAoc3ltYm9sID09ICcjJyl7CgoJCQkJaWYgKCF0aGlzLmlzSFRNTERvY3VtZW50IHx8ICFjb250ZXh0SXNEb2N1bWVudCkgYnJlYWsgc2ltcGxlU2VsZWN0b3JzOwoJCQkJbm9kZSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQobmFtZSk7CgkJCQlpZiAoIW5vZGUpIHJldHVybiBmb3VuZDsKCQkJCWlmICh0aGlzLmlkR2V0c05hbWUgJiYgbm9kZS5nZXRBdHRyaWJ1dGVOb2RlKCdpZCcpLm5vZGVWYWx1ZSAhPSBuYW1lKSBicmVhayBzaW1wbGVTZWxlY3RvcnM7CgkJCQlpZiAoZmlyc3QpIHJldHVybiBub2RlIHx8IG51bGw7CgkJCQlpZiAoIShoYXNPdGhlcnMgJiYgdW5pcXVlc1t0aGlzLmdldFVJRChub2RlKV0pKSBmb3VuZC5wdXNoKG5vZGUpOwoKCQkJfSBlbHNlIGlmIChzeW1ib2wgPT0gJy4nKXsKCgkJCQlpZiAoIXRoaXMuaXNIVE1MRG9jdW1lbnQgfHwgKCghY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lIHx8IHRoaXMuYnJva2VuR0VCQ04pICYmIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCkpIGJyZWFrIHNpbXBsZVNlbGVjdG9yczsKCQkJCWlmIChjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgIXRoaXMuYnJva2VuR0VCQ04pewoJCQkJCW5vZGVzID0gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG5hbWUpOwoJCQkJCWlmIChmaXJzdCkgcmV0dXJuIG5vZGVzWzBdIHx8IG51bGw7CgkJCQkJZm9yIChpID0gMDsgbm9kZSA9IG5vZGVzW2krK107KXsKCQkJCQkJaWYgKCEoaGFzT3RoZXJzICYmIHVuaXF1ZXNbdGhpcy5nZXRVSUQobm9kZSldKSkgZm91bmQucHVzaChub2RlKTsKCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCXZhciBtYXRjaENsYXNzID0gbmV3IFJlZ0V4cCgnKF58XFxzKScrIFNsaWNrLmVzY2FwZVJlZ0V4cChuYW1lKSArJyhcXHN8JCknKTsKCQkJCQlub2RlcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTsKCQkJCQlmb3IgKGkgPSAwOyBub2RlID0gbm9kZXNbaSsrXTspewoJCQkJCQljbGFzc05hbWUgPSBub2RlLmNsYXNzTmFtZTsKCQkJCQkJaWYgKCEoY2xhc3NOYW1lICYmIG1hdGNoQ2xhc3MudGVzdChjbGFzc05hbWUpKSkgY29udGludWU7CgkJCQkJCWlmIChmaXJzdCkgcmV0dXJuIG5vZGU7CgkJCQkJCWlmICghKGhhc090aGVycyAmJiB1bmlxdWVzW3RoaXMuZ2V0VUlEKG5vZGUpXSkpIGZvdW5kLnB1c2gobm9kZSk7CgkJCQkJfQoJCQkJfQoKCQkJfQoKCQkJaWYgKGhhc090aGVycykgdGhpcy5zb3J0KGZvdW5kKTsKCQkJcmV0dXJuIChmaXJzdCkgPyBudWxsIDogZm91bmQ7CgoJCX0KCQkvKjwvc2ltcGxlLXNlbGVjdG9ycy1vdmVycmlkZT4qLwoKCQkvKjxxdWVyeS1zZWxlY3Rvci1vdmVycmlkZT4qLwoJCXF1ZXJ5U2VsZWN0b3I6IGlmIChjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwpIHsKCgkJCWlmICghdGhpcy5pc0hUTUxEb2N1bWVudAoJCQkJfHwgcXNhRmFpbEV4cENhY2hlW2V4cHJlc3Npb25dCgkJCQkvL1RPRE86IG9ubHkgc2tpcCB3aGVuIGV4cHJlc3Npb24gaXMgYWN0dWFsbHkgbWl4ZWQgY2FzZQoJCQkJfHwgdGhpcy5icm9rZW5NaXhlZENhc2VRU0EKCQkJCXx8ICh0aGlzLmJyb2tlbkNoZWNrZWRRU0EgJiYgZXhwcmVzc2lvbi5pbmRleE9mKCc6Y2hlY2tlZCcpID4gLTEpCgkJCQl8fCAodGhpcy5icm9rZW5FbXB0eUF0dHJpYnV0ZVFTQSAmJiByZUVtcHR5QXR0cmlidXRlLnRlc3QoZXhwcmVzc2lvbikpCgkJCQl8fCAoIWNvbnRleHRJc0RvY3VtZW50IC8vQWJvcnQgd2hlbiAhY29udGV4dElzRG9jdW1lbnQgYW5kLi4uCgkJCQkJLy8gIHRoZXJlIGFyZSBtdWx0aXBsZSBleHByZXNzaW9ucyBpbiB0aGUgc2VsZWN0b3IKCQkJCQkvLyAgc2luY2Ugd2UgY3VycmVudGx5IG9ubHkgZml4IG5vbi1kb2N1bWVudCByb290ZWQgUVNBIGZvciBzaW5nbGUgZXhwcmVzc2lvbiBzZWxlY3RvcnMKCQkJCQkmJiBleHByZXNzaW9uLmluZGV4T2YoJywnKSA+IC0xCgkJCQkpCgkJCQl8fCBTbGljay5kaXNhYmxlUVNBCgkJCSkgYnJlYWsgcXVlcnlTZWxlY3RvcjsKCgkJCXZhciBfZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24sIF9jb250ZXh0ID0gY29udGV4dDsKCQkJaWYgKCFjb250ZXh0SXNEb2N1bWVudCl7CgkJCQkvLyBub24tZG9jdW1lbnQgcm9vdGVkIFFTQQoJCQkJLy8gY3JlZGl0cyB0byBBbmRyZXcgRHVwb250CgkJCQl2YXIgY3VycmVudElkID0gX2NvbnRleHQuZ2V0QXR0cmlidXRlKCdpZCcpLCBzbGlja2lkID0gJ3NsaWNraWRfXyc7CgkJCQlfY29udGV4dC5zZXRBdHRyaWJ1dGUoJ2lkJywgc2xpY2tpZCk7CgkJCQlfZXhwcmVzc2lvbiA9ICcjJyArIHNsaWNraWQgKyAnICcgKyBfZXhwcmVzc2lvbjsKCQkJCWNvbnRleHQgPSBfY29udGV4dC5wYXJlbnROb2RlOwoJCQl9CgoJCQl0cnkgewoJCQkJaWYgKGZpcnN0KSByZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yKF9leHByZXNzaW9uKSB8fCBudWxsOwoJCQkJZWxzZSBub2RlcyA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChfZXhwcmVzc2lvbik7CgkJCX0gY2F0Y2goZSkgewoJCQkJcXNhRmFpbEV4cENhY2hlW2V4cHJlc3Npb25dID0gMTsKCQkJCWJyZWFrIHF1ZXJ5U2VsZWN0b3I7CgkJCX0gZmluYWxseSB7CgkJCQlpZiAoIWNvbnRleHRJc0RvY3VtZW50KXsKCQkJCQlpZiAoY3VycmVudElkKSBfY29udGV4dC5zZXRBdHRyaWJ1dGUoJ2lkJywgY3VycmVudElkKTsKCQkJCQllbHNlIF9jb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTsKCQkJCQljb250ZXh0ID0gX2NvbnRleHQ7CgkJCQl9CgkJCX0KCgkJCWlmICh0aGlzLnN0YXJTZWxlY3RzQ2xvc2VkUVNBKSBmb3IgKGkgPSAwOyBub2RlID0gbm9kZXNbaSsrXTspewoJCQkJaWYgKG5vZGUubm9kZU5hbWUgPiAnQCcgJiYgIShoYXNPdGhlcnMgJiYgdW5pcXVlc1t0aGlzLmdldFVJRChub2RlKV0pKSBmb3VuZC5wdXNoKG5vZGUpOwoJCQl9IGVsc2UgZm9yIChpID0gMDsgbm9kZSA9IG5vZGVzW2krK107KXsKCQkJCWlmICghKGhhc090aGVycyAmJiB1bmlxdWVzW3RoaXMuZ2V0VUlEKG5vZGUpXSkpIGZvdW5kLnB1c2gobm9kZSk7CgkJCX0KCgkJCWlmIChoYXNPdGhlcnMpIHRoaXMuc29ydChmb3VuZCk7CgkJCXJldHVybiBmb3VuZDsKCgkJfQoJCS8qPC9xdWVyeS1zZWxlY3Rvci1vdmVycmlkZT4qLwoKCQlwYXJzZWQgPSB0aGlzLlNsaWNrLnBhcnNlKGV4cHJlc3Npb24pOwoJCWlmICghcGFyc2VkLmxlbmd0aCkgcmV0dXJuIGZvdW5kOwoJfSBlbHNlIGlmIChleHByZXNzaW9uID09IG51bGwpeyAvLyB0aGVyZSBpcyBubyBleHByZXNzaW9uCgkJcmV0dXJuIGZvdW5kOwoJfSBlbHNlIGlmIChleHByZXNzaW9uLlNsaWNrKXsgLy8gZXhwcmVzc2lvbiBpcyBhIHBhcnNlZCBTbGljayBvYmplY3QKCQlwYXJzZWQgPSBleHByZXNzaW9uOwoJfSBlbHNlIGlmICh0aGlzLmNvbnRhaW5zKGNvbnRleHQuZG9jdW1lbnRFbGVtZW50IHx8IGNvbnRleHQsIGV4cHJlc3Npb24pKXsgLy8gZXhwcmVzc2lvbiBpcyBhIG5vZGUKCQkoZm91bmQpID8gZm91bmQucHVzaChleHByZXNzaW9uKSA6IGZvdW5kID0gZXhwcmVzc2lvbjsKCQlyZXR1cm4gZm91bmQ7Cgl9IGVsc2UgeyAvLyBvdGhlciBqdW5rCgkJcmV0dXJuIGZvdW5kOwoJfQoKCS8qPHBzZXVkby1zZWxlY3RvcnM+Ki8vKjxudGgtcHNldWRvLXNlbGVjdG9ycz4qLwoKCS8vIGNhY2hlIGVsZW1lbnRzIGZvciB0aGUgbnRoIHNlbGVjdG9ycwoKCXRoaXMucG9zTlRIID0ge307Cgl0aGlzLnBvc05USExhc3QgPSB7fTsKCXRoaXMucG9zTlRIVHlwZSA9IHt9OwoJdGhpcy5wb3NOVEhUeXBlTGFzdCA9IHt9OwoKCS8qPC9udGgtcHNldWRvLXNlbGVjdG9ycz4qLy8qPC9wc2V1ZG8tc2VsZWN0b3JzPiovCgoJLy8gaWYgYXBwZW5kIGlzIG51bGwgYW5kIHRoZXJlIGlzIG9ubHkgYSBzaW5nbGUgc2VsZWN0b3Igd2l0aCBvbmUgZXhwcmVzc2lvbiB1c2UgcHVzaEFycmF5LCBlbHNlIHVzZSBwdXNoVUlECgl0aGlzLnB1c2ggPSAoIWhhc090aGVycyAmJiAoZmlyc3QgfHwgKHBhcnNlZC5sZW5ndGggPT0gMSAmJiBwYXJzZWQuZXhwcmVzc2lvbnNbMF0ubGVuZ3RoID09IDEpKSkgPyB0aGlzLnB1c2hBcnJheSA6IHRoaXMucHVzaFVJRDsKCglpZiAoZm91bmQgPT0gbnVsbCkgZm91bmQgPSBbXTsKCgkvLyBkZWZhdWx0IGVuZ2luZQoKCXZhciBqLCBtLCBuOwoJdmFyIGNvbWJpbmF0b3IsIHRhZywgaWQsIGNsYXNzTGlzdCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvczsKCXZhciBjdXJyZW50SXRlbXMsIGN1cnJlbnRFeHByZXNzaW9uLCBjdXJyZW50Qml0LCBsYXN0Qml0LCBleHByZXNzaW9ucyA9IHBhcnNlZC5leHByZXNzaW9uczsKCglzZWFyY2g6IGZvciAoaSA9IDA7IChjdXJyZW50RXhwcmVzc2lvbiA9IGV4cHJlc3Npb25zW2ldKTsgaSsrKSBmb3IgKGogPSAwOyAoY3VycmVudEJpdCA9IGN1cnJlbnRFeHByZXNzaW9uW2pdKTsgaisrKXsKCgkJY29tYmluYXRvciA9ICdjb21iaW5hdG9yOicgKyBjdXJyZW50Qml0LmNvbWJpbmF0b3I7CgkJaWYgKCF0aGlzW2NvbWJpbmF0b3JdKSBjb250aW51ZSBzZWFyY2g7CgoJCXRhZyAgICAgICAgPSAodGhpcy5pc1hNTERvY3VtZW50KSA/IGN1cnJlbnRCaXQudGFnIDogY3VycmVudEJpdC50YWcudG9VcHBlckNhc2UoKTsKCQlpZCAgICAgICAgID0gY3VycmVudEJpdC5pZDsKCQljbGFzc0xpc3QgID0gY3VycmVudEJpdC5jbGFzc0xpc3Q7CgkJY2xhc3NlcyAgICA9IGN1cnJlbnRCaXQuY2xhc3NlczsKCQlhdHRyaWJ1dGVzID0gY3VycmVudEJpdC5hdHRyaWJ1dGVzOwoJCXBzZXVkb3MgICAgPSBjdXJyZW50Qml0LnBzZXVkb3M7CgkJbGFzdEJpdCAgICA9IChqID09PSAoY3VycmVudEV4cHJlc3Npb24ubGVuZ3RoIC0gMSkpOwoKCQl0aGlzLmJpdFVuaXF1ZXMgPSB7fTsKCgkJaWYgKGxhc3RCaXQpewoJCQl0aGlzLnVuaXF1ZXMgPSB1bmlxdWVzOwoJCQl0aGlzLmZvdW5kID0gZm91bmQ7CgkJfSBlbHNlIHsKCQkJdGhpcy51bmlxdWVzID0ge307CgkJCXRoaXMuZm91bmQgPSBbXTsKCQl9CgoJCWlmIChqID09PSAwKXsKCQkJdGhpc1tjb21iaW5hdG9yXShjb250ZXh0LCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zLCBjbGFzc0xpc3QpOwoJCQlpZiAoZmlyc3QgJiYgbGFzdEJpdCAmJiBmb3VuZC5sZW5ndGgpIGJyZWFrIHNlYXJjaDsKCQl9IGVsc2UgewoJCQlpZiAoZmlyc3QgJiYgbGFzdEJpdCkgZm9yIChtID0gMCwgbiA9IGN1cnJlbnRJdGVtcy5sZW5ndGg7IG0gPCBuOyBtKyspewoJCQkJdGhpc1tjb21iaW5hdG9yXShjdXJyZW50SXRlbXNbbV0sIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MsIGNsYXNzTGlzdCk7CgkJCQlpZiAoZm91bmQubGVuZ3RoKSBicmVhayBzZWFyY2g7CgkJCX0gZWxzZSBmb3IgKG0gPSAwLCBuID0gY3VycmVudEl0ZW1zLmxlbmd0aDsgbSA8IG47IG0rKykgdGhpc1tjb21iaW5hdG9yXShjdXJyZW50SXRlbXNbbV0sIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MsIGNsYXNzTGlzdCk7CgkJfQoKCQljdXJyZW50SXRlbXMgPSB0aGlzLmZvdW5kOwoJfQoKCS8vIHNob3VsZCBzb3J0IGlmIHRoZXJlIGFyZSBub2RlcyBpbiBhcHBlbmQgYW5kIGlmIHlvdSBwYXNzIG11bHRpcGxlIGV4cHJlc3Npb25zLgoJaWYgKGhhc090aGVycyB8fCAocGFyc2VkLmV4cHJlc3Npb25zLmxlbmd0aCA+IDEpKSB0aGlzLnNvcnQoZm91bmQpOwoKCXJldHVybiAoZmlyc3QpID8gKGZvdW5kWzBdIHx8IG51bGwpIDogZm91bmQ7Cn07CgovLyBVdGlscwoKbG9jYWwudWlkeCA9IDE7CmxvY2FsLnVpZGsgPSAnc2xpY2stdW5pcXVlaWQnOwoKbG9jYWwuZ2V0VUlEWE1MID0gZnVuY3Rpb24obm9kZSl7Cgl2YXIgdWlkID0gbm9kZS5nZXRBdHRyaWJ1dGUodGhpcy51aWRrKTsKCWlmICghdWlkKXsKCQl1aWQgPSB0aGlzLnVpZHgrKzsKCQlub2RlLnNldEF0dHJpYnV0ZSh0aGlzLnVpZGssIHVpZCk7Cgl9CglyZXR1cm4gdWlkOwp9OwoKbG9jYWwuZ2V0VUlESFRNTCA9IGZ1bmN0aW9uKG5vZGUpewoJcmV0dXJuIG5vZGUudW5pcXVlTnVtYmVyIHx8IChub2RlLnVuaXF1ZU51bWJlciA9IHRoaXMudWlkeCsrKTsKfTsKCi8vIHNvcnQgYmFzZWQgb24gdGhlIHNldERvY3VtZW50IGRvY3VtZW50U29ydGVyIG1ldGhvZC4KCmxvY2FsLnNvcnQgPSBmdW5jdGlvbihyZXN1bHRzKXsKCWlmICghdGhpcy5kb2N1bWVudFNvcnRlcikgcmV0dXJuIHJlc3VsdHM7CglyZXN1bHRzLnNvcnQodGhpcy5kb2N1bWVudFNvcnRlcik7CglyZXR1cm4gcmVzdWx0czsKfTsKCi8qPHBzZXVkby1zZWxlY3RvcnM+Ki8vKjxudGgtcHNldWRvLXNlbGVjdG9ycz4qLwoKbG9jYWwuY2FjaGVOVEggPSB7fTsKCmxvY2FsLm1hdGNoTlRIID0gL14oWystXT9cZCopPyhbYS16XSspPyhbKy1dXGQrKT8kLzsKCmxvY2FsLnBhcnNlTlRIQXJndW1lbnQgPSBmdW5jdGlvbihhcmd1bWVudCl7Cgl2YXIgcGFyc2VkID0gYXJndW1lbnQubWF0Y2godGhpcy5tYXRjaE5USCk7CglpZiAoIXBhcnNlZCkgcmV0dXJuIGZhbHNlOwoJdmFyIHNwZWNpYWwgPSBwYXJzZWRbMl0gfHwgZmFsc2U7Cgl2YXIgYSA9IHBhcnNlZFsxXSB8fCAxOwoJaWYgKGEgPT0gJy0nKSBhID0gLTE7Cgl2YXIgYiA9ICtwYXJzZWRbM10gfHwgMDsKCXBhcnNlZCA9CgkJKHNwZWNpYWwgPT0gJ24nKQk/IHthOiBhLCBiOiBifSA6CgkJKHNwZWNpYWwgPT0gJ29kZCcpCT8ge2E6IDIsIGI6IDF9IDoKCQkoc3BlY2lhbCA9PSAnZXZlbicpCT8ge2E6IDIsIGI6IDB9IDoge2E6IDAsIGI6IGF9OwoKCXJldHVybiAodGhpcy5jYWNoZU5USFthcmd1bWVudF0gPSBwYXJzZWQpOwp9OwoKbG9jYWwuY3JlYXRlTlRIUHNldWRvID0gZnVuY3Rpb24oY2hpbGQsIHNpYmxpbmcsIHBvc2l0aW9ucywgb2ZUeXBlKXsKCXJldHVybiBmdW5jdGlvbihub2RlLCBhcmd1bWVudCl7CgkJdmFyIHVpZCA9IHRoaXMuZ2V0VUlEKG5vZGUpOwoJCWlmICghdGhpc1twb3NpdGlvbnNdW3VpZF0pewoJCQl2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlOwoJCQlpZiAoIXBhcmVudCkgcmV0dXJuIGZhbHNlOwoJCQl2YXIgZWwgPSBwYXJlbnRbY2hpbGRdLCBjb3VudCA9IDE7CgkJCWlmIChvZlR5cGUpewoJCQkJdmFyIG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZTsKCQkJCWRvIHsKCQkJCQlpZiAoZWwubm9kZU5hbWUgIT0gbm9kZU5hbWUpIGNvbnRpbnVlOwoJCQkJCXRoaXNbcG9zaXRpb25zXVt0aGlzLmdldFVJRChlbCldID0gY291bnQrKzsKCQkJCX0gd2hpbGUgKChlbCA9IGVsW3NpYmxpbmddKSk7CgkJCX0gZWxzZSB7CgkJCQlkbyB7CgkJCQkJaWYgKGVsLm5vZGVUeXBlICE9IDEpIGNvbnRpbnVlOwoJCQkJCXRoaXNbcG9zaXRpb25zXVt0aGlzLmdldFVJRChlbCldID0gY291bnQrKzsKCQkJCX0gd2hpbGUgKChlbCA9IGVsW3NpYmxpbmddKSk7CgkJCX0KCQl9CgkJYXJndW1lbnQgPSBhcmd1bWVudCB8fCAnbic7CgkJdmFyIHBhcnNlZCA9IHRoaXMuY2FjaGVOVEhbYXJndW1lbnRdIHx8IHRoaXMucGFyc2VOVEhBcmd1bWVudChhcmd1bWVudCk7CgkJaWYgKCFwYXJzZWQpIHJldHVybiBmYWxzZTsKCQl2YXIgYSA9IHBhcnNlZC5hLCBiID0gcGFyc2VkLmIsIHBvcyA9IHRoaXNbcG9zaXRpb25zXVt1aWRdOwoJCWlmIChhID09IDApIHJldHVybiBiID09IHBvczsKCQlpZiAoYSA+IDApewoJCQlpZiAocG9zIDwgYikgcmV0dXJuIGZhbHNlOwoJCX0gZWxzZSB7CgkJCWlmIChiIDwgcG9zKSByZXR1cm4gZmFsc2U7CgkJfQoJCXJldHVybiAoKHBvcyAtIGIpICUgYSkgPT0gMDsKCX07Cn07CgovKjwvbnRoLXBzZXVkby1zZWxlY3RvcnM+Ki8vKjwvcHNldWRvLXNlbGVjdG9ycz4qLwoKbG9jYWwucHVzaEFycmF5ID0gZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7CglpZiAodGhpcy5tYXRjaFNlbGVjdG9yKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpKSB0aGlzLmZvdW5kLnB1c2gobm9kZSk7Cn07Cgpsb2NhbC5wdXNoVUlEID0gZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7Cgl2YXIgdWlkID0gdGhpcy5nZXRVSUQobm9kZSk7CglpZiAoIXRoaXMudW5pcXVlc1t1aWRdICYmIHRoaXMubWF0Y2hTZWxlY3Rvcihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKSl7CgkJdGhpcy51bmlxdWVzW3VpZF0gPSB0cnVlOwoJCXRoaXMuZm91bmQucHVzaChub2RlKTsKCX0KfTsKCmxvY2FsLm1hdGNoTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIHNlbGVjdG9yKXsKCWlmICh0aGlzLmlzSFRNTERvY3VtZW50ICYmIHRoaXMubmF0aXZlTWF0Y2hlc1NlbGVjdG9yKXsKCQl0cnkgewoJCQlyZXR1cm4gdGhpcy5uYXRpdmVNYXRjaGVzU2VsZWN0b3IuY2FsbChub2RlLCBzZWxlY3Rvci5yZXBsYWNlKC9cWyhbXj1dKyk9XHMqKFteJyJcXV0rPylccypcXS9nLCAnWyQxPSIkMiJdJykpOwoJCX0gY2F0Y2gobWF0Y2hFcnJvcikge30KCX0KCgl2YXIgcGFyc2VkID0gdGhpcy5TbGljay5wYXJzZShzZWxlY3Rvcik7CglpZiAoIXBhcnNlZCkgcmV0dXJuIHRydWU7CgoJLy8gc2ltcGxlIChzaW5nbGUpIHNlbGVjdG9ycwoJdmFyIGV4cHJlc3Npb25zID0gcGFyc2VkLmV4cHJlc3Npb25zLCBzaW1wbGVFeHBDb3VudGVyID0gMCwgaTsKCWZvciAoaSA9IDA7IChjdXJyZW50RXhwcmVzc2lvbiA9IGV4cHJlc3Npb25zW2ldKTsgaSsrKXsKCQlpZiAoY3VycmVudEV4cHJlc3Npb24ubGVuZ3RoID09IDEpewoJCQl2YXIgZXhwID0gY3VycmVudEV4cHJlc3Npb25bMF07CgkJCWlmICh0aGlzLm1hdGNoU2VsZWN0b3Iobm9kZSwgKHRoaXMuaXNYTUxEb2N1bWVudCkgPyBleHAudGFnIDogZXhwLnRhZy50b1VwcGVyQ2FzZSgpLCBleHAuaWQsIGV4cC5jbGFzc2VzLCBleHAuYXR0cmlidXRlcywgZXhwLnBzZXVkb3MpKSByZXR1cm4gdHJ1ZTsKCQkJc2ltcGxlRXhwQ291bnRlcisrOwoJCX0KCX0KCglpZiAoc2ltcGxlRXhwQ291bnRlciA9PSBwYXJzZWQubGVuZ3RoKSByZXR1cm4gZmFsc2U7CgoJdmFyIG5vZGVzID0gdGhpcy5zZWFyY2godGhpcy5kb2N1bWVudCwgcGFyc2VkKSwgaXRlbTsKCWZvciAoaSA9IDA7IGl0ZW0gPSBub2Rlc1tpKytdOyl7CgkJaWYgKGl0ZW0gPT09IG5vZGUpIHJldHVybiB0cnVlOwoJfQoJcmV0dXJuIGZhbHNlOwp9OwoKbG9jYWwubWF0Y2hQc2V1ZG8gPSBmdW5jdGlvbihub2RlLCBuYW1lLCBhcmd1bWVudCl7Cgl2YXIgcHNldWRvTmFtZSA9ICdwc2V1ZG86JyArIG5hbWU7CglpZiAodGhpc1twc2V1ZG9OYW1lXSkgcmV0dXJuIHRoaXNbcHNldWRvTmFtZV0obm9kZSwgYXJndW1lbnQpOwoJdmFyIGF0dHJpYnV0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKG5vZGUsIG5hbWUpOwoJcmV0dXJuIChhcmd1bWVudCkgPyBhcmd1bWVudCA9PSBhdHRyaWJ1dGUgOiAhIWF0dHJpYnV0ZTsKfTsKCmxvY2FsLm1hdGNoU2VsZWN0b3IgPSBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsKCWlmICh0YWcpewoJCXZhciBub2RlTmFtZSA9ICh0aGlzLmlzWE1MRG9jdW1lbnQpID8gbm9kZS5ub2RlTmFtZSA6IG5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKTsKCQlpZiAodGFnID09ICcqJyl7CgkJCWlmIChub2RlTmFtZSA8ICdAJykgcmV0dXJuIGZhbHNlOyAvLyBGaXggZm9yIGNvbW1lbnQgbm9kZXMgYW5kIGNsb3NlZCBub2RlcwoJCX0gZWxzZSB7CgkJCWlmIChub2RlTmFtZSAhPSB0YWcpIHJldHVybiBmYWxzZTsKCQl9Cgl9CgoJaWYgKGlkICYmIG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpICE9IGlkKSByZXR1cm4gZmFsc2U7CgoJdmFyIGksIHBhcnQsIGNsczsKCWlmIChjbGFzc2VzKSBmb3IgKGkgPSBjbGFzc2VzLmxlbmd0aDsgaS0tOyl7CgkJY2xzID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgbm9kZS5jbGFzc05hbWU7CgkJaWYgKCEoY2xzICYmIGNsYXNzZXNbaV0ucmVnZXhwLnRlc3QoY2xzKSkpIHJldHVybiBmYWxzZTsKCX0KCWlmIChhdHRyaWJ1dGVzKSBmb3IgKGkgPSBhdHRyaWJ1dGVzLmxlbmd0aDsgaS0tOyl7CgkJcGFydCA9IGF0dHJpYnV0ZXNbaV07CgkJaWYgKHBhcnQub3BlcmF0b3IgPyAhcGFydC50ZXN0KHRoaXMuZ2V0QXR0cmlidXRlKG5vZGUsIHBhcnQua2V5KSkgOiAhdGhpcy5oYXNBdHRyaWJ1dGUobm9kZSwgcGFydC5rZXkpKSByZXR1cm4gZmFsc2U7Cgl9CglpZiAocHNldWRvcykgZm9yIChpID0gcHNldWRvcy5sZW5ndGg7IGktLTspewoJCXBhcnQgPSBwc2V1ZG9zW2ldOwoJCWlmICghdGhpcy5tYXRjaFBzZXVkbyhub2RlLCBwYXJ0LmtleSwgcGFydC52YWx1ZSkpIHJldHVybiBmYWxzZTsKCX0KCXJldHVybiB0cnVlOwp9OwoKdmFyIGNvbWJpbmF0b3JzID0gewoKCScgJzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcywgY2xhc3NMaXN0KXsgLy8gYWxsIGNoaWxkIG5vZGVzLCBhbnkgbGV2ZWwKCgkJdmFyIGksIGl0ZW0sIGNoaWxkcmVuOwoKCQlpZiAodGhpcy5pc0hUTUxEb2N1bWVudCl7CgkJCWdldEJ5SWQ6IGlmIChpZCl7CgkJCQlpdGVtID0gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CgkJCQlpZiAoKCFpdGVtICYmIG5vZGUuYWxsKSB8fCAodGhpcy5pZEdldHNOYW1lICYmIGl0ZW0gJiYgaXRlbS5nZXRBdHRyaWJ1dGVOb2RlKCdpZCcpLm5vZGVWYWx1ZSAhPSBpZCkpewoJCQkJCS8vIGFsbFtpZF0gcmV0dXJucyBhbGwgdGhlIGVsZW1lbnRzIHdpdGggdGhhdCBuYW1lIG9yIGlkIGluc2lkZSBub2RlCgkJCQkJLy8gaWYgdGhlcmVzIGp1c3Qgb25lIGl0IHdpbGwgcmV0dXJuIHRoZSBlbGVtZW50LCBlbHNlIGl0IHdpbGwgYmUgYSBjb2xsZWN0aW9uCgkJCQkJY2hpbGRyZW4gPSBub2RlLmFsbFtpZF07CgkJCQkJaWYgKCFjaGlsZHJlbikgcmV0dXJuOwoJCQkJCWlmICghY2hpbGRyZW5bMF0pIGNoaWxkcmVuID0gW2NoaWxkcmVuXTsKCQkJCQlmb3IgKGkgPSAwOyBpdGVtID0gY2hpbGRyZW5baSsrXTspewoJCQkJCQl2YXIgaWROb2RlID0gaXRlbS5nZXRBdHRyaWJ1dGVOb2RlKCdpZCcpOwoJCQkJCQlpZiAoaWROb2RlICYmIGlkTm9kZS5ub2RlVmFsdWUgPT0gaWQpewoJCQkJCQkJdGhpcy5wdXNoKGl0ZW0sIHRhZywgbnVsbCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyk7CgkJCQkJCQlicmVhazsKCQkJCQkJfQoJCQkJCX0KCQkJCQlyZXR1cm47CgkJCQl9CgkJCQlpZiAoIWl0ZW0pewoJCQkJCS8vIGlmIHRoZSBjb250ZXh0IGlzIGluIHRoZSBkb20gd2UgcmV0dXJuLCBlbHNlIHdlIHdpbGwgdHJ5IEdFQlROLCBicmVha2luZyB0aGUgZ2V0QnlJZCBsYWJlbAoJCQkJCWlmICh0aGlzLmNvbnRhaW5zKHRoaXMucm9vdCwgbm9kZSkpIHJldHVybjsKCQkJCQllbHNlIGJyZWFrIGdldEJ5SWQ7CgkJCQl9IGVsc2UgaWYgKHRoaXMuZG9jdW1lbnQgIT09IG5vZGUgJiYgIXRoaXMuY29udGFpbnMobm9kZSwgaXRlbSkpIHJldHVybjsKCQkJCXRoaXMucHVzaChpdGVtLCB0YWcsIG51bGwsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwoJCQkJcmV0dXJuOwoJCQl9CgkJCWdldEJ5Q2xhc3M6IGlmIChjbGFzc2VzICYmIG5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiAhdGhpcy5icm9rZW5HRUJDTil7CgkJCQljaGlsZHJlbiA9IG5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc0xpc3Quam9pbignICcpKTsKCQkJCWlmICghKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkpIGJyZWFrIGdldEJ5Q2xhc3M7CgkJCQlmb3IgKGkgPSAwOyBpdGVtID0gY2hpbGRyZW5baSsrXTspIHRoaXMucHVzaChpdGVtLCB0YWcsIGlkLCBudWxsLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKCQkJCXJldHVybjsKCQkJfQoJCX0KCQlnZXRCeVRhZzogewoJCQljaGlsZHJlbiA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnKTsKCQkJaWYgKCEoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoKSkgYnJlYWsgZ2V0QnlUYWc7CgkJCWlmICghdGhpcy5icm9rZW5TdGFyR0VCVE4pIHRhZyA9IG51bGw7CgkJCWZvciAoaSA9IDA7IGl0ZW0gPSBjaGlsZHJlbltpKytdOykgdGhpcy5wdXNoKGl0ZW0sIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwoJCX0KCX0sCgoJJz4nOiBmdW5jdGlvbihub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKXsgLy8gZGlyZWN0IGNoaWxkcmVuCgkJaWYgKChub2RlID0gbm9kZS5maXJzdENoaWxkKSkgZG8gewoJCQlpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB0aGlzLnB1c2gobm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyk7CgkJfSB3aGlsZSAoKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSk7Cgl9LAoKCScrJzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7IC8vIG5leHQgc2libGluZwoJCXdoaWxlICgobm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpKSBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKXsKCQkJdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwoJCQlicmVhazsKCQl9Cgl9LAoKCSdeJzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7IC8vIGZpcnN0IGNoaWxkCgkJbm9kZSA9IG5vZGUuZmlyc3RDaGlsZDsKCQlpZiAobm9kZSl7CgkJCWlmIChub2RlLm5vZGVUeXBlID09IDEpIHRoaXMucHVzaChub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKCQkJZWxzZSB0aGlzWydjb21iaW5hdG9yOisnXShub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKCQl9Cgl9LAoKCSd+JzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7IC8vIG5leHQgc2libGluZ3MKCQl3aGlsZSAoKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSl7CgkJCWlmIChub2RlLm5vZGVUeXBlICE9IDEpIGNvbnRpbnVlOwoJCQl2YXIgdWlkID0gdGhpcy5nZXRVSUQobm9kZSk7CgkJCWlmICh0aGlzLmJpdFVuaXF1ZXNbdWlkXSkgYnJlYWs7CgkJCXRoaXMuYml0VW5pcXVlc1t1aWRdID0gdHJ1ZTsKCQkJdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwoJCX0KCX0sCgoJJysrJzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7IC8vIG5leHQgc2libGluZyBhbmQgcHJldmlvdXMgc2libGluZwoJCXRoaXNbJ2NvbWJpbmF0b3I6KyddKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwoJCXRoaXNbJ2NvbWJpbmF0b3I6ISsnXShub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKCX0sCgoJJ35+JzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7IC8vIG5leHQgc2libGluZ3MgYW5kIHByZXZpb3VzIHNpYmxpbmdzCgkJdGhpc1snY29tYmluYXRvcjp+J10obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyk7CgkJdGhpc1snY29tYmluYXRvcjohfiddKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwoJfSwKCgknISc6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBhbGwgcGFyZW50IG5vZGVzIHVwIHRvIGRvY3VtZW50CgkJd2hpbGUgKChub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgaWYgKG5vZGUgIT09IHRoaXMuZG9jdW1lbnQpIHRoaXMucHVzaChub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKCX0sCgoJJyE+JzogZnVuY3Rpb24obm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyl7IC8vIGRpcmVjdCBwYXJlbnQgKG9uZSBsZXZlbCkKCQlub2RlID0gbm9kZS5wYXJlbnROb2RlOwoJCWlmIChub2RlICE9PSB0aGlzLmRvY3VtZW50KSB0aGlzLnB1c2gobm9kZSwgdGFnLCBpZCwgY2xhc3NlcywgYXR0cmlidXRlcywgcHNldWRvcyk7Cgl9LAoKCSchKyc6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBwcmV2aW91cyBzaWJsaW5nCgkJd2hpbGUgKChub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmcpKSBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKXsKCQkJdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwoJCQlicmVhazsKCQl9Cgl9LAoKCSchXic6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBsYXN0IGNoaWxkCgkJbm9kZSA9IG5vZGUubGFzdENoaWxkOwoJCWlmIChub2RlKXsKCQkJaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkgdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwoJCQllbHNlIHRoaXNbJ2NvbWJpbmF0b3I6ISsnXShub2RlLCB0YWcsIGlkLCBjbGFzc2VzLCBhdHRyaWJ1dGVzLCBwc2V1ZG9zKTsKCQl9Cgl9LAoKCSchfic6IGZ1bmN0aW9uKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpeyAvLyBwcmV2aW91cyBzaWJsaW5ncwoJCXdoaWxlICgobm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSl7CgkJCWlmIChub2RlLm5vZGVUeXBlICE9IDEpIGNvbnRpbnVlOwoJCQl2YXIgdWlkID0gdGhpcy5nZXRVSUQobm9kZSk7CgkJCWlmICh0aGlzLmJpdFVuaXF1ZXNbdWlkXSkgYnJlYWs7CgkJCXRoaXMuYml0VW5pcXVlc1t1aWRdID0gdHJ1ZTsKCQkJdGhpcy5wdXNoKG5vZGUsIHRhZywgaWQsIGNsYXNzZXMsIGF0dHJpYnV0ZXMsIHBzZXVkb3MpOwoJCX0KCX0KCn07Cgpmb3IgKHZhciBjIGluIGNvbWJpbmF0b3JzKSBsb2NhbFsnY29tYmluYXRvcjonICsgY10gPSBjb21iaW5hdG9yc1tjXTsKCnZhciBwc2V1ZG9zID0gewoKCS8qPHBzZXVkby1zZWxlY3RvcnM+Ki8KCgknZW1wdHknOiBmdW5jdGlvbihub2RlKXsKCQl2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7CgkJcmV0dXJuICEoY2hpbGQgJiYgY2hpbGQubm9kZVR5cGUgPT0gMSkgJiYgIShub2RlLmlubmVyVGV4dCB8fCBub2RlLnRleHRDb250ZW50IHx8ICcnKS5sZW5ndGg7Cgl9LAoKCSdub3QnOiBmdW5jdGlvbihub2RlLCBleHByZXNzaW9uKXsKCQlyZXR1cm4gIXRoaXMubWF0Y2hOb2RlKG5vZGUsIGV4cHJlc3Npb24pOwoJfSwKCgknY29udGFpbnMnOiBmdW5jdGlvbihub2RlLCB0ZXh0KXsKCQlyZXR1cm4gKG5vZGUuaW5uZXJUZXh0IHx8IG5vZGUudGV4dENvbnRlbnQgfHwgJycpLmluZGV4T2YodGV4dCkgPiAtMTsKCX0sCgoJJ2ZpcnN0LWNoaWxkJzogZnVuY3Rpb24obm9kZSl7CgkJd2hpbGUgKChub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmcpKSBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSByZXR1cm4gZmFsc2U7CgkJcmV0dXJuIHRydWU7Cgl9LAoKCSdsYXN0LWNoaWxkJzogZnVuY3Rpb24obm9kZSl7CgkJd2hpbGUgKChub2RlID0gbm9kZS5uZXh0U2libGluZykpIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHJldHVybiBmYWxzZTsKCQlyZXR1cm4gdHJ1ZTsKCX0sCgoJJ29ubHktY2hpbGQnOiBmdW5jdGlvbihub2RlKXsKCQl2YXIgcHJldiA9IG5vZGU7CgkJd2hpbGUgKChwcmV2ID0gcHJldi5wcmV2aW91c1NpYmxpbmcpKSBpZiAocHJldi5ub2RlVHlwZSA9PSAxKSByZXR1cm4gZmFsc2U7CgkJdmFyIG5leHQgPSBub2RlOwoJCXdoaWxlICgobmV4dCA9IG5leHQubmV4dFNpYmxpbmcpKSBpZiAobmV4dC5ub2RlVHlwZSA9PSAxKSByZXR1cm4gZmFsc2U7CgkJcmV0dXJuIHRydWU7Cgl9LAoKCS8qPG50aC1wc2V1ZG8tc2VsZWN0b3JzPiovCgoJJ250aC1jaGlsZCc6IGxvY2FsLmNyZWF0ZU5USFBzZXVkbygnZmlyc3RDaGlsZCcsICduZXh0U2libGluZycsICdwb3NOVEgnKSwKCgknbnRoLWxhc3QtY2hpbGQnOiBsb2NhbC5jcmVhdGVOVEhQc2V1ZG8oJ2xhc3RDaGlsZCcsICdwcmV2aW91c1NpYmxpbmcnLCAncG9zTlRITGFzdCcpLAoKCSdudGgtb2YtdHlwZSc6IGxvY2FsLmNyZWF0ZU5USFBzZXVkbygnZmlyc3RDaGlsZCcsICduZXh0U2libGluZycsICdwb3NOVEhUeXBlJywgdHJ1ZSksCgoJJ250aC1sYXN0LW9mLXR5cGUnOiBsb2NhbC5jcmVhdGVOVEhQc2V1ZG8oJ2xhc3RDaGlsZCcsICdwcmV2aW91c1NpYmxpbmcnLCAncG9zTlRIVHlwZUxhc3QnLCB0cnVlKSwKCgknaW5kZXgnOiBmdW5jdGlvbihub2RlLCBpbmRleCl7CgkJcmV0dXJuIHRoaXNbJ3BzZXVkbzpudGgtY2hpbGQnXShub2RlLCAnJyArIGluZGV4ICsgMSk7Cgl9LAoKCSdldmVuJzogZnVuY3Rpb24obm9kZSl7CgkJcmV0dXJuIHRoaXNbJ3BzZXVkbzpudGgtY2hpbGQnXShub2RlLCAnMm4nKTsKCX0sCgoJJ29kZCc6IGZ1bmN0aW9uKG5vZGUpewoJCXJldHVybiB0aGlzWydwc2V1ZG86bnRoLWNoaWxkJ10obm9kZSwgJzJuKzEnKTsKCX0sCgoJLyo8L250aC1wc2V1ZG8tc2VsZWN0b3JzPiovCgoJLyo8b2YtdHlwZS1wc2V1ZG8tc2VsZWN0b3JzPiovCgoJJ2ZpcnN0LW9mLXR5cGUnOiBmdW5jdGlvbihub2RlKXsKCQl2YXIgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lOwoJCXdoaWxlICgobm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSkgaWYgKG5vZGUubm9kZU5hbWUgPT0gbm9kZU5hbWUpIHJldHVybiBmYWxzZTsKCQlyZXR1cm4gdHJ1ZTsKCX0sCgoJJ2xhc3Qtb2YtdHlwZSc6IGZ1bmN0aW9uKG5vZGUpewoJCXZhciBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWU7CgkJd2hpbGUgKChub2RlID0gbm9kZS5uZXh0U2libGluZykpIGlmIChub2RlLm5vZGVOYW1lID09IG5vZGVOYW1lKSByZXR1cm4gZmFsc2U7CgkJcmV0dXJuIHRydWU7Cgl9LAoKCSdvbmx5LW9mLXR5cGUnOiBmdW5jdGlvbihub2RlKXsKCQl2YXIgcHJldiA9IG5vZGUsIG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZTsKCQl3aGlsZSAoKHByZXYgPSBwcmV2LnByZXZpb3VzU2libGluZykpIGlmIChwcmV2Lm5vZGVOYW1lID09IG5vZGVOYW1lKSByZXR1cm4gZmFsc2U7CgkJdmFyIG5leHQgPSBub2RlOwoJCXdoaWxlICgobmV4dCA9IG5leHQubmV4dFNpYmxpbmcpKSBpZiAobmV4dC5ub2RlTmFtZSA9PSBub2RlTmFtZSkgcmV0dXJuIGZhbHNlOwoJCXJldHVybiB0cnVlOwoJfSwKCgkvKjwvb2YtdHlwZS1wc2V1ZG8tc2VsZWN0b3JzPiovCgoJLy8gY3VzdG9tIHBzZXVkb3MKCgknZW5hYmxlZCc6IGZ1bmN0aW9uKG5vZGUpewoJCXJldHVybiAhbm9kZS5kaXNhYmxlZDsKCX0sCgoJJ2Rpc2FibGVkJzogZnVuY3Rpb24obm9kZSl7CgkJcmV0dXJuIG5vZGUuZGlzYWJsZWQ7Cgl9LAoKCSdjaGVja2VkJzogZnVuY3Rpb24obm9kZSl7CgkJcmV0dXJuIG5vZGUuY2hlY2tlZCB8fCBub2RlLnNlbGVjdGVkOwoJfSwKCgknZm9jdXMnOiBmdW5jdGlvbihub2RlKXsKCQlyZXR1cm4gdGhpcy5pc0hUTUxEb2N1bWVudCAmJiB0aGlzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IG5vZGUgJiYgKG5vZGUuaHJlZiB8fCBub2RlLnR5cGUgfHwgdGhpcy5oYXNBdHRyaWJ1dGUobm9kZSwgJ3RhYmluZGV4JykpOwoJfSwKCgkncm9vdCc6IGZ1bmN0aW9uKG5vZGUpewoJCXJldHVybiAobm9kZSA9PT0gdGhpcy5yb290KTsKCX0sCgoJJ3NlbGVjdGVkJzogZnVuY3Rpb24obm9kZSl7CgkJcmV0dXJuIG5vZGUuc2VsZWN0ZWQ7Cgl9CgoJLyo8L3BzZXVkby1zZWxlY3RvcnM+Ki8KfTsKCmZvciAodmFyIHAgaW4gcHNldWRvcykgbG9jYWxbJ3BzZXVkbzonICsgcF0gPSBwc2V1ZG9zW3BdOwoKLy8gYXR0cmlidXRlcyBtZXRob2RzCgp2YXIgYXR0cmlidXRlR2V0dGVycyA9IGxvY2FsLmF0dHJpYnV0ZUdldHRlcnMgPSB7CgoJJ2NsYXNzJzogZnVuY3Rpb24oKXsKCQlyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgdGhpcy5jbGFzc05hbWU7Cgl9LAoKCSdmb3InOiBmdW5jdGlvbigpewoJCXJldHVybiAoJ2h0bWxGb3InIGluIHRoaXMpID8gdGhpcy5odG1sRm9yIDogdGhpcy5nZXRBdHRyaWJ1dGUoJ2ZvcicpOwoJfSwKCgknaHJlZic6IGZ1bmN0aW9uKCl7CgkJcmV0dXJuICgnaHJlZicgaW4gdGhpcykgPyB0aGlzLmdldEF0dHJpYnV0ZSgnaHJlZicsIDIpIDogdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTsKCX0sCgoJJ3N0eWxlJzogZnVuY3Rpb24oKXsKCQlyZXR1cm4gKHRoaXMuc3R5bGUpID8gdGhpcy5zdHlsZS5jc3NUZXh0IDogdGhpcy5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7Cgl9LAoKCSd0YWJpbmRleCc6IGZ1bmN0aW9uKCl7CgkJdmFyIGF0dHJpYnV0ZU5vZGUgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUoJ3RhYmluZGV4Jyk7CgkJcmV0dXJuIChhdHRyaWJ1dGVOb2RlICYmIGF0dHJpYnV0ZU5vZGUuc3BlY2lmaWVkKSA/IGF0dHJpYnV0ZU5vZGUubm9kZVZhbHVlIDogbnVsbDsKCX0sCgoJJ3R5cGUnOiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgndHlwZScpOwoJfSwKCgknbWF4bGVuZ3RoJzogZnVuY3Rpb24oKXsKCQl2YXIgYXR0cmlidXRlTm9kZSA9IHRoaXMuZ2V0QXR0cmlidXRlTm9kZSgnbWF4TGVuZ3RoJyk7CgkJcmV0dXJuIChhdHRyaWJ1dGVOb2RlICYmIGF0dHJpYnV0ZU5vZGUuc3BlY2lmaWVkKSA/IGF0dHJpYnV0ZU5vZGUubm9kZVZhbHVlIDogbnVsbDsKCX0KCn07CgphdHRyaWJ1dGVHZXR0ZXJzLk1BWExFTkdUSCA9IGF0dHJpYnV0ZUdldHRlcnMubWF4TGVuZ3RoID0gYXR0cmlidXRlR2V0dGVycy5tYXhsZW5ndGg7CgovLyBTbGljawoKdmFyIFNsaWNrID0gbG9jYWwuU2xpY2sgPSAodGhpcy5TbGljayB8fCB7fSk7CgpTbGljay52ZXJzaW9uID0gJzEuMS42JzsKCi8vIFNsaWNrIGZpbmRlcgoKU2xpY2suc2VhcmNoID0gZnVuY3Rpb24oY29udGV4dCwgZXhwcmVzc2lvbiwgYXBwZW5kKXsKCXJldHVybiBsb2NhbC5zZWFyY2goY29udGV4dCwgZXhwcmVzc2lvbiwgYXBwZW5kKTsKfTsKClNsaWNrLmZpbmQgPSBmdW5jdGlvbihjb250ZXh0LCBleHByZXNzaW9uKXsKCXJldHVybiBsb2NhbC5zZWFyY2goY29udGV4dCwgZXhwcmVzc2lvbiwgbnVsbCwgdHJ1ZSk7Cn07CgovLyBTbGljayBjb250YWlubWVudCBjaGVja2VyCgpTbGljay5jb250YWlucyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgbm9kZSl7Cglsb2NhbC5zZXREb2N1bWVudChjb250YWluZXIpOwoJcmV0dXJuIGxvY2FsLmNvbnRhaW5zKGNvbnRhaW5lciwgbm9kZSk7Cn07CgovLyBTbGljayBhdHRyaWJ1dGUgZ2V0dGVyCgpTbGljay5nZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihub2RlLCBuYW1lKXsKCWxvY2FsLnNldERvY3VtZW50KG5vZGUpOwoJcmV0dXJuIGxvY2FsLmdldEF0dHJpYnV0ZShub2RlLCBuYW1lKTsKfTsKClNsaWNrLmhhc0F0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5vZGUsIG5hbWUpewoJbG9jYWwuc2V0RG9jdW1lbnQobm9kZSk7CglyZXR1cm4gbG9jYWwuaGFzQXR0cmlidXRlKG5vZGUsIG5hbWUpOwp9OwoKLy8gU2xpY2sgbWF0Y2hlcgoKU2xpY2subWF0Y2ggPSBmdW5jdGlvbihub2RlLCBzZWxlY3Rvcil7CglpZiAoIShub2RlICYmIHNlbGVjdG9yKSkgcmV0dXJuIGZhbHNlOwoJaWYgKCFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gbm9kZSkgcmV0dXJuIHRydWU7Cglsb2NhbC5zZXREb2N1bWVudChub2RlKTsKCXJldHVybiBsb2NhbC5tYXRjaE5vZGUobm9kZSwgc2VsZWN0b3IpOwp9OwoKLy8gU2xpY2sgYXR0cmlidXRlIGFjY2Vzc29yCgpTbGljay5kZWZpbmVBdHRyaWJ1dGVHZXR0ZXIgPSBmdW5jdGlvbihuYW1lLCBmbil7Cglsb2NhbC5hdHRyaWJ1dGVHZXR0ZXJzW25hbWVdID0gZm47CglyZXR1cm4gdGhpczsKfTsKClNsaWNrLmxvb2t1cEF0dHJpYnV0ZUdldHRlciA9IGZ1bmN0aW9uKG5hbWUpewoJcmV0dXJuIGxvY2FsLmF0dHJpYnV0ZUdldHRlcnNbbmFtZV07Cn07CgovLyBTbGljayBwc2V1ZG8gYWNjZXNzb3IKClNsaWNrLmRlZmluZVBzZXVkbyA9IGZ1bmN0aW9uKG5hbWUsIGZuKXsKCWxvY2FsWydwc2V1ZG86JyArIG5hbWVdID0gZnVuY3Rpb24obm9kZSwgYXJndW1lbnQpewoJCXJldHVybiBmbi5jYWxsKG5vZGUsIGFyZ3VtZW50KTsKCX07CglyZXR1cm4gdGhpczsKfTsKClNsaWNrLmxvb2t1cFBzZXVkbyA9IGZ1bmN0aW9uKG5hbWUpewoJdmFyIHBzZXVkbyA9IGxvY2FsWydwc2V1ZG86JyArIG5hbWVdOwoJaWYgKHBzZXVkbykgcmV0dXJuIGZ1bmN0aW9uKGFyZ3VtZW50KXsKCQlyZXR1cm4gcHNldWRvLmNhbGwodGhpcywgYXJndW1lbnQpOwoJfTsKCXJldHVybiBudWxsOwp9OwoKLy8gU2xpY2sgb3ZlcnJpZGVzIGFjY2Vzc29yCgpTbGljay5vdmVycmlkZSA9IGZ1bmN0aW9uKHJlZ2V4cCwgZm4pewoJbG9jYWwub3ZlcnJpZGUocmVnZXhwLCBmbik7CglyZXR1cm4gdGhpczsKfTsKClNsaWNrLmlzWE1MID0gbG9jYWwuaXNYTUw7CgpTbGljay51aWRPZiA9IGZ1bmN0aW9uKG5vZGUpewoJcmV0dXJuIGxvY2FsLmdldFVJREhUTUwobm9kZSk7Cn07CgppZiAoIXRoaXMuU2xpY2spIHRoaXMuU2xpY2sgPSBTbGljazsKCn0pLmFwcGx5KC8qPENvbW1vbkpTPiovKHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnKSA/IGV4cG9ydHMgOiAvKjwvQ29tbW9uSlM+Ki90aGlzKTsKCgovKgotLS0KCm5hbWU6IEVsZW1lbnQKCmRlc2NyaXB0aW9uOiBPbmUgb2YgdGhlIG1vc3QgaW1wb3J0YW50IGl0ZW1zIGluIE1vb1Rvb2xzLiBDb250YWlucyB0aGUgZG9sbGFyIGZ1bmN0aW9uLCB0aGUgZG9sbGFycyBmdW5jdGlvbiwgYW5kIGFuIGhhbmRmdWwgb2YgY3Jvc3MtYnJvd3NlciwgdGltZS1zYXZlciBtZXRob2RzIHRvIGxldCB5b3UgZWFzaWx5IHdvcmsgd2l0aCBIVE1MIEVsZW1lbnRzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW1dpbmRvdywgRG9jdW1lbnQsIEFycmF5LCBTdHJpbmcsIEZ1bmN0aW9uLCBPYmplY3QsIE51bWJlciwgU2xpY2suUGFyc2VyLCBTbGljay5GaW5kZXJdCgpwcm92aWRlczogW0VsZW1lbnQsIEVsZW1lbnRzLCAkLCAkJCwgSWZyYW1lLCBTZWxlY3RvcnNdCgouLi4KKi8KCnZhciBFbGVtZW50ID0gZnVuY3Rpb24odGFnLCBwcm9wcyl7Cgl2YXIga29uc3RydWN0b3IgPSBFbGVtZW50LkNvbnN0cnVjdG9yc1t0YWddOwoJaWYgKGtvbnN0cnVjdG9yKSByZXR1cm4ga29uc3RydWN0b3IocHJvcHMpOwoJaWYgKHR5cGVvZiB0YWcgIT0gJ3N0cmluZycpIHJldHVybiBkb2N1bWVudC5pZCh0YWcpLnNldChwcm9wcyk7CgoJaWYgKCFwcm9wcykgcHJvcHMgPSB7fTsKCglpZiAoISgvXltcdy1dKyQvKS50ZXN0KHRhZykpewoJCXZhciBwYXJzZWQgPSBTbGljay5wYXJzZSh0YWcpLmV4cHJlc3Npb25zWzBdWzBdOwoJCXRhZyA9IChwYXJzZWQudGFnID09ICcqJykgPyAnZGl2JyA6IHBhcnNlZC50YWc7CgkJaWYgKHBhcnNlZC5pZCAmJiBwcm9wcy5pZCA9PSBudWxsKSBwcm9wcy5pZCA9IHBhcnNlZC5pZDsKCgkJdmFyIGF0dHJpYnV0ZXMgPSBwYXJzZWQuYXR0cmlidXRlczsKCQlpZiAoYXR0cmlidXRlcykgZm9yICh2YXIgYXR0ciwgaSA9IDAsIGwgPSBhdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CgkJCWF0dHIgPSBhdHRyaWJ1dGVzW2ldOwoJCQlpZiAocHJvcHNbYXR0ci5rZXldICE9IG51bGwpIGNvbnRpbnVlOwoKCQkJaWYgKGF0dHIudmFsdWUgIT0gbnVsbCAmJiBhdHRyLm9wZXJhdG9yID09ICc9JykgcHJvcHNbYXR0ci5rZXldID0gYXR0ci52YWx1ZTsKCQkJZWxzZSBpZiAoIWF0dHIudmFsdWUgJiYgIWF0dHIub3BlcmF0b3IpIHByb3BzW2F0dHIua2V5XSA9IHRydWU7CgkJfQoKCQlpZiAocGFyc2VkLmNsYXNzTGlzdCAmJiBwcm9wc1snY2xhc3MnXSA9PSBudWxsKSBwcm9wc1snY2xhc3MnXSA9IHBhcnNlZC5jbGFzc0xpc3Quam9pbignICcpOwoJfQoKCXJldHVybiBkb2N1bWVudC5uZXdFbGVtZW50KHRhZywgcHJvcHMpOwp9OwoKaWYgKEJyb3dzZXIuRWxlbWVudCkgRWxlbWVudC5wcm90b3R5cGUgPSBCcm93c2VyLkVsZW1lbnQucHJvdG90eXBlOwoKbmV3IFR5cGUoJ0VsZW1lbnQnLCBFbGVtZW50KS5taXJyb3IoZnVuY3Rpb24obmFtZSl7CglpZiAoQXJyYXkucHJvdG90eXBlW25hbWVdKSByZXR1cm47CgoJdmFyIG9iaiA9IHt9OwoJb2JqW25hbWVdID0gZnVuY3Rpb24oKXsKCQl2YXIgcmVzdWx0cyA9IFtdLCBhcmdzID0gYXJndW1lbnRzLCBlbGVtZW50cyA9IHRydWU7CgkJZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKyl7CgkJCXZhciBlbGVtZW50ID0gdGhpc1tpXSwgcmVzdWx0ID0gcmVzdWx0c1tpXSA9IGVsZW1lbnRbbmFtZV0uYXBwbHkoZWxlbWVudCwgYXJncyk7CgkJCWVsZW1lbnRzID0gKGVsZW1lbnRzICYmIHR5cGVPZihyZXN1bHQpID09ICdlbGVtZW50Jyk7CgkJfQoJCXJldHVybiAoZWxlbWVudHMpID8gbmV3IEVsZW1lbnRzKHJlc3VsdHMpIDogcmVzdWx0czsKCX07CgoJRWxlbWVudHMuaW1wbGVtZW50KG9iaik7Cn0pOwoKaWYgKCFCcm93c2VyLkVsZW1lbnQpewoJRWxlbWVudC5wYXJlbnQgPSBPYmplY3Q7CgoJRWxlbWVudC5Qcm90b3R5cGUgPSB7JyRmYW1pbHknOiBGdW5jdGlvbi5mcm9tKCdlbGVtZW50JykuaGlkZSgpfTsKCglFbGVtZW50Lm1pcnJvcihmdW5jdGlvbihuYW1lLCBtZXRob2QpewoJCUVsZW1lbnQuUHJvdG90eXBlW25hbWVdID0gbWV0aG9kOwoJfSk7Cn0KCkVsZW1lbnQuQ29uc3RydWN0b3JzID0ge307CgovLzwxLjJjb21wYXQ+CgpFbGVtZW50LkNvbnN0cnVjdG9ycyA9IG5ldyBIYXNoOwoKLy88LzEuMmNvbXBhdD4KCnZhciBJRnJhbWUgPSBuZXcgVHlwZSgnSUZyYW1lJywgZnVuY3Rpb24oKXsKCXZhciBwYXJhbXMgPSBBcnJheS5saW5rKGFyZ3VtZW50cywgewoJCXByb3BlcnRpZXM6IFR5cGUuaXNPYmplY3QsCgkJaWZyYW1lOiBmdW5jdGlvbihvYmopewoJCQlyZXR1cm4gKG9iaiAhPSBudWxsKTsKCQl9Cgl9KTsKCgl2YXIgcHJvcHMgPSBwYXJhbXMucHJvcGVydGllcyB8fCB7fSwgaWZyYW1lOwoJaWYgKHBhcmFtcy5pZnJhbWUpIGlmcmFtZSA9IGRvY3VtZW50LmlkKHBhcmFtcy5pZnJhbWUpOwoJdmFyIG9ubG9hZCA9IHByb3BzLm9ubG9hZCB8fCBmdW5jdGlvbigpe307CglkZWxldGUgcHJvcHMub25sb2FkOwoJcHJvcHMuaWQgPSBwcm9wcy5uYW1lID0gW3Byb3BzLmlkLCBwcm9wcy5uYW1lLCBpZnJhbWUgPyAoaWZyYW1lLmlkIHx8IGlmcmFtZS5uYW1lKSA6ICdJRnJhbWVfJyArIFN0cmluZy51bmlxdWVJRCgpXS5waWNrKCk7CglpZnJhbWUgPSBuZXcgRWxlbWVudChpZnJhbWUgfHwgJ2lmcmFtZScsIHByb3BzKTsKCgl2YXIgb25Mb2FkID0gZnVuY3Rpb24oKXsKCQlvbmxvYWQuY2FsbChpZnJhbWUuY29udGVudFdpbmRvdyk7Cgl9OwoKCWlmICh3aW5kb3cuZnJhbWVzW3Byb3BzLmlkXSkgb25Mb2FkKCk7CgllbHNlIGlmcmFtZS5hZGRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZCk7CglyZXR1cm4gaWZyYW1lOwp9KTsKCnZhciBFbGVtZW50cyA9IHRoaXMuRWxlbWVudHMgPSBmdW5jdGlvbihub2Rlcyl7CglpZiAobm9kZXMgJiYgbm9kZXMubGVuZ3RoKXsKCQl2YXIgdW5pcXVlcyA9IHt9LCBub2RlOwoJCWZvciAodmFyIGkgPSAwOyBub2RlID0gbm9kZXNbaSsrXTspewoJCQl2YXIgdWlkID0gU2xpY2sudWlkT2Yobm9kZSk7CgkJCWlmICghdW5pcXVlc1t1aWRdKXsKCQkJCXVuaXF1ZXNbdWlkXSA9IHRydWU7CgkJCQl0aGlzLnB1c2gobm9kZSk7CgkJCX0KCQl9Cgl9Cn07CgpFbGVtZW50cy5wcm90b3R5cGUgPSB7bGVuZ3RoOiAwfTsKRWxlbWVudHMucGFyZW50ID0gQXJyYXk7CgpuZXcgVHlwZSgnRWxlbWVudHMnLCBFbGVtZW50cykuaW1wbGVtZW50KHsKCglmaWx0ZXI6IGZ1bmN0aW9uKGZpbHRlciwgYmluZCl7CgkJaWYgKCFmaWx0ZXIpIHJldHVybiB0aGlzOwoJCXJldHVybiBuZXcgRWxlbWVudHMoQXJyYXkuZmlsdGVyKHRoaXMsICh0eXBlT2YoZmlsdGVyKSA9PSAnc3RyaW5nJykgPyBmdW5jdGlvbihpdGVtKXsKCQkJcmV0dXJuIGl0ZW0ubWF0Y2goZmlsdGVyKTsKCQl9IDogZmlsdGVyLCBiaW5kKSk7Cgl9LnByb3RlY3QoKSwKCglwdXNoOiBmdW5jdGlvbigpewoJCXZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDsKCQlmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspewoJCQl2YXIgaXRlbSA9IGRvY3VtZW50LmlkKGFyZ3VtZW50c1tpXSk7CgkJCWlmIChpdGVtKSB0aGlzW2xlbmd0aCsrXSA9IGl0ZW07CgkJfQoJCXJldHVybiAodGhpcy5sZW5ndGggPSBsZW5ndGgpOwoJfS5wcm90ZWN0KCksCgoJdW5zaGlmdDogZnVuY3Rpb24oKXsKCQl2YXIgaXRlbXMgPSBbXTsKCQlmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspewoJCQl2YXIgaXRlbSA9IGRvY3VtZW50LmlkKGFyZ3VtZW50c1tpXSk7CgkJCWlmIChpdGVtKSBpdGVtcy5wdXNoKGl0ZW0pOwoJCX0KCQlyZXR1cm4gQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkodGhpcywgaXRlbXMpOwoJfS5wcm90ZWN0KCksCgoJY29uY2F0OiBmdW5jdGlvbigpewoJCXZhciBuZXdFbGVtZW50cyA9IG5ldyBFbGVtZW50cyh0aGlzKTsKCQlmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspewoJCQl2YXIgaXRlbSA9IGFyZ3VtZW50c1tpXTsKCQkJaWYgKFR5cGUuaXNFbnVtZXJhYmxlKGl0ZW0pKSBuZXdFbGVtZW50cy5hcHBlbmQoaXRlbSk7CgkJCWVsc2UgbmV3RWxlbWVudHMucHVzaChpdGVtKTsKCQl9CgkJcmV0dXJuIG5ld0VsZW1lbnRzOwoJfS5wcm90ZWN0KCksCgoJYXBwZW5kOiBmdW5jdGlvbihjb2xsZWN0aW9uKXsKCQlmb3IgKHZhciBpID0gMCwgbCA9IGNvbGxlY3Rpb24ubGVuZ3RoOyBpIDwgbDsgaSsrKSB0aGlzLnB1c2goY29sbGVjdGlvbltpXSk7CgkJcmV0dXJuIHRoaXM7Cgl9LnByb3RlY3QoKSwKCgllbXB0eTogZnVuY3Rpb24oKXsKCQl3aGlsZSAodGhpcy5sZW5ndGgpIGRlbGV0ZSB0aGlzWy0tdGhpcy5sZW5ndGhdOwoJCXJldHVybiB0aGlzOwoJfS5wcm90ZWN0KCkKCn0pOwoKLy88MS4yY29tcGF0PgoKRWxlbWVudHMuYWxpYXMoJ2V4dGVuZCcsICdhcHBlbmQnKTsKCi8vPC8xLjJjb21wYXQ+CgooZnVuY3Rpb24oKXsKCi8vIEZGLCBJRQp2YXIgc3BsaWNlID0gQXJyYXkucHJvdG90eXBlLnNwbGljZSwgb2JqZWN0ID0geycwJzogMCwgJzEnOiAxLCBsZW5ndGg6IDJ9OwoKc3BsaWNlLmNhbGwob2JqZWN0LCAxLCAxKTsKaWYgKG9iamVjdFsxXSA9PSAxKSBFbGVtZW50cy5pbXBsZW1lbnQoJ3NwbGljZScsIGZ1bmN0aW9uKCl7Cgl2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7Cgl2YXIgcmVzdWx0ID0gc3BsaWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cgl3aGlsZSAobGVuZ3RoID49IHRoaXMubGVuZ3RoKSBkZWxldGUgdGhpc1tsZW5ndGgtLV07CglyZXR1cm4gcmVzdWx0Owp9LnByb3RlY3QoKSk7CgpFbGVtZW50cy5pbXBsZW1lbnQoQXJyYXkucHJvdG90eXBlKTsKCkFycmF5Lm1pcnJvcihFbGVtZW50cyk7CgovKjxsdElFOD4qLwp2YXIgY3JlYXRlRWxlbWVudEFjY2VwdHNIVE1MOwp0cnkgewoJdmFyIHggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCc8aW5wdXQgbmFtZT14PicpOwoJY3JlYXRlRWxlbWVudEFjY2VwdHNIVE1MID0gKHgubmFtZSA9PSAneCcpOwp9IGNhdGNoKGUpe30KCnZhciBlc2NhcGVRdW90ZXMgPSBmdW5jdGlvbihodG1sKXsKCXJldHVybiAoJycgKyBodG1sKS5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLyIvZywgJyZxdW90OycpOwp9OwovKjwvbHRJRTg+Ki8KCkRvY3VtZW50LmltcGxlbWVudCh7CgoJbmV3RWxlbWVudDogZnVuY3Rpb24odGFnLCBwcm9wcyl7CgkJaWYgKHByb3BzICYmIHByb3BzLmNoZWNrZWQgIT0gbnVsbCkgcHJvcHMuZGVmYXVsdENoZWNrZWQgPSBwcm9wcy5jaGVja2VkOwoJCS8qPGx0SUU4PiovLy8gRml4IGZvciByZWFkb25seSBuYW1lIGFuZCB0eXBlIHByb3BlcnRpZXMgaW4gSUUgPCA4CgkJaWYgKGNyZWF0ZUVsZW1lbnRBY2NlcHRzSFRNTCAmJiBwcm9wcyl7CgkJCXRhZyA9ICc8JyArIHRhZzsKCQkJaWYgKHByb3BzLm5hbWUpIHRhZyArPSAnIG5hbWU9IicgKyBlc2NhcGVRdW90ZXMocHJvcHMubmFtZSkgKyAnIic7CgkJCWlmIChwcm9wcy50eXBlKSB0YWcgKz0gJyB0eXBlPSInICsgZXNjYXBlUXVvdGVzKHByb3BzLnR5cGUpICsgJyInOwoJCQl0YWcgKz0gJz4nOwoJCQlkZWxldGUgcHJvcHMubmFtZTsKCQkJZGVsZXRlIHByb3BzLnR5cGU7CgkJfQoJCS8qPC9sdElFOD4qLwoJCXJldHVybiB0aGlzLmlkKHRoaXMuY3JlYXRlRWxlbWVudCh0YWcpKS5zZXQocHJvcHMpOwoJfQoKfSk7Cgp9KSgpOwoKRG9jdW1lbnQuaW1wbGVtZW50KHsKCgluZXdUZXh0Tm9kZTogZnVuY3Rpb24odGV4dCl7CgkJcmV0dXJuIHRoaXMuY3JlYXRlVGV4dE5vZGUodGV4dCk7Cgl9LAoKCWdldERvY3VtZW50OiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzOwoJfSwKCglnZXRXaW5kb3c6IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIHRoaXMud2luZG93OwoJfSwKCglpZDogKGZ1bmN0aW9uKCl7CgoJCXZhciB0eXBlcyA9IHsKCgkJCXN0cmluZzogZnVuY3Rpb24oaWQsIG5vY2FzaCwgZG9jKXsKCQkJCWlkID0gU2xpY2suZmluZChkb2MsICcjJyArIGlkLnJlcGxhY2UoLyhcVykvZywgJ1xcJDEnKSk7CgkJCQlyZXR1cm4gKGlkKSA/IHR5cGVzLmVsZW1lbnQoaWQsIG5vY2FzaCkgOiBudWxsOwoJCQl9LAoKCQkJZWxlbWVudDogZnVuY3Rpb24oZWwsIG5vY2FzaCl7CgkJCQkkdWlkKGVsKTsKCQkJCWlmICghbm9jYXNoICYmICFlbC4kZmFtaWx5ICYmICEoL14oPzpvYmplY3R8ZW1iZWQpJC9pKS50ZXN0KGVsLnRhZ05hbWUpKXsKCQkJCQlPYmplY3QuYXBwZW5kKGVsLCBFbGVtZW50LlByb3RvdHlwZSk7CgkJCQl9CgkJCQlyZXR1cm4gZWw7CgkJCX0sCgoJCQlvYmplY3Q6IGZ1bmN0aW9uKG9iaiwgbm9jYXNoLCBkb2MpewoJCQkJaWYgKG9iai50b0VsZW1lbnQpIHJldHVybiB0eXBlcy5lbGVtZW50KG9iai50b0VsZW1lbnQoZG9jKSwgbm9jYXNoKTsKCQkJCXJldHVybiBudWxsOwoJCQl9CgoJCX07CgoJCXR5cGVzLnRleHRub2RlID0gdHlwZXMud2hpdGVzcGFjZSA9IHR5cGVzLndpbmRvdyA9IHR5cGVzLmRvY3VtZW50ID0gZnVuY3Rpb24oemVybyl7CgkJCXJldHVybiB6ZXJvOwoJCX07CgoJCXJldHVybiBmdW5jdGlvbihlbCwgbm9jYXNoLCBkb2MpewoJCQlpZiAoZWwgJiYgZWwuJGZhbWlseSAmJiBlbC51aWQpIHJldHVybiBlbDsKCQkJdmFyIHR5cGUgPSB0eXBlT2YoZWwpOwoJCQlyZXR1cm4gKHR5cGVzW3R5cGVdKSA/IHR5cGVzW3R5cGVdKGVsLCBub2Nhc2gsIGRvYyB8fCBkb2N1bWVudCkgOiBudWxsOwoJCX07CgoJfSkoKQoKfSk7CgppZiAod2luZG93LiQgPT0gbnVsbCkgV2luZG93LmltcGxlbWVudCgnJCcsIGZ1bmN0aW9uKGVsLCBuYyl7CglyZXR1cm4gZG9jdW1lbnQuaWQoZWwsIG5jLCB0aGlzLmRvY3VtZW50KTsKfSk7CgpXaW5kb3cuaW1wbGVtZW50KHsKCglnZXREb2N1bWVudDogZnVuY3Rpb24oKXsKCQlyZXR1cm4gdGhpcy5kb2N1bWVudDsKCX0sCgoJZ2V0V2luZG93OiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzOwoJfQoKfSk7CgpbRG9jdW1lbnQsIEVsZW1lbnRdLmludm9rZSgnaW1wbGVtZW50JywgewoKCWdldEVsZW1lbnRzOiBmdW5jdGlvbihleHByZXNzaW9uKXsKCQlyZXR1cm4gU2xpY2suc2VhcmNoKHRoaXMsIGV4cHJlc3Npb24sIG5ldyBFbGVtZW50cyk7Cgl9LAoKCWdldEVsZW1lbnQ6IGZ1bmN0aW9uKGV4cHJlc3Npb24pewoJCXJldHVybiBkb2N1bWVudC5pZChTbGljay5maW5kKHRoaXMsIGV4cHJlc3Npb24pKTsKCX0KCn0pOwoKdmFyIGNvbnRhaW5zID0ge2NvbnRhaW5zOiBmdW5jdGlvbihlbGVtZW50KXsKCXJldHVybiBTbGljay5jb250YWlucyh0aGlzLCBlbGVtZW50KTsKfX07CgppZiAoIWRvY3VtZW50LmNvbnRhaW5zKSBEb2N1bWVudC5pbXBsZW1lbnQoY29udGFpbnMpOwppZiAoIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLmNvbnRhaW5zKSBFbGVtZW50LmltcGxlbWVudChjb250YWlucyk7CgovLzwxLjJjb21wYXQ+CgpFbGVtZW50LmltcGxlbWVudCgnaGFzQ2hpbGQnLCBmdW5jdGlvbihlbGVtZW50KXsKCXJldHVybiB0aGlzICE9PSBlbGVtZW50ICYmIHRoaXMuY29udGFpbnMoZWxlbWVudCk7Cn0pOwoKKGZ1bmN0aW9uKHNlYXJjaCwgZmluZCwgbWF0Y2gpewoKCXRoaXMuU2VsZWN0b3JzID0ge307Cgl2YXIgcHNldWRvcyA9IHRoaXMuU2VsZWN0b3JzLlBzZXVkbyA9IG5ldyBIYXNoKCk7CgoJdmFyIGFkZFNsaWNrUHNldWRvcyA9IGZ1bmN0aW9uKCl7CgkJZm9yICh2YXIgbmFtZSBpbiBwc2V1ZG9zKSBpZiAocHNldWRvcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSl7CgkJCVNsaWNrLmRlZmluZVBzZXVkbyhuYW1lLCBwc2V1ZG9zW25hbWVdKTsKCQkJZGVsZXRlIHBzZXVkb3NbbmFtZV07CgkJfQoJfTsKCglTbGljay5zZWFyY2ggPSBmdW5jdGlvbihjb250ZXh0LCBleHByZXNzaW9uLCBhcHBlbmQpewoJCWFkZFNsaWNrUHNldWRvcygpOwoJCXJldHVybiBzZWFyY2guY2FsbCh0aGlzLCBjb250ZXh0LCBleHByZXNzaW9uLCBhcHBlbmQpOwoJfTsKCglTbGljay5maW5kID0gZnVuY3Rpb24oY29udGV4dCwgZXhwcmVzc2lvbil7CgkJYWRkU2xpY2tQc2V1ZG9zKCk7CgkJcmV0dXJuIGZpbmQuY2FsbCh0aGlzLCBjb250ZXh0LCBleHByZXNzaW9uKTsKCX07CgoJU2xpY2subWF0Y2ggPSBmdW5jdGlvbihub2RlLCBzZWxlY3Rvcil7CgkJYWRkU2xpY2tQc2V1ZG9zKCk7CgkJcmV0dXJuIG1hdGNoLmNhbGwodGhpcywgbm9kZSwgc2VsZWN0b3IpOwoJfTsKCn0pKFNsaWNrLnNlYXJjaCwgU2xpY2suZmluZCwgU2xpY2subWF0Y2gpOwoKLy88LzEuMmNvbXBhdD4KCi8vIHRyZWUgd2Fsa2luZwoKdmFyIGluamVjdENvbWJpbmF0b3IgPSBmdW5jdGlvbihleHByZXNzaW9uLCBjb21iaW5hdG9yKXsKCWlmICghZXhwcmVzc2lvbikgcmV0dXJuIGNvbWJpbmF0b3I7CgoJZXhwcmVzc2lvbiA9IE9iamVjdC5jbG9uZShTbGljay5wYXJzZShleHByZXNzaW9uKSk7CgoJdmFyIGV4cHJlc3Npb25zID0gZXhwcmVzc2lvbi5leHByZXNzaW9uczsKCWZvciAodmFyIGkgPSBleHByZXNzaW9ucy5sZW5ndGg7IGktLTspCgkJZXhwcmVzc2lvbnNbaV1bMF0uY29tYmluYXRvciA9IGNvbWJpbmF0b3I7CgoJcmV0dXJuIGV4cHJlc3Npb247Cn07CgpPYmplY3QuZm9yRWFjaCh7CglnZXROZXh0OiAnficsCglnZXRQcmV2aW91czogJyF+JywKCWdldFBhcmVudDogJyEnCn0sIGZ1bmN0aW9uKGNvbWJpbmF0b3IsIG1ldGhvZCl7CglFbGVtZW50LmltcGxlbWVudChtZXRob2QsIGZ1bmN0aW9uKGV4cHJlc3Npb24pewoJCXJldHVybiB0aGlzLmdldEVsZW1lbnQoaW5qZWN0Q29tYmluYXRvcihleHByZXNzaW9uLCBjb21iaW5hdG9yKSk7Cgl9KTsKfSk7CgpPYmplY3QuZm9yRWFjaCh7CglnZXRBbGxOZXh0OiAnficsCglnZXRBbGxQcmV2aW91czogJyF+JywKCWdldFNpYmxpbmdzOiAnfn4nLAoJZ2V0Q2hpbGRyZW46ICc+JywKCWdldFBhcmVudHM6ICchJwp9LCBmdW5jdGlvbihjb21iaW5hdG9yLCBtZXRob2QpewoJRWxlbWVudC5pbXBsZW1lbnQobWV0aG9kLCBmdW5jdGlvbihleHByZXNzaW9uKXsKCQlyZXR1cm4gdGhpcy5nZXRFbGVtZW50cyhpbmplY3RDb21iaW5hdG9yKGV4cHJlc3Npb24sIGNvbWJpbmF0b3IpKTsKCX0pOwp9KTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCglnZXRGaXJzdDogZnVuY3Rpb24oZXhwcmVzc2lvbil7CgkJcmV0dXJuIGRvY3VtZW50LmlkKFNsaWNrLnNlYXJjaCh0aGlzLCBpbmplY3RDb21iaW5hdG9yKGV4cHJlc3Npb24sICc+JykpWzBdKTsKCX0sCgoJZ2V0TGFzdDogZnVuY3Rpb24oZXhwcmVzc2lvbil7CgkJcmV0dXJuIGRvY3VtZW50LmlkKFNsaWNrLnNlYXJjaCh0aGlzLCBpbmplY3RDb21iaW5hdG9yKGV4cHJlc3Npb24sICc+JykpLmdldExhc3QoKSk7Cgl9LAoKCWdldFdpbmRvdzogZnVuY3Rpb24oKXsKCQlyZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LndpbmRvdzsKCX0sCgoJZ2V0RG9jdW1lbnQ6IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudDsKCX0sCgoJZ2V0RWxlbWVudEJ5SWQ6IGZ1bmN0aW9uKGlkKXsKCQlyZXR1cm4gZG9jdW1lbnQuaWQoU2xpY2suZmluZCh0aGlzLCAnIycgKyAoJycgKyBpZCkucmVwbGFjZSgvKFxXKS9nLCAnXFwkMScpKSk7Cgl9LAoKCW1hdGNoOiBmdW5jdGlvbihleHByZXNzaW9uKXsKCQlyZXR1cm4gIWV4cHJlc3Npb24gfHwgU2xpY2subWF0Y2godGhpcywgZXhwcmVzc2lvbik7Cgl9Cgp9KTsKCi8vPDEuMmNvbXBhdD4KCmlmICh3aW5kb3cuJCQgPT0gbnVsbCkgV2luZG93LmltcGxlbWVudCgnJCQnLCBmdW5jdGlvbihzZWxlY3Rvcil7Cgl2YXIgZWxlbWVudHMgPSBuZXcgRWxlbWVudHM7CglpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxICYmIHR5cGVvZiBzZWxlY3RvciA9PSAnc3RyaW5nJykgcmV0dXJuIFNsaWNrLnNlYXJjaCh0aGlzLmRvY3VtZW50LCBzZWxlY3RvciwgZWxlbWVudHMpOwoJdmFyIGFyZ3MgPSBBcnJheS5mbGF0dGVuKGFyZ3VtZW50cyk7Cglmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3MubGVuZ3RoOyBpIDwgbDsgaSsrKXsKCQl2YXIgaXRlbSA9IGFyZ3NbaV07CgkJc3dpdGNoICh0eXBlT2YoaXRlbSkpewoJCQljYXNlICdlbGVtZW50JzogZWxlbWVudHMucHVzaChpdGVtKTsgYnJlYWs7CgkJCWNhc2UgJ3N0cmluZyc6IFNsaWNrLnNlYXJjaCh0aGlzLmRvY3VtZW50LCBpdGVtLCBlbGVtZW50cyk7CgkJfQoJfQoJcmV0dXJuIGVsZW1lbnRzOwp9KTsKCi8vPC8xLjJjb21wYXQ+CgppZiAod2luZG93LiQkID09IG51bGwpIFdpbmRvdy5pbXBsZW1lbnQoJyQkJywgZnVuY3Rpb24oc2VsZWN0b3IpewoJaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSl7CgkJaWYgKHR5cGVvZiBzZWxlY3RvciA9PSAnc3RyaW5nJykgcmV0dXJuIFNsaWNrLnNlYXJjaCh0aGlzLmRvY3VtZW50LCBzZWxlY3RvciwgbmV3IEVsZW1lbnRzKTsKCQllbHNlIGlmIChUeXBlLmlzRW51bWVyYWJsZShzZWxlY3RvcikpIHJldHVybiBuZXcgRWxlbWVudHMoc2VsZWN0b3IpOwoJfQoJcmV0dXJuIG5ldyBFbGVtZW50cyhhcmd1bWVudHMpOwp9KTsKCihmdW5jdGlvbigpewoKLy8gSW5zZXJ0ZXJzCgp2YXIgaW5zZXJ0ZXJzID0gewoKCWJlZm9yZTogZnVuY3Rpb24oY29udGV4dCwgZWxlbWVudCl7CgkJdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKCQlpZiAocGFyZW50KSBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNvbnRleHQsIGVsZW1lbnQpOwoJfSwKCglhZnRlcjogZnVuY3Rpb24oY29udGV4dCwgZWxlbWVudCl7CgkJdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKCQlpZiAocGFyZW50KSBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNvbnRleHQsIGVsZW1lbnQubmV4dFNpYmxpbmcpOwoJfSwKCglib3R0b206IGZ1bmN0aW9uKGNvbnRleHQsIGVsZW1lbnQpewoJCWVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGV4dCk7Cgl9LAoKCXRvcDogZnVuY3Rpb24oY29udGV4dCwgZWxlbWVudCl7CgkJZWxlbWVudC5pbnNlcnRCZWZvcmUoY29udGV4dCwgZWxlbWVudC5maXJzdENoaWxkKTsKCX0KCn07CgppbnNlcnRlcnMuaW5zaWRlID0gaW5zZXJ0ZXJzLmJvdHRvbTsKCi8vPDEuMmNvbXBhdD4KCk9iamVjdC5lYWNoKGluc2VydGVycywgZnVuY3Rpb24oaW5zZXJ0ZXIsIHdoZXJlKXsKCgl3aGVyZSA9IHdoZXJlLmNhcGl0YWxpemUoKTsKCgl2YXIgbWV0aG9kcyA9IHt9OwoKCW1ldGhvZHNbJ2luamVjdCcgKyB3aGVyZV0gPSBmdW5jdGlvbihlbCl7CgkJaW5zZXJ0ZXIodGhpcywgZG9jdW1lbnQuaWQoZWwsIHRydWUpKTsKCQlyZXR1cm4gdGhpczsKCX07CgoJbWV0aG9kc1snZ3JhYicgKyB3aGVyZV0gPSBmdW5jdGlvbihlbCl7CgkJaW5zZXJ0ZXIoZG9jdW1lbnQuaWQoZWwsIHRydWUpLCB0aGlzKTsKCQlyZXR1cm4gdGhpczsKCX07CgoJRWxlbWVudC5pbXBsZW1lbnQobWV0aG9kcyk7Cgp9KTsKCi8vPC8xLjJjb21wYXQ+CgovLyBnZXRQcm9wZXJ0eSAvIHNldFByb3BlcnR5Cgp2YXIgcHJvcGVydHlHZXR0ZXJzID0ge30sIHByb3BlcnR5U2V0dGVycyA9IHt9OwoKLy8gcHJvcGVydGllcwoKdmFyIHByb3BlcnRpZXMgPSB7fTsKQXJyYXkuZm9yRWFjaChbCgkndHlwZScsICd2YWx1ZScsICdkZWZhdWx0VmFsdWUnLCAnYWNjZXNzS2V5JywgJ2NlbGxQYWRkaW5nJywgJ2NlbGxTcGFjaW5nJywgJ2NvbFNwYW4nLAoJJ2ZyYW1lQm9yZGVyJywgJ3JlYWRPbmx5JywgJ3Jvd1NwYW4nLCAndGFiSW5kZXgnLCAndXNlTWFwJwpdLCBmdW5jdGlvbihwcm9wZXJ0eSl7Cglwcm9wZXJ0aWVzW3Byb3BlcnR5LnRvTG93ZXJDYXNlKCldID0gcHJvcGVydHk7Cn0pOwoKT2JqZWN0LmFwcGVuZChwcm9wZXJ0aWVzLCB7CgknaHRtbCc6ICdpbm5lckhUTUwnLAoJJ3RleHQnOiAoZnVuY3Rpb24oKXsKCQl2YXIgdGVtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoJCXJldHVybiAodGVtcC50ZXh0Q29udGVudCA9PSBudWxsKSA/ICdpbm5lclRleHQnOiAndGV4dENvbnRlbnQnOwoJfSkoKQp9KTsKCk9iamVjdC5mb3JFYWNoKHByb3BlcnRpZXMsIGZ1bmN0aW9uKHJlYWwsIGtleSl7Cglwcm9wZXJ0eVNldHRlcnNba2V5XSA9IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKXsKCQlub2RlW3JlYWxdID0gdmFsdWU7Cgl9OwoJcHJvcGVydHlHZXR0ZXJzW2tleV0gPSBmdW5jdGlvbihub2RlKXsKCQlyZXR1cm4gbm9kZVtyZWFsXTsKCX07Cn0pOwoKLy8gQm9vbGVhbnMKCnZhciBib29scyA9IFsKCSdjb21wYWN0JywgJ25vd3JhcCcsICdpc21hcCcsICdkZWNsYXJlJywgJ25vc2hhZGUnLCAnY2hlY2tlZCcsCgknZGlzYWJsZWQnLCAncmVhZE9ubHknLCAnbXVsdGlwbGUnLCAnc2VsZWN0ZWQnLCAnbm9yZXNpemUnLAoJJ2RlZmVyJywgJ2RlZmF1bHRDaGVja2VkJywgJ2F1dG9mb2N1cycsICdjb250cm9scycsICdhdXRvcGxheScsCgknbG9vcCcKXTsKCnZhciBib29sZWFucyA9IHt9OwpBcnJheS5mb3JFYWNoKGJvb2xzLCBmdW5jdGlvbihib29sKXsKCXZhciBsb3dlciA9IGJvb2wudG9Mb3dlckNhc2UoKTsKCWJvb2xlYW5zW2xvd2VyXSA9IGJvb2w7Cglwcm9wZXJ0eVNldHRlcnNbbG93ZXJdID0gZnVuY3Rpb24obm9kZSwgdmFsdWUpewoJCW5vZGVbYm9vbF0gPSAhIXZhbHVlOwoJfTsKCXByb3BlcnR5R2V0dGVyc1tsb3dlcl0gPSBmdW5jdGlvbihub2RlKXsKCQlyZXR1cm4gISFub2RlW2Jvb2xdOwoJfTsKfSk7CgovLyBTcGVjaWFsIGNhc2VzCgpPYmplY3QuYXBwZW5kKHByb3BlcnR5U2V0dGVycywgewoKCSdjbGFzcyc6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKXsKCQkoJ2NsYXNzTmFtZScgaW4gbm9kZSkgPyBub2RlLmNsYXNzTmFtZSA9IHZhbHVlIDogbm9kZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdmFsdWUpOwoJfSwKCgknZm9yJzogZnVuY3Rpb24obm9kZSwgdmFsdWUpewoJCSgnaHRtbEZvcicgaW4gbm9kZSkgPyBub2RlLmh0bWxGb3IgPSB2YWx1ZSA6IG5vZGUuc2V0QXR0cmlidXRlKCdmb3InLCB2YWx1ZSk7Cgl9LAoKCSdzdHlsZSc6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKXsKCQkobm9kZS5zdHlsZSkgPyBub2RlLnN0eWxlLmNzc1RleHQgPSB2YWx1ZSA6IG5vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsIHZhbHVlKTsKCX0KCn0pOwoKLyogZ2V0UHJvcGVydHksIHNldFByb3BlcnR5ICovCgpFbGVtZW50LmltcGxlbWVudCh7CgoJc2V0UHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKXsKCQl2YXIgbG93ZXIgPSBuYW1lLnRvTG93ZXJDYXNlKCk7CgkJaWYgKHZhbHVlID09IG51bGwpewoJCQlpZiAoIWJvb2xlYW5zW2xvd2VyXSl7CgkJCQl0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsKCQkJCXJldHVybiB0aGlzOwoJCQl9CgkJCXZhbHVlID0gZmFsc2U7CgkJfQoJCXZhciBzZXR0ZXIgPSBwcm9wZXJ0eVNldHRlcnNbbG93ZXJdOwoJCWlmIChzZXR0ZXIpIHNldHRlcih0aGlzLCB2YWx1ZSk7CgkJZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXNldFByb3BlcnRpZXM6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMpewoJCWZvciAodmFyIGF0dHJpYnV0ZSBpbiBhdHRyaWJ1dGVzKSB0aGlzLnNldFByb3BlcnR5KGF0dHJpYnV0ZSwgYXR0cmlidXRlc1thdHRyaWJ1dGVdKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJZ2V0UHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUpewoJCXZhciBnZXR0ZXIgPSBwcm9wZXJ0eUdldHRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXTsKCQlpZiAoZ2V0dGVyKSByZXR1cm4gZ2V0dGVyKHRoaXMpOwoJCXZhciByZXN1bHQgPSBTbGljay5nZXRBdHRyaWJ1dGUodGhpcywgbmFtZSk7CgkJcmV0dXJuICghcmVzdWx0ICYmICFTbGljay5oYXNBdHRyaWJ1dGUodGhpcywgbmFtZSkpID8gbnVsbCA6IHJlc3VsdDsKCX0sCgoJZ2V0UHJvcGVydGllczogZnVuY3Rpb24oKXsKCQl2YXIgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKTsKCQlyZXR1cm4gYXJncy5tYXAodGhpcy5nZXRQcm9wZXJ0eSwgdGhpcykuYXNzb2NpYXRlKGFyZ3MpOwoJfSwKCglyZW1vdmVQcm9wZXJ0eTogZnVuY3Rpb24obmFtZSl7CgkJcmV0dXJuIHRoaXMuc2V0UHJvcGVydHkobmFtZSwgbnVsbCk7Cgl9LAoKCXJlbW92ZVByb3BlcnRpZXM6IGZ1bmN0aW9uKCl7CgkJQXJyYXkuZWFjaChhcmd1bWVudHMsIHRoaXMucmVtb3ZlUHJvcGVydHksIHRoaXMpOwoJCXJldHVybiB0aGlzOwoJfSwKCglzZXQ6IGZ1bmN0aW9uKHByb3AsIHZhbHVlKXsKCQl2YXIgcHJvcGVydHkgPSBFbGVtZW50LlByb3BlcnRpZXNbcHJvcF07CgkJKHByb3BlcnR5ICYmIHByb3BlcnR5LnNldCkgPyBwcm9wZXJ0eS5zZXQuY2FsbCh0aGlzLCB2YWx1ZSkgOiB0aGlzLnNldFByb3BlcnR5KHByb3AsIHZhbHVlKTsKCX0ub3ZlcmxvYWRTZXR0ZXIoKSwKCglnZXQ6IGZ1bmN0aW9uKHByb3ApewoJCXZhciBwcm9wZXJ0eSA9IEVsZW1lbnQuUHJvcGVydGllc1twcm9wXTsKCQlyZXR1cm4gKHByb3BlcnR5ICYmIHByb3BlcnR5LmdldCkgPyBwcm9wZXJ0eS5nZXQuYXBwbHkodGhpcykgOiB0aGlzLmdldFByb3BlcnR5KHByb3ApOwoJfS5vdmVybG9hZEdldHRlcigpLAoKCWVyYXNlOiBmdW5jdGlvbihwcm9wKXsKCQl2YXIgcHJvcGVydHkgPSBFbGVtZW50LlByb3BlcnRpZXNbcHJvcF07CgkJKHByb3BlcnR5ICYmIHByb3BlcnR5LmVyYXNlKSA/IHByb3BlcnR5LmVyYXNlLmFwcGx5KHRoaXMpIDogdGhpcy5yZW1vdmVQcm9wZXJ0eShwcm9wKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJaGFzQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSl7CgkJcmV0dXJuIHRoaXMuY2xhc3NOYW1lLmNsZWFuKCkuY29udGFpbnMoY2xhc3NOYW1lLCAnICcpOwoJfSwKCglhZGRDbGFzczogZnVuY3Rpb24oY2xhc3NOYW1lKXsKCQlpZiAoIXRoaXMuaGFzQ2xhc3MoY2xhc3NOYW1lKSkgdGhpcy5jbGFzc05hbWUgPSAodGhpcy5jbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWUpLmNsZWFuKCk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXJlbW92ZUNsYXNzOiBmdW5jdGlvbihjbGFzc05hbWUpewoJCXRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcoXnxcXHMpJyArIGNsYXNzTmFtZSArICcoPzpcXHN8JCknKSwgJyQxJyk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXRvZ2dsZUNsYXNzOiBmdW5jdGlvbihjbGFzc05hbWUsIGZvcmNlKXsKCQlpZiAoZm9yY2UgPT0gbnVsbCkgZm9yY2UgPSAhdGhpcy5oYXNDbGFzcyhjbGFzc05hbWUpOwoJCXJldHVybiAoZm9yY2UpID8gdGhpcy5hZGRDbGFzcyhjbGFzc05hbWUpIDogdGhpcy5yZW1vdmVDbGFzcyhjbGFzc05hbWUpOwoJfSwKCglhZG9wdDogZnVuY3Rpb24oKXsKCQl2YXIgcGFyZW50ID0gdGhpcywgZnJhZ21lbnQsIGVsZW1lbnRzID0gQXJyYXkuZmxhdHRlbihhcmd1bWVudHMpLCBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7CgkJaWYgKGxlbmd0aCA+IDEpIHBhcmVudCA9IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoKCQlmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXsKCQkJdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5pZChlbGVtZW50c1tpXSwgdHJ1ZSk7CgkJCWlmIChlbGVtZW50KSBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7CgkJfQoKCQlpZiAoZnJhZ21lbnQpIHRoaXMuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpOwoKCQlyZXR1cm4gdGhpczsKCX0sCgoJYXBwZW5kVGV4dDogZnVuY3Rpb24odGV4dCwgd2hlcmUpewoJCXJldHVybiB0aGlzLmdyYWIodGhpcy5nZXREb2N1bWVudCgpLm5ld1RleHROb2RlKHRleHQpLCB3aGVyZSk7Cgl9LAoKCWdyYWI6IGZ1bmN0aW9uKGVsLCB3aGVyZSl7CgkJaW5zZXJ0ZXJzW3doZXJlIHx8ICdib3R0b20nXShkb2N1bWVudC5pZChlbCwgdHJ1ZSksIHRoaXMpOwoJCXJldHVybiB0aGlzOwoJfSwKCglpbmplY3Q6IGZ1bmN0aW9uKGVsLCB3aGVyZSl7CgkJaW5zZXJ0ZXJzW3doZXJlIHx8ICdib3R0b20nXSh0aGlzLCBkb2N1bWVudC5pZChlbCwgdHJ1ZSkpOwoJCXJldHVybiB0aGlzOwoJfSwKCglyZXBsYWNlczogZnVuY3Rpb24oZWwpewoJCWVsID0gZG9jdW1lbnQuaWQoZWwsIHRydWUpOwoJCWVsLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHRoaXMsIGVsKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJd3JhcHM6IGZ1bmN0aW9uKGVsLCB3aGVyZSl7CgkJZWwgPSBkb2N1bWVudC5pZChlbCwgdHJ1ZSk7CgkJcmV0dXJuIHRoaXMucmVwbGFjZXMoZWwpLmdyYWIoZWwsIHdoZXJlKTsKCX0sCgoJZ2V0U2VsZWN0ZWQ6IGZ1bmN0aW9uKCl7CgkJdGhpcy5zZWxlY3RlZEluZGV4OyAvLyBTYWZhcmkgMy4yLjEKCQlyZXR1cm4gbmV3IEVsZW1lbnRzKEFycmF5LmZyb20odGhpcy5vcHRpb25zKS5maWx0ZXIoZnVuY3Rpb24ob3B0aW9uKXsKCQkJcmV0dXJuIG9wdGlvbi5zZWxlY3RlZDsKCQl9KSk7Cgl9LAoKCXRvUXVlcnlTdHJpbmc6IGZ1bmN0aW9uKCl7CgkJdmFyIHF1ZXJ5U3RyaW5nID0gW107CgkJdGhpcy5nZXRFbGVtZW50cygnaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEnKS5lYWNoKGZ1bmN0aW9uKGVsKXsKCQkJdmFyIHR5cGUgPSBlbC50eXBlOwoJCQlpZiAoIWVsLm5hbWUgfHwgZWwuZGlzYWJsZWQgfHwgdHlwZSA9PSAnc3VibWl0JyB8fCB0eXBlID09ICdyZXNldCcgfHwgdHlwZSA9PSAnZmlsZScgfHwgdHlwZSA9PSAnaW1hZ2UnKSByZXR1cm47CgoJCQl2YXIgdmFsdWUgPSAoZWwuZ2V0KCd0YWcnKSA9PSAnc2VsZWN0JykgPyBlbC5nZXRTZWxlY3RlZCgpLm1hcChmdW5jdGlvbihvcHQpewoJCQkJLy8gSUUKCQkJCXJldHVybiBkb2N1bWVudC5pZChvcHQpLmdldCgndmFsdWUnKTsKCQkJfSkgOiAoKHR5cGUgPT0gJ3JhZGlvJyB8fCB0eXBlID09ICdjaGVja2JveCcpICYmICFlbC5jaGVja2VkKSA/IG51bGwgOiBlbC5nZXQoJ3ZhbHVlJyk7CgoJCQlBcnJheS5mcm9tKHZhbHVlKS5lYWNoKGZ1bmN0aW9uKHZhbCl7CgkJCQlpZiAodHlwZW9mIHZhbCAhPSAndW5kZWZpbmVkJykgcXVlcnlTdHJpbmcucHVzaChlbmNvZGVVUklDb21wb25lbnQoZWwubmFtZSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsKSk7CgkJCX0pOwoJCX0pOwoJCXJldHVybiBxdWVyeVN0cmluZy5qb2luKCcmJyk7Cgl9Cgp9KTsKCnZhciBjb2xsZWN0ZWQgPSB7fSwgc3RvcmFnZSA9IHt9OwoKdmFyIGdldCA9IGZ1bmN0aW9uKHVpZCl7CglyZXR1cm4gKHN0b3JhZ2VbdWlkXSB8fCAoc3RvcmFnZVt1aWRdID0ge30pKTsKfTsKCnZhciBjbGVhbiA9IGZ1bmN0aW9uKGl0ZW0pewoJdmFyIHVpZCA9IGl0ZW0udWlkOwoJaWYgKGl0ZW0ucmVtb3ZlRXZlbnRzKSBpdGVtLnJlbW92ZUV2ZW50cygpOwoJaWYgKGl0ZW0uY2xlYXJBdHRyaWJ1dGVzKSBpdGVtLmNsZWFyQXR0cmlidXRlcygpOwoJaWYgKHVpZCAhPSBudWxsKXsKCQlkZWxldGUgY29sbGVjdGVkW3VpZF07CgkJZGVsZXRlIHN0b3JhZ2VbdWlkXTsKCX0KCXJldHVybiBpdGVtOwp9OwoKdmFyIGZvcm1Qcm9wcyA9IHtpbnB1dDogJ2NoZWNrZWQnLCBvcHRpb246ICdzZWxlY3RlZCcsIHRleHRhcmVhOiAndmFsdWUnfTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCglkZXN0cm95OiBmdW5jdGlvbigpewoJCXZhciBjaGlsZHJlbiA9IGNsZWFuKHRoaXMpLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJyk7CgkJQXJyYXkuZWFjaChjaGlsZHJlbiwgY2xlYW4pOwoJCUVsZW1lbnQuZGlzcG9zZSh0aGlzKTsKCQlyZXR1cm4gbnVsbDsKCX0sCgoJZW1wdHk6IGZ1bmN0aW9uKCl7CgkJQXJyYXkuZnJvbSh0aGlzLmNoaWxkTm9kZXMpLmVhY2goRWxlbWVudC5kaXNwb3NlKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJZGlzcG9zZTogZnVuY3Rpb24oKXsKCQlyZXR1cm4gKHRoaXMucGFyZW50Tm9kZSkgPyB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcykgOiB0aGlzOwoJfSwKCgljbG9uZTogZnVuY3Rpb24oY29udGVudHMsIGtlZXBpZCl7CgkJY29udGVudHMgPSBjb250ZW50cyAhPT0gZmFsc2U7CgkJdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUoY29udGVudHMpLCBjZSA9IFtjbG9uZV0sIHRlID0gW3RoaXNdLCBpOwoKCQlpZiAoY29udGVudHMpewoJCQljZS5hcHBlbmQoQXJyYXkuZnJvbShjbG9uZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpKSk7CgkJCXRlLmFwcGVuZChBcnJheS5mcm9tKHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKSkpOwoJCX0KCgkJZm9yIChpID0gY2UubGVuZ3RoOyBpLS07KXsKCQkJdmFyIG5vZGUgPSBjZVtpXSwgZWxlbWVudCA9IHRlW2ldOwoJCQlpZiAoIWtlZXBpZCkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7CgkJCS8qPGx0SUU5PiovCgkJCWlmIChub2RlLmNsZWFyQXR0cmlidXRlcyl7CgkJCQlub2RlLmNsZWFyQXR0cmlidXRlcygpOwoJCQkJbm9kZS5tZXJnZUF0dHJpYnV0ZXMoZWxlbWVudCk7CgkJCQlub2RlLnJlbW92ZUF0dHJpYnV0ZSgndWlkJyk7CgkJCQlpZiAobm9kZS5vcHRpb25zKXsKCQkJCQl2YXIgbm8gPSBub2RlLm9wdGlvbnMsIGVvID0gZWxlbWVudC5vcHRpb25zOwoJCQkJCWZvciAodmFyIGogPSBuby5sZW5ndGg7IGotLTspIG5vW2pdLnNlbGVjdGVkID0gZW9bal0uc2VsZWN0ZWQ7CgkJCQl9CgkJCX0KCQkJLyo8L2x0SUU5PiovCgkJCXZhciBwcm9wID0gZm9ybVByb3BzW2VsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXTsKCQkJaWYgKHByb3AgJiYgZWxlbWVudFtwcm9wXSkgbm9kZVtwcm9wXSA9IGVsZW1lbnRbcHJvcF07CgkJfQoKCQkvKjxsdElFOT4qLwoJCWlmIChCcm93c2VyLmllKXsKCQkJdmFyIGNvID0gY2xvbmUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ29iamVjdCcpLCB0byA9IHRoaXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ29iamVjdCcpOwoJCQlmb3IgKGkgPSBjby5sZW5ndGg7IGktLTspIGNvW2ldLm91dGVySFRNTCA9IHRvW2ldLm91dGVySFRNTDsKCQl9CgkJLyo8L2x0SUU5PiovCgkJcmV0dXJuIGRvY3VtZW50LmlkKGNsb25lKTsKCX0KCn0pOwoKW0VsZW1lbnQsIFdpbmRvdywgRG9jdW1lbnRdLmludm9rZSgnaW1wbGVtZW50JywgewoKCWFkZExpc3RlbmVyOiBmdW5jdGlvbih0eXBlLCBmbil7CgkJaWYgKHR5cGUgPT0gJ3VubG9hZCcpewoJCQl2YXIgb2xkID0gZm4sIHNlbGYgPSB0aGlzOwoJCQlmbiA9IGZ1bmN0aW9uKCl7CgkJCQlzZWxmLnJlbW92ZUxpc3RlbmVyKCd1bmxvYWQnLCBmbik7CgkJCQlvbGQoKTsKCQkJfTsKCQl9IGVsc2UgewoJCQljb2xsZWN0ZWRbJHVpZCh0aGlzKV0gPSB0aGlzOwoJCX0KCQlpZiAodGhpcy5hZGRFdmVudExpc3RlbmVyKSB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sICEhYXJndW1lbnRzWzJdKTsKCQllbHNlIHRoaXMuYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGZuKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJcmVtb3ZlTGlzdGVuZXI6IGZ1bmN0aW9uKHR5cGUsIGZuKXsKCQlpZiAodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKSB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sICEhYXJndW1lbnRzWzJdKTsKCQllbHNlIHRoaXMuZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGZuKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJcmV0cmlldmU6IGZ1bmN0aW9uKHByb3BlcnR5LCBkZmx0KXsKCQl2YXIgc3RvcmFnZSA9IGdldCgkdWlkKHRoaXMpKSwgcHJvcCA9IHN0b3JhZ2VbcHJvcGVydHldOwoJCWlmIChkZmx0ICE9IG51bGwgJiYgcHJvcCA9PSBudWxsKSBwcm9wID0gc3RvcmFnZVtwcm9wZXJ0eV0gPSBkZmx0OwoJCXJldHVybiBwcm9wICE9IG51bGwgPyBwcm9wIDogbnVsbDsKCX0sCgoJc3RvcmU6IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSl7CgkJdmFyIHN0b3JhZ2UgPSBnZXQoJHVpZCh0aGlzKSk7CgkJc3RvcmFnZVtwcm9wZXJ0eV0gPSB2YWx1ZTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJZWxpbWluYXRlOiBmdW5jdGlvbihwcm9wZXJ0eSl7CgkJdmFyIHN0b3JhZ2UgPSBnZXQoJHVpZCh0aGlzKSk7CgkJZGVsZXRlIHN0b3JhZ2VbcHJvcGVydHldOwoJCXJldHVybiB0aGlzOwoJfQoKfSk7CgovKjxsdElFOT4qLwppZiAod2luZG93LmF0dGFjaEV2ZW50ICYmICF3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikgd2luZG93LmFkZExpc3RlbmVyKCd1bmxvYWQnLCBmdW5jdGlvbigpewoJT2JqZWN0LmVhY2goY29sbGVjdGVkLCBjbGVhbik7CglpZiAod2luZG93LkNvbGxlY3RHYXJiYWdlKSBDb2xsZWN0R2FyYmFnZSgpOwp9KTsKLyo8L2x0SUU5PiovCgpFbGVtZW50LlByb3BlcnRpZXMgPSB7fTsKCi8vPDEuMmNvbXBhdD4KCkVsZW1lbnQuUHJvcGVydGllcyA9IG5ldyBIYXNoOwoKLy88LzEuMmNvbXBhdD4KCkVsZW1lbnQuUHJvcGVydGllcy5zdHlsZSA9IHsKCglzZXQ6IGZ1bmN0aW9uKHN0eWxlKXsKCQl0aGlzLnN0eWxlLmNzc1RleHQgPSBzdHlsZTsKCX0sCgoJZ2V0OiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzLnN0eWxlLmNzc1RleHQ7Cgl9LAoKCWVyYXNlOiBmdW5jdGlvbigpewoJCXRoaXMuc3R5bGUuY3NzVGV4dCA9ICcnOwoJfQoKfTsKCkVsZW1lbnQuUHJvcGVydGllcy50YWcgPSB7CgoJZ2V0OiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzLnRhZ05hbWUudG9Mb3dlckNhc2UoKTsKCX0KCn07CgovKjwhd2Via2l0PiovCkVsZW1lbnQuUHJvcGVydGllcy5odG1sID0gKGZ1bmN0aW9uKCl7CgoJdmFyIHRhYmxlVGVzdCA9IEZ1bmN0aW9uLmF0dGVtcHQoZnVuY3Rpb24oKXsKCQl2YXIgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpOwoJCXRhYmxlLmlubmVySFRNTCA9ICc8dHI+PHRkPjwvdGQ+PC90cj4nOwoJfSk7CgoJdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCgl2YXIgdHJhbnNsYXRpb25zID0gewoJCXRhYmxlOiBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXSwKCQlzZWxlY3Q6IFsxLCAnPHNlbGVjdD4nLCAnPC9zZWxlY3Q+J10sCgkJdGJvZHk6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLAoJCXRyOiBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXQoJfTsKCXRyYW5zbGF0aW9ucy50aGVhZCA9IHRyYW5zbGF0aW9ucy50Zm9vdCA9IHRyYW5zbGF0aW9ucy50Ym9keTsKCgkvKjxsdElFOT4qLwoJLy8gdGVjaG5pcXVlIGJ5IGpkYmFybGV0dCAtIGh0dHA6Ly9qZGJhcnRsZXR0LmNvbS9pbm5lcnNoaXYvCgl3cmFwcGVyLmlubmVySFRNTCA9ICc8bmF2PjwvbmF2Pic7Cgl2YXIgSFRNTDVUZXN0ID0gd3JhcHBlci5jaGlsZE5vZGVzLmxlbmd0aCA9PSAxOwoJaWYgKCFIVE1MNVRlc3QpewoJCXZhciB0YWdzID0gJ2FiYnIgYXJ0aWNsZSBhc2lkZSBhdWRpbyBjYW52YXMgZGF0YWxpc3QgZGV0YWlscyBmaWdjYXB0aW9uIGZpZ3VyZSBmb290ZXIgaGVhZGVyIGhncm91cCBtYXJrIG1ldGVyIG5hdiBvdXRwdXQgcHJvZ3Jlc3Mgc2VjdGlvbiBzdW1tYXJ5IHRpbWUgdmlkZW8nLnNwbGl0KCcgJyksCgkJCWZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBsID0gdGFncy5sZW5ndGg7CgkJd2hpbGUgKGwtLSkgZnJhZ21lbnQuY3JlYXRlRWxlbWVudCh0YWdzW2xdKTsKCQlmcmFnbWVudC5hcHBlbmRDaGlsZCh3cmFwcGVyKTsKCX0KCS8qPC9sdElFOT4qLwoKCXZhciBodG1sID0gewoJCXNldDogZnVuY3Rpb24oaHRtbCl7CgkJCWlmICh0eXBlT2YoaHRtbCkgPT0gJ2FycmF5JykgaHRtbCA9IGh0bWwuam9pbignJyk7CgoJCQl2YXIgd3JhcCA9ICghdGFibGVUZXN0ICYmIHRyYW5zbGF0aW9uc1t0aGlzLmdldCgndGFnJyldKTsKCQkJLyo8bHRJRTk+Ki8KCQkJaWYgKCF3cmFwICYmICFIVE1MNVRlc3QpIHdyYXAgPSBbMCwgJycsICcnXTsKCQkJLyo8L2x0SUU5PiovCgkJCWlmICh3cmFwKXsKCQkJCXZhciBmaXJzdCA9IHdyYXBwZXI7CgkJCQlmaXJzdC5pbm5lckhUTUwgPSB3cmFwWzFdICsgaHRtbCArIHdyYXBbMl07CgkJCQlmb3IgKHZhciBpID0gd3JhcFswXTsgaS0tOykgZmlyc3QgPSBmaXJzdC5maXJzdENoaWxkOwoJCQkJdGhpcy5lbXB0eSgpLmFkb3B0KGZpcnN0LmNoaWxkTm9kZXMpOwoJCQl9IGVsc2UgewoJCQkJdGhpcy5pbm5lckhUTUwgPSBodG1sOwoJCQl9CgkJfQoJfTsKCglodG1sLmVyYXNlID0gaHRtbC5zZXQ7CgoJcmV0dXJuIGh0bWw7Cn0pKCk7Ci8qPC8hd2Via2l0PiovCgovKjxsdElFOT4qLwp2YXIgdGVzdEZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7CnRlc3RGb3JtLmlubmVySFRNTCA9ICc8c2VsZWN0PjxvcHRpb24+czwvb3B0aW9uPjwvc2VsZWN0Pic7CgppZiAodGVzdEZvcm0uZmlyc3RDaGlsZC52YWx1ZSAhPSAncycpIEVsZW1lbnQuUHJvcGVydGllcy52YWx1ZSA9IHsKCglzZXQ6IGZ1bmN0aW9uKHZhbHVlKXsKCQl2YXIgdGFnID0gdGhpcy5nZXQoJ3RhZycpOwoJCWlmICh0YWcgIT0gJ3NlbGVjdCcpIHJldHVybiB0aGlzLnNldFByb3BlcnR5KCd2YWx1ZScsIHZhbHVlKTsKCQl2YXIgb3B0aW9ucyA9IHRoaXMuZ2V0RWxlbWVudHMoJ29wdGlvbicpOwoJCWZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKyl7CgkJCXZhciBvcHRpb24gPSBvcHRpb25zW2ldLAoJCQkJYXR0ciA9IG9wdGlvbi5nZXRBdHRyaWJ1dGVOb2RlKCd2YWx1ZScpLAoJCQkJb3B0aW9uVmFsdWUgPSAoYXR0ciAmJiBhdHRyLnNwZWNpZmllZCkgPyBvcHRpb24udmFsdWUgOiBvcHRpb24uZ2V0KCd0ZXh0Jyk7CgkJCWlmIChvcHRpb25WYWx1ZSA9PSB2YWx1ZSkgcmV0dXJuIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7CgkJfQoJfSwKCglnZXQ6IGZ1bmN0aW9uKCl7CgkJdmFyIG9wdGlvbiA9IHRoaXMsIHRhZyA9IG9wdGlvbi5nZXQoJ3RhZycpOwoKCQlpZiAodGFnICE9ICdzZWxlY3QnICYmIHRhZyAhPSAnb3B0aW9uJykgcmV0dXJuIHRoaXMuZ2V0UHJvcGVydHkoJ3ZhbHVlJyk7CgoJCWlmICh0YWcgPT0gJ3NlbGVjdCcgJiYgIShvcHRpb24gPSBvcHRpb24uZ2V0U2VsZWN0ZWQoKVswXSkpIHJldHVybiAnJzsKCgkJdmFyIGF0dHIgPSBvcHRpb24uZ2V0QXR0cmlidXRlTm9kZSgndmFsdWUnKTsKCQlyZXR1cm4gKGF0dHIgJiYgYXR0ci5zcGVjaWZpZWQpID8gb3B0aW9uLnZhbHVlIDogb3B0aW9uLmdldCgndGV4dCcpOwoJfQoKfTsKLyo8L2x0SUU5PiovCgp9KSgpOwoKCi8qCi0tLQoKbmFtZTogRWxlbWVudC5TdHlsZQoKZGVzY3JpcHRpb246IENvbnRhaW5zIG1ldGhvZHMgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIHN0eWxlcyBvZiBFbGVtZW50cyBpbiBhIGZhc2hpb25hYmxlIHdheS4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IEVsZW1lbnQKCnByb3ZpZGVzOiBFbGVtZW50LlN0eWxlCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGh0bWwgPSBkb2N1bWVudC5odG1sOwoKRWxlbWVudC5Qcm9wZXJ0aWVzLnN0eWxlcyA9IHtzZXQ6IGZ1bmN0aW9uKHN0eWxlcyl7Cgl0aGlzLnNldFN0eWxlcyhzdHlsZXMpOwp9fTsKCnZhciBoYXNPcGFjaXR5ID0gKGh0bWwuc3R5bGUub3BhY2l0eSAhPSBudWxsKSwKCWhhc0ZpbHRlciA9IChodG1sLnN0eWxlLmZpbHRlciAhPSBudWxsKSwKCXJlQWxwaGEgPSAvYWxwaGFcKG9wYWNpdHk9KFtcZC5dKylcKS9pOwoKdmFyIHNldFZpc2liaWxpdHkgPSBmdW5jdGlvbihlbGVtZW50LCBvcGFjaXR5KXsKCWVsZW1lbnQuc3RvcmUoJyRvcGFjaXR5Jywgb3BhY2l0eSk7CgllbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBvcGFjaXR5ID4gMCA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nOwp9OwoKdmFyIHNldE9wYWNpdHkgPSAoaGFzT3BhY2l0eSA/IGZ1bmN0aW9uKGVsZW1lbnQsIG9wYWNpdHkpewoJZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eTsKfSA6IChoYXNGaWx0ZXIgPyBmdW5jdGlvbihlbGVtZW50LCBvcGFjaXR5KXsKCWlmICghZWxlbWVudC5jdXJyZW50U3R5bGUgfHwgIWVsZW1lbnQuY3VycmVudFN0eWxlLmhhc0xheW91dCkgZWxlbWVudC5zdHlsZS56b29tID0gMTsKCW9wYWNpdHkgPSAob3BhY2l0eSAqIDEwMCkubGltaXQoMCwgMTAwKS5yb3VuZCgpOwoJb3BhY2l0eSA9IChvcGFjaXR5ID09IDEwMCkgPyAnJyA6ICdhbHBoYShvcGFjaXR5PScgKyBvcGFjaXR5ICsgJyknOwoJdmFyIGZpbHRlciA9IGVsZW1lbnQuc3R5bGUuZmlsdGVyIHx8IGVsZW1lbnQuZ2V0Q29tcHV0ZWRTdHlsZSgnZmlsdGVyJykgfHwgJyc7CgllbGVtZW50LnN0eWxlLmZpbHRlciA9IHJlQWxwaGEudGVzdChmaWx0ZXIpID8gZmlsdGVyLnJlcGxhY2UocmVBbHBoYSwgb3BhY2l0eSkgOiBmaWx0ZXIgKyBvcGFjaXR5Owp9IDogc2V0VmlzaWJpbGl0eSkpOwoKdmFyIGdldE9wYWNpdHkgPSAoaGFzT3BhY2l0eSA/IGZ1bmN0aW9uKGVsZW1lbnQpewoJdmFyIG9wYWNpdHkgPSBlbGVtZW50LnN0eWxlLm9wYWNpdHkgfHwgZWxlbWVudC5nZXRDb21wdXRlZFN0eWxlKCdvcGFjaXR5Jyk7CglyZXR1cm4gKG9wYWNpdHkgPT0gJycpID8gMSA6IG9wYWNpdHkudG9GbG9hdCgpOwp9IDogKGhhc0ZpbHRlciA/IGZ1bmN0aW9uKGVsZW1lbnQpewoJdmFyIGZpbHRlciA9IChlbGVtZW50LnN0eWxlLmZpbHRlciB8fCBlbGVtZW50LmdldENvbXB1dGVkU3R5bGUoJ2ZpbHRlcicpKSwKCQlvcGFjaXR5OwoJaWYgKGZpbHRlcikgb3BhY2l0eSA9IGZpbHRlci5tYXRjaChyZUFscGhhKTsKCXJldHVybiAob3BhY2l0eSA9PSBudWxsIHx8IGZpbHRlciA9PSBudWxsKSA/IDEgOiAob3BhY2l0eVsxXSAvIDEwMCk7Cn0gOiBmdW5jdGlvbihlbGVtZW50KXsKCXZhciBvcGFjaXR5ID0gZWxlbWVudC5yZXRyaWV2ZSgnJG9wYWNpdHknKTsKCWlmIChvcGFjaXR5ID09IG51bGwpIG9wYWNpdHkgPSAoZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID09ICdoaWRkZW4nID8gMCA6IDEpOwoJcmV0dXJuIG9wYWNpdHk7Cn0pKTsKCnZhciBmbG9hdE5hbWUgPSAoaHRtbC5zdHlsZS5jc3NGbG9hdCA9PSBudWxsKSA/ICdzdHlsZUZsb2F0JyA6ICdjc3NGbG9hdCc7CgpFbGVtZW50LmltcGxlbWVudCh7CgoJZ2V0Q29tcHV0ZWRTdHlsZTogZnVuY3Rpb24ocHJvcGVydHkpewoJCWlmICh0aGlzLmN1cnJlbnRTdHlsZSkgcmV0dXJuIHRoaXMuY3VycmVudFN0eWxlW3Byb3BlcnR5LmNhbWVsQ2FzZSgpXTsKCQl2YXIgZGVmYXVsdFZpZXcgPSBFbGVtZW50LmdldERvY3VtZW50KHRoaXMpLmRlZmF1bHRWaWV3LAoJCQljb21wdXRlZCA9IGRlZmF1bHRWaWV3ID8gZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLCBudWxsKSA6IG51bGw7CgkJcmV0dXJuIChjb21wdXRlZCkgPyBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKChwcm9wZXJ0eSA9PSBmbG9hdE5hbWUpID8gJ2Zsb2F0JyA6IHByb3BlcnR5Lmh5cGhlbmF0ZSgpKSA6IG51bGw7Cgl9LAoKCXNldFN0eWxlOiBmdW5jdGlvbihwcm9wZXJ0eSwgdmFsdWUpewoJCWlmIChwcm9wZXJ0eSA9PSAnb3BhY2l0eScpewoJCQlzZXRPcGFjaXR5KHRoaXMsIHBhcnNlRmxvYXQodmFsdWUpKTsKCQkJcmV0dXJuIHRoaXM7CgkJfQoJCXByb3BlcnR5ID0gKHByb3BlcnR5ID09ICdmbG9hdCcgPyBmbG9hdE5hbWUgOiBwcm9wZXJ0eSkuY2FtZWxDYXNlKCk7CgkJaWYgKHR5cGVPZih2YWx1ZSkgIT0gJ3N0cmluZycpewoJCQl2YXIgbWFwID0gKEVsZW1lbnQuU3R5bGVzW3Byb3BlcnR5XSB8fCAnQCcpLnNwbGl0KCcgJyk7CgkJCXZhbHVlID0gQXJyYXkuZnJvbSh2YWx1ZSkubWFwKGZ1bmN0aW9uKHZhbCwgaSl7CgkJCQlpZiAoIW1hcFtpXSkgcmV0dXJuICcnOwoJCQkJcmV0dXJuICh0eXBlT2YodmFsKSA9PSAnbnVtYmVyJykgPyBtYXBbaV0ucmVwbGFjZSgnQCcsIE1hdGgucm91bmQodmFsKSkgOiB2YWw7CgkJCX0pLmpvaW4oJyAnKTsKCQl9IGVsc2UgaWYgKHZhbHVlID09IFN0cmluZyhOdW1iZXIodmFsdWUpKSl7CgkJCXZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7CgkJfQoJCXRoaXMuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWdldFN0eWxlOiBmdW5jdGlvbihwcm9wZXJ0eSl7CgkJaWYgKHByb3BlcnR5ID09ICdvcGFjaXR5JykgcmV0dXJuIGdldE9wYWNpdHkodGhpcyk7CgkJcHJvcGVydHkgPSAocHJvcGVydHkgPT0gJ2Zsb2F0JyA/IGZsb2F0TmFtZSA6IHByb3BlcnR5KS5jYW1lbENhc2UoKTsKCQl2YXIgcmVzdWx0ID0gdGhpcy5zdHlsZVtwcm9wZXJ0eV07CgkJaWYgKCFyZXN1bHQgfHwgcHJvcGVydHkgPT0gJ3pJbmRleCcpewoJCQlyZXN1bHQgPSBbXTsKCQkJZm9yICh2YXIgc3R5bGUgaW4gRWxlbWVudC5TaG9ydFN0eWxlcyl7CgkJCQlpZiAocHJvcGVydHkgIT0gc3R5bGUpIGNvbnRpbnVlOwoJCQkJZm9yICh2YXIgcyBpbiBFbGVtZW50LlNob3J0U3R5bGVzW3N0eWxlXSkgcmVzdWx0LnB1c2godGhpcy5nZXRTdHlsZShzKSk7CgkJCQlyZXR1cm4gcmVzdWx0LmpvaW4oJyAnKTsKCQkJfQoJCQlyZXN1bHQgPSB0aGlzLmdldENvbXB1dGVkU3R5bGUocHJvcGVydHkpOwoJCX0KCQlpZiAocmVzdWx0KXsKCQkJcmVzdWx0ID0gU3RyaW5nKHJlc3VsdCk7CgkJCXZhciBjb2xvciA9IHJlc3VsdC5tYXRjaCgvcmdiYT9cKFtcZFxzLF0rXCkvKTsKCQkJaWYgKGNvbG9yKSByZXN1bHQgPSByZXN1bHQucmVwbGFjZShjb2xvclswXSwgY29sb3JbMF0ucmdiVG9IZXgoKSk7CgkJfQoJCWlmIChCcm93c2VyLm9wZXJhIHx8IChCcm93c2VyLmllICYmIGlzTmFOKHBhcnNlRmxvYXQocmVzdWx0KSkpKXsKCQkJaWYgKCgvXihoZWlnaHR8d2lkdGgpJC8pLnRlc3QocHJvcGVydHkpKXsKCQkJCXZhciB2YWx1ZXMgPSAocHJvcGVydHkgPT0gJ3dpZHRoJykgPyBbJ2xlZnQnLCAncmlnaHQnXSA6IFsndG9wJywgJ2JvdHRvbSddLCBzaXplID0gMDsKCQkJCXZhbHVlcy5lYWNoKGZ1bmN0aW9uKHZhbHVlKXsKCQkJCQlzaXplICs9IHRoaXMuZ2V0U3R5bGUoJ2JvcmRlci0nICsgdmFsdWUgKyAnLXdpZHRoJykudG9JbnQoKSArIHRoaXMuZ2V0U3R5bGUoJ3BhZGRpbmctJyArIHZhbHVlKS50b0ludCgpOwoJCQkJfSwgdGhpcyk7CgkJCQlyZXR1cm4gdGhpc1snb2Zmc2V0JyArIHByb3BlcnR5LmNhcGl0YWxpemUoKV0gLSBzaXplICsgJ3B4JzsKCQkJfQoJCQlpZiAoQnJvd3Nlci5vcGVyYSAmJiBTdHJpbmcocmVzdWx0KS5pbmRleE9mKCdweCcpICE9IC0xKSByZXR1cm4gcmVzdWx0OwoJCQlpZiAoKC9eYm9yZGVyKC4rKVdpZHRofG1hcmdpbnxwYWRkaW5nLykudGVzdChwcm9wZXJ0eSkpIHJldHVybiAnMHB4JzsKCQl9CgkJcmV0dXJuIHJlc3VsdDsKCX0sCgoJc2V0U3R5bGVzOiBmdW5jdGlvbihzdHlsZXMpewoJCWZvciAodmFyIHN0eWxlIGluIHN0eWxlcykgdGhpcy5zZXRTdHlsZShzdHlsZSwgc3R5bGVzW3N0eWxlXSk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWdldFN0eWxlczogZnVuY3Rpb24oKXsKCQl2YXIgcmVzdWx0ID0ge307CgkJQXJyYXkuZmxhdHRlbihhcmd1bWVudHMpLmVhY2goZnVuY3Rpb24oa2V5KXsKCQkJcmVzdWx0W2tleV0gPSB0aGlzLmdldFN0eWxlKGtleSk7CgkJfSwgdGhpcyk7CgkJcmV0dXJuIHJlc3VsdDsKCX0KCn0pOwoKRWxlbWVudC5TdHlsZXMgPSB7CglsZWZ0OiAnQHB4JywgdG9wOiAnQHB4JywgYm90dG9tOiAnQHB4JywgcmlnaHQ6ICdAcHgnLAoJd2lkdGg6ICdAcHgnLCBoZWlnaHQ6ICdAcHgnLCBtYXhXaWR0aDogJ0BweCcsIG1heEhlaWdodDogJ0BweCcsIG1pbldpZHRoOiAnQHB4JywgbWluSGVpZ2h0OiAnQHB4JywKCWJhY2tncm91bmRDb2xvcjogJ3JnYihALCBALCBAKScsIGJhY2tncm91bmRQb3NpdGlvbjogJ0BweCBAcHgnLCBjb2xvcjogJ3JnYihALCBALCBAKScsCglmb250U2l6ZTogJ0BweCcsIGxldHRlclNwYWNpbmc6ICdAcHgnLCBsaW5lSGVpZ2h0OiAnQHB4JywgY2xpcDogJ3JlY3QoQHB4IEBweCBAcHggQHB4KScsCgltYXJnaW46ICdAcHggQHB4IEBweCBAcHgnLCBwYWRkaW5nOiAnQHB4IEBweCBAcHggQHB4JywgYm9yZGVyOiAnQHB4IEAgcmdiKEAsIEAsIEApIEBweCBAIHJnYihALCBALCBAKSBAcHggQCByZ2IoQCwgQCwgQCknLAoJYm9yZGVyV2lkdGg6ICdAcHggQHB4IEBweCBAcHgnLCBib3JkZXJTdHlsZTogJ0AgQCBAIEAnLCBib3JkZXJDb2xvcjogJ3JnYihALCBALCBAKSByZ2IoQCwgQCwgQCkgcmdiKEAsIEAsIEApIHJnYihALCBALCBAKScsCgl6SW5kZXg6ICdAJywgJ3pvb20nOiAnQCcsIGZvbnRXZWlnaHQ6ICdAJywgdGV4dEluZGVudDogJ0BweCcsIG9wYWNpdHk6ICdAJwp9OwoKLy88MS4zY29tcGF0PgoKRWxlbWVudC5pbXBsZW1lbnQoewoKCXNldE9wYWNpdHk6IGZ1bmN0aW9uKHZhbHVlKXsKCQlzZXRPcGFjaXR5KHRoaXMsIHZhbHVlKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJZ2V0T3BhY2l0eTogZnVuY3Rpb24oKXsKCQlyZXR1cm4gZ2V0T3BhY2l0eSh0aGlzKTsKCX0KCn0pOwoKRWxlbWVudC5Qcm9wZXJ0aWVzLm9wYWNpdHkgPSB7CgoJc2V0OiBmdW5jdGlvbihvcGFjaXR5KXsKCQlzZXRPcGFjaXR5KHRoaXMsIG9wYWNpdHkpOwoJCXNldFZpc2liaWxpdHkodGhpcywgb3BhY2l0eSk7Cgl9LAoKCWdldDogZnVuY3Rpb24oKXsKCQlyZXR1cm4gZ2V0T3BhY2l0eSh0aGlzKTsKCX0KCn07CgovLzwvMS4zY29tcGF0PgoKLy88MS4yY29tcGF0PgoKRWxlbWVudC5TdHlsZXMgPSBuZXcgSGFzaChFbGVtZW50LlN0eWxlcyk7CgovLzwvMS4yY29tcGF0PgoKRWxlbWVudC5TaG9ydFN0eWxlcyA9IHttYXJnaW46IHt9LCBwYWRkaW5nOiB7fSwgYm9yZGVyOiB7fSwgYm9yZGVyV2lkdGg6IHt9LCBib3JkZXJTdHlsZToge30sIGJvcmRlckNvbG9yOiB7fX07CgpbJ1RvcCcsICdSaWdodCcsICdCb3R0b20nLCAnTGVmdCddLmVhY2goZnVuY3Rpb24oZGlyZWN0aW9uKXsKCXZhciBTaG9ydCA9IEVsZW1lbnQuU2hvcnRTdHlsZXM7Cgl2YXIgQWxsID0gRWxlbWVudC5TdHlsZXM7CglbJ21hcmdpbicsICdwYWRkaW5nJ10uZWFjaChmdW5jdGlvbihzdHlsZSl7CgkJdmFyIHNkID0gc3R5bGUgKyBkaXJlY3Rpb247CgkJU2hvcnRbc3R5bGVdW3NkXSA9IEFsbFtzZF0gPSAnQHB4JzsKCX0pOwoJdmFyIGJkID0gJ2JvcmRlcicgKyBkaXJlY3Rpb247CglTaG9ydC5ib3JkZXJbYmRdID0gQWxsW2JkXSA9ICdAcHggQCByZ2IoQCwgQCwgQCknOwoJdmFyIGJkdyA9IGJkICsgJ1dpZHRoJywgYmRzID0gYmQgKyAnU3R5bGUnLCBiZGMgPSBiZCArICdDb2xvcic7CglTaG9ydFtiZF0gPSB7fTsKCVNob3J0LmJvcmRlcldpZHRoW2Jkd10gPSBTaG9ydFtiZF1bYmR3XSA9IEFsbFtiZHddID0gJ0BweCc7CglTaG9ydC5ib3JkZXJTdHlsZVtiZHNdID0gU2hvcnRbYmRdW2Jkc10gPSBBbGxbYmRzXSA9ICdAJzsKCVNob3J0LmJvcmRlckNvbG9yW2JkY10gPSBTaG9ydFtiZF1bYmRjXSA9IEFsbFtiZGNdID0gJ3JnYihALCBALCBAKSc7Cn0pOwoKfSkoKTsKCgovKgotLS0KCm5hbWU6IEVsZW1lbnQuRXZlbnQKCmRlc2NyaXB0aW9uOiBDb250YWlucyBFbGVtZW50IG1ldGhvZHMgZm9yIGRlYWxpbmcgd2l0aCBldmVudHMuIFRoaXMgZmlsZSBhbHNvIGluY2x1ZGVzIG1vdXNlZW50ZXIgYW5kIG1vdXNlbGVhdmUgY3VzdG9tIEVsZW1lbnQgRXZlbnRzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW0VsZW1lbnQsIEV2ZW50XQoKcHJvdmlkZXM6IEVsZW1lbnQuRXZlbnQKCi4uLgoqLwoKKGZ1bmN0aW9uKCl7CgpFbGVtZW50LlByb3BlcnRpZXMuZXZlbnRzID0ge3NldDogZnVuY3Rpb24oZXZlbnRzKXsKCXRoaXMuYWRkRXZlbnRzKGV2ZW50cyk7Cn19OwoKW0VsZW1lbnQsIFdpbmRvdywgRG9jdW1lbnRdLmludm9rZSgnaW1wbGVtZW50JywgewoKCWFkZEV2ZW50OiBmdW5jdGlvbih0eXBlLCBmbil7CgkJdmFyIGV2ZW50cyA9IHRoaXMucmV0cmlldmUoJ2V2ZW50cycsIHt9KTsKCQlpZiAoIWV2ZW50c1t0eXBlXSkgZXZlbnRzW3R5cGVdID0ge2tleXM6IFtdLCB2YWx1ZXM6IFtdfTsKCQlpZiAoZXZlbnRzW3R5cGVdLmtleXMuY29udGFpbnMoZm4pKSByZXR1cm4gdGhpczsKCQlldmVudHNbdHlwZV0ua2V5cy5wdXNoKGZuKTsKCQl2YXIgcmVhbFR5cGUgPSB0eXBlLAoJCQljdXN0b20gPSBFbGVtZW50LkV2ZW50c1t0eXBlXSwKCQkJY29uZGl0aW9uID0gZm4sCgkJCXNlbGYgPSB0aGlzOwoJCWlmIChjdXN0b20pewoJCQlpZiAoY3VzdG9tLm9uQWRkKSBjdXN0b20ub25BZGQuY2FsbCh0aGlzLCBmbiwgdHlwZSk7CgkJCWlmIChjdXN0b20uY29uZGl0aW9uKXsKCQkJCWNvbmRpdGlvbiA9IGZ1bmN0aW9uKGV2ZW50KXsKCQkJCQlpZiAoY3VzdG9tLmNvbmRpdGlvbi5jYWxsKHRoaXMsIGV2ZW50LCB0eXBlKSkgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpOwoJCQkJCXJldHVybiB0cnVlOwoJCQkJfTsKCQkJfQoJCQlpZiAoY3VzdG9tLmJhc2UpIHJlYWxUeXBlID0gRnVuY3Rpb24uZnJvbShjdXN0b20uYmFzZSkuY2FsbCh0aGlzLCB0eXBlKTsKCQl9CgkJdmFyIGRlZm4gPSBmdW5jdGlvbigpewoJCQlyZXR1cm4gZm4uY2FsbChzZWxmKTsKCQl9OwoJCXZhciBuYXRpdmVFdmVudCA9IEVsZW1lbnQuTmF0aXZlRXZlbnRzW3JlYWxUeXBlXTsKCQlpZiAobmF0aXZlRXZlbnQpewoJCQlpZiAobmF0aXZlRXZlbnQgPT0gMil7CgkJCQlkZWZuID0gZnVuY3Rpb24oZXZlbnQpewoJCQkJCWV2ZW50ID0gbmV3IERPTUV2ZW50KGV2ZW50LCBzZWxmLmdldFdpbmRvdygpKTsKCQkJCQlpZiAoY29uZGl0aW9uLmNhbGwoc2VsZiwgZXZlbnQpID09PSBmYWxzZSkgZXZlbnQuc3RvcCgpOwoJCQkJfTsKCQkJfQoJCQl0aGlzLmFkZExpc3RlbmVyKHJlYWxUeXBlLCBkZWZuLCBhcmd1bWVudHNbMl0pOwoJCX0KCQlldmVudHNbdHlwZV0udmFsdWVzLnB1c2goZGVmbik7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXJlbW92ZUV2ZW50OiBmdW5jdGlvbih0eXBlLCBmbil7CgkJdmFyIGV2ZW50cyA9IHRoaXMucmV0cmlldmUoJ2V2ZW50cycpOwoJCWlmICghZXZlbnRzIHx8ICFldmVudHNbdHlwZV0pIHJldHVybiB0aGlzOwoJCXZhciBsaXN0ID0gZXZlbnRzW3R5cGVdOwoJCXZhciBpbmRleCA9IGxpc3Qua2V5cy5pbmRleE9mKGZuKTsKCQlpZiAoaW5kZXggPT0gLTEpIHJldHVybiB0aGlzOwoJCXZhciB2YWx1ZSA9IGxpc3QudmFsdWVzW2luZGV4XTsKCQlkZWxldGUgbGlzdC5rZXlzW2luZGV4XTsKCQlkZWxldGUgbGlzdC52YWx1ZXNbaW5kZXhdOwoJCXZhciBjdXN0b20gPSBFbGVtZW50LkV2ZW50c1t0eXBlXTsKCQlpZiAoY3VzdG9tKXsKCQkJaWYgKGN1c3RvbS5vblJlbW92ZSkgY3VzdG9tLm9uUmVtb3ZlLmNhbGwodGhpcywgZm4sIHR5cGUpOwoJCQlpZiAoY3VzdG9tLmJhc2UpIHR5cGUgPSBGdW5jdGlvbi5mcm9tKGN1c3RvbS5iYXNlKS5jYWxsKHRoaXMsIHR5cGUpOwoJCX0KCQlyZXR1cm4gKEVsZW1lbnQuTmF0aXZlRXZlbnRzW3R5cGVdKSA/IHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgdmFsdWUsIGFyZ3VtZW50c1syXSkgOiB0aGlzOwoJfSwKCglhZGRFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cyl7CgkJZm9yICh2YXIgZXZlbnQgaW4gZXZlbnRzKSB0aGlzLmFkZEV2ZW50KGV2ZW50LCBldmVudHNbZXZlbnRdKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJcmVtb3ZlRXZlbnRzOiBmdW5jdGlvbihldmVudHMpewoJCXZhciB0eXBlOwoJCWlmICh0eXBlT2YoZXZlbnRzKSA9PSAnb2JqZWN0Jyl7CgkJCWZvciAodHlwZSBpbiBldmVudHMpIHRoaXMucmVtb3ZlRXZlbnQodHlwZSwgZXZlbnRzW3R5cGVdKTsKCQkJcmV0dXJuIHRoaXM7CgkJfQoJCXZhciBhdHRhY2hlZCA9IHRoaXMucmV0cmlldmUoJ2V2ZW50cycpOwoJCWlmICghYXR0YWNoZWQpIHJldHVybiB0aGlzOwoJCWlmICghZXZlbnRzKXsKCQkJZm9yICh0eXBlIGluIGF0dGFjaGVkKSB0aGlzLnJlbW92ZUV2ZW50cyh0eXBlKTsKCQkJdGhpcy5lbGltaW5hdGUoJ2V2ZW50cycpOwoJCX0gZWxzZSBpZiAoYXR0YWNoZWRbZXZlbnRzXSl7CgkJCWF0dGFjaGVkW2V2ZW50c10ua2V5cy5lYWNoKGZ1bmN0aW9uKGZuKXsKCQkJCXRoaXMucmVtb3ZlRXZlbnQoZXZlbnRzLCBmbik7CgkJCX0sIHRoaXMpOwoJCQlkZWxldGUgYXR0YWNoZWRbZXZlbnRzXTsKCQl9CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWZpcmVFdmVudDogZnVuY3Rpb24odHlwZSwgYXJncywgZGVsYXkpewoJCXZhciBldmVudHMgPSB0aGlzLnJldHJpZXZlKCdldmVudHMnKTsKCQlpZiAoIWV2ZW50cyB8fCAhZXZlbnRzW3R5cGVdKSByZXR1cm4gdGhpczsKCQlhcmdzID0gQXJyYXkuZnJvbShhcmdzKTsKCgkJZXZlbnRzW3R5cGVdLmtleXMuZWFjaChmdW5jdGlvbihmbil7CgkJCWlmIChkZWxheSkgZm4uZGVsYXkoZGVsYXksIHRoaXMsIGFyZ3MpOwoJCQllbHNlIGZuLmFwcGx5KHRoaXMsIGFyZ3MpOwoJCX0sIHRoaXMpOwoJCXJldHVybiB0aGlzOwoJfSwKCgljbG9uZUV2ZW50czogZnVuY3Rpb24oZnJvbSwgdHlwZSl7CgkJZnJvbSA9IGRvY3VtZW50LmlkKGZyb20pOwoJCXZhciBldmVudHMgPSBmcm9tLnJldHJpZXZlKCdldmVudHMnKTsKCQlpZiAoIWV2ZW50cykgcmV0dXJuIHRoaXM7CgkJaWYgKCF0eXBlKXsKCQkJZm9yICh2YXIgZXZlbnRUeXBlIGluIGV2ZW50cykgdGhpcy5jbG9uZUV2ZW50cyhmcm9tLCBldmVudFR5cGUpOwoJCX0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdKXsKCQkJZXZlbnRzW3R5cGVdLmtleXMuZWFjaChmdW5jdGlvbihmbil7CgkJCQl0aGlzLmFkZEV2ZW50KHR5cGUsIGZuKTsKCQkJfSwgdGhpcyk7CgkJfQoJCXJldHVybiB0aGlzOwoJfQoKfSk7CgpFbGVtZW50Lk5hdGl2ZUV2ZW50cyA9IHsKCWNsaWNrOiAyLCBkYmxjbGljazogMiwgbW91c2V1cDogMiwgbW91c2Vkb3duOiAyLCBjb250ZXh0bWVudTogMiwgLy9tb3VzZSBidXR0b25zCgltb3VzZXdoZWVsOiAyLCBET01Nb3VzZVNjcm9sbDogMiwgLy9tb3VzZSB3aGVlbAoJbW91c2VvdmVyOiAyLCBtb3VzZW91dDogMiwgbW91c2Vtb3ZlOiAyLCBzZWxlY3RzdGFydDogMiwgc2VsZWN0ZW5kOiAyLCAvL21vdXNlIG1vdmVtZW50CglrZXlkb3duOiAyLCBrZXlwcmVzczogMiwga2V5dXA6IDIsIC8va2V5Ym9hcmQKCW9yaWVudGF0aW9uY2hhbmdlOiAyLCAvLyBtb2JpbGUKCXRvdWNoc3RhcnQ6IDIsIHRvdWNobW92ZTogMiwgdG91Y2hlbmQ6IDIsIHRvdWNoY2FuY2VsOiAyLCAvLyB0b3VjaAoJZ2VzdHVyZXN0YXJ0OiAyLCBnZXN0dXJlY2hhbmdlOiAyLCBnZXN0dXJlZW5kOiAyLCAvLyBnZXN0dXJlCglmb2N1czogMiwgYmx1cjogMiwgY2hhbmdlOiAyLCByZXNldDogMiwgc2VsZWN0OiAyLCBzdWJtaXQ6IDIsIHBhc3RlOiAyLCBpbnB1dDogMiwgLy9mb3JtIGVsZW1lbnRzCglsb2FkOiAyLCB1bmxvYWQ6IDEsIGJlZm9yZXVubG9hZDogMiwgcmVzaXplOiAxLCBtb3ZlOiAxLCBET01Db250ZW50TG9hZGVkOiAxLCByZWFkeXN0YXRlY2hhbmdlOiAxLCAvL3dpbmRvdwoJZXJyb3I6IDEsIGFib3J0OiAxLCBzY3JvbGw6IDEgLy9taXNjCn07Cgp2YXIgY2hlY2sgPSBmdW5jdGlvbihldmVudCl7Cgl2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7CglpZiAocmVsYXRlZCA9PSBudWxsKSByZXR1cm4gdHJ1ZTsKCWlmICghcmVsYXRlZCkgcmV0dXJuIGZhbHNlOwoJcmV0dXJuIChyZWxhdGVkICE9IHRoaXMgJiYgcmVsYXRlZC5wcmVmaXggIT0gJ3h1bCcgJiYgdHlwZU9mKHRoaXMpICE9ICdkb2N1bWVudCcgJiYgIXRoaXMuY29udGFpbnMocmVsYXRlZCkpOwp9OwoKRWxlbWVudC5FdmVudHMgPSB7CgoJbW91c2VlbnRlcjogewoJCWJhc2U6ICdtb3VzZW92ZXInLAoJCWNvbmRpdGlvbjogY2hlY2sKCX0sCgoJbW91c2VsZWF2ZTogewoJCWJhc2U6ICdtb3VzZW91dCcsCgkJY29uZGl0aW9uOiBjaGVjawoJfSwKCgltb3VzZXdoZWVsOiB7CgkJYmFzZTogKEJyb3dzZXIuZmlyZWZveCkgPyAnRE9NTW91c2VTY3JvbGwnIDogJ21vdXNld2hlZWwnCgl9Cgp9OwoKLyo8bHRJRTk+Ki8KaWYgKCF3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcil7CglFbGVtZW50Lk5hdGl2ZUV2ZW50cy5wcm9wZXJ0eWNoYW5nZSA9IDI7CglFbGVtZW50LkV2ZW50cy5jaGFuZ2UgPSB7CgkJYmFzZTogZnVuY3Rpb24oKXsKCQkJdmFyIHR5cGUgPSB0aGlzLnR5cGU7CgkJCXJldHVybiAodGhpcy5nZXQoJ3RhZycpID09ICdpbnB1dCcgJiYgKHR5cGUgPT0gJ3JhZGlvJyB8fCB0eXBlID09ICdjaGVja2JveCcpKSA/ICdwcm9wZXJ0eWNoYW5nZScgOiAnY2hhbmdlJwoJCX0sCgkJY29uZGl0aW9uOiBmdW5jdGlvbihldmVudCl7CgkJCXJldHVybiAhISh0aGlzLnR5cGUgIT0gJ3JhZGlvJyB8fCB0aGlzLmNoZWNrZWQpOwoJCX0KCX0KfQovKjwvbHRJRTk+Ki8KCi8vPDEuMmNvbXBhdD4KCkVsZW1lbnQuRXZlbnRzID0gbmV3IEhhc2goRWxlbWVudC5FdmVudHMpOwoKLy88LzEuMmNvbXBhdD4KCn0pKCk7CgoKLyoKLS0tCgpuYW1lOiBFbGVtZW50LkRlbGVnYXRpb24KCmRlc2NyaXB0aW9uOiBFeHRlbmRzIHRoZSBFbGVtZW50IG5hdGl2ZSBvYmplY3QgdG8gaW5jbHVkZSB0aGUgZGVsZWdhdGUgbWV0aG9kIGZvciBtb3JlIGVmZmljaWVudCBldmVudCBtYW5hZ2VtZW50LgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW0VsZW1lbnQuRXZlbnRdCgpwcm92aWRlczogW0VsZW1lbnQuRGVsZWdhdGlvbl0KCi4uLgoqLwoKKGZ1bmN0aW9uKCl7Cgp2YXIgZXZlbnRMaXN0ZW5lclN1cHBvcnQgPSAhIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyOwoKRWxlbWVudC5OYXRpdmVFdmVudHMuZm9jdXNpbiA9IEVsZW1lbnQuTmF0aXZlRXZlbnRzLmZvY3Vzb3V0ID0gMjsKCnZhciBidWJibGVVcCA9IGZ1bmN0aW9uKHNlbGYsIG1hdGNoLCBmbiwgZXZlbnQsIHRhcmdldCl7Cgl3aGlsZSAodGFyZ2V0ICYmIHRhcmdldCAhPSBzZWxmKXsKCQlpZiAobWF0Y2godGFyZ2V0LCBldmVudCkpIHJldHVybiBmbi5jYWxsKHRhcmdldCwgZXZlbnQsIHRhcmdldCk7CgkJdGFyZ2V0ID0gZG9jdW1lbnQuaWQodGFyZ2V0LnBhcmVudE5vZGUpOwoJfQp9OwoKdmFyIG1hcCA9IHsKCW1vdXNlZW50ZXI6IHsKCQliYXNlOiAnbW91c2VvdmVyJwoJfSwKCW1vdXNlbGVhdmU6IHsKCQliYXNlOiAnbW91c2VvdXQnCgl9LAoJZm9jdXM6IHsKCQliYXNlOiAnZm9jdXMnICsgKGV2ZW50TGlzdGVuZXJTdXBwb3J0ID8gJycgOiAnaW4nKSwKCQljYXB0dXJlOiB0cnVlCgl9LAoJYmx1cjogewoJCWJhc2U6IGV2ZW50TGlzdGVuZXJTdXBwb3J0ID8gJ2JsdXInIDogJ2ZvY3Vzb3V0JywKCQljYXB0dXJlOiB0cnVlCgl9Cn07CgovKjxsdElFOT4qLwp2YXIgX2tleSA9ICckZGVsZWdhdGlvbjonOwp2YXIgZm9ybU9ic2VydmVyID0gZnVuY3Rpb24odHlwZSl7CgoJcmV0dXJuIHsKCgkJYmFzZTogJ2ZvY3VzaW4nLAoKCQlyZW1vdmU6IGZ1bmN0aW9uKHNlbGYsIHVpZCl7CgkJCXZhciBsaXN0ID0gc2VsZi5yZXRyaWV2ZShfa2V5ICsgdHlwZSArICdsaXN0ZW5lcnMnLCB7fSlbdWlkXTsKCQkJaWYgKGxpc3QgJiYgbGlzdC5mb3JtcykgZm9yICh2YXIgaSA9IGxpc3QuZm9ybXMubGVuZ3RoOyBpLS07KXsKCQkJCWxpc3QuZm9ybXNbaV0ucmVtb3ZlRXZlbnQodHlwZSwgbGlzdC5mbnNbaV0pOwoJCQl9CgkJfSwKCgkJbGlzdGVuOiBmdW5jdGlvbihzZWxmLCBtYXRjaCwgZm4sIGV2ZW50LCB0YXJnZXQsIHVpZCl7CgkJCXZhciBmb3JtID0gKHRhcmdldC5nZXQoJ3RhZycpID09ICdmb3JtJykgPyB0YXJnZXQgOiBldmVudC50YXJnZXQuZ2V0UGFyZW50KCdmb3JtJyk7CgkJCWlmICghZm9ybSkgcmV0dXJuOwoKCQkJdmFyIGxpc3RlbmVycyA9IHNlbGYucmV0cmlldmUoX2tleSArIHR5cGUgKyAnbGlzdGVuZXJzJywge30pLAoJCQkJbGlzdGVuZXIgPSBsaXN0ZW5lcnNbdWlkXSB8fCB7Zm9ybXM6IFtdLCBmbnM6IFtdfSwKCQkJCWZvcm1zID0gbGlzdGVuZXIuZm9ybXMsIGZucyA9IGxpc3RlbmVyLmZuczsKCgkJCWlmIChmb3Jtcy5pbmRleE9mKGZvcm0pICE9IC0xKSByZXR1cm47CgkJCWZvcm1zLnB1c2goZm9ybSk7CgoJCQl2YXIgX2ZuID0gZnVuY3Rpb24oZXZlbnQpewoJCQkJYnViYmxlVXAoc2VsZiwgbWF0Y2gsIGZuLCBldmVudCwgdGFyZ2V0KTsKCQkJfTsKCQkJZm9ybS5hZGRFdmVudCh0eXBlLCBfZm4pOwoJCQlmbnMucHVzaChfZm4pOwoKCQkJbGlzdGVuZXJzW3VpZF0gPSBsaXN0ZW5lcjsKCQkJc2VsZi5zdG9yZShfa2V5ICsgdHlwZSArICdsaXN0ZW5lcnMnLCBsaXN0ZW5lcnMpOwoJCX0KCX07Cn07Cgp2YXIgaW5wdXRPYnNlcnZlciA9IGZ1bmN0aW9uKHR5cGUpewoJcmV0dXJuIHsKCQliYXNlOiAnZm9jdXNpbicsCgkJbGlzdGVuOiBmdW5jdGlvbihzZWxmLCBtYXRjaCwgZm4sIGV2ZW50LCB0YXJnZXQpewoJCQl2YXIgZXZlbnRzID0ge2JsdXI6IGZ1bmN0aW9uKCl7CgkJCQl0aGlzLnJlbW92ZUV2ZW50cyhldmVudHMpOwoJCQl9fTsKCQkJZXZlbnRzW3R5cGVdID0gZnVuY3Rpb24oZXZlbnQpewoJCQkJYnViYmxlVXAoc2VsZiwgbWF0Y2gsIGZuLCBldmVudCwgdGFyZ2V0KTsKCQkJfTsKCQkJZXZlbnQudGFyZ2V0LmFkZEV2ZW50cyhldmVudHMpOwoJCX0KCX07Cn07CgppZiAoIWV2ZW50TGlzdGVuZXJTdXBwb3J0KSBPYmplY3QuYXBwZW5kKG1hcCwgewoJc3VibWl0OiBmb3JtT2JzZXJ2ZXIoJ3N1Ym1pdCcpLAoJcmVzZXQ6IGZvcm1PYnNlcnZlcigncmVzZXQnKSwKCWNoYW5nZTogaW5wdXRPYnNlcnZlcignY2hhbmdlJyksCglzZWxlY3Q6IGlucHV0T2JzZXJ2ZXIoJ3NlbGVjdCcpCn0pOwovKjwvbHRJRTk+Ki8KCnZhciBwcm90byA9IEVsZW1lbnQucHJvdG90eXBlLAoJYWRkRXZlbnQgPSBwcm90by5hZGRFdmVudCwKCXJlbW92ZUV2ZW50ID0gcHJvdG8ucmVtb3ZlRXZlbnQ7Cgp2YXIgcmVsYXkgPSBmdW5jdGlvbihvbGQsIG1ldGhvZCl7CglyZXR1cm4gZnVuY3Rpb24odHlwZSwgZm4sIHVzZUNhcHR1cmUpewoJCWlmICh0eXBlLmluZGV4T2YoJzpyZWxheScpID09IC0xKSByZXR1cm4gb2xkLmNhbGwodGhpcywgdHlwZSwgZm4sIHVzZUNhcHR1cmUpOwoJCXZhciBwYXJzZWQgPSBTbGljay5wYXJzZSh0eXBlKS5leHByZXNzaW9uc1swXVswXTsKCQlpZiAocGFyc2VkLnBzZXVkb3NbMF0ua2V5ICE9ICdyZWxheScpIHJldHVybiBvbGQuY2FsbCh0aGlzLCB0eXBlLCBmbiwgdXNlQ2FwdHVyZSk7CgkJdmFyIG5ld1R5cGUgPSBwYXJzZWQudGFnOwoJCXBhcnNlZC5wc2V1ZG9zLnNsaWNlKDEpLmVhY2goZnVuY3Rpb24ocHNldWRvKXsKCQkJbmV3VHlwZSArPSAnOicgKyBwc2V1ZG8ua2V5ICsgKHBzZXVkby52YWx1ZSA/ICcoJyArIHBzZXVkby52YWx1ZSArICcpJyA6ICcnKTsKCQl9KTsKCQlvbGQuY2FsbCh0aGlzLCB0eXBlLCBmbik7CgkJcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIG5ld1R5cGUsIHBhcnNlZC5wc2V1ZG9zWzBdLnZhbHVlLCBmbik7Cgl9Owp9OwoKdmFyIGRlbGVnYXRpb24gPSB7CgoJYWRkRXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIG1hdGNoLCBmbil7CgkJdmFyIHN0b3JhZ2UgPSB0aGlzLnJldHJpZXZlKCckZGVsZWdhdGVzJywge30pLCBzdG9yZWQgPSBzdG9yYWdlW3R5cGVdOwoJCWlmIChzdG9yZWQpIGZvciAodmFyIF91aWQgaW4gc3RvcmVkKXsKCQkJaWYgKHN0b3JlZFtfdWlkXS5mbiA9PSBmbiAmJiBzdG9yZWRbX3VpZF0ubWF0Y2ggPT0gbWF0Y2gpIHJldHVybiB0aGlzOwoJCX0KCgkJdmFyIF90eXBlID0gdHlwZSwgX21hdGNoID0gbWF0Y2gsIF9mbiA9IGZuLCBfbWFwID0gbWFwW3R5cGVdIHx8IHt9OwoJCXR5cGUgPSBfbWFwLmJhc2UgfHwgX3R5cGU7CgoJCW1hdGNoID0gZnVuY3Rpb24odGFyZ2V0KXsKCQkJcmV0dXJuIFNsaWNrLm1hdGNoKHRhcmdldCwgX21hdGNoKTsKCQl9OwoKCQl2YXIgZWxlbWVudEV2ZW50ID0gRWxlbWVudC5FdmVudHNbX3R5cGVdOwoJCWlmIChlbGVtZW50RXZlbnQgJiYgZWxlbWVudEV2ZW50LmNvbmRpdGlvbil7CgkJCXZhciBfX21hdGNoID0gbWF0Y2gsIGNvbmRpdGlvbiA9IGVsZW1lbnRFdmVudC5jb25kaXRpb247CgkJCW1hdGNoID0gZnVuY3Rpb24odGFyZ2V0LCBldmVudCl7CgkJCQlyZXR1cm4gX19tYXRjaCh0YXJnZXQsIGV2ZW50KSAmJiBjb25kaXRpb24uY2FsbCh0YXJnZXQsIGV2ZW50LCB0eXBlKTsKCQkJfTsKCQl9CgoJCXZhciBzZWxmID0gdGhpcywgdWlkID0gU3RyaW5nLnVuaXF1ZUlEKCk7CgkJdmFyIGRlbGVnYXRvciA9IF9tYXAubGlzdGVuID8gZnVuY3Rpb24oZXZlbnQsIHRhcmdldCl7CgkJCWlmICghdGFyZ2V0ICYmIGV2ZW50ICYmIGV2ZW50LnRhcmdldCkgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0OwoJCQlpZiAodGFyZ2V0KSBfbWFwLmxpc3RlbihzZWxmLCBtYXRjaCwgZm4sIGV2ZW50LCB0YXJnZXQsIHVpZCk7CgkJfSA6IGZ1bmN0aW9uKGV2ZW50LCB0YXJnZXQpewoJCQlpZiAoIXRhcmdldCAmJiBldmVudCAmJiBldmVudC50YXJnZXQpIHRhcmdldCA9IGV2ZW50LnRhcmdldDsKCQkJaWYgKHRhcmdldCkgYnViYmxlVXAoc2VsZiwgbWF0Y2gsIGZuLCBldmVudCwgdGFyZ2V0KTsKCQl9OwoKCQlpZiAoIXN0b3JlZCkgc3RvcmVkID0ge307CgkJc3RvcmVkW3VpZF0gPSB7CgkJCW1hdGNoOiBfbWF0Y2gsCgkJCWZuOiBfZm4sCgkJCWRlbGVnYXRvcjogZGVsZWdhdG9yCgkJfTsKCQlzdG9yYWdlW190eXBlXSA9IHN0b3JlZDsKCQlyZXR1cm4gYWRkRXZlbnQuY2FsbCh0aGlzLCB0eXBlLCBkZWxlZ2F0b3IsIF9tYXAuY2FwdHVyZSk7Cgl9LAoKCXJlbW92ZUV2ZW50OiBmdW5jdGlvbih0eXBlLCBtYXRjaCwgZm4sIF91aWQpewoJCXZhciBzdG9yYWdlID0gdGhpcy5yZXRyaWV2ZSgnJGRlbGVnYXRlcycsIHt9KSwgc3RvcmVkID0gc3RvcmFnZVt0eXBlXTsKCQlpZiAoIXN0b3JlZCkgcmV0dXJuIHRoaXM7CgoJCWlmIChfdWlkKXsKCQkJdmFyIF90eXBlID0gdHlwZSwgZGVsZWdhdG9yID0gc3RvcmVkW191aWRdLmRlbGVnYXRvciwgX21hcCA9IG1hcFt0eXBlXSB8fCB7fTsKCQkJdHlwZSA9IF9tYXAuYmFzZSB8fCBfdHlwZTsKCQkJaWYgKF9tYXAucmVtb3ZlKSBfbWFwLnJlbW92ZSh0aGlzLCBfdWlkKTsKCQkJZGVsZXRlIHN0b3JlZFtfdWlkXTsKCQkJc3RvcmFnZVtfdHlwZV0gPSBzdG9yZWQ7CgkJCXJldHVybiByZW1vdmVFdmVudC5jYWxsKHRoaXMsIHR5cGUsIGRlbGVnYXRvcik7CgkJfQoKCQl2YXIgX191aWQsIHM7CgkJaWYgKGZuKSBmb3IgKF9fdWlkIGluIHN0b3JlZCl7CgkJCXMgPSBzdG9yZWRbX191aWRdOwoJCQlpZiAocy5tYXRjaCA9PSBtYXRjaCAmJiBzLmZuID09IGZuKSByZXR1cm4gZGVsZWdhdGlvbi5yZW1vdmVFdmVudC5jYWxsKHRoaXMsIHR5cGUsIG1hdGNoLCBmbiwgX191aWQpOwoJCX0gZWxzZSBmb3IgKF9fdWlkIGluIHN0b3JlZCl7CgkJCXMgPSBzdG9yZWRbX191aWRdOwoJCQlpZiAocy5tYXRjaCA9PSBtYXRjaCkgZGVsZWdhdGlvbi5yZW1vdmVFdmVudC5jYWxsKHRoaXMsIHR5cGUsIG1hdGNoLCBzLmZuLCBfX3VpZCk7CgkJfQoJCXJldHVybiB0aGlzOwoJfQoKfTsKCltFbGVtZW50LCBXaW5kb3csIERvY3VtZW50XS5pbnZva2UoJ2ltcGxlbWVudCcsIHsKCWFkZEV2ZW50OiByZWxheShhZGRFdmVudCwgZGVsZWdhdGlvbi5hZGRFdmVudCksCglyZW1vdmVFdmVudDogcmVsYXkocmVtb3ZlRXZlbnQsIGRlbGVnYXRpb24ucmVtb3ZlRXZlbnQpCn0pOwoKfSkoKTsKCgovKgotLS0KCm5hbWU6IEVsZW1lbnQuRGltZW5zaW9ucwoKZGVzY3JpcHRpb246IENvbnRhaW5zIG1ldGhvZHMgdG8gd29yayB3aXRoIHNpemUsIHNjcm9sbCwgb3IgcG9zaXRpb25pbmcgb2YgRWxlbWVudHMgYW5kIHRoZSB3aW5kb3cgb2JqZWN0LgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjcmVkaXRzOgogIC0gRWxlbWVudCBwb3NpdGlvbmluZyBiYXNlZCBvbiB0aGUgW3Fvb3hkb29dKGh0dHA6Ly9xb294ZG9vLm9yZy8pIGNvZGUgYW5kIHNtYXJ0IGJyb3dzZXIgZml4ZXMsIFtMR1BMIExpY2Vuc2VdKGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9sZ3BsLmh0bWwpLgogIC0gVmlld3BvcnQgZGltZW5zaW9ucyBiYXNlZCBvbiBbWVVJXShodHRwOi8vZGV2ZWxvcGVyLnlhaG9vLmNvbS95dWkvKSBjb2RlLCBbQlNEIExpY2Vuc2VdKGh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9saWNlbnNlLmh0bWwpLgoKcmVxdWlyZXM6IFtFbGVtZW50LCBFbGVtZW50LlN0eWxlXQoKcHJvdmlkZXM6IFtFbGVtZW50LkRpbWVuc2lvbnNdCgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwKCWNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzAnOwplbGVtZW50LmFwcGVuZENoaWxkKGNoaWxkKTsKdmFyIGJyb2tlbk9mZnNldFBhcmVudCA9IChjaGlsZC5vZmZzZXRQYXJlbnQgPT09IGVsZW1lbnQpOwplbGVtZW50ID0gY2hpbGQgPSBudWxsOwoKdmFyIGlzT2Zmc2V0ID0gZnVuY3Rpb24oZWwpewoJcmV0dXJuIHN0eWxlU3RyaW5nKGVsLCAncG9zaXRpb24nKSAhPSAnc3RhdGljJyB8fCBpc0JvZHkoZWwpOwp9OwoKdmFyIGlzT2Zmc2V0U3RhdGljID0gZnVuY3Rpb24oZWwpewoJcmV0dXJuIGlzT2Zmc2V0KGVsKSB8fCAoL14oPzp0YWJsZXx0ZHx0aCkkL2kpLnRlc3QoZWwudGFnTmFtZSk7Cn07CgpFbGVtZW50LmltcGxlbWVudCh7CgoJc2Nyb2xsVG86IGZ1bmN0aW9uKHgsIHkpewoJCWlmIChpc0JvZHkodGhpcykpewoJCQl0aGlzLmdldFdpbmRvdygpLnNjcm9sbFRvKHgsIHkpOwoJCX0gZWxzZSB7CgkJCXRoaXMuc2Nyb2xsTGVmdCA9IHg7CgkJCXRoaXMuc2Nyb2xsVG9wID0geTsKCQl9CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWdldFNpemU6IGZ1bmN0aW9uKCl7CgkJaWYgKGlzQm9keSh0aGlzKSkgcmV0dXJuIHRoaXMuZ2V0V2luZG93KCkuZ2V0U2l6ZSgpOwoJCXJldHVybiB7eDogdGhpcy5vZmZzZXRXaWR0aCwgeTogdGhpcy5vZmZzZXRIZWlnaHR9OwoJfSwKCglnZXRTY3JvbGxTaXplOiBmdW5jdGlvbigpewoJCWlmIChpc0JvZHkodGhpcykpIHJldHVybiB0aGlzLmdldFdpbmRvdygpLmdldFNjcm9sbFNpemUoKTsKCQlyZXR1cm4ge3g6IHRoaXMuc2Nyb2xsV2lkdGgsIHk6IHRoaXMuc2Nyb2xsSGVpZ2h0fTsKCX0sCgoJZ2V0U2Nyb2xsOiBmdW5jdGlvbigpewoJCWlmIChpc0JvZHkodGhpcykpIHJldHVybiB0aGlzLmdldFdpbmRvdygpLmdldFNjcm9sbCgpOwoJCXJldHVybiB7eDogdGhpcy5zY3JvbGxMZWZ0LCB5OiB0aGlzLnNjcm9sbFRvcH07Cgl9LAoKCWdldFNjcm9sbHM6IGZ1bmN0aW9uKCl7CgkJdmFyIGVsZW1lbnQgPSB0aGlzLnBhcmVudE5vZGUsIHBvc2l0aW9uID0ge3g6IDAsIHk6IDB9OwoJCXdoaWxlIChlbGVtZW50ICYmICFpc0JvZHkoZWxlbWVudCkpewoJCQlwb3NpdGlvbi54ICs9IGVsZW1lbnQuc2Nyb2xsTGVmdDsKCQkJcG9zaXRpb24ueSArPSBlbGVtZW50LnNjcm9sbFRvcDsKCQkJZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKCQl9CgkJcmV0dXJuIHBvc2l0aW9uOwoJfSwKCglnZXRPZmZzZXRQYXJlbnQ6IGJyb2tlbk9mZnNldFBhcmVudCA/IGZ1bmN0aW9uKCl7CgkJdmFyIGVsZW1lbnQgPSB0aGlzOwoJCWlmIChpc0JvZHkoZWxlbWVudCkgfHwgc3R5bGVTdHJpbmcoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT0gJ2ZpeGVkJykgcmV0dXJuIG51bGw7CgoJCXZhciBpc09mZnNldENoZWNrID0gKHN0eWxlU3RyaW5nKGVsZW1lbnQsICdwb3NpdGlvbicpID09ICdzdGF0aWMnKSA/IGlzT2Zmc2V0U3RhdGljIDogaXNPZmZzZXQ7CgkJd2hpbGUgKChlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlKSl7CgkJCWlmIChpc09mZnNldENoZWNrKGVsZW1lbnQpKSByZXR1cm4gZWxlbWVudDsKCQl9CgkJcmV0dXJuIG51bGw7Cgl9IDogZnVuY3Rpb24oKXsKCQl2YXIgZWxlbWVudCA9IHRoaXM7CgkJaWYgKGlzQm9keShlbGVtZW50KSB8fCBzdHlsZVN0cmluZyhlbGVtZW50LCAncG9zaXRpb24nKSA9PSAnZml4ZWQnKSByZXR1cm4gbnVsbDsKCgkJdHJ5IHsKCQkJcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50OwoJCX0gY2F0Y2goZSkge30KCQlyZXR1cm4gbnVsbDsKCX0sCgoJZ2V0T2Zmc2V0czogZnVuY3Rpb24oKXsKCQlpZiAodGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgIUJyb3dzZXIuUGxhdGZvcm0uaW9zKXsKCQkJdmFyIGJvdW5kID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwKCQkJCWh0bWwgPSBkb2N1bWVudC5pZCh0aGlzLmdldERvY3VtZW50KCkuZG9jdW1lbnRFbGVtZW50KSwKCQkJCWh0bWxTY3JvbGwgPSBodG1sLmdldFNjcm9sbCgpLAoJCQkJZWxlbVNjcm9sbHMgPSB0aGlzLmdldFNjcm9sbHMoKSwKCQkJCWlzRml4ZWQgPSAoc3R5bGVTdHJpbmcodGhpcywgJ3Bvc2l0aW9uJykgPT0gJ2ZpeGVkJyk7CgoJCQlyZXR1cm4gewoJCQkJeDogYm91bmQubGVmdC50b0ludCgpICsgZWxlbVNjcm9sbHMueCArICgoaXNGaXhlZCkgPyAwIDogaHRtbFNjcm9sbC54KSAtIGh0bWwuY2xpZW50TGVmdCwKCQkJCXk6IGJvdW5kLnRvcC50b0ludCgpICArIGVsZW1TY3JvbGxzLnkgKyAoKGlzRml4ZWQpID8gMCA6IGh0bWxTY3JvbGwueSkgLSBodG1sLmNsaWVudFRvcAoJCQl9OwoJCX0KCgkJdmFyIGVsZW1lbnQgPSB0aGlzLCBwb3NpdGlvbiA9IHt4OiAwLCB5OiAwfTsKCQlpZiAoaXNCb2R5KHRoaXMpKSByZXR1cm4gcG9zaXRpb247CgoJCXdoaWxlIChlbGVtZW50ICYmICFpc0JvZHkoZWxlbWVudCkpewoJCQlwb3NpdGlvbi54ICs9IGVsZW1lbnQub2Zmc2V0TGVmdDsKCQkJcG9zaXRpb24ueSArPSBlbGVtZW50Lm9mZnNldFRvcDsKCgkJCWlmIChCcm93c2VyLmZpcmVmb3gpewoJCQkJaWYgKCFib3JkZXJCb3goZWxlbWVudCkpewoJCQkJCXBvc2l0aW9uLnggKz0gbGVmdEJvcmRlcihlbGVtZW50KTsKCQkJCQlwb3NpdGlvbi55ICs9IHRvcEJvcmRlcihlbGVtZW50KTsKCQkJCX0KCQkJCXZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CgkJCQlpZiAocGFyZW50ICYmIHN0eWxlU3RyaW5nKHBhcmVudCwgJ292ZXJmbG93JykgIT0gJ3Zpc2libGUnKXsKCQkJCQlwb3NpdGlvbi54ICs9IGxlZnRCb3JkZXIocGFyZW50KTsKCQkJCQlwb3NpdGlvbi55ICs9IHRvcEJvcmRlcihwYXJlbnQpOwoJCQkJfQoJCQl9IGVsc2UgaWYgKGVsZW1lbnQgIT0gdGhpcyAmJiBCcm93c2VyLnNhZmFyaSl7CgkJCQlwb3NpdGlvbi54ICs9IGxlZnRCb3JkZXIoZWxlbWVudCk7CgkJCQlwb3NpdGlvbi55ICs9IHRvcEJvcmRlcihlbGVtZW50KTsKCQkJfQoKCQkJZWxlbWVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50OwoJCX0KCQlpZiAoQnJvd3Nlci5maXJlZm94ICYmICFib3JkZXJCb3godGhpcykpewoJCQlwb3NpdGlvbi54IC09IGxlZnRCb3JkZXIodGhpcyk7CgkJCXBvc2l0aW9uLnkgLT0gdG9wQm9yZGVyKHRoaXMpOwoJCX0KCQlyZXR1cm4gcG9zaXRpb247Cgl9LAoKCWdldFBvc2l0aW9uOiBmdW5jdGlvbihyZWxhdGl2ZSl7CgkJdmFyIG9mZnNldCA9IHRoaXMuZ2V0T2Zmc2V0cygpLAoJCQlzY3JvbGwgPSB0aGlzLmdldFNjcm9sbHMoKTsKCQl2YXIgcG9zaXRpb24gPSB7CgkJCXg6IG9mZnNldC54IC0gc2Nyb2xsLngsCgkJCXk6IG9mZnNldC55IC0gc2Nyb2xsLnkKCQl9OwoKCQlpZiAocmVsYXRpdmUgJiYgKHJlbGF0aXZlID0gZG9jdW1lbnQuaWQocmVsYXRpdmUpKSl7CgkJCXZhciByZWxhdGl2ZVBvc2l0aW9uID0gcmVsYXRpdmUuZ2V0UG9zaXRpb24oKTsKCQkJcmV0dXJuIHt4OiBwb3NpdGlvbi54IC0gcmVsYXRpdmVQb3NpdGlvbi54IC0gbGVmdEJvcmRlcihyZWxhdGl2ZSksIHk6IHBvc2l0aW9uLnkgLSByZWxhdGl2ZVBvc2l0aW9uLnkgLSB0b3BCb3JkZXIocmVsYXRpdmUpfTsKCQl9CgkJcmV0dXJuIHBvc2l0aW9uOwoJfSwKCglnZXRDb29yZGluYXRlczogZnVuY3Rpb24oZWxlbWVudCl7CgkJaWYgKGlzQm9keSh0aGlzKSkgcmV0dXJuIHRoaXMuZ2V0V2luZG93KCkuZ2V0Q29vcmRpbmF0ZXMoKTsKCQl2YXIgcG9zaXRpb24gPSB0aGlzLmdldFBvc2l0aW9uKGVsZW1lbnQpLAoJCQlzaXplID0gdGhpcy5nZXRTaXplKCk7CgkJdmFyIG9iaiA9IHsKCQkJbGVmdDogcG9zaXRpb24ueCwKCQkJdG9wOiBwb3NpdGlvbi55LAoJCQl3aWR0aDogc2l6ZS54LAoJCQloZWlnaHQ6IHNpemUueQoJCX07CgkJb2JqLnJpZ2h0ID0gb2JqLmxlZnQgKyBvYmoud2lkdGg7CgkJb2JqLmJvdHRvbSA9IG9iai50b3AgKyBvYmouaGVpZ2h0OwoJCXJldHVybiBvYmo7Cgl9LAoKCWNvbXB1dGVQb3NpdGlvbjogZnVuY3Rpb24ob2JqKXsKCQlyZXR1cm4gewoJCQlsZWZ0OiBvYmoueCAtIHN0eWxlTnVtYmVyKHRoaXMsICdtYXJnaW4tbGVmdCcpLAoJCQl0b3A6IG9iai55IC0gc3R5bGVOdW1iZXIodGhpcywgJ21hcmdpbi10b3AnKQoJCX07Cgl9LAoKCXNldFBvc2l0aW9uOiBmdW5jdGlvbihvYmopewoJCXJldHVybiB0aGlzLnNldFN0eWxlcyh0aGlzLmNvbXB1dGVQb3NpdGlvbihvYmopKTsKCX0KCn0pOwoKCltEb2N1bWVudCwgV2luZG93XS5pbnZva2UoJ2ltcGxlbWVudCcsIHsKCglnZXRTaXplOiBmdW5jdGlvbigpewoJCXZhciBkb2MgPSBnZXRDb21wYXRFbGVtZW50KHRoaXMpOwoJCXJldHVybiB7eDogZG9jLmNsaWVudFdpZHRoLCB5OiBkb2MuY2xpZW50SGVpZ2h0fTsKCX0sCgoJZ2V0U2Nyb2xsOiBmdW5jdGlvbigpewoJCXZhciB3aW4gPSB0aGlzLmdldFdpbmRvdygpLCBkb2MgPSBnZXRDb21wYXRFbGVtZW50KHRoaXMpOwoJCXJldHVybiB7eDogd2luLnBhZ2VYT2Zmc2V0IHx8IGRvYy5zY3JvbGxMZWZ0LCB5OiB3aW4ucGFnZVlPZmZzZXQgfHwgZG9jLnNjcm9sbFRvcH07Cgl9LAoKCWdldFNjcm9sbFNpemU6IGZ1bmN0aW9uKCl7CgkJdmFyIGRvYyA9IGdldENvbXBhdEVsZW1lbnQodGhpcyksCgkJCW1pbiA9IHRoaXMuZ2V0U2l6ZSgpLAoJCQlib2R5ID0gdGhpcy5nZXREb2N1bWVudCgpLmJvZHk7CgoJCXJldHVybiB7eDogTWF0aC5tYXgoZG9jLnNjcm9sbFdpZHRoLCBib2R5LnNjcm9sbFdpZHRoLCBtaW4ueCksIHk6IE1hdGgubWF4KGRvYy5zY3JvbGxIZWlnaHQsIGJvZHkuc2Nyb2xsSGVpZ2h0LCBtaW4ueSl9OwoJfSwKCglnZXRQb3NpdGlvbjogZnVuY3Rpb24oKXsKCQlyZXR1cm4ge3g6IDAsIHk6IDB9OwoJfSwKCglnZXRDb29yZGluYXRlczogZnVuY3Rpb24oKXsKCQl2YXIgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpOwoJCXJldHVybiB7dG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IHNpemUueSwgcmlnaHQ6IHNpemUueCwgaGVpZ2h0OiBzaXplLnksIHdpZHRoOiBzaXplLnh9OwoJfQoKfSk7CgovLyBwcml2YXRlIG1ldGhvZHMKCnZhciBzdHlsZVN0cmluZyA9IEVsZW1lbnQuZ2V0Q29tcHV0ZWRTdHlsZTsKCmZ1bmN0aW9uIHN0eWxlTnVtYmVyKGVsZW1lbnQsIHN0eWxlKXsKCXJldHVybiBzdHlsZVN0cmluZyhlbGVtZW50LCBzdHlsZSkudG9JbnQoKSB8fCAwOwp9CgpmdW5jdGlvbiBib3JkZXJCb3goZWxlbWVudCl7CglyZXR1cm4gc3R5bGVTdHJpbmcoZWxlbWVudCwgJy1tb3otYm94LXNpemluZycpID09ICdib3JkZXItYm94JzsKfQoKZnVuY3Rpb24gdG9wQm9yZGVyKGVsZW1lbnQpewoJcmV0dXJuIHN0eWxlTnVtYmVyKGVsZW1lbnQsICdib3JkZXItdG9wLXdpZHRoJyk7Cn0KCmZ1bmN0aW9uIGxlZnRCb3JkZXIoZWxlbWVudCl7CglyZXR1cm4gc3R5bGVOdW1iZXIoZWxlbWVudCwgJ2JvcmRlci1sZWZ0LXdpZHRoJyk7Cn0KCmZ1bmN0aW9uIGlzQm9keShlbGVtZW50KXsKCXJldHVybiAoL14oPzpib2R5fGh0bWwpJC9pKS50ZXN0KGVsZW1lbnQudGFnTmFtZSk7Cn0KCmZ1bmN0aW9uIGdldENvbXBhdEVsZW1lbnQoZWxlbWVudCl7Cgl2YXIgZG9jID0gZWxlbWVudC5nZXREb2N1bWVudCgpOwoJcmV0dXJuICghZG9jLmNvbXBhdE1vZGUgfHwgZG9jLmNvbXBhdE1vZGUgPT0gJ0NTUzFDb21wYXQnKSA/IGRvYy5odG1sIDogZG9jLmJvZHk7Cn0KCn0pKCk7CgovL2FsaWFzZXMKRWxlbWVudC5hbGlhcyh7cG9zaXRpb246ICdzZXRQb3NpdGlvbid9KTsgLy9jb21wYXRhYmlsaXR5CgpbV2luZG93LCBEb2N1bWVudCwgRWxlbWVudF0uaW52b2tlKCdpbXBsZW1lbnQnLCB7CgoJZ2V0SGVpZ2h0OiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzLmdldFNpemUoKS55OwoJfSwKCglnZXRXaWR0aDogZnVuY3Rpb24oKXsKCQlyZXR1cm4gdGhpcy5nZXRTaXplKCkueDsKCX0sCgoJZ2V0U2Nyb2xsVG9wOiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzLmdldFNjcm9sbCgpLnk7Cgl9LAoKCWdldFNjcm9sbExlZnQ6IGZ1bmN0aW9uKCl7CgkJcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsKCkueDsKCX0sCgoJZ2V0U2Nyb2xsSGVpZ2h0OiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzLmdldFNjcm9sbFNpemUoKS55OwoJfSwKCglnZXRTY3JvbGxXaWR0aDogZnVuY3Rpb24oKXsKCQlyZXR1cm4gdGhpcy5nZXRTY3JvbGxTaXplKCkueDsKCX0sCgoJZ2V0VG9wOiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzLmdldFBvc2l0aW9uKCkueTsKCX0sCgoJZ2V0TGVmdDogZnVuY3Rpb24oKXsKCQlyZXR1cm4gdGhpcy5nZXRQb3NpdGlvbigpLng7Cgl9Cgp9KTsKCgovKgotLS0KCm5hbWU6IEZ4CgpkZXNjcmlwdGlvbjogQ29udGFpbnMgdGhlIGJhc2ljIGFuaW1hdGlvbiBsb2dpYyB0byBiZSBleHRlbmRlZCBieSBhbGwgb3RoZXIgRnggQ2xhc3Nlcy4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtDaGFpbiwgRXZlbnRzLCBPcHRpb25zXQoKcHJvdmlkZXM6IEZ4CgouLi4KKi8KCihmdW5jdGlvbigpewoKdmFyIEZ4ID0gdGhpcy5GeCA9IG5ldyBDbGFzcyh7CgoJSW1wbGVtZW50czogW0NoYWluLCBFdmVudHMsIE9wdGlvbnNdLAoKCW9wdGlvbnM6IHsKCQkvKgoJCW9uU3RhcnQ6IG5pbCwKCQlvbkNhbmNlbDogbmlsLAoJCW9uQ29tcGxldGU6IG5pbCwKCQkqLwoJCWZwczogNjAsCgkJdW5pdDogZmFsc2UsCgkJZHVyYXRpb246IDUwMCwKCQlmcmFtZXM6IG51bGwsCgkJZnJhbWVTa2lwOiB0cnVlLAoJCWxpbms6ICdpZ25vcmUnCgl9LAoKCWluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpewoJCXRoaXMuc3ViamVjdCA9IHRoaXMuc3ViamVjdCB8fCB0aGlzOwoJCXRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTsKCX0sCgoJZ2V0VHJhbnNpdGlvbjogZnVuY3Rpb24oKXsKCQlyZXR1cm4gZnVuY3Rpb24ocCl7CgkJCXJldHVybiAtKE1hdGguY29zKE1hdGguUEkgKiBwKSAtIDEpIC8gMjsKCQl9OwoJfSwKCglzdGVwOiBmdW5jdGlvbihub3cpewoJCWlmICh0aGlzLm9wdGlvbnMuZnJhbWVTa2lwKXsKCQkJdmFyIGRpZmYgPSAodGhpcy50aW1lICE9IG51bGwpID8gKG5vdyAtIHRoaXMudGltZSkgOiAwLCBmcmFtZXMgPSBkaWZmIC8gdGhpcy5mcmFtZUludGVydmFsOwoJCQl0aGlzLnRpbWUgPSBub3c7CgkJCXRoaXMuZnJhbWUgKz0gZnJhbWVzOwoJCX0gZWxzZSB7CgkJCXRoaXMuZnJhbWUrKzsKCQl9CgoJCWlmICh0aGlzLmZyYW1lIDwgdGhpcy5mcmFtZXMpewoJCQl2YXIgZGVsdGEgPSB0aGlzLnRyYW5zaXRpb24odGhpcy5mcmFtZSAvIHRoaXMuZnJhbWVzKTsKCQkJdGhpcy5zZXQodGhpcy5jb21wdXRlKHRoaXMuZnJvbSwgdGhpcy50bywgZGVsdGEpKTsKCQl9IGVsc2UgewoJCQl0aGlzLmZyYW1lID0gdGhpcy5mcmFtZXM7CgkJCXRoaXMuc2V0KHRoaXMuY29tcHV0ZSh0aGlzLmZyb20sIHRoaXMudG8sIDEpKTsKCQkJdGhpcy5zdG9wKCk7CgkJfQoJfSwKCglzZXQ6IGZ1bmN0aW9uKG5vdyl7CgkJcmV0dXJuIG5vdzsKCX0sCgoJY29tcHV0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKCQlyZXR1cm4gRnguY29tcHV0ZShmcm9tLCB0bywgZGVsdGEpOwoJfSwKCgljaGVjazogZnVuY3Rpb24oKXsKCQlpZiAoIXRoaXMuaXNSdW5uaW5nKCkpIHJldHVybiB0cnVlOwoJCXN3aXRjaCAodGhpcy5vcHRpb25zLmxpbmspewoJCQljYXNlICdjYW5jZWwnOiB0aGlzLmNhbmNlbCgpOyByZXR1cm4gdHJ1ZTsKCQkJY2FzZSAnY2hhaW4nOiB0aGlzLmNoYWluKHRoaXMuY2FsbGVyLnBhc3MoYXJndW1lbnRzLCB0aGlzKSk7IHJldHVybiBmYWxzZTsKCQl9CgkJcmV0dXJuIGZhbHNlOwoJfSwKCglzdGFydDogZnVuY3Rpb24oZnJvbSwgdG8pewoJCWlmICghdGhpcy5jaGVjayhmcm9tLCB0bykpIHJldHVybiB0aGlzOwoJCXRoaXMuZnJvbSA9IGZyb207CgkJdGhpcy50byA9IHRvOwoJCXRoaXMuZnJhbWUgPSAodGhpcy5vcHRpb25zLmZyYW1lU2tpcCkgPyAwIDogLTE7CgkJdGhpcy50aW1lID0gbnVsbDsKCQl0aGlzLnRyYW5zaXRpb24gPSB0aGlzLmdldFRyYW5zaXRpb24oKTsKCQl2YXIgZnJhbWVzID0gdGhpcy5vcHRpb25zLmZyYW1lcywgZnBzID0gdGhpcy5vcHRpb25zLmZwcywgZHVyYXRpb24gPSB0aGlzLm9wdGlvbnMuZHVyYXRpb247CgkJdGhpcy5kdXJhdGlvbiA9IEZ4LkR1cmF0aW9uc1tkdXJhdGlvbl0gfHwgZHVyYXRpb24udG9JbnQoKTsKCQl0aGlzLmZyYW1lSW50ZXJ2YWwgPSAxMDAwIC8gZnBzOwoJCXRoaXMuZnJhbWVzID0gZnJhbWVzIHx8IE1hdGgucm91bmQodGhpcy5kdXJhdGlvbiAvIHRoaXMuZnJhbWVJbnRlcnZhbCk7CgkJdGhpcy5maXJlRXZlbnQoJ3N0YXJ0JywgdGhpcy5zdWJqZWN0KTsKCQlwdXNoSW5zdGFuY2UuY2FsbCh0aGlzLCBmcHMpOwoJCXJldHVybiB0aGlzOwoJfSwKCglzdG9wOiBmdW5jdGlvbigpewoJCWlmICh0aGlzLmlzUnVubmluZygpKXsKCQkJdGhpcy50aW1lID0gbnVsbDsKCQkJcHVsbEluc3RhbmNlLmNhbGwodGhpcywgdGhpcy5vcHRpb25zLmZwcyk7CgkJCWlmICh0aGlzLmZyYW1lcyA9PSB0aGlzLmZyYW1lKXsKCQkJCXRoaXMuZmlyZUV2ZW50KCdjb21wbGV0ZScsIHRoaXMuc3ViamVjdCk7CgkJCQlpZiAoIXRoaXMuY2FsbENoYWluKCkpIHRoaXMuZmlyZUV2ZW50KCdjaGFpbkNvbXBsZXRlJywgdGhpcy5zdWJqZWN0KTsKCQkJfSBlbHNlIHsKCQkJCXRoaXMuZmlyZUV2ZW50KCdzdG9wJywgdGhpcy5zdWJqZWN0KTsKCQkJfQoJCX0KCQlyZXR1cm4gdGhpczsKCX0sCgoJY2FuY2VsOiBmdW5jdGlvbigpewoJCWlmICh0aGlzLmlzUnVubmluZygpKXsKCQkJdGhpcy50aW1lID0gbnVsbDsKCQkJcHVsbEluc3RhbmNlLmNhbGwodGhpcywgdGhpcy5vcHRpb25zLmZwcyk7CgkJCXRoaXMuZnJhbWUgPSB0aGlzLmZyYW1lczsKCQkJdGhpcy5maXJlRXZlbnQoJ2NhbmNlbCcsIHRoaXMuc3ViamVjdCkuY2xlYXJDaGFpbigpOwoJCX0KCQlyZXR1cm4gdGhpczsKCX0sCgoJcGF1c2U6IGZ1bmN0aW9uKCl7CgkJaWYgKHRoaXMuaXNSdW5uaW5nKCkpewoJCQl0aGlzLnRpbWUgPSBudWxsOwoJCQlwdWxsSW5zdGFuY2UuY2FsbCh0aGlzLCB0aGlzLm9wdGlvbnMuZnBzKTsKCQl9CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXJlc3VtZTogZnVuY3Rpb24oKXsKCQlpZiAoKHRoaXMuZnJhbWUgPCB0aGlzLmZyYW1lcykgJiYgIXRoaXMuaXNSdW5uaW5nKCkpIHB1c2hJbnN0YW5jZS5jYWxsKHRoaXMsIHRoaXMub3B0aW9ucy5mcHMpOwoJCXJldHVybiB0aGlzOwoJfSwKCglpc1J1bm5pbmc6IGZ1bmN0aW9uKCl7CgkJdmFyIGxpc3QgPSBpbnN0YW5jZXNbdGhpcy5vcHRpb25zLmZwc107CgkJcmV0dXJuIGxpc3QgJiYgbGlzdC5jb250YWlucyh0aGlzKTsKCX0KCn0pOwoKRnguY29tcHV0ZSA9IGZ1bmN0aW9uKGZyb20sIHRvLCBkZWx0YSl7CglyZXR1cm4gKHRvIC0gZnJvbSkgKiBkZWx0YSArIGZyb207Cn07CgpGeC5EdXJhdGlvbnMgPSB7J3Nob3J0JzogMjUwLCAnbm9ybWFsJzogNTAwLCAnbG9uZyc6IDEwMDB9OwoKLy8gZ2xvYmFsIHRpbWVycwoKdmFyIGluc3RhbmNlcyA9IHt9LCB0aW1lcnMgPSB7fTsKCnZhciBsb29wID0gZnVuY3Rpb24oKXsKCXZhciBub3cgPSBEYXRlLm5vdygpOwoJZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoOyBpLS07KXsKCQl2YXIgaW5zdGFuY2UgPSB0aGlzW2ldOwoJCWlmIChpbnN0YW5jZSkgaW5zdGFuY2Uuc3RlcChub3cpOwoJfQp9OwoKdmFyIHB1c2hJbnN0YW5jZSA9IGZ1bmN0aW9uKGZwcyl7Cgl2YXIgbGlzdCA9IGluc3RhbmNlc1tmcHNdIHx8IChpbnN0YW5jZXNbZnBzXSA9IFtdKTsKCWxpc3QucHVzaCh0aGlzKTsKCWlmICghdGltZXJzW2Zwc10pIHRpbWVyc1tmcHNdID0gbG9vcC5wZXJpb2RpY2FsKE1hdGgucm91bmQoMTAwMCAvIGZwcyksIGxpc3QpOwp9OwoKdmFyIHB1bGxJbnN0YW5jZSA9IGZ1bmN0aW9uKGZwcyl7Cgl2YXIgbGlzdCA9IGluc3RhbmNlc1tmcHNdOwoJaWYgKGxpc3QpewoJCWxpc3QuZXJhc2UodGhpcyk7CgkJaWYgKCFsaXN0Lmxlbmd0aCAmJiB0aW1lcnNbZnBzXSl7CgkJCWRlbGV0ZSBpbnN0YW5jZXNbZnBzXTsKCQkJdGltZXJzW2Zwc10gPSBjbGVhckludGVydmFsKHRpbWVyc1tmcHNdKTsKCQl9Cgl9Cn07Cgp9KSgpOwoKCi8qCi0tLQoKbmFtZTogRnguQ1NTCgpkZXNjcmlwdGlvbjogQ29udGFpbnMgdGhlIENTUyBhbmltYXRpb24gbG9naWMuIFVzZWQgYnkgRnguVHdlZW4sIEZ4Lk1vcnBoLCBGeC5FbGVtZW50cy4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtGeCwgRWxlbWVudC5TdHlsZV0KCnByb3ZpZGVzOiBGeC5DU1MKCi4uLgoqLwoKRnguQ1NTID0gbmV3IENsYXNzKHsKCglFeHRlbmRzOiBGeCwKCgkvL3ByZXBhcmVzIHRoZSBiYXNlIGZyb20vdG8gb2JqZWN0CgoJcHJlcGFyZTogZnVuY3Rpb24oZWxlbWVudCwgcHJvcGVydHksIHZhbHVlcyl7CgkJdmFsdWVzID0gQXJyYXkuZnJvbSh2YWx1ZXMpOwoJCWlmICh2YWx1ZXNbMV0gPT0gbnVsbCl7CgkJCXZhbHVlc1sxXSA9IHZhbHVlc1swXTsKCQkJdmFsdWVzWzBdID0gZWxlbWVudC5nZXRTdHlsZShwcm9wZXJ0eSk7CgkJfQoJCXZhciBwYXJzZWQgPSB2YWx1ZXMubWFwKHRoaXMucGFyc2UpOwoJCXJldHVybiB7ZnJvbTogcGFyc2VkWzBdLCB0bzogcGFyc2VkWzFdfTsKCX0sCgoJLy9wYXJzZXMgYSB2YWx1ZSBpbnRvIGFuIGFycmF5CgoJcGFyc2U6IGZ1bmN0aW9uKHZhbHVlKXsKCQl2YWx1ZSA9IEZ1bmN0aW9uLmZyb20odmFsdWUpKCk7CgkJdmFsdWUgPSAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSA/IHZhbHVlLnNwbGl0KCcgJykgOiBBcnJheS5mcm9tKHZhbHVlKTsKCQlyZXR1cm4gdmFsdWUubWFwKGZ1bmN0aW9uKHZhbCl7CgkJCXZhbCA9IFN0cmluZyh2YWwpOwoJCQl2YXIgZm91bmQgPSBmYWxzZTsKCQkJT2JqZWN0LmVhY2goRnguQ1NTLlBhcnNlcnMsIGZ1bmN0aW9uKHBhcnNlciwga2V5KXsKCQkJCWlmIChmb3VuZCkgcmV0dXJuOwoJCQkJdmFyIHBhcnNlZCA9IHBhcnNlci5wYXJzZSh2YWwpOwoJCQkJaWYgKHBhcnNlZCB8fCBwYXJzZWQgPT09IDApIGZvdW5kID0ge3ZhbHVlOiBwYXJzZWQsIHBhcnNlcjogcGFyc2VyfTsKCQkJfSk7CgkJCWZvdW5kID0gZm91bmQgfHwge3ZhbHVlOiB2YWwsIHBhcnNlcjogRnguQ1NTLlBhcnNlcnMuU3RyaW5nfTsKCQkJcmV0dXJuIGZvdW5kOwoJCX0pOwoJfSwKCgkvL2NvbXB1dGVzIGJ5IGEgZnJvbSBhbmQgdG8gcHJlcGFyZWQgb2JqZWN0cywgdXNpbmcgdGhlaXIgcGFyc2Vycy4KCgljb21wdXRlOiBmdW5jdGlvbihmcm9tLCB0bywgZGVsdGEpewoJCXZhciBjb21wdXRlZCA9IFtdOwoJCShNYXRoLm1pbihmcm9tLmxlbmd0aCwgdG8ubGVuZ3RoKSkudGltZXMoZnVuY3Rpb24oaSl7CgkJCWNvbXB1dGVkLnB1c2goe3ZhbHVlOiBmcm9tW2ldLnBhcnNlci5jb21wdXRlKGZyb21baV0udmFsdWUsIHRvW2ldLnZhbHVlLCBkZWx0YSksIHBhcnNlcjogZnJvbVtpXS5wYXJzZXJ9KTsKCQl9KTsKCQljb21wdXRlZC4kZmFtaWx5ID0gRnVuY3Rpb24uZnJvbSgnZng6Y3NzOnZhbHVlJyk7CgkJcmV0dXJuIGNvbXB1dGVkOwoJfSwKCgkvL3NlcnZlcyB0aGUgdmFsdWUgYXMgc2V0dGFibGUKCglzZXJ2ZTogZnVuY3Rpb24odmFsdWUsIHVuaXQpewoJCWlmICh0eXBlT2YodmFsdWUpICE9ICdmeDpjc3M6dmFsdWUnKSB2YWx1ZSA9IHRoaXMucGFyc2UodmFsdWUpOwoJCXZhciByZXR1cm5lZCA9IFtdOwoJCXZhbHVlLmVhY2goZnVuY3Rpb24oYml0KXsKCQkJcmV0dXJuZWQgPSByZXR1cm5lZC5jb25jYXQoYml0LnBhcnNlci5zZXJ2ZShiaXQudmFsdWUsIHVuaXQpKTsKCQl9KTsKCQlyZXR1cm4gcmV0dXJuZWQ7Cgl9LAoKCS8vcmVuZGVycyB0aGUgY2hhbmdlIHRvIGFuIGVsZW1lbnQKCglyZW5kZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCl7CgkJZWxlbWVudC5zZXRTdHlsZShwcm9wZXJ0eSwgdGhpcy5zZXJ2ZSh2YWx1ZSwgdW5pdCkpOwoJfSwKCgkvL3NlYXJjaGVzIGluc2lkZSB0aGUgcGFnZSBjc3MgdG8gZmluZCB0aGUgdmFsdWVzIGZvciBhIHNlbGVjdG9yCgoJc2VhcmNoOiBmdW5jdGlvbihzZWxlY3Rvcil7CgkJaWYgKEZ4LkNTUy5DYWNoZVtzZWxlY3Rvcl0pIHJldHVybiBGeC5DU1MuQ2FjaGVbc2VsZWN0b3JdOwoJCXZhciB0byA9IHt9LCBzZWxlY3RvclRlc3QgPSBuZXcgUmVnRXhwKCdeJyArIHNlbGVjdG9yLmVzY2FwZVJlZ0V4cCgpICsgJyQnKTsKCQlBcnJheS5lYWNoKGRvY3VtZW50LnN0eWxlU2hlZXRzLCBmdW5jdGlvbihzaGVldCwgail7CgkJCXZhciBocmVmID0gc2hlZXQuaHJlZjsKCQkJaWYgKGhyZWYgJiYgaHJlZi5jb250YWlucygnOi8vJykgJiYgIWhyZWYuY29udGFpbnMoZG9jdW1lbnQuZG9tYWluKSkgcmV0dXJuOwoJCQl2YXIgcnVsZXMgPSBzaGVldC5ydWxlcyB8fCBzaGVldC5jc3NSdWxlczsKCQkJQXJyYXkuZWFjaChydWxlcywgZnVuY3Rpb24ocnVsZSwgaSl7CgkJCQlpZiAoIXJ1bGUuc3R5bGUpIHJldHVybjsKCQkJCXZhciBzZWxlY3RvclRleHQgPSAocnVsZS5zZWxlY3RvclRleHQpID8gcnVsZS5zZWxlY3RvclRleHQucmVwbGFjZSgvXlx3Ky8sIGZ1bmN0aW9uKG0pewoJCQkJCXJldHVybiBtLnRvTG93ZXJDYXNlKCk7CgkJCQl9KSA6IG51bGw7CgkJCQlpZiAoIXNlbGVjdG9yVGV4dCB8fCAhc2VsZWN0b3JUZXN0LnRlc3Qoc2VsZWN0b3JUZXh0KSkgcmV0dXJuOwoJCQkJT2JqZWN0LmVhY2goRWxlbWVudC5TdHlsZXMsIGZ1bmN0aW9uKHZhbHVlLCBzdHlsZSl7CgkJCQkJaWYgKCFydWxlLnN0eWxlW3N0eWxlXSB8fCBFbGVtZW50LlNob3J0U3R5bGVzW3N0eWxlXSkgcmV0dXJuOwoJCQkJCXZhbHVlID0gU3RyaW5nKHJ1bGUuc3R5bGVbc3R5bGVdKTsKCQkJCQl0b1tzdHlsZV0gPSAoKC9ecmdiLykudGVzdCh2YWx1ZSkpID8gdmFsdWUucmdiVG9IZXgoKSA6IHZhbHVlOwoJCQkJfSk7CgkJCX0pOwoJCX0pOwoJCXJldHVybiBGeC5DU1MuQ2FjaGVbc2VsZWN0b3JdID0gdG87Cgl9Cgp9KTsKCkZ4LkNTUy5DYWNoZSA9IHt9OwoKRnguQ1NTLlBhcnNlcnMgPSB7CgoJQ29sb3I6IHsKCQlwYXJzZTogZnVuY3Rpb24odmFsdWUpewoJCQlpZiAodmFsdWUubWF0Y2goL14jWzAtOWEtZl17Myw2fSQvaSkpIHJldHVybiB2YWx1ZS5oZXhUb1JnYih0cnVlKTsKCQkJcmV0dXJuICgodmFsdWUgPSB2YWx1ZS5tYXRjaCgvKFxkKyksXHMqKFxkKyksXHMqKFxkKykvKSkpID8gW3ZhbHVlWzFdLCB2YWx1ZVsyXSwgdmFsdWVbM11dIDogZmFsc2U7CgkJfSwKCQljb21wdXRlOiBmdW5jdGlvbihmcm9tLCB0bywgZGVsdGEpewoJCQlyZXR1cm4gZnJvbS5tYXAoZnVuY3Rpb24odmFsdWUsIGkpewoJCQkJcmV0dXJuIE1hdGgucm91bmQoRnguY29tcHV0ZShmcm9tW2ldLCB0b1tpXSwgZGVsdGEpKTsKCQkJfSk7CgkJfSwKCQlzZXJ2ZTogZnVuY3Rpb24odmFsdWUpewoJCQlyZXR1cm4gdmFsdWUubWFwKE51bWJlcik7CgkJfQoJfSwKCglOdW1iZXI6IHsKCQlwYXJzZTogcGFyc2VGbG9hdCwKCQljb21wdXRlOiBGeC5jb21wdXRlLAoJCXNlcnZlOiBmdW5jdGlvbih2YWx1ZSwgdW5pdCl7CgkJCXJldHVybiAodW5pdCkgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZTsKCQl9Cgl9LAoKCVN0cmluZzogewoJCXBhcnNlOiBGdW5jdGlvbi5mcm9tKGZhbHNlKSwKCQljb21wdXRlOiBmdW5jdGlvbih6ZXJvLCBvbmUpewoJCQlyZXR1cm4gb25lOwoJCX0sCgkJc2VydmU6IGZ1bmN0aW9uKHplcm8pewoJCQlyZXR1cm4gemVybzsKCQl9Cgl9Cgp9OwoKLy88MS4yY29tcGF0PgoKRnguQ1NTLlBhcnNlcnMgPSBuZXcgSGFzaChGeC5DU1MuUGFyc2Vycyk7CgovLzwvMS4yY29tcGF0PgoKCi8qCi0tLQoKbmFtZTogRnguVHdlZW4KCmRlc2NyaXB0aW9uOiBGb3JtZXJseSBGeC5TdHlsZSwgZWZmZWN0IHRvIHRyYW5zaXRpb24gYW55IENTUyBwcm9wZXJ0eSBmb3IgYW4gZWxlbWVudC4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IEZ4LkNTUwoKcHJvdmlkZXM6IFtGeC5Ud2VlbiwgRWxlbWVudC5mYWRlLCBFbGVtZW50LmhpZ2hsaWdodF0KCi4uLgoqLwoKRnguVHdlZW4gPSBuZXcgQ2xhc3MoewoKCUV4dGVuZHM6IEZ4LkNTUywKCglpbml0aWFsaXplOiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKXsKCQl0aGlzLmVsZW1lbnQgPSB0aGlzLnN1YmplY3QgPSBkb2N1bWVudC5pZChlbGVtZW50KTsKCQl0aGlzLnBhcmVudChvcHRpb25zKTsKCX0sCgoJc2V0OiBmdW5jdGlvbihwcm9wZXJ0eSwgbm93KXsKCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKXsKCQkJbm93ID0gcHJvcGVydHk7CgkJCXByb3BlcnR5ID0gdGhpcy5wcm9wZXJ0eSB8fCB0aGlzLm9wdGlvbnMucHJvcGVydHk7CgkJfQoJCXRoaXMucmVuZGVyKHRoaXMuZWxlbWVudCwgcHJvcGVydHksIG5vdywgdGhpcy5vcHRpb25zLnVuaXQpOwoJCXJldHVybiB0aGlzOwoJfSwKCglzdGFydDogZnVuY3Rpb24ocHJvcGVydHksIGZyb20sIHRvKXsKCQlpZiAoIXRoaXMuY2hlY2socHJvcGVydHksIGZyb20sIHRvKSkgcmV0dXJuIHRoaXM7CgkJdmFyIGFyZ3MgPSBBcnJheS5mbGF0dGVuKGFyZ3VtZW50cyk7CgkJdGhpcy5wcm9wZXJ0eSA9IHRoaXMub3B0aW9ucy5wcm9wZXJ0eSB8fCBhcmdzLnNoaWZ0KCk7CgkJdmFyIHBhcnNlZCA9IHRoaXMucHJlcGFyZSh0aGlzLmVsZW1lbnQsIHRoaXMucHJvcGVydHksIGFyZ3MpOwoJCXJldHVybiB0aGlzLnBhcmVudChwYXJzZWQuZnJvbSwgcGFyc2VkLnRvKTsKCX0KCn0pOwoKRWxlbWVudC5Qcm9wZXJ0aWVzLnR3ZWVuID0gewoKCXNldDogZnVuY3Rpb24ob3B0aW9ucyl7CgkJdGhpcy5nZXQoJ3R3ZWVuJykuY2FuY2VsKCkuc2V0T3B0aW9ucyhvcHRpb25zKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJZ2V0OiBmdW5jdGlvbigpewoJCXZhciB0d2VlbiA9IHRoaXMucmV0cmlldmUoJ3R3ZWVuJyk7CgkJaWYgKCF0d2Vlbil7CgkJCXR3ZWVuID0gbmV3IEZ4LlR3ZWVuKHRoaXMsIHtsaW5rOiAnY2FuY2VsJ30pOwoJCQl0aGlzLnN0b3JlKCd0d2VlbicsIHR3ZWVuKTsKCQl9CgkJcmV0dXJuIHR3ZWVuOwoJfQoKfTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCgl0d2VlbjogZnVuY3Rpb24ocHJvcGVydHksIGZyb20sIHRvKXsKCQl0aGlzLmdldCgndHdlZW4nKS5zdGFydChwcm9wZXJ0eSwgZnJvbSwgdG8pOwoJCXJldHVybiB0aGlzOwoJfSwKCglmYWRlOiBmdW5jdGlvbihob3cpewoJCXZhciBmYWRlID0gdGhpcy5nZXQoJ3R3ZWVuJyksIG1ldGhvZCwgdG8sIHRvZ2dsZTsKCQlpZiAoaG93ID09IG51bGwpIGhvdyA9ICd0b2dnbGUnOwoJCXN3aXRjaCAoaG93KXsKCQkJY2FzZSAnaW4nOiBtZXRob2QgPSAnc3RhcnQnOyB0byA9IDE7IGJyZWFrOwoJCQljYXNlICdvdXQnOiBtZXRob2QgPSAnc3RhcnQnOyB0byA9IDA7IGJyZWFrOwoJCQljYXNlICdzaG93JzogbWV0aG9kID0gJ3NldCc7IHRvID0gMTsgYnJlYWs7CgkJCWNhc2UgJ2hpZGUnOiBtZXRob2QgPSAnc2V0JzsgdG8gPSAwOyBicmVhazsKCQkJY2FzZSAndG9nZ2xlJzoKCQkJCXZhciBmbGFnID0gdGhpcy5yZXRyaWV2ZSgnZmFkZTpmbGFnJywgdGhpcy5nZXRTdHlsZSgnb3BhY2l0eScpID09IDEpOwoJCQkJbWV0aG9kID0gJ3N0YXJ0JzsKCQkJCXRvID0gZmxhZyA/IDAgOiAxOwoJCQkJdGhpcy5zdG9yZSgnZmFkZTpmbGFnJywgIWZsYWcpOwoJCQkJdG9nZ2xlID0gdHJ1ZTsKCQkJYnJlYWs7CgkJCWRlZmF1bHQ6IG1ldGhvZCA9ICdzdGFydCc7IHRvID0gaG93OwoJCX0KCQlpZiAoIXRvZ2dsZSkgdGhpcy5lbGltaW5hdGUoJ2ZhZGU6ZmxhZycpOwoJCWZhZGVbbWV0aG9kXSgnb3BhY2l0eScsIHRvKTsKCQlpZiAobWV0aG9kID09ICdzZXQnIHx8IHRvICE9IDApIHRoaXMuc2V0U3R5bGUoJ3Zpc2liaWxpdHknLCB0byA9PSAwID8gJ2hpZGRlbicgOiAndmlzaWJsZScpOwoJCWVsc2UgZmFkZS5jaGFpbihmdW5jdGlvbigpewoJCQl0aGlzLmVsZW1lbnQuc2V0U3R5bGUoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7CgkJfSk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWhpZ2hsaWdodDogZnVuY3Rpb24oc3RhcnQsIGVuZCl7CgkJaWYgKCFlbmQpewoJCQllbmQgPSB0aGlzLnJldHJpZXZlKCdoaWdobGlnaHQ6b3JpZ2luYWwnLCB0aGlzLmdldFN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJykpOwoJCQllbmQgPSAoZW5kID09ICd0cmFuc3BhcmVudCcpID8gJyNmZmYnIDogZW5kOwoJCX0KCQl2YXIgdHdlZW4gPSB0aGlzLmdldCgndHdlZW4nKTsKCQl0d2Vlbi5zdGFydCgnYmFja2dyb3VuZC1jb2xvcicsIHN0YXJ0IHx8ICcjZmZmZjg4JywgZW5kKS5jaGFpbihmdW5jdGlvbigpewoJCQl0aGlzLnNldFN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgdGhpcy5yZXRyaWV2ZSgnaGlnaGxpZ2h0Om9yaWdpbmFsJykpOwoJCQl0d2Vlbi5jYWxsQ2hhaW4oKTsKCQl9LmJpbmQodGhpcykpOwoJCXJldHVybiB0aGlzOwoJfQoKfSk7CgoKLyoKLS0tCgpuYW1lOiBGeC5Nb3JwaAoKZGVzY3JpcHRpb246IEZvcm1lcmx5IEZ4LlN0eWxlcywgZWZmZWN0IHRvIHRyYW5zaXRpb24gYW55IG51bWJlciBvZiBDU1MgcHJvcGVydGllcyBmb3IgYW4gZWxlbWVudCB1c2luZyBhbiBvYmplY3Qgb2YgcnVsZXMsIG9yIENTUyBiYXNlZCBzZWxlY3RvciBydWxlcy4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IEZ4LkNTUwoKcHJvdmlkZXM6IEZ4Lk1vcnBoCgouLi4KKi8KCkZ4Lk1vcnBoID0gbmV3IENsYXNzKHsKCglFeHRlbmRzOiBGeC5DU1MsCgoJaW5pdGlhbGl6ZTogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucyl7CgkJdGhpcy5lbGVtZW50ID0gdGhpcy5zdWJqZWN0ID0gZG9jdW1lbnQuaWQoZWxlbWVudCk7CgkJdGhpcy5wYXJlbnQob3B0aW9ucyk7Cgl9LAoKCXNldDogZnVuY3Rpb24obm93KXsKCQlpZiAodHlwZW9mIG5vdyA9PSAnc3RyaW5nJykgbm93ID0gdGhpcy5zZWFyY2gobm93KTsKCQlmb3IgKHZhciBwIGluIG5vdykgdGhpcy5yZW5kZXIodGhpcy5lbGVtZW50LCBwLCBub3dbcF0sIHRoaXMub3B0aW9ucy51bml0KTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJY29tcHV0ZTogZnVuY3Rpb24oZnJvbSwgdG8sIGRlbHRhKXsKCQl2YXIgbm93ID0ge307CgkJZm9yICh2YXIgcCBpbiBmcm9tKSBub3dbcF0gPSB0aGlzLnBhcmVudChmcm9tW3BdLCB0b1twXSwgZGVsdGEpOwoJCXJldHVybiBub3c7Cgl9LAoKCXN0YXJ0OiBmdW5jdGlvbihwcm9wZXJ0aWVzKXsKCQlpZiAoIXRoaXMuY2hlY2socHJvcGVydGllcykpIHJldHVybiB0aGlzOwoJCWlmICh0eXBlb2YgcHJvcGVydGllcyA9PSAnc3RyaW5nJykgcHJvcGVydGllcyA9IHRoaXMuc2VhcmNoKHByb3BlcnRpZXMpOwoJCXZhciBmcm9tID0ge30sIHRvID0ge307CgkJZm9yICh2YXIgcCBpbiBwcm9wZXJ0aWVzKXsKCQkJdmFyIHBhcnNlZCA9IHRoaXMucHJlcGFyZSh0aGlzLmVsZW1lbnQsIHAsIHByb3BlcnRpZXNbcF0pOwoJCQlmcm9tW3BdID0gcGFyc2VkLmZyb207CgkJCXRvW3BdID0gcGFyc2VkLnRvOwoJCX0KCQlyZXR1cm4gdGhpcy5wYXJlbnQoZnJvbSwgdG8pOwoJfQoKfSk7CgpFbGVtZW50LlByb3BlcnRpZXMubW9ycGggPSB7CgoJc2V0OiBmdW5jdGlvbihvcHRpb25zKXsKCQl0aGlzLmdldCgnbW9ycGgnKS5jYW5jZWwoKS5zZXRPcHRpb25zKG9wdGlvbnMpOwoJCXJldHVybiB0aGlzOwoJfSwKCglnZXQ6IGZ1bmN0aW9uKCl7CgkJdmFyIG1vcnBoID0gdGhpcy5yZXRyaWV2ZSgnbW9ycGgnKTsKCQlpZiAoIW1vcnBoKXsKCQkJbW9ycGggPSBuZXcgRnguTW9ycGgodGhpcywge2xpbms6ICdjYW5jZWwnfSk7CgkJCXRoaXMuc3RvcmUoJ21vcnBoJywgbW9ycGgpOwoJCX0KCQlyZXR1cm4gbW9ycGg7Cgl9Cgp9OwoKRWxlbWVudC5pbXBsZW1lbnQoewoKCW1vcnBoOiBmdW5jdGlvbihwcm9wcyl7CgkJdGhpcy5nZXQoJ21vcnBoJykuc3RhcnQocHJvcHMpOwoJCXJldHVybiB0aGlzOwoJfQoKfSk7CgoKLyoKLS0tCgpuYW1lOiBGeC5UcmFuc2l0aW9ucwoKZGVzY3JpcHRpb246IENvbnRhaW5zIGEgc2V0IG9mIGFkdmFuY2VkIHRyYW5zaXRpb25zIHRvIGJlIHVzZWQgd2l0aCBhbnkgb2YgdGhlIEZ4IENsYXNzZXMuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCmNyZWRpdHM6CiAgLSBFYXNpbmcgRXF1YXRpb25zIGJ5IFJvYmVydCBQZW5uZXIsIDxodHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nLz4sIG1vZGlmaWVkIGFuZCBvcHRpbWl6ZWQgdG8gYmUgdXNlZCB3aXRoIE1vb1Rvb2xzLgoKcmVxdWlyZXM6IEZ4Cgpwcm92aWRlczogRnguVHJhbnNpdGlvbnMKCi4uLgoqLwoKRnguaW1wbGVtZW50KHsKCglnZXRUcmFuc2l0aW9uOiBmdW5jdGlvbigpewoJCXZhciB0cmFucyA9IHRoaXMub3B0aW9ucy50cmFuc2l0aW9uIHx8IEZ4LlRyYW5zaXRpb25zLlNpbmUuZWFzZUluT3V0OwoJCWlmICh0eXBlb2YgdHJhbnMgPT0gJ3N0cmluZycpewoJCQl2YXIgZGF0YSA9IHRyYW5zLnNwbGl0KCc6Jyk7CgkJCXRyYW5zID0gRnguVHJhbnNpdGlvbnM7CgkJCXRyYW5zID0gdHJhbnNbZGF0YVswXV0gfHwgdHJhbnNbZGF0YVswXS5jYXBpdGFsaXplKCldOwoJCQlpZiAoZGF0YVsxXSkgdHJhbnMgPSB0cmFuc1snZWFzZScgKyBkYXRhWzFdLmNhcGl0YWxpemUoKSArIChkYXRhWzJdID8gZGF0YVsyXS5jYXBpdGFsaXplKCkgOiAnJyldOwoJCX0KCQlyZXR1cm4gdHJhbnM7Cgl9Cgp9KTsKCkZ4LlRyYW5zaXRpb24gPSBmdW5jdGlvbih0cmFuc2l0aW9uLCBwYXJhbXMpewoJcGFyYW1zID0gQXJyYXkuZnJvbShwYXJhbXMpOwoJdmFyIGVhc2VJbiA9IGZ1bmN0aW9uKHBvcyl7CgkJcmV0dXJuIHRyYW5zaXRpb24ocG9zLCBwYXJhbXMpOwoJfTsKCXJldHVybiBPYmplY3QuYXBwZW5kKGVhc2VJbiwgewoJCWVhc2VJbjogZWFzZUluLAoJCWVhc2VPdXQ6IGZ1bmN0aW9uKHBvcyl7CgkJCXJldHVybiAxIC0gdHJhbnNpdGlvbigxIC0gcG9zLCBwYXJhbXMpOwoJCX0sCgkJZWFzZUluT3V0OiBmdW5jdGlvbihwb3MpewoJCQlyZXR1cm4gKHBvcyA8PSAwLjUgPyB0cmFuc2l0aW9uKDIgKiBwb3MsIHBhcmFtcykgOiAoMiAtIHRyYW5zaXRpb24oMiAqICgxIC0gcG9zKSwgcGFyYW1zKSkpIC8gMjsKCQl9Cgl9KTsKfTsKCkZ4LlRyYW5zaXRpb25zID0gewoKCWxpbmVhcjogZnVuY3Rpb24oemVybyl7CgkJcmV0dXJuIHplcm87Cgl9Cgp9OwoKLy88MS4yY29tcGF0PgoKRnguVHJhbnNpdGlvbnMgPSBuZXcgSGFzaChGeC5UcmFuc2l0aW9ucyk7CgovLzwvMS4yY29tcGF0PgoKRnguVHJhbnNpdGlvbnMuZXh0ZW5kID0gZnVuY3Rpb24odHJhbnNpdGlvbnMpewoJZm9yICh2YXIgdHJhbnNpdGlvbiBpbiB0cmFuc2l0aW9ucykgRnguVHJhbnNpdGlvbnNbdHJhbnNpdGlvbl0gPSBuZXcgRnguVHJhbnNpdGlvbih0cmFuc2l0aW9uc1t0cmFuc2l0aW9uXSk7Cn07CgpGeC5UcmFuc2l0aW9ucy5leHRlbmQoewoKCVBvdzogZnVuY3Rpb24ocCwgeCl7CgkJcmV0dXJuIE1hdGgucG93KHAsIHggJiYgeFswXSB8fCA2KTsKCX0sCgoJRXhwbzogZnVuY3Rpb24ocCl7CgkJcmV0dXJuIE1hdGgucG93KDIsIDggKiAocCAtIDEpKTsKCX0sCgoJQ2lyYzogZnVuY3Rpb24ocCl7CgkJcmV0dXJuIDEgLSBNYXRoLnNpbihNYXRoLmFjb3MocCkpOwoJfSwKCglTaW5lOiBmdW5jdGlvbihwKXsKCQlyZXR1cm4gMSAtIE1hdGguY29zKHAgKiBNYXRoLlBJIC8gMik7Cgl9LAoKCUJhY2s6IGZ1bmN0aW9uKHAsIHgpewoJCXggPSB4ICYmIHhbMF0gfHwgMS42MTg7CgkJcmV0dXJuIE1hdGgucG93KHAsIDIpICogKCh4ICsgMSkgKiBwIC0geCk7Cgl9LAoKCUJvdW5jZTogZnVuY3Rpb24ocCl7CgkJdmFyIHZhbHVlOwoJCWZvciAodmFyIGEgPSAwLCBiID0gMTsgMTsgYSArPSBiLCBiIC89IDIpewoJCQlpZiAocCA+PSAoNyAtIDQgKiBhKSAvIDExKXsKCQkJCXZhbHVlID0gYiAqIGIgLSBNYXRoLnBvdygoMTEgLSA2ICogYSAtIDExICogcCkgLyA0LCAyKTsKCQkJCWJyZWFrOwoJCQl9CgkJfQoJCXJldHVybiB2YWx1ZTsKCX0sCgoJRWxhc3RpYzogZnVuY3Rpb24ocCwgeCl7CgkJcmV0dXJuIE1hdGgucG93KDIsIDEwICogLS1wKSAqIE1hdGguY29zKDIwICogcCAqIE1hdGguUEkgKiAoeCAmJiB4WzBdIHx8IDEpIC8gMyk7Cgl9Cgp9KTsKClsnUXVhZCcsICdDdWJpYycsICdRdWFydCcsICdRdWludCddLmVhY2goZnVuY3Rpb24odHJhbnNpdGlvbiwgaSl7CglGeC5UcmFuc2l0aW9uc1t0cmFuc2l0aW9uXSA9IG5ldyBGeC5UcmFuc2l0aW9uKGZ1bmN0aW9uKHApewoJCXJldHVybiBNYXRoLnBvdyhwLCBpICsgMik7Cgl9KTsKfSk7CgoKLyoKLS0tCgpuYW1lOiBSZXF1ZXN0CgpkZXNjcmlwdGlvbjogUG93ZXJmdWwgYWxsIHB1cnBvc2UgUmVxdWVzdCBDbGFzcy4gVXNlcyBYTUxIVFRQUmVxdWVzdC4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtPYmplY3QsIEVsZW1lbnQsIENoYWluLCBFdmVudHMsIE9wdGlvbnMsIEJyb3dzZXJdCgpwcm92aWRlczogUmVxdWVzdAoKLi4uCiovCgooZnVuY3Rpb24oKXsKCnZhciBlbXB0eSA9IGZ1bmN0aW9uKCl7fSwKCXByb2dyZXNzU3VwcG9ydCA9ICgnb25wcm9ncmVzcycgaW4gbmV3IEJyb3dzZXIuUmVxdWVzdCk7Cgp2YXIgUmVxdWVzdCA9IHRoaXMuUmVxdWVzdCA9IG5ldyBDbGFzcyh7CgoJSW1wbGVtZW50czogW0NoYWluLCBFdmVudHMsIE9wdGlvbnNdLAoKCW9wdGlvbnM6IHsvKgoJCW9uUmVxdWVzdDogZnVuY3Rpb24oKXt9LAoJCW9uTG9hZHN0YXJ0OiBmdW5jdGlvbihldmVudCwgeGhyKXt9LAoJCW9uUHJvZ3Jlc3M6IGZ1bmN0aW9uKGV2ZW50LCB4aHIpe30sCgkJb25Db21wbGV0ZTogZnVuY3Rpb24oKXt9LAoJCW9uQ2FuY2VsOiBmdW5jdGlvbigpe30sCgkJb25TdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZVRleHQsIHJlc3BvbnNlWE1MKXt9LAoJCW9uRmFpbHVyZTogZnVuY3Rpb24oeGhyKXt9LAoJCW9uRXhjZXB0aW9uOiBmdW5jdGlvbihoZWFkZXJOYW1lLCB2YWx1ZSl7fSwKCQlvblRpbWVvdXQ6IGZ1bmN0aW9uKCl7fSwKCQl1c2VyOiAnJywKCQlwYXNzd29yZDogJycsKi8KCQl1cmw6ICcnLAoJCWRhdGE6ICcnLAoJCWhlYWRlcnM6IHsKCQkJJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnLAoJCQknQWNjZXB0JzogJ3RleHQvamF2YXNjcmlwdCwgdGV4dC9odG1sLCBhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sLCAqLyonCgkJfSwKCQlhc3luYzogdHJ1ZSwKCQlmb3JtYXQ6IGZhbHNlLAoJCW1ldGhvZDogJ3Bvc3QnLAoJCWxpbms6ICdpZ25vcmUnLAoJCWlzU3VjY2VzczogbnVsbCwKCQllbXVsYXRpb246IHRydWUsCgkJdXJsRW5jb2RlZDogdHJ1ZSwKCQllbmNvZGluZzogJ3V0Zi04JywKCQlldmFsU2NyaXB0czogZmFsc2UsCgkJZXZhbFJlc3BvbnNlOiBmYWxzZSwKCQl0aW1lb3V0OiAwLAoJCW5vQ2FjaGU6IGZhbHNlCgl9LAoKCWluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpewoJCXRoaXMueGhyID0gbmV3IEJyb3dzZXIuUmVxdWVzdCgpOwoJCXRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTsKCQl0aGlzLmhlYWRlcnMgPSB0aGlzLm9wdGlvbnMuaGVhZGVyczsKCX0sCgoJb25TdGF0ZUNoYW5nZTogZnVuY3Rpb24oKXsKCQl2YXIgeGhyID0gdGhpcy54aHI7CgkJaWYgKHhoci5yZWFkeVN0YXRlICE9IDQgfHwgIXRoaXMucnVubmluZykgcmV0dXJuOwoJCXRoaXMucnVubmluZyA9IGZhbHNlOwoJCXRoaXMuc3RhdHVzID0gMDsKCQlGdW5jdGlvbi5hdHRlbXB0KGZ1bmN0aW9uKCl7CgkJCXZhciBzdGF0dXMgPSB4aHIuc3RhdHVzOwoJCQl0aGlzLnN0YXR1cyA9IChzdGF0dXMgPT0gMTIyMykgPyAyMDQgOiBzdGF0dXM7CgkJfS5iaW5kKHRoaXMpKTsKCQl4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7CgkJaWYgKHByb2dyZXNzU3VwcG9ydCkgeGhyLm9ucHJvZ3Jlc3MgPSB4aHIub25sb2Fkc3RhcnQgPSBlbXB0eTsKCQljbGVhclRpbWVvdXQodGhpcy50aW1lcik7CgoJCXRoaXMucmVzcG9uc2UgPSB7dGV4dDogdGhpcy54aHIucmVzcG9uc2VUZXh0IHx8ICcnLCB4bWw6IHRoaXMueGhyLnJlc3BvbnNlWE1MfTsKCQlpZiAodGhpcy5vcHRpb25zLmlzU3VjY2Vzcy5jYWxsKHRoaXMsIHRoaXMuc3RhdHVzKSkKCQkJdGhpcy5zdWNjZXNzKHRoaXMucmVzcG9uc2UudGV4dCwgdGhpcy5yZXNwb25zZS54bWwpOwoJCWVsc2UKCQkJdGhpcy5mYWlsdXJlKCk7Cgl9LAoKCWlzU3VjY2VzczogZnVuY3Rpb24oKXsKCQl2YXIgc3RhdHVzID0gdGhpcy5zdGF0dXM7CgkJcmV0dXJuIChzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCk7Cgl9LAoKCWlzUnVubmluZzogZnVuY3Rpb24oKXsKCQlyZXR1cm4gISF0aGlzLnJ1bm5pbmc7Cgl9LAoKCXByb2Nlc3NTY3JpcHRzOiBmdW5jdGlvbih0ZXh0KXsKCQlpZiAodGhpcy5vcHRpb25zLmV2YWxSZXNwb25zZSB8fCAoLyhlY21hfGphdmEpc2NyaXB0LykudGVzdCh0aGlzLmdldEhlYWRlcignQ29udGVudC10eXBlJykpKSByZXR1cm4gQnJvd3Nlci5leGVjKHRleHQpOwoJCXJldHVybiB0ZXh0LnN0cmlwU2NyaXB0cyh0aGlzLm9wdGlvbnMuZXZhbFNjcmlwdHMpOwoJfSwKCglzdWNjZXNzOiBmdW5jdGlvbih0ZXh0LCB4bWwpewoJCXRoaXMub25TdWNjZXNzKHRoaXMucHJvY2Vzc1NjcmlwdHModGV4dCksIHhtbCk7Cgl9LAoKCW9uU3VjY2VzczogZnVuY3Rpb24oKXsKCQl0aGlzLmZpcmVFdmVudCgnY29tcGxldGUnLCBhcmd1bWVudHMpLmZpcmVFdmVudCgnc3VjY2VzcycsIGFyZ3VtZW50cykuY2FsbENoYWluKCk7Cgl9LAoKCWZhaWx1cmU6IGZ1bmN0aW9uKCl7CgkJdGhpcy5vbkZhaWx1cmUoKTsKCX0sCgoJb25GYWlsdXJlOiBmdW5jdGlvbigpewoJCXRoaXMuZmlyZUV2ZW50KCdjb21wbGV0ZScpLmZpcmVFdmVudCgnZmFpbHVyZScsIHRoaXMueGhyKTsKCX0sCgoJbG9hZHN0YXJ0OiBmdW5jdGlvbihldmVudCl7CgkJdGhpcy5maXJlRXZlbnQoJ2xvYWRzdGFydCcsIFtldmVudCwgdGhpcy54aHJdKTsKCX0sCgoJcHJvZ3Jlc3M6IGZ1bmN0aW9uKGV2ZW50KXsKCQl0aGlzLmZpcmVFdmVudCgncHJvZ3Jlc3MnLCBbZXZlbnQsIHRoaXMueGhyXSk7Cgl9LAoKCXRpbWVvdXQ6IGZ1bmN0aW9uKCl7CgkJdGhpcy5maXJlRXZlbnQoJ3RpbWVvdXQnLCB0aGlzLnhocik7Cgl9LAoKCXNldEhlYWRlcjogZnVuY3Rpb24obmFtZSwgdmFsdWUpewoJCXRoaXMuaGVhZGVyc1tuYW1lXSA9IHZhbHVlOwoJCXJldHVybiB0aGlzOwoJfSwKCglnZXRIZWFkZXI6IGZ1bmN0aW9uKG5hbWUpewoJCXJldHVybiBGdW5jdGlvbi5hdHRlbXB0KGZ1bmN0aW9uKCl7CgkJCXJldHVybiB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcihuYW1lKTsKCQl9LmJpbmQodGhpcykpOwoJfSwKCgljaGVjazogZnVuY3Rpb24oKXsKCQlpZiAoIXRoaXMucnVubmluZykgcmV0dXJuIHRydWU7CgkJc3dpdGNoICh0aGlzLm9wdGlvbnMubGluayl7CgkJCWNhc2UgJ2NhbmNlbCc6IHRoaXMuY2FuY2VsKCk7IHJldHVybiB0cnVlOwoJCQljYXNlICdjaGFpbic6IHRoaXMuY2hhaW4odGhpcy5jYWxsZXIucGFzcyhhcmd1bWVudHMsIHRoaXMpKTsgcmV0dXJuIGZhbHNlOwoJCX0KCQlyZXR1cm4gZmFsc2U7Cgl9LAoKCXNlbmQ6IGZ1bmN0aW9uKG9wdGlvbnMpewoJCWlmICghdGhpcy5jaGVjayhvcHRpb25zKSkgcmV0dXJuIHRoaXM7CgoJCXRoaXMub3B0aW9ucy5pc1N1Y2Nlc3MgPSB0aGlzLm9wdGlvbnMuaXNTdWNjZXNzIHx8IHRoaXMuaXNTdWNjZXNzOwoJCXRoaXMucnVubmluZyA9IHRydWU7CgoJCXZhciB0eXBlID0gdHlwZU9mKG9wdGlvbnMpOwoJCWlmICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ2VsZW1lbnQnKSBvcHRpb25zID0ge2RhdGE6IG9wdGlvbnN9OwoKCQl2YXIgb2xkID0gdGhpcy5vcHRpb25zOwoJCW9wdGlvbnMgPSBPYmplY3QuYXBwZW5kKHtkYXRhOiBvbGQuZGF0YSwgdXJsOiBvbGQudXJsLCBtZXRob2Q6IG9sZC5tZXRob2R9LCBvcHRpb25zKTsKCQl2YXIgZGF0YSA9IG9wdGlvbnMuZGF0YSwgdXJsID0gU3RyaW5nKG9wdGlvbnMudXJsKSwgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QudG9Mb3dlckNhc2UoKTsKCgkJc3dpdGNoICh0eXBlT2YoZGF0YSkpewoJCQljYXNlICdlbGVtZW50JzogZGF0YSA9IGRvY3VtZW50LmlkKGRhdGEpLnRvUXVlcnlTdHJpbmcoKTsgYnJlYWs7CgkJCWNhc2UgJ29iamVjdCc6IGNhc2UgJ2hhc2gnOiBkYXRhID0gT2JqZWN0LnRvUXVlcnlTdHJpbmcoZGF0YSk7CgkJfQoKCQlpZiAodGhpcy5vcHRpb25zLmZvcm1hdCl7CgkJCXZhciBmb3JtYXQgPSAnZm9ybWF0PScgKyB0aGlzLm9wdGlvbnMuZm9ybWF0OwoJCQlkYXRhID0gKGRhdGEpID8gZm9ybWF0ICsgJyYnICsgZGF0YSA6IGZvcm1hdDsKCQl9CgoJCWlmICh0aGlzLm9wdGlvbnMuZW11bGF0aW9uICYmICFbJ2dldCcsICdwb3N0J10uY29udGFpbnMobWV0aG9kKSl7CgkJCXZhciBfbWV0aG9kID0gJ19tZXRob2Q9JyArIG1ldGhvZDsKCQkJZGF0YSA9IChkYXRhKSA/IF9tZXRob2QgKyAnJicgKyBkYXRhIDogX21ldGhvZDsKCQkJbWV0aG9kID0gJ3Bvc3QnOwoJCX0KCgkJaWYgKHRoaXMub3B0aW9ucy51cmxFbmNvZGVkICYmIFsncG9zdCcsICdwdXQnXS5jb250YWlucyhtZXRob2QpKXsKCQkJdmFyIGVuY29kaW5nID0gKHRoaXMub3B0aW9ucy5lbmNvZGluZykgPyAnOyBjaGFyc2V0PScgKyB0aGlzLm9wdGlvbnMuZW5jb2RpbmcgOiAnJzsKCQkJdGhpcy5oZWFkZXJzWydDb250ZW50LXR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnICsgZW5jb2Rpbmc7CgkJfQoKCQlpZiAoIXVybCkgdXJsID0gZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWU7CgoJCXZhciB0cmltUG9zaXRpb24gPSB1cmwubGFzdEluZGV4T2YoJy8nKTsKCQlpZiAodHJpbVBvc2l0aW9uID4gLTEgJiYgKHRyaW1Qb3NpdGlvbiA9IHVybC5pbmRleE9mKCcjJykpID4gLTEpIHVybCA9IHVybC5zdWJzdHIoMCwgdHJpbVBvc2l0aW9uKTsKCgkJaWYgKHRoaXMub3B0aW9ucy5ub0NhY2hlKQoJCQl1cmwgKz0gKHVybC5jb250YWlucygnPycpID8gJyYnIDogJz8nKSArIFN0cmluZy51bmlxdWVJRCgpOwoKCQlpZiAoZGF0YSAmJiBtZXRob2QgPT0gJ2dldCcpewoJCQl1cmwgKz0gKHVybC5jb250YWlucygnPycpID8gJyYnIDogJz8nKSArIGRhdGE7CgkJCWRhdGEgPSBudWxsOwoJCX0KCgkJdmFyIHhociA9IHRoaXMueGhyOwoJCWlmIChwcm9ncmVzc1N1cHBvcnQpewoJCQl4aHIub25sb2Fkc3RhcnQgPSB0aGlzLmxvYWRzdGFydC5iaW5kKHRoaXMpOwoJCQl4aHIub25wcm9ncmVzcyA9IHRoaXMucHJvZ3Jlc3MuYmluZCh0aGlzKTsKCQl9CgoJCXhoci5vcGVuKG1ldGhvZC50b1VwcGVyQ2FzZSgpLCB1cmwsIHRoaXMub3B0aW9ucy5hc3luYywgdGhpcy5vcHRpb25zLnVzZXIsIHRoaXMub3B0aW9ucy5wYXNzd29yZCk7CgkJaWYgKHRoaXMub3B0aW9ucy51c2VyICYmICd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7CgoJCXhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKTsKCgkJT2JqZWN0LmVhY2godGhpcy5oZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KXsKCQkJdHJ5IHsKCQkJCXhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsdWUpOwoJCQl9IGNhdGNoIChlKXsKCQkJCXRoaXMuZmlyZUV2ZW50KCdleGNlcHRpb24nLCBba2V5LCB2YWx1ZV0pOwoJCQl9CgkJfSwgdGhpcyk7CgoJCXRoaXMuZmlyZUV2ZW50KCdyZXF1ZXN0Jyk7CgkJeGhyLnNlbmQoZGF0YSk7CgkJaWYgKCF0aGlzLm9wdGlvbnMuYXN5bmMpIHRoaXMub25TdGF0ZUNoYW5nZSgpOwoJCWlmICh0aGlzLm9wdGlvbnMudGltZW91dCkgdGhpcy50aW1lciA9IHRoaXMudGltZW91dC5kZWxheSh0aGlzLm9wdGlvbnMudGltZW91dCwgdGhpcyk7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCWNhbmNlbDogZnVuY3Rpb24oKXsKCQlpZiAoIXRoaXMucnVubmluZykgcmV0dXJuIHRoaXM7CgkJdGhpcy5ydW5uaW5nID0gZmFsc2U7CgkJdmFyIHhociA9IHRoaXMueGhyOwoJCXhoci5hYm9ydCgpOwoJCWNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTsKCQl4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7CgkJaWYgKHByb2dyZXNzU3VwcG9ydCkgeGhyLm9ucHJvZ3Jlc3MgPSB4aHIub25sb2Fkc3RhcnQgPSBlbXB0eTsKCQl0aGlzLnhociA9IG5ldyBCcm93c2VyLlJlcXVlc3QoKTsKCQl0aGlzLmZpcmVFdmVudCgnY2FuY2VsJyk7CgkJcmV0dXJuIHRoaXM7Cgl9Cgp9KTsKCnZhciBtZXRob2RzID0ge307ClsnZ2V0JywgJ3Bvc3QnLCAncHV0JywgJ2RlbGV0ZScsICdHRVQnLCAnUE9TVCcsICdQVVQnLCAnREVMRVRFJ10uZWFjaChmdW5jdGlvbihtZXRob2QpewoJbWV0aG9kc1ttZXRob2RdID0gZnVuY3Rpb24oZGF0YSl7CgkJdmFyIG9iamVjdCA9IHsKCQkJbWV0aG9kOiBtZXRob2QKCQl9OwoJCWlmIChkYXRhICE9IG51bGwpIG9iamVjdC5kYXRhID0gZGF0YTsKCQlyZXR1cm4gdGhpcy5zZW5kKG9iamVjdCk7Cgl9Owp9KTsKClJlcXVlc3QuaW1wbGVtZW50KG1ldGhvZHMpOwoKRWxlbWVudC5Qcm9wZXJ0aWVzLnNlbmQgPSB7CgoJc2V0OiBmdW5jdGlvbihvcHRpb25zKXsKCQl2YXIgc2VuZCA9IHRoaXMuZ2V0KCdzZW5kJykuY2FuY2VsKCk7CgkJc2VuZC5zZXRPcHRpb25zKG9wdGlvbnMpOwoJCXJldHVybiB0aGlzOwoJfSwKCglnZXQ6IGZ1bmN0aW9uKCl7CgkJdmFyIHNlbmQgPSB0aGlzLnJldHJpZXZlKCdzZW5kJyk7CgkJaWYgKCFzZW5kKXsKCQkJc2VuZCA9IG5ldyBSZXF1ZXN0KHsKCQkJCWRhdGE6IHRoaXMsIGxpbms6ICdjYW5jZWwnLCBtZXRob2Q6IHRoaXMuZ2V0KCdtZXRob2QnKSB8fCAncG9zdCcsIHVybDogdGhpcy5nZXQoJ2FjdGlvbicpCgkJCX0pOwoJCQl0aGlzLnN0b3JlKCdzZW5kJywgc2VuZCk7CgkJfQoJCXJldHVybiBzZW5kOwoJfQoKfTsKCkVsZW1lbnQuaW1wbGVtZW50KHsKCglzZW5kOiBmdW5jdGlvbih1cmwpewoJCXZhciBzZW5kZXIgPSB0aGlzLmdldCgnc2VuZCcpOwoJCXNlbmRlci5zZW5kKHtkYXRhOiB0aGlzLCB1cmw6IHVybCB8fCBzZW5kZXIub3B0aW9ucy51cmx9KTsKCQlyZXR1cm4gdGhpczsKCX0KCn0pOwoKfSkoKTsKCi8qCi0tLQoKbmFtZTogUmVxdWVzdC5IVE1MCgpkZXNjcmlwdGlvbjogRXh0ZW5kcyB0aGUgYmFzaWMgUmVxdWVzdCBDbGFzcyB3aXRoIGFkZGl0aW9uYWwgbWV0aG9kcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBIVE1MIHJlc3BvbnNlcy4KCmxpY2Vuc2U6IE1JVC1zdHlsZSBsaWNlbnNlLgoKcmVxdWlyZXM6IFtFbGVtZW50LCBSZXF1ZXN0XQoKcHJvdmlkZXM6IFJlcXVlc3QuSFRNTAoKLi4uCiovCgpSZXF1ZXN0LkhUTUwgPSBuZXcgQ2xhc3MoewoKCUV4dGVuZHM6IFJlcXVlc3QsCgoJb3B0aW9uczogewoJCXVwZGF0ZTogZmFsc2UsCgkJYXBwZW5kOiBmYWxzZSwKCQlldmFsU2NyaXB0czogdHJ1ZSwKCQlmaWx0ZXI6IGZhbHNlLAoJCWhlYWRlcnM6IHsKCQkJQWNjZXB0OiAndGV4dC9odG1sLCBhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sLCAqLyonCgkJfQoJfSwKCglzdWNjZXNzOiBmdW5jdGlvbih0ZXh0KXsKCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywgcmVzcG9uc2UgPSB0aGlzLnJlc3BvbnNlOwoKCQlyZXNwb25zZS5odG1sID0gdGV4dC5zdHJpcFNjcmlwdHMoZnVuY3Rpb24oc2NyaXB0KXsKCQkJcmVzcG9uc2UuamF2YXNjcmlwdCA9IHNjcmlwdDsKCQl9KTsKCgkJdmFyIG1hdGNoID0gcmVzcG9uc2UuaHRtbC5tYXRjaCgvPGJvZHlbXj5dKj4oW1xzXFNdKj8pPFwvYm9keT4vaSk7CgkJaWYgKG1hdGNoKSByZXNwb25zZS5odG1sID0gbWF0Y2hbMV07CgkJdmFyIHRlbXAgPSBuZXcgRWxlbWVudCgnZGl2Jykuc2V0KCdodG1sJywgcmVzcG9uc2UuaHRtbCk7CgoJCXJlc3BvbnNlLnRyZWUgPSB0ZW1wLmNoaWxkTm9kZXM7CgkJcmVzcG9uc2UuZWxlbWVudHMgPSB0ZW1wLmdldEVsZW1lbnRzKG9wdGlvbnMuZmlsdGVyIHx8ICcqJyk7CgoJCWlmIChvcHRpb25zLmZpbHRlcikgcmVzcG9uc2UudHJlZSA9IHJlc3BvbnNlLmVsZW1lbnRzOwoJCWlmIChvcHRpb25zLnVwZGF0ZSl7CgkJCXZhciB1cGRhdGUgPSBkb2N1bWVudC5pZChvcHRpb25zLnVwZGF0ZSkuZW1wdHkoKTsKCQkJaWYgKG9wdGlvbnMuZmlsdGVyKSB1cGRhdGUuYWRvcHQocmVzcG9uc2UuZWxlbWVudHMpOwoJCQllbHNlIHVwZGF0ZS5zZXQoJ2h0bWwnLCByZXNwb25zZS5odG1sKTsKCQl9IGVsc2UgaWYgKG9wdGlvbnMuYXBwZW5kKXsKCQkJdmFyIGFwcGVuZCA9IGRvY3VtZW50LmlkKG9wdGlvbnMuYXBwZW5kKTsKCQkJaWYgKG9wdGlvbnMuZmlsdGVyKSByZXNwb25zZS5lbGVtZW50cy5yZXZlcnNlKCkuaW5qZWN0KGFwcGVuZCk7CgkJCWVsc2UgYXBwZW5kLmFkb3B0KHRlbXAuZ2V0Q2hpbGRyZW4oKSk7CgkJfQoJCWlmIChvcHRpb25zLmV2YWxTY3JpcHRzKSBCcm93c2VyLmV4ZWMocmVzcG9uc2UuamF2YXNjcmlwdCk7CgoJCXRoaXMub25TdWNjZXNzKHJlc3BvbnNlLnRyZWUsIHJlc3BvbnNlLmVsZW1lbnRzLCByZXNwb25zZS5odG1sLCByZXNwb25zZS5qYXZhc2NyaXB0KTsKCX0KCn0pOwoKRWxlbWVudC5Qcm9wZXJ0aWVzLmxvYWQgPSB7CgoJc2V0OiBmdW5jdGlvbihvcHRpb25zKXsKCQl2YXIgbG9hZCA9IHRoaXMuZ2V0KCdsb2FkJykuY2FuY2VsKCk7CgkJbG9hZC5zZXRPcHRpb25zKG9wdGlvbnMpOwoJCXJldHVybiB0aGlzOwoJfSwKCglnZXQ6IGZ1bmN0aW9uKCl7CgkJdmFyIGxvYWQgPSB0aGlzLnJldHJpZXZlKCdsb2FkJyk7CgkJaWYgKCFsb2FkKXsKCQkJbG9hZCA9IG5ldyBSZXF1ZXN0LkhUTUwoe2RhdGE6IHRoaXMsIGxpbms6ICdjYW5jZWwnLCB1cGRhdGU6IHRoaXMsIG1ldGhvZDogJ2dldCd9KTsKCQkJdGhpcy5zdG9yZSgnbG9hZCcsIGxvYWQpOwoJCX0KCQlyZXR1cm4gbG9hZDsKCX0KCn07CgpFbGVtZW50LmltcGxlbWVudCh7CgoJbG9hZDogZnVuY3Rpb24oKXsKCQl0aGlzLmdldCgnbG9hZCcpLnNlbmQoQXJyYXkubGluayhhcmd1bWVudHMsIHtkYXRhOiBUeXBlLmlzT2JqZWN0LCB1cmw6IFR5cGUuaXNTdHJpbmd9KSk7CgkJcmV0dXJuIHRoaXM7Cgl9Cgp9KTsKCgovKgotLS0KCm5hbWU6IEpTT04KCmRlc2NyaXB0aW9uOiBKU09OIGVuY29kZXIgYW5kIGRlY29kZXIuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KClNlZUFsc286IDxodHRwOi8vd3d3Lmpzb24ub3JnLz4KCnJlcXVpcmVzOiBbQXJyYXksIFN0cmluZywgTnVtYmVyLCBGdW5jdGlvbl0KCnByb3ZpZGVzOiBKU09OCgouLi4KKi8KCmlmICh0eXBlb2YgSlNPTiA9PSAndW5kZWZpbmVkJykgdGhpcy5KU09OID0ge307CgovLzwxLjJjb21wYXQ+CgpKU09OID0gbmV3IEhhc2goewoJc3RyaW5naWZ5OiBKU09OLnN0cmluZ2lmeSwKCXBhcnNlOiBKU09OLnBhcnNlCn0pOwoKLy88LzEuMmNvbXBhdD4KCihmdW5jdGlvbigpewoKdmFyIHNwZWNpYWwgPSB7J1xiJzogJ1xcYicsICdcdCc6ICdcXHQnLCAnXG4nOiAnXFxuJywgJ1xmJzogJ1xcZicsICdccic6ICdcXHInLCAnIicgOiAnXFwiJywgJ1xcJzogJ1xcXFwnfTsKCnZhciBlc2NhcGUgPSBmdW5jdGlvbihjaHIpewoJcmV0dXJuIHNwZWNpYWxbY2hyXSB8fCAnXFx1JyArICgnMDAwMCcgKyBjaHIuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KTsKfTsKCkpTT04udmFsaWRhdGUgPSBmdW5jdGlvbihzdHJpbmcpewoJc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xcKD86WyJcXFwvYmZucnRdfHVbMC05YS1mQS1GXXs0fSkvZywgJ0AnKS4KCQkJCQlyZXBsYWNlKC8iW14iXFxcblxyXSoifHRydWV8ZmFsc2V8bnVsbHwtP1xkKyg/OlwuXGQqKT8oPzpbZUVdWytcLV0/XGQrKT8vZywgJ10nKS4KCQkJCQlyZXBsYWNlKC8oPzpefDp8LCkoPzpccypcWykrL2csICcnKTsKCglyZXR1cm4gKC9eW1xdLDp7fVxzXSokLykudGVzdChzdHJpbmcpOwp9OwoKSlNPTi5lbmNvZGUgPSBKU09OLnN0cmluZ2lmeSA/IGZ1bmN0aW9uKG9iail7CglyZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTsKfSA6IGZ1bmN0aW9uKG9iail7CglpZiAob2JqICYmIG9iai50b0pTT04pIG9iaiA9IG9iai50b0pTT04oKTsKCglzd2l0Y2ggKHR5cGVPZihvYmopKXsKCQljYXNlICdzdHJpbmcnOgoJCQlyZXR1cm4gJyInICsgb2JqLnJlcGxhY2UoL1tceDAwLVx4MWZcXCJdL2csIGVzY2FwZSkgKyAnIic7CgkJY2FzZSAnYXJyYXknOgoJCQlyZXR1cm4gJ1snICsgb2JqLm1hcChKU09OLmVuY29kZSkuY2xlYW4oKSArICddJzsKCQljYXNlICdvYmplY3QnOiBjYXNlICdoYXNoJzoKCQkJdmFyIHN0cmluZyA9IFtdOwoJCQlPYmplY3QuZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXkpewoJCQkJdmFyIGpzb24gPSBKU09OLmVuY29kZSh2YWx1ZSk7CgkJCQlpZiAoanNvbikgc3RyaW5nLnB1c2goSlNPTi5lbmNvZGUoa2V5KSArICc6JyArIGpzb24pOwoJCQl9KTsKCQkJcmV0dXJuICd7JyArIHN0cmluZyArICd9JzsKCQljYXNlICdudW1iZXInOiBjYXNlICdib29sZWFuJzogcmV0dXJuICcnICsgb2JqOwoJCWNhc2UgJ251bGwnOiByZXR1cm4gJ251bGwnOwoJfQoKCXJldHVybiBudWxsOwp9OwoKSlNPTi5kZWNvZGUgPSBmdW5jdGlvbihzdHJpbmcsIHNlY3VyZSl7CglpZiAoIXN0cmluZyB8fCB0eXBlT2Yoc3RyaW5nKSAhPSAnc3RyaW5nJykgcmV0dXJuIG51bGw7CgoJaWYgKHNlY3VyZSB8fCBKU09OLnNlY3VyZSl7CgkJaWYgKEpTT04ucGFyc2UpIHJldHVybiBKU09OLnBhcnNlKHN0cmluZyk7CgkJaWYgKCFKU09OLnZhbGlkYXRlKHN0cmluZykpIHRocm93IG5ldyBFcnJvcignSlNPTiBjb3VsZCBub3QgZGVjb2RlIHRoZSBpbnB1dDsgc2VjdXJpdHkgaXMgZW5hYmxlZCBhbmQgdGhlIHZhbHVlIGlzIG5vdCBzZWN1cmUuJyk7Cgl9CgoJcmV0dXJuIGV2YWwoJygnICsgc3RyaW5nICsgJyknKTsKfTsKCn0pKCk7CgoKLyoKLS0tCgpuYW1lOiBSZXF1ZXN0LkpTT04KCmRlc2NyaXB0aW9uOiBFeHRlbmRzIHRoZSBiYXNpYyBSZXF1ZXN0IENsYXNzIHdpdGggYWRkaXRpb25hbCBtZXRob2RzIGZvciBzZW5kaW5nIGFuZCByZWNlaXZpbmcgSlNPTiBkYXRhLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpyZXF1aXJlczogW1JlcXVlc3QsIEpTT05dCgpwcm92aWRlczogUmVxdWVzdC5KU09OCgouLi4KKi8KClJlcXVlc3QuSlNPTiA9IG5ldyBDbGFzcyh7CgoJRXh0ZW5kczogUmVxdWVzdCwKCglvcHRpb25zOiB7CgkJLypvbkVycm9yOiBmdW5jdGlvbih0ZXh0LCBlcnJvcil7fSwqLwoJCXNlY3VyZTogdHJ1ZQoJfSwKCglpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKXsKCQl0aGlzLnBhcmVudChvcHRpb25zKTsKCQlPYmplY3QuYXBwZW5kKHRoaXMuaGVhZGVycywgewoJCQknQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLAoJCQknWC1SZXF1ZXN0JzogJ0pTT04nCgkJfSk7Cgl9LAoKCXN1Y2Nlc3M6IGZ1bmN0aW9uKHRleHQpewoJCXZhciBqc29uOwoJCXRyeSB7CgkJCWpzb24gPSB0aGlzLnJlc3BvbnNlLmpzb24gPSBKU09OLmRlY29kZSh0ZXh0LCB0aGlzLm9wdGlvbnMuc2VjdXJlKTsKCQl9IGNhdGNoIChlcnJvcil7CgkJCXRoaXMuZmlyZUV2ZW50KCdlcnJvcicsIFt0ZXh0LCBlcnJvcl0pOwoJCQlyZXR1cm47CgkJfQoJCWlmIChqc29uID09IG51bGwpIHRoaXMub25GYWlsdXJlKCk7CgkJZWxzZSB0aGlzLm9uU3VjY2Vzcyhqc29uLCB0ZXh0KTsKCX0KCn0pOwoKCi8qCi0tLQoKbmFtZTogQ29va2llCgpkZXNjcmlwdGlvbjogQ2xhc3MgZm9yIGNyZWF0aW5nLCByZWFkaW5nLCBhbmQgZGVsZXRpbmcgYnJvd3NlciBDb29raWVzLgoKbGljZW5zZTogTUlULXN0eWxlIGxpY2Vuc2UuCgpjcmVkaXRzOgogIC0gQmFzZWQgb24gdGhlIGZ1bmN0aW9ucyBieSBQZXRlci1QYXVsIEtvY2ggKGh0dHA6Ly9xdWlya3Ntb2RlLm9yZykuCgpyZXF1aXJlczogW09wdGlvbnMsIEJyb3dzZXJdCgpwcm92aWRlczogQ29va2llCgouLi4KKi8KCnZhciBDb29raWUgPSBuZXcgQ2xhc3MoewoKCUltcGxlbWVudHM6IE9wdGlvbnMsCgoJb3B0aW9uczogewoJCXBhdGg6ICcvJywKCQlkb21haW46IGZhbHNlLAoJCWR1cmF0aW9uOiBmYWxzZSwKCQlzZWN1cmU6IGZhbHNlLAoJCWRvY3VtZW50OiBkb2N1bWVudCwKCQllbmNvZGU6IHRydWUKCX0sCgoJaW5pdGlhbGl6ZTogZnVuY3Rpb24oa2V5LCBvcHRpb25zKXsKCQl0aGlzLmtleSA9IGtleTsKCQl0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7Cgl9LAoKCXdyaXRlOiBmdW5jdGlvbih2YWx1ZSl7CgkJaWYgKHRoaXMub3B0aW9ucy5lbmNvZGUpIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKCQlpZiAodGhpcy5vcHRpb25zLmRvbWFpbikgdmFsdWUgKz0gJzsgZG9tYWluPScgKyB0aGlzLm9wdGlvbnMuZG9tYWluOwoJCWlmICh0aGlzLm9wdGlvbnMucGF0aCkgdmFsdWUgKz0gJzsgcGF0aD0nICsgdGhpcy5vcHRpb25zLnBhdGg7CgkJaWYgKHRoaXMub3B0aW9ucy5kdXJhdGlvbil7CgkJCXZhciBkYXRlID0gbmV3IERhdGUoKTsKCQkJZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogMjQgKiA2MCAqIDYwICogMTAwMCk7CgkJCXZhbHVlICs9ICc7IGV4cGlyZXM9JyArIGRhdGUudG9HTVRTdHJpbmcoKTsKCQl9CgkJaWYgKHRoaXMub3B0aW9ucy5zZWN1cmUpIHZhbHVlICs9ICc7IHNlY3VyZSc7CgkJdGhpcy5vcHRpb25zLmRvY3VtZW50LmNvb2tpZSA9IHRoaXMua2V5ICsgJz0nICsgdmFsdWU7CgkJcmV0dXJuIHRoaXM7Cgl9LAoKCXJlYWQ6IGZ1bmN0aW9uKCl7CgkJdmFyIHZhbHVlID0gdGhpcy5vcHRpb25zLmRvY3VtZW50LmNvb2tpZS5tYXRjaCgnKD86Xnw7KVxccyonICsgdGhpcy5rZXkuZXNjYXBlUmVnRXhwKCkgKyAnPShbXjtdKiknKTsKCQlyZXR1cm4gKHZhbHVlKSA/IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZVsxXSkgOiBudWxsOwoJfSwKCglkaXNwb3NlOiBmdW5jdGlvbigpewoJCW5ldyBDb29raWUodGhpcy5rZXksIE9iamVjdC5tZXJnZSh7fSwgdGhpcy5vcHRpb25zLCB7ZHVyYXRpb246IC0xfSkpLndyaXRlKCcnKTsKCQlyZXR1cm4gdGhpczsKCX0KCn0pOwoKQ29va2llLndyaXRlID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSwgb3B0aW9ucyl7CglyZXR1cm4gbmV3IENvb2tpZShrZXksIG9wdGlvbnMpLndyaXRlKHZhbHVlKTsKfTsKCkNvb2tpZS5yZWFkID0gZnVuY3Rpb24oa2V5KXsKCXJldHVybiBuZXcgQ29va2llKGtleSkucmVhZCgpOwp9OwoKQ29va2llLmRpc3Bvc2UgPSBmdW5jdGlvbihrZXksIG9wdGlvbnMpewoJcmV0dXJuIG5ldyBDb29raWUoa2V5LCBvcHRpb25zKS5kaXNwb3NlKCk7Cn07CgoKLyoKLS0tCgpuYW1lOiBET01SZWFkeQoKZGVzY3JpcHRpb246IENvbnRhaW5zIHRoZSBjdXN0b20gZXZlbnQgZG9tcmVhZHkuCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCnJlcXVpcmVzOiBbQnJvd3NlciwgRWxlbWVudCwgRWxlbWVudC5FdmVudF0KCnByb3ZpZGVzOiBbRE9NUmVhZHksIERvbVJlYWR5XQoKLi4uCiovCgooZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCl7Cgp2YXIgcmVhZHksCglsb2FkZWQsCgljaGVja3MgPSBbXSwKCXNob3VsZFBvbGwsCgl0aW1lciwKCXRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7Cgp2YXIgZG9tcmVhZHkgPSBmdW5jdGlvbigpewoJY2xlYXJUaW1lb3V0KHRpbWVyKTsKCWlmIChyZWFkeSkgcmV0dXJuOwoJQnJvd3Nlci5sb2FkZWQgPSByZWFkeSA9IHRydWU7Cglkb2N1bWVudC5yZW1vdmVMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGRvbXJlYWR5KS5yZW1vdmVMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGNoZWNrKTsKCglkb2N1bWVudC5maXJlRXZlbnQoJ2RvbXJlYWR5Jyk7Cgl3aW5kb3cuZmlyZUV2ZW50KCdkb21yZWFkeScpOwp9OwoKdmFyIGNoZWNrID0gZnVuY3Rpb24oKXsKCWZvciAodmFyIGkgPSBjaGVja3MubGVuZ3RoOyBpLS07KSBpZiAoY2hlY2tzW2ldKCkpewoJCWRvbXJlYWR5KCk7CgkJcmV0dXJuIHRydWU7Cgl9CglyZXR1cm4gZmFsc2U7Cn07Cgp2YXIgcG9sbCA9IGZ1bmN0aW9uKCl7CgljbGVhclRpbWVvdXQodGltZXIpOwoJaWYgKCFjaGVjaygpKSB0aW1lciA9IHNldFRpbWVvdXQocG9sbCwgMTApOwp9OwoKZG9jdW1lbnQuYWRkTGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBkb21yZWFkeSk7CgovKjxsdElFOD4qLwovLyBkb1Njcm9sbCB0ZWNobmlxdWUgYnkgRGllZ28gUGVyaW5pIGh0dHA6Ly9qYXZhc2NyaXB0Lm53Ym94LmNvbS9JRUNvbnRlbnRMb2FkZWQvCi8vIHRlc3RFbGVtZW50LmRvU2Nyb2xsKCkgdGhyb3dzIHdoZW4gdGhlIERPTSBpcyBub3QgcmVhZHksIG9ubHkgaW4gdGhlIHRvcCB3aW5kb3cKdmFyIGRvU2Nyb2xsV29ya3MgPSBmdW5jdGlvbigpewoJdHJ5IHsKCQl0ZXN0RWxlbWVudC5kb1Njcm9sbCgpOwoJCXJldHVybiB0cnVlOwoJfSBjYXRjaCAoZSl7fQoJcmV0dXJuIGZhbHNlOwp9OwovLyBJZiBkb1Njcm9sbCB3b3JrcyBhbHJlYWR5LCBpdCBjYW4ndCBiZSB1c2VkIHRvIGRldGVybWluZSBkb21yZWFkeQovLyAgIGUuZy4gaW4gYW4gaWZyYW1lCmlmICh0ZXN0RWxlbWVudC5kb1Njcm9sbCAmJiAhZG9TY3JvbGxXb3JrcygpKXsKCWNoZWNrcy5wdXNoKGRvU2Nyb2xsV29ya3MpOwoJc2hvdWxkUG9sbCA9IHRydWU7Cn0KLyo8L2x0SUU4PiovCgppZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSkgY2hlY2tzLnB1c2goZnVuY3Rpb24oKXsKCXZhciBzdGF0ZSA9IGRvY3VtZW50LnJlYWR5U3RhdGU7CglyZXR1cm4gKHN0YXRlID09ICdsb2FkZWQnIHx8IHN0YXRlID09ICdjb21wbGV0ZScpOwp9KTsKCmlmICgnb25yZWFkeXN0YXRlY2hhbmdlJyBpbiBkb2N1bWVudCkgZG9jdW1lbnQuYWRkTGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCBjaGVjayk7CmVsc2Ugc2hvdWxkUG9sbCA9IHRydWU7CgppZiAoc2hvdWxkUG9sbCkgcG9sbCgpOwoKRWxlbWVudC5FdmVudHMuZG9tcmVhZHkgPSB7CglvbkFkZDogZnVuY3Rpb24oZm4pewoJCWlmIChyZWFkeSkgZm4uY2FsbCh0aGlzKTsKCX0KfTsKCi8vIE1ha2Ugc3VyZSB0aGF0IGRvbXJlYWR5IGZpcmVzIGJlZm9yZSBsb2FkCkVsZW1lbnQuRXZlbnRzLmxvYWQgPSB7CgliYXNlOiAnbG9hZCcsCglvbkFkZDogZnVuY3Rpb24oZm4pewoJCWlmIChsb2FkZWQgJiYgdGhpcyA9PSB3aW5kb3cpIGZuLmNhbGwodGhpcyk7Cgl9LAoJY29uZGl0aW9uOiBmdW5jdGlvbigpewoJCWlmICh0aGlzID09IHdpbmRvdyl7CgkJCWRvbXJlYWR5KCk7CgkJCWRlbGV0ZSBFbGVtZW50LkV2ZW50cy5sb2FkOwoJCX0KCQlyZXR1cm4gdHJ1ZTsKCX0KfTsKCi8vIFRoaXMgaXMgYmFzZWQgb24gdGhlIGN1c3RvbSBsb2FkIGV2ZW50CndpbmRvdy5hZGRFdmVudCgnbG9hZCcsIGZ1bmN0aW9uKCl7Cglsb2FkZWQgPSB0cnVlOwp9KTsKCn0pKHdpbmRvdywgZG9jdW1lbnQpOwoKCi8qCi0tLQoKbmFtZTogU3dpZmYKCmRlc2NyaXB0aW9uOiBXcmFwcGVyIGZvciBlbWJlZGRpbmcgU1dGIG1vdmllcy4gU3VwcG9ydHMgRXh0ZXJuYWwgSW50ZXJmYWNlIENvbW11bmljYXRpb24uCgpsaWNlbnNlOiBNSVQtc3R5bGUgbGljZW5zZS4KCmNyZWRpdHM6CiAgLSBGbGFzaCBkZXRlY3Rpb24gJiBJbnRlcm5ldCBFeHBsb3JlciArIEZsYXNoIFBsYXllciA5IGZpeCBpbnNwaXJlZCBieSBTV0ZPYmplY3QuCgpyZXF1aXJlczogW09wdGlvbnMsIE9iamVjdCwgRWxlbWVudF0KCnByb3ZpZGVzOiBTd2lmZgoKLi4uCiovCgooZnVuY3Rpb24oKXsKCnZhciBTd2lmZiA9IHRoaXMuU3dpZmYgPSBuZXcgQ2xhc3MoewoKCUltcGxlbWVudHM6IE9wdGlvbnMsCgoJb3B0aW9uczogewoJCWlkOiBudWxsLAoJCWhlaWdodDogMSwKCQl3aWR0aDogMSwKCQljb250YWluZXI6IG51bGwsCgkJcHJvcGVydGllczoge30sCgkJcGFyYW1zOiB7CgkJCXF1YWxpdHk6ICdoaWdoJywKCQkJYWxsb3dTY3JpcHRBY2Nlc3M6ICdhbHdheXMnLAoJCQl3TW9kZTogJ3dpbmRvdycsCgkJCXN3TGl2ZUNvbm5lY3Q6IHRydWUKCQl9LAoJCWNhbGxCYWNrczoge30sCgkJdmFyczoge30KCX0sCgoJdG9FbGVtZW50OiBmdW5jdGlvbigpewoJCXJldHVybiB0aGlzLm9iamVjdDsKCX0sCgoJaW5pdGlhbGl6ZTogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucyl7CgkJdGhpcy5pbnN0YW5jZSA9ICdTd2lmZl8nICsgU3RyaW5nLnVuaXF1ZUlEKCk7CgoJCXRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTsKCQlvcHRpb25zID0gdGhpcy5vcHRpb25zOwoJCXZhciBpZCA9IHRoaXMuaWQgPSBvcHRpb25zLmlkIHx8IHRoaXMuaW5zdGFuY2U7CgkJdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmlkKG9wdGlvbnMuY29udGFpbmVyKTsKCgkJU3dpZmYuQ2FsbEJhY2tzW3RoaXMuaW5zdGFuY2VdID0ge307CgoJCXZhciBwYXJhbXMgPSBvcHRpb25zLnBhcmFtcywgdmFycyA9IG9wdGlvbnMudmFycywgY2FsbEJhY2tzID0gb3B0aW9ucy5jYWxsQmFja3M7CgkJdmFyIHByb3BlcnRpZXMgPSBPYmplY3QuYXBwZW5kKHtoZWlnaHQ6IG9wdGlvbnMuaGVpZ2h0LCB3aWR0aDogb3B0aW9ucy53aWR0aH0sIG9wdGlvbnMucHJvcGVydGllcyk7CgoJCXZhciBzZWxmID0gdGhpczsKCgkJZm9yICh2YXIgY2FsbEJhY2sgaW4gY2FsbEJhY2tzKXsKCQkJU3dpZmYuQ2FsbEJhY2tzW3RoaXMuaW5zdGFuY2VdW2NhbGxCYWNrXSA9IChmdW5jdGlvbihvcHRpb24pewoJCQkJcmV0dXJuIGZ1bmN0aW9uKCl7CgkJCQkJcmV0dXJuIG9wdGlvbi5hcHBseShzZWxmLm9iamVjdCwgYXJndW1lbnRzKTsKCQkJCX07CgkJCX0pKGNhbGxCYWNrc1tjYWxsQmFja10pOwoJCQl2YXJzW2NhbGxCYWNrXSA9ICdTd2lmZi5DYWxsQmFja3MuJyArIHRoaXMuaW5zdGFuY2UgKyAnLicgKyBjYWxsQmFjazsKCQl9CgoJCXBhcmFtcy5mbGFzaFZhcnMgPSBPYmplY3QudG9RdWVyeVN0cmluZyh2YXJzKTsKCQlpZiAoQnJvd3Nlci5pZSl7CgkJCXByb3BlcnRpZXMuY2xhc3NpZCA9ICdjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDAnOwoJCQlwYXJhbXMubW92aWUgPSBwYXRoOwoJCX0gZWxzZSB7CgkJCXByb3BlcnRpZXMudHlwZSA9ICdhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCc7CgkJfQoJCXByb3BlcnRpZXMuZGF0YSA9IHBhdGg7CgoJCXZhciBidWlsZCA9ICc8b2JqZWN0IGlkPSInICsgaWQgKyAnIic7CgkJZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydGllcykgYnVpbGQgKz0gJyAnICsgcHJvcGVydHkgKyAnPSInICsgcHJvcGVydGllc1twcm9wZXJ0eV0gKyAnIic7CgkJYnVpbGQgKz0gJz4nOwoJCWZvciAodmFyIHBhcmFtIGluIHBhcmFtcyl7CgkJCWlmIChwYXJhbXNbcGFyYW1dKSBidWlsZCArPSAnPHBhcmFtIG5hbWU9IicgKyBwYXJhbSArICciIHZhbHVlPSInICsgcGFyYW1zW3BhcmFtXSArICciIC8+JzsKCQl9CgkJYnVpbGQgKz0gJzwvb2JqZWN0Pic7CgkJdGhpcy5vYmplY3QgPSAoKGNvbnRhaW5lcikgPyBjb250YWluZXIuZW1wdHkoKSA6IG5ldyBFbGVtZW50KCdkaXYnKSkuc2V0KCdodG1sJywgYnVpbGQpLmZpcnN0Q2hpbGQ7Cgl9LAoKCXJlcGxhY2VzOiBmdW5jdGlvbihlbGVtZW50KXsKCQllbGVtZW50ID0gZG9jdW1lbnQuaWQoZWxlbWVudCwgdHJ1ZSk7CgkJZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0aGlzLnRvRWxlbWVudCgpLCBlbGVtZW50KTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJaW5qZWN0OiBmdW5jdGlvbihlbGVtZW50KXsKCQlkb2N1bWVudC5pZChlbGVtZW50LCB0cnVlKS5hcHBlbmRDaGlsZCh0aGlzLnRvRWxlbWVudCgpKTsKCQlyZXR1cm4gdGhpczsKCX0sCgoJcmVtb3RlOiBmdW5jdGlvbigpewoJCXJldHVybiBTd2lmZi5yZW1vdGUuYXBwbHkoU3dpZmYsIFt0aGlzLnRvRWxlbWVudCgpXS5hcHBlbmQoYXJndW1lbnRzKSk7Cgl9Cgp9KTsKClN3aWZmLkNhbGxCYWNrcyA9IHt9OwoKU3dpZmYucmVtb3RlID0gZnVuY3Rpb24ob2JqLCBmbil7Cgl2YXIgcnMgPSBvYmouQ2FsbEZ1bmN0aW9uKCc8aW52b2tlIG5hbWU9IicgKyBmbiArICciIHJldHVybnR5cGU9ImphdmFzY3JpcHQiPicgKyBfX2ZsYXNoX19hcmd1bWVudHNUb1hNTChhcmd1bWVudHMsIDIpICsgJzwvaW52b2tlPicpOwoJcmV0dXJuIGV2YWwocnMpOwp9OwoKfSkoKTsKCg==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 05:03:23 GMT",
                    "Content-Length": "155263",
                    "Date": "Fri, 07 Nov 2014 05:04:21 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}