{
    "url": "http://localhost:9999/Yann29/bower-ol3/resources/example-behaviour.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>window.location.href</b> and written to <b>location.href</b> via the following statements:<ul><li>var newMode = this . ...i , pair , adjusted;</li><li>location.href = baseUrl + '?' + pairs.join('&amp;');</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/Yann29/bower-ol3/resources/example-behaviour.js",
                "path": "/Yann29/bower-ol3/resources/example-behaviour.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9ZYW5uMjkvYm93ZXItb2wzL3Jlc291cmNlcy9leGFtcGxlLWJlaGF2aW91ci5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "OyhmdW5jdGlvbigpIHsKICBpZiAod2luZG93LmxvY2F0aW9uLmhvc3QgPT09ICdsb2NhbGhvc3Q6MzAwMCcpIHsKICAgIHJldHVybjsKICB9CiAgdmFyIGNvbnRhaW5lciA9ICQoJy5uYXZiYXIgLm5hdmJhci1pbm5lciAuY29udGFpbmVyJylbMF0sCiAgICAgIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyksCiAgICAgIHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpLAogICAgICBwb3NzaWJsZU1vZGVzID0gewogICAgICAgICdyYXcnIDogJ0RldmVsb3BtZW50JywKICAgICAgICAnYWR2YW5jZWQnOiAnUHJvZHVjdGlvbicKICAgICAgfSwKICAgICAgdXJsTW9kZSA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLm1hdGNoKC9tb2RlPShbYS16MC05XC1dKylcJj8vaSksCiAgICAgIGN1ck1vZGUgPSB1cmxNb2RlID8gdXJsTW9kZVsxXSA6ICdhZHZhbmNlZCcsCiAgICAgIG9wdGlvbiwKICAgICAgbW9kZUlkeCwKICAgICAgbW9kZSwKICAgICAgbW9kZVR4dCwKICAgICAgbW9kZUNoYW5nZWRNZXRob2Q7CgogIGlmICghY29udGFpbmVyKSB7CiAgICByZXR1cm47CiAgfQoKICBtb2RlQ2hhbmdlZE1ldGhvZCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIG5ld01vZGUgPSB0aGlzLnZhbHVlLAogICAgICAgIHNlYXJjaCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLAogICAgICAgIGJhc2VVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnPycpWzBdLAogICAgICAgIGNodW5rcyA9IHNlYXJjaCA/IHNlYXJjaC5zcGxpdCgnJicpIDogW10sCiAgICAgICAgcGFpcnMgPSBbXSwKICAgICAgICBpLAogICAgICAgIHBhaXIsCiAgICAgICAgYWRqdXN0ZWQ7CiAgICBmb3IgKGkgPSBjaHVua3MubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgcGFpciA9IGNodW5rc1tpXS5zcGxpdCgnPScpOwogICAgICBpZiAocGFpclswXS50b0xvd2VyQ2FzZSgpID09PSAnbW9kZScpIHsKICAgICAgICBwYWlyWzFdID0gbmV3TW9kZTsKICAgICAgfQogICAgICBhZGp1c3RlZCA9IGVuY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKTsKICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBhZGp1c3RlZCArPSAnPScgKyBlbmNvZGVVUklDb21wb25lbnQocGFpclsxXSB8fCAnJyk7CiAgICAgIH0KICAgICAgcGFpcnMucHVzaChhZGp1c3RlZCk7CiAgICB9CiAgICBpZiAocGFpcnMubGVuZ3RoID09PSAwKSB7CiAgICAgIHBhaXJzWzBdID0gJ21vZGU9JyArIGVuY29kZVVSSUNvbXBvbmVudChuZXdNb2RlKTsKICAgIH0KICAgIGxvY2F0aW9uLmhyZWYgPSBiYXNlVXJsICsgJz8nICsgcGFpcnMuam9pbignJicpOwogIH07CgogIGZvciAobW9kZSBpbiBwb3NzaWJsZU1vZGVzKSB7CiAgICBpZiAoIHBvc3NpYmxlTW9kZXMuaGFzT3duUHJvcGVydHkobW9kZSkgKSB7CiAgICAgIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpOwogICAgICBtb2RlVHh0ID0gcG9zc2libGVNb2Rlc1ttb2RlXTsKICAgICAgb3B0aW9uLnZhbHVlID0gbW9kZTsKICAgICAgb3B0aW9uLmlubmVySFRNTCA9IG1vZGVUeHQ7CiAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGN1ck1vZGUgPT09IG1vZGU7CiAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pOwogICAgfQogIH0KCiAgJChzZWxlY3QpLmNoYW5nZShtb2RlQ2hhbmdlZE1ldGhvZCk7CiAgc2VsZWN0LmNsYXNzTmFtZSA9ICdpbnB1dC1tZWRpdW0nOwoKICBmb3JtLmNsYXNzTmFtZSA9ICduYXZiYXItZm9ybSBwdWxsLXJpZ2h0JzsKICBmb3JtLmFwcGVuZENoaWxkKHNlbGVjdCk7CgogIGNvbnRhaW5lci5hcHBlbmRDaGlsZChmb3JtKTsKfSkoKTsKCnZhciBleGFtcGxlTlMgPSB7fTsKCmV4YW1wbGVOUy5nZXRSZW5kZXJlckZyb21RdWVyeVN0cmluZyA9IGZ1bmN0aW9uKCkgewogIHZhciBvYmogPSB7fSwgcXVlcnlTdHJpbmcgPSBsb2NhdGlvbi5zZWFyY2guc2xpY2UoMSksCiAgICAgIHJlID0gLyhbXiY9XSspPShbXiZdKikvZywgbTsKCiAgd2hpbGUgKG0gPSByZS5leGVjKHF1ZXJ5U3RyaW5nKSkgewogICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChtWzFdKV0gPSBkZWNvZGVVUklDb21wb25lbnQobVsyXSk7CiAgfQogIGlmICgncmVuZGVyZXJzJyBpbiBvYmopIHsKICAgIHJldHVybiBvYmpbJ3JlbmRlcmVycyddLnNwbGl0KCcsJyk7CiAgfSBlbHNlIGlmICgncmVuZGVyZXInIGluIG9iaikgewogICAgcmV0dXJuIFtvYmpbJ3JlbmRlcmVyJ11dOwogIH0gZWxzZSB7CiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KfTsKCi8qXAp8KnwKfCp8ICBCYXNlNjQgLyBiaW5hcnkgZGF0YSAvIFVURi04IHN0cmluZ3MgdXRpbGl0aWVzCnwqfAp8KnwgIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvQmFzZTY0X2VuY29kaW5nX2FuZF9kZWNvZGluZwp8KnwKXCovCgovKiBBcnJheSBvZiBieXRlcyB0byBiYXNlNjQgc3RyaW5nIGRlY29kaW5nICovCgpmdW5jdGlvbiBiNjRUb1VpbnQ2IChuQ2hyKSB7CgogIHJldHVybiBuQ2hyID4gNjQgJiYgbkNociA8IDkxID8KICAgICAgbkNociAtIDY1CiAgICA6IG5DaHIgPiA5NiAmJiBuQ2hyIDwgMTIzID8KICAgICAgbkNociAtIDcxCiAgICA6IG5DaHIgPiA0NyAmJiBuQ2hyIDwgNTggPwogICAgICBuQ2hyICsgNAogICAgOiBuQ2hyID09PSA0MyA/CiAgICAgIDYyCiAgICA6IG5DaHIgPT09IDQ3ID8KICAgICAgNjMKICAgIDoKICAgICAgMDsKCn0KCmZ1bmN0aW9uIGJhc2U2NERlY1RvQXJyIChzQmFzZTY0LCBuQmxvY2tzU2l6ZSkgewoKICB2YXIKICAgIHNCNjRFbmMgPSBzQmFzZTY0LnJlcGxhY2UoL1teQS1aYS16MC05XCtcL10vZywgIiIpLCBuSW5MZW4gPSBzQjY0RW5jLmxlbmd0aCwKICAgIG5PdXRMZW4gPSBuQmxvY2tzU2l6ZSA/IE1hdGguY2VpbCgobkluTGVuICogMyArIDEgPj4gMikgLyBuQmxvY2tzU2l6ZSkgKiBuQmxvY2tzU2l6ZSA6IG5JbkxlbiAqIDMgKyAxID4+IDIsIHRhQnl0ZXMgPSBuZXcgVWludDhBcnJheShuT3V0TGVuKTsKCiAgZm9yICh2YXIgbk1vZDMsIG5Nb2Q0LCBuVWludDI0ID0gMCwgbk91dElkeCA9IDAsIG5JbklkeCA9IDA7IG5JbklkeCA8IG5JbkxlbjsgbkluSWR4KyspIHsKICAgIG5Nb2Q0ID0gbkluSWR4ICYgMzsKICAgIG5VaW50MjQgfD0gYjY0VG9VaW50NihzQjY0RW5jLmNoYXJDb2RlQXQobkluSWR4KSkgPDwgMTggLSA2ICogbk1vZDQ7CiAgICBpZiAobk1vZDQgPT09IDMgfHwgbkluTGVuIC0gbkluSWR4ID09PSAxKSB7CiAgICAgIGZvciAobk1vZDMgPSAwOyBuTW9kMyA8IDMgJiYgbk91dElkeCA8IG5PdXRMZW47IG5Nb2QzKyssIG5PdXRJZHgrKykgewogICAgICAgIHRhQnl0ZXNbbk91dElkeF0gPSBuVWludDI0ID4+PiAoMTYgPj4+IG5Nb2QzICYgMjQpICYgMjU1OwogICAgICB9CiAgICAgIG5VaW50MjQgPSAwOwoKICAgIH0KICB9CgogIHJldHVybiB0YUJ5dGVzOwp9CgovKiBCYXNlNjQgc3RyaW5nIHRvIGFycmF5IGVuY29kaW5nICovCgpmdW5jdGlvbiB1aW50NlRvQjY0IChuVWludDYpIHsKCiAgcmV0dXJuIG5VaW50NiA8IDI2ID8KICAgICAgblVpbnQ2ICsgNjUKICAgIDogblVpbnQ2IDwgNTIgPwogICAgICBuVWludDYgKyA3MQogICAgOiBuVWludDYgPCA2MiA/CiAgICAgIG5VaW50NiAtIDQKICAgIDogblVpbnQ2ID09PSA2MiA/CiAgICAgIDQzCiAgICA6IG5VaW50NiA9PT0gNjMgPwogICAgICA0NwogICAgOgogICAgICA2NTsKCn0KCmZ1bmN0aW9uIGJhc2U2NEVuY0FyciAoYUJ5dGVzKSB7CgogIHZhciBuTW9kMyA9IDIsIHNCNjRFbmMgPSAiIjsKCiAgZm9yICh2YXIgbkxlbiA9IGFCeXRlcy5sZW5ndGgsIG5VaW50MjQgPSAwLCBuSWR4ID0gMDsgbklkeCA8IG5MZW47IG5JZHgrKykgewogICAgbk1vZDMgPSBuSWR4ICUgMzsKICAgIGlmIChuSWR4ID4gMCAmJiAobklkeCAqIDQgLyAzKSAlIDc2ID09PSAwKSB7IHNCNjRFbmMgKz0gIlxyXG4iOyB9CiAgICBuVWludDI0IHw9IGFCeXRlc1tuSWR4XSA8PCAoMTYgPj4+IG5Nb2QzICYgMjQpOwogICAgaWYgKG5Nb2QzID09PSAyIHx8IGFCeXRlcy5sZW5ndGggLSBuSWR4ID09PSAxKSB7CiAgICAgIHNCNjRFbmMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1aW50NlRvQjY0KG5VaW50MjQgPj4+IDE4ICYgNjMpLCB1aW50NlRvQjY0KG5VaW50MjQgPj4+IDEyICYgNjMpLCB1aW50NlRvQjY0KG5VaW50MjQgPj4+IDYgJiA2MyksIHVpbnQ2VG9CNjQoblVpbnQyNCAmIDYzKSk7CiAgICAgIG5VaW50MjQgPSAwOwogICAgfQogIH0KCiAgcmV0dXJuIHNCNjRFbmMuc3Vic3RyKDAsIHNCNjRFbmMubGVuZ3RoIC0gMiArIG5Nb2QzKSArIChuTW9kMyA9PT0gMiA/ICcnIDogbk1vZDMgPT09IDEgPyAnPScgOiAnPT0nKTsKCn0KCi8qIFVURi04IGFycmF5IHRvIERPTVN0cmluZyBhbmQgdmljZSB2ZXJzYSAqLwoKZnVuY3Rpb24gVVRGOEFyclRvU3RyIChhQnl0ZXMpIHsKCiAgdmFyIHNWaWV3ID0gIiI7CgogIGZvciAodmFyIG5QYXJ0LCBuTGVuID0gYUJ5dGVzLmxlbmd0aCwgbklkeCA9IDA7IG5JZHggPCBuTGVuOyBuSWR4KyspIHsKICAgIG5QYXJ0ID0gYUJ5dGVzW25JZHhdOwogICAgc1ZpZXcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgKICAgICAgblBhcnQgPiAyNTEgJiYgblBhcnQgPCAyNTQgJiYgbklkeCArIDUgPCBuTGVuID8gLyogc2l4IGJ5dGVzICovCiAgICAgICAgLyogKG5QYXJ0IC0gMjUyIDw8IDMyKSBpcyBub3QgcG9zc2libGUgaW4gRUNNQVNjcmlwdCEgU28uLi46ICovCiAgICAgICAgKG5QYXJ0IC0gMjUyKSAqIDEwNzM3NDE4MjQgKyAoYUJ5dGVzWysrbklkeF0gLSAxMjggPDwgMjQpICsgKGFCeXRlc1srK25JZHhdIC0gMTI4IDw8IDE4KSArIChhQnl0ZXNbKytuSWR4XSAtIDEyOCA8PCAxMikgKyAoYUJ5dGVzWysrbklkeF0gLSAxMjggPDwgNikgKyBhQnl0ZXNbKytuSWR4XSAtIDEyOAogICAgICA6IG5QYXJ0ID4gMjQ3ICYmIG5QYXJ0IDwgMjUyICYmIG5JZHggKyA0IDwgbkxlbiA/IC8qIGZpdmUgYnl0ZXMgKi8KICAgICAgICAoblBhcnQgLSAyNDggPDwgMjQpICsgKGFCeXRlc1srK25JZHhdIC0gMTI4IDw8IDE4KSArIChhQnl0ZXNbKytuSWR4XSAtIDEyOCA8PCAxMikgKyAoYUJ5dGVzWysrbklkeF0gLSAxMjggPDwgNikgKyBhQnl0ZXNbKytuSWR4XSAtIDEyOAogICAgICA6IG5QYXJ0ID4gMjM5ICYmIG5QYXJ0IDwgMjQ4ICYmIG5JZHggKyAzIDwgbkxlbiA/IC8qIGZvdXIgYnl0ZXMgKi8KICAgICAgICAoblBhcnQgLSAyNDAgPDwgMTgpICsgKGFCeXRlc1srK25JZHhdIC0gMTI4IDw8IDEyKSArIChhQnl0ZXNbKytuSWR4XSAtIDEyOCA8PCA2KSArIGFCeXRlc1srK25JZHhdIC0gMTI4CiAgICAgIDogblBhcnQgPiAyMjMgJiYgblBhcnQgPCAyNDAgJiYgbklkeCArIDIgPCBuTGVuID8gLyogdGhyZWUgYnl0ZXMgKi8KICAgICAgICAoblBhcnQgLSAyMjQgPDwgMTIpICsgKGFCeXRlc1srK25JZHhdIC0gMTI4IDw8IDYpICsgYUJ5dGVzWysrbklkeF0gLSAxMjgKICAgICAgOiBuUGFydCA+IDE5MSAmJiBuUGFydCA8IDIyNCAmJiBuSWR4ICsgMSA8IG5MZW4gPyAvKiB0d28gYnl0ZXMgKi8KICAgICAgICAoblBhcnQgLSAxOTIgPDwgNikgKyBhQnl0ZXNbKytuSWR4XSAtIDEyOAogICAgICA6IC8qIG5QYXJ0IDwgMTI3ID8gKi8gLyogb25lIGJ5dGUgKi8KICAgICAgICBuUGFydAogICAgKTsKICB9CgogIHJldHVybiBzVmlldzsKCn0KCmZ1bmN0aW9uIHN0clRvVVRGOEFyciAoc0RPTVN0cikgewoKICB2YXIgYUJ5dGVzLCBuQ2hyLCBuU3RyTGVuID0gc0RPTVN0ci5sZW5ndGgsIG5BcnJMZW4gPSAwOwoKICAvKiBtYXBwaW5nLi4uICovCgogIGZvciAodmFyIG5NYXBJZHggPSAwOyBuTWFwSWR4IDwgblN0ckxlbjsgbk1hcElkeCsrKSB7CiAgICBuQ2hyID0gc0RPTVN0ci5jaGFyQ29kZUF0KG5NYXBJZHgpOwogICAgbkFyckxlbiArPSBuQ2hyIDwgMHg4MCA/IDEgOiBuQ2hyIDwgMHg4MDAgPyAyIDogbkNociA8IDB4MTAwMDAgPyAzIDogbkNociA8IDB4MjAwMDAwID8gNCA6IG5DaHIgPCAweDQwMDAwMDAgPyA1IDogNjsKICB9CgogIGFCeXRlcyA9IG5ldyBVaW50OEFycmF5KG5BcnJMZW4pOwoKICAvKiB0cmFuc2NyaXB0aW9uLi4uICovCgogIGZvciAodmFyIG5JZHggPSAwLCBuQ2hySWR4ID0gMDsgbklkeCA8IG5BcnJMZW47IG5DaHJJZHgrKykgewogICAgbkNociA9IHNET01TdHIuY2hhckNvZGVBdChuQ2hySWR4KTsKICAgIGlmIChuQ2hyIDwgMTI4KSB7CiAgICAgIC8qIG9uZSBieXRlICovCiAgICAgIGFCeXRlc1tuSWR4KytdID0gbkNocjsKICAgIH0gZWxzZSBpZiAobkNociA8IDB4ODAwKSB7CiAgICAgIC8qIHR3byBieXRlcyAqLwogICAgICBhQnl0ZXNbbklkeCsrXSA9IDE5MiArIChuQ2hyID4+PiA2KTsKICAgICAgYUJ5dGVzW25JZHgrK10gPSAxMjggKyAobkNociAmIDYzKTsKICAgIH0gZWxzZSBpZiAobkNociA8IDB4MTAwMDApIHsKICAgICAgLyogdGhyZWUgYnl0ZXMgKi8KICAgICAgYUJ5dGVzW25JZHgrK10gPSAyMjQgKyAobkNociA+Pj4gMTIpOwogICAgICBhQnl0ZXNbbklkeCsrXSA9IDEyOCArIChuQ2hyID4+PiA2ICYgNjMpOwogICAgICBhQnl0ZXNbbklkeCsrXSA9IDEyOCArIChuQ2hyICYgNjMpOwogICAgfSBlbHNlIGlmIChuQ2hyIDwgMHgyMDAwMDApIHsKICAgICAgLyogZm91ciBieXRlcyAqLwogICAgICBhQnl0ZXNbbklkeCsrXSA9IDI0MCArIChuQ2hyID4+PiAxOCk7CiAgICAgIGFCeXRlc1tuSWR4KytdID0gMTI4ICsgKG5DaHIgPj4+IDEyICYgNjMpOwogICAgICBhQnl0ZXNbbklkeCsrXSA9IDEyOCArIChuQ2hyID4+PiA2ICYgNjMpOwogICAgICBhQnl0ZXNbbklkeCsrXSA9IDEyOCArIChuQ2hyICYgNjMpOwogICAgfSBlbHNlIGlmIChuQ2hyIDwgMHg0MDAwMDAwKSB7CiAgICAgIC8qIGZpdmUgYnl0ZXMgKi8KICAgICAgYUJ5dGVzW25JZHgrK10gPSAyNDggKyAobkNociA+Pj4gMjQpOwogICAgICBhQnl0ZXNbbklkeCsrXSA9IDEyOCArIChuQ2hyID4+PiAxOCAmIDYzKTsKICAgICAgYUJ5dGVzW25JZHgrK10gPSAxMjggKyAobkNociA+Pj4gMTIgJiA2Myk7CiAgICAgIGFCeXRlc1tuSWR4KytdID0gMTI4ICsgKG5DaHIgPj4+IDYgJiA2Myk7CiAgICAgIGFCeXRlc1tuSWR4KytdID0gMTI4ICsgKG5DaHIgJiA2Myk7CiAgICB9IGVsc2UgLyogaWYgKG5DaHIgPD0gMHg3ZmZmZmZmZikgKi8gewogICAgICAvKiBzaXggYnl0ZXMgKi8KICAgICAgYUJ5dGVzW25JZHgrK10gPSAyNTIgKyAvKiAobkNociA+Pj4gMzIpIGlzIG5vdCBwb3NzaWJsZSBpbiBFQ01BU2NyaXB0ISBTby4uLjogKi8gKG5DaHIgLyAxMDczNzQxODI0KTsKICAgICAgYUJ5dGVzW25JZHgrK10gPSAxMjggKyAobkNociA+Pj4gMjQgJiA2Myk7CiAgICAgIGFCeXRlc1tuSWR4KytdID0gMTI4ICsgKG5DaHIgPj4+IDE4ICYgNjMpOwogICAgICBhQnl0ZXNbbklkeCsrXSA9IDEyOCArIChuQ2hyID4+PiAxMiAmIDYzKTsKICAgICAgYUJ5dGVzW25JZHgrK10gPSAxMjggKyAobkNociA+Pj4gNiAmIDYzKTsKICAgICAgYUJ5dGVzW25JZHgrK10gPSAxMjggKyAobkNociAmIDYzKTsKICAgIH0KICB9CgogIHJldHVybiBhQnl0ZXM7Cgp9CgpleGFtcGxlTlMuc3RyVG9CYXNlNjQgPSBmdW5jdGlvbihzdHIpIHsKICByZXR1cm4gYmFzZTY0RW5jQXJyKHN0clRvVVRGOEFycihzdHIpKTsKfTsK",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 21:19:55 GMT",
                    "Content-Length": "7689",
                    "Date": "Fri, 07 Nov 2014 21:19:56 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}