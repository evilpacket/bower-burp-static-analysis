{
    "url": "http://localhost:9999/x-tag/togglegroup/demo/x-tag-components.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>the 'baseURI' property of a DOM element</b> and written to <b>the 'setAttribute()' function of a DOM element</b> via the following statement:<ul><li>base.setAttribute('href', document.baseURI || document.URL);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/x-tag/togglegroup/demo/x-tag-components.js",
                "path": "/x-tag/togglegroup/demo/x-tag-components.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC94LXRhZy90b2dnbGVncm91cC9kZW1vL3gtdGFnLWNvbXBvbmVudHMuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "Ly8gV2UgZG9uJ3QgdXNlIHRoZSBwbGF0Zm9ybSBib290c3RyYXBwZXIsIHNvIGZha2UgdGhpcyBzdHVmZi4KCndpbmRvdy5QbGF0Zm9ybSA9IHt9Owp2YXIgbG9nRmxhZ3MgPSB7fTsKCgoKLy8gRE9NVG9rZW5MaXN0IHBvbHlmaWxsIGZpciBJRTkKKGZ1bmN0aW9uICgpIHsKCmlmICh0eXBlb2Ygd2luZG93LkVsZW1lbnQgPT09ICJ1bmRlZmluZWQiIHx8ICJjbGFzc0xpc3QiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgcmV0dXJuOwoKdmFyIHByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZSwKICAgIGluZGV4T2YgPSBwcm90b3R5cGUuaW5kZXhPZiwKICAgIHNsaWNlID0gcHJvdG90eXBlLnNsaWNlLAogICAgcHVzaCA9IHByb3RvdHlwZS5wdXNoLAogICAgc3BsaWNlID0gcHJvdG90eXBlLnNwbGljZSwKICAgIGpvaW4gPSBwcm90b3R5cGUuam9pbjsKCmZ1bmN0aW9uIERPTVRva2VuTGlzdChlbCkgewogIHRoaXMuX2VsZW1lbnQgPSBlbDsKICBpZiAoZWwuY2xhc3NOYW1lICE9IHRoaXMuX2NsYXNzQ2FjaGUpIHsKICAgIHRoaXMuX2NsYXNzQ2FjaGUgPSBlbC5jbGFzc05hbWU7CgogICAgaWYgKCF0aGlzLl9jbGFzc0NhY2hlKSByZXR1cm47CgogICAgICAvLyBUaGUgY2xhc3NOYW1lIG5lZWRzIHRvIGJlIHRyaW1tZWQgYW5kIHNwbGl0IG9uIHdoaXRlc3BhY2UKICAgICAgLy8gdG8gcmV0cmlldmUgYSBsaXN0IG9mIGNsYXNzZXMuCiAgICAgIHZhciBjbGFzc2VzID0gdGhpcy5fY2xhc3NDYWNoZS5yZXBsYWNlKC9eXHMrfFxzKyQvZywnJykuc3BsaXQoL1xzKy8pLAogICAgICAgIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykgewogICAgICBwdXNoLmNhbGwodGhpcywgY2xhc3Nlc1tpXSk7CiAgICB9CiAgfQp9OwoKZnVuY3Rpb24gc2V0VG9DbGFzc05hbWUoZWwsIGNsYXNzZXMpIHsKICBlbC5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oJyAnKTsKfQoKRE9NVG9rZW5MaXN0LnByb3RvdHlwZSA9IHsKICBhZGQ6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICBpZih0aGlzLmNvbnRhaW5zKHRva2VuKSkgcmV0dXJuOwogICAgcHVzaC5jYWxsKHRoaXMsIHRva2VuKTsKICAgIHNldFRvQ2xhc3NOYW1lKHRoaXMuX2VsZW1lbnQsIHNsaWNlLmNhbGwodGhpcywgMCkpOwogIH0sCiAgY29udGFpbnM6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICByZXR1cm4gaW5kZXhPZi5jYWxsKHRoaXMsIHRva2VuKSAhPT0gLTE7CiAgfSwKICBpdGVtOiBmdW5jdGlvbihpbmRleCkgewogICAgcmV0dXJuIHRoaXNbaW5kZXhdIHx8IG51bGw7CiAgfSwKICByZW1vdmU6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICB2YXIgaSA9IGluZGV4T2YuY2FsbCh0aGlzLCB0b2tlbik7CiAgICAgaWYgKGkgPT09IC0xKSB7CiAgICAgICByZXR1cm47CiAgICAgfQogICAgc3BsaWNlLmNhbGwodGhpcywgaSwgMSk7CiAgICBzZXRUb0NsYXNzTmFtZSh0aGlzLl9lbGVtZW50LCBzbGljZS5jYWxsKHRoaXMsIDApKTsKICB9LAogIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiBqb2luLmNhbGwodGhpcywgJyAnKTsKICB9LAogIHRvZ2dsZTogZnVuY3Rpb24odG9rZW4pIHsKICAgIGlmIChpbmRleE9mLmNhbGwodGhpcywgdG9rZW4pID09PSAtMSkgewogICAgICB0aGlzLmFkZCh0b2tlbik7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnJlbW92ZSh0b2tlbik7CiAgICB9CiAgfQp9OwoKd2luZG93LkRPTVRva2VuTGlzdCA9IERPTVRva2VuTGlzdDsKCmZ1bmN0aW9uIGRlZmluZUVsZW1lbnRHZXR0ZXIgKG9iaiwgcHJvcCwgZ2V0dGVyKSB7CiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCx7CiAgICAgIGdldCA6IGdldHRlcgogICAgfSkKICB9IGVsc2UgewogICAgb2JqLl9fZGVmaW5lR2V0dGVyX18ocHJvcCwgZ2V0dGVyKTsKICB9Cn0KCmRlZmluZUVsZW1lbnRHZXR0ZXIoRWxlbWVudC5wcm90b3R5cGUsICdjbGFzc0xpc3QnLCBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIG5ldyBET01Ub2tlbkxpc3QodGhpcyk7Cn0pOwoKfSkoKTsKCgovKgogKiBDb3B5cmlnaHQgMjAxMiBUaGUgUG9seW1lciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3ZlcmVuZWQgYnkgYSBCU0Qtc3R5bGUKICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLgogKi8KCi8vIFNpZGVUYWJsZSBpcyBhIHdlYWsgbWFwIHdoZXJlIHBvc3NpYmxlLiBJZiBXZWFrTWFwIGlzIG5vdCBhdmFpbGFibGUgdGhlCi8vIGFzc29jaWF0aW9uIGlzIHN0b3JlZCBhcyBhbiBleHBhbmRvIHByb3BlcnR5Lgp2YXIgU2lkZVRhYmxlOwovLyBUT0RPKGFydik6IFdlYWtNYXAgZG9lcyBub3QgYWxsb3cgZm9yIE5vZGUgZXRjIHRvIGJlIGtleXMgaW4gRmlyZWZveAppZiAodHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveC8nKSA8IDApIHsKICBTaWRlVGFibGUgPSBXZWFrTWFwOwp9IGVsc2UgewogIChmdW5jdGlvbigpIHsKICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKICAgIHZhciBjb3VudGVyID0gRGF0ZS5ub3coKSAlIDFlOTsKCiAgICBTaWRlVGFibGUgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5uYW1lID0gJ19fc3QnICsgKE1hdGgucmFuZG9tKCkgKiAxZTkgPj4+IDApICsgKGNvdW50ZXIrKyArICdfXycpOwogICAgfTsKCiAgICBTaWRlVGFibGUucHJvdG90eXBlID0gewogICAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgICB2YXIgZW50cnkgPSBrZXlbdGhpcy5uYW1lXTsKICAgICAgICBpZiAoZW50cnkgJiYgZW50cnlbMF0gPT09IGtleSkKICAgICAgICAgIGVudHJ5WzFdID0gdmFsdWU7CiAgICAgICAgZWxzZQogICAgICAgICAgZGVmaW5lUHJvcGVydHkoa2V5LCB0aGlzLm5hbWUsIHt2YWx1ZTogW2tleSwgdmFsdWVdLCB3cml0YWJsZTogdHJ1ZX0pOwogICAgICB9LAogICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkgewogICAgICAgIHZhciBlbnRyeTsKICAgICAgICByZXR1cm4gKGVudHJ5ID0ga2V5W3RoaXMubmFtZV0pICYmIGVudHJ5WzBdID09PSBrZXkgPwogICAgICAgICAgICBlbnRyeVsxXSA6IHVuZGVmaW5lZDsKICAgICAgfSwKICAgICAgZGVsZXRlOiBmdW5jdGlvbihrZXkpIHsKICAgICAgICB0aGlzLnNldChrZXksIHVuZGVmaW5lZCk7CiAgICAgIH0KICAgIH0KICB9KSgpOwp9CgovKgogKiBDb3B5cmlnaHQgMjAxMiBUaGUgUG9seW1lciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3ZlcmVuZWQgYnkgYSBCU0Qtc3R5bGUKICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLgogKi8KCihmdW5jdGlvbihnbG9iYWwpIHsKCiAgdmFyIHJlZ2lzdHJhdGlvbnNUYWJsZSA9IG5ldyBTaWRlVGFibGUoKTsKCiAgLy8gV2UgdXNlIHNldEltbWVkaWF0ZSBvciBwb3N0TWVzc2FnZSBmb3Igb3VyIGZ1dHVyZSBjYWxsYmFjay4KICB2YXIgc2V0SW1tZWRpYXRlID0gd2luZG93Lm1zU2V0SW1tZWRpYXRlOwoKICAvLyBVc2UgcG9zdCBtZXNzYWdlIHRvIGVtdWxhdGUgc2V0SW1tZWRpYXRlLgogIGlmICghc2V0SW1tZWRpYXRlKSB7CiAgICB2YXIgc2V0SW1tZWRpYXRlUXVldWUgPSBbXTsKICAgIHZhciBzZW50aW5lbCA9IFN0cmluZyhNYXRoLnJhbmRvbSgpKTsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24oZSkgewogICAgICBpZiAoZS5kYXRhID09PSBzZW50aW5lbCkgewogICAgICAgIHZhciBxdWV1ZSA9IHNldEltbWVkaWF0ZVF1ZXVlOwogICAgICAgIHNldEltbWVkaWF0ZVF1ZXVlID0gW107CiAgICAgICAgcXVldWUuZm9yRWFjaChmdW5jdGlvbihmdW5jKSB7CiAgICAgICAgICBmdW5jKCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogICAgc2V0SW1tZWRpYXRlID0gZnVuY3Rpb24oZnVuYykgewogICAgICBzZXRJbW1lZGlhdGVRdWV1ZS5wdXNoKGZ1bmMpOwogICAgICB3aW5kb3cucG9zdE1lc3NhZ2Uoc2VudGluZWwsICcqJyk7CiAgICB9OwogIH0KCiAgLy8gVGhpcyBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IHdlIG5ldmVyIHNjaGVkdWxlIDIgY2FsbGFzIHRvIHNldEltbWVkaWF0ZQogIHZhciBpc1NjaGVkdWxlZCA9IGZhbHNlOwoKICAvLyBLZWVwIHRyYWNrIG9mIG9ic2VydmVycyB0aGF0IG5lZWRzIHRvIGJlIG5vdGlmaWVkIG5leHQgdGltZS4KICB2YXIgc2NoZWR1bGVkT2JzZXJ2ZXJzID0gW107CgogIC8qKgogICAqIFNjaGVkdWxlcyB8ZGlzcGF0Y2hDYWxsYmFja3wgdG8gYmUgY2FsbGVkIGluIHRoZSBmdXR1cmUuCiAgICogQHBhcmFtIHtNdXRhdGlvbk9ic2VydmVyfSBvYnNlcnZlcgogICAqLwogIGZ1bmN0aW9uIHNjaGVkdWxlQ2FsbGJhY2sob2JzZXJ2ZXIpIHsKICAgIHNjaGVkdWxlZE9ic2VydmVycy5wdXNoKG9ic2VydmVyKTsKICAgIGlmICghaXNTY2hlZHVsZWQpIHsKICAgICAgaXNTY2hlZHVsZWQgPSB0cnVlOwogICAgICBzZXRJbW1lZGlhdGUoZGlzcGF0Y2hDYWxsYmFja3MpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gd3JhcElmTmVlZGVkKG5vZGUpIHsKICAgIHJldHVybiB3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwgJiYKICAgICAgICB3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwud3JhcElmTmVlZGVkKG5vZGUpIHx8CiAgICAgICAgbm9kZTsKICB9CgogIGZ1bmN0aW9uIGRpc3BhdGNoQ2FsbGJhY2tzKCkgewogICAgLy8gaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI211dGF0aW9uLW9ic2VydmVycwoKICAgIGlzU2NoZWR1bGVkID0gZmFsc2U7IC8vIFVzZWQgdG8gYWxsb3cgYSBuZXcgc2V0SW1tZWRpYXRlIGNhbGwgYWJvdmUuCgogICAgdmFyIG9ic2VydmVycyA9IHNjaGVkdWxlZE9ic2VydmVyczsKICAgIHNjaGVkdWxlZE9ic2VydmVycyA9IFtdOwogICAgLy8gU29ydCBvYnNlcnZlcnMgYmFzZWQgb24gdGhlaXIgY3JlYXRpb24gVUlEIChpbmNyZW1lbnRhbCkuCiAgICBvYnNlcnZlcnMuc29ydChmdW5jdGlvbihvMSwgbzIpIHsKICAgICAgcmV0dXJuIG8xLnVpZF8gLSBvMi51aWRfOwogICAgfSk7CgogICAgdmFyIGFueU5vbkVtcHR5ID0gZmFsc2U7CiAgICBvYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbihvYnNlcnZlcikgewoKICAgICAgLy8gMi4xLCAyLjIKICAgICAgdmFyIHF1ZXVlID0gb2JzZXJ2ZXIudGFrZVJlY29yZHMoKTsKICAgICAgLy8gMi4zLiBSZW1vdmUgYWxsIHRyYW5zaWVudCByZWdpc3RlcmVkIG9ic2VydmVycyB3aG9zZSBvYnNlcnZlciBpcyBtby4KICAgICAgcmVtb3ZlVHJhbnNpZW50T2JzZXJ2ZXJzRm9yKG9ic2VydmVyKTsKCiAgICAgIC8vIDIuNAogICAgICBpZiAocXVldWUubGVuZ3RoKSB7CiAgICAgICAgb2JzZXJ2ZXIuY2FsbGJhY2tfKHF1ZXVlLCBvYnNlcnZlcik7CiAgICAgICAgYW55Tm9uRW1wdHkgPSB0cnVlOwogICAgICB9CiAgICB9KTsKCiAgICAvLyAzLgogICAgaWYgKGFueU5vbkVtcHR5KQogICAgICBkaXNwYXRjaENhbGxiYWNrcygpOwogIH0KCiAgZnVuY3Rpb24gcmVtb3ZlVHJhbnNpZW50T2JzZXJ2ZXJzRm9yKG9ic2VydmVyKSB7CiAgICBvYnNlcnZlci5ub2Rlc18uZm9yRWFjaChmdW5jdGlvbihub2RlKSB7CiAgICAgIHZhciByZWdpc3RyYXRpb25zID0gcmVnaXN0cmF0aW9uc1RhYmxlLmdldChub2RlKTsKICAgICAgaWYgKCFyZWdpc3RyYXRpb25zKQogICAgICAgIHJldHVybjsKICAgICAgcmVnaXN0cmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHJlZ2lzdHJhdGlvbikgewogICAgICAgIGlmIChyZWdpc3RyYXRpb24ub2JzZXJ2ZXIgPT09IG9ic2VydmVyKQogICAgICAgICAgcmVnaXN0cmF0aW9uLnJlbW92ZVRyYW5zaWVudE9ic2VydmVycygpOwogICAgICB9KTsKICAgIH0pOwogIH0KCiAgLyoqCiAgICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGZvciB0aGUgIkZvciBlYWNoIHJlZ2lzdGVyZWQgb2JzZXJ2ZXIgb2JzZXJ2ZXIgKHdpdGgKICAgKiBvYnNlcnZlcidzIG9wdGlvbnMgYXMgb3B0aW9ucykgaW4gdGFyZ2V0J3MgbGlzdCBvZiByZWdpc3RlcmVkIG9ic2VydmVycywKICAgKiBydW4gdGhlc2Ugc3Vic3RlcHM6IiBhbmQgdGhlICJGb3IgZWFjaCBhbmNlc3RvciBhbmNlc3RvciBvZiB0YXJnZXQsIGFuZCBmb3IKICAgKiBlYWNoIHJlZ2lzdGVyZWQgb2JzZXJ2ZXIgb2JzZXJ2ZXIgKHdpdGggb3B0aW9ucyBvcHRpb25zKSBpbiBhbmNlc3RvcidzIGxpc3QKICAgKiBvZiByZWdpc3RlcmVkIG9ic2VydmVycywgcnVuIHRoZXNlIHN1YnN0ZXBzOiIgcGFydCBvZiB0aGUgYWxnb3JpdGhtcy4gVGhlCiAgICogfG9wdGlvbnMuc3VidHJlZXwgaXMgY2hlY2tlZCB0byBlbnN1cmUgdGhhdCB0aGUgY2FsbGJhY2sgaXMgY2FsbGVkCiAgICogY29ycmVjdGx5LgogICAqCiAgICogQHBhcmFtIHtOb2RlfSB0YXJnZXQKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKE11dGF0aW9uT2JzZXJ2ZXJJbml0KTpNdXRhdGlvblJlY29yZH0gY2FsbGJhY2sKICAgKi8KICBmdW5jdGlvbiBmb3JFYWNoQW5jZXN0b3JBbmRPYnNlcnZlckVucXVldWVSZWNvcmQodGFyZ2V0LCBjYWxsYmFjaykgewogICAgZm9yICh2YXIgbm9kZSA9IHRhcmdldDsgbm9kZTsgbm9kZSA9IG5vZGUucGFyZW50Tm9kZSkgewogICAgICB2YXIgcmVnaXN0cmF0aW9ucyA9IHJlZ2lzdHJhdGlvbnNUYWJsZS5nZXQobm9kZSk7CgogICAgICBpZiAocmVnaXN0cmF0aW9ucykgewogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmVnaXN0cmF0aW9ucy5sZW5ndGg7IGorKykgewogICAgICAgICAgdmFyIHJlZ2lzdHJhdGlvbiA9IHJlZ2lzdHJhdGlvbnNbal07CiAgICAgICAgICB2YXIgb3B0aW9ucyA9IHJlZ2lzdHJhdGlvbi5vcHRpb25zOwoKICAgICAgICAgIC8vIE9ubHkgdGFyZ2V0IGlnbm9yZXMgc3VidHJlZS4KICAgICAgICAgIGlmIChub2RlICE9PSB0YXJnZXQgJiYgIW9wdGlvbnMuc3VidHJlZSkKICAgICAgICAgICAgY29udGludWU7CgogICAgICAgICAgdmFyIHJlY29yZCA9IGNhbGxiYWNrKG9wdGlvbnMpOwogICAgICAgICAgaWYgKHJlY29yZCkKICAgICAgICAgICAgcmVnaXN0cmF0aW9uLmVucXVldWUocmVjb3JkKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIHZhciB1aWRDb3VudGVyID0gMDsKCiAgLyoqCiAgICogVGhlIGNsYXNzIHRoYXQgbWFwcyB0byB0aGUgRE9NIE11dGF0aW9uT2JzZXJ2ZXIgaW50ZXJmYWNlLgogICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrLgogICAqIEBjb25zdHJ1Y3RvcgogICAqLwogIGZ1bmN0aW9uIEpzTXV0YXRpb25PYnNlcnZlcihjYWxsYmFjaykgewogICAgdGhpcy5jYWxsYmFja18gPSBjYWxsYmFjazsKICAgIHRoaXMubm9kZXNfID0gW107CiAgICB0aGlzLnJlY29yZHNfID0gW107CiAgICB0aGlzLnVpZF8gPSArK3VpZENvdW50ZXI7CiAgfQoKICBKc011dGF0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gewogICAgb2JzZXJ2ZTogZnVuY3Rpb24odGFyZ2V0LCBvcHRpb25zKSB7CiAgICAgIHRhcmdldCA9IHdyYXBJZk5lZWRlZCh0YXJnZXQpOwoKICAgICAgLy8gMS4xCiAgICAgIGlmICghb3B0aW9ucy5jaGlsZExpc3QgJiYgIW9wdGlvbnMuYXR0cmlidXRlcyAmJiAhb3B0aW9ucy5jaGFyYWN0ZXJEYXRhIHx8CgogICAgICAgICAgLy8gMS4yCiAgICAgICAgICBvcHRpb25zLmF0dHJpYnV0ZU9sZFZhbHVlICYmICFvcHRpb25zLmF0dHJpYnV0ZXMgfHwKCiAgICAgICAgICAvLyAxLjMKICAgICAgICAgIG9wdGlvbnMuYXR0cmlidXRlRmlsdGVyICYmIG9wdGlvbnMuYXR0cmlidXRlRmlsdGVyLmxlbmd0aCAmJgogICAgICAgICAgICAgICFvcHRpb25zLmF0dHJpYnV0ZXMgfHwKCiAgICAgICAgICAvLyAxLjQKICAgICAgICAgIG9wdGlvbnMuY2hhcmFjdGVyRGF0YU9sZFZhbHVlICYmICFvcHRpb25zLmNoYXJhY3RlckRhdGEpIHsKCiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCk7CiAgICAgIH0KCiAgICAgIHZhciByZWdpc3RyYXRpb25zID0gcmVnaXN0cmF0aW9uc1RhYmxlLmdldCh0YXJnZXQpOwogICAgICBpZiAoIXJlZ2lzdHJhdGlvbnMpCiAgICAgICAgcmVnaXN0cmF0aW9uc1RhYmxlLnNldCh0YXJnZXQsIHJlZ2lzdHJhdGlvbnMgPSBbXSk7CgogICAgICAvLyAyCiAgICAgIC8vIElmIHRhcmdldCdzIGxpc3Qgb2YgcmVnaXN0ZXJlZCBvYnNlcnZlcnMgYWxyZWFkeSBpbmNsdWRlcyBhIHJlZ2lzdGVyZWQKICAgICAgLy8gb2JzZXJ2ZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb250ZXh0IG9iamVjdCwgcmVwbGFjZSB0aGF0IHJlZ2lzdGVyZWQKICAgICAgLy8gb2JzZXJ2ZXIncyBvcHRpb25zIHdpdGggb3B0aW9ucy4KICAgICAgdmFyIHJlZ2lzdHJhdGlvbjsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyYXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbnNbaV0ub2JzZXJ2ZXIgPT09IHRoaXMpIHsKICAgICAgICAgIHJlZ2lzdHJhdGlvbiA9IHJlZ2lzdHJhdGlvbnNbaV07CiAgICAgICAgICByZWdpc3RyYXRpb24ucmVtb3ZlTGlzdGVuZXJzKCk7CiAgICAgICAgICByZWdpc3RyYXRpb24ub3B0aW9ucyA9IG9wdGlvbnM7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIDMuCiAgICAgIC8vIE90aGVyd2lzZSwgYWRkIGEgbmV3IHJlZ2lzdGVyZWQgb2JzZXJ2ZXIgdG8gdGFyZ2V0J3MgbGlzdCBvZiByZWdpc3RlcmVkCiAgICAgIC8vIG9ic2VydmVycyB3aXRoIHRoZSBjb250ZXh0IG9iamVjdCBhcyB0aGUgb2JzZXJ2ZXIgYW5kIG9wdGlvbnMgYXMgdGhlCiAgICAgIC8vIG9wdGlvbnMsIGFuZCBhZGQgdGFyZ2V0IHRvIGNvbnRleHQgb2JqZWN0J3MgbGlzdCBvZiBub2RlcyBvbiB3aGljaCBpdAogICAgICAvLyBpcyByZWdpc3RlcmVkLgogICAgICBpZiAoIXJlZ2lzdHJhdGlvbikgewogICAgICAgIHJlZ2lzdHJhdGlvbiA9IG5ldyBSZWdpc3RyYXRpb24odGhpcywgdGFyZ2V0LCBvcHRpb25zKTsKICAgICAgICByZWdpc3RyYXRpb25zLnB1c2gocmVnaXN0cmF0aW9uKTsKICAgICAgICB0aGlzLm5vZGVzXy5wdXNoKHRhcmdldCk7CiAgICAgIH0KCiAgICAgIHJlZ2lzdHJhdGlvbi5hZGRMaXN0ZW5lcnMoKTsKICAgIH0sCgogICAgZGlzY29ubmVjdDogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMubm9kZXNfLmZvckVhY2goZnVuY3Rpb24obm9kZSkgewogICAgICAgIHZhciByZWdpc3RyYXRpb25zID0gcmVnaXN0cmF0aW9uc1RhYmxlLmdldChub2RlKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJhdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHZhciByZWdpc3RyYXRpb24gPSByZWdpc3RyYXRpb25zW2ldOwogICAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbi5vYnNlcnZlciA9PT0gdGhpcykgewogICAgICAgICAgICByZWdpc3RyYXRpb24ucmVtb3ZlTGlzdGVuZXJzKCk7CiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbnMuc3BsaWNlKGksIDEpOwogICAgICAgICAgICAvLyBFYWNoIG5vZGUgY2FuIG9ubHkgaGF2ZSBvbmUgcmVnaXN0ZXJlZCBvYnNlcnZlciBhc3NvY2lhdGVkIHdpdGgKICAgICAgICAgICAgLy8gdGhpcyBvYnNlcnZlci4KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCB0aGlzKTsKICAgICAgdGhpcy5yZWNvcmRzXyA9IFtdOwogICAgfSwKCiAgICB0YWtlUmVjb3JkczogZnVuY3Rpb24oKSB7CiAgICAgIHZhciBjb3B5T2ZSZWNvcmRzID0gdGhpcy5yZWNvcmRzXzsKICAgICAgdGhpcy5yZWNvcmRzXyA9IFtdOwogICAgICByZXR1cm4gY29weU9mUmVjb3JkczsKICAgIH0KICB9OwoKICAvKioKICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZQogICAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0CiAgICogQGNvbnN0cnVjdG9yCiAgICovCiAgZnVuY3Rpb24gTXV0YXRpb25SZWNvcmQodHlwZSwgdGFyZ2V0KSB7CiAgICB0aGlzLnR5cGUgPSB0eXBlOwogICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7CiAgICB0aGlzLmFkZGVkTm9kZXMgPSBbXTsKICAgIHRoaXMucmVtb3ZlZE5vZGVzID0gW107CiAgICB0aGlzLnByZXZpb3VzU2libGluZyA9IG51bGw7CiAgICB0aGlzLm5leHRTaWJsaW5nID0gbnVsbDsKICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IG51bGw7CiAgICB0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZSA9IG51bGw7CiAgICB0aGlzLm9sZFZhbHVlID0gbnVsbDsKICB9CgogIGZ1bmN0aW9uIGNvcHlNdXRhdGlvblJlY29yZChvcmlnaW5hbCkgewogICAgdmFyIHJlY29yZCA9IG5ldyBNdXRhdGlvblJlY29yZChvcmlnaW5hbC50eXBlLCBvcmlnaW5hbC50YXJnZXQpOwogICAgcmVjb3JkLmFkZGVkTm9kZXMgPSBvcmlnaW5hbC5hZGRlZE5vZGVzLnNsaWNlKCk7CiAgICByZWNvcmQucmVtb3ZlZE5vZGVzID0gb3JpZ2luYWwucmVtb3ZlZE5vZGVzLnNsaWNlKCk7CiAgICByZWNvcmQucHJldmlvdXNTaWJsaW5nID0gb3JpZ2luYWwucHJldmlvdXNTaWJsaW5nOwogICAgcmVjb3JkLm5leHRTaWJsaW5nID0gb3JpZ2luYWwubmV4dFNpYmxpbmc7CiAgICByZWNvcmQuYXR0cmlidXRlTmFtZSA9IG9yaWdpbmFsLmF0dHJpYnV0ZU5hbWU7CiAgICByZWNvcmQuYXR0cmlidXRlTmFtZXNwYWNlID0gb3JpZ2luYWwuYXR0cmlidXRlTmFtZXNwYWNlOwogICAgcmVjb3JkLm9sZFZhbHVlID0gb3JpZ2luYWwub2xkVmFsdWU7CiAgICByZXR1cm4gcmVjb3JkOwogIH07CgogIC8vIFdlIGtlZXAgdHJhY2sgb2YgdGhlIHR3byAocG9zc2libHkgb25lKSByZWNvcmRzIHVzZWQgaW4gYSBzaW5nbGUgbXV0YXRpb24uCiAgdmFyIGN1cnJlbnRSZWNvcmQsIHJlY29yZFdpdGhPbGRWYWx1ZTsKCiAgLyoqCiAgICogQ3JlYXRlcyBhIHJlY29yZCB3aXRob3V0IHxvbGRWYWx1ZXwgYW5kIGNhY2hlcyBpdCBhcyB8Y3VycmVudFJlY29yZHwgZm9yCiAgICogbGF0ZXIgdXNlLgogICAqIEBwYXJhbSB7c3RyaW5nfSBvbGRWYWx1ZQogICAqIEByZXR1cm4ge011dGF0aW9uUmVjb3JkfQogICAqLwogIGZ1bmN0aW9uIGdldFJlY29yZCh0eXBlLCB0YXJnZXQpIHsKICAgIHJldHVybiBjdXJyZW50UmVjb3JkID0gbmV3IE11dGF0aW9uUmVjb3JkKHR5cGUsIHRhcmdldCk7CiAgfQoKICAvKioKICAgKiBHZXRzIG9yIGNyZWF0ZXMgYSByZWNvcmQgd2l0aCB8b2xkVmFsdWV8IGJhc2VkIGluIHRoZSB8Y3VycmVudFJlY29yZHwKICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkVmFsdWUKICAgKiBAcmV0dXJuIHtNdXRhdGlvblJlY29yZH0KICAgKi8KICBmdW5jdGlvbiBnZXRSZWNvcmRXaXRoT2xkVmFsdWUob2xkVmFsdWUpIHsKICAgIGlmIChyZWNvcmRXaXRoT2xkVmFsdWUpCiAgICAgIHJldHVybiByZWNvcmRXaXRoT2xkVmFsdWU7CiAgICByZWNvcmRXaXRoT2xkVmFsdWUgPSBjb3B5TXV0YXRpb25SZWNvcmQoY3VycmVudFJlY29yZCk7CiAgICByZWNvcmRXaXRoT2xkVmFsdWUub2xkVmFsdWUgPSBvbGRWYWx1ZTsKICAgIHJldHVybiByZWNvcmRXaXRoT2xkVmFsdWU7CiAgfQoKICBmdW5jdGlvbiBjbGVhclJlY29yZHMoKSB7CiAgICBjdXJyZW50UmVjb3JkID0gcmVjb3JkV2l0aE9sZFZhbHVlID0gdW5kZWZpbmVkOwogIH0KCiAgLyoqCiAgICogQHBhcmFtIHtNdXRhdGlvblJlY29yZH0gcmVjb3JkCiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVjb3JkIHJlcHJlc2VudHMgYSByZWNvcmQgZnJvbSB0aGUgY3VycmVudAogICAqIG11dGF0aW9uIGV2ZW50LgogICAqLwogIGZ1bmN0aW9uIHJlY29yZFJlcHJlc2VudHNDdXJyZW50TXV0YXRpb24ocmVjb3JkKSB7CiAgICByZXR1cm4gcmVjb3JkID09PSByZWNvcmRXaXRoT2xkVmFsdWUgfHwgcmVjb3JkID09PSBjdXJyZW50UmVjb3JkOwogIH0KCiAgLyoqCiAgICogU2VsZWN0cyB3aGljaCByZWNvcmQsIGlmIGFueSwgdG8gcmVwbGFjZSB0aGUgbGFzdCByZWNvcmQgaW4gdGhlIHF1ZXVlLgogICAqIFRoaXMgcmV0dXJucyB8bnVsbHwgaWYgbm8gcmVjb3JkIHNob3VsZCBiZSByZXBsYWNlZC4KICAgKgogICAqIEBwYXJhbSB7TXV0YXRpb25SZWNvcmR9IGxhc3RSZWNvcmQKICAgKiBAcGFyYW0ge011dGF0aW9uUmVjb3JkfSBuZXdSZWNvcmQKICAgKiBAcGFyYW0ge011dGF0aW9uUmVjb3JkfQogICAqLwogIGZ1bmN0aW9uIHNlbGVjdFJlY29yZChsYXN0UmVjb3JkLCBuZXdSZWNvcmQpIHsKICAgIGlmIChsYXN0UmVjb3JkID09PSBuZXdSZWNvcmQpCiAgICAgIHJldHVybiBsYXN0UmVjb3JkOwoKICAgIC8vIENoZWNrIGlmIHRoZSB0aGUgcmVjb3JkIHdlIGFyZSBhZGRpbmcgcmVwcmVzZW50cyB0aGUgc2FtZSByZWNvcmQuIElmCiAgICAvLyBzbywgd2Uga2VlcCB0aGUgb25lIHdpdGggdGhlIG9sZFZhbHVlIGluIGl0LgogICAgaWYgKHJlY29yZFdpdGhPbGRWYWx1ZSAmJiByZWNvcmRSZXByZXNlbnRzQ3VycmVudE11dGF0aW9uKGxhc3RSZWNvcmQpKQogICAgICByZXR1cm4gcmVjb3JkV2l0aE9sZFZhbHVlOwoKICAgIHJldHVybiBudWxsOwogIH0KCiAgLyoqCiAgICogQ2xhc3MgdXNlZCB0byByZXByZXNlbnQgYSByZWdpc3RlcmVkIG9ic2VydmVyLgogICAqIEBwYXJhbSB7TXV0YXRpb25PYnNlcnZlcn0gb2JzZXJ2ZXIKICAgKiBAcGFyYW0ge05vZGV9IHRhcmdldAogICAqIEBwYXJhbSB7TXV0YXRpb25PYnNlcnZlckluaXR9IG9wdGlvbnMKICAgKiBAY29uc3RydWN0b3IKICAgKi8KICBmdW5jdGlvbiBSZWdpc3RyYXRpb24ob2JzZXJ2ZXIsIHRhcmdldCwgb3B0aW9ucykgewogICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyOwogICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7CiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOwogICAgdGhpcy50cmFuc2llbnRPYnNlcnZlZE5vZGVzID0gW107CiAgfQoKICBSZWdpc3RyYXRpb24ucHJvdG90eXBlID0gewogICAgZW5xdWV1ZTogZnVuY3Rpb24ocmVjb3JkKSB7CiAgICAgIHZhciByZWNvcmRzID0gdGhpcy5vYnNlcnZlci5yZWNvcmRzXzsKICAgICAgdmFyIGxlbmd0aCA9IHJlY29yZHMubGVuZ3RoOwoKICAgICAgLy8gVGhlcmUgYXJlIGNhc2VzIHdoZXJlIHdlIHJlcGxhY2UgdGhlIGxhc3QgcmVjb3JkIHdpdGggdGhlIG5ldyByZWNvcmQuCiAgICAgIC8vIEZvciBleGFtcGxlIGlmIHRoZSByZWNvcmQgcmVwcmVzZW50cyB0aGUgc2FtZSBtdXRhdGlvbiB3ZSBuZWVkIHRvIHVzZQogICAgICAvLyB0aGUgb25lIHdpdGggdGhlIG9sZFZhbHVlLiBJZiB3ZSBnZXQgc2FtZSByZWNvcmQgKHRoaXMgY2FuIGhhcHBlbiBhcyB3ZQogICAgICAvLyB3YWxrIHVwIHRoZSB0cmVlKSB3ZSBpZ25vcmUgdGhlIG5ldyByZWNvcmQuCiAgICAgIGlmIChyZWNvcmRzLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgbGFzdFJlY29yZCA9IHJlY29yZHNbbGVuZ3RoIC0gMV07CiAgICAgICAgdmFyIHJlY29yZFRvUmVwbGFjZUxhc3QgPSBzZWxlY3RSZWNvcmQobGFzdFJlY29yZCwgcmVjb3JkKTsKICAgICAgICBpZiAocmVjb3JkVG9SZXBsYWNlTGFzdCkgewogICAgICAgICAgcmVjb3Jkc1tsZW5ndGggLSAxXSA9IHJlY29yZFRvUmVwbGFjZUxhc3Q7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHNjaGVkdWxlQ2FsbGJhY2sodGhpcy5vYnNlcnZlcik7CiAgICAgIH0KCiAgICAgIHJlY29yZHNbbGVuZ3RoXSA9IHJlY29yZDsKICAgIH0sCgogICAgYWRkTGlzdGVuZXJzOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5hZGRMaXN0ZW5lcnNfKHRoaXMudGFyZ2V0KTsKICAgIH0sCgogICAgYWRkTGlzdGVuZXJzXzogZnVuY3Rpb24obm9kZSkgewogICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKICAgICAgaWYgKG9wdGlvbnMuYXR0cmlidXRlcykKICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUF0dHJNb2RpZmllZCcsIHRoaXMsIHRydWUpOwoKICAgICAgaWYgKG9wdGlvbnMuY2hhcmFjdGVyRGF0YSkKICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNoYXJhY3RlckRhdGFNb2RpZmllZCcsIHRoaXMsIHRydWUpOwoKICAgICAgaWYgKG9wdGlvbnMuY2hpbGRMaXN0KQogICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignRE9NTm9kZUluc2VydGVkJywgdGhpcywgdHJ1ZSk7CgogICAgICBpZiAob3B0aW9ucy5jaGlsZExpc3QgfHwgb3B0aW9ucy5zdWJ0cmVlKQogICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignRE9NTm9kZVJlbW92ZWQnLCB0aGlzLCB0cnVlKTsKICAgIH0sCgogICAgcmVtb3ZlTGlzdGVuZXJzOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnNfKHRoaXMudGFyZ2V0KTsKICAgIH0sCgogICAgcmVtb3ZlTGlzdGVuZXJzXzogZnVuY3Rpb24obm9kZSkgewogICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKICAgICAgaWYgKG9wdGlvbnMuYXR0cmlidXRlcykKICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUF0dHJNb2RpZmllZCcsIHRoaXMsIHRydWUpOwoKICAgICAgaWYgKG9wdGlvbnMuY2hhcmFjdGVyRGF0YSkKICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUNoYXJhY3RlckRhdGFNb2RpZmllZCcsIHRoaXMsIHRydWUpOwoKICAgICAgaWYgKG9wdGlvbnMuY2hpbGRMaXN0KQogICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NTm9kZUluc2VydGVkJywgdGhpcywgdHJ1ZSk7CgogICAgICBpZiAob3B0aW9ucy5jaGlsZExpc3QgfHwgb3B0aW9ucy5zdWJ0cmVlKQogICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NTm9kZVJlbW92ZWQnLCB0aGlzLCB0cnVlKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBZGRzIGEgdHJhbnNpZW50IG9ic2VydmVyIG9uIG5vZGUuIFRoZSB0cmFuc2llbnQgb2JzZXJ2ZXIgZ2V0cyByZW1vdmVkCiAgICAgKiBuZXh0IHRpbWUgd2UgZGVsaXZlciB0aGUgY2hhbmdlIHJlY29yZHMuCiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUKICAgICAqLwogICAgYWRkVHJhbnNpZW50T2JzZXJ2ZXI6IGZ1bmN0aW9uKG5vZGUpIHsKICAgICAgLy8gRG9uJ3QgYWRkIHRyYW5zaWVudCBvYnNlcnZlcnMgb24gdGhlIHRhcmdldCBpdHNlbGYuIFdlIGFscmVhZHkgaGF2ZSBhbGwKICAgICAgLy8gdGhlIHJlcXVpcmVkIGxpc3RlbmVycyBzZXQgdXAgb24gdGhlIHRhcmdldC4KICAgICAgaWYgKG5vZGUgPT09IHRoaXMudGFyZ2V0KQogICAgICAgIHJldHVybjsKCiAgICAgIHRoaXMuYWRkTGlzdGVuZXJzXyhub2RlKTsKICAgICAgdGhpcy50cmFuc2llbnRPYnNlcnZlZE5vZGVzLnB1c2gobm9kZSk7CiAgICAgIHZhciByZWdpc3RyYXRpb25zID0gcmVnaXN0cmF0aW9uc1RhYmxlLmdldChub2RlKTsKICAgICAgaWYgKCFyZWdpc3RyYXRpb25zKQogICAgICAgIHJlZ2lzdHJhdGlvbnNUYWJsZS5zZXQobm9kZSwgcmVnaXN0cmF0aW9ucyA9IFtdKTsKCiAgICAgIC8vIFdlIGtub3cgdGhhdCByZWdpc3RyYXRpb25zIGRvZXMgbm90IGNvbnRhaW4gdGhpcyBiZWNhdXNlIHdlIGFscmVhZHkKICAgICAgLy8gY2hlY2tlZCBpZiBub2RlID09PSB0aGlzLnRhcmdldC4KICAgICAgcmVnaXN0cmF0aW9ucy5wdXNoKHRoaXMpOwogICAgfSwKCiAgICByZW1vdmVUcmFuc2llbnRPYnNlcnZlcnM6IGZ1bmN0aW9uKCkgewogICAgICB2YXIgdHJhbnNpZW50T2JzZXJ2ZWROb2RlcyA9IHRoaXMudHJhbnNpZW50T2JzZXJ2ZWROb2RlczsKICAgICAgdGhpcy50cmFuc2llbnRPYnNlcnZlZE5vZGVzID0gW107CgogICAgICB0cmFuc2llbnRPYnNlcnZlZE5vZGVzLmZvckVhY2goZnVuY3Rpb24obm9kZSkgewogICAgICAgIC8vIFRyYW5zaWVudCBvYnNlcnZlcnMgYXJlIG5ldmVyIGFkZGVkIHRvIHRoZSB0YXJnZXQuCiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnNfKG5vZGUpOwoKICAgICAgICB2YXIgcmVnaXN0cmF0aW9ucyA9IHJlZ2lzdHJhdGlvbnNUYWJsZS5nZXQobm9kZSk7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyYXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uc1tpXSA9PT0gdGhpcykgewogICAgICAgICAgICByZWdpc3RyYXRpb25zLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgLy8gRWFjaCBub2RlIGNhbiBvbmx5IGhhdmUgb25lIHJlZ2lzdGVyZWQgb2JzZXJ2ZXIgYXNzb2NpYXRlZCB3aXRoCiAgICAgICAgICAgIC8vIHRoaXMgb2JzZXJ2ZXIuCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgdGhpcyk7CiAgICB9LAoKICAgIGhhbmRsZUV2ZW50OiBmdW5jdGlvbihlKSB7CiAgICAgIC8vIFN0b3AgcHJvcGFnYXRpb24gc2luY2Ugd2UgYXJlIG1hbmFnaW5nIHRoZSBwcm9wYWdhdGlvbiBtYW51YWxseS4KICAgICAgLy8gVGhpcyBtZWFucyB0aGF0IG90aGVyIG11dGF0aW9uIGV2ZW50cyBvbiB0aGUgcGFnZSB3aWxsIG5vdCB3b3JrCiAgICAgIC8vIGNvcnJlY3RseSBidXQgdGhhdCBpcyBieSBkZXNpZ24uCiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CgogICAgICBzd2l0Y2ggKGUudHlwZSkgewogICAgICAgIGNhc2UgJ0RPTUF0dHJNb2RpZmllZCc6CiAgICAgICAgICAvLyBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1tby1xdWV1ZS1hdHRyaWJ1dGVzCgogICAgICAgICAgdmFyIG5hbWUgPSBlLmF0dHJOYW1lOwogICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IGUucmVsYXRlZE5vZGUubmFtZXNwYWNlVVJJOwogICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0OwoKICAgICAgICAgIC8vIDEuCiAgICAgICAgICB2YXIgcmVjb3JkID0gbmV3IGdldFJlY29yZCgnYXR0cmlidXRlcycsIHRhcmdldCk7CiAgICAgICAgICByZWNvcmQuYXR0cmlidXRlTmFtZSA9IG5hbWU7CiAgICAgICAgICByZWNvcmQuYXR0cmlidXRlTmFtZXNwYWNlID0gbmFtZXNwYWNlOwoKICAgICAgICAgIC8vIDIuCiAgICAgICAgICB2YXIgb2xkVmFsdWUgPQogICAgICAgICAgICAgIGUuYXR0ckNoYW5nZSA9PT0gTXV0YXRpb25FdmVudC5BRERJVElPTiA/IG51bGwgOiBlLnByZXZWYWx1ZTsKCiAgICAgICAgICBmb3JFYWNoQW5jZXN0b3JBbmRPYnNlcnZlckVucXVldWVSZWNvcmQodGFyZ2V0LCBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgICAgIC8vIDMuMSwgNC4yCiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hdHRyaWJ1dGVzKQogICAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgICAgIC8vIDMuMiwgNC4zCiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHJpYnV0ZUZpbHRlciAmJiBvcHRpb25zLmF0dHJpYnV0ZUZpbHRlci5sZW5ndGggJiYKICAgICAgICAgICAgICAgIG9wdGlvbnMuYXR0cmlidXRlRmlsdGVyLmluZGV4T2YobmFtZSkgPT09IC0xICYmCiAgICAgICAgICAgICAgICBvcHRpb25zLmF0dHJpYnV0ZUZpbHRlci5pbmRleE9mKG5hbWVzcGFjZSkgPT09IC0xKSB7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIDMuMywgNC40CiAgICAgICAgICAgIGlmIChvcHRpb25zLmF0dHJpYnV0ZU9sZFZhbHVlKQogICAgICAgICAgICAgIHJldHVybiBnZXRSZWNvcmRXaXRoT2xkVmFsdWUob2xkVmFsdWUpOwoKICAgICAgICAgICAgLy8gMy40LCA0LjUKICAgICAgICAgICAgcmV0dXJuIHJlY29yZDsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWQnOgogICAgICAgICAgLy8gaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbW8tcXVldWUtY2hhcmFjdGVyZGF0YQogICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0OwoKICAgICAgICAgIC8vIDEuCiAgICAgICAgICB2YXIgcmVjb3JkID0gZ2V0UmVjb3JkKCdjaGFyYWN0ZXJEYXRhJywgdGFyZ2V0KTsKCiAgICAgICAgICAvLyAyLgogICAgICAgICAgdmFyIG9sZFZhbHVlID0gZS5wcmV2VmFsdWU7CgoKICAgICAgICAgIGZvckVhY2hBbmNlc3RvckFuZE9ic2VydmVyRW5xdWV1ZVJlY29yZCh0YXJnZXQsIGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICAgICAgLy8gMy4xLCA0LjIKICAgICAgICAgICAgaWYgKCFvcHRpb25zLmNoYXJhY3RlckRhdGEpCiAgICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICAgICAgLy8gMy4yLCA0LjMKICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hhcmFjdGVyRGF0YU9sZFZhbHVlKQogICAgICAgICAgICAgIHJldHVybiBnZXRSZWNvcmRXaXRoT2xkVmFsdWUob2xkVmFsdWUpOwoKICAgICAgICAgICAgLy8gMy4zLCA0LjQKICAgICAgICAgICAgcmV0dXJuIHJlY29yZDsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdET01Ob2RlUmVtb3ZlZCc6CiAgICAgICAgICB0aGlzLmFkZFRyYW5zaWVudE9ic2VydmVyKGUudGFyZ2V0KTsKICAgICAgICAgIC8vIEZhbGwgdGhyb3VnaC4KICAgICAgICBjYXNlICdET01Ob2RlSW5zZXJ0ZWQnOgogICAgICAgICAgLy8gaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbW8tcXVldWUtY2hpbGRsaXN0CiAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS5yZWxhdGVkTm9kZTsKICAgICAgICAgIHZhciBjaGFuZ2VkTm9kZSA9IGUudGFyZ2V0OwogICAgICAgICAgdmFyIGFkZGVkTm9kZXMsIHJlbW92ZWROb2RlczsKICAgICAgICAgIGlmIChlLnR5cGUgPT09ICdET01Ob2RlSW5zZXJ0ZWQnKSB7CiAgICAgICAgICAgIGFkZGVkTm9kZXMgPSBbY2hhbmdlZE5vZGVdOwogICAgICAgICAgICByZW1vdmVkTm9kZXMgPSBbXTsKICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICBhZGRlZE5vZGVzID0gW107CiAgICAgICAgICAgIHJlbW92ZWROb2RlcyA9IFtjaGFuZ2VkTm9kZV07CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcHJldmlvdXNTaWJsaW5nID0gY2hhbmdlZE5vZGUucHJldmlvdXNTaWJsaW5nOwogICAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gY2hhbmdlZE5vZGUubmV4dFNpYmxpbmc7CgogICAgICAgICAgLy8gMS4KICAgICAgICAgIHZhciByZWNvcmQgPSBnZXRSZWNvcmQoJ2NoaWxkTGlzdCcsIHRhcmdldCk7CiAgICAgICAgICByZWNvcmQuYWRkZWROb2RlcyA9IGFkZGVkTm9kZXM7CiAgICAgICAgICByZWNvcmQucmVtb3ZlZE5vZGVzID0gcmVtb3ZlZE5vZGVzOwogICAgICAgICAgcmVjb3JkLnByZXZpb3VzU2libGluZyA9IHByZXZpb3VzU2libGluZzsKICAgICAgICAgIHJlY29yZC5uZXh0U2libGluZyA9IG5leHRTaWJsaW5nOwoKICAgICAgICAgIGZvckVhY2hBbmNlc3RvckFuZE9ic2VydmVyRW5xdWV1ZVJlY29yZCh0YXJnZXQsIGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICAgICAgLy8gMi4xLCAzLjIKICAgICAgICAgICAgaWYgKCFvcHRpb25zLmNoaWxkTGlzdCkKICAgICAgICAgICAgICByZXR1cm47CgogICAgICAgICAgICAvLyAyLjIsIDMuMwogICAgICAgICAgICByZXR1cm4gcmVjb3JkOwogICAgICAgICAgfSk7CgogICAgICB9CgogICAgICBjbGVhclJlY29yZHMoKTsKICAgIH0KICB9OwoKICBnbG9iYWwuSnNNdXRhdGlvbk9ic2VydmVyID0gSnNNdXRhdGlvbk9ic2VydmVyOwoKfSkodGhpcyk7CgovKgogKiBDb3B5cmlnaHQgMjAxMyBUaGUgUG9seW1lciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZQogKiBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCiAqLwoKaWYgKCF3aW5kb3cuTXV0YXRpb25PYnNlcnZlcikgewogIHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyID0gCiAgICAgIHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8IAogICAgICB3aW5kb3cuSnNNdXRhdGlvbk9ic2VydmVyOwogIGlmICghTXV0YXRpb25PYnNlcnZlcikgewogICAgdGhyb3cgbmV3IEVycm9yKCJubyBtdXRhdGlvbiBvYnNlcnZlciBzdXBwb3J0Iik7CiAgfQp9CgovKgogKiBDb3B5cmlnaHQgMjAxMyBUaGUgUG9seW1lciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZQogKiBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCiAqLwoKLyoqCiAqIEltcGxlbWVudHMgYGRvY3VtZW50LnJlZ2lzdGVyYAogKiBAbW9kdWxlIEN1c3RvbUVsZW1lbnRzCiovCgovKioKICogUG9seWZpbGxlZCBleHRlbnNpb25zIHRvIHRoZSBgZG9jdW1lbnRgIG9iamVjdC4KICogQGNsYXNzIERvY3VtZW50CiovCgooZnVuY3Rpb24oc2NvcGUpIHsKCi8vIGltcG9ydHMKCmlmICghc2NvcGUpIHsKICBzY29wZSA9IHdpbmRvdy5DdXN0b21FbGVtZW50cyA9IHtmbGFnczp7fX07Cn0KdmFyIGZsYWdzID0gc2NvcGUuZmxhZ3M7CgovLyBuYXRpdmUgZG9jdW1lbnQucmVnaXN0ZXI/Cgp2YXIgaGFzTmF0aXZlID0gQm9vbGVhbihkb2N1bWVudC5yZWdpc3Rlcik7CnZhciB1c2VOYXRpdmUgPSAhZmxhZ3MucmVnaXN0ZXIgJiYgaGFzTmF0aXZlOwoKaWYgKHVzZU5hdGl2ZSkgewoKICAvLyBzdHViCiAgdmFyIG5vcCA9IGZ1bmN0aW9uKCkge307CgogIC8vIGV4cG9ydHMKICBzY29wZS5yZWdpc3RyeSA9IHt9OwogIHNjb3BlLnVwZ3JhZGVFbGVtZW50ID0gbm9wOwogIAogIHNjb3BlLndhdGNoU2hhZG93ID0gbm9wOwogIHNjb3BlLnVwZ3JhZGUgPSBub3A7CiAgc2NvcGUudXBncmFkZUFsbCA9IG5vcDsKICBzY29wZS51cGdyYWRlU3VidHJlZSA9IG5vcDsKICBzY29wZS5vYnNlcnZlRG9jdW1lbnQgPSBub3A7CiAgc2NvcGUudXBncmFkZURvY3VtZW50ID0gbm9wOwogIHNjb3BlLnRha2VSZWNvcmRzID0gbm9wOwoKfSBlbHNlIHsKCiAgLyoqCiAgICogUmVnaXN0ZXJzIGEgY3VzdG9tIHRhZyBuYW1lIHdpdGggdGhlIGRvY3VtZW50LgogICAqCiAgICogV2hlbiBhIHJlZ2lzdGVyZWQgZWxlbWVudCBpcyBjcmVhdGVkLCBhIGByZWFkeUNhbGxiYWNrYCBtZXRob2QgaXMgY2FsbGVkCiAgICogaW4gdGhlIHNjb3BlIG9mIHRoZSBlbGVtZW50LiBUaGUgYHJlYWR5Q2FsbGJhY2tgIG1ldGhvZCBjYW4gYmUgc3BlY2lmaWVkIG9uCiAgICogZWl0aGVyIGBvcHRpb25zLnByb3RvdHlwZWAgb3IgYG9wdGlvbnMubGlmZWN5Y2xlYCB3aXRoIHRoZSBsYXR0ZXIgdGFraW5nCiAgICogcHJlY2VkZW5jZS4KICAgKgogICAqIEBtZXRob2QgcmVnaXN0ZXIKICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgdGFnIG5hbWUgdG8gcmVnaXN0ZXIuIE11c3QgaW5jbHVkZSBhIGRhc2ggKCctJyksCiAgICogICAgZm9yIGV4YW1wbGUgJ3gtY29tcG9uZW50Jy4KICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwogICAqICAgIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5leHRlbmRzXQogICAqICAgICAgKF9vZmYgc3BlY18pIFRhZyBuYW1lIG9mIGFuIGVsZW1lbnQgdG8gZXh0ZW5kIChvciBibGFuayBmb3IgYSBuZXcKICAgKiAgICAgIGVsZW1lbnQpLiBUaGlzIHBhcmFtZXRlciBpcyBub3QgcGFydCBvZiB0aGUgc3BlY2lmaWNhdGlvbiwgYnV0IGluc3RlYWQKICAgKiAgICAgIGlzIGEgaGludCBmb3IgdGhlIHBvbHlmaWxsIGJlY2F1c2UgdGhlIGV4dGVuZGVlIGlzIGRpZmZpY3VsdCB0byBpbmZlci4KICAgKiAgICAgIFJlbWVtYmVyIHRoYXQgdGhlIGlucHV0IHByb3RvdHlwZSBtdXN0IGNoYWluIHRvIHRoZSBleHRlbmRlZCBlbGVtZW50J3MKICAgKiAgICAgIHByb3RvdHlwZSAob3IgSFRNTEVsZW1lbnQucHJvdG90eXBlKSByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZgogICAqICAgICAgYGV4dGVuZHNgLgogICAqICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnByb3RvdHlwZSBUaGUgcHJvdG90eXBlIHRvIHVzZSBmb3IgdGhlIG5ldwogICAqICAgICAgZWxlbWVudC4gVGhlIHByb3RvdHlwZSBtdXN0IGluaGVyaXQgZnJvbSBIVE1MRWxlbWVudC4KICAgKiAgICBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMubGlmZWN5Y2xlXQogICAqICAgICAgQ2FsbGJhY2tzIHRoYXQgZmlyZSBhdCBpbXBvcnRhbnQgcGhhc2VzIGluIHRoZSBsaWZlIG9mIHRoZSBjdXN0b20KICAgKiAgICAgIGVsZW1lbnQuCiAgICoKICAgKiBAZXhhbXBsZQogICAqICAgICAgRmFuY3lCdXR0b24gPSBkb2N1bWVudC5yZWdpc3RlcigiZmFuY3ktYnV0dG9uIiwgewogICAqICAgICAgICBleHRlbmRzOiAnYnV0dG9uJywKICAgKiAgICAgICAgcHJvdG90eXBlOiBPYmplY3QuY3JlYXRlKEhUTUxCdXR0b25FbGVtZW50LnByb3RvdHlwZSwgewogICAqICAgICAgICAgIHJlYWR5Q2FsbGJhY2s6IHsKICAgKiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHsKICAgKiAgICAgICAgICAgICAgY29uc29sZS5sb2coImEgZmFuY3ktYnV0dG9uIHdhcyBjcmVhdGVkIiwKICAgKiAgICAgICAgICAgIH0KICAgKiAgICAgICAgICB9CiAgICogICAgICAgIH0pCiAgICogICAgICB9KTsKICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gQ29uc3RydWN0b3IgZm9yIHRoZSBuZXdseSByZWdpc3RlcmVkIHR5cGUuCiAgICovCiAgZnVuY3Rpb24gcmVnaXN0ZXIobmFtZSwgb3B0aW9ucykgewogICAgLy9jb25zb2xlLndhcm4oJ2RvY3VtZW50LnJlZ2lzdGVyKCInICsgbmFtZSArICciLCAnLCBvcHRpb25zLCAnKScpOwogICAgLy8gY29uc3RydWN0IGEgZGVmaW50aW9uIG91dCBvZiBvcHRpb25zCiAgICAvLyBUT0RPKHNqbWlsZXMpOiBwcm9iYWJseSBzaG91bGQgY2xvbmUgb3B0aW9ucyBpbnN0ZWFkIG9mIG11dGF0aW5nIGl0CiAgICB2YXIgZGVmaW5pdGlvbiA9IG9wdGlvbnMgfHwge307CiAgICBpZiAoIW5hbWUpIHsKICAgICAgLy8gVE9ETyhzam1pbGVzKTogcmVwbGFjZSB3aXRoIG1vcmUgYXBwcm9wcmlhdGUgZXJyb3IgKEVyaWNCIGNhbiBwcm9iYWJseQogICAgICAvLyBvZmZlciBndWlkYW5jZSkKICAgICAgdGhyb3cgbmV3IEVycm9yKCdkb2N1bWVudC5yZWdpc3RlcjogZmlyc3QgYXJndW1lbnQgYG5hbWVgIG11c3Qgbm90IGJlIGVtcHR5Jyk7CiAgICB9CiAgICBpZiAobmFtZS5pbmRleE9mKCctJykgPCAwKSB7CiAgICAgIC8vIFRPRE8oc2ptaWxlcyk6IHJlcGxhY2Ugd2l0aCBtb3JlIGFwcHJvcHJpYXRlIGVycm9yIChFcmljQiBjYW4gcHJvYmFibHkKICAgICAgLy8gb2ZmZXIgZ3VpZGFuY2UpCiAgICAgIHRocm93IG5ldyBFcnJvcignZG9jdW1lbnQucmVnaXN0ZXI6IGZpcnN0IGFyZ3VtZW50IChcJ25hbWVcJykgbXVzdCBjb250YWluIGEgZGFzaCAoXCctXCcpLiBBcmd1bWVudCBwcm92aWRlZCB3YXMgXCcnICsgU3RyaW5nKG5hbWUpICsgJ1wnLicpOwogICAgfQogICAgLy8gcmVjb3JkIG5hbWUKICAgIGRlZmluaXRpb24ubmFtZSA9IG5hbWU7CiAgICAvLyBtdXN0IGhhdmUgYSBwcm90b3R5cGUsIGRlZmF1bHQgdG8gYW4gZXh0ZW5zaW9uIG9mIEhUTUxFbGVtZW50CiAgICAvLyBUT0RPKHNqbWlsZXMpOiBwcm9iYWJseSBzaG91bGQgdGhyb3cgaWYgbm8gcHJvdG90eXBlLCBjaGVjayBzcGVjCiAgICBpZiAoIWRlZmluaXRpb24ucHJvdG90eXBlKSB7CiAgICAgIC8vIFRPRE8oc2ptaWxlcyk6IHJlcGxhY2Ugd2l0aCBtb3JlIGFwcHJvcHJpYXRlIGVycm9yIChFcmljQiBjYW4gcHJvYmFibHkKICAgICAgLy8gb2ZmZXIgZ3VpZGFuY2UpCiAgICAgIHRocm93IG5ldyBFcnJvcignT3B0aW9ucyBtaXNzaW5nIHJlcXVpcmVkIHByb3RvdHlwZSBwcm9wZXJ0eScpOwogICAgfQogICAgLy8gZW5zdXJlIGEgbGlmZWN5Y2xlIG9iamVjdCBzbyB3ZSBkb24ndCBoYXZlIHRvIG51bGwgdGVzdCBpdAogICAgZGVmaW5pdGlvbi5saWZlY3ljbGUgPSBkZWZpbml0aW9uLmxpZmVjeWNsZSB8fCB7fTsKICAgIC8vIGJ1aWxkIGEgbGlzdCBvZiBhbmNlc3RyYWwgY3VzdG9tIGVsZW1lbnRzIChmb3IgbmF0aXZlIGJhc2UgZGV0ZWN0aW9uKQogICAgLy8gVE9ETyhzam1pbGVzKTogd2UgdXNlZCB0byBuZWVkIHRvIHN0b3JlIHRoaXMsIGJ1dCBjdXJyZW50IGNvZGUgb25seQogICAgLy8gdXNlcyBpdCBpbiAncmVzb2x2ZVRhZ05hbWUnOiBpdCBzaG91bGQgcHJvYmFibHkgYmUgaW5saW5lZAogICAgZGVmaW5pdGlvbi5hbmNlc3RyeSA9IGFuY2VzdHJ5KGRlZmluaXRpb24uZXh0ZW5kcyk7CiAgICAvLyBleHRlbnNpb25zIG9mIG5hdGl2ZSBzcGVjaWFsaXphdGlvbnMgb2YgSFRNTEVsZW1lbnQgcmVxdWlyZSBsb2NhbE5hbWUKICAgIC8vIHRvIHJlbWFpbiBuYXRpdmUsIGFuZCB1c2Ugc2Vjb25kYXJ5ICdpcycgc3BlY2lmaWVyIGZvciBleHRlbnNpb24gdHlwZQogICAgcmVzb2x2ZVRhZ05hbWUoZGVmaW5pdGlvbik7CiAgICAvLyBzb21lIHBsYXRmb3JtcyByZXF1aXJlIG1vZGlmaWNhdGlvbnMgdG8gdGhlIHVzZXItc3VwcGxpZWQgcHJvdG90eXBlCiAgICAvLyBjaGFpbgogICAgcmVzb2x2ZVByb3RvdHlwZUNoYWluKGRlZmluaXRpb24pOwogICAgLy8gb3ZlcnJpZGVzIHRvIGltcGxlbWVudCBhdHRyaWJ1dGVDaGFuZ2VkIGNhbGxiYWNrCiAgICBvdmVycmlkZUF0dHJpYnV0ZUFwaShkZWZpbml0aW9uLnByb3RvdHlwZSk7CiAgICAvLyA3LjEuNTogUmVnaXN0ZXIgdGhlIERFRklOSVRJT04gd2l0aCBET0NVTUVOVAogICAgcmVnaXN0ZXJEZWZpbml0aW9uKG5hbWUsIGRlZmluaXRpb24pOwogICAgLy8gNy4xLjcuIFJ1biBjdXN0b20gZWxlbWVudCBjb25zdHJ1Y3RvciBnZW5lcmF0aW9uIGFsZ29yaXRobSB3aXRoIFBST1RPVFlQRQogICAgLy8gNy4xLjguIFJldHVybiB0aGUgb3V0cHV0IG9mIHRoZSBwcmV2aW91cyBzdGVwLgogICAgZGVmaW5pdGlvbi5jdG9yID0gZ2VuZXJhdGVDb25zdHJ1Y3RvcihkZWZpbml0aW9uKTsKICAgIGRlZmluaXRpb24uY3Rvci5wcm90b3R5cGUgPSBkZWZpbml0aW9uLnByb3RvdHlwZTsKICAgIC8vIGZvcmNlIG91ciAuY29uc3RydWN0b3IgdG8gYmUgb3VyIGFjdHVhbCBjb25zdHJ1Y3RvcgogICAgZGVmaW5pdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBkZWZpbml0aW9uLmN0b3I7CiAgICAvLyBpZiBpbml0aWFsIHBhcnNpbmcgaXMgY29tcGxldGUKICAgIGlmIChzY29wZS5yZWFkeSkgewogICAgICAvLyB1cGdyYWRlIGFueSBwcmUtZXhpc3Rpbmcgbm9kZXMgb2YgdGhpcyB0eXBlCiAgICAgIHNjb3BlLnVwZ3JhZGVBbGwoZG9jdW1lbnQpOwogICAgfQogICAgcmV0dXJuIGRlZmluaXRpb24uY3RvcjsKICB9CgogIGZ1bmN0aW9uIGFuY2VzdHJ5KGV4dG5kcykgewogICAgdmFyIGV4dGVuZGVlID0gcmVnaXN0cnlbZXh0bmRzXTsKICAgIGlmIChleHRlbmRlZSkgewogICAgICByZXR1cm4gYW5jZXN0cnkoZXh0ZW5kZWUuZXh0ZW5kcykuY29uY2F0KFtleHRlbmRlZV0pOwogICAgfQogICAgcmV0dXJuIFtdOwogIH0KCiAgZnVuY3Rpb24gcmVzb2x2ZVRhZ05hbWUoZGVmaW5pdGlvbikgewogICAgLy8gaWYgd2UgYXJlIGV4cGxpY2l0bHkgZXh0ZW5kaW5nIHNvbWV0aGluZywgdGhhdCB0aGluZyBpcyBvdXIKICAgIC8vIGJhc2VUYWcsIHVubGVzcyBpdCByZXByZXNlbnRzIGEgY3VzdG9tIGNvbXBvbmVudAogICAgdmFyIGJhc2VUYWcgPSBkZWZpbml0aW9uLmV4dGVuZHM7CiAgICAvLyBpZiBvdXIgYW5jZXN0cnkgaW5jbHVkZXMgY3VzdG9tIGNvbXBvbmVudHMsIHdlIG9ubHkgaGF2ZSBhCiAgICAvLyBiYXNlVGFnIGlmIG9uZSBvZiB0aGVtIGRvZXMKICAgIGZvciAodmFyIGk9MCwgYTsgKGE9ZGVmaW5pdGlvbi5hbmNlc3RyeVtpXSk7IGkrKykgewogICAgICBiYXNlVGFnID0gYS5pcyAmJiBhLnRhZzsKICAgIH0KICAgIC8vIG91ciB0YWcgaXMgb3VyIGJhc2VUYWcsIGlmIGl0IGV4aXN0cywgYW5kIG90aGVyd2lzZSBqdXN0IG91ciBuYW1lCiAgICBkZWZpbml0aW9uLnRhZyA9IGJhc2VUYWcgfHwgZGVmaW5pdGlvbi5uYW1lOwogICAgaWYgKGJhc2VUYWcpIHsKICAgICAgLy8gaWYgdGhlcmUgaXMgYSBiYXNlIHRhZywgdXNlIHNlY29uZGFyeSAnaXMnIHNwZWNpZmllcgogICAgICBkZWZpbml0aW9uLmlzID0gZGVmaW5pdGlvbi5uYW1lOwogICAgfQogIH0KCiAgZnVuY3Rpb24gcmVzb2x2ZVByb3RvdHlwZUNoYWluKGRlZmluaXRpb24pIHsKICAgIC8vIGlmIHdlIGRvbid0IHN1cHBvcnQgX19wcm90b19fIHdlIG5lZWQgdG8gbG9jYXRlIHRoZSBuYXRpdmUgbGV2ZWwKICAgIC8vIHByb3RvdHlwZSBmb3IgcHJlY2lzZSBtaXhpbmcgaW4KICAgIGlmICghT2JqZWN0Ll9fcHJvdG9fXykgewogICAgICAvLyBkZWZhdWx0IHByb3RvdHlwZQogICAgICB2YXIgbmF0aXZlUHJvdG90eXBlID0gSFRNTEVsZW1lbnQucHJvdG90eXBlOwogICAgICAvLyB3b3JrIG91dCBwcm90b3R5cGUgd2hlbiB1c2luZyB0eXBlLWV4dGVuc2lvbgogICAgICBpZiAoZGVmaW5pdGlvbi5pcykgewogICAgICAgIHZhciBpbnN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChkZWZpbml0aW9uLnRhZyk7CiAgICAgICAgbmF0aXZlUHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGluc3QpOwogICAgICB9CiAgICAgIC8vIGVuc3VyZSBfX3Byb3RvX18gcmVmZXJlbmNlIGlzIGluc3RhbGxlZCBhdCBlYWNoIHBvaW50IG9uIHRoZSBwcm90b3R5cGUKICAgICAgLy8gY2hhaW4uCiAgICAgIC8vIE5PVEU6IE9uIHBsYXRmb3JtcyB3aXRob3V0IF9fcHJvdG9fXywgYSBtaXhpbiBzdHJhdGVneSBpcyB1c2VkIGluc3RlYWQKICAgICAgLy8gb2YgcHJvdG90eXBlIHN3aXp6bGluZy4gSW4gdGhpcyBjYXNlLCB0aGlzIGdlbmVyYXRlZCBfX3Byb3RvX18gcHJvdmlkZXMKICAgICAgLy8gbGltaXRlZCBzdXBwb3J0IGZvciBwcm90b3R5cGUgdHJhdmVyc2FsLgogICAgICB2YXIgcHJvdG8gPSBkZWZpbml0aW9uLnByb3RvdHlwZSwgYW5jZXN0b3I7CiAgICAgIHdoaWxlIChwcm90byAmJiAocHJvdG8gIT09IG5hdGl2ZVByb3RvdHlwZSkpIHsKICAgICAgICB2YXIgYW5jZXN0b3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pOwogICAgICAgIHByb3RvLl9fcHJvdG9fXyA9IGFuY2VzdG9yOwogICAgICAgIHByb3RvID0gYW5jZXN0b3I7CiAgICAgIH0KICAgIH0KICAgIC8vIGNhY2hlIHRoaXMgaW4gY2FzZSBvZiBtaXhpbgogICAgZGVmaW5pdGlvbi5uYXRpdmUgPSBuYXRpdmVQcm90b3R5cGU7CiAgfQoKICAvLyBTRUNUSU9OIDQKCiAgZnVuY3Rpb24gaW5zdGFudGlhdGUoZGVmaW5pdGlvbikgewogICAgLy8gNC5hLjEuIENyZWF0ZSBhIG5ldyBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIFBST1RPVFlQRQogICAgLy8gNC5hLjIuIExldCBFTEVNRU5UIGJ5IHRoaXMgbmV3IG9iamVjdAogICAgLy8KICAgIC8vIHRoZSBjdXN0b20gZWxlbWVudCBpbnN0YW50aWF0aW9uIGFsZ29yaXRobSBtdXN0IGFsc28gZW5zdXJlIHRoYXQgdGhlCiAgICAvLyBvdXRwdXQgaXMgYSB2YWxpZCBET00gZWxlbWVudCB3aXRoIHRoZSBwcm9wZXIgd3JhcHBlciBpbiBwbGFjZS4KICAgIC8vCiAgICByZXR1cm4gdXBncmFkZShkb21DcmVhdGVFbGVtZW50KGRlZmluaXRpb24udGFnKSwgZGVmaW5pdGlvbik7CiAgfQoKICBmdW5jdGlvbiB1cGdyYWRlKGVsZW1lbnQsIGRlZmluaXRpb24pIHsKICAgIC8vIHNvbWUgZGVmaW5pdGlvbnMgc3BlY2lmeSBhbiAnaXMnIGF0dHJpYnV0ZQogICAgaWYgKGRlZmluaXRpb24uaXMpIHsKICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lzJywgZGVmaW5pdGlvbi5pcyk7CiAgICB9CiAgICAvLyBtYWtlICdlbGVtZW50JyBpbXBsZW1lbnQgZGVmaW5pdGlvbi5wcm90b3R5cGUKICAgIGltcGxlbWVudChlbGVtZW50LCBkZWZpbml0aW9uKTsKICAgIC8vIGZsYWcgYXMgdXBncmFkZWQKICAgIGVsZW1lbnQuX191cGdyYWRlZF9fID0gdHJ1ZTsKICAgIC8vIHRoZXJlIHNob3VsZCBuZXZlciBiZSBhIHNoYWRvdyByb290IG9uIGVsZW1lbnQgYXQgdGhpcyBwb2ludAogICAgLy8gd2UgcmVxdWlyZSBjaGlsZCBub2RlcyBiZSB1cGdyYWRlZCBiZWZvcmUgYGNyZWF0ZWRgCiAgICBzY29wZS51cGdyYWRlU3VidHJlZShlbGVtZW50KTsKICAgIC8vIGxpZmVjeWNsZSBtYW5hZ2VtZW50CiAgICBjcmVhdGVkKGVsZW1lbnQpOwogICAgLy8gT1VUUFVUCiAgICByZXR1cm4gZWxlbWVudDsKICB9CgogIGZ1bmN0aW9uIGltcGxlbWVudChlbGVtZW50LCBkZWZpbml0aW9uKSB7CiAgICAvLyBwcm90b3R5cGUgc3dpenpsaW5nIGlzIGJlc3QKICAgIGlmIChPYmplY3QuX19wcm90b19fKSB7CiAgICAgIGVsZW1lbnQuX19wcm90b19fID0gZGVmaW5pdGlvbi5wcm90b3R5cGU7CiAgICB9IGVsc2UgewogICAgICAvLyB3aGVyZSBhYm92ZSB3ZSBjYW4gcmUtYWNxdWlyZSBpblByb3RvdHlwZSB2aWEKICAgICAgLy8gZ2V0UHJvdG90eXBlT2YoRWxlbWVudCksIHdlIGNhbm5vdCBkbyBzbyB3aGVuCiAgICAgIC8vIHdlIHVzZSBtaXhpbiwgc28gd2UgaW5zdGFsbCBhIG1hZ2ljIHJlZmVyZW5jZQogICAgICBjdXN0b21NaXhpbihlbGVtZW50LCBkZWZpbml0aW9uLnByb3RvdHlwZSwgZGVmaW5pdGlvbi5uYXRpdmUpOwogICAgICBlbGVtZW50Ll9fcHJvdG9fXyA9IGRlZmluaXRpb24ucHJvdG90eXBlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gY3VzdG9tTWl4aW4oaW5UYXJnZXQsIGluU3JjLCBpbk5hdGl2ZSkgewogICAgLy8gVE9ETyhzam1pbGVzKTogJ3VzZWQnIGFsbG93cyB1cyB0byBvbmx5IGNvcHkgdGhlICd5b3VuZ2VzdCcgdmVyc2lvbiBvZgogICAgLy8gYW55IHByb3BlcnR5LiBUaGlzIHNldCBzaG91bGQgYmUgcHJlY2FsY3VsYXRlZC4gV2UgYWxzbyBuZWVkIHRvCiAgICAvLyBjb25zaWRlciB0aGlzIGZvciBzdXBwb3J0aW5nICdzdXBlcicuCiAgICB2YXIgdXNlZCA9IHt9OwogICAgLy8gc3RhcnQgd2l0aCBpblNyYwogICAgdmFyIHAgPSBpblNyYzsKICAgIC8vIHNvbWV0aW1lcyB0aGUgZGVmYXVsdCBpcyBIVE1MVW5rbm93bkVsZW1lbnQucHJvdG90eXBlIGluc3RlYWQgb2YKICAgIC8vIEhUTUxFbGVtZW50LnByb3RvdHlwZSwgc28gd2UgYWRkIGEgdGVzdAogICAgLy8gdGhlIGlkZWEgaXMgdG8gYXZvaWQgbWl4aW5nIGluIG5hdGl2ZSBwcm90b3R5cGVzLCBzbyBhZGRpbmcKICAgIC8vIHRoZSBzZWNvbmQgdGVzdCBpcyBXTE9HCiAgICB3aGlsZSAocCAhPT0gaW5OYXRpdmUgJiYgcCAhPT0gSFRNTFVua25vd25FbGVtZW50LnByb3RvdHlwZSkgewogICAgICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHApOwogICAgICBmb3IgKHZhciBpPTAsIGs7IGs9a2V5c1tpXTsgaSsrKSB7CiAgICAgICAgaWYgKCF1c2VkW2tdKSB7CiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaW5UYXJnZXQsIGssCiAgICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwLCBrKSk7CiAgICAgICAgICB1c2VkW2tdID0gMTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNyZWF0ZWQoZWxlbWVudCkgewogICAgLy8gaW52b2tlIGNyZWF0ZWRDYWxsYmFjawogICAgaWYgKGVsZW1lbnQuY3JlYXRlZENhbGxiYWNrKSB7CiAgICAgIGVsZW1lbnQuY3JlYXRlZENhbGxiYWNrKCk7CiAgICB9CiAgfQoKICAvLyBhdHRyaWJ1dGUgd2F0Y2hpbmcKCiAgZnVuY3Rpb24gb3ZlcnJpZGVBdHRyaWJ1dGVBcGkocHJvdG90eXBlKSB7CiAgICAvLyBvdmVycmlkZXMgdG8gaW1wbGVtZW50IGNhbGxiYWNrcwogICAgLy8gVE9ETyhzam1pbGVzKTogc2hvdWxkIHN1cHBvcnQgYWNjZXNzIHZpYSAuYXR0cmlidXRlcyBOYW1lZE5vZGVNYXAKICAgIC8vIFRPRE8oc2ptaWxlcyk6IHByZXNlcnZlcyB1c2VyIGRlZmluZWQgb3ZlcnJpZGVzLCBpZiBhbnkKICAgIHZhciBzZXRBdHRyaWJ1dGUgPSBwcm90b3R5cGUuc2V0QXR0cmlidXRlOwogICAgcHJvdG90eXBlLnNldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7CiAgICAgIGNoYW5nZUF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlLCBzZXRBdHRyaWJ1dGUpOwogICAgfQogICAgdmFyIHJlbW92ZUF0dHJpYnV0ZSA9IHByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGU7CiAgICBwcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgICAgY2hhbmdlQXR0cmlidXRlLmNhbGwodGhpcywgbmFtZSwgdmFsdWUsIHJlbW92ZUF0dHJpYnV0ZSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBjaGFuZ2VBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIG9wZXJhdGlvbikgewogICAgdmFyIG9sZFZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7CiAgICBvcGVyYXRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIGlmICh0aGlzLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayAKICAgICAgICAmJiAodGhpcy5nZXRBdHRyaWJ1dGUobmFtZSkgIT09IG9sZFZhbHVlKSkgewogICAgICB0aGlzLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSk7CiAgICB9CiAgfQoKICAvLyBlbGVtZW50IHJlZ2lzdHJ5IChtYXBzIHRhZyBuYW1lcyB0byBkZWZpbml0aW9ucykKCiAgdmFyIHJlZ2lzdHJ5ID0ge307CgogIGZ1bmN0aW9uIHJlZ2lzdGVyRGVmaW5pdGlvbihuYW1lLCBkZWZpbml0aW9uKSB7CiAgICByZWdpc3RyeVtuYW1lXSA9IGRlZmluaXRpb247CiAgfQoKICBmdW5jdGlvbiBnZW5lcmF0ZUNvbnN0cnVjdG9yKGRlZmluaXRpb24pIHsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGluc3RhbnRpYXRlKGRlZmluaXRpb24pOwogICAgfTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCB0eXBlRXh0ZW5zaW9uKSB7CiAgICAvLyBUT0RPKHNqbWlsZXMpOiBpZ25vcmUgJ3RhZycgd2hlbiB1c2luZyAndHlwZUV4dGVuc2lvbicsIHdlIGNvdWxkCiAgICAvLyBlcnJvciBjaGVjayBpdCwgb3IgcGVyaGFwcyB0aGVyZSBzaG91bGQgb25seSBldmVyIGJlIG9uZSBhcmd1bWVudAogICAgdmFyIGRlZmluaXRpb24gPSByZWdpc3RyeVt0eXBlRXh0ZW5zaW9uIHx8IHRhZ107CiAgICBpZiAoZGVmaW5pdGlvbikgewogICAgICByZXR1cm4gbmV3IGRlZmluaXRpb24uY3RvcigpOwogICAgfQogICAgcmV0dXJuIGRvbUNyZWF0ZUVsZW1lbnQodGFnKTsKICB9CgogIGZ1bmN0aW9uIHVwZ3JhZGVFbGVtZW50KGVsZW1lbnQpIHsKICAgIGlmICghZWxlbWVudC5fX3VwZ3JhZGVkX18gJiYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSkgewogICAgICB2YXIgdHlwZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpcycpIHx8IGVsZW1lbnQubG9jYWxOYW1lOwogICAgICB2YXIgZGVmaW5pdGlvbiA9IHJlZ2lzdHJ5W3R5cGVdOwogICAgICByZXR1cm4gZGVmaW5pdGlvbiAmJiB1cGdyYWRlKGVsZW1lbnQsIGRlZmluaXRpb24pOwogICAgfQogIH0KCiAgZnVuY3Rpb24gY2xvbmVOb2RlKGRlZXApIHsKICAgIC8vIGNhbGwgb3JpZ2luYWwgY2xvbmUKICAgIHZhciBuID0gZG9tQ2xvbmVOb2RlLmNhbGwodGhpcywgZGVlcCk7CiAgICAvLyB1cGdyYWRlIHRoZSBlbGVtZW50IGFuZCBzdWJ0cmVlCiAgICBzY29wZS51cGdyYWRlQWxsKG4pOwogICAgLy8gcmV0dXJuIHRoZSBjbG9uZQogICAgcmV0dXJuIG47CiAgfQogIC8vIGNhcHR1cmUgbmF0aXZlIGNyZWF0ZUVsZW1lbnQgYmVmb3JlIHdlIG92ZXJyaWRlIGl0CgogIHZhciBkb21DcmVhdGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudC5iaW5kKGRvY3VtZW50KTsKCiAgLy8gY2FwdHVyZSBuYXRpdmUgY2xvbmVOb2RlIGJlZm9yZSB3ZSBvdmVycmlkZSBpdAoKICB2YXIgZG9tQ2xvbmVOb2RlID0gTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlOwoKICAvLyBleHBvcnRzCgogIGRvY3VtZW50LnJlZ2lzdGVyID0gcmVnaXN0ZXI7CiAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQ7IC8vIG92ZXJyaWRlCiAgTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlID0gY2xvbmVOb2RlOyAvLyBvdmVycmlkZQoKICBzY29wZS5yZWdpc3RyeSA9IHJlZ2lzdHJ5OwoKICAvKioKICAgKiBVcGdyYWRlIGFuIGVsZW1lbnQgdG8gYSBjdXN0b20gZWxlbWVudC4gVXBncmFkaW5nIGFuIGVsZW1lbnQKICAgKiBjYXVzZXMgdGhlIGN1c3RvbSBwcm90b3R5cGUgdG8gYmUgYXBwbGllZCwgYW4gYGlzYCBhdHRyaWJ1dGUgCiAgICogdG8gYmUgYXR0YWNoZWQgKGFzIG5lZWRlZCksIGFuZCBpbnZvY2F0aW9uIG9mIHRoZSBgcmVhZHlDYWxsYmFja2AuCiAgICogYHVwZ3JhZGVgIGRvZXMgbm90aGluZyBpZiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IHVwZ3JhZGVkLCBvcgogICAqIGlmIGl0IG1hdGNoZXMgbm8gcmVnaXN0ZXJlZCBjdXN0b20gdGFnIG5hbWUuCiAgICoKICAgKiBAbWV0aG9kIHVncHJhZGUKICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gdXBncmFkZS4KICAgKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUgdXBncmFkZWQgZWxlbWVudC4KICAgKi8KICBzY29wZS51cGdyYWRlID0gdXBncmFkZUVsZW1lbnQ7Cn0KCnNjb3BlLmhhc05hdGl2ZSA9IGhhc05hdGl2ZTsKc2NvcGUudXNlTmF0aXZlID0gdXNlTmF0aXZlOwoKfSkod2luZG93LkN1c3RvbUVsZW1lbnRzKTsKCiAvKg0KQ29weXJpZ2h0IDIwMTMgVGhlIFBvbHltZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4NClVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlDQpsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuDQoqLw0KDQooZnVuY3Rpb24oc2NvcGUpew0KDQp2YXIgbG9nRmxhZ3MgPSB3aW5kb3cubG9nRmxhZ3MgfHwge307DQoNCi8vIHdhbGsgdGhlIHN1YnRyZWUgcm9vdGVkIGF0IG5vZGUsIGFwcGx5aW5nICdmaW5kKGVsZW1lbnQsIGRhdGEpJyBmdW5jdGlvbg0KLy8gdG8gZWFjaCBlbGVtZW50DQovLyBpZiAnZmluZCcgcmV0dXJucyB0cnVlIGZvciAnZWxlbWVudCcsIGRvIG5vdCBzZWFyY2ggZWxlbWVudCdzIHN1YnRyZWUNCmZ1bmN0aW9uIGZpbmRBbGwobm9kZSwgZmluZCwgZGF0YSkgew0KICB2YXIgZSA9IG5vZGUuZmlyc3RFbGVtZW50Q2hpbGQ7DQogIGlmICghZSkgew0KICAgIGUgPSBub2RlLmZpcnN0Q2hpbGQ7DQogICAgd2hpbGUgKGUgJiYgZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHsNCiAgICAgIGUgPSBlLm5leHRTaWJsaW5nOw0KICAgIH0NCiAgfQ0KICB3aGlsZSAoZSkgew0KICAgIGlmIChmaW5kKGUsIGRhdGEpICE9PSB0cnVlKSB7DQogICAgICBmaW5kQWxsKGUsIGZpbmQsIGRhdGEpOw0KICAgIH0NCiAgICBlID0gZS5uZXh0RWxlbWVudFNpYmxpbmc7DQogIH0NCiAgcmV0dXJuIG51bGw7DQp9DQoNCi8vIHdhbGsgYWxsIHNoYWRvd1Jvb3RzIG9uIGEgZ2l2ZW4gbm9kZS4NCmZ1bmN0aW9uIGZvclJvb3RzKG5vZGUsIGNiKSB7DQogIHZhciByb290ID0gbm9kZS5zaGFkb3dSb290Ow0KICB3aGlsZShyb290KSB7DQogICAgZm9yU3VidHJlZShyb290LCBjYik7DQogICAgcm9vdCA9IHJvb3Qub2xkZXJTaGFkb3dSb290Ow0KICB9DQp9DQoNCi8vIHdhbGsgdGhlIHN1YnRyZWUgcm9vdGVkIGF0IG5vZGUsIGluY2x1ZGluZyBkZXNjZW50IGludG8gc2hhZG93LXJvb3RzLA0KLy8gYXBwbHlpbmcgJ2NiJyB0byBlYWNoIGVsZW1lbnQNCmZ1bmN0aW9uIGZvclN1YnRyZWUobm9kZSwgY2IpIHsNCiAgLy9sb2dGbGFncy5kb20gJiYgbm9kZS5jaGlsZE5vZGVzICYmIG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggJiYgY29uc29sZS5ncm91cCgnc3ViVHJlZTogJywgbm9kZSk7DQogIGZpbmRBbGwobm9kZSwgZnVuY3Rpb24oZSkgew0KICAgIGlmIChjYihlKSkgew0KICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KICAgIGZvclJvb3RzKGUsIGNiKTsNCiAgfSk7DQogIGZvclJvb3RzKG5vZGUsIGNiKTsNCiAgLy9sb2dGbGFncy5kb20gJiYgbm9kZS5jaGlsZE5vZGVzICYmIG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggJiYgY29uc29sZS5ncm91cEVuZCgpOw0KfQ0KDQovLyBtYW5hZ2UgbGlmZWN5Y2xlIG9uIGFkZGVkIG5vZGUNCmZ1bmN0aW9uIGFkZGVkKG5vZGUpIHsNCiAgaWYgKHVwZ3JhZGUobm9kZSkpIHsNCiAgICBpbnNlcnRlZE5vZGUobm9kZSk7DQogICAgcmV0dXJuIHRydWU7DQogIH0NCiAgaW5zZXJ0ZWQobm9kZSk7DQp9DQoNCi8vIG1hbmFnZSBsaWZlY3ljbGUgb24gYWRkZWQgbm9kZSdzIHN1YnRyZWUgb25seQ0KZnVuY3Rpb24gYWRkZWRTdWJ0cmVlKG5vZGUpIHsNCiAgZm9yU3VidHJlZShub2RlLCBmdW5jdGlvbihlKSB7DQogICAgaWYgKGFkZGVkKGUpKSB7DQogICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogIH0pOw0KfQ0KDQovLyBtYW5hZ2UgbGlmZWN5Y2xlIG9uIGFkZGVkIG5vZGUgYW5kIGl0J3Mgc3VidHJlZQ0KZnVuY3Rpb24gYWRkZWROb2RlKG5vZGUpIHsNCiAgcmV0dXJuIGFkZGVkKG5vZGUpIHx8IGFkZGVkU3VidHJlZShub2RlKTsNCn0NCg0KLy8gdXBncmFkZSBjdXN0b20gZWxlbWVudHMgYXQgbm9kZSwgaWYgYXBwbGljYWJsZQ0KZnVuY3Rpb24gdXBncmFkZShub2RlKSB7DQogIGlmICghbm9kZS5fX3VwZ3JhZGVkX18gJiYgbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHsNCiAgICB2YXIgdHlwZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdpcycpIHx8IG5vZGUubG9jYWxOYW1lOw0KICAgIHZhciBkZWZpbml0aW9uID0gc2NvcGUucmVnaXN0cnlbdHlwZV07DQogICAgaWYgKGRlZmluaXRpb24pIHsNCiAgICAgIGxvZ0ZsYWdzLmRvbSAmJiBjb25zb2xlLmdyb3VwKCd1cGdyYWRlOicsIG5vZGUubG9jYWxOYW1lKTsNCiAgICAgIHNjb3BlLnVwZ3JhZGUobm9kZSk7DQogICAgICBsb2dGbGFncy5kb20gJiYgY29uc29sZS5ncm91cEVuZCgpOw0KICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KICB9DQp9DQoNCmZ1bmN0aW9uIGluc2VydGVkTm9kZShub2RlKSB7DQogIGluc2VydGVkKG5vZGUpOw0KICBpZiAoaW5Eb2N1bWVudChub2RlKSkgew0KICAgIGZvclN1YnRyZWUobm9kZSwgZnVuY3Rpb24oZSkgew0KICAgICAgaW5zZXJ0ZWQoZSk7DQogICAgfSk7DQogIH0NCn0NCg0KDQovLyBUT0RPKHNvcnZlbGwpOiBvbiBwbGF0Zm9ybXMgd2l0aG91dCBNdXRhdGlvbk9ic2VydmVyLCBtdXRhdGlvbnMgbWF5IG5vdCBiZSANCi8vIHJlbGlhYmxlIGFuZCB0aGVyZWZvcmUgZW50ZXJlZC9sZWZ0VmlldyBhcmUgbm90IHJlbGlhYmxlLg0KLy8gVG8gbWFrZSB0aGVzZSBjYWxsYmFja3MgbGVzcyBsaWtlbHkgdG8gZmFpbCwgd2UgZGVmZXIgYWxsIGluc2VydHMgYW5kIHJlbW92ZXMNCi8vIHRvIGdpdmUgYSBjaGFuY2UgZm9yIGVsZW1lbnRzIHRvIGJlIGluc2VydGVkIGludG8gZG9tLiANCi8vIFRoaXMgZW5zdXJlcyBlbnRlcmVkVmlld0NhbGxiYWNrIGZpcmVzIGZvciBlbGVtZW50cyB0aGF0IGFyZSBjcmVhdGVkIGFuZCANCi8vIGltbWVkaWF0ZWx5IGFkZGVkIHRvIGRvbS4NCnZhciBoYXNQb2x5ZmlsbE11dGF0aW9ucyA9ICghd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwNCiAgICAod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgPT09IHdpbmRvdy5Kc011dGF0aW9uT2JzZXJ2ZXIpKTsNCnNjb3BlLmhhc1BvbHlmaWxsTXV0YXRpb25zID0gaGFzUG9seWZpbGxNdXRhdGlvbnM7DQoNCnZhciBpc1BlbmRpbmdNdXRhdGlvbnMgPSBmYWxzZTsNCnZhciBwZW5kaW5nTXV0YXRpb25zID0gW107DQpmdW5jdGlvbiBkZWZlck11dGF0aW9uKGZuKSB7DQogIHBlbmRpbmdNdXRhdGlvbnMucHVzaChmbik7DQogIGlmICghaXNQZW5kaW5nTXV0YXRpb25zKSB7DQogICAgaXNQZW5kaW5nTXV0YXRpb25zID0gdHJ1ZTsNCiAgICB2YXIgYXN5bmMgPSAod2luZG93LlBsYXRmb3JtICYmIHdpbmRvdy5QbGF0Zm9ybS5lbmRPZk1pY3JvdGFzaykgfHwNCiAgICAgICAgc2V0VGltZW91dDsNCiAgICBhc3luYyh0YWtlTXV0YXRpb25zKTsNCiAgfQ0KfQ0KDQpmdW5jdGlvbiB0YWtlTXV0YXRpb25zKCkgew0KICBpc1BlbmRpbmdNdXRhdGlvbnMgPSBmYWxzZTsNCiAgdmFyICRwID0gcGVuZGluZ011dGF0aW9uczsNCiAgZm9yICh2YXIgaT0wLCBsPSRwLmxlbmd0aCwgcDsgKGk8bCkgJiYgKHA9JHBbaV0pOyBpKyspIHsNCiAgICBwKCk7DQogIH0NCiAgcGVuZGluZ011dGF0aW9ucyA9IFtdOw0KfQ0KDQpmdW5jdGlvbiBpbnNlcnRlZChlbGVtZW50KSB7DQogIGlmIChoYXNQb2x5ZmlsbE11dGF0aW9ucykgew0KICAgIGRlZmVyTXV0YXRpb24oZnVuY3Rpb24oKSB7DQogICAgICBfaW5zZXJ0ZWQoZWxlbWVudCk7DQogICAgfSk7DQogIH0gZWxzZSB7DQogICAgX2luc2VydGVkKGVsZW1lbnQpOw0KICB9DQp9DQoNCi8vIFRPRE8oc2ptaWxlcyk6IGlmIHRoZXJlIGFyZSBkZXNjZW50cyBpbnRvIHRyZWVzIHRoYXQgY2FuIG5ldmVyIGhhdmUgaW5Eb2N1bWVudCgqKSB0cnVlLCBmaXggdGhpcw0KZnVuY3Rpb24gX2luc2VydGVkKGVsZW1lbnQpIHsNCiAgLy8gVE9ETyhzam1pbGVzKTogaXQncyBwb3NzaWJsZSB3ZSB3ZXJlIGluc2VydGVkIGFuZCByZW1vdmVkIGluIHRoZSBzcGFjZQ0KICAvLyBvZiBvbmUgbWljcm90YXNrLCBpbiB3aGljaCBjYXNlIHdlIHdvbid0IGJlICdpbkRvY3VtZW50JyBoZXJlDQogIC8vIEJ1dCB0aGVyZSBhcmUgb3RoZXIgY2FzZXMgd2hlcmUgd2UgYXJlIHRlc3RpbmcgZm9yIGluc2VydGVkIHdpdGhvdXQNCiAgLy8gc3BlY2lmaWMga25vd2xlZGdlIG9mIG11dGF0aW9ucywgYW5kIG11c3QgdGVzdCAnaW5Eb2N1bWVudCcgdG8gZGV0ZXJtaW5lDQogIC8vIHdoZXRoZXIgdG8gY2FsbCBpbnNlcnRlZA0KICAvLyBJZiB3ZSBjYW4gZmFjdG9yIHRoZXNlIGNhc2VzIGludG8gc2VwYXJhdGUgY29kZSBwYXRocyB3ZSBjYW4gaGF2ZQ0KICAvLyBiZXR0ZXIgZGlhZ25vc3RpY3MuDQogIC8vIFRPRE8oc2ptaWxlcyk6IHdoZW4gbG9nZ2luZywgZG8gd29yayBvbiBhbGwgY3VzdG9tIGVsZW1lbnRzIHNvIHdlIGNhbg0KICAvLyB0cmFjayBiZWhhdmlvciBldmVuIHdoZW4gY2FsbGJhY2tzIG5vdCBkZWZpbmVkDQogIC8vY29uc29sZS5sb2coJ2luc2VydGVkOiAnLCBlbGVtZW50LmxvY2FsTmFtZSk7DQogIGlmIChlbGVtZW50LmVudGVyZWRWaWV3Q2FsbGJhY2sgfHwgKGVsZW1lbnQuX191cGdyYWRlZF9fICYmIGxvZ0ZsYWdzLmRvbSkpIHsNCiAgICBsb2dGbGFncy5kb20gJiYgY29uc29sZS5ncm91cCgnaW5zZXJ0ZWQ6JywgZWxlbWVudC5sb2NhbE5hbWUpOw0KICAgIGlmIChpbkRvY3VtZW50KGVsZW1lbnQpKSB7DQogICAgICBlbGVtZW50Ll9faW5zZXJ0ZWQgPSAoZWxlbWVudC5fX2luc2VydGVkIHx8IDApICsgMTsNCiAgICAgIC8vIGlmIHdlIGFyZSBpbiBhICdyZW1vdmVkJyBzdGF0ZSwgYmx1bnRseSBhZGp1c3QgdG8gYW4gJ2luc2VydGVkJyBzdGF0ZQ0KICAgICAgaWYgKGVsZW1lbnQuX19pbnNlcnRlZCA8IDEpIHsNCiAgICAgICAgZWxlbWVudC5fX2luc2VydGVkID0gMTsNCiAgICAgIH0NCiAgICAgIC8vIGlmIHdlIGFyZSAnb3ZlciBpbnNlcnRlZCcsIHNxdWVsY2ggdGhlIGNhbGxiYWNrDQogICAgICBpZiAoZWxlbWVudC5fX2luc2VydGVkID4gMSkgew0KICAgICAgICBsb2dGbGFncy5kb20gJiYgY29uc29sZS53YXJuKCdpbnNlcnRlZDonLCBlbGVtZW50LmxvY2FsTmFtZSwNCiAgICAgICAgICAnaW5zZXJ0L3JlbW92ZSBjb3VudDonLCBlbGVtZW50Ll9faW5zZXJ0ZWQpDQogICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuZW50ZXJlZFZpZXdDYWxsYmFjaykgew0KICAgICAgICBsb2dGbGFncy5kb20gJiYgY29uc29sZS5sb2coJ2luc2VydGVkOicsIGVsZW1lbnQubG9jYWxOYW1lKTsNCiAgICAgICAgZWxlbWVudC5lbnRlcmVkVmlld0NhbGxiYWNrKCk7DQogICAgICB9DQogICAgfQ0KICAgIGxvZ0ZsYWdzLmRvbSAmJiBjb25zb2xlLmdyb3VwRW5kKCk7DQogIH0NCn0NCg0KZnVuY3Rpb24gcmVtb3ZlZE5vZGUobm9kZSkgew0KICByZW1vdmVkKG5vZGUpOw0KICBmb3JTdWJ0cmVlKG5vZGUsIGZ1bmN0aW9uKGUpIHsNCiAgICByZW1vdmVkKGUpOw0KICB9KTsNCn0NCg0KDQpmdW5jdGlvbiByZW1vdmVkKGVsZW1lbnQpIHsNCiAgaWYgKGhhc1BvbHlmaWxsTXV0YXRpb25zKSB7DQogICAgZGVmZXJNdXRhdGlvbihmdW5jdGlvbigpIHsNCiAgICAgIF9yZW1vdmVkKGVsZW1lbnQpOw0KICAgIH0pOw0KICB9IGVsc2Ugew0KICAgIF9yZW1vdmVkKGVsZW1lbnQpOw0KICB9DQp9DQoNCmZ1bmN0aW9uIHJlbW92ZWQoZWxlbWVudCkgew0KICAvLyBUT0RPKHNqbWlsZXMpOiB0ZW1wb3Jhcnk6IGRvIHdvcmsgb24gYWxsIGN1c3RvbSBlbGVtZW50cyBzbyB3ZSBjYW4gdHJhY2sNCiAgLy8gYmVoYXZpb3IgZXZlbiB3aGVuIGNhbGxiYWNrcyBub3QgZGVmaW5lZA0KICBpZiAoZWxlbWVudC5sZWZ0Vmlld0NhbGxiYWNrIHx8IChlbGVtZW50Ll9fdXBncmFkZWRfXyAmJiBsb2dGbGFncy5kb20pKSB7DQogICAgbG9nRmxhZ3MuZG9tICYmIGNvbnNvbGUubG9nKCdyZW1vdmVkOicsIGVsZW1lbnQubG9jYWxOYW1lKTsNCiAgICBpZiAoIWluRG9jdW1lbnQoZWxlbWVudCkpIHsNCiAgICAgIGVsZW1lbnQuX19pbnNlcnRlZCA9IChlbGVtZW50Ll9faW5zZXJ0ZWQgfHwgMCkgLSAxOw0KICAgICAgLy8gaWYgd2UgYXJlIGluIGEgJ2luc2VydGVkJyBzdGF0ZSwgYmx1bnRseSBhZGp1c3QgdG8gYW4gJ3JlbW92ZWQnIHN0YXRlDQogICAgICBpZiAoZWxlbWVudC5fX2luc2VydGVkID4gMCkgew0KICAgICAgICBlbGVtZW50Ll9faW5zZXJ0ZWQgPSAwOw0KICAgICAgfQ0KICAgICAgLy8gaWYgd2UgYXJlICdvdmVyIHJlbW92ZWQnLCBzcXVlbGNoIHRoZSBjYWxsYmFjaw0KICAgICAgaWYgKGVsZW1lbnQuX19pbnNlcnRlZCA8IDApIHsNCiAgICAgICAgbG9nRmxhZ3MuZG9tICYmIGNvbnNvbGUud2FybigncmVtb3ZlZDonLCBlbGVtZW50LmxvY2FsTmFtZSwNCiAgICAgICAgICAgICdpbnNlcnQvcmVtb3ZlIGNvdW50OicsIGVsZW1lbnQuX19pbnNlcnRlZCkNCiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5sZWZ0Vmlld0NhbGxiYWNrKSB7DQogICAgICAgIGVsZW1lbnQubGVmdFZpZXdDYWxsYmFjaygpOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KfQ0KDQpmdW5jdGlvbiBpbkRvY3VtZW50KGVsZW1lbnQpIHsNCiAgdmFyIHAgPSBlbGVtZW50Ow0KICB2YXIgZG9jID0gd2luZG93LlNoYWRvd0RPTVBvbHlmaWxsICYmDQogICAgICB3aW5kb3cuU2hhZG93RE9NUG9seWZpbGwud3JhcElmTmVlZGVkKGRvY3VtZW50KSB8fCBkb2N1bWVudDsNCiAgd2hpbGUgKHApIHsNCiAgICBpZiAocCA9PSBkb2MpIHsNCiAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCiAgICBwID0gcC5wYXJlbnROb2RlIHx8IHAuaG9zdDsNCiAgfQ0KfQ0KDQpmdW5jdGlvbiB3YXRjaFNoYWRvdyhub2RlKSB7DQogIGlmIChub2RlLnNoYWRvd1Jvb3QgJiYgIW5vZGUuc2hhZG93Um9vdC5fX3dhdGNoZWQpIHsNCiAgICBsb2dGbGFncy5kb20gJiYgY29uc29sZS5sb2coJ3dhdGNoaW5nIHNoYWRvdy1yb290IGZvcjogJywgbm9kZS5sb2NhbE5hbWUpOw0KICAgIC8vIHdhdGNoIGFsbCB1bndhdGNoZWQgcm9vdHMuLi4NCiAgICB2YXIgcm9vdCA9IG5vZGUuc2hhZG93Um9vdDsNCiAgICB3aGlsZSAocm9vdCkgew0KICAgICAgd2F0Y2hSb290KHJvb3QpOw0KICAgICAgcm9vdCA9IHJvb3Qub2xkZXJTaGFkb3dSb290Ow0KICAgIH0NCiAgfQ0KfQ0KDQpmdW5jdGlvbiB3YXRjaFJvb3Qocm9vdCkgew0KICBpZiAoIXJvb3QuX193YXRjaGVkKSB7DQogICAgb2JzZXJ2ZShyb290KTsNCiAgICByb290Ll9fd2F0Y2hlZCA9IHRydWU7DQogIH0NCn0NCg0KZnVuY3Rpb24gZmlsdGVyKGluTm9kZSkgew0KICBzd2l0Y2ggKGluTm9kZS5sb2NhbE5hbWUpIHsNCiAgICBjYXNlICdzdHlsZSc6DQogICAgY2FzZSAnc2NyaXB0JzoNCiAgICBjYXNlICd0ZW1wbGF0ZSc6DQogICAgY2FzZSB1bmRlZmluZWQ6DQogICAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KfQ0KDQpmdW5jdGlvbiBoYW5kbGVyKG11dGF0aW9ucykgew0KICAvLw0KICBpZiAobG9nRmxhZ3MuZG9tKSB7DQogICAgdmFyIG14ID0gbXV0YXRpb25zWzBdOw0KICAgIGlmIChteCAmJiBteC50eXBlID09PSAnY2hpbGRMaXN0JyAmJiBteC5hZGRlZE5vZGVzKSB7DQogICAgICAgIGlmIChteC5hZGRlZE5vZGVzKSB7DQogICAgICAgICAgdmFyIGQgPSBteC5hZGRlZE5vZGVzWzBdOw0KICAgICAgICAgIHdoaWxlIChkICYmIGQgIT09IGRvY3VtZW50ICYmICFkLmhvc3QpIHsNCiAgICAgICAgICAgIGQgPSBkLnBhcmVudE5vZGU7DQogICAgICAgICAgfQ0KICAgICAgICAgIHZhciB1ID0gZCAmJiAoZC5VUkwgfHwgZC5fVVJMIHx8IChkLmhvc3QgJiYgZC5ob3N0LmxvY2FsTmFtZSkpIHx8ICcnOw0KICAgICAgICAgIHUgPSB1LnNwbGl0KCcvPycpLnNoaWZ0KCkuc3BsaXQoJy8nKS5wb3AoKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICBjb25zb2xlLmdyb3VwKCdtdXRhdGlvbnMgKCVkKSBbJXNdJywgbXV0YXRpb25zLmxlbmd0aCwgdSB8fCAnJyk7DQogIH0NCiAgLy8NCiAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXgpIHsNCiAgICAvL2xvZ0ZsYWdzLmRvbSAmJiBjb25zb2xlLmdyb3VwKCdtdXRhdGlvbicpOw0KICAgIGlmIChteC50eXBlID09PSAnY2hpbGRMaXN0Jykgew0KICAgICAgZm9yRWFjaChteC5hZGRlZE5vZGVzLCBmdW5jdGlvbihuKSB7DQogICAgICAgIC8vbG9nRmxhZ3MuZG9tICYmIGNvbnNvbGUubG9nKG4ubG9jYWxOYW1lKTsNCiAgICAgICAgaWYgKGZpbHRlcihuKSkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICAvLyBub2RlcyBhZGRlZCBtYXkgbmVlZCBsaWZlY3ljbGUgbWFuYWdlbWVudA0KICAgICAgICBhZGRlZE5vZGUobik7DQogICAgICB9KTsNCiAgICAgIC8vIHJlbW92ZWQgbm9kZXMgbWF5IG5lZWQgbGlmZWN5Y2xlIG1hbmFnZW1lbnQNCiAgICAgIGZvckVhY2gobXgucmVtb3ZlZE5vZGVzLCBmdW5jdGlvbihuKSB7DQogICAgICAgIC8vbG9nRmxhZ3MuZG9tICYmIGNvbnNvbGUubG9nKG4ubG9jYWxOYW1lKTsNCiAgICAgICAgaWYgKGZpbHRlcihuKSkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KICAgICAgICByZW1vdmVkTm9kZShuKTsNCiAgICAgIH0pOw0KICAgIH0NCiAgICAvL2xvZ0ZsYWdzLmRvbSAmJiBjb25zb2xlLmdyb3VwRW5kKCk7DQogIH0pOw0KICBsb2dGbGFncy5kb20gJiYgY29uc29sZS5ncm91cEVuZCgpOw0KfTsNCg0KdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoaGFuZGxlcik7DQoNCmZ1bmN0aW9uIHRha2VSZWNvcmRzKCkgew0KICAvLyBUT0RPKHNqbWlsZXMpOiBhc2sgUmFmIHdoeSB3ZSBoYXZlIHRvIGNhbGwgaGFuZGxlciBvdXJzZWx2ZXMNCiAgaGFuZGxlcihvYnNlcnZlci50YWtlUmVjb3JkcygpKTsNCiAgdGFrZU11dGF0aW9ucygpOw0KfQ0KDQp2YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUuZm9yRWFjaCk7DQoNCmZ1bmN0aW9uIG9ic2VydmUoaW5Sb290KSB7DQogIG9ic2VydmVyLm9ic2VydmUoaW5Sb290LCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlfSk7DQp9DQoNCmZ1bmN0aW9uIG9ic2VydmVEb2N1bWVudChkb2N1bWVudCkgew0KICBvYnNlcnZlKGRvY3VtZW50KTsNCn0NCg0KZnVuY3Rpb24gdXBncmFkZURvY3VtZW50KGRvY3VtZW50KSB7DQogIGxvZ0ZsYWdzLmRvbSAmJiBjb25zb2xlLmdyb3VwKCd1cGdyYWRlRG9jdW1lbnQ6ICcsIChkb2N1bWVudC5VUkwgfHwgZG9jdW1lbnQuX1VSTCB8fCAnJykuc3BsaXQoJy8nKS5wb3AoKSk7DQogIGFkZGVkTm9kZShkb2N1bWVudCk7DQogIGxvZ0ZsYWdzLmRvbSAmJiBjb25zb2xlLmdyb3VwRW5kKCk7DQp9DQoNCi8vIGV4cG9ydHMNCg0Kc2NvcGUud2F0Y2hTaGFkb3cgPSB3YXRjaFNoYWRvdzsNCnNjb3BlLnVwZ3JhZGVBbGwgPSBhZGRlZE5vZGU7DQpzY29wZS51cGdyYWRlU3VidHJlZSA9IGFkZGVkU3VidHJlZTsNCg0Kc2NvcGUub2JzZXJ2ZURvY3VtZW50ID0gb2JzZXJ2ZURvY3VtZW50Ow0Kc2NvcGUudXBncmFkZURvY3VtZW50ID0gdXBncmFkZURvY3VtZW50Ow0KDQpzY29wZS50YWtlUmVjb3JkcyA9IHRha2VSZWNvcmRzOw0KDQp9KSh3aW5kb3cuQ3VzdG9tRWxlbWVudHMpOw0KCi8qCiAqIENvcHlyaWdodCAyMDEzIFRoZSBQb2x5bWVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlCiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KICovCgooZnVuY3Rpb24oc2NvcGUpIHsKCmlmICghc2NvcGUpIHsKICBzY29wZSA9IHdpbmRvdy5IVE1MSW1wb3J0cyA9IHtmbGFnczp7fX07Cn0KCi8vIGltcG9ydHMKCnZhciB4aHIgPSBzY29wZS54aHI7CgovLyBpbXBvcnRlcgoKdmFyIElNUE9SVF9MSU5LX1RZUEUgPSAnaW1wb3J0JzsKdmFyIFNUWUxFX0xJTktfVFlQRSA9ICdzdHlsZXNoZWV0JzsKCi8vIGhpZ2hsYW5kZXIgb2JqZWN0IHJlcHJlc2VudHMgYSBwcmltYXJ5IGRvY3VtZW50ICh0aGUgYXJndW1lbnQgdG8gJ2xvYWQnKQovLyBhdCB0aGUgcm9vdCBvZiBhIHRyZWUgb2YgZG9jdW1lbnRzCgovLyBmb3IgYW55IGRvY3VtZW50LCBpbXBvcnRlcjoKLy8gLSBsb2FkcyBhbnkgbGlua2VkIGRvY3VtZW50cyAod2l0aCBkZWR1cGluZyksIG1vZGlmaWVzIHBhdGhzIGFuZCBmZWVkcyB0aGVtIGJhY2sgaW50byBpbXBvcnRlcgovLyAtIGxvYWRzIHRleHQgb2YgZXh0ZXJuYWwgc2NyaXB0IHRhZ3MKLy8gLSBsb2FkcyB0ZXh0IG9mIGV4dGVybmFsIHN0eWxlIHRhZ3MgaW5zaWRlIG9mIDxlbGVtZW50PiwgbW9kaWZpZXMgcGF0aHMKCi8vIHdoZW4gaW1wb3J0ZXIgJ21vZGlmaWVzIHBhdGhzJyBpbiBhIGRvY3VtZW50LCB0aGlzIGluY2x1ZGVzCi8vIC0gaHJlZi9zcmMvYWN0aW9uIGluIG5vZGUgYXR0cmlidXRlcwovLyAtIHBhdGhzIGluIGlubGluZSBzdHlsZXNoZWV0cwovLyAtIGFsbCBjb250ZW50IGluc2lkZSB0ZW1wbGF0ZXMKCi8vIGxpbmtlZCBzdHlsZSBzaGVldHMgaW4gYW4gaW1wb3J0IGhhdmUgdGhlaXIgb3duIHBhdGggZml4ZWQgdXAgd2hlbiB0aGVpciBjb250YWluaW5nIGltcG9ydCBtb2RpZmllcyBwYXRocwovLyBsaW5rZWQgc3R5bGUgc2hlZXRzIGluIGFuIDxlbGVtZW50PiBhcmUgbG9hZGVkLCBhbmQgdGhlIGNvbnRlbnQgZ2V0cyBwYXRoIGZpeHVwcwovLyBpbmxpbmUgc3R5bGUgc2hlZXRzIGdldCBwYXRoIGZpeHVwcyB3aGVuIHRoZWlyIGNvbnRhaW5pbmcgaW1wb3J0IG1vZGlmaWVzIHBhdGhzCgp2YXIgbG9hZGVyOwoKdmFyIGltcG9ydGVyID0gewogIGRvY3VtZW50czoge30sCiAgY2FjaGU6IHt9LAogIHByZWxvYWRTZWxlY3RvcnM6IFsKICAgICdsaW5rW3JlbD0nICsgSU1QT1JUX0xJTktfVFlQRSArICddJywKICAgICdlbGVtZW50IGxpbmtbcmVsPScgKyBTVFlMRV9MSU5LX1RZUEUgKyAnXScsCiAgICAndGVtcGxhdGUnLAogICAgJ3NjcmlwdFtzcmNdOm5vdChbdHlwZV0pJywKICAgICdzY3JpcHRbc3JjXVt0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiXScKICBdLmpvaW4oJywnKSwKICBsb2FkZXI6IGZ1bmN0aW9uKG5leHQpIHsKICAgIC8vIGNvbnN0cnVjdCBhIGxvYWRlciBpbnN0YW5jZQogICAgbG9hZGVyID0gbmV3IExvYWRlcihpbXBvcnRlci5sb2FkZWQsIG5leHQpOwogICAgLy8gYWxpYXMgdGhlIGxvYWRlciBjYWNoZSAoZm9yIGRlYnVnZ2luZykKICAgIGxvYWRlci5jYWNoZSA9IGltcG9ydGVyLmNhY2hlOwogICAgcmV0dXJuIGxvYWRlcjsKICB9LAogIGxvYWQ6IGZ1bmN0aW9uKGRvYywgbmV4dCkgewogICAgLy8gY29uc3RydWN0IGEgbG9hZGVyIGluc3RhbmNlCiAgICBsb2FkZXIgPSBpbXBvcnRlci5sb2FkZXIobmV4dCk7CiAgICAvLyBhZGQgbm9kZXMgZnJvbSBkb2N1bWVudCBpbnRvIGxvYWRlciBxdWV1ZQogICAgaW1wb3J0ZXIucHJlbG9hZChkb2MpOwogIH0sCiAgcHJlbG9hZDogZnVuY3Rpb24oZG9jKSB7CiAgICAvLyBhbGwgcHJlbG9hZGFibGUgbm9kZXMgaW4gaW5Eb2N1bWVudAogICAgdmFyIG5vZGVzID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoaW1wb3J0ZXIucHJlbG9hZFNlbGVjdG9ycyk7CiAgICAvLyBmcm9tIHRoZSBtYWluIGRvY3VtZW50LCBvbmx5IGxvYWQgaW1wb3J0cwogICAgLy8gVE9ETyhzam1pbGVzKTogZG8gdGhpcyBieSBhbHRlcmluZyB0aGUgc2VsZWN0b3IgbGlzdCBpbnN0ZWFkCiAgICBub2RlcyA9IHRoaXMuZmlsdGVyTWFpbkRvY3VtZW50Tm9kZXMoZG9jLCBub2Rlcyk7CiAgICAvLyBleHRyYSBsaW5rIG5vZGVzIGZyb20gdGVtcGxhdGVzLCBmaWx0ZXIgdGVtcGxhdGVzIG91dCBvZiB0aGUgbm9kZXMgbGlzdAogICAgbm9kZXMgPSB0aGlzLmV4dHJhY3RUZW1wbGF0ZU5vZGVzKG5vZGVzKTsKICAgIC8vIGFkZCB0aGVzZSBub2RlcyB0byBsb2FkZXIncyBxdWV1ZQogICAgbG9hZGVyLmFkZE5vZGVzKG5vZGVzKTsKICB9LAogIGZpbHRlck1haW5Eb2N1bWVudE5vZGVzOiBmdW5jdGlvbihkb2MsIG5vZGVzKSB7CiAgICBpZiAoZG9jID09PSBkb2N1bWVudCkgewogICAgICBub2RlcyA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChub2RlcywgZnVuY3Rpb24obikgewogICAgICAgIHJldHVybiAhaXNTY3JpcHQobik7CiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIG5vZGVzOwogIH0sCiAgZXh0cmFjdFRlbXBsYXRlTm9kZXM6IGZ1bmN0aW9uKG5vZGVzKSB7CiAgICB2YXIgZXh0cmEgPSBbXTsKICAgIG5vZGVzID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKG5vZGVzLCBmdW5jdGlvbihuKSB7CiAgICAgIGlmIChuLmxvY2FsTmFtZSA9PT0gJ3RlbXBsYXRlJykgewogICAgICAgIGlmIChuLmNvbnRlbnQpIHsKICAgICAgICAgIHZhciBsJCA9IG4uY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rW3JlbD0nICsgU1RZTEVfTElOS19UWVBFICsKICAgICAgICAgICAgJ10nKTsKICAgICAgICAgIGlmIChsJC5sZW5ndGgpIHsKICAgICAgICAgICAgZXh0cmEgPSBleHRyYS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobCQsIDApKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfSk7CiAgICBpZiAoZXh0cmEubGVuZ3RoKSB7CiAgICAgIG5vZGVzID0gbm9kZXMuY29uY2F0KGV4dHJhKTsKICAgIH0KICAgIHJldHVybiBub2RlczsKICB9LAogIGxvYWRlZDogZnVuY3Rpb24odXJsLCBlbHQsIHJlc291cmNlKSB7CiAgICBpZiAoaXNEb2N1bWVudExpbmsoZWx0KSkgewogICAgICB2YXIgZG9jdW1lbnQgPSBpbXBvcnRlci5kb2N1bWVudHNbdXJsXTsKICAgICAgLy8gaWYgd2UndmUgbmV2ZXIgc2VlbiBhIGRvY3VtZW50IGF0IHRoaXMgdXJsCiAgICAgIGlmICghZG9jdW1lbnQpIHsKICAgICAgICAvLyBnZW5lcmF0ZSBhbiBIVE1MRG9jdW1lbnQgZnJvbSBkYXRhCiAgICAgICAgZG9jdW1lbnQgPSBtYWtlRG9jdW1lbnQocmVzb3VyY2UsIHVybCk7CiAgICAgICAgLy8gcmVzb2x2ZSByZXNvdXJjZSBwYXRocyByZWxhdGl2ZSB0byBob3N0IGRvY3VtZW50CiAgICAgICAgcGF0aC5yZXNvbHZlUGF0aHNJbkhUTUwoZG9jdW1lbnQpOwogICAgICAgIC8vIGNhY2hlIGRvY3VtZW50CiAgICAgICAgaW1wb3J0ZXIuZG9jdW1lbnRzW3VybF0gPSBkb2N1bWVudDsKICAgICAgICAvLyBhZGQgbm9kZXMgZnJvbSB0aGlzIGRvY3VtZW50IHRvIHRoZSBsb2FkZXIgcXVldWUKICAgICAgICBpbXBvcnRlci5wcmVsb2FkKGRvY3VtZW50KTsKICAgICAgfQogICAgICAvLyBzdG9yZSBpbXBvcnQgcmVjb3JkCiAgICAgIGVsdC5pbXBvcnQgPSB7CiAgICAgICAgaHJlZjogdXJsLAogICAgICAgIG93bmVyTm9kZTogZWx0LAogICAgICAgIGNvbnRlbnQ6IGRvY3VtZW50CiAgICAgIH07CiAgICAgIC8vIHN0b3JlIGRvY3VtZW50IHJlc291cmNlCiAgICAgIGVsdC5jb250ZW50ID0gcmVzb3VyY2UgPSBkb2N1bWVudDsKICAgIH0KICAgIC8vIHN0b3JlIGdlbmVyaWMgcmVzb3VyY2UKICAgIC8vIFRPRE8oc29ydmVsbCk6IGZhaWxzIGZvciBub2RlcyBpbnNpZGUgPHRlbXBsYXRlPi5jb250ZW50CiAgICAvLyBzZWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI0OTM4MS4KICAgIGVsdC5fX3Jlc291cmNlID0gcmVzb3VyY2U7CiAgICAvLyBjc3MgcGF0aCBmaXh1cHMKICAgIGlmIChpc1N0eWxlc2hlZXRMaW5rKGVsdCkpIHsKICAgICAgcGF0aC5yZXNvbHZlUGF0aHNJblN0eWxlc2hlZXQoZWx0KTsKICAgIH0KICB9Cn07CgpmdW5jdGlvbiBpc0RvY3VtZW50TGluayhlbHQpIHsKICByZXR1cm4gaXNMaW5rUmVsKGVsdCwgSU1QT1JUX0xJTktfVFlQRSk7Cn0KCmZ1bmN0aW9uIGlzU3R5bGVzaGVldExpbmsoZWx0KSB7CiAgcmV0dXJuIGlzTGlua1JlbChlbHQsIFNUWUxFX0xJTktfVFlQRSk7Cn0KCmZ1bmN0aW9uIGlzTGlua1JlbChlbHQsIHJlbCkgewogIHJldHVybiBlbHQubG9jYWxOYW1lID09PSAnbGluaycgJiYgZWx0LmdldEF0dHJpYnV0ZSgncmVsJykgPT09IHJlbDsKfQoKZnVuY3Rpb24gaXNTY3JpcHQoZWx0KSB7CiAgcmV0dXJuIGVsdC5sb2NhbE5hbWUgPT09ICdzY3JpcHQnOwp9CgpmdW5jdGlvbiBtYWtlRG9jdW1lbnQocmVzb3VyY2UsIHVybCkgewogIC8vIGNyZWF0ZSBhIG5ldyBIVE1MIGRvY3VtZW50CiAgdmFyIGRvYyA9IHJlc291cmNlOwogIGlmICghKGRvYyBpbnN0YW5jZW9mIERvY3VtZW50KSkgewogICAgZG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KElNUE9SVF9MSU5LX1RZUEUpOwogICAgLy8gaW5zdGFsbCBodG1sCiAgICBkb2MuYm9keS5pbm5lckhUTUwgPSByZXNvdXJjZTsKICB9CiAgLy8gY2FjaGUgdGhlIG5ldyBkb2N1bWVudCdzIHNvdXJjZSB1cmwKICBkb2MuX1VSTCA9IHVybDsKICAvLyBlc3RhYmxpc2ggYSByZWxhdGl2ZSBwYXRoIHZpYSA8YmFzZT4KICB2YXIgYmFzZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdiYXNlJyk7CiAgYmFzZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBkb2N1bWVudC5iYXNlVVJJIHx8IGRvY3VtZW50LlVSTCk7CiAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoYmFzZSk7CiAgLy8gVE9ETyhzb3J2ZWxsKTogaWRlYWxseSB0aGlzIGNvZGUgaXMgbm90IGF3YXJlIG9mIFRlbXBsYXRlIHBvbHlmaWxsLAogIC8vIGJ1dCBmb3Igbm93IHRoZSBwb2x5ZmlsbCBuZWVkcyBoZWxwIHRvIGJvb3RzdHJhcCB0aGVzZSB0ZW1wbGF0ZXMKICBpZiAod2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQgJiYgSFRNTFRlbXBsYXRlRWxlbWVudC5ib290c3RyYXApIHsKICAgIEhUTUxUZW1wbGF0ZUVsZW1lbnQuYm9vdHN0cmFwKGRvYyk7CiAgfQogIHJldHVybiBkb2M7Cn0KCnZhciBMb2FkZXIgPSBmdW5jdGlvbihvbkxvYWQsIG9uQ29tcGxldGUpIHsKICB0aGlzLm9ubG9hZCA9IG9uTG9hZDsKICB0aGlzLm9uY29tcGxldGUgPSBvbkNvbXBsZXRlOwogIHRoaXMuaW5mbGlnaHQgPSAwOwogIHRoaXMucGVuZGluZyA9IHt9OwogIHRoaXMuY2FjaGUgPSB7fTsKfTsKCkxvYWRlci5wcm90b3R5cGUgPSB7CiAgYWRkTm9kZXM6IGZ1bmN0aW9uKG5vZGVzKSB7CiAgICAvLyBudW1iZXIgb2YgdHJhbnNhY3Rpb25zIHRvIGNvbXBsZXRlCiAgICB0aGlzLmluZmxpZ2h0ICs9IG5vZGVzLmxlbmd0aDsKICAgIC8vIGNvbW1lbmNlIHRyYW5zYWN0aW9ucwogICAgZm9yRWFjaChub2RlcywgdGhpcy5yZXF1aXJlLCB0aGlzKTsKICAgIC8vIGFueXRoaW5nIHRvIGRvPwogICAgdGhpcy5jaGVja0RvbmUoKTsKICB9LAogIHJlcXVpcmU6IGZ1bmN0aW9uKGVsdCkgewogICAgdmFyIHVybCA9IHBhdGgubm9kZVVybChlbHQpOwogICAgLy8gVE9ETyhzam1pbGVzKTogYWQtaG9jCiAgICBlbHQuX19ub2RlVXJsID0gdXJsOwogICAgLy8gZGVkdXBsaWNhdGlvbgogICAgaWYgKCF0aGlzLmRlZHVwZSh1cmwsIGVsdCkpIHsKICAgICAgLy8gZmV0Y2ggdGhpcyByZXNvdXJjZQogICAgICB0aGlzLmZldGNoKHVybCwgZWx0KTsKICAgIH0KICB9LAogIGRlZHVwZTogZnVuY3Rpb24odXJsLCBlbHQpIHsKICAgIGlmICh0aGlzLnBlbmRpbmdbdXJsXSkgewogICAgICAvLyBhZGQgdG8gbGlzdCBvZiBub2RlcyB3YWl0aW5nIGZvciBpblVybAogICAgICB0aGlzLnBlbmRpbmdbdXJsXS5wdXNoKGVsdCk7CiAgICAgIC8vIGRvbid0IG5lZWQgZmV0Y2gKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBpZiAodGhpcy5jYWNoZVt1cmxdKSB7CiAgICAgIC8vIGNvbXBsZXRlIGxvYWQgdXNpbmcgY2FjaGUgZGF0YQogICAgICB0aGlzLm9ubG9hZCh1cmwsIGVsdCwgbG9hZGVyLmNhY2hlW3VybF0pOwogICAgICAvLyBmaW5pc2hlZCB0aGlzIHRyYW5zYWN0aW9uCiAgICAgIHRoaXMudGFpbCgpOwogICAgICAvLyBkb24ndCBuZWVkIGZldGNoCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgLy8gZmlyc3Qgbm9kZSB3YWl0aW5nIGZvciBpblVybAogICAgdGhpcy5wZW5kaW5nW3VybF0gPSBbZWx0XTsKICAgIC8vIG5lZWQgZmV0Y2ggKG5vdCBhIGR1cGUpCiAgICByZXR1cm4gZmFsc2U7CiAgfSwKICBmZXRjaDogZnVuY3Rpb24odXJsLCBlbHQpIHsKICAgIHZhciByZWNlaXZlWGhyID0gZnVuY3Rpb24oZXJyLCByZXNvdXJjZSkgewogICAgICB0aGlzLnJlY2VpdmUodXJsLCBlbHQsIGVyciwgcmVzb3VyY2UpOwogICAgfS5iaW5kKHRoaXMpOwogICAgeGhyLmxvYWQodXJsLCByZWNlaXZlWGhyKTsKICAgIC8vIFRPRE8oc29ydmVsbCk6IGJsb2NrZWQgb24KICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTcyMjEKICAgIC8vIHhocidpbmcgZm9yIGEgZG9jdW1lbnQgbWFrZXMgc2NyaXB0cyBpbiBpbXBvcnRzIHJ1bm5hYmxlOyBvdGhlcndpc2UKICAgIC8vIHRoZXkgYXJlIG5vdDsgaG93ZXZlciwgaXQgcmVxdWlyZXMgdGhhdCB3ZSBoYXZlIGRvY3R5cGU9aHRtbCBpbgogICAgLy8gdGhlIGltcG9ydCB3aGljaCBpcyB1bmFjY2VwdGFibGUuIFRoaXMgaXMgb25seSBuZWVkZWQgb24gQ2hyb21lCiAgICAvLyB0byBhdm9pZCB0aGUgYnVnIGFib3ZlLgogICAgLyoKICAgIGlmIChpc0RvY3VtZW50TGluayhlbHQpKSB7CiAgICAgIHhoci5sb2FkRG9jdW1lbnQodXJsLCByZWNlaXZlWGhyKTsKICAgIH0gZWxzZSB7CiAgICAgIHhoci5sb2FkKHVybCwgcmVjZWl2ZVhocik7CiAgICB9CiAgICAqLwogIH0sCiAgcmVjZWl2ZTogZnVuY3Rpb24odXJsLCBlbHQsIGVyciwgcmVzb3VyY2UpIHsKICAgIGlmICghZXJyKSB7CiAgICAgIGxvYWRlci5jYWNoZVt1cmxdID0gcmVzb3VyY2U7CiAgICB9CiAgICBsb2FkZXIucGVuZGluZ1t1cmxdLmZvckVhY2goZnVuY3Rpb24oZSkgewogICAgICBpZiAoIWVycikgewogICAgICAgIHRoaXMub25sb2FkKHVybCwgZSwgcmVzb3VyY2UpOwogICAgICB9CiAgICAgIHRoaXMudGFpbCgpOwogICAgfSwgdGhpcyk7CiAgICBsb2FkZXIucGVuZGluZ1t1cmxdID0gbnVsbDsKICB9LAogIHRhaWw6IGZ1bmN0aW9uKCkgewogICAgLS10aGlzLmluZmxpZ2h0OwogICAgdGhpcy5jaGVja0RvbmUoKTsKICB9LAogIGNoZWNrRG9uZTogZnVuY3Rpb24oKSB7CiAgICBpZiAoIXRoaXMuaW5mbGlnaHQpIHsKICAgICAgdGhpcy5vbmNvbXBsZXRlKCk7CiAgICB9CiAgfQp9OwoKdmFyIFVSTF9BVFRSUyA9IFsnaHJlZicsICdzcmMnLCAnYWN0aW9uJ107CnZhciBVUkxfQVRUUlNfU0VMRUNUT1IgPSAnWycgKyBVUkxfQVRUUlMuam9pbignXSxbJykgKyAnXSc7CnZhciBVUkxfVEVNUExBVEVfU0VBUkNIID0gJ3t7Lip9fSc7Cgp2YXIgcGF0aCA9IHsKICBub2RlVXJsOiBmdW5jdGlvbihub2RlKSB7CiAgICByZXR1cm4gcGF0aC5yZXNvbHZlVXJsKHBhdGguZG9jdW1lbnRVUkwsIHBhdGguaHJlZk9yU3JjKG5vZGUpKTsKICB9LAogIGhyZWZPclNyYzogZnVuY3Rpb24obm9kZSkgewogICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKCJocmVmIikgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoInNyYyIpOwogIH0sCiAgZG9jdW1lbnRVcmxGcm9tTm9kZTogZnVuY3Rpb24obm9kZSkgewogICAgcmV0dXJuIHBhdGguZ2V0RG9jdW1lbnRVcmwobm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUpOwogIH0sCiAgZ2V0RG9jdW1lbnRVcmw6IGZ1bmN0aW9uKGRvYykgewogICAgdmFyIHVybCA9IGRvYyAmJgogICAgICAgIC8vIFRPRE8oc2ptaWxlcyk6IFNoYWRvd0RPTVBvbHlmaWxsIGludHJ1c2lvbgogICAgICAgIChkb2MuX1VSTCB8fCAoZG9jLmltcGwgJiYgZG9jLmltcGwuX1VSTCkKICAgICAgICAgICAgfHwgZG9jLmJhc2VVUkkgfHwgZG9jLlVSTCkKICAgICAgICAgICAgICAgIHx8ICcnOwogICAgLy8gdGFrZSBvbmx5IHRoZSBsZWZ0IHNpZGUgaWYgdGhlcmUgaXMgYSAjCiAgICByZXR1cm4gdXJsLnNwbGl0KCcjJylbMF07CiAgfSwKICByZXNvbHZlVXJsOiBmdW5jdGlvbihiYXNlVXJsLCB1cmwpIHsKICAgIGlmICh0aGlzLmlzQWJzVXJsKHVybCkpIHsKICAgICAgcmV0dXJuIHVybDsKICAgIH0KICAgIHJldHVybiB0aGlzLmNvbXByZXNzVXJsKHRoaXMudXJsVG9QYXRoKGJhc2VVcmwpICsgdXJsKTsKICB9LAogIHJlc29sdmVSZWxhdGl2ZVVybDogZnVuY3Rpb24oYmFzZVVybCwgdXJsKSB7CiAgICBpZiAodGhpcy5pc0Fic1VybCh1cmwpKSB7CiAgICAgIHJldHVybiB1cmw7CiAgICB9CiAgICByZXR1cm4gdGhpcy5tYWtlRG9jdW1lbnRSZWxQYXRoKHRoaXMucmVzb2x2ZVVybChiYXNlVXJsLCB1cmwpKTsKICB9LAogIGlzQWJzVXJsOiBmdW5jdGlvbih1cmwpIHsKICAgIHJldHVybiAvKF5kYXRhOil8KF5odHRwW3NdPzopfCheXC8pLy50ZXN0KHVybCk7CiAgfSwKICB1cmxUb1BhdGg6IGZ1bmN0aW9uKGJhc2VVcmwpIHsKICAgIHZhciBwYXJ0cyA9IGJhc2VVcmwuc3BsaXQoIi8iKTsKICAgIHBhcnRzLnBvcCgpOwogICAgcGFydHMucHVzaCgnJyk7CiAgICByZXR1cm4gcGFydHMuam9pbigiLyIpOwogIH0sCiAgY29tcHJlc3NVcmw6IGZ1bmN0aW9uKHVybCkgewogICAgdmFyIHNlYXJjaCA9ICcnOwogICAgdmFyIHNlYXJjaFBvcyA9IHVybC5pbmRleE9mKCc/Jyk7CiAgICAvLyBxdWVyeSBzdHJpbmcgaXMgbm90IHBhcnQgb2YgdGhlIHBhdGgKICAgIGlmIChzZWFyY2hQb3MgPiAtMSkgewogICAgICBzZWFyY2ggPSB1cmwuc3Vic3RyaW5nKHNlYXJjaFBvcyk7CiAgICAgIHVybCA9IHVybC5zdWJzdHJpbmcoc2VhcmNoUG9zLCAwKTsKICAgIH0KICAgIHZhciBwYXJ0cyA9IHVybC5zcGxpdCgnLycpOwogICAgZm9yICh2YXIgaT0wLCBwOyBpPHBhcnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHAgPSBwYXJ0c1tpXTsKICAgICAgaWYgKHAgPT09ICcuLicpIHsKICAgICAgICBwYXJ0cy5zcGxpY2UoaS0xLCAyKTsKICAgICAgICBpIC09IDI7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBwYXJ0cy5qb2luKCcvJykgKyBzZWFyY2g7CiAgfSwKICBtYWtlRG9jdW1lbnRSZWxQYXRoOiBmdW5jdGlvbih1cmwpIHsKICAgIC8vIHRlc3QgdXJsIGFnYWluc3QgZG9jdW1lbnQgdG8gc2VlIGlmIHdlIGNhbiBjb25zdHJ1Y3QgYSByZWxhdGl2ZSBwYXRoCiAgICBwYXRoLnVybEVsdC5ocmVmID0gdXJsOwogICAgLy8gSUUgZG9lcyBub3Qgc2V0IGhvc3QgaWYgc2FtZSBhcyBkb2N1bWVudAogICAgaWYgKCFwYXRoLnVybEVsdC5ob3N0IHx8IAogICAgICAgIChwYXRoLnVybEVsdC5ob3N0ID09PSB3aW5kb3cubG9jYXRpb24uaG9zdCAmJgogICAgICAgIHBhdGgudXJsRWx0LnByb3RvY29sID09PSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wpKSB7CiAgICAgIHJldHVybiB0aGlzLm1ha2VSZWxQYXRoKHBhdGguZG9jdW1lbnRVUkwsIHBhdGgudXJsRWx0LmhyZWYpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHVybDsKICAgIH0KICB9LAogIC8vIG1ha2UgYSByZWxhdGl2ZSBwYXRoIGZyb20gc291cmNlIHRvIHRhcmdldAogIG1ha2VSZWxQYXRoOiBmdW5jdGlvbihzb3VyY2UsIHRhcmdldCkgewogICAgdmFyIHMgPSBzb3VyY2Uuc3BsaXQoJy8nKTsKICAgIHZhciB0ID0gdGFyZ2V0LnNwbGl0KCcvJyk7CiAgICB3aGlsZSAocy5sZW5ndGggJiYgc1swXSA9PT0gdFswXSl7CiAgICAgIHMuc2hpZnQoKTsKICAgICAgdC5zaGlmdCgpOwogICAgfQogICAgZm9yKHZhciBpID0gMCwgbCA9IHMubGVuZ3RoLTE7IGkgPCBsOyBpKyspIHsKICAgICAgdC51bnNoaWZ0KCcuLicpOwogICAgfQogICAgdmFyIHIgPSB0LmpvaW4oJy8nKTsKICAgIHJldHVybiByOwogIH0sCiAgcmVzb2x2ZVBhdGhzSW5IVE1MOiBmdW5jdGlvbihyb290LCB1cmwpIHsKICAgIHVybCA9IHVybCB8fCBwYXRoLmRvY3VtZW50VXJsRnJvbU5vZGUocm9vdCkKICAgIHBhdGgucmVzb2x2ZUF0dHJpYnV0ZXMocm9vdCwgdXJsKTsKICAgIHBhdGgucmVzb2x2ZVN0eWxlRWx0cyhyb290LCB1cmwpOwogICAgLy8gaGFuZGxlIHRlbXBsYXRlLmNvbnRlbnQKICAgIHZhciB0ZW1wbGF0ZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RlbXBsYXRlJyk7CiAgICBpZiAodGVtcGxhdGVzKSB7CiAgICAgIGZvckVhY2godGVtcGxhdGVzLCBmdW5jdGlvbih0KSB7CiAgICAgICAgaWYgKHQuY29udGVudCkgewogICAgICAgICAgcGF0aC5yZXNvbHZlUGF0aHNJbkhUTUwodC5jb250ZW50LCB1cmwpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwKICByZXNvbHZlUGF0aHNJblN0eWxlc2hlZXQ6IGZ1bmN0aW9uKHNoZWV0KSB7CiAgICB2YXIgZG9jVXJsID0gcGF0aC5ub2RlVXJsKHNoZWV0KTsKICAgIHNoZWV0Ll9fcmVzb3VyY2UgPSBwYXRoLnJlc29sdmVDc3NUZXh0KHNoZWV0Ll9fcmVzb3VyY2UsIGRvY1VybCk7CiAgfSwKICByZXNvbHZlU3R5bGVFbHRzOiBmdW5jdGlvbihyb290LCB1cmwpIHsKICAgIHZhciBzdHlsZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJyk7CiAgICBpZiAoc3R5bGVzKSB7CiAgICAgIGZvckVhY2goc3R5bGVzLCBmdW5jdGlvbihzdHlsZSkgewogICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gcGF0aC5yZXNvbHZlQ3NzVGV4dChzdHlsZS50ZXh0Q29udGVudCwgdXJsKTsKICAgICAgfSk7CiAgICB9CiAgfSwKICByZXNvbHZlQ3NzVGV4dDogZnVuY3Rpb24oY3NzVGV4dCwgYmFzZVVybCkgewogICAgcmV0dXJuIGNzc1RleHQucmVwbGFjZSgvdXJsXChbXildKlwpL2csIGZ1bmN0aW9uKG1hdGNoKSB7CiAgICAgIC8vIGZpbmQgdGhlIHVybCBwYXRoLCBpZ25vcmUgcXVvdGVzIGluIHVybCBzdHJpbmcKICAgICAgdmFyIHVybFBhdGggPSBtYXRjaC5yZXBsYWNlKC9bIiddL2csICIiKS5zbGljZSg0LCAtMSk7CiAgICAgIHVybFBhdGggPSBwYXRoLnJlc29sdmVSZWxhdGl2ZVVybChiYXNlVXJsLCB1cmxQYXRoKTsKICAgICAgcmV0dXJuICJ1cmwoIiArIHVybFBhdGggKyAiKSI7CiAgICB9KTsKICB9LAogIHJlc29sdmVBdHRyaWJ1dGVzOiBmdW5jdGlvbihyb290LCB1cmwpIHsKICAgIC8vIHNlYXJjaCBmb3IgYXR0cmlidXRlcyB0aGF0IGhvc3QgdXJscwogICAgdmFyIG5vZGVzID0gcm9vdCAmJiByb290LnF1ZXJ5U2VsZWN0b3JBbGwoVVJMX0FUVFJTX1NFTEVDVE9SKTsKICAgIGlmIChub2RlcykgewogICAgICBmb3JFYWNoKG5vZGVzLCBmdW5jdGlvbihuKSB7CiAgICAgICAgdGhpcy5yZXNvbHZlTm9kZUF0dHJpYnV0ZXMobiwgdXJsKTsKICAgICAgfSwgdGhpcyk7CiAgICB9CiAgfSwKICByZXNvbHZlTm9kZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uKG5vZGUsIHVybCkgewogICAgVVJMX0FUVFJTLmZvckVhY2goZnVuY3Rpb24odikgewogICAgICB2YXIgYXR0ciA9IG5vZGUuYXR0cmlidXRlc1t2XTsKICAgICAgaWYgKGF0dHIgJiYgYXR0ci52YWx1ZSAmJgogICAgICAgICAoYXR0ci52YWx1ZS5zZWFyY2goVVJMX1RFTVBMQVRFX1NFQVJDSCkgPCAwKSkgewogICAgICAgIHZhciB1cmxQYXRoID0gcGF0aC5yZXNvbHZlUmVsYXRpdmVVcmwodXJsLCBhdHRyLnZhbHVlKTsKICAgICAgICBhdHRyLnZhbHVlID0gdXJsUGF0aDsKICAgICAgfQogICAgfSk7CiAgfQp9OwoKcGF0aC5kb2N1bWVudFVSTCA9IHBhdGguZ2V0RG9jdW1lbnRVcmwoZG9jdW1lbnQpOwpwYXRoLnVybEVsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKCnhociA9IHhociB8fCB7CiAgYXN5bmM6IHRydWUsCiAgb2s6IGZ1bmN0aW9uKHJlcXVlc3QpIHsKICAgIHJldHVybiAocmVxdWVzdC5zdGF0dXMgPj0gMjAwICYmIHJlcXVlc3Quc3RhdHVzIDwgMzAwKQogICAgICAgIHx8IChyZXF1ZXN0LnN0YXR1cyA9PT0gMzA0KQogICAgICAgIHx8IChyZXF1ZXN0LnN0YXR1cyA9PT0gMCk7CiAgfSwKICBsb2FkOiBmdW5jdGlvbih1cmwsIG5leHQsIG5leHRDb250ZXh0KSB7CiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgaWYgKHNjb3BlLmZsYWdzLmRlYnVnIHx8IHNjb3BlLmZsYWdzLmJ1c3QpIHsKICAgICAgdXJsICs9ICc/JyArIE1hdGgucmFuZG9tKCk7CiAgICB9CiAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgeGhyLmFzeW5jKTsKICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uKGUpIHsKICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkgewogICAgICAgIG5leHQuY2FsbChuZXh0Q29udGV4dCwgIXhoci5vayhyZXF1ZXN0KSAmJiByZXF1ZXN0LAogICAgICAgICAgcmVxdWVzdC5yZXNwb25zZSwgdXJsKTsKICAgICAgfQogICAgfSk7CiAgICByZXF1ZXN0LnNlbmQoKTsKICAgIHJldHVybiByZXF1ZXN0OwogIH0sCiAgbG9hZERvY3VtZW50OiBmdW5jdGlvbih1cmwsIG5leHQsIG5leHRDb250ZXh0KSB7CiAgICB0aGlzLmxvYWQodXJsLCBuZXh0LCBuZXh0Q29udGV4dCkucmVzcG9uc2VUeXBlID0gJ2RvY3VtZW50JzsKICB9Cn07Cgp2YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUuZm9yRWFjaCk7CgovLyBleHBvcnRzCgpzY29wZS5wYXRoID0gcGF0aDsKc2NvcGUueGhyID0geGhyOwpzY29wZS5pbXBvcnRlciA9IGltcG9ydGVyOwpzY29wZS5nZXREb2N1bWVudFVybCA9IHBhdGguZ2V0RG9jdW1lbnRVcmw7CnNjb3BlLklNUE9SVF9MSU5LX1RZUEUgPSBJTVBPUlRfTElOS19UWVBFOwoKfSkod2luZG93LkhUTUxJbXBvcnRzKTsKCi8qCiAqIENvcHlyaWdodCAyMDEzIFRoZSBQb2x5bWVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlCiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KICovCgooZnVuY3Rpb24oc2NvcGUpIHsKCnZhciBJTVBPUlRfTElOS19UWVBFID0gJ2ltcG9ydCc7CgovLyBoaWdobGFuZGVyIG9iamVjdCBmb3IgcGFyc2luZyBhIGRvY3VtZW50IHRyZWUKCnZhciBpbXBvcnRQYXJzZXIgPSB7CiAgc2VsZWN0b3JzOiBbCiAgICAnbGlua1tyZWw9JyArIElNUE9SVF9MSU5LX1RZUEUgKyAnXScsCiAgICAnbGlua1tyZWw9c3R5bGVzaGVldF0nLAogICAgJ3N0eWxlJywKICAgICdzY3JpcHQ6bm90KFt0eXBlXSknLAogICAgJ3NjcmlwdFt0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiXScKICBdLAogIG1hcDogewogICAgbGluazogJ3BhcnNlTGluaycsCiAgICBzY3JpcHQ6ICdwYXJzZVNjcmlwdCcsCiAgICBzdHlsZTogJ3BhcnNlR2VuZXJpYycKICB9LAogIHBhcnNlOiBmdW5jdGlvbihpbkRvY3VtZW50KSB7CiAgICBpZiAoIWluRG9jdW1lbnQuX19pbXBvcnRQYXJzZWQpIHsKICAgICAgLy8gb25seSBwYXJzZSBvbmNlCiAgICAgIGluRG9jdW1lbnQuX19pbXBvcnRQYXJzZWQgPSB0cnVlOwogICAgICAvLyBhbGwgcGFyc2FibGUgZWxlbWVudHMgaW4gaW5Eb2N1bWVudCAoZGVwdGgtZmlyc3QgcHJlLW9yZGVyIHRyYXZlcnNhbCkKICAgICAgdmFyIGVsdHMgPSBpbkRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoaW1wb3J0UGFyc2VyLnNlbGVjdG9ycyk7CiAgICAgIC8vIGZvciBlYWNoIHBhcnNhYmxlIG5vZGUgdHlwZSwgY2FsbCB0aGUgbWFwcGVkIHBhcnNpbmcgbWV0aG9kCiAgICAgIGZvckVhY2goZWx0cywgZnVuY3Rpb24oZSkgewogICAgICAgIGltcG9ydFBhcnNlcltpbXBvcnRQYXJzZXIubWFwW2UubG9jYWxOYW1lXV0oZSk7CiAgICAgIH0pOwogICAgfQogIH0sCiAgcGFyc2VMaW5rOiBmdW5jdGlvbihsaW5rRWx0KSB7CiAgICBpZiAoaXNEb2N1bWVudExpbmsobGlua0VsdCkpIHsKICAgICAgaWYgKGxpbmtFbHQuY29udGVudCkgewogICAgICAgIGltcG9ydFBhcnNlci5wYXJzZShsaW5rRWx0LmNvbnRlbnQpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aGlzLnBhcnNlR2VuZXJpYyhsaW5rRWx0KTsKICAgIH0KICB9LAogIHBhcnNlR2VuZXJpYzogZnVuY3Rpb24oZWx0KSB7CiAgICBpZiAobmVlZHNNYWluRG9jdW1lbnRDb250ZXh0KGVsdCkpIHsKICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlbHQpOwogICAgfQogIH0sCiAgcGFyc2VTY3JpcHQ6IGZ1bmN0aW9uKHNjcmlwdEVsdCkgewogICAgaWYgKG5lZWRzTWFpbkRvY3VtZW50Q29udGV4dChzY3JpcHRFbHQpKSB7CiAgICAgIC8vIGFjcXVpcmUgY29kZSB0byBleGVjdXRlCiAgICAgIHZhciBjb2RlID0gKHNjcmlwdEVsdC5fX3Jlc291cmNlIHx8IHNjcmlwdEVsdC50ZXh0Q29udGVudCkudHJpbSgpOwogICAgICBpZiAoY29kZSkgewogICAgICAgIC8vIGNhbGN1bGF0ZSBzb3VyY2UgbWFwIGhpbnQKICAgICAgICB2YXIgbW9uaWtlciA9IHNjcmlwdEVsdC5fX25vZGVVcmw7CiAgICAgICAgaWYgKCFtb25pa2VyKSB7CiAgICAgICAgICB2YXIgbW9uaWtlciA9IHNjb3BlLnBhdGguZG9jdW1lbnRVcmxGcm9tTm9kZShzY3JpcHRFbHQpOwogICAgICAgICAgLy8gdGhlcmUgY291bGQgYmUgbW9yZSB0aGFuIG9uZSBzY3JpcHQgdGhpcyB1cmwKICAgICAgICAgIHZhciB0YWcgPSAnWycgKyBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpKzEpKjEwMDApICsgJ10nOwogICAgICAgICAgLy8gVE9ETyhzam1pbGVzKTogUG9seW1lciBoYWNrLCBzaG91bGQgYmUgcGx1Z2dhYmxlIGlmIHdlIG5lZWQgdG8gYWxsb3cgCiAgICAgICAgICAvLyB0aGlzIHNvcnQgb2YgdGhpbmcKICAgICAgICAgIHZhciBtYXRjaGVzID0gY29kZS5tYXRjaCgvUG9seW1lclwoWyciXShbXiciXSopLyk7CiAgICAgICAgICB0YWcgPSBtYXRjaGVzICYmIG1hdGNoZXNbMV0gfHwgdGFnOwogICAgICAgICAgLy8gdGFnIHRoZSBtb25pa2VyCiAgICAgICAgICBtb25pa2VyICs9ICcvJyArIHRhZyArICcuanMnOwogICAgICAgIH0KICAgICAgICAvLyBzb3VyY2UgbWFwIGhpbnQKICAgICAgICBjb2RlICs9ICJcbi8vIyBzb3VyY2VVUkw9IiArIG1vbmlrZXIgKyAiXG4iOwogICAgICAgIC8vIGV2YWx1YXRlIHRoZSBjb2RlCiAgICAgICAgZXZhbC5jYWxsKHdpbmRvdywgY29kZSk7CiAgICAgIH0KICAgIH0KICB9Cn07Cgp2YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUuZm9yRWFjaCk7CgpmdW5jdGlvbiBpc0RvY3VtZW50TGluayhlbHQpIHsKICByZXR1cm4gZWx0LmxvY2FsTmFtZSA9PT0gJ2xpbmsnCiAgICAgICYmIGVsdC5nZXRBdHRyaWJ1dGUoJ3JlbCcpID09PSBJTVBPUlRfTElOS19UWVBFOwp9CgpmdW5jdGlvbiBuZWVkc01haW5Eb2N1bWVudENvbnRleHQobm9kZSkgewogIC8vIG5vZGVzIGNhbiBiZSBtb3ZlZCB0byB0aGUgbWFpbiBkb2N1bWVudDoKICAvLyBpZiB0aGV5IGFyZSBpbiBhIHRyZWUgYnV0IG5vdCBpbiB0aGUgbWFpbiBkb2N1bWVudCBhbmQgbm90IGNoaWxkcmVuIG9mIDxlbGVtZW50PgogIHJldHVybiBub2RlLnBhcmVudE5vZGUgJiYgIWluTWFpbkRvY3VtZW50KG5vZGUpIAogICAgICAmJiAhaXNFbGVtZW50RWxlbWVudENoaWxkKG5vZGUpOwp9CgpmdW5jdGlvbiBpbk1haW5Eb2N1bWVudChlbHQpIHsKICByZXR1cm4gZWx0Lm93bmVyRG9jdW1lbnQgPT09IGRvY3VtZW50IHx8CiAgICAvLyBUT0RPKHNqbWlsZXMpOiBTaGFkb3dET01Qb2x5ZmlsbCBpbnRydXNpb24KICAgIGVsdC5vd25lckRvY3VtZW50LmltcGwgPT09IGRvY3VtZW50Owp9CgpmdW5jdGlvbiBpc0VsZW1lbnRFbGVtZW50Q2hpbGQoZWx0KSB7CiAgcmV0dXJuIGVsdC5wYXJlbnROb2RlICYmIGVsdC5wYXJlbnROb2RlLmxvY2FsTmFtZSA9PT0gJ2VsZW1lbnQnOwp9CgovLyBleHBvcnRzCgpzY29wZS5wYXJzZXIgPSBpbXBvcnRQYXJzZXI7Cgp9KShIVE1MSW1wb3J0cyk7Ci8qCiAqIENvcHlyaWdodCAyMDEzIFRoZSBQb2x5bWVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlCiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KICovCihmdW5jdGlvbigpewoKLy8gYm9vdHN0cmFwCgovLyBJRSBzaGltIGZvciBDdXN0b21FdmVudAppZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCAhPT0gJ2Z1bmN0aW9uJykgewogIHdpbmRvdy5DdXN0b21FdmVudCA9IGZ1bmN0aW9uKGluVHlwZSkgewogICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTsKICAgICBlLmluaXRFdmVudChpblR5cGUsIHRydWUsIHRydWUpOwogICAgIHJldHVybiBlOwogIH07Cn0KCmZ1bmN0aW9uIGJvb3RzdHJhcCgpIHsKICAvLyBwcmVsb2FkIGRvY3VtZW50IHJlc291cmNlIHRyZWVzCiAgSFRNTEltcG9ydHMuaW1wb3J0ZXIubG9hZChkb2N1bWVudCwgZnVuY3Rpb24oKSB7CiAgICBIVE1MSW1wb3J0cy5wYXJzZXIucGFyc2UoZG9jdW1lbnQpOwogICAgSFRNTEltcG9ydHMucmVhZHlUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAvLyBzZW5kIEhUTUxJbXBvcnRzTG9hZGVkIHdoZW4gZmluaXNoZWQKICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoCiAgICAgIG5ldyBDdXN0b21FdmVudCgnSFRNTEltcG9ydHNMb2FkZWQnLCB7YnViYmxlczogdHJ1ZX0pCiAgICApOwogIH0pOwp9OwoKaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHsKICBib290c3RyYXAoKTsKfSBlbHNlIHsKICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGJvb3RzdHJhcCk7Cn0KCn0pKCk7CgovKgogKiBDb3B5cmlnaHQgMjAxMyBUaGUgUG9seW1lciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZQogKiBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCiAqLwoKKGZ1bmN0aW9uKCkgewoKLy8gaW1wb3J0Cgp2YXIgSU1QT1JUX0xJTktfVFlQRSA9IHdpbmRvdy5IVE1MSW1wb3J0cyA/IEhUTUxJbXBvcnRzLklNUE9SVF9MSU5LX1RZUEUgOiAnbm9uZSc7CgovLyBoaWdobGFuZGVyIG9iamVjdCBmb3IgcGFyc2luZyBhIGRvY3VtZW50IHRyZWUKCnZhciBwYXJzZXIgPSB7CiAgc2VsZWN0b3JzOiBbCiAgICAnbGlua1tyZWw9JyArIElNUE9SVF9MSU5LX1RZUEUgKyAnXScKICBdLAogIG1hcDogewogICAgbGluazogJ3BhcnNlTGluaycKICB9LAogIHBhcnNlOiBmdW5jdGlvbihpbkRvY3VtZW50KSB7CiAgICBpZiAoIWluRG9jdW1lbnQuX19wYXJzZWQpIHsKICAgICAgLy8gb25seSBwYXJzZSBvbmNlCiAgICAgIGluRG9jdW1lbnQuX19wYXJzZWQgPSB0cnVlOwogICAgICAvLyBhbGwgcGFyc2FibGUgZWxlbWVudHMgaW4gaW5Eb2N1bWVudCAoZGVwdGgtZmlyc3QgcHJlLW9yZGVyIHRyYXZlcnNhbCkKICAgICAgdmFyIGVsdHMgPSBpbkRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyc2VyLnNlbGVjdG9ycyk7CiAgICAgIC8vIGZvciBlYWNoIHBhcnNhYmxlIG5vZGUgdHlwZSwgY2FsbCB0aGUgbWFwcGVkIHBhcnNpbmcgbWV0aG9kCiAgICAgIGZvckVhY2goZWx0cywgZnVuY3Rpb24oZSkgewogICAgICAgIHBhcnNlcltwYXJzZXIubWFwW2UubG9jYWxOYW1lXV0oZSk7CiAgICAgIH0pOwogICAgICAvLyB1cGdyYWRlIGFsbCB1cGdyYWRlYWJsZSBzdGF0aWMgZWxlbWVudHMsIGFueXRoaW5nIGR5bmFtaWNhbGx5CiAgICAgIC8vIGNyZWF0ZWQgc2hvdWxkIGJlIGNhdWdodCBieSBvYnNlcnZlcgogICAgICBDdXN0b21FbGVtZW50cy51cGdyYWRlRG9jdW1lbnQoaW5Eb2N1bWVudCk7CiAgICAgIC8vIG9ic2VydmUgZG9jdW1lbnQgZm9yIGRvbSBjaGFuZ2VzCiAgICAgIEN1c3RvbUVsZW1lbnRzLm9ic2VydmVEb2N1bWVudChpbkRvY3VtZW50KTsKICAgIH0KICB9LAogIHBhcnNlTGluazogZnVuY3Rpb24obGlua0VsdCkgewogICAgLy8gaW1wb3J0cwogICAgaWYgKGlzRG9jdW1lbnRMaW5rKGxpbmtFbHQpKSB7CiAgICAgIHRoaXMucGFyc2VJbXBvcnQobGlua0VsdCk7CiAgICB9CiAgfSwKICBwYXJzZUltcG9ydDogZnVuY3Rpb24obGlua0VsdCkgewogICAgaWYgKGxpbmtFbHQuY29udGVudCkgewogICAgICBwYXJzZXIucGFyc2UobGlua0VsdC5jb250ZW50KTsKICAgIH0KICB9Cn07CgpmdW5jdGlvbiBpc0RvY3VtZW50TGluayhpbkVsdCkgewogIHJldHVybiAoaW5FbHQubG9jYWxOYW1lID09PSAnbGluaycKICAgICAgJiYgaW5FbHQuZ2V0QXR0cmlidXRlKCdyZWwnKSA9PT0gSU1QT1JUX0xJTktfVFlQRSk7Cn0KCnZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKTsKCi8vIGV4cG9ydHMKCkN1c3RvbUVsZW1lbnRzLnBhcnNlciA9IHBhcnNlcjsKCn0pKCk7Ci8qCiAqIENvcHlyaWdodCAyMDEzIFRoZSBQb2x5bWVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlCiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KICovCihmdW5jdGlvbigpewoKLy8gYm9vdHN0cmFwIHBhcnNpbmcKZnVuY3Rpb24gYm9vdHN0cmFwKCkgewogIC8vIHBhcnNlIGRvY3VtZW50CiAgQ3VzdG9tRWxlbWVudHMucGFyc2VyLnBhcnNlKGRvY3VtZW50KTsKICAvLyBvbmUgbW9yZSBwYXNzIGJlZm9yZSByZWdpc3RlciBpcyAnbGl2ZScKICBDdXN0b21FbGVtZW50cy51cGdyYWRlRG9jdW1lbnQoZG9jdW1lbnQpOyAgCiAgLy8gY2hvb3NlIGFzeW5jCiAgdmFyIGFzeW5jID0gd2luZG93LlBsYXRmb3JtICYmIFBsYXRmb3JtLmVuZE9mTWljcm90YXNrID8gCiAgICBQbGF0Zm9ybS5lbmRPZk1pY3JvdGFzayA6CiAgICBzZXRUaW1lb3V0OwogIGFzeW5jKGZ1bmN0aW9uKCkgewogICAgLy8gc2V0IGludGVybmFsICdyZWFkeScgZmxhZywgbm93IGRvY3VtZW50LnJlZ2lzdGVyIHdpbGwgdHJpZ2dlciAKICAgIC8vIHN5bmNocm9ub3VzIHVwZ3JhZGVzCiAgICBDdXN0b21FbGVtZW50cy5yZWFkeSA9IHRydWU7CiAgICAvLyBjYXB0dXJlIGJsdW50IHByb2ZpbGluZyBkYXRhCiAgICBDdXN0b21FbGVtZW50cy5yZWFkeVRpbWUgPSBEYXRlLm5vdygpOwogICAgaWYgKHdpbmRvdy5IVE1MSW1wb3J0cykgewogICAgICBDdXN0b21FbGVtZW50cy5lbGFwc2VkID0gQ3VzdG9tRWxlbWVudHMucmVhZHlUaW1lIC0gSFRNTEltcG9ydHMucmVhZHlUaW1lOwogICAgfQogICAgLy8gbm90aWZ5IHRoZSBzeXN0ZW0gdGhhdCB3ZSBhcmUgYm9vdHN0cmFwcGVkCiAgICBkb2N1bWVudC5ib2R5LmRpc3BhdGNoRXZlbnQoCiAgICAgIG5ldyBDdXN0b21FdmVudCgnV2ViQ29tcG9uZW50c1JlYWR5Jywge2J1YmJsZXM6IHRydWV9KQogICAgKTsKICB9KTsKfQoKLy8gQ3VzdG9tRXZlbnQgc2hpbSBmb3IgSUUKaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgIT09ICdmdW5jdGlvbicpIHsKICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBmdW5jdGlvbihpblR5cGUpIHsKICAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7CiAgICAgZS5pbml0RXZlbnQoaW5UeXBlLCB0cnVlLCB0cnVlKTsKICAgICByZXR1cm4gZTsKICB9Owp9CgppZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykgewogIGJvb3RzdHJhcCgpOwp9IGVsc2UgewogIHZhciBsb2FkRXZlbnQgPSB3aW5kb3cuSFRNTEltcG9ydHMgPyAnSFRNTEltcG9ydHNMb2FkZWQnIDogJ0RPTUNvbnRlbnRMb2FkZWQnOwogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGxvYWRFdmVudCwgYm9vdHN0cmFwKTsKfQoKfSkoKTsKCihmdW5jdGlvbiAoKSB7CgovKioqIFZhcmlhYmxlcyAqKiovCgogIHZhciB3aW4gPSB3aW5kb3csCiAgICBkb2MgPSBkb2N1bWVudCwKICAgIG5vb3AgPSBmdW5jdGlvbigpe30sCiAgICB0cnVlb3AgPSBmdW5jdGlvbigpeyByZXR1cm4gdHJ1ZTsgfSwKICAgIHJlZ2V4UHNldWRvU3BsaXQgPSAvKFtcdy1dKyg/OlwoW15cKV0rXCkpPykvZywKICAgIHJlZ2V4UHNldWRvUmVwbGFjZSA9IC8oXHcqKSg/OlwoKFteXCldKilcKSk/LywKICAgIHJlZ2V4RGlnaXRzID0gLyhcZCspL2csCiAgICBrZXlwc2V1ZG8gPSB7CiAgICAgIGFjdGlvbjogZnVuY3Rpb24gKHBzZXVkbywgZXZlbnQpIHsKICAgICAgICByZXR1cm4gcHNldWRvLnZhbHVlLm1hdGNoKHJlZ2V4RGlnaXRzKS5pbmRleE9mKFN0cmluZyhldmVudC5rZXlDb2RlKSkgPiAtMSA9PSAocHNldWRvLm5hbWUgPT0gJ2tleXBhc3MnKSB8fCBudWxsOwogICAgICB9CiAgICB9LAogICAgcHJlZml4ID0gKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHN0eWxlcyA9IHdpbi5nZXRDb21wdXRlZFN0eWxlKGRvYy5kb2N1bWVudEVsZW1lbnQsICcnKSwKICAgICAgICAgIHByZSA9IChBcnJheS5wcm90b3R5cGUuc2xpY2UKICAgICAgICAgICAgLmNhbGwoc3R5bGVzKQogICAgICAgICAgICAuam9pbignJykKICAgICAgICAgICAgLm1hdGNoKC8tKG1venx3ZWJraXR8bXMpLS8pIHx8IChzdHlsZXMuT0xpbmsgPT09ICcnICYmIFsnJywgJ28nXSkKICAgICAgICAgIClbMV07CiAgICAgIHJldHVybiB7CiAgICAgICAgZG9tOiBwcmUgPT0gJ21zJyA/ICdNUycgOiBwcmUsCiAgICAgICAgbG93ZXJjYXNlOiBwcmUsCiAgICAgICAgY3NzOiAnLScgKyBwcmUgKyAnLScsCiAgICAgICAganM6IHByZSA9PSAnbXMnID8gcHJlIDogcHJlWzBdLnRvVXBwZXJDYXNlKCkgKyBwcmUuc3Vic3RyKDEpCiAgICAgIH07CiAgICB9KSgpLAogICAgbWF0Y2hTZWxlY3RvciA9IEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZVtwcmVmaXgubG93ZXJjYXNlICsgJ01hdGNoZXNTZWxlY3RvciddLAogICAgbXV0YXRpb24gPSB3aW4uTXV0YXRpb25PYnNlcnZlciB8fCB3aW5bcHJlZml4LmpzICsgJ011dGF0aW9uT2JzZXJ2ZXInXTsKCi8qKiogRnVuY3Rpb25zICoqKi8KCi8vIFV0aWxpdGllcwoKICB2YXIgdHlwZUNhY2hlID0ge30sCiAgICAgIHR5cGVTdHJpbmcgPSB0eXBlQ2FjaGUudG9TdHJpbmcsCiAgICAgIHR5cGVSZWdleHAgPSAvXHMoW2EtekEtWl0rKS87CiAgZnVuY3Rpb24gdHlwZU9mKG9iaikgewogICAgdmFyIHR5cGUgPSB0eXBlU3RyaW5nLmNhbGwob2JqKTsKICAgIHJldHVybiB0eXBlQ2FjaGVbdHlwZV0gfHwgKHR5cGVDYWNoZVt0eXBlXSA9IHR5cGUubWF0Y2godHlwZVJlZ2V4cClbMV0udG9Mb3dlckNhc2UoKSk7CiAgfQoKICBmdW5jdGlvbiBjbG9uZShpdGVtLCB0eXBlKXsKICAgIHZhciBmbiA9IGNsb25lW3R5cGUgfHwgdHlwZU9mKGl0ZW0pXTsKICAgIHJldHVybiBmbiA/IGZuKGl0ZW0pIDogaXRlbTsKICB9CiAgICBjbG9uZS5vYmplY3QgPSBmdW5jdGlvbihzcmMpewogICAgICB2YXIgb2JqID0ge307CiAgICAgIGZvciAodmFyIGtleSBpbiBzcmMpIG9ialtrZXldID0gY2xvbmUoc3JjW2tleV0pOwogICAgICByZXR1cm4gb2JqOwogICAgfTsKICAgIGNsb25lLmFycmF5ID0gZnVuY3Rpb24oc3JjKXsKICAgICAgdmFyIGkgPSBzcmMubGVuZ3RoLCBhcnJheSA9IG5ldyBBcnJheShpKTsKICAgICAgd2hpbGUgKGktLSkgYXJyYXlbaV0gPSBjbG9uZShzcmNbaV0pOwogICAgICByZXR1cm4gYXJyYXk7CiAgICB9OwoKICB2YXIgdW5zbGljZWFibGUgPSBbJ3VuZGVmaW5lZCcsICdudWxsJywgJ251bWJlcicsICdib29sZWFuJywgJ3N0cmluZycsICdmdW5jdGlvbiddOwogIGZ1bmN0aW9uIHRvQXJyYXkob2JqKXsKICAgIHJldHVybiB1bnNsaWNlYWJsZS5pbmRleE9mKHR5cGVPZihvYmopKSA9PSAtMSA/CiAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmosIDApIDoKICAgIFtvYmpdOwogIH0KCi8vIERPTQogIHZhciBzdHIgPSAnJzsKICBmdW5jdGlvbiBxdWVyeShlbGVtZW50LCBzZWxlY3Rvcil7CiAgICByZXR1cm4gKHNlbGVjdG9yIHx8IHN0cikubGVuZ3RoID8gdG9BcnJheShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSA6IFtdOwogIH0KCiAgZnVuY3Rpb24gcGFyc2VNdXRhdGlvbnMoZWxlbWVudCwgbXV0YXRpb25zKSB7CiAgICB2YXIgZGlmZiA9IHsgYWRkZWQ6IFtdLCByZW1vdmVkOiBbXSB9OwogICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24ocmVjb3JkKXsKICAgICAgcmVjb3JkLl9tdXRhdGlvbiA9IHRydWU7CiAgICAgIGZvciAodmFyIHogaW4gZGlmZikgewogICAgICAgIHZhciB0eXBlID0gZWxlbWVudC5fcmVjb3Jkc1soeiA9PSAnYWRkZWQnKSA/ICdpbnNlcnRlZCcgOiAncmVtb3ZlZCddLAogICAgICAgICAgbm9kZXMgPSByZWNvcmRbeiArICdOb2RlcyddLCBsZW5ndGggPSBub2Rlcy5sZW5ndGg7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGggJiYgZGlmZlt6XS5pbmRleE9mKG5vZGVzW2ldKSA9PSAtMTsgaSsrKXsKICAgICAgICAgIGRpZmZbel0ucHVzaChub2Rlc1tpXSk7CiAgICAgICAgICB0eXBlLmZvckVhY2goZnVuY3Rpb24oZm4pewogICAgICAgICAgICBmbihub2Rlc1tpXSwgcmVjb3JkKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfQoKLy8gTWl4aW5zCgogIGZ1bmN0aW9uIG1lcmdlT25lKHNvdXJjZSwga2V5LCBjdXJyZW50KXsKICAgIHZhciB0eXBlID0gdHlwZU9mKGN1cnJlbnQpOwogICAgaWYgKHR5cGUgPT0gJ29iamVjdCcgJiYgdHlwZU9mKHNvdXJjZVtrZXldKSA9PSAnb2JqZWN0JykgeHRhZy5tZXJnZShzb3VyY2Vba2V5XSwgY3VycmVudCk7CiAgICBlbHNlIHNvdXJjZVtrZXldID0gY2xvbmUoY3VycmVudCwgdHlwZSk7CiAgICByZXR1cm4gc291cmNlOwogIH0KCiAgZnVuY3Rpb24gbWVyZ2VNaXhpbih0eXBlLCBtaXhpbiwgb3B0aW9uKSB7CiAgICB2YXIgb3JpZ2luYWwgPSB7fTsKICAgIGZvciAodmFyIG8gaW4gb3B0aW9uKSBvcmlnaW5hbFtvLnNwbGl0KCc6JylbMF1dID0gdHJ1ZTsKICAgIGZvciAodmFyIHggaW4gbWl4aW4pIGlmICghb3JpZ2luYWxbeC5zcGxpdCgnOicpWzBdXSkgb3B0aW9uW3hdID0gbWl4aW5beF07CiAgfQoKICBmdW5jdGlvbiBhcHBseU1peGlucyh0YWcpIHsKICAgIHRhZy5taXhpbnMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICB2YXIgbWl4aW4gPSB4dGFnLm1peGluc1tuYW1lXTsKICAgICAgZm9yICh2YXIgdHlwZSBpbiBtaXhpbikgewogICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgY2FzZSAnbGlmZWN5Y2xlJzogY2FzZSAnbWV0aG9kcyc6CiAgICAgICAgICAgIG1lcmdlTWl4aW4odHlwZSwgbWl4aW5bdHlwZV0sIHRhZ1t0eXBlXSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAnYWNjZXNzb3JzJzogY2FzZSAncHJvdG90eXBlJzoKICAgICAgICAgICAgZm9yICh2YXIgeiBpbiBtaXhpblt0eXBlXSkgbWVyZ2VNaXhpbih6LCBtaXhpblt0eXBlXSwgdGFnLmFjY2Vzc29ycyk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAnZXZlbnRzJzoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIHJldHVybiB0YWc7CiAgfQoKLy8gRXZlbnRzCgogIGZ1bmN0aW9uIGRlbGVnYXRlQWN0aW9uKHBzZXVkbywgZXZlbnQpIHsKICAgIHZhciB0YXJnZXQgPSBxdWVyeSh0aGlzLCBwc2V1ZG8udmFsdWUpLmZpbHRlcihmdW5jdGlvbihub2RlKXsKICAgICAgcmV0dXJuIG5vZGUgPT0gZXZlbnQudGFyZ2V0IHx8IG5vZGUuY29udGFpbnMgPyBub2RlLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgOiBudWxsOwogICAgfSlbMF07CiAgICByZXR1cm4gdGFyZ2V0ID8gcHNldWRvLmxpc3RlbmVyID0gcHNldWRvLmxpc3RlbmVyLmJpbmQodGFyZ2V0KSA6IG51bGw7CiAgfQoKICBmdW5jdGlvbiB0b3VjaEZpbHRlcihldmVudCkgewogICAgaWYgKGV2ZW50LnR5cGUubWF0Y2goJ3RvdWNoJykpewogICAgICBldmVudC50YXJnZXQuX190b3VjaGVkX18gPSB0cnVlOwogICAgfQogICAgZWxzZSBpZiAoZXZlbnQudGFyZ2V0Ll9fdG91Y2hlZF9fICYmIGV2ZW50LnR5cGUubWF0Y2goJ21vdXNlJykpewogICAgICBkZWxldGUgZXZlbnQudGFyZ2V0Ll9fdG91Y2hlZF9fOwogICAgICByZXR1cm47CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUZsb3dFdmVudCh0eXBlKSB7CiAgICB2YXIgZmxvdyA9IHR5cGUgPT0gJ292ZXInOwogICAgcmV0dXJuIHsKICAgICAgYXR0YWNoOiAnT3ZlcmZsb3dFdmVudCcgaW4gd2luID8gJ292ZXJmbG93Y2hhbmdlZCcgOiBbXSwKICAgICAgY29uZGl0aW9uOiBmdW5jdGlvbiAoZXZlbnQsIGN1c3RvbSkgewogICAgICAgIGV2ZW50LmZsb3cgPSB0eXBlOwogICAgICAgIHJldHVybiBldmVudC50eXBlID09ICh0eXBlICsgJ2Zsb3cnKSB8fAogICAgICAgICgoZXZlbnQub3JpZW50ID09PSAwICYmIGV2ZW50Lmhvcml6b250YWxPdmVyZmxvdyA9PSBmbG93KSB8fAogICAgICAgIChldmVudC5vcmllbnQgPT0gMSAmJiBldmVudC52ZXJ0aWNhbE92ZXJmbG93ID09IGZsb3cpIHx8CiAgICAgICAgKGV2ZW50Lm9yaWVudCA9PSAyICYmIGV2ZW50Lmhvcml6b250YWxPdmVyZmxvdyA9PSBmbG93ICYmIGV2ZW50LnZlcnRpY2FsT3ZlcmZsb3cgPT0gZmxvdykpOwogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gd3JpdGVQcm9wZXJ0eShrZXksIGV2ZW50LCBiYXNlLCBkZXNjKXsKICAgIGlmIChkZXNjKSBldmVudFtrZXldID0gYmFzZVtrZXldOwogICAgZWxzZSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsIGtleSwgewogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgdmFsdWU6IGJhc2Vba2V5XQogICAgfSk7CiAgfQoKICB2YXIgc2tpcFByb3BzID0ge307CiAgZm9yICh2YXIgeiBpbiBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKSkgc2tpcFByb3BzW3pdID0gMTsKICBmdW5jdGlvbiBpbmhlcml0RXZlbnQoZXZlbnQsIGJhc2UpewogICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGV2ZW50LCAndGFyZ2V0Jyk7CiAgICBmb3IgKHZhciB6IGluIGJhc2UpIHsKICAgICAgaWYgKCFza2lwUHJvcHNbel0pIHdyaXRlUHJvcGVydHkoeiwgZXZlbnQsIGJhc2UsIGRlc2MpOwogICAgfQogICAgZXZlbnQuYmFzZUV2ZW50ID0gYmFzZTsKICB9CgovLyBBY2Nlc3NvcnMKCiAgZnVuY3Rpb24gZ2V0QXJncyhhdHRyLCB2YWx1ZSl7CiAgICByZXR1cm4gewogICAgICB2YWx1ZTogYXR0ci5ib29sZWFuID8gJycgOiB2YWx1ZSwKICAgICAgbWV0aG9kOiBhdHRyLmJvb2xlYW4gJiYgIXZhbHVlID8gJ3JlbW92ZUF0dHJpYnV0ZScgOiAnc2V0QXR0cmlidXRlJwogICAgfTsKICB9CgogIGZ1bmN0aW9uIG1vZEF0dHIoZWxlbWVudCwgYXR0ciwgbmFtZSwgdmFsdWUpewogICAgdmFyIGFyZ3MgPSBnZXRBcmdzKGF0dHIsIHZhbHVlKTsKICAgIGVsZW1lbnRbYXJncy5tZXRob2RdKG5hbWUsIGFyZ3MudmFsdWUpOwogIH0KCiAgZnVuY3Rpb24gc3luY0F0dHIoZWxlbWVudCwgYXR0ciwgbmFtZSwgdmFsdWUsIG1ldGhvZCl7CiAgICB2YXIgbm9kZXMgPSBhdHRyLnByb3BlcnR5ID8gW2VsZW1lbnQueHRhZ1thdHRyLnByb3BlcnR5XV0gOiBhdHRyLnNlbGVjdG9yID8geHRhZy5xdWVyeShlbGVtZW50LCBhdHRyLnNlbGVjdG9yKSA6IFtdLAogICAgICAgIGluZGV4ID0gbm9kZXMubGVuZ3RoOwogICAgd2hpbGUgKGluZGV4LS0pIG5vZGVzW2luZGV4XVttZXRob2RdKG5hbWUsIHZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIHVwZGF0ZVZpZXcoZWxlbWVudCwgbmFtZSwgdmFsdWUpewogICAgaWYgKGVsZW1lbnQuX192aWV3X18pewogICAgICBlbGVtZW50Ll9fdmlld19fLnVwZGF0ZUJpbmRpbmdWYWx1ZShlbGVtZW50LCBuYW1lLCB2YWx1ZSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBhdHRhY2hQcm9wZXJ0aWVzKHRhZywgcHJvcCwgeiwgYWNjZXNzb3IsIGF0dHIsIG5hbWUpewogICAgdmFyIGtleSA9IHouc3BsaXQoJzonKSwgdHlwZSA9IGtleVswXTsKICAgIGlmICh0eXBlID09ICdnZXQnKSB7CiAgICAgIGtleVswXSA9IHByb3A7CiAgICAgIHRhZy5wcm90b3R5cGVbcHJvcF0uZ2V0ID0geHRhZy5hcHBseVBzZXVkb3Moa2V5LmpvaW4oJzonKSwgYWNjZXNzb3Jbel0sIHRhZy5wc2V1ZG9zKTsKICAgIH0KICAgIGVsc2UgaWYgKHR5cGUgPT0gJ3NldCcpIHsKICAgICAga2V5WzBdID0gcHJvcDsKICAgICAgdmFyIHNldHRlciA9IHRhZy5wcm90b3R5cGVbcHJvcF0uc2V0ID0geHRhZy5hcHBseVBzZXVkb3Moa2V5LmpvaW4oJzonKSwgYXR0ciA/IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICB0aGlzLnh0YWcuX3NraXBTZXQgPSB0cnVlOwogICAgICAgIGlmICghdGhpcy54dGFnLl9za2lwQXR0cikgbW9kQXR0cih0aGlzLCBhdHRyLCBuYW1lLCB2YWx1ZSk7CiAgICAgICAgaWYgKHRoaXMueHRhZy5fc2tpcEF0dHIgJiYgYXR0ci5za2lwKSBkZWxldGUgdGhpcy54dGFnLl9za2lwQXR0cjsKICAgICAgICBhY2Nlc3Nvclt6XS5jYWxsKHRoaXMsIGF0dHIuYm9vbGVhbiA/ICEhdmFsdWUgOiB2YWx1ZSk7CiAgICAgICAgdXBkYXRlVmlldyh0aGlzLCBuYW1lLCB2YWx1ZSk7CiAgICAgICAgZGVsZXRlIHRoaXMueHRhZy5fc2tpcFNldDsKICAgICAgfSA6IGFjY2Vzc29yW3pdID8gZnVuY3Rpb24odmFsdWUpewogICAgICAgIGFjY2Vzc29yW3pdLmNhbGwodGhpcywgdmFsdWUpOwogICAgICAgIHVwZGF0ZVZpZXcodGhpcywgbmFtZSwgdmFsdWUpOwogICAgICB9IDogbnVsbCwgdGFnLnBzZXVkb3MpOwoKICAgICAgaWYgKGF0dHIpIGF0dHIuc2V0dGVyID0gc2V0dGVyOwogICAgfQogICAgZWxzZSB0YWcucHJvdG90eXBlW3Byb3BdW3pdID0gYWNjZXNzb3Jbel07CiAgfQoKICBmdW5jdGlvbiBwYXJzZUFjY2Vzc29yKHRhZywgcHJvcCl7CiAgICB0YWcucHJvdG90eXBlW3Byb3BdID0ge307CiAgICB2YXIgYWNjZXNzb3IgPSB0YWcuYWNjZXNzb3JzW3Byb3BdLAogICAgICAgIGF0dHIgPSBhY2Nlc3Nvci5hdHRyaWJ1dGUsCiAgICAgICAgbmFtZSA9IGF0dHIgJiYgYXR0ci5uYW1lID8gYXR0ci5uYW1lLnRvTG93ZXJDYXNlKCkgOiBwcm9wOwoKICAgIGlmIChhdHRyKSB7CiAgICAgIGF0dHIua2V5ID0gcHJvcDsKICAgICAgdGFnLmF0dHJpYnV0ZXNbbmFtZV0gPSBhdHRyOwogICAgfQoKICAgIGZvciAodmFyIHogaW4gYWNjZXNzb3IpIGF0dGFjaFByb3BlcnRpZXModGFnLCBwcm9wLCB6LCBhY2Nlc3NvciwgYXR0ciwgbmFtZSk7CgogICAgaWYgKGF0dHIpIHsKICAgICAgaWYgKCF0YWcucHJvdG90eXBlW3Byb3BdLmdldCkgewogICAgICAgIHZhciBtZXRob2QgPSAoYXR0ci5ib29sZWFuID8gJ2hhcycgOiAnZ2V0JykgKyAnQXR0cmlidXRlJzsKICAgICAgICB0YWcucHJvdG90eXBlW3Byb3BdLmdldCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICByZXR1cm4gdGhpc1ttZXRob2RdKG5hbWUpOwogICAgICAgIH07CiAgICAgIH0KICAgICAgaWYgKCF0YWcucHJvdG90eXBlW3Byb3BdLnNldCkgdGFnLnByb3RvdHlwZVtwcm9wXS5zZXQgPSBmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgbW9kQXR0cih0aGlzLCBhdHRyLCBuYW1lLCB2YWx1ZSk7CiAgICAgICAgdXBkYXRlVmlldyh0aGlzLCBuYW1lLCB2YWx1ZSk7CiAgICAgIH07CiAgICB9CiAgfQoKLyoqKiBYLVRhZyBPYmplY3QgRGVmaW5pdGlvbiAqKiovCgogIHZhciB4dGFnID0gewogICAgdGFnczoge30sCiAgICBkZWZhdWx0T3B0aW9uczogewogICAgICBwc2V1ZG9zOiBbXSwKICAgICAgbWl4aW5zOiBbXSwKICAgICAgZXZlbnRzOiB7fSwKICAgICAgbWV0aG9kczoge30sCiAgICAgIGFjY2Vzc29yczoge30sCiAgICAgIGxpZmVjeWNsZToge30sCiAgICAgIGF0dHJpYnV0ZXM6IHt9LAogICAgICAncHJvdG90eXBlJzogewogICAgICAgIHh0YWc6IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX194dGFnX18gPyB0aGlzLl9feHRhZ19fIDogKHRoaXMuX194dGFnX18gPSB7IGRhdGE6IHt9IH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiAobmFtZSwgb3B0aW9ucykgewogICAgICB2YXIgX25hbWU7CiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJykgewogICAgICAgIF9uYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgLy8gc2F2ZSBwcm90b3R5cGUgZm9yIGFjdHVhbCBvYmplY3QgY3JlYXRpb24gYmVsb3cKICAgICAgdmFyIGJhc2VQcm90b3R5cGUgPSBvcHRpb25zLnByb3RvdHlwZTsKICAgICAgZGVsZXRlIG9wdGlvbnMucHJvdG90eXBlOwoKICAgICAgdmFyIHRhZyA9IHh0YWcudGFnc1tfbmFtZV0gPSBhcHBseU1peGlucyh4dGFnLm1lcmdlKHt9LCB4dGFnLmRlZmF1bHRPcHRpb25zLCBvcHRpb25zKSk7CgogICAgICBmb3IgKHZhciB6IGluIHRhZy5ldmVudHMpIHRhZy5ldmVudHNbel0gPSB4dGFnLnBhcnNlRXZlbnQoeiwgdGFnLmV2ZW50c1t6XSk7CiAgICAgIGZvciAoeiBpbiB0YWcubGlmZWN5Y2xlKSB0YWcubGlmZWN5Y2xlW3ouc3BsaXQoJzonKVswXV0gPSB4dGFnLmFwcGx5UHNldWRvcyh6LCB0YWcubGlmZWN5Y2xlW3pdLCB0YWcucHNldWRvcyk7CiAgICAgIGZvciAoeiBpbiB0YWcubWV0aG9kcykgdGFnLnByb3RvdHlwZVt6LnNwbGl0KCc6JylbMF1dID0geyB2YWx1ZTogeHRhZy5hcHBseVBzZXVkb3MoeiwgdGFnLm1ldGhvZHNbel0sIHRhZy5wc2V1ZG9zKSwgZW51bWVyYWJsZTogdHJ1ZSB9OwogICAgICBmb3IgKHogaW4gdGFnLmFjY2Vzc29ycykgcGFyc2VBY2Nlc3Nvcih0YWcsIHopOwoKICAgICAgdmFyIHJlYWR5ID0gdGFnLmxpZmVjeWNsZS5jcmVhdGVkIHx8IHRhZy5saWZlY3ljbGUucmVhZHk7CiAgICAgIHRhZy5wcm90b3R5cGUuY3JlYXRlZENhbGxiYWNrID0gewogICAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCl7CiAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXM7CiAgICAgICAgICB4dGFnLmFkZEV2ZW50cyh0aGlzLCB0YWcuZXZlbnRzKTsKICAgICAgICAgIHRhZy5taXhpbnMuZm9yRWFjaChmdW5jdGlvbihtaXhpbil7CiAgICAgICAgICAgIGlmICh4dGFnLm1peGluc1ttaXhpbl0uZXZlbnRzKSB4dGFnLmFkZEV2ZW50cyhlbGVtZW50LCB4dGFnLm1peGluc1ttaXhpbl0uZXZlbnRzKTsKICAgICAgICAgIH0pOwogICAgICAgICAgdmFyIG91dHB1dCA9IHJlYWR5ID8gcmVhZHkuYXBwbHkodGhpcywgdG9BcnJheShhcmd1bWVudHMpKSA6IG51bGw7CiAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRhZy5hdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgIHZhciBhdHRyID0gdGFnLmF0dHJpYnV0ZXNbbmFtZV0sCiAgICAgICAgICAgICAgICBoYXNBdHRyID0gdGhpcy5oYXNBdHRyaWJ1dGUobmFtZSk7CiAgICAgICAgICAgIGlmIChoYXNBdHRyIHx8IGF0dHIuYm9vbGVhbikgewogICAgICAgICAgICAgIHRoaXNbYXR0ci5rZXldID0gYXR0ci5ib29sZWFuID8gaGFzQXR0ciA6IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB0YWcucHNldWRvcy5mb3JFYWNoKGZ1bmN0aW9uKG9iail7CiAgICAgICAgICAgIG9iai5vbkFkZC5jYWxsKGVsZW1lbnQsIG9iaik7CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiBvdXRwdXQ7CiAgICAgICAgfQogICAgICB9OwoKICAgICAgaWYgKHRhZy5saWZlY3ljbGUuaW5zZXJ0ZWQpIHRhZy5wcm90b3R5cGUuZW50ZXJlZFZpZXdDYWxsYmFjayA9IHsgdmFsdWU6IHRhZy5saWZlY3ljbGUuaW5zZXJ0ZWQsIGVudW1lcmFibGU6IHRydWUgfTsKICAgICAgaWYgKHRhZy5saWZlY3ljbGUucmVtb3ZlZCkgdGFnLnByb3RvdHlwZS5sZWZ0RG9jdW1lbnRDYWxsYmFjayA9IHsgdmFsdWU6IHRhZy5saWZlY3ljbGUucmVtb3ZlZCwgZW51bWVyYWJsZTogdHJ1ZSB9OwogICAgICBpZiAodGFnLmxpZmVjeWNsZS5hdHRyaWJ1dGVDaGFuZ2VkKSB0YWcucHJvdG90eXBlLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayA9IHsgdmFsdWU6IHRhZy5saWZlY3ljbGUuYXR0cmlidXRlQ2hhbmdlZCwgZW51bWVyYWJsZTogdHJ1ZSB9OwoKICAgICAgdmFyIHNldEF0dHJpYnV0ZSA9IHRhZy5wcm90b3R5cGUuc2V0QXR0cmlidXRlIHx8IEhUTUxFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGU7CiAgICAgIHRhZy5wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gewogICAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICAgIGVudW1iZXJhYmxlOiB0cnVlLAogICAgICAgIHZhbHVlOiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpewogICAgICAgICAgdmFyIGF0dHIgPSB0YWcuYXR0cmlidXRlc1tuYW1lLnRvTG93ZXJDYXNlKCldOwogICAgICAgICAgaWYgKCF0aGlzLnh0YWcuX3NraXBBdHRyKSBzZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuYW1lLCBhdHRyICYmIGF0dHIuYm9vbGVhbiA/ICcnIDogdmFsdWUpOwogICAgICAgICAgaWYgKGF0dHIpIHsKICAgICAgICAgICAgaWYgKGF0dHIuc2V0dGVyICYmICF0aGlzLnh0YWcuX3NraXBTZXQpIHsKICAgICAgICAgICAgICB0aGlzLnh0YWcuX3NraXBBdHRyID0gdHJ1ZTsKICAgICAgICAgICAgICBhdHRyLnNldHRlci5jYWxsKHRoaXMsIGF0dHIuYm9vbGVhbiA/IHRydWUgOiB2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFsdWUgPSBhdHRyLnNraXAgPyBhdHRyLmJvb2xlYW4gPyB0aGlzLmhhc0F0dHJpYnV0ZShuYW1lKSA6IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpIDogdmFsdWU7CiAgICAgICAgICAgIHN5bmNBdHRyKHRoaXMsIGF0dHIsIG5hbWUsIGF0dHIuYm9vbGVhbiA/ICcnIDogdmFsdWUsICdzZXRBdHRyaWJ1dGUnKTsKICAgICAgICAgIH0KICAgICAgICAgIGRlbGV0ZSB0aGlzLnh0YWcuX3NraXBBdHRyOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIHZhciByZW1vdmVBdHRyaWJ1dGUgPSB0YWcucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZSB8fCBIVE1MRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlOwogICAgICB0YWcucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZSA9IHsKICAgICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgICBlbnVtYmVyYWJsZTogdHJ1ZSwKICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKG5hbWUpewogICAgICAgICAgdmFyIGF0dHIgPSB0YWcuYXR0cmlidXRlc1tuYW1lLnRvTG93ZXJDYXNlKCldOwogICAgICAgICAgaWYgKCF0aGlzLnh0YWcuX3NraXBBdHRyKSByZW1vdmVBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuYW1lKTsKICAgICAgICAgIGlmIChhdHRyKSB7CiAgICAgICAgICAgIGlmIChhdHRyLnNldHRlciAmJiAhdGhpcy54dGFnLl9za2lwU2V0KSB7CiAgICAgICAgICAgICAgdGhpcy54dGFnLl9za2lwQXR0ciA9IHRydWU7CiAgICAgICAgICAgICAgYXR0ci5zZXR0ZXIuY2FsbCh0aGlzLCBhdHRyLmJvb2xlYW4gPyBmYWxzZSA6IHVuZGVmaW5lZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc3luY0F0dHIodGhpcywgYXR0ciwgbmFtZSwgdW5kZWZpbmVkLCAncmVtb3ZlQXR0cmlidXRlJyk7CiAgICAgICAgICB9CiAgICAgICAgICBkZWxldGUgdGhpcy54dGFnLl9za2lwQXR0cjsKICAgICAgICB9CiAgICAgIH07CgogICAgICB2YXIgZWxlbWVudFByb3RvID0gYmFzZVByb3RvdHlwZSA/CiAgICAgICAgYmFzZVByb3RvdHlwZSA6CiAgICAgICAgICBvcHRpb25zWydleHRlbmRzJ10gPwogICAgICAgICAgICBPYmplY3QuY3JlYXRlKGRvYy5jcmVhdGVFbGVtZW50KG9wdGlvbnNbJ2V4dGVuZHMnXSkKICAgICAgICAgICAgICAuY29uc3RydWN0b3IpLnByb3RvdHlwZSA6CiAgICAgICAgICB3aW4uSFRNTEVsZW1lbnQucHJvdG90eXBlOwoKICAgICAgdmFyIGRlZmluaXRpb24gPSB7CiAgICAgICAgJ3Byb3RvdHlwZSc6IE9iamVjdC5jcmVhdGUoZWxlbWVudFByb3RvLCB0YWcucHJvdG90eXBlKQogICAgICB9OwogICAgICBpZiAob3B0aW9uc1snZXh0ZW5kcyddKSB7CiAgICAgICAgZGVmaW5pdGlvblsnZXh0ZW5kcyddID0gb3B0aW9uc1snZXh0ZW5kcyddOwogICAgICB9CiAgICAgIHJldHVybiBkb2MucmVnaXN0ZXIoX25hbWUsIGRlZmluaXRpb24pOwogICAgfSwKCiAgICAvKiBFeHBvc2VkIFZhcmlhYmxlcyAqLwoKICAgIG1peGluczoge30sCiAgICBwcmVmaXg6IHByZWZpeCwKICAgIHRvdWNoZXM6IHsKICAgICAgYWN0aXZlOiBbXSwKICAgICAgY2hhbmdlZDogW10KICAgIH0sCiAgICBjYXB0dXJlRXZlbnRzOiBbJ2ZvY3VzJywgJ2JsdXInLCAnc2Nyb2xsJywgJ3VuZGVyZmxvdycsICdvdmVyZmxvdycsICdvdmVyZmxvd2NoYW5nZWQnXSwKICAgIGN1c3RvbUV2ZW50czogewogICAgICBvdmVyZmxvdzogY3JlYXRlRmxvd0V2ZW50KCdvdmVyJyksCiAgICAgIHVuZGVyZmxvdzogY3JlYXRlRmxvd0V2ZW50KCd1bmRlcicpLAogICAgICBhbmltYXRpb25zdGFydDogewogICAgICAgIGF0dGFjaDogW3ByZWZpeC5kb20gKyAnQW5pbWF0aW9uU3RhcnQnXQogICAgICB9LAogICAgICBhbmltYXRpb25lbmQ6IHsKICAgICAgICBhdHRhY2g6IFtwcmVmaXguZG9tICsgJ0FuaW1hdGlvbkVuZCddCiAgICAgIH0sCiAgICAgIHRyYW5zaXRpb25lbmQ6IHsKICAgICAgICBhdHRhY2g6IFtwcmVmaXguZG9tICsgJ1RyYW5zaXRpb25FbmQnXQogICAgICB9LAogICAgICBtb3ZlOiB7CiAgICAgICAgYXR0YWNoOiBbJ21vdXNlbW92ZScsICd0b3VjaG1vdmUnXSwKICAgICAgICBjb25kaXRpb246IHRvdWNoRmlsdGVyCiAgICAgIH0sCiAgICAgIGVudGVyOiB7CiAgICAgICAgYXR0YWNoOiBbJ21vdXNlb3ZlcicsICd0b3VjaGVudGVyJ10sCiAgICAgICAgY29uZGl0aW9uOiB0b3VjaEZpbHRlcgogICAgICB9LAogICAgICBsZWF2ZTogewogICAgICAgIGF0dGFjaDogWydtb3VzZW91dCcsICd0b3VjaGxlYXZlJ10sCiAgICAgICAgY29uZGl0aW9uOiB0b3VjaEZpbHRlcgogICAgICB9LAogICAgICB0YXBzdGFydDogewogICAgICAgIG9ic2VydmU6IHsKICAgICAgICAgIG1vdXNlZG93bjogZG9jLAogICAgICAgICAgdG91Y2hzdGFydDogZG9jCiAgICAgICAgfSwKICAgICAgICBjb25kaXRpb246IHRvdWNoRmlsdGVyCiAgICAgIH0sCiAgICAgIHRhcGVuZDogewogICAgICAgIG9ic2VydmU6IHsKICAgICAgICAgIG1vdXNldXA6IGRvYywKICAgICAgICAgIHRvdWNoZW5kOiBkb2MKICAgICAgICB9LAogICAgICAgIGNvbmRpdGlvbjogdG91Y2hGaWx0ZXIKICAgICAgfSwKICAgICAgdGFwbW92ZTogewogICAgICAgIGF0dGFjaDogWyd0YXBzdGFydCcsICdkcmFnZW5kJywgJ3RvdWNoY2FuY2VsJ10sCiAgICAgICAgY29uZGl0aW9uOiBmdW5jdGlvbihldmVudCwgY3VzdG9tKXsKICAgICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkgewogICAgICAgICAgICBjYXNlICdtb3ZlJzogIHJldHVybiB0cnVlOwogICAgICAgICAgICBjYXNlICdkcmFnb3Zlcic6CiAgICAgICAgICAgICAgdmFyIGxhc3QgPSBjdXN0b20ubGFzdERyYWcgfHwge307CiAgICAgICAgICAgICAgY3VzdG9tLmxhc3REcmFnID0gZXZlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIChsYXN0LnBhZ2VYICE9IGV2ZW50LnBhZ2VYICYmIGxhc3QucGFnZVkgIT0gZXZlbnQucGFnZVkpIHx8IG51bGw7CiAgICAgICAgICAgIGNhc2UgJ3RhcHN0YXJ0JzoKICAgICAgICAgICAgICBjdXN0b20udG91Y2hlcyA9IGN1c3RvbS50b3VjaGVzIHx8IDE7CiAgICAgICAgICAgICAgaWYgKCFjdXN0b20ubW92ZSkgewogICAgICAgICAgICAgICAgY3VzdG9tLmN1cnJlbnQgPSB0aGlzOwogICAgICAgICAgICAgICAgY3VzdG9tLm1vdmUgPSB4dGFnLmFkZEV2ZW50cyh0aGlzLCB7CiAgICAgICAgICAgICAgICAgIG1vdmU6IGN1c3RvbS5saXN0ZW5lciwKICAgICAgICAgICAgICAgICAgZHJhZ292ZXI6IGN1c3RvbS5saXN0ZW5lcgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjdXN0b20udGFwZW5kID0geHRhZy5hZGRFdmVudChkb2MsICd0YXBlbmQnLCBjdXN0b20ubGlzdGVuZXIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAndGFwZW5kJzogY2FzZSAnZHJhZ2VuZCc6IGNhc2UgJ3RvdWNoY2FuY2VsJzoKICAgICAgICAgICAgICBjdXN0b20udG91Y2hlcy0tOwogICAgICAgICAgICAgIGlmICghY3VzdG9tLnRvdWNoZXMpIHsKICAgICAgICAgICAgICAgIHh0YWcucmVtb3ZlRXZlbnRzKGN1c3RvbS5jdXJyZW50ICwgY3VzdG9tLm1vdmUgfHwge30pOwogICAgICAgICAgICAgICAgeHRhZy5yZW1vdmVFdmVudChkb2MsIGN1c3RvbS50YXBlbmQgfHwge30pOwogICAgICAgICAgICAgICAgZGVsZXRlIGN1c3RvbS5sYXN0RHJhZzsKICAgICAgICAgICAgICAgIGRlbGV0ZSBjdXN0b20uY3VycmVudDsKICAgICAgICAgICAgICAgIGRlbGV0ZSBjdXN0b20udGFwZW5kOwogICAgICAgICAgICAgICAgZGVsZXRlIGN1c3RvbS5tb3ZlOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBwc2V1ZG9zOiB7CiAgICAgIGtleXBhc3M6IGtleXBzZXVkbywKICAgICAga2V5ZmFpbDoga2V5cHNldWRvLAogICAgICBkZWxlZ2F0ZTogeyBhY3Rpb246IGRlbGVnYXRlQWN0aW9uIH0sCiAgICAgIHdpdGhpbjogewogICAgICAgIGFjdGlvbjogZGVsZWdhdGVBY3Rpb24sCiAgICAgICAgb25BZGQ6IGZ1bmN0aW9uKHBzZXVkbyl7CiAgICAgICAgICB2YXIgY29uZGl0aW9uID0gcHNldWRvLnNvdXJjZS5jb25kaXRpb247CiAgICAgICAgICBpZiAoY29uZGl0aW9uKSBwc2V1ZG8uc291cmNlLmNvbmRpdGlvbiA9IGZ1bmN0aW9uKGV2ZW50LCBjdXN0b20pewogICAgICAgICAgICByZXR1cm4geHRhZy5xdWVyeSh0aGlzLCBwc2V1ZG8udmFsdWUpLmZpbHRlcihmdW5jdGlvbihub2RlKXsKICAgICAgICAgICAgICByZXR1cm4gbm9kZSA9PSBldmVudC50YXJnZXQgfHwgbm9kZS5jb250YWlucyA/IG5vZGUuY29udGFpbnMoZXZlbnQudGFyZ2V0KSA6IG51bGw7CiAgICAgICAgICAgIH0pWzBdID8gY29uZGl0aW9uLmNhbGwodGhpcywgZXZlbnQsIGN1c3RvbSkgOiBudWxsOwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHByZXZlbnRhYmxlOiB7CiAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAocHNldWRvLCBldmVudCkgewogICAgICAgICAgcmV0dXJuICFldmVudC5kZWZhdWx0UHJldmVudGVkOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICAvKiBVVElMSVRJRVMgKi8KCiAgICBjbG9uZTogY2xvbmUsCiAgICB0eXBlT2Y6IHR5cGVPZiwKICAgIHRvQXJyYXk6IHRvQXJyYXksCgogICAgd3JhcDogZnVuY3Rpb24gKG9yaWdpbmFsLCBmbikgewogICAgICByZXR1cm4gZnVuY3Rpb24oKXsKICAgICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKSwKICAgICAgICAgIHJldHVybmVkID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7CiAgICAgICAgcmV0dXJuIHJldHVybmVkID09PSBmYWxzZSA/IGZhbHNlIDogZm4uYXBwbHkodGhpcywgdHlwZW9mIHJldHVybmVkICE9ICd1bmRlZmluZWQnID8gdG9BcnJheShyZXR1cm5lZCkgOiBhcmdzKTsKICAgICAgfTsKICAgIH0sCgogICAgbWVyZ2U6IGZ1bmN0aW9uKHNvdXJjZSwgaywgdil7CiAgICAgIGlmICh0eXBlT2YoaykgPT0gJ3N0cmluZycpIHJldHVybiBtZXJnZU9uZShzb3VyY2UsIGssIHYpOwogICAgICBmb3IgKHZhciBpID0gMSwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspewogICAgICAgIHZhciBvYmplY3QgPSBhcmd1bWVudHNbaV07CiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWVyZ2VPbmUoc291cmNlLCBrZXksIG9iamVjdFtrZXldKTsKICAgICAgfQogICAgICByZXR1cm4gc291cmNlOwogICAgfSwKCiAgICB1aWQ6IGZ1bmN0aW9uKCl7CiAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwxMCk7CiAgICB9LAoKICAgIC8qIERPTSAqLwoKICAgIHF1ZXJ5OiBxdWVyeSwKCiAgICBza2lwVHJhbnNpdGlvbjogZnVuY3Rpb24oZWxlbWVudCwgZm4sIGJpbmQpewogICAgICB2YXIgcHJvcCA9IHByZWZpeC5qcyArICdUcmFuc2l0aW9uUHJvcGVydHknOwogICAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgPSAnbm9uZSc7CiAgICAgIHh0YWcucmVxdWVzdEZyYW1lKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIGNhbGxiYWNrOwogICAgICAgIGlmIChmbikgY2FsbGJhY2sgPSBmbi5jYWxsKGJpbmQpOwogICAgICAgIHh0YWcucmVxdWVzdEZyYW1lKGZ1bmN0aW9uKCl7CiAgICAgICAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgPSAnJzsKICAgICAgICAgIGlmIChjYWxsYmFjaykgeHRhZy5yZXF1ZXN0RnJhbWUoY2FsbGJhY2spOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCgogICAgcmVxdWVzdEZyYW1lOiAoZnVuY3Rpb24oKXsKICAgICAgdmFyIHJhZiA9IHdpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwKICAgICAgICB3aW5bcHJlZml4Lmxvd2VyY2FzZSArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXSB8fAogICAgICAgIGZ1bmN0aW9uKGZuKXsgcmV0dXJuIHdpbi5zZXRUaW1lb3V0KGZuLCAyMCk7IH07CiAgICAgIHJldHVybiBmdW5jdGlvbihmbil7CiAgICAgICAgcmV0dXJuIHJhZi5jYWxsKHdpbiwgZm4pOwogICAgICB9OwogICAgfSkoKSwKCiAgICBtYXRjaFNlbGVjdG9yOiBmdW5jdGlvbiAoZWxlbWVudCwgc2VsZWN0b3IpIHsKICAgICAgcmV0dXJuIG1hdGNoU2VsZWN0b3IuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7CiAgICB9LAoKICAgIHNldDogZnVuY3Rpb24gKGVsZW1lbnQsIG1ldGhvZCwgdmFsdWUpIHsKICAgICAgZWxlbWVudFttZXRob2RdID0gdmFsdWU7CiAgICAgIGlmICh3aW5kb3cuQ3VzdG9tRWxlbWVudHMpIEN1c3RvbUVsZW1lbnRzLnVwZ3JhZGVBbGwoZWxlbWVudCk7CiAgICB9LAoKICAgIGlubmVySFRNTDogZnVuY3Rpb24oZWwsIGh0bWwpewogICAgICB4dGFnLnNldChlbCwgJ2lubmVySFRNTCcsIGh0bWwpOwogICAgfSwKCiAgICBoYXNDbGFzczogZnVuY3Rpb24gKGVsZW1lbnQsIGtsYXNzKSB7CiAgICAgIHJldHVybiBlbGVtZW50LmNsYXNzTmFtZS5zcGxpdCgnICcpLmluZGV4T2Yoa2xhc3MudHJpbSgpKT4tMTsKICAgIH0sCgogICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBrbGFzcykgewogICAgICB2YXIgbGlzdCA9IGVsZW1lbnQuY2xhc3NOYW1lLnRyaW0oKS5zcGxpdCgnICcpOwogICAgICBrbGFzcy50cmltKCkuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgaWYgKCF+bGlzdC5pbmRleE9mKG5hbWUpKSBsaXN0LnB1c2gobmFtZSk7CiAgICAgIH0pOwogICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGxpc3Quam9pbignICcpLnRyaW0oKTsKICAgICAgcmV0dXJuIGVsZW1lbnQ7CiAgICB9LAoKICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwga2xhc3MpIHsKICAgICAgdmFyIGNsYXNzZXMgPSBrbGFzcy50cmltKCkuc3BsaXQoJyAnKTsKICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS50cmltKCkuc3BsaXQoJyAnKS5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICByZXR1cm4gbmFtZSAmJiAhfmNsYXNzZXMuaW5kZXhPZihuYW1lKTsKICAgICAgfSkuam9pbignICcpOwogICAgICByZXR1cm4gZWxlbWVudDsKICAgIH0sCgogICAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBrbGFzcykgewogICAgICByZXR1cm4geHRhZ1t4dGFnLmhhc0NsYXNzKGVsZW1lbnQsIGtsYXNzKSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXS5jYWxsKG51bGwsIGVsZW1lbnQsIGtsYXNzKTsKICAgIH0sCgogICAgcXVlcnlDaGlsZHJlbjogZnVuY3Rpb24gKGVsZW1lbnQsIHNlbGVjdG9yKSB7CiAgICAgIHZhciBpZCA9IGVsZW1lbnQuaWQsCiAgICAgICAgZ3VpZCA9IGVsZW1lbnQuaWQgPSBpZCB8fCAneF8nICsgeHRhZy51aWQoKSwKICAgICAgICBhdHRyID0gJyMnICsgZ3VpZCArICcgPiAnOwogICAgICBzZWxlY3RvciA9IGF0dHIgKyAoc2VsZWN0b3IgKyAnJykucmVwbGFjZSgnLCcsICcsJyArIGF0dHIsICdnJyk7CiAgICAgIHZhciByZXN1bHQgPSBlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7CiAgICAgIGlmICghaWQpIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdpZCcpOwogICAgICByZXR1cm4gdG9BcnJheShyZXN1bHQpOwogICAgfSwKCiAgICBjcmVhdGVGcmFnbWVudDogZnVuY3Rpb24oY29udGVudCkgewogICAgICB2YXIgZnJhZyA9IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICAgIGlmIChjb250ZW50KSB7CiAgICAgICAgdmFyIGRpdiA9IGZyYWcuYXBwZW5kQ2hpbGQoZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSwKICAgICAgICAgIG5vZGVzID0gdG9BcnJheShjb250ZW50Lm5vZGVOYW1lID8gYXJndW1lbnRzIDogIShkaXYuaW5uZXJIVE1MID0gY29udGVudCkgfHwgZGl2LmNoaWxkcmVuKSwKICAgICAgICAgIGxlbmd0aCA9IG5vZGVzLmxlbmd0aCwKICAgICAgICAgIGluZGV4ID0gMDsKICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGZyYWcuaW5zZXJ0QmVmb3JlKG5vZGVzW2luZGV4KytdLCBkaXYpOwogICAgICAgIGZyYWcucmVtb3ZlQ2hpbGQoZGl2KTsKICAgICAgfQogICAgICByZXR1cm4gZnJhZzsKICAgIH0sCgogICAgbWFuaXB1bGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgZm4pewogICAgICB2YXIgbmV4dCA9IGVsZW1lbnQubmV4dFNpYmxpbmcsCiAgICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlLAogICAgICAgIGZyYWcgPSBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLAogICAgICAgIHJldHVybmVkID0gZm4uY2FsbChmcmFnLmFwcGVuZENoaWxkKGVsZW1lbnQpLCBmcmFnKSB8fCBlbGVtZW50OwogICAgICBpZiAobmV4dCkgcGFyZW50Lmluc2VydEJlZm9yZShyZXR1cm5lZCwgbmV4dCk7CiAgICAgIGVsc2UgcGFyZW50LmFwcGVuZENoaWxkKHJldHVybmVkKTsKICAgIH0sCgogICAgLyogUFNFVURPUyAqLwoKICAgIGFwcGx5UHNldWRvczogZnVuY3Rpb24oa2V5LCBmbiwgZWxlbWVudCwgc291cmNlKSB7CiAgICAgIHZhciBsaXN0ZW5lciA9IGZuLAogICAgICAgICAgcHNldWRvcyA9IHt9OwogICAgICBpZiAoa2V5Lm1hdGNoKCc6JykpIHsKICAgICAgICB2YXIgc3BsaXQgPSBrZXkubWF0Y2gocmVnZXhQc2V1ZG9TcGxpdCksCiAgICAgICAgICAgIGkgPSBzcGxpdC5sZW5ndGg7CiAgICAgICAgd2hpbGUgKC0taSkgewogICAgICAgICAgc3BsaXRbaV0ucmVwbGFjZShyZWdleFBzZXVkb1JlcGxhY2UsIGZ1bmN0aW9uIChtYXRjaCwgbmFtZSwgdmFsdWUpIHsKICAgICAgICAgICAgaWYgKCF4dGFnLnBzZXVkb3NbbmFtZV0pIHRocm93ICJwc2V1ZG8gbm90IGZvdW5kOiAiICsgbmFtZSArICIgIiArIHNwbGl0OwogICAgICAgICAgICB2YXIgcHNldWRvID0gcHNldWRvc1tpXSA9IE9iamVjdC5jcmVhdGUoeHRhZy5wc2V1ZG9zW25hbWVdKTsKICAgICAgICAgICAgICAgIHBzZXVkby5rZXkgPSBrZXk7CiAgICAgICAgICAgICAgICBwc2V1ZG8ubmFtZSA9IG5hbWU7CiAgICAgICAgICAgICAgICBwc2V1ZG8udmFsdWUgPSB2YWx1ZTsKICAgICAgICAgICAgICAgIHBzZXVkb1snYXJndW1lbnRzJ10gPSAodmFsdWUgfHwgJycpLnNwbGl0KCcsJyk7CiAgICAgICAgICAgICAgICBwc2V1ZG8uYWN0aW9uID0gcHNldWRvLmFjdGlvbiB8fCB0cnVlb3A7CiAgICAgICAgICAgICAgICBwc2V1ZG8uc291cmNlID0gc291cmNlOwogICAgICAgICAgICB2YXIgbGFzdCA9IGxpc3RlbmVyOwogICAgICAgICAgICBsaXN0ZW5lciA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyksCiAgICAgICAgICAgICAgICAgIG9iaiA9IHsKICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSwKICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSwKICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcjogbGFzdAogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBwc2V1ZG8uYWN0aW9uLmFwcGx5KHRoaXMsIFtvYmpdLmNvbmNhdChhcmdzKSk7CiAgICAgICAgICAgICAgaWYgKG91dHB1dCA9PT0gbnVsbCB8fCBvdXRwdXQgPT09IGZhbHNlKSByZXR1cm4gb3V0cHV0OwogICAgICAgICAgICAgIHJldHVybiBvYmoubGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIHBzZXVkby5vbkFkZCkgewogICAgICAgICAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSkgcHNldWRvLm9uQWRkLmNhbGwoZWxlbWVudCwgcHNldWRvKTsKICAgICAgICAgICAgICBlbHNlIGVsZW1lbnQucHVzaChwc2V1ZG8pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgICAgZm9yICh2YXIgeiBpbiBwc2V1ZG9zKSB7CiAgICAgICAgaWYgKHBzZXVkb3Nbel0ub25Db21waWxlZCkgbGlzdGVuZXIgPSBwc2V1ZG9zW3pdLm9uQ29tcGlsZWQobGlzdGVuZXIsIHBzZXVkb3Nbel0pIHx8IGxpc3RlbmVyOwogICAgICB9CiAgICAgIHJldHVybiBsaXN0ZW5lcjsKICAgIH0sCgogICAgcmVtb3ZlUHNldWRvczogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQpewogICAgICBldmVudC5fcHNldWRvcy5mb3JFYWNoKGZ1bmN0aW9uKG9iail7CiAgICAgICAgaWYgKG9iai5vblJlbW92ZSkgb2JqLm9uUmVtb3ZlLmNhbGwoZWxlbWVudCwgb2JqKTsKICAgICAgfSk7CiAgICB9LAoKICAvKioqIEV2ZW50cyAqKiovCgogICAgcGFyc2VFdmVudDogZnVuY3Rpb24odHlwZSwgZm4pIHsKICAgICAgdmFyIHBzZXVkb3MgPSB0eXBlLnNwbGl0KCc6JyksCiAgICAgICAgICBrZXkgPSBwc2V1ZG9zLnNoaWZ0KCksCiAgICAgICAgICBjdXN0b20gPSB4dGFnLmN1c3RvbUV2ZW50c1trZXldLAogICAgICAgICAgZXZlbnQgPSB4dGFnLm1lcmdlKHsKICAgICAgICAgICAgdHlwZToga2V5LAogICAgICAgICAgICBzdGFjazogbm9vcCwKICAgICAgICAgICAgY29uZGl0aW9uOiB0cnVlb3AsCiAgICAgICAgICAgIGF0dGFjaDogW10sCiAgICAgICAgICAgIF9hdHRhY2g6IFtdLAogICAgICAgICAgICBwc2V1ZG9zOiAnJywKICAgICAgICAgICAgX3BzZXVkb3M6IFtdLAogICAgICAgICAgICBvbkFkZDogbm9vcCwKICAgICAgICAgICAgb25SZW1vdmU6IG5vb3AKICAgICAgICAgIH0sIGN1c3RvbSB8fCB7fSk7CiAgICAgIGV2ZW50LmF0dGFjaCA9IHRvQXJyYXkoZXZlbnQuYmFzZSB8fCBldmVudC5hdHRhY2gpOwogICAgICBldmVudC5jaGFpbiA9IGtleSArIChldmVudC5wc2V1ZG9zLmxlbmd0aCA/ICc6JyArIGV2ZW50LnBzZXVkb3MgOiAnJykgKyAocHNldWRvcy5sZW5ndGggPyAnOicgKyBwc2V1ZG9zLmpvaW4oJzonKSA6ICcnKTsKICAgICAgdmFyIGNvbmRpdGlvbiA9IGV2ZW50LmNvbmRpdGlvbjsKICAgICAgZXZlbnQuY29uZGl0aW9uID0gZnVuY3Rpb24oZSl7CiAgICAgICAgdmFyIHQgPSBlLnRvdWNoZXMsIHR0ID0gZS50YXJnZXRUb3VjaGVzOwogICAgICAgIHJldHVybiBjb25kaXRpb24uYXBwbHkodGhpcywgdG9BcnJheShhcmd1bWVudHMpKTsKICAgICAgfTsKICAgICAgdmFyIHN0YWNrID0geHRhZy5hcHBseVBzZXVkb3MoZXZlbnQuY2hhaW4sIGZuLCBldmVudC5fcHNldWRvcywgZXZlbnQpOwogICAgICBldmVudC5zdGFjayA9IGZ1bmN0aW9uKGUpewogICAgICAgIHZhciB0ID0gZS50b3VjaGVzLCB0dCA9IGUudGFyZ2V0VG91Y2hlczsKICAgICAgICB2YXIgZGV0YWlsID0gZS5kZXRhaWwgfHwge307CiAgICAgICAgaWYgKCFkZXRhaWwuX19zdGFja19fKSByZXR1cm4gc3RhY2suYXBwbHkodGhpcywgdG9BcnJheShhcmd1bWVudHMpKTsKICAgICAgICBlbHNlIGlmIChkZXRhaWwuX19zdGFja19fID09IHN0YWNrKSB7CiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgZS5jYW5jZWxCdWJibGUgPSB0cnVlOwogICAgICAgICAgcmV0dXJuIHN0YWNrLmFwcGx5KHRoaXMsIHRvQXJyYXkoYXJndW1lbnRzKSk7CiAgICAgICAgfQogICAgICB9OwogICAgICBldmVudC5saXN0ZW5lciA9IGZ1bmN0aW9uKGUpewogICAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpLAogICAgICAgICAgICBvdXRwdXQgPSBldmVudC5jb25kaXRpb24uYXBwbHkodGhpcywgYXJncy5jb25jYXQoW2V2ZW50XSkpOwogICAgICAgIGlmICghb3V0cHV0KSByZXR1cm4gb3V0cHV0OwogICAgICAgIGlmIChlLnR5cGUgIT0ga2V5KSB4dGFnLmZpcmVFdmVudChlLnRhcmdldCwga2V5LCB7IGJhc2VFdmVudDogZSwgZGV0YWlsOiB7IF9fc3RhY2tfXzogc3RhY2sgfSB9KTsKICAgICAgICBlbHNlIHJldHVybiBldmVudC5zdGFjay5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgfTsKICAgICAgZXZlbnQuYXR0YWNoLmZvckVhY2goZnVuY3Rpb24obmFtZSkgewogICAgICAgIGV2ZW50Ll9hdHRhY2gucHVzaCh4dGFnLnBhcnNlRXZlbnQobmFtZSwgZXZlbnQubGlzdGVuZXIpKTsKICAgICAgfSk7CiAgICAgIGlmIChjdXN0b20gJiYgY3VzdG9tLm9ic2VydmUgJiYgIWN1c3RvbS5fX29ic2VydmluZ19fKSB7CiAgICAgICAgY3VzdG9tLm9ic2VydmVyID0gZnVuY3Rpb24oZSl7CiAgICAgICAgICB2YXIgb3V0cHV0ID0gZXZlbnQuY29uZGl0aW9uLmFwcGx5KHRoaXMsIHRvQXJyYXkoYXJndW1lbnRzKS5jb25jYXQoW2N1c3RvbV0pKTsKICAgICAgICAgIGlmICghb3V0cHV0KSByZXR1cm4gb3V0cHV0OwogICAgICAgICAgeHRhZy5maXJlRXZlbnQoZS50YXJnZXQsIGtleSwgeyBiYXNlRXZlbnQ6IGUgfSk7CiAgICAgICAgfTsKICAgICAgICBmb3IgKHZhciB6IGluIGN1c3RvbS5vYnNlcnZlKSB4dGFnLmFkZEV2ZW50KGN1c3RvbS5vYnNlcnZlW3pdIHx8IGRvY3VtZW50LCB6LCBjdXN0b20ub2JzZXJ2ZXIsIHRydWUpOwogICAgICAgIGN1c3RvbS5fX29ic2VydmluZ19fID0gdHJ1ZTsKICAgICAgfQogICAgICByZXR1cm4gZXZlbnQ7CiAgICB9LAoKICAgIGFkZEV2ZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgdHlwZSwgZm4sIGNhcHR1cmUpIHsKICAgICAgdmFyIGV2ZW50ID0gKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nKSA/IHh0YWcucGFyc2VFdmVudCh0eXBlLCBmbikgOiBmbjsKICAgICAgZXZlbnQuX3BzZXVkb3MuZm9yRWFjaChmdW5jdGlvbihvYmopewogICAgICAgIG9iai5vbkFkZC5jYWxsKGVsZW1lbnQsIG9iaik7CiAgICAgIH0pOwogICAgICBldmVudC5fYXR0YWNoLmZvckVhY2goZnVuY3Rpb24ob2JqKSB7CiAgICAgICAgeHRhZy5hZGRFdmVudChlbGVtZW50LCBvYmoudHlwZSwgb2JqKTsKICAgICAgfSk7CiAgICAgIGV2ZW50Lm9uQWRkLmNhbGwoZWxlbWVudCwgZXZlbnQsIGV2ZW50Lmxpc3RlbmVyKTsKICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LnR5cGUsIGV2ZW50LnN0YWNrLCBjYXB0dXJlIHx8IHh0YWcuY2FwdHVyZUV2ZW50cy5pbmRleE9mKGV2ZW50LnR5cGUpID4gLTEpOwogICAgICByZXR1cm4gZXZlbnQ7CiAgICB9LAoKICAgIGFkZEV2ZW50czogZnVuY3Rpb24gKGVsZW1lbnQsIG9iaikgewogICAgICB2YXIgZXZlbnRzID0ge307CiAgICAgIGZvciAodmFyIHogaW4gb2JqKSB7CiAgICAgICAgZXZlbnRzW3pdID0geHRhZy5hZGRFdmVudChlbGVtZW50LCB6LCBvYmpbel0pOwogICAgICB9CiAgICAgIHJldHVybiBldmVudHM7CiAgICB9LAoKICAgIHJlbW92ZUV2ZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgdHlwZSwgZXZlbnQpIHsKICAgICAgZXZlbnQgPSBldmVudCB8fCB0eXBlOwogICAgICBldmVudC5vblJlbW92ZS5jYWxsKGVsZW1lbnQsIGV2ZW50LCBldmVudC5saXN0ZW5lcik7CiAgICAgIHh0YWcucmVtb3ZlUHNldWRvcyhlbGVtZW50LCBldmVudCk7CiAgICAgIGV2ZW50Ll9hdHRhY2guZm9yRWFjaChmdW5jdGlvbihvYmopIHsKICAgICAgICB4dGFnLnJlbW92ZUV2ZW50KGVsZW1lbnQsIG9iaik7CiAgICAgIH0pOwogICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQudHlwZSwgZXZlbnQuc3RhY2spOwogICAgfSwKCiAgICByZW1vdmVFdmVudHM6IGZ1bmN0aW9uKGVsZW1lbnQsIG9iail7CiAgICAgIGZvciAodmFyIHogaW4gb2JqKSB4dGFnLnJlbW92ZUV2ZW50KGVsZW1lbnQsIG9ialt6XSk7CiAgICB9LAoKICAgIGZpcmVFdmVudDogZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgb3B0aW9ucywgd2Fybil7CiAgICAgIHZhciBldmVudCA9IGRvYy5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgIGlmICh3YXJuKSBjb25zb2xlLndhcm4oJ2ZpcmVFdmVudCBoYXMgYmVlbiBtb2RpZmllZCwgbW9yZSBpbmZvIGhlcmU6ICcpOwogICAgICBldmVudC5pbml0Q3VzdG9tRXZlbnQodHlwZSwKICAgICAgICBvcHRpb25zLmJ1YmJsZXMgIT09IGZhbHNlLAogICAgICAgIG9wdGlvbnMuY2FuY2VsYWJsZSAhPT0gZmFsc2UsCiAgICAgICAgb3B0aW9ucy5kZXRhaWwKICAgICAgKTsKICAgICAgaWYgKG9wdGlvbnMuYmFzZUV2ZW50KSBpbmhlcml0RXZlbnQoZXZlbnQsIG9wdGlvbnMuYmFzZUV2ZW50KTsKICAgICAgdHJ5IHsgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTsgfQogICAgICBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUud2FybignVGhpcyBlcnJvciBtYXkgaGF2ZSBiZWVuIGNhdXNlZCBieSBhIGNoYW5nZSBpbiB0aGUgZmlyZUV2ZW50IG1ldGhvZCwgbW9yZSBpbmZvIGhlcmU6ICcsIGUpOwogICAgICB9CiAgICB9LAoKICAgIGFkZE9ic2VydmVyOiBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbil7CiAgICAgIGlmICghZWxlbWVudC5fcmVjb3JkcykgewogICAgICAgIGVsZW1lbnQuX3JlY29yZHMgPSB7IGluc2VydGVkOiBbXSwgcmVtb3ZlZDogW10gfTsKICAgICAgICBpZiAobXV0YXRpb24pewogICAgICAgICAgZWxlbWVudC5fb2JzZXJ2ZXIgPSBuZXcgbXV0YXRpb24oZnVuY3Rpb24obXV0YXRpb25zKSB7CiAgICAgICAgICAgIHBhcnNlTXV0YXRpb25zKGVsZW1lbnQsIG11dGF0aW9ucyk7CiAgICAgICAgICB9KTsKICAgICAgICAgIGVsZW1lbnQuX29ic2VydmVyLm9ic2VydmUoZWxlbWVudCwgewogICAgICAgICAgICBzdWJ0cmVlOiB0cnVlLAogICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgICAgICAgIGF0dHJpYnV0ZXM6ICF0cnVlLAogICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiBmYWxzZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgWydJbnNlcnRlZCcsICdSZW1vdmVkJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlKXsKICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NTm9kZScgKyB0eXBlLCBmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgIGV2ZW50Ll9tdXRhdGlvbiA9IHRydWU7CiAgICAgICAgICAgIGVsZW1lbnQuX3JlY29yZHNbdHlwZS50b0xvd2VyQ2FzZSgpXS5mb3JFYWNoKGZ1bmN0aW9uKGZuKXsKICAgICAgICAgICAgICBmbihldmVudC50YXJnZXQsIGV2ZW50KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LCBmYWxzZSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgaWYgKGVsZW1lbnQuX3JlY29yZHNbdHlwZV0uaW5kZXhPZihmbikgPT0gLTEpIGVsZW1lbnQuX3JlY29yZHNbdHlwZV0ucHVzaChmbik7CiAgICB9LAoKICAgIHJlbW92ZU9ic2VydmVyOiBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbil7CiAgICAgIHZhciBvYmogPSBlbGVtZW50Ll9yZWNvcmRzOwogICAgICBpZiAob2JqICYmIGZuKXsKICAgICAgICBvYmpbdHlwZV0uc3BsaWNlKG9ialt0eXBlXS5pbmRleE9mKGZuKSwgMSk7CiAgICAgIH0KICAgICAgZWxzZXsKICAgICAgICBvYmpbdHlwZV0gPSBbXTsKICAgICAgfQogICAgfQoKICB9OwoKLyoqKiBVbml2ZXJzYWwgVG91Y2ggKioqLwoKdmFyIHRvdWNoQ291bnQgPSAwLCB0b3VjaFRhcmdldCA9IG51bGw7Cgpkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24oZSl7CiAgdG91Y2hDb3VudCsrOwogIHRvdWNoVGFyZ2V0ID0gZS50YXJnZXQ7Cn0sIHRydWUpOwoKZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbigpewogIHRvdWNoQ291bnQtLTsKICB0b3VjaFRhcmdldCA9IG51bGw7Cn0sIGZhbHNlKTsKCnZhciBVSUV2ZW50UHJvdG8gPSB7CiAgdG91Y2hlczogewogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgZ2V0OiBmdW5jdGlvbigpewogICAgICByZXR1cm4gdGhpcy5fX3RvdWNoZXNfXyB8fAogICAgICAgICh0aGlzLmlkZW50aWZpZXIgPSAwKSB8fAogICAgICAgICh0aGlzLl9fdG91Y2hlc19fID0gdG91Y2hDb3VudCA/IFt0aGlzXSA6IFtdKTsKICAgIH0KICB9LAogIHRhcmdldFRvdWNoZXM6IHsKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgcmV0dXJuIHRoaXMuX190YXJnZXRUb3VjaGVzX18gfHwgKHRoaXMuX190YXJnZXRUb3VjaGVzX18gPQogICAgICAgICh0b3VjaENvdW50ICYmIHRoaXMuY3VycmVudFRhcmdldCAmJgogICAgICAgICh0aGlzLmN1cnJlbnRUYXJnZXQgPT0gdG91Y2hUYXJnZXQgfHwKICAgICAgICAodGhpcy5jdXJyZW50VGFyZ2V0LmNvbnRhaW5zICYmIHRoaXMuY3VycmVudFRhcmdldC5jb250YWlucyh0b3VjaFRhcmdldCkpKSkgPyBbdGhpc10gOiBbXSk7CiAgICB9CiAgfSwKICBjaGFuZ2VkVG91Y2hlczogewogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgZ2V0OiBmdW5jdGlvbigpewogICAgICByZXR1cm4gdGhpcy50b3VjaGVzOwogICAgfQogIH0KfTsKCmZvciAoeiBpbiBVSUV2ZW50UHJvdG8pewogIFVJRXZlbnQucHJvdG90eXBlW3pdID0gVUlFdmVudFByb3RvW3pdOwogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShVSUV2ZW50LnByb3RvdHlwZSwgeiwgVUlFdmVudFByb3RvW3pdKTsKfQoKdmFyIHRvdWNoUmVzZXQgPSB7CiAgICB2YWx1ZTogbnVsbCwKICAgIHdyaXRhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSwKICBUb3VjaEV2ZW50UHJvdG8gPSB7CiAgICB0b3VjaGVzOiB0b3VjaFJlc2V0LAogICAgdGFyZ2V0VG91Y2hlczogdG91Y2hSZXNldCwKICAgIGNoYW5nZWRUb3VjaGVzOiB0b3VjaFJlc2V0CiAgfTsKCmlmICh3aW4uVG91Y2hFdmVudCkgewogIGZvciAoeiBpbiBUb3VjaEV2ZW50UHJvdG8pIHsKICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW4uVG91Y2hFdmVudC5wcm90b3R5cGUsIHopOwogICAgaWYgKGRlc2MpIHdpbi5Ub3VjaEV2ZW50LnByb3RvdHlwZVt6XSA9IFRvdWNoRXZlbnRQcm90b1t6XTsKICAgIGVsc2UgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbi5Ub3VjaEV2ZW50LnByb3RvdHlwZSwgeiwgVG91Y2hFdmVudFByb3RvW3pdKTsKICB9Cn0KCi8qKiogQ3VzdG9tIEV2ZW50IERlZmluaXRpb25zICoqKi8KCiAgZnVuY3Rpb24gYWRkVGFwKGVsLCB0YXAsIGUpewogICAgaWYgKCFlbC5fX3RhcF9fKSB7CiAgICAgIGVsLl9fdGFwX18gPSB7IGNsaWNrOiBlLnR5cGUgPT0gJ21vdXNlZG93bicgfTsKICAgICAgaWYgKGVsLl9fdGFwX18uY2xpY2spIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGFwLm9ic2VydmVyKTsKICAgICAgZWxzZSB7CiAgICAgICAgZWwuX190YXBfXy5zY3JvbGwgPSB0YXAub2JzZXJ2ZXIuYmluZChlbCk7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGVsLl9fdGFwX18uc2Nyb2xsLCB0cnVlKTsKICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0YXAub2JzZXJ2ZXIpOwogICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdGFwLm9ic2VydmVyKTsKICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRhcC5vYnNlcnZlcik7CiAgICAgIH0KICAgIH0KICAgIGlmICghZWwuX190YXBfXy5jbGljaykgewogICAgICBlbC5fX3RhcF9fLnggPSBlLnRvdWNoZXNbMF0ucGFnZVg7CiAgICAgIGVsLl9fdGFwX18ueSA9IGUudG91Y2hlc1swXS5wYWdlWTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlbW92ZVRhcChlbCwgdGFwKXsKICAgIGlmIChlbC5fX3RhcF9fKSB7CiAgICAgIGlmIChlbC5fX3RhcF9fLmNsaWNrKSBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRhcC5vYnNlcnZlcik7CiAgICAgIGVsc2UgewogICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlbC5fX3RhcF9fLnNjcm9sbCwgdHJ1ZSk7CiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGFwLm9ic2VydmVyKTsKICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRhcC5vYnNlcnZlcik7CiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0YXAub2JzZXJ2ZXIpOwogICAgICB9CiAgICAgIGRlbGV0ZSBlbC5fX3RhcF9fOwogICAgfQogIH0KCiAgZnVuY3Rpb24gY2hlY2tUYXBQb3NpdGlvbihlbCwgdGFwLCBlKXsKICAgIHZhciB0b3VjaCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07CiAgICBpZiAoCiAgICAgIHRvdWNoLnBhZ2VYIDwgZWwuX190YXBfXy54ICsgdGFwLmdlc3R1cmUudG9sZXJhbmNlICYmCiAgICAgIHRvdWNoLnBhZ2VYID4gZWwuX190YXBfXy54IC0gdGFwLmdlc3R1cmUudG9sZXJhbmNlICYmCiAgICAgIHRvdWNoLnBhZ2VZIDwgZWwuX190YXBfXy55ICsgdGFwLmdlc3R1cmUudG9sZXJhbmNlICYmCiAgICAgIHRvdWNoLnBhZ2VZID4gZWwuX190YXBfXy55IC0gdGFwLmdlc3R1cmUudG9sZXJhbmNlCiAgICApIHJldHVybiB0cnVlOwogIH0KCiAgeHRhZy5jdXN0b21FdmVudHMudGFwID0gewogICAgb2JzZXJ2ZTogewogICAgICBtb3VzZWRvd246IGRvY3VtZW50LAogICAgICB0b3VjaHN0YXJ0OiBkb2N1bWVudAogICAgfSwKICAgIGdlc3R1cmU6IHsKICAgICAgdG9sZXJhbmNlOiA4CiAgICB9LAogICAgY29uZGl0aW9uOiBmdW5jdGlvbihlLCB0YXApewogICAgICB2YXIgZWwgPSBlLnRhcmdldDsKICAgICAgc3dpdGNoIChlLnR5cGUpIHsKICAgICAgICBjYXNlICd0b3VjaHN0YXJ0JzoKICAgICAgICAgIGlmIChlbC5fX3RhcF9fICYmIGVsLl9fdGFwX18uY2xpY2spIHJlbW92ZVRhcChlbCwgdGFwKTsKICAgICAgICAgIGFkZFRhcChlbCwgdGFwLCBlKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICBjYXNlICdtb3VzZWRvd24nOgogICAgICAgICAgaWYgKCFlbC5fX3RhcF9fKSBhZGRUYXAoZWwsIHRhcCwgZSk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgY2FzZSAnc2Nyb2xsJzoKICAgICAgICBjYXNlICd0b3VjaGNhbmNlbCc6CiAgICAgICAgICByZW1vdmVUYXAodGhpcywgdGFwKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICBjYXNlICd0b3VjaG1vdmUnOgogICAgICAgIGNhc2UgJ3RvdWNoZW5kJzoKICAgICAgICAgIGlmICh0aGlzLl9fdGFwX18gJiYgIWNoZWNrVGFwUG9zaXRpb24odGhpcywgdGFwLCBlKSkgewogICAgICAgICAgICByZW1vdmVUYXAodGhpcywgdGFwKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGUudHlwZSA9PSAndG91Y2hlbmQnIHx8IG51bGw7CiAgICAgICAgY2FzZSAnY2xpY2snOgogICAgICAgICAgcmVtb3ZlVGFwKHRoaXMsIHRhcCk7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH07CgogIHdpbi54dGFnID0geHRhZzsKICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZSh4dGFnKTsKCiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ1dlYkNvbXBvbmVudHNSZWFkeScsIGZ1bmN0aW9uKCl7CiAgICB4dGFnLmZpcmVFdmVudChkb2MuYm9keSwgJ0RPTUNvbXBvbmVudHNMb2FkZWQnKTsKICB9KTsKCn0pKCk7CgooZnVuY3Rpb24oKXsKICAvKiogc2V0U2NvcGU6IERPTSBlbGVtZW50IAoKICBHaXZlbiBhbiB4LXRvZ2dsZSBlbGVtZW50OgogIC0gYXV0b3VwZGF0ZXMgdGhlIHh0YWcuc2NvcGUgcHJvcGVydHkgb2YgdGhlIHRvZ2dsZSB3aXRoIHRoZSBjdXJyZW50IGZvcm0gCiAgICBpdCBpcyBpbiwgaWYgYW55OyAKICAtIE90aGVyd2lzZSBzZXQgc2NvcGUgYXMgdGhlIGN1cnJlbnQgZG9jdW1lbnQgYW5kIGFkZCBhICd4LXRvZ2dsZS1uby1mb3JtJwogICAgYXR0cmlidXRlLCBpZiBhIGRvY3VtZW50IGV4aXN0cwogIC0gT3RoZXJ3aXNlIHNldCBhcyBudWxsCiAgKiovCiAgZnVuY3Rpb24gc2V0U2NvcGUodG9nZ2xlKXsKICAgIHZhciBmb3JtID0gdG9nZ2xlLnh0YWcuaW5wdXRFbC5mb3JtOwogICAgaWYoZm9ybSkgdG9nZ2xlLnJlbW92ZUF0dHJpYnV0ZSgneC10b2dnbGUtbm8tZm9ybScpOwogICAgZWxzZSB0b2dnbGUuc2V0QXR0cmlidXRlKCd4LXRvZ2dsZS1uby1mb3JtJywgJycpOwoKICAgIHRvZ2dsZS54dGFnLnNjb3BlID0gKHRvZ2dsZS5wYXJlbnROb2RlKSA/IChmb3JtIHx8IGRvY3VtZW50KSA6IG51bGw7CiAgfQogIAogIC8qKiB1cGRhdGVTY29wZTogRE9NIGVsZW1lbnQKCiAgZ2l2ZW4gYSBzY29wZSAoaWU6IGEgZm9ybSBvciB0aGUgZG9jdW1lbnQpLCBzZWFyY2hlcyBmb3IgYWxsIHRvZ2dsZXMgYmVsb25naW5nCiAgdG8gdGhlIHNjb3BlIGFuZCB1cGRhdGVzIHRoZWlyIGNoZWNrYm94L3JhZGlvIHR5cGUKICAqKi8KICBmdW5jdGlvbiB1cGRhdGVTY29wZShzY29wZSl7CiAgICB2YXIgbmFtZXMgPSB7fSwKICAgICAgICAvLyBzcGVjaWZ5IGEgc3BlY2lhbCBuby1mb3JtIHNlbGVjdG9yIGlmIHNjb3BlIGlzIGRvY3VtZW50IHRvIHByZXZlbnQKICAgICAgICAvLyBsb29raW5nIGludG8gdG9nZ2xlcyBiZWxvbmdpbmcgdG8gYSBjaGlsZCBmb3JtCiAgICAgICAgZG9jU2VsZWN0b3IgPSAoc2NvcGUgPT0gZG9jdW1lbnQpID8gJ1t4LXRvZ2dsZS1uby1mb3JtXScgOiAnJzsKICAgIC8vIHNlYXJjaCB0aGUgc2NvcGUgZm9yIHRoZSBuYW1lZCB0b2dnbGVzIGJlbG9uZ2luZyB0byBpdAogICAgeHRhZy5xdWVyeShzY29wZSwgJ3gtdG9nZ2xlW25hbWVdJytkb2NTZWxlY3RvcikuZm9yRWFjaChmdW5jdGlvbih0b2dnbGUpewogICAgICB2YXIgbmFtZSA9IHRvZ2dsZS5uYW1lOwogICAgICBpZiAobmFtZSAmJiAhbmFtZXNbbmFtZV0pIHsKICAgICAgICAvLyB1cGRhdGUgdGhlIGNoZWNrYm94L3JhZGlvIHR5cGUgb2YgYWxsIHRvZ2dsZXMgd2l0aCB0aGUgc2FtZSBuYW1lIAogICAgICAgIHZhciBuYW1lZCA9IHh0YWcucXVlcnkoc2NvcGUsICd4LXRvZ2dsZVtuYW1lPSInK25hbWUgKyciXScrZG9jU2VsZWN0b3IpLAogICAgICAgICAgICB0eXBlID0gbmFtZWQubGVuZ3RoID4gMSA/ICdyYWRpbycgOiAnY2hlY2tib3gnOwogICAgICAgIG5hbWVkLmZvckVhY2goZnVuY3Rpb24odG9nZ2xlKXsKICAgICAgICAgIGlmICh0b2dnbGUueHRhZyAmJiB0b2dnbGUueHRhZy5pbnB1dEVsKXsKICAgICAgICAgICAgdG9nZ2xlLnR5cGUgPSB0eXBlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIC8vIGNhY2hlIHRoZSBuYW1lIHRvIHByZXZlbnQgcmVwZWF0aW5nIHVwZGF0ZSBmb3Igc2FtZSBuYW1lZCB0b2dnbGVzCiAgICAgICAgbmFtZXNbbmFtZV0gPSB0cnVlOwogICAgICB9IAogICAgfSk7CiAgfQogIAogIHZhciBzaGlmdGVkID0gZmFsc2U7CiAgeHRhZy5hZGRFdmVudHMoZG9jdW1lbnQsIHsKICAgICdET01Db21wb25lbnRzTG9hZGVkJzogZnVuY3Rpb24oKXsKICAgICAgdXBkYXRlU2NvcGUoZG9jdW1lbnQpOwogICAgICB4dGFnLnRvQXJyYXkoZG9jdW1lbnQuZm9ybXMpLmZvckVhY2godXBkYXRlU2NvcGUpOwogICAgfSwKICAgICdXZWJDb21wb25lbnRzUmVhZHknOiBmdW5jdGlvbigpewogICAgICB1cGRhdGVTY29wZShkb2N1bWVudCk7CiAgICAgIHh0YWcudG9BcnJheShkb2N1bWVudC5mb3JtcykuZm9yRWFjaCh1cGRhdGVTY29wZSk7CiAgICB9LAogICAgJ2tleWRvd24nOiBmdW5jdGlvbihlKXsKICAgICAgc2hpZnRlZCA9IGUuc2hpZnRLZXk7CiAgICB9LAogICAgJ2tleXVwJzogZnVuY3Rpb24oZSl7CiAgICAgIHNoaWZ0ZWQgPSBlLnNoaWZ0S2V5OwogICAgfSwKICAgICdmb2N1czpkZWxlZ2F0ZSh4LXRvZ2dsZSknOiBmdW5jdGlvbihlKXsKICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2ZvY3VzJywgJycpOwogICAgfSwKICAgICdibHVyOmRlbGVnYXRlKHgtdG9nZ2xlKSc6IGZ1bmN0aW9uKGUpewogICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnZm9jdXMnKTsKICAgIH0sCiAgICAndGFwOmRlbGVnYXRlKHgtdG9nZ2xlKSc6IGZ1bmN0aW9uKGUpewogICAgICAvLyBpZiBzaGlmdCBpcyBiZWluZyBoZWxkLCBjaGVjayBhbGwgZ3JvdXAgdG9nZ2xlcyBpbiBiZXR3ZWVuIHRoZSB0YXBwZWQKICAgICAgLy8gdG9nZ2xlIGFuZCB0aGUgcHJldmlvdXNseSB0YXBwZWQgdG9nZ2xlCiAgICAgIGlmIChzaGlmdGVkICYmIHRoaXMuZ3JvdXApIHsKICAgICAgICB2YXIgdG9nZ2xlcyA9IHRoaXMuZ3JvdXBUb2dnbGVzLAogICAgICAgICAgICBhY3RpdmUgPSB0aGlzLnh0YWcuc2NvcGUucXVlcnlTZWxlY3RvcigneC10b2dnbGVbZ3JvdXA9IicrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXArJyJdW2FjdGl2ZV0nKTsKICAgICAgICBpZiAoYWN0aXZlICYmIHRoaXMgIT0gYWN0aXZlKSB7CiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgICAgICAgc3RhdGUgPSBhY3RpdmUuY2hlY2tlZCwKICAgICAgICAgICAgICBpbmRleCA9IHRvZ2dsZXMuaW5kZXhPZih0aGlzKSwKICAgICAgICAgICAgICBhY3RpdmVJbmRleCA9IHRvZ2dsZXMuaW5kZXhPZihhY3RpdmUpLAogICAgICAgICAgICAgIG1pbkluZGV4ID0gTWF0aC5taW4oaW5kZXgsIGFjdGl2ZUluZGV4KSwKICAgICAgICAgICAgICBtYXhJbmRleCA9IE1hdGgubWF4KGluZGV4LCBhY3RpdmVJbmRleCk7CiAgICAgICAgICB0b2dnbGVzLnNsaWNlKG1pbkluZGV4LCBtYXhJbmRleCkuZm9yRWFjaChmdW5jdGlvbih0b2dnbGVyKXsKICAgICAgICAgICAgaWYgKHRvZ2dsZXIgIT0gc2VsZikgdG9nZ2xlci5jaGVja2VkID0gc3RhdGU7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAnY2hhbmdlOmRlbGVnYXRlKHgtdG9nZ2xlKSc6IGZ1bmN0aW9uKGUpewogICAgICAvLyBtYW5hZ2UgdGhlIGFjdGl2ZSBzdGF0ZSBvZiBhbnkgZ3JvdXAgdG9nZ2xlcwogICAgICB2YXIgYWN0aXZlID0gdGhpcy54dGFnLnNjb3BlLnF1ZXJ5U2VsZWN0b3IoJ3gtdG9nZ2xlW2dyb3VwPSInKyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAgKyciXVthY3RpdmVdJyk7CiAgICAgIHRoaXMuY2hlY2tlZCA9IChzaGlmdGVkICYmIGFjdGl2ZSAmJiAodGhpcyAhPSBhY3RpdmUpKSA/IAogICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5jaGVja2VkIDogdGhpcy54dGFnLmlucHV0RWwuY2hlY2tlZDsKICAgICAgaWYgKHRoaXMuZ3JvdXApIHsKICAgICAgICB0aGlzLmdyb3VwVG9nZ2xlcy5mb3JFYWNoKGZ1bmN0aW9uKHRvZ2dsZSl7CiAgICAgICAgICB0b2dnbGUuYWN0aXZlID0gZmFsc2U7CiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlOwogICAgICB9CiAgICB9CiAgfSk7ICAKICAKICB4dGFnLnJlZ2lzdGVyKCd4LXRvZ2dsZScsIHsKICAgIGxpZmVjeWNsZTogewogICAgICBjcmVhdGVkOiBmdW5jdGlvbigpewogICAgICAgIHRoaXMuaW5uZXJIVE1MID0gJzxsYWJlbCBjbGFzcz0ieC10b2dnbGUtaW5wdXQtd3JhcCI+JysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IHR5cGU9ImNoZWNrYm94Ij48L2lucHV0PicrCiAgICAgICAgICAgICAgICAgICAgICAgICAnPC9sYWJlbD4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJ4LXRvZ2dsZS1jaGVjayI+PC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0ieC10b2dnbGUtY29udGVudCI+PC9kaXY+JzsKCiAgICAgICAgdGhpcy54dGFnLmlucHV0V3JhcEVsID0gdGhpcy5xdWVyeVNlbGVjdG9yKCIueC10b2dnbGUtaW5wdXQtd3JhcCIpOwogICAgICAgIHRoaXMueHRhZy5pbnB1dEVsID0gdGhpcy54dGFnLmlucHV0V3JhcEVsLnF1ZXJ5U2VsZWN0b3IoImlucHV0Iik7CiAgICAgICAgdGhpcy54dGFnLmNvbnRlbnRXcmFwRWwgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoIi54LXRvZ2dsZS1jb250ZW50LXdyYXAiKTsKICAgICAgICB0aGlzLnh0YWcuY2hlY2tFbCA9IHRoaXMucXVlcnlTZWxlY3RvcigiLngtdG9nZ2xlLWNoZWNrIik7CiAgICAgICAgdGhpcy54dGFnLmNvbnRlbnRFbCA9IHRoaXMucXVlcnlTZWxlY3RvcigiLngtdG9nZ2xlLWNvbnRlbnQiKTsKCiAgICAgICAgdGhpcy50eXBlID0gImNoZWNrYm94IjsKICAgICAgICBzZXRTY29wZSh0aGlzKTsKCiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmdldEF0dHJpYnV0ZSgnbmFtZScpOwogICAgICAgIGlmIChuYW1lKSB0aGlzLnh0YWcuaW5wdXRFbC5uYW1lID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ25hbWUnKTsKICAgICAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkgdGhpcy5jaGVja2VkID0gdHJ1ZTsKICAgICAgfSwKICAgICAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgc2V0U2NvcGUodGhpcyk7CgogICAgICAgIC8vIGNoZWNrIGlmIHdlIGFyZSBpbnNlcnRlZCBpbnRvIGEgdG9nZ2xlZ3JvdXAgY29tcG9uZW50CiAgICAgICAgaWYodGhpcy5wYXJlbnROb2RlICYmIAogICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAieC10b2dnbGVncm91cCIpCiAgICAgICAgewogICAgICAgICAgICBpZih0aGlzLnBhcmVudE5vZGUuaGFzQXR0cmlidXRlKCJuYW1lIikpewogICAgICAgICAgICAgIHRoaXMubmFtZSA9IHRoaXMucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoIm5hbWUiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZih0aGlzLnBhcmVudE5vZGUuaGFzQXR0cmlidXRlKCJncm91cCIpKXsKICAgICAgICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgiZ3JvdXAiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgibm8tYm94IiwgdHJ1ZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5uYW1lKSB1cGRhdGVTY29wZSh0aGlzLnh0YWcuc2NvcGUpOwogICAgICB9LAogICAgICByZW1vdmVkOiBmdW5jdGlvbigpewogICAgICAgIHVwZGF0ZVNjb3BlKHRoaXMueHRhZy5zY29wZSk7CiAgICAgICAgc2V0U2NvcGUodGhpcyk7CiAgICAgIH0KICAgIH0sCiAgICBhY2Nlc3NvcnM6IHsKICAgICAgbm9Cb3g6IHsKICAgICAgICBhdHRyaWJ1dGU6IHsKICAgICAgICAgIG5hbWU6ICJuby1ib3giLAogICAgICAgICAgYm9vbGVhbjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgc2V0OiBmdW5jdGlvbigpe30KICAgICAgfSwKICAgICAgdHlwZTogewogICAgICAgIGF0dHJpYnV0ZToge30sCiAgICAgICAgc2V0OiBmdW5jdGlvbihuZXdUeXBlKXsKICAgICAgICAgIHRoaXMueHRhZy5pbnB1dEVsLnR5cGUgPSBuZXdUeXBlOwogICAgICAgIH0KICAgICAgfSwKICAgICAgbGFiZWw6IHsgCiAgICAgICAgYXR0cmlidXRlOiB7fSwKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICByZXR1cm4gdGhpcy54dGFnLmNvbnRlbnRFbC5pbm5lckhUTUw7CiAgICAgICAgfSwKICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld0xhYmVsQ29udGVudCl7CiAgICAgICAgICB0aGlzLnh0YWcuY29udGVudEVsLmlubmVySFRNTCA9IG5ld0xhYmVsQ29udGVudDsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGFjdGl2ZTogeyBhdHRyaWJ1dGU6IHsgYm9vbGVhbjogdHJ1ZSB9IH0sCiAgICAgIGdyb3VwOiB7IGF0dHJpYnV0ZToge30gfSwKICAgICAgZ3JvdXBUb2dnbGVzOiB7CiAgICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgICAgcmV0dXJuIHh0YWcucXVlcnkodGhpcy54dGFnLnNjb3BlLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LXRvZ2dsZVtncm91cD0iJyArIHRoaXMuZ3JvdXAgKyAnIl0nKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIG5hbWU6IHsKICAgICAgICBhdHRyaWJ1dGU6IHsKICAgICAgICAgIHNraXA6IHRydWUgLy8gdG8gcHJldmVudCByZWN1cnNpb24gd2hlbiBuZWVkaW5nIHRvIHJlbW92ZSBhdHRyaWJ1dGUKICAgICAgICB9LAogICAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgibmFtZSIpOwogICAgICAgIH0sCiAgICAgICAgc2V0OiBmdW5jdGlvbihuYW1lKXsKICAgICAgICAgIGlmIChuYW1lID09PSBudWxsKSB7CiAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCJuYW1lIik7CiAgICAgICAgICAgIHRoaXMudHlwZSA9ICdjaGVja2JveCc7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlewogICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgibmFtZSIsIG5hbWUpOwogICAgICAgICAgfSAKICAgICAgICAgIHRoaXMueHRhZy5pbnB1dEVsLm5hbWUgPSBuYW1lOwogICAgICAgICAgdXBkYXRlU2NvcGUodGhpcy54dGFnLnNjb3BlKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGNoZWNrZWQ6IHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICByZXR1cm4gdGhpcy54dGFnLmlucHV0RWwuY2hlY2tlZDsKICAgICAgICB9LAogICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWUsCiAgICAgICAgICAgICAgc3RhdGUgPSAodmFsdWUgPT09ICd0cnVlJyB8fCB2YWx1ZSA9PT0gdHJ1ZSk7CiAgICAgICAgICBpZiAobmFtZSkgewogICAgICAgICAgICB2YXIgc2NvcGVTZWxlY3RvciA9ICh0aGlzLnh0YWcuc2NvcGUgPT0gZG9jdW1lbnQpID8gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1t4LXRvZ2dsZS1uby1mb3JtXScgOiAnJzsKICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gJ3gtdG9nZ2xlW2NoZWNrZWRdW25hbWU9IicrbmFtZSsnIl0nICsgc2NvcGVTZWxlY3RvcjsKICAgICAgICAgICAgLy8gZ2V0IHByZXZpb3VzbHkgY2hlY2tlZCB0b2dnbGUgYW5kIHVudG9nZ2xlIGl0CiAgICAgICAgICAgIHZhciBwcmV2aW91cyA9IHRoaXMueHRhZy5zY29wZS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsKICAgICAgICAgICAgaWYgKHByZXZpb3VzKSBwcmV2aW91cy5yZW1vdmVBdHRyaWJ1dGUoJ2NoZWNrZWQnKTsgCiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLnh0YWcuaW5wdXRFbC5jaGVja2VkID0gc3RhdGU7CiAgICAgICAgICBpZiAoc3RhdGUpIHRoaXMuc2V0QXR0cmlidXRlKCdjaGVja2VkJywgJycpOwogICAgICAgICAgZWxzZSB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnY2hlY2tlZCcpOwogICAgICAgIH0KICAgICAgfSwKCiAgICAgIHZhbHVlOiB7CiAgICAgICAgYXR0cmlidXRlOiB7fSwKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICByZXR1cm4gdGhpcy54dGFnLmlucHV0RWwudmFsdWU7CiAgICAgICAgfSwKICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5ld1ZhbCl7CiAgICAgICAgICB0aGlzLnh0YWcuaW5wdXRFbC52YWx1ZSA9IG5ld1ZhbDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9KTsKICAKfSkoKTs=",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sun, 09 Nov 2014 03:47:13 GMT",
                    "Content-Length": "100445",
                    "Date": "Sun, 09 Nov 2014 03:47:13 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}