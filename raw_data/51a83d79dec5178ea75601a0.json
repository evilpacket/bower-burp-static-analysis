{
    "url": "http://localhost:9999/Schweigi/angular-gantt/demo/dist/scripts/vendor.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>the 'name' property of a DOM element</b> via the following statement:<ul><li>window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/Schweigi/angular-gantt/demo/dist/scripts/vendor.js",
                "path": "/Schweigi/angular-gantt/demo/dist/scripts/vendor.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9TY2h3ZWlnaS9hbmd1bGFyLWdhbnR0L2RlbW8vZGlzdC9zY3JpcHRzL3ZlbmRvci5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTQ2MjM4Mw0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KRGF0ZTogVGh1LCAwNiBOb3YgMjAxNCAwNzo0NToxMSBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMDYgTm92IDIwMTQgMDc6NDU6MTAgR01UDQoNCi8qKgogKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuMy4wCiAqIChjKSAyMDEwLTIwMTQgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnCiAqIExpY2Vuc2U6IE1JVAogKi8KKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkgeyd1c2Ugc3RyaWN0JzsKCi8qKgogKiBAZGVzY3JpcHRpb24KICoKICogVGhpcyBvYmplY3QgcHJvdmlkZXMgYSB1dGlsaXR5IGZvciBwcm9kdWNpbmcgcmljaCBFcnJvciBtZXNzYWdlcyB3aXRoaW4KICogQW5ndWxhci4gSXQgY2FuIGJlIGNhbGxlZCBhcyBmb2xsb3dzOgogKgogKiB2YXIgZXhhbXBsZU1pbkVyciA9IG1pbkVycignZXhhbXBsZScpOwogKiB0aHJvdyBleGFtcGxlTWluRXJyKCdvbmUnLCAnVGhpcyB7MH0gaXMgezF9JywgZm9vLCBiYXIpOwogKgogKiBUaGUgYWJvdmUgY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBtaW5FcnIgaW4gdGhlIGV4YW1wbGUgbmFtZXNwYWNlLiBUaGUKICogcmVzdWx0aW5nIGVycm9yIHdpbGwgaGF2ZSBhIG5hbWVzcGFjZWQgZXJyb3IgY29kZSBvZiBleGFtcGxlLm9uZS4gIFRoZQogKiByZXN1bHRpbmcgZXJyb3Igd2lsbCByZXBsYWNlIHswfSB3aXRoIHRoZSB2YWx1ZSBvZiBmb28sIGFuZCB7MX0gd2l0aCB0aGUKICogdmFsdWUgb2YgYmFyLiBUaGUgb2JqZWN0IGlzIG5vdCByZXN0cmljdGVkIGluIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGl0IGNhbgogKiB0YWtlLgogKgogKiBJZiBmZXdlciBhcmd1bWVudHMgYXJlIHNwZWNpZmllZCB0aGFuIG5lY2Vzc2FyeSBmb3IgaW50ZXJwb2xhdGlvbiwgdGhlIGV4dHJhCiAqIGludGVycG9sYXRpb24gbWFya2VycyB3aWxsIGJlIHByZXNlcnZlZCBpbiB0aGUgZmluYWwgc3RyaW5nLgogKgogKiBTaW5jZSBkYXRhIHdpbGwgYmUgcGFyc2VkIHN0YXRpY2FsbHkgZHVyaW5nIGEgYnVpbGQgc3RlcCwgc29tZSByZXN0cmljdGlvbnMKICogYXJlIGFwcGxpZWQgd2l0aCByZXNwZWN0IHRvIGhvdyBtaW5FcnIgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIGFuZCBjYWxsZWQuCiAqIEluc3RhbmNlcyBzaG91bGQgaGF2ZSBuYW1lcyBvZiB0aGUgZm9ybSBuYW1lc3BhY2VNaW5FcnIgZm9yIGEgbWluRXJyIGNyZWF0ZWQKICogdXNpbmcgbWluRXJyKCduYW1lc3BhY2UnKSAuIEVycm9yIGNvZGVzLCBuYW1lc3BhY2VzIGFuZCB0ZW1wbGF0ZSBzdHJpbmdzCiAqIHNob3VsZCBhbGwgYmUgc3RhdGljIHN0cmluZ3MsIG5vdCB2YXJpYWJsZXMgb3IgZ2VuZXJhbCBleHByZXNzaW9ucy4KICoKICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZSBUaGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIG5ldyBtaW5FcnIgaW5zdGFuY2UuCiAqIEBwYXJhbSB7ZnVuY3Rpb259IEVycm9yQ29uc3RydWN0b3IgQ3VzdG9tIGVycm9yIGNvbnN0cnVjdG9yIHRvIGJlIGluc3RhbnRpYXRlZCB3aGVuIHJldHVybmluZwogKiAgIGVycm9yIGZyb20gcmV0dXJuZWQgZnVuY3Rpb24sIGZvciBjYXNlcyB3aGVuIGEgcGFydGljdWxhciB0eXBlIG9mIGVycm9yIGlzIHVzZWZ1bC4KICogQHJldHVybnMge2Z1bmN0aW9uKGNvZGU6c3RyaW5nLCB0ZW1wbGF0ZTpzdHJpbmcsIC4uLnRlbXBsYXRlQXJncyk6IEVycm9yfSBtaW5FcnIgaW5zdGFuY2UKICovCgpmdW5jdGlvbiBtaW5FcnIobW9kdWxlLCBFcnJvckNvbnN0cnVjdG9yKSB7CiAgRXJyb3JDb25zdHJ1Y3RvciA9IEVycm9yQ29uc3RydWN0b3IgfHwgRXJyb3I7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBjb2RlID0gYXJndW1lbnRzWzBdLAogICAgICBwcmVmaXggPSAnWycgKyAobW9kdWxlID8gbW9kdWxlICsgJzonIDogJycpICsgY29kZSArICddICcsCiAgICAgIHRlbXBsYXRlID0gYXJndW1lbnRzWzFdLAogICAgICB0ZW1wbGF0ZUFyZ3MgPSBhcmd1bWVudHMsCiAgICAgIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIChvYmopIHsKICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgcmV0dXJuIG9iai50b1N0cmluZygpLnJlcGxhY2UoLyBce1tcc1xTXSokLywgJycpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgIHJldHVybiAndW5kZWZpbmVkJzsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG9iajsKICAgICAgfSwKICAgICAgbWVzc2FnZSwgaTsKCiAgICBtZXNzYWdlID0gcHJlZml4ICsgdGVtcGxhdGUucmVwbGFjZSgvXHtcZCtcfS9nLCBmdW5jdGlvbiAobWF0Y2gpIHsKICAgICAgdmFyIGluZGV4ID0gK21hdGNoLnNsaWNlKDEsIC0xKSwgYXJnOwoKICAgICAgaWYgKGluZGV4ICsgMiA8IHRlbXBsYXRlQXJncy5sZW5ndGgpIHsKICAgICAgICBhcmcgPSB0ZW1wbGF0ZUFyZ3NbaW5kZXggKyAyXTsKICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgcmV0dXJuIGFyZy50b1N0cmluZygpLnJlcGxhY2UoLyA/XHtbXHNcU10qJC8sICcnKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnICE9PSAnc3RyaW5nJykgewogICAgICAgICAgcmV0dXJuIHRvSnNvbihhcmcpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXJnOwogICAgICB9CiAgICAgIHJldHVybiBtYXRjaDsKICAgIH0pOwoKICAgIG1lc3NhZ2UgPSBtZXNzYWdlICsgJ1xuaHR0cDovL2Vycm9ycy5hbmd1bGFyanMub3JnLzEuMy4wLycgKwogICAgICAobW9kdWxlID8gbW9kdWxlICsgJy8nIDogJycpICsgY29kZTsKICAgIGZvciAoaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UgKyAoaSA9PSAyID8gJz8nIDogJyYnKSArICdwJyArIChpLTIpICsgJz0nICsKICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5KGFyZ3VtZW50c1tpXSkpOwogICAgfQogICAgcmV0dXJuIG5ldyBFcnJvckNvbnN0cnVjdG9yKG1lc3NhZ2UpOwogIH07Cn0KCi8qIFdlIG5lZWQgdG8gdGVsbCBqc2hpbnQgd2hhdCB2YXJpYWJsZXMgYXJlIGJlaW5nIGV4cG9ydGVkICovCi8qIGdsb2JhbCBhbmd1bGFyOiB0cnVlLAogIG1zaWU6IHRydWUsCiAganFMaXRlOiB0cnVlLAogIGpRdWVyeTogdHJ1ZSwKICBzbGljZTogdHJ1ZSwKICBzcGxpY2U6IHRydWUsCiAgcHVzaDogdHJ1ZSwKICB0b1N0cmluZzogdHJ1ZSwKICBuZ01pbkVycjogdHJ1ZSwKICBhbmd1bGFyTW9kdWxlOiB0cnVlLAogIHVpZDogdHJ1ZSwKICBSRUdFWF9TVFJJTkdfUkVHRVhQOiB0cnVlLAogIFZBTElESVRZX1NUQVRFX1BST1BFUlRZOiB0cnVlLAoKICBsb3dlcmNhc2U6IHRydWUsCiAgdXBwZXJjYXNlOiB0cnVlLAogIG1hbnVhbExvd2VyY2FzZTogdHJ1ZSwKICBtYW51YWxVcHBlcmNhc2U6IHRydWUsCiAgbm9kZU5hbWVfOiB0cnVlLAogIGlzQXJyYXlMaWtlOiB0cnVlLAogIGZvckVhY2g6IHRydWUsCiAgc29ydGVkS2V5czogdHJ1ZSwKICBmb3JFYWNoU29ydGVkOiB0cnVlLAogIHJldmVyc2VQYXJhbXM6IHRydWUsCiAgbmV4dFVpZDogdHJ1ZSwKICBzZXRIYXNoS2V5OiB0cnVlLAogIGV4dGVuZDogdHJ1ZSwKICBpbnQ6IHRydWUsCiAgaW5oZXJpdDogdHJ1ZSwKICBub29wOiB0cnVlLAogIGlkZW50aXR5OiB0cnVlLAogIHZhbHVlRm46IHRydWUsCiAgaXNVbmRlZmluZWQ6IHRydWUsCiAgaXNEZWZpbmVkOiB0cnVlLAogIGlzT2JqZWN0OiB0cnVlLAogIGlzU3RyaW5nOiB0cnVlLAogIGlzTnVtYmVyOiB0cnVlLAogIGlzRGF0ZTogdHJ1ZSwKICBpc0FycmF5OiB0cnVlLAogIGlzRnVuY3Rpb246IHRydWUsCiAgaXNSZWdFeHA6IHRydWUsCiAgaXNXaW5kb3c6IHRydWUsCiAgaXNTY29wZTogdHJ1ZSwKICBpc0ZpbGU6IHRydWUsCiAgaXNCbG9iOiB0cnVlLAogIGlzQm9vbGVhbjogdHJ1ZSwKICBpc1Byb21pc2VMaWtlOiB0cnVlLAogIHRyaW06IHRydWUsCiAgaXNFbGVtZW50OiB0cnVlLAogIG1ha2VNYXA6IHRydWUsCiAgc2l6ZTogdHJ1ZSwKICBpbmNsdWRlczogdHJ1ZSwKICBhcnJheVJlbW92ZTogdHJ1ZSwKICBpc0xlYWZOb2RlOiB0cnVlLAogIGNvcHk6IHRydWUsCiAgc2hhbGxvd0NvcHk6IHRydWUsCiAgZXF1YWxzOiB0cnVlLAogIGNzcDogdHJ1ZSwKICBjb25jYXQ6IHRydWUsCiAgc2xpY2VBcmdzOiB0cnVlLAogIGJpbmQ6IHRydWUsCiAgdG9Kc29uUmVwbGFjZXI6IHRydWUsCiAgdG9Kc29uOiB0cnVlLAogIGZyb21Kc29uOiB0cnVlLAogIHN0YXJ0aW5nVGFnOiB0cnVlLAogIHRyeURlY29kZVVSSUNvbXBvbmVudDogdHJ1ZSwKICBwYXJzZUtleVZhbHVlOiB0cnVlLAogIHRvS2V5VmFsdWU6IHRydWUsCiAgZW5jb2RlVXJpU2VnbWVudDogdHJ1ZSwKICBlbmNvZGVVcmlRdWVyeTogdHJ1ZSwKICBhbmd1bGFySW5pdDogdHJ1ZSwKICBib290c3RyYXA6IHRydWUsCiAgZ2V0VGVzdGFiaWxpdHk6IHRydWUsCiAgc25ha2VfY2FzZTogdHJ1ZSwKICBiaW5kSlF1ZXJ5OiB0cnVlLAogIGFzc2VydEFyZzogdHJ1ZSwKICBhc3NlcnRBcmdGbjogdHJ1ZSwKICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eTogdHJ1ZSwKICBnZXR0ZXI6IHRydWUsCiAgZ2V0QmxvY2tOb2RlczogdHJ1ZSwKICBoYXNPd25Qcm9wZXJ0eTogdHJ1ZSwKICBjcmVhdGVNYXA6IHRydWUsCgogIE5PREVfVFlQRV9FTEVNRU5UOiB0cnVlLAogIE5PREVfVFlQRV9URVhUOiB0cnVlLAogIE5PREVfVFlQRV9DT01NRU5UOiB0cnVlLAogIE5PREVfVFlQRV9ET0NVTUVOVDogdHJ1ZSwKICBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQ6IHRydWUsCiovCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBAbmdkb2MgbW9kdWxlCiAqIEBuYW1lIG5nCiAqIEBtb2R1bGUgbmcKICogQGRlc2NyaXB0aW9uCiAqCiAqICMgbmcgKGNvcmUgbW9kdWxlKQogKiBUaGUgbmcgbW9kdWxlIGlzIGxvYWRlZCBieSBkZWZhdWx0IHdoZW4gYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uIGlzIHN0YXJ0ZWQuIFRoZSBtb2R1bGUgaXRzZWxmCiAqIGNvbnRhaW5zIHRoZSBlc3NlbnRpYWwgY29tcG9uZW50cyBmb3IgYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uIHRvIGZ1bmN0aW9uLiBUaGUgdGFibGUgYmVsb3cKICogbGlzdHMgYSBoaWdoIGxldmVsIGJyZWFrZG93biBvZiBlYWNoIG9mIHRoZSBzZXJ2aWNlcy9mYWN0b3JpZXMsIGZpbHRlcnMsIGRpcmVjdGl2ZXMgYW5kIHRlc3RpbmcKICogY29tcG9uZW50cyBhdmFpbGFibGUgd2l0aGluIHRoaXMgY29yZSBtb2R1bGUuCiAqCiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPSJuZyI+PC9kaXY+CiAqLwoKdmFyIFJFR0VYX1NUUklOR19SRUdFWFAgPSAvXlwvKC4rKVwvKFthLXpdKikkLzsKCi8vIFRoZSBuYW1lIG9mIGEgZm9ybSBjb250cm9sJ3MgVmFsaWRpdHlTdGF0ZSBwcm9wZXJ0eS4KLy8gVGhpcyBpcyB1c2VkIHNvIHRoYXQgaXQncyBwb3NzaWJsZSBmb3IgaW50ZXJuYWwgdGVzdHMgdG8gY3JlYXRlIG1vY2sgVmFsaWRpdHlTdGF0ZXMuCnZhciBWQUxJRElUWV9TVEFURV9QUk9QRVJUWSA9ICd2YWxpZGl0eSc7CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIubG93ZXJjYXNlCiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHRvIGxvd2VyY2FzZS4KICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIGxvd2VyY2FzZS4KICogQHJldHVybnMge3N0cmluZ30gTG93ZXJjYXNlZCBzdHJpbmcuCiAqLwp2YXIgbG93ZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKXtyZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b0xvd2VyQ2FzZSgpIDogc3RyaW5nO307CnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIudXBwZXJjYXNlCiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHRvIHVwcGVyY2FzZS4KICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIHVwcGVyY2FzZS4KICogQHJldHVybnMge3N0cmluZ30gVXBwZXJjYXNlZCBzdHJpbmcuCiAqLwp2YXIgdXBwZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKXtyZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b1VwcGVyQ2FzZSgpIDogc3RyaW5nO307CgoKdmFyIG1hbnVhbExvd2VyY2FzZSA9IGZ1bmN0aW9uKHMpIHsKICAvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi8KICByZXR1cm4gaXNTdHJpbmcocykKICAgICAgPyBzLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uKGNoKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSB8IDMyKTt9KQogICAgICA6IHM7Cn07CnZhciBtYW51YWxVcHBlcmNhc2UgPSBmdW5jdGlvbihzKSB7CiAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovCiAgcmV0dXJuIGlzU3RyaW5nKHMpCiAgICAgID8gcy5yZXBsYWNlKC9bYS16XS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgJiB+MzIpO30pCiAgICAgIDogczsKfTsKCgovLyBTdHJpbmcjdG9Mb3dlckNhc2UgYW5kIFN0cmluZyN0b1VwcGVyQ2FzZSBkb24ndCBwcm9kdWNlIGNvcnJlY3QgcmVzdWx0cyBpbiBicm93c2VycyB3aXRoIFR1cmtpc2gKLy8gbG9jYWxlLCBmb3IgdGhpcyByZWFzb24gd2UgbmVlZCB0byBkZXRlY3QgdGhpcyBjYXNlIGFuZCByZWRlZmluZSBsb3dlcmNhc2UvdXBwZXJjYXNlIG1ldGhvZHMKLy8gd2l0aCBjb3JyZWN0IGJ1dCBzbG93ZXIgYWx0ZXJuYXRpdmVzLgppZiAoJ2knICE9PSAnSScudG9Mb3dlckNhc2UoKSkgewogIGxvd2VyY2FzZSA9IG1hbnVhbExvd2VyY2FzZTsKICB1cHBlcmNhc2UgPSBtYW51YWxVcHBlcmNhc2U7Cn0KCgp2YXIgLyoqIGhvbGRzIG1ham9yIHZlcnNpb24gbnVtYmVyIGZvciBJRSBvciBOYU4gZm9yIHJlYWwgYnJvd3NlcnMgKi8KICAgIG1zaWUsCiAgICBqcUxpdGUsICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nIHNpbmNlIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgYWZ0ZXIgdXMuCiAgICBqUXVlcnksICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nCiAgICBzbGljZSAgICAgICAgICAgICA9IFtdLnNsaWNlLAogICAgc3BsaWNlICAgICAgICAgICAgPSBbXS5zcGxpY2UsCiAgICBwdXNoICAgICAgICAgICAgICA9IFtdLnB1c2gsCiAgICB0b1N0cmluZyAgICAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsCiAgICBuZ01pbkVyciAgICAgICAgICA9IG1pbkVycignbmcnKSwKCiAgICAvKiogQG5hbWUgYW5ndWxhciAqLwogICAgYW5ndWxhciAgICAgICAgICAgPSB3aW5kb3cuYW5ndWxhciB8fCAod2luZG93LmFuZ3VsYXIgPSB7fSksCiAgICBhbmd1bGFyTW9kdWxlLAogICAgdWlkICAgICAgICAgICAgICAgPSAwOwoKLyoqCiAqIGRvY3VtZW50TW9kZSBpcyBhbiBJRS1vbmx5IHByb3BlcnR5CiAqIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9jYzE5Njk4OCh2PXZzLjg1KS5hc3B4CiAqLwptc2llID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlOwoKCi8qKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IG9iagogKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgYG9iamAgaXMgYW4gYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QgKE5vZGVMaXN0LCBBcmd1bWVudHMsCiAqICAgICAgICAgICAgICAgICAgIFN0cmluZyAuLi4pCiAqLwpmdW5jdGlvbiBpc0FycmF5TGlrZShvYmopIHsKICBpZiAob2JqID09IG51bGwgfHwgaXNXaW5kb3cob2JqKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7CgogIGlmIChvYmoubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UICYmIGxlbmd0aCkgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICByZXR1cm4gaXNTdHJpbmcob2JqKSB8fCBpc0FycmF5KG9iaikgfHwgbGVuZ3RoID09PSAwIHx8CiAgICAgICAgIHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInICYmIGxlbmd0aCA+IDAgJiYgKGxlbmd0aCAtIDEpIGluIG9iajsKfQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmZvckVhY2gKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogSW52b2tlcyB0aGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBvbmNlIGZvciBlYWNoIGl0ZW0gaW4gYG9iamAgY29sbGVjdGlvbiwgd2hpY2ggY2FuIGJlIGVpdGhlciBhbgogKiBvYmplY3Qgb3IgYW4gYXJyYXkuIFRoZSBgaXRlcmF0b3JgIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBgaXRlcmF0b3IodmFsdWUsIGtleSwgb2JqKWAsIHdoZXJlIGB2YWx1ZWAKICogaXMgdGhlIHZhbHVlIG9mIGFuIG9iamVjdCBwcm9wZXJ0eSBvciBhbiBhcnJheSBlbGVtZW50LCBga2V5YCBpcyB0aGUgb2JqZWN0IHByb3BlcnR5IGtleSBvcgogKiBhcnJheSBlbGVtZW50IGluZGV4IGFuZCBvYmogaXMgdGhlIGBvYmpgIGl0c2VsZi4gU3BlY2lmeWluZyBhIGBjb250ZXh0YCBmb3IgdGhlIGZ1bmN0aW9uIGlzIG9wdGlvbmFsLgogKgogKiBJdCBpcyB3b3J0aCBub3RpbmcgdGhhdCBgLmZvckVhY2hgIGRvZXMgbm90IGl0ZXJhdGUgb3ZlciBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWNhdXNlIGl0IGZpbHRlcnMKICogdXNpbmcgdGhlIGBoYXNPd25Qcm9wZXJ0eWAgbWV0aG9kLgogKgogICBgYGBqcwogICAgIHZhciB2YWx1ZXMgPSB7bmFtZTogJ21pc2tvJywgZ2VuZGVyOiAnbWFsZSd9OwogICAgIHZhciBsb2cgPSBbXTsKICAgICBhbmd1bGFyLmZvckVhY2godmFsdWVzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICB0aGlzLnB1c2goa2V5ICsgJzogJyArIHZhbHVlKTsKICAgICB9LCBsb2cpOwogICAgIGV4cGVjdChsb2cpLnRvRXF1YWwoWyduYW1lOiBtaXNrbycsICdnZW5kZXI6IG1hbGUnXSk7CiAgIGBgYAogKgogKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIE9iamVjdCB0byBpdGVyYXRlIG92ZXIuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yIEl0ZXJhdG9yIGZ1bmN0aW9uLgogKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHQgT2JqZWN0IHRvIGJlY29tZSBjb250ZXh0IChgdGhpc2ApIGZvciB0aGUgaXRlcmF0b3IgZnVuY3Rpb24uCiAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl9IFJlZmVyZW5jZSB0byBgb2JqYC4KICovCgpmdW5jdGlvbiBmb3JFYWNoKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICB2YXIga2V5LCBsZW5ndGg7CiAgaWYgKG9iaikgewogICAgaWYgKGlzRnVuY3Rpb24ob2JqKSkgewogICAgICBmb3IgKGtleSBpbiBvYmopIHsKICAgICAgICAvLyBOZWVkIHRvIGNoZWNrIGlmIGhhc093blByb3BlcnR5IGV4aXN0cywKICAgICAgICAvLyBhcyBvbiBJRTggdGhlIHJlc3VsdCBvZiBxdWVyeVNlbGVjdG9yQWxsIGlzIGFuIG9iamVjdCB3aXRob3V0IGEgaGFzT3duUHJvcGVydHkgZnVuY3Rpb24KICAgICAgICBpZiAoa2V5ICE9ICdwcm90b3R5cGUnICYmIGtleSAhPSAnbGVuZ3RoJyAmJiBrZXkgIT0gJ25hbWUnICYmICghb2JqLmhhc093blByb3BlcnR5IHx8IG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSkgewogICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikgfHwgaXNBcnJheUxpa2Uob2JqKSkgewogICAgICB2YXIgaXNQcmltaXRpdmUgPSB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JzsKICAgICAgZm9yIChrZXkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBrZXkgPCBsZW5ndGg7IGtleSsrKSB7CiAgICAgICAgaWYgKGlzUHJpbWl0aXZlIHx8IGtleSBpbiBvYmopIHsKICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSBpZiAob2JqLmZvckVhY2ggJiYgb2JqLmZvckVhY2ggIT09IGZvckVhY2gpIHsKICAgICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCwgb2JqKTsKICAgIH0gZWxzZSB7CiAgICAgIGZvciAoa2V5IGluIG9iaikgewogICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBzb3J0ZWRLZXlzKG9iaikgewogIHZhciBrZXlzID0gW107CiAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgIGtleXMucHVzaChrZXkpOwogICAgfQogIH0KICByZXR1cm4ga2V5cy5zb3J0KCk7Cn0KCmZ1bmN0aW9uIGZvckVhY2hTb3J0ZWQob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogIHZhciBrZXlzID0gc29ydGVkS2V5cyhvYmopOwogIGZvciAoIHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsKICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldKTsKICB9CiAgcmV0dXJuIGtleXM7Cn0KCgovKioKICogd2hlbiB1c2luZyBmb3JFYWNoIHRoZSBwYXJhbXMgYXJlIHZhbHVlLCBrZXksIGJ1dCBpdCBpcyBvZnRlbiB1c2VmdWwgdG8gaGF2ZSBrZXksIHZhbHVlLgogKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgKil9IGl0ZXJhdG9yRm4KICogQHJldHVybnMge2Z1bmN0aW9uKCosIHN0cmluZyl9CiAqLwpmdW5jdGlvbiByZXZlcnNlUGFyYW1zKGl0ZXJhdG9yRm4pIHsKICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGtleSkgeyBpdGVyYXRvckZuKGtleSwgdmFsdWUpOyB9Owp9CgovKioKICogQSBjb25zaXN0ZW50IHdheSBvZiBjcmVhdGluZyB1bmlxdWUgSURzIGluIGFuZ3VsYXIuCiAqCiAqIFVzaW5nIHNpbXBsZSBudW1iZXJzIGFsbG93cyB1cyB0byBnZW5lcmF0ZSAyOC42IG1pbGxpb24gdW5pcXVlIGlkcyBwZXIgc2Vjb25kIGZvciAxMCB5ZWFycyBiZWZvcmUKICogd2UgaGl0IG51bWJlciBwcmVjaXNpb24gaXNzdWVzIGluIEphdmFTY3JpcHQuCiAqCiAqIE1hdGgucG93KDIsNTMpIC8gNjAgLyA2MCAvIDI0IC8gMzY1IC8gMTAgPSAyOC42TQogKgogKiBAcmV0dXJucyB7bnVtYmVyfSBhbiB1bmlxdWUgYWxwaGEtbnVtZXJpYyBzdHJpbmcKICovCmZ1bmN0aW9uIG5leHRVaWQoKSB7CiAgcmV0dXJuICsrdWlkOwp9CgoKLyoqCiAqIFNldCBvciBjbGVhciB0aGUgaGFzaGtleSBmb3IgYW4gb2JqZWN0LgogKiBAcGFyYW0gb2JqIG9iamVjdAogKiBAcGFyYW0gaCB0aGUgaGFzaGtleSAoIXRydXRoeSB0byBkZWxldGUgdGhlIGhhc2hrZXkpCiAqLwpmdW5jdGlvbiBzZXRIYXNoS2V5KG9iaiwgaCkgewogIGlmIChoKSB7CiAgICBvYmouJCRoYXNoS2V5ID0gaDsKICB9CiAgZWxzZSB7CiAgICBkZWxldGUgb2JqLiQkaGFzaEtleTsKICB9Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5leHRlbmQKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocykKICogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLiBJZiB5b3Ugd2FudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCBvYmplY3RzLCB5b3UgY2FuIGRvIHNvCiAqIGJ5IHBhc3NpbmcgYW4gZW1wdHkgb2JqZWN0IGFzIHRoZSB0YXJnZXQ6IGB2YXIgb2JqZWN0ID0gYW5ndWxhci5leHRlbmQoe30sIG9iamVjdDEsIG9iamVjdDIpYC4KICoKICogQHBhcmFtIHtPYmplY3R9IGRzdCBEZXN0aW5hdGlvbiBvYmplY3QuCiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS4KICogQHJldHVybnMge09iamVjdH0gUmVmZXJlbmNlIHRvIGBkc3RgLgogKi8KZnVuY3Rpb24gZXh0ZW5kKGRzdCkgewogIHZhciBoID0gZHN0LiQkaGFzaEtleTsKCiAgZm9yICh2YXIgaSA9IDEsIGlpID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgIHZhciBvYmogPSBhcmd1bWVudHNbaV07CiAgICBpZiAob2JqKSB7CiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTsKICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0ga2V5cy5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgICAgdmFyIGtleSA9IGtleXNbal07CiAgICAgICAgZHN0W2tleV0gPSBvYmpba2V5XTsKICAgICAgfQogICAgfQogIH0KCiAgc2V0SGFzaEtleShkc3QsIGgpOwogIHJldHVybiBkc3Q7Cn0KCmZ1bmN0aW9uIGludChzdHIpIHsKICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCk7Cn0KCgpmdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHsKICByZXR1cm4gZXh0ZW5kKG5ldyAoZXh0ZW5kKGZ1bmN0aW9uKCkge30sIHtwcm90b3R5cGU6cGFyZW50fSkpKCksIGV4dHJhKTsKfQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLm5vb3AKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIG5vIG9wZXJhdGlvbnMuIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGUKICogZnVuY3Rpb25hbCBzdHlsZS4KICAgYGBganMKICAgICBmdW5jdGlvbiBmb28oY2FsbGJhY2spIHsKICAgICAgIHZhciByZXN1bHQgPSBjYWxjdWxhdGVSZXN1bHQoKTsKICAgICAgIChjYWxsYmFjayB8fCBhbmd1bGFyLm5vb3ApKHJlc3VsdCk7CiAgICAgfQogICBgYGAKICovCmZ1bmN0aW9uIG5vb3AoKSB7fQpub29wLiRpbmplY3QgPSBbXTsKCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaWRlbnRpdHkKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGUKICogZnVuY3Rpb25hbCBzdHlsZS4KICoKICAgYGBganMKICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1lcih0cmFuc2Zvcm1hdGlvbkZuLCB2YWx1ZSkgewogICAgICAgcmV0dXJuICh0cmFuc2Zvcm1hdGlvbkZuIHx8IGFuZ3VsYXIuaWRlbnRpdHkpKHZhbHVlKTsKICAgICB9OwogICBgYGAKICovCmZ1bmN0aW9uIGlkZW50aXR5KCQpIHtyZXR1cm4gJDt9CmlkZW50aXR5LiRpbmplY3QgPSBbXTsKCgpmdW5jdGlvbiB2YWx1ZUZuKHZhbHVlKSB7cmV0dXJuIGZ1bmN0aW9uKCkge3JldHVybiB2YWx1ZTt9O30KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc1VuZGVmaW5lZAogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIHVuZGVmaW5lZC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLgogKi8KZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO30KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNEZWZpbmVkCiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgZGVmaW5lZC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgZGVmaW5lZC4KICovCmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc09iamVjdAogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBPYmplY3RgLiBVbmxpa2UgYHR5cGVvZmAgaW4gSmF2YVNjcmlwdCwgYG51bGxgcyBhcmUgbm90CiAqIGNvbnNpZGVyZWQgdG8gYmUgb2JqZWN0cy4gTm90ZSB0aGF0IEphdmFTY3JpcHQgYXJyYXlzIGFyZSBvYmplY3RzLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgT2JqZWN0YCBidXQgbm90IGBudWxsYC4KICovCmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKXsKICAvLyBodHRwOi8vanNwZXJmLmNvbS9pc29iamVjdDQKICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JzsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc1N0cmluZwogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYFN0cmluZ2AuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFN0cmluZ2AuCiAqLwpmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc051bWJlcgogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYE51bWJlcmAuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYE51bWJlcmAuCiAqLwpmdW5jdGlvbiBpc051bWJlcih2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0RhdGUKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgZGF0ZS4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRGF0ZWAuCiAqLwpmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHsKICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJzsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0FycmF5CiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYEFycmF5YC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYEFycmF5YC4KICovCnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTsKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0Z1bmN0aW9uCiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgRnVuY3Rpb25gLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBGdW5jdGlvbmAuCiAqLwpmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO30KCgovKioKICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgcmVndWxhciBleHByZXNzaW9uIG9iamVjdC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgUmVnRXhwYC4KICovCmZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7CiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJzsKfQoKCi8qKgogKiBDaGVja3MgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqZWN0LgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IG9iaiBPYmplY3QgdG8gY2hlY2sKICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqLgogKi8KZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmoud2luZG93ID09PSBvYmo7Cn0KCgpmdW5jdGlvbiBpc1Njb3BlKG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLiRldmFsQXN5bmMgJiYgb2JqLiR3YXRjaDsKfQoKCmZ1bmN0aW9uIGlzRmlsZShvYmopIHsKICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBGaWxlXSc7Cn0KCgpmdW5jdGlvbiBpc0Jsb2Iob2JqKSB7CiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQmxvYl0nOwp9CgoKZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nOwp9CgoKZnVuY3Rpb24gaXNQcm9taXNlTGlrZShvYmopIHsKICByZXR1cm4gb2JqICYmIGlzRnVuY3Rpb24ob2JqLnRoZW4pOwp9CgoKdmFyIHRyaW0gPSBmdW5jdGlvbih2YWx1ZSkgewogIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTsKfTsKCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNFbGVtZW50CiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLgogKi8KZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHsKICByZXR1cm4gISEobm9kZSAmJgogICAgKG5vZGUubm9kZU5hbWUgIC8vIHdlIGFyZSBhIGRpcmVjdCBlbGVtZW50CiAgICB8fCAobm9kZS5wcm9wICYmIG5vZGUuYXR0ciAmJiBub2RlLmZpbmQpKSk7ICAvLyB3ZSBoYXZlIGFuIG9uIGFuZCBmaW5kIG1ldGhvZCBwYXJ0IG9mIGpRdWVyeSBBUEkKfQoKLyoqCiAqIEBwYXJhbSBzdHIgJ2tleTEsa2V5MiwuLi4nCiAqIEByZXR1cm5zIHtvYmplY3R9IGluIHRoZSBmb3JtIG9mIHtrZXkxOnRydWUsIGtleTI6dHJ1ZSwgLi4ufQogKi8KZnVuY3Rpb24gbWFrZU1hcChzdHIpIHsKICB2YXIgb2JqID0ge30sIGl0ZW1zID0gc3RyLnNwbGl0KCIsIiksIGk7CiAgZm9yICggaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKyApCiAgICBvYmpbIGl0ZW1zW2ldIF0gPSB0cnVlOwogIHJldHVybiBvYmo7Cn0KCgpmdW5jdGlvbiBub2RlTmFtZV8oZWxlbWVudCkgewogIHJldHVybiBsb3dlcmNhc2UoZWxlbWVudC5ub2RlTmFtZSB8fCBlbGVtZW50WzBdLm5vZGVOYW1lKTsKfQoKCi8qKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIGFycmF5LCB0aGUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYW4gb2JqZWN0IGhhcywgb3IKICogdGhlIGxlbmd0aCBvZiBhIHN0cmluZy4KICoKICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGF1Z21lbnQgdGhlIE9iamVjdCB0eXBlIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMuIFNlZQogKiB7QGxpbmsgYW5ndWxhci5PYmplY3R9IGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IEFuZ3VsYXIgYXJyYXlzLgogKgogKiBAcGFyYW0ge09iamVjdHxBcnJheXxzdHJpbmd9IG9iaiBPYmplY3QsIGFycmF5LCBvciBzdHJpbmcgdG8gaW5zcGVjdC4KICogQHBhcmFtIHtib29sZWFufSBbb3duUHJvcHNPbmx5PWZhbHNlXSBDb3VudCBvbmx5ICJvd24iIHByb3BlcnRpZXMgaW4gYW4gb2JqZWN0CiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBzaXplIG9mIGBvYmpgIG9yIGAwYCBpZiBgb2JqYCBpcyBuZWl0aGVyIGFuIG9iamVjdCBub3IgYW4gYXJyYXkuCiAqLwpmdW5jdGlvbiBzaXplKG9iaiwgb3duUHJvcHNPbmx5KSB7CiAgdmFyIGNvdW50ID0gMCwga2V5OwoKICBpZiAoaXNBcnJheShvYmopIHx8IGlzU3RyaW5nKG9iaikpIHsKICAgIHJldHVybiBvYmoubGVuZ3RoOwogIH0gZWxzZSBpZiAoaXNPYmplY3Qob2JqKSkgewogICAgZm9yIChrZXkgaW4gb2JqKQogICAgICBpZiAoIW93blByb3BzT25seSB8fCBvYmouaGFzT3duUHJvcGVydHkoa2V5KSkKICAgICAgICBjb3VudCsrOwogIH0KCiAgcmV0dXJuIGNvdW50Owp9CgoKZnVuY3Rpb24gaW5jbHVkZXMoYXJyYXksIG9iaikgewogIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGFycmF5LCBvYmopICE9IC0xOwp9CgpmdW5jdGlvbiBhcnJheVJlbW92ZShhcnJheSwgdmFsdWUpIHsKICB2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKHZhbHVlKTsKICBpZiAoaW5kZXggPj0wKQogICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTsKICByZXR1cm4gdmFsdWU7Cn0KCmZ1bmN0aW9uIGlzTGVhZk5vZGUgKG5vZGUpIHsKICBpZiAobm9kZSkgewogICAgc3dpdGNoIChub2RlTmFtZV8obm9kZSkpIHsKICAgIGNhc2UgIm9wdGlvbiI6CiAgICBjYXNlICJwcmUiOgogICAgY2FzZSAidGl0bGUiOgogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CiAgcmV0dXJuIGZhbHNlOwp9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuY29weQogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIGBzb3VyY2VgLCB3aGljaCBzaG91bGQgYmUgYW4gb2JqZWN0IG9yIGFuIGFycmF5LgogKgogKiAqIElmIG5vIGRlc3RpbmF0aW9uIGlzIHN1cHBsaWVkLCBhIGNvcHkgb2YgdGhlIG9iamVjdCBvciBhcnJheSBpcyBjcmVhdGVkLgogKiAqIElmIGEgZGVzdGluYXRpb24gaXMgcHJvdmlkZWQsIGFsbCBvZiBpdHMgZWxlbWVudHMgKGZvciBhcnJheSkgb3IgcHJvcGVydGllcyAoZm9yIG9iamVjdHMpCiAqICAgYXJlIGRlbGV0ZWQgYW5kIHRoZW4gYWxsIGVsZW1lbnRzL3Byb3BlcnRpZXMgZnJvbSB0aGUgc291cmNlIGFyZSBjb3BpZWQgdG8gaXQuCiAqICogSWYgYHNvdXJjZWAgaXMgbm90IGFuIG9iamVjdCBvciBhcnJheSAoaW5jLiBgbnVsbGAgYW5kIGB1bmRlZmluZWRgKSwgYHNvdXJjZWAgaXMgcmV0dXJuZWQuCiAqICogSWYgYHNvdXJjZWAgaXMgaWRlbnRpY2FsIHRvICdkZXN0aW5hdGlvbicgYW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duLgogKgogKiBAcGFyYW0geyp9IHNvdXJjZSBUaGUgc291cmNlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1ha2UgYSBjb3B5LgogKiAgICAgICAgICAgICAgICAgICBDYW4gYmUgYW55IHR5cGUsIGluY2x1ZGluZyBwcmltaXRpdmVzLCBgbnVsbGAsIGFuZCBgdW5kZWZpbmVkYC4KICogQHBhcmFtIHsoT2JqZWN0fEFycmF5KT19IGRlc3RpbmF0aW9uIERlc3RpbmF0aW9uIGludG8gd2hpY2ggdGhlIHNvdXJjZSBpcyBjb3BpZWQuIElmCiAqICAgICBwcm92aWRlZCwgbXVzdCBiZSBvZiB0aGUgc2FtZSB0eXBlIGFzIGBzb3VyY2VgLgogKiBAcmV0dXJucyB7Kn0gVGhlIGNvcHkgb3IgdXBkYXRlZCBgZGVzdGluYXRpb25gLCBpZiBgZGVzdGluYXRpb25gIHdhcyBzcGVjaWZpZWQuCiAqCiAqIEBleGFtcGxlCiA8ZXhhbXBsZSBtb2R1bGU9ImNvcHlFeGFtcGxlIj4KIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiA8Zm9ybSBub3ZhbGlkYXRlIGNsYXNzPSJzaW1wbGUtZm9ybSI+CiBOYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InVzZXIubmFtZSIgLz48YnIgLz4KIEUtbWFpbDogPGlucHV0IHR5cGU9ImVtYWlsIiBuZy1tb2RlbD0idXNlci5lbWFpbCIgLz48YnIgLz4KIEdlbmRlcjogPGlucHV0IHR5cGU9InJhZGlvIiBuZy1tb2RlbD0idXNlci5nZW5kZXIiIHZhbHVlPSJtYWxlIiAvPm1hbGUKIDxpbnB1dCB0eXBlPSJyYWRpbyIgbmctbW9kZWw9InVzZXIuZ2VuZGVyIiB2YWx1ZT0iZmVtYWxlIiAvPmZlbWFsZTxiciAvPgogPGJ1dHRvbiBuZy1jbGljaz0icmVzZXQoKSI+UkVTRVQ8L2J1dHRvbj4KIDxidXR0b24gbmctY2xpY2s9InVwZGF0ZSh1c2VyKSI+U0FWRTwvYnV0dG9uPgogPC9mb3JtPgogPHByZT5mb3JtID0ge3t1c2VyIHwganNvbn19PC9wcmU+CiA8cHJlPm1hc3RlciA9IHt7bWFzdGVyIHwganNvbn19PC9wcmU+CiA8L2Rpdj4KCiA8c2NyaXB0PgogIGFuZ3VsYXIubW9kdWxlKCdjb3B5RXhhbXBsZScsIFtdKQogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgJHNjb3BlLm1hc3Rlcj0ge307CgogICAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24odXNlcikgewogICAgICAgIC8vIEV4YW1wbGUgd2l0aCAxIGFyZ3VtZW50CiAgICAgICAgJHNjb3BlLm1hc3Rlcj0gYW5ndWxhci5jb3B5KHVzZXIpOwogICAgICB9OwoKICAgICAgJHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gRXhhbXBsZSB3aXRoIDIgYXJndW1lbnRzCiAgICAgICAgYW5ndWxhci5jb3B5KCRzY29wZS5tYXN0ZXIsICRzY29wZS51c2VyKTsKICAgICAgfTsKCiAgICAgICRzY29wZS5yZXNldCgpOwogICAgfV0pOwogPC9zY3JpcHQ+CiA8L2ZpbGU+CiA8L2V4YW1wbGU+CiAqLwpmdW5jdGlvbiBjb3B5KHNvdXJjZSwgZGVzdGluYXRpb24sIHN0YWNrU291cmNlLCBzdGFja0Rlc3QpIHsKICBpZiAoaXNXaW5kb3coc291cmNlKSB8fCBpc1Njb3BlKHNvdXJjZSkpIHsKICAgIHRocm93IG5nTWluRXJyKCdjcHdzJywKICAgICAgIkNhbid0IGNvcHkhIE1ha2luZyBjb3BpZXMgb2YgV2luZG93IG9yIFNjb3BlIGluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLiIpOwogIH0KCiAgaWYgKCFkZXN0aW5hdGlvbikgewogICAgZGVzdGluYXRpb24gPSBzb3VyY2U7CiAgICBpZiAoc291cmNlKSB7CiAgICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHsKICAgICAgICBkZXN0aW5hdGlvbiA9IGNvcHkoc291cmNlLCBbXSwgc3RhY2tTb3VyY2UsIHN0YWNrRGVzdCk7CiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKHNvdXJjZSkpIHsKICAgICAgICBkZXN0aW5hdGlvbiA9IG5ldyBEYXRlKHNvdXJjZS5nZXRUaW1lKCkpOwogICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKHNvdXJjZSkpIHsKICAgICAgICBkZXN0aW5hdGlvbiA9IG5ldyBSZWdFeHAoc291cmNlLnNvdXJjZSwgc291cmNlLnRvU3RyaW5nKCkubWF0Y2goL1teXC9dKiQvKVswXSk7CiAgICAgICAgZGVzdGluYXRpb24ubGFzdEluZGV4ID0gc291cmNlLmxhc3RJbmRleDsKICAgICAgfSBlbHNlIGlmIChpc09iamVjdChzb3VyY2UpKSB7CiAgICAgICAgdmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlKSk7CiAgICAgICAgZGVzdGluYXRpb24gPSBjb3B5KHNvdXJjZSwgZW1wdHlPYmplY3QsIHN0YWNrU291cmNlLCBzdGFja0Rlc3QpOwogICAgICB9CiAgICB9CiAgfSBlbHNlIHsKICAgIGlmIChzb3VyY2UgPT09IGRlc3RpbmF0aW9uKSB0aHJvdyBuZ01pbkVycignY3BpJywKICAgICAgIkNhbid0IGNvcHkhIFNvdXJjZSBhbmQgZGVzdGluYXRpb24gYXJlIGlkZW50aWNhbC4iKTsKCiAgICBzdGFja1NvdXJjZSA9IHN0YWNrU291cmNlIHx8IFtdOwogICAgc3RhY2tEZXN0ID0gc3RhY2tEZXN0IHx8IFtdOwoKICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7CiAgICAgIHZhciBpbmRleCA9IHN0YWNrU291cmNlLmluZGV4T2Yoc291cmNlKTsKICAgICAgaWYgKGluZGV4ICE9PSAtMSkgcmV0dXJuIHN0YWNrRGVzdFtpbmRleF07CgogICAgICBzdGFja1NvdXJjZS5wdXNoKHNvdXJjZSk7CiAgICAgIHN0YWNrRGVzdC5wdXNoKGRlc3RpbmF0aW9uKTsKICAgIH0KCiAgICB2YXIgcmVzdWx0OwogICAgaWYgKGlzQXJyYXkoc291cmNlKSkgewogICAgICBkZXN0aW5hdGlvbi5sZW5ndGggPSAwOwogICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyBpKyspIHsKICAgICAgICByZXN1bHQgPSBjb3B5KHNvdXJjZVtpXSwgbnVsbCwgc3RhY2tTb3VyY2UsIHN0YWNrRGVzdCk7CiAgICAgICAgaWYgKGlzT2JqZWN0KHNvdXJjZVtpXSkpIHsKICAgICAgICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlW2ldKTsKICAgICAgICAgIHN0YWNrRGVzdC5wdXNoKHJlc3VsdCk7CiAgICAgICAgfQogICAgICAgIGRlc3RpbmF0aW9uLnB1c2gocmVzdWx0KTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdmFyIGggPSBkZXN0aW5hdGlvbi4kJGhhc2hLZXk7CiAgICAgIGlmIChpc0FycmF5KGRlc3RpbmF0aW9uKSkgewogICAgICAgIGRlc3RpbmF0aW9uLmxlbmd0aCA9IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yRWFjaChkZXN0aW5hdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgICAgZGVsZXRlIGRlc3RpbmF0aW9uW2tleV07CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgZm9yICggdmFyIGtleSBpbiBzb3VyY2UpIHsKICAgICAgICBpZihzb3VyY2UuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgcmVzdWx0ID0gY29weShzb3VyY2Vba2V5XSwgbnVsbCwgc3RhY2tTb3VyY2UsIHN0YWNrRGVzdCk7CiAgICAgICAgICBpZiAoaXNPYmplY3Qoc291cmNlW2tleV0pKSB7CiAgICAgICAgICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlW2tleV0pOwogICAgICAgICAgICBzdGFja0Rlc3QucHVzaChyZXN1bHQpOwogICAgICAgICAgfQogICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IHJlc3VsdDsKICAgICAgICB9CiAgICAgIH0KICAgICAgc2V0SGFzaEtleShkZXN0aW5hdGlvbixoKTsKICAgIH0KCiAgfQogIHJldHVybiBkZXN0aW5hdGlvbjsKfQoKLyoqCiAqIENyZWF0ZXMgYSBzaGFsbG93IGNvcHkgb2YgYW4gb2JqZWN0LCBhbiBhcnJheSBvciBhIHByaW1pdGl2ZS4KICoKICogQXNzdW1lcyB0aGF0IHRoZXJlIGFyZSBubyBwcm90byBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLgogKi8KZnVuY3Rpb24gc2hhbGxvd0NvcHkoc3JjLCBkc3QpIHsKICBpZiAoaXNBcnJheShzcmMpKSB7CiAgICBkc3QgPSBkc3QgfHwgW107CgogICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgZHN0W2ldID0gc3JjW2ldOwogICAgfQogIH0gZWxzZSBpZiAoaXNPYmplY3Qoc3JjKSkgewogICAgZHN0ID0gZHN0IHx8IHt9OwoKICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHsKICAgICAgaWYgKCEoa2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykpIHsKICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldOwogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gZHN0IHx8IHNyYzsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5lcXVhbHMKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiB0d28gb2JqZWN0cyBvciB0d28gdmFsdWVzIGFyZSBlcXVpdmFsZW50LiBTdXBwb3J0cyB2YWx1ZSB0eXBlcywgcmVndWxhcgogKiBleHByZXNzaW9ucywgYXJyYXlzIGFuZCBvYmplY3RzLgogKgogKiBUd28gb2JqZWN0cyBvciB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOgogKgogKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgcGFzcyBgPT09YCBjb21wYXJpc29uLgogKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kIGFsbCBvZiB0aGVpciBwcm9wZXJ0aWVzIGFyZSBlcXVhbCBieQogKiAgIGNvbXBhcmluZyB0aGVtIHdpdGggYGFuZ3VsYXIuZXF1YWxzYC4KICogKiBCb3RoIHZhbHVlcyBhcmUgTmFOLiAoSW4gSmF2YVNjcmlwdCwgTmFOID09IE5hTiA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byBOYU4gYXMgZXF1YWwpCiAqICogQm90aCB2YWx1ZXMgcmVwcmVzZW50IHRoZSBzYW1lIHJlZ3VsYXIgZXhwcmVzc2lvbiAoSW4gSmF2YVNjcmlwdCwKICogICAvYWJjLyA9PSAvYWJjLyA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byByZWd1bGFyIGV4cHJlc3Npb25zIGFzIGVxdWFsIHdoZW4gdGhlaXIgdGV4dHVhbAogKiAgIHJlcHJlc2VudGF0aW9uIG1hdGNoZXMpLgogKgogKiBEdXJpbmcgYSBwcm9wZXJ0eSBjb21wYXJpc29uLCBwcm9wZXJ0aWVzIG9mIGBmdW5jdGlvbmAgdHlwZSBhbmQgcHJvcGVydGllcyB3aXRoIG5hbWVzCiAqIHRoYXQgYmVnaW4gd2l0aCBgJGAgYXJlIGlnbm9yZWQuCiAqCiAqIFNjb3BlIGFuZCBET01XaW5kb3cgb2JqZWN0cyBhcmUgYmVpbmcgY29tcGFyZWQgb25seSBieSBpZGVudGlmeSAoYD09PWApLgogKgogKiBAcGFyYW0geyp9IG8xIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLgogKiBAcGFyYW0geyp9IG8yIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhcmd1bWVudHMgYXJlIGVxdWFsLgogKi8KZnVuY3Rpb24gZXF1YWxzKG8xLCBvMikgewogIGlmIChvMSA9PT0gbzIpIHJldHVybiB0cnVlOwogIGlmIChvMSA9PT0gbnVsbCB8fCBvMiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlOwogIGlmIChvMSAhPT0gbzEgJiYgbzIgIT09IG8yKSByZXR1cm4gdHJ1ZTsgLy8gTmFOID09PSBOYU4KICB2YXIgdDEgPSB0eXBlb2YgbzEsIHQyID0gdHlwZW9mIG8yLCBsZW5ndGgsIGtleSwga2V5U2V0OwogIGlmICh0MSA9PSB0MikgewogICAgaWYgKHQxID09ICdvYmplY3QnKSB7CiAgICAgIGlmIChpc0FycmF5KG8xKSkgewogICAgICAgIGlmICghaXNBcnJheShvMikpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoKGxlbmd0aCA9IG8xLmxlbmd0aCkgPT0gbzIubGVuZ3RoKSB7CiAgICAgICAgICBmb3Ioa2V5PTA7IGtleTxsZW5ndGg7IGtleSsrKSB7CiAgICAgICAgICAgIGlmICghZXF1YWxzKG8xW2tleV0sIG8yW2tleV0pKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKG8xKSkgewogICAgICAgIGlmICghaXNEYXRlKG8yKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIHJldHVybiBlcXVhbHMobzEuZ2V0VGltZSgpLCBvMi5nZXRUaW1lKCkpOwogICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKG8xKSAmJiBpc1JlZ0V4cChvMikpIHsKICAgICAgICByZXR1cm4gbzEudG9TdHJpbmcoKSA9PSBvMi50b1N0cmluZygpOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChpc1Njb3BlKG8xKSB8fCBpc1Njb3BlKG8yKSB8fCBpc1dpbmRvdyhvMSkgfHwgaXNXaW5kb3cobzIpIHx8IGlzQXJyYXkobzIpKSByZXR1cm4gZmFsc2U7CiAgICAgICAga2V5U2V0ID0ge307CiAgICAgICAgZm9yKGtleSBpbiBvMSkgewogICAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgPT09ICckJyB8fCBpc0Z1bmN0aW9uKG8xW2tleV0pKSBjb250aW51ZTsKICAgICAgICAgIGlmICghZXF1YWxzKG8xW2tleV0sIG8yW2tleV0pKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICBrZXlTZXRba2V5XSA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGZvcihrZXkgaW4gbzIpIHsKICAgICAgICAgIGlmICgha2V5U2V0Lmhhc093blByb3BlcnR5KGtleSkgJiYKICAgICAgICAgICAgICBrZXkuY2hhckF0KDApICE9PSAnJCcgJiYKICAgICAgICAgICAgICBvMltrZXldICE9PSB1bmRlZmluZWQgJiYKICAgICAgICAgICAgICAhaXNGdW5jdGlvbihvMltrZXldKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn0KCnZhciBjc3AgPSBmdW5jdGlvbigpIHsKICBpZiAoaXNEZWZpbmVkKGNzcC5pc0FjdGl2ZV8pKSByZXR1cm4gY3NwLmlzQWN0aXZlXzsKCiAgdmFyIGFjdGl2ZSA9ICEhKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuZy1jc3BdJykgfHwKICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbmctY3NwXScpKTsKCiAgaWYgKCFhY3RpdmUpIHsKICAgIHRyeSB7CiAgICAgIC8qIGpzaGludCAtVzAzMSwgLVcwNTQgKi8KICAgICAgbmV3IEZ1bmN0aW9uKCcnKTsKICAgICAgLyoganNoaW50ICtXMDMxLCArVzA1NCAqLwogICAgfSBjYXRjaCAoZSkgewogICAgICBhY3RpdmUgPSB0cnVlOwogICAgfQogIH0KCiAgcmV0dXJuIChjc3AuaXNBY3RpdmVfID0gYWN0aXZlKTsKfTsKCgoKZnVuY3Rpb24gY29uY2F0KGFycmF5MSwgYXJyYXkyLCBpbmRleCkgewogIHJldHVybiBhcnJheTEuY29uY2F0KHNsaWNlLmNhbGwoYXJyYXkyLCBpbmRleCkpOwp9CgpmdW5jdGlvbiBzbGljZUFyZ3MoYXJncywgc3RhcnRJbmRleCkgewogIHJldHVybiBzbGljZS5jYWxsKGFyZ3MsIHN0YXJ0SW5kZXggfHwgMCk7Cn0KCgovKiBqc2hpbnQgLVcxMDEgKi8KLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmJpbmQKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGZ1bmN0aW9uIGBmbmAgYm91bmQgdG8gYHNlbGZgIChgc2VsZmAgYmVjb21lcyB0aGUgYHRoaXNgIGZvcgogKiBgZm5gKS4gWW91IGNhbiBzdXBwbHkgb3B0aW9uYWwgYGFyZ3NgIHRoYXQgYXJlIHByZWJvdW5kIHRvIHRoZSBmdW5jdGlvbi4gVGhpcyBmZWF0dXJlIGlzIGFsc28KICoga25vd24gYXMgW3BhcnRpYWwgYXBwbGljYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGFydGlhbF9hcHBsaWNhdGlvbiksIGFzCiAqIGRpc3Rpbmd1aXNoZWQgZnJvbSBbZnVuY3Rpb24gY3VycnlpbmddKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3VycnlpbmcjQ29udHJhc3Rfd2l0aF9wYXJ0aWFsX2Z1bmN0aW9uX2FwcGxpY2F0aW9uKS4KICoKICogQHBhcmFtIHtPYmplY3R9IHNlbGYgQ29udGV4dCB3aGljaCBgZm5gIHNob3VsZCBiZSBldmFsdWF0ZWQgaW4uCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gRnVuY3Rpb24gdG8gYmUgYm91bmQuCiAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBhcmd1bWVudHMgdG8gYmUgcHJlYm91bmQgdG8gdGhlIGBmbmAgZnVuY3Rpb24gY2FsbC4KICogQHJldHVybnMge2Z1bmN0aW9uKCl9IEZ1bmN0aW9uIHRoYXQgd3JhcHMgdGhlIGBmbmAgd2l0aCBhbGwgdGhlIHNwZWNpZmllZCBiaW5kaW5ncy4KICovCi8qIGpzaGludCArVzEwMSAqLwpmdW5jdGlvbiBiaW5kKHNlbGYsIGZuKSB7CiAgdmFyIGN1cnJ5QXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gc2xpY2VBcmdzKGFyZ3VtZW50cywgMikgOiBbXTsKICBpZiAoaXNGdW5jdGlvbihmbikgJiYgIShmbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHsKICAgIHJldHVybiBjdXJyeUFyZ3MubGVuZ3RoCiAgICAgID8gZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aAogICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGN1cnJ5QXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKSkKICAgICAgICAgICAgOiBmbi5hcHBseShzZWxmLCBjdXJyeUFyZ3MpOwogICAgICAgIH0KICAgICAgOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoCiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKQogICAgICAgICAgICA6IGZuLmNhbGwoc2VsZik7CiAgICAgICAgfTsKICB9IGVsc2UgewogICAgLy8gaW4gSUUsIG5hdGl2ZSBtZXRob2RzIGFyZSBub3QgZnVuY3Rpb25zIHNvIHRoZXkgY2Fubm90IGJlIGJvdW5kIChub3RlOiB0aGV5IGRvbid0IG5lZWQgdG8gYmUpCiAgICByZXR1cm4gZm47CiAgfQp9CgoKZnVuY3Rpb24gdG9Kc29uUmVwbGFjZXIoa2V5LCB2YWx1ZSkgewogIHZhciB2YWwgPSB2YWx1ZTsKCiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICckJyAmJiBrZXkuY2hhckF0KDEpID09PSAnJCcpIHsKICAgIHZhbCA9IHVuZGVmaW5lZDsKICB9IGVsc2UgaWYgKGlzV2luZG93KHZhbHVlKSkgewogICAgdmFsID0gJyRXSU5ET1cnOwogIH0gZWxzZSBpZiAodmFsdWUgJiYgIGRvY3VtZW50ID09PSB2YWx1ZSkgewogICAgdmFsID0gJyRET0NVTUVOVCc7CiAgfSBlbHNlIGlmIChpc1Njb3BlKHZhbHVlKSkgewogICAgdmFsID0gJyRTQ09QRSc7CiAgfQoKICByZXR1cm4gdmFsOwp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLnRvSnNvbgogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTZXJpYWxpemVzIGlucHV0IGludG8gYSBKU09OLWZvcm1hdHRlZCBzdHJpbmcuIFByb3BlcnRpZXMgd2l0aCBsZWFkaW5nICQkIGNoYXJhY3RlcnMgd2lsbCBiZQogKiBzdHJpcHBlZCBzaW5jZSBhbmd1bGFyIHVzZXMgdGhpcyBub3RhdGlvbiBpbnRlcm5hbGx5LgogKgogKiBAcGFyYW0ge09iamVjdHxBcnJheXxEYXRlfHN0cmluZ3xudW1iZXJ9IG9iaiBJbnB1dCB0byBiZSBzZXJpYWxpemVkIGludG8gSlNPTi4KICogQHBhcmFtIHtib29sZWFuPX0gcHJldHR5IElmIHNldCB0byB0cnVlLCB0aGUgSlNPTiBvdXRwdXQgd2lsbCBjb250YWluIG5ld2xpbmVzIGFuZCB3aGl0ZXNwYWNlLgogKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gSlNPTi1pZmllZCBzdHJpbmcgcmVwcmVzZW50aW5nIGBvYmpgLgogKi8KZnVuY3Rpb24gdG9Kc29uKG9iaiwgcHJldHR5KSB7CiAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdW5kZWZpbmVkOwogIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIHRvSnNvblJlcGxhY2VyLCBwcmV0dHkgPyAnICAnIDogbnVsbCk7Cn0KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuZnJvbUpzb24KICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGVzZXJpYWxpemVzIGEgSlNPTiBzdHJpbmcuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIEpTT04gc3RyaW5nIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fHN0cmluZ3xudW1iZXJ9IERlc2VyaWFsaXplZCB0aGluZ3kuCiAqLwpmdW5jdGlvbiBmcm9tSnNvbihqc29uKSB7CiAgcmV0dXJuIGlzU3RyaW5nKGpzb24pCiAgICAgID8gSlNPTi5wYXJzZShqc29uKQogICAgICA6IGpzb247Cn0KCgovKioKICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlbGVtZW50LgogKi8KZnVuY3Rpb24gc3RhcnRpbmdUYWcoZWxlbWVudCkgewogIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCkuY2xvbmUoKTsKICB0cnkgewogICAgLy8gdHVybnMgb3V0IElFIGRvZXMgbm90IGxldCB5b3Ugc2V0IC5odG1sKCkgb24gZWxlbWVudHMgd2hpY2gKICAgIC8vIGFyZSBub3QgYWxsb3dlZCB0byBoYXZlIGNoaWxkcmVuLiBTbyB3ZSBqdXN0IGlnbm9yZSBpdC4KICAgIGVsZW1lbnQuZW1wdHkoKTsKICB9IGNhdGNoKGUpIHt9CiAgdmFyIGVsZW1IdG1sID0ganFMaXRlKCc8ZGl2PicpLmFwcGVuZChlbGVtZW50KS5odG1sKCk7CiAgdHJ5IHsKICAgIHJldHVybiBlbGVtZW50WzBdLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCA/IGxvd2VyY2FzZShlbGVtSHRtbCkgOgogICAgICAgIGVsZW1IdG1sLgogICAgICAgICAgbWF0Y2goL14oPFtePl0rPikvKVsxXS4KICAgICAgICAgIHJlcGxhY2UoL148KFtcd1wtXSspLywgZnVuY3Rpb24obWF0Y2gsIG5vZGVOYW1lKSB7IHJldHVybiAnPCcgKyBsb3dlcmNhc2Uobm9kZU5hbWUpOyB9KTsKICB9IGNhdGNoKGUpIHsKICAgIHJldHVybiBsb3dlcmNhc2UoZWxlbUh0bWwpOwogIH0KCn0KCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovKioKICogVHJpZXMgdG8gZGVjb2RlIHRoZSBVUkkgY29tcG9uZW50IHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0gc3RyIHZhbHVlIHBvdGVudGlhbCBVUkkgY29tcG9uZW50IHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGNhbiBiZSBkZWNvZGVkCiAqIHdpdGggdGhlIGRlY29kZVVSSUNvbXBvbmVudCBmdW5jdGlvbi4KICovCmZ1bmN0aW9uIHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgewogIHRyeSB7CiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKICB9IGNhdGNoKGUpIHsKICAgIC8vIElnbm9yZSBhbnkgaW52YWxpZCB1cmkgY29tcG9uZW50CiAgfQp9CgoKLyoqCiAqIFBhcnNlcyBhbiBlc2NhcGVkIHVybCBxdWVyeSBzdHJpbmcgaW50byBrZXktdmFsdWUgcGFpcnMuCiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZyxib29sZWFufEFycmF5Pn0KICovCmZ1bmN0aW9uIHBhcnNlS2V5VmFsdWUoLyoqc3RyaW5nKi9rZXlWYWx1ZSkgewogIHZhciBvYmogPSB7fSwga2V5X3ZhbHVlLCBrZXk7CiAgZm9yRWFjaCgoa2V5VmFsdWUgfHwgIiIpLnNwbGl0KCcmJyksIGZ1bmN0aW9uKGtleVZhbHVlKSB7CiAgICBpZiAoIGtleVZhbHVlICkgewogICAgICBrZXlfdmFsdWUgPSBrZXlWYWx1ZS5yZXBsYWNlKC9cKy9nLCclMjAnKS5zcGxpdCgnPScpOwogICAgICBrZXkgPSB0cnlEZWNvZGVVUklDb21wb25lbnQoa2V5X3ZhbHVlWzBdKTsKICAgICAgaWYgKCBpc0RlZmluZWQoa2V5KSApIHsKICAgICAgICB2YXIgdmFsID0gaXNEZWZpbmVkKGtleV92YWx1ZVsxXSkgPyB0cnlEZWNvZGVVUklDb21wb25lbnQoa2V5X3ZhbHVlWzFdKSA6IHRydWU7CiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgb2JqW2tleV0gPSB2YWw7CiAgICAgICAgfSBlbHNlIGlmKGlzQXJyYXkob2JqW2tleV0pKSB7CiAgICAgICAgICBvYmpba2V5XS5wdXNoKHZhbCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG9ialtrZXldID0gW29ialtrZXldLHZhbF07CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSk7CiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gdG9LZXlWYWx1ZShvYmopIHsKICB2YXIgcGFydHMgPSBbXTsKICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7CiAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKGFycmF5VmFsdWUpIHsKICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgKwogICAgICAgICAgICAgICAgICAgKGFycmF5VmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KGFycmF5VmFsdWUsIHRydWUpKSk7CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArCiAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogJz0nICsgZW5jb2RlVXJpUXVlcnkodmFsdWUsIHRydWUpKSk7CiAgICB9CiAgfSk7CiAgcmV0dXJuIHBhcnRzLmxlbmd0aCA/IHBhcnRzLmpvaW4oJyYnKSA6ICcnOwp9CgoKLyoqCiAqIFdlIG5lZWQgb3VyIGN1c3RvbSBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGRvZXNuJ3QgZm9sbG93CiAqIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0IHdpdGggcmVnYXJkcyB0byB0aGUgY2hhcmFjdGVyIHNldCAocGNoYXIpIGFsbG93ZWQgaW4gcGF0aAogKiBzZWdtZW50czoKICogICAgc2VnbWVudCAgICAgICA9ICpwY2hhcgogKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvICI6IiAvICJAIgogKiAgICBwY3QtZW5jb2RlZCAgID0gIiUiIEhFWERJRyBIRVhESUcKICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyAiLSIgLyAiLiIgLyAiXyIgLyAifiIKICogICAgc3ViLWRlbGltcyAgICA9ICIhIiAvICIkIiAvICImIiAvICInIiAvICIoIiAvICIpIgogKiAgICAgICAgICAgICAgICAgICAgIC8gIioiIC8gIisiIC8gIiwiIC8gIjsiIC8gIj0iCiAqLwpmdW5jdGlvbiBlbmNvZGVVcmlTZWdtZW50KHZhbCkgewogIHJldHVybiBlbmNvZGVVcmlRdWVyeSh2YWwsIHRydWUpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTI2L2dpLCAnJicpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTNEL2dpLCAnPScpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTJCL2dpLCAnKycpOwp9CgoKLyoqCiAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBlbmNvZGluZyAqa2V5KiBvciAqdmFsdWUqIHBhcnRzIG9mIHF1ZXJ5IGNvbXBvbmVudC4gV2UgbmVlZCBhIGN1c3RvbQogKiBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGVuY29kZXMgc3R1ZmYgdGhhdCBkb2Vzbid0IGhhdmUgdG8gYmUKICogZW5jb2RlZCBwZXIgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NjoKICogICAgcXVlcnkgICAgICAgPSAqKCBwY2hhciAvICIvIiAvICI/IiApCiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gIjoiIC8gIkAiCiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gIi0iIC8gIi4iIC8gIl8iIC8gIn4iCiAqICAgIHBjdC1lbmNvZGVkICAgPSAiJSIgSEVYRElHIEhFWERJRwogKiAgICBzdWItZGVsaW1zICAgID0gIiEiIC8gIiQiIC8gIiYiIC8gIiciIC8gIigiIC8gIikiCiAqICAgICAgICAgICAgICAgICAgICAgLyAiKiIgLyAiKyIgLyAiLCIgLyAiOyIgLyAiPSIKICovCmZ1bmN0aW9uIGVuY29kZVVyaVF1ZXJ5KHZhbCwgcGN0RW5jb2RlU3BhY2VzKSB7CiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTI0L2csICckJykuCiAgICAgICAgICAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuCiAgICAgICAgICAgICByZXBsYWNlKC8lM0IvZ2ksICc7JykuCiAgICAgICAgICAgICByZXBsYWNlKC8lMjAvZywgKHBjdEVuY29kZVNwYWNlcyA/ICclMjAnIDogJysnKSk7Cn0KCnZhciBuZ0F0dHJQcmVmaXhlcyA9IFsnbmctJywgJ2RhdGEtbmctJywgJ25nOicsICd4LW5nLSddOwoKZnVuY3Rpb24gZ2V0TmdBdHRyaWJ1dGUoZWxlbWVudCwgbmdBdHRyKSB7CiAgdmFyIGF0dHIsIGksIGlpID0gbmdBdHRyUHJlZml4ZXMubGVuZ3RoOwogIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7CiAgZm9yIChpPTA7IGk8aWk7ICsraSkgewogICAgYXR0ciA9IG5nQXR0clByZWZpeGVzW2ldICsgbmdBdHRyOwogICAgaWYgKGlzU3RyaW5nKGF0dHIgPSBlbGVtZW50LmF0dHIoYXR0cikpKSB7CiAgICAgIHJldHVybiBhdHRyOwogICAgfQogIH0KICByZXR1cm4gbnVsbDsKfQoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdBcHAKICogQG1vZHVsZSBuZwogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHthbmd1bGFyLk1vZHVsZX0gbmdBcHAgYW4gb3B0aW9uYWwgYXBwbGljYXRpb24KICogICB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlfSBuYW1lIHRvIGxvYWQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nU3RyaWN0RGkgaWYgdGhpcyBhdHRyaWJ1dGUgaXMgcHJlc2VudCBvbiB0aGUgYXBwIGVsZW1lbnQsIHRoZSBpbmplY3RvciB3aWxsIGJlCiAqICAgY3JlYXRlZCBpbiAic3RyaWN0LWRpIiBtb2RlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGFwcGxpY2F0aW9uIHdpbGwgZmFpbCB0byBpbnZva2UgZnVuY3Rpb25zIHdoaWNoCiAqICAgZG8gbm90IHVzZSBleHBsaWNpdCBmdW5jdGlvbiBhbm5vdGF0aW9uIChhbmQgYXJlIHRodXMgdW5zdWl0YWJsZSBmb3IgbWluaWZpY2F0aW9uKSwgYXMgZGVzY3JpYmVkCiAqICAgaW4ge0BsaW5rIGd1aWRlL2RpIHRoZSBEZXBlbmRlbmN5IEluamVjdGlvbiBndWlkZX0sIGFuZCB1c2VmdWwgZGVidWdnaW5nIGluZm8gd2lsbCBhc3Npc3QgaW4KICogICB0cmFja2luZyBkb3duIHRoZSByb290IG9mIHRoZXNlIGJ1Z3MuCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBVc2UgdGhpcyBkaXJlY3RpdmUgdG8gKiphdXRvLWJvb3RzdHJhcCoqIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbi4gVGhlIGBuZ0FwcGAgZGlyZWN0aXZlCiAqIGRlc2lnbmF0ZXMgdGhlICoqcm9vdCBlbGVtZW50Kiogb2YgdGhlIGFwcGxpY2F0aW9uIGFuZCBpcyB0eXBpY2FsbHkgcGxhY2VkIG5lYXIgdGhlIHJvb3QgZWxlbWVudAogKiBvZiB0aGUgcGFnZSAtIGUuZy4gb24gdGhlIGA8Ym9keT5gIG9yIGA8aHRtbD5gIHRhZ3MuCiAqCiAqIE9ubHkgb25lIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBjYW4gYmUgYXV0by1ib290c3RyYXBwZWQgcGVyIEhUTUwgZG9jdW1lbnQuIFRoZSBmaXJzdCBgbmdBcHBgCiAqIGZvdW5kIGluIHRoZSBkb2N1bWVudCB3aWxsIGJlIHVzZWQgdG8gZGVmaW5lIHRoZSByb290IGVsZW1lbnQgdG8gYXV0by1ib290c3RyYXAgYXMgYW4KICogYXBwbGljYXRpb24uIFRvIHJ1biBtdWx0aXBsZSBhcHBsaWNhdGlvbnMgaW4gYW4gSFRNTCBkb2N1bWVudCB5b3UgbXVzdCBtYW51YWxseSBib290c3RyYXAgdGhlbSB1c2luZwogKiB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9IGluc3RlYWQuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbnMgY2Fubm90IGJlIG5lc3RlZCB3aXRoaW4gZWFjaCBvdGhlci4KICoKICogWW91IGNhbiBzcGVjaWZ5IGFuICoqQW5ndWxhckpTIG1vZHVsZSoqIHRvIGJlIHVzZWQgYXMgdGhlIHJvb3QgbW9kdWxlIGZvciB0aGUgYXBwbGljYXRpb24uICBUaGlzCiAqIG1vZHVsZSB3aWxsIGJlIGxvYWRlZCBpbnRvIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3J9IHdoZW4gdGhlIGFwcGxpY2F0aW9uIGlzIGJvb3RzdHJhcHBlZCBhbmQKICogc2hvdWxkIGNvbnRhaW4gdGhlIGFwcGxpY2F0aW9uIGNvZGUgbmVlZGVkIG9yIGhhdmUgZGVwZW5kZW5jaWVzIG9uIG90aGVyIG1vZHVsZXMgdGhhdCB3aWxsCiAqIGNvbnRhaW4gdGhlIGNvZGUuIFNlZSB7QGxpbmsgYW5ndWxhci5tb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLgogKgogKiBJbiB0aGUgZXhhbXBsZSBiZWxvdyBpZiB0aGUgYG5nQXBwYCBkaXJlY3RpdmUgd2VyZSBub3QgcGxhY2VkIG9uIHRoZSBgaHRtbGAgZWxlbWVudCB0aGVuIHRoZQogKiBkb2N1bWVudCB3b3VsZCBub3QgYmUgY29tcGlsZWQsIHRoZSBgQXBwQ29udHJvbGxlcmAgd291bGQgbm90IGJlIGluc3RhbnRpYXRlZCBhbmQgdGhlIGB7eyBhK2IgfX1gCiAqIHdvdWxkIG5vdCBiZSByZXNvbHZlZCB0byBgM2AuCiAqCiAqIGBuZ0FwcGAgaXMgdGhlIGVhc2llc3QsIGFuZCBtb3N0IGNvbW1vbiwgd2F5IHRvIGJvb3RzdHJhcCBhbiBhcHBsaWNhdGlvbi4KICoKIDxleGFtcGxlIG1vZHVsZT0ibmdBcHBEZW1vIj4KICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgIDxkaXYgbmctY29udHJvbGxlcj0ibmdBcHBEZW1vQ29udHJvbGxlciI+CiAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fQogICA8L2Rpdj4KICAgPC9maWxlPgogICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICBhbmd1bGFyLm1vZHVsZSgnbmdBcHBEZW1vJywgW10pLmNvbnRyb2xsZXIoJ25nQXBwRGVtb0NvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAkc2NvcGUuYSA9IDE7CiAgICAgJHNjb3BlLmIgPSAyOwogICB9KTsKICAgPC9maWxlPgogPC9leGFtcGxlPgogKgogKiBVc2luZyBgbmdTdHJpY3REaWAsIHlvdSB3b3VsZCBzZWUgc29tZXRoaW5nIGxpa2UgdGhpczoKICoKIDxleGFtcGxlIG5nLWFwcC1pbmNsdWRlZD0idHJ1ZSI+CiAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICA8ZGl2IG5nLWFwcD0ibmdBcHBTdHJpY3REZW1vIiBuZy1zdHJpY3QtZGk+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9Ikdvb2RDb250cm9sbGVyMSI+CiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fQoKICAgICAgICAgICA8cD5UaGlzIHJlbmRlcnMgYmVjYXVzZSB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBmYWlsIHRvCiAgICAgICAgICAgICAgaW5zdGFudGlhdGUsIGJ5IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gc3R5bGUgKHNlZQogICAgICAgICAgICAgIHNjcmlwdC5qcyBmb3IgZGV0YWlscykKICAgICAgICAgICA8L3A+CiAgICAgICA8L2Rpdj4KCiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9Ikdvb2RDb250cm9sbGVyMiI+CiAgICAgICAgICAgTmFtZTogPGlucHV0IG5nLW1vZGVsPSJuYW1lIj48YnIgLz4KICAgICAgICAgICBIZWxsbywge3tuYW1lfX0hCgogICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG8KICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZQogICAgICAgICAgICAgIChzZWUgc2NyaXB0LmpzIGZvciBkZXRhaWxzKQogICAgICAgICAgIDwvcD4KICAgICAgIDwvZGl2PgoKICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQmFkQ29udHJvbGxlciI+CiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fQoKICAgICAgICAgICA8cD5UaGUgY29udHJvbGxlciBjb3VsZCBub3QgYmUgaW5zdGFudGlhdGVkLCBkdWUgdG8gcmVseWluZwogICAgICAgICAgICAgIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9ucyAod2hpY2ggYXJlIGRpc2FibGVkIGluCiAgICAgICAgICAgICAgc3RyaWN0IG1vZGUpLiBBcyBzdWNoLCB0aGUgY29udGVudCBvZiB0aGlzIHNlY3Rpb24gaXMgbm90CiAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkLCBhbmQgdGhlcmUgc2hvdWxkIGJlIGFuIGVycm9yIGluIHlvdXIgd2ViIGNvbnNvbGUuCiAgICAgICAgICAgPC9wPgogICAgICAgPC9kaXY+CiAgIDwvZGl2PgogICA8L2ZpbGU+CiAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgIGFuZ3VsYXIubW9kdWxlKCduZ0FwcFN0cmljdERlbW8nLCBbXSkKICAgICAvLyBCYWRDb250cm9sbGVyIHdpbGwgZmFpbCB0byBpbnN0YW50aWF0ZSwgZHVlIHRvIHJlbHlpbmcgb24gYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24sCiAgICAgLy8gcmF0aGVyIHRoYW4gYW4gZXhwbGljaXQgYW5ub3RhdGlvbgogICAgIC5jb250cm9sbGVyKCdCYWRDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAkc2NvcGUuYSA9IDE7CiAgICAgICAkc2NvcGUuYiA9IDI7CiAgICAgfSkKICAgICAvLyBVbmxpa2UgQmFkQ29udHJvbGxlciwgR29vZENvbnRyb2xsZXIxIGFuZCBHb29kQ29udHJvbGxlcjIgd2lsbCBub3QgZmFpbCB0byBiZSBpbnN0YW50aWF0ZWQsCiAgICAgLy8gZHVlIHRvIHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb25zIHVzaW5nIHRoZSBhcnJheSBzdHlsZSBhbmQgJGluamVjdCBwcm9wZXJ0eSwgcmVzcGVjdGl2ZWx5LgogICAgIC5jb250cm9sbGVyKCdHb29kQ29udHJvbGxlcjEnLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgJHNjb3BlLmEgPSAxOwogICAgICAgJHNjb3BlLmIgPSAyOwogICAgIH1dKQogICAgIC5jb250cm9sbGVyKCdHb29kQ29udHJvbGxlcjInLCBHb29kQ29udHJvbGxlcjIpOwogICAgIGZ1bmN0aW9uIEdvb2RDb250cm9sbGVyMigkc2NvcGUpIHsKICAgICAgICRzY29wZS5uYW1lID0gIldvcmxkIjsKICAgICB9CiAgICAgR29vZENvbnRyb2xsZXIyLiRpbmplY3QgPSBbJyRzY29wZSddOwogICA8L2ZpbGU+CiAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgIGRpdltuZy1jb250cm9sbGVyXSB7CiAgICAgICBtYXJnaW4tYm90dG9tOiAxZW07CiAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDRweDsKICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDsKICAgICAgIGJvcmRlcjogMXB4IHNvbGlkOwogICAgICAgcGFkZGluZzogLjVlbTsKICAgfQogICBkaXZbbmctY29udHJvbGxlcl49R29vZF0gewogICAgICAgYm9yZGVyLWNvbG9yOiAjZDZlOWM2OwogICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RmZjBkODsKICAgICAgIGNvbG9yOiAjM2M3NjNkOwogICB9CiAgIGRpdltuZy1jb250cm9sbGVyXj1CYWRdIHsKICAgICAgIGJvcmRlci1jb2xvcjogI2ViY2NkMTsKICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmRlZGU7CiAgICAgICBjb2xvcjogI2E5NDQ0MjsKICAgICAgIG1hcmdpbi1ib3R0b206IDA7CiAgIH0KICAgPC9maWxlPgogPC9leGFtcGxlPgogKi8KZnVuY3Rpb24gYW5ndWxhckluaXQoZWxlbWVudCwgYm9vdHN0cmFwKSB7CiAgdmFyIGFwcEVsZW1lbnQsCiAgICAgIG1vZHVsZSwKICAgICAgY29uZmlnID0ge307CgogIC8vIFRoZSBlbGVtZW50IGBlbGVtZW50YCBoYXMgcHJpb3JpdHkgb3ZlciBhbnkgb3RoZXIgZWxlbWVudAogIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkgewogICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJzsKCiAgICBpZiAoIWFwcEVsZW1lbnQgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSkpIHsKICAgICAgYXBwRWxlbWVudCA9IGVsZW1lbnQ7CiAgICAgIG1vZHVsZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpOwogICAgfQogIH0pOwogIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkgewogICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJzsKICAgIHZhciBjYW5kaWRhdGU7CgogICAgaWYgKCFhcHBFbGVtZW50ICYmIChjYW5kaWRhdGUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgbmFtZS5yZXBsYWNlKCc6JywgJ1xcOicpICsgJ10nKSkpIHsKICAgICAgYXBwRWxlbWVudCA9IGNhbmRpZGF0ZTsKICAgICAgbW9kdWxlID0gY2FuZGlkYXRlLmdldEF0dHJpYnV0ZShuYW1lKTsKICAgIH0KICB9KTsKICBpZiAoYXBwRWxlbWVudCkgewogICAgY29uZmlnLnN0cmljdERpID0gZ2V0TmdBdHRyaWJ1dGUoYXBwRWxlbWVudCwgInN0cmljdC1kaSIpICE9PSBudWxsOwogICAgYm9vdHN0cmFwKGFwcEVsZW1lbnQsIG1vZHVsZSA/IFttb2R1bGVdIDogW10sIGNvbmZpZyk7CiAgfQp9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuYm9vdHN0cmFwCiAqIEBtb2R1bGUgbmcKICogQGRlc2NyaXB0aW9uCiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN0YXJ0IHVwIGFuZ3VsYXIgYXBwbGljYXRpb24uCiAqCiAqIFNlZToge0BsaW5rIGd1aWRlL2Jvb3RzdHJhcCBCb290c3RyYXB9CiAqCiAqIE5vdGUgdGhhdCBQcm90cmFjdG9yIGJhc2VkIGVuZC10by1lbmQgdGVzdHMgY2Fubm90IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGJvb3RzdHJhcCBtYW51YWxseS4KICogVGhleSBtdXN0IHVzZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfS4KICoKICogQW5ndWxhciB3aWxsIGRldGVjdCBpZiBpdCBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgYnJvd3NlciBtb3JlIHRoYW4gb25jZSBhbmQgb25seSBhbGxvdyB0aGUKICogZmlyc3QgbG9hZGVkIHNjcmlwdCB0byBiZSBib290c3RyYXBwZWQgYW5kIHdpbGwgcmVwb3J0IGEgd2FybmluZyB0byB0aGUgYnJvd3NlciBjb25zb2xlIGZvcgogKiBlYWNoIG9mIHRoZSBzdWJzZXF1ZW50IHNjcmlwdHMuIFRoaXMgcHJldmVudHMgc3RyYW5nZSByZXN1bHRzIGluIGFwcGxpY2F0aW9ucywgd2hlcmUgb3RoZXJ3aXNlCiAqIG11bHRpcGxlIGluc3RhbmNlcyBvZiBBbmd1bGFyIHRyeSB0byB3b3JrIG9uIHRoZSBET00uCiAqCiAqIGBgYGh0bWwKICogPCFkb2N0eXBlIGh0bWw+CiAqIDxodG1sPgogKiA8Ym9keT4KICogPGRpdiBuZy1jb250cm9sbGVyPSJXZWxjb21lQ29udHJvbGxlciI+CiAqICAge3tncmVldGluZ319CiAqIDwvZGl2PgogKgogKiA8c2NyaXB0IHNyYz0iYW5ndWxhci5qcyI+PC9zY3JpcHQ+CiAqIDxzY3JpcHQ+CiAqICAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdkZW1vJywgW10pCiAqICAgLmNvbnRyb2xsZXIoJ1dlbGNvbWVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAqICAgICAgICRzY29wZS5ncmVldGluZyA9ICdXZWxjb21lISc7CiAqICAgfSk7CiAqICAgYW5ndWxhci5ib290c3RyYXAoZG9jdW1lbnQsIFsnZGVtbyddKTsKICogPC9zY3JpcHQ+CiAqIDwvYm9keT4KICogPC9odG1sPgogKiBgYGAKICoKICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uCiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfEZ1bmN0aW9ufEFycmF5Pj19IG1vZHVsZXMgYW4gYXJyYXkgb2YgbW9kdWxlcyB0byBsb2FkIGludG8gdGhlIGFwcGxpY2F0aW9uLgogKiAgICAgRWFjaCBpdGVtIGluIHRoZSBhcnJheSBzaG91bGQgYmUgdGhlIG5hbWUgb2YgYSBwcmVkZWZpbmVkIG1vZHVsZSBvciBhIChESSBhbm5vdGF0ZWQpCiAqICAgICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBieSB0aGUgaW5qZWN0b3IgYXMgYSBydW4gYmxvY2suCiAqICAgICBTZWU6IHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfQogKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBhbiBvYmplY3QgZm9yIGRlZmluaW5nIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGFwcGxpY2F0aW9uLiBUaGUKICogICAgIGZvbGxvd2luZyBrZXlzIGFyZSBzdXBwb3J0ZWQ6CiAqCiAqICAgICAtIGBzdHJpY3REaWA6IGRpc2FibGUgYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhpcyBpcyBtZWFudCB0bwogKiAgICAgICBhc3Npc3QgaW4gZmluZGluZyBidWdzIHdoaWNoIGJyZWFrIG1pbmlmaWVkIGNvZGUuCiAqCiAqIEByZXR1cm5zIHthdXRvLiRpbmplY3Rvcn0gUmV0dXJucyB0aGUgbmV3bHkgY3JlYXRlZCBpbmplY3RvciBmb3IgdGhpcyBhcHAuCiAqLwpmdW5jdGlvbiBib290c3RyYXAoZWxlbWVudCwgbW9kdWxlcywgY29uZmlnKSB7CiAgaWYgKCFpc09iamVjdChjb25maWcpKSBjb25maWcgPSB7fTsKICB2YXIgZGVmYXVsdENvbmZpZyA9IHsKICAgIHN0cmljdERpOiBmYWxzZQogIH07CiAgY29uZmlnID0gZXh0ZW5kKGRlZmF1bHRDb25maWcsIGNvbmZpZyk7CiAgdmFyIGRvQm9vdHN0cmFwID0gZnVuY3Rpb24oKSB7CiAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpOwoKICAgIGlmIChlbGVtZW50LmluamVjdG9yKCkpIHsKICAgICAgdmFyIHRhZyA9IChlbGVtZW50WzBdID09PSBkb2N1bWVudCkgPyAnZG9jdW1lbnQnIDogc3RhcnRpbmdUYWcoZWxlbWVudCk7CiAgICAgIC8vRW5jb2RlIGFuZ2xlIGJyYWNrZXRzIHRvIHByZXZlbnQgaW5wdXQgZnJvbSBiZWluZyBzYW5pdGl6ZWQgdG8gZW1wdHkgc3RyaW5nICM4NjgzCiAgICAgIHRocm93IG5nTWluRXJyKAogICAgICAgICAgJ2J0c3RycGQnLAogICAgICAgICAgIkFwcCBBbHJlYWR5IEJvb3RzdHJhcHBlZCB3aXRoIHRoaXMgRWxlbWVudCAnezB9JyIsCiAgICAgICAgICB0YWcucmVwbGFjZSgvPC8sJyZsdDsnKS5yZXBsYWNlKC8+LywnJmd0OycpKTsKICAgIH0KCiAgICBtb2R1bGVzID0gbW9kdWxlcyB8fCBbXTsKICAgIG1vZHVsZXMudW5zaGlmdChbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHsKICAgICAgJHByb3ZpZGUudmFsdWUoJyRyb290RWxlbWVudCcsIGVsZW1lbnQpOwogICAgfV0pOwoKICAgIGlmIChjb25maWcuZGVidWdJbmZvRW5hYmxlZCkgewogICAgICAvLyBQdXNoaW5nIHNvIHRoYXQgdGhpcyBvdmVycmlkZXMgYGRlYnVnSW5mb0VuYWJsZWRgIHNldHRpbmcgZGVmaW5lZCBpbiB1c2VyJ3MgYG1vZHVsZXNgLgogICAgICBtb2R1bGVzLnB1c2goWyckY29tcGlsZVByb3ZpZGVyJywgZnVuY3Rpb24oJGNvbXBpbGVQcm92aWRlcikgewogICAgICAgICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZCh0cnVlKTsKICAgICAgfV0pOwogICAgfQoKICAgIG1vZHVsZXMudW5zaGlmdCgnbmcnKTsKICAgIHZhciBpbmplY3RvciA9IGNyZWF0ZUluamVjdG9yKG1vZHVsZXMsIGNvbmZpZy5zdHJpY3REaSk7CiAgICBpbmplY3Rvci5pbnZva2UoWyckcm9vdFNjb3BlJywgJyRyb290RWxlbWVudCcsICckY29tcGlsZScsICckaW5qZWN0b3InLAogICAgICAgZnVuY3Rpb24gYm9vdHN0cmFwQXBwbHkoc2NvcGUsIGVsZW1lbnQsIGNvbXBpbGUsIGluamVjdG9yKSB7CiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgZWxlbWVudC5kYXRhKCckaW5qZWN0b3InLCBpbmplY3Rvcik7CiAgICAgICAgICBjb21waWxlKGVsZW1lbnQpKHNjb3BlKTsKICAgICAgICB9KTsKICAgICAgfV0KICAgICk7CiAgICByZXR1cm4gaW5qZWN0b3I7CiAgfTsKCiAgdmFyIE5HX0VOQUJMRV9ERUJVR19JTkZPID0gL15OR19FTkFCTEVfREVCVUdfSU5GTyEvOwogIHZhciBOR19ERUZFUl9CT09UU1RSQVAgPSAvXk5HX0RFRkVSX0JPT1RTVFJBUCEvOwoKICBpZiAod2luZG93ICYmIE5HX0VOQUJMRV9ERUJVR19JTkZPLnRlc3Qod2luZG93Lm5hbWUpKSB7CiAgICBjb25maWcuZGVidWdJbmZvRW5hYmxlZCA9IHRydWU7CiAgICB3aW5kb3cubmFtZSA9IHdpbmRvdy5uYW1lLnJlcGxhY2UoTkdfRU5BQkxFX0RFQlVHX0lORk8sICcnKTsKICB9CgogIGlmICh3aW5kb3cgJiYgIU5HX0RFRkVSX0JPT1RTVFJBUC50ZXN0KHdpbmRvdy5uYW1lKSkgewogICAgcmV0dXJuIGRvQm9vdHN0cmFwKCk7CiAgfQoKICB3aW5kb3cubmFtZSA9IHdpbmRvdy5uYW1lLnJlcGxhY2UoTkdfREVGRVJfQk9PVFNUUkFQLCAnJyk7CiAgYW5ndWxhci5yZXN1bWVCb290c3RyYXAgPSBmdW5jdGlvbihleHRyYU1vZHVsZXMpIHsKICAgIGZvckVhY2goZXh0cmFNb2R1bGVzLCBmdW5jdGlvbihtb2R1bGUpIHsKICAgICAgbW9kdWxlcy5wdXNoKG1vZHVsZSk7CiAgICB9KTsKICAgIGRvQm9vdHN0cmFwKCk7CiAgfTsKfQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLnJlbG9hZFdpdGhEZWJ1Z0luZm8KICogQG1vZHVsZSBuZwogKiBAZGVzY3JpcHRpb24KICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gcmVsb2FkIHRoZSBjdXJyZW50IGFwcGxpY2F0aW9uIHdpdGggZGVidWcgaW5mb3JtYXRpb24gdHVybmVkIG9uLgogKiBUaGlzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBhIGNhbGwgdG8gYCRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZChmYWxzZSlgLgogKgogKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGVidWdJbmZvRW5hYmxlZH0gZm9yIG1vcmUuCiAqLwpmdW5jdGlvbiByZWxvYWRXaXRoRGVidWdJbmZvKCkgewogIHdpbmRvdy5uYW1lID0gJ05HX0VOQUJMRV9ERUJVR19JTkZPIScgKyB3aW5kb3cubmFtZTsKICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7Cn0KCi8qKgogKiBAbmFtZSBhbmd1bGFyLmdldFRlc3RhYmlsaXR5CiAqIEBtb2R1bGUgbmcKICogQGRlc2NyaXB0aW9uCiAqIEdldCB0aGUgdGVzdGFiaWxpdHkgc2VydmljZSBmb3IgdGhlIGluc3RhbmNlIG9mIEFuZ3VsYXIgb24gdGhlIGdpdmVuCiAqIGVsZW1lbnQuCiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCBET00gZWxlbWVudCB3aGljaCBpcyB0aGUgcm9vdCBvZiBhbmd1bGFyIGFwcGxpY2F0aW9uLgogKi8KZnVuY3Rpb24gZ2V0VGVzdGFiaWxpdHkocm9vdEVsZW1lbnQpIHsKICByZXR1cm4gYW5ndWxhci5lbGVtZW50KHJvb3RFbGVtZW50KS5pbmplY3RvcigpLmdldCgnJCR0ZXN0YWJpbGl0eScpOwp9Cgp2YXIgU05BS0VfQ0FTRV9SRUdFWFAgPSAvW0EtWl0vZzsKZnVuY3Rpb24gc25ha2VfY2FzZShuYW1lLCBzZXBhcmF0b3IpIHsKICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJ18nOwogIHJldHVybiBuYW1lLnJlcGxhY2UoU05BS0VfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7CiAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpOwogIH0pOwp9Cgp2YXIgYmluZEpRdWVyeUZpcmVkID0gZmFsc2U7CnZhciBza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YTsKZnVuY3Rpb24gYmluZEpRdWVyeSgpIHsKICB2YXIgb3JpZ2luYWxDbGVhbkRhdGE7CgogIGlmIChiaW5kSlF1ZXJ5RmlyZWQpIHsKICAgIHJldHVybjsKICB9CgogIC8vIGJpbmQgdG8galF1ZXJ5IGlmIHByZXNlbnQ7CiAgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTsKICAvLyBVc2UgalF1ZXJ5IGlmIGl0IGV4aXN0cyB3aXRoIHByb3BlciBmdW5jdGlvbmFsaXR5LCBvdGhlcndpc2UgZGVmYXVsdCB0byB1cy4KICAvLyBBbmd1bGFyIDEuMisgcmVxdWlyZXMgalF1ZXJ5IDEuNysgZm9yIG9uKCkvb2ZmKCkgc3VwcG9ydC4KICAvLyBBbmd1bGFyIDEuMysgdGVjaG5pY2FsbHkgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IDIuMSsgYnV0IGl0IG1heSB3b3JrIHdpdGggb2xkZXIKICAvLyB2ZXJzaW9ucy4gSXQgd2lsbCBub3Qgd29yayBmb3Igc3VyZSB3aXRoIGpRdWVyeSA8MS43LCB0aG91Z2guCiAgaWYgKGpRdWVyeSAmJiBqUXVlcnkuZm4ub24pIHsKICAgIGpxTGl0ZSA9IGpRdWVyeTsKICAgIGV4dGVuZChqUXVlcnkuZm4sIHsKICAgICAgc2NvcGU6IEpRTGl0ZVByb3RvdHlwZS5zY29wZSwKICAgICAgaXNvbGF0ZVNjb3BlOiBKUUxpdGVQcm90b3R5cGUuaXNvbGF0ZVNjb3BlLAogICAgICBjb250cm9sbGVyOiBKUUxpdGVQcm90b3R5cGUuY29udHJvbGxlciwKICAgICAgaW5qZWN0b3I6IEpRTGl0ZVByb3RvdHlwZS5pbmplY3RvciwKICAgICAgaW5oZXJpdGVkRGF0YTogSlFMaXRlUHJvdG90eXBlLmluaGVyaXRlZERhdGEKICAgIH0pOwoKICAgIC8vIEFsbCBub2RlcyByZW1vdmVkIGZyb20gdGhlIERPTSB2aWEgdmFyaW91cyBqUXVlcnkgQVBJcyBsaWtlIC5yZW1vdmUoKQogICAgLy8gYXJlIHBhc3NlZCB0aHJvdWdoIGpRdWVyeS5jbGVhbkRhdGEuIE1vbmtleS1wYXRjaCB0aGlzIG1ldGhvZCB0byBmaXJlCiAgICAvLyB0aGUgJGRlc3Ryb3kgZXZlbnQgb24gYWxsIHJlbW92ZWQgbm9kZXMuCiAgICBvcmlnaW5hbENsZWFuRGF0YSA9IGpRdWVyeS5jbGVhbkRhdGE7CiAgICBqUXVlcnkuY2xlYW5EYXRhID0gZnVuY3Rpb24oZWxlbXMpIHsKICAgICAgdmFyIGV2ZW50czsKICAgICAgaWYgKCFza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSkgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBlbGVtOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKyspIHsKICAgICAgICAgIGV2ZW50cyA9IGpRdWVyeS5fZGF0YShlbGVtLCAiZXZlbnRzIik7CiAgICAgICAgICBpZiAoZXZlbnRzICYmIGV2ZW50cy4kZGVzdHJveSkgewogICAgICAgICAgICBqUXVlcnkoZWxlbSkudHJpZ2dlckhhbmRsZXIoJyRkZXN0cm95Jyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhID0gZmFsc2U7CiAgICAgIH0KICAgICAgb3JpZ2luYWxDbGVhbkRhdGEoZWxlbXMpOwogICAgfTsKICB9IGVsc2UgewogICAganFMaXRlID0gSlFMaXRlOwogIH0KCiAgYW5ndWxhci5lbGVtZW50ID0ganFMaXRlOwoKICAvLyBQcmV2ZW50IGRvdWJsZS1wcm94eWluZy4KICBiaW5kSlF1ZXJ5RmlyZWQgPSB0cnVlOwp9CgovKioKICogdGhyb3cgZXJyb3IgaWYgdGhlIGFyZ3VtZW50IGlzIGZhbHN5LgogKi8KZnVuY3Rpb24gYXNzZXJ0QXJnKGFyZywgbmFtZSwgcmVhc29uKSB7CiAgaWYgKCFhcmcpIHsKICAgIHRocm93IG5nTWluRXJyKCdhcmVxJywgIkFyZ3VtZW50ICd7MH0nIGlzIHsxfSIsIChuYW1lIHx8ICc/JyksIChyZWFzb24gfHwgInJlcXVpcmVkIikpOwogIH0KICByZXR1cm4gYXJnOwp9CgpmdW5jdGlvbiBhc3NlcnRBcmdGbihhcmcsIG5hbWUsIGFjY2VwdEFycmF5QW5ub3RhdGlvbikgewogIGlmIChhY2NlcHRBcnJheUFubm90YXRpb24gJiYgaXNBcnJheShhcmcpKSB7CiAgICAgIGFyZyA9IGFyZ1thcmcubGVuZ3RoIC0gMV07CiAgfQoKICBhc3NlcnRBcmcoaXNGdW5jdGlvbihhcmcpLCBuYW1lLCAnbm90IGEgZnVuY3Rpb24sIGdvdCAnICsKICAgICAgKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyA/IGFyZy5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnIDogdHlwZW9mIGFyZykpOwogIHJldHVybiBhcmc7Cn0KCi8qKgogKiB0aHJvdyBlcnJvciBpZiB0aGUgbmFtZSBnaXZlbiBpcyBoYXNPd25Qcm9wZXJ0eQogKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgICAgdGhlIG5hbWUgdG8gdGVzdAogKiBAcGFyYW0gIHtTdHJpbmd9IGNvbnRleHQgdGhlIGNvbnRleHQgaW4gd2hpY2ggdGhlIG5hbWUgaXMgdXNlZCwgc3VjaCBhcyBtb2R1bGUgb3IgZGlyZWN0aXZlCiAqLwpmdW5jdGlvbiBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCBjb250ZXh0KSB7CiAgaWYgKG5hbWUgPT09ICdoYXNPd25Qcm9wZXJ0eScpIHsKICAgIHRocm93IG5nTWluRXJyKCdiYWRuYW1lJywgImhhc093blByb3BlcnR5IGlzIG5vdCBhIHZhbGlkIHswfSBuYW1lIiwgY29udGV4dCk7CiAgfQp9CgovKioKICogUmV0dXJuIHRoZSB2YWx1ZSBhY2Nlc3NpYmxlIGZyb20gdGhlIG9iamVjdCBieSBwYXRoLiBBbnkgdW5kZWZpbmVkIHRyYXZlcnNhbHMgYXJlIGlnbm9yZWQKICogQHBhcmFtIHtPYmplY3R9IG9iaiBzdGFydGluZyBvYmplY3QKICogQHBhcmFtIHtTdHJpbmd9IHBhdGggcGF0aCB0byB0cmF2ZXJzZQogKiBAcGFyYW0ge2Jvb2xlYW59IFtiaW5kRm5Ub1Njb3BlPXRydWVdCiAqIEByZXR1cm5zIHtPYmplY3R9IHZhbHVlIGFzIGFjY2Vzc2libGUgYnkgcGF0aAogKi8KLy9UT0RPKG1pc2tvKTogdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZW1vdmVkCmZ1bmN0aW9uIGdldHRlcihvYmosIHBhdGgsIGJpbmRGblRvU2NvcGUpIHsKICBpZiAoIXBhdGgpIHJldHVybiBvYmo7CiAgdmFyIGtleXMgPSBwYXRoLnNwbGl0KCcuJyk7CiAgdmFyIGtleTsKICB2YXIgbGFzdEluc3RhbmNlID0gb2JqOwogIHZhciBsZW4gPSBrZXlzLmxlbmd0aDsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAga2V5ID0ga2V5c1tpXTsKICAgIGlmIChvYmopIHsKICAgICAgb2JqID0gKGxhc3RJbnN0YW5jZSA9IG9iailba2V5XTsKICAgIH0KICB9CiAgaWYgKCFiaW5kRm5Ub1Njb3BlICYmIGlzRnVuY3Rpb24ob2JqKSkgewogICAgcmV0dXJuIGJpbmQobGFzdEluc3RhbmNlLCBvYmopOwogIH0KICByZXR1cm4gb2JqOwp9CgovKioKICogUmV0dXJuIHRoZSBET00gc2libGluZ3MgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3Qgbm9kZSBpbiB0aGUgZ2l2ZW4gYXJyYXkuCiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IGxpa2Ugb2JqZWN0CiAqIEByZXR1cm5zIHtqcUxpdGV9IGpxTGl0ZSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgdGhlIG5vZGVzCiAqLwpmdW5jdGlvbiBnZXRCbG9ja05vZGVzKG5vZGVzKSB7CiAgLy8gVE9ETyhwZXJmKToganVzdCBjaGVjayBpZiBhbGwgaXRlbXMgaW4gYG5vZGVzYCBhcmUgc2libGluZ3MgYW5kIGlmIHRoZXkgYXJlIHJldHVybiB0aGUgb3JpZ2luYWwKICAvLyAgICAgICAgICAgICBjb2xsZWN0aW9uLCBvdGhlcndpc2UgdXBkYXRlIHRoZSBvcmlnaW5hbCBjb2xsZWN0aW9uLgogIHZhciBub2RlID0gbm9kZXNbMF07CiAgdmFyIGVuZE5vZGUgPSBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXTsKICB2YXIgYmxvY2tOb2RlcyA9IFtub2RlXTsKCiAgZG8gewogICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7CiAgICBpZiAoIW5vZGUpIGJyZWFrOwogICAgYmxvY2tOb2Rlcy5wdXNoKG5vZGUpOwogIH0gd2hpbGUgKG5vZGUgIT09IGVuZE5vZGUpOwoKICByZXR1cm4ganFMaXRlKGJsb2NrTm9kZXMpOwp9CgoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGhvdXQgYSBwcm90b3R5cGUuIFRoaXMgb2JqZWN0IGlzIHVzZWZ1bCBmb3IgbG9va3VwIHdpdGhvdXQgaGF2aW5nIHRvCiAqIGd1YXJkIGFnYWluc3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdGVkIHByb3BlcnRpZXMgdmlhIGhhc093blByb3BlcnR5LgogKgogKiBSZWxhdGVkIG1pY3JvLWJlbmNobWFya3M6CiAqIC0gaHR0cDovL2pzcGVyZi5jb20vb2JqZWN0LWNyZWF0ZTIKICogLSBodHRwOi8vanNwZXJmLmNvbS9wcm90by1tYXAtbG9va3VwLzIKICogLSBodHRwOi8vanNwZXJmLmNvbS9mb3ItaW4tdnMtb2JqZWN0LWtleXMyCiAqCiAqIEByZXR1cm5zIHtPYmplY3R9CiAqLwpmdW5jdGlvbiBjcmVhdGVNYXAoKSB7CiAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7Cn0KCnZhciBOT0RFX1RZUEVfRUxFTUVOVCA9IDE7CnZhciBOT0RFX1RZUEVfVEVYVCA9IDM7CnZhciBOT0RFX1RZUEVfQ09NTUVOVCA9IDg7CnZhciBOT0RFX1RZUEVfRE9DVU1FTlQgPSA5Owp2YXIgTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UID0gMTE7CgovKioKICogQG5nZG9jIHR5cGUKICogQG5hbWUgYW5ndWxhci5Nb2R1bGUKICogQG1vZHVsZSBuZwogKiBAZGVzY3JpcHRpb24KICoKICogSW50ZXJmYWNlIGZvciBjb25maWd1cmluZyBhbmd1bGFyIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfS4KICovCgpmdW5jdGlvbiBzZXR1cE1vZHVsZUxvYWRlcih3aW5kb3cpIHsKCiAgdmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7CiAgdmFyIG5nTWluRXJyID0gbWluRXJyKCduZycpOwoKICBmdW5jdGlvbiBlbnN1cmUob2JqLCBuYW1lLCBmYWN0b3J5KSB7CiAgICByZXR1cm4gb2JqW25hbWVdIHx8IChvYmpbbmFtZV0gPSBmYWN0b3J5KCkpOwogIH0KCiAgdmFyIGFuZ3VsYXIgPSBlbnN1cmUod2luZG93LCAnYW5ndWxhcicsIE9iamVjdCk7CgogIC8vIFdlIG5lZWQgdG8gZXhwb3NlIGBhbmd1bGFyLiQkbWluRXJyYCB0byBtb2R1bGVzIHN1Y2ggYXMgYG5nUmVzb3VyY2VgIHRoYXQgcmVmZXJlbmNlIGl0IGR1cmluZyBib290c3RyYXAKICBhbmd1bGFyLiQkbWluRXJyID0gYW5ndWxhci4kJG1pbkVyciB8fCBtaW5FcnI7CgogIHJldHVybiBlbnN1cmUoYW5ndWxhciwgJ21vZHVsZScsIGZ1bmN0aW9uKCkgewogICAgLyoqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgYW5ndWxhci5Nb2R1bGU+fSAqLwogICAgdmFyIG1vZHVsZXMgPSB7fTsKCiAgICAvKioKICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICogQG5hbWUgYW5ndWxhci5tb2R1bGUKICAgICAqIEBtb2R1bGUgbmcKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICoKICAgICAqIFRoZSBgYW5ndWxhci5tb2R1bGVgIGlzIGEgZ2xvYmFsIHBsYWNlIGZvciBjcmVhdGluZywgcmVnaXN0ZXJpbmcgYW5kIHJldHJpZXZpbmcgQW5ndWxhcgogICAgICogbW9kdWxlcy4KICAgICAqIEFsbCBtb2R1bGVzIChhbmd1bGFyIGNvcmUgb3IgM3JkIHBhcnR5KSB0aGF0IHNob3VsZCBiZSBhdmFpbGFibGUgdG8gYW4gYXBwbGljYXRpb24gbXVzdCBiZQogICAgICogcmVnaXN0ZXJlZCB1c2luZyB0aGlzIG1lY2hhbmlzbS4KICAgICAqCiAgICAgKiBXaGVuIHBhc3NlZCB0d28gb3IgbW9yZSBhcmd1bWVudHMsIGEgbmV3IG1vZHVsZSBpcyBjcmVhdGVkLiAgSWYgcGFzc2VkIG9ubHkgb25lIGFyZ3VtZW50LCBhbgogICAgICogZXhpc3RpbmcgbW9kdWxlICh0aGUgbmFtZSBwYXNzZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIGBtb2R1bGVgKSBpcyByZXRyaWV2ZWQuCiAgICAgKgogICAgICoKICAgICAqICMgTW9kdWxlCiAgICAgKgogICAgICogQSBtb2R1bGUgaXMgYSBjb2xsZWN0aW9uIG9mIHNlcnZpY2VzLCBkaXJlY3RpdmVzLCBjb250cm9sbGVycywgZmlsdGVycywgYW5kIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uCiAgICAgKiBgYW5ndWxhci5tb2R1bGVgIGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4KICAgICAqCiAgICAgKiBgYGBqcwogICAgICogLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZQogICAgICogdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJywgW10pOwogICAgICoKICAgICAqIC8vIHJlZ2lzdGVyIGEgbmV3IHNlcnZpY2UKICAgICAqIG15TW9kdWxlLnZhbHVlKCdhcHBOYW1lJywgJ015Q29vbEFwcCcpOwogICAgICoKICAgICAqIC8vIGNvbmZpZ3VyZSBleGlzdGluZyBzZXJ2aWNlcyBpbnNpZGUgaW5pdGlhbGl6YXRpb24gYmxvY2tzLgogICAgICogbXlNb2R1bGUuY29uZmlnKFsnJGxvY2F0aW9uUHJvdmlkZXInLCBmdW5jdGlvbigkbG9jYXRpb25Qcm92aWRlcikgewogICAgICogICAvLyBDb25maWd1cmUgZXhpc3RpbmcgcHJvdmlkZXJzCiAgICAgKiAgICRsb2NhdGlvblByb3ZpZGVyLmhhc2hQcmVmaXgoJyEnKTsKICAgICAqIH1dKTsKICAgICAqIGBgYAogICAgICoKICAgICAqIFRoZW4geW91IGNhbiBjcmVhdGUgYW4gaW5qZWN0b3IgYW5kIGxvYWQgeW91ciBtb2R1bGVzIGxpa2UgdGhpczoKICAgICAqCiAgICAgKiBgYGBqcwogICAgICogdmFyIGluamVjdG9yID0gYW5ndWxhci5pbmplY3RvcihbJ25nJywgJ215TW9kdWxlJ10pCiAgICAgKiBgYGAKICAgICAqCiAgICAgKiBIb3dldmVyIGl0J3MgbW9yZSBsaWtlbHkgdGhhdCB5b3UnbGwganVzdCB1c2UKICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9IG9yCiAgICAgKiB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9IHRvIHNpbXBsaWZ5IHRoaXMgcHJvY2VzcyBmb3IgeW91LgogICAgICoKICAgICAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgbW9kdWxlIHRvIGNyZWF0ZSBvciByZXRyaWV2ZS4KICAgICAqIEBwYXJhbSB7IUFycmF5LjxzdHJpbmc+PX0gcmVxdWlyZXMgSWYgc3BlY2lmaWVkIHRoZW4gbmV3IG1vZHVsZSBpcyBiZWluZyBjcmVhdGVkLiBJZgogICAgICogICAgICAgIHVuc3BlY2lmaWVkIHRoZW4gdGhlIG1vZHVsZSBpcyBiZWluZyByZXRyaWV2ZWQgZm9yIGZ1cnRoZXIgY29uZmlndXJhdGlvbi4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBjb25maWdGbiBPcHRpb25hbCBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgbW9kdWxlLiBTYW1lIGFzCiAgICAgKiAgICAgICAge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZyBNb2R1bGUjY29uZmlnKCl9LgogICAgICogQHJldHVybnMge21vZHVsZX0gbmV3IG1vZHVsZSB3aXRoIHRoZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9IGFwaS4KICAgICAqLwogICAgcmV0dXJuIGZ1bmN0aW9uIG1vZHVsZShuYW1lLCByZXF1aXJlcywgY29uZmlnRm4pIHsKICAgICAgdmFyIGFzc2VydE5vdEhhc093blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgY29udGV4dCkgewogICAgICAgIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7CiAgICAgICAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZScsIGNvbnRleHQpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdtb2R1bGUnKTsKICAgICAgaWYgKHJlcXVpcmVzICYmIG1vZHVsZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICBtb2R1bGVzW25hbWVdID0gbnVsbDsKICAgICAgfQogICAgICByZXR1cm4gZW5zdXJlKG1vZHVsZXMsIG5hbWUsIGZ1bmN0aW9uKCkgewogICAgICAgIGlmICghcmVxdWlyZXMpIHsKICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignbm9tb2QnLCAiTW9kdWxlICd7MH0nIGlzIG5vdCBhdmFpbGFibGUhIFlvdSBlaXRoZXIgbWlzc3BlbGxlZCAiICsKICAgICAgICAgICAgICJ0aGUgbW9kdWxlIG5hbWUgb3IgZm9yZ290IHRvIGxvYWQgaXQuIElmIHJlZ2lzdGVyaW5nIGEgbW9kdWxlIGVuc3VyZSB0aGF0IHlvdSAiICsKICAgICAgICAgICAgICJzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgYXMgdGhlIHNlY29uZCBhcmd1bWVudC4iLCBuYW1lKTsKICAgICAgICB9CgogICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxBcnJheS48Kj4+fSAqLwogICAgICAgIHZhciBpbnZva2VRdWV1ZSA9IFtdOwoKICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqLwogICAgICAgIHZhciBjb25maWdCbG9ja3MgPSBbXTsKCiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi8KICAgICAgICB2YXIgcnVuQmxvY2tzID0gW107CgogICAgICAgIHZhciBjb25maWcgPSBpbnZva2VMYXRlcignJGluamVjdG9yJywgJ2ludm9rZScsICdwdXNoJywgY29uZmlnQmxvY2tzKTsKCiAgICAgICAgLyoqIEB0eXBlIHthbmd1bGFyLk1vZHVsZX0gKi8KICAgICAgICB2YXIgbW9kdWxlSW5zdGFuY2UgPSB7CiAgICAgICAgICAvLyBQcml2YXRlIHN0YXRlCiAgICAgICAgICBfaW52b2tlUXVldWU6IGludm9rZVF1ZXVlLAogICAgICAgICAgX2NvbmZpZ0Jsb2NrczogY29uZmlnQmxvY2tzLAogICAgICAgICAgX3J1bkJsb2NrczogcnVuQmxvY2tzLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5CiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNyZXF1aXJlcwogICAgICAgICAgICogQG1vZHVsZSBuZwogICAgICAgICAgICoKICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogSG9sZHMgdGhlIGxpc3Qgb2YgbW9kdWxlcyB3aGljaCB0aGUgaW5qZWN0b3Igd2lsbCBsb2FkIGJlZm9yZSB0aGUgY3VycmVudCBtb2R1bGUgaXMKICAgICAgICAgICAqIGxvYWRlZC4KICAgICAgICAgICAqLwogICAgICAgICAgcmVxdWlyZXM6IHJlcXVpcmVzLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5CiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNuYW1lCiAgICAgICAgICAgKiBAbW9kdWxlIG5nCiAgICAgICAgICAgKgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBOYW1lIG9mIHRoZSBtb2R1bGUuCiAgICAgICAgICAgKi8KICAgICAgICAgIG5hbWU6IG5hbWUsCgoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcHJvdmlkZXIKICAgICAgICAgICAqIEBtb2R1bGUgbmcKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZQogICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJUeXBlIENvbnN0cnVjdGlvbiBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZQogICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS4KICAgICAgICAgICAqLwogICAgICAgICAgcHJvdmlkZXI6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdwcm92aWRlcicpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZmFjdG9yeQogICAgICAgICAgICogQG1vZHVsZSBuZwogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlckZ1bmN0aW9uIEZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5ICRwcm92aWRlLmZhY3RvcnkoKX0uCiAgICAgICAgICAgKi8KICAgICAgICAgIGZhY3Rvcnk6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdmYWN0b3J5JyksCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNzZXJ2aWNlCiAgICAgICAgICAgKiBAbW9kdWxlIG5nCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZSgpfS4KICAgICAgICAgICAqLwogICAgICAgICAgc2VydmljZTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3NlcnZpY2UnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3ZhbHVlCiAgICAgICAgICAgKiBAbW9kdWxlIG5nCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFNlcnZpY2UgaW5zdGFuY2Ugb2JqZWN0LgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgJHByb3ZpZGUudmFsdWUoKX0uCiAgICAgICAgICAgKi8KICAgICAgICAgIHZhbHVlOiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAndmFsdWUnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnN0YW50CiAgICAgICAgICAgKiBAbW9kdWxlIG5nCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBjb25zdGFudCBuYW1lCiAgICAgICAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBDb25zdGFudCB2YWx1ZS4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogQmVjYXVzZSB0aGUgY29uc3RhbnQgYXJlIGZpeGVkLCB0aGV5IGdldCBhcHBsaWVkIGJlZm9yZSBvdGhlciBwcm92aWRlIG1ldGhvZHMuCiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjY29uc3RhbnQgJHByb3ZpZGUuY29uc3RhbnQoKX0uCiAgICAgICAgICAgKi8KICAgICAgICAgIGNvbnN0YW50OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnY29uc3RhbnQnLCAndW5zaGlmdCcpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjYW5pbWF0aW9uCiAgICAgICAgICAgKiBAbW9kdWxlIG5nCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBhbmltYXRpb24gbmFtZQogICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYW5pbWF0aW9uRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgYW4KICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKgogICAgICAgICAgICogKipOT1RFKio6IGFuaW1hdGlvbnMgdGFrZSBlZmZlY3Qgb25seSBpZiB0aGUgKipuZ0FuaW1hdGUqKiBtb2R1bGUgaXMgbG9hZGVkLgogICAgICAgICAgICoKICAgICAgICAgICAqCiAgICAgICAgICAgKiBEZWZpbmVzIGFuIGFuaW1hdGlvbiBob29rIHRoYXQgY2FuIGJlIGxhdGVyIHVzZWQgd2l0aAogICAgICAgICAgICoge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZSAkYW5pbWF0ZX0gc2VydmljZSBhbmQgZGlyZWN0aXZlcyB0aGF0IHVzZSB0aGlzIHNlcnZpY2UuCiAgICAgICAgICAgKgogICAgICAgICAgICogYGBganMKICAgICAgICAgICAqIG1vZHVsZS5hbmltYXRpb24oJy5hbmltYXRpb24tbmFtZScsIGZ1bmN0aW9uKCRpbmplY3QxLCAkaW5qZWN0MikgewogICAgICAgICAgICogICByZXR1cm4gewogICAgICAgICAgICogICAgIGV2ZW50TmFtZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHsKICAgICAgICAgICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvbgogICAgICAgICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKCkKICAgICAgICAgICAqICAgICAgIHJldHVybiBmdW5jdGlvbiBjYW5jZWxsYXRpb25GdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgKiAgICAgICAgIC8vY29kZSB0byBjYW5jZWwgdGhlIGFuaW1hdGlvbgogICAgICAgICAgICogICAgICAgfQogICAgICAgICAgICogICAgIH0KICAgICAgICAgICAqICAgfQogICAgICAgICAgICogfSkKICAgICAgICAgICAqIGBgYAogICAgICAgICAgICoKICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlciAkYW5pbWF0ZVByb3ZpZGVyLnJlZ2lzdGVyKCl9IGFuZAogICAgICAgICAgICoge0BsaW5rIG5nQW5pbWF0ZSBuZ0FuaW1hdGUgbW9kdWxlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KICAgICAgICAgICAqLwogICAgICAgICAgYW5pbWF0aW9uOiBpbnZva2VMYXRlcignJGFuaW1hdGVQcm92aWRlcicsICdyZWdpc3RlcicpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZmlsdGVyCiAgICAgICAgICAgKiBAbW9kdWxlIG5nCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBGaWx0ZXIgbmFtZS4KICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbHRlckZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGZpbHRlci4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBuZy4kZmlsdGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LgogICAgICAgICAgICovCiAgICAgICAgICBmaWx0ZXI6IGludm9rZUxhdGVyKCckZmlsdGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnRyb2xsZXIKICAgICAgICAgICAqIEBtb2R1bGUgbmcKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlCiAgICAgICAgICAgKiAgICBrZXlzIGFyZSB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGNvbnRyb2xsZXJQcm92aWRlci5yZWdpc3RlcigpfS4KICAgICAgICAgICAqLwogICAgICAgICAgY29udHJvbGxlcjogaW52b2tlTGF0ZXIoJyRjb250cm9sbGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2RpcmVjdGl2ZQogICAgICAgICAgICogQG1vZHVsZSBuZwogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIERpcmVjdGl2ZSBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGRpcmVjdGl2ZXMgd2hlcmUgdGhlCiAgICAgICAgICAgKiAgICBrZXlzIGFyZSB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXJlY3RpdmVGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZgogICAgICAgICAgICogZGlyZWN0aXZlcy4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS4KICAgICAgICAgICAqLwogICAgICAgICAgZGlyZWN0aXZlOiBpbnZva2VMYXRlcignJGNvbXBpbGVQcm92aWRlcicsICdkaXJlY3RpdmUnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZwogICAgICAgICAgICogQG1vZHVsZSBuZwogICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIG9uIG1vZHVsZSBsb2FkLiBVc2VmdWwgZm9yIHNlcnZpY2UKICAgICAgICAgICAqICAgIGNvbmZpZ3VyYXRpb24uCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIG5lZWRzIHRvIGJlIHBlcmZvcm1lZCBvbiBtb2R1bGUgbG9hZGluZy4KICAgICAgICAgICAqIEZvciBtb3JlIGFib3V0IGhvdyB0byBjb25maWd1cmUgc2VydmljZXMsIHNlZQogICAgICAgICAgICoge0BsaW5rIHByb3ZpZGVycyNwcm92aWRlci1yZWNpcGUgUHJvdmlkZXIgUmVjaXBlfS4KICAgICAgICAgICAqLwogICAgICAgICAgY29uZmlnOiBjb25maWcsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNydW4KICAgICAgICAgICAqIEBtb2R1bGUgbmcKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGluaXRpYWxpemF0aW9uRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIGFmdGVyIGluamVjdG9yIGNyZWF0aW9uLgogICAgICAgICAgICogICAgVXNlZnVsIGZvciBhcHBsaWNhdGlvbiBpbml0aWFsaXphdGlvbi4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggc2hvdWxkIGJlIHBlcmZvcm1lZCB3aGVuIHRoZSBpbmplY3RvciBpcyBkb25lCiAgICAgICAgICAgKiBsb2FkaW5nIGFsbCBtb2R1bGVzLgogICAgICAgICAgICovCiAgICAgICAgICBydW46IGZ1bmN0aW9uKGJsb2NrKSB7CiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKGJsb2NrKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgaWYgKGNvbmZpZ0ZuKSB7CiAgICAgICAgICBjb25maWcoY29uZmlnRm4pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICBtb2R1bGVJbnN0YW5jZTsKCiAgICAgICAgLyoqCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZAogICAgICAgICAqIEBwYXJhbSB7U3RyaW5nPX0gaW5zZXJ0TWV0aG9kCiAgICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyKHByb3ZpZGVyLCBtZXRob2QsIGluc2VydE1ldGhvZCwgcXVldWUpIHsKICAgICAgICAgIGlmICghcXVldWUpIHF1ZXVlID0gaW52b2tlUXVldWU7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHF1ZXVlW2luc2VydE1ldGhvZCB8fCAncHVzaCddKFtwcm92aWRlciwgbWV0aG9kLCBhcmd1bWVudHNdKTsKICAgICAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlOwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKICB9KTsKCn0KCi8qIGdsb2JhbCBhbmd1bGFyTW9kdWxlOiB0cnVlLAogIHZlcnNpb246IHRydWUsCgogICRMb2NhbGVQcm92aWRlciwKICAkQ29tcGlsZVByb3ZpZGVyLAoKICBodG1sQW5jaG9yRGlyZWN0aXZlLAogIGlucHV0RGlyZWN0aXZlLAogIGlucHV0RGlyZWN0aXZlLAogIGZvcm1EaXJlY3RpdmUsCiAgc2NyaXB0RGlyZWN0aXZlLAogIHNlbGVjdERpcmVjdGl2ZSwKICBzdHlsZURpcmVjdGl2ZSwKICBvcHRpb25EaXJlY3RpdmUsCiAgbmdCaW5kRGlyZWN0aXZlLAogIG5nQmluZEh0bWxEaXJlY3RpdmUsCiAgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsCiAgbmdDbGFzc0RpcmVjdGl2ZSwKICBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSwKICBuZ0NsYXNzT2RkRGlyZWN0aXZlLAogIG5nQ3NwRGlyZWN0aXZlLAogIG5nQ2xvYWtEaXJlY3RpdmUsCiAgbmdDb250cm9sbGVyRGlyZWN0aXZlLAogIG5nRm9ybURpcmVjdGl2ZSwKICBuZ0hpZGVEaXJlY3RpdmUsCiAgbmdJZkRpcmVjdGl2ZSwKICBuZ0luY2x1ZGVEaXJlY3RpdmUsCiAgbmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUsCiAgbmdJbml0RGlyZWN0aXZlLAogIG5nTm9uQmluZGFibGVEaXJlY3RpdmUsCiAgbmdQbHVyYWxpemVEaXJlY3RpdmUsCiAgbmdSZXBlYXREaXJlY3RpdmUsCiAgbmdTaG93RGlyZWN0aXZlLAogIG5nU3R5bGVEaXJlY3RpdmUsCiAgbmdTd2l0Y2hEaXJlY3RpdmUsCiAgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLAogIG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSwKICBuZ09wdGlvbnNEaXJlY3RpdmUsCiAgbmdUcmFuc2NsdWRlRGlyZWN0aXZlLAogIG5nTW9kZWxEaXJlY3RpdmUsCiAgbmdMaXN0RGlyZWN0aXZlLAogIG5nQ2hhbmdlRGlyZWN0aXZlLAogIHBhdHRlcm5EaXJlY3RpdmUsCiAgcGF0dGVybkRpcmVjdGl2ZSwKICByZXF1aXJlZERpcmVjdGl2ZSwKICByZXF1aXJlZERpcmVjdGl2ZSwKICBtaW5sZW5ndGhEaXJlY3RpdmUsCiAgbWlubGVuZ3RoRGlyZWN0aXZlLAogIG1heGxlbmd0aERpcmVjdGl2ZSwKICBtYXhsZW5ndGhEaXJlY3RpdmUsCiAgbmdWYWx1ZURpcmVjdGl2ZSwKICBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSwKICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcywKICBuZ0V2ZW50RGlyZWN0aXZlcywKCiAgJEFuY2hvclNjcm9sbFByb3ZpZGVyLAogICRBbmltYXRlUHJvdmlkZXIsCiAgJEJyb3dzZXJQcm92aWRlciwKICAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIsCiAgJENvbnRyb2xsZXJQcm92aWRlciwKICAkRG9jdW1lbnRQcm92aWRlciwKICAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLAogICRGaWx0ZXJQcm92aWRlciwKICAkSW50ZXJwb2xhdGVQcm92aWRlciwKICAkSW50ZXJ2YWxQcm92aWRlciwKICAkSHR0cFByb3ZpZGVyLAogICRIdHRwQmFja2VuZFByb3ZpZGVyLAogICRMb2NhdGlvblByb3ZpZGVyLAogICRMb2dQcm92aWRlciwKICAkUGFyc2VQcm92aWRlciwKICAkUm9vdFNjb3BlUHJvdmlkZXIsCiAgJFFQcm92aWRlciwKICAkJFFQcm92aWRlciwKICAkJFNhbml0aXplVXJpUHJvdmlkZXIsCiAgJFNjZVByb3ZpZGVyLAogICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLAogICRTbmlmZmVyUHJvdmlkZXIsCiAgJFRlbXBsYXRlQ2FjaGVQcm92aWRlciwKICAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIsCiAgJCRUZXN0YWJpbGl0eVByb3ZpZGVyLAogICRUaW1lb3V0UHJvdmlkZXIsCiAgJCRSQUZQcm92aWRlciwKICAkJEFzeW5jQ2FsbGJhY2tQcm92aWRlciwKICAkV2luZG93UHJvdmlkZXIKKi8KCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBhbmd1bGFyLnZlcnNpb24KICogQG1vZHVsZSBuZwogKiBAZGVzY3JpcHRpb24KICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgQW5ndWxhckpTIHZlcnNpb24uIFRoaXMgb2JqZWN0IGhhcyB0aGUKICogZm9sbG93aW5nIHByb3BlcnRpZXM6CiAqCiAqIC0gYGZ1bGxgIOKAkyBge3N0cmluZ31gIOKAkyBGdWxsIHZlcnNpb24gc3RyaW5nLCBzdWNoIGFzICIwLjkuMTgiLgogKiAtIGBtYWpvcmAg4oCTIGB7bnVtYmVyfWAg4oCTIE1ham9yIHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzICIwIi4KICogLSBgbWlub3JgIOKAkyBge251bWJlcn1gIOKAkyBNaW5vciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyAiOSIuCiAqIC0gYGRvdGAg4oCTIGB7bnVtYmVyfWAg4oCTIERvdCB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyAiMTgiLgogKiAtIGBjb2RlTmFtZWAg4oCTIGB7c3RyaW5nfWAg4oCTIENvZGUgbmFtZSBvZiB0aGUgcmVsZWFzZSwgc3VjaCBhcyAiamlnZ2xpbmctYXJtZmF0Ii4KICovCnZhciB2ZXJzaW9uID0gewogIGZ1bGw6ICcxLjMuMCcsICAgIC8vIGFsbCBvZiB0aGVzZSBwbGFjZWhvbGRlciBzdHJpbmdzIHdpbGwgYmUgcmVwbGFjZWQgYnkgZ3J1bnQncwogIG1ham9yOiAxLCAgICAvLyBwYWNrYWdlIHRhc2sKICBtaW5vcjogMywKICBkb3Q6IDAsCiAgY29kZU5hbWU6ICdzdXBlcmx1bWluYWwtbnVkZ2UnCn07CgoKZnVuY3Rpb24gcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpewogIGV4dGVuZChhbmd1bGFyLCB7CiAgICAnYm9vdHN0cmFwJzogYm9vdHN0cmFwLAogICAgJ2NvcHknOiBjb3B5LAogICAgJ2V4dGVuZCc6IGV4dGVuZCwKICAgICdlcXVhbHMnOiBlcXVhbHMsCiAgICAnZWxlbWVudCc6IGpxTGl0ZSwKICAgICdmb3JFYWNoJzogZm9yRWFjaCwKICAgICdpbmplY3Rvcic6IGNyZWF0ZUluamVjdG9yLAogICAgJ25vb3AnOiBub29wLAogICAgJ2JpbmQnOiBiaW5kLAogICAgJ3RvSnNvbic6IHRvSnNvbiwKICAgICdmcm9tSnNvbic6IGZyb21Kc29uLAogICAgJ2lkZW50aXR5JzogaWRlbnRpdHksCiAgICAnaXNVbmRlZmluZWQnOiBpc1VuZGVmaW5lZCwKICAgICdpc0RlZmluZWQnOiBpc0RlZmluZWQsCiAgICAnaXNTdHJpbmcnOiBpc1N0cmluZywKICAgICdpc0Z1bmN0aW9uJzogaXNGdW5jdGlvbiwKICAgICdpc09iamVjdCc6IGlzT2JqZWN0LAogICAgJ2lzTnVtYmVyJzogaXNOdW1iZXIsCiAgICAnaXNFbGVtZW50JzogaXNFbGVtZW50LAogICAgJ2lzQXJyYXknOiBpc0FycmF5LAogICAgJ3ZlcnNpb24nOiB2ZXJzaW9uLAogICAgJ2lzRGF0ZSc6IGlzRGF0ZSwKICAgICdsb3dlcmNhc2UnOiBsb3dlcmNhc2UsCiAgICAndXBwZXJjYXNlJzogdXBwZXJjYXNlLAogICAgJ2NhbGxiYWNrcyc6IHtjb3VudGVyOiAwfSwKICAgICdnZXRUZXN0YWJpbGl0eSc6IGdldFRlc3RhYmlsaXR5LAogICAgJyQkbWluRXJyJzogbWluRXJyLAogICAgJyQkY3NwJzogY3NwLAogICAgJ3JlbG9hZFdpdGhEZWJ1Z0luZm8nOiByZWxvYWRXaXRoRGVidWdJbmZvCiAgfSk7CgogIGFuZ3VsYXJNb2R1bGUgPSBzZXR1cE1vZHVsZUxvYWRlcih3aW5kb3cpOwogIHRyeSB7CiAgICBhbmd1bGFyTW9kdWxlKCduZ0xvY2FsZScpOwogIH0gY2F0Y2ggKGUpIHsKICAgIGFuZ3VsYXJNb2R1bGUoJ25nTG9jYWxlJywgW10pLnByb3ZpZGVyKCckbG9jYWxlJywgJExvY2FsZVByb3ZpZGVyKTsKICB9CgogIGFuZ3VsYXJNb2R1bGUoJ25nJywgWyduZ0xvY2FsZSddLCBbJyRwcm92aWRlJywKICAgIGZ1bmN0aW9uIG5nTW9kdWxlKCRwcm92aWRlKSB7CiAgICAgIC8vICQkc2FuaXRpemVVcmlQcm92aWRlciBuZWVkcyB0byBiZSBiZWZvcmUgJGNvbXBpbGVQcm92aWRlciBhcyBpdCBpcyB1c2VkIGJ5IGl0LgogICAgICAkcHJvdmlkZS5wcm92aWRlcih7CiAgICAgICAgJCRzYW5pdGl6ZVVyaTogJCRTYW5pdGl6ZVVyaVByb3ZpZGVyCiAgICAgIH0pOwogICAgICAkcHJvdmlkZS5wcm92aWRlcignJGNvbXBpbGUnLCAkQ29tcGlsZVByb3ZpZGVyKS4KICAgICAgICBkaXJlY3RpdmUoewogICAgICAgICAgICBhOiBodG1sQW5jaG9yRGlyZWN0aXZlLAogICAgICAgICAgICBpbnB1dDogaW5wdXREaXJlY3RpdmUsCiAgICAgICAgICAgIHRleHRhcmVhOiBpbnB1dERpcmVjdGl2ZSwKICAgICAgICAgICAgZm9ybTogZm9ybURpcmVjdGl2ZSwKICAgICAgICAgICAgc2NyaXB0OiBzY3JpcHREaXJlY3RpdmUsCiAgICAgICAgICAgIHNlbGVjdDogc2VsZWN0RGlyZWN0aXZlLAogICAgICAgICAgICBzdHlsZTogc3R5bGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG9wdGlvbjogb3B0aW9uRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0JpbmQ6IG5nQmluZERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdCaW5kSHRtbDogbmdCaW5kSHRtbERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdCaW5kVGVtcGxhdGU6IG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NsYXNzOiBuZ0NsYXNzRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NsYXNzRXZlbjogbmdDbGFzc0V2ZW5EaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ2xhc3NPZGQ6IG5nQ2xhc3NPZGREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ2xvYWs6IG5nQ2xvYWtEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ29udHJvbGxlcjogbmdDb250cm9sbGVyRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0Zvcm06IG5nRm9ybURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdIaWRlOiBuZ0hpZGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nSWY6IG5nSWZEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nSW5jbHVkZTogbmdJbmNsdWRlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0luaXQ6IG5nSW5pdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdOb25CaW5kYWJsZTogbmdOb25CaW5kYWJsZURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdQbHVyYWxpemU6IG5nUGx1cmFsaXplRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1JlcGVhdDogbmdSZXBlYXREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nU2hvdzogbmdTaG93RGlyZWN0aXZlLAogICAgICAgICAgICBuZ1N0eWxlOiBuZ1N0eWxlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1N3aXRjaDogbmdTd2l0Y2hEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nU3dpdGNoV2hlbjogbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1N3aXRjaERlZmF1bHQ6IG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdPcHRpb25zOiBuZ09wdGlvbnNEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nVHJhbnNjbHVkZTogbmdUcmFuc2NsdWRlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ01vZGVsOiBuZ01vZGVsRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0xpc3Q6IG5nTGlzdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdDaGFuZ2U6IG5nQ2hhbmdlRGlyZWN0aXZlLAogICAgICAgICAgICBwYXR0ZXJuOiBwYXR0ZXJuRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1BhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsCiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdSZXF1aXJlZDogcmVxdWlyZWREaXJlY3RpdmUsCiAgICAgICAgICAgIG1pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLAogICAgICAgICAgICBuZ01pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLAogICAgICAgICAgICBtYXhsZW5ndGg6IG1heGxlbmd0aERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdNYXhsZW5ndGg6IG1heGxlbmd0aERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdWYWx1ZTogbmdWYWx1ZURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdNb2RlbE9wdGlvbnM6IG5nTW9kZWxPcHRpb25zRGlyZWN0aXZlCiAgICAgICAgfSkuCiAgICAgICAgZGlyZWN0aXZlKHsKICAgICAgICAgIG5nSW5jbHVkZTogbmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUKICAgICAgICB9KS4KICAgICAgICBkaXJlY3RpdmUobmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMpLgogICAgICAgIGRpcmVjdGl2ZShuZ0V2ZW50RGlyZWN0aXZlcyk7CiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHsKICAgICAgICAkYW5jaG9yU2Nyb2xsOiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsCiAgICAgICAgJGFuaW1hdGU6ICRBbmltYXRlUHJvdmlkZXIsCiAgICAgICAgJGJyb3dzZXI6ICRCcm93c2VyUHJvdmlkZXIsCiAgICAgICAgJGNhY2hlRmFjdG9yeTogJENhY2hlRmFjdG9yeVByb3ZpZGVyLAogICAgICAgICRjb250cm9sbGVyOiAkQ29udHJvbGxlclByb3ZpZGVyLAogICAgICAgICRkb2N1bWVudDogJERvY3VtZW50UHJvdmlkZXIsCiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXI6ICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsCiAgICAgICAgJGZpbHRlcjogJEZpbHRlclByb3ZpZGVyLAogICAgICAgICRpbnRlcnBvbGF0ZTogJEludGVycG9sYXRlUHJvdmlkZXIsCiAgICAgICAgJGludGVydmFsOiAkSW50ZXJ2YWxQcm92aWRlciwKICAgICAgICAkaHR0cDogJEh0dHBQcm92aWRlciwKICAgICAgICAkaHR0cEJhY2tlbmQ6ICRIdHRwQmFja2VuZFByb3ZpZGVyLAogICAgICAgICRsb2NhdGlvbjogJExvY2F0aW9uUHJvdmlkZXIsCiAgICAgICAgJGxvZzogJExvZ1Byb3ZpZGVyLAogICAgICAgICRwYXJzZTogJFBhcnNlUHJvdmlkZXIsCiAgICAgICAgJHJvb3RTY29wZTogJFJvb3RTY29wZVByb3ZpZGVyLAogICAgICAgICRxOiAkUVByb3ZpZGVyLAogICAgICAgICQkcTogJCRRUHJvdmlkZXIsCiAgICAgICAgJHNjZTogJFNjZVByb3ZpZGVyLAogICAgICAgICRzY2VEZWxlZ2F0ZTogJFNjZURlbGVnYXRlUHJvdmlkZXIsCiAgICAgICAgJHNuaWZmZXI6ICRTbmlmZmVyUHJvdmlkZXIsCiAgICAgICAgJHRlbXBsYXRlQ2FjaGU6ICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsCiAgICAgICAgJHRlbXBsYXRlUmVxdWVzdDogJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyLAogICAgICAgICQkdGVzdGFiaWxpdHk6ICQkVGVzdGFiaWxpdHlQcm92aWRlciwKICAgICAgICAkdGltZW91dDogJFRpbWVvdXRQcm92aWRlciwKICAgICAgICAkd2luZG93OiAkV2luZG93UHJvdmlkZXIsCiAgICAgICAgJCRyQUY6ICQkUkFGUHJvdmlkZXIsCiAgICAgICAgJCRhc3luY0NhbGxiYWNrIDogJCRBc3luY0NhbGxiYWNrUHJvdmlkZXIKICAgICAgfSk7CiAgICB9CiAgXSk7Cn0KCi8qIGdsb2JhbCBKUUxpdGVQcm90b3R5cGU6IHRydWUsCiAgYWRkRXZlbnRMaXN0ZW5lckZuOiB0cnVlLAogIHJlbW92ZUV2ZW50TGlzdGVuZXJGbjogdHJ1ZSwKICBCT09MRUFOX0FUVFI6IHRydWUsCiAgQUxJQVNFRF9BVFRSOiB0cnVlLAoqLwoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovL0pRTGl0ZQovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuZWxlbWVudAogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBXcmFwcyBhIHJhdyBET00gZWxlbWVudCBvciBIVE1MIHN0cmluZyBhcyBhIFtqUXVlcnldKGh0dHA6Ly9qcXVlcnkuY29tKSBlbGVtZW50LgogKgogKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YCBpcyBhbiBhbGlhcyBmb3IgdGhlCiAqIFtqUXVlcnldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkvKSBmdW5jdGlvbi4gSWYgalF1ZXJ5IGlzIG5vdCBhdmFpbGFibGUsIGBhbmd1bGFyLmVsZW1lbnRgCiAqIGRlbGVnYXRlcyB0byBBbmd1bGFyJ3MgYnVpbHQtaW4gc3Vic2V0IG9mIGpRdWVyeSwgY2FsbGVkICJqUXVlcnkgbGl0ZSIgb3IgImpxTGl0ZS4iCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MiPmpxTGl0ZSBpcyBhIHRpbnksIEFQSS1jb21wYXRpYmxlIHN1YnNldCBvZiBqUXVlcnkgdGhhdCBhbGxvd3MKICogQW5ndWxhciB0byBtYW5pcHVsYXRlIHRoZSBET00gaW4gYSBjcm9zcy1icm93c2VyIGNvbXBhdGlibGUgd2F5LiAqKmpxTGl0ZSoqIGltcGxlbWVudHMgb25seSB0aGUgbW9zdAogKiBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eSB3aXRoIHRoZSBnb2FsIG9mIGhhdmluZyBhIHZlcnkgc21hbGwgZm9vdHByaW50LjwvZGl2PgogKgogKiBUbyB1c2UgalF1ZXJ5LCBzaW1wbHkgbG9hZCBpdCBiZWZvcmUgYERPTUNvbnRlbnRMb2FkZWRgIGV2ZW50IGZpcmVkLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCI+KipOb3RlOioqIGFsbCBlbGVtZW50IHJlZmVyZW5jZXMgaW4gQW5ndWxhciBhcmUgYWx3YXlzIHdyYXBwZWQgd2l0aCBqUXVlcnkgb3IKICoganFMaXRlOyB0aGV5IGFyZSBuZXZlciByYXcgRE9NIHJlZmVyZW5jZXMuPC9kaXY+CiAqCiAqICMjIEFuZ3VsYXIncyBqcUxpdGUKICoganFMaXRlIHByb3ZpZGVzIG9ubHkgdGhlIGZvbGxvd2luZyBqUXVlcnkgbWV0aG9kczoKICoKICogLSBbYGFkZENsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWRkQ2xhc3MvKQogKiAtIFtgYWZ0ZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hZnRlci8pCiAqIC0gW2BhcHBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hcHBlbmQvKQogKiAtIFtgYXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2F0dHIvKSAtIERvZXMgbm90IHN1cHBvcnQgZnVuY3Rpb25zIGFzIHBhcmFtZXRlcnMKICogLSBbYGJpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9iaW5kLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGEKICogLSBbYGNoaWxkcmVuKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2hpbGRyZW4vKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzCiAqIC0gW2BjbG9uZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nsb25lLykKICogLSBbYGNvbnRlbnRzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGVudHMvKQogKiAtIFtgY3NzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY3NzLykgLSBPbmx5IHJldHJpZXZlcyBpbmxpbmUtc3R5bGVzLCBkb2VzIG5vdCBjYWxsIGBnZXRDb21wdXRlZFN0eWxlcygpYAogKiAtIFtgZGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RhdGEvKQogKiAtIFtgZGV0YWNoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZGV0YWNoLykKICogLSBbYGVtcHR5KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZW1wdHkvKQogKiAtIFtgZXEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lcS8pCiAqIC0gW2BmaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZmluZC8pIC0gTGltaXRlZCB0byBsb29rdXBzIGJ5IHRhZyBuYW1lCiAqIC0gW2BoYXNDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2hhc0NsYXNzLykKICogLSBbYGh0bWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9odG1sLykKICogLSBbYG5leHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9uZXh0LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9ycwogKiAtIFtgb24oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnREYXRhCiAqIC0gW2BvZmYoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBzZWxlY3RvcnMKICogLSBbYG9uZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uZS8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzIG9yIHNlbGVjdG9ycwogKiAtIFtgcGFyZW50KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9ycwogKiAtIFtgcHJlcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ByZXBlbmQvKQogKiAtIFtgcHJvcCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3Byb3AvKQogKiAtIFtgcmVhZHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZWFkeS8pCiAqIC0gW2ByZW1vdmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmUvKQogKiAtIFtgcmVtb3ZlQXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUF0dHIvKQogKiAtIFtgcmVtb3ZlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVDbGFzcy8pCiAqIC0gW2ByZW1vdmVEYXRhKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlRGF0YS8pCiAqIC0gW2ByZXBsYWNlV2l0aCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlcGxhY2VXaXRoLykKICogLSBbYHRleHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90ZXh0LykKICogLSBbYHRvZ2dsZUNsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdG9nZ2xlQ2xhc3MvKQogKiAtIFtgdHJpZ2dlckhhbmRsZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90cmlnZ2VySGFuZGxlci8pIC0gUGFzc2VzIGEgZHVtbXkgZXZlbnQgb2JqZWN0IHRvIGhhbmRsZXJzLgogKiAtIFtgdW5iaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdW5iaW5kLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMKICogLSBbYHZhbCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ZhbC8pCiAqIC0gW2B3cmFwKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vd3JhcC8pCiAqCiAqICMjIGpRdWVyeS9qcUxpdGUgRXh0cmFzCiAqIEFuZ3VsYXIgYWxzbyBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGFkZGl0aW9uYWwgbWV0aG9kcyBhbmQgZXZlbnRzIHRvIGJvdGggalF1ZXJ5IGFuZCBqcUxpdGU6CiAqCiAqICMjIyBFdmVudHMKICogLSBgJGRlc3Ryb3lgIC0gQW5ndWxhckpTIGludGVyY2VwdHMgYWxsIGpxTGl0ZS9qUXVlcnkncyBET00gZGVzdHJ1Y3Rpb24gYXBpcyBhbmQgZmlyZXMgdGhpcyBldmVudAogKiAgICBvbiBhbGwgRE9NIG5vZGVzIGJlaW5nIHJlbW92ZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNsZWFuIHVwIGFueSAzcmQgcGFydHkgYmluZGluZ3MgdG8gdGhlIERPTQogKiAgICBlbGVtZW50IGJlZm9yZSBpdCBpcyByZW1vdmVkLgogKgogKiAjIyMgTWV0aG9kcwogKiAtIGBjb250cm9sbGVyKG5hbWUpYCAtIHJldHJpZXZlcyB0aGUgY29udHJvbGxlciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIEJ5IGRlZmF1bHQKICogICByZXRyaWV2ZXMgY29udHJvbGxlciBhc3NvY2lhdGVkIHdpdGggdGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZS4gSWYgYG5hbWVgIGlzIHByb3ZpZGVkIGFzCiAqICAgY2FtZWxDYXNlIGRpcmVjdGl2ZSBuYW1lLCB0aGVuIHRoZSBjb250cm9sbGVyIGZvciB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJldHJpZXZlZCAoZS5nLgogKiAgIGAnbmdNb2RlbCdgKS4KICogLSBgaW5qZWN0b3IoKWAgLSByZXRyaWV2ZXMgdGhlIGluamVjdG9yIG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgb3IgaXRzIHBhcmVudC4KICogLSBgc2NvcGUoKWAgLSByZXRyaWV2ZXMgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBvZiB0aGUgY3VycmVudAogKiAgIGVsZW1lbnQgb3IgaXRzIHBhcmVudC4KICogLSBgaXNvbGF0ZVNjb3BlKClgIC0gcmV0cmlldmVzIGFuIGlzb2xhdGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IGlmIG9uZSBpcyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGUKICogICBjdXJyZW50IGVsZW1lbnQuIFRoaXMgZ2V0dGVyIHNob3VsZCBiZSB1c2VkIG9ubHkgb24gZWxlbWVudHMgdGhhdCBjb250YWluIGEgZGlyZWN0aXZlIHdoaWNoIHN0YXJ0cyBhIG5ldyBpc29sYXRlCiAqICAgc2NvcGUuIENhbGxpbmcgYHNjb3BlKClgIG9uIHRoaXMgZWxlbWVudCBhbHdheXMgcmV0dXJucyB0aGUgb3JpZ2luYWwgbm9uLWlzb2xhdGUgc2NvcGUuCiAqIC0gYGluaGVyaXRlZERhdGEoKWAgLSBzYW1lIGFzIGBkYXRhKClgLCBidXQgd2Fsa3MgdXAgdGhlIERPTSB1bnRpbCBhIHZhbHVlIGlzIGZvdW5kIG9yIHRoZSB0b3AKICogICBwYXJlbnQgZWxlbWVudCBpcyByZWFjaGVkLgogKgogKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEhUTUwgc3RyaW5nIG9yIERPTUVsZW1lbnQgdG8gYmUgd3JhcHBlZCBpbnRvIGpRdWVyeS4KICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC4KICovCgpKUUxpdGUuZXhwYW5kbyA9ICduZzMzOSc7Cgp2YXIganFDYWNoZSA9IEpRTGl0ZS5jYWNoZSA9IHt9LAogICAganFJZCA9IDEsCiAgICBhZGRFdmVudExpc3RlbmVyRm4gPSBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikgewogICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTsKICAgIH0sCiAgICByZW1vdmVFdmVudExpc3RlbmVyRm4gPSBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikgewogICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTsKICAgIH07CgovKgogKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgInByaXZhdGUiIGZ1bmN0aW9uICEhIQogKi8KSlFMaXRlLl9kYXRhID0gZnVuY3Rpb24obm9kZSkgewogIC8valF1ZXJ5IGFsd2F5cyByZXR1cm5zIGFuIG9iamVjdCBvbiBjYWNoZSBtaXNzCiAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTsKfTsKCmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9CgoKdmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gLyhbXDpcLVxfXSsoLikpL2c7CnZhciBNT1pfSEFDS19SRUdFWFAgPSAvXm1veihbQS1aXSkvOwp2YXIgTU9VU0VfRVZFTlRfTUFQPSB7IG1vdXNlbGVhdmUgOiAibW91c2VvdXQiLCBtb3VzZWVudGVyIDogIm1vdXNlb3ZlciJ9Owp2YXIganFMaXRlTWluRXJyID0gbWluRXJyKCdqcUxpdGUnKTsKCi8qKgogKiBDb252ZXJ0cyBzbmFrZV9jYXNlIHRvIGNhbWVsQ2FzZS4KICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci4KICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemUKICovCmZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7CiAgcmV0dXJuIG5hbWUuCiAgICByZXBsYWNlKFNQRUNJQUxfQ0hBUlNfUkVHRVhQLCBmdW5jdGlvbihfLCBzZXBhcmF0b3IsIGxldHRlciwgb2Zmc2V0KSB7CiAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjsKICAgIH0pLgogICAgcmVwbGFjZShNT1pfSEFDS19SRUdFWFAsICdNb3okMScpOwp9Cgp2YXIgU0lOR0xFX1RBR19SRUdFWFAgPSAvXjwoXHcrKVxzKlwvPz4oPzo8XC9cMT58KSQvOwp2YXIgSFRNTF9SRUdFWFAgPSAvPHwmIz9cdys7LzsKdmFyIFRBR19OQU1FX1JFR0VYUCA9IC88KFtcdzpdKykvOwp2YXIgWEhUTUxfVEFHX1JFR0VYUCA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcdzpdKylbXj5dKilcLz4vZ2k7Cgp2YXIgd3JhcE1hcCA9IHsKICAnb3B0aW9uJzogWzEsICc8c2VsZWN0IG11bHRpcGxlPSJtdWx0aXBsZSI+JywgJzwvc2VsZWN0PiddLAoKICAndGhlYWQnOiBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXSwKICAnY29sJzogWzIsICc8dGFibGU+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sCiAgJ3RyJzogWzIsICc8dGFibGU+PHRib2R5PicsICc8L3Rib2R5PjwvdGFibGU+J10sCiAgJ3RkJzogWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J10sCiAgJ19kZWZhdWx0JzogWzAsICIiLCAiIl0KfTsKCndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjsKd3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDsKd3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7CgoKZnVuY3Rpb24ganFMaXRlSXNUZXh0Tm9kZShodG1sKSB7CiAgcmV0dXJuICFIVE1MX1JFR0VYUC50ZXN0KGh0bWwpOwp9CgpmdW5jdGlvbiBqcUxpdGVBY2NlcHRzRGF0YShub2RlKSB7CiAgLy8gVGhlIHdpbmRvdyBvYmplY3QgY2FuIGFjY2VwdCBkYXRhIGJ1dCBoYXMgbm8gbm9kZVR5cGUKICAvLyBPdGhlcndpc2Ugd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBlbGVtZW50cyAoMSkgYW5kIGRvY3VtZW50cyAoOSkKICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlOwogIHJldHVybiBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQgfHwgIW5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlQ7Cn0KCmZ1bmN0aW9uIGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkgewogIHZhciB0bXAsIHRhZywgd3JhcCwKICAgICAgZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwKICAgICAgbm9kZXMgPSBbXSwgaTsKCiAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoaHRtbCkpIHsKICAgIC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZQogICAgbm9kZXMucHVzaChjb250ZXh0LmNyZWF0ZVRleHROb2RlKGh0bWwpKTsKICB9IGVsc2UgewogICAgLy8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzCiAgICB0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29udGV4dC5jcmVhdGVFbGVtZW50KCJkaXYiKSk7CiAgICB0YWcgPSAoVEFHX05BTUVfUkVHRVhQLmV4ZWMoaHRtbCkgfHwgWyIiLCAiIl0pWzFdLnRvTG93ZXJDYXNlKCk7CiAgICB3cmFwID0gd3JhcE1hcFt0YWddIHx8IHdyYXBNYXAuX2RlZmF1bHQ7CiAgICB0bXAuaW5uZXJIVE1MID0gd3JhcFsxXSArIGh0bWwucmVwbGFjZShYSFRNTF9UQUdfUkVHRVhQLCAiPCQxPjwvJDI+IikgKyB3cmFwWzJdOwoKICAgIC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudAogICAgaSA9IHdyYXBbMF07CiAgICB3aGlsZSAoaS0tKSB7CiAgICAgIHRtcCA9IHRtcC5sYXN0Q2hpbGQ7CiAgICB9CgogICAgbm9kZXMgPSBjb25jYXQobm9kZXMsIHRtcC5jaGlsZE5vZGVzKTsKCiAgICB0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkOwogICAgdG1wLnRleHRDb250ZW50ID0gIiI7CiAgfQoKICAvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50CiAgZnJhZ21lbnQudGV4dENvbnRlbnQgPSAiIjsKICBmcmFnbWVudC5pbm5lckhUTUwgPSAiIjsgLy8gQ2xlYXIgaW5uZXIgSFRNTAogIGZvckVhY2gobm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHsKICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpOwogIH0pOwoKICByZXR1cm4gZnJhZ21lbnQ7Cn0KCmZ1bmN0aW9uIGpxTGl0ZVBhcnNlSFRNTChodG1sLCBjb250ZXh0KSB7CiAgY29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7CiAgdmFyIHBhcnNlZDsKCiAgaWYgKChwYXJzZWQgPSBTSU5HTEVfVEFHX1JFR0VYUC5leGVjKGh0bWwpKSkgewogICAgcmV0dXJuIFtjb250ZXh0LmNyZWF0ZUVsZW1lbnQocGFyc2VkWzFdKV07CiAgfQoKICBpZiAoKHBhcnNlZCA9IGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkpKSB7CiAgICByZXR1cm4gcGFyc2VkLmNoaWxkTm9kZXM7CiAgfQoKICByZXR1cm4gW107Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwpmdW5jdGlvbiBKUUxpdGUoZWxlbWVudCkgewogIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSlFMaXRlKSB7CiAgICByZXR1cm4gZWxlbWVudDsKICB9CgogIHZhciBhcmdJc1N0cmluZzsKCiAgaWYgKGlzU3RyaW5nKGVsZW1lbnQpKSB7CiAgICBlbGVtZW50ID0gdHJpbShlbGVtZW50KTsKICAgIGFyZ0lzU3RyaW5nID0gdHJ1ZTsKICB9CiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEpRTGl0ZSkpIHsKICAgIGlmIChhcmdJc1N0cmluZyAmJiBlbGVtZW50LmNoYXJBdCgwKSAhPSAnPCcpIHsKICAgICAgdGhyb3cganFMaXRlTWluRXJyKCdub3NlbCcsICdMb29raW5nIHVwIGVsZW1lbnRzIHZpYSBzZWxlY3RvcnMgaXMgbm90IHN1cHBvcnRlZCBieSBqcUxpdGUhIFNlZTogaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvYW5ndWxhci5lbGVtZW50Jyk7CiAgICB9CiAgICByZXR1cm4gbmV3IEpRTGl0ZShlbGVtZW50KTsKICB9CgogIGlmIChhcmdJc1N0cmluZykgewogICAganFMaXRlQWRkTm9kZXModGhpcywganFMaXRlUGFyc2VIVE1MKGVsZW1lbnQpKTsKICB9IGVsc2UgewogICAganFMaXRlQWRkTm9kZXModGhpcywgZWxlbWVudCk7CiAgfQp9CgpmdW5jdGlvbiBqcUxpdGVDbG9uZShlbGVtZW50KSB7CiAgcmV0dXJuIGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpOwp9CgpmdW5jdGlvbiBqcUxpdGVEZWFsb2MoZWxlbWVudCwgb25seURlc2NlbmRhbnRzKXsKICBpZiAoIW9ubHlEZXNjZW5kYW50cykganFMaXRlUmVtb3ZlRGF0YShlbGVtZW50KTsKCiAgaWYgKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCkgewogICAgdmFyIGRlc2NlbmRhbnRzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcqJyk7CiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRlc2NlbmRhbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICBqcUxpdGVSZW1vdmVEYXRhKGRlc2NlbmRhbnRzW2ldKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGpxTGl0ZU9mZihlbGVtZW50LCB0eXBlLCBmbiwgdW5zdXBwb3J0ZWQpIHsKICBpZiAoaXNEZWZpbmVkKHVuc3VwcG9ydGVkKSkgdGhyb3cganFMaXRlTWluRXJyKCdvZmZhcmdzJywgJ2pxTGl0ZSNvZmYoKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIGFyZ3VtZW50Jyk7CgogIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCk7CiAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZXZlbnRzOwogIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmhhbmRsZTsKCiAgaWYgKCFoYW5kbGUpIHJldHVybjsgLy9ubyBsaXN0ZW5lcnMgcmVnaXN0ZXJlZAoKICBpZiAoIXR5cGUpIHsKICAgIGZvciAodHlwZSBpbiBldmVudHMpIHsKICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScpIHsKICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oZWxlbWVudCwgdHlwZSwgaGFuZGxlKTsKICAgICAgfQogICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgfQogIH0gZWxzZSB7CiAgICBmb3JFYWNoKHR5cGUuc3BsaXQoJyAnKSwgZnVuY3Rpb24odHlwZSkgewogICAgICBpZiAoaXNEZWZpbmVkKGZuKSkgewogICAgICAgIHZhciBsaXN0ZW5lckZucyA9IGV2ZW50c1t0eXBlXTsKICAgICAgICBhcnJheVJlbW92ZShsaXN0ZW5lckZucyB8fCBbXSwgZm4pOwogICAgICAgIGlmIChsaXN0ZW5lckZucyAmJiBsaXN0ZW5lckZucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICB9CgogICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oZWxlbWVudCwgdHlwZSwgaGFuZGxlKTsKICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTsKICAgIH0pOwogIH0KfQoKZnVuY3Rpb24ganFMaXRlUmVtb3ZlRGF0YShlbGVtZW50LCBuYW1lKSB7CiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnQubmczMzk7CiAgdmFyIGV4cGFuZG9TdG9yZSA9IGV4cGFuZG9JZCAmJiBqcUNhY2hlW2V4cGFuZG9JZF07CgogIGlmIChleHBhbmRvU3RvcmUpIHsKICAgIGlmIChuYW1lKSB7CiAgICAgIGRlbGV0ZSBleHBhbmRvU3RvcmUuZGF0YVtuYW1lXTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChleHBhbmRvU3RvcmUuaGFuZGxlKSB7CiAgICAgIGlmIChleHBhbmRvU3RvcmUuZXZlbnRzLiRkZXN0cm95KSB7CiAgICAgICAgZXhwYW5kb1N0b3JlLmhhbmRsZSh7fSwgJyRkZXN0cm95Jyk7CiAgICAgIH0KICAgICAganFMaXRlT2ZmKGVsZW1lbnQpOwogICAgfQogICAgZGVsZXRlIGpxQ2FjaGVbZXhwYW5kb0lkXTsKICAgIGVsZW1lbnQubmczMzkgPSB1bmRlZmluZWQ7IC8vIGRvbid0IGRlbGV0ZSBET00gZXhwYW5kb3MuIElFIGFuZCBDaHJvbWUgZG9uJ3QgbGlrZSBpdAogIH0KfQoKCmZ1bmN0aW9uIGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCBjcmVhdGVJZk5lY2Vzc2FyeSkgewogIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5LAogICAgICBleHBhbmRvU3RvcmUgPSBleHBhbmRvSWQgJiYganFDYWNoZVtleHBhbmRvSWRdOwoKICBpZiAoY3JlYXRlSWZOZWNlc3NhcnkgJiYgIWV4cGFuZG9TdG9yZSkgewogICAgZWxlbWVudC5uZzMzOSA9IGV4cGFuZG9JZCA9IGpxTmV4dElkKCk7CiAgICBleHBhbmRvU3RvcmUgPSBqcUNhY2hlW2V4cGFuZG9JZF0gPSB7ZXZlbnRzOiB7fSwgZGF0YToge30sIGhhbmRsZTogdW5kZWZpbmVkfTsKICB9CgogIHJldHVybiBleHBhbmRvU3RvcmU7Cn0KCgpmdW5jdGlvbiBqcUxpdGVEYXRhKGVsZW1lbnQsIGtleSwgdmFsdWUpIHsKICBpZiAoanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHsKCiAgICB2YXIgaXNTaW1wbGVTZXR0ZXIgPSBpc0RlZmluZWQodmFsdWUpOwogICAgdmFyIGlzU2ltcGxlR2V0dGVyID0gIWlzU2ltcGxlU2V0dGVyICYmIGtleSAmJiAhaXNPYmplY3Qoa2V5KTsKICAgIHZhciBtYXNzR2V0dGVyID0gIWtleTsKICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgIWlzU2ltcGxlR2V0dGVyKTsKICAgIHZhciBkYXRhID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5kYXRhOwoKICAgIGlmIChpc1NpbXBsZVNldHRlcikgeyAvLyBkYXRhKCdrZXknLCB2YWx1ZSkKICAgICAgZGF0YVtrZXldID0gdmFsdWU7CiAgICB9IGVsc2UgewogICAgICBpZiAobWFzc0dldHRlcikgeyAgLy8gZGF0YSgpCiAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGlzU2ltcGxlR2V0dGVyKSB7IC8vIGRhdGEoJ2tleScpCiAgICAgICAgICAvLyBkb24ndCBmb3JjZSBjcmVhdGlvbiBvZiBleHBhbmRvU3RvcmUgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXQKICAgICAgICAgIHJldHVybiBkYXRhICYmIGRhdGFba2V5XTsKICAgICAgICB9IGVsc2UgeyAvLyBtYXNzLXNldHRlcjogZGF0YSh7a2V5MTogdmFsMSwga2V5MjogdmFsMn0pCiAgICAgICAgICBleHRlbmQoZGF0YSwga2V5KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGpxTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKSB7CiAgaWYgKCFlbGVtZW50LmdldEF0dHJpYnV0ZSkgcmV0dXJuIGZhbHNlOwogIHJldHVybiAoKCIgIiArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAiICIpLnJlcGxhY2UoL1tcblx0XS9nLCAiICIpLgogICAgICBpbmRleE9mKCAiICIgKyBzZWxlY3RvciArICIgIiApID4gLTEpOwp9CgpmdW5jdGlvbiBqcUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7CiAgaWYgKGNzc0NsYXNzZXMgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUpIHsKICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykgewogICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0cmltKAogICAgICAgICAgKCIgIiArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAiICIpCiAgICAgICAgICAucmVwbGFjZSgvW1xuXHRdL2csICIgIikKICAgICAgICAgIC5yZXBsYWNlKCIgIiArIHRyaW0oY3NzQ2xhc3MpICsgIiAiLCAiICIpKQogICAgICApOwogICAgfSk7CiAgfQp9CgpmdW5jdGlvbiBqcUxpdGVBZGRDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7CiAgaWYgKGNzc0NsYXNzZXMgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUpIHsKICAgIHZhciBleGlzdGluZ0NsYXNzZXMgPSAoJyAnICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICcgJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXG5cdF0vZywgIiAiKTsKCiAgICBmb3JFYWNoKGNzc0NsYXNzZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY3NzQ2xhc3MpIHsKICAgICAgY3NzQ2xhc3MgPSB0cmltKGNzc0NsYXNzKTsKICAgICAgaWYgKGV4aXN0aW5nQ2xhc3Nlcy5pbmRleE9mKCcgJyArIGNzc0NsYXNzICsgJyAnKSA9PT0gLTEpIHsKICAgICAgICBleGlzdGluZ0NsYXNzZXMgKz0gY3NzQ2xhc3MgKyAnICc7CiAgICAgIH0KICAgIH0pOwoKICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRyaW0oZXhpc3RpbmdDbGFzc2VzKSk7CiAgfQp9CgoKZnVuY3Rpb24ganFMaXRlQWRkTm9kZXMocm9vdCwgZWxlbWVudHMpIHsKICAvLyBUSElTIENPREUgSVMgVkVSWSBIT1QuIERvbid0IG1ha2UgY2hhbmdlcyB3aXRob3V0IGJlbmNobWFya2luZy4KCiAgaWYgKGVsZW1lbnRzKSB7CgogICAgLy8gaWYgYSBOb2RlICh0aGUgbW9zdCBjb21tb24gY2FzZSkKICAgIGlmIChlbGVtZW50cy5ub2RlVHlwZSkgewogICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHM7CiAgICB9IGVsc2UgewogICAgICB2YXIgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoOwoKICAgICAgLy8gaWYgYW4gQXJyYXkgb3IgTm9kZUxpc3QgYW5kIG5vdCBhIFdpbmRvdwogICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicgJiYgZWxlbWVudHMud2luZG93ICE9PSBlbGVtZW50cykgewogICAgICAgIGlmIChsZW5ndGgpIHsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcm9vdFtyb290Lmxlbmd0aCsrXSA9IGVsZW1lbnRzW2ldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHM7CiAgICAgIH0KICAgIH0KICB9Cn0KCgpmdW5jdGlvbiBqcUxpdGVDb250cm9sbGVyKGVsZW1lbnQsIG5hbWUpIHsKICByZXR1cm4ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJCcgKyAobmFtZSB8fCAnbmdDb250cm9sbGVyJyApICsgJ0NvbnRyb2xsZXInKTsKfQoKZnVuY3Rpb24ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCBuYW1lLCB2YWx1ZSkgewogIC8vIGlmIGVsZW1lbnQgaXMgdGhlIGRvY3VtZW50IG9iamVjdCB3b3JrIHdpdGggdGhlIGh0bWwgZWxlbWVudCBpbnN0ZWFkCiAgLy8gdGhpcyBtYWtlcyAkKGRvY3VtZW50KS5zY29wZSgpIHBvc3NpYmxlCiAgaWYoZWxlbWVudC5ub2RlVHlwZSA9PSBOT0RFX1RZUEVfRE9DVU1FTlQpIHsKICAgIGVsZW1lbnQgPSBlbGVtZW50LmRvY3VtZW50RWxlbWVudDsKICB9CiAgdmFyIG5hbWVzID0gaXNBcnJheShuYW1lKSA/IG5hbWUgOiBbbmFtZV07CgogIHdoaWxlIChlbGVtZW50KSB7CiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGlmICgodmFsdWUgPSBqcUxpdGUuZGF0YShlbGVtZW50LCBuYW1lc1tpXSkpICE9PSB1bmRlZmluZWQpIHJldHVybiB2YWx1ZTsKICAgIH0KCiAgICAvLyBJZiBkZWFsaW5nIHdpdGggYSBkb2N1bWVudCBmcmFnbWVudCBub2RlIHdpdGggYSBob3N0IGVsZW1lbnQsIGFuZCBubyBwYXJlbnQsIHVzZSB0aGUgaG9zdAogICAgLy8gZWxlbWVudCBhcyB0aGUgcGFyZW50LiBUaGlzIGVuYWJsZXMgZGlyZWN0aXZlcyB3aXRoaW4gYSBTaGFkb3cgRE9NIG9yIHBvbHlmaWxsZWQgU2hhZG93IERPTQogICAgLy8gdG8gbG9va3VwIHBhcmVudCBjb250cm9sbGVycy4KICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUgfHwgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCAmJiBlbGVtZW50Lmhvc3QpOwogIH0KfQoKZnVuY3Rpb24ganFMaXRlRW1wdHkoZWxlbWVudCkgewogIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTsKICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7CiAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7CiAgfQp9CgpmdW5jdGlvbiBqcUxpdGVSZW1vdmUoZWxlbWVudCwga2VlcERhdGEpIHsKICBpZiAoIWtlZXBEYXRhKSBqcUxpdGVEZWFsb2MoZWxlbWVudCk7CiAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7Cn0KCgpmdW5jdGlvbiBqcUxpdGVEb2N1bWVudExvYWRlZChhY3Rpb24sIHdpbikgewogIHdpbiA9IHdpbiB8fCB3aW5kb3c7CiAgaWYgKHdpbi5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7CiAgICAvLyBGb3JjZSB0aGUgYWN0aW9uIHRvIGJlIHJ1biBhc3luYyBmb3IgY29uc2lzdGVudCBiZWhhdmlvdXIKICAgIC8vIGZyb20gdGhlIGFjdGlvbidzIHBvaW50IG9mIHZpZXcKICAgIC8vIGkuZS4gaXQgd2lsbCBkZWZpbml0ZWx5IG5vdCBiZSBpbiBhICRhcHBseQogICAgd2luLnNldFRpbWVvdXQoYWN0aW9uKTsKICB9IGVsc2UgewogICAgLy8gTm8gbmVlZCB0byB1bmJpbmQgdGhpcyBoYW5kbGVyIGFzIGxvYWQgaXMgb25seSBldmVyIGNhbGxlZCBvbmNlCiAgICBqcUxpdGUod2luKS5vbignbG9hZCcsIGFjdGlvbik7CiAgfQp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLy8gRnVuY3Rpb25zIHdoaWNoIGFyZSBkZWNsYXJlZCBkaXJlY3RseS4KLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCnZhciBKUUxpdGVQcm90b3R5cGUgPSBKUUxpdGUucHJvdG90eXBlID0gewogIHJlYWR5OiBmdW5jdGlvbihmbikgewogICAgdmFyIGZpcmVkID0gZmFsc2U7CgogICAgZnVuY3Rpb24gdHJpZ2dlcigpIHsKICAgICAgaWYgKGZpcmVkKSByZXR1cm47CiAgICAgIGZpcmVkID0gdHJ1ZTsKICAgICAgZm4oKTsKICAgIH0KCiAgICAvLyBjaGVjayBpZiBkb2N1bWVudCBpcyBhbHJlYWR5IGxvYWRlZAogICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpewogICAgICBzZXRUaW1lb3V0KHRyaWdnZXIpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5vbignRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpOyAvLyB3b3JrcyBmb3IgbW9kZXJuIGJyb3dzZXJzIGFuZCBJRTkKICAgICAgLy8gd2UgY2FuIG5vdCB1c2UganFMaXRlIHNpbmNlIHdlIGFyZSBub3QgZG9uZSBsb2FkaW5nIGFuZCBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGxhdGVyLgogICAgICAvLyBqc2hpbnQgLVcwNjQKICAgICAgSlFMaXRlKHdpbmRvdykub24oJ2xvYWQnLCB0cmlnZ2VyKTsgLy8gZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCBmb3Igb3RoZXJzCiAgICAgIC8vIGpzaGludCArVzA2NAogICAgICB0aGlzLm9uKCdET01Db250ZW50TG9hZGVkJywgdHJpZ2dlcik7CiAgICB9CiAgfSwKICB0b1N0cmluZzogZnVuY3Rpb24oKSB7CiAgICB2YXIgdmFsdWUgPSBbXTsKICAgIGZvckVhY2godGhpcywgZnVuY3Rpb24oZSl7IHZhbHVlLnB1c2goJycgKyBlKTt9KTsKICAgIHJldHVybiAnWycgKyB2YWx1ZS5qb2luKCcsICcpICsgJ10nOwogIH0sCgogIGVxOiBmdW5jdGlvbihpbmRleCkgewogICAgICByZXR1cm4gKGluZGV4ID49IDApID8ganFMaXRlKHRoaXNbaW5kZXhdKSA6IGpxTGl0ZSh0aGlzW3RoaXMubGVuZ3RoICsgaW5kZXhdKTsKICB9LAoKICBsZW5ndGg6IDAsCiAgcHVzaDogcHVzaCwKICBzb3J0OiBbXS5zb3J0LAogIHNwbGljZTogW10uc3BsaWNlCn07CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyBnZXR0ZXIvc2V0dGVycy4KLy8gdGhlc2UgZnVuY3Rpb25zIHJldHVybiBzZWxmIG9uIHNldHRlciBhbmQKLy8gdmFsdWUgb24gZ2V0LgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KdmFyIEJPT0xFQU5fQVRUUiA9IHt9Owpmb3JFYWNoKCdtdWx0aXBsZSxzZWxlY3RlZCxjaGVja2VkLGRpc2FibGVkLHJlYWRPbmx5LHJlcXVpcmVkLG9wZW4nLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHZhbHVlKSB7CiAgQk9PTEVBTl9BVFRSW2xvd2VyY2FzZSh2YWx1ZSldID0gdmFsdWU7Cn0pOwp2YXIgQk9PTEVBTl9FTEVNRU5UUyA9IHt9Owpmb3JFYWNoKCdpbnB1dCxzZWxlY3Qsb3B0aW9uLHRleHRhcmVhLGJ1dHRvbixmb3JtLGRldGFpbHMnLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHZhbHVlKSB7CiAgQk9PTEVBTl9FTEVNRU5UU1t2YWx1ZV0gPSB0cnVlOwp9KTsKdmFyIEFMSUFTRURfQVRUUiA9IHsKICAnbmdNaW5sZW5ndGgnIDogJ21pbmxlbmd0aCcsCiAgJ25nTWF4bGVuZ3RoJyA6ICdtYXhsZW5ndGgnLAogICduZ01pbicgOiAnbWluJywKICAnbmdNYXgnIDogJ21heCcsCiAgJ25nUGF0dGVybicgOiAncGF0dGVybicKfTsKCmZ1bmN0aW9uIGdldEJvb2xlYW5BdHRyTmFtZShlbGVtZW50LCBuYW1lKSB7CiAgLy8gY2hlY2sgZG9tIGxhc3Qgc2luY2Ugd2Ugd2lsbCBtb3N0IGxpa2VseSBmYWlsIG9uIG5hbWUKICB2YXIgYm9vbGVhbkF0dHIgPSBCT09MRUFOX0FUVFJbbmFtZS50b0xvd2VyQ2FzZSgpXTsKCiAgLy8gYm9vbGVhbkF0dHIgaXMgaGVyZSB0d2ljZSB0byBtaW5pbWl6ZSBET00gYWNjZXNzCiAgcmV0dXJuIGJvb2xlYW5BdHRyICYmIEJPT0xFQU5fRUxFTUVOVFNbbm9kZU5hbWVfKGVsZW1lbnQpXSAmJiBib29sZWFuQXR0cjsKfQoKZnVuY3Rpb24gZ2V0QWxpYXNlZEF0dHJOYW1lKGVsZW1lbnQsIG5hbWUpIHsKICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lOwogIHJldHVybiAobm9kZU5hbWUgPT09ICdJTlBVVCcgfHwgbm9kZU5hbWUgPT09ICdURVhUQVJFQScpICYmIEFMSUFTRURfQVRUUltuYW1lXTsKfQoKZm9yRWFjaCh7CiAgZGF0YToganFMaXRlRGF0YSwKICByZW1vdmVEYXRhOiBqcUxpdGVSZW1vdmVEYXRhCn0sIGZ1bmN0aW9uKGZuLCBuYW1lKSB7CiAgSlFMaXRlW25hbWVdID0gZm47Cn0pOwoKZm9yRWFjaCh7CiAgZGF0YToganFMaXRlRGF0YSwKICBpbmhlcml0ZWREYXRhOiBqcUxpdGVJbmhlcml0ZWREYXRhLAoKICBzY29wZTogZnVuY3Rpb24oZWxlbWVudCkgewogICAgLy8gQ2FuJ3QgdXNlIGpxTGl0ZURhdGEgaGVyZSBkaXJlY3RseSBzbyB3ZSBzdGF5IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkhCiAgICByZXR1cm4ganFMaXRlLmRhdGEoZWxlbWVudCwgJyRzY29wZScpIHx8IGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQsIFsnJGlzb2xhdGVTY29wZScsICckc2NvcGUnXSk7CiAgfSwKCiAgaXNvbGF0ZVNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSEKICAgIHJldHVybiBqcUxpdGUuZGF0YShlbGVtZW50LCAnJGlzb2xhdGVTY29wZScpIHx8IGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZScpOwogIH0sCgogIGNvbnRyb2xsZXI6IGpxTGl0ZUNvbnRyb2xsZXIsCgogIGluamVjdG9yOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJGluamVjdG9yJyk7CiAgfSwKCiAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSkgewogICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7CiAgfSwKCiAgaGFzQ2xhc3M6IGpxTGl0ZUhhc0NsYXNzLAoKICBjc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7CiAgICBuYW1lID0gY2FtZWxDYXNlKG5hbWUpOwoKICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7CiAgICAgIGVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBlbGVtZW50LnN0eWxlW25hbWVdOwogICAgfQogIH0sCgogIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKXsKICAgIHZhciBsb3dlcmNhc2VkTmFtZSA9IGxvd2VyY2FzZShuYW1lKTsKICAgIGlmIChCT09MRUFOX0FUVFJbbG93ZXJjYXNlZE5hbWVdKSB7CiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7CiAgICAgICAgaWYgKCEhdmFsdWUpIHsKICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSB0cnVlOwogICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgbG93ZXJjYXNlZE5hbWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBlbGVtZW50W25hbWVdID0gZmFsc2U7CiAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShsb3dlcmNhc2VkTmFtZSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAoZWxlbWVudFtuYW1lXSB8fAogICAgICAgICAgICAgICAgIChlbGVtZW50LmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKG5hbWUpfHwgbm9vcCkuc3BlY2lmaWVkKQogICAgICAgICAgICAgICA/IGxvd2VyY2FzZWROYW1lCiAgICAgICAgICAgICAgIDogdW5kZWZpbmVkOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpOwogICAgfSBlbHNlIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSkgewogICAgICAvLyB0aGUgZXh0cmEgYXJndW1lbnQgIjIiIGlzIHRvIGdldCB0aGUgcmlnaHQgdGhpbmcgZm9yIGEuaHJlZiBpbiBJRSwgc2VlIGpRdWVyeSBjb2RlCiAgICAgIC8vIHNvbWUgZWxlbWVudHMgKGUuZy4gRG9jdW1lbnQpIGRvbid0IGhhdmUgZ2V0IGF0dHJpYnV0ZSwgc28gcmV0dXJuIHVuZGVmaW5lZAogICAgICB2YXIgcmV0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSwgMik7CiAgICAgIC8vIG5vcm1hbGl6ZSBub24tZXhpc3RpbmcgYXR0cmlidXRlcyB0byB1bmRlZmluZWQgKGFzIGpRdWVyeSkKICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDsKICAgIH0KICB9LAoKICBwcm9wOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCB2YWx1ZSkgewogICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGVsZW1lbnRbbmFtZV07CiAgICB9CiAgfSwKCiAgdGV4dDogKGZ1bmN0aW9uKCkgewogICAgZ2V0VGV4dC4kZHYgPSAnJzsKICAgIHJldHVybiBnZXRUZXh0OwoKICAgIGZ1bmN0aW9uIGdldFRleHQoZWxlbWVudCwgdmFsdWUpIHsKICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgewogICAgICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7CiAgICAgICAgcmV0dXJuIChub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUKSA/IGVsZW1lbnQudGV4dENvbnRlbnQgOiAnJzsKICAgICAgfQogICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7CiAgICB9CiAgfSkoKSwKCiAgdmFsOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkgewogICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgewogICAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSAmJiBub2RlTmFtZV8oZWxlbWVudCkgPT09ICdzZWxlY3QnKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICAgIGZvckVhY2goZWxlbWVudC5vcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDAgPyBudWxsIDogcmVzdWx0OwogICAgICB9CiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlOwogICAgfQogICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlOwogIH0sCgogIGh0bWw6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlKSB7CiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7CiAgICAgIHJldHVybiBlbGVtZW50LmlubmVySFRNTDsKICAgIH0KICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTsKICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7CiAgfSwKCiAgZW1wdHk6IGpxTGl0ZUVtcHR5Cn0sIGZ1bmN0aW9uKGZuLCBuYW1lKXsKICAvKioKICAgKiBQcm9wZXJ0aWVzOiB3cml0ZXMgcmV0dXJuIHNlbGVjdGlvbiwgcmVhZHMgcmV0dXJuIGZpcnN0IHZhbHVlCiAgICovCiAgSlFMaXRlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHsKICAgIHZhciBpLCBrZXk7CiAgICB2YXIgbm9kZUNvdW50ID0gdGhpcy5sZW5ndGg7CgogICAgLy8ganFMaXRlSGFzQ2xhc3MgaGFzIG9ubHkgdHdvIGFyZ3VtZW50cywgYnV0IGlzIGEgZ2V0dGVyLW9ubHkgZm4sIHNvIHdlIG5lZWQgdG8gc3BlY2lhbC1jYXNlIGl0CiAgICAvLyBpbiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbi4KICAgIC8vIGpxTGl0ZUVtcHR5IHRha2VzIG5vIGFyZ3VtZW50cyBidXQgaXMgYSBzZXR0ZXIuCiAgICBpZiAoZm4gIT09IGpxTGl0ZUVtcHR5ICYmCiAgICAgICAgKCgoZm4ubGVuZ3RoID09IDIgJiYgKGZuICE9PSBqcUxpdGVIYXNDbGFzcyAmJiBmbiAhPT0ganFMaXRlQ29udHJvbGxlcikpID8gYXJnMSA6IGFyZzIpID09PSB1bmRlZmluZWQpKSB7CiAgICAgIGlmIChpc09iamVjdChhcmcxKSkgewoKICAgICAgICAvLyB3ZSBhcmUgYSB3cml0ZSwgYnV0IHRoZSBvYmplY3QgcHJvcGVydGllcyBhcmUgdGhlIGtleS92YWx1ZXMKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHsKICAgICAgICAgIGlmIChmbiA9PT0ganFMaXRlRGF0YSkgewogICAgICAgICAgICAvLyBkYXRhKCkgdGFrZXMgdGhlIHdob2xlIG9iamVjdCBpbiBqUXVlcnkKICAgICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3IgKGtleSBpbiBhcmcxKSB7CiAgICAgICAgICAgICAgZm4odGhpc1tpXSwga2V5LCBhcmcxW2tleV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHdlIGFyZSBhIHJlYWQsIHNvIHJlYWQgdGhlIGZpcnN0IGNoaWxkLgogICAgICAgIC8vIFRPRE86IGRvIHdlIHN0aWxsIG5lZWQgdGhpcz8KICAgICAgICB2YXIgdmFsdWUgPSBmbi4kZHY7CiAgICAgICAgLy8gT25seSBpZiB3ZSBoYXZlICRkdiBkbyB3ZSBpdGVyYXRlIG92ZXIgYWxsLCBvdGhlcndpc2UgaXQgaXMganVzdCB0aGUgZmlyc3QgZWxlbWVudC4KICAgICAgICB2YXIgamogPSAodmFsdWUgPT09IHVuZGVmaW5lZCkgPyBNYXRoLm1pbihub2RlQ291bnQsIDEpIDogbm9kZUNvdW50OwogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgamo7IGorKykgewogICAgICAgICAgdmFyIG5vZGVWYWx1ZSA9IGZuKHRoaXNbal0sIGFyZzEsIGFyZzIpOwogICAgICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlICsgbm9kZVZhbHVlIDogbm9kZVZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBzbyBhcHBseSB0byBhbGwgY2hpbGRyZW4KICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7CiAgICAgICAgZm4odGhpc1tpXSwgYXJnMSwgYXJnMik7CiAgICAgIH0KICAgICAgLy8gcmV0dXJuIHNlbGYgZm9yIGNoYWluaW5nCiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH07Cn0pOwoKZnVuY3Rpb24gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cykgewogIHZhciBldmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQsIHR5cGUpIHsKICAgIC8vIGpRdWVyeSBzcGVjaWZpYyBhcGkKICAgIGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZXZlbnQuZGVmYXVsdFByZXZlbnRlZDsKICAgIH07CgogICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGUgfHwgZXZlbnQudHlwZV07CiAgICB2YXIgZXZlbnRGbnNMZW5ndGggPSBldmVudEZucyA/IGV2ZW50Rm5zLmxlbmd0aCA6IDA7CgogICAgaWYgKCFldmVudEZuc0xlbmd0aCkgcmV0dXJuOwoKICAgIGlmIChpc1VuZGVmaW5lZChldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQpKSB7CiAgICAgIHZhciBvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjsKICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgICAgZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTsKCiAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikgewogICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgfQoKICAgICAgICBpZiAob3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24pIHsKICAgICAgICAgIG9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLmNhbGwoZXZlbnQpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KCiAgICBldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID09PSB0cnVlOwogICAgfTsKCiAgICAvLyBDb3B5IGV2ZW50IGhhbmRsZXJzIGluIGNhc2UgZXZlbnQgaGFuZGxlcnMgYXJyYXkgaXMgbW9kaWZpZWQgZHVyaW5nIGV4ZWN1dGlvbi4KICAgIGlmICgoZXZlbnRGbnNMZW5ndGggPiAxKSkgewogICAgICBldmVudEZucyA9IHNoYWxsb3dDb3B5KGV2ZW50Rm5zKTsKICAgIH0KCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50Rm5zTGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7CiAgICAgICAgZXZlbnRGbnNbaV0uY2FsbChlbGVtZW50LCBldmVudCk7CiAgICAgIH0KICAgIH0KICB9OwoKICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjayBmb3IgYW5ndWxhck1vY2tzL2NsZWFyRGF0YUNhY2hlIHRoYXQgbWFrZXMgaXQgcG9zc2libGUgdG8gZGVyZWdpc3RlciBhbGwKICAvLyAgICAgICBldmVudHMgb24gYGVsZW1lbnRgCiAgZXZlbnRIYW5kbGVyLmVsZW0gPSBlbGVtZW50OwogIHJldHVybiBldmVudEhhbmRsZXI7Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBGdW5jdGlvbnMgaXRlcmF0aW5nIHRyYXZlcnNhbC4KLy8gVGhlc2UgZnVuY3Rpb25zIGNoYWluIHJlc3VsdHMgaW50byBhIHNpbmdsZQovLyBzZWxlY3Rvci4KLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCmZvckVhY2goewogIHJlbW92ZURhdGE6IGpxTGl0ZVJlbW92ZURhdGEsCgogIG9uOiBmdW5jdGlvbiBqcUxpdGVPbihlbGVtZW50LCB0eXBlLCBmbiwgdW5zdXBwb3J0ZWQpewogICAgaWYgKGlzRGVmaW5lZCh1bnN1cHBvcnRlZCkpIHRocm93IGpxTGl0ZU1pbkVycignb25hcmdzJywgJ2pxTGl0ZSNvbigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgb3IgYGV2ZW50RGF0YWAgcGFyYW1ldGVycycpOwoKICAgIC8vIERvIG5vdCBhZGQgZXZlbnQgaGFuZGxlcnMgdG8gbm9uLWVsZW1lbnRzIGJlY2F1c2UgdGhleSB3aWxsIG5vdCBiZSBjbGVhbmVkIHVwLgogICAgaWYgKCFqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCB0cnVlKTsKICAgIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUuZXZlbnRzOwogICAgdmFyIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGU7CgogICAgaWYgKCFoYW5kbGUpIHsKICAgICAgaGFuZGxlID0gZXhwYW5kb1N0b3JlLmhhbmRsZSA9IGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpOwogICAgfQoKICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL3N0cmluZy1pbmRleG9mLXZzLXNwbGl0CiAgICB2YXIgdHlwZXMgPSB0eXBlLmluZGV4T2YoJyAnKSA+PSAwID8gdHlwZS5zcGxpdCgnICcpIDogW3R5cGVdOwogICAgdmFyIGkgPSB0eXBlcy5sZW5ndGg7CgogICAgd2hpbGUgKGktLSkgewogICAgICB0eXBlID0gdHlwZXNbaV07CiAgICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlXTsKCiAgICAgIGlmICghZXZlbnRGbnMpIHsKICAgICAgICBldmVudHNbdHlwZV0gPSBbXTsKCiAgICAgICAgaWYgKHR5cGUgPT09ICdtb3VzZWVudGVyJyB8fCB0eXBlID09PSAnbW91c2VsZWF2ZScpIHsKICAgICAgICAgIC8vIFJlZmVyIHRvIGpRdWVyeSdzIGltcGxlbWVudGF0aW9uIG9mIG1vdXNlZW50ZXIgJiBtb3VzZWxlYXZlCiAgICAgICAgICAvLyBSZWFkIGFib3V0IG1vdXNlZW50ZXIgYW5kIG1vdXNlbGVhdmU6CiAgICAgICAgICAvLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2V2ZW50c19tb3VzZS5odG1sI2xpbms4CgogICAgICAgICAganFMaXRlT24oZWxlbWVudCwgTU9VU0VfRVZFTlRfTUFQW3R5cGVdLCBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7CiAgICAgICAgICAgIC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC4KICAgICAgICAgICAgLy8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3cKICAgICAgICAgICAgaWYgKCAhcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICF0YXJnZXQuY29udGFpbnMocmVsYXRlZCkpICl7CiAgICAgICAgICAgICAgaGFuZGxlKGV2ZW50LCB0eXBlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAodHlwZSAhPT0gJyRkZXN0cm95JykgewogICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyRm4oZWxlbWVudCwgdHlwZSwgaGFuZGxlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZXZlbnRGbnMgPSBldmVudHNbdHlwZV07CiAgICAgIH0KICAgICAgZXZlbnRGbnMucHVzaChmbik7CiAgICB9CiAgfSwKCiAgb2ZmOiBqcUxpdGVPZmYsCgogIG9uZTogZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHsKICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7CgogICAgLy9hZGQgdGhlIGxpc3RlbmVyIHR3aWNlIHNvIHRoYXQgd2hlbiBpdCBpcyBjYWxsZWQKICAgIC8veW91IGNhbiByZW1vdmUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGFuZCBzdGlsbCBiZQogICAgLy9hYmxlIHRvIGNhbGwgZWxlbWVudC5vZmYoZXYsIGZuKSBub3JtYWxseQogICAgZWxlbWVudC5vbih0eXBlLCBmdW5jdGlvbiBvbkZuKCkgewogICAgICBlbGVtZW50Lm9mZih0eXBlLCBmbik7CiAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIG9uRm4pOwogICAgfSk7CiAgICBlbGVtZW50Lm9uKHR5cGUsIGZuKTsKICB9LAoKICByZXBsYWNlV2l0aDogZnVuY3Rpb24oZWxlbWVudCwgcmVwbGFjZU5vZGUpIHsKICAgIHZhciBpbmRleCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAganFMaXRlRGVhbG9jKGVsZW1lbnQpOwogICAgZm9yRWFjaChuZXcgSlFMaXRlKHJlcGxhY2VOb2RlKSwgZnVuY3Rpb24obm9kZSl7CiAgICAgIGlmIChpbmRleCkgewogICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpOwogICAgICB9IGVsc2UgewogICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobm9kZSwgZWxlbWVudCk7CiAgICAgIH0KICAgICAgaW5kZXggPSBub2RlOwogICAgfSk7CiAgfSwKCiAgY2hpbGRyZW46IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHZhciBjaGlsZHJlbiA9IFtdOwogICAgZm9yRWFjaChlbGVtZW50LmNoaWxkTm9kZXMsIGZ1bmN0aW9uKGVsZW1lbnQpewogICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQpCiAgICAgICAgY2hpbGRyZW4ucHVzaChlbGVtZW50KTsKICAgIH0pOwogICAgcmV0dXJuIGNoaWxkcmVuOwogIH0sCgogIGNvbnRlbnRzOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gZWxlbWVudC5jb250ZW50RG9jdW1lbnQgfHwgZWxlbWVudC5jaGlsZE5vZGVzIHx8IFtdOwogIH0sCgogIGFwcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkgewogICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTsKICAgIGlmIChub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQgJiYgbm9kZVR5cGUgIT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCkgcmV0dXJuOwoKICAgIG5vZGUgPSBuZXcgSlFMaXRlKG5vZGUpOwoKICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGUubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICB2YXIgY2hpbGQgPSBub2RlW2ldOwogICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNoaWxkKTsKICAgIH0KICB9LAoKICBwcmVwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7CiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQpIHsKICAgICAgdmFyIGluZGV4ID0gZWxlbWVudC5maXJzdENoaWxkOwogICAgICBmb3JFYWNoKG5ldyBKUUxpdGUobm9kZSksIGZ1bmN0aW9uKGNoaWxkKXsKICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShjaGlsZCwgaW5kZXgpOwogICAgICB9KTsKICAgIH0KICB9LAoKICB3cmFwOiBmdW5jdGlvbihlbGVtZW50LCB3cmFwTm9kZSkgewogICAgd3JhcE5vZGUgPSBqcUxpdGUod3JhcE5vZGUpLmVxKDApLmNsb25lKClbMF07CiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgaWYgKHBhcmVudCkgewogICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKHdyYXBOb2RlLCBlbGVtZW50KTsKICAgIH0KICAgIHdyYXBOb2RlLmFwcGVuZENoaWxkKGVsZW1lbnQpOwogIH0sCgogIHJlbW92ZToganFMaXRlUmVtb3ZlLAoKICBkZXRhY2g6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGpxTGl0ZVJlbW92ZShlbGVtZW50LCB0cnVlKTsKICB9LAoKICBhZnRlcjogZnVuY3Rpb24oZWxlbWVudCwgbmV3RWxlbWVudCkgewogICAgdmFyIGluZGV4ID0gZWxlbWVudCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgbmV3RWxlbWVudCA9IG5ldyBKUUxpdGUobmV3RWxlbWVudCk7CgogICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbmV3RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIHZhciBub2RlID0gbmV3RWxlbWVudFtpXTsKICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBpbmRleC5uZXh0U2libGluZyk7CiAgICAgIGluZGV4ID0gbm9kZTsKICAgIH0KICB9LAoKICBhZGRDbGFzczoganFMaXRlQWRkQ2xhc3MsCiAgcmVtb3ZlQ2xhc3M6IGpxTGl0ZVJlbW92ZUNsYXNzLAoKICB0b2dnbGVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IsIGNvbmRpdGlvbikgewogICAgaWYgKHNlbGVjdG9yKSB7CiAgICAgIGZvckVhY2goc2VsZWN0b3Iuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY2xhc3NOYW1lKXsKICAgICAgICB2YXIgY2xhc3NDb25kaXRpb24gPSBjb25kaXRpb247CiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNsYXNzQ29uZGl0aW9uKSkgewogICAgICAgICAgY2xhc3NDb25kaXRpb24gPSAhanFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTsKICAgICAgICB9CiAgICAgICAgKGNsYXNzQ29uZGl0aW9uID8ganFMaXRlQWRkQ2xhc3MgOiBqcUxpdGVSZW1vdmVDbGFzcykoZWxlbWVudCwgY2xhc3NOYW1lKTsKICAgICAgfSk7CiAgICB9CiAgfSwKCiAgcGFyZW50OiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCA/IHBhcmVudCA6IG51bGw7CiAgfSwKCiAgbmV4dDogZnVuY3Rpb24oZWxlbWVudCkgewogICAgcmV0dXJuIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nOwogIH0sCgogIGZpbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKSB7CiAgICBpZiAoZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSkgewogICAgICByZXR1cm4gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3Rvcik7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gW107CiAgICB9CiAgfSwKCiAgY2xvbmU6IGpxTGl0ZUNsb25lLAoKICB0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGV4dHJhUGFyYW1ldGVycykgewoKICAgIHZhciBkdW1teUV2ZW50LCBldmVudEZuc0NvcHksIGhhbmRsZXJBcmdzOwogICAgdmFyIGV2ZW50TmFtZSA9IGV2ZW50LnR5cGUgfHwgZXZlbnQ7CiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQpOwogICAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZXZlbnRzOwogICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzICYmIGV2ZW50c1tldmVudE5hbWVdOwoKICAgIGlmIChldmVudEZucykgewogICAgICAvLyBDcmVhdGUgYSBkdW1teSBldmVudCB0byBwYXNzIHRvIHRoZSBoYW5kbGVycwogICAgICBkdW1teUV2ZW50ID0gewogICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsgfSwKICAgICAgICBpc0RlZmF1bHRQcmV2ZW50ZWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5kZWZhdWx0UHJldmVudGVkID09PSB0cnVlOyB9LAogICAgICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7IHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTsgfSwKICAgICAgICBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9PT0gdHJ1ZTsgfSwKICAgICAgICBzdG9wUHJvcGFnYXRpb246IG5vb3AsCiAgICAgICAgdHlwZTogZXZlbnROYW1lLAogICAgICAgIHRhcmdldDogZWxlbWVudAogICAgICB9OwoKICAgICAgLy8gSWYgYSBjdXN0b20gZXZlbnQgd2FzIHByb3ZpZGVkIHRoZW4gZXh0ZW5kIG91ciBkdW1teSBldmVudCB3aXRoIGl0CiAgICAgIGlmIChldmVudC50eXBlKSB7CiAgICAgICAgZHVtbXlFdmVudCA9IGV4dGVuZChkdW1teUV2ZW50LCBldmVudCk7CiAgICAgIH0KCiAgICAgIC8vIENvcHkgZXZlbnQgaGFuZGxlcnMgaW4gY2FzZSBldmVudCBoYW5kbGVycyBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgZXhlY3V0aW9uLgogICAgICBldmVudEZuc0NvcHkgPSBzaGFsbG93Q29weShldmVudEZucyk7CiAgICAgIGhhbmRsZXJBcmdzID0gZXh0cmFQYXJhbWV0ZXJzID8gW2R1bW15RXZlbnRdLmNvbmNhdChleHRyYVBhcmFtZXRlcnMpIDogW2R1bW15RXZlbnRdOwoKICAgICAgZm9yRWFjaChldmVudEZuc0NvcHksIGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgaWYgKCFkdW1teUV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHsKICAgICAgICAgIGZuLmFwcGx5KGVsZW1lbnQsIGhhbmRsZXJBcmdzKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KfSwgZnVuY3Rpb24oZm4sIG5hbWUpewogIC8qKgogICAqIGNoYWluaW5nIGZ1bmN0aW9ucwogICAqLwogIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7CiAgICB2YXIgdmFsdWU7CgogICAgZm9yKHZhciBpID0gMCwgaWkgPSB0aGlzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgewogICAgICAgIHZhbHVlID0gZm4odGhpc1tpXSwgYXJnMSwgYXJnMiwgYXJnMyk7CiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgICAgIC8vIGFueSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgbmVlZHMgdG8gYmUgd3JhcHBlZAogICAgICAgICAgdmFsdWUgPSBqcUxpdGUodmFsdWUpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBqcUxpdGVBZGROb2Rlcyh2YWx1ZSwgZm4odGhpc1tpXSwgYXJnMSwgYXJnMiwgYXJnMykpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogdGhpczsKICB9OwoKICAvLyBiaW5kIGxlZ2FjeSBiaW5kL3VuYmluZCB0byBvbi9vZmYKICBKUUxpdGUucHJvdG90eXBlLmJpbmQgPSBKUUxpdGUucHJvdG90eXBlLm9uOwogIEpRTGl0ZS5wcm90b3R5cGUudW5iaW5kID0gSlFMaXRlLnByb3RvdHlwZS5vZmY7Cn0pOwoKLyoqCiAqIENvbXB1dGVzIGEgaGFzaCBvZiBhbiAnb2JqJy4KICogSGFzaCBvZiBhOgogKiAgc3RyaW5nIGlzIHN0cmluZwogKiAgbnVtYmVyIGlzIG51bWJlciBhcyBzdHJpbmcKICogIG9iamVjdCBpcyBlaXRoZXIgcmVzdWx0IG9mIGNhbGxpbmcgJCRoYXNoS2V5IGZ1bmN0aW9uIG9uIHRoZSBvYmplY3Qgb3IgdW5pcXVlbHkgZ2VuZXJhdGVkIGlkLAogKiAgICAgICAgIHRoYXQgaXMgYWxzbyBhc3NpZ25lZCB0byB0aGUgJCRoYXNoS2V5IHByb3BlcnR5IG9mIHRoZSBvYmplY3QuCiAqCiAqIEBwYXJhbSBvYmoKICogQHJldHVybnMge3N0cmluZ30gaGFzaCBzdHJpbmcgc3VjaCB0aGF0IHRoZSBzYW1lIGlucHV0IHdpbGwgaGF2ZSB0aGUgc2FtZSBoYXNoIHN0cmluZy4KICogICAgICAgICBUaGUgcmVzdWx0aW5nIHN0cmluZyBrZXkgaXMgaW4gJ3R5cGU6aGFzaEtleScgZm9ybWF0LgogKi8KZnVuY3Rpb24gaGFzaEtleShvYmosIG5leHRVaWRGbikgewogIHZhciBrZXkgPSBvYmogJiYgb2JqLiQkaGFzaEtleTsKCiAgaWYgKGtleSkgewogICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHsKICAgICAga2V5ID0gb2JqLiQkaGFzaEtleSgpOwogICAgfQogICAgcmV0dXJuIGtleTsKICB9CgogIHZhciBvYmpUeXBlID0gdHlwZW9mIG9iajsKICBpZiAob2JqVHlwZSA9PSAnZnVuY3Rpb24nIHx8IChvYmpUeXBlID09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCkpIHsKICAgIGtleSA9IG9iai4kJGhhc2hLZXkgPSBvYmpUeXBlICsgJzonICsgKG5leHRVaWRGbiB8fCBuZXh0VWlkKSgpOwogIH0gZWxzZSB7CiAgICBrZXkgPSBvYmpUeXBlICsgJzonICsgb2JqOwogIH0KCiAgcmV0dXJuIGtleTsKfQoKLyoqCiAqIEhhc2hNYXAgd2hpY2ggY2FuIHVzZSBvYmplY3RzIGFzIGtleXMKICovCmZ1bmN0aW9uIEhhc2hNYXAoYXJyYXksIGlzb2xhdGVkVWlkKSB7CiAgaWYgKGlzb2xhdGVkVWlkKSB7CiAgICB2YXIgdWlkID0gMDsKICAgIHRoaXMubmV4dFVpZCA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gKyt1aWQ7CiAgICB9OwogIH0KICBmb3JFYWNoKGFycmF5LCB0aGlzLnB1dCwgdGhpcyk7Cn0KSGFzaE1hcC5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogU3RvcmUga2V5IHZhbHVlIHBhaXIKICAgKiBAcGFyYW0ga2V5IGtleSB0byBzdG9yZSBjYW4gYmUgYW55IHR5cGUKICAgKiBAcGFyYW0gdmFsdWUgdmFsdWUgdG8gc3RvcmUgY2FuIGJlIGFueSB0eXBlCiAgICovCiAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICB0aGlzW2hhc2hLZXkoa2V5LCB0aGlzLm5leHRVaWQpXSA9IHZhbHVlOwogIH0sCgogIC8qKgogICAqIEBwYXJhbSBrZXkKICAgKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgdmFsdWUgZm9yIHRoZSBrZXkKICAgKi8KICBnZXQ6IGZ1bmN0aW9uKGtleSkgewogICAgcmV0dXJuIHRoaXNbaGFzaEtleShrZXksIHRoaXMubmV4dFVpZCldOwogIH0sCgogIC8qKgogICAqIFJlbW92ZSB0aGUga2V5L3ZhbHVlIHBhaXIKICAgKiBAcGFyYW0ga2V5CiAgICovCiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHsKICAgIHZhciB2YWx1ZSA9IHRoaXNba2V5ID0gaGFzaEtleShrZXksIHRoaXMubmV4dFVpZCldOwogICAgZGVsZXRlIHRoaXNba2V5XTsKICAgIHJldHVybiB2YWx1ZTsKICB9Cn07CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBtb2R1bGUgbmcKICogQG5hbWUgYW5ndWxhci5pbmplY3RvcgogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQ3JlYXRlcyBhbiBpbmplY3RvciBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBmb3IgcmV0cmlldmluZyBzZXJ2aWNlcyBhcyB3ZWxsIGFzIGZvcgogKiBkZXBlbmRlbmN5IGluamVjdGlvbiAoc2VlIHtAbGluayBndWlkZS9kaSBkZXBlbmRlbmN5IGluamVjdGlvbn0pLgogKgoKICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWUKICogICAgICAgIHtAbGluayBhbmd1bGFyLm1vZHVsZX0uIFRoZSBgbmdgIG1vZHVsZSBtdXN0IGJlIGV4cGxpY2l0bHkgYWRkZWQuCiAqIEByZXR1cm5zIHtpbmplY3Rvcn0gSW5qZWN0b3Igb2JqZWN0LiBTZWUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uCiAqCiAqIEBleGFtcGxlCiAqIFR5cGljYWwgdXNhZ2UKICogYGBganMKICogICAvLyBjcmVhdGUgYW4gaW5qZWN0b3IKICogICB2YXIgJGluamVjdG9yID0gYW5ndWxhci5pbmplY3RvcihbJ25nJ10pOwogKgogKiAgIC8vIHVzZSB0aGUgaW5qZWN0b3IgdG8ga2ljayBvZmYgeW91ciBhcHBsaWNhdGlvbgogKiAgIC8vIHVzZSB0aGUgdHlwZSBpbmZlcmVuY2UgdG8gYXV0byBpbmplY3QgYXJndW1lbnRzLCBvciB1c2UgaW1wbGljaXQgaW5qZWN0aW9uCiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkcm9vdFNjb3BlLCAkY29tcGlsZSwgJGRvY3VtZW50KSB7CiAqICAgICAkY29tcGlsZSgkZG9jdW1lbnQpKCRyb290U2NvcGUpOwogKiAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7CiAqICAgfSk7CiAqIGBgYAogKgogKiBTb21ldGltZXMgeW91IHdhbnQgdG8gZ2V0IGFjY2VzcyB0byB0aGUgaW5qZWN0b3Igb2YgYSBjdXJyZW50bHkgcnVubmluZyBBbmd1bGFyIGFwcAogKiBmcm9tIG91dHNpZGUgQW5ndWxhci4gUGVyaGFwcywgeW91IHdhbnQgdG8gaW5qZWN0IGFuZCBjb21waWxlIHNvbWUgbWFya3VwIGFmdGVyIHRoZQogKiBhcHBsaWNhdGlvbiBoYXMgYmVlbiBib290c3RyYXBwZWQuIFlvdSBjYW4gZG8gdGhpcyB1c2luZyB0aGUgZXh0cmEgYGluamVjdG9yKClgIGFkZGVkCiAqIHRvIEpRdWVyeS9qcUxpdGUgZWxlbWVudHMuIFNlZSB7QGxpbmsgYW5ndWxhci5lbGVtZW50fS4KICoKICogKlRoaXMgaXMgZmFpcmx5IHJhcmUgYnV0IGNvdWxkIGJlIHRoZSBjYXNlIGlmIGEgdGhpcmQgcGFydHkgbGlicmFyeSBpcyBpbmplY3RpbmcgdGhlCiAqIG1hcmt1cC4qCiAqCiAqIEluIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSBhIG5ldyBibG9jayBvZiBIVE1MIGNvbnRhaW5pbmcgYSBgbmctY29udHJvbGxlcmAKICogZGlyZWN0aXZlIGlzIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50IGJvZHkgYnkgSlF1ZXJ5LiBXZSB0aGVuIGNvbXBpbGUgYW5kIGxpbmsKICogaXQgaW50byB0aGUgY3VycmVudCBBbmd1bGFySlMgc2NvcGUuCiAqCiAqIGBgYGpzCiAqIHZhciAkZGl2ID0gJCgnPGRpdiBuZy1jb250cm9sbGVyPSJNeUN0cmwiPnt7Y29udGVudC5sYWJlbH19PC9kaXY+Jyk7CiAqICQoZG9jdW1lbnQuYm9keSkuYXBwZW5kKCRkaXYpOwogKgogKiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmluamVjdG9yKCkuaW52b2tlKGZ1bmN0aW9uKCRjb21waWxlKSB7CiAqICAgdmFyIHNjb3BlID0gYW5ndWxhci5lbGVtZW50KCRkaXYpLnNjb3BlKCk7CiAqICAgJGNvbXBpbGUoJGRpdikoc2NvcGUpOwogKiB9KTsKICogYGBgCiAqLwoKCi8qKgogKiBAbmdkb2MgbW9kdWxlCiAqIEBuYW1lIGF1dG8KICogQGRlc2NyaXB0aW9uCiAqCiAqIEltcGxpY2l0IG1vZHVsZSB3aGljaCBnZXRzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gZWFjaCB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4KICovCgp2YXIgRk5fQVJHUyA9IC9eZnVuY3Rpb25ccypbXlwoXSpcKFxzKihbXlwpXSopXCkvbTsKdmFyIEZOX0FSR19TUExJVCA9IC8sLzsKdmFyIEZOX0FSRyA9IC9eXHMqKF8/KShcUys/KVwxXHMqJC87CnZhciBTVFJJUF9DT01NRU5UUyA9IC8oKFwvXC8uKiQpfChcL1wqW1xzXFNdKj9cKlwvKSkvbWc7CnZhciAkaW5qZWN0b3JNaW5FcnIgPSBtaW5FcnIoJyRpbmplY3RvcicpOwoKZnVuY3Rpb24gYW5vbkZuKGZuKSB7CiAgLy8gRm9yIGFub255bW91cyBmdW5jdGlvbnMsIHNob3dpbmcgYXQgdGhlIHZlcnkgbGVhc3QgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBjYW4gaGVscCBpbgogIC8vIGRlYnVnZ2luZy4KICB2YXIgZm5UZXh0ID0gZm4udG9TdHJpbmcoKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyksCiAgICAgIGFyZ3MgPSBmblRleHQubWF0Y2goRk5fQVJHUyk7CiAgaWYgKGFyZ3MpIHsKICAgIHJldHVybiAnZnVuY3Rpb24oJyArIChhcmdzWzFdIHx8ICcnKS5yZXBsYWNlKC9bXHNcclxuXSsvLCAnICcpICsgJyknOwogIH0KICByZXR1cm4gJ2ZuJzsKfQoKZnVuY3Rpb24gYW5ub3RhdGUoZm4sIHN0cmljdERpLCBuYW1lKSB7CiAgdmFyICRpbmplY3QsCiAgICAgIGZuVGV4dCwKICAgICAgYXJnRGVjbCwKICAgICAgbGFzdDsKCiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykgewogICAgaWYgKCEoJGluamVjdCA9IGZuLiRpbmplY3QpKSB7CiAgICAgICRpbmplY3QgPSBbXTsKICAgICAgaWYgKGZuLmxlbmd0aCkgewogICAgICAgIGlmIChzdHJpY3REaSkgewogICAgICAgICAgaWYgKCFpc1N0cmluZyhuYW1lKSB8fCAhbmFtZSkgewogICAgICAgICAgICBuYW1lID0gZm4ubmFtZSB8fCBhbm9uRm4oZm4pOwogICAgICAgICAgfQogICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdzdHJpY3RkaScsCiAgICAgICAgICAgICd7MH0gaXMgbm90IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gYW5kIGNhbm5vdCBiZSBpbnZva2VkIGluIHN0cmljdCBtb2RlJywgbmFtZSk7CiAgICAgICAgfQogICAgICAgIGZuVGV4dCA9IGZuLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpOwogICAgICAgIGFyZ0RlY2wgPSBmblRleHQubWF0Y2goRk5fQVJHUyk7CiAgICAgICAgZm9yRWFjaChhcmdEZWNsWzFdLnNwbGl0KEZOX0FSR19TUExJVCksIGZ1bmN0aW9uKGFyZykgewogICAgICAgICAgYXJnLnJlcGxhY2UoRk5fQVJHLCBmdW5jdGlvbihhbGwsIHVuZGVyc2NvcmUsIG5hbWUpIHsKICAgICAgICAgICAgJGluamVjdC5wdXNoKG5hbWUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgZm4uJGluamVjdCA9ICRpbmplY3Q7CiAgICB9CiAgfSBlbHNlIGlmIChpc0FycmF5KGZuKSkgewogICAgbGFzdCA9IGZuLmxlbmd0aCAtIDE7CiAgICBhc3NlcnRBcmdGbihmbltsYXN0XSwgJ2ZuJyk7CiAgICAkaW5qZWN0ID0gZm4uc2xpY2UoMCwgbGFzdCk7CiAgfSBlbHNlIHsKICAgIGFzc2VydEFyZ0ZuKGZuLCAnZm4nLCB0cnVlKTsKICB9CiAgcmV0dXJuICRpbmplY3Q7Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRpbmplY3RvcgogKgogKiBAZGVzY3JpcHRpb24KICoKICogYCRpbmplY3RvcmAgaXMgdXNlZCB0byByZXRyaWV2ZSBvYmplY3QgaW5zdGFuY2VzIGFzIGRlZmluZWQgYnkKICoge0BsaW5rIGF1dG8uJHByb3ZpZGUgcHJvdmlkZXJ9LCBpbnN0YW50aWF0ZSB0eXBlcywgaW52b2tlIG1ldGhvZHMsCiAqIGFuZCBsb2FkIG1vZHVsZXMuCiAqCiAqIFRoZSBmb2xsb3dpbmcgYWx3YXlzIGhvbGRzIHRydWU6CiAqCiAqIGBgYGpzCiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoKTsKICogICBleHBlY3QoJGluamVjdG9yLmdldCgnJGluamVjdG9yJykpLnRvQmUoJGluamVjdG9yKTsKICogICBleHBlY3QoJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkaW5qZWN0b3IpIHsKICogICAgIHJldHVybiAkaW5qZWN0b3I7CiAqICAgfSkpLnRvQmUoJGluamVjdG9yKTsKICogYGBgCiAqCiAqICMgSW5qZWN0aW9uIEZ1bmN0aW9uIEFubm90YXRpb24KICoKICogSmF2YVNjcmlwdCBkb2VzIG5vdCBoYXZlIGFubm90YXRpb25zLCBhbmQgYW5ub3RhdGlvbnMgYXJlIG5lZWRlZCBmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb24uIFRoZQogKiBmb2xsb3dpbmcgYXJlIGFsbCB2YWxpZCB3YXlzIG9mIGFubm90YXRpbmcgZnVuY3Rpb24gd2l0aCBpbmplY3Rpb24gYXJndW1lbnRzIGFuZCBhcmUgZXF1aXZhbGVudC4KICoKICogYGBganMKICogICAvLyBpbmZlcnJlZCAob25seSB3b3JrcyBpZiBjb2RlIG5vdCBtaW5pZmllZC9vYmZ1c2NhdGVkKQogKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oc2VydmljZUEpe30pOwogKgogKiAgIC8vIGFubm90YXRlZAogKiAgIGZ1bmN0aW9uIGV4cGxpY2l0KHNlcnZpY2VBKSB7fTsKICogICBleHBsaWNpdC4kaW5qZWN0ID0gWydzZXJ2aWNlQSddOwogKiAgICRpbmplY3Rvci5pbnZva2UoZXhwbGljaXQpOwogKgogKiAgIC8vIGlubGluZQogKiAgICRpbmplY3Rvci5pbnZva2UoWydzZXJ2aWNlQScsIGZ1bmN0aW9uKHNlcnZpY2VBKXt9XSk7CiAqIGBgYAogKgogKiAjIyBJbmZlcmVuY2UKICoKICogSW4gSmF2YVNjcmlwdCBjYWxsaW5nIGB0b1N0cmluZygpYCBvbiBhIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24uIFRoZSBkZWZpbml0aW9uCiAqIGNhbiB0aGVuIGJlIHBhcnNlZCBhbmQgdGhlIGZ1bmN0aW9uIGFyZ3VtZW50cyBjYW4gYmUgZXh0cmFjdGVkLiAqTk9URToqIFRoaXMgZG9lcyBub3Qgd29yayB3aXRoCiAqIG1pbmlmaWNhdGlvbiwgYW5kIG9iZnVzY2F0aW9uIHRvb2xzIHNpbmNlIHRoZXNlIHRvb2xzIGNoYW5nZSB0aGUgYXJndW1lbnQgbmFtZXMuCiAqCiAqICMjIGAkaW5qZWN0YCBBbm5vdGF0aW9uCiAqIEJ5IGFkZGluZyBhbiBgJGluamVjdGAgcHJvcGVydHkgb250byBhIGZ1bmN0aW9uIHRoZSBpbmplY3Rpb24gcGFyYW1ldGVycyBjYW4gYmUgc3BlY2lmaWVkLgogKgogKiAjIyBJbmxpbmUKICogQXMgYW4gYXJyYXkgb2YgaW5qZWN0aW9uIG5hbWVzLCB3aGVyZSB0aGUgbGFzdCBpdGVtIGluIHRoZSBhcnJheSBpcyB0aGUgZnVuY3Rpb24gdG8gY2FsbC4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSAkaW5qZWN0b3IjZ2V0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBSZXR1cm4gYW4gaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZSB0byByZXRyaWV2ZS4KICogQHJldHVybiB7Kn0gVGhlIGluc3RhbmNlLgogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRpbmplY3RvciNpbnZva2UKICoKICogQGRlc2NyaXB0aW9uCiAqIEludm9rZSB0aGUgbWV0aG9kIGFuZCBzdXBwbHkgdGhlIG1ldGhvZCBhcmd1bWVudHMgZnJvbSB0aGUgYCRpbmplY3RvcmAuCiAqCiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLiBGdW5jdGlvbiBwYXJhbWV0ZXJzIGFyZSBpbmplY3RlZCBhY2NvcmRpbmcgdG8gdGhlCiAqICAge0BsaW5rIGd1aWRlL2RpICRpbmplY3QgQW5ub3RhdGlvbn0gcnVsZXMuCiAqIEBwYXJhbSB7T2JqZWN0PX0gc2VsZiBUaGUgYHRoaXNgIGZvciB0aGUgaW52b2tlZCBtZXRob2QuCiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpcwogKiAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLgogKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBpbnZva2VkIGBmbmAgZnVuY3Rpb24uCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgJGluamVjdG9yI2hhcwogKgogKiBAZGVzY3JpcHRpb24KICogQWxsb3dzIHRoZSB1c2VyIHRvIHF1ZXJ5IGlmIHRoZSBwYXJ0aWN1bGFyIHNlcnZpY2UgZXhpc3RzLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIHF1ZXJ5LgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGluamVjdG9yIGhhcyBnaXZlbiBzZXJ2aWNlLgogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRpbmplY3RvciNpbnN0YW50aWF0ZQogKiBAZGVzY3JpcHRpb24KICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEpTIHR5cGUuIFRoZSBtZXRob2QgdGFrZXMgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgaW52b2tlcyB0aGUgbmV3CiAqIG9wZXJhdG9yLCBhbmQgc3VwcGxpZXMgYWxsIG9mIHRoZSBhcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGFzIHNwZWNpZmllZCBieSB0aGUKICogY29uc3RydWN0b3IgYW5ub3RhdGlvbi4KICoKICogQHBhcmFtIHtGdW5jdGlvbn0gVHlwZSBBbm5vdGF0ZWQgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpcwogKiBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLgogKiBAcmV0dXJucyB7T2JqZWN0fSBuZXcgaW5zdGFuY2Ugb2YgYFR5cGVgLgogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRpbmplY3RvciNhbm5vdGF0ZQogKgogKiBAZGVzY3JpcHRpb24KICogUmV0dXJucyBhbiBhcnJheSBvZiBzZXJ2aWNlIG5hbWVzIHdoaWNoIHRoZSBmdW5jdGlvbiBpcyByZXF1ZXN0aW5nIGZvciBpbmplY3Rpb24uIFRoaXMgQVBJIGlzCiAqIHVzZWQgYnkgdGhlIGluamVjdG9yIHRvIGRldGVybWluZSB3aGljaCBzZXJ2aWNlcyBuZWVkIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uIHdoZW4gdGhlCiAqIGZ1bmN0aW9uIGlzIGludm9rZWQuIFRoZXJlIGFyZSB0aHJlZSB3YXlzIGluIHdoaWNoIHRoZSBmdW5jdGlvbiBjYW4gYmUgYW5ub3RhdGVkIHdpdGggdGhlIG5lZWRlZAogKiBkZXBlbmRlbmNpZXMuCiAqCiAqICMgQXJndW1lbnQgbmFtZXMKICoKICogVGhlIHNpbXBsZXN0IGZvcm0gaXMgdG8gZXh0cmFjdCB0aGUgZGVwZW5kZW5jaWVzIGZyb20gdGhlIGFyZ3VtZW50cyBvZiB0aGUgZnVuY3Rpb24uIFRoaXMgaXMgZG9uZQogKiBieSBjb252ZXJ0aW5nIHRoZSBmdW5jdGlvbiBpbnRvIGEgc3RyaW5nIHVzaW5nIGB0b1N0cmluZygpYCBtZXRob2QgYW5kIGV4dHJhY3RpbmcgdGhlIGFyZ3VtZW50CiAqIG5hbWVzLgogKiBgYGBqcwogKiAgIC8vIEdpdmVuCiAqICAgZnVuY3Rpb24gTXlDb250cm9sbGVyKCRzY29wZSwgJHJvdXRlKSB7CiAqICAgICAvLyAuLi4KICogICB9CiAqCiAqICAgLy8gVGhlbgogKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTsKICogYGBgCiAqCiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHdvcmsgd2l0aCBjb2RlIG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uLiBGb3IgdGhpcyByZWFzb24gdGhlIGZvbGxvd2luZwogKiBhbm5vdGF0aW9uIHN0cmF0ZWdpZXMgYXJlIHN1cHBvcnRlZC4KICoKICogIyBUaGUgYCRpbmplY3RgIHByb3BlcnR5CiAqCiAqIElmIGEgZnVuY3Rpb24gaGFzIGFuIGAkaW5qZWN0YCBwcm9wZXJ0eSBhbmQgaXRzIHZhbHVlIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MsIHRoZW4gdGhlIHN0cmluZ3MKICogcmVwcmVzZW50IG5hbWVzIG9mIHNlcnZpY2VzIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uLgogKiBgYGBqcwogKiAgIC8vIEdpdmVuCiAqICAgdmFyIE15Q29udHJvbGxlciA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRTY29wZSwgb2JmdXNjYXRlZFJvdXRlKSB7CiAqICAgICAvLyAuLi4KICogICB9CiAqICAgLy8gRGVmaW5lIGZ1bmN0aW9uIGRlcGVuZGVuY2llcwogKiAgIE15Q29udHJvbGxlclsnJGluamVjdCddID0gWyckc2NvcGUnLCAnJHJvdXRlJ107CiAqCiAqICAgLy8gVGhlbgogKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTsKICogYGBgCiAqCiAqICMgVGhlIGFycmF5IG5vdGF0aW9uCiAqCiAqIEl0IGlzIG9mdGVuIGRlc2lyYWJsZSB0byBpbmxpbmUgSW5qZWN0ZWQgZnVuY3Rpb25zIGFuZCB0aGF0J3Mgd2hlbiBzZXR0aW5nIHRoZSBgJGluamVjdGAgcHJvcGVydHkKICogaXMgdmVyeSBpbmNvbnZlbmllbnQuIEluIHRoZXNlIHNpdHVhdGlvbnMgdXNpbmcgdGhlIGFycmF5IG5vdGF0aW9uIHRvIHNwZWNpZnkgdGhlIGRlcGVuZGVuY2llcyBpbgogKiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbiBpcyBhIGJldHRlciBjaG9pY2U6CiAqCiAqIGBgYGpzCiAqICAgLy8gV2Ugd2lzaCB0byB3cml0ZSB0aGlzIChub3QgbWluaWZpY2F0aW9uIC8gb2JmdXNjYXRpb24gc2FmZSkKICogICBpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUsICRyb290U2NvcGUpIHsKICogICAgIC8vIC4uLgogKiAgIH0pOwogKgogKiAgIC8vIFdlIGFyZSBmb3JjZWQgdG8gd3JpdGUgYnJlYWsgaW5saW5pbmcKICogICB2YXIgdG1wRm4gPSBmdW5jdGlvbihvYmZ1c2NhdGVkQ29tcGlsZSwgb2JmdXNjYXRlZFJvb3RTY29wZSkgewogKiAgICAgLy8gLi4uCiAqICAgfTsKICogICB0bXBGbi4kaW5qZWN0ID0gWyckY29tcGlsZScsICckcm9vdFNjb3BlJ107CiAqICAgaW5qZWN0b3IuaW52b2tlKHRtcEZuKTsKICoKICogICAvLyBUbyBiZXR0ZXIgc3VwcG9ydCBpbmxpbmUgZnVuY3Rpb24gdGhlIGlubGluZSBhbm5vdGF0aW9uIGlzIHN1cHBvcnRlZAogKiAgIGluamVjdG9yLmludm9rZShbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZDb21waWxlLCBvYmZSb290U2NvcGUpIHsKICogICAgIC8vIC4uLgogKiAgIH1dKTsKICoKICogICAvLyBUaGVyZWZvcmUKICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoCiAqICAgICAgWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmdXNfJGNvbXBpbGUsIG9iZnVzXyRyb290U2NvcGUpIHt9XSkKICogICAgKS50b0VxdWFsKFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZSddKTsKICogYGBgCiAqCiAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IGZuIEZ1bmN0aW9uIGZvciB3aGljaCBkZXBlbmRlbnQgc2VydmljZSBuYW1lcyBuZWVkIHRvCiAqIGJlIHJldHJpZXZlZCBhcyBkZXNjcmliZWQgYWJvdmUuCiAqCiAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn0gVGhlIG5hbWVzIG9mIHRoZSBzZXJ2aWNlcyB3aGljaCB0aGUgZnVuY3Rpb24gcmVxdWlyZXMuCiAqLwoKCgoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRwcm92aWRlCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBUaGUge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGEgbnVtYmVyIG9mIG1ldGhvZHMgZm9yIHJlZ2lzdGVyaW5nIGNvbXBvbmVudHMKICogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIE1hbnkgb2YgdGhlc2UgZnVuY3Rpb25zIGFyZSBhbHNvIGV4cG9zZWQgb24KICoge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfS4KICoKICogQW4gQW5ndWxhciAqKnNlcnZpY2UqKiBpcyBhIHNpbmdsZXRvbiBvYmplY3QgY3JlYXRlZCBieSBhICoqc2VydmljZSBmYWN0b3J5KiouICBUaGVzZSAqKnNlcnZpY2UKICogZmFjdG9yaWVzKiogYXJlIGZ1bmN0aW9ucyB3aGljaCwgaW4gdHVybiwgYXJlIGNyZWF0ZWQgYnkgYSAqKnNlcnZpY2UgcHJvdmlkZXIqKi4KICogVGhlICoqc2VydmljZSBwcm92aWRlcnMqKiBhcmUgY29uc3RydWN0b3IgZnVuY3Rpb25zLiBXaGVuIGluc3RhbnRpYXRlZCB0aGV5IG11c3QgY29udGFpbiBhCiAqIHByb3BlcnR5IGNhbGxlZCBgJGdldGAsIHdoaWNoIGhvbGRzIHRoZSAqKnNlcnZpY2UgZmFjdG9yeSoqIGZ1bmN0aW9uLgogKgogKiBXaGVuIHlvdSByZXF1ZXN0IGEgc2VydmljZSwgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9IGlzIHJlc3BvbnNpYmxlIGZvciBmaW5kaW5nIHRoZQogKiBjb3JyZWN0ICoqc2VydmljZSBwcm92aWRlcioqLCBpbnN0YW50aWF0aW5nIGl0IGFuZCB0aGVuIGNhbGxpbmcgaXRzIGAkZ2V0YCAqKnNlcnZpY2UgZmFjdG9yeSoqCiAqIGZ1bmN0aW9uIHRvIGdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlICoqc2VydmljZSoqLgogKgogKiBPZnRlbiBzZXJ2aWNlcyBoYXZlIG5vIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhbmQgdGhlcmUgaXMgbm8gbmVlZCB0byBhZGQgbWV0aG9kcyB0byB0aGUgc2VydmljZQogKiBwcm92aWRlci4gIFRoZSBwcm92aWRlciB3aWxsIGJlIG5vIG1vcmUgdGhhbiBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpdGggYSBgJGdldGAgcHJvcGVydHkuIEZvcgogKiB0aGVzZSBjYXNlcyB0aGUge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGFkZGl0aW9uYWwgaGVscGVyIG1ldGhvZHMgdG8gcmVnaXN0ZXIKICogc2VydmljZXMgd2l0aG91dCBzcGVjaWZ5aW5nIGEgcHJvdmlkZXIuCiAqCiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgcHJvdmlkZXIocHJvdmlkZXIpfSAtIHJlZ2lzdGVycyBhICoqc2VydmljZSBwcm92aWRlcioqIHdpdGggdGhlCiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfQogKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50IGNvbnN0YW50KG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGJ5CiAqICAgICBwcm92aWRlcnMgYW5kIHNlcnZpY2VzLgogKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlKG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIG9ubHkgYmUgYWNjZXNzZWQgYnkKICogICAgIHNlcnZpY2VzLCBub3QgcHJvdmlkZXJzLgogKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgZmFjdG9yeShmbil9IC0gcmVnaXN0ZXJzIGEgc2VydmljZSAqKmZhY3RvcnkgZnVuY3Rpb24qKiwgYGZuYCwKICogICAgIHRoYXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogb2JqZWN0LCB3aG9zZSBgJGdldGAgcHJvcGVydHkgd2lsbCBjb250YWluIHRoZQogKiAgICAgZ2l2ZW4gZmFjdG9yeSBmdW5jdGlvbi4KICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlIHNlcnZpY2UoY2xhc3MpfSAtIHJlZ2lzdGVycyBhICoqY29uc3RydWN0b3IgZnVuY3Rpb24qKiwgYGNsYXNzYAogKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGluc3RhbnRpYXRlCiAqICAgICAgYSBuZXcgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiBjb25zdHJ1Y3RvciBmdW5jdGlvbi4KICoKICogU2VlIHRoZSBpbmRpdmlkdWFsIG1ldGhvZHMgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzLgogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRwcm92aWRlI3Byb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKgogKiBSZWdpc3RlciBhICoqcHJvdmlkZXIgZnVuY3Rpb24qKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gUHJvdmlkZXIgZnVuY3Rpb25zCiAqIGFyZSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMsIHdob3NlIGluc3RhbmNlcyBhcmUgcmVzcG9uc2libGUgZm9yICJwcm92aWRpbmciIGEgZmFjdG9yeSBmb3IgYQogKiBzZXJ2aWNlLgogKgogKiBTZXJ2aWNlIHByb3ZpZGVyIG5hbWVzIHN0YXJ0IHdpdGggdGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdGhleSBwcm92aWRlIGZvbGxvd2VkIGJ5IGBQcm92aWRlcmAuCiAqIEZvciBleGFtcGxlLCB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSBoYXMgYSBwcm92aWRlciBjYWxsZWQKICoge0BsaW5rIG5nLiRsb2dQcm92aWRlciAkbG9nUHJvdmlkZXJ9LgogKgogKiBTZXJ2aWNlIHByb3ZpZGVyIG9iamVjdHMgY2FuIGhhdmUgYWRkaXRpb25hbCBtZXRob2RzIHdoaWNoIGFsbG93IGNvbmZpZ3VyYXRpb24gb2YgdGhlIHByb3ZpZGVyCiAqIGFuZCBpdHMgc2VydmljZS4gSW1wb3J0YW50bHksIHlvdSBjYW4gY29uZmlndXJlIHdoYXQga2luZCBvZiBzZXJ2aWNlIGlzIGNyZWF0ZWQgYnkgdGhlIGAkZ2V0YAogKiBtZXRob2QsIG9yIGhvdyB0aGF0IHNlcnZpY2Ugd2lsbCBhY3QuIEZvciBleGFtcGxlLCB0aGUge0BsaW5rIG5nLiRsb2dQcm92aWRlciAkbG9nUHJvdmlkZXJ9IGhhcyBhCiAqIG1ldGhvZCB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZCBkZWJ1Z0VuYWJsZWR9CiAqIHdoaWNoIGxldHMgeW91IHNwZWNpZnkgd2hldGhlciB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSB3aWxsIGxvZyBkZWJ1ZyBtZXNzYWdlcyB0byB0aGUKICogY29uc29sZSBvciBub3QuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4gTk9URTogdGhlIHByb3ZpZGVyIHdpbGwgYmUgYXZhaWxhYmxlIHVuZGVyIGBuYW1lICsKICAgICAgICAgICAgICAgICAgICAgICAgJ1Byb3ZpZGVyJ2Aga2V5LgogKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oKSl9IHByb3ZpZGVyIElmIHRoZSBwcm92aWRlciBpczoKICoKICogICAtIGBPYmplY3RgOiB0aGVuIGl0IHNob3VsZCBoYXZlIGEgYCRnZXRgIG1ldGhvZC4gVGhlIGAkZ2V0YCBtZXRob2Qgd2lsbCBiZSBpbnZva2VkIHVzaW5nCiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlICRpbmplY3Rvci5pbnZva2UoKX0gd2hlbiBhbiBpbnN0YW5jZSBuZWVkcyB0byBiZSBjcmVhdGVkLgogKiAgIC0gYENvbnN0cnVjdG9yYDogYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHByb3ZpZGVyIHdpbGwgYmUgY3JlYXRlZCB1c2luZwogKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yI2luc3RhbnRpYXRlICRpbmplY3Rvci5pbnN0YW50aWF0ZSgpfSwgdGhlbiB0cmVhdGVkIGFzIGBvYmplY3RgLgogKgogKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlCgogKiBAZXhhbXBsZQogKgogKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNyZWF0ZSBhIHNpbXBsZSBldmVudCB0cmFja2luZyBzZXJ2aWNlIGFuZCByZWdpc3RlciBpdCB1c2luZwogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS4KICoKICogYGBganMKICogIC8vIERlZmluZSB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyCiAqICBmdW5jdGlvbiBFdmVudFRyYWNrZXJQcm92aWRlcigpIHsKICogICAgdmFyIHRyYWNraW5nVXJsID0gJy90cmFjayc7CiAqCiAqICAgIC8vIEEgcHJvdmlkZXIgbWV0aG9kIGZvciBjb25maWd1cmluZyB3aGVyZSB0aGUgdHJhY2tlZCBldmVudHMgc2hvdWxkIGJlZW4gc2F2ZWQKICogICAgdGhpcy5zZXRUcmFja2luZ1VybCA9IGZ1bmN0aW9uKHVybCkgewogKiAgICAgIHRyYWNraW5nVXJsID0gdXJsOwogKiAgICB9OwogKgogKiAgICAvLyBUaGUgc2VydmljZSBmYWN0b3J5IGZ1bmN0aW9uCiAqICAgIHRoaXMuJGdldCA9IFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkgewogKiAgICAgIHZhciB0cmFja2VkRXZlbnRzID0ge307CiAqICAgICAgcmV0dXJuIHsKICogICAgICAgIC8vIENhbGwgdGhpcyB0byB0cmFjayBhbiBldmVudAogKiAgICAgICAgZXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7CiAqICAgICAgICAgIHZhciBjb3VudCA9IHRyYWNrZWRFdmVudHNbZXZlbnRdIHx8IDA7CiAqICAgICAgICAgIGNvdW50ICs9IDE7CiAqICAgICAgICAgIHRyYWNrZWRFdmVudHNbZXZlbnRdID0gY291bnQ7CiAqICAgICAgICAgIHJldHVybiBjb3VudDsKICogICAgICAgIH0sCiAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gc2F2ZSB0aGUgdHJhY2tlZCBldmVudHMgdG8gdGhlIHRyYWNraW5nVXJsCiAqICAgICAgICBzYXZlOiBmdW5jdGlvbigpIHsKICogICAgICAgICAgJGh0dHAucG9zdCh0cmFja2luZ1VybCwgdHJhY2tlZEV2ZW50cyk7CiAqICAgICAgICB9CiAqICAgICAgfTsKICogICAgfV07CiAqICB9CiAqCiAqICBkZXNjcmliZSgnZXZlbnRUcmFja2VyJywgZnVuY3Rpb24oKSB7CiAqICAgIHZhciBwb3N0U3B5OwogKgogKiAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbigkcHJvdmlkZSkgewogKiAgICAgIC8vIFJlZ2lzdGVyIHRoZSBldmVudFRyYWNrZXIgcHJvdmlkZXIKICogICAgICAkcHJvdmlkZS5wcm92aWRlcignZXZlbnRUcmFja2VyJywgRXZlbnRUcmFja2VyUHJvdmlkZXIpOwogKiAgICB9KSk7CiAqCiAqICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKGV2ZW50VHJhY2tlclByb3ZpZGVyKSB7CiAqICAgICAgLy8gQ29uZmlndXJlIGV2ZW50VHJhY2tlciBwcm92aWRlcgogKiAgICAgIGV2ZW50VHJhY2tlclByb3ZpZGVyLnNldFRyYWNraW5nVXJsKCcvY3VzdG9tLXRyYWNrJyk7CiAqICAgIH0pKTsKICoKICogICAgaXQoJ3RyYWNrcyBldmVudHMnLCBpbmplY3QoZnVuY3Rpb24oZXZlbnRUcmFja2VyKSB7CiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgxKTsKICogICAgICBleHBlY3QoZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpKS50b0VxdWFsKDIpOwogKiAgICB9KSk7CiAqCiAqICAgIGl0KCdzYXZlcyB0byB0aGUgdHJhY2tpbmcgdXJsJywgaW5qZWN0KGZ1bmN0aW9uKGV2ZW50VHJhY2tlciwgJGh0dHApIHsKICogICAgICBwb3N0U3B5ID0gc3B5T24oJGh0dHAsICdwb3N0Jyk7CiAqICAgICAgZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpOwogKiAgICAgIGV2ZW50VHJhY2tlci5zYXZlKCk7CiAqICAgICAgZXhwZWN0KHBvc3RTcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTsKICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzBdKS5ub3QudG9FcXVhbCgnL3RyYWNrJyk7CiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkudG9FcXVhbCgnL2N1c3RvbS10cmFjaycpOwogKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMV0pLnRvRXF1YWwoeyAnbG9naW4nOiAxIH0pOwogKiAgICB9KSk7CiAqICB9KTsKICogYGBgCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgJHByb3ZpZGUjZmFjdG9yeQogKiBAZGVzY3JpcHRpb24KICoKICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgZmFjdG9yeSoqLCB3aGljaCB3aWxsIGJlIGNhbGxlZCB0byByZXR1cm4gdGhlIHNlcnZpY2UgaW5zdGFuY2UuCiAqIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHMgcHJvdmlkZXIgY29uc2lzdHMgb2Ygb25seSBhIGAkZ2V0YCBwcm9wZXJ0eSwKICogd2hpY2ggaXMgdGhlIGdpdmVuIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvbi4KICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KGdldEZuKX0gaWYgeW91IGRvIG5vdCBuZWVkIHRvCiAqIGNvbmZpZ3VyZSB5b3VyIHNlcnZpY2UgaW4gYSBwcm92aWRlci4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9ICRnZXRGbiBUaGUgJGdldEZuIGZvciB0aGUgaW5zdGFuY2UgY3JlYXRpb24uIEludGVybmFsbHkgdGhpcyBpcyBhIHNob3J0IGhhbmQKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGAkcHJvdmlkZS5wcm92aWRlcihuYW1lLCB7JGdldDogJGdldEZufSlgLgogKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlCiAqCiAqIEBleGFtcGxlCiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiByZWdpc3RlcmluZyBhIHNlcnZpY2UKICogYGBganMKICogICAkcHJvdmlkZS5mYWN0b3J5KCdwaW5nJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7CiAqICAgICByZXR1cm4gZnVuY3Rpb24gcGluZygpIHsKICogICAgICAgcmV0dXJuICRodHRwLnNlbmQoJy9waW5nJyk7CiAqICAgICB9OwogKiAgIH1dKTsKICogYGBgCiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6CiAqIGBgYGpzCiAqICAgc29tZU1vZHVsZS5jb250cm9sbGVyKCdDdHJsJywgWydwaW5nJywgZnVuY3Rpb24ocGluZykgewogKiAgICAgcGluZygpOwogKiAgIH1dKTsKICogYGBgCiAqLwoKCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRwcm92aWRlI3NlcnZpY2UKICogQGRlc2NyaXB0aW9uCiAqCiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGNvbnN0cnVjdG9yKiosIHdoaWNoIHdpbGwgYmUgaW52b2tlZCB3aXRoIGBuZXdgIHRvIGNyZWF0ZSB0aGUgc2VydmljZQogKiBpbnN0YW5jZS4KICogVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0cyBwcm92aWRlcidzIGAkZ2V0YCBwcm9wZXJ0eSBpcyB0aGUgc2VydmljZQogKiBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBpbnN0YW50aWF0ZSB0aGUgc2VydmljZSBpbnN0YW5jZS4KICoKICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0gaWYgeW91IGRlZmluZSB5b3VyIHNlcnZpY2UKICogYXMgYSB0eXBlL2NsYXNzLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIEEgY2xhc3MgKGNvbnN0cnVjdG9yIGZ1bmN0aW9uKSB0aGF0IHdpbGwgYmUgaW5zdGFudGlhdGVkLgogKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlCiAqCiAqIEBleGFtcGxlCiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiByZWdpc3RlcmluZyBhIHNlcnZpY2UgdXNpbmcKICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0uCiAqIGBgYGpzCiAqICAgdmFyIFBpbmcgPSBmdW5jdGlvbigkaHR0cCkgewogKiAgICAgdGhpcy4kaHR0cCA9ICRodHRwOwogKiAgIH07CiAqCiAqICAgUGluZy4kaW5qZWN0ID0gWyckaHR0cCddOwogKgogKiAgIFBpbmcucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbigpIHsKICogICAgIHJldHVybiB0aGlzLiRodHRwLmdldCgnL3BpbmcnKTsKICogICB9OwogKiAgICRwcm92aWRlLnNlcnZpY2UoJ3BpbmcnLCBQaW5nKTsKICogYGBgCiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6CiAqIGBgYGpzCiAqICAgc29tZU1vZHVsZS5jb250cm9sbGVyKCdDdHJsJywgWydwaW5nJywgZnVuY3Rpb24ocGluZykgewogKiAgICAgcGluZy5zZW5kKCk7CiAqICAgfV0pOwogKiBgYGAKICovCgoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgJHByb3ZpZGUjdmFsdWUKICogQGRlc2NyaXB0aW9uCiAqCiAqIFJlZ2lzdGVyIGEgKip2YWx1ZSBzZXJ2aWNlKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0sIHN1Y2ggYXMgYSBzdHJpbmcsIGEKICogbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24uICBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzCiAqIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB0aGUgKip2YWx1ZQogKiBzZXJ2aWNlKiouCiAqCiAqIFZhbHVlIHNlcnZpY2VzIGFyZSBzaW1pbGFyIHRvIGNvbnN0YW50IHNlcnZpY2VzLCBleGNlcHQgdGhhdCB0aGV5IGNhbm5vdCBiZSBpbmplY3RlZCBpbnRvIGEKICogbW9kdWxlIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKHNlZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnfSkgYnV0IHRoZXkgY2FuIGJlIG92ZXJyaWRkZW4gYnkKICogYW4gQW5ndWxhcgogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLgogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZS4KICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZQogKgogKiBAZXhhbXBsZQogKiBIZXJlIGFyZSBzb21lIGV4YW1wbGVzIG9mIGNyZWF0aW5nIHZhbHVlIHNlcnZpY2VzLgogKiBgYGBqcwogKiAgICRwcm92aWRlLnZhbHVlKCdBRE1JTl9VU0VSJywgJ2FkbWluJyk7CiAqCiAqICAgJHByb3ZpZGUudmFsdWUoJ1JvbGVMb29rdXAnLCB7IGFkbWluOiAwLCB3cml0ZXI6IDEsIHJlYWRlcjogMiB9KTsKICoKICogICAkcHJvdmlkZS52YWx1ZSgnaGFsZk9mJywgZnVuY3Rpb24odmFsdWUpIHsKICogICAgIHJldHVybiB2YWx1ZSAvIDI7CiAqICAgfSk7CiAqIGBgYAogKi8KCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSAkcHJvdmlkZSNjb25zdGFudAogKiBAZGVzY3JpcHRpb24KICoKICogUmVnaXN0ZXIgYSAqKmNvbnN0YW50IHNlcnZpY2UqKiwgc3VjaCBhcyBhIHN0cmluZywgYSBudW1iZXIsIGFuIGFycmF5LCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwKICogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIFVubGlrZSB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZX0gaXQgY2FuIGJlCiAqIGluamVjdGVkIGludG8gYSBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBhbmQgaXQgY2Fubm90CiAqIGJlIG92ZXJyaWRkZW4gYnkgYW4gQW5ndWxhciB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbnN0YW50LgogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBjb25zdGFudCB2YWx1ZS4KICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBpbnN0YW5jZQogKgogKiBAZXhhbXBsZQogKiBIZXJlIGEgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyBjb25zdGFudHM6CiAqIGBgYGpzCiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ1NIQVJEX0hFSUdIVCcsIDMwNik7CiAqCiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ01ZX0NPTE9VUlMnLCBbJ3JlZCcsICdibHVlJywgJ2dyZXknXSk7CiAqCiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ2RvdWJsZScsIGZ1bmN0aW9uKHZhbHVlKSB7CiAqICAgICByZXR1cm4gdmFsdWUgKiAyOwogKiAgIH0pOwogKiBgYGAKICovCgoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgJHByb3ZpZGUjZGVjb3JhdG9yCiAqIEBkZXNjcmlwdGlvbgogKgogKiBSZWdpc3RlciBhICoqc2VydmljZSBkZWNvcmF0b3IqKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gQSBzZXJ2aWNlIGRlY29yYXRvcgogKiBpbnRlcmNlcHRzIHRoZSBjcmVhdGlvbiBvZiBhIHNlcnZpY2UsIGFsbG93aW5nIGl0IHRvIG92ZXJyaWRlIG9yIG1vZGlmeSB0aGUgYmVoYXZpb3VyIG9mIHRoZQogKiBzZXJ2aWNlLiBUaGUgb2JqZWN0IHJldHVybmVkIGJ5IHRoZSBkZWNvcmF0b3IgbWF5IGJlIHRoZSBvcmlnaW5hbCBzZXJ2aWNlLCBvciBhIG5ldyBzZXJ2aWNlCiAqIG9iamVjdCB3aGljaCByZXBsYWNlcyBvciB3cmFwcyBhbmQgZGVsZWdhdGVzIHRvIHRoZSBvcmlnaW5hbCBzZXJ2aWNlLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmljZSB0byBkZWNvcmF0ZS4KICogQHBhcmFtIHtmdW5jdGlvbigpfSBkZWNvcmF0b3IgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZQogKiAgICBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHVzaW5nCiAqICAgIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlIGluamVjdG9yLmludm9rZX0gbWV0aG9kIGFuZCBpcyB0aGVyZWZvcmUgZnVsbHkgaW5qZWN0YWJsZS4KICogICAgTG9jYWwgaW5qZWN0aW9uIGFyZ3VtZW50czoKICoKICogICAgKiBgJGRlbGVnYXRlYCAtIFRoZSBvcmlnaW5hbCBzZXJ2aWNlIGluc3RhbmNlLCB3aGljaCBjYW4gYmUgbW9ua2V5IHBhdGNoZWQsIGNvbmZpZ3VyZWQsCiAqICAgICAgZGVjb3JhdGVkIG9yIGRlbGVnYXRlZCB0by4KICoKICogQGV4YW1wbGUKICogSGVyZSB3ZSBkZWNvcmF0ZSB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSB0byBjb252ZXJ0IHdhcm5pbmdzIHRvIGVycm9ycyBieSBpbnRlcmNlcHRpbmcKICogY2FsbHMgdG8ge0BsaW5rIG5nLiRsb2cjZXJyb3IgJGxvZy53YXJuKCl9LgogKiBgYGBqcwogKiAgICRwcm92aWRlLmRlY29yYXRvcignJGxvZycsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24oJGRlbGVnYXRlKSB7CiAqICAgICAkZGVsZWdhdGUud2FybiA9ICRkZWxlZ2F0ZS5lcnJvcjsKICogICAgIHJldHVybiAkZGVsZWdhdGU7CiAqICAgfV0pOwogKiBgYGAKICovCgoKZnVuY3Rpb24gY3JlYXRlSW5qZWN0b3IobW9kdWxlc1RvTG9hZCwgc3RyaWN0RGkpIHsKICBzdHJpY3REaSA9IChzdHJpY3REaSA9PT0gdHJ1ZSk7CiAgdmFyIElOU1RBTlRJQVRJTkcgPSB7fSwKICAgICAgcHJvdmlkZXJTdWZmaXggPSAnUHJvdmlkZXInLAogICAgICBwYXRoID0gW10sCiAgICAgIGxvYWRlZE1vZHVsZXMgPSBuZXcgSGFzaE1hcChbXSwgdHJ1ZSksCiAgICAgIHByb3ZpZGVyQ2FjaGUgPSB7CiAgICAgICAgJHByb3ZpZGU6IHsKICAgICAgICAgICAgcHJvdmlkZXI6IHN1cHBvcnRPYmplY3QocHJvdmlkZXIpLAogICAgICAgICAgICBmYWN0b3J5OiBzdXBwb3J0T2JqZWN0KGZhY3RvcnkpLAogICAgICAgICAgICBzZXJ2aWNlOiBzdXBwb3J0T2JqZWN0KHNlcnZpY2UpLAogICAgICAgICAgICB2YWx1ZTogc3VwcG9ydE9iamVjdCh2YWx1ZSksCiAgICAgICAgICAgIGNvbnN0YW50OiBzdXBwb3J0T2JqZWN0KGNvbnN0YW50KSwKICAgICAgICAgICAgZGVjb3JhdG9yOiBkZWNvcmF0b3IKICAgICAgICAgIH0KICAgICAgfSwKICAgICAgcHJvdmlkZXJJbmplY3RvciA9IChwcm92aWRlckNhY2hlLiRpbmplY3RvciA9CiAgICAgICAgICBjcmVhdGVJbnRlcm5hbEluamVjdG9yKHByb3ZpZGVyQ2FjaGUsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VucHInLCAiVW5rbm93biBwcm92aWRlcjogezB9IiwgcGF0aC5qb2luKCcgPC0gJykpOwogICAgICAgICAgfSkpLAogICAgICBpbnN0YW5jZUNhY2hlID0ge30sCiAgICAgIGluc3RhbmNlSW5qZWN0b3IgPSAoaW5zdGFuY2VDYWNoZS4kaW5qZWN0b3IgPQogICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3RvcihpbnN0YW5jZUNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlbmFtZSkgewogICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlbmFtZSArIHByb3ZpZGVyU3VmZml4KTsKICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKHByb3ZpZGVyLiRnZXQsIHByb3ZpZGVyLCB1bmRlZmluZWQsIHNlcnZpY2VuYW1lKTsKICAgICAgICAgIH0pKTsKCgogIGZvckVhY2gobG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCksIGZ1bmN0aW9uKGZuKSB7IGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGZuIHx8IG5vb3ApOyB9KTsKCiAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3I7CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vICRwcm92aWRlcgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICBmdW5jdGlvbiBzdXBwb3J0T2JqZWN0KGRlbGVnYXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgICBpZiAoaXNPYmplY3Qoa2V5KSkgewogICAgICAgIGZvckVhY2goa2V5LCByZXZlcnNlUGFyYW1zKGRlbGVnYXRlKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGRlbGVnYXRlKGtleSwgdmFsdWUpOwogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gcHJvdmlkZXIobmFtZSwgcHJvdmlkZXJfKSB7CiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnc2VydmljZScpOwogICAgaWYgKGlzRnVuY3Rpb24ocHJvdmlkZXJfKSB8fCBpc0FycmF5KHByb3ZpZGVyXykpIHsKICAgICAgcHJvdmlkZXJfID0gcHJvdmlkZXJJbmplY3Rvci5pbnN0YW50aWF0ZShwcm92aWRlcl8pOwogICAgfQogICAgaWYgKCFwcm92aWRlcl8uJGdldCkgewogICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3BnZXQnLCAiUHJvdmlkZXIgJ3swfScgbXVzdCBkZWZpbmUgJGdldCBmYWN0b3J5IG1ldGhvZC4iLCBuYW1lKTsKICAgIH0KICAgIHJldHVybiBwcm92aWRlckNhY2hlW25hbWUgKyBwcm92aWRlclN1ZmZpeF0gPSBwcm92aWRlcl87CiAgfQoKICBmdW5jdGlvbiBlbmZvcmNlUmV0dXJuVmFsdWUobmFtZSwgZmFjdG9yeSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIGVuZm9yY2VkUmV0dXJuVmFsdWUoKSB7CiAgICAgIHZhciByZXN1bHQgPSBpbnN0YW5jZUluamVjdG9yLmludm9rZShmYWN0b3J5LCB0aGlzLCB1bmRlZmluZWQsIG5hbWUpOwogICAgICBpZiAoaXNVbmRlZmluZWQocmVzdWx0KSkgewogICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycigndW5kZWYnLCAiUHJvdmlkZXIgJ3swfScgbXVzdCByZXR1cm4gYSB2YWx1ZSBmcm9tICRnZXQgZmFjdG9yeSBtZXRob2QuIiwgbmFtZSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBmYWN0b3J5KG5hbWUsIGZhY3RvcnlGbiwgZW5mb3JjZSkgewogICAgcmV0dXJuIHByb3ZpZGVyKG5hbWUsIHsKICAgICAgJGdldDogZW5mb3JjZSAhPT0gZmFsc2UgPyBlbmZvcmNlUmV0dXJuVmFsdWUobmFtZSwgZmFjdG9yeUZuKSA6IGZhY3RvcnlGbgogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBzZXJ2aWNlKG5hbWUsIGNvbnN0cnVjdG9yKSB7CiAgICByZXR1cm4gZmFjdG9yeShuYW1lLCBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3RvcikgewogICAgICByZXR1cm4gJGluamVjdG9yLmluc3RhbnRpYXRlKGNvbnN0cnVjdG9yKTsKICAgIH1dKTsKICB9CgogIGZ1bmN0aW9uIHZhbHVlKG5hbWUsIHZhbCkgeyByZXR1cm4gZmFjdG9yeShuYW1lLCB2YWx1ZUZuKHZhbCksIGZhbHNlKTsgfQoKICBmdW5jdGlvbiBjb25zdGFudChuYW1lLCB2YWx1ZSkgewogICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2NvbnN0YW50Jyk7CiAgICBwcm92aWRlckNhY2hlW25hbWVdID0gdmFsdWU7CiAgICBpbnN0YW5jZUNhY2hlW25hbWVdID0gdmFsdWU7CiAgfQoKICBmdW5jdGlvbiBkZWNvcmF0b3Ioc2VydmljZU5hbWUsIGRlY29yRm4pIHsKICAgIHZhciBvcmlnUHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4KSwKICAgICAgICBvcmlnJGdldCA9IG9yaWdQcm92aWRlci4kZ2V0OwoKICAgIG9yaWdQcm92aWRlci4kZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBvcmlnSW5zdGFuY2UgPSBpbnN0YW5jZUluamVjdG9yLmludm9rZShvcmlnJGdldCwgb3JpZ1Byb3ZpZGVyKTsKICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGRlY29yRm4sIG51bGwsIHskZGVsZWdhdGU6IG9yaWdJbnN0YW5jZX0pOwogICAgfTsKICB9CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIE1vZHVsZSBMb2FkaW5nCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgZnVuY3Rpb24gbG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCl7CiAgICB2YXIgcnVuQmxvY2tzID0gW10sIG1vZHVsZUZuOwogICAgZm9yRWFjaChtb2R1bGVzVG9Mb2FkLCBmdW5jdGlvbihtb2R1bGUpIHsKICAgICAgaWYgKGxvYWRlZE1vZHVsZXMuZ2V0KG1vZHVsZSkpIHJldHVybjsKICAgICAgbG9hZGVkTW9kdWxlcy5wdXQobW9kdWxlLCB0cnVlKTsKCiAgICAgIGZ1bmN0aW9uIHJ1bkludm9rZVF1ZXVlKHF1ZXVlKSB7CiAgICAgICAgdmFyIGksIGlpOwogICAgICAgIGZvcihpID0gMCwgaWkgPSBxdWV1ZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICB2YXIgaW52b2tlQXJncyA9IHF1ZXVlW2ldLAogICAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoaW52b2tlQXJnc1swXSk7CgogICAgICAgICAgcHJvdmlkZXJbaW52b2tlQXJnc1sxXV0uYXBwbHkocHJvdmlkZXIsIGludm9rZUFyZ3NbMl0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdHJ5IHsKICAgICAgICBpZiAoaXNTdHJpbmcobW9kdWxlKSkgewogICAgICAgICAgbW9kdWxlRm4gPSBhbmd1bGFyTW9kdWxlKG1vZHVsZSk7CiAgICAgICAgICBydW5CbG9ja3MgPSBydW5CbG9ja3MuY29uY2F0KGxvYWRNb2R1bGVzKG1vZHVsZUZuLnJlcXVpcmVzKSkuY29uY2F0KG1vZHVsZUZuLl9ydW5CbG9ja3MpOwogICAgICAgICAgcnVuSW52b2tlUXVldWUobW9kdWxlRm4uX2ludm9rZVF1ZXVlKTsKICAgICAgICAgIHJ1bkludm9rZVF1ZXVlKG1vZHVsZUZuLl9jb25maWdCbG9ja3MpOwogICAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihtb2R1bGUpKSB7CiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpOwogICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShtb2R1bGUpKSB7CiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhc3NlcnRBcmdGbihtb2R1bGUsICdtb2R1bGUnKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBpZiAoaXNBcnJheShtb2R1bGUpKSB7CiAgICAgICAgICBtb2R1bGUgPSBtb2R1bGVbbW9kdWxlLmxlbmd0aCAtIDFdOwogICAgICAgIH0KICAgICAgICBpZiAoZS5tZXNzYWdlICYmIGUuc3RhY2sgJiYgZS5zdGFjay5pbmRleE9mKGUubWVzc2FnZSkgPT0gLTEpIHsKICAgICAgICAgIC8vIFNhZmFyaSAmIEZGJ3Mgc3RhY2sgdHJhY2VzIGRvbid0IGNvbnRhaW4gZXJyb3IubWVzc2FnZSBjb250ZW50CiAgICAgICAgICAvLyB1bmxpa2UgdGhvc2Ugb2YgQ2hyb21lIGFuZCBJRQogICAgICAgICAgLy8gU28gaWYgc3RhY2sgZG9lc24ndCBjb250YWluIG1lc3NhZ2UsIHdlIGNyZWF0ZSBhIG5ldyBzdHJpbmcgdGhhdCBjb250YWlucyBib3RoLgogICAgICAgICAgLy8gU2luY2UgZXJyb3Iuc3RhY2sgaXMgcmVhZC1vbmx5IGluIFNhZmFyaSwgSSdtIG92ZXJyaWRpbmcgZSBhbmQgbm90IGUuc3RhY2sgaGVyZS4KICAgICAgICAgIC8qIGpzaGludCAtVzAyMiAqLwogICAgICAgICAgZSA9IGUubWVzc2FnZSArICdcbicgKyBlLnN0YWNrOwogICAgICAgIH0KICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ21vZHVsZXJyJywgIkZhaWxlZCB0byBpbnN0YW50aWF0ZSBtb2R1bGUgezB9IGR1ZSB0bzpcbnsxfSIsCiAgICAgICAgICAgICAgICAgIG1vZHVsZSwgZS5zdGFjayB8fCBlLm1lc3NhZ2UgfHwgZSk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHJ1bkJsb2NrczsKICB9CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIGludGVybmFsIEluamVjdG9yCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogIGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoY2FjaGUsIGZhY3RvcnkpIHsKCiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKHNlcnZpY2VOYW1lKSB7CiAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShzZXJ2aWNlTmFtZSkpIHsKICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7CiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ2NkZXAnLCAnQ2lyY3VsYXIgZGVwZW5kZW5jeSBmb3VuZDogezB9JywKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZSArICcgPC0gJyArIHBhdGguam9pbignIDwtICcpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNhY2hlW3NlcnZpY2VOYW1lXTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0cnkgewogICAgICAgICAgcGF0aC51bnNoaWZ0KHNlcnZpY2VOYW1lKTsKICAgICAgICAgIGNhY2hlW3NlcnZpY2VOYW1lXSA9IElOU1RBTlRJQVRJTkc7CiAgICAgICAgICByZXR1cm4gY2FjaGVbc2VydmljZU5hbWVdID0gZmFjdG9yeShzZXJ2aWNlTmFtZSk7CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7CiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtzZXJ2aWNlTmFtZV07CiAgICAgICAgICB9CiAgICAgICAgICB0aHJvdyBlcnI7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIHBhdGguc2hpZnQoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBpbnZva2UoZm4sIHNlbGYsIGxvY2Fscywgc2VydmljZU5hbWUpIHsKICAgICAgaWYgKHR5cGVvZiBsb2NhbHMgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgc2VydmljZU5hbWUgPSBsb2NhbHM7CiAgICAgICAgbG9jYWxzID0gbnVsbDsKICAgICAgfQoKICAgICAgdmFyIGFyZ3MgPSBbXSwKICAgICAgICAgICRpbmplY3QgPSBhbm5vdGF0ZShmbiwgc3RyaWN0RGksIHNlcnZpY2VOYW1lKSwKICAgICAgICAgIGxlbmd0aCwgaSwKICAgICAgICAgIGtleTsKCiAgICAgIGZvcihpID0gMCwgbGVuZ3RoID0gJGluamVjdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgIGtleSA9ICRpbmplY3RbaV07CiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ2l0a24nLAogICAgICAgICAgICAgICAgICAnSW5jb3JyZWN0IGluamVjdGlvbiB0b2tlbiEgRXhwZWN0ZWQgc2VydmljZSBuYW1lIGFzIHN0cmluZywgZ290IHswfScsIGtleSk7CiAgICAgICAgfQogICAgICAgIGFyZ3MucHVzaCgKICAgICAgICAgIGxvY2FscyAmJiBsb2NhbHMuaGFzT3duUHJvcGVydHkoa2V5KQogICAgICAgICAgPyBsb2NhbHNba2V5XQogICAgICAgICAgOiBnZXRTZXJ2aWNlKGtleSkKICAgICAgICApOwogICAgICB9CiAgICAgIGlmIChpc0FycmF5KGZuKSkgewogICAgICAgIGZuID0gZm5bbGVuZ3RoXTsKICAgICAgfQoKICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLWludm9rZS1hcHBseS12cy1zd2l0Y2gKICAgICAgLy8gIzUzODgKICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgfQoKICAgIGZ1bmN0aW9uIGluc3RhbnRpYXRlKFR5cGUsIGxvY2Fscywgc2VydmljZU5hbWUpIHsKICAgICAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24oKSB7fSwKICAgICAgICAgIGluc3RhbmNlLCByZXR1cm5lZFZhbHVlOwoKICAgICAgLy8gQ2hlY2sgaWYgVHlwZSBpcyBhbm5vdGF0ZWQgYW5kIHVzZSBqdXN0IHRoZSBnaXZlbiBmdW5jdGlvbiBhdCBuLTEgYXMgcGFyYW1ldGVyCiAgICAgIC8vIGUuZy4gc29tZU1vZHVsZS5mYWN0b3J5KCdncmVldGVyJywgWyckd2luZG93JywgZnVuY3Rpb24ocmVuYW1lZCR3aW5kb3cpIHt9XSk7CiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IChpc0FycmF5KFR5cGUpID8gVHlwZVtUeXBlLmxlbmd0aCAtIDFdIDogVHlwZSkucHJvdG90eXBlOwogICAgICBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpOwogICAgICByZXR1cm5lZFZhbHVlID0gaW52b2tlKFR5cGUsIGluc3RhbmNlLCBsb2NhbHMsIHNlcnZpY2VOYW1lKTsKCiAgICAgIHJldHVybiBpc09iamVjdChyZXR1cm5lZFZhbHVlKSB8fCBpc0Z1bmN0aW9uKHJldHVybmVkVmFsdWUpID8gcmV0dXJuZWRWYWx1ZSA6IGluc3RhbmNlOwogICAgfQoKICAgIHJldHVybiB7CiAgICAgIGludm9rZTogaW52b2tlLAogICAgICBpbnN0YW50aWF0ZTogaW5zdGFudGlhdGUsCiAgICAgIGdldDogZ2V0U2VydmljZSwKICAgICAgYW5ub3RhdGU6IGFubm90YXRlLAogICAgICBoYXM6IGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgICByZXR1cm4gcHJvdmlkZXJDYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lICsgcHJvdmlkZXJTdWZmaXgpIHx8IGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpOwogICAgICB9CiAgICB9OwogIH0KfQoKY3JlYXRlSW5qZWN0b3IuJCRhbm5vdGF0ZSA9IGFubm90YXRlOwoKLyoqCiAqIEBuZ2RvYyBwcm92aWRlcgogKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIKICoKICogQGRlc2NyaXB0aW9uCiAqIFVzZSBgJGFuY2hvclNjcm9sbFByb3ZpZGVyYCB0byBkaXNhYmxlIGF1dG9tYXRpYyBzY3JvbGxpbmcgd2hlbmV2ZXIKICoge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGNoYW5nZXMuCiAqLwpmdW5jdGlvbiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIoKSB7CgogIHZhciBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IHRydWU7CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmcKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIEJ5IGRlZmF1bHQsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gd2lsbCBhdXRvbWF0aWNhbGx5IHdpbGwgZGV0ZWN0IGNoYW5nZXMgdG8KICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gYW5kIHNjcm9sbCB0byB0aGUgZWxlbWVudCBtYXRjaGluZyB0aGUgbmV3IGhhc2guPGJyIC8+CiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIGRpc2FibGUgYXV0b21hdGljIHNjcm9sbGluZy4KICAgKgogICAqIElmIGF1dG9tYXRpYyBzY3JvbGxpbmcgaXMgZGlzYWJsZWQsIG9uZSBtdXN0IGV4cGxpY2l0bHkgY2FsbAogICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gaW4gb3JkZXIgdG8gc2Nyb2xsIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlCiAgICogY3VycmVudCBoYXNoLgogICAqLwogIHRoaXMuZGlzYWJsZUF1dG9TY3JvbGxpbmcgPSBmdW5jdGlvbigpIHsKICAgIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gZmFsc2U7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIHNlcnZpY2UKICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsCiAgICogQGtpbmQgZnVuY3Rpb24KICAgKiBAcmVxdWlyZXMgJHdpbmRvdwogICAqIEByZXF1aXJlcyAkbG9jYXRpb24KICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogV2hlbiBjYWxsZWQsIGl0IGNoZWNrcyB0aGUgY3VycmVudCB2YWx1ZSBvZiB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gYW5kCiAgICogc2Nyb2xscyB0byB0aGUgcmVsYXRlZCBlbGVtZW50LCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIHNwZWNpZmllZCBpbiB0aGUKICAgKiBbSHRtbDUgc3BlY10oaHR0cDovL2Rldi53My5vcmcvaHRtbDUvc3BlYy9PdmVydmlldy5odG1sI3RoZS1pbmRpY2F0ZWQtcGFydC1vZi10aGUtZG9jdW1lbnQpLgogICAqCiAgICogSXQgYWxzbyB3YXRjaGVzIHRoZSB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gYW5kIGF1dG9tYXRpY2FsbHkgc2Nyb2xscyB0bwogICAqIG1hdGNoIGFueSBhbmNob3Igd2hlbmV2ZXIgaXQgY2hhbmdlcy4gVGhpcyBjYW4gYmUgZGlzYWJsZWQgYnkgY2FsbGluZwogICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmcgJGFuY2hvclNjcm9sbFByb3ZpZGVyLmRpc2FibGVBdXRvU2Nyb2xsaW5nKCl9LgogICAqCiAgICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIHVzZSBpdHMge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwjeU9mZnNldCB5T2Zmc2V0fSBwcm9wZXJ0eSB0byBzcGVjaWZ5IGEKICAgKiB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChlaXRoZXIgZml4ZWQgb3IgZHluYW1pYykuCiAgICoKICAgKiBAcHJvcGVydHkgeyhudW1iZXJ8ZnVuY3Rpb258anFMaXRlKX0geU9mZnNldAogICAqIElmIHNldCwgc3BlY2lmaWVzIGEgdmVydGljYWwgc2Nyb2xsLW9mZnNldC4gVGhpcyBpcyBvZnRlbiB1c2VmdWwgd2hlbiB0aGVyZSBhcmUgZml4ZWQKICAgKiBwb3NpdGlvbmVkIGVsZW1lbnRzIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2UsIHN1Y2ggYXMgbmF2YmFycywgaGVhZGVycyBldGMuCiAgICoKICAgKiBgeU9mZnNldGAgY2FuIGJlIHNwZWNpZmllZCBpbiB2YXJpb3VzIHdheXM6CiAgICogLSAqKm51bWJlcioqOiBBIGZpeGVkIG51bWJlciBvZiBwaXhlbHMgdG8gYmUgdXNlZCBhcyBvZmZzZXQuPGJyIC8+PGJyIC8+CiAgICogLSAqKmZ1bmN0aW9uKio6IEEgZ2V0dGVyIGZ1bmN0aW9uIGNhbGxlZCBldmVyeXRpbWUgYCRhbmNob3JTY3JvbGwoKWAgaXMgZXhlY3V0ZWQuIE11c3QgcmV0dXJuCiAgICogICBhIG51bWJlciByZXByZXNlbnRpbmcgdGhlIG9mZnNldCAoaW4gcGl4ZWxzKS48YnIgLz48YnIgLz4KICAgKiAtICoqanFMaXRlKio6IEEganFMaXRlL2pRdWVyeSBlbGVtZW50IHRvIGJlIHVzZWQgZm9yIHNwZWNpZnlpbmcgdGhlIG9mZnNldC4gVGhlIGRpc3RhbmNlIGZyb20KICAgKiAgIHRoZSB0b3Agb2YgdGhlIHBhZ2UgdG8gdGhlIGVsZW1lbnQncyBib3R0b20gd2lsbCBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz4KICAgKiAgICoqTm90ZSoqOiBUaGUgZWxlbWVudCB3aWxsIGJlIHRha2VuIGludG8gYWNjb3VudCBvbmx5IGFzIGxvbmcgYXMgaXRzIGBwb3NpdGlvbmAgaXMgc2V0IHRvCiAgICogICBgZml4ZWRgLiBUaGlzIG9wdGlvbiBpcyB1c2VmdWwsIHdoZW4gZGVhbGluZyB3aXRoIHJlc3BvbnNpdmUgbmF2YmFycy9oZWFkZXJzIHRoYXQgYWRqdXN0CiAgICogICB0aGVpciBoZWlnaHQgYW5kL29yIHBvc2l0aW9uaW5nIGFjY29yZGluZyB0byB0aGUgdmlld3BvcnQncyBzaXplLgogICAqCiAgICogPGJyIC8+CiAgICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAgICogSW4gb3JkZXIgZm9yIGB5T2Zmc2V0YCB0byB3b3JrIHByb3Blcmx5LCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgcGxhY2Ugb24gdGhlIGRvY3VtZW50J3Mgcm9vdCBhbmQKICAgKiBub3Qgc29tZSBjaGlsZCBlbGVtZW50LgogICAqIDwvZGl2PgogICAqCiAgICogQGV4YW1wbGUKICAgICA8ZXhhbXBsZSBtb2R1bGU9ImFuY2hvclNjcm9sbEV4YW1wbGUiPgogICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgIDxkaXYgaWQ9InNjcm9sbEFyZWEiIG5nLWNvbnRyb2xsZXI9IlNjcm9sbENvbnRyb2xsZXIiPgogICAgICAgICAgIDxhIG5nLWNsaWNrPSJnb3RvQm90dG9tKCkiPkdvIHRvIGJvdHRvbTwvYT4KICAgICAgICAgICA8YSBpZD0iYm90dG9tIj48L2E+IFlvdSdyZSBhdCB0aGUgYm90dG9tIQogICAgICAgICA8L2Rpdj4KICAgICAgIDwvZmlsZT4KICAgICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxFeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ1Njcm9sbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJGFuY2hvclNjcm9sbCcsCiAgICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRhbmNob3JTY3JvbGwpIHsKICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9Cb3R0b20gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIGxvY2F0aW9uLmhhc2ggdG8gdGhlIGlkIG9mCiAgICAgICAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgeW91IHdpc2ggdG8gc2Nyb2xsIHRvLgogICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdib3R0b20nKTsKCiAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKCkKICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7CiAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICB9XSk7CiAgICAgICA8L2ZpbGU+CiAgICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgICAjc2Nyb2xsQXJlYSB7CiAgICAgICAgICAgaGVpZ2h0OiAyODBweDsKICAgICAgICAgICBvdmVyZmxvdzogYXV0bzsKICAgICAgICAgfQoKICAgICAgICAgI2JvdHRvbSB7CiAgICAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgICAgbWFyZ2luLXRvcDogMjAwMHB4OwogICAgICAgICB9CiAgICAgICA8L2ZpbGU+CiAgICAgPC9leGFtcGxlPgogICAqCiAgICogPGhyIC8+CiAgICogVGhlIGV4YW1wbGUgYmVsb3cgaWxsdXN0cmF0ZXMgdGhlIHVzZSBvZiBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQgKHNwZWNpZmllZCBhcyBhIGZpeGVkIHZhbHVlKS4KICAgKiBTZWUge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwjeU9mZnNldCAkYW5jaG9yU2Nyb2xsLnlPZmZzZXR9IGZvciBtb3JlIGRldGFpbHMuCiAgICoKICAgKiBAZXhhbXBsZQogICAgIDxleGFtcGxlIG1vZHVsZT0iYW5jaG9yU2Nyb2xsT2Zmc2V0RXhhbXBsZSI+CiAgICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICAgPGRpdiBjbGFzcz0iZml4ZWQtaGVhZGVyIiBuZy1jb250cm9sbGVyPSJoZWFkZXJDdHJsIj4KICAgICAgICAgICA8YSBocmVmPSIiIG5nLWNsaWNrPSJnb3RvQW5jaG9yKHgpIiBuZy1yZXBlYXQ9InggaW4gWzEsMiwzLDQsNV0iPgogICAgICAgICAgICAgR28gdG8gYW5jaG9yIHt7eH19CiAgICAgICAgICAgPC9hPgogICAgICAgICA8L2Rpdj4KICAgICAgICAgPGRpdiBpZD0iYW5jaG9ye3t4fX0iIGNsYXNzPSJhbmNob3IiIG5nLXJlcGVhdD0ieCBpbiBbMSwyLDMsNCw1XSI+CiAgICAgICAgICAgQW5jaG9yIHt7eH19IG9mIDUKICAgICAgICAgPC9kaXY+CiAgICAgICA8L2ZpbGU+CiAgICAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYW5jaG9yU2Nyb2xsT2Zmc2V0RXhhbXBsZScsIFtdKQogICAgICAgICAgIC5ydW4oWyckYW5jaG9yU2Nyb2xsJywgZnVuY3Rpb24oJGFuY2hvclNjcm9sbCkgewogICAgICAgICAgICAgJGFuY2hvclNjcm9sbC55T2Zmc2V0ID0gNTA7ICAgLy8gYWx3YXlzIHNjcm9sbCBieSA1MCBleHRyYSBwaXhlbHMKICAgICAgICAgICB9XSkKICAgICAgICAgICAuY29udHJvbGxlcignaGVhZGVyQ3RybCcsIFsnJGFuY2hvclNjcm9sbCcsICckbG9jYXRpb24nLCAnJHNjb3BlJywKICAgICAgICAgICAgIGZ1bmN0aW9uICgkYW5jaG9yU2Nyb2xsLCAkbG9jYXRpb24sICRzY29wZSkgewogICAgICAgICAgICAgICAkc2NvcGUuZ290b0FuY2hvciA9IGZ1bmN0aW9uKHgpIHsKICAgICAgICAgICAgICAgICB2YXIgbmV3SGFzaCA9ICdhbmNob3InICsgeDsKICAgICAgICAgICAgICAgICBpZiAoJGxvY2F0aW9uLmhhc2goKSAhPT0gbmV3SGFzaCkgewogICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSAkbG9jYXRpb24uaGFzaCB0byBgbmV3SGFzaGAgYW5kCiAgICAgICAgICAgICAgICAgICAvLyAkYW5jaG9yU2Nyb2xsIHdpbGwgYXV0b21hdGljYWxseSBzY3JvbGwgdG8gaXQKICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdhbmNob3InICsgeCk7CiAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgJGFuY2hvclNjcm9sbCgpIGV4cGxpY2l0bHksCiAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSAkbG9jYXRpb24uaGFzaCBoYXNuJ3QgY2hhbmdlZAogICAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgIH0KICAgICAgICAgICBdKTsKICAgICAgIDwvZmlsZT4KICAgICAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgICAgICAgIGJvZHkgewogICAgICAgICAgIHBhZGRpbmctdG9wOiA1MHB4OwogICAgICAgICB9CgogICAgICAgICAuYW5jaG9yIHsKICAgICAgICAgICBib3JkZXI6IDJweCBkYXNoZWQgRGFya09yY2hpZDsKICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDEwcHggMjAwcHggMTBweDsKICAgICAgICAgfQoKICAgICAgICAgLmZpeGVkLWhlYWRlciB7CiAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjIpOwogICAgICAgICAgIGhlaWdodDogNTBweDsKICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICAgICAgICAgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDsKICAgICAgICAgfQoKICAgICAgICAgLmZpeGVkLWhlYWRlciA+IGEgewogICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICAgICBtYXJnaW46IDVweCAxNXB4OwogICAgICAgICB9CiAgICAgICA8L2ZpbGU+CiAgICAgPC9leGFtcGxlPgogICAqLwogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCR3aW5kb3csICRsb2NhdGlvbiwgJHJvb3RTY29wZSkgewogICAgdmFyIGRvY3VtZW50ID0gJHdpbmRvdy5kb2N1bWVudDsKICAgIHZhciBzY3JvbGxTY2hlZHVsZWQgPSBmYWxzZTsKCiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGZpcnN0IGFuY2hvciBmcm9tIGEgTm9kZUxpc3QKICAgIC8vICh1c2luZyBgQXJyYXkjc29tZSgpYCBpbnN0ZWFkIG9mIGBhbmd1bGFyI2ZvckVhY2goKWAgc2luY2UgaXQncyBtb3JlIHBlcmZvcm1hbnQKICAgIC8vICBhbmQgd29ya2luZyBpbiBhbGwgc3VwcG9ydGVkIGJyb3dzZXJzLikKICAgIGZ1bmN0aW9uIGdldEZpcnN0QW5jaG9yKGxpc3QpIHsKICAgICAgdmFyIHJlc3VsdCA9IG51bGw7CiAgICAgIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwobGlzdCwgZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgIGlmIChub2RlTmFtZV8oZWxlbWVudCkgPT09ICdhJykgewogICAgICAgICAgcmVzdWx0ID0gZWxlbWVudDsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0WU9mZnNldCgpIHsKCiAgICAgIHZhciBvZmZzZXQgPSBzY3JvbGwueU9mZnNldDsKCiAgICAgIGlmIChpc0Z1bmN0aW9uKG9mZnNldCkpIHsKICAgICAgICBvZmZzZXQgPSBvZmZzZXQoKTsKICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQob2Zmc2V0KSkgewogICAgICAgIHZhciBlbGVtID0gb2Zmc2V0WzBdOwogICAgICAgIHZhciBzdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTsKICAgICAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09ICdmaXhlZCcpIHsKICAgICAgICAgIG9mZnNldCA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICghaXNOdW1iZXIob2Zmc2V0KSkgewogICAgICAgIG9mZnNldCA9IDA7CiAgICAgIH0KCiAgICAgIHJldHVybiBvZmZzZXQ7CiAgICB9CgogICAgZnVuY3Rpb24gc2Nyb2xsVG8oZWxlbSkgewogICAgICBpZiAoZWxlbSkgewogICAgICAgIGVsZW0uc2Nyb2xsSW50b1ZpZXcoKTsKCiAgICAgICAgdmFyIG9mZnNldCA9IGdldFlPZmZzZXQoKTsKCiAgICAgICAgaWYgKG9mZnNldCkgewogICAgICAgICAgLy8gYG9mZnNldGAgaXMgdGhlIG51bWJlciBvZiBwaXhlbHMgd2Ugc2hvdWxkIHNjcm9sbCBVUCBpbiBvcmRlciB0byBhbGlnbiBgZWxlbWAgcHJvcGVybHkuCiAgICAgICAgICAvLyBUaGlzIGlzIHRydWUgT05MWSBpZiB0aGUgY2FsbCB0byBgZWxlbS5zY3JvbGxJbnRvVmlldygpYCBpbml0aWFsbHkgYWxpZ25zIGBlbGVtYCBhdCB0aGUKICAgICAgICAgIC8vIHRvcCBvZiB0aGUgdmlld3BvcnQuCiAgICAgICAgICAvLwogICAgICAgICAgLy8gSUYgdGhlIG51bWJlciBvZiBwaXhlbHMgZnJvbSB0aGUgdG9wIG9mIGBlbGVtYCB0byB0aGUgZW5kIG9mIHRoZSBwYWdlJ3MgY29udGVudCBpcyBsZXNzCiAgICAgICAgICAvLyB0aGFuIHRoZSBoZWlnaHQgb2YgdGhlIHZpZXdwb3J0LCB0aGVuIGBlbGVtLnNjcm9sbEludG9WaWV3KClgIHdpbGwgYWxpZ24gdGhlIGBlbGVtYCBzb21lCiAgICAgICAgICAvLyB3YXkgZG93biB0aGUgcGFnZS4KICAgICAgICAgIC8vCiAgICAgICAgICAvLyBUaGlzIGlzIG9mdGVuIHRoZSBjYXNlIGZvciBlbGVtZW50cyBuZWFyIHRoZSBib3R0b20gb2YgdGhlIHBhZ2UuCiAgICAgICAgICAvLwogICAgICAgICAgLy8gSW4gc3VjaCBjYXNlcyB3ZSBkbyBub3QgbmVlZCB0byBzY3JvbGwgdGhlIHdob2xlIGBvZmZzZXRgIHVwLCBqdXN0IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4KICAgICAgICAgIC8vIHRoZSB0b3Agb2YgdGhlIGVsZW1lbnQgYW5kIHRoZSBvZmZzZXQsIHdoaWNoIGlzIGVub3VnaCB0byBhbGlnbiB0aGUgdG9wIG9mIGBlbGVtYCBhdCB0aGUKICAgICAgICAgIC8vIGRlc2lyZWQgcG9zaXRpb24uCiAgICAgICAgICB2YXIgZWxlbVRvcCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wOwogICAgICAgICAgJHdpbmRvdy5zY3JvbGxCeSgwLCBlbGVtVG9wIC0gb2Zmc2V0KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNjcm9sbCgpIHsKICAgICAgdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpLCBlbG07CgogICAgICAvLyBlbXB0eSBoYXNoLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZQogICAgICBpZiAoIWhhc2gpIHNjcm9sbFRvKG51bGwpOwoKICAgICAgLy8gZWxlbWVudCB3aXRoIGdpdmVuIGlkCiAgICAgIGVsc2UgaWYgKChlbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoKSkpIHNjcm9sbFRvKGVsbSk7CgogICAgICAvLyBmaXJzdCBhbmNob3Igd2l0aCBnaXZlbiBuYW1lIDotRAogICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgc2Nyb2xsVG8oZWxtKTsKCiAgICAgIC8vIG5vIGVsZW1lbnQgYW5kIGhhc2ggPT0gJ3RvcCcsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlCiAgICAgIGVsc2UgaWYgKGhhc2ggPT09ICd0b3AnKSBzY3JvbGxUbyhudWxsKTsKICAgIH0KCiAgICAvLyBkb2VzIG5vdCBzY3JvbGwgd2hlbiB1c2VyIGNsaWNrcyBvbiBhbmNob3IgbGluayB0aGF0IGlzIGN1cnJlbnRseSBvbgogICAgLy8gKG5vIHVybCBjaGFuZ2UsIG5vICRsb2NhdGlvbi5oYXNoKCkgY2hhbmdlKSwgYnJvd3NlciBuYXRpdmUgZG9lcyBzY3JvbGwKICAgIGlmIChhdXRvU2Nyb2xsaW5nRW5hYmxlZCkgewogICAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2goKSB7cmV0dXJuICRsb2NhdGlvbi5oYXNoKCk7fSwKICAgICAgICBmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHsKICAgICAgICAgIC8vIHNraXAgdGhlIGluaXRpYWwgc2Nyb2xsIGlmICRsb2NhdGlvbi5oYXNoIGlzIGVtcHR5CiAgICAgICAgICBpZiAobmV3VmFsID09PSBvbGRWYWwgJiYgbmV3VmFsID09PSAnJykgcmV0dXJuOwoKICAgICAgICAgIGpxTGl0ZURvY3VtZW50TG9hZGVkKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoc2Nyb2xsKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBzY3JvbGw7CiAgfV07Cn0KCnZhciAkYW5pbWF0ZU1pbkVyciA9IG1pbkVycignJGFuaW1hdGUnKTsKCi8qKgogKiBAbmdkb2MgcHJvdmlkZXIKICogQG5hbWUgJGFuaW1hdGVQcm92aWRlcgogKgogKiBAZGVzY3JpcHRpb24KICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiAkYW5pbWF0ZSB0aGF0IGRvZXNuJ3QgcGVyZm9ybSBhbnkgYW5pbWF0aW9ucywgaW5zdGVhZCBqdXN0CiAqIHN5bmNocm9ub3VzbHkgcGVyZm9ybXMgRE9NCiAqIHVwZGF0ZXMgYW5kIGNhbGxzIGRvbmUoKSBjYWxsYmFja3MuCiAqCiAqIEluIG9yZGVyIHRvIGVuYWJsZSBhbmltYXRpb25zIHRoZSBuZ0FuaW1hdGUgbW9kdWxlIGhhcyB0byBiZSBsb2FkZWQuCiAqCiAqIFRvIHNlZSB0aGUgZnVuY3Rpb25hbCBpbXBsZW1lbnRhdGlvbiBjaGVjayBvdXQgc3JjL25nQW5pbWF0ZS9hbmltYXRlLmpzCiAqLwp2YXIgJEFuaW1hdGVQcm92aWRlciA9IFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkgewoKCiAgdGhpcy4kJHNlbGVjdG9ycyA9IHt9OwoKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJlZ2lzdGVycyBhIG5ldyBpbmplY3RhYmxlIGFuaW1hdGlvbiBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBwcm9kdWNlcyB0aGUKICAgKiBhbmltYXRpb24gb2JqZWN0IHdoaWNoIGNvbnRhaW5zIGNhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudCB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlCiAgICogYW5pbWF0ZWQuCiAgICoKICAgKiAgICogYGV2ZW50Rm5gOiBgZnVuY3Rpb24oRWxlbWVudCwgZG9uZUZ1bmN0aW9uKWAgVGhlIGVsZW1lbnQgdG8gYW5pbWF0ZSwgdGhlIGBkb25lRnVuY3Rpb25gCiAgICogICBtdXN0IGJlIGNhbGxlZCBvbmNlIHRoZSBlbGVtZW50IGFuaW1hdGlvbiBpcyBjb21wbGV0ZS4gSWYgYSBmdW5jdGlvbiBpcyByZXR1cm5lZCB0aGVuIHRoZQogICAqICAgYW5pbWF0aW9uIHNlcnZpY2Ugd2lsbCB1c2UgdGhpcyBmdW5jdGlvbiB0byBjYW5jZWwgdGhlIGFuaW1hdGlvbiB3aGVuZXZlciBhIGNhbmNlbCBldmVudCBpcwogICAqICAgdHJpZ2dlcmVkLgogICAqCiAgICoKICAgKiBgYGBqcwogICAqICAgcmV0dXJuIHsKICAgICAqICAgICBldmVudEZuIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSkgewogICAgICogICAgICAgLy9jb2RlIHRvIHJ1biB0aGUgYW5pbWF0aW9uCiAgICAgKiAgICAgICAvL29uY2UgY29tcGxldGUsIHRoZW4gcnVuIGRvbmUoKQogICAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhbmNlbGxhdGlvbkZ1bmN0aW9uKCkgewogICAgICogICAgICAgICAvL2NvZGUgdG8gY2FuY2VsIHRoZSBhbmltYXRpb24KICAgICAqICAgICAgIH0KICAgICAqICAgICB9CiAgICAgKiAgIH0KICAgKiBgYGAKICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBhbmltYXRpb24uCiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmFjdG9yeSBUaGUgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcmV0dXJuIHRoZSBhbmltYXRpb24KICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC4KICAgKi8KICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZSwgZmFjdG9yeSkgewogICAgdmFyIGtleSA9IG5hbWUgKyAnLWFuaW1hdGlvbic7CiAgICBpZiAobmFtZSAmJiBuYW1lLmNoYXJBdCgwKSAhPSAnLicpIHRocm93ICRhbmltYXRlTWluRXJyKCdub3Rjc2VsJywKICAgICAgICAiRXhwZWN0aW5nIGNsYXNzIHNlbGVjdG9yIHN0YXJ0aW5nIHdpdGggJy4nIGdvdCAnezB9Jy4iLCBuYW1lKTsKICAgIHRoaXMuJCRzZWxlY3RvcnNbbmFtZS5zdWJzdHIoMSldID0ga2V5OwogICAgJHByb3ZpZGUuZmFjdG9yeShrZXksIGZhY3RvcnkpOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkYW5pbWF0ZVByb3ZpZGVyI2NsYXNzTmFtZUZpbHRlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyBhbmQvb3IgcmV0dXJucyB0aGUgQ1NTIGNsYXNzIHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIGNoZWNrZWQgd2hlbiBwZXJmb3JtaW5nCiAgICogYW4gYW5pbWF0aW9uLiBVcG9uIGJvb3RzdHJhcCB0aGUgY2xhc3NOYW1lRmlsdGVyIHZhbHVlIGlzIG5vdCBzZXQgYXQgYWxsIGFuZCB3aWxsCiAgICogdGhlcmVmb3JlIGVuYWJsZSAkYW5pbWF0ZSB0byBhdHRlbXB0IHRvIHBlcmZvcm0gYW4gYW5pbWF0aW9uIG9uIGFueSBlbGVtZW50LgogICAqIFdoZW4gc2V0dGluZyB0aGUgY2xhc3NOYW1lRmlsdGVyIHZhbHVlLCBhbmltYXRpb25zIHdpbGwgb25seSBiZSBwZXJmb3JtZWQgb24gZWxlbWVudHMKICAgKiB0aGF0IHN1Y2Nlc3NmdWxseSBtYXRjaCB0aGUgZmlsdGVyIGV4cHJlc3Npb24uIFRoaXMgaW4gdHVybiBjYW4gYm9vc3QgcGVyZm9ybWFuY2UKICAgKiBmb3IgbG93LXBvd2VyZWQgZGV2aWNlcyBhcyB3ZWxsIGFzIGFwcGxpY2F0aW9ucyBjb250YWluaW5nIGEgbG90IG9mIHN0cnVjdHVyYWwgb3BlcmF0aW9ucy4KICAgKiBAcGFyYW0ge1JlZ0V4cD19IGV4cHJlc3Npb24gVGhlIGNsYXNzTmFtZSBleHByZXNzaW9uIHdoaWNoIHdpbGwgYmUgY2hlY2tlZCBhZ2FpbnN0IGFsbCBhbmltYXRpb25zCiAgICogQHJldHVybiB7UmVnRXhwfSBUaGUgY3VycmVudCBDU1MgY2xhc3NOYW1lIGV4cHJlc3Npb24gdmFsdWUuIElmIG51bGwgdGhlbiB0aGVyZSBpcyBubyBleHByZXNzaW9uIHZhbHVlCiAgICovCiAgdGhpcy5jbGFzc05hbWVGaWx0ZXIgPSBmdW5jdGlvbihleHByZXNzaW9uKSB7CiAgICBpZihhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7CiAgICAgIHRoaXMuJCRjbGFzc05hbWVGaWx0ZXIgPSAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIFJlZ0V4cCkgPyBleHByZXNzaW9uIDogbnVsbDsKICAgIH0KICAgIHJldHVybiB0aGlzLiQkY2xhc3NOYW1lRmlsdGVyOwogIH07CgogIHRoaXMuJGdldCA9IFsnJCRxJywgJyQkYXN5bmNDYWxsYmFjaycsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJCRxLCAkJGFzeW5jQ2FsbGJhY2ssICRyb290U2NvcGUpIHsKCiAgICB2YXIgY3VycmVudERlZmVyOwoKICAgIGZ1bmN0aW9uIHJ1bkFuaW1hdGlvblBvc3REaWdlc3QoZm4pIHsKICAgICAgdmFyIGNhbmNlbEZuLCBkZWZlciA9ICQkcS5kZWZlcigpOwogICAgICBkZWZlci5wcm9taXNlLiQkY2FuY2VsRm4gPSBmdW5jdGlvbiBuZ0FuaW1hdGVNYXliZUNhbmNlbCgpIHsKICAgICAgICBjYW5jZWxGbiAmJiBjYW5jZWxGbigpOwogICAgICB9OwoKICAgICAgJHJvb3RTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24gbmdBbmltYXRlUG9zdERpZ2VzdCgpIHsKICAgICAgICBjYW5jZWxGbiA9IGZuKGZ1bmN0aW9uIG5nQW5pbWF0ZU5vdGlmeUNvbXBsZXRlKCkgewogICAgICAgICAgZGVmZXIucmVzb2x2ZSgpOwogICAgICAgIH0pOwogICAgICB9KTsKCiAgICAgIHJldHVybiBkZWZlci5wcm9taXNlOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlc29sdmVFbGVtZW50Q2xhc3NlcyhlbGVtZW50LCBjbGFzc2VzKSB7CiAgICAgIHZhciB0b0FkZCA9IFtdLCB0b1JlbW92ZSA9IFtdOwoKICAgICAgdmFyIGhhc0NsYXNzZXMgPSBjcmVhdGVNYXAoKTsKICAgICAgZm9yRWFjaCgoZWxlbWVudC5hdHRyKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgvXHMrLyksIGZ1bmN0aW9uKGNsYXNzTmFtZSkgewogICAgICAgIGhhc0NsYXNzZXNbY2xhc3NOYW1lXSA9IHRydWU7CiAgICAgIH0pOwoKICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihzdGF0dXMsIGNsYXNzTmFtZSkgewogICAgICAgIHZhciBoYXNDbGFzcyA9IGhhc0NsYXNzZXNbY2xhc3NOYW1lXTsKCiAgICAgICAgLy8gSWYgdGhlIG1vc3QgcmVjZW50IGNsYXNzIG1hbmlwdWxhdGlvbiAodmlhICRhbmltYXRlKSB3YXMgdG8gcmVtb3ZlIHRoZSBjbGFzcywgYW5kIHRoZQogICAgICAgIC8vIGVsZW1lbnQgY3VycmVudGx5IGhhcyB0aGUgY2xhc3MsIHRoZSBjbGFzcyBpcyBzY2hlZHVsZWQgZm9yIHJlbW92YWwuIE90aGVyd2lzZSwgaWYKICAgICAgICAvLyB0aGUgbW9zdCByZWNlbnQgY2xhc3MgbWFuaXB1bGF0aW9uICh2aWEgJGFuaW1hdGUpIHdhcyB0byBhZGQgdGhlIGNsYXNzLCBhbmQgdGhlCiAgICAgICAgLy8gZWxlbWVudCBkb2VzIG5vdCBjdXJyZW50bHkgaGF2ZSB0aGUgY2xhc3MsIHRoZSBjbGFzcyBpcyBzY2hlZHVsZWQgdG8gYmUgYWRkZWQuCiAgICAgICAgaWYgKHN0YXR1cyA9PT0gZmFsc2UgJiYgaGFzQ2xhc3MpIHsKICAgICAgICAgIHRvUmVtb3ZlLnB1c2goY2xhc3NOYW1lKTsKICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gdHJ1ZSAmJiAhaGFzQ2xhc3MpIHsKICAgICAgICAgIHRvQWRkLnB1c2goY2xhc3NOYW1lKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgcmV0dXJuICh0b0FkZC5sZW5ndGggKyB0b1JlbW92ZS5sZW5ndGgpID4gMCAmJgogICAgICAgIFt0b0FkZC5sZW5ndGggPyB0b0FkZCA6IG51bGwsIHRvUmVtb3ZlLmxlbmd0aCA/IHRvUmVtb3ZlIDogbnVsbF07CiAgICB9CgogICAgZnVuY3Rpb24gY2FjaGVkQ2xhc3NNYW5pcHVsYXRpb24oY2FjaGUsIGNsYXNzZXMsIG9wKSB7CiAgICAgIGZvciAodmFyIGk9MCwgaWkgPSBjbGFzc2VzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHsKICAgICAgICB2YXIgY2xhc3NOYW1lID0gY2xhc3Nlc1tpXTsKICAgICAgICBjYWNoZVtjbGFzc05hbWVdID0gb3A7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBhc3luY1Byb21pc2UoKSB7CiAgICAgIC8vIG9ubHkgc2VydmUgb25lIGluc3RhbmNlIG9mIGEgcHJvbWlzZSBpbiBvcmRlciB0byBzYXZlIENQVSBjeWNsZXMKICAgICAgaWYgKCFjdXJyZW50RGVmZXIpIHsKICAgICAgICBjdXJyZW50RGVmZXIgPSAkJHEuZGVmZXIoKTsKICAgICAgICAkJGFzeW5jQ2FsbGJhY2soZnVuY3Rpb24oKSB7CiAgICAgICAgICBjdXJyZW50RGVmZXIucmVzb2x2ZSgpOwogICAgICAgICAgY3VycmVudERlZmVyID0gbnVsbDsKICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gY3VycmVudERlZmVyLnByb21pc2U7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwbHlTdHlsZXMoZWxlbWVudCwgb3B0aW9ucykgewogICAgICBpZiAoYW5ndWxhci5pc09iamVjdChvcHRpb25zKSkgewogICAgICAgIHZhciBzdHlsZXMgPSBleHRlbmQob3B0aW9ucy5mcm9tIHx8IHt9LCBvcHRpb25zLnRvIHx8IHt9KTsKICAgICAgICBlbGVtZW50LmNzcyhzdHlsZXMpOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKgogICAgICogQG5nZG9jIHNlcnZpY2UKICAgICAqIEBuYW1lICRhbmltYXRlCiAgICAgKiBAZGVzY3JpcHRpb24gVGhlICRhbmltYXRlIHNlcnZpY2UgcHJvdmlkZXMgcnVkaW1lbnRhcnkgRE9NIG1hbmlwdWxhdGlvbiBmdW5jdGlvbnMgdG8KICAgICAqIGluc2VydCwgcmVtb3ZlIGFuZCBtb3ZlIGVsZW1lbnRzIHdpdGhpbiB0aGUgRE9NLCBhcyB3ZWxsIGFzIGFkZGluZyBhbmQgcmVtb3ZpbmcgY2xhc3Nlcy4KICAgICAqIFRoaXMgc2VydmljZSBpcyB0aGUgY29yZSBzZXJ2aWNlIHVzZWQgYnkgdGhlIG5nQW5pbWF0ZSAkYW5pbWF0b3Igc2VydmljZSB3aGljaCBwcm92aWRlcwogICAgICogaGlnaC1sZXZlbCBhbmltYXRpb24gaG9va3MgZm9yIENTUyBhbmQgSmF2YVNjcmlwdC4KICAgICAqCiAgICAgKiAkYW5pbWF0ZSBpcyBhdmFpbGFibGUgaW4gdGhlIEFuZ3VsYXJKUyBjb3JlLCBob3dldmVyLCB0aGUgbmdBbmltYXRlIG1vZHVsZSBtdXN0IGJlIGluY2x1ZGVkCiAgICAgKiB0byBlbmFibGUgZnVsbCBvdXQgYW5pbWF0aW9uIHN1cHBvcnQuIE90aGVyd2lzZSwgJGFuaW1hdGUgd2lsbCBvbmx5IHBlcmZvcm0gc2ltcGxlIERPTQogICAgICogbWFuaXB1bGF0aW9uIG9wZXJhdGlvbnMuCiAgICAgKgogICAgICogVG8gbGVhcm4gbW9yZSBhYm91dCBlbmFibGluZyBhbmltYXRpb24gc3VwcG9ydCwgY2xpY2sgaGVyZSB0byB2aXNpdCB0aGUge0BsaW5rIG5nQW5pbWF0ZQogICAgICogbmdBbmltYXRlIG1vZHVsZSBwYWdlfSBhcyB3ZWxsIGFzIHRoZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlIG5nQW5pbWF0ZSAkYW5pbWF0ZSBzZXJ2aWNlCiAgICAgKiBwYWdlfS4KICAgICAqLwogICAgcmV0dXJuIHsKICAgICAgYW5pbWF0ZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb20sIHRvKSB7CiAgICAgICAgYXBwbHlTdHlsZXMoZWxlbWVudCwgeyBmcm9tOiBmcm9tLCB0bzogdG8gfSk7CiAgICAgICAgcmV0dXJuIGFzeW5jUHJvbWlzZSgpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGFuaW1hdGUjZW50ZXIKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICogQGRlc2NyaXB0aW9uIEluc2VydHMgdGhlIGVsZW1lbnQgaW50byB0aGUgRE9NIGVpdGhlciBhZnRlciB0aGUgYGFmdGVyYCBlbGVtZW50IG9yCiAgICAgICAqIGFzIHRoZSBmaXJzdCBjaGlsZCB3aXRoaW4gdGhlIGBwYXJlbnRgIGVsZW1lbnQuIFdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBhIHByb21pc2UKICAgICAgICogaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGF0IGEgbGF0ZXIgdGltZS4KICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NCiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50IHRoZSBwYXJlbnQgZWxlbWVudCB3aGljaCB3aWxsIGFwcGVuZCB0aGUgZWxlbWVudCBhcwogICAgICAgKiAgIGEgY2hpbGQgKGlmIHRoZSBhZnRlciBlbGVtZW50IGlzIG5vdCBwcmVzZW50KQogICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQKICAgICAgICogICBhZnRlciBpdHNlbGYKICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LgogICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2UKICAgICAgICovCiAgICAgIGVudGVyIDogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucykgewogICAgICAgIGFwcGx5U3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpOwogICAgICAgIGFmdGVyID8gYWZ0ZXIuYWZ0ZXIoZWxlbWVudCkKICAgICAgICAgICAgICA6IHBhcmVudC5wcmVwZW5kKGVsZW1lbnQpOwogICAgICAgIHJldHVybiBhc3luY1Byb21pc2UoKTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRhbmltYXRlI2xlYXZlCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIHRoZSBlbGVtZW50IGZyb20gdGhlIERPTS4gV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZQogICAgICAgKiBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYXQgYSBsYXRlciB0aW1lLgogICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIERPTQogICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LgogICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2UKICAgICAgICovCiAgICAgIGxlYXZlIDogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykgewogICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7CiAgICAgICAgcmV0dXJuIGFzeW5jUHJvbWlzZSgpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGFuaW1hdGUjbW92ZQogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKiBAZGVzY3JpcHRpb24gTW92ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwcm92aWRlZCBlbGVtZW50IHdpdGhpbiB0aGUgRE9NIHRvIGJlIHBsYWNlZAogICAgICAgKiBlaXRoZXIgYWZ0ZXIgdGhlIGBhZnRlcmAgZWxlbWVudCBvciBpbnNpZGUgb2YgdGhlIGBwYXJlbnRgIGVsZW1lbnQuIFdoZW4gdGhlIGZ1bmN0aW9uCiAgICAgICAqIGlzIGNhbGxlZCBhIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGF0IGEgbGF0ZXIgdGltZS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgbW92ZWQgYXJvdW5kIHdpdGhpbiB0aGUKICAgICAgICogICBET00KICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBlbGVtZW50IHdoZXJlIHRoZSBlbGVtZW50IHdpbGwgYmUKICAgICAgICogICBpbnNlcnRlZCBpbnRvIChpZiB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudCkKICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IHdoZXJlIHRoZSBlbGVtZW50IHdpbGwgYmUKICAgICAgICogICBwb3NpdGlvbmVkIG5leHQgdG8KICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC4KICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlCiAgICAgICAqLwogICAgICBtb3ZlIDogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucykgewogICAgICAgIC8vIERvIG5vdCByZW1vdmUgZWxlbWVudCBiZWZvcmUgaW5zZXJ0LiBSZW1vdmluZyB3aWxsIGNhdXNlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZQogICAgICAgIC8vIGVsZW1lbnQgdG8gYmUgZHJvcHBlZC4gSW5zZXJ0IHdpbGwgaW1wbGljaXRseSBkbyB0aGUgcmVtb3ZlLgogICAgICAgIHJldHVybiB0aGlzLmVudGVyKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIG9wdGlvbnMpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGFuaW1hdGUjYWRkQ2xhc3MKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICogQGRlc2NyaXB0aW9uIEFkZHMgdGhlIHByb3ZpZGVkIGNsYXNzTmFtZSBDU1MgY2xhc3MgdmFsdWUgdG8gdGhlIHByb3ZpZGVkIGVsZW1lbnQuCiAgICAgICAqIFdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBhIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGF0IGEgbGF0ZXIgdGltZS4KICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgaGF2ZSB0aGUgY2xhc3NOYW1lIHZhbHVlCiAgICAgICAqICAgYWRkZWQgdG8gaXQKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzIHdoaWNoIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQKICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC4KICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlCiAgICAgICAqLwogICAgICBhZGRDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucykgewogICAgICAgIHJldHVybiB0aGlzLnNldENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSwgW10sIG9wdGlvbnMpOwogICAgICB9LAoKICAgICAgJCRhZGRDbGFzc0ltbWVkaWF0ZWx5IDogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7CiAgICAgICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTsKICAgICAgICBjbGFzc05hbWUgPSAhaXNTdHJpbmcoY2xhc3NOYW1lKQogICAgICAgICAgICAgICAgICAgICAgICA/IChpc0FycmF5KGNsYXNzTmFtZSkgPyBjbGFzc05hbWUuam9pbignICcpIDogJycpCiAgICAgICAgICAgICAgICAgICAgICAgIDogY2xhc3NOYW1lOwogICAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICAgIGpxTGl0ZUFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7CiAgICAgICAgfSk7CiAgICAgICAgYXBwbHlTdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIGFzeW5jUHJvbWlzZSgpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGFuaW1hdGUjcmVtb3ZlQ2xhc3MKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgdGhlIHByb3ZpZGVkIGNsYXNzTmFtZSBDU1MgY2xhc3MgdmFsdWUgZnJvbSB0aGUgcHJvdmlkZWQgZWxlbWVudC4KICAgICAgICogV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYXQgYSBsYXRlciB0aW1lLgogICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBoYXZlIHRoZSBjbGFzc05hbWUgdmFsdWUKICAgICAgICogICByZW1vdmVkIGZyb20gaXQKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzIHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50CiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuCiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZQogICAgICAgKi8KICAgICAgcmVtb3ZlQ2xhc3MgOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHsKICAgICAgICByZXR1cm4gdGhpcy5zZXRDbGFzcyhlbGVtZW50LCBbXSwgY2xhc3NOYW1lLCBvcHRpb25zKTsKICAgICAgfSwKCiAgICAgICQkcmVtb3ZlQ2xhc3NJbW1lZGlhdGVseSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucykgewogICAgICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7CiAgICAgICAgY2xhc3NOYW1lID0gIWlzU3RyaW5nKGNsYXNzTmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgPyAoaXNBcnJheShjbGFzc05hbWUpID8gY2xhc3NOYW1lLmpvaW4oJyAnKSA6ICcnKQogICAgICAgICAgICAgICAgICAgICAgICA6IGNsYXNzTmFtZTsKICAgICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgICAgICBqcUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpOwogICAgICAgIH0pOwogICAgICAgIGFwcGx5U3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpOwogICAgICAgIHJldHVybiBhc3luY1Byb21pc2UoKTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRhbmltYXRlI3NldENsYXNzCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGRzIGFuZC9vciByZW1vdmVzIHRoZSBnaXZlbiBDU1MgY2xhc3NlcyB0byBhbmQgZnJvbSB0aGUgZWxlbWVudC4KICAgICAgICogV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYXQgYSBsYXRlciB0aW1lLgogICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBoYXZlIGl0cyBDU1MgY2xhc3NlcyBjaGFuZ2VkCiAgICAgICAqICAgcmVtb3ZlZCBmcm9tIGl0CiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZGQgdGhlIENTUyBjbGFzc2VzIHdoaWNoIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHJlbW92ZSB0aGUgQ1NTIGNsYXNzIHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50CiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuCiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZQogICAgICAgKi8KICAgICAgc2V0Q2xhc3MgOiBmdW5jdGlvbihlbGVtZW50LCBhZGQsIHJlbW92ZSwgb3B0aW9ucykgewogICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICB2YXIgU1RPUkFHRV9LRVkgPSAnJCRhbmltYXRlQ2xhc3Nlcyc7CiAgICAgICAgdmFyIGNyZWF0ZWRDYWNoZSA9IGZhbHNlOwogICAgICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7CgogICAgICAgIHZhciBjYWNoZSA9IGVsZW1lbnQuZGF0YShTVE9SQUdFX0tFWSk7CiAgICAgICAgaWYgKCFjYWNoZSkgewogICAgICAgICAgY2FjaGUgPSB7CiAgICAgICAgICAgIGNsYXNzZXM6IHt9LAogICAgICAgICAgICBvcHRpb25zIDogb3B0aW9ucwogICAgICAgICAgfTsKICAgICAgICAgIGNyZWF0ZWRDYWNoZSA9IHRydWU7CiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zICYmIGNhY2hlLm9wdGlvbnMpIHsKICAgICAgICAgIGNhY2hlLm9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZChjYWNoZS5vcHRpb25zIHx8IHt9LCBvcHRpb25zKTsKICAgICAgICB9CgogICAgICAgIHZhciBjbGFzc2VzID0gY2FjaGUuY2xhc3NlczsKCiAgICAgICAgYWRkID0gaXNBcnJheShhZGQpID8gYWRkIDogYWRkLnNwbGl0KCcgJyk7CiAgICAgICAgcmVtb3ZlID0gaXNBcnJheShyZW1vdmUpID8gcmVtb3ZlIDogcmVtb3ZlLnNwbGl0KCcgJyk7CiAgICAgICAgY2FjaGVkQ2xhc3NNYW5pcHVsYXRpb24oY2xhc3NlcywgYWRkLCB0cnVlKTsKICAgICAgICBjYWNoZWRDbGFzc01hbmlwdWxhdGlvbihjbGFzc2VzLCByZW1vdmUsIGZhbHNlKTsKCiAgICAgICAgaWYgKGNyZWF0ZWRDYWNoZSkgewogICAgICAgICAgY2FjaGUucHJvbWlzZSA9IHJ1bkFuaW1hdGlvblBvc3REaWdlc3QoZnVuY3Rpb24oZG9uZSkgewogICAgICAgICAgICB2YXIgY2FjaGUgPSBlbGVtZW50LmRhdGEoU1RPUkFHRV9LRVkpOwogICAgICAgICAgICBlbGVtZW50LnJlbW92ZURhdGEoU1RPUkFHRV9LRVkpOwoKICAgICAgICAgICAgLy8gaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBiZWZvcmUgcG9zdERpZ2VzdAogICAgICAgICAgICAvLyBpcyBydW4gdGhlbiB0aGUgY2FjaGUgd2lsbCBiZSB1bmRlZmluZWQgYW5kIHRoZXJlIHdpbGwgYmUKICAgICAgICAgICAgLy8gbm8gbmVlZCBhbnltb3JlIHRvIGFkZCBvciByZW1vdmUgYW5kIG9mIHRoZSBlbGVtZW50IGNsYXNzZXMKICAgICAgICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSByZXNvbHZlRWxlbWVudENsYXNzZXMoZWxlbWVudCwgY2FjaGUuY2xhc3Nlcyk7CiAgICAgICAgICAgICAgaWYgKGNsYXNzZXMpIHsKICAgICAgICAgICAgICAgIHNlbGYuJCRzZXRDbGFzc0ltbWVkaWF0ZWx5KGVsZW1lbnQsIGNsYXNzZXNbMF0sIGNsYXNzZXNbMV0sIGNhY2hlLm9wdGlvbnMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZG9uZSgpOwogICAgICAgICAgfSk7CiAgICAgICAgICBlbGVtZW50LmRhdGEoU1RPUkFHRV9LRVksIGNhY2hlKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBjYWNoZS5wcm9taXNlOwogICAgICB9LAoKICAgICAgJCRzZXRDbGFzc0ltbWVkaWF0ZWx5IDogZnVuY3Rpb24oZWxlbWVudCwgYWRkLCByZW1vdmUsIG9wdGlvbnMpIHsKICAgICAgICBhZGQgJiYgdGhpcy4kJGFkZENsYXNzSW1tZWRpYXRlbHkoZWxlbWVudCwgYWRkKTsKICAgICAgICByZW1vdmUgJiYgdGhpcy4kJHJlbW92ZUNsYXNzSW1tZWRpYXRlbHkoZWxlbWVudCwgcmVtb3ZlKTsKICAgICAgICBhcHBseVN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTsKICAgICAgICByZXR1cm4gYXN5bmNQcm9taXNlKCk7CiAgICAgIH0sCgogICAgICBlbmFibGVkIDogbm9vcCwKICAgICAgY2FuY2VsIDogbm9vcAogICAgfTsKICB9XTsKfV07CgpmdW5jdGlvbiAkJEFzeW5jQ2FsbGJhY2tQcm92aWRlcigpewogIHRoaXMuJGdldCA9IFsnJCRyQUYnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkJHJBRiwgJHRpbWVvdXQpIHsKICAgIHJldHVybiAkJHJBRi5zdXBwb3J0ZWQKICAgICAgPyBmdW5jdGlvbihmbikgeyByZXR1cm4gJCRyQUYoZm4pOyB9CiAgICAgIDogZnVuY3Rpb24oZm4pIHsKICAgICAgICByZXR1cm4gJHRpbWVvdXQoZm4sIDAsIGZhbHNlKTsKICAgICAgfTsKICB9XTsKfQoKLyogZ2xvYmFsIHN0cmlwSGFzaDogdHJ1ZSAqLwoKLyoqCiAqICEgVGhpcyBpcyBhIHByaXZhdGUgdW5kb2N1bWVudGVkIHNlcnZpY2UgIQogKgogKiBAbmFtZSAkYnJvd3NlcgogKiBAcmVxdWlyZXMgJGxvZwogKiBAZGVzY3JpcHRpb24KICogVGhpcyBvYmplY3QgaGFzIHR3byBnb2FsczoKICoKICogLSBoaWRlIGFsbCB0aGUgZ2xvYmFsIHN0YXRlIGluIHRoZSBicm93c2VyIGNhdXNlZCBieSB0aGUgd2luZG93IG9iamVjdAogKiAtIGFic3RyYWN0IGF3YXkgYWxsIHRoZSBicm93c2VyIHNwZWNpZmljIGZlYXR1cmVzIGFuZCBpbmNvbnNpc3RlbmNpZXMKICoKICogRm9yIHRlc3RzIHdlIHByb3ZpZGUge0BsaW5rIG5nTW9jay4kYnJvd3NlciBtb2NrIGltcGxlbWVudGF0aW9ufSBvZiB0aGUgYCRicm93c2VyYAogKiBzZXJ2aWNlLCB3aGljaCBjYW4gYmUgdXNlZCBmb3IgY29udmVuaWVudCB0ZXN0aW5nIG9mIHRoZSBhcHBsaWNhdGlvbiB3aXRob3V0IHRoZSBpbnRlcmFjdGlvbiB3aXRoCiAqIHRoZSByZWFsIGJyb3dzZXIgYXBpcy4KICovCi8qKgogKiBAcGFyYW0ge29iamVjdH0gd2luZG93IFRoZSBnbG9iYWwgd2luZG93IG9iamVjdC4KICogQHBhcmFtIHtvYmplY3R9IGRvY3VtZW50IGpRdWVyeSB3cmFwcGVkIGRvY3VtZW50LgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IFhIUiBYTUxIdHRwUmVxdWVzdCBjb25zdHJ1Y3Rvci4KICogQHBhcmFtIHtvYmplY3R9ICRsb2cgY29uc29sZS5sb2cgb3IgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgaW50ZXJmYWNlLgogKiBAcGFyYW0ge29iamVjdH0gJHNuaWZmZXIgJHNuaWZmZXIgc2VydmljZQogKi8KZnVuY3Rpb24gQnJvd3Nlcih3aW5kb3csIGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcikgewogIHZhciBzZWxmID0gdGhpcywKICAgICAgcmF3RG9jdW1lbnQgPSBkb2N1bWVudFswXSwKICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sCiAgICAgIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeSwKICAgICAgc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0LAogICAgICBjbGVhclRpbWVvdXQgPSB3aW5kb3cuY2xlYXJUaW1lb3V0LAogICAgICBwZW5kaW5nRGVmZXJJZHMgPSB7fTsKCiAgc2VsZi5pc01vY2sgPSBmYWxzZTsKCiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gMDsKICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzID0gW107CgogIC8vIFRPRE8odm9qdGEpOiByZW1vdmUgdGhpcyB0ZW1wb3JhcnkgYXBpCiAgc2VsZi4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0ID0gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Q7CiAgc2VsZi4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gZnVuY3Rpb24oKSB7IG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7IH07CgogIC8qKgogICAqIEV4ZWN1dGVzIHRoZSBgZm5gIGZ1bmN0aW9uKHN1cHBvcnRzIGN1cnJ5aW5nKSBhbmQgZGVjcmVtZW50cyB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2AKICAgKiBjb3VudGVyLiBJZiB0aGUgY291bnRlciByZWFjaGVzIDAsIGFsbCB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2AgYXJlIGV4ZWN1dGVkLgogICAqLwogIGZ1bmN0aW9uIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKSB7CiAgICB0cnkgewogICAgICBmbi5hcHBseShudWxsLCBzbGljZUFyZ3MoYXJndW1lbnRzLCAxKSk7CiAgICB9IGZpbmFsbHkgewogICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudC0tOwogICAgICBpZiAob3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPT09IDApIHsKICAgICAgICB3aGlsZShvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MubGVuZ3RoKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucG9wKCkoKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgJGxvZy5lcnJvcihlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CgogIC8qKgogICAqIEBwcml2YXRlCiAgICogTm90ZTogdGhpcyBtZXRob2QgaXMgdXNlZCBvbmx5IGJ5IHNjZW5hcmlvIHJ1bm5lcgogICAqIFRPRE8odm9qdGEpOiBwcmVmaXggdGhpcyBtZXRob2Qgd2l0aCAkJCA/CiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gbm8gb3V0c3RhbmRpbmcgcmVxdWVzdAogICAqLwogIHNlbGYubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAvLyBmb3JjZSBicm93c2VyIHRvIGV4ZWN1dGUgYWxsIHBvbGxGbnMgLSB0aGlzIGlzIG5lZWRlZCBzbyB0aGF0IGNvb2tpZXMgYW5kIG90aGVyIHBvbGxlcnMgZmlyZQogICAgLy8gYXQgc29tZSBkZXRlcm1pbmlzdGljIHRpbWUgaW4gcmVzcGVjdCB0byB0aGUgdGVzdCBydW5uZXIncyBhY3Rpb25zLiBMZWF2aW5nIHRoaW5ncyB1cCB0byB0aGUKICAgIC8vIHJlZ3VsYXIgcG9sbGVyIHdvdWxkIHJlc3VsdCBpbiBmbGFreSB0ZXN0cy4KICAgIGZvckVhY2gocG9sbEZucywgZnVuY3Rpb24ocG9sbEZuKXsgcG9sbEZuKCk7IH0pOwoKICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkgewogICAgICBjYWxsYmFjaygpOwogICAgfSBlbHNlIHsKICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2spOwogICAgfQogIH07CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgLy8gUG9sbCBXYXRjaGVyIEFQSQogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgdmFyIHBvbGxGbnMgPSBbXSwKICAgICAgcG9sbFRpbWVvdXQ7CgogIC8qKgogICAqIEBuYW1lICRicm93c2VyI2FkZFBvbGxGbgogICAqCiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBQb2xsIGZ1bmN0aW9uIHRvIGFkZAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogQWRkcyBhIGZ1bmN0aW9uIHRvIHRoZSBsaXN0IG9mIGZ1bmN0aW9ucyB0aGF0IHBvbGxlciBwZXJpb2RpY2FsbHkgZXhlY3V0ZXMsCiAgICogYW5kIHN0YXJ0cyBwb2xsaW5nIGlmIG5vdCBzdGFydGVkIHlldC4KICAgKgogICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSB0aGUgYWRkZWQgZnVuY3Rpb24KICAgKi8KICBzZWxmLmFkZFBvbGxGbiA9IGZ1bmN0aW9uKGZuKSB7CiAgICBpZiAoaXNVbmRlZmluZWQocG9sbFRpbWVvdXQpKSBzdGFydFBvbGxlcigxMDAsIHNldFRpbWVvdXQpOwogICAgcG9sbEZucy5wdXNoKGZuKTsKICAgIHJldHVybiBmbjsKICB9OwoKICAvKioKICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWwgSG93IG9mdGVuIHNob3VsZCBicm93c2VyIGNhbGwgcG9sbCBmdW5jdGlvbnMgKG1zKQogICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gc2V0VGltZW91dCBSZWZlcmVuY2UgdG8gYSByZWFsIG9yIGZha2UgYHNldFRpbWVvdXRgIGZ1bmN0aW9uLgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogQ29uZmlndXJlcyB0aGUgcG9sbGVyIHRvIHJ1biBpbiB0aGUgc3BlY2lmaWVkIGludGVydmFscywgdXNpbmcgdGhlIHNwZWNpZmllZAogICAqIHNldFRpbWVvdXQgZm4gYW5kIGtpY2tzIGl0IG9mZi4KICAgKi8KICBmdW5jdGlvbiBzdGFydFBvbGxlcihpbnRlcnZhbCwgc2V0VGltZW91dCkgewogICAgKGZ1bmN0aW9uIGNoZWNrKCkgewogICAgICBmb3JFYWNoKHBvbGxGbnMsIGZ1bmN0aW9uKHBvbGxGbil7IHBvbGxGbigpOyB9KTsKICAgICAgcG9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGNoZWNrLCBpbnRlcnZhbCk7CiAgICB9KSgpOwogIH0KCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAvLyBVUkwgQVBJCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgdmFyIGNhY2hlZFN0YXRlLCBsYXN0SGlzdG9yeVN0YXRlLAogICAgICBsYXN0QnJvd3NlclVybCA9IGxvY2F0aW9uLmhyZWYsCiAgICAgIGJhc2VFbGVtZW50ID0gZG9jdW1lbnQuZmluZCgnYmFzZScpLAogICAgICByZWxvYWRMb2NhdGlvbiA9IG51bGw7CgogIGNhY2hlU3RhdGUoKTsKICBsYXN0SGlzdG9yeVN0YXRlID0gY2FjaGVkU3RhdGU7CgogIC8qKgogICAqIEBuYW1lICRicm93c2VyI3VybAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogR0VUVEVSOgogICAqIFdpdGhvdXQgYW55IGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBqdXN0IHJldHVybnMgY3VycmVudCB2YWx1ZSBvZiBsb2NhdGlvbi5ocmVmLgogICAqCiAgICogU0VUVEVSOgogICAqIFdpdGggYXQgbGVhc3Qgb25lIGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBzZXRzIHVybCB0byBuZXcgdmFsdWUuCiAgICogSWYgaHRtbDUgaGlzdG9yeSBhcGkgc3VwcG9ydGVkLCBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlIGlzIHVzZWQsIG90aGVyd2lzZQogICAqIGxvY2F0aW9uLmhyZWYvbG9jYXRpb24ucmVwbGFjZSBpcyB1c2VkLgogICAqIFJldHVybnMgaXRzIG93biBpbnN0YW5jZSB0byBhbGxvdyBjaGFpbmluZwogICAqCiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5IHRoZSAkbG9jYXRpb24gc2VydmljZS4gUGxlYXNlIHVzZSB0aGUKICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBjaGFuZ2UgdXJsLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBOZXcgdXJsICh3aGVuIHVzZWQgYXMgc2V0dGVyKQogICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlcGxhY2UgU2hvdWxkIG5ldyB1cmwgcmVwbGFjZSBjdXJyZW50IGhpc3RvcnkgcmVjb3JkPwogICAqIEBwYXJhbSB7b2JqZWN0PX0gc3RhdGUgb2JqZWN0IHRvIHVzZSB3aXRoIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUKICAgKi8KICBzZWxmLnVybCA9IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSwgc3RhdGUpIHsKICAgIC8vIEluIG1vZGVybiBicm93c2VycyBgaGlzdG9yeS5zdGF0ZWAgaXMgYG51bGxgIGJ5IGRlZmF1bHQ7IHRyZWF0aW5nIGl0IHNlcGFyYXRlbHkKICAgIC8vIGZyb20gYHVuZGVmaW5lZGAgd291bGQgY2F1c2UgYCRicm93c2VyLnVybCgnL2ZvbycpYCB0byBjaGFuZ2UgYGhpc3Rvcnkuc3RhdGVgCiAgICAvLyB0byB1bmRlZmluZWQgdmlhIGBwdXNoU3RhdGVgLiBJbnN0ZWFkLCBsZXQncyBjaGFuZ2UgYHVuZGVmaW5lZGAgdG8gYG51bGxgIGhlcmUuCiAgICBpZiAoaXNVbmRlZmluZWQoc3RhdGUpKSB7CiAgICAgIHN0YXRlID0gbnVsbDsKICAgIH0KCiAgICAvLyBBbmRyb2lkIEJyb3dzZXIgQkZDYWNoZSBjYXVzZXMgbG9jYXRpb24sIGhpc3RvcnkgcmVmZXJlbmNlIHRvIGJlY29tZSBzdGFsZS4KICAgIGlmIChsb2NhdGlvbiAhPT0gd2luZG93LmxvY2F0aW9uKSBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjsKICAgIGlmIChoaXN0b3J5ICE9PSB3aW5kb3cuaGlzdG9yeSkgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5OwoKICAgIC8vIHNldHRlcgogICAgaWYgKHVybCkgewogICAgICB2YXIgc2FtZVN0YXRlID0gbGFzdEhpc3RvcnlTdGF0ZSA9PT0gc3RhdGU7CgogICAgICAvLyBEb24ndCBjaGFuZ2UgYW55dGhpbmcgaWYgcHJldmlvdXMgYW5kIGN1cnJlbnQgVVJMcyBhbmQgc3RhdGVzIG1hdGNoLiBUaGlzIGFsc28gcHJldmVudHMKICAgICAgLy8gSUU8MTAgZnJvbSBnZXR0aW5nIGludG8gcmVkaXJlY3QgbG9vcCB3aGVuIGluIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsIG1vZGUuCiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2NvbW1pdC9mZmIyNzAxCiAgICAgIGlmIChsYXN0QnJvd3NlclVybCA9PT0gdXJsICYmICghJHNuaWZmZXIuaGlzdG9yeSB8fCBzYW1lU3RhdGUpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciBzYW1lQmFzZSA9IGxhc3RCcm93c2VyVXJsICYmIHN0cmlwSGFzaChsYXN0QnJvd3NlclVybCkgPT09IHN0cmlwSGFzaCh1cmwpOwogICAgICBsYXN0QnJvd3NlclVybCA9IHVybDsKICAgICAgbGFzdEhpc3RvcnlTdGF0ZSA9IHN0YXRlOwogICAgICAvLyBEb24ndCB1c2UgaGlzdG9yeSBBUEkgaWYgb25seSB0aGUgaGFzaCBjaGFuZ2VkCiAgICAgIC8vIGR1ZSB0byBhIGJ1ZyBpbiBJRTEwL0lFMTEgd2hpY2ggbGVhZHMKICAgICAgLy8gdG8gbm90IGZpcmluZyBhIGBoYXNoY2hhbmdlYCBub3IgYHBvcHN0YXRlYCBldmVudAogICAgICAvLyBpbiBzb21lIGNhc2VzIChzZWUgIzkxNDMpLgogICAgICBpZiAoJHNuaWZmZXIuaGlzdG9yeSAmJiAoIXNhbWVCYXNlIHx8ICFzYW1lU3RhdGUpKSB7CiAgICAgICAgaGlzdG9yeVtyZXBsYWNlID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oc3RhdGUsICcnLCB1cmwpOwogICAgICAgIGNhY2hlU3RhdGUoKTsKICAgICAgICAvLyBEbyB0aGUgYXNzaWdubWVudCBhZ2FpbiBzbyB0aGF0IHRob3NlIHR3byB2YXJpYWJsZXMgYXJlIHJlZmVyZW50aWFsbHkgaWRlbnRpY2FsLgogICAgICAgIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoIXNhbWVCYXNlKSB7CiAgICAgICAgICByZWxvYWRMb2NhdGlvbiA9IHVybDsKICAgICAgICB9CiAgICAgICAgaWYgKHJlcGxhY2UpIHsKICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UodXJsKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHVybDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHNlbGY7CiAgICAvLyBnZXR0ZXIKICAgIH0gZWxzZSB7CiAgICAgIC8vIC0gcmVsb2FkTG9jYXRpb24gaXMgbmVlZGVkIGFzIGJyb3dzZXJzIGRvbid0IGFsbG93IHRvIHJlYWQgb3V0CiAgICAgIC8vICAgdGhlIG5ldyBsb2NhdGlvbi5ocmVmIGlmIGEgcmVsb2FkIGhhcHBlbmVkLgogICAgICAvLyAtIHRoZSByZXBsYWNlbWVudCBpcyBhIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQwNzE3MgogICAgICByZXR1cm4gcmVsb2FkTG9jYXRpb24gfHwgbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8lMjcvZywiJyIpOwogICAgfQogIH07CgogIC8qKgogICAqIEBuYW1lICRicm93c2VyI3N0YXRlCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBhIGdldHRlci4KICAgKgogICAqIFJldHVybiBoaXN0b3J5LnN0YXRlIG9yIG51bGwgaWYgaGlzdG9yeS5zdGF0ZSBpcyB1bmRlZmluZWQuCiAgICoKICAgKiBAcmV0dXJucyB7b2JqZWN0fSBzdGF0ZQogICAqLwogIHNlbGYuc3RhdGUgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBjYWNoZWRTdGF0ZTsKICB9OwoKICB2YXIgdXJsQ2hhbmdlTGlzdGVuZXJzID0gW10sCiAgICAgIHVybENoYW5nZUluaXQgPSBmYWxzZTsKCiAgZnVuY3Rpb24gY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UoKSB7CiAgICBjYWNoZVN0YXRlKCk7CiAgICBmaXJlVXJsQ2hhbmdlKCk7CiAgfQoKICAvLyBUaGlzIHZhcmlhYmxlIHNob3VsZCBiZSB1c2VkICpvbmx5KiBpbnNpZGUgdGhlIGNhY2hlU3RhdGUgZnVuY3Rpb24uCiAgdmFyIGxhc3RDYWNoZWRTdGF0ZSA9IG51bGw7CiAgZnVuY3Rpb24gY2FjaGVTdGF0ZSgpIHsKICAgIC8vIFRoaXMgc2hvdWxkIGJlIHRoZSBvbmx5IHBsYWNlIGluICRicm93c2VyIHdoZXJlIGBoaXN0b3J5LnN0YXRlYCBpcyByZWFkLgogICAgY2FjaGVkU3RhdGUgPSB3aW5kb3cuaGlzdG9yeS5zdGF0ZTsKICAgIGNhY2hlZFN0YXRlID0gaXNVbmRlZmluZWQoY2FjaGVkU3RhdGUpID8gbnVsbCA6IGNhY2hlZFN0YXRlOwoKICAgIC8vIFByZXZlbnQgY2FsbGJhY2tzIGZvIGZpcmUgdHdpY2UgaWYgYm90aCBoYXNoY2hhbmdlICYgcG9wc3RhdGUgd2VyZSBmaXJlZC4KICAgIGlmIChlcXVhbHMoY2FjaGVkU3RhdGUsIGxhc3RDYWNoZWRTdGF0ZSkpIHsKICAgICAgY2FjaGVkU3RhdGUgPSBsYXN0Q2FjaGVkU3RhdGU7CiAgICB9CiAgICBsYXN0Q2FjaGVkU3RhdGUgPSBjYWNoZWRTdGF0ZTsKICB9CgogIGZ1bmN0aW9uIGZpcmVVcmxDaGFuZ2UoKSB7CiAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHNlbGYudXJsKCkgJiYgbGFzdEhpc3RvcnlTdGF0ZSA9PT0gY2FjaGVkU3RhdGUpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGxhc3RCcm93c2VyVXJsID0gc2VsZi51cmwoKTsKICAgIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTsKICAgIGZvckVhY2godXJsQ2hhbmdlTGlzdGVuZXJzLCBmdW5jdGlvbihsaXN0ZW5lcikgewogICAgICBsaXN0ZW5lcihzZWxmLnVybCgpLCBjYWNoZWRTdGF0ZSk7CiAgICB9KTsKICB9CgogIC8qKgogICAqIEBuYW1lICRicm93c2VyI29uVXJsQ2hhbmdlCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBSZWdpc3RlciBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkLCB3aGVuIHVybCBjaGFuZ2VzLgogICAqCiAgICogSXQncyBvbmx5IGNhbGxlZCB3aGVuIHRoZSB1cmwgaXMgY2hhbmdlZCBmcm9tIG91dHNpZGUgb2YgYW5ndWxhcjoKICAgKiAtIHVzZXIgdHlwZXMgZGlmZmVyZW50IHVybCBpbnRvIGFkZHJlc3MgYmFyCiAgICogLSB1c2VyIGNsaWNrcyBvbiBoaXN0b3J5IChmb3J3YXJkL2JhY2spIGJ1dHRvbgogICAqIC0gdXNlciBjbGlja3Mgb24gYSBsaW5rCiAgICoKICAgKiBJdCdzIG5vdCBjYWxsZWQgd2hlbiB1cmwgaXMgY2hhbmdlZCBieSAkYnJvd3Nlci51cmwoKSBtZXRob2QKICAgKgogICAqIFRoZSBsaXN0ZW5lciBnZXRzIGNhbGxlZCB3aXRoIG5ldyB1cmwgYXMgcGFyYW1ldGVyLgogICAqCiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5IHRoZSAkbG9jYXRpb24gc2VydmljZS4gUGxlYXNlIHVzZSB0aGUKICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBtb25pdG9yIHVybCBjaGFuZ2VzIGluIGFuZ3VsYXIgYXBwcy4KICAgKgogICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nKX0gbGlzdGVuZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdXJsIGNoYW5nZXMuCiAgICogQHJldHVybiB7ZnVuY3Rpb24oc3RyaW5nKX0gUmV0dXJucyB0aGUgcmVnaXN0ZXJlZCBsaXN0ZW5lciBmbiAtIGhhbmR5IGlmIHRoZSBmbiBpcyBhbm9ueW1vdXMuCiAgICovCiAgc2VsZi5vblVybENoYW5nZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAvLyBUT0RPKHZvanRhKTogcmVmYWN0b3IgdG8gdXNlIG5vZGUncyBzeW50YXggZm9yIGV2ZW50cwogICAgaWYgKCF1cmxDaGFuZ2VJbml0KSB7CiAgICAgIC8vIFdlIGxpc3RlbiBvbiBib3RoIChoYXNoY2hhbmdlL3BvcHN0YXRlKSB3aGVuIGF2YWlsYWJsZSwgYXMgc29tZSBicm93c2VycyAoZS5nLiBPcGVyYSkKICAgICAgLy8gZG9uJ3QgZmlyZSBwb3BzdGF0ZSB3aGVuIHVzZXIgY2hhbmdlIHRoZSBhZGRyZXNzIGJhciBhbmQgZG9uJ3QgZmlyZSBoYXNoY2hhbmdlIHdoZW4gdXJsCiAgICAgIC8vIGNoYW5nZWQgYnkgcHVzaC9yZXBsYWNlU3RhdGUKCiAgICAgIC8vIGh0bWw1IGhpc3RvcnkgYXBpIC0gcG9wc3RhdGUgZXZlbnQKICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIGpxTGl0ZSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTsKICAgICAgLy8gaGFzaGNoYW5nZSBldmVudAogICAgICBqcUxpdGUod2luZG93KS5vbignaGFzaGNoYW5nZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTsKCiAgICAgIHVybENoYW5nZUluaXQgPSB0cnVlOwogICAgfQoKICAgIHVybENoYW5nZUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTsKICAgIHJldHVybiBjYWxsYmFjazsKICB9OwoKICAvKioKICAgKiBDaGVja3Mgd2hldGhlciB0aGUgdXJsIGhhcyBjaGFuZ2VkIG91dHNpZGUgb2YgQW5ndWxhci4KICAgKiBOZWVkcyB0byBiZSBleHBvcnRlZCB0byBiZSBhYmxlIHRvIGNoZWNrIGZvciBjaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIGRvbmUgaW4gc3luYywKICAgKiBhcyBoYXNoY2hhbmdlL3BvcHN0YXRlIGV2ZW50cyBmaXJlIGluIGFzeW5jLgogICAqLwogIHNlbGYuJCRjaGVja1VybENoYW5nZSA9IGZpcmVVcmxDaGFuZ2U7CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgLy8gTWlzYyBBUEkKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAvKioKICAgKiBAbmFtZSAkYnJvd3NlciNiYXNlSHJlZgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmV0dXJucyBjdXJyZW50IDxiYXNlIGhyZWY+CiAgICogKGFsd2F5cyByZWxhdGl2ZSAtIHdpdGhvdXQgZG9tYWluKQogICAqCiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgYmFzZSBocmVmCiAgICovCiAgc2VsZi5iYXNlSHJlZiA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGhyZWYgPSBiYXNlRWxlbWVudC5hdHRyKCdocmVmJyk7CiAgICByZXR1cm4gaHJlZiA/IGhyZWYucmVwbGFjZSgvXihodHRwcz9cOik/XC9cL1teXC9dKi8sICcnKSA6ICcnOwogIH07CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgLy8gQ29va2llcyBBUEkKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIHZhciBsYXN0Q29va2llcyA9IHt9OwogIHZhciBsYXN0Q29va2llU3RyaW5nID0gJyc7CiAgdmFyIGNvb2tpZVBhdGggPSBzZWxmLmJhc2VIcmVmKCk7CgogIGZ1bmN0aW9uIHNhZmVEZWNvZGVVUklDb21wb25lbnQoc3RyKSB7CiAgICB0cnkgewogICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiBzdHI7CiAgICB9CiAgfQoKICAvKioKICAgKiBAbmFtZSAkYnJvd3NlciNjb29raWVzCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgQ29va2llIG5hbWUKICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIENvb2tpZSB2YWx1ZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhlIGNvb2tpZXMgbWV0aG9kIHByb3ZpZGVzIGEgJ3ByaXZhdGUnIGxvdyBsZXZlbCBhY2Nlc3MgdG8gYnJvd3NlciBjb29raWVzLgogICAqIEl0IGlzIG5vdCBtZWFudCB0byBiZSB1c2VkIGRpcmVjdGx5LCB1c2UgdGhlICRjb29raWUgc2VydmljZSBpbnN0ZWFkLgogICAqCiAgICogVGhlIHJldHVybiB2YWx1ZXMgdmFyeSBkZXBlbmRpbmcgb24gdGhlIGFyZ3VtZW50cyB0aGF0IHRoZSBtZXRob2Qgd2FzIGNhbGxlZCB3aXRoIGFzIGZvbGxvd3M6CiAgICoKICAgKiAtIGNvb2tpZXMoKSAtPiBoYXNoIG9mIGFsbCBjb29raWVzLCB0aGlzIGlzIE5PVCBhIGNvcHkgb2YgdGhlIGludGVybmFsIHN0YXRlLCBzbyBkbyBub3QgbW9kaWZ5CiAgICogICBpdAogICAqIC0gY29va2llcyhuYW1lLCB2YWx1ZSkgLT4gc2V0IG5hbWUgdG8gdmFsdWUsIGlmIHZhbHVlIGlzIHVuZGVmaW5lZCBkZWxldGUgdGhlIGNvb2tpZQogICAqIC0gY29va2llcyhuYW1lKSAtPiB0aGUgc2FtZSBhcyAobmFtZSwgdW5kZWZpbmVkKSA9PSBERUxFVEVTIChubyBvbmUgY2FsbHMgaXQgcmlnaHQgbm93IHRoYXQKICAgKiAgIHdheSkKICAgKgogICAqIEByZXR1cm5zIHtPYmplY3R9IEhhc2ggb2YgYWxsIGNvb2tpZXMgKGlmIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIpCiAgICovCiAgc2VsZi5jb29raWVzID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgIHZhciBjb29raWVMZW5ndGgsIGNvb2tpZUFycmF5LCBjb29raWUsIGksIGluZGV4OwoKICAgIGlmIChuYW1lKSB7CiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmF3RG9jdW1lbnQuY29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgIj07cGF0aD0iICsgY29va2llUGF0aCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjtleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UIjsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7CiAgICAgICAgICBjb29raWVMZW5ndGggPSAocmF3RG9jdW1lbnQuY29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJztwYXRoPScgKyBjb29raWVQYXRoKS5sZW5ndGggKyAxOwoKICAgICAgICAgIC8vIHBlciBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMyMTA5LnR4dCBicm93c2VyIG11c3QgYWxsb3cgYXQgbWluaW11bToKICAgICAgICAgIC8vIC0gMzAwIGNvb2tpZXMKICAgICAgICAgIC8vIC0gMjAgY29va2llcyBwZXIgdW5pcXVlIGRvbWFpbgogICAgICAgICAgLy8gLSA0MDk2IGJ5dGVzIHBlciBjb29raWUKICAgICAgICAgIGlmIChjb29raWVMZW5ndGggPiA0MDk2KSB7CiAgICAgICAgICAgICRsb2cud2FybigiQ29va2llICciKyBuYW1lICsKICAgICAgICAgICAgICAiJyBwb3NzaWJseSBub3Qgc2V0IG9yIG92ZXJmbG93ZWQgYmVjYXVzZSBpdCB3YXMgdG9vIGxhcmdlICgiKwogICAgICAgICAgICAgIGNvb2tpZUxlbmd0aCArICIgPiA0MDk2IGJ5dGVzKSEiKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmIChyYXdEb2N1bWVudC5jb29raWUgIT09IGxhc3RDb29raWVTdHJpbmcpIHsKICAgICAgICBsYXN0Q29va2llU3RyaW5nID0gcmF3RG9jdW1lbnQuY29va2llOwogICAgICAgIGNvb2tpZUFycmF5ID0gbGFzdENvb2tpZVN0cmluZy5zcGxpdCgiOyAiKTsKICAgICAgICBsYXN0Q29va2llcyA9IHt9OwoKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29va2llQXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvb2tpZSA9IGNvb2tpZUFycmF5W2ldOwogICAgICAgICAgaW5kZXggPSBjb29raWUuaW5kZXhPZignPScpOwogICAgICAgICAgaWYgKGluZGV4ID4gMCkgeyAvL2lnbm9yZSBuYW1lbGVzcyBjb29raWVzCiAgICAgICAgICAgIG5hbWUgPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoMCwgaW5kZXgpKTsKICAgICAgICAgICAgLy8gdGhlIGZpcnN0IHZhbHVlIHRoYXQgaXMgc2VlbiBmb3IgYSBjb29raWUgaXMgdGhlIG1vc3QKICAgICAgICAgICAgLy8gc3BlY2lmaWMgb25lLiAgdmFsdWVzIGZvciB0aGUgc2FtZSBjb29raWUgbmFtZSB0aGF0CiAgICAgICAgICAgIC8vIGZvbGxvdyBhcmUgZm9yIGxlc3Mgc3BlY2lmaWMgcGF0aHMuCiAgICAgICAgICAgIGlmIChsYXN0Q29va2llc1tuYW1lXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgbGFzdENvb2tpZXNbbmFtZV0gPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoaW5kZXggKyAxKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGxhc3RDb29raWVzOwogICAgfQogIH07CgoKICAvKioKICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlcgogICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiwgd2hvJ3MgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWZlcnJlZC4KICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBvZiBtaWxsaXNlY29uZHMgdG8gZGVmZXIgdGhlIGZ1bmN0aW9uIGV4ZWN1dGlvbi4KICAgKiBAcmV0dXJucyB7Kn0gRGVmZXJJZCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNhbmNlbCB0aGUgdGFzayB2aWEgYCRicm93c2VyLmRlZmVyLmNhbmNlbCgpYC4KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIEV4ZWN1dGVzIGEgZm4gYXN5bmNocm9ub3VzbHkgdmlhIGBzZXRUaW1lb3V0KGZuLCBkZWxheSlgLgogICAqCiAgICogVW5saWtlIHdoZW4gY2FsbGluZyBgc2V0VGltZW91dGAgZGlyZWN0bHksIGluIHRlc3QgdGhpcyBmdW5jdGlvbiBpcyBtb2NrZWQgYW5kIGluc3RlYWQgb2YgdXNpbmcKICAgKiBgc2V0VGltZW91dGAgaW4gdGVzdHMsIHRoZSBmbnMgYXJlIHF1ZXVlZCBpbiBhbiBhcnJheSwgd2hpY2ggY2FuIGJlIHByb2dyYW1tYXRpY2FsbHkgZmx1c2hlZAogICAqIHZpYSBgJGJyb3dzZXIuZGVmZXIuZmx1c2goKWAuCiAgICoKICAgKi8KICBzZWxmLmRlZmVyID0gZnVuY3Rpb24oZm4sIGRlbGF5KSB7CiAgICB2YXIgdGltZW91dElkOwogICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKzsKICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXTsKICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pOwogICAgfSwgZGVsYXkgfHwgMCk7CiAgICBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXSA9IHRydWU7CiAgICByZXR1cm4gdGltZW91dElkOwogIH07CgoKICAvKioKICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlci5jYW5jZWwKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIENhbmNlbHMgYSBkZWZlcnJlZCB0YXNrIGlkZW50aWZpZWQgd2l0aCBgZGVmZXJJZGAuCiAgICoKICAgKiBAcGFyYW0geyp9IGRlZmVySWQgVG9rZW4gcmV0dXJuZWQgYnkgdGhlIGAkYnJvd3Nlci5kZWZlcmAgZnVuY3Rpb24uCiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHkKICAgKiAgICAgICAgICAgICAgICAgICAgY2FuY2VsZWQuCiAgICovCiAgc2VsZi5kZWZlci5jYW5jZWwgPSBmdW5jdGlvbihkZWZlcklkKSB7CiAgICBpZiAocGVuZGluZ0RlZmVySWRzW2RlZmVySWRdKSB7CiAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbZGVmZXJJZF07CiAgICAgIGNsZWFyVGltZW91dChkZWZlcklkKTsKICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Qobm9vcCk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH07Cgp9CgpmdW5jdGlvbiAkQnJvd3NlclByb3ZpZGVyKCl7CiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRsb2cnLCAnJHNuaWZmZXInLCAnJGRvY3VtZW50JywKICAgICAgZnVuY3Rpb24oICR3aW5kb3csICAgJGxvZywgICAkc25pZmZlciwgICAkZG9jdW1lbnQpewogICAgICAgIHJldHVybiBuZXcgQnJvd3Nlcigkd2luZG93LCAkZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKTsKICAgICAgfV07Cn0KCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkY2FjaGVGYWN0b3J5CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBGYWN0b3J5IHRoYXQgY29uc3RydWN0cyB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0cyBhbmQgZ2l2ZXMgYWNjZXNzIHRvCiAqIHRoZW0uCiAqCiAqIGBgYGpzCiAqCiAqICB2YXIgY2FjaGUgPSAkY2FjaGVGYWN0b3J5KCdjYWNoZUlkJyk7CiAqICBleHBlY3QoJGNhY2hlRmFjdG9yeS5nZXQoJ2NhY2hlSWQnKSkudG9CZShjYWNoZSk7CiAqICBleHBlY3QoJGNhY2hlRmFjdG9yeS5nZXQoJ25vU3VjaENhY2hlSWQnKSkubm90LnRvQmVEZWZpbmVkKCk7CiAqCiAqICBjYWNoZS5wdXQoImtleSIsICJ2YWx1ZSIpOwogKiAgY2FjaGUucHV0KCJhbm90aGVyIGtleSIsICJhbm90aGVyIHZhbHVlIik7CiAqCiAqICAvLyBXZSd2ZSBzcGVjaWZpZWQgbm8gb3B0aW9ucyBvbiBjcmVhdGlvbgogKiAgZXhwZWN0KGNhY2hlLmluZm8oKSkudG9FcXVhbCh7aWQ6ICdjYWNoZUlkJywgc2l6ZTogMn0pOwogKgogKiBgYGAKICoKICoKICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlSWQgTmFtZSBvciBpZCBvZiB0aGUgbmV3bHkgY3JlYXRlZCBjYWNoZS4KICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBjYWNoZSBiZWhhdmlvci4gUHJvcGVydGllczoKICoKICogICAtIGB7bnVtYmVyPX1gIGBjYXBhY2l0eWAg4oCUIHR1cm5zIHRoZSBjYWNoZSBpbnRvIExSVSBjYWNoZS4KICoKICogQHJldHVybnMge29iamVjdH0gTmV3bHkgY3JlYXRlZCBjYWNoZSBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHNldCBvZiBtZXRob2RzOgogKgogKiAtIGB7b2JqZWN0fWAgYGluZm8oKWAg4oCUIFJldHVybnMgaWQsIHNpemUsIGFuZCBvcHRpb25zIG9mIGNhY2hlLgogKiAtIGB7eyp9fWAgYHB1dCh7c3RyaW5nfSBrZXksIHsqfSB2YWx1ZSlgIOKAlCBQdXRzIGEgbmV3IGtleS12YWx1ZSBwYWlyIGludG8gdGhlIGNhY2hlIGFuZCByZXR1cm5zCiAqICAgaXQuCiAqIC0gYHt7Kn19YCBgZ2V0KHtzdHJpbmd9IGtleSlgIOKAlCBSZXR1cm5zIGNhY2hlZCB2YWx1ZSBmb3IgYGtleWAgb3IgdW5kZWZpbmVkIGZvciBjYWNoZSBtaXNzLgogKiAtIGB7dm9pZH1gIGByZW1vdmUoe3N0cmluZ30ga2V5KWAg4oCUIFJlbW92ZXMgYSBrZXktdmFsdWUgcGFpciBmcm9tIHRoZSBjYWNoZS4KICogLSBge3ZvaWR9YCBgcmVtb3ZlQWxsKClgIOKAlCBSZW1vdmVzIGFsbCBjYWNoZWQgdmFsdWVzLgogKiAtIGB7dm9pZH1gIGBkZXN0cm95KClgIOKAlCBSZW1vdmVzIHJlZmVyZW5jZXMgdG8gdGhpcyBjYWNoZSBmcm9tICRjYWNoZUZhY3RvcnkuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlIG1vZHVsZT0iY2FjaGVFeGFtcGxlQXBwIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ2FjaGVDb250cm9sbGVyIj4KICAgICAgICAgPGlucHV0IG5nLW1vZGVsPSJuZXdDYWNoZUtleSIgcGxhY2Vob2xkZXI9IktleSI+CiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD0ibmV3Q2FjaGVWYWx1ZSIgcGxhY2Vob2xkZXI9IlZhbHVlIj4KICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0icHV0KG5ld0NhY2hlS2V5LCBuZXdDYWNoZVZhbHVlKSI+Q2FjaGU8L2J1dHRvbj4KCiAgICAgICAgIDxwIG5nLWlmPSJrZXlzLmxlbmd0aCI+Q2FjaGVkIFZhbHVlczwvcD4KICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9ImtleSBpbiBrZXlzIj4KICAgICAgICAgICA8c3BhbiBuZy1iaW5kPSJrZXkiPjwvc3Bhbj4KICAgICAgICAgICA8c3Bhbj46IDwvc3Bhbj4KICAgICAgICAgICA8YiBuZy1iaW5kPSJjYWNoZS5nZXQoa2V5KSI+PC9iPgogICAgICAgICA8L2Rpdj4KCiAgICAgICAgIDxwPkNhY2hlIEluZm88L3A+CiAgICAgICAgIDxkaXYgbmctcmVwZWF0PSIoa2V5LCB2YWx1ZSkgaW4gY2FjaGUuaW5mbygpIj4KICAgICAgICAgICA8c3BhbiBuZy1iaW5kPSJrZXkiPjwvc3Bhbj4KICAgICAgICAgICA8c3Bhbj46IDwvc3Bhbj4KICAgICAgICAgICA8YiBuZy1iaW5kPSJ2YWx1ZSI+PC9iPgogICAgICAgICA8L2Rpdj4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICAgYW5ndWxhci5tb2R1bGUoJ2NhY2hlRXhhbXBsZUFwcCcsIFtdKS4KICAgICAgICAgY29udHJvbGxlcignQ2FjaGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRzY29wZSwgJGNhY2hlRmFjdG9yeSkgewogICAgICAgICAgICRzY29wZS5rZXlzID0gW107CiAgICAgICAgICAgJHNjb3BlLmNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpOwogICAgICAgICAgICRzY29wZS5wdXQgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICAgICBpZiAoJHNjb3BlLmNhY2hlLmdldChrZXkpID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgJHNjb3BlLmtleXMucHVzaChrZXkpOwogICAgICAgICAgICAgfQogICAgICAgICAgICAgJHNjb3BlLmNhY2hlLnB1dChrZXksIHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogdmFsdWUpOwogICAgICAgICAgIH07CiAgICAgICAgIH1dKTsKICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgIHAgewogICAgICAgICBtYXJnaW46IDEwcHggMCAzcHg7CiAgICAgICB9CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwpmdW5jdGlvbiAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIoKSB7CgogIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGNhY2hlcyA9IHt9OwoKICAgIGZ1bmN0aW9uIGNhY2hlRmFjdG9yeShjYWNoZUlkLCBvcHRpb25zKSB7CiAgICAgIGlmIChjYWNoZUlkIGluIGNhY2hlcykgewogICAgICAgIHRocm93IG1pbkVycignJGNhY2hlRmFjdG9yeScpKCdpaWQnLCAiQ2FjaGVJZCAnezB9JyBpcyBhbHJlYWR5IHRha2VuISIsIGNhY2hlSWQpOwogICAgICB9CgogICAgICB2YXIgc2l6ZSA9IDAsCiAgICAgICAgICBzdGF0cyA9IGV4dGVuZCh7fSwgb3B0aW9ucywge2lkOiBjYWNoZUlkfSksCiAgICAgICAgICBkYXRhID0ge30sCiAgICAgICAgICBjYXBhY2l0eSA9IChvcHRpb25zICYmIG9wdGlvbnMuY2FwYWNpdHkpIHx8IE51bWJlci5NQVhfVkFMVUUsCiAgICAgICAgICBscnVIYXNoID0ge30sCiAgICAgICAgICBmcmVzaEVuZCA9IG51bGwsCiAgICAgICAgICBzdGFsZUVuZCA9IG51bGw7CgogICAgICAvKioKICAgICAgICogQG5nZG9jIHR5cGUKICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZQogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogQSBjYWNoZSBvYmplY3QgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgZGF0YSwgcHJpbWFyaWx5IHVzZWQgYnkKICAgICAgICoge0BsaW5rICRodHRwICRodHRwfSBhbmQgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6c2NyaXB0IHNjcmlwdH0gZGlyZWN0aXZlIHRvIGNhY2hlCiAgICAgICAqIHRlbXBsYXRlcyBhbmQgb3RoZXIgZGF0YS4KICAgICAgICoKICAgICAgICogYGBganMKICAgICAgICogIGFuZ3VsYXIubW9kdWxlKCdzdXBlckNhY2hlJykKICAgICAgICogICAgLmZhY3RvcnkoJ3N1cGVyQ2FjaGUnLCBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7CiAgICAgICAqICAgICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3N1cGVyLWNhY2hlJyk7CiAgICAgICAqICAgIH1dKTsKICAgICAgICogYGBgCiAgICAgICAqCiAgICAgICAqIEV4YW1wbGUgdGVzdDoKICAgICAgICoKICAgICAgICogYGBganMKICAgICAgICogIGl0KCdzaG91bGQgYmVoYXZlIGxpa2UgYSBjYWNoZScsIGluamVjdChmdW5jdGlvbihzdXBlckNhY2hlKSB7CiAgICAgICAqICAgIHN1cGVyQ2FjaGUucHV0KCdrZXknLCAndmFsdWUnKTsKICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2Fub3RoZXIga2V5JywgJ2Fub3RoZXIgdmFsdWUnKTsKICAgICAgICoKICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuaW5mbygpKS50b0VxdWFsKHsKICAgICAgICogICAgICBpZDogJ3N1cGVyLWNhY2hlJywKICAgICAgICogICAgICBzaXplOiAyCiAgICAgICAqICAgIH0pOwogICAgICAgKgogICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZSgnYW5vdGhlciBrZXknKTsKICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuZ2V0KCdhbm90aGVyIGtleScpKS50b0JlVW5kZWZpbmVkKCk7CiAgICAgICAqCiAgICAgICAqICAgIHN1cGVyQ2FjaGUucmVtb3ZlQWxsKCk7CiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmluZm8oKSkudG9FcXVhbCh7CiAgICAgICAqICAgICAgaWQ6ICdzdXBlci1jYWNoZScsCiAgICAgICAqICAgICAgc2l6ZTogMAogICAgICAgKiAgICB9KTsKICAgICAgICogIH0pKTsKICAgICAgICogYGBgCiAgICAgICAqLwogICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdID0gewoKICAgICAgICAvKioKICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNwdXQKICAgICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgICAqCiAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICogSW5zZXJ0cyBhIG5hbWVkIGVudHJ5IGludG8gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QgdG8gYmUKICAgICAgICAgKiByZXRyaWV2ZWQgbGF0ZXIsIGFuZCBpbmNyZW1lbnRpbmcgdGhlIHNpemUgb2YgdGhlIGNhY2hlIGlmIHRoZSBrZXkgd2FzIG5vdCBhbHJlYWR5CiAgICAgICAgICogcHJlc2VudCBpbiB0aGUgY2FjaGUuIElmIGJlaGF2aW5nIGxpa2UgYW4gTFJVIGNhY2hlLCBpdCB3aWxsIGFsc28gcmVtb3ZlIHN0YWxlCiAgICAgICAgICogZW50cmllcyBmcm9tIHRoZSBzZXQuCiAgICAgICAgICoKICAgICAgICAgKiBJdCB3aWxsIG5vdCBpbnNlcnQgdW5kZWZpbmVkIHZhbHVlcyBpbnRvIHRoZSBjYWNoZS4KICAgICAgICAgKgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSB1bmRlciB3aGljaCB0aGUgY2FjaGVkIGRhdGEgaXMgc3RvcmVkLgogICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgdGhlIHZhbHVlIHRvIHN0b3JlIGFsb25nc2lkZSB0aGUga2V5LiBJZiBpdCBpcyB1bmRlZmluZWQsIHRoZSBrZXkKICAgICAgICAgKiAgICB3aWxsIG5vdCBiZSBzdG9yZWQuCiAgICAgICAgICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBzdG9yZWQuCiAgICAgICAgICovCiAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICBpZiAoY2FwYWNpdHkgPCBOdW1iZXIuTUFYX1ZBTFVFKSB7CiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XSB8fCAobHJ1SGFzaFtrZXldID0ge2tleToga2V5fSk7CgogICAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47CiAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHNpemUrKzsKICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlOwoKICAgICAgICAgIGlmIChzaXplID4gY2FwYWNpdHkpIHsKICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3RhbGVFbmQua2V5KTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjZ2V0CiAgICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICAgKgogICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAqIFJldHJpZXZlcyBuYW1lZCBkYXRhIHN0b3JlZCBpbiB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdC4KICAgICAgICAgKgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSBvZiB0aGUgZGF0YSB0byBiZSByZXRyaWV2ZWQKICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHN0b3JlZC4KICAgICAgICAgKi8KICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkgewogICAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV07CgogICAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47CgogICAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gZGF0YVtrZXldOwogICAgICAgIH0sCgoKICAgICAgICAvKioKICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmUKICAgICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgICAqCiAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICogUmVtb3ZlcyBhbiBlbnRyeSBmcm9tIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0LgogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IG9mIHRoZSBlbnRyeSB0byBiZSByZW1vdmVkCiAgICAgICAgICovCiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHsKICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldOwoKICAgICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuOwoKICAgICAgICAgICAgaWYgKGxydUVudHJ5ID09IGZyZXNoRW5kKSBmcmVzaEVuZCA9IGxydUVudHJ5LnA7CiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PSBzdGFsZUVuZCkgc3RhbGVFbmQgPSBscnVFbnRyeS5uOwogICAgICAgICAgICBsaW5rKGxydUVudHJ5Lm4sbHJ1RW50cnkucCk7CgogICAgICAgICAgICBkZWxldGUgbHJ1SGFzaFtrZXldOwogICAgICAgICAgfQoKICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07CiAgICAgICAgICBzaXplLS07CiAgICAgICAgfSwKCgogICAgICAgIC8qKgogICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3JlbW92ZUFsbAogICAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAgICoKICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgKiBDbGVhcnMgdGhlIGNhY2hlIG9iamVjdCBvZiBhbnkgZW50cmllcy4KICAgICAgICAgKi8KICAgICAgICByZW1vdmVBbGw6IGZ1bmN0aW9uKCkgewogICAgICAgICAgZGF0YSA9IHt9OwogICAgICAgICAgc2l6ZSA9IDA7CiAgICAgICAgICBscnVIYXNoID0ge307CiAgICAgICAgICBmcmVzaEVuZCA9IHN0YWxlRW5kID0gbnVsbDsKICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjZGVzdHJveQogICAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAgICoKICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgKiBEZXN0cm95cyB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCBlbnRpcmVseSwKICAgICAgICAgKiByZW1vdmluZyBpdCBmcm9tIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeSAkY2FjaGVGYWN0b3J5fSBzZXQuCiAgICAgICAgICovCiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgICBkYXRhID0gbnVsbDsKICAgICAgICAgIHN0YXRzID0gbnVsbDsKICAgICAgICAgIGxydUhhc2ggPSBudWxsOwogICAgICAgICAgZGVsZXRlIGNhY2hlc1tjYWNoZUlkXTsKICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjaW5mbwogICAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAgICoKICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgKiBSZXRyaWV2ZSBpbmZvcm1hdGlvbiByZWdhcmRpbmcgYSBwYXJ0aWN1bGFyIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfS4KICAgICAgICAgKgogICAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczoKICAgICAgICAgKiAgIDx1bD4KICAgICAgICAgKiAgICAgPGxpPioqaWQqKjogdGhlIGlkIG9mIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+CiAgICAgICAgICogICAgIDxsaT4qKnNpemUqKjogdGhlIG51bWJlciBvZiBlbnRyaWVzIGtlcHQgaW4gdGhlIGNhY2hlIGluc3RhbmNlPC9saT4KICAgICAgICAgKiAgICAgPGxpPioqLi4uKio6IGFueSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgZnJvbSB0aGUgb3B0aW9ucyBvYmplY3Qgd2hlbiBjcmVhdGluZyB0aGUKICAgICAgICAgKiAgICAgICBjYWNoZS48L2xpPgogICAgICAgICAqICAgPC91bD4KICAgICAgICAgKi8KICAgICAgICBpbmZvOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBleHRlbmQoe30sIHN0YXRzLCB7c2l6ZTogc2l6ZX0pOwogICAgICAgIH0KICAgICAgfTsKCgogICAgICAvKioKICAgICAgICogbWFrZXMgdGhlIGBlbnRyeWAgdGhlIGZyZXNoRW5kIG9mIHRoZSBMUlUgbGlua2VkIGxpc3QKICAgICAgICovCiAgICAgIGZ1bmN0aW9uIHJlZnJlc2goZW50cnkpIHsKICAgICAgICBpZiAoZW50cnkgIT0gZnJlc2hFbmQpIHsKICAgICAgICAgIGlmICghc3RhbGVFbmQpIHsKICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeTsKICAgICAgICAgIH0gZWxzZSBpZiAoc3RhbGVFbmQgPT0gZW50cnkpIHsKICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeS5uOwogICAgICAgICAgfQoKICAgICAgICAgIGxpbmsoZW50cnkubiwgZW50cnkucCk7CiAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7CiAgICAgICAgICBmcmVzaEVuZCA9IGVudHJ5OwogICAgICAgICAgZnJlc2hFbmQubiA9IG51bGw7CiAgICAgICAgfQogICAgICB9CgoKICAgICAgLyoqCiAgICAgICAqIGJpZGlyZWN0aW9uYWxseSBsaW5rcyB0d28gZW50cmllcyBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0CiAgICAgICAqLwogICAgICBmdW5jdGlvbiBsaW5rKG5leHRFbnRyeSwgcHJldkVudHJ5KSB7CiAgICAgICAgaWYgKG5leHRFbnRyeSAhPSBwcmV2RW50cnkpIHsKICAgICAgICAgIGlmIChuZXh0RW50cnkpIG5leHRFbnRyeS5wID0gcHJldkVudHJ5OyAvL3Agc3RhbmRzIGZvciBwcmV2aW91cywgJ3ByZXYnIGRpZG4ndCBtaW5pZnkKICAgICAgICAgIGlmIChwcmV2RW50cnkpIHByZXZFbnRyeS5uID0gbmV4dEVudHJ5OyAvL24gc3RhbmRzIGZvciBuZXh0LCAnbmV4dCcgZGlkbid0IG1pbmlmeQogICAgICAgIH0KICAgICAgfQogICAgfQoKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRjYWNoZUZhY3RvcnkjaW5mbwogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCB0aGUgY2FjaGVzIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWQKICAgKgogICAqIEByZXR1cm5zIHtPYmplY3R9IC0ga2V5LXZhbHVlIG1hcCBvZiBgY2FjaGVJZGAgdG8gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIGBjYWNoZSNpbmZvYAogICAqLwogICAgY2FjaGVGYWN0b3J5LmluZm8gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGluZm8gPSB7fTsKICAgICAgZm9yRWFjaChjYWNoZXMsIGZ1bmN0aW9uKGNhY2hlLCBjYWNoZUlkKSB7CiAgICAgICAgaW5mb1tjYWNoZUlkXSA9IGNhY2hlLmluZm8oKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBpbmZvOwogICAgfTsKCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2dldAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogR2V0IGFjY2VzcyB0byBhIGNhY2hlIG9iamVjdCBieSB0aGUgYGNhY2hlSWRgIHVzZWQgd2hlbiBpdCB3YXMgY3JlYXRlZC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUlkIE5hbWUgb3IgaWQgb2YgYSBjYWNoZSB0byBhY2Nlc3MuCiAgICogQHJldHVybnMge29iamVjdH0gQ2FjaGUgb2JqZWN0IGlkZW50aWZpZWQgYnkgdGhlIGNhY2hlSWQgb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2ggY2FjaGUuCiAgICovCiAgICBjYWNoZUZhY3RvcnkuZ2V0ID0gZnVuY3Rpb24oY2FjaGVJZCkgewogICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdOwogICAgfTsKCgogICAgcmV0dXJuIGNhY2hlRmFjdG9yeTsKICB9Owp9CgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJHRlbXBsYXRlQ2FjaGUKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBmaXJzdCB0aW1lIGEgdGVtcGxhdGUgaXMgdXNlZCwgaXQgaXMgbG9hZGVkIGluIHRoZSB0ZW1wbGF0ZSBjYWNoZSBmb3IgcXVpY2sgcmV0cmlldmFsLiBZb3UKICogY2FuIGxvYWQgdGVtcGxhdGVzIGRpcmVjdGx5IGludG8gdGhlIGNhY2hlIGluIGEgYHNjcmlwdGAgdGFnLCBvciBieSBjb25zdW1pbmcgdGhlCiAqIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZSBkaXJlY3RseS4KICoKICogQWRkaW5nIHZpYSB0aGUgYHNjcmlwdGAgdGFnOgogKgogKiBgYGBodG1sCiAqICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L25nLXRlbXBsYXRlIiBpZD0idGVtcGxhdGVJZC5odG1sIj4KICogICAgIDxwPlRoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlPC9wPgogKiAgIDwvc2NyaXB0PgogKiBgYGAKICoKICogKipOb3RlOioqIHRoZSBgc2NyaXB0YCB0YWcgY29udGFpbmluZyB0aGUgdGVtcGxhdGUgZG9lcyBub3QgbmVlZCB0byBiZSBpbmNsdWRlZCBpbiB0aGUgYGhlYWRgIG9mCiAqIHRoZSBkb2N1bWVudCwgYnV0IGl0IG11c3QgYmUgYmVsb3cgdGhlIGBuZy1hcHBgIGRlZmluaXRpb24uCiAqCiAqIEFkZGluZyB2aWEgdGhlICR0ZW1wbGF0ZUNhY2hlIHNlcnZpY2U6CiAqCiAqIGBgYGpzCiAqIHZhciBteUFwcCA9IGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKTsKICogbXlBcHAucnVuKGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7CiAqICAgJHRlbXBsYXRlQ2FjaGUucHV0KCd0ZW1wbGF0ZUlkLmh0bWwnLCAnVGhpcyBpcyB0aGUgY29udGVudCBvZiB0aGUgdGVtcGxhdGUnKTsKICogfSk7CiAqIGBgYAogKgogKiBUbyByZXRyaWV2ZSB0aGUgdGVtcGxhdGUgbGF0ZXIsIHNpbXBseSB1c2UgaXQgaW4geW91ciBIVE1MOgogKiBgYGBodG1sCiAqIDxkaXYgbmctaW5jbHVkZT0iICd0ZW1wbGF0ZUlkLmh0bWwnICI+PC9kaXY+CiAqIGBgYAogKgogKiBvciBnZXQgaXQgdmlhIEphdmFzY3JpcHQ6CiAqIGBgYGpzCiAqICR0ZW1wbGF0ZUNhY2hlLmdldCgndGVtcGxhdGVJZC5odG1sJykKICogYGBgCiAqCiAqIFNlZSB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSAkY2FjaGVGYWN0b3J5fS4KICoKICovCmZ1bmN0aW9uICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSkgewogICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3RlbXBsYXRlcycpOwogIH1dOwp9CgovKiAhIFZBUklBQkxFL0ZVTkNUSU9OIE5BTUlORyBDT05WRU5USU9OUyBUSEFUIEFQUExZIFRPIFRISVMgRklMRSEKICoKICogRE9NLXJlbGF0ZWQgdmFyaWFibGVzOgogKgogKiAtICJub2RlIiAtIERPTSBOb2RlCiAqIC0gImVsZW1lbnQiIC0gRE9NIEVsZW1lbnQgb3IgTm9kZQogKiAtICIkbm9kZSIgb3IgIiRlbGVtZW50IiAtIGpxTGl0ZS13cmFwcGVkIG5vZGUgb3IgZWxlbWVudAogKgogKgogKiBDb21waWxlciByZWxhdGVkIHN0dWZmOgogKgogKiAtICJsaW5rRm4iIC0gbGlua2luZyBmbiBvZiBhIHNpbmdsZSBkaXJlY3RpdmUKICogLSAibm9kZUxpbmtGbiIgLSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBhIHBhcnRpY3VsYXIgbm9kZQogKiAtICJjaGlsZExpbmtGbiIgLSAgZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgY2hpbGQgbm9kZXMgb2YgYSBwYXJ0aWN1bGFyIG5vZGUKICogLSAiY29tcG9zaXRlTGlua0ZuIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgY29tcGlsYXRpb24gcm9vdCAobm9kZUxpc3QpCiAqLwoKCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkY29tcGlsZQogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQ29tcGlsZXMgYW4gSFRNTCBzdHJpbmcgb3IgRE9NIGludG8gYSB0ZW1wbGF0ZSBhbmQgcHJvZHVjZXMgYSB0ZW1wbGF0ZSBmdW5jdGlvbiwgd2hpY2gKICogY2FuIHRoZW4gYmUgdXNlZCB0byBsaW5rIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIGBzY29wZWB9IGFuZCB0aGUgdGVtcGxhdGUgdG9nZXRoZXIuCiAqCiAqIFRoZSBjb21waWxhdGlvbiBpcyBhIHByb2Nlc3Mgb2Ygd2Fsa2luZyB0aGUgRE9NIHRyZWUgYW5kIG1hdGNoaW5nIERPTSBlbGVtZW50cyB0bwogKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30uCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKk5vdGU6KiogVGhpcyBkb2N1bWVudCBpcyBhbiBpbi1kZXB0aCByZWZlcmVuY2Ugb2YgYWxsIGRpcmVjdGl2ZSBvcHRpb25zLgogKiBGb3IgYSBnZW50bGUgaW50cm9kdWN0aW9uIHRvIGRpcmVjdGl2ZXMgd2l0aCBleGFtcGxlcyBvZiBjb21tb24gdXNlIGNhc2VzLAogKiBzZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlIGd1aWRlfS4KICogPC9kaXY+CiAqCiAqICMjIENvbXByZWhlbnNpdmUgRGlyZWN0aXZlIEFQSQogKgogKiBUaGVyZSBhcmUgbWFueSBkaWZmZXJlbnQgb3B0aW9ucyBmb3IgYSBkaXJlY3RpdmUuCiAqCiAqIFRoZSBkaWZmZXJlbmNlIHJlc2lkZXMgaW4gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmFjdG9yeSBmdW5jdGlvbi4KICogWW91IGNhbiBlaXRoZXIgcmV0dXJuIGEgIkRpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdCIgKHNlZSBiZWxvdykgdGhhdCBkZWZpbmVzIHRoZSBkaXJlY3RpdmUgcHJvcGVydGllcywKICogb3IganVzdCB0aGUgYHBvc3RMaW5rYCBmdW5jdGlvbiAoYWxsIG90aGVyIHByb3BlcnRpZXMgd2lsbCBoYXZlIHRoZSBkZWZhdWx0IHZhbHVlcykuCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MiPgogKiAqKkJlc3QgUHJhY3RpY2U6KiogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlICJkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3QiIGZvcm0uCiAqIDwvZGl2PgogKgogKiBIZXJlJ3MgYW4gZXhhbXBsZSBkaXJlY3RpdmUgZGVjbGFyZWQgd2l0aCBhIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdDoKICoKICogYGBganMKICogICB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSguLi4pOwogKgogKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHsKICogICAgIHZhciBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0ID0gewogKiAgICAgICBwcmlvcml0eTogMCwKICogICAgICAgdGVtcGxhdGU6ICc8ZGl2PjwvZGl2PicsIC8vIG9yIC8vIGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsgLi4uIH0sCiAqICAgICAgIC8vIG9yCiAqICAgICAgIC8vIHRlbXBsYXRlVXJsOiAnZGlyZWN0aXZlLmh0bWwnLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LAogKiAgICAgICB0cmFuc2NsdWRlOiBmYWxzZSwKICogICAgICAgcmVzdHJpY3Q6ICdBJywKICogICAgICAgdGVtcGxhdGVOYW1lc3BhY2U6ICdodG1sJywKICogICAgICAgc2NvcGU6IGZhbHNlLAogKiAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICR0cmFuc2NsdWRlLCBvdGhlckluamVjdGFibGVzKSB7IC4uLiB9LAogKiAgICAgICBjb250cm9sbGVyQXM6ICdzdHJpbmdBbGlhcycsCiAqICAgICAgIHJlcXVpcmU6ICdzaWJsaW5nRGlyZWN0aXZlTmFtZScsIC8vIG9yIC8vIFsnXnBhcmVudERpcmVjdGl2ZU5hbWUnLCAnP29wdGlvbmFsRGlyZWN0aXZlTmFtZScsICc/Xm9wdGlvbmFsUGFyZW50J10sCiAqICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkgewogKiAgICAgICAgIHJldHVybiB7CiAqICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIHByZUxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH0sCiAqICAgICAgICAgICBwb3N0OiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfQogKiAgICAgICAgIH0KICogICAgICAgICAvLyBvcgogKiAgICAgICAgIC8vIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayggLi4uICkgeyAuLi4gfQogKiAgICAgICB9LAogKiAgICAgICAvLyBvcgogKiAgICAgICAvLyBsaW5rOiB7CiAqICAgICAgIC8vICBwcmU6IGZ1bmN0aW9uIHByZUxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH0sCiAqICAgICAgIC8vICBwb3N0OiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfQogKiAgICAgICAvLyB9CiAqICAgICAgIC8vIG9yCiAqICAgICAgIC8vIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKCAuLi4gKSB7IC4uLiB9CiAqICAgICB9OwogKiAgICAgcmV0dXJuIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3Q7CiAqICAgfSk7CiAqIGBgYAogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC13YXJuaW5nIj4KICogKipOb3RlOioqIEFueSB1bnNwZWNpZmllZCBvcHRpb25zIHdpbGwgdXNlIHRoZSBkZWZhdWx0IHZhbHVlLiBZb3UgY2FuIHNlZSB0aGUgZGVmYXVsdCB2YWx1ZXMgYmVsb3cuCiAqIDwvZGl2PgogKgogKiBUaGVyZWZvcmUgdGhlIGFib3ZlIGNhbiBiZSBzaW1wbGlmaWVkIGFzOgogKgogKiBgYGBqcwogKiAgIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKC4uLik7CiAqCiAqICAgbXlNb2R1bGUuZGlyZWN0aXZlKCdkaXJlY3RpdmVOYW1lJywgZnVuY3Rpb24gZmFjdG9yeShpbmplY3RhYmxlcykgewogKiAgICAgdmFyIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3QgPSB7CiAqICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzKSB7IC4uLiB9CiAqICAgICB9OwogKiAgICAgcmV0dXJuIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3Q7CiAqICAgICAvLyBvcgogKiAgICAgLy8gcmV0dXJuIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzKSB7IC4uLiB9CiAqICAgfSk7CiAqIGBgYAogKgogKgogKgogKiAjIyMgRGlyZWN0aXZlIERlZmluaXRpb24gT2JqZWN0CiAqCiAqIFRoZSBkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3QgcHJvdmlkZXMgaW5zdHJ1Y3Rpb25zIHRvIHRoZSB7QGxpbmsgbmcuJGNvbXBpbGUKICogY29tcGlsZXJ9LiBUaGUgYXR0cmlidXRlcyBhcmU6CiAqCiAqICMjIyMgYG11bHRpRWxlbWVudGAKICogV2hlbiB0aGlzIHByb3BlcnR5IGlzIHNldCB0byB0cnVlLCB0aGUgSFRNTCBjb21waWxlciB3aWxsIGNvbGxlY3QgRE9NIG5vZGVzIGJldHdlZW4KICogbm9kZXMgd2l0aCB0aGUgYXR0cmlidXRlcyBgZGlyZWN0aXZlLW5hbWUtc3RhcnRgIGFuZCBgZGlyZWN0aXZlLW5hbWUtZW5kYCwgYW5kIGdyb3VwIHRoZW0KICogdG9nZXRoZXIgYXMgdGhlIGRpcmVjdGl2ZSBlbGVtZW50cy4gSXQgaXMgcmVjb21lbmRlZCB0aGF0IHRoaXMgZmVhdHVyZSBiZSB1c2VkIG9uIGRpcmVjdGl2ZXMKICogd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBiZWhhdmlvdXJhbCAoc3VjaCBhcyB7QGxpbmsgbmdDbGlja30pLCBhbmQgd2hpY2gKICogZG8gbm90IG1hbmlwdWxhdGUgb3IgcmVwbGFjZSBjaGlsZCBub2RlcyAoc3VjaCBhcyB7QGxpbmsgbmdJbmNsdWRlfSkuCiAqCiAqICMjIyMgYHByaW9yaXR5YAogKiBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBkaXJlY3RpdmVzIGRlZmluZWQgb24gYSBzaW5nbGUgRE9NIGVsZW1lbnQsIHNvbWV0aW1lcyBpdAogKiBpcyBuZWNlc3NhcnkgdG8gc3BlY2lmeSB0aGUgb3JkZXIgaW4gd2hpY2ggdGhlIGRpcmVjdGl2ZXMgYXJlIGFwcGxpZWQuIFRoZSBgcHJpb3JpdHlgIGlzIHVzZWQKICogdG8gc29ydCB0aGUgZGlyZWN0aXZlcyBiZWZvcmUgdGhlaXIgYGNvbXBpbGVgIGZ1bmN0aW9ucyBnZXQgY2FsbGVkLiBQcmlvcml0eSBpcyBkZWZpbmVkIGFzIGEKICogbnVtYmVyLiBEaXJlY3RpdmVzIHdpdGggZ3JlYXRlciBudW1lcmljYWwgYHByaW9yaXR5YCBhcmUgY29tcGlsZWQgZmlyc3QuIFByZS1saW5rIGZ1bmN0aW9ucwogKiBhcmUgYWxzbyBydW4gaW4gcHJpb3JpdHkgb3JkZXIsIGJ1dCBwb3N0LWxpbmsgZnVuY3Rpb25zIGFyZSBydW4gaW4gcmV2ZXJzZSBvcmRlci4gVGhlIG9yZGVyCiAqIG9mIGRpcmVjdGl2ZXMgd2l0aCB0aGUgc2FtZSBwcmlvcml0eSBpcyB1bmRlZmluZWQuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIGAwYC4KICoKICogIyMjIyBgdGVybWluYWxgCiAqIElmIHNldCB0byB0cnVlIHRoZW4gdGhlIGN1cnJlbnQgYHByaW9yaXR5YCB3aWxsIGJlIHRoZSBsYXN0IHNldCBvZiBkaXJlY3RpdmVzCiAqIHdoaWNoIHdpbGwgZXhlY3V0ZSAoYW55IGRpcmVjdGl2ZXMgYXQgdGhlIGN1cnJlbnQgcHJpb3JpdHkgd2lsbCBzdGlsbCBleGVjdXRlCiAqIGFzIHRoZSBvcmRlciBvZiBleGVjdXRpb24gb24gc2FtZSBgcHJpb3JpdHlgIGlzIHVuZGVmaW5lZCkuIE5vdGUgdGhhdCBleHByZXNzaW9ucwogKiBhbmQgb3RoZXIgZGlyZWN0aXZlcyB1c2VkIGluIHRoZSBkaXJlY3RpdmUncyB0ZW1wbGF0ZSB3aWxsIGFsc28gYmUgZXhjbHVkZWQgZnJvbSBleGVjdXRpb24uCiAqCiAqICMjIyMgYHNjb3BlYAogKiAqKklmIHNldCB0byBgdHJ1ZWAsKiogdGhlbiBhIG5ldyBzY29wZSB3aWxsIGJlIGNyZWF0ZWQgZm9yIHRoaXMgZGlyZWN0aXZlLiBJZiBtdWx0aXBsZSBkaXJlY3RpdmVzIG9uIHRoZQogKiBzYW1lIGVsZW1lbnQgcmVxdWVzdCBhIG5ldyBzY29wZSwgb25seSBvbmUgbmV3IHNjb3BlIGlzIGNyZWF0ZWQuIFRoZSBuZXcgc2NvcGUgcnVsZSBkb2VzIG5vdAogKiBhcHBseSBmb3IgdGhlIHJvb3Qgb2YgdGhlIHRlbXBsYXRlIHNpbmNlIHRoZSByb290IG9mIHRoZSB0ZW1wbGF0ZSBhbHdheXMgZ2V0cyBhIG5ldyBzY29wZS4KICoKICogKipJZiBzZXQgdG8gYHt9YCAob2JqZWN0IGhhc2gpLCoqIHRoZW4gYSBuZXcgImlzb2xhdGUiIHNjb3BlIGlzIGNyZWF0ZWQuIFRoZSAnaXNvbGF0ZScgc2NvcGUgZGlmZmVycyBmcm9tCiAqIG5vcm1hbCBzY29wZSBpbiB0aGF0IGl0IGRvZXMgbm90IHByb3RvdHlwaWNhbGx5IGluaGVyaXQgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBUaGlzIGlzIHVzZWZ1bAogKiB3aGVuIGNyZWF0aW5nIHJldXNhYmxlIGNvbXBvbmVudHMsIHdoaWNoIHNob3VsZCBub3QgYWNjaWRlbnRhbGx5IHJlYWQgb3IgbW9kaWZ5IGRhdGEgaW4gdGhlCiAqIHBhcmVudCBzY29wZS4KICoKICogVGhlICdpc29sYXRlJyBzY29wZSB0YWtlcyBhbiBvYmplY3QgaGFzaCB3aGljaCBkZWZpbmVzIGEgc2V0IG9mIGxvY2FsIHNjb3BlIHByb3BlcnRpZXMKICogZGVyaXZlZCBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuIFRoZXNlIGxvY2FsIHByb3BlcnRpZXMgYXJlIHVzZWZ1bCBmb3IgYWxpYXNpbmcgdmFsdWVzIGZvcgogKiB0ZW1wbGF0ZXMuIExvY2FscyBkZWZpbml0aW9uIGlzIGEgaGFzaCBvZiBsb2NhbCBzY29wZSBwcm9wZXJ0eSB0byBpdHMgc291cmNlOgogKgogKiAqIGBAYCBvciBgQGF0dHJgIC0gYmluZCBhIGxvY2FsIHNjb3BlIHByb3BlcnR5IHRvIHRoZSB2YWx1ZSBvZiBET00gYXR0cmlidXRlLiBUaGUgcmVzdWx0IGlzCiAqICAgYWx3YXlzIGEgc3RyaW5nIHNpbmNlIERPTSBhdHRyaWJ1dGVzIGFyZSBzdHJpbmdzLiBJZiBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgIHRoZW4gdGhlCiAqICAgYXR0cmlidXRlIG5hbWUgaXMgYXNzdW1lZCB0byBiZSB0aGUgc2FtZSBhcyB0aGUgbG9jYWwgbmFtZS4KICogICBHaXZlbiBgPHdpZGdldCBteS1hdHRyPSJoZWxsbyB7e25hbWV9fSI+YCBhbmQgd2lkZ2V0IGRlZmluaXRpb24KICogICBvZiBgc2NvcGU6IHsgbG9jYWxOYW1lOidAbXlBdHRyJyB9YCwgdGhlbiB3aWRnZXQgc2NvcGUgcHJvcGVydHkgYGxvY2FsTmFtZWAgd2lsbCByZWZsZWN0CiAqICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiBgaGVsbG8ge3tuYW1lfX1gLiBBcyB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBjaGFuZ2VzIHNvIHdpbGwgdGhlCiAqICAgYGxvY2FsTmFtZWAgcHJvcGVydHkgb24gdGhlIHdpZGdldCBzY29wZS4gVGhlIGBuYW1lYCBpcyByZWFkIGZyb20gdGhlIHBhcmVudCBzY29wZSAobm90CiAqICAgY29tcG9uZW50IHNjb3BlKS4KICoKICogKiBgPWAgb3IgYD1hdHRyYCAtIHNldCB1cCBiaS1kaXJlY3Rpb25hbCBiaW5kaW5nIGJldHdlZW4gYSBsb2NhbCBzY29wZSBwcm9wZXJ0eSBhbmQgdGhlCiAqICAgcGFyZW50IHNjb3BlIHByb3BlcnR5IG9mIG5hbWUgZGVmaW5lZCB2aWEgdGhlIHZhbHVlIG9mIHRoZSBgYXR0cmAgYXR0cmlidXRlLiBJZiBubyBgYXR0cmAKICogICBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLgogKiAgIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9InBhcmVudE1vZGVsIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZgogKiAgIGBzY29wZTogeyBsb2NhbE1vZGVsOic9bXlBdHRyJyB9YCwgdGhlbiB3aWRnZXQgc2NvcGUgcHJvcGVydHkgYGxvY2FsTW9kZWxgIHdpbGwgcmVmbGVjdCB0aGUKICogICB2YWx1ZSBvZiBgcGFyZW50TW9kZWxgIG9uIHRoZSBwYXJlbnQgc2NvcGUuIEFueSBjaGFuZ2VzIHRvIGBwYXJlbnRNb2RlbGAgd2lsbCBiZSByZWZsZWN0ZWQKICogICBpbiBgbG9jYWxNb2RlbGAgYW5kIGFueSBjaGFuZ2VzIGluIGBsb2NhbE1vZGVsYCB3aWxsIHJlZmxlY3QgaW4gYHBhcmVudE1vZGVsYC4gSWYgdGhlIHBhcmVudAogKiAgIHNjb3BlIHByb3BlcnR5IGRvZXNuJ3QgZXhpc3QsIGl0IHdpbGwgdGhyb3cgYSBOT05fQVNTSUdOQUJMRV9NT0RFTF9FWFBSRVNTSU9OIGV4Y2VwdGlvbi4gWW91CiAqICAgY2FuIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNpbmcgYD0/YCBvciBgPT9hdHRyYCBpbiBvcmRlciB0byBmbGFnIHRoZSBwcm9wZXJ0eSBhcyBvcHRpb25hbC4KICoKICogKiBgJmAgb3IgYCZhdHRyYCAtIHByb3ZpZGVzIGEgd2F5IHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiB0aGUgY29udGV4dCBvZiB0aGUgcGFyZW50IHNjb3BlLgogKiAgIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZQogKiAgIGxvY2FsIG5hbWUuIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9ImNvdW50ID0gY291bnQgKyB2YWx1ZSI+YCBhbmQgd2lkZ2V0IGRlZmluaXRpb24gb2YKICogICBgc2NvcGU6IHsgbG9jYWxGbjonJm15QXR0cicgfWAsIHRoZW4gaXNvbGF0ZSBzY29wZSBwcm9wZXJ0eSBgbG9jYWxGbmAgd2lsbCBwb2ludCB0bwogKiAgIGEgZnVuY3Rpb24gd3JhcHBlciBmb3IgdGhlIGBjb3VudCA9IGNvdW50ICsgdmFsdWVgIGV4cHJlc3Npb24uIE9mdGVuIGl0J3MgZGVzaXJhYmxlIHRvCiAqICAgcGFzcyBkYXRhIGZyb20gdGhlIGlzb2xhdGVkIHNjb3BlIHZpYSBhbiBleHByZXNzaW9uIHRvIHRoZSBwYXJlbnQgc2NvcGUsIHRoaXMgY2FuIGJlCiAqICAgZG9uZSBieSBwYXNzaW5nIGEgbWFwIG9mIGxvY2FsIHZhcmlhYmxlIG5hbWVzIGFuZCB2YWx1ZXMgaW50byB0aGUgZXhwcmVzc2lvbiB3cmFwcGVyIGZuLgogKiAgIEZvciBleGFtcGxlLCBpZiB0aGUgZXhwcmVzc2lvbiBpcyBgaW5jcmVtZW50KGFtb3VudClgIHRoZW4gd2UgY2FuIHNwZWNpZnkgdGhlIGFtb3VudCB2YWx1ZQogKiAgIGJ5IGNhbGxpbmcgdGhlIGBsb2NhbEZuYCBhcyBgbG9jYWxGbih7YW1vdW50OiAyMn0pYC4KICoKICoKICogIyMjIyBgYmluZFRvQ29udHJvbGxlcmAKICogV2hlbiBhbiBpc29sYXRlIHNjb3BlIGlzIHVzZWQgZm9yIGEgY29tcG9uZW50IChzZWUgYWJvdmUpLCBhbmQgYGNvbnRyb2xsZXJBc2AgaXMgdXNlZCwgYGJpbmRUb0NvbnRyb2xsZXJgIHdpbGwKICogYWxsb3cgYSBjb21wb25lbnQgdG8gaGF2ZSBpdHMgcHJvcGVydGllcyBib3VuZCB0byB0aGUgY29udHJvbGxlciwgcmF0aGVyIHRoYW4gdG8gc2NvcGUuIFdoZW4gdGhlIGNvbnRyb2xsZXIKICogaXMgaW5zdGFudGlhdGVkLCB0aGUgaW5pdGlhbCB2YWx1ZXMgb2YgdGhlIGlzb2xhdGUgc2NvcGUgYmluZGluZ3MgYXJlIGFscmVhZHkgYXZhaWxhYmxlLgogKgogKiAjIyMjIGBjb250cm9sbGVyYAogKiBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBUaGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQgYmVmb3JlIHRoZQogKiBwcmUtbGlua2luZyBwaGFzZSBhbmQgaXQgaXMgc2hhcmVkIHdpdGggb3RoZXIgZGlyZWN0aXZlcyAoc2VlCiAqIGByZXF1aXJlYCBhdHRyaWJ1dGUpLiBUaGlzIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byBjb21tdW5pY2F0ZSB3aXRoIGVhY2ggb3RoZXIgYW5kIGF1Z21lbnQKICogZWFjaCBvdGhlcidzIGJlaGF2aW9yLiBUaGUgY29udHJvbGxlciBpcyBpbmplY3RhYmxlIChhbmQgc3VwcG9ydHMgYnJhY2tldCBub3RhdGlvbikgd2l0aCB0aGUgZm9sbG93aW5nIGxvY2FsczoKICoKICogKiBgJHNjb3BlYCAtIEN1cnJlbnQgc2NvcGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50CiAqICogYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudAogKiAqIGAkYXR0cnNgIC0gQ3VycmVudCBhdHRyaWJ1dGVzIG9iamVjdCBmb3IgdGhlIGVsZW1lbnQKICogKiBgJHRyYW5zY2x1ZGVgIC0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb24gcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZToKICogICBgZnVuY3Rpb24oW3Njb3BlXSwgY2xvbmVMaW5raW5nRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpYC4KICogICAgKiBgc2NvcGVgOiBvcHRpb25hbCBhcmd1bWVudCB0byBvdmVycmlkZSB0aGUgc2NvcGUuCiAqICAgICogYGNsb25lTGlua2luZ0ZuYDogb3B0aW9uYWwgYXJndW1lbnQgdG8gY3JlYXRlIGNsb25lcyBvZiB0aGUgb3JpZ2luYWwgdHJhbnNjbHVkZWQgY29udGVudC4KICogICAgKiBgZnV0dXJlUGFyZW50RWxlbWVudGA6CiAqICAgICAgICAqIGRlZmluZXMgdGhlIHBhcmVudCB0byB3aGljaCB0aGUgYGNsb25lTGlua2luZ0ZuYCB3aWxsIGFkZCB0aGUgY2xvbmVkIGVsZW1lbnRzLgogKiAgICAgICAgKiBkZWZhdWx0OiBgJGVsZW1lbnQucGFyZW50KClgIHJlc3AuIGAkZWxlbWVudGAgZm9yIGB0cmFuc2NsdWRlOidlbGVtZW50J2AgcmVzcC4gYHRyYW5zY2x1ZGU6dHJ1ZWAuCiAqICAgICAgICAqIG9ubHkgbmVlZGVkIGZvciB0cmFuc2NsdWRlcyB0aGF0IGFyZSBhbGxvd2VkIHRvIGNvbnRhaW4gbm9uIGh0bWwgZWxlbWVudHMgKGUuZy4gU1ZHIGVsZW1lbnRzKQogKiAgICAgICAgICBhbmQgd2hlbiB0aGUgYGNsb25lTGlua2luRm5gIGlzIHBhc3NlZCwKICogICAgICAgICAgYXMgdGhvc2UgZWxlbWVudHMgbmVlZCB0byBjcmVhdGVkIGFuZCBjbG9uZWQgaW4gYSBzcGVjaWFsIHdheSB3aGVuIHRoZXkgYXJlIGRlZmluZWQgb3V0c2lkZSB0aGVpcgogKiAgICAgICAgICB1c3VhbCBjb250YWluZXJzIChlLmcuIGxpa2UgYDxzdmc+YCkuCiAqICAgICAgICAqIFNlZSBhbHNvIHRoZSBgZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlYCBwcm9wZXJ0eS4KICoKICoKICogIyMjIyBgcmVxdWlyZWAKICogUmVxdWlyZSBhbm90aGVyIGRpcmVjdGl2ZSBhbmQgaW5qZWN0IGl0cyBjb250cm9sbGVyIGFzIHRoZSBmb3VydGggYXJndW1lbnQgdG8gdGhlIGxpbmtpbmcgZnVuY3Rpb24uIFRoZQogKiBgcmVxdWlyZWAgdGFrZXMgYSBzdHJpbmcgbmFtZSAob3IgYXJyYXkgb2Ygc3RyaW5ncykgb2YgdGhlIGRpcmVjdGl2ZShzKSB0byBwYXNzIGluLiBJZiBhbiBhcnJheSBpcyB1c2VkLCB0aGUKICogaW5qZWN0ZWQgYXJndW1lbnQgd2lsbCBiZSBhbiBhcnJheSBpbiBjb3JyZXNwb25kaW5nIG9yZGVyLiBJZiBubyBzdWNoIGRpcmVjdGl2ZSBjYW4gYmUKICogZm91bmQsIG9yIGlmIHRoZSBkaXJlY3RpdmUgZG9lcyBub3QgaGF2ZSBhIGNvbnRyb2xsZXIsIHRoZW4gYW4gZXJyb3IgaXMgcmFpc2VkLiBUaGUgbmFtZSBjYW4gYmUgcHJlZml4ZWQgd2l0aDoKICoKICogKiAobm8gcHJlZml4KSAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBvbiB0aGUgY3VycmVudCBlbGVtZW50LiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuCiAqICogYD9gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb3IgcGFzcyBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuCiAqICogYF5gIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCBhbmQgaXRzIHBhcmVudHMuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC4KICogKiBgXl5gIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCdzIHBhcmVudHMuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC4KICogKiBgP15gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cyBvciBwYXNzCiAqICAgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLgogKiAqIGA/Xl5gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50J3MgcGFyZW50cywgb3IgcGFzcwogKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC4KICoKICoKICogIyMjIyBgY29udHJvbGxlckFzYAogKiBDb250cm9sbGVyIGFsaWFzIGF0IHRoZSBkaXJlY3RpdmUgc2NvcGUuIEFuIGFsaWFzIGZvciB0aGUgY29udHJvbGxlciBzbyBpdAogKiBjYW4gYmUgcmVmZXJlbmNlZCBhdCB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlLiBUaGUgZGlyZWN0aXZlIG5lZWRzIHRvIGRlZmluZSBhIHNjb3BlIGZvciB0aGlzCiAqIGNvbmZpZ3VyYXRpb24gdG8gYmUgdXNlZC4gVXNlZnVsIGluIHRoZSBjYXNlIHdoZW4gZGlyZWN0aXZlIGlzIHVzZWQgYXMgY29tcG9uZW50LgogKgogKgogKiAjIyMjIGByZXN0cmljdGAKICogU3RyaW5nIG9mIHN1YnNldCBvZiBgRUFDTWAgd2hpY2ggcmVzdHJpY3RzIHRoZSBkaXJlY3RpdmUgdG8gYSBzcGVjaWZpYyBkaXJlY3RpdmUKICogZGVjbGFyYXRpb24gc3R5bGUuIElmIG9taXR0ZWQsIHRoZSBkZWZhdWx0cyAoZWxlbWVudHMgYW5kIGF0dHJpYnV0ZXMpIGFyZSB1c2VkLgogKgogKiAqIGBFYCAtIEVsZW1lbnQgbmFtZSAoZGVmYXVsdCk6IGA8bXktZGlyZWN0aXZlPjwvbXktZGlyZWN0aXZlPmAKICogKiBgQWAgLSBBdHRyaWJ1dGUgKGRlZmF1bHQpOiBgPGRpdiBteS1kaXJlY3RpdmU9ImV4cCI+PC9kaXY+YAogKiAqIGBDYCAtIENsYXNzOiBgPGRpdiBjbGFzcz0ibXktZGlyZWN0aXZlOiBleHA7Ij48L2Rpdj5gCiAqICogYE1gIC0gQ29tbWVudDogYDwhLS0gZGlyZWN0aXZlOiBteS1kaXJlY3RpdmUgZXhwIC0tPmAKICoKICoKICogIyMjIyBgdGVtcGxhdGVOYW1lc3BhY2VgCiAqIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRvY3VtZW50IHR5cGUgdXNlZCBieSB0aGUgbWFya3VwIGluIHRoZSB0ZW1wbGF0ZS4KICogQW5ndWxhckpTIG5lZWRzIHRoaXMgaW5mb3JtYXRpb24gYXMgdGhvc2UgZWxlbWVudHMgbmVlZCB0byBiZSBjcmVhdGVkIGFuZCBjbG9uZWQKICogaW4gYSBzcGVjaWFsIHdheSB3aGVuIHRoZXkgYXJlIGRlZmluZWQgb3V0c2lkZSB0aGVpciB1c3VhbCBjb250YWluZXJzIGxpa2UgYDxzdmc+YCBhbmQgYDxtYXRoPmAuCiAqCiAqICogYGh0bWxgIC0gQWxsIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBIVE1MLiBSb290IG5vZGVzIG1heSBhbHNvIGJlCiAqICAgdG9wLWxldmVsIGVsZW1lbnRzIHN1Y2ggYXMgYDxzdmc+YCBvciBgPG1hdGg+YC4KICogKiBgc3ZnYCAtIFRoZSByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgU1ZHIGVsZW1lbnRzIChleGNsdWRpbmcgYDxtYXRoPmApLgogKiAqIGBtYXRoYCAtIFRoZSByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgTWF0aE1MIGVsZW1lbnRzIChleGNsdWRpbmcgYDxzdmc+YCkuCiAqCiAqIElmIG5vIGB0ZW1wbGF0ZU5hbWVzcGFjZWAgaXMgc3BlY2lmaWVkLCB0aGVuIHRoZSBuYW1lc3BhY2UgaXMgY29uc2lkZXJlZCB0byBiZSBgaHRtbGAuCiAqCiAqICMjIyMgYHRlbXBsYXRlYAogKiBIVE1MIG1hcmt1cCB0aGF0IG1heToKICogKiBSZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCAoZGVmYXVsdCkuCiAqICogUmVwbGFjZSB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCBpdHNlbGYgKGlmIGByZXBsYWNlYCBpcyB0cnVlIC0gREVQUkVDQVRFRCkuCiAqICogV3JhcCB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGlmIGB0cmFuc2NsdWRlYCBpcyB0cnVlKS4KICoKICogVmFsdWUgbWF5IGJlOgogKgogKiAqIEEgc3RyaW5nLiBGb3IgZXhhbXBsZSBgPGRpdiByZWQtb24taG92ZXI+e3tkZWxldGVfc3RyfX08L2Rpdj5gLgogKiAqIEEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdHdvIGFyZ3VtZW50cyBgdEVsZW1lbnRgIGFuZCBgdEF0dHJzYCAoZGVzY3JpYmVkIGluIHRoZSBgY29tcGlsZWAKICogICBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlLgogKgogKgogKiAjIyMjIGB0ZW1wbGF0ZVVybGAKICogVGhpcyBpcyBzaW1pbGFyIHRvIGB0ZW1wbGF0ZWAgYnV0IHRoZSB0ZW1wbGF0ZSBpcyBsb2FkZWQgZnJvbSB0aGUgc3BlY2lmaWVkIFVSTCwgYXN5bmNocm9ub3VzbHkuCiAqCiAqIEJlY2F1c2UgdGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgdGhlIGNvbXBpbGVyIHdpbGwgc3VzcGVuZCBjb21waWxhdGlvbiBvZiBkaXJlY3RpdmVzIG9uIHRoYXQgZWxlbWVudAogKiBmb3IgbGF0ZXIgd2hlbiB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gcmVzb2x2ZWQuICBJbiB0aGUgbWVhbnRpbWUgaXQgd2lsbCBjb250aW51ZSB0byBjb21waWxlIGFuZCBsaW5rCiAqIHNpYmxpbmcgYW5kIHBhcmVudCBlbGVtZW50cyBhcyB0aG91Z2ggdGhpcyBlbGVtZW50IGhhZCBub3QgY29udGFpbmVkIGFueSBkaXJlY3RpdmVzLgogKgogKiBUaGUgY29tcGlsZXIgZG9lcyBub3Qgc3VzcGVuZCB0aGUgZW50aXJlIGNvbXBpbGF0aW9uIHRvIHdhaXQgZm9yIHRlbXBsYXRlcyB0byBiZSBsb2FkZWQgYmVjYXVzZSB0aGlzCiAqIHdvdWxkIHJlc3VsdCBpbiB0aGUgd2hvbGUgYXBwICJzdGFsbGluZyIgdW50aWwgYWxsIHRlbXBsYXRlcyBhcmUgbG9hZGVkIGFzeW5jaHJvbm91c2x5IC0gZXZlbiBpbiB0aGUKICogY2FzZSB3aGVuIG9ubHkgb25lIGRlZXBseSBuZXN0ZWQgZGlyZWN0aXZlIGhhcyBgdGVtcGxhdGVVcmxgLgogKgogKiBUZW1wbGF0ZSBsb2FkaW5nIGlzIGFzeW5jaHJvbm91cyBldmVuIGlmIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiBwcmVsb2FkZWQgaW50byB0aGUge0BsaW5rICR0ZW1wbGF0ZUNhY2hlfQogKgogKiBZb3UgY2FuIHNwZWNpZnkgYHRlbXBsYXRlVXJsYCBhcyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIFVSTCBvciBhcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3bwogKiBhcmd1bWVudHMgYHRFbGVtZW50YCBhbmQgYHRBdHRyc2AgKGRlc2NyaWJlZCBpbiB0aGUgYGNvbXBpbGVgIGZ1bmN0aW9uIGFwaSBiZWxvdykgYW5kIHJldHVybnMKICogYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSB1cmwuICBJbiBlaXRoZXIgY2FzZSwgdGhlIHRlbXBsYXRlIFVSTCBpcyBwYXNzZWQgdGhyb3VnaCB7QGxpbmsKICogJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmwgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9LgogKgogKgogKiAjIyMjIGByZXBsYWNlYCAoWypERVBSRUNBVEVEKiFdLCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciByZWxlYXNlIC0gaS5lLiB2Mi4wKQogKiBzcGVjaWZ5IHdoYXQgdGhlIHRlbXBsYXRlIHNob3VsZCByZXBsYWNlLiBEZWZhdWx0cyB0byBgZmFsc2VgLgogKgogKiAqIGB0cnVlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuCiAqICogYGZhbHNlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LgogKgogKiBUaGUgcmVwbGFjZW1lbnQgcHJvY2VzcyBtaWdyYXRlcyBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgLyBjbGFzc2VzIGZyb20gdGhlIG9sZCBlbGVtZW50IHRvIHRoZSBuZXcKICogb25lLiBTZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUjdGVtcGxhdGUtZXhwYW5kaW5nLWRpcmVjdGl2ZQogKiBEaXJlY3RpdmVzIEd1aWRlfSBmb3IgYW4gZXhhbXBsZS4KICoKICogVGhlcmUgYXJlIHZlcnkgZmV3IHNjZW5hcmlvcyB3aGVyZSBlbGVtZW50IHJlcGxhY2VtZW50IGlzIHJlcXVpcmVkIGZvciB0aGUgYXBwbGljYXRpb24gZnVuY3Rpb24sCiAqIHRoZSBtYWluIG9uZSBiZWluZyByZXVzYWJsZSBjdXN0b20gY29tcG9uZW50cyB0aGF0IGFyZSB1c2VkIHdpdGhpbiBTVkcgY29udGV4dHMKICogKGJlY2F1c2UgU1ZHIGRvZXNuJ3Qgd29yayB3aXRoIGN1c3RvbSBlbGVtZW50cyBpbiB0aGUgRE9NIHRyZWUpLgogKgogKiAjIyMjIGB0cmFuc2NsdWRlYAogKiBFeHRyYWN0IHRoZSBjb250ZW50cyBvZiB0aGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGFwcGVhcnMgYW5kIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBkaXJlY3RpdmUuCiAqIFRoZSBjb250ZW50cyBhcmUgY29tcGlsZWQgYW5kIHByb3ZpZGVkIHRvIHRoZSBkaXJlY3RpdmUgYXMgYSAqKnRyYW5zY2x1c2lvbiBmdW5jdGlvbioqLiBTZWUgdGhlCiAqIHtAbGluayAkY29tcGlsZSN0cmFuc2NsdXNpb24gVHJhbnNjbHVzaW9ufSBzZWN0aW9uIGJlbG93LgogKgogKiBUaGVyZSBhcmUgdHdvIGtpbmRzIG9mIHRyYW5zY2x1c2lvbiBkZXBlbmRpbmcgdXBvbiB3aGV0aGVyIHlvdSB3YW50IHRvIHRyYW5zY2x1ZGUganVzdCB0aGUgY29udGVudHMgb2YgdGhlCiAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQgb3IgdGhlIGVudGlyZSBlbGVtZW50OgogKgogKiAqIGB0cnVlYCAtIHRyYW5zY2x1ZGUgdGhlIGNvbnRlbnQgKGkuZS4gdGhlIGNoaWxkIG5vZGVzKSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC4KICogKiBgJ2VsZW1lbnQnYCAtIHRyYW5zY2x1ZGUgdGhlIHdob2xlIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGluY2x1ZGluZyBhbnkgZGlyZWN0aXZlcyBvbiB0aGlzCiAqICAgZWxlbWVudCB0aGF0IGRlZmluZWQgYXQgYSBsb3dlciBwcmlvcml0eSB0aGFuIHRoaXMgZGlyZWN0aXZlLiBXaGVuIHVzZWQsIHRoZSBgdGVtcGxhdGVgCiAqICAgcHJvcGVydHkgaXMgaWdub3JlZC4KICoKICoKICogIyMjIyBgY29tcGlsZWAKICoKICogYGBganMKICogICBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHsgLi4uIH0KICogYGBgCiAqCiAqIFRoZSBjb21waWxlIGZ1bmN0aW9uIGRlYWxzIHdpdGggdHJhbnNmb3JtaW5nIHRoZSB0ZW1wbGF0ZSBET00uIFNpbmNlIG1vc3QgZGlyZWN0aXZlcyBkbyBub3QgZG8KICogdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24sIGl0IGlzIG5vdCB1c2VkIG9mdGVuLiBUaGUgY29tcGlsZSBmdW5jdGlvbiB0YWtlcyB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czoKICoKICogICAqIGB0RWxlbWVudGAgLSB0ZW1wbGF0ZSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBoYXMgYmVlbiBkZWNsYXJlZC4gSXQgaXMKICogICAgIHNhZmUgdG8gZG8gdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24gb24gdGhlIGVsZW1lbnQgYW5kIGNoaWxkIGVsZW1lbnRzIG9ubHkuCiAqCiAqICAgKiBgdEF0dHJzYCAtIHRlbXBsYXRlIGF0dHJpYnV0ZXMgLSBOb3JtYWxpemVkIGxpc3Qgb2YgYXR0cmlidXRlcyBkZWNsYXJlZCBvbiB0aGlzIGVsZW1lbnQgc2hhcmVkCiAqICAgICBiZXR3ZWVuIGFsbCBkaXJlY3RpdmUgY29tcGlsZSBmdW5jdGlvbnMuCiAqCiAqICAgKiBgdHJhbnNjbHVkZWAgLSAgWypERVBSRUNBVEVEKiFdIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uOiBgZnVuY3Rpb24oc2NvcGUsIGNsb25lTGlua2luZ0ZuKWAKICoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAqICoqTm90ZToqKiBUaGUgdGVtcGxhdGUgaW5zdGFuY2UgYW5kIHRoZSBsaW5rIGluc3RhbmNlIG1heSBiZSBkaWZmZXJlbnQgb2JqZWN0cyBpZiB0aGUgdGVtcGxhdGUgaGFzCiAqIGJlZW4gY2xvbmVkLiBGb3IgdGhpcyByZWFzb24gaXQgaXMgKipub3QqKiBzYWZlIHRvIGRvIGFueXRoaW5nIG90aGVyIHRoYW4gRE9NIHRyYW5zZm9ybWF0aW9ucyB0aGF0CiAqIGFwcGx5IHRvIGFsbCBjbG9uZWQgRE9NIG5vZGVzIHdpdGhpbiB0aGUgY29tcGlsZSBmdW5jdGlvbi4gU3BlY2lmaWNhbGx5LCBET00gbGlzdGVuZXIgcmVnaXN0cmF0aW9uCiAqIHNob3VsZCBiZSBkb25lIGluIGEgbGlua2luZyBmdW5jdGlvbiByYXRoZXIgdGhhbiBpbiBhIGNvbXBpbGUgZnVuY3Rpb24uCiAqIDwvZGl2PgoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAqICoqTm90ZToqKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBjYW5ub3QgaGFuZGxlIGRpcmVjdGl2ZXMgdGhhdCByZWN1cnNpdmVseSB1c2UgdGhlbXNlbHZlcyBpbiB0aGVpcgogKiBvd24gdGVtcGxhdGVzIG9yIGNvbXBpbGUgZnVuY3Rpb25zLiBDb21waWxpbmcgdGhlc2UgZGlyZWN0aXZlcyByZXN1bHRzIGluIGFuIGluZmluaXRlIGxvb3AgYW5kIGEKICogc3RhY2sgb3ZlcmZsb3cgZXJyb3JzLgogKgogKiBUaGlzIGNhbiBiZSBhdm9pZGVkIGJ5IG1hbnVhbGx5IHVzaW5nICRjb21waWxlIGluIHRoZSBwb3N0TGluayBmdW5jdGlvbiB0byBpbXBlcmF0aXZlbHkgY29tcGlsZQogKiBhIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIGluc3RlYWQgb2YgcmVseWluZyBvbiBhdXRvbWF0aWMgdGVtcGxhdGUgY29tcGlsYXRpb24gdmlhIGB0ZW1wbGF0ZWAgb3IKICogYHRlbXBsYXRlVXJsYCBkZWNsYXJhdGlvbiBvciBtYW51YWwgY29tcGlsYXRpb24gaW5zaWRlIHRoZSBjb21waWxlIGZ1bmN0aW9uLgogKiA8L2Rpdj4KICoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZXJyb3IiPgogKiAqKk5vdGU6KiogVGhlIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0aGF0IGlzIHBhc3NlZCB0byB0aGUgY29tcGlsZSBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLCBhcyBpdAogKiAgIGUuZy4gZG9lcyBub3Qga25vdyBhYm91dCB0aGUgcmlnaHQgb3V0ZXIgc2NvcGUuIFBsZWFzZSB1c2UgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWQKICogICB0byB0aGUgbGluayBmdW5jdGlvbiBpbnN0ZWFkLgogKiA8L2Rpdj4KCiAqIEEgY29tcGlsZSBmdW5jdGlvbiBjYW4gaGF2ZSBhIHJldHVybiB2YWx1ZSB3aGljaCBjYW4gYmUgZWl0aGVyIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0LgogKgogKiAqIHJldHVybmluZyBhIChwb3N0LWxpbmspIGZ1bmN0aW9uIC0gaXMgZXF1aXZhbGVudCB0byByZWdpc3RlcmluZyB0aGUgbGlua2luZyBmdW5jdGlvbiB2aWEgdGhlCiAqICAgYGxpbmtgIHByb3BlcnR5IG9mIHRoZSBjb25maWcgb2JqZWN0IHdoZW4gdGhlIGNvbXBpbGUgZnVuY3Rpb24gaXMgZW1wdHkuCiAqCiAqICogcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGZ1bmN0aW9uKHMpIHJlZ2lzdGVyZWQgdmlhIGBwcmVgIGFuZCBgcG9zdGAgcHJvcGVydGllcyAtIGFsbG93cyB5b3UgdG8KICogICBjb250cm9sIHdoZW4gYSBsaW5raW5nIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlLiBTZWUgaW5mbyBhYm91dAogKiAgIHByZS1saW5raW5nIGFuZCBwb3N0LWxpbmtpbmcgZnVuY3Rpb25zIGJlbG93LgogKgogKgogKiAjIyMjIGBsaW5rYAogKiBUaGlzIHByb3BlcnR5IGlzIHVzZWQgb25seSBpZiB0aGUgYGNvbXBpbGVgIHByb3BlcnR5IGlzIG5vdCBkZWZpbmVkLgogKgogKiBgYGBqcwogKiAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIsIHRyYW5zY2x1ZGVGbikgeyAuLi4gfQogKiBgYGAKICoKICogVGhlIGxpbmsgZnVuY3Rpb24gaXMgcmVzcG9uc2libGUgZm9yIHJlZ2lzdGVyaW5nIERPTSBsaXN0ZW5lcnMgYXMgd2VsbCBhcyB1cGRhdGluZyB0aGUgRE9NLiBJdCBpcwogKiBleGVjdXRlZCBhZnRlciB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gY2xvbmVkLiBUaGlzIGlzIHdoZXJlIG1vc3Qgb2YgdGhlIGRpcmVjdGl2ZSBsb2dpYyB3aWxsIGJlCiAqIHB1dC4KICoKICogICAqIGBzY29wZWAgLSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gLSBUaGUgc2NvcGUgdG8gYmUgdXNlZCBieSB0aGUKICogICAgIGRpcmVjdGl2ZSBmb3IgcmVnaXN0ZXJpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXN9LgogKgogKiAgICogYGlFbGVtZW50YCAtIGluc3RhbmNlIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGlzIHRvIGJlIHVzZWQuIEl0IGlzIHNhZmUgdG8KICogICAgIG1hbmlwdWxhdGUgdGhlIGNoaWxkcmVuIG9mIHRoZSBlbGVtZW50IG9ubHkgaW4gYHBvc3RMaW5rYCBmdW5jdGlvbiBzaW5jZSB0aGUgY2hpbGRyZW4gaGF2ZQogKiAgICAgYWxyZWFkeSBiZWVuIGxpbmtlZC4KICoKICogICAqIGBpQXR0cnNgIC0gaW5zdGFuY2UgYXR0cmlidXRlcyAtIE5vcm1hbGl6ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzIGRlY2xhcmVkIG9uIHRoaXMgZWxlbWVudCBzaGFyZWQKICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBsaW5raW5nIGZ1bmN0aW9ucy4KICoKICogICAqIGBjb250cm9sbGVyYCAtIGEgY29udHJvbGxlciBpbnN0YW5jZSAtIEEgY29udHJvbGxlciBpbnN0YW5jZSBpZiBhdCBsZWFzdCBvbmUgZGlyZWN0aXZlIG9uIHRoZQogKiAgICAgZWxlbWVudCBkZWZpbmVzIGEgY29udHJvbGxlci4gVGhlIGNvbnRyb2xsZXIgaXMgc2hhcmVkIGFtb25nIGFsbCB0aGUgZGlyZWN0aXZlcywgd2hpY2ggYWxsb3dzCiAqICAgICB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGNvbnRyb2xsZXJzIGFzIGEgY29tbXVuaWNhdGlvbiBjaGFubmVsLgogKgogKiAgICogYHRyYW5zY2x1ZGVGbmAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlLgogKiAgICAgVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgYCR0cmFuc2NsdWRlYAogKiAgICAgcGFyYW1ldGVyIG9mIGRpcmVjdGl2ZSBjb250cm9sbGVycywgc2VlIHRoZXJlIGZvciBkZXRhaWxzLgogKiAgICAgYGZ1bmN0aW9uKFtzY29wZV0sIGNsb25lTGlua2luZ0ZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KWAuCiAqCiAqICMjIyMgUHJlLWxpbmtpbmcgZnVuY3Rpb24KICoKICogRXhlY3V0ZWQgYmVmb3JlIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLiBOb3Qgc2FmZSB0byBkbyBET00gdHJhbnNmb3JtYXRpb24gc2luY2UgdGhlCiAqIGNvbXBpbGVyIGxpbmtpbmcgZnVuY3Rpb24gd2lsbCBmYWlsIHRvIGxvY2F0ZSB0aGUgY29ycmVjdCBlbGVtZW50cyBmb3IgbGlua2luZy4KICoKICogIyMjIyBQb3N0LWxpbmtpbmcgZnVuY3Rpb24KICoKICogRXhlY3V0ZWQgYWZ0ZXIgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuCiAqCiAqIE5vdGUgdGhhdCBjaGlsZCBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYHRlbXBsYXRlVXJsYCBkaXJlY3RpdmVzIHdpbGwgbm90IGhhdmUgYmVlbiBjb21waWxlZAogKiBhbmQgbGlua2VkIHNpbmNlIHRoZXkgYXJlIHdhaXRpbmcgZm9yIHRoZWlyIHRlbXBsYXRlIHRvIGxvYWQgYXN5bmNocm9ub3VzbHkgYW5kIHRoZWlyIG93bgogKiBjb21waWxhdGlvbiBhbmQgbGlua2luZyBoYXMgYmVlbiBzdXNwZW5kZWQgdW50aWwgdGhhdCBvY2N1cnMuCiAqCiAqIEl0IGlzIHNhZmUgdG8gZG8gRE9NIHRyYW5zZm9ybWF0aW9uIGluIHRoZSBwb3N0LWxpbmtpbmcgZnVuY3Rpb24gb24gZWxlbWVudHMgdGhhdCBhcmUgbm90IHdhaXRpbmcKICogZm9yIHRoZWlyIGFzeW5jIHRlbXBsYXRlcyB0byBiZSByZXNvbHZlZC4KICoKICoKICogIyMjIFRyYW5zY2x1c2lvbgogKgogKiBUcmFuc2NsdXNpb24gaXMgdGhlIHByb2Nlc3Mgb2YgZXh0cmFjdGluZyBhIGNvbGxlY3Rpb24gb2YgRE9NIGVsZW1lbnQgZnJvbSBvbmUgcGFydCBvZiB0aGUgRE9NIGFuZAogKiBjb3B5aW5nIHRoZW0gdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBET00sIHdoaWxlIG1haW50YWluaW5nIHRoZWlyIGNvbm5lY3Rpb24gdG8gdGhlIG9yaWdpbmFsIEFuZ3VsYXJKUwogKiBzY29wZSBmcm9tIHdoZXJlIHRoZXkgd2VyZSB0YWtlbi4KICoKICogVHJhbnNjbHVzaW9uIGlzIHVzZWQgKG9mdGVuIHdpdGgge0BsaW5rIG5nVHJhbnNjbHVkZX0pIHRvIGluc2VydCB0aGUKICogb3JpZ2luYWwgY29udGVudHMgb2YgYSBkaXJlY3RpdmUncyBlbGVtZW50IGludG8gYSBzcGVjaWZpZWQgcGxhY2UgaW4gdGhlIHRlbXBsYXRlIG9mIHRoZSBkaXJlY3RpdmUuCiAqIFRoZSBiZW5lZml0IG9mIHRyYW5zY2x1c2lvbiwgb3ZlciBzaW1wbHkgbW92aW5nIHRoZSBET00gZWxlbWVudHMgbWFudWFsbHksIGlzIHRoYXQgdGhlIHRyYW5zY2x1ZGVkCiAqIGNvbnRlbnQgaGFzIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBvbiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdCB3YXMgdGFrZW4sIGV2ZW4gaWYgdGhlIGRpcmVjdGl2ZQogKiBoYXMgaXNvbGF0ZWQgc2NvcGUuCiAqIFNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSNjcmVhdGluZy1hLWRpcmVjdGl2ZS10aGF0LXdyYXBzLW90aGVyLWVsZW1lbnRzIERpcmVjdGl2ZXMgR3VpZGV9LgogKgogKiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciB0aGUgd2lkZ2V0IHRvIGhhdmUgcHJpdmF0ZSBzdGF0ZSBmb3IgaXRzIHRlbXBsYXRlLCB3aGlsZSB0aGUgdHJhbnNjbHVkZWQKICogY29udGVudCBoYXMgYWNjZXNzIHRvIGl0cyBvcmlnaW5hdGluZyBzY29wZS4KICoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAqICoqTm90ZToqKiBXaGVuIHRlc3RpbmcgYW4gZWxlbWVudCB0cmFuc2NsdWRlIGRpcmVjdGl2ZSB5b3UgbXVzdCBub3QgcGxhY2UgdGhlIGRpcmVjdGl2ZSBhdCB0aGUgcm9vdCBvZiB0aGUKICogRE9NIGZyYWdtZW50IHRoYXQgaXMgYmVpbmcgY29tcGlsZWQuIFNlZSB7QGxpbmsgZ3VpZGUvdW5pdC10ZXN0aW5nI3Rlc3RpbmctdHJhbnNjbHVzaW9uLWRpcmVjdGl2ZXMKICogVGVzdGluZyBUcmFuc2NsdXNpb24gRGlyZWN0aXZlc30uCiAqIDwvZGl2PgogKgogKiAjIyMjIFRyYW5zY2x1c2lvbiBGdW5jdGlvbnMKICoKICogV2hlbiBhIGRpcmVjdGl2ZSByZXF1ZXN0cyB0cmFuc2NsdXNpb24sIHRoZSBjb21waWxlciBleHRyYWN0cyBpdHMgY29udGVudHMgYW5kIHByb3ZpZGVzIGEgKip0cmFuc2NsdXNpb24KICogZnVuY3Rpb24qKiB0byB0aGUgZGlyZWN0aXZlJ3MgYGxpbmtgIGZ1bmN0aW9uIGFuZCBgY29udHJvbGxlcmAuIFRoaXMgdHJhbnNjbHVzaW9uIGZ1bmN0aW9uIGlzIGEgc3BlY2lhbAogKiAqKmxpbmtpbmcgZnVuY3Rpb24qKiB0aGF0IHdpbGwgcmV0dXJuIHRoZSBjb21waWxlZCBjb250ZW50cyBsaW5rZWQgdG8gYSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1pbmZvIj4KICogSWYgeW91IGFyZSBqdXN0IHVzaW5nIHtAbGluayBuZ1RyYW5zY2x1ZGV9IHRoZW4geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhpcyBmdW5jdGlvbiwgc2luY2UKICogbmdUcmFuc2NsdWRlIHdpbGwgZGVhbCB3aXRoIGl0IGZvciB1cy4KICogPC9kaXY+CiAqCiAqIElmIHlvdSB3YW50IHRvIG1hbnVhbGx5IGNvbnRyb2wgdGhlIGluc2VydGlvbiBhbmQgcmVtb3ZhbCBvZiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpbiB5b3VyIGRpcmVjdGl2ZQogKiB0aGVuIHlvdSBtdXN0IHVzZSB0aGlzIHRyYW5zY2x1ZGUgZnVuY3Rpb24uIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBhIGpxTGl0ZS9KUXVlcnkKICogb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGNvbXBpbGVkIERPTSwgd2hpY2ggaXMgbGlua2VkIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZS4KICoKICogV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiB5b3UgY2FuIHBhc3MgaW4gYSAqKmNsb25lIGF0dGFjaCBmdW5jdGlvbioqLiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMKICogdHdvIHBhcmFtZXRlcnMsIGBmdW5jdGlvbihjbG9uZSwgc2NvcGUpIHsgLi4uIH1gLCB3aGVyZSB0aGUgYGNsb25lYCBpcyBhIGZyZXNoIGNvbXBpbGVkIGNvcHkgb2YgeW91ciB0cmFuc2NsdWRlZAogKiBjb250ZW50IGFuZCB0aGUgYHNjb3BlYCBpcyB0aGUgbmV3bHkgY3JlYXRlZCB0cmFuc2NsdXNpb24gc2NvcGUsIHRvIHdoaWNoIHRoZSBjbG9uZSBpcyBib3VuZC4KICoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtaW5mbyI+CiAqICoqQmVzdCBQcmFjdGljZSoqOiBBbHdheXMgcHJvdmlkZSBhIGBjbG9uZUZuYCAoY2xvbmUgYXR0YWNoIGZ1bmN0aW9uKSB3aGVuIHlvdSBjYWxsIGEgdHJhbnNsdWRlIGZ1bmN0aW9uCiAqIHNpbmNlIHlvdSB0aGVuIGdldCBhIGZyZXNoIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBET00gYW5kIGFsc28gaGF2ZSBhY2Nlc3MgdG8gdGhlIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUuCiAqIDwvZGl2PgogKgogKiBJdCBpcyBub3JtYWwgcHJhY3RpY2UgdG8gYXR0YWNoIHlvdXIgdHJhbnNjbHVkZWQgY29udGVudCAoYGNsb25lYCkgdG8gdGhlIERPTSBpbnNpZGUgeW91ciAqKmNsb25lCiAqIGF0dGFjaCBmdW5jdGlvbioqOgogKgogKiBgYGBqcwogKiB2YXIgdHJhbnNjbHVkZWRDb250ZW50LCB0cmFuc2NsdXNpb25TY29wZTsKICoKICogJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7CiAqICAgZWxlbWVudC5hcHBlbmQoY2xvbmUpOwogKiAgIHRyYW5zY2x1ZGVkQ29udGVudCA9IGNsb25lOwogKiAgIHRyYW5zY2x1c2lvblNjb3BlID0gc2NvcGU7CiAqIH0pOwogKiBgYGAKICoKICogTGF0ZXIsIGlmIHlvdSB3YW50IHRvIHJlbW92ZSB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBmcm9tIHlvdXIgRE9NIHRoZW4geW91IHNob3VsZCBhbHNvIGRlc3Ryb3kgdGhlCiAqIGFzc29jaWF0ZWQgdHJhbnNjbHVzaW9uIHNjb3BlOgogKgogKiBgYGBqcwogKiB0cmFuc2NsdWRlZENvbnRlbnQucmVtb3ZlKCk7CiAqIHRyYW5zY2x1c2lvblNjb3BlLiRkZXN0cm95KCk7CiAqIGBgYAogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1pbmZvIj4KICogKipCZXN0IFByYWN0aWNlKio6IGlmIHlvdSBpbnRlbmQgdG8gYWRkIGFuZCByZW1vdmUgdHJhbnNjbHVkZWQgY29udGVudCBtYW51YWxseSBpbiB5b3VyIGRpcmVjdGl2ZQogKiAoYnkgY2FsbGluZyB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiB0byBnZXQgdGhlIERPTSBhbmQgYW5kIGNhbGxpbmcgYGVsZW1lbnQucmVtb3ZlKClgIHRvIHJlbW92ZSBpdCksCiAqIHRoZW4geW91IGFyZSBhbHNvIHJlc3BvbnNpYmxlIGZvciBjYWxsaW5nIGAkZGVzdHJveWAgb24gdGhlIHRyYW5zY2x1c2lvbiBzY29wZS4KICogPC9kaXY+CiAqCiAqIFRoZSBidWlsdC1pbiBET00gbWFuaXB1bGF0aW9uIGRpcmVjdGl2ZXMsIHN1Y2ggYXMge0BsaW5rIG5nSWZ9LCB7QGxpbmsgbmdTd2l0Y2h9IGFuZCB7QGxpbmsgbmdSZXBlYXR9CiAqIGF1dG9tYXRpY2FsbHkgZGVzdHJveSB0aGVpciB0cmFuc2x1ZGVkIGNsb25lcyBhcyBuZWNlc3Nhcnkgc28geW91IGRvIG5vdCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMgaWYKICogeW91IGFyZSBzaW1wbHkgdXNpbmcge0BsaW5rIG5nVHJhbnNjbHVkZX0gdG8gaW5qZWN0IHRoZSB0cmFuc2NsdXNpb24gaW50byB5b3VyIGRpcmVjdGl2ZS4KICoKICoKICogIyMjIyBUcmFuc2NsdXNpb24gU2NvcGVzCiAqCiAqIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBET00gZnJhZ21lbnQgdGhhdCBpcyBwcmUtYm91bmQgdG8gYSAqKnRyYW5zY2x1c2lvbgogKiBzY29wZSoqLiBUaGlzIHNjb3BlIGlzIHNwZWNpYWwsIGluIHRoYXQgaXQgaXMgYSBjaGlsZCBvZiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgKGFuZCBzbyBnZXRzIGRlc3Ryb3llZAogKiB3aGVuIHRoZSBkaXJlY3RpdmUncyBzY29wZSBnZXRzIGRlc3Ryb3llZCkgYnV0IGl0IGluaGVyaXRzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBzY29wZSBmcm9tIHdoaWNoIGl0CiAqIHdhcyB0YWtlbi4KICoKICogRm9yIGV4YW1wbGUgY29uc2lkZXIgYSBkaXJlY3RpdmUgdGhhdCB1c2VzIHRyYW5zY2x1c2lvbiBhbmQgaXNvbGF0ZWQgc2NvcGUuIFRoZSBET00gaGllcmFyY2h5IG1pZ2h0IGxvb2sKICogbGlrZSB0aGlzOgogKgogKiBgYGBodG1sCiAqIDxkaXYgbmctYXBwPgogKiAgIDxkaXYgaXNvbGF0ZT4KICogICAgIDxkaXYgdHJhbnNjbHVzaW9uPgogKiAgICAgPC9kaXY+CiAqICAgPC9kaXY+CiAqIDwvZGl2PgogKiBgYGAKICoKICogVGhlIGAkcGFyZW50YCBzY29wZSBoaWVyYXJjaHkgd2lsbCBsb29rIGxpa2UgdGhpczoKICoKICogYGBgCiAqIC0gJHJvb3RTY29wZQogKiAgIC0gaXNvbGF0ZQogKiAgICAgLSB0cmFuc2NsdXNpb24KICogYGBgCiAqCiAqIGJ1dCB0aGUgc2NvcGVzIHdpbGwgaW5oZXJpdCBwcm90b3R5cGljYWxseSBmcm9tIGRpZmZlcmVudCBzY29wZXMgdG8gdGhlaXIgYCRwYXJlbnRgLgogKgogKiBgYGAKICogLSAkcm9vdFNjb3BlCiAqICAgLSB0cmFuc2NsdXNpb24KICogLSBpc29sYXRlCiAqIGBgYAogKgogKgogKiAjIyMgQXR0cmlidXRlcwogKgogKiBUaGUge0BsaW5rIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIEF0dHJpYnV0ZXN9IG9iamVjdCAtIHBhc3NlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGUKICogYGxpbmsoKWAgb3IgYGNvbXBpbGUoKWAgZnVuY3Rpb25zLiBJdCBoYXMgYSB2YXJpZXR5IG9mIHVzZXMuCiAqCiAqIGFjY2Vzc2luZyAqTm9ybWFsaXplZCBhdHRyaWJ1dGUgbmFtZXM6KgogKiBEaXJlY3RpdmVzIGxpa2UgJ25nQmluZCcgY2FuIGJlIGV4cHJlc3NlZCBpbiBtYW55IHdheXM6ICduZzpiaW5kJywgYGRhdGEtbmctYmluZGAsIG9yICd4LW5nLWJpbmQnLgogKiB0aGUgYXR0cmlidXRlcyBvYmplY3QgYWxsb3dzIGZvciBub3JtYWxpemVkIGFjY2VzcyB0bwogKiAgIHRoZSBhdHRyaWJ1dGVzLgogKgogKiAqICpEaXJlY3RpdmUgaW50ZXItY29tbXVuaWNhdGlvbjoqIEFsbCBkaXJlY3RpdmVzIHNoYXJlIHRoZSBzYW1lIGluc3RhbmNlIG9mIHRoZSBhdHRyaWJ1dGVzCiAqICAgb2JqZWN0IHdoaWNoIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFzIGludGVyIGRpcmVjdGl2ZQogKiAgIGNvbW11bmljYXRpb24uCiAqCiAqICogKlN1cHBvcnRzIGludGVycG9sYXRpb246KiBJbnRlcnBvbGF0aW9uIGF0dHJpYnV0ZXMgYXJlIGFzc2lnbmVkIHRvIHRoZSBhdHRyaWJ1dGUgb2JqZWN0CiAqICAgYWxsb3dpbmcgb3RoZXIgZGlyZWN0aXZlcyB0byByZWFkIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUuCiAqCiAqICogKk9ic2VydmluZyBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlczoqIFVzZSBgJG9ic2VydmVgIHRvIG9ic2VydmUgdGhlIHZhbHVlIGNoYW5nZXMgb2YgYXR0cmlidXRlcwogKiAgIHRoYXQgY29udGFpbiBpbnRlcnBvbGF0aW9uIChlLmcuIGBzcmM9Int7YmFyfX0iYCkuIE5vdCBvbmx5IGlzIHRoaXMgdmVyeSBlZmZpY2llbnQgYnV0IGl0J3MgYWxzbwogKiAgIHRoZSBvbmx5IHdheSB0byBlYXNpbHkgZ2V0IHRoZSBhY3R1YWwgdmFsdWUgYmVjYXVzZSBkdXJpbmcgdGhlIGxpbmtpbmcgcGhhc2UgdGhlIGludGVycG9sYXRpb24KICogICBoYXNuJ3QgYmVlbiBldmFsdWF0ZWQgeWV0IGFuZCBzbyB0aGUgdmFsdWUgaXMgYXQgdGhpcyB0aW1lIHNldCB0byBgdW5kZWZpbmVkYC4KICoKICogYGBganMKICogZnVuY3Rpb24gbGlua2luZ0ZuKHNjb3BlLCBlbG0sIGF0dHJzLCBjdHJsKSB7CiAqICAgLy8gZ2V0IHRoZSBhdHRyaWJ1dGUgdmFsdWUKICogICBjb25zb2xlLmxvZyhhdHRycy5uZ01vZGVsKTsKICoKICogICAvLyBjaGFuZ2UgdGhlIGF0dHJpYnV0ZQogKiAgIGF0dHJzLiRzZXQoJ25nTW9kZWwnLCAnbmV3IHZhbHVlJyk7CiAqCiAqICAgLy8gb2JzZXJ2ZSBjaGFuZ2VzIHRvIGludGVycG9sYXRlZCBhdHRyaWJ1dGUKICogICBhdHRycy4kb2JzZXJ2ZSgnbmdNb2RlbCcsIGZ1bmN0aW9uKHZhbHVlKSB7CiAqICAgICBjb25zb2xlLmxvZygnbmdNb2RlbCBoYXMgY2hhbmdlZCB2YWx1ZSB0byAnICsgdmFsdWUpOwogKiAgIH0pOwogKiB9CiAqIGBgYAogKgogKiAjIyBFeGFtcGxlCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKk5vdGUqKjogVHlwaWNhbGx5IGRpcmVjdGl2ZXMgYXJlIHJlZ2lzdGVyZWQgd2l0aCBgbW9kdWxlLmRpcmVjdGl2ZWAuIFRoZSBleGFtcGxlIGJlbG93IGlzCiAqIHRvIGlsbHVzdHJhdGUgaG93IGAkY29tcGlsZWAgd29ya3MuCiAqIDwvZGl2PgogKgogPGV4YW1wbGUgbW9kdWxlPSJjb21waWxlRXhhbXBsZSI+CiAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgPHNjcmlwdD4KICAgICAgYW5ndWxhci5tb2R1bGUoJ2NvbXBpbGVFeGFtcGxlJywgW10sIGZ1bmN0aW9uKCRjb21waWxlUHJvdmlkZXIpIHsKICAgICAgICAvLyBjb25maWd1cmUgbmV3ICdjb21waWxlJyBkaXJlY3RpdmUgYnkgcGFzc2luZyBhIGRpcmVjdGl2ZQogICAgICAgIC8vIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIGluamVjdHMgdGhlICckY29tcGlsZScKICAgICAgICAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgnY29tcGlsZScsIGZ1bmN0aW9uKCRjb21waWxlKSB7CiAgICAgICAgICAvLyBkaXJlY3RpdmUgZmFjdG9yeSBjcmVhdGVzIGEgbGluayBmdW5jdGlvbgogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykgewogICAgICAgICAgICBzY29wZS4kd2F0Y2goCiAgICAgICAgICAgICAgZnVuY3Rpb24oc2NvcGUpIHsKICAgICAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gZm9yIGNoYW5nZXMKICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS4kZXZhbChhdHRycy5jb21waWxlKTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSAnY29tcGlsZScgZXhwcmVzc2lvbiBjaGFuZ2VzCiAgICAgICAgICAgICAgICAvLyBhc3NpZ24gaXQgaW50byB0aGUgY3VycmVudCBET00KICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7CgogICAgICAgICAgICAgICAgLy8gY29tcGlsZSB0aGUgbmV3IERPTSBhbmQgbGluayBpdCB0byB0aGUgY3VycmVudAogICAgICAgICAgICAgICAgLy8gc2NvcGUuCiAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBvbmx5IGNvbXBpbGUgLmNoaWxkTm9kZXMgc28gdGhhdAogICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgZ2V0IGludG8gaW5maW5pdGUgbG9vcCBjb21waWxpbmcgb3Vyc2VsdmVzCiAgICAgICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICk7CiAgICAgICAgICB9OwogICAgICAgIH0pOwogICAgICB9KQogICAgICAuY29udHJvbGxlcignR3JlZXRlckNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICRzY29wZS5uYW1lID0gJ0FuZ3VsYXInOwogICAgICAgICRzY29wZS5odG1sID0gJ0hlbGxvIHt7bmFtZX19JzsKICAgICAgfV0pOwogICAgPC9zY3JpcHQ+CiAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkdyZWV0ZXJDb250cm9sbGVyIj4KICAgICAgPGlucHV0IG5nLW1vZGVsPSJuYW1lIj4gPGJyPgogICAgICA8dGV4dGFyZWEgbmctbW9kZWw9Imh0bWwiPjwvdGV4dGFyZWE+IDxicj4KICAgICAgPGRpdiBjb21waWxlPSJodG1sIj48L2Rpdj4KICAgIDwvZGl2PgogICA8L2ZpbGU+CiAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgIGl0KCdzaG91bGQgYXV0byBjb21waWxlJywgZnVuY3Rpb24oKSB7CiAgICAgICB2YXIgdGV4dGFyZWEgPSAkKCd0ZXh0YXJlYScpOwogICAgICAgdmFyIG91dHB1dCA9ICQoJ2Rpdltjb21waWxlXScpOwogICAgICAgLy8gVGhlIGluaXRpYWwgc3RhdGUgcmVhZHMgJ0hlbGxvIEFuZ3VsYXInLgogICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIEFuZ3VsYXInKTsKICAgICAgIHRleHRhcmVhLmNsZWFyKCk7CiAgICAgICB0ZXh0YXJlYS5zZW5kS2V5cygne3tuYW1lfX0hJyk7CiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9CZSgnQW5ndWxhciEnKTsKICAgICB9KTsKICAgPC9maWxlPgogPC9leGFtcGxlPgoKICoKICoKICogQHBhcmFtIHtzdHJpbmd8RE9NRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IG9yIEhUTUwgc3RyaW5nIHRvIGNvbXBpbGUgaW50byBhIHRlbXBsYXRlIGZ1bmN0aW9uLgogKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZSBmdW5jdGlvbiBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcy4KICogQHBhcmFtIHtudW1iZXJ9IG1heFByaW9yaXR5IG9ubHkgYXBwbHkgZGlyZWN0aXZlcyBsb3dlciB0aGFuIGdpdmVuIHByaW9yaXR5IChPbmx5IGVmZmVjdHMgdGhlCiAqICAgICAgICAgICAgICAgICByb290IGVsZW1lbnQocyksIG5vdCB0aGVpciBjaGlsZHJlbikKICogQHJldHVybnMge2Z1bmN0aW9uKHNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IGEgbGluayBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIGJpbmQgdGVtcGxhdGUKICogKGEgRE9NIGVsZW1lbnQvdHJlZSkgdG8gYSBzY29wZS4gV2hlcmU6CiAqCiAqICAqIGBzY29wZWAgLSBBIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIFNjb3BlfSB0byBiaW5kIHRvLgogKiAgKiBgY2xvbmVBdHRhY2hGbmAgLSBJZiBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGxpbmsgZnVuY3Rpb24gd2lsbCBjbG9uZSB0aGUKICogIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGUKICogIGNsb25lZCBlbGVtZW50cyB0byB0aGUgRE9NIGRvY3VtZW50IGF0IHRoZSBhcHByb3ByaWF0ZSBwbGFjZS4gVGhlIGBjbG9uZUF0dGFjaEZuYCBpcwogKiAgY2FsbGVkIGFzOiA8YnI+IGBjbG9uZUF0dGFjaEZuKGNsb25lZEVsZW1lbnQsIHNjb3BlKWAgd2hlcmU6CiAqCiAqICAgICAgKiBgY2xvbmVkRWxlbWVudGAgLSBpcyBhIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBgZWxlbWVudGAgcGFzc2VkIGludG8gdGhlIGNvbXBpbGVyLgogKiAgICAgICogYHNjb3BlYCAtIGlzIHRoZSBjdXJyZW50IHNjb3BlIHdpdGggd2hpY2ggdGhlIGxpbmtpbmcgZnVuY3Rpb24gaXMgd29ya2luZyB3aXRoLgogKgogKiBDYWxsaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHRlbXBsYXRlLiBJdCBpcyBlaXRoZXIgdGhlIG9yaWdpbmFsCiAqIGVsZW1lbnQgcGFzc2VkIGluLCBvciB0aGUgY2xvbmUgb2YgdGhlIGVsZW1lbnQgaWYgdGhlIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZC4KICoKICogQWZ0ZXIgbGlua2luZyB0aGUgdmlldyBpcyBub3QgdXBkYXRlZCB1bnRpbCBhZnRlciBhIGNhbGwgdG8gJGRpZ2VzdCB3aGljaCB0eXBpY2FsbHkgaXMgZG9uZSBieQogKiBBbmd1bGFyIGF1dG9tYXRpY2FsbHkuCiAqCiAqIElmIHlvdSBuZWVkIGFjY2VzcyB0byB0aGUgYm91bmQgdmlldywgdGhlcmUgYXJlIHR3byB3YXlzIHRvIGRvIGl0OgogKgogKiAtIElmIHlvdSBhcmUgbm90IGFza2luZyB0aGUgbGlua2luZyBmdW5jdGlvbiB0byBjbG9uZSB0aGUgdGVtcGxhdGUsIGNyZWF0ZSB0aGUgRE9NIGVsZW1lbnQocykKICogICBiZWZvcmUgeW91IHNlbmQgdGhlbSB0byB0aGUgY29tcGlsZXIgYW5kIGtlZXAgdGhpcyByZWZlcmVuY2UgYXJvdW5kLgogKiAgIGBgYGpzCiAqICAgICB2YXIgZWxlbWVudCA9ICRjb21waWxlKCc8cD57e3RvdGFsfX08L3A+Jykoc2NvcGUpOwogKiAgIGBgYAogKgogKiAtIGlmIG9uIHRoZSBvdGhlciBoYW5kLCB5b3UgbmVlZCB0aGUgZWxlbWVudCB0byBiZSBjbG9uZWQsIHRoZSB2aWV3IHJlZmVyZW5jZSBmcm9tIHRoZSBvcmlnaW5hbAogKiAgIGV4YW1wbGUgd291bGQgbm90IHBvaW50IHRvIHRoZSBjbG9uZSwgYnV0IHJhdGhlciB0byB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgdGhhdCB3YXMgY2xvbmVkLiBJbgogKiAgIHRoaXMgY2FzZSwgeW91IGNhbiBhY2Nlc3MgdGhlIGNsb25lIHZpYSB0aGUgY2xvbmVBdHRhY2hGbjoKICogICBgYGBqcwogKiAgICAgdmFyIHRlbXBsYXRlRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgnPHA+e3t0b3RhbH19PC9wPicpLAogKiAgICAgICAgIHNjb3BlID0gLi4uLjsKICoKICogICAgIHZhciBjbG9uZWRFbGVtZW50ID0gJGNvbXBpbGUodGVtcGxhdGVFbGVtZW50KShzY29wZSwgZnVuY3Rpb24oY2xvbmVkRWxlbWVudCwgc2NvcGUpIHsKICogICAgICAgLy9hdHRhY2ggdGhlIGNsb25lIHRvIERPTSBkb2N1bWVudCBhdCB0aGUgcmlnaHQgcGxhY2UKICogICAgIH0pOwogKgogKiAgICAgLy9ub3cgd2UgaGF2ZSByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBET00gdmlhIGBjbG9uZWRFbGVtZW50YAogKiAgIGBgYAogKgogKgogKiBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRoZSBjb21waWxlciB3b3Jrcywgc2VlIHRoZQogKiB7QGxpbmsgZ3VpZGUvY29tcGlsZXIgQW5ndWxhciBIVE1MIENvbXBpbGVyfSBzZWN0aW9uIG9mIHRoZSBEZXZlbG9wZXIgR3VpZGUuCiAqLwoKdmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpOwoKLyoqCiAqIEBuZ2RvYyBwcm92aWRlcgogKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyCiAqCiAqIEBkZXNjcmlwdGlvbgogKi8KJENvbXBpbGVQcm92aWRlci4kaW5qZWN0ID0gWyckcHJvdmlkZScsICckJHNhbml0aXplVXJpUHJvdmlkZXInXTsKZnVuY3Rpb24gJENvbXBpbGVQcm92aWRlcigkcHJvdmlkZSwgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyKSB7CiAgdmFyIGhhc0RpcmVjdGl2ZXMgPSB7fSwKICAgICAgU3VmZml4ID0gJ0RpcmVjdGl2ZScsCiAgICAgIENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUCA9IC9eXHMqZGlyZWN0aXZlXDpccyooW1xkXHdfXC1dKylccysoLiopJC8sCiAgICAgIENMQVNTX0RJUkVDVElWRV9SRUdFWFAgPSAvKChbXGRcd19cLV0rKSg/Olw6KFteO10rKSk/Oz8pLywKICAgICAgQUxMX09SX05PVEhJTkdfQVRUUlMgPSBtYWtlTWFwKCduZ1NyYyxuZ1NyY3NldCxzcmMsc3Jjc2V0JyksCiAgICAgIFJFUVVJUkVfUFJFRklYX1JFR0VYUCA9IC9eKD86KFxeXF4/KT8oXD8pPyhcXlxePyk/KT8vOwoKICAvLyBSZWY6IGh0dHA6Ly9kZXZlbG9wZXJzLndoYXR3Zy5vcmcvd2ViYXBwYXBpcy5odG1sI2V2ZW50LWhhbmRsZXItaWRsLWF0dHJpYnV0ZXMKICAvLyBUaGUgYXNzdW1wdGlvbiBpcyB0aGF0IGZ1dHVyZSBET00gZXZlbnQgYXR0cmlidXRlIG5hbWVzIHdpbGwgYmVnaW4gd2l0aAogIC8vICdvbicgYW5kIGJlIGNvbXBvc2VkIG9mIG9ubHkgRW5nbGlzaCBsZXR0ZXJzLgogIHZhciBFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQID0gL14ob25bYS16XSt8Zm9ybWFjdGlvbikkLzsKCiAgZnVuY3Rpb24gcGFyc2VJc29sYXRlQmluZGluZ3Moc2NvcGUsIGRpcmVjdGl2ZU5hbWUpIHsKICAgIHZhciBMT0NBTF9SRUdFWFAgPSAvXlxzKihbQD0mXSkoXD8/KVxzKihcdyopXHMqJC87CgogICAgdmFyIGJpbmRpbmdzID0ge307CgogICAgZm9yRWFjaChzY29wZSwgZnVuY3Rpb24oZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7CiAgICAgIHZhciBtYXRjaCA9IGRlZmluaXRpb24ubWF0Y2goTE9DQUxfUkVHRVhQKTsKCiAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignaXNjcCcsCiAgICAgICAgICAgICJJbnZhbGlkIGlzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbiBmb3IgZGlyZWN0aXZlICd7MH0nLiIgKwogICAgICAgICAgICAiIERlZmluaXRpb246IHsuLi4gezF9OiAnezJ9JyAuLi59IiwKICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgc2NvcGVOYW1lLCBkZWZpbml0aW9uKTsKICAgICAgfQoKICAgICAgYmluZGluZ3Nbc2NvcGVOYW1lXSA9IHsKICAgICAgICBhdHRyTmFtZTogbWF0Y2hbM10gfHwgc2NvcGVOYW1lLAogICAgICAgIG1vZGU6IG1hdGNoWzFdLAogICAgICAgIG9wdGlvbmFsOiBtYXRjaFsyXSA9PT0gJz8nCiAgICAgIH07CiAgICB9KTsKCiAgICByZXR1cm4gYmluZGluZ3M7CiAgfQoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUKICAgKiBAa2luZCBmdW5jdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmVnaXN0ZXIgYSBuZXcgZGlyZWN0aXZlIHdpdGggdGhlIGNvbXBpbGVyLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBpbiBjYW1lbC1jYXNlIChpLmUuIDxjb2RlPm5nQmluZDwvY29kZT4gd2hpY2gKICAgKiAgICB3aWxsIG1hdGNoIGFzIDxjb2RlPm5nLWJpbmQ8L2NvZGU+KSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGUKICAgKiAgICBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZhY3Rvcmllcy4KICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBkaXJlY3RpdmVGYWN0b3J5IEFuIGluamVjdGFibGUgZGlyZWN0aXZlIGZhY3RvcnkgZnVuY3Rpb24uIFNlZQogICAqICAgIHtAbGluayBndWlkZS9kaXJlY3RpdmV9IGZvciBtb3JlIGluZm8uCiAgICogQHJldHVybnMge25nLiRjb21waWxlUHJvdmlkZXJ9IFNlbGYgZm9yIGNoYWluaW5nLgogICAqLwogICB0aGlzLmRpcmVjdGl2ZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZUZhY3RvcnkpIHsKICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdkaXJlY3RpdmUnKTsKICAgIGlmIChpc1N0cmluZyhuYW1lKSkgewogICAgICBhc3NlcnRBcmcoZGlyZWN0aXZlRmFjdG9yeSwgJ2RpcmVjdGl2ZUZhY3RvcnknKTsKICAgICAgaWYgKCFoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXSA9IFtdOwogICAgICAgICRwcm92aWRlLmZhY3RvcnkobmFtZSArIFN1ZmZpeCwgWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLAogICAgICAgICAgZnVuY3Rpb24oJGluamVjdG9yLCAkZXhjZXB0aW9uSGFuZGxlcikgewogICAgICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IFtdOwogICAgICAgICAgICBmb3JFYWNoKGhhc0RpcmVjdGl2ZXNbbmFtZV0sIGZ1bmN0aW9uKGRpcmVjdGl2ZUZhY3RvcnksIGluZGV4KSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBkaXJlY3RpdmUgPSAkaW5qZWN0b3IuaW52b2tlKGRpcmVjdGl2ZUZhY3RvcnkpOwogICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmUgPSB7IGNvbXBpbGU6IHZhbHVlRm4oZGlyZWN0aXZlKSB9OwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZGlyZWN0aXZlLmNvbXBpbGUgJiYgZGlyZWN0aXZlLmxpbmspIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLmNvbXBpbGUgPSB2YWx1ZUZuKGRpcmVjdGl2ZS5saW5rKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5wcmlvcml0eSA9IGRpcmVjdGl2ZS5wcmlvcml0eSB8fCAwOwogICAgICAgICAgICAgICAgZGlyZWN0aXZlLmluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmUubmFtZSA9IGRpcmVjdGl2ZS5uYW1lIHx8IG5hbWU7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlIHx8IChkaXJlY3RpdmUuY29udHJvbGxlciAmJiBkaXJlY3RpdmUubmFtZSk7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0VBJzsKICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChkaXJlY3RpdmUuc2NvcGUpKSB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncyA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSwgZGlyZWN0aXZlLm5hbWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7CiAgICAgICAgICB9XSk7CiAgICAgIH0KICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXS5wdXNoKGRpcmVjdGl2ZUZhY3RvcnkpOwogICAgfSBlbHNlIHsKICAgICAgZm9yRWFjaChuYW1lLCByZXZlcnNlUGFyYW1zKHJlZ2lzdGVyRGlyZWN0aXZlKSk7CiAgICB9CiAgICByZXR1cm4gdGhpczsKICB9OwoKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QKICAgKiBAa2luZCBmdW5jdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZQogICAqIHVybHMgZHVyaW5nIGFbaHJlZl0gc2FuaXRpemF0aW9uLgogICAqCiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy4KICAgKgogICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gYVtocmVmXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvCiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YAogICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLAogICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS4KICAgKgogICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC4KICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yCiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLgogICAqLwogIHRoaXMuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHsKICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkgewogICAgICAkJHNhbml0aXplVXJpUHJvdmlkZXIuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QocmVnZXhwKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7CiAgICB9CiAgfTsKCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2ltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdAogICAqIEBraW5kIGZ1bmN0aW9uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlCiAgICogdXJscyBkdXJpbmcgaW1nW3NyY10gc2FuaXRpemF0aW9uLgogICAqCiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy4KICAgKgogICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gaW1nW3NyY10gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50bwogICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgCiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsCiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLgogICAqCiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLgogICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3IKICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuCiAgICovCiAgdGhpcy5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHsKICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkgewogICAgICAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QoKTsKICAgIH0KICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgICRjb21waWxlUHJvdmlkZXIjZGVidWdJbmZvRW5hYmxlZAogICAqCiAgICogQHBhcmFtIHtib29sZWFuPX0gZW5hYmxlZCB1cGRhdGUgdGhlIGRlYnVnSW5mb0VuYWJsZWQgc3RhdGUgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSBqdXN0IHJldHVybiB0aGUKICAgKiBjdXJyZW50IGRlYnVnSW5mb0VuYWJsZWQgc3RhdGUKICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlcgogICAqCiAgICogQGtpbmQgZnVuY3Rpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIENhbGwgdGhpcyBtZXRob2QgdG8gZW5hYmxlL2Rpc2FibGUgdmFyaW91cyBkZWJ1ZyBydW50aW1lIGluZm9ybWF0aW9uIGluIHRoZSBjb21waWxlciBzdWNoIGFzIGFkZGluZwogICAqIGJpbmRpbmcgaW5mb3JtYXRpb24gYW5kIGEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHNjb3BlIG9uIHRvIERPTSBlbGVtZW50cy4KICAgKiBJZiBlbmFibGVkLCB0aGUgY29tcGlsZXIgd2lsbCBhZGQgdGhlIGZvbGxvd2luZyB0byBET00gZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gYm91bmQgdG8gdGhlIHNjb3BlCiAgICogKiBgbmctYmluZGluZ2AgQ1NTIGNsYXNzCiAgICogKiBgJGJpbmRpbmdgIGRhdGEgcHJvcGVydHkgY29udGFpbmluZyBhbiBhcnJheSBvZiB0aGUgYmluZGluZyBleHByZXNzaW9ucwogICAqCiAgICogWW91IG1heSB3YW50IHRvIHVzZSB0aGlzIGluIHByb2R1Y3Rpb24gZm9yIGEgc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgYm9vc3QuIFNlZQogICAqIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERpc2FibGluZyBEZWJ1ZyBEYXRhfSBmb3IgbW9yZS4KICAgKgogICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuCiAgICovCiAgdmFyIGRlYnVnSW5mb0VuYWJsZWQgPSB0cnVlOwogIHRoaXMuZGVidWdJbmZvRW5hYmxlZCA9IGZ1bmN0aW9uKGVuYWJsZWQpIHsKICAgIGlmKGlzRGVmaW5lZChlbmFibGVkKSkgewogICAgICBkZWJ1Z0luZm9FbmFibGVkID0gZW5hYmxlZDsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICByZXR1cm4gZGVidWdJbmZvRW5hYmxlZDsKICB9OwoKICB0aGlzLiRnZXQgPSBbCiAgICAgICAgICAgICckaW5qZWN0b3InLCAnJGludGVycG9sYXRlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJHBhcnNlJywKICAgICAgICAgICAgJyRjb250cm9sbGVyJywgJyRyb290U2NvcGUnLCAnJGRvY3VtZW50JywgJyRzY2UnLCAnJGFuaW1hdGUnLCAnJCRzYW5pdGl6ZVVyaScsCiAgICBmdW5jdGlvbigkaW5qZWN0b3IsICAgJGludGVycG9sYXRlLCAgICRleGNlcHRpb25IYW5kbGVyLCAgICR0ZW1wbGF0ZVJlcXVlc3QsICAgJHBhcnNlLAogICAgICAgICAgICAgJGNvbnRyb2xsZXIsICAgJHJvb3RTY29wZSwgICAkZG9jdW1lbnQsICAgJHNjZSwgICAkYW5pbWF0ZSwgICAkJHNhbml0aXplVXJpKSB7CgogICAgdmFyIEF0dHJpYnV0ZXMgPSBmdW5jdGlvbihlbGVtZW50LCBhdHRyaWJ1dGVzVG9Db3B5KSB7CiAgICAgIGlmIChhdHRyaWJ1dGVzVG9Db3B5KSB7CiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzVG9Db3B5KTsKICAgICAgICB2YXIgaSwgbCwga2V5OwoKICAgICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgIGtleSA9IGtleXNbaV07CiAgICAgICAgICB0aGlzW2tleV0gPSBhdHRyaWJ1dGVzVG9Db3B5W2tleV07CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJGF0dHIgPSB7fTsKICAgICAgfQoKICAgICAgdGhpcy4kJGVsZW1lbnQgPSBlbGVtZW50OwogICAgfTsKCiAgICBBdHRyaWJ1dGVzLnByb3RvdHlwZSA9IHsKICAgICAgJG5vcm1hbGl6ZTogZGlyZWN0aXZlTm9ybWFsaXplLAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhZGRDbGFzcwogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogQWRkcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIHRvIHRoZSBlbGVtZW50LiBJZiBhbmltYXRpb25zCiAgICAgICAqIGFyZSBlbmFibGVkIHRoZW4gYW4gYW5pbWF0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGZvciB0aGUgY2xhc3MgYWRkaXRpb24uCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudAogICAgICAgKi8KICAgICAgJGFkZENsYXNzIDogZnVuY3Rpb24oY2xhc3NWYWwpIHsKICAgICAgICBpZihjbGFzc1ZhbCAmJiBjbGFzc1ZhbC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgY2xhc3NWYWwpOwogICAgICAgIH0KICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRyZW1vdmVDbGFzcwogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogUmVtb3ZlcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIGZyb20gdGhlIGVsZW1lbnQuIElmCiAgICAgICAqIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgdGhlbiBhbiBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBjbGFzcyByZW1vdmFsLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NWYWwgVGhlIGNsYXNzTmFtZSB2YWx1ZSB0aGF0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50CiAgICAgICAqLwogICAgICAkcmVtb3ZlQ2xhc3MgOiBmdW5jdGlvbihjbGFzc1ZhbCkgewogICAgICAgIGlmKGNsYXNzVmFsICYmIGNsYXNzVmFsLmxlbmd0aCA+IDApIHsKICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBjbGFzc1ZhbCk7CiAgICAgICAgfQogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHVwZGF0ZUNsYXNzCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBBZGRzIGFuZCByZW1vdmVzIHRoZSBhcHByb3ByaWF0ZSBDU1MgY2xhc3MgdmFsdWVzIHRvIHRoZSBlbGVtZW50IGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlCiAgICAgICAqIGJldHdlZW4gdGhlIG5ldyBhbmQgb2xkIENTUyBjbGFzcyB2YWx1ZXMgKHNwZWNpZmllZCBhcyBuZXdDbGFzc2VzIGFuZCBvbGRDbGFzc2VzKS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0NsYXNzZXMgVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSB2YWx1ZQogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkQ2xhc3NlcyBUaGUgZm9ybWVyIENTUyBjbGFzc05hbWUgdmFsdWUKICAgICAgICovCiAgICAgICR1cGRhdGVDbGFzcyA6IGZ1bmN0aW9uKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpIHsKICAgICAgICB2YXIgdG9BZGQgPSB0b2tlbkRpZmZlcmVuY2UobmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcyk7CiAgICAgICAgaWYgKHRvQWRkICYmIHRvQWRkLmxlbmd0aCkgewogICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvQWRkKTsKICAgICAgICB9CgogICAgICAgIHZhciB0b1JlbW92ZSA9IHRva2VuRGlmZmVyZW5jZShvbGRDbGFzc2VzLCBuZXdDbGFzc2VzKTsKICAgICAgICBpZiAodG9SZW1vdmUgJiYgdG9SZW1vdmUubGVuZ3RoKSB7CiAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgdG9SZW1vdmUpOwogICAgICAgIH0KICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBTZXQgYSBub3JtYWxpemVkIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpbiBhIHdheSBzdWNoIHRoYXQgYWxsIGRpcmVjdGl2ZXMKICAgICAgICogY2FuIHNoYXJlIHRoZSBhdHRyaWJ1dGUuIFRoaXMgZnVuY3Rpb24gcHJvcGVybHkgaGFuZGxlcyBib29sZWFuIGF0dHJpYnV0ZXMuCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTm9ybWFsaXplZCBrZXkuIChpZSBuZ0F0dHJpYnV0ZSkKICAgICAgICogQHBhcmFtIHtzdHJpbmd8Ym9vbGVhbn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4gSWYgYG51bGxgIGF0dHJpYnV0ZSB3aWxsIGJlIGRlbGV0ZWQuCiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHdyaXRlQXR0ciBJZiBmYWxzZSwgZG9lcyBub3Qgd3JpdGUgdGhlIHZhbHVlIHRvIERPTSBlbGVtZW50IGF0dHJpYnV0ZS4KICAgICAgICogICAgIERlZmF1bHRzIHRvIHRydWUuCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYXR0ck5hbWUgT3B0aW9uYWwgbm9uZSBub3JtYWxpemVkIG5hbWUuIERlZmF1bHRzIHRvIGtleS4KICAgICAgICovCiAgICAgICRzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHdyaXRlQXR0ciwgYXR0ck5hbWUpIHsKICAgICAgICAvLyBUT0RPOiBkZWNpZGUgd2hldGhlciBvciBub3QgdG8gdGhyb3cgYW4gZXJyb3IgaWYgImNsYXNzIgogICAgICAgIC8vaXMgc2V0IHRocm91Z2ggdGhpcyBmdW5jdGlvbiBzaW5jZSBpdCBtYXkgY2F1c2UgJHVwZGF0ZUNsYXNzIHRvCiAgICAgICAgLy9iZWNvbWUgdW5zdGFibGUuCgogICAgICAgIHZhciBub2RlID0gdGhpcy4kJGVsZW1lbnRbMF0sCiAgICAgICAgICAgIGJvb2xlYW5LZXkgPSBnZXRCb29sZWFuQXR0ck5hbWUobm9kZSwga2V5KSwKICAgICAgICAgICAgYWxpYXNlZEtleSA9IGdldEFsaWFzZWRBdHRyTmFtZShub2RlLCBrZXkpLAogICAgICAgICAgICBvYnNlcnZlciA9IGtleSwKICAgICAgICAgICAgbm9ybWFsaXplZFZhbCwKICAgICAgICAgICAgbm9kZU5hbWU7CgogICAgICAgIGlmIChib29sZWFuS2V5KSB7CiAgICAgICAgICB0aGlzLiQkZWxlbWVudC5wcm9wKGtleSwgdmFsdWUpOwogICAgICAgICAgYXR0ck5hbWUgPSBib29sZWFuS2V5OwogICAgICAgIH0gZWxzZSBpZihhbGlhc2VkS2V5KSB7CiAgICAgICAgICB0aGlzW2FsaWFzZWRLZXldID0gdmFsdWU7CiAgICAgICAgICBvYnNlcnZlciA9IGFsaWFzZWRLZXk7CiAgICAgICAgfQoKICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTsKCiAgICAgICAgLy8gdHJhbnNsYXRlIG5vcm1hbGl6ZWQga2V5IHRvIGFjdHVhbCBrZXkKICAgICAgICBpZiAoYXR0ck5hbWUpIHsKICAgICAgICAgIHRoaXMuJGF0dHJba2V5XSA9IGF0dHJOYW1lOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhdHRyTmFtZSA9IHRoaXMuJGF0dHJba2V5XTsKICAgICAgICAgIGlmICghYXR0ck5hbWUpIHsKICAgICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWUgPSBzbmFrZV9jYXNlKGtleSwgJy0nKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG5vZGVOYW1lID0gbm9kZU5hbWVfKHRoaXMuJCRlbGVtZW50KTsKCiAgICAgICAgaWYgKChub2RlTmFtZSA9PT0gJ2EnICYmIGtleSA9PT0gJ2hyZWYnKSB8fAogICAgICAgICAgICAobm9kZU5hbWUgPT09ICdpbWcnICYmIGtleSA9PT0gJ3NyYycpKSB7CiAgICAgICAgICAvLyBzYW5pdGl6ZSBhW2hyZWZdIGFuZCBpbWdbc3JjXSB2YWx1ZXMKICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlID0gJCRzYW5pdGl6ZVVyaSh2YWx1ZSwga2V5ID09PSAnc3JjJyk7CiAgICAgICAgfSBlbHNlIGlmIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3Jjc2V0JykgewogICAgICAgICAgLy8gc2FuaXRpemUgaW1nW3NyY3NldF0gdmFsdWVzCiAgICAgICAgICB2YXIgcmVzdWx0ID0gIiI7CgogICAgICAgICAgLy8gZmlyc3QgY2hlY2sgaWYgdGhlcmUgYXJlIHNwYWNlcyBiZWNhdXNlIGl0J3Mgbm90IHRoZSBzYW1lIHBhdHRlcm4KICAgICAgICAgIHZhciB0cmltbWVkU3Jjc2V0ID0gdHJpbSh2YWx1ZSk7CiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAoICAgOTk5eCAgICx8ICAgOTk5dyAgICx8ICAgLHwsICAgKQogICAgICAgICAgdmFyIHNyY1BhdHRlcm4gPSAvKFxzK1xkK3hccyosfFxzK1xkK3dccyosfFxzKyx8LFxzKykvOwogICAgICAgICAgdmFyIHBhdHRlcm4gPSAvXHMvLnRlc3QodHJpbW1lZFNyY3NldCkgPyBzcmNQYXR0ZXJuIDogLygsKS87CgogICAgICAgICAgLy8gc3BsaXQgc3Jjc2V0IGludG8gdHVwbGUgb2YgdXJpIGFuZCBkZXNjcmlwdG9yIGV4Y2VwdCBmb3IgdGhlIGxhc3QgaXRlbQogICAgICAgICAgdmFyIHJhd1VyaXMgPSB0cmltbWVkU3Jjc2V0LnNwbGl0KHBhdHRlcm4pOwoKICAgICAgICAgIC8vIGZvciBlYWNoIHR1cGxlcwogICAgICAgICAgdmFyIG5iclVyaXNXaXRoMnBhcnRzID0gTWF0aC5mbG9vcihyYXdVcmlzLmxlbmd0aCAvIDIpOwogICAgICAgICAgZm9yICh2YXIgaT0wOyBpPG5iclVyaXNXaXRoMnBhcnRzOyBpKyspIHsKICAgICAgICAgICAgdmFyIGlubmVySWR4ID0gaSoyOwogICAgICAgICAgICAvLyBzYW5pdGl6ZSB0aGUgdXJpCiAgICAgICAgICAgIHJlc3VsdCArPSAkJHNhbml0aXplVXJpKHRyaW0oIHJhd1VyaXNbaW5uZXJJZHhdKSwgdHJ1ZSk7CiAgICAgICAgICAgIC8vIGFkZCB0aGUgZGVzY3JpcHRvcgogICAgICAgICAgICByZXN1bHQgKz0gKCAiICIgKyB0cmltKHJhd1VyaXNbaW5uZXJJZHgrMV0pKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBzcGxpdCB0aGUgbGFzdCBpdGVtIGludG8gdXJpIGFuZCBkZXNjcmlwdG9yCiAgICAgICAgICB2YXIgbGFzdFR1cGxlID0gdHJpbShyYXdVcmlzW2kqMl0pLnNwbGl0KC9ccy8pOwoKICAgICAgICAgIC8vIHNhbml0aXplIHRoZSBsYXN0IHVyaQogICAgICAgICAgcmVzdWx0ICs9ICQkc2FuaXRpemVVcmkodHJpbShsYXN0VHVwbGVbMF0pLCB0cnVlKTsKCiAgICAgICAgICAvLyBhbmQgYWRkIHRoZSBsYXN0IGRlc2NyaXB0b3IgaWYgYW55CiAgICAgICAgICBpZiggbGFzdFR1cGxlLmxlbmd0aCA9PT0gMikgewogICAgICAgICAgICByZXN1bHQgKz0gKCIgIiArIHRyaW0obGFzdFR1cGxlWzFdKSk7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9IHJlc3VsdDsKICAgICAgICB9CgogICAgICAgIGlmICh3cml0ZUF0dHIgIT09IGZhbHNlKSB7CiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5yZW1vdmVBdHRyKGF0dHJOYW1lKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LmF0dHIoYXR0ck5hbWUsIHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIGZpcmUgb2JzZXJ2ZXJzCiAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gdGhpcy4kJG9ic2VydmVyczsKICAgICAgICAkJG9ic2VydmVycyAmJiBmb3JFYWNoKCQkb2JzZXJ2ZXJzW29ic2VydmVyXSwgZnVuY3Rpb24oZm4pIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGZuKHZhbHVlKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0sCgoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJG9ic2VydmUKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIE9ic2VydmVzIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUuCiAgICAgICAqCiAgICAgICAqIFRoZSBvYnNlcnZlciBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBkdXJpbmcgdGhlIG5leHQgYCRkaWdlc3RgIGZvbGxvd2luZwogICAgICAgKiBjb21waWxhdGlvbi4gVGhlIG9ic2VydmVyIGlzIHRoZW4gaW52b2tlZCB3aGVuZXZlciB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlCiAgICAgICAqIGNoYW5nZXMuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTm9ybWFsaXplZCBrZXkuIChpZSBuZ0F0dHJpYnV0ZSkgLgogICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGludGVycG9sYXRlZFZhbHVlKX0gZm4gRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlcgogICAgICAgICAgICAgICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIGNoYW5nZXMuCiAgICAgICAqICAgICAgICBTZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUjdGV4dC1hbmQtYXR0cmlidXRlLWJpbmRpbmdzIERpcmVjdGl2ZXN9IGd1aWRlIGZvciBtb3JlIGluZm8uCiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgb2JzZXJ2ZXIuCiAgICAgICAqLwogICAgICAkb2JzZXJ2ZTogZnVuY3Rpb24oa2V5LCBmbikgewogICAgICAgIHZhciBhdHRycyA9IHRoaXMsCiAgICAgICAgICAgICQkb2JzZXJ2ZXJzID0gKGF0dHJzLiQkb2JzZXJ2ZXJzIHx8IChhdHRycy4kJG9ic2VydmVycyA9IGNyZWF0ZU1hcCgpKSksCiAgICAgICAgICAgIGxpc3RlbmVycyA9ICgkJG9ic2VydmVyc1trZXldIHx8ICgkJG9ic2VydmVyc1trZXldID0gW10pKTsKCiAgICAgICAgbGlzdGVuZXJzLnB1c2goZm4pOwogICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHsKICAgICAgICAgIGlmICghbGlzdGVuZXJzLiQkaW50ZXIpIHsKICAgICAgICAgICAgLy8gbm8gb25lIHJlZ2lzdGVyZWQgYXR0cmlidXRlIGludGVycG9sYXRpb24gZnVuY3Rpb24sIHNvIGxldHMgY2FsbCBpdCBtYW51YWxseQogICAgICAgICAgICBmbihhdHRyc1trZXldKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJzLCBmbik7CiAgICAgICAgfTsKICAgICAgfQogICAgfTsKCgogICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHsKICAgICAgdHJ5IHsKICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhjbGFzc05hbWUpOwogICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAvLyBpZ25vcmUsIHNpbmNlIGl0IG1lYW5zIHRoYXQgd2UgYXJlIHRyeWluZyB0byBzZXQgY2xhc3Mgb24KICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuCiAgICAgIH0KICAgIH0KCgogICAgdmFyIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksCiAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLAogICAgICAgIGRlbm9ybWFsaXplVGVtcGxhdGUgPSAoc3RhcnRTeW1ib2wgPT0gJ3t7JyB8fCBlbmRTeW1ib2wgID09ICd9fScpCiAgICAgICAgICAgID8gaWRlbnRpdHkKICAgICAgICAgICAgOiBmdW5jdGlvbiBkZW5vcm1hbGl6ZVRlbXBsYXRlKHRlbXBsYXRlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL1x7XHsvZywgc3RhcnRTeW1ib2wpLnJlcGxhY2UoL319L2csIGVuZFN5bWJvbCk7CiAgICAgICAgfSwKICAgICAgICBOR19BVFRSX0JJTkRJTkcgPSAvXm5nQXR0cltBLVpdLzsKCiAgICBjb21waWxlLiQkYWRkQmluZGluZ0luZm8gPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRCaW5kaW5nSW5mbygkZWxlbWVudCwgYmluZGluZykgewogICAgICB2YXIgYmluZGluZ3MgPSAkZWxlbWVudC5kYXRhKCckYmluZGluZycpIHx8IFtdOwoKICAgICAgaWYgKGlzQXJyYXkoYmluZGluZykpIHsKICAgICAgICBiaW5kaW5ncyA9IGJpbmRpbmdzLmNvbmNhdChiaW5kaW5nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBiaW5kaW5ncy5wdXNoKGJpbmRpbmcpOwogICAgICB9CgogICAgICAkZWxlbWVudC5kYXRhKCckYmluZGluZycsIGJpbmRpbmdzKTsKICAgIH0gOiBub29wOwoKICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MgPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRCaW5kaW5nQ2xhc3MoJGVsZW1lbnQpIHsKICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCAnbmctYmluZGluZycpOwogICAgfSA6IG5vb3A7CgogICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlSW5mbygkZWxlbWVudCwgc2NvcGUsIGlzb2xhdGVkLCBub1RlbXBsYXRlKSB7CiAgICAgIHZhciBkYXRhTmFtZSA9IGlzb2xhdGVkID8gKG5vVGVtcGxhdGUgPyAnJGlzb2xhdGVTY29wZU5vVGVtcGxhdGUnIDogJyRpc29sYXRlU2NvcGUnKSA6ICckc2NvcGUnOwogICAgICAkZWxlbWVudC5kYXRhKGRhdGFOYW1lLCBzY29wZSk7CiAgICB9IDogbm9vcDsKCiAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIGlzb2xhdGVkKSB7CiAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgaXNvbGF0ZWQgPyAnbmctaXNvbGF0ZS1zY29wZScgOiAnbmctc2NvcGUnKTsKICAgIH0gOiBub29wOwoKICAgIHJldHVybiBjb21waWxlOwoKICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCiAgICBmdW5jdGlvbiBjb21waWxlKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwKICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkgewogICAgICBpZiAoISgkY29tcGlsZU5vZGVzIGluc3RhbmNlb2YganFMaXRlKSkgewogICAgICAgIC8vIGpxdWVyeSBhbHdheXMgcmV3cmFwcywgd2hlcmVhcyB3ZSBuZWVkIHRvIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzZWxlY3RvciBzbyB0aGF0IHdlIGNhbgogICAgICAgIC8vIG1vZGlmeSBpdC4KICAgICAgICAkY29tcGlsZU5vZGVzID0ganFMaXRlKCRjb21waWxlTm9kZXMpOwogICAgICB9CiAgICAgIC8vIFdlIGNhbiBub3QgY29tcGlsZSB0b3AgbGV2ZWwgdGV4dCBlbGVtZW50cyBzaW5jZSB0ZXh0IG5vZGVzIGNhbiBiZSBtZXJnZWQgYW5kIHdlIHdpbGwKICAgICAgLy8gbm90IGJlIGFibGUgdG8gYXR0YWNoIHNjb3BlIGRhdGEgdG8gdGhlbSwgc28gd2Ugd2lsbCB3cmFwIHRoZW0gaW4gPHNwYW4+CiAgICAgIGZvckVhY2goJGNvbXBpbGVOb2RlcywgZnVuY3Rpb24obm9kZSwgaW5kZXgpewogICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IE5PREVfVFlQRV9URVhUICYmIG5vZGUubm9kZVZhbHVlLm1hdGNoKC9cUysvKSAvKiBub24tZW1wdHkgKi8gKSB7CiAgICAgICAgICAkY29tcGlsZU5vZGVzW2luZGV4XSA9IGpxTGl0ZShub2RlKS53cmFwKCc8c3Bhbj48L3NwYW4+JykucGFyZW50KClbMF07CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdmFyIGNvbXBvc2l0ZUxpbmtGbiA9CiAgICAgICAgICAgICAgY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgJGNvbXBpbGVOb2RlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7CiAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzKCRjb21waWxlTm9kZXMpOwogICAgICB2YXIgbmFtZXNwYWNlID0gbnVsbDsKICAgICAgcmV0dXJuIGZ1bmN0aW9uIHB1YmxpY0xpbmtGbihzY29wZSwgY2xvbmVDb25uZWN0Rm4sIHRyYW5zY2x1ZGVDb250cm9sbGVycywgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpewogICAgICAgIGFzc2VydEFyZyhzY29wZSwgJ3Njb3BlJyk7CiAgICAgICAgaWYgKCFuYW1lc3BhY2UpIHsKICAgICAgICAgIG5hbWVzcGFjZSA9IGRldGVjdE5hbWVzcGFjZUZvckNoaWxkRWxlbWVudHMoZnV0dXJlUGFyZW50RWxlbWVudCk7CiAgICAgICAgfQogICAgICAgIHZhciAkbGlua05vZGU7CiAgICAgICAgaWYgKG5hbWVzcGFjZSAhPT0gJ2h0bWwnKSB7CiAgICAgICAgICAvLyBXaGVuIHVzaW5nIGEgZGlyZWN0aXZlIHdpdGggcmVwbGFjZTp0cnVlIGFuZCB0ZW1wbGF0ZVVybCB0aGUgJGNvbXBpbGVOb2RlcwogICAgICAgICAgLy8gKG9yIGEgY2hpbGQgZWxlbWVudCBpbnNpZGUgb2YgdGhlbSkKICAgICAgICAgIC8vIG1pZ2h0IGNoYW5nZSwgc28gd2UgbmVlZCB0byByZWNyZWF0ZSB0aGUgbmFtZXNwYWNlIGFkYXB0ZWQgY29tcGlsZU5vZGVzCiAgICAgICAgICAvLyBmb3IgY2FsbCB0byB0aGUgbGluayBmdW5jdGlvbi4KICAgICAgICAgIC8vIE5vdGU6IFRoaXMgd2lsbCBhbHJlYWR5IGNsb25lIHRoZSBub2Rlcy4uLgogICAgICAgICAgJGxpbmtOb2RlID0ganFMaXRlKAogICAgICAgICAgICB3cmFwVGVtcGxhdGUobmFtZXNwYWNlLCBqcUxpdGUoJzxkaXY+JykuYXBwZW5kKCRjb21waWxlTm9kZXMpLmh0bWwoKSkKICAgICAgICAgICk7CiAgICAgICAgfSBlbHNlIGlmIChjbG9uZUNvbm5lY3RGbikgewogICAgICAgICAgLy8gaW1wb3J0YW50ISE6IHdlIG11c3QgY2FsbCBvdXIganFMaXRlLmNsb25lKCkgc2luY2UgdGhlIGpRdWVyeSBvbmUgaXMgdHJ5aW5nIHRvIGJlIHNtYXJ0CiAgICAgICAgICAvLyBhbmQgc29tZXRpbWVzIGNoYW5nZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgRE9NLgogICAgICAgICAgJGxpbmtOb2RlID0gSlFMaXRlUHJvdG90eXBlLmNsb25lLmNhbGwoJGNvbXBpbGVOb2Rlcyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICRsaW5rTm9kZSA9ICRjb21waWxlTm9kZXM7CiAgICAgICAgfQoKICAgICAgICBpZiAodHJhbnNjbHVkZUNvbnRyb2xsZXJzKSB7CiAgICAgICAgICBmb3IgKHZhciBjb250cm9sbGVyTmFtZSBpbiB0cmFuc2NsdWRlQ29udHJvbGxlcnMpIHsKICAgICAgICAgICAgJGxpbmtOb2RlLmRhdGEoJyQnICsgY29udHJvbGxlck5hbWUgKyAnQ29udHJvbGxlcicsIHRyYW5zY2x1ZGVDb250cm9sbGVyc1tjb250cm9sbGVyTmFtZV0uaW5zdGFuY2UpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbygkbGlua05vZGUsIHNjb3BlKTsKCiAgICAgICAgaWYgKGNsb25lQ29ubmVjdEZuKSBjbG9uZUNvbm5lY3RGbigkbGlua05vZGUsIHNjb3BlKTsKICAgICAgICBpZiAoY29tcG9zaXRlTGlua0ZuKSBjb21wb3NpdGVMaW5rRm4oc2NvcGUsICRsaW5rTm9kZSwgJGxpbmtOb2RlLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbik7CiAgICAgICAgcmV0dXJuICRsaW5rTm9kZTsKICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzKHBhcmVudEVsZW1lbnQpIHsKICAgICAgLy8gVE9ETzogTWFrZSB0aGlzIGRldGVjdCBNYXRoTUwgYXMgd2VsbC4uLgogICAgICB2YXIgbm9kZSA9IHBhcmVudEVsZW1lbnQgJiYgcGFyZW50RWxlbWVudFswXTsKICAgICAgaWYgKCFub2RlKSB7CiAgICAgICAgcmV0dXJuICdodG1sJzsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbm9kZU5hbWVfKG5vZGUpICE9PSAnZm9yZWlnbm9iamVjdCcgJiYgbm9kZS50b1N0cmluZygpLm1hdGNoKC9TVkcvKSA/ICdzdmcnOiAnaHRtbCc7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIENvbXBpbGUgZnVuY3Rpb24gbWF0Y2hlcyBlYWNoIG5vZGUgaW4gbm9kZUxpc3QgYWdhaW5zdCB0aGUgZGlyZWN0aXZlcy4gT25jZSBhbGwgZGlyZWN0aXZlcwogICAgICogZm9yIGEgcGFydGljdWxhciBub2RlIGFyZSBjb2xsZWN0ZWQgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGUgY29tcGlsZQogICAgICogZnVuY3Rpb25zIHJldHVybiB2YWx1ZXMgLSB0aGUgbGlua2luZyBmdW5jdGlvbnMgLSBhcmUgY29tYmluZWQgaW50byBhIGNvbXBvc2l0ZSBsaW5raW5nCiAgICAgKiBmdW5jdGlvbiwgd2hpY2ggaXMgdGhlIGEgbGlua2luZyBmdW5jdGlvbiBmb3IgdGhlIG5vZGUuCiAgICAgKgogICAgICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZUxpc3QgYW4gYXJyYXkgb2Ygbm9kZXMgb3IgTm9kZUxpc3QgdG8gY29tcGlsZQogICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZQogICAgICogICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS4KICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19ICRyb290RWxlbWVudCBJZiB0aGUgbm9kZUxpc3QgaXMgdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGF0aW9uIHRyZWUgdGhlbgogICAgICogICAgICAgIHRoZSByb290RWxlbWVudCBtdXN0IGJlIHNldCB0aGUganFMaXRlIGNvbGxlY3Rpb24gb2YgdGhlIGNvbXBpbGUgcm9vdC4gVGhpcyBpcwogICAgICogICAgICAgIG5lZWRlZCBzbyB0aGF0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBpdGVtcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCB3aWRnZXRzLgogICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXhQcmlvcml0eSBNYXggZGlyZWN0aXZlIHByaW9yaXR5LgogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGNvbXBvc2l0ZSBsaW5raW5nIGZ1bmN0aW9uIG9mIGFsbCBvZiB0aGUgbWF0Y2hlZCBkaXJlY3RpdmVzIG9yIG51bGwuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbXBpbGVOb2Rlcyhub2RlTGlzdCwgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7CiAgICAgIHZhciBsaW5rRm5zID0gW10sCiAgICAgICAgICBhdHRycywgZGlyZWN0aXZlcywgbm9kZUxpbmtGbiwgY2hpbGROb2RlcywgY2hpbGRMaW5rRm4sIGxpbmtGbkZvdW5kLCBub2RlTGlua0ZuRm91bmQ7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgYXR0cnMgPSBuZXcgQXR0cmlidXRlcygpOwoKICAgICAgICAvLyB3ZSBtdXN0IGFsd2F5cyByZWZlciB0byBub2RlTGlzdFtpXSBzaW5jZSB0aGUgbm9kZXMgY2FuIGJlIHJlcGxhY2VkIHVuZGVybmVhdGggdXMuCiAgICAgICAgZGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKG5vZGVMaXN0W2ldLCBbXSwgYXR0cnMsIGkgPT09IDAgPyBtYXhQcmlvcml0eSA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZURpcmVjdGl2ZSk7CgogICAgICAgIG5vZGVMaW5rRm4gPSAoZGlyZWN0aXZlcy5sZW5ndGgpCiAgICAgICAgICAgID8gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIG5vZGVMaXN0W2ldLCBhdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgW10sIFtdLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KQogICAgICAgICAgICA6IG51bGw7CgogICAgICAgIGlmIChub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4uc2NvcGUpIHsKICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzKGF0dHJzLiQkZWxlbWVudCk7CiAgICAgICAgfQoKICAgICAgICBjaGlsZExpbmtGbiA9IChub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4udGVybWluYWwgfHwKICAgICAgICAgICAgICAgICAgICAgICEoY2hpbGROb2RlcyA9IG5vZGVMaXN0W2ldLmNoaWxkTm9kZXMpIHx8CiAgICAgICAgICAgICAgICAgICAgICAhY2hpbGROb2Rlcy5sZW5ndGgpCiAgICAgICAgICAgID8gbnVsbAogICAgICAgICAgICA6IGNvbXBpbGVOb2RlcyhjaGlsZE5vZGVzLAogICAgICAgICAgICAgICAgIG5vZGVMaW5rRm4gPyAoCiAgICAgICAgICAgICAgICAgIChub2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50IHx8ICFub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudCkKICAgICAgICAgICAgICAgICAgICAgJiYgbm9kZUxpbmtGbi50cmFuc2NsdWRlKSA6IHRyYW5zY2x1ZGVGbik7CgogICAgICAgIGlmIChub2RlTGlua0ZuIHx8IGNoaWxkTGlua0ZuKSB7CiAgICAgICAgICBsaW5rRm5zLnB1c2goaSwgbm9kZUxpbmtGbiwgY2hpbGRMaW5rRm4pOwogICAgICAgICAgbGlua0ZuRm91bmQgPSB0cnVlOwogICAgICAgICAgbm9kZUxpbmtGbkZvdW5kID0gbm9kZUxpbmtGbkZvdW5kIHx8IG5vZGVMaW5rRm47CiAgICAgICAgfQoKICAgICAgICAvL3VzZSB0aGUgcHJldmlvdXMgY29udGV4dCBvbmx5IGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgdmlydHVhbCBncm91cAogICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBudWxsOwogICAgICB9CgogICAgICAvLyByZXR1cm4gYSBsaW5raW5nIGZ1bmN0aW9uIGlmIHdlIGhhdmUgZm91bmQgYW55dGhpbmcsIG51bGwgb3RoZXJ3aXNlCiAgICAgIHJldHVybiBsaW5rRm5Gb3VuZCA/IGNvbXBvc2l0ZUxpbmtGbiA6IG51bGw7CgogICAgICBmdW5jdGlvbiBjb21wb3NpdGVMaW5rRm4oc2NvcGUsIG5vZGVMaXN0LCAkcm9vdEVsZW1lbnQsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKSB7CiAgICAgICAgdmFyIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuLCBub2RlLCBjaGlsZFNjb3BlLCBpLCBpaSwgaWR4LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuOwogICAgICAgIHZhciBzdGFibGVOb2RlTGlzdDsKCgogICAgICAgIGlmIChub2RlTGlua0ZuRm91bmQpIHsKICAgICAgICAgIC8vIGNvcHkgbm9kZUxpc3Qgc28gdGhhdCBpZiBhIG5vZGVMaW5rRm4gcmVtb3ZlcyBvciBhZGRzIGFuIGVsZW1lbnQgYXQgdGhpcyBET00gbGV2ZWwgb3VyCiAgICAgICAgICAvLyBvZmZzZXRzIGRvbid0IGdldCBzY3Jld2VkIHVwCiAgICAgICAgICB2YXIgbm9kZUxpc3RMZW5ndGggPSBub2RlTGlzdC5sZW5ndGg7CiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5ldyBBcnJheShub2RlTGlzdExlbmd0aCk7CgogICAgICAgICAgLy8gY3JlYXRlIGEgc3BhcnNlIGFycmF5IGJ5IG9ubHkgY29weWluZyB0aGUgZWxlbWVudHMgd2hpY2ggaGF2ZSBhIGxpbmtGbgogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpbmtGbnMubGVuZ3RoOyBpKz0zKSB7CiAgICAgICAgICAgIGlkeCA9IGxpbmtGbnNbaV07CiAgICAgICAgICAgIHN0YWJsZU5vZGVMaXN0W2lkeF0gPSBub2RlTGlzdFtpZHhdOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5vZGVMaXN0OwogICAgICAgIH0KCiAgICAgICAgZm9yKGkgPSAwLCBpaSA9IGxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7KSB7CiAgICAgICAgICBub2RlID0gc3RhYmxlTm9kZUxpc3RbbGlua0Zuc1tpKytdXTsKICAgICAgICAgIG5vZGVMaW5rRm4gPSBsaW5rRm5zW2krK107CiAgICAgICAgICBjaGlsZExpbmtGbiA9IGxpbmtGbnNbaSsrXTsKCiAgICAgICAgICBpZiAobm9kZUxpbmtGbikgewogICAgICAgICAgICBpZiAobm9kZUxpbmtGbi5zY29wZSkgewogICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZS4kbmV3KCk7CiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyhqcUxpdGUobm9kZSksIGNoaWxkU2NvcGUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBzY29wZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCBub2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50ICkgewogICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbigKICAgICAgICAgICAgICAgICAgc2NvcGUsIG5vZGVMaW5rRm4udHJhbnNjbHVkZSwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4sCiAgICAgICAgICAgICAgICAgIG5vZGVMaW5rRm4uZWxlbWVudFRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KTsKCiAgICAgICAgICAgIH0gZWxzZSBpZiAoIW5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50ICYmIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKSB7CiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuOwoKICAgICAgICAgICAgfSBlbHNlIGlmICghcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gJiYgdHJhbnNjbHVkZUZuKSB7CiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4pOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gbnVsbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgY2hpbGRTY29wZSwgbm9kZSwgJHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTsKCiAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkTGlua0ZuKSB7CiAgICAgICAgICAgIGNoaWxkTGlua0ZuKHNjb3BlLCBub2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4sIHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4sIGVsZW1lbnRUcmFuc2NsdXNpb24pIHsKCiAgICAgIHZhciBib3VuZFRyYW5zY2x1ZGVGbiA9IGZ1bmN0aW9uKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIGNvbnRyb2xsZXJzLCBmdXR1cmVQYXJlbnRFbGVtZW50LCBjb250YWluaW5nU2NvcGUpIHsKCiAgICAgICAgaWYgKCF0cmFuc2NsdWRlZFNjb3BlKSB7CiAgICAgICAgICB0cmFuc2NsdWRlZFNjb3BlID0gc2NvcGUuJG5ldyhmYWxzZSwgY29udGFpbmluZ1Njb3BlKTsKICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIGNvbnRyb2xsZXJzLCBwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KTsKICAgICAgfTsKCiAgICAgIHJldHVybiBib3VuZFRyYW5zY2x1ZGVGbjsKICAgIH0KCiAgICAvKioKICAgICAqIExvb2tzIGZvciBkaXJlY3RpdmVzIG9uIHRoZSBnaXZlbiBub2RlIGFuZCBhZGRzIHRoZW0gdG8gdGhlIGRpcmVjdGl2ZSBjb2xsZWN0aW9uIHdoaWNoIGlzCiAgICAgKiBzb3J0ZWQuCiAgICAgKgogICAgICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guCiAgICAgKiBAcGFyYW0gZGlyZWN0aXZlcyBBbiBhcnJheSB0byB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYWRkZWQgdG8uIFRoaXMgYXJyYXkgaXMgc29ydGVkIGJlZm9yZQogICAgICogICAgICAgIHRoZSBmdW5jdGlvbiByZXR1cm5zLgogICAgICogQHBhcmFtIGF0dHJzIFRoZSBzaGFyZWQgYXR0cnMgb2JqZWN0IHdoaWNoIGlzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIG5vcm1hbGl6ZWQgYXR0cmlidXRlcy4KICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS4KICAgICAqLwogICAgZnVuY3Rpb24gY29sbGVjdERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpIHsKICAgICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZSwKICAgICAgICAgIGF0dHJzTWFwID0gYXR0cnMuJGF0dHIsCiAgICAgICAgICBtYXRjaCwKICAgICAgICAgIGNsYXNzTmFtZTsKCiAgICAgIHN3aXRjaChub2RlVHlwZSkgewogICAgICAgIGNhc2UgTk9ERV9UWVBFX0VMRU1FTlQ6IC8qIEVsZW1lbnQgKi8KICAgICAgICAgIC8vIHVzZSB0aGUgbm9kZSBuYW1lOiA8ZGlyZWN0aXZlPgogICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsCiAgICAgICAgICAgICAgZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lXyhub2RlKSksICdFJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSk7CgogICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBhdHRyaWJ1dGVzCiAgICAgICAgICBmb3IgKHZhciBhdHRyLCBuYW1lLCBuTmFtZSwgbmdBdHRyTmFtZSwgdmFsdWUsIGlzTmdBdHRyLCBuQXR0cnMgPSBub2RlLmF0dHJpYnV0ZXMsCiAgICAgICAgICAgICAgICAgICBqID0gMCwgamogPSBuQXR0cnMgJiYgbkF0dHJzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHsKICAgICAgICAgICAgdmFyIGF0dHJTdGFydE5hbWUgPSBmYWxzZTsKICAgICAgICAgICAgdmFyIGF0dHJFbmROYW1lID0gZmFsc2U7CgogICAgICAgICAgICBhdHRyID0gbkF0dHJzW2pdOwogICAgICAgICAgICBuYW1lID0gYXR0ci5uYW1lOwogICAgICAgICAgICB2YWx1ZSA9IHRyaW0oYXR0ci52YWx1ZSk7CgogICAgICAgICAgICAvLyBzdXBwb3J0IG5nQXR0ciBhdHRyaWJ1dGUgYmluZGluZwogICAgICAgICAgICBuZ0F0dHJOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpOwogICAgICAgICAgICBpZiAoaXNOZ0F0dHIgPSBOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKSkgewogICAgICAgICAgICAgIG5hbWUgPSBzbmFrZV9jYXNlKG5nQXR0ck5hbWUuc3Vic3RyKDYpLCAnLScpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgZGlyZWN0aXZlTk5hbWUgPSBuZ0F0dHJOYW1lLnJlcGxhY2UoLyhTdGFydHxFbmQpJC8sICcnKTsKICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KGRpcmVjdGl2ZU5OYW1lKSkgewogICAgICAgICAgICAgIGlmIChuZ0F0dHJOYW1lID09PSBkaXJlY3RpdmVOTmFtZSArICdTdGFydCcpIHsKICAgICAgICAgICAgICAgIGF0dHJTdGFydE5hbWUgPSBuYW1lOwogICAgICAgICAgICAgICAgYXR0ckVuZE5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDUpICsgJ2VuZCc7CiAgICAgICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMCwgbmFtZS5sZW5ndGggLSA2KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUudG9Mb3dlckNhc2UoKSk7CiAgICAgICAgICAgIGF0dHJzTWFwW25OYW1lXSA9IG5hbWU7CiAgICAgICAgICAgIGlmIChpc05nQXR0ciB8fCAhYXR0cnMuaGFzT3duUHJvcGVydHkobk5hbWUpKSB7CiAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgIGlmIChnZXRCb29sZWFuQXR0ck5hbWUobm9kZSwgbk5hbWUpKSB7CiAgICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRydWU7IC8vIHByZXNlbmNlIG1lYW5zIHRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5OYW1lLCBpc05nQXR0cik7CiAgICAgICAgICAgIGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ0EnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBhdHRyU3RhcnROYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJFbmROYW1lKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyB1c2UgY2xhc3MgYXMgZGlyZWN0aXZlCiAgICAgICAgICBjbGFzc05hbWUgPSBub2RlLmNsYXNzTmFtZTsKICAgICAgICAgIGlmIChpc1N0cmluZyhjbGFzc05hbWUpICYmIGNsYXNzTmFtZSAhPT0gJycpIHsKICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gQ0xBU1NfRElSRUNUSVZFX1JFR0VYUC5leGVjKGNsYXNzTmFtZSkpIHsKICAgICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShtYXRjaFsyXSk7CiAgICAgICAgICAgICAgaWYgKGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ0MnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSkgewogICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFszXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zdWJzdHIobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIE5PREVfVFlQRV9URVhUOiAvKiBUZXh0IE5vZGUgKi8KICAgICAgICAgIGFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZShkaXJlY3RpdmVzLCBub2RlLm5vZGVWYWx1ZSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIE5PREVfVFlQRV9DT01NRU5UOiAvKiBDb21tZW50ICovCiAgICAgICAgICB0cnkgewogICAgICAgICAgICBtYXRjaCA9IENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUC5leGVjKG5vZGUubm9kZVZhbHVlKTsKICAgICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMV0pOwogICAgICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdNJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHsKICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbMl0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAvLyB0dXJucyBvdXQgdGhhdCB1bmRlciBzb21lIGNpcmN1bXN0YW5jZXMgSUU5IHRocm93cyBlcnJvcnMgd2hlbiBvbmUgYXR0ZW1wdHMgdG8gcmVhZAogICAgICAgICAgICAvLyBjb21tZW50J3Mgbm9kZSB2YWx1ZS4KICAgICAgICAgICAgLy8gSnVzdCBpZ25vcmUgaXQgYW5kIGNvbnRpbnVlLiAoQ2FuJ3Qgc2VlbSB0byByZXByb2R1Y2UgaW4gdGVzdCBjYXNlLikKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBkaXJlY3RpdmVzLnNvcnQoYnlQcmlvcml0eSk7CiAgICAgIHJldHVybiBkaXJlY3RpdmVzOwogICAgfQoKICAgIC8qKgogICAgICogR2l2ZW4gYSBub2RlIHdpdGggYW4gZGlyZWN0aXZlLXN0YXJ0IGl0IGNvbGxlY3RzIGFsbCBvZiB0aGUgc2libGluZ3MgdW50aWwgaXQgZmluZHMKICAgICAqIGRpcmVjdGl2ZS1lbmQuCiAgICAgKiBAcGFyYW0gbm9kZQogICAgICogQHBhcmFtIGF0dHJTdGFydAogICAgICogQHBhcmFtIGF0dHJFbmQKICAgICAqIEByZXR1cm5zIHsqfQogICAgICovCiAgICBmdW5jdGlvbiBncm91cFNjYW4obm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7CiAgICAgIHZhciBub2RlcyA9IFtdOwogICAgICB2YXIgZGVwdGggPSAwOwogICAgICBpZiAoYXR0clN0YXJ0ICYmIG5vZGUuaGFzQXR0cmlidXRlICYmIG5vZGUuaGFzQXR0cmlidXRlKGF0dHJTdGFydCkpIHsKICAgICAgICB2YXIgc3RhcnROb2RlID0gbm9kZTsKICAgICAgICBkbyB7CiAgICAgICAgICBpZiAoIW5vZGUpIHsKICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3V0ZXJkaXInLAogICAgICAgICAgICAgICAgICAgICAgIlVudGVybWluYXRlZCBhdHRyaWJ1dGUsIGZvdW5kICd7MH0nIGJ1dCBubyBtYXRjaGluZyAnezF9JyBmb3VuZC4iLAogICAgICAgICAgICAgICAgICAgICAgYXR0clN0YXJ0LCBhdHRyRW5kKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IE5PREVfVFlQRV9FTEVNRU5UKSB7CiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyU3RhcnQpKSBkZXB0aCsrOwogICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0ckVuZCkpIGRlcHRoLS07CiAgICAgICAgICB9CiAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpOwogICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7CiAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBub2Rlcy5wdXNoKG5vZGUpOwogICAgICB9CgogICAgICByZXR1cm4ganFMaXRlKG5vZGVzKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyYXBwZXIgZm9yIGxpbmtpbmcgZnVuY3Rpb24gd2hpY2ggY29udmVydHMgbm9ybWFsIGxpbmtpbmcgZnVuY3Rpb24gaW50byBhIGdyb3VwZWQKICAgICAqIGxpbmtpbmcgZnVuY3Rpb24uCiAgICAgKiBAcGFyYW0gbGlua0ZuCiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0CiAgICAgKiBAcGFyYW0gYXR0ckVuZAogICAgICogQHJldHVybnMge0Z1bmN0aW9ufQogICAgICovCiAgICBmdW5jdGlvbiBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihsaW5rRm4sIGF0dHJTdGFydCwgYXR0ckVuZCkgewogICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7CiAgICAgICAgZWxlbWVudCA9IGdyb3VwU2NhbihlbGVtZW50WzBdLCBhdHRyU3RhcnQsIGF0dHJFbmQpOwogICAgICAgIHJldHVybiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTsKICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIE9uY2UgdGhlIGRpcmVjdGl2ZXMgaGF2ZSBiZWVuIGNvbGxlY3RlZCwgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGlzIG1ldGhvZAogICAgICogaXMgcmVzcG9uc2libGUgZm9yIGlubGluaW5nIGRpcmVjdGl2ZSB0ZW1wbGF0ZXMgYXMgd2VsbCBhcyB0ZXJtaW5hdGluZyB0aGUgYXBwbGljYXRpb24KICAgICAqIG9mIHRoZSBkaXJlY3RpdmVzIGlmIHRoZSB0ZXJtaW5hbCBkaXJlY3RpdmUgaGFzIGJlZW4gcmVhY2hlZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0FycmF5fSBkaXJlY3RpdmVzIEFycmF5IG9mIGNvbGxlY3RlZCBkaXJlY3RpdmVzIHRvIGV4ZWN1dGUgdGhlaXIgY29tcGlsZSBmdW5jdGlvbi4KICAgICAqICAgICAgICB0aGlzIG5lZWRzIHRvIGJlIHByZS1zb3J0ZWQgYnkgcHJpb3JpdHkgb3JkZXIuCiAgICAgKiBAcGFyYW0ge05vZGV9IGNvbXBpbGVOb2RlIFRoZSByYXcgRE9NIG5vZGUgdG8gYXBwbHkgdGhlIGNvbXBpbGUgZnVuY3Rpb25zIHRvCiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVBdHRycyBUaGUgc2hhcmVkIGF0dHJpYnV0ZSBmdW5jdGlvbgogICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCBvZiB0aGUgdHJhbnNjbHVkZWQgcGFyZW50IHNjb3BlLgogICAgICogQHBhcmFtIHtKUUxpdGV9IGpxQ29sbGVjdGlvbiBJZiB3ZSBhcmUgd29ya2luZyBvbiB0aGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlIHRoZW4gdGhpcwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudCBoYXMgdGhlIHJvb3QganFMaXRlIGFycmF5IHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gaXQuCiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSBBbiBvcHRpb25hbCBkaXJlY3RpdmUgdGhhdCB3aWxsIGJlIGlnbm9yZWQgd2hlbgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGlsaW5nIHRoZSB0cmFuc2NsdXNpb24uCiAgICAgKiBAcGFyYW0ge0FycmF5LjxGdW5jdGlvbj59IHByZUxpbmtGbnMKICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcG9zdExpbmtGbnMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IENvbnRleHQgdXNlZCBmb3IgcHJldmlvdXMgY29tcGlsYXRpb24gb2YgdGhlIGN1cnJlbnQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUKICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gbGlua0ZuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgdHJhbnNjbHVkZUZuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpxQ29sbGVjdGlvbiwgb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7CiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IHx8IHt9OwoKICAgICAgdmFyIHRlcm1pbmFsUHJpb3JpdHkgPSAtTnVtYmVyLk1BWF9WQUxVRSwKICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlLAogICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXMgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0LmNvbnRyb2xsZXJEaXJlY3RpdmVzLAogICAgICAgICAgY29udHJvbGxlcnMsCiAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSwKICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC50ZW1wbGF0ZURpcmVjdGl2ZSwKICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsCiAgICAgICAgICBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlID0gZmFsc2UsCiAgICAgICAgICBoYXNUZW1wbGF0ZSA9IGZhbHNlLAogICAgICAgICAgaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlLAogICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPSBqcUxpdGUoY29tcGlsZU5vZGUpLAogICAgICAgICAgZGlyZWN0aXZlLAogICAgICAgICAgZGlyZWN0aXZlTmFtZSwKICAgICAgICAgICR0ZW1wbGF0ZSwKICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgPSBvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUsCiAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGVGbiwKICAgICAgICAgIGxpbmtGbiwKICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlOwoKICAgICAgLy8gZXhlY3V0ZXMgYWxsIGRpcmVjdGl2ZXMgb24gdGhlIGN1cnJlbnQgZWxlbWVudAogICAgICBmb3IodmFyIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07CiAgICAgICAgdmFyIGF0dHJTdGFydCA9IGRpcmVjdGl2ZS4kJHN0YXJ0OwogICAgICAgIHZhciBhdHRyRW5kID0gZGlyZWN0aXZlLiQkZW5kOwoKICAgICAgICAvLyBjb2xsZWN0IG11bHRpYmxvY2sgc2VjdGlvbnMKICAgICAgICBpZiAoYXR0clN0YXJ0KSB7CiAgICAgICAgICAkY29tcGlsZU5vZGUgPSBncm91cFNjYW4oY29tcGlsZU5vZGUsIGF0dHJTdGFydCwgYXR0ckVuZCk7CiAgICAgICAgfQogICAgICAgICR0ZW1wbGF0ZSA9IHVuZGVmaW5lZDsKCiAgICAgICAgaWYgKHRlcm1pbmFsUHJpb3JpdHkgPiBkaXJlY3RpdmUucHJpb3JpdHkpIHsKICAgICAgICAgIGJyZWFrOyAvLyBwcmV2ZW50IGZ1cnRoZXIgcHJvY2Vzc2luZyBvZiBkaXJlY3RpdmVzCiAgICAgICAgfQoKICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUuc2NvcGUpIHsKCiAgICAgICAgICAvLyBza2lwIHRoZSBjaGVjayBmb3IgZGlyZWN0aXZlcyB3aXRoIGFzeW5jIHRlbXBsYXRlcywgd2UnbGwgY2hlY2sgdGhlIGRlcml2ZWQgc3luYwogICAgICAgICAgLy8gZGlyZWN0aXZlIHdoZW4gdGhlIHRlbXBsYXRlIGFycml2ZXMKICAgICAgICAgIGlmICghZGlyZWN0aXZlLnRlbXBsYXRlVXJsKSB7CiAgICAgICAgICAgIGlmIChpc09iamVjdChkaXJlY3RpdmVWYWx1ZSkpIHsKICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGFuIGlzb2xhdGVkIHNjb3BlLgogICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgbm8gc2NvcGUgb2YgYW55IGtpbmQgYWxyZWFkeQogICAgICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCduZXcvaXNvbGF0ZWQgc2NvcGUnLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgbmV3U2NvcGVEaXJlY3RpdmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpOwogICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGEgY2hpbGQgc2NvcGUuCiAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGVyZSBpcyBubyBpc29sYXRlZCBzY29wZSBhbHJlYWR5CiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSwgZGlyZWN0aXZlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21waWxlTm9kZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZSA9IG5ld1Njb3BlRGlyZWN0aXZlIHx8IGRpcmVjdGl2ZTsKICAgICAgICB9CgogICAgICAgIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZTsKCiAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwgJiYgZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHsKICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLmNvbnRyb2xsZXI7CiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IGNvbnRyb2xsZXJEaXJlY3RpdmVzIHx8IHt9OwogICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoIiciICsgZGlyZWN0aXZlTmFtZSArICInIGNvbnRyb2xsZXIiLAogICAgICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7CiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IGRpcmVjdGl2ZTsKICAgICAgICB9CgogICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS50cmFuc2NsdWRlKSB7CiAgICAgICAgICBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlID0gdHJ1ZTsKCiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgbmdJZiBhbmQgbmdSZXBlYXQgc28gdGhhdCB3ZSBkb24ndCBjb21wbGFpbiBhYm91dCBkdXBsaWNhdGUgdHJhbnNjbHVzaW9uLgogICAgICAgICAgLy8gVGhpcyBvcHRpb24gc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBkaXJlY3RpdmVzIHRoYXQga25vdyBob3cgdG8gc2FmZWx5IGhhbmRsZSBlbGVtZW50IHRyYW5zY2x1c2lvbiwKICAgICAgICAgIC8vIHdoZXJlIHRoZSB0cmFuc2NsdWRlZCBub2RlcyBhcmUgYWRkZWQgb3IgcmVwbGFjZWQgYWZ0ZXIgbGlua2luZy4KICAgICAgICAgIGlmICghZGlyZWN0aXZlLiQkdGxiKSB7CiAgICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0cmFuc2NsdXNpb24nLCBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7CiAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID09ICdlbGVtZW50JykgewogICAgICAgICAgICBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7CiAgICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHk7CiAgICAgICAgICAgICR0ZW1wbGF0ZSA9ICRjb21waWxlTm9kZTsKICAgICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPQogICAgICAgICAgICAgICAganFMaXRlKGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyAnICsgZGlyZWN0aXZlTmFtZSArICc6ICcgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVBdHRyc1tkaXJlY3RpdmVOYW1lXSArICcgJykpOwogICAgICAgICAgICBjb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXTsKICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCBzbGljZUFyZ3MoJHRlbXBsYXRlKSwgY29tcGlsZU5vZGUpOwoKICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB0ZXJtaW5hbFByaW9yaXR5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSAmJiByZXBsYWNlRGlyZWN0aXZlLm5hbWUsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgcGFzcyBpbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBjb250cm9sbGVyRGlyZWN0aXZlcyAtIG90aGVyd2lzZSB3ZSdsbCBjcmVhdGUgZHVwbGljYXRlcyBjb250cm9sbGVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSBvciB0ZW1wbGF0ZURpcmVjdGl2ZSAtIGNvbWJpbmluZyB0ZW1wbGF0ZXMgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGVsZW1lbnQgdHJhbnNjbHVzaW9uIGRvZXNuJ3QgbWFrZSBzZW5zZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCBvbmx5IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgc28gdGhhdCB3ZSBwcmV2ZW50IHB1dHRpbmcgdHJhbnNjbHVzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uIHRoZSBzYW1lIGVsZW1lbnQgbW9yZSB0aGFuIG9uY2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKSkuY29udGVudHMoKTsKICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmVtcHR5KCk7IC8vIGNsZWFyIGNvbnRlbnRzCiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsZSgkdGVtcGxhdGUsIHRyYW5zY2x1ZGVGbik7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlKSB7CiAgICAgICAgICBoYXNUZW1wbGF0ZSA9IHRydWU7CiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpOwogICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7CgogICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSAoaXNGdW5jdGlvbihkaXJlY3RpdmUudGVtcGxhdGUpKQogICAgICAgICAgICAgID8gZGlyZWN0aXZlLnRlbXBsYXRlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycykKICAgICAgICAgICAgICA6IGRpcmVjdGl2ZS50ZW1wbGF0ZTsKCiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRlbm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlVmFsdWUpOwoKICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkgewogICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwogICAgICAgICAgICBpZiAoanFMaXRlSXNUZXh0Tm9kZShkaXJlY3RpdmVWYWx1ZSkpIHsKICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBbXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAkdGVtcGxhdGUgPSByZW1vdmVDb21tZW50cyh3cmFwVGVtcGxhdGUoZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlLCB0cmltKGRpcmVjdGl2ZVZhbHVlKSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdOwoKICAgICAgICAgICAgaWYgKCR0ZW1wbGF0ZS5sZW5ndGggIT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHsKICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLAogICAgICAgICAgICAgICAgICAiVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSAnezB9JyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX0iLAogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVOYW1lLCAnJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7CgogICAgICAgICAgICB2YXIgbmV3VGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319OwoKICAgICAgICAgICAgLy8gY29tYmluZSBkaXJlY3RpdmVzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUgYW5kIGZyb20gdGhlIHRlbXBsYXRlOgogICAgICAgICAgICAvLyAtIHRha2UgdGhlIGFycmF5IG9mIGRpcmVjdGl2ZXMgZm9yIHRoaXMgZWxlbWVudAogICAgICAgICAgICAvLyAtIHNwbGl0IGl0IGludG8gdHdvIHBhcnRzLCB0aG9zZSB0aGF0IGFscmVhZHkgYXBwbGllZCAocHJvY2Vzc2VkKSBhbmQgdGhvc2UgdGhhdCB3ZXJlbid0ICh1bnByb2Nlc3NlZCkKICAgICAgICAgICAgLy8gLSBjb2xsZWN0IGRpcmVjdGl2ZXMgZnJvbSB0aGUgdGVtcGxhdGUgYW5kIHNvcnQgdGhlbSBieSBwcmlvcml0eQogICAgICAgICAgICAvLyAtIGNvbWJpbmUgZGlyZWN0aXZlcyBhczogcHJvY2Vzc2VkICsgdGVtcGxhdGUgKyB1bnByb2Nlc3NlZAogICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIFtdLCBuZXdUZW1wbGF0ZUF0dHJzKTsKICAgICAgICAgICAgdmFyIHVucHJvY2Vzc2VkRGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuc3BsaWNlKGkgKyAxLCBkaXJlY3RpdmVzLmxlbmd0aCAtIChpICsgMSkpOwoKICAgICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkgewogICAgICAgICAgICAgIG1hcmtEaXJlY3RpdmVzQXNJc29sYXRlKHRlbXBsYXRlRGlyZWN0aXZlcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuY29uY2F0KHRlbXBsYXRlRGlyZWN0aXZlcykuY29uY2F0KHVucHJvY2Vzc2VkRGlyZWN0aXZlcyk7CiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRlbXBsYXRlQXR0cnMsIG5ld1RlbXBsYXRlQXR0cnMpOwoKICAgICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGRpcmVjdGl2ZVZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChkaXJlY3RpdmUudGVtcGxhdGVVcmwpIHsKICAgICAgICAgIGhhc1RlbXBsYXRlID0gdHJ1ZTsKICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7CiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTsKCiAgICAgICAgICBpZiAoZGlyZWN0aXZlLnJlcGxhY2UpIHsKICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBub2RlTGlua0ZuID0gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMuc3BsaWNlKGksIGRpcmVjdGl2ZXMubGVuZ3RoIC0gaSksICRjb21waWxlTm9kZSwKICAgICAgICAgICAgICB0ZW1wbGF0ZUF0dHJzLCBqcUNvbGxlY3Rpb24sIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgJiYgY2hpbGRUcmFuc2NsdWRlRm4sIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLCB7CiAgICAgICAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlczogY29udHJvbGxlckRpcmVjdGl2ZXMsCiAgICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmU6IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSwKICAgICAgICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlOiB0ZW1wbGF0ZURpcmVjdGl2ZSwKICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7CiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3RpdmUuY29tcGlsZSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgbGlua0ZuID0gZGlyZWN0aXZlLmNvbXBpbGUoJGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCBjaGlsZFRyYW5zY2x1ZGVGbik7CiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpbmtGbikpIHsKICAgICAgICAgICAgICBhZGRMaW5rRm5zKG51bGwsIGxpbmtGbiwgYXR0clN0YXJ0LCBhdHRyRW5kKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5rRm4pIHsKICAgICAgICAgICAgICBhZGRMaW5rRm5zKGxpbmtGbi5wcmUsIGxpbmtGbi5wb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRjb21waWxlTm9kZSkpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZXJtaW5hbCkgewogICAgICAgICAgbm9kZUxpbmtGbi50ZXJtaW5hbCA9IHRydWU7CiAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gTWF0aC5tYXgodGVybWluYWxQcmlvcml0eSwgZGlyZWN0aXZlLnByaW9yaXR5KTsKICAgICAgICB9CgogICAgICB9CgogICAgICBub2RlTGlua0ZuLnNjb3BlID0gbmV3U2NvcGVEaXJlY3RpdmUgJiYgbmV3U2NvcGVEaXJlY3RpdmUuc2NvcGUgPT09IHRydWU7CiAgICAgIG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgPSBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlOwogICAgICBub2RlTGlua0ZuLmVsZW1lbnRUcmFuc2NsdWRlT25UaGlzRWxlbWVudCA9IGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlOwogICAgICBub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudCA9IGhhc1RlbXBsYXRlOwogICAgICBub2RlTGlua0ZuLnRyYW5zY2x1ZGUgPSBjaGlsZFRyYW5zY2x1ZGVGbjsKCiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZTsKCiAgICAgIC8vIG1pZ2h0IGJlIG5vcm1hbCBvciBkZWxheWVkIG5vZGVMaW5rRm4gZGVwZW5kaW5nIG9uIGlmIHRlbXBsYXRlVXJsIGlzIHByZXNlbnQKICAgICAgcmV0dXJuIG5vZGVMaW5rRm47CgogICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgICAgZnVuY3Rpb24gYWRkTGlua0ZucyhwcmUsIHBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCkgewogICAgICAgIGlmIChwcmUpIHsKICAgICAgICAgIGlmIChhdHRyU3RhcnQpIHByZSA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHByZSwgYXR0clN0YXJ0LCBhdHRyRW5kKTsKICAgICAgICAgIHByZS5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7CiAgICAgICAgICBwcmUuZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5hbWU7CiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7CiAgICAgICAgICAgIHByZSA9IGNsb25lQW5kQW5ub3RhdGVGbihwcmUsIHtpc29sYXRlU2NvcGU6IHRydWV9KTsKICAgICAgICAgIH0KICAgICAgICAgIHByZUxpbmtGbnMucHVzaChwcmUpOwogICAgICAgIH0KICAgICAgICBpZiAocG9zdCkgewogICAgICAgICAgaWYgKGF0dHJTdGFydCkgcG9zdCA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCk7CiAgICAgICAgICBwb3N0LnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZTsKICAgICAgICAgIHBvc3QuZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5hbWU7CiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7CiAgICAgICAgICAgIHBvc3QgPSBjbG9uZUFuZEFubm90YXRlRm4ocG9zdCwge2lzb2xhdGVTY29wZTogdHJ1ZX0pOwogICAgICAgICAgfQogICAgICAgICAgcG9zdExpbmtGbnMucHVzaChwb3N0KTsKICAgICAgICB9CiAgICAgIH0KCgogICAgICBmdW5jdGlvbiBnZXRDb250cm9sbGVycyhkaXJlY3RpdmVOYW1lLCByZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSB7CiAgICAgICAgdmFyIHZhbHVlLCByZXRyaWV2YWxNZXRob2QgPSAnZGF0YScsIG9wdGlvbmFsID0gZmFsc2U7CiAgICAgICAgdmFyICRzZWFyY2hFbGVtZW50ID0gJGVsZW1lbnQ7CiAgICAgICAgdmFyIG1hdGNoOwogICAgICAgIGlmIChpc1N0cmluZyhyZXF1aXJlKSkgewogICAgICAgICAgbWF0Y2ggPSByZXF1aXJlLm1hdGNoKFJFUVVJUkVfUFJFRklYX1JFR0VYUCk7CiAgICAgICAgICByZXF1aXJlID0gcmVxdWlyZS5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKTsKCiAgICAgICAgICBpZiAobWF0Y2hbM10pIHsKICAgICAgICAgICAgaWYgKG1hdGNoWzFdKSBtYXRjaFszXSA9IG51bGw7CiAgICAgICAgICAgIGVsc2UgbWF0Y2hbMV0gPSBtYXRjaFszXTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChtYXRjaFsxXSA9PT0gJ14nKSB7CiAgICAgICAgICAgIHJldHJpZXZhbE1ldGhvZCA9ICdpbmhlcml0ZWREYXRhJzsKICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMV0gPT09ICdeXicpIHsKICAgICAgICAgICAgcmV0cmlldmFsTWV0aG9kID0gJ2luaGVyaXRlZERhdGEnOwogICAgICAgICAgICAkc2VhcmNoRWxlbWVudCA9ICRlbGVtZW50LnBhcmVudCgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKG1hdGNoWzJdID09PSAnPycpIHsKICAgICAgICAgICAgb3B0aW9uYWwgPSB0cnVlOwogICAgICAgICAgfQoKICAgICAgICAgIHZhbHVlID0gbnVsbDsKCiAgICAgICAgICBpZiAoZWxlbWVudENvbnRyb2xsZXJzICYmIHJldHJpZXZhbE1ldGhvZCA9PT0gJ2RhdGEnKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSA9IGVsZW1lbnRDb250cm9sbGVyc1tyZXF1aXJlXSkgewogICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuaW5zdGFuY2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHZhbHVlID0gdmFsdWUgfHwgJHNlYXJjaEVsZW1lbnRbcmV0cmlldmFsTWV0aG9kXSgnJCcgKyByZXF1aXJlICsgJ0NvbnRyb2xsZXInKTsKCiAgICAgICAgICBpZiAoIXZhbHVlICYmICFvcHRpb25hbCkgewogICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignY3RyZXEnLAogICAgICAgICAgICAgICAgIkNvbnRyb2xsZXIgJ3swfScsIHJlcXVpcmVkIGJ5IGRpcmVjdGl2ZSAnezF9JywgY2FuJ3QgYmUgZm91bmQhIiwKICAgICAgICAgICAgICAgIHJlcXVpcmUsIGRpcmVjdGl2ZU5hbWUpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShyZXF1aXJlKSkgewogICAgICAgICAgdmFsdWUgPSBbXTsKICAgICAgICAgIGZvckVhY2gocmVxdWlyZSwgZnVuY3Rpb24ocmVxdWlyZSkgewogICAgICAgICAgICB2YWx1ZS5wdXNoKGdldENvbnRyb2xsZXJzKGRpcmVjdGl2ZU5hbWUsIHJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0KCgogICAgICBmdW5jdGlvbiBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHsKICAgICAgICB2YXIgaSwgaWksIGxpbmtGbiwgY29udHJvbGxlciwgaXNvbGF0ZVNjb3BlLCBlbGVtZW50Q29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbiwgJGVsZW1lbnQsCiAgICAgICAgICAgIGF0dHJzOwoKICAgICAgICBpZiAoY29tcGlsZU5vZGUgPT09IGxpbmtOb2RlKSB7CiAgICAgICAgICBhdHRycyA9IHRlbXBsYXRlQXR0cnM7CiAgICAgICAgICAkZWxlbWVudCA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAkZWxlbWVudCA9IGpxTGl0ZShsaW5rTm9kZSk7CiAgICAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCRlbGVtZW50LCB0ZW1wbGF0ZUF0dHJzKTsKICAgICAgICB9CgogICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHsKICAgICAgICAgIGlzb2xhdGVTY29wZSA9IHNjb3BlLiRuZXcodHJ1ZSk7CiAgICAgICAgfQoKICAgICAgICB0cmFuc2NsdWRlRm4gPSBib3VuZFRyYW5zY2x1ZGVGbiAmJiBjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZTsKICAgICAgICBpZiAoY29udHJvbGxlckRpcmVjdGl2ZXMpIHsKICAgICAgICAgIC8vIFRPRE86IG1lcmdlIGBjb250cm9sbGVyc2AgYW5kIGBlbGVtZW50Q29udHJvbGxlcnNgIGludG8gc2luZ2xlIG9iamVjdC4KICAgICAgICAgIGNvbnRyb2xsZXJzID0ge307CiAgICAgICAgICBlbGVtZW50Q29udHJvbGxlcnMgPSB7fTsKICAgICAgICAgIGZvckVhY2goY29udHJvbGxlckRpcmVjdGl2ZXMsIGZ1bmN0aW9uKGRpcmVjdGl2ZSkgewogICAgICAgICAgICB2YXIgbG9jYWxzID0gewogICAgICAgICAgICAgICRzY29wZTogZGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsCiAgICAgICAgICAgICAgJGVsZW1lbnQ6ICRlbGVtZW50LAogICAgICAgICAgICAgICRhdHRyczogYXR0cnMsCiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGU6IHRyYW5zY2x1ZGVGbgogICAgICAgICAgICB9LCBjb250cm9sbGVySW5zdGFuY2U7CgogICAgICAgICAgICBjb250cm9sbGVyID0gZGlyZWN0aXZlLmNvbnRyb2xsZXI7CiAgICAgICAgICAgIGlmIChjb250cm9sbGVyID09ICdAJykgewogICAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBhdHRyc1tkaXJlY3RpdmUubmFtZV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnRyb2xsZXJJbnN0YW5jZSA9ICRjb250cm9sbGVyKGNvbnRyb2xsZXIsIGxvY2FscywgdHJ1ZSwgZGlyZWN0aXZlLmNvbnRyb2xsZXJBcyk7CgogICAgICAgICAgICAvLyBGb3IgZGlyZWN0aXZlcyB3aXRoIGVsZW1lbnQgdHJhbnNjbHVzaW9uIHRoZSBlbGVtZW50IGlzIGEgY29tbWVudCwKICAgICAgICAgICAgLy8gYnV0IGpRdWVyeSAuZGF0YSBkb2Vzbid0IHN1cHBvcnQgYXR0YWNoaW5nIGRhdGEgdG8gY29tbWVudCBub2RlcyBhcyBpdCdzIGhhcmQgdG8KICAgICAgICAgICAgLy8gY2xlYW4gdXAgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzgzMzUpLgogICAgICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBzYXZlIHRoZSBjb250cm9sbGVycyBmb3IgdGhlIGVsZW1lbnQgaW4gYSBsb2NhbCBoYXNoIGFuZCBhdHRhY2ggdG8gLmRhdGEKICAgICAgICAgICAgLy8gbGF0ZXIsIG9uY2Ugd2UgaGF2ZSB0aGUgYWN0dWFsIGVsZW1lbnQuCiAgICAgICAgICAgIGVsZW1lbnRDb250cm9sbGVyc1tkaXJlY3RpdmUubmFtZV0gPSBjb250cm9sbGVySW5zdGFuY2U7CiAgICAgICAgICAgIGlmICghaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUpIHsKICAgICAgICAgICAgICAkZWxlbWVudC5kYXRhKCckJyArIGRpcmVjdGl2ZS5uYW1lICsgJ0NvbnRyb2xsZXInLCBjb250cm9sbGVySW5zdGFuY2UuaW5zdGFuY2UpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb250cm9sbGVyc1tkaXJlY3RpdmUubmFtZV0gPSBjb250cm9sbGVySW5zdGFuY2U7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHsKICAgICAgICAgIHZhciBMT0NBTF9SRUdFWFAgPSAvXlxzKihbQD0mXSkoXD8/KVxzKihcdyopXHMqJC87CgogICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbygkZWxlbWVudCwgaXNvbGF0ZVNjb3BlLCB0cnVlLCAhKHRlbXBsYXRlRGlyZWN0aXZlICYmICh0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8CiAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS4kJG9yaWdpbmFsRGlyZWN0aXZlKSkpOwogICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIHRydWUpOwoKICAgICAgICAgIHZhciBpc29sYXRlU2NvcGVDb250cm9sbGVyID0gY29udHJvbGxlcnMgJiYgY29udHJvbGxlcnNbbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLm5hbWVdOwogICAgICAgICAgdmFyIGlzb2xhdGVCaW5kaW5nQ29udGV4dCA9IGlzb2xhdGVTY29wZTsKICAgICAgICAgIGlmIChpc29sYXRlU2NvcGVDb250cm9sbGVyICYmIGlzb2xhdGVTY29wZUNvbnRyb2xsZXIuaWRlbnRpZmllciAmJgogICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyID09PSB0cnVlKSB7CiAgICAgICAgICAgIGlzb2xhdGVCaW5kaW5nQ29udGV4dCA9IGlzb2xhdGVTY29wZUNvbnRyb2xsZXIuaW5zdGFuY2U7CiAgICAgICAgICB9CgogICAgICAgICAgZm9yRWFjaChpc29sYXRlU2NvcGUuJCRpc29sYXRlQmluZGluZ3MgPSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUuJCRpc29sYXRlQmluZGluZ3MsIGZ1bmN0aW9uKGRlZmluaXRpb24sIHNjb3BlTmFtZSkgewogICAgICAgICAgICB2YXIgYXR0ck5hbWUgPSBkZWZpbml0aW9uLmF0dHJOYW1lLAogICAgICAgICAgICAgICAgb3B0aW9uYWwgPSBkZWZpbml0aW9uLm9wdGlvbmFsLAogICAgICAgICAgICAgICAgbW9kZSA9IGRlZmluaXRpb24ubW9kZSwgLy8gQCwgPSwgb3IgJgogICAgICAgICAgICAgICAgbGFzdFZhbHVlLAogICAgICAgICAgICAgICAgcGFyZW50R2V0LCBwYXJlbnRTZXQsIGNvbXBhcmU7CgogICAgICAgICAgICBzd2l0Y2ggKG1vZGUpIHsKCiAgICAgICAgICAgICAgY2FzZSAnQCc6CiAgICAgICAgICAgICAgICBhdHRycy4kb2JzZXJ2ZShhdHRyTmFtZSwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICAgICAgaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgYXR0cnMuJCRvYnNlcnZlcnNbYXR0ck5hbWVdLiQkc2NvcGUgPSBzY29wZTsKICAgICAgICAgICAgICAgIGlmKCBhdHRyc1thdHRyTmFtZV0gKSB7CiAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGJlZW4gcHJvdmlkZWQgdGhlbiB3ZSB0cmlnZ2VyIGFuIGludGVycG9sYXRpb24gdG8gZW5zdXJlCiAgICAgICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSBpcyB0aGVyZSBmb3IgdXNlIGluIHRoZSBsaW5rIGZuCiAgICAgICAgICAgICAgICAgIGlzb2xhdGVCaW5kaW5nQ29udGV4dFtzY29wZU5hbWVdID0gJGludGVycG9sYXRlKGF0dHJzW2F0dHJOYW1lXSkoc2NvcGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgJz0nOgogICAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsICYmICFhdHRyc1thdHRyTmFtZV0pIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7CiAgICAgICAgICAgICAgICBpZiAocGFyZW50R2V0LmxpdGVyYWwpIHsKICAgICAgICAgICAgICAgICAgY29tcGFyZSA9IGVxdWFsczsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGNvbXBhcmUgPSBmdW5jdGlvbihhLGIpIHsgcmV0dXJuIGEgPT09IGIgfHwgKGEgIT09IGEgJiYgYiAhPT0gYik7IH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJlbnRTZXQgPSBwYXJlbnRHZXQuYXNzaWduIHx8IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAvLyByZXNldCB0aGUgY2hhbmdlLCBvciB3ZSB3aWxsIHRocm93IHRoaXMgZXhjZXB0aW9uIG9uIGV2ZXJ5ICRkaWdlc3QKICAgICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpOwogICAgICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9uYXNzaWduJywKICAgICAgICAgICAgICAgICAgICAgICJFeHByZXNzaW9uICd7MH0nIHVzZWQgd2l0aCBkaXJlY3RpdmUgJ3sxfScgaXMgbm9uLWFzc2lnbmFibGUhIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLm5hbWUpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGlzb2xhdGVCaW5kaW5nQ29udGV4dFtzY29wZU5hbWVdID0gcGFyZW50R2V0KHNjb3BlKTsKICAgICAgICAgICAgICAgIHZhciBwYXJlbnRWYWx1ZVdhdGNoID0gZnVuY3Rpb24gcGFyZW50VmFsdWVXYXRjaChwYXJlbnRWYWx1ZSkgewogICAgICAgICAgICAgICAgICBpZiAoIWNvbXBhcmUocGFyZW50VmFsdWUsIGlzb2xhdGVCaW5kaW5nQ29udGV4dFtzY29wZU5hbWVdKSkgewogICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBvdXQgb2Ygc3luYyBhbmQgbmVlZCB0byBjb3B5CiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBsYXN0VmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAvLyBwYXJlbnQgY2hhbmdlZCBhbmQgaXQgaGFzIHByZWNlZGVuY2UKICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGVCaW5kaW5nQ29udGV4dFtzY29wZU5hbWVdID0gcGFyZW50VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgY2FuIGJlIGFzc2lnbmVkIHRoZW4gZG8gc28KICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFNldChzY29wZSwgcGFyZW50VmFsdWUgPSBpc29sYXRlQmluZGluZ0NvbnRleHRbc2NvcGVOYW1lXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiBsYXN0VmFsdWUgPSBwYXJlbnRWYWx1ZTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBwYXJlbnRWYWx1ZVdhdGNoLiRzdGF0ZWZ1bCA9IHRydWU7CiAgICAgICAgICAgICAgICB2YXIgdW53YXRjaCA9IHNjb3BlLiR3YXRjaCgkcGFyc2UoYXR0cnNbYXR0ck5hbWVdLCBwYXJlbnRWYWx1ZVdhdGNoKSwgbnVsbCwgcGFyZW50R2V0LmxpdGVyYWwpOwogICAgICAgICAgICAgICAgaXNvbGF0ZVNjb3BlLiRvbignJGRlc3Ryb3knLCB1bndhdGNoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlICcmJzoKICAgICAgICAgICAgICAgIHBhcmVudEdldCA9ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pOwogICAgICAgICAgICAgICAgaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSBmdW5jdGlvbihsb2NhbHMpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEdldChzY29wZSwgbG9jYWxzKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmIChjb250cm9sbGVycykgewogICAgICAgICAgZm9yRWFjaChjb250cm9sbGVycywgZnVuY3Rpb24oY29udHJvbGxlcikgewogICAgICAgICAgICBjb250cm9sbGVyKCk7CiAgICAgICAgICB9KTsKICAgICAgICAgIGNvbnRyb2xsZXJzID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIC8vIFBSRUxJTktJTkcKICAgICAgICBmb3IoaSA9IDAsIGlpID0gcHJlTGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICBsaW5rRm4gPSBwcmVMaW5rRm5zW2ldOwogICAgICAgICAgaW52b2tlTGlua0ZuKGxpbmtGbiwKICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsCiAgICAgICAgICAgICAgJGVsZW1lbnQsCiAgICAgICAgICAgICAgYXR0cnMsCiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSwKICAgICAgICAgICAgICB0cmFuc2NsdWRlRm4KICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAvLyBSRUNVUlNJT04KICAgICAgICAvLyBXZSBvbmx5IHBhc3MgdGhlIGlzb2xhdGUgc2NvcGUsIGlmIHRoZSBpc29sYXRlIGRpcmVjdGl2ZSBoYXMgYSB0ZW1wbGF0ZSwKICAgICAgICAvLyBvdGhlcndpc2UgdGhlIGNoaWxkIGVsZW1lbnRzIGRvIG5vdCBiZWxvbmcgdG8gdGhlIGlzb2xhdGUgZGlyZWN0aXZlLgogICAgICAgIHZhciBzY29wZVRvQ2hpbGQgPSBzY29wZTsKICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlICYmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUudGVtcGxhdGUgfHwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlVXJsID09PSBudWxsKSkgewogICAgICAgICAgc2NvcGVUb0NoaWxkID0gaXNvbGF0ZVNjb3BlOwogICAgICAgIH0KICAgICAgICBjaGlsZExpbmtGbiAmJiBjaGlsZExpbmtGbihzY29wZVRvQ2hpbGQsIGxpbmtOb2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgYm91bmRUcmFuc2NsdWRlRm4pOwoKICAgICAgICAvLyBQT1NUTElOS0lORwogICAgICAgIGZvcihpID0gcG9zdExpbmtGbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgIGxpbmtGbiA9IHBvc3RMaW5rRm5zW2ldOwogICAgICAgICAgaW52b2tlTGlua0ZuKGxpbmtGbiwKICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsCiAgICAgICAgICAgICAgJGVsZW1lbnQsCiAgICAgICAgICAgICAgYXR0cnMsCiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSwKICAgICAgICAgICAgICB0cmFuc2NsdWRlRm4KICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGluamVjdGVkIGFzIGAkdHJhbnNjbHVkZWAuCiAgICAgICAgLy8gTm90ZTogYWxsIGFyZ3VtZW50cyBhcmUgb3B0aW9uYWwhCiAgICAgICAgZnVuY3Rpb24gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGUoc2NvcGUsIGNsb25lQXR0YWNoRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpIHsKICAgICAgICAgIHZhciB0cmFuc2NsdWRlQ29udHJvbGxlcnM7CgogICAgICAgICAgLy8gTm8gc2NvcGUgcGFzc2VkIGluOgogICAgICAgICAgaWYgKCFpc1Njb3BlKHNjb3BlKSkgewogICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gY2xvbmVBdHRhY2hGbjsKICAgICAgICAgICAgY2xvbmVBdHRhY2hGbiA9IHNjb3BlOwogICAgICAgICAgICBzY29wZSA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUpIHsKICAgICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gZWxlbWVudENvbnRyb2xsZXJzOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFmdXR1cmVQYXJlbnRFbGVtZW50KSB7CiAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA/ICRlbGVtZW50LnBhcmVudCgpIDogJGVsZW1lbnQ7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gYm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIGNsb25lQXR0YWNoRm4sIHRyYW5zY2x1ZGVDb250cm9sbGVycywgZnV0dXJlUGFyZW50RWxlbWVudCwgc2NvcGVUb0NoaWxkKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBtYXJrRGlyZWN0aXZlc0FzSXNvbGF0ZShkaXJlY3RpdmVzKSB7CiAgICAgIC8vIG1hcmsgYWxsIGRpcmVjdGl2ZXMgYXMgbmVlZGluZyBpc29sYXRlIHNjb3BlLgogICAgICBmb3IgKHZhciBqID0gMCwgamogPSBkaXJlY3RpdmVzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHsKICAgICAgICBkaXJlY3RpdmVzW2pdID0gaW5oZXJpdChkaXJlY3RpdmVzW2pdLCB7JCRpc29sYXRlU2NvcGU6IHRydWV9KTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogbG9va3MgdXAgdGhlIGRpcmVjdGl2ZSBhbmQgZGVjb3JhdGVzIGl0IHdpdGggZXhjZXB0aW9uIGhhbmRsaW5nIGFuZCBwcm9wZXIgcGFyYW1ldGVycy4gV2UKICAgICAqIGNhbGwgdGhpcyB0aGUgYm91bmREaXJlY3RpdmUuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgZGlyZWN0aXZlIHRvIGxvb2sgdXAuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gVGhlIGRpcmVjdGl2ZSBtdXN0IGJlIGZvdW5kIGluIHNwZWNpZmljIGZvcm1hdC4KICAgICAqICAgU3RyaW5nIGNvbnRhaW5pbmcgYW55IG9mIHRoZXNlcyBjaGFyYWN0ZXJzOgogICAgICoKICAgICAqICAgKiBgRWA6IGVsZW1lbnQgbmFtZQogICAgICogICAqIGBBJzogYXR0cmlidXRlCiAgICAgKiAgICogYENgOiBjbGFzcwogICAgICogICAqIGBNYDogY29tbWVudAogICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgZGlyZWN0aXZlIHdhcyBhZGRlZC4KICAgICAqLwogICAgZnVuY3Rpb24gYWRkRGlyZWN0aXZlKHREaXJlY3RpdmVzLCBuYW1lLCBsb2NhdGlvbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgc3RhcnRBdHRyTmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRBdHRyTmFtZSkgewogICAgICBpZiAobmFtZSA9PT0gaWdub3JlRGlyZWN0aXZlKSByZXR1cm4gbnVsbDsKICAgICAgdmFyIG1hdGNoID0gbnVsbDsKICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICBmb3IodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksCiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpPGlpOyBpKyspIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07CiAgICAgICAgICAgIGlmICggKG1heFByaW9yaXR5ID09PSB1bmRlZmluZWQgfHwgbWF4UHJpb3JpdHkgPiBkaXJlY3RpdmUucHJpb3JpdHkpICYmCiAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0LmluZGV4T2YobG9jYXRpb24pICE9IC0xKSB7CiAgICAgICAgICAgICAgaWYgKHN0YXJ0QXR0ck5hbWUpIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSA9IGluaGVyaXQoZGlyZWN0aXZlLCB7JCRzdGFydDogc3RhcnRBdHRyTmFtZSwgJCRlbmQ6IGVuZEF0dHJOYW1lfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHREaXJlY3RpdmVzLnB1c2goZGlyZWN0aXZlKTsKICAgICAgICAgICAgICBtYXRjaCA9IGRpcmVjdGl2ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaChlKSB7ICRleGNlcHRpb25IYW5kbGVyKGUpOyB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBtYXRjaDsKICAgIH0KCgogICAgLyoqCiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCByZXR1cm5zIHRydWUgaWYgaXQgaXMgYSBtdWx0aS1lbGVtZW50IGRpcmVjdGl2ZSwKICAgICAqIGFuZCB0aGVyZWZvcmUgcmVxdWlyZXMgRE9NIG5vZGVzIGJldHdlZW4gLXN0YXJ0IGFuZCAtZW5kIG1hcmtlcnMgdG8gYmUgZ3JvdXBlZAogICAgICogdG9nZXRoZXIuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgZGlyZWN0aXZlIHRvIGxvb2sgdXAuCiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgcmVnaXN0ZXJlZCBhcyBtdWx0aS1lbGVtZW50LgogICAgICovCiAgICBmdW5jdGlvbiBkaXJlY3RpdmVJc011bHRpRWxlbWVudChuYW1lKSB7CiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgZm9yKHZhciBkaXJlY3RpdmUsIGRpcmVjdGl2ZXMgPSAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBTdWZmaXgpLAogICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaTxpaTsgaSsrKSB7CiAgICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldOwogICAgICAgICAgaWYgKGRpcmVjdGl2ZS5tdWx0aUVsZW1lbnQpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIFdoZW4gdGhlIGVsZW1lbnQgaXMgcmVwbGFjZWQgd2l0aCBIVE1MIHRlbXBsYXRlIHRoZW4gdGhlIG5ldyBhdHRyaWJ1dGVzCiAgICAgKiBvbiB0aGUgdGVtcGxhdGUgbmVlZCB0byBiZSBtZXJnZWQgd2l0aCB0aGUgZXhpc3RpbmcgYXR0cmlidXRlcyBpbiB0aGUgRE9NLgogICAgICogVGhlIGRlc2lyZWQgZWZmZWN0IGlzIHRvIGhhdmUgYm90aCBvZiB0aGUgYXR0cmlidXRlcyBwcmVzZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkc3QgZGVzdGluYXRpb24gYXR0cmlidXRlcyAob3JpZ2luYWwgRE9NKQogICAgICogQHBhcmFtIHtvYmplY3R9IHNyYyBzb3VyY2UgYXR0cmlidXRlcyAoZnJvbSB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlKQogICAgICovCiAgICBmdW5jdGlvbiBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyhkc3QsIHNyYykgewogICAgICB2YXIgc3JjQXR0ciA9IHNyYy4kYXR0ciwKICAgICAgICAgIGRzdEF0dHIgPSBkc3QuJGF0dHIsCiAgICAgICAgICAkZWxlbWVudCA9IGRzdC4kJGVsZW1lbnQ7CgogICAgICAvLyByZWFwcGx5IHRoZSBvbGQgYXR0cmlidXRlcyB0byB0aGUgbmV3IGVsZW1lbnQKICAgICAgZm9yRWFjaChkc3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcpIHsKICAgICAgICAgIGlmIChzcmNba2V5XSAmJiBzcmNba2V5XSAhPT0gdmFsdWUpIHsKICAgICAgICAgICAgdmFsdWUgKz0gKGtleSA9PT0gJ3N0eWxlJyA/ICc7JyA6ICcgJykgKyBzcmNba2V5XTsKICAgICAgICAgIH0KICAgICAgICAgIGRzdC4kc2V0KGtleSwgdmFsdWUsIHRydWUsIHNyY0F0dHJba2V5XSk7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIC8vIGNvcHkgdGhlIG5ldyBhdHRyaWJ1dGVzIG9uIHRoZSBvbGQgYXR0cnMgb2JqZWN0CiAgICAgIGZvckVhY2goc3JjLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICAgaWYgKGtleSA9PSAnY2xhc3MnKSB7CiAgICAgICAgICBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsIHZhbHVlKTsKICAgICAgICAgIGRzdFsnY2xhc3MnXSA9IChkc3RbJ2NsYXNzJ10gPyBkc3RbJ2NsYXNzJ10gKyAnICcgOiAnJykgKyB2YWx1ZTsKICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSAnc3R5bGUnKSB7CiAgICAgICAgICAkZWxlbWVudC5hdHRyKCdzdHlsZScsICRlbGVtZW50LmF0dHIoJ3N0eWxlJykgKyAnOycgKyB2YWx1ZSk7CiAgICAgICAgICBkc3RbJ3N0eWxlJ10gPSAoZHN0WydzdHlsZSddID8gZHN0WydzdHlsZSddICsgJzsnIDogJycpICsgdmFsdWU7CiAgICAgICAgICAvLyBgZHN0YCB3aWxsIG5ldmVyIGNvbnRhaW4gaGFzT3duUHJvcGVydHkgYXMgRE9NIHBhcnNlciB3b24ndCBsZXQgaXQuCiAgICAgICAgICAvLyBZb3Ugd2lsbCBnZXQgYW4gIkludmFsaWRDaGFyYWN0ZXJFcnJvcjogRE9NIEV4Y2VwdGlvbiA1IiBlcnJvciBpZiB5b3UKICAgICAgICAgIC8vIGhhdmUgYW4gYXR0cmlidXRlIGxpa2UgImhhcy1vd24tcHJvcGVydHkiIG9yICJkYXRhLWhhcy1vd24tcHJvcGVydHkiLCBldGMuCiAgICAgICAgfSBlbHNlIGlmIChrZXkuY2hhckF0KDApICE9ICckJyAmJiAhZHN0Lmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgIGRzdFtrZXldID0gdmFsdWU7CiAgICAgICAgICBkc3RBdHRyW2tleV0gPSBzcmNBdHRyW2tleV07CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCgogICAgZnVuY3Rpb24gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMsICRjb21waWxlTm9kZSwgdEF0dHJzLAogICAgICAgICRyb290RWxlbWVudCwgY2hpbGRUcmFuc2NsdWRlRm4sIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7CiAgICAgIHZhciBsaW5rUXVldWUgPSBbXSwKICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLAogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLAogICAgICAgICAgYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXSwKICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZSA9IGRpcmVjdGl2ZXMuc2hpZnQoKSwKICAgICAgICAgIC8vIFRoZSBmYWN0IHRoYXQgd2UgaGF2ZSB0byBjb3B5IGFuZCBwYXRjaCB0aGUgZGlyZWN0aXZlIHNlZW1zIHdyb25nIQogICAgICAgICAgZGVyaXZlZFN5bmNEaXJlY3RpdmUgPSBleHRlbmQoe30sIG9yaWdBc3luY0RpcmVjdGl2ZSwgewogICAgICAgICAgICB0ZW1wbGF0ZVVybDogbnVsbCwgdHJhbnNjbHVkZTogbnVsbCwgcmVwbGFjZTogbnVsbCwgJCRvcmlnaW5hbERpcmVjdGl2ZTogb3JpZ0FzeW5jRGlyZWN0aXZlCiAgICAgICAgICB9KSwKICAgICAgICAgIHRlbXBsYXRlVXJsID0gKGlzRnVuY3Rpb24ob3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKSkKICAgICAgICAgICAgICA/IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCgkY29tcGlsZU5vZGUsIHRBdHRycykKICAgICAgICAgICAgICA6IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCwKICAgICAgICAgIHRlbXBsYXRlTmFtZXNwYWNlID0gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlOwoKICAgICAgJGNvbXBpbGVOb2RlLmVtcHR5KCk7CgogICAgICAkdGVtcGxhdGVSZXF1ZXN0KCRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHRlbXBsYXRlVXJsKSkKICAgICAgICAudGhlbihmdW5jdGlvbihjb250ZW50KSB7CiAgICAgICAgICB2YXIgY29tcGlsZU5vZGUsIHRlbXBUZW1wbGF0ZUF0dHJzLCAkdGVtcGxhdGUsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm47CgogICAgICAgICAgY29udGVudCA9IGRlbm9ybWFsaXplVGVtcGxhdGUoY29udGVudCk7CgogICAgICAgICAgaWYgKG9yaWdBc3luY0RpcmVjdGl2ZS5yZXBsYWNlKSB7CiAgICAgICAgICAgIGlmIChqcUxpdGVJc1RleHROb2RlKGNvbnRlbnQpKSB7CiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKHRlbXBsYXRlTmFtZXNwYWNlLCB0cmltKGNvbnRlbnQpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkdGVtcGxhdGVbMF07CgogICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCkgewogICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCd0cGxydCcsCiAgICAgICAgICAgICAgICAgICJUZW1wbGF0ZSBmb3IgZGlyZWN0aXZlICd7MH0nIG11c3QgaGF2ZSBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIHsxfSIsCiAgICAgICAgICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZS5uYW1lLCB0ZW1wbGF0ZVVybCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRlbXBUZW1wbGF0ZUF0dHJzID0geyRhdHRyOiB7fX07CiAgICAgICAgICAgIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7CiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZURpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhjb21waWxlTm9kZSwgW10sIHRlbXBUZW1wbGF0ZUF0dHJzKTsKCiAgICAgICAgICAgIGlmIChpc09iamVjdChvcmlnQXN5bmNEaXJlY3RpdmUuc2NvcGUpKSB7CiAgICAgICAgICAgICAgbWFya0RpcmVjdGl2ZXNBc0lzb2xhdGUodGVtcGxhdGVEaXJlY3RpdmVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBkaXJlY3RpdmVzID0gdGVtcGxhdGVEaXJlY3RpdmVzLmNvbmNhdChkaXJlY3RpdmVzKTsKICAgICAgICAgICAgbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXModEF0dHJzLCB0ZW1wVGVtcGxhdGVBdHRycyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb21waWxlTm9kZSA9IGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGU7CiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGNvbnRlbnQpOwogICAgICAgICAgfQoKICAgICAgICAgIGRpcmVjdGl2ZXMudW5zaGlmdChkZXJpdmVkU3luY0RpcmVjdGl2ZSk7CgogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4gPSBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgY29tcGlsZU5vZGUsIHRBdHRycywKICAgICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiwgJGNvbXBpbGVOb2RlLCBvcmlnQXN5bmNEaXJlY3RpdmUsIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLAogICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpOwogICAgICAgICAgZm9yRWFjaCgkcm9vdEVsZW1lbnQsIGZ1bmN0aW9uKG5vZGUsIGkpIHsKICAgICAgICAgICAgaWYgKG5vZGUgPT0gY29tcGlsZU5vZGUpIHsKICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbaV0gPSAkY29tcGlsZU5vZGVbMF07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZVswXS5jaGlsZE5vZGVzLCBjaGlsZFRyYW5zY2x1ZGVGbik7CgogICAgICAgICAgd2hpbGUobGlua1F1ZXVlLmxlbmd0aCkgewogICAgICAgICAgICB2YXIgc2NvcGUgPSBsaW5rUXVldWUuc2hpZnQoKSwKICAgICAgICAgICAgICAgIGJlZm9yZVRlbXBsYXRlTGlua05vZGUgPSBsaW5rUXVldWUuc2hpZnQoKSwKICAgICAgICAgICAgICAgIGxpbmtSb290RWxlbWVudCA9IGxpbmtRdWV1ZS5zaGlmdCgpLAogICAgICAgICAgICAgICAgYm91bmRUcmFuc2NsdWRlRm4gPSBsaW5rUXVldWUuc2hpZnQoKSwKICAgICAgICAgICAgICAgIGxpbmtOb2RlID0gJGNvbXBpbGVOb2RlWzBdOwoKICAgICAgICAgICAgaWYgKHNjb3BlLiQkZGVzdHJveWVkKSBjb250aW51ZTsKCiAgICAgICAgICAgIGlmIChiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlICE9PSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlKSB7CiAgICAgICAgICAgICAgdmFyIG9sZENsYXNzZXMgPSBiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlLmNsYXNzTmFtZTsKCiAgICAgICAgICAgICAgaWYgKCEocHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSAmJgogICAgICAgICAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUucmVwbGFjZSkpIHsKICAgICAgICAgICAgICAgIC8vIGl0IHdhcyBjbG9uZWQgdGhlcmVmb3JlIHdlIGhhdmUgdG8gY2xvbmUgYXMgd2VsbC4KICAgICAgICAgICAgICAgIGxpbmtOb2RlID0ganFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXBsYWNlV2l0aChsaW5rUm9vdEVsZW1lbnQsIGpxTGl0ZShiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlKSwgbGlua05vZGUpOwoKICAgICAgICAgICAgICAvLyBDb3B5IGluIENTUyBjbGFzc2VzIGZyb20gb3JpZ2luYWwgbm9kZQogICAgICAgICAgICAgIHNhZmVBZGRDbGFzcyhqcUxpdGUobGlua05vZGUpLCBvbGRDbGFzc2VzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQpIHsKICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGUsIGJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwKICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICAgIH0KICAgICAgICAgIGxpbmtRdWV1ZSA9IG51bGw7CiAgICAgICAgfSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gZGVsYXllZE5vZGVMaW5rRm4oaWdub3JlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHsKICAgICAgICB2YXIgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuOwogICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuOwogICAgICAgIGlmIChsaW5rUXVldWUpIHsKICAgICAgICAgIGxpbmtRdWV1ZS5wdXNoKHNjb3BlKTsKICAgICAgICAgIGxpbmtRdWV1ZS5wdXNoKG5vZGUpOwogICAgICAgICAgbGlua1F1ZXVlLnB1c2gocm9vdEVsZW1lbnQpOwogICAgICAgICAgbGlua1F1ZXVlLnB1c2goY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkgewogICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGUsIGJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICAgIH0KICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CgoKICAgIC8qKgogICAgICogU29ydGluZyBmdW5jdGlvbiBmb3IgYm91bmQgZGlyZWN0aXZlcy4KICAgICAqLwogICAgZnVuY3Rpb24gYnlQcmlvcml0eShhLCBiKSB7CiAgICAgIHZhciBkaWZmID0gYi5wcmlvcml0eSAtIGEucHJpb3JpdHk7CiAgICAgIGlmIChkaWZmICE9PSAwKSByZXR1cm4gZGlmZjsKICAgICAgaWYgKGEubmFtZSAhPT0gYi5uYW1lKSByZXR1cm4gKGEubmFtZSA8IGIubmFtZSkgPyAtMSA6IDE7CiAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDsKICAgIH0KCgogICAgZnVuY3Rpb24gYXNzZXJ0Tm9EdXBsaWNhdGUod2hhdCwgcHJldmlvdXNEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgZWxlbWVudCkgewogICAgICBpZiAocHJldmlvdXNEaXJlY3RpdmUpIHsKICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbXVsdGlkaXInLCAnTXVsdGlwbGUgZGlyZWN0aXZlcyBbezB9LCB7MX1dIGFza2luZyBmb3IgezJ9IG9uOiB7M30nLAogICAgICAgICAgICBwcmV2aW91c0RpcmVjdGl2ZS5uYW1lLCBkaXJlY3RpdmUubmFtZSwgd2hhdCwgc3RhcnRpbmdUYWcoZWxlbWVudCkpOwogICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZShkaXJlY3RpdmVzLCB0ZXh0KSB7CiAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKHRleHQsIHRydWUpOwogICAgICBpZiAoaW50ZXJwb2xhdGVGbikgewogICAgICAgIGRpcmVjdGl2ZXMucHVzaCh7CiAgICAgICAgICBwcmlvcml0eTogMCwKICAgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUNvbXBpbGVGbih0ZW1wbGF0ZU5vZGUpIHsKICAgICAgICAgICAgdmFyIHRlbXBsYXRlTm9kZVBhcmVudCA9IHRlbXBsYXRlTm9kZS5wYXJlbnQoKSwKICAgICAgICAgICAgICAgIGhhc0NvbXBpbGVQYXJlbnQgPSAhIXRlbXBsYXRlTm9kZVBhcmVudC5sZW5ndGg7CgogICAgICAgICAgICAvLyBXaGVuIHRyYW5zY2x1ZGluZyBhIHRlbXBsYXRlIHRoYXQgaGFzIGJpbmRpbmdzIGluIHRoZSByb290CiAgICAgICAgICAgIC8vIHdlIGRvbid0IGhhdmUgYSBwYXJlbnQgYW5kIHRodXMgbmVlZCB0byBhZGQgdGhlIGNsYXNzIGR1cmluZyBsaW5raW5nIGZuLgogICAgICAgICAgICBpZiAoaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZU5vZGVQYXJlbnQpOwoKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUxpbmtGbihzY29wZSwgbm9kZSkgewogICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCgpOwogICAgICAgICAgICAgIGlmICghaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyhwYXJlbnQpOwogICAgICAgICAgICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhwYXJlbnQsIGludGVycG9sYXRlRm4uZXhwcmVzc2lvbnMpOwogICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICAgIG5vZGVbMF0ubm9kZVZhbHVlID0gdmFsdWU7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCgogICAgZnVuY3Rpb24gd3JhcFRlbXBsYXRlKHR5cGUsIHRlbXBsYXRlKSB7CiAgICAgIHR5cGUgPSBsb3dlcmNhc2UodHlwZSB8fCAnaHRtbCcpOwogICAgICBzd2l0Y2godHlwZSkgewogICAgICBjYXNlICdzdmcnOgogICAgICBjYXNlICdtYXRoJzoKICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIHdyYXBwZXIuaW5uZXJIVE1MID0gJzwnK3R5cGUrJz4nK3RlbXBsYXRlKyc8LycrdHlwZSsnPic7CiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzOwogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBnZXRUcnVzdGVkQ29udGV4dChub2RlLCBhdHRyTm9ybWFsaXplZE5hbWUpIHsKICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PSAic3JjZG9jIikgewogICAgICAgIHJldHVybiAkc2NlLkhUTUw7CiAgICAgIH0KICAgICAgdmFyIHRhZyA9IG5vZGVOYW1lXyhub2RlKTsKICAgICAgLy8gbWFjdGlvblt4bGluazpocmVmXSBjYW4gc291cmNlIFNWRy4gIEl0J3Mgbm90IGxpbWl0ZWQgdG8gPG1hY3Rpb24+LgogICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09ICJ4bGlua0hyZWYiIHx8CiAgICAgICAgICAodGFnID09ICJmb3JtIiAmJiBhdHRyTm9ybWFsaXplZE5hbWUgPT0gImFjdGlvbiIpIHx8CiAgICAgICAgICAodGFnICE9ICJpbWciICYmIChhdHRyTm9ybWFsaXplZE5hbWUgPT0gInNyYyIgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOb3JtYWxpemVkTmFtZSA9PSAibmdTcmMiKSkpIHsKICAgICAgICByZXR1cm4gJHNjZS5SRVNPVVJDRV9VUkw7CiAgICAgIH0KICAgIH0KCgogICAgZnVuY3Rpb24gYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuYW1lLCBhbGxPck5vdGhpbmcpIHsKICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodmFsdWUsIHRydWUpOwoKICAgICAgLy8gbm8gaW50ZXJwb2xhdGlvbiBmb3VuZCAtPiBpZ25vcmUKICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47CgoKICAgICAgaWYgKG5hbWUgPT09ICJtdWx0aXBsZSIgJiYgbm9kZU5hbWVfKG5vZGUpID09PSAic2VsZWN0IikgewogICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCJzZWxtdWx0aSIsCiAgICAgICAgICAgICJCaW5kaW5nIHRvIHRoZSAnbXVsdGlwbGUnIGF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkLiBFbGVtZW50OiB7MH0iLAogICAgICAgICAgICBzdGFydGluZ1RhZyhub2RlKSk7CiAgICAgIH0KCiAgICAgIGRpcmVjdGl2ZXMucHVzaCh7CiAgICAgICAgcHJpb3JpdHk6IDEwMCwKICAgICAgICBjb21waWxlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZVByZUxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgICAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gKGF0dHIuJCRvYnNlcnZlcnMgfHwgKGF0dHIuJCRvYnNlcnZlcnMgPSB7fSkpOwoKICAgICAgICAgICAgICAgIGlmIChFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQLnRlc3QobmFtZSkpIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vZG9tZXZlbnRzJywKICAgICAgICAgICAgICAgICAgICAgICJJbnRlcnBvbGF0aW9ucyBmb3IgSFRNTCBET00gZXZlbnQgYXR0cmlidXRlcyBhcmUgZGlzYWxsb3dlZC4gIFBsZWFzZSB1c2UgdGhlICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICJuZy0gdmVyc2lvbnMgKHN1Y2ggYXMgbmctY2xpY2sgaW5zdGVhZCBvZiBvbmNsaWNrKSBpbnN0ZWFkLiIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgd2FzIHJlbW92ZWQsIHRoZW4gd2UgYXJlIGRvbmUKICAgICAgICAgICAgICAgIGlmICghYXR0cltuYW1lXSkgewogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBpbnRlcnBvbGF0ZSBhZ2FpbiwgaW4gY2FzZSB0aGUgYXR0cmlidXRlIHZhbHVlIGhhcyBiZWVuIHVwZGF0ZWQKICAgICAgICAgICAgICAgIC8vIChlLmcuIGJ5IGFub3RoZXIgZGlyZWN0aXZlJ3MgY29tcGlsZSBmdW5jdGlvbikKICAgICAgICAgICAgICAgIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoYXR0cltuYW1lXSwgdHJ1ZSwgZ2V0VHJ1c3RlZENvbnRleHQobm9kZSwgbmFtZSksCiAgICAgICAgICAgICAgICAgICAgQUxMX09SX05PVEhJTkdfQVRUUlNbbmFtZV0gfHwgYWxsT3JOb3RoaW5nKTsKCiAgICAgICAgICAgICAgICAvLyBpZiBhdHRyaWJ1dGUgd2FzIHVwZGF0ZWQgc28gdGhhdCB0aGVyZSBpcyBubyBpbnRlcnBvbGF0aW9uIGdvaW5nIG9uIHdlIGRvbid0IHdhbnQgdG8KICAgICAgICAgICAgICAgIC8vIHJlZ2lzdGVyIGFueSBvYnNlcnZlcnMKICAgICAgICAgICAgICAgIGlmICghaW50ZXJwb2xhdGVGbikgcmV0dXJuOwoKICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemUgYXR0ciBvYmplY3Qgc28gdGhhdCBpdCdzIHJlYWR5IGluIGNhc2Ugd2UgbmVlZCB0aGUgdmFsdWUgZm9yIGlzb2xhdGUKICAgICAgICAgICAgICAgIC8vIHNjb3BlIGluaXRpYWxpemF0aW9uLCBvdGhlcndpc2UgdGhlIHZhbHVlIHdvdWxkIG5vdCBiZSBhdmFpbGFibGUgZnJvbSBpc29sYXRlCiAgICAgICAgICAgICAgICAvLyBkaXJlY3RpdmUncyBsaW5raW5nIGZuIGR1cmluZyBsaW5raW5nIHBoYXNlCiAgICAgICAgICAgICAgICBhdHRyW25hbWVdID0gaW50ZXJwb2xhdGVGbihzY29wZSk7CgogICAgICAgICAgICAgICAgKCQkb2JzZXJ2ZXJzW25hbWVdIHx8ICgkJG9ic2VydmVyc1tuYW1lXSA9IFtdKSkuJCRpbnRlciA9IHRydWU7CiAgICAgICAgICAgICAgICAoYXR0ci4kJG9ic2VydmVycyAmJiBhdHRyLiQkb2JzZXJ2ZXJzW25hbWVdLiQkc2NvcGUgfHwgc2NvcGUpLgogICAgICAgICAgICAgICAgICAkd2F0Y2goaW50ZXJwb2xhdGVGbiwgZnVuY3Rpb24gaW50ZXJwb2xhdGVGbldhdGNoQWN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciBjbGFzcyBhdHRyaWJ1dGUgYWRkaXRpb24gKyByZW1vdmFsCiAgICAgICAgICAgICAgICAgICAgLy9zbyB0aGF0IGNsYXNzIGNoYW5nZXMgY2FuIHRhcCBpbnRvIHRoZSBhbmltYXRpb24KICAgICAgICAgICAgICAgICAgICAvL2hvb2tzIHByb3ZpZGVkIGJ5IHRoZSAkYW5pbWF0ZSBzZXJ2aWNlLiBCZSBzdXJlIHRvCiAgICAgICAgICAgICAgICAgICAgLy9za2lwIGFuaW1hdGlvbnMgd2hlbiB0aGUgZmlyc3QgZGlnZXN0IG9jY3VycyAod2hlbgogICAgICAgICAgICAgICAgICAgIC8vYm90aCB0aGUgbmV3IGFuZCB0aGUgb2xkIHZhbHVlcyBhcmUgdGhlIHNhbWUpIHNpbmNlCiAgICAgICAgICAgICAgICAgICAgLy90aGUgQ1NTIGNsYXNzZXMgYXJlIHRoZSBub24taW50ZXJwb2xhdGVkIHZhbHVlcwogICAgICAgICAgICAgICAgICAgIGlmKG5hbWUgPT09ICdjbGFzcycgJiYgbmV3VmFsdWUgIT0gb2xkVmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHIuJHVwZGF0ZUNsYXNzKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHIuJHNldChuYW1lLCBuZXdWYWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKCiAgICAvKioKICAgICAqIFRoaXMgaXMgYSBzcGVjaWFsIGpxTGl0ZS5yZXBsYWNlV2l0aCwgd2hpY2ggY2FuIHJlcGxhY2UgaXRlbXMgd2hpY2gKICAgICAqIGhhdmUgbm8gcGFyZW50cywgcHJvdmlkZWQgdGhhdCB0aGUgY29udGFpbmluZyBqcUxpdGUgY29sbGVjdGlvbiBpcyBwcm92aWRlZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0pxTGl0ZT19ICRyb290RWxlbWVudCBUaGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlLiBVc2VkIHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSByb290IG9mIHRoZSB0cmVlLgogICAgICogQHBhcmFtIHtKcUxpdGV9IGVsZW1lbnRzVG9SZW1vdmUgVGhlIGpxTGl0ZSBlbGVtZW50IHdoaWNoIHdlIGFyZSBnb2luZyB0byByZXBsYWNlLiBXZSBrZWVwCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2hlbGwsIGJ1dCByZXBsYWNlIGl0cyBET00gbm9kZSByZWZlcmVuY2UuCiAgICAgKiBAcGFyYW0ge05vZGV9IG5ld05vZGUgVGhlIG5ldyBET00gbm9kZS4KICAgICAqLwogICAgZnVuY3Rpb24gcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCBlbGVtZW50c1RvUmVtb3ZlLCBuZXdOb2RlKSB7CiAgICAgIHZhciBmaXJzdEVsZW1lbnRUb1JlbW92ZSA9IGVsZW1lbnRzVG9SZW1vdmVbMF0sCiAgICAgICAgICByZW1vdmVDb3VudCA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoLAogICAgICAgICAgcGFyZW50ID0gZmlyc3RFbGVtZW50VG9SZW1vdmUucGFyZW50Tm9kZSwKICAgICAgICAgIGksIGlpOwoKICAgICAgaWYgKCRyb290RWxlbWVudCkgewogICAgICAgIGZvcihpID0gMCwgaWkgPSAkcm9vdEVsZW1lbnQubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgaWYgKCRyb290RWxlbWVudFtpXSA9PSBmaXJzdEVsZW1lbnRUb1JlbW92ZSkgewogICAgICAgICAgICAkcm9vdEVsZW1lbnRbaSsrXSA9IG5ld05vZGU7CiAgICAgICAgICAgIGZvciAodmFyIGogPSBpLCBqMiA9IGogKyByZW1vdmVDb3VudCAtIDEsCiAgICAgICAgICAgICAgICAgICAgIGpqID0gJHJvb3RFbGVtZW50Lmxlbmd0aDsKICAgICAgICAgICAgICAgICBqIDwgamo7IGorKywgajIrKykgewogICAgICAgICAgICAgIGlmIChqMiA8IGpqKSB7CiAgICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbal0gPSAkcm9vdEVsZW1lbnRbajJdOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkZWxldGUgJHJvb3RFbGVtZW50W2pdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkcm9vdEVsZW1lbnQubGVuZ3RoIC09IHJlbW92ZUNvdW50IC0gMTsKCiAgICAgICAgICAgIC8vIElmIHRoZSByZXBsYWNlZCBlbGVtZW50IGlzIGFsc28gdGhlIGpRdWVyeSAuY29udGV4dCB0aGVuIHJlcGxhY2UgaXQKICAgICAgICAgICAgLy8gLmNvbnRleHQgaXMgYSBkZXByZWNhdGVkIGpRdWVyeSBhcGksIHNvIHdlIHNob3VsZCBzZXQgaXQgb25seSB3aGVuIGpRdWVyeSBzZXQgaXQKICAgICAgICAgICAgLy8gaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRleHQvCiAgICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnQuY29udGV4dCA9PT0gZmlyc3RFbGVtZW50VG9SZW1vdmUpIHsKICAgICAgICAgICAgICAkcm9vdEVsZW1lbnQuY29udGV4dCA9IG5ld05vZGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAocGFyZW50KSB7CiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChuZXdOb2RlLCBmaXJzdEVsZW1lbnRUb1JlbW92ZSk7CiAgICAgIH0KCiAgICAgIC8vIFRPRE8ocGVyZik6IHdoYXQncyB0aGlzIGRvY3VtZW50IGZyYWdtZW50IGZvcj8gaXMgaXQgbmVlZGVkPyBjYW4gd2UgYXQgbGVhc3QgcmV1c2UgaXQ/CiAgICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZmlyc3RFbGVtZW50VG9SZW1vdmUpOwoKICAgICAgLy8gQ29weSBvdmVyIHVzZXIgZGF0YSAodGhhdCBpbmNsdWRlcyBBbmd1bGFyJ3MgJHNjb3BlIGV0Yy4pLiBEb24ndCBjb3B5IHByaXZhdGUKICAgICAgLy8gZGF0YSBoZXJlIGJlY2F1c2UgdGhlcmUncyBubyBwdWJsaWMgaW50ZXJmYWNlIGluIGpRdWVyeSB0byBkbyB0aGF0IGFuZCBjb3B5aW5nIG92ZXIKICAgICAgLy8gZXZlbnQgbGlzdGVuZXJzICh3aGljaCBpcyB0aGUgbWFpbiB1c2Ugb2YgcHJpdmF0ZSBkYXRhKSB3b3VsZG4ndCB3b3JrIGFueXdheS4KICAgICAganFMaXRlKG5ld05vZGUpLmRhdGEoanFMaXRlKGZpcnN0RWxlbWVudFRvUmVtb3ZlKS5kYXRhKCkpOwoKICAgICAgLy8gUmVtb3ZlIGRhdGEgb2YgdGhlIHJlcGxhY2VkIGVsZW1lbnQuIFdlIGNhbm5vdCBqdXN0IGNhbGwgLnJlbW92ZSgpCiAgICAgIC8vIG9uIHRoZSBlbGVtZW50IGl0IHNpbmNlIHRoYXQgd291bGQgZGVhbGxvY2F0ZSBzY29wZSB0aGF0IGlzIG5lZWRlZAogICAgICAvLyBmb3IgdGhlIG5ldyBub2RlLiBJbnN0ZWFkLCByZW1vdmUgdGhlIGRhdGEgIm1hbnVhbGx5Ii4KICAgICAgaWYgKCFqUXVlcnkpIHsKICAgICAgICBkZWxldGUganFMaXRlLmNhY2hlW2ZpcnN0RWxlbWVudFRvUmVtb3ZlW2pxTGl0ZS5leHBhbmRvXV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8galF1ZXJ5IDIueCBkb2Vzbid0IGV4cG9zZSB0aGUgZGF0YSBzdG9yYWdlLiBVc2UgalF1ZXJ5LmNsZWFuRGF0YSB0byBjbGVhbiB1cCBhZnRlcgogICAgICAgIC8vIHRoZSByZXBsYWNlZCBlbGVtZW50LiBUaGUgY2xlYW5EYXRhIHZlcnNpb24gbW9ua2V5LXBhdGNoZWQgYnkgQW5ndWxhciB3b3VsZCBjYXVzZQogICAgICAgIC8vIHRoZSBzY29wZSB0byBiZSB0cmFzaGVkIGFuZCB3ZSBkbyBuZWVkIHRoZSB2ZXJ5IHNhbWUgc2NvcGUgdG8gd29yayB3aXRoIHRoZSBuZXcKICAgICAgICAvLyBlbGVtZW50LiBIb3dldmVyLCB3ZSBjYW5ub3QganVzdCBjYWNoZSB0aGUgbm9uLXBhdGNoZWQgdmVyc2lvbiBhbmQgdXNlIGl0IGhlcmUgYXMKICAgICAgICAvLyB0aGF0IHdvdWxkIGJyZWFrIGlmIGFub3RoZXIgbGlicmFyeSBwYXRjaGVzIHRoZSBtZXRob2QgYWZ0ZXIgQW5ndWxhciBkb2VzIChvbmUKICAgICAgICAvLyBleGFtcGxlIGlzIGpRdWVyeSBVSSkuIEluc3RlYWQsIHNldCBhIGZsYWcgaW5kaWNhdGluZyBzY29wZSBkZXN0cm95aW5nIHNob3VsZCBiZQogICAgICAgIC8vIHNraXBwZWQgdGhpcyBvbmUgdGltZS4KICAgICAgICBza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSA9IHRydWU7CiAgICAgICAgalF1ZXJ5LmNsZWFuRGF0YShbZmlyc3RFbGVtZW50VG9SZW1vdmVdKTsKICAgICAgfQoKICAgICAgZm9yICh2YXIgayA9IDEsIGtrID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGg7IGsgPCBrazsgaysrKSB7CiAgICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1RvUmVtb3ZlW2tdOwogICAgICAgIGpxTGl0ZShlbGVtZW50KS5yZW1vdmUoKTsgLy8gbXVzdCBkbyB0aGlzIHdheSB0byBjbGVhbiB1cCBleHBhbmRvCiAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7CiAgICAgICAgZGVsZXRlIGVsZW1lbnRzVG9SZW1vdmVba107CiAgICAgIH0KCiAgICAgIGVsZW1lbnRzVG9SZW1vdmVbMF0gPSBuZXdOb2RlOwogICAgICBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCA9IDE7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNsb25lQW5kQW5ub3RhdGVGbihmbiwgYW5ub3RhdGlvbikgewogICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKCkgeyByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgfSwgZm4sIGFubm90YXRpb24pOwogICAgfQoKCiAgICBmdW5jdGlvbiBpbnZva2VMaW5rRm4obGlua0ZuLCBzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7CiAgICAgIHRyeSB7CiAgICAgICAgbGlua0ZuKHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pOwogICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlLCBzdGFydGluZ1RhZygkZWxlbWVudCkpOwogICAgICB9CiAgICB9CiAgfV07Cn0KCnZhciBQUkVGSVhfUkVHRVhQID0gL14oeFtcOlwtX118ZGF0YVtcOlwtX10pL2k7Ci8qKgogKiBDb252ZXJ0cyBhbGwgYWNjZXB0ZWQgZGlyZWN0aXZlcyBmb3JtYXQgaW50byBwcm9wZXIgZGlyZWN0aXZlIG5hbWUuCiAqIEFsbCBvZiB0aGVzZSB3aWxsIGJlY29tZSAnbXlEaXJlY3RpdmUnOgogKiAgIG15OkRpcmVjdGl2ZQogKiAgIG15LWRpcmVjdGl2ZQogKiAgIHgtbXktZGlyZWN0aXZlCiAqICAgZGF0YS1teTpkaXJlY3RpdmUKICoKICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci4KICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemUKICovCmZ1bmN0aW9uIGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKSB7CiAgcmV0dXJuIGNhbWVsQ2FzZShuYW1lLnJlcGxhY2UoUFJFRklYX1JFR0VYUCwgJycpKTsKfQoKLyoqCiAqIEBuZ2RvYyB0eXBlCiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIHNoYXJlZCBvYmplY3QgYmV0d2VlbiBkaXJlY3RpdmUgY29tcGlsZSAvIGxpbmtpbmcgZnVuY3Rpb25zIHdoaWNoIGNvbnRhaW5zIG5vcm1hbGl6ZWQgRE9NCiAqIGVsZW1lbnQgYXR0cmlidXRlcy4gVGhlIHZhbHVlcyByZWZsZWN0IGN1cnJlbnQgYmluZGluZyBzdGF0ZSBge3sgfX1gLiBUaGUgbm9ybWFsaXphdGlvbiBpcwogKiBuZWVkZWQgc2luY2UgYWxsIG9mIHRoZXNlIGFyZSB0cmVhdGVkIGFzIGVxdWl2YWxlbnQgaW4gQW5ndWxhcjoKICoKICogYGBgCiAqICAgIDxzcGFuIG5nOmJpbmQ9ImEiIG5nLWJpbmQ9ImEiIGRhdGEtbmctYmluZD0iYSIgeC1uZy1iaW5kPSJhIj4KICogYGBgCiAqLwoKLyoqCiAqIEBuZ2RvYyBwcm9wZXJ0eQogKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0cgogKgogKiBAZGVzY3JpcHRpb24KICogQSBtYXAgb2YgRE9NIGVsZW1lbnQgYXR0cmlidXRlIG5hbWVzIHRvIHRoZSBub3JtYWxpemVkIG5hbWUuIFRoaXMgaXMKICogbmVlZGVkIHRvIGRvIHJldmVyc2UgbG9va3VwIGZyb20gbm9ybWFsaXplZCBuYW1lIGJhY2sgdG8gYWN0dWFsIG5hbWUuCiAqLwoKCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRzZXQKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIFNldCBET00gZWxlbWVudCBhdHRyaWJ1dGUgdmFsdWUuCiAqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5vcm1hbGl6ZWQgZWxlbWVudCBhdHRyaWJ1dGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gbW9kaWZ5LiBUaGUgbmFtZSBpcwogKiAgICAgICAgICByZXZlcnNlLXRyYW5zbGF0ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0ciAkYXR0cn0KICogICAgICAgICAgcHJvcGVydHkgdG8gdGhlIG9yaWdpbmFsIG5hbWUuCiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byBzZXQgdGhlIGF0dHJpYnV0ZSB0by4gVGhlIHZhbHVlIGNhbiBiZSBhbiBpbnRlcnBvbGF0ZWQgc3RyaW5nLgogKi8KCgoKLyoqCiAqIENsb3N1cmUgY29tcGlsZXIgdHlwZSBpbmZvcm1hdGlvbgogKi8KCmZ1bmN0aW9uIG5vZGVzZXRMaW5raW5nRm4oCiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSwKICAvKiBOb2RlTGlzdCAqLyBub2RlTGlzdCwKICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LAogIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGbgope30KCmZ1bmN0aW9uIGRpcmVjdGl2ZUxpbmtpbmdGbigKICAvKiBub2Rlc2V0TGlua2luZ0ZuICovIG5vZGVzZXRMaW5raW5nRm4sCiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSwKICAvKiBOb2RlICovIG5vZGUsCiAgLyogRWxlbWVudCAqLyByb290RWxlbWVudCwKICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm4KKXt9CgpmdW5jdGlvbiB0b2tlbkRpZmZlcmVuY2Uoc3RyMSwgc3RyMikgewogIHZhciB2YWx1ZXMgPSAnJywKICAgICAgdG9rZW5zMSA9IHN0cjEuc3BsaXQoL1xzKy8pLAogICAgICB0b2tlbnMyID0gc3RyMi5zcGxpdCgvXHMrLyk7CgogIG91dGVyOgogIGZvcih2YXIgaSA9IDA7IGkgPCB0b2tlbnMxLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgdG9rZW4gPSB0b2tlbnMxW2ldOwogICAgZm9yKHZhciBqID0gMDsgaiA8IHRva2VuczIubGVuZ3RoOyBqKyspIHsKICAgICAgaWYodG9rZW4gPT0gdG9rZW5zMltqXSkgY29udGludWUgb3V0ZXI7CiAgICB9CiAgICB2YWx1ZXMgKz0gKHZhbHVlcy5sZW5ndGggPiAwID8gJyAnIDogJycpICsgdG9rZW47CiAgfQogIHJldHVybiB2YWx1ZXM7Cn0KCmZ1bmN0aW9uIHJlbW92ZUNvbW1lbnRzKGpxTm9kZXMpIHsKICBqcU5vZGVzID0ganFMaXRlKGpxTm9kZXMpOwogIHZhciBpID0ganFOb2Rlcy5sZW5ndGg7CgogIGlmIChpIDw9IDEpIHsKICAgIHJldHVybiBqcU5vZGVzOwogIH0KCiAgd2hpbGUgKGktLSkgewogICAgdmFyIG5vZGUgPSBqcU5vZGVzW2ldOwogICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UKSB7CiAgICAgIHNwbGljZS5jYWxsKGpxTm9kZXMsIGksIDEpOwogICAgfQogIH0KICByZXR1cm4ganFOb2RlczsKfQoKLyoqCiAqIEBuZ2RvYyBwcm92aWRlcgogKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUge0BsaW5rIG5nLiRjb250cm9sbGVyICRjb250cm9sbGVyIHNlcnZpY2V9IGlzIHVzZWQgYnkgQW5ndWxhciB0byBjcmVhdGUgbmV3CiAqIGNvbnRyb2xsZXJzLgogKgogKiBUaGlzIHByb3ZpZGVyIGFsbG93cyBjb250cm9sbGVyIHJlZ2lzdHJhdGlvbiB2aWEgdGhlCiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyIHJlZ2lzdGVyfSBtZXRob2QuCiAqLwpmdW5jdGlvbiAkQ29udHJvbGxlclByb3ZpZGVyKCkgewogIHZhciBjb250cm9sbGVycyA9IHt9LAogICAgICBnbG9iYWxzID0gZmFsc2UsCiAgICAgIENOVFJMX1JFRyA9IC9eKFxTKykoXHMrYXNccysoXHcrKSk/JC87CgoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlcgogICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlIGtleXMgYXJlCiAgICogICAgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgY29uc3RydWN0b3JzLgogICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZm4gKG9wdGlvbmFsbHkgZGVjb3JhdGVkIHdpdGggREkKICAgKiAgICBhbm5vdGF0aW9ucyBpbiB0aGUgYXJyYXkgbm90YXRpb24pLgogICAqLwogIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBjb25zdHJ1Y3RvcikgewogICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2NvbnRyb2xsZXInKTsKICAgIGlmIChpc09iamVjdChuYW1lKSkgewogICAgICBleHRlbmQoY29udHJvbGxlcnMsIG5hbWUpOwogICAgfSBlbHNlIHsKICAgICAgY29udHJvbGxlcnNbbmFtZV0gPSBjb25zdHJ1Y3RvcjsKICAgIH0KICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHMKICAgKiBAZGVzY3JpcHRpb24gSWYgY2FsbGVkLCBhbGxvd3MgYCRjb250cm9sbGVyYCB0byBmaW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3JzIG9uIGB3aW5kb3dgCiAgICovCiAgdGhpcy5hbGxvd0dsb2JhbHMgPSBmdW5jdGlvbigpIHsKICAgIGdsb2JhbHMgPSB0cnVlOwogIH07CgoKICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckd2luZG93JywgZnVuY3Rpb24oJGluamVjdG9yLCAkd2luZG93KSB7CgogICAgLyoqCiAgICAgKiBAbmdkb2Mgc2VydmljZQogICAgICogQG5hbWUgJGNvbnRyb2xsZXIKICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3IKICAgICAqCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gY29uc3RydWN0b3IgSWYgY2FsbGVkIHdpdGggYSBmdW5jdGlvbiB0aGVuIGl0J3MgY29uc2lkZXJlZCB0byBiZSB0aGUKICAgICAqICAgIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIE90aGVyd2lzZSBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgYSBzdHJpbmcgd2hpY2ggaXMgdXNlZAogICAgICogICAgdG8gcmV0cmlldmUgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgdXNpbmcgdGhlIGZvbGxvd2luZyBzdGVwczoKICAgICAqCiAgICAgKiAgICAqIGNoZWNrIGlmIGEgY29udHJvbGxlciB3aXRoIGdpdmVuIG5hbWUgaXMgcmVnaXN0ZXJlZCB2aWEgYCRjb250cm9sbGVyUHJvdmlkZXJgCiAgICAgKiAgICAqIGNoZWNrIGlmIGV2YWx1YXRpbmcgdGhlIHN0cmluZyBvbiB0aGUgY3VycmVudCBzY29wZSByZXR1cm5zIGEgY29uc3RydWN0b3IKICAgICAqICAgICogaWYgJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHMsIGNoZWNrIGB3aW5kb3dbY29uc3RydWN0b3JdYCBvbiB0aGUgZ2xvYmFsCiAgICAgKiAgICAgIGB3aW5kb3dgIG9iamVjdCAobm90IHJlY29tbWVuZGVkKQogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgSW5qZWN0aW9uIGxvY2FscyBmb3IgQ29udHJvbGxlci4KICAgICAqIEByZXR1cm4ge09iamVjdH0gSW5zdGFuY2Ugb2YgZ2l2ZW4gY29udHJvbGxlci4KICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIGAkY29udHJvbGxlcmAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgaW5zdGFudGlhdGluZyBjb250cm9sbGVycy4KICAgICAqCiAgICAgKiBJdCdzIGp1c3QgYSBzaW1wbGUgY2FsbCB0byB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgYnV0IGV4dHJhY3RlZCBpbnRvCiAgICAgKiBhIHNlcnZpY2UsIHNvIHRoYXQgb25lIGNhbiBvdmVycmlkZSB0aGlzIHNlcnZpY2Ugd2l0aCBbQkMgdmVyc2lvbl0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTY0OTc4OCkuCiAgICAgKi8KICAgIHJldHVybiBmdW5jdGlvbihleHByZXNzaW9uLCBsb2NhbHMsIGxhdGVyLCBpZGVudCkgewogICAgICAvLyBQUklWQVRFIEFQSToKICAgICAgLy8gICBwYXJhbSBgbGF0ZXJgIC0tLSBpbmRpY2F0ZXMgdGhhdCB0aGUgY29udHJvbGxlcidzIGNvbnN0cnVjdG9yIGlzIGludm9rZWQgYXQgYSBsYXRlciB0aW1lLgogICAgICAvLyAgICAgICAgICAgICAgICAgICAgIElmIHRydWUsICRjb250cm9sbGVyIHdpbGwgYWxsb2NhdGUgdGhlIG9iamVjdCB3aXRoIHRoZSBjb3JyZWN0CiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgcHJvdG90eXBlIGNoYWluLCBidXQgd2lsbCBub3QgaW52b2tlIHRoZSBjb250cm9sbGVyIHVudGlsIGEgcmV0dXJuZWQKICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayBpcyBpbnZva2VkLgogICAgICAvLyAgIHBhcmFtIGBpZGVudGAgLS0tIEFuIG9wdGlvbmFsIGxhYmVsIHdoaWNoIG92ZXJyaWRlcyB0aGUgbGFiZWwgcGFyc2VkIGZyb20gdGhlIGNvbnRyb2xsZXIKICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCBpZiBhbnkuCiAgICAgIHZhciBpbnN0YW5jZSwgbWF0Y2gsIGNvbnN0cnVjdG9yLCBpZGVudGlmaWVyOwogICAgICBsYXRlciA9IGxhdGVyID09PSB0cnVlOwogICAgICBpZiAoaWRlbnQgJiYgaXNTdHJpbmcoaWRlbnQpKSB7CiAgICAgICAgaWRlbnRpZmllciA9IGlkZW50OwogICAgICB9CgogICAgICBpZihpc1N0cmluZyhleHByZXNzaW9uKSkgewogICAgICAgIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaChDTlRSTF9SRUcpLAogICAgICAgIGNvbnN0cnVjdG9yID0gbWF0Y2hbMV0sCiAgICAgICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIgfHwgbWF0Y2hbM107CiAgICAgICAgZXhwcmVzc2lvbiA9IGNvbnRyb2xsZXJzLmhhc093blByb3BlcnR5KGNvbnN0cnVjdG9yKQogICAgICAgICAgICA/IGNvbnRyb2xsZXJzW2NvbnN0cnVjdG9yXQogICAgICAgICAgICA6IGdldHRlcihsb2NhbHMuJHNjb3BlLCBjb25zdHJ1Y3RvciwgdHJ1ZSkgfHwKICAgICAgICAgICAgICAgIChnbG9iYWxzID8gZ2V0dGVyKCR3aW5kb3csIGNvbnN0cnVjdG9yLCB0cnVlKSA6IHVuZGVmaW5lZCk7CgogICAgICAgIGFzc2VydEFyZ0ZuKGV4cHJlc3Npb24sIGNvbnN0cnVjdG9yLCB0cnVlKTsKICAgICAgfQoKICAgICAgaWYgKGxhdGVyKSB7CiAgICAgICAgLy8gSW5zdGFudGlhdGUgY29udHJvbGxlciBsYXRlcjoKICAgICAgICAvLyBUaGlzIG1hY2hpbmVyeSBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgb2JqZWN0IGJlZm9yZSBjYWxsaW5nIHRoZQogICAgICAgIC8vIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3RvciBpdHNlbGYuCiAgICAgICAgLy8KICAgICAgICAvLyBUaGlzIGFsbG93cyBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIHRoZSBjb250cm9sbGVyIGJlZm9yZSB0aGUgY29uc3RydWN0b3IgaXMKICAgICAgICAvLyBpbnZva2VkLiBQcmltYXJpbHksIHRoaXMgaXMgdXNlZCBmb3IgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBpbiAkY29tcGlsZS4KICAgICAgICAvLwogICAgICAgIC8vIFRoaXMgZmVhdHVyZSBpcyBub3QgaW50ZW5kZWQgZm9yIHVzZSBieSBhcHBsaWNhdGlvbnMsIGFuZCBpcyB0aHVzIG5vdCBkb2N1bWVudGVkCiAgICAgICAgLy8gcHVibGljbHkuCiAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24oKSB7fTsKICAgICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSAoaXNBcnJheShleHByZXNzaW9uKSA/CiAgICAgICAgICBleHByZXNzaW9uW2V4cHJlc3Npb24ubGVuZ3RoIC0gMV0gOiBleHByZXNzaW9uKS5wcm90b3R5cGU7CiAgICAgICAgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsKCiAgICAgICAgaWYgKGlkZW50aWZpZXIpIHsKICAgICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAkaW5qZWN0b3IuaW52b2tlKGV4cHJlc3Npb24sIGluc3RhbmNlLCBsb2NhbHMsIGNvbnN0cnVjdG9yKTsKICAgICAgICAgIHJldHVybiBpbnN0YW5jZTsKICAgICAgICB9LCB7CiAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsCiAgICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGluc3RhbmNlID0gJGluamVjdG9yLmluc3RhbnRpYXRlKGV4cHJlc3Npb24sIGxvY2FscywgY29uc3RydWN0b3IpOwoKICAgICAgaWYgKGlkZW50aWZpZXIpIHsKICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpbnN0YW5jZTsKICAgIH07CgogICAgZnVuY3Rpb24gYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBuYW1lKSB7CiAgICAgIGlmICghKGxvY2FscyAmJiBpc09iamVjdChsb2NhbHMuJHNjb3BlKSkpIHsKICAgICAgICB0aHJvdyBtaW5FcnIoJyRjb250cm9sbGVyJykoJ25vc2NwJywKICAgICAgICAgICJDYW5ub3QgZXhwb3J0IGNvbnRyb2xsZXIgJ3swfScgYXMgJ3sxfSchIE5vICRzY29wZSBvYmplY3QgcHJvdmlkZWQgdmlhIGBsb2NhbHNgLiIsCiAgICAgICAgICBuYW1lLCBpZGVudGlmaWVyKTsKICAgICAgfQoKICAgICAgbG9jYWxzLiRzY29wZVtpZGVudGlmaWVyXSA9IGluc3RhbmNlOwogICAgfQogIH1dOwp9CgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJGRvY3VtZW50CiAqIEByZXF1aXJlcyAkd2luZG93CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIHtAbGluayBhbmd1bGFyLmVsZW1lbnQgalF1ZXJ5IG9yIGpxTGl0ZX0gd3JhcHBlciBmb3IgdGhlIGJyb3dzZXIncyBgd2luZG93LmRvY3VtZW50YCBvYmplY3QuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlIG1vZHVsZT0iZG9jdW1lbnRFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgICA8cD4kZG9jdW1lbnQgdGl0bGU6IDxiIG5nLWJpbmQ9InRpdGxlIj48L2I+PC9wPgogICAgICAgICA8cD53aW5kb3cuZG9jdW1lbnQgdGl0bGU6IDxiIG5nLWJpbmQ9IndpbmRvd1RpdGxlIj48L2I+PC9wPgogICAgICAgPC9kaXY+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgICBhbmd1bGFyLm1vZHVsZSgnZG9jdW1lbnRFeGFtcGxlJywgW10pCiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGRvY3VtZW50KSB7CiAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJGRvY3VtZW50WzBdLnRpdGxlOwogICAgICAgICAgICRzY29wZS53aW5kb3dUaXRsZSA9IGFuZ3VsYXIuZWxlbWVudCh3aW5kb3cuZG9jdW1lbnQpWzBdLnRpdGxlOwogICAgICAgICB9XSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwpmdW5jdGlvbiAkRG9jdW1lbnRQcm92aWRlcigpewogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKHdpbmRvdyl7CiAgICByZXR1cm4ganFMaXRlKHdpbmRvdy5kb2N1bWVudCk7CiAgfV07Cn0KCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkZXhjZXB0aW9uSGFuZGxlcgogKiBAcmVxdWlyZXMgbmcuJGxvZwogKgogKiBAZGVzY3JpcHRpb24KICogQW55IHVuY2F1Z2h0IGV4Y2VwdGlvbiBpbiBhbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRlbGVnYXRlZCB0byB0aGlzIHNlcnZpY2UuCiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseSBkZWxlZ2F0ZXMgdG8gYCRsb2cuZXJyb3JgIHdoaWNoIGxvZ3MgaXQgaW50bwogKiB0aGUgYnJvd3NlciBjb25zb2xlLgogKgogKiBJbiB1bml0IHRlc3RzLCBpZiBgYW5ndWxhci1tb2Nrcy5qc2AgaXMgbG9hZGVkLCB0aGlzIHNlcnZpY2UgaXMgb3ZlcnJpZGRlbiBieQogKiB7QGxpbmsgbmdNb2NrLiRleGNlcHRpb25IYW5kbGVyIG1vY2sgJGV4Y2VwdGlvbkhhbmRsZXJ9IHdoaWNoIGFpZHMgaW4gdGVzdGluZy4KICoKICogIyMgRXhhbXBsZToKICoKICogYGBganMKICogICBhbmd1bGFyLm1vZHVsZSgnZXhjZXB0aW9uT3ZlcnJpZGUnLCBbXSkuZmFjdG9yeSgnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbiAoKSB7CiAqICAgICByZXR1cm4gZnVuY3Rpb24gKGV4Y2VwdGlvbiwgY2F1c2UpIHsKICogICAgICAgZXhjZXB0aW9uLm1lc3NhZ2UgKz0gJyAoY2F1c2VkIGJ5ICInICsgY2F1c2UgKyAnIiknOwogKiAgICAgICB0aHJvdyBleGNlcHRpb247CiAqICAgICB9OwogKiAgIH0pOwogKiBgYGAKICoKICogVGhpcyBleGFtcGxlIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbCBhY3Rpb24gb2YgYCRleGNlcHRpb25IYW5kbGVyYCwgdG8gbWFrZSBhbmd1bGFyCiAqIGV4Y2VwdGlvbnMgZmFpbCBoYXJkIHdoZW4gdGhleSBoYXBwZW4sIGluc3RlYWQgb2YganVzdCBsb2dnaW5nIHRvIHRoZSBjb25zb2xlLgogKgogKiA8aHIgLz4KICogTm90ZSwgdGhhdCBjb2RlIGV4ZWN1dGVkIGluIGV2ZW50LWxpc3RlbmVycyAoZXZlbiB0aG9zZSByZWdpc3RlcmVkIHVzaW5nIGpxTGl0ZSdzIGBvbmAvYGJpbmRgCiAqIG1ldGhvZHMpIGRvZXMgbm90IGRlbGVnYXRlIGV4Y2VwdGlvbnMgdG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0KICogKHVubGVzcyBleGVjdXRlZCBkdXJpbmcgYSBkaWdlc3QpLgogKgogKiBJZiB5b3Ugd2lzaCwgeW91IGNhbiBtYW51YWxseSBkZWxlZ2F0ZSBleGNlcHRpb25zLCBlLmcuCiAqIGB0cnkgeyAuLi4gfSBjYXRjaChlKSB7ICRleGNlcHRpb25IYW5kbGVyKGUpOyB9YAogKgogKiBAcGFyYW0ge0Vycm9yfSBleGNlcHRpb24gRXhjZXB0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXJyb3IuCiAqIEBwYXJhbSB7c3RyaW5nPX0gY2F1c2Ugb3B0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbnRleHQgaW4gd2hpY2gKICogICAgICAgdGhlIGVycm9yIHdhcyB0aHJvd24uCiAqCiAqLwpmdW5jdGlvbiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkgewogIHRoaXMuJGdldCA9IFsnJGxvZycsIGZ1bmN0aW9uKCRsb2cpIHsKICAgIHJldHVybiBmdW5jdGlvbihleGNlcHRpb24sIGNhdXNlKSB7CiAgICAgICRsb2cuZXJyb3IuYXBwbHkoJGxvZywgYXJndW1lbnRzKTsKICAgIH07CiAgfV07Cn0KCi8qKgogKiBQYXJzZSBoZWFkZXJzIGludG8ga2V5IHZhbHVlIG9iamVjdAogKgogKiBAcGFyYW0ge3N0cmluZ30gaGVhZGVycyBSYXcgaGVhZGVycyBhcyBhIHN0cmluZwogKiBAcmV0dXJucyB7T2JqZWN0fSBQYXJzZWQgaGVhZGVycyBhcyBrZXkgdmFsdWUgb2JqZWN0CiAqLwpmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykgewogIHZhciBwYXJzZWQgPSB7fSwga2V5LCB2YWwsIGk7CgogIGlmICghaGVhZGVycykgcmV0dXJuIHBhcnNlZDsKCiAgZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcbicpLCBmdW5jdGlvbihsaW5lKSB7CiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7CiAgICBrZXkgPSBsb3dlcmNhc2UodHJpbShsaW5lLnN1YnN0cigwLCBpKSkpOwogICAgdmFsID0gdHJpbShsaW5lLnN1YnN0cihpICsgMSkpOwoKICAgIGlmIChrZXkpIHsKICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDsKICAgIH0KICB9KTsKCiAgcmV0dXJuIHBhcnNlZDsKfQoKCi8qKgogKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gcGFyc2VkIGhlYWRlcnMuCiAqCiAqIEhlYWRlcnMgYXJlIGxhenkgcGFyc2VkIHdoZW4gZmlyc3QgcmVxdWVzdGVkLgogKiBAc2VlIHBhcnNlSGVhZGVycwogKgogKiBAcGFyYW0geyhzdHJpbmd8T2JqZWN0KX0gaGVhZGVycyBIZWFkZXJzIHRvIHByb3ZpZGUgYWNjZXNzIHRvLgogKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nPSl9IFJldHVybnMgYSBnZXR0ZXIgZnVuY3Rpb24gd2hpY2ggaWYgY2FsbGVkIHdpdGg6CiAqCiAqICAgLSBpZiBjYWxsZWQgd2l0aCBzaW5nbGUgYW4gYXJndW1lbnQgcmV0dXJucyBhIHNpbmdsZSBoZWFkZXIgdmFsdWUgb3IgbnVsbAogKiAgIC0gaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGhlYWRlcnMuCiAqLwpmdW5jdGlvbiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpIHsKICB2YXIgaGVhZGVyc09iaiA9IGlzT2JqZWN0KGhlYWRlcnMpID8gaGVhZGVycyA6IHVuZGVmaW5lZDsKCiAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHsKICAgIGlmICghaGVhZGVyc09iaikgaGVhZGVyc09iaiA9ICBwYXJzZUhlYWRlcnMoaGVhZGVycyk7CgogICAgaWYgKG5hbWUpIHsKICAgICAgcmV0dXJuIGhlYWRlcnNPYmpbbG93ZXJjYXNlKG5hbWUpXSB8fCBudWxsOwogICAgfQoKICAgIHJldHVybiBoZWFkZXJzT2JqOwogIH07Cn0KCgovKioKICogQ2hhaW4gYWxsIGdpdmVuIGZ1bmN0aW9ucwogKgogKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIGJvdGggcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtaW5nCiAqCiAqIEBwYXJhbSB7Kn0gZGF0YSBEYXRhIHRvIHRyYW5zZm9ybS4KICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmc9KX0gaGVhZGVycyBIdHRwIGhlYWRlcnMgZ2V0dGVyIGZuLgogKiBAcGFyYW0geyhGdW5jdGlvbnxBcnJheS48RnVuY3Rpb24+KX0gZm5zIEZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIGZ1bmN0aW9ucy4KICogQHJldHVybnMgeyp9IFRyYW5zZm9ybWVkIGRhdGEuCiAqLwpmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykgewogIGlmIChpc0Z1bmN0aW9uKGZucykpCiAgICByZXR1cm4gZm5zKGRhdGEsIGhlYWRlcnMpOwoKICBmb3JFYWNoKGZucywgZnVuY3Rpb24oZm4pIHsKICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTsKICB9KTsKCiAgcmV0dXJuIGRhdGE7Cn0KCgpmdW5jdGlvbiBpc1N1Y2Nlc3Moc3RhdHVzKSB7CiAgcmV0dXJuIDIwMCA8PSBzdGF0dXMgJiYgc3RhdHVzIDwgMzAwOwp9CgoKLyoqCiAqIEBuZ2RvYyBwcm92aWRlcgogKiBAbmFtZSAkaHR0cFByb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKiBVc2UgYCRodHRwUHJvdmlkZXJgIHRvIGNoYW5nZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUge0BsaW5rIG5nLiRodHRwICRodHRwfSBzZXJ2aWNlLgogKiAqLwpmdW5jdGlvbiAkSHR0cFByb3ZpZGVyKCkgewogIHZhciBKU09OX1NUQVJUID0gL15ccyooXFt8XHtbXlx7XSkvLAogICAgICBKU09OX0VORCA9IC9bXH1cXV1ccyokLywKICAgICAgUFJPVEVDVElPTl9QUkVGSVggPSAvXlwpXF1cfScsP1xuLywKICAgICAgQVBQTElDQVRJT05fSlNPTiA9ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04gPSB7J0NvbnRlbnQtVHlwZSc6IEFQUExJQ0FUSU9OX0pTT04gKyAnO2NoYXJzZXQ9dXRmLTgnfTsKCiAgLyoqCiAgICogQG5nZG9jIHByb3BlcnR5CiAgICogQG5hbWUgJGh0dHBQcm92aWRlciNkZWZhdWx0cwogICAqIEBkZXNjcmlwdGlvbgogICAqCiAgICogT2JqZWN0IGNvbnRhaW5pbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHJlcXVlc3RzLgogICAqCiAgICogLSAqKmBkZWZhdWx0cy54c3JmQ29va2llTmFtZWAqKiAtIHtzdHJpbmd9IC0gTmFtZSBvZiBjb29raWUgY29udGFpbmluZyB0aGUgWFNSRiB0b2tlbi4KICAgKiBEZWZhdWx0cyB2YWx1ZSBpcyBgJ1hTUkYtVE9LRU4nYC4KICAgKgogICAqIC0gKipgZGVmYXVsdHMueHNyZkhlYWRlck5hbWVgKiogLSB7c3RyaW5nfSAtIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGUKICAgKiBYU1JGIHRva2VuLiBEZWZhdWx0cyB2YWx1ZSBpcyBgJ1gtWFNSRi1UT0tFTidgLgogICAqCiAgICogLSAqKmBkZWZhdWx0cy5oZWFkZXJzYCoqIC0ge09iamVjdH0gLSBEZWZhdWx0IGhlYWRlcnMgZm9yIGFsbCAkaHR0cCByZXF1ZXN0cy4KICAgKiBSZWZlciB0byB7QGxpbmsgbmcuJGh0dHAjc2V0dGluZy1odHRwLWhlYWRlcnMgJGh0dHB9IGZvciBkb2N1bWVudGF0aW9uIG9uCiAgICogc2V0dGluZyBkZWZhdWx0IGhlYWRlcnMuCiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5jb21tb25gKioKICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLnBvc3RgKioKICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLnB1dGAqKgogICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucGF0Y2hgKioKICAgKiovCiAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHsKICAgIC8vIHRyYW5zZm9ybSBpbmNvbWluZyByZXNwb25zZSBkYXRhCiAgICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0oZGF0YSwgaGVhZGVycykgewogICAgICBpZiAoaXNTdHJpbmcoZGF0YSkpIHsKICAgICAgICAvLyBzdHJpcCBqc29uIHZ1bG5lcmFiaWxpdHkgcHJvdGVjdGlvbiBwcmVmaXgKICAgICAgICBkYXRhID0gZGF0YS5yZXBsYWNlKFBST1RFQ1RJT05fUFJFRklYLCAnJyk7CiAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0gaGVhZGVycygnQ29udGVudC1UeXBlJyk7CiAgICAgICAgaWYgKChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5pbmRleE9mKEFQUExJQ0FUSU9OX0pTT04pID09PSAwKSB8fAogICAgICAgICAgICAoSlNPTl9TVEFSVC50ZXN0KGRhdGEpICYmIEpTT05fRU5ELnRlc3QoZGF0YSkpKSB7CiAgICAgICAgICBkYXRhID0gZnJvbUpzb24oZGF0YSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBkYXRhOwogICAgfV0sCgogICAgLy8gdHJhbnNmb3JtIG91dGdvaW5nIHJlcXVlc3QgZGF0YQogICAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uKGQpIHsKICAgICAgcmV0dXJuIGlzT2JqZWN0KGQpICYmICFpc0ZpbGUoZCkgJiYgIWlzQmxvYihkKSA/IHRvSnNvbihkKSA6IGQ7CiAgICB9XSwKCiAgICAvLyBkZWZhdWx0IGhlYWRlcnMKICAgIGhlYWRlcnM6IHsKICAgICAgY29tbW9uOiB7CiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonCiAgICAgIH0sCiAgICAgIHBvc3Q6ICAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pLAogICAgICBwdXQ6ICAgIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSwKICAgICAgcGF0Y2g6ICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTikKICAgIH0sCgogICAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJywKICAgIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJwogIH07CgogIHZhciB1c2VBcHBseUFzeW5jID0gZmFsc2U7CiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRodHRwUHJvdmlkZXIjdXNlQXBwbHlBc3luYwogICAqIEBkZXNjcmlwdGlvbgogICAqCiAgICogQ29uZmlndXJlICRodHRwIHNlcnZpY2UgdG8gY29tYmluZSBwcm9jZXNzaW5nIG9mIG11bHRpcGxlIGh0dHAgcmVzcG9uc2VzIHJlY2VpdmVkIGF0IGFyb3VuZAogICAqIHRoZSBzYW1lIHRpbWUgdmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jICRyb290U2NvcGUuJGFwcGx5QXN5bmN9LiBUaGlzIGNhbiByZXN1bHQgaW4KICAgKiBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudCBmb3IgYmlnZ2VyIGFwcGxpY2F0aW9ucyB0aGF0IG1ha2UgbWFueSBIVFRQIHJlcXVlc3RzCiAgICogY29uY3VycmVudGx5IChjb21tb24gZHVyaW5nIGFwcGxpY2F0aW9uIGJvb3RzdHJhcCkuCiAgICoKICAgKiBEZWZhdWx0cyB0byBmYWxzZS4gSWYgbm8gdmFsdWUgaXMgc3BlY2lmZWQsIHJldHVybnMgdGhlIGN1cnJlbnQgY29uZmlndXJlZCB2YWx1ZS4KICAgKgogICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHRydWUsIHdoZW4gcmVxdWVzdHMgYXJlIGxvYWRlZCwgdGhleSB3aWxsIHNjaGVkdWxlIGEgZGVmZXJyZWQKICAgKiAgICAiYXBwbHkiIG9uIHRoZSBuZXh0IHRpY2ssIGdpdmluZyB0aW1lIGZvciBzdWJzZXF1ZW50IHJlcXVlc3RzIGluIGEgcm91Z2hseSB+MTBtcyB3aW5kb3cKICAgKiAgICB0byBsb2FkIGFuZCBzaGFyZSB0aGUgc2FtZSBkaWdlc3QgY3ljbGUuCiAgICoKICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxPYmplY3R9IElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSAkaHR0cFByb3ZpZGVyIGZvciBjaGFpbmluZy4KICAgKiAgICBvdGhlcndpc2UsIHJldHVybnMgdGhlIGN1cnJlbnQgY29uZmlndXJlZCB2YWx1ZS4KICAgKiovCiAgdGhpcy51c2VBcHBseUFzeW5jID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7CiAgICAgIHVzZUFwcGx5QXN5bmMgPSAhIXZhbHVlOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIHJldHVybiB1c2VBcHBseUFzeW5jOwogIH07CgogIC8qKgogICAqIEFyZSBvcmRlcmVkIGJ5IHJlcXVlc3QsIGkuZS4gdGhleSBhcmUgYXBwbGllZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUKICAgKiBhcnJheSwgb24gcmVxdWVzdCwgYnV0IHJldmVyc2Ugb3JkZXIsIG9uIHJlc3BvbnNlLgogICAqLwogIHZhciBpbnRlcmNlcHRvckZhY3RvcmllcyA9IHRoaXMuaW50ZXJjZXB0b3JzID0gW107CgogIHRoaXMuJGdldCA9IFsnJGh0dHBCYWNrZW5kJywgJyRicm93c2VyJywgJyRjYWNoZUZhY3RvcnknLCAnJHJvb3RTY29wZScsICckcScsICckaW5qZWN0b3InLAogICAgICBmdW5jdGlvbigkaHR0cEJhY2tlbmQsICRicm93c2VyLCAkY2FjaGVGYWN0b3J5LCAkcm9vdFNjb3BlLCAkcSwgJGluamVjdG9yKSB7CgogICAgdmFyIGRlZmF1bHRDYWNoZSA9ICRjYWNoZUZhY3RvcnkoJyRodHRwJyk7CgogICAgLyoqCiAgICAgKiBJbnRlcmNlcHRvcnMgc3RvcmVkIGluIHJldmVyc2Ugb3JkZXIuIElubmVyIGludGVyY2VwdG9ycyBiZWZvcmUgb3V0ZXIgaW50ZXJjZXB0b3JzLgogICAgICogVGhlIHJldmVyc2FsIGlzIG5lZWRlZCBzbyB0aGF0IHdlIGNhbiBidWlsZCB1cCB0aGUgaW50ZXJjZXB0aW9uIGNoYWluIGFyb3VuZCB0aGUKICAgICAqIHNlcnZlciByZXF1ZXN0LgogICAgICovCiAgICB2YXIgcmV2ZXJzZWRJbnRlcmNlcHRvcnMgPSBbXTsKCiAgICBmb3JFYWNoKGludGVyY2VwdG9yRmFjdG9yaWVzLCBmdW5jdGlvbihpbnRlcmNlcHRvckZhY3RvcnkpIHsKICAgICAgcmV2ZXJzZWRJbnRlcmNlcHRvcnMudW5zaGlmdChpc1N0cmluZyhpbnRlcmNlcHRvckZhY3RvcnkpCiAgICAgICAgICA/ICRpbmplY3Rvci5nZXQoaW50ZXJjZXB0b3JGYWN0b3J5KSA6ICRpbmplY3Rvci5pbnZva2UoaW50ZXJjZXB0b3JGYWN0b3J5KSk7CiAgICB9KTsKCiAgICAvKioKICAgICAqIEBuZ2RvYyBzZXJ2aWNlCiAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICogQG5hbWUgJGh0dHAKICAgICAqIEByZXF1aXJlcyBuZy4kaHR0cEJhY2tlbmQKICAgICAqIEByZXF1aXJlcyAkY2FjaGVGYWN0b3J5CiAgICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZQogICAgICogQHJlcXVpcmVzICRxCiAgICAgKiBAcmVxdWlyZXMgJGluamVjdG9yCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBUaGUgYCRodHRwYCBzZXJ2aWNlIGlzIGEgY29yZSBBbmd1bGFyIHNlcnZpY2UgdGhhdCBmYWNpbGl0YXRlcyBjb21tdW5pY2F0aW9uIHdpdGggdGhlIHJlbW90ZQogICAgICogSFRUUCBzZXJ2ZXJzIHZpYSB0aGUgYnJvd3NlcidzIFtYTUxIdHRwUmVxdWVzdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4veG1saHR0cHJlcXVlc3QpCiAgICAgKiBvYmplY3Qgb3IgdmlhIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkuCiAgICAgKgogICAgICogRm9yIHVuaXQgdGVzdGluZyBhcHBsaWNhdGlvbnMgdGhhdCB1c2UgYCRodHRwYCBzZXJ2aWNlLCBzZWUKICAgICAqIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kICRodHRwQmFja2VuZCBtb2NrfS4KICAgICAqCiAgICAgKiBGb3IgYSBoaWdoZXIgbGV2ZWwgb2YgYWJzdHJhY3Rpb24sIHBsZWFzZSBjaGVjayBvdXQgdGhlIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZQogICAgICogJHJlc291cmNlfSBzZXJ2aWNlLgogICAgICoKICAgICAqIFRoZSAkaHR0cCBBUEkgaXMgYmFzZWQgb24gdGhlIHtAbGluayBuZy4kcSBkZWZlcnJlZC9wcm9taXNlIEFQSXN9IGV4cG9zZWQgYnkKICAgICAqIHRoZSAkcSBzZXJ2aWNlLiBXaGlsZSBmb3Igc2ltcGxlIHVzYWdlIHBhdHRlcm5zIHRoaXMgZG9lc24ndCBtYXR0ZXIgbXVjaCwgZm9yIGFkdmFuY2VkIHVzYWdlCiAgICAgKiBpdCBpcyBpbXBvcnRhbnQgdG8gZmFtaWxpYXJpemUgeW91cnNlbGYgd2l0aCB0aGVzZSBBUElzIGFuZCB0aGUgZ3VhcmFudGVlcyB0aGV5IHByb3ZpZGUuCiAgICAgKgogICAgICoKICAgICAqICMjIEdlbmVyYWwgdXNhZ2UKICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyBhIHNpbmdsZSBhcmd1bWVudCDigJQgYSBjb25maWd1cmF0aW9uIG9iamVjdCDigJQKICAgICAqIHRoYXQgaXMgdXNlZCB0byBnZW5lcmF0ZSBhbiBIVFRQIHJlcXVlc3QgYW5kIHJldHVybnMgIGEge0BsaW5rIG5nLiRxIHByb21pc2V9CiAgICAgKiB3aXRoIHR3byAkaHR0cCBzcGVjaWZpYyBtZXRob2RzOiBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAuCiAgICAgKgogICAgICogYGBganMKICAgICAqICAgLy8gU2ltcGxlIEdFVCByZXF1ZXN0IGV4YW1wbGUgOgogICAgICogICAkaHR0cC5nZXQoJy9zb21lVXJsJykuCiAgICAgKiAgICAgc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykgewogICAgICogICAgICAgLy8gdGhpcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBhc3luY2hyb25vdXNseQogICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlCiAgICAgKiAgICAgfSkuCiAgICAgKiAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHsKICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnMKICAgICAqICAgICAgIC8vIG9yIHNlcnZlciByZXR1cm5zIHJlc3BvbnNlIHdpdGggYW4gZXJyb3Igc3RhdHVzLgogICAgICogICAgIH0pOwogICAgICogYGBgCiAgICAgKgogICAgICogYGBganMKICAgICAqICAgLy8gU2ltcGxlIFBPU1QgcmVxdWVzdCBleGFtcGxlIChwYXNzaW5nIGRhdGEpIDoKICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCB7bXNnOidoZWxsbyB3b3JkISd9KS4KICAgICAqICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7CiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5CiAgICAgKiAgICAgICAvLyB3aGVuIHRoZSByZXNwb25zZSBpcyBhdmFpbGFibGUKICAgICAqICAgICB9KS4KICAgICAqICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykgewogICAgICogICAgICAgLy8gY2FsbGVkIGFzeW5jaHJvbm91c2x5IGlmIGFuIGVycm9yIG9jY3VycwogICAgICogICAgICAgLy8gb3Igc2VydmVyIHJldHVybnMgcmVzcG9uc2Ugd2l0aCBhbiBlcnJvciBzdGF0dXMuCiAgICAgKiAgICAgfSk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKgogICAgICogU2luY2UgdGhlIHJldHVybmVkIHZhbHVlIG9mIGNhbGxpbmcgdGhlICRodHRwIGZ1bmN0aW9uIGlzIGEgYHByb21pc2VgLCB5b3UgY2FuIGFsc28gdXNlCiAgICAgKiB0aGUgYHRoZW5gIG1ldGhvZCB0byByZWdpc3RlciBjYWxsYmFja3MsIGFuZCB0aGVzZSBjYWxsYmFja3Mgd2lsbCByZWNlaXZlIGEgc2luZ2xlIGFyZ3VtZW50IOKAkwogICAgICogYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVzcG9uc2UuIFNlZSB0aGUgQVBJIHNpZ25hdHVyZSBhbmQgdHlwZSBpbmZvIGJlbG93IGZvciBtb3JlCiAgICAgKiBkZXRhaWxzLgogICAgICoKICAgICAqIEEgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgYmV0d2VlbiAyMDAgYW5kIDI5OSBpcyBjb25zaWRlcmVkIGEgc3VjY2VzcyBzdGF0dXMgYW5kCiAgICAgKiB3aWxsIHJlc3VsdCBpbiB0aGUgc3VjY2VzcyBjYWxsYmFjayBiZWluZyBjYWxsZWQuIE5vdGUgdGhhdCBpZiB0aGUgcmVzcG9uc2UgaXMgYSByZWRpcmVjdCwKICAgICAqIFhNTEh0dHBSZXF1ZXN0IHdpbGwgdHJhbnNwYXJlbnRseSBmb2xsb3cgaXQsIG1lYW5pbmcgdGhhdCB0aGUgZXJyb3IgY2FsbGJhY2sgd2lsbCBub3QgYmUKICAgICAqIGNhbGxlZCBmb3Igc3VjaCByZXNwb25zZXMuCiAgICAgKgogICAgICogIyMgV3JpdGluZyBVbml0IFRlc3RzIHRoYXQgdXNlICRodHRwCiAgICAgKiBXaGVuIHVuaXQgdGVzdGluZyAodXNpbmcge0BsaW5rIG5nTW9jayBuZ01vY2t9KSwgaXQgaXMgbmVjZXNzYXJ5IHRvIGNhbGwKICAgICAqIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kI2ZsdXNoICRodHRwQmFja2VuZC5mbHVzaCgpfSB0byBmbHVzaCBlYWNoIHBlbmRpbmcKICAgICAqIHJlcXVlc3QgdXNpbmcgdHJhaW5lZCByZXNwb25zZXMuCiAgICAgKgogICAgICogYGBgCiAgICAgKiAkaHR0cEJhY2tlbmQuZXhwZWN0R0VUKC4uLik7CiAgICAgKiAkaHR0cC5nZXQoLi4uKTsKICAgICAqICRodHRwQmFja2VuZC5mbHVzaCgpOwogICAgICogYGBgCiAgICAgKgogICAgICogIyMgU2hvcnRjdXQgbWV0aG9kcwogICAgICoKICAgICAqIFNob3J0Y3V0IG1ldGhvZHMgYXJlIGFsc28gYXZhaWxhYmxlLiBBbGwgc2hvcnRjdXQgbWV0aG9kcyByZXF1aXJlIHBhc3NpbmcgaW4gdGhlIFVSTCwgYW5kCiAgICAgKiByZXF1ZXN0IGRhdGEgbXVzdCBiZSBwYXNzZWQgaW4gZm9yIFBPU1QvUFVUIHJlcXVlc3RzLgogICAgICoKICAgICAqIGBgYGpzCiAgICAgKiAgICRodHRwLmdldCgnL3NvbWVVcmwnKS5zdWNjZXNzKHN1Y2Nlc3NDYWxsYmFjayk7CiAgICAgKiAgICRodHRwLnBvc3QoJy9zb21lVXJsJywgZGF0YSkuc3VjY2VzcyhzdWNjZXNzQ2FsbGJhY2spOwogICAgICogYGBgCiAgICAgKgogICAgICogQ29tcGxldGUgbGlzdCBvZiBzaG9ydGN1dCBtZXRob2RzOgogICAgICoKICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2dldCAkaHR0cC5nZXR9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNoZWFkICRodHRwLmhlYWR9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwb3N0ICRodHRwLnBvc3R9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwdXQgJGh0dHAucHV0fQogICAgICogLSB7QGxpbmsgbmcuJGh0dHAjZGVsZXRlICRodHRwLmRlbGV0ZX0KICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2pzb25wICRodHRwLmpzb25wfQogICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcGF0Y2ggJGh0dHAucGF0Y2h9CiAgICAgKgogICAgICoKICAgICAqICMjIFNldHRpbmcgSFRUUCBIZWFkZXJzCiAgICAgKgogICAgICogVGhlICRodHRwIHNlcnZpY2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGFkZCBjZXJ0YWluIEhUVFAgaGVhZGVycyB0byBhbGwgcmVxdWVzdHMuIFRoZXNlIGRlZmF1bHRzCiAgICAgKiBjYW4gYmUgZnVsbHkgY29uZmlndXJlZCBieSBhY2Nlc3NpbmcgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnNgIGNvbmZpZ3VyYXRpb24KICAgICAqIG9iamVjdCwgd2hpY2ggY3VycmVudGx5IGNvbnRhaW5zIHRoaXMgZGVmYXVsdCBjb25maWd1cmF0aW9uOgogICAgICoKICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb25gIChoZWFkZXJzIHRoYXQgYXJlIGNvbW1vbiBmb3IgYWxsIHJlcXVlc3RzKToKICAgICAqICAgLSBgQWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqIC8gKmAKICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cykKICAgICAqICAgLSBgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uYAogICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnB1dGAgKGhlYWRlciBkZWZhdWx0cyBmb3IgUFVUIHJlcXVlc3RzKQogICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gCiAgICAgKgogICAgICogVG8gYWRkIG9yIG92ZXJ3cml0ZSB0aGVzZSBkZWZhdWx0cywgc2ltcGx5IGFkZCBvciByZW1vdmUgYSBwcm9wZXJ0eSBmcm9tIHRoZXNlIGNvbmZpZ3VyYXRpb24KICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdAogICAgICogd2l0aCB0aGUgbG93ZXJjYXNlZCBIVFRQIG1ldGhvZCBuYW1lIGFzIHRoZSBrZXksIGUuZy4KICAgICAqIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0ID0geyAnTXktSGVhZGVyJyA6ICd2YWx1ZScgfS4KICAgICAqCiAgICAgKiBUaGUgZGVmYXVsdHMgY2FuIGFsc28gYmUgc2V0IGF0IHJ1bnRpbWUgdmlhIHRoZSBgJGh0dHAuZGVmYXVsdHNgIG9iamVjdCBpbiB0aGUgc2FtZQogICAgICogZmFzaGlvbi4gRm9yIGV4YW1wbGU6CiAgICAgKgogICAgICogYGBgCiAgICAgKiBtb2R1bGUucnVuKGZ1bmN0aW9uKCRodHRwKSB7CiAgICAgKiAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgWW1WbGNEcGliMjl3JwogICAgICogfSk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiBJbiBhZGRpdGlvbiwgeW91IGNhbiBzdXBwbHkgYSBgaGVhZGVyc2AgcHJvcGVydHkgaW4gdGhlIGNvbmZpZyBvYmplY3QgcGFzc2VkIHdoZW4KICAgICAqIGNhbGxpbmcgYCRodHRwKGNvbmZpZylgLCB3aGljaCBvdmVycmlkZXMgdGhlIGRlZmF1bHRzIHdpdGhvdXQgY2hhbmdpbmcgdGhlbSBnbG9iYWxseS4KICAgICAqCiAgICAgKgogICAgICogIyMgVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXMKICAgICAqCiAgICAgKiBCb3RoIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgY2FuIGJlIHRyYW5zZm9ybWVkIHVzaW5nIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uczogYHRyYW5zZm9ybVJlcXVlc3RgCiAgICAgKiBhbmQgYHRyYW5zZm9ybVJlc3BvbnNlYC4gVGhlc2UgcHJvcGVydGllcyBjYW4gYmUgYSBzaW5nbGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zCiAgICAgKiB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgKGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcilgKSBvciBhbiBhcnJheSBvZiBzdWNoIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9ucywKICAgICAqIHdoaWNoIGFsbG93cyB5b3UgdG8gYHB1c2hgIG9yIGB1bnNoaWZ0YCBhIG5ldyB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbiBpbnRvIHRoZSB0cmFuc2Zvcm1hdGlvbiBjaGFpbi4KICAgICAqCiAgICAgKiAjIyMgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnMKICAgICAqCiAgICAgKiBUaGUgYCRodHRwUHJvdmlkZXJgIHByb3ZpZGVyIGFuZCBgJGh0dHBgIHNlcnZpY2UgZXhwb3NlIGBkZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCBhbmQKICAgICAqIGBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcy4gSWYgYSByZXF1ZXN0IGRvZXMgbm90IHByb3ZpZGUgaXRzIG93biB0cmFuc2Zvcm1hdGlvbnMKICAgICAqIHRoZW4gdGhlc2Ugd2lsbCBiZSBhcHBsaWVkLgogICAgICoKICAgICAqIFlvdSBjYW4gYXVnbWVudCBvciByZXBsYWNlIHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyBieSBtb2RpZnlpbmcgdGhlc2UgcHJvcGVydGllcyBieSBhZGRpbmcgdG8gb3IKICAgICAqIHJlcGxhY2luZyB0aGUgYXJyYXkuCiAgICAgKgogICAgICogQW5ndWxhciBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zOgogICAgICoKICAgICAqIFJlcXVlc3QgdHJhbnNmb3JtYXRpb25zIChgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCBhbmQgYCRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgKToKICAgICAqCiAgICAgKiAtIElmIHRoZSBgZGF0YWAgcHJvcGVydHkgb2YgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbnMgYW4gb2JqZWN0LCBzZXJpYWxpemUgaXQKICAgICAqICAgaW50byBKU09OIGZvcm1hdC4KICAgICAqCiAgICAgKiBSZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMgKGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYCBhbmQgYCRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYCk6CiAgICAgKgogICAgICogIC0gSWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykuCiAgICAgKiAgLSBJZiBKU09OIHJlc3BvbnNlIGlzIGRldGVjdGVkLCBkZXNlcmlhbGl6ZSBpdCB1c2luZyBhIEpTT04gcGFyc2VyLgogICAgICoKICAgICAqCiAgICAgKiAjIyMgT3ZlcnJpZGluZyB0aGUgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnMgUGVyIFJlcXVlc3QKICAgICAqCiAgICAgKiBJZiB5b3Ugd2lzaCBvdmVycmlkZSB0aGUgcmVxdWVzdC9yZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMgb25seSBmb3IgYSBzaW5nbGUgcmVxdWVzdCB0aGVuIHByb3ZpZGUKICAgICAqIGB0cmFuc2Zvcm1SZXF1ZXN0YCBhbmQvb3IgYHRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzIG9uIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBwYXNzZWQKICAgICAqIGludG8gYCRodHRwYC4KICAgICAqCiAgICAgKiBOb3RlIHRoYXQgaWYgeW91IHByb3ZpZGUgdGhlc2UgcHJvcGVydGllcyBvbiB0aGUgY29uZmlnIG9iamVjdCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgd2lsbCBiZQogICAgICogb3ZlcndyaXR0ZW4uIElmIHlvdSB3aXNoIHRvIGF1Z21lbnQgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIHRoZW4geW91IG11c3QgaW5jbHVkZSB0aGVtIGluIHlvdXIKICAgICAqIGxvY2FsIHRyYW5zZm9ybWF0aW9uIGFycmF5LgogICAgICoKICAgICAqIFRoZSBmb2xsb3dpbmcgY29kZSBkZW1vbnN0cmF0ZXMgYWRkaW5nIGEgbmV3IHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9uIHRvIGJlIHJ1biBhZnRlciB0aGUgZGVmYXVsdCByZXNwb25zZQogICAgICogdHJhbnNmb3JtYXRpb25zIGhhdmUgYmVlbiBydW4uCiAgICAgKgogICAgICogYGBganMKICAgICAqIGZ1bmN0aW9uIGFwcGVuZFRyYW5zZm9ybShkZWZhdWx0cywgdHJhbnNmb3JtKSB7CiAgICAgKgogICAgICogICAvLyBXZSBjYW4ndCBndWFyYW50ZWUgdGhhdCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbiBpcyBhbiBhcnJheQogICAgICogICBkZWZhdWx0cyA9IGFuZ3VsYXIuaXNBcnJheShkZWZhdWx0cykgPyBkZWZhdWx0cyA6IFtkZWZhdWx0c107CiAgICAgKgogICAgICogICAvLyBBcHBlbmQgdGhlIG5ldyB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgZGVmYXVsdHMKICAgICAqICAgcmV0dXJuIGRlZmF1bHRzLmNvbmNhdCh0cmFuc2Zvcm0pOwogICAgICogfQogICAgICoKICAgICAqICRodHRwKHsKICAgICAqICAgdXJsOiAnLi4uJywKICAgICAqICAgbWV0aG9kOiAnR0VUJywKICAgICAqICAgdHJhbnNmb3JtUmVzcG9uc2U6IGFwcGVuZFRyYW5zZm9ybSgkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAqICAgICByZXR1cm4gZG9UcmFuc2Zvcm0odmFsdWUpOwogICAgICogICB9KQogICAgICogfSk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKgogICAgICogIyMgQ2FjaGluZwogICAgICoKICAgICAqIFRvIGVuYWJsZSBjYWNoaW5nLCBzZXQgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYCAodG8gdXNlIGRlZmF1bHQKICAgICAqIGNhY2hlKSBvciB0byBhIGN1c3RvbSBjYWNoZSBvYmplY3QgKGJ1aWx0IHdpdGgge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgYCRjYWNoZUZhY3RvcnlgfSkuCiAgICAgKiBXaGVuIHRoZSBjYWNoZSBpcyBlbmFibGVkLCBgJGh0dHBgIHN0b3JlcyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIGluIHRoZSBzcGVjaWZpZWQKICAgICAqIGNhY2hlLiBUaGUgbmV4dCB0aW1lIHRoZSBzYW1lIHJlcXVlc3QgaXMgbWFkZSwgdGhlIHJlc3BvbnNlIGlzIHNlcnZlZCBmcm9tIHRoZSBjYWNoZSB3aXRob3V0CiAgICAgKiBzZW5kaW5nIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyLgogICAgICoKICAgICAqIE5vdGUgdGhhdCBldmVuIGlmIHRoZSByZXNwb25zZSBpcyBzZXJ2ZWQgZnJvbSBjYWNoZSwgZGVsaXZlcnkgb2YgdGhlIGRhdGEgaXMgYXN5bmNocm9ub3VzIGluCiAgICAgKiB0aGUgc2FtZSB3YXkgdGhhdCByZWFsIHJlcXVlc3RzIGFyZS4KICAgICAqCiAgICAgKiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgR0VUIHJlcXVlc3RzIGZvciB0aGUgc2FtZSBVUkwgdGhhdCBzaG91bGQgYmUgY2FjaGVkIHVzaW5nIHRoZSBzYW1lCiAgICAgKiBjYWNoZSwgYnV0IHRoZSBjYWNoZSBpcyBub3QgcG9wdWxhdGVkIHlldCwgb25seSBvbmUgcmVxdWVzdCB0byB0aGUgc2VydmVyIHdpbGwgYmUgbWFkZSBhbmQKICAgICAqIHRoZSByZW1haW5pbmcgcmVxdWVzdHMgd2lsbCBiZSBmdWxmaWxsZWQgdXNpbmcgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGZpcnN0IHJlcXVlc3QuCiAgICAgKgogICAgICogWW91IGNhbiBjaGFuZ2UgdGhlIGRlZmF1bHQgY2FjaGUgdG8gYSBuZXcgb2JqZWN0IChidWlsdCB3aXRoCiAgICAgKiB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9KSBieSB1cGRhdGluZyB0aGUKICAgICAqIHtAbGluayBuZy4kaHR0cCNkZWZhdWx0cyBgJGh0dHAuZGVmYXVsdHMuY2FjaGVgfSBwcm9wZXJ0eS4gQWxsIHJlcXVlc3RzIHdobyBzZXQKICAgICAqIHRoZWlyIGBjYWNoZWAgcHJvcGVydHkgdG8gYHRydWVgIHdpbGwgbm93IHVzZSB0aGlzIGNhY2hlIG9iamVjdC4KICAgICAqCiAgICAgKiBJZiB5b3Ugc2V0IHRoZSBkZWZhdWx0IGNhY2hlIHRvIGBmYWxzZWAgdGhlbiBvbmx5IHJlcXVlc3RzIHRoYXQgc3BlY2lmeSB0aGVpciBvd24gY3VzdG9tCiAgICAgKiBjYWNoZSBvYmplY3Qgd2lsbCBiZSBjYWNoZWQuCiAgICAgKgogICAgICogIyMgSW50ZXJjZXB0b3JzCiAgICAgKgogICAgICogQmVmb3JlIHlvdSBzdGFydCBjcmVhdGluZyBpbnRlcmNlcHRvcnMsIGJlIHN1cmUgdG8gdW5kZXJzdGFuZCB0aGUKICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS4KICAgICAqCiAgICAgKiBGb3IgcHVycG9zZXMgb2YgZ2xvYmFsIGVycm9yIGhhbmRsaW5nLCBhdXRoZW50aWNhdGlvbiwgb3IgYW55IGtpbmQgb2Ygc3luY2hyb25vdXMgb3IKICAgICAqIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZyBvZiByZXF1ZXN0IG9yIHBvc3Rwcm9jZXNzaW5nIG9mIHJlc3BvbnNlcywgaXQgaXMgZGVzaXJhYmxlIHRvIGJlCiAgICAgKiBhYmxlIHRvIGludGVyY2VwdCByZXF1ZXN0cyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIHRvIHRoZSBzZXJ2ZXIgYW5kCiAgICAgKiByZXNwb25zZXMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCBvdmVyIHRvIHRoZSBhcHBsaWNhdGlvbiBjb2RlIHRoYXQKICAgICAqIGluaXRpYXRlZCB0aGVzZSByZXF1ZXN0cy4gVGhlIGludGVyY2VwdG9ycyBsZXZlcmFnZSB0aGUge0BsaW5rIG5nLiRxCiAgICAgKiBwcm9taXNlIEFQSXN9IHRvIGZ1bGZpbGwgdGhpcyBuZWVkIGZvciBib3RoIHN5bmNocm9ub3VzIGFuZCBhc3luY2hyb25vdXMgcHJlLXByb2Nlc3NpbmcuCiAgICAgKgogICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGh0dHBQcm92aWRlcmAgYnkKICAgICAqIGFkZGluZyB0aGVtIHRvIHRoZSBgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnNgIGFycmF5LiBUaGUgZmFjdG9yeSBpcyBjYWxsZWQgYW5kCiAgICAgKiBpbmplY3RlZCB3aXRoIGRlcGVuZGVuY2llcyAoaWYgc3BlY2lmaWVkKSBhbmQgcmV0dXJucyB0aGUgaW50ZXJjZXB0b3IuCiAgICAgKgogICAgICogVGhlcmUgYXJlIHR3byBraW5kcyBvZiBpbnRlcmNlcHRvcnMgKGFuZCB0d28ga2luZHMgb2YgcmVqZWN0aW9uIGludGVyY2VwdG9ycyk6CiAgICAgKgogICAgICogICAqIGByZXF1ZXN0YDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBhIGh0dHAgYGNvbmZpZ2Agb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0bwogICAgICogICAgIG1vZGlmeSB0aGUgYGNvbmZpZ2Agb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGBjb25maWdgCiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYGNvbmZpZ2Agb3IgYSBuZXcgYGNvbmZpZ2Agb2JqZWN0LgogICAgICogICAqIGByZXF1ZXN0RXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3IKICAgICAqICAgICByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLgogICAgICogICAqIGByZXNwb25zZWA6IGludGVyY2VwdG9ycyBnZXQgY2FsbGVkIHdpdGggaHR0cCBgcmVzcG9uc2VgIG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzIGZyZWUgdG8KICAgICAqICAgICBtb2RpZnkgdGhlIGByZXNwb25zZWAgb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGByZXNwb25zZWAKICAgICAqICAgICBvYmplY3QgZGlyZWN0bHksIG9yIGFzIGEgcHJvbWlzZSBjb250YWluaW5nIHRoZSBgcmVzcG9uc2VgIG9yIGEgbmV3IGByZXNwb25zZWAgb2JqZWN0LgogICAgICogICAqIGByZXNwb25zZUVycm9yYDogaW50ZXJjZXB0b3IgZ2V0cyBjYWxsZWQgd2hlbiBhIHByZXZpb3VzIGludGVyY2VwdG9yIHRocmV3IGFuIGVycm9yIG9yCiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi4KICAgICAqCiAgICAgKgogICAgICogYGBganMKICAgICAqICAgLy8gcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9yIGFzIGEgc2VydmljZQogICAgICogICAkcHJvdmlkZS5mYWN0b3J5KCdteUh0dHBJbnRlcmNlcHRvcicsIGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHsKICAgICAqICAgICByZXR1cm4gewogICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kCiAgICAgKiAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2VzcwogICAgICogICAgICAgICByZXR1cm4gY29uZmlnOwogICAgICogICAgICAgfSwKICAgICAqCiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2QKICAgICAqICAgICAgJ3JlcXVlc3RFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikgewogICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3IKICAgICAqICAgICAgICAgaWYgKGNhblJlY292ZXIocmVqZWN0aW9uKSkgewogICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZQogICAgICogICAgICAgICB9CiAgICAgKiAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTsKICAgICAqICAgICAgIH0sCiAgICAgKgogICAgICoKICAgICAqCiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2QKICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBzdWNjZXNzCiAgICAgKiAgICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAqICAgICAgIH0sCiAgICAgKgogICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kCiAgICAgKiAgICAgICdyZXNwb25zZUVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7CiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvcgogICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7CiAgICAgKiAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlT3JOZXdQcm9taXNlCiAgICAgKiAgICAgICAgIH0KICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pOwogICAgICogICAgICAgfQogICAgICogICAgIH07CiAgICAgKiAgIH0pOwogICAgICoKICAgICAqICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnbXlIdHRwSW50ZXJjZXB0b3InKTsKICAgICAqCiAgICAgKgogICAgICogICAvLyBhbHRlcm5hdGl2ZWx5LCByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgdmlhIGFuIGFub255bW91cyBmYWN0b3J5CiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5MikgewogICAgICogICAgIHJldHVybiB7CiAgICAgKiAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7CiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlCiAgICAgKiAgICAgICB9LAogICAgICoKICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlCiAgICAgKiAgICAgICB9CiAgICAgKiAgICAgfTsKICAgICAqICAgfSk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiAjIyBTZWN1cml0eSBDb25zaWRlcmF0aW9ucwogICAgICoKICAgICAqIFdoZW4gZGVzaWduaW5nIHdlYiBhcHBsaWNhdGlvbnMsIGNvbnNpZGVyIHNlY3VyaXR5IHRocmVhdHMgZnJvbToKICAgICAqCiAgICAgKiAtIFtKU09OIHZ1bG5lcmFiaWxpdHldKGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweCkKICAgICAqIC0gW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpCiAgICAgKgogICAgICogQm90aCBzZXJ2ZXIgYW5kIHRoZSBjbGllbnQgbXVzdCBjb29wZXJhdGUgaW4gb3JkZXIgdG8gZWxpbWluYXRlIHRoZXNlIHRocmVhdHMuIEFuZ3VsYXIgY29tZXMKICAgICAqIHByZS1jb25maWd1cmVkIHdpdGggc3RyYXRlZ2llcyB0aGF0IGFkZHJlc3MgdGhlc2UgaXNzdWVzLCBidXQgZm9yIHRoaXMgdG8gd29yayBiYWNrZW5kIHNlcnZlcgogICAgICogY29vcGVyYXRpb24gaXMgcmVxdWlyZWQuCiAgICAgKgogICAgICogIyMjIEpTT04gVnVsbmVyYWJpbGl0eSBQcm90ZWN0aW9uCiAgICAgKgogICAgICogQSBbSlNPTiB2dWxuZXJhYmlsaXR5XShodHRwOi8vaGFhY2tlZC5jb20vYXJjaGl2ZS8yMDA4LzExLzIwL2FuYXRvbXktb2YtYS1zdWJ0bGUtanNvbi12dWxuZXJhYmlsaXR5LmFzcHgpCiAgICAgKiBhbGxvd3MgdGhpcmQgcGFydHkgd2Vic2l0ZSB0byB0dXJuIHlvdXIgSlNPTiByZXNvdXJjZSBVUkwgaW50bwogICAgICogW0pTT05QXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0pTT05QKSByZXF1ZXN0IHVuZGVyIHNvbWUgY29uZGl0aW9ucy4gVG8KICAgICAqIGNvdW50ZXIgdGhpcyB5b3VyIHNlcnZlciBjYW4gcHJlZml4IGFsbCBKU09OIHJlcXVlc3RzIHdpdGggZm9sbG93aW5nIHN0cmluZyBgIildfScsXG4iYC4KICAgICAqIEFuZ3VsYXIgd2lsbCBhdXRvbWF0aWNhbGx5IHN0cmlwIHRoZSBwcmVmaXggYmVmb3JlIHByb2Nlc3NpbmcgaXQgYXMgSlNPTi4KICAgICAqCiAgICAgKiBGb3IgZXhhbXBsZSBpZiB5b3VyIHNlcnZlciBuZWVkcyB0byByZXR1cm46CiAgICAgKiBgYGBqcwogICAgICogWydvbmUnLCd0d28nXQogICAgICogYGBgCiAgICAgKgogICAgICogd2hpY2ggaXMgdnVsbmVyYWJsZSB0byBhdHRhY2ssIHlvdXIgc2VydmVyIGNhbiByZXR1cm46CiAgICAgKiBgYGBqcwogICAgICogKV19JywKICAgICAqIFsnb25lJywndHdvJ10KICAgICAqIGBgYAogICAgICoKICAgICAqIEFuZ3VsYXIgd2lsbCBzdHJpcCB0aGUgcHJlZml4LCBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgSlNPTi4KICAgICAqCiAgICAgKgogICAgICogIyMjIENyb3NzIFNpdGUgUmVxdWVzdCBGb3JnZXJ5IChYU1JGKSBQcm90ZWN0aW9uCiAgICAgKgogICAgICogW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpIGlzIGEgdGVjaG5pcXVlIGJ5IHdoaWNoCiAgICAgKiBhbiB1bmF1dGhvcml6ZWQgc2l0ZSBjYW4gZ2FpbiB5b3VyIHVzZXIncyBwcml2YXRlIGRhdGEuIEFuZ3VsYXIgcHJvdmlkZXMgYSBtZWNoYW5pc20KICAgICAqIHRvIGNvdW50ZXIgWFNSRi4gV2hlbiBwZXJmb3JtaW5nIFhIUiByZXF1ZXN0cywgdGhlICRodHRwIHNlcnZpY2UgcmVhZHMgYSB0b2tlbiBmcm9tIGEgY29va2llCiAgICAgKiAoYnkgZGVmYXVsdCwgYFhTUkYtVE9LRU5gKSBhbmQgc2V0cyBpdCBhcyBhbiBIVFRQIGhlYWRlciAoYFgtWFNSRi1UT0tFTmApLiBTaW5jZSBvbmx5CiAgICAgKiBKYXZhU2NyaXB0IHRoYXQgcnVucyBvbiB5b3VyIGRvbWFpbiBjb3VsZCByZWFkIHRoZSBjb29raWUsIHlvdXIgc2VydmVyIGNhbiBiZSBhc3N1cmVkIHRoYXQKICAgICAqIHRoZSBYSFIgY2FtZSBmcm9tIEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbi4gVGhlIGhlYWRlciB3aWxsIG5vdCBiZSBzZXQgZm9yCiAgICAgKiBjcm9zcy1kb21haW4gcmVxdWVzdHMuCiAgICAgKgogICAgICogVG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhpcywgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gc2V0IGEgdG9rZW4gaW4gYSBKYXZhU2NyaXB0IHJlYWRhYmxlIHNlc3Npb24KICAgICAqIGNvb2tpZSBjYWxsZWQgYFhTUkYtVE9LRU5gIG9uIHRoZSBmaXJzdCBIVFRQIEdFVCByZXF1ZXN0LiBPbiBzdWJzZXF1ZW50IFhIUiByZXF1ZXN0cyB0aGUKICAgICAqIHNlcnZlciBjYW4gdmVyaWZ5IHRoYXQgdGhlIGNvb2tpZSBtYXRjaGVzIGBYLVhTUkYtVE9LRU5gIEhUVFAgaGVhZGVyLCBhbmQgdGhlcmVmb3JlIGJlIHN1cmUKICAgICAqIHRoYXQgb25seSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4gY291bGQgaGF2ZSBzZW50IHRoZSByZXF1ZXN0LiBUaGUgdG9rZW4gbXVzdCBiZQogICAgICogdW5pcXVlIGZvciBlYWNoIHVzZXIgYW5kIG11c3QgYmUgdmVyaWZpYWJsZSBieSB0aGUgc2VydmVyICh0byBwcmV2ZW50IHRoZSBKYXZhU2NyaXB0IGZyb20KICAgICAqIG1ha2luZyB1cCBpdHMgb3duIHRva2VucykuIFdlIHJlY29tbWVuZCB0aGF0IHRoZSB0b2tlbiBpcyBhIGRpZ2VzdCBvZiB5b3VyIHNpdGUncwogICAgICogYXV0aGVudGljYXRpb24gY29va2llIHdpdGggYSBbc2FsdF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FsdF8oY3J5cHRvZ3JhcGh5JiM0MTspCiAgICAgKiBmb3IgYWRkZWQgc2VjdXJpdHkuCiAgICAgKgogICAgICogVGhlIG5hbWUgb2YgdGhlIGhlYWRlcnMgY2FuIGJlIHNwZWNpZmllZCB1c2luZyB0aGUgeHNyZkhlYWRlck5hbWUgYW5kIHhzcmZDb29raWVOYW1lCiAgICAgKiBwcm9wZXJ0aWVzIG9mIGVpdGhlciAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzIGF0IGNvbmZpZy10aW1lLCAkaHR0cC5kZWZhdWx0cyBhdCBydW4tdGltZSwKICAgICAqIG9yIHRoZSBwZXItcmVxdWVzdCBjb25maWcgb2JqZWN0LgogICAgICoKICAgICAqCiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIE9iamVjdCBkZXNjcmliaW5nIHRoZSByZXF1ZXN0IHRvIGJlIG1hZGUgYW5kIGhvdyBpdCBzaG91bGQgYmUKICAgICAqICAgIHByb2Nlc3NlZC4gVGhlIG9iamVjdCBoYXMgZm9sbG93aW5nIHByb3BlcnRpZXM6CiAgICAgKgogICAgICogICAgLSAqKm1ldGhvZCoqIOKAkyBge3N0cmluZ31gIOKAkyBIVFRQIG1ldGhvZCAoZS5nLiAnR0VUJywgJ1BPU1QnLCBldGMpCiAgICAgKiAgICAtICoqdXJsKiog4oCTIGB7c3RyaW5nfWAg4oCTIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQuCiAgICAgKiAgICAtICoqcGFyYW1zKiog4oCTIGB7T2JqZWN0LjxzdHJpbmd8T2JqZWN0Pn1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBvYmplY3RzIHdoaWNoIHdpbGwgYmUgdHVybmVkCiAgICAgKiAgICAgIHRvIGA/a2V5MT12YWx1ZTEma2V5Mj12YWx1ZTJgIGFmdGVyIHRoZSB1cmwuIElmIHRoZSB2YWx1ZSBpcyBub3QgYSBzdHJpbmcsIGl0IHdpbGwgYmUKICAgICAqICAgICAgSlNPTmlmaWVkLgogICAgICogICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIERhdGEgdG8gYmUgc2VudCBhcyB0aGUgcmVxdWVzdCBtZXNzYWdlIGRhdGEuCiAgICAgKiAgICAtICoqaGVhZGVycyoqIOKAkyBge09iamVjdH1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBmdW5jdGlvbnMgd2hpY2ggcmV0dXJuIHN0cmluZ3MgcmVwcmVzZW50aW5nCiAgICAgKiAgICAgIEhUVFAgaGVhZGVycyB0byBzZW5kIHRvIHRoZSBzZXJ2ZXIuIElmIHRoZSByZXR1cm4gdmFsdWUgb2YgYSBmdW5jdGlvbiBpcyBudWxsLCB0aGUKICAgICAqICAgICAgaGVhZGVyIHdpbGwgbm90IGJlIHNlbnQuCiAgICAgKiAgICAtICoqeHNyZkhlYWRlck5hbWUqKiDigJMgYHtzdHJpbmd9YCDigJMgTmFtZSBvZiBIVFRQIGhlYWRlciB0byBwb3B1bGF0ZSB3aXRoIHRoZSBYU1JGIHRva2VuLgogICAgICogICAgLSAqKnhzcmZDb29raWVOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgY29va2llIGNvbnRhaW5pbmcgdGhlIFhTUkYgdG9rZW4uCiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVxdWVzdCoqIOKAkwogICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJMKICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwCiAgICAgKiAgICAgIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBzZXJpYWxpemVkKSB2ZXJzaW9uLgogICAgICogICAgICBTZWUge0BsaW5rICNvdmVycmlkaW5nLXRoZS1kZWZhdWx0LXRyYW5zZm9ybWF0aW9ucy1wZXItcmVxdWVzdCBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc30KICAgICAqICAgIC0gKip0cmFuc2Zvcm1SZXNwb25zZSoqIOKAkwogICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJMKICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwCiAgICAgKiAgICAgIHJlc3BvbnNlIGJvZHkgYW5kIGhlYWRlcnMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgZGVzZXJpYWxpemVkKSB2ZXJzaW9uLgogICAgICogICAgICBTZWUge0BsaW5rICNvdmVycmlkaW5nLXRoZS1kZWZhdWx0LXRyYW5zZm9ybWF0aW9ucy1wZXItcmVxdWVzdCBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc30KICAgICAqICAgIC0gKipjYWNoZSoqIOKAkyBge2Jvb2xlYW58Q2FjaGV9YCDigJMgSWYgdHJ1ZSwgYSBkZWZhdWx0ICRodHRwIGNhY2hlIHdpbGwgYmUgdXNlZCB0byBjYWNoZSB0aGUKICAgICAqICAgICAgR0VUIHJlcXVlc3QsIG90aGVyd2lzZSBpZiBhIGNhY2hlIGluc3RhbmNlIGJ1aWx0IHdpdGgKICAgICAqICAgICAge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0sIHRoaXMgY2FjaGUgd2lsbCBiZSB1c2VkIGZvcgogICAgICogICAgICBjYWNoaW5nLgogICAgICogICAgLSAqKnRpbWVvdXQqKiDigJMgYHtudW1iZXJ8UHJvbWlzZX1gIOKAkyB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcywgb3Ige0BsaW5rIG5nLiRxIHByb21pc2V9CiAgICAgKiAgICAgIHRoYXQgc2hvdWxkIGFib3J0IHRoZSByZXF1ZXN0IHdoZW4gcmVzb2x2ZWQuCiAgICAgKiAgICAtICoqd2l0aENyZWRlbnRpYWxzKiogLSBge2Jvb2xlYW59YCAtIHdoZXRoZXIgdG8gc2V0IHRoZSBgd2l0aENyZWRlbnRpYWxzYCBmbGFnIG9uIHRoZQogICAgICogICAgICBYSFIgb2JqZWN0LiBTZWUgW3JlcXVlc3RzIHdpdGggY3JlZGVudGlhbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUVFAvQWNjZXNzX2NvbnRyb2xfQ09SUyNSZXF1ZXN0c193aXRoX2NyZWRlbnRpYWxzKQogICAgICogICAgICBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KICAgICAqICAgIC0gKipyZXNwb25zZVR5cGUqKiAtIGB7c3RyaW5nfWAgLSBzZWUKICAgICAqICAgICAgW3JlcXVlc3RUeXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9YTUxIdHRwUmVxdWVzdCNyZXNwb25zZVR5cGUpLgogICAgICoKICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gUmV0dXJucyBhIHtAbGluayBuZy4kcSBwcm9taXNlfSBvYmplY3Qgd2l0aCB0aGUKICAgICAqICAgc3RhbmRhcmQgYHRoZW5gIG1ldGhvZCBhbmQgdHdvIGh0dHAgc3BlY2lmaWMgbWV0aG9kczogYHN1Y2Nlc3NgIGFuZCBgZXJyb3JgLiBUaGUgYHRoZW5gCiAgICAgKiAgIG1ldGhvZCB0YWtlcyB0d28gYXJndW1lbnRzIGEgc3VjY2VzcyBhbmQgYW4gZXJyb3IgY2FsbGJhY2sgd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2l0aCBhCiAgICAgKiAgIHJlc3BvbnNlIG9iamVjdC4gVGhlIGBzdWNjZXNzYCBhbmQgYGVycm9yYCBtZXRob2RzIHRha2UgYSBzaW5nbGUgYXJndW1lbnQgLSBhIGZ1bmN0aW9uIHRoYXQKICAgICAqICAgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBzdWNjZWVkcyBvciBmYWlscyByZXNwZWN0aXZlbHkuIFRoZSBhcmd1bWVudHMgcGFzc2VkIGludG8KICAgICAqICAgdGhlc2UgZnVuY3Rpb25zIGFyZSBkZXN0cnVjdHVyZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlc3BvbnNlIG9iamVjdCBwYXNzZWQgaW50byB0aGUKICAgICAqICAgYHRoZW5gIG1ldGhvZC4gVGhlIHJlc3BvbnNlIG9iamVjdCBoYXMgdGhlc2UgcHJvcGVydGllczoKICAgICAqCiAgICAgKiAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBUaGUgcmVzcG9uc2UgYm9keSB0cmFuc2Zvcm1lZCB3aXRoIHRoZSB0cmFuc2Zvcm0KICAgICAqICAgICBmdW5jdGlvbnMuCiAgICAgKiAgIC0gKipzdGF0dXMqKiDigJMgYHtudW1iZXJ9YCDigJMgSFRUUCBzdGF0dXMgY29kZSBvZiB0aGUgcmVzcG9uc2UuCiAgICAgKiAgIC0gKipoZWFkZXJzKiog4oCTIGB7ZnVuY3Rpb24oW2hlYWRlck5hbWVdKX1gIOKAkyBIZWFkZXIgZ2V0dGVyIGZ1bmN0aW9uLgogICAgICogICAtICoqY29uZmlnKiog4oCTIGB7T2JqZWN0fWAg4oCTIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IHdhcyB1c2VkIHRvIGdlbmVyYXRlIHRoZSByZXF1ZXN0LgogICAgICogICAtICoqc3RhdHVzVGV4dCoqIOKAkyBge3N0cmluZ31gIOKAkyBIVFRQIHN0YXR1cyB0ZXh0IG9mIHRoZSByZXNwb25zZS4KICAgICAqCiAgICAgKiBAcHJvcGVydHkge0FycmF5LjxPYmplY3Q+fSBwZW5kaW5nUmVxdWVzdHMgQXJyYXkgb2YgY29uZmlnIG9iamVjdHMgZm9yIGN1cnJlbnRseSBwZW5kaW5nCiAgICAgKiAgIHJlcXVlc3RzLiBUaGlzIGlzIHByaW1hcmlseSBtZWFudCB0byBiZSB1c2VkIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuCiAgICAgKgogICAgICoKICAgICAqIEBleGFtcGxlCjxleGFtcGxlIG1vZHVsZT0iaHR0cEV4YW1wbGUiPgo8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkZldGNoQ29udHJvbGxlciI+CiAgICA8c2VsZWN0IG5nLW1vZGVsPSJtZXRob2QiPgogICAgICA8b3B0aW9uPkdFVDwvb3B0aW9uPgogICAgICA8b3B0aW9uPkpTT05QPC9vcHRpb24+CiAgICA8L3NlbGVjdD4KICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0idXJsIiBzaXplPSI4MCIvPgogICAgPGJ1dHRvbiBpZD0iZmV0Y2hidG4iIG5nLWNsaWNrPSJmZXRjaCgpIj5mZXRjaDwvYnV0dG9uPjxicj4KICAgIDxidXR0b24gaWQ9InNhbXBsZWdldGJ0biIgbmctY2xpY2s9InVwZGF0ZU1vZGVsKCdHRVQnLCAnaHR0cC1oZWxsby5odG1sJykiPlNhbXBsZSBHRVQ8L2J1dHRvbj4KICAgIDxidXR0b24gaWQ9InNhbXBsZWpzb25wYnRuIgogICAgICBuZy1jbGljaz0idXBkYXRlTW9kZWwoJ0pTT05QJywKICAgICAgICAgICAgICAgICAgICAnaHR0cHM6Ly9hbmd1bGFyanMub3JnL2dyZWV0LnBocD9jYWxsYmFjaz1KU09OX0NBTExCQUNLJm5hbWU9U3VwZXIlMjBIZXJvJykiPgogICAgICBTYW1wbGUgSlNPTlAKICAgIDwvYnV0dG9uPgogICAgPGJ1dHRvbiBpZD0iaW52YWxpZGpzb25wYnRuIgogICAgICBuZy1jbGljaz0idXBkYXRlTW9kZWwoJ0pTT05QJywgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9kb2VzbnRleGlzdCZjYWxsYmFjaz1KU09OX0NBTExCQUNLJykiPgogICAgICAgIEludmFsaWQgSlNPTlAKICAgICAgPC9idXR0b24+CiAgICA8cHJlPmh0dHAgc3RhdHVzIGNvZGU6IHt7c3RhdHVzfX08L3ByZT4KICAgIDxwcmU+aHR0cCByZXNwb25zZSBkYXRhOiB7e2RhdGF9fTwvcHJlPgogIDwvZGl2Pgo8L2ZpbGU+CjxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgYW5ndWxhci5tb2R1bGUoJ2h0dHBFeGFtcGxlJywgW10pCiAgICAuY29udHJvbGxlcignRmV0Y2hDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLAogICAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkdGVtcGxhdGVDYWNoZSkgewogICAgICAgICRzY29wZS5tZXRob2QgPSAnR0VUJzsKICAgICAgICAkc2NvcGUudXJsID0gJ2h0dHAtaGVsbG8uaHRtbCc7CgogICAgICAgICRzY29wZS5mZXRjaCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgJHNjb3BlLmNvZGUgPSBudWxsOwogICAgICAgICAgJHNjb3BlLnJlc3BvbnNlID0gbnVsbDsKCiAgICAgICAgICAkaHR0cCh7bWV0aG9kOiAkc2NvcGUubWV0aG9kLCB1cmw6ICRzY29wZS51cmwsIGNhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLgogICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSBzdGF0dXM7CiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSBkYXRhOwogICAgICAgICAgICB9KS4KICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSBkYXRhIHx8ICJSZXF1ZXN0IGZhaWxlZCI7CiAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgICRzY29wZS51cGRhdGVNb2RlbCA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsKSB7CiAgICAgICAgICAkc2NvcGUubWV0aG9kID0gbWV0aG9kOwogICAgICAgICAgJHNjb3BlLnVybCA9IHVybDsKICAgICAgICB9OwogICAgICB9XSk7CjwvZmlsZT4KPGZpbGUgbmFtZT0iaHR0cC1oZWxsby5odG1sIj4KICBIZWxsbywgJGh0dHAhCjwvZmlsZT4KPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgdmFyIHN0YXR1cyA9IGVsZW1lbnQoYnkuYmluZGluZygnc3RhdHVzJykpOwogIHZhciBkYXRhID0gZWxlbWVudChieS5iaW5kaW5nKCdkYXRhJykpOwogIHZhciBmZXRjaEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2ZldGNoYnRuJykpOwogIHZhciBzYW1wbGVHZXRCdG4gPSBlbGVtZW50KGJ5LmlkKCdzYW1wbGVnZXRidG4nKSk7CiAgdmFyIHNhbXBsZUpzb25wQnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlanNvbnBidG4nKSk7CiAgdmFyIGludmFsaWRKc29ucEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2ludmFsaWRqc29ucGJ0bicpKTsKCiAgaXQoJ3Nob3VsZCBtYWtlIGFuIHhociBHRVQgcmVxdWVzdCcsIGZ1bmN0aW9uKCkgewogICAgc2FtcGxlR2V0QnRuLmNsaWNrKCk7CiAgICBmZXRjaEJ0bi5jbGljaygpOwogICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpOwogICAgZXhwZWN0KGRhdGEuZ2V0VGV4dCgpKS50b01hdGNoKC9IZWxsbywgXCRodHRwIS8pOwogIH0pOwoKLy8gQ29tbWVudGVkIG91dCBkdWUgdG8gZmxha2VzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTE4NQovLyBpdCgnc2hvdWxkIG1ha2UgYSBKU09OUCByZXF1ZXN0IHRvIGFuZ3VsYXJqcy5vcmcnLCBmdW5jdGlvbigpIHsKLy8gICBzYW1wbGVKc29ucEJ0bi5jbGljaygpOwovLyAgIGZldGNoQnRuLmNsaWNrKCk7Ci8vICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpOwovLyAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvU3VwZXIgSGVybyEvKTsKLy8gfSk7CgogIGl0KCdzaG91bGQgbWFrZSBKU09OUCByZXF1ZXN0IHRvIGludmFsaWQgVVJMIGFuZCBpbnZva2UgdGhlIGVycm9yIGhhbmRsZXInLAogICAgICBmdW5jdGlvbigpIHsKICAgIGludmFsaWRKc29ucEJ0bi5jbGljaygpOwogICAgZmV0Y2hCdG4uY2xpY2soKTsKICAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcwJyk7CiAgICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goJ1JlcXVlc3QgZmFpbGVkJyk7CiAgfSk7CjwvZmlsZT4KPC9leGFtcGxlPgogICAgICovCiAgICBmdW5jdGlvbiAkaHR0cChyZXF1ZXN0Q29uZmlnKSB7CiAgICAgIHZhciBjb25maWcgPSB7CiAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0LAogICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZQogICAgICB9OwogICAgICB2YXIgaGVhZGVycyA9IG1lcmdlSGVhZGVycyhyZXF1ZXN0Q29uZmlnKTsKCiAgICAgIGV4dGVuZChjb25maWcsIHJlcXVlc3RDb25maWcpOwogICAgICBjb25maWcuaGVhZGVycyA9IGhlYWRlcnM7CiAgICAgIGNvbmZpZy5tZXRob2QgPSB1cHBlcmNhc2UoY29uZmlnLm1ldGhvZCk7CgogICAgICB2YXIgc2VydmVyUmVxdWVzdCA9IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICAgIGhlYWRlcnMgPSBjb25maWcuaGVhZGVyczsKICAgICAgICB2YXIgcmVxRGF0YSA9IHRyYW5zZm9ybURhdGEoY29uZmlnLmRhdGEsIGhlYWRlcnNHZXR0ZXIoaGVhZGVycyksIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0KTsKCiAgICAgICAgLy8gc3RyaXAgY29udGVudC10eXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkCiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHJlcURhdGEpKSB7CiAgICAgICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBoZWFkZXIpIHsKICAgICAgICAgICAgaWYgKGxvd2VyY2FzZShoZWFkZXIpID09PSAnY29udGVudC10eXBlJykgewogICAgICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykgJiYgIWlzVW5kZWZpbmVkKGRlZmF1bHRzLndpdGhDcmVkZW50aWFscykpIHsKICAgICAgICAgIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgPSBkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHM7CiAgICAgICAgfQoKICAgICAgICAvLyBzZW5kIHJlcXVlc3QKICAgICAgICByZXR1cm4gc2VuZFJlcShjb25maWcsIHJlcURhdGEsIGhlYWRlcnMpLnRoZW4odHJhbnNmb3JtUmVzcG9uc2UsIHRyYW5zZm9ybVJlc3BvbnNlKTsKICAgICAgfTsKCiAgICAgIHZhciBjaGFpbiA9IFtzZXJ2ZXJSZXF1ZXN0LCB1bmRlZmluZWRdOwogICAgICB2YXIgcHJvbWlzZSA9ICRxLndoZW4oY29uZmlnKTsKCiAgICAgIC8vIGFwcGx5IGludGVyY2VwdG9ycwogICAgICBmb3JFYWNoKHJldmVyc2VkSW50ZXJjZXB0b3JzLCBmdW5jdGlvbihpbnRlcmNlcHRvcikgewogICAgICAgIGlmIChpbnRlcmNlcHRvci5yZXF1ZXN0IHx8IGludGVyY2VwdG9yLnJlcXVlc3RFcnJvcikgewogICAgICAgICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5yZXF1ZXN0LCBpbnRlcmNlcHRvci5yZXF1ZXN0RXJyb3IpOwogICAgICAgIH0KICAgICAgICBpZiAoaW50ZXJjZXB0b3IucmVzcG9uc2UgfHwgaW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvcikgewogICAgICAgICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5yZXNwb25zZSwgaW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvcik7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHdoaWxlKGNoYWluLmxlbmd0aCkgewogICAgICAgIHZhciB0aGVuRm4gPSBjaGFpbi5zaGlmdCgpOwogICAgICAgIHZhciByZWplY3RGbiA9IGNoYWluLnNoaWZ0KCk7CgogICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4odGhlbkZuLCByZWplY3RGbik7CiAgICAgIH0KCiAgICAgIHByb21pc2Uuc3VjY2VzcyA9IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICBmbihyZXNwb25zZS5kYXRhLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLmhlYWRlcnMsIGNvbmZpZyk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHByb21pc2U7CiAgICAgIH07CgogICAgICBwcm9taXNlLmVycm9yID0gZnVuY3Rpb24oZm4pIHsKICAgICAgICBwcm9taXNlLnRoZW4obnVsbCwgZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgIGZuKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UuaGVhZGVycywgY29uZmlnKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcHJvbWlzZTsKICAgICAgfTsKCiAgICAgIHJldHVybiBwcm9taXNlOwoKICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UocmVzcG9uc2UpIHsKICAgICAgICAvLyBtYWtlIGEgY29weSBzaW5jZSB0aGUgcmVzcG9uc2UgbXVzdCBiZSBjYWNoZWFibGUKICAgICAgICB2YXIgcmVzcCA9IGV4dGVuZCh7fSwgcmVzcG9uc2UpOwogICAgICAgIGlmICghcmVzcG9uc2UuZGF0YSkgewogICAgICAgICAgcmVzcC5kYXRhID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzcC5kYXRhID0gdHJhbnNmb3JtRGF0YShyZXNwb25zZS5kYXRhLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gKGlzU3VjY2VzcyhyZXNwb25zZS5zdGF0dXMpKQogICAgICAgICAgPyByZXNwCiAgICAgICAgICA6ICRxLnJlamVjdChyZXNwKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gbWVyZ2VIZWFkZXJzKGNvbmZpZykgewogICAgICAgIHZhciBkZWZIZWFkZXJzID0gZGVmYXVsdHMuaGVhZGVycywKICAgICAgICAgICAgcmVxSGVhZGVycyA9IGV4dGVuZCh7fSwgY29uZmlnLmhlYWRlcnMpLAogICAgICAgICAgICBkZWZIZWFkZXJOYW1lLCBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lLCByZXFIZWFkZXJOYW1lOwoKICAgICAgICBkZWZIZWFkZXJzID0gZXh0ZW5kKHt9LCBkZWZIZWFkZXJzLmNvbW1vbiwgZGVmSGVhZGVyc1tsb3dlcmNhc2UoY29uZmlnLm1ldGhvZCldKTsKCiAgICAgICAgLy8gdXNpbmcgZm9yLWluIGluc3RlYWQgb2YgZm9yRWFjaCB0byBhdm9pZCB1bmVjZXNzYXJ5IGl0ZXJhdGlvbiBhZnRlciBoZWFkZXIgaGFzIGJlZW4gZm91bmQKICAgICAgICBkZWZhdWx0SGVhZGVyc0l0ZXJhdGlvbjoKICAgICAgICBmb3IgKGRlZkhlYWRlck5hbWUgaW4gZGVmSGVhZGVycykgewogICAgICAgICAgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSA9IGxvd2VyY2FzZShkZWZIZWFkZXJOYW1lKTsKCiAgICAgICAgICBmb3IgKHJlcUhlYWRlck5hbWUgaW4gcmVxSGVhZGVycykgewogICAgICAgICAgICBpZiAobG93ZXJjYXNlKHJlcUhlYWRlck5hbWUpID09PSBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lKSB7CiAgICAgICAgICAgICAgY29udGludWUgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb247CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXFIZWFkZXJzW2RlZkhlYWRlck5hbWVdID0gZGVmSGVhZGVyc1tkZWZIZWFkZXJOYW1lXTsKICAgICAgICB9CgogICAgICAgIC8vIGV4ZWN1dGUgaWYgaGVhZGVyIHZhbHVlIGlzIGEgZnVuY3Rpb24gZm9yIG1lcmdlZCBoZWFkZXJzCiAgICAgICAgZXhlY0hlYWRlcnMocmVxSGVhZGVycyk7CiAgICAgICAgcmV0dXJuIHJlcUhlYWRlcnM7CgogICAgICAgIGZ1bmN0aW9uIGV4ZWNIZWFkZXJzKGhlYWRlcnMpIHsKICAgICAgICAgIHZhciBoZWFkZXJDb250ZW50OwoKICAgICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24oaGVhZGVyRm4sIGhlYWRlcikgewogICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihoZWFkZXJGbikpIHsKICAgICAgICAgICAgICBoZWFkZXJDb250ZW50ID0gaGVhZGVyRm4oKTsKICAgICAgICAgICAgICBpZiAoaGVhZGVyQ29udGVudCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBoZWFkZXJzW2hlYWRlcl0gPSBoZWFkZXJDb250ZW50OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1toZWFkZXJdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzID0gW107CgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkaHR0cCNnZXQKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBHRVRgIHJlcXVlc3QuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QKICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0CiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3QKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJGh0dHAjZGVsZXRlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgREVMRVRFYCByZXF1ZXN0LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRodHRwI2hlYWQKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBIRUFEYCByZXF1ZXN0LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRodHRwI2pzb25wCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSlNPTlBgIHJlcXVlc3QuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgIFRoZSBuYW1lIG9mIHRoZSBjYWxsYmFjayBzaG91bGQgYmUgdGhlIHN0cmluZyBgSlNPTl9DQUxMQkFDS2AuCiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KICAgIGNyZWF0ZVNob3J0TWV0aG9kcygnZ2V0JywgJ2RlbGV0ZScsICdoZWFkJywgJ2pzb25wJyk7CgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkaHR0cCNwb3N0CiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUE9TVGAgcmVxdWVzdC4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdAogICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudAogICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QKICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdAogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkaHR0cCNwdXQKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQVVRgIHJlcXVlc3QuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QKICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnQKICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0CiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3QKICAgICAqLwoKICAgICAvKioKICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICogQG5hbWUgJGh0dHAjcGF0Y2gKICAgICAgKgogICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQQVRDSGAgcmVxdWVzdC4KICAgICAgKgogICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudAogICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0CiAgICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgICovCiAgICBjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YSgncG9zdCcsICdwdXQnLCAncGF0Y2gnKTsKCiAgICAgICAgLyoqCiAgICAgICAgICogQG5nZG9jIHByb3BlcnR5CiAgICAgICAgICogQG5hbWUgJGh0dHAjZGVmYXVsdHMKICAgICAgICAgKgogICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAqIFJ1bnRpbWUgZXF1aXZhbGVudCBvZiB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHNgIHByb3BlcnR5LiBBbGxvd3MgY29uZmlndXJhdGlvbiBvZgogICAgICAgICAqIGRlZmF1bHQgaGVhZGVycywgd2l0aENyZWRlbnRpYWxzIGFzIHdlbGwgYXMgcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zLgogICAgICAgICAqCiAgICAgICAgICogU2VlICJTZXR0aW5nIEhUVFAgSGVhZGVycyIgYW5kICJUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlcyIgc2VjdGlvbnMgYWJvdmUuCiAgICAgICAgICovCiAgICAkaHR0cC5kZWZhdWx0cyA9IGRlZmF1bHRzOwoKCiAgICByZXR1cm4gJGh0dHA7CgoKICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kcyhuYW1lcykgewogICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkgewogICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHsKICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoY29uZmlnIHx8IHt9LCB7CiAgICAgICAgICAgIG1ldGhvZDogbmFtZSwKICAgICAgICAgICAgdXJsOiB1cmwKICAgICAgICAgIH0pKTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCgogICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEobmFtZSkgewogICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkgewogICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHsKICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoY29uZmlnIHx8IHt9LCB7CiAgICAgICAgICAgIG1ldGhvZDogbmFtZSwKICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgIH0pKTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBNYWtlcyB0aGUgcmVxdWVzdC4KICAgICAqCiAgICAgKiAhISEgQUNDRVNTRVMgQ0xPU1VSRSBWQVJTOgogICAgICogJGh0dHBCYWNrZW5kLCBkZWZhdWx0cywgJGxvZywgJHJvb3RTY29wZSwgZGVmYXVsdENhY2hlLCAkaHR0cC5wZW5kaW5nUmVxdWVzdHMKICAgICAqLwogICAgZnVuY3Rpb24gc2VuZFJlcShjb25maWcsIHJlcURhdGEsIHJlcUhlYWRlcnMpIHsKICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKSwKICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLAogICAgICAgICAgY2FjaGUsCiAgICAgICAgICBjYWNoZWRSZXNwLAogICAgICAgICAgdXJsID0gYnVpbGRVcmwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcyk7CgogICAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMucHVzaChjb25maWcpOwogICAgICBwcm9taXNlLnRoZW4ocmVtb3ZlUGVuZGluZ1JlcSwgcmVtb3ZlUGVuZGluZ1JlcSk7CgoKICAgICAgaWYgKChjb25maWcuY2FjaGUgfHwgZGVmYXVsdHMuY2FjaGUpICYmIGNvbmZpZy5jYWNoZSAhPT0gZmFsc2UgJiYKICAgICAgICAgIChjb25maWcubWV0aG9kID09PSAnR0VUJyB8fCBjb25maWcubWV0aG9kID09PSAnSlNPTlAnKSkgewogICAgICAgIGNhY2hlID0gaXNPYmplY3QoY29uZmlnLmNhY2hlKSA/IGNvbmZpZy5jYWNoZQogICAgICAgICAgICAgIDogaXNPYmplY3QoZGVmYXVsdHMuY2FjaGUpID8gZGVmYXVsdHMuY2FjaGUKICAgICAgICAgICAgICA6IGRlZmF1bHRDYWNoZTsKICAgICAgfQoKICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgY2FjaGVkUmVzcCA9IGNhY2hlLmdldCh1cmwpOwogICAgICAgIGlmIChpc0RlZmluZWQoY2FjaGVkUmVzcCkpIHsKICAgICAgICAgIGlmIChpc1Byb21pc2VMaWtlKGNhY2hlZFJlc3ApKSB7CiAgICAgICAgICAgIC8vIGNhY2hlZCByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCwgYnV0IHRoZXJlIGlzIG5vIHJlc3BvbnNlIHlldAogICAgICAgICAgICBjYWNoZWRSZXNwLnRoZW4ocmVtb3ZlUGVuZGluZ1JlcSwgcmVtb3ZlUGVuZGluZ1JlcSk7CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRSZXNwOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gc2VydmluZyBmcm9tIGNhY2hlCiAgICAgICAgICAgIGlmIChpc0FycmF5KGNhY2hlZFJlc3ApKSB7CiAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UoY2FjaGVkUmVzcFsxXSwgY2FjaGVkUmVzcFswXSwgc2hhbGxvd0NvcHkoY2FjaGVkUmVzcFsyXSksIGNhY2hlZFJlc3BbM10pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3AsIDIwMCwge30sICdPSycpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIHB1dCB0aGUgcHJvbWlzZSBmb3IgdGhlIG5vbi10cmFuc2Zvcm1lZCByZXNwb25zZSBpbnRvIGNhY2hlIGFzIGEgcGxhY2Vob2xkZXIKICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIHByb21pc2UpOwogICAgICAgIH0KICAgICAgfQoKCiAgICAgIC8vIGlmIHdlIHdvbid0IGhhdmUgdGhlIHJlc3BvbnNlIGluIGNhY2hlLCBzZXQgdGhlIHhzcmYgaGVhZGVycyBhbmQKICAgICAgLy8gc2VuZCB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZAogICAgICBpZiAoaXNVbmRlZmluZWQoY2FjaGVkUmVzcCkpIHsKICAgICAgICB2YXIgeHNyZlZhbHVlID0gdXJsSXNTYW1lT3JpZ2luKGNvbmZpZy51cmwpCiAgICAgICAgICAgID8gJGJyb3dzZXIuY29va2llcygpW2NvbmZpZy54c3JmQ29va2llTmFtZSB8fCBkZWZhdWx0cy54c3JmQ29va2llTmFtZV0KICAgICAgICAgICAgOiB1bmRlZmluZWQ7CiAgICAgICAgaWYgKHhzcmZWYWx1ZSkgewogICAgICAgICAgcmVxSGVhZGVyc1soY29uZmlnLnhzcmZIZWFkZXJOYW1lIHx8IGRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lKV0gPSB4c3JmVmFsdWU7CiAgICAgICAgfQoKICAgICAgICAkaHR0cEJhY2tlbmQoY29uZmlnLm1ldGhvZCwgdXJsLCByZXFEYXRhLCBkb25lLCByZXFIZWFkZXJzLCBjb25maWcudGltZW91dCwKICAgICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscywgY29uZmlnLnJlc3BvbnNlVHlwZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBwcm9taXNlOwoKCiAgICAgIC8qKgogICAgICAgKiBDYWxsYmFjayByZWdpc3RlcmVkIHRvICRodHRwQmFja2VuZCgpOgogICAgICAgKiAgLSBjYWNoZXMgdGhlIHJlc3BvbnNlIGlmIGRlc2lyZWQKICAgICAgICogIC0gcmVzb2x2ZXMgdGhlIHJhdyAkaHR0cCBwcm9taXNlCiAgICAgICAqICAtIGNhbGxzICRhcHBseQogICAgICAgKi8KICAgICAgZnVuY3Rpb24gZG9uZShzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KSB7CiAgICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgICBpZiAoaXNTdWNjZXNzKHN0YXR1cykpIHsKICAgICAgICAgICAgY2FjaGUucHV0KHVybCwgW3N0YXR1cywgcmVzcG9uc2UsIHBhcnNlSGVhZGVycyhoZWFkZXJzU3RyaW5nKSwgc3RhdHVzVGV4dF0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gcmVtb3ZlIHByb21pc2UgZnJvbSB0aGUgY2FjaGUKICAgICAgICAgICAgY2FjaGUucmVtb3ZlKHVybCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiByZXNvbHZlSHR0cFByb21pc2UoKSB7CiAgICAgICAgICByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KTsKICAgICAgICB9CgogICAgICAgIGlmICh1c2VBcHBseUFzeW5jKSB7CiAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseUFzeW5jKHJlc29sdmVIdHRwUHJvbWlzZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmVIdHRwUHJvbWlzZSgpOwogICAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGFwcGx5KCk7CiAgICAgICAgfQogICAgICB9CgoKICAgICAgLyoqCiAgICAgICAqIFJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZS4KICAgICAgICovCiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIHN0YXR1c1RleHQpIHsKICAgICAgICAvLyBub3JtYWxpemUgaW50ZXJuYWwgc3RhdHVzZXMgdG8gMAogICAgICAgIHN0YXR1cyA9IE1hdGgubWF4KHN0YXR1cywgMCk7CgogICAgICAgIChpc1N1Y2Nlc3Moc3RhdHVzKSA/IGRlZmVycmVkLnJlc29sdmUgOiBkZWZlcnJlZC5yZWplY3QpKHsKICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLAogICAgICAgICAgc3RhdHVzOiBzdGF0dXMsCiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLAogICAgICAgICAgY29uZmlnOiBjb25maWcsCiAgICAgICAgICBzdGF0dXNUZXh0IDogc3RhdHVzVGV4dAogICAgICAgIH0pOwogICAgICB9CgoKICAgICAgZnVuY3Rpb24gcmVtb3ZlUGVuZGluZ1JlcSgpIHsKICAgICAgICB2YXIgaWR4ID0gJGh0dHAucGVuZGluZ1JlcXVlc3RzLmluZGV4T2YoY29uZmlnKTsKICAgICAgICBpZiAoaWR4ICE9PSAtMSkgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnNwbGljZShpZHgsIDEpOwogICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIGJ1aWxkVXJsKHVybCwgcGFyYW1zKSB7CiAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gdXJsOwogICAgICB2YXIgcGFydHMgPSBbXTsKICAgICAgZm9yRWFjaFNvcnRlZChwYXJhbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47CiAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlKSkgdmFsdWUgPSBbdmFsdWVdOwoKICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbih2KSB7CiAgICAgICAgICBpZiAoaXNPYmplY3QodikpIHsKICAgICAgICAgICAgaWYgKGlzRGF0ZSh2KSl7CiAgICAgICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2ID0gdG9Kc29uKHYpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSkgKyAnPScgKwogICAgICAgICAgICAgICAgICAgICBlbmNvZGVVcmlRdWVyeSh2KSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICBpZihwYXJ0cy5sZW5ndGggPiAwKSB7CiAgICAgICAgdXJsICs9ICgodXJsLmluZGV4T2YoJz8nKSA9PSAtMSkgPyAnPycgOiAnJicpICsgcGFydHMuam9pbignJicpOwogICAgICB9CiAgICAgIHJldHVybiB1cmw7CiAgICB9CiAgfV07Cn0KCmZ1bmN0aW9uIGNyZWF0ZVhocigpIHsKICAgIHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7Cn0KCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkaHR0cEJhY2tlbmQKICogQHJlcXVpcmVzICR3aW5kb3cKICogQHJlcXVpcmVzICRkb2N1bWVudAogKgogKiBAZGVzY3JpcHRpb24KICogSFRUUCBiYWNrZW5kIHVzZWQgYnkgdGhlIHtAbGluayBuZy4kaHR0cCBzZXJ2aWNlfSB0aGF0IGRlbGVnYXRlcyB0bwogKiBYTUxIdHRwUmVxdWVzdCBvYmplY3Qgb3IgSlNPTlAgYW5kIGRlYWxzIHdpdGggYnJvd3NlciBpbmNvbXBhdGliaWxpdGllcy4KICoKICogWW91IHNob3VsZCBuZXZlciBuZWVkIHRvIHVzZSB0aGlzIHNlcnZpY2UgZGlyZWN0bHksIGluc3RlYWQgdXNlIHRoZSBoaWdoZXItbGV2ZWwgYWJzdHJhY3Rpb25zOgogKiB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IG9yIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZSAkcmVzb3VyY2V9LgogKgogKiBEdXJpbmcgdGVzdGluZyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIHN3YXBwZWQgd2l0aCB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCBtb2NrCiAqICRodHRwQmFja2VuZH0gd2hpY2ggY2FuIGJlIHRyYWluZWQgd2l0aCByZXNwb25zZXMuCiAqLwpmdW5jdGlvbiAkSHR0cEJhY2tlbmRQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyRicm93c2VyJywgJyR3aW5kb3cnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJGJyb3dzZXIsICR3aW5kb3csICRkb2N1bWVudCkgewogICAgcmV0dXJuIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCBjcmVhdGVYaHIsICRicm93c2VyLmRlZmVyLCAkd2luZG93LmFuZ3VsYXIuY2FsbGJhY2tzLCAkZG9jdW1lbnRbMF0pOwogIH1dOwp9CgpmdW5jdGlvbiBjcmVhdGVIdHRwQmFja2VuZCgkYnJvd3NlciwgY3JlYXRlWGhyLCAkYnJvd3NlckRlZmVyLCBjYWxsYmFja3MsIHJhd0RvY3VtZW50KSB7CiAgLy8gVE9ETyh2b2p0YSk6IGZpeCB0aGUgc2lnbmF0dXJlCiAgcmV0dXJuIGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBwb3N0LCBjYWxsYmFjaywgaGVhZGVycywgdGltZW91dCwgd2l0aENyZWRlbnRpYWxzLCByZXNwb25zZVR5cGUpIHsKICAgICRicm93c2VyLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQoKTsKICAgIHVybCA9IHVybCB8fCAkYnJvd3Nlci51cmwoKTsKCiAgICBpZiAobG93ZXJjYXNlKG1ldGhvZCkgPT0gJ2pzb25wJykgewogICAgICB2YXIgY2FsbGJhY2tJZCA9ICdfJyArIChjYWxsYmFja3MuY291bnRlcisrKS50b1N0cmluZygzNik7CiAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSA9IGRhdGE7CiAgICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmNhbGxlZCA9IHRydWU7CiAgICAgIH07CgogICAgICB2YXIganNvbnBEb25lID0ganNvbnBSZXEodXJsLnJlcGxhY2UoJ0pTT05fQ0FMTEJBQ0snLCAnYW5ndWxhci5jYWxsYmFja3MuJyArIGNhbGxiYWNrSWQpLAogICAgICAgICAgY2FsbGJhY2tJZCwgZnVuY3Rpb24oc3RhdHVzLCB0ZXh0KSB7CiAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCBzdGF0dXMsIGNhbGxiYWNrc1tjYWxsYmFja0lkXS5kYXRhLCAiIiwgdGV4dCk7CiAgICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gbm9vcDsKICAgICAgfSk7CiAgICB9IGVsc2UgewoKICAgICAgdmFyIHhociA9IGNyZWF0ZVhocigpOwoKICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpOwogICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkgewogICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uIHJlcXVlc3RMb2FkZWQoKSB7CiAgICAgICAgdmFyIHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dCB8fCAnJzsKCiAgICAgICAgLy8gcmVzcG9uc2VUZXh0IGlzIHRoZSBvbGQtc2Nob29sIHdheSBvZiByZXRyaWV2aW5nIHJlc3BvbnNlIChzdXBwb3J0ZWQgYnkgSUU4ICYgOSkKICAgICAgICAvLyByZXNwb25zZS9yZXNwb25zZVR5cGUgcHJvcGVydGllcyB3ZXJlIGludHJvZHVjZWQgaW4gWEhSIExldmVsMiBzcGVjIChzdXBwb3J0ZWQgYnkgSUUxMCkKICAgICAgICB2YXIgcmVzcG9uc2UgPSAoJ3Jlc3BvbnNlJyBpbiB4aHIpID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dDsKCiAgICAgICAgLy8gbm9ybWFsaXplIElFOSBidWcgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzE0NTApCiAgICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiB4aHIuc3RhdHVzOwoKICAgICAgICAvLyBmaXggc3RhdHVzIGNvZGUgd2hlbiBpdCBpcyAwICgwIHN0YXR1cyBpcyB1bmRvY3VtZW50ZWQpLgogICAgICAgIC8vIE9jY3VycyB3aGVuIGFjY2Vzc2luZyBmaWxlIHJlc291cmNlcyBvciBvbiBBbmRyb2lkIDQuMSBzdG9jayBicm93c2VyCiAgICAgICAgLy8gd2hpbGUgcmV0cmlldmluZyBmaWxlcyBmcm9tIGFwcGxpY2F0aW9uIGNhY2hlLgogICAgICAgIGlmIChzdGF0dXMgPT09IDApIHsKICAgICAgICAgIHN0YXR1cyA9IHJlc3BvbnNlID8gMjAwIDogdXJsUmVzb2x2ZSh1cmwpLnByb3RvY29sID09ICdmaWxlJyA/IDQwNCA6IDA7CiAgICAgICAgfQoKICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssCiAgICAgICAgICAgIHN0YXR1cywKICAgICAgICAgICAgcmVzcG9uc2UsCiAgICAgICAgICAgIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSwKICAgICAgICAgICAgc3RhdHVzVGV4dCk7CiAgICAgIH07CgogICAgICB2YXIgcmVxdWVzdEVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgIC8vIFRoZSByZXNwb25zZSBpcyBhbHdheXMgZW1wdHkKICAgICAgICAvLyBTZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWVycm9yLXN0ZXBzIGFuZCBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1uZXR3b3JrLWVycm9yCiAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCAtMSwgbnVsbCwgbnVsbCwgJycpOwogICAgICB9OwoKICAgICAgeGhyLm9uZXJyb3IgPSByZXF1ZXN0RXJyb3I7CiAgICAgIHhoci5vbmFib3J0ID0gcmVxdWVzdEVycm9yOwoKICAgICAgaWYgKHdpdGhDcmVkZW50aWFscykgewogICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlOwogICAgICB9CgogICAgICBpZiAocmVzcG9uc2VUeXBlKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgLy8gV2ViS2l0IGFkZGVkIHN1cHBvcnQgZm9yIHRoZSBqc29uIHJlc3BvbnNlVHlwZSB2YWx1ZSBvbiAwOS8wMy8yMDEzCiAgICAgICAgICAvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzM2NDguIFZlcnNpb25zIG9mIFNhZmFyaSBwcmlvciB0byA3IGFyZQogICAgICAgICAgLy8ga25vd24gdG8gdGhyb3cgd2hlbiBzZXR0aW5nIHRoZSB2YWx1ZSAianNvbiIgYXMgdGhlIHJlc3BvbnNlIHR5cGUuIE90aGVyIG9sZGVyCiAgICAgICAgICAvLyBicm93c2VycyBpbXBsZW1lbnRpbmcgdGhlIHJlc3BvbnNlVHlwZQogICAgICAgICAgLy8KICAgICAgICAgIC8vIFRoZSBqc29uIHJlc3BvbnNlIHR5cGUgY2FuIGJlIGlnbm9yZWQgaWYgbm90IHN1cHBvcnRlZCwgYmVjYXVzZSBKU09OIHBheWxvYWRzIGFyZQogICAgICAgICAgLy8gcGFyc2VkIG9uIHRoZSBjbGllbnQtc2lkZSByZWdhcmRsZXNzLgogICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7CiAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB4aHIuc2VuZChwb3N0IHx8IG51bGwpOwogICAgfQoKICAgIGlmICh0aW1lb3V0ID4gMCkgewogICAgICB2YXIgdGltZW91dElkID0gJGJyb3dzZXJEZWZlcih0aW1lb3V0UmVxdWVzdCwgdGltZW91dCk7CiAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZUxpa2UodGltZW91dCkpIHsKICAgICAgdGltZW91dC50aGVuKHRpbWVvdXRSZXF1ZXN0KTsKICAgIH0KCgogICAgZnVuY3Rpb24gdGltZW91dFJlcXVlc3QoKSB7CiAgICAgIGpzb25wRG9uZSAmJiBqc29ucERvbmUoKTsKICAgICAgeGhyICYmIHhoci5hYm9ydCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCkgewogICAgICAvLyBjYW5jZWwgdGltZW91dCBhbmQgc3Vic2VxdWVudCB0aW1lb3V0IHByb21pc2UgcmVzb2x1dGlvbgogICAgICB0aW1lb3V0SWQgJiYgJGJyb3dzZXJEZWZlci5jYW5jZWwodGltZW91dElkKTsKICAgICAganNvbnBEb25lID0geGhyID0gbnVsbDsKCiAgICAgIGNhbGxiYWNrKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpOwogICAgICAkYnJvd3Nlci4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApOwogICAgfQogIH07CgogIGZ1bmN0aW9uIGpzb25wUmVxKHVybCwgY2FsbGJhY2tJZCwgZG9uZSkgewogICAgLy8gd2UgY2FuJ3QgdXNlIGpRdWVyeS9qcUxpdGUgaGVyZSBiZWNhdXNlIGpRdWVyeSBkb2VzIGNyYXp5IHNoaXQgd2l0aCBzY3JpcHQgZWxlbWVudHMsIGUuZy46CiAgICAvLyAtIGZldGNoZXMgbG9jYWwgc2NyaXB0cyB2aWEgWEhSIGFuZCBldmFscyB0aGVtCiAgICAvLyAtIGFkZHMgYW5kIGltbWVkaWF0ZWx5IHJlbW92ZXMgc2NyaXB0IGVsZW1lbnRzIGZyb20gdGhlIGRvY3VtZW50CiAgICB2YXIgc2NyaXB0ID0gcmF3RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksIGNhbGxiYWNrID0gbnVsbDsKICAgIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7CiAgICBzY3JpcHQuc3JjID0gdXJsOwogICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTsKCiAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihzY3JpcHQsICJsb2FkIiwgY2FsbGJhY2spOwogICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oc2NyaXB0LCAiZXJyb3IiLCBjYWxsYmFjayk7CiAgICAgIHJhd0RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0KTsKICAgICAgc2NyaXB0ID0gbnVsbDsKICAgICAgdmFyIHN0YXR1cyA9IC0xOwogICAgICB2YXIgdGV4dCA9ICJ1bmtub3duIjsKCiAgICAgIGlmIChldmVudCkgewogICAgICAgIGlmIChldmVudC50eXBlID09PSAibG9hZCIgJiYgIWNhbGxiYWNrc1tjYWxsYmFja0lkXS5jYWxsZWQpIHsKICAgICAgICAgIGV2ZW50ID0geyB0eXBlOiAiZXJyb3IiIH07CiAgICAgICAgfQogICAgICAgIHRleHQgPSBldmVudC50eXBlOwogICAgICAgIHN0YXR1cyA9IGV2ZW50LnR5cGUgPT09ICJlcnJvciIgPyA0MDQgOiAyMDA7CiAgICAgIH0KCiAgICAgIGlmIChkb25lKSB7CiAgICAgICAgZG9uZShzdGF0dXMsIHRleHQpOwogICAgICB9CiAgICB9OwoKICAgIGFkZEV2ZW50TGlzdGVuZXJGbihzY3JpcHQsICJsb2FkIiwgY2FsbGJhY2spOwogICAgYWRkRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgImVycm9yIiwgY2FsbGJhY2spOwogICAgcmF3RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgcmV0dXJuIGNhbGxiYWNrOwogIH0KfQoKdmFyICRpbnRlcnBvbGF0ZU1pbkVyciA9IG1pbkVycignJGludGVycG9sYXRlJyk7CgovKioKICogQG5nZG9jIHByb3ZpZGVyCiAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBVc2VkIGZvciBjb25maWd1cmluZyB0aGUgaW50ZXJwb2xhdGlvbiBtYXJrdXAuIERlZmF1bHRzIHRvIGB7e2AgYW5kIGB9fWAuCiAqCiAqIEBleGFtcGxlCjxleGFtcGxlIG1vZHVsZT0iY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCI+CjxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgo8c2NyaXB0PgogIHZhciBjdXN0b21JbnRlcnBvbGF0aW9uQXBwID0gYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUludGVycG9sYXRpb25BcHAnLCBbXSk7CgogIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29uZmlnKGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZVByb3ZpZGVyKSB7CiAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbCgnLy8nKTsKICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbCgnLy8nKTsKICB9KTsKCgogIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29udHJvbGxlcignRGVtb0NvbnRyb2xsZXInLCBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5sYWJlbCA9ICJUaGlzIGJpbmRpbmcgaXMgYnJvdWdodCB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLiI7CiAgfSk7Cjwvc2NyaXB0Pgo8ZGl2IG5nLWFwcD0iQXBwIiBuZy1jb250cm9sbGVyPSJEZW1vQ29udHJvbGxlciBhcyBkZW1vIj4KICAgIC8vZGVtby5sYWJlbC8vCjwvZGl2Pgo8L2ZpbGU+CjxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogIGl0KCdzaG91bGQgaW50ZXJwb2xhdGUgYmluZGluZyB3aXRoIGN1c3RvbSBzeW1ib2xzJywgZnVuY3Rpb24oKSB7CiAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdkZW1vLmxhYmVsJykpLmdldFRleHQoKSkudG9CZSgnVGhpcyBiaW5kaW5nIGlzIGJyb3VnaHQgeW91IGJ5IC8vIGludGVycG9sYXRpb24gc3ltYm9scy4nKTsKICB9KTsKPC9maWxlPgo8L2V4YW1wbGU+CiAqLwpmdW5jdGlvbiAkSW50ZXJwb2xhdGVQcm92aWRlcigpIHsKICB2YXIgc3RhcnRTeW1ib2wgPSAne3snOwogIHZhciBlbmRTeW1ib2wgPSAnfX0nOwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2wKICAgKiBAZGVzY3JpcHRpb24KICAgKiBTeW1ib2wgdG8gZGVub3RlIHN0YXJ0IG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB7e2AuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIHN0YXJ0aW5nIHN5bWJvbCB0by4KICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHN5bWJvbCB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLgogICAqLwogIHRoaXMuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSl7CiAgICBpZiAodmFsdWUpIHsKICAgICAgc3RhcnRTeW1ib2wgPSB2YWx1ZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gc3RhcnRTeW1ib2w7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbAogICAqIEBkZXNjcmlwdGlvbgogICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBuZXcgdmFsdWUgdG8gc2V0IHRoZSBlbmRpbmcgc3ltYm9sIHRvLgogICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuCiAgICovCiAgdGhpcy5lbmRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSl7CiAgICBpZiAodmFsdWUpIHsKICAgICAgZW5kU3ltYm9sID0gdmFsdWU7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGVuZFN5bWJvbDsKICAgIH0KICB9OwoKCiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHNjZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICRzY2UpIHsKICAgIHZhciBzdGFydFN5bWJvbExlbmd0aCA9IHN0YXJ0U3ltYm9sLmxlbmd0aCwKICAgICAgICBlbmRTeW1ib2xMZW5ndGggPSBlbmRTeW1ib2wubGVuZ3RoLAogICAgICAgIGVzY2FwZWRTdGFydFJlZ2V4cCA9IG5ldyBSZWdFeHAoc3RhcnRTeW1ib2wucmVwbGFjZSgvLi9nLCBlc2NhcGUpLCAnZycpLAogICAgICAgIGVzY2FwZWRFbmRSZWdleHAgPSBuZXcgUmVnRXhwKGVuZFN5bWJvbC5yZXBsYWNlKC8uL2csIGVzY2FwZSksICdnJyk7CgogICAgZnVuY3Rpb24gZXNjYXBlKGNoKSB7CiAgICAgIHJldHVybiAnXFxcXFxcJyArIGNoOwogICAgfQoKICAgIC8qKgogICAgICogQG5nZG9jIHNlcnZpY2UKICAgICAqIEBuYW1lICRpbnRlcnBvbGF0ZQogICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAqCiAgICAgKiBAcmVxdWlyZXMgJHBhcnNlCiAgICAgKiBAcmVxdWlyZXMgJHNjZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICoKICAgICAqIENvbXBpbGVzIGEgc3RyaW5nIHdpdGggbWFya3VwIGludG8gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4gVGhpcyBzZXJ2aWNlIGlzIHVzZWQgYnkgdGhlCiAgICAgKiBIVE1MIHtAbGluayBuZy4kY29tcGlsZSAkY29tcGlsZX0gc2VydmljZSBmb3IgZGF0YSBiaW5kaW5nLiBTZWUKICAgICAqIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciAkaW50ZXJwb2xhdGVQcm92aWRlcn0gZm9yIGNvbmZpZ3VyaW5nIHRoZQogICAgICogaW50ZXJwb2xhdGlvbiBtYXJrdXAuCiAgICAgKgogICAgICoKICAgICAqIGBgYGpzCiAgICAgKiAgIHZhciAkaW50ZXJwb2xhdGUgPSAuLi47IC8vIGluamVjdGVkCiAgICAgKiAgIHZhciBleHAgPSAkaW50ZXJwb2xhdGUoJ0hlbGxvIHt7bmFtZSB8IHVwcGVyY2FzZX19IScpOwogICAgICogICBleHBlY3QoZXhwKHtuYW1lOidBbmd1bGFyJ30pLnRvRXF1YWwoJ0hlbGxvIEFOR1VMQVIhJyk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiBgJGludGVycG9sYXRlYCB0YWtlcyBhbiBvcHRpb25hbCBmb3VydGggYXJndW1lbnQsIGBhbGxPck5vdGhpbmdgLiBJZiBgYWxsT3JOb3RoaW5nYCBpcwogICAgICogYHRydWVgLCB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zCiAgICAgKiBldmFsdWF0ZSB0byBhIHZhbHVlIG90aGVyIHRoYW4gYHVuZGVmaW5lZGAuCiAgICAgKgogICAgICogYGBganMKICAgICAqICAgdmFyICRpbnRlcnBvbGF0ZSA9IC4uLjsgLy8gaW5qZWN0ZWQKICAgICAqICAgdmFyIGNvbnRleHQgPSB7Z3JlZXRpbmc6ICdIZWxsbycsIG5hbWU6IHVuZGVmaW5lZCB9OwogICAgICoKICAgICAqICAgLy8gZGVmYXVsdCAiZm9yZ2l2aW5nIiBtb2RlCiAgICAgKiAgIHZhciBleHAgPSAkaW50ZXJwb2xhdGUoJ3t7Z3JlZXRpbmd9fSB7e25hbWV9fSEnKTsKICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9FcXVhbCgnSGVsbG8gIScpOwogICAgICoKICAgICAqICAgLy8gImFsbE9yTm90aGluZyIgbW9kZQogICAgICogICBleHAgPSAkaW50ZXJwb2xhdGUoJ3t7Z3JlZXRpbmd9fSB7e25hbWV9fSEnLCBmYWxzZSwgbnVsbCwgdHJ1ZSk7CiAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvQmVVbmRlZmluZWQoKTsKICAgICAqICAgY29udGV4dC5uYW1lID0gJ0FuZ3VsYXInOwogICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0VxdWFsKCdIZWxsbyBBbmd1bGFyIScpOwogICAgICogYGBgCiAgICAgKgogICAgICogYGFsbE9yTm90aGluZ2AgaXMgdXNlZnVsIGZvciBpbnRlcnBvbGF0aW5nIFVSTHMuIGBuZ1NyY2AgYW5kIGBuZ1NyY3NldGAgdXNlIHRoaXMgYmVoYXZpb3IuCiAgICAgKgogICAgICogIyMjI0VzY2FwZWQgSW50ZXJwb2xhdGlvbgogICAgICogJGludGVycG9sYXRlIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBlc2NhcGluZyBpbnRlcnBvbGF0aW9uIG1hcmtlcnMuIFN0YXJ0IGFuZCBlbmQgbWFya2VycwogICAgICogY2FuIGJlIGVzY2FwZWQgYnkgcHJlY2VkaW5nIGVhY2ggb2YgdGhlaXIgY2hhcmFjdGVycyB3aXRoIGEgUkVWRVJTRSBTT0xJRFVTIFUrMDA1QyAoYmFja3NsYXNoKS4KICAgICAqIEl0IHdpbGwgYmUgcmVuZGVyZWQgYXMgYSByZWd1bGFyIHN0YXJ0L2VuZCBtYXJrZXIsIGFuZCB3aWxsIG5vdCBiZSBpbnRlcnByZXRlZCBhcyBhbiBleHByZXNzaW9uCiAgICAgKiBvciBiaW5kaW5nLgogICAgICoKICAgICAqIFRoaXMgZW5hYmxlcyB3ZWItc2VydmVycyB0byBwcmV2ZW50IHNjcmlwdCBpbmplY3Rpb24gYXR0YWNrcyBhbmQgZGVmYWNpbmcgYXR0YWNrcywgdG8gc29tZQogICAgICogZGVncmVlLCB3aGlsZSBhbHNvIGVuYWJsaW5nIGNvZGUgZXhhbXBsZXMgdG8gd29yayB3aXRob3V0IHJlbHlpbmcgb24gdGhlCiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTm9uQmluZGFibGUgbmdOb25CaW5kYWJsZX0gZGlyZWN0aXZlLgogICAgICoKICAgICAqICoqRm9yIHNlY3VyaXR5IHB1cnBvc2VzLCBpdCBpcyBzdHJvbmdseSBlbmNvdXJhZ2VkIHRoYXQgd2ViIHNlcnZlcnMgZXNjYXBlIHVzZXItc3VwcGxpZWQgZGF0YSwKICAgICAqIHJlcGxhY2luZyBhbmdsZSBicmFja2V0cyAoJmx0OywgJmd0Oykgd2l0aCAmYW1wO2x0OyBhbmQgJmFtcDtndDsgcmVzcGVjdGl2ZWx5LCBhbmQgcmVwbGFjaW5nIGFsbAogICAgICogaW50ZXJwb2xhdGlvbiBzdGFydC9lbmQgbWFya2VycyB3aXRoIHRoZWlyIGVzY2FwZWQgY291bnRlcnBhcnRzLioqCiAgICAgKgogICAgICogRXNjYXBlZCBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgYXJlIG9ubHkgcmVwbGFjZWQgd2l0aCB0aGUgYWN0dWFsIGludGVycG9sYXRpb24gbWFya2VycyBpbiByZW5kZXJlZAogICAgICogb3V0cHV0IHdoZW4gdGhlICRpbnRlcnBvbGF0ZSBzZXJ2aWNlIHByb2Nlc3NlcyB0aGUgdGV4dC4gU28sIGZvciBIVE1MIGVsZW1lbnRzIGludGVycG9sYXRlZAogICAgICogYnkge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSwgb3Igb3RoZXJ3aXNlIGludGVycG9sYXRlZCB3aXRoIHRoZSBgbXVzdEhhdmVFeHByZXNzaW9uYCBwYXJhbWV0ZXIKICAgICAqIHNldCB0byBgdHJ1ZWAsIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dCBtdXN0IGNvbnRhaW4gYW4gdW5lc2NhcGVkIGludGVycG9sYXRpb24gZXhwcmVzc2lvbi4gQXMgc3VjaCwKICAgICAqIHRoaXMgaXMgdHlwaWNhbGx5IHVzZWZ1bCBvbmx5IHdoZW4gdXNlci1kYXRhIGlzIHVzZWQgaW4gcmVuZGVyaW5nIGEgdGVtcGxhdGUgZnJvbSB0aGUgc2VydmVyLCBvcgogICAgICogd2hlbiBvdGhlcndpc2UgdW50cnVzdGVkIGRhdGEgaXMgdXNlZCBieSBhIGRpcmVjdGl2ZS4KICAgICAqCiAgICAgKiA8ZXhhbXBsZT4KICAgICAqICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAqICAgIDxkaXYgbmctaW5pdD0idXNlcm5hbWU9J0EgdXNlciciPgogICAgICogICAgICA8cCBuZy1pbml0PSJhcHB0aXRsZT0nRXNjYXBpbmcgZGVtbyciPnt7YXBwdGl0bGV9fTogXHtceyB1c2VybmFtZSA9ICJkZWZhY2VkIHZhbHVlIjsgXH1cfQogICAgICogICAgICAgIDwvcD4KICAgICAqICAgICAgPHA+PHN0cm9uZz57e3VzZXJuYW1lfX08L3N0cm9uZz4gYXR0ZW1wdHMgdG8gaW5qZWN0IGNvZGUgd2hpY2ggd2lsbCBkZWZhY2UgdGhlCiAgICAgKiAgICAgICAgYXBwbGljYXRpb24sIGJ1dCBmYWlscyB0byBhY2NvbXBsaXNoIHRoZWlyIHRhc2ssIGJlY2F1c2UgdGhlIHNlcnZlciBoYXMgY29ycmVjdGx5CiAgICAgKiAgICAgICAgZXNjYXBlZCB0aGUgaW50ZXJwb2xhdGlvbiBzdGFydC9lbmQgbWFya2VycyB3aXRoIFJFVkVSU0UgU09MSURVUyBVKzAwNUMgKGJhY2tzbGFzaCkKICAgICAqICAgICAgICBjaGFyYWN0ZXJzLjwvcD4KICAgICAqICAgICAgPHA+SW5zdGVhZCwgdGhlIHJlc3VsdCBvZiB0aGUgYXR0ZW1wdGVkIHNjcmlwdCBpbmplY3Rpb24gaXMgdmlzaWJsZSwgYW5kIGNhbiBiZSByZW1vdmVkCiAgICAgKiAgICAgICAgZnJvbSB0aGUgZGF0YWJhc2UgYnkgYW4gYWRtaW5pc3RyYXRvci48L3A+CiAgICAgKiAgICA8L2Rpdj4KICAgICAqICA8L2ZpbGU+CiAgICAgKiA8L2V4YW1wbGU+CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgd2l0aCBtYXJrdXAgdG8gaW50ZXJwb2xhdGUuCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBtdXN0SGF2ZUV4cHJlc3Npb24gaWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgaW50ZXJwb2xhdGlvbiBzdHJpbmcgbXVzdCBoYXZlCiAgICAgKiAgICBlbWJlZGRlZCBleHByZXNzaW9uIGluIG9yZGVyIHRvIHJldHVybiBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLiBTdHJpbmdzIHdpdGggbm8KICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gd2lsbCByZXR1cm4gbnVsbCBmb3IgdGhlIGludGVycG9sYXRpb24gZnVuY3Rpb24uCiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHRydXN0ZWRDb250ZXh0IHdoZW4gcHJvdmlkZWQsIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBwYXNzZXMgdGhlIGludGVycG9sYXRlZAogICAgICogICAgcmVzdWx0IHRocm91Z2gge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWQoaW50ZXJwb2xhdGVkUmVzdWx0LAogICAgICogICAgdHJ1c3RlZENvbnRleHQpfSBiZWZvcmUgcmV0dXJuaW5nIGl0LiAgUmVmZXIgdG8gdGhlIHtAbGluayBuZy4kc2NlICRzY2V9IHNlcnZpY2UgdGhhdAogICAgICogICAgcHJvdmlkZXMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgZm9yIGRldGFpbHMuCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBhbGxPck5vdGhpbmcgaWYgYHRydWVgLCB0aGVuIHRoZSByZXR1cm5lZCBmdW5jdGlvbiByZXR1cm5zIHVuZGVmaW5lZAogICAgICogICAgdW5sZXNzIGFsbCBlbWJlZGRlZCBleHByZXNzaW9ucyBldmFsdWF0ZSB0byBhIHZhbHVlIG90aGVyIHRoYW4gYHVuZGVmaW5lZGAuCiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCl9IGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBjb21wdXRlIHRoZQogICAgICogICAgaW50ZXJwb2xhdGVkIHN0cmluZy4gVGhlIGZ1bmN0aW9uIGhhcyB0aGVzZSBwYXJhbWV0ZXJzOgogICAgICoKICAgICAqIC0gYGNvbnRleHRgOiBldmFsdWF0aW9uIGNvbnRleHQgZm9yIGFsbCBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgaW50ZXJwb2xhdGVkIHRleHQKICAgICAqLwogICAgZnVuY3Rpb24gJGludGVycG9sYXRlKHRleHQsIG11c3RIYXZlRXhwcmVzc2lvbiwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZykgewogICAgICBhbGxPck5vdGhpbmcgPSAhIWFsbE9yTm90aGluZzsKICAgICAgdmFyIHN0YXJ0SW5kZXgsCiAgICAgICAgICBlbmRJbmRleCwKICAgICAgICAgIGluZGV4ID0gMCwKICAgICAgICAgIGV4cHJlc3Npb25zID0gW10sCiAgICAgICAgICBwYXJzZUZucyA9IFtdLAogICAgICAgICAgdGV4dExlbmd0aCA9IHRleHQubGVuZ3RoLAogICAgICAgICAgZXhwLAogICAgICAgICAgY29uY2F0ID0gW10sCiAgICAgICAgICBleHByZXNzaW9uUG9zaXRpb25zID0gW107CgogICAgICB3aGlsZShpbmRleCA8IHRleHRMZW5ndGgpIHsKICAgICAgICBpZiAoICgoc3RhcnRJbmRleCA9IHRleHQuaW5kZXhPZihzdGFydFN5bWJvbCwgaW5kZXgpKSAhPSAtMSkgJiYKICAgICAgICAgICAgICgoZW5kSW5kZXggPSB0ZXh0LmluZGV4T2YoZW5kU3ltYm9sLCBzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgpKSAhPSAtMSkgKSB7CiAgICAgICAgICBpZiAoaW5kZXggIT09IHN0YXJ0SW5kZXgpIHsKICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4LCBzdGFydEluZGV4KSkpOwogICAgICAgICAgfQogICAgICAgICAgZXhwID0gdGV4dC5zdWJzdHJpbmcoc3RhcnRJbmRleCArIHN0YXJ0U3ltYm9sTGVuZ3RoLCBlbmRJbmRleCk7CiAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGV4cCk7CiAgICAgICAgICBwYXJzZUZucy5wdXNoKCRwYXJzZShleHAsIHBhcnNlU3RyaW5naWZ5SW50ZXJjZXB0b3IpKTsKICAgICAgICAgIGluZGV4ID0gZW5kSW5kZXggKyBlbmRTeW1ib2xMZW5ndGg7CiAgICAgICAgICBleHByZXNzaW9uUG9zaXRpb25zLnB1c2goY29uY2F0Lmxlbmd0aCk7CiAgICAgICAgICBjb25jYXQucHVzaCgnJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIHdlIGRpZCBub3QgZmluZCBhbiBpbnRlcnBvbGF0aW9uLCBzbyB3ZSBoYXZlIHRvIGFkZCB0aGUgcmVtYWluZGVyIHRvIHRoZSBzZXBhcmF0b3JzIGFycmF5CiAgICAgICAgICBpZiAoaW5kZXggIT09IHRleHRMZW5ndGgpIHsKICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4KSkpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBDb25jYXRlbmF0aW5nIGV4cHJlc3Npb25zIG1ha2VzIGl0IGhhcmQgdG8gcmVhc29uIGFib3V0IHdoZXRoZXIgc29tZSBjb21iaW5hdGlvbiBvZgogICAgICAvLyBjb25jYXRlbmF0ZWQgdmFsdWVzIGFyZSB1bnNhZmUgdG8gdXNlIGFuZCBjb3VsZCBlYXNpbHkgbGVhZCB0byBYU1MuICBCeSByZXF1aXJpbmcgdGhhdCBhCiAgICAgIC8vIHNpbmdsZSBleHByZXNzaW9uIGJlIHVzZWQgZm9yIGlmcmFtZVtzcmNdLCBvYmplY3Rbc3JjXSwgZXRjLiwgd2UgZW5zdXJlIHRoYXQgdGhlIHZhbHVlCiAgICAgIC8vIHRoYXQncyB1c2VkIGlzIGFzc2lnbmVkIG9yIGNvbnN0cnVjdGVkIGJ5IHNvbWUgSlMgY29kZSBzb21ld2hlcmUgdGhhdCBpcyBtb3JlIHRlc3RhYmxlIG9yCiAgICAgIC8vIG1ha2UgaXQgb2J2aW91cyB0aGF0IHlvdSBib3VuZCB0aGUgdmFsdWUgdG8gc29tZSB1c2VyIGNvbnRyb2xsZWQgdmFsdWUuICBUaGlzIGhlbHBzIHJlZHVjZQogICAgICAvLyB0aGUgbG9hZCB3aGVuIGF1ZGl0aW5nIGZvciBYU1MgaXNzdWVzLgogICAgICBpZiAodHJ1c3RlZENvbnRleHQgJiYgY29uY2F0Lmxlbmd0aCA+IDEpIHsKICAgICAgICAgIHRocm93ICRpbnRlcnBvbGF0ZU1pbkVycignbm9jb25jYXQnLAogICAgICAgICAgICAgICJFcnJvciB3aGlsZSBpbnRlcnBvbGF0aW5nOiB7MH1cblN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRpc2FsbG93cyAiICsKICAgICAgICAgICAgICAiaW50ZXJwb2xhdGlvbnMgdGhhdCBjb25jYXRlbmF0ZSBtdWx0aXBsZSBleHByZXNzaW9ucyB3aGVuIGEgdHJ1c3RlZCB2YWx1ZSBpcyAiICsKICAgICAgICAgICAgICAicmVxdWlyZWQuICBTZWUgaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJHNjZSIsIHRleHQpOwogICAgICB9CgogICAgICBpZiAoIW11c3RIYXZlRXhwcmVzc2lvbiB8fCBleHByZXNzaW9ucy5sZW5ndGgpIHsKICAgICAgICB2YXIgY29tcHV0ZSA9IGZ1bmN0aW9uKHZhbHVlcykgewogICAgICAgICAgZm9yKHZhciBpID0gMCwgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICAgIGlmIChhbGxPck5vdGhpbmcgJiYgaXNVbmRlZmluZWQodmFsdWVzW2ldKSkgcmV0dXJuOwogICAgICAgICAgICBjb25jYXRbZXhwcmVzc2lvblBvc2l0aW9uc1tpXV0gPSB2YWx1ZXNbaV07CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gY29uY2F0LmpvaW4oJycpOwogICAgICAgIH07CgogICAgICAgIHZhciBnZXRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIHRydXN0ZWRDb250ZXh0ID8KICAgICAgICAgICAgJHNjZS5nZXRUcnVzdGVkKHRydXN0ZWRDb250ZXh0LCB2YWx1ZSkgOgogICAgICAgICAgICAkc2NlLnZhbHVlT2YodmFsdWUpOwogICAgICAgIH07CgogICAgICAgIHZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7IC8vIG51bGwgfHwgdW5kZWZpbmVkCiAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgIH0KICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7CiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6CiAgICAgICAgICAgICAgdmFsdWUgPSAnJyArIHZhbHVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHZhbHVlID0gdG9Kc29uKHZhbHVlKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiBpbnRlcnBvbGF0aW9uRm4oY29udGV4dCkgewogICAgICAgICAgICB2YXIgaSA9IDA7CiAgICAgICAgICAgIHZhciBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDsKICAgICAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShpaSk7CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGZvciAoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gcGFyc2VGbnNbaV0oY29udGV4dCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gY29tcHV0ZSh2YWx1ZXMpOwogICAgICAgICAgICB9IGNhdGNoKGVycikgewogICAgICAgICAgICAgIHZhciBuZXdFcnIgPSAkaW50ZXJwb2xhdGVNaW5FcnIoJ2ludGVycicsICJDYW4ndCBpbnRlcnBvbGF0ZTogezB9XG57MX0iLCB0ZXh0LAogICAgICAgICAgICAgICAgICBlcnIudG9TdHJpbmcoKSk7CiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIobmV3RXJyKTsKICAgICAgICAgICAgfQoKICAgICAgICAgIH0sIHsKICAgICAgICAgIC8vIGFsbCBvZiB0aGVzZSBwcm9wZXJ0aWVzIGFyZSB1bmRvY3VtZW50ZWQgZm9yIG5vdwogICAgICAgICAgZXhwOiB0ZXh0LCAvL2p1c3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCByZWd1bGFyIHdhdGNoZXJzIGNyZWF0ZWQgdmlhICR3YXRjaAogICAgICAgICAgZXhwcmVzc2lvbnM6IGV4cHJlc3Npb25zLAogICAgICAgICAgJCR3YXRjaERlbGVnYXRlOiBmdW5jdGlvbiAoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSkgewogICAgICAgICAgICB2YXIgbGFzdFZhbHVlOwogICAgICAgICAgICByZXR1cm4gc2NvcGUuJHdhdGNoR3JvdXAocGFyc2VGbnMsIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaGVyKHZhbHVlcywgb2xkVmFsdWVzKSB7CiAgICAgICAgICAgICAgdmFyIGN1cnJWYWx1ZSA9IGNvbXB1dGUodmFsdWVzKTsKICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHsKICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgY3VyclZhbHVlLCB2YWx1ZXMgIT09IG9sZFZhbHVlcyA/IGxhc3RWYWx1ZSA6IGN1cnJWYWx1ZSwgc2NvcGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBjdXJyVmFsdWU7CiAgICAgICAgICAgIH0sIG9iamVjdEVxdWFsaXR5KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gdW5lc2NhcGVUZXh0KHRleHQpIHsKICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKGVzY2FwZWRTdGFydFJlZ2V4cCwgc3RhcnRTeW1ib2wpLgogICAgICAgICAgcmVwbGFjZShlc2NhcGVkRW5kUmVnZXhwLCBlbmRTeW1ib2wpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKHZhbHVlKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJldHVybiBzdHJpbmdpZnkoZ2V0VmFsdWUodmFsdWUpKTsKICAgICAgICB9IGNhdGNoKGVycikgewogICAgICAgICAgdmFyIG5ld0VyciA9ICRpbnRlcnBvbGF0ZU1pbkVycignaW50ZXJyJywgIkNhbid0IGludGVycG9sYXRlOiB7MH1cbnsxfSIsIHRleHQsCiAgICAgICAgICAgIGVyci50b1N0cmluZygpKTsKICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKG5ld0Vycik7CiAgICAgICAgfQogICAgICB9CiAgICB9CgoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJGludGVycG9sYXRlI3N0YXJ0U3ltYm9sCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIHN0YXJ0IG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB7e2AuCiAgICAgKgogICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuc3RhcnRTeW1ib2xgfSB0byBjaGFuZ2UKICAgICAqIHRoZSBzeW1ib2wuCiAgICAgKgogICAgICogQHJldHVybnMge3N0cmluZ30gc3RhcnQgc3ltYm9sLgogICAgICovCiAgICAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sOwogICAgfTsKCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjZW5kU3ltYm9sCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLgogICAgICoKICAgICAqIFVzZSB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sIGAkaW50ZXJwb2xhdGVQcm92aWRlci5lbmRTeW1ib2xgfSB0byBjaGFuZ2UKICAgICAqIHRoZSBzeW1ib2wuCiAgICAgKgogICAgICogQHJldHVybnMge3N0cmluZ30gZW5kIHN5bWJvbC4KICAgICAqLwogICAgJGludGVycG9sYXRlLmVuZFN5bWJvbCA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZW5kU3ltYm9sOwogICAgfTsKCiAgICByZXR1cm4gJGludGVycG9sYXRlOwogIH1dOwp9CgpmdW5jdGlvbiAkSW50ZXJ2YWxQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJHdpbmRvdycsICckcScsICckJHEnLAogICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkd2luZG93LCAgICRxLCAgICQkcSkgewogICAgdmFyIGludGVydmFscyA9IHt9OwoKCiAgICAgLyoqCiAgICAgICogQG5nZG9jIHNlcnZpY2UKICAgICAgKiBAbmFtZSAkaW50ZXJ2YWwKICAgICAgKgogICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldEludGVydmFsYC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZXZlcnkgYGRlbGF5YAogICAgICAqIG1pbGxpc2Vjb25kcy4KICAgICAgKgogICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYW4gaW50ZXJ2YWwgZnVuY3Rpb24gaXMgYSBwcm9taXNlLiBUaGlzIHByb21pc2Ugd2lsbCBiZQogICAgICAqIG5vdGlmaWVkIHVwb24gZWFjaCB0aWNrIG9mIHRoZSBpbnRlcnZhbCwgYW5kIHdpbGwgYmUgcmVzb2x2ZWQgYWZ0ZXIgYGNvdW50YCBpdGVyYXRpb25zLCBvcgogICAgICAqIHJ1biBpbmRlZmluaXRlbHkgaWYgYGNvdW50YCBpcyBub3QgZGVmaW5lZC4gVGhlIHZhbHVlIG9mIHRoZSBub3RpZmljYXRpb24gd2lsbCBiZSB0aGUKICAgICAgKiBudW1iZXIgb2YgaXRlcmF0aW9ucyB0aGF0IGhhdmUgcnVuLgogICAgICAqIFRvIGNhbmNlbCBhbiBpbnRlcnZhbCwgY2FsbCBgJGludGVydmFsLmNhbmNlbChwcm9taXNlKWAuCiAgICAgICoKICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiRpbnRlcnZhbCNmbHVzaCBgJGludGVydmFsLmZsdXNoKG1pbGxpcylgfSB0bwogICAgICAqIG1vdmUgZm9yd2FyZCBieSBgbWlsbGlzYCBtaWxsaXNlY29uZHMgYW5kIHRyaWdnZXIgYW55IGZ1bmN0aW9ucyBzY2hlZHVsZWQgdG8gcnVuIGluIHRoYXQKICAgICAgKiB0aW1lLgogICAgICAqCiAgICAgICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAgICAgICogKipOb3RlKio6IEludGVydmFscyBjcmVhdGVkIGJ5IHRoaXMgc2VydmljZSBtdXN0IGJlIGV4cGxpY2l0bHkgZGVzdHJveWVkIHdoZW4geW91IGFyZSBmaW5pc2hlZAogICAgICAqIHdpdGggdGhlbS4gIEluIHBhcnRpY3VsYXIgdGhleSBhcmUgbm90IGF1dG9tYXRpY2FsbHkgZGVzdHJveWVkIHdoZW4gYSBjb250cm9sbGVyJ3Mgc2NvcGUgb3IgYQogICAgICAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQgYXJlIGRlc3Ryb3llZC4KICAgICAgKiBZb3Ugc2hvdWxkIHRha2UgdGhpcyBpbnRvIGNvbnNpZGVyYXRpb24gYW5kIG1ha2Ugc3VyZSB0byBhbHdheXMgY2FuY2VsIHRoZSBpbnRlcnZhbCBhdCB0aGUKICAgICAgKiBhcHByb3ByaWF0ZSBtb21lbnQuICBTZWUgdGhlIGV4YW1wbGUgYmVsb3cgZm9yIG1vcmUgZGV0YWlscyBvbiBob3cgYW5kIHdoZW4gdG8gZG8gdGhpcy4KICAgICAgKiA8L2Rpdj4KICAgICAgKgogICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgcmVwZWF0ZWRseS4KICAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIGVhY2ggZnVuY3Rpb24gY2FsbC4KICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtjb3VudD0wXSBOdW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0LiBJZiBub3Qgc2V0LCBvciAwLCB3aWxsIHJlcGVhdAogICAgICAqICAgaW5kZWZpbml0ZWx5LgogICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbnZva2VBcHBseT10cnVlXSBJZiBzZXQgdG8gYGZhbHNlYCBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlCiAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseX0gYmxvY2suCiAgICAgICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSB3aGljaCB3aWxsIGJlIG5vdGlmaWVkIG9uIGVhY2ggaXRlcmF0aW9uLgogICAgICAqCiAgICAgICogQGV4YW1wbGUKICAgICAgKiA8ZXhhbXBsZSBtb2R1bGU9ImludGVydmFsRXhhbXBsZSI+CiAgICAgICogPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICogICA8c2NyaXB0PgogICAgICAqICAgICBhbmd1bGFyLm1vZHVsZSgnaW50ZXJ2YWxFeGFtcGxlJywgW10pCiAgICAgICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGludGVydmFsJywKICAgICAgKiAgICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJGludGVydmFsKSB7CiAgICAgICogICAgICAgICAgICRzY29wZS5mb3JtYXQgPSAnTS9kL3l5IGg6bW06c3MgYSc7CiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwOwogICAgICAqICAgICAgICAgICAkc2NvcGUuYmxvb2RfMiA9IDEyMDsKICAgICAgKgogICAgICAqICAgICAgICAgICB2YXIgc3RvcDsKICAgICAgKiAgICAgICAgICAgJHNjb3BlLmZpZ2h0ID0gZnVuY3Rpb24oKSB7CiAgICAgICogICAgICAgICAgICAgLy8gRG9uJ3Qgc3RhcnQgYSBuZXcgZmlnaHQgaWYgd2UgYXJlIGFscmVhZHkgZmlnaHRpbmcKICAgICAgKiAgICAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApICkgcmV0dXJuOwogICAgICAqCiAgICAgICogICAgICAgICAgIHN0b3AgPSAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7CiAgICAgICogICAgICAgICAgICAgaWYgKCRzY29wZS5ibG9vZF8xID4gMCAmJiAkc2NvcGUuYmxvb2RfMiA+IDApIHsKICAgICAgKiAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gJHNjb3BlLmJsb29kXzEgLSAzOwogICAgICAqICAgICAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAkc2NvcGUuYmxvb2RfMiAtIDQ7CiAgICAgICogICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgKiAgICAgICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQoKTsKICAgICAgKiAgICAgICAgICAgICB9CiAgICAgICogICAgICAgICAgIH0sIDEwMCk7CiAgICAgICogICAgICAgICB9OwogICAgICAqCiAgICAgICogICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0ID0gZnVuY3Rpb24oKSB7CiAgICAgICogICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChzdG9wKSkgewogICAgICAqICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoc3RvcCk7CiAgICAgICogICAgICAgICAgICAgc3RvcCA9IHVuZGVmaW5lZDsKICAgICAgKiAgICAgICAgICAgfQogICAgICAqICAgICAgICAgfTsKICAgICAgKgogICAgICAqICAgICAgICAgJHNjb3BlLnJlc2V0RmlnaHQgPSBmdW5jdGlvbigpIHsKICAgICAgKiAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAxMDA7CiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwOwogICAgICAqICAgICAgICAgfTsKICAgICAgKgogICAgICAqICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgKiAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGludGVydmFsIGlzIGRlc3Ryb3llZCB0b28KICAgICAgKiAgICAgICAgICAgJHNjb3BlLnN0b3BGaWdodCgpOwogICAgICAqICAgICAgICAgfSk7CiAgICAgICogICAgICAgfV0pCiAgICAgICogICAgICAgLy8gUmVnaXN0ZXIgdGhlICdteUN1cnJlbnRUaW1lJyBkaXJlY3RpdmUgZmFjdG9yeSBtZXRob2QuCiAgICAgICogICAgICAgLy8gV2UgaW5qZWN0ICRpbnRlcnZhbCBhbmQgZGF0ZUZpbHRlciBzZXJ2aWNlIHNpbmNlIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBESS4KICAgICAgKiAgICAgICAuZGlyZWN0aXZlKCdteUN1cnJlbnRUaW1lJywgWyckaW50ZXJ2YWwnLCAnZGF0ZUZpbHRlcicsCiAgICAgICogICAgICAgICBmdW5jdGlvbigkaW50ZXJ2YWwsIGRhdGVGaWx0ZXIpIHsKICAgICAgKiAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi4gKGNvbXBpbGUgZnVuY3Rpb24gbm90IG5lZWRlZCkKICAgICAgKiAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykgewogICAgICAqICAgICAgICAgICAgIHZhciBmb3JtYXQsICAvLyBkYXRlIGZvcm1hdAogICAgICAqICAgICAgICAgICAgICAgICBzdG9wVGltZTsgLy8gc28gdGhhdCB3ZSBjYW4gY2FuY2VsIHRoZSB0aW1lIHVwZGF0ZXMKICAgICAgKgogICAgICAqICAgICAgICAgICAgIC8vIHVzZWQgdG8gdXBkYXRlIHRoZSBVSQogICAgICAqICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKSB7CiAgICAgICogICAgICAgICAgICAgICBlbGVtZW50LnRleHQoZGF0ZUZpbHRlcihuZXcgRGF0ZSgpLCBmb3JtYXQpKTsKICAgICAgKiAgICAgICAgICAgICB9CiAgICAgICoKICAgICAgKiAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgZXhwcmVzc2lvbiwgYW5kIHVwZGF0ZSB0aGUgVUkgb24gY2hhbmdlLgogICAgICAqICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRycy5teUN1cnJlbnRUaW1lLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAqICAgICAgICAgICAgICAgZm9ybWF0ID0gdmFsdWU7CiAgICAgICogICAgICAgICAgICAgICB1cGRhdGVUaW1lKCk7CiAgICAgICogICAgICAgICAgICAgfSk7CiAgICAgICoKICAgICAgKiAgICAgICAgICAgICBzdG9wVGltZSA9ICRpbnRlcnZhbCh1cGRhdGVUaW1lLCAxMDAwKTsKICAgICAgKgogICAgICAqICAgICAgICAgICAgIC8vIGxpc3RlbiBvbiBET00gZGVzdHJveSAocmVtb3ZhbCkgZXZlbnQsIGFuZCBjYW5jZWwgdGhlIG5leHQgVUkgdXBkYXRlCiAgICAgICogICAgICAgICAgICAgLy8gdG8gcHJldmVudCB1cGRhdGluZyB0aW1lIGFmdGVyIHRoZSBET00gZWxlbWVudCB3YXMgcmVtb3ZlZC4KICAgICAgKiAgICAgICAgICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wVGltZSk7CiAgICAgICogICAgICAgICAgICAgfSk7CiAgICAgICogICAgICAgICAgIH0KICAgICAgKiAgICAgICAgIH1dKTsKICAgICAgKiAgIDwvc2NyaXB0PgogICAgICAqCiAgICAgICogICA8ZGl2PgogICAgICAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgKiAgICAgICBEYXRlIGZvcm1hdDogPGlucHV0IG5nLW1vZGVsPSJmb3JtYXQiPiA8aHIvPgogICAgICAqICAgICAgIEN1cnJlbnQgdGltZSBpczogPHNwYW4gbXktY3VycmVudC10aW1lPSJmb3JtYXQiPjwvc3Bhbj4KICAgICAgKiAgICAgICA8aHIvPgogICAgICAqICAgICAgIEJsb29kIDEgOiA8Zm9udCBjb2xvcj0ncmVkJz57e2Jsb29kXzF9fTwvZm9udD4KICAgICAgKiAgICAgICBCbG9vZCAyIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8yfX08L2ZvbnQ+CiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGRhdGEtbmctY2xpY2s9ImZpZ2h0KCkiPkZpZ2h0PC9idXR0b24+CiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGRhdGEtbmctY2xpY2s9InN0b3BGaWdodCgpIj5TdG9wRmlnaHQ8L2J1dHRvbj4KICAgICAgKiAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgZGF0YS1uZy1jbGljaz0icmVzZXRGaWdodCgpIj5yZXNldEZpZ2h0PC9idXR0b24+CiAgICAgICogICAgIDwvZGl2PgogICAgICAqICAgPC9kaXY+CiAgICAgICoKICAgICAgKiA8L2ZpbGU+CiAgICAgICogPC9leGFtcGxlPgogICAgICAqLwogICAgZnVuY3Rpb24gaW50ZXJ2YWwoZm4sIGRlbGF5LCBjb3VudCwgaW52b2tlQXBwbHkpIHsKICAgICAgdmFyIHNldEludGVydmFsID0gJHdpbmRvdy5zZXRJbnRlcnZhbCwKICAgICAgICAgIGNsZWFySW50ZXJ2YWwgPSAkd2luZG93LmNsZWFySW50ZXJ2YWwsCiAgICAgICAgICBpdGVyYXRpb24gPSAwLAogICAgICAgICAgc2tpcEFwcGx5ID0gKGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5KSwKICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLAogICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2U7CgogICAgICBjb3VudCA9IGlzRGVmaW5lZChjb3VudCkgPyBjb3VudCA6IDA7CgogICAgICBwcm9taXNlLnRoZW4obnVsbCwgbnVsbCwgZm4pOwoKICAgICAgcHJvbWlzZS4kJGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiB0aWNrKCkgewogICAgICAgIGRlZmVycmVkLm5vdGlmeShpdGVyYXRpb24rKyk7CgogICAgICAgIGlmIChjb3VudCA+IDAgJiYgaXRlcmF0aW9uID49IGNvdW50KSB7CiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGl0ZXJhdGlvbik7CiAgICAgICAgICBjbGVhckludGVydmFsKHByb21pc2UuJCRpbnRlcnZhbElkKTsKICAgICAgICAgIGRlbGV0ZSBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFza2lwQXBwbHkpICRyb290U2NvcGUuJGFwcGx5KCk7CgogICAgICB9LCBkZWxheSk7CgogICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdID0gZGVmZXJyZWQ7CgogICAgICByZXR1cm4gcHJvbWlzZTsKICAgIH0KCgogICAgIC8qKgogICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgKiBAbmFtZSAkaW50ZXJ2YWwjY2FuY2VsCiAgICAgICoKICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgKiBDYW5jZWxzIGEgdGFzayBhc3NvY2lhdGVkIHdpdGggdGhlIGBwcm9taXNlYC4KICAgICAgKgogICAgICAqIEBwYXJhbSB7cHJvbWlzZX0gcHJvbWlzZSByZXR1cm5lZCBieSB0aGUgYCRpbnRlcnZhbGAgZnVuY3Rpb24uCiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIHdhcyBzdWNjZXNzZnVsbHkgY2FuY2VsZWQuCiAgICAgICovCiAgICBpbnRlcnZhbC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7CiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCRpbnRlcnZhbElkIGluIGludGVydmFscykgewogICAgICAgIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF0ucmVqZWN0KCdjYW5jZWxlZCcpOwogICAgICAgICR3aW5kb3cuY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7CiAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKCiAgICByZXR1cm4gaW50ZXJ2YWw7CiAgfV07Cn0KCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkbG9jYWxlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiAkbG9jYWxlIHNlcnZpY2UgcHJvdmlkZXMgbG9jYWxpemF0aW9uIHJ1bGVzIGZvciB2YXJpb3VzIEFuZ3VsYXIgY29tcG9uZW50cy4gQXMgb2YgcmlnaHQgbm93IHRoZQogKiBvbmx5IHB1YmxpYyBhcGkgaXM6CiAqCiAqICogYGlkYCDigJMgYHtzdHJpbmd9YCDigJMgbG9jYWxlIGlkIGZvcm1hdHRlZCBhcyBgbGFuZ3VhZ2VJZC1jb3VudHJ5SWRgIChlLmcuIGBlbi11c2ApCiAqLwpmdW5jdGlvbiAkTG9jYWxlUHJvdmlkZXIoKXsKICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgIGlkOiAnZW4tdXMnLAoKICAgICAgTlVNQkVSX0ZPUk1BVFM6IHsKICAgICAgICBERUNJTUFMX1NFUDogJy4nLAogICAgICAgIEdST1VQX1NFUDogJywnLAogICAgICAgIFBBVFRFUk5TOiBbCiAgICAgICAgICB7IC8vIERlY2ltYWwgUGF0dGVybgogICAgICAgICAgICBtaW5JbnQ6IDEsCiAgICAgICAgICAgIG1pbkZyYWM6IDAsCiAgICAgICAgICAgIG1heEZyYWM6IDMsCiAgICAgICAgICAgIHBvc1ByZTogJycsCiAgICAgICAgICAgIHBvc1N1ZjogJycsCiAgICAgICAgICAgIG5lZ1ByZTogJy0nLAogICAgICAgICAgICBuZWdTdWY6ICcnLAogICAgICAgICAgICBnU2l6ZTogMywKICAgICAgICAgICAgbGdTaXplOiAzCiAgICAgICAgICB9LHsgLy9DdXJyZW5jeSBQYXR0ZXJuCiAgICAgICAgICAgIG1pbkludDogMSwKICAgICAgICAgICAgbWluRnJhYzogMiwKICAgICAgICAgICAgbWF4RnJhYzogMiwKICAgICAgICAgICAgcG9zUHJlOiAnXHUwMEE0JywKICAgICAgICAgICAgcG9zU3VmOiAnJywKICAgICAgICAgICAgbmVnUHJlOiAnKFx1MDBBNCcsCiAgICAgICAgICAgIG5lZ1N1ZjogJyknLAogICAgICAgICAgICBnU2l6ZTogMywKICAgICAgICAgICAgbGdTaXplOiAzCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICBDVVJSRU5DWV9TWU06ICckJwogICAgICB9LAoKICAgICAgREFURVRJTUVfRk9STUFUUzogewogICAgICAgIE1PTlRIOgogICAgICAgICAgICAnSmFudWFyeSxGZWJydWFyeSxNYXJjaCxBcHJpbCxNYXksSnVuZSxKdWx5LEF1Z3VzdCxTZXB0ZW1iZXIsT2N0b2JlcixOb3ZlbWJlcixEZWNlbWJlcicKICAgICAgICAgICAgLnNwbGl0KCcsJyksCiAgICAgICAgU0hPUlRNT05USDogICdKYW4sRmViLE1hcixBcHIsTWF5LEp1bixKdWwsQXVnLFNlcCxPY3QsTm92LERlYycuc3BsaXQoJywnKSwKICAgICAgICBEQVk6ICdTdW5kYXksTW9uZGF5LFR1ZXNkYXksV2VkbmVzZGF5LFRodXJzZGF5LEZyaWRheSxTYXR1cmRheScuc3BsaXQoJywnKSwKICAgICAgICBTSE9SVERBWTogJ1N1bixNb24sVHVlLFdlZCxUaHUsRnJpLFNhdCcuc3BsaXQoJywnKSwKICAgICAgICBBTVBNUzogWydBTScsJ1BNJ10sCiAgICAgICAgbWVkaXVtOiAnTU1NIGQsIHkgaDptbTpzcyBhJywKICAgICAgICBzaG9ydDogJ00vZC95eSBoOm1tIGEnLAogICAgICAgIGZ1bGxEYXRlOiAnRUVFRSwgTU1NTSBkLCB5JywKICAgICAgICBsb25nRGF0ZTogJ01NTU0gZCwgeScsCiAgICAgICAgbWVkaXVtRGF0ZTogJ01NTSBkLCB5JywKICAgICAgICBzaG9ydERhdGU6ICdNL2QveXknLAogICAgICAgIG1lZGl1bVRpbWU6ICdoOm1tOnNzIGEnLAogICAgICAgIHNob3J0VGltZTogJ2g6bW0gYScKICAgICAgfSwKCiAgICAgIHBsdXJhbENhdDogZnVuY3Rpb24obnVtKSB7CiAgICAgICAgaWYgKG51bSA9PT0gMSkgewogICAgICAgICAgcmV0dXJuICdvbmUnOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJ290aGVyJzsKICAgICAgfQogICAgfTsKICB9Owp9Cgp2YXIgUEFUSF9NQVRDSCA9IC9eKFteXD8jXSopKFw/KFteI10qKSk/KCMoLiopKT8kLywKICAgIERFRkFVTFRfUE9SVFMgPSB7J2h0dHAnOiA4MCwgJ2h0dHBzJzogNDQzLCAnZnRwJzogMjF9Owp2YXIgJGxvY2F0aW9uTWluRXJyID0gbWluRXJyKCckbG9jYXRpb24nKTsKCgovKioKICogRW5jb2RlIHBhdGggdXNpbmcgZW5jb2RlVXJpU2VnbWVudCwgaWdub3JpbmcgZm9yd2FyZCBzbGFzaGVzCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gZW5jb2RlCiAqIEByZXR1cm5zIHtzdHJpbmd9CiAqLwpmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHsKICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcvJyksCiAgICAgIGkgPSBzZWdtZW50cy5sZW5ndGg7CgogIHdoaWxlIChpLS0pIHsKICAgIHNlZ21lbnRzW2ldID0gZW5jb2RlVXJpU2VnbWVudChzZWdtZW50c1tpXSk7CiAgfQoKICByZXR1cm4gc2VnbWVudHMuam9pbignLycpOwp9CgpmdW5jdGlvbiBwYXJzZUFic29sdXRlVXJsKGFic29sdXRlVXJsLCBsb2NhdGlvbk9iaiwgYXBwQmFzZSkgewogIHZhciBwYXJzZWRVcmwgPSB1cmxSZXNvbHZlKGFic29sdXRlVXJsLCBhcHBCYXNlKTsKCiAgbG9jYXRpb25PYmouJCRwcm90b2NvbCA9IHBhcnNlZFVybC5wcm90b2NvbDsKICBsb2NhdGlvbk9iai4kJGhvc3QgPSBwYXJzZWRVcmwuaG9zdG5hbWU7CiAgbG9jYXRpb25PYmouJCRwb3J0ID0gaW50KHBhcnNlZFVybC5wb3J0KSB8fCBERUZBVUxUX1BPUlRTW3BhcnNlZFVybC5wcm90b2NvbF0gfHwgbnVsbDsKfQoKCmZ1bmN0aW9uIHBhcnNlQXBwVXJsKHJlbGF0aXZlVXJsLCBsb2NhdGlvbk9iaiwgYXBwQmFzZSkgewogIHZhciBwcmVmaXhlZCA9IChyZWxhdGl2ZVVybC5jaGFyQXQoMCkgIT09ICcvJyk7CiAgaWYgKHByZWZpeGVkKSB7CiAgICByZWxhdGl2ZVVybCA9ICcvJyArIHJlbGF0aXZlVXJsOwogIH0KICB2YXIgbWF0Y2ggPSB1cmxSZXNvbHZlKHJlbGF0aXZlVXJsLCBhcHBCYXNlKTsKICBsb2NhdGlvbk9iai4kJHBhdGggPSBkZWNvZGVVUklDb21wb25lbnQocHJlZml4ZWQgJiYgbWF0Y2gucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgPwogICAgICBtYXRjaC5wYXRobmFtZS5zdWJzdHJpbmcoMSkgOiBtYXRjaC5wYXRobmFtZSk7CiAgbG9jYXRpb25PYmouJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKG1hdGNoLnNlYXJjaCk7CiAgbG9jYXRpb25PYmouJCRoYXNoID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoLmhhc2gpOwoKICAvLyBtYWtlIHN1cmUgcGF0aCBzdGFydHMgd2l0aCAnLyc7CiAgaWYgKGxvY2F0aW9uT2JqLiQkcGF0aCAmJiBsb2NhdGlvbk9iai4kJHBhdGguY2hhckF0KDApICE9ICcvJykgewogICAgbG9jYXRpb25PYmouJCRwYXRoID0gJy8nICsgbG9jYXRpb25PYmouJCRwYXRoOwogIH0KfQoKCi8qKgogKgogKiBAcGFyYW0ge3N0cmluZ30gYmVnaW4KICogQHBhcmFtIHtzdHJpbmd9IHdob2xlCiAqIEByZXR1cm5zIHtzdHJpbmd9IHJldHVybnMgdGV4dCBmcm9tIHdob2xlIGFmdGVyIGJlZ2luIG9yIHVuZGVmaW5lZCBpZiBpdCBkb2VzIG5vdCBiZWdpbiB3aXRoCiAqICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkIHN0cmluZy4KICovCmZ1bmN0aW9uIGJlZ2luc1dpdGgoYmVnaW4sIHdob2xlKSB7CiAgaWYgKHdob2xlLmluZGV4T2YoYmVnaW4pID09PSAwKSB7CiAgICByZXR1cm4gd2hvbGUuc3Vic3RyKGJlZ2luLmxlbmd0aCk7CiAgfQp9CgoKZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkgewogIHZhciBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7CiAgcmV0dXJuIGluZGV4ID09IC0xID8gdXJsIDogdXJsLnN1YnN0cigwLCBpbmRleCk7Cn0KCgpmdW5jdGlvbiBzdHJpcEZpbGUodXJsKSB7CiAgcmV0dXJuIHVybC5zdWJzdHIoMCwgc3RyaXBIYXNoKHVybCkubGFzdEluZGV4T2YoJy8nKSArIDEpOwp9CgovKiByZXR1cm4gdGhlIHNlcnZlciBvbmx5IChzY2hlbWU6Ly9ob3N0OnBvcnQpICovCmZ1bmN0aW9uIHNlcnZlckJhc2UodXJsKSB7CiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoJy8nLCB1cmwuaW5kZXhPZignLy8nKSArIDIpKTsKfQoKCi8qKgogKiBMb2NhdGlvbkh0bWw1VXJsIHJlcHJlc2VudHMgYW4gdXJsCiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBIVE1MNSBtb2RlIGlzIGVuYWJsZWQgYW5kIHN1cHBvcnRlZAogKgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkwKICogQHBhcmFtIHtzdHJpbmd9IGJhc2VQcmVmaXggdXJsIHBhdGggcHJlZml4CiAqLwpmdW5jdGlvbiBMb2NhdGlvbkh0bWw1VXJsKGFwcEJhc2UsIGJhc2VQcmVmaXgpIHsKICB0aGlzLiQkaHRtbDUgPSB0cnVlOwogIGJhc2VQcmVmaXggPSBiYXNlUHJlZml4IHx8ICcnOwogIHZhciBhcHBCYXNlTm9GaWxlID0gc3RyaXBGaWxlKGFwcEJhc2UpOwogIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcywgYXBwQmFzZSk7CgoKICAvKioKICAgKiBQYXJzZSBnaXZlbiBodG1sNSAocmVndWxhcikgdXJsIHN0cmluZyBpbnRvIHByb3BlcnRpZXMKICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3QWJzb2x1dGVVcmwgSFRNTDUgdXJsCiAgICogQHByaXZhdGUKICAgKi8KICB0aGlzLiQkcGFyc2UgPSBmdW5jdGlvbih1cmwpIHsKICAgIHZhciBwYXRoVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlTm9GaWxlLCB1cmwpOwogICAgaWYgKCFpc1N0cmluZyhwYXRoVXJsKSkgewogICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lwdGhwcmZ4JywgJ0ludmFsaWQgdXJsICJ7MH0iLCBtaXNzaW5nIHBhdGggcHJlZml4ICJ7MX0iLicsIHVybCwKICAgICAgICAgIGFwcEJhc2VOb0ZpbGUpOwogICAgfQoKICAgIHBhcnNlQXBwVXJsKHBhdGhVcmwsIHRoaXMsIGFwcEJhc2UpOwoKICAgIGlmICghdGhpcy4kJHBhdGgpIHsKICAgICAgdGhpcy4kJHBhdGggPSAnLyc7CiAgICB9CgogICAgdGhpcy4kJGNvbXBvc2UoKTsKICB9OwoKICAvKioKICAgKiBDb21wb3NlIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5CiAgICogQHByaXZhdGUKICAgKi8KICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksCiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJzsKCiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDsKICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlTm9GaWxlICsgdGhpcy4kJHVybC5zdWJzdHIoMSk7IC8vIGZpcnN0IGNoYXIgaXMgYWx3YXlzICcvJwogIH07CgogIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHsKICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykgewogICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGxpbmtzIHRvIGhhc2ggZnJhZ21lbnRzOgogICAgICAvLyBrZWVwIHRoZSBvbGQgdXJsIGFuZCBvbmx5IHJlcGxhY2UgdGhlIGhhc2ggZnJhZ21lbnQKICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHZhciBhcHBVcmwsIHByZXZBcHBVcmw7CiAgICB2YXIgcmV3cml0dGVuVXJsOwoKICAgIGlmICggKGFwcFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZSwgdXJsKSkgIT09IHVuZGVmaW5lZCApIHsKICAgICAgcHJldkFwcFVybCA9IGFwcFVybDsKICAgICAgaWYgKCAoYXBwVXJsID0gYmVnaW5zV2l0aChiYXNlUHJlZml4LCBhcHBVcmwpKSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGUgKyAoYmVnaW5zV2l0aCgnLycsIGFwcFVybCkgfHwgYXBwVXJsKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgcHJldkFwcFVybDsKICAgICAgfQogICAgfSBlbHNlIGlmICggKGFwcFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKSkgIT09IHVuZGVmaW5lZCApIHsKICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZSArIGFwcFVybDsKICAgIH0gZWxzZSBpZiAoYXBwQmFzZU5vRmlsZSA9PSB1cmwgKyAnLycpIHsKICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTsKICAgIH0KICAgIGlmIChyZXdyaXR0ZW5VcmwpIHsKICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7CiAgICB9CiAgICByZXR1cm4gISFyZXdyaXR0ZW5Vcmw7CiAgfTsKfQoKCi8qKgogKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgdXJsCiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBkZXZlbG9wZXIgZG9lc24ndCBvcHQgaW50byBodG1sNSBtb2RlLgogKiBJdCBhbHNvIHNlcnZlcyBhcyB0aGUgYmFzZSBjbGFzcyBmb3IgaHRtbDUgbW9kZSBmYWxsYmFjayBvbiBsZWdhY3kgYnJvd3NlcnMuCiAqCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTAogKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXgKICovCmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdVcmwoYXBwQmFzZSwgaGFzaFByZWZpeCkgewogIHZhciBhcHBCYXNlTm9GaWxlID0gc3RyaXBGaWxlKGFwcEJhc2UpOwoKICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMsIGFwcEJhc2UpOwoKCiAgLyoqCiAgICogUGFyc2UgZ2l2ZW4gaGFzaGJhbmcgdXJsIGludG8gcHJvcGVydGllcwogICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSGFzaGJhbmcgdXJsCiAgICogQHByaXZhdGUKICAgKi8KICB0aGlzLiQkcGFyc2UgPSBmdW5jdGlvbih1cmwpIHsKICAgIHZhciB3aXRob3V0QmFzZVVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZSwgdXJsKSB8fCBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCk7CiAgICB2YXIgd2l0aG91dEhhc2hVcmwgPSB3aXRob3V0QmFzZVVybC5jaGFyQXQoMCkgPT0gJyMnCiAgICAgICAgPyBiZWdpbnNXaXRoKGhhc2hQcmVmaXgsIHdpdGhvdXRCYXNlVXJsKQogICAgICAgIDogKHRoaXMuJCRodG1sNSkKICAgICAgICAgID8gd2l0aG91dEJhc2VVcmwKICAgICAgICAgIDogJyc7CgogICAgaWYgKCFpc1N0cmluZyh3aXRob3V0SGFzaFVybCkpIHsKICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpaHNocHJmeCcsICdJbnZhbGlkIHVybCAiezB9IiwgbWlzc2luZyBoYXNoIHByZWZpeCAiezF9Ii4nLCB1cmwsCiAgICAgICAgICBoYXNoUHJlZml4KTsKICAgIH0KICAgIHBhcnNlQXBwVXJsKHdpdGhvdXRIYXNoVXJsLCB0aGlzLCBhcHBCYXNlKTsKCiAgICB0aGlzLiQkcGF0aCA9IHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUodGhpcy4kJHBhdGgsIHdpdGhvdXRIYXNoVXJsLCBhcHBCYXNlKTsKCiAgICB0aGlzLiQkY29tcG9zZSgpOwoKICAgIC8qCiAgICAgKiBJbiBXaW5kb3dzLCBvbiBhbiBhbmNob3Igbm9kZSBvbiBkb2N1bWVudHMgbG9hZGVkIGZyb20KICAgICAqIHRoZSBmaWxlc3lzdGVtLCB0aGUgYnJvd3NlciB3aWxsIHJldHVybiBhIHBhdGhuYW1lCiAgICAgKiBwcmVmaXhlZCB3aXRoIHRoZSBkcml2ZSBuYW1lICgnL0M6L3BhdGgnKSB3aGVuIGEKICAgICAqIHBhdGhuYW1lIHdpdGhvdXQgYSBkcml2ZSBpcyBzZXQ6CiAgICAgKiAgKiBhLnNldEF0dHJpYnV0ZSgnaHJlZicsICcvZm9vJykKICAgICAqICAgKiBhLnBhdGhuYW1lID09PSAnL0M6L2ZvbycgLy90cnVlCiAgICAgKgogICAgICogSW5zaWRlIG9mIEFuZ3VsYXIsIHdlJ3JlIGFsd2F5cyB1c2luZyBwYXRobmFtZXMgdGhhdAogICAgICogZG8gbm90IGluY2x1ZGUgZHJpdmUgbmFtZXMgZm9yIHJvdXRpbmcuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUgKHBhdGgsIHVybCwgYmFzZSkgewogICAgICAvKgogICAgICBNYXRjaGVzIHBhdGhzIGZvciBmaWxlIHByb3RvY29sIG9uIHdpbmRvd3MsCiAgICAgIHN1Y2ggYXMgL0M6L2Zvby9iYXIsIGFuZCBjYXB0dXJlcyBvbmx5IC9mb28vYmFyLgogICAgICAqLwogICAgICB2YXIgd2luZG93c0ZpbGVQYXRoRXhwID0gL15cL1tBLVpdOihcLy4qKS87CgogICAgICB2YXIgZmlyc3RQYXRoU2VnbWVudE1hdGNoOwoKICAgICAgLy9HZXQgdGhlIHJlbGF0aXZlIHBhdGggZnJvbSB0aGUgaW5wdXQgVVJMLgogICAgICBpZiAodXJsLmluZGV4T2YoYmFzZSkgPT09IDApIHsKICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShiYXNlLCAnJyk7CiAgICAgIH0KCiAgICAgIC8vIFRoZSBpbnB1dCBVUkwgaW50ZW50aW9uYWxseSBjb250YWlucyBhIGZpcnN0IHBhdGggc2VnbWVudCB0aGF0IGVuZHMgd2l0aCBhIGNvbG9uLgogICAgICBpZiAod2luZG93c0ZpbGVQYXRoRXhwLmV4ZWModXJsKSkgewogICAgICAgIHJldHVybiBwYXRoOwogICAgICB9CgogICAgICBmaXJzdFBhdGhTZWdtZW50TWF0Y2ggPSB3aW5kb3dzRmlsZVBhdGhFeHAuZXhlYyhwYXRoKTsKICAgICAgcmV0dXJuIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA/IGZpcnN0UGF0aFNlZ21lbnRNYXRjaFsxXSA6IHBhdGg7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogQ29tcG9zZSBoYXNoYmFuZyB1cmwgYW5kIHVwZGF0ZSBgYWJzVXJsYCBwcm9wZXJ0eQogICAqIEBwcml2YXRlCiAgICovCiAgdGhpcy4kJGNvbXBvc2UgPSBmdW5jdGlvbigpIHsKICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLAogICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7CgogICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7CiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArICh0aGlzLiQkdXJsID8gaGFzaFByZWZpeCArIHRoaXMuJCR1cmwgOiAnJyk7CiAgfTsKCiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikgewogICAgaWYoc3RyaXBIYXNoKGFwcEJhc2UpID09IHN0cmlwSGFzaCh1cmwpKSB7CiAgICAgIHRoaXMuJCRwYXJzZSh1cmwpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9Owp9CgoKLyoqCiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyB1cmwKICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIGh0bWw1IGhpc3RvcnkgYXBpIGlzIGVuYWJsZWQgYnV0IHRoZSBicm93c2VyCiAqIGRvZXMgbm90IHN1cHBvcnQgaXQuCiAqCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTAogKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXgKICovCmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsKGFwcEJhc2UsIGhhc2hQcmVmaXgpIHsKICB0aGlzLiQkaHRtbDUgPSB0cnVlOwogIExvY2F0aW9uSGFzaGJhbmdVcmwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCiAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7CgogIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHsKICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykgewogICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIGxpbmtzIHRvIGhhc2ggZnJhZ21lbnRzOgogICAgICAvLyBrZWVwIHRoZSBvbGQgdXJsIGFuZCBvbmx5IHJlcGxhY2UgdGhlIGhhc2ggZnJhZ21lbnQKICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICB2YXIgcmV3cml0dGVuVXJsOwogICAgdmFyIGFwcFVybDsKCiAgICBpZiAoIGFwcEJhc2UgPT0gc3RyaXBIYXNoKHVybCkgKSB7CiAgICAgIHJld3JpdHRlblVybCA9IHVybDsKICAgIH0gZWxzZSBpZiAoIChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpICkgewogICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIGFwcFVybDsKICAgIH0gZWxzZSBpZiAoIGFwcEJhc2VOb0ZpbGUgPT09IHVybCArICcvJykgewogICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlOwogICAgfQogICAgaWYgKHJld3JpdHRlblVybCkgewogICAgICB0aGlzLiQkcGFyc2UocmV3cml0dGVuVXJsKTsKICAgIH0KICAgIHJldHVybiAhIXJld3JpdHRlblVybDsKICB9OwoKICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksCiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJzsKCiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDsKICAgIC8vIGluY2x1ZGUgaGFzaFByZWZpeCBpbiAkJGFic1VybCB3aGVuICQkdXJsIGlzIGVtcHR5IHNvIElFOCAmIDkgZG8gbm90IHJlbG9hZCBwYWdlIGJlY2F1c2Ugb2YgcmVtb3ZhbCBvZiAnIycKICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIHRoaXMuJCR1cmw7CiAgfTsKCn0KCgp2YXIgbG9jYXRpb25Qcm90b3R5cGUgPSB7CgogIC8qKgogICAqIEFyZSB3ZSBpbiBodG1sNSBtb2RlPwogICAqIEBwcml2YXRlCiAgICovCiAgJCRodG1sNTogZmFsc2UsCgogIC8qKgogICAqIEhhcyBhbnkgY2hhbmdlIGJlZW4gcmVwbGFjaW5nPwogICAqIEBwcml2YXRlCiAgICovCiAgJCRyZXBsYWNlOiBmYWxzZSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRsb2NhdGlvbiNhYnNVcmwKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LgogICAqCiAgICogUmV0dXJuIGZ1bGwgdXJsIHJlcHJlc2VudGF0aW9uIHdpdGggYWxsIHNlZ21lbnRzIGVuY29kZWQgYWNjb3JkaW5nIHRvIHJ1bGVzIHNwZWNpZmllZCBpbgogICAqIFtSRkMgMzk4Nl0oaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMzk4Ni50eHQpLgogICAqCiAgICogQHJldHVybiB7c3RyaW5nfSBmdWxsIHVybAogICAqLwogIGFic1VybDogbG9jYXRpb25HZXR0ZXIoJyQkYWJzVXJsJyksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkbG9jYXRpb24jdXJsCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuCiAgICoKICAgKiBSZXR1cm4gdXJsIChlLmcuIGAvcGF0aD9hPWIjaGFzaGApIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci4KICAgKgogICAqIENoYW5nZSBwYXRoLCBzZWFyY2ggYW5kIGhhc2gsIHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IHVybCBOZXcgdXJsIHdpdGhvdXQgYmFzZSBwcmVmaXggKGUuZy4gYC9wYXRoP2E9YiNoYXNoYCkKICAgKiBAcmV0dXJuIHtzdHJpbmd9IHVybAogICAqLwogIHVybDogZnVuY3Rpb24odXJsKSB7CiAgICBpZiAoaXNVbmRlZmluZWQodXJsKSkKICAgICAgcmV0dXJuIHRoaXMuJCR1cmw7CgogICAgdmFyIG1hdGNoID0gUEFUSF9NQVRDSC5leGVjKHVybCk7CiAgICBpZiAobWF0Y2hbMV0pIHRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pKTsKICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSkgdGhpcy5zZWFyY2gobWF0Y2hbM10gfHwgJycpOwogICAgdGhpcy5oYXNoKG1hdGNoWzVdIHx8ICcnKTsKCiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGxvY2F0aW9uI3Byb3RvY29sCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS4KICAgKgogICAqIFJldHVybiBwcm90b2NvbCBvZiBjdXJyZW50IHVybC4KICAgKgogICAqIEByZXR1cm4ge3N0cmluZ30gcHJvdG9jb2wgb2YgY3VycmVudCB1cmwKICAgKi8KICBwcm90b2NvbDogbG9jYXRpb25HZXR0ZXIoJyQkcHJvdG9jb2wnKSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRsb2NhdGlvbiNob3N0CiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS4KICAgKgogICAqIFJldHVybiBob3N0IG9mIGN1cnJlbnQgdXJsLgogICAqCiAgICogQHJldHVybiB7c3RyaW5nfSBob3N0IG9mIGN1cnJlbnQgdXJsLgogICAqLwogIGhvc3Q6IGxvY2F0aW9uR2V0dGVyKCckJGhvc3QnKSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRsb2NhdGlvbiNwb3J0CiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS4KICAgKgogICAqIFJldHVybiBwb3J0IG9mIGN1cnJlbnQgdXJsLgogICAqCiAgICogQHJldHVybiB7TnVtYmVyfSBwb3J0CiAgICovCiAgcG9ydDogbG9jYXRpb25HZXR0ZXIoJyQkcG9ydCcpLAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGxvY2F0aW9uI3BhdGgKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci4KICAgKgogICAqIFJldHVybiBwYXRoIG9mIGN1cnJlbnQgdXJsIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci4KICAgKgogICAqIENoYW5nZSBwYXRoIHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuCiAgICoKICAgKiBOb3RlOiBQYXRoIHNob3VsZCBhbHdheXMgYmVnaW4gd2l0aCBmb3J3YXJkIHNsYXNoICgvKSwgdGhpcyBtZXRob2Qgd2lsbCBhZGQgdGhlIGZvcndhcmQgc2xhc2gKICAgKiBpZiBpdCBpcyBtaXNzaW5nLgogICAqCiAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBwYXRoIE5ldyBwYXRoCiAgICogQHJldHVybiB7c3RyaW5nfSBwYXRoCiAgICovCiAgcGF0aDogbG9jYXRpb25HZXR0ZXJTZXR0ZXIoJyQkcGF0aCcsIGZ1bmN0aW9uKHBhdGgpIHsKICAgIHBhdGggPSBwYXRoICE9PSBudWxsID8gcGF0aC50b1N0cmluZygpIDogJyc7CiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7CiAgfSksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkbG9jYXRpb24jc2VhcmNoCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuCiAgICoKICAgKiBSZXR1cm4gc2VhcmNoIHBhcnQgKGFzIG9iamVjdCkgb2YgY3VycmVudCB1cmwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLgogICAqCiAgICogQ2hhbmdlIHNlYXJjaCBwYXJ0IHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuCiAgICoKICAgKgogICAqIGBgYGpzCiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvCiAgICogdmFyIHNlYXJjaE9iamVjdCA9ICRsb2NhdGlvbi5zZWFyY2goKTsKICAgKiAvLyA9PiB7Zm9vOiAnYmFyJywgYmF6OiAneG94byd9CiAgICoKICAgKgogICAqIC8vIHNldCBmb28gdG8gJ3lpcGVlJwogICAqICRsb2NhdGlvbi5zZWFyY2goJ2ZvbycsICd5aXBlZScpOwogICAqIC8vID0+ICRsb2NhdGlvbgogICAqIGBgYAogICAqCiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmc+fE9iamVjdC48QXJyYXkuPHN0cmluZz4+fSBzZWFyY2ggTmV3IHNlYXJjaCBwYXJhbXMgLSBzdHJpbmcgb3IKICAgKiBoYXNoIG9iamVjdC4KICAgKgogICAqIFdoZW4gY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgdGhlIG1ldGhvZCBhY3RzIGFzIGEgc2V0dGVyLCBzZXR0aW5nIHRoZSBgc2VhcmNoYCBjb21wb25lbnQKICAgKiBvZiBgJGxvY2F0aW9uYCB0byB0aGUgc3BlY2lmaWVkIHZhbHVlLgogICAqCiAgICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgaGFzaCBvYmplY3QgY29udGFpbmluZyBhbiBhcnJheSBvZiB2YWx1ZXMsIHRoZXNlIHZhbHVlcyB3aWxsIGJlIGVuY29kZWQKICAgKiBhcyBkdXBsaWNhdGUgc2VhcmNoIHBhcmFtZXRlcnMgaW4gdGhlIHVybC4KICAgKgogICAqIEBwYXJhbSB7KHN0cmluZ3xOdW1iZXJ8QXJyYXk8c3RyaW5nPnxib29sZWFuKT19IHBhcmFtVmFsdWUgSWYgYHNlYXJjaGAgaXMgYSBzdHJpbmcgb3IgbnVtYmVyLCB0aGVuIGBwYXJhbVZhbHVlYAogICAqIHdpbGwgb3ZlcnJpZGUgb25seSBhIHNpbmdsZSBzZWFyY2ggcHJvcGVydHkuCiAgICoKICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYW4gYXJyYXksIGl0IHdpbGwgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IG9mIHRoZSBgc2VhcmNoYCBjb21wb25lbnQgb2YKICAgKiBgJGxvY2F0aW9uYCBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudC4KICAgKgogICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgbnVsbGAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGRlbGV0ZWQuCiAgICoKICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYHRydWVgLCB0aGUgcHJvcGVydHkgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQgd2lsbCBiZSBhZGRlZCB3aXRoIG5vCiAgICogdmFsdWUgbm9yIHRyYWlsaW5nIGVxdWFsIHNpZ24uCiAgICoKICAgKiBAcmV0dXJuIHtPYmplY3R9IElmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIHRoZSBwYXJzZWQgYHNlYXJjaGAgb2JqZWN0LiBJZiBjYWxsZWQgd2l0aAogICAqIG9uZSBvciBtb3JlIGFyZ3VtZW50cyByZXR1cm5zIGAkbG9jYXRpb25gIG9iamVjdCBpdHNlbGYuCiAgICovCiAgc2VhcmNoOiBmdW5jdGlvbihzZWFyY2gsIHBhcmFtVmFsdWUpIHsKICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICBjYXNlIDA6CiAgICAgICAgcmV0dXJuIHRoaXMuJCRzZWFyY2g7CiAgICAgIGNhc2UgMToKICAgICAgICBpZiAoaXNTdHJpbmcoc2VhcmNoKSB8fCBpc051bWJlcihzZWFyY2gpKSB7CiAgICAgICAgICBzZWFyY2ggPSBzZWFyY2gudG9TdHJpbmcoKTsKICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKHNlYXJjaCk7CiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChzZWFyY2gpKSB7CiAgICAgICAgICBzZWFyY2ggPSBjb3B5KHNlYXJjaCwge30pOwogICAgICAgICAgLy8gcmVtb3ZlIG9iamVjdCB1bmRlZmluZWQgb3IgbnVsbCBwcm9wZXJ0aWVzCiAgICAgICAgICBmb3JFYWNoKHNlYXJjaCwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIHNlYXJjaFtrZXldOwogICAgICAgICAgfSk7CgogICAgICAgICAgdGhpcy4kJHNlYXJjaCA9IHNlYXJjaDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpc3JjaGFyZycsCiAgICAgICAgICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgYCRsb2NhdGlvbiNzZWFyY2goKWAgY2FsbCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIG9iamVjdC4nKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHBhcmFtVmFsdWUpIHx8IHBhcmFtVmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgIGRlbGV0ZSB0aGlzLiQkc2VhcmNoW3NlYXJjaF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJCRzZWFyY2hbc2VhcmNoXSA9IHBhcmFtVmFsdWU7CiAgICAgICAgfQogICAgfQoKICAgIHRoaXMuJCRjb21wb3NlKCk7CiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGxvY2F0aW9uI2hhc2gKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci4KICAgKgogICAqIFJldHVybiBoYXNoIGZyYWdtZW50IHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci4KICAgKgogICAqIENoYW5nZSBoYXNoIGZyYWdtZW50IHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuCiAgICoKICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGhhc2ggTmV3IGhhc2ggZnJhZ21lbnQKICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhhc2gKICAgKi8KICBoYXNoOiBsb2NhdGlvbkdldHRlclNldHRlcignJCRoYXNoJywgZnVuY3Rpb24oaGFzaCkgewogICAgcmV0dXJuIGhhc2ggIT09IG51bGwgPyBoYXNoLnRvU3RyaW5nKCkgOiAnJzsKICB9KSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRsb2NhdGlvbiNyZXBsYWNlCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBJZiBjYWxsZWQsIGFsbCBjaGFuZ2VzIHRvICRsb2NhdGlvbiBkdXJpbmcgY3VycmVudCBgJGRpZ2VzdGAgd2lsbCBiZSByZXBsYWNpbmcgY3VycmVudCBoaXN0b3J5CiAgICogcmVjb3JkLCBpbnN0ZWFkIG9mIGFkZGluZyBuZXcgb25lLgogICAqLwogIHJlcGxhY2U6IGZ1bmN0aW9uKCkgewogICAgdGhpcy4kJHJlcGxhY2UgPSB0cnVlOwogICAgcmV0dXJuIHRoaXM7CiAgfQp9OwoKZm9yRWFjaChbTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwsIExvY2F0aW9uSGFzaGJhbmdVcmwsIExvY2F0aW9uSHRtbDVVcmxdLCBmdW5jdGlvbiAoTG9jYXRpb24pIHsKICBMb2NhdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGxvY2F0aW9uUHJvdG90eXBlKTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRsb2NhdGlvbiNzdGF0ZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLgogICAqCiAgICogUmV0dXJuIHRoZSBoaXN0b3J5IHN0YXRlIG9iamVjdCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuCiAgICoKICAgKiBDaGFuZ2UgdGhlIGhpc3Rvcnkgc3RhdGUgb2JqZWN0IHdoZW4gY2FsbGVkIHdpdGggb25lIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLgogICAqIFRoZSBzdGF0ZSBvYmplY3QgaXMgbGF0ZXIgcGFzc2VkIHRvIGBwdXNoU3RhdGVgIG9yIGByZXBsYWNlU3RhdGVgLgogICAqCiAgICogTk9URTogVGhpcyBtZXRob2QgaXMgc3VwcG9ydGVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgb25seSBpbiBicm93c2VycyBzdXBwb3J0aW5nCiAgICogdGhlIEhUTUw1IEhpc3RvcnkgQVBJIChpLmUuIG1ldGhvZHMgYHB1c2hTdGF0ZWAgYW5kIGByZXBsYWNlU3RhdGVgKS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydAogICAqIG9sZGVyIGJyb3dzZXJzIChsaWtlIElFOSBvciBBbmRyb2lkIDwgNC4wKSwgZG9uJ3QgdXNlIHRoaXMgbWV0aG9kLgogICAqCiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZSBTdGF0ZSBvYmplY3QgZm9yIHB1c2hTdGF0ZSBvciByZXBsYWNlU3RhdGUKICAgKiBAcmV0dXJuIHtvYmplY3R9IHN0YXRlCiAgICovCiAgTG9jYXRpb24ucHJvdG90eXBlLnN0YXRlID0gZnVuY3Rpb24oc3RhdGUpIHsKICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkKICAgICAgcmV0dXJuIHRoaXMuJCRzdGF0ZTsKCiAgICBpZiAoTG9jYXRpb24gIT09IExvY2F0aW9uSHRtbDVVcmwgfHwgIXRoaXMuJCRodG1sNSkgewogICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ25vc3RhdGUnLCAnSGlzdG9yeSBBUEkgc3RhdGUgc3VwcG9ydCBpcyBhdmFpbGFibGUgb25seSAnICsKICAgICAgICAnaW4gSFRNTDUgbW9kZSBhbmQgb25seSBpbiBicm93c2VycyBzdXBwb3J0aW5nIEhUTUw1IEhpc3RvcnkgQVBJJyk7CiAgICB9CiAgICAvLyBUaGUgdXNlciBtaWdodCBtb2RpZnkgYHN0YXRlT2JqZWN0YCBhZnRlciBpbnZva2luZyBgJGxvY2F0aW9uLnN0YXRlKHN0YXRlT2JqZWN0KWAKICAgIC8vIGJ1dCB3ZSdyZSBjaGFuZ2luZyB0aGUgJCRzdGF0ZSByZWZlcmVuY2UgdG8gJGJyb3dzZXIuc3RhdGUoKSBkdXJpbmcgdGhlICRkaWdlc3QKICAgIC8vIHNvIHRoZSBtb2RpZmljYXRpb24gd2luZG93IGlzIG5hcnJvdy4KICAgIHRoaXMuJCRzdGF0ZSA9IGlzVW5kZWZpbmVkKHN0YXRlKSA/IG51bGwgOiBzdGF0ZTsKCiAgICByZXR1cm4gdGhpczsKICB9Owp9KTsKCgpmdW5jdGlvbiBsb2NhdGlvbkdldHRlcihwcm9wZXJ0eSkgewogIHJldHVybiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTsKICB9Owp9CgoKZnVuY3Rpb24gbG9jYXRpb25HZXR0ZXJTZXR0ZXIocHJvcGVydHksIHByZXByb2Nlc3MpIHsKICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHsKICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpCiAgICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTsKCiAgICB0aGlzW3Byb3BlcnR5XSA9IHByZXByb2Nlc3ModmFsdWUpOwogICAgdGhpcy4kJGNvbXBvc2UoKTsKCiAgICByZXR1cm4gdGhpczsKICB9Owp9CgoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRsb2NhdGlvbgogKgogKiBAcmVxdWlyZXMgJHJvb3RFbGVtZW50CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgJGxvY2F0aW9uIHNlcnZpY2UgcGFyc2VzIHRoZSBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIgKGJhc2VkIG9uIHRoZQogKiBbd2luZG93LmxvY2F0aW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi93aW5kb3cubG9jYXRpb24pKSBhbmQgbWFrZXMgdGhlIFVSTAogKiBhdmFpbGFibGUgdG8geW91ciBhcHBsaWNhdGlvbi4gQ2hhbmdlcyB0byB0aGUgVVJMIGluIHRoZSBhZGRyZXNzIGJhciBhcmUgcmVmbGVjdGVkIGludG8KICogJGxvY2F0aW9uIHNlcnZpY2UgYW5kIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGFyZSByZWZsZWN0ZWQgaW50byB0aGUgYnJvd3NlciBhZGRyZXNzIGJhci4KICoKICogKipUaGUgJGxvY2F0aW9uIHNlcnZpY2U6KioKICoKICogLSBFeHBvc2VzIHRoZSBjdXJyZW50IFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciwgc28geW91IGNhbgogKiAgIC0gV2F0Y2ggYW5kIG9ic2VydmUgdGhlIFVSTC4KICogICAtIENoYW5nZSB0aGUgVVJMLgogKiAtIFN5bmNocm9uaXplcyB0aGUgVVJMIHdpdGggdGhlIGJyb3dzZXIgd2hlbiB0aGUgdXNlcgogKiAgIC0gQ2hhbmdlcyB0aGUgYWRkcmVzcyBiYXIuCiAqICAgLSBDbGlja3MgdGhlIGJhY2sgb3IgZm9yd2FyZCBidXR0b24gKG9yIGNsaWNrcyBhIEhpc3RvcnkgbGluaykuCiAqICAgLSBDbGlja3Mgb24gYSBsaW5rLgogKiAtIFJlcHJlc2VudHMgdGhlIFVSTCBvYmplY3QgYXMgYSBzZXQgb2YgbWV0aG9kcyAocHJvdG9jb2wsIGhvc3QsIHBvcnQsIHBhdGgsIHNlYXJjaCwgaGFzaCkuCiAqCiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uIERldmVsb3BlciBHdWlkZTogVXNpbmcgJGxvY2F0aW9ufQogKi8KCi8qKgogKiBAbmdkb2MgcHJvdmlkZXIKICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqIFVzZSB0aGUgYCRsb2NhdGlvblByb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBkZWVwIGxpbmtpbmcgcGF0aHMgYXJlIHN0b3JlZC4KICovCmZ1bmN0aW9uICRMb2NhdGlvblByb3ZpZGVyKCl7CiAgdmFyIGhhc2hQcmVmaXggPSAnJywKICAgICAgaHRtbDVNb2RlID0gewogICAgICAgIGVuYWJsZWQ6IGZhbHNlLAogICAgICAgIHJlcXVpcmVCYXNlOiB0cnVlLAogICAgICAgIHJld3JpdGVMaW5rczogdHJ1ZQogICAgICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXIjaGFzaFByZWZpeAogICAqIEBkZXNjcmlwdGlvbgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcHJlZml4IFByZWZpeCBmb3IgaGFzaCBwYXJ0IChjb250YWluaW5nIHBhdGggYW5kIHNlYXJjaCkKICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlcgogICAqLwogIHRoaXMuaGFzaFByZWZpeCA9IGZ1bmN0aW9uKHByZWZpeCkgewogICAgaWYgKGlzRGVmaW5lZChwcmVmaXgpKSB7CiAgICAgIGhhc2hQcmVmaXggPSBwcmVmaXg7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGhhc2hQcmVmaXg7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRsb2NhdGlvblByb3ZpZGVyI2h0bWw1TW9kZQogICAqIEBkZXNjcmlwdGlvbgogICAqIEBwYXJhbSB7KGJvb2xlYW58T2JqZWN0KT19IG1vZGUgSWYgYm9vbGVhbiwgc2V0cyBgaHRtbDVNb2RlLmVuYWJsZWRgIHRvIHZhbHVlLgogICAqICAgSWYgb2JqZWN0LCBzZXRzIGBlbmFibGVkYCwgYHJlcXVpcmVCYXNlYCBhbmQgYHJld3JpdGVMaW5rc2AgdG8gcmVzcGVjdGl2ZSB2YWx1ZXMuIFN1cHBvcnRlZAogICAqICAgcHJvcGVydGllczoKICAgKiAgIC0gKiplbmFibGVkKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyAoZGVmYXVsdDogZmFsc2UpIElmIHRydWUsIHdpbGwgcmVseSBvbiBgaGlzdG9yeS5wdXNoU3RhdGVgIHRvCiAgICogICAgIGNoYW5nZSB1cmxzIHdoZXJlIHN1cHBvcnRlZC4gV2lsbCBmYWxsIGJhY2sgdG8gaGFzaC1wcmVmaXhlZCBwYXRocyBpbiBicm93c2VycyB0aGF0IGRvIG5vdAogICAqICAgICBzdXBwb3J0IGBwdXNoU3RhdGVgLgogICAqICAgLSAqKnJlcXVpcmVCYXNlKiogLSBge2Jvb2xlYW59YCAtIChkZWZhdWx0OiBgdHJ1ZWApIFdoZW4gaHRtbDVNb2RlIGlzIGVuYWJsZWQsIHNwZWNpZmllcwogICAqICAgICB3aGV0aGVyIG9yIG5vdCBhIDxiYXNlPiB0YWcgaXMgcmVxdWlyZWQgdG8gYmUgcHJlc2VudC4gSWYgYGVuYWJsZWRgIGFuZCBgcmVxdWlyZUJhc2VgIGFyZQogICAqICAgICB0cnVlLCBhbmQgYSBiYXNlIHRhZyBpcyBub3QgcHJlc2VudCwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24gd2hlbiBgJGxvY2F0aW9uYCBpcyBpbmplY3RlZC4KICAgKiAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uICRsb2NhdGlvbiBndWlkZSBmb3IgbW9yZSBpbmZvcm1hdGlvbn0KICAgKiAgIC0gKipyZXdyaXRlTGlua3MqKiAtIGB7Ym9vbGVhbn1gIC0gKGRlZmF1bHQ6IGB0cnVlYCkgV2hlbiBodG1sNU1vZGUgaXMgZW5hYmxlZCwKICAgKiAgICAgZW5hYmxlcy9kaXNhYmxlcyB1cmwgcmV3cml0aW5nIGZvciByZWxhdGl2ZSBsaW5rcy4KICAgKgogICAqIEByZXR1cm5zIHtPYmplY3R9IGh0bWw1TW9kZSBvYmplY3QgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXIKICAgKi8KICB0aGlzLmh0bWw1TW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHsKICAgIGlmIChpc0Jvb2xlYW4obW9kZSkpIHsKICAgICAgaHRtbDVNb2RlLmVuYWJsZWQgPSBtb2RlOwogICAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobW9kZSkpIHsKCiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5lbmFibGVkKSkgewogICAgICAgIGh0bWw1TW9kZS5lbmFibGVkID0gbW9kZS5lbmFibGVkOwogICAgICB9CgogICAgICBpZiAoaXNCb29sZWFuKG1vZGUucmVxdWlyZUJhc2UpKSB7CiAgICAgICAgaHRtbDVNb2RlLnJlcXVpcmVCYXNlID0gbW9kZS5yZXF1aXJlQmFzZTsKICAgICAgfQoKICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLnJld3JpdGVMaW5rcykpIHsKICAgICAgICBodG1sNU1vZGUucmV3cml0ZUxpbmtzID0gbW9kZS5yZXdyaXRlTGlua3M7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGh0bWw1TW9kZTsKICAgIH0KICB9OwoKICAvKioKICAgKiBAbmdkb2MgZXZlbnQKICAgKiBAbmFtZSAkbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3RhcnQKICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlCiAgICogQGRlc2NyaXB0aW9uCiAgICogQnJvYWRjYXN0ZWQgYmVmb3JlIGEgVVJMIHdpbGwgY2hhbmdlLgogICAqCiAgICogVGhpcyBjaGFuZ2UgY2FuIGJlIHByZXZlbnRlZCBieSBjYWxsaW5nCiAgICogYHByZXZlbnREZWZhdWx0YCBtZXRob2Qgb2YgdGhlIGV2ZW50LiBTZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBmb3IgbW9yZQogICAqIGRldGFpbHMgYWJvdXQgZXZlbnQgb2JqZWN0LiBVcG9uIHN1Y2Nlc3NmdWwgY2hhbmdlCiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdWNjZXNzICRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3N9IGlzIGZpcmVkLgogICAqCiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW4KICAgKiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgSFRNTDUgSGlzdG9yeSBBUEkuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuCiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMCiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRVcmwgVVJMIHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdAogICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkU3RhdGUgSGlzdG9yeSBzdGF0ZSBvYmplY3QgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLgogICAqLwoKICAvKioKICAgKiBAbmdkb2MgZXZlbnQKICAgKiBAbmFtZSAkbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcwogICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGUKICAgKiBAZGVzY3JpcHRpb24KICAgKiBCcm9hZGNhc3RlZCBhZnRlciBhIFVSTCB3YXMgY2hhbmdlZC4KICAgKgogICAqIFRoZSBgbmV3U3RhdGVgIGFuZCBgb2xkU3RhdGVgIHBhcmFtZXRlcnMgbWF5IGJlIGRlZmluZWQgb25seSBpbiBIVE1MNSBtb2RlIGFuZCB3aGVuCiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLgogICAqCiAgICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTAogICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkVXJsIFVSTCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZXdTdGF0ZSBOZXcgaGlzdG9yeSBzdGF0ZSBvYmplY3QKICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC4KICAgKi8KCiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRzbmlmZmVyJywgJyRyb290RWxlbWVudCcsCiAgICAgIGZ1bmN0aW9uKCAkcm9vdFNjb3BlLCAgICRicm93c2VyLCAgICRzbmlmZmVyLCAgICRyb290RWxlbWVudCkgewogICAgdmFyICRsb2NhdGlvbiwKICAgICAgICBMb2NhdGlvbk1vZGUsCiAgICAgICAgYmFzZUhyZWYgPSAkYnJvd3Nlci5iYXNlSHJlZigpLCAvLyBpZiBiYXNlW2hyZWZdIGlzIHVuZGVmaW5lZCwgaXQgZGVmYXVsdHMgdG8gJycKICAgICAgICBpbml0aWFsVXJsID0gJGJyb3dzZXIudXJsKCksCiAgICAgICAgYXBwQmFzZTsKCiAgICBpZiAoaHRtbDVNb2RlLmVuYWJsZWQpIHsKICAgICAgaWYgKCFiYXNlSHJlZiAmJiBodG1sNU1vZGUucmVxdWlyZUJhc2UpIHsKICAgICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ25vYmFzZScsCiAgICAgICAgICAiJGxvY2F0aW9uIGluIEhUTUw1IG1vZGUgcmVxdWlyZXMgYSA8YmFzZT4gdGFnIHRvIGJlIHByZXNlbnQhIik7CiAgICAgIH0KICAgICAgYXBwQmFzZSA9IHNlcnZlckJhc2UoaW5pdGlhbFVybCkgKyAoYmFzZUhyZWYgfHwgJy8nKTsKICAgICAgTG9jYXRpb25Nb2RlID0gJHNuaWZmZXIuaGlzdG9yeSA/IExvY2F0aW9uSHRtbDVVcmwgOiBMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybDsKICAgIH0gZWxzZSB7CiAgICAgIGFwcEJhc2UgPSBzdHJpcEhhc2goaW5pdGlhbFVybCk7CiAgICAgIExvY2F0aW9uTW9kZSA9IExvY2F0aW9uSGFzaGJhbmdVcmw7CiAgICB9CiAgICAkbG9jYXRpb24gPSBuZXcgTG9jYXRpb25Nb2RlKGFwcEJhc2UsICcjJyArIGhhc2hQcmVmaXgpOwogICAgJGxvY2F0aW9uLiQkcGFyc2VMaW5rVXJsKGluaXRpYWxVcmwsIGluaXRpYWxVcmwpOwoKICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTsKCiAgICB2YXIgSUdOT1JFX1VSSV9SRUdFWFAgPSAvXlxzKihqYXZhc2NyaXB0fG1haWx0byk6L2k7CgogICAgZnVuY3Rpb24gc2V0QnJvd3NlclVybFdpdGhGYWxsYmFjayh1cmwsIHJlcGxhY2UsIHN0YXRlKSB7CiAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24udXJsKCk7CiAgICAgIHZhciBvbGRTdGF0ZSA9ICRsb2NhdGlvbi4kJHN0YXRlOwogICAgICB0cnkgewogICAgICAgICRicm93c2VyLnVybCh1cmwsIHJlcGxhY2UsIHN0YXRlKTsKCiAgICAgICAgLy8gTWFrZSBzdXJlICRsb2NhdGlvbi5zdGF0ZSgpIHJldHVybnMgcmVmZXJlbnRpYWxseSBpZGVudGljYWwgKG5vdCBqdXN0IGRlZXBseSBlcXVhbCkKICAgICAgICAvLyBzdGF0ZSBvYmplY3Q7IHRoaXMgbWFrZXMgcG9zc2libGUgcXVpY2sgY2hlY2tpbmcgaWYgdGhlIHN0YXRlIGNoYW5nZWQgaW4gdGhlIGRpZ2VzdAogICAgICAgIC8vIGxvb3AuIENoZWNraW5nIGRlZXAgZXF1YWxpdHkgd291bGQgYmUgdG9vIGV4cGVuc2l2ZS4KICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAvLyBSZXN0b3JlIG9sZCB2YWx1ZXMgaWYgcHVzaFN0YXRlIGZhaWxzCiAgICAgICAgJGxvY2F0aW9uLnVybChvbGRVcmwpOwogICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7CgogICAgICAgIHRocm93IGU7CiAgICAgIH0KICAgIH0KCiAgICAkcm9vdEVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgLy8gVE9ETyh2b2p0YSk6IHJld3JpdGUgbGluayB3aGVuIG9wZW5pbmcgaW4gbmV3IHRhYi93aW5kb3cgKGluIGxlZ2FjeSBicm93c2VyKQogICAgICAvLyBjdXJyZW50bHkgd2Ugb3BlbiBuaWNlIHVybCBsaW5rIGFuZCByZWRpcmVjdCB0aGVuCgogICAgICBpZiAoIWh0bWw1TW9kZS5yZXdyaXRlTGlua3MgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LndoaWNoID09IDIpIHJldHVybjsKCiAgICAgIHZhciBlbG0gPSBqcUxpdGUoZXZlbnQudGFyZ2V0KTsKCiAgICAgIC8vIHRyYXZlcnNlIHRoZSBET00gdXAgdG8gZmluZCBmaXJzdCBBIHRhZwogICAgICB3aGlsZSAobm9kZU5hbWVfKGVsbVswXSkgIT09ICdhJykgewogICAgICAgIC8vIGlnbm9yZSByZXdyaXRpbmcgaWYgbm8gQSB0YWcgKHJlYWNoZWQgcm9vdCBlbGVtZW50LCBvciBubyBwYXJlbnQgLSByZW1vdmVkIGZyb20gZG9jdW1lbnQpCiAgICAgICAgaWYgKGVsbVswXSA9PT0gJHJvb3RFbGVtZW50WzBdIHx8ICEoZWxtID0gZWxtLnBhcmVudCgpKVswXSkgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYWJzSHJlZiA9IGVsbS5wcm9wKCdocmVmJyk7CiAgICAgIC8vIGdldCB0aGUgYWN0dWFsIGhyZWYgYXR0cmlidXRlIC0gc2VlCiAgICAgIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kZDM0NzE0OCh2PXZzLjg1KS5hc3B4CiAgICAgIHZhciByZWxIcmVmID0gZWxtLmF0dHIoJ2hyZWYnKSB8fCBlbG0uYXR0cigneGxpbms6aHJlZicpOwoKICAgICAgaWYgKGlzT2JqZWN0KGFic0hyZWYpICYmIGFic0hyZWYudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJykgewogICAgICAgIC8vIFNWR0FuaW1hdGVkU3RyaW5nLmFuaW1WYWwgc2hvdWxkIGJlIGlkZW50aWNhbCB0byBTVkdBbmltYXRlZFN0cmluZy5iYXNlVmFsLCB1bmxlc3MgZHVyaW5nCiAgICAgICAgLy8gYW4gYW5pbWF0aW9uLgogICAgICAgIGFic0hyZWYgPSB1cmxSZXNvbHZlKGFic0hyZWYuYW5pbVZhbCkuaHJlZjsKICAgICAgfQoKICAgICAgLy8gSWdub3JlIHdoZW4gdXJsIGlzIHN0YXJ0ZWQgd2l0aCBqYXZhc2NyaXB0OiBvciBtYWlsdG86CiAgICAgIGlmIChJR05PUkVfVVJJX1JFR0VYUC50ZXN0KGFic0hyZWYpKSByZXR1cm47CgogICAgICBpZiAoYWJzSHJlZiAmJiAhZWxtLmF0dHIoJ3RhcmdldCcpICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgewogICAgICAgIGlmICgkbG9jYXRpb24uJCRwYXJzZUxpbmtVcmwoYWJzSHJlZiwgcmVsSHJlZikpIHsKICAgICAgICAgIC8vIFdlIGRvIGEgcHJldmVudERlZmF1bHQgZm9yIGFsbCB1cmxzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIGFuZ3VsYXIgYXBwbGljYXRpb24sCiAgICAgICAgICAvLyBpbiBodG1sNW1vZGUgYW5kIGFsc28gd2l0aG91dCwgc28gdGhhdCB3ZSBhcmUgYWJsZSB0byBhYm9ydCBuYXZpZ2F0aW9uIHdpdGhvdXQKICAgICAgICAgIC8vIGdldHRpbmcgZG91YmxlIGVudHJpZXMgaW4gdGhlIGxvY2F0aW9uIGhpc3RvcnkuCiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgLy8gdXBkYXRlIGxvY2F0aW9uIG1hbnVhbGx5CiAgICAgICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9ICRicm93c2VyLnVybCgpKSB7CiAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7CiAgICAgICAgICAgIC8vIGhhY2sgdG8gd29yayBhcm91bmQgRkY2IGJ1ZyA2ODQyMDggd2hlbiBzY2VuYXJpbyBydW5uZXIgY2xpY2tzIG9uIGxpbmtzCiAgICAgICAgICAgIHdpbmRvdy5hbmd1bGFyWydmZi02ODQyMDgtcHJldmVudERlZmF1bHQnXSA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKCgogICAgLy8gcmV3cml0ZSBoYXNoYmFuZyB1cmwgPD4gaHRtbDUgdXJsCiAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9IGluaXRpYWxVcmwpIHsKICAgICAgJGJyb3dzZXIudXJsKCRsb2NhdGlvbi5hYnNVcmwoKSwgdHJ1ZSk7CiAgICB9CgogICAgdmFyIGluaXRpYWxpemluZyA9IHRydWU7CgogICAgLy8gdXBkYXRlICRsb2NhdGlvbiB3aGVuICRicm93c2VyIHVybCBjaGFuZ2VzCiAgICAkYnJvd3Nlci5vblVybENoYW5nZShmdW5jdGlvbihuZXdVcmwsIG5ld1N0YXRlKSB7CiAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHsKICAgICAgICB2YXIgb2xkVXJsID0gJGxvY2F0aW9uLmFic1VybCgpOwogICAgICAgIHZhciBvbGRTdGF0ZSA9ICRsb2NhdGlvbi4kJHN0YXRlOwoKICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShuZXdVcmwpOwogICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gbmV3U3RhdGU7CiAgICAgICAgaWYgKCRyb290U2NvcGUuJGJyb2FkY2FzdCgnJGxvY2F0aW9uQ2hhbmdlU3RhcnQnLCBuZXdVcmwsIG9sZFVybCwKICAgICAgICAgICAgbmV3U3RhdGUsIG9sZFN0YXRlKS5kZWZhdWx0UHJldmVudGVkKSB7CiAgICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShvbGRVcmwpOwogICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTsKICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sob2xkVXJsLCBmYWxzZSwgb2xkU3RhdGUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTsKICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGRpZ2VzdCgpOwogICAgfSk7CgogICAgLy8gdXBkYXRlIGJyb3dzZXIKICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uICRsb2NhdGlvbldhdGNoKCkgewogICAgICB2YXIgb2xkVXJsID0gJGJyb3dzZXIudXJsKCk7CiAgICAgIHZhciBvbGRTdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7CiAgICAgIHZhciBjdXJyZW50UmVwbGFjZSA9ICRsb2NhdGlvbi4kJHJlcGxhY2U7CiAgICAgIHZhciB1cmxPclN0YXRlQ2hhbmdlZCA9IG9sZFVybCAhPT0gJGxvY2F0aW9uLmFic1VybCgpIHx8CiAgICAgICAgKCRsb2NhdGlvbi4kJGh0bWw1ICYmICRzbmlmZmVyLmhpc3RvcnkgJiYgb2xkU3RhdGUgIT09ICRsb2NhdGlvbi4kJHN0YXRlKTsKCiAgICAgIGlmIChpbml0aWFsaXppbmcgfHwgdXJsT3JTdGF0ZUNoYW5nZWQpIHsKICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTsKCiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCRyb290U2NvcGUuJGJyb2FkY2FzdCgnJGxvY2F0aW9uQ2hhbmdlU3RhcnQnLCAkbG9jYXRpb24uYWJzVXJsKCksIG9sZFVybCwKICAgICAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSwgb2xkU3RhdGUpLmRlZmF1bHRQcmV2ZW50ZWQpIHsKICAgICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTsKICAgICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh1cmxPclN0YXRlQ2hhbmdlZCkgewogICAgICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2soJGxvY2F0aW9uLmFic1VybCgpLCBjdXJyZW50UmVwbGFjZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSAkbG9jYXRpb24uJCRzdGF0ZSA/IG51bGwgOiAkbG9jYXRpb24uJCRzdGF0ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgJGxvY2F0aW9uLiQkcmVwbGFjZSA9IGZhbHNlOwoKICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byByZXR1cm4gYW55dGhpbmcgYmVjYXVzZSAkZXZhbEFzeW5jIHdpbGwgbWFrZSB0aGUgZGlnZXN0IGxvb3AgZGlydHkgd2hlbgogICAgICAvLyB0aGVyZSBpcyBhIGNoYW5nZQogICAgfSk7CgogICAgcmV0dXJuICRsb2NhdGlvbjsKCiAgICBmdW5jdGlvbiBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCwgb2xkU3RhdGUpIHsKICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwsCiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUsIG9sZFN0YXRlKTsKICAgIH0KfV07Cn0KCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkbG9nCiAqIEByZXF1aXJlcyAkd2luZG93CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTaW1wbGUgc2VydmljZSBmb3IgbG9nZ2luZy4gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzYWZlbHkgd3JpdGVzIHRoZSBtZXNzYWdlCiAqIGludG8gdGhlIGJyb3dzZXIncyBjb25zb2xlIChpZiBwcmVzZW50KS4KICoKICogVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHNlcnZpY2UgaXMgdG8gc2ltcGxpZnkgZGVidWdnaW5nIGFuZCB0cm91Ymxlc2hvb3RpbmcuCiAqCiAqIFRoZSBkZWZhdWx0IGlzIHRvIGxvZyBgZGVidWdgIG1lc3NhZ2VzLiBZb3UgY2FuIHVzZQogKiB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWR9IHRvIGNoYW5nZSB0aGlzLgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBtb2R1bGU9ImxvZ0V4YW1wbGUiPgogICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbG9nRXhhbXBsZScsIFtdKQogICAgICAgICAuY29udHJvbGxlcignTG9nQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRsb2cnLCBmdW5jdGlvbigkc2NvcGUsICRsb2cpIHsKICAgICAgICAgICAkc2NvcGUuJGxvZyA9ICRsb2c7CiAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSAnSGVsbG8gV29ybGQhJzsKICAgICAgICAgfV0pOwogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iTG9nQ29udHJvbGxlciI+CiAgICAgICAgIDxwPlJlbG9hZCB0aGlzIHBhZ2Ugd2l0aCBvcGVuIGNvbnNvbGUsIGVudGVyIHRleHQgYW5kIGhpdCB0aGUgbG9nIGJ1dHRvbi4uLjwvcD4KICAgICAgICAgTWVzc2FnZToKICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJtZXNzYWdlIi8+CiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9IiRsb2cubG9nKG1lc3NhZ2UpIj5sb2c8L2J1dHRvbj4KICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iJGxvZy53YXJuKG1lc3NhZ2UpIj53YXJuPC9idXR0b24+CiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9IiRsb2cuaW5mbyhtZXNzYWdlKSI+aW5mbzwvYnV0dG9uPgogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSIkbG9nLmVycm9yKG1lc3NhZ2UpIj5lcnJvcjwvYnV0dG9uPgogICAgICAgPC9kaXY+CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwoKLyoqCiAqIEBuZ2RvYyBwcm92aWRlcgogKiBAbmFtZSAkbG9nUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqIFVzZSB0aGUgYCRsb2dQcm92aWRlcmAgdG8gY29uZmlndXJlIGhvdyB0aGUgYXBwbGljYXRpb24gbG9ncyBtZXNzYWdlcwogKi8KZnVuY3Rpb24gJExvZ1Byb3ZpZGVyKCl7CiAgdmFyIGRlYnVnID0gdHJ1ZSwKICAgICAgc2VsZiA9IHRoaXM7CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkCiAgICogQGRlc2NyaXB0aW9uCiAgICogQHBhcmFtIHtib29sZWFuPX0gZmxhZyBlbmFibGUgb3IgZGlzYWJsZSBkZWJ1ZyBsZXZlbCBtZXNzYWdlcwogICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyCiAgICovCiAgdGhpcy5kZWJ1Z0VuYWJsZWQgPSBmdW5jdGlvbihmbGFnKSB7CiAgICBpZiAoaXNEZWZpbmVkKGZsYWcpKSB7CiAgICAgIGRlYnVnID0gZmxhZzsKICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGRlYnVnOwogICAgfQogIH07CgogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpewogICAgcmV0dXJuIHsKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGxvZyNsb2cKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGEgbG9nIG1lc3NhZ2UKICAgICAgICovCiAgICAgIGxvZzogY29uc29sZUxvZygnbG9nJyksCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkbG9nI2luZm8KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2UKICAgICAgICovCiAgICAgIGluZm86IGNvbnNvbGVMb2coJ2luZm8nKSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRsb2cjd2FybgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogV3JpdGUgYSB3YXJuaW5nIG1lc3NhZ2UKICAgICAgICovCiAgICAgIHdhcm46IGNvbnNvbGVMb2coJ3dhcm4nKSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRsb2cjZXJyb3IKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2UKICAgICAgICovCiAgICAgIGVycm9yOiBjb25zb2xlTG9nKCdlcnJvcicpLAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGxvZyNkZWJ1ZwogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlCiAgICAgICAqLwogICAgICBkZWJ1ZzogKGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZm4gPSBjb25zb2xlTG9nKCdkZWJ1ZycpOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAoZGVidWcpIHsKICAgICAgICAgICAgZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9KCkpCiAgICB9OwoKICAgIGZ1bmN0aW9uIGZvcm1hdEVycm9yKGFyZykgewogICAgICBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHsKICAgICAgICBpZiAoYXJnLnN0YWNrKSB7CiAgICAgICAgICBhcmcgPSAoYXJnLm1lc3NhZ2UgJiYgYXJnLnN0YWNrLmluZGV4T2YoYXJnLm1lc3NhZ2UpID09PSAtMSkKICAgICAgICAgICAgICA/ICdFcnJvcjogJyArIGFyZy5tZXNzYWdlICsgJ1xuJyArIGFyZy5zdGFjawogICAgICAgICAgICAgIDogYXJnLnN0YWNrOwogICAgICAgIH0gZWxzZSBpZiAoYXJnLnNvdXJjZVVSTCkgewogICAgICAgICAgYXJnID0gYXJnLm1lc3NhZ2UgKyAnXG4nICsgYXJnLnNvdXJjZVVSTCArICc6JyArIGFyZy5saW5lOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gYXJnOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnNvbGVMb2codHlwZSkgewogICAgICB2YXIgY29uc29sZSA9ICR3aW5kb3cuY29uc29sZSB8fCB7fSwKICAgICAgICAgIGxvZ0ZuID0gY29uc29sZVt0eXBlXSB8fCBjb25zb2xlLmxvZyB8fCBub29wLAogICAgICAgICAgaGFzQXBwbHkgPSBmYWxzZTsKCiAgICAgIC8vIE5vdGU6IHJlYWRpbmcgbG9nRm4uYXBwbHkgdGhyb3dzIGFuIGVycm9yIGluIElFMTEgaW4gSUU4IGRvY3VtZW50IG1vZGUuCiAgICAgIC8vIFRoZSByZWFzb24gYmVoaW5kIHRoaXMgaXMgdGhhdCBjb25zb2xlLmxvZyBoYXMgdHlwZSAib2JqZWN0IiBpbiBJRTguLi4KICAgICAgdHJ5IHsKICAgICAgICBoYXNBcHBseSA9ICEhbG9nRm4uYXBwbHk7CiAgICAgIH0gY2F0Y2ggKGUpIHt9CgogICAgICBpZiAoaGFzQXBwbHkpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgYXJncyA9IFtdOwogICAgICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKGFyZykgewogICAgICAgICAgICBhcmdzLnB1c2goZm9ybWF0RXJyb3IoYXJnKSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiBsb2dGbi5hcHBseShjb25zb2xlLCBhcmdzKTsKICAgICAgICB9OwogICAgICB9CgogICAgICAvLyB3ZSBhcmUgSUUgd2hpY2ggZWl0aGVyIGRvZXNuJ3QgaGF2ZSB3aW5kb3cuY29uc29sZSA9PiB0aGlzIGlzIG5vb3AgYW5kIHdlIGRvIG5vdGhpbmcsCiAgICAgIC8vIG9yIHdlIGFyZSBJRSB3aGVyZSBjb25zb2xlLmxvZyBkb2Vzbid0IGhhdmUgYXBwbHkgc28gd2UgbG9nIGF0IGxlYXN0IGZpcnN0IDIgYXJncwogICAgICByZXR1cm4gZnVuY3Rpb24oYXJnMSwgYXJnMikgewogICAgICAgIGxvZ0ZuKGFyZzEsIGFyZzIgPT0gbnVsbCA/ICcnIDogYXJnMik7CiAgICAgIH07CiAgICB9CiAgfV07Cn0KCnZhciAkcGFyc2VNaW5FcnIgPSBtaW5FcnIoJyRwYXJzZScpOwoKLy8gU2FuZGJveGluZyBBbmd1bGFyIEV4cHJlc3Npb25zCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyBBbmd1bGFyIGV4cHJlc3Npb25zIGFyZSBnZW5lcmFsbHkgY29uc2lkZXJlZCBzYWZlIGJlY2F1c2UgdGhlc2UgZXhwcmVzc2lvbnMgb25seSBoYXZlIGRpcmVjdAovLyBhY2Nlc3MgdG8gJHNjb3BlIGFuZCBsb2NhbHMuIEhvd2V2ZXIsIG9uZSBjYW4gb2J0YWluIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IEpTIGNvZGUgYnkKLy8gb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIG5hdGl2ZSBKUyBmdW5jdGlvbnMgc3VjaCBhcyB0aGUgRnVuY3Rpb24gY29uc3RydWN0b3IuCi8vCi8vIEFzIGFuIGV4YW1wbGUsIGNvbnNpZGVyIHRoZSBmb2xsb3dpbmcgQW5ndWxhciBleHByZXNzaW9uOgovLwovLyAgIHt9LnRvU3RyaW5nLmNvbnN0cnVjdG9yKCdhbGVydCgiZXZpbCBKUyBjb2RlIiknKQovLwovLyBUaGlzIHNhbmRib3hpbmcgdGVjaG5pcXVlIGlzIG5vdCBwZXJmZWN0IGFuZCBkb2Vzbid0IGFpbSB0byBiZS4gVGhlIGdvYWwgaXMgdG8gcHJldmVudCBleHBsb2l0cwovLyBhZ2FpbnN0IHRoZSBleHByZXNzaW9uIGxhbmd1YWdlLCBidXQgbm90IHRvIHByZXZlbnQgZXhwbG9pdHMgdGhhdCB3ZXJlIGVuYWJsZWQgYnkgZXhwb3NpbmcKLy8gc2Vuc2l0aXZlIEphdmFTY3JpcHQgb3IgYnJvd3NlciBhcGlzIG9uIFNjb3BlLiBFeHBvc2luZyBzdWNoIG9iamVjdHMgb24gYSBTY29wZSBpcyBuZXZlciBhIGdvb2QKLy8gcHJhY3RpY2UgYW5kIHRoZXJlZm9yZSB3ZSBhcmUgbm90IGV2ZW4gdHJ5aW5nIHRvIHByb3RlY3QgYWdhaW5zdCBpbnRlcmFjdGlvbiB3aXRoIGFuIG9iamVjdAovLyBleHBsaWNpdGx5IGV4cG9zZWQgaW4gdGhpcyB3YXkuCi8vCi8vIEluIGdlbmVyYWwsIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBhY2Nlc3MgYSBXaW5kb3cgb2JqZWN0IGZyb20gYW4gYW5ndWxhciBleHByZXNzaW9uIHVubGVzcyBhCi8vIHdpbmRvdyBvciBzb21lIERPTSBvYmplY3QgdGhhdCBoYXMgYSByZWZlcmVuY2UgdG8gd2luZG93IGlzIHB1Ymxpc2hlZCBvbnRvIGEgU2NvcGUuCi8vIFNpbWlsYXJseSB3ZSBwcmV2ZW50IGludm9jYXRpb25zIG9mIGZ1bmN0aW9uIGtub3duIHRvIGJlIGRhbmdlcm91cywgYXMgd2VsbCBhcyBhc3NpZ25tZW50cyB0bwovLyBuYXRpdmUgb2JqZWN0cy4KCgpmdW5jdGlvbiBlbnN1cmVTYWZlTWVtYmVyTmFtZShuYW1lLCBmdWxsRXhwcmVzc2lvbikgewogIGlmIChuYW1lID09PSAiX19kZWZpbmVHZXR0ZXJfXyIgfHwgbmFtZSA9PT0gIl9fZGVmaW5lU2V0dGVyX18iCiAgICAgIHx8IG5hbWUgPT09ICJfX2xvb2t1cEdldHRlcl9fIiB8fCBuYW1lID09PSAiX19sb29rdXBTZXR0ZXJfXyIKICAgICAgfHwgbmFtZSA9PT0gIl9fcHJvdG9fXyIpIHsKICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZsZCcsCiAgICAgICAgJ0F0dGVtcHRpbmcgdG8gYWNjZXNzIGEgZGlzYWxsb3dlZCBmaWVsZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zISAnCiAgICAgICAgKydFeHByZXNzaW9uOiB7MH0nLCBmdWxsRXhwcmVzc2lvbik7CiAgfQogIHJldHVybiBuYW1lOwp9CgpmdW5jdGlvbiBlbnN1cmVTYWZlT2JqZWN0KG9iaiwgZnVsbEV4cHJlc3Npb24pIHsKICAvLyBuaWZ0eSBjaGVjayBpZiBvYmogaXMgRnVuY3Rpb24gdGhhdCBpcyBmYXN0IGFuZCB3b3JrcyBhY3Jvc3MgaWZyYW1lcyBhbmQgb3RoZXIgY29udGV4dHMKICBpZiAob2JqKSB7CiAgICBpZiAob2JqLmNvbnN0cnVjdG9yID09PSBvYmopIHsKICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZm4nLAogICAgICAgICAgJ1JlZmVyZW5jaW5nIEZ1bmN0aW9uIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JywKICAgICAgICAgIGZ1bGxFeHByZXNzaW9uKTsKICAgIH0gZWxzZSBpZiAoLy8gaXNXaW5kb3cob2JqKQogICAgICAgIG9iai53aW5kb3cgPT09IG9iaikgewogICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWN3aW5kb3cnLAogICAgICAgICAgJ1JlZmVyZW5jaW5nIHRoZSBXaW5kb3cgaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLAogICAgICAgICAgZnVsbEV4cHJlc3Npb24pOwogICAgfSBlbHNlIGlmICgvLyBpc0VsZW1lbnQob2JqKQogICAgICAgIG9iai5jaGlsZHJlbiAmJiAob2JqLm5vZGVOYW1lIHx8IChvYmoucHJvcCAmJiBvYmouYXR0ciAmJiBvYmouZmluZCkpKSB7CiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2RvbScsCiAgICAgICAgICAnUmVmZXJlbmNpbmcgRE9NIG5vZGVzIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JywKICAgICAgICAgIGZ1bGxFeHByZXNzaW9uKTsKICAgIH0gZWxzZSBpZiAoLy8gYmxvY2sgT2JqZWN0IHNvIHRoYXQgd2UgY2FuJ3QgZ2V0IGhvbGQgb2YgZGFuZ2Vyb3VzIE9iamVjdC4qIG1ldGhvZHMKICAgICAgICBvYmogPT09IE9iamVjdCkgewogICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNvYmonLAogICAgICAgICAgJ1JlZmVyZW5jaW5nIE9iamVjdCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsCiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7CiAgICB9CiAgfQogIHJldHVybiBvYmo7Cn0KCnZhciBDQUxMID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7CnZhciBBUFBMWSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTsKdmFyIEJJTkQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDsKCmZ1bmN0aW9uIGVuc3VyZVNhZmVGdW5jdGlvbihvYmosIGZ1bGxFeHByZXNzaW9uKSB7CiAgaWYgKG9iaikgewogICAgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gb2JqKSB7CiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZuJywKICAgICAgICAnUmVmZXJlbmNpbmcgRnVuY3Rpb24gaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLAogICAgICAgIGZ1bGxFeHByZXNzaW9uKTsKICAgIH0gZWxzZSBpZiAob2JqID09PSBDQUxMIHx8IG9iaiA9PT0gQVBQTFkgfHwgb2JqID09PSBCSU5EKSB7CiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZmJywKICAgICAgICAnUmVmZXJlbmNpbmcgY2FsbCwgYXBwbHkgb3IgYmluZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsCiAgICAgICAgZnVsbEV4cHJlc3Npb24pOwogICAgfQogIH0KfQoKLy9LZXl3b3JkIGNvbnN0YW50cwp2YXIgQ09OU1RBTlRTID0gY3JlYXRlTWFwKCk7CmZvckVhY2goewogICdudWxsJzogZnVuY3Rpb24oKSB7IHJldHVybiBudWxsOyB9LAogICd0cnVlJzogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LAogICdmYWxzZSc6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH0sCiAgJ3VuZGVmaW5lZCc6IGZ1bmN0aW9uKCkge30KfSwgZnVuY3Rpb24oY29uc3RhbnRHZXR0ZXIsIG5hbWUpIHsKICBjb25zdGFudEdldHRlci5jb25zdGFudCA9IGNvbnN0YW50R2V0dGVyLmxpdGVyYWwgPSBjb25zdGFudEdldHRlci5zaGFyZWRHZXR0ZXIgPSB0cnVlOwogIENPTlNUQU5UU1tuYW1lXSA9IGNvbnN0YW50R2V0dGVyOwp9KTsKCi8vTm90IHF1aXRlIGEgY29uc3RhbnQsIGJ1dCBjYW4gYmUgbGV4L3BhcnNlZCB0aGUgc2FtZQpDT05TVEFOVFNbJ3RoaXMnXSA9IGZ1bmN0aW9uKHNlbGYpIHsgcmV0dXJuIHNlbGY7IH07CkNPTlNUQU5UU1sndGhpcyddLnNoYXJlZEdldHRlciA9IHRydWU7CgoKLy9PcGVyYXRvcnMgLSB3aWxsIGJlIHdyYXBwZWQgYnkgYmluYXJ5Rm4vdW5hcnlGbi9hc3NpZ25tZW50L2ZpbHRlcgp2YXIgT1BFUkFUT1JTID0gZXh0ZW5kKGNyZWF0ZU1hcCgpLCB7CiAgICAnKyc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpewogICAgICBhPWEoc2VsZiwgbG9jYWxzKTsgYj1iKHNlbGYsIGxvY2Fscyk7CiAgICAgIGlmIChpc0RlZmluZWQoYSkpIHsKICAgICAgICBpZiAoaXNEZWZpbmVkKGIpKSB7CiAgICAgICAgICByZXR1cm4gYSArIGI7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhOwogICAgICB9CiAgICAgIHJldHVybiBpc0RlZmluZWQoYik/Yjp1bmRlZmluZWQ7fSwKICAgICctJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7CiAgICAgICAgICBhPWEoc2VsZiwgbG9jYWxzKTsgYj1iKHNlbGYsIGxvY2Fscyk7CiAgICAgICAgICByZXR1cm4gKGlzRGVmaW5lZChhKT9hOjApLShpc0RlZmluZWQoYik/YjowKTsKICAgICAgICB9LAogICAgJyonOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpKmIoc2VsZiwgbG9jYWxzKTt9LAogICAgJy8nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpL2Ioc2VsZiwgbG9jYWxzKTt9LAogICAgJyUnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpJWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJz09PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpPT09YihzZWxmLCBsb2NhbHMpO30sCiAgICAnIT09JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpe3JldHVybiBhKHNlbGYsIGxvY2FscykhPT1iKHNlbGYsIGxvY2Fscyk7fSwKICAgICc9PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk9PWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJyE9JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSE9YihzZWxmLCBsb2NhbHMpO30sCiAgICAnPCc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk8YihzZWxmLCBsb2NhbHMpO30sCiAgICAnPic6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk+YihzZWxmLCBsb2NhbHMpO30sCiAgICAnPD0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpPD1iKHNlbGYsIGxvY2Fscyk7fSwKICAgICc+PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk+PWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJyYmJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSYmYihzZWxmLCBsb2NhbHMpO30sCiAgICAnfHwnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpfHxiKHNlbGYsIGxvY2Fscyk7fSwKICAgICchJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEpe3JldHVybiAhYShzZWxmLCBsb2NhbHMpO30sCgogICAgLy9Ub2tlbml6ZWQgYXMgb3BlcmF0b3JzIGJ1dCBwYXJzZWQgYXMgYXNzaWdubWVudC9maWx0ZXJzCiAgICAnPSc6dHJ1ZSwKICAgICd8Jzp0cnVlCn0pOwp2YXIgRVNDQVBFID0geyJuIjoiXG4iLCAiZiI6IlxmIiwgInIiOiJcciIsICJ0IjoiXHQiLCAidiI6Ilx2IiwgIiciOiInIiwgJyInOiciJ307CgoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCgovKioKICogQGNvbnN0cnVjdG9yCiAqLwp2YXIgTGV4ZXIgPSBmdW5jdGlvbiAob3B0aW9ucykgewogIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7Cn07CgpMZXhlci5wcm90b3R5cGUgPSB7CiAgY29uc3RydWN0b3I6IExleGVyLAoKICBsZXg6IGZ1bmN0aW9uICh0ZXh0KSB7CiAgICB0aGlzLnRleHQgPSB0ZXh0OwogICAgdGhpcy5pbmRleCA9IDA7CiAgICB0aGlzLmNoID0gdW5kZWZpbmVkOwogICAgdGhpcy50b2tlbnMgPSBbXTsKCiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHsKICAgICAgdGhpcy5jaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7CiAgICAgIGlmICh0aGlzLmlzKCciXCcnKSkgewogICAgICAgIHRoaXMucmVhZFN0cmluZyh0aGlzLmNoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmlzTnVtYmVyKHRoaXMuY2gpIHx8IHRoaXMuaXMoJy4nKSAmJiB0aGlzLmlzTnVtYmVyKHRoaXMucGVlaygpKSkgewogICAgICAgIHRoaXMucmVhZE51bWJlcigpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJZGVudCh0aGlzLmNoKSkgewogICAgICAgIHRoaXMucmVhZElkZW50KCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5pcygnKCl7fVtdLiw7Oj8nKSkgewogICAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsCiAgICAgICAgICB0ZXh0OiB0aGlzLmNoCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5pbmRleCsrOwogICAgICB9IGVsc2UgaWYgKHRoaXMuaXNXaGl0ZXNwYWNlKHRoaXMuY2gpKSB7CiAgICAgICAgdGhpcy5pbmRleCsrOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBjaDIgPSB0aGlzLmNoICsgdGhpcy5wZWVrKCk7CiAgICAgICAgdmFyIGNoMyA9IGNoMiArIHRoaXMucGVlaygyKTsKICAgICAgICB2YXIgZm4gPSBPUEVSQVRPUlNbdGhpcy5jaF07CiAgICAgICAgdmFyIGZuMiA9IE9QRVJBVE9SU1tjaDJdOwogICAgICAgIHZhciBmbjMgPSBPUEVSQVRPUlNbY2gzXTsKICAgICAgICBpZiAoZm4zKSB7CiAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtpbmRleDogdGhpcy5pbmRleCwgdGV4dDogY2gzLCBmbjogZm4zfSk7CiAgICAgICAgICB0aGlzLmluZGV4ICs9IDM7CiAgICAgICAgfSBlbHNlIGlmIChmbjIpIHsKICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2goe2luZGV4OiB0aGlzLmluZGV4LCB0ZXh0OiBjaDIsIGZuOiBmbjJ9KTsKICAgICAgICAgIHRoaXMuaW5kZXggKz0gMjsKICAgICAgICB9IGVsc2UgaWYgKGZuKSB7CiAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHsKICAgICAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsCiAgICAgICAgICAgIHRleHQ6IHRoaXMuY2gsCiAgICAgICAgICAgIGZuOiBmbgogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLmluZGV4ICs9IDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignVW5leHBlY3RlZCBuZXh0IGNoYXJhY3RlciAnLCB0aGlzLmluZGV4LCB0aGlzLmluZGV4ICsgMSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpcy50b2tlbnM7CiAgfSwKCiAgaXM6IGZ1bmN0aW9uKGNoYXJzKSB7CiAgICByZXR1cm4gY2hhcnMuaW5kZXhPZih0aGlzLmNoKSAhPT0gLTE7CiAgfSwKCiAgcGVlazogZnVuY3Rpb24oaSkgewogICAgdmFyIG51bSA9IGkgfHwgMTsKICAgIHJldHVybiAodGhpcy5pbmRleCArIG51bSA8IHRoaXMudGV4dC5sZW5ndGgpID8gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4ICsgbnVtKSA6IGZhbHNlOwogIH0sCgogIGlzTnVtYmVyOiBmdW5jdGlvbihjaCkgewogICAgcmV0dXJuICgnMCcgPD0gY2ggJiYgY2ggPD0gJzknKTsKICB9LAoKICBpc1doaXRlc3BhY2U6IGZ1bmN0aW9uKGNoKSB7CiAgICAvLyBJRSB0cmVhdHMgbm9uLWJyZWFraW5nIHNwYWNlIGFzIFx1MDBBMAogICAgcmV0dXJuIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXHInIHx8IGNoID09PSAnXHQnIHx8CiAgICAgICAgICAgIGNoID09PSAnXG4nIHx8IGNoID09PSAnXHYnIHx8IGNoID09PSAnXHUwMEEwJyk7CiAgfSwKCiAgaXNJZGVudDogZnVuY3Rpb24oY2gpIHsKICAgIHJldHVybiAoJ2EnIDw9IGNoICYmIGNoIDw9ICd6JyB8fAogICAgICAgICAgICAnQScgPD0gY2ggJiYgY2ggPD0gJ1onIHx8CiAgICAgICAgICAgICdfJyA9PT0gY2ggfHwgY2ggPT09ICckJyk7CiAgfSwKCiAgaXNFeHBPcGVyYXRvcjogZnVuY3Rpb24oY2gpIHsKICAgIHJldHVybiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnIHx8IHRoaXMuaXNOdW1iZXIoY2gpKTsKICB9LAoKICB0aHJvd0Vycm9yOiBmdW5jdGlvbihlcnJvciwgc3RhcnQsIGVuZCkgewogICAgZW5kID0gZW5kIHx8IHRoaXMuaW5kZXg7CiAgICB2YXIgY29sU3RyID0gKGlzRGVmaW5lZChzdGFydCkKICAgICAgICAgICAgPyAncyAnICsgc3RhcnQgKyAgJy0nICsgdGhpcy5pbmRleCArICcgWycgKyB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpICsgJ10nCiAgICAgICAgICAgIDogJyAnICsgZW5kKTsKICAgIHRocm93ICRwYXJzZU1pbkVycignbGV4ZXJyJywgJ0xleGVyIEVycm9yOiB7MH0gYXQgY29sdW1uezF9IGluIGV4cHJlc3Npb24gW3syfV0uJywKICAgICAgICBlcnJvciwgY29sU3RyLCB0aGlzLnRleHQpOwogIH0sCgogIHJlYWROdW1iZXI6IGZ1bmN0aW9uKCkgewogICAgdmFyIG51bWJlciA9ICcnOwogICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDsKICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkgewogICAgICB2YXIgY2ggPSBsb3dlcmNhc2UodGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KSk7CiAgICAgIGlmIChjaCA9PSAnLicgfHwgdGhpcy5pc051bWJlcihjaCkpIHsKICAgICAgICBudW1iZXIgKz0gY2g7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHBlZWtDaCA9IHRoaXMucGVlaygpOwogICAgICAgIGlmIChjaCA9PSAnZScgJiYgdGhpcy5pc0V4cE9wZXJhdG9yKHBlZWtDaCkpIHsKICAgICAgICAgIG51bWJlciArPSBjaDsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiYKICAgICAgICAgICAgcGVla0NoICYmIHRoaXMuaXNOdW1iZXIocGVla0NoKSAmJgogICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PSAnZScpIHsKICAgICAgICAgIG51bWJlciArPSBjaDsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiYKICAgICAgICAgICAgKCFwZWVrQ2ggfHwgIXRoaXMuaXNOdW1iZXIocGVla0NoKSkgJiYKICAgICAgICAgICAgbnVtYmVyLmNoYXJBdChudW1iZXIubGVuZ3RoIC0gMSkgPT0gJ2UnKSB7CiAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0ludmFsaWQgZXhwb25lbnQnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuaW5kZXgrKzsKICAgIH0KICAgIG51bWJlciA9IDEgKiBudW1iZXI7CiAgICB0aGlzLnRva2Vucy5wdXNoKHsKICAgICAgaW5kZXg6IHN0YXJ0LAogICAgICB0ZXh0OiBudW1iZXIsCiAgICAgIGNvbnN0YW50OiB0cnVlLAogICAgICBmbjogZnVuY3Rpb24oKSB7IHJldHVybiBudW1iZXI7IH0KICAgIH0pOwogIH0sCgogIHJlYWRJZGVudDogZnVuY3Rpb24oKSB7CiAgICB2YXIgZXhwcmVzc2lvbiA9IHRoaXMudGV4dDsKCiAgICB2YXIgaWRlbnQgPSAnJzsKICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7CgogICAgdmFyIGxhc3REb3QsIHBlZWtJbmRleCwgbWV0aG9kTmFtZSwgY2g7CgogICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7CiAgICAgIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTsKICAgICAgaWYgKGNoID09PSAnLicgfHwgdGhpcy5pc0lkZW50KGNoKSB8fCB0aGlzLmlzTnVtYmVyKGNoKSkgewogICAgICAgIGlmIChjaCA9PT0gJy4nKSBsYXN0RG90ID0gdGhpcy5pbmRleDsKICAgICAgICBpZGVudCArPSBjaDsKICAgICAgfSBlbHNlIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICB0aGlzLmluZGV4Kys7CiAgICB9CgogICAgLy9jaGVjayBpZiB0aGUgaWRlbnRpZmllciBlbmRzIHdpdGggLiBhbmQgaWYgc28gbW92ZSBiYWNrIG9uZSBjaGFyCiAgICBpZiAobGFzdERvdCAmJiBpZGVudFtpZGVudC5sZW5ndGggLSAxXSA9PT0gJy4nKSB7CiAgICAgIHRoaXMuaW5kZXgtLTsKICAgICAgaWRlbnQgPSBpZGVudC5zbGljZSgwLCAtMSk7CiAgICAgIGxhc3REb3QgPSBpZGVudC5sYXN0SW5kZXhPZignLicpOwogICAgICBpZiAobGFzdERvdCA9PT0gLTEpIHsKICAgICAgICBsYXN0RG90ID0gdW5kZWZpbmVkOwogICAgICB9CiAgICB9CgogICAgLy9jaGVjayBpZiB0aGlzIGlzIG5vdCBhIG1ldGhvZCBpbnZvY2F0aW9uIGFuZCBpZiBpdCBpcyBiYWNrIG91dCB0byBsYXN0IGRvdAogICAgaWYgKGxhc3REb3QpIHsKICAgICAgcGVla0luZGV4ID0gdGhpcy5pbmRleDsKICAgICAgd2hpbGUgKHBlZWtJbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHsKICAgICAgICBjaCA9IHRoaXMudGV4dC5jaGFyQXQocGVla0luZGV4KTsKICAgICAgICBpZiAoY2ggPT09ICcoJykgewogICAgICAgICAgbWV0aG9kTmFtZSA9IGlkZW50LnN1YnN0cihsYXN0RG90IC0gc3RhcnQgKyAxKTsKICAgICAgICAgIGlkZW50ID0gaWRlbnQuc3Vic3RyKDAsIGxhc3REb3QgLSBzdGFydCk7CiAgICAgICAgICB0aGlzLmluZGV4ID0gcGVla0luZGV4OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmlzV2hpdGVzcGFjZShjaCkpIHsKICAgICAgICAgIHBlZWtJbmRleCsrOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICB0aGlzLnRva2Vucy5wdXNoKHsKICAgICAgaW5kZXg6IHN0YXJ0LAogICAgICB0ZXh0OiBpZGVudCwKICAgICAgZm46IENPTlNUQU5UU1tpZGVudF0gfHwgZ2V0dGVyRm4oaWRlbnQsIHRoaXMub3B0aW9ucywgZXhwcmVzc2lvbikKICAgIH0pOwoKICAgIGlmIChtZXRob2ROYW1lKSB7CiAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgIGluZGV4OiBsYXN0RG90LAogICAgICAgIHRleHQ6ICcuJwogICAgICB9KTsKICAgICAgdGhpcy50b2tlbnMucHVzaCh7CiAgICAgICAgaW5kZXg6IGxhc3REb3QgKyAxLAogICAgICAgIHRleHQ6IG1ldGhvZE5hbWUKICAgICAgfSk7CiAgICB9CiAgfSwKCiAgcmVhZFN0cmluZzogZnVuY3Rpb24ocXVvdGUpIHsKICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7CiAgICB0aGlzLmluZGV4Kys7CiAgICB2YXIgc3RyaW5nID0gJyc7CiAgICB2YXIgcmF3U3RyaW5nID0gcXVvdGU7CiAgICB2YXIgZXNjYXBlID0gZmFsc2U7CiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHsKICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTsKICAgICAgcmF3U3RyaW5nICs9IGNoOwogICAgICBpZiAoZXNjYXBlKSB7CiAgICAgICAgaWYgKGNoID09PSAndScpIHsKICAgICAgICAgIHZhciBoZXggPSB0aGlzLnRleHQuc3Vic3RyaW5nKHRoaXMuaW5kZXggKyAxLCB0aGlzLmluZGV4ICsgNSk7CiAgICAgICAgICBpZiAoIWhleC5tYXRjaCgvW1xkYS1mXXs0fS9pKSkKICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXHUnICsgaGV4ICsgJ10nKTsKICAgICAgICAgIHRoaXMuaW5kZXggKz0gNDsKICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwgMTYpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHJlcCA9IEVTQ0FQRVtjaF07CiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAocmVwIHx8IGNoKTsKICAgICAgICB9CiAgICAgICAgZXNjYXBlID0gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXCcpIHsKICAgICAgICBlc2NhcGUgPSB0cnVlOwogICAgICB9IGVsc2UgaWYgKGNoID09PSBxdW90ZSkgewogICAgICAgIHRoaXMuaW5kZXgrKzsKICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHsKICAgICAgICAgIGluZGV4OiBzdGFydCwKICAgICAgICAgIHRleHQ6IHJhd1N0cmluZywKICAgICAgICAgIHN0cmluZzogc3RyaW5nLAogICAgICAgICAgY29uc3RhbnQ6IHRydWUsCiAgICAgICAgICBmbjogZnVuY3Rpb24oKSB7IHJldHVybiBzdHJpbmc7IH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RyaW5nICs9IGNoOwogICAgICB9CiAgICAgIHRoaXMuaW5kZXgrKzsKICAgIH0KICAgIHRoaXMudGhyb3dFcnJvcignVW50ZXJtaW5hdGVkIHF1b3RlJywgc3RhcnQpOwogIH0KfTsKCgpmdW5jdGlvbiBpc0NvbnN0YW50KGV4cCkgewogIHJldHVybiBleHAuY29uc3RhbnQ7Cn0KCi8qKgogKiBAY29uc3RydWN0b3IKICovCnZhciBQYXJzZXIgPSBmdW5jdGlvbiAobGV4ZXIsICRmaWx0ZXIsIG9wdGlvbnMpIHsKICB0aGlzLmxleGVyID0gbGV4ZXI7CiAgdGhpcy4kZmlsdGVyID0gJGZpbHRlcjsKICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOwp9OwoKUGFyc2VyLlpFUk8gPSBleHRlbmQoZnVuY3Rpb24gKCkgewogIHJldHVybiAwOwp9LCB7CiAgc2hhcmVkR2V0dGVyOiB0cnVlLAogIGNvbnN0YW50OiB0cnVlCn0pOwoKUGFyc2VyLnByb3RvdHlwZSA9IHsKICBjb25zdHJ1Y3RvcjogUGFyc2VyLAoKICBwYXJzZTogZnVuY3Rpb24gKHRleHQpIHsKICAgIHRoaXMudGV4dCA9IHRleHQ7CiAgICB0aGlzLnRva2VucyA9IHRoaXMubGV4ZXIubGV4KHRleHQpOwoKICAgIHZhciB2YWx1ZSA9IHRoaXMuc3RhdGVtZW50cygpOwoKICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggIT09IDApIHsKICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBhbiB1bmV4cGVjdGVkIHRva2VuJywgdGhpcy50b2tlbnNbMF0pOwogICAgfQoKICAgIHZhbHVlLmxpdGVyYWwgPSAhIXZhbHVlLmxpdGVyYWw7CiAgICB2YWx1ZS5jb25zdGFudCA9ICEhdmFsdWUuY29uc3RhbnQ7CgogICAgcmV0dXJuIHZhbHVlOwogIH0sCgogIHByaW1hcnk6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBwcmltYXJ5OwogICAgaWYgKHRoaXMuZXhwZWN0KCcoJykpIHsKICAgICAgcHJpbWFyeSA9IHRoaXMuZmlsdGVyQ2hhaW4oKTsKICAgICAgdGhpcy5jb25zdW1lKCcpJyk7CiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCdbJykpIHsKICAgICAgcHJpbWFyeSA9IHRoaXMuYXJyYXlEZWNsYXJhdGlvbigpOwogICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdCgneycpKSB7CiAgICAgIHByaW1hcnkgPSB0aGlzLm9iamVjdCgpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoKTsKICAgICAgcHJpbWFyeSA9IHRva2VuLmZuOwogICAgICBpZiAoIXByaW1hcnkpIHsKICAgICAgICB0aGlzLnRocm93RXJyb3IoJ25vdCBhIHByaW1hcnkgZXhwcmVzc2lvbicsIHRva2VuKTsKICAgICAgfQogICAgICBpZiAodG9rZW4uY29uc3RhbnQpIHsKICAgICAgICBwcmltYXJ5LmNvbnN0YW50ID0gdHJ1ZTsKICAgICAgICBwcmltYXJ5LmxpdGVyYWwgPSB0cnVlOwogICAgICB9CiAgICB9CgogICAgdmFyIG5leHQsIGNvbnRleHQ7CiAgICB3aGlsZSAoKG5leHQgPSB0aGlzLmV4cGVjdCgnKCcsICdbJywgJy4nKSkpIHsKICAgICAgaWYgKG5leHQudGV4dCA9PT0gJygnKSB7CiAgICAgICAgcHJpbWFyeSA9IHRoaXMuZnVuY3Rpb25DYWxsKHByaW1hcnksIGNvbnRleHQpOwogICAgICAgIGNvbnRleHQgPSBudWxsOwogICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJ1snKSB7CiAgICAgICAgY29udGV4dCA9IHByaW1hcnk7CiAgICAgICAgcHJpbWFyeSA9IHRoaXMub2JqZWN0SW5kZXgocHJpbWFyeSk7CiAgICAgIH0gZWxzZSBpZiAobmV4dC50ZXh0ID09PSAnLicpIHsKICAgICAgICBjb250ZXh0ID0gcHJpbWFyeTsKICAgICAgICBwcmltYXJ5ID0gdGhpcy5maWVsZEFjY2VzcyhwcmltYXJ5KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0lNUE9TU0lCTEUnKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHByaW1hcnk7CiAgfSwKCiAgdGhyb3dFcnJvcjogZnVuY3Rpb24obXNnLCB0b2tlbikgewogICAgdGhyb3cgJHBhcnNlTWluRXJyKCdzeW50YXgnLAogICAgICAgICdTeW50YXggRXJyb3I6IFRva2VuIFwnezB9XCcgezF9IGF0IGNvbHVtbiB7Mn0gb2YgdGhlIGV4cHJlc3Npb24gW3szfV0gc3RhcnRpbmcgYXQgW3s0fV0uJywKICAgICAgICAgIHRva2VuLnRleHQsIG1zZywgKHRva2VuLmluZGV4ICsgMSksIHRoaXMudGV4dCwgdGhpcy50ZXh0LnN1YnN0cmluZyh0b2tlbi5pbmRleCkpOwogIH0sCgogIHBlZWtUb2tlbjogZnVuY3Rpb24oKSB7CiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID09PSAwKQogICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3Vlb2UnLCAnVW5leHBlY3RlZCBlbmQgb2YgZXhwcmVzc2lvbjogezB9JywgdGhpcy50ZXh0KTsKICAgIHJldHVybiB0aGlzLnRva2Vuc1swXTsKICB9LAoKICBwZWVrOiBmdW5jdGlvbihlMSwgZTIsIGUzLCBlNCkgewogICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA+IDApIHsKICAgICAgdmFyIHRva2VuID0gdGhpcy50b2tlbnNbMF07CiAgICAgIHZhciB0ID0gdG9rZW4udGV4dDsKICAgICAgaWYgKHQgPT09IGUxIHx8IHQgPT09IGUyIHx8IHQgPT09IGUzIHx8IHQgPT09IGU0IHx8CiAgICAgICAgICAoIWUxICYmICFlMiAmJiAhZTMgJiYgIWU0KSkgewogICAgICAgIHJldHVybiB0b2tlbjsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0sCgogIGV4cGVjdDogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpewogICAgdmFyIHRva2VuID0gdGhpcy5wZWVrKGUxLCBlMiwgZTMsIGU0KTsKICAgIGlmICh0b2tlbikgewogICAgICB0aGlzLnRva2Vucy5zaGlmdCgpOwogICAgICByZXR1cm4gdG9rZW47CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfSwKCiAgY29uc3VtZTogZnVuY3Rpb24oZTEpewogICAgaWYgKCF0aGlzLmV4cGVjdChlMSkpIHsKICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyB1bmV4cGVjdGVkLCBleHBlY3RpbmcgWycgKyBlMSArICddJywgdGhpcy5wZWVrKCkpOwogICAgfQogIH0sCgogIHVuYXJ5Rm46IGZ1bmN0aW9uKGZuLCByaWdodCkgewogICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VVbmFyeUZuKHNlbGYsIGxvY2FscykgewogICAgICByZXR1cm4gZm4oc2VsZiwgbG9jYWxzLCByaWdodCk7CiAgICB9LCB7CiAgICAgIGNvbnN0YW50OnJpZ2h0LmNvbnN0YW50LAogICAgICBpbnB1dHM6IFtyaWdodF0KICAgIH0pOwogIH0sCgogIGJpbmFyeUZuOiBmdW5jdGlvbihsZWZ0LCBmbiwgcmlnaHQsIGlzQnJhbmNoaW5nKSB7CiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRwYXJzZUJpbmFyeUZuKHNlbGYsIGxvY2FscykgewogICAgICByZXR1cm4gZm4oc2VsZiwgbG9jYWxzLCBsZWZ0LCByaWdodCk7CiAgICB9LCB7CiAgICAgIGNvbnN0YW50OiBsZWZ0LmNvbnN0YW50ICYmIHJpZ2h0LmNvbnN0YW50LAogICAgICBpbnB1dHM6ICFpc0JyYW5jaGluZyAmJiBbbGVmdCwgcmlnaHRdCiAgICB9KTsKICB9LAoKICBzdGF0ZW1lbnRzOiBmdW5jdGlvbigpIHsKICAgIHZhciBzdGF0ZW1lbnRzID0gW107CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID4gMCAmJiAhdGhpcy5wZWVrKCd9JywgJyknLCAnOycsICddJykpCiAgICAgICAgc3RhdGVtZW50cy5wdXNoKHRoaXMuZmlsdGVyQ2hhaW4oKSk7CiAgICAgIGlmICghdGhpcy5leHBlY3QoJzsnKSkgewogICAgICAgIC8vIG9wdGltaXplIGZvciB0aGUgY29tbW9uIGNhc2Ugd2hlcmUgdGhlcmUgaXMgb25seSBvbmUgc3RhdGVtZW50LgogICAgICAgIC8vIFRPRE8oc2l6ZSk6IG1heWJlIHdlIHNob3VsZCBub3Qgc3VwcG9ydCBtdWx0aXBsZSBzdGF0ZW1lbnRzPwogICAgICAgIHJldHVybiAoc3RhdGVtZW50cy5sZW5ndGggPT09IDEpCiAgICAgICAgICAgID8gc3RhdGVtZW50c1swXQogICAgICAgICAgICA6IGZ1bmN0aW9uICRwYXJzZVN0YXRlbWVudHMoc2VsZiwgbG9jYWxzKSB7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWU7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzdGF0ZW1lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgICAgICAgICAgdmFsdWUgPSBzdGF0ZW1lbnRzW2ldKHNlbGYsIGxvY2Fscyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgICAgfTsKICAgICAgfQogICAgfQogIH0sCgogIGZpbHRlckNoYWluOiBmdW5jdGlvbigpIHsKICAgIHZhciBsZWZ0ID0gdGhpcy5leHByZXNzaW9uKCk7CiAgICB2YXIgdG9rZW47CiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJ3wnKSkpIHsKICAgICAgbGVmdCA9IHRoaXMuZmlsdGVyKGxlZnQpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfSwKCiAgZmlsdGVyOiBmdW5jdGlvbihpbnB1dEZuKSB7CiAgICB2YXIgdG9rZW4gPSB0aGlzLmV4cGVjdCgpOwogICAgdmFyIGZuID0gdGhpcy4kZmlsdGVyKHRva2VuLnRleHQpOwogICAgdmFyIGFyZ3NGbjsKICAgIHZhciBhcmdzOwoKICAgIGlmICh0aGlzLnBlZWsoJzonKSkgewogICAgICBhcmdzRm4gPSBbXTsKICAgICAgYXJncyA9IFtdOyAvLyB3ZSBjYW4gc2FmZWx5IHJldXNlIHRoZSBhcnJheQogICAgICB3aGlsZSAodGhpcy5leHBlY3QoJzonKSkgewogICAgICAgIGFyZ3NGbi5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTsKICAgICAgfQogICAgfQoKICAgIHZhciBpbnB1dHMgPSBbaW5wdXRGbl0uY29uY2F0KGFyZ3NGbiB8fCBbXSk7CgogICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VGaWx0ZXIoc2VsZiwgbG9jYWxzKSB7CiAgICAgIHZhciBpbnB1dCA9IGlucHV0Rm4oc2VsZiwgbG9jYWxzKTsKICAgICAgaWYgKGFyZ3MpIHsKICAgICAgICBhcmdzWzBdID0gaW5wdXQ7CgogICAgICAgIHZhciBpID0gYXJnc0ZuLmxlbmd0aDsKICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICBhcmdzW2kgKyAxXSA9IGFyZ3NGbltpXShzZWxmLCBsb2NhbHMpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmbihpbnB1dCk7CiAgICB9LCB7CiAgICAgIGNvbnN0YW50OiAhZm4uJHN0YXRlZnVsICYmIGlucHV0cy5ldmVyeShpc0NvbnN0YW50KSwKICAgICAgaW5wdXRzOiAhZm4uJHN0YXRlZnVsICYmIGlucHV0cwogICAgfSk7CiAgfSwKCiAgZXhwcmVzc2lvbjogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5hc3NpZ25tZW50KCk7CiAgfSwKCiAgYXNzaWdubWVudDogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMudGVybmFyeSgpOwogICAgdmFyIHJpZ2h0OwogICAgdmFyIHRva2VuOwogICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc9JykpKSB7CiAgICAgIGlmICghbGVmdC5hc3NpZ24pIHsKICAgICAgICB0aGlzLnRocm93RXJyb3IoJ2ltcGxpZXMgYXNzaWdubWVudCBidXQgWycgKwogICAgICAgICAgICB0aGlzLnRleHQuc3Vic3RyaW5nKDAsIHRva2VuLmluZGV4KSArICddIGNhbiBub3QgYmUgYXNzaWduZWQgdG8nLCB0b2tlbik7CiAgICAgIH0KICAgICAgcmlnaHQgPSB0aGlzLnRlcm5hcnkoKTsKICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VBc3NpZ25tZW50KHNjb3BlLCBsb2NhbHMpIHsKICAgICAgICByZXR1cm4gbGVmdC5hc3NpZ24oc2NvcGUsIHJpZ2h0KHNjb3BlLCBsb2NhbHMpLCBsb2NhbHMpOwogICAgICB9LCB7CiAgICAgICAgaW5wdXRzOiBbbGVmdCwgcmlnaHRdCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfSwKCiAgdGVybmFyeTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMubG9naWNhbE9SKCk7CiAgICB2YXIgbWlkZGxlOwogICAgdmFyIHRva2VuOwogICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc/JykpKSB7CiAgICAgIG1pZGRsZSA9IHRoaXMuYXNzaWdubWVudCgpOwogICAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJzonKSkpIHsKICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLmFzc2lnbm1lbnQoKTsKCiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VUZXJuYXJ5KHNlbGYsIGxvY2Fscyl7CiAgICAgICAgICByZXR1cm4gbGVmdChzZWxmLCBsb2NhbHMpID8gbWlkZGxlKHNlbGYsIGxvY2FscykgOiByaWdodChzZWxmLCBsb2NhbHMpOwogICAgICAgIH0sIHsKICAgICAgICAgIGNvbnN0YW50OiBsZWZ0LmNvbnN0YW50ICYmIG1pZGRsZS5jb25zdGFudCAmJiByaWdodC5jb25zdGFudAogICAgICAgIH0pOwoKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnRocm93RXJyb3IoJ2V4cGVjdGVkIDonLCB0b2tlbik7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbGVmdDsKICB9LAoKICBsb2dpY2FsT1I6IGZ1bmN0aW9uKCkgewogICAgdmFyIGxlZnQgPSB0aGlzLmxvZ2ljYWxBTkQoKTsKICAgIHZhciB0b2tlbjsKICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnfHwnKSkpIHsKICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHRoaXMubG9naWNhbEFORCgpLCB0cnVlKTsKICAgIH0KICAgIHJldHVybiBsZWZ0OwogIH0sCgogIGxvZ2ljYWxBTkQ6IGZ1bmN0aW9uKCkgewogICAgdmFyIGxlZnQgPSB0aGlzLmVxdWFsaXR5KCk7CiAgICB2YXIgdG9rZW47CiAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJyYmJykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLmxvZ2ljYWxBTkQoKSwgdHJ1ZSk7CiAgICB9CiAgICByZXR1cm4gbGVmdDsKICB9LAoKICBlcXVhbGl0eTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMucmVsYXRpb25hbCgpOwogICAgdmFyIHRva2VuOwogICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc9PScsJyE9JywnPT09JywnIT09JykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLmVxdWFsaXR5KCkpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfSwKCiAgcmVsYXRpb25hbDogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMuYWRkaXRpdmUoKTsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPCcsICc+JywgJzw9JywgJz49JykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLnJlbGF0aW9uYWwoKSk7CiAgICB9CiAgICByZXR1cm4gbGVmdDsKICB9LAoKICBhZGRpdGl2ZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMubXVsdGlwbGljYXRpdmUoKTsKICAgIHZhciB0b2tlbjsKICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKycsJy0nKSkpIHsKICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHRoaXMubXVsdGlwbGljYXRpdmUoKSk7CiAgICB9CiAgICByZXR1cm4gbGVmdDsKICB9LAoKICBtdWx0aXBsaWNhdGl2ZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMudW5hcnkoKTsKICAgIHZhciB0b2tlbjsKICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKicsJy8nLCclJykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLnVuYXJ5KCkpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfSwKCiAgdW5hcnk6IGZ1bmN0aW9uKCkgewogICAgdmFyIHRva2VuOwogICAgaWYgKHRoaXMuZXhwZWN0KCcrJykpIHsKICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeSgpOwogICAgfSBlbHNlIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnLScpKSkgewogICAgICByZXR1cm4gdGhpcy5iaW5hcnlGbihQYXJzZXIuWkVSTywgdG9rZW4uZm4sIHRoaXMudW5hcnkoKSk7CiAgICB9IGVsc2UgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCchJykpKSB7CiAgICAgIHJldHVybiB0aGlzLnVuYXJ5Rm4odG9rZW4uZm4sIHRoaXMudW5hcnkoKSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gdGhpcy5wcmltYXJ5KCk7CiAgICB9CiAgfSwKCiAgZmllbGRBY2Nlc3M6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLnRleHQ7CiAgICB2YXIgZmllbGQgPSB0aGlzLmV4cGVjdCgpLnRleHQ7CiAgICB2YXIgZ2V0dGVyID0gZ2V0dGVyRm4oZmllbGQsIHRoaXMub3B0aW9ucywgZXhwcmVzc2lvbik7CgogICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VGaWVsZEFjY2VzcyhzY29wZSwgbG9jYWxzLCBzZWxmKSB7CiAgICAgIHJldHVybiBnZXR0ZXIoc2VsZiB8fCBvYmplY3Qoc2NvcGUsIGxvY2FscykpOwogICAgfSwgewogICAgICBhc3NpZ246IGZ1bmN0aW9uKHNjb3BlLCB2YWx1ZSwgbG9jYWxzKSB7CiAgICAgICAgdmFyIG8gPSBvYmplY3Qoc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgaWYgKCFvKSBvYmplY3QuYXNzaWduKHNjb3BlLCBvID0ge30pOwogICAgICAgIHJldHVybiBzZXR0ZXIobywgZmllbGQsIHZhbHVlLCBleHByZXNzaW9uKTsKICAgICAgfQogICAgfSk7CiAgfSwKCiAgb2JqZWN0SW5kZXg6IGZ1bmN0aW9uKG9iaikgewogICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLnRleHQ7CgogICAgdmFyIGluZGV4Rm4gPSB0aGlzLmV4cHJlc3Npb24oKTsKICAgIHRoaXMuY29uc3VtZSgnXScpOwoKICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gJHBhcnNlT2JqZWN0SW5kZXgoc2VsZiwgbG9jYWxzKSB7CiAgICAgIHZhciBvID0gb2JqKHNlbGYsIGxvY2FscyksCiAgICAgICAgICBpID0gaW5kZXhGbihzZWxmLCBsb2NhbHMpLAogICAgICAgICAgdjsKCiAgICAgIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGksIGV4cHJlc3Npb24pOwogICAgICBpZiAoIW8pIHJldHVybiB1bmRlZmluZWQ7CiAgICAgIHYgPSBlbnN1cmVTYWZlT2JqZWN0KG9baV0sIGV4cHJlc3Npb24pOwogICAgICByZXR1cm4gdjsKICAgIH0sIHsKICAgICAgYXNzaWduOiBmdW5jdGlvbihzZWxmLCB2YWx1ZSwgbG9jYWxzKSB7CiAgICAgICAgdmFyIGtleSA9IGVuc3VyZVNhZmVNZW1iZXJOYW1lKGluZGV4Rm4oc2VsZiwgbG9jYWxzKSwgZXhwcmVzc2lvbik7CiAgICAgICAgLy8gcHJldmVudCBvdmVyd3JpdGluZyBvZiBGdW5jdGlvbi5jb25zdHJ1Y3RvciB3aGljaCB3b3VsZCBicmVhayBlbnN1cmVTYWZlT2JqZWN0IGNoZWNrCiAgICAgICAgdmFyIG8gPSBlbnN1cmVTYWZlT2JqZWN0KG9iaihzZWxmLCBsb2NhbHMpLCBleHByZXNzaW9uKTsKICAgICAgICBpZiAoIW8pIG9iai5hc3NpZ24oc2VsZiwgbyA9IHt9KTsKICAgICAgICByZXR1cm4gb1trZXldID0gdmFsdWU7CiAgICAgIH0KICAgIH0pOwogIH0sCgogIGZ1bmN0aW9uQ2FsbDogZnVuY3Rpb24oZm5HZXR0ZXIsIGNvbnRleHRHZXR0ZXIpIHsKICAgIHZhciBhcmdzRm4gPSBbXTsKICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICcpJykgewogICAgICBkbyB7CiAgICAgICAgYXJnc0ZuLnB1c2godGhpcy5leHByZXNzaW9uKCkpOwogICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTsKICAgIH0KICAgIHRoaXMuY29uc3VtZSgnKScpOwoKICAgIHZhciBleHByZXNzaW9uVGV4dCA9IHRoaXMudGV4dDsKICAgIC8vIHdlIGNhbiBzYWZlbHkgcmV1c2UgdGhlIGFycmF5IGFjcm9zcyBpbnZvY2F0aW9ucwogICAgdmFyIGFyZ3MgPSBhcmdzRm4ubGVuZ3RoID8gW10gOiBudWxsOwoKICAgIHJldHVybiBmdW5jdGlvbiAkcGFyc2VGdW5jdGlvbkNhbGwoc2NvcGUsIGxvY2FscykgewogICAgICB2YXIgY29udGV4dCA9IGNvbnRleHRHZXR0ZXIgPyBjb250ZXh0R2V0dGVyKHNjb3BlLCBsb2NhbHMpIDogc2NvcGU7CiAgICAgIHZhciBmbiA9IGZuR2V0dGVyKHNjb3BlLCBsb2NhbHMsIGNvbnRleHQpIHx8IG5vb3A7CgogICAgICBpZiAoYXJncykgewogICAgICAgIHZhciBpID0gYXJnc0ZuLmxlbmd0aDsKICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICBhcmdzW2ldID0gZW5zdXJlU2FmZU9iamVjdChhcmdzRm5baV0oc2NvcGUsIGxvY2FscyksIGV4cHJlc3Npb25UZXh0KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGVuc3VyZVNhZmVPYmplY3QoY29udGV4dCwgZXhwcmVzc2lvblRleHQpOwogICAgICBlbnN1cmVTYWZlRnVuY3Rpb24oZm4sIGV4cHJlc3Npb25UZXh0KTsKCiAgICAgIC8vIElFIHN0dXBpZGl0eSEgKElFIGRvZXNuJ3QgaGF2ZSBhcHBseSBmb3Igc29tZSBuYXRpdmUgZnVuY3Rpb25zKQogICAgICB2YXIgdiA9IGZuLmFwcGx5CiAgICAgICAgICAgID8gZm4uYXBwbHkoY29udGV4dCwgYXJncykKICAgICAgICAgICAgOiBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTsKCiAgICAgIHJldHVybiBlbnN1cmVTYWZlT2JqZWN0KHYsIGV4cHJlc3Npb25UZXh0KTsKICAgIH07CiAgfSwKCiAgLy8gVGhpcyBpcyB1c2VkIHdpdGgganNvbiBhcnJheSBkZWNsYXJhdGlvbgogIGFycmF5RGVjbGFyYXRpb246IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbGVtZW50Rm5zID0gW107CiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnXScpIHsKICAgICAgZG8gewogICAgICAgIGlmICh0aGlzLnBlZWsoJ10nKSkgewogICAgICAgICAgLy8gU3VwcG9ydCB0cmFpbGluZyBjb21tYXMgcGVyIEVTNS4xLgogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIHZhciBlbGVtZW50Rm4gPSB0aGlzLmV4cHJlc3Npb24oKTsKICAgICAgICBlbGVtZW50Rm5zLnB1c2goZWxlbWVudEZuKTsKICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7CiAgICB9CiAgICB0aGlzLmNvbnN1bWUoJ10nKTsKCiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRwYXJzZUFycmF5TGl0ZXJhbChzZWxmLCBsb2NhbHMpIHsKICAgICAgdmFyIGFycmF5ID0gW107CiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGVsZW1lbnRGbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIGFycmF5LnB1c2goZWxlbWVudEZuc1tpXShzZWxmLCBsb2NhbHMpKTsKICAgICAgfQogICAgICByZXR1cm4gYXJyYXk7CiAgICB9LCB7CiAgICAgIGxpdGVyYWw6IHRydWUsCiAgICAgIGNvbnN0YW50OiBlbGVtZW50Rm5zLmV2ZXJ5KGlzQ29uc3RhbnQpLAogICAgICBpbnB1dHM6IGVsZW1lbnRGbnMKICAgIH0pOwogIH0sCgogIG9iamVjdDogZnVuY3Rpb24gKCkgewogICAgdmFyIGtleXMgPSBbXSwgdmFsdWVGbnMgPSBbXTsKICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICd9JykgewogICAgICBkbyB7CiAgICAgICAgaWYgKHRoaXMucGVlaygnfScpKSB7CiAgICAgICAgICAvLyBTdXBwb3J0IHRyYWlsaW5nIGNvbW1hcyBwZXIgRVM1LjEuCiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoKTsKICAgICAgICBrZXlzLnB1c2godG9rZW4uc3RyaW5nIHx8IHRva2VuLnRleHQpOwogICAgICAgIHRoaXMuY29uc3VtZSgnOicpOwogICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZXhwcmVzc2lvbigpOwogICAgICAgIHZhbHVlRm5zLnB1c2godmFsdWUpOwogICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTsKICAgIH0KICAgIHRoaXMuY29uc3VtZSgnfScpOwoKICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gJHBhcnNlT2JqZWN0TGl0ZXJhbChzZWxmLCBsb2NhbHMpIHsKICAgICAgdmFyIG9iamVjdCA9IHt9OwogICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB2YWx1ZUZucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgb2JqZWN0W2tleXNbaV1dID0gdmFsdWVGbnNbaV0oc2VsZiwgbG9jYWxzKTsKICAgICAgfQogICAgICByZXR1cm4gb2JqZWN0OwogICAgfSwgewogICAgICBsaXRlcmFsOiB0cnVlLAogICAgICBjb25zdGFudDogdmFsdWVGbnMuZXZlcnkoaXNDb25zdGFudCksCiAgICAgIGlucHV0czogdmFsdWVGbnMKICAgIH0pOwogIH0KfTsKCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBQYXJzZXIgaGVscGVyIGZ1bmN0aW9ucwovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKZnVuY3Rpb24gc2V0dGVyKG9iaiwgcGF0aCwgc2V0VmFsdWUsIGZ1bGxFeHApIHsKICBlbnN1cmVTYWZlT2JqZWN0KG9iaiwgZnVsbEV4cCk7CgogIHZhciBlbGVtZW50ID0gcGF0aC5zcGxpdCgnLicpLCBrZXk7CiAgZm9yICh2YXIgaSA9IDA7IGVsZW1lbnQubGVuZ3RoID4gMTsgaSsrKSB7CiAgICBrZXkgPSBlbnN1cmVTYWZlTWVtYmVyTmFtZShlbGVtZW50LnNoaWZ0KCksIGZ1bGxFeHApOwogICAgdmFyIHByb3BlcnR5T2JqID0gZW5zdXJlU2FmZU9iamVjdChvYmpba2V5XSwgZnVsbEV4cCk7CiAgICBpZiAoIXByb3BlcnR5T2JqKSB7CiAgICAgIHByb3BlcnR5T2JqID0ge307CiAgICAgIG9ialtrZXldID0gcHJvcGVydHlPYmo7CiAgICB9CiAgICBvYmogPSBwcm9wZXJ0eU9iajsKICB9CiAga2V5ID0gZW5zdXJlU2FmZU1lbWJlck5hbWUoZWxlbWVudC5zaGlmdCgpLCBmdWxsRXhwKTsKICBlbnN1cmVTYWZlT2JqZWN0KG9ialtrZXldLCBmdWxsRXhwKTsKICBvYmpba2V5XSA9IHNldFZhbHVlOwogIHJldHVybiBzZXRWYWx1ZTsKfQoKdmFyIGdldHRlckZuQ2FjaGUgPSBjcmVhdGVNYXAoKTsKCi8qKgogKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgIkJsYWNrIEhvbGUiIHZhcmlhbnQgZnJvbToKICogLSBodHRwOi8vanNwZXJmLmNvbS9hbmd1bGFyanMtcGFyc2UtZ2V0dGVyLzQKICogLSBodHRwOi8vanNwZXJmLmNvbS9wYXRoLWV2YWx1YXRpb24tc2ltcGxpZmllZC83CiAqLwpmdW5jdGlvbiBjc3BTYWZlR2V0dGVyRm4oa2V5MCwga2V5MSwga2V5Miwga2V5Mywga2V5NCwgZnVsbEV4cCkgewogIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGtleTAsIGZ1bGxFeHApOwogIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGtleTEsIGZ1bGxFeHApOwogIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGtleTIsIGZ1bGxFeHApOwogIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGtleTMsIGZ1bGxFeHApOwogIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGtleTQsIGZ1bGxFeHApOwoKICByZXR1cm4gZnVuY3Rpb24gY3NwU2FmZUdldHRlcihzY29wZSwgbG9jYWxzKSB7CiAgICB2YXIgcGF0aFZhbCA9IChsb2NhbHMgJiYgbG9jYWxzLmhhc093blByb3BlcnR5KGtleTApKSA/IGxvY2FscyA6IHNjb3BlOwoKICAgIGlmIChwYXRoVmFsID09IG51bGwpIHJldHVybiBwYXRoVmFsOwogICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5MF07CgogICAgaWYgKCFrZXkxKSByZXR1cm4gcGF0aFZhbDsKICAgIGlmIChwYXRoVmFsID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7CiAgICBwYXRoVmFsID0gcGF0aFZhbFtrZXkxXTsKCiAgICBpZiAoIWtleTIpIHJldHVybiBwYXRoVmFsOwogICAgaWYgKHBhdGhWYWwgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDsKICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTJdOwoKICAgIGlmICgha2V5MykgcmV0dXJuIHBhdGhWYWw7CiAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkOwogICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5M107CgogICAgaWYgKCFrZXk0KSByZXR1cm4gcGF0aFZhbDsKICAgIGlmIChwYXRoVmFsID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7CiAgICBwYXRoVmFsID0gcGF0aFZhbFtrZXk0XTsKCiAgICByZXR1cm4gcGF0aFZhbDsKICB9Owp9CgpmdW5jdGlvbiBnZXR0ZXJGbihwYXRoLCBvcHRpb25zLCBmdWxsRXhwKSB7CiAgdmFyIGZuID0gZ2V0dGVyRm5DYWNoZVtwYXRoXTsKCiAgaWYgKGZuKSByZXR1cm4gZm47CgogIHZhciBwYXRoS2V5cyA9IHBhdGguc3BsaXQoJy4nKSwKICAgICAgcGF0aEtleXNMZW5ndGggPSBwYXRoS2V5cy5sZW5ndGg7CgogIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXJqcy1wYXJzZS1nZXR0ZXIvNgogIGlmIChvcHRpb25zLmNzcCkgewogICAgaWYgKHBhdGhLZXlzTGVuZ3RoIDwgNikgewogICAgICBmbiA9IGNzcFNhZmVHZXR0ZXJGbihwYXRoS2V5c1swXSwgcGF0aEtleXNbMV0sIHBhdGhLZXlzWzJdLCBwYXRoS2V5c1szXSwgcGF0aEtleXNbNF0sIGZ1bGxFeHApOwogICAgfSBlbHNlIHsKICAgICAgZm4gPSBmdW5jdGlvbiBjc3BTYWZlR2V0dGVyKHNjb3BlLCBsb2NhbHMpIHsKICAgICAgICB2YXIgaSA9IDAsIHZhbDsKICAgICAgICBkbyB7CiAgICAgICAgICB2YWwgPSBjc3BTYWZlR2V0dGVyRm4ocGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoS2V5c1tpKytdLCBmdWxsRXhwKShzY29wZSwgbG9jYWxzKTsKCiAgICAgICAgICBsb2NhbHMgPSB1bmRlZmluZWQ7IC8vIGNsZWFyIGFmdGVyIGZpcnN0IGl0ZXJhdGlvbgogICAgICAgICAgc2NvcGUgPSB2YWw7CiAgICAgICAgfSB3aGlsZSAoaSA8IHBhdGhLZXlzTGVuZ3RoKTsKICAgICAgICByZXR1cm4gdmFsOwogICAgICB9OwogICAgfQogIH0gZWxzZSB7CiAgICB2YXIgY29kZSA9ICcnOwogICAgZm9yRWFjaChwYXRoS2V5cywgZnVuY3Rpb24oa2V5LCBpbmRleCkgewogICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXksIGZ1bGxFeHApOwogICAgICBjb2RlICs9ICdpZihzID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG4nICsKICAgICAgICAgICAgICAncz0nKyAoaW5kZXgKICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHNpbXBseSBkZXJlZmVyZW5jZSAncycgb24gYW55IC5kb3Qgbm90YXRpb24KICAgICAgICAgICAgICAgICAgICAgID8gJ3MnCiAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgaWYgd2UgYXJlIGZpcnN0IHRoZW4gd2UgY2hlY2sgbG9jYWxzIGZpcnN0LCBhbmQgaWYgc28gcmVhZCBpdCBmaXJzdAogICAgICAgICAgICAgICAgICAgICAgOiAnKChsJiZsLmhhc093blByb3BlcnR5KCInICsga2V5ICsgJyIpKT9sOnMpJykgKyAnLicgKyBrZXkgKyAnO1xuJzsKICAgIH0pOwogICAgY29kZSArPSAncmV0dXJuIHM7JzsKCiAgICAvKiBqc2hpbnQgLVcwNTQgKi8KICAgIHZhciBldmFsZWRGbkdldHRlciA9IG5ldyBGdW5jdGlvbigncycsICdsJywgY29kZSk7IC8vIHM9c2NvcGUsIGw9bG9jYWxzCiAgICAvKiBqc2hpbnQgK1cwNTQgKi8KICAgIGV2YWxlZEZuR2V0dGVyLnRvU3RyaW5nID0gdmFsdWVGbihjb2RlKTsKCiAgICBmbiA9IGV2YWxlZEZuR2V0dGVyOwogIH0KCiAgZm4uc2hhcmVkR2V0dGVyID0gdHJ1ZTsKICBmbi5hc3NpZ24gPSBmdW5jdGlvbihzZWxmLCB2YWx1ZSkgewogICAgcmV0dXJuIHNldHRlcihzZWxmLCBwYXRoLCB2YWx1ZSwgcGF0aCk7CiAgfTsKICBnZXR0ZXJGbkNhY2hlW3BhdGhdID0gZm47CiAgcmV0dXJuIGZuOwp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRwYXJzZQogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICoKICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uCiAqCiAqIGBgYGpzCiAqICAgdmFyIGdldHRlciA9ICRwYXJzZSgndXNlci5uYW1lJyk7CiAqICAgdmFyIHNldHRlciA9IGdldHRlci5hc3NpZ247CiAqICAgdmFyIGNvbnRleHQgPSB7dXNlcjp7bmFtZTonYW5ndWxhcid9fTsKICogICB2YXIgbG9jYWxzID0ge3VzZXI6e25hbWU6J2xvY2FsJ319OwogKgogKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCkpLnRvRXF1YWwoJ2FuZ3VsYXInKTsKICogICBzZXR0ZXIoY29udGV4dCwgJ25ld1ZhbHVlJyk7CiAqICAgZXhwZWN0KGNvbnRleHQudXNlci5uYW1lKS50b0VxdWFsKCduZXdWYWx1ZScpOwogKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCwgbG9jYWxzKSkudG9FcXVhbCgnbG9jYWwnKTsKICogYGBgCiAqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuCiAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAqCiAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3MKICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4KICogICAgICBgY29udGV4dGAuCiAqCiAqICAgIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBhbHNvIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6CiAqICAgICAgKiBgbGl0ZXJhbGAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB3aGV0aGVyIHRoZSBleHByZXNzaW9uJ3MgdG9wLWxldmVsIG5vZGUgaXMgYSBKYXZhU2NyaXB0CiAqICAgICAgICBsaXRlcmFsLgogKiAgICAgICogYGNvbnN0YW50YCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgbWFkZSBlbnRpcmVseSBvZiBKYXZhU2NyaXB0CiAqICAgICAgICBjb25zdGFudCBsaXRlcmFscy4KICogICAgICAqIGBhc3NpZ25gIOKAkyBgez9mdW5jdGlvbihjb250ZXh0LCB2YWx1ZSl9YCDigJMgaWYgdGhlIGV4cHJlc3Npb24gaXMgYXNzaWduYWJsZSwgdGhpcyB3aWxsIGJlCiAqICAgICAgICBzZXQgdG8gYSBmdW5jdGlvbiB0byBjaGFuZ2UgaXRzIHZhbHVlIG9uIHRoZSBnaXZlbiBjb250ZXh0LgogKgogKi8KCgovKioKICogQG5nZG9jIHByb3ZpZGVyCiAqIEBuYW1lICRwYXJzZVByb3ZpZGVyCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBgJHBhcnNlUHJvdmlkZXJgIGNhbiBiZSB1c2VkIGZvciBjb25maWd1cmluZyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUge0BsaW5rIG5nLiRwYXJzZSAkcGFyc2V9CiAqICBzZXJ2aWNlLgogKi8KZnVuY3Rpb24gJFBhcnNlUHJvdmlkZXIoKSB7CiAgdmFyIGNhY2hlID0gY3JlYXRlTWFwKCk7CgogIHZhciAkcGFyc2VPcHRpb25zID0gewogICAgY3NwOiBmYWxzZQogIH07CgoKICB0aGlzLiRnZXQgPSBbJyRmaWx0ZXInLCAnJHNuaWZmZXInLCBmdW5jdGlvbigkZmlsdGVyLCAkc25pZmZlcikgewogICAgJHBhcnNlT3B0aW9ucy5jc3AgPSAkc25pZmZlci5jc3A7CgogICAgZnVuY3Rpb24gd3JhcFNoYXJlZEV4cHJlc3Npb24oZXhwKSB7CiAgICAgIHZhciB3cmFwcGVkID0gZXhwOwoKICAgICAgaWYgKGV4cC5zaGFyZWRHZXR0ZXIpIHsKICAgICAgICB3cmFwcGVkID0gZnVuY3Rpb24gJHBhcnNlV3JhcHBlcihzZWxmLCBsb2NhbHMpIHsKICAgICAgICAgIHJldHVybiBleHAoc2VsZiwgbG9jYWxzKTsKICAgICAgICB9OwogICAgICAgIHdyYXBwZWQubGl0ZXJhbCA9IGV4cC5saXRlcmFsOwogICAgICAgIHdyYXBwZWQuY29uc3RhbnQgPSBleHAuY29uc3RhbnQ7CiAgICAgICAgd3JhcHBlZC5hc3NpZ24gPSBleHAuYXNzaWduOwogICAgICB9CgogICAgICByZXR1cm4gd3JhcHBlZDsKICAgIH0KCiAgICByZXR1cm4gZnVuY3Rpb24gJHBhcnNlKGV4cCwgaW50ZXJjZXB0b3JGbikgewogICAgICB2YXIgcGFyc2VkRXhwcmVzc2lvbiwgb25lVGltZSwgY2FjaGVLZXk7CgogICAgICBzd2l0Y2ggKHR5cGVvZiBleHApIHsKICAgICAgICBjYXNlICdzdHJpbmcnOgogICAgICAgICAgY2FjaGVLZXkgPSBleHAgPSBleHAudHJpbSgpOwoKICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24gPSBjYWNoZVtjYWNoZUtleV07CgogICAgICAgICAgaWYgKCFwYXJzZWRFeHByZXNzaW9uKSB7CiAgICAgICAgICAgIGlmIChleHAuY2hhckF0KDApID09PSAnOicgJiYgZXhwLmNoYXJBdCgxKSA9PT0gJzonKSB7CiAgICAgICAgICAgICAgb25lVGltZSA9IHRydWU7CiAgICAgICAgICAgICAgZXhwID0gZXhwLnN1YnN0cmluZygyKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGxleGVyID0gbmV3IExleGVyKCRwYXJzZU9wdGlvbnMpOwogICAgICAgICAgICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihsZXhlciwgJGZpbHRlciwgJHBhcnNlT3B0aW9ucyk7CiAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24gPSBwYXJzZXIucGFyc2UoZXhwKTsKCiAgICAgICAgICAgIGlmIChwYXJzZWRFeHByZXNzaW9uLmNvbnN0YW50KSB7CiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBjb25zdGFudFdhdGNoRGVsZWdhdGU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAob25lVGltZSkgewogICAgICAgICAgICAgIC8vb25lVGltZSBpcyBub3QgcGFydCBvZiB0aGUgZXhwIHBhc3NlZCB0byB0aGUgUGFyc2VyIHNvIHdlIG1heSBoYXZlIHRvCiAgICAgICAgICAgICAgLy93cmFwIHRoZSBwYXJzZWRFeHByZXNzaW9uIGJlZm9yZSBhZGRpbmcgYSAkJHdhdGNoRGVsZWdhdGUKICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gd3JhcFNoYXJlZEV4cHJlc3Npb24ocGFyc2VkRXhwcmVzc2lvbik7CiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBwYXJzZWRFeHByZXNzaW9uLmxpdGVyYWwgPwogICAgICAgICAgICAgICAgb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlIDogb25lVGltZVdhdGNoRGVsZWdhdGU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMpIHsKICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IGlucHV0c1dhdGNoRGVsZWdhdGU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IHBhcnNlZEV4cHJlc3Npb247CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3IocGFyc2VkRXhwcmVzc2lvbiwgaW50ZXJjZXB0b3JGbik7CgogICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzoKICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihleHAsIGludGVyY2VwdG9yRm4pOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKG5vb3AsIGludGVyY2VwdG9yRm4pOwogICAgICB9CiAgICB9OwoKICAgIGZ1bmN0aW9uIGNvbGxlY3RFeHByZXNzaW9uSW5wdXRzKGlucHV0cywgbGlzdCkgewogICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dHMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIHZhciBpbnB1dCA9IGlucHV0c1tpXTsKICAgICAgICBpZiAoIWlucHV0LmNvbnN0YW50KSB7CiAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRzKSB7CiAgICAgICAgICAgIGNvbGxlY3RFeHByZXNzaW9uSW5wdXRzKGlucHV0LmlucHV0cywgbGlzdCk7CiAgICAgICAgICB9IGVsc2UgaWYgKGxpc3QuaW5kZXhPZihpbnB1dCkgPT09IC0xKSB7IC8vIFRPRE8ocGVyZikgY2FuIHdlIGRvIGJldHRlcj8KICAgICAgICAgICAgbGlzdC5wdXNoKGlucHV0KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBsaXN0OwogICAgfQoKICAgIGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3VmFsdWUsIG9sZFZhbHVlT2ZWYWx1ZSkgewoKICAgICAgaWYgKG5ld1ZhbHVlID09IG51bGwgfHwgb2xkVmFsdWVPZlZhbHVlID09IG51bGwpIHsgLy8gbnVsbC91bmRlZmluZWQKICAgICAgICByZXR1cm4gbmV3VmFsdWUgPT09IG9sZFZhbHVlT2ZWYWx1ZTsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcpIHsKCiAgICAgICAgLy8gYXR0ZW1wdCB0byBjb252ZXJ0IHRoZSB2YWx1ZSB0byBhIHByaW1pdGl2ZSB0eXBlCiAgICAgICAgLy8gVE9ETyhkb2NzKTogYWRkIGEgbm90ZSB0byBkb2NzIHRoYXQgYnkgaW1wbGVtZW50aW5nIHZhbHVlT2YgZXZlbiBvYmplY3RzIGFuZCBhcnJheXMgY2FuCiAgICAgICAgLy8gICAgICAgICAgICAgYmUgY2hlYXBseSBkaXJ0eS1jaGVja2VkCiAgICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZS52YWx1ZU9mKCk7CgogICAgICAgIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAvLyBvYmplY3RzL2FycmF5cyBhcmUgbm90IHN1cHBvcnRlZCAtIGRlZXAtd2F0Y2hpbmcgdGhlbSB3b3VsZCBiZSB0b28gZXhwZW5zaXZlCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICAvLyBmYWxsLXRocm91Z2ggdG8gdGhlIHByaW1pdGl2ZSBlcXVhbGl0eSBjaGVjawogICAgICB9CgogICAgICAvL1ByaW1pdGl2ZSBvciBOYU4KICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBvbGRWYWx1ZU9mVmFsdWUgfHwgKG5ld1ZhbHVlICE9PSBuZXdWYWx1ZSAmJiBvbGRWYWx1ZU9mVmFsdWUgIT09IG9sZFZhbHVlT2ZWYWx1ZSk7CiAgICB9CgogICAgZnVuY3Rpb24gaW5wdXRzV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7CiAgICAgIHZhciBpbnB1dEV4cHJlc3Npb25zID0gcGFyc2VkRXhwcmVzc2lvbi4kJGlucHV0cyB8fAogICAgICAgICAgICAgICAgICAgIChwYXJzZWRFeHByZXNzaW9uLiQkaW5wdXRzID0gY29sbGVjdEV4cHJlc3Npb25JbnB1dHMocGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMsIFtdKSk7CgogICAgICB2YXIgbGFzdFJlc3VsdDsKCiAgICAgIGlmIChpbnB1dEV4cHJlc3Npb25zLmxlbmd0aCA9PT0gMSkgewogICAgICAgIHZhciBvbGRJbnB1dFZhbHVlID0gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjazsgLy8gaW5pdCB0byBzb21ldGhpbmcgdW5pcXVlIHNvIHRoYXQgZXF1YWxzIGNoZWNrIGZhaWxzCiAgICAgICAgaW5wdXRFeHByZXNzaW9ucyA9IGlucHV0RXhwcmVzc2lvbnNbMF07CiAgICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBleHByZXNzaW9uSW5wdXRXYXRjaChzY29wZSkgewogICAgICAgICAgdmFyIG5ld0lucHV0VmFsdWUgPSBpbnB1dEV4cHJlc3Npb25zKHNjb3BlKTsKICAgICAgICAgIGlmICghZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdJbnB1dFZhbHVlLCBvbGRJbnB1dFZhbHVlKSkgewogICAgICAgICAgICBsYXN0UmVzdWx0ID0gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7CiAgICAgICAgICAgIG9sZElucHV0VmFsdWUgPSBuZXdJbnB1dFZhbHVlICYmIG5ld0lucHV0VmFsdWUudmFsdWVPZigpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7CiAgICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KTsKICAgICAgfQoKICAgICAgdmFyIG9sZElucHV0VmFsdWVPZlZhbHVlcyA9IFtdOwogICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0gPSBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrOyAvLyBpbml0IHRvIHNvbWV0aGluZyB1bmlxdWUgc28gdGhhdCBlcXVhbHMgY2hlY2sgZmFpbHMKICAgICAgfQoKICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBleHByZXNzaW9uSW5wdXRzV2F0Y2goc2NvcGUpIHsKICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlOwoKICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgIHZhciBuZXdJbnB1dFZhbHVlID0gaW5wdXRFeHByZXNzaW9uc1tpXShzY29wZSk7CiAgICAgICAgICBpZiAoY2hhbmdlZCB8fCAoY2hhbmdlZCA9ICFleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrKG5ld0lucHV0VmFsdWUsIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSkpKSB7CiAgICAgICAgICAgIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSA9IG5ld0lucHV0VmFsdWUgJiYgbmV3SW5wdXRWYWx1ZS52YWx1ZU9mKCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoY2hhbmdlZCkgewogICAgICAgICAgbGFzdFJlc3VsdCA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7CiAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSk7CiAgICB9CgogICAgZnVuY3Rpb24gb25lVGltZVdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikgewogICAgICB2YXIgdW53YXRjaCwgbGFzdFZhbHVlOwogICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBvbmVUaW1lV2F0Y2goc2NvcGUpIHsKICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7CiAgICAgIH0sIGZ1bmN0aW9uIG9uZVRpbWVMaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSkgewogICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlOwogICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkgewogICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmIChpc0RlZmluZWQobGFzdFZhbHVlKSkgewogICAgICAgICAgICAgIHVud2F0Y2goKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LCBvYmplY3RFcXVhbGl0eSk7CiAgICB9CgogICAgZnVuY3Rpb24gb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24pIHsKICAgICAgdmFyIHVud2F0Y2gsIGxhc3RWYWx1ZTsKICAgICAgcmV0dXJuIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gb25lVGltZVdhdGNoKHNjb3BlKSB7CiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpOwogICAgICB9LCBmdW5jdGlvbiBvbmVUaW1lTGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpIHsKICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTsKICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHsKICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdmFsdWUsIG9sZCwgc2NvcGUpOwogICAgICAgIH0KICAgICAgICBpZiAoaXNBbGxEZWZpbmVkKHZhbHVlKSkgewogICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYoaXNBbGxEZWZpbmVkKGxhc3RWYWx1ZSkpIHVud2F0Y2goKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwgb2JqZWN0RXF1YWxpdHkpOwoKICAgICAgZnVuY3Rpb24gaXNBbGxEZWZpbmVkKHZhbHVlKSB7CiAgICAgICAgdmFyIGFsbERlZmluZWQgPSB0cnVlOwogICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICAgIGlmICghaXNEZWZpbmVkKHZhbCkpIGFsbERlZmluZWQgPSBmYWxzZTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gYWxsRGVmaW5lZDsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7CiAgICAgIHZhciB1bndhdGNoOwogICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBjb25zdGFudFdhdGNoKHNjb3BlKSB7CiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpOwogICAgICB9LCBmdW5jdGlvbiBjb25zdGFudExpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7CiAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7CiAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0KICAgICAgICB1bndhdGNoKCk7CiAgICAgIH0sIG9iamVjdEVxdWFsaXR5KTsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKSB7CiAgICAgIGlmICghaW50ZXJjZXB0b3JGbikgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb247CgogICAgICB2YXIgZm4gPSBmdW5jdGlvbiBpbnRlcmNlcHRlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscykgewogICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgdmFyIHJlc3VsdCA9IGludGVyY2VwdG9yRm4odmFsdWUsIHNjb3BlLCBsb2NhbHMpOwogICAgICAgIC8vIHdlIG9ubHkgcmV0dXJuIHRoZSBpbnRlcmNlcHRvcidzIHJlc3VsdCBpZiB0aGUKICAgICAgICAvLyBpbml0aWFsIHZhbHVlIGlzIGRlZmluZWQgKGZvciBiaW5kLW9uY2UpCiAgICAgICAgcmV0dXJuIGlzRGVmaW5lZCh2YWx1ZSkgPyByZXN1bHQgOiB2YWx1ZTsKICAgICAgfTsKCiAgICAgIC8vIFByb3BhZ2F0ZSAkJHdhdGNoRGVsZWdhdGVzIG90aGVyIHRoZW4gaW5wdXRzV2F0Y2hEZWxlZ2F0ZQogICAgICBpZiAocGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgJiYKICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlICE9PSBpbnB1dHNXYXRjaERlbGVnYXRlKSB7CiAgICAgICAgZm4uJCR3YXRjaERlbGVnYXRlID0gcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGU7CiAgICAgIH0gZWxzZSBpZiAoIWludGVyY2VwdG9yRm4uJHN0YXRlZnVsKSB7CiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYW4gaW50ZXJjZXB0b3IsIGJ1dCBubyB3YXRjaERlbGVnYXRlIHRoZW4gdHJlYXQgdGhlIGludGVyY2VwdG9yIGxpa2UKICAgICAgICAvLyB3ZSB0cmVhdCBmaWx0ZXJzIC0gaXQgaXMgYXNzdW1lZCB0byBiZSBhIHB1cmUgZnVuY3Rpb24gdW5sZXNzIGZsYWdnZWQgd2l0aCAkc3RhdGVmdWwKICAgICAgICBmbi4kJHdhdGNoRGVsZWdhdGUgPSBpbnB1dHNXYXRjaERlbGVnYXRlOwogICAgICAgIGZuLmlucHV0cyA9IFtwYXJzZWRFeHByZXNzaW9uXTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZuOwogICAgfQogIH1dOwp9CgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJHEKICogQHJlcXVpcmVzICRyb290U2NvcGUKICoKICogQGRlc2NyaXB0aW9uCiAqIEEgcHJvbWlzZS9kZWZlcnJlZCBpbXBsZW1lbnRhdGlvbiBpbnNwaXJlZCBieSBbS3JpcyBLb3dhbCdzIFFdKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkuCiAqCiAqICRxIGNhbiBiZSB1c2VkIGluIHR3byBmYXNoaW9ucyAtLS0gb25lIHdoaWNoIGlzIG1vcmUgc2ltaWxhciB0byBLcmlzIEtvd2FsJ3MgUSBvciBqUXVlcnkncyBEZWZlcnJlZAogKiBpbXBsZW1lbnRhdGlvbnMsIGFuZCB0aGUgb3RoZXIgd2hpY2ggcmVzZW1ibGVzIEVTNiBwcm9taXNlcyB0byBzb21lIGRlZ3JlZS4KICoKICogIyAkcSBjb25zdHJ1Y3RvcgogKgogKiBUaGUgc3RyZWFtbGluZWQgRVM2IHN0eWxlIHByb21pc2UgaXMgZXNzZW50aWFsbHkganVzdCB1c2luZyAkcSBhcyBhIGNvbnN0cnVjdG9yIHdoaWNoIHRha2VzIGEgYHJlc29sdmVyYAogKiBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQuIFRoaXMgaXMgc2ltaWxhciB0byB0aGUgbmF0aXZlIFByb21pc2UgaW1wbGVtZW50YXRpb24gZnJvbSBFUzYgSGFybW9ueSwKICogc2VlIFtNRE5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UpLgogKgogKiBXaGlsZSB0aGUgY29uc3RydWN0b3Itc3R5bGUgdXNlIGlzIHN1cHBvcnRlZCwgbm90IGFsbCBvZiB0aGUgc3VwcG9ydGluZyBtZXRob2RzIGZyb20gRVM2IEhhcm1vbnkgcHJvbWlzZXMgYXJlCiAqIGF2YWlsYWJsZSB5ZXQuCiAqCiAqIEl0IGNhbiBiZSB1c2VkIGxpa2Ugc286CiAqCiAqIGBgYGpzCiAqICAgLy8gZm9yIHRoZSBwdXJwb3NlIG9mIHRoaXMgZXhhbXBsZSBsZXQncyBhc3N1bWUgdGhhdCB2YXJpYWJsZXMgYCRxYCBhbmQgYG9rVG9HcmVldGAKICogICAvLyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuCiAqCiAqICAgZnVuY3Rpb24gYXN5bmNHcmVldChuYW1lKSB7CiAqICAgICAvLyBwZXJmb3JtIHNvbWUgYXN5bmNocm9ub3VzIG9wZXJhdGlvbiwgcmVzb2x2ZSBvciByZWplY3QgdGhlIHByb21pc2Ugd2hlbiBhcHByb3ByaWF0ZS4KICogICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICogICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICogICAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7CiAqICAgICAgICAgICByZXNvbHZlKCdIZWxsbywgJyArIG5hbWUgKyAnIScpOwogKiAgICAgICAgIH0gZWxzZSB7CiAqICAgICAgICAgICByZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTsKICogICAgICAgICB9CiAqICAgICAgIH0sIDEwMDApOwogKiAgICAgfSk7CiAqICAgfQogKgogKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpOwogKiAgIHByb21pc2UudGhlbihmdW5jdGlvbihncmVldGluZykgewogKiAgICAgYWxlcnQoJ1N1Y2Nlc3M6ICcgKyBncmVldGluZyk7CiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7CiAqICAgICBhbGVydCgnRmFpbGVkOiAnICsgcmVhc29uKTsKICogICB9KTsKICogYGBgCiAqCiAqIE5vdGU6IHByb2dyZXNzL25vdGlmeSBjYWxsYmFja3MgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIHZpYSB0aGUgRVM2LXN0eWxlIGludGVyZmFjZS4KICoKICogSG93ZXZlciwgdGhlIG1vcmUgdHJhZGl0aW9uYWwgQ29tbW9uSlMtc3R5bGUgdXNhZ2UgaXMgc3RpbGwgYXZhaWxhYmxlLCBhbmQgZG9jdW1lbnRlZCBiZWxvdy4KICoKICogW1RoZSBDb21tb25KUyBQcm9taXNlIHByb3Bvc2FsXShodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Qcm9taXNlcykgZGVzY3JpYmVzIGEgcHJvbWlzZSBhcyBhbgogKiBpbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nIHdpdGggYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcmVzdWx0IG9mIGFuIGFjdGlvbiB0aGF0IGlzCiAqIHBlcmZvcm1lZCBhc3luY2hyb25vdXNseSwgYW5kIG1heSBvciBtYXkgbm90IGJlIGZpbmlzaGVkIGF0IGFueSBnaXZlbiBwb2ludCBpbiB0aW1lLgogKgogKiBGcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiBkZWFsaW5nIHdpdGggZXJyb3IgaGFuZGxpbmcsIGRlZmVycmVkIGFuZCBwcm9taXNlIEFQSXMgYXJlIHRvCiAqIGFzeW5jaHJvbm91cyBwcm9ncmFtbWluZyB3aGF0IGB0cnlgLCBgY2F0Y2hgIGFuZCBgdGhyb3dgIGtleXdvcmRzIGFyZSB0byBzeW5jaHJvbm91cyBwcm9ncmFtbWluZy4KICoKICogYGBganMKICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgb2tUb0dyZWV0YAogKiAgIC8vIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZSAodGhleSBjb3VsZCBoYXZlIGJlZW4gaW5qZWN0ZWQgb3IgcGFzc2VkIGluKS4KICoKICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHsKICogICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7CiAqCiAqICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogKiAgICAgICBkZWZlcnJlZC5ub3RpZnkoJ0Fib3V0IHRvIGdyZWV0ICcgKyBuYW1lICsgJy4nKTsKICoKICogICAgICAgaWYgKG9rVG9HcmVldChuYW1lKSkgewogKiAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJ0hlbGxvLCAnICsgbmFtZSArICchJyk7CiAqICAgICAgIH0gZWxzZSB7CiAqICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCdHcmVldGluZyAnICsgbmFtZSArICcgaXMgbm90IGFsbG93ZWQuJyk7CiAqICAgICAgIH0KICogICAgIH0sIDEwMDApOwogKgogKiAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7CiAqICAgfQogKgogKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpOwogKiAgIHByb21pc2UudGhlbihmdW5jdGlvbihncmVldGluZykgewogKiAgICAgYWxlcnQoJ1N1Y2Nlc3M6ICcgKyBncmVldGluZyk7CiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7CiAqICAgICBhbGVydCgnRmFpbGVkOiAnICsgcmVhc29uKTsKICogICB9LCBmdW5jdGlvbih1cGRhdGUpIHsKICogICAgIGFsZXJ0KCdHb3Qgbm90aWZpY2F0aW9uOiAnICsgdXBkYXRlKTsKICogICB9KTsKICogYGBgCiAqCiAqIEF0IGZpcnN0IGl0IG1pZ2h0IG5vdCBiZSBvYnZpb3VzIHdoeSB0aGlzIGV4dHJhIGNvbXBsZXhpdHkgaXMgd29ydGggdGhlIHRyb3VibGUuIFRoZSBwYXlvZmYKICogY29tZXMgaW4gdGhlIHdheSBvZiBndWFyYW50ZWVzIHRoYXQgcHJvbWlzZSBhbmQgZGVmZXJyZWQgQVBJcyBtYWtlLCBzZWUKICogaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC91bmNvbW1vbmpzL2Jsb2IvbWFzdGVyL3Byb21pc2VzL3NwZWNpZmljYXRpb24ubWQuCiAqCiAqIEFkZGl0aW9uYWxseSB0aGUgcHJvbWlzZSBhcGkgYWxsb3dzIGZvciBjb21wb3NpdGlvbiB0aGF0IGlzIHZlcnkgaGFyZCB0byBkbyB3aXRoIHRoZQogKiB0cmFkaXRpb25hbCBjYWxsYmFjayAoW0NQU10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db250aW51YXRpb24tcGFzc2luZ19zdHlsZSkpIGFwcHJvYWNoLgogKiBGb3IgbW9yZSBvbiB0aGlzIHBsZWFzZSBzZWUgdGhlIFtRIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkgZXNwZWNpYWxseSB0aGUKICogc2VjdGlvbiBvbiBzZXJpYWwgb3IgcGFyYWxsZWwgam9pbmluZyBvZiBwcm9taXNlcy4KICoKICogIyBUaGUgRGVmZXJyZWQgQVBJCiAqCiAqIEEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkIGlzIGNvbnN0cnVjdGVkIGJ5IGNhbGxpbmcgYCRxLmRlZmVyKClgLgogKgogKiBUaGUgcHVycG9zZSBvZiB0aGUgZGVmZXJyZWQgb2JqZWN0IGlzIHRvIGV4cG9zZSB0aGUgYXNzb2NpYXRlZCBQcm9taXNlIGluc3RhbmNlIGFzIHdlbGwgYXMgQVBJcwogKiB0aGF0IGNhbiBiZSB1c2VkIGZvciBzaWduYWxpbmcgdGhlIHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVsIGNvbXBsZXRpb24sIGFzIHdlbGwgYXMgdGhlIHN0YXR1cwogKiBvZiB0aGUgdGFzay4KICoKICogKipNZXRob2RzKioKICoKICogLSBgcmVzb2x2ZSh2YWx1ZSlgIOKAkyByZXNvbHZlcyB0aGUgZGVyaXZlZCBwcm9taXNlIHdpdGggdGhlIGB2YWx1ZWAuIElmIHRoZSB2YWx1ZSBpcyBhIHJlamVjdGlvbgogKiAgIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YCwgdGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCBpbnN0ZWFkLgogKiAtIGByZWplY3QocmVhc29uKWAg4oCTIHJlamVjdHMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgcmVhc29uYC4gVGhpcyBpcyBlcXVpdmFsZW50IHRvCiAqICAgcmVzb2x2aW5nIGl0IHdpdGggYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLgogKiAtIGBub3RpZnkodmFsdWUpYCAtIHByb3ZpZGVzIHVwZGF0ZXMgb24gdGhlIHN0YXR1cyBvZiB0aGUgcHJvbWlzZSdzIGV4ZWN1dGlvbi4gVGhpcyBtYXkgYmUgY2FsbGVkCiAqICAgbXVsdGlwbGUgdGltZXMgYmVmb3JlIHRoZSBwcm9taXNlIGlzIGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZC4KICoKICogKipQcm9wZXJ0aWVzKioKICoKICogLSBwcm9taXNlIOKAkyBge1Byb21pc2V9YCDigJMgcHJvbWlzZSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGVmZXJyZWQuCiAqCiAqCiAqICMgVGhlIFByb21pc2UgQVBJCiAqCiAqIEEgbmV3IHByb21pc2UgaW5zdGFuY2UgaXMgY3JlYXRlZCB3aGVuIGEgZGVmZXJyZWQgaW5zdGFuY2UgaXMgY3JlYXRlZCBhbmQgY2FuIGJlIHJldHJpZXZlZCBieQogKiBjYWxsaW5nIGBkZWZlcnJlZC5wcm9taXNlYC4KICoKICogVGhlIHB1cnBvc2Ugb2YgdGhlIHByb21pc2Ugb2JqZWN0IGlzIHRvIGFsbG93IGZvciBpbnRlcmVzdGVkIHBhcnRpZXMgdG8gZ2V0IGFjY2VzcyB0byB0aGUgcmVzdWx0CiAqIG9mIHRoZSBkZWZlcnJlZCB0YXNrIHdoZW4gaXQgY29tcGxldGVzLgogKgogKiAqKk1ldGhvZHMqKgogKgogKiAtIGB0aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaywgbm90aWZ5Q2FsbGJhY2spYCDigJMgcmVnYXJkbGVzcyBvZiB3aGVuIHRoZSBwcm9taXNlIHdhcyBvcgogKiAgIHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQsIGB0aGVuYCBjYWxscyBvbmUgb2YgdGhlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2FsbGJhY2tzIGFzeW5jaHJvbm91c2x5CiAqICAgYXMgc29vbiBhcyB0aGUgcmVzdWx0IGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQ6IHRoZSByZXN1bHQKICogICBvciByZWplY3Rpb24gcmVhc29uLiBBZGRpdGlvbmFsbHksIHRoZSBub3RpZnkgY2FsbGJhY2sgbWF5IGJlIGNhbGxlZCB6ZXJvIG9yIG1vcmUgdGltZXMgdG8KICogICBwcm92aWRlIGEgcHJvZ3Jlc3MgaW5kaWNhdGlvbiwgYmVmb3JlIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLgogKgogKiAgIFRoaXMgbWV0aG9kICpyZXR1cm5zIGEgbmV3IHByb21pc2UqIHdoaWNoIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZQogKiAgIGBzdWNjZXNzQ2FsbGJhY2tgLCBgZXJyb3JDYWxsYmFja2AuIEl0IGFsc28gbm90aWZpZXMgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlCiAqICAgYG5vdGlmeUNhbGxiYWNrYCBtZXRob2QuIFRoZSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCBvciByZWplY3RlZCBmcm9tIHRoZSBub3RpZnlDYWxsYmFjawogKiAgIG1ldGhvZC4KICoKICogLSBgY2F0Y2goZXJyb3JDYWxsYmFjaylgIOKAkyBzaG9ydGhhbmQgZm9yIGBwcm9taXNlLnRoZW4obnVsbCwgZXJyb3JDYWxsYmFjaylgCiAqCiAqIC0gYGZpbmFsbHkoY2FsbGJhY2spYCDigJMgYWxsb3dzIHlvdSB0byBvYnNlcnZlIGVpdGhlciB0aGUgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIG9mIGEgcHJvbWlzZSwKICogICBidXQgdG8gZG8gc28gd2l0aG91dCBtb2RpZnlpbmcgdGhlIGZpbmFsIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCB0byByZWxlYXNlIHJlc291cmNlcyBvciBkbyBzb21lCiAqICAgY2xlYW4tdXAgdGhhdCBuZWVkcyB0byBiZSBkb25lIHdoZXRoZXIgdGhlIHByb21pc2Ugd2FzIHJlamVjdGVkIG9yIHJlc29sdmVkLiBTZWUgdGhlIFtmdWxsCiAqICAgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xL3dpa2kvQVBJLVJlZmVyZW5jZSNwcm9taXNlZmluYWxseWNhbGxiYWNrKSBmb3IKICogICBtb3JlIGluZm9ybWF0aW9uLgogKgogKiAgIEJlY2F1c2UgYGZpbmFsbHlgIGlzIGEgcmVzZXJ2ZWQgd29yZCBpbiBKYXZhU2NyaXB0IGFuZCByZXNlcnZlZCBrZXl3b3JkcyBhcmUgbm90IHN1cHBvcnRlZCBhcwogKiAgIHByb3BlcnR5IG5hbWVzIGJ5IEVTMywgeW91J2xsIG5lZWQgdG8gaW52b2tlIHRoZSBtZXRob2QgbGlrZSBgcHJvbWlzZVsnZmluYWxseSddKGNhbGxiYWNrKWAgdG8KICogICBtYWtlIHlvdXIgY29kZSBJRTggYW5kIEFuZHJvaWQgMi54IGNvbXBhdGlibGUuCiAqCiAqICMgQ2hhaW5pbmcgcHJvbWlzZXMKICoKICogQmVjYXVzZSBjYWxsaW5nIHRoZSBgdGhlbmAgbWV0aG9kIG9mIGEgcHJvbWlzZSByZXR1cm5zIGEgbmV3IGRlcml2ZWQgcHJvbWlzZSwgaXQgaXMgZWFzaWx5CiAqIHBvc3NpYmxlIHRvIGNyZWF0ZSBhIGNoYWluIG9mIHByb21pc2VzOgogKgogKiBgYGBqcwogKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICogICAgIHJldHVybiByZXN1bHQgKyAxOwogKiAgIH0pOwogKgogKiAgIC8vIHByb21pc2VCIHdpbGwgYmUgcmVzb2x2ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgcHJvbWlzZUEgaXMgcmVzb2x2ZWQgYW5kIGl0cyB2YWx1ZQogKiAgIC8vIHdpbGwgYmUgdGhlIHJlc3VsdCBvZiBwcm9taXNlQSBpbmNyZW1lbnRlZCBieSAxCiAqIGBgYAogKgogKiBJdCBpcyBwb3NzaWJsZSB0byBjcmVhdGUgY2hhaW5zIG9mIGFueSBsZW5ndGggYW5kIHNpbmNlIGEgcHJvbWlzZSBjYW4gYmUgcmVzb2x2ZWQgd2l0aCBhbm90aGVyCiAqIHByb21pc2UgKHdoaWNoIHdpbGwgZGVmZXIgaXRzIHJlc29sdXRpb24gZnVydGhlciksIGl0IGlzIHBvc3NpYmxlIHRvIHBhdXNlL2RlZmVyIHJlc29sdXRpb24gb2YKICogdGhlIHByb21pc2VzIGF0IGFueSBwb2ludCBpbiB0aGUgY2hhaW4uIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gaW1wbGVtZW50IHBvd2VyZnVsIEFQSXMgbGlrZQogKiAkaHR0cCdzIHJlc3BvbnNlIGludGVyY2VwdG9ycy4KICoKICoKICogIyBEaWZmZXJlbmNlcyBiZXR3ZWVuIEtyaXMgS293YWwncyBRIGFuZCAkcQogKgogKiAgVGhlcmUgYXJlIHR3byBtYWluIGRpZmZlcmVuY2VzOgogKgogKiAtICRxIGlzIGludGVncmF0ZWQgd2l0aCB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGV9IFNjb3BlIG1vZGVsIG9ic2VydmF0aW9uCiAqICAgbWVjaGFuaXNtIGluIGFuZ3VsYXIsIHdoaWNoIG1lYW5zIGZhc3RlciBwcm9wYWdhdGlvbiBvZiByZXNvbHV0aW9uIG9yIHJlamVjdGlvbiBpbnRvIHlvdXIKICogICBtb2RlbHMgYW5kIGF2b2lkaW5nIHVubmVjZXNzYXJ5IGJyb3dzZXIgcmVwYWludHMsIHdoaWNoIHdvdWxkIHJlc3VsdCBpbiBmbGlja2VyaW5nIFVJLgogKiAtIFEgaGFzIG1hbnkgbW9yZSBmZWF0dXJlcyB0aGFuICRxLCBidXQgdGhhdCBjb21lcyBhdCBhIGNvc3Qgb2YgYnl0ZXMuICRxIGlzIHRpbnksIGJ1dCBjb250YWlucwogKiAgIGFsbCB0aGUgaW1wb3J0YW50IGZ1bmN0aW9uYWxpdHkgbmVlZGVkIGZvciBjb21tb24gYXN5bmMgdGFza3MuCiAqCiAqICAjIFRlc3RpbmcKICoKICogIGBgYGpzCiAqICAgIGl0KCdzaG91bGQgc2ltdWxhdGUgcHJvbWlzZScsIGluamVjdChmdW5jdGlvbigkcSwgJHJvb3RTY29wZSkgewogKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7CiAqICAgICAgdmFyIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlOwogKiAgICAgIHZhciByZXNvbHZlZFZhbHVlOwogKgogKiAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkgeyByZXNvbHZlZFZhbHVlID0gdmFsdWU7IH0pOwogKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7CiAqCiAqICAgICAgLy8gU2ltdWxhdGUgcmVzb2x2aW5nIG9mIHByb21pc2UKICogICAgICBkZWZlcnJlZC5yZXNvbHZlKDEyMyk7CiAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LgogKiAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB3ZSB3YW50IHRoZSBwcm9taXNlIEFQSSB0byBhbHdheXMgYmUgYXN5bmMsIHdoZXRoZXIgb3Igbm90CiAqICAgICAgLy8gaXQgZ290IGNhbGxlZCBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm91c2x5LgogKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7CiAqCiAqICAgICAgLy8gUHJvcGFnYXRlIHByb21pc2UgcmVzb2x1dGlvbiB0byAndGhlbicgZnVuY3Rpb25zIHVzaW5nICRhcHBseSgpLgogKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7CiAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvRXF1YWwoMTIzKTsKICogICAgfSkpOwogKiAgYGBgCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24sIGZ1bmN0aW9uKX0gcmVzb2x2ZXIgRnVuY3Rpb24gd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIHJlc29sdmluZyBvcgogKiAgIHJlamVjdGluZyB0aGUgbmV3bHkgY3JlYXRlZCBwcm9taXNlLiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgdGhlCiAqICAgcHJvbWlzZSwgdGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgYSBmdW5jdGlvbiB3aGljaCByZWplY3RzIHRoZSBwcm9taXNlLgogKgogKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS4KICovCmZ1bmN0aW9uICRRUHJvdmlkZXIoKSB7CgogIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRleGNlcHRpb25IYW5kbGVyKSB7CiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTsKICAgIH0sICRleGNlcHRpb25IYW5kbGVyKTsKICB9XTsKfQoKZnVuY3Rpb24gJCRRUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRicm93c2VyLCAkZXhjZXB0aW9uSGFuZGxlcikgewogICAgcmV0dXJuIHFGYWN0b3J5KGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTsKICAgIH0sICRleGNlcHRpb25IYW5kbGVyKTsKICB9XTsKfQoKLyoqCiAqIENvbnN0cnVjdHMgYSBwcm9taXNlIG1hbmFnZXIuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24pfSBuZXh0VGljayBGdW5jdGlvbiBmb3IgZXhlY3V0aW5nIGZ1bmN0aW9ucyBpbiB0aGUgbmV4dCB0dXJuLgogKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLiopfSBleGNlcHRpb25IYW5kbGVyIEZ1bmN0aW9uIGludG8gd2hpY2ggdW5leHBlY3RlZCBleGNlcHRpb25zIGFyZSBwYXNzZWQgZm9yCiAqICAgICBkZWJ1Z2dpbmcgcHVycG9zZXMuCiAqIEByZXR1cm5zIHtvYmplY3R9IFByb21pc2UgbWFuYWdlci4KICovCmZ1bmN0aW9uIHFGYWN0b3J5KG5leHRUaWNrLCBleGNlcHRpb25IYW5kbGVyKSB7CiAgdmFyICRxTWluRXJyID0gbWluRXJyKCckcScsIFR5cGVFcnJvcik7CiAgZnVuY3Rpb24gY2FsbE9uY2Uoc2VsZiwgcmVzb2x2ZUZuLCByZWplY3RGbikgewogICAgdmFyIGNhbGxlZCA9IGZhbHNlOwogICAgZnVuY3Rpb24gd3JhcChmbikgewogICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZiAoY2FsbGVkKSByZXR1cm47CiAgICAgICAgY2FsbGVkID0gdHJ1ZTsKICAgICAgICBmbi5jYWxsKHNlbGYsIHZhbHVlKTsKICAgICAgfTsKICAgIH0KCiAgICByZXR1cm4gW3dyYXAocmVzb2x2ZUZuKSwgd3JhcChyZWplY3RGbildOwogIH0KCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRxI2RlZmVyCiAgICogQGtpbmQgZnVuY3Rpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLgogICAqCiAgICogQHJldHVybnMge0RlZmVycmVkfSBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkLgogICAqLwogIHZhciBkZWZlciA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIG5ldyBEZWZlcnJlZCgpOwogIH07CgogIGZ1bmN0aW9uIFByb21pc2UoKSB7CiAgICB0aGlzLiQkc3RhdGUgPSB7IHN0YXR1czogMCB9OwogIH0KCiAgUHJvbWlzZS5wcm90b3R5cGUgPSB7CiAgICB0aGVuOiBmdW5jdGlvbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvZ3Jlc3NCYWNrKSB7CiAgICAgIHZhciByZXN1bHQgPSBuZXcgRGVmZXJyZWQoKTsKCiAgICAgIHRoaXMuJCRzdGF0ZS5wZW5kaW5nID0gdGhpcy4kJHN0YXRlLnBlbmRpbmcgfHwgW107CiAgICAgIHRoaXMuJCRzdGF0ZS5wZW5kaW5nLnB1c2goW3Jlc3VsdCwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFja10pOwogICAgICBpZiAodGhpcy4kJHN0YXRlLnN0YXR1cyA+IDApIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHRoaXMuJCRzdGF0ZSk7CgogICAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7CiAgICB9LAoKICAgICJjYXRjaCI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgY2FsbGJhY2spOwogICAgfSwKCiAgICAiZmluYWxseSI6IGZ1bmN0aW9uKGNhbGxiYWNrLCBwcm9ncmVzc0JhY2spIHsKICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayh2YWx1ZSwgdHJ1ZSwgY2FsbGJhY2spOwogICAgICB9LCBmdW5jdGlvbihlcnJvcikgewogICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhlcnJvciwgZmFsc2UsIGNhbGxiYWNrKTsKICAgICAgfSwgcHJvZ3Jlc3NCYWNrKTsKICAgIH0KICB9OwoKICAvL0Zhc3RlciwgbW9yZSBiYXNpYyB0aGFuIGFuZ3VsYXIuYmluZCBodHRwOi8vanNwZXJmLmNvbS9hbmd1bGFyLWJpbmQtdnMtY3VzdG9tLXZzLW5hdGl2ZQogIGZ1bmN0aW9uIHNpbXBsZUJpbmQoY29udGV4dCwgZm4pIHsKICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkgewogICAgICBmbi5jYWxsKGNvbnRleHQsIHZhbHVlKTsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBwcm9jZXNzUXVldWUoc3RhdGUpIHsKICAgIHZhciBmbiwgcHJvbWlzZSwgcGVuZGluZzsKCiAgICBwZW5kaW5nID0gc3RhdGUucGVuZGluZzsKICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSBmYWxzZTsKICAgIHN0YXRlLnBlbmRpbmcgPSB1bmRlZmluZWQ7CiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBwZW5kaW5nLmxlbmd0aDsgaSA8IGlpOyArK2kpIHsKICAgICAgcHJvbWlzZSA9IHBlbmRpbmdbaV1bMF07CiAgICAgIGZuID0gcGVuZGluZ1tpXVtzdGF0ZS5zdGF0dXNdOwogICAgICB0cnkgewogICAgICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkgewogICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGZuKHN0YXRlLnZhbHVlKSk7CiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5zdGF0dXMgPT09IDEpIHsKICAgICAgICAgIHByb21pc2UucmVzb2x2ZShzdGF0ZS52YWx1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHByb21pc2UucmVqZWN0KHN0YXRlLnZhbHVlKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2goZSkgewogICAgICAgIHByb21pc2UucmVqZWN0KGUpOwogICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgIH0KICAgIH0KICB9CgogIGZ1bmN0aW9uIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHN0YXRlKSB7CiAgICBpZiAoc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCB8fCAhc3RhdGUucGVuZGluZykgcmV0dXJuOwogICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IHRydWU7CiAgICBuZXh0VGljayhmdW5jdGlvbigpIHsgcHJvY2Vzc1F1ZXVlKHN0YXRlKTsgfSk7CiAgfQoKICBmdW5jdGlvbiBEZWZlcnJlZCgpIHsKICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKCk7CiAgICAvL05lY2Vzc2FyeSB0byBzdXBwb3J0IHVuYm91bmQgZXhlY3V0aW9uIDovCiAgICB0aGlzLnJlc29sdmUgPSBzaW1wbGVCaW5kKHRoaXMsIHRoaXMucmVzb2x2ZSk7CiAgICB0aGlzLnJlamVjdCA9IHNpbXBsZUJpbmQodGhpcywgdGhpcy5yZWplY3QpOwogICAgdGhpcy5ub3RpZnkgPSBzaW1wbGVCaW5kKHRoaXMsIHRoaXMubm90aWZ5KTsKICB9CgogIERlZmVycmVkLnByb3RvdHlwZSA9IHsKICAgIHJlc29sdmU6IGZ1bmN0aW9uKHZhbCkgewogICAgICBpZiAodGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzKSByZXR1cm47CiAgICAgIGlmICh2YWwgPT09IHRoaXMucHJvbWlzZSkgewogICAgICAgIHRoaXMuJCRyZWplY3QoJHFNaW5FcnIoCiAgICAgICAgICAncWN5Y2xlJywKICAgICAgICAgICJFeHBlY3RlZCBwcm9taXNlIHRvIGJlIHJlc29sdmVkIHdpdGggdmFsdWUgb3RoZXIgdGhhbiBpdHNlbGYgJ3swfSciLAogICAgICAgICAgdmFsKSk7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgdGhpcy4kJHJlc29sdmUodmFsKTsKICAgICAgfQoKICAgIH0sCgogICAgJCRyZXNvbHZlOiBmdW5jdGlvbih2YWwpIHsKICAgICAgdmFyIHRoZW4sIGZuczsKCiAgICAgIGZucyA9IGNhbGxPbmNlKHRoaXMsIHRoaXMuJCRyZXNvbHZlLCB0aGlzLiQkcmVqZWN0KTsKICAgICAgdHJ5IHsKICAgICAgICBpZiAoKGlzT2JqZWN0KHZhbCkgfHwgaXNGdW5jdGlvbih2YWwpKSkgdGhlbiA9IHZhbCAmJiB2YWwudGhlbjsKICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGVuKSkgewogICAgICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzID0gLTE7CiAgICAgICAgICB0aGVuLmNhbGwodmFsLCBmbnNbMF0sIGZuc1sxXSwgdGhpcy5ub3RpZnkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS52YWx1ZSA9IHZhbDsKICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IDE7CiAgICAgICAgICBzY2hlZHVsZVByb2Nlc3NRdWV1ZSh0aGlzLnByb21pc2UuJCRzdGF0ZSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoKGUpIHsKICAgICAgICBmbnNbMV0oZSk7CiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgfQogICAgfSwKCiAgICByZWplY3Q6IGZ1bmN0aW9uKHJlYXNvbikgewogICAgICBpZiAodGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzKSByZXR1cm47CiAgICAgIHRoaXMuJCRyZWplY3QocmVhc29uKTsKICAgIH0sCgogICAgJCRyZWplY3Q6IGZ1bmN0aW9uKHJlYXNvbikgewogICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS52YWx1ZSA9IHJlYXNvbjsKICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzID0gMjsKICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy5wcm9taXNlLiQkc3RhdGUpOwogICAgfSwKCiAgICBub3RpZnk6IGZ1bmN0aW9uKHByb2dyZXNzKSB7CiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLnByb21pc2UuJCRzdGF0ZS5wZW5kaW5nOwoKICAgICAgaWYgKCh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPD0gMCkgJiYgY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5sZW5ndGgpIHsKICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBjYWxsYmFjaywgcmVzdWx0OwogICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2tzW2ldWzBdOwogICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXVszXTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXN1bHQubm90aWZ5KGlzRnVuY3Rpb24oY2FsbGJhY2spID8gY2FsbGJhY2socHJvZ3Jlc3MpIDogcHJvZ3Jlc3MpOwogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJHEjcmVqZWN0CiAgICogQGtpbmQgZnVuY3Rpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGByZWFzb25gLiBUaGlzIGFwaSBzaG91bGQgYmUKICAgKiB1c2VkIHRvIGZvcndhcmQgcmVqZWN0aW9uIGluIGEgY2hhaW4gb2YgcHJvbWlzZXMuIElmIHlvdSBhcmUgZGVhbGluZyB3aXRoIHRoZSBsYXN0IHByb21pc2UgaW4KICAgKiBhIHByb21pc2UgY2hhaW4sIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IGl0LgogICAqCiAgICogV2hlbiBjb21wYXJpbmcgZGVmZXJyZWRzL3Byb21pc2VzIHRvIHRoZSBmYW1pbGlhciBiZWhhdmlvciBvZiB0cnkvY2F0Y2gvdGhyb3csIHRoaW5rIG9mCiAgICogYHJlamVjdGAgYXMgdGhlIGB0aHJvd2Aga2V5d29yZCBpbiBKYXZhU2NyaXB0LiBUaGlzIGFsc28gbWVhbnMgdGhhdCBpZiB5b3UgImNhdGNoIiBhbiBlcnJvciB2aWEKICAgKiBhIHByb21pc2UgZXJyb3IgY2FsbGJhY2sgYW5kIHlvdSB3YW50IHRvIGZvcndhcmQgdGhlIGVycm9yIHRvIHRoZSBwcm9taXNlIGRlcml2ZWQgZnJvbSB0aGUKICAgKiBjdXJyZW50IHByb21pc2UsIHlvdSBoYXZlIHRvICJyZXRocm93IiB0aGUgZXJyb3IgYnkgcmV0dXJuaW5nIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYQogICAqIGByZWplY3RgLgogICAqCiAgICogYGBganMKICAgKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICAgKiAgICAgLy8gc3VjY2VzczogZG8gc29tZXRoaW5nIGFuZCByZXNvbHZlIHByb21pc2VCCiAgICogICAgIC8vICAgICAgICAgIHdpdGggdGhlIG9sZCBvciBhIG5ldyByZXN1bHQKICAgKiAgICAgcmV0dXJuIHJlc3VsdDsKICAgKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgewogICAqICAgICAvLyBlcnJvcjogaGFuZGxlIHRoZSBlcnJvciBpZiBwb3NzaWJsZSBhbmQKICAgKiAgICAgLy8gICAgICAgIHJlc29sdmUgcHJvbWlzZUIgd2l0aCBuZXdQcm9taXNlT3JWYWx1ZSwKICAgKiAgICAgLy8gICAgICAgIG90aGVyd2lzZSBmb3J3YXJkIHRoZSByZWplY3Rpb24gdG8gcHJvbWlzZUIKICAgKiAgICAgaWYgKGNhbkhhbmRsZShyZWFzb24pKSB7CiAgICogICAgICAvLyBoYW5kbGUgdGhlIGVycm9yIGFuZCByZWNvdmVyCiAgICogICAgICByZXR1cm4gbmV3UHJvbWlzZU9yVmFsdWU7CiAgICogICAgIH0KICAgKiAgICAgcmV0dXJuICRxLnJlamVjdChyZWFzb24pOwogICAqICAgfSk7CiAgICogYGBgCiAgICoKICAgKiBAcGFyYW0geyp9IHJlYXNvbiBDb25zdGFudCwgbWVzc2FnZSwgZXhjZXB0aW9uIG9yIGFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHJlamVjdGlvbiByZWFzb24uCiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2FzIGFscmVhZHkgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgYHJlYXNvbmAuCiAgICovCiAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uKHJlYXNvbikgewogICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpOwogICAgcmVzdWx0LnJlamVjdChyZWFzb24pOwogICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlOwogIH07CgogIHZhciBtYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIG1ha2VQcm9taXNlKHZhbHVlLCByZXNvbHZlZCkgewogICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpOwogICAgaWYgKHJlc29sdmVkKSB7CiAgICAgIHJlc3VsdC5yZXNvbHZlKHZhbHVlKTsKICAgIH0gZWxzZSB7CiAgICAgIHJlc3VsdC5yZWplY3QodmFsdWUpOwogICAgfQogICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlOwogIH07CgogIHZhciBoYW5kbGVDYWxsYmFjayA9IGZ1bmN0aW9uIGhhbmRsZUNhbGxiYWNrKHZhbHVlLCBpc1Jlc29sdmVkLCBjYWxsYmFjaykgewogICAgdmFyIGNhbGxiYWNrT3V0cHV0ID0gbnVsbDsKICAgIHRyeSB7CiAgICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkgY2FsbGJhY2tPdXRwdXQgPSBjYWxsYmFjaygpOwogICAgfSBjYXRjaChlKSB7CiAgICAgIHJldHVybiBtYWtlUHJvbWlzZShlLCBmYWxzZSk7CiAgICB9CiAgICBpZiAoaXNQcm9taXNlTGlrZShjYWxsYmFja091dHB1dCkpIHsKICAgICAgcmV0dXJuIGNhbGxiYWNrT3V0cHV0LnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIG1ha2VQcm9taXNlKHZhbHVlLCBpc1Jlc29sdmVkKTsKICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICByZXR1cm4gbWFrZVByb21pc2UoZXJyb3IsIGZhbHNlKTsKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbWFrZVByb21pc2UodmFsdWUsIGlzUmVzb2x2ZWQpOwogICAgfQogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkcSN3aGVuCiAgICogQGtpbmQgZnVuY3Rpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFdyYXBzIGFuIG9iamVjdCB0aGF0IG1pZ2h0IGJlIGEgdmFsdWUgb3IgYSAoM3JkIHBhcnR5KSB0aGVuLWFibGUgcHJvbWlzZSBpbnRvIGEgJHEgcHJvbWlzZS4KICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSBhcmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IG1pZ2h0IG9yIG1pZ2h0IG5vdCBiZSBhIHByb21pc2UsIG9yIGlmCiAgICogdGhlIHByb21pc2UgY29tZXMgZnJvbSBhIHNvdXJjZSB0aGF0IGNhbid0IGJlIHRydXN0ZWQuCiAgICoKICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIG9yIGEgcHJvbWlzZQogICAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZSBvZiB0aGUgcGFzc2VkIHZhbHVlIG9yIHByb21pc2UKICAgKi8KCgogIHZhciB3aGVuID0gZnVuY3Rpb24odmFsdWUsIGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spIHsKICAgIHZhciByZXN1bHQgPSBuZXcgRGVmZXJyZWQoKTsKICAgIHJlc3VsdC5yZXNvbHZlKHZhbHVlKTsKICAgIHJldHVybiByZXN1bHQucHJvbWlzZS50aGVuKGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkcSNhbGwKICAgKiBAa2luZCBmdW5jdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogQ29tYmluZXMgbXVsdGlwbGUgcHJvbWlzZXMgaW50byBhIHNpbmdsZSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiBhbGwgb2YgdGhlIGlucHV0CiAgICogcHJvbWlzZXMgYXJlIHJlc29sdmVkLgogICAqCiAgICogQHBhcmFtIHtBcnJheS48UHJvbWlzZT58T2JqZWN0LjxQcm9taXNlPn0gcHJvbWlzZXMgQW4gYXJyYXkgb3IgaGFzaCBvZiBwcm9taXNlcy4KICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHNpbmdsZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5L2hhc2ggb2YgdmFsdWVzLAogICAqICAgZWFjaCB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9taXNlIGF0IHRoZSBzYW1lIGluZGV4L2tleSBpbiB0aGUgYHByb21pc2VzYCBhcnJheS9oYXNoLgogICAqICAgSWYgYW55IG9mIHRoZSBwcm9taXNlcyBpcyByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLCB0aGlzIHJlc3VsdGluZyBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQKICAgKiAgIHdpdGggdGhlIHNhbWUgcmVqZWN0aW9uIHZhbHVlLgogICAqLwoKICBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHsKICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpLAogICAgICAgIGNvdW50ZXIgPSAwLAogICAgICAgIHJlc3VsdHMgPSBpc0FycmF5KHByb21pc2VzKSA/IFtdIDoge307CgogICAgZm9yRWFjaChwcm9taXNlcywgZnVuY3Rpb24ocHJvbWlzZSwga2V5KSB7CiAgICAgIGNvdW50ZXIrKzsKICAgICAgd2hlbihwcm9taXNlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKHJlc3VsdHMuaGFzT3duUHJvcGVydHkoa2V5KSkgcmV0dXJuOwogICAgICAgIHJlc3VsdHNba2V5XSA9IHZhbHVlOwogICAgICAgIGlmICghKC0tY291bnRlcikpIGRlZmVycmVkLnJlc29sdmUocmVzdWx0cyk7CiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgewogICAgICAgIGlmIChyZXN1bHRzLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybjsKICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVhc29uKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICBpZiAoY291bnRlciA9PT0gMCkgewogICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpOwogICAgfQoKICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlOwogIH0KCiAgdmFyICRRID0gZnVuY3Rpb24gUShyZXNvbHZlcikgewogICAgaWYgKCFpc0Z1bmN0aW9uKHJlc29sdmVyKSkgewogICAgICB0aHJvdyAkcU1pbkVycignbm9yc2x2cicsICJFeHBlY3RlZCByZXNvbHZlckZuLCBnb3QgJ3swfSciLCByZXNvbHZlcik7CiAgICB9CgogICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFEpKSB7CiAgICAgIC8vIE1vcmUgdXNlZnVsIHdoZW4gJFEgaXMgdGhlIFByb21pc2UgaXRzZWxmLgogICAgICByZXR1cm4gbmV3IFEocmVzb2x2ZXIpOwogICAgfQoKICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpOwoKICAgIGZ1bmN0aW9uIHJlc29sdmVGbih2YWx1ZSkgewogICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZWplY3RGbihyZWFzb24pIHsKICAgICAgZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7CiAgICB9CgogICAgcmVzb2x2ZXIocmVzb2x2ZUZuLCByZWplY3RGbik7CgogICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7CiAgfTsKCiAgJFEuZGVmZXIgPSBkZWZlcjsKICAkUS5yZWplY3QgPSByZWplY3Q7CiAgJFEud2hlbiA9IHdoZW47CiAgJFEuYWxsID0gYWxsOwoKICByZXR1cm4gJFE7Cn0KCmZ1bmN0aW9uICQkUkFGUHJvdmlkZXIoKXsgLy9yQUYKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkd2luZG93LCAkdGltZW91dCkgewogICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZTsKCiAgICB2YXIgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZTsKCiAgICB2YXIgcmFmU3VwcG9ydGVkID0gISFyZXF1ZXN0QW5pbWF0aW9uRnJhbWU7CiAgICB2YXIgcmFmID0gcmFmU3VwcG9ydGVkCiAgICAgID8gZnVuY3Rpb24oZm4pIHsKICAgICAgICAgIHZhciBpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTsKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICA6IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgICB2YXIgdGltZXIgPSAkdGltZW91dChmbiwgMTYuNjYsIGZhbHNlKTsgLy8gMTAwMCAvIDYwID0gMTYuNjY2CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lcik7CiAgICAgICAgICB9OwogICAgICAgIH07CgogICAgcmFmLnN1cHBvcnRlZCA9IHJhZlN1cHBvcnRlZDsKCiAgICByZXR1cm4gcmFmOwogIH1dOwp9CgovKioKICogREVTSUdOIE5PVEVTCiAqCiAqIFRoZSBkZXNpZ24gZGVjaXNpb25zIGJlaGluZCB0aGUgc2NvcGUgYXJlIGhlYXZpbHkgZmF2b3JlZCBmb3Igc3BlZWQgYW5kIG1lbW9yeSBjb25zdW1wdGlvbi4KICoKICogVGhlIHR5cGljYWwgdXNlIG9mIHNjb3BlIGlzIHRvIHdhdGNoIHRoZSBleHByZXNzaW9ucywgd2hpY2ggbW9zdCBvZiB0aGUgdGltZSByZXR1cm4gdGhlIHNhbWUKICogdmFsdWUgYXMgbGFzdCB0aW1lIHNvIHdlIG9wdGltaXplIHRoZSBvcGVyYXRpb24uCiAqCiAqIENsb3N1cmVzIGNvbnN0cnVjdGlvbiBpcyBleHBlbnNpdmUgaW4gdGVybXMgb2Ygc3BlZWQgYXMgd2VsbCBhcyBtZW1vcnk6CiAqICAgLSBObyBjbG9zdXJlcywgaW5zdGVhZCB1c2UgcHJvdG90eXBpY2FsIGluaGVyaXRhbmNlIGZvciBBUEkKICogICAtIEludGVybmFsIHN0YXRlIG5lZWRzIHRvIGJlIHN0b3JlZCBvbiBzY29wZSBkaXJlY3RseSwgd2hpY2ggbWVhbnMgdGhhdCBwcml2YXRlIHN0YXRlIGlzCiAqICAgICBleHBvc2VkIGFzICQkX19fXyBwcm9wZXJ0aWVzCiAqCiAqIExvb3Agb3BlcmF0aW9ucyBhcmUgb3B0aW1pemVkIGJ5IHVzaW5nIHdoaWxlKGNvdW50LS0pIHsgLi4uIH0KICogICAtIHRoaXMgbWVhbnMgdGhhdCBpbiBvcmRlciB0byBrZWVwIHRoZSBzYW1lIG9yZGVyIG9mIGV4ZWN1dGlvbiBhcyBhZGRpdGlvbiB3ZSBoYXZlIHRvIGFkZAogKiAgICAgaXRlbXMgdG8gdGhlIGFycmF5IGF0IHRoZSBiZWdpbm5pbmcgKHVuc2hpZnQpIGluc3RlYWQgb2YgYXQgdGhlIGVuZCAocHVzaCkKICoKICogQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIGFuZCByZW1vdmVkIG9mdGVuCiAqICAgLSBVc2luZyBhbiBhcnJheSB3b3VsZCBiZSBzbG93IHNpbmNlIGluc2VydHMgaW4gbWlkZGxlIGFyZSBleHBlbnNpdmUgc28gd2UgdXNlIGxpbmtlZCBsaXN0CiAqCiAqIFRoZXJlIGFyZSBmZXcgd2F0Y2hlcyB0aGVuIGEgbG90IG9mIG9ic2VydmVycy4gVGhpcyBpcyB3aHkgeW91IGRvbid0IHdhbnQgdGhlIG9ic2VydmVyIHRvIGJlCiAqIGltcGxlbWVudGVkIGluIHRoZSBzYW1lIHdheSBhcyB3YXRjaC4gV2F0Y2ggcmVxdWlyZXMgcmV0dXJuIG9mIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHdoaWNoCiAqIGFyZSBleHBlbnNpdmUgdG8gY29uc3RydWN0LgogKi8KCgovKioKICogQG5nZG9jIHByb3ZpZGVyCiAqIEBuYW1lICRyb290U2NvcGVQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICoKICogUHJvdmlkZXIgZm9yIHRoZSAkcm9vdFNjb3BlIHNlcnZpY2UuCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgJHJvb3RTY29wZVByb3ZpZGVyI2RpZ2VzdFR0bAogKiBAZGVzY3JpcHRpb24KICoKICogU2V0cyB0aGUgbnVtYmVyIG9mIGAkZGlnZXN0YCBpdGVyYXRpb25zIHRoZSBzY29wZSBzaG91bGQgYXR0ZW1wdCB0byBleGVjdXRlIGJlZm9yZSBnaXZpbmcgdXAgYW5kCiAqIGFzc3VtaW5nIHRoYXQgdGhlIG1vZGVsIGlzIHVuc3RhYmxlLgogKgogKiBUaGUgY3VycmVudCBkZWZhdWx0IGlzIDEwIGl0ZXJhdGlvbnMuCiAqCiAqIEluIGNvbXBsZXggYXBwbGljYXRpb25zIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgZGVwZW5kZW5jaWVzIGJldHdlZW4gYCR3YXRjaGBzIHdpbGwgcmVzdWx0IGluCiAqIHNldmVyYWwgZGlnZXN0IGl0ZXJhdGlvbnMuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwIGRpZ2VzdAogKiBpdGVyYXRpb25zIGZvciBpdHMgbW9kZWwgdG8gc3RhYmlsaXplIHRoZW4geW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB3aGF0IGlzIGNhdXNpbmcgdGhlIG1vZGVsIHRvCiAqIGNvbnRpbnVvdXNseSBjaGFuZ2UgZHVyaW5nIHRoZSBkaWdlc3QuCiAqCiAqIEluY3JlYXNpbmcgdGhlIFRUTCBjb3VsZCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucywgc28geW91IHNob3VsZCBub3QgY2hhbmdlIGl0IHdpdGhvdXQKICogcHJvcGVyIGp1c3RpZmljYXRpb24uCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbnVtYmVyIG9mIGRpZ2VzdCBpdGVyYXRpb25zLgogKi8KCgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJHJvb3RTY29wZQogKiBAZGVzY3JpcHRpb24KICoKICogRXZlcnkgYXBwbGljYXRpb24gaGFzIGEgc2luZ2xlIHJvb3Qge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LgogKiBBbGwgb3RoZXIgc2NvcGVzIGFyZSBkZXNjZW5kYW50IHNjb3BlcyBvZiB0aGUgcm9vdCBzY29wZS4gU2NvcGVzIHByb3ZpZGUgc2VwYXJhdGlvbgogKiBiZXR3ZWVuIHRoZSBtb2RlbCBhbmQgdGhlIHZpZXcsIHZpYSBhIG1lY2hhbmlzbSBmb3Igd2F0Y2hpbmcgdGhlIG1vZGVsIGZvciBjaGFuZ2VzLgogKiBUaGV5IGFsc28gcHJvdmlkZSBhbiBldmVudCBlbWlzc2lvbi9icm9hZGNhc3QgYW5kIHN1YnNjcmlwdGlvbiBmYWNpbGl0eS4gU2VlIHRoZQogKiB7QGxpbmsgZ3VpZGUvc2NvcGUgZGV2ZWxvcGVyIGd1aWRlIG9uIHNjb3Blc30uCiAqLwpmdW5jdGlvbiAkUm9vdFNjb3BlUHJvdmlkZXIoKXsKICB2YXIgVFRMID0gMTA7CiAgdmFyICRyb290U2NvcGVNaW5FcnIgPSBtaW5FcnIoJyRyb290U2NvcGUnKTsKICB2YXIgbGFzdERpcnR5V2F0Y2ggPSBudWxsOwogIHZhciBhcHBseUFzeW5jSWQgPSBudWxsOwoKICB0aGlzLmRpZ2VzdFR0bCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICBUVEwgPSB2YWx1ZTsKICAgIH0KICAgIHJldHVybiBUVEw7CiAgfTsKCiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHBhcnNlJywgJyRicm93c2VyJywKICAgICAgZnVuY3Rpb24oICRpbmplY3RvciwgICAkZXhjZXB0aW9uSGFuZGxlciwgICAkcGFyc2UsICAgJGJyb3dzZXIpIHsKCiAgICAvKioKICAgICAqIEBuZ2RvYyB0eXBlCiAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBBIHJvb3Qgc2NvcGUgY2FuIGJlIHJldHJpZXZlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUgJHJvb3RTY29wZX0ga2V5IGZyb20gdGhlCiAgICAgKiB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIHVzaW5nIHRoZQogICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlbgogICAgICogY29tcGlsZWQgSFRNTCB0ZW1wbGF0ZSBpcyBleGVjdXRlZC4pCiAgICAgKgogICAgICogSGVyZSBpcyBhIHNpbXBsZSBzY29wZSBzbmlwcGV0IHRvIHNob3cgaG93IHlvdSBjYW4gaW50ZXJhY3Qgd2l0aCB0aGUgc2NvcGUuCiAgICAgKiBgYGBodG1sCiAgICAgKiA8ZmlsZSBzcmM9Ii4vdGVzdC9uZy9yb290U2NvcGVTcGVjLmpzIiB0YWc9ImRvY3MxIiAvPgogICAgICogYGBgCiAgICAgKgogICAgICogIyBJbmhlcml0YW5jZQogICAgICogQSBzY29wZSBjYW4gaW5oZXJpdCBmcm9tIGEgcGFyZW50IHNjb3BlLCBhcyBpbiB0aGlzIGV4YW1wbGU6CiAgICAgKiBgYGBqcwogICAgICAgICB2YXIgcGFyZW50ID0gJHJvb3RTY29wZTsKICAgICAgICAgdmFyIGNoaWxkID0gcGFyZW50LiRuZXcoKTsKCiAgICAgICAgIHBhcmVudC5zYWx1dGF0aW9uID0gIkhlbGxvIjsKICAgICAgICAgY2hpbGQubmFtZSA9ICJXb3JsZCI7CiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdIZWxsbycpOwoKICAgICAgICAgY2hpbGQuc2FsdXRhdGlvbiA9ICJXZWxjb21lIjsKICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ1dlbGNvbWUnKTsKICAgICAgICAgZXhwZWN0KHBhcmVudC5zYWx1dGF0aW9uKS50b0VxdWFsKCdIZWxsbycpOwogICAgICogYGBgCiAgICAgKgogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKCk+PX0gcHJvdmlkZXJzIE1hcCBvZiBzZXJ2aWNlIGZhY3Rvcnkgd2hpY2ggbmVlZCB0byBiZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZCBmb3IgdGhlIGN1cnJlbnQgc2NvcGUuIERlZmF1bHRzIHRvIHtAbGluayBuZ30uCiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCAqPj19IGluc3RhbmNlQ2FjaGUgUHJvdmlkZXMgcHJlLWluc3RhbnRpYXRlZCBzZXJ2aWNlcyB3aGljaCBzaG91bGQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kL292ZXJyaWRlIHNlcnZpY2VzIHByb3ZpZGVkIGJ5IGBwcm92aWRlcnNgLiBUaGlzIGlzIGhhbmR5CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdW5pdC10ZXN0aW5nIGFuZCBoYXZpbmcgdGhlIG5lZWQgdG8gb3ZlcnJpZGUgYSBkZWZhdWx0CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBOZXdseSBjcmVhdGVkIHNjb3BlLgogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gU2NvcGUoKSB7CiAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpOwogICAgICB0aGlzLiQkcGhhc2UgPSB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkd2F0Y2hlcnMgPQogICAgICAgICAgICAgICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPQogICAgICAgICAgICAgICAgICAgICB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7CiAgICAgIHRoaXMuJHJvb3QgPSB0aGlzOwogICAgICB0aGlzLiQkZGVzdHJveWVkID0gZmFsc2U7CiAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTsKICAgICAgdGhpcy4kJGxpc3RlbmVyQ291bnQgPSB7fTsKICAgICAgdGhpcy4kJGlzb2xhdGVCaW5kaW5ncyA9IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBAbmdkb2MgcHJvcGVydHkKICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGlkCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBVbmlxdWUgc2NvcGUgSUQgKG1vbm90b25pY2FsbHkgaW5jcmVhc2luZykgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuCiAgICAgKi8KCiAgICAgLyoqCiAgICAgICogQG5nZG9jIHByb3BlcnR5CiAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkcGFyZW50CiAgICAgICoKICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBzY29wZS4KICAgICAgKi8KCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgcHJvcGVydHkKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkcm9vdAogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogUmVmZXJlbmNlIHRvIHRoZSByb290IHNjb3BlLgogICAgICAgKi8KCiAgICBTY29wZS5wcm90b3R5cGUgPSB7CiAgICAgIGNvbnN0cnVjdG9yOiBTY29wZSwKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkbmV3CiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBDcmVhdGVzIGEgbmV3IGNoaWxkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfS4KICAgICAgICoKICAgICAgICogVGhlIHBhcmVudCBzY29wZSB3aWxsIHByb3BhZ2F0ZSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IGV2ZW50LgogICAgICAgKiBUaGUgc2NvcGUgY2FuIGJlIHJlbW92ZWQgZnJvbSB0aGUgc2NvcGUgaGllcmFyY2h5IHVzaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95ICRkZXN0cm95KCl9LgogICAgICAgKgogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfSBtdXN0IGJlIGNhbGxlZCBvbiBhIHNjb3BlIHdoZW4gaXQgaXMKICAgICAgICogZGVzaXJlZCBmb3IgdGhlIHNjb3BlIGFuZCBpdHMgY2hpbGQgc2NvcGVzIHRvIGJlIHBlcm1hbmVudGx5IGRldGFjaGVkIGZyb20gdGhlIHBhcmVudCBhbmQKICAgICAgICogdGh1cyBzdG9wIHBhcnRpY2lwYXRpbmcgaW4gbW9kZWwgY2hhbmdlIGRldGVjdGlvbiBhbmQgbGlzdGVuZXIgbm90aWZpY2F0aW9uIGJ5IGludm9raW5nLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzb2xhdGUgSWYgdHJ1ZSwgdGhlbiB0aGUgc2NvcGUgZG9lcyBub3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdCBmcm9tIHRoZQogICAgICAgKiAgICAgICAgIHBhcmVudCBzY29wZS4gVGhlIHNjb3BlIGlzIGlzb2xhdGVkLCBhcyBpdCBjYW4gbm90IHNlZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy4KICAgICAgICogICAgICAgICBXaGVuIGNyZWF0aW5nIHdpZGdldHMsIGl0IGlzIHVzZWZ1bCBmb3IgdGhlIHdpZGdldCB0byBub3QgYWNjaWRlbnRhbGx5IHJlYWQgcGFyZW50CiAgICAgICAqICAgICAgICAgc3RhdGUuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7U2NvcGV9IFtwYXJlbnQ9dGhpc10gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIGBTY29wZWB9IHRoYXQgd2lsbCBiZSB0aGUgYCRwYXJlbnRgCiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgc2NvcGUuIERlZmF1bHRzIHRvIGB0aGlzYCBzY29wZSBpZiBub3QgcHJvdmlkZWQuCiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSB0cmFuc2NsdWRlIHNjb3BlIHRvIGNvcnJlY3RseSBwbGFjZSBpdAogICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBzY29wZSBoaWVyYXJjaHkgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIGNvcnJlY3QgcHJvdG90eXBpY2FsCiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFuY2UuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBuZXdseSBjcmVhdGVkIGNoaWxkIHNjb3BlLgogICAgICAgKgogICAgICAgKi8KICAgICAgJG5ldzogZnVuY3Rpb24oaXNvbGF0ZSwgcGFyZW50KSB7CiAgICAgICAgdmFyIGNoaWxkOwoKICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgdGhpczsKCiAgICAgICAgaWYgKGlzb2xhdGUpIHsKICAgICAgICAgIGNoaWxkID0gbmV3IFNjb3BlKCk7CiAgICAgICAgICBjaGlsZC4kcm9vdCA9IHRoaXMuJHJvb3Q7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIE9ubHkgY3JlYXRlIGEgY2hpbGQgc2NvcGUgY2xhc3MgaWYgc29tZWJvZHkgYXNrcyBmb3Igb25lLAogICAgICAgICAgLy8gYnV0IGNhY2hlIGl0IHRvIGFsbG93IHRoZSBWTSB0byBvcHRpbWl6ZSBsb29rdXBzLgogICAgICAgICAgaWYgKCF0aGlzLiQkQ2hpbGRTY29wZSkgewogICAgICAgICAgICB0aGlzLiQkQ2hpbGRTY29wZSA9IGZ1bmN0aW9uIENoaWxkU2NvcGUoKSB7CiAgICAgICAgICAgICAgdGhpcy4kJHdhdGNoZXJzID0gdGhpcy4kJG5leHRTaWJsaW5nID0KICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsOwogICAgICAgICAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTsKICAgICAgICAgICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9OwogICAgICAgICAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpOwogICAgICAgICAgICAgIHRoaXMuJCRDaGlsZFNjb3BlID0gbnVsbDsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdGhpcy4kJENoaWxkU2NvcGUucHJvdG90eXBlID0gdGhpczsKICAgICAgICAgIH0KICAgICAgICAgIGNoaWxkID0gbmV3IHRoaXMuJCRDaGlsZFNjb3BlKCk7CiAgICAgICAgfQogICAgICAgIGNoaWxkLiRwYXJlbnQgPSBwYXJlbnQ7CiAgICAgICAgY2hpbGQuJCRwcmV2U2libGluZyA9IHBhcmVudC4kJGNoaWxkVGFpbDsKICAgICAgICBpZiAocGFyZW50LiQkY2hpbGRIZWFkKSB7CiAgICAgICAgICBwYXJlbnQuJCRjaGlsZFRhaWwuJCRuZXh0U2libGluZyA9IGNoaWxkOwogICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHBhcmVudC4kJGNoaWxkSGVhZCA9IHBhcmVudC4kJGNoaWxkVGFpbCA9IGNoaWxkOwogICAgICAgIH0KCiAgICAgICAgLy8gV2hlbiB0aGUgbmV3IHNjb3BlIGlzIG5vdCBpc29sYXRlZCBvciB3ZSBpbmhlcml0IGZyb20gYHRoaXNgLCBhbmQKICAgICAgICAvLyB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZCwgdGhlIHByb3BlcnR5IGAkJGRlc3Ryb3llZGAgaXMgaW5oZXJpdGVkCiAgICAgICAgLy8gcHJvdG90eXBpY2FsbHkuIEluIGFsbCBvdGhlciBjYXNlcywgdGhpcyBwcm9wZXJ0eSBuZWVkcyB0byBiZSBzZXQKICAgICAgICAvLyB3aGVuIHRoZSBwYXJlbnQgc2NvcGUgaXMgZGVzdHJveWVkLgogICAgICAgIC8vIFRoZSBsaXN0ZW5lciBuZWVkcyB0byBiZSBhZGRlZCBhZnRlciB0aGUgcGFyZW50IGlzIHNldAogICAgICAgIGlmIChpc29sYXRlIHx8IHBhcmVudCAhPSB0aGlzKSBjaGlsZC4kb24oJyRkZXN0cm95JywgZGVzdHJveUNoaWxkKTsKCiAgICAgICAgcmV0dXJuIGNoaWxkOwoKICAgICAgICBmdW5jdGlvbiBkZXN0cm95Q2hpbGQoKSB7CiAgICAgICAgICBjaGlsZC4kJGRlc3Ryb3llZCA9IHRydWU7CiAgICAgICAgfQogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkd2F0Y2gKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFJlZ2lzdGVycyBhIGBsaXN0ZW5lcmAgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWQgd2hlbmV2ZXIgdGhlIGB3YXRjaEV4cHJlc3Npb25gIGNoYW5nZXMuCiAgICAgICAqCiAgICAgICAqIC0gVGhlIGB3YXRjaEV4cHJlc3Npb25gIGlzIGNhbGxlZCBvbiBldmVyeSBjYWxsIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QKICAgICAgICogICAkZGlnZXN0KCl9IGFuZCBzaG91bGQgcmV0dXJuIHRoZSB2YWx1ZSB0aGF0IHdpbGwgYmUgd2F0Y2hlZC4gKFNpbmNlCiAgICAgICAqICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IHJlcnVucyB3aGVuIGl0IGRldGVjdHMgY2hhbmdlcyB0aGUKICAgICAgICogICBgd2F0Y2hFeHByZXNzaW9uYCBjYW4gZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBwZXIKICAgICAgICogICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gYW5kIHNob3VsZCBiZSBpZGVtcG90ZW50LikKICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgb25seSB3aGVuIHRoZSB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGB3YXRjaEV4cHJlc3Npb25gIGFuZCB0aGUKICAgICAgICogICBwcmV2aW91cyBjYWxsIHRvIGB3YXRjaEV4cHJlc3Npb25gIGFyZSBub3QgZXF1YWwgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgaW5pdGlhbCBydW4sCiAgICAgICAqICAgc2VlIGJlbG93KS4gSW5lcXVhbGl0eSBpcyBkZXRlcm1pbmVkIGFjY29yZGluZyB0byByZWZlcmVuY2UgaW5lcXVhbGl0eSwKICAgICAgICogICBbc3RyaWN0IGNvbXBhcmlzb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9Db21wYXJpc29uX09wZXJhdG9ycykKICAgICAgICogICAgdmlhIHRoZSBgIT09YCBKYXZhc2NyaXB0IG9wZXJhdG9yLCB1bmxlc3MgYG9iamVjdEVxdWFsaXR5ID09IHRydWVgCiAgICAgICAqICAgKHNlZSBuZXh0IHBvaW50KQogICAgICAgKiAtIFdoZW4gYG9iamVjdEVxdWFsaXR5ID09IHRydWVgLCBpbmVxdWFsaXR5IG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBkZXRlcm1pbmVkCiAgICAgICAqICAgYWNjb3JkaW5nIHRvIHRoZSB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGZ1bmN0aW9uLiBUbyBzYXZlIHRoZSB2YWx1ZSBvZiB0aGUgb2JqZWN0IGZvcgogICAgICAgKiAgIGxhdGVyIGNvbXBhcmlzb24sIHRoZSB7QGxpbmsgYW5ndWxhci5jb3B5fSBmdW5jdGlvbiBpcyB1c2VkLiBUaGlzIHRoZXJlZm9yZSBtZWFucyB0aGF0CiAgICAgICAqICAgd2F0Y2hpbmcgY29tcGxleCBvYmplY3RzIHdpbGwgaGF2ZSBhZHZlcnNlIG1lbW9yeSBhbmQgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLgogICAgICAgKiAtIFRoZSB3YXRjaCBgbGlzdGVuZXJgIG1heSBjaGFuZ2UgdGhlIG1vZGVsLCB3aGljaCBtYXkgdHJpZ2dlciBvdGhlciBgbGlzdGVuZXJgcyB0byBmaXJlLgogICAgICAgKiAgIFRoaXMgaXMgYWNoaWV2ZWQgYnkgcmVydW5uaW5nIHRoZSB3YXRjaGVycyB1bnRpbCBubyBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gVGhlIHJlcnVuCiAgICAgICAqICAgaXRlcmF0aW9uIGxpbWl0IGlzIDEwIHRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcCBkZWFkbG9jay4KICAgICAgICoKICAgICAgICoKICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBpcyBjYWxsZWQsCiAgICAgICAqIHlvdSBjYW4gcmVnaXN0ZXIgYSBgd2F0Y2hFeHByZXNzaW9uYCBmdW5jdGlvbiB3aXRoIG5vIGBsaXN0ZW5lcmAuIChTaW5jZSBgd2F0Y2hFeHByZXNzaW9uYAogICAgICAgKiBjYW4gZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBwZXIge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZSB3aGVuIGEKICAgICAgICogY2hhbmdlIGlzIGRldGVjdGVkLCBiZSBwcmVwYXJlZCBmb3IgbXVsdGlwbGUgY2FsbHMgdG8geW91ciBsaXN0ZW5lci4pCiAgICAgICAqCiAgICAgICAqIEFmdGVyIGEgd2F0Y2hlciBpcyByZWdpc3RlcmVkIHdpdGggdGhlIHNjb3BlLCB0aGUgYGxpc3RlbmVyYCBmbiBpcyBjYWxsZWQgYXN5bmNocm9ub3VzbHkKICAgICAgICogKHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jICRldmFsQXN5bmN9KSB0byBpbml0aWFsaXplIHRoZQogICAgICAgKiB3YXRjaGVyLiBJbiByYXJlIGNhc2VzLCB0aGlzIGlzIHVuZGVzaXJhYmxlIGJlY2F1c2UgdGhlIGxpc3RlbmVyIGlzIGNhbGxlZCB3aGVuIHRoZSByZXN1bHQKICAgICAgICogb2YgYHdhdGNoRXhwcmVzc2lvbmAgZGlkbid0IGNoYW5nZS4gVG8gZGV0ZWN0IHRoaXMgc2NlbmFyaW8gd2l0aGluIHRoZSBgbGlzdGVuZXJgIGZuLCB5b3UKICAgICAgICogY2FuIGNvbXBhcmUgdGhlIGBuZXdWYWxgIGFuZCBgb2xkVmFsYC4gSWYgdGhlc2UgdHdvIHZhbHVlcyBhcmUgaWRlbnRpY2FsIChgPT09YCkgdGhlbiB0aGUKICAgICAgICogbGlzdGVuZXIgd2FzIGNhbGxlZCBkdWUgdG8gaW5pdGlhbGl6YXRpb24uCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiBgYGBqcwogICAgICAgICAgIC8vIGxldCdzIGFzc3VtZSB0aGF0IHNjb3BlIHdhcyBkZXBlbmRlbmN5IGluamVjdGVkIGFzIHRoZSAkcm9vdFNjb3BlCiAgICAgICAgICAgdmFyIHNjb3BlID0gJHJvb3RTY29wZTsKICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJzsKICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDsKCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICBzY29wZS5jb3VudGVyID0gc2NvcGUuY291bnRlciArIDE7CiAgICAgICAgICAgfSk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CgogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIgaXMgYWx3YXlzIGNhbGxlZCBkdXJpbmcgdGhlIGZpcnN0ICRkaWdlc3QgbG9vcCBhZnRlciBpdCB3YXMgcmVnaXN0ZXJlZAogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpOwoKICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAgLy8gYnV0IG5vdyBpdCB3aWxsIG5vdCBiZSBjYWxsZWQgdW5sZXNzIHRoZSB2YWx1ZSBjaGFuZ2VzCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7CgogICAgICAgICAgIHNjb3BlLm5hbWUgPSAnYWRhbSc7CiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDIpOwoKCgogICAgICAgICAgIC8vIFVzaW5nIGEgZnVuY3Rpb24gYXMgYSB3YXRjaEV4cHJlc3Npb24KICAgICAgICAgICB2YXIgZm9vZDsKICAgICAgICAgICBzY29wZS5mb29kQ291bnRlciA9IDA7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApOwogICAgICAgICAgIHNjb3BlLiR3YXRjaCgKICAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdmFsdWUgYmVpbmcgd2F0Y2hlZC4gSXQgaXMgY2FsbGVkIGZvciBlYWNoIHR1cm4gb2YgdGhlICRkaWdlc3QgbG9vcAogICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBmb29kOyB9LAogICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2hhbmdlIGxpc3RlbmVyLCBjYWxsZWQgd2hlbiB0aGUgdmFsdWUgcmV0dXJuZWQgZnJvbSB0aGUgYWJvdmUgZnVuY3Rpb24gY2hhbmdlcwogICAgICAgICAgICAgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICAgIGlmICggbmV3VmFsdWUgIT09IG9sZFZhbHVlICkgewogICAgICAgICAgICAgICAgIC8vIE9ubHkgaW5jcmVtZW50IHRoZSBjb3VudGVyIGlmIHRoZSB2YWx1ZSBjaGFuZ2VkCiAgICAgICAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSBzY29wZS5mb29kQ291bnRlciArIDE7CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KICAgICAgICAgICApOwogICAgICAgICAgIC8vIE5vIGRpZ2VzdCBoYXMgYmVlbiBydW4gc28gdGhlIGNvdW50ZXIgd2lsbCBiZSB6ZXJvCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApOwoKICAgICAgICAgICAvLyBSdW4gdGhlIGRpZ2VzdCBidXQgc2luY2UgZm9vZCBoYXMgbm90IGNoYW5nZWQgY291bnQgd2lsbCBzdGlsbCBiZSB6ZXJvCiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTsKCiAgICAgICAgICAgLy8gVXBkYXRlIGZvb2QgYW5kIHJ1biBkaWdlc3QuICBOb3cgdGhlIGNvdW50ZXIgd2lsbCBpbmNyZW1lbnQKICAgICAgICAgICBmb29kID0gJ2NoZWVzZWJ1cmdlcic7CiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgxKTsKCiAgICAgICAqIGBgYAogICAgICAgKgogICAgICAgKgogICAgICAgKgogICAgICAgKiBAcGFyYW0geyhmdW5jdGlvbigpfHN0cmluZyl9IHdhdGNoRXhwcmVzc2lvbiBFeHByZXNzaW9uIHRoYXQgaXMgZXZhbHVhdGVkIG9uIGVhY2gKICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQSBjaGFuZ2UgaW4gdGhlIHJldHVybiB2YWx1ZSB0cmlnZ2VycwogICAgICAgKiAgICBhIGNhbGwgdG8gdGhlIGBsaXN0ZW5lcmAuCiAgICAgICAqCiAgICAgICAqICAgIC0gYHN0cmluZ2A6IEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufQogICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBjYWxsZWQgd2l0aCBjdXJyZW50IGBzY29wZWAgYXMgYSBwYXJhbWV0ZXIuCiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSB2YWx1ZQogICAgICAgKiAgICBvZiBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLgogICAgICAgKgogICAgICAgKiAgICAtIGBuZXdWYWxgIGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYAogICAgICAgKiAgICAtIGBvbGRWYWxgIGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmAKICAgICAgICogICAgLSBgc2NvcGVgIHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZQogICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvYmplY3RFcXVhbGl0eSBDb21wYXJlIGZvciBvYmplY3QgZXF1YWxpdHkgdXNpbmcge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBpbnN0ZWFkIG9mCiAgICAgICAqICAgICBjb21wYXJpbmcgZm9yIHJlZmVyZW5jZSBlcXVhbGl0eS4KICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4KICAgICAgICovCiAgICAgICR3YXRjaDogZnVuY3Rpb24od2F0Y2hFeHAsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSkgewogICAgICAgIHZhciBnZXQgPSAkcGFyc2Uod2F0Y2hFeHApOwoKICAgICAgICBpZiAoZ2V0LiQkd2F0Y2hEZWxlZ2F0ZSkgewogICAgICAgICAgcmV0dXJuIGdldC4kJHdhdGNoRGVsZWdhdGUodGhpcywgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBnZXQpOwogICAgICAgIH0KICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLAogICAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMsCiAgICAgICAgICAgIHdhdGNoZXIgPSB7CiAgICAgICAgICAgICAgZm46IGxpc3RlbmVyLAogICAgICAgICAgICAgIGxhc3Q6IGluaXRXYXRjaFZhbCwKICAgICAgICAgICAgICBnZXQ6IGdldCwKICAgICAgICAgICAgICBleHA6IHdhdGNoRXhwLAogICAgICAgICAgICAgIGVxOiAhIW9iamVjdEVxdWFsaXR5CiAgICAgICAgICAgIH07CgogICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDsKCiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkgewogICAgICAgICAgd2F0Y2hlci5mbiA9IG5vb3A7CiAgICAgICAgfQoKICAgICAgICBpZiAoIWFycmF5KSB7CiAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMgPSBbXTsKICAgICAgICB9CiAgICAgICAgLy8gd2UgdXNlIHVuc2hpZnQgc2luY2Ugd2UgdXNlIGEgd2hpbGUgbG9vcCBpbiAkZGlnZXN0IGZvciBzcGVlZC4KICAgICAgICAvLyB0aGUgd2hpbGUgbG9vcCByZWFkcyBpbiByZXZlcnNlIG9yZGVyLgogICAgICAgIGFycmF5LnVuc2hpZnQod2F0Y2hlcik7CgogICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2goKSB7CiAgICAgICAgICBhcnJheVJlbW92ZShhcnJheSwgd2F0Y2hlcik7CiAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7CiAgICAgICAgfTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoR3JvdXAKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIEEgdmFyaWFudCBvZiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggJHdhdGNoKCl9IHdoZXJlIGl0IHdhdGNoZXMgYW4gYXJyYXkgb2YgYHdhdGNoRXhwcmVzc2lvbnNgLgogICAgICAgKiBJZiBhbnkgb25lIGV4cHJlc3Npb24gaW4gdGhlIGNvbGxlY3Rpb24gY2hhbmdlcyB0aGUgYGxpc3RlbmVyYCBpcyBleGVjdXRlZC4KICAgICAgICoKICAgICAgICogLSBUaGUgaXRlbXMgaW4gdGhlIGB3YXRjaEV4cHJlc3Npb25zYCBhcnJheSBhcmUgb2JzZXJ2ZWQgdmlhIHN0YW5kYXJkICR3YXRjaCBvcGVyYXRpb24gYW5kIGFyZSBleGFtaW5lZCBvbiBldmVyeQogICAgICAgKiAgIGNhbGwgdG8gJGRpZ2VzdCgpIHRvIHNlZSBpZiBhbnkgaXRlbXMgY2hhbmdlcy4KICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55IGV4cHJlc3Npb24gaW4gdGhlIGB3YXRjaEV4cHJlc3Npb25zYCBhcnJheSBjaGFuZ2VzLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8RnVuY3Rpb24oc2NvcGUpPn0gd2F0Y2hFeHByZXNzaW9ucyBBcnJheSBvZiBleHByZXNzaW9ucyB0aGF0IHdpbGwgYmUgaW5kaXZpZHVhbGx5CiAgICAgICAqIHdhdGNoZWQgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfQogICAgICAgKgogICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld1ZhbHVlcywgb2xkVmFsdWVzLCBzY29wZSl9IGxpc3RlbmVyIENhbGxiYWNrIGNhbGxlZCB3aGVuZXZlciB0aGUgcmV0dXJuIHZhbHVlIG9mIGFueQogICAgICAgKiAgICBleHByZXNzaW9uIGluIGB3YXRjaEV4cHJlc3Npb25zYCBjaGFuZ2VzCiAgICAgICAqICAgIFRoZSBgbmV3VmFsdWVzYCBhcnJheSBjb250YWlucyB0aGUgY3VycmVudCB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZwogICAgICAgKiAgICB0aG9zZSBvZiBgd2F0Y2hFeHByZXNzaW9uYAogICAgICAgKiAgICBhbmQgdGhlIGBvbGRWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZwogICAgICAgKiAgICB0aG9zZSBvZiBgd2F0Y2hFeHByZXNzaW9uYAogICAgICAgKiAgICBUaGUgYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGUuCiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciBhbGwgbGlzdGVuZXJzLgogICAgICAgKi8KICAgICAgJHdhdGNoR3JvdXA6IGZ1bmN0aW9uKHdhdGNoRXhwcmVzc2lvbnMsIGxpc3RlbmVyKSB7CiAgICAgICAgdmFyIG9sZFZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7CiAgICAgICAgdmFyIG5ld1ZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7CiAgICAgICAgdmFyIGRlcmVnaXN0ZXJGbnMgPSBbXTsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgdmFyIGNoYW5nZVJlYWN0aW9uU2NoZWR1bGVkID0gZmFsc2U7CiAgICAgICAgdmFyIGZpcnN0UnVuID0gdHJ1ZTsKCiAgICAgICAgaWYgKCF3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCkgewogICAgICAgICAgLy8gTm8gZXhwcmVzc2lvbnMgbWVhbnMgd2UgY2FsbCB0aGUgbGlzdGVuZXIgQVNBUAogICAgICAgICAgdmFyIHNob3VsZENhbGwgPSB0cnVlOwogICAgICAgICAgc2VsZi4kZXZhbEFzeW5jKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHNob3VsZENhbGwpIGxpc3RlbmVyKG5ld1ZhbHVlcywgbmV3VmFsdWVzLCBzZWxmKTsKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkgewogICAgICAgICAgICBzaG91bGRDYWxsID0gZmFsc2U7CiAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgaWYgKHdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugc2l6ZSBvZiBvbmUKICAgICAgICAgIHJldHVybiB0aGlzLiR3YXRjaCh3YXRjaEV4cHJlc3Npb25zWzBdLCBmdW5jdGlvbiB3YXRjaEdyb3VwQWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSwgc2NvcGUpIHsKICAgICAgICAgICAgbmV3VmFsdWVzWzBdID0gdmFsdWU7CiAgICAgICAgICAgIG9sZFZhbHVlc1swXSA9IG9sZFZhbHVlOwogICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZXMsICh2YWx1ZSA9PT0gb2xkVmFsdWUpID8gbmV3VmFsdWVzIDogb2xkVmFsdWVzLCBzY29wZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZvckVhY2god2F0Y2hFeHByZXNzaW9ucywgZnVuY3Rpb24gKGV4cHIsIGkpIHsKICAgICAgICAgIHZhciB1bndhdGNoRm4gPSBzZWxmLiR3YXRjaChleHByLCBmdW5jdGlvbiB3YXRjaEdyb3VwU3ViQWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgICBuZXdWYWx1ZXNbaV0gPSB2YWx1ZTsKICAgICAgICAgICAgb2xkVmFsdWVzW2ldID0gb2xkVmFsdWU7CiAgICAgICAgICAgIGlmICghY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQpIHsKICAgICAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IHRydWU7CiAgICAgICAgICAgICAgc2VsZi4kZXZhbEFzeW5jKHdhdGNoR3JvdXBBY3Rpb24pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIGRlcmVnaXN0ZXJGbnMucHVzaCh1bndhdGNoRm4pOwogICAgICAgIH0pOwoKICAgICAgICBmdW5jdGlvbiB3YXRjaEdyb3VwQWN0aW9uKCkgewogICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSBmYWxzZTsKCiAgICAgICAgICBpZiAoZmlyc3RSdW4pIHsKICAgICAgICAgICAgZmlyc3RSdW4gPSBmYWxzZTsKICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNlbGYpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkgewogICAgICAgICAgd2hpbGUgKGRlcmVnaXN0ZXJGbnMubGVuZ3RoKSB7CiAgICAgICAgICAgIGRlcmVnaXN0ZXJGbnMuc2hpZnQoKSgpOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH0sCgoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkd2F0Y2hDb2xsZWN0aW9uCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBTaGFsbG93IHdhdGNoZXMgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZCBmaXJlcyB3aGVuZXZlciBhbnkgb2YgdGhlIHByb3BlcnRpZXMgY2hhbmdlCiAgICAgICAqIChmb3IgYXJyYXlzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmcgdGhlIGFycmF5IGl0ZW1zOyBmb3Igb2JqZWN0IG1hcHMsIHRoaXMgaW1wbGllcyB3YXRjaGluZwogICAgICAgKiB0aGUgcHJvcGVydGllcykuIElmIGEgY2hhbmdlIGlzIGRldGVjdGVkLCB0aGUgYGxpc3RlbmVyYCBjYWxsYmFjayBpcyBmaXJlZC4KICAgICAgICoKICAgICAgICogLSBUaGUgYG9iamAgY29sbGVjdGlvbiBpcyBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgaXMgZXhhbWluZWQgb24gZXZlcnkKICAgICAgICogICBjYWxsIHRvICRkaWdlc3QoKSB0byBzZWUgaWYgYW55IGl0ZW1zIGhhdmUgYmVlbiBhZGRlZCwgcmVtb3ZlZCwgb3IgbW92ZWQuCiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueXRoaW5nIHdpdGhpbiB0aGUgYG9iamAgaGFzIGNoYW5nZWQuIEV4YW1wbGVzIGluY2x1ZGUKICAgICAgICogICBhZGRpbmcsIHJlbW92aW5nLCBhbmQgbW92aW5nIGl0ZW1zIGJlbG9uZ2luZyB0byBhbiBvYmplY3Qgb3IgYXJyYXkuCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiBgYGBqcwogICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydpZ29yJywgJ21hdGlhcycsICdtaXNrbycsICdqYW1lcyddOwogICAgICAgICAgJHNjb3BlLmRhdGFDb3VudCA9IDQ7CgogICAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ25hbWVzJywgZnVuY3Rpb24obmV3TmFtZXMsIG9sZE5hbWVzKSB7CiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSBuZXdOYW1lcy5sZW5ndGg7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTsKICAgICAgICAgICRzY29wZS4kZGlnZXN0KCk7CgogICAgICAgICAgLy9zdGlsbCBhdCA0IC4uLiBubyBjaGFuZ2VzCiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTsKCiAgICAgICAgICAkc2NvcGUubmFtZXMucG9wKCk7CiAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpOwoKICAgICAgICAgIC8vbm93IHRoZXJlJ3MgYmVlbiBhIGNoYW5nZQogICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoMyk7CiAgICAgICAqIGBgYAogICAgICAgKgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbihzY29wZSl9IG9iaiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uIFRoZQogICAgICAgKiAgICBleHByZXNzaW9uIHZhbHVlIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgd2hpY2ggaXMgb2JzZXJ2ZWQgb24gZWFjaAogICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlLiBBbnkgc2hhbGxvdyBjaGFuZ2Ugd2l0aGluIHRoZQogICAgICAgKiAgICBjb2xsZWN0aW9uIHdpbGwgdHJpZ2dlciBhIGNhbGwgdG8gdGhlIGBsaXN0ZW5lcmAuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3Q29sbGVjdGlvbiwgb2xkQ29sbGVjdGlvbiwgc2NvcGUpfSBsaXN0ZW5lciBhIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZAogICAgICAgKiAgICB3aGVuIGEgY2hhbmdlIGlzIGRldGVjdGVkLgogICAgICAgKiAgICAtIFRoZSBgbmV3Q29sbGVjdGlvbmAgb2JqZWN0IGlzIHRoZSBuZXdseSBtb2RpZmllZCBkYXRhIG9idGFpbmVkIGZyb20gdGhlIGBvYmpgIGV4cHJlc3Npb24KICAgICAgICogICAgLSBUaGUgYG9sZENvbGxlY3Rpb25gIG9iamVjdCBpcyBhIGNvcHkgb2YgdGhlIGZvcm1lciBjb2xsZWN0aW9uIGRhdGEuCiAgICAgICAqICAgICAgRHVlIHRvIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb25zLCB0aGVgb2xkQ29sbGVjdGlvbmAgdmFsdWUgaXMgY29tcHV0ZWQgb25seSBpZiB0aGUKICAgICAgICogICAgICBgbGlzdGVuZXJgIGZ1bmN0aW9uIGRlY2xhcmVzIHR3byBvciBtb3JlIGFyZ3VtZW50cy4KICAgICAgICogICAgLSBUaGUgYHNjb3BlYCBhcmd1bWVudCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGUuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLiBXaGVuIHRoZQogICAgICAgKiAgICBkZS1yZWdpc3RyYXRpb24gZnVuY3Rpb24gaXMgZXhlY3V0ZWQsIHRoZSBpbnRlcm5hbCB3YXRjaCBvcGVyYXRpb24gaXMgdGVybWluYXRlZC4KICAgICAgICovCiAgICAgICR3YXRjaENvbGxlY3Rpb246IGZ1bmN0aW9uKG9iaiwgbGlzdGVuZXIpIHsKICAgICAgICAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IuJHN0YXRlZnVsID0gdHJ1ZTsKCiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgIC8vIHRoZSBjdXJyZW50IHZhbHVlLCB1cGRhdGVkIG9uIGVhY2ggZGlydHktY2hlY2sgcnVuCiAgICAgICAgdmFyIG5ld1ZhbHVlOwogICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHRoZSBsYXN0IGRpcnR5LWNoZWNrIHJ1biwKICAgICAgICAvLyB1cGRhdGVkIHRvIG1hdGNoIG5ld1ZhbHVlIGR1cmluZyBkaXJ0eS1jaGVjayBydW4KICAgICAgICB2YXIgb2xkVmFsdWU7CiAgICAgICAgLy8gYSBzaGFsbG93IGNvcHkgb2YgdGhlIG5ld1ZhbHVlIGZyb20gd2hlbiB0aGUgbGFzdCBjaGFuZ2UgaGFwcGVuZWQKICAgICAgICB2YXIgdmVyeU9sZFZhbHVlOwogICAgICAgIC8vIG9ubHkgdHJhY2sgdmVyeU9sZFZhbHVlIGlmIHRoZSBsaXN0ZW5lciBpcyBhc2tpbmcgZm9yIGl0CiAgICAgICAgdmFyIHRyYWNrVmVyeU9sZFZhbHVlID0gKGxpc3RlbmVyLmxlbmd0aCA+IDEpOwogICAgICAgIHZhciBjaGFuZ2VEZXRlY3RlZCA9IDA7CiAgICAgICAgdmFyIGNoYW5nZURldGVjdG9yID0gJHBhcnNlKG9iaiwgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKTsKICAgICAgICB2YXIgaW50ZXJuYWxBcnJheSA9IFtdOwogICAgICAgIHZhciBpbnRlcm5hbE9iamVjdCA9IHt9OwogICAgICAgIHZhciBpbml0UnVuID0gdHJ1ZTsKICAgICAgICB2YXIgb2xkTGVuZ3RoID0gMDsKCiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKF92YWx1ZSkgewogICAgICAgICAgbmV3VmFsdWUgPSBfdmFsdWU7CiAgICAgICAgICB2YXIgbmV3TGVuZ3RoLCBrZXksIGJvdGhOYU4sIG5ld0l0ZW0sIG9sZEl0ZW07CgogICAgICAgICAgaWYgKCFpc09iamVjdChuZXdWYWx1ZSkpIHsgLy8gaWYgcHJpbWl0aXZlCiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHsKICAgICAgICAgICAgICBvbGRWYWx1ZSA9IG5ld1ZhbHVlOwogICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2UobmV3VmFsdWUpKSB7CiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gaW50ZXJuYWxBcnJheSkgewogICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gYXJyYXkgaW50byBhcnJheS4KICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGludGVybmFsQXJyYXk7CiAgICAgICAgICAgICAgb2xkTGVuZ3RoID0gb2xkVmFsdWUubGVuZ3RoID0gMDsKICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBuZXdMZW5ndGggPSBuZXdWYWx1ZS5sZW5ndGg7CgogICAgICAgICAgICBpZiAob2xkTGVuZ3RoICE9PSBuZXdMZW5ndGgpIHsKICAgICAgICAgICAgICAvLyBpZiBsZW5ndGhzIGRvIG5vdCBtYXRjaCB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIG5vdGlmaWNhdGlvbgogICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7CiAgICAgICAgICAgICAgb2xkVmFsdWUubGVuZ3RoID0gb2xkTGVuZ3RoID0gbmV3TGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGNvcHkgdGhlIGl0ZW1zIHRvIG9sZFZhbHVlIGFuZCBsb29rIGZvciBjaGFuZ2VzLgogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0xlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2ldOwogICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXdWYWx1ZVtpXTsKCiAgICAgICAgICAgICAgYm90aE5hTiA9IChvbGRJdGVtICE9PSBvbGRJdGVtKSAmJiAobmV3SXRlbSAhPT0gbmV3SXRlbSk7CiAgICAgICAgICAgICAgaWYgKCFib3RoTmFOICYmIChvbGRJdGVtICE9PSBuZXdJdGVtKSkgewogICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKzsKICAgICAgICAgICAgICAgIG9sZFZhbHVlW2ldID0gbmV3SXRlbTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gaW50ZXJuYWxPYmplY3QpIHsKICAgICAgICAgICAgICAvLyB3ZSBhcmUgdHJhbnNpdGlvbmluZyBmcm9tIHNvbWV0aGluZyB3aGljaCB3YXMgbm90IGFuIG9iamVjdCBpbnRvIG9iamVjdC4KICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGludGVybmFsT2JqZWN0ID0ge307CiAgICAgICAgICAgICAgb2xkTGVuZ3RoID0gMDsKICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGNvcHkgdGhlIGl0ZW1zIHRvIG9sZFZhbHVlIGFuZCBsb29rIGZvciBjaGFuZ2VzLgogICAgICAgICAgICBuZXdMZW5ndGggPSAwOwogICAgICAgICAgICBmb3IgKGtleSBpbiBuZXdWYWx1ZSkgewogICAgICAgICAgICAgIGlmIChuZXdWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICBuZXdMZW5ndGgrKzsKICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXdWYWx1ZVtrZXldOwogICAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2tleV07CgogICAgICAgICAgICAgICAgaWYgKGtleSBpbiBvbGRWYWx1ZSkgewogICAgICAgICAgICAgICAgICBib3RoTmFOID0gKG9sZEl0ZW0gIT09IG9sZEl0ZW0pICYmIChuZXdJdGVtICE9PSBuZXdJdGVtKTsKICAgICAgICAgICAgICAgICAgaWYgKCFib3RoTmFOICYmIChvbGRJdGVtICE9PSBuZXdJdGVtKSkgewogICAgICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7CiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWVba2V5XSA9IG5ld0l0ZW07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIG9sZExlbmd0aCsrOwogICAgICAgICAgICAgICAgICBvbGRWYWx1ZVtrZXldID0gbmV3SXRlbTsKICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkgewogICAgICAgICAgICAgIC8vIHdlIHVzZWQgdG8gaGF2ZSBtb3JlIGtleXMsIG5lZWQgdG8gZmluZCB0aGVtIGFuZCBkZXN0cm95IHRoZW0uCiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKzsKICAgICAgICAgICAgICBmb3Ioa2V5IGluIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICAgICBpZiAoIW5ld1ZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoLS07CiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRWYWx1ZVtrZXldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGNoYW5nZURldGVjdGVkOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkFjdGlvbigpIHsKICAgICAgICAgIGlmIChpbml0UnVuKSB7CiAgICAgICAgICAgIGluaXRSdW4gPSBmYWxzZTsKICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUsIG5ld1ZhbHVlLCBzZWxmKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCB2ZXJ5T2xkVmFsdWUsIHNlbGYpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIG1ha2UgYSBjb3B5IGZvciB0aGUgbmV4dCB0aW1lIGEgY29sbGVjdGlvbiBpcyBjaGFuZ2VkCiAgICAgICAgICBpZiAodHJhY2tWZXJ5T2xkVmFsdWUpIHsKICAgICAgICAgICAgaWYgKCFpc09iamVjdChuZXdWYWx1ZSkpIHsKICAgICAgICAgICAgICAvL3ByaW1pdGl2ZQogICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IG5ld1ZhbHVlOwogICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkgewogICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IG5ldyBBcnJheShuZXdWYWx1ZS5sZW5ndGgpOwogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3VmFsdWUubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZVtpXSA9IG5ld1ZhbHVlW2ldOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgb2JqZWN0CiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0ge307CiAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG5ld1ZhbHVlKSB7CiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkgewogICAgICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWVba2V5XSA9IG5ld1ZhbHVlW2tleV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2goY2hhbmdlRGV0ZWN0b3IsICR3YXRjaENvbGxlY3Rpb25BY3Rpb24pOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0CiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBQcm9jZXNzZXMgYWxsIG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9IG9mIHRoZSBjdXJyZW50IHNjb3BlIGFuZAogICAgICAgKiBpdHMgY2hpbGRyZW4uIEJlY2F1c2UgYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcn0ncyBsaXN0ZW5lciBjYW4gY2hhbmdlCiAgICAgICAqIHRoZSBtb2RlbCwgdGhlIGAkZGlnZXN0KClgIGtlZXBzIGNhbGxpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyc30KICAgICAgICogdW50aWwgbm8gbW9yZSBsaXN0ZW5lcnMgYXJlIGZpcmluZy4gVGhpcyBtZWFucyB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGdldCBpbnRvIGFuIGluZmluaXRlCiAgICAgICAqIGxvb3AuIFRoaXMgZnVuY3Rpb24gd2lsbCB0aHJvdyBgJ01heGltdW0gaXRlcmF0aW9uIGxpbWl0IGV4Y2VlZGVkLidgIGlmIHRoZSBudW1iZXIgb2YKICAgICAgICogaXRlcmF0aW9ucyBleGNlZWRzIDEwLgogICAgICAgKgogICAgICAgKiBVc3VhbGx5LCB5b3UgZG9uJ3QgY2FsbCBgJGRpZ2VzdCgpYCBkaXJlY3RseSBpbgogICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ29udHJvbGxlciBjb250cm9sbGVyc30gb3IgaW4KICAgICAgICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LgogICAgICAgKiBJbnN0ZWFkLCB5b3Ugc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseSgpfSAodHlwaWNhbGx5IGZyb20gd2l0aGluCiAgICAgICAqIGEge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZX0pLCB3aGljaCB3aWxsIGZvcmNlIGEgYCRkaWdlc3QoKWAuCiAgICAgICAqCiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIGAkZGlnZXN0KClgIGlzIGNhbGxlZCwKICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGgKICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aXRoIG5vIGBsaXN0ZW5lcmAuCiAgICAgICAqCiAgICAgICAqIEluIHVuaXQgdGVzdHMsIHlvdSBtYXkgbmVlZCB0byBjYWxsIGAkZGlnZXN0KClgIHRvIHNpbXVsYXRlIHRoZSBzY29wZSBsaWZlIGN5Y2xlLgogICAgICAgKgogICAgICAgKiAjIEV4YW1wbGUKICAgICAgICogYGBganMKICAgICAgICAgICB2YXIgc2NvcGUgPSAuLi47CiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdtaXNrbyc7CiAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7CgogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApOwogICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxOwogICAgICAgICAgIH0pOwogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApOwoKICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWQKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTsKCiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIC8vIGJ1dCBub3cgaXQgd2lsbCBub3QgYmUgY2FsbGVkIHVubGVzcyB0aGUgdmFsdWUgY2hhbmdlcwogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpOwoKICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nOwogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTsKICAgICAgICogYGBgCiAgICAgICAqCiAgICAgICAqLwogICAgICAkZGlnZXN0OiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgd2F0Y2gsIHZhbHVlLCBsYXN0LAogICAgICAgICAgICB3YXRjaGVycywKICAgICAgICAgICAgbGVuZ3RoLAogICAgICAgICAgICBkaXJ0eSwgdHRsID0gVFRMLAogICAgICAgICAgICBuZXh0LCBjdXJyZW50LCB0YXJnZXQgPSB0aGlzLAogICAgICAgICAgICB3YXRjaExvZyA9IFtdLAogICAgICAgICAgICBsb2dJZHgsIGxvZ01zZywgYXN5bmNUYXNrOwoKICAgICAgICBiZWdpblBoYXNlKCckZGlnZXN0Jyk7CiAgICAgICAgLy8gQ2hlY2sgZm9yIGNoYW5nZXMgdG8gYnJvd3NlciB1cmwgdGhhdCBoYXBwZW5lZCBpbiBzeW5jIGJlZm9yZSB0aGUgY2FsbCB0byAkZGlnZXN0CiAgICAgICAgJGJyb3dzZXIuJCRjaGVja1VybENoYW5nZSgpOwoKICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSAmJiBhcHBseUFzeW5jSWQgIT09IG51bGwpIHsKICAgICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIHJvb3Qgc2NvcGUsIGFuZCAkYXBwbHlBc3luYyBoYXMgc2NoZWR1bGVkIGEgZGVmZXJyZWQgJGFwcGx5KCksIHRoZW4KICAgICAgICAgIC8vIGNhbmNlbCB0aGUgc2NoZWR1bGVkICRhcHBseSBhbmQgZmx1c2ggdGhlIHF1ZXVlIG9mIGV4cHJlc3Npb25zIHRvIGJlIGV2YWx1YXRlZC4KICAgICAgICAgICRicm93c2VyLmRlZmVyLmNhbmNlbChhcHBseUFzeW5jSWQpOwogICAgICAgICAgZmx1c2hBcHBseUFzeW5jKCk7CiAgICAgICAgfQoKICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7CgogICAgICAgIGRvIHsgLy8gIndoaWxlIGRpcnR5IiBsb29wCiAgICAgICAgICBkaXJ0eSA9IGZhbHNlOwogICAgICAgICAgY3VycmVudCA9IHRhcmdldDsKCiAgICAgICAgICB3aGlsZShhc3luY1F1ZXVlLmxlbmd0aCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGFzeW5jVGFzayA9IGFzeW5jUXVldWUuc2hpZnQoKTsKICAgICAgICAgICAgICBhc3luY1Rhc2suc2NvcGUuJGV2YWwoYXN5bmNUYXNrLmV4cHJlc3Npb24pOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIHRyYXZlcnNlU2NvcGVzTG9vcDoKICAgICAgICAgIGRvIHsgLy8gInRyYXZlcnNlIHRoZSBzY29wZXMiIGxvb3AKICAgICAgICAgICAgaWYgKCh3YXRjaGVycyA9IGN1cnJlbnQuJCR3YXRjaGVycykpIHsKICAgICAgICAgICAgICAvLyBwcm9jZXNzIG91ciB3YXRjaGVzCiAgICAgICAgICAgICAgbGVuZ3RoID0gd2F0Y2hlcnMubGVuZ3RoOwogICAgICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgd2F0Y2ggPSB3YXRjaGVyc1tsZW5ndGhdOwogICAgICAgICAgICAgICAgICAvLyBNb3N0IGNvbW1vbiB3YXRjaGVzIGFyZSBvbiBwcmltaXRpdmVzLCBpbiB3aGljaCBjYXNlIHdlIGNhbiBzaG9ydAogICAgICAgICAgICAgICAgICAvLyBjaXJjdWl0IGl0IHdpdGggPT09IG9wZXJhdG9yLCBvbmx5IHdoZW4gPT09IGZhaWxzIGRvIHdlIHVzZSAuZXF1YWxzCiAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCkgewogICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgPSB3YXRjaC5nZXQoY3VycmVudCkpICE9PSAobGFzdCA9IHdhdGNoLmxhc3QpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICEod2F0Y2guZXEKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZXF1YWxzKHZhbHVlLCBsYXN0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgbGFzdCA9PT0gJ251bWJlcicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGlzTmFOKHZhbHVlKSAmJiBpc05hTihsYXN0KSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IHdhdGNoOwogICAgICAgICAgICAgICAgICAgICAgd2F0Y2gubGFzdCA9IHdhdGNoLmVxID8gY29weSh2YWx1ZSwgbnVsbCkgOiB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmZuKHZhbHVlLCAoKGxhc3QgPT09IGluaXRXYXRjaFZhbCkgPyB2YWx1ZSA6IGxhc3QpLCBjdXJyZW50KTsKICAgICAgICAgICAgICAgICAgICAgIGlmICh0dGwgPCA1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ0lkeCA9IDQgLSB0dGw7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2F0Y2hMb2dbbG9nSWR4XSkgd2F0Y2hMb2dbbG9nSWR4XSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBsb2dNc2cgPSAoaXNGdW5jdGlvbih3YXRjaC5leHApKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnZm46ICcgKyAod2F0Y2guZXhwLm5hbWUgfHwgd2F0Y2guZXhwLnRvU3RyaW5nKCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHdhdGNoLmV4cDsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nTXNnICs9ICc7IG5ld1ZhbDogJyArIHRvSnNvbih2YWx1ZSkgKyAnOyBvbGRWYWw6ICcgKyB0b0pzb24obGFzdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoTG9nW2xvZ0lkeF0ucHVzaChsb2dNc2cpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2F0Y2ggPT09IGxhc3REaXJ0eVdhdGNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbW9zdCByZWNlbnRseSBkaXJ0eSB3YXRjaGVyIGlzIG5vdyBjbGVhbiwgc2hvcnQgY2lyY3VpdCBzaW5jZSB0aGUgcmVtYWluaW5nIHdhdGNoZXJzCiAgICAgICAgICAgICAgICAgICAgICAvLyBoYXZlIGFscmVhZHkgYmVlbiB0ZXN0ZWQuCiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgdHJhdmVyc2VTY29wZXNMb29wOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbAogICAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IQogICAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRicm9hZGNhc3QKICAgICAgICAgICAgaWYgKCEobmV4dCA9IChjdXJyZW50LiQkY2hpbGRIZWFkIHx8CiAgICAgICAgICAgICAgICAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkgewogICAgICAgICAgICAgIHdoaWxlKGN1cnJlbnQgIT09IHRhcmdldCAmJiAhKG5leHQgPSBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSk7CgogICAgICAgICAgLy8gYGJyZWFrIHRyYXZlcnNlU2NvcGVzTG9vcDtgIHRha2VzIHVzIHRvIGhlcmUKCiAgICAgICAgICBpZigoZGlydHkgfHwgYXN5bmNRdWV1ZS5sZW5ndGgpICYmICEodHRsLS0pKSB7CiAgICAgICAgICAgIGNsZWFyUGhhc2UoKTsKICAgICAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5mZGlnJywKICAgICAgICAgICAgICAgICd7MH0gJGRpZ2VzdCgpIGl0ZXJhdGlvbnMgcmVhY2hlZC4gQWJvcnRpbmchXG4nICsKICAgICAgICAgICAgICAgICdXYXRjaGVycyBmaXJlZCBpbiB0aGUgbGFzdCA1IGl0ZXJhdGlvbnM6IHsxfScsCiAgICAgICAgICAgICAgICBUVEwsIHRvSnNvbih3YXRjaExvZykpOwogICAgICAgICAgfQoKICAgICAgICB9IHdoaWxlIChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCk7CgogICAgICAgIGNsZWFyUGhhc2UoKTsKCiAgICAgICAgd2hpbGUocG9zdERpZ2VzdFF1ZXVlLmxlbmd0aCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcG9zdERpZ2VzdFF1ZXVlLnNoaWZ0KCkoKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZXZlbnQKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveQogICAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiBzY29wZSBiZWluZyBkZXN0cm95ZWQKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIEJyb2FkY2FzdGVkIHdoZW4gYSBzY29wZSBhbmQgaXRzIGNoaWxkcmVuIGFyZSBiZWluZyBkZXN0cm95ZWQuCiAgICAgICAqCiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvCiAgICAgICAqIGNsZWFuIHVwIERPTSBiaW5kaW5ncyBiZWZvcmUgYW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS4KICAgICAgICovCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95CiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBSZW1vdmVzIHRoZSBjdXJyZW50IHNjb3BlIChhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbikgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBSZW1vdmFsIGltcGxpZXMKICAgICAgICogdGhhdCBjYWxscyB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gd2lsbCBubyBsb25nZXIKICAgICAgICogcHJvcGFnYXRlIHRvIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4uIFJlbW92YWwgYWxzbyBpbXBsaWVzIHRoYXQgdGhlIGN1cnJlbnQKICAgICAgICogc2NvcGUgaXMgZWxpZ2libGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi4KICAgICAgICoKICAgICAgICogVGhlIGAkZGVzdHJveSgpYCBpcyB1c3VhbGx5IHVzZWQgYnkgZGlyZWN0aXZlcyBzdWNoIGFzCiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IGZvciBtYW5hZ2luZyB0aGUKICAgICAgICogdW5yb2xsaW5nIG9mIHRoZSBsb29wLgogICAgICAgKgogICAgICAgKiBKdXN0IGJlZm9yZSBhIHNjb3BlIGlzIGRlc3Ryb3llZCwgYSBgJGRlc3Ryb3lgIGV2ZW50IGlzIGJyb2FkY2FzdGVkIG9uIHRoaXMgc2NvcGUuCiAgICAgICAqIEFwcGxpY2F0aW9uIGNvZGUgY2FuIHJlZ2lzdGVyIGEgYCRkZXN0cm95YCBldmVudCBoYW5kbGVyIHRoYXQgd2lsbCBnaXZlIGl0IGEgY2hhbmNlIHRvCiAgICAgICAqIHBlcmZvcm0gYW55IG5lY2Vzc2FyeSBjbGVhbnVwLgogICAgICAgKgogICAgICAgKiBOb3RlIHRoYXQsIGluIEFuZ3VsYXJKUywgdGhlcmUgaXMgYWxzbyBhIGAkZGVzdHJveWAgalF1ZXJ5IGV2ZW50LCB3aGljaCBjYW4gYmUgdXNlZCB0bwogICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uCiAgICAgICAqLwogICAgICAkZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gd2UgY2FuJ3QgZGVzdHJveSB0aGUgcm9vdCBzY29wZSBvciBhIHNjb3BlIHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWQKICAgICAgICBpZiAodGhpcy4kJGRlc3Ryb3llZCkgcmV0dXJuOwogICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7CgogICAgICAgIHRoaXMuJGJyb2FkY2FzdCgnJGRlc3Ryb3knKTsKICAgICAgICB0aGlzLiQkZGVzdHJveWVkID0gdHJ1ZTsKICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSkgcmV0dXJuOwoKICAgICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gdGhpcy4kJGxpc3RlbmVyQ291bnQpIHsKICAgICAgICAgIGRlY3JlbWVudExpc3RlbmVyQ291bnQodGhpcywgdGhpcy4kJGxpc3RlbmVyQ291bnRbZXZlbnROYW1lXSwgZXZlbnROYW1lKTsKICAgICAgICB9CgogICAgICAgIC8vIHNldmVyIGFsbCB0aGUgcmVmZXJlbmNlcyB0byBwYXJlbnQgc2NvcGVzIChhZnRlciB0aGlzIGNsZWFudXAsIHRoZSBjdXJyZW50IHNjb3BlIHNob3VsZAogICAgICAgIC8vIG5vdCBiZSByZXRhaW5lZCBieSBhbnkgb2Ygb3VyIHJlZmVyZW5jZXMgYW5kIHNob3VsZCBiZSBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uKQogICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZFRhaWwgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nOwogICAgICAgIGlmICh0aGlzLiQkcHJldlNpYmxpbmcpIHRoaXMuJCRwcmV2U2libGluZy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgIGlmICh0aGlzLiQkbmV4dFNpYmxpbmcpIHRoaXMuJCRuZXh0U2libGluZy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nOwoKICAgICAgICAvLyBEaXNhYmxlIGxpc3RlbmVycywgd2F0Y2hlcnMgYW5kIGFwcGx5L2RpZ2VzdCBtZXRob2RzCiAgICAgICAgdGhpcy4kZGVzdHJveSA9IHRoaXMuJGRpZ2VzdCA9IHRoaXMuJGFwcGx5ID0gdGhpcy4kZXZhbEFzeW5jID0gdGhpcy4kYXBwbHlBc3luYyA9IG5vb3A7CiAgICAgICAgdGhpcy4kb24gPSB0aGlzLiR3YXRjaCA9IHRoaXMuJHdhdGNoR3JvdXAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5vb3A7IH07CiAgICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9OwoKICAgICAgICAvLyBBbGwgb2YgdGhlIGNvZGUgYmVsb3cgaXMgYm9ndXMgY29kZSB0aGF0IHdvcmtzIGFyb3VuZCBWOCdzIG1lbW9yeSBsZWFrIHZpYSBvcHRpbWl6ZWQgY29kZQogICAgICAgIC8vIGFuZCBpbmxpbmUgY2FjaGVzLgogICAgICAgIC8vCiAgICAgICAgLy8gc2VlOgogICAgICAgIC8vIC0gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzMjYzI2CiAgICAgICAgLy8gLSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy82Nzk0I2lzc3VlY29tbWVudC0zODY0ODkwOQogICAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTMxMyNpc3N1ZWNvbW1lbnQtMTAzNzg0NTEKCiAgICAgICAgdGhpcy4kcGFyZW50ID0gdGhpcy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJGNoaWxkSGVhZCA9CiAgICAgICAgICAgIHRoaXMuJCRjaGlsZFRhaWwgPSB0aGlzLiRyb290ID0gdGhpcy4kJHdhdGNoZXJzID0gbnVsbDsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGV2YWwKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIEV4ZWN1dGVzIHRoZSBgZXhwcmVzc2lvbmAgb24gdGhlIGN1cnJlbnQgc2NvcGUgYW5kIHJldHVybnMgdGhlIHJlc3VsdC4gQW55IGV4Y2VwdGlvbnMgaW4KICAgICAgICogdGhlIGV4cHJlc3Npb24gYXJlIHByb3BhZ2F0ZWQgKHVuY2F1Z2h0KS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBldmFsdWF0aW5nIEFuZ3VsYXIKICAgICAgICogZXhwcmVzc2lvbnMuCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiBgYGBqcwogICAgICAgICAgIHZhciBzY29wZSA9IG5nLiRyb290U2NvcGUuU2NvcGUoKTsKICAgICAgICAgICBzY29wZS5hID0gMTsKICAgICAgICAgICBzY29wZS5iID0gMjsKCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLiRldmFsKCdhK2InKSkudG9FcXVhbCgzKTsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoZnVuY3Rpb24oc2NvcGUpeyByZXR1cm4gc2NvcGUuYSArIHNjb3BlLmI7IH0pKS50b0VxdWFsKDMpOwogICAgICAgKiBgYGAKICAgICAgICoKICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuCiAgICAgICAqCiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4gIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LgogICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLgogICAgICAgKgogICAgICAgKiBAcGFyYW0geyhvYmplY3QpPX0gbG9jYWxzIExvY2FsIHZhcmlhYmxlcyBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gc2NvcGUuCiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uCiAgICAgICAqLwogICAgICAkZXZhbDogZnVuY3Rpb24oZXhwciwgbG9jYWxzKSB7CiAgICAgICAgcmV0dXJuICRwYXJzZShleHByKSh0aGlzLCBsb2NhbHMpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuCiAgICAgICAqCiAgICAgICAqIFRoZSBgJGV2YWxBc3luY2AgbWFrZXMgbm8gZ3VhcmFudGVlcyBhcyB0byB3aGVuIHRoZSBgZXhwcmVzc2lvbmAgd2lsbCBiZSBleGVjdXRlZCwgb25seQogICAgICAgKiB0aGF0OgogICAgICAgKgogICAgICAgKiAgIC0gaXQgd2lsbCBleGVjdXRlIGFmdGVyIHRoZSBmdW5jdGlvbiB0aGF0IHNjaGVkdWxlZCB0aGUgZXZhbHVhdGlvbiAocHJlZmVyYWJseSBiZWZvcmUgRE9NCiAgICAgICAqICAgICByZW5kZXJpbmcpLgogICAgICAgKiAgIC0gYXQgbGVhc3Qgb25lIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCBjeWNsZX0gd2lsbCBiZSBwZXJmb3JtZWQgYWZ0ZXIKICAgICAgICogICAgIGBleHByZXNzaW9uYCBleGVjdXRpb24uCiAgICAgICAqCiAgICAgICAqIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZQogICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuCiAgICAgICAqCiAgICAgICAqIF9fTm90ZTpfXyBpZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgYCRkaWdlc3RgIGN5Y2xlLCBhIG5ldyBgJGRpZ2VzdGAgY3ljbGUKICAgICAgICogd2lsbCBiZSBzY2hlZHVsZWQuIEhvd2V2ZXIsIGl0IGlzIGVuY291cmFnZWQgdG8gYWx3YXlzIGNhbGwgY29kZSB0aGF0IGNoYW5nZXMgdGhlIG1vZGVsCiAgICAgICAqIGZyb20gd2l0aGluIGFuIGAkYXBwbHlgIGNhbGwuIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC4KICAgICAgICoKICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuCiAgICAgICAqCiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uCiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuCiAgICAgICAqCiAgICAgICAqLwogICAgICAkZXZhbEFzeW5jOiBmdW5jdGlvbihleHByKSB7CiAgICAgICAgLy8gaWYgd2UgYXJlIG91dHNpZGUgb2YgYW4gJGRpZ2VzdCBsb29wIGFuZCB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHdlIGFyZSBzY2hlZHVsaW5nIGFzeW5jCiAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2gKICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSAmJiAhYXN5bmNRdWV1ZS5sZW5ndGgpIHsKICAgICAgICAgICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoYXN5bmNRdWV1ZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBhc3luY1F1ZXVlLnB1c2goe3Njb3BlOiB0aGlzLCBleHByZXNzaW9uOiBleHByfSk7CiAgICAgIH0sCgogICAgICAkJHBvc3REaWdlc3QgOiBmdW5jdGlvbihmbikgewogICAgICAgIHBvc3REaWdlc3RRdWV1ZS5wdXNoKGZuKTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGFwcGx5CiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBgJGFwcGx5KClgIGlzIHVzZWQgdG8gZXhlY3V0ZSBhbiBleHByZXNzaW9uIGluIGFuZ3VsYXIgZnJvbSBvdXRzaWRlIG9mIHRoZSBhbmd1bGFyCiAgICAgICAqIGZyYW1ld29yay4gKEZvciBleGFtcGxlIGZyb20gYnJvd3NlciBET00gZXZlbnRzLCBzZXRUaW1lb3V0LCBYSFIgb3IgdGhpcmQgcGFydHkgbGlicmFyaWVzKS4KICAgICAgICogQmVjYXVzZSB3ZSBhcmUgY2FsbGluZyBpbnRvIHRoZSBhbmd1bGFyIGZyYW1ld29yayB3ZSBuZWVkIHRvIHBlcmZvcm0gcHJvcGVyIHNjb3BlIGxpZmUKICAgICAgICogY3ljbGUgb2Yge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyIGV4Y2VwdGlvbiBoYW5kbGluZ30sCiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgZXhlY3V0aW5nIHdhdGNoZXN9LgogICAgICAgKgogICAgICAgKiAjIyBMaWZlIGN5Y2xlCiAgICAgICAqCiAgICAgICAqICMgUHNldWRvLUNvZGUgb2YgYCRhcHBseSgpYAogICAgICAgKiBgYGBqcwogICAgICAgICAgIGZ1bmN0aW9uICRhcHBseShleHByKSB7CiAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICByZXR1cm4gJGV2YWwoZXhwcik7CiAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgJHJvb3QuJGRpZ2VzdCgpOwogICAgICAgICAgICAgfQogICAgICAgICAgIH0KICAgICAgICogYGBgCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqIFNjb3BlJ3MgYCRhcHBseSgpYCBtZXRob2QgdHJhbnNpdGlvbnMgdGhyb3VnaCB0aGUgZm9sbG93aW5nIHN0YWdlczoKICAgICAgICoKICAgICAgICogMS4gVGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIGV4ZWN1dGVkIHVzaW5nIHRoZQogICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbCAkZXZhbCgpfSBtZXRob2QuCiAgICAgICAqIDIuIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZQogICAgICAgKiAgICB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuCiAgICAgICAqIDMuIFRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2h9IGxpc3RlbmVycyBhcmUgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlCiAgICAgICAqICAgIGV4cHJlc3Npb24gd2FzIGV4ZWN1dGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gbWV0aG9kLgogICAgICAgKgogICAgICAgKgogICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLgogICAgICAgKgogICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LgogICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uCiAgICAgICAqLwogICAgICAkYXBwbHk6IGZ1bmN0aW9uKGV4cHIpIHsKICAgICAgICB0cnkgewogICAgICAgICAgYmVnaW5QaGFzZSgnJGFwcGx5Jyk7CiAgICAgICAgICByZXR1cm4gdGhpcy4kZXZhbChleHByKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgY2xlYXJQaGFzZSgpOwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICB0aHJvdyBlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGFwcGx5QXN5bmMKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFNjaGVkdWxlIHRoZSBpbnZva2F0aW9uIG9mICRhcHBseSB0byBvY2N1ciBhdCBhIGxhdGVyIHRpbWUuIFRoZSBhY3R1YWwgdGltZSBkaWZmZXJlbmNlCiAgICAgICAqIHZhcmllcyBhY3Jvc3MgYnJvd3NlcnMsIGJ1dCBpcyB0eXBpY2FsbHkgYXJvdW5kIH4xMCBtaWxsaXNlY29uZHMuCiAgICAgICAqCiAgICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcXVldWUgdXAgbXVsdGlwbGUgZXhwcmVzc2lvbnMgd2hpY2ggbmVlZCB0byBiZSBldmFsdWF0ZWQgaW4gdGhlIHNhbWUKICAgICAgICogZGlnZXN0LgogICAgICAgKgogICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLgogICAgICAgKgogICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LgogICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuCiAgICAgICAqLwogICAgICAkYXBwbHlBc3luYzogZnVuY3Rpb24oZXhwcikgewogICAgICAgIHZhciBzY29wZSA9IHRoaXM7CiAgICAgICAgZXhwciAmJiBhcHBseUFzeW5jUXVldWUucHVzaCgkYXBwbHlBc3luY0V4cHJlc3Npb24pOwogICAgICAgIHNjaGVkdWxlQXBwbHlBc3luYygpOwoKICAgICAgICBmdW5jdGlvbiAkYXBwbHlBc3luY0V4cHJlc3Npb24oKSB7CiAgICAgICAgICBzY29wZS4kZXZhbChleHByKTsKICAgICAgICB9CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRvbgogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogTGlzdGVucyBvbiBldmVudHMgb2YgYSBnaXZlbiB0eXBlLiBTZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGVtaXQgJGVtaXR9IGZvcgogICAgICAgKiBkaXNjdXNzaW9uIG9mIGV2ZW50IGxpZmUgY3ljbGUuCiAgICAgICAqCiAgICAgICAqIFRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBmb3JtYXQgaXM6IGBmdW5jdGlvbihldmVudCwgYXJncy4uLilgLiBUaGUgYGV2ZW50YCBvYmplY3QKICAgICAgICogcGFzc2VkIGludG8gdGhlIGxpc3RlbmVyIGhhcyB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6CiAgICAgICAqCiAgICAgICAqICAgLSBgdGFyZ2V0U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgc2NvcGUgb24gd2hpY2ggdGhlIGV2ZW50IHdhcyBgJGVtaXRgLWVkIG9yCiAgICAgICAqICAgICBgJGJyb2FkY2FzdGAtZWQuCiAgICAgICAqICAgLSBgY3VycmVudFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIHRoYXQgaXMgY3VycmVudGx5IGhhbmRsaW5nIHRoZSBldmVudC4gT25jZSB0aGUKICAgICAgICogICAgIGV2ZW50IHByb3BhZ2F0ZXMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5LCB0aGlzIHByb3BlcnR5IGlzIHNldCB0byBudWxsLgogICAgICAgKiAgIC0gYG5hbWVgIC0gYHtzdHJpbmd9YDogbmFtZSBvZiB0aGUgZXZlbnQuCiAgICAgICAqICAgLSBgc3RvcFByb3BhZ2F0aW9uYCAtIGB7ZnVuY3Rpb249fWA6IGNhbGxpbmcgYHN0b3BQcm9wYWdhdGlvbmAgZnVuY3Rpb24gd2lsbCBjYW5jZWwKICAgICAgICogICAgIGZ1cnRoZXIgZXZlbnQgcHJvcGFnYXRpb24gKGF2YWlsYWJsZSBvbmx5IGZvciBldmVudHMgdGhhdCB3ZXJlIGAkZW1pdGAtZWQpLgogICAgICAgKiAgIC0gYHByZXZlbnREZWZhdWx0YCAtIGB7ZnVuY3Rpb259YDogY2FsbGluZyBgcHJldmVudERlZmF1bHRgIHNldHMgYGRlZmF1bHRQcmV2ZW50ZWRgIGZsYWcKICAgICAgICogICAgIHRvIHRydWUuCiAgICAgICAqICAgLSBgZGVmYXVsdFByZXZlbnRlZGAgLSBge2Jvb2xlYW59YDogdHJ1ZSBpZiBgcHJldmVudERlZmF1bHRgIHdhcyBjYWxsZWQuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gbGlzdGVuIG9uLgogICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50LCAuLi5hcmdzKX0gbGlzdGVuZXIgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBldmVudCBpcyBlbWl0dGVkLgogICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLgogICAgICAgKi8KICAgICAgJG9uOiBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikgewogICAgICAgIHZhciBuYW1lZExpc3RlbmVycyA9IHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV07CiAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVycykgewogICAgICAgICAgdGhpcy4kJGxpc3RlbmVyc1tuYW1lXSA9IG5hbWVkTGlzdGVuZXJzID0gW107CiAgICAgICAgfQogICAgICAgIG5hbWVkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpOwoKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXM7CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKCFjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSkgewogICAgICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSsrOwogICAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gY3VycmVudC4kcGFyZW50KSk7CgogICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICBuYW1lZExpc3RlbmVyc1tuYW1lZExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKV0gPSBudWxsOwogICAgICAgICAgZGVjcmVtZW50TGlzdGVuZXJDb3VudChzZWxmLCAxLCBuYW1lKTsKICAgICAgICB9OwogICAgICB9LAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGVtaXQKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIHVwd2FyZHMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5IG5vdGlmeWluZyB0aGUKICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy4KICAgICAgICoKICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGVtaXRgIHdhcyBjYWxsZWQuIEFsbAogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldAogICAgICAgKiBub3RpZmllZC4gQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHRyYXZlcnNlcyB1cHdhcmRzIHRvd2FyZCB0aGUgcm9vdCBzY29wZSBhbmQgY2FsbHMgYWxsCiAgICAgICAqIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCB3aWxsIHN0b3AgcHJvcGFnYXRpbmcgaWYgb25lIG9mIHRoZSBsaXN0ZW5lcnMKICAgICAgICogY2FuY2VscyBpdC4KICAgICAgICoKICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkCiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBlbWl0LgogICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgb25lIG9yIG1vcmUgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy4KICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QgKHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259KS4KICAgICAgICovCiAgICAgICRlbWl0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7CiAgICAgICAgdmFyIGVtcHR5ID0gW10sCiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLAogICAgICAgICAgICBzY29wZSA9IHRoaXMsCiAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbiA9IGZhbHNlLAogICAgICAgICAgICBldmVudCA9IHsKICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICAgIHRhcmdldFNjb3BlOiBzY29wZSwKICAgICAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge3N0b3BQcm9wYWdhdGlvbiA9IHRydWU7fSwKICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGxpc3RlbmVyQXJncyA9IGNvbmNhdChbZXZlbnRdLCBhcmd1bWVudHMsIDEpLAogICAgICAgICAgICBpLCBsZW5ndGg7CgogICAgICAgIGRvIHsKICAgICAgICAgIG5hbWVkTGlzdGVuZXJzID0gc2NvcGUuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgZW1wdHk7CiAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBzY29wZTsKICAgICAgICAgIGZvciAoaT0wLCBsZW5ndGg9bmFtZWRMaXN0ZW5lcnMubGVuZ3RoOyBpPGxlbmd0aDsgaSsrKSB7CgogICAgICAgICAgICAvLyBpZiBsaXN0ZW5lcnMgd2VyZSBkZXJlZ2lzdGVyZWQsIGRlZnJhZ21lbnQgdGhlIGFycmF5CiAgICAgICAgICAgIGlmICghbmFtZWRMaXN0ZW5lcnNbaV0pIHsKICAgICAgICAgICAgICBuYW1lZExpc3RlbmVycy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgaS0tOwogICAgICAgICAgICAgIGxlbmd0aC0tOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgLy9hbGxvdyBhbGwgbGlzdGVuZXJzIGF0dGFjaGVkIHRvIHRoZSBjdXJyZW50IHNjb3BlIHRvIHJ1bgogICAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGxpc3RlbmVyQXJncyk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy9pZiBhbnkgbGlzdGVuZXIgb24gdGhlIGN1cnJlbnQgc2NvcGUgc3RvcHMgcHJvcGFnYXRpb24sIHByZXZlbnQgYnViYmxpbmcKICAgICAgICAgIGlmIChzdG9wUHJvcGFnYXRpb24pIHsKICAgICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDsKICAgICAgICAgICAgcmV0dXJuIGV2ZW50OwogICAgICAgICAgfQogICAgICAgICAgLy90cmF2ZXJzZSB1cHdhcmRzCiAgICAgICAgICBzY29wZSA9IHNjb3BlLiRwYXJlbnQ7CiAgICAgICAgfSB3aGlsZSAoc2NvcGUpOwoKICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsOwoKICAgICAgICByZXR1cm4gZXZlbnQ7CiAgICAgIH0sCgoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYnJvYWRjYXN0CiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCBkb3dud2FyZHMgdG8gYWxsIGNoaWxkIHNjb3BlcyAoYW5kIHRoZWlyIGNoaWxkcmVuKSBub3RpZnlpbmcgdGhlCiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuCiAgICAgICAqCiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRicm9hZGNhc3RgIHdhcyBjYWxsZWQuIEFsbAogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldAogICAgICAgKiBub3RpZmllZC4gQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHByb3BhZ2F0ZXMgdG8gYWxsIGRpcmVjdCBhbmQgaW5kaXJlY3Qgc2NvcGVzIG9mIHRoZSBjdXJyZW50CiAgICAgICAqIHNjb3BlIGFuZCBjYWxscyBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgYWxvbmcgdGhlIHdheS4gVGhlIGV2ZW50IGNhbm5vdCBiZSBjYW5jZWxlZC4KICAgICAgICoKICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkCiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBicm9hZGNhc3QuCiAgICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBvbmUgb3IgbW9yZSBhcmd1bWVudHMgd2hpY2ggd2lsbCBiZSBwYXNzZWQgb250byB0aGUgZXZlbnQgbGlzdGVuZXJzLgogICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50IG9iamVjdCwgc2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0KICAgICAgICovCiAgICAgICRicm9hZGNhc3Q6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHsKICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcywKICAgICAgICAgICAgY3VycmVudCA9IHRhcmdldCwKICAgICAgICAgICAgbmV4dCA9IHRhcmdldCwKICAgICAgICAgICAgZXZlbnQgPSB7CiAgICAgICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgICAgICB0YXJnZXRTY29wZTogdGFyZ2V0LAogICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2UKICAgICAgICAgICAgfTsKCiAgICAgICAgaWYgKCF0YXJnZXQuJCRsaXN0ZW5lckNvdW50W25hbWVdKSByZXR1cm4gZXZlbnQ7CgogICAgICAgIHZhciBsaXN0ZW5lckFyZ3MgPSBjb25jYXQoW2V2ZW50XSwgYXJndW1lbnRzLCAxKSwKICAgICAgICAgICAgbGlzdGVuZXJzLCBpLCBsZW5ndGg7CgogICAgICAgIC8vZG93biB3aGlsZSB5b3UgY2FuLCB0aGVuIHVwIGFuZCBuZXh0IHNpYmxpbmcgb3IgdXAgYW5kIG5leHQgc2libGluZyB1bnRpbCBiYWNrIGF0IHJvb3QKICAgICAgICB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSkgewogICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gY3VycmVudDsKICAgICAgICAgIGxpc3RlbmVycyA9IGN1cnJlbnQuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgW107CiAgICAgICAgICBmb3IgKGk9MCwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaTxsZW5ndGg7IGkrKykgewogICAgICAgICAgICAvLyBpZiBsaXN0ZW5lcnMgd2VyZSBkZXJlZ2lzdGVyZWQsIGRlZnJhZ21lbnQgdGhlIGFycmF5CiAgICAgICAgICAgIGlmICghbGlzdGVuZXJzW2ldKSB7CiAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgICBpLS07CiAgICAgICAgICAgICAgbGVuZ3RoLS07CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGxpc3RlbmVyQXJncyk7CiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gSW5zYW5pdHkgV2FybmluZzogc2NvcGUgZGVwdGgtZmlyc3QgdHJhdmVyc2FsCiAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IQogICAgICAgICAgLy8gdGhpcyBwaWVjZSBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHRyYXZlcnNhbCBpbiAkZGlnZXN0CiAgICAgICAgICAvLyAodGhvdWdoIGl0IGRpZmZlcnMgZHVlIHRvIGhhdmluZyB0aGUgZXh0cmEgY2hlY2sgZm9yICQkbGlzdGVuZXJDb3VudCkKICAgICAgICAgIGlmICghKG5leHQgPSAoKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdICYmIGN1cnJlbnQuJCRjaGlsZEhlYWQpIHx8CiAgICAgICAgICAgICAgKGN1cnJlbnQgIT09IHRhcmdldCAmJiBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSkpIHsKICAgICAgICAgICAgd2hpbGUoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHsKICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsOwogICAgICAgIHJldHVybiBldmVudDsKICAgICAgfQogICAgfTsKCiAgICB2YXIgJHJvb3RTY29wZSA9IG5ldyBTY29wZSgpOwoKICAgIC8vVGhlIGludGVybmFsIHF1ZXVlcy4gRXhwb3NlIHRoZW0gb24gdGhlICRyb290U2NvcGUgZm9yIGRlYnVnZ2luZy90ZXN0aW5nIHB1cnBvc2VzLgogICAgdmFyIGFzeW5jUXVldWUgPSAkcm9vdFNjb3BlLiQkYXN5bmNRdWV1ZSA9IFtdOwogICAgdmFyIHBvc3REaWdlc3RRdWV1ZSA9ICRyb290U2NvcGUuJCRwb3N0RGlnZXN0UXVldWUgPSBbXTsKICAgIHZhciBhcHBseUFzeW5jUXVldWUgPSAkcm9vdFNjb3BlLiQkYXBwbHlBc3luY1F1ZXVlID0gW107CgogICAgcmV0dXJuICRyb290U2NvcGU7CgoKICAgIGZ1bmN0aW9uIGJlZ2luUGhhc2UocGhhc2UpIHsKICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkgewogICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2lucHJvZycsICd7MH0gYWxyZWFkeSBpbiBwcm9ncmVzcycsICRyb290U2NvcGUuJCRwaGFzZSk7CiAgICAgIH0KCiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IHBoYXNlOwogICAgfQoKICAgIGZ1bmN0aW9uIGNsZWFyUGhhc2UoKSB7CiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IG51bGw7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGRlY3JlbWVudExpc3RlbmVyQ291bnQoY3VycmVudCwgY291bnQsIG5hbWUpIHsKICAgICAgZG8gewogICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdIC09IGNvdW50OwoKICAgICAgICBpZiAoY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gPT09IDApIHsKICAgICAgICAgIGRlbGV0ZSBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXTsKICAgICAgICB9CiAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gY3VycmVudC4kcGFyZW50KSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBmdW5jdGlvbiB1c2VkIGFzIGFuIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzLgogICAgICogYmVjYXVzZSBpdCdzIHVuaXF1ZSB3ZSBjYW4gZWFzaWx5IHRlbGwgaXQgYXBhcnQgZnJvbSBvdGhlciB2YWx1ZXMKICAgICAqLwogICAgZnVuY3Rpb24gaW5pdFdhdGNoVmFsKCkge30KCiAgICBmdW5jdGlvbiBmbHVzaEFwcGx5QXN5bmMoKSB7CiAgICAgIHdoaWxlIChhcHBseUFzeW5jUXVldWUubGVuZ3RoKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGFwcGx5QXN5bmNRdWV1ZS5zaGlmdCgpKCk7CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgYXBwbHlBc3luY0lkID0gbnVsbDsKICAgIH0KCiAgICBmdW5jdGlvbiBzY2hlZHVsZUFwcGx5QXN5bmMoKSB7CiAgICAgIGlmIChhcHBseUFzeW5jSWQgPT09IG51bGwpIHsKICAgICAgICBhcHBseUFzeW5jSWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHsKICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZsdXNoQXBwbHlBc3luYyk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9XTsKfQoKLyoqCiAqIEBkZXNjcmlwdGlvbgogKiBQcml2YXRlIHNlcnZpY2UgdG8gc2FuaXRpemUgdXJpcyBmb3IgbGlua3MgYW5kIGltYWdlcy4gVXNlZCBieSAkY29tcGlsZSBhbmQgJHNhbml0aXplLgogKi8KZnVuY3Rpb24gJCRTYW5pdGl6ZVVyaVByb3ZpZGVyKCkgewogIHZhciBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXHMqKGh0dHBzP3xmdHB8bWFpbHRvfHRlbHxmaWxlKTovLAogICAgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gL15ccyooKGh0dHBzP3xmdHB8ZmlsZXxibG9iKTp8ZGF0YTppbWFnZVwvKS87CgogIC8qKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmUKICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi4KICAgKgogICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuCiAgICoKICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGFbaHJlZl0gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50bwogICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdGAKICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSwKICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uCiAgICoKICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguCiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvcgogICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS4KICAgKi8KICB0aGlzLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7CiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHsKICAgICAgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgcmV0dXJuIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0OwogIH07CgoKICAvKioKICAgKiBAZGVzY3JpcHRpb24KICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlCiAgICogdXJscyBkdXJpbmcgaW1nW3NyY10gc2FuaXRpemF0aW9uLgogICAqCiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy4KICAgKgogICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gaW1nW3NyY10gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50bwogICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgCiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsCiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLgogICAqCiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLgogICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3IKICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuCiAgICovCiAgdGhpcy5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHsKICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkgewogICAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgcmV0dXJuIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdDsKICB9OwoKICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBmdW5jdGlvbiBzYW5pdGl6ZVVyaSh1cmksIGlzSW1hZ2UpIHsKICAgICAgdmFyIHJlZ2V4ID0gaXNJbWFnZSA/IGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA6IGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0OwogICAgICB2YXIgbm9ybWFsaXplZFZhbDsKICAgICAgbm9ybWFsaXplZFZhbCA9IHVybFJlc29sdmUodXJpKS5ocmVmOwogICAgICBpZiAobm9ybWFsaXplZFZhbCAhPT0gJycgJiYgIW5vcm1hbGl6ZWRWYWwubWF0Y2gocmVnZXgpKSB7CiAgICAgICAgcmV0dXJuICd1bnNhZmU6Jytub3JtYWxpemVkVmFsOwogICAgICB9CiAgICAgIHJldHVybiB1cmk7CiAgICB9OwogIH07Cn0KCnZhciAkc2NlTWluRXJyID0gbWluRXJyKCckc2NlJyk7Cgp2YXIgU0NFX0NPTlRFWFRTID0gewogIEhUTUw6ICdodG1sJywKICBDU1M6ICdjc3MnLAogIFVSTDogJ3VybCcsCiAgLy8gUkVTT1VSQ0VfVVJMIGlzIGEgc3VidHlwZSBvZiBVUkwgdXNlZCBpbiBjb250ZXh0cyB3aGVyZSBhIHByaXZpbGVnZWQgcmVzb3VyY2UgaXMgc291cmNlZCBmcm9tIGEKICAvLyB1cmwuICAoZS5nLiBuZy1pbmNsdWRlLCBzY3JpcHQgc3JjLCB0ZW1wbGF0ZVVybCkKICBSRVNPVVJDRV9VUkw6ICdyZXNvdXJjZVVybCcsCiAgSlM6ICdqcycKfTsKCi8vIEhlbHBlciBmdW5jdGlvbnMgZm9sbG93LgoKLy8gQ29waWVkIGZyb206Ci8vIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX3N0cmluZ19zdHJpbmcuanMuc291cmNlLmh0bWwjbGluZTk2MgovLyBQcmVyZXE6IHMgaXMgYSBzdHJpbmcuCmZ1bmN0aW9uIGVzY2FwZUZvclJlZ2V4cChzKSB7CiAgcmV0dXJuIHMucmVwbGFjZSgvKFstKClcW1xde30rPyouJFxefCw6IzwhXFxdKS9nLCAnXFwkMScpLgogICAgICAgICAgIHJlcGxhY2UoL1x4MDgvZywgJ1xceDA4Jyk7Cn0KCgpmdW5jdGlvbiBhZGp1c3RNYXRjaGVyKG1hdGNoZXIpIHsKICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7CiAgICByZXR1cm4gbWF0Y2hlcjsKICB9IGVsc2UgaWYgKGlzU3RyaW5nKG1hdGNoZXIpKSB7CiAgICAvLyBTdHJpbmdzIG1hdGNoIGV4YWN0bHkgZXhjZXB0IGZvciAyIHdpbGRjYXJkcyAtICcqJyBhbmQgJyoqJy4KICAgIC8vICcqJyBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgZXhjZXB0IHRob3NlIGZyb20gdGhlIHNldCAnOi8uPyYnLgogICAgLy8gJyoqJyBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgKGxpa2UgLiogaW4gYSBSZWdFeHApLgogICAgLy8gTW9yZSB0aGFuIDIgKidzIHJhaXNlcyBhbiBlcnJvciBhcyBpdCdzIGlsbCBkZWZpbmVkLgogICAgaWYgKG1hdGNoZXIuaW5kZXhPZignKioqJykgPiAtMSkgewogICAgICB0aHJvdyAkc2NlTWluRXJyKCdpd2NhcmQnLAogICAgICAgICAgJ0lsbGVnYWwgc2VxdWVuY2UgKioqIGluIHN0cmluZyBtYXRjaGVyLiAgU3RyaW5nOiB7MH0nLCBtYXRjaGVyKTsKICAgIH0KICAgIG1hdGNoZXIgPSBlc2NhcGVGb3JSZWdleHAobWF0Y2hlcikuCiAgICAgICAgICAgICAgICAgIHJlcGxhY2UoJ1xcKlxcKicsICcuKicpLgogICAgICAgICAgICAgICAgICByZXBsYWNlKCdcXConLCAnW146Ly4/JjtdKicpOwogICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgbWF0Y2hlciArICckJyk7CiAgfSBlbHNlIGlmIChpc1JlZ0V4cChtYXRjaGVyKSkgewogICAgLy8gVGhlIG9ubHkgb3RoZXIgdHlwZSBvZiBtYXRjaGVyIGFsbG93ZWQgaXMgYSBSZWdleHAuCiAgICAvLyBNYXRjaCBlbnRpcmUgVVJMIC8gZGlzYWxsb3cgcGFydGlhbCBtYXRjaGVzLgogICAgLy8gRmxhZ3MgYXJlIHJlc2V0IChpLmUuIG5vIGdsb2JhbCwgaWdub3JlQ2FzZSBvciBtdWx0aWxpbmUpCiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyLnNvdXJjZSArICckJyk7CiAgfSBlbHNlIHsKICAgIHRocm93ICRzY2VNaW5FcnIoJ2ltYXRjaGVyJywKICAgICAgICAnTWF0Y2hlcnMgbWF5IG9ubHkgYmUgInNlbGYiLCBzdHJpbmcgcGF0dGVybnMgb3IgUmVnRXhwIG9iamVjdHMnKTsKICB9Cn0KCgpmdW5jdGlvbiBhZGp1c3RNYXRjaGVycyhtYXRjaGVycykgewogIHZhciBhZGp1c3RlZE1hdGNoZXJzID0gW107CiAgaWYgKGlzRGVmaW5lZChtYXRjaGVycykpIHsKICAgIGZvckVhY2gobWF0Y2hlcnMsIGZ1bmN0aW9uKG1hdGNoZXIpIHsKICAgICAgYWRqdXN0ZWRNYXRjaGVycy5wdXNoKGFkanVzdE1hdGNoZXIobWF0Y2hlcikpOwogICAgfSk7CiAgfQogIHJldHVybiBhZGp1c3RlZE1hdGNoZXJzOwp9CgoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRzY2VEZWxlZ2F0ZQogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICoKICogYCRzY2VEZWxlZ2F0ZWAgaXMgYSBzZXJ2aWNlIHRoYXQgaXMgdXNlZCBieSB0aGUgYCRzY2VgIHNlcnZpY2UgdG8gcHJvdmlkZSB7QGxpbmsgbmcuJHNjZSBTdHJpY3QKICogQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0gc2VydmljZXMgdG8gQW5ndWxhckpTLgogKgogKiBUeXBpY2FsbHksIHlvdSB3b3VsZCBjb25maWd1cmUgb3Igb3ZlcnJpZGUgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGUgJHNjZURlbGVnYXRlfSBpbnN0ZWFkIG9mCiAqIHRoZSBgJHNjZWAgc2VydmljZSB0byBjdXN0b21pemUgdGhlIHdheSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyB3b3JrcyBpbiBBbmd1bGFySlMuICBUaGlzIGlzCiAqIGJlY2F1c2UsIHdoaWxlIHRoZSBgJHNjZWAgcHJvdmlkZXMgbnVtZXJvdXMgc2hvcnRoYW5kIG1ldGhvZHMsIGV0Yy4sIHlvdSByZWFsbHkgb25seSBuZWVkIHRvCiAqIG92ZXJyaWRlIDMgY29yZSBmdW5jdGlvbnMgKGB0cnVzdEFzYCwgYGdldFRydXN0ZWRgIGFuZCBgdmFsdWVPZmApIHRvIHJlcGxhY2UgdGhlIHdheSB0aGluZ3MKICogd29yayBiZWNhdXNlIGAkc2NlYCBkZWxlZ2F0ZXMgdG8gYCRzY2VEZWxlZ2F0ZWAgZm9yIHRoZXNlIG9wZXJhdGlvbnMuCiAqCiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gdG8gY29uZmlndXJlIHRoaXMgc2VydmljZS4KICoKICogVGhlIGRlZmF1bHQgaW5zdGFuY2Ugb2YgYCRzY2VEZWxlZ2F0ZWAgc2hvdWxkIHdvcmsgb3V0IG9mIHRoZSBib3ggd2l0aCBsaXR0bGUgcGFpbi4gIFdoaWxlIHlvdQogKiBjYW4gb3ZlcnJpZGUgaXQgY29tcGxldGVseSB0byBjaGFuZ2UgdGhlIGJlaGF2aW9yIG9mIGAkc2NlYCwgdGhlIGNvbW1vbiBjYXNlIHdvdWxkCiAqIGludm9sdmUgY29uZmlndXJpbmcgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gaW5zdGVhZCBieSBzZXR0aW5nCiAqIHlvdXIgb3duIHdoaXRlbGlzdHMgYW5kIGJsYWNrbGlzdHMgZm9yIHRydXN0aW5nIFVSTHMgdXNlZCBmb3IgbG9hZGluZyBBbmd1bGFySlMgcmVzb3VyY2VzIHN1Y2ggYXMKICogdGVtcGxhdGVzLiAgUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0CiAqICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmQge0BsaW5rCiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fQogKi8KCi8qKgogKiBAbmdkb2MgcHJvdmlkZXIKICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqCiAqIFRoZSBgJHNjZURlbGVnYXRlUHJvdmlkZXJgIHByb3ZpZGVyIGFsbG93cyBkZXZlbG9wZXJzIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZQogKiAkc2NlRGVsZWdhdGV9IHNlcnZpY2UuICBUaGlzIGFsbG93cyBvbmUgdG8gZ2V0L3NldCB0aGUgd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyB1c2VkIHRvIGVuc3VyZQogKiB0aGF0IHRoZSBVUkxzIHVzZWQgZm9yIHNvdXJjaW5nIEFuZ3VsYXIgdGVtcGxhdGVzIGFyZSBzYWZlLiAgUmVmZXIge0BsaW5rCiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmQKICoge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fQogKgogKiBGb3IgdGhlIGdlbmVyYWwgZGV0YWlscyBhYm91dCB0aGlzIHNlcnZpY2UgaW4gQW5ndWxhciwgcmVhZCB0aGUgbWFpbiBwYWdlIGZvciB7QGxpbmsgbmcuJHNjZQogKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uCiAqCiAqICoqRXhhbXBsZSoqOiAgQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBjYXNlLiA8YSBuYW1lPSJleGFtcGxlIj48L2E+CiAqCiAqIC0geW91ciBhcHAgaXMgaG9zdGVkIGF0IHVybCBgaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2AKICogLSBidXQgc29tZSBvZiB5b3VyIHRlbXBsYXRlcyBhcmUgaG9zdGVkIG9uIG90aGVyIGRvbWFpbnMgeW91IGNvbnRyb2wgc3VjaCBhcwogKiAgIGBodHRwOi8vc3J2MDEuYXNzZXRzLmV4YW1wbGUuY29tL2AswqAgYGh0dHA6Ly9zcnYwMi5hc3NldHMuZXhhbXBsZS5jb20vYCwgZXRjLgogKiAtIGFuZCB5b3UgaGF2ZSBhbiBvcGVuIHJlZGlyZWN0IGF0IGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1Py4uLmAuCiAqCiAqIEhlcmUgaXMgd2hhdCBhIHNlY3VyZSBjb25maWd1cmF0aW9uIGZvciB0aGlzIHNjZW5hcmlvIG1pZ2h0IGxvb2sgbGlrZToKICoKICogYGBgCiAqICBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VEZWxlZ2F0ZVByb3ZpZGVyKSB7CiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFsKICogICAgICAvLyBBbGxvdyBzYW1lIG9yaWdpbiByZXNvdXJjZSBsb2Fkcy4KICogICAgICAnc2VsZicsCiAqICAgICAgLy8gQWxsb3cgbG9hZGluZyBmcm9tIG91ciBhc3NldHMgZG9tYWluLiAgTm90aWNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gKiBhbmQgKiouCiAqICAgICAgJ2h0dHA6Ly9zcnYqLmFzc2V0cy5leGFtcGxlLmNvbS8qKicKICogICAgXSk7CiAqCiAqICAgIC8vIFRoZSBibGFja2xpc3Qgb3ZlcnJpZGVzIHRoZSB3aGl0ZWxpc3Qgc28gdGhlIG9wZW4gcmVkaXJlY3QgaGVyZSBpcyBibG9ja2VkLgogKiAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdChbCiAqICAgICAgJ2h0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnUqKicKICogICAgXSk7CiAqICB9KTsKICogYGBgCiAqLwoKZnVuY3Rpb24gJFNjZURlbGVnYXRlUHJvdmlkZXIoKSB7CiAgdGhpcy5TQ0VfQ09OVEVYVFMgPSBTQ0VfQ09OVEVYVFM7CgogIC8vIFJlc291cmNlIFVSTHMgY2FuIGFsc28gYmUgdHJ1c3RlZCBieSBwb2xpY3kuCiAgdmFyIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gWydzZWxmJ10sCiAgICAgIHJlc291cmNlVXJsQmxhY2tsaXN0ID0gW107CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdAogICAqIEBraW5kIGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge0FycmF5PX0gd2hpdGVsaXN0IFdoZW4gcHJvdmlkZWQsIHJlcGxhY2VzIHRoZSByZXNvdXJjZVVybFdoaXRlbGlzdCB3aXRoIHRoZSB2YWx1ZQogICAqICAgICBwcm92aWRlZC4gIFRoaXMgbXVzdCBiZSBhbiBhcnJheSBvciBudWxsLiAgQSBzbmFwc2hvdCBvZiB0aGlzIGFycmF5IGlzIHVzZWQgc28gZnVydGhlcgogICAqICAgICBjaGFuZ2VzIHRvIHRoZSBhcnJheSBhcmUgaWdub3JlZC4KICAgKgogICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtcwogICAqICAgICBhbGxvd2VkIGluIHRoaXMgYXJyYXkuCiAgICoKICAgKiAgICAgTm90ZTogKiphbiBlbXB0eSB3aGl0ZWxpc3QgYXJyYXkgd2lsbCBibG9jayBhbGwgVVJMcyoqIQogICAqCiAgICogQHJldHVybiB7QXJyYXl9IHRoZSBjdXJyZW50bHkgc2V0IHdoaXRlbGlzdCBhcnJheS4KICAgKgogICAqIFRoZSAqKmRlZmF1bHQgdmFsdWUqKiB3aGVuIG5vIHdoaXRlbGlzdCBoYXMgYmVlbiBleHBsaWNpdGx5IHNldCBpcyBgWydzZWxmJ11gIGFsbG93aW5nIG9ubHkKICAgKiBzYW1lIG9yaWdpbiByZXNvdXJjZSByZXF1ZXN0cy4KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMvR2V0cyB0aGUgd2hpdGVsaXN0IG9mIHRydXN0ZWQgcmVzb3VyY2UgVVJMcy4KICAgKi8KICB0aGlzLnJlc291cmNlVXJsV2hpdGVsaXN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICByZXNvdXJjZVVybFdoaXRlbGlzdCA9IGFkanVzdE1hdGNoZXJzKHZhbHVlKTsKICAgIH0KICAgIHJldHVybiByZXNvdXJjZVVybFdoaXRlbGlzdDsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QKICAgKiBAa2luZCBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtBcnJheT19IGJsYWNrbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxCbGFja2xpc3Qgd2l0aCB0aGUgdmFsdWUKICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXIKICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuCiAgICoKICAgKiAgICAgRm9sbG93IHtAbGluayBuZy4kc2NlI3Jlc291cmNlVXJsUGF0dGVybkl0ZW0gdGhpcyBsaW5rfSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbXMKICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LgogICAqCiAgICogICAgIFRoZSB0eXBpY2FsIHVzYWdlIGZvciB0aGUgYmxhY2tsaXN0IGlzIHRvICoqYmxvY2sKICAgKiAgICAgW29wZW4gcmVkaXJlY3RzXShodHRwOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzYwMS5odG1sKSoqIHNlcnZlZCBieSB5b3VyIGRvbWFpbiBhcwogICAqICAgICB0aGVzZSB3b3VsZCBvdGhlcndpc2UgYmUgdHJ1c3RlZCBidXQgYWN0dWFsbHkgcmV0dXJuIGNvbnRlbnQgZnJvbSB0aGUgcmVkaXJlY3RlZCBkb21haW4uCiAgICoKICAgKiAgICAgRmluYWxseSwgKip0aGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0KiogYW5kIGhhcyB0aGUgZmluYWwgc2F5LgogICAqCiAgICogQHJldHVybiB7QXJyYXl9IHRoZSBjdXJyZW50bHkgc2V0IGJsYWNrbGlzdCBhcnJheS4KICAgKgogICAqIFRoZSAqKmRlZmF1bHQgdmFsdWUqKiB3aGVuIG5vIHdoaXRlbGlzdCBoYXMgYmVlbiBleHBsaWNpdGx5IHNldCBpcyB0aGUgZW1wdHkgYXJyYXkgKGkuZS4gdGhlcmUKICAgKiBpcyBubyBibGFja2xpc3QuKQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cy9HZXRzIHRoZSBibGFja2xpc3Qgb2YgdHJ1c3RlZCByZXNvdXJjZSBVUkxzLgogICAqLwoKICB0aGlzLnJlc291cmNlVXJsQmxhY2tsaXN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICByZXNvdXJjZVVybEJsYWNrbGlzdCA9IGFkanVzdE1hdGNoZXJzKHZhbHVlKTsKICAgIH0KICAgIHJldHVybiByZXNvdXJjZVVybEJsYWNrbGlzdDsKICB9OwoKICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3RvcikgewoKICAgIHZhciBodG1sU2FuaXRpemVyID0gZnVuY3Rpb24gaHRtbFNhbml0aXplcihodG1sKSB7CiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7CiAgICB9OwoKICAgIGlmICgkaW5qZWN0b3IuaGFzKCckc2FuaXRpemUnKSkgewogICAgICBodG1sU2FuaXRpemVyID0gJGluamVjdG9yLmdldCgnJHNhbml0aXplJyk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIG1hdGNoVXJsKG1hdGNoZXIsIHBhcnNlZFVybCkgewogICAgICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7CiAgICAgICAgcmV0dXJuIHVybElzU2FtZU9yaWdpbihwYXJzZWRVcmwpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIGRlZmluaXRlbHkgYSByZWdleC4gIFNlZSBhZGp1c3RNYXRjaGVycygpCiAgICAgICAgcmV0dXJuICEhbWF0Y2hlci5leGVjKHBhcnNlZFVybC5ocmVmKTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kodXJsKSB7CiAgICAgIHZhciBwYXJzZWRVcmwgPSB1cmxSZXNvbHZlKHVybC50b1N0cmluZygpKTsKICAgICAgdmFyIGksIG4sIGFsbG93ZWQgPSBmYWxzZTsKICAgICAgLy8gRW5zdXJlIHRoYXQgYXQgbGVhc3Qgb25lIGl0ZW0gZnJvbSB0aGUgd2hpdGVsaXN0IGFsbG93cyB0aGlzIHVybC4KICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsV2hpdGVsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykgewogICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybFdoaXRlbGlzdFtpXSwgcGFyc2VkVXJsKSkgewogICAgICAgICAgYWxsb3dlZCA9IHRydWU7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGFsbG93ZWQpIHsKICAgICAgICAvLyBFbnN1cmUgdGhhdCBubyBpdGVtIGZyb20gdGhlIGJsYWNrbGlzdCBibG9ja2VkIHRoaXMgdXJsLgogICAgICAgIGZvciAoaSA9IDAsIG4gPSByZXNvdXJjZVVybEJsYWNrbGlzdC5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybEJsYWNrbGlzdFtpXSwgcGFyc2VkVXJsKSkgewogICAgICAgICAgICBhbGxvd2VkID0gZmFsc2U7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gYWxsb3dlZDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhvbGRlclR5cGUoQmFzZSkgewogICAgICB2YXIgaG9sZGVyVHlwZSA9IGZ1bmN0aW9uIFRydXN0ZWRWYWx1ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlKSB7CiAgICAgICAgdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIHRydXN0ZWRWYWx1ZTsKICAgICAgICB9OwogICAgICB9OwogICAgICBpZiAoQmFzZSkgewogICAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlID0gbmV3IEJhc2UoKTsKICAgICAgfQogICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24gc2NlVmFsdWVPZigpIHsKICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpOwogICAgICB9OwogICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHNjZVRvU3RyaW5nKCkgewogICAgICAgIHJldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCkudG9TdHJpbmcoKTsKICAgICAgfTsKICAgICAgcmV0dXJuIGhvbGRlclR5cGU7CiAgICB9CgogICAgdmFyIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UgPSBnZW5lcmF0ZUhvbGRlclR5cGUoKSwKICAgICAgICBieVR5cGUgPSB7fTsKCiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkhUTUxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpOwogICAgYnlUeXBlW1NDRV9DT05URVhUUy5DU1NdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpOwogICAgYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpOwogICAgYnlUeXBlW1NDRV9DT05URVhUUy5KU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7CiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUoYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdKTsKCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSN0cnVzdEFzCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRydXN0ZWQgYnkgYW5ndWxhciBmb3IgdXNlIGluIHNwZWNpZmllZCBzdHJpY3QKICAgICAqIGNvbnRleHR1YWwgZXNjYXBpbmcgY29udGV4dHMgKHN1Y2ggYXMgbmctYmluZC1odG1sLCBuZy1pbmNsdWRlLCBhbnkgc3JjCiAgICAgKiBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiwgYW55IGRvbSBldmVudCBiaW5kaW5nIGF0dHJpYnV0ZSBpbnRlcnBvbGF0aW9uCiAgICAgKiBzdWNoIGFzIGZvciBvbmNsaWNrLCAgZXRjLikgdGhhdCB1c2VzIHRoZSBwcm92aWRlZCB2YWx1ZS4KICAgICAqIFNlZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBmb3IgZW5hYmxpbmcgc3RyaWN0IGNvbnRleHR1YWwgZXNjYXBpbmcuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZS4gIGUuZy4gdXJsLAogICAgICogICByZXNvdXJjZVVybCwgaHRtbCwganMgYW5kIGNzcy4KICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCB0cnVzdGVkL3NhZmUuCiAgICAgKiBAcmV0dXJucyB7Kn0gQSB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIHN0YW5kIGluIGZvciB0aGUgcHJvdmlkZWQgYHZhbHVlYCBpbiBwbGFjZXMKICAgICAqIHdoZXJlIEFuZ3VsYXIgZXhwZWN0cyBhICRzY2UudHJ1c3RBcygpIHJldHVybiB2YWx1ZS4KICAgICAqLwogICAgZnVuY3Rpb24gdHJ1c3RBcyh0eXBlLCB0cnVzdGVkVmFsdWUpIHsKICAgICAgdmFyIENvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpOwogICAgICBpZiAoIUNvbnN0cnVjdG9yKSB7CiAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaWNvbnRleHQnLAogICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgdmFsdWUgaW4gaW52YWxpZCBjb250ZXh0LiBDb250ZXh0OiB7MH07IFZhbHVlOiB7MX0nLAogICAgICAgICAgICB0eXBlLCB0cnVzdGVkVmFsdWUpOwogICAgICB9CiAgICAgIGlmICh0cnVzdGVkVmFsdWUgPT09IG51bGwgfHwgdHJ1c3RlZFZhbHVlID09PSB1bmRlZmluZWQgfHwgdHJ1c3RlZFZhbHVlID09PSAnJykgewogICAgICAgIHJldHVybiB0cnVzdGVkVmFsdWU7CiAgICAgIH0KICAgICAgLy8gQWxsIHRoZSBjdXJyZW50IGNvbnRleHRzIGluIFNDRV9DT05URVhUUyBoYXBwZW4gdG8gYmUgc3RyaW5ncy4gIEluIG9yZGVyIHRvIGF2b2lkIHRydXN0aW5nCiAgICAgIC8vIG11dGFibGUgb2JqZWN0cywgd2UgZW5zdXJlIGhlcmUgdGhhdCB0aGUgdmFsdWUgcGFzc2VkIGluIGlzIGFjdHVhbGx5IGEgc3RyaW5nLgogICAgICBpZiAodHlwZW9mIHRydXN0ZWRWYWx1ZSAhPT0gJ3N0cmluZycpIHsKICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpdHlwZScsCiAgICAgICAgICAgICdBdHRlbXB0ZWQgdG8gdHJ1c3QgYSBub24tc3RyaW5nIHZhbHVlIGluIGEgY29udGVudCByZXF1aXJpbmcgYSBzdHJpbmc6IENvbnRleHQ6IHswfScsCiAgICAgICAgICAgIHR5cGUpOwogICAgICB9CiAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IodHJ1c3RlZFZhbHVlKTsKICAgIH0KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSN2YWx1ZU9mCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBJZiB0aGUgcGFzc2VkIHBhcmFtZXRlciBoYWQgYmVlbiByZXR1cm5lZCBieSBhIHByaW9yIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzCiAgICAgKiBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgcmV0dXJucyB0aGUgdmFsdWUgdGhhdCBoYWQgYmVlbiBwYXNzZWQgdG8ge0BsaW5rCiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfS4KICAgICAqCiAgICAgKiBJZiB0aGUgcGFzc2VkIHBhcmFtZXRlciBpcyBub3QgYSB2YWx1ZSB0aGF0IGhhZCBiZWVuIHJldHVybmVkIGJ5IHtAbGluawogICAgICogbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0sIHJldHVybnMgaXQgYXMtaXMuCiAgICAgKgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9CiAgICAgKiAgICAgIGNhbGwgb3IgYW55dGhpbmcgZWxzZS4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgYHZhbHVlYCB0aGF0IHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcwogICAgICogICAgIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGlmIGB2YWx1ZWAgaXMgdGhlIHJlc3VsdCBvZiBzdWNoIGEgY2FsbC4gIE90aGVyd2lzZSwgcmV0dXJucwogICAgICogICAgIGB2YWx1ZWAgdW5jaGFuZ2VkLgogICAgICovCiAgICBmdW5jdGlvbiB2YWx1ZU9mKG1heWJlVHJ1c3RlZCkgewogICAgICBpZiAobWF5YmVUcnVzdGVkIGluc3RhbmNlb2YgdHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSkgewogICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogVGFrZXMgdGhlIHJlc3VsdCBvZiBhIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBjYWxsIGFuZAogICAgICogcmV0dXJucyB0aGUgb3JpZ2luYWxseSBzdXBwbGllZCB2YWx1ZSBpZiB0aGUgcXVlcmllZCBjb250ZXh0IHR5cGUgaXMgYSBzdXBlcnR5cGUgb2YgdGhlCiAgICAgKiBjcmVhdGVkIHR5cGUuICBJZiB0aGlzIGNvbmRpdGlvbiBpc24ndCBzYXRpc2ZpZWQsIHRocm93cyBhbiBleGNlcHRpb24uCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHRvIGJlIHVzZWQuCiAgICAgKiBAcGFyYW0geyp9IG1heWJlVHJ1c3RlZCBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzCiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gY2FsbC4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhlIHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcwogICAgICogICAgIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGlmIHZhbGlkIGluIHRoaXMgY29udGV4dC4gIE90aGVyd2lzZSwgdGhyb3dzIGFuIGV4Y2VwdGlvbi4KICAgICAqLwogICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZCh0eXBlLCBtYXliZVRydXN0ZWQpIHsKICAgICAgaWYgKG1heWJlVHJ1c3RlZCA9PT0gbnVsbCB8fCBtYXliZVRydXN0ZWQgPT09IHVuZGVmaW5lZCB8fCBtYXliZVRydXN0ZWQgPT09ICcnKSB7CiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDsKICAgICAgfQogICAgICB2YXIgY29uc3RydWN0b3IgPSAoYnlUeXBlLmhhc093blByb3BlcnR5KHR5cGUpID8gYnlUeXBlW3R5cGVdIDogbnVsbCk7CiAgICAgIGlmIChjb25zdHJ1Y3RvciAmJiBtYXliZVRydXN0ZWQgaW5zdGFuY2VvZiBjb25zdHJ1Y3RvcikgewogICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTsKICAgICAgfQogICAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBtYXkgb25seSB0YWtlIG9uZSBvZiB0d28gYWN0aW9ucy4KICAgICAgLy8gMS4gc2FuaXRpemUgdGhlIHZhbHVlIGZvciB0aGUgcmVxdWVzdGVkIHR5cGUsIG9yCiAgICAgIC8vIDIuIHRocm93IGFuIGV4Y2VwdGlvbi4KICAgICAgaWYgKHR5cGUgPT09IFNDRV9DT05URVhUUy5SRVNPVVJDRV9VUkwpIHsKICAgICAgICBpZiAoaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeShtYXliZVRydXN0ZWQpKSB7CiAgICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpbnNlY3VybCcsCiAgICAgICAgICAgICAgJ0Jsb2NrZWQgbG9hZGluZyByZXNvdXJjZSBmcm9tIHVybCBub3QgYWxsb3dlZCBieSAkc2NlRGVsZWdhdGUgcG9saWN5LiAgVVJMOiB7MH0nLAogICAgICAgICAgICAgIG1heWJlVHJ1c3RlZC50b1N0cmluZygpKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLkhUTUwpIHsKICAgICAgICByZXR1cm4gaHRtbFNhbml0aXplcihtYXliZVRydXN0ZWQpOwogICAgICB9CiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7CiAgICB9CgogICAgcmV0dXJuIHsgdHJ1c3RBczogdHJ1c3RBcywKICAgICAgICAgICAgIGdldFRydXN0ZWQ6IGdldFRydXN0ZWQsCiAgICAgICAgICAgICB2YWx1ZU9mOiB2YWx1ZU9mIH07CiAgfV07Cn0KCgovKioKICogQG5nZG9jIHByb3ZpZGVyCiAqIEBuYW1lICRzY2VQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICoKICogVGhlICRzY2VQcm92aWRlciBwcm92aWRlciBhbGxvd3MgZGV2ZWxvcGVycyB0byBjb25maWd1cmUgdGhlIHtAbGluayBuZy4kc2NlICRzY2V9IHNlcnZpY2UuCiAqIC0gICBlbmFibGUvZGlzYWJsZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKSBpbiBhIG1vZHVsZQogKiAtICAgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2l0aCBhIGN1c3RvbSBkZWxlZ2F0ZQogKgogKiBSZWFkIG1vcmUgYWJvdXQge0BsaW5rIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LgogKi8KCi8qIGpzaGludCBtYXhsZW46IGZhbHNlKi8KCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkc2NlCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBgJHNjZWAgaXMgYSBzZXJ2aWNlIHRoYXQgcHJvdmlkZXMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgc2VydmljZXMgdG8gQW5ndWxhckpTLgogKgogKiAjIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nCiAqCiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGlzIGEgbW9kZSBpbiB3aGljaCBBbmd1bGFySlMgcmVxdWlyZXMgYmluZGluZ3MgaW4gY2VydGFpbgogKiBjb250ZXh0cyB0byByZXN1bHQgaW4gYSB2YWx1ZSB0aGF0IGlzIG1hcmtlZCBhcyBzYWZlIHRvIHVzZSBmb3IgdGhhdCBjb250ZXh0LiAgT25lIGV4YW1wbGUgb2YKICogc3VjaCBhIGNvbnRleHQgaXMgYmluZGluZyBhcmJpdHJhcnkgaHRtbCBjb250cm9sbGVkIGJ5IHRoZSB1c2VyIHZpYSBgbmctYmluZC1odG1sYC4gIFdlIHJlZmVyCiAqIHRvIHRoZXNlIGNvbnRleHRzIGFzIHByaXZpbGVnZWQgb3IgU0NFIGNvbnRleHRzLgogKgogKiBBcyBvZiB2ZXJzaW9uIDEuMiwgQW5ndWxhciBzaGlwcyB3aXRoIFNDRSBlbmFibGVkIGJ5IGRlZmF1bHQuCiAqCiAqIE5vdGU6ICBXaGVuIGVuYWJsZWQgKHRoZSBkZWZhdWx0KSwgSUU8MTEgaW4gcXVpcmtzIG1vZGUgaXMgbm90IHN1cHBvcnRlZC4gIEluIHRoaXMgbW9kZSwgSUU8MTEgYWxsb3cKICogb25lIHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGphdmFzY3JpcHQgYnkgdGhlIHVzZSBvZiB0aGUgZXhwcmVzc2lvbigpIHN5bnRheC4gIFJlZmVyCiAqIDxodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZS9hcmNoaXZlLzIwMDgvMTAvMTYvZW5kaW5nLWV4cHJlc3Npb25zLmFzcHg+IHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlbS4KICogWW91IGNhbiBlbnN1cmUgeW91ciBkb2N1bWVudCBpcyBpbiBzdGFuZGFyZHMgbW9kZSBhbmQgbm90IHF1aXJrcyBtb2RlIGJ5IGFkZGluZyBgPCFkb2N0eXBlIGh0bWw+YAogKiB0byB0aGUgdG9wIG9mIHlvdXIgSFRNTCBkb2N1bWVudC4KICoKICogU0NFIGFzc2lzdHMgaW4gd3JpdGluZyBjb2RlIGluIHdheSB0aGF0IChhKSBpcyBzZWN1cmUgYnkgZGVmYXVsdCBhbmQgKGIpIG1ha2VzIGF1ZGl0aW5nIGZvcgogKiBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgc3VjaCBhcyBYU1MsIGNsaWNramFja2luZywgZXRjLiBhIGxvdCBlYXNpZXIuCiAqCiAqIEhlcmUncyBhbiBleGFtcGxlIG9mIGEgYmluZGluZyBpbiBhIHByaXZpbGVnZWQgY29udGV4dDoKICoKICogYGBgCiAqIDxpbnB1dCBuZy1tb2RlbD0idXNlckh0bWwiPgogKiA8ZGl2IG5nLWJpbmQtaHRtbD0idXNlckh0bWwiPjwvZGl2PgogKiBgYGAKICoKICogTm90aWNlIHRoYXQgYG5nLWJpbmQtaHRtbGAgaXMgYm91bmQgdG8gYHVzZXJIdG1sYCBjb250cm9sbGVkIGJ5IHRoZSB1c2VyLiAgV2l0aCBTQ0UKICogZGlzYWJsZWQsIHRoaXMgYXBwbGljYXRpb24gYWxsb3dzIHRoZSB1c2VyIHRvIHJlbmRlciBhcmJpdHJhcnkgSFRNTCBpbnRvIHRoZSBESVYuCiAqIEluIGEgbW9yZSByZWFsaXN0aWMgZXhhbXBsZSwgb25lIG1heSBiZSByZW5kZXJpbmcgdXNlciBjb21tZW50cywgYmxvZyBhcnRpY2xlcywgZXRjLiB2aWEKICogYmluZGluZ3MuICAoSFRNTCBpcyBqdXN0IG9uZSBleGFtcGxlIG9mIGEgY29udGV4dCB3aGVyZSByZW5kZXJpbmcgdXNlciBjb250cm9sbGVkIGlucHV0IGNyZWF0ZXMKICogc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLikKICoKICogRm9yIHRoZSBjYXNlIG9mIEhUTUwsIHlvdSBtaWdodCB1c2UgYSBsaWJyYXJ5LCBlaXRoZXIgb24gdGhlIGNsaWVudCBzaWRlLCBvciBvbiB0aGUgc2VydmVyIHNpZGUsCiAqIHRvIHNhbml0aXplIHVuc2FmZSBIVE1MIGJlZm9yZSBiaW5kaW5nIHRvIHRoZSB2YWx1ZSBhbmQgcmVuZGVyaW5nIGl0IGluIHRoZSBkb2N1bWVudC4KICoKICogSG93IHdvdWxkIHlvdSBlbnN1cmUgdGhhdCBldmVyeSBwbGFjZSB0aGF0IHVzZWQgdGhlc2UgdHlwZXMgb2YgYmluZGluZ3Mgd2FzIGJvdW5kIHRvIGEgdmFsdWUgdGhhdAogKiB3YXMgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSAob3IgcmV0dXJuZWQgYXMgc2FmZSBmb3IgcmVuZGVyaW5nIGJ5IHlvdXIgc2VydmVyPykgIEhvdyBjYW4geW91CiAqIGVuc3VyZSB0aGF0IHlvdSBkaWRuJ3QgYWNjaWRlbnRhbGx5IGRlbGV0ZSB0aGUgbGluZSB0aGF0IHNhbml0aXplZCB0aGUgdmFsdWUsIG9yIHJlbmFtZWQgc29tZQogKiBwcm9wZXJ0aWVzL2ZpZWxkcyBhbmQgZm9yZ290IHRvIHVwZGF0ZSB0aGUgYmluZGluZyB0byB0aGUgc2FuaXRpemVkIHZhbHVlPwogKgogKiBUbyBiZSBzZWN1cmUgYnkgZGVmYXVsdCwgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgYW55IHN1Y2ggYmluZGluZ3MgYXJlIGRpc2FsbG93ZWQgdW5sZXNzIHlvdSBjYW4KICogZGV0ZXJtaW5lIHRoYXQgc29tZXRoaW5nIGV4cGxpY2l0bHkgc2F5cyBpdCdzIHNhZmUgdG8gdXNlIGEgdmFsdWUgZm9yIGJpbmRpbmcgaW4gdGhhdAogKiBjb250ZXh0LiAgWW91IGNhbiB0aGVuIGF1ZGl0IHlvdXIgY29kZSAoYSBzaW1wbGUgZ3JlcCB3b3VsZCBkbykgdG8gZW5zdXJlIHRoYXQgdGhpcyBpcyBvbmx5IGRvbmUKICogZm9yIHRob3NlIHZhbHVlcyB0aGF0IHlvdSBjYW4gZWFzaWx5IHRlbGwgYXJlIHNhZmUgLSBiZWNhdXNlIHRoZXkgd2VyZSByZWNlaXZlZCBmcm9tIHlvdXIgc2VydmVyLAogKiBzYW5pdGl6ZWQgYnkgeW91ciBsaWJyYXJ5LCBldGMuICBZb3UgY2FuIG9yZ2FuaXplIHlvdXIgY29kZWJhc2UgdG8gaGVscCB3aXRoIHRoaXMgLSBwZXJoYXBzCiAqIGFsbG93aW5nIG9ubHkgdGhlIGZpbGVzIGluIGEgc3BlY2lmaWMgZGlyZWN0b3J5IHRvIGRvIHRoaXMuICBFbnN1cmluZyB0aGF0IHRoZSBpbnRlcm5hbCBBUEkKICogZXhwb3NlZCBieSB0aGF0IGNvZGUgZG9lc24ndCBtYXJrdXAgYXJiaXRyYXJ5IHZhbHVlcyBhcyBzYWZlIHRoZW4gYmVjb21lcyBhIG1vcmUgbWFuYWdlYWJsZSB0YXNrLgogKgogKiBJbiB0aGUgY2FzZSBvZiBBbmd1bGFySlMnIFNDRSBzZXJ2aWNlLCBvbmUgdXNlcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30KICogKGFuZCBzaG9ydGhhbmQgbWV0aG9kcyBzdWNoIGFzIHtAbGluayBuZy4kc2NlI3RydXN0QXNIdG1sICRzY2UudHJ1c3RBc0h0bWx9LCBldGMuKSB0bwogKiBvYnRhaW4gdmFsdWVzIHRoYXQgd2lsbCBiZSBhY2NlcHRlZCBieSBTQ0UgLyBwcml2aWxlZ2VkIGNvbnRleHRzLgogKgogKgogKiAjIyBIb3cgZG9lcyBpdCB3b3JrPwogKgogKiBJbiBwcml2aWxlZ2VkIGNvbnRleHRzLCBkaXJlY3RpdmVzIGFuZCBjb2RlIHdpbGwgYmluZCB0byB0aGUgcmVzdWx0IG9mIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQKICogJHNjZS5nZXRUcnVzdGVkKGNvbnRleHQsIHZhbHVlKX0gcmF0aGVyIHRoYW4gdG8gdGhlIHZhbHVlIGRpcmVjdGx5LiAgRGlyZWN0aXZlcyB1c2Uge0BsaW5rCiAqIG5nLiRzY2UjcGFyc2VBcyAkc2NlLnBhcnNlQXN9IHJhdGhlciB0aGFuIGAkcGFyc2VgIHRvIHdhdGNoIGF0dHJpYnV0ZSBiaW5kaW5ncywgd2hpY2ggcGVyZm9ybXMgdGhlCiAqIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkfSBiZWhpbmQgdGhlIHNjZW5lcyBvbiBub24tY29uc3RhbnQgbGl0ZXJhbHMuCiAqCiAqIEFzIGFuIGV4YW1wbGUsIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSB1c2VzIHtAbGluawogKiBuZy4kc2NlI3BhcnNlQXNIdG1sICRzY2UucGFyc2VBc0h0bWwoYmluZGluZyBleHByZXNzaW9uKX0uICBIZXJlJ3MgdGhlIGFjdHVhbCBjb2RlIChzbGlnaHRseQogKiBzaW1wbGlmaWVkKToKICoKICogYGBgCiAqIHZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgZnVuY3Rpb24oJHNjZSkgewogKiAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogKiAgICAgc2NvcGUuJHdhdGNoKCRzY2UucGFyc2VBc0h0bWwoYXR0ci5uZ0JpbmRIdG1sKSwgZnVuY3Rpb24odmFsdWUpIHsKICogICAgICAgZWxlbWVudC5odG1sKHZhbHVlIHx8ICcnKTsKICogICAgIH0pOwogKiAgIH07CiAqIH1dOwogKiBgYGAKICoKICogIyMgSW1wYWN0IG9uIGxvYWRpbmcgdGVtcGxhdGVzCiAqCiAqIFRoaXMgYXBwbGllcyBib3RoIHRvIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmctaW5jbHVkZWB9IGRpcmVjdGl2ZSBhcyB3ZWxsIGFzCiAqIGB0ZW1wbGF0ZVVybGAncyBzcGVjaWZpZWQgYnkge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS4KICoKICogQnkgZGVmYXVsdCwgQW5ndWxhciBvbmx5IGxvYWRzIHRlbXBsYXRlcyBmcm9tIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlIGFwcGxpY2F0aW9uCiAqIGRvY3VtZW50LiAgVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsCiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiB0aGUgdGVtcGxhdGUgVVJMLiAgVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIGFuZC9vcgogKiBwcm90b2NvbHMsIHlvdSBtYXkgZWl0aGVyIGVpdGhlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0CiAqIHRoZW19IG9yIHtAbGluayBuZy4kc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIGl0fSBpbnRvIGEgdHJ1c3RlZCB2YWx1ZS4KICoKICogKlBsZWFzZSBub3RlKjoKICogVGhlIGJyb3dzZXIncwogKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KQogKiBhbmQgW0Nyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIChDT1JTKV0oaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8pCiAqIHBvbGljeSBhcHBseSBpbiBhZGRpdGlvbiB0byB0aGlzIGFuZCBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHkKICogbG9hZGVkLiAgVGhpcyBtZWFucyB0aGF0IHdpdGhvdXQgdGhlIHJpZ2h0IENPUlMgcG9saWN5LCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGEgZGlmZmVyZW50IGRvbWFpbgogKiB3b24ndCB3b3JrIG9uIGFsbCBicm93c2Vycy4gIEFsc28sIGxvYWRpbmcgdGVtcGxhdGVzIGZyb20gYGZpbGU6Ly9gIFVSTCBkb2VzIG5vdCB3b3JrIG9uIHNvbWUKICogYnJvd3NlcnMuCiAqCiAqICMjIFRoaXMgZmVlbHMgbGlrZSB0b28gbXVjaCBvdmVyaGVhZAogKgogKiBJdCdzIGltcG9ydGFudCB0byByZW1lbWJlciB0aGF0IFNDRSBvbmx5IGFwcGxpZXMgdG8gaW50ZXJwb2xhdGlvbiBleHByZXNzaW9ucy4KICoKICogSWYgeW91ciBleHByZXNzaW9ucyBhcmUgY29uc3RhbnQgbGl0ZXJhbHMsIHRoZXkncmUgYXV0b21hdGljYWxseSB0cnVzdGVkIGFuZCB5b3UgZG9uJ3QgbmVlZCB0bwogKiBjYWxsIGAkc2NlLnRydXN0QXNgIG9uIHRoZW0gKHJlbWVtYmVyIHRvIGluY2x1ZGUgdGhlIGBuZ1Nhbml0aXplYCBtb2R1bGUpIChlLmcuCiAqIGA8ZGl2IG5nLWJpbmQtaHRtbD0iJzxiPmltcGxpY2l0bHkgdHJ1c3RlZDwvYj4nIj48L2Rpdj5gKSBqdXN0IHdvcmtzLgogKgogKiBBZGRpdGlvbmFsbHksIGBhW2hyZWZdYCBhbmQgYGltZ1tzcmNdYCBhdXRvbWF0aWNhbGx5IHNhbml0aXplIHRoZWlyIFVSTHMgYW5kIGRvIG5vdCBwYXNzIHRoZW0KICogdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0uICBTQ0UgZG9lc24ndCBwbGF5IGEgcm9sZSBoZXJlLgogKgogKiBUaGUgaW5jbHVkZWQge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGNvbWVzIHdpdGggc2FuZSBkZWZhdWx0cyB0byBhbGxvdyB5b3UgdG8gbG9hZAogKiB0ZW1wbGF0ZXMgaW4gYG5nLWluY2x1ZGVgIGZyb20geW91ciBhcHBsaWNhdGlvbidzIGRvbWFpbiB3aXRob3V0IGhhdmluZyB0byBldmVuIGtub3cgYWJvdXQgU0NFLgogKiBJdCBibG9ja3MgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIGxvYWRpbmcgdGVtcGxhdGVzIG92ZXIgaHR0cCBmcm9tIGFuIGh0dHBzCiAqIHNlcnZlZCBkb2N1bWVudC4gIFlvdSBjYW4gY2hhbmdlIHRoZXNlIGJ5IHNldHRpbmcgeW91ciBvd24gY3VzdG9tIHtAbGluawogKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3RzfSBhbmQge0BsaW5rCiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IGJsYWNrbGlzdHN9IGZvciBtYXRjaGluZyBzdWNoIFVSTHMuCiAqCiAqIFRoaXMgc2lnbmlmaWNhbnRseSByZWR1Y2VzIHRoZSBvdmVyaGVhZC4gIEl0IGlzIGZhciBlYXNpZXIgdG8gcGF5IHRoZSBzbWFsbCBvdmVyaGVhZCBhbmQgaGF2ZSBhbgogKiBhcHBsaWNhdGlvbiB0aGF0J3Mgc2VjdXJlIGFuZCBjYW4gYmUgYXVkaXRlZCB0byB2ZXJpZnkgdGhhdCB3aXRoIG11Y2ggbW9yZSBlYXNlIHRoYW4gYm9sdGluZwogKiBzZWN1cml0eSBvbnRvIGFuIGFwcGxpY2F0aW9uIGxhdGVyLgogKgogKiA8YSBuYW1lPSJjb250ZXh0cyI+PC9hPgogKiAjIyBXaGF0IHRydXN0ZWQgY29udGV4dCB0eXBlcyBhcmUgc3VwcG9ydGVkPwogKgogKiB8IENvbnRleHQgICAgICAgICAgICAgfCBOb3RlcyAgICAgICAgICB8CiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXwKICogfCBgJHNjZS5IVE1MYCAgICAgICAgIHwgRm9yIEhUTUwgdGhhdCdzIHNhZmUgdG8gc291cmNlIGludG8gdGhlIGFwcGxpY2F0aW9uLiAgVGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSBkaXJlY3RpdmUgdXNlcyB0aGlzIGNvbnRleHQgZm9yIGJpbmRpbmdzLiBJZiBhbiB1bnNhZmUgdmFsdWUgaXMgZW5jb3VudGVyZWQgYW5kIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSAkc2FuaXRpemV9IG1vZHVsZSBpcyBwcmVzZW50IHRoaXMgd2lsbCBzYW5pdGl6ZSB0aGUgdmFsdWUgaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBlcnJvci4gfAogKiB8IGAkc2NlLkNTU2AgICAgICAgICAgfCBGb3IgQ1NTIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIEN1cnJlbnRseSB1bnVzZWQuICBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHwKICogfCBgJHNjZS5VUkxgICAgICAgICAgIHwgRm9yIFVSTHMgdGhhdCBhcmUgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MuICBDdXJyZW50bHkgdW51c2VkIChgPGEgaHJlZj1gIGFuZCBgPGltZyBzcmM9YCBzYW5pdGl6ZSB0aGVpciB1cmxzIGFuZCBkb24ndCBjb25zdGl0dXRlIGFuIFNDRSBjb250ZXh0LiB8CiAqIHwgYCRzY2UuUkVTT1VSQ0VfVVJMYCB8IEZvciBVUkxzIHRoYXQgYXJlIG5vdCBvbmx5IHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLCBidXQgd2hvc2UgY29udGVudHMgYXJlIGFsc28gc2FmZSB0byBpbmNsdWRlIGluIHlvdXIgYXBwbGljYXRpb24uICBFeGFtcGxlcyBpbmNsdWRlIGBuZy1pbmNsdWRlYCwgYHNyY2AgLyBgbmdTcmNgIGJpbmRpbmdzIGZvciB0YWdzIG90aGVyIHRoYW4gYElNR2AgKGUuZy4gYElGUkFNRWAsIGBPQkpFQ1RgLCBldGMuKSAgPGJyPjxicj5Ob3RlIHRoYXQgYCRzY2UuUkVTT1VSQ0VfVVJMYCBtYWtlcyBhIHN0cm9uZ2VyIHN0YXRlbWVudCBhYm91dCB0aGUgVVJMIHRoYW4gYCRzY2UuVVJMYCBkb2VzIGFuZCB0aGVyZWZvcmUgY29udGV4dHMgcmVxdWlyaW5nIHZhbHVlcyB0cnVzdGVkIGZvciBgJHNjZS5SRVNPVVJDRV9VUkxgIGNhbiBiZSB1c2VkIGFueXdoZXJlIHRoYXQgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlVSTGAgYXJlIHJlcXVpcmVkLiB8CiAqIHwgYCRzY2UuSlNgICAgICAgICAgICB8IEZvciBKYXZhU2NyaXB0IHRoYXQgaXMgc2FmZSB0byBleGVjdXRlIGluIHlvdXIgYXBwbGljYXRpb24ncyBjb250ZXh0LiAgQ3VycmVudGx5IHVudXNlZC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfAogKgogKiAjIyBGb3JtYXQgb2YgaXRlbXMgaW4ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHJlc291cmNlVXJsV2hpdGVsaXN0fS97QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgQmxhY2tsaXN0fSA8YSBuYW1lPSJyZXNvdXJjZVVybFBhdHRlcm5JdGVtIj48L2E+CiAqCiAqICBFYWNoIGVsZW1lbnQgaW4gdGhlc2UgYXJyYXlzIG11c3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6CiAqCiAqICAtICoqJ3NlbGYnKioKICogICAgLSBUaGUgc3BlY2lhbCAqKnN0cmluZyoqLCBgJ3NlbGYnYCwgY2FuIGJlIHVzZWQgdG8gbWF0Y2ggYWdhaW5zdCBhbGwgVVJMcyBvZiB0aGUgKipzYW1lCiAqICAgICAgZG9tYWluKiogYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50IHVzaW5nIHRoZSAqKnNhbWUgcHJvdG9jb2wqKi4KICogIC0gKipTdHJpbmcqKiAoZXhjZXB0IHRoZSBzcGVjaWFsIHZhbHVlIGAnc2VsZidgKQogKiAgICAtIFRoZSBzdHJpbmcgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBmdWxsICpub3JtYWxpemVkIC8gYWJzb2x1dGUgVVJMKiBvZiB0aGUgcmVzb3VyY2UKICogICAgICBiZWluZyB0ZXN0ZWQgKHN1YnN0cmluZyBtYXRjaGVzIGFyZSBub3QgZ29vZCBlbm91Z2guKQogKiAgICAtIFRoZXJlIGFyZSBleGFjdGx5ICoqdHdvIHdpbGRjYXJkIHNlcXVlbmNlcyoqIC0gYCpgIGFuZCBgKipgLiAgQWxsIG90aGVyIGNoYXJhY3RlcnMKICogICAgICBtYXRjaCB0aGVtc2VsdmVzLgogKiAgICAtIGAqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgYW55IGNoYXJhY3RlciBvdGhlciB0aGFuIG9uZSBvZiB0aGUgZm9sbG93aW5nIDYKICogICAgICBjaGFyYWN0ZXJzOiAnYDpgJywgJ2AvYCcsICdgLmAnLCAnYD9gJywgJ2AmYCcgYW5kICc7Jy4gIEl0J3MgYSB1c2VmdWwgd2lsZGNhcmQgZm9yIHVzZQogKiAgICAgIGluIGEgd2hpdGVsaXN0LgogKiAgICAtIGAqKmA6IG1hdGNoZXMgemVybyBvciBtb3JlIG9jY3VycmVuY2VzIG9mICphbnkqIGNoYXJhY3Rlci4gIEFzIHN1Y2gsIGl0J3Mgbm90CiAqICAgICAgbm90IGFwcHJvcHJpYXRlIHRvIHVzZSBpbiBmb3IgYSBzY2hlbWUsIGRvbWFpbiwgZXRjLiBhcyBpdCB3b3VsZCBtYXRjaCB0b28gbXVjaC4gIChlLmcuCiAqICAgICAgaHR0cDovLyoqLmV4YW1wbGUuY29tLyB3b3VsZCBtYXRjaCBodHRwOi8vZXZpbC5jb20vP2lnbm9yZT0uZXhhbXBsZS5jb20vIGFuZCB0aGF0IG1pZ2h0CiAqICAgICAgbm90IGhhdmUgYmVlbiB0aGUgaW50ZW50aW9uLikgIEl0cyB1c2FnZSBhdCB0aGUgdmVyeSBlbmQgb2YgdGhlIHBhdGggaXMgb2suICAoZS5nLgogKiAgICAgIGh0dHA6Ly9mb28uZXhhbXBsZS5jb20vdGVtcGxhdGVzLyoqKS4KICogIC0gKipSZWdFeHAqKiAoKnNlZSBjYXZlYXQgYmVsb3cqKQogKiAgICAtICpDYXZlYXQqOiAgV2hpbGUgcmVndWxhciBleHByZXNzaW9ucyBhcmUgcG93ZXJmdWwgYW5kIG9mZmVyIGdyZWF0IGZsZXhpYmlsaXR5LCAgdGhlaXIgc3ludGF4CiAqICAgICAgKGFuZCBhbGwgdGhlIGluZXZpdGFibGUgZXNjYXBpbmcpIG1ha2VzIHRoZW0gKmhhcmRlciB0byBtYWludGFpbiouICBJdCdzIGVhc3kgdG8KICogICAgICBhY2NpZGVudGFsbHkgaW50cm9kdWNlIGEgYnVnIHdoZW4gb25lIHVwZGF0ZXMgYSBjb21wbGV4IGV4cHJlc3Npb24gKGltaG8sIGFsbCByZWdleGVzIHNob3VsZAogKiAgICAgIGhhdmUgZ29vZCB0ZXN0IGNvdmVyYWdlLikuICBGb3IgaW5zdGFuY2UsIHRoZSB1c2Ugb2YgYC5gIGluIHRoZSByZWdleCBpcyBjb3JyZWN0IG9ubHkgaW4gYQogKiAgICAgIHNtYWxsIG51bWJlciBvZiBjYXNlcy4gIEEgYC5gIGNoYXJhY3RlciBpbiB0aGUgcmVnZXggdXNlZCB3aGVuIG1hdGNoaW5nIHRoZSBzY2hlbWUgb3IgYQogKiAgICAgIHN1YmRvbWFpbiBjb3VsZCBiZSBtYXRjaGVkIGFnYWluc3QgYSBgOmAgb3IgbGl0ZXJhbCBgLmAgdGhhdCB3YXMgbGlrZWx5IG5vdCBpbnRlbmRlZC4gICBJdAogKiAgICAgIGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgdGhlIHN0cmluZyBwYXR0ZXJucyBhbmQgb25seSBmYWxsIGJhY2sgdG8gcmVndWxhciBleHByZXNzaW9ucwogKiAgICAgIGlmIHRoZXkgYXMgYSBsYXN0IHJlc29ydC4KICogICAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwIChpLmUuIG5vdCBhIHN0cmluZy4pICBJdCBpcwogKiAgICAgIG1hdGNoZWQgYWdhaW5zdCB0aGUgKiplbnRpcmUqKiAqbm9ybWFsaXplZCAvIGFic29sdXRlIFVSTCogb2YgdGhlIHJlc291cmNlIGJlaW5nIHRlc3RlZAogKiAgICAgIChldmVuIHdoZW4gdGhlIFJlZ0V4cCBkaWQgbm90IGhhdmUgdGhlIGBeYCBhbmQgYCRgIGNvZGVzLikgIEluIGFkZGl0aW9uLCBhbnkgZmxhZ3MKICogICAgICBwcmVzZW50IG9uIHRoZSBSZWdFeHAgKHN1Y2ggYXMgbXVsdGlsaW5lLCBnbG9iYWwsIGlnbm9yZUNhc2UpIGFyZSBpZ25vcmVkLgogKiAgICAtIElmIHlvdSBhcmUgZ2VuZXJhdGluZyB5b3VyIEphdmFTY3JpcHQgZnJvbSBzb21lIG90aGVyIHRlbXBsYXRpbmcgZW5naW5lIChub3QKICogICAgICByZWNvbW1lbmRlZCwgZS5nLiBpbiBpc3N1ZSBbIzQwMDZdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzQwMDYpKSwKICogICAgICByZW1lbWJlciB0byBlc2NhcGUgeW91ciByZWd1bGFyIGV4cHJlc3Npb24gKGFuZCBiZSBhd2FyZSB0aGF0IHlvdSBtaWdodCBuZWVkIG1vcmUgdGhhbgogKiAgICAgIG9uZSBsZXZlbCBvZiBlc2NhcGluZyBkZXBlbmRpbmcgb24geW91ciB0ZW1wbGF0aW5nIGVuZ2luZSBhbmQgdGhlIHdheSB5b3UgaW50ZXJwb2xhdGVkCiAqICAgICAgdGhlIHZhbHVlLikgIERvIG1ha2UgdXNlIG9mIHlvdXIgcGxhdGZvcm0ncyBlc2NhcGluZyBtZWNoYW5pc20gYXMgaXQgbWlnaHQgYmUgZ29vZAogKiAgICAgIGVub3VnaCBiZWZvcmUgY29kaW5nIHlvdXIgb3duLiAgZS5nLiBSdWJ5IGhhcwogKiAgICAgIFtSZWdleHAuZXNjYXBlKHN0cildKGh0dHA6Ly93d3cucnVieS1kb2Mub3JnL2NvcmUtMi4wLjAvUmVnZXhwLmh0bWwjbWV0aG9kLWMtZXNjYXBlKQogKiAgICAgIGFuZCBQeXRob24gaGFzIFtyZS5lc2NhcGVdKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9yZS5odG1sI3JlLmVzY2FwZSkuCiAqICAgICAgSmF2YXNjcmlwdCBsYWNrcyBhIHNpbWlsYXIgYnVpbHQgaW4gZnVuY3Rpb24gZm9yIGVzY2FwaW5nLiAgVGFrZSBhIGxvb2sgYXQgR29vZ2xlCiAqICAgICAgQ2xvc3VyZSBsaWJyYXJ5J3MgW2dvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZShzKV0oCiAqICAgICAgaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfc3RyaW5nX3N0cmluZy5qcy5zb3VyY2UuaHRtbCNsaW5lOTYyKS4KICoKICogUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSBmb3IgYW4gZXhhbXBsZS4KICoKICogIyMgU2hvdyBtZSBhbiBleGFtcGxlIHVzaW5nIFNDRS4KICoKICogPGV4YW1wbGUgbW9kdWxlPSJteVNjZUFwcCIgZGVwcz0iYW5ndWxhci1zYW5pdGl6ZS5qcyI+CiAqIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogKiAgIDxkaXYgbmctY29udHJvbGxlcj0iQXBwQ29udHJvbGxlciBhcyBteUN0cmwiPgogKiAgICAgPGkgbmctYmluZC1odG1sPSJteUN0cmwuZXhwbGljaXRseVRydXN0ZWRIdG1sIiBpZD0iZXhwbGljaXRseVRydXN0ZWRIdG1sIj48L2k+PGJyPjxicj4KICogICAgIDxiPlVzZXIgY29tbWVudHM8L2I+PGJyPgogKiAgICAgQnkgZGVmYXVsdCwgSFRNTCB0aGF0IGlzbid0IGV4cGxpY2l0bHkgdHJ1c3RlZCAoZS5nLiBBbGljZSdzIGNvbW1lbnQpIGlzIHNhbml0aXplZCB3aGVuCiAqICAgICAkc2FuaXRpemUgaXMgYXZhaWxhYmxlLiAgSWYgJHNhbml0aXplIGlzbid0IGF2YWlsYWJsZSwgdGhpcyByZXN1bHRzIGluIGFuIGVycm9yIGluc3RlYWQgb2YgYW4KICogICAgIGV4cGxvaXQuCiAqICAgICA8ZGl2IGNsYXNzPSJ3ZWxsIj4KICogICAgICAgPGRpdiBuZy1yZXBlYXQ9InVzZXJDb21tZW50IGluIG15Q3RybC51c2VyQ29tbWVudHMiPgogKiAgICAgICAgIDxiPnt7dXNlckNvbW1lbnQubmFtZX19PC9iPjoKICogICAgICAgICA8c3BhbiBuZy1iaW5kLWh0bWw9InVzZXJDb21tZW50Lmh0bWxDb21tZW50IiBjbGFzcz0iaHRtbENvbW1lbnQiPjwvc3Bhbj4KICogICAgICAgICA8YnI+CiAqICAgICAgIDwvZGl2PgogKiAgICAgPC9kaXY+CiAqICAgPC9kaXY+CiAqIDwvZmlsZT4KICoKICogPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICogICBhbmd1bGFyLm1vZHVsZSgnbXlTY2VBcHAnLCBbJ25nU2FuaXRpemUnXSkKICogICAgIC5jb250cm9sbGVyKCdBcHBDb250cm9sbGVyJywgWyckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckc2NlJywKICogICAgICAgZnVuY3Rpb24oJGh0dHAsICR0ZW1wbGF0ZUNhY2hlLCAkc2NlKSB7CiAqICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogKiAgICAgICAgICRodHRwLmdldCgidGVzdF9kYXRhLmpzb24iLCB7Y2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuc3VjY2VzcyhmdW5jdGlvbih1c2VyQ29tbWVudHMpIHsKICogICAgICAgICAgIHNlbGYudXNlckNvbW1lbnRzID0gdXNlckNvbW1lbnRzOwogKiAgICAgICAgIH0pOwogKiAgICAgICAgIHNlbGYuZXhwbGljaXRseVRydXN0ZWRIdG1sID0gJHNjZS50cnVzdEFzSHRtbCgKICogICAgICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPSJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgKwogKiAgICAgICAgICAgICAnc2FuaXRpemF0aW9uLiZxdW90OyI+SG92ZXIgb3ZlciB0aGlzIHRleHQuPC9zcGFuPicpOwogKiAgICAgICB9XSk7CiAqIDwvZmlsZT4KICoKICogPGZpbGUgbmFtZT0idGVzdF9kYXRhLmpzb24iPgogKiBbCiAqICAgeyAibmFtZSI6ICJBbGljZSIsCiAqICAgICAiaHRtbENvbW1lbnQiOgogKiAgICAgICAgICI8c3BhbiBvbm1vdXNlb3Zlcj0ndGhpcy50ZXh0Q29udGVudD1cIlBXTjNEIVwiJz5JcyA8aT5hbnlvbmU8L2k+IHJlYWRpbmcgdGhpcz88L3NwYW4+IgogKiAgIH0sCiAqICAgeyAibmFtZSI6ICJCb2IiLAogKiAgICAgImh0bWxDb21tZW50IjogIjxpPlllcyE8L2k+ICBBbSBJIHRoZSBvbmx5IG90aGVyIG9uZT8iCiAqICAgfQogKiBdCiAqIDwvZmlsZT4KICoKICogPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAqICAgZGVzY3JpYmUoJ1NDRSBkb2MgZGVtbycsIGZ1bmN0aW9uKCkgewogKiAgICAgaXQoJ3Nob3VsZCBzYW5pdGl6ZSB1bnRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7CiAqICAgICAgIGV4cGVjdChlbGVtZW50LmFsbChieS5jc3MoJy5odG1sQ29tbWVudCcpKS5maXJzdCgpLmdldElubmVySHRtbCgpKQogKiAgICAgICAgICAgLnRvQmUoJzxzcGFuPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj4nKTsKICogICAgIH0pOwogKgogKiAgICAgaXQoJ3Nob3VsZCBOT1Qgc2FuaXRpemUgZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkgewogKiAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZXhwbGljaXRseVRydXN0ZWRIdG1sJykpLmdldElubmVySHRtbCgpKS50b0JlKAogKiAgICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPSJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgKwogKiAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDsiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTsKICogICAgIH0pOwogKiAgIH0pOwogKiA8L2ZpbGU+CiAqIDwvZXhhbXBsZT4KICoKICoKICoKICogIyMgQ2FuIEkgZGlzYWJsZSBTQ0UgY29tcGxldGVseT8KICoKICogWWVzLCB5b3UgY2FuLiAgSG93ZXZlciwgdGhpcyBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC4gIFNDRSBnaXZlcyB5b3UgYSBsb3Qgb2Ygc2VjdXJpdHkgYmVuZWZpdHMKICogZm9yIGxpdHRsZSBjb2Rpbmcgb3ZlcmhlYWQuICBJdCB3aWxsIGJlIG11Y2ggaGFyZGVyIHRvIHRha2UgYW4gU0NFIGRpc2FibGVkIGFwcGxpY2F0aW9uIGFuZAogKiBlaXRoZXIgc2VjdXJlIGl0IG9uIHlvdXIgb3duIG9yIGVuYWJsZSBTQ0UgYXQgYSBsYXRlciBzdGFnZS4gIEl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gZGlzYWJsZSBTQ0UKICogZm9yIGNhc2VzIHdoZXJlIHlvdSBoYXZlIGEgbG90IG9mIGV4aXN0aW5nIGNvZGUgdGhhdCB3YXMgd3JpdHRlbiBiZWZvcmUgU0NFIHdhcyBpbnRyb2R1Y2VkIGFuZAogKiB5b3UncmUgbWlncmF0aW5nIHRoZW0gYSBtb2R1bGUgYXQgYSB0aW1lLgogKgogKiBUaGF0IHNhaWQsIGhlcmUncyBob3cgeW91IGNhbiBjb21wbGV0ZWx5IGRpc2FibGUgU0NFOgogKgogKiBgYGAKICogYW5ndWxhci5tb2R1bGUoJ215QXBwV2l0aFNjZURpc2FibGVkbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VQcm92aWRlcikgewogKiAgIC8vIENvbXBsZXRlbHkgZGlzYWJsZSBTQ0UuICBGb3IgZGVtb25zdHJhdGlvbiBwdXJwb3NlcyBvbmx5IQogKiAgIC8vIERvIG5vdCB1c2UgaW4gbmV3IHByb2plY3RzLgogKiAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTsKICogfSk7CiAqIGBgYAogKgogKi8KLyoganNoaW50IG1heGxlbjogMTAwICovCgpmdW5jdGlvbiAkU2NlUHJvdmlkZXIoKSB7CiAgdmFyIGVuYWJsZWQgPSB0cnVlOwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJHNjZVByb3ZpZGVyI2VuYWJsZWQKICAgKiBAa2luZCBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgSWYgcHJvdmlkZWQsIHRoZW4gZW5hYmxlcy9kaXNhYmxlcyBTQ0UuCiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBTQ0UgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogRW5hYmxlcy9kaXNhYmxlcyBTQ0UgYW5kIHJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUuCiAgICovCiAgdGhpcy5lbmFibGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICBlbmFibGVkID0gISF2YWx1ZTsKICAgIH0KICAgIHJldHVybiBlbmFibGVkOwogIH07CgoKICAvKiBEZXNpZ24gbm90ZXMgb24gdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIFNDRS4KICAgKgogICAqIFRoZSBBUEkgY29udHJhY3QgZm9yIHRoZSBTQ0UgZGVsZWdhdGUKICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogVGhlIFNDRSBkZWxlZ2F0ZSBvYmplY3QgbXVzdCBwcm92aWRlIHRoZSBmb2xsb3dpbmcgMyBtZXRob2RzOgogICAqCiAgICogLSB0cnVzdEFzKGNvbnRleHRFbnVtLCB2YWx1ZSkKICAgKiAgICAgVGhpcyBtZXRob2QgaXMgdXNlZCB0byB0ZWxsIHRoZSBTQ0Ugc2VydmljZSB0aGF0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBPSyB0byB1c2UgaW4gdGhlCiAgICogICAgIGNvbnRleHRzIHNwZWNpZmllZCBieSBjb250ZXh0RW51bS4gIEl0IG11c3QgcmV0dXJuIGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnkKICAgKiAgICAgZ2V0VHJ1c3RlZCgpIGZvciBhIGNvbXBhdGlibGUgY29udGV4dEVudW0gYW5kIHJldHVybiB0aGlzIHZhbHVlLgogICAqCiAgICogLSB2YWx1ZU9mKHZhbHVlKQogICAqICAgICBGb3IgdmFsdWVzIHRoYXQgd2VyZSBub3QgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlbSBhcyBpcy4gIEZvciB2YWx1ZXMgdGhhdCB3ZXJlCiAgICogICAgIHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIGlucHV0IHZhbHVlIHRvIHRydXN0QXMuICBCYXNpY2FsbHksIGlmCiAgICogICAgIHRydXN0QXMgaXMgd3JhcHBpbmcgdGhlIGdpdmVuIHZhbHVlcyBpbnRvIHNvbWUgdHlwZSwgdGhpcyBvcGVyYXRpb24gdW53cmFwcyBpdCB3aGVuIGdpdmVuCiAgICogICAgIHN1Y2ggYSB2YWx1ZS4KICAgKgogICAqIC0gZ2V0VHJ1c3RlZChjb250ZXh0RW51bSwgdmFsdWUpCiAgICogICAgIFRoaXMgZnVuY3Rpb24gc2hvdWxkIHJldHVybiB0aGUgYSB2YWx1ZSB0aGF0IGlzIHNhZmUgdG8gdXNlIGluIHRoZSBjb250ZXh0IHNwZWNpZmllZCBieQogICAqICAgICBjb250ZXh0RW51bSBvciB0aHJvdyBhbmQgZXhjZXB0aW9uIG90aGVyd2lzZS4KICAgKgogICAqIE5PVEU6IFRoaXMgY29udHJhY3QgZGVsaWJlcmF0ZWx5IGRvZXMgTk9UIHN0YXRlIHRoYXQgdmFsdWVzIHJldHVybmVkIGJ5IHRydXN0QXMoKSBtdXN0IGJlCiAgICogb3BhcXVlIG9yIHdyYXBwZWQgaW4gc29tZSBob2xkZXIgb2JqZWN0LiAgVGhhdCBoYXBwZW5zIHRvIGJlIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbC4gIEZvcgogICAqIGluc3RhbmNlLCBhbiBpbXBsZW1lbnRhdGlvbiBjb3VsZCBtYWludGFpbiBhIHJlZ2lzdHJ5IG9mIGFsbCB0cnVzdGVkIG9iamVjdHMgYnkgY29udGV4dC4gIEluCiAgICogc3VjaCBhIGNhc2UsIHRydXN0QXMoKSB3b3VsZCByZXR1cm4gdGhlIHNhbWUgb2JqZWN0IHRoYXQgd2FzIHBhc3NlZCBpbi4gIGdldFRydXN0ZWQoKSB3b3VsZAogICAqIHJldHVybiB0aGUgc2FtZSBvYmplY3QgcGFzc2VkIGluIGlmIGl0IHdhcyBmb3VuZCBpbiB0aGUgcmVnaXN0cnkgdW5kZXIgYSBjb21wYXRpYmxlIGNvbnRleHQgb3IKICAgKiB0aHJvdyBhbiBleGNlcHRpb24gb3RoZXJ3aXNlLiAgQW4gaW1wbGVtZW50YXRpb24gbWlnaHQgb25seSB3cmFwIHZhbHVlcyBzb21lIG9mIHRoZSB0aW1lIGJhc2VkCiAgICogb24gc29tZSBjcml0ZXJpYS4gIGdldFRydXN0ZWQoKSBtaWdodCByZXR1cm4gYSB2YWx1ZSBhbmQgbm90IHRocm93IGFuIGV4Y2VwdGlvbiBmb3Igc3BlY2lhbAogICAqIGNvbnN0YW50cyBvciBvYmplY3RzIGV2ZW4gaWYgbm90IHdyYXBwZWQuICBBbGwgc3VjaCBpbXBsZW1lbnRhdGlvbnMgZnVsZmlsbCB0aGlzIGNvbnRyYWN0LgogICAqCiAgICoKICAgKiBBIG5vdGUgb24gdGhlIGluaGVyaXRhbmNlIG1vZGVsIGZvciBTQ0UgY29udGV4dHMKICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBJJ3ZlIHVzZWQgaW5oZXJpdGFuY2UgYW5kIG1hZGUgUkVTT1VSQ0VfVVJMIHdyYXBwZWQgdHlwZXMgYSBzdWJ0eXBlIG9mIFVSTCB3cmFwcGVkIHR5cGVzLiAgVGhpcwogICAqIGlzIHB1cmVseSBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLgogICAqCiAgICogVGhlIGNvbnRyYWN0IGlzIHNpbXBseSB0aGlzOgogICAqCiAgICogICAgIGdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKSBzdWNjZWVkaW5nIGltcGxpZXMgdGhhdCBnZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSkKICAgKiAgICAgd2lsbCBhbHNvIHN1Y2NlZWQuCiAgICoKICAgKiBJbmhlcml0YW5jZSBoYXBwZW5zIHRvIGNhcHR1cmUgdGhpcyBpbiBhIG5hdHVyYWwgd2F5LiAgSW4gc29tZSBmdXR1cmUsIHdlCiAgICogbWF5IG5vdCB1c2UgaW5oZXJpdGFuY2UgYW55bW9yZS4gIFRoYXQgaXMgT0sgYmVjYXVzZSBubyBjb2RlIG91dHNpZGUgb2YKICAgKiBzY2UuanMgYW5kIHNjZVNwZWNzLmpzIHdvdWxkIG5lZWQgdG8gYmUgYXdhcmUgb2YgdGhpcyBkZXRhaWwuCiAgICovCgogIHRoaXMuJGdldCA9IFsnJGRvY3VtZW50JywgJyRwYXJzZScsICckc2NlRGVsZWdhdGUnLCBmdW5jdGlvbigKICAgICAgICAgICAgICAgICRkb2N1bWVudCwgICAkcGFyc2UsICAgJHNjZURlbGVnYXRlKSB7CiAgICAvLyBQcmVyZXE6IEVuc3VyZSB0aGF0IHdlJ3JlIG5vdCBydW5uaW5nIGluIElFPDExIHF1aXJrcyBtb2RlLiAgSW4gdGhhdCBtb2RlLCBJRSA8IDExIGFsbG93CiAgICAvLyB0aGUgImV4cHJlc3Npb24oamF2YXNjcmlwdCBleHByZXNzaW9uKSIgc3ludGF4IHdoaWNoIGlzIGluc2VjdXJlLgogICAgaWYgKGVuYWJsZWQgJiYgJGRvY3VtZW50WzBdLmRvY3VtZW50TW9kZSA8IDgpIHsKICAgICAgdGhyb3cgJHNjZU1pbkVycignaWVxdWlya3MnLAogICAgICAgICdTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkb2VzIG5vdCBzdXBwb3J0IEludGVybmV0IEV4cGxvcmVyIHZlcnNpb24gPCAxMSBpbiBxdWlya3MgJyArCiAgICAgICAgJ21vZGUuICBZb3UgY2FuIGZpeCB0aGlzIGJ5IGFkZGluZyB0aGUgdGV4dCA8IWRvY3R5cGUgaHRtbD4gdG8gdGhlIHRvcCBvZiB5b3VyIEhUTUwgJyArCiAgICAgICAgJ2RvY3VtZW50LiAgU2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRzY2UgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyk7CiAgICB9CgogICAgdmFyIHNjZSA9IHNoYWxsb3dDb3B5KFNDRV9DT05URVhUUyk7CgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkc2NlI2lzRW5hYmxlZAogICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAqCiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIFNDRSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuICBJZiB5b3Ugd2FudCB0byBzZXQgdGhlIHZhbHVlLCB5b3UKICAgICAqIGhhdmUgdG8gZG8gaXQgYXQgbW9kdWxlIGNvbmZpZyB0aW1lIG9uIHtAbGluayBuZy4kc2NlUHJvdmlkZXIgJHNjZVByb3ZpZGVyfS4KICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgU0NFIGlzIGVuYWJsZWQuCiAgICAgKi8KICAgIHNjZS5pc0VuYWJsZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBlbmFibGVkOwogICAgfTsKICAgIHNjZS50cnVzdEFzID0gJHNjZURlbGVnYXRlLnRydXN0QXM7CiAgICBzY2UuZ2V0VHJ1c3RlZCA9ICRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkOwogICAgc2NlLnZhbHVlT2YgPSAkc2NlRGVsZWdhdGUudmFsdWVPZjsKCiAgICBpZiAoIWVuYWJsZWQpIHsKICAgICAgc2NlLnRydXN0QXMgPSBzY2UuZ2V0VHJ1c3RlZCA9IGZ1bmN0aW9uKHR5cGUsIHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTsKICAgICAgc2NlLnZhbHVlT2YgPSBpZGVudGl0eTsKICAgIH0KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjcGFyc2VBcwogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uICBUaGlzIGlzIGxpa2Uge0BsaW5rCiAgICAgKiBuZy4kcGFyc2UgJHBhcnNlfSBhbmQgaXMgaWRlbnRpY2FsIHdoZW4gdGhlIGV4cHJlc3Npb24gaXMgYSBsaXRlcmFsIGNvbnN0YW50LiAgT3RoZXJ3aXNlLCBpdAogICAgICogd3JhcHMgdGhlIGV4cHJlc3Npb24gaW4gYSBjYWxsIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkKCp0eXBlKiwKICAgICAqICpyZXN1bHQqKX0KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBTQ0UgY29udGV4dCBpbiB3aGljaCB0aGlzIHJlc3VsdCB3aWxsIGJlIHVzZWQuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLgogICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjoKICAgICAqCiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzCiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS4KICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4KICAgICAqICAgICAgYGNvbnRleHRgLgogICAgICovCiAgICBzY2UucGFyc2VBcyA9IGZ1bmN0aW9uIHNjZVBhcnNlQXModHlwZSwgZXhwcikgewogICAgICB2YXIgcGFyc2VkID0gJHBhcnNlKGV4cHIpOwogICAgICBpZiAocGFyc2VkLmxpdGVyYWwgJiYgcGFyc2VkLmNvbnN0YW50KSB7CiAgICAgICAgcmV0dXJuIHBhcnNlZDsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gJHBhcnNlKGV4cHIsIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIHNjZS5nZXRUcnVzdGVkKHR5cGUsIHZhbHVlKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBcwogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogRGVsZWdhdGVzIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfS4gIEFzIHN1Y2gsCiAgICAgKiByZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRydXN0ZWQgYnkgYW5ndWxhciBmb3IgdXNlIGluIHNwZWNpZmllZCBzdHJpY3QgY29udGV4dHVhbAogICAgICogZXNjYXBpbmcgY29udGV4dHMgKHN1Y2ggYXMgbmctYmluZC1odG1sLCBuZy1pbmNsdWRlLCBhbnkgc3JjIGF0dHJpYnV0ZQogICAgICogaW50ZXJwb2xhdGlvbiwgYW55IGRvbSBldmVudCBiaW5kaW5nIGF0dHJpYnV0ZSBpbnRlcnBvbGF0aW9uIHN1Y2ggYXMgZm9yIG9uY2xpY2ssICBldGMuKQogICAgICogdGhhdCB1c2VzIHRoZSBwcm92aWRlZCB2YWx1ZS4gIFNlZSAqIHtAbGluayBuZy4kc2NlICRzY2V9IGZvciBlbmFibGluZyBzdHJpY3QgY29udGV4dHVhbAogICAgICogZXNjYXBpbmcuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZS4gIGUuZy4gdXJsLAogICAgICogICByZXNvdXJjZV91cmwsIGh0bWwsIGpzIGFuZCBjc3MuCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC9zYWZlLgogICAgICogQHJldHVybnMgeyp9IEEgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB0byBzdGFuZCBpbiBmb3IgdGhlIHByb3ZpZGVkIGB2YWx1ZWAgaW4gcGxhY2VzCiAgICAgKiB3aGVyZSBBbmd1bGFyIGV4cGVjdHMgYSAkc2NlLnRydXN0QXMoKSByZXR1cm4gdmFsdWUuCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0h0bWwKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSHRtbCh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5IVE1MLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuCiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkSHRtbAogICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZEh0bWwodmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlcwogICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlCiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1VybAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNVcmwodmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuVVJMLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuCiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkVXJsCiAgICAgKiAgICAgJHNjZS5nZXRUcnVzdGVkVXJsKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXMKICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZQogICAgICogICAgIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKQogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNSZXNvdXJjZVVybAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy4KICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybAogICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXMKICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZSByZXR1cm4KICAgICAqICAgICB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKQogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNKcwogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNKcyh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5KUywgdmFsdWUpYH0KICAgICAqCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLgogICAgICogQHJldHVybnMgeyp9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZEpzCiAgICAgKiAgICAgJHNjZS5nZXRUcnVzdGVkSnModmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlcwogICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlCiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogRGVsZWdhdGVzIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWRgfS4gIEFzIHN1Y2gsCiAgICAgKiB0YWtlcyB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH0oKSBjYWxsIGFuZCByZXR1cm5zIHRoZQogICAgICogb3JpZ2luYWxseSBzdXBwbGllZCB2YWx1ZSBpZiB0aGUgcXVlcmllZCBjb250ZXh0IHR5cGUgaXMgYSBzdXBlcnR5cGUgb2YgdGhlIGNyZWF0ZWQgdHlwZS4KICAgICAqIElmIHRoaXMgY29uZGl0aW9uIGlzbid0IHNhdGlzZmllZCwgdGhyb3dzIGFuIGV4Y2VwdGlvbi4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgdG8gYmUgdXNlZC4KICAgICAqIEBwYXJhbSB7Kn0gbWF5YmVUcnVzdGVkIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgY2FsbC4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhlIHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvCiAgICAgKiAgICAgICAgICAgICAge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH0gaWYgdmFsaWQgaW4gdGhpcyBjb250ZXh0LgogICAgICogICAgICAgICAgICAgIE90aGVyd2lzZSwgdGhyb3dzIGFuIGV4Y2VwdGlvbi4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkSHRtbAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5IVE1MLCB2YWx1ZSlgCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZENzcwogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRDc3ModmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuCiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZFVybAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRVcmwodmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuCiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH0KICAgICAqCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGAuCiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEpzCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkpTLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuCiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWAKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNwYXJzZUFzSHRtbAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNIdG1sKGV4cHJlc3Npb24gc3RyaW5nKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSFRNTCwgdmFsdWUpYH0KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLgogICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjoKICAgICAqCiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzCiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS4KICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4KICAgICAqICAgICAgYGNvbnRleHRgLgogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNDc3MKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzQ3NzKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuQ1NTLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuCiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOgogICAgICoKICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3MKICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLgogICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbgogICAgICogICAgICBgY29udGV4dGAuCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1VybAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNVcmwodmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5VUkwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS4KICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAgICAgKgogICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5ncwogICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluCiAgICAgKiAgICAgIGBjb250ZXh0YC4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNwYXJzZUFzUmVzb3VyY2VVcmwKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzUmVzb3VyY2VVcmwodmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS4KICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAgICAgKgogICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5ncwogICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluCiAgICAgKiAgICAgIGBjb250ZXh0YC4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNwYXJzZUFzSnMKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSnModmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5KUywgdmFsdWUpYH0KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLgogICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjoKICAgICAqCiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzCiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS4KICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4KICAgICAqICAgICAgYGNvbnRleHRgLgogICAgICovCgogICAgLy8gU2hvcnRoYW5kIGRlbGVnYXRpb25zLgogICAgdmFyIHBhcnNlID0gc2NlLnBhcnNlQXMsCiAgICAgICAgZ2V0VHJ1c3RlZCA9IHNjZS5nZXRUcnVzdGVkLAogICAgICAgIHRydXN0QXMgPSBzY2UudHJ1c3RBczsKCiAgICBmb3JFYWNoKFNDRV9DT05URVhUUywgZnVuY3Rpb24gKGVudW1WYWx1ZSwgbmFtZSkgewogICAgICB2YXIgbE5hbWUgPSBsb3dlcmNhc2UobmFtZSk7CiAgICAgIHNjZVtjYW1lbENhc2UoInBhcnNlX2FzXyIgKyBsTmFtZSldID0gZnVuY3Rpb24gKGV4cHIpIHsKICAgICAgICByZXR1cm4gcGFyc2UoZW51bVZhbHVlLCBleHByKTsKICAgICAgfTsKICAgICAgc2NlW2NhbWVsQ2FzZSgiZ2V0X3RydXN0ZWRfIiArIGxOYW1lKV0gPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICByZXR1cm4gZ2V0VHJ1c3RlZChlbnVtVmFsdWUsIHZhbHVlKTsKICAgICAgfTsKICAgICAgc2NlW2NhbWVsQ2FzZSgidHJ1c3RfYXNfIiArIGxOYW1lKV0gPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICByZXR1cm4gdHJ1c3RBcyhlbnVtVmFsdWUsIHZhbHVlKTsKICAgICAgfTsKICAgIH0pOwoKICAgIHJldHVybiBzY2U7CiAgfV07Cn0KCi8qKgogKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgInByaXZhdGUiIHNlcnZpY2UgISEhCiAqCiAqIEBuYW1lICRzbmlmZmVyCiAqIEByZXF1aXJlcyAkd2luZG93CiAqIEByZXF1aXJlcyAkZG9jdW1lbnQKICoKICogQHByb3BlcnR5IHtib29sZWFufSBoaXN0b3J5IERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBodG1sNSBoaXN0b3J5IGFwaSA/CiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdHJhbnNpdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyB0cmFuc2l0aW9uIGV2ZW50cyA/CiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYW5pbWF0aW9ucyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgQ1NTIGFuaW1hdGlvbiBldmVudHMgPwogKgogKiBAZGVzY3JpcHRpb24KICogVGhpcyBpcyB2ZXJ5IHNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiB0ZXN0aW5nIGJyb3dzZXIncyBmZWF0dXJlcy4KICovCmZ1bmN0aW9uICRTbmlmZmVyUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCkgewogICAgdmFyIGV2ZW50U3VwcG9ydCA9IHt9LAogICAgICAgIGFuZHJvaWQgPQogICAgICAgICAgaW50KCgvYW5kcm9pZCAoXGQrKS8uZXhlYyhsb3dlcmNhc2UoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpKSB8fCBbXSlbMV0pLAogICAgICAgIGJveGVlID0gL0JveGVlL2kudGVzdCgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCksCiAgICAgICAgZG9jdW1lbnQgPSAkZG9jdW1lbnRbMF0gfHwge30sCiAgICAgICAgdmVuZG9yUHJlZml4LAogICAgICAgIHZlbmRvclJlZ2V4ID0gL14oTW96fHdlYmtpdHxPfG1zKSg/PVtBLVpdKS8sCiAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LnN0eWxlLAogICAgICAgIHRyYW5zaXRpb25zID0gZmFsc2UsCiAgICAgICAgYW5pbWF0aW9ucyA9IGZhbHNlLAogICAgICAgIG1hdGNoOwoKICAgIGlmIChib2R5U3R5bGUpIHsKICAgICAgZm9yKHZhciBwcm9wIGluIGJvZHlTdHlsZSkgewogICAgICAgIGlmKG1hdGNoID0gdmVuZG9yUmVnZXguZXhlYyhwcm9wKSkgewogICAgICAgICAgdmVuZG9yUHJlZml4ID0gbWF0Y2hbMF07CiAgICAgICAgICB2ZW5kb3JQcmVmaXggPSB2ZW5kb3JQcmVmaXguc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB2ZW5kb3JQcmVmaXguc3Vic3RyKDEpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZighdmVuZG9yUHJlZml4KSB7CiAgICAgICAgdmVuZG9yUHJlZml4ID0gKCdXZWJraXRPcGFjaXR5JyBpbiBib2R5U3R5bGUpICYmICd3ZWJraXQnOwogICAgICB9CgogICAgICB0cmFuc2l0aW9ucyA9ICEhKCgndHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ1RyYW5zaXRpb24nIGluIGJvZHlTdHlsZSkpOwogICAgICBhbmltYXRpb25zICA9ICEhKCgnYW5pbWF0aW9uJyBpbiBib2R5U3R5bGUpIHx8ICh2ZW5kb3JQcmVmaXggKyAnQW5pbWF0aW9uJyBpbiBib2R5U3R5bGUpKTsKCiAgICAgIGlmIChhbmRyb2lkICYmICghdHJhbnNpdGlvbnN8fCFhbmltYXRpb25zKSkgewogICAgICAgIHRyYW5zaXRpb25zID0gaXNTdHJpbmcoZG9jdW1lbnQuYm9keS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uKTsKICAgICAgICBhbmltYXRpb25zID0gaXNTdHJpbmcoZG9jdW1lbnQuYm9keS5zdHlsZS53ZWJraXRBbmltYXRpb24pOwogICAgICB9CiAgICB9CgoKICAgIHJldHVybiB7CiAgICAgIC8vIEFuZHJvaWQgaGFzIGhpc3RvcnkucHVzaFN0YXRlLCBidXQgaXQgZG9lcyBub3QgdXBkYXRlIGxvY2F0aW9uIGNvcnJlY3RseQogICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhdCBhbGwuCiAgICAgIC8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9kZXRhaWw/aWQ9MTc0NzEKICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTA0CgogICAgICAvLyBvbGRlciB3ZWJraXQgYnJvd3NlciAoNTMzLjkpIG9uIEJveGVlIGJveCBoYXMgZXhhY3RseSB0aGUgc2FtZSBwcm9ibGVtIGFzIEFuZHJvaWQgaGFzCiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGFsc28KICAgICAgLy8gV2UgYXJlIHB1cnBvc2VmdWxseSB1c2luZyBgIShhbmRyb2lkIDwgNClgIHRvIGNvdmVyIHRoZSBjYXNlIHdoZW4gYGFuZHJvaWRgIGlzIHVuZGVmaW5lZAogICAgICAvLyBqc2hpbnQgLVcwMTgKICAgICAgaGlzdG9yeTogISEoJHdpbmRvdy5oaXN0b3J5ICYmICR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgJiYgIShhbmRyb2lkIDwgNCkgJiYgIWJveGVlKSwKICAgICAgLy8ganNoaW50ICtXMDE4CiAgICAgIGhhc0V2ZW50OiBmdW5jdGlvbihldmVudCkgewogICAgICAgIC8vIElFOSBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgaXQncyBzbyBmdWJhcmVkIHRoYXQgd2UgcmF0aGVyIHByZXRlbmQgdGhhdCBpdCBkb2Vzbid0IGhhdmUKICAgICAgICAvLyBpdC4gSW4gcGFydGljdWxhciB0aGUgZXZlbnQgaXMgbm90IGZpcmVkIHdoZW4gYmFja3NwYWNlIG9yIGRlbGV0ZSBrZXkgYXJlIHByZXNzZWQgb3IKICAgICAgICAvLyB3aGVuIGN1dCBvcGVyYXRpb24gaXMgcGVyZm9ybWVkLgogICAgICAgIGlmIChldmVudCA9PSAnaW5wdXQnICYmIG1zaWUgPT0gOSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnRTdXBwb3J0W2V2ZW50XSkpIHsKICAgICAgICAgIHZhciBkaXZFbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgIGV2ZW50U3VwcG9ydFtldmVudF0gPSAnb24nICsgZXZlbnQgaW4gZGl2RWxtOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGV2ZW50U3VwcG9ydFtldmVudF07CiAgICAgIH0sCiAgICAgIGNzcDogY3NwKCksCiAgICAgIHZlbmRvclByZWZpeDogdmVuZG9yUHJlZml4LAogICAgICB0cmFuc2l0aW9ucyA6IHRyYW5zaXRpb25zLAogICAgICBhbmltYXRpb25zIDogYW5pbWF0aW9ucywKICAgICAgYW5kcm9pZDogYW5kcm9pZAogICAgfTsKICB9XTsKfQoKdmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpOwoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICR0ZW1wbGF0ZVJlcXVlc3QKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgJHRlbXBsYXRlUmVxdWVzdGAgc2VydmljZSBkb3dubG9hZHMgdGhlIHByb3ZpZGVkIHRlbXBsYXRlIHVzaW5nIGAkaHR0cGAgYW5kLCB1cG9uIHN1Y2Nlc3MsCiAqIHN0b3JlcyB0aGUgY29udGVudHMgaW5zaWRlIG9mIGAkdGVtcGxhdGVDYWNoZWAuIElmIHRoZSBIVFRQIHJlcXVlc3QgZmFpbHMgb3IgdGhlIHJlc3BvbnNlIGRhdGEKICogb2YgdGhlIEhUVFAgcmVxdWVzdCBpcyBlbXB0eSB0aGVuIGEgYCRjb21waWxlYCBlcnJvciB3aWxsIGJlIHRocm93biAodGhlIGV4Y2VwdGlvbiBjYW4gYmUgdGh3YXJ0ZWQKICogYnkgc2V0dGluZyB0aGUgMm5kIHBhcmFtZXRlciBvZiB0aGUgZnVuY3Rpb24gdG8gdHJ1ZSkuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSB0cGwgVGhlIEhUVFAgcmVxdWVzdCB0ZW1wbGF0ZSBVUkwKICogQHBhcmFtIHtib29sZWFuPX0gaWdub3JlUmVxdWVzdEVycm9yIFdoZXRoZXIgb3Igbm90IHRvIGlnbm9yZSB0aGUgZXhjZXB0aW9uIHdoZW4gdGhlIHJlcXVlc3QgZmFpbHMgb3IgdGhlIHRlbXBsYXRlIGlzIGVtcHR5CiAqCiAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBIVFRQIFByb21pc2UgZm9yIHRoZSBnaXZlbi4KICoKICogQHByb3BlcnR5IHtudW1iZXJ9IHRvdGFsUGVuZGluZ1JlcXVlc3RzIHRvdGFsIGFtb3VudCBvZiBwZW5kaW5nIHRlbXBsYXRlIHJlcXVlc3RzIGJlaW5nIGRvd25sb2FkZWQuCiAqLwpmdW5jdGlvbiAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckdGVtcGxhdGVDYWNoZScsICckaHR0cCcsICckcScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlLCAkaHR0cCwgJHEpIHsKICAgIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RGbih0cGwsIGlnbm9yZVJlcXVlc3RFcnJvcikgewogICAgICB2YXIgc2VsZiA9IGhhbmRsZVJlcXVlc3RGbjsKICAgICAgc2VsZi50b3RhbFBlbmRpbmdSZXF1ZXN0cysrOwoKICAgICAgcmV0dXJuICRodHRwLmdldCh0cGwsIHsgY2FjaGUgOiAkdGVtcGxhdGVDYWNoZSB9KQogICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICB2YXIgaHRtbCA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICBpZighaHRtbCB8fCBodG1sLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gaGFuZGxlRXJyb3IoKTsKICAgICAgICAgIH0KCiAgICAgICAgICBzZWxmLnRvdGFsUGVuZGluZ1JlcXVlc3RzLS07CiAgICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodHBsLCBodG1sKTsKICAgICAgICAgIHJldHVybiBodG1sOwogICAgICAgIH0sIGhhbmRsZUVycm9yKTsKCiAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkgewogICAgICAgIHNlbGYudG90YWxQZW5kaW5nUmVxdWVzdHMtLTsKICAgICAgICBpZiAoIWlnbm9yZVJlcXVlc3RFcnJvcikgewogICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbG9hZCcsICdGYWlsZWQgdG8gbG9hZCB0ZW1wbGF0ZTogezB9JywgdHBsKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICRxLnJlamVjdCgpOwogICAgICB9CiAgICB9CgogICAgaGFuZGxlUmVxdWVzdEZuLnRvdGFsUGVuZGluZ1JlcXVlc3RzID0gMDsKCiAgICByZXR1cm4gaGFuZGxlUmVxdWVzdEZuOwogIH1dOwp9CgpmdW5jdGlvbiAkJFRlc3RhYmlsaXR5UHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRsb2NhdGlvbicsCiAgICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAgICRicm93c2VyLCAgICRsb2NhdGlvbikgewoKICAgIC8qKgogICAgICogQG5hbWUgJHRlc3RhYmlsaXR5CiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBUaGUgcHJpdmF0ZSAkJHRlc3RhYmlsaXR5IHNlcnZpY2UgcHJvdmlkZXMgYSBjb2xsZWN0aW9uIG9mIG1ldGhvZHMgZm9yIHVzZSB3aGVuIGRlYnVnZ2luZwogICAgICogb3IgYnkgYXV0b21hdGVkIHRlc3QgYW5kIGRlYnVnZ2luZyB0b29scy4KICAgICAqLwogICAgdmFyIHRlc3RhYmlsaXR5ID0ge307CgogICAgLyoqCiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I2ZpbmRCaW5kaW5ncwogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSBib3VuZCAodmlhIG5nLWJpbmQgb3Ige3t9fSkKICAgICAqIHRvIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgcm9vdCB0byBzZWFyY2ggZnJvbS4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBiaW5kaW5nIGV4cHJlc3Npb24gdG8gbWF0Y2guCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdF9leGFjdE1hdGNoIElmIHRydWUsIG9ubHkgcmV0dXJucyBleGFjdCBtYXRjaGVzCiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLiBGaWx0ZXJzIGFuZCB3aGl0ZXNwYWNlIGFyZSBpZ25vcmVkLgogICAgICovCiAgICB0ZXN0YWJpbGl0eS5maW5kQmluZGluZ3MgPSBmdW5jdGlvbihlbGVtZW50LCBleHByZXNzaW9uLCBvcHRfZXhhY3RNYXRjaCkgewogICAgICB2YXIgYmluZGluZ3MgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25nLWJpbmRpbmcnKTsKICAgICAgdmFyIG1hdGNoZXMgPSBbXTsKICAgICAgZm9yRWFjaChiaW5kaW5ncywgZnVuY3Rpb24oYmluZGluZykgewogICAgICAgIHZhciBkYXRhQmluZGluZyA9IGFuZ3VsYXIuZWxlbWVudChiaW5kaW5nKS5kYXRhKCckYmluZGluZycpOwogICAgICAgIGlmIChkYXRhQmluZGluZykgewogICAgICAgICAgZm9yRWFjaChkYXRhQmluZGluZywgZnVuY3Rpb24oYmluZGluZ05hbWUpIHsKICAgICAgICAgICAgaWYgKG9wdF9leGFjdE1hdGNoKSB7CiAgICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoXnxcXHMpJyArIGV4cHJlc3Npb24gKyAnKFxcc3xcXHx8JCknKTsKICAgICAgICAgICAgICBpZiAobWF0Y2hlci50ZXN0KGJpbmRpbmdOYW1lKSkgewogICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGJpbmRpbmcpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpZiAoYmluZGluZ05hbWUuaW5kZXhPZihleHByZXNzaW9uKSAhPSAtMSkgewogICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGJpbmRpbmcpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIG1hdGNoZXM7CiAgICB9OwoKICAgIC8qKgogICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNmaW5kTW9kZWxzCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHR3by13YXkgZm91bmQgdmlhIG5nLW1vZGVsIHRvCiAgICAgKiBleHByZXNzaW9ucyBtYXRjaGluZyB0aGUgaW5wdXQuCiAgICAgKgogICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHJvb3QgdG8gc2VhcmNoIGZyb20uCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBUaGUgbW9kZWwgZXhwcmVzc2lvbiB0byBtYXRjaC4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXMKICAgICAqICAgICBmb3IgdGhlIGV4cHJlc3Npb24uCiAgICAgKi8KICAgIHRlc3RhYmlsaXR5LmZpbmRNb2RlbHMgPSBmdW5jdGlvbihlbGVtZW50LCBleHByZXNzaW9uLCBvcHRfZXhhY3RNYXRjaCkgewogICAgICB2YXIgcHJlZml4ZXMgPSBbJ25nLScsICdkYXRhLW5nLScsICduZ1xcOiddOwogICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHByZWZpeGVzLmxlbmd0aDsgKytwKSB7CiAgICAgICAgdmFyIGF0dHJpYnV0ZUVxdWFscyA9IG9wdF9leGFjdE1hdGNoID8gJz0nIDogJyo9JzsKICAgICAgICB2YXIgc2VsZWN0b3IgPSAnWycgKyBwcmVmaXhlc1twXSArICdtb2RlbCcgKyBhdHRyaWJ1dGVFcXVhbHMgKyAnIicgKyBleHByZXNzaW9uICsgJyJdJzsKICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOwogICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGgpIHsKICAgICAgICAgIHJldHVybiBlbGVtZW50czsKICAgICAgICB9CiAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I2dldExvY2F0aW9uCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBmb3IgZ2V0dGluZyB0aGUgbG9jYXRpb24gaW4gYSBicm93c2VyIGFnbm9zdGljIHdheS4gUmV0dXJucwogICAgICogICAgIHRoZSBwYXRoLCBzZWFyY2gsIGFuZCBoYXNoLiAoZS5nLiAvcGF0aD9hPWIjaGFzaCkKICAgICAqLwogICAgdGVzdGFiaWxpdHkuZ2V0TG9jYXRpb24gPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuICRsb2NhdGlvbi51cmwoKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I3NldExvY2F0aW9uCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBmb3IgbmF2aWdhdGluZyB0byBhIGxvY2F0aW9uIHdpdGhvdXQgZG9pbmcgYSBmdWxsIHBhZ2UgcmVsb2FkLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGxvY2F0aW9uIHVybCAocGF0aCwgc2VhcmNoIGFuZCBoYXNoLAogICAgICogICAgIGUuZy4gL3BhdGg/YT1iI2hhc2gpIHRvIGdvIHRvLgogICAgICovCiAgICB0ZXN0YWJpbGl0eS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHVybCkgewogICAgICBpZiAodXJsICE9PSAkbG9jYXRpb24udXJsKCkpIHsKICAgICAgICAkbG9jYXRpb24udXJsKHVybCk7CiAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7CiAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I3doZW5TdGFibGUKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIENhbGxzIHRoZSBjYWxsYmFjayB3aGVuICR0aW1lb3V0IGFuZCAkaHR0cCByZXF1ZXN0cyBhcmUgY29tcGxldGVkLgogICAgICoKICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrCiAgICAgKi8KICAgIHRlc3RhYmlsaXR5LndoZW5TdGFibGUgPSBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICAkYnJvd3Nlci5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzKGNhbGxiYWNrKTsKICAgIH07CgogICAgcmV0dXJuIHRlc3RhYmlsaXR5OwogIH1dOwp9CgpmdW5jdGlvbiAkVGltZW91dFByb3ZpZGVyKCkgewogIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckcScsICckJHEnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLAogICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkYnJvd3NlciwgICAkcSwgICAkJHEsICAgJGV4Y2VwdGlvbkhhbmRsZXIpIHsKICAgIHZhciBkZWZlcnJlZHMgPSB7fTsKCgogICAgIC8qKgogICAgICAqIEBuZ2RvYyBzZXJ2aWNlCiAgICAgICogQG5hbWUgJHRpbWVvdXQKICAgICAgKgogICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldFRpbWVvdXRgLiBUaGUgYGZuYCBmdW5jdGlvbiBpcyB3cmFwcGVkIGludG8gYSB0cnkvY2F0Y2gKICAgICAgKiBibG9jayBhbmQgZGVsZWdhdGVzIGFueSBleGNlcHRpb25zIHRvCiAgICAgICoge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLgogICAgICAqCiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBvZiByZWdpc3RlcmluZyBhIHRpbWVvdXQgZnVuY3Rpb24gaXMgYSBwcm9taXNlLCB3aGljaCB3aWxsIGJlIHJlc29sdmVkIHdoZW4KICAgICAgKiB0aGUgdGltZW91dCBpcyByZWFjaGVkIGFuZCB0aGUgdGltZW91dCBmdW5jdGlvbiBpcyBleGVjdXRlZC4KICAgICAgKgogICAgICAqIFRvIGNhbmNlbCBhIHRpbWVvdXQgcmVxdWVzdCwgY2FsbCBgJHRpbWVvdXQuY2FuY2VsKHByb21pc2UpYC4KICAgICAgKgogICAgICAqIEluIHRlc3RzIHlvdSBjYW4gdXNlIHtAbGluayBuZ01vY2suJHRpbWVvdXQgYCR0aW1lb3V0LmZsdXNoKClgfSB0bwogICAgICAqIHN5bmNocm9ub3VzbHkgZmx1c2ggdGhlIHF1ZXVlIG9mIGRlZmVycmVkIGZ1bmN0aW9ucy4KICAgICAgKgogICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiwgd2hvc2UgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWxheWVkLgogICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gW2RlbGF5PTBdIERlbGF5IGluIG1pbGxpc2Vjb25kcy4KICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW52b2tlQXBwbHk9dHJ1ZV0gSWYgc2V0IHRvIGBmYWxzZWAgc2tpcHMgbW9kZWwgZGlydHkgY2hlY2tpbmcsIG90aGVyd2lzZQogICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLgogICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aGVuIHRoZSB0aW1lb3V0IGlzIHJlYWNoZWQuIFRoZSB2YWx1ZSB0aGlzCiAgICAgICogICBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBpcyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgZm5gIGZ1bmN0aW9uLgogICAgICAqCiAgICAgICovCiAgICBmdW5jdGlvbiB0aW1lb3V0KGZuLCBkZWxheSwgaW52b2tlQXBwbHkpIHsKICAgICAgdmFyIHNraXBBcHBseSA9IChpc0RlZmluZWQoaW52b2tlQXBwbHkpICYmICFpbnZva2VBcHBseSksCiAgICAgICAgICBkZWZlcnJlZCA9IChza2lwQXBwbHkgPyAkJHEgOiAkcSkuZGVmZXIoKSwKICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLAogICAgICAgICAgdGltZW91dElkOwoKICAgICAgdGltZW91dElkID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZm4oKSk7CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZSk7CiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICB9CiAgICAgICAgZmluYWxseSB7CiAgICAgICAgICBkZWxldGUgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFza2lwQXBwbHkpICRyb290U2NvcGUuJGFwcGx5KCk7CiAgICAgIH0sIGRlbGF5KTsKCiAgICAgIHByb21pc2UuJCR0aW1lb3V0SWQgPSB0aW1lb3V0SWQ7CiAgICAgIGRlZmVycmVkc1t0aW1lb3V0SWRdID0gZGVmZXJyZWQ7CgogICAgICByZXR1cm4gcHJvbWlzZTsKICAgIH0KCgogICAgIC8qKgogICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgKiBAbmFtZSAkdGltZW91dCNjYW5jZWwKICAgICAgKgogICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAqIENhbmNlbHMgYSB0YXNrIGFzc29jaWF0ZWQgd2l0aCB0aGUgYHByb21pc2VgLiBBcyBhIHJlc3VsdCBvZiB0aGlzLCB0aGUgcHJvbWlzZSB3aWxsIGJlCiAgICAgICogcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi4KICAgICAgKgogICAgICAqIEBwYXJhbSB7UHJvbWlzZT19IHByb21pc2UgUHJvbWlzZSByZXR1cm5lZCBieSB0aGUgYCR0aW1lb3V0YCBmdW5jdGlvbi4KICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseQogICAgICAqICAgY2FuY2VsZWQuCiAgICAgICovCiAgICB0aW1lb3V0LmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHsKICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS4kJHRpbWVvdXRJZCBpbiBkZWZlcnJlZHMpIHsKICAgICAgICBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF0ucmVqZWN0KCdjYW5jZWxlZCcpOwogICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07CiAgICAgICAgcmV0dXJuICRicm93c2VyLmRlZmVyLmNhbmNlbChwcm9taXNlLiQkdGltZW91dElkKTsKICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwoKICAgIHJldHVybiB0aW1lb3V0OwogIH1dOwp9CgovLyBOT1RFOiAgVGhlIHVzYWdlIG9mIHdpbmRvdyBhbmQgZG9jdW1lbnQgaW5zdGVhZCBvZiAkd2luZG93IGFuZCAkZG9jdW1lbnQgaGVyZSBpcwovLyBkZWxpYmVyYXRlLiAgVGhpcyBzZXJ2aWNlIGRlcGVuZHMgb24gdGhlIHNwZWNpZmljIGJlaGF2aW9yIG9mIGFuY2hvciBub2RlcyBjcmVhdGVkIGJ5IHRoZQovLyBicm93c2VyIChyZXNvbHZpbmcgYW5kIHBhcnNpbmcgVVJMcykgdGhhdCBpcyB1bmxpa2VseSB0byBiZSBwcm92aWRlZCBieSBtb2NrIG9iamVjdHMgYW5kCi8vIGNhdXNlIHVzIHRvIGJyZWFrIHRlc3RzLiAgSW4gYWRkaXRpb24sIHdoZW4gdGhlIGJyb3dzZXIgcmVzb2x2ZXMgYSBVUkwgZm9yIFhIUiwgaXQKLy8gZG9lc24ndCBrbm93IGFib3V0IG1vY2tlZCBsb2NhdGlvbnMgYW5kIHJlc29sdmVzIFVSTHMgdG8gdGhlIHJlYWwgZG9jdW1lbnQgLSB3aGljaCBpcwovLyBleGFjdGx5IHRoZSBiZWhhdmlvciBuZWVkZWQgaGVyZS4gIFRoZXJlIGlzIGxpdHRsZSB2YWx1ZSBpcyBtb2NraW5nIHRoZXNlIG91dCBmb3IgdGhpcwovLyBzZXJ2aWNlLgp2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CnZhciBvcmlnaW5VcmwgPSB1cmxSZXNvbHZlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLCB0cnVlKTsKCgovKioKICoKICogSW1wbGVtZW50YXRpb24gTm90ZXMgZm9yIG5vbi1JRSBicm93c2VycwogKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAqIEFzc2lnbmluZyBhIFVSTCB0byB0aGUgaHJlZiBwcm9wZXJ0eSBvZiBhbiBhbmNob3IgRE9NIG5vZGUsIGV2ZW4gb25lIGF0dGFjaGVkIHRvIHRoZSBET00sCiAqIHJlc3VsdHMgYm90aCBpbiB0aGUgbm9ybWFsaXppbmcgYW5kIHBhcnNpbmcgb2YgdGhlIFVSTC4gIE5vcm1hbGl6aW5nIG1lYW5zIHRoYXQgYSByZWxhdGl2ZQogKiBVUkwgd2lsbCBiZSByZXNvbHZlZCBpbnRvIGFuIGFic29sdXRlIFVSTCBpbiB0aGUgY29udGV4dCBvZiB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuCiAqIFBhcnNpbmcgbWVhbnMgdGhhdCB0aGUgYW5jaG9yIG5vZGUncyBob3N0LCBob3N0bmFtZSwgcHJvdG9jb2wsIHBvcnQsIHBhdGhuYW1lIGFuZCByZWxhdGVkCiAqIHByb3BlcnRpZXMgYXJlIGFsbCBwb3B1bGF0ZWQgdG8gcmVmbGVjdCB0aGUgbm9ybWFsaXplZCBVUkwuICBUaGlzIGFwcHJvYWNoIGhhcyB3aWRlCiAqIGNvbXBhdGliaWxpdHkgLSBTYWZhcmkgMSssIE1vemlsbGEgMSssIE9wZXJhIDcrLGUgZXRjLiAgU2VlCiAqIGh0dHA6Ly93d3cuYXB0YW5hLmNvbS9yZWZlcmVuY2UvaHRtbC9hcGkvSFRNTEFuY2hvckVsZW1lbnQuaHRtbAogKgogKiBJbXBsZW1lbnRhdGlvbiBOb3RlcyBmb3IgSUUKICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAqIElFID49IDggYW5kIDw9IDEwIG5vcm1hbGl6ZXMgdGhlIFVSTCB3aGVuIGFzc2lnbmVkIHRvIHRoZSBhbmNob3Igbm9kZSBzaW1pbGFyIHRvIHRoZSBvdGhlcgogKiBicm93c2Vycy4gIEhvd2V2ZXIsIHRoZSBwYXJzZWQgY29tcG9uZW50cyB3aWxsIG5vdCBiZSBzZXQgaWYgdGhlIFVSTCBhc3NpZ25lZCBkaWQgbm90IHNwZWNpZnkKICogdGhlbS4gIChlLmcuIGlmIHlvdSBhc3NpZ24gYS5ocmVmID0gImZvbyIsIHRoZW4gYS5wcm90b2NvbCwgYS5ob3N0LCBldGMuIHdpbGwgYmUgZW1wdHkuKSAgV2UKICogd29yayBhcm91bmQgdGhhdCBieSBwZXJmb3JtaW5nIHRoZSBwYXJzaW5nIGluIGEgMm5kIHN0ZXAgYnkgdGFraW5nIGEgcHJldmlvdXNseSBub3JtYWxpemVkCiAqIFVSTCAoZS5nLiBieSBhc3NpZ25pbmcgdG8gYS5ocmVmKSBhbmQgYXNzaWduaW5nIGl0IGEuaHJlZiBhZ2Fpbi4gIFRoaXMgY29ycmVjdGx5IHBvcHVsYXRlcyB0aGUKICogcHJvcGVydGllcyBzdWNoIGFzIHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCwgZXRjLgogKgogKiBJRTcgZG9lcyBub3Qgbm9ybWFsaXplIHRoZSBVUkwgd2hlbiBhc3NpZ25lZCB0byBhbiBhbmNob3Igbm9kZS4gIChBcHBhcmVudGx5LCBpdCBkb2VzLCBpZiBvbmUKICogdXNlcyB0aGUgaW5uZXIgSFRNTCBhcHByb2FjaCB0byBhc3NpZ24gdGhlIFVSTCBhcyBwYXJ0IG9mIGFuIEhUTUwgc25pcHBldCAtCiAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ3MjcyOSkgIEhvd2V2ZXIsIHNldHRpbmcgaW1nW3NyY10gZG9lcyBub3JtYWxpemUgdGhlIFVSTC4KICogVW5mb3J0dW5hdGVseSwgc2V0dGluZyBpbWdbc3JjXSB0byBzb21ldGhpbmcgbGlrZSAiamF2YXNjcmlwdDpmb28iIG9uIElFIHRocm93cyBhbiBleGNlcHRpb24uCiAqIFNpbmNlIHRoZSBwcmltYXJ5IHVzYWdlIGZvciBub3JtYWxpemluZyBVUkxzIGlzIHRvIHNhbml0aXplIHN1Y2ggVVJMcywgd2UgY2FuJ3QgdXNlIHRoYXQKICogbWV0aG9kIGFuZCBJRSA8IDggaXMgdW5zdXBwb3J0ZWQuCiAqCiAqIFJlZmVyZW5jZXM6CiAqICAgaHR0cDovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEFuY2hvckVsZW1lbnQKICogICBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWwKICogICBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHMKICogICBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMjkwMgogKiAgIGh0dHA6Ly9qYW1lcy5wYWRvbHNleS5jb20vamF2YXNjcmlwdC9wYXJzaW5nLXVybHMtd2l0aC10aGUtZG9tLwogKgogKiBAa2luZCBmdW5jdGlvbgogKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkLgogKiBAZGVzY3JpcHRpb24gTm9ybWFsaXplcyBhbmQgcGFyc2VzIGEgVVJMLgogKiBAcmV0dXJucyB7b2JqZWN0fSBSZXR1cm5zIHRoZSBub3JtYWxpemVkIFVSTCBhcyBhIGRpY3Rpb25hcnkuCiAqCiAqICAgfCBtZW1iZXIgbmFtZSAgIHwgRGVzY3JpcHRpb24gICAgfAogKiAgIHwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXwKICogICB8IGhyZWYgICAgICAgICAgfCBBIG5vcm1hbGl6ZWQgdmVyc2lvbiBvZiB0aGUgcHJvdmlkZWQgVVJMIGlmIGl0IHdhcyBub3QgYW4gYWJzb2x1dGUgVVJMIHwKICogICB8IHByb3RvY29sICAgICAgfCBUaGUgcHJvdG9jb2wgaW5jbHVkaW5nIHRoZSB0cmFpbGluZyBjb2xvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICogICB8IGhvc3QgICAgICAgICAgfCBUaGUgaG9zdCBhbmQgcG9ydCAoaWYgdGhlIHBvcnQgaXMgbm9uLWRlZmF1bHQpIG9mIHRoZSBub3JtYWxpemVkVXJsICAgIHwKICogICB8IHNlYXJjaCAgICAgICAgfCBUaGUgc2VhcmNoIHBhcmFtcywgbWludXMgdGhlIHF1ZXN0aW9uIG1hcmsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICogICB8IGhhc2ggICAgICAgICAgfCBUaGUgaGFzaCBzdHJpbmcsIG1pbnVzIHRoZSBoYXNoIHN5bWJvbAogKiAgIHwgaG9zdG5hbWUgICAgICB8IFRoZSBob3N0bmFtZQogKiAgIHwgcG9ydCAgICAgICAgICB8IFRoZSBwb3J0LCB3aXRob3V0ICI6IgogKiAgIHwgcGF0aG5hbWUgICAgICB8IFRoZSBwYXRobmFtZSwgYmVnaW5uaW5nIHdpdGggIi8iCiAqCiAqLwpmdW5jdGlvbiB1cmxSZXNvbHZlKHVybCwgYmFzZSkgewogIHZhciBocmVmID0gdXJsOwoKICBpZiAobXNpZSkgewogICAgLy8gTm9ybWFsaXplIGJlZm9yZSBwYXJzZS4gIFJlZmVyIEltcGxlbWVudGF0aW9uIE5vdGVzIG9uIHdoeSB0aGlzIGlzCiAgICAvLyBkb25lIGluIHR3byBzdGVwcyBvbiBJRS4KICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgiaHJlZiIsIGhyZWYpOwogICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7CiAgfQoKICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTsKCiAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlscwogIHJldHVybiB7CiAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLAogICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJywKICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsCiAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXD8vLCAnJykgOiAnJywKICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsCiAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsCiAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LAogICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykKICAgICAgPyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZQogICAgICA6ICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lCiAgfTsKfQoKLyoqCiAqIFBhcnNlIGEgcmVxdWVzdCBVUkwgYW5kIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBzYW1lLW9yaWdpbiByZXF1ZXN0IGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC4KICoKICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZXF1ZXN0VXJsIFRoZSB1cmwgb2YgdGhlIHJlcXVlc3QgYXMgYSBzdHJpbmcgdGhhdCB3aWxsIGJlIHJlc29sdmVkCiAqIG9yIGEgcGFyc2VkIFVSTCBvYmplY3QuCiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSByZXF1ZXN0IGlzIGZvciB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LgogKi8KZnVuY3Rpb24gdXJsSXNTYW1lT3JpZ2luKHJlcXVlc3RVcmwpIHsKICB2YXIgcGFyc2VkID0gKGlzU3RyaW5nKHJlcXVlc3RVcmwpKSA/IHVybFJlc29sdmUocmVxdWVzdFVybCkgOiByZXF1ZXN0VXJsOwogIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VcmwucHJvdG9jb2wgJiYKICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VcmwuaG9zdCk7Cn0KCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkd2luZG93CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIHJlZmVyZW5jZSB0byB0aGUgYnJvd3NlcidzIGB3aW5kb3dgIG9iamVjdC4gV2hpbGUgYHdpbmRvd2AKICogaXMgZ2xvYmFsbHkgYXZhaWxhYmxlIGluIEphdmFTY3JpcHQsIGl0IGNhdXNlcyB0ZXN0YWJpbGl0eSBwcm9ibGVtcywgYmVjYXVzZQogKiBpdCBpcyBhIGdsb2JhbCB2YXJpYWJsZS4gSW4gYW5ndWxhciB3ZSBhbHdheXMgcmVmZXIgdG8gaXQgdGhyb3VnaCB0aGUKICogYCR3aW5kb3dgIHNlcnZpY2UsIHNvIGl0IG1heSBiZSBvdmVycmlkZGVuLCByZW1vdmVkIG9yIG1vY2tlZCBmb3IgdGVzdGluZy4KICoKICogRXhwcmVzc2lvbnMsIGxpa2UgdGhlIG9uZSBkZWZpbmVkIGZvciB0aGUgYG5nQ2xpY2tgIGRpcmVjdGl2ZSBpbiB0aGUgZXhhbXBsZQogKiBiZWxvdywgYXJlIGV2YWx1YXRlZCB3aXRoIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgc2NvcGUuICBUaGVyZWZvcmUsIHRoZXJlIGlzCiAqIG5vIHJpc2sgb2YgaW5hZHZlcnRlbnRseSBjb2RpbmcgaW4gYSBkZXBlbmRlbmN5IG9uIGEgZ2xvYmFsIHZhbHVlIGluIHN1Y2ggYW4KICogZXhwcmVzc2lvbi4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGUgbW9kdWxlPSJ3aW5kb3dFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd3aW5kb3dFeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHdpbmRvdycsIGZ1bmN0aW9uICgkc2NvcGUsICR3aW5kb3cpIHsKICAgICAgICAgICAgICRzY29wZS5ncmVldGluZyA9ICdIZWxsbywgV29ybGQhJzsKICAgICAgICAgICAgICRzY29wZS5kb0dyZWV0aW5nID0gZnVuY3Rpb24oZ3JlZXRpbmcpIHsKICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChncmVldGluZyk7CiAgICAgICAgICAgICB9OwogICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0iZ3JlZXRpbmciIC8+CiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9ImRvR3JlZXRpbmcoZ3JlZXRpbmcpIj5BTEVSVDwvYnV0dG9uPgogICAgICAgPC9kaXY+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICBpdCgnc2hvdWxkIGRpc3BsYXkgdGhlIGdyZWV0aW5nIGluIHRoZSBpbnB1dCBib3gnLCBmdW5jdGlvbigpIHsKICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2dyZWV0aW5nJykpLnNlbmRLZXlzKCdIZWxsbywgRTJFIFRlc3RzJyk7CiAgICAgICAvLyBJZiB3ZSBjbGljayB0aGUgYnV0dG9uIGl0IHdpbGwgYmxvY2sgdGhlIHRlc3QgcnVubmVyCiAgICAgICAvLyBlbGVtZW50KCc6YnV0dG9uJykuY2xpY2soKTsKICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwpmdW5jdGlvbiAkV2luZG93UHJvdmlkZXIoKXsKICB0aGlzLiRnZXQgPSB2YWx1ZUZuKHdpbmRvdyk7Cn0KCi8qIGdsb2JhbCBjdXJyZW5jeUZpbHRlcjogdHJ1ZSwKIGRhdGVGaWx0ZXI6IHRydWUsCiBmaWx0ZXJGaWx0ZXI6IHRydWUsCiBqc29uRmlsdGVyOiB0cnVlLAogbGltaXRUb0ZpbHRlcjogdHJ1ZSwKIGxvd2VyY2FzZUZpbHRlcjogdHJ1ZSwKIG51bWJlckZpbHRlcjogdHJ1ZSwKIG9yZGVyQnlGaWx0ZXI6IHRydWUsCiB1cHBlcmNhc2VGaWx0ZXI6IHRydWUsCiAqLwoKLyoqCiAqIEBuZ2RvYyBwcm92aWRlcgogKiBAbmFtZSAkZmlsdGVyUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqCiAqIEZpbHRlcnMgYXJlIGp1c3QgZnVuY3Rpb25zIHdoaWNoIHRyYW5zZm9ybSBpbnB1dCB0byBhbiBvdXRwdXQuIEhvd2V2ZXIgZmlsdGVycyBuZWVkIHRvIGJlCiAqIERlcGVuZGVuY3kgSW5qZWN0ZWQuIFRvIGFjaGlldmUgdGhpcyBhIGZpbHRlciBkZWZpbml0aW9uIGNvbnNpc3RzIG9mIGEgZmFjdG9yeSBmdW5jdGlvbiB3aGljaCBpcwogKiBhbm5vdGF0ZWQgd2l0aCBkZXBlbmRlbmNpZXMgYW5kIGlzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyBhIGZpbHRlciBmdW5jdGlvbi4KICoKICogYGBganMKICogICAvLyBGaWx0ZXIgcmVnaXN0cmF0aW9uCiAqICAgZnVuY3Rpb24gTXlNb2R1bGUoJHByb3ZpZGUsICRmaWx0ZXJQcm92aWRlcikgewogKiAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBpbmplY3Rpb24gKG5vdCBhbHdheXMgbmVlZGVkKQogKiAgICAgJHByb3ZpZGUudmFsdWUoJ2dyZWV0JywgZnVuY3Rpb24obmFtZSl7CiAqICAgICAgIHJldHVybiAnSGVsbG8gJyArIG5hbWUgKyAnISc7CiAqICAgICB9KTsKICoKICogICAgIC8vIHJlZ2lzdGVyIGEgZmlsdGVyIGZhY3Rvcnkgd2hpY2ggdXNlcyB0aGUKICogICAgIC8vIGdyZWV0IHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgREkuCiAqICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ2dyZWV0JywgZnVuY3Rpb24oZ3JlZXQpewogKiAgICAgICAvLyByZXR1cm4gdGhlIGZpbHRlciBmdW5jdGlvbiB3aGljaCB1c2VzIHRoZSBncmVldCBzZXJ2aWNlCiAqICAgICAgIC8vIHRvIGdlbmVyYXRlIHNhbHV0YXRpb24KICogICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHsKICogICAgICAgICAvLyBmaWx0ZXJzIG5lZWQgdG8gYmUgZm9yZ2l2aW5nIHNvIGNoZWNrIGlucHV0IHZhbGlkaXR5CiAqICAgICAgICAgcmV0dXJuIHRleHQgJiYgZ3JlZXQodGV4dCkgfHwgdGV4dDsKICogICAgICAgfTsKICogICAgIH0pOwogKiAgIH0KICogYGBgCiAqCiAqIFRoZSBmaWx0ZXIgZnVuY3Rpb24gaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGluamVjdG9yYCB1bmRlciB0aGUgZmlsdGVyIG5hbWUgc3VmZml4IHdpdGgKICogYEZpbHRlcmAuCiAqCiAqIGBgYGpzCiAqICAgaXQoJ3Nob3VsZCBiZSB0aGUgc2FtZSBpbnN0YW5jZScsIGluamVjdCgKICogICAgIGZ1bmN0aW9uKCRmaWx0ZXJQcm92aWRlcikgewogKiAgICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ3JldmVyc2UnLCBmdW5jdGlvbigpewogKiAgICAgICAgIHJldHVybiAuLi47CiAqICAgICAgIH0pOwogKiAgICAgfSwKICogICAgIGZ1bmN0aW9uKCRmaWx0ZXIsIHJldmVyc2VGaWx0ZXIpIHsKICogICAgICAgZXhwZWN0KCRmaWx0ZXIoJ3JldmVyc2UnKSkudG9CZShyZXZlcnNlRmlsdGVyKTsKICogICAgIH0pOwogKiBgYGAKICoKICoKICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgaG93IGFuZ3VsYXIgZmlsdGVycyB3b3JrLCBhbmQgaG93IHRvIGNyZWF0ZSB5b3VyIG93biBmaWx0ZXJzLCBzZWUKICoge0BsaW5rIGd1aWRlL2ZpbHRlciBGaWx0ZXJzfSBpbiB0aGUgQW5ndWxhciBEZXZlbG9wZXIgR3VpZGUuCiAqLwoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRmaWx0ZXIKICogQGtpbmQgZnVuY3Rpb24KICogQGRlc2NyaXB0aW9uCiAqIEZpbHRlcnMgYXJlIHVzZWQgZm9yIGZvcm1hdHRpbmcgZGF0YSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIuCiAqCiAqIFRoZSBnZW5lcmFsIHN5bnRheCBpbiB0ZW1wbGF0ZXMgaXMgYXMgZm9sbG93czoKICoKICogICAgICAgICB7eyBleHByZXNzaW9uIFt8IGZpbHRlcl9uYW1lWzpwYXJhbWV0ZXJfdmFsdWVdIC4uLiBdIH19CiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiB0byByZXRyaWV2ZQogKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGZpbHRlciBmdW5jdGlvbgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBuYW1lPSIkZmlsdGVyIiBtb2R1bGU9ImZpbHRlckV4YW1wbGUiPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJNYWluQ3RybCI+CiAgICAgICAgPGgzPnt7IG9yaWdpbmFsVGV4dCB9fTwvaDM+CiAgICAgICAgPGgzPnt7IGZpbHRlcmVkVGV4dCB9fTwvaDM+CiAgICAgICA8L2Rpdj4KICAgICA8L2ZpbGU+CgogICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgIGFuZ3VsYXIubW9kdWxlKCdmaWx0ZXJFeGFtcGxlJywgW10pCiAgICAgIC5jb250cm9sbGVyKCdNYWluQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGZpbHRlcikgewogICAgICAgICRzY29wZS5vcmlnaW5hbFRleHQgPSAnaGVsbG8nOwogICAgICAgICRzY29wZS5maWx0ZXJlZFRleHQgPSAkZmlsdGVyKCd1cHBlcmNhc2UnKSgkc2NvcGUub3JpZ2luYWxUZXh0KTsKICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAgKi8KJEZpbHRlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJ107CmZ1bmN0aW9uICRGaWx0ZXJQcm92aWRlcigkcHJvdmlkZSkgewogIHZhciBzdWZmaXggPSAnRmlsdGVyJzsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRmaWx0ZXJQcm92aWRlciNyZWdpc3RlcgogICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24sIG9yIGFuIG9iamVjdCBtYXAgb2YgZmlsdGVycyB3aGVyZQogICAqICAgIHRoZSBrZXlzIGFyZSB0aGUgZmlsdGVyIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmlsdGVyIGZhY3Rvcmllcy4KICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZWdpc3RlcmVkIGZpbHRlciBpbnN0YW5jZSwgb3IgaWYgYSBtYXAgb2YgZmlsdGVycyB3YXMgcHJvdmlkZWQgdGhlbiBhIG1hcAogICAqICAgIG9mIHRoZSByZWdpc3RlcmVkIGZpbHRlciBpbnN0YW5jZXMuCiAgICovCiAgZnVuY3Rpb24gcmVnaXN0ZXIobmFtZSwgZmFjdG9yeSkgewogICAgaWYoaXNPYmplY3QobmFtZSkpIHsKICAgICAgdmFyIGZpbHRlcnMgPSB7fTsKICAgICAgZm9yRWFjaChuYW1lLCBmdW5jdGlvbihmaWx0ZXIsIGtleSkgewogICAgICAgIGZpbHRlcnNba2V5XSA9IHJlZ2lzdGVyKGtleSwgZmlsdGVyKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBmaWx0ZXJzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuICRwcm92aWRlLmZhY3RvcnkobmFtZSArIHN1ZmZpeCwgZmFjdG9yeSk7CiAgICB9CiAgfQogIHRoaXMucmVnaXN0ZXIgPSByZWdpc3RlcjsKCiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHsKICAgIHJldHVybiBmdW5jdGlvbihuYW1lKSB7CiAgICAgIHJldHVybiAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBzdWZmaXgpOwogICAgfTsKICB9XTsKCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAvKiBnbG9iYWwKICAgIGN1cnJlbmN5RmlsdGVyOiBmYWxzZSwKICAgIGRhdGVGaWx0ZXI6IGZhbHNlLAogICAgZmlsdGVyRmlsdGVyOiBmYWxzZSwKICAgIGpzb25GaWx0ZXI6IGZhbHNlLAogICAgbGltaXRUb0ZpbHRlcjogZmFsc2UsCiAgICBsb3dlcmNhc2VGaWx0ZXI6IGZhbHNlLAogICAgbnVtYmVyRmlsdGVyOiBmYWxzZSwKICAgIG9yZGVyQnlGaWx0ZXI6IGZhbHNlLAogICAgdXBwZXJjYXNlRmlsdGVyOiBmYWxzZSwKICAqLwoKICByZWdpc3RlcignY3VycmVuY3knLCBjdXJyZW5jeUZpbHRlcik7CiAgcmVnaXN0ZXIoJ2RhdGUnLCBkYXRlRmlsdGVyKTsKICByZWdpc3RlcignZmlsdGVyJywgZmlsdGVyRmlsdGVyKTsKICByZWdpc3RlcignanNvbicsIGpzb25GaWx0ZXIpOwogIHJlZ2lzdGVyKCdsaW1pdFRvJywgbGltaXRUb0ZpbHRlcik7CiAgcmVnaXN0ZXIoJ2xvd2VyY2FzZScsIGxvd2VyY2FzZUZpbHRlcik7CiAgcmVnaXN0ZXIoJ251bWJlcicsIG51bWJlckZpbHRlcik7CiAgcmVnaXN0ZXIoJ29yZGVyQnknLCBvcmRlckJ5RmlsdGVyKTsKICByZWdpc3RlcigndXBwZXJjYXNlJywgdXBwZXJjYXNlRmlsdGVyKTsKfQoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgZmlsdGVyCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTZWxlY3RzIGEgc3Vic2V0IG9mIGl0ZW1zIGZyb20gYGFycmF5YCBhbmQgcmV0dXJucyBpdCBhcyBhIG5ldyBhcnJheS4KICoKICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvdXJjZSBhcnJheS4KICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fGZ1bmN0aW9uKCl9IGV4cHJlc3Npb24gVGhlIHByZWRpY2F0ZSB0byBiZSB1c2VkIGZvciBzZWxlY3RpbmcgaXRlbXMgZnJvbQogKiAgIGBhcnJheWAuCiAqCiAqICAgQ2FuIGJlIG9uZSBvZjoKICoKICogICAtIGBzdHJpbmdgOiBUaGUgc3RyaW5nIGlzIGV2YWx1YXRlZCBhcyBhbiBleHByZXNzaW9uIGFuZCB0aGUgcmVzdWx0aW5nIHZhbHVlIGlzIHVzZWQgZm9yIHN1YnN0cmluZyBtYXRjaCBhZ2FpbnN0CiAqICAgICB0aGUgY29udGVudHMgb2YgdGhlIGBhcnJheWAuIEFsbCBzdHJpbmdzIG9yIG9iamVjdHMgd2l0aCBzdHJpbmcgcHJvcGVydGllcyBpbiBgYXJyYXlgIHRoYXQgY29udGFpbiB0aGlzIHN0cmluZwogKiAgICAgd2lsbCBiZSByZXR1cm5lZC4gVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmcgdGhlIHN0cmluZyB3aXRoIGAhYC4KICoKICogICAtIGBPYmplY3RgOiBBIHBhdHRlcm4gb2JqZWN0IGNhbiBiZSB1c2VkIHRvIGZpbHRlciBzcGVjaWZpYyBwcm9wZXJ0aWVzIG9uIG9iamVjdHMgY29udGFpbmVkCiAqICAgICBieSBgYXJyYXlgLiBGb3IgZXhhbXBsZSBge25hbWU6Ik0iLCBwaG9uZToiMSJ9YCBwcmVkaWNhdGUgd2lsbCByZXR1cm4gYW4gYXJyYXkgb2YgaXRlbXMKICogICAgIHdoaWNoIGhhdmUgcHJvcGVydHkgYG5hbWVgIGNvbnRhaW5pbmcgIk0iIGFuZCBwcm9wZXJ0eSBgcGhvbmVgIGNvbnRhaW5pbmcgIjEiLiBBIHNwZWNpYWwKICogICAgIHByb3BlcnR5IG5hbWUgYCRgIGNhbiBiZSB1c2VkIChhcyBpbiBgeyQ6InRleHQifWApIHRvIGFjY2VwdCBhIG1hdGNoIGFnYWluc3QgYW55CiAqICAgICBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0LiBUaGF0J3MgZXF1aXZhbGVudCB0byB0aGUgc2ltcGxlIHN1YnN0cmluZyBtYXRjaCB3aXRoIGEgYHN0cmluZ2AKICogICAgIGFzIGRlc2NyaWJlZCBhYm92ZS4gVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmcgdGhlIHN0cmluZyB3aXRoIGAhYC4KICogICAgIEZvciBFeGFtcGxlIGB7bmFtZTogIiFNIn1gIHByZWRpY2F0ZSB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBpdGVtcyB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYAogKiAgICAgbm90IGNvbnRhaW5pbmcgIk0iLgogKgogKiAgIC0gYGZ1bmN0aW9uKHZhbHVlLCBpbmRleClgOiBBIHByZWRpY2F0ZSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byB3cml0ZSBhcmJpdHJhcnkgZmlsdGVycy4gVGhlCiAqICAgICBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgLiBUaGUgZmluYWwgcmVzdWx0IGlzIGFuIGFycmF5IG9mIHRob3NlCiAqICAgICBlbGVtZW50cyB0aGF0IHRoZSBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1ZSBmb3IuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCl8dHJ1ZXx1bmRlZmluZWR9IGNvbXBhcmF0b3IgQ29tcGFyYXRvciB3aGljaCBpcyB1c2VkIGluCiAqICAgICBkZXRlcm1pbmluZyBpZiB0aGUgZXhwZWN0ZWQgdmFsdWUgKGZyb20gdGhlIGZpbHRlciBleHByZXNzaW9uKSBhbmQgYWN0dWFsIHZhbHVlIChmcm9tCiAqICAgICB0aGUgb2JqZWN0IGluIHRoZSBhcnJheSkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBtYXRjaC4KICoKICogICBDYW4gYmUgb25lIG9mOgogKgogKiAgIC0gYGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpYDoKICogICAgIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGdpdmVuIHRoZSBvYmplY3QgdmFsdWUgYW5kIHRoZSBwcmVkaWNhdGUgdmFsdWUgdG8gY29tcGFyZSBhbmQKICogICAgIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiB0aGUgaXRlbSBzaG91bGQgYmUgaW5jbHVkZWQgaW4gZmlsdGVyZWQgcmVzdWx0LgogKgogKiAgIC0gYHRydWVgOiBBIHNob3J0aGFuZCBmb3IgYGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHsgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKGV4cGVjdGVkLCBhY3R1YWwpfWAuCiAqICAgICB0aGlzIGlzIGVzc2VudGlhbGx5IHN0cmljdCBjb21wYXJpc29uIG9mIGV4cGVjdGVkIGFuZCBhY3R1YWwuCiAqCiAqICAgLSBgZmFsc2V8dW5kZWZpbmVkYDogQSBzaG9ydCBoYW5kIGZvciBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgbG9vayBmb3IgYSBzdWJzdHJpbmcgbWF0Y2ggaW4gY2FzZQogKiAgICAgaW5zZW5zaXRpdmUgd2F5LgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxkaXYgbmctaW5pdD0iZnJpZW5kcyA9IFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTI3Nid9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzgwMC1CSUctTUFSWSd9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJ30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0FkYW0nLCBwaG9uZTonNTU1LTU2NzgnfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWV0dGUnLCBwaG9uZTonNTU1LTU2NzgnfV0iPjwvZGl2PgoKICAgICAgIFNlYXJjaDogPGlucHV0IG5nLW1vZGVsPSJzZWFyY2hUZXh0Ij4KICAgICAgIDx0YWJsZSBpZD0ic2VhcmNoVGV4dFJlc3VsdHMiPgogICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PC90cj4KICAgICAgICAgPHRyIG5nLXJlcGVhdD0iZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoVGV4dCI+CiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+CiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPgogICAgICAgICA8L3RyPgogICAgICAgPC90YWJsZT4KICAgICAgIDxocj4KICAgICAgIEFueTogPGlucHV0IG5nLW1vZGVsPSJzZWFyY2guJCI+IDxicj4KICAgICAgIE5hbWUgb25seSA8aW5wdXQgbmctbW9kZWw9InNlYXJjaC5uYW1lIj48YnI+CiAgICAgICBQaG9uZSBvbmx5IDxpbnB1dCBuZy1tb2RlbD0ic2VhcmNoLnBob25lIj48YnI+CiAgICAgICBFcXVhbGl0eSA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJzdHJpY3QiPjxicj4KICAgICAgIDx0YWJsZSBpZD0ic2VhcmNoT2JqUmVzdWx0cyI+CiAgICAgICAgIDx0cj48dGg+TmFtZTwvdGg+PHRoPlBob25lPC90aD48L3RyPgogICAgICAgICA8dHIgbmctcmVwZWF0PSJmcmllbmRPYmogaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2g6c3RyaWN0Ij4KICAgICAgICAgICA8dGQ+e3tmcmllbmRPYmoubmFtZX19PC90ZD4KICAgICAgICAgICA8dGQ+e3tmcmllbmRPYmoucGhvbmV9fTwvdGQ+CiAgICAgICAgIDwvdHI+CiAgICAgICA8L3RhYmxlPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIHZhciBleHBlY3RGcmllbmROYW1lcyA9IGZ1bmN0aW9uKGV4cGVjdGVkTmFtZXMsIGtleSkgewogICAgICAgICBlbGVtZW50LmFsbChieS5yZXBlYXRlcihrZXkgKyAnIGluIGZyaWVuZHMnKS5jb2x1bW4oa2V5ICsgJy5uYW1lJykpLnRoZW4oZnVuY3Rpb24oYXJyKSB7CiAgICAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24od2QsIGkpIHsKICAgICAgICAgICAgIGV4cGVjdCh3ZC5nZXRUZXh0KCkpLnRvTWF0Y2goZXhwZWN0ZWROYW1lc1tpXSk7CiAgICAgICAgICAgfSk7CiAgICAgICAgIH0pOwogICAgICAgfTsKCiAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBhY3Jvc3MgYWxsIGZpZWxkcyB3aGVuIGZpbHRlcmluZyB3aXRoIGEgc3RyaW5nJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIHZhciBzZWFyY2hUZXh0ID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoVGV4dCcpKTsKICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpOwogICAgICAgICBzZWFyY2hUZXh0LnNlbmRLZXlzKCdtJyk7CiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnTWFyeScsICdNaWtlJywgJ0FkYW0nXSwgJ2ZyaWVuZCcpOwoKICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpOwogICAgICAgICBzZWFyY2hUZXh0LnNlbmRLZXlzKCc3NicpOwogICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0pvaG4nLCAnSnVsaWUnXSwgJ2ZyaWVuZCcpOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggaW4gc3BlY2lmaWMgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBwcmVkaWNhdGUgb2JqZWN0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgIHZhciBzZWFyY2hBbnkgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2guJCcpKTsKICAgICAgICAgc2VhcmNoQW55LmNsZWFyKCk7CiAgICAgICAgIHNlYXJjaEFueS5zZW5kS2V5cygnaScpOwogICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdKdWxpZScsICdKdWxpZXR0ZSddLCAnZnJpZW5kT2JqJyk7CiAgICAgICB9KTsKICAgICAgIGl0KCdzaG91bGQgdXNlIGEgZXF1YWwgY29tcGFyaXNvbiB3aGVuIGNvbXBhcmF0b3IgaXMgdHJ1ZScsIGZ1bmN0aW9uKCkgewogICAgICAgICB2YXIgc2VhcmNoTmFtZSA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaC5uYW1lJykpOwogICAgICAgICB2YXIgc3RyaWN0ID0gZWxlbWVudChieS5tb2RlbCgnc3RyaWN0JykpOwogICAgICAgICBzZWFyY2hOYW1lLmNsZWFyKCk7CiAgICAgICAgIHNlYXJjaE5hbWUuc2VuZEtleXMoJ0p1bGllJyk7CiAgICAgICAgIHN0cmljdC5jbGljaygpOwogICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0p1bGllJ10sICdmcmllbmRPYmonKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KZnVuY3Rpb24gZmlsdGVyRmlsdGVyKCkgewogIHJldHVybiBmdW5jdGlvbihhcnJheSwgZXhwcmVzc2lvbiwgY29tcGFyYXRvcikgewogICAgaWYgKCFpc0FycmF5KGFycmF5KSkgcmV0dXJuIGFycmF5OwoKICAgIHZhciBjb21wYXJhdG9yVHlwZSA9IHR5cGVvZihjb21wYXJhdG9yKSwKICAgICAgICBwcmVkaWNhdGVzID0gW107CgogICAgcHJlZGljYXRlcy5jaGVjayA9IGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkgewogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHByZWRpY2F0ZXMubGVuZ3RoOyBqKyspIHsKICAgICAgICBpZighcHJlZGljYXRlc1tqXSh2YWx1ZSwgaW5kZXgpKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfTsKCiAgICBpZiAoY29tcGFyYXRvclR5cGUgIT09ICdmdW5jdGlvbicpIHsKICAgICAgaWYgKGNvbXBhcmF0b3JUeXBlID09PSAnYm9vbGVhbicgJiYgY29tcGFyYXRvcikgewogICAgICAgIGNvbXBhcmF0b3IgPSBmdW5jdGlvbihvYmosIHRleHQpIHsKICAgICAgICAgIHJldHVybiBhbmd1bGFyLmVxdWFscyhvYmosIHRleHQpOwogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29tcGFyYXRvciA9IGZ1bmN0aW9uKG9iaiwgdGV4dCkgewogICAgICAgICAgaWYgKG9iaiAmJiB0ZXh0ICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHR5cGVvZiB0ZXh0ID09PSAnb2JqZWN0JykgewogICAgICAgICAgICBmb3IgKHZhciBvYmpLZXkgaW4gb2JqKSB7CiAgICAgICAgICAgICAgaWYgKG9iaktleS5jaGFyQXQoMCkgIT09ICckJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgb2JqS2V5KSAmJgogICAgICAgICAgICAgICAgICBjb21wYXJhdG9yKG9ialtvYmpLZXldLCB0ZXh0W29iaktleV0pKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAgdGV4dCA9ICgnJyt0ZXh0KS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgcmV0dXJuICgnJytvYmopLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0ZXh0KSA+IC0xOwogICAgICAgIH07CiAgICAgIH0KICAgIH0KCiAgICB2YXIgc2VhcmNoID0gZnVuY3Rpb24ob2JqLCB0ZXh0KXsKICAgICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJyAmJiB0ZXh0LmNoYXJBdCgwKSA9PT0gJyEnKSB7CiAgICAgICAgcmV0dXJuICFzZWFyY2gob2JqLCB0ZXh0LnN1YnN0cigxKSk7CiAgICAgIH0KICAgICAgc3dpdGNoICh0eXBlb2Ygb2JqKSB7CiAgICAgICAgY2FzZSAnYm9vbGVhbic6CiAgICAgICAgY2FzZSAnbnVtYmVyJzoKICAgICAgICBjYXNlICdzdHJpbmcnOgogICAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3Iob2JqLCB0ZXh0KTsKICAgICAgICBjYXNlICdvYmplY3QnOgogICAgICAgICAgc3dpdGNoICh0eXBlb2YgdGV4dCkgewogICAgICAgICAgICBjYXNlICdvYmplY3QnOgogICAgICAgICAgICAgIHJldHVybiBjb21wYXJhdG9yKG9iaiwgdGV4dCk7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgZm9yICggdmFyIG9iaktleSBpbiBvYmopIHsKICAgICAgICAgICAgICAgIGlmIChvYmpLZXkuY2hhckF0KDApICE9PSAnJCcgJiYgc2VhcmNoKG9ialtvYmpLZXldLCB0ZXh0KSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgY2FzZSAnYXJyYXknOgogICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChzZWFyY2gob2JqW2ldLCB0ZXh0KSkgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfTsKICAgIHN3aXRjaCAodHlwZW9mIGV4cHJlc3Npb24pIHsKICAgICAgY2FzZSAnYm9vbGVhbic6CiAgICAgIGNhc2UgJ251bWJlcic6CiAgICAgIGNhc2UgJ3N0cmluZyc6CiAgICAgICAgLy8gU2V0IHVwIGV4cHJlc3Npb24gb2JqZWN0IGFuZCBmYWxsIHRocm91Z2gKICAgICAgICBleHByZXNzaW9uID0geyQ6ZXhwcmVzc2lvbn07CiAgICAgICAgLy8ganNoaW50IC1XMDg2CiAgICAgIGNhc2UgJ29iamVjdCc6CiAgICAgICAgLy8ganNoaW50ICtXMDg2CiAgICAgICAgZm9yICh2YXIga2V5IGluIGV4cHJlc3Npb24pIHsKICAgICAgICAgIChmdW5jdGlvbihwYXRoKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgZXhwcmVzc2lvbltwYXRoXSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjsKICAgICAgICAgICAgcHJlZGljYXRlcy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHNlYXJjaChwYXRoID09ICckJyA/IHZhbHVlIDogKHZhbHVlICYmIHZhbHVlW3BhdGhdKSwgZXhwcmVzc2lvbltwYXRoXSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSkoa2V5KTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzoKICAgICAgICBwcmVkaWNhdGVzLnB1c2goZXhwcmVzc2lvbik7CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIGFycmF5OwogICAgfQogICAgdmFyIGZpbHRlcmVkID0gW107CiAgICBmb3IgKCB2YXIgaiA9IDA7IGogPCBhcnJheS5sZW5ndGg7IGorKykgewogICAgICB2YXIgdmFsdWUgPSBhcnJheVtqXTsKICAgICAgaWYgKHByZWRpY2F0ZXMuY2hlY2sodmFsdWUsIGopKSB7CiAgICAgICAgZmlsdGVyZWQucHVzaCh2YWx1ZSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBmaWx0ZXJlZDsKICB9Owp9CgovKioKICogQG5nZG9jIGZpbHRlcgogKiBAbmFtZSBjdXJyZW5jeQogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdAogKiBzeW1ib2wgZm9yIGN1cnJlbnQgbG9jYWxlIGlzIHVzZWQuCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLgogKiBAcGFyYW0ge3N0cmluZz19IHN5bWJvbCBDdXJyZW5jeSBzeW1ib2wgb3IgaWRlbnRpZmllciB0byBiZSBkaXNwbGF5ZWQuCiAqIEBwYXJhbSB7bnVtYmVyPX0gZnJhY3Rpb25TaXplIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0byByb3VuZCB0aGUgYW1vdW50IHRvLgogKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgbnVtYmVyLgogKgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBtb2R1bGU9ImN1cnJlbmN5RXhhbXBsZSI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY3VycmVuY3lFeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS5hbW91bnQgPSAxMjM0LjU2OwogICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIG5nLW1vZGVsPSJhbW91bnQiPiA8YnI+CiAgICAgICAgIGRlZmF1bHQgY3VycmVuY3kgc3ltYm9sICgkKTogPHNwYW4gaWQ9ImN1cnJlbmN5LWRlZmF1bHQiPnt7YW1vdW50IHwgY3VycmVuY3l9fTwvc3Bhbj48YnI+CiAgICAgICAgIGN1c3RvbSBjdXJyZW5jeSBpZGVudGlmaWVyIChVU0QkKTogPHNwYW4gaWQ9ImN1cnJlbmN5LWN1c3RvbSI+e3thbW91bnQgfCBjdXJyZW5jeToiVVNEJCJ9fTwvc3Bhbj4KICAgICAgICAgbm8gZnJhY3Rpb25zICgwKTogPHNwYW4gaWQ9ImN1cnJlbmN5LW5vLWZyYWN0aW9ucyI+e3thbW91bnQgfCBjdXJyZW5jeToiVVNEJCI6MH19PC9zcGFuPgogICAgICAgPC9kaXY+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgaXQoJ3Nob3VsZCBpbml0IHdpdGggMTIzNC41NicsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJyQxLDIzNC41NicpOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktY3VzdG9tJykpLmdldFRleHQoKSkudG9CZSgnVVNEJDEsMjM0LjU2Jyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1uby1mcmFjdGlvbnMnKSkuZ2V0VGV4dCgpKS50b0JlKCdVU0QkMSwyMzUnKTsKICAgICAgIH0pOwogICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ3NhZmFyaScpIHsKICAgICAgICAgICAvLyBTYWZhcmkgZG9lcyBub3QgdW5kZXJzdGFuZCB0aGUgbWludXMga2V5LiBTZWUKICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy80ODEKICAgICAgICAgICByZXR1cm47CiAgICAgICAgIH0KICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnYW1vdW50JykpLmNsZWFyKCk7CiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Ftb3VudCcpKS5zZW5kS2V5cygnLTEyMzQnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCcoJDEsMjM0LjAwKScpOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktY3VzdG9tJykpLmdldFRleHQoKSkudG9CZSgnKFVTRCQxLDIzNC4wMCknKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LW5vLWZyYWN0aW9ucycpKS5nZXRUZXh0KCkpLnRvQmUoJyhVU0QkMSwyMzQpJyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCmN1cnJlbmN5RmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTsKZnVuY3Rpb24gY3VycmVuY3lGaWx0ZXIoJGxvY2FsZSkgewogIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUzsKICByZXR1cm4gZnVuY3Rpb24oYW1vdW50LCBjdXJyZW5jeVN5bWJvbCwgZnJhY3Rpb25TaXplKXsKICAgIGlmIChpc1VuZGVmaW5lZChjdXJyZW5jeVN5bWJvbCkpIHsKICAgICAgY3VycmVuY3lTeW1ib2wgPSBmb3JtYXRzLkNVUlJFTkNZX1NZTTsKICAgIH0KCiAgICBpZiAoaXNVbmRlZmluZWQoZnJhY3Rpb25TaXplKSkgewogICAgICAvLyBUT0RPOiByZWFkIHRoZSBkZWZhdWx0IHZhbHVlIGZyb20gdGhlIGxvY2FsZSBmaWxlCiAgICAgIGZyYWN0aW9uU2l6ZSA9IDI7CiAgICB9CgogICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoCiAgICByZXR1cm4gKGFtb3VudCA9PSBudWxsKQogICAgICAgID8gYW1vdW50CiAgICAgICAgOiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgZnJhY3Rpb25TaXplKS4KICAgICAgICAgICAgcmVwbGFjZSgvXHUwMEE0L2csIGN1cnJlbmN5U3ltYm9sKTsKICB9Owp9CgovKioKICogQG5nZG9jIGZpbHRlcgogKiBAbmFtZSBudW1iZXIKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgdGV4dC4KICoKICogSWYgdGhlIGlucHV0IGlzIG5vdCBhIG51bWJlciBhbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQuCiAqCiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gbnVtYmVyIE51bWJlciB0byBmb3JtYXQuCiAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpPX0gZnJhY3Rpb25TaXplIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0byByb3VuZCB0aGUgbnVtYmVyIHRvLgogKiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCB0aGVuIHRoZSBmcmFjdGlvbiBzaXplIGlzIGNvbXB1dGVkIGZyb20gdGhlIGN1cnJlbnQgbG9jYWxlJ3MgbnVtYmVyCiAqIGZvcm1hdHRpbmcgcGF0dGVybi4gSW4gdGhlIGNhc2Ugb2YgdGhlIGRlZmF1bHQgbG9jYWxlLCBpdCB3aWxsIGJlIDMuCiAqIEByZXR1cm5zIHtzdHJpbmd9IE51bWJlciByb3VuZGVkIHRvIGRlY2ltYWxQbGFjZXMgYW5kIHBsYWNlcyBhIOKAnCzigJ0gYWZ0ZXIgZWFjaCB0aGlyZCBkaWdpdC4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGUgbW9kdWxlPSJudW1iZXJGaWx0ZXJFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdudW1iZXJGaWx0ZXJFeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS52YWwgPSAxMjM0LjU2Nzg5OwogICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgIEVudGVyIG51bWJlcjogPGlucHV0IG5nLW1vZGVsPSd2YWwnPjxicj4KICAgICAgICAgRGVmYXVsdCBmb3JtYXR0aW5nOiA8c3BhbiBpZD0nbnVtYmVyLWRlZmF1bHQnPnt7dmFsIHwgbnVtYmVyfX08L3NwYW4+PGJyPgogICAgICAgICBObyBmcmFjdGlvbnM6IDxzcGFuPnt7dmFsIHwgbnVtYmVyOjB9fTwvc3Bhbj48YnI+CiAgICAgICAgIE5lZ2F0aXZlIG51bWJlcjogPHNwYW4+e3stdmFsIHwgbnVtYmVyOjR9fTwvc3Bhbj4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IG51bWJlcnMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ251bWJlci1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnMSwyMzQuNTY4Jyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbCB8IG51bWJlcjowJykpLmdldFRleHQoKSkudG9CZSgnMSwyMzUnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTEsMjM0LjU2NzknKTsKICAgICAgIH0pOwoKICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5jbGVhcigpOwogICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWwnKSkuc2VuZEtleXMoJzMzNzQuMzMzJyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0LjMzMycpOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0Jyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJy12YWwgfCBudW1iZXI6NCcpKS5nZXRUZXh0KCkpLnRvQmUoJy0zLDM3NC4zMzMwJyk7CiAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCgpudW1iZXJGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddOwpmdW5jdGlvbiBudW1iZXJGaWx0ZXIoJGxvY2FsZSkgewogIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUzsKICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBmcmFjdGlvblNpemUpIHsKCiAgICAvLyBpZiBudWxsIG9yIHVuZGVmaW5lZCBwYXNzIGl0IHRocm91Z2gKICAgIHJldHVybiAobnVtYmVyID09IG51bGwpCiAgICAgICAgPyBudW1iZXIKICAgICAgICA6IGZvcm1hdE51bWJlcihudW1iZXIsIGZvcm1hdHMuUEFUVEVSTlNbMF0sIGZvcm1hdHMuR1JPVVBfU0VQLCBmb3JtYXRzLkRFQ0lNQUxfU0VQLAogICAgICAgICAgICAgICAgICAgICAgIGZyYWN0aW9uU2l6ZSk7CiAgfTsKfQoKdmFyIERFQ0lNQUxfU0VQID0gJy4nOwpmdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtYmVyLCBwYXR0ZXJuLCBncm91cFNlcCwgZGVjaW1hbFNlcCwgZnJhY3Rpb25TaXplKSB7CiAgaWYgKCFpc0Zpbml0ZShudW1iZXIpIHx8IGlzT2JqZWN0KG51bWJlcikpIHJldHVybiAnJzsKCiAgdmFyIGlzTmVnYXRpdmUgPSBudW1iZXIgPCAwOwogIG51bWJlciA9IE1hdGguYWJzKG51bWJlcik7CiAgdmFyIG51bVN0ciA9IG51bWJlciArICcnLAogICAgICBmb3JtYXRlZFRleHQgPSAnJywKICAgICAgcGFydHMgPSBbXTsKCiAgdmFyIGhhc0V4cG9uZW50ID0gZmFsc2U7CiAgaWYgKG51bVN0ci5pbmRleE9mKCdlJykgIT09IC0xKSB7CiAgICB2YXIgbWF0Y2ggPSBudW1TdHIubWF0Y2goLyhbXGRcLl0rKWUoLT8pKFxkKykvKTsKICAgIGlmIChtYXRjaCAmJiBtYXRjaFsyXSA9PSAnLScgJiYgbWF0Y2hbM10gPiBmcmFjdGlvblNpemUgKyAxKSB7CiAgICAgIG51bVN0ciA9ICcwJzsKICAgICAgbnVtYmVyID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGZvcm1hdGVkVGV4dCA9IG51bVN0cjsKICAgICAgaGFzRXhwb25lbnQgPSB0cnVlOwogICAgfQogIH0KCiAgaWYgKCFoYXNFeHBvbmVudCkgewogICAgdmFyIGZyYWN0aW9uTGVuID0gKG51bVN0ci5zcGxpdChERUNJTUFMX1NFUClbMV0gfHwgJycpLmxlbmd0aDsKCiAgICAvLyBkZXRlcm1pbmUgZnJhY3Rpb25TaXplIGlmIGl0IGlzIG5vdCBzcGVjaWZpZWQKICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7CiAgICAgIGZyYWN0aW9uU2l6ZSA9IE1hdGgubWluKE1hdGgubWF4KHBhdHRlcm4ubWluRnJhYywgZnJhY3Rpb25MZW4pLCBwYXR0ZXJuLm1heEZyYWMpOwogICAgfQoKICAgIC8vIHNhZmVseSByb3VuZCBudW1iZXJzIGluIEpTIHdpdGhvdXQgaGl0dGluZyBpbXByZWNpc2lvbnMgb2YgZmxvYXRpbmctcG9pbnQgYXJpdGhtZXRpY3MKICAgIC8vIGluc3BpcmVkIGJ5OgogICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9yb3VuZAogICAgbnVtYmVyID0gKyhNYXRoLnJvdW5kKCsobnVtYmVyLnRvU3RyaW5nKCkgKyAnZScgKyBmcmFjdGlvblNpemUpKS50b1N0cmluZygpICsgJ2UnICsgLWZyYWN0aW9uU2l6ZSk7CgogICAgaWYgKG51bWJlciA9PT0gMCkgewogICAgICBpc05lZ2F0aXZlID0gZmFsc2U7CiAgICB9CgogICAgdmFyIGZyYWN0aW9uID0gKCcnICsgbnVtYmVyKS5zcGxpdChERUNJTUFMX1NFUCk7CiAgICB2YXIgd2hvbGUgPSBmcmFjdGlvblswXTsKICAgIGZyYWN0aW9uID0gZnJhY3Rpb25bMV0gfHwgJyc7CgogICAgdmFyIGksIHBvcyA9IDAsCiAgICAgICAgbGdyb3VwID0gcGF0dGVybi5sZ1NpemUsCiAgICAgICAgZ3JvdXAgPSBwYXR0ZXJuLmdTaXplOwoKICAgIGlmICh3aG9sZS5sZW5ndGggPj0gKGxncm91cCArIGdyb3VwKSkgewogICAgICBwb3MgPSB3aG9sZS5sZW5ndGggLSBsZ3JvdXA7CiAgICAgIGZvciAoaSA9IDA7IGkgPCBwb3M7IGkrKykgewogICAgICAgIGlmICgocG9zIC0gaSklZ3JvdXAgPT09IDAgJiYgaSAhPT0gMCkgewogICAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IGdyb3VwU2VwOwogICAgICAgIH0KICAgICAgICBmb3JtYXRlZFRleHQgKz0gd2hvbGUuY2hhckF0KGkpOwogICAgICB9CiAgICB9CgogICAgZm9yIChpID0gcG9zOyBpIDwgd2hvbGUubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKCh3aG9sZS5sZW5ndGggLSBpKSVsZ3JvdXAgPT09IDAgJiYgaSAhPT0gMCkgewogICAgICAgIGZvcm1hdGVkVGV4dCArPSBncm91cFNlcDsKICAgICAgfQogICAgICBmb3JtYXRlZFRleHQgKz0gd2hvbGUuY2hhckF0KGkpOwogICAgfQoKICAgIC8vIGZvcm1hdCBmcmFjdGlvbiBwYXJ0LgogICAgd2hpbGUoZnJhY3Rpb24ubGVuZ3RoIDwgZnJhY3Rpb25TaXplKSB7CiAgICAgIGZyYWN0aW9uICs9ICcwJzsKICAgIH0KCiAgICBpZiAoZnJhY3Rpb25TaXplICYmIGZyYWN0aW9uU2l6ZSAhPT0gIjAiKSBmb3JtYXRlZFRleHQgKz0gZGVjaW1hbFNlcCArIGZyYWN0aW9uLnN1YnN0cigwLCBmcmFjdGlvblNpemUpOwogIH0gZWxzZSB7CgogICAgaWYgKGZyYWN0aW9uU2l6ZSA+IDAgJiYgbnVtYmVyID4gLTEgJiYgbnVtYmVyIDwgMSkgewogICAgICBmb3JtYXRlZFRleHQgPSBudW1iZXIudG9GaXhlZChmcmFjdGlvblNpemUpOwogICAgfQogIH0KCiAgcGFydHMucHVzaChpc05lZ2F0aXZlID8gcGF0dGVybi5uZWdQcmUgOiBwYXR0ZXJuLnBvc1ByZSk7CiAgcGFydHMucHVzaChmb3JtYXRlZFRleHQpOwogIHBhcnRzLnB1c2goaXNOZWdhdGl2ZSA/IHBhdHRlcm4ubmVnU3VmIDogcGF0dGVybi5wb3NTdWYpOwogIHJldHVybiBwYXJ0cy5qb2luKCcnKTsKfQoKZnVuY3Rpb24gcGFkTnVtYmVyKG51bSwgZGlnaXRzLCB0cmltKSB7CiAgdmFyIG5lZyA9ICcnOwogIGlmIChudW0gPCAwKSB7CiAgICBuZWcgPSAgJy0nOwogICAgbnVtID0gLW51bTsKICB9CiAgbnVtID0gJycgKyBudW07CiAgd2hpbGUobnVtLmxlbmd0aCA8IGRpZ2l0cykgbnVtID0gJzAnICsgbnVtOwogIGlmICh0cmltKQogICAgbnVtID0gbnVtLnN1YnN0cihudW0ubGVuZ3RoIC0gZGlnaXRzKTsKICByZXR1cm4gbmVnICsgbnVtOwp9CgoKZnVuY3Rpb24gZGF0ZUdldHRlcihuYW1lLCBzaXplLCBvZmZzZXQsIHRyaW0pIHsKICBvZmZzZXQgPSBvZmZzZXQgfHwgMDsKICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkgewogICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7CiAgICBpZiAob2Zmc2V0ID4gMCB8fCB2YWx1ZSA+IC1vZmZzZXQpCiAgICAgIHZhbHVlICs9IG9mZnNldDsKICAgIGlmICh2YWx1ZSA9PT0gMCAmJiBvZmZzZXQgPT0gLTEyICkgdmFsdWUgPSAxMjsKICAgIHJldHVybiBwYWROdW1iZXIodmFsdWUsIHNpemUsIHRyaW0pOwogIH07Cn0KCmZ1bmN0aW9uIGRhdGVTdHJHZXR0ZXIobmFtZSwgc2hvcnRGb3JtKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdHMpIHsKICAgIHZhciB2YWx1ZSA9IGRhdGVbJ2dldCcgKyBuYW1lXSgpOwogICAgdmFyIGdldCA9IHVwcGVyY2FzZShzaG9ydEZvcm0gPyAoJ1NIT1JUJyArIG5hbWUpIDogbmFtZSk7CgogICAgcmV0dXJuIGZvcm1hdHNbZ2V0XVt2YWx1ZV07CiAgfTsKfQoKZnVuY3Rpb24gdGltZVpvbmVHZXR0ZXIoZGF0ZSkgewogIHZhciB6b25lID0gLTEgKiBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7CiAgdmFyIHBhZGRlZFpvbmUgPSAoem9uZSA+PSAwKSA/ICIrIiA6ICIiOwoKICBwYWRkZWRab25lICs9IHBhZE51bWJlcihNYXRoW3pvbmUgPiAwID8gJ2Zsb29yJyA6ICdjZWlsJ10oem9uZSAvIDYwKSwgMikgKwogICAgICAgICAgICAgICAgcGFkTnVtYmVyKE1hdGguYWJzKHpvbmUgJSA2MCksIDIpOwoKICByZXR1cm4gcGFkZGVkWm9uZTsKfQoKZnVuY3Rpb24gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSB7CiAgICAvLyAwID0gaW5kZXggb2YgSmFudWFyeQogICAgdmFyIGRheU9mV2Vla09uRmlyc3QgPSAobmV3IERhdGUoeWVhciwgMCwgMSkpLmdldERheSgpOwogICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5ICgrMSB0byBhY2NvdW50IGZvciAxc3QgPSA1KQogICAgLy8gMTEgPSBpbmRleCBvZiAqbmV4dCogVGh1cnNkYXkgKCsxIGFjY291bnQgZm9yIDFzdCA9IDEyKQogICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDAsICgoZGF5T2ZXZWVrT25GaXJzdCA8PSA0KSA/IDUgOiAxMikgLSBkYXlPZldlZWtPbkZpcnN0KTsKfQoKZnVuY3Rpb24gZ2V0VGh1cnNkYXlUaGlzV2VlayhkYXRldGltZSkgewogICAgcmV0dXJuIG5ldyBEYXRlKGRhdGV0aW1lLmdldEZ1bGxZZWFyKCksIGRhdGV0aW1lLmdldE1vbnRoKCksCiAgICAgIC8vIDQgPSBpbmRleCBvZiBUaHVyc2RheQogICAgICBkYXRldGltZS5nZXREYXRlKCkgKyAoNCAtIGRhdGV0aW1lLmdldERheSgpKSk7Cn0KCmZ1bmN0aW9uIHdlZWtHZXR0ZXIoc2l6ZSkgewogICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkgewogICAgICB2YXIgZmlyc3RUaHVycyA9IGdldEZpcnN0VGh1cnNkYXlPZlllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKSwKICAgICAgICAgdGhpc1RodXJzID0gZ2V0VGh1cnNkYXlUaGlzV2VlayhkYXRlKTsKCiAgICAgIHZhciBkaWZmID0gK3RoaXNUaHVycyAtICtmaXJzdFRodXJzLAogICAgICAgICByZXN1bHQgPSAxICsgTWF0aC5yb3VuZChkaWZmIC8gNi4wNDhlOCk7IC8vIDYuMDQ4ZTggbXMgcGVyIHdlZWsKCiAgICAgIHJldHVybiBwYWROdW1iZXIocmVzdWx0LCBzaXplKTsKICAgfTsKfQoKZnVuY3Rpb24gYW1wbUdldHRlcihkYXRlLCBmb3JtYXRzKSB7CiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSA8IDEyID8gZm9ybWF0cy5BTVBNU1swXSA6IGZvcm1hdHMuQU1QTVNbMV07Cn0KCnZhciBEQVRFX0ZPUk1BVFMgPSB7CiAgeXl5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCA0KSwKICAgIHl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDIsIDAsIHRydWUpLAogICAgIHk6IGRhdGVHZXR0ZXIoJ0Z1bGxZZWFyJywgMSksCiAgTU1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnKSwKICAgTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcsIHRydWUpLAogICAgTU06IGRhdGVHZXR0ZXIoJ01vbnRoJywgMiwgMSksCiAgICAgTTogZGF0ZUdldHRlcignTW9udGgnLCAxLCAxKSwKICAgIGRkOiBkYXRlR2V0dGVyKCdEYXRlJywgMiksCiAgICAgZDogZGF0ZUdldHRlcignRGF0ZScsIDEpLAogICAgSEg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiksCiAgICAgSDogZGF0ZUdldHRlcignSG91cnMnLCAxKSwKICAgIGhoOiBkYXRlR2V0dGVyKCdIb3VycycsIDIsIC0xMiksCiAgICAgaDogZGF0ZUdldHRlcignSG91cnMnLCAxLCAtMTIpLAogICAgbW06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAyKSwKICAgICBtOiBkYXRlR2V0dGVyKCdNaW51dGVzJywgMSksCiAgICBzczogZGF0ZUdldHRlcignU2Vjb25kcycsIDIpLAogICAgIHM6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAxKSwKICAgICAvLyB3aGlsZSBJU08gODYwMSByZXF1aXJlcyBmcmFjdGlvbnMgdG8gYmUgcHJlZml4ZWQgd2l0aCBgLmAgb3IgYCxgCiAgICAgLy8gd2UgY2FuIGJlIGp1c3Qgc2FmZWx5IHJlbHkgb24gdXNpbmcgYHNzc2Agc2luY2Ugd2UgY3VycmVudGx5IGRvbid0IHN1cHBvcnQgc2luZ2xlIG9yIHR3byBkaWdpdCBmcmFjdGlvbnMKICAgc3NzOiBkYXRlR2V0dGVyKCdNaWxsaXNlY29uZHMnLCAzKSwKICBFRUVFOiBkYXRlU3RyR2V0dGVyKCdEYXknKSwKICAgRUVFOiBkYXRlU3RyR2V0dGVyKCdEYXknLCB0cnVlKSwKICAgICBhOiBhbXBtR2V0dGVyLAogICAgIFo6IHRpbWVab25lR2V0dGVyLAogICAgd3c6IHdlZWtHZXR0ZXIoMiksCiAgICAgdzogd2Vla0dldHRlcigxKQp9OwoKdmFyIERBVEVfRk9STUFUU19TUExJVCA9IC8oKD86W155TWRIaG1zYVpFdyddKyl8KD86Jyg/OlteJ118JycpKicpfCg/OkUrfHkrfE0rfGQrfEgrfGgrfG0rfHMrfGF8Wnx3KykpKC4qKS8sCiAgICBOVU1CRVJfU1RSSU5HID0gL15cLT9cZCskLzsKCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIGRhdGUKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqICAgRm9ybWF0cyBgZGF0ZWAgdG8gYSBzdHJpbmcgYmFzZWQgb24gdGhlIHJlcXVlc3RlZCBgZm9ybWF0YC4KICoKICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGJlIGNvbXBvc2VkIG9mIHRoZSBmb2xsb3dpbmcgZWxlbWVudHM6CiAqCiAqICAgKiBgJ3l5eXknYDogNCBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyIChlLmcuIEFEIDEgPT4gMDAwMSwgQUQgMjAxMCA9PiAyMDEwKQogKiAgICogYCd5eSdgOiAyIGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIsIHBhZGRlZCAoMDAtOTkpLiAoZS5nLiBBRCAyMDAxID0+IDAxLCBBRCAyMDEwID0+IDEwKQogKiAgICogYCd5J2A6IDEgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgZS5nLiAoQUQgMSA9PiAxLCBBRCAxOTkgPT4gMTk5KQogKiAgICogYCdNTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbnVhcnktRGVjZW1iZXIpCiAqICAgKiBgJ01NTSdgOiBNb250aCBpbiB5ZWFyIChKYW4tRGVjKQogKiAgICogYCdNTSdgOiBNb250aCBpbiB5ZWFyLCBwYWRkZWQgKDAxLTEyKQogKiAgICogYCdNJ2A6IE1vbnRoIGluIHllYXIgKDEtMTIpCiAqICAgKiBgJ2RkJ2A6IERheSBpbiBtb250aCwgcGFkZGVkICgwMS0zMSkKICogICAqIGAnZCdgOiBEYXkgaW4gbW9udGggKDEtMzEpCiAqICAgKiBgJ0VFRUUnYDogRGF5IGluIFdlZWssKFN1bmRheS1TYXR1cmRheSkKICogICAqIGAnRUVFJ2A6IERheSBpbiBXZWVrLCAoU3VuLVNhdCkKICogICAqIGAnSEgnYDogSG91ciBpbiBkYXksIHBhZGRlZCAoMDAtMjMpCiAqICAgKiBgJ0gnYDogSG91ciBpbiBkYXkgKDAtMjMpCiAqICAgKiBgJ2hoJ2A6IEhvdXIgaW4gQU0vUE0sIHBhZGRlZCAoMDEtMTIpCiAqICAgKiBgJ2gnYDogSG91ciBpbiBBTS9QTSwgKDEtMTIpCiAqICAgKiBgJ21tJ2A6IE1pbnV0ZSBpbiBob3VyLCBwYWRkZWQgKDAwLTU5KQogKiAgICogYCdtJ2A6IE1pbnV0ZSBpbiBob3VyICgwLTU5KQogKiAgICogYCdzcydgOiBTZWNvbmQgaW4gbWludXRlLCBwYWRkZWQgKDAwLTU5KQogKiAgICogYCdzJ2A6IFNlY29uZCBpbiBtaW51dGUgKDAtNTkpCiAqICAgKiBgJy5zc3MnIG9yICcsc3NzJ2A6IE1pbGxpc2Vjb25kIGluIHNlY29uZCwgcGFkZGVkICgwMDAtOTk5KQogKiAgICogYCdhJ2A6IEFNL1BNIG1hcmtlcgogKiAgICogYCdaJ2A6IDQgZGlnaXQgKCtzaWduKSByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGltZXpvbmUgb2Zmc2V0ICgtMTIwMC0rMTIwMCkKICogICAqIGAnd3cnYDogSVNPLTg2MDEgd2VlayBvZiB5ZWFyICgwMC01MykKICogICAqIGAndydgOiBJU08tODYwMSB3ZWVrIG9mIHllYXIgKDAtNTMpCiAqCiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBhbHNvIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHByZWRlZmluZWQKICogICB7QGxpbmsgZ3VpZGUvaTE4biBsb2NhbGl6YWJsZSBmb3JtYXRzfToKICoKICogICAqIGAnbWVkaXVtJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSBoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlCiAqICAgICAoZS5nLiBTZXAgMywgMjAxMCAxMjowNTowOCBQTSkKICogICAqIGAnc2hvcnQnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSBoOm1tIGEnYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiA5LzMvMTAgMTI6MDUgUE0pCiAqICAgKiBgJ2Z1bGxEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdFRUVFLCBNTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZQogKiAgICAgKGUuZy4gRnJpZGF5LCBTZXB0ZW1iZXIgMywgMjAxMCkKICogICAqIGAnbG9uZ0RhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcHRlbWJlciAzLCAyMDEwKQogKiAgICogYCdtZWRpdW1EYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcCAzLCAyMDEwKQogKiAgICogYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gOS8zLzEwKQogKiAgICogYCdtZWRpdW1UaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1OjA4IFBNKQogKiAgICogYCdzaG9ydFRpbWUnYDogZXF1aXZhbGVudCB0byBgJ2g6bW0gYSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gMTI6MDUgUE0pCiAqCiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBjb250YWluIGxpdGVyYWwgdmFsdWVzLiBUaGVzZSBuZWVkIHRvIGJlIGVzY2FwZWQgYnkgc3Vycm91bmRpbmcgd2l0aCBzaW5nbGUgcXVvdGVzIChlLmcuCiAqICAgYCJoICdpbiB0aGUgbW9ybmluZyciYCkuIEluIG9yZGVyIHRvIG91dHB1dCBhIHNpbmdsZSBxdW90ZSwgZXNjYXBlIGl0IC0gaS5lLiwgdHdvIHNpbmdsZSBxdW90ZXMgaW4gYSBzZXF1ZW5jZQogKiAgIChlLmcuIGAiaCAnbycnY2xvY2snImApLgogKgogKiBAcGFyYW0geyhEYXRlfG51bWJlcnxzdHJpbmcpfSBkYXRlIERhdGUgdG8gZm9ybWF0IGVpdGhlciBhcyBEYXRlIG9iamVjdCwgbWlsbGlzZWNvbmRzIChzdHJpbmcgb3IKICogICAgbnVtYmVyKSBvciB2YXJpb3VzIElTTyA4NjAxIGRhdGV0aW1lIHN0cmluZyBmb3JtYXRzIChlLmcuIHl5eXktTU0tZGRUSEg6bW06c3Muc3NzWiBhbmQgaXRzCiAqICAgIHNob3J0ZXIgdmVyc2lvbnMgbGlrZSB5eXl5LU1NLWRkVEhIOm1tWiwgeXl5eS1NTS1kZCBvciB5eXl5TU1kZFRISG1tc3NaKS4gSWYgbm8gdGltZXpvbmUgaXMKICogICAgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaW5wdXQsIHRoZSB0aW1lIGlzIGNvbnNpZGVyZWQgdG8gYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLgogKiBAcGFyYW0ge3N0cmluZz19IGZvcm1hdCBGb3JtYXR0aW5nIHJ1bGVzIChzZWUgRGVzY3JpcHRpb24pLiBJZiBub3Qgc3BlY2lmaWVkLAogKiAgICBgbWVkaXVtRGF0ZWAgaXMgdXNlZC4KICogQHBhcmFtIHtzdHJpbmc9fSB0aW1lem9uZSBUaW1lem9uZSB0byBiZSB1c2VkIGZvciBmb3JtYXR0aW5nLiBSaWdodCBub3csIG9ubHkgYCdVVEMnYCBpcyBzdXBwb3J0ZWQuCiAqICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3NlciB3aWxsIGJlIHVzZWQuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmcgb3IgdGhlIGlucHV0IGlmIGlucHV0IGlzIG5vdCByZWNvZ25pemVkIGFzIGRhdGUvbWlsbGlzLgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nfX08L3NwYW4+OgogICAgICAgICAgIDxzcGFuPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSd9fTwvc3Bhbj48YnI+CiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjoKICAgICAgICAgIDxzcGFuPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTwvc3Bhbj48YnI+CiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjoKICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjxicj4KICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOiJNTS9kZC95eXl5ICdhdCcgaDptbWEifX08L3NwYW4+OgogICAgICAgICAgPHNwYW4+e3snMTI4ODMyMzYyMzAwNicgfCBkYXRlOiJNTS9kZC95eXl5ICdhdCcgaDptbWEifX08L3NwYW4+PGJyPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IGRhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSciKSkuZ2V0VGV4dCgpKS4KICAgICAgICAgICAgdG9NYXRjaCgvT2N0IDJcZCwgMjAxMCBcZHsxLDJ9OlxkezJ9OlxkezJ9IChBTXxQTSkvKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWiciKSkuZ2V0VGV4dCgpKS4KICAgICAgICAgICAgdG9NYXRjaCgvMjAxMFwtMTBcLTJcZCBcZHsyfTpcZHsyfTpcZHsyfSAoXC18XCspP1xkezR9Lyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSciKSkuZ2V0VGV4dCgpKS4KICAgICAgICAgICAgdG9NYXRjaCgvMTBcLzJcZFwvMjAxMCBAIFxkezEsMn06XGR7Mn0oQU18UE0pLyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6XCJNTS9kZC95eXl5ICdhdCcgaDptbWFcIiIpKS5nZXRUZXh0KCkpLgogICAgICAgICAgICB0b01hdGNoKC8xMFwvMlxkXC8yMDEwIGF0IFxkezEsMn06XGR7Mn0oQU18UE0pLyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCmRhdGVGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddOwpmdW5jdGlvbiBkYXRlRmlsdGVyKCRsb2NhbGUpIHsKCgogIHZhciBSX0lTTzg2MDFfU1RSID0gL14oXGR7NH0pLT8oXGRcZCktPyhcZFxkKSg/OlQoXGRcZCkoPzo6PyhcZFxkKSg/Ojo/KFxkXGQpKD86XC4oXGQrKSk/KT8pPyhafChbKy1dKShcZFxkKTo/KFxkXGQpKT8pPyQvOwogICAgICAgICAgICAgICAgICAgICAvLyAxICAgICAgICAyICAgICAgIDMgICAgICAgICA0ICAgICAgICAgIDUgICAgICAgICAgNiAgICAgICAgICA3ICAgICAgICAgIDggIDkgICAgIDEwICAgICAgMTEKICBmdW5jdGlvbiBqc29uU3RyaW5nVG9EYXRlKHN0cmluZykgewogICAgdmFyIG1hdGNoOwogICAgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKFJfSVNPODYwMV9TVFIpKSB7CiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoMCksCiAgICAgICAgICB0ekhvdXIgPSAwLAogICAgICAgICAgdHpNaW4gID0gMCwKICAgICAgICAgIGRhdGVTZXR0ZXIgPSBtYXRjaFs4XSA/IGRhdGUuc2V0VVRDRnVsbFllYXIgOiBkYXRlLnNldEZ1bGxZZWFyLAogICAgICAgICAgdGltZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENIb3VycyA6IGRhdGUuc2V0SG91cnM7CgogICAgICBpZiAobWF0Y2hbOV0pIHsKICAgICAgICB0ekhvdXIgPSBpbnQobWF0Y2hbOV0gKyBtYXRjaFsxMF0pOwogICAgICAgIHR6TWluID0gaW50KG1hdGNoWzldICsgbWF0Y2hbMTFdKTsKICAgICAgfQogICAgICBkYXRlU2V0dGVyLmNhbGwoZGF0ZSwgaW50KG1hdGNoWzFdKSwgaW50KG1hdGNoWzJdKSAtIDEsIGludChtYXRjaFszXSkpOwogICAgICB2YXIgaCA9IGludChtYXRjaFs0XXx8MCkgLSB0ekhvdXI7CiAgICAgIHZhciBtID0gaW50KG1hdGNoWzVdfHwwKSAtIHR6TWluOwogICAgICB2YXIgcyA9IGludChtYXRjaFs2XXx8MCk7CiAgICAgIHZhciBtcyA9IE1hdGgucm91bmQocGFyc2VGbG9hdCgnMC4nICsgKG1hdGNoWzddfHwwKSkgKiAxMDAwKTsKICAgICAgdGltZVNldHRlci5jYWxsKGRhdGUsIGgsIG0sIHMsIG1zKTsKICAgICAgcmV0dXJuIGRhdGU7CiAgICB9CiAgICByZXR1cm4gc3RyaW5nOwogIH0KCgogIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIHRpbWV6b25lKSB7CiAgICB2YXIgdGV4dCA9ICcnLAogICAgICAgIHBhcnRzID0gW10sCiAgICAgICAgZm4sIG1hdGNoOwoKICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnbWVkaXVtRGF0ZSc7CiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7CiAgICBpZiAoaXNTdHJpbmcoZGF0ZSkpIHsKICAgICAgZGF0ZSA9IE5VTUJFUl9TVFJJTkcudGVzdChkYXRlKSA/IGludChkYXRlKSA6IGpzb25TdHJpbmdUb0RhdGUoZGF0ZSk7CiAgICB9CgogICAgaWYgKGlzTnVtYmVyKGRhdGUpKSB7CiAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTsKICAgIH0KCiAgICBpZiAoIWlzRGF0ZShkYXRlKSkgewogICAgICByZXR1cm4gZGF0ZTsKICAgIH0KCiAgICB3aGlsZShmb3JtYXQpIHsKICAgICAgbWF0Y2ggPSBEQVRFX0ZPUk1BVFNfU1BMSVQuZXhlYyhmb3JtYXQpOwogICAgICBpZiAobWF0Y2gpIHsKICAgICAgICBwYXJ0cyA9IGNvbmNhdChwYXJ0cywgbWF0Y2gsIDEpOwogICAgICAgIGZvcm1hdCA9IHBhcnRzLnBvcCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHBhcnRzLnB1c2goZm9ybWF0KTsKICAgICAgICBmb3JtYXQgPSBudWxsOwogICAgICB9CiAgICB9CgogICAgaWYgKHRpbWV6b25lICYmIHRpbWV6b25lID09PSAnVVRDJykgewogICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpOwogICAgICBkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgKyBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkpOwogICAgfQogICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24odmFsdWUpewogICAgICBmbiA9IERBVEVfRk9STUFUU1t2YWx1ZV07CiAgICAgIHRleHQgKz0gZm4gPyBmbihkYXRlLCAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMpCiAgICAgICAgICAgICAgICAgOiB2YWx1ZS5yZXBsYWNlKC8oXid8JyQpL2csICcnKS5yZXBsYWNlKC8nJy9nLCAiJyIpOwogICAgfSk7CgogICAgcmV0dXJuIHRleHQ7CiAgfTsKfQoKCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIGpzb24KICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqICAgQWxsb3dzIHlvdSB0byBjb252ZXJ0IGEgSmF2YVNjcmlwdCBvYmplY3QgaW50byBKU09OIHN0cmluZy4KICoKICogICBUaGlzIGZpbHRlciBpcyBtb3N0bHkgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuIFdoZW4gdXNpbmcgdGhlIGRvdWJsZSBjdXJseSB7e3ZhbHVlfX0gbm90YXRpb24KICogICB0aGUgYmluZGluZyBpcyBhdXRvbWF0aWNhbGx5IGNvbnZlcnRlZCB0byBKU09OLgogKgogKiBAcGFyYW0geyp9IG9iamVjdCBBbnkgSmF2YVNjcmlwdCBvYmplY3QgKGluY2x1ZGluZyBhcnJheXMgYW5kIHByaW1pdGl2ZSB0eXBlcykgdG8gZmlsdGVyLgogKiBAcmV0dXJucyB7c3RyaW5nfSBKU09OIHN0cmluZy4KICoKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8cHJlPnt7IHsnbmFtZSc6J3ZhbHVlJ30gfCBqc29uIH19PC9wcmU+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgaXQoJ3Nob3VsZCBqc29uaWZ5IGZpbHRlcmVkIG9iamVjdHMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygieyduYW1lJzondmFsdWUnfSIpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1x7XG4gICJuYW1lIjogPyJ2YWx1ZSJcbn0vKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKgogKi8KZnVuY3Rpb24ganNvbkZpbHRlcigpIHsKICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7CiAgICByZXR1cm4gdG9Kc29uKG9iamVjdCwgdHJ1ZSk7CiAgfTsKfQoKCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIGxvd2VyY2FzZQogKiBAa2luZCBmdW5jdGlvbgogKiBAZGVzY3JpcHRpb24KICogQ29udmVydHMgc3RyaW5nIHRvIGxvd2VyY2FzZS4KICogQHNlZSBhbmd1bGFyLmxvd2VyY2FzZQogKi8KdmFyIGxvd2VyY2FzZUZpbHRlciA9IHZhbHVlRm4obG93ZXJjYXNlKTsKCgovKioKICogQG5nZG9jIGZpbHRlcgogKiBAbmFtZSB1cHBlcmNhc2UKICogQGtpbmQgZnVuY3Rpb24KICogQGRlc2NyaXB0aW9uCiAqIENvbnZlcnRzIHN0cmluZyB0byB1cHBlcmNhc2UuCiAqIEBzZWUgYW5ndWxhci51cHBlcmNhc2UKICovCnZhciB1cHBlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKHVwcGVyY2FzZSk7CgovKioKICogQG5nZG9jIGZpbHRlcgogKiBAbmFtZSBsaW1pdFRvCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBDcmVhdGVzIGEgbmV3IGFycmF5IG9yIHN0cmluZyBjb250YWluaW5nIG9ubHkgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGVsZW1lbnRzLiBUaGUgZWxlbWVudHMKICogYXJlIHRha2VuIGZyb20gZWl0aGVyIHRoZSBiZWdpbm5pbmcgb3IgdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5LCBzdHJpbmcgb3IgbnVtYmVyLCBhcyBzcGVjaWZpZWQgYnkKICogdGhlIHZhbHVlIGFuZCBzaWduIChwb3NpdGl2ZSBvciBuZWdhdGl2ZSkgb2YgYGxpbWl0YC4gSWYgYSBudW1iZXIgaXMgdXNlZCBhcyBpbnB1dCwgaXQgaXMKICogY29udmVydGVkIHRvIGEgc3RyaW5nLgogKgogKiBAcGFyYW0ge0FycmF5fHN0cmluZ3xudW1iZXJ9IGlucHV0IFNvdXJjZSBhcnJheSwgc3RyaW5nIG9yIG51bWJlciB0byBiZSBsaW1pdGVkLgogKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGxpbWl0IFRoZSBsZW5ndGggb2YgdGhlIHJldHVybmVkIGFycmF5IG9yIHN0cmluZy4gSWYgdGhlIGBsaW1pdGAgbnVtYmVyCiAqICAgICBpcyBwb3NpdGl2ZSwgYGxpbWl0YCBudW1iZXIgb2YgaXRlbXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nIGFyZSBjb3BpZWQuCiAqICAgICBJZiB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLCBgbGltaXRgIG51bWJlciAgb2YgaXRlbXMgZnJvbSB0aGUgZW5kIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nCiAqICAgICBhcmUgY29waWVkLiBUaGUgYGxpbWl0YCB3aWxsIGJlIHRyaW1tZWQgaWYgaXQgZXhjZWVkcyBgYXJyYXkubGVuZ3RoYAogKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfSBBIG5ldyBzdWItYXJyYXkgb3Igc3Vic3RyaW5nIG9mIGxlbmd0aCBgbGltaXRgIG9yIGxlc3MgaWYgaW5wdXQgYXJyYXkKICogICAgIGhhZCBsZXNzIHRoYW4gYGxpbWl0YCBlbGVtZW50cy4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGUgbW9kdWxlPSJsaW1pdFRvRXhhbXBsZSI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbGltaXRUb0V4YW1wbGUnLCBbXSkKICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgICAgJHNjb3BlLm51bWJlcnMgPSBbMSwyLDMsNCw1LDYsNyw4LDldOwogICAgICAgICAgICAgJHNjb3BlLmxldHRlcnMgPSAiYWJjZGVmZ2hpIjsKICAgICAgICAgICAgICRzY29wZS5sb25nTnVtYmVyID0gMjM0NTQzMjM0MjsKICAgICAgICAgICAgICRzY29wZS5udW1MaW1pdCA9IDM7CiAgICAgICAgICAgICAkc2NvcGUubGV0dGVyTGltaXQgPSAzOwogICAgICAgICAgICAgJHNjb3BlLmxvbmdOdW1iZXJMaW1pdCA9IDM7CiAgICAgICAgICAgfV0pOwogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgTGltaXQge3tudW1iZXJzfX0gdG86IDxpbnB1dCB0eXBlPSJudW1iZXIiIHN0ZXA9IjEiIG5nLW1vZGVsPSJudW1MaW1pdCI+CiAgICAgICAgIDxwPk91dHB1dCBudW1iZXJzOiB7eyBudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCB9fTwvcD4KICAgICAgICAgTGltaXQge3tsZXR0ZXJzfX0gdG86IDxpbnB1dCB0eXBlPSJudW1iZXIiIHN0ZXA9IjEiIG5nLW1vZGVsPSJsZXR0ZXJMaW1pdCI+CiAgICAgICAgIDxwPk91dHB1dCBsZXR0ZXJzOiB7eyBsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCB9fTwvcD4KICAgICAgICAgTGltaXQge3tsb25nTnVtYmVyfX0gdG86IDxpbnB1dCB0eXBlPSJudW1iZXIiIHN0ZXA9IjEiIG5nLW1vZGVsPSJsb25nTnVtYmVyTGltaXQiPgogICAgICAgICA8cD5PdXRwdXQgbG9uZyBudW1iZXI6IHt7IGxvbmdOdW1iZXIgfCBsaW1pdFRvOmxvbmdOdW1iZXJMaW1pdCB9fTwvcD4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIHZhciBudW1MaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbnVtTGltaXQnKSk7CiAgICAgICB2YXIgbGV0dGVyTGltaXRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2xldHRlckxpbWl0JykpOwogICAgICAgdmFyIGxvbmdOdW1iZXJMaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbG9uZ051bWJlckxpbWl0JykpOwogICAgICAgdmFyIGxpbWl0ZWROdW1iZXJzID0gZWxlbWVudChieS5iaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKTsKICAgICAgIHZhciBsaW1pdGVkTGV0dGVycyA9IGVsZW1lbnQoYnkuYmluZGluZygnbGV0dGVycyB8IGxpbWl0VG86bGV0dGVyTGltaXQnKSk7CiAgICAgICB2YXIgbGltaXRlZExvbmdOdW1iZXIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xvbmdOdW1iZXIgfCBsaW1pdFRvOmxvbmdOdW1iZXJMaW1pdCcpKTsKCiAgICAgICBpdCgnc2hvdWxkIGxpbWl0IHRoZSBudW1iZXIgYXJyYXkgdG8gZmlyc3QgdGhyZWUgaXRlbXMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KG51bUxpbWl0SW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCczJyk7CiAgICAgICAgIGV4cGVjdChsZXR0ZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpOwogICAgICAgICBleHBlY3QobG9uZ051bWJlckxpbWl0SW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCczJyk7CiAgICAgICAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbMSwyLDNdJyk7CiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmMnKTsKICAgICAgICAgZXhwZWN0KGxpbWl0ZWRMb25nTnVtYmVyLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxvbmcgbnVtYmVyOiAyMzQnKTsKICAgICAgIH0pOwoKICAgICAgIC8vIFRoZXJlIGlzIGEgYnVnIGluIHNhZmFyaSBhbmQgcHJvdHJhY3RvciB0aGF0IGRvZXNuJ3QgbGlrZSB0aGUgbWludXMga2V5CiAgICAgICAvLyBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgb3V0cHV0IHdoZW4gLTMgaXMgZW50ZXJlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgLy8gICBudW1MaW1pdElucHV0LmNsZWFyKCk7CiAgICAgICAvLyAgIG51bUxpbWl0SW5wdXQuc2VuZEtleXMoJy0zJyk7CiAgICAgICAvLyAgIGxldHRlckxpbWl0SW5wdXQuY2xlYXIoKTsKICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTsKICAgICAgIC8vICAgbG9uZ051bWJlckxpbWl0SW5wdXQuY2xlYXIoKTsKICAgICAgIC8vICAgbG9uZ051bWJlckxpbWl0SW5wdXQuc2VuZEtleXMoJy0zJyk7CiAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbNyw4LDldJyk7CiAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBnaGknKTsKICAgICAgIC8vICAgZXhwZWN0KGxpbWl0ZWRMb25nTnVtYmVyLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxvbmcgbnVtYmVyOiAzNDInKTsKICAgICAgIC8vIH0pOwoKICAgICAgIGl0KCdzaG91bGQgbm90IGV4Y2VlZCB0aGUgbWF4aW11bSBzaXplIG9mIGlucHV0IGFycmF5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgIG51bUxpbWl0SW5wdXQuY2xlYXIoKTsKICAgICAgICAgbnVtTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7CiAgICAgICAgIGxldHRlckxpbWl0SW5wdXQuY2xlYXIoKTsKICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7CiAgICAgICAgIGxvbmdOdW1iZXJMaW1pdElucHV0LmNsZWFyKCk7CiAgICAgICAgIGxvbmdOdW1iZXJMaW1pdElucHV0LnNlbmRLZXlzKCcxMDAnKTsKICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsMyw0LDUsNiw3LDgsOV0nKTsKICAgICAgICAgZXhwZWN0KGxpbWl0ZWRMZXR0ZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxldHRlcnM6IGFiY2RlZmdoaScpOwogICAgICAgICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDIzNDU0MzIzNDInKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgoqLwpmdW5jdGlvbiBsaW1pdFRvRmlsdGVyKCl7CiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBsaW1pdCkgewogICAgaWYgKGlzTnVtYmVyKGlucHV0KSkgaW5wdXQgPSBpbnB1dC50b1N0cmluZygpOwogICAgaWYgKCFpc0FycmF5KGlucHV0KSAmJiAhaXNTdHJpbmcoaW5wdXQpKSByZXR1cm4gaW5wdXQ7CgogICAgaWYgKE1hdGguYWJzKE51bWJlcihsaW1pdCkpID09PSBJbmZpbml0eSkgewogICAgICBsaW1pdCA9IE51bWJlcihsaW1pdCk7CiAgICB9IGVsc2UgewogICAgICBsaW1pdCA9IGludChsaW1pdCk7CiAgICB9CgogICAgaWYgKGlzU3RyaW5nKGlucHV0KSkgewogICAgICAvL05hTiBjaGVjayBvbiBsaW1pdAogICAgICBpZiAobGltaXQpIHsKICAgICAgICByZXR1cm4gbGltaXQgPj0gMCA/IGlucHV0LnNsaWNlKDAsIGxpbWl0KSA6IGlucHV0LnNsaWNlKGxpbWl0LCBpbnB1dC5sZW5ndGgpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAiIjsKICAgICAgfQogICAgfQoKICAgIHZhciBvdXQgPSBbXSwKICAgICAgaSwgbjsKCiAgICAvLyBpZiBhYnMobGltaXQpIGV4Y2VlZHMgbWF4aW11bSBsZW5ndGgsIHRyaW0gaXQKICAgIGlmIChsaW1pdCA+IGlucHV0Lmxlbmd0aCkKICAgICAgbGltaXQgPSBpbnB1dC5sZW5ndGg7CiAgICBlbHNlIGlmIChsaW1pdCA8IC1pbnB1dC5sZW5ndGgpCiAgICAgIGxpbWl0ID0gLWlucHV0Lmxlbmd0aDsKCiAgICBpZiAobGltaXQgPiAwKSB7CiAgICAgIGkgPSAwOwogICAgICBuID0gbGltaXQ7CiAgICB9IGVsc2UgewogICAgICBpID0gaW5wdXQubGVuZ3RoICsgbGltaXQ7CiAgICAgIG4gPSBpbnB1dC5sZW5ndGg7CiAgICB9CgogICAgZm9yICg7IGk8bjsgaSsrKSB7CiAgICAgIG91dC5wdXNoKGlucHV0W2ldKTsKICAgIH0KCiAgICByZXR1cm4gb3V0OwogIH07Cn0KCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG9yZGVyQnkKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIE9yZGVycyBhIHNwZWNpZmllZCBgYXJyYXlgIGJ5IHRoZSBgZXhwcmVzc2lvbmAgcHJlZGljYXRlLiBJdCBpcyBvcmRlcmVkIGFscGhhYmV0aWNhbGx5CiAqIGZvciBzdHJpbmdzIGFuZCBudW1lcmljYWxseSBmb3IgbnVtYmVycy4gTm90ZTogaWYgeW91IG5vdGljZSBudW1iZXJzIGFyZSBub3QgYmVpbmcgc29ydGVkCiAqIGNvcnJlY3RseSwgbWFrZSBzdXJlIHRoZXkgYXJlIGFjdHVhbGx5IGJlaW5nIHNhdmVkIGFzIG51bWJlcnMgYW5kIG5vdCBzdHJpbmdzLgogKgogKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC4KICogQHBhcmFtIHtmdW5jdGlvbigqKXxzdHJpbmd8QXJyYXkuPChmdW5jdGlvbigqKXxzdHJpbmcpPj19IGV4cHJlc3Npb24gQSBwcmVkaWNhdGUgdG8gYmUKICogICAgdXNlZCBieSB0aGUgY29tcGFyYXRvciB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIG9mIGVsZW1lbnRzLgogKgogKiAgICBDYW4gYmUgb25lIG9mOgogKgogKiAgICAtIGBmdW5jdGlvbmA6IEdldHRlciBmdW5jdGlvbi4gVGhlIHJlc3VsdCBvZiB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgc29ydGVkIHVzaW5nIHRoZQogKiAgICAgIGA8YCwgYD1gLCBgPmAgb3BlcmF0b3IuCiAqICAgIC0gYHN0cmluZ2A6IEFuIEFuZ3VsYXIgZXhwcmVzc2lvbi4gVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gaXMgdXNlZCB0byBjb21wYXJlIGVsZW1lbnRzCiAqICAgICAgKGZvciBleGFtcGxlIGBuYW1lYCB0byBzb3J0IGJ5IGEgcHJvcGVydHkgY2FsbGVkIGBuYW1lYCBvciBgbmFtZS5zdWJzdHIoMCwgMylgIHRvIHNvcnQgYnkKICogICAgICAzIGZpcnN0IGNoYXJhY3RlcnMgb2YgYSBwcm9wZXJ0eSBjYWxsZWQgYG5hbWVgKS4gVGhlIHJlc3VsdCBvZiBhIGNvbnN0YW50IGV4cHJlc3Npb24KICogICAgICBpcyBpbnRlcnByZXRlZCBhcyBhIHByb3BlcnR5IG5hbWUgdG8gYmUgdXNlZCBpbiBjb21wYXJpc29ucyAoZm9yIGV4YW1wbGUgYCJzcGVjaWFsIG5hbWUiYAogKiAgICAgIHRvIHNvcnQgb2JqZWN0IGJ5IHRoZSB2YWx1ZSBvZiB0aGVpciBgc3BlY2lhbCBuYW1lYCBwcm9wZXJ0eSkuIEFuIGV4cHJlc3Npb24gY2FuIGJlCiAqICAgICAgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGArYCBvciBgLWAgdG8gY29udHJvbCBhc2NlbmRpbmcgb3IgZGVzY2VuZGluZyBzb3J0IG9yZGVyCiAqICAgICAgKGZvciBleGFtcGxlLCBgK25hbWVgIG9yIGAtbmFtZWApLiBJZiBubyBwcm9wZXJ0eSBpcyBwcm92aWRlZCwgKGUuZy4gYCcrJ2ApIHRoZW4gdGhlIGFycmF5CiAqICAgICAgZWxlbWVudCBpdHNlbGYgaXMgdXNlZCB0byBjb21wYXJlIHdoZXJlIHNvcnRpbmcuCiAqICAgIC0gYEFycmF5YDogQW4gYXJyYXkgb2YgZnVuY3Rpb24gb3Igc3RyaW5nIHByZWRpY2F0ZXMuIFRoZSBmaXJzdCBwcmVkaWNhdGUgaW4gdGhlIGFycmF5CiAqICAgICAgaXMgdXNlZCBmb3Igc29ydGluZywgYnV0IHdoZW4gdHdvIGl0ZW1zIGFyZSBlcXVpdmFsZW50LCB0aGUgbmV4dCBwcmVkaWNhdGUgaXMgdXNlZC4KICoKICogICAgSWYgdGhlIHByZWRpY2F0ZSBpcyBtaXNzaW5nIG9yIGVtcHR5IHRoZW4gaXQgZGVmYXVsdHMgdG8gYCcrJ2AuCiAqCiAqIEBwYXJhbSB7Ym9vbGVhbj19IHJldmVyc2UgUmV2ZXJzZSB0aGUgb3JkZXIgb2YgdGhlIGFycmF5LgogKiBAcmV0dXJucyB7QXJyYXl9IFNvcnRlZCBjb3B5IG9mIHRoZSBzb3VyY2UgYXJyYXkuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlIG1vZHVsZT0ib3JkZXJCeUV4YW1wbGUiPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ29yZGVyQnlFeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS5mcmllbmRzID0KICAgICAgICAgICAgICAgICBbe25hbWU6J0pvaG4nLCBwaG9uZTonNTU1LTEyMTInLCBhZ2U6MTB9LAogICAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic1NTUtOTg3NicsIGFnZToxOX0sCiAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJywgYWdlOjIxfSwKICAgICAgICAgICAgICAgICAge25hbWU6J0FkYW0nLCBwaG9uZTonNTU1LTU2NzgnLCBhZ2U6MzV9LAogICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnLCBhZ2U6Mjl9XTsKICAgICAgICAgICAgICRzY29wZS5wcmVkaWNhdGUgPSAnLWFnZSc7CiAgICAgICAgICAgfV0pOwogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgPHByZT5Tb3J0aW5nIHByZWRpY2F0ZSA9IHt7cHJlZGljYXRlfX07IHJldmVyc2UgPSB7e3JldmVyc2V9fTwvcHJlPgogICAgICAgICA8aHIvPgogICAgICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9InByZWRpY2F0ZT0nJyI+dW5zb3J0ZWQ8L2E+IF0KICAgICAgICAgPHRhYmxlIGNsYXNzPSJmcmllbmQiPgogICAgICAgICAgIDx0cj4KICAgICAgICAgICAgIDx0aD48YSBocmVmPSIiIG5nLWNsaWNrPSJwcmVkaWNhdGUgPSAnbmFtZSc7IHJldmVyc2U9ZmFsc2UiPk5hbWU8L2E+CiAgICAgICAgICAgICAgICAgKDxhIGhyZWY9IiIgbmctY2xpY2s9InByZWRpY2F0ZSA9ICctbmFtZSc7IHJldmVyc2U9ZmFsc2UiPl48L2E+KTwvdGg+CiAgICAgICAgICAgICA8dGg+PGEgaHJlZj0iIiBuZy1jbGljaz0icHJlZGljYXRlID0gJ3Bob25lJzsgcmV2ZXJzZT0hcmV2ZXJzZSI+UGhvbmUgTnVtYmVyPC9hPjwvdGg+CiAgICAgICAgICAgICA8dGg+PGEgaHJlZj0iIiBuZy1jbGljaz0icHJlZGljYXRlID0gJ2FnZSc7IHJldmVyc2U9IXJldmVyc2UiPkFnZTwvYT48L3RoPgogICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgPHRyIG5nLXJlcGVhdD0iZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OnByZWRpY2F0ZTpyZXZlcnNlIj4KICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPgogICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPgogICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD4KICAgICAgICAgICA8L3RyPgogICAgICAgICA8L3RhYmxlPgogICAgICAgPC9kaXY+CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqCiAqIEl0J3MgYWxzbyBwb3NzaWJsZSB0byBjYWxsIHRoZSBvcmRlckJ5IGZpbHRlciBtYW51YWxseSwgYnkgaW5qZWN0aW5nIGAkZmlsdGVyYCwgcmV0cmlldmluZyB0aGUKICogZmlsdGVyIHJvdXRpbmUgd2l0aCBgJGZpbHRlcignb3JkZXJCeScpYCwgYW5kIGNhbGxpbmcgdGhlIHJldHVybmVkIGZpbHRlciByb3V0aW5lIHdpdGggdGhlCiAqIGRlc2lyZWQgcGFyYW1ldGVycy4KICoKICogRXhhbXBsZToKICoKICogQGV4YW1wbGUKICA8ZXhhbXBsZSBtb2R1bGU9Im9yZGVyQnlFeGFtcGxlIj4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICA8dGFibGUgY2xhc3M9ImZyaWVuZCI+CiAgICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0aD48YSBocmVmPSIiIG5nLWNsaWNrPSJyZXZlcnNlPWZhbHNlO29yZGVyKCduYW1lJywgZmFsc2UpIj5OYW1lPC9hPgogICAgICAgICAgICAgICg8YSBocmVmPSIiIG5nLWNsaWNrPSJvcmRlcignLW5hbWUnLGZhbHNlKSI+XjwvYT4pPC90aD4KICAgICAgICAgICAgPHRoPjxhIGhyZWY9IiIgbmctY2xpY2s9InJldmVyc2U9IXJldmVyc2U7b3JkZXIoJ3Bob25lJywgcmV2ZXJzZSkiPlBob25lIE51bWJlcjwvYT48L3RoPgogICAgICAgICAgICA8dGg+PGEgaHJlZj0iIiBuZy1jbGljaz0icmV2ZXJzZT0hcmV2ZXJzZTtvcmRlcignYWdlJyxyZXZlcnNlKSI+QWdlPC9hPjwvdGg+CiAgICAgICAgICA8L3RyPgogICAgICAgICAgPHRyIG5nLXJlcGVhdD0iZnJpZW5kIGluIGZyaWVuZHMiPgogICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD4KICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPgogICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPgogICAgICAgICAgPC90cj4KICAgICAgICA8L3RhYmxlPgogICAgICA8L2Rpdj4KICAgIDwvZmlsZT4KCiAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUnLCBbXSkKICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZmlsdGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkZmlsdGVyKSB7CiAgICAgICAgICB2YXIgb3JkZXJCeSA9ICRmaWx0ZXIoJ29yZGVyQnknKTsKICAgICAgICAgICRzY29wZS5mcmllbmRzID0gWwogICAgICAgICAgICB7IG5hbWU6ICdKb2huJywgICAgcGhvbmU6ICc1NTUtMTIxMicsICAgIGFnZTogMTAgfSwKICAgICAgICAgICAgeyBuYW1lOiAnTWFyeScsICAgIHBob25lOiAnNTU1LTk4NzYnLCAgICBhZ2U6IDE5IH0sCiAgICAgICAgICAgIHsgbmFtZTogJ01pa2UnLCAgICBwaG9uZTogJzU1NS00MzIxJywgICAgYWdlOiAyMSB9LAogICAgICAgICAgICB7IG5hbWU6ICdBZGFtJywgICAgcGhvbmU6ICc1NTUtNTY3OCcsICAgIGFnZTogMzUgfSwKICAgICAgICAgICAgeyBuYW1lOiAnSnVsaWUnLCAgIHBob25lOiAnNTU1LTg3NjUnLCAgICBhZ2U6IDI5IH0KICAgICAgICAgIF07CiAgICAgICAgICAkc2NvcGUub3JkZXIgPSBmdW5jdGlvbihwcmVkaWNhdGUsIHJldmVyc2UpIHsKICAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBvcmRlckJ5KCRzY29wZS5mcmllbmRzLCBwcmVkaWNhdGUsIHJldmVyc2UpOwogICAgICAgICAgfTsKICAgICAgICAgICRzY29wZS5vcmRlcignLWFnZScsZmFsc2UpOwogICAgICAgIH1dKTsKICAgIDwvZmlsZT4KPC9leGFtcGxlPgogKi8Kb3JkZXJCeUZpbHRlci4kaW5qZWN0ID0gWyckcGFyc2UnXTsKZnVuY3Rpb24gb3JkZXJCeUZpbHRlcigkcGFyc2UpewogIHJldHVybiBmdW5jdGlvbihhcnJheSwgc29ydFByZWRpY2F0ZSwgcmV2ZXJzZU9yZGVyKSB7CiAgICBpZiAoIShpc0FycmF5TGlrZShhcnJheSkpKSByZXR1cm4gYXJyYXk7CiAgICBzb3J0UHJlZGljYXRlID0gaXNBcnJheShzb3J0UHJlZGljYXRlKSA/IHNvcnRQcmVkaWNhdGU6IFtzb3J0UHJlZGljYXRlXTsKICAgIGlmIChzb3J0UHJlZGljYXRlLmxlbmd0aCA9PT0gMCkgeyBzb3J0UHJlZGljYXRlID0gWycrJ107IH0KICAgIHNvcnRQcmVkaWNhdGUgPSBzb3J0UHJlZGljYXRlLm1hcChmdW5jdGlvbihwcmVkaWNhdGUpewogICAgICB2YXIgZGVzY2VuZGluZyA9IGZhbHNlLCBnZXQgPSBwcmVkaWNhdGUgfHwgaWRlbnRpdHk7CiAgICAgIGlmIChpc1N0cmluZyhwcmVkaWNhdGUpKSB7CiAgICAgICAgaWYgKChwcmVkaWNhdGUuY2hhckF0KDApID09ICcrJyB8fCBwcmVkaWNhdGUuY2hhckF0KDApID09ICctJykpIHsKICAgICAgICAgIGRlc2NlbmRpbmcgPSBwcmVkaWNhdGUuY2hhckF0KDApID09ICctJzsKICAgICAgICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZS5zdWJzdHJpbmcoMSk7CiAgICAgICAgfQogICAgICAgIGlmICggcHJlZGljYXRlID09PSAnJyApIHsKICAgICAgICAgIC8vIEVmZmVjdGl2ZWx5IG5vIHByZWRpY2F0ZSB3YXMgcGFzc2VkIHNvIHdlIGNvbXBhcmUgaWRlbnRpdHkKICAgICAgICAgIHJldHVybiByZXZlcnNlQ29tcGFyYXRvcihmdW5jdGlvbihhLGIpIHsKICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmUoYSwgYik7CiAgICAgICAgICB9LCBkZXNjZW5kaW5nKTsKICAgICAgICB9CiAgICAgICAgZ2V0ID0gJHBhcnNlKHByZWRpY2F0ZSk7CiAgICAgICAgaWYgKGdldC5jb25zdGFudCkgewogICAgICAgICAgdmFyIGtleSA9IGdldCgpOwogICAgICAgICAgcmV0dXJuIHJldmVyc2VDb21wYXJhdG9yKGZ1bmN0aW9uKGEsYikgewogICAgICAgICAgICByZXR1cm4gY29tcGFyZShhW2tleV0sIGJba2V5XSk7CiAgICAgICAgICB9LCBkZXNjZW5kaW5nKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJldmVyc2VDb21wYXJhdG9yKGZ1bmN0aW9uKGEsYil7CiAgICAgICAgcmV0dXJuIGNvbXBhcmUoZ2V0KGEpLGdldChiKSk7CiAgICAgIH0sIGRlc2NlbmRpbmcpOwogICAgfSk7CiAgICB2YXIgYXJyYXlDb3B5ID0gW107CiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgeyBhcnJheUNvcHkucHVzaChhcnJheVtpXSk7IH0KICAgIHJldHVybiBhcnJheUNvcHkuc29ydChyZXZlcnNlQ29tcGFyYXRvcihjb21wYXJhdG9yLCByZXZlcnNlT3JkZXIpKTsKCiAgICBmdW5jdGlvbiBjb21wYXJhdG9yKG8xLCBvMil7CiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNvcnRQcmVkaWNhdGUubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgY29tcCA9IHNvcnRQcmVkaWNhdGVbaV0obzEsIG8yKTsKICAgICAgICBpZiAoY29tcCAhPT0gMCkgcmV0dXJuIGNvbXA7CiAgICAgIH0KICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICBmdW5jdGlvbiByZXZlcnNlQ29tcGFyYXRvcihjb21wLCBkZXNjZW5kaW5nKSB7CiAgICAgIHJldHVybiBkZXNjZW5kaW5nCiAgICAgICAgICA/IGZ1bmN0aW9uKGEsYil7cmV0dXJuIGNvbXAoYixhKTt9CiAgICAgICAgICA6IGNvbXA7CiAgICB9CiAgICBmdW5jdGlvbiBjb21wYXJlKHYxLCB2Mil7CiAgICAgIHZhciB0MSA9IHR5cGVvZiB2MTsKICAgICAgdmFyIHQyID0gdHlwZW9mIHYyOwogICAgICBpZiAodDEgPT0gdDIpIHsKICAgICAgICBpZiAoaXNEYXRlKHYxKSAmJiBpc0RhdGUodjIpKSB7CiAgICAgICAgICB2MSA9IHYxLnZhbHVlT2YoKTsKICAgICAgICAgIHYyID0gdjIudmFsdWVPZigpOwogICAgICAgIH0KICAgICAgICBpZiAodDEgPT0gInN0cmluZyIpIHsKICAgICAgICAgICB2MSA9IHYxLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgdjIgPSB2Mi50b0xvd2VyQ2FzZSgpOwogICAgICAgIH0KICAgICAgICBpZiAodjEgPT09IHYyKSByZXR1cm4gMDsKICAgICAgICByZXR1cm4gdjEgPCB2MiA/IC0xIDogMTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdDEgPCB0MiA/IC0xIDogMTsKICAgICAgfQogICAgfQogIH07Cn0KCmZ1bmN0aW9uIG5nRGlyZWN0aXZlKGRpcmVjdGl2ZSkgewogIGlmIChpc0Z1bmN0aW9uKGRpcmVjdGl2ZSkpIHsKICAgIGRpcmVjdGl2ZSA9IHsKICAgICAgbGluazogZGlyZWN0aXZlCiAgICB9OwogIH0KICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0FDJzsKICByZXR1cm4gdmFsdWVGbihkaXJlY3RpdmUpOwp9CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBhCiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBNb2RpZmllcyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUgaHRtbCBBIHRhZyBzbyB0aGF0IHRoZSBkZWZhdWx0IGFjdGlvbiBpcyBwcmV2ZW50ZWQgd2hlbgogKiB0aGUgaHJlZiBhdHRyaWJ1dGUgaXMgZW1wdHkuCiAqCiAqIFRoaXMgY2hhbmdlIHBlcm1pdHMgdGhlIGVhc3kgY3JlYXRpb24gb2YgYWN0aW9uIGxpbmtzIHdpdGggdGhlIGBuZ0NsaWNrYCBkaXJlY3RpdmUKICogd2l0aG91dCBjaGFuZ2luZyB0aGUgbG9jYXRpb24gb3IgY2F1c2luZyBwYWdlIHJlbG9hZHMsIGUuZy46CiAqIGA8YSBocmVmPSIiIG5nLWNsaWNrPSJsaXN0LmFkZEl0ZW0oKSI+QWRkIEl0ZW08L2E+YAogKi8KdmFyIGh0bWxBbmNob3JEaXJlY3RpdmUgPSB2YWx1ZUZuKHsKICByZXN0cmljdDogJ0UnLAogIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHsKICAgIGlmICghYXR0ci5ocmVmICYmICFhdHRyLnhsaW5rSHJlZiAmJiAhYXR0ci5uYW1lKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkgewogICAgICAgIC8vIFNWR0FFbGVtZW50IGRvZXMgbm90IHVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUsIGJ1dCByYXRoZXIgdGhlICd4bGlua0hyZWYnIGF0dHJpYnV0ZS4KICAgICAgICB2YXIgaHJlZiA9IHRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nID8KICAgICAgICAgICAgICAgICAgICd4bGluazpocmVmJyA6ICdocmVmJzsKICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgIC8vIGlmIHdlIGhhdmUgbm8gaHJlZiB1cmwsIHRoZW4gZG9uJ3QgbmF2aWdhdGUgYW55d2hlcmUuCiAgICAgICAgICBpZiAoIWVsZW1lbnQuYXR0cihocmVmKSkgewogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9OwogICAgfQogIH0KfSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0hyZWYKICogQHJlc3RyaWN0IEEKICogQHByaW9yaXR5IDk5CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYW4gaHJlZiBhdHRyaWJ1dGUgd2lsbAogKiBtYWtlIHRoZSBsaW5rIGdvIHRvIHRoZSB3cm9uZyBVUkwgaWYgdGhlIHVzZXIgY2xpY2tzIGl0IGJlZm9yZQogKiBBbmd1bGFyIGhhcyBhIGNoYW5jZSB0byByZXBsYWNlIHRoZSBge3toYXNofX1gIG1hcmt1cCB3aXRoIGl0cwogKiB2YWx1ZS4gVW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgbWFya3VwIHRoZSBsaW5rIHdpbGwgYmUgYnJva2VuCiAqIGFuZCB3aWxsIG1vc3QgbGlrZWx5IHJldHVybiBhIDQwNCBlcnJvci4KICoKICogVGhlIGBuZ0hyZWZgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLgogKgogKiBUaGUgd3Jvbmcgd2F5IHRvIHdyaXRlIGl0OgogKiBgYGBodG1sCiAqIDxhIGhyZWY9Imh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSI+bGluazE8L2E+CiAqIGBgYAogKgogKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6CiAqIGBgYGh0bWwKICogPGEgbmctaHJlZj0iaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19Ij5saW5rMTwvYT4KICogYGBgCiAqCiAqIEBlbGVtZW50IEEKICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdIcmVmIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC4KICoKICogQGV4YW1wbGUKICogVGhpcyBleGFtcGxlIHNob3dzIHZhcmlvdXMgY29tYmluYXRpb25zIG9mIGBocmVmYCwgYG5nLWhyZWZgIGFuZCBgbmctY2xpY2tgIGF0dHJpYnV0ZXMKICogaW4gbGlua3MgYW5kIHRoZWlyIGRpZmZlcmVudCBiZWhhdmlvcnM6CiAgICA8ZXhhbXBsZT4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPGlucHV0IG5nLW1vZGVsPSJ2YWx1ZSIgLz48YnIgLz4KICAgICAgICA8YSBpZD0ibGluay0xIiBocmVmIG5nLWNsaWNrPSJ2YWx1ZSA9IDEiPmxpbmsgMTwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz4KICAgICAgICA8YSBpZD0ibGluay0yIiBocmVmPSIiIG5nLWNsaWNrPSJ2YWx1ZSA9IDIiPmxpbmsgMjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz4KICAgICAgICA8YSBpZD0ibGluay0zIiBuZy1ocmVmPSIve3snMTIzJ319Ij5saW5rIDM8L2E+IChsaW5rLCByZWxvYWQhKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTQiIGhyZWY9IiIgbmFtZT0ieHgiIG5nLWNsaWNrPSJ2YWx1ZSA9IDQiPmFuY2hvcjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz4KICAgICAgICA8YSBpZD0ibGluay01IiBuYW1lPSJ4eHgiIG5nLWNsaWNrPSJ2YWx1ZSA9IDUiPmFuY2hvcjwvYT4gKG5vIGxpbmspPGJyIC8+CiAgICAgICAgPGEgaWQ9ImxpbmstNiIgbmctaHJlZj0ie3t2YWx1ZX19Ij5saW5rPC9hPiAobGluaywgY2hhbmdlIGxvY2F0aW9uKQogICAgICA8L2ZpbGU+CiAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgd2l0aG91dCB2YWx1ZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0xJykpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCcxJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0xJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKCcnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiBlbXB0eSBzdHJpbmcnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMicpKS5jbGljaygpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnMicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMicpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBhbmQgY2hhbmdlIHVybCB3aGVuIG5nLWhyZWYgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0zJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b01hdGNoKC9cLzEyMyQvKTsKCiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTMnKSkuY2xpY2soKTsKCiAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBuYXZpZ2F0ZSBhd2F5IGZyb20gYW4gQW5ndWxhciBwYWdlLCBzbyB3ZSBuZWVkCiAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci4KCiAgICAgICAgICBicm93c2VyLndhaXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHsKICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cLzEyMyQvKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzEyMycpOwogICAgICAgIH0pOwoKICAgICAgICB4aXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiBlbXB0eSBzdHJpbmcgYW5kIG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzQnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBubyBocmVmIGJ1dCBuYW1lIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay01JykpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCc1Jyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay01JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKG51bGwpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIG9ubHkgY2hhbmdlIHVybCB3aGVuIG9ubHkgbmctaHJlZicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuY2xlYXIoKTsKICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLnNlbmRLZXlzKCc2Jyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay02JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b01hdGNoKC9cLzYkLyk7CgogICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay02JykpLmNsaWNrKCk7CgogICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgbmF2aWdhdGUgYXdheSBmcm9tIGFuIEFuZ3VsYXIgcGFnZSwgc28gd2UgbmVlZAogICAgICAgICAgLy8gdG8gdXNlIGJyb3dzZXIuZHJpdmVyIHRvIGdldCB0aGUgYmFzZSB3ZWJkcml2ZXIuCiAgICAgICAgICBicm93c2VyLndhaXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHsKICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cLzYkLyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwgNTAwMCwgJ3BhZ2Ugc2hvdWxkIG5hdmlnYXRlIHRvIC82Jyk7CiAgICAgICAgfSk7CiAgICAgIDwvZmlsZT4KICAgIDwvZXhhbXBsZT4KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1NyYwogKiBAcmVzdHJpY3QgQQogKiBAcHJpb3JpdHkgOTkKICoKICogQGRlc2NyaXB0aW9uCiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhIGBzcmNgIGF0dHJpYnV0ZSBkb2Vzbid0CiAqIHdvcmsgcmlnaHQ6IFRoZSBicm93c2VyIHdpbGwgZmV0Y2ggZnJvbSB0aGUgVVJMIHdpdGggdGhlIGxpdGVyYWwKICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlCiAqIGB7e2hhc2h9fWAuIFRoZSBgbmdTcmNgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLgogKgogKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OgogKiBgYGBodG1sCiAqIDxpbWcgc3JjPSJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0iLz4KICogYGBgCiAqCiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDoKICogYGBgaHRtbAogKiA8aW1nIG5nLXNyYz0iaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19Ii8+CiAqIGBgYAogKgogKiBAZWxlbWVudCBJTUcKICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdTcmMgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLgogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nU3Jjc2V0CiAqIEByZXN0cmljdCBBCiAqIEBwcmlvcml0eSA5OQogKgogKiBAZGVzY3JpcHRpb24KICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGEgYHNyY3NldGAgYXR0cmlidXRlIGRvZXNuJ3QKICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbAogKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGUKICogYHt7aGFzaH19YC4gVGhlIGBuZ1NyY3NldGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uCiAqCiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6CiAqIGBgYGh0bWwKICogPGltZyBzcmNzZXQ9Imh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSAyeCIvPgogKiBgYGAKICoKICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OgogKiBgYGBodG1sCiAqIDxpbWcgbmctc3Jjc2V0PSJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0gMngiLz4KICogYGBgCiAqCiAqIEBlbGVtZW50IElNRwogKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyY3NldCBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuCiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdEaXNhYmxlZAogKiBAcmVzdHJpY3QgQQogKiBAcHJpb3JpdHkgMTAwCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBXZSBzaG91bGRuJ3QgZG8gdGhpcywgYmVjYXVzZSBpdCB3aWxsIG1ha2UgdGhlIGJ1dHRvbiBlbmFibGVkIG9uIENocm9tZS9GaXJlZm94IGJ1dCBub3Qgb24gSUU4IGFuZCBvbGRlciBJRXM6CiAqIGBgYGh0bWwKICogPGRpdiBuZy1pbml0PSJzY29wZSA9IHsgaXNEaXNhYmxlZDogZmFsc2UgfSI+CiAqICA8YnV0dG9uIGRpc2FibGVkPSJ7e3Njb3BlLmlzRGlzYWJsZWR9fSI+RGlzYWJsZWQ8L2J1dHRvbj4KICogPC9kaXY+CiAqIGBgYAogKgogKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXMKICogc3VjaCBhcyBkaXNhYmxlZC4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKQogKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZQogKiBiaW5kaW5nIGluZm9ybWF0aW9uIHdvdWxkIGJlIGxvc3Qgd2hlbiB0aGUgYnJvd3NlciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUuCiAqIFRoZSBgbmdEaXNhYmxlZGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0gZm9yIHRoZSBgZGlzYWJsZWRgIGF0dHJpYnV0ZS4KICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXMKICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uCiAqCiAqIEBleGFtcGxlCiAgICA8ZXhhbXBsZT4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgQ2xpY2sgbWUgdG8gdG9nZ2xlOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIj48YnIvPgogICAgICAgIDxidXR0b24gbmctbW9kZWw9ImJ1dHRvbiIgbmctZGlzYWJsZWQ9ImNoZWNrZWQiPkJ1dHRvbjwvYnV0dG9uPgogICAgICA8L2ZpbGU+CiAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIGJ1dHRvbicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpKS50b0JlRmFsc3koKTsKICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkudG9CZVRydXRoeSgpOwogICAgICAgIH0pOwogICAgICA8L2ZpbGU+CiAgICA8L2V4YW1wbGU+CiAqCiAqIEBlbGVtZW50IElOUFVUCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdEaXNhYmxlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LAogKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSAiZGlzYWJsZWQiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nQ2hlY2tlZAogKiBAcmVzdHJpY3QgQQogKiBAcHJpb3JpdHkgMTAwCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXMKICogc3VjaCBhcyBjaGVja2VkLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pCiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlCiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS4KICogVGhlIGBuZ0NoZWNrZWRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZS4KICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXMKICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uCiAqIEBleGFtcGxlCiAgICA8ZXhhbXBsZT4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgQ2hlY2sgbWUgdG8gY2hlY2sgYm90aDogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0ibWFzdGVyIj48YnIvPgogICAgICAgIDxpbnB1dCBpZD0iY2hlY2tTbGF2ZSIgdHlwZT0iY2hlY2tib3giIG5nLWNoZWNrZWQ9Im1hc3RlciI+CiAgICAgIDwvZmlsZT4KICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBib3RoIGNoZWNrQm94ZXMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjaGVja1NsYXZlJykpLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKS50b0JlRmFsc3koKTsKICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ21hc3RlcicpKS5jbGljaygpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2NoZWNrU2xhdmUnKSkuZ2V0QXR0cmlidXRlKCdjaGVja2VkJykpLnRvQmVUcnV0aHkoKTsKICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKgogKiBAZWxlbWVudCBJTlBVVAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2hlY2tlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LAogKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSAiY2hlY2tlZCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnQKICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdSZWFkb25seQogKiBAcmVzdHJpY3QgQQogKiBAcHJpb3JpdHkgMTAwCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXMKICogc3VjaCBhcyByZWFkb25seS4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKQogKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZQogKiBiaW5kaW5nIGluZm9ybWF0aW9uIHdvdWxkIGJlIGxvc3Qgd2hlbiB0aGUgYnJvd3NlciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUuCiAqIFRoZSBgbmdSZWFkb25seWAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0gZm9yIHRoZSBgcmVhZG9ubHlgIGF0dHJpYnV0ZS4KICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXMKICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uCiAqIEBleGFtcGxlCiAgICA8ZXhhbXBsZT4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgQ2hlY2sgbWUgdG8gbWFrZSB0ZXh0IHJlYWRvbmx5OiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIj48YnIvPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1yZWFkb25seT0iY2hlY2tlZCIgdmFsdWU9IkknbSBBbmd1bGFyIi8+CiAgICAgIDwvZmlsZT4KICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgcmVhZG9ubHkgYXR0cicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT0idGV4dCJdJykpLmdldEF0dHJpYnV0ZSgncmVhZG9ubHknKSkudG9CZUZhbHN5KCk7CiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ1t0eXBlPSJ0ZXh0Il0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgfSk7CiAgICAgIDwvZmlsZT4KICAgIDwvZXhhbXBsZT4KICoKICogQGVsZW1lbnQgSU5QVVQKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1JlYWRvbmx5IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksCiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlICJyZWFkb25seSIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnQKICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdTZWxlY3RlZAogKiBAcmVzdHJpY3QgQQogKiBAcHJpb3JpdHkgMTAwCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXMKICogc3VjaCBhcyBzZWxlY3RlZC4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKQogKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZQogKiBiaW5kaW5nIGluZm9ybWF0aW9uIHdvdWxkIGJlIGxvc3Qgd2hlbiB0aGUgYnJvd3NlciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUuCiAqIFRoZSBgbmdTZWxlY3RlZGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0gZm9yIHRoZSBgc2VsZWN0ZWRgIGF0dHJpYnV0ZS4KICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXMKICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uCiAqCiAqIEBleGFtcGxlCiAgICA8ZXhhbXBsZT4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgQ2hlY2sgbWUgdG8gc2VsZWN0OiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJzZWxlY3RlZCI+PGJyLz4KICAgICAgICA8c2VsZWN0PgogICAgICAgICAgPG9wdGlvbj5IZWxsbyE8L29wdGlvbj4KICAgICAgICAgIDxvcHRpb24gaWQ9ImdyZWV0IiBuZy1zZWxlY3RlZD0ic2VsZWN0ZWQiPkdyZWV0aW5ncyE8L29wdGlvbj4KICAgICAgICA8L3NlbGVjdD4KICAgICAgPC9maWxlPgogICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgICBpdCgnc2hvdWxkIHNlbGVjdCBHcmVldGluZ3MhJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlRmFsc3koKTsKICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3NlbGVjdGVkJykpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgfSk7CiAgICAgIDwvZmlsZT4KICAgIDwvZXhhbXBsZT4KICoKICogQGVsZW1lbnQgT1BUSU9OCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTZWxlY3RlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LAogKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSAic2VsZWN0ZWQiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50CiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdPcGVuCiAqIEByZXN0cmljdCBBCiAqIEBwcmlvcml0eSAxMDAKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlcwogKiBzdWNoIGFzIG9wZW4uIChUaGVpciBwcmVzZW5jZSBtZWFucyB0cnVlIGFuZCB0aGVpciBhYnNlbmNlIG1lYW5zIGZhbHNlLikKICogSWYgd2UgcHV0IGFuIEFuZ3VsYXIgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uIGludG8gc3VjaCBhbiBhdHRyaWJ1dGUgdGhlbiB0aGUKICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLgogKiBUaGUgYG5nT3BlbmAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0gZm9yIHRoZSBgb3BlbmAgYXR0cmlidXRlLgogKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlcwogKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi4KICogQGV4YW1wbGUKICAgICA8ZXhhbXBsZT4KICAgICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgICBDaGVjayBtZSBjaGVjayBtdWx0aXBsZTogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0ib3BlbiI+PGJyLz4KICAgICAgICAgPGRldGFpbHMgaWQ9ImRldGFpbHMiIG5nLW9wZW49Im9wZW4iPgogICAgICAgICAgICA8c3VtbWFyeT5TaG93L0hpZGUgbWU8L3N1bW1hcnk+CiAgICAgICAgIDwvZGV0YWlscz4KICAgICAgIDwvZmlsZT4KICAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBvcGVuJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RldGFpbHMnKSkuZ2V0QXR0cmlidXRlKCdvcGVuJykpLnRvQmVGYWxzeSgpOwogICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ29wZW4nKSkuY2xpY2soKTsKICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZVRydXRoeSgpOwogICAgICAgICB9KTsKICAgICAgIDwvZmlsZT4KICAgICA8L2V4YW1wbGU+CiAqCiAqIEBlbGVtZW50IERFVEFJTFMKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ09wZW4gSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSwKICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgIm9wZW4iIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50CiAqLwoKdmFyIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzID0ge307CgoKLy8gYm9vbGVhbiBhdHRycyBhcmUgZXZhbHVhdGVkCmZvckVhY2goQk9PTEVBTl9BVFRSLCBmdW5jdGlvbihwcm9wTmFtZSwgYXR0ck5hbWUpIHsKICAvLyBiaW5kaW5nIHRvIG11bHRpcGxlIGlzIG5vdCBzdXBwb3J0ZWQKICBpZiAocHJvcE5hbWUgPT0gIm11bHRpcGxlIikgcmV0dXJuOwoKICB2YXIgbm9ybWFsaXplZCA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGF0dHJOYW1lKTsKICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tub3JtYWxpemVkXSA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdBJywKICAgICAgcHJpb3JpdHk6IDEwMCwKICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICBzY29wZS4kd2F0Y2goYXR0cltub3JtYWxpemVkXSwgZnVuY3Rpb24gbmdCb29sZWFuQXR0cldhdGNoQWN0aW9uKHZhbHVlKSB7CiAgICAgICAgICBhdHRyLiRzZXQoYXR0ck5hbWUsICEhdmFsdWUpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9OwogIH07Cn0pOwoKLy8gYWxpYXNlZCBpbnB1dCBhdHRycyBhcmUgZXZhbHVhdGVkCmZvckVhY2goQUxJQVNFRF9BVFRSLCBmdW5jdGlvbihodG1sQXR0ciwgbmdBdHRyKSB7CiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbmdBdHRyXSA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgcHJpb3JpdHk6IDEwMCwKICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICAvL3NwZWNpYWwgY2FzZSBuZ1BhdHRlcm4gd2hlbiBhIGxpdGVyYWwgcmVndWxhciBleHByZXNzaW9uIHZhbHVlCiAgICAgICAgLy9pcyB1c2VkIGFzIHRoZSBleHByZXNzaW9uICh0aGlzIHdheSB3ZSBkb24ndCBoYXZlIHRvIHdhdGNoIGFueXRoaW5nKS4KICAgICAgICBpZiAobmdBdHRyID09PSAibmdQYXR0ZXJuIiAmJiBhdHRyLm5nUGF0dGVybi5jaGFyQXQoMCkgPT0gIi8iKSB7CiAgICAgICAgICB2YXIgbWF0Y2ggPSBhdHRyLm5nUGF0dGVybi5tYXRjaChSRUdFWF9TVFJJTkdfUkVHRVhQKTsKICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICBhdHRyLiRzZXQoIm5nUGF0dGVybiIsIG5ldyBSZWdFeHAobWF0Y2hbMV0sIG1hdGNoWzJdKSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25nQXR0cl0sIGZ1bmN0aW9uIG5nQXR0ckFsaWFzV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgICAgIGF0dHIuJHNldChuZ0F0dHIsIHZhbHVlKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKICB9Owp9KTsKCi8vIG5nLXNyYywgbmctc3Jjc2V0LCBuZy1ocmVmIGFyZSBpbnRlcnBvbGF0ZWQKZm9yRWFjaChbJ3NyYycsICdzcmNzZXQnLCAnaHJlZiddLCBmdW5jdGlvbihhdHRyTmFtZSkgewogIHZhciBub3JtYWxpemVkID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgYXR0ck5hbWUpOwogIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBwcmlvcml0eTogOTksIC8vIGl0IG5lZWRzIHRvIHJ1biBhZnRlciB0aGUgYXR0cmlidXRlcyBhcmUgaW50ZXJwb2xhdGVkCiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgdmFyIHByb3BOYW1lID0gYXR0ck5hbWUsCiAgICAgICAgICAgIG5hbWUgPSBhdHRyTmFtZTsKCiAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnaHJlZicgJiYKICAgICAgICAgICAgdG9TdHJpbmcuY2FsbChlbGVtZW50LnByb3AoJ2hyZWYnKSkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScpIHsKICAgICAgICAgIG5hbWUgPSAneGxpbmtIcmVmJzsKICAgICAgICAgIGF0dHIuJGF0dHJbbmFtZV0gPSAneGxpbms6aHJlZic7CiAgICAgICAgICBwcm9wTmFtZSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICBhdHRyLiRvYnNlcnZlKG5vcm1hbGl6ZWQsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICBpZiAoIXZhbHVlKSB7CiAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2hyZWYnKSB7CiAgICAgICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIG51bGwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgdmFsdWUpOwoKICAgICAgICAgIC8vIG9uIElFLCBpZiAibmc6c3JjIiBkaXJlY3RpdmUgZGVjbGFyYXRpb24gaXMgdXNlZCBhbmQgInNyYyIgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3QKICAgICAgICAgIC8vIHRoZW4gY2FsbGluZyBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgJ2ZvbycpIGRvZXNuJ3QgZG8gYW55dGhpbmcsIHNvIHdlIG5lZWQKICAgICAgICAgIC8vIHRvIHNldCB0aGUgcHJvcGVydHkgYXMgd2VsbCB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC4KICAgICAgICAgIC8vIHdlIHVzZSBhdHRyW2F0dHJOYW1lXSB2YWx1ZSBzaW5jZSAkc2V0IGNhbiBzYW5pdGl6ZSB0aGUgdXJsLgogICAgICAgICAgaWYgKG1zaWUgJiYgcHJvcE5hbWUpIGVsZW1lbnQucHJvcChwcm9wTmFtZSwgYXR0cltuYW1lXSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CiAgfTsKfSk7CgovKiBnbG9iYWwgLW51bGxGb3JtQ3RybCwgLVNVQk1JVFRFRF9DTEFTUywgYWRkU2V0VmFsaWRpdHlNZXRob2Q6IHRydWUKICovCnZhciBudWxsRm9ybUN0cmwgPSB7CiAgJGFkZENvbnRyb2w6IG5vb3AsCiAgJCRyZW5hbWVDb250cm9sOiBudWxsRm9ybVJlbmFtZUNvbnRyb2wsCiAgJHJlbW92ZUNvbnRyb2w6IG5vb3AsCiAgJHNldFZhbGlkaXR5OiBub29wLAogICRzZXREaXJ0eTogbm9vcCwKICAkc2V0UHJpc3RpbmU6IG5vb3AsCiAgJHNldFN1Ym1pdHRlZDogbm9vcAp9LApTVUJNSVRURURfQ0xBU1MgPSAnbmctc3VibWl0dGVkJzsKCmZ1bmN0aW9uIG51bGxGb3JtUmVuYW1lQ29udHJvbChjb250cm9sLCBuYW1lKSB7CiAgY29udHJvbC4kbmFtZSA9IG5hbWU7Cn0KCi8qKgogKiBAbmdkb2MgdHlwZQogKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyCiAqCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybSB5ZXQuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0uCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgYWxsIG9mIHRoZSBjb250YWluaW5nIGZvcm1zIGFuZCBjb250cm9scyBhcmUgdmFsaWQuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgY29udGFpbmluZyBjb250cm9sIG9yIGZvcm0gaXMgaW52YWxpZC4KICogQHByb3BlcnR5IHtib29sZWFufSAkc3VibWl0dGVkIFRydWUgaWYgdXNlciBoYXMgc3VibWl0dGVkIHRoZSBmb3JtIGV2ZW4gaWYgaXRzIGludmFsaWQuCiAqCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgSXMgYW4gb2JqZWN0IGhhc2gsIGNvbnRhaW5pbmcgcmVmZXJlbmNlcyB0byBjb250cm9scyBvcgogKiAgZm9ybXMgd2l0aCBmYWlsaW5nIHZhbGlkYXRvcnMsIHdoZXJlOgogKgogKiAgLSBrZXlzIGFyZSB2YWxpZGF0aW9uIHRva2VucyAoZXJyb3IgbmFtZXMpLAogKiAgLSB2YWx1ZXMgYXJlIGFycmF5cyBvZiBjb250cm9scyBvciBmb3JtcyB0aGF0IGhhdmUgYSBmYWlsaW5nIHZhbGlkYXRvciBmb3IgZ2l2ZW4gZXJyb3IgbmFtZS4KICoKICogIEJ1aWx0LWluIHZhbGlkYXRpb24gdG9rZW5zOgogKgogKiAgLSBgZW1haWxgCiAqICAtIGBtYXhgCiAqICAtIGBtYXhsZW5ndGhgCiAqICAtIGBtaW5gCiAqICAtIGBtaW5sZW5ndGhgCiAqICAtIGBudW1iZXJgCiAqICAtIGBwYXR0ZXJuYAogKiAgLSBgcmVxdWlyZWRgCiAqICAtIGB1cmxgCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBgRm9ybUNvbnRyb2xsZXJgIGtlZXBzIHRyYWNrIG9mIGFsbCBpdHMgY29udHJvbHMgYW5kIG5lc3RlZCBmb3JtcyBhcyB3ZWxsIGFzIHRoZSBzdGF0ZSBvZiB0aGVtLAogKiBzdWNoIGFzIGJlaW5nIHZhbGlkL2ludmFsaWQgb3IgZGlydHkvcHJpc3RpbmUuCiAqCiAqIEVhY2gge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19IGRpcmVjdGl2ZSBjcmVhdGVzIGFuIGluc3RhbmNlCiAqIG9mIGBGb3JtQ29udHJvbGxlcmAuCiAqCiAqLwovL2Fza3MgZm9yICRzY29wZSB0byBmb29sIHRoZSBCQyBjb250cm9sbGVyIG1vZHVsZQpGb3JtQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCcsICckYXR0cnMnLCAnJHNjb3BlJywgJyRhbmltYXRlJywgJyRpbnRlcnBvbGF0ZSddOwpmdW5jdGlvbiBGb3JtQ29udHJvbGxlcihlbGVtZW50LCBhdHRycywgJHNjb3BlLCAkYW5pbWF0ZSwgJGludGVycG9sYXRlKSB7CiAgdmFyIGZvcm0gPSB0aGlzLAogICAgICBjb250cm9scyA9IFtdOwoKICB2YXIgcGFyZW50Rm9ybSA9IGZvcm0uJCRwYXJlbnRGb3JtID0gZWxlbWVudC5wYXJlbnQoKS5jb250cm9sbGVyKCdmb3JtJykgfHwgbnVsbEZvcm1DdHJsOwoKICAvLyBpbml0IHN0YXRlCiAgZm9ybS4kZXJyb3IgPSB7fTsKICBmb3JtLiQkc3VjY2VzcyA9IHt9OwogIGZvcm0uJHBlbmRpbmcgPSB1bmRlZmluZWQ7CiAgZm9ybS4kbmFtZSA9ICRpbnRlcnBvbGF0ZShhdHRycy5uYW1lIHx8IGF0dHJzLm5nRm9ybSB8fCAnJykoJHNjb3BlKTsKICBmb3JtLiRkaXJ0eSA9IGZhbHNlOwogIGZvcm0uJHByaXN0aW5lID0gdHJ1ZTsKICBmb3JtLiR2YWxpZCA9IHRydWU7CiAgZm9ybS4kaW52YWxpZCA9IGZhbHNlOwogIGZvcm0uJHN1Ym1pdHRlZCA9IGZhbHNlOwoKICBwYXJlbnRGb3JtLiRhZGRDb250cm9sKGZvcm0pOwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWUKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJvbGxiYWNrIGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC4KICAgKgogICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZQogICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyB0eXBpY2FsbHkgbmVlZGVkIGJ5IHRoZSByZXNldCBidXR0b24gb2YKICAgKiBhIGZvcm0gdGhhdCB1c2VzIGBuZy1tb2RlbC1vcHRpb25zYCB0byBwZW5kIHVwZGF0ZXMuCiAgICovCiAgZm9ybS4kcm9sbGJhY2tWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHsKICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHsKICAgICAgY29udHJvbC4kcm9sbGJhY2tWaWV3VmFsdWUoKTsKICAgIH0pOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRjb21taXRWaWV3VmFsdWUKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIENvbW1pdCBhbGwgZm9ybSBjb250cm9scyBwZW5kaW5nIHVwZGF0ZXMgdG8gdGhlIGAkbW9kZWxWYWx1ZWAuCiAgICoKICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmUKICAgKiBldmVudCBkZWZpbmVkIGluIGBuZy1tb2RlbC1vcHRpb25zYC4gVGhpcyBtZXRob2QgaXMgcmFyZWx5IG5lZWRlZCBhcyBgTmdNb2RlbENvbnRyb2xsZXJgCiAgICogdXN1YWxseSBoYW5kbGVzIGNhbGxpbmcgdGhpcyBpbiByZXNwb25zZSB0byBpbnB1dCBldmVudHMuCiAgICovCiAgZm9ybS4kY29tbWl0Vmlld1ZhbHVlID0gZnVuY3Rpb24oKSB7CiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7CiAgICAgIGNvbnRyb2wuJGNvbW1pdFZpZXdWYWx1ZSgpOwogICAgfSk7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGFkZENvbnRyb2wKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJlZ2lzdGVyIGEgY29udHJvbCB3aXRoIHRoZSBmb3JtLgogICAqCiAgICogSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5IHdoZW4gdGhleSBhcmUgbGlua2VkLgogICAqLwogIGZvcm0uJGFkZENvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sKSB7CiAgICAvLyBCcmVha2luZyBjaGFuZ2UgLSBiZWZvcmUsIGlucHV0cyB3aG9zZSBuYW1lIHdhcyAiaGFzT3duUHJvcGVydHkiIHdlcmUgcXVpZXRseSBpZ25vcmVkCiAgICAvLyBhbmQgbm90IGFkZGVkIHRvIHRoZSBzY29wZS4gIE5vdyB3ZSB0aHJvdyBhbiBlcnJvci4KICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KGNvbnRyb2wuJG5hbWUsICdpbnB1dCcpOwogICAgY29udHJvbHMucHVzaChjb250cm9sKTsKCiAgICBpZiAoY29udHJvbC4kbmFtZSkgewogICAgICBmb3JtW2NvbnRyb2wuJG5hbWVdID0gY29udHJvbDsKICAgIH0KICB9OwoKICAvLyBQcml2YXRlIEFQSTogcmVuYW1lIGEgZm9ybSBjb250cm9sCiAgZm9ybS4kJHJlbmFtZUNvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sLCBuZXdOYW1lKSB7CiAgICB2YXIgb2xkTmFtZSA9IGNvbnRyb2wuJG5hbWU7CgogICAgaWYgKGZvcm1bb2xkTmFtZV0gPT09IGNvbnRyb2wpIHsKICAgICAgZGVsZXRlIGZvcm1bb2xkTmFtZV07CiAgICB9CiAgICBmb3JtW25ld05hbWVdID0gY29udHJvbDsKICAgIGNvbnRyb2wuJG5hbWUgPSBuZXdOYW1lOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRyZW1vdmVDb250cm9sCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBEZXJlZ2lzdGVyIGEgY29udHJvbCBmcm9tIHRoZSBmb3JtLgogICAqCiAgICogSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5IHdoZW4gdGhleSBhcmUgZGVzdHJveWVkLgogICAqLwogIGZvcm0uJHJlbW92ZUNvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sKSB7CiAgICBpZiAoY29udHJvbC4kbmFtZSAmJiBmb3JtW2NvbnRyb2wuJG5hbWVdID09PSBjb250cm9sKSB7CiAgICAgIGRlbGV0ZSBmb3JtW2NvbnRyb2wuJG5hbWVdOwogICAgfQogICAgZm9yRWFjaChmb3JtLiRwZW5kaW5nLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkgewogICAgICBmb3JtLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTsKICAgIH0pOwogICAgZm9yRWFjaChmb3JtLiRlcnJvciwgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsKICAgICAgZm9ybS4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7CiAgICB9KTsKCiAgICBhcnJheVJlbW92ZShjb250cm9scywgY29udHJvbCk7CiAgfTsKCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRWYWxpZGl0eQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyB0aGUgdmFsaWRpdHkgb2YgYSBmb3JtIGNvbnRyb2wuCiAgICoKICAgKiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIHBhcmVudCBmb3Jtcy4KICAgKi8KICBhZGRTZXRWYWxpZGl0eU1ldGhvZCh7CiAgICBjdHJsOiB0aGlzLAogICAgJGVsZW1lbnQ6IGVsZW1lbnQsCiAgICBzZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGNvbnRyb2wpIHsKICAgICAgdmFyIGxpc3QgPSBvYmplY3RbcHJvcGVydHldOwogICAgICBpZiAoIWxpc3QpIHsKICAgICAgICBvYmplY3RbcHJvcGVydHldID0gW2NvbnRyb2xdOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZihjb250cm9sKTsKICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7CiAgICAgICAgICBsaXN0LnB1c2goY29udHJvbCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgdW5zZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGNvbnRyb2wpIHsKICAgICAgdmFyIGxpc3QgPSBvYmplY3RbcHJvcGVydHldOwogICAgICBpZiAoIWxpc3QpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgYXJyYXlSZW1vdmUobGlzdCwgY29udHJvbCk7CiAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkgewogICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldOwogICAgICB9CiAgICB9LAogICAgcGFyZW50Rm9ybTogcGFyZW50Rm9ybSwKICAgICRhbmltYXRlOiAkYW5pbWF0ZQogIH0pOwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0RGlydHkKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgdGhlIGZvcm0gdG8gYSBkaXJ0eSBzdGF0ZS4KICAgKgogICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gYWRkIHRoZSAnbmctZGlydHknIGNsYXNzIGFuZCBzZXQgdGhlIGZvcm0gdG8gYSBkaXJ0eQogICAqIHN0YXRlIChuZy1kaXJ0eSBjbGFzcykuIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gcGFyZW50IGZvcm1zLgogICAqLwogIGZvcm0uJHNldERpcnR5ID0gZnVuY3Rpb24oKSB7CiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBQUklTVElORV9DTEFTUyk7CiAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBESVJUWV9DTEFTUyk7CiAgICBmb3JtLiRkaXJ0eSA9IHRydWU7CiAgICBmb3JtLiRwcmlzdGluZSA9IGZhbHNlOwogICAgcGFyZW50Rm9ybS4kc2V0RGlydHkoKTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0UHJpc3RpbmUKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHByaXN0aW5lIHN0YXRlLgogICAqCiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBpdHMgcHJpc3RpbmUKICAgKiBzdGF0ZSAobmctcHJpc3RpbmUgY2xhc3MpLiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIGFsbCB0aGUgY29udHJvbHMgY29udGFpbmVkCiAgICogaW4gdGhpcyBmb3JtLgogICAqCiAgICogU2V0dGluZyBhIGZvcm0gYmFjayB0byBhIHByaXN0aW5lIHN0YXRlIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHdlIHdhbnQgdG8gJ3JldXNlJyBhIGZvcm0gYWZ0ZXIKICAgKiBzYXZpbmcgb3IgcmVzZXR0aW5nIGl0LgogICAqLwogIGZvcm0uJHNldFByaXN0aW5lID0gZnVuY3Rpb24gKCkgewogICAgJGFuaW1hdGUuc2V0Q2xhc3MoZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MsIERJUlRZX0NMQVNTICsgJyAnICsgU1VCTUlUVEVEX0NMQVNTKTsKICAgIGZvcm0uJGRpcnR5ID0gZmFsc2U7CiAgICBmb3JtLiRwcmlzdGluZSA9IHRydWU7CiAgICBmb3JtLiRzdWJtaXR0ZWQgPSBmYWxzZTsKICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHsKICAgICAgY29udHJvbC4kc2V0UHJpc3RpbmUoKTsKICAgIH0pOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRVbnRvdWNoZWQKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHVudG91Y2hlZCBzdGF0ZS4KICAgKgogICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSAnbmctdG91Y2hlZCcgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSBjb250cm9scyB0byB0aGVpcgogICAqIHVudG91Y2hlZCBzdGF0ZSAobmctdW50b3VjaGVkIGNsYXNzKS4KICAgKgogICAqIFNldHRpbmcgYSBmb3JtIGNvbnRyb2xzIGJhY2sgdG8gdGhlaXIgdW50b3VjaGVkIHN0YXRlIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHNldHRpbmcgdGhlIGZvcm0KICAgKiBiYWNrIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS4KICAgKi8KICBmb3JtLiRzZXRVbnRvdWNoZWQgPSBmdW5jdGlvbiAoKSB7CiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7CiAgICAgIGNvbnRyb2wuJHNldFVudG91Y2hlZCgpOwogICAgfSk7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFN1Ym1pdHRlZAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgc3VibWl0dGVkIHN0YXRlLgogICAqLwogIGZvcm0uJHNldFN1Ym1pdHRlZCA9IGZ1bmN0aW9uICgpIHsKICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsIFNVQk1JVFRFRF9DTEFTUyk7CiAgICBmb3JtLiRzdWJtaXR0ZWQgPSB0cnVlOwogICAgcGFyZW50Rm9ybS4kc2V0U3VibWl0dGVkKCk7CiAgfTsKfQoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdGb3JtCiAqIEByZXN0cmljdCBFQUMKICoKICogQGRlc2NyaXB0aW9uCiAqIE5lc3RhYmxlIGFsaWFzIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBgZm9ybWB9IGRpcmVjdGl2ZS4gSFRNTAogKiBkb2VzIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGZvcm0gZWxlbWVudHMuIEl0IGlzIHVzZWZ1bCB0byBuZXN0IGZvcm1zLCBmb3IgZXhhbXBsZSBpZiB0aGUgdmFsaWRpdHkgb2YgYQogKiBzdWItZ3JvdXAgb2YgY29udHJvbHMgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC4KICoKICogTm90ZTogdGhlIHB1cnBvc2Ugb2YgYG5nRm9ybWAgaXMgdG8gZ3JvdXAgY29udHJvbHMsCiAqIGJ1dCBub3QgdG8gYmUgYSByZXBsYWNlbWVudCBmb3IgdGhlIGA8Zm9ybT5gIHRhZyB3aXRoIGFsbCBvZiBpdHMgY2FwYWJpbGl0aWVzCiAqIChlLmcuIHBvc3RpbmcgdG8gdGhlIHNlcnZlciwgLi4uKS4KICoKICogQHBhcmFtIHtzdHJpbmc9fSBuZ0Zvcm18bmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50bwogKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLgogKgogKi8KCiAvKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBmb3JtCiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEaXJlY3RpdmUgdGhhdCBpbnN0YW50aWF0ZXMKICoge0BsaW5rIGZvcm0uRm9ybUNvbnRyb2xsZXIgRm9ybUNvbnRyb2xsZXJ9LgogKgogKiBJZiB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgaXMgcHVibGlzaGVkIG9udG8gdGhlIGN1cnJlbnQgc2NvcGUgdW5kZXIKICogdGhpcyBuYW1lLgogKgogKiAjIEFsaWFzOiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nRm9ybSBgbmdGb3JtYH0KICoKICogSW4gQW5ndWxhciBmb3JtcyBjYW4gYmUgbmVzdGVkLiBUaGlzIG1lYW5zIHRoYXQgdGhlIG91dGVyIGZvcm0gaXMgdmFsaWQgd2hlbiBhbGwgb2YgdGhlIGNoaWxkCiAqIGZvcm1zIGFyZSB2YWxpZCBhcyB3ZWxsLiBIb3dldmVyLCBicm93c2VycyBkbyBub3QgYWxsb3cgbmVzdGluZyBvZiBgPGZvcm0+YCBlbGVtZW50cywgc28KICogQW5ndWxhciBwcm92aWRlcyB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGRpcmVjdGl2ZSB3aGljaCBiZWhhdmVzIGlkZW50aWNhbGx5IHRvCiAqIGA8Zm9ybT5gIGJ1dCBjYW4gYmUgbmVzdGVkLiAgVGhpcyBhbGxvd3MgeW91IHRvIGhhdmUgbmVzdGVkIGZvcm1zLCB3aGljaCBpcyB2ZXJ5IHVzZWZ1bCB3aGVuCiAqIHVzaW5nIEFuZ3VsYXIgdmFsaWRhdGlvbiBkaXJlY3RpdmVzIGluIGZvcm1zIHRoYXQgYXJlIGR5bmFtaWNhbGx5IGdlbmVyYXRlZCB1c2luZyB0aGUKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSBkaXJlY3RpdmUuIFNpbmNlIHlvdSBjYW5ub3QgZHluYW1pY2FsbHkgZ2VuZXJhdGUgdGhlIGBuYW1lYAogKiBhdHRyaWJ1dGUgb2YgaW5wdXQgZWxlbWVudHMgdXNpbmcgaW50ZXJwb2xhdGlvbiwgeW91IGhhdmUgdG8gd3JhcCBlYWNoIHNldCBvZiByZXBlYXRlZCBpbnB1dHMgaW4gYW4KICogYG5nRm9ybWAgZGlyZWN0aXZlIGFuZCBuZXN0IHRoZXNlIGluIGFuIG91dGVyIGBmb3JtYCBlbGVtZW50LgogKgogKgogKiAjIENTUyBjbGFzc2VzCiAqICAtIGBuZy12YWxpZGAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHZhbGlkLgogKiAgLSBgbmctaW52YWxpZGAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIGludmFsaWQuCiAqICAtIGBuZy1wcmlzdGluZWAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHByaXN0aW5lLgogKiAgLSBgbmctZGlydHlgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBkaXJ0eS4KICogIC0gYG5nLXN1Ym1pdHRlZGAgaXMgc2V0IGlmIHRoZSBmb3JtIHdhcyBzdWJtaXR0ZWQuCiAqCiAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLgogKgogKgogKiAjIFN1Ym1pdHRpbmcgYSBmb3JtIGFuZCBwcmV2ZW50aW5nIHRoZSBkZWZhdWx0IGFjdGlvbgogKgogKiBTaW5jZSB0aGUgcm9sZSBvZiBmb3JtcyBpbiBjbGllbnQtc2lkZSBBbmd1bGFyIGFwcGxpY2F0aW9ucyBpcyBkaWZmZXJlbnQgdGhhbiBpbiBjbGFzc2ljYWwKICogcm91bmR0cmlwIGFwcHMsIGl0IGlzIGRlc2lyYWJsZSBmb3IgdGhlIGJyb3dzZXIgbm90IHRvIHRyYW5zbGF0ZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGludG8gYSBmdWxsCiAqIHBhZ2UgcmVsb2FkIHRoYXQgc2VuZHMgdGhlIGRhdGEgdG8gdGhlIHNlcnZlci4gSW5zdGVhZCBzb21lIGphdmFzY3JpcHQgbG9naWMgc2hvdWxkIGJlIHRyaWdnZXJlZAogKiB0byBoYW5kbGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbiBhbiBhcHBsaWNhdGlvbi1zcGVjaWZpYyB3YXkuCiAqCiAqIEZvciB0aGlzIHJlYXNvbiwgQW5ndWxhciBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKGZvcm0gc3VibWlzc2lvbiB0byB0aGUgc2VydmVyKSB1bmxlc3MgdGhlCiAqIGA8Zm9ybT5gIGVsZW1lbnQgaGFzIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBzcGVjaWZpZWQuCiAqCiAqIFlvdSBjYW4gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHR3byB3YXlzIHRvIHNwZWNpZnkgd2hhdCBqYXZhc2NyaXB0IG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4KICogYSBmb3JtIGlzIHN1Ym1pdHRlZDoKICoKICogLSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fSBkaXJlY3RpdmUgb24gdGhlIGZvcm0gZWxlbWVudAogKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSBkaXJlY3RpdmUgb24gdGhlIGZpcnN0CiAgKiAgYnV0dG9uIG9yIGlucHV0IGZpZWxkIG9mIHR5cGUgc3VibWl0IChpbnB1dFt0eXBlPXN1Ym1pdF0pCiAqCiAqIFRvIHByZXZlbnQgZG91YmxlIGV4ZWN1dGlvbiBvZiB0aGUgaGFuZGxlciwgdXNlIG9ubHkgb25lIG9mIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fQogKiBvciB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlcy4KICogVGhpcyBpcyBiZWNhdXNlIG9mIHRoZSBmb2xsb3dpbmcgZm9ybSBzdWJtaXNzaW9uIHJ1bGVzIGluIHRoZSBIVE1MIHNwZWNpZmljYXRpb246CiAqCiAqIC0gSWYgYSBmb3JtIGhhcyBvbmx5IG9uZSBpbnB1dCBmaWVsZCB0aGVuIGhpdHRpbmcgZW50ZXIgaW4gdGhpcyBmaWVsZCB0cmlnZ2VycyBmb3JtIHN1Ym1pdAogKiAoYG5nU3VibWl0YCkKICogLSBpZiBhIGZvcm0gaGFzIDIrIGlucHV0IGZpZWxkcyBhbmQgbm8gYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlbiBoaXR0aW5nIGVudGVyCiAqIGRvZXNuJ3QgdHJpZ2dlciBzdWJtaXQKICogLSBpZiBhIGZvcm0gaGFzIG9uZSBvciBtb3JlIGlucHV0IGZpZWxkcyBhbmQgb25lIG9yIG1vcmUgYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlbgogKiBoaXR0aW5nIGVudGVyIGluIGFueSBvZiB0aGUgaW5wdXQgZmllbGRzIHdpbGwgdHJpZ2dlciB0aGUgY2xpY2sgaGFuZGxlciBvbiB0aGUgKmZpcnN0KiBidXR0b24gb3IKICogaW5wdXRbdHlwZT1zdWJtaXRdIChgbmdDbGlja2ApICphbmQqIGEgc3VibWl0IGhhbmRsZXIgb24gdGhlIGVuY2xvc2luZyBmb3JtIChgbmdTdWJtaXRgKQogKgogKiBBbnkgcGVuZGluZyBgbmdNb2RlbE9wdGlvbnNgIGNoYW5nZXMgd2lsbCB0YWtlIHBsYWNlIGltbWVkaWF0ZWx5IHdoZW4gYW4gZW5jbG9zaW5nIGZvcm0gaXMKICogc3VibWl0dGVkLiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGAKICogdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuCiAqCiAqICMjIEFuaW1hdGlvbiBIb29rcwogKgogKiBBbmltYXRpb25zIGluIG5nRm9ybSBhcmUgdHJpZ2dlcmVkIHdoZW4gYW55IG9mIHRoZSBhc3NvY2lhdGVkIENTUyBjbGFzc2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZC4KICogVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCwgYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnkKICogb3RoZXIgdmFsaWRhdGlvbnMgdGhhdCBhcmUgcGVyZm9ybWVkIHdpdGhpbiB0aGUgZm9ybS4gQW5pbWF0aW9ucyBpbiBuZ0Zvcm0gYXJlIHNpbWlsYXIgdG8gaG93CiAqIHRoZXkgd29yayBpbiBuZ0NsYXNzIGFuZCBhbmltYXRpb25zIGNhbiBiZSBob29rZWQgaW50byB1c2luZyBDU1MgdHJhbnNpdGlvbnMsIGtleWZyYW1lcyBhcyB3ZWxsCiAqIGFzIEpTIGFuaW1hdGlvbnMuCiAqCiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBhIHNpbXBsZSB3YXkgdG8gdXRpbGl6ZSBDU1MgdHJhbnNpdGlvbnMgdG8gc3R5bGUgYSBmb3JtIGVsZW1lbnQKICogdGhhdCBoYXMgYmVlbiByZW5kZXJlZCBhcyBpbnZhbGlkIGFmdGVyIGl0IGhhcyBiZWVuIHZhbGlkYXRlZDoKICoKICogPHByZT4KICogLy9iZSBzdXJlIHRvIGluY2x1ZGUgbmdBbmltYXRlIGFzIGEgbW9kdWxlIHRvIGhvb2sgaW50byBtb3JlCiAqIC8vYWR2YW5jZWQgYW5pbWF0aW9ucwogKiAubXktZm9ybSB7CiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7CiAqICAgYmFja2dyb3VuZDogd2hpdGU7CiAqIH0KICogLm15LWZvcm0ubmctaW52YWxpZCB7CiAqICAgYmFja2dyb3VuZDogcmVkOwogKiAgIGNvbG9yOndoaXRlOwogKiB9CiAqIDwvcHJlPgogKgogKiBAZXhhbXBsZQogICAgPGV4YW1wbGUgZGVwcz0iYW5ndWxhci1hbmltYXRlLmpzIiBhbmltYXRpb25zPSJ0cnVlIiBmaXhCYXNlPSJ0cnVlIiBtb2R1bGU9ImZvcm1FeGFtcGxlIj4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZm9ybUV4YW1wbGUnLCBbXSkKICAgICAgICAgICAuY29udHJvbGxlcignRm9ybUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgICAgJHNjb3BlLnVzZXJUeXBlID0gJ2d1ZXN0JzsKICAgICAgICAgICB9XSk7CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxzdHlsZT4KICAgICAgICAubXktZm9ybSB7CiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzOwogICAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7CiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICAgICAgICB9CiAgICAgICAgLm15LWZvcm0ubmctaW52YWxpZCB7CiAgICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7CiAgICAgICAgfQogICAgICAgPC9zdHlsZT4KICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iRm9ybUNvbnRyb2xsZXIiIGNsYXNzPSJteS1mb3JtIj4KICAgICAgICAgdXNlclR5cGU6IDxpbnB1dCBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InVzZXJUeXBlIiByZXF1aXJlZD4KICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj5SZXF1aXJlZCE8L3NwYW4+PGJyPgogICAgICAgICA8dHQ+dXNlclR5cGUgPSB7e3VzZXJUeXBlfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnI+CiAgICAgICAgPC9mb3JtPgogICAgICA8L2ZpbGU+CiAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTsKICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTsKCiAgICAgICAgICBleHBlY3QodXNlclR5cGUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2d1ZXN0Jyk7CiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgdXNlclR5cGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXJUeXBlJykpOwogICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpOwogICAgICAgICAgdmFyIHVzZXJJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXJUeXBlJykpOwoKICAgICAgICAgIHVzZXJJbnB1dC5jbGVhcigpOwogICAgICAgICAgdXNlcklucHV0LnNlbmRLZXlzKCcnKTsKCiAgICAgICAgICBleHBlY3QodXNlclR5cGUuZ2V0VGV4dCgpKS50b0VxdWFsKCd1c2VyVHlwZSA9Jyk7CiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAgICAgICAgfSk7CiAgICAgIDwvZmlsZT4KICAgIDwvZXhhbXBsZT4KICoKICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvCiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuCiAqLwp2YXIgZm9ybURpcmVjdGl2ZUZhY3RvcnkgPSBmdW5jdGlvbihpc05nRm9ybSkgewogIHJldHVybiBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHsKICAgIHZhciBmb3JtRGlyZWN0aXZlID0gewogICAgICBuYW1lOiAnZm9ybScsCiAgICAgIHJlc3RyaWN0OiBpc05nRm9ybSA/ICdFQUMnIDogJ0UnLAogICAgICBjb250cm9sbGVyOiBGb3JtQ29udHJvbGxlciwKICAgICAgY29tcGlsZTogZnVuY3Rpb24gbmdGb3JtQ29tcGlsZShmb3JtRWxlbWVudCkgewogICAgICAgIC8vIFNldHVwIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbnRyb2wKICAgICAgICBmb3JtRWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoVkFMSURfQ0xBU1MpOwoKICAgICAgICByZXR1cm4gewogICAgICAgICAgcHJlOiBmdW5jdGlvbiBuZ0Zvcm1QcmVMaW5rKHNjb3BlLCBmb3JtRWxlbWVudCwgYXR0ciwgY29udHJvbGxlcikgewogICAgICAgICAgICAvLyBpZiBgYWN0aW9uYCBhdHRyIGlzIG5vdCBwcmVzZW50IG9uIHRoZSBmb3JtLCBwcmV2ZW50IHRoZSBkZWZhdWx0IGFjdGlvbiAoc3VibWlzc2lvbikKICAgICAgICAgICAgaWYgKCEoJ2FjdGlvbicgaW4gYXR0cikpIHsKICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1c2UganEgZXZlbnRzIGJlY2F1c2UgaWYgYSBmb3JtIGlzIGRlc3Ryb3llZCBkdXJpbmcgc3VibWlzc2lvbiB0aGUgZGVmYXVsdAogICAgICAgICAgICAgIC8vIGFjdGlvbiBpcyBub3QgcHJldmVudGVkLiBzZWUgIzEyMzgKICAgICAgICAgICAgICAvLwogICAgICAgICAgICAgIC8vIElFIDkgaXMgbm90IGFmZmVjdGVkIGJlY2F1c2UgaXQgZG9lc24ndCBmaXJlIGEgc3VibWl0IGV2ZW50IGFuZCB0cnkgdG8gZG8gYSBmdWxsCiAgICAgICAgICAgICAgLy8gcGFnZSByZWxvYWQgaWYgdGhlIGZvcm0gd2FzIGRlc3Ryb3llZCBieSBzdWJtaXNzaW9uIG9mIHRoZSBmb3JtIHZpYSBhIGNsaWNrIGhhbmRsZXIKICAgICAgICAgICAgICAvLyBvbiBhIGJ1dHRvbiBpbiB0aGUgZm9ybS4gTG9va3MgbGlrZSBhbiBJRTkgc3BlY2lmaWMgYnVnLgogICAgICAgICAgICAgIHZhciBoYW5kbGVGb3JtU3VibWlzc2lvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuJGNvbW1pdFZpZXdWYWx1ZSgpOwogICAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRTdWJtaXR0ZWQoKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0CiAgICAgICAgICAgICAgICAgID8gZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICA6IGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7IC8vIElFCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pOwoKICAgICAgICAgICAgICAvLyB1bnJlZ2lzdGVyIHRoZSBwcmV2ZW50RGVmYXVsdCBsaXN0ZW5lciBzbyB0aGF0IHdlIGRvbid0IG5vdCBsZWFrIG1lbW9yeSBidXQgaW4gYQogICAgICAgICAgICAgIC8vIHdheSB0aGF0IHdpbGwgYWNoaWV2ZSB0aGUgcHJldmVudGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24uCiAgICAgICAgICAgICAgZm9ybUVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pOwogICAgICAgICAgICAgICAgfSwgMCwgZmFsc2UpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcGFyZW50Rm9ybUN0cmwgPSBjb250cm9sbGVyLiQkcGFyZW50Rm9ybSwKICAgICAgICAgICAgICAgIGFsaWFzID0gY29udHJvbGxlci4kbmFtZTsKCiAgICAgICAgICAgIGlmIChhbGlhcykgewogICAgICAgICAgICAgIHNldHRlcihzY29wZSwgYWxpYXMsIGNvbnRyb2xsZXIsIGFsaWFzKTsKICAgICAgICAgICAgICBhdHRyLiRvYnNlcnZlKGF0dHIubmFtZSA/ICduYW1lJyA6ICduZ0Zvcm0nLCBmdW5jdGlvbihuZXdWYWx1ZSkgewogICAgICAgICAgICAgICAgaWYgKGFsaWFzID09PSBuZXdWYWx1ZSkgcmV0dXJuOwogICAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBhbGlhcywgdW5kZWZpbmVkLCBhbGlhcyk7CiAgICAgICAgICAgICAgICBhbGlhcyA9IG5ld1ZhbHVlOwogICAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBhbGlhcywgY29udHJvbGxlciwgYWxpYXMpOwogICAgICAgICAgICAgICAgcGFyZW50Rm9ybUN0cmwuJCRyZW5hbWVDb250cm9sKGNvbnRyb2xsZXIsIGFsaWFzKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBwYXJlbnRGb3JtQ3RybC4kcmVtb3ZlQ29udHJvbChjb250cm9sbGVyKTsKICAgICAgICAgICAgICBpZiAoYWxpYXMpIHsKICAgICAgICAgICAgICAgIHNldHRlcihzY29wZSwgYWxpYXMsIHVuZGVmaW5lZCwgYWxpYXMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBleHRlbmQoY29udHJvbGxlciwgbnVsbEZvcm1DdHJsKTsgLy9zdG9wIHByb3BhZ2F0aW5nIGNoaWxkIGRlc3RydWN0aW9uIGhhbmRsZXJzIHVwd2FyZHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gZm9ybURpcmVjdGl2ZTsKICB9XTsKfTsKCnZhciBmb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkoKTsKdmFyIG5nRm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KHRydWUpOwoKLyogZ2xvYmFsIFZBTElEX0NMQVNTOiB0cnVlLAogIElOVkFMSURfQ0xBU1M6IHRydWUsCiAgUFJJU1RJTkVfQ0xBU1M6IHRydWUsCiAgRElSVFlfQ0xBU1M6IHRydWUsCiAgVU5UT1VDSEVEX0NMQVNTOiB0cnVlLAogIFRPVUNIRURfQ0xBU1M6IHRydWUsCiovCgovLyBSZWdleCBjb2RlIGlzIG9idGFpbmVkIGZyb20gU086IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxNDMwNzAvamF2YXNjcmlwdC1yZWdleC1pc28tZGF0ZXRpbWUjYW5zd2VyLTMxNDMyMzEKdmFyIElTT19EQVRFX1JFR0VYUCA9IC9cZHs0fS1bMDFdXGQtWzAtM11cZFRbMC0yXVxkOlswLTVdXGQ6WzAtNV1cZFwuXGQrKFsrLV1bMC0yXVxkOlswLTVdXGR8WikvOwp2YXIgVVJMX1JFR0VYUCA9IC9eKGZ0cHxodHRwfGh0dHBzKTpcL1wvKFx3Kzp7MCwxfVx3KkApPyhcUyspKDpbMC05XSspPyhcL3xcLyhbXHcjITouPys9JiVAIVwtXC9dKSk/JC87CnZhciBFTUFJTF9SRUdFWFAgPSAvXlthLXowLTkhIyQlJicqK1wvPT9eX2B7fH1+Li1dK0BbYS16MC05XShbYS16MC05LV0qW2EtejAtOV0pPyhcLlthLXowLTldKFthLXowLTktXSpbYS16MC05XSk/KSokL2k7CnZhciBOVU1CRVJfUkVHRVhQID0gL15ccyooXC18XCspPyhcZCt8KFxkKihcLlxkKikpKVxzKiQvOwp2YXIgREFURV9SRUdFWFAgPSAvXihcZHs0fSktKFxkezJ9KS0oXGR7Mn0pJC87CnZhciBEQVRFVElNRUxPQ0FMX1JFR0VYUCA9IC9eKFxkezR9KS0oXGRcZCktKFxkXGQpVChcZFxkKTooXGRcZCkoPzo6KFxkXGQpKFwuXGR7MSwzfSk/KT8kLzsKdmFyIFdFRUtfUkVHRVhQID0gL14oXGR7NH0pLVcoXGRcZCkkLzsKdmFyIE1PTlRIX1JFR0VYUCA9IC9eKFxkezR9KS0oXGRcZCkkLzsKdmFyIFRJTUVfUkVHRVhQID0gL14oXGRcZCk6KFxkXGQpKD86OihcZFxkKShcLlxkezEsM30pPyk/JC87CnZhciBERUZBVUxUX1JFR0VYUCA9IC8oXHMrfF4pZGVmYXVsdChccyt8JCkvOwoKdmFyICRuZ01vZGVsTWluRXJyID0gbmV3IG1pbkVycignbmdNb2RlbCcpOwoKdmFyIGlucHV0VHlwZSA9IHsKCiAgLyoqCiAgICogQG5nZG9jIGlucHV0CiAgICogQG5hbWUgaW5wdXRbdGV4dF0KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFN0YW5kYXJkIEhUTUwgdGV4dCBpbnB1dCB3aXRoIGFuZ3VsYXIgZGF0YSBiaW5kaW5nLCBpbmhlcml0ZWQgYnkgbW9zdCBvZiB0aGUgYGlucHV0YCBlbGVtZW50cy4KICAgKgogICAqICpOT1RFKiBOb3QgZXZlcnkgZmVhdHVyZSBvZmZlcmVkIGlzIGF2YWlsYWJsZSBmb3IgYWxsIGlucHV0IHR5cGVzLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogICAqICAgIG1pbmxlbmd0aC4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuCiAgICogICAgbWF4bGVuZ3RoLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yCiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC4KICAgKiAgICBUaGlzIHBhcmFtZXRlciBpcyBpZ25vcmVkIGZvciBpbnB1dFt0eXBlPXBhc3N3b3JkXSBjb250cm9scywgd2hpY2ggd2lsbCBuZXZlciB0cmltIHRoZQogICAqICAgIGlucHV0LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGV4YW1wbGUgbmFtZT0idGV4dC1pbnB1dC1kaXJlY3RpdmUiIG1vZHVsZT0idGV4dElucHV0RXhhbXBsZSI+CiAgICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3RleHRJbnB1dEV4YW1wbGUnLCBbXSkKICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ2d1ZXN0JzsKICAgICAgICAgICAgICAgJHNjb3BlLndvcmQgPSAvXlxzKlx3KlxzKiQvOwogICAgICAgICAgICAgfV0pOwogICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgICAgU2luZ2xlIHdvcmQ6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZy1wYXR0ZXJuPSJ3b3JkIiByZXF1aXJlZCBuZy10cmltPSJmYWxzZSI+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucGF0dGVybiI+CiAgICAgICAgICAgICBTaW5nbGUgd29yZCBvbmx5ITwvc3Bhbj4KCiAgICAgICAgICAgPHR0PnRleHQgPSB7e3RleHR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3RleHQnKSk7CiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7CiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpOwoKICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTsKICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTsKICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpOwoKICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0VxdWFsKCd0ZXh0ID0nKTsKICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG11bHRpIHdvcmQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTsKICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2hlbGxvIHdvcmxkJyk7CgogICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2ZpbGU+CiAgICAgIDwvZXhhbXBsZT4KICAgKi8KICAndGV4dCc6IHRleHRJbnB1dFR5cGUsCgogICAgLyoqCiAgICAgKiBAbmdkb2MgaW5wdXQKICAgICAqIEBuYW1lIGlucHV0W2RhdGVdCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBJbnB1dCB3aXRoIGRhdGUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0CiAgICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDEKICAgICAqIGRhdGUgZm9ybWF0ICh5eXl5LU1NLWRkKSwgZm9yIGV4YW1wbGU6IGAyMDA5LTAxLTA2YC4gU2luY2UgbWFueQogICAgICogbW9kZXJuIGJyb3dzZXJzIGRvIG5vdCB5ZXQgc3VwcG9ydCB0aGlzIGlucHV0IHR5cGUsIGl0IGlzIGltcG9ydGFudCB0byBwcm92aWRlIGN1ZXMgdG8gdXNlcnMgb24gdGhlCiAgICAgKiBleHBlY3RlZCBpbnB1dCBmb3JtYXQgdmlhIGEgcGxhY2Vob2xkZXIgb3IgbGFiZWwuIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LgogICAgICoKICAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmcKICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuIFRoaXMgbXVzdCBiZSBhCiAgICAgKiB2YWxpZCBJU08gZGF0ZSBzdHJpbmcgKHl5eXktTU0tZGQpLgogICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLiBUaGlzIG11c3QgYmUKICAgICAqIGEgdmFsaWQgSVNPIGRhdGUgc3RyaW5nICh5eXl5LU1NLWRkKS4KICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLgogICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgPGV4YW1wbGUgbmFtZT0iZGF0ZS1pbnB1dC1kaXJlY3RpdmUiIG1vZHVsZT0iZGF0ZUlucHV0RXhhbXBsZSI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8c2NyaXB0PgogICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2RhdGVJbnB1dEV4YW1wbGUnLCBbXSkKICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSBuZXcgRGF0ZSgyMDEzLCA5LCAyMik7CiAgICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybCI+CiAgICAgICAgICBQaWNrIGEgZGF0ZSBpbiAyMDEzOgogICAgICAgICAgPGlucHV0IHR5cGU9ImRhdGUiIGlkPSJleGFtcGxlSW5wdXQiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idmFsdWUiCiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9Inl5eXktTU0tZGQiIG1pbj0iMjAxMy0wMS0wMSIgbWF4PSIyMDEzLTEyLTMxIiByZXF1aXJlZCAvPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IuZGF0ZSI+CiAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+CiAgICAgICAgICAgPHR0PnZhbHVlID0ge3t2YWx1ZSB8IGRhdGU6ICJ5eXl5LU1NLWRkIn19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICAgICAgIDwvZm9ybT4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCd2YWx1ZSB8IGRhdGU6ICJ5eXl5LU1NLWRkIicpKTsKICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7CiAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSk7CgogICAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0CiAgICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9scwogICAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS4KICAgICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHsKICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uCiAgICAgICAgICB2YXIgc2NyID0gInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7ICIgKwogICAgICAgICAgImlwdC52YWx1ZSA9ICciICsgdmFsICsgIic7IiArCiAgICAgICAgICAiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnIiArIHZhbCArICInKTsgfSk7IjsKICAgICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpOwogICAgICAgIH0KCiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtMTAtMjInKTsKICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBzZXRJbnB1dCgnJyk7CiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7CiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHNldElucHV0KCcyMDE1LTAxLTAxJyk7CiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpOwogICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTsKICAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgICAgPC9leGFtcGxlPgogICAgICovCiAgJ2RhdGUnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRlJywgREFURV9SRUdFWFAsCiAgICAgICAgIGNyZWF0ZURhdGVQYXJzZXIoREFURV9SRUdFWFAsIFsneXl5eScsICdNTScsICdkZCddKSwKICAgICAgICAgJ3l5eXktTU0tZGQnKSwKCiAgIC8qKgogICAgKiBAbmdkb2MgaW5wdXQKICAgICogQG5hbWUgaW5wdXRbZGF0ZVRpbWVMb2NhbF0KICAgICoKICAgICogQGRlc2NyaXB0aW9uCiAgICAqIElucHV0IHdpdGggZGF0ZXRpbWUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0CiAgICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDEKICAgICogbG9jYWwgZGF0ZXRpbWUgZm9ybWF0ICh5eXl5LU1NLWRkVEhIOm1tOnNzKSwgZm9yIGV4YW1wbGU6IGAyMDEwLTEyLTI4VDE0OjU3OjAwYC4gVGhlIG1vZGVsIG11c3QgYmUgYSBEYXRlIG9iamVjdC4KICAgICoKICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZwogICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuCiAgICAqCiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuIFRoaXMgbXVzdCBiZSBhCiAgICAqIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLgogICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdCBiZQogICAgKiBhIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLgogICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICAqCiAgICAqIEBleGFtcGxlCiAgICA8ZXhhbXBsZSBuYW1lPSJkYXRldGltZWxvY2FsLWlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJkYXRlRXhhbXBsZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPHNjcmlwdD4KICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZGF0ZUV4YW1wbGUnLCBbXSkKICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICRzY29wZS52YWx1ZSA9IG5ldyBEYXRlKDIwMTAsIDExLCAyOCwgMTQsIDU3KTsKICAgICAgICAgIH1dKTsKICAgICAgPC9zY3JpcHQ+CiAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmwiPgogICAgICAgIFBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzoKICAgICAgICA8aW5wdXQgdHlwZT0iZGF0ZXRpbWUtbG9jYWwiIGlkPSJleGFtcGxlSW5wdXQiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idmFsdWUiCiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJ5eXl5LU1NLWRkVEhIOm1tOnNzIiBtaW49IjIwMDEtMDEtMDFUMDA6MDA6MDAiIG1heD0iMjAxMy0xMi0zMVQwMDowMDowMCIgcmVxdWlyZWQgLz4KICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWQiPgogICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLmRhdGV0aW1lbG9jYWwiPgogICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj4KICAgICAgICA8dHQ+dmFsdWUgPSB7e3ZhbHVlIHwgZGF0ZTogInl5eXktTU0tZGRUSEg6bW06c3MifX08L3R0Pjxici8+CiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICA8L2Zvcm0+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCd2YWx1ZSB8IGRhdGU6ICJ5eXl5LU1NLWRkVEhIOm1tOnNzIicpKTsKICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpOwogICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKTsKCiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0CiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHMKICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuCiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkgewogICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uCiAgICAgICAgdmFyIHNjciA9ICJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyAiICsKICAgICAgICAiaXB0LnZhbHVlID0gJyIgKyB2YWwgKyAiJzsiICsKICAgICAgICAiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnIiArIHZhbCArICInKTsgfSk7IjsKICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTsKICAgICAgfQoKICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEwLTEyLTI4VDE0OjU3OjAwJyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpOwogICAgICB9KTsKCiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgIHNldElucHV0KCcnKTsKICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTsKICAgICAgfSk7CgogICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHsKICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMVQyMzo1OTowMCcpOwogICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgICA8L2V4YW1wbGU+CiAgICAqLwogICdkYXRldGltZS1sb2NhbCc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ2RhdGV0aW1lbG9jYWwnLCBEQVRFVElNRUxPQ0FMX1JFR0VYUCwKICAgICAgY3JlYXRlRGF0ZVBhcnNlcihEQVRFVElNRUxPQ0FMX1JFR0VYUCwgWyd5eXl5JywgJ01NJywgJ2RkJywgJ0hIJywgJ21tJywgJ3NzJywgJ3NzcyddKSwKICAgICAgJ3l5eXktTU0tZGRUSEg6bW06c3Muc3NzJyksCgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dAogICAqIEBuYW1lIGlucHV0W3RpbWVdCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBJbnB1dCB3aXRoIHRpbWUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0CiAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMQogICAqIGxvY2FsIHRpbWUgZm9ybWF0IChISDptbTpzcyksIGZvciBleGFtcGxlOiBgMTQ6NTc6MDBgLiBNb2RlbCBtdXN0IGJlIGEgRGF0ZSBvYmplY3QuIFRoaXMgYmluZGluZyB3aWxsIGFsd2F5cyBvdXRwdXQgYQogICAqIERhdGUgb2JqZWN0IHRvIHRoZSBtb2RlbCBvZiBKYW51YXJ5IDEsIDE5NzAsIG9yIGxvY2FsIGRhdGUgYG5ldyBEYXRlKDE5NzAsIDAsIDEsIEhILCBtbSwgc3MpYC4KICAgKgogICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmcKICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlIGEKICAgKiB2YWxpZCBJU08gdGltZSBmb3JtYXQgKEhIOm1tOnNzKS4KICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdCBiZSBhCiAgICogdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuCiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mCiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgKgogICAqIEBleGFtcGxlCiAgIDxleGFtcGxlIG5hbWU9InRpbWUtaW5wdXQtZGlyZWN0aXZlIiBtb2R1bGU9InRpbWVFeGFtcGxlIj4KICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgPHNjcmlwdD4KICAgICAgYW5ndWxhci5tb2R1bGUoJ3RpbWVFeGFtcGxlJywgW10pCiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS52YWx1ZSA9IG5ldyBEYXRlKDE5NzAsIDAsIDEsIDE0LCA1NywgMCk7CiAgICAgICAgfV0pOwogICAgIDwvc2NyaXB0PgogICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmwiPgogICAgICAgIFBpY2sgYSBiZXR3ZWVuIDhhbSBhbmQgNXBtOgogICAgICAgIDxpbnB1dCB0eXBlPSJ0aW1lIiBpZD0iZXhhbXBsZUlucHV0IiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InZhbHVlIgogICAgICAgICAgICBwbGFjZWhvbGRlcj0iSEg6bW06c3MiIG1pbj0iMDg6MDA6MDAiIG1heD0iMTc6MDA6MDAiIHJlcXVpcmVkIC8+CiAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci50aW1lIj4KICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+CiAgICAgICAgPHR0PnZhbHVlID0ge3t2YWx1ZSB8IGRhdGU6ICJISDptbTpzcyJ9fTwvdHQ+PGJyLz4KICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+CiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgPC9mb3JtPgogICA8L2ZpbGU+CiAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbHVlIHwgZGF0ZTogIkhIOm1tOnNzIicpKTsKICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpOwogICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKTsKCiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0CiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHMKICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuCiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkgewogICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uCiAgICAgICAgdmFyIHNjciA9ICJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyAiICsKICAgICAgICAiaXB0LnZhbHVlID0gJyIgKyB2YWwgKyAiJzsiICsKICAgICAgICAiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnIiArIHZhbCArICInKTsgfSk7IjsKICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTsKICAgICAgfQoKICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcxNDo1NzowMCcpOwogICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTsKICAgICAgfSk7CgogICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHsKICAgICAgICBzZXRJbnB1dCgnJyk7CiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpOwogICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7CiAgICAgIH0pOwoKICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7CiAgICAgICAgc2V0SW5wdXQoJzIzOjU5OjAwJyk7CiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTsKICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpOwogICAgICB9KTsKICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAgICovCiAgJ3RpbWUnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCd0aW1lJywgVElNRV9SRUdFWFAsCiAgICAgIGNyZWF0ZURhdGVQYXJzZXIoVElNRV9SRUdFWFAsIFsnSEgnLCAnbW0nLCAnc3MnLCAnc3NzJ10pLAogICAgICdISDptbTpzcy5zc3MnKSwKCiAgIC8qKgogICAgKiBAbmdkb2MgaW5wdXQKICAgICogQG5hbWUgaW5wdXRbd2Vla10KICAgICoKICAgICogQGRlc2NyaXB0aW9uCiAgICAqIElucHV0IHdpdGggd2Vlay1vZi10aGUteWVhciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbiB0byBEYXRlLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydAogICAgKiB0aGUgSFRNTDUgd2VlayBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxCiAgICAqIHdlZWsgZm9ybWF0ICh5eXl5LVcjIyksIGZvciBleGFtcGxlOiBgMjAxMy1XMDJgLiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdC4KICAgICoKICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZwogICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuCiAgICAqCiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuIFRoaXMgbXVzdCBiZSBhCiAgICAqIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLgogICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdCBiZQogICAgKiBhIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLgogICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICAqCiAgICAqIEBleGFtcGxlCiAgICA8ZXhhbXBsZSBuYW1lPSJ3ZWVrLWlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJ3ZWVrRXhhbXBsZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPHNjcmlwdD4KICAgICAgYW5ndWxhci5tb2R1bGUoJ3dlZWtFeGFtcGxlJywgW10pCiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS52YWx1ZSA9IG5ldyBEYXRlKDIwMTMsIDAsIDMpOwogICAgICAgIH1dKTsKICAgICAgPC9zY3JpcHQ+CiAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmwiPgogICAgICAgIFBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzoKICAgICAgICA8aW5wdXQgaWQ9ImV4YW1wbGVJbnB1dCIgdHlwZT0id2VlayIgbmFtZT0iaW5wdXQiIG5nLW1vZGVsPSJ2YWx1ZSIKICAgICAgICAgICAgcGxhY2Vob2xkZXI9IllZWVktVyMjIiBtaW49IjIwMTItVzMyIiBtYXg9IjIwMTMtVzUyIiByZXF1aXJlZCAvPgogICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3Iud2VlayI+CiAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPgogICAgICAgIDx0dD52YWx1ZSA9IHt7dmFsdWUgfCBkYXRlOiAieXl5eS1Xd3cifX08L3R0Pjxici8+CiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICA8L2Zvcm0+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCd2YWx1ZSB8IGRhdGU6ICJ5eXl5LVd3dyInKSk7CiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTsKICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSk7CgogICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydAogICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzCiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLgogICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHsKICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLgogICAgICAgIHZhciBzY3IgPSAidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgIiArCiAgICAgICAgImlwdC52YWx1ZSA9ICciICsgdmFsICsgIic7IiArCiAgICAgICAgImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJyIgKyB2YWwgKyAiJyk7IH0pOyI7CiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7CiAgICAgIH0KCiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy1XMDEnKTsKICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7CiAgICAgIH0pOwoKICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgc2V0SW5wdXQoJycpOwogICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTsKICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpOwogICAgICB9KTsKCiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkgewogICAgICAgIHNldElucHV0KCcyMDE1LVcwMScpOwogICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgICA8L2V4YW1wbGU+CiAgICAqLwogICd3ZWVrJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnd2VlaycsIFdFRUtfUkVHRVhQLCB3ZWVrUGFyc2VyLCAneXl5eS1Xd3cnKSwKCiAgLyoqCiAgICogQG5nZG9jIGlucHV0CiAgICogQG5hbWUgaW5wdXRbbW9udGhdCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBJbnB1dCB3aXRoIG1vbnRoIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydAogICAqIHRoZSBIVE1MNSBtb250aCBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxCiAgICogbW9udGggZm9ybWF0ICh5eXl5LU1NKSwgZm9yIGV4YW1wbGU6IGAyMDA5LTAxYC4gVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QuIEluIHRoZSBldmVudCB0aGUgbW9kZWwgaXMKICAgKiBub3Qgc2V0IHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGgsIHRoZSBmaXJzdCBvZiB0aGF0IG1vZGVsJ3MgbW9udGggaXMgYXNzdW1lZC4KICAgKgogICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmcKICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlCiAgICogYSB2YWxpZCBJU08gbW9udGggZm9ybWF0ICh5eXl5LU1NKS4KICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdAogICAqIGJlIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuCiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mCiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgKgogICAqIEBleGFtcGxlCiAgIDxleGFtcGxlIG5hbWU9Im1vbnRoLWlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJtb250aEV4YW1wbGUiPgogICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICA8c2NyaXB0PgogICAgICBhbmd1bGFyLm1vZHVsZSgnbW9udGhFeGFtcGxlJywgW10pCiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS52YWx1ZSA9IG5ldyBEYXRlKDIwMTMsIDksIDEpOwogICAgICAgIH1dKTsKICAgICA8L3NjcmlwdD4KICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsIj4KICAgICAgIFBpY2sgYSBtb250aCBpbnQgMjAxMzoKICAgICAgIDxpbnB1dCBpZD0iZXhhbXBsZUlucHV0IiB0eXBlPSJtb250aCIgbmFtZT0iaW5wdXQiIG5nLW1vZGVsPSJ2YWx1ZSIKICAgICAgICAgIHBsYWNlaG9sZGVyPSJ5eXl5LU1NIiBtaW49IjIwMTMtMDEiIG1heD0iMjAxMy0xMiIgcmVxdWlyZWQgLz4KICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IubW9udGgiPgogICAgICAgICAgTm90IGEgdmFsaWQgbW9udGghPC9zcGFuPgogICAgICAgPHR0PnZhbHVlID0ge3t2YWx1ZSB8IGRhdGU6ICJ5eXl5LU1NIn19PC90dD48YnIvPgogICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+CiAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgIDwvZm9ybT4KICAgPC9maWxlPgogICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCd2YWx1ZSB8IGRhdGU6ICJ5eXl5LU1NIicpKTsKICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpOwogICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKTsKCiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0CiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHMKICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuCiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkgewogICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uCiAgICAgICAgdmFyIHNjciA9ICJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyAiICsKICAgICAgICAiaXB0LnZhbHVlID0gJyIgKyB2YWwgKyAiJzsiICsKICAgICAgICAiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnIiArIHZhbCArICInKTsgfSk7IjsKICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTsKICAgICAgfQoKICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEzLTEwJyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpOwogICAgICB9KTsKCiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgIHNldElucHV0KCcnKTsKICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTsKICAgICAgfSk7CgogICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHsKICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMScpOwogICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTsKICAgICAgfSk7CiAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogICAqLwogICdtb250aCc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ21vbnRoJywgTU9OVEhfUkVHRVhQLAogICAgIGNyZWF0ZURhdGVQYXJzZXIoTU9OVEhfUkVHRVhQLCBbJ3l5eXknLCAnTU0nXSksCiAgICAgJ3l5eXktTU0nKSwKCiAgLyoqCiAgICogQG5nZG9jIGlucHV0CiAgICogQG5hbWUgaW5wdXRbbnVtYmVyXQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGV4dCBpbnB1dCB3aXRoIG51bWJlciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gU2V0cyB0aGUgYG51bWJlcmAgdmFsaWRhdGlvbgogICAqIGVycm9yIGlmIG5vdCBhIHZhbGlkIG51bWJlci4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogICAqICAgIG1pbmxlbmd0aC4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuCiAgICogICAgbWF4bGVuZ3RoLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yCiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGV4YW1wbGUgbmFtZT0ibnVtYmVyLWlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJudW1iZXJFeGFtcGxlIj4KICAgICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbnVtYmVyRXhhbXBsZScsIFtdKQogICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICAgJHNjb3BlLnZhbHVlID0gMTI7CiAgICAgICAgICAgICB9XSk7CiAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgICBOdW1iZXI6IDxpbnB1dCB0eXBlPSJudW1iZXIiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idmFsdWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgbWluPSIwIiBtYXg9Ijk5IiByZXF1aXJlZD4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWQiPgogICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5udW1iZXIiPgogICAgICAgICAgICAgTm90IHZhbGlkIG51bWJlciE8L3NwYW4+CiAgICAgICAgICAgPHR0PnZhbHVlID0ge3t2YWx1ZX19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2ZpbGU+CiAgICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbHVlJykpOwogICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpOwogICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMTInKTsKICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTsKICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpOwogICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7CiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dC5jbGVhcigpOwogICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnMTIzJyk7CiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTsKICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogICAgICAgICAgfSk7CiAgICAgICAgPC9maWxlPgogICAgICA8L2V4YW1wbGU+CiAgICovCiAgJ251bWJlcic6IG51bWJlcklucHV0VHlwZSwKCgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dAogICAqIEBuYW1lIGlucHV0W3VybF0KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRleHQgaW5wdXQgd2l0aCBVUkwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYHVybGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIGNvbnRlbnQgaXMgbm90IGEKICAgKiB2YWxpZCBVUkwuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8KICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuCiAgICogICAgbWlubGVuZ3RoLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICAgKiAgICBtYXhsZW5ndGguCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZQogICAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICAgKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlcgogICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICoKICAgKiBAZXhhbXBsZQogICAgICA8ZXhhbXBsZSBuYW1lPSJ1cmwtaW5wdXQtZGlyZWN0aXZlIiBtb2R1bGU9InVybEV4YW1wbGUiPgogICAgICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd1cmxFeGFtcGxlJywgW10pCiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdodHRwOi8vZ29vZ2xlLmNvbSc7CiAgICAgICAgICAgICB9XSk7CiAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgICBVUkw6IDxpbnB1dCB0eXBlPSJ1cmwiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idGV4dCIgcmVxdWlyZWQ+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IudXJsIj4KICAgICAgICAgICAgIE5vdCB2YWxpZCB1cmwhPC9zcGFuPgogICAgICAgICAgIDx0dD50ZXh0ID0ge3t0ZXh0fX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnVybCA9IHt7ISFteUZvcm0uJGVycm9yLnVybH19PC90dD48YnIvPgogICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZmlsZT4KICAgICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCd0ZXh0JykpOwogICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpOwogICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndGV4dCcpKTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2h0dHA6Ly9nb29nbGUuY29tJyk7CiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7CiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTsKCiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7CiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBub3QgdXJsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7CiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdib3gnKTsKCiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZmlsZT4KICAgICAgPC9leGFtcGxlPgogICAqLwogICd1cmwnOiB1cmxJbnB1dFR5cGUsCgoKICAvKioKICAgKiBAbmdkb2MgaW5wdXQKICAgKiBAbmFtZSBpbnB1dFtlbWFpbF0KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRleHQgaW5wdXQgd2l0aCBlbWFpbCB2YWxpZGF0aW9uLiBTZXRzIHRoZSBgZW1haWxgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIG5vdCBhIHZhbGlkIGVtYWlsCiAgICogYWRkcmVzcy4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mCiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuCiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW4KICAgKiAgICBtaW5sZW5ndGguCiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhbgogICAqICAgIG1heGxlbmd0aC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlCiAgICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvcgogICAqICAgIHBhdHRlcm5zIGRlZmluZWQgYXMgc2NvcGUgZXhwcmVzc2lvbnMuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgKgogICAqIEBleGFtcGxlCiAgICAgIDxleGFtcGxlIG5hbWU9ImVtYWlsLWlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJlbWFpbEV4YW1wbGUiPgogICAgICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdlbWFpbEV4YW1wbGUnLCBbXSkKICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ21lQGV4YW1wbGUuY29tJzsKICAgICAgICAgICAgIH1dKTsKICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgICAgICBFbWFpbDogPGlucHV0IHR5cGU9ImVtYWlsIiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InRleHQiIHJlcXVpcmVkPgogICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLmVtYWlsIj4KICAgICAgICAgICAgICAgTm90IHZhbGlkIGVtYWlsITwvc3Bhbj4KICAgICAgICAgICAgIDx0dD50ZXh0ID0ge3t0ZXh0fX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5lbWFpbCA9IHt7ISFteUZvcm0uJGVycm9yLmVtYWlsfX08L3R0Pjxici8+CiAgICAgICAgICAgPC9mb3JtPgogICAgICAgICA8L2ZpbGU+CiAgICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygndGV4dCcpKTsKICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTsKICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdtZUBleGFtcGxlLmNvbScpOwogICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dC5jbGVhcigpOwogICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7CiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7CiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBub3QgZW1haWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTsKICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ3h4eCcpOwoKICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogICAgICAgICAgfSk7CiAgICAgICAgPC9maWxlPgogICAgICA8L2V4YW1wbGU+CiAgICovCiAgJ2VtYWlsJzogZW1haWxJbnB1dFR5cGUsCgoKICAvKioKICAgKiBAbmdkb2MgaW5wdXQKICAgKiBAbmFtZSBpbnB1dFtyYWRpb10KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIEhUTUwgcmFkaW8gYnV0dG9uLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ1ZhbHVlIEFuZ3VsYXIgZXhwcmVzc2lvbiB3aGljaCBzZXRzIHRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQKICAgKiAgICBiZSBzZXQgd2hlbiBzZWxlY3RlZC4KICAgKgogICAqIEBleGFtcGxlCiAgICAgIDxleGFtcGxlIG5hbWU9InJhZGlvLWlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJyYWRpb0V4YW1wbGUiPgogICAgICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYWRpb0V4YW1wbGUnLCBbXSkKICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAgICRzY29wZS5jb2xvciA9ICdibHVlJzsKICAgICAgICAgICAgICAgJHNjb3BlLnNwZWNpYWxWYWx1ZSA9IHsKICAgICAgICAgICAgICAgICAiaWQiOiAiMTIzNDUiLAogICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJncmVlbiIKICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgIH1dKTsKICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgbmctbW9kZWw9ImNvbG9yIiB2YWx1ZT0icmVkIj4gIFJlZCA8YnIvPgogICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgbmctbW9kZWw9ImNvbG9yIiBuZy12YWx1ZT0ic3BlY2lhbFZhbHVlIj4gR3JlZW4gPGJyLz4KICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5nLW1vZGVsPSJjb2xvciIgdmFsdWU9ImJsdWUiPiBCbHVlIDxici8+CiAgICAgICAgICAgPHR0PmNvbG9yID0ge3tjb2xvciB8IGpzb259fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgIE5vdGUgdGhhdCBgbmctdmFsdWU9InNwZWNpYWxWYWx1ZSJgIHNldHMgcmFkaW8gaXRlbSdzIHZhbHVlIHRvIGJlIHRoZSB2YWx1ZSBvZiBgJHNjb3BlLnNwZWNpYWxWYWx1ZWAuCiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGNvbG9yID0gZWxlbWVudChieS5iaW5kaW5nKCdjb2xvcicpKTsKCiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbignYmx1ZScpOwoKICAgICAgICAgICAgZWxlbWVudC5hbGwoYnkubW9kZWwoJ2NvbG9yJykpLmdldCgwKS5jbGljaygpOwoKICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdyZWQnKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZmlsZT4KICAgICAgPC9leGFtcGxlPgogICAqLwogICdyYWRpbyc6IHJhZGlvSW5wdXRUeXBlLAoKCiAgLyoqCiAgICogQG5nZG9jIGlucHV0CiAgICogQG5hbWUgaW5wdXRbY2hlY2tib3hdCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBIVE1MIGNoZWNrYm94LgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge2V4cHJlc3Npb249fSBuZ1RydWVWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLgogICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nRmFsc2VWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIG5vdCBzZWxlY3RlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGV4YW1wbGUgbmFtZT0iY2hlY2tib3gtaW5wdXQtZGlyZWN0aXZlIiBtb2R1bGU9ImNoZWNrYm94RXhhbXBsZSI+CiAgICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2NoZWNrYm94RXhhbXBsZScsIFtdKQogICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICAgJHNjb3BlLnZhbHVlMSA9IHRydWU7CiAgICAgICAgICAgICAgICRzY29wZS52YWx1ZTIgPSAnWUVTJwogICAgICAgICAgICAgfV0pOwogICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgICAgVmFsdWUxOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJ2YWx1ZTEiPiA8YnIvPgogICAgICAgICAgIFZhbHVlMjogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0idmFsdWUyIgogICAgICAgICAgICAgICAgICAgICAgICAgIG5nLXRydWUtdmFsdWU9IidZRVMnIiBuZy1mYWxzZS12YWx1ZT0iJ05PJyI+IDxici8+CiAgICAgICAgICAgPHR0PnZhbHVlMSA9IHt7dmFsdWUxfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0PnZhbHVlMiA9IHt7dmFsdWUyfX08L3R0Pjxici8+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHZhbHVlMSA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUxJykpOwogICAgICAgICAgICB2YXIgdmFsdWUyID0gZWxlbWVudChieS5iaW5kaW5nKCd2YWx1ZTInKSk7CgogICAgICAgICAgICBleHBlY3QodmFsdWUxLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1lFUycpOwoKICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUxJykpLmNsaWNrKCk7CiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlMicpKS5jbGljaygpOwoKICAgICAgICAgICAgZXhwZWN0KHZhbHVlMS5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICAgICAgZXhwZWN0KHZhbHVlMi5nZXRUZXh0KCkpLnRvQ29udGFpbignTk8nKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZmlsZT4KICAgICAgPC9leGFtcGxlPgogICAqLwogICdjaGVja2JveCc6IGNoZWNrYm94SW5wdXRUeXBlLAoKICAnaGlkZGVuJzogbm9vcCwKICAnYnV0dG9uJzogbm9vcCwKICAnc3VibWl0Jzogbm9vcCwKICAncmVzZXQnOiBub29wLAogICdmaWxlJzogbm9vcAp9OwoKZnVuY3Rpb24gdGVzdEZsYWdzKHZhbGlkaXR5LCBmbGFncykgewogIHZhciBpLCBmbGFnOwogIGlmIChmbGFncykgewogICAgZm9yIChpPTA7IGk8ZmxhZ3MubGVuZ3RoOyArK2kpIHsKICAgICAgZmxhZyA9IGZsYWdzW2ldOwogICAgICBpZiAodmFsaWRpdHlbZmxhZ10pIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn0KCmZ1bmN0aW9uIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpIHsKICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSA/IHZhbHVlIDogdmFsdWUudG9TdHJpbmcoKTsKICB9KTsKfQoKZnVuY3Rpb24gdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7CiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTsKICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTsKfQoKZnVuY3Rpb24gYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7CiAgdmFyIHZhbGlkaXR5ID0gZWxlbWVudC5wcm9wKFZBTElESVRZX1NUQVRFX1BST1BFUlRZKTsKICB2YXIgcGxhY2Vob2xkZXIgPSBlbGVtZW50WzBdLnBsYWNlaG9sZGVyLCBub2V2ZW50ID0ge307CiAgdmFyIHR5cGUgPSBsb3dlcmNhc2UoZWxlbWVudFswXS50eXBlKTsKCiAgLy8gSW4gY29tcG9zaXRpb24gbW9kZSwgdXNlcnMgYXJlIHN0aWxsIGlucHV0aW5nIGludGVybWVkaWF0ZSB0ZXh0IGJ1ZmZlciwKICAvLyBob2xkIHRoZSBsaXN0ZW5lciB1bnRpbCBjb21wb3NpdGlvbiBpcyBkb25lLgogIC8vIE1vcmUgYWJvdXQgY29tcG9zaXRpb24gZXZlbnRzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ29tcG9zaXRpb25FdmVudAogIGlmICghJHNuaWZmZXIuYW5kcm9pZCkgewogICAgdmFyIGNvbXBvc2luZyA9IGZhbHNlOwoKICAgIGVsZW1lbnQub24oJ2NvbXBvc2l0aW9uc3RhcnQnLCBmdW5jdGlvbihkYXRhKSB7CiAgICAgIGNvbXBvc2luZyA9IHRydWU7CiAgICB9KTsKCiAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uKCkgewogICAgICBjb21wb3NpbmcgPSBmYWxzZTsKICAgICAgbGlzdGVuZXIoKTsKICAgIH0pOwogIH0KCiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHsKICAgIGlmIChjb21wb3NpbmcpIHJldHVybjsKICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsKCksCiAgICAgICAgZXZlbnQgPSBldiAmJiBldi50eXBlOwoKICAgIC8vIElFICgxMSBhbmQgdW5kZXIpIHNlZW0gdG8gZW1pdCBhbiAnaW5wdXQnIGV2ZW50IGlmIHRoZSBwbGFjZWhvbGRlciB2YWx1ZSBjaGFuZ2VzLgogICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBkaXJ0eSB0aGUgdmFsdWUgd2hlbiB0aGlzIGhhcHBlbnMsIHNvIHdlIGFib3J0IGhlcmUuIFVuZm9ydHVuYXRlbHksCiAgICAvLyBJRSBhbHNvIHNlbmRzIGlucHV0IGV2ZW50cyBmb3Igb3RoZXIgbm9uLWlucHV0LXJlbGF0ZWQgdGhpbmdzLCAoc3VjaCBhcyBmb2N1c2luZyBvbiBhCiAgICAvLyBmb3JtIGNvbnRyb2wpLCBzbyB0aGlzIGNoYW5nZSBpcyBub3QgZW50aXJlbHkgZW5vdWdoIHRvIHNvbHZlIHRoaXMuCiAgICBpZiAobXNpZSAmJiAoZXYgfHwgbm9ldmVudCkudHlwZSA9PT0gJ2lucHV0JyAmJiBlbGVtZW50WzBdLnBsYWNlaG9sZGVyICE9PSBwbGFjZWhvbGRlcikgewogICAgICBwbGFjZWhvbGRlciA9IGVsZW1lbnRbMF0ucGxhY2Vob2xkZXI7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBCeSBkZWZhdWx0IHdlIHdpbGwgdHJpbSB0aGUgdmFsdWUKICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgbmctdHJpbSBleGlzdHMgd2Ugd2lsbCBhdm9pZCB0cmltbWluZwogICAgLy8gSWYgaW5wdXQgdHlwZSBpcyAncGFzc3dvcmQnLCB0aGUgdmFsdWUgaXMgbmV2ZXIgdHJpbW1lZAogICAgaWYgKHR5cGUgIT09ICdwYXNzd29yZCcgJiYgKCFhdHRyLm5nVHJpbSB8fCBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJykpIHsKICAgICAgdmFsdWUgPSB0cmltKHZhbHVlKTsKICAgIH0KCiAgICAvLyBJZiBhIGNvbnRyb2wgaXMgc3VmZmVyaW5nIGZyb20gYmFkIGlucHV0IChkdWUgdG8gbmF0aXZlIHZhbGlkYXRvcnMpLCBicm93c2VycyBkaXNjYXJkIGl0cwogICAgLy8gdmFsdWUsIHNvIGl0IG1heSBiZSBuZWNlc3NhcnkgdG8gcmV2YWxpZGF0ZSAoYnkgY2FsbGluZyAkc2V0Vmlld1ZhbHVlIGFnYWluKSBldmVuIGlmIHRoZQogICAgLy8gY29udHJvbCdzIHZhbHVlIGlzIHRoZSBzYW1lIGVtcHR5IHZhbHVlIHR3aWNlIGluIGEgcm93LgogICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmFsdWUgfHwgKHZhbHVlID09PSAnJyAmJiBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycykpIHsKICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKHZhbHVlLCBldmVudCk7CiAgICB9CiAgfTsKCiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0ICJpbnB1dCIgZXZlbnQsIHdlIGFyZSBmaW5lIC0gZXhjZXB0IG9uIElFOSB3aGljaCBkb2Vzbid0IGZpcmUgdGhlCiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0CiAgaWYgKCRzbmlmZmVyLmhhc0V2ZW50KCdpbnB1dCcpKSB7CiAgICBlbGVtZW50Lm9uKCdpbnB1dCcsIGxpc3RlbmVyKTsKICB9IGVsc2UgewogICAgdmFyIHRpbWVvdXQ7CgogICAgdmFyIGRlZmVyTGlzdGVuZXIgPSBmdW5jdGlvbihldikgewogICAgICBpZiAoIXRpbWVvdXQpIHsKICAgICAgICB0aW1lb3V0ID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7CiAgICAgICAgICBsaXN0ZW5lcihldik7CiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKCiAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgdmFyIGtleSA9IGV2ZW50LmtleUNvZGU7CgogICAgICAvLyBpZ25vcmUKICAgICAgLy8gICAgY29tbWFuZCAgICAgICAgICAgIG1vZGlmaWVycyAgICAgICAgICAgICAgICAgICBhcnJvd3MKICAgICAgaWYgKGtleSA9PT0gOTEgfHwgKDE1IDwga2V5ICYmIGtleSA8IDE5KSB8fCAoMzcgPD0ga2V5ICYmIGtleSA8PSA0MCkpIHJldHVybjsKCiAgICAgIGRlZmVyTGlzdGVuZXIoZXZlbnQpOwogICAgfSk7CgogICAgLy8gaWYgdXNlciBtb2RpZmllcyBpbnB1dCB2YWx1ZSB1c2luZyBjb250ZXh0IG1lbnUgaW4gSUUsIHdlIG5lZWQgInBhc3RlIiBhbmQgImN1dCIgZXZlbnRzIHRvIGNhdGNoIGl0CiAgICBpZiAoJHNuaWZmZXIuaGFzRXZlbnQoJ3Bhc3RlJykpIHsKICAgICAgZWxlbWVudC5vbigncGFzdGUgY3V0JywgZGVmZXJMaXN0ZW5lcik7CiAgICB9CiAgfQoKICAvLyBpZiB1c2VyIHBhc3RlIGludG8gaW5wdXQgdXNpbmcgbW91c2Ugb24gb2xkZXIgYnJvd3NlcgogIC8vIG9yIGZvcm0gYXV0b2NvbXBsZXRlIG9uIG5ld2VyIGJyb3dzZXIsIHdlIG5lZWQgImNoYW5nZSIgZXZlbnQgdG8gY2F0Y2ggaXQKICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBsaXN0ZW5lcik7CgogIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgZWxlbWVudC52YWwoY3RybC4kaXNFbXB0eShjdHJsLiRtb2RlbFZhbHVlKSA/ICcnIDogY3RybC4kdmlld1ZhbHVlKTsKICB9Owp9CgpmdW5jdGlvbiB3ZWVrUGFyc2VyKGlzb1dlZWssIGV4aXN0aW5nRGF0ZSkgewogIGlmIChpc0RhdGUoaXNvV2VlaykpIHsKICAgIHJldHVybiBpc29XZWVrOwogIH0KCiAgaWYgKGlzU3RyaW5nKGlzb1dlZWspKSB7CiAgICBXRUVLX1JFR0VYUC5sYXN0SW5kZXggPSAwOwogICAgdmFyIHBhcnRzID0gV0VFS19SRUdFWFAuZXhlYyhpc29XZWVrKTsKICAgIGlmIChwYXJ0cykgewogICAgICB2YXIgeWVhciA9ICtwYXJ0c1sxXSwKICAgICAgICAgIHdlZWsgPSArcGFydHNbMl0sCiAgICAgICAgICBob3VycyA9IDAsCiAgICAgICAgICBtaW51dGVzID0gMCwKICAgICAgICAgIHNlY29uZHMgPSAwLAogICAgICAgICAgbWlsbGlzZWNvbmRzID0gMCwKICAgICAgICAgIGZpcnN0VGh1cnMgPSBnZXRGaXJzdFRodXJzZGF5T2ZZZWFyKHllYXIpLAogICAgICAgICAgYWRkRGF5cyA9ICh3ZWVrIC0gMSkgKiA3OwoKICAgICAgaWYgKGV4aXN0aW5nRGF0ZSkgewogICAgICAgIGhvdXJzID0gZXhpc3RpbmdEYXRlLmdldEhvdXJzKCk7CiAgICAgICAgbWludXRlcyA9IGV4aXN0aW5nRGF0ZS5nZXRNaW51dGVzKCk7CiAgICAgICAgc2Vjb25kcyA9IGV4aXN0aW5nRGF0ZS5nZXRTZWNvbmRzKCk7CiAgICAgICAgbWlsbGlzZWNvbmRzID0gZXhpc3RpbmdEYXRlLmdldE1pbGxpc2Vjb25kcygpOwogICAgICB9CgogICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgZmlyc3RUaHVycy5nZXREYXRlKCkgKyBhZGREYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcywgbWlsbGlzZWNvbmRzKTsKICAgIH0KICB9CgogIHJldHVybiBOYU47Cn0KCmZ1bmN0aW9uIGNyZWF0ZURhdGVQYXJzZXIocmVnZXhwLCBtYXBwaW5nKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKGlzbywgZGF0ZSkgewogICAgdmFyIHBhcnRzLCBtYXA7CgogICAgaWYgKGlzRGF0ZShpc28pKSB7CiAgICAgIHJldHVybiBpc287CiAgICB9CgogICAgaWYgKGlzU3RyaW5nKGlzbykpIHsKICAgICAgLy8gV2hlbiBhIGRhdGUgaXMgSlNPTidpZmllZCB0byB3cmFwcyBpdHNlbGYgaW5zaWRlIG9mIGFuIGV4dHJhCiAgICAgIC8vIHNldCBvZiBkb3VibGUgcXVvdGVzLiBUaGlzIG1ha2VzIHRoZSBkYXRlIHBhcnNpbmcgY29kZSB1bmFibGUKICAgICAgLy8gdG8gbWF0Y2ggdGhlIGRhdGUgc3RyaW5nIGFuZCBwYXJzZSBpdCBhcyBhIGRhdGUuCiAgICAgIGlmIChpc28uY2hhckF0KDApID09ICciJyAmJiBpc28uY2hhckF0KGlzby5sZW5ndGgtMSkgPT0gJyInKSB7CiAgICAgICAgaXNvID0gaXNvLnN1YnN0cmluZygxLCBpc28ubGVuZ3RoLTEpOwogICAgICB9CiAgICAgIGlmIChJU09fREFURV9SRUdFWFAudGVzdChpc28pKSB7CiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGlzbyk7CiAgICAgIH0KICAgICAgcmVnZXhwLmxhc3RJbmRleCA9IDA7CiAgICAgIHBhcnRzID0gcmVnZXhwLmV4ZWMoaXNvKTsKCiAgICAgIGlmIChwYXJ0cykgewogICAgICAgIHBhcnRzLnNoaWZ0KCk7CiAgICAgICAgaWYgKGRhdGUpIHsKICAgICAgICAgIG1hcCA9IHsKICAgICAgICAgICAgeXl5eTogZGF0ZS5nZXRGdWxsWWVhcigpLAogICAgICAgICAgICBNTTogZGF0ZS5nZXRNb250aCgpICsgMSwKICAgICAgICAgICAgZGQ6IGRhdGUuZ2V0RGF0ZSgpLAogICAgICAgICAgICBISDogZGF0ZS5nZXRIb3VycygpLAogICAgICAgICAgICBtbTogZGF0ZS5nZXRNaW51dGVzKCksCiAgICAgICAgICAgIHNzOiBkYXRlLmdldFNlY29uZHMoKSwKICAgICAgICAgICAgc3NzOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC8gMTAwMAogICAgICAgICAgfTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbWFwID0geyB5eXl5OiAxOTcwLCBNTTogMSwgZGQ6IDEsIEhIOiAwLCBtbTogMCwgc3M6IDAsIHNzczogMCB9OwogICAgICAgIH0KCiAgICAgICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24ocGFydCwgaW5kZXgpIHsKICAgICAgICAgIGlmIChpbmRleCA8IG1hcHBpbmcubGVuZ3RoKSB7CiAgICAgICAgICAgIG1hcFttYXBwaW5nW2luZGV4XV0gPSArcGFydDsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gbmV3IERhdGUobWFwLnl5eXksIG1hcC5NTSAtIDEsIG1hcC5kZCwgbWFwLkhILCBtYXAubW0sIG1hcC5zcyB8fCAwLCBtYXAuc3NzICogMTAwMCB8fCAwKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBOYU47CiAgfTsKfQoKZnVuY3Rpb24gY3JlYXRlRGF0ZUlucHV0VHlwZSh0eXBlLCByZWdleHAsIHBhcnNlRGF0ZSwgZm9ybWF0KSB7CiAgcmV0dXJuIGZ1bmN0aW9uIGR5bmFtaWNEYXRlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIsICRmaWx0ZXIpIHsKICAgIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7CiAgICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpOwogICAgdmFyIHRpbWV6b25lID0gY3RybCAmJiBjdHJsLiRvcHRpb25zICYmIGN0cmwuJG9wdGlvbnMudGltZXpvbmU7CiAgICB2YXIgcHJldmlvdXNEYXRlOwoKICAgIGN0cmwuJCRwYXJzZXJOYW1lID0gdHlwZTsKICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpIHJldHVybiBudWxsOwogICAgICBpZiAocmVnZXhwLnRlc3QodmFsdWUpKSB7CiAgICAgICAgLy8gTm90ZTogV2UgY2Fubm90IHJlYWQgY3RybC4kbW9kZWxWYWx1ZSwgYXMgdGhlcmUgbWlnaHQgYmUgYSBkaWZmZXJlbnQKICAgICAgICAvLyBwYXJzZXIvZm9ybWF0dGVyIGluIHRoZSBwcm9jZXNzaW5nIGNoYWluIHNvIHRoYXQgdGhlIG1vZGVsCiAgICAgICAgLy8gY29udGFpbnMgc29tZSBkaWZmZXJlbnQgZGF0YSBmb3JtYXQhCiAgICAgICAgdmFyIHBhcnNlZERhdGUgPSBwYXJzZURhdGUodmFsdWUsIHByZXZpb3VzRGF0ZSk7CiAgICAgICAgaWYgKHRpbWV6b25lID09PSAnVVRDJykgewogICAgICAgICAgcGFyc2VkRGF0ZS5zZXRNaW51dGVzKHBhcnNlZERhdGUuZ2V0TWludXRlcygpIC0gcGFyc2VkRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcnNlZERhdGU7CiAgICAgIH0KICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0pOwoKICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgICBpZiAoIWN0cmwuJGlzRW1wdHkodmFsdWUpKSB7CiAgICAgICAgaWYgKCFpc0RhdGUodmFsdWUpKSB7CiAgICAgICAgICB0aHJvdyAkbmdNb2RlbE1pbkVycignZGF0ZWZtdCcsICdFeHBlY3RlZCBgezB9YCB0byBiZSBhIGRhdGUnLCB2YWx1ZSk7CiAgICAgICAgfQogICAgICAgIHByZXZpb3VzRGF0ZSA9IHZhbHVlOwogICAgICAgIGlmIChwcmV2aW91c0RhdGUgJiYgdGltZXpvbmUgPT09ICdVVEMnKSB7CiAgICAgICAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSA2MDAwMCAqIHByZXZpb3VzRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpOwogICAgICAgICAgcHJldmlvdXNEYXRlID0gbmV3IERhdGUocHJldmlvdXNEYXRlLmdldFRpbWUoKSArIHRpbWV6b25lT2Zmc2V0KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICRmaWx0ZXIoJ2RhdGUnKSh2YWx1ZSwgZm9ybWF0LCB0aW1lem9uZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcHJldmlvdXNEYXRlID0gbnVsbDsKICAgICAgfQogICAgICByZXR1cm4gJyc7CiAgICB9KTsKCiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWluKSB8fCBhdHRyLm5nTWluKSB7CiAgICAgIHZhciBtaW5WYWw7CiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWluID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCBwYXJzZURhdGUodmFsdWUpID49IG1pblZhbDsKICAgICAgfTsKICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWluJywgZnVuY3Rpb24odmFsKSB7CiAgICAgICAgbWluVmFsID0gcGFyc2VPYnNlcnZlZERhdGVWYWx1ZSh2YWwpOwogICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7CiAgICAgIH0pOwogICAgfQoKICAgIGlmIChpc0RlZmluZWQoYXR0ci5tYXgpIHx8IGF0dHIubmdNYXgpIHsKICAgICAgdmFyIG1heFZhbDsKICAgICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPD0gbWF4VmFsOwogICAgICB9OwogICAgICBhdHRyLiRvYnNlcnZlKCdtYXgnLCBmdW5jdGlvbih2YWwpIHsKICAgICAgICBtYXhWYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7CiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTsKICAgICAgfSk7CiAgICB9CiAgICAvLyBPdmVycmlkZSB0aGUgc3RhbmRhcmQgJGlzRW1wdHkgdG8gZGV0ZWN0IGludmFsaWQgZGF0ZXMgYXMgd2VsbAogICAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIC8vIEludmFsaWQgRGF0ZTogZ2V0VGltZSgpIHJldHVybnMgTmFOCiAgICAgIHJldHVybiAhdmFsdWUgfHwgKHZhbHVlLmdldFRpbWUgJiYgdmFsdWUuZ2V0VGltZSgpICE9PSB2YWx1ZS5nZXRUaW1lKCkpOwogICAgfTsKCiAgICBmdW5jdGlvbiBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCkgewogICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbCkgPyAoaXNEYXRlKHZhbCkgPyB2YWwgOiBwYXJzZURhdGUodmFsKSkgOiB1bmRlZmluZWQ7CiAgICB9CiAgfTsKfQoKZnVuY3Rpb24gYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7CiAgdmFyIG5vZGUgPSBlbGVtZW50WzBdOwogIHZhciBuYXRpdmVWYWxpZGF0aW9uID0gY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMgPSBpc09iamVjdChub2RlLnZhbGlkaXR5KTsKICBpZiAobmF0aXZlVmFsaWRhdGlvbikgewogICAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHZhciB2YWxpZGl0eSA9IGVsZW1lbnQucHJvcChWQUxJRElUWV9TVEFURV9QUk9QRVJUWSkgfHwge307CiAgICAgIC8vIERldGVjdCBidWcgaW4gRkYzNSBmb3IgaW5wdXRbZW1haWxdIChodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDY0NDMwKToKICAgICAgLy8gLSBhbHNvIHNldHMgdmFsaWRpdHkuYmFkSW5wdXQgKHNob3VsZCBvbmx5IGJlIHZhbGlkaXR5LnR5cGVNaXNtYXRjaCkuCiAgICAgIC8vIC0gc2VlIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjZS1tYWlsLXN0YXRlLSh0eXBlPWVtYWlsKQogICAgICAvLyAtIGNhbiBpZ25vcmUgdGhpcyBjYXNlIGFzIHdlIGNhbiBzdGlsbCByZWFkIG91dCB0aGUgZXJyb25lb3VzIGVtYWlsLi4uCiAgICAgIHJldHVybiB2YWxpZGl0eS5iYWRJbnB1dCAmJiAhdmFsaWRpdHkudHlwZU1pc21hdGNoID8gdW5kZWZpbmVkIDogdmFsdWU7CiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIG51bWJlcklucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7CiAgYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKTsKICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpOwoKICBjdHJsLiQkcGFyc2VyTmFtZSA9ICdudW1iZXInOwogIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKGN0cmwuJGlzRW1wdHkodmFsdWUpKSAgICAgIHJldHVybiBudWxsOwogICAgaWYgKE5VTUJFUl9SRUdFWFAudGVzdCh2YWx1ZSkpIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTsKICAgIHJldHVybiB1bmRlZmluZWQ7CiAgfSk7CgogIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKCFjdHJsLiRpc0VtcHR5KHZhbHVlKSkgewogICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkgewogICAgICAgIHRocm93ICRuZ01vZGVsTWluRXJyKCdudW1mbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBudW1iZXInLCB2YWx1ZSk7CiAgICAgIH0KICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpOwogICAgfQogICAgcmV0dXJuIHZhbHVlOwogIH0pOwoKICBpZiAoYXR0ci5taW4gfHwgYXR0ci5uZ01pbikgewogICAgdmFyIG1pblZhbDsKICAgIGN0cmwuJHZhbGlkYXRvcnMubWluID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1pblZhbCkgfHwgdmFsdWUgPj0gbWluVmFsOwogICAgfTsKCiAgICBhdHRyLiRvYnNlcnZlKCdtaW4nLCBmdW5jdGlvbih2YWwpIHsKICAgICAgaWYgKGlzRGVmaW5lZCh2YWwpICYmICFpc051bWJlcih2YWwpKSB7CiAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwsIDEwKTsKICAgICAgfQogICAgICBtaW5WYWwgPSBpc051bWJlcih2YWwpICYmICFpc05hTih2YWwpID8gdmFsIDogdW5kZWZpbmVkOwogICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnMKICAgICAgY3RybC4kdmFsaWRhdGUoKTsKICAgIH0pOwogIH0KCiAgaWYgKGF0dHIubWF4IHx8IGF0dHIubmdNYXgpIHsKICAgIHZhciBtYXhWYWw7CiAgICBjdHJsLiR2YWxpZGF0b3JzLm1heCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHZhbHVlIDw9IG1heFZhbDsKICAgIH07CgogICAgYXR0ci4kb2JzZXJ2ZSgnbWF4JywgZnVuY3Rpb24odmFsKSB7CiAgICAgIGlmIChpc0RlZmluZWQodmFsKSAmJiAhaXNOdW1iZXIodmFsKSkgewogICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsLCAxMCk7CiAgICAgIH0KICAgICAgbWF4VmFsID0gaXNOdW1iZXIodmFsKSAmJiAhaXNOYU4odmFsKSA/IHZhbCA6IHVuZGVmaW5lZDsKICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zCiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7CiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIHVybElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7CiAgLy8gTm90ZTogbm8gYmFkSW5wdXRDaGVja2VyIGhlcmUgYnkgcHVycG9zZSBhcyBgdXJsYCBpcyBvbmx5IGEgdmFsaWRhdGlvbgogIC8vIGluIGJyb3dzZXJzLCBpLmUuIHdlIGNhbiBhbHdheXMgcmVhZCBvdXQgaW5wdXQudmFsdWUgZXZlbiBpZiBpdCBpcyBub3QgdmFsaWQhCiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTsKICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTsKCiAgY3RybC4kJHBhcnNlck5hbWUgPSAndXJsJzsKICBjdHJsLiR2YWxpZGF0b3JzLnVybCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgVVJMX1JFR0VYUC50ZXN0KHZhbHVlKTsKICB9Owp9CgpmdW5jdGlvbiBlbWFpbElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7CiAgLy8gTm90ZTogbm8gYmFkSW5wdXRDaGVja2VyIGhlcmUgYnkgcHVycG9zZSBhcyBgdXJsYCBpcyBvbmx5IGEgdmFsaWRhdGlvbgogIC8vIGluIGJyb3dzZXJzLCBpLmUuIHdlIGNhbiBhbHdheXMgcmVhZCBvdXQgaW5wdXQudmFsdWUgZXZlbiBpZiBpdCBpcyBub3QgdmFsaWQhCiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTsKICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTsKCiAgY3RybC4kJHBhcnNlck5hbWUgPSAnZW1haWwnOwogIGN0cmwuJHZhbGlkYXRvcnMuZW1haWwgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IEVNQUlMX1JFR0VYUC50ZXN0KHZhbHVlKTsKICB9Owp9CgpmdW5jdGlvbiByYWRpb0lucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkgewogIC8vIG1ha2UgdGhlIG5hbWUgdW5pcXVlLCBpZiBub3QgZGVmaW5lZAogIGlmIChpc1VuZGVmaW5lZChhdHRyLm5hbWUpKSB7CiAgICBlbGVtZW50LmF0dHIoJ25hbWUnLCBuZXh0VWlkKCkpOwogIH0KCiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHsKICAgIGlmIChlbGVtZW50WzBdLmNoZWNrZWQpIHsKICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGF0dHIudmFsdWUsIGV2ICYmIGV2LnR5cGUpOwogICAgfQogIH07CgogIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpOwoKICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgIHZhciB2YWx1ZSA9IGF0dHIudmFsdWU7CiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSAodmFsdWUgPT0gY3RybC4kdmlld1ZhbHVlKTsKICB9OwoKICBhdHRyLiRvYnNlcnZlKCd2YWx1ZScsIGN0cmwuJHJlbmRlcik7Cn0KCmZ1bmN0aW9uIHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgY29udGV4dCwgbmFtZSwgZXhwcmVzc2lvbiwgZmFsbGJhY2spIHsKICB2YXIgcGFyc2VGbjsKICBpZiAoaXNEZWZpbmVkKGV4cHJlc3Npb24pKSB7CiAgICBwYXJzZUZuID0gJHBhcnNlKGV4cHJlc3Npb24pOwogICAgaWYgKCFwYXJzZUZuLmNvbnN0YW50KSB7CiAgICAgIHRocm93IG1pbkVycignbmdNb2RlbCcpKCdjb25zdGV4cHInLCAnRXhwZWN0ZWQgY29uc3RhbnQgZXhwcmVzc2lvbiBmb3IgYHswfWAsIGJ1dCBzYXcgJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2B7MX1gLicsIG5hbWUsIGV4cHJlc3Npb24pOwogICAgfQogICAgcmV0dXJuIHBhcnNlRm4oY29udGV4dCk7CiAgfQogIHJldHVybiBmYWxsYmFjazsKfQoKZnVuY3Rpb24gY2hlY2tib3hJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlciwgJHBhcnNlKSB7CiAgdmFyIHRydWVWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ1RydWVWYWx1ZScsIGF0dHIubmdUcnVlVmFsdWUsIHRydWUpOwogIHZhciBmYWxzZVZhbHVlID0gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBzY29wZSwgJ25nRmFsc2VWYWx1ZScsIGF0dHIubmdGYWxzZVZhbHVlLCBmYWxzZSk7CgogIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7CiAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudFswXS5jaGVja2VkLCBldiAmJiBldi50eXBlKTsKICB9OwoKICBlbGVtZW50Lm9uKCdjbGljaycsIGxpc3RlbmVyKTsKCiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7CiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSBjdHJsLiR2aWV3VmFsdWU7CiAgfTsKCiAgLy8gT3ZlcnJpZGUgdGhlIHN0YW5kYXJkIGAkaXNFbXB0eWAgYmVjYXVzZSBhbiBlbXB0eSBjaGVja2JveCBpcyBuZXZlciBlcXVhbCB0byB0aGUgdHJ1ZVZhbHVlCiAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUgIT09IHRydWVWYWx1ZTsKICB9OwoKICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiBlcXVhbHModmFsdWUsIHRydWVWYWx1ZSk7CiAgfSk7CgogIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlID8gdHJ1ZVZhbHVlIDogZmFsc2VWYWx1ZTsKICB9KTsKfQoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIHRleHRhcmVhCiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBIVE1MIHRleHRhcmVhIGVsZW1lbnQgY29udHJvbCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLiBUaGUgZGF0YS1iaW5kaW5nIGFuZCB2YWxpZGF0aW9uCiAqIHByb3BlcnRpZXMgb2YgdGhpcyBlbGVtZW50IGFyZSBleGFjdGx5IHRoZSBzYW1lIGFzIHRob3NlIG9mIHRoZQogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0IGVsZW1lbnR9LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLgogKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8KICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuCiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuCiAqICAgIG1pbmxlbmd0aC4KICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhbgogKiAgICBtYXhsZW5ndGguCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvcgogKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLgogKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBpbnB1dAogKiBAcmVzdHJpY3QgRQogKgogKiBAZGVzY3JpcHRpb24KICogSFRNTCBpbnB1dCBlbGVtZW50IGNvbnRyb2wgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy4gSW5wdXQgY29udHJvbCBmb2xsb3dzIEhUTUw1IGlucHV0IHR5cGVzCiAqIGFuZCBwb2x5ZmlsbHMgdGhlIEhUTUw1IHZhbGlkYXRpb24gYmVoYXZpb3IgZm9yIG9sZGVyIGJyb3dzZXJzLgogKgogKiAqTk9URSogTm90IGV2ZXJ5IGZlYXR1cmUgb2ZmZXJlZCBpcyBhdmFpbGFibGUgZm9yIGFsbCBpbnB1dCB0eXBlcy4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICogQHBhcmFtIHtib29sZWFuPX0gbmdSZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGlmIHNldCB0byB0cnVlCiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuCiAqICAgIG1pbmxlbmd0aC4KICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhbgogKiAgICBtYXhsZW5ndGguCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvcgogKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLgogKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LgogKiAgICBUaGlzIHBhcmFtZXRlciBpcyBpZ25vcmVkIGZvciBpbnB1dFt0eXBlPXBhc3N3b3JkXSBjb250cm9scywgd2hpY2ggd2lsbCBuZXZlciB0cmltIHRoZQogKiAgICBpbnB1dC4KICoKICogQGV4YW1wbGUKICAgIDxleGFtcGxlIG5hbWU9ImlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJpbnB1dEV4YW1wbGUiPgogICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnaW5wdXRFeGFtcGxlJywgW10pCiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB7bmFtZTogJ2d1ZXN0JywgbGFzdDogJ3Zpc2l0b3InfTsKICAgICAgICAgICAgfV0pOwogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIj4KICAgICAgICAgICBVc2VyIG5hbWU6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VyTmFtZSIgbmctbW9kZWw9InVzZXIubmFtZSIgcmVxdWlyZWQ+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0udXNlck5hbWUuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj48YnI+CiAgICAgICAgICAgTGFzdCBuYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ibGFzdE5hbWUiIG5nLW1vZGVsPSJ1c2VyLmxhc3QiCiAgICAgICAgICAgICBuZy1taW5sZW5ndGg9IjMiIG5nLW1heGxlbmd0aD0iMTAiPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5taW5sZW5ndGgiPgogICAgICAgICAgICAgVG9vIHNob3J0ITwvc3Bhbj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWF4bGVuZ3RoIj4KICAgICAgICAgICAgIFRvbyBsb25nITwvc3Bhbj48YnI+CiAgICAgICAgIDwvZm9ybT4KICAgICAgICAgPGhyPgogICAgICAgICA8dHQ+dXNlciA9IHt7dXNlcn19PC90dD48YnIvPgogICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiR2YWxpZCA9IHt7bXlGb3JtLnVzZXJOYW1lLiR2YWxpZH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0udXNlck5hbWUuJGVycm9yID0ge3tteUZvcm0udXNlck5hbWUuJGVycm9yfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS5sYXN0TmFtZS4kdmFsaWQgPSB7e215Rm9ybS5sYXN0TmFtZS4kdmFsaWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiRlcnJvciA9IHt7bXlGb3JtLmxhc3ROYW1lLiRlcnJvcn19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1pbmxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1pbmxlbmd0aH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1heGxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1heGxlbmd0aH19PC90dD48YnI+CiAgICAgICA8L2Rpdj4KICAgICAgPC9maWxlPgogICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgICB2YXIgdXNlciA9IGVsZW1lbnQoYnkuZXhhY3RCaW5kaW5nKCd1c2VyJykpOwogICAgICAgIHZhciB1c2VyTmFtZVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0udXNlck5hbWUuJHZhbGlkJykpOwogICAgICAgIHZhciBsYXN0TmFtZVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJHZhbGlkJykpOwogICAgICAgIHZhciBsYXN0TmFtZUVycm9yID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpOwogICAgICAgIHZhciBmb3JtVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSk7CiAgICAgICAgdmFyIHVzZXJOYW1lSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLm5hbWUnKSk7CiAgICAgICAgdmFyIHVzZXJMYXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmxhc3QnKSk7CgogICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3sibmFtZSI6Imd1ZXN0IiwibGFzdCI6InZpc2l0b3IifScpOwogICAgICAgICAgZXhwZWN0KHVzZXJOYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5IHdoZW4gcmVxdWlyZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHVzZXJOYW1lSW5wdXQuY2xlYXIoKTsKICAgICAgICAgIHVzZXJOYW1lSW5wdXQuc2VuZEtleXMoJycpOwoKICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7Imxhc3QiOiJ2aXNpdG9yIn0nKTsKICAgICAgICAgIGV4cGVjdCh1c2VyTmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogICAgICAgICAgZXhwZWN0KGZvcm1WYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSB2YWxpZCBpZiBlbXB0eSB3aGVuIG1pbiBsZW5ndGggaXMgc2V0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7CiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCcnKTsKCiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigneyJuYW1lIjoiZ3Vlc3QiLCJsYXN0IjoiIn0nKTsKICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsZXNzIHRoYW4gcmVxdWlyZWQgbWluIGxlbmd0aCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdXNlckxhc3RJbnB1dC5jbGVhcigpOwogICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygneHgnKTsKCiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigneyJuYW1lIjoiZ3Vlc3QifScpOwogICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAgICAgICAgICBleHBlY3QobGFzdE5hbWVFcnJvci5nZXRUZXh0KCkpLnRvQ29udGFpbignbWlubGVuZ3RoJyk7CiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbG9uZ2VyIHRoYW4gbWF4IGxlbmd0aCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdXNlckxhc3RJbnB1dC5jbGVhcigpOwogICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygnc29tZSByaWRpY3Vsb3VzbHkgbG9uZyBuYW1lJyk7CgogICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3sibmFtZSI6Imd1ZXN0In0nKTsKICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21heGxlbmd0aCcpOwogICAgICAgICAgZXhwZWN0KGZvcm1WYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKi8KdmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsICckZmlsdGVyJywgJyRwYXJzZScsCiAgICBmdW5jdGlvbigkYnJvd3NlciwgJHNuaWZmZXIsICRmaWx0ZXIsICRwYXJzZSkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgcmVxdWlyZTogWyc/bmdNb2RlbCddLAogICAgbGluazogewogICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykgewogICAgICAgIGlmIChjdHJsc1swXSkgewogICAgICAgICAgKGlucHV0VHlwZVtsb3dlcmNhc2UoYXR0ci50eXBlKV0gfHwgaW5wdXRUeXBlLnRleHQpKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsc1swXSwgJHNuaWZmZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJyb3dzZXIsICRmaWx0ZXIsICRwYXJzZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKfV07Cgp2YXIgVkFMSURfQ0xBU1MgPSAnbmctdmFsaWQnLAogICAgSU5WQUxJRF9DTEFTUyA9ICduZy1pbnZhbGlkJywKICAgIFBSSVNUSU5FX0NMQVNTID0gJ25nLXByaXN0aW5lJywKICAgIERJUlRZX0NMQVNTID0gJ25nLWRpcnR5JywKICAgIFVOVE9VQ0hFRF9DTEFTUyA9ICduZy11bnRvdWNoZWQnLAogICAgVE9VQ0hFRF9DTEFTUyA9ICduZy10b3VjaGVkJywKICAgIFBFTkRJTkdfQ0xBU1MgPSAnbmctcGVuZGluZyc7CgovKioKICogQG5nZG9jIHR5cGUKICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcgogKgogKiBAcHJvcGVydHkge3N0cmluZ30gJHZpZXdWYWx1ZSBBY3R1YWwgc3RyaW5nIHZhbHVlIGluIHRoZSB2aWV3LgogKiBAcHJvcGVydHkgeyp9ICRtb2RlbFZhbHVlIFRoZSB2YWx1ZSBpbiB0aGUgbW9kZWwsIHRoYXQgdGhlIGNvbnRyb2wgaXMgYm91bmQgdG8uCiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHBhcnNlcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUsIGFzIGEgcGlwZWxpbmUsIHdoZW5ldmVyCiAgICAgICB0aGUgY29udHJvbCByZWFkcyB2YWx1ZSBmcm9tIHRoZSBET00uICBFYWNoIGZ1bmN0aW9uIGlzIGNhbGxlZCwgaW4gdHVybiwgcGFzc2luZyB0aGUgdmFsdWUKICAgICAgIHRocm91Z2ggdG8gdGhlIG5leHQuIFRoZSBsYXN0IHJldHVybiB2YWx1ZSBpcyB1c2VkIHRvIHBvcHVsYXRlIHRoZSBtb2RlbC4KICAgICAgIFVzZWQgdG8gc2FuaXRpemUgLyBjb252ZXJ0IHRoZSB2YWx1ZSBhcyB3ZWxsIGFzIHZhbGlkYXRpb24uIEZvciB2YWxpZGF0aW9uLAogICAgICAgdGhlIHBhcnNlcnMgc2hvdWxkIHVwZGF0ZSB0aGUgdmFsaWRpdHkgc3RhdGUgdXNpbmcKICAgICAgIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWYWxpZGl0eSAkc2V0VmFsaWRpdHkoKX0sCiAgICAgICBhbmQgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBpbnZhbGlkIHZhbHVlcy4KCiAqCiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJGZvcm1hdHRlcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUsIGFzIGEgcGlwZWxpbmUsIHdoZW5ldmVyCiAgICAgICB0aGUgbW9kZWwgdmFsdWUgY2hhbmdlcy4gRWFjaCBmdW5jdGlvbiBpcyBjYWxsZWQsIGluIHR1cm4sIHBhc3NpbmcgdGhlIHZhbHVlIHRocm91Z2ggdG8gdGhlCiAgICAgICBuZXh0LiBVc2VkIHRvIGZvcm1hdCAvIGNvbnZlcnQgdmFsdWVzIGZvciBkaXNwbGF5IGluIHRoZSBjb250cm9sIGFuZCB2YWxpZGF0aW9uLgogKiBgYGBqcwogKiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsdWUpIHsKICogICBpZiAodmFsdWUpIHsKICogICAgIHJldHVybiB2YWx1ZS50b1VwcGVyQ2FzZSgpOwogKiAgIH0KICogfQogKiBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTsKICogYGBgCiAqCiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJHZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRvcnMgdGhhdCBhcmUgYXBwbGllZAogKiAgICAgIHdoZW5ldmVyIHRoZSBtb2RlbCB2YWx1ZSBjaGFuZ2VzLiBUaGUga2V5IHZhbHVlIHdpdGhpbiB0aGUgb2JqZWN0IHJlZmVycyB0byB0aGUgbmFtZSBvZiB0aGUKICogICAgICB2YWxpZGF0b3Igd2hpbGUgdGhlIGZ1bmN0aW9uIHJlZmVycyB0byB0aGUgdmFsaWRhdGlvbiBvcGVyYXRpb24uIFRoZSB2YWxpZGF0aW9uIG9wZXJhdGlvbiBpcwogKiAgICAgIHByb3ZpZGVkIHdpdGggdGhlIG1vZGVsIHZhbHVlIGFzIGFuIGFyZ3VtZW50IGFuZCBtdXN0IHJldHVybiBhIHRydWUgb3IgZmFsc2UgdmFsdWUgZGVwZW5kaW5nCiAqICAgICAgb24gdGhlIHJlc3BvbnNlIG9mIHRoYXQgdmFsaWRhdGlvbi4KICoKICogYGBganMKICogbmdNb2RlbC4kdmFsaWRhdG9ycy52YWxpZENoYXJhY3RlcnMgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHsKICogICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTsKICogICByZXR1cm4gL1swLTldKy8udGVzdCh2YWx1ZSkgJiYKICogICAgICAgICAgL1thLXpdKy8udGVzdCh2YWx1ZSkgJiYKICogICAgICAgICAgL1tBLVpdKy8udGVzdCh2YWx1ZSkgJiYKICogICAgICAgICAgL1xXKy8udGVzdCh2YWx1ZSk7CiAqIH07CiAqIGBgYAogKgogKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59ICRhc3luY1ZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRpb25zIHRoYXQgYXJlIGV4cGVjdGVkIHRvCiAqICAgICAgcGVyZm9ybSBhbiBhc3luY2hyb25vdXMgdmFsaWRhdGlvbiAoZS5nLiBhIEhUVFAgcmVxdWVzdCkuIFRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uIHRoYXQgaXMgcHJvdmlkZWQKICogICAgICBpcyBleHBlY3RlZCB0byByZXR1cm4gYSBwcm9taXNlIHdoZW4gaXQgaXMgcnVuIGR1cmluZyB0aGUgbW9kZWwgdmFsaWRhdGlvbiBwcm9jZXNzLiBPbmNlIHRoZSBwcm9taXNlCiAqICAgICAgaXMgZGVsaXZlcmVkIHRoZW4gdGhlIHZhbGlkYXRpb24gc3RhdHVzIHdpbGwgYmUgc2V0IHRvIHRydWUgd2hlbiBmdWxmaWxsZWQgYW5kIGZhbHNlIHdoZW4gcmVqZWN0ZWQuCiAqICAgICAgV2hlbiB0aGUgYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMgYXJlIHRyaWdnZXJlZCwgZWFjaCBvZiB0aGUgdmFsaWRhdG9ycyB3aWxsIHJ1biBpbiBwYXJhbGxlbCBhbmQgdGhlIG1vZGVsCiAqICAgICAgdmFsdWUgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgb25jZSBhbGwgdmFsaWRhdG9ycyBoYXZlIGJlZW4gZnVsZmlsbGVkLiBBbHNvLCBrZWVwIGluIG1pbmQgdGhhdCBhbGwKICogICAgICBhc3luY2hyb25vdXMgdmFsaWRhdG9ycyB3aWxsIG9ubHkgcnVuIG9uY2UgYWxsIHN5bmNocm9ub3VzIHZhbGlkYXRvcnMgaGF2ZSBwYXNzZWQuCiAqCiAqIFBsZWFzZSBub3RlIHRoYXQgaWYgJGh0dHAgaXMgdXNlZCB0aGVuIGl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSBzZXJ2ZXIgcmV0dXJucyBhIHN1Y2Nlc3MgSFRUUCByZXNwb25zZSBjb2RlCiAqIGluIG9yZGVyIHRvIGZ1bGZpbGwgdGhlIHZhbGlkYXRpb24gYW5kIGEgc3RhdHVzIGxldmVsIG9mIGA0eHhgIGluIG9yZGVyIHRvIHJlamVjdCB0aGUgdmFsaWRhdGlvbi4KICoKICogYGBganMKICogbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzLnVuaXF1ZVVzZXJuYW1lID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7CiAqICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7CiAqCiAqICAgLy8gTG9va3VwIHVzZXIgYnkgdXNlcm5hbWUKICogICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzLycgKyB2YWx1ZSkuCiAqICAgICAgdGhlbihmdW5jdGlvbiByZXNvbHZlZCgpIHsKICogICAgICAgIC8vdXNlcm5hbWUgZXhpc3RzLCB0aGlzIG1lYW5zIHZhbGlkYXRpb24gZmFpbHMKICogICAgICAgIHJldHVybiAkcS5yZWplY3QoJ2V4aXN0cycpOwogKiAgICAgIH0sIGZ1bmN0aW9uIHJlamVjdGVkKCkgewogKiAgICAgICAgLy91c2VybmFtZSBkb2VzIG5vdCBleGlzdCwgdGhlcmVmb3JlIHRoaXMgdmFsaWRhdGlvbiBwYXNzZXMKICogICAgICAgIHJldHVybiB0cnVlOwogKiAgICAgIH0pOwogKiB9OwogKiBgYGAKICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHZhbGlkYXRvci4KICogQHBhcmFtIHtGdW5jdGlvbn0gdmFsaWRhdGlvbkZuIFRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBydW4uCiAqCiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUgd2hlbmV2ZXIgdGhlCiAqICAgICB2aWV3IHZhbHVlIGhhcyBjaGFuZ2VkLiBJdCBpcyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIGlnbm9yZWQuCiAqICAgICBUaGlzIGNhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGFkZGl0aW9uYWwgJHdhdGNoZXMgYWdhaW5zdCB0aGUgbW9kZWwgdmFsdWUuCiAqCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgQW4gb2JqZWN0IGhhc2ggd2l0aCBhbGwgZmFpbGluZyB2YWxpZGF0b3IgaWRzIGFzIGtleXMuCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkcGVuZGluZyBBbiBvYmplY3QgaGFzaCB3aXRoIGFsbCBwZW5kaW5nIHZhbGlkYXRvciBpZHMgYXMga2V5cy4KICoKICogQHByb3BlcnR5IHtib29sZWFufSAkdW50b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbm90IGxvc3QgZm9jdXMgeWV0LgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICR0b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbG9zdCBmb2N1cy4KICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sIHlldC4KICogQHByb3BlcnR5IHtib29sZWFufSAkZGlydHkgVHJ1ZSBpZiB1c2VyIGhhcyBhbHJlYWR5IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbC4KICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiB0aGVyZSBpcyBubyBlcnJvci4KICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBlcnJvciBvbiB0aGUgY29udHJvbC4KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIGBOZ01vZGVsQ29udHJvbGxlcmAgcHJvdmlkZXMgQVBJIGZvciB0aGUgYG5nLW1vZGVsYCBkaXJlY3RpdmUuIFRoZSBjb250cm9sbGVyIGNvbnRhaW5zCiAqIHNlcnZpY2VzIGZvciBkYXRhLWJpbmRpbmcsIHZhbGlkYXRpb24sIENTUyB1cGRhdGVzLCBhbmQgdmFsdWUgZm9ybWF0dGluZyBhbmQgcGFyc2luZy4gSXQKICogcHVycG9zZWZ1bGx5IGRvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljIHdoaWNoIGRlYWxzIHdpdGggRE9NIHJlbmRlcmluZyBvciBsaXN0ZW5pbmcgdG8KICogRE9NIGV2ZW50cy4gU3VjaCBET00gcmVsYXRlZCBsb2dpYyBzaG91bGQgYmUgcHJvdmlkZWQgYnkgb3RoZXIgZGlyZWN0aXZlcyB3aGljaCBtYWtlIHVzZSBvZgogKiBgTmdNb2RlbENvbnRyb2xsZXJgIGZvciBkYXRhLWJpbmRpbmcuCiAqCiAqICMjIEN1c3RvbSBDb250cm9sIEV4YW1wbGUKICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYE5nTW9kZWxDb250cm9sbGVyYCB3aXRoIGEgY3VzdG9tIGNvbnRyb2wgdG8gYWNoaWV2ZQogKiBkYXRhLWJpbmRpbmcuIE5vdGljZSBob3cgZGlmZmVyZW50IGRpcmVjdGl2ZXMgKGBjb250ZW50ZWRpdGFibGVgLCBgbmctbW9kZWxgLCBhbmQgYHJlcXVpcmVkYCkKICogY29sbGFib3JhdGUgdG9nZXRoZXIgdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCByZXN1bHQuCiAqCiAqIE5vdGUgdGhhdCBgY29udGVudGVkaXRhYmxlYCBpcyBhbiBIVE1MNSBhdHRyaWJ1dGUsIHdoaWNoIHRlbGxzIHRoZSBicm93c2VyIHRvIGxldCB0aGUgZWxlbWVudAogKiBjb250ZW50cyBiZSBlZGl0ZWQgaW4gcGxhY2UgYnkgdGhlIHVzZXIuICBUaGlzIHdpbGwgbm90IHdvcmsgb24gb2xkZXIgYnJvd3NlcnMuCiAqCiAqIFdlIGFyZSB1c2luZyB0aGUge0BsaW5rIG5nLnNlcnZpY2U6JHNjZSAkc2NlfSBzZXJ2aWNlIGhlcmUgYW5kIGluY2x1ZGUgdGhlIHtAbGluayBuZ1Nhbml0aXplICRzYW5pdGl6ZX0KICogbW9kdWxlIHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlICJiYWQiIGNvbnRlbnQgbGlrZSBpbmxpbmUgZXZlbnQgbGlzdGVuZXIgKGUuZy4gYDxzcGFuIG9uY2xpY2s9Ii4uLiI+YCkuCiAqIEhvd2V2ZXIsIGFzIHdlIGFyZSB1c2luZyBgJHNjZWAgdGhlIG1vZGVsIGNhbiBzdGlsbCBkZWNpZGUgdG8gdG8gcHJvdmlkZSB1bnNhZmUgY29udGVudCBpZiBpdCBtYXJrcwogKiB0aGF0IGNvbnRlbnQgdXNpbmcgdGhlIGAkc2NlYCBzZXJ2aWNlLgogKgogKiA8ZXhhbXBsZSBuYW1lPSJOZ01vZGVsQ29udHJvbGxlciIgbW9kdWxlPSJjdXN0b21Db250cm9sIiBkZXBzPSJhbmd1bGFyLXNhbml0aXplLmpzIj4KICAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgICAgIFtjb250ZW50ZWRpdGFibGVdIHsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjazsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICAgICAgICBtaW4taGVpZ2h0OiAyMHB4OwogICAgICB9CgogICAgICAubmctaW52YWxpZCB7CiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmVkOwogICAgICB9CgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgICAgYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUNvbnRyb2wnLCBbJ25nU2FuaXRpemUnXSkuCiAgICAgICAgZGlyZWN0aXZlKCdjb250ZW50ZWRpdGFibGUnLCBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICByZXN0cmljdDogJ0EnLCAvLyBvbmx5IGFjdGl2YXRlIG9uIGVsZW1lbnQgYXR0cmlidXRlCiAgICAgICAgICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsIC8vIGdldCBhIGhvbGQgb2YgTmdNb2RlbENvbnRyb2xsZXIKICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7CiAgICAgICAgICAgICAgaWYgKCFuZ01vZGVsKSByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWwKCiAgICAgICAgICAgICAgLy8gU3BlY2lmeSBob3cgVUkgc2hvdWxkIGJlIHVwZGF0ZWQKICAgICAgICAgICAgICBuZ01vZGVsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKG5nTW9kZWwuJHZpZXdWYWx1ZSB8fCAnJykpOwogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2hhbmdlIGV2ZW50cyB0byBlbmFibGUgYmluZGluZwogICAgICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXIga2V5dXAgY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkocmVhZCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgcmVhZCgpOyAvLyBpbml0aWFsaXplCgogICAgICAgICAgICAgIC8vIFdyaXRlIGRhdGEgdG8gdGhlIG1vZGVsCiAgICAgICAgICAgICAgZnVuY3Rpb24gcmVhZCgpIHsKICAgICAgICAgICAgICAgIHZhciBodG1sID0gZWxlbWVudC5odG1sKCk7CiAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIGNsZWFyIHRoZSBjb250ZW50IGVkaXRhYmxlIHRoZSBicm93c2VyIGxlYXZlcyBhIDxicj4gYmVoaW5kCiAgICAgICAgICAgICAgICAvLyBJZiBzdHJpcC1iciBhdHRyaWJ1dGUgaXMgcHJvdmlkZWQgdGhlbiB3ZSBzdHJpcCB0aGlzIG91dAogICAgICAgICAgICAgICAgaWYgKCBhdHRycy5zdHJpcEJyICYmIGh0bWwgPT0gJzxicj4nICkgewogICAgICAgICAgICAgICAgICBodG1sID0gJyc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoaHRtbCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH1dKTsKICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iPgogICAgICAgPGRpdiBjb250ZW50ZWRpdGFibGUKICAgICAgICAgICAgbmFtZT0ibXlXaWRnZXQiIG5nLW1vZGVsPSJ1c2VyQ29udGVudCIKICAgICAgICAgICAgc3RyaXAtYnI9InRydWUiCiAgICAgICAgICAgIHJlcXVpcmVkPkNoYW5nZSBtZSE8L2Rpdj4KICAgICAgICA8c3BhbiBuZy1zaG93PSJteUZvcm0ubXlXaWRnZXQuJGVycm9yLnJlcXVpcmVkIj5SZXF1aXJlZCE8L3NwYW4+CiAgICAgICA8aHI+CiAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9InVzZXJDb250ZW50Ij48L3RleHRhcmVhPgogICAgICA8L2Zvcm0+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgIGl0KCdzaG91bGQgZGF0YS1iaW5kIGFuZCBiZWNvbWUgaW52YWxpZCcsIGZ1bmN0aW9uKCkgewogICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnc2FmYXJpJyB8fCBicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdmaXJlZm94JykgewogICAgICAgIC8vIFNhZmFyaURyaXZlciBjYW4ndCBoYW5kbGUgY29udGVudGVkaXRhYmxlCiAgICAgICAgLy8gYW5kIEZpcmVmb3ggZHJpdmVyIGNhbid0IGNsZWFyIGNvbnRlbnRlZGl0YWJsZXMgdmVyeSB3ZWxsCiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciBjb250ZW50RWRpdGFibGUgPSBlbGVtZW50KGJ5LmNzcygnW2NvbnRlbnRlZGl0YWJsZV0nKSk7CiAgICAgIHZhciBjb250ZW50ID0gJ0NoYW5nZSBtZSEnOwoKICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRUZXh0KCkpLnRvRXF1YWwoY29udGVudCk7CgogICAgICBjb250ZW50RWRpdGFibGUuY2xlYXIoKTsKICAgICAgY29udGVudEVkaXRhYmxlLnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkJBQ0tfU1BBQ0UpOwogICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbCgnJyk7CiAgICAgIGV4cGVjdChjb250ZW50RWRpdGFibGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b01hdGNoKC9uZy1pbnZhbGlkLXJlcXVpcmVkLyk7CiAgICB9KTsKICAgIDwvZmlsZT4KICogPC9leGFtcGxlPgogKgogKgogKi8KdmFyIE5nTW9kZWxDb250cm9sbGVyID0gWyckc2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRwYXJzZScsICckYW5pbWF0ZScsICckdGltZW91dCcsICckcm9vdFNjb3BlJywgJyRxJywgJyRpbnRlcnBvbGF0ZScsCiAgICBmdW5jdGlvbigkc2NvcGUsICRleGNlcHRpb25IYW5kbGVyLCAkYXR0ciwgJGVsZW1lbnQsICRwYXJzZSwgJGFuaW1hdGUsICR0aW1lb3V0LCAkcm9vdFNjb3BlLCAkcSwgJGludGVycG9sYXRlKSB7CiAgdGhpcy4kdmlld1ZhbHVlID0gTnVtYmVyLk5hTjsKICB0aGlzLiRtb2RlbFZhbHVlID0gTnVtYmVyLk5hTjsKICB0aGlzLiR2YWxpZGF0b3JzID0ge307CiAgdGhpcy4kYXN5bmNWYWxpZGF0b3JzID0ge307CiAgdGhpcy4kcGFyc2VycyA9IFtdOwogIHRoaXMuJGZvcm1hdHRlcnMgPSBbXTsKICB0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzID0gW107CiAgdGhpcy4kdW50b3VjaGVkID0gdHJ1ZTsKICB0aGlzLiR0b3VjaGVkID0gZmFsc2U7CiAgdGhpcy4kcHJpc3RpbmUgPSB0cnVlOwogIHRoaXMuJGRpcnR5ID0gZmFsc2U7CiAgdGhpcy4kdmFsaWQgPSB0cnVlOwogIHRoaXMuJGludmFsaWQgPSBmYWxzZTsKICB0aGlzLiRlcnJvciA9IHt9OyAvLyBrZWVwIGludmFsaWQga2V5cyBoZXJlCiAgdGhpcy4kJHN1Y2Nlc3MgPSB7fTsgLy8ga2VlcCB2YWxpZCBrZXlzIGhlcmUKICB0aGlzLiRwZW5kaW5nID0gdW5kZWZpbmVkOyAvLyBrZWVwIHBlbmRpbmcga2V5cyBoZXJlCiAgdGhpcy4kbmFtZSA9ICRpbnRlcnBvbGF0ZSgkYXR0ci5uYW1lIHx8ICcnLCBmYWxzZSkoJHNjb3BlKTsKCgogIHZhciBwYXJzZWROZ01vZGVsID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwpLAogICAgICBwZW5kaW5nRGVib3VuY2UgPSBudWxsLAogICAgICBjdHJsID0gdGhpczsKCiAgdmFyIG5nTW9kZWxHZXQgPSBmdW5jdGlvbiBuZ01vZGVsR2V0KCkgewogICAgdmFyIG1vZGVsVmFsdWUgPSBwYXJzZWROZ01vZGVsKCRzY29wZSk7CiAgICBpZiAoY3RybC4kb3B0aW9ucyAmJiBjdHJsLiRvcHRpb25zLmdldHRlclNldHRlciAmJiBpc0Z1bmN0aW9uKG1vZGVsVmFsdWUpKSB7CiAgICAgIG1vZGVsVmFsdWUgPSBtb2RlbFZhbHVlKCk7CiAgICB9CiAgICByZXR1cm4gbW9kZWxWYWx1ZTsKICB9OwoKICB2YXIgbmdNb2RlbFNldCA9IGZ1bmN0aW9uIG5nTW9kZWxTZXQobmV3VmFsdWUpIHsKICAgIHZhciBnZXR0ZXJTZXR0ZXI7CiAgICBpZiAoY3RybC4kb3B0aW9ucyAmJiBjdHJsLiRvcHRpb25zLmdldHRlclNldHRlciAmJgogICAgICAgIGlzRnVuY3Rpb24oZ2V0dGVyU2V0dGVyID0gcGFyc2VkTmdNb2RlbCgkc2NvcGUpKSkgewoKICAgICAgZ2V0dGVyU2V0dGVyKGN0cmwuJG1vZGVsVmFsdWUpOwogICAgfSBlbHNlIHsKICAgICAgcGFyc2VkTmdNb2RlbC5hc3NpZ24oJHNjb3BlLCBjdHJsLiRtb2RlbFZhbHVlKTsKICAgIH0KICB9OwoKICB0aGlzLiQkc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgIGN0cmwuJG9wdGlvbnMgPSBvcHRpb25zOwoKICAgIGlmICghcGFyc2VkTmdNb2RlbC5hc3NpZ24gJiYgKCFvcHRpb25zIHx8ICFvcHRpb25zLmdldHRlclNldHRlcikpIHsKICAgICAgdGhyb3cgJG5nTW9kZWxNaW5FcnIoJ25vbmFzc2lnbicsICJFeHByZXNzaW9uICd7MH0nIGlzIG5vbi1hc3NpZ25hYmxlLiBFbGVtZW50OiB7MX0iLAogICAgICAgICAgJGF0dHIubmdNb2RlbCwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTsKICAgIH0KICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcmVuZGVyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDYWxsZWQgd2hlbiB0aGUgdmlldyBuZWVkcyB0byBiZSB1cGRhdGVkLiBJdCBpcyBleHBlY3RlZCB0aGF0IHRoZSB1c2VyIG9mIHRoZSBuZy1tb2RlbAogICAqIGRpcmVjdGl2ZSB3aWxsIGltcGxlbWVudCB0aGlzIG1ldGhvZC4KICAgKgogICAqIFRoZSBgJHJlbmRlcigpYCBtZXRob2QgaXMgaW52b2tlZCBpbiB0aGUgZm9sbG93aW5nIHNpdHVhdGlvbnM6CiAgICoKICAgKiAqIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgaXMgY2FsbGVkLiAgSWYgd2UgYXJlIHJvbGxpbmcgYmFjayB0aGUgdmlldyB2YWx1ZSB0byB0aGUgbGFzdAogICAqICAgY29tbWl0dGVkIHZhbHVlIHRoZW4gYCRyZW5kZXIoKWAgaXMgY2FsbGVkIHRvIHVwZGF0ZSB0aGUgaW5wdXQgY29udHJvbC4KICAgKiAqIFRoZSB2YWx1ZSByZWZlcmVuY2VkIGJ5IGBuZy1tb2RlbGAgaXMgY2hhbmdlZCBwcm9ncmFtbWF0aWNhbGx5IGFuZCBib3RoIHRoZSBgJG1vZGVsVmFsdWVgIGFuZAogICAqICAgdGhlIGAkdmlld1ZhbHVlYCBhcmUgZGlmZmVyZW50IHRvIGxhc3QgdGltZS4KICAgKgogICAqIFNpbmNlIGBuZy1tb2RlbGAgZG9lcyBub3QgZG8gYSBkZWVwIHdhdGNoLCBgJHJlbmRlcigpYCBpcyBvbmx5IGludm9rZWQgaWYgdGhlIHZhbHVlcyBvZgogICAqIGAkbW9kZWxWYWx1ZWAgYW5kIGAkdmlld1ZhbHVlYCBhcmUgYWN0dWFsbHkgZGlmZmVyZW50IHRvIHRoZWlyIHByZXZpb3VzIHZhbHVlLiBJZiBgJG1vZGVsVmFsdWVgCiAgICogb3IgYCR2aWV3VmFsdWVgIGFyZSBvYmplY3RzIChyYXRoZXIgdGhhbiBhIHN0cmluZyBvciBudW1iZXIpIHRoZW4gYCRyZW5kZXIoKWAgd2lsbCBub3QgYmUKICAgKiBpbnZva2VkIGlmIHlvdSBvbmx5IGNoYW5nZSBhIHByb3BlcnR5IG9uIHRoZSBvYmplY3RzLgogICAqLwogIHRoaXMuJHJlbmRlciA9IG5vb3A7CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRpc0VtcHR5CiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgaXMgZW1wdHkuCiAgICoKICAgKiBGb3IgaW5zdGFuY2UsIHRoZSByZXF1aXJlZCBkaXJlY3RpdmUgZG9lcyB0aGlzIHRvIHdvcmsgb3V0IGlmIHRoZSBpbnB1dCBoYXMgZGF0YSBvciBub3QuCiAgICogVGhlIGRlZmF1bHQgYCRpc0VtcHR5YCBmdW5jdGlvbiBjaGVja3Mgd2hldGhlciB0aGUgdmFsdWUgaXMgYHVuZGVmaW5lZGAsIGAnJ2AsIGBudWxsYCBvciBgTmFOYC4KICAgKgogICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBmb3IgaW5wdXQgZGlyZWN0aXZlcyB3aG9zZSBjb25jZXB0IG9mIGJlaW5nIGVtcHR5IGlzIGRpZmZlcmVudCB0byB0aGUKICAgKiBkZWZhdWx0LiBUaGUgYGNoZWNrYm94SW5wdXRUeXBlYCBkaXJlY3RpdmUgZG9lcyB0aGlzIGJlY2F1c2UgaW4gaXRzIGNhc2UgYSB2YWx1ZSBvZiBgZmFsc2VgCiAgICogaW1wbGllcyBlbXB0eS4KICAgKgogICAqIEBwYXJhbSB7Kn0gdmFsdWUgTW9kZWwgdmFsdWUgdG8gY2hlY2suCiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBlbXB0eS4KICAgKi8KICB0aGlzLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTsKICB9OwoKICB2YXIgcGFyZW50Rm9ybSA9ICRlbGVtZW50LmluaGVyaXRlZERhdGEoJyRmb3JtQ29udHJvbGxlcicpIHx8IG51bGxGb3JtQ3RybCwKICAgICAgY3VycmVudFZhbGlkYXRpb25SdW5JZCA9IDA7CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWYWxpZGl0eQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogQ2hhbmdlIHRoZSB2YWxpZGl0eSBzdGF0ZSwgYW5kIG5vdGlmaWVzIHRoZSBmb3JtLgogICAqCiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB3aXRoaW4gJHBhcnNlcnMvJGZvcm1hdHRlcnMuIEhvd2V2ZXIsIGlmIHBvc3NpYmxlLCBwbGVhc2UgdXNlIHRoZQogICAqICAgICAgICBgbmdNb2RlbC4kdmFsaWRhdG9yc2AgcGlwZWxpbmUgd2hpY2ggaXMgZGVzaWduZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5LgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIHRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGFzc2lnbgogICAqICAgICAgICB0byBgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV1gIGFuZCBgJHBlbmRpbmdbdmFsaWRhdGlvbkVycm9yS2V5XWAKICAgKiAgICAgICAgc28gdGhhdCBpdCBpcyBhdmFpbGFibGUgZm9yIGRhdGEtYmluZGluZy4KICAgKiAgICAgICAgVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHNob3VsZCBiZSBpbiBjYW1lbENhc2UgYW5kIHdpbGwgZ2V0IGNvbnZlcnRlZCBpbnRvIGRhc2gtY2FzZQogICAqICAgICAgICBmb3IgY2xhc3MgbmFtZS4gRXhhbXBsZTogYG15RXJyb3JgIHdpbGwgcmVzdWx0IGluIGBuZy12YWxpZC1teS1lcnJvcmAgYW5kIGBuZy1pbnZhbGlkLW15LWVycm9yYAogICAqICAgICAgICBjbGFzcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzICBge3tzb21lRm9ybS5zb21lQ29udHJvbC4kZXJyb3IubXlFcnJvcn19YCAuCiAgICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpLCBpbnZhbGlkIChmYWxzZSksIHBlbmRpbmcgKHVuZGVmaW5lZCksCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIG9yIHNraXBwZWQgKG51bGwpLgogICAqLwogIGFkZFNldFZhbGlkaXR5TWV0aG9kKHsKICAgIGN0cmw6IHRoaXMsCiAgICAkZWxlbWVudDogJGVsZW1lbnQsCiAgICBzZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsKICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IHRydWU7CiAgICB9LAogICAgdW5zZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsKICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07CiAgICB9LAogICAgcGFyZW50Rm9ybTogcGFyZW50Rm9ybSwKICAgICRhbmltYXRlOiAkYW5pbWF0ZQogIH0pOwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0UHJpc3RpbmUKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lIHN0YXRlLgogICAqCiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmUKICAgKiBzdGF0ZSAobmctcHJpc3RpbmUgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJpc3RpbmUgd2hlbiB0aGUgbW9kZWwgaGFzIG5vdCBiZWVuIGNoYW5nZWQKICAgKiBmcm9tIHdoZW4gZmlyc3QgY29tcGlsZWQgd2l0aGluIHRoZW4gZm9ybS4KICAgKi8KICB0aGlzLiRzZXRQcmlzdGluZSA9IGZ1bmN0aW9uICgpIHsKICAgIGN0cmwuJGRpcnR5ID0gZmFsc2U7CiAgICBjdHJsLiRwcmlzdGluZSA9IHRydWU7CiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcygkZWxlbWVudCwgRElSVFlfQ0xBU1MpOwogICAgJGFuaW1hdGUuYWRkQ2xhc3MoJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VW50b3VjaGVkCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyB1bnRvdWNoZWQgc3RhdGUuCiAgICoKICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLXRvdWNoZWQnIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzCiAgICogdW50b3VjaGVkIHN0YXRlIChuZy11bnRvdWNoZWQgY2xhc3MpLiBVcG9uIGNvbXBpbGF0aW9uLCBhIG1vZGVsIGlzIHNldCBhcyB1bnRvdWNoZWQKICAgKiBieSBkZWZhdWx0LCBob3dldmVyIHRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gcmVzdG9yZSB0aGF0IHN0YXRlIGlmIHRoZSBtb2RlbCBoYXMKICAgKiBhbHJlYWR5IGJlZW4gdG91Y2hlZCBieSB0aGUgdXNlci4KICAgKi8KICB0aGlzLiRzZXRVbnRvdWNoZWQgPSBmdW5jdGlvbigpIHsKICAgIGN0cmwuJHRvdWNoZWQgPSBmYWxzZTsKICAgIGN0cmwuJHVudG91Y2hlZCA9IHRydWU7CiAgICAkYW5pbWF0ZS5zZXRDbGFzcygkZWxlbWVudCwgVU5UT1VDSEVEX0NMQVNTLCBUT1VDSEVEX0NMQVNTKTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VG91Y2hlZAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgdG91Y2hlZCBzdGF0ZS4KICAgKgogICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSAnbmctdW50b3VjaGVkJyBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0cwogICAqIHRvdWNoZWQgc3RhdGUgKG5nLXRvdWNoZWQgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgdG91Y2hlZCB3aGVuIHRoZSB1c2VyIGhhcwogICAqIGZpcnN0IGludGVyYWN0ZWQgKGZvY3Vzc2VkKSBvbiB0aGUgbW9kZWwgaW5wdXQgZWxlbWVudCBhbmQgdGhlbiBzaGlmdGVkIGZvY3VzIGF3YXkgKGJsdXJyZWQpCiAgICogZnJvbSB0aGUgaW5wdXQgZWxlbWVudC4KICAgKi8KICB0aGlzLiRzZXRUb3VjaGVkID0gZnVuY3Rpb24oKSB7CiAgICBjdHJsLiR0b3VjaGVkID0gdHJ1ZTsKICAgIGN0cmwuJHVudG91Y2hlZCA9IGZhbHNlOwogICAgJGFuaW1hdGUuc2V0Q2xhc3MoJGVsZW1lbnQsIFRPVUNIRURfQ0xBU1MsIFVOVE9VQ0hFRF9DTEFTUyk7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJvbGxiYWNrVmlld1ZhbHVlCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDYW5jZWwgYW4gdXBkYXRlIGFuZCByZXNldCB0aGUgaW5wdXQgZWxlbWVudCdzIHZhbHVlIHRvIHByZXZlbnQgYW4gdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLAogICAqIHdoaWNoIG1heSBiZSBjYXVzZWQgYnkgYSBwZW5kaW5nIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUKICAgKiBmdXR1cmUgZXZlbnQuCiAgICoKICAgKiBJZiB5b3UgaGF2ZSBhbiBpbnB1dCB0aGF0IHVzZXMgYG5nLW1vZGVsLW9wdGlvbnNgIHRvIHNldCB1cCBkZWJvdW5jZWQgZXZlbnRzIG9yIGV2ZW50cyBzdWNoCiAgICogYXMgYmx1ciB5b3UgY2FuIGhhdmUgYSBzaXR1YXRpb24gd2hlcmUgdGhlcmUgaXMgYSBwZXJpb2Qgd2hlbiB0aGUgYCR2aWV3VmFsdWVgCiAgICogaXMgb3V0IG9mIHN5bmNoIHdpdGggdGhlIG5nTW9kZWwncyBgJG1vZGVsVmFsdWVgLgogICAqCiAgICogSW4gdGhpcyBjYXNlLCB5b3UgY2FuIHJ1biBpbnRvIGRpZmZpY3VsdGllcyBpZiB5b3UgdHJ5IHRvIHVwZGF0ZSB0aGUgbmdNb2RlbCdzIGAkbW9kZWxWYWx1ZWAKICAgKiBwcm9ncmFtbWF0aWNhbGx5IGJlZm9yZSB0aGVzZSBkZWJvdW5jZWQvZnV0dXJlIGV2ZW50cyBoYXZlIHJlc29sdmVkL29jY3VycmVkLCBiZWNhdXNlIEFuZ3VsYXIncwogICAqIGRpcnR5IGNoZWNraW5nIG1lY2hhbmlzbSBpcyBub3QgYWJsZSB0byB0ZWxsIHdoZXRoZXIgdGhlIG1vZGVsIGhhcyBhY3R1YWxseSBjaGFuZ2VkIG9yIG5vdC4KICAgKgogICAqIFRoZSBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBwcm9ncmFtbWF0aWNhbGx5IGNoYW5naW5nIHRoZSBtb2RlbCBvZiBhbgogICAqIGlucHV0IHdoaWNoIG1heSBoYXZlIHN1Y2ggZXZlbnRzIHBlbmRpbmcuIFRoaXMgaXMgaW1wb3J0YW50IGluIG9yZGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZQogICAqIGlucHV0IGZpZWxkIHdpbGwgYmUgdXBkYXRlZCB3aXRoIHRoZSBuZXcgbW9kZWwgdmFsdWUgYW5kIGFueSBwZW5kaW5nIG9wZXJhdGlvbnMgYXJlIGNhbmNlbGxlZC4KICAgKgogICAqIDxleGFtcGxlIG5hbWU9Im5nLW1vZGVsLWNhbmNlbC11cGRhdGUiIG1vZHVsZT0iY2FuY2VsLXVwZGF0ZS1leGFtcGxlIj4KICAgKiAgIDxmaWxlIG5hbWU9ImFwcC5qcyI+CiAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdjYW5jZWwtdXBkYXRlLWV4YW1wbGUnLCBbXSkKICAgKgogICAqICAgICAuY29udHJvbGxlcignQ2FuY2VsVXBkYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICogICAgICAgJHNjb3BlLnJlc2V0V2l0aENhbmNlbCA9IGZ1bmN0aW9uIChlKSB7CiAgICogICAgICAgICBpZiAoZS5rZXlDb2RlID09IDI3KSB7CiAgICogICAgICAgICAgICRzY29wZS5teUZvcm0ubXlJbnB1dDEuJHJvbGxiYWNrVmlld1ZhbHVlKCk7CiAgICogICAgICAgICAgICRzY29wZS5teVZhbHVlID0gJyc7CiAgICogICAgICAgICB9CiAgICogICAgICAgfTsKICAgKiAgICAgICAkc2NvcGUucmVzZXRXaXRob3V0Q2FuY2VsID0gZnVuY3Rpb24gKGUpIHsKICAgKiAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpIHsKICAgKiAgICAgICAgICAgJHNjb3BlLm15VmFsdWUgPSAnJzsKICAgKiAgICAgICAgIH0KICAgKiAgICAgICB9OwogICAqICAgICB9XSk7CiAgICogICA8L2ZpbGU+CiAgICogICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDYW5jZWxVcGRhdGVDb250cm9sbGVyIj4KICAgKiAgICAgICA8cD5UcnkgdHlwaW5nIHNvbWV0aGluZyBpbiBlYWNoIGlucHV0LiAgU2VlIHRoYXQgdGhlIG1vZGVsIG9ubHkgdXBkYXRlcyB3aGVuIHlvdQogICAqICAgICAgICAgIGJsdXIgb2ZmIHRoZSBpbnB1dC4KICAgKiAgICAgICAgPC9wPgogICAqICAgICAgICA8cD5Ob3cgc2VlIHdoYXQgaGFwcGVucyBpZiB5b3Ugc3RhcnQgdHlwaW5nIHRoZW4gcHJlc3MgdGhlIEVzY2FwZSBrZXk8L3A+CiAgICoKICAgKiAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLW1vZGVsLW9wdGlvbnM9InsgdXBkYXRlT246ICdibHVyJyB9Ij4KICAgKiAgICAgICAgIDxwPldpdGggJHJvbGxiYWNrVmlld1ZhbHVlKCk8L3A+CiAgICogICAgICAgICA8aW5wdXQgbmFtZT0ibXlJbnB1dDEiIG5nLW1vZGVsPSJteVZhbHVlIiBuZy1rZXlkb3duPSJyZXNldFdpdGhDYW5jZWwoJGV2ZW50KSI+PGJyLz4KICAgKiAgICAgICAgIG15VmFsdWU6ICJ7eyBteVZhbHVlIH19IgogICAqCiAgICogICAgICAgICA8cD5XaXRob3V0ICRyb2xsYmFja1ZpZXdWYWx1ZSgpPC9wPgogICAqICAgICAgICAgPGlucHV0IG5hbWU9Im15SW5wdXQyIiBuZy1tb2RlbD0ibXlWYWx1ZSIgbmcta2V5ZG93bj0icmVzZXRXaXRob3V0Q2FuY2VsKCRldmVudCkiPjxici8+CiAgICogICAgICAgICBteVZhbHVlOiAie3sgbXlWYWx1ZSB9fSIKICAgKiAgICAgICA8L2Zvcm0+CiAgICogICAgIDwvZGl2PgogICAqICAgPC9maWxlPgogICAqIDwvZXhhbXBsZT4KICAgKi8KICB0aGlzLiRyb2xsYmFja1ZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkgewogICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7CiAgICBjdHJsLiR2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTsKICAgIGN0cmwuJHJlbmRlcigpOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0ZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUnVucyBlYWNoIG9mIHRoZSByZWdpc3RlcmVkIHZhbGlkYXRvcnMgKGZpcnN0IHN5bmNocm9ub3VzIHZhbGlkYXRvcnMgYW5kIHRoZW4gYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMpLgogICAqLwogIHRoaXMuJHZhbGlkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAvLyBpZ25vcmUgJHZhbGlkYXRlIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZAogICAgaWYgKGlzTnVtYmVyKGN0cmwuJG1vZGVsVmFsdWUpICYmIGlzTmFOKGN0cmwuJG1vZGVsVmFsdWUpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMuJCRwYXJzZUFuZFZhbGlkYXRlKCk7CiAgfTsKCiAgdGhpcy4kJHJ1blZhbGlkYXRvcnMgPSBmdW5jdGlvbihwYXJzZVZhbGlkLCBtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIGRvbmVDYWxsYmFjaykgewogICAgY3VycmVudFZhbGlkYXRpb25SdW5JZCsrOwogICAgdmFyIGxvY2FsVmFsaWRhdGlvblJ1bklkID0gY3VycmVudFZhbGlkYXRpb25SdW5JZDsKCiAgICAvLyBjaGVjayBwYXJzZXIgZXJyb3IKICAgIGlmICghcHJvY2Vzc1BhcnNlRXJyb3JzKHBhcnNlVmFsaWQpKSB7CiAgICAgIHZhbGlkYXRpb25Eb25lKGZhbHNlKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgaWYgKCFwcm9jZXNzU3luY1ZhbGlkYXRvcnMoKSkgewogICAgICB2YWxpZGF0aW9uRG9uZShmYWxzZSk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHByb2Nlc3NBc3luY1ZhbGlkYXRvcnMoKTsKCiAgICBmdW5jdGlvbiBwcm9jZXNzUGFyc2VFcnJvcnMocGFyc2VWYWxpZCkgewogICAgICB2YXIgZXJyb3JLZXkgPSBjdHJsLiQkcGFyc2VyTmFtZSB8fCAncGFyc2UnOwogICAgICBpZiAocGFyc2VWYWxpZCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgc2V0VmFsaWRpdHkoZXJyb3JLZXksIG51bGwpOwogICAgICB9IGVsc2UgewogICAgICAgIHNldFZhbGlkaXR5KGVycm9yS2V5LCBwYXJzZVZhbGlkKTsKICAgICAgICBpZiAoIXBhcnNlVmFsaWQpIHsKICAgICAgICAgIGZvckVhY2goY3RybC4kdmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkgewogICAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTsKICAgICAgICAgIH0pOwogICAgICAgICAgZm9yRWFjaChjdHJsLiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHsKICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gcHJvY2Vzc1N5bmNWYWxpZGF0b3JzKCkgewogICAgICB2YXIgc3luY1ZhbGlkYXRvcnNWYWxpZCA9IHRydWU7CiAgICAgIGZvckVhY2goY3RybC4kdmFsaWRhdG9ycywgZnVuY3Rpb24odmFsaWRhdG9yLCBuYW1lKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IHZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpOwogICAgICAgIHN5bmNWYWxpZGF0b3JzVmFsaWQgPSBzeW5jVmFsaWRhdG9yc1ZhbGlkICYmIHJlc3VsdDsKICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCByZXN1bHQpOwogICAgICB9KTsKICAgICAgaWYgKCFzeW5jVmFsaWRhdG9yc1ZhbGlkKSB7CiAgICAgICAgZm9yRWFjaChjdHJsLiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHsKICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBwcm9jZXNzQXN5bmNWYWxpZGF0b3JzKCkgewogICAgICB2YXIgdmFsaWRhdG9yUHJvbWlzZXMgPSBbXTsKICAgICAgdmFyIGFsbFZhbGlkID0gdHJ1ZTsKICAgICAgZm9yRWFjaChjdHJsLiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHZhbGlkYXRvciwgbmFtZSkgewogICAgICAgIHZhciBwcm9taXNlID0gdmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSk7CiAgICAgICAgaWYgKCFpc1Byb21pc2VMaWtlKHByb21pc2UpKSB7CiAgICAgICAgICB0aHJvdyAkbmdNb2RlbE1pbkVycigiJGFzeW5jVmFsaWRhdG9ycyIsCiAgICAgICAgICAgICJFeHBlY3RlZCBhc3luY2hyb25vdXMgdmFsaWRhdG9yIHRvIHJldHVybiBhIHByb21pc2UgYnV0IGdvdCAnezB9JyBpbnN0ZWFkLiIsIHByb21pc2UpOwogICAgICAgIH0KICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCB1bmRlZmluZWQpOwogICAgICAgIHZhbGlkYXRvclByb21pc2VzLnB1c2gocHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkgewogICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgdHJ1ZSk7CiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICAgIGFsbFZhbGlkID0gZmFsc2U7CiAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBmYWxzZSk7CiAgICAgICAgfSkpOwogICAgICB9KTsKICAgICAgaWYgKCF2YWxpZGF0b3JQcm9taXNlcy5sZW5ndGgpIHsKICAgICAgICB2YWxpZGF0aW9uRG9uZSh0cnVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAkcS5hbGwodmFsaWRhdG9yUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YWxpZGF0aW9uRG9uZShhbGxWYWxpZCk7CiAgICAgICAgfSwgbm9vcCk7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBzZXRWYWxpZGl0eShuYW1lLCBpc1ZhbGlkKSB7CiAgICAgIGlmIChsb2NhbFZhbGlkYXRpb25SdW5JZCA9PT0gY3VycmVudFZhbGlkYXRpb25SdW5JZCkgewogICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdmFsaWRhdGlvbkRvbmUoYWxsVmFsaWQpIHsKICAgICAgaWYgKGxvY2FsVmFsaWRhdGlvblJ1bklkID09PSBjdXJyZW50VmFsaWRhdGlvblJ1bklkKSB7CgogICAgICAgIGRvbmVDYWxsYmFjayhhbGxWYWxpZCk7CiAgICAgIH0KICAgIH0KICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkY29tbWl0Vmlld1ZhbHVlCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDb21taXQgYSBwZW5kaW5nIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYC4KICAgKgogICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZQogICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiB0aGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmAKICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy4KICAgKi8KICB0aGlzLiRjb21taXRWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHsKICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiR2aWV3VmFsdWU7CgogICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7CgogICAgLy8gSWYgdGhlIHZpZXcgdmFsdWUgaGFzIG5vdCBjaGFuZ2VkIHRoZW4gd2Ugc2hvdWxkIGp1c3QgZXhpdCwgZXhjZXB0IGluIHRoZSBjYXNlIHdoZXJlIHRoZXJlIGlzCiAgICAvLyBhIG5hdGl2ZSB2YWxpZGF0b3Igb24gdGhlIGVsZW1lbnQuIEluIHRoaXMgY2FzZSB0aGUgdmFsaWRhdGlvbiBzdGF0ZSBtYXkgaGF2ZSBjaGFuZ2VkIGV2ZW4gdGhvdWdoCiAgICAvLyB0aGUgdmlld1ZhbHVlIGhhcyBzdGF5ZWQgZW1wdHkuCiAgICBpZiAoY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPT09IHZpZXdWYWx1ZSAmJiAodmlld1ZhbHVlICE9PSAnJyB8fCAhY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID0gdmlld1ZhbHVlOwoKICAgIC8vIGNoYW5nZSB0byBkaXJ0eQogICAgaWYgKGN0cmwuJHByaXN0aW5lKSB7CiAgICAgIGN0cmwuJGRpcnR5ID0gdHJ1ZTsKICAgICAgY3RybC4kcHJpc3RpbmUgPSBmYWxzZTsKICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTsKICAgICAgJGFuaW1hdGUuYWRkQ2xhc3MoJGVsZW1lbnQsIERJUlRZX0NMQVNTKTsKICAgICAgcGFyZW50Rm9ybS4kc2V0RGlydHkoKTsKICAgIH0KICAgIHRoaXMuJCRwYXJzZUFuZFZhbGlkYXRlKCk7CiAgfTsKCiAgdGhpcy4kJHBhcnNlQW5kVmFsaWRhdGUgPSBmdW5jdGlvbigpIHsKICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTsKICAgIHZhciBtb2RlbFZhbHVlID0gdmlld1ZhbHVlOwogICAgdmFyIHBhcnNlclZhbGlkID0gaXNVbmRlZmluZWQobW9kZWxWYWx1ZSkgPyB1bmRlZmluZWQgOiB0cnVlOwoKICAgIGlmIChwYXJzZXJWYWxpZCkgewogICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY3RybC4kcGFyc2Vycy5sZW5ndGg7IGkrKykgewogICAgICAgIG1vZGVsVmFsdWUgPSBjdHJsLiRwYXJzZXJzW2ldKG1vZGVsVmFsdWUpOwogICAgICAgIGlmIChpc1VuZGVmaW5lZChtb2RlbFZhbHVlKSkgewogICAgICAgICAgcGFyc2VyVmFsaWQgPSBmYWxzZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYgKGlzTnVtYmVyKGN0cmwuJG1vZGVsVmFsdWUpICYmIGlzTmFOKGN0cmwuJG1vZGVsVmFsdWUpKSB7CiAgICAgIC8vIGN0cmwuJG1vZGVsVmFsdWUgaGFzIG5vdCBiZWVuIHRvdWNoZWQgeWV0Li4uCiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBuZ01vZGVsR2V0KCk7CiAgICB9CiAgICB2YXIgcHJldk1vZGVsVmFsdWUgPSBjdHJsLiRtb2RlbFZhbHVlOwogICAgdmFyIGFsbG93SW52YWxpZCA9IGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy5hbGxvd0ludmFsaWQ7CiAgICBpZiAoYWxsb3dJbnZhbGlkKSB7CiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBtb2RlbFZhbHVlOwogICAgICB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpOwogICAgfQogICAgY3RybC4kJHJ1blZhbGlkYXRvcnMocGFyc2VyVmFsaWQsIG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZnVuY3Rpb24oYWxsVmFsaWQpIHsKICAgICAgaWYgKCFhbGxvd0ludmFsaWQpIHsKICAgICAgICAvLyBOb3RlOiBEb24ndCBjaGVjayBjdHJsLiR2YWxpZCBoZXJlLCBhcyB3ZSBjb3VsZCBoYXZlCiAgICAgICAgLy8gZXh0ZXJuYWwgdmFsaWRhdG9ycyAoZS5nLiBjYWxjdWxhdGVkIG9uIHRoZSBzZXJ2ZXIpLAogICAgICAgIC8vIHRoYXQganVzdCBjYWxsICRzZXRWYWxpZGl0eSBhbmQgbmVlZCB0aGUgbW9kZWwgdmFsdWUKICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlaXIgdmFsaWRpdHkuCiAgICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IGFsbFZhbGlkID8gbW9kZWxWYWx1ZSA6IHVuZGVmaW5lZDsKICAgICAgICB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpOwogICAgICB9CiAgICB9KTsKCiAgICBmdW5jdGlvbiB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpIHsKICAgICAgaWYgKGN0cmwuJG1vZGVsVmFsdWUgIT09IHByZXZNb2RlbFZhbHVlKSB7CiAgICAgICAgY3RybC4kJHdyaXRlTW9kZWxUb1Njb3BlKCk7CiAgICAgIH0KICAgIH0KICB9OwoKICB0aGlzLiQkd3JpdGVNb2RlbFRvU2NvcGUgPSBmdW5jdGlvbigpIHsKICAgIG5nTW9kZWxTZXQoY3RybC4kbW9kZWxWYWx1ZSk7CiAgICBmb3JFYWNoKGN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyKSB7CiAgICAgIHRyeSB7CiAgICAgICAgbGlzdGVuZXIoKTsKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgIH0KICAgIH0pOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWaWV3VmFsdWUKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFVwZGF0ZSB0aGUgdmlldyB2YWx1ZS4KICAgKgogICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhbiBpbnB1dCBkaXJlY3RpdmUgd2FudCB0byBjaGFuZ2UgdGhlIHZpZXcgdmFsdWU7IHR5cGljYWxseSwKICAgKiB0aGlzIGlzIGRvbmUgZnJvbSB3aXRoaW4gYSBET00gZXZlbnQgaGFuZGxlci4KICAgKgogICAqIEZvciBleGFtcGxlIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9IGNhbGxzIGl0IHdoZW4gdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBjaGFuZ2VzIGFuZAogICAqIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH0gY2FsbHMgaXQgd2hlbiBhbiBvcHRpb24gaXMgc2VsZWN0ZWQuCiAgICoKICAgKiBJZiB0aGUgbmV3IGB2YWx1ZWAgaXMgYW4gb2JqZWN0IChyYXRoZXIgdGhhbiBhIHN0cmluZyBvciBhIG51bWJlciksIHdlIHNob3VsZCBtYWtlIGEgY29weSBvZiB0aGUKICAgKiBvYmplY3QgYmVmb3JlIHBhc3NpbmcgaXQgdG8gYCRzZXRWaWV3VmFsdWVgLiAgVGhpcyBpcyBiZWNhdXNlIGBuZ01vZGVsYCBkb2VzIG5vdCBwZXJmb3JtIGEgZGVlcAogICAqIHdhdGNoIG9mIG9iamVjdHMsIGl0IG9ubHkgbG9va3MgZm9yIGEgY2hhbmdlIG9mIGlkZW50aXR5LiBJZiB5b3Ugb25seSBjaGFuZ2UgdGhlIHByb3BlcnR5IG9mCiAgICogdGhlIG9iamVjdCB0aGVuIG5nTW9kZWwgd2lsbCBub3QgcmVhbGlzZSB0aGF0IHRoZSBvYmplY3QgaGFzIGNoYW5nZWQgYW5kIHdpbGwgbm90IGludm9rZSB0aGUKICAgKiBgJHBhcnNlcnNgIGFuZCBgJHZhbGlkYXRvcnNgIHBpcGVsaW5lcy4KICAgKgogICAqIEZvciB0aGlzIHJlYXNvbiwgeW91IHNob3VsZCBub3QgY2hhbmdlIHByb3BlcnRpZXMgb2YgdGhlIGNvcHkgb25jZSBpdCBoYXMgYmVlbiBwYXNzZWQgdG8KICAgKiBgJHNldFZpZXdWYWx1ZWAuIE90aGVyd2lzZSB5b3UgbWF5IGNhdXNlIHRoZSBtb2RlbCB2YWx1ZSBvbiB0aGUgc2NvcGUgdG8gY2hhbmdlIGluY29ycmVjdGx5LgogICAqCiAgICogV2hlbiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQsIHRoZSBuZXcgYHZhbHVlYCB3aWxsIGJlIHN0YWdlZCBmb3IgY29tbWl0dGluZyB0aHJvdWdoIHRoZSBgJHBhcnNlcnNgCiAgICogYW5kIGAkdmFsaWRhdG9yc2AgcGlwZWxpbmVzLiBJZiB0aGVyZSBhcmUgbm8gc3BlY2lhbCB7QGxpbmsgbmdNb2RlbE9wdGlvbnN9IHNwZWNpZmllZCB0aGVuIHRoZSBzdGFnZWQKICAgKiB2YWx1ZSBzZW50IGRpcmVjdGx5IGZvciBwcm9jZXNzaW5nLCBmaW5hbGx5IHRvIGJlIGFwcGxpZWQgdG8gYCRtb2RlbFZhbHVlYCBhbmQgdGhlbiB0aGUKICAgKiAqKmV4cHJlc3Npb24qKiBzcGVjaWZpZWQgaW4gdGhlIGBuZy1tb2RlbGAgYXR0cmlidXRlLgogICAqCiAgICogTGFzdGx5LCBhbGwgdGhlIHJlZ2lzdGVyZWQgY2hhbmdlIGxpc3RlbmVycywgaW4gdGhlIGAkdmlld0NoYW5nZUxpc3RlbmVyc2AgbGlzdCwgYXJlIGNhbGxlZC4KICAgKgogICAqIEluIGNhc2UgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9IGRpcmVjdGl2ZSBpcyB1c2VkIHdpdGggYHVwZGF0ZU9uYAogICAqIGFuZCB0aGUgYGRlZmF1bHRgIHRyaWdnZXIgaXMgbm90IGxpc3RlZCwgYWxsIHRob3NlIGFjdGlvbnMgd2lsbCByZW1haW4gcGVuZGluZyB1bnRpbCBvbmUgb2YgdGhlCiAgICogYHVwZGF0ZU9uYCBldmVudHMgaXMgdHJpZ2dlcmVkIG9uIHRoZSBET00gZWxlbWVudC4KICAgKiBBbGwgdGhlc2UgYWN0aW9ucyB3aWxsIGJlIGRlYm91bmNlZCBpZiB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30KICAgKiBkaXJlY3RpdmUgaXMgdXNlZCB3aXRoIGEgY3VzdG9tIGRlYm91bmNlIGZvciB0aGlzIHBhcnRpY3VsYXIgZXZlbnQuCiAgICoKICAgKiBOb3RlIHRoYXQgY2FsbGluZyB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IHRyaWdnZXIgYSBgJGRpZ2VzdGAuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgZnJvbSB0aGUgdmlldy4KICAgKiBAcGFyYW0ge3N0cmluZ30gdHJpZ2dlciBFdmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgdXBkYXRlLgogICAqLwogIHRoaXMuJHNldFZpZXdWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCB0cmlnZ2VyKSB7CiAgICBjdHJsLiR2aWV3VmFsdWUgPSB2YWx1ZTsKICAgIGlmICghY3RybC4kb3B0aW9ucyB8fCBjdHJsLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCkgewogICAgICBjdHJsLiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQodHJpZ2dlcik7CiAgICB9CiAgfTsKCiAgdGhpcy4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0ID0gZnVuY3Rpb24odHJpZ2dlcikgewogICAgdmFyIGRlYm91bmNlRGVsYXkgPSAwLAogICAgICAgIG9wdGlvbnMgPSBjdHJsLiRvcHRpb25zLAogICAgICAgIGRlYm91bmNlOwoKICAgIGlmIChvcHRpb25zICYmIGlzRGVmaW5lZChvcHRpb25zLmRlYm91bmNlKSkgewogICAgICBkZWJvdW5jZSA9IG9wdGlvbnMuZGVib3VuY2U7CiAgICAgIGlmIChpc051bWJlcihkZWJvdW5jZSkpIHsKICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2U7CiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZGVib3VuY2VbdHJpZ2dlcl0pKSB7CiAgICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlW3RyaWdnZXJdOwogICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGRlYm91bmNlWydkZWZhdWx0J10pKSB7CiAgICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlWydkZWZhdWx0J107CiAgICAgIH0KICAgIH0KCiAgICAkdGltZW91dC5jYW5jZWwocGVuZGluZ0RlYm91bmNlKTsKICAgIGlmIChkZWJvdW5jZURlbGF5KSB7CiAgICAgIHBlbmRpbmdEZWJvdW5jZSA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgIGN0cmwuJGNvbW1pdFZpZXdWYWx1ZSgpOwogICAgICB9LCBkZWJvdW5jZURlbGF5KTsKICAgIH0gZWxzZSBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7CiAgICAgIGN0cmwuJGNvbW1pdFZpZXdWYWx1ZSgpOwogICAgfSBlbHNlIHsKICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICBjdHJsLiRjb21taXRWaWV3VmFsdWUoKTsKICAgICAgfSk7CiAgICB9CiAgfTsKCiAgLy8gbW9kZWwgLT4gdmFsdWUKICAvLyBOb3RlOiB3ZSBjYW5ub3QgdXNlIGEgbm9ybWFsIHNjb3BlLiR3YXRjaCBhcyB3ZSB3YW50IHRvIGRldGVjdCB0aGUgZm9sbG93aW5nOgogIC8vIDEuIHNjb3BlIHZhbHVlIGlzICdhJwogIC8vIDIuIHVzZXIgZW50ZXJzICdiJwogIC8vIDMuIG5nLWNoYW5nZSBraWNrcyBpbiBhbmQgcmV2ZXJ0cyBzY29wZSB2YWx1ZSB0byAnYScKICAvLyAgICAtPiBzY29wZSB2YWx1ZSBkaWQgbm90IGNoYW5nZSBzaW5jZSB0aGUgbGFzdCBkaWdlc3QgYXMKICAvLyAgICAgICBuZy1jaGFuZ2UgZXhlY3V0ZXMgaW4gYXBwbHkgcGhhc2UKICAvLyA0LiB2aWV3IHNob3VsZCBiZSBjaGFuZ2VkIGJhY2sgdG8gJ2EnCiAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiBuZ01vZGVsV2F0Y2goKSB7CiAgICB2YXIgbW9kZWxWYWx1ZSA9IG5nTW9kZWxHZXQoKTsKCiAgICAvLyBpZiBzY29wZSBtb2RlbCB2YWx1ZSBhbmQgbmdNb2RlbCB2YWx1ZSBhcmUgb3V0IG9mIHN5bmMKICAgIC8vIFRPRE8ocGVyZik6IHdoeSBub3QgbW92ZSB0aGlzIHRvIHRoZSBhY3Rpb24gZm4/CiAgICBpZiAobW9kZWxWYWx1ZSAhPT0gY3RybC4kbW9kZWxWYWx1ZSkgewogICAgICBjdHJsLiRtb2RlbFZhbHVlID0gbW9kZWxWYWx1ZTsKCiAgICAgIHZhciBmb3JtYXR0ZXJzID0gY3RybC4kZm9ybWF0dGVycywKICAgICAgICAgIGlkeCA9IGZvcm1hdHRlcnMubGVuZ3RoOwoKICAgICAgdmFyIHZpZXdWYWx1ZSA9IG1vZGVsVmFsdWU7CiAgICAgIHdoaWxlKGlkeC0tKSB7CiAgICAgICAgdmlld1ZhbHVlID0gZm9ybWF0dGVyc1tpZHhdKHZpZXdWYWx1ZSk7CiAgICAgIH0KICAgICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmlld1ZhbHVlKSB7CiAgICAgICAgY3RybC4kdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7CiAgICAgICAgY3RybC4kcmVuZGVyKCk7CgogICAgICAgIGN0cmwuJCRydW5WYWxpZGF0b3JzKHVuZGVmaW5lZCwgbW9kZWxWYWx1ZSwgdmlld1ZhbHVlLCBub29wKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBtb2RlbFZhbHVlOwogIH0pOwp9XTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ01vZGVsCiAqCiAqIEBlbGVtZW50IGlucHV0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nTW9kZWxgIGRpcmVjdGl2ZSBiaW5kcyBhbiBgaW5wdXRgLGBzZWxlY3RgLCBgdGV4dGFyZWFgIChvciBjdXN0b20gZm9ybSBjb250cm9sKSB0byBhCiAqIHByb3BlcnR5IG9uIHRoZSBzY29wZSB1c2luZyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBOZ01vZGVsQ29udHJvbGxlcn0sCiAqIHdoaWNoIGlzIGNyZWF0ZWQgYW5kIGV4cG9zZWQgYnkgdGhpcyBkaXJlY3RpdmUuCiAqCiAqIGBuZ01vZGVsYCBpcyByZXNwb25zaWJsZSBmb3I6CiAqCiAqIC0gQmluZGluZyB0aGUgdmlldyBpbnRvIHRoZSBtb2RlbCwgd2hpY2ggb3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBpbnB1dGAsIGB0ZXh0YXJlYWAgb3IgYHNlbGVjdGAKICogICByZXF1aXJlLgogKiAtIFByb3ZpZGluZyB2YWxpZGF0aW9uIGJlaGF2aW9yIChpLmUuIHJlcXVpcmVkLCBudW1iZXIsIGVtYWlsLCB1cmwpLgogKiAtIEtlZXBpbmcgdGhlIHN0YXRlIG9mIHRoZSBjb250cm9sICh2YWxpZC9pbnZhbGlkLCBkaXJ0eS9wcmlzdGluZSwgdG91Y2hlZC91bnRvdWNoZWQsIHZhbGlkYXRpb24gZXJyb3JzKS4KICogLSBTZXR0aW5nIHJlbGF0ZWQgY3NzIGNsYXNzZXMgb24gdGhlIGVsZW1lbnQgKGBuZy12YWxpZGAsIGBuZy1pbnZhbGlkYCwgYG5nLWRpcnR5YCwgYG5nLXByaXN0aW5lYCwgYG5nLXRvdWNoZWRgLCBgbmctdW50b3VjaGVkYCkgaW5jbHVkaW5nIGFuaW1hdGlvbnMuCiAqIC0gUmVnaXN0ZXJpbmcgdGhlIGNvbnRyb2wgd2l0aCBpdHMgcGFyZW50IHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBmb3JtfS4KICoKICogTm90ZTogYG5nTW9kZWxgIHdpbGwgdHJ5IHRvIGJpbmQgdG8gdGhlIHByb3BlcnR5IGdpdmVuIGJ5IGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24gb24gdGhlCiAqIGN1cnJlbnQgc2NvcGUuIElmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gdGhpcyBzY29wZSwgaXQgd2lsbCBiZSBjcmVhdGVkCiAqIGltcGxpY2l0bHkgYW5kIGFkZGVkIHRvIHRoZSBzY29wZS4KICoKICogRm9yIGJlc3QgcHJhY3RpY2VzIG9uIHVzaW5nIGBuZ01vZGVsYCwgc2VlOgogKgogKiAgLSBbaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy93aWtpL1VuZGVyc3RhbmRpbmctU2NvcGVzXQogKgogKiBGb3IgYmFzaWMgZXhhbXBsZXMsIGhvdyB0byB1c2UgYG5nTW9kZWxgLCBzZWU6CiAqCiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9CiAqICAgIC0ge0BsaW5rIGlucHV0W3RleHRdIHRleHR9CiAqICAgIC0ge0BsaW5rIGlucHV0W2NoZWNrYm94XSBjaGVja2JveH0KICogICAgLSB7QGxpbmsgaW5wdXRbcmFkaW9dIHJhZGlvfQogKiAgICAtIHtAbGluayBpbnB1dFtudW1iZXJdIG51bWJlcn0KICogICAgLSB7QGxpbmsgaW5wdXRbZW1haWxdIGVtYWlsfQogKiAgICAtIHtAbGluayBpbnB1dFt1cmxdIHVybH0KICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZV0gZGF0ZX0KICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZVRpbWVMb2NhbF0gZGF0ZVRpbWVMb2NhbH0KICogICAgLSB7QGxpbmsgaW5wdXRbdGltZV0gdGltZX0KICogICAgLSB7QGxpbmsgaW5wdXRbbW9udGhdIG1vbnRofQogKiAgICAtIHtAbGluayBpbnB1dFt3ZWVrXSB3ZWVrfQogKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOnNlbGVjdCBzZWxlY3R9CiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6dGV4dGFyZWEgdGV4dGFyZWF9CiAqCiAqICMgQ1NTIGNsYXNzZXMKICogVGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQgb24gdGhlIGFzc29jaWF0ZWQgaW5wdXQvc2VsZWN0L3RleHRhcmVhIGVsZW1lbnQKICogZGVwZW5kaW5nIG9uIHRoZSB2YWxpZGl0eSBvZiB0aGUgbW9kZWwuCiAqCiAqICAtIGBuZy12YWxpZGAgaXMgc2V0IGlmIHRoZSBtb2RlbCBpcyB2YWxpZC4KICogIC0gYG5nLWludmFsaWRgIGlzIHNldCBpZiB0aGUgbW9kZWwgaXMgaW52YWxpZC4KICogIC0gYG5nLXByaXN0aW5lYCBpcyBzZXQgaWYgdGhlIG1vZGVsIGlzIHByaXN0aW5lLgogKiAgLSBgbmctZGlydHlgIGlzIHNldCBpZiB0aGUgbW9kZWwgaXMgZGlydHkuCiAqCiAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLgogKgogKiAjIyBBbmltYXRpb24gSG9va3MKICoKICogQW5pbWF0aW9ucyB3aXRoaW4gbW9kZWxzIGFyZSB0cmlnZ2VyZWQgd2hlbiBhbnkgb2YgdGhlIGFzc29jaWF0ZWQgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkCiAqIG9uIHRoZSBpbnB1dCBlbGVtZW50IHdoaWNoIGlzIGF0dGFjaGVkIHRvIHRoZSBtb2RlbC4gVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCwKICogYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnkgb3RoZXIgdmFsaWRhdGlvbnMgdGhhdCBhcmUgcGVyZm9ybWVkIG9uIHRoZSBtb2RlbCBpdHNlbGYuCiAqIFRoZSBhbmltYXRpb25zIHRoYXQgYXJlIHRyaWdnZXJlZCB3aXRoaW4gbmdNb2RlbCBhcmUgc2ltaWxhciB0byBob3cgdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kCiAqIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGwgYXMgSlMgYW5pbWF0aW9ucy4KICoKICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhbiBpbnB1dCBlbGVtZW50CiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6CiAqCiAqIDxwcmU+CiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZQogKiAvL2FkdmFuY2VkIGFuaW1hdGlvbnMKICogLm15LWlucHV0IHsKICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDsKICogICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICogfQogKiAubXktaW5wdXQubmctaW52YWxpZCB7CiAqICAgYmFja2dyb3VuZDogcmVkOwogKiAgIGNvbG9yOndoaXRlOwogKiB9CiAqIDwvcHJlPgogKgogKiBAZXhhbXBsZQogKiA8ZXhhbXBsZSBkZXBzPSJhbmd1bGFyLWFuaW1hdGUuanMiIGFuaW1hdGlvbnM9InRydWUiIGZpeEJhc2U9InRydWUiIG1vZHVsZT0iaW5wdXRFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2lucHV0RXhhbXBsZScsIFtdKQogICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgJHNjb3BlLnZhbCA9ICcxJzsKICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPHN0eWxlPgogICAgICAgICAubXktaW5wdXQgewogICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7CiAgICAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7CiAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgICAgICAgIH0KICAgICAgICAgLm15LWlucHV0Lm5nLWludmFsaWQgewogICAgICAgICAgIGNvbG9yOndoaXRlOwogICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDsKICAgICAgICAgfQogICAgICAgPC9zdHlsZT4KICAgICAgIFVwZGF0ZSBpbnB1dCB0byBzZWUgdHJhbnNpdGlvbnMgd2hlbiB2YWxpZC9pbnZhbGlkLgogICAgICAgSW50ZWdlciBpcyBhIHZhbGlkIHZhbHVlLgogICAgICAgPGZvcm0gbmFtZT0idGVzdEZvcm0iIG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgPGlucHV0IG5nLW1vZGVsPSJ2YWwiIG5nLXBhdHRlcm49Ii9eXGQrJC8iIG5hbWU9ImFuaW0iIGNsYXNzPSJteS1pbnB1dCIgLz4KICAgICAgIDwvZm9ybT4KICAgICA8L2ZpbGU+CiAqIDwvZXhhbXBsZT4KICoKICogIyMgQmluZGluZyB0byBhIGdldHRlci9zZXR0ZXIKICoKICogU29tZXRpbWVzIGl0J3MgaGVscGZ1bCB0byBiaW5kIGBuZ01vZGVsYCB0byBhIGdldHRlci9zZXR0ZXIgZnVuY3Rpb24uICBBIGdldHRlci9zZXR0ZXIgaXMgYQogKiBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgd2hlbiBjYWxsZWQgd2l0aCB6ZXJvIGFyZ3VtZW50cywgYW5kIHNldHMKICogdGhlIGludGVybmFsIHN0YXRlIG9mIGEgbW9kZWwgd2hlbiBjYWxsZWQgd2l0aCBhbiBhcmd1bWVudC4gSXQncyBzb21ldGltZXMgdXNlZnVsIHRvIHVzZSB0aGlzCiAqIGZvciBtb2RlbHMgdGhhdCBoYXZlIGFuIGludGVybmFsIHJlcHJlc2VudGF0aW9uIHRoYXQncyBkaWZmZXJlbnQgdGhhbiB3aGF0IHRoZSBtb2RlbCBleHBvc2VzCiAqIHRvIHRoZSB2aWV3LgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1zdWNjZXNzIj4KICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgYmVzdCB0byBrZWVwIGdldHRlcnMgZmFzdCBiZWNhdXNlIEFuZ3VsYXIgaXMgbGlrZWx5IHRvIGNhbGwgdGhlbSBtb3JlCiAqIGZyZXF1ZW50bHkgdGhhbiBvdGhlciBwYXJ0cyBvZiB5b3VyIGNvZGUuCiAqIDwvZGl2PgogKgogKiBZb3UgdXNlIHRoaXMgYmVoYXZpb3IgYnkgYWRkaW5nIGBuZy1tb2RlbC1vcHRpb25zPSJ7IGdldHRlclNldHRlcjogdHJ1ZSB9ImAgdG8gYW4gZWxlbWVudCB0aGF0CiAqIGhhcyBgbmctbW9kZWxgIGF0dGFjaGVkIHRvIGl0LiBZb3UgY2FuIGFsc28gYWRkIGBuZy1tb2RlbC1vcHRpb25zPSJ7IGdldHRlclNldHRlcjogdHJ1ZSB9ImAgdG8KICogYSBgPGZvcm0+YCwgd2hpY2ggd2lsbCBlbmFibGUgdGhpcyBiZWhhdmlvciBmb3IgYWxsIGA8aW5wdXQ+YHMgd2l0aGluIGl0LiBTZWUKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnNgfSBmb3IgbW9yZS4KICoKICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYG5nTW9kZWxgIHdpdGggYSBnZXR0ZXIvc2V0dGVyOgogKgogKiBAZXhhbXBsZQogKiA8ZXhhbXBsZSBuYW1lPSJuZ01vZGVsLWdldHRlci1zZXR0ZXIiIG1vZHVsZT0iZ2V0dGVyU2V0dGVyRXhhbXBsZSI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgPGZvcm0gbmFtZT0idXNlckZvcm0iPgogICAgICAgICAgIE5hbWU6CiAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InVzZXJOYW1lIgogICAgICAgICAgICAgICAgICBuZy1tb2RlbD0idXNlci5uYW1lIgogICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPSJ7IGdldHRlclNldHRlcjogdHJ1ZSB9IiAvPgogICAgICAgICA8L2Zvcm0+CiAgICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD0idXNlci5uYW1lKCkiPjwvc3Bhbj48L3ByZT4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJhcHAuanMiPgogICAgICAgYW5ndWxhci5tb2R1bGUoJ2dldHRlclNldHRlckV4YW1wbGUnLCBbXSkKICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICB2YXIgX25hbWUgPSAnQnJpYW4nOwogICAgICAgICAgICRzY29wZS51c2VyID0gewogICAgICAgICAgICAgbmFtZTogZnVuY3Rpb24gKG5ld05hbWUpIHsKICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG5ld05hbWUpKSB7CiAgICAgICAgICAgICAgICAgX25hbWUgPSBuZXdOYW1lOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgIHJldHVybiBfbmFtZTsKICAgICAgICAgICAgIH0KICAgICAgICAgICB9OwogICAgICAgICB9XSk7CiAgICAgPC9maWxlPgogKiA8L2V4YW1wbGU+CiAqLwp2YXIgbmdNb2RlbERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ14/Zm9ybScsICdeP25nTW9kZWxPcHRpb25zJ10sCiAgICBjb250cm9sbGVyOiBOZ01vZGVsQ29udHJvbGxlciwKICAgIC8vIFByZWxpbmsgbmVlZHMgdG8gcnVuIGJlZm9yZSBhbnkgaW5wdXQgZGlyZWN0aXZlCiAgICAvLyBzbyB0aGF0IHdlIGNhbiBzZXQgdGhlIE5nTW9kZWxPcHRpb25zIGluIE5nTW9kZWxDb250cm9sbGVyCiAgICAvLyBiZWZvcmUgYW55b25lIGVsc2UgdXNlcyBpdC4KICAgIHByaW9yaXR5OiAxLAogICAgY29tcGlsZTogZnVuY3Rpb24gbmdNb2RlbENvbXBpbGUoZWxlbWVudCkgewogICAgICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sCiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKFVOVE9VQ0hFRF9DTEFTUykuYWRkQ2xhc3MoVkFMSURfQ0xBU1MpOwoKICAgICAgcmV0dXJuIHsKICAgICAgICBwcmU6IGZ1bmN0aW9uIG5nTW9kZWxQcmVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykgewogICAgICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdLAogICAgICAgICAgICAgIGZvcm1DdHJsID0gY3RybHNbMV0gfHwgbnVsbEZvcm1DdHJsOwoKICAgICAgICAgIG1vZGVsQ3RybC4kJHNldE9wdGlvbnMoY3RybHNbMl0gJiYgY3RybHNbMl0uJG9wdGlvbnMpOwoKICAgICAgICAgIC8vIG5vdGlmeSBvdGhlcnMsIGVzcGVjaWFsbHkgcGFyZW50IGZvcm1zCiAgICAgICAgICBmb3JtQ3RybC4kYWRkQ29udHJvbChtb2RlbEN0cmwpOwoKICAgICAgICAgIGF0dHIuJG9ic2VydmUoJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSkgewogICAgICAgICAgICBpZiAobW9kZWxDdHJsLiRuYW1lICE9PSBuZXdWYWx1ZSkgewogICAgICAgICAgICAgIGZvcm1DdHJsLiQkcmVuYW1lQ29udHJvbChtb2RlbEN0cmwsIG5ld1ZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CgogICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmb3JtQ3RybC4kcmVtb3ZlQ29udHJvbChtb2RlbEN0cmwpOwogICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBwb3N0OiBmdW5jdGlvbiBuZ01vZGVsUG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7CiAgICAgICAgICB2YXIgbW9kZWxDdHJsID0gY3RybHNbMF07CiAgICAgICAgICBpZiAobW9kZWxDdHJsLiRvcHRpb25zICYmIG1vZGVsQ3RybC4kb3B0aW9ucy51cGRhdGVPbikgewogICAgICAgICAgICBlbGVtZW50Lm9uKG1vZGVsQ3RybC4kb3B0aW9ucy51cGRhdGVPbiwgZnVuY3Rpb24oZXYpIHsKICAgICAgICAgICAgICBtb2RlbEN0cmwuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdChldiAmJiBldi50eXBlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgZWxlbWVudC5vbignYmx1cicsIGZ1bmN0aW9uKGV2KSB7CiAgICAgICAgICAgIGlmIChtb2RlbEN0cmwuJHRvdWNoZWQpIHJldHVybjsKCiAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBtb2RlbEN0cmwuJHNldFRvdWNoZWQoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CiAgfTsKfTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0NoYW5nZQogKgogKiBAZGVzY3JpcHRpb24KICogRXZhbHVhdGUgdGhlIGdpdmVuIGV4cHJlc3Npb24gd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBpbnB1dC4KICogVGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGltbWVkaWF0ZWx5LCB1bmxpa2UgdGhlIEphdmFTY3JpcHQgb25jaGFuZ2UgZXZlbnQKICogd2hpY2ggb25seSB0cmlnZ2VycyBhdCB0aGUgZW5kIG9mIGEgY2hhbmdlICh1c3VhbGx5LCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGUKICogZm9ybSBlbGVtZW50IG9yIHByZXNzZXMgdGhlIHJldHVybiBrZXkpLgogKgogKiBUaGUgYG5nQ2hhbmdlYCBleHByZXNzaW9uIGlzIG9ubHkgZXZhbHVhdGVkIHdoZW4gYSBjaGFuZ2UgaW4gdGhlIGlucHV0IHZhbHVlIGNhdXNlcwogKiBhIG5ldyB2YWx1ZSB0byBiZSBjb21taXR0ZWQgdG8gdGhlIG1vZGVsLgogKgogKiBJdCB3aWxsIG5vdCBiZSBldmFsdWF0ZWQ6CiAqICogaWYgdGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGAkcGFyc2Vyc2AgdHJhbnNmb3JtYXRpb24gcGlwZWxpbmUgaGFzIG5vdCBjaGFuZ2VkCiAqICogaWYgdGhlIGlucHV0IGhhcyBjb250aW51ZWQgdG8gYmUgaW52YWxpZCBzaW5jZSB0aGUgbW9kZWwgd2lsbCBzdGF5IGBudWxsYAogKiAqIGlmIHRoZSBtb2RlbCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIG5vdCBieSBhIGNoYW5nZSB0byB0aGUgaW5wdXQgdmFsdWUKICoKICoKICogTm90ZSwgdGhpcyBkaXJlY3RpdmUgcmVxdWlyZXMgYG5nTW9kZWxgIHRvIGJlIHByZXNlbnQuCiAqCiAqIEBlbGVtZW50IGlucHV0CiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGFuZ2Uge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbiBjaGFuZ2UKICogaW4gaW5wdXQgdmFsdWUuCiAqCiAqIEBleGFtcGxlCiAqIDxleGFtcGxlIG5hbWU9Im5nQ2hhbmdlLWRpcmVjdGl2ZSIgbW9kdWxlPSJjaGFuZ2VFeGFtcGxlIj4KICogICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICogICAgIDxzY3JpcHQ+CiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGFuZ2VFeGFtcGxlJywgW10pCiAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICogICAgICAgICAgICRzY29wZS5jb3VudGVyID0gMDsKICogICAgICAgICAgICRzY29wZS5jaGFuZ2UgPSBmdW5jdGlvbigpIHsKICogICAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIrKzsKICogICAgICAgICAgIH07CiAqICAgICAgICAgfV0pOwogKiAgICAgPC9zY3JpcHQ+CiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICogICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iY29uZmlybWVkIiBuZy1jaGFuZ2U9ImNoYW5nZSgpIiBpZD0ibmctY2hhbmdlLWV4YW1wbGUxIiAvPgogKiAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjb25maXJtZWQiIGlkPSJuZy1jaGFuZ2UtZXhhbXBsZTIiIC8+CiAqICAgICAgIDxsYWJlbCBmb3I9Im5nLWNoYW5nZS1leGFtcGxlMiI+Q29uZmlybWVkPC9sYWJlbD48YnIgLz4KICogICAgICAgPHR0PmRlYnVnID0ge3tjb25maXJtZWR9fTwvdHQ+PGJyLz4KICogICAgICAgPHR0PmNvdW50ZXIgPSB7e2NvdW50ZXJ9fTwvdHQ+PGJyLz4KICogICAgIDwvZGl2PgogKiAgIDwvZmlsZT4KICogICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICogICAgIHZhciBjb3VudGVyID0gZWxlbWVudChieS5iaW5kaW5nKCdjb3VudGVyJykpOwogKiAgICAgdmFyIGRlYnVnID0gZWxlbWVudChieS5iaW5kaW5nKCdjb25maXJtZWQnKSk7CiAqCiAqICAgICBpdCgnc2hvdWxkIGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gdmlldycsIGZ1bmN0aW9uKCkgewogKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMCcpOwogKgogKiAgICAgICBlbGVtZW50KGJ5LmlkKCduZy1jaGFuZ2UtZXhhbXBsZTEnKSkuY2xpY2soKTsKICoKICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEnKTsKICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAqICAgICB9KTsKICoKICogICAgIGl0KCdzaG91bGQgbm90IGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gbW9kZWwnLCBmdW5jdGlvbigpIHsKICogICAgICAgZWxlbWVudChieS5pZCgnbmctY2hhbmdlLWV4YW1wbGUyJykpLmNsaWNrKCk7CgogKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMCcpOwogKiAgICAgICBleHBlY3QoZGVidWcuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICogICAgIH0pOwogKiAgIDwvZmlsZT4KICogPC9leGFtcGxlPgogKi8KdmFyIG5nQ2hhbmdlRGlyZWN0aXZlID0gdmFsdWVGbih7CiAgcmVzdHJpY3Q6ICdBJywKICByZXF1aXJlOiAnbmdNb2RlbCcsCiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHsKICAgIGN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbigpIHsKICAgICAgc2NvcGUuJGV2YWwoYXR0ci5uZ0NoYW5nZSk7CiAgICB9KTsKICB9Cn0pOwoKCnZhciByZXF1aXJlZERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgcmVxdWlyZTogJz9uZ01vZGVsJywKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHsKICAgICAgaWYgKCFjdHJsKSByZXR1cm47CiAgICAgIGF0dHIucmVxdWlyZWQgPSB0cnVlOyAvLyBmb3JjZSB0cnV0aHkgaW4gY2FzZSB3ZSBhcmUgb24gbm9uIGlucHV0IGVsZW1lbnQKCiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucmVxdWlyZWQgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiAhYXR0ci5yZXF1aXJlZCB8fCAhY3RybC4kaXNFbXB0eSh2YWx1ZSk7CiAgICAgIH07CgogICAgICBhdHRyLiRvYnNlcnZlKCdyZXF1aXJlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7CiAgICAgIH0pOwogICAgfQogIH07Cn07CgoKdmFyIHBhdHRlcm5EaXJlY3RpdmUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdBJywKICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsCiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7CiAgICAgIGlmICghY3RybCkgcmV0dXJuOwoKICAgICAgdmFyIHJlZ2V4cCwgcGF0dGVybkV4cCA9IGF0dHIubmdQYXR0ZXJuIHx8IGF0dHIucGF0dGVybjsKICAgICAgYXR0ci4kb2JzZXJ2ZSgncGF0dGVybicsIGZ1bmN0aW9uKHJlZ2V4KSB7CiAgICAgICAgaWYgKGlzU3RyaW5nKHJlZ2V4KSAmJiByZWdleC5sZW5ndGggPiAwKSB7CiAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAocmVnZXgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJlZ2V4ICYmICFyZWdleC50ZXN0KSB7CiAgICAgICAgICB0aHJvdyBtaW5FcnIoJ25nUGF0dGVybicpKCdub3JlZ2V4cCcsCiAgICAgICAgICAgICdFeHBlY3RlZCB7MH0gdG8gYmUgYSBSZWdFeHAgYnV0IHdhcyB7MX0uIEVsZW1lbnQ6IHsyfScsIHBhdHRlcm5FeHAsCiAgICAgICAgICAgIHJlZ2V4LCBzdGFydGluZ1RhZyhlbG0pKTsKICAgICAgICB9CgogICAgICAgIHJlZ2V4cCA9IHJlZ2V4IHx8IHVuZGVmaW5lZDsKICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpOwogICAgICB9KTsKCiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucGF0dGVybiA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzVW5kZWZpbmVkKHJlZ2V4cCkgfHwgcmVnZXhwLnRlc3QodmFsdWUpOwogICAgICB9OwogICAgfQogIH07Cn07CgoKdmFyIG1heGxlbmd0aERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgcmVxdWlyZTogJz9uZ01vZGVsJywKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHsKICAgICAgaWYgKCFjdHJsKSByZXR1cm47CgogICAgICB2YXIgbWF4bGVuZ3RoID0gMDsKICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWF4bGVuZ3RoJywgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBtYXhsZW5ndGggPSBpbnQodmFsdWUpIHx8IDA7CiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTsKICAgICAgfSk7CiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4bGVuZ3RoID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7CiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkobW9kZWxWYWx1ZSkgfHwgdmlld1ZhbHVlLmxlbmd0aCA8PSBtYXhsZW5ndGg7CiAgICAgIH07CiAgICB9CiAgfTsKfTsKCnZhciBtaW5sZW5ndGhEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdBJywKICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsCiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7CiAgICAgIGlmICghY3RybCkgcmV0dXJuOwoKICAgICAgdmFyIG1pbmxlbmd0aCA9IDA7CiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbmxlbmd0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgbWlubGVuZ3RoID0gaW50KHZhbHVlKSB8fCAwOwogICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7CiAgICAgIH0pOwogICAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbmxlbmd0aCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkgewogICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KG1vZGVsVmFsdWUpIHx8IHZpZXdWYWx1ZS5sZW5ndGggPj0gbWlubGVuZ3RoOwogICAgICB9OwogICAgfQogIH07Cn07CgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdMaXN0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUZXh0IGlucHV0IHRoYXQgY29udmVydHMgYmV0d2VlbiBhIGRlbGltaXRlZCBzdHJpbmcgYW5kIGFuIGFycmF5IG9mIHN0cmluZ3MuIFRoZSBkZWZhdWx0CiAqIGRlbGltaXRlciBpcyBhIGNvbW1hIGZvbGxvd2VkIGJ5IGEgc3BhY2UgLSBlcXVpdmFsZW50IHRvIGBuZy1saXN0PSIsICJgLiBZb3UgY2FuIHNwZWNpZnkgYSBjdXN0b20KICogZGVsaW1pdGVyIGFzIHRoZSB2YWx1ZSBvZiB0aGUgYG5nTGlzdGAgYXR0cmlidXRlIC0gZm9yIGV4YW1wbGUsIGBuZy1saXN0PSIgfCAiYC4KICoKICogVGhlIGJlaGF2aW91ciBvZiB0aGUgZGlyZWN0aXZlIGlzIGFmZmVjdGVkIGJ5IHRoZSB1c2Ugb2YgdGhlIGBuZ1RyaW1gIGF0dHJpYnV0ZS4KICogKiBJZiBgbmdUcmltYCBpcyBzZXQgdG8gYCJmYWxzZSJgIHRoZW4gd2hpdGVzcGFjZSBhcm91bmQgYm90aCB0aGUgc2VwYXJhdG9yIGFuZCBlYWNoCiAqICAgbGlzdCBpdGVtIGlzIHJlc3BlY3RlZC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgb2YgdGhlIGRpcmVjdGl2ZSBpcyByZXNwb25zaWJsZSBmb3IKICogICBkZWFsaW5nIHdpdGggd2hpdGVzcGFjZSBidXQgYWxzbyBhbGxvd3MgeW91IHRvIHVzZSB3aGl0ZXNwYWNlIGFzIGEgZGVsaW1pdGVyLCBzdWNoIGFzIGEKICogICB0YWIgb3IgbmV3bGluZSBjaGFyYWN0ZXIuCiAqICogT3RoZXJ3aXNlIHdoaXRlc3BhY2UgYXJvdW5kIHRoZSBkZWxpbWl0ZXIgaXMgaWdub3JlZCB3aGVuIHNwbGl0dGluZyAoYWx0aG91Z2ggaXQgaXMgcmVzcGVjdGVkCiAqICAgd2hlbiBqb2luaW5nIHRoZSBsaXN0IGl0ZW1zIGJhY2sgdG9nZXRoZXIpIGFuZCB3aGl0ZXNwYWNlIGFyb3VuZCBlYWNoIGxpc3QgaXRlbSBpcyBzdHJpcHBlZAogKiAgIGJlZm9yZSBpdCBpcyBhZGRlZCB0byB0aGUgbW9kZWwuCiAqCiAqICMjIyBFeGFtcGxlIHdpdGggVmFsaWRhdGlvbgogKgogKiA8ZXhhbXBsZSBuYW1lPSJuZ0xpc3QtZGlyZWN0aXZlIiBtb2R1bGU9Imxpc3RFeGFtcGxlIj4KICogICA8ZmlsZSBuYW1lPSJhcHAuanMiPgogKiAgICAgIGFuZ3VsYXIubW9kdWxlKCdsaXN0RXhhbXBsZScsIFtdKQogKiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICogICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydtb3JwaGV1cycsICduZW8nLCAndHJpbml0eSddOwogKiAgICAgICAgfV0pOwogKiAgIDwvZmlsZT4KICogICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICogICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAqICAgICAgTGlzdDogPGlucHV0IG5hbWU9Im5hbWVzSW5wdXQiIG5nLW1vZGVsPSJuYW1lcyIgbmctbGlzdCByZXF1aXJlZD4KICogICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5uYW1lc0lucHV0LiRlcnJvci5yZXF1aXJlZCI+CiAqICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAqICAgICAgPGJyPgogKiAgICAgIDx0dD5uYW1lcyA9IHt7bmFtZXN9fTwvdHQ+PGJyLz4KICogICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICogICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICogICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogKiAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICogICAgIDwvZm9ybT4KICogICA8L2ZpbGU+CiAqICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAqICAgICB2YXIgbGlzdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZXMnKSk7CiAqICAgICB2YXIgbmFtZXMgPSBlbGVtZW50KGJ5LmV4YWN0QmluZGluZygnbmFtZXMnKSk7CiAqICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCcpKTsKICogICAgIHZhciBlcnJvciA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuLmVycm9yJykpOwogKgogKiAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAqICAgICAgIGV4cGVjdChuYW1lcy5nZXRUZXh0KCkpLnRvQ29udGFpbignWyJtb3JwaGV1cyIsIm5lbyIsInRyaW5pdHkiXScpOwogKiAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICogICAgICAgZXhwZWN0KGVycm9yLmdldENzc1ZhbHVlKCdkaXNwbGF5JykpLnRvQmUoJ25vbmUnKTsKICogICAgIH0pOwogKgogKiAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAqICAgICAgIGxpc3RJbnB1dC5jbGVhcigpOwogKiAgICAgICBsaXN0SW5wdXQuc2VuZEtleXMoJycpOwogKgogKiAgICAgICBleHBlY3QobmFtZXMuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpOwogKiAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAqICAgICAgIGV4cGVjdChlcnJvci5nZXRDc3NWYWx1ZSgnZGlzcGxheScpKS5ub3QudG9CZSgnbm9uZScpOwogKiAgICAgfSk7CiAqICAgPC9maWxlPgogKiA8L2V4YW1wbGU+CiAqCiAqICMjIyBFeGFtcGxlIC0gc3BsaXR0aW5nIG9uIHdoaXRlc3BhY2UKICogPGV4YW1wbGUgbmFtZT0ibmdMaXN0LWRpcmVjdGl2ZS1uZXdsaW5lcyI+CiAqICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAqICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD0ibGlzdCIgbmctbGlzdD0iJiMxMDsiIG5nLXRyaW09ImZhbHNlIj48L3RleHRhcmVhPgogKiAgICA8cHJlPnt7IGxpc3QgfCBqc29uIH19PC9wcmU+CiAqICAgPC9maWxlPgogKiAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogKiAgICAgaXQoInNob3VsZCBzcGxpdCB0aGUgdGV4dCBieSBuZXdsaW5lcyIsIGZ1bmN0aW9uKCkgewogKiAgICAgICB2YXIgbGlzdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbGlzdCcpKTsKICogICAgICAgdmFyIG91dHB1dCA9IGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCB8IGpzb24nKSk7CiAqICAgICAgIGxpc3RJbnB1dC5zZW5kS2V5cygnYWJjXG5kZWZcbmdoaScpOwogKiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9Db250YWluKCdbXG4gICJhYmMiLFxuICAiZGVmIixcbiAgImdoaSJcbl0nKTsKICogICAgIH0pOwogKiAgIDwvZmlsZT4KICogPC9leGFtcGxlPgogKgogKiBAZWxlbWVudCBpbnB1dAogKiBAcGFyYW0ge3N0cmluZz19IG5nTGlzdCBvcHRpb25hbCBkZWxpbWl0ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBzcGxpdCB0aGUgdmFsdWUuCiAqLwp2YXIgbmdMaXN0RGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnQScsCiAgICBwcmlvcml0eTogMTAwLAogICAgcmVxdWlyZTogJ25nTW9kZWwnLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHsKICAgICAgLy8gV2Ugd2FudCB0byBjb250cm9sIHdoaXRlc3BhY2UgdHJpbW1pbmcgc28gd2UgdXNlIHRoaXMgY29udm9sdXRlZCBhcHByb2FjaAogICAgICAvLyB0byBhY2Nlc3MgdGhlIG5nTGlzdCBhdHRyaWJ1dGUsIHdoaWNoIGRvZXNuJ3QgcHJlLXRyaW0gdGhlIGF0dHJpYnV0ZQogICAgICB2YXIgbmdMaXN0ID0gZWxlbWVudC5hdHRyKGF0dHIuJGF0dHIubmdMaXN0KSB8fCAnLCAnOwogICAgICB2YXIgdHJpbVZhbHVlcyA9IGF0dHIubmdUcmltICE9PSAnZmFsc2UnOwogICAgICB2YXIgc2VwYXJhdG9yID0gdHJpbVZhbHVlcyA/IHRyaW0obmdMaXN0KSA6IG5nTGlzdDsKCiAgICAgIHZhciBwYXJzZSA9IGZ1bmN0aW9uKHZpZXdWYWx1ZSkgewogICAgICAgIC8vIElmIHRoZSB2aWV3VmFsdWUgaXMgaW52YWxpZCAoc2F5IHJlcXVpcmVkIGJ1dCBlbXB0eSkgaXQgd2lsbCBiZSBgdW5kZWZpbmVkYAogICAgICAgIGlmIChpc1VuZGVmaW5lZCh2aWV3VmFsdWUpKSByZXR1cm47CgogICAgICAgIHZhciBsaXN0ID0gW107CgogICAgICAgIGlmICh2aWV3VmFsdWUpIHsKICAgICAgICAgIGZvckVhY2godmlld1ZhbHVlLnNwbGl0KHNlcGFyYXRvciksIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSkgbGlzdC5wdXNoKHRyaW1WYWx1ZXMgPyB0cmltKHZhbHVlKSA6IHZhbHVlKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGxpc3Q7CiAgICAgIH07CgogICAgICBjdHJsLiRwYXJzZXJzLnB1c2gocGFyc2UpOwogICAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgIHJldHVybiB2YWx1ZS5qb2luKG5nTGlzdCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9KTsKCiAgICAgIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCAkaXNFbXB0eSBiZWNhdXNlIGFuIGVtcHR5IGFycmF5IG1lYW5zIHRoZSBpbnB1dCBpcyBlbXB0eS4KICAgICAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCAhdmFsdWUubGVuZ3RoOwogICAgICB9OwogICAgfQogIH07Cn07CgoKdmFyIENPTlNUQU5UX1ZBTFVFX1JFR0VYUCA9IC9eKHRydWV8ZmFsc2V8XGQrKSQvOwovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1ZhbHVlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBCaW5kcyB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgb2YgYGlucHV0W3NlbGVjdF1gIG9yIGBpbnB1dFtyYWRpb11gLCBzbwogKiB0aGF0IHdoZW4gdGhlIGVsZW1lbnQgaXMgc2VsZWN0ZWQsIHRoZSBgbmdNb2RlbGAgb2YgdGhhdCBlbGVtZW50IGlzIHNldCB0byB0aGUKICogYm91bmQgdmFsdWUuCiAqCiAqIGBuZ1ZhbHVlYCBpcyB1c2VmdWwgd2hlbiBkeW5hbWljYWxseSBnZW5lcmF0aW5nIGxpc3RzIG9mIHJhZGlvIGJ1dHRvbnMgdXNpbmcgYG5nLXJlcGVhdGAsIGFzCiAqIHNob3duIGJlbG93LgogKgogKiBAZWxlbWVudCBpbnB1dAogKiBAcGFyYW0ge3N0cmluZz19IG5nVmFsdWUgYW5ndWxhciBleHByZXNzaW9uLCB3aG9zZSB2YWx1ZSB3aWxsIGJlIGJvdW5kIHRvIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZQogKiAgIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQKICoKICogQGV4YW1wbGUKICAgIDxleGFtcGxlIG5hbWU9Im5nVmFsdWUtZGlyZWN0aXZlIiBtb2R1bGU9InZhbHVlRXhhbXBsZSI+CiAgICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd2YWx1ZUV4YW1wbGUnLCBbXSkKICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ3BpenphJywgJ3VuaWNvcm5zJywgJ3JvYm90cyddOwogICAgICAgICAgICAgICRzY29wZS5teSA9IHsgZmF2b3JpdGU6ICd1bmljb3JucycgfTsKICAgICAgICAgICAgfV0pOwogICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPGZvcm0gbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgICAgPGgyPldoaWNoIGlzIHlvdXIgZmF2b3JpdGU/PC9oMj4KICAgICAgICAgICAgPGxhYmVsIG5nLXJlcGVhdD0ibmFtZSBpbiBuYW1lcyIgZm9yPSJ7e25hbWV9fSI+CiAgICAgICAgICAgICAge3tuYW1lfX0KICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPSJteS5mYXZvcml0ZSIKICAgICAgICAgICAgICAgICAgICAgbmctdmFsdWU9Im5hbWUiCiAgICAgICAgICAgICAgICAgICAgIGlkPSJ7e25hbWV9fSIKICAgICAgICAgICAgICAgICAgICAgbmFtZT0iZmF2b3JpdGUiPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgPGRpdj5Zb3UgY2hvc2Uge3tteS5mYXZvcml0ZX19PC9kaXY+CiAgICAgICAgPC9mb3JtPgogICAgICA8L2ZpbGU+CiAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgIHZhciBmYXZvcml0ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnbXkuZmF2b3JpdGUnKSk7CgogICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGZhdm9yaXRlLmdldFRleHQoKSkudG9Db250YWluKCd1bmljb3JucycpOwogICAgICAgIH0pOwogICAgICAgIGl0KCdzaG91bGQgYmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnB1dHMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdteS5mYXZvcml0ZScpKS5nZXQoMCkuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigncGl6emEnKTsKICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKi8KdmFyIG5nVmFsdWVEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdBJywKICAgIHByaW9yaXR5OiAxMDAsCiAgICBjb21waWxlOiBmdW5jdGlvbih0cGwsIHRwbEF0dHIpIHsKICAgICAgaWYgKENPTlNUQU5UX1ZBTFVFX1JFR0VYUC50ZXN0KHRwbEF0dHIubmdWYWx1ZSkpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdWYWx1ZUNvbnN0YW50TGluayhzY29wZSwgZWxtLCBhdHRyKSB7CiAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgc2NvcGUuJGV2YWwoYXR0ci5uZ1ZhbHVlKSk7CiAgICAgICAgfTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdWYWx1ZUxpbmsoc2NvcGUsIGVsbSwgYXR0cikgewogICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdWYWx1ZSwgZnVuY3Rpb24gdmFsdWVXYXRjaEFjdGlvbih2YWx1ZSkgewogICAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgdmFsdWUpOwogICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgfQogICAgfQogIH07Cn07CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ01vZGVsT3B0aW9ucwogKgogKiBAZGVzY3JpcHRpb24KICogQWxsb3dzIHR1bmluZyBob3cgbW9kZWwgdXBkYXRlcyBhcmUgZG9uZS4gVXNpbmcgYG5nTW9kZWxPcHRpb25zYCB5b3UgY2FuIHNwZWNpZnkgYSBjdXN0b20gbGlzdCBvZgogKiBldmVudHMgdGhhdCB3aWxsIHRyaWdnZXIgYSBtb2RlbCB1cGRhdGUgYW5kL29yIGEgZGVib3VuY2luZyBkZWxheSBzbyB0aGF0IHRoZSBhY3R1YWwgdXBkYXRlIG9ubHkKICogdGFrZXMgcGxhY2Ugd2hlbiBhIHRpbWVyIGV4cGlyZXM7IHRoaXMgdGltZXIgd2lsbCBiZSByZXNldCBhZnRlciBhbm90aGVyIGNoYW5nZSB0YWtlcyBwbGFjZS4KICoKICogR2l2ZW4gdGhlIG5hdHVyZSBvZiBgbmdNb2RlbE9wdGlvbnNgLCB0aGUgdmFsdWUgZGlzcGxheWVkIGluc2lkZSBpbnB1dCBmaWVsZHMgaW4gdGhlIHZpZXcgbWlnaHQKICogYmUgZGlmZmVyZW50IHRoYW4gdGhlIHZhbHVlIGluIHRoZSBhY3R1YWwgbW9kZWwuIFRoaXMgbWVhbnMgdGhhdCBpZiB5b3UgdXBkYXRlIHRoZSBtb2RlbCB5b3UKICogc2hvdWxkIGFsc28gaW52b2tlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIGAkcm9sbGJhY2tWaWV3VmFsdWVgfSBvbiB0aGUgcmVsZXZhbnQgaW5wdXQgZmllbGQgaW4KICogb3JkZXIgdG8gbWFrZSBzdXJlIGl0IGlzIHN5bmNocm9uaXplZCB3aXRoIHRoZSBtb2RlbCBhbmQgdGhhdCBhbnkgZGVib3VuY2VkIGFjdGlvbiBpcyBjYW5jZWxlZC4KICoKICogVGhlIGVhc2llc3Qgd2F5IHRvIHJlZmVyZW5jZSB0aGUgY29udHJvbCdzIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIGAkcm9sbGJhY2tWaWV3VmFsdWVgfQogKiBtZXRob2QgaXMgYnkgbWFraW5nIHN1cmUgdGhlIGlucHV0IGlzIHBsYWNlZCBpbnNpZGUgYSBmb3JtIHRoYXQgaGFzIGEgYG5hbWVgIGF0dHJpYnV0ZS4gVGhpcyBpcwogKiBpbXBvcnRhbnQgYmVjYXVzZSBgZm9ybWAgY29udHJvbGxlcnMgYXJlIHB1Ymxpc2hlZCB0byB0aGUgcmVsYXRlZCBzY29wZSB1bmRlciB0aGUgbmFtZSBpbiB0aGVpcgogKiBgbmFtZWAgYXR0cmlidXRlLgogKgogKiBBbnkgcGVuZGluZyBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzIHN1Ym1pdHRlZCB2aWEgdGhlCiAqIGBzdWJtaXRgIGV2ZW50LiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGAKICogdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuCiAqCiAqIGBuZ01vZGVsT3B0aW9uc2AgaGFzIGFuIGVmZmVjdCBvbiB0aGUgZWxlbWVudCBpdCdzIGRlY2xhcmVkIG9uIGFuZCBpdHMgZGVzY2VuZGFudHMuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBuZ01vZGVsT3B0aW9ucyBvcHRpb25zIHRvIGFwcGx5IHRvIHRoZSBjdXJyZW50IG1vZGVsLiBWYWxpZCBrZXlzIGFyZToKICogICAtIGB1cGRhdGVPbmA6IHN0cmluZyBzcGVjaWZ5aW5nIHdoaWNoIGV2ZW50IHNob3VsZCBiZSB0aGUgaW5wdXQgYm91bmQgdG8uIFlvdSBjYW4gc2V0IHNldmVyYWwKICogICAgIGV2ZW50cyB1c2luZyBhbiBzcGFjZSBkZWxpbWl0ZWQgbGlzdC4gVGhlcmUgaXMgYSBzcGVjaWFsIGV2ZW50IGNhbGxlZCBgZGVmYXVsdGAgdGhhdAogKiAgICAgbWF0Y2hlcyB0aGUgZGVmYXVsdCBldmVudHMgYmVsb25naW5nIG9mIHRoZSBjb250cm9sLgogKiAgIC0gYGRlYm91bmNlYDogaW50ZWdlciB2YWx1ZSB3aGljaCBjb250YWlucyB0aGUgZGVib3VuY2UgbW9kZWwgdXBkYXRlIHZhbHVlIGluIG1pbGxpc2Vjb25kcy4gQQogKiAgICAgdmFsdWUgb2YgMCB0cmlnZ2VycyBhbiBpbW1lZGlhdGUgdXBkYXRlLiBJZiBhbiBvYmplY3QgaXMgc3VwcGxpZWQgaW5zdGVhZCwgeW91IGNhbiBzcGVjaWZ5IGEKICogICAgIGN1c3RvbSB2YWx1ZSBmb3IgZWFjaCBldmVudC4gRm9yIGV4YW1wbGU6CiAqICAgICBgbmctbW9kZWwtb3B0aW9ucz0ieyB1cGRhdGVPbjogJ2RlZmF1bHQgYmx1cicsIGRlYm91bmNlOiB7J2RlZmF1bHQnOiA1MDAsICdibHVyJzogMH0gfSJgCiAqICAgLSBgYWxsb3dJbnZhbGlkYDogYm9vbGVhbiB2YWx1ZSB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgbW9kZWwgY2FuIGJlIHNldCB3aXRoIHZhbHVlcyB0aGF0IGRpZAogKiAgICAgbm90IHZhbGlkYXRlIGNvcnJlY3RseSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHNldHRpbmcgdGhlIG1vZGVsIHRvIHVuZGVmaW5lZC4KICogICAtIGBnZXR0ZXJTZXR0ZXJgOiBib29sZWFuIHZhbHVlIHdoaWNoIGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gdHJlYXQgZnVuY3Rpb25zIGJvdW5kIHRvCiAgICAgICBgbmdNb2RlbGAgYXMgZ2V0dGVycy9zZXR0ZXJzLgogKiAgIC0gYHRpbWV6b25lYDogRGVmaW5lcyB0aGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGZvcgogKiAgICAgYDxpbnB1dCB0eXBlPSJkYXRlIj5gLCBgPGlucHV0IHR5cGU9InRpbWUiPmAsIC4uLiAuIFJpZ2h0IG5vdywgdGhlIG9ubHkgc3VwcG9ydGVkIHZhbHVlIGlzIGAnVVRDJ2AsCiAqICAgICBvdGhlcndpc2UgdGhlIGRlZmF1bHQgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIgd2lsbCBiZSB1c2VkLgogKgogKiBAZXhhbXBsZQoKICBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIG92ZXJyaWRlIGltbWVkaWF0ZSB1cGRhdGVzLiBDaGFuZ2VzIG9uIHRoZSBpbnB1dHMgd2l0aGluIHRoZQogIGZvcm0gd2lsbCB1cGRhdGUgdGhlIG1vZGVsIG9ubHkgd2hlbiB0aGUgY29udHJvbCBsb3NlcyBmb2N1cyAoYmx1ciBldmVudCkuIElmIGBlc2NhcGVgIGtleSBpcwogIHByZXNzZWQgd2hpbGUgdGhlIGlucHV0IGZpZWxkIGlzIGZvY3VzZWQsIHRoZSB2YWx1ZSBpcyByZXNldCB0byB0aGUgdmFsdWUgaW4gdGhlIGN1cnJlbnQgbW9kZWwuCgogIDxleGFtcGxlIG5hbWU9Im5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1ibHVyIiBtb2R1bGU9Im9wdGlvbnNFeGFtcGxlIj4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICA8Zm9ybSBuYW1lPSJ1c2VyRm9ybSI+CiAgICAgICAgICBOYW1lOgogICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InVzZXJOYW1lIgogICAgICAgICAgICAgICAgIG5nLW1vZGVsPSJ1c2VyLm5hbWUiCiAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz0ieyB1cGRhdGVPbjogJ2JsdXInIH0iCiAgICAgICAgICAgICAgICAgbmcta2V5dXA9ImNhbmNlbCgkZXZlbnQpIiAvPjxiciAvPgoKICAgICAgICAgIE90aGVyIGRhdGE6CiAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InVzZXIuZGF0YSIgLz48YnIgLz4KICAgICAgICA8L2Zvcm0+CiAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPSJ1c2VyLm5hbWUiPjwvc3Bhbj48L3ByZT4KICAgICAgPC9kaXY+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJhcHAuanMiPgogICAgICBhbmd1bGFyLm1vZHVsZSgnb3B0aW9uc0V4YW1wbGUnLCBbXSkKICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgJHNjb3BlLnVzZXIgPSB7IG5hbWU6ICdzYXknLCBkYXRhOiAnJyB9OwoKICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09IDI3KSB7CiAgICAgICAgICAgICAgJHNjb3BlLnVzZXJGb3JtLnVzZXJOYW1lLiRyb2xsYmFja1ZpZXdWYWx1ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH1dKTsKICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXIubmFtZScpKTsKICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlci5uYW1lJykpOwogICAgICB2YXIgb3RoZXIgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmRhdGEnKSk7CgogICAgICBpdCgnc2hvdWxkIGFsbG93IGN1c3RvbSBldmVudHMnLCBmdW5jdGlvbigpIHsKICAgICAgICBpbnB1dC5zZW5kS2V5cygnIGhlbGxvJyk7CiAgICAgICAgaW5wdXQuY2xpY2soKTsKICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdzYXknKTsKICAgICAgICBvdGhlci5jbGljaygpOwogICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheSBoZWxsbycpOwogICAgICB9KTsKCiAgICAgIGl0KCdzaG91bGQgJHJvbGxiYWNrVmlld1ZhbHVlIHdoZW4gbW9kZWwgY2hhbmdlcycsIGZ1bmN0aW9uKCkgewogICAgICAgIGlucHV0LnNlbmRLZXlzKCcgaGVsbG8nKTsKICAgICAgICBleHBlY3QoaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCdzYXkgaGVsbG8nKTsKICAgICAgICBpbnB1dC5zZW5kS2V5cyhwcm90cmFjdG9yLktleS5FU0NBUEUpOwogICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ3NheScpOwogICAgICAgIG90aGVyLmNsaWNrKCk7CiAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnc2F5Jyk7CiAgICAgIH0pOwogICAgPC9maWxlPgogIDwvZXhhbXBsZT4KCiAgVGhpcyBvbmUgc2hvd3MgaG93IHRvIGRlYm91bmNlIG1vZGVsIGNoYW5nZXMuIE1vZGVsIHdpbGwgYmUgdXBkYXRlZCBvbmx5IDEgc2VjIGFmdGVyIGxhc3QgY2hhbmdlLgogIElmIHRoZSBgQ2xlYXJgIGJ1dHRvbiBpcyBwcmVzc2VkLCBhbnkgZGVib3VuY2VkIGFjdGlvbiBpcyBjYW5jZWxlZCBhbmQgdGhlIHZhbHVlIGJlY29tZXMgZW1wdHkuCgogIDxleGFtcGxlIG5hbWU9Im5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1kZWJvdW5jZSIgbW9kdWxlPSJvcHRpb25zRXhhbXBsZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgPGZvcm0gbmFtZT0idXNlckZvcm0iPgogICAgICAgICAgTmFtZToKICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VyTmFtZSIKICAgICAgICAgICAgICAgICBuZy1tb2RlbD0idXNlci5uYW1lIgogICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9InsgZGVib3VuY2U6IDEwMDAgfSIgLz4KICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9InVzZXJGb3JtLnVzZXJOYW1lLiRyb2xsYmFja1ZpZXdWYWx1ZSgpOyB1c2VyLm5hbWU9JyciPkNsZWFyPC9idXR0b24+PGJyIC8+CiAgICAgICAgPC9mb3JtPgogICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD0idXNlci5uYW1lIj48L3NwYW4+PC9wcmU+CiAgICAgIDwvZGl2PgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iYXBwLmpzIj4KICAgICAgYW5ndWxhci5tb2R1bGUoJ29wdGlvbnNFeGFtcGxlJywgW10pCiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnc2F5JyB9OwogICAgICAgIH1dKTsKICAgIDwvZmlsZT4KICA8L2V4YW1wbGU+CgogIFRoaXMgb25lIHNob3dzIGhvdyB0byBiaW5kIHRvIGdldHRlci9zZXR0ZXJzOgoKICA8ZXhhbXBsZSBuYW1lPSJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtZ2V0dGVyLXNldHRlciIgbW9kdWxlPSJnZXR0ZXJTZXR0ZXJFeGFtcGxlIj4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICA8Zm9ybSBuYW1lPSJ1c2VyRm9ybSI+CiAgICAgICAgICBOYW1lOgogICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InVzZXJOYW1lIgogICAgICAgICAgICAgICAgIG5nLW1vZGVsPSJ1c2VyLm5hbWUiCiAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz0ieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfSIgLz4KICAgICAgICA8L2Zvcm0+CiAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPSJ1c2VyLm5hbWUoKSI+PC9zcGFuPjwvcHJlPgogICAgICA8L2Rpdj4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9ImFwcC5qcyI+CiAgICAgIGFuZ3VsYXIubW9kdWxlKCdnZXR0ZXJTZXR0ZXJFeGFtcGxlJywgW10pCiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgIHZhciBfbmFtZSA9ICdCcmlhbic7CiAgICAgICAgICAkc2NvcGUudXNlciA9IHsKICAgICAgICAgICAgbmFtZTogZnVuY3Rpb24gKG5ld05hbWUpIHsKICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQobmV3TmFtZSkgPyAoX25hbWUgPSBuZXdOYW1lKSA6IF9uYW1lOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH1dKTsKICAgIDwvZmlsZT4KICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdBJywKICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRhdHRycycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzKSB7CiAgICAgIHZhciB0aGF0ID0gdGhpczsKICAgICAgdGhpcy4kb3B0aW9ucyA9ICRzY29wZS4kZXZhbCgkYXR0cnMubmdNb2RlbE9wdGlvbnMpOwogICAgICAvLyBBbGxvdyBhZGRpbmcvb3ZlcnJpZGluZyBib3VuZCBldmVudHMKICAgICAgaWYgKHRoaXMuJG9wdGlvbnMudXBkYXRlT24gIT09IHVuZGVmaW5lZCkgewogICAgICAgIHRoaXMuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gZmFsc2U7CiAgICAgICAgLy8gZXh0cmFjdCAiZGVmYXVsdCIgcHNldWRvLWV2ZW50IGZyb20gbGlzdCBvZiBldmVudHMgdGhhdCBjYW4gdHJpZ2dlciBhIG1vZGVsIHVwZGF0ZQogICAgICAgIHRoaXMuJG9wdGlvbnMudXBkYXRlT24gPSB0cmltKHRoaXMuJG9wdGlvbnMudXBkYXRlT24ucmVwbGFjZShERUZBVUxUX1JFR0VYUCwgZnVuY3Rpb24oKSB7CiAgICAgICAgICB0aGF0LiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IHRydWU7CiAgICAgICAgICByZXR1cm4gJyAnOwogICAgICAgIH0pKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IHRydWU7CiAgICAgIH0KICAgIH1dCiAgfTsKfTsKCi8vIGhlbHBlciBtZXRob2RzCmZ1bmN0aW9uIGFkZFNldFZhbGlkaXR5TWV0aG9kKGNvbnRleHQpIHsKICB2YXIgY3RybCA9IGNvbnRleHQuY3RybCwKICAgICAgJGVsZW1lbnQgPSBjb250ZXh0LiRlbGVtZW50LAogICAgICBjbGFzc0NhY2hlID0ge30sCiAgICAgIHNldCA9IGNvbnRleHQuc2V0LAogICAgICB1bnNldCA9IGNvbnRleHQudW5zZXQsCiAgICAgIHBhcmVudEZvcm0gPSBjb250ZXh0LnBhcmVudEZvcm0sCiAgICAgICRhbmltYXRlID0gY29udGV4dC4kYW5pbWF0ZTsKCiAgY2xhc3NDYWNoZVtJTlZBTElEX0NMQVNTXSA9ICEoY2xhc3NDYWNoZVtWQUxJRF9DTEFTU10gPSAkZWxlbWVudC5oYXNDbGFzcyhWQUxJRF9DTEFTUykpOwoKICBjdHJsLiRzZXRWYWxpZGl0eSA9IHNldFZhbGlkaXR5OwoKICBmdW5jdGlvbiBzZXRWYWxpZGl0eSh2YWxpZGF0aW9uRXJyb3JLZXksIHN0YXRlLCBvcHRpb25zKSB7CiAgICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZCkgewogICAgICBjcmVhdGVBbmRTZXQoJyRwZW5kaW5nJywgdmFsaWRhdGlvbkVycm9yS2V5LCBvcHRpb25zKTsKICAgIH0gZWxzZSB7CiAgICAgIHVuc2V0QW5kQ2xlYW51cCgnJHBlbmRpbmcnLCB2YWxpZGF0aW9uRXJyb3JLZXksIG9wdGlvbnMpOwogICAgfQogICAgaWYgKCFpc0Jvb2xlYW4oc3RhdGUpKSB7CiAgICAgIHVuc2V0KGN0cmwuJGVycm9yLCB2YWxpZGF0aW9uRXJyb3JLZXksIG9wdGlvbnMpOwogICAgICB1bnNldChjdHJsLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBvcHRpb25zKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChzdGF0ZSkgewogICAgICAgIHVuc2V0KGN0cmwuJGVycm9yLCB2YWxpZGF0aW9uRXJyb3JLZXksIG9wdGlvbnMpOwogICAgICAgIHNldChjdHJsLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBvcHRpb25zKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzZXQoY3RybC4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgb3B0aW9ucyk7CiAgICAgICAgdW5zZXQoY3RybC4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgb3B0aW9ucyk7CiAgICAgIH0KICAgIH0KICAgIGlmIChjdHJsLiRwZW5kaW5nKSB7CiAgICAgIGNhY2hlZFRvZ2dsZUNsYXNzKFBFTkRJTkdfQ0xBU1MsIHRydWUpOwogICAgICBjdHJsLiR2YWxpZCA9IGN0cmwuJGludmFsaWQgPSB1bmRlZmluZWQ7CiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3MoJycsIG51bGwpOwogICAgfSBlbHNlIHsKICAgICAgY2FjaGVkVG9nZ2xlQ2xhc3MoUEVORElOR19DTEFTUywgZmFsc2UpOwogICAgICBjdHJsLiR2YWxpZCA9IGlzT2JqZWN0RW1wdHkoY3RybC4kZXJyb3IpOwogICAgICBjdHJsLiRpbnZhbGlkID0gIWN0cmwuJHZhbGlkOwogICAgICB0b2dnbGVWYWxpZGF0aW9uQ3NzKCcnLCBjdHJsLiR2YWxpZCk7CiAgICB9CgogICAgLy8gcmUtcmVhZCB0aGUgc3RhdGUgYXMgdGhlIHNldC91bnNldCBtZXRob2RzIGNvdWxkIGhhdmUKICAgIC8vIGNvbWJpbmVkIHN0YXRlIGluIGN0cmwuJGVycm9yW3ZhbGlkYXRpb25FcnJvcl0gKHVzZWQgZm9yIGZvcm1zKSwKICAgIC8vIHdoZXJlIHNldHRpbmcvdW5zZXR0aW5nIG9ubHkgaW5jcmVtZW50cy9kZWNyZW1lbnRzIHRoZSB2YWx1ZSwKICAgIC8vIGFuZCBkb2VzIG5vdCByZXBsYWNlIGl0LgogICAgdmFyIGNvbWJpbmVkU3RhdGU7CiAgICBpZiAoY3RybC4kcGVuZGluZyAmJiBjdHJsLiRwZW5kaW5nW3ZhbGlkYXRpb25FcnJvcktleV0pIHsKICAgICAgY29tYmluZWRTdGF0ZSA9IHVuZGVmaW5lZDsKICAgIH0gZWxzZSBpZiAoY3RybC4kZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkgewogICAgICBjb21iaW5lZFN0YXRlID0gZmFsc2U7CiAgICB9IGVsc2UgaWYgKGN0cmwuJCRzdWNjZXNzW3ZhbGlkYXRpb25FcnJvcktleV0pIHsKICAgICAgY29tYmluZWRTdGF0ZSA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICBjb21iaW5lZFN0YXRlID0gbnVsbDsKICAgIH0KICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlKTsKICAgIHBhcmVudEZvcm0uJHNldFZhbGlkaXR5KHZhbGlkYXRpb25FcnJvcktleSwgY29tYmluZWRTdGF0ZSwgY3RybCk7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVBbmRTZXQobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHsKICAgIGlmICghY3RybFtuYW1lXSkgewogICAgICBjdHJsW25hbWVdID0ge307CiAgICB9CiAgICBzZXQoY3RybFtuYW1lXSwgdmFsdWUsIG9wdGlvbnMpOwogIH0KCiAgZnVuY3Rpb24gdW5zZXRBbmRDbGVhbnVwKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7CiAgICBpZiAoY3RybFtuYW1lXSkgewogICAgICB1bnNldChjdHJsW25hbWVdLCB2YWx1ZSwgb3B0aW9ucyk7CiAgICB9CiAgICBpZiAoaXNPYmplY3RFbXB0eShjdHJsW25hbWVdKSkgewogICAgICBjdHJsW25hbWVdID0gdW5kZWZpbmVkOwogICAgfQogIH0KCiAgZnVuY3Rpb24gY2FjaGVkVG9nZ2xlQ2xhc3MoY2xhc3NOYW1lLCBzd2l0Y2hWYWx1ZSkgewogICAgaWYgKHN3aXRjaFZhbHVlICYmICFjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHsKICAgICAgJGFuaW1hdGUuYWRkQ2xhc3MoJGVsZW1lbnQsIGNsYXNzTmFtZSk7CiAgICAgIGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IHRydWU7CiAgICB9IGVsc2UgaWYgKCFzd2l0Y2hWYWx1ZSAmJiBjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHsKICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoJGVsZW1lbnQsIGNsYXNzTmFtZSk7CiAgICAgIGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IGZhbHNlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRhdGlvbkNzcyh2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQpIHsKICAgIHZhbGlkYXRpb25FcnJvcktleSA9IHZhbGlkYXRpb25FcnJvcktleSA/ICctJyArIHNuYWtlX2Nhc2UodmFsaWRhdGlvbkVycm9yS2V5LCAnLScpIDogJyc7CgogICAgY2FjaGVkVG9nZ2xlQ2xhc3MoVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IHRydWUpOwogICAgY2FjaGVkVG9nZ2xlQ2xhc3MoSU5WQUxJRF9DTEFTUyArIHZhbGlkYXRpb25FcnJvcktleSwgaXNWYWxpZCA9PT0gZmFsc2UpOwogIH0KfQoKZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHsKICBpZiAob2JqKSB7CiAgICBmb3IgKHZhciBwcm9wIGluIG9iaikgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQogIHJldHVybiB0cnVlOwp9CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0JpbmQKICogQHJlc3RyaWN0IEFDCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQmluZGAgYXR0cmlidXRlIHRlbGxzIEFuZ3VsYXIgdG8gcmVwbGFjZSB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBzcGVjaWZpZWQgSFRNTCBlbGVtZW50CiAqIHdpdGggdGhlIHZhbHVlIG9mIGEgZ2l2ZW4gZXhwcmVzc2lvbiwgYW5kIHRvIHVwZGF0ZSB0aGUgdGV4dCBjb250ZW50IHdoZW4gdGhlIHZhbHVlIG9mIHRoYXQKICogZXhwcmVzc2lvbiBjaGFuZ2VzLgogKgogKiBUeXBpY2FsbHksIHlvdSBkb24ndCB1c2UgYG5nQmluZGAgZGlyZWN0bHksIGJ1dCBpbnN0ZWFkIHlvdSB1c2UgdGhlIGRvdWJsZSBjdXJseSBtYXJrdXAgbGlrZQogKiBge3sgZXhwcmVzc2lvbiB9fWAgd2hpY2ggaXMgc2ltaWxhciBidXQgbGVzcyB2ZXJib3NlLgogKgogKiBJdCBpcyBwcmVmZXJhYmxlIHRvIHVzZSBgbmdCaW5kYCBpbnN0ZWFkIG9mIGB7eyBleHByZXNzaW9uIH19YCBpZiBhIHRlbXBsYXRlIGlzIG1vbWVudGFyaWx5CiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3IHN0YXRlIGJlZm9yZSBBbmd1bGFyIGNvbXBpbGVzIGl0LiBTaW5jZSBgbmdCaW5kYCBpcyBhbgogKiBlbGVtZW50IGF0dHJpYnV0ZSwgaXQgbWFrZXMgdGhlIGJpbmRpbmdzIGludmlzaWJsZSB0byB0aGUgdXNlciB3aGlsZSB0aGUgcGFnZSBpcyBsb2FkaW5nLgogKgogKiBBbiBhbHRlcm5hdGl2ZSBzb2x1dGlvbiB0byB0aGlzIHByb2JsZW0gd291bGQgYmUgdXNpbmcgdGhlCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbG9hayBuZ0Nsb2FrfSBkaXJlY3RpdmUuCiAqCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS4KICoKICogQGV4YW1wbGUKICogRW50ZXIgYSBuYW1lIGluIHRoZSBMaXZlIFByZXZpZXcgdGV4dCBib3g7IHRoZSBncmVldGluZyBiZWxvdyB0aGUgdGV4dCBib3ggY2hhbmdlcyBpbnN0YW50bHkuCiAgIDxleGFtcGxlIG1vZHVsZT0iYmluZEV4YW1wbGUiPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRFeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS5uYW1lID0gJ1doaXJsZWQnOwogICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgIEVudGVyIG5hbWU6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0ibmFtZSI+PGJyPgogICAgICAgICBIZWxsbyA8c3BhbiBuZy1iaW5kPSJuYW1lIj48L3NwYW4+IQogICAgICAgPC9kaXY+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIHZhciBuYW1lSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lJykpOwoKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ1doaXJsZWQnKTsKICAgICAgICAgbmFtZUlucHV0LmNsZWFyKCk7CiAgICAgICAgIG5hbWVJbnB1dC5zZW5kS2V5cygnd29ybGQnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ3dvcmxkJyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ0JpbmREaXJlY3RpdmUgPSBbJyRjb21waWxlJywgZnVuY3Rpb24oJGNvbXBpbGUpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdBQycsCiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRDb21waWxlKHRlbXBsYXRlRWxlbWVudCkgewogICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpOwogICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgYXR0ci5uZ0JpbmQpOwogICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdOwogICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nQmluZCwgZnVuY3Rpb24gbmdCaW5kV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiB2YWx1ZTsKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KICB9Owp9XTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0JpbmRUZW1wbGF0ZQogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0JpbmRUZW1wbGF0ZWAgZGlyZWN0aXZlIHNwZWNpZmllcyB0aGF0IHRoZSBlbGVtZW50CiAqIHRleHQgY29udGVudCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgaW50ZXJwb2xhdGlvbiBvZiB0aGUgdGVtcGxhdGUKICogaW4gdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgYXR0cmlidXRlLgogKiBVbmxpa2UgYG5nQmluZGAsIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGNhbiBjb250YWluIG11bHRpcGxlIGB7e2AgYH19YAogKiBleHByZXNzaW9ucy4gVGhpcyBkaXJlY3RpdmUgaXMgbmVlZGVkIHNpbmNlIHNvbWUgSFRNTCBlbGVtZW50cwogKiAoc3VjaCBhcyBUSVRMRSBhbmQgT1BUSU9OKSBjYW5ub3QgY29udGFpbiBTUEFOIGVsZW1lbnRzLgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtzdHJpbmd9IG5nQmluZFRlbXBsYXRlIHRlbXBsYXRlIG9mIGZvcm0KICogICA8dHQ+e3s8L3R0PiA8dHQ+ZXhwcmVzc2lvbjwvdHQ+IDx0dD59fTwvdHQ+IHRvIGV2YWwuCiAqCiAqIEBleGFtcGxlCiAqIFRyeSBpdCBoZXJlOiBlbnRlciB0ZXh0IGluIHRleHQgYm94IGFuZCB3YXRjaCB0aGUgZ3JlZXRpbmcgY2hhbmdlLgogICA8ZXhhbXBsZSBtb2R1bGU9ImJpbmRFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKQogICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24gKCRzY29wZSkgewogICAgICAgICAgICAgJHNjb3BlLnNhbHV0YXRpb24gPSAnSGVsbG8nOwogICAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV29ybGQnOwogICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgU2FsdXRhdGlvbjogPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJzYWx1dGF0aW9uIj48YnI+CiAgICAgICAgTmFtZTogPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJuYW1lIj48YnI+CiAgICAgICAgPHByZSBuZy1iaW5kLXRlbXBsYXRlPSJ7e3NhbHV0YXRpb259fSB7e25hbWV9fSEiPjwvcHJlPgogICAgICAgPC9kaXY+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIHZhciBzYWx1dGF0aW9uRWxlbSA9IGVsZW1lbnQoYnkuYmluZGluZygnc2FsdXRhdGlvbicpKTsKICAgICAgICAgdmFyIHNhbHV0YXRpb25JbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NhbHV0YXRpb24nKSk7CiAgICAgICAgIHZhciBuYW1lSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lJykpOwoKICAgICAgICAgZXhwZWN0KHNhbHV0YXRpb25FbGVtLmdldFRleHQoKSkudG9CZSgnSGVsbG8gV29ybGQhJyk7CgogICAgICAgICBzYWx1dGF0aW9uSW5wdXQuY2xlYXIoKTsKICAgICAgICAgc2FsdXRhdGlvbklucHV0LnNlbmRLZXlzKCdHcmVldGluZ3MnKTsKICAgICAgICAgbmFtZUlucHV0LmNsZWFyKCk7CiAgICAgICAgIG5hbWVJbnB1dC5zZW5kS2V5cygndXNlcicpOwoKICAgICAgICAgZXhwZWN0KHNhbHV0YXRpb25FbGVtLmdldFRleHQoKSkudG9CZSgnR3JlZXRpbmdzIHVzZXIhJyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJGludGVycG9sYXRlLCAkY29tcGlsZSkgewogIHJldHVybiB7CiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRUZW1wbGF0ZUNvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7CiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlRWxlbWVudCk7CiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0JpbmRUZW1wbGF0ZUxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0JpbmRUZW1wbGF0ZSkpOwogICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7CiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRbMF07CiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmdCaW5kVGVtcGxhdGUnLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IHZhbHVlOwogICAgICAgIH0pOwogICAgICB9OwogICAgfQogIH07Cn1dOwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nQmluZEh0bWwKICoKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZXMgYSBiaW5kaW5nIHRoYXQgd2lsbCBpbm5lckhUTUwgdGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBgZXhwcmVzc2lvbmAgaW50byB0aGUgY3VycmVudAogKiBlbGVtZW50IGluIGEgc2VjdXJlIHdheS4gIEJ5IGRlZmF1bHQsIHRoZSBpbm5lckhUTUwtZWQgY29udGVudCB3aWxsIGJlIHNhbml0aXplZCB1c2luZyB0aGUge0BsaW5rCiAqIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gc2VydmljZS4gIFRvIHV0aWxpemUgdGhpcyBmdW5jdGlvbmFsaXR5LCBlbnN1cmUgdGhhdCBgJHNhbml0aXplYAogKiBpcyBhdmFpbGFibGUsIGZvciBleGFtcGxlLCBieSBpbmNsdWRpbmcge0BsaW5rIG5nU2FuaXRpemV9IGluIHlvdXIgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzIChub3QgaW4KICogY29yZSBBbmd1bGFyKS4gSW4gb3JkZXIgdG8gdXNlIHtAbGluayBuZ1Nhbml0aXplfSBpbiB5b3VyIG1vZHVsZSdzIGRlcGVuZGVuY2llcywgeW91IG5lZWQgdG8KICogaW5jbHVkZSAiYW5ndWxhci1zYW5pdGl6ZS5qcyIgaW4geW91ciBhcHBsaWNhdGlvbi4KICoKICogWW91IG1heSBhbHNvIGJ5cGFzcyBzYW5pdGl6YXRpb24gZm9yIHZhbHVlcyB5b3Uga25vdyBhcmUgc2FmZS4gVG8gZG8gc28sIGJpbmQgdG8KICogYW4gZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlIHZpYSB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzSHRtbCAkc2NlLnRydXN0QXNIdG1sfS4gIFNlZSB0aGUgZXhhbXBsZQogKiB1bmRlciB7QGxpbmsgbmcuJHNjZSNzaG93LW1lLWFuLWV4YW1wbGUtdXNpbmctc2NlLSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uCiAqCiAqIE5vdGU6IElmIGEgYCRzYW5pdGl6ZWAgc2VydmljZSBpcyB1bmF2YWlsYWJsZSBhbmQgdGhlIGJvdW5kIHZhbHVlIGlzbid0IGV4cGxpY2l0bHkgdHJ1c3RlZCwgeW91CiAqIHdpbGwgaGF2ZSBhbiBleGNlcHRpb24gKGluc3RlYWQgb2YgYW4gZXhwbG9pdC4pCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZEh0bWwge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuCiAqCiAqIEBleGFtcGxlCgogICA8ZXhhbXBsZSBtb2R1bGU9ImJpbmRIdG1sRXhhbXBsZSIgZGVwcz0iYW5ndWxhci1zYW5pdGl6ZS5qcyI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICA8cCBuZy1iaW5kLWh0bWw9Im15SFRNTCI+PC9wPgogICAgICAgPC9kaXY+CiAgICAgPC9maWxlPgoKICAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRIdG1sRXhhbXBsZScsIFsnbmdTYW5pdGl6ZSddKQogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgICRzY29wZS5teUhUTUwgPQogICAgICAgICAgICAgICdJIGFtIGFuIDxjb2RlPkhUTUw8L2NvZGU+c3RyaW5nIHdpdGggJyArCiAgICAgICAgICAgICAgJzxhIGhyZWY9IiMiPmxpbmtzITwvYT4gYW5kIG90aGVyIDxlbT5zdHVmZjwvZW0+JzsKICAgICAgICAgfV0pOwogICAgIDwvZmlsZT4KCiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQtaHRtbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdteUhUTUwnKSkuZ2V0VGV4dCgpKS50b0JlKAogICAgICAgICAgICAgJ0kgYW0gYW4gSFRNTHN0cmluZyB3aXRoIGxpbmtzISBhbmQgb3RoZXIgc3R1ZmYnKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KdmFyIG5nQmluZEh0bWxEaXJlY3RpdmUgPSBbJyRzY2UnLCAnJHBhcnNlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJHNjZSwgJHBhcnNlLCAkY29tcGlsZSkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgY29tcGlsZTogZnVuY3Rpb24gbmdCaW5kSHRtbENvbXBpbGUodEVsZW1lbnQsIHRBdHRycykgewogICAgICB2YXIgbmdCaW5kSHRtbEdldHRlciA9ICRwYXJzZSh0QXR0cnMubmdCaW5kSHRtbCk7CiAgICAgIHZhciBuZ0JpbmRIdG1sV2F0Y2ggPSAkcGFyc2UodEF0dHJzLm5nQmluZEh0bWwsIGZ1bmN0aW9uIGdldFN0cmluZ1ZhbHVlKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuICh2YWx1ZSB8fCAnJykudG9TdHJpbmcoKTsKICAgICAgfSk7CiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRFbGVtZW50KTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0JpbmRIdG1sTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgYXR0ci5uZ0JpbmRIdG1sKTsKCiAgICAgICAgc2NvcGUuJHdhdGNoKG5nQmluZEh0bWxXYXRjaCwgZnVuY3Rpb24gbmdCaW5kSHRtbFdhdGNoQWN0aW9uKCkgewogICAgICAgICAgLy8gd2UgcmUtZXZhbHVhdGUgdGhlIGV4cHIgYmVjYXVzZSB3ZSB3YW50IGEgVHJ1c3RlZFZhbHVlSG9sZGVyVHlwZQogICAgICAgICAgLy8gZm9yICRzY2UsIG5vdCBhIHN0cmluZwogICAgICAgICAgZWxlbWVudC5odG1sKCRzY2UuZ2V0VHJ1c3RlZEh0bWwobmdCaW5kSHRtbEdldHRlcihzY29wZSkpIHx8ICcnKTsKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KICB9Owp9XTsKCmZ1bmN0aW9uIGNsYXNzRGlyZWN0aXZlKG5hbWUsIHNlbGVjdG9yKSB7CiAgbmFtZSA9ICduZ0NsYXNzJyArIG5hbWU7CiAgcmV0dXJuIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkgewogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdBQycsCiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgdmFyIG9sZFZhbDsKCiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbmFtZV0sIG5nQ2xhc3NXYXRjaEFjdGlvbiwgdHJ1ZSk7CgogICAgICAgIGF0dHIuJG9ic2VydmUoJ2NsYXNzJywgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgIG5nQ2xhc3NXYXRjaEFjdGlvbihzY29wZS4kZXZhbChhdHRyW25hbWVdKSk7CiAgICAgICAgfSk7CgoKICAgICAgICBpZiAobmFtZSAhPT0gJ25nQ2xhc3MnKSB7CiAgICAgICAgICBzY29wZS4kd2F0Y2goJyRpbmRleCcsIGZ1bmN0aW9uKCRpbmRleCwgb2xkJGluZGV4KSB7CiAgICAgICAgICAgIC8vIGpzaGludCBiaXR3aXNlOiBmYWxzZQogICAgICAgICAgICB2YXIgbW9kID0gJGluZGV4ICYgMTsKICAgICAgICAgICAgaWYgKG1vZCAhPT0gKG9sZCRpbmRleCAmIDEpKSB7CiAgICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSBhcnJheUNsYXNzZXMoc2NvcGUuJGV2YWwoYXR0cltuYW1lXSkpOwogICAgICAgICAgICAgIG1vZCA9PT0gc2VsZWN0b3IgPwogICAgICAgICAgICAgICAgYWRkQ2xhc3NlcyhjbGFzc2VzKSA6CiAgICAgICAgICAgICAgICByZW1vdmVDbGFzc2VzKGNsYXNzZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFkZENsYXNzZXMoY2xhc3NlcykgewogICAgICAgICAgdmFyIG5ld0NsYXNzZXMgPSBkaWdlc3RDbGFzc0NvdW50cyhjbGFzc2VzLCAxKTsKICAgICAgICAgIGF0dHIuJGFkZENsYXNzKG5ld0NsYXNzZXMpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcyhjbGFzc2VzKSB7CiAgICAgICAgICB2YXIgbmV3Q2xhc3NlcyA9IGRpZ2VzdENsYXNzQ291bnRzKGNsYXNzZXMsIC0xKTsKICAgICAgICAgIGF0dHIuJHJlbW92ZUNsYXNzKG5ld0NsYXNzZXMpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZGlnZXN0Q2xhc3NDb3VudHMgKGNsYXNzZXMsIGNvdW50KSB7CiAgICAgICAgICB2YXIgY2xhc3NDb3VudHMgPSBlbGVtZW50LmRhdGEoJyRjbGFzc0NvdW50cycpIHx8IHt9OwogICAgICAgICAgdmFyIGNsYXNzZXNUb1VwZGF0ZSA9IFtdOwogICAgICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7CiAgICAgICAgICAgIGlmIChjb3VudCA+IDAgfHwgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSkgewogICAgICAgICAgICAgIGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gPSAoY2xhc3NDb3VudHNbY2xhc3NOYW1lXSB8fCAwKSArIGNvdW50OwogICAgICAgICAgICAgIGlmIChjbGFzc0NvdW50c1tjbGFzc05hbWVdID09PSArKGNvdW50ID4gMCkpIHsKICAgICAgICAgICAgICAgIGNsYXNzZXNUb1VwZGF0ZS5wdXNoKGNsYXNzTmFtZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIGVsZW1lbnQuZGF0YSgnJGNsYXNzQ291bnRzJywgY2xhc3NDb3VudHMpOwogICAgICAgICAgcmV0dXJuIGNsYXNzZXNUb1VwZGF0ZS5qb2luKCcgJyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1cGRhdGVDbGFzc2VzIChvbGRDbGFzc2VzLCBuZXdDbGFzc2VzKSB7CiAgICAgICAgICB2YXIgdG9BZGQgPSBhcnJheURpZmZlcmVuY2UobmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcyk7CiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSBhcnJheURpZmZlcmVuY2Uob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7CiAgICAgICAgICB0b0FkZCA9IGRpZ2VzdENsYXNzQ291bnRzKHRvQWRkLCAxKTsKICAgICAgICAgIHRvUmVtb3ZlID0gZGlnZXN0Q2xhc3NDb3VudHModG9SZW1vdmUsIC0xKTsKICAgICAgICAgIGlmICh0b0FkZCAmJiB0b0FkZC5sZW5ndGgpIHsKICAgICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgdG9BZGQpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkgewogICAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCB0b1JlbW92ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBuZ0NsYXNzV2F0Y2hBY3Rpb24obmV3VmFsKSB7CiAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09IHRydWUgfHwgc2NvcGUuJGluZGV4ICUgMiA9PT0gc2VsZWN0b3IpIHsKICAgICAgICAgICAgdmFyIG5ld0NsYXNzZXMgPSBhcnJheUNsYXNzZXMobmV3VmFsIHx8IFtdKTsKICAgICAgICAgICAgaWYgKCFvbGRWYWwpIHsKICAgICAgICAgICAgICBhZGRDbGFzc2VzKG5ld0NsYXNzZXMpOwogICAgICAgICAgICB9IGVsc2UgaWYgKCFlcXVhbHMobmV3VmFsLG9sZFZhbCkpIHsKICAgICAgICAgICAgICB2YXIgb2xkQ2xhc3NlcyA9IGFycmF5Q2xhc3NlcyhvbGRWYWwpOwogICAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIG9sZFZhbCA9IHNoYWxsb3dDb3B5KG5ld1ZhbCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIGZ1bmN0aW9uIGFycmF5RGlmZmVyZW5jZSh0b2tlbnMxLCB0b2tlbnMyKSB7CiAgICAgIHZhciB2YWx1ZXMgPSBbXTsKCiAgICAgIG91dGVyOgogICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdG9rZW5zMS5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciB0b2tlbiA9IHRva2VuczFbaV07CiAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8IHRva2VuczIubGVuZ3RoOyBqKyspIHsKICAgICAgICAgIGlmKHRva2VuID09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyOwogICAgICAgIH0KICAgICAgICB2YWx1ZXMucHVzaCh0b2tlbik7CiAgICAgIH0KICAgICAgcmV0dXJuIHZhbHVlczsKICAgIH0KCiAgICBmdW5jdGlvbiBhcnJheUNsYXNzZXMgKGNsYXNzVmFsKSB7CiAgICAgIGlmIChpc0FycmF5KGNsYXNzVmFsKSkgewogICAgICAgIHJldHVybiBjbGFzc1ZhbDsKICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhjbGFzc1ZhbCkpIHsKICAgICAgICByZXR1cm4gY2xhc3NWYWwuc3BsaXQoJyAnKTsKICAgICAgfSBlbHNlIGlmIChpc09iamVjdChjbGFzc1ZhbCkpIHsKICAgICAgICB2YXIgY2xhc3NlcyA9IFtdLCBpID0gMDsKICAgICAgICBmb3JFYWNoKGNsYXNzVmFsLCBmdW5jdGlvbih2LCBrKSB7CiAgICAgICAgICBpZiAodikgewogICAgICAgICAgICBjbGFzc2VzID0gY2xhc3Nlcy5jb25jYXQoay5zcGxpdCgnICcpKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gY2xhc3NlczsKICAgICAgfQogICAgICByZXR1cm4gY2xhc3NWYWw7CiAgICB9CiAgfV07Cn0KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nQ2xhc3MKICogQHJlc3RyaWN0IEFDCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQ2xhc3NgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIGR5bmFtaWNhbGx5IHNldCBDU1MgY2xhc3NlcyBvbiBhbiBIVE1MIGVsZW1lbnQgYnkgZGF0YWJpbmRpbmcKICogYW4gZXhwcmVzc2lvbiB0aGF0IHJlcHJlc2VudHMgYWxsIGNsYXNzZXMgdG8gYmUgYWRkZWQuCiAqCiAqIFRoZSBkaXJlY3RpdmUgb3BlcmF0ZXMgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMsIGRlcGVuZGluZyBvbiB3aGljaCBvZiB0aHJlZSB0eXBlcyB0aGUgZXhwcmVzc2lvbgogKiBldmFsdWF0ZXMgdG86CiAqCiAqIDEuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlIHN0cmluZyBzaG91bGQgYmUgb25lIG9yIG1vcmUgc3BhY2UtZGVsaW1pdGVkIGNsYXNzCiAqIG5hbWVzLgogKgogKiAyLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gYXJyYXksIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXkgc2hvdWxkIGJlIGEgc3RyaW5nIHRoYXQgaXMKICogb25lIG9yIG1vcmUgc3BhY2UtZGVsaW1pdGVkIGNsYXNzIG5hbWVzLgogKgogKiAzLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gb2JqZWN0LCB0aGVuIGZvciBlYWNoIGtleS12YWx1ZSBwYWlyIG9mIHRoZQogKiBvYmplY3Qgd2l0aCBhIHRydXRoeSB2YWx1ZSB0aGUgY29ycmVzcG9uZGluZyBrZXkgaXMgdXNlZCBhcyBhIGNsYXNzIG5hbWUuCiAqCiAqIFRoZSBkaXJlY3RpdmUgd29uJ3QgYWRkIGR1cGxpY2F0ZSBjbGFzc2VzIGlmIGEgcGFydGljdWxhciBjbGFzcyB3YXMgYWxyZWFkeSBzZXQuCiAqCiAqIFdoZW4gdGhlIGV4cHJlc3Npb24gY2hhbmdlcywgdGhlIHByZXZpb3VzbHkgYWRkZWQgY2xhc3NlcyBhcmUgcmVtb3ZlZCBhbmQgb25seSB0aGVuIHRoZQogKiBuZXcgY2xhc3NlcyBhcmUgYWRkZWQuCiAqCiAqIEBhbmltYXRpb25zCiAqIGFkZCAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQKICogcmVtb3ZlIC0gaGFwcGVucyBqdXN0IGJlZm9yZSB0aGUgY2xhc3MgaXMgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50CiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3Mge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdAogKiAgIG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzCiAqICAgbmFtZXMsIGFuIGFycmF5LCBvciBhIG1hcCBvZiBjbGFzcyBuYW1lcyB0byBib29sZWFuIHZhbHVlcy4gSW4gdGhlIGNhc2Ugb2YgYSBtYXAsIHRoZQogKiAgIG5hbWVzIG9mIHRoZSBwcm9wZXJ0aWVzIHdob3NlIHZhbHVlcyBhcmUgdHJ1dGh5IHdpbGwgYmUgYWRkZWQgYXMgY3NzIGNsYXNzZXMgdG8gdGhlCiAqICAgZWxlbWVudC4KICoKICogQGV4YW1wbGUgRXhhbXBsZSB0aGF0IGRlbW9uc3RyYXRlcyBiYXNpYyBiaW5kaW5ncyB2aWEgbmdDbGFzcyBkaXJlY3RpdmUuCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHAgbmctY2xhc3M9IntzdHJpa2U6IGRlbGV0ZWQsIGJvbGQ6IGltcG9ydGFudCwgcmVkOiBlcnJvcn0iPk1hcCBTeW50YXggRXhhbXBsZTwvcD4KICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9ImRlbGV0ZWQiPiBkZWxldGVkIChhcHBseSAic3RyaWtlIiBjbGFzcyk8YnI+CiAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJpbXBvcnRhbnQiPiBpbXBvcnRhbnQgKGFwcGx5ICJib2xkIiBjbGFzcyk8YnI+CiAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJlcnJvciI+IGVycm9yIChhcHBseSAicmVkIiBjbGFzcykKICAgICAgIDxocj4KICAgICAgIDxwIG5nLWNsYXNzPSJzdHlsZSI+VXNpbmcgU3RyaW5nIFN5bnRheDwvcD4KICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0ic3R5bGUiIHBsYWNlaG9sZGVyPSJUeXBlOiBib2xkIHN0cmlrZSByZWQiPgogICAgICAgPGhyPgogICAgICAgPHAgbmctY2xhc3M9IltzdHlsZTEsIHN0eWxlMiwgc3R5bGUzXSI+VXNpbmcgQXJyYXkgU3ludGF4PC9wPgogICAgICAgPGlucHV0IG5nLW1vZGVsPSJzdHlsZTEiIHBsYWNlaG9sZGVyPSJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkIj48YnI+CiAgICAgICA8aW5wdXQgbmctbW9kZWw9InN0eWxlMiIgcGxhY2Vob2xkZXI9IlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWQiPjxicj4KICAgICAgIDxpbnB1dCBuZy1tb2RlbD0ic3R5bGUzIiBwbGFjZWhvbGRlcj0iVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCI+PGJyPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgLnN0cmlrZSB7CiAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoOwogICAgICAgfQogICAgICAgLmJvbGQgewogICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgfQogICAgICAgLnJlZCB7CiAgICAgICAgICAgY29sb3I6IHJlZDsKICAgICAgIH0KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICB2YXIgcHMgPSBlbGVtZW50LmFsbChieS5jc3MoJ3AnKSk7CgogICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSB0aGUgY2xhc3MnLCBmdW5jdGlvbigpIHsKCiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LnRvTWF0Y2goL2JvbGQvKTsKICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QudG9NYXRjaCgvcmVkLyk7CgogICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdpbXBvcnRhbnQnKSkuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b01hdGNoKC9ib2xkLyk7CgogICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdlcnJvcicpKS5jbGljaygpOwogICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL3JlZC8pOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSBzdHJpbmcgZXhhbXBsZScsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QocHMuZ2V0KDEpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7CiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlJykpLmNsZWFyKCk7CiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlJykpLnNlbmRLZXlzKCdyZWQnKTsKICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ3JlZCcpOwogICAgICAgfSk7CgogICAgICAgaXQoJ2FycmF5IGV4YW1wbGUgc2hvdWxkIGhhdmUgMyBjbGFzc2VzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChwcy5sYXN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCcnKTsKICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUxJykpLnNlbmRLZXlzKCdib2xkJyk7CiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMicpKS5zZW5kS2V5cygnc3RyaWtlJyk7CiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMycpKS5zZW5kS2V5cygncmVkJyk7CiAgICAgICAgIGV4cGVjdChwcy5sYXN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIHN0cmlrZSByZWQnKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgoKICAgIyMgQW5pbWF0aW9ucwoKICAgVGhlIGV4YW1wbGUgYmVsb3cgZGVtb25zdHJhdGVzIGhvdyB0byBwZXJmb3JtIGFuaW1hdGlvbnMgdXNpbmcgbmdDbGFzcy4KCiAgIDxleGFtcGxlIG1vZHVsZT0ibmdBbmltYXRlIiBkZXBzPSJhbmd1bGFyLWFuaW1hdGUuanMiIGFuaW1hdGlvbnM9InRydWUiPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8aW5wdXQgaWQ9InNldGJ0biIgdHlwZT0iYnV0dG9uIiB2YWx1ZT0ic2V0IiBuZy1jbGljaz0ibXlWYXI9J215LWNsYXNzJyI+CiAgICAgIDxpbnB1dCBpZD0iY2xlYXJidG4iIHR5cGU9ImJ1dHRvbiIgdmFsdWU9ImNsZWFyIiBuZy1jbGljaz0ibXlWYXI9JyciPgogICAgICA8YnI+CiAgICAgIDxzcGFuIGNsYXNzPSJiYXNlLWNsYXNzIiBuZy1jbGFzcz0ibXlWYXIiPlNhbXBsZSBUZXh0PC9zcGFuPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgLmJhc2UtY2xhc3MgewogICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41czsKICAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzOwogICAgICAgfQoKICAgICAgIC5iYXNlLWNsYXNzLm15LWNsYXNzIHsKICAgICAgICAgY29sb3I6IHJlZDsKICAgICAgICAgZm9udC1zaXplOjNlbTsKICAgICAgIH0KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsYXNzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuCiAgICAgICAgICAgdG9NYXRjaCgvbXktY2xhc3MvKTsKCiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ3NldGJ0bicpKS5jbGljaygpOwoKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcuYmFzZS1jbGFzcycpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLgogICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7CgogICAgICAgICBlbGVtZW50KGJ5LmlkKCdjbGVhcmJ0bicpKS5jbGljaygpOwoKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcuYmFzZS1jbGFzcycpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC4KICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CgoKICAgIyMgbmdDbGFzcyBhbmQgcHJlLWV4aXN0aW5nIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9ucwogICBUaGUgbmdDbGFzcyBkaXJlY3RpdmUgc3RpbGwgc3VwcG9ydHMgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zIGV2ZW4gaWYgdGhleSBkbyBub3QgZm9sbG93IHRoZSBuZ0FuaW1hdGUgQ1NTIG5hbWluZyBzdHJ1Y3R1cmUuCiAgIFVwb24gYW5pbWF0aW9uIG5nQW5pbWF0ZSB3aWxsIGFwcGx5IHN1cHBsZW1lbnRhcnkgQ1NTIGNsYXNzZXMgdG8gdHJhY2sgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgYW4gYW5pbWF0aW9uLCBidXQgdGhpcyB3aWxsIG5vdCBoaW5kZXIKICAgYW55IHByZS1leGlzdGluZyBDU1MgdHJhbnNpdGlvbnMgYWxyZWFkeSBvbiB0aGUgZWxlbWVudC4gVG8gZ2V0IGFuIGlkZWEgb2Ygd2hhdCBoYXBwZW5zIGR1cmluZyBhIGNsYXNzLWJhc2VkIGFuaW1hdGlvbiwgYmUgc3VyZQogICB0byB2aWV3IHRoZSBzdGVwIGJ5IHN0ZXAgZGV0YWlscyBvZiB7QGxpbmsgbmcuJGFuaW1hdGUjYWRkQ2xhc3MgJGFuaW1hdGUuYWRkQ2xhc3N9IGFuZAogICB7QGxpbmsgbmcuJGFuaW1hdGUjcmVtb3ZlQ2xhc3MgJGFuaW1hdGUucmVtb3ZlQ2xhc3N9LgogKi8KdmFyIG5nQ2xhc3NEaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnJywgdHJ1ZSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0NsYXNzT2RkCiAqIEByZXN0cmljdCBBQwogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhcwogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCB0aGV5IHdvcmsgaW4KICogY29uanVuY3Rpb24gd2l0aCBgbmdSZXBlYXRgIGFuZCB0YWtlIGVmZmVjdCBvbmx5IG9uIG9kZCAoZXZlbikgcm93cy4KICoKICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gdGhlIHNjb3BlIG9mIGFuCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzT2RkIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHQKICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPG9sIG5nLWluaXQ9Im5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J10iPgogICAgICAgICAgPGxpIG5nLXJlcGVhdD0ibmFtZSBpbiBuYW1lcyI+CiAgICAgICAgICAgPHNwYW4gbmctY2xhc3Mtb2RkPSInb2RkJyIgbmctY2xhc3MtZXZlbj0iJ2V2ZW4nIj4KICAgICAgICAgICAgIHt7bmFtZX19CiAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPC9saT4KICAgICAgICA8L29sPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgLm9kZCB7CiAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICB9CiAgICAgICAuZXZlbiB7CiAgICAgICAgIGNvbG9yOiBibHVlOwogICAgICAgfQogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLgogICAgICAgICAgIHRvTWF0Y2goL29kZC8pOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS4KICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ0NsYXNzT2RkRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ09kZCcsIDApOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdDbGFzc0V2ZW4KICogQHJlc3RyaWN0IEFDCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGFzcyBuZ0NsYXNzfSwgZXhjZXB0IHRoZXkgd29yayBpbgogKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLgogKgogKiBUaGlzIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCBvbmx5IHdpdGhpbiB0aGUgc2NvcGUgb2YgYW4KICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZQogKiAgIHJlc3VsdCBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPG9sIG5nLWluaXQ9Im5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J10iPgogICAgICAgICAgPGxpIG5nLXJlcGVhdD0ibmFtZSBpbiBuYW1lcyI+CiAgICAgICAgICAgPHNwYW4gbmctY2xhc3Mtb2RkPSInb2RkJyIgbmctY2xhc3MtZXZlbj0iJ2V2ZW4nIj4KICAgICAgICAgICAgIHt7bmFtZX19ICZuYnNwOyAmbmJzcDsgJm5ic3A7CiAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPC9saT4KICAgICAgICA8L29sPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgLm9kZCB7CiAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICB9CiAgICAgICAuZXZlbiB7CiAgICAgICAgIGNvbG9yOiBibHVlOwogICAgICAgfQogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLgogICAgICAgICAgIHRvTWF0Y2goL29kZC8pOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS4KICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdFdmVuJywgMSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0Nsb2FrCiAqIEByZXN0cmljdCBBQwogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0Nsb2FrYCBkaXJlY3RpdmUgaXMgdXNlZCB0byBwcmV2ZW50IHRoZSBBbmd1bGFyIGh0bWwgdGVtcGxhdGUgZnJvbSBiZWluZyBicmllZmx5CiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3ICh1bmNvbXBpbGVkKSBmb3JtIHdoaWxlIHlvdXIgYXBwbGljYXRpb24gaXMgbG9hZGluZy4gVXNlIHRoaXMKICogZGlyZWN0aXZlIHRvIGF2b2lkIHRoZSB1bmRlc2lyYWJsZSBmbGlja2VyIGVmZmVjdCBjYXVzZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGUgZGlzcGxheS4KICoKICogVGhlIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCB0byB0aGUgYDxib2R5PmAgZWxlbWVudCwgYnV0IHRoZSBwcmVmZXJyZWQgdXNhZ2UgaXMgdG8gYXBwbHkKICogbXVsdGlwbGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZXMgdG8gc21hbGwgcG9ydGlvbnMgb2YgdGhlIHBhZ2UgdG8gcGVybWl0IHByb2dyZXNzaXZlIHJlbmRlcmluZwogKiBvZiB0aGUgYnJvd3NlciB2aWV3LgogKgogKiBgbmdDbG9ha2Agd29ya3MgaW4gY29vcGVyYXRpb24gd2l0aCB0aGUgZm9sbG93aW5nIGNzcyBydWxlIGVtYmVkZGVkIHdpdGhpbiBgYW5ndWxhci5qc2AgYW5kCiAqIGBhbmd1bGFyLm1pbi5qc2AuCiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLgogKgogKiBgYGBjc3MKICogW25nXDpjbG9ha10sIFtuZy1jbG9ha10sIFtkYXRhLW5nLWNsb2FrXSwgW3gtbmctY2xvYWtdLCAubmctY2xvYWssIC54LW5nLWNsb2FrIHsKICogICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7CiAqIH0KICogYGBgCiAqCiAqIFdoZW4gdGhpcyBjc3MgcnVsZSBpcyBsb2FkZWQgYnkgdGhlIGJyb3dzZXIsIGFsbCBodG1sIGVsZW1lbnRzIChpbmNsdWRpbmcgdGhlaXIgY2hpbGRyZW4pIHRoYXQKICogYXJlIHRhZ2dlZCB3aXRoIHRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGFyZSBoaWRkZW4uIFdoZW4gQW5ndWxhciBlbmNvdW50ZXJzIHRoaXMgZGlyZWN0aXZlCiAqIGR1cmluZyB0aGUgY29tcGlsYXRpb24gb2YgdGhlIHRlbXBsYXRlIGl0IGRlbGV0ZXMgdGhlIGBuZ0Nsb2FrYCBlbGVtZW50IGF0dHJpYnV0ZSwgbWFraW5nCiAqIHRoZSBjb21waWxlZCBlbGVtZW50IHZpc2libGUuCiAqCiAqIEZvciB0aGUgYmVzdCByZXN1bHQsIHRoZSBgYW5ndWxhci5qc2Agc2NyaXB0IG11c3QgYmUgbG9hZGVkIGluIHRoZSBoZWFkIHNlY3Rpb24gb2YgdGhlIGh0bWwKICogZG9jdW1lbnQ7IGFsdGVybmF0aXZlbHksIHRoZSBjc3MgcnVsZSBhYm92ZSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBleHRlcm5hbCBzdHlsZXNoZWV0IG9mIHRoZQogKiBhcHBsaWNhdGlvbi4KICoKICogTGVnYWN5IGJyb3dzZXJzLCBsaWtlIElFNywgZG8gbm90IHByb3ZpZGUgYXR0cmlidXRlIHNlbGVjdG9yIHN1cHBvcnQgKGFkZGVkIGluIENTUyAyLjEpIHNvIHRoZXkKICogY2Fubm90IG1hdGNoIHRoZSBgW25nXDpjbG9ha11gIHNlbGVjdG9yLiBUbyB3b3JrIGFyb3VuZCB0aGlzIGxpbWl0YXRpb24sIHlvdSBtdXN0IGFkZCB0aGUgY3NzCiAqIGNsYXNzIGBuZy1jbG9ha2AgaW4gYWRkaXRpb24gdG8gdGhlIGBuZ0Nsb2FrYCBkaXJlY3RpdmUgYXMgc2hvd24gaW4gdGhlIGV4YW1wbGUgYmVsb3cuCiAqCiAqIEBlbGVtZW50IEFOWQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICA8ZGl2IGlkPSJ0ZW1wbGF0ZTEiIG5nLWNsb2FrPnt7ICdoZWxsbycgfX08L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJ0ZW1wbGF0ZTIiIG5nLWNsb2FrIGNsYXNzPSJuZy1jbG9hayI+e3sgJ2hlbGxvIElFNycgfX08L2Rpdj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICBpdCgnc2hvdWxkIHJlbW92ZSB0aGUgdGVtcGxhdGUgZGlyZWN0aXZlIGFuZCBjc3MgY2xhc3MnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KCQoJyN0ZW1wbGF0ZTEnKS5nZXRBdHRyaWJ1dGUoJ25nLWNsb2FrJykpLgogICAgICAgICAgIHRvQmVOdWxsKCk7CiAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUyJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS4KICAgICAgICAgICB0b0JlTnVsbCgpOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqCiAqLwp2YXIgbmdDbG9ha0RpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsKICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICBhdHRyLiRzZXQoJ25nQ2xvYWsnLCB1bmRlZmluZWQpOwogICAgZWxlbWVudC5yZW1vdmVDbGFzcygnbmctY2xvYWsnKTsKICB9Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdDb250cm9sbGVyCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlIGF0dGFjaGVzIGEgY29udHJvbGxlciBjbGFzcyB0byB0aGUgdmlldy4gVGhpcyBpcyBhIGtleSBhc3BlY3Qgb2YgaG93IGFuZ3VsYXIKICogc3VwcG9ydHMgdGhlIHByaW5jaXBsZXMgYmVoaW5kIHRoZSBNb2RlbC1WaWV3LUNvbnRyb2xsZXIgZGVzaWduIHBhdHRlcm4uCiAqCiAqIE1WQyBjb21wb25lbnRzIGluIGFuZ3VsYXI6CiAqCiAqICogTW9kZWwg4oCUIE1vZGVscyBhcmUgdGhlIHByb3BlcnRpZXMgb2YgYSBzY29wZTsgc2NvcGVzIGFyZSBhdHRhY2hlZCB0byB0aGUgRE9NIHdoZXJlIHNjb3BlIHByb3BlcnRpZXMKICogICBhcmUgYWNjZXNzZWQgdGhyb3VnaCBiaW5kaW5ncy4KICogKiBWaWV3IOKAlCBUaGUgdGVtcGxhdGUgKEhUTUwgd2l0aCBkYXRhIGJpbmRpbmdzKSB0aGF0IGlzIHJlbmRlcmVkIGludG8gdGhlIFZpZXcuCiAqICogQ29udHJvbGxlciDigJQgVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgYSBDb250cm9sbGVyIGNsYXNzOyB0aGUgY2xhc3MgY29udGFpbnMgYnVzaW5lc3MKICogICBsb2dpYyBiZWhpbmQgdGhlIGFwcGxpY2F0aW9uIHRvIGRlY29yYXRlIHRoZSBzY29wZSB3aXRoIGZ1bmN0aW9ucyBhbmQgdmFsdWVzCiAqCiAqIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gYXR0YWNoIGNvbnRyb2xsZXJzIHRvIHRoZSBET00gYnkgZGVjbGFyaW5nIGl0IGluIGEgcm91dGUgZGVmaW5pdGlvbgogKiB2aWEgdGhlIHtAbGluayBuZ1JvdXRlLiRyb3V0ZSAkcm91dGV9IHNlcnZpY2UuIEEgY29tbW9uIG1pc3Rha2UgaXMgdG8gZGVjbGFyZSB0aGUgY29udHJvbGxlcgogKiBhZ2FpbiB1c2luZyBgbmctY29udHJvbGxlcmAgaW4gdGhlIHRlbXBsYXRlIGl0c2VsZi4gIFRoaXMgd2lsbCBjYXVzZSB0aGUgY29udHJvbGxlciB0byBiZSBhdHRhY2hlZAogKiBhbmQgZXhlY3V0ZWQgdHdpY2UuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAc2NvcGUKICogQHByaW9yaXR5IDUwMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29udHJvbGxlciBOYW1lIG9mIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZSBjdXJyZW50CiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyICRjb250cm9sbGVyUHJvdmlkZXJ9IG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259CiAqIHRoYXQgb24gdGhlIGN1cnJlbnQgc2NvcGUgZXZhbHVhdGVzIHRvIGEgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAqCiAqIFRoZSBjb250cm9sbGVyIGluc3RhbmNlIGNhbiBiZSBwdWJsaXNoZWQgaW50byBhIHNjb3BlIHByb3BlcnR5IGJ5IHNwZWNpZnlpbmcKICogYG5nLWNvbnRyb2xsZXI9ImFzIHByb3BlcnR5TmFtZSJgLgogKgogKiBJZiB0aGUgY3VycmVudCBgJGNvbnRyb2xsZXJQcm92aWRlcmAgaXMgY29uZmlndXJlZCB0byB1c2UgZ2xvYmFscyAodmlhCiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscyBgJGNvbnRyb2xsZXJQcm92aWRlci5hbGxvd0dsb2JhbHMoKWAgfSksIHRoaXMgbWF5CiAqIGFsc28gYmUgdGhlIG5hbWUgb2YgYSBnbG9iYWxseSBhY2Nlc3NpYmxlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIChub3QgcmVjb21tZW5kZWQpLgogKgogKiBAZXhhbXBsZQogKiBIZXJlIGlzIGEgc2ltcGxlIGZvcm0gZm9yIGVkaXRpbmcgdXNlciBjb250YWN0IGluZm9ybWF0aW9uLiBBZGRpbmcsIHJlbW92aW5nLCBjbGVhcmluZywgYW5kCiAqIGdyZWV0aW5nIGFyZSBtZXRob2RzIGRlY2xhcmVkIG9uIHRoZSBjb250cm9sbGVyIChzZWUgc291cmNlIHRhYikuIFRoZXNlIG1ldGhvZHMgY2FuCiAqIGVhc2lseSBiZSBjYWxsZWQgZnJvbSB0aGUgYW5ndWxhciBtYXJrdXAuIEFueSBjaGFuZ2VzIHRvIHRoZSBkYXRhIGFyZSBhdXRvbWF0aWNhbGx5IHJlZmxlY3RlZAogKiBpbiB0aGUgVmlldyB3aXRob3V0IHRoZSBuZWVkIGZvciBhIG1hbnVhbCB1cGRhdGUuCiAqCiAqIFR3byBkaWZmZXJlbnQgZGVjbGFyYXRpb24gc3R5bGVzIGFyZSBpbmNsdWRlZCBiZWxvdzoKICoKICogKiBvbmUgYmluZHMgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBkaXJlY3RseSBvbnRvIHRoZSBjb250cm9sbGVyIHVzaW5nIGB0aGlzYDoKICogYG5nLWNvbnRyb2xsZXI9IlNldHRpbmdzQ29udHJvbGxlcjEgYXMgc2V0dGluZ3MiYAogKiAqIG9uZSBpbmplY3RzIGAkc2NvcGVgIGludG8gdGhlIGNvbnRyb2xsZXI6CiAqIGBuZy1jb250cm9sbGVyPSJTZXR0aW5nc0NvbnRyb2xsZXIyImAKICoKICogVGhlIHNlY29uZCBvcHRpb24gaXMgbW9yZSBjb21tb24gaW4gdGhlIEFuZ3VsYXIgY29tbXVuaXR5LCBhbmQgaXMgZ2VuZXJhbGx5IHVzZWQgaW4gYm9pbGVycGxhdGVzCiAqIGFuZCBpbiB0aGlzIGd1aWRlLiBIb3dldmVyLCB0aGVyZSBhcmUgYWR2YW50YWdlcyB0byBiaW5kaW5nIHByb3BlcnRpZXMgZGlyZWN0bHkgdG8gdGhlIGNvbnRyb2xsZXIKICogYW5kIGF2b2lkaW5nIHNjb3BlLgogKgogKiAqIFVzaW5nIGBjb250cm9sbGVyIGFzYCBtYWtlcyBpdCBvYnZpb3VzIHdoaWNoIGNvbnRyb2xsZXIgeW91IGFyZSBhY2Nlc3NpbmcgaW4gdGhlIHRlbXBsYXRlIHdoZW4KICogbXVsdGlwbGUgY29udHJvbGxlcnMgYXBwbHkgdG8gYW4gZWxlbWVudC4KICogKiBJZiB5b3UgYXJlIHdyaXRpbmcgeW91ciBjb250cm9sbGVycyBhcyBjbGFzc2VzIHlvdSBoYXZlIGVhc2llciBhY2Nlc3MgdG8gdGhlIHByb3BlcnRpZXMgYW5kCiAqIG1ldGhvZHMsIHdoaWNoIHdpbGwgYXBwZWFyIG9uIHRoZSBzY29wZSwgZnJvbSBpbnNpZGUgdGhlIGNvbnRyb2xsZXIgY29kZS4KICogKiBTaW5jZSB0aGVyZSBpcyBhbHdheXMgYSBgLmAgaW4gdGhlIGJpbmRpbmdzLCB5b3UgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBwcm90b3R5cGFsCiAqIGluaGVyaXRhbmNlIG1hc2tpbmcgcHJpbWl0aXZlcy4KICoKICogVGhpcyBleGFtcGxlIGRlbW9uc3RyYXRlcyB0aGUgYGNvbnRyb2xsZXIgYXNgIHN5bnRheC4KICoKICogPGV4YW1wbGUgbmFtZT0ibmdDb250cm9sbGVyQXMiIG1vZHVsZT0iY29udHJvbGxlckFzRXhhbXBsZSI+CiAqICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAqICAgIDxkaXYgaWQ9ImN0cmwtYXMtZXhtcGwiIG5nLWNvbnRyb2xsZXI9IlNldHRpbmdzQ29udHJvbGxlcjEgYXMgc2V0dGluZ3MiPgogKiAgICAgIE5hbWU6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0ic2V0dGluZ3MubmFtZSIvPgogKiAgICAgIFsgPGEgaHJlZj0iIiBuZy1jbGljaz0ic2V0dGluZ3MuZ3JlZXQoKSI+Z3JlZXQ8L2E+IF08YnIvPgogKiAgICAgIENvbnRhY3Q6CiAqICAgICAgPHVsPgogKiAgICAgICAgPGxpIG5nLXJlcGVhdD0iY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cyI+CiAqICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9ImNvbnRhY3QudHlwZSI+CiAqICAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj4KICogICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPgogKiAgICAgICAgICA8L3NlbGVjdD4KICogICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJjb250YWN0LnZhbHVlIi8+CiAqICAgICAgICAgIFsgPGEgaHJlZj0iIiBuZy1jbGljaz0ic2V0dGluZ3MuY2xlYXJDb250YWN0KGNvbnRhY3QpIj5jbGVhcjwvYT4KICogICAgICAgICAgfCA8YSBocmVmPSIiIG5nLWNsaWNrPSJzZXR0aW5ncy5yZW1vdmVDb250YWN0KGNvbnRhY3QpIj5YPC9hPiBdCiAqICAgICAgICA8L2xpPgogKiAgICAgICAgPGxpPlsgPGEgaHJlZj0iIiBuZy1jbGljaz0ic2V0dGluZ3MuYWRkQ29udGFjdCgpIj5hZGQ8L2E+IF08L2xpPgogKiAgICAgPC91bD4KICogICAgPC9kaXY+CiAqICAgPC9maWxlPgogKiAgIDxmaWxlIG5hbWU9ImFwcC5qcyI+CiAqICAgIGFuZ3VsYXIubW9kdWxlKCdjb250cm9sbGVyQXNFeGFtcGxlJywgW10pCiAqICAgICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcjEnLCBTZXR0aW5nc0NvbnRyb2xsZXIxKTsKICoKICogICAgZnVuY3Rpb24gU2V0dGluZ3NDb250cm9sbGVyMSgpIHsKICogICAgICB0aGlzLm5hbWUgPSAiSm9obiBTbWl0aCI7CiAqICAgICAgdGhpcy5jb250YWN0cyA9IFsKICogICAgICAgIHt0eXBlOiAncGhvbmUnLCB2YWx1ZTogJzQwOCA1NTUgMTIxMid9LAogKiAgICAgICAge3R5cGU6ICdlbWFpbCcsIHZhbHVlOiAnam9obi5zbWl0aEBleGFtcGxlLm9yZyd9IF07CiAqICAgIH0KICoKICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUuZ3JlZXQgPSBmdW5jdGlvbigpIHsKICogICAgICBhbGVydCh0aGlzLm5hbWUpOwogKiAgICB9OwogKgogKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7CiAqICAgICAgdGhpcy5jb250YWN0cy5wdXNoKHt0eXBlOiAnZW1haWwnLCB2YWx1ZTogJ3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pOwogKiAgICB9OwogKgogKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7CiAqICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRhY3RzLmluZGV4T2YoY29udGFjdFRvUmVtb3ZlKTsKICogICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7CiAqICAgIH07CiAqCiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHsKICogICAgICBjb250YWN0LnR5cGUgPSAncGhvbmUnOwogKiAgICAgIGNvbnRhY3QudmFsdWUgPSAnJzsKICogICAgfTsKICogICA8L2ZpbGU+CiAqICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAqICAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXIgYXMnLCBmdW5jdGlvbigpIHsKICogICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuaWQoJ2N0cmwtYXMtZXhtcGwnKSk7CiAqICAgICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5Lm1vZGVsKCdzZXR0aW5ncy5uYW1lJykpCiAqICAgICAgICAgICAuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCdKb2huIFNtaXRoJyk7CiAqCiAqICAgICAgIHZhciBmaXJzdFJlcGVhdCA9CiAqICAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygwKSk7CiAqICAgICAgIHZhciBzZWNvbmRSZXBlYXQgPQogKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMSkpOwogKgogKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpCiAqICAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7CiAqCiAqICAgICAgIGV4cGVjdChzZWNvbmRSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpCiAqICAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpOwogKgogKiAgICAgICBmaXJzdFJlcGVhdC5lbGVtZW50KGJ5LmxpbmtUZXh0KCdjbGVhcicpKS5jbGljaygpOwogKgogKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpCiAqICAgICAgICAgICAudG9CZSgnJyk7CiAqCiAqICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmxpbmtUZXh0KCdhZGQnKSkuY2xpY2soKTsKICoKICogICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzJykucm93KDIpKQogKiAgICAgICAgICAgLmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkKICogICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpCiAqICAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTsKICogICAgIH0pOwogKiAgIDwvZmlsZT4KICogPC9leGFtcGxlPgogKgogKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSAiYXR0YWNoIHRvIGAkc2NvcGVgIiBzdHlsZSBvZiBjb250cm9sbGVyLgogKgogKiA8ZXhhbXBsZSBuYW1lPSJuZ0NvbnRyb2xsZXIiIG1vZHVsZT0iY29udHJvbGxlckV4YW1wbGUiPgogKiAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAqICAgPGRpdiBpZD0iY3RybC1leG1wbCIgbmctY29udHJvbGxlcj0iU2V0dGluZ3NDb250cm9sbGVyMiI+CiAqICAgICBOYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9Im5hbWUiLz4KICogICAgIFsgPGEgaHJlZj0iIiBuZy1jbGljaz0iZ3JlZXQoKSI+Z3JlZXQ8L2E+IF08YnIvPgogKiAgICAgQ29udGFjdDoKICogICAgIDx1bD4KICogICAgICAgPGxpIG5nLXJlcGVhdD0iY29udGFjdCBpbiBjb250YWN0cyI+CiAqICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0iY29udGFjdC50eXBlIj4KICogICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+CiAqICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPgogKiAgICAgICAgIDwvc2VsZWN0PgogKiAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0iY29udGFjdC52YWx1ZSIvPgogKiAgICAgICAgIFsgPGEgaHJlZj0iIiBuZy1jbGljaz0iY2xlYXJDb250YWN0KGNvbnRhY3QpIj5jbGVhcjwvYT4KICogICAgICAgICB8IDxhIGhyZWY9IiIgbmctY2xpY2s9InJlbW92ZUNvbnRhY3QoY29udGFjdCkiPlg8L2E+IF0KICogICAgICAgPC9saT4KICogICAgICAgPGxpPlsgPGEgaHJlZj0iIiBuZy1jbGljaz0iYWRkQ29udGFjdCgpIj5hZGQ8L2E+IF08L2xpPgogKiAgICA8L3VsPgogKiAgIDwvZGl2PgogKiAgPC9maWxlPgogKiAgPGZpbGUgbmFtZT0iYXBwLmpzIj4KICogICBhbmd1bGFyLm1vZHVsZSgnY29udHJvbGxlckV4YW1wbGUnLCBbXSkKICogICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIyJywgWyckc2NvcGUnLCBTZXR0aW5nc0NvbnRyb2xsZXIyXSk7CiAqCiAqICAgZnVuY3Rpb24gU2V0dGluZ3NDb250cm9sbGVyMigkc2NvcGUpIHsKICogICAgICRzY29wZS5uYW1lID0gIkpvaG4gU21pdGgiOwogKiAgICAgJHNjb3BlLmNvbnRhY3RzID0gWwogKiAgICAgICB7dHlwZToncGhvbmUnLCB2YWx1ZTonNDA4IDU1NSAxMjEyJ30sCiAqICAgICAgIHt0eXBlOidlbWFpbCcsIHZhbHVlOidqb2huLnNtaXRoQGV4YW1wbGUub3JnJ30gXTsKICoKICogICAgICRzY29wZS5ncmVldCA9IGZ1bmN0aW9uKCkgewogKiAgICAgICBhbGVydCgkc2NvcGUubmFtZSk7CiAqICAgICB9OwogKgogKiAgICAgJHNjb3BlLmFkZENvbnRhY3QgPSBmdW5jdGlvbigpIHsKICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnB1c2goe3R5cGU6J2VtYWlsJywgdmFsdWU6J3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pOwogKiAgICAgfTsKICoKICogICAgICRzY29wZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7CiAqICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5jb250YWN0cy5pbmRleE9mKGNvbnRhY3RUb1JlbW92ZSk7CiAqICAgICAgICRzY29wZS5jb250YWN0cy5zcGxpY2UoaW5kZXgsIDEpOwogKiAgICAgfTsKICoKICogICAgICRzY29wZS5jbGVhckNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KSB7CiAqICAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7CiAqICAgICAgIGNvbnRhY3QudmFsdWUgPSAnJzsKICogICAgIH07CiAqICAgfQogKiAgPC9maWxlPgogKiAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAqICAgIGl0KCdzaG91bGQgY2hlY2sgY29udHJvbGxlcicsIGZ1bmN0aW9uKCkgewogKiAgICAgIHZhciBjb250YWluZXIgPSBlbGVtZW50KGJ5LmlkKCdjdHJsLWV4bXBsJykpOwogKgogKiAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5tb2RlbCgnbmFtZScpKQogKiAgICAgICAgICAuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCdKb2huIFNtaXRoJyk7CiAqCiAqICAgICAgdmFyIGZpcnN0UmVwZWF0ID0KICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMCkpOwogKiAgICAgIHZhciBzZWNvbmRSZXBlYXQgPQogKiAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygxKSk7CiAqCiAqICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKQogKiAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7CiAqICAgICAgZXhwZWN0KHNlY29uZFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkKICogICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTsKICoKICogICAgICBmaXJzdFJlcGVhdC5lbGVtZW50KGJ5LmxpbmtUZXh0KCdjbGVhcicpKS5jbGljaygpOwogKgogKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkKICogICAgICAgICAgLnRvQmUoJycpOwogKgogKiAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmxpbmtUZXh0KCdhZGQnKSkuY2xpY2soKTsKICoKICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMikpCiAqICAgICAgICAgIC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpCiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpCiAqICAgICAgICAgIC50b0JlKCd5b3VybmFtZUBleGFtcGxlLm9yZycpOwogKiAgICB9KTsKICogIDwvZmlsZT4KICo8L2V4YW1wbGU+CgogKi8KdmFyIG5nQ29udHJvbGxlckRpcmVjdGl2ZSA9IFtmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdBJywKICAgIHNjb3BlOiB0cnVlLAogICAgY29udHJvbGxlcjogJ0AnLAogICAgcHJpb3JpdHk6IDUwMAogIH07Cn1dOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdDc3AKICoKICogQGVsZW1lbnQgaHRtbAogKiBAZGVzY3JpcHRpb24KICogRW5hYmxlcyBbQ1NQIChDb250ZW50IFNlY3VyaXR5IFBvbGljeSldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1NlY3VyaXR5L0NTUCkgc3VwcG9ydC4KICoKICogVGhpcyBpcyBuZWNlc3Nhcnkgd2hlbiBkZXZlbG9waW5nIHRoaW5ncyBsaWtlIEdvb2dsZSBDaHJvbWUgRXh0ZW5zaW9ucyBvciBVbml2ZXJzYWwgV2luZG93cyBBcHBzLgogKgogKiBDU1AgZm9yYmlkcyBhcHBzIHRvIHVzZSBgZXZhbGAgb3IgYEZ1bmN0aW9uKHN0cmluZylgIGdlbmVyYXRlZCBmdW5jdGlvbnMgKGFtb25nIG90aGVyIHRoaW5ncykuCiAqIEZvciBBbmd1bGFyIHRvIGJlIENTUCBjb21wYXRpYmxlIHRoZXJlIGFyZSBvbmx5IHR3byB0aGluZ3MgdGhhdCB3ZSBuZWVkIHRvIGRvIGRpZmZlcmVudGx5OgogKgogKiAtIGRvbid0IHVzZSBgRnVuY3Rpb25gIGNvbnN0cnVjdG9yIHRvIGdlbmVyYXRlIG9wdGltaXplZCB2YWx1ZSBnZXR0ZXJzCiAqIC0gZG9uJ3QgaW5qZWN0IGN1c3RvbSBzdHlsZXNoZWV0IGludG8gdGhlIGRvY3VtZW50CiAqCiAqIEFuZ3VsYXJKUyB1c2VzIGBGdW5jdGlvbihzdHJpbmcpYCBnZW5lcmF0ZWQgZnVuY3Rpb25zIGFzIGEgc3BlZWQgb3B0aW1pemF0aW9uLiBBcHBseWluZyB0aGUgYG5nQ3NwYAogKiBkaXJlY3RpdmUgd2lsbCBjYXVzZSBBbmd1bGFyIHRvIHVzZSBDU1AgY29tcGF0aWJpbGl0eSBtb2RlLiBXaGVuIHRoaXMgbW9kZSBpcyBvbiBBbmd1bGFySlMgd2lsbAogKiBldmFsdWF0ZSBhbGwgZXhwcmVzc2lvbnMgdXAgdG8gMzAlIHNsb3dlciB0aGFuIGluIG5vbi1DU1AgbW9kZSwgYnV0IG5vIHNlY3VyaXR5IHZpb2xhdGlvbnMgd2lsbAogKiBiZSByYWlzZWQuCiAqCiAqIENTUCBmb3JiaWRzIEphdmFTY3JpcHQgdG8gaW5saW5lIHN0eWxlc2hlZXQgcnVsZXMuIEluIG5vbiBDU1AgbW9kZSBBbmd1bGFyIGF1dG9tYXRpY2FsbHkKICogaW5jbHVkZXMgc29tZSBDU1MgcnVsZXMgKGUuZy4ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Nsb2FrIG5nQ2xvYWt9KS4KICogVG8gbWFrZSB0aG9zZSBkaXJlY3RpdmVzIHdvcmsgaW4gQ1NQIG1vZGUsIGluY2x1ZGUgdGhlIGBhbmd1bGFyLWNzcC5jc3NgIG1hbnVhbGx5LgogKgogKiBBbmd1bGFyIHRyaWVzIHRvIGF1dG9kZXRlY3QgaWYgQ1NQIGlzIGFjdGl2ZSBhbmQgYXV0b21hdGljYWxseSB0dXJuIG9uIHRoZSBDU1Atc2FmZSBtb2RlLiBUaGlzCiAqIGF1dG9kZXRlY3Rpb24gaG93ZXZlciB0cmlnZ2VycyBhIENTUCBlcnJvciB0byBiZSBsb2dnZWQgaW4gdGhlIGNvbnNvbGU6CiAqCiAqIGBgYAogKiBSZWZ1c2VkIHRvIGV2YWx1YXRlIGEgc3RyaW5nIGFzIEphdmFTY3JpcHQgYmVjYXVzZSAndW5zYWZlLWV2YWwnIGlzIG5vdCBhbiBhbGxvd2VkIHNvdXJjZSBvZgogKiBzY3JpcHQgaW4gdGhlIGZvbGxvd2luZyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBkaXJlY3RpdmU6ICJkZWZhdWx0LXNyYyAnc2VsZiciLiBOb3RlIHRoYXQKICogJ3NjcmlwdC1zcmMnIHdhcyBub3QgZXhwbGljaXRseSBzZXQsIHNvICdkZWZhdWx0LXNyYycgaXMgdXNlZCBhcyBhIGZhbGxiYWNrLgogKiBgYGAKICoKICogVGhpcyBlcnJvciBpcyBoYXJtbGVzcyBidXQgYW5ub3lpbmcuIFRvIHByZXZlbnQgdGhlIGVycm9yIGZyb20gc2hvd2luZyB1cCwgcHV0IHRoZSBgbmdDc3BgCiAqIGRpcmVjdGl2ZSBvbiB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBhcHBsaWNhdGlvbiBvciBvbiB0aGUgYGFuZ3VsYXIuanNgIHNjcmlwdCB0YWcsIHdoaWNoZXZlcgogKiBhcHBlYXJzIGZpcnN0IGluIHRoZSBodG1sIGRvY3VtZW50LgogKgogKiAqTm90ZTogVGhpcyBkaXJlY3RpdmUgaXMgb25seSBhdmFpbGFibGUgaW4gdGhlIGBuZy1jc3BgIGFuZCBgZGF0YS1uZy1jc3BgIGF0dHJpYnV0ZSBmb3JtLioKICoKICogQGV4YW1wbGUKICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBhcHBseSB0aGUgYG5nQ3NwYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuCiAgIGBgYGh0bWwKICAgICA8IWRvY3R5cGUgaHRtbD4KICAgICA8aHRtbCBuZy1hcHAgbmctY3NwPgogICAgIC4uLgogICAgIC4uLgogICAgIDwvaHRtbD4KICAgYGBgCiAgKiBAZXhhbXBsZQogICAgICAvLyBOb3RlOiB0aGUgc3VmZml4IGAuY3NwYCBpbiB0aGUgZXhhbXBsZSBuYW1lIHRyaWdnZXJzCiAgICAgIC8vIGNzcCBtb2RlIGluIG91ciBodHRwIHNlcnZlciEKICAgICAgPGV4YW1wbGUgbmFtZT0iZXhhbXBsZS5jc3AiIG1vZHVsZT0iY3NwRXhhbXBsZSIgbmctY3NwPSJ0cnVlIj4KICAgICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iTWFpbkNvbnRyb2xsZXIgYXMgY3RybCI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iY3RybC5pbmMoKSIgaWQ9ImluYyI+SW5jcmVtZW50PC9idXR0b24+CiAgICAgICAgICAgICAgPHNwYW4gaWQ9ImNvdW50ZXIiPgogICAgICAgICAgICAgICAge3tjdHJsLmNvdW50ZXJ9fQogICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9ImN0cmwuZXZpbCgpIiBpZD0iZXZpbCI+RXZpbDwvYnV0dG9uPgogICAgICAgICAgICAgIDxzcGFuIGlkPSJldmlsRXJyb3IiPgogICAgICAgICAgICAgICAge3tjdHJsLmV2aWxFcnJvcn19CiAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZmlsZT4KICAgICAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjc3BFeGFtcGxlJywgW10pCiAgICAgICAgICAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHRoaXMuY291bnRlciA9IDA7CiAgICAgICAgICAgICAgICB0aGlzLmluYyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXIrKzsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB0aGlzLmV2aWwgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgLy8ganNoaW50IGV2aWw6dHJ1ZQogICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGV2YWwoJzErMicpOwogICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmlsRXJyb3IgPSBlLm1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgICAgdmFyIHV0aWwsIHdlYmRyaXZlcjsKCiAgICAgICAgICB2YXIgaW5jQnRuID0gZWxlbWVudChieS5pZCgnaW5jJykpOwogICAgICAgICAgdmFyIGNvdW50ZXIgPSBlbGVtZW50KGJ5LmlkKCdjb3VudGVyJykpOwogICAgICAgICAgdmFyIGV2aWxCdG4gPSBlbGVtZW50KGJ5LmlkKCdldmlsJykpOwogICAgICAgICAgdmFyIGV2aWxFcnJvciA9IGVsZW1lbnQoYnkuaWQoJ2V2aWxFcnJvcicpKTsKCiAgICAgICAgICBmdW5jdGlvbiBnZXRBbmRDbGVhclNldmVyZUVycm9ycygpIHsKICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIubWFuYWdlKCkubG9ncygpLmdldCgnYnJvd3NlcicpLnRoZW4oZnVuY3Rpb24oYnJvd3NlckxvZykgewogICAgICAgICAgICAgIHJldHVybiBicm93c2VyTG9nLmZpbHRlcihmdW5jdGlvbihsb2dFbnRyeSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxvZ0VudHJ5LmxldmVsLnZhbHVlID4gd2ViZHJpdmVyLmxvZ2dpbmcuTGV2ZWwuV0FSTklORy52YWx1ZTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gY2xlYXJFcnJvcnMoKSB7CiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCk7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gZXhwZWN0Tm9FcnJvcnMoKSB7CiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykgewogICAgICAgICAgICAgIGV4cGVjdChmaWx0ZXJlZExvZy5sZW5ndGgpLnRvRXF1YWwoMCk7CiAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkTG9nLmxlbmd0aCkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Jyb3dzZXIgY29uc29sZSBlcnJvcnM6ICcgKyB1dGlsLmluc3BlY3QoZmlsdGVyZWRMb2cpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGV4cGVjdEVycm9yKHJlZ2V4KSB7CiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykgewogICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlOwogICAgICAgICAgICAgIGZpbHRlcmVkTG9nLmZvckVhY2goZnVuY3Rpb24obG9nKSB7CiAgICAgICAgICAgICAgICBpZiAobG9nLm1lc3NhZ2UubWF0Y2gocmVnZXgpKSB7CiAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGFuIGVycm9yIHRoYXQgbWF0Y2hlcyAnICsgcmVnZXgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTsKICAgICAgICAgICAgd2ViZHJpdmVyID0gcmVxdWlyZSgncHJvdHJhY3Rvci9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICAvLyBGb3Igbm93LCB3ZSBvbmx5IHRlc3Qgb24gQ2hyb21lLAogICAgICAgICAgLy8gYXMgU2FmYXJpIGRvZXMgbm90IGxvYWQgdGhlIHBhZ2Ugd2l0aCBQcm90cmFjdG9yJ3MgaW5qZWN0ZWQgc2NyaXB0cywKICAgICAgICAgIC8vIGFuZCBGaXJlZm94IHdlYmRyaXZlciBhbHdheXMgZGlzYWJsZXMgY29udGVudCBzZWN1cml0eSBwb2xpY3kgKCM2MzU4KQogICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgIT09ICdjaHJvbWUnKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBpdCgnc2hvdWxkIG5vdCByZXBvcnQgZXJyb3JzIHdoZW4gdGhlIHBhZ2UgaXMgbG9hZGVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIC8vIGNsZWFyIGVycm9ycyBzbyB3ZSBhcmUgbm90IGRlcGVuZGVudCBvbiBwcmV2aW91cyB0ZXN0cwogICAgICAgICAgICBjbGVhckVycm9ycygpOwogICAgICAgICAgICAvLyBOZWVkIHRvIHJlbG9hZCB0aGUgcGFnZSBhcyB0aGUgcGFnZSBpcyBhbHJlYWR5IGxvYWRlZCB3aGVuCiAgICAgICAgICAgIC8vIHdlIGNvbWUgaGVyZQogICAgICAgICAgICBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHsKICAgICAgICAgICAgICBicm93c2VyLmdldCh1cmwpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgZXZhbHVhdGUgZXhwcmVzc2lvbnMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCcwJyk7CiAgICAgICAgICAgIGluY0J0bi5jbGljaygpOwogICAgICAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvRXF1YWwoJzEnKTsKICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW5kIHJlcG9ydCBhbiBlcnJvciB3aGVuIHVzaW5nICJldmFsIicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBldmlsQnRuLmNsaWNrKCk7CiAgICAgICAgICAgIGV4cGVjdChldmlsRXJyb3IuZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IFNlY3VyaXR5IFBvbGljeS8pOwogICAgICAgICAgICBleHBlY3RFcnJvcigvQ29udGVudCBTZWN1cml0eSBQb2xpY3kvKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZmlsZT4KICAgICAgPC9leGFtcGxlPgogICovCgovLyBuZ0NzcCBpcyBub3QgaW1wbGVtZW50ZWQgYXMgYSBwcm9wZXIgZGlyZWN0aXZlIGFueSBtb3JlLCBiZWNhdXNlIHdlIG5lZWQgaXQgYmUgcHJvY2Vzc2VkIHdoaWxlIHdlCi8vIGJvb3RzdHJhcCB0aGUgc3lzdGVtIChiZWZvcmUgJHBhcnNlIGlzIGluc3RhbnRpYXRlZCksIGZvciB0aGlzIHJlYXNvbiB3ZSBqdXN0IGhhdmUKLy8gdGhlIGNzcC5pc0FjdGl2ZSgpIGZuIHRoYXQgbG9va3MgZm9yIG5nLWNzcCBhdHRyaWJ1dGUgYW55d2hlcmUgaW4gdGhlIGN1cnJlbnQgZG9jCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0NsaWNrCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgbmdDbGljayBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciB3aGVuCiAqIGFuIGVsZW1lbnQgaXMgY2xpY2tlZC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGNsaWNrLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxidXR0b24gbmctY2xpY2s9ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4KICAgICAgICBJbmNyZW1lbnQKICAgICAgPC9idXR0b24+CiAgICAgIDxzcGFuPgogICAgICAgIGNvdW50OiB7e2NvdW50fX0KICAgICAgPC9zcGFuPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnY291bnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKCcwJyk7CiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnY291bnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKCcxJyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCi8qCiAqIEEgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIGNyZWF0aW9uIG9mIGN1c3RvbSBvbmNsaWNrIGhhbmRsZXJzIHRoYXQgYXJlIGRlZmluZWQgYXMgYW5ndWxhcgogKiBleHByZXNzaW9ucyBhbmQgYXJlIGNvbXBpbGVkIGFuZCBleGVjdXRlZCB3aXRoaW4gdGhlIGN1cnJlbnQgc2NvcGUuCiAqCiAqIEV2ZW50cyB0aGF0IGFyZSBoYW5kbGVkIHZpYSB0aGVzZSBoYW5kbGVyIGFyZSBhbHdheXMgY29uZmlndXJlZCBub3QgdG8gcHJvcGFnYXRlIGZ1cnRoZXIuCiAqLwp2YXIgbmdFdmVudERpcmVjdGl2ZXMgPSB7fTsKCi8vIEZvciBldmVudHMgdGhhdCBtaWdodCBmaXJlIHN5bmNocm9ub3VzbHkgZHVyaW5nIERPTSBtYW5pcHVsYXRpb24KLy8gd2UgbmVlZCB0byBleGVjdXRlIHRoZWlyIGV2ZW50IGhhbmRsZXJzIGFzeW5jaHJvbm91c2x5IHVzaW5nICRldmFsQXN5bmMsCi8vIHNvIHRoYXQgdGhleSBhcmUgbm90IGV4ZWN1dGVkIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZS4KdmFyIGZvcmNlQXN5bmNFdmVudHMgPSB7CiAgJ2JsdXInOiB0cnVlLAogICdmb2N1cyc6IHRydWUKfTsKZm9yRWFjaCgKICAnY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlbW92ZSBtb3VzZWVudGVyIG1vdXNlbGVhdmUga2V5ZG93biBrZXl1cCBrZXlwcmVzcyBzdWJtaXQgZm9jdXMgYmx1ciBjb3B5IGN1dCBwYXN0ZScuc3BsaXQoJyAnKSwKICBmdW5jdGlvbihldmVudE5hbWUpIHsKICAgIHZhciBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgZXZlbnROYW1lKTsKICAgIG5nRXZlbnREaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gWyckcGFyc2UnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRwYXJzZSwgJHJvb3RTY29wZSkgewogICAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnQScsCiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oJGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICAgIHZhciBmbiA9ICRwYXJzZShhdHRyW2RpcmVjdGl2ZU5hbWVdKTsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0V2ZW50SGFuZGxlcihzY29wZSwgZWxlbWVudCkgewogICAgICAgICAgICBlbGVtZW50Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGZuKHNjb3BlLCB7JGV2ZW50OmV2ZW50fSk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBpZiAoZm9yY2VBc3luY0V2ZW50c1tldmVudE5hbWVdICYmICRyb290U2NvcGUuJCRwaGFzZSkgewogICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhjYWxsYmFjayk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShjYWxsYmFjayk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9OwogICAgfV07CiAgfQopOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdEYmxjbGljawogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0RibGNsaWNrYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBhIGRibGNsaWNrIGV2ZW50LgogKgogKiBAZWxlbWVudCBBTlkKICogQHByaW9yaXR5IDAKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0RibGNsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogYSBkYmxjbGljay4gKFRoZSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGJ1dHRvbiBuZy1kYmxjbGljaz0iY291bnQgPSBjb3VudCArIDEiIG5nLWluaXQ9ImNvdW50PTAiPgogICAgICAgIEluY3JlbWVudCAob24gZG91YmxlIGNsaWNrKQogICAgICA8L2J1dHRvbj4KICAgICAgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ01vdXNlZG93bgogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIG5nTW91c2Vkb3duIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlZG93biBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBtb3VzZWRvd24uICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGJ1dHRvbiBuZy1tb3VzZWRvd249ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4KICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIGRvd24pCiAgICAgIDwvYnV0dG9uPgogICAgICBjb3VudDoge3tjb3VudH19CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nTW91c2V1cAogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2V1cCBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZXVwIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2V1cC4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8YnV0dG9uIG5nLW1vdXNldXA9ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4KICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIHVwKQogICAgICA8L2J1dHRvbj4KICAgICAgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nTW91c2VvdmVyCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW92ZXIgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VvdmVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2VvdmVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxidXR0b24gbmctbW91c2VvdmVyPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIGlzIG92ZXIpCiAgICAgIDwvYnV0dG9uPgogICAgICBjb3VudDoge3tjb3VudH19CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nTW91c2VlbnRlcgogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VlbnRlciBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWVudGVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2VlbnRlci4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8YnV0dG9uIG5nLW1vdXNlZW50ZXI9ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4KICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgZW50ZXJzKQogICAgICA8L2J1dHRvbj4KICAgICAgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ01vdXNlbGVhdmUKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbGVhdmUgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VsZWF2ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIG1vdXNlbGVhdmUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGJ1dHRvbiBuZy1tb3VzZWxlYXZlPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIGxlYXZlcykKICAgICAgPC9idXR0b24+CiAgICAgIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdNb3VzZW1vdmUKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbW92ZSBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZW1vdmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBtb3VzZW1vdmUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGJ1dHRvbiBuZy1tb3VzZW1vdmU9ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4KICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbW92ZXMpCiAgICAgIDwvYnV0dG9uPgogICAgICBjb3VudDoge3tjb3VudH19CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nS2V5ZG93bgogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5ZG93biBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlkb3duIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICoga2V5ZG93bi4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLikKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxpbnB1dCBuZy1rZXlkb3duPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgIGtleSBkb3duIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdLZXl1cAogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5dXAgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5dXAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBrZXl1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLikKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8cD5UeXBpbmcgaW4gdGhlIGlucHV0IGJveCBiZWxvdyB1cGRhdGVzIHRoZSBrZXkgY291bnQ8L3A+CiAgICAgICA8aW5wdXQgbmcta2V5dXA9ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4ga2V5IHVwIGNvdW50OiB7e2NvdW50fX0KCiAgICAgICA8cD5UeXBpbmcgaW4gdGhlIGlucHV0IGJveCBiZWxvdyB1cGRhdGVzIHRoZSBrZXljb2RlPC9wPgogICAgICAgPGlucHV0IG5nLWtleXVwPSJldmVudD0kZXZlbnQiPgogICAgICAgPHA+ZXZlbnQga2V5Q29kZToge3sgZXZlbnQua2V5Q29kZSB9fTwvcD4KICAgICAgIDxwPmV2ZW50IGFsdEtleToge3sgZXZlbnQuYWx0S2V5IH19PC9wPgogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0tleXByZXNzCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlwcmVzcyBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlwcmVzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGtleXByZXNzLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfQogKiBhbmQgY2FuIGJlIGludGVycm9nYXRlZCBmb3Iga2V5Q29kZSwgYWx0S2V5LCBldGMuKQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGlucHV0IG5nLWtleXByZXNzPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgIGtleSBwcmVzcyBjb3VudDoge3tjb3VudH19CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nU3VibWl0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBFbmFibGVzIGJpbmRpbmcgYW5ndWxhciBleHByZXNzaW9ucyB0byBvbnN1Ym1pdCBldmVudHMuCiAqCiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlCiAqIHNlcnZlciBhbmQgcmVsb2FkaW5nIHRoZSBjdXJyZW50IHBhZ2UpLCBidXQgb25seSBpZiB0aGUgZm9ybSBkb2VzIG5vdCBjb250YWluIGBhY3Rpb25gLAogKiBgZGF0YS1hY3Rpb25gLCBvciBgeC1hY3Rpb25gIGF0dHJpYnV0ZXMuCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKldhcm5pbmc6KiogQmUgY2FyZWZ1bCBub3QgdG8gY2F1c2UgImRvdWJsZS1zdWJtaXNzaW9uIiBieSB1c2luZyBib3RoIHRoZSBgbmdDbGlja2AgYW5kCiAqIGBuZ1N1Ym1pdGAgaGFuZGxlcnMgdG9nZXRoZXIuIFNlZSB0aGUKICoge0BsaW5rIGZvcm0jc3VibWl0dGluZy1hLWZvcm0tYW5kLXByZXZlbnRpbmctdGhlLWRlZmF1bHQtYWN0aW9uIGBmb3JtYCBkaXJlY3RpdmUgZG9jdW1lbnRhdGlvbn0KICogZm9yIGEgZGV0YWlsZWQgZGlzY3Vzc2lvbiBvZiB3aGVuIGBuZ1N1Ym1pdGAgbWF5IGJlIHRyaWdnZXJlZC4KICogPC9kaXY+CiAqCiAqIEBlbGVtZW50IGZvcm0KICogQHByaW9yaXR5IDAKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N1Ym1pdCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLgogKiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGUgbW9kdWxlPSJzdWJtaXRFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPHNjcmlwdD4KICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc3VibWl0RXhhbXBsZScsIFtdKQogICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgJHNjb3BlLmxpc3QgPSBbXTsKICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnaGVsbG8nOwogICAgICAgICAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgaWYgKCRzY29wZS50ZXh0KSB7CiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5wdXNoKHRoaXMudGV4dCk7CiAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICcnOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgIH1dKTsKICAgICAgPC9zY3JpcHQ+CiAgICAgIDxmb3JtIG5nLXN1Ym1pdD0ic3VibWl0KCkiIG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICBFbnRlciB0ZXh0IGFuZCBoaXQgZW50ZXI6CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJ0ZXh0IiBuYW1lPSJ0ZXh0IiAvPgogICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIGlkPSJzdWJtaXQiIHZhbHVlPSJTdWJtaXQiIC8+CiAgICAgICAgPHByZT5saXN0PXt7bGlzdH19PC9wcmU+CiAgICAgIDwvZm9ybT4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN1Ym1pdCcsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpOwogICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndGV4dCcpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJycpOwogICAgICAgfSk7CiAgICAgICBpdCgnc2hvdWxkIGlnbm9yZSBlbXB0eSBzdHJpbmdzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0PVtdJyk7CiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7CiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2hlbGxvJyk7CiAgICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdGb2N1cwogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gZm9jdXMgZXZlbnQuCiAqCiAqIE5vdGU6IEFzIHRoZSBgZm9jdXNgIGV2ZW50IGlzIGV4ZWN1dGVkIHN5bmNocm9ub3VzbHkgd2hlbiBjYWxsaW5nIGBpbnB1dC5mb2N1cygpYAogKiBBbmd1bGFySlMgZXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gdXNpbmcgYHNjb3BlLiRldmFsQXN5bmNgIGlmIHRoZSBldmVudCBpcyBmaXJlZAogKiBkdXJpbmcgYW4gYCRhcHBseWAgdG8gZW5zdXJlIGEgY29uc2lzdGVudCBzdGF0ZS4KICoKICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRm9jdXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBmb2N1cy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pCiAqCiAqIEBleGFtcGxlCiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0JsdXIKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGJsdXIgZXZlbnQuCiAqCiAqIEEgW2JsdXIgZXZlbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9ibHVyKSBmaXJlcyB3aGVuCiAqIGFuIGVsZW1lbnQgaGFzIGxvc3QgZm9jdXMuCiAqCiAqIE5vdGU6IEFzIHRoZSBgYmx1cmAgZXZlbnQgaXMgZXhlY3V0ZWQgc3luY2hyb25vdXNseSBhbHNvIGR1cmluZyBET00gbWFuaXB1bGF0aW9ucwogKiAoZS5nLiByZW1vdmluZyBhIGZvY3Vzc2VkIGlucHV0KSwKICogQW5ndWxhckpTIGV4ZWN1dGVzIHRoZSBleHByZXNzaW9uIHVzaW5nIGBzY29wZS4kZXZhbEFzeW5jYCBpZiB0aGUgZXZlbnQgaXMgZmlyZWQKICogZHVyaW5nIGFuIGAkYXBwbHlgIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgc3RhdGUuCiAqCiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGEKICogQHByaW9yaXR5IDAKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JsdXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBibHVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfQogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nQ29weQogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gY29weSBldmVudC4KICoKICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29weSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGNvcHkuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGlucHV0IG5nLWNvcHk9ImNvcGllZD10cnVlIiBuZy1pbml0PSJjb3BpZWQ9ZmFsc2U7IHZhbHVlPSdjb3B5IG1lJyIgbmctbW9kZWw9InZhbHVlIj4KICAgICAgY29waWVkOiB7e2NvcGllZH19CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdDdXQKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGN1dCBldmVudC4KICoKICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ3V0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogY3V0LiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxpbnB1dCBuZy1jdXQ9ImN1dD10cnVlIiBuZy1pbml0PSJjdXQ9ZmFsc2U7IHZhbHVlPSdjdXQgbWUnIiBuZy1tb2RlbD0idmFsdWUiPgogICAgICBjdXQ6IHt7Y3V0fX0KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1Bhc3RlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBwYXN0ZSBldmVudC4KICoKICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nUGFzdGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBwYXN0ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8aW5wdXQgbmctcGFzdGU9InBhc3RlPXRydWUiIG5nLWluaXQ9InBhc3RlPWZhbHNlIiBwbGFjZWhvbGRlcj0ncGFzdGUgaGVyZSc+CiAgICAgIHBhc3RlZDoge3twYXN0ZX19CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdJZgogKiBAcmVzdHJpY3QgQQogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0lmYCBkaXJlY3RpdmUgcmVtb3ZlcyBvciByZWNyZWF0ZXMgYSBwb3J0aW9uIG9mIHRoZSBET00gdHJlZSBiYXNlZCBvbiBhbgogKiB7ZXhwcmVzc2lvbn0uIElmIHRoZSBleHByZXNzaW9uIGFzc2lnbmVkIHRvIGBuZ0lmYCBldmFsdWF0ZXMgdG8gYSBmYWxzZQogKiB2YWx1ZSB0aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLCBvdGhlcndpc2UgYSBjbG9uZSBvZiB0aGUKICogZWxlbWVudCBpcyByZWluc2VydGVkIGludG8gdGhlIERPTS4KICoKICogYG5nSWZgIGRpZmZlcnMgZnJvbSBgbmdTaG93YCBhbmQgYG5nSGlkZWAgaW4gdGhhdCBgbmdJZmAgY29tcGxldGVseSByZW1vdmVzIGFuZCByZWNyZWF0ZXMgdGhlCiAqIGVsZW1lbnQgaW4gdGhlIERPTSByYXRoZXIgdGhhbiBjaGFuZ2luZyBpdHMgdmlzaWJpbGl0eSB2aWEgdGhlIGBkaXNwbGF5YCBjc3MgcHJvcGVydHkuICBBIGNvbW1vbgogKiBjYXNlIHdoZW4gdGhpcyBkaWZmZXJlbmNlIGlzIHNpZ25pZmljYW50IGlzIHdoZW4gdXNpbmcgY3NzIHNlbGVjdG9ycyB0aGF0IHJlbHkgb24gYW4gZWxlbWVudCdzCiAqIHBvc2l0aW9uIHdpdGhpbiB0aGUgRE9NLCBzdWNoIGFzIHRoZSBgOmZpcnN0LWNoaWxkYCBvciBgOmxhc3QtY2hpbGRgIHBzZXVkby1jbGFzc2VzLgogKgogKiBOb3RlIHRoYXQgd2hlbiBhbiBlbGVtZW50IGlzIHJlbW92ZWQgdXNpbmcgYG5nSWZgIGl0cyBzY29wZSBpcyBkZXN0cm95ZWQgYW5kIGEgbmV3IHNjb3BlCiAqIGlzIGNyZWF0ZWQgd2hlbiB0aGUgZWxlbWVudCBpcyByZXN0b3JlZC4gIFRoZSBzY29wZSBjcmVhdGVkIHdpdGhpbiBgbmdJZmAgaW5oZXJpdHMgZnJvbQogKiBpdHMgcGFyZW50IHNjb3BlIHVzaW5nCiAqIFtwcm90b3R5cGFsIGluaGVyaXRhbmNlXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3dpa2kvVW5kZXJzdGFuZGluZy1TY29wZXMjamF2YXNjcmlwdC1wcm90b3R5cGFsLWluaGVyaXRhbmNlKS4KICogQW4gaW1wb3J0YW50IGltcGxpY2F0aW9uIG9mIHRoaXMgaXMgaWYgYG5nTW9kZWxgIGlzIHVzZWQgd2l0aGluIGBuZ0lmYCB0byBiaW5kIHRvCiAqIGEgamF2YXNjcmlwdCBwcmltaXRpdmUgZGVmaW5lZCBpbiB0aGUgcGFyZW50IHNjb3BlLiBJbiB0aGlzIGNhc2UgYW55IG1vZGlmaWNhdGlvbnMgbWFkZSB0byB0aGUKICogdmFyaWFibGUgd2l0aGluIHRoZSBjaGlsZCBzY29wZSB3aWxsIG92ZXJyaWRlIChoaWRlKSB0aGUgdmFsdWUgaW4gdGhlIHBhcmVudCBzY29wZS4KICoKICogQWxzbywgYG5nSWZgIHJlY3JlYXRlcyBlbGVtZW50cyB1c2luZyB0aGVpciBjb21waWxlZCBzdGF0ZS4gQW4gZXhhbXBsZSBvZiB0aGlzIGJlaGF2aW9yCiAqIGlzIGlmIGFuIGVsZW1lbnQncyBjbGFzcyBhdHRyaWJ1dGUgaXMgZGlyZWN0bHkgbW9kaWZpZWQgYWZ0ZXIgaXQncyBjb21waWxlZCwgdXNpbmcgc29tZXRoaW5nIGxpa2UKICogalF1ZXJ5J3MgYC5hZGRDbGFzcygpYCBtZXRob2QsIGFuZCB0aGUgZWxlbWVudCBpcyBsYXRlciByZW1vdmVkLiBXaGVuIGBuZ0lmYCByZWNyZWF0ZXMgdGhlIGVsZW1lbnQKICogdGhlIGFkZGVkIGNsYXNzIHdpbGwgYmUgbG9zdCBiZWNhdXNlIHRoZSBvcmlnaW5hbCBjb21waWxlZCBzdGF0ZSBpcyB1c2VkIHRvIHJlZ2VuZXJhdGUgdGhlIGVsZW1lbnQuCiAqCiAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBwcm92aWRlIGFuaW1hdGlvbnMgdmlhIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgdG8gYW5pbWF0ZSB0aGUgYGVudGVyYAogKiBhbmQgYGxlYXZlYCBlZmZlY3RzLgogKgogKiBAYW5pbWF0aW9ucwogKiBlbnRlciAtIGhhcHBlbnMganVzdCBhZnRlciB0aGUgYG5nSWZgIGNvbnRlbnRzIGNoYW5nZSBhbmQgYSBuZXcgRE9NIGVsZW1lbnQgaXMgY3JlYXRlZCBhbmQgaW5qZWN0ZWQgaW50byB0aGUgYG5nSWZgIGNvbnRhaW5lcgogKiBsZWF2ZSAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGBuZ0lmYCBjb250ZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBET00KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBzY29wZQogKiBAcHJpb3JpdHkgNjAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJZiBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgZmFsc3kgdGhlbgogKiAgICAgdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdHJlZS4gSWYgaXQgaXMgdHJ1dGh5IGEgY29weSBvZiB0aGUgY29tcGlsZWQKICogICAgIGVsZW1lbnQgaXMgYWRkZWQgdG8gdGhlIERPTSB0cmVlLgogKgogKiBAZXhhbXBsZQogIDxleGFtcGxlIG1vZHVsZT0ibmdBbmltYXRlIiBkZXBzPSJhbmd1bGFyLWFuaW1hdGUuanMiIGFuaW1hdGlvbnM9InRydWUiPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIiBuZy1pbml0PSJjaGVja2VkPXRydWUiIC8+PGJyLz4KICAgICAgU2hvdyB3aGVuIGNoZWNrZWQ6CiAgICAgIDxzcGFuIG5nLWlmPSJjaGVja2VkIiBjbGFzcz0iYW5pbWF0ZS1pZiI+CiAgICAgICAgVGhpcyBpcyByZW1vdmVkIHdoZW4gdGhlIGNoZWNrYm94IGlzIHVuY2hlY2tlZC4KICAgICAgPC9zcGFuPgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iYW5pbWF0aW9ucy5jc3MiPgogICAgICAuYW5pbWF0ZS1pZiB7CiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIHBhZGRpbmc6MTBweDsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIsIC5hbmltYXRlLWlmLm5nLWxlYXZlIHsKICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41czsKICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLAogICAgICAuYW5pbWF0ZS1pZi5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUgewogICAgICAgIG9wYWNpdHk6MDsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtaWYubmctbGVhdmUsCiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7CiAgICAgICAgb3BhY2l0eToxOwogICAgICB9CiAgICA8L2ZpbGU+CiAgPC9leGFtcGxlPgogKi8KdmFyIG5nSWZEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHsKICByZXR1cm4gewogICAgbXVsdGlFbGVtZW50OiB0cnVlLAogICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLAogICAgcHJpb3JpdHk6IDYwMCwKICAgIHRlcm1pbmFsOiB0cnVlLAogICAgcmVzdHJpY3Q6ICdBJywKICAgICQkdGxiOiB0cnVlLAogICAgbGluazogZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkgewogICAgICAgIHZhciBibG9jaywgY2hpbGRTY29wZSwgcHJldmlvdXNFbGVtZW50czsKICAgICAgICAkc2NvcGUuJHdhdGNoKCRhdHRyLm5nSWYsIGZ1bmN0aW9uIG5nSWZXYXRjaEFjdGlvbih2YWx1ZSkgewoKICAgICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgICBpZiAoIWNoaWxkU2NvcGUpIHsKICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbiAoY2xvbmUsIG5ld1Njb3BlKSB7CiAgICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gbmV3U2NvcGU7CiAgICAgICAgICAgICAgICBjbG9uZVtjbG9uZS5sZW5ndGgrK10gPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgZW5kIG5nSWY6ICcgKyAkYXR0ci5uZ0lmICsgJyAnKTsKICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgbmVlZCB0aGUgZmlyc3QvbGFzdCBub2RlIG9mIHRoZSBjbG9uZWQgbm9kZXMuCiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHJlZmVyZW5jZSB0byB0aGUganFsaXRlIHdyYXBwZXIgYXMgaXQgbWlnaHQgYmUgY2hhbmdlZCBsYXRlcgogICAgICAgICAgICAgICAgLy8gYnkgYSBkaXJlY3RpdmUgd2l0aCB0ZW1wbGF0ZVVybCB3aGVuIGl0cyB0ZW1wbGF0ZSBhcnJpdmVzLgogICAgICAgICAgICAgICAgYmxvY2sgPSB7CiAgICAgICAgICAgICAgICAgIGNsb25lOiBjbG9uZQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCAkZWxlbWVudC5wYXJlbnQoKSwgJGVsZW1lbnQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAocHJldmlvdXNFbGVtZW50cykgewogICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMucmVtb3ZlKCk7CiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGNoaWxkU2NvcGUpIHsKICAgICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7CiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGJsb2NrKSB7CiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpOwogICAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKHByZXZpb3VzRWxlbWVudHMpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gbnVsbDsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBibG9jayA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICB9Owp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nSW5jbHVkZQogKiBAcmVzdHJpY3QgRUNBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBGZXRjaGVzLCBjb21waWxlcyBhbmQgaW5jbHVkZXMgYW4gZXh0ZXJuYWwgSFRNTCBmcmFnbWVudC4KICoKICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIFVSTCBpcyByZXN0cmljdGVkIHRvIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlCiAqIGFwcGxpY2F0aW9uIGRvY3VtZW50LiBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmwKICogJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9IG9uIGl0LiBUbyBsb2FkIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgcHJvdG9jb2xzCiAqIHlvdSBtYXkgZWl0aGVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3QgdGhlbX0gb3IKICoge0BsaW5rICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgdGhlbX0gYXMgdHJ1c3RlZCB2YWx1ZXMuIFJlZmVyIHRvIEFuZ3VsYXIncyB7QGxpbmsKICogbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZ30uCiAqCiAqIEluIGFkZGl0aW9uLCB0aGUgYnJvd3NlcidzCiAqIFtTYW1lIE9yaWdpbiBQb2xpY3ldKGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvYnJvd3NlcnNlYy93aWtpL1BhcnQyI1NhbWUtb3JpZ2luX3BvbGljeV9mb3JfWE1MSHR0cFJlcXVlc3QpCiAqIGFuZCBbQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcgKENPUlMpXShodHRwOi8vd3d3LnczLm9yZy9UUi9jb3JzLykKICogcG9saWN5IG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWQuCiAqIEZvciBleGFtcGxlLCBgbmdJbmNsdWRlYCB3b24ndCB3b3JrIGZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMgb24gYWxsIGJyb3dzZXJzIGFuZCBmb3IgYGZpbGU6Ly9gCiAqIGFjY2VzcyBvbiBzb21lIGJyb3dzZXJzLgogKgogKiBAYW5pbWF0aW9ucwogKiBlbnRlciAtIGFuaW1hdGlvbiBpcyB1c2VkIHRvIGJyaW5nIG5ldyBjb250ZW50IGludG8gdGhlIGJyb3dzZXIuCiAqIGxlYXZlIC0gYW5pbWF0aW9uIGlzIHVzZWQgdG8gYW5pbWF0ZSBleGlzdGluZyBjb250ZW50IGF3YXkuCiAqCiAqIFRoZSBlbnRlciBhbmQgbGVhdmUgYW5pbWF0aW9uIG9jY3VyIGNvbmN1cnJlbnRseS4KICoKICogQHNjb3BlCiAqIEBwcmlvcml0eSA0MDAKICoKICogQHBhcmFtIHtzdHJpbmd9IG5nSW5jbHVkZXxzcmMgYW5ndWxhciBleHByZXNzaW9uIGV2YWx1YXRpbmcgdG8gVVJMLiBJZiB0aGUgc291cmNlIGlzIGEgc3RyaW5nIGNvbnN0YW50LAogKiAgICAgICAgICAgICAgICAgbWFrZSBzdXJlIHlvdSB3cmFwIGl0IGluICoqc2luZ2xlKiogcXVvdGVzLCBlLmcuIGBzcmM9IidteVBhcnRpYWxUZW1wbGF0ZS5odG1sJyJgLgogKiBAcGFyYW0ge3N0cmluZz19IG9ubG9hZCBFeHByZXNzaW9uIHRvIGV2YWx1YXRlIHdoZW4gYSBuZXcgcGFydGlhbCBpcyBsb2FkZWQuCiAqCiAqIEBwYXJhbSB7c3RyaW5nPX0gYXV0b3Njcm9sbCBXaGV0aGVyIGBuZ0luY2x1ZGVgIHNob3VsZCBjYWxsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsCiAqICAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbH0gdG8gc2Nyb2xsIHRoZSB2aWV3cG9ydCBhZnRlciB0aGUgY29udGVudCBpcyBsb2FkZWQuCiAqCiAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBzZXQsIGRpc2FibGUgc2Nyb2xsaW5nLgogKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgd2l0aG91dCB2YWx1ZSwgZW5hYmxlIHNjcm9sbGluZy4KICogICAgICAgICAgICAgICAgICAtIE90aGVyd2lzZSBlbmFibGUgc2Nyb2xsaW5nIG9ubHkgaWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydXRoeSB2YWx1ZS4KICoKICogQGV4YW1wbGUKICA8ZXhhbXBsZSBtb2R1bGU9ImluY2x1ZGVFeGFtcGxlIiBkZXBzPSJhbmd1bGFyLWFuaW1hdGUuanMiIGFuaW1hdGlvbnM9InRydWUiPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJ0ZW1wbGF0ZSIgbmctb3B0aW9ucz0idC5uYW1lIGZvciB0IGluIHRlbXBsYXRlcyI+CiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj4oYmxhbmspPC9vcHRpb24+CiAgICAgICA8L3NlbGVjdD4KICAgICAgIHVybCBvZiB0aGUgdGVtcGxhdGU6IDx0dD57e3RlbXBsYXRlLnVybH19PC90dD4KICAgICAgIDxoci8+CiAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZS1hbmltYXRlLWNvbnRhaW5lciI+CiAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlLWFuaW1hdGUiIG5nLWluY2x1ZGU9InRlbXBsYXRlLnVybCI+PC9kaXY+CiAgICAgICA8L2Rpdj4KICAgICA8L2Rpdj4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbmNsdWRlRXhhbXBsZScsIFsnbmdBbmltYXRlJ10pCiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS50ZW1wbGF0ZXMgPQogICAgICAgICAgICBbIHsgbmFtZTogJ3RlbXBsYXRlMS5odG1sJywgdXJsOiAndGVtcGxhdGUxLmh0bWwnfSwKICAgICAgICAgICAgICB7IG5hbWU6ICd0ZW1wbGF0ZTIuaHRtbCcsIHVybDogJ3RlbXBsYXRlMi5odG1sJ30gXTsKICAgICAgICAgICRzY29wZS50ZW1wbGF0ZSA9ICRzY29wZS50ZW1wbGF0ZXNbMF07CiAgICAgICAgfV0pOwogICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InRlbXBsYXRlMS5odG1sIj4KICAgICAgQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbAogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0idGVtcGxhdGUyLmh0bWwiPgogICAgICBDb250ZW50IG9mIHRlbXBsYXRlMi5odG1sCiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJhbmltYXRpb25zLmNzcyI+CiAgICAgIC5zbGlkZS1hbmltYXRlLWNvbnRhaW5lciB7CiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7CiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGhlaWdodDo0MHB4OwogICAgICAgIG92ZXJmbG93OmhpZGRlbjsKICAgICAgfQoKICAgICAgLnNsaWRlLWFuaW1hdGUgewogICAgICAgIHBhZGRpbmc6MTBweDsKICAgICAgfQoKICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIsIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHsKICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41czsKICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7CgogICAgICAgIHBvc2l0aW9uOmFic29sdXRlOwogICAgICAgIHRvcDowOwogICAgICAgIGxlZnQ6MDsKICAgICAgICByaWdodDowOwogICAgICAgIGJvdHRvbTowOwogICAgICAgIGRpc3BsYXk6YmxvY2s7CiAgICAgICAgcGFkZGluZzoxMHB4OwogICAgICB9CgogICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciB7CiAgICAgICAgdG9wOi01MHB4OwogICAgICB9CiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7CiAgICAgICAgdG9wOjA7CiAgICAgIH0KCiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHsKICAgICAgICB0b3A6MDsKICAgICAgfQogICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUgewogICAgICAgIHRvcDo1MHB4OwogICAgICB9CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgdmFyIHRlbXBsYXRlU2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgndGVtcGxhdGUnKSk7CiAgICAgIHZhciBpbmNsdWRlRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCdbbmctaW5jbHVkZV0nKSk7CgogICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUxLmh0bWwnLCBmdW5jdGlvbigpIHsKICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMS5odG1sLyk7CiAgICAgIH0pOwoKICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMi5odG1sJywgZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ2ZpcmVmb3gnKSB7CiAgICAgICAgICAvLyBGaXJlZm94IGNhbid0IGhhbmRsZSB1c2luZyBzZWxlY3RzCiAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNDgwCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRlbXBsYXRlU2VsZWN0LmNsaWNrKCk7CiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpOwogICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgb2YgdGVtcGxhdGUyLmh0bWwvKTsKICAgICAgfSk7CgogICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0byBibGFuaycsIGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdmaXJlZm94JykgewogICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0cwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5jbGljaygpOwogICAgICAgIHRlbXBsYXRlU2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMCkuY2xpY2soKTsKICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uaXNQcmVzZW50KCkpLnRvQmUoZmFsc2UpOwogICAgICB9KTsKICAgIDwvZmlsZT4KICA8L2V4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZXZlbnQKICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZAogKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIHNjb3BlIG5nSW5jbHVkZSB3YXMgZGVjbGFyZWQgaW4KICogQGRlc2NyaXB0aW9uCiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVxdWVzdGVkLgogKgogKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuCiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC4KICovCgoKLyoqCiAqIEBuZ2RvYyBldmVudAogKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50TG9hZGVkCiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgY3VycmVudCBuZ0luY2x1ZGUgc2NvcGUKICogQGRlc2NyaXB0aW9uCiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVsb2FkZWQuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC4KICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLgogKi8KCgovKioKICogQG5nZG9jIGV2ZW50CiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRFcnJvcgogKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIHNjb3BlIG5nSW5jbHVkZSB3YXMgZGVjbGFyZWQgaW4KICogQGRlc2NyaXB0aW9uCiAqIEVtaXR0ZWQgd2hlbiBhIHRlbXBsYXRlIEhUVFAgcmVxdWVzdCB5aWVsZHMgYW4gZXJyb25vdXMgcmVzcG9uc2UgKHN0YXR1cyA8IDIwMCB8fCBzdGF0dXMgPiAyOTkpCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC4KICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLgogKi8KdmFyIG5nSW5jbHVkZURpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlUmVxdWVzdCcsICckYW5jaG9yU2Nyb2xsJywgJyRhbmltYXRlJywgJyRzY2UnLAogICAgICAgICAgICAgICAgICBmdW5jdGlvbigkdGVtcGxhdGVSZXF1ZXN0LCAgICRhbmNob3JTY3JvbGwsICAgJGFuaW1hdGUsICAgJHNjZSkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0VDQScsCiAgICBwcmlvcml0eTogNDAwLAogICAgdGVybWluYWw6IHRydWUsCiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsCiAgICBjb250cm9sbGVyOiBhbmd1bGFyLm5vb3AsCiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICAgIHZhciBzcmNFeHAgPSBhdHRyLm5nSW5jbHVkZSB8fCBhdHRyLnNyYywKICAgICAgICAgIG9ubG9hZEV4cCA9IGF0dHIub25sb2FkIHx8ICcnLAogICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHIuYXV0b3Njcm9sbDsKCiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkgewogICAgICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMCwKICAgICAgICAgICAgY3VycmVudFNjb3BlLAogICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQsCiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50OwoKICAgICAgICB2YXIgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYocHJldmlvdXNFbGVtZW50KSB7CiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudC5yZW1vdmUoKTsKICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGN1cnJlbnRTY29wZSkgewogICAgICAgICAgICBjdXJyZW50U2NvcGUuJGRlc3Ryb3koKTsKICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGN1cnJlbnRFbGVtZW50KSB7CiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGN1cnJlbnRFbGVtZW50KS50aGVuKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IG51bGw7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBjdXJyZW50RWxlbWVudDsKICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNSZXNvdXJjZVVybChzcmNFeHApLCBmdW5jdGlvbiBuZ0luY2x1ZGVXYXRjaEFjdGlvbihzcmMpIHsKICAgICAgICAgIHZhciBhZnRlckFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmICghYXV0b1Njcm9sbEV4cCB8fCBzY29wZS4kZXZhbChhdXRvU2Nyb2xsRXhwKSkpIHsKICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgICB2YXIgdGhpc0NoYW5nZUlkID0gKytjaGFuZ2VDb3VudGVyOwoKICAgICAgICAgIGlmIChzcmMpIHsKICAgICAgICAgICAgLy9zZXQgdGhlIDJuZCBwYXJhbSB0byB0cnVlIHRvIGlnbm9yZSB0aGUgdGVtcGxhdGUgcmVxdWVzdCBlcnJvciBzbyB0aGF0IHRoZSBpbm5lcgogICAgICAgICAgICAvL2NvbnRlbnRzIGFuZCBzY29wZSBjYW4gYmUgY2xlYW5lZCB1cC4KICAgICAgICAgICAgJHRlbXBsYXRlUmVxdWVzdChzcmMsIHRydWUpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSByZXR1cm47CiAgICAgICAgICAgICAgdmFyIG5ld1Njb3BlID0gc2NvcGUuJG5ldygpOwogICAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSByZXNwb25zZTsKCiAgICAgICAgICAgICAgLy8gTm90ZTogVGhpcyB3aWxsIGFsc28gbGluayBhbGwgY2hpbGRyZW4gb2YgbmctaW5jbHVkZSB0aGF0IHdlcmUgY29udGFpbmVkIGluIHRoZSBvcmlnaW5hbAogICAgICAgICAgICAgIC8vIGh0bWwuIElmIHRoYXQgY29udGVudCBjb250YWlucyBjb250cm9sbGVycywgLi4uIHRoZXkgY291bGQgcG9sbHV0ZS9jaGFuZ2UgdGhlIHNjb3BlLgogICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHVzaW5nIG5nLWluY2x1ZGUgb24gYW4gZWxlbWVudCB3aXRoIGFkZGl0aW9uYWwgY29udGVudCBkb2VzIG5vdCBtYWtlIHNlbnNlLi4uCiAgICAgICAgICAgICAgLy8gTm90ZTogV2UgY2FuJ3QgcmVtb3ZlIHRoZW0gaW4gdGhlIGNsb25lQXR0Y2hGbiBvZiAkdHJhbnNjbHVkZSBhcyB0aGF0CiAgICAgICAgICAgICAgLy8gZnVuY3Rpb24gaXMgY2FsbGVkIGJlZm9yZSBsaW5raW5nIHRoZSBjb250ZW50LCB3aGljaCB3b3VsZCBhcHBseSBjaGlsZAogICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMgdG8gbm9uIGV4aXN0aW5nIGVsZW1lbnRzLgogICAgICAgICAgICAgIHZhciBjbG9uZSA9ICR0cmFuc2NsdWRlKG5ld1Njb3BlLCBmdW5jdGlvbihjbG9uZSkgewogICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpOwogICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsICRlbGVtZW50KS50aGVuKGFmdGVyQW5pbWF0aW9uKTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbmV3U2NvcGU7CiAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjbG9uZTsKCiAgICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBzcmMpOwogICAgICAgICAgICAgIHNjb3BlLiRldmFsKG9ubG9hZEV4cCk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgPT09IGNoYW5nZUNvdW50ZXIpIHsKICAgICAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTsKICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRFcnJvcicsIHNyYyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZCcsIHNyYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7CiAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9OwogICAgfQogIH07Cn1dOwoKLy8gVGhpcyBkaXJlY3RpdmUgaXMgY2FsbGVkIGR1cmluZyB0aGUgJHRyYW5zY2x1ZGUgY2FsbCBvZiB0aGUgZmlyc3QgYG5nSW5jbHVkZWAgZGlyZWN0aXZlLgovLyBJdCB3aWxsIHJlcGxhY2UgYW5kIGNvbXBpbGUgdGhlIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgd2l0aCB0aGUgbG9hZGVkIHRlbXBsYXRlLgovLyBXZSBuZWVkIHRoaXMgZGlyZWN0aXZlIHNvIHRoYXQgdGhlIGVsZW1lbnQgY29udGVudCBpcyBhbHJlYWR5IGZpbGxlZCB3aGVuCi8vIHRoZSBsaW5rIGZ1bmN0aW9uIG9mIGFub3RoZXIgZGlyZWN0aXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQgYXMgbmdJbmNsdWRlCi8vIGlzIGNhbGxlZC4KdmFyIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlID0gWyckY29tcGlsZScsCiAgZnVuY3Rpb24oJGNvbXBpbGUpIHsKICAgIHJldHVybiB7CiAgICAgIHJlc3RyaWN0OiAnRUNBJywKICAgICAgcHJpb3JpdHk6IC00MDAsCiAgICAgIHJlcXVpcmU6ICduZ0luY2x1ZGUnLAogICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsKSB7CiAgICAgICAgaWYgKC9TVkcvLnRlc3QoJGVsZW1lbnRbMF0udG9TdHJpbmcoKSkpIHsKICAgICAgICAgIC8vIFdlYktpdDogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNTY5OCAtLS0gU1ZHIGVsZW1lbnRzIGRvIG5vdAogICAgICAgICAgLy8gc3VwcG9ydCBpbm5lckhUTUwsIHNvIGRldGVjdCB0aGlzIGhlcmUgYW5kIHRyeSB0byBnZW5lcmF0ZSB0aGUgY29udGVudHMKICAgICAgICAgIC8vIHNwZWNpYWxseS4KICAgICAgICAgICRlbGVtZW50LmVtcHR5KCk7CiAgICAgICAgICAkY29tcGlsZShqcUxpdGVCdWlsZEZyYWdtZW50KGN0cmwudGVtcGxhdGUsIGRvY3VtZW50KS5jaGlsZE5vZGVzKShzY29wZSwKICAgICAgICAgICAgICBmdW5jdGlvbiBuYW1lc3BhY2VBZGFwdGVkQ2xvbmUoY2xvbmUpIHsKICAgICAgICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTsKICAgICAgICAgIH0sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAkZWxlbWVudCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAkZWxlbWVudC5odG1sKGN0cmwudGVtcGxhdGUpOwogICAgICAgICRjb21waWxlKCRlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTsKICAgICAgfQogICAgfTsKICB9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nSW5pdAogKiBAcmVzdHJpY3QgQUMKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdJbml0YCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBldmFsdWF0ZSBhbiBleHByZXNzaW9uIGluIHRoZQogKiBjdXJyZW50IHNjb3BlLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1lcnJvciI+CiAqIFRoZSBvbmx5IGFwcHJvcHJpYXRlIHVzZSBvZiBgbmdJbml0YCBpcyBmb3IgYWxpYXNpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzIG9mCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgYG5nUmVwZWF0YH0sIGFzIHNlZW4gaW4gdGhlIGRlbW8gYmVsb3cuIEJlc2lkZXMgdGhpcyBjYXNlLCB5b3UKICogc2hvdWxkIHVzZSB7QGxpbmsgZ3VpZGUvY29udHJvbGxlciBjb250cm9sbGVyc30gcmF0aGVyIHRoYW4gYG5nSW5pdGAKICogdG8gaW5pdGlhbGl6ZSB2YWx1ZXMgb24gYSBzY29wZS4KICogPC9kaXY+CiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKk5vdGUqKjogSWYgeW91IGhhdmUgYXNzaWdubWVudCBpbiBgbmdJbml0YCBhbG9uZyB3aXRoIHtAbGluayBuZy4kZmlsdGVyIGAkZmlsdGVyYH0sIG1ha2UKICogc3VyZSB5b3UgaGF2ZSBwYXJlbnRoZXNpcyBmb3IgY29ycmVjdCBwcmVjZWRlbmNlOgogKiA8cHJlIGNsYXNzPSJwcmV0dHlwcmludCI+CiAqICAgPGRpdiBuZy1pbml0PSJ0ZXN0MSA9IChkYXRhIHwgb3JkZXJCeTonbmFtZScpIj48L2Rpdj4KICogPC9wcmU+CiAqIDwvZGl2PgogKgogKiBAcHJpb3JpdHkgNDUwCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSW5pdCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBtb2R1bGU9ImluaXRFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgPHNjcmlwdD4KICAgICBhbmd1bGFyLm1vZHVsZSgnaW5pdEV4YW1wbGUnLCBbXSkKICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICRzY29wZS5saXN0ID0gW1snYScsICdiJ10sIFsnYycsICdkJ11dOwogICAgICAgfV0pOwogICA8L3NjcmlwdD4KICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgPGRpdiBuZy1yZXBlYXQ9ImlubmVyTGlzdCBpbiBsaXN0IiBuZy1pbml0PSJvdXRlckluZGV4ID0gJGluZGV4Ij4KICAgICAgIDxkaXYgbmctcmVwZWF0PSJ2YWx1ZSBpbiBpbm5lckxpc3QiIG5nLWluaXQ9ImlubmVySW5kZXggPSAkaW5kZXgiPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImV4YW1wbGUtaW5pdCI+bGlzdFsge3tvdXRlckluZGV4fX0gXVsge3tpbm5lckluZGV4fX0gXSA9IHt7dmFsdWV9fTs8L3NwYW4+CiAgICAgICA8L2Rpdj4KICAgICA8L2Rpdj4KICAgPC9kaXY+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgaXQoJ3Nob3VsZCBhbGlhcyBpbmRleCBwb3NpdGlvbnMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgdmFyIGVsZW1lbnRzID0gZWxlbWVudC5hbGwoYnkuY3NzKCcuZXhhbXBsZS1pbml0JykpOwogICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAwIF0gPSBhOycpOwogICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDEpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAxIF0gPSBiOycpOwogICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAwIF0gPSBjOycpOwogICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDMpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAxIF0gPSBkOycpOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdJbml0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIHByaW9yaXR5OiA0NTAsCiAgY29tcGlsZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykgewogICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nSW5pdCk7CiAgICAgIH0KICAgIH07CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nTm9uQmluZGFibGUKICogQHJlc3RyaWN0IEFDCiAqIEBwcmlvcml0eSAxMDAwCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nTm9uQmluZGFibGVgIGRpcmVjdGl2ZSB0ZWxscyBBbmd1bGFyIG5vdCB0byBjb21waWxlIG9yIGJpbmQgdGhlIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50CiAqIERPTSBlbGVtZW50LiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgZWxlbWVudCBjb250YWlucyB3aGF0IGFwcGVhcnMgdG8gYmUgQW5ndWxhciBkaXJlY3RpdmVzIGFuZAogKiBiaW5kaW5ncyBidXQgd2hpY2ggc2hvdWxkIGJlIGlnbm9yZWQgYnkgQW5ndWxhci4gVGhpcyBjb3VsZCBiZSB0aGUgY2FzZSBpZiB5b3UgaGF2ZSBhIHNpdGUgdGhhdAogKiBkaXNwbGF5cyBzbmlwcGV0cyBvZiBjb2RlLCBmb3IgaW5zdGFuY2UuCiAqCiAqIEBlbGVtZW50IEFOWQogKgogKiBAZXhhbXBsZQogKiBJbiB0aGlzIGV4YW1wbGUgdGhlcmUgYXJlIHR3byBsb2NhdGlvbnMgd2hlcmUgYSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiaW5kaW5nIChge3t9fWApIGlzIHByZXNlbnQsCiAqIGJ1dCB0aGUgb25lIHdyYXBwZWQgaW4gYG5nTm9uQmluZGFibGVgIGlzIGxlZnQgYWxvbmUuCiAqCiAqIEBleGFtcGxlCiAgICA8ZXhhbXBsZT4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPGRpdj5Ob3JtYWw6IHt7MSArIDJ9fTwvZGl2PgogICAgICAgIDxkaXYgbmctbm9uLWJpbmRhYmxlPklnbm9yZWQ6IHt7MSArIDJ9fTwvZGl2PgogICAgICA8L2ZpbGU+CiAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1ub24tYmluZGFibGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnMSArIDInKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzMnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnZGl2JykpLmxhc3QoKS5nZXRUZXh0KCkpLnRvTWF0Y2goLzEgXCsgMi8pOwogICAgICAgfSk7CiAgICAgIDwvZmlsZT4KICAgIDwvZXhhbXBsZT4KICovCnZhciBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoeyB0ZXJtaW5hbDogdHJ1ZSwgcHJpb3JpdHk6IDEwMDAgfSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1BsdXJhbGl6ZQogKiBAcmVzdHJpY3QgRUEKICoKICogQGRlc2NyaXB0aW9uCiAqIGBuZ1BsdXJhbGl6ZWAgaXMgYSBkaXJlY3RpdmUgdGhhdCBkaXNwbGF5cyBtZXNzYWdlcyBhY2NvcmRpbmcgdG8gZW4tVVMgbG9jYWxpemF0aW9uIHJ1bGVzLgogKiBUaGVzZSBydWxlcyBhcmUgYnVuZGxlZCB3aXRoIGFuZ3VsYXIuanMsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbgogKiAoc2VlIHtAbGluayBndWlkZS9pMThuIEFuZ3VsYXIgaTE4bn0gZGV2IGd1aWRlKS4gWW91IGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZSBkaXJlY3RpdmUKICogYnkgc3BlY2lmeWluZyB0aGUgbWFwcGluZ3MgYmV0d2VlbgogKiBbcGx1cmFsIGNhdGVnb3JpZXNdKGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcy9jbGRyLXRtcC90cnVuay9kaWZmL3N1cHBsZW1lbnRhbC9sYW5ndWFnZV9wbHVyYWxfcnVsZXMuaHRtbCkKICogYW5kIHRoZSBzdHJpbmdzIHRvIGJlIGRpc3BsYXllZC4KICoKICogIyBQbHVyYWwgY2F0ZWdvcmllcyBhbmQgZXhwbGljaXQgbnVtYmVyIHJ1bGVzCiAqIFRoZXJlIGFyZSB0d28KICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpCiAqIGluIEFuZ3VsYXIncyBkZWZhdWx0IGVuLVVTIGxvY2FsZTogIm9uZSIgYW5kICJvdGhlciIuCiAqCiAqIFdoaWxlIGEgcGx1cmFsIGNhdGVnb3J5IG1heSBtYXRjaCBtYW55IG51bWJlcnMgKGZvciBleGFtcGxlLCBpbiBlbi1VUyBsb2NhbGUsICJvdGhlciIgY2FuIG1hdGNoCiAqIGFueSBudW1iZXIgdGhhdCBpcyBub3QgMSksIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGNhbiBvbmx5IG1hdGNoIG9uZSBudW1iZXIuIEZvciBleGFtcGxlLCB0aGUKICogZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yICIzIiBtYXRjaGVzIHRoZSBudW1iZXIgMy4gVGhlcmUgYXJlIGV4YW1wbGVzIG9mIHBsdXJhbCBjYXRlZ29yaWVzCiAqIGFuZCBleHBsaWNpdCBudW1iZXIgcnVsZXMgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGlzIGRvY3VtZW50YXRpb24uCiAqCiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemUKICogWW91IGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZSBieSBwcm92aWRpbmcgMiBhdHRyaWJ1dGVzOiBgY291bnRgIGFuZCBgd2hlbmAuCiAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGF0dHJpYnV0ZSwgYG9mZnNldGAuCiAqCiAqIFRoZSB2YWx1ZSBvZiB0aGUgYGNvdW50YCBhdHRyaWJ1dGUgY2FuIGJlIGVpdGhlciBhIHN0cmluZyBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbgogKiBBbmd1bGFyIGV4cHJlc3Npb259OyB0aGVzZSBhcmUgZXZhbHVhdGVkIG9uIHRoZSBjdXJyZW50IHNjb3BlIGZvciBpdHMgYm91bmQgdmFsdWUuCiAqCiAqIFRoZSBgd2hlbmAgYXR0cmlidXRlIHNwZWNpZmllcyB0aGUgbWFwcGluZ3MgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcmllcyBhbmQgdGhlIGFjdHVhbAogKiBzdHJpbmcgdG8gYmUgZGlzcGxheWVkLiBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBzaG91bGQgYmUgYSBKU09OIG9iamVjdC4KICoKICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjb25maWd1cmUgbmdQbHVyYWxpemU6CiAqCiAqIGBgYGh0bWwKICogPG5nLXBsdXJhbGl6ZSBjb3VudD0icGVyc29uQ291bnQiCiAgICAgICAgICAgICAgICAgd2hlbj0ieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAnMSBwZXJzb24gaXMgdmlld2luZy4nLAogKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9Ij4KICogPC9uZy1wbHVyYWxpemU+CiAqYGBgCiAqCiAqIEluIHRoZSBleGFtcGxlLCBgIjA6IE5vYm9keSBpcyB2aWV3aW5nLiJgIGlzIGFuIGV4cGxpY2l0IG51bWJlciBydWxlLiBJZiB5b3UgZGlkIG5vdAogKiBzcGVjaWZ5IHRoaXMgcnVsZSwgMCB3b3VsZCBiZSBtYXRjaGVkIHRvIHRoZSAib3RoZXIiIGNhdGVnb3J5IGFuZCAiMCBwZW9wbGUgYXJlIHZpZXdpbmciCiAqIHdvdWxkIGJlIHNob3duIGluc3RlYWQgb2YgIk5vYm9keSBpcyB2aWV3aW5nIi4gWW91IGNhbiBzcGVjaWZ5IGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGZvcgogKiBvdGhlciBudW1iZXJzLCBmb3IgZXhhbXBsZSAxMiwgc28gdGhhdCBpbnN0ZWFkIG9mIHNob3dpbmcgIjEyIHBlb3BsZSBhcmUgdmlld2luZyIsIHlvdSBjYW4KICogc2hvdyAiYSBkb3plbiBwZW9wbGUgYXJlIHZpZXdpbmciLgogKgogKiBZb3UgY2FuIHVzZSBhIHNldCBvZiBjbG9zZWQgYnJhY2VzIChge31gKSBhcyBhIHBsYWNlaG9sZGVyIGZvciB0aGUgbnVtYmVyIHRoYXQgeW91IHdhbnQgc3Vic3RpdHV0ZWQKICogaW50byBwbHVyYWxpemVkIHN0cmluZ3MuIEluIHRoZSBwcmV2aW91cyBleGFtcGxlLCBBbmd1bGFyIHdpbGwgcmVwbGFjZSBge31gIHdpdGgKICogPHNwYW4gbmctbm9uLWJpbmRhYmxlPmB7e3BlcnNvbkNvdW50fX1gPC9zcGFuPi4gVGhlIGNsb3NlZCBicmFjZXMgYHt9YCBpcyBhIHBsYWNlaG9sZGVyCiAqIGZvciA8c3BhbiBuZy1ub24tYmluZGFibGU+e3tudW1iZXJFeHByZXNzaW9ufX08L3NwYW4+LgogKgogKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplIHdpdGggb2Zmc2V0CiAqIFRoZSBgb2Zmc2V0YCBhdHRyaWJ1dGUgYWxsb3dzIGZ1cnRoZXIgY3VzdG9taXphdGlvbiBvZiBwbHVyYWxpemVkIHRleHQsIHdoaWNoIGNhbiByZXN1bHQgaW4KICogYSBiZXR0ZXIgdXNlciBleHBlcmllbmNlLiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZiB0aGUgbWVzc2FnZSAiNCBwZW9wbGUgYXJlIHZpZXdpbmcgdGhpcyBkb2N1bWVudCIsCiAqIHlvdSBtaWdodCBkaXNwbGF5ICJKb2huLCBLYXRlIGFuZCAyIG90aGVycyBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50Ii4KICogVGhlIG9mZnNldCBhdHRyaWJ1dGUgYWxsb3dzIHlvdSB0byBvZmZzZXQgYSBudW1iZXIgYnkgYW55IGRlc2lyZWQgdmFsdWUuCiAqIExldCdzIHRha2UgYSBsb29rIGF0IGFuIGV4YW1wbGU6CiAqCiAqIGBgYGh0bWwKICogPG5nLXBsdXJhbGl6ZSBjb3VudD0icGVyc29uQ291bnQiIG9mZnNldD0yCiAqICAgICAgICAgICAgICAgd2hlbj0ieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICcxJzogJ3t7cGVyc29uMX19IGlzIHZpZXdpbmcuJywKICogICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIHt9IG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nfSI+CiAqIDwvbmctcGx1cmFsaXplPgogKiBgYGAKICoKICogTm90aWNlIHRoYXQgd2UgYXJlIHN0aWxsIHVzaW5nIHR3byBwbHVyYWwgY2F0ZWdvcmllcyhvbmUsIG90aGVyKSwgYnV0IHdlIGFkZGVkCiAqIHRocmVlIGV4cGxpY2l0IG51bWJlciBydWxlcyAwLCAxIGFuZCAyLgogKiBXaGVuIG9uZSBwZXJzb24sIHBlcmhhcHMgSm9obiwgdmlld3MgdGhlIGRvY3VtZW50LCAiSm9obiBpcyB2aWV3aW5nIiB3aWxsIGJlIHNob3duLgogKiBXaGVuIHRocmVlIHBlb3BsZSB2aWV3IHRoZSBkb2N1bWVudCwgbm8gZXhwbGljaXQgbnVtYmVyIHJ1bGUgaXMgZm91bmQsIHNvCiAqIGFuIG9mZnNldCBvZiAyIGlzIHRha2VuIG9mZiAzLCBhbmQgQW5ndWxhciB1c2VzIDEgdG8gZGVjaWRlIHRoZSBwbHVyYWwgY2F0ZWdvcnkuCiAqIEluIHRoaXMgY2FzZSwgcGx1cmFsIGNhdGVnb3J5ICdvbmUnIGlzIG1hdGNoZWQgYW5kICJKb2huLCBNYXJ5IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nIgogKiBpcyBzaG93bi4KICoKICogTm90ZSB0aGF0IHdoZW4geW91IHNwZWNpZnkgb2Zmc2V0cywgeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yCiAqIG51bWJlcnMgZnJvbSAwIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIG9mZnNldC4gSWYgeW91IHVzZSBhbiBvZmZzZXQgb2YgMywgZm9yIGV4YW1wbGUsCiAqIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvciAwLCAxLCAyIGFuZCAzLiBZb3UgbXVzdCBhbHNvIHByb3ZpZGUgcGx1cmFsIHN0cmluZ3MgZm9yCiAqIHBsdXJhbCBjYXRlZ29yaWVzICJvbmUiIGFuZCAib3RoZXIiLgogKgogKiBAcGFyYW0ge3N0cmluZ3xleHByZXNzaW9ufSBjb3VudCBUaGUgdmFyaWFibGUgdG8gYmUgYm91bmQgdG8uCiAqIEBwYXJhbSB7c3RyaW5nfSB3aGVuIFRoZSBtYXBwaW5nIGJldHdlZW4gcGx1cmFsIGNhdGVnb3J5IHRvIGl0cyBjb3JyZXNwb25kaW5nIHN0cmluZ3MuCiAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBkZWR1Y3QgZnJvbSB0aGUgdG90YWwgbnVtYmVyLgogKgogKiBAZXhhbXBsZQogICAgPGV4YW1wbGUgbW9kdWxlPSJwbHVyYWxpemVFeGFtcGxlIj4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPHNjcmlwdD4KICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdwbHVyYWxpemVFeGFtcGxlJywgW10pCiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjEgPSAnSWdvcic7CiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjIgPSAnTWlza28nOwogICAgICAgICAgICAgICRzY29wZS5wZXJzb25Db3VudCA9IDE7CiAgICAgICAgICAgIH1dKTsKICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgIFBlcnNvbiAxOjxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0icGVyc29uMSIgdmFsdWU9Iklnb3IiIC8+PGJyLz4KICAgICAgICAgIFBlcnNvbiAyOjxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0icGVyc29uMiIgdmFsdWU9Ik1pc2tvIiAvPjxici8+CiAgICAgICAgICBOdW1iZXIgb2YgUGVvcGxlOjxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0icGVyc29uQ291bnQiIHZhbHVlPSIxIiAvPjxici8+CgogICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIHNpbXBsZSBwbHVyYWxpemF0aW9uIHJ1bGVzIGZvciBlbiBsb2NhbGUgLS0tPgogICAgICAgICAgV2l0aG91dCBPZmZzZXQ6CiAgICAgICAgICA8bmctcGx1cmFsaXplIGNvdW50PSJwZXJzb25Db3VudCIKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbj0ieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ30iPgogICAgICAgICAgPC9uZy1wbHVyYWxpemU+PGJyPgoKICAgICAgICAgIDwhLS0tIEV4YW1wbGUgd2l0aCBvZmZzZXQgLS0tPgogICAgICAgICAgV2l0aCBPZmZzZXQoMik6CiAgICAgICAgICA8bmctcGx1cmFsaXplIGNvdW50PSJwZXJzb25Db3VudCIgb2Zmc2V0PTIKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbj0ieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ30iPgogICAgICAgICAgPC9uZy1wbHVyYWxpemU+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZmlsZT4KICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGNvcnJlY3QgcGx1cmFsaXplZCBzdHJpbmcnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciB3aXRob3V0T2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDApOwogICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7CiAgICAgICAgICB2YXIgY291bnRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbkNvdW50JykpOwoKICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMSBwZXJzb24gaXMgdmlld2luZy4nKTsKICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciBpcyB2aWV3aW5nLicpOwoKICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTsKICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzAnKTsKCiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpOwogICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdOb2JvZHkgaXMgdmlld2luZy4nKTsKCiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7CiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCcyJyk7CgogICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCcyIHBlb3BsZSBhcmUgdmlld2luZy4nKTsKICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciBhbmQgTWlza28gYXJlIHZpZXdpbmcuJyk7CgogICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpOwogICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMycpOwoKICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMyBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IsIE1pc2tvIGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicpOwoKICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTsKICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzQnKTsKCiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzQgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwogICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yLCBNaXNrbyBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgfSk7CiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGRhdGEtYm91bmQgbmFtZXMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciB3aXRoT2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDEpOwogICAgICAgICAgdmFyIHBlcnNvbkNvdW50ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7CiAgICAgICAgICB2YXIgcGVyc29uMSA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjEnKSk7CiAgICAgICAgICB2YXIgcGVyc29uMiA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjInKSk7CiAgICAgICAgICBwZXJzb25Db3VudC5jbGVhcigpOwogICAgICAgICAgcGVyc29uQ291bnQuc2VuZEtleXMoJzQnKTsKICAgICAgICAgIHBlcnNvbjEuY2xlYXIoKTsKICAgICAgICAgIHBlcnNvbjEuc2VuZEtleXMoJ0RpJyk7CiAgICAgICAgICBwZXJzb24yLmNsZWFyKCk7CiAgICAgICAgICBwZXJzb24yLnNlbmRLZXlzKCdWb2p0YScpOwogICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdEaSwgVm9qdGEgYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwogICAgICAgIH0pOwogICAgICA8L2ZpbGU+CiAgICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdQbHVyYWxpemVEaXJlY3RpdmUgPSBbJyRsb2NhbGUnLCAnJGludGVycG9sYXRlJywgZnVuY3Rpb24oJGxvY2FsZSwgJGludGVycG9sYXRlKSB7CiAgdmFyIEJSQUNFID0gL3t9L2c7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRUEnLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgdmFyIG51bWJlckV4cCA9IGF0dHIuY291bnQsCiAgICAgICAgICB3aGVuRXhwID0gYXR0ci4kYXR0ci53aGVuICYmIGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLndoZW4pLCAvLyB3ZSBoYXZlIHt7fX0gaW4gYXR0cnMKICAgICAgICAgIG9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDAsCiAgICAgICAgICB3aGVucyA9IHNjb3BlLiRldmFsKHdoZW5FeHApIHx8IHt9LAogICAgICAgICAgd2hlbnNFeHBGbnMgPSB7fSwKICAgICAgICAgIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksCiAgICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksCiAgICAgICAgICBpc1doZW4gPSAvXndoZW4oTWludXMpPyguKykkLzsKCiAgICAgIGZvckVhY2goYXR0ciwgZnVuY3Rpb24oZXhwcmVzc2lvbiwgYXR0cmlidXRlTmFtZSkgewogICAgICAgIGlmIChpc1doZW4udGVzdChhdHRyaWJ1dGVOYW1lKSkgewogICAgICAgICAgd2hlbnNbbG93ZXJjYXNlKGF0dHJpYnV0ZU5hbWUucmVwbGFjZSgnd2hlbicsICcnKS5yZXBsYWNlKCdNaW51cycsICctJykpXSA9CiAgICAgICAgICAgIGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyW2F0dHJpYnV0ZU5hbWVdKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBmb3JFYWNoKHdoZW5zLCBmdW5jdGlvbihleHByZXNzaW9uLCBrZXkpIHsKICAgICAgICB3aGVuc0V4cEZuc1trZXldID0KICAgICAgICAgICRpbnRlcnBvbGF0ZShleHByZXNzaW9uLnJlcGxhY2UoQlJBQ0UsIHN0YXJ0U3ltYm9sICsgbnVtYmVyRXhwICsgJy0nICsKICAgICAgICAgICAgb2Zmc2V0ICsgZW5kU3ltYm9sKSk7CiAgICAgIH0pOwoKICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2goKSB7CiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VGbG9hdChzY29wZS4kZXZhbChudW1iZXJFeHApKTsKCiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHsKICAgICAgICAgIC8vaWYgZXhwbGljaXQgbnVtYmVyIHJ1bGUgc3VjaCBhcyAxLCAyLCAzLi4uIGlzIGRlZmluZWQsIGp1c3QgdXNlIGl0LiBPdGhlcndpc2UsCiAgICAgICAgICAvL2NoZWNrIGl0IGFnYWluc3QgcGx1cmFsaXphdGlvbiBydWxlcyBpbiAkbG9jYWxlIHNlcnZpY2UKICAgICAgICAgIGlmICghKHZhbHVlIGluIHdoZW5zKSkgdmFsdWUgPSAkbG9jYWxlLnBsdXJhbENhdCh2YWx1ZSAtIG9mZnNldCk7CiAgICAgICAgICAgcmV0dXJuIHdoZW5zRXhwRm5zW3ZhbHVlXShzY29wZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2hBY3Rpb24obmV3VmFsKSB7CiAgICAgICAgZWxlbWVudC50ZXh0KG5ld1ZhbCk7CiAgICAgIH0pOwogICAgfQogIH07Cn1dOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdSZXBlYXQKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdSZXBlYXRgIGRpcmVjdGl2ZSBpbnN0YW50aWF0ZXMgYSB0ZW1wbGF0ZSBvbmNlIHBlciBpdGVtIGZyb20gYSBjb2xsZWN0aW9uLiBFYWNoIHRlbXBsYXRlCiAqIGluc3RhbmNlIGdldHMgaXRzIG93biBzY29wZSwgd2hlcmUgdGhlIGdpdmVuIGxvb3AgdmFyaWFibGUgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gaXRlbSwKICogYW5kIGAkaW5kZXhgIGlzIHNldCB0byB0aGUgaXRlbSBpbmRleCBvciBrZXkuCiAqCiAqIFNwZWNpYWwgcHJvcGVydGllcyBhcmUgZXhwb3NlZCBvbiB0aGUgbG9jYWwgc2NvcGUgb2YgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSwgaW5jbHVkaW5nOgogKgogKiB8IFZhcmlhYmxlICB8IFR5cGUgICAgICAgICAgICB8IERldGFpbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAqIHwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwKICogfCBgJGluZGV4YCAgfCB7QHR5cGUgbnVtYmVyfSAgfCBpdGVyYXRvciBvZmZzZXQgb2YgdGhlIHJlcGVhdGVkIGVsZW1lbnQgKDAuLmxlbmd0aC0xKSAgICAgICAgICAgICAgICAgICAgICAgfAogKiB8IGAkZmlyc3RgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgZmlyc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICB8CiAqIHwgYCRtaWRkbGVgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBpbiB0aGUgaXRlcmF0b3IuIHwKICogfCBgJGxhc3RgICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGxhc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICAgfAogKiB8IGAkZXZlbmAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIGl0ZXJhdG9yIHBvc2l0aW9uIGAkaW5kZXhgIGlzIGV2ZW4gKG90aGVyd2lzZSBmYWxzZSkuICAgICAgICAgICB8CiAqIHwgYCRvZGRgICAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgb2RkIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgIHwKICoKICogQ3JlYXRpbmcgYWxpYXNlcyBmb3IgdGhlc2UgcHJvcGVydGllcyBpcyBwb3NzaWJsZSB3aXRoIHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbml0IGBuZ0luaXRgfS4KICogVGhpcyBtYXkgYmUgdXNlZnVsIHdoZW4sIGZvciBpbnN0YW5jZSwgbmVzdGluZyBuZ1JlcGVhdHMuCiAqCiAqICMgU3BlY2lhbCByZXBlYXQgc3RhcnQgYW5kIGVuZCBwb2ludHMKICogVG8gcmVwZWF0IGEgc2VyaWVzIG9mIGVsZW1lbnRzIGluc3RlYWQgb2YganVzdCBvbmUgcGFyZW50IGVsZW1lbnQsIG5nUmVwZWF0IChhcyB3ZWxsIGFzIG90aGVyIG5nIGRpcmVjdGl2ZXMpIHN1cHBvcnRzIGV4dGVuZGluZwogKiB0aGUgcmFuZ2Ugb2YgdGhlIHJlcGVhdGVyIGJ5IGRlZmluaW5nIGV4cGxpY2l0IHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGJ5IHVzaW5nICoqbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmctcmVwZWF0LWVuZCoqIHJlc3BlY3RpdmVseS4KICogVGhlICoqbmctcmVwZWF0LXN0YXJ0KiogZGlyZWN0aXZlIHdvcmtzIHRoZSBzYW1lIGFzICoqbmctcmVwZWF0KiosIGJ1dCB3aWxsIHJlcGVhdCBhbGwgdGhlIEhUTUwgY29kZSAoaW5jbHVkaW5nIHRoZSB0YWcgaXQncyBkZWZpbmVkIG9uKQogKiB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBlbmRpbmcgSFRNTCB0YWcgd2hlcmUgKipuZy1yZXBlYXQtZW5kKiogaXMgcGxhY2VkLgogKgogKiBUaGUgZXhhbXBsZSBiZWxvdyBtYWtlcyB1c2Ugb2YgdGhpcyBmZWF0dXJlOgogKiBgYGBodG1sCiAqICAgPGhlYWRlciBuZy1yZXBlYXQtc3RhcnQ9Iml0ZW0gaW4gaXRlbXMiPgogKiAgICAgSGVhZGVyIHt7IGl0ZW0gfX0KICogICA8L2hlYWRlcj4KICogICA8ZGl2IGNsYXNzPSJib2R5Ij4KICogICAgIEJvZHkge3sgaXRlbSB9fQogKiAgIDwvZGl2PgogKiAgIDxmb290ZXIgbmctcmVwZWF0LWVuZD4KICogICAgIEZvb3RlciB7eyBpdGVtIH19CiAqICAgPC9mb290ZXI+CiAqIGBgYAogKgogKiBBbmQgd2l0aCBhbiBpbnB1dCBvZiB7QHR5cGUgWydBJywnQiddfSBmb3IgdGhlIGl0ZW1zIHZhcmlhYmxlIGluIHRoZSBleGFtcGxlIGFib3ZlLCB0aGUgb3V0cHV0IHdpbGwgZXZhbHVhdGUgdG86CiAqIGBgYGh0bWwKICogICA8aGVhZGVyPgogKiAgICAgSGVhZGVyIEEKICogICA8L2hlYWRlcj4KICogICA8ZGl2IGNsYXNzPSJib2R5Ij4KICogICAgIEJvZHkgQQogKiAgIDwvZGl2PgogKiAgIDxmb290ZXI+CiAqICAgICBGb290ZXIgQQogKiAgIDwvZm9vdGVyPgogKiAgIDxoZWFkZXI+CiAqICAgICBIZWFkZXIgQgogKiAgIDwvaGVhZGVyPgogKiAgIDxkaXYgY2xhc3M9ImJvZHkiPgogKiAgICAgQm9keSBCCiAqICAgPC9kaXY+CiAqICAgPGZvb3Rlcj4KICogICAgIEZvb3RlciBCCiAqICAgPC9mb290ZXI+CiAqIGBgYAogKgogKiBUaGUgY3VzdG9tIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGZvciBuZ1JlcGVhdCBhbHNvIHN1cHBvcnQgYWxsIG90aGVyIEhUTUwgZGlyZWN0aXZlIHN5bnRheCBmbGF2b3JzIHByb3ZpZGVkIGluIEFuZ3VsYXJKUyAoc3VjaAogKiBhcyAqKmRhdGEtbmctcmVwZWF0LXN0YXJ0KiosICoqeC1uZy1yZXBlYXQtc3RhcnQqKiBhbmQgKipuZzpyZXBlYXQtc3RhcnQqKikuCiAqCiAqIEBhbmltYXRpb25zCiAqICoqLmVudGVyKiogLSB3aGVuIGEgbmV3IGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGxpc3Qgb3Igd2hlbiBhbiBpdGVtIGlzIHJldmVhbGVkIGFmdGVyIGEgZmlsdGVyCiAqCiAqICoqLmxlYXZlKiogLSB3aGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyBmaWx0ZXJlZCBvdXQKICoKICogKioubW92ZSoqIC0gd2hlbiBhbiBhZGphY2VudCBpdGVtIGlzIGZpbHRlcmVkIG91dCBjYXVzaW5nIGEgcmVvcmRlciBvciB3aGVuIHRoZSBpdGVtIGNvbnRlbnRzIGFyZSByZW9yZGVyZWQKICoKICogQGVsZW1lbnQgQU5ZCiAqIEBzY29wZQogKiBAcHJpb3JpdHkgMTAwMAogKiBAcGFyYW0ge3JlcGVhdF9leHByZXNzaW9ufSBuZ1JlcGVhdCBUaGUgZXhwcmVzc2lvbiBpbmRpY2F0aW5nIGhvdyB0byBlbnVtZXJhdGUgYSBjb2xsZWN0aW9uLiBUaGVzZQogKiAgIGZvcm1hdHMgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQ6CiAqCiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIHZhcmlhYmxlIGlzIHRoZSB1c2VyIGRlZmluZWQgbG9vcCB2YXJpYWJsZSBhbmQgYGV4cHJlc3Npb25gCiAqICAgICBpcyBhIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS4KICoKICogICAgIEZvciBleGFtcGxlOiBgYWxidW0gaW4gYXJ0aXN0LmFsYnVtc2AuCiAqCiAqICAgKiBgKGtleSwgdmFsdWUpIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSBga2V5YCBhbmQgYHZhbHVlYCBjYW4gYmUgYW55IHVzZXIgZGVmaW5lZCBpZGVudGlmaWVycywKICogICAgIGFuZCBgZXhwcmVzc2lvbmAgaXMgdGhlIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS4KICoKICogICAgIEZvciBleGFtcGxlOiBgKG5hbWUsIGFnZSkgaW4geydhZGFtJzoxMCwgJ2FtYWxpZSc6MTJ9YC4KICoKICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uIHRyYWNrIGJ5IHRyYWNraW5nX2V4cHJlc3Npb25gIOKAkyBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCB0cmFja2luZyBmdW5jdGlvbgogKiAgICAgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXNzb2NpYXRlIHRoZSBvYmplY3RzIGluIHRoZSBjb2xsZWN0aW9uIHdpdGggdGhlIERPTSBlbGVtZW50cy4gSWYgbm8gdHJhY2tpbmcgZnVuY3Rpb24KICogICAgIGlzIHNwZWNpZmllZCB0aGUgbmctcmVwZWF0IGFzc29jaWF0ZXMgZWxlbWVudHMgYnkgaWRlbnRpdHkgaW4gdGhlIGNvbGxlY3Rpb24uIEl0IGlzIGFuIGVycm9yIHRvIGhhdmUKICogICAgIG1vcmUgdGhhbiBvbmUgdHJhY2tpbmcgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0byB0aGUgc2FtZSBrZXkuIChUaGlzIHdvdWxkIG1lYW4gdGhhdCB0d28gZGlzdGluY3Qgb2JqZWN0cyBhcmUKICogICAgIG1hcHBlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudCwgd2hpY2ggaXMgbm90IHBvc3NpYmxlLikgIEZpbHRlcnMgc2hvdWxkIGJlIGFwcGxpZWQgdG8gdGhlIGV4cHJlc3Npb24sCiAqICAgICBiZWZvcmUgc3BlY2lmeWluZyBhIHRyYWNraW5nIGV4cHJlc3Npb24uCiAqCiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXNgIGlzIGVxdWl2YWxlbnQgdG8gYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgJGlkKGl0ZW0pYC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIERPTSBlbGVtZW50cwogKiAgICAgd2lsbCBiZSBhc3NvY2lhdGVkIGJ5IGl0ZW0gaWRlbnRpdHkgaW4gdGhlIGFycmF5LgogKgogKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIEEgYnVpbHQgaW4gYCRpZCgpYCBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBhc3NpZ24gYSB1bmlxdWUKICogICAgIGAkJGhhc2hLZXlgIHByb3BlcnR5IHRvIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkuIFRoaXMgcHJvcGVydHkgaXMgdGhlbiB1c2VkIGFzIGEga2V5IHRvIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnRzCiAqICAgICB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0gaW4gdGhlIGFycmF5IGJ5IGlkZW50aXR5LiBNb3ZpbmcgdGhlIHNhbWUgb2JqZWN0IGluIGFycmF5IHdvdWxkIG1vdmUgdGhlIERPTQogKiAgICAgZWxlbWVudCBpbiB0aGUgc2FtZSB3YXkgaW4gdGhlIERPTS4KICoKICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHR5cGljYWwgcGF0dGVybiB3aGVuIHRoZSBpdGVtcyBjb21lIGZyb20gdGhlIGRhdGFiYXNlLiBJbiB0aGlzCiAqICAgICBjYXNlIHRoZSBvYmplY3QgaWRlbnRpdHkgZG9lcyBub3QgbWF0dGVyLiBUd28gb2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGFzIGxvbmcgYXMgdGhlaXIgYGlkYAogKiAgICAgcHJvcGVydHkgaXMgc2FtZS4KICoKICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjpzZWFyY2hUZXh0IHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgcGF0dGVybiB0aGF0IG1pZ2h0IGJlIHVzZWQgdG8gYXBwbHkgYSBmaWx0ZXIKICogICAgIHRvIGl0ZW1zIGluIGNvbmp1bmN0aW9uIHdpdGggYSB0cmFja2luZyBleHByZXNzaW9uLgogKgogKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gYXMgYWxpYXNfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGFsaWFzIGV4cHJlc3Npb24gd2hpY2ggd2lsbCB0aGVuIHN0b3JlIHRoZQogKiAgICAgaW50ZXJtZWRpYXRlIHJlc3VsdHMgb2YgdGhlIHJlcGVhdGVyIGFmdGVyIHRoZSBmaWx0ZXJzIGhhdmUgYmVlbiBhcHBsaWVkLiBUeXBpY2FsbHkgdGhpcyBpcyB1c2VkIHRvIHJlbmRlciBhIHNwZWNpYWwgbWVzc2FnZQogKiAgICAgd2hlbiBhIGZpbHRlciBpcyBhY3RpdmUgb24gdGhlIHJlcGVhdGVyLCBidXQgdGhlIGZpbHRlcmVkIHJlc3VsdCBzZXQgaXMgZW1wdHkuCiAqCiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXI6eCBhcyByZXN1bHRzYCB3aWxsIHN0b3JlIHRoZSBmcmFnbWVudCBvZiB0aGUgcmVwZWF0ZWQgaXRlbXMgYXMgYHJlc3VsdHNgLCBidXQgb25seSBhZnRlcgogKiAgICAgdGhlIGl0ZW1zIGhhdmUgYmVlbiBwcm9jZXNzZWQgdGhyb3VnaCB0aGUgZmlsdGVyLgogKgogKiBAZXhhbXBsZQogKiBUaGlzIGV4YW1wbGUgaW5pdGlhbGl6ZXMgdGhlIHNjb3BlIHRvIGEgbGlzdCBvZiBuYW1lcyBhbmQKICogdGhlbiB1c2VzIGBuZ1JlcGVhdGAgdG8gZGlzcGxheSBldmVyeSBwZXJzb246CiAgPGV4YW1wbGUgbW9kdWxlPSJuZ0FuaW1hdGUiIGRlcHM9ImFuZ3VsYXItYW5pbWF0ZS5qcyIgYW5pbWF0aW9ucz0idHJ1ZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGRpdiBuZy1pbml0PSJmcmllbmRzID0gWwogICAgICAgIHtuYW1lOidKb2huJywgYWdlOjI1LCBnZW5kZXI6J2JveSd9LAogICAgICAgIHtuYW1lOidKZXNzaWUnLCBhZ2U6MzAsIGdlbmRlcjonZ2lybCd9LAogICAgICAgIHtuYW1lOidKb2hhbm5hJywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSwKICAgICAgICB7bmFtZTonSm95JywgYWdlOjE1LCBnZW5kZXI6J2dpcmwnfSwKICAgICAgICB7bmFtZTonTWFyeScsIGFnZToyOCwgZ2VuZGVyOidnaXJsJ30sCiAgICAgICAge25hbWU6J1BldGVyJywgYWdlOjk1LCBnZW5kZXI6J2JveSd9LAogICAgICAgIHtuYW1lOidTZWJhc3RpYW4nLCBhZ2U6NTAsIGdlbmRlcjonYm95J30sCiAgICAgICAge25hbWU6J0VyaWthJywgYWdlOjI3LCBnZW5kZXI6J2dpcmwnfSwKICAgICAgICB7bmFtZTonUGF0cmljaycsIGFnZTo0MCwgZ2VuZGVyOidib3knfSwKICAgICAgICB7bmFtZTonU2FtYW50aGEnLCBhZ2U6NjAsIGdlbmRlcjonZ2lybCd9CiAgICAgIF0iPgogICAgICAgIEkgaGF2ZSB7e2ZyaWVuZHMubGVuZ3RofX0gZnJpZW5kcy4gVGhleSBhcmU6CiAgICAgICAgPGlucHV0IHR5cGU9InNlYXJjaCIgbmctbW9kZWw9InEiIHBsYWNlaG9sZGVyPSJmaWx0ZXIgZnJpZW5kcy4uLiIgLz4KICAgICAgICA8dWwgY2xhc3M9ImV4YW1wbGUtYW5pbWF0ZS1jb250YWluZXIiPgogICAgICAgICAgPGxpIGNsYXNzPSJhbmltYXRlLXJlcGVhdCIgbmctcmVwZWF0PSJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpxIGFzIHJlc3VsdHMiPgogICAgICAgICAgICBbe3skaW5kZXggKyAxfX1dIHt7ZnJpZW5kLm5hbWV9fSB3aG8gaXMge3tmcmllbmQuYWdlfX0geWVhcnMgb2xkLgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iYW5pbWF0ZS1yZXBlYXQiIG5nLWlmPSJyZXN1bHRzLmxlbmd0aCA9PSAwIj4KICAgICAgICAgICAgPHN0cm9uZz5ObyByZXN1bHRzIGZvdW5kLi4uPC9zdHJvbmc+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGl2PgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iYW5pbWF0aW9ucy5jc3MiPgogICAgICAuZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lciB7CiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGxpc3Qtc3R5bGU6bm9uZTsKICAgICAgICBtYXJnaW46MDsKICAgICAgICBwYWRkaW5nOjAgMTBweDsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtcmVwZWF0IHsKICAgICAgICBsaW5lLWhlaWdodDo0MHB4OwogICAgICAgIGxpc3Qtc3R5bGU6bm9uZTsKICAgICAgICBib3gtc2l6aW5nOmJvcmRlci1ib3g7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlLAogICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIsCiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSB7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSwKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsCiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlciB7CiAgICAgICAgb3BhY2l0eTowOwogICAgICAgIG1heC1oZWlnaHQ6MDsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLAogICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZS5uZy1tb3ZlLWFjdGl2ZSwKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7CiAgICAgICAgb3BhY2l0eToxOwogICAgICAgIG1heC1oZWlnaHQ6NDBweDsKICAgICAgfQogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgIHZhciBmcmllbmRzID0gZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoJ2ZyaWVuZCBpbiBmcmllbmRzJykpOwoKICAgICAgaXQoJ3Nob3VsZCByZW5kZXIgaW5pdGlhbCBkYXRhIHNldCcsIGZ1bmN0aW9uKCkgewogICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApOwogICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgwKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxXSBKb2huIHdobyBpcyAyNSB5ZWFycyBvbGQuJyk7CiAgICAgICAgZXhwZWN0KGZyaWVuZHMuZ2V0KDEpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIEplc3NpZSB3aG8gaXMgMzAgeWVhcnMgb2xkLicpOwogICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxMF0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTsKICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdmcmllbmRzLmxlbmd0aCcpKS5nZXRUZXh0KCkpCiAgICAgICAgICAgIC50b01hdGNoKCJJIGhhdmUgMTAgZnJpZW5kcy4gVGhleSBhcmU6Iik7CiAgICAgIH0pOwoKICAgICAgIGl0KCdzaG91bGQgdXBkYXRlIHJlcGVhdGVyIHdoZW4gZmlsdGVyIHByZWRpY2F0ZSBjaGFuZ2VzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApOwoKICAgICAgICAgZWxlbWVudChieS5tb2RlbCgncScpKS5zZW5kS2V5cygnbWEnKTsKCiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMik7CiAgICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgwKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxXSBNYXJ5IHdobyBpcyAyOCB5ZWFycyBvbGQuJyk7CiAgICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1syXSBTYW1hbnRoYSB3aG8gaXMgNjAgeWVhcnMgb2xkLicpOwogICAgICAgfSk7CiAgICAgIDwvZmlsZT4KICAgIDwvZXhhbXBsZT4KICovCnZhciBuZ1JlcGVhdERpcmVjdGl2ZSA9IFsnJHBhcnNlJywgJyRhbmltYXRlJywgZnVuY3Rpb24oJHBhcnNlLCAkYW5pbWF0ZSkgewogIHZhciBOR19SRU1PVkVEID0gJyQkTkdfUkVNT1ZFRCc7CiAgdmFyIG5nUmVwZWF0TWluRXJyID0gbWluRXJyKCduZ1JlcGVhdCcpOwoKICB2YXIgdXBkYXRlU2NvcGUgPSBmdW5jdGlvbihzY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgYXJyYXlMZW5ndGgpIHsKICAgIC8vIFRPRE8ocGVyZik6IGdlbmVyYXRlIHNldHRlcnMgdG8gc2hhdmUgb2ZmIH40MG1zIG9yIDEtMS41JQogICAgc2NvcGVbdmFsdWVJZGVudGlmaWVyXSA9IHZhbHVlOwogICAgaWYgKGtleUlkZW50aWZpZXIpIHNjb3BlW2tleUlkZW50aWZpZXJdID0ga2V5OwogICAgc2NvcGUuJGluZGV4ID0gaW5kZXg7CiAgICBzY29wZS4kZmlyc3QgPSAoaW5kZXggPT09IDApOwogICAgc2NvcGUuJGxhc3QgPSAoaW5kZXggPT09IChhcnJheUxlbmd0aCAtIDEpKTsKICAgIHNjb3BlLiRtaWRkbGUgPSAhKHNjb3BlLiRmaXJzdCB8fCBzY29wZS4kbGFzdCk7CiAgICAvLyBqc2hpbnQgYml0d2lzZTogZmFsc2UKICAgIHNjb3BlLiRvZGQgPSAhKHNjb3BlLiRldmVuID0gKGluZGV4JjEpID09PSAwKTsKICAgIC8vIGpzaGludCBiaXR3aXNlOiB0cnVlCiAgfTsKCiAgdmFyIGdldEJsb2NrU3RhcnQgPSBmdW5jdGlvbihibG9jaykgewogICAgcmV0dXJuIGJsb2NrLmNsb25lWzBdOwogIH07CgogIHZhciBnZXRCbG9ja0VuZCA9IGZ1bmN0aW9uKGJsb2NrKSB7CiAgICByZXR1cm4gYmxvY2suY2xvbmVbYmxvY2suY2xvbmUubGVuZ3RoIC0gMV07CiAgfTsKCgogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgbXVsdGlFbGVtZW50OiB0cnVlLAogICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLAogICAgcHJpb3JpdHk6IDEwMDAsCiAgICB0ZXJtaW5hbDogdHJ1ZSwKICAgICQkdGxiOiB0cnVlLAogICAgY29tcGlsZTogZnVuY3Rpb24gbmdSZXBlYXRDb21waWxlKCRlbGVtZW50LCAkYXR0cikgewogICAgICB2YXIgZXhwcmVzc2lvbiA9ICRhdHRyLm5nUmVwZWF0OwogICAgICB2YXIgbmdSZXBlYXRFbmRDb21tZW50ID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIGVuZCBuZ1JlcGVhdDogJyArIGV4cHJlc3Npb24gKyAnICcpOwoKICAgICAgdmFyIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaCgvXlxzKihbXHNcU10rPylccytpblxzKyhbXHNcU10rPykoPzpccythc1xzKyhbXHNcU10rPykpPyg/OlxzK3RyYWNrXHMrYnlccysoW1xzXFNdKz8pKT9ccyokLyk7CgogICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2lleHAnLCAiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fWyB0cmFjayBieSBfaWRfXScgYnV0IGdvdCAnezB9Jy4iLAogICAgICAgICAgICBleHByZXNzaW9uKTsKICAgICAgfQoKICAgICAgdmFyIGxocyA9IG1hdGNoWzFdOwogICAgICB2YXIgcmhzID0gbWF0Y2hbMl07CiAgICAgIHZhciBhbGlhc0FzID0gbWF0Y2hbM107CiAgICAgIHZhciB0cmFja0J5RXhwID0gbWF0Y2hbNF07CgogICAgICBtYXRjaCA9IGxocy5tYXRjaCgvXig/OihbXCRcd10rKXxcKChbXCRcd10rKVxzKixccyooW1wkXHddKylcKSkkLyk7CgogICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2lpZGV4cCcsICInX2l0ZW1fJyBpbiAnX2l0ZW1fIGluIF9jb2xsZWN0aW9uXycgc2hvdWxkIGJlIGFuIGlkZW50aWZpZXIgb3IgJyhfa2V5XywgX3ZhbHVlXyknIGV4cHJlc3Npb24sIGJ1dCBnb3QgJ3swfScuIiwKICAgICAgICAgICAgbGhzKTsKICAgICAgfQogICAgICB2YXIgdmFsdWVJZGVudGlmaWVyID0gbWF0Y2hbM10gfHwgbWF0Y2hbMV07CiAgICAgIHZhciBrZXlJZGVudGlmaWVyID0gbWF0Y2hbMl07CgogICAgICBpZiAoYWxpYXNBcyAmJiAoIS9eWyRhLXpBLVpfXVskYS16QS1aMC05X10qJC8udGVzdChhbGlhc0FzKSB8fAogICAgICAgICAgL14obnVsbHx1bmRlZmluZWR8dGhpc3xcJGluZGV4fFwkZmlyc3R8XCRtaWRkbGV8XCRsYXN0fFwkZXZlbnxcJG9kZHxcJHBhcmVudCkkLy50ZXN0KGFsaWFzQXMpKSkgewogICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdiYWRpZGVudCcsICJhbGlhcyAnezB9JyBpcyBpbnZhbGlkIC0tLSBtdXN0IGJlIGEgdmFsaWQgSlMgaWRlbnRpZmllciB3aGljaCBpcyBub3QgYSByZXNlcnZlZCBuYW1lLiIsCiAgICAgICAgICBhbGlhc0FzKTsKICAgICAgfQoKICAgICAgdmFyIHRyYWNrQnlFeHBHZXR0ZXIsIHRyYWNrQnlJZEV4cEZuLCB0cmFja0J5SWRBcnJheUZuLCB0cmFja0J5SWRPYmpGbjsKICAgICAgdmFyIGhhc2hGbkxvY2FscyA9IHskaWQ6IGhhc2hLZXl9OwoKICAgICAgaWYgKHRyYWNrQnlFeHApIHsKICAgICAgICB0cmFja0J5RXhwR2V0dGVyID0gJHBhcnNlKHRyYWNrQnlFeHApOwogICAgICB9IGVsc2UgewogICAgICAgIHRyYWNrQnlJZEFycmF5Rm4gPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIGhhc2hLZXkodmFsdWUpOwogICAgICAgIH07CiAgICAgICAgdHJhY2tCeUlkT2JqRm4gPSBmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICByZXR1cm4ga2V5OwogICAgICAgIH07CiAgICAgIH0KCiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1JlcGVhdExpbmsoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7CgogICAgICAgIGlmICh0cmFja0J5RXhwR2V0dGVyKSB7CiAgICAgICAgICB0cmFja0J5SWRFeHBGbiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUsIGluZGV4KSB7CiAgICAgICAgICAgIC8vIGFzc2lnbiBrZXksIHZhbHVlLCBhbmQgJGluZGV4IHRvIHRoZSBsb2NhbHMgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIGluIGhhc2ggZnVuY3Rpb25zCiAgICAgICAgICAgIGlmIChrZXlJZGVudGlmaWVyKSBoYXNoRm5Mb2NhbHNba2V5SWRlbnRpZmllcl0gPSBrZXk7CiAgICAgICAgICAgIGhhc2hGbkxvY2Fsc1t2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7CiAgICAgICAgICAgIGhhc2hGbkxvY2Fscy4kaW5kZXggPSBpbmRleDsKICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnlFeHBHZXR0ZXIoJHNjb3BlLCBoYXNoRm5Mb2NhbHMpOwogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIC8vIFN0b3JlIGEgbGlzdCBvZiBlbGVtZW50cyBmcm9tIHByZXZpb3VzIHJ1bi4gVGhpcyBpcyBhIGhhc2ggd2hlcmUga2V5IGlzIHRoZSBpdGVtIGZyb20gdGhlCiAgICAgICAgLy8gaXRlcmF0b3IsIGFuZCB0aGUgdmFsdWUgaXMgb2JqZWN0cyB3aXRoIGZvbGxvd2luZyBwcm9wZXJ0aWVzLgogICAgICAgIC8vICAgLSBzY29wZTogYm91bmQgc2NvcGUKICAgICAgICAvLyAgIC0gZWxlbWVudDogcHJldmlvdXMgZWxlbWVudC4KICAgICAgICAvLyAgIC0gaW5kZXg6IHBvc2l0aW9uCiAgICAgICAgLy8KICAgICAgICAvLyBXZSBhcmUgdXNpbmcgbm8tcHJvdG8gb2JqZWN0IHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBndWFyZCBhZ2FpbnN0IGluaGVyaXRlZCBwcm9wcyB2aWEKICAgICAgICAvLyBoYXNPd25Qcm9wZXJ0eS4KICAgICAgICB2YXIgbGFzdEJsb2NrTWFwID0gY3JlYXRlTWFwKCk7CgogICAgICAgIC8vd2F0Y2ggcHJvcHMKICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihyaHMsIGZ1bmN0aW9uIG5nUmVwZWF0QWN0aW9uKGNvbGxlY3Rpb24pIHsKICAgICAgICAgIHZhciBpbmRleCwgbGVuZ3RoLAogICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9ICRlbGVtZW50WzBdLCAgICAgLy8gbm9kZSB0aGF0IGNsb25lZCBub2RlcyBzaG91bGQgYmUgaW5zZXJ0ZWQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemVkIHRvIHRoZSBjb21tZW50IG5vZGUgYW5jaG9yCiAgICAgICAgICAgICAgbmV4dE5vZGUsCiAgICAgICAgICAgICAgLy8gU2FtZSBhcyBsYXN0QmxvY2tNYXAgYnV0IGl0IGhhcyB0aGUgY3VycmVudCBzdGF0ZS4gSXQgd2lsbCBiZWNvbWUgdGhlCiAgICAgICAgICAgICAgLy8gbGFzdEJsb2NrTWFwIG9uIHRoZSBuZXh0IGl0ZXJhdGlvbi4KICAgICAgICAgICAgICBuZXh0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKSwKICAgICAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoLAogICAgICAgICAgICAgIGtleSwgdmFsdWUsIC8vIGtleS92YWx1ZSBvZiBpdGVyYXRpb24KICAgICAgICAgICAgICB0cmFja0J5SWQsCiAgICAgICAgICAgICAgdHJhY2tCeUlkRm4sCiAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMsCiAgICAgICAgICAgICAgYmxvY2ssICAgICAgIC8vIGxhc3Qgb2JqZWN0IGluZm9ybWF0aW9uIHtzY29wZSwgZWxlbWVudCwgaWR9CiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXIsCiAgICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZTsKCiAgICAgICAgICBpZiAoYWxpYXNBcykgewogICAgICAgICAgICAkc2NvcGVbYWxpYXNBc10gPSBjb2xsZWN0aW9uOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkgewogICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IGNvbGxlY3Rpb247CiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkQXJyYXlGbjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkT2JqRm47CiAgICAgICAgICAgIC8vIGlmIG9iamVjdCwgZXh0cmFjdCBrZXlzLCBzb3J0IHRoZW0gYW5kIHVzZSB0byBkZXRlcm1pbmUgb3JkZXIgb2YgaXRlcmF0aW9uIG92ZXIgb2JqIHByb3BzCiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gW107CiAgICAgICAgICAgIGZvciAodmFyIGl0ZW1LZXkgaW4gY29sbGVjdGlvbikgewogICAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uLmhhc093blByb3BlcnR5KGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9ICckJykgewogICAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMucHVzaChpdGVtS2V5KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29sbGVjdGlvbktleXMuc29ydCgpOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbGxlY3Rpb25MZW5ndGggPSBjb2xsZWN0aW9uS2V5cy5sZW5ndGg7CiAgICAgICAgICBuZXh0QmxvY2tPcmRlciA9IG5ldyBBcnJheShjb2xsZWN0aW9uTGVuZ3RoKTsKCiAgICAgICAgICAvLyBsb2NhdGUgZXhpc3RpbmcgaXRlbXMKICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbGxlY3Rpb25MZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdOwogICAgICAgICAgICB2YWx1ZSA9IGNvbGxlY3Rpb25ba2V5XTsKICAgICAgICAgICAgdHJhY2tCeUlkID0gdHJhY2tCeUlkRm4oa2V5LCB2YWx1ZSwgaW5kZXgpOwogICAgICAgICAgICBpZiAobGFzdEJsb2NrTWFwW3RyYWNrQnlJZF0pIHsKICAgICAgICAgICAgICAvLyBmb3VuZCBwcmV2aW91c2x5IHNlZW4gYmxvY2sKICAgICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFt0cmFja0J5SWRdOwogICAgICAgICAgICAgIGRlbGV0ZSBsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXTsKICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IGJsb2NrOwogICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IGJsb2NrOwogICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRCbG9ja01hcFt0cmFja0J5SWRdKSB7CiAgICAgICAgICAgICAgLy8gaWYgY29sbGlzaW9uIGRldGVjdGVkLiByZXN0b3JlIGxhc3RCbG9ja01hcCBhbmQgdGhyb3cgYW4gZXJyb3IKICAgICAgICAgICAgICBmb3JFYWNoKG5leHRCbG9ja09yZGVyLCBmdW5jdGlvbiAoYmxvY2spIHsKICAgICAgICAgICAgICAgIGlmIChibG9jayAmJiBibG9jay5zY29wZSkgbGFzdEJsb2NrTWFwW2Jsb2NrLmlkXSA9IGJsb2NrOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdkdXBlcycsCiAgICAgICAgICAgICAgICAgICJEdXBsaWNhdGVzIGluIGEgcmVwZWF0ZXIgYXJlIG5vdCBhbGxvd2VkLiBVc2UgJ3RyYWNrIGJ5JyBleHByZXNzaW9uIHRvIHNwZWNpZnkgdW5pcXVlIGtleXMuIFJlcGVhdGVyOiB7MH0sIER1cGxpY2F0ZSBrZXk6IHsxfSwgRHVwbGljYXRlIHZhbHVlOiB7Mn0iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCB0cmFja0J5SWQsIHRvSnNvbih2YWx1ZSkpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIG5ldyBuZXZlciBiZWZvcmUgc2VlbiBibG9jawogICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IHtpZDogdHJhY2tCeUlkLCBzY29wZTogdW5kZWZpbmVkLCBjbG9uZTogdW5kZWZpbmVkfTsKICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyByZW1vdmUgbGVmdG92ZXIgaXRlbXMKICAgICAgICAgIGZvciAodmFyIGJsb2NrS2V5IGluIGxhc3RCbG9ja01hcCkgewogICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFtibG9ja0tleV07CiAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmUgPSBnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKTsKICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoZWxlbWVudHNUb1JlbW92ZSk7CiAgICAgICAgICAgIGlmIChlbGVtZW50c1RvUmVtb3ZlWzBdLnBhcmVudE5vZGUpIHsKICAgICAgICAgICAgICAvLyBpZiB0aGUgZWxlbWVudCB3YXMgbm90IHJlbW92ZWQgeWV0IGJlY2F1c2Ugb2YgcGVuZGluZyBhbmltYXRpb24sIG1hcmsgaXQgYXMgZGVsZXRlZAogICAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIGlnbm9yZSBpdCBsYXRlcgogICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmVbaW5kZXhdW05HX1JFTU9WRURdID0gdHJ1ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYmxvY2suc2NvcGUuJGRlc3Ryb3koKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyB3ZSBhcmUgbm90IHVzaW5nIGZvckVhY2ggZm9yIHBlcmYgcmVhc29ucyAodHJ5aW5nIHRvIGF2b2lkICNjYWxsKQogICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29sbGVjdGlvbkxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICBrZXkgPSAoY29sbGVjdGlvbiA9PT0gY29sbGVjdGlvbktleXMpID8gaW5kZXggOiBjb2xsZWN0aW9uS2V5c1tpbmRleF07CiAgICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldOwogICAgICAgICAgICBibG9jayA9IG5leHRCbG9ja09yZGVyW2luZGV4XTsKCiAgICAgICAgICAgIGlmIChibG9jay5zY29wZSkgewogICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYWxyZWFkeSBzZWVuIHRoaXMgb2JqZWN0LCB0aGVuIHdlIG5lZWQgdG8gcmV1c2UgdGhlCiAgICAgICAgICAgICAgLy8gYXNzb2NpYXRlZCBzY29wZS9lbGVtZW50CgogICAgICAgICAgICAgIG5leHROb2RlID0gcHJldmlvdXNOb2RlOwoKICAgICAgICAgICAgICAvLyBza2lwIG5vZGVzIHRoYXQgYXJlIGFscmVhZHkgcGVuZGluZyByZW1vdmFsIHZpYSBsZWF2ZSBhbmltYXRpb24KICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nOwogICAgICAgICAgICAgIH0gd2hpbGUgKG5leHROb2RlICYmIG5leHROb2RlW05HX1JFTU9WRURdKTsKCiAgICAgICAgICAgICAgaWYgKGdldEJsb2NrU3RhcnQoYmxvY2spICE9IG5leHROb2RlKSB7CiAgICAgICAgICAgICAgICAvLyBleGlzdGluZyBpdGVtIHdoaWNoIGdvdCBtb3ZlZAogICAgICAgICAgICAgICAgJGFuaW1hdGUubW92ZShnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKSwgbnVsbCwganFMaXRlKHByZXZpb3VzTm9kZSkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBnZXRCbG9ja0VuZChibG9jayk7CiAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIG5ldyBpdGVtIHdoaWNoIHdlIGRvbid0IGtub3cgYWJvdXQKICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbiBuZ1JlcGVhdFRyYW5zY2x1ZGUoY2xvbmUsIHNjb3BlKSB7CiAgICAgICAgICAgICAgICBibG9jay5zY29wZSA9IHNjb3BlOwogICAgICAgICAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vY2xvbmUtdnMtY3JlYXRlY29tbWVudAogICAgICAgICAgICAgICAgdmFyIGVuZE5vZGUgPSBuZ1JlcGVhdEVuZENvbW1lbnQuY2xvbmVOb2RlKGZhbHNlKTsKICAgICAgICAgICAgICAgIGNsb25lW2Nsb25lLmxlbmd0aCsrXSA9IGVuZE5vZGU7CgogICAgICAgICAgICAgICAgLy8gVE9ETyhwZXJmKTogc3VwcG9ydCBuYWtlZCBwcmV2aW91c05vZGUgaW4gYGVudGVyYCB0byBhdm9pZCBjcmVhdGlvbiBvZiBqcUxpdGUgd3JhcHBlcj8KICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCBqcUxpdGUocHJldmlvdXNOb2RlKSk7CiAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBlbmROb2RlOwogICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy4KICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBqcWxpdGUgd3JhcHBlciBhcyBpdCBtaWdodCBiZSBjaGFuZ2VkIGxhdGVyCiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuCiAgICAgICAgICAgICAgICBibG9jay5jbG9uZSA9IGNsb25lOwogICAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW2Jsb2NrLmlkXSA9IGJsb2NrOwogICAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBsYXN0QmxvY2tNYXAgPSBuZXh0QmxvY2tNYXA7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfTsKfV07Cgp2YXIgTkdfSElERV9DTEFTUyA9ICduZy1oaWRlJzsKdmFyIE5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1MgPSAnbmctaGlkZS1hbmltYXRlJzsKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdTaG93CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nU2hvd2AgZGlyZWN0aXZlIHNob3dzIG9yIGhpZGVzIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnQgYmFzZWQgb24gdGhlIGV4cHJlc3Npb24KICogcHJvdmlkZWQgdG8gdGhlIGBuZ1Nob3dgIGF0dHJpYnV0ZS4gVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZwogKiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3Mgb250byB0aGUgZWxlbWVudC4gVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHByZWRlZmluZWQKICogaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuICFpbXBvcnRhbnQgZmxhZykuCiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLgogKgogKiBgYGBodG1sCiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+CiAqIDxkaXYgbmctc2hvdz0ibXlWYWx1ZSI+PC9kaXY+CiAqCiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPgogKiA8ZGl2IG5nLXNob3c9Im15VmFsdWUiIGNsYXNzPSJuZy1oaWRlIj48L2Rpdj4KICogYGBgCiAqCiAqIFdoZW4gdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgZmFsc3kgdmFsdWUgdGhlbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIGNsYXNzCiAqIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gdHJ1dGh5LCB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcmVtb3ZlZAogKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uCiAqCiAqICMjIFdoeSBpcyAhaW1wb3J0YW50IHVzZWQ/CiAqCiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSAhaW1wb3J0YW50IGlzIHVzZWQgZm9yIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgLm5nLWhpZGVgIHNlbGVjdG9yCiAqIGNhbiBiZSBlYXNpbHkgb3ZlcnJpZGRlbiBieSBoZWF2aWVyIHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHNvbWV0aGluZyBhcyBzaW1wbGUKICogYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXIgdmlzaWJsZS4KICogVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuCiAqCiAqIEJ5IHVzaW5nICFpbXBvcnRhbnQsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuIENTUyBzZWxlY3RvcgogKiBzcGVjaWZpY2l0eSAod2hlbiAhaW1wb3J0YW50IGlzbid0IHVzZWQgd2l0aCBhbnkgY29uZmxpY3Rpbmcgc3R5bGVzKS4gSWYgYSBkZXZlbG9wZXIgY2hvb3NlcyB0byBvdmVycmlkZSB0aGUKICogc3R5bGluZyB0byBjaGFuZ2UgaG93IHRvIGhpZGUgYW4gZWxlbWVudCB0aGVuIGl0IGlzIGp1c3QgYSBtYXR0ZXIgb2YgdXNpbmcgIWltcG9ydGFudCBpbiB0aGVpciBvd24gQ1NTIGNvZGUuCiAqCiAqICMjIyBPdmVycmlkaW5nIGAubmctaGlkZWAKICoKICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5Om5vbmUhaW1wb3J0YW50YC4gSWYgeW91IHdpc2ggdG8gY2hhbmdlCiAqIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggbmdTaG93L25nSGlkZSB0aGVuIHRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJlc3RhdGluZyB0aGUgc3R5bGVzIGZvciB0aGUgYC5uZy1oaWRlYAogKiBjbGFzcyBpbiBDU1M6CiAqCiAqIGBgYGNzcwogKiAubmctaGlkZSB7CiAqICAgLyYjNDI7IHRoaXMgaXMganVzdCBhbm90aGVyIGZvcm0gb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvCiAqICAgZGlzcGxheTpibG9jayFpbXBvcnRhbnQ7CiAqICAgcG9zaXRpb246YWJzb2x1dGU7CiAqICAgdG9wOi05OTk5cHg7CiAqICAgbGVmdDotOTk5OXB4OwogKiB9CiAqIGBgYAogKgogKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGluIENTUyBhbnl0aGluZyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGUgZGlzcGxheSBzdHlsZS4KICoKICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgbmdTaG93YAogKgogKiBBbmltYXRpb25zIGluIG5nU2hvdy9uZ0hpZGUgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZGlyZWN0aXZlIGV4cHJlc3Npb24KICogaXMgdHJ1ZSBhbmQgZmFsc2UuIFRoaXMgc3lzdGVtIHdvcmtzIGxpa2UgdGhlIGFuaW1hdGlvbiBzeXN0ZW0gcHJlc2VudCB3aXRoIG5nQ2xhc3MgZXhjZXB0IHRoYXQKICogeW91IG11c3QgYWxzbyBpbmNsdWRlIHRoZSAhaW1wb3J0YW50IGZsYWcgdG8gb3ZlcnJpZGUgdGhlIGRpc3BsYXkgcHJvcGVydHkKICogc28gdGhhdCB5b3UgY2FuIHBlcmZvcm0gYW4gYW5pbWF0aW9uIHdoZW4gdGhlIGVsZW1lbnQgaXMgaGlkZGVuIGR1cmluZyB0aGUgdGltZSBvZiB0aGUgYW5pbWF0aW9uLgogKgogKiBgYGBjc3MKICogLy8KICogLy9hIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2UKICogLy8KICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsKICogICAvJiM0MjsgdGhpcyBpcyByZXF1aXJlZCBhcyBvZiAxLjN4IHRvIHByb3Blcmx5CiAqICAgICAgYXBwbHkgYWxsIHN0eWxpbmcgaW4gYSBzaG93L2hpZGUgYW5pbWF0aW9uICYjNDI7LwogKiAgIHRyYW5zaXRpb246MHMgbGluZWFyIGFsbDsKICogfQogKgogKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC1hY3RpdmUsCiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7CiAqICAgLyYjNDI7IHRoZSB0cmFuc2l0aW9uIGlzIGRlZmluZWQgaW4gdGhlIGFjdGl2ZSBjbGFzcyAmIzQyOy8KICogICB0cmFuc2l0aW9uOjFzIGxpbmVhciBhbGw7CiAqIH0KICoKICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfQogKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfQogKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9CiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9CiAqIGBgYAogKgogKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLjAtYmV0YS4xMSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXkKICogcHJvcGVydHkgdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMtLW5nQW5pbWF0ZSB3aWxsIGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgYXV0b21hdGljYWxseSBmb3IgeW91LgogKgogKiBAYW5pbWF0aW9ucwogKiBhZGRDbGFzczogYC5uZy1oaWRlYCAtIGhhcHBlbnMgYWZ0ZXIgdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIGFuZCB0aGUganVzdCBiZWZvcmUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlCiAqIHJlbW92ZUNsYXNzOiBgLm5nLWhpZGVgIC0gaGFwcGVucyBhZnRlciB0aGUgYG5nU2hvd2AgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byBoaWRkZW4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTaG93IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHkKICogICAgIHRoZW4gdGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIHJlc3BlY3RpdmVseS4KICoKICogQGV4YW1wbGUKICA8ZXhhbXBsZSBtb2R1bGU9Im5nQW5pbWF0ZSIgZGVwcz0iYW5ndWxhci1hbmltYXRlLmpzIiBhbmltYXRpb25zPSJ0cnVlIj4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICBDbGljayBtZTogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iY2hlY2tlZCI+PGJyLz4KICAgICAgPGRpdj4KICAgICAgICBTaG93OgogICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1zaG93IiBuZy1zaG93PSJjaGVja2VkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy11cCI+PC9zcGFuPiBJIHNob3cgdXAgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuCiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2PgogICAgICAgIEhpZGU6CiAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3ciIG5nLWhpZGU9ImNoZWNrZWQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tdGh1bWJzLWRvd24iPjwvc3Bhbj4gSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9ImdseXBoaWNvbnMuY3NzIj4KICAgICAgQGltcG9ydCB1cmwoLy9uZXRkbmEuYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4wLjAvY3NzL2Jvb3RzdHJhcC1nbHlwaGljb25zLmNzcyk7CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJhbmltYXRpb25zLmNzcyI+CiAgICAgIC5hbmltYXRlLXNob3cgewogICAgICAgIGxpbmUtaGVpZ2h0OjIwcHg7CiAgICAgICAgb3BhY2l0eToxOwogICAgICAgIHBhZGRpbmc6MTBweDsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGJhY2tncm91bmQ6d2hpdGU7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLXNob3cubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlLAogICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtc2hvdy5uZy1oaWRlIHsKICAgICAgICBsaW5lLWhlaWdodDowOwogICAgICAgIG9wYWNpdHk6MDsKICAgICAgICBwYWRkaW5nOjAgMTBweDsKICAgICAgfQoKICAgICAgLmNoZWNrLWVsZW1lbnQgewogICAgICAgIHBhZGRpbmc6MTBweDsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGJhY2tncm91bmQ6d2hpdGU7CiAgICAgIH0KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICB2YXIgdGh1bWJzVXAgPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLXVwJykpOwogICAgICB2YXIgdGh1bWJzRG93biA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuLmdseXBoaWNvbi10aHVtYnMtZG93bicpKTsKCiAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc2hvdyAvIG5nLWhpZGUnLCBmdW5jdGlvbigpIHsKICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZUZhbHN5KCk7CiAgICAgICAgZXhwZWN0KHRodW1ic0Rvd24uaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpOwoKICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7CgogICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgZXhwZWN0KHRodW1ic0Rvd24uaXNEaXNwbGF5ZWQoKSkudG9CZUZhbHN5KCk7CiAgICAgIH0pOwogICAgPC9maWxlPgogIDwvZXhhbXBsZT4KICovCnZhciBuZ1Nob3dEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdBJywKICAgIG11bHRpRWxlbWVudDogdHJ1ZSwKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nU2hvdywgZnVuY3Rpb24gbmdTaG93V2F0Y2hBY3Rpb24odmFsdWUpewogICAgICAgIC8vIHdlJ3JlIGFkZGluZyBhIHRlbXBvcmFyeSwgYW5pbWF0aW9uLXNwZWNpZmljIGNsYXNzIGZvciBuZy1oaWRlIHNpbmNlIHRoaXMgd2F5CiAgICAgICAgLy8gd2UgY2FuIGNvbnRyb2wgd2hlbiB0aGUgZWxlbWVudCBpcyBhY3R1YWxseSBkaXNwbGF5ZWQgb24gc2NyZWVuIHdpdGhvdXQgaGF2aW5nCiAgICAgICAgLy8gdG8gaGF2ZSBhIGdsb2JhbC9ncmVlZHkgQ1NTIHNlbGVjdG9yIHRoYXQgYnJlYWtzIHdoZW4gb3RoZXIgYW5pbWF0aW9ucyBhcmUgcnVuLgogICAgICAgIC8vIFJlYWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkxMDMjaXNzdWVjb21tZW50LTU4MzM1ODQ1CiAgICAgICAgJGFuaW1hdGVbdmFsdWUgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oZWxlbWVudCwgTkdfSElERV9DTEFTUywgewogICAgICAgICAgdGVtcENsYXNzZXMgOiBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH07Cn1dOwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nSGlkZQogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0hpZGVgIGRpcmVjdGl2ZSBzaG93cyBvciBoaWRlcyB0aGUgZ2l2ZW4gSFRNTCBlbGVtZW50IGJhc2VkIG9uIHRoZSBleHByZXNzaW9uCiAqIHByb3ZpZGVkIHRvIHRoZSBgbmdIaWRlYCBhdHRyaWJ1dGUuIFRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiBieSByZW1vdmluZyBvciBhZGRpbmcKICogdGhlIGBuZy1oaWRlYCBDU1MgY2xhc3Mgb250byB0aGUgZWxlbWVudC4gVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHByZWRlZmluZWQKICogaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuICFpbXBvcnRhbnQgZmxhZykuCiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLgogKgogKiBgYGBodG1sCiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgaGlkZGVuKSAtLT4KICogPGRpdiBuZy1oaWRlPSJteVZhbHVlIiBjbGFzcz0ibmctaGlkZSI+PC9kaXY+CiAqCiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyB2aXNpYmxlKSAtLT4KICogPGRpdiBuZy1oaWRlPSJteVZhbHVlIj48L2Rpdj4KICogYGBgCiAqCiAqIFdoZW4gdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIHRoZW4gdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBjbGFzcwogKiBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgY2F1c2luZyBpdCB0byBiZWNvbWUgaGlkZGVuLiBXaGVuIGZhbHN5LCB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcmVtb3ZlZAogKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uCiAqCiAqICMjIFdoeSBpcyAhaW1wb3J0YW50IHVzZWQ/CiAqCiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSAhaW1wb3J0YW50IGlzIHVzZWQgZm9yIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgLm5nLWhpZGVgIHNlbGVjdG9yCiAqIGNhbiBiZSBlYXNpbHkgb3ZlcnJpZGRlbiBieSBoZWF2aWVyIHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHNvbWV0aGluZyBhcyBzaW1wbGUKICogYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXIgdmlzaWJsZS4KICogVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuCiAqCiAqIEJ5IHVzaW5nICFpbXBvcnRhbnQsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuIENTUyBzZWxlY3RvcgogKiBzcGVjaWZpY2l0eSAod2hlbiAhaW1wb3J0YW50IGlzbid0IHVzZWQgd2l0aCBhbnkgY29uZmxpY3Rpbmcgc3R5bGVzKS4gSWYgYSBkZXZlbG9wZXIgY2hvb3NlcyB0byBvdmVycmlkZSB0aGUKICogc3R5bGluZyB0byBjaGFuZ2UgaG93IHRvIGhpZGUgYW4gZWxlbWVudCB0aGVuIGl0IGlzIGp1c3QgYSBtYXR0ZXIgb2YgdXNpbmcgIWltcG9ydGFudCBpbiB0aGVpciBvd24gQ1NTIGNvZGUuCiAqCiAqICMjIyBPdmVycmlkaW5nIGAubmctaGlkZWAKICoKICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5Om5vbmUhaW1wb3J0YW50YC4gSWYgeW91IHdpc2ggdG8gY2hhbmdlCiAqIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggbmdTaG93L25nSGlkZSB0aGVuIHRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJlc3RhdGluZyB0aGUgc3R5bGVzIGZvciB0aGUgYC5uZy1oaWRlYAogKiBjbGFzcyBpbiBDU1M6CiAqCiAqIGBgYGNzcwogKiAubmctaGlkZSB7CiAqICAgLyYjNDI7IHRoaXMgaXMganVzdCBhbm90aGVyIGZvcm0gb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvCiAqICAgZGlzcGxheTpibG9jayFpbXBvcnRhbnQ7CiAqICAgcG9zaXRpb246YWJzb2x1dGU7CiAqICAgdG9wOi05OTk5cHg7CiAqICAgbGVmdDotOTk5OXB4OwogKiB9CiAqIGBgYAogKgogKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGluIENTUyBhbnl0aGluZyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGUgZGlzcGxheSBzdHlsZS4KICoKICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgbmdIaWRlYAogKgogKiBBbmltYXRpb25zIGluIG5nU2hvdy9uZ0hpZGUgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZGlyZWN0aXZlIGV4cHJlc3Npb24KICogaXMgdHJ1ZSBhbmQgZmFsc2UuIFRoaXMgc3lzdGVtIHdvcmtzIGxpa2UgdGhlIGFuaW1hdGlvbiBzeXN0ZW0gcHJlc2VudCB3aXRoIG5nQ2xhc3MsIGV4Y2VwdCB0aGF0IHRoZSBgLm5nLWhpZGVgCiAqIENTUyBjbGFzcyBpcyBhZGRlZCBhbmQgcmVtb3ZlZCBmb3IgeW91IGluc3RlYWQgb2YgeW91ciBvd24gQ1NTIGNsYXNzLgogKgogKiBgYGBjc3MKICogLy8KICogLy9hIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2UKICogLy8KICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsKICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDsKICogfQogKgogKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCB7IC4uLiB9CiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7IC4uLiB9CiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH0KICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHsgLi4uIH0KICogYGBgCiAqCiAqIEtlZXAgaW4gbWluZCB0aGF0LCBhcyBvZiBBbmd1bGFySlMgdmVyc2lvbiAxLjMuMC1iZXRhLjExLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNoYW5nZSB0aGUgZGlzcGxheQogKiBwcm9wZXJ0eSB0byBibG9jayBkdXJpbmcgYW5pbWF0aW9uIHN0YXRlcy0tbmdBbmltYXRlIHdpbGwgaGFuZGxlIHRoZSBzdHlsZSB0b2dnbGluZyBhdXRvbWF0aWNhbGx5IGZvciB5b3UuCiAqCiAqIEBhbmltYXRpb25zCiAqIHJlbW92ZUNsYXNzOiBgLm5nLWhpZGVgIC0gaGFwcGVucyBhZnRlciB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlbgogKiBhZGRDbGFzczogYC5uZy1oaWRlYCAtIGhhcHBlbnMgYWZ0ZXIgdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgbm9uIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gdmlzaWJsZQogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0hpZGUgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSB0aGVuCiAqICAgICB0aGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gcmVzcGVjdGl2ZWx5LgogKgogKiBAZXhhbXBsZQogIDxleGFtcGxlIG1vZHVsZT0ibmdBbmltYXRlIiBkZXBzPSJhbmd1bGFyLWFuaW1hdGUuanMiIGFuaW1hdGlvbnM9InRydWUiPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIj48YnIvPgogICAgICA8ZGl2PgogICAgICAgIFNob3c6CiAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2stZWxlbWVudCBhbmltYXRlLWhpZGUiIG5nLXNob3c9ImNoZWNrZWQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tdGh1bWJzLXVwIj48L3NwYW4+IEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXY+CiAgICAgICAgSGlkZToKICAgICAgICA8ZGl2IGNsYXNzPSJjaGVjay1lbGVtZW50IGFuaW1hdGUtaGlkZSIgbmctaGlkZT0iY2hlY2tlZCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtZG93biI+PC9zcGFuPiBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuCiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iZ2x5cGhpY29ucy5jc3MiPgogICAgICBAaW1wb3J0IHVybCgvL25ldGRuYS5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjAuMC9jc3MvYm9vdHN0cmFwLWdseXBoaWNvbnMuY3NzKTsKICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9ImFuaW1hdGlvbnMuY3NzIj4KICAgICAgLmFuaW1hdGUtaGlkZSB7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgICBsaW5lLWhlaWdodDoyMHB4OwogICAgICAgIG9wYWNpdHk6MTsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsKICAgICAgICBiYWNrZ3JvdW5kOndoaXRlOwogICAgICB9CgogICAgICAuYW5pbWF0ZS1oaWRlLm5nLWhpZGUgewogICAgICAgIGxpbmUtaGVpZ2h0OjA7CiAgICAgICAgb3BhY2l0eTowOwogICAgICAgIHBhZGRpbmc6MCAxMHB4OwogICAgICB9CgogICAgICAuY2hlY2stZWxlbWVudCB7CiAgICAgICAgcGFkZGluZzoxMHB4OwogICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7CiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTsKICAgICAgfQogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgIHZhciB0aHVtYnNVcCA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuLmdseXBoaWNvbi10aHVtYnMtdXAnKSk7CiAgICAgIHZhciB0aHVtYnNEb3duID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy1kb3duJykpOwoKICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zaG93IC8gbmctaGlkZScsIGZ1bmN0aW9uKCkgewogICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTsKICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7CgogICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTsKCiAgICAgICAgZXhwZWN0KHRodW1ic1VwLmlzRGlzcGxheWVkKCkpLnRvQmVUcnV0aHkoKTsKICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgPC9leGFtcGxlPgogKi8KdmFyIG5nSGlkZURpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgbXVsdGlFbGVtZW50OiB0cnVlLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdIaWRlLCBmdW5jdGlvbiBuZ0hpZGVXYXRjaEFjdGlvbih2YWx1ZSl7CiAgICAgICAgLy8gVGhlIGNvbW1lbnQgaW5zaWRlIG9mIHRoZSBuZ1Nob3dEaXJlY3RpdmUgZXhwbGFpbnMgd2h5IHdlIGFkZCBhbmQKICAgICAgICAvLyByZW1vdmUgYSB0ZW1wb3JhcnkgY2xhc3MgZm9yIHRoZSBzaG93L2hpZGUgYW5pbWF0aW9uCiAgICAgICAgJGFuaW1hdGVbdmFsdWUgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oZWxlbWVudCxOR19ISURFX0NMQVNTLCB7CiAgICAgICAgICB0ZW1wQ2xhc3NlcyA6IE5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1MKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfTsKfV07CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1N0eWxlCiAqIEByZXN0cmljdCBBQwogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ1N0eWxlYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzZXQgQ1NTIHN0eWxlIG9uIGFuIEhUTUwgZWxlbWVudCBjb25kaXRpb25hbGx5LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N0eWxlCiAqCiAqIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHdoaWNoIGV2YWxzIHRvIGFuCiAqIG9iamVjdCB3aG9zZSBrZXlzIGFyZSBDU1Mgc3R5bGUgbmFtZXMgYW5kIHZhbHVlcyBhcmUgY29ycmVzcG9uZGluZyB2YWx1ZXMgZm9yIHRob3NlIENTUwogKiBrZXlzLgogKgogKiBTaW5jZSBzb21lIENTUyBzdHlsZSBuYW1lcyBhcmUgbm90IHZhbGlkIGtleXMgZm9yIGFuIG9iamVjdCwgdGhleSBtdXN0IGJlIHF1b3RlZC4KICogU2VlIHRoZSAnYmFja2dyb3VuZC1jb2xvcicgc3R5bGUgaW4gdGhlIGV4YW1wbGUgYmVsb3cuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJzZXQgY29sb3IiIG5nLWNsaWNrPSJteVN0eWxlPXtjb2xvcjoncmVkJ30iPgogICAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJzZXQgYmFja2dyb3VuZCIgbmctY2xpY2s9Im15U3R5bGU9eydiYWNrZ3JvdW5kLWNvbG9yJzonYmx1ZSd9Ij4KICAgICAgICA8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0iY2xlYXIiIG5nLWNsaWNrPSJteVN0eWxlPXt9Ij4KICAgICAgICA8YnIvPgogICAgICAgIDxzcGFuIG5nLXN0eWxlPSJteVN0eWxlIj5TYW1wbGUgVGV4dDwvc3Bhbj4KICAgICAgICA8cHJlPm15U3R5bGU9e3tteVN0eWxlfX08L3ByZT4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgIHNwYW4gewogICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgdmFyIGNvbG9yU3BhbiA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuJykpOwoKICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3R5bGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGNvbG9yU3Bhbi5nZXRDc3NWYWx1ZSgnY29sb3InKSkudG9CZSgncmdiYSgwLCAwLCAwLCAxKScpOwogICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9XCdzZXQgY29sb3JcJ10nKSkuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGNvbG9yU3Bhbi5nZXRDc3NWYWx1ZSgnY29sb3InKSkudG9CZSgncmdiYSgyNTUsIDAsIDAsIDEpJyk7CiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1jbGVhcl0nKSkuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGNvbG9yU3Bhbi5nZXRDc3NWYWx1ZSgnY29sb3InKSkudG9CZSgncmdiYSgwLCAwLCAwLCAxKScpOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdTdHlsZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgc2NvcGUuJHdhdGNoKGF0dHIubmdTdHlsZSwgZnVuY3Rpb24gbmdTdHlsZVdhdGNoQWN0aW9uKG5ld1N0eWxlcywgb2xkU3R5bGVzKSB7CiAgICBpZiAob2xkU3R5bGVzICYmIChuZXdTdHlsZXMgIT09IG9sZFN0eWxlcykpIHsKICAgICAgZm9yRWFjaChvbGRTdHlsZXMsIGZ1bmN0aW9uKHZhbCwgc3R5bGUpIHsgZWxlbWVudC5jc3Moc3R5bGUsICcnKTt9KTsKICAgIH0KICAgIGlmIChuZXdTdHlsZXMpIGVsZW1lbnQuY3NzKG5ld1N0eWxlcyk7CiAgfSwgdHJ1ZSk7Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdTd2l0Y2gKICogQHJlc3RyaWN0IEVBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nU3dpdGNoYCBkaXJlY3RpdmUgaXMgdXNlZCB0byBjb25kaXRpb25hbGx5IHN3YXAgRE9NIHN0cnVjdHVyZSBvbiB5b3VyIHRlbXBsYXRlIGJhc2VkIG9uIGEgc2NvcGUgZXhwcmVzc2lvbi4KICogRWxlbWVudHMgd2l0aGluIGBuZ1N3aXRjaGAgYnV0IHdpdGhvdXQgYG5nU3dpdGNoV2hlbmAgb3IgYG5nU3dpdGNoRGVmYXVsdGAgZGlyZWN0aXZlcyB3aWxsIGJlIHByZXNlcnZlZCBhdCB0aGUgbG9jYXRpb24KICogYXMgc3BlY2lmaWVkIGluIHRoZSB0ZW1wbGF0ZS4KICoKICogVGhlIGRpcmVjdGl2ZSBpdHNlbGYgd29ya3Mgc2ltaWxhciB0byBuZ0luY2x1ZGUsIGhvd2V2ZXIsIGluc3RlYWQgb2YgZG93bmxvYWRpbmcgdGVtcGxhdGUgY29kZSAob3IgbG9hZGluZyBpdAogKiBmcm9tIHRoZSB0ZW1wbGF0ZSBjYWNoZSksIGBuZ1N3aXRjaGAgc2ltcGx5IGNob29zZXMgb25lIG9mIHRoZSBuZXN0ZWQgZWxlbWVudHMgYW5kIG1ha2VzIGl0IHZpc2libGUgYmFzZWQgb24gd2hpY2ggZWxlbWVudAogKiBtYXRjaGVzIHRoZSB2YWx1ZSBvYnRhaW5lZCBmcm9tIHRoZSBldmFsdWF0ZWQgZXhwcmVzc2lvbi4gSW4gb3RoZXIgd29yZHMsIHlvdSBkZWZpbmUgYSBjb250YWluZXIgZWxlbWVudAogKiAod2hlcmUgeW91IHBsYWNlIHRoZSBkaXJlY3RpdmUpLCBwbGFjZSBhbiBleHByZXNzaW9uIG9uIHRoZSAqKmBvbj0iLi4uImAgYXR0cmlidXRlKioKICogKG9yIHRoZSAqKmBuZy1zd2l0Y2g9Ii4uLiJgIGF0dHJpYnV0ZSoqKSwgZGVmaW5lIGFueSBpbm5lciBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGRpcmVjdGl2ZSBhbmQgcGxhY2UKICogYSB3aGVuIGF0dHJpYnV0ZSBwZXIgZWxlbWVudC4gVGhlIHdoZW4gYXR0cmlidXRlIGlzIHVzZWQgdG8gaW5mb3JtIG5nU3dpdGNoIHdoaWNoIGVsZW1lbnQgdG8gZGlzcGxheSB3aGVuIHRoZSBvbgogKiBleHByZXNzaW9uIGlzIGV2YWx1YXRlZC4gSWYgYSBtYXRjaGluZyBleHByZXNzaW9uIGlzIG5vdCBmb3VuZCB2aWEgYSB3aGVuIGF0dHJpYnV0ZSB0aGVuIGFuIGVsZW1lbnQgd2l0aCB0aGUgZGVmYXVsdAogKiBhdHRyaWJ1dGUgaXMgZGlzcGxheWVkLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1pbmZvIj4KICogQmUgYXdhcmUgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlcyB0byBtYXRjaCBhZ2FpbnN0IGNhbm5vdCBiZSBleHByZXNzaW9ucy4gVGhleSBhcmUgaW50ZXJwcmV0ZWQKICogYXMgbGl0ZXJhbCBzdHJpbmcgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QuCiAqIEZvciBleGFtcGxlLCAqKmBuZy1zd2l0Y2gtd2hlbj0ic29tZVZhbCJgKiogd2lsbCBtYXRjaCBhZ2FpbnN0IHRoZSBzdHJpbmcgYCJzb21lVmFsImAgbm90IGFnYWluc3QgdGhlCiAqIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIGAkc2NvcGUuc29tZVZhbGAuCiAqIDwvZGl2PgoKICogQGFuaW1hdGlvbnMKICogZW50ZXIgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIHRoZSBtYXRjaGVkIGNoaWxkIGVsZW1lbnQgaXMgcGxhY2VkIGluc2lkZSB0aGUgY29udGFpbmVyCiAqIGxlYXZlIC0gaGFwcGVucyBqdXN0IGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIGp1c3QgYmVmb3JlIHRoZSBmb3JtZXIgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NCiAqCiAqIEB1c2FnZQogKgogKiBgYGAKICogPEFOWSBuZy1zd2l0Y2g9ImV4cHJlc3Npb24iPgogKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49Im1hdGNoVmFsdWUxIj4uLi48L0FOWT4KICogICA8QU5ZIG5nLXN3aXRjaC13aGVuPSJtYXRjaFZhbHVlMiI+Li4uPC9BTlk+CiAqICAgPEFOWSBuZy1zd2l0Y2gtZGVmYXVsdD4uLi48L0FOWT4KICogPC9BTlk+CiAqIGBgYAogKgogKgogKiBAc2NvcGUKICogQHByaW9yaXR5IDEyMDAKICogQHBhcmFtIHsqfSBuZ1N3aXRjaHxvbiBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QgPHR0Pm5nLXN3aXRjaC13aGVuPC90dD4uCiAqIE9uIGNoaWxkIGVsZW1lbnRzIGFkZDoKICoKICogKiBgbmdTd2l0Y2hXaGVuYDogdGhlIGNhc2Ugc3RhdGVtZW50IHRvIG1hdGNoIGFnYWluc3QuIElmIG1hdGNoIHRoZW4gdGhpcwogKiAgIGNhc2Ugd2lsbCBiZSBkaXNwbGF5ZWQuIElmIHRoZSBzYW1lIG1hdGNoIGFwcGVhcnMgbXVsdGlwbGUgdGltZXMsIGFsbCB0aGUKICogICBlbGVtZW50cyB3aWxsIGJlIGRpc3BsYXllZC4KICogKiBgbmdTd2l0Y2hEZWZhdWx0YDogdGhlIGRlZmF1bHQgY2FzZSB3aGVuIG5vIG90aGVyIGNhc2UgbWF0Y2guIElmIHRoZXJlCiAqICAgYXJlIG11bHRpcGxlIGRlZmF1bHQgY2FzZXMsIGFsbCBvZiB0aGVtIHdpbGwgYmUgZGlzcGxheWVkIHdoZW4gbm8gb3RoZXIKICogICBjYXNlIG1hdGNoLgogKgogKgogKiBAZXhhbXBsZQogIDxleGFtcGxlIG1vZHVsZT0ic3dpdGNoRXhhbXBsZSIgZGVwcz0iYW5ndWxhci1hbmltYXRlLmpzIiBhbmltYXRpb25zPSJ0cnVlIj4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJzZWxlY3Rpb24iIG5nLW9wdGlvbnM9Iml0ZW0gZm9yIGl0ZW0gaW4gaXRlbXMiPgogICAgICAgIDwvc2VsZWN0PgogICAgICAgIDx0dD5zZWxlY3Rpb249e3tzZWxlY3Rpb259fTwvdHQ+CiAgICAgICAgPGhyLz4KICAgICAgICA8ZGl2IGNsYXNzPSJhbmltYXRlLXN3aXRjaC1jb250YWluZXIiCiAgICAgICAgICBuZy1zd2l0Y2ggb249InNlbGVjdGlvbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFuaW1hdGUtc3dpdGNoIiBuZy1zd2l0Y2gtd2hlbj0ic2V0dGluZ3MiPlNldHRpbmdzIERpdjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbmltYXRlLXN3aXRjaCIgbmctc3dpdGNoLXdoZW49ImhvbWUiPkhvbWUgU3BhbjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbmltYXRlLXN3aXRjaCIgbmctc3dpdGNoLWRlZmF1bHQ+ZGVmYXVsdDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgIGFuZ3VsYXIubW9kdWxlKCdzd2l0Y2hFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSkKICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgJHNjb3BlLml0ZW1zID0gWydzZXR0aW5ncycsICdob21lJywgJ290aGVyJ107CiAgICAgICAgICAkc2NvcGUuc2VsZWN0aW9uID0gJHNjb3BlLml0ZW1zWzBdOwogICAgICAgIH1dKTsKICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9ImFuaW1hdGlvbnMuY3NzIj4KICAgICAgLmFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lciB7CiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7CiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGhlaWdodDo0MHB4OwogICAgICAgIG92ZXJmbG93OmhpZGRlbjsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtc3dpdGNoIHsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1hbmltYXRlIHsKICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41czsKICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7CgogICAgICAgIHBvc2l0aW9uOmFic29sdXRlOwogICAgICAgIHRvcDowOwogICAgICAgIGxlZnQ6MDsKICAgICAgICByaWdodDowOwogICAgICAgIGJvdHRvbTowOwogICAgICB9CgogICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLAogICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIgewogICAgICAgIHRvcDotNTBweDsKICAgICAgfQogICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUsCiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUgewogICAgICAgIHRvcDowOwogICAgICB9CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgdmFyIHN3aXRjaEVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLXN3aXRjaF0nKSk7CiAgICAgIHZhciBzZWxlY3QgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWxlY3Rpb24nKSk7CgogICAgICBpdCgnc2hvdWxkIHN0YXJ0IGluIHNldHRpbmdzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9TZXR0aW5ncyBEaXYvKTsKICAgICAgfSk7CiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIGhvbWUnLCBmdW5jdGlvbigpIHsKICAgICAgICBzZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgxKS5jbGljaygpOwogICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvSG9tZSBTcGFuLyk7CiAgICAgIH0pOwogICAgICBpdCgnc2hvdWxkIHNlbGVjdCBkZWZhdWx0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMikuY2xpY2soKTsKICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL2RlZmF1bHQvKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgPC9leGFtcGxlPgogKi8KdmFyIG5nU3dpdGNoRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRUEnLAogICAgcmVxdWlyZTogJ25nU3dpdGNoJywKCiAgICAvLyBhc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGUKICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgZnVuY3Rpb24gbmdTd2l0Y2hDb250cm9sbGVyKCkgewogICAgIHRoaXMuY2FzZXMgPSB7fTsKICAgIH1dLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIG5nU3dpdGNoQ29udHJvbGxlcikgewogICAgICB2YXIgd2F0Y2hFeHByID0gYXR0ci5uZ1N3aXRjaCB8fCBhdHRyLm9uLAogICAgICAgICAgc2VsZWN0ZWRUcmFuc2NsdWRlcyA9IFtdLAogICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cyA9IFtdLAogICAgICAgICAgcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMgPSBbXSwKICAgICAgICAgIHNlbGVjdGVkU2NvcGVzID0gW107CgogICAgICB2YXIgc3BsaWNlRmFjdG9yeSA9IGZ1bmN0aW9uKGFycmF5LCBpbmRleCkgewogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyBhcnJheS5zcGxpY2UoaW5kZXgsIDEpOyB9OwogICAgICB9OwoKICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwciwgZnVuY3Rpb24gbmdTd2l0Y2hXYXRjaEFjdGlvbih2YWx1ZSkgewogICAgICAgIHZhciBpLCBpaTsKICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByZXZpb3VzTGVhdmVBbmltYXRpb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHsKICAgICAgICAgICRhbmltYXRlLmNhbmNlbChwcmV2aW91c0xlYXZlQW5pbWF0aW9uc1tpXSk7CiAgICAgICAgfQogICAgICAgIHByZXZpb3VzTGVhdmVBbmltYXRpb25zLmxlbmd0aCA9IDA7CgogICAgICAgIGZvciAoaSA9IDAsIGlpID0gc2VsZWN0ZWRTY29wZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkgewogICAgICAgICAgdmFyIHNlbGVjdGVkID0gZ2V0QmxvY2tOb2RlcyhzZWxlY3RlZEVsZW1lbnRzW2ldLmNsb25lKTsKICAgICAgICAgIHNlbGVjdGVkU2NvcGVzW2ldLiRkZXN0cm95KCk7CiAgICAgICAgICB2YXIgcHJvbWlzZSA9IHByZXZpb3VzTGVhdmVBbmltYXRpb25zW2ldID0gJGFuaW1hdGUubGVhdmUoc2VsZWN0ZWQpOwogICAgICAgICAgcHJvbWlzZS50aGVuKHNwbGljZUZhY3RvcnkocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMsIGkpKTsKICAgICAgICB9CgogICAgICAgIHNlbGVjdGVkRWxlbWVudHMubGVuZ3RoID0gMDsKICAgICAgICBzZWxlY3RlZFNjb3Blcy5sZW5ndGggPSAwOwoKICAgICAgICBpZiAoKHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJyEnICsgdmFsdWVdIHx8IG5nU3dpdGNoQ29udHJvbGxlci5jYXNlc1snPyddKSkgewogICAgICAgICAgZm9yRWFjaChzZWxlY3RlZFRyYW5zY2x1ZGVzLCBmdW5jdGlvbihzZWxlY3RlZFRyYW5zY2x1ZGUpIHsKICAgICAgICAgICAgc2VsZWN0ZWRUcmFuc2NsdWRlLnRyYW5zY2x1ZGUoZnVuY3Rpb24oY2FzZUVsZW1lbnQsIHNlbGVjdGVkU2NvcGUpIHsKICAgICAgICAgICAgICBzZWxlY3RlZFNjb3Blcy5wdXNoKHNlbGVjdGVkU2NvcGUpOwogICAgICAgICAgICAgIHZhciBhbmNob3IgPSBzZWxlY3RlZFRyYW5zY2x1ZGUuZWxlbWVudDsKICAgICAgICAgICAgICBjYXNlRWxlbWVudFtjYXNlRWxlbWVudC5sZW5ndGgrK10gPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgZW5kIG5nU3dpdGNoV2hlbjogJyk7CiAgICAgICAgICAgICAgdmFyIGJsb2NrID0geyBjbG9uZTogY2FzZUVsZW1lbnQgfTsKCiAgICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5wdXNoKGJsb2NrKTsKICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjYXNlRWxlbWVudCwgYW5jaG9yLnBhcmVudCgpLCBhbmNob3IpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfTsKfV07Cgp2YXIgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIHRyYW5zY2x1ZGU6ICdlbGVtZW50JywKICBwcmlvcml0eTogMTIwMCwKICByZXF1aXJlOiAnXm5nU3dpdGNoJywKICBtdWx0aUVsZW1lbnQ6IHRydWUsCiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsLCAkdHJhbnNjbHVkZSkgewogICAgY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dID0gKGN0cmwuY2FzZXNbJyEnICsgYXR0cnMubmdTd2l0Y2hXaGVuXSB8fCBbXSk7CiAgICBjdHJsLmNhc2VzWychJyArIGF0dHJzLm5nU3dpdGNoV2hlbl0ucHVzaCh7IHRyYW5zY2x1ZGU6ICR0cmFuc2NsdWRlLCBlbGVtZW50OiBlbGVtZW50IH0pOwogIH0KfSk7Cgp2YXIgbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIHRyYW5zY2x1ZGU6ICdlbGVtZW50JywKICBwcmlvcml0eTogMTIwMCwKICByZXF1aXJlOiAnXm5nU3dpdGNoJywKICBtdWx0aUVsZW1lbnQ6IHRydWUsCiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7CiAgICBjdHJsLmNhc2VzWyc/J10gPSAoY3RybC5jYXNlc1snPyddIHx8IFtdKTsKICAgIGN0cmwuY2FzZXNbJz8nXS5wdXNoKHsgdHJhbnNjbHVkZTogJHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7CiAgIH0KfSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1RyYW5zY2x1ZGUKICogQHJlc3RyaWN0IEVBQwogKgogKiBAZGVzY3JpcHRpb24KICogRGlyZWN0aXZlIHRoYXQgbWFya3MgdGhlIGluc2VydGlvbiBwb2ludCBmb3IgdGhlIHRyYW5zY2x1ZGVkIERPTSBvZiB0aGUgbmVhcmVzdCBwYXJlbnQgZGlyZWN0aXZlIHRoYXQgdXNlcyB0cmFuc2NsdXNpb24uCiAqCiAqIEFueSBleGlzdGluZyBjb250ZW50IG9mIHRoZSBlbGVtZW50IHRoYXQgdGhpcyBkaXJlY3RpdmUgaXMgcGxhY2VkIG9uIHdpbGwgYmUgcmVtb3ZlZCBiZWZvcmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgaW5zZXJ0ZWQuCiAqCiAqIEBlbGVtZW50IEFOWQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBtb2R1bGU9InRyYW5zY2x1ZGVFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0cmFuc2NsdWRlRXhhbXBsZScsIFtdKQogICAgICAgICAgLmRpcmVjdGl2ZSgncGFuZScsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLAogICAgICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLAogICAgICAgICAgICAgICBzY29wZTogeyB0aXRsZTonQCcgfSwKICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPSJib3JkZXI6IDFweCBzb2xpZCBibGFjazsiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogZ3JheSI+e3t0aXRsZX19PC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bmctdHJhbnNjbHVkZT48L25nLXRyYW5zY2x1ZGU+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JwogICAgICAgICAgICAgfTsKICAgICAgICAgfSkKICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUudGl0bGUgPSAnTG9yZW0gSXBzdW0nOwogICAgICAgICAgICRzY29wZS50ZXh0ID0gJ05lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCBxdWkgZG9sb3JlbSBpcHN1bSBxdWlhIGRvbG9yLi4uJzsKICAgICAgICAgfV0pOwogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgPGlucHV0IG5nLW1vZGVsPSJ0aXRsZSI+PGJyPgogICAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9InRleHQiPjwvdGV4dGFyZWE+IDxici8+CiAgICAgICAgIDxwYW5lIHRpdGxlPSJ7e3RpdGxlfX0iPnt7dGV4dH19PC9wYW5lPgogICAgICAgPC9kaXY+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgIGl0KCdzaG91bGQgaGF2ZSB0cmFuc2NsdWRlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIHRpdGxlRWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RpdGxlJykpOwogICAgICAgICAgdGl0bGVFbGVtZW50LmNsZWFyKCk7CiAgICAgICAgICB0aXRsZUVsZW1lbnQuc2VuZEtleXMoJ1RJVExFJyk7CiAgICAgICAgICB2YXIgdGV4dEVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpOwogICAgICAgICAgdGV4dEVsZW1lbnQuY2xlYXIoKTsKICAgICAgICAgIHRleHRFbGVtZW50LnNlbmRLZXlzKCdURVhUJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd0aXRsZScpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RJVExFJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd0ZXh0JykpLmdldFRleHQoKSkudG9FcXVhbCgnVEVYVCcpOwogICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKgogKi8KdmFyIG5nVHJhbnNjbHVkZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsKICByZXN0cmljdDogJ0VBQycsCiAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCBjb250cm9sbGVyLCAkdHJhbnNjbHVkZSkgewogICAgaWYgKCEkdHJhbnNjbHVkZSkgewogICAgICB0aHJvdyBtaW5FcnIoJ25nVHJhbnNjbHVkZScpKCdvcnBoYW4nLAogICAgICAgJ0lsbGVnYWwgdXNlIG9mIG5nVHJhbnNjbHVkZSBkaXJlY3RpdmUgaW4gdGhlIHRlbXBsYXRlISAnICsKICAgICAgICdObyBwYXJlbnQgZGlyZWN0aXZlIHRoYXQgcmVxdWlyZXMgYSB0cmFuc2NsdXNpb24gZm91bmQuICcgKwogICAgICAgJ0VsZW1lbnQ6IHswfScsCiAgICAgICBzdGFydGluZ1RhZygkZWxlbWVudCkpOwogICAgfQoKICAgICR0cmFuc2NsdWRlKGZ1bmN0aW9uKGNsb25lKSB7CiAgICAgICRlbGVtZW50LmVtcHR5KCk7CiAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7CiAgICB9KTsKICB9Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgc2NyaXB0CiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBMb2FkIHRoZSBjb250ZW50IG9mIGEgYDxzY3JpcHQ+YCBlbGVtZW50IGludG8ge0BsaW5rIG5nLiR0ZW1wbGF0ZUNhY2hlIGAkdGVtcGxhdGVDYWNoZWB9LCBzbyB0aGF0IHRoZQogKiB0ZW1wbGF0ZSBjYW4gYmUgdXNlZCBieSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0sCiAqIHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcgYG5nVmlld2B9LCBvciB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LiBUaGUgdHlwZSBvZiB0aGUKICogYDxzY3JpcHQ+YCBlbGVtZW50IG11c3QgYmUgc3BlY2lmaWVkIGFzIGB0ZXh0L25nLXRlbXBsYXRlYCwgYW5kIGEgY2FjaGUgbmFtZSBmb3IgdGhlIHRlbXBsYXRlIG11c3QgYmUKICogYXNzaWduZWQgdGhyb3VnaCB0aGUgZWxlbWVudCdzIGBpZGAsIHdoaWNoIGNhbiB0aGVuIGJlIHVzZWQgYXMgYSBkaXJlY3RpdmUncyBgdGVtcGxhdGVVcmxgLgogKgogKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBNdXN0IGJlIHNldCB0byBgJ3RleHQvbmctdGVtcGxhdGUnYC4KICogQHBhcmFtIHtzdHJpbmd9IGlkIENhY2hlIG5hbWUgb2YgdGhlIHRlbXBsYXRlLgogKgogKiBAZXhhbXBsZQogIDxleGFtcGxlPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9uZy10ZW1wbGF0ZSIgaWQ9Ii90cGwuaHRtbCI+CiAgICAgICAgQ29udGVudCBvZiB0aGUgdGVtcGxhdGUuCiAgICAgIDwvc2NyaXB0PgoKICAgICAgPGEgbmctY2xpY2s9ImN1cnJlbnRUcGw9Jy90cGwuaHRtbCciIGlkPSJ0cGwtbGluayI+TG9hZCBpbmxpbmVkIHRlbXBsYXRlPC9hPgogICAgICA8ZGl2IGlkPSJ0cGwtY29udGVudCIgbmctaW5jbHVkZSBzcmM9ImN1cnJlbnRUcGwiPjwvZGl2PgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZSBkZWZpbmVkIGluc2lkZSBzY3JpcHQgdGFnJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZWxlbWVudChieS5jc3MoJyN0cGwtbGluaycpKS5jbGljaygpOwogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI3RwbC1jb250ZW50JykpLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0aGUgdGVtcGxhdGUvKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgPC9leGFtcGxlPgogKi8KdmFyIHNjcmlwdERpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgdGVybWluYWw6IHRydWUsCiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICAgIGlmIChhdHRyLnR5cGUgPT0gJ3RleHQvbmctdGVtcGxhdGUnKSB7CiAgICAgICAgdmFyIHRlbXBsYXRlVXJsID0gYXR0ci5pZCwKICAgICAgICAgICAgLy8gSUUgaXMgbm90IGNvbnNpc3RlbnQsIGluIHNjcmlwdHMgd2UgaGF2ZSB0byByZWFkIC50ZXh0IGJ1dCBpbiBvdGhlciBub2RlcyB3ZSBoYXZlIHRvIHJlYWQgLnRleHRDb250ZW50CiAgICAgICAgICAgIHRleHQgPSBlbGVtZW50WzBdLnRleHQ7CgogICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0ZW1wbGF0ZVVybCwgdGV4dCk7CiAgICAgIH0KICAgIH0KICB9Owp9XTsKCnZhciBuZ09wdGlvbnNNaW5FcnIgPSBtaW5FcnIoJ25nT3B0aW9ucycpOwovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBzZWxlY3QKICogQHJlc3RyaWN0IEUKICoKICogQGRlc2NyaXB0aW9uCiAqIEhUTUwgYFNFTEVDVGAgZWxlbWVudCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLgogKgogKiAjIGBuZ09wdGlvbnNgCiAqCiAqIFRoZSBgbmdPcHRpb25zYCBhdHRyaWJ1dGUgY2FuIGJlIHVzZWQgdG8gZHluYW1pY2FsbHkgZ2VuZXJhdGUgYSBsaXN0IG9mIGA8b3B0aW9uPmAKICogZWxlbWVudHMgZm9yIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQgdXNpbmcgdGhlIGFycmF5IG9yIG9iamVjdCBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZQogKiBgbmdPcHRpb25zYCBjb21wcmVoZW5zaW9uX2V4cHJlc3Npb24uCiAqCiAqIFdoZW4gYW4gaXRlbSBpbiB0aGUgYDxzZWxlY3Q+YCBtZW51IGlzIHNlbGVjdGVkLCB0aGUgYXJyYXkgZWxlbWVudCBvciBvYmplY3QgcHJvcGVydHkKICogcmVwcmVzZW50ZWQgYnkgdGhlIHNlbGVjdGVkIG9wdGlvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGAKICogZGlyZWN0aXZlLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC13YXJuaW5nIj4KICogKipOb3RlOioqIGBuZ01vZGVsYCBjb21wYXJlcyBieSByZWZlcmVuY2UsIG5vdCB2YWx1ZS4gVGhpcyBpcyBpbXBvcnRhbnQgd2hlbiBiaW5kaW5nIHRvIGFuCiAqIGFycmF5IG9mIG9iamVjdHMuIFNlZSBhbiBleGFtcGxlIFtpbiB0aGlzIGpzZmlkZGxlXShodHRwOi8vanNmaWRkbGUubmV0L3FXelRiLykuCiAqIDwvZGl2PgogKgogKiBPcHRpb25hbGx5LCBhIHNpbmdsZSBoYXJkLWNvZGVkIGA8b3B0aW9uPmAgZWxlbWVudCwgd2l0aCB0aGUgdmFsdWUgc2V0IHRvIGFuIGVtcHR5IHN0cmluZywgY2FuCiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgIm5vdCBzZWxlY3RlZCIKICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi4KICoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAqICoqTm90ZToqKiBgbmdPcHRpb25zYCBwcm92aWRlcyBhbiBpdGVyYXRvciBmYWNpbGl0eSBmb3IgdGhlIGA8b3B0aW9uPmAgZWxlbWVudCB3aGljaCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkCiAqIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IHdoZW4geW91IHdhbnQgdGhlCiAqIGBzZWxlY3RgIG1vZGVsIHRvIGJlIGJvdW5kIHRvIGEgbm9uLXN0cmluZyB2YWx1ZS4gVGhpcyBpcyBiZWNhdXNlIGFuIG9wdGlvbiBlbGVtZW50IGNhbiBvbmx5CiAqIGJlIGJvdW5kIHRvIHN0cmluZyB2YWx1ZXMgYXQgcHJlc2VudC4KICogPC9kaXY+CiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LWluZm8iPgogKiAqKk5vdGU6KiogVXNpbmcgYHNlbGVjdCBhc2Agd2lsbCBiaW5kIHRoZSByZXN1bHQgb2YgdGhlIGBzZWxlY3QgYXNgIGV4cHJlc3Npb24gdG8gdGhlIG1vZGVsLCBidXQKICogdGhlIHZhbHVlIG9mIHRoZSBgPHNlbGVjdD5gIGFuZCBgPG9wdGlvbj5gIGh0bWwgZWxlbWVudHMgd2lsbCBiZSBlaXRoZXIgdGhlIGluZGV4IChmb3IgYXJyYXkgZGF0YSBzb3VyY2VzKQogKiBvciBwcm9wZXJ0eSBuYW1lIChmb3Igb2JqZWN0IGRhdGEgc291cmNlcykgb2YgdGhlIHZhbHVlIHdpdGhpbiB0aGUgY29sbGVjdGlvbi4KICogPC9kaXY+CiAqCiAqICoqTm90ZToqKiBVc2luZyBgc2VsZWN0IGFzYCB0b2dldGhlciB3aXRoIGB0cmFja2V4cHJgIGlzIG5vdCByZWNvbW1lbmRlZC4KICogUmVhc29uaW5nOgogKiAtIEV4YW1wbGU6ICZsdDtzZWxlY3Qgbmctb3B0aW9ucz0iaXRlbS5zdWJJdGVtIGFzIGl0ZW0ubGFiZWwgZm9yIGl0ZW0gaW4gdmFsdWVzIHRyYWNrIGJ5IGl0ZW0uaWQiIG5nLW1vZGVsPSJzZWxlY3RlZCImZ3Q7CiAqICAgdmFsdWVzOiBbe2lkOiAxLCBsYWJlbDogJ2FMYWJlbCcsIHN1Ykl0ZW06IHtuYW1lOiAnYVN1Ykl0ZW0nfX0sIHtpZDogMiwgbGFiZWw6ICdiTGFiZWwnLCBzdWJJdGVtOiB7bmFtZTogJ2JTdWJJdGVtJ319XSwKICogICAkc2NvcGUuc2VsZWN0ZWQgPSB7bmFtZTogJ2FTdWJJdGVtJ307CiAqIC0gdHJhY2sgYnkgaXMgYWx3YXlzIGFwcGxpZWQgdG8gYHZhbHVlYCwgd2l0aCB0aGUgcHVycG9zZSBvZiBwcmVzZXJ2aW5nIHRoZSBzZWxlY3Rpb24sCiAqICAgKHRvIGBpdGVtYCBpbiB0aGlzIGNhc2UpCiAqIC0gdG8gY2FsY3VsYXRlIHdoZXRoZXIgYW4gaXRlbSBpcyBzZWxlY3RlZCB3ZSBkbyB0aGUgZm9sbG93aW5nOgogKiAgIDEuIGFwcGx5IGB0cmFjayBieWAgdG8gdGhlIHZhbHVlcyBpbiB0aGUgYXJyYXksIGUuZy4KICogICAgICBJbiB0aGUgZXhhbXBsZTogWzEsMl0KICogICAyLiBhcHBseSBgdHJhY2sgYnlgIHRvIHRoZSBhbHJlYWR5IHNlbGVjdGVkIHZhbHVlIGluIGBuZ01vZGVsYDoKICogICAgICBJbiB0aGUgZXhhbXBsZTogdGhpcyBpcyBub3QgcG9zc2libGUsIGFzIGB0cmFjayBieWAgcmVmZXJzIHRvIGBpdGVtLmlkYCwgYnV0IHRoZSBzZWxlY3RlZAogKiAgICAgIHZhbHVlIGZyb20gYG5nTW9kZWxgIGlzIGB7bmFtZTogYVN1Ykl0ZW19YC4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgVGhlIGNvbnRyb2wgaXMgY29uc2lkZXJlZCB2YWxpZCBvbmx5IGlmIHZhbHVlIGlzIGVudGVyZWQuCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICogQHBhcmFtIHtjb21wcmVoZW5zaW9uX2V4cHJlc3Npb249fSBuZ09wdGlvbnMgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybXM6CiAqCiAqICAgKiBmb3IgYXJyYXkgZGF0YSBzb3VyY2VzOgogKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAKICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgCiAqICAgICAqIGBsYWJlbGAgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YAogKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYAogKiAgICogZm9yIG9iamVjdCBkYXRhIHNvdXJjZXM6CiAqICAgICAqIGBsYWJlbGAgKipgZm9yIChgKipga2V5YCAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgCiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yIChgKipga2V5YCAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgCiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YAogKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAKICogICAgICAgICAqKmBmb3JgIGAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgCiAqCiAqIFdoZXJlOgogKgogKiAgICogYGFycmF5YCAvIGBvYmplY3RgOiBhbiBleHByZXNzaW9uIHdoaWNoIGV2YWx1YXRlcyB0byBhbiBhcnJheSAvIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuCiAqICAgKiBgdmFsdWVgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGVhY2ggaXRlbSBpbiB0aGUgYGFycmF5YCBvciBlYWNoIHByb3BlcnR5IHZhbHVlCiAqICAgICAgb2YgYG9iamVjdGAgZHVyaW5nIGl0ZXJhdGlvbi4KICogICAqIGBrZXlgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGEgcHJvcGVydHkgbmFtZSBpbiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLgogKiAgICogYGxhYmVsYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB0aGUgbGFiZWwgZm9yIGA8b3B0aW9uPmAgZWxlbWVudC4gVGhlCiAqICAgICBgZXhwcmVzc2lvbmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGUgYHZhbHVlYCB2YXJpYWJsZSAoZS5nLiBgdmFsdWUucHJvcGVydHlOYW1lYCkuCiAqICAgKiBgc2VsZWN0YDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgb2YgdGhlIHBhcmVudCBgPHNlbGVjdD5gCiAqICAgICAgZWxlbWVudC4gSWYgbm90IHNwZWNpZmllZCwgYHNlbGVjdGAgZXhwcmVzc2lvbiB3aWxsIGRlZmF1bHQgdG8gYHZhbHVlYC4KICogICAqIGBncm91cGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdXNlZCB0byBncm91cCBvcHRpb25zIHVzaW5nIHRoZSBgPG9wdGdyb3VwPmAKICogICAgICBET00gZWxlbWVudC4KICogICAqIGB0cmFja2V4cHJgOiBVc2VkIHdoZW4gd29ya2luZyB3aXRoIGFuIGFycmF5IG9mIG9iamVjdHMuIFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUKICogICAgICB1c2VkIHRvIGlkZW50aWZ5IHRoZSBvYmplY3RzIGluIHRoZSBhcnJheS4gVGhlIGB0cmFja2V4cHJgIHdpbGwgbW9zdCBsaWtlbHkgcmVmZXIgdG8gdGhlCiAqICAgICBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS4gV2l0aCB0aGlzIHRoZSBzZWxlY3Rpb24gaXMgcHJlc2VydmVkCiAqICAgICAgZXZlbiB3aGVuIHRoZSBvcHRpb25zIGFyZSByZWNyZWF0ZWQgKGUuZy4gcmVsb2FkZWQgZnJvbSB0aGUgc2VydmVyKS4KICoKICogQGV4YW1wbGUKICAgIDxleGFtcGxlIG1vZHVsZT0ic2VsZWN0RXhhbXBsZSI+CiAgICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3NlbGVjdEV4YW1wbGUnLCBbXSkKICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICRzY29wZS5jb2xvcnMgPSBbCiAgICAgICAgICAgICAge25hbWU6J2JsYWNrJywgc2hhZGU6J2RhcmsnfSwKICAgICAgICAgICAgICB7bmFtZTond2hpdGUnLCBzaGFkZTonbGlnaHQnfSwKICAgICAgICAgICAgICB7bmFtZToncmVkJywgc2hhZGU6J2RhcmsnfSwKICAgICAgICAgICAgICB7bmFtZTonYmx1ZScsIHNoYWRlOidkYXJrJ30sCiAgICAgICAgICAgICAge25hbWU6J3llbGxvdycsIHNoYWRlOidsaWdodCd9CiAgICAgICAgICAgIF07CiAgICAgICAgICAgICRzY29wZS5teUNvbG9yID0gJHNjb3BlLmNvbG9yc1syXTsgLy8gcmVkCiAgICAgICAgICB9XSk7CiAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgICA8dWw+CiAgICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9ImNvbG9yIGluIGNvbG9ycyI+CiAgICAgICAgICAgICAgTmFtZTogPGlucHV0IG5nLW1vZGVsPSJjb2xvci5uYW1lIj4KICAgICAgICAgICAgICBbPGEgaHJlZiBuZy1jbGljaz0iY29sb3JzLnNwbGljZSgkaW5kZXgsIDEpIj5YPC9hPl0KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIFs8YSBocmVmIG5nLWNsaWNrPSJjb2xvcnMucHVzaCh7fSkiPmFkZDwvYT5dCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgICAgPGhyLz4KICAgICAgICAgIENvbG9yIChudWxsIG5vdCBhbGxvd2VkKToKICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9Im15Q29sb3IiIG5nLW9wdGlvbnM9ImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9ycyI+PC9zZWxlY3Q+PGJyPgoKICAgICAgICAgIENvbG9yIChudWxsIGFsbG93ZWQpOgogICAgICAgICAgPHNwYW4gIGNsYXNzPSJudWxsYWJsZSI+CiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9Im15Q29sb3IiIG5nLW9wdGlvbnM9ImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9ycyI+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj4tLSBjaG9vc2UgY29sb3IgLS08L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICA8L3NwYW4+PGJyLz4KCiAgICAgICAgICBDb2xvciBncm91cGVkIGJ5IHNoYWRlOgogICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0ibXlDb2xvciIgbmctb3B0aW9ucz0iY29sb3IubmFtZSBncm91cCBieSBjb2xvci5zaGFkZSBmb3IgY29sb3IgaW4gY29sb3JzIj4KICAgICAgICAgIDwvc2VsZWN0Pjxici8+CgoKICAgICAgICAgIFNlbGVjdCA8YSBocmVmIG5nLWNsaWNrPSJteUNvbG9yID0geyBuYW1lOidub3QgaW4gbGlzdCcsIHNoYWRlOiAnb3RoZXInIH0iPmJvZ3VzPC9hPi48YnI+CiAgICAgICAgICA8aHIvPgogICAgICAgICAgQ3VycmVudGx5IHNlbGVjdGVkOiB7eyB7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0gfX0KICAgICAgICAgIDxkaXYgc3R5bGU9ImJvcmRlcjpzb2xpZCAxcHggYmxhY2s7IGhlaWdodDoyMHB4IgogICAgICAgICAgICAgICBuZy1zdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzpteUNvbG9yLm5hbWV9Ij4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2ZpbGU+CiAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW9wdGlvbnMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdyZWQnKTsKICAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXlDb2xvcicpKS5maXJzdCgpLmNsaWNrKCk7CiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCdzZWxlY3RbbmctbW9kZWw9Im15Q29sb3IiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpOwogICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ2JsYWNrJyk7CiAgICAgICAgICAgZWxlbWVudChieS5jc3MoJy5udWxsYWJsZSBzZWxlY3RbbmctbW9kZWw9Im15Q29sb3IiXScpKS5jbGljaygpOwogICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LmNzcygnLm51bGxhYmxlIHNlbGVjdFtuZy1tb2RlbD0ibXlDb2xvciJdIG9wdGlvbicpKS5maXJzdCgpLmNsaWNrKCk7CiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygne3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9JykpLmdldFRleHQoKSkudG9NYXRjaCgnbnVsbCcpOwogICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKi8KCnZhciBuZ09wdGlvbnNEaXJlY3RpdmUgPSB2YWx1ZUZuKHsKICByZXN0cmljdDogJ0EnLAogIHRlcm1pbmFsOiB0cnVlCn0pOwoKLy8ganNoaW50IG1heGxlbjogZmFsc2UKdmFyIHNlbGVjdERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCAnJHBhcnNlJywgZnVuY3Rpb24oJGNvbXBpbGUsICAgJHBhcnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAvLzAwMDAxMTExMTExMTExMDAwMDAwMDAwMDAyMjIyMjIyMjIyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzMzMzMzMzMzMzAwMDAwMDAwMDAwMDAwNDQ0NDQ0NDQ0NDQ0NDQ0MDAwMDAwMDAwNTU1NTU1NTU1NTU1NTU1MDAwMDAwMDY2NjY2NjY2NjY2NjY2NjAwMDAwMDAwMDAwMDAwMDc3Nzc3Nzc3NzcwMDAwMDAwMDAwMDAwMDAwMDAwODg4ODg4ODg4OAogIHZhciBOR19PUFRJT05TX1JFR0VYUCA9IC9eXHMqKFtcc1xTXSs/KSg/OlxzK2FzXHMrKFtcc1xTXSs/KSk/KD86XHMrZ3JvdXBccytieVxzKyhbXHNcU10rPykpP1xzK2ZvclxzKyg/OihbXCRcd11bXCRcd10qKXwoPzpcKFxzKihbXCRcd11bXCRcd10qKVxzKixccyooW1wkXHddW1wkXHddKilccypcKSkpXHMraW5ccysoW1xzXFNdKz8pKD86XHMrdHJhY2tccytieVxzKyhbXHNcU10rPykpPyQvLAogICAgICBudWxsTW9kZWxDdHJsID0geyRzZXRWaWV3VmFsdWU6IG5vb3B9OwovLyBqc2hpbnQgbWF4bGVuOiAxMDAKCiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRScsCiAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICc/bmdNb2RlbCddLAogICAgY29udHJvbGxlcjogWyckZWxlbWVudCcsICckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24oJGVsZW1lbnQsICRzY29wZSwgJGF0dHJzKSB7CiAgICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICAgIG9wdGlvbnNNYXAgPSB7fSwKICAgICAgICAgIG5nTW9kZWxDdHJsID0gbnVsbE1vZGVsQ3RybCwKICAgICAgICAgIG51bGxPcHRpb24sCiAgICAgICAgICB1bmtub3duT3B0aW9uOwoKCiAgICAgIHNlbGYuZGF0YWJvdW5kID0gJGF0dHJzLm5nTW9kZWw7CgoKICAgICAgc2VsZi5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfLCBudWxsT3B0aW9uXywgdW5rbm93bk9wdGlvbl8pIHsKICAgICAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsXzsKICAgICAgICBudWxsT3B0aW9uID0gbnVsbE9wdGlvbl87CiAgICAgICAgdW5rbm93bk9wdGlvbiA9IHVua25vd25PcHRpb25fOwogICAgICB9OwoKCiAgICAgIHNlbGYuYWRkT3B0aW9uID0gZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHsKICAgICAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgJyJvcHRpb24gdmFsdWUiJyk7CiAgICAgICAgb3B0aW9uc01hcFt2YWx1ZV0gPSB0cnVlOwoKICAgICAgICBpZiAobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA9PSB2YWx1ZSkgewogICAgICAgICAgJGVsZW1lbnQudmFsKHZhbHVlKTsKICAgICAgICAgIGlmICh1bmtub3duT3B0aW9uLnBhcmVudCgpKSB1bmtub3duT3B0aW9uLnJlbW92ZSgpOwogICAgICAgIH0KICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzgxNDU5CiAgICAgICAgLy8gQWRkaW5nIGFuIDxvcHRpb24gc2VsZWN0ZWQ9InNlbGVjdGVkIj4gZWxlbWVudCB0byBhIDxzZWxlY3QgcmVxdWlyZWQ9InJlcXVpcmVkIj4gc2hvdWxkCiAgICAgICAgLy8gYXV0b21hdGljYWxseSBzZWxlY3QgdGhlIG5ldyBlbGVtZW50CiAgICAgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudFswXS5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpIHsKICAgICAgICAgIGVsZW1lbnRbMF0uc2VsZWN0ZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgfTsKCgogICAgICBzZWxmLnJlbW92ZU9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKHRoaXMuaGFzT3B0aW9uKHZhbHVlKSkgewogICAgICAgICAgZGVsZXRlIG9wdGlvbnNNYXBbdmFsdWVdOwogICAgICAgICAgaWYgKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPT0gdmFsdWUpIHsKICAgICAgICAgICAgdGhpcy5yZW5kZXJVbmtub3duT3B0aW9uKHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CgoKICAgICAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uID0gZnVuY3Rpb24odmFsKSB7CiAgICAgICAgdmFyIHVua25vd25WYWwgPSAnPyAnICsgaGFzaEtleSh2YWwpICsgJyA/JzsKICAgICAgICB1bmtub3duT3B0aW9uLnZhbCh1bmtub3duVmFsKTsKICAgICAgICAkZWxlbWVudC5wcmVwZW5kKHVua25vd25PcHRpb24pOwogICAgICAgICRlbGVtZW50LnZhbCh1bmtub3duVmFsKTsKICAgICAgICB1bmtub3duT3B0aW9uLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7IC8vIG5lZWRlZCBmb3IgSUUKICAgICAgfTsKCgogICAgICBzZWxmLmhhc09wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIG9wdGlvbnNNYXAuaGFzT3duUHJvcGVydHkodmFsdWUpOwogICAgICB9OwoKICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAvLyBkaXNhYmxlIHVua25vd24gb3B0aW9uIHNvIHRoYXQgd2UgZG9uJ3QgZG8gd29yayB3aGVuIHRoZSB3aG9sZSBzZWxlY3QgaXMgYmVpbmcgZGVzdHJveWVkCiAgICAgICAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uID0gbm9vcDsKICAgICAgfSk7CiAgICB9XSwKCiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHsKICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZwogICAgICBpZiAoIWN0cmxzWzFdKSByZXR1cm47CgogICAgICB2YXIgc2VsZWN0Q3RybCA9IGN0cmxzWzBdLAogICAgICAgICAgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXSwKICAgICAgICAgIG11bHRpcGxlID0gYXR0ci5tdWx0aXBsZSwKICAgICAgICAgIG9wdGlvbnNFeHAgPSBhdHRyLm5nT3B0aW9ucywKICAgICAgICAgIG51bGxPcHRpb24gPSBmYWxzZSwgLy8gaWYgZmFsc2UsIHVzZXIgd2lsbCBub3QgYmUgYWJsZSB0byBzZWxlY3QgaXQgKHVzZWQgYnkgbmdPcHRpb25zKQogICAgICAgICAgZW1wdHlPcHRpb24sCiAgICAgICAgICByZW5kZXJTY2hlZHVsZWQgPSBmYWxzZSwKICAgICAgICAgIC8vIHdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoCiAgICAgICAgICAvLyB0byBjcmVhdGUgaXQgaW4gPHNlbGVjdD4gYW5kIElFIGJhcmZzIG90aGVyd2lzZS4KICAgICAgICAgIG9wdGlvblRlbXBsYXRlID0ganFMaXRlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKSwKICAgICAgICAgIG9wdEdyb3VwVGVtcGxhdGUgPWpxTGl0ZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRncm91cCcpKSwKICAgICAgICAgIHVua25vd25PcHRpb24gPSBvcHRpb25UZW1wbGF0ZS5jbG9uZSgpOwoKICAgICAgLy8gZmluZCAibnVsbCIgb3B0aW9uCiAgICAgIGZvcih2YXIgaSA9IDAsIGNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbigpLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBpZiAoY2hpbGRyZW5baV0udmFsdWUgPT09ICcnKSB7CiAgICAgICAgICBlbXB0eU9wdGlvbiA9IG51bGxPcHRpb24gPSBjaGlsZHJlbi5lcShpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQoKICAgICAgc2VsZWN0Q3RybC5pbml0KG5nTW9kZWxDdHJsLCBudWxsT3B0aW9uLCB1bmtub3duT3B0aW9uKTsKCiAgICAgIC8vIHJlcXVpcmVkIHZhbGlkYXRvcgogICAgICBpZiAobXVsdGlwbGUpIHsKICAgICAgICBuZ01vZGVsQ3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMDsKICAgICAgICB9OwogICAgICB9CgogICAgICBpZiAob3B0aW9uc0V4cCkgc2V0dXBBc09wdGlvbnMoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsKTsKICAgICAgZWxzZSBpZiAobXVsdGlwbGUpIHNldHVwQXNNdWx0aXBsZShzY29wZSwgZWxlbWVudCwgbmdNb2RlbEN0cmwpOwogICAgICBlbHNlIHNldHVwQXNTaW5nbGUoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKTsKCgogICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgoKCiAgICAgIGZ1bmN0aW9uIHNldHVwQXNTaW5nbGUoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKSB7CiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIHZpZXdWYWx1ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7CgogICAgICAgICAgaWYgKHNlbGVjdEN0cmwuaGFzT3B0aW9uKHZpZXdWYWx1ZSkpIHsKICAgICAgICAgICAgaWYgKHVua25vd25PcHRpb24ucGFyZW50KCkpIHVua25vd25PcHRpb24ucmVtb3ZlKCk7CiAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQudmFsKHZpZXdWYWx1ZSk7CiAgICAgICAgICAgIGlmICh2aWV3VmFsdWUgPT09ICcnKSBlbXB0eU9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyB0byBtYWtlIElFOSBoYXBweQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZpZXdWYWx1ZSkgJiYgZW1wdHlPcHRpb24pIHsKICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LnZhbCgnJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW5kZXJVbmtub3duT3B0aW9uKHZpZXdWYWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBzZWxlY3RFbGVtZW50Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKHVua25vd25PcHRpb24ucGFyZW50KCkpIHVua25vd25PcHRpb24ucmVtb3ZlKCk7CiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoc2VsZWN0RWxlbWVudC52YWwoKSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gc2V0dXBBc011bHRpcGxlKHNjb3BlLCBzZWxlY3RFbGVtZW50LCBjdHJsKSB7CiAgICAgICAgdmFyIGxhc3RWaWV3OwogICAgICAgIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGl0ZW1zID0gbmV3IEhhc2hNYXAoY3RybC4kdmlld1ZhbHVlKTsKICAgICAgICAgIGZvckVhY2goc2VsZWN0RWxlbWVudC5maW5kKCdvcHRpb24nKSwgZnVuY3Rpb24ob3B0aW9uKSB7CiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGlzRGVmaW5lZChpdGVtcy5nZXQob3B0aW9uLnZhbHVlKSk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICAvLyB3ZSBoYXZlIHRvIGRvIGl0IG9uIGVhY2ggd2F0Y2ggc2luY2UgbmdNb2RlbCB3YXRjaGVzIHJlZmVyZW5jZSwgYnV0CiAgICAgICAgLy8gd2UgbmVlZCB0byB3b3JrIG9mIGFuIGFycmF5LCBzbyB3ZSBuZWVkIHRvIHNlZSBpZiBhbnl0aGluZyB3YXMgaW5zZXJ0ZWQvcmVtb3ZlZAogICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBzZWxlY3RNdWx0aXBsZVdhdGNoKCkgewogICAgICAgICAgaWYgKCFlcXVhbHMobGFzdFZpZXcsIGN0cmwuJHZpZXdWYWx1ZSkpIHsKICAgICAgICAgICAgbGFzdFZpZXcgPSBzaGFsbG93Q29weShjdHJsLiR2aWV3VmFsdWUpOwogICAgICAgICAgICBjdHJsLiRyZW5kZXIoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgc2VsZWN0RWxlbWVudC5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBhcnJheSA9IFtdOwogICAgICAgICAgICBmb3JFYWNoKHNlbGVjdEVsZW1lbnQuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uKG9wdGlvbikgewogICAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgIGFycmF5LnB1c2gob3B0aW9uLnZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoYXJyYXkpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHNldHVwQXNPcHRpb25zKHNjb3BlLCBzZWxlY3RFbGVtZW50LCBjdHJsKSB7CiAgICAgICAgdmFyIG1hdGNoOwoKICAgICAgICBpZiAoIShtYXRjaCA9IG9wdGlvbnNFeHAubWF0Y2goTkdfT1BUSU9OU19SRUdFWFApKSkgewogICAgICAgICAgdGhyb3cgbmdPcHRpb25zTWluRXJyKCdpZXhwJywKICAgICAgICAgICAgIkV4cGVjdGVkIGV4cHJlc3Npb24gaW4gZm9ybSBvZiAiICsKICAgICAgICAgICAgIidfc2VsZWN0XyAoYXMgX2xhYmVsXyk/IGZvciAoX2tleV8sKT9fdmFsdWVfIGluIF9jb2xsZWN0aW9uXyciICsKICAgICAgICAgICAgIiBidXQgZ290ICd7MH0nLiBFbGVtZW50OiB7MX0iLAogICAgICAgICAgICBvcHRpb25zRXhwLCBzdGFydGluZ1RhZyhzZWxlY3RFbGVtZW50KSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgZGlzcGxheUZuID0gJHBhcnNlKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSwKICAgICAgICAgICAgdmFsdWVOYW1lID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNl0sCiAgICAgICAgICAgIHNlbGVjdEFzID0gLyBhcyAvLnRlc3QobWF0Y2hbMF0pICYmIG1hdGNoWzFdLAogICAgICAgICAgICBzZWxlY3RBc0ZuID0gc2VsZWN0QXMgPyAkcGFyc2Uoc2VsZWN0QXMpIDogbnVsbCwKICAgICAgICAgICAga2V5TmFtZSA9IG1hdGNoWzVdLAogICAgICAgICAgICBncm91cEJ5Rm4gPSAkcGFyc2UobWF0Y2hbM10gfHwgJycpLAogICAgICAgICAgICB2YWx1ZUZuID0gJHBhcnNlKG1hdGNoWzJdID8gbWF0Y2hbMV0gOiB2YWx1ZU5hbWUpLAogICAgICAgICAgICB2YWx1ZXNGbiA9ICRwYXJzZShtYXRjaFs3XSksCiAgICAgICAgICAgIHRyYWNrID0gbWF0Y2hbOF0sCiAgICAgICAgICAgIHRyYWNrRm4gPSB0cmFjayA/ICRwYXJzZShtYXRjaFs4XSkgOiBudWxsLAogICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFycmF5IG9mIGFycmF5IG9mIGV4aXN0aW5nIG9wdGlvbiBncm91cHMgaW4gRE9NLgogICAgICAgICAgICAvLyBXZSB0cnkgdG8gcmV1c2UgdGhlc2UgaWYgcG9zc2libGUKICAgICAgICAgICAgLy8gLSBvcHRpb25Hcm91cHNDYWNoZVswXSBpcyB0aGUgb3B0aW9ucyB3aXRoIG5vIG9wdGlvbiBncm91cAogICAgICAgICAgICAvLyAtIG9wdGlvbkdyb3Vwc0NhY2hlWz9dWzBdIGlzIHRoZSBwYXJlbnQ6IGVpdGhlciB0aGUgU0VMRUNUIG9yIE9QVEdST1VQIGVsZW1lbnQKICAgICAgICAgICAgb3B0aW9uR3JvdXBzQ2FjaGUgPSBbW3tlbGVtZW50OiBzZWxlY3RFbGVtZW50LCBsYWJlbDonJ31dXSwKICAgICAgICAgICAgLy9yZS11c2FibGUgb2JqZWN0IHRvIHJlcHJlc2VudCBvcHRpb24ncyBsb2NhbHMKICAgICAgICAgICAgbG9jYWxzID0ge307CgogICAgICAgIGlmIChudWxsT3B0aW9uKSB7CiAgICAgICAgICAvLyBjb21waWxlIHRoZSBlbGVtZW50IHNpbmNlIHRoZXJlIG1pZ2h0IGJlIGJpbmRpbmdzIGluIGl0CiAgICAgICAgICAkY29tcGlsZShudWxsT3B0aW9uKShzY29wZSk7CgogICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjbGFzcywgd2hpY2ggaXMgYWRkZWQgYXV0b21hdGljYWxseSBiZWNhdXNlIHdlIHJlY29tcGlsZSB0aGUgZWxlbWVudCBhbmQgaXQKICAgICAgICAgIC8vIGJlY29tZXMgdGhlIGNvbXBpbGF0aW9uIHJvb3QKICAgICAgICAgIG51bGxPcHRpb24ucmVtb3ZlQ2xhc3MoJ25nLXNjb3BlJyk7CgogICAgICAgICAgLy8gd2UgbmVlZCB0byByZW1vdmUgaXQgYmVmb3JlIGNhbGxpbmcgc2VsZWN0RWxlbWVudC5lbXB0eSgpIGJlY2F1c2Ugb3RoZXJ3aXNlIElFIHdpbGwKICAgICAgICAgIC8vIHJlbW92ZSB0aGUgbGFiZWwgZnJvbSB0aGUgZWxlbWVudC4gd3RmPwogICAgICAgICAgbnVsbE9wdGlvbi5yZW1vdmUoKTsKICAgICAgICB9CgogICAgICAgIC8vIGNsZWFyIGNvbnRlbnRzLCB3ZSdsbCBhZGQgd2hhdCdzIG5lZWRlZCBiYXNlZCBvbiB0aGUgbW9kZWwKICAgICAgICBzZWxlY3RFbGVtZW50LmVtcHR5KCk7CgogICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIHNlbGVjdGlvbkNoYW5nZWQpOwoKICAgICAgICBjdHJsLiRyZW5kZXIgPSByZW5kZXI7CgogICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24odmFsdWVzRm4sIHNjaGVkdWxlUmVuZGVyaW5nKTsKICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGdldExhYmVscywgc2NoZWR1bGVSZW5kZXJpbmcpOwoKICAgICAgICBpZiAobXVsdGlwbGUpIHsKICAgICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24oKSB7IHJldHVybiBjdHJsLiRtb2RlbFZhbHVlOyB9LCBzY2hlZHVsZVJlbmRlcmluZyk7CiAgICAgICAgfQoKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy8KCiAgICAgICAgZnVuY3Rpb24gY2FsbEV4cHJlc3Npb24oZXhwckZuLCBrZXksIHZhbHVlKSB7CiAgICAgICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlOwogICAgICAgICAgaWYgKGtleU5hbWUpIGxvY2Fsc1trZXlOYW1lXSA9IGtleTsKICAgICAgICAgIHJldHVybiBleHByRm4oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzZWxlY3Rpb25DaGFuZ2VkKCkgewogICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgb3B0aW9uR3JvdXAsCiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uID0gdmFsdWVzRm4oc2NvcGUpIHx8IFtdLAogICAgICAgICAgICAgICAga2V5LCB2YWx1ZSwgb3B0aW9uRWxlbWVudCwgaW5kZXgsIGdyb3VwSW5kZXgsIGxlbmd0aCwgZ3JvdXBMZW5ndGgsIHRyYWNrSW5kZXg7CiAgICAgICAgICAgIHZhciB2aWV3VmFsdWU7CiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkgewogICAgICAgICAgICAgIHZpZXdWYWx1ZSA9IFtdOwogICAgICAgICAgICAgIGZvckVhY2goc2VsZWN0RWxlbWVudC52YWwoKSwgZnVuY3Rpb24oc2VsZWN0ZWRLZXkpIHsKICAgICAgICAgICAgICAgIHZpZXdWYWx1ZS5wdXNoKGdldFZpZXdWYWx1ZShzZWxlY3RlZEtleSwgY29sbGVjdGlvbltzZWxlY3RlZEtleV0pKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRLZXkgPSBzZWxlY3RFbGVtZW50LnZhbCgpOwogICAgICAgICAgICAgIHZpZXdWYWx1ZSA9IGdldFZpZXdWYWx1ZShzZWxlY3RlZEtleSwgY29sbGVjdGlvbltzZWxlY3RlZEtleV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2aWV3VmFsdWUpOwogICAgICAgICAgICByZW5kZXIoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0Vmlld1ZhbHVlKGtleSwgdmFsdWUpIHsKICAgICAgICAgIGlmIChrZXkgPT09ICc/JykgewogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICcnKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHZpZXdWYWx1ZUZuID0gc2VsZWN0QXNGbiA/IHNlbGVjdEFzRm4gOiB2YWx1ZUZuOwogICAgICAgICAgICByZXR1cm4gY2FsbEV4cHJlc3Npb24odmlld1ZhbHVlRm4sIGtleSwgdmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0TGFiZWxzKCkgewogICAgICAgICAgdmFyIHZhbHVlcyA9IHZhbHVlc0ZuKHNjb3BlKTsKICAgICAgICAgIHZhciB0b0Rpc3BsYXk7CiAgICAgICAgICBpZiAodmFsdWVzICYmIGlzQXJyYXkodmFsdWVzKSkgewogICAgICAgICAgICB0b0Rpc3BsYXkgPSBuZXcgQXJyYXkodmFsdWVzLmxlbmd0aCk7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICAgICAgdG9EaXNwbGF5W2ldID0gY2FsbEV4cHJlc3Npb24oZGlzcGxheUZuLCBpLCB2YWx1ZXNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0b0Rpc3BsYXk7CiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlcykgewogICAgICAgICAgICAvLyBUT0RPOiBBZGQgYSB0ZXN0IGZvciB0aGlzIGNhc2UKICAgICAgICAgICAgdG9EaXNwbGF5ID0ge307CiAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gdmFsdWVzKSB7CiAgICAgICAgICAgICAgaWYgKHZhbHVlcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgewogICAgICAgICAgICAgICAgdG9EaXNwbGF5W3Byb3BdID0gY2FsbEV4cHJlc3Npb24oZGlzcGxheUZuLCBwcm9wLCB2YWx1ZXNbcHJvcF0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRvRGlzcGxheTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUlzU2VsZWN0ZWRGbih2aWV3VmFsdWUpIHsKICAgICAgICAgIHZhciBzZWxlY3RlZFNldDsKICAgICAgICAgIGlmIChtdWx0aXBsZSkgewogICAgICAgICAgICBpZiAodHJhY2tGbiAmJiBpc0FycmF5KHZpZXdWYWx1ZSkpIHsKCiAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQgPSBuZXcgSGFzaE1hcChbXSk7CiAgICAgICAgICAgICAgZm9yICh2YXIgdHJhY2tJbmRleCA9IDA7IHRyYWNrSW5kZXggPCB2aWV3VmFsdWUubGVuZ3RoOyB0cmFja0luZGV4KyspIHsKICAgICAgICAgICAgICAgIC8vIHRyYWNraW5nIGJ5IGtleQogICAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQucHV0KGNhbGxFeHByZXNzaW9uKHRyYWNrRm4sIG51bGwsIHZpZXdWYWx1ZVt0cmFja0luZGV4XSksIHRydWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzZWxlY3RlZFNldCA9IG5ldyBIYXNoTWFwKHZpZXdWYWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAodHJhY2tGbikgewogICAgICAgICAgICB2aWV3VmFsdWUgPSBjYWxsRXhwcmVzc2lvbih0cmFja0ZuLCBudWxsLCB2aWV3VmFsdWUpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBpc1NlbGVjdGVkKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgdmFyIGNvbXBhcmVWYWx1ZUZuOwogICAgICAgICAgICBpZiAodHJhY2tGbikgewogICAgICAgICAgICAgIGNvbXBhcmVWYWx1ZUZuID0gdHJhY2tGbjsKICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RBc0ZuKSB7CiAgICAgICAgICAgICAgY29tcGFyZVZhbHVlRm4gPSBzZWxlY3RBc0ZuOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNvbXBhcmVWYWx1ZUZuID0gdmFsdWVGbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGlzRGVmaW5lZChzZWxlY3RlZFNldC5yZW1vdmUoY2FsbEV4cHJlc3Npb24oY29tcGFyZVZhbHVlRm4sIGtleSwgdmFsdWUpKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIHZpZXdWYWx1ZSA9PSBjYWxsRXhwcmVzc2lvbihjb21wYXJlVmFsdWVGbiwga2V5LCB2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzY2hlZHVsZVJlbmRlcmluZygpIHsKICAgICAgICAgIGlmICghcmVuZGVyU2NoZWR1bGVkKSB7CiAgICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChyZW5kZXIpOwogICAgICAgICAgICByZW5kZXJTY2hlZHVsZWQgPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICogQSBuZXcgbGFiZWxNYXAgaXMgY3JlYXRlZCB3aXRoIGVhY2ggcmVuZGVyLgogICAgICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGZvciBlYWNoIGV4aXN0aW5nIG9wdGlvbiB3aXRoIGFkZGVkPWZhbHNlLAogICAgICAgICAqIGFuZCBlYWNoIG5ldyBvcHRpb24gd2l0aCBhZGRlZD10cnVlLgogICAgICAgICAqIC0gTGFiZWxzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGlzIG1ldGhvZCB0d2ljZSwKICAgICAgICAgKiAob25jZSB3aXRoIGFkZGVkPXRydWUgYW5kIG9uY2Ugd2l0aCBhZGRlZD1mYWxzZSkgd2lsbCBlbmQgdXAgd2l0aCBhIHZhbHVlIG9mIDAsIGFuZAogICAgICAgICAqIHdpbGwgY2F1c2Ugbm8gY2hhbmdlIHRvIGhhcHBlbiB0byB0aGUgY29ycmVzcG9uZGluZyBvcHRpb24uCiAgICAgICAgICogLSBMYWJlbHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kIG9ubHkgb25jZSB3aXRoIGFkZGVkPWZhbHNlIHdpbGwgZW5kIHVwIHdpdGggYQogICAgICAgICAqIHZhbHVlIG9mIC0xIGFuZCB3aWxsIGV2ZW50dWFsbHkgYmUgcGFzc2VkIHRvIHNlbGVjdEN0cmwucmVtb3ZlT3B0aW9uKCkKICAgICAgICAgKiAtIExhYmVscyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhpcyBtZXRob2Qgb25seSBvbmNlIHdpdGggYWRkZWQ9dHJ1ZSB3aWxsIGVuZCB1cCB3aXRoIGEKICAgICAgICAgKiB2YWx1ZSBvZiAxIGFuZCB3aWxsIGV2ZW50dWFsbHkgYmUgcGFzc2VkIHRvIHNlbGVjdEN0cmwuYWRkT3B0aW9uKCkKICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUxhYmVsTWFwKGxhYmVsTWFwLCBsYWJlbCwgYWRkZWQpIHsKICAgICAgICAgIGxhYmVsTWFwW2xhYmVsXSA9IGxhYmVsTWFwW2xhYmVsXSB8fCAwOwogICAgICAgICAgbGFiZWxNYXBbbGFiZWxdICs9IChhZGRlZCA/IDEgOiAtMSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgICAgICByZW5kZXJTY2hlZHVsZWQgPSBmYWxzZTsKCiAgICAgICAgICAvLyBUZW1wb3JhcnkgbG9jYXRpb24gZm9yIHRoZSBvcHRpb24gZ3JvdXBzIGJlZm9yZSB3ZSByZW5kZXIgdGhlbQogICAgICAgICAgdmFyIG9wdGlvbkdyb3VwcyA9IHsnJzpbXX0sCiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lcyA9IFsnJ10sCiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lLAogICAgICAgICAgICAgIG9wdGlvbkdyb3VwLAogICAgICAgICAgICAgIG9wdGlvbiwKICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCwgZXhpc3RpbmdPcHRpb25zLCBleGlzdGluZ09wdGlvbiwKICAgICAgICAgICAgICB2aWV3VmFsdWUgPSBjdHJsLiR2aWV3VmFsdWUsCiAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzRm4oc2NvcGUpIHx8IFtdLAogICAgICAgICAgICAgIGtleXMgPSBrZXlOYW1lID8gc29ydGVkS2V5cyh2YWx1ZXMpIDogdmFsdWVzLAogICAgICAgICAgICAgIGtleSwKICAgICAgICAgICAgICB2YWx1ZSwKICAgICAgICAgICAgICBncm91cExlbmd0aCwgbGVuZ3RoLAogICAgICAgICAgICAgIGdyb3VwSW5kZXgsIGluZGV4LAogICAgICAgICAgICAgIGxhYmVsTWFwID0ge30sCiAgICAgICAgICAgICAgc2VsZWN0ZWQsCiAgICAgICAgICAgICAgaXNTZWxlY3RlZCA9IGNyZWF0ZUlzU2VsZWN0ZWRGbih2aWV3VmFsdWUpLAogICAgICAgICAgICAgIGFueVNlbGVjdGVkID0gZmFsc2UsCiAgICAgICAgICAgICAgbGFzdEVsZW1lbnQsCiAgICAgICAgICAgICAgZWxlbWVudCwKICAgICAgICAgICAgICBsYWJlbDsKCiAgICAgICAgICAvLyBXZSBub3cgYnVpbGQgdXAgdGhlIGxpc3Qgb2Ygb3B0aW9ucyB3ZSBuZWVkICh3ZSBtZXJnZSBsYXRlcikKICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBsZW5ndGggPSBrZXlzLmxlbmd0aCwgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAga2V5ID0gaW5kZXg7CiAgICAgICAgICAgIGlmIChrZXlOYW1lKSB7CiAgICAgICAgICAgICAga2V5ID0ga2V5c1tpbmRleF07CiAgICAgICAgICAgICAgaWYgKCBrZXkuY2hhckF0KDApID09PSAnJCcgKSBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1trZXldOwoKICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lID0gY2FsbEV4cHJlc3Npb24oZ3JvdXBCeUZuLCBrZXksIHZhbHVlKSB8fCAnJzsKICAgICAgICAgICAgaWYgKCEob3B0aW9uR3JvdXAgPSBvcHRpb25Hcm91cHNbb3B0aW9uR3JvdXBOYW1lXSkpIHsKICAgICAgICAgICAgICBvcHRpb25Hcm91cCA9IG9wdGlvbkdyb3Vwc1tvcHRpb25Hcm91cE5hbWVdID0gW107CiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lcy5wdXNoKG9wdGlvbkdyb3VwTmFtZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNlbGVjdGVkID0gaXNTZWxlY3RlZChrZXksIHZhbHVlKTsKICAgICAgICAgICAgYW55U2VsZWN0ZWQgPSBhbnlTZWxlY3RlZCB8fCBzZWxlY3RlZDsKCiAgICAgICAgICAgIGxhYmVsID0gY2FsbEV4cHJlc3Npb24oZGlzcGxheUZuLCBrZXksIHZhbHVlKTsgLy8gd2hhdCB3aWxsIGJlIHNlZW4gYnkgdGhlIHVzZXIKCiAgICAgICAgICAgIC8vIGRvaW5nIGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKSB8fCAnJyBvdmVyd3JpdGVzIHplcm8gdmFsdWVzCiAgICAgICAgICAgIGxhYmVsID0gaXNEZWZpbmVkKGxhYmVsKSA/IGxhYmVsIDogJyc7CiAgICAgICAgICAgIG9wdGlvbkdyb3VwLnB1c2goewogICAgICAgICAgICAgIC8vIGVpdGhlciB0aGUgaW5kZXggaW50byBhcnJheSBvciBrZXkgZnJvbSBvYmplY3QKICAgICAgICAgICAgICBpZDogKGtleU5hbWUgPyBrZXlzW2luZGV4XSA6IGluZGV4KSwKICAgICAgICAgICAgICBsYWJlbDogbGFiZWwsCiAgICAgICAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkICAgICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBpZiB3ZSBzaG91bGQgYmUgc2VsZWN0ZWQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIW11bHRpcGxlKSB7CiAgICAgICAgICAgIGlmIChudWxsT3B0aW9uIHx8IHZpZXdWYWx1ZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgIC8vIGluc2VydCBudWxsIG9wdGlvbiBpZiB3ZSBoYXZlIGEgcGxhY2Vob2xkZXIsIG9yIHRoZSBtb2RlbCBpcyBudWxsCiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBzWycnXS51bnNoaWZ0KHtpZDonJywgbGFiZWw6JycsIHNlbGVjdGVkOiFhbnlTZWxlY3RlZH0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKCFhbnlTZWxlY3RlZCkgewogICAgICAgICAgICAgIC8vIG9wdGlvbiBjb3VsZCBub3QgYmUgZm91bmQsIHdlIGhhdmUgdG8gaW5zZXJ0IHRoZSB1bmRlZmluZWQgaXRlbQogICAgICAgICAgICAgIG9wdGlvbkdyb3Vwc1snJ10udW5zaGlmdCh7aWQ6Jz8nLCBsYWJlbDonJywgc2VsZWN0ZWQ6dHJ1ZX0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gTm93IHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBsaXN0IG9mIERPTSBub2RlcyB0byBtYXRjaCB0aGUgb3B0aW9uR3JvdXBzIHdlIGNvbXB1dGVkIGFib3ZlCiAgICAgICAgICBmb3IgKGdyb3VwSW5kZXggPSAwLCBncm91cExlbmd0aCA9IG9wdGlvbkdyb3VwTmFtZXMubGVuZ3RoOwogICAgICAgICAgICAgICBncm91cEluZGV4IDwgZ3JvdXBMZW5ndGg7CiAgICAgICAgICAgICAgIGdyb3VwSW5kZXgrKykgewogICAgICAgICAgICAvLyBjdXJyZW50IG9wdGlvbiBncm91cCBuYW1lIG9yICcnIGlmIG5vIGdyb3VwCiAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZSA9IG9wdGlvbkdyb3VwTmFtZXNbZ3JvdXBJbmRleF07CgogICAgICAgICAgICAvLyBsaXN0IG9mIG9wdGlvbnMgZm9yIHRoYXQgZ3JvdXAuIChmaXJzdCBpdGVtIGhhcyB0aGUgcGFyZW50KQogICAgICAgICAgICBvcHRpb25Hcm91cCA9IG9wdGlvbkdyb3Vwc1tvcHRpb25Hcm91cE5hbWVdOwoKICAgICAgICAgICAgaWYgKG9wdGlvbkdyb3Vwc0NhY2hlLmxlbmd0aCA8PSBncm91cEluZGV4KSB7CiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBncm93IHRoZSBvcHRpb25Hcm91cHMKICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCA9IHsKICAgICAgICAgICAgICAgIGVsZW1lbnQ6IG9wdEdyb3VwVGVtcGxhdGUuY2xvbmUoKS5hdHRyKCdsYWJlbCcsIG9wdGlvbkdyb3VwTmFtZSksCiAgICAgICAgICAgICAgICBsYWJlbDogb3B0aW9uR3JvdXAubGFiZWwKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGV4aXN0aW5nT3B0aW9ucyA9IFtleGlzdGluZ1BhcmVudF07CiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBzQ2FjaGUucHVzaChleGlzdGluZ09wdGlvbnMpOwogICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuYXBwZW5kKGV4aXN0aW5nUGFyZW50LmVsZW1lbnQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGV4aXN0aW5nT3B0aW9ucyA9IG9wdGlvbkdyb3Vwc0NhY2hlW2dyb3VwSW5kZXhdOwogICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50ID0gZXhpc3RpbmdPcHRpb25zWzBdOyAgLy8gZWl0aGVyIFNFTEVDVCAobm8gZ3JvdXApIG9yIE9QVEdST1VQIGVsZW1lbnQKCiAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBPUFRHUk9VUCBsYWJlbCBpZiBub3QgdGhlIHNhbWUuCiAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nUGFyZW50LmxhYmVsICE9IG9wdGlvbkdyb3VwTmFtZSkgewogICAgICAgICAgICAgICAgZXhpc3RpbmdQYXJlbnQuZWxlbWVudC5hdHRyKCdsYWJlbCcsIGV4aXN0aW5nUGFyZW50LmxhYmVsID0gb3B0aW9uR3JvdXBOYW1lKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxhc3RFbGVtZW50ID0gbnVsbDsgIC8vIHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcKICAgICAgICAgICAgZm9yKGluZGV4ID0gMCwgbGVuZ3RoID0gb3B0aW9uR3JvdXAubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICAgIG9wdGlvbiA9IG9wdGlvbkdyb3VwW2luZGV4XTsKICAgICAgICAgICAgICBpZiAoKGV4aXN0aW5nT3B0aW9uID0gZXhpc3RpbmdPcHRpb25zW2luZGV4KzFdKSkgewogICAgICAgICAgICAgICAgLy8gcmV1c2UgZWxlbWVudHMKICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50ID0gZXhpc3RpbmdPcHRpb24uZWxlbWVudDsKICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ09wdGlvbi5sYWJlbCAhPT0gb3B0aW9uLmxhYmVsKSB7CiAgICAgICAgICAgICAgICAgIHVwZGF0ZUxhYmVsTWFwKGxhYmVsTWFwLCBleGlzdGluZ09wdGlvbi5sYWJlbCwgZmFsc2UpOwogICAgICAgICAgICAgICAgICB1cGRhdGVMYWJlbE1hcChsYWJlbE1hcCwgb3B0aW9uLmxhYmVsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQudGV4dChleGlzdGluZ09wdGlvbi5sYWJlbCA9IG9wdGlvbi5sYWJlbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdPcHRpb24uaWQgIT09IG9wdGlvbi5pZCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC52YWwoZXhpc3RpbmdPcHRpb24uaWQgPSBvcHRpb24uaWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGFzdEVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnKSBwcm92aWRlZCBieSBqUXVlcnkgaGFzIHNpZGUtZWZmZWN0cwogICAgICAgICAgICAgICAgaWYgKGxhc3RFbGVtZW50WzBdLnNlbGVjdGVkICE9PSBvcHRpb24uc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnLCAoZXhpc3RpbmdPcHRpb24uc2VsZWN0ZWQgPSBvcHRpb24uc2VsZWN0ZWQpKTsKICAgICAgICAgICAgICAgICAgaWYgKG1zaWUpIHsKICAgICAgICAgICAgICAgICAgICAvLyBTZWUgIzc2OTIKICAgICAgICAgICAgICAgICAgICAvLyBUaGUgc2VsZWN0ZWQgaXRlbSB3b3VsZG4ndCB2aXN1YWxseSB1cGRhdGUgb24gSUUgd2l0aG91dCB0aGlzLgogICAgICAgICAgICAgICAgICAgIC8vIFRlc3RlZCBvbiBXaW43OiBJRTksIElFMTAgYW5kIElFMTEuIEZ1dHVyZSBJRXMgc2hvdWxkIGJlIHRlc3RlZCBhcyB3ZWxsCiAgICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnLCBleGlzdGluZ09wdGlvbi5zZWxlY3RlZCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gZ3JvdyBlbGVtZW50cwoKICAgICAgICAgICAgICAgIC8vIGlmIGl0J3MgYSBudWxsIG9wdGlvbgogICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5pZCA9PT0gJycgJiYgbnVsbE9wdGlvbikgewogICAgICAgICAgICAgICAgICAvLyBwdXQgYmFjayB0aGUgcHJlLWNvbXBpbGVkIGVsZW1lbnQKICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IG51bGxPcHRpb247CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAvLyBqUXVlcnkodjEuNC4yKSBCdWc6IFdlIHNob3VsZCBiZSBhYmxlIHRvIGNoYWluIHRoZSBtZXRob2QgY2FsbHMsIGJ1dAogICAgICAgICAgICAgICAgICAvLyBpbiB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5IG9uIHNvbWUgYnJvd3NlciB0aGUgLnRleHQoKSByZXR1cm5zIGEgc3RyaW5nCiAgICAgICAgICAgICAgICAgIC8vIHJhdGhlciB0aGVuIHRoZSBlbGVtZW50LgogICAgICAgICAgICAgICAgICAoZWxlbWVudCA9IG9wdGlvblRlbXBsYXRlLmNsb25lKCkpCiAgICAgICAgICAgICAgICAgICAgICAudmFsKG9wdGlvbi5pZCkKICAgICAgICAgICAgICAgICAgICAgIC5wcm9wKCdzZWxlY3RlZCcsIG9wdGlvbi5zZWxlY3RlZCkKICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzZWxlY3RlZCcsIG9wdGlvbi5zZWxlY3RlZCkKICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KG9wdGlvbi5sYWJlbCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZXhpc3RpbmdPcHRpb25zLnB1c2goZXhpc3RpbmdPcHRpb24gPSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICBsYWJlbDogb3B0aW9uLmxhYmVsLAogICAgICAgICAgICAgICAgICAgIGlkOiBvcHRpb24uaWQsCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IG9wdGlvbi5zZWxlY3RlZAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB1cGRhdGVMYWJlbE1hcChsYWJlbE1hcCwgb3B0aW9uLmxhYmVsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGlmIChsYXN0RWxlbWVudCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5hZnRlcihlbGVtZW50KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50LmVsZW1lbnQuYXBwZW5kKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLyByZW1vdmUgYW55IGV4Y2Vzc2l2ZSBPUFRJT05zIGluIGEgZ3JvdXAKICAgICAgICAgICAgaW5kZXgrKzsgLy8gaW5jcmVtZW50IHNpbmNlIHRoZSBleGlzdGluZ09wdGlvbnNbMF0gaXMgcGFyZW50IGVsZW1lbnQgbm90IE9QVElPTgogICAgICAgICAgICB3aGlsZShleGlzdGluZ09wdGlvbnMubGVuZ3RoID4gaW5kZXgpIHsKICAgICAgICAgICAgICBvcHRpb24gPSBleGlzdGluZ09wdGlvbnMucG9wKCk7CiAgICAgICAgICAgICAgdXBkYXRlTGFiZWxNYXAobGFiZWxNYXAsIG9wdGlvbi5sYWJlbCwgZmFsc2UpOwogICAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnJlbW92ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvckVhY2gobGFiZWxNYXAsIGZ1bmN0aW9uIChjb3VudCwgbGFiZWwpIHsKICAgICAgICAgICAgICBpZiAoY291bnQgPiAwKSB7CiAgICAgICAgICAgICAgICBzZWxlY3RDdHJsLmFkZE9wdGlvbihsYWJlbCk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb3VudCA8IDApIHsKICAgICAgICAgICAgICAgIHNlbGVjdEN0cmwucmVtb3ZlT3B0aW9uKGxhYmVsKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgLy8gcmVtb3ZlIGFueSBleGNlc3NpdmUgT1BUR1JPVVBzIGZyb20gc2VsZWN0CiAgICAgICAgICB3aGlsZShvcHRpb25Hcm91cHNDYWNoZS5sZW5ndGggPiBncm91cEluZGV4KSB7CiAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlLnBvcCgpWzBdLmVsZW1lbnQucmVtb3ZlKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKfV07Cgp2YXIgb3B0aW9uRGlyZWN0aXZlID0gWyckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbigkaW50ZXJwb2xhdGUpIHsKICB2YXIgbnVsbFNlbGVjdEN0cmwgPSB7CiAgICBhZGRPcHRpb246IG5vb3AsCiAgICByZW1vdmVPcHRpb246IG5vb3AKICB9OwoKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdFJywKICAgIHByaW9yaXR5OiAxMDAsCiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICAgIGlmIChpc1VuZGVmaW5lZChhdHRyLnZhbHVlKSkgewogICAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGVsZW1lbnQudGV4dCgpLCB0cnVlKTsKICAgICAgICBpZiAoIWludGVycG9sYXRlRm4pIHsKICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBlbGVtZW50LnRleHQoKSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgdmFyIHNlbGVjdEN0cmxOYW1lID0gJyRzZWxlY3RDb250cm9sbGVyJywKICAgICAgICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQoKSwKICAgICAgICAgICAgc2VsZWN0Q3RybCA9IHBhcmVudC5kYXRhKHNlbGVjdEN0cmxOYW1lKSB8fAogICAgICAgICAgICAgIHBhcmVudC5wYXJlbnQoKS5kYXRhKHNlbGVjdEN0cmxOYW1lKTsgLy8gaW4gY2FzZSB3ZSBhcmUgaW4gb3B0Z3JvdXAKCiAgICAgICAgaWYgKCFzZWxlY3RDdHJsIHx8ICFzZWxlY3RDdHJsLmRhdGFib3VuZCkgewogICAgICAgICAgc2VsZWN0Q3RybCA9IG51bGxTZWxlY3RDdHJsOwogICAgICAgIH0KCiAgICAgICAgaWYgKGludGVycG9sYXRlRm4pIHsKICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZVdhdGNoQWN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBuZXdWYWwpOwogICAgICAgICAgICBpZiAob2xkVmFsICE9PSBuZXdWYWwpIHsKICAgICAgICAgICAgICBzZWxlY3RDdHJsLnJlbW92ZU9wdGlvbihvbGRWYWwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNlbGVjdEN0cmwuYWRkT3B0aW9uKG5ld1ZhbCwgZWxlbWVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2VsZWN0Q3RybC5hZGRPcHRpb24oYXR0ci52YWx1ZSwgZWxlbWVudCk7CiAgICAgICAgfQoKICAgICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVPcHRpb24oYXR0ci52YWx1ZSk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfTsKfV07Cgp2YXIgc3R5bGVEaXJlY3RpdmUgPSB2YWx1ZUZuKHsKICByZXN0cmljdDogJ0UnLAogIHRlcm1pbmFsOiBmYWxzZQp9KTsKCiAgaWYgKHdpbmRvdy5hbmd1bGFyLmJvb3RzdHJhcCkgewogICAgLy9Bbmd1bGFySlMgaXMgYWxyZWFkeSBsb2FkZWQsIHNvIHdlIGNhbiByZXR1cm4gaGVyZS4uLgogICAgY29uc29sZS5sb2coJ1dBUk5JTkc6IFRyaWVkIHRvIGxvYWQgYW5ndWxhciBtb3JlIHRoYW4gb25jZS4nKTsKICAgIHJldHVybjsKICB9CgogIC8vdHJ5IHRvIGJpbmQgdG8ganF1ZXJ5IG5vdyBzbyB0aGF0IG9uZSBjYW4gd3JpdGUganFMaXRlKGRvY3VtZW50KS5yZWFkeSgpCiAgLy9idXQgd2Ugd2lsbCByZWJpbmQgb24gYm9vdHN0cmFwIGFnYWluLgogIGJpbmRKUXVlcnkoKTsKCiAgcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpOwoKICBqcUxpdGUoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgYW5ndWxhckluaXQoZG9jdW1lbnQsIGJvb3RzdHJhcCk7CiAgfSk7Cgp9KSh3aW5kb3csIGRvY3VtZW50KTsKCiF3aW5kb3cuYW5ndWxhci4kJGNzcCgpICYmIHdpbmRvdy5hbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT0idGV4dC9jc3MiPkBjaGFyc2V0ICJVVEYtOCI7W25nXFw6Y2xvYWtdLFtuZy1jbG9ha10sW2RhdGEtbmctY2xvYWtdLFt4LW5nLWNsb2FrXSwubmctY2xvYWssLngtbmctY2xvYWssLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpe2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O31uZ1xcOmZvcm17ZGlzcGxheTpibG9jazt9PC9zdHlsZT4nKTsKLyoqCiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS4zLjAKICogKGMpIDIwMTAtMjAxNCBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmcKICogTGljZW5zZTogTUlUCiAqLwooZnVuY3Rpb24od2luZG93LCBhbmd1bGFyLCB1bmRlZmluZWQpIHsndXNlIHN0cmljdCc7CgovKiBqc2hpbnQgbWF4bGVuOiBmYWxzZSAqLwoKLyoqCiAqIEBuZ2RvYyBtb2R1bGUKICogQG5hbWUgbmdBbmltYXRlCiAqIEBkZXNjcmlwdGlvbgogKgogKiBUaGUgYG5nQW5pbWF0ZWAgbW9kdWxlIHByb3ZpZGVzIHN1cHBvcnQgZm9yIEphdmFTY3JpcHQsIENTUzMgdHJhbnNpdGlvbiBhbmQgQ1NTMyBrZXlmcmFtZSBhbmltYXRpb24gaG9va3Mgd2l0aGluIGV4aXN0aW5nIGNvcmUgYW5kIGN1c3RvbSBkaXJlY3RpdmVzLgogKgogKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz0ibmdBbmltYXRlIj48L2Rpdj4KICoKICogIyBVc2FnZQogKgogKiBUbyBzZWUgYW5pbWF0aW9ucyBpbiBhY3Rpb24sIGFsbCB0aGF0IGlzIHJlcXVpcmVkIGlzIHRvIGRlZmluZSB0aGUgYXBwcm9wcmlhdGUgQ1NTIGNsYXNzZXMKICogb3IgdG8gcmVnaXN0ZXIgYSBKYXZhU2NyaXB0IGFuaW1hdGlvbiB2aWEgdGhlIG15TW9kdWxlLmFuaW1hdGlvbigpIGZ1bmN0aW9uLiBUaGUgZGlyZWN0aXZlcyB0aGF0IHN1cHBvcnQgYW5pbWF0aW9uIGF1dG9tYXRpY2FsbHkgYXJlOgogKiBgbmdSZXBlYXRgLCBgbmdJbmNsdWRlYCwgYG5nSWZgLCBgbmdTd2l0Y2hgLCBgbmdTaG93YCwgYG5nSGlkZWAsIGBuZ1ZpZXdgIGFuZCBgbmdDbGFzc2AuIEN1c3RvbSBkaXJlY3RpdmVzIGNhbiB0YWtlIGFkdmFudGFnZSBvZiBhbmltYXRpb24KICogYnkgdXNpbmcgdGhlIGAkYW5pbWF0ZWAgc2VydmljZS4KICoKICogQmVsb3cgaXMgYSBtb3JlIGRldGFpbGVkIGJyZWFrZG93biBvZiB0aGUgc3VwcG9ydGVkIGFuaW1hdGlvbiBldmVudHMgcHJvdmlkZWQgYnkgcHJlLWV4aXN0aW5nIG5nIGRpcmVjdGl2ZXM6CiAqCiAqIHwgRGlyZWN0aXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQgQW5pbWF0aW9ucyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwKICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0I2FuaW1hdGlvbnMgbmdSZXBlYXR9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyLCBsZWF2ZSBhbmQgbW92ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAqIHwge0BsaW5rIG5nUm91dGUuZGlyZWN0aXZlOm5nVmlldyNhbmltYXRpb25zIG5nVmlld30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlI2FuaW1hdGlvbnMgbmdJbmNsdWRlfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3dpdGNoI2FuaW1hdGlvbnMgbmdTd2l0Y2h9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0lmI2FuaW1hdGlvbnMgbmdJZn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGFzcyNhbmltYXRpb25zIG5nQ2xhc3N9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWRkIGFuZCByZW1vdmUgKHRoZSBDU1MgY2xhc3MoZXMpIHByZXNlbnQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU2hvdyNhbmltYXRpb25zIG5nU2hvd30gJiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSGlkZSNhbmltYXRpb25zIG5nSGlkZX0gICAgICAgICAgICB8IGFkZCBhbmQgcmVtb3ZlICh0aGUgbmctaGlkZSBjbGFzcyB2YWx1ZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtI2FuaW1hdGlvbi1ob29rcyBmb3JtfSAmIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbCNhbmltYXRpb24taG9va3MgbmdNb2RlbH0gICAgfCBhZGQgYW5kIHJlbW92ZSAoZGlydHksIHByaXN0aW5lLCB2YWxpZCwgaW52YWxpZCAmIGFsbCBvdGhlciB2YWxpZGF0aW9ucykgfAogKiB8IHtAbGluayBtb2R1bGU6bmdNZXNzYWdlcyNhbmltYXRpb25zIG5nTWVzc2FnZXN9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWRkIGFuZCByZW1vdmUgKG5nLWFjdGl2ZSAmIG5nLWluYWN0aXZlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICogfCB7QGxpbmsgbW9kdWxlOm5nTWVzc2FnZXMjYW5pbWF0aW9ucyBuZ01lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAqCiAqIFlvdSBjYW4gZmluZCBvdXQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBhbmltYXRpb25zIHVwb24gdmlzaXRpbmcgZWFjaCBkaXJlY3RpdmUgcGFnZS4KICoKICogQmVsb3cgaXMgYW4gZXhhbXBsZSBvZiBob3cgdG8gYXBwbHkgYW5pbWF0aW9ucyB0byBhIGRpcmVjdGl2ZSB0aGF0IHN1cHBvcnRzIGFuaW1hdGlvbiBob29rczoKICoKICogYGBgaHRtbAogKiA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogKiAuc2xpZGUubmctZW50ZXIsIC5zbGlkZS5uZy1sZWF2ZSB7CiAqICAgLXdlYmtpdC10cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDsKICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDsKICogfQogKgogKiAuc2xpZGUubmctZW50ZXIgeyB9ICAgICAgICAvJiM0Mjsgc3RhcnRpbmcgYW5pbWF0aW9ucyBmb3IgZW50ZXIgJiM0MjsvCiAqIC5zbGlkZS5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUgeyB9IC8mIzQyOyB0ZXJtaW5hbCBhbmltYXRpb25zIGZvciBlbnRlciAmIzQyOy8KICogLnNsaWRlLm5nLWxlYXZlIHsgfSAgICAgICAgLyYjNDI7IHN0YXJ0aW5nIGFuaW1hdGlvbnMgZm9yIGxlYXZlICYjNDI7LwogKiAuc2xpZGUubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHsgfSAvJiM0MjsgdGVybWluYWwgYW5pbWF0aW9ucyBmb3IgbGVhdmUgJiM0MjsvCiAqIDwvc3R5bGU+CiAqCiAqIDwhLS0KICogdGhlIGFuaW1hdGUgc2VydmljZSB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIC5uZy1lbnRlciBhbmQgLm5nLWxlYXZlIHRvIHRoZSBlbGVtZW50CiAqIHRvIHRyaWdnZXIgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbnMKICogLS0+CiAqIDxBTlkgY2xhc3M9InNsaWRlIiBuZy1pbmNsdWRlPSIuLi4iPjwvQU5ZPgogKiBgYGAKICoKICogS2VlcCBpbiBtaW5kIHRoYXQsIGJ5IGRlZmF1bHQsIGlmIGFuIGFuaW1hdGlvbiBpcyBydW5uaW5nLCBhbnkgY2hpbGQgZWxlbWVudHMgY2Fubm90IGJlIGFuaW1hdGVkCiAqIHVudGlsIHRoZSBwYXJlbnQgZWxlbWVudCdzIGFuaW1hdGlvbiBoYXMgY29tcGxldGVkLiBUaGlzIGJsb2NraW5nIGZlYXR1cmUgY2FuIGJlIG92ZXJyaWRkZW4gYnkKICogcGxhY2luZyB0aGUgYG5nLWFuaW1hdGUtY2hpbGRyZW5gIGF0dHJpYnV0ZSBvbiBhIHBhcmVudCBjb250YWluZXIgdGFnLgogKgogKiBgYGBodG1sCiAqIDxkaXYgY2xhc3M9InNsaWRlLWFuaW1hdGlvbiIgbmctaWY9Im9uIiBuZy1hbmltYXRlLWNoaWxkcmVuPgogKiAgIDxkaXYgY2xhc3M9ImZhZGUtYW5pbWF0aW9uIiBuZy1pZj0ib24iPgogKiAgICAgPGRpdiBjbGFzcz0iZXhwbG9kZS1hbmltYXRpb24iIG5nLWlmPSJvbiI+CiAqICAgICAgICAuLi4KICogICAgIDwvZGl2PgogKiAgIDwvZGl2PgogKiA8L2Rpdj4KICogYGBgCiAqCiAqIFdoZW4gdGhlIGBvbmAgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzIGFuZCBhbiBhbmltYXRpb24gaXMgdHJpZ2dlcmVkIHRoZW4gZWFjaCBvZiB0aGUgZWxlbWVudHMgd2l0aGluCiAqIHdpbGwgYWxsIGFuaW1hdGUgd2l0aG91dCB0aGUgYmxvY2sgYmVpbmcgYXBwbGllZCB0byBjaGlsZCBlbGVtZW50cy4KICoKICogIyMgQXJlIGFuaW1hdGlvbnMgcnVuIHdoZW4gdGhlIGFwcGxpY2F0aW9uIHN0YXJ0cz8KICogTm8gdGhleSBhcmUgbm90LiBXaGVuIGFuIGFwcGxpY2F0aW9uIGlzIGJvb3RzdHJhcHBlZCBBbmd1bGFyIHdpbGwgZGlzYWJsZSBhbmltYXRpb25zIGZyb20gcnVubmluZyB0byBhdm9pZAogKiBhIGZyZW56eSBvZiBhbmltYXRpb25zIGZyb20gYmVpbmcgdHJpZ2dlcmVkIGFzIHNvb24gYXMgdGhlIGJyb3dzZXIgaGFzIHJlbmRlcmVkIHRoZSBzY3JlZW4uIEZvciB0aGlzIHRvIHdvcmssCiAqIEFuZ3VsYXIgd2lsbCB3YWl0IGZvciB0d28gZGlnZXN0IGN5Y2xlcyB1bnRpbCBlbmFibGluZyBhbmltYXRpb25zLiBGcm9tIHRoZXJlIG9uLCBhbnkgYW5pbWF0aW9uLXRyaWdnZXJpbmcKICogbGF5b3V0IGNoYW5nZXMgaW4gdGhlIGFwcGxpY2F0aW9uIHdpbGwgdHJpZ2dlciBhbmltYXRpb25zIGFzIG5vcm1hbC4KICoKICogSW4gYWRkaXRpb24sIHVwb24gYm9vdHN0cmFwLCBpZiB0aGUgcm91dGluZyBzeXN0ZW0gb3IgYW55IGRpcmVjdGl2ZXMgb3IgbG9hZCByZW1vdGUgZGF0YSAodmlhICRodHRwKSB0aGVuIEFuZ3VsYXIKICogd2lsbCBhdXRvbWF0aWNhbGx5IGV4dGVuZCB0aGUgd2FpdCB0aW1lIHRvIGVuYWJsZSBhbmltYXRpb25zIG9uY2UgKiphbGwqKiBvZiB0aGUgb3V0Ym91bmQgSFRUUCByZXF1ZXN0cwogKiBhcmUgY29tcGxldGUuCiAqCiAqICMjIENTUy1kZWZpbmVkIEFuaW1hdGlvbnMKICogVGhlIGFuaW1hdGUgc2VydmljZSB3aWxsIGF1dG9tYXRpY2FsbHkgYXBwbHkgdHdvIENTUyBjbGFzc2VzIHRvIHRoZSBhbmltYXRlZCBlbGVtZW50IGFuZCB0aGVzZSB0d28gQ1NTIGNsYXNzZXMKICogYXJlIGRlc2lnbmVkIHRvIGNvbnRhaW4gdGhlIHN0YXJ0IGFuZCBlbmQgQ1NTIHN0eWxpbmcuIEJvdGggQ1NTIHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZSBhbmltYXRpb25zIGFyZSBzdXBwb3J0ZWQKICogYW5kIGNhbiBiZSB1c2VkIHRvIHBsYXkgYWxvbmcgd2l0aCB0aGlzIG5hbWluZyBzdHJ1Y3R1cmUuCiAqCiAqIFRoZSBmb2xsb3dpbmcgY29kZSBiZWxvdyBkZW1vbnN0cmF0ZXMgaG93IHRvIHBlcmZvcm0gYW5pbWF0aW9ucyB1c2luZyAqKkNTUyB0cmFuc2l0aW9ucyoqIHdpdGggQW5ndWxhcjoKICoKICogYGBgaHRtbAogKiA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogKiAvJiM0MjsKICogIFRoZSBhbmltYXRlIGNsYXNzIGlzIGFwYXJ0IG9mIHRoZSBlbGVtZW50IGFuZCB0aGUgbmctZW50ZXIgY2xhc3MKICogIGlzIGF0dGFjaGVkIHRvIHRoZSBlbGVtZW50IG9uY2UgdGhlIGVudGVyIGFuaW1hdGlvbiBldmVudCBpcyB0cmlnZ2VyZWQKICogJiM0MjsvCiAqIC5yZXZlYWwtYW5pbWF0aW9uLm5nLWVudGVyIHsKICogIC13ZWJraXQtdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDsgLyYjNDI7IFNhZmFyaS9DaHJvbWUgJiM0MjsvCiAqICB0cmFuc2l0aW9uOiAxcyBsaW5lYXIgYWxsOyAvJiM0MjsgQWxsIG90aGVyIG1vZGVybiBicm93c2VycyBhbmQgSUUxMCsgJiM0MjsvCiAqCiAqICAvJiM0MjsgVGhlIGFuaW1hdGlvbiBwcmVwYXJhdGlvbiBjb2RlICYjNDI7LwogKiAgb3BhY2l0eTogMDsKICogfQogKgogKiAvJiM0MjsKICogIEtlZXAgaW4gbWluZCB0aGF0IHlvdSB3YW50IHRvIGNvbWJpbmUgYm90aCBDU1MKICogIGNsYXNzZXMgdG9nZXRoZXIgdG8gYXZvaWQgYW55IENTUy1zcGVjaWZpY2l0eQogKiAgY29uZmxpY3RzCiAqICYjNDI7LwogKiAucmV2ZWFsLWFuaW1hdGlvbi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUgewogKiAgLyYjNDI7IFRoZSBhbmltYXRpb24gY29kZSBpdHNlbGYgJiM0MjsvCiAqICBvcGFjaXR5OiAxOwogKiB9CiAqIDwvc3R5bGU+CiAqCiAqIDxkaXYgY2xhc3M9InZpZXctY29udGFpbmVyIj4KICogICA8ZGl2IG5nLXZpZXcgY2xhc3M9InJldmVhbC1hbmltYXRpb24iPjwvZGl2PgogKiA8L2Rpdj4KICogYGBgCiAqCiAqIFRoZSBmb2xsb3dpbmcgY29kZSBiZWxvdyBkZW1vbnN0cmF0ZXMgaG93IHRvIHBlcmZvcm0gYW5pbWF0aW9ucyB1c2luZyAqKkNTUyBhbmltYXRpb25zKiogd2l0aCBBbmd1bGFyOgogKgogKiBgYGBodG1sCiAqIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+CiAqIC5yZXZlYWwtYW5pbWF0aW9uLm5nLWVudGVyIHsKICogICAtd2Via2l0LWFuaW1hdGlvbjogZW50ZXJfc2VxdWVuY2UgMXMgbGluZWFyOyAvJiM0MjsgU2FmYXJpL0Nocm9tZSAmIzQyOy8KICogICBhbmltYXRpb246IGVudGVyX3NlcXVlbmNlIDFzIGxpbmVhcjsgLyYjNDI7IElFMTArIGFuZCBGdXR1cmUgQnJvd3NlcnMgJiM0MjsvCiAqIH0KICogQC13ZWJraXQta2V5ZnJhbWVzIGVudGVyX3NlcXVlbmNlIHsKICogICBmcm9tIHsgb3BhY2l0eTowOyB9CiAqICAgdG8geyBvcGFjaXR5OjE7IH0KICogfQogKiBAa2V5ZnJhbWVzIGVudGVyX3NlcXVlbmNlIHsKICogICBmcm9tIHsgb3BhY2l0eTowOyB9CiAqICAgdG8geyBvcGFjaXR5OjE7IH0KICogfQogKiA8L3N0eWxlPgogKgogKiA8ZGl2IGNsYXNzPSJ2aWV3LWNvbnRhaW5lciI+CiAqICAgPGRpdiBuZy12aWV3IGNsYXNzPSJyZXZlYWwtYW5pbWF0aW9uIj48L2Rpdj4KICogPC9kaXY+CiAqIGBgYAogKgogKiBCb3RoIENTUzMgYW5pbWF0aW9ucyBhbmQgdHJhbnNpdGlvbnMgY2FuIGJlIHVzZWQgdG9nZXRoZXIgYW5kIHRoZSBhbmltYXRlIHNlcnZpY2Ugd2lsbCBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGR1cmF0aW9uIGFuZCBkZWxheSB0aW1pbmcuCiAqCiAqIFVwb24gRE9NIG11dGF0aW9uLCB0aGUgZXZlbnQgY2xhc3MgaXMgYWRkZWQgZmlyc3QgKHNvbWV0aGluZyBsaWtlIGBuZy1lbnRlcmApLCB0aGVuIHRoZSBicm93c2VyIHByZXBhcmVzIGl0c2VsZiB0byBhZGQKICogdGhlIGFjdGl2ZSBjbGFzcyAoaW4gdGhpcyBjYXNlIGBuZy1lbnRlci1hY3RpdmVgKSB3aGljaCB0aGVuIHRyaWdnZXJzIHRoZSBhbmltYXRpb24uIFRoZSBhbmltYXRpb24gbW9kdWxlIHdpbGwgYXV0b21hdGljYWxseQogKiBkZXRlY3QgdGhlIENTUyBjb2RlIHRvIGRldGVybWluZSB3aGVuIHRoZSBhbmltYXRpb24gZW5kcy4gT25jZSB0aGUgYW5pbWF0aW9uIGlzIG92ZXIgdGhlbiBib3RoIENTUyBjbGFzc2VzIHdpbGwgYmUKICogcmVtb3ZlZCBmcm9tIHRoZSBET00uIElmIGEgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IENTUyB0cmFuc2l0aW9ucyBvciBDU1MgYW5pbWF0aW9ucyB0aGVuIHRoZSBhbmltYXRpb24gd2lsbCBzdGFydCBhbmQgZW5kCiAqIGltbWVkaWF0ZWx5IHJlc3VsdGluZyBpbiBhIERPTSBlbGVtZW50IHRoYXQgaXMgYXQgaXRzIGZpbmFsIHN0YXRlLiBUaGlzIGZpbmFsIHN0YXRlIGlzIHdoZW4gdGhlIERPTSBlbGVtZW50CiAqIGhhcyBubyBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGl0LgogKgogKiAjIyMgU3RydWN0dXJhbCB0cmFuc2l0aW9uIGFuaW1hdGlvbnMKICoKICogU3RydWN0dXJhbCB0cmFuc2l0aW9ucyAoc3VjaCBhcyBlbnRlciwgbGVhdmUgYW5kIG1vdmUpIHdpbGwgYWx3YXlzIGFwcGx5IGEgYDBzIG5vbmVgIHRyYW5zaXRpb24KICogdmFsdWUgdG8gZm9yY2UgdGhlIGJyb3dzZXIgaW50byByZW5kZXJpbmcgdGhlIHN0eWxlcyBkZWZpbmVkIGluIHRoZSBzZXR1cCAoLm5nLWVudGVyLCAubmctbGVhdmUKICogb3IgLm5nLW1vdmUpIGNsYXNzLiBUaGlzIG1lYW5zIHRoYXQgYW55IGFjdGl2ZSB0cmFuc2l0aW9uIGFuaW1hdGlvbnMgb3BlcmF0aW5nIG9uIHRoZSBlbGVtZW50CiAqIHdpbGwgYmUgY3V0IG9mZiB0byBtYWtlIHdheSBmb3IgdGhlIGVudGVyLCBsZWF2ZSBvciBtb3ZlIGFuaW1hdGlvbi4KICoKICogIyMjIENsYXNzLWJhc2VkIHRyYW5zaXRpb24gYW5pbWF0aW9ucwogKgogKiBDbGFzcy1iYXNlZCB0cmFuc2l0aW9ucyByZWZlciB0byB0cmFuc2l0aW9uIGFuaW1hdGlvbnMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gYSBDU1MgY2xhc3MgaXMKICogYWRkZWQgdG8gb3IgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50ICh2aWEgYCRhbmltYXRlLmFkZENsYXNzYCwgYCRhbmltYXRlLnJlbW92ZUNsYXNzYCwKICogYCRhbmltYXRlLnNldENsYXNzYCwgb3IgYnkgZGlyZWN0aXZlcyBzdWNoIGFzIGBuZ0NsYXNzYCwgYG5nTW9kZWxgIGFuZCBgZm9ybWApLgogKiBUaGV5IGFyZSBkaWZmZXJlbnQgd2hlbiBjb21wYXJlZCB0byBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnMgc2luY2UgdGhleSAqKmRvIG5vdCBjYW5jZWwgZXhpc3RpbmcKICogYW5pbWF0aW9ucyoqIG5vciBkbyB0aGV5ICoqYmxvY2sgc3VjY2Vzc2l2ZSB0cmFuc2l0aW9ucyoqIGZyb20gcmVuZGVyaW5nIG9uIHRoZSBzYW1lIGVsZW1lbnQuCiAqIFRoaXMgZGlzdGluY3Rpb24gYWxsb3dzIGZvciAqKm11bHRpcGxlIGNsYXNzLWJhc2VkIHRyYW5zaXRpb25zKiogdG8gYmUgcGVyZm9ybWVkIG9uIHRoZSBzYW1lIGVsZW1lbnQuCiAqCiAqIEluIGFkZGl0aW9uIHRvIG5nQW5pbWF0ZSBzdXBwb3J0aW5nIHRoZSBkZWZhdWx0IChuYXR1cmFsKSBmdW5jdGlvbmFsaXR5IG9mIGNsYXNzLWJhc2VkIHRyYW5zaXRpb24KICogYW5pbWF0aW9ucywgbmdBbmltYXRlIGFsc28gZGVjb3JhdGVzIHRoZSBlbGVtZW50IHdpdGggc3RhcnRpbmcgYW5kIGVuZGluZyBDU1MgY2xhc3NlcyB0byBhaWQgdGhlCiAqIGRldmVsb3BlciBpbiBmdXJ0aGVyIHN0eWxpbmcgdGhlIGVsZW1lbnQgdGhyb3VnaG91dCB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb24uIEVhcmxpZXIgdmVyc2lvbnMKICogb2YgbmdBbmltYXRlIG1heSBoYXZlIGNhdXNlZCBuYXR1cmFsIENTUyB0cmFuc2l0aW9ucyB0byBicmVhayBhbmQgbm90IHJlbmRlciBwcm9wZXJseSBkdWUgdG8KICogJGFuaW1hdGUgdGVtcG9yYXJpbHkgYmxvY2tpbmcgdHJhbnNpdGlvbnMgdXNpbmcgYDBzIG5vbmVgIGluIG9yZGVyIHRvIGFsbG93IHRoZSBzZXR1cCBDU1MgY2xhc3MKICogKHRoZSBgLWFkZGAgb3IgYC1yZW1vdmVgIGNsYXNzKSB0byBiZSBhcHBsaWVkIHdpdGhvdXQgdHJpZ2dlcmluZyBhbiBhbmltYXRpb24uIEhvd2V2ZXIsIGFzIG9mCiAqICoqdmVyc2lvbiAxLjMqKiwgdGhpcyB3b3JrYXJvdW5kIGhhcyBiZWVuIHJlbW92ZWQgd2l0aCBuZ0FuaW1hdGUgYW5kIGFsbCBub24tbmdBbmltYXRlIENTUwogKiBjbGFzcyB0cmFuc2l0aW9ucyBhcmUgY29tcGF0aWJsZSB3aXRoIG5nQW5pbWF0ZS4KICoKICogVGhlcmUgaXMsIGhvd2V2ZXIsIG9uZSBzcGVjaWFsIGNhc2Ugd2hlbiBkZWFsaW5nIHdpdGggY2xhc3MtYmFzZWQgdHJhbnNpdGlvbnMgaW4gbmdBbmltYXRlLgogKiBXaGVuIHJlbmRlcmluZyBjbGFzcy1iYXNlZCB0cmFuc2l0aW9ucyB0aGF0IG1ha2UgdXNlIG9mIHRoZSBzZXR1cCBhbmQgYWN0aXZlIENTUyBjbGFzc2VzCiAqIChlLmcuIGAuZmFkZS1hZGRgIGFuZCBgLmZhZGUtYWRkLWFjdGl2ZWAgZm9yIHdoZW4gYC5mYWRlYCBpcyBhZGRlZCkgYmUgc3VyZSB0byBkZWZpbmUKICogdGhlIHRyYW5zaXRpb24gdmFsdWUgKipvbiB0aGUgYWN0aXZlIENTUyBjbGFzcyoqIGFuZCBub3QgdGhlIHNldHVwIGNsYXNzLgogKgogKiBgYGBjc3MKICogLmZhZGUtYWRkIHsKICogICAvJiM0MjsgcmVtZW1iZXIgdG8gcGxhY2UgYSAwcyB0cmFuc2l0aW9uIGhlcmUKICogICAgICB0byBlbnN1cmUgdGhhdCB0aGUgc3R5bGVzIGFyZSBhcHBsaWVkIGluc3RhbnRseQogKiAgICAgIGV2ZW4gaWYgdGhlIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSB0cmFuc2l0aW9uIHN0eWxlICYjNDI7LwogKiAgIHRyYW5zaXRpb246MHMgbGluZWFyIGFsbDsKICoKICogICAvJiM0Mjsgc3RhcnRpbmcgQ1NTIHN0eWxlcyAmIzQyOy8KICogICBvcGFjaXR5OjE7CiAqIH0KICogLmZhZGUtYWRkLmZhZGUtYWRkLWFjdGl2ZSB7CiAqICAgLyYjNDI7IHRoaXMgd2lsbCBiZSB0aGUgbGVuZ3RoIG9mIHRoZSBhbmltYXRpb24gJiM0MjsvCiAqICAgdHJhbnNpdGlvbjoxcyBsaW5lYXIgYWxsOwogKiAgIG9wYWNpdHk6MDsKICogfQogKiBgYGAKICoKICogVGhlIHNldHVwIENTUyBjbGFzcyAoaW4gdGhpcyBjYXNlIGAuZmFkZS1hZGRgKSBhbHNvIGhhcyBhIHRyYW5zaXRpb24gc3R5bGUgcHJvcGVydHksIGhvd2V2ZXIsIGl0CiAqIGhhcyBhIGR1cmF0aW9uIG9mIHplcm8uIFRoaXMgbWF5IG5vdCBiZSByZXF1aXJlZCwgaG93ZXZlciwgaW5jYXNlIHRoZSBicm93c2VyIGlzIHVuYWJsZSB0byByZW5kZXIKICogdGhlIHN0eWxpbmcgcHJlc2VudCBpbiB0aGlzIENTUyBjbGFzcyBpbnN0YW50bHkgdGhlbiBpdCBjb3VsZCBiZSB0aGF0IHRoZSBicm93c2VyIGlzIGF0dGVtcHRpbmcKICogdG8gcGVyZm9ybSBhbiB1bm5lY2Vzc2FyeSB0cmFuc2l0aW9uLgogKgogKiBUaGlzIHdvcmthcm91bmQsIGhvd2V2ZXIsIGRvZXMgbm90IGFwcGx5IHRvICBzdGFuZGFyZCBjbGFzcy1iYXNlZCB0cmFuc2l0aW9ucyB0aGF0IGFyZSByZW5kZXJlZAogKiB3aGVuIGEgQ1NTIGNsYXNzIGNvbnRhaW5pbmcgYSB0cmFuc2l0aW9uIGlzIGFwcGxpZWQgdG8gYW4gZWxlbWVudDoKICoKICogYGBgY3NzCiAqIC5mYWRlIHsKICogICAvJiM0MjsgdGhpcyB3b3JrcyBhcyBleHBlY3RlZCAmIzQyOy8KICogICB0cmFuc2l0aW9uOjFzIGxpbmVhciBhbGw7CiAqICAgb3BhY2l0eTowOwogKiB9CiAqIGBgYAogKgogKiBQbGVhc2Uga2VlcCB0aGlzIGluIG1pbmQgd2hlbiBjb2RpbmcgdGhlIENTUyBtYXJrdXAgdGhhdCB3aWxsIGJlIHVzZWQgd2l0aGluIGNsYXNzLWJhc2VkIHRyYW5zaXRpb25zLgogKiBBbHNvLCB0cnkgbm90IHRvIG1peCB0aGUgdHdvIGNsYXNzLWJhc2VkIGFuaW1hdGlvbiBmbGF2b3JzIHRvZ2V0aGVyIHNpbmNlIHRoZSBDU1MgY29kZSBtYXkgYmVjb21lCiAqIG92ZXJseSBjb21wbGV4LgogKgogKiAjIyMgQ1NTIFN0YWdnZXJpbmcgQW5pbWF0aW9ucwogKiBBIFN0YWdnZXJpbmcgYW5pbWF0aW9uIGlzIGEgY29sbGVjdGlvbiBvZiBhbmltYXRpb25zIHRoYXQgYXJlIGlzc3VlZCB3aXRoIGEgc2xpZ2h0IGRlbGF5IGluIGJldHdlZW4gZWFjaCBzdWNjZXNzaXZlIG9wZXJhdGlvbiByZXN1bHRpbmcgaW4gYQogKiBjdXJ0YWluLWxpa2UgZWZmZWN0LiBUaGUgbmdBbmltYXRlIG1vZHVsZSAodmVyc2lvbnMgPj0xLjIpIHN1cHBvcnRzIHN0YWdnZXJpbmcgYW5pbWF0aW9ucyBhbmQgdGhlIHN0YWdnZXIgZWZmZWN0IGNhbiBiZQogKiBwZXJmb3JtZWQgYnkgY3JlYXRpbmcgYSAqKm5nLUVWRU5ULXN0YWdnZXIqKiBDU1MgY2xhc3MgYW5kIGF0dGFjaGluZyB0aGF0IGNsYXNzIHRvIHRoZSBiYXNlIENTUyBjbGFzcyB1c2VkIGZvcgogKiB0aGUgYW5pbWF0aW9uLiBUaGUgc3R5bGUgcHJvcGVydHkgZXhwZWN0ZWQgd2l0aGluIHRoZSBzdGFnZ2VyIGNsYXNzIGNhbiBlaXRoZXIgYmUgYSAqKnRyYW5zaXRpb24tZGVsYXkqKiBvciBhbgogKiAqKmFuaW1hdGlvbi1kZWxheSoqIHByb3BlcnR5IChvciBib3RoIGlmIHlvdXIgYW5pbWF0aW9uIGNvbnRhaW5zIGJvdGggdHJhbnNpdGlvbnMgYW5kIGtleWZyYW1lIGFuaW1hdGlvbnMpLgogKgogKiBgYGBjc3MKICogLm15LWFuaW1hdGlvbi5uZy1lbnRlciB7CiAqICAgLyYjNDI7IHN0YW5kYXJkIHRyYW5zaXRpb24gY29kZSAmIzQyOy8KICogICAtd2Via2l0LXRyYW5zaXRpb246IDFzIGxpbmVhciBhbGw7CiAqICAgdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDsKICogICBvcGFjaXR5OjA7CiAqIH0KICogLm15LWFuaW1hdGlvbi5uZy1lbnRlci1zdGFnZ2VyIHsKICogICAvJiM0MjsgdGhpcyB3aWxsIGhhdmUgYSAxMDBtcyBkZWxheSBiZXR3ZWVuIGVhY2ggc3VjY2Vzc2l2ZSBsZWF2ZSBhbmltYXRpb24gJiM0MjsvCiAqICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjFzOwogKiAgIHRyYW5zaXRpb24tZGVsYXk6IDAuMXM7CiAqCiAqICAgLyYjNDI7IGluIGNhc2UgdGhlIHN0YWdnZXIgZG9lc24ndCB3b3JrIHRoZW4gdGhlc2UgdHdvIHZhbHVlcwogKiAgICBtdXN0IGJlIHNldCB0byAwIHRvIGF2b2lkIGFuIGFjY2lkZW50YWwgQ1NTIGluaGVyaXRhbmNlICYjNDI7LwogKiAgIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMHM7CiAqICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMHM7CiAqIH0KICogLm15LWFuaW1hdGlvbi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUgewogKiAgIC8mIzQyOyBzdGFuZGFyZCB0cmFuc2l0aW9uIHN0eWxlcyAmIzQyOy8KICogICBvcGFjaXR5OjE7CiAqIH0KICogYGBgCiAqCiAqIFN0YWdnZXJpbmcgYW5pbWF0aW9ucyB3b3JrIGJ5IGRlZmF1bHQgaW4gbmdSZXBlYXQgKHNvIGxvbmcgYXMgdGhlIENTUyBjbGFzcyBpcyBkZWZpbmVkKS4gT3V0c2lkZSBvZiBuZ1JlcGVhdCwgdG8gdXNlIHN0YWdnZXJpbmcgYW5pbWF0aW9ucwogKiBvbiB5b3VyIG93biwgdGhleSBjYW4gYmUgdHJpZ2dlcmVkIGJ5IGZpcmluZyBtdWx0aXBsZSBjYWxscyB0byB0aGUgc2FtZSBldmVudCBvbiAkYW5pbWF0ZS4gSG93ZXZlciwgdGhlIHJlc3RyaWN0aW9ucyBzdXJyb3VuZGluZyB0aGlzCiAqIGFyZSB0aGF0IGVhY2ggb2YgdGhlIGVsZW1lbnRzIG11c3QgaGF2ZSB0aGUgc2FtZSBDU1MgY2xhc3NOYW1lIHZhbHVlIGFzIHdlbGwgYXMgdGhlIHNhbWUgcGFyZW50IGVsZW1lbnQuIEEgc3RhZ2dlciBvcGVyYXRpb24KICogd2lsbCBhbHNvIGJlIHJlc2V0IGlmIG1vcmUgdGhhbiAxMG1zIGhhcyBwYXNzZWQgYWZ0ZXIgdGhlIGxhc3QgYW5pbWF0aW9uIGhhcyBiZWVuIGZpcmVkLgogKgogKiBUaGUgZm9sbG93aW5nIGNvZGUgd2lsbCBpc3N1ZSB0aGUgKipuZy1sZWF2ZS1zdGFnZ2VyKiogZXZlbnQgb24gdGhlIGVsZW1lbnQgcHJvdmlkZWQ6CiAqCiAqIGBgYGpzCiAqIHZhciBraWRzID0gcGFyZW50LmNoaWxkcmVuKCk7CiAqCiAqICRhbmltYXRlLmxlYXZlKGtpZHNbMF0pOyAvL3N0YWdnZXIgaW5kZXg9MAogKiAkYW5pbWF0ZS5sZWF2ZShraWRzWzFdKTsgLy9zdGFnZ2VyIGluZGV4PTEKICogJGFuaW1hdGUubGVhdmUoa2lkc1syXSk7IC8vc3RhZ2dlciBpbmRleD0yCiAqICRhbmltYXRlLmxlYXZlKGtpZHNbM10pOyAvL3N0YWdnZXIgaW5kZXg9MwogKiAkYW5pbWF0ZS5sZWF2ZShraWRzWzRdKTsgLy9zdGFnZ2VyIGluZGV4PTQKICoKICogJHRpbWVvdXQoZnVuY3Rpb24oKSB7CiAqICAgLy9zdGFnZ2VyIGhhcyByZXNldCBpdHNlbGYKICogICAkYW5pbWF0ZS5sZWF2ZShraWRzWzVdKTsgLy9zdGFnZ2VyIGluZGV4PTAKICogICAkYW5pbWF0ZS5sZWF2ZShraWRzWzZdKTsgLy9zdGFnZ2VyIGluZGV4PTEKICogfSwgMTAwLCBmYWxzZSk7CiAqIGBgYAogKgogKiBTdGFnZ2VyIGFuaW1hdGlvbnMgYXJlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCB3aXRoaW4gQ1NTLWRlZmluZWQgYW5pbWF0aW9ucy4KICoKICogIyMgSmF2YVNjcmlwdC1kZWZpbmVkIEFuaW1hdGlvbnMKICogSW4gdGhlIGV2ZW50IHRoYXQgeW91IGRvIG5vdCB3YW50IHRvIHVzZSBDU1MzIHRyYW5zaXRpb25zIG9yIENTUzMgYW5pbWF0aW9ucyBvciBpZiB5b3Ugd2lzaCB0byBvZmZlciBhbmltYXRpb25zIG9uIGJyb3dzZXJzIHRoYXQgZG8gbm90CiAqIHlldCBzdXBwb3J0IENTUyB0cmFuc2l0aW9ucy9hbmltYXRpb25zLCB0aGVuIHlvdSBjYW4gbWFrZSB1c2Ugb2YgSmF2YVNjcmlwdCBhbmltYXRpb25zIGRlZmluZWQgaW5zaWRlIG9mIHlvdXIgQW5ndWxhckpTIG1vZHVsZS4KICoKICogYGBganMKICogLy8hYW5ub3RhdGU9IllvdXJBcHAiIFlvdXIgQW5ndWxhckpTIE1vZHVsZXxSZXBsYWNlIHRoaXMgb3IgbmdNb2R1bGUgd2l0aCB0aGUgbW9kdWxlIHRoYXQgeW91IHVzZWQgdG8gZGVmaW5lIHlvdXIgYXBwbGljYXRpb24uCiAqIHZhciBuZ01vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdZb3VyQXBwJywgWyduZ0FuaW1hdGUnXSk7CiAqIG5nTW9kdWxlLmFuaW1hdGlvbignLm15LWNyYXp5LWFuaW1hdGlvbicsIGZ1bmN0aW9uKCkgewogKiAgIHJldHVybiB7CiAqICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSkgewogKiAgICAgICAvL3J1biB0aGUgYW5pbWF0aW9uIGhlcmUgYW5kIGNhbGwgZG9uZSB3aGVuIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUKICogICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbmNlbGxlZCkgewogKiAgICAgICAgIC8vdGhpcyAob3B0aW9uYWwpIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGFuaW1hdGlvbgogKiAgICAgICAgIC8vY29tcGxldGVzIG9yIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBjYW5jZWxsZWQgKHRoZSBjYW5jZWxsZWQKICogICAgICAgICAvL2ZsYWcgd2lsbCBiZSBzZXQgdG8gdHJ1ZSBpZiBjYW5jZWxsZWQpLgogKiAgICAgICB9OwogKiAgICAgfSwKICogICAgIGxlYXZlOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7IH0sCiAqICAgICBtb3ZlOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7IH0sCiAqCiAqICAgICAvL2FuaW1hdGlvbiB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgYmVmb3JlIHRoZSBjbGFzcyBpcyBhZGRlZAogKiAgICAgYmVmb3JlQWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkgeyB9LAogKgogKiAgICAgLy9hbmltYXRpb24gdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGFmdGVyIHRoZSBjbGFzcyBpcyBhZGRlZAogKiAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkgeyB9LAogKgogKiAgICAgLy9hbmltYXRpb24gdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGJlZm9yZSB0aGUgY2xhc3MgaXMgcmVtb3ZlZAogKiAgICAgYmVmb3JlUmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkgeyB9LAogKgogKiAgICAgLy9hbmltYXRpb24gdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGFmdGVyIHRoZSBjbGFzcyBpcyByZW1vdmVkCiAqICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7IH0KICogICB9OwogKiB9KTsKICogYGBgCiAqCiAqIEphdmFTY3JpcHQtZGVmaW5lZCBhbmltYXRpb25zIGFyZSBjcmVhdGVkIHdpdGggYSBDU1MtbGlrZSBjbGFzcyBzZWxlY3RvciBhbmQgYSBjb2xsZWN0aW9uIG9mIGV2ZW50cyB3aGljaCBhcmUgc2V0IHRvIHJ1bgogKiBhIGphdmFzY3JpcHQgY2FsbGJhY2sgZnVuY3Rpb24uIFdoZW4gYW4gYW5pbWF0aW9uIGlzIHRyaWdnZXJlZCwgJGFuaW1hdGUgd2lsbCBsb29rIGZvciBhIG1hdGNoaW5nIGFuaW1hdGlvbiB3aGljaCBmaXRzCiAqIHRoZSBlbGVtZW50J3MgQ1NTIGNsYXNzIGF0dHJpYnV0ZSB2YWx1ZSBhbmQgdGhlbiBydW4gdGhlIG1hdGNoaW5nIGFuaW1hdGlvbiBldmVudCBmdW5jdGlvbiAoaWYgZm91bmQpLgogKiBJbiBvdGhlciB3b3JkcywgaWYgdGhlIENTUyBjbGFzc2VzIHByZXNlbnQgb24gdGhlIGFuaW1hdGVkIGVsZW1lbnQgbWF0Y2ggYW55IG9mIHRoZSBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgdGhlbiB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2lsbAogKiBiZSBleGVjdXRlZC4gSXQgc2hvdWxkIGJlIGFsc28gbm90ZWQgdGhhdCBvbmx5IHNpbXBsZSwgc2luZ2xlIGNsYXNzIHNlbGVjdG9ycyBhcmUgYWxsb3dlZCAoY29tcG91bmQgY2xhc3Mgc2VsZWN0b3JzIGFyZSBub3Qgc3VwcG9ydGVkKS4KICoKICogV2l0aGluIGEgSmF2YVNjcmlwdCBhbmltYXRpb24sIGFuIG9iamVjdCBjb250YWluaW5nIHZhcmlvdXMgZXZlbnQgY2FsbGJhY2sgYW5pbWF0aW9uIGZ1bmN0aW9ucyBpcyBleHBlY3RlZCB0byBiZSByZXR1cm5lZC4KICogQXMgZXhwbGFpbmVkIGFib3ZlLCB0aGVzZSBjYWxsYmFja3MgYXJlIHRyaWdnZXJlZCBiYXNlZCBvbiB0aGUgYW5pbWF0aW9uIGV2ZW50LiBUaGVyZWZvcmUgaWYgYW4gZW50ZXIgYW5pbWF0aW9uIGlzIHJ1biwKICogYW5kIHRoZSBKYXZhU2NyaXB0IGFuaW1hdGlvbiBpcyBmb3VuZCwgdGhlbiB0aGUgZW50ZXIgY2FsbGJhY2sgd2lsbCBoYW5kbGUgdGhhdCBhbmltYXRpb24gKGluIGFkZGl0aW9uIHRvIHRoZSBDU1Mga2V5ZnJhbWUgYW5pbWF0aW9uCiAqIG9yIHRyYW5zaXRpb24gY29kZSB0aGF0IGlzIGRlZmluZWQgdmlhIGEgc3R5bGVzaGVldCkuCiAqCiAqCiAqICMjIyBBcHBseWluZyBEaXJlY3RpdmUtc3BlY2lmaWMgU3R5bGVzIHRvIGFuIEFuaW1hdGlvbgogKiBJbiBzb21lIGNhc2VzIGEgZGlyZWN0aXZlIG9yIHNlcnZpY2UgbWF5IHdhbnQgdG8gcHJvdmlkZSBgJGFuaW1hdGVgIHdpdGggZXh0cmEgZGV0YWlscyB0aGF0IHRoZSBhbmltYXRpb24gd2lsbAogKiBpbmNsdWRlIGludG8gaXRzIGFuaW1hdGlvbi4gTGV0J3Mgc2F5IGZvciBleGFtcGxlIHdlIHdhbnRlZCB0byByZW5kZXIgYW4gYW5pbWF0aW9uIHRoYXQgYW5pbWF0ZXMgYW4gZWxlbWVudAogKiB0b3dhcmRzIHRoZSBtb3VzZSBjb29yZGluYXRlcyBhcyB0byB3aGVyZSB0aGUgdXNlciBjbGlja2VkIGxhc3QuIEJ5IGNvbGxlY3RpbmcgdGhlIFgvWSBjb29yZGluYXRlcyBvZiB0aGUgY2xpY2sKICogKHZpYSB0aGUgZXZlbnQgcGFyYW1ldGVyKSB3ZSBjYW4gc2V0IHRoZSBgdG9wYCBhbmQgYGxlZnRgIHN0eWxlcyBpbnRvIGFuIG9iamVjdCBhbmQgcGFzcyB0aGF0IGludG8gb3VyIGZ1bmN0aW9uCiAqIGNhbGwgdG8gYCRhbmltYXRlLmFkZENsYXNzYC4KICoKICogYGBganMKICogY2FudmFzLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICogICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCAnb24nLCB7CiAqICAgICB0bzogewogKiAgICAgICBsZWZ0IDogZS5jbGllbnQueCArICdweCcsCiAqICAgICAgIHRvcCA6IGUuY2xpZW50LnkgKyAncHgnCiAqICAgICB9CiAqICAgfSk6CiAqIH0pOwogKiBgYGAKICoKICogTm93IHdoZW4gdGhlIGFuaW1hdGlvbiBydW5zLCBhbmQgYSB0cmFuc2l0aW9uIG9yIGtleWZyYW1lIGFuaW1hdGlvbiBpcyBwaWNrZWQgdXAsIHRoZW4gdGhlIGFuaW1hdGlvbiBpdHNlbGYgd2lsbAogKiBhbHNvIGluY2x1ZGUgYW5kIHRyYW5zaXRpb24gdGhlIHN0eWxpbmcgb2YgdGhlIGBsZWZ0YCBhbmQgYHRvcGAgcHJvcGVydGllcyBpbnRvIGl0cyBydW5uaW5nIGFuaW1hdGlvbi4gSWYgd2Ugd2FudAogKiB0byBwcm92aWRlIHNvbWUgc3RhcnRpbmcgYW5pbWF0aW9uIHZhbHVlcyB0aGVuIHdlIGNhbiBkbyBzbyBieSBwbGFjaW5nIHRoZSBzdGFydGluZyBhbmltYXRpb25zIHN0eWxlcyBpbnRvIGFuIG9iamVjdAogKiBjYWxsZWQgYGZyb21gIGluIHRoZSBzYW1lIG9iamVjdCBhcyB0aGUgYHRvYCBhbmltYXRpb25zLgogKgogKiBgYGBqcwogKiBjYW52YXMub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkgewogKiAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsICdvbicsIHsKICogICAgIGZyb206IHsKICogICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLAogKiAgICAgICAgbGVmdDogJzBweCcsCiAqICAgICAgICB0b3A6ICcwcHgnCiAqICAgICB9LAogKiAgICAgdG86IHsKICogICAgICAgbGVmdCA6IGUuY2xpZW50LnggKyAncHgnLAogKiAgICAgICB0b3AgOiBlLmNsaWVudC55ICsgJ3B4JwogKiAgICAgfQogKiAgIH0pOgogKiB9KTsKICogYGBgCiAqCiAqIE9uY2UgdGhlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZSBvciBjYW5jZWxsZWQgdGhlbiB0aGUgdW5pb24gb2YgYm90aCB0aGUgYmVmb3JlIGFuZCBhZnRlciBzdHlsZXMgYXJlIGFwcGxpZWQgdG8gdGhlCiAqIGVsZW1lbnQuIElmIGBuZ0FuaW1hdGVgIGlzIG5vdCBwcmVzZW50IHRoZW4gdGhlIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgaW1tZWRpYXRlbHkuCiAqCiAqLwoKYW5ndWxhci5tb2R1bGUoJ25nQW5pbWF0ZScsIFsnbmcnXSkKCiAgLyoqCiAgICogQG5nZG9jIHByb3ZpZGVyCiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlcgogICAqIEBkZXNjcmlwdGlvbgogICAqCiAgICogVGhlIGAkYW5pbWF0ZVByb3ZpZGVyYCBhbGxvd3MgZGV2ZWxvcGVycyB0byByZWdpc3RlciBKYXZhU2NyaXB0IGFuaW1hdGlvbiBldmVudCBoYW5kbGVycyBkaXJlY3RseSBpbnNpZGUgb2YgYSBtb2R1bGUuCiAgICogV2hlbiBhbiBhbmltYXRpb24gaXMgdHJpZ2dlcmVkLCB0aGUgJGFuaW1hdGUgc2VydmljZSB3aWxsIHF1ZXJ5IHRoZSAkYW5pbWF0ZSBzZXJ2aWNlIHRvIGZpbmQgYW55IGFuaW1hdGlvbnMgdGhhdCBtYXRjaAogICAqIHRoZSBwcm92aWRlZCBuYW1lIHZhbHVlLgogICAqCiAgICogUmVxdWlyZXMgdGhlIHtAbGluayBuZ0FuaW1hdGUgYG5nQW5pbWF0ZWB9IG1vZHVsZSB0byBiZSBpbnN0YWxsZWQuCiAgICoKICAgKiBQbGVhc2UgdmlzaXQgdGhlIHtAbGluayBuZ0FuaW1hdGUgYG5nQW5pbWF0ZWB9IG1vZHVsZSBvdmVydmlldyBwYWdlIGxlYXJuIG1vcmUgYWJvdXQgaG93IHRvIHVzZSBhbmltYXRpb25zIGluIHlvdXIgYXBwbGljYXRpb24uCiAgICoKICAgKi8KICAuZGlyZWN0aXZlKCduZ0FuaW1hdGVDaGlsZHJlbicsIGZ1bmN0aW9uKCkgewogICAgdmFyIE5HX0FOSU1BVEVfQ0hJTERSRU4gPSAnJCRuZ0FuaW1hdGVDaGlsZHJlbic7CiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7CiAgICAgIHZhciB2YWwgPSBhdHRycy5uZ0FuaW1hdGVDaGlsZHJlbjsKICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcodmFsKSAmJiB2YWwubGVuZ3RoID09PSAwKSB7IC8vZW1wdHkgYXR0cmlidXRlCiAgICAgICAgZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfQ0hJTERSRU4sIHRydWUpOwogICAgICB9IGVsc2UgewogICAgICAgIHNjb3BlLiR3YXRjaCh2YWwsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DSElMRFJFTiwgISF2YWx1ZSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CiAgfSkKCiAgLy90aGlzIHByaXZhdGUgc2VydmljZSBpcyBvbmx5IHVzZWQgd2l0aGluIENTUy1lbmFibGVkIGFuaW1hdGlvbnMKICAvL0lFOCArIElFOSBkbyBub3Qgc3VwcG9ydCByQUYgbmF0aXZlbHksIGJ1dCB0aGF0IGlzIGZpbmUgc2luY2UgdGhleQogIC8vYWxzbyBkb24ndCBzdXBwb3J0IHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZXMgd2hpY2ggbWVhbnMgdGhhdCB0aGUgY29kZQogIC8vYmVsb3cgd2lsbCBuZXZlciBiZSB1c2VkIGJ5IHRoZSB0d28gYnJvd3NlcnMuCiAgLmZhY3RvcnkoJyQkYW5pbWF0ZVJlZmxvdycsIFsnJCRyQUYnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJCRyQUYsICRkb2N1bWVudCkgewogICAgdmFyIGJvZCA9ICRkb2N1bWVudFswXS5ib2R5OwogICAgcmV0dXJuIGZ1bmN0aW9uKGZuKSB7CiAgICAgIC8vdGhlIHJldHVybmVkIGZ1bmN0aW9uIGFjdHMgYXMgdGhlIGNhbmNlbGxhdGlvbiBmdW5jdGlvbgogICAgICByZXR1cm4gJCRyQUYoZnVuY3Rpb24oKSB7CiAgICAgICAgLy90aGUgbGluZSBiZWxvdyB3aWxsIGZvcmNlIHRoZSBicm93c2VyIHRvIHBlcmZvcm0gYSByZXBhaW50CiAgICAgICAgLy9zbyB0aGF0IGFsbCB0aGUgYW5pbWF0ZWQgZWxlbWVudHMgd2l0aGluIHRoZSBhbmltYXRpb24gZnJhbWUKICAgICAgICAvL3dpbGwgYmUgcHJvcGVybHkgdXBkYXRlZCBhbmQgZHJhd24gb24gc2NyZWVuLiBUaGlzIGlzCiAgICAgICAgLy9yZXF1aXJlZCB0byBwZXJmb3JtIG11bHRpLWNsYXNzIENTUyBiYXNlZCBhbmltYXRpb25zIHdpdGgKICAgICAgICAvL0ZpcmVmb3guIERPIE5PVCBSRU1PVkUgVEhJUyBMSU5FLgogICAgICAgIHZhciBhID0gYm9kLm9mZnNldFdpZHRoICsgMTsKICAgICAgICBmbigpOwogICAgICB9KTsKICAgIH07CiAgfV0pCgogIC5jb25maWcoWyckcHJvdmlkZScsICckYW5pbWF0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJHByb3ZpZGUsICRhbmltYXRlUHJvdmlkZXIpIHsKICAgIHZhciBub29wID0gYW5ndWxhci5ub29wOwogICAgdmFyIGZvckVhY2ggPSBhbmd1bGFyLmZvckVhY2g7CiAgICB2YXIgc2VsZWN0b3JzID0gJGFuaW1hdGVQcm92aWRlci4kJHNlbGVjdG9yczsKICAgIHZhciBpc0FycmF5ID0gYW5ndWxhci5pc0FycmF5OwogICAgdmFyIGlzU3RyaW5nID0gYW5ndWxhci5pc1N0cmluZzsKICAgIHZhciBpc09iamVjdCA9IGFuZ3VsYXIuaXNPYmplY3Q7CgogICAgdmFyIEVMRU1FTlRfTk9ERSA9IDE7CiAgICB2YXIgTkdfQU5JTUFURV9TVEFURSA9ICckJG5nQW5pbWF0ZVN0YXRlJzsKICAgIHZhciBOR19BTklNQVRFX0NISUxEUkVOID0gJyQkbmdBbmltYXRlQ2hpbGRyZW4nOwogICAgdmFyIE5HX0FOSU1BVEVfQ0xBU1NfTkFNRSA9ICduZy1hbmltYXRlJzsKICAgIHZhciByb290QW5pbWF0ZVN0YXRlID0ge3J1bm5pbmc6IHRydWV9OwoKICAgIGZ1bmN0aW9uIGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KSB7CiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBlbGVtZW50Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGVsbSA9IGVsZW1lbnRbaV07CiAgICAgICAgaWYgKGVsbS5ub2RlVHlwZSA9PSBFTEVNRU5UX05PREUpIHsKICAgICAgICAgIHJldHVybiBlbG07CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcHJlcGFyZUVsZW1lbnQoZWxlbWVudCkgewogICAgICByZXR1cm4gZWxlbWVudCAmJiBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudCk7CiAgICB9CgogICAgZnVuY3Rpb24gc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KGVsZW1lbnQpIHsKICAgICAgcmV0dXJuIGFuZ3VsYXIuZWxlbWVudChleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGlzTWF0Y2hpbmdFbGVtZW50KGVsbTEsIGVsbTIpIHsKICAgICAgcmV0dXJuIGV4dHJhY3RFbGVtZW50Tm9kZShlbG0xKSA9PSBleHRyYWN0RWxlbWVudE5vZGUoZWxtMik7CiAgICB9CgogICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckYW5pbWF0ZScsCiAgICAgICAgWyckZGVsZWdhdGUnLCAnJCRxJywgJyRpbmplY3RvcicsICckc25pZmZlcicsICckcm9vdEVsZW1lbnQnLCAnJCRhc3luY0NhbGxiYWNrJywgJyRyb290U2NvcGUnLCAnJGRvY3VtZW50JywgJyR0ZW1wbGF0ZVJlcXVlc3QnLAogZnVuY3Rpb24oJGRlbGVnYXRlLCAgICQkcSwgICAkaW5qZWN0b3IsICAgJHNuaWZmZXIsICAgJHJvb3RFbGVtZW50LCAgICQkYXN5bmNDYWxsYmFjaywgICAkcm9vdFNjb3BlLCAgICRkb2N1bWVudCwgICAkdGVtcGxhdGVSZXF1ZXN0KSB7CgogICAgICAkcm9vdEVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFLCByb290QW5pbWF0ZVN0YXRlKTsKCiAgICAgIC8vIFdhaXQgdW50aWwgYWxsIGRpcmVjdGl2ZSBhbmQgcm91dGUtcmVsYXRlZCB0ZW1wbGF0ZXMgYXJlIGRvd25sb2FkZWQgYW5kCiAgICAgIC8vIGNvbXBpbGVkLiBUaGUgJHRlbXBsYXRlUmVxdWVzdC50b3RhbFBlbmRpbmdSZXF1ZXN0cyB2YXJpYWJsZSBrZWVwcyB0cmFjayBvZgogICAgICAvLyBhbGwgb2YgdGhlIHJlbW90ZSB0ZW1wbGF0ZXMgYmVpbmcgY3VycmVudGx5IGRvd25sb2FkZWQuIElmIHRoZXJlIGFyZSBubwogICAgICAvLyB0ZW1wbGF0ZXMgY3VycmVudGx5IGRvd25sb2FkaW5nIHRoZW4gdGhlIHdhdGNoZXIgd2lsbCBzdGlsbCBmaXJlIGFueXdheS4KICAgICAgdmFyIGRlcmVnaXN0ZXJXYXRjaCA9ICRyb290U2NvcGUuJHdhdGNoKAogICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gJHRlbXBsYXRlUmVxdWVzdC50b3RhbFBlbmRpbmdSZXF1ZXN0czsgfSwKICAgICAgICBmdW5jdGlvbih2YWwsIG9sZFZhbCkgewogICAgICAgICAgaWYgKHZhbCAhPT0gMCkgcmV0dXJuOwogICAgICAgICAgZGVyZWdpc3RlcldhdGNoKCk7CgogICAgICAgICAgLy8gTm93IHRoYXQgYWxsIHRlbXBsYXRlcyBoYXZlIGJlZW4gZG93bmxvYWRlZCwgJGFuaW1hdGUgd2lsbCB3YWl0IHVudGlsCiAgICAgICAgICAvLyB0aGUgcG9zdCBkaWdlc3QgcXVldWUgaXMgZW1wdHkgYmVmb3JlIGVuYWJsaW5nIGFuaW1hdGlvbnMuIEJ5IGhhdmluZyB0d28KICAgICAgICAgIC8vIGNhbGxzIHRvICRwb3N0RGlnZXN0IGNhbGxzIHdlIGNhbiBlbnN1cmUgdGhhdCB0aGUgZmxhZyBpcyBlbmFibGVkIGF0IHRoZQogICAgICAgICAgLy8gdmVyeSBlbmQgb2YgdGhlIHBvc3QgZGlnZXN0IHF1ZXVlLiBTaW5jZSBhbGwgb2YgdGhlIGFuaW1hdGlvbnMgaW4gJGFuaW1hdGUKICAgICAgICAgIC8vIHVzZSAkcG9zdERpZ2VzdCwgaXQncyBpbXBvcnRhbnQgdGhhdCB0aGUgY29kZSBiZWxvdyBleGVjdXRlcyBhdCB0aGUgZW5kLgogICAgICAgICAgLy8gVGhpcyBiYXNpY2FsbHkgbWVhbnMgdGhhdCB0aGUgcGFnZSBpcyBmdWxseSBkb3dubG9hZGVkIGFuZCBjb21waWxlZCBiZWZvcmUKICAgICAgICAgIC8vIGFueSBhbmltYXRpb25zIGFyZSB0cmlnZ2VyZWQuCiAgICAgICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHsKICAgICAgICAgICAgJHJvb3RTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgcm9vdEFuaW1hdGVTdGF0ZS5ydW5uaW5nID0gZmFsc2U7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICApOwoKICAgICAgdmFyIGdsb2JhbEFuaW1hdGlvbkNvdW50ZXIgPSAwOwogICAgICB2YXIgY2xhc3NOYW1lRmlsdGVyID0gJGFuaW1hdGVQcm92aWRlci5jbGFzc05hbWVGaWx0ZXIoKTsKICAgICAgdmFyIGlzQW5pbWF0YWJsZUNsYXNzTmFtZSA9ICFjbGFzc05hbWVGaWx0ZXIKICAgICAgICAgICAgICA/IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfQogICAgICAgICAgICAgIDogZnVuY3Rpb24oY2xhc3NOYW1lKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY2xhc3NOYW1lRmlsdGVyLnRlc3QoY2xhc3NOYW1lKTsKICAgICAgICAgICAgICB9OwoKICAgICAgZnVuY3Rpb24gY2xhc3NCYXNlZEFuaW1hdGlvbnNCbG9ja2VkKGVsZW1lbnQsIHNldHRlcikgewogICAgICAgIHZhciBkYXRhID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpIHx8IHt9OwogICAgICAgIGlmIChzZXR0ZXIpIHsKICAgICAgICAgIGRhdGEucnVubmluZyA9IHRydWU7CiAgICAgICAgICBkYXRhLnN0cnVjdHVyYWwgPSB0cnVlOwogICAgICAgICAgZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUsIGRhdGEpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZGF0YS5kaXNhYmxlZCB8fCAoZGF0YS5ydW5uaW5nICYmIGRhdGEuc3RydWN0dXJhbCk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHJ1bkFuaW1hdGlvblBvc3REaWdlc3QoZm4pIHsKICAgICAgICB2YXIgY2FuY2VsRm4sIGRlZmVyID0gJCRxLmRlZmVyKCk7CiAgICAgICAgZGVmZXIucHJvbWlzZS4kJGNhbmNlbEZuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBjYW5jZWxGbiAmJiBjYW5jZWxGbigpOwogICAgICAgIH07CiAgICAgICAgJHJvb3RTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7CiAgICAgICAgICBjYW5jZWxGbiA9IGZuKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBkZWZlci5yZXNvbHZlKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gcGFyc2VBbmltYXRlT3B0aW9ucyhvcHRpb25zKSB7CiAgICAgICAgLy8gc29tZSBwbHVnaW4gY29kZSBtYXkgc3RpbGwgYmUgcGFzc2luZyBpbiB0aGUgY2FsbGJhY2sKICAgICAgICAvLyBmdW5jdGlvbiBhcyB0aGUgbGFzdCBwYXJhbSBmb3IgdGhlICRhbmltYXRlIG1ldGhvZHMgc28KICAgICAgICAvLyBpdCdzIGJlc3QgdG8gb25seSBhbGxvdyBzdHJpbmcgb3IgYXJyYXkgdmFsdWVzIGZvciBub3cKICAgICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHsKICAgICAgICAgIGlmIChvcHRpb25zLnRlbXBDbGFzc2VzICYmIGlzU3RyaW5nKG9wdGlvbnMudGVtcENsYXNzZXMpKSB7CiAgICAgICAgICAgIG9wdGlvbnMudGVtcENsYXNzZXMgPSBvcHRpb25zLnRlbXBDbGFzc2VzLnNwbGl0KC9ccysvKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBvcHRpb25zOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZnVuY3Rpb24gcmVzb2x2ZUVsZW1lbnRDbGFzc2VzKGVsZW1lbnQsIGNhY2hlLCBydW5uaW5nQW5pbWF0aW9ucykgewogICAgICAgIHJ1bm5pbmdBbmltYXRpb25zID0gcnVubmluZ0FuaW1hdGlvbnMgfHwge307CgogICAgICAgIHZhciBsb29rdXAgPSB7fTsKICAgICAgICBmb3JFYWNoKHJ1bm5pbmdBbmltYXRpb25zLCBmdW5jdGlvbihkYXRhLCBzZWxlY3RvcikgewogICAgICAgICAgZm9yRWFjaChzZWxlY3Rvci5zcGxpdCgnICcpLCBmdW5jdGlvbihzKSB7CiAgICAgICAgICAgIGxvb2t1cFtzXT1kYXRhOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBoYXNDbGFzc2VzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgICBmb3JFYWNoKChlbGVtZW50LmF0dHIoJ2NsYXNzJykgfHwgJycpLnNwbGl0KC9ccysvKSwgZnVuY3Rpb24oY2xhc3NOYW1lKSB7CiAgICAgICAgICBoYXNDbGFzc2VzW2NsYXNzTmFtZV0gPSB0cnVlOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgdG9BZGQgPSBbXSwgdG9SZW1vdmUgPSBbXTsKICAgICAgICBmb3JFYWNoKGNhY2hlLmNsYXNzZXMsIGZ1bmN0aW9uKHN0YXR1cywgY2xhc3NOYW1lKSB7CiAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSBoYXNDbGFzc2VzW2NsYXNzTmFtZV07CiAgICAgICAgICB2YXIgbWF0Y2hpbmdBbmltYXRpb24gPSBsb29rdXBbY2xhc3NOYW1lXSB8fCB7fTsKCiAgICAgICAgICAvLyBXaGVuIGFkZENsYXNzIGFuZCByZW1vdmVDbGFzcyBpcyBjYWxsZWQgdGhlbiAkYW5pbWF0ZSB3aWxsIGNoZWNrIHRvCiAgICAgICAgICAvLyBzZWUgaWYgYWRkQ2xhc3MgYW5kIHJlbW92ZUNsYXNzIGNhbmNlbCBlYWNoIG90aGVyIG91dC4gV2hlbiB0aGVyZSBhcmUKICAgICAgICAgIC8vIG1vcmUgY2FsbHMgdG8gcmVtb3ZlQ2xhc3MgdGhhbiBhZGRDbGFzcyB0aGVuIHRoZSBjb3VudCBmYWxscyBiZWxvdyAwCiAgICAgICAgICAvLyBhbmQgdGhlbiB0aGUgcmVtb3ZlQ2xhc3MgYW5pbWF0aW9uIHdpbGwgYmUgYWxsb3dlZC4gT3RoZXJ3aXNlIGlmIHRoZQogICAgICAgICAgLy8gY291bnQgaXMgYWJvdmUgMCB0aGVuIHRoYXQgbWVhbnMgYW4gYWRkQ2xhc3MgYW5pbWF0aW9uIHdpbGwgY29tbWVuY2UuCiAgICAgICAgICAvLyBPbmNlIGFuIGFuaW1hdGlvbiBpcyBhbGxvd2VkIHRoZW4gdGhlIGNvZGUgd2lsbCBhbHNvIGNoZWNrIHRvIHNlZSBpZgogICAgICAgICAgLy8gdGhlcmUgZXhpc3RzIGFueSBvbi1nb2luZyBhbmltYXRpb24gdGhhdCBpcyBhbHJlYWR5IGFkZGluZyBvciByZW12b2luZwogICAgICAgICAgLy8gdGhlIG1hdGNoaW5nIENTUyBjbGFzcy4KICAgICAgICAgIGlmIChzdGF0dXMgPT09IGZhbHNlKSB7CiAgICAgICAgICAgIC8vZG9lcyBpdCBoYXZlIHRoZSBjbGFzcyBvciB3aWxsIGl0IGhhdmUgdGhlIGNsYXNzCiAgICAgICAgICAgIGlmIChoYXNDbGFzcyB8fCBtYXRjaGluZ0FuaW1hdGlvbi5ldmVudCA9PSAnYWRkQ2xhc3MnKSB7CiAgICAgICAgICAgICAgdG9SZW1vdmUucHVzaChjbGFzc05hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gdHJ1ZSkgewogICAgICAgICAgICAvL2lzIHRoZSBjbGFzcyBtaXNzaW5nIG9yIHdpbGwgaXQgYmUgcmVtb3ZlZD8KICAgICAgICAgICAgaWYgKCFoYXNDbGFzcyB8fCBtYXRjaGluZ0FuaW1hdGlvbi5ldmVudCA9PSAncmVtb3ZlQ2xhc3MnKSB7CiAgICAgICAgICAgICAgdG9BZGQucHVzaChjbGFzc05hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiAodG9BZGQubGVuZ3RoICsgdG9SZW1vdmUubGVuZ3RoKSA+IDAgJiYgW3RvQWRkLmpvaW4oJyAnKSwgdG9SZW1vdmUuam9pbignICcpXTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gbG9va3VwKG5hbWUpIHsKICAgICAgICBpZiAobmFtZSkgewogICAgICAgICAgdmFyIG1hdGNoZXMgPSBbXSwKICAgICAgICAgICAgICBmbGFnTWFwID0ge30sCiAgICAgICAgICAgICAgY2xhc3NlcyA9IG5hbWUuc3Vic3RyKDEpLnNwbGl0KCcuJyk7CgogICAgICAgICAgLy90aGUgZW1wdHkgc3RyaW5nIHZhbHVlIGlzIHRoZSBkZWZhdWx0IGFuaW1hdGlvbgogICAgICAgICAgLy9vcGVyYXRpb24gd2hpY2ggcGVyZm9ybXMgQ1NTIHRyYW5zaXRpb24gYW5kIGtleWZyYW1lCiAgICAgICAgICAvL2FuaW1hdGlvbnMgc25pZmZpbmcuIFRoaXMgaXMgYWx3YXlzIGluY2x1ZGVkIGZvciBlYWNoCiAgICAgICAgICAvL2VsZW1lbnQgYW5pbWF0aW9uIHByb2NlZHVyZSBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cwogICAgICAgICAgLy90cmFuc2l0aW9ucyBhbmQvb3Iga2V5ZnJhbWUgYW5pbWF0aW9ucy4gVGhlIGRlZmF1bHQKICAgICAgICAgIC8vYW5pbWF0aW9uIGlzIGFkZGVkIHRvIHRoZSB0b3Agb2YgdGhlIGxpc3QgdG8gcHJldmVudAogICAgICAgICAgLy9hbnkgcHJldmlvdXMgYW5pbWF0aW9ucyBmcm9tIGFmZmVjdGluZyB0aGUgZWxlbWVudCBzdHlsaW5nCiAgICAgICAgICAvL3ByaW9yIHRvIHRoZSBlbGVtZW50IGJlaW5nIGFuaW1hdGVkLgogICAgICAgICAgaWYgKCRzbmlmZmVyLnRyYW5zaXRpb25zIHx8ICRzbmlmZmVyLmFuaW1hdGlvbnMpIHsKICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKCRpbmplY3Rvci5nZXQoc2VsZWN0b3JzWycnXSkpOwogICAgICAgICAgfQoKICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIga2xhc3MgPSBjbGFzc2VzW2ldLAogICAgICAgICAgICAgICAgc2VsZWN0b3JGYWN0b3J5TmFtZSA9IHNlbGVjdG9yc1trbGFzc107CiAgICAgICAgICAgIGlmIChzZWxlY3RvckZhY3RvcnlOYW1lICYmICFmbGFnTWFwW2tsYXNzXSkgewogICAgICAgICAgICAgIG1hdGNoZXMucHVzaCgkaW5qZWN0b3IuZ2V0KHNlbGVjdG9yRmFjdG9yeU5hbWUpKTsKICAgICAgICAgICAgICBmbGFnTWFwW2tsYXNzXSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBtYXRjaGVzOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZnVuY3Rpb24gYW5pbWF0aW9uUnVubmVyKGVsZW1lbnQsIGFuaW1hdGlvbkV2ZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHsKICAgICAgICAvL3RyYW5zY2x1ZGVkIGRpcmVjdGl2ZXMgbWF5IHNvbWV0aW1lcyBmaXJlIGFuIGFuaW1hdGlvbiB1c2luZyBvbmx5IGNvbW1lbnQgbm9kZXMKICAgICAgICAvL2Jlc3QgdG8gY2F0Y2ggdGhpcyBlYXJseSBvbiB0byBwcmV2ZW50IGFueSBhbmltYXRpb24gb3BlcmF0aW9ucyBmcm9tIG9jY3VycmluZwogICAgICAgIHZhciBub2RlID0gZWxlbWVudFswXTsKICAgICAgICBpZiAoIW5vZGUpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmIChvcHRpb25zKSB7CiAgICAgICAgICBvcHRpb25zLnRvID0gb3B0aW9ucy50byB8fCB7fTsKICAgICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMuZnJvbSB8fCB7fTsKICAgICAgICB9CgogICAgICAgIHZhciBjbGFzc05hbWVBZGQ7CiAgICAgICAgdmFyIGNsYXNzTmFtZVJlbW92ZTsKICAgICAgICBpZiAoaXNBcnJheShjbGFzc05hbWUpKSB7CiAgICAgICAgICBjbGFzc05hbWVBZGQgPSBjbGFzc05hbWVbMF07CiAgICAgICAgICBjbGFzc05hbWVSZW1vdmUgPSBjbGFzc05hbWVbMV07CiAgICAgICAgICBpZiAoIWNsYXNzTmFtZUFkZCkgewogICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVSZW1vdmU7CiAgICAgICAgICAgIGFuaW1hdGlvbkV2ZW50ID0gJ3JlbW92ZUNsYXNzJzsKICAgICAgICAgIH0gZWxzZSBpZiAoIWNsYXNzTmFtZVJlbW92ZSkgewogICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVBZGQ7CiAgICAgICAgICAgIGFuaW1hdGlvbkV2ZW50ID0gJ2FkZENsYXNzJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZUFkZCArICcgJyArIGNsYXNzTmFtZVJlbW92ZTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBpc1NldENsYXNzT3BlcmF0aW9uID0gYW5pbWF0aW9uRXZlbnQgPT0gJ3NldENsYXNzJzsKICAgICAgICB2YXIgaXNDbGFzc0Jhc2VkID0gaXNTZXRDbGFzc09wZXJhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBhbmltYXRpb25FdmVudCA9PSAnYWRkQ2xhc3MnCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFuaW1hdGlvbkV2ZW50ID09ICdyZW1vdmVDbGFzcycKICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgYW5pbWF0aW9uRXZlbnQgPT0gJ2FuaW1hdGUnOwoKICAgICAgICB2YXIgY3VycmVudENsYXNzTmFtZSA9IGVsZW1lbnQuYXR0cignY2xhc3MnKTsKICAgICAgICB2YXIgY2xhc3NlcyA9IGN1cnJlbnRDbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7CiAgICAgICAgaWYgKCFpc0FuaW1hdGFibGVDbGFzc05hbWUoY2xhc3NlcykpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBiZWZvcmVDb21wbGV0ZSA9IG5vb3AsCiAgICAgICAgICAgIGJlZm9yZUNhbmNlbCA9IFtdLAogICAgICAgICAgICBiZWZvcmUgPSBbXSwKICAgICAgICAgICAgYWZ0ZXJDb21wbGV0ZSA9IG5vb3AsCiAgICAgICAgICAgIGFmdGVyQ2FuY2VsID0gW10sCiAgICAgICAgICAgIGFmdGVyID0gW107CgogICAgICAgIHZhciBhbmltYXRpb25Mb29rdXAgPSAoJyAnICsgY2xhc3NlcykucmVwbGFjZSgvXHMrL2csJy4nKTsKICAgICAgICBmb3JFYWNoKGxvb2t1cChhbmltYXRpb25Mb29rdXApLCBmdW5jdGlvbihhbmltYXRpb25GYWN0b3J5KSB7CiAgICAgICAgICB2YXIgY3JlYXRlZCA9IHJlZ2lzdGVyQW5pbWF0aW9uKGFuaW1hdGlvbkZhY3RvcnksIGFuaW1hdGlvbkV2ZW50KTsKICAgICAgICAgIGlmICghY3JlYXRlZCAmJiBpc1NldENsYXNzT3BlcmF0aW9uKSB7CiAgICAgICAgICAgIHJlZ2lzdGVyQW5pbWF0aW9uKGFuaW1hdGlvbkZhY3RvcnksICdhZGRDbGFzcycpOwogICAgICAgICAgICByZWdpc3RlckFuaW1hdGlvbihhbmltYXRpb25GYWN0b3J5LCAncmVtb3ZlQ2xhc3MnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgZnVuY3Rpb24gcmVnaXN0ZXJBbmltYXRpb24oYW5pbWF0aW9uRmFjdG9yeSwgZXZlbnQpIHsKICAgICAgICAgIHZhciBhZnRlckZuID0gYW5pbWF0aW9uRmFjdG9yeVtldmVudF07CiAgICAgICAgICB2YXIgYmVmb3JlRm4gPSBhbmltYXRpb25GYWN0b3J5WydiZWZvcmUnICsgZXZlbnQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBldmVudC5zdWJzdHIoMSldOwogICAgICAgICAgaWYgKGFmdGVyRm4gfHwgYmVmb3JlRm4pIHsKICAgICAgICAgICAgaWYgKGV2ZW50ID09ICdsZWF2ZScpIHsKICAgICAgICAgICAgICBiZWZvcmVGbiA9IGFmdGVyRm47CiAgICAgICAgICAgICAgLy93aGVuIHNldCBhcyBudWxsIHRoZW4gYW5pbWF0aW9uIGtub3dzIHRvIHNraXAgdGhpcyBwaGFzZQogICAgICAgICAgICAgIGFmdGVyRm4gPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFmdGVyLnB1c2goewogICAgICAgICAgICAgIGV2ZW50IDogZXZlbnQsIGZuIDogYWZ0ZXJGbgogICAgICAgICAgICB9KTsKICAgICAgICAgICAgYmVmb3JlLnB1c2goewogICAgICAgICAgICAgIGV2ZW50IDogZXZlbnQsIGZuIDogYmVmb3JlRm4KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcnVuKGZucywgY2FuY2VsbGF0aW9ucywgYWxsQ29tcGxldGVGbikgewogICAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSBbXTsKICAgICAgICAgIGZvckVhY2goZm5zLCBmdW5jdGlvbihhbmltYXRpb24pIHsKICAgICAgICAgICAgYW5pbWF0aW9uLmZuICYmIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pOwogICAgICAgICAgfSk7CgogICAgICAgICAgdmFyIGNvdW50ID0gMDsKICAgICAgICAgIGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW9uQ29tcGxldGUoaW5kZXgpIHsKICAgICAgICAgICAgaWYgKGNhbmNlbGxhdGlvbnMpIHsKICAgICAgICAgICAgICAoY2FuY2VsbGF0aW9uc1tpbmRleF0gfHwgbm9vcCkoKTsKICAgICAgICAgICAgICBpZiAoKytjb3VudCA8IGFuaW1hdGlvbnMubGVuZ3RoKSByZXR1cm47CiAgICAgICAgICAgICAgY2FuY2VsbGF0aW9ucyA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWxsQ29tcGxldGVGbigpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vVGhlIGNvZGUgYmVsb3cgYWRkcyBkaXJlY3RseSB0byB0aGUgYXJyYXkgaW4gb3JkZXIgdG8gd29yayB3aXRoCiAgICAgICAgICAvL2JvdGggc3luYyBhbmQgYXN5bmMgYW5pbWF0aW9ucy4gU3luYyBhbmltYXRpb25zIGFyZSB3aGVuIHRoZSBkb25lKCkKICAgICAgICAgIC8vb3BlcmF0aW9uIGlzIGNhbGxlZCByaWdodCBhd2F5LiBETyBOT1QgUkVGQUNUT1IhCiAgICAgICAgICBmb3JFYWNoKGFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGlvbiwgaW5kZXgpIHsKICAgICAgICAgICAgdmFyIHByb2dyZXNzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgYWZ0ZXJBbmltYXRpb25Db21wbGV0ZShpbmRleCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHN3aXRjaChhbmltYXRpb24uZXZlbnQpIHsKICAgICAgICAgICAgICBjYXNlICdzZXRDbGFzcyc6CiAgICAgICAgICAgICAgICBjYW5jZWxsYXRpb25zLnB1c2goYW5pbWF0aW9uLmZuKGVsZW1lbnQsIGNsYXNzTmFtZUFkZCwgY2xhc3NOYW1lUmVtb3ZlLCBwcm9ncmVzcywgb3B0aW9ucykpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSAnYW5pbWF0ZSc6CiAgICAgICAgICAgICAgICBjYW5jZWxsYXRpb25zLnB1c2goYW5pbWF0aW9uLmZuKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucy5mcm9tLCBvcHRpb25zLnRvLCBwcm9ncmVzcykpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSAnYWRkQ2xhc3MnOgogICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9ucy5wdXNoKGFuaW1hdGlvbi5mbihlbGVtZW50LCBjbGFzc05hbWVBZGQgfHwgY2xhc3NOYW1lLCAgICAgcHJvZ3Jlc3MsIG9wdGlvbnMpKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgJ3JlbW92ZUNsYXNzJzoKICAgICAgICAgICAgICAgIGNhbmNlbGxhdGlvbnMucHVzaChhbmltYXRpb24uZm4oZWxlbWVudCwgY2xhc3NOYW1lUmVtb3ZlIHx8IGNsYXNzTmFtZSwgIHByb2dyZXNzLCBvcHRpb25zKSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9ucy5wdXNoKGFuaW1hdGlvbi5mbihlbGVtZW50LCBwcm9ncmVzcywgb3B0aW9ucykpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwoKICAgICAgICAgIGlmIChjYW5jZWxsYXRpb25zICYmIGNhbmNlbGxhdGlvbnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIGFsbENvbXBsZXRlRm4oKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICBub2RlIDogbm9kZSwKICAgICAgICAgIGV2ZW50IDogYW5pbWF0aW9uRXZlbnQsCiAgICAgICAgICBjbGFzc05hbWUgOiBjbGFzc05hbWUsCiAgICAgICAgICBpc0NsYXNzQmFzZWQgOiBpc0NsYXNzQmFzZWQsCiAgICAgICAgICBpc1NldENsYXNzT3BlcmF0aW9uIDogaXNTZXRDbGFzc09wZXJhdGlvbiwKICAgICAgICAgIGFwcGx5U3R5bGVzIDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmIChvcHRpb25zKSB7CiAgICAgICAgICAgICAgZWxlbWVudC5jc3MoYW5ndWxhci5leHRlbmQob3B0aW9ucy5mcm9tIHx8IHt9LCBvcHRpb25zLnRvIHx8IHt9KSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBiZWZvcmUgOiBmdW5jdGlvbihhbGxDb21wbGV0ZUZuKSB7CiAgICAgICAgICAgIGJlZm9yZUNvbXBsZXRlID0gYWxsQ29tcGxldGVGbjsKICAgICAgICAgICAgcnVuKGJlZm9yZSwgYmVmb3JlQ2FuY2VsLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBiZWZvcmVDb21wbGV0ZSA9IG5vb3A7CiAgICAgICAgICAgICAgYWxsQ29tcGxldGVGbigpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0sCiAgICAgICAgICBhZnRlciA6IGZ1bmN0aW9uKGFsbENvbXBsZXRlRm4pIHsKICAgICAgICAgICAgYWZ0ZXJDb21wbGV0ZSA9IGFsbENvbXBsZXRlRm47CiAgICAgICAgICAgIHJ1bihhZnRlciwgYWZ0ZXJDYW5jZWwsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGFmdGVyQ29tcGxldGUgPSBub29wOwogICAgICAgICAgICAgIGFsbENvbXBsZXRlRm4oKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LAogICAgICAgICAgY2FuY2VsIDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmIChiZWZvcmVDYW5jZWwpIHsKICAgICAgICAgICAgICBmb3JFYWNoKGJlZm9yZUNhbmNlbCwgZnVuY3Rpb24oY2FuY2VsRm4pIHsKICAgICAgICAgICAgICAgIChjYW5jZWxGbiB8fCBub29wKSh0cnVlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBiZWZvcmVDb21wbGV0ZSh0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYWZ0ZXJDYW5jZWwpIHsKICAgICAgICAgICAgICBmb3JFYWNoKGFmdGVyQ2FuY2VsLCBmdW5jdGlvbihjYW5jZWxGbikgewogICAgICAgICAgICAgICAgKGNhbmNlbEZuIHx8IG5vb3ApKHRydWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGFmdGVyQ29tcGxldGUodHJ1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9CgogICAgICAvKioKICAgICAgICogQG5nZG9jIHNlcnZpY2UKICAgICAgICogQG5hbWUgJGFuaW1hdGUKICAgICAgICogQGtpbmQgb2JqZWN0CiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBUaGUgYCRhbmltYXRlYCBzZXJ2aWNlIHByb3ZpZGVzIGFuaW1hdGlvbiBkZXRlY3Rpb24gc3VwcG9ydCB3aGlsZSBwZXJmb3JtaW5nIERPTSBvcGVyYXRpb25zIChlbnRlciwgbGVhdmUgYW5kIG1vdmUpIGFzIHdlbGwgYXMgZHVyaW5nIGFkZENsYXNzIGFuZCByZW1vdmVDbGFzcyBvcGVyYXRpb25zLgogICAgICAgKiBXaGVuIGFueSBvZiB0aGVzZSBvcGVyYXRpb25zIGFyZSBydW4sIHRoZSAkYW5pbWF0ZSBzZXJ2aWNlCiAgICAgICAqIHdpbGwgZXhhbWluZSBhbnkgSmF2YVNjcmlwdC1kZWZpbmVkIGFuaW1hdGlvbnMgKHdoaWNoIGFyZSBkZWZpbmVkIGJ5IHVzaW5nIHRoZSAkYW5pbWF0ZVByb3ZpZGVyIHByb3ZpZGVyIG9iamVjdCkKICAgICAgICogYXMgd2VsbCBhcyBhbnkgQ1NTLWRlZmluZWQgYW5pbWF0aW9ucyBhZ2FpbnN0IHRoZSBDU1MgY2xhc3NlcyBwcmVzZW50IG9uIHRoZSBlbGVtZW50IG9uY2UgdGhlIERPTSBvcGVyYXRpb24gaXMgcnVuLgogICAgICAgKgogICAgICAgKiBUaGUgYCRhbmltYXRlYCBzZXJ2aWNlIGlzIHVzZWQgYmVoaW5kIHRoZSBzY2VuZXMgd2l0aCBwcmUtZXhpc3RpbmcgZGlyZWN0aXZlcyBhbmQgYW5pbWF0aW9uIHdpdGggdGhlc2UgZGlyZWN0aXZlcwogICAgICAgKiB3aWxsIHdvcmsgb3V0IG9mIHRoZSBib3ggd2l0aG91dCBhbnkgZXh0cmEgY29uZmlndXJhdGlvbi4KICAgICAgICoKICAgICAgICogUmVxdWlyZXMgdGhlIHtAbGluayBuZ0FuaW1hdGUgYG5nQW5pbWF0ZWB9IG1vZHVsZSB0byBiZSBpbnN0YWxsZWQuCiAgICAgICAqCiAgICAgICAqIFBsZWFzZSB2aXNpdCB0aGUge0BsaW5rIG5nQW5pbWF0ZSBgbmdBbmltYXRlYH0gbW9kdWxlIG92ZXJ2aWV3IHBhZ2UgbGVhcm4gbW9yZSBhYm91dCBob3cgdG8gdXNlIGFuaW1hdGlvbnMgaW4geW91ciBhcHBsaWNhdGlvbi4KICAgICAgICogIyMgQ2FsbGJhY2sgUHJvbWlzZXMKICAgICAgICogV2l0aCBBbmd1bGFySlMgMS4zLCBlYWNoIG9mIHRoZSBhbmltYXRpb24gbWV0aG9kcywgb24gdGhlIGAkYW5pbWF0ZWAgc2VydmljZSwgcmV0dXJuIGEgcHJvbWlzZSB3aGVuIGNhbGxlZC4gVGhlCiAgICAgICAqIHByb21pc2UgaXRzZWxmIGlzIHRoZW4gcmVzb2x2ZWQgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQgaXRzZWxmLCBoYXMgYmVlbiBjYW5jZWxsZWQgb3IgaGFzIGJlZW4KICAgICAgICogc2tpcHBlZCBkdWUgdG8gYW5pbWF0aW9ucyBiZWluZyBkaXNhYmxlZC4gKE5vdGUgdGhhdCBldmVuIGlmIHRoZSBhbmltYXRpb24gaXMgY2FuY2VsbGVkIGl0IHdpbGwgc3RpbGwKICAgICAgICogY2FsbCB0aGUgcmVzb2x2ZSBmdW5jdGlvbiBvZiB0aGUgYW5pbWF0aW9uLikKICAgICAgICoKICAgICAgICogYGBganMKICAgICAgICogJGFuaW1hdGUuZW50ZXIoZWxlbWVudCwgY29udGFpbmVyKS50aGVuKGZ1bmN0aW9uKCkgewogICAgICAgKiAgIC8vLi4udGhpcyBpcyBjYWxsZWQgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLi4uCiAgICAgICAqIH0pOwogICAgICAgKiBgYGAKICAgICAgICoKICAgICAgICogQWxzbyBub3RlIHRoYXQsIGR1ZSB0byB0aGUgbmF0dXJlIG9mIHRoZSBjYWxsYmFjayBwcm9taXNlLCBpZiBhbnkgQW5ndWxhci1zcGVjaWZpYyBjb2RlIChsaWtlIGNoYW5naW5nIHRoZSBzY29wZSwKICAgICAgICogbG9jYXRpb24gb2YgdGhlIHBhZ2UsIGV0Yy4uLikgaXMgZXhlY3V0ZWQgd2l0aGluIHRoZSBjYWxsYmFjayBwcm9taXNlIHRoZW4gYmUgc3VyZSB0byB3cmFwIHRoZSBjb2RlIHVzaW5nCiAgICAgICAqIGAkc2NvcGUuJGFwcGx5KC4uLilgOwogICAgICAgKgogICAgICAgKiBgYGBqcwogICAgICAgKiAkYW5pbWF0ZS5sZWF2ZShlbGVtZW50KS50aGVuKGZ1bmN0aW9uKCkgewogICAgICAgKiAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAqICAgICAkbG9jYXRpb24ucGF0aCgnL25ldy1wYWdlJyk7CiAgICAgICAqICAgfSk7CiAgICAgICAqIH0pOwogICAgICAgKiBgYGAKICAgICAgICoKICAgICAgICogQW4gYW5pbWF0aW9uIGNhbiBhbHNvIGJlIGNhbmNlbGxlZCBieSBjYWxsaW5nIHRoZSBgJGFuaW1hdGUuY2FuY2VsKHByb21pc2UpYCBtZXRob2Qgd2l0aCB0aGUgcHJvdmlkZWQKICAgICAgICogcHJvbWlzZSB0aGF0IHdhcyByZXR1cm5lZCB3aGVuIHRoZSBhbmltYXRpb24gd2FzIHN0YXJ0ZWQuCiAgICAgICAqCiAgICAgICAqIGBgYGpzCiAgICAgICAqIHZhciBwcm9taXNlID0gJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgJ3N1cGVyLWxvbmctYW5pbWF0aW9uJykudGhlbihmdW5jdGlvbigpIHsKICAgICAgICogICAvL3RoaXMgd2lsbCBzdGlsbCBiZSBjYWxsZWQgZXZlbiBpZiBjYW5jZWxsZWQKICAgICAgICogfSk7CiAgICAgICAqCiAgICAgICAqIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAqICAgLy90b29vIGxhenkgdG8gd2FpdCBmb3IgdGhlIGFuaW1hdGlvbiB0byBlbmQKICAgICAgICogICAkYW5pbWF0ZS5jYW5jZWwocHJvbWlzZSk7CiAgICAgICAqIH0pOwogICAgICAgKiBgYGAKICAgICAgICoKICAgICAgICogKEtlZXAgaW4gbWluZCB0aGF0IHRoZSBwcm9taXNlIGNhbmNlbGxhdGlvbiBpcyB1bmlxdWUgdG8gYCRhbmltYXRlYCBzaW5jZSBwcm9taXNlcyBpbgogICAgICAgKiBnZW5lcmFsIGNhbm5vdCBiZSBjYW5jZWxsZWQuKQogICAgICAgKgogICAgICAgKi8KICAgICAgcmV0dXJuIHsKICAgICAgICAvKioKICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICogQG5hbWUgJGFuaW1hdGUjYW5pbWF0ZQogICAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAgICoKICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgKiBQZXJmb3JtcyBhbiBpbmxpbmUgYW5pbWF0aW9uIG9uIHRoZSBlbGVtZW50IHdoaWNoIGFwcGxpZXMgdGhlIHByb3ZpZGVkIGB0b2AgYW5kIGBmcm9tYCBDU1Mgc3R5bGVzIHRvIHRoZSBlbGVtZW50LgogICAgICAgICAqIElmIGFueSBkZXRlY3RlZCBDU1MgdHJhbnNpdGlvbiwga2V5ZnJhbWUgb3IgSmF2YVNjcmlwdCBtYXRjaGVzIHRoZSBwcm92aWRlZCBgY2xhc3NOYW1lYCB2YWx1ZSB0aGVuIHRoZSBhbmltYXRpb24KICAgICAgICAgKiB3aWxsIHRha2Ugb24gdGhlIHByb3ZpZGVkIHN0eWxlcy4gRm9yIGV4YW1wbGUsIGlmIGEgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgc2V0IGZvciB0aGUgZ2l2ZW4gY2xhc3NOYW1lIHRoZW4gdGhlCiAgICAgICAgICogcHJvdmlkZWQgYGZyb21gIGFuZCBgdG9gIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgYWxvbmdzaWRlIHRoZSBnaXZlbiB0cmFuc2l0aW9uLiBJZiBhIEphdmFTY3JpcHQgYW5pbWF0aW9uIGlzCiAgICAgICAgICogZGV0ZWN0ZWQgdGhlbiB0aGUgcHJvdmlkZWQgc3R5bGVzIHdpbGwgYmUgZ2l2ZW4gaW4gYXMgZnVuY3Rpb24gcGFyYW10ZXJzLgogICAgICAgICAqCiAgICAgICAgICogYGBganMKICAgICAgICAgKiBuZ01vZHVsZS5hbmltYXRpb24oJy5teS1pbmxpbmUtYW5pbWF0aW9uJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICogICByZXR1cm4gewogICAgICAgICAqICAgICBhbmltYXRlIDogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBmcm9tLCB0bywgZG9uZSkgewogICAgICAgICAqICAgICAgIC8vc3R5bGVzCiAgICAgICAgICogICAgIH0KICAgICAgICAgKiAgIH0KICAgICAgICAgKiB9KTsKICAgICAgICAgKiBgYGAKICAgICAgICAgKgogICAgICAgICAqIEJlbG93IGlzIGEgYnJlYWtkb3duIG9mIGVhY2ggc3RlcCB0aGF0IG9jY3VycyBkdXJpbmcgdGhlIGBhbmltYXRlYCBhbmltYXRpb246CiAgICAgICAgICoKICAgICAgICAgKiB8IEFuaW1hdGlvbiBTdGVwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgV2hhdCB0aGUgZWxlbWVudCBjbGFzcyBhdHRyaWJ1dGUgbG9va3MgbGlrZSAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfAogICAgICAgICAqIHwgMS4gJGFuaW1hdGUuYW5pbWF0ZSguLi4pIGlzIGNhbGxlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDIuICRhbmltYXRlIHdhaXRzIGZvciB0aGUgbmV4dCBkaWdlc3QgdG8gc3RhcnQgdGhlIGFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCAzLiAkYW5pbWF0ZSBydW5zIHRoZSBKYXZhU2NyaXB0LWRlZmluZWQgYW5pbWF0aW9ucyBkZXRlY3RlZCBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgNC4gdGhlIGNsYXNzTmFtZSBjbGFzcyB2YWx1ZSBpcyBhZGRlZCB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgY2xhc3NOYW1lIiAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDUuICRhbmltYXRlIHNjYW5zIHRoZSBlbGVtZW50IHN0eWxlcyB0byBnZXQgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbiBkdXJhdGlvbiBhbmQgZGVsYXkgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIGNsYXNzTmFtZSIgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA2LiAkYW5pbWF0ZSBibG9ja3MgYWxsIENTUyB0cmFuc2l0aW9ucyBvbiB0aGUgZWxlbWVudCB0byBlbnN1cmUgdGhlIC5jbGFzc05hbWUgY2xhc3Mgc3R5bGluZyBpcyBhcHBsaWVkIHJpZ2h0IGF3YXl8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBjbGFzc05hbWUiICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgNy4gJGFuaW1hdGUgYXBwbGllcyB0aGUgcHJvdmlkZWQgY29sbGVjdGlvbiBvZiBgZnJvbWAgQ1NTIHN0eWxlcyB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgY2xhc3NOYW1lIiAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDguICRhbmltYXRlIHdhaXRzIGZvciBhIHNpbmdsZSBhbmltYXRpb24gZnJhbWUgKHRoaXMgcGVyZm9ybXMgYSByZWZsb3cpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIGNsYXNzTmFtZSIgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA5LiAkYW5pbWF0ZSByZW1vdmVzIHRoZSBDU1MgdHJhbnNpdGlvbiBibG9jayBwbGFjZWQgb24gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBjbGFzc05hbWUiICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgMTAuIHRoZSBjbGFzc05hbWUtYWN0aXZlIGNsYXNzIGlzIGFkZGVkICh0aGlzIHRyaWdnZXJzIHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgY2xhc3NOYW1lIGNsYXNzTmFtZS1hY3RpdmUiIHwKICAgICAgICAgKiB8IDExLiAkYW5pbWF0ZSBhcHBsaWVzIHRoZSBjb2xsZWN0aW9uIG9mIGB0b2AgQ1NTIHN0eWxlcyB0byB0aGUgZWxlbWVudCB3aGljaCBhcmUgdGhlbiBoYW5kbGVkIGJ5IHRoZSB0cmFuc2l0aW9uICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIGNsYXNzTmFtZSBjbGFzc05hbWUtYWN0aXZlIiB8CiAgICAgICAgICogfCAxMi4gJGFuaW1hdGUgd2FpdHMgZm9yIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGUgKHZpYSBldmVudHMgYW5kIHRpbWVvdXQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBjbGFzc05hbWUgY2xhc3NOYW1lLWFjdGl2ZSIgfAogICAgICAgICAqIHwgMTMuIFRoZSBhbmltYXRpb24gZW5kcyBhbmQgYWxsIGdlbmVyYXRlZCBDU1MgY2xhc3NlcyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDE0LiBUaGUgcmV0dXJuZWQgcHJvbWlzZSBpcyByZXNvbHZlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHRoZSBmb2N1cyBvZiB0aGUgZW50ZXIgYW5pbWF0aW9uCiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGZyb20gYSBjb2xsZWN0aW9uIG9mIENTUyBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBhbmltYXRpb24KICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gdG8gYSBjb2xsZWN0aW9uIG9mIENTUyBzdHlsZXMgdGhhdCB0aGUgZWxlbWVudCB3aWxsIGFuaW1hdGUgdG93YXJkcwogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gY2xhc3NOYW1lIGFuIG9wdGlvbmFsIENTUyBjbGFzcyB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uICh0aGUgZGVmYXVsdCBjbGFzcyBpcyBgbmctaW5saW5lLWFuaW1hdGVgKQogICAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMgdGhhdCB3aWxsIGJlIHBpY2tlZCB1cCBieSB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uCiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlCiAgICAgICAgKi8KICAgICAgICBhbmltYXRlIDogZnVuY3Rpb24oZWxlbWVudCwgZnJvbSwgdG8sIGNsYXNzTmFtZSwgb3B0aW9ucykgewogICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lIHx8ICduZy1pbmxpbmUtYW5pbWF0ZSc7CiAgICAgICAgICBvcHRpb25zID0gcGFyc2VBbmltYXRlT3B0aW9ucyhvcHRpb25zKSB8fCB7fTsKICAgICAgICAgIG9wdGlvbnMuZnJvbSA9IHRvID8gZnJvbSA6IG51bGw7CiAgICAgICAgICBvcHRpb25zLnRvICAgPSB0byA/IHRvIDogZnJvbTsKCiAgICAgICAgICByZXR1cm4gcnVuQW5pbWF0aW9uUG9zdERpZ2VzdChmdW5jdGlvbihkb25lKSB7CiAgICAgICAgICAgIHJldHVybiBwZXJmb3JtQW5pbWF0aW9uKCdhbmltYXRlJywgY2xhc3NOYW1lLCBzdHJpcENvbW1lbnRzRnJvbUVsZW1lbnQoZWxlbWVudCksIG51bGwsIG51bGwsIG5vb3AsIG9wdGlvbnMsIGRvbmUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAqIEBuYW1lICRhbmltYXRlI2VudGVyCiAgICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICAgKgogICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAqIEFwcGVuZHMgdGhlIGVsZW1lbnQgdG8gdGhlIHBhcmVudEVsZW1lbnQgZWxlbWVudCB0aGF0IHJlc2lkZXMgaW4gdGhlIGRvY3VtZW50IGFuZCB0aGVuIHJ1bnMgdGhlIGVudGVyIGFuaW1hdGlvbi4gT25jZQogICAgICAgICAqIHRoZSBhbmltYXRpb24gaXMgc3RhcnRlZCwgdGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyB3aWxsIGJlIHByZXNlbnQgb24gdGhlIGVsZW1lbnQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uOgogICAgICAgICAqCiAgICAgICAgICogQmVsb3cgaXMgYSBicmVha2Rvd24gb2YgZWFjaCBzdGVwIHRoYXQgb2NjdXJzIGR1cmluZyBlbnRlciBhbmltYXRpb246CiAgICAgICAgICoKICAgICAgICAgKiB8IEFuaW1hdGlvbiBTdGVwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgV2hhdCB0aGUgZWxlbWVudCBjbGFzcyBhdHRyaWJ1dGUgbG9va3MgbGlrZSAgICAgICAgICAgICAgfAogICAgICAgICAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18CiAgICAgICAgICogfCAxLiAkYW5pbWF0ZS5lbnRlciguLi4pIGlzIGNhbGxlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDIuIGVsZW1lbnQgaXMgaW5zZXJ0ZWQgaW50byB0aGUgcGFyZW50RWxlbWVudCBlbGVtZW50IG9yIGJlc2lkZSB0aGUgYWZ0ZXJFbGVtZW50IGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgMy4gJGFuaW1hdGUgd2FpdHMgZm9yIHRoZSBuZXh0IGRpZ2VzdCB0byBzdGFydCB0aGUgYW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUiICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA0LiAkYW5pbWF0ZSBydW5zIHRoZSBKYXZhU2NyaXB0LWRlZmluZWQgYW5pbWF0aW9ucyBkZXRlY3RlZCBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDUuIHRoZSAubmctZW50ZXIgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWVudGVyIiAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgNi4gJGFuaW1hdGUgc2NhbnMgdGhlIGVsZW1lbnQgc3R5bGVzIHRvIGdldCB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uIGR1cmF0aW9uIGFuZCBkZWxheSAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctZW50ZXIiICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA3LiAkYW5pbWF0ZSBibG9ja3MgYWxsIENTUyB0cmFuc2l0aW9ucyBvbiB0aGUgZWxlbWVudCB0byBlbnN1cmUgdGhlIC5uZy1lbnRlciBjbGFzcyBzdHlsaW5nIGlzIGFwcGxpZWQgcmlnaHQgYXdheSB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1lbnRlciIgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDguICRhbmltYXRlIHdhaXRzIGZvciBhIHNpbmdsZSBhbmltYXRpb24gZnJhbWUgKHRoaXMgcGVyZm9ybXMgYSByZWZsb3cpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWVudGVyIiAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgOS4gJGFuaW1hdGUgcmVtb3ZlcyB0aGUgQ1NTIHRyYW5zaXRpb24gYmxvY2sgcGxhY2VkIG9uIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctZW50ZXIiICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCAxMC4gdGhlIC5uZy1lbnRlci1hY3RpdmUgY2xhc3MgaXMgYWRkZWQgKHRoaXMgdHJpZ2dlcnMgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1lbnRlciBuZy1lbnRlci1hY3RpdmUiIHwKICAgICAgICAgKiB8IDExLiAkYW5pbWF0ZSB3YWl0cyBmb3IgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZSAodmlhIGV2ZW50cyBhbmQgdGltZW91dCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWVudGVyIG5nLWVudGVyLWFjdGl2ZSIgfAogICAgICAgICAqIHwgMTIuIFRoZSBhbmltYXRpb24gZW5kcyBhbmQgYWxsIGdlbmVyYXRlZCBDU1MgY2xhc3NlcyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCAxMy4gVGhlIHJldHVybmVkIHByb21pc2UgaXMgcmVzb2x2ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKgogICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgdGhlIGZvY3VzIG9mIHRoZSBlbnRlciBhbmltYXRpb24KICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudEVsZW1lbnQgdGhlIHBhcmVudCBlbGVtZW50IG9mIHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSB0aGUgZm9jdXMgb2YgdGhlIGVudGVyIGFuaW1hdGlvbgogICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gYWZ0ZXJFbGVtZW50IHRoZSBzaWJsaW5nIGVsZW1lbnQgKHdoaWNoIGlzIHRoZSBwcmV2aW91cyBlbGVtZW50KSBvZiB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgdGhlIGZvY3VzIG9mIHRoZSBlbnRlciBhbmltYXRpb24KICAgICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zIHRoYXQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbgogICAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZQogICAgICAgICovCiAgICAgICAgZW50ZXIgOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBhZnRlckVsZW1lbnQsIG9wdGlvbnMpIHsKICAgICAgICAgIG9wdGlvbnMgPSBwYXJzZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpOwogICAgICAgICAgZWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50KTsKICAgICAgICAgIHBhcmVudEVsZW1lbnQgPSBwcmVwYXJlRWxlbWVudChwYXJlbnRFbGVtZW50KTsKICAgICAgICAgIGFmdGVyRWxlbWVudCA9IHByZXBhcmVFbGVtZW50KGFmdGVyRWxlbWVudCk7CgogICAgICAgICAgY2xhc3NCYXNlZEFuaW1hdGlvbnNCbG9ja2VkKGVsZW1lbnQsIHRydWUpOwogICAgICAgICAgJGRlbGVnYXRlLmVudGVyKGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCk7CiAgICAgICAgICByZXR1cm4gcnVuQW5pbWF0aW9uUG9zdERpZ2VzdChmdW5jdGlvbihkb25lKSB7CiAgICAgICAgICAgIHJldHVybiBwZXJmb3JtQW5pbWF0aW9uKCdlbnRlcicsICduZy1lbnRlcicsIHN0cmlwQ29tbWVudHNGcm9tRWxlbWVudChlbGVtZW50KSwgcGFyZW50RWxlbWVudCwgYWZ0ZXJFbGVtZW50LCBub29wLCBvcHRpb25zLCBkb25lKTsKICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNsZWF2ZQogICAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAgICoKICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgKiBSdW5zIHRoZSBsZWF2ZSBhbmltYXRpb24gb3BlcmF0aW9uIGFuZCwgdXBvbiBjb21wbGV0aW9uLCByZW1vdmVzIHRoZSBlbGVtZW50IGZyb20gdGhlIERPTS4gT25jZQogICAgICAgICAqIHRoZSBhbmltYXRpb24gaXMgc3RhcnRlZCwgdGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyB3aWxsIGJlIGFkZGVkIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbjoKICAgICAgICAgKgogICAgICAgICAqIEJlbG93IGlzIGEgYnJlYWtkb3duIG9mIGVhY2ggc3RlcCB0aGF0IG9jY3VycyBkdXJpbmcgbGVhdmUgYW5pbWF0aW9uOgogICAgICAgICAqCiAgICAgICAgICogfCBBbmltYXRpb24gU3RlcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFdoYXQgdGhlIGVsZW1lbnQgY2xhc3MgYXR0cmlidXRlIGxvb2tzIGxpa2UgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfAogICAgICAgICAqIHwgMS4gJGFuaW1hdGUubGVhdmUoLi4uKSBpcyBjYWxsZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCAyLiAkYW5pbWF0ZSBydW5zIHRoZSBKYXZhU2NyaXB0LWRlZmluZWQgYW5pbWF0aW9ucyBkZXRlY3RlZCBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDMuICRhbmltYXRlIHdhaXRzIGZvciB0aGUgbmV4dCBkaWdlc3QgdG8gc3RhcnQgdGhlIGFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIiAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgNC4gdGhlIC5uZy1sZWF2ZSBjbGFzcyBpcyBhZGRlZCB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctbGVhdmUiICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA1LiAkYW5pbWF0ZSBzY2FucyB0aGUgZWxlbWVudCBzdHlsZXMgdG8gZ2V0IHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24gZHVyYXRpb24gYW5kIGRlbGF5ICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1sZWF2ZSIgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDYuICRhbmltYXRlIGJsb2NrcyBhbGwgQ1NTIHRyYW5zaXRpb25zIG9uIHRoZSBlbGVtZW50IHRvIGVuc3VyZSB0aGUgLm5nLWxlYXZlIGNsYXNzIHN0eWxpbmcgaXMgYXBwbGllZCByaWdodCBhd2F5IHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWxlYXZl4oCdICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA3LiAkYW5pbWF0ZSB3YWl0cyBmb3IgYSBzaW5nbGUgYW5pbWF0aW9uIGZyYW1lICh0aGlzIHBlcmZvcm1zIGEgcmVmbG93KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1sZWF2ZSIgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDguICRhbmltYXRlIHJlbW92ZXMgdGhlIENTUyB0cmFuc2l0aW9uIGJsb2NrIHBsYWNlZCBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWxlYXZl4oCdICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA5LiB0aGUgLm5nLWxlYXZlLWFjdGl2ZSBjbGFzcyBpcyBhZGRlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1sZWF2ZSBuZy1sZWF2ZS1hY3RpdmUiIHwKICAgICAgICAgKiB8IDEwLiAkYW5pbWF0ZSB3YWl0cyBmb3IgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZSAodmlhIGV2ZW50cyBhbmQgdGltZW91dCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWxlYXZlIG5nLWxlYXZlLWFjdGl2ZSIgfAogICAgICAgICAqIHwgMTEuIFRoZSBhbmltYXRpb24gZW5kcyBhbmQgYWxsIGdlbmVyYXRlZCBDU1MgY2xhc3NlcyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCAxMi4gVGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDEzLiBUaGUgcmV0dXJuZWQgcHJvbWlzZSBpcyByZXNvbHZlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSB0aGUgZm9jdXMgb2YgdGhlIGxlYXZlIGFuaW1hdGlvbgogICAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIHN0eWxlcyB0aGF0IHdpbGwgYmUgcGlja2VkIHVwIGJ5IHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24KICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2UKICAgICAgICAqLwogICAgICAgIGxlYXZlIDogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykgewogICAgICAgICAgb3B0aW9ucyA9IHBhcnNlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7CiAgICAgICAgICBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnQpOwoKICAgICAgICAgIGNhbmNlbENoaWxkQW5pbWF0aW9ucyhlbGVtZW50KTsKICAgICAgICAgIGNsYXNzQmFzZWRBbmltYXRpb25zQmxvY2tlZChlbGVtZW50LCB0cnVlKTsKICAgICAgICAgIHJldHVybiBydW5BbmltYXRpb25Qb3N0RGlnZXN0KGZ1bmN0aW9uKGRvbmUpIHsKICAgICAgICAgICAgcmV0dXJuIHBlcmZvcm1BbmltYXRpb24oJ2xlYXZlJywgJ25nLWxlYXZlJywgc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KGVsZW1lbnQpLCBudWxsLCBudWxsLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAkZGVsZWdhdGUubGVhdmUoZWxlbWVudCk7CiAgICAgICAgICAgIH0sIG9wdGlvbnMsIGRvbmUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAqIEBuYW1lICRhbmltYXRlI21vdmUKICAgICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgICAqCiAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICogRmlyZXMgdGhlIG1vdmUgRE9NIG9wZXJhdGlvbi4gSnVzdCBiZWZvcmUgdGhlIGFuaW1hdGlvbiBzdGFydHMsIHRoZSBhbmltYXRlIHNlcnZpY2Ugd2lsbCBlaXRoZXIgYXBwZW5kIGl0IGludG8gdGhlIHBhcmVudEVsZW1lbnQgY29udGFpbmVyIG9yCiAgICAgICAgICogYWRkIHRoZSBlbGVtZW50IGRpcmVjdGx5IGFmdGVyIHRoZSBhZnRlckVsZW1lbnQgZWxlbWVudCBpZiBwcmVzZW50LiBUaGVuIHRoZSBtb3ZlIGFuaW1hdGlvbiB3aWxsIGJlIHJ1bi4gT25jZQogICAgICAgICAqIHRoZSBhbmltYXRpb24gaXMgc3RhcnRlZCwgdGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyB3aWxsIGJlIGFkZGVkIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbjoKICAgICAgICAgKgogICAgICAgICAqIEJlbG93IGlzIGEgYnJlYWtkb3duIG9mIGVhY2ggc3RlcCB0aGF0IG9jY3VycyBkdXJpbmcgbW92ZSBhbmltYXRpb246CiAgICAgICAgICoKICAgICAgICAgKiB8IEFuaW1hdGlvbiBTdGVwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBXaGF0IHRoZSBlbGVtZW50IGNsYXNzIGF0dHJpYnV0ZSBsb29rcyBsaWtlICAgICAgICAgICAgfAogICAgICAgICAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18CiAgICAgICAgICogfCAxLiAkYW5pbWF0ZS5tb3ZlKC4uLikgaXMgY2FsbGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDIuIGVsZW1lbnQgaXMgbW92ZWQgaW50byB0aGUgcGFyZW50RWxlbWVudCBlbGVtZW50IG9yIGJlc2lkZSB0aGUgYWZ0ZXJFbGVtZW50IGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgMy4gJGFuaW1hdGUgd2FpdHMgZm9yIHRoZSBuZXh0IGRpZ2VzdCB0byBzdGFydCB0aGUgYW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSIgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA0LiAkYW5pbWF0ZSBydW5zIHRoZSBKYXZhU2NyaXB0LWRlZmluZWQgYW5pbWF0aW9ucyBkZXRlY3RlZCBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIiAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDUuIHRoZSAubmctbW92ZSBjbGFzcyBpcyBhZGRlZCB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctbW92ZSIgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgNi4gJGFuaW1hdGUgc2NhbnMgdGhlIGVsZW1lbnQgc3R5bGVzIHRvIGdldCB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uIGR1cmF0aW9uIGFuZCBkZWxheSAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1tb3ZlIiAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA3LiAkYW5pbWF0ZSBibG9ja3MgYWxsIENTUyB0cmFuc2l0aW9ucyBvbiB0aGUgZWxlbWVudCB0byBlbnN1cmUgdGhlIC5uZy1tb3ZlIGNsYXNzIHN0eWxpbmcgaXMgYXBwbGllZCByaWdodCBhd2F5IHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLW1vdmXigJ0gICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgOC4gJGFuaW1hdGUgd2FpdHMgZm9yIGEgc2luZ2xlIGFuaW1hdGlvbiBmcmFtZSAodGhpcyBwZXJmb3JtcyBhIHJlZmxvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1tb3ZlIiAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA5LiAkYW5pbWF0ZSByZW1vdmVzIHRoZSBDU1MgdHJhbnNpdGlvbiBibG9jayBwbGFjZWQgb24gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLW1vdmXigJ0gICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgMTAuIHRoZSAubmctbW92ZS1hY3RpdmUgY2xhc3MgaXMgYWRkZWQgKHRoaXMgdHJpZ2dlcnMgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1tb3ZlIG5nLW1vdmUtYWN0aXZlIiB8CiAgICAgICAgICogfCAxMS4gJGFuaW1hdGUgd2FpdHMgZm9yIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGUgKHZpYSBldmVudHMgYW5kIHRpbWVvdXQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLW1vdmUgbmctbW92ZS1hY3RpdmUiIHwKICAgICAgICAgKiB8IDEyLiBUaGUgYW5pbWF0aW9uIGVuZHMgYW5kIGFsbCBnZW5lcmF0ZWQgQ1NTIGNsYXNzZXMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgMTMuIFRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHJlc29sdmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHRoZSBmb2N1cyBvZiB0aGUgbW92ZSBhbmltYXRpb24KICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudEVsZW1lbnQgdGhlIHBhcmVudEVsZW1lbnQgZWxlbWVudCBvZiB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgdGhlIGZvY3VzIG9mIHRoZSBtb3ZlIGFuaW1hdGlvbgogICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gYWZ0ZXJFbGVtZW50IHRoZSBzaWJsaW5nIGVsZW1lbnQgKHdoaWNoIGlzIHRoZSBwcmV2aW91cyBlbGVtZW50KSBvZiB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgdGhlIGZvY3VzIG9mIHRoZSBtb3ZlIGFuaW1hdGlvbgogICAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIHN0eWxlcyB0aGF0IHdpbGwgYmUgcGlja2VkIHVwIGJ5IHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24KICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2UKICAgICAgICAqLwogICAgICAgIG1vdmUgOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBhZnRlckVsZW1lbnQsIG9wdGlvbnMpIHsKICAgICAgICAgIG9wdGlvbnMgPSBwYXJzZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpOwogICAgICAgICAgZWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50KTsKICAgICAgICAgIHBhcmVudEVsZW1lbnQgPSBwcmVwYXJlRWxlbWVudChwYXJlbnRFbGVtZW50KTsKICAgICAgICAgIGFmdGVyRWxlbWVudCA9IHByZXBhcmVFbGVtZW50KGFmdGVyRWxlbWVudCk7CgogICAgICAgICAgY2FuY2VsQ2hpbGRBbmltYXRpb25zKGVsZW1lbnQpOwogICAgICAgICAgY2xhc3NCYXNlZEFuaW1hdGlvbnNCbG9ja2VkKGVsZW1lbnQsIHRydWUpOwogICAgICAgICAgJGRlbGVnYXRlLm1vdmUoZWxlbWVudCwgcGFyZW50RWxlbWVudCwgYWZ0ZXJFbGVtZW50KTsKICAgICAgICAgIHJldHVybiBydW5BbmltYXRpb25Qb3N0RGlnZXN0KGZ1bmN0aW9uKGRvbmUpIHsKICAgICAgICAgICAgcmV0dXJuIHBlcmZvcm1BbmltYXRpb24oJ21vdmUnLCAnbmctbW92ZScsIHN0cmlwQ29tbWVudHNGcm9tRWxlbWVudChlbGVtZW50KSwgcGFyZW50RWxlbWVudCwgYWZ0ZXJFbGVtZW50LCBub29wLCBvcHRpb25zLCBkb25lKTsKICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNhZGRDbGFzcwogICAgICAgICAqCiAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICogVHJpZ2dlcnMgYSBjdXN0b20gYW5pbWF0aW9uIGV2ZW50IGJhc2VkIG9mZiB0aGUgY2xhc3NOYW1lIHZhcmlhYmxlIGFuZCB0aGVuIGF0dGFjaGVzIHRoZSBjbGFzc05hbWUgdmFsdWUgdG8gdGhlIGVsZW1lbnQgYXMgYSBDU1MgY2xhc3MuCiAgICAgICAgICogVW5saWtlIHRoZSBvdGhlciBhbmltYXRpb24gbWV0aG9kcywgdGhlIGFuaW1hdGUgc2VydmljZSB3aWxsIHN1ZmZpeCB0aGUgY2xhc3NOYW1lIHZhbHVlIHdpdGgge0B0eXBlIC1hZGR9IGluIG9yZGVyIHRvIHByb3ZpZGUKICAgICAgICAgKiB0aGUgYW5pbWF0ZSBzZXJ2aWNlIHRoZSBzZXR1cCBhbmQgYWN0aXZlIENTUyBjbGFzc2VzIGluIG9yZGVyIHRvIHRyaWdnZXIgdGhlIGFuaW1hdGlvbiAodGhpcyB3aWxsIGJlIHNraXBwZWQgaWYgbm8gQ1NTIHRyYW5zaXRpb25zCiAgICAgICAgICogb3Iga2V5ZnJhbWVzIGFyZSBkZWZpbmVkIG9uIHRoZSAtYWRkLWFjdGl2ZSBvciBiYXNlIENTUyBjbGFzcykuCiAgICAgICAgICoKICAgICAgICAgKiBCZWxvdyBpcyBhIGJyZWFrZG93biBvZiBlYWNoIHN0ZXAgdGhhdCBvY2N1cnMgZHVyaW5nIGFkZENsYXNzIGFuaW1hdGlvbjoKICAgICAgICAgKgogICAgICAgICAqIHwgQW5pbWF0aW9uIFN0ZXAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBXaGF0IHRoZSBlbGVtZW50IGNsYXNzIGF0dHJpYnV0ZSBsb29rcyBsaWtlICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18CiAgICAgICAgICogfCAxLiAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCAnc3VwZXInKSBpcyBjYWxsZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgMi4gJGFuaW1hdGUgcnVucyB0aGUgSmF2YVNjcmlwdC1kZWZpbmVkIGFuaW1hdGlvbnMgZGV0ZWN0ZWQgb24gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDMuIHRoZSAuc3VwZXItYWRkIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIHN1cGVyLWFkZCIgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA0LiAkYW5pbWF0ZSB3YWl0cyBmb3IgYSBzaW5nbGUgYW5pbWF0aW9uIGZyYW1lICh0aGlzIHBlcmZvcm1zIGEgcmVmbG93KSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBzdXBlci1hZGQiICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgNS4gdGhlIC5zdXBlciBhbmQgLnN1cGVyLWFkZC1hY3RpdmUgY2xhc3NlcyBhcmUgYWRkZWQgKHRoaXMgdHJpZ2dlcnMgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbikgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgc3VwZXIgc3VwZXItYWRkIHN1cGVyLWFkZC1hY3RpdmUiIHwKICAgICAgICAgKiB8IDYuICRhbmltYXRlIHNjYW5zIHRoZSBlbGVtZW50IHN0eWxlcyB0byBnZXQgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbiBkdXJhdGlvbiBhbmQgZGVsYXkgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBuZy1hbmltYXRlIHN1cGVyLWFkZCIgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCA3LiAkYW5pbWF0ZSB3YWl0cyBmb3IgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZSAodmlhIGV2ZW50cyBhbmQgdGltZW91dCkgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gc3VwZXIgc3VwZXItYWRkIHN1cGVyLWFkZC1hY3RpdmUiICAgICAgICAgICAgfAogICAgICAgICAqIHwgOC4gVGhlIGFuaW1hdGlvbiBlbmRzIGFuZCBhbGwgZ2VuZXJhdGVkIENTUyBjbGFzc2VzIGFyZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIHN1cGVyIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDkuIFRoZSBzdXBlciBjbGFzcyBpcyBrZXB0IG9uIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBzdXBlciIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICogfCAxMC4gVGhlIHJldHVybmVkIHByb21pc2UgaXMgcmVzb2x2ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gc3VwZXIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSBhbmltYXRlZAogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzcyB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQgYW5kIHRoZW4gYW5pbWF0ZWQKICAgICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBzdHlsZXMgdGhhdCB3aWxsIGJlIHBpY2tlZCB1cCBieSB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uCiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlCiAgICAgICAgKi8KICAgICAgICBhZGRDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucykgewogICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lLCBbXSwgb3B0aW9ucyk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAqIEBuYW1lICRhbmltYXRlI3JlbW92ZUNsYXNzCiAgICAgICAgICoKICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgKiBUcmlnZ2VycyBhIGN1c3RvbSBhbmltYXRpb24gZXZlbnQgYmFzZWQgb2ZmIHRoZSBjbGFzc05hbWUgdmFyaWFibGUgYW5kIHRoZW4gcmVtb3ZlcyB0aGUgQ1NTIGNsYXNzIHByb3ZpZGVkIGJ5IHRoZSBjbGFzc05hbWUgdmFsdWUKICAgICAgICAgKiBmcm9tIHRoZSBlbGVtZW50LiBVbmxpa2UgdGhlIG90aGVyIGFuaW1hdGlvbiBtZXRob2RzLCB0aGUgYW5pbWF0ZSBzZXJ2aWNlIHdpbGwgc3VmZml4IHRoZSBjbGFzc05hbWUgdmFsdWUgd2l0aCB7QHR5cGUgLXJlbW92ZX0gaW4KICAgICAgICAgKiBvcmRlciB0byBwcm92aWRlIHRoZSBhbmltYXRlIHNlcnZpY2UgdGhlIHNldHVwIGFuZCBhY3RpdmUgQ1NTIGNsYXNzZXMgaW4gb3JkZXIgdG8gdHJpZ2dlciB0aGUgYW5pbWF0aW9uICh0aGlzIHdpbGwgYmUgc2tpcHBlZCBpZgogICAgICAgICAqIG5vIENTUyB0cmFuc2l0aW9ucyBvciBrZXlmcmFtZXMgYXJlIGRlZmluZWQgb24gdGhlIC1yZW1vdmUgb3IgYmFzZSBDU1MgY2xhc3NlcykuCiAgICAgICAgICoKICAgICAgICAgKiBCZWxvdyBpcyBhIGJyZWFrZG93biBvZiBlYWNoIHN0ZXAgdGhhdCBvY2N1cnMgZHVyaW5nIHJlbW92ZUNsYXNzIGFuaW1hdGlvbjoKICAgICAgICAgKgogICAgICAgICAqIHwgQW5pbWF0aW9uIFN0ZXAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFdoYXQgdGhlIGVsZW1lbnQgY2xhc3MgYXR0cmlidXRlIGxvb2tzIGxpa2UgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfAogICAgICAgICAqIHwgMS4gJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgJ3N1cGVyJykgaXMgY2FsbGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gc3VwZXIiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgMi4gJGFuaW1hdGUgcnVucyB0aGUgSmF2YVNjcmlwdC1kZWZpbmVkIGFuaW1hdGlvbnMgZGV0ZWN0ZWQgb24gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gc3VwZXIgbmctYW5pbWF0ZSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgMy4gdGhlIC5zdXBlci1yZW1vdmUgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gc3VwZXIgbmctYW5pbWF0ZSBzdXBlci1yZW1vdmUiICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgNC4gJGFuaW1hdGUgd2FpdHMgZm9yIGEgc2luZ2xlIGFuaW1hdGlvbiBmcmFtZSAodGhpcyBwZXJmb3JtcyBhIHJlZmxvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gc3VwZXIgbmctYW5pbWF0ZSBzdXBlci1yZW1vdmUiICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgNS4gdGhlIC5zdXBlci1yZW1vdmUtYWN0aXZlIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCAuc3VwZXIgaXMgcmVtb3ZlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBzdXBlci1yZW1vdmUgc3VwZXItcmVtb3ZlLWFjdGl2ZSIgfAogICAgICAgICAqIHwgNi4gJGFuaW1hdGUgc2NhbnMgdGhlIGVsZW1lbnQgc3R5bGVzIHRvIGdldCB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uIGR1cmF0aW9uIGFuZCBkZWxheSAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gc3VwZXIgbmctYW5pbWF0ZSBzdXBlci1yZW1vdmUiICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgNy4gJGFuaW1hdGUgd2FpdHMgZm9yIHRoZSBhbmltYXRpb24gdG8gY29tcGxldGUgKHZpYSBldmVudHMgYW5kIHRpbWVvdXQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBzdXBlci1yZW1vdmUgc3VwZXItcmVtb3ZlLWFjdGl2ZSIgfAogICAgICAgICAqIHwgOC4gVGhlIGFuaW1hdGlvbiBlbmRzIGFuZCBhbGwgZ2VuZXJhdGVkIENTUyBjbGFzc2VzIGFyZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqIHwgOS4gVGhlIHJldHVybmVkIHByb21pc2UgaXMgcmVzb2x2ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAqCiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGFuaW1hdGVkCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzIHRoYXQgd2lsbCBiZSBhbmltYXRlZCBhbmQgdGhlbiByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQKICAgICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBzdHlsZXMgdGhhdCB3aWxsIGJlIHBpY2tlZCB1cCBieSB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uCiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlCiAgICAgICAgKi8KICAgICAgICByZW1vdmVDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucykgewogICAgICAgICAgcmV0dXJuIHRoaXMuc2V0Q2xhc3MoZWxlbWVudCwgW10sIGNsYXNzTmFtZSwgb3B0aW9ucyk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICoKICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICogQG5hbWUgJGFuaW1hdGUjc2V0Q2xhc3MKICAgICAgICAgKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGRzIGFuZC9vciByZW1vdmVzIHRoZSBnaXZlbiBDU1MgY2xhc3NlcyB0byBhbmQgZnJvbSB0aGUgZWxlbWVudC4KICAgICAgICAgKiBPbmNlIGNvbXBsZXRlLCB0aGUgZG9uZSgpIGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQgKGlmIHByb3ZpZGVkKS4KICAgICAgICAgKgogICAgICAgICAqIHwgQW5pbWF0aW9uIFN0ZXAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgV2hhdCB0aGUgZWxlbWVudCBjbGFzcyBhdHRyaWJ1dGUgbG9va3MgbGlrZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18CiAgICAgICAgICogfCAxLiAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCDigJhvbuKAmSwg4oCYb2Zm4oCZKSBpcyBjYWxsZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gc3VwZXIgb2Zm4oCdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDIuICRhbmltYXRlIHJ1bnMgdGhlIEphdmFTY3JpcHQtZGVmaW5lZCBhbmltYXRpb25zIGRldGVjdGVkIG9uIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gc3VwZXIgbmctYW5pbWF0ZSBvZmbigJ0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDMuIHRoZSAub24tYWRkIGFuZCAub2ZmLXJlbW92ZSBjbGFzc2VzIGFyZSBhZGRlZCB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBvbi1hZGQgb2ZmLXJlbW92ZSBvZmbigJ0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDQuICRhbmltYXRlIHdhaXRzIGZvciBhIHNpbmdsZSBhbmltYXRpb24gZnJhbWUgKHRoaXMgcGVyZm9ybXMgYSByZWZsb3cpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBvbi1hZGQgb2ZmLXJlbW92ZSBvZmbigJ0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDUuIHRoZSAub24sIC5vbi1hZGQtYWN0aXZlIGFuZCAub2ZmLXJlbW92ZS1hY3RpdmUgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIC5vZmYgaXMgcmVtb3ZlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBvbiBvbi1hZGQgb24tYWRkLWFjdGl2ZSBvZmYtcmVtb3ZlIG9mZi1yZW1vdmUtYWN0aXZl4oCdIHwKICAgICAgICAgKiB8IDYuICRhbmltYXRlIHNjYW5zIHRoZSBlbGVtZW50IHN0eWxlcyB0byBnZXQgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbiBkdXJhdGlvbiBhbmQgZGVsYXkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBvbiBvbi1hZGQgb24tYWRkLWFjdGl2ZSBvZmYtcmVtb3ZlIG9mZi1yZW1vdmUtYWN0aXZlIiB8CiAgICAgICAgICogfCA3LiAkYW5pbWF0ZSB3YWl0cyBmb3IgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZSAodmlhIGV2ZW50cyBhbmQgdGltZW91dCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbGFzcz0ibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgb24gb24tYWRkIG9uLWFkZC1hY3RpdmUgb2ZmLXJlbW92ZSBvZmYtcmVtb3ZlLWFjdGl2ZSIgfAogICAgICAgICAqIHwgOC4gVGhlIGFuaW1hdGlvbiBlbmRzIGFuZCBhbGwgZ2VuZXJhdGVkIENTUyBjbGFzc2VzIGFyZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2xhc3M9Im15LWFuaW1hdGlvbiBvbiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgKiB8IDkuIFRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHJlc29sdmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNsYXNzPSJteS1hbmltYXRpb24gb24iICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBoYXZlIGl0cyBDU1MgY2xhc3NlcyBjaGFuZ2VkCiAgICAgICAgICogICByZW1vdmVkIGZyb20gaXQKICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkIHRoZSBDU1MgY2xhc3NlcyB3aGljaCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50CiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHJlbW92ZSB0aGUgQ1NTIGNsYXNzIHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50CiAgICAgICAgICogICBDU1MgY2xhc3NlcyBoYXZlIGJlZW4gc2V0IG9uIHRoZSBlbGVtZW50CiAgICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygc3R5bGVzIHRoYXQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbgogICAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZQogICAgICAgICAqLwogICAgICAgIHNldENsYXNzIDogZnVuY3Rpb24oZWxlbWVudCwgYWRkLCByZW1vdmUsIG9wdGlvbnMpIHsKICAgICAgICAgIG9wdGlvbnMgPSBwYXJzZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpOwoKICAgICAgICAgIHZhciBTVE9SQUdFX0tFWSA9ICckJGFuaW1hdGVDbGFzc2VzJzsKICAgICAgICAgIGVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudCk7CiAgICAgICAgICBlbGVtZW50ID0gc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KGVsZW1lbnQpOwoKICAgICAgICAgIGlmIChjbGFzc0Jhc2VkQW5pbWF0aW9uc0Jsb2NrZWQoZWxlbWVudCkpIHsKICAgICAgICAgICAgcmV0dXJuICRkZWxlZ2F0ZS4kJHNldENsYXNzSW1tZWRpYXRlbHkoZWxlbWVudCwgYWRkLCByZW1vdmUsIG9wdGlvbnMpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIHdlJ3JlIHVzaW5nIGEgY29tYmluZWQgYXJyYXkgZm9yIGJvdGggdGhlIGFkZCBhbmQgcmVtb3ZlCiAgICAgICAgICAvLyBvcGVyYXRpb25zIHNpbmNlIHRoZSBPUkRFUiBPRiBhZGRDbGFzcyBhbmQgcmVtb3ZlQ2xhc3MgbWF0dGVycwogICAgICAgICAgdmFyIGNsYXNzZXMsIGNhY2hlID0gZWxlbWVudC5kYXRhKFNUT1JBR0VfS0VZKTsKICAgICAgICAgIHZhciBoYXNDYWNoZSA9ICEhY2FjaGU7CiAgICAgICAgICBpZiAoIWNhY2hlKSB7CiAgICAgICAgICAgIGNhY2hlID0ge307CiAgICAgICAgICAgIGNhY2hlLmNsYXNzZXMgPSB7fTsKICAgICAgICAgIH0KICAgICAgICAgIGNsYXNzZXMgPSBjYWNoZS5jbGFzc2VzOwoKICAgICAgICAgIGFkZCA9IGlzQXJyYXkoYWRkKSA/IGFkZCA6IGFkZC5zcGxpdCgnICcpOwogICAgICAgICAgZm9yRWFjaChhZGQsIGZ1bmN0aW9uKGMpIHsKICAgICAgICAgICAgaWYgKGMgJiYgYy5sZW5ndGgpIHsKICAgICAgICAgICAgICBjbGFzc2VzW2NdID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CgogICAgICAgICAgcmVtb3ZlID0gaXNBcnJheShyZW1vdmUpID8gcmVtb3ZlIDogcmVtb3ZlLnNwbGl0KCcgJyk7CiAgICAgICAgICBmb3JFYWNoKHJlbW92ZSwgZnVuY3Rpb24oYykgewogICAgICAgICAgICBpZiAoYyAmJiBjLmxlbmd0aCkgewogICAgICAgICAgICAgIGNsYXNzZXNbY10gPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKGhhc0NhY2hlKSB7CiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIGNhY2hlLm9wdGlvbnMpIHsKICAgICAgICAgICAgICBjYWNoZS5vcHRpb25zID0gYW5ndWxhci5leHRlbmQoY2FjaGUub3B0aW9ucyB8fCB7fSwgb3B0aW9ucyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vdGhlIGRpZ2VzdCBjeWNsZSB3aWxsIGNvbWJpbmUgYWxsIHRoZSBhbmltYXRpb25zIGludG8gb25lIGZ1bmN0aW9uCiAgICAgICAgICAgIHJldHVybiBjYWNoZS5wcm9taXNlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZWxlbWVudC5kYXRhKFNUT1JBR0VfS0VZLCBjYWNoZSA9IHsKICAgICAgICAgICAgICBjbGFzc2VzIDogY2xhc3NlcywKICAgICAgICAgICAgICBvcHRpb25zIDogb3B0aW9ucwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gY2FjaGUucHJvbWlzZSA9IHJ1bkFuaW1hdGlvblBvc3REaWdlc3QoZnVuY3Rpb24oZG9uZSkgewogICAgICAgICAgICB2YXIgcGFyZW50RWxlbWVudCA9IGVsZW1lbnQucGFyZW50KCk7CiAgICAgICAgICAgIHZhciBlbGVtZW50Tm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KTsKICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBlbGVtZW50Tm9kZS5wYXJlbnROb2RlOwogICAgICAgICAgICAvLyBUT0RPKG1hdHNrbyk6IG1vdmUgdGhpcyBjb2RlIGludG8gdGhlIGFuaW1hdGlvbnNEaXNhYmxlZCgpIGZ1bmN0aW9uIG9uY2UgIzgwOTIgaXMgZml4ZWQKICAgICAgICAgICAgaWYgKCFwYXJlbnROb2RlIHx8IHBhcmVudE5vZGVbJyQkTkdfUkVNT1ZFRCddIHx8IGVsZW1lbnROb2RlWyckJE5HX1JFTU9WRUQnXSkgewogICAgICAgICAgICAgIGRvbmUoKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBjYWNoZSA9IGVsZW1lbnQuZGF0YShTVE9SQUdFX0tFWSk7CiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRGF0YShTVE9SQUdFX0tFWSk7CgogICAgICAgICAgICB2YXIgc3RhdGUgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSkgfHwge307CiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gcmVzb2x2ZUVsZW1lbnRDbGFzc2VzKGVsZW1lbnQsIGNhY2hlLCBzdGF0ZS5hY3RpdmUpOwogICAgICAgICAgICByZXR1cm4gIWNsYXNzZXMKICAgICAgICAgICAgICA/IGRvbmUoKQogICAgICAgICAgICAgIDogcGVyZm9ybUFuaW1hdGlvbignc2V0Q2xhc3MnLCBjbGFzc2VzLCBlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBudWxsLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXNbMF0pICRkZWxlZ2F0ZS4kJGFkZENsYXNzSW1tZWRpYXRlbHkoZWxlbWVudCwgY2xhc3Nlc1swXSk7CiAgICAgICAgICAgICAgICAgIGlmIChjbGFzc2VzWzFdKSAkZGVsZWdhdGUuJCRyZW1vdmVDbGFzc0ltbWVkaWF0ZWx5KGVsZW1lbnQsIGNsYXNzZXNbMV0pOwogICAgICAgICAgICAgICAgfSwgY2FjaGUub3B0aW9ucywgZG9uZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICogQG5hbWUgJGFuaW1hdGUjY2FuY2VsCiAgICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICAgKgogICAgICAgICAqIEBwYXJhbSB7UHJvbWlzZX0gYW5pbWF0aW9uUHJvbWlzZSBUaGUgYW5pbWF0aW9uIHByb21pc2UgdGhhdCBpcyByZXR1cm5lZCB3aGVuIGFuIGFuaW1hdGlvbiBpcyBzdGFydGVkLgogICAgICAgICAqCiAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICogQ2FuY2VscyB0aGUgcHJvdmlkZWQgYW5pbWF0aW9uLgogICAgICAgICovCiAgICAgICAgY2FuY2VsIDogZnVuY3Rpb24ocHJvbWlzZSkgewogICAgICAgICAgcHJvbWlzZS4kJGNhbmNlbEZuKCk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAqIEBuYW1lICRhbmltYXRlI2VuYWJsZWQKICAgICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgSWYgcHJvdmlkZWQgdGhlbiBzZXQgdGhlIGFuaW1hdGlvbiBvbiBvciBvZmYuCiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gZWxlbWVudCBJZiBwcm92aWRlZCB0aGVuIHRoZSBlbGVtZW50IHdpbGwgYmUgdXNlZCB0byByZXByZXNlbnQgdGhlIGVuYWJsZS9kaXNhYmxlIG9wZXJhdGlvbgogICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IEN1cnJlbnQgYW5pbWF0aW9uIHN0YXRlLgogICAgICAgICAqCiAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICogR2xvYmFsbHkgZW5hYmxlcy9kaXNhYmxlcyBhbmltYXRpb25zLgogICAgICAgICAqCiAgICAgICAgKi8KICAgICAgICBlbmFibGVkIDogZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHsKICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgICAgICAgIGNsZWFudXAoZWxlbWVudCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpIHx8IHt9OwogICAgICAgICAgICAgICAgZGF0YS5kaXNhYmxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSwgZGF0YSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICByb290QW5pbWF0ZVN0YXRlLmRpc2FibGVkID0gIXZhbHVlOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgdmFsdWUgPSAhcm9vdEFuaW1hdGVTdGF0ZS5kaXNhYmxlZDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gISF2YWx1ZTsKICAgICAgICAgfQogICAgICB9OwoKICAgICAgLyoKICAgICAgICBhbGwgYW5pbWF0aW9ucyBjYWxsIHRoaXMgc2hhcmVkIGFuaW1hdGlvbiB0cmlnZ2VyaW5nIGZ1bmN0aW9uIGludGVybmFsbHkuCiAgICAgICAgVGhlIGFuaW1hdGlvbkV2ZW50IHZhcmlhYmxlIHJlZmVycyB0byB0aGUgSmF2YVNjcmlwdCBhbmltYXRpb24gZXZlbnQgdGhhdCB3aWxsIGJlIHRyaWdnZXJlZAogICAgICAgIGFuZCB0aGUgY2xhc3NOYW1lIHZhbHVlIGlzIHRoZSBuYW1lIG9mIHRoZSBhbmltYXRpb24gdGhhdCB3aWxsIGJlIGFwcGxpZWQgd2l0aGluIHRoZQogICAgICAgIENTUyBjb2RlLiBFbGVtZW50LCBwYXJlbnRFbGVtZW50IGFuZCBhZnRlckVsZW1lbnQgYXJlIHByb3ZpZGVkIERPTSBlbGVtZW50cyBmb3IgdGhlIGFuaW1hdGlvbgogICAgICAgIGFuZCB0aGUgb25Db21wbGV0ZSBjYWxsYmFjayB3aWxsIGJlIGZpcmVkIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBmdWxseSBjb21wbGV0ZS4KICAgICAgKi8KICAgICAgZnVuY3Rpb24gcGVyZm9ybUFuaW1hdGlvbihhbmltYXRpb25FdmVudCwgY2xhc3NOYW1lLCBlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBhZnRlckVsZW1lbnQsIGRvbU9wZXJhdGlvbiwgb3B0aW9ucywgZG9uZUNhbGxiYWNrKSB7CiAgICAgICAgdmFyIG5vb3BDYW5jZWwgPSBub29wOwogICAgICAgIHZhciBydW5uZXIgPSBhbmltYXRpb25SdW5uZXIoZWxlbWVudCwgYW5pbWF0aW9uRXZlbnQsIGNsYXNzTmFtZSwgb3B0aW9ucyk7CiAgICAgICAgaWYgKCFydW5uZXIpIHsKICAgICAgICAgIGZpcmVET01PcGVyYXRpb24oKTsKICAgICAgICAgIGZpcmVCZWZvcmVDYWxsYmFja0FzeW5jKCk7CiAgICAgICAgICBmaXJlQWZ0ZXJDYWxsYmFja0FzeW5jKCk7CiAgICAgICAgICBjbG9zZUFuaW1hdGlvbigpOwogICAgICAgICAgcmV0dXJuIG5vb3BDYW5jZWw7CiAgICAgICAgfQoKICAgICAgICBhbmltYXRpb25FdmVudCA9IHJ1bm5lci5ldmVudDsKICAgICAgICBjbGFzc05hbWUgPSBydW5uZXIuY2xhc3NOYW1lOwogICAgICAgIHZhciBlbGVtZW50RXZlbnRzID0gYW5ndWxhci5lbGVtZW50Ll9kYXRhKHJ1bm5lci5ub2RlKTsKICAgICAgICBlbGVtZW50RXZlbnRzID0gZWxlbWVudEV2ZW50cyAmJiBlbGVtZW50RXZlbnRzLmV2ZW50czsKCiAgICAgICAgaWYgKCFwYXJlbnRFbGVtZW50KSB7CiAgICAgICAgICBwYXJlbnRFbGVtZW50ID0gYWZ0ZXJFbGVtZW50ID8gYWZ0ZXJFbGVtZW50LnBhcmVudCgpIDogZWxlbWVudC5wYXJlbnQoKTsKICAgICAgICB9CgogICAgICAgIC8vc2tpcCB0aGUgYW5pbWF0aW9uIGlmIGFuaW1hdGlvbnMgYXJlIGRpc2FibGVkLCBhIHBhcmVudCBpcyBhbHJlYWR5IGJlaW5nIGFuaW1hdGVkLAogICAgICAgIC8vdGhlIGVsZW1lbnQgaXMgbm90IGN1cnJlbnRseSBhdHRhY2hlZCB0byB0aGUgZG9jdW1lbnQgYm9keSBvciB0aGVuIGNvbXBsZXRlbHkgY2xvc2UKICAgICAgICAvL3RoZSBhbmltYXRpb24gaWYgYW55IG1hdGNoaW5nIGFuaW1hdGlvbnMgYXJlIG5vdCBmb3VuZCBhdCBhbGwuCiAgICAgICAgLy9OT1RFOiBJRTggKyBJRTkgc2hvdWxkIGNsb3NlIHByb3Blcmx5IChydW4gY2xvc2VBbmltYXRpb24oKSkgaW4gY2FzZSBhbiBhbmltYXRpb24gd2FzIGZvdW5kLgogICAgICAgIGlmIChhbmltYXRpb25zRGlzYWJsZWQoZWxlbWVudCwgcGFyZW50RWxlbWVudCkpIHsKICAgICAgICAgIGZpcmVET01PcGVyYXRpb24oKTsKICAgICAgICAgIGZpcmVCZWZvcmVDYWxsYmFja0FzeW5jKCk7CiAgICAgICAgICBmaXJlQWZ0ZXJDYWxsYmFja0FzeW5jKCk7CiAgICAgICAgICBjbG9zZUFuaW1hdGlvbigpOwogICAgICAgICAgcmV0dXJuIG5vb3BDYW5jZWw7CiAgICAgICAgfQoKICAgICAgICB2YXIgbmdBbmltYXRlU3RhdGUgID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpIHx8IHt9OwogICAgICAgIHZhciBydW5uaW5nQW5pbWF0aW9ucyAgICAgPSBuZ0FuaW1hdGVTdGF0ZS5hY3RpdmUgfHwge307CiAgICAgICAgdmFyIHRvdGFsQWN0aXZlQW5pbWF0aW9ucyA9IG5nQW5pbWF0ZVN0YXRlLnRvdGFsQWN0aXZlIHx8IDA7CiAgICAgICAgdmFyIGxhc3RBbmltYXRpb24gICAgICAgICA9IG5nQW5pbWF0ZVN0YXRlLmxhc3Q7CiAgICAgICAgdmFyIHNraXBBbmltYXRpb24gPSBmYWxzZTsKCiAgICAgICAgaWYgKHRvdGFsQWN0aXZlQW5pbWF0aW9ucyA+IDApIHsKICAgICAgICAgIHZhciBhbmltYXRpb25zVG9DYW5jZWwgPSBbXTsKICAgICAgICAgIGlmICghcnVubmVyLmlzQ2xhc3NCYXNlZCkgewogICAgICAgICAgICBpZiAoYW5pbWF0aW9uRXZlbnQgPT0gJ2xlYXZlJyAmJiBydW5uaW5nQW5pbWF0aW9uc1snbmctbGVhdmUnXSkgewogICAgICAgICAgICAgIHNraXBBbmltYXRpb24gPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vY2FuY2VsIGFsbCBhbmltYXRpb25zIHdoZW4gYSBzdHJ1Y3R1cmFsIGFuaW1hdGlvbiB0YWtlcyBwbGFjZQogICAgICAgICAgICAgIGZvcih2YXIga2xhc3MgaW4gcnVubmluZ0FuaW1hdGlvbnMpIHsKICAgICAgICAgICAgICAgIGFuaW1hdGlvbnNUb0NhbmNlbC5wdXNoKHJ1bm5pbmdBbmltYXRpb25zW2tsYXNzXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIG5nQW5pbWF0ZVN0YXRlID0ge307CiAgICAgICAgICAgICAgY2xlYW51cChlbGVtZW50LCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChsYXN0QW5pbWF0aW9uLmV2ZW50ID09ICdzZXRDbGFzcycpIHsKICAgICAgICAgICAgYW5pbWF0aW9uc1RvQ2FuY2VsLnB1c2gobGFzdEFuaW1hdGlvbik7CiAgICAgICAgICAgIGNsZWFudXAoZWxlbWVudCwgY2xhc3NOYW1lKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKHJ1bm5pbmdBbmltYXRpb25zW2NsYXNzTmFtZV0pIHsKICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBydW5uaW5nQW5pbWF0aW9uc1tjbGFzc05hbWVdOwogICAgICAgICAgICBpZiAoY3VycmVudC5ldmVudCA9PSBhbmltYXRpb25FdmVudCkgewogICAgICAgICAgICAgIHNraXBBbmltYXRpb24gPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGFuaW1hdGlvbnNUb0NhbmNlbC5wdXNoKGN1cnJlbnQpOwogICAgICAgICAgICAgIGNsZWFudXAoZWxlbWVudCwgY2xhc3NOYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChhbmltYXRpb25zVG9DYW5jZWwubGVuZ3RoID4gMCkgewogICAgICAgICAgICBmb3JFYWNoKGFuaW1hdGlvbnNUb0NhbmNlbCwgZnVuY3Rpb24ob3BlcmF0aW9uKSB7CiAgICAgICAgICAgICAgb3BlcmF0aW9uLmNhbmNlbCgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChydW5uZXIuaXNDbGFzc0Jhc2VkCiAgICAgICAgICAgICYmICFydW5uZXIuaXNTZXRDbGFzc09wZXJhdGlvbgogICAgICAgICAgICAmJiBhbmltYXRpb25FdmVudCAhPSAnYW5pbWF0ZScKICAgICAgICAgICAgJiYgIXNraXBBbmltYXRpb24pIHsKICAgICAgICAgIHNraXBBbmltYXRpb24gPSAoYW5pbWF0aW9uRXZlbnQgPT0gJ2FkZENsYXNzJykgPT0gZWxlbWVudC5oYXNDbGFzcyhjbGFzc05hbWUpOyAvL29wcG9zaXRlIG9mIFhPUgogICAgICAgIH0KCiAgICAgICAgaWYgKHNraXBBbmltYXRpb24pIHsKICAgICAgICAgIGZpcmVET01PcGVyYXRpb24oKTsKICAgICAgICAgIGZpcmVCZWZvcmVDYWxsYmFja0FzeW5jKCk7CiAgICAgICAgICBmaXJlQWZ0ZXJDYWxsYmFja0FzeW5jKCk7CiAgICAgICAgICBmaXJlRG9uZUNhbGxiYWNrQXN5bmMoKTsKICAgICAgICAgIHJldHVybiBub29wQ2FuY2VsOwogICAgICAgIH0KCiAgICAgICAgcnVubmluZ0FuaW1hdGlvbnMgICAgID0gbmdBbmltYXRlU3RhdGUuYWN0aXZlIHx8IHt9OwogICAgICAgIHRvdGFsQWN0aXZlQW5pbWF0aW9ucyA9IG5nQW5pbWF0ZVN0YXRlLnRvdGFsQWN0aXZlIHx8IDA7CgogICAgICAgIGlmIChhbmltYXRpb25FdmVudCA9PSAnbGVhdmUnKSB7CiAgICAgICAgICAvL3RoZXJlJ3Mgbm8gbmVlZCB0byBldmVyIHJlbW92ZSB0aGUgbGlzdGVuZXIgc2luY2UgdGhlIGVsZW1lbnQKICAgICAgICAgIC8vd2lsbCBiZSByZW1vdmVkIChkZXN0cm95ZWQpIGFmdGVyIHRoZSBsZWF2ZSBhbmltYXRpb24gZW5kcyBvcgogICAgICAgICAgLy9pcyBjYW5jZWxsZWQgbWlkd2F5CiAgICAgICAgICBlbGVtZW50Lm9uZSgnJGRlc3Ryb3knLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KHRoaXMpOwogICAgICAgICAgICB2YXIgc3RhdGUgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSk7CiAgICAgICAgICAgIGlmIChzdGF0ZSkgewogICAgICAgICAgICAgIHZhciBhY3RpdmVMZWF2ZUFuaW1hdGlvbiA9IHN0YXRlLmFjdGl2ZVsnbmctbGVhdmUnXTsKICAgICAgICAgICAgICBpZiAoYWN0aXZlTGVhdmVBbmltYXRpb24pIHsKICAgICAgICAgICAgICAgIGFjdGl2ZUxlYXZlQW5pbWF0aW9uLmNhbmNlbCgpOwogICAgICAgICAgICAgICAgY2xlYW51cChlbGVtZW50LCAnbmctbGVhdmUnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy90aGUgbmctYW5pbWF0ZSBjbGFzcyBkb2VzIG5vdGhpbmcsIGJ1dCBpdCdzIGhlcmUgdG8gYWxsb3cgZm9yCiAgICAgICAgLy9wYXJlbnQgYW5pbWF0aW9ucyB0byBmaW5kIGFuZCBjYW5jZWwgY2hpbGQgYW5pbWF0aW9ucyB3aGVuIG5lZWRlZAogICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoTkdfQU5JTUFURV9DTEFTU19OQU1FKTsKICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRlbXBDbGFzc2VzKSB7CiAgICAgICAgICBmb3JFYWNoKG9wdGlvbnMudGVtcENsYXNzZXMsIGZ1bmN0aW9uKGNsYXNzTmFtZSkgewogICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKGNsYXNzTmFtZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHZhciBsb2NhbEFuaW1hdGlvbkNvdW50ID0gZ2xvYmFsQW5pbWF0aW9uQ291bnRlcisrOwogICAgICAgIHRvdGFsQWN0aXZlQW5pbWF0aW9ucysrOwogICAgICAgIHJ1bm5pbmdBbmltYXRpb25zW2NsYXNzTmFtZV0gPSBydW5uZXI7CgogICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFLCB7CiAgICAgICAgICBsYXN0IDogcnVubmVyLAogICAgICAgICAgYWN0aXZlIDogcnVubmluZ0FuaW1hdGlvbnMsCiAgICAgICAgICBpbmRleCA6IGxvY2FsQW5pbWF0aW9uQ291bnQsCiAgICAgICAgICB0b3RhbEFjdGl2ZSA6IHRvdGFsQWN0aXZlQW5pbWF0aW9ucwogICAgICAgIH0pOwoKICAgICAgICAvL2ZpcnN0IHdlIHJ1biB0aGUgYmVmb3JlIGFuaW1hdGlvbnMgYW5kIHdoZW4gYWxsIG9mIHRob3NlIGFyZSBjb21wbGV0ZQogICAgICAgIC8vdGhlbiB3ZSBwZXJmb3JtIHRoZSBET00gb3BlcmF0aW9uIGFuZCBydW4gdGhlIG5leHQgc2V0IG9mIGFuaW1hdGlvbnMKICAgICAgICBmaXJlQmVmb3JlQ2FsbGJhY2tBc3luYygpOwogICAgICAgIHJ1bm5lci5iZWZvcmUoZnVuY3Rpb24oY2FuY2VsbGVkKSB7CiAgICAgICAgICB2YXIgZGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFKTsKICAgICAgICAgIGNhbmNlbGxlZCA9IGNhbmNlbGxlZCB8fAogICAgICAgICAgICAgICAgICAgICAgICAhZGF0YSB8fCAhZGF0YS5hY3RpdmVbY2xhc3NOYW1lXSB8fAogICAgICAgICAgICAgICAgICAgICAgICAocnVubmVyLmlzQ2xhc3NCYXNlZCAmJiBkYXRhLmFjdGl2ZVtjbGFzc05hbWVdLmV2ZW50ICE9IGFuaW1hdGlvbkV2ZW50KTsKCiAgICAgICAgICBmaXJlRE9NT3BlcmF0aW9uKCk7CiAgICAgICAgICBpZiAoY2FuY2VsbGVkID09PSB0cnVlKSB7CiAgICAgICAgICAgIGNsb3NlQW5pbWF0aW9uKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmaXJlQWZ0ZXJDYWxsYmFja0FzeW5jKCk7CiAgICAgICAgICAgIHJ1bm5lci5hZnRlcihjbG9zZUFuaW1hdGlvbik7CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBydW5uZXIuY2FuY2VsOwoKICAgICAgICBmdW5jdGlvbiBmaXJlRE9NQ2FsbGJhY2soYW5pbWF0aW9uUGhhc2UpIHsKICAgICAgICAgIHZhciBldmVudE5hbWUgPSAnJGFuaW1hdGU6JyArIGFuaW1hdGlvblBoYXNlOwogICAgICAgICAgaWYgKGVsZW1lbnRFdmVudHMgJiYgZWxlbWVudEV2ZW50c1tldmVudE5hbWVdICYmIGVsZW1lbnRFdmVudHNbZXZlbnROYW1lXS5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICQkYXN5bmNDYWxsYmFjayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBlbGVtZW50LnRyaWdnZXJIYW5kbGVyKGV2ZW50TmFtZSwgewogICAgICAgICAgICAgICAgZXZlbnQgOiBhbmltYXRpb25FdmVudCwKICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA6IGNsYXNzTmFtZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGZpcmVCZWZvcmVDYWxsYmFja0FzeW5jKCkgewogICAgICAgICAgZmlyZURPTUNhbGxiYWNrKCdiZWZvcmUnKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGZpcmVBZnRlckNhbGxiYWNrQXN5bmMoKSB7CiAgICAgICAgICBmaXJlRE9NQ2FsbGJhY2soJ2FmdGVyJyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBmaXJlRG9uZUNhbGxiYWNrQXN5bmMoKSB7CiAgICAgICAgICBmaXJlRE9NQ2FsbGJhY2soJ2Nsb3NlJyk7CiAgICAgICAgICBkb25lQ2FsbGJhY2soKTsKICAgICAgICB9CgogICAgICAgIC8vaXQgaXMgbGVzcyBjb21wbGljYXRlZCB0byB1c2UgYSBmbGFnIHRoYW4gbWFuYWdpbmcgYW5kIGNhbmNlbGluZwogICAgICAgIC8vdGltZW91dHMgY29udGFpbmluZyBtdWx0aXBsZSBjYWxsYmFja3MuCiAgICAgICAgZnVuY3Rpb24gZmlyZURPTU9wZXJhdGlvbigpIHsKICAgICAgICAgIGlmICghZmlyZURPTU9wZXJhdGlvbi5oYXNCZWVuUnVuKSB7CiAgICAgICAgICAgIGZpcmVET01PcGVyYXRpb24uaGFzQmVlblJ1biA9IHRydWU7CiAgICAgICAgICAgIGRvbU9wZXJhdGlvbigpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gY2xvc2VBbmltYXRpb24oKSB7CiAgICAgICAgICBpZiAoIWNsb3NlQW5pbWF0aW9uLmhhc0JlZW5SdW4pIHsKICAgICAgICAgICAgaWYgKHJ1bm5lcikgeyAvL3RoZSBydW5uZXIgZG9lc24ndCBleGlzdCBpZiBpdCBmYWlscyB0byBpbnN0YW50aWF0ZQogICAgICAgICAgICAgIHJ1bm5lci5hcHBseVN0eWxlcygpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjbG9zZUFuaW1hdGlvbi5oYXNCZWVuUnVuID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50ZW1wQ2xhc3NlcykgewogICAgICAgICAgICAgIGZvckVhY2gob3B0aW9ucy50ZW1wQ2xhc3NlcywgZnVuY3Rpb24oY2xhc3NOYW1lKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBkYXRhID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpOwogICAgICAgICAgICBpZiAoZGF0YSkgewoKICAgICAgICAgICAgICAvKiBvbmx5IHN0cnVjdHVyYWwgYW5pbWF0aW9ucyB3YWl0IGZvciByZWZsb3cgYmVmb3JlIHJlbW92aW5nIGFuCiAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLCBidXQgY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBkb24ndC4gQW4gZXhhbXBsZSBvZiB0aGlzCiAgICAgICAgICAgICAgICAgZmFpbGluZyB3b3VsZCBiZSB3aGVuIGEgcGFyZW50IEhUTUwgdGFnIGhhcyBhIG5nLWNsYXNzIGF0dHJpYnV0ZQogICAgICAgICAgICAgICAgIGNhdXNpbmcgQUxMIGRpcmVjdGl2ZXMgYmVsb3cgdG8gc2tpcCBhbmltYXRpb25zIGR1cmluZyB0aGUgZGlnZXN0ICovCiAgICAgICAgICAgICAgaWYgKHJ1bm5lciAmJiBydW5uZXIuaXNDbGFzc0Jhc2VkKSB7CiAgICAgICAgICAgICAgICBjbGVhbnVwKGVsZW1lbnQsIGNsYXNzTmFtZSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQkYXN5bmNDYWxsYmFjayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSkgfHwge307CiAgICAgICAgICAgICAgICAgIGlmIChsb2NhbEFuaW1hdGlvbkNvdW50ID09IGRhdGEuaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKGVsZW1lbnQsIGNsYXNzTmFtZSwgYW5pbWF0aW9uRXZlbnQpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFLCBkYXRhKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmlyZURvbmVDYWxsYmFja0FzeW5jKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBmdW5jdGlvbiBjYW5jZWxDaGlsZEFuaW1hdGlvbnMoZWxlbWVudCkgewogICAgICAgIHZhciBub2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpOwogICAgICAgIGlmIChub2RlKSB7CiAgICAgICAgICB2YXIgbm9kZXMgPSBhbmd1bGFyLmlzRnVuY3Rpb24obm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSA/CiAgICAgICAgICAgIG5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShOR19BTklNQVRFX0NMQVNTX05BTUUpIDoKICAgICAgICAgICAgbm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIE5HX0FOSU1BVEVfQ0xBU1NfTkFNRSk7CiAgICAgICAgICBmb3JFYWNoKG5vZGVzLCBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgIGVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudCk7CiAgICAgICAgICAgIHZhciBkYXRhID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpOwogICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmFjdGl2ZSkgewogICAgICAgICAgICAgIGZvckVhY2goZGF0YS5hY3RpdmUsIGZ1bmN0aW9uKHJ1bm5lcikgewogICAgICAgICAgICAgICAgcnVubmVyLmNhbmNlbCgpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGNsZWFudXAoZWxlbWVudCwgY2xhc3NOYW1lKSB7CiAgICAgICAgaWYgKGlzTWF0Y2hpbmdFbGVtZW50KGVsZW1lbnQsICRyb290RWxlbWVudCkpIHsKICAgICAgICAgIGlmICghcm9vdEFuaW1hdGVTdGF0ZS5kaXNhYmxlZCkgewogICAgICAgICAgICByb290QW5pbWF0ZVN0YXRlLnJ1bm5pbmcgPSBmYWxzZTsKICAgICAgICAgICAgcm9vdEFuaW1hdGVTdGF0ZS5zdHJ1Y3R1cmFsID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUpIHsKICAgICAgICAgIHZhciBkYXRhID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpIHx8IHt9OwoKICAgICAgICAgIHZhciByZW1vdmVBbmltYXRpb25zID0gY2xhc3NOYW1lID09PSB0cnVlOwogICAgICAgICAgaWYgKCFyZW1vdmVBbmltYXRpb25zICYmIGRhdGEuYWN0aXZlICYmIGRhdGEuYWN0aXZlW2NsYXNzTmFtZV0pIHsKICAgICAgICAgICAgZGF0YS50b3RhbEFjdGl2ZS0tOwogICAgICAgICAgICBkZWxldGUgZGF0YS5hY3RpdmVbY2xhc3NOYW1lXTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAocmVtb3ZlQW5pbWF0aW9ucyB8fCAhZGF0YS50b3RhbEFjdGl2ZSkgewogICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKE5HX0FOSU1BVEVfQ0xBU1NfTkFNRSk7CiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRGF0YShOR19BTklNQVRFX1NUQVRFKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGFuaW1hdGlvbnNEaXNhYmxlZChlbGVtZW50LCBwYXJlbnRFbGVtZW50KSB7CiAgICAgICAgaWYgKHJvb3RBbmltYXRlU3RhdGUuZGlzYWJsZWQpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgaWYgKGlzTWF0Y2hpbmdFbGVtZW50KGVsZW1lbnQsICRyb290RWxlbWVudCkpIHsKICAgICAgICAgIHJldHVybiByb290QW5pbWF0ZVN0YXRlLnJ1bm5pbmc7CiAgICAgICAgfQoKICAgICAgICB2YXIgYWxsb3dDaGlsZEFuaW1hdGlvbnMsIHBhcmVudFJ1bm5pbmdBbmltYXRpb24sIGhhc1BhcmVudDsKICAgICAgICBkbyB7CiAgICAgICAgICAvL3RoZSBlbGVtZW50IGRpZCBub3QgcmVhY2ggdGhlIHJvb3QgZWxlbWVudCB3aGljaCBtZWFucyB0aGF0IGl0CiAgICAgICAgICAvL2lzIG5vdCBhcGFydCBvZiB0aGUgRE9NLiBUaGVyZWZvcmUgdGhlcmUgaXMgbm8gcmVhc29uIHRvIGRvCiAgICAgICAgICAvL2FueSBhbmltYXRpb25zIG9uIGl0CiAgICAgICAgICBpZiAocGFyZW50RWxlbWVudC5sZW5ndGggPT09IDApIGJyZWFrOwoKICAgICAgICAgIHZhciBpc1Jvb3QgPSBpc01hdGNoaW5nRWxlbWVudChwYXJlbnRFbGVtZW50LCAkcm9vdEVsZW1lbnQpOwogICAgICAgICAgdmFyIHN0YXRlID0gaXNSb290ID8gcm9vdEFuaW1hdGVTdGF0ZSA6IChwYXJlbnRFbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSkgfHwge30pOwogICAgICAgICAgaWYgKHN0YXRlLmRpc2FibGVkKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQoKICAgICAgICAgIC8vbm8gbWF0dGVyIHdoYXQsIGZvciBhbiBhbmltYXRpb24gdG8gd29yayBpdCBtdXN0IHJlYWNoIHRoZSByb290IGVsZW1lbnQKICAgICAgICAgIC8vdGhpcyBpbXBsaWVzIHRoYXQgdGhlIGVsZW1lbnQgaXMgYXR0YWNoZWQgdG8gdGhlIERPTSB3aGVuIHRoZSBhbmltYXRpb24gaXMgcnVuCiAgICAgICAgICBpZiAoaXNSb290KSB7CiAgICAgICAgICAgIGhhc1BhcmVudCA9IHRydWU7CiAgICAgICAgICB9CgogICAgICAgICAgLy9vbmNlIGEgZmxhZyBpcyBmb3VuZCB0aGF0IGlzIHN0cmljdGx5IGZhbHNlIHRoZW4gZXZlcnl0aGluZyBiZWZvcmUKICAgICAgICAgIC8vaXQgd2lsbCBiZSBkaXNjYXJkZWQgYW5kIGFsbCBjaGlsZCBhbmltYXRpb25zIHdpbGwgYmUgcmVzdHJpY3RlZAogICAgICAgICAgaWYgKGFsbG93Q2hpbGRBbmltYXRpb25zICE9PSBmYWxzZSkgewogICAgICAgICAgICB2YXIgYW5pbWF0ZUNoaWxkcmVuRmxhZyA9IHBhcmVudEVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NISUxEUkVOKTsKICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGFuaW1hdGVDaGlsZHJlbkZsYWcpKSB7CiAgICAgICAgICAgICAgYWxsb3dDaGlsZEFuaW1hdGlvbnMgPSBhbmltYXRlQ2hpbGRyZW5GbGFnOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcGFyZW50UnVubmluZ0FuaW1hdGlvbiA9IHBhcmVudFJ1bm5pbmdBbmltYXRpb24gfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ydW5uaW5nIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0YXRlLmxhc3QgJiYgIXN0YXRlLmxhc3QuaXNDbGFzc0Jhc2VkKTsKICAgICAgICB9CiAgICAgICAgd2hpbGUocGFyZW50RWxlbWVudCA9IHBhcmVudEVsZW1lbnQucGFyZW50KCkpOwoKICAgICAgICByZXR1cm4gIWhhc1BhcmVudCB8fCAoIWFsbG93Q2hpbGRBbmltYXRpb25zICYmIHBhcmVudFJ1bm5pbmdBbmltYXRpb24pOwogICAgICB9CiAgICB9XSk7CgogICAgJGFuaW1hdGVQcm92aWRlci5yZWdpc3RlcignJywgWyckd2luZG93JywgJyRzbmlmZmVyJywgJyR0aW1lb3V0JywgJyQkYW5pbWF0ZVJlZmxvdycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCR3aW5kb3csICAgJHNuaWZmZXIsICAgJHRpbWVvdXQsICAgJCRhbmltYXRlUmVmbG93KSB7CiAgICAgIC8vIERldGVjdCBwcm9wZXIgdHJhbnNpdGlvbmVuZC9hbmltYXRpb25lbmQgZXZlbnQgbmFtZXMuCiAgICAgIHZhciBDU1NfUFJFRklYID0gJycsIFRSQU5TSVRJT05fUFJPUCwgVFJBTlNJVElPTkVORF9FVkVOVCwgQU5JTUFUSU9OX1BST1AsIEFOSU1BVElPTkVORF9FVkVOVDsKCiAgICAgIC8vIElmIHVucHJlZml4ZWQgZXZlbnRzIGFyZSBub3Qgc3VwcG9ydGVkIGJ1dCB3ZWJraXQtcHJlZml4ZWQgYXJlLCB1c2UgdGhlIGxhdHRlci4KICAgICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHVzZSBXM0MgbmFtZXMsIGJyb3dzZXJzIG5vdCBzdXBwb3J0aW5nIHRoZW0gYXQgYWxsIHdpbGwganVzdCBpZ25vcmUgdGhlbS4KICAgICAgLy8gTm90ZTogQ2hyb21lIGltcGxlbWVudHMgYHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZGAgYW5kIGRvZXNuJ3QgaW1wbGVtZW50IGB3aW5kb3cub25hbmltYXRpb25lbmRgCiAgICAgIC8vIGJ1dCBhdCB0aGUgc2FtZSB0aW1lIGRpc3BhdGNoZXMgdGhlIGBhbmltYXRpb25lbmRgIGV2ZW50IGFuZCBub3QgYHdlYmtpdEFuaW1hdGlvbkVuZGAuCiAgICAgIC8vIFJlZ2lzdGVyIGJvdGggZXZlbnRzIGluIGNhc2UgYHdpbmRvdy5vbmFuaW1hdGlvbmVuZGAgaXMgbm90IHN1cHBvcnRlZCBiZWNhdXNlIG9mIHRoYXQsCiAgICAgIC8vIGRvIHRoZSBzYW1lIGZvciBgdHJhbnNpdGlvbmVuZGAgYXMgU2FmYXJpIGlzIGxpa2VseSB0byBleGhpYml0IHNpbWlsYXIgYmVoYXZpb3IuCiAgICAgIC8vIEFsc28sIHRoZSBvbmx5IG1vZGVybiBicm93c2VyIHRoYXQgdXNlcyB2ZW5kb3IgcHJlZml4ZXMgZm9yIHRyYW5zaXRpb25zL2tleWZyYW1lcyBpcyB3ZWJraXQKICAgICAgLy8gdGhlcmVmb3JlIHRoZXJlIGlzIG5vIHJlYXNvbiB0byB0ZXN0IGFueW1vcmUgZm9yIG90aGVyIHZlbmRvciBwcmVmaXhlczogaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9dHJhbnNpdGlvbgogICAgICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZCkgewogICAgICAgIENTU19QUkVGSVggPSAnLXdlYmtpdC0nOwogICAgICAgIFRSQU5TSVRJT05fUFJPUCA9ICdXZWJraXRUcmFuc2l0aW9uJzsKICAgICAgICBUUkFOU0lUSU9ORU5EX0VWRU5UID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQgdHJhbnNpdGlvbmVuZCc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgVFJBTlNJVElPTl9QUk9QID0gJ3RyYW5zaXRpb24nOwogICAgICAgIFRSQU5TSVRJT05FTkRfRVZFTlQgPSAndHJhbnNpdGlvbmVuZCc7CiAgICAgIH0KCiAgICAgIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJiB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZCkgewogICAgICAgIENTU19QUkVGSVggPSAnLXdlYmtpdC0nOwogICAgICAgIEFOSU1BVElPTl9QUk9QID0gJ1dlYmtpdEFuaW1hdGlvbic7CiAgICAgICAgQU5JTUFUSU9ORU5EX0VWRU5UID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCBhbmltYXRpb25lbmQnOwogICAgICB9IGVsc2UgewogICAgICAgIEFOSU1BVElPTl9QUk9QID0gJ2FuaW1hdGlvbic7CiAgICAgICAgQU5JTUFUSU9ORU5EX0VWRU5UID0gJ2FuaW1hdGlvbmVuZCc7CiAgICAgIH0KCiAgICAgIHZhciBEVVJBVElPTl9LRVkgPSAnRHVyYXRpb24nOwogICAgICB2YXIgUFJPUEVSVFlfS0VZID0gJ1Byb3BlcnR5JzsKICAgICAgdmFyIERFTEFZX0tFWSA9ICdEZWxheSc7CiAgICAgIHZhciBBTklNQVRJT05fSVRFUkFUSU9OX0NPVU5UX0tFWSA9ICdJdGVyYXRpb25Db3VudCc7CiAgICAgIHZhciBBTklNQVRJT05fUExBWVNUQVRFX0tFWSA9ICdQbGF5U3RhdGUnOwogICAgICB2YXIgTkdfQU5JTUFURV9QQVJFTlRfS0VZID0gJyQkbmdBbmltYXRlS2V5JzsKICAgICAgdmFyIE5HX0FOSU1BVEVfQ1NTX0RBVEFfS0VZID0gJyQkbmdBbmltYXRlQ1NTM0RhdGEnOwogICAgICB2YXIgRUxBUFNFRF9USU1FX01BWF9ERUNJTUFMX1BMQUNFUyA9IDM7CiAgICAgIHZhciBDTE9TSU5HX1RJTUVfQlVGRkVSID0gMS41OwogICAgICB2YXIgT05FX1NFQ09ORCA9IDEwMDA7CgogICAgICB2YXIgbG9va3VwQ2FjaGUgPSB7fTsKICAgICAgdmFyIHBhcmVudENvdW50ZXIgPSAwOwogICAgICB2YXIgYW5pbWF0aW9uUmVmbG93UXVldWUgPSBbXTsKICAgICAgdmFyIGNhbmNlbEFuaW1hdGlvblJlZmxvdzsKICAgICAgZnVuY3Rpb24gY2xlYXJDYWNoZUFmdGVyUmVmbG93KCkgewogICAgICAgIGlmICghY2FuY2VsQW5pbWF0aW9uUmVmbG93KSB7CiAgICAgICAgICBjYW5jZWxBbmltYXRpb25SZWZsb3cgPSAkJGFuaW1hdGVSZWZsb3coZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFuaW1hdGlvblJlZmxvd1F1ZXVlID0gW107CiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvblJlZmxvdyA9IG51bGw7CiAgICAgICAgICAgIGxvb2t1cENhY2hlID0ge307CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGFmdGVyUmVmbG93KGVsZW1lbnQsIGNhbGxiYWNrKSB7CiAgICAgICAgaWYgKGNhbmNlbEFuaW1hdGlvblJlZmxvdykgewogICAgICAgICAgY2FuY2VsQW5pbWF0aW9uUmVmbG93KCk7CiAgICAgICAgfQogICAgICAgIGFuaW1hdGlvblJlZmxvd1F1ZXVlLnB1c2goY2FsbGJhY2spOwogICAgICAgIGNhbmNlbEFuaW1hdGlvblJlZmxvdyA9ICQkYW5pbWF0ZVJlZmxvdyhmdW5jdGlvbigpIHsKICAgICAgICAgIGZvckVhY2goYW5pbWF0aW9uUmVmbG93UXVldWUsIGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgICAgIGZuKCk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBhbmltYXRpb25SZWZsb3dRdWV1ZSA9IFtdOwogICAgICAgICAgY2FuY2VsQW5pbWF0aW9uUmVmbG93ID0gbnVsbDsKICAgICAgICAgIGxvb2t1cENhY2hlID0ge307CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHZhciBjbG9zaW5nVGltZXIgPSBudWxsOwogICAgICB2YXIgY2xvc2luZ1RpbWVzdGFtcCA9IDA7CiAgICAgIHZhciBhbmltYXRpb25FbGVtZW50UXVldWUgPSBbXTsKICAgICAgZnVuY3Rpb24gYW5pbWF0aW9uQ2xvc2VIYW5kbGVyKGVsZW1lbnQsIHRvdGFsVGltZSkgewogICAgICAgIHZhciBub2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpOwogICAgICAgIGVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQobm9kZSk7CgogICAgICAgIC8vdGhpcyBpdGVtIHdpbGwgYmUgZ2FyYmFnZSBjb2xsZWN0ZWQgYnkgdGhlIGNsb3NpbmcKICAgICAgICAvL2FuaW1hdGlvbiB0aW1lb3V0CiAgICAgICAgYW5pbWF0aW9uRWxlbWVudFF1ZXVlLnB1c2goZWxlbWVudCk7CgogICAgICAgIC8vYnV0IGl0IG1heSBub3QgbmVlZCB0byBjYW5jZWwgb3V0IHRoZSBleGlzdGluZyB0aW1lb3V0CiAgICAgICAgLy9pZiB0aGUgdGltZXN0YW1wIGlzIGxlc3MgdGhhbiB0aGUgcHJldmlvdXMgb25lCiAgICAgICAgdmFyIGZ1dHVyZVRpbWVzdGFtcCA9IERhdGUubm93KCkgKyB0b3RhbFRpbWU7CiAgICAgICAgaWYgKGZ1dHVyZVRpbWVzdGFtcCA8PSBjbG9zaW5nVGltZXN0YW1wKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAkdGltZW91dC5jYW5jZWwoY2xvc2luZ1RpbWVyKTsKCiAgICAgICAgY2xvc2luZ1RpbWVzdGFtcCA9IGZ1dHVyZVRpbWVzdGFtcDsKICAgICAgICBjbG9zaW5nVGltZXIgPSAkdGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgIGNsb3NlQWxsQW5pbWF0aW9ucyhhbmltYXRpb25FbGVtZW50UXVldWUpOwogICAgICAgICAgYW5pbWF0aW9uRWxlbWVudFF1ZXVlID0gW107CiAgICAgICAgfSwgdG90YWxUaW1lLCBmYWxzZSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGNsb3NlQWxsQW5pbWF0aW9ucyhlbGVtZW50cykgewogICAgICAgIGZvckVhY2goZWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgIHZhciBlbGVtZW50RGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NTU19EQVRBX0tFWSk7CiAgICAgICAgICBpZiAoZWxlbWVudERhdGEpIHsKICAgICAgICAgICAgZm9yRWFjaChlbGVtZW50RGF0YS5jbG9zZUFuaW1hdGlvbkZucywgZnVuY3Rpb24oZm4pIHsKICAgICAgICAgICAgICBmbigpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gZ2V0RWxlbWVudEFuaW1hdGlvbkRldGFpbHMoZWxlbWVudCwgY2FjaGVLZXkpIHsKICAgICAgICB2YXIgZGF0YSA9IGNhY2hlS2V5ID8gbG9va3VwQ2FjaGVbY2FjaGVLZXldIDogbnVsbDsKICAgICAgICBpZiAoIWRhdGEpIHsKICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSAwOwogICAgICAgICAgdmFyIHRyYW5zaXRpb25EZWxheSA9IDA7CiAgICAgICAgICB2YXIgYW5pbWF0aW9uRHVyYXRpb24gPSAwOwogICAgICAgICAgdmFyIGFuaW1hdGlvbkRlbGF5ID0gMDsKCiAgICAgICAgICAvL3dlIHdhbnQgYWxsIHRoZSBzdHlsZXMgZGVmaW5lZCBiZWZvcmUgYW5kIGFmdGVyCiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT0gRUxFTUVOVF9OT0RFKSB7CiAgICAgICAgICAgICAgdmFyIGVsZW1lbnRTdHlsZXMgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkgfHwge307CgogICAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb25TdHlsZSA9IGVsZW1lbnRTdHlsZXNbVFJBTlNJVElPTl9QUk9QICsgRFVSQVRJT05fS0VZXTsKICAgICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBNYXRoLm1heChwYXJzZU1heFRpbWUodHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUpLCB0cmFuc2l0aW9uRHVyYXRpb24pOwoKICAgICAgICAgICAgICB2YXIgdHJhbnNpdGlvbkRlbGF5U3R5bGUgPSBlbGVtZW50U3R5bGVzW1RSQU5TSVRJT05fUFJPUCArIERFTEFZX0tFWV07CiAgICAgICAgICAgICAgdHJhbnNpdGlvbkRlbGF5ICA9IE1hdGgubWF4KHBhcnNlTWF4VGltZSh0cmFuc2l0aW9uRGVsYXlTdHlsZSksIHRyYW5zaXRpb25EZWxheSk7CgogICAgICAgICAgICAgIHZhciBhbmltYXRpb25EZWxheVN0eWxlID0gZWxlbWVudFN0eWxlc1tBTklNQVRJT05fUFJPUCArIERFTEFZX0tFWV07CiAgICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXkgICA9IE1hdGgubWF4KHBhcnNlTWF4VGltZShlbGVtZW50U3R5bGVzW0FOSU1BVElPTl9QUk9QICsgREVMQVlfS0VZXSksIGFuaW1hdGlvbkRlbGF5KTsKCiAgICAgICAgICAgICAgdmFyIGFEdXJhdGlvbiAgPSBwYXJzZU1heFRpbWUoZWxlbWVudFN0eWxlc1tBTklNQVRJT05fUFJPUCArIERVUkFUSU9OX0tFWV0pOwoKICAgICAgICAgICAgICBpZiAoYUR1cmF0aW9uID4gMCkgewogICAgICAgICAgICAgICAgYUR1cmF0aW9uICo9IHBhcnNlSW50KGVsZW1lbnRTdHlsZXNbQU5JTUFUSU9OX1BST1AgKyBBTklNQVRJT05fSVRFUkFUSU9OX0NPVU5UX0tFWV0sIDEwKSB8fCAxOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbiA9IE1hdGgubWF4KGFEdXJhdGlvbiwgYW5pbWF0aW9uRHVyYXRpb24pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgIHRvdGFsIDogMCwKICAgICAgICAgICAgdHJhbnNpdGlvbkRlbGF5OiB0cmFuc2l0aW9uRGVsYXksCiAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLAogICAgICAgICAgICBhbmltYXRpb25EZWxheTogYW5pbWF0aW9uRGVsYXksCiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBhbmltYXRpb25EdXJhdGlvbgogICAgICAgICAgfTsKICAgICAgICAgIGlmIChjYWNoZUtleSkgewogICAgICAgICAgICBsb29rdXBDYWNoZVtjYWNoZUtleV0gPSBkYXRhOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gcGFyc2VNYXhUaW1lKHN0cikgewogICAgICAgIHZhciBtYXhWYWx1ZSA9IDA7CiAgICAgICAgdmFyIHZhbHVlcyA9IGlzU3RyaW5nKHN0cikgPwogICAgICAgICAgc3RyLnNwbGl0KC9ccyosXHMqLykgOgogICAgICAgICAgW107CiAgICAgICAgZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICBtYXhWYWx1ZSA9IE1hdGgubWF4KHBhcnNlRmxvYXQodmFsdWUpIHx8IDAsIG1heFZhbHVlKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gbWF4VmFsdWU7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGdldENhY2hlS2V5KGVsZW1lbnQpIHsKICAgICAgICB2YXIgcGFyZW50RWxlbWVudCA9IGVsZW1lbnQucGFyZW50KCk7CiAgICAgICAgdmFyIHBhcmVudElEID0gcGFyZW50RWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfUEFSRU5UX0tFWSk7CiAgICAgICAgaWYgKCFwYXJlbnRJRCkgewogICAgICAgICAgcGFyZW50RWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfUEFSRU5UX0tFWSwgKytwYXJlbnRDb3VudGVyKTsKICAgICAgICAgIHBhcmVudElEID0gcGFyZW50Q291bnRlcjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHBhcmVudElEICsgJy0nICsgZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gYW5pbWF0ZVNldHVwKGFuaW1hdGlvbkV2ZW50LCBlbGVtZW50LCBjbGFzc05hbWUsIHN0eWxlcykgewogICAgICAgIHZhciBzdHJ1Y3R1cmFsID0gWyduZy1lbnRlcicsJ25nLWxlYXZlJywnbmctbW92ZSddLmluZGV4T2YoY2xhc3NOYW1lKSA+PSAwOwoKICAgICAgICB2YXIgY2FjaGVLZXkgPSBnZXRDYWNoZUtleShlbGVtZW50KTsKICAgICAgICB2YXIgZXZlbnRDYWNoZUtleSA9IGNhY2hlS2V5ICsgJyAnICsgY2xhc3NOYW1lOwogICAgICAgIHZhciBpdGVtSW5kZXggPSBsb29rdXBDYWNoZVtldmVudENhY2hlS2V5XSA/ICsrbG9va3VwQ2FjaGVbZXZlbnRDYWNoZUtleV0udG90YWwgOiAwOwoKICAgICAgICB2YXIgc3RhZ2dlciA9IHt9OwogICAgICAgIGlmIChpdGVtSW5kZXggPiAwKSB7CiAgICAgICAgICB2YXIgc3RhZ2dlckNsYXNzTmFtZSA9IGNsYXNzTmFtZSArICctc3RhZ2dlcic7CiAgICAgICAgICB2YXIgc3RhZ2dlckNhY2hlS2V5ID0gY2FjaGVLZXkgKyAnICcgKyBzdGFnZ2VyQ2xhc3NOYW1lOwogICAgICAgICAgdmFyIGFwcGx5Q2xhc3NlcyA9ICFsb29rdXBDYWNoZVtzdGFnZ2VyQ2FjaGVLZXldOwoKICAgICAgICAgIGFwcGx5Q2xhc3NlcyAmJiBlbGVtZW50LmFkZENsYXNzKHN0YWdnZXJDbGFzc05hbWUpOwoKICAgICAgICAgIHN0YWdnZXIgPSBnZXRFbGVtZW50QW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBzdGFnZ2VyQ2FjaGVLZXkpOwoKICAgICAgICAgIGFwcGx5Q2xhc3NlcyAmJiBlbGVtZW50LnJlbW92ZUNsYXNzKHN0YWdnZXJDbGFzc05hbWUpOwogICAgICAgIH0KCiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhjbGFzc05hbWUpOwoKICAgICAgICB2YXIgZm9ybWVyRGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NTU19EQVRBX0tFWSkgfHwge307CiAgICAgICAgdmFyIHRpbWluZ3MgPSBnZXRFbGVtZW50QW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBldmVudENhY2hlS2V5KTsKICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb247CiAgICAgICAgdmFyIGFuaW1hdGlvbkR1cmF0aW9uID0gdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbjsKCiAgICAgICAgaWYgKHN0cnVjdHVyYWwgJiYgdHJhbnNpdGlvbkR1cmF0aW9uID09PSAwICYmIGFuaW1hdGlvbkR1cmF0aW9uID09PSAwKSB7CiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICB2YXIgYmxvY2tUcmFuc2l0aW9uID0gc3R5bGVzIHx8IChzdHJ1Y3R1cmFsICYmIHRyYW5zaXRpb25EdXJhdGlvbiA+IDApOwogICAgICAgIHZhciBibG9ja0FuaW1hdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uID4gMCAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWdnZXIuYW5pbWF0aW9uRGVsYXkgPiAwICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhZ2dlci5hbmltYXRpb25EdXJhdGlvbiA9PT0gMDsKCiAgICAgICAgdmFyIGNsb3NlQW5pbWF0aW9uRm5zID0gZm9ybWVyRGF0YS5jbG9zZUFuaW1hdGlvbkZucyB8fCBbXTsKICAgICAgICBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DU1NfREFUQV9LRVksIHsKICAgICAgICAgIHN0YWdnZXIgOiBzdGFnZ2VyLAogICAgICAgICAgY2FjaGVLZXkgOiBldmVudENhY2hlS2V5LAogICAgICAgICAgcnVubmluZyA6IGZvcm1lckRhdGEucnVubmluZyB8fCAwLAogICAgICAgICAgaXRlbUluZGV4IDogaXRlbUluZGV4LAogICAgICAgICAgYmxvY2tUcmFuc2l0aW9uIDogYmxvY2tUcmFuc2l0aW9uLAogICAgICAgICAgY2xvc2VBbmltYXRpb25GbnMgOiBjbG9zZUFuaW1hdGlvbkZucwogICAgICAgIH0pOwoKICAgICAgICB2YXIgbm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KTsKCiAgICAgICAgaWYgKGJsb2NrVHJhbnNpdGlvbikgewogICAgICAgICAgYmxvY2tUcmFuc2l0aW9ucyhub2RlLCB0cnVlKTsKICAgICAgICAgIGlmIChzdHlsZXMpIHsKICAgICAgICAgICAgZWxlbWVudC5jc3Moc3R5bGVzKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChibG9ja0FuaW1hdGlvbikgewogICAgICAgICAgYmxvY2tBbmltYXRpb25zKG5vZGUsIHRydWUpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGFuaW1hdGVSdW4oYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgYWN0aXZlQW5pbWF0aW9uQ29tcGxldGUsIHN0eWxlcykgewogICAgICAgIHZhciBub2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpOwogICAgICAgIHZhciBlbGVtZW50RGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NTU19EQVRBX0tFWSk7CiAgICAgICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpLmluZGV4T2YoY2xhc3NOYW1lKSA9PSAtMSB8fCAhZWxlbWVudERhdGEpIHsKICAgICAgICAgIGFjdGl2ZUFuaW1hdGlvbkNvbXBsZXRlKCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gJyc7CiAgICAgICAgdmFyIHBlbmRpbmdDbGFzc05hbWUgPSAnJzsKICAgICAgICBmb3JFYWNoKGNsYXNzTmFtZS5zcGxpdCgnICcpLCBmdW5jdGlvbihrbGFzcywgaSkgewogICAgICAgICAgdmFyIHByZWZpeCA9IChpID4gMCA/ICcgJyA6ICcnKSArIGtsYXNzOwogICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lICs9IHByZWZpeCArICctYWN0aXZlJzsKICAgICAgICAgIHBlbmRpbmdDbGFzc05hbWUgKz0gcHJlZml4ICsgJy1wZW5kaW5nJzsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIHN0eWxlID0gJyc7CiAgICAgICAgdmFyIGFwcGxpZWRTdHlsZXMgPSBbXTsKICAgICAgICB2YXIgaXRlbUluZGV4ID0gZWxlbWVudERhdGEuaXRlbUluZGV4OwogICAgICAgIHZhciBzdGFnZ2VyID0gZWxlbWVudERhdGEuc3RhZ2dlcjsKICAgICAgICB2YXIgc3RhZ2dlclRpbWUgPSAwOwogICAgICAgIGlmIChpdGVtSW5kZXggPiAwKSB7CiAgICAgICAgICB2YXIgdHJhbnNpdGlvblN0YWdnZXJEZWxheSA9IDA7CiAgICAgICAgICBpZiAoc3RhZ2dlci50cmFuc2l0aW9uRGVsYXkgPiAwICYmIHN0YWdnZXIudHJhbnNpdGlvbkR1cmF0aW9uID09PSAwKSB7CiAgICAgICAgICAgIHRyYW5zaXRpb25TdGFnZ2VyRGVsYXkgPSBzdGFnZ2VyLnRyYW5zaXRpb25EZWxheSAqIGl0ZW1JbmRleDsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgYW5pbWF0aW9uU3RhZ2dlckRlbGF5ID0gMDsKICAgICAgICAgIGlmIChzdGFnZ2VyLmFuaW1hdGlvbkRlbGF5ID4gMCAmJiBzdGFnZ2VyLmFuaW1hdGlvbkR1cmF0aW9uID09PSAwKSB7CiAgICAgICAgICAgIGFuaW1hdGlvblN0YWdnZXJEZWxheSA9IHN0YWdnZXIuYW5pbWF0aW9uRGVsYXkgKiBpdGVtSW5kZXg7CiAgICAgICAgICAgIGFwcGxpZWRTdHlsZXMucHVzaChDU1NfUFJFRklYICsgJ2FuaW1hdGlvbi1wbGF5LXN0YXRlJyk7CiAgICAgICAgICB9CgogICAgICAgICAgc3RhZ2dlclRpbWUgPSBNYXRoLnJvdW5kKE1hdGgubWF4KHRyYW5zaXRpb25TdGFnZ2VyRGVsYXksIGFuaW1hdGlvblN0YWdnZXJEZWxheSkgKiAxMDApIC8gMTAwOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFzdGFnZ2VyVGltZSkgewogICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhhY3RpdmVDbGFzc05hbWUpOwogICAgICAgICAgaWYgKGVsZW1lbnREYXRhLmJsb2NrVHJhbnNpdGlvbikgewogICAgICAgICAgICBibG9ja1RyYW5zaXRpb25zKG5vZGUsIGZhbHNlKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBldmVudENhY2hlS2V5ID0gZWxlbWVudERhdGEuY2FjaGVLZXkgKyAnICcgKyBhY3RpdmVDbGFzc05hbWU7CiAgICAgICAgdmFyIHRpbWluZ3MgPSBnZXRFbGVtZW50QW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBldmVudENhY2hlS2V5KTsKICAgICAgICB2YXIgbWF4RHVyYXRpb24gPSBNYXRoLm1heCh0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiwgdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbik7CiAgICAgICAgaWYgKG1heER1cmF0aW9uID09PSAwKSB7CiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGFjdGl2ZUNsYXNzTmFtZSk7CiAgICAgICAgICBhbmltYXRlQ2xvc2UoZWxlbWVudCwgY2xhc3NOYW1lKTsKICAgICAgICAgIGFjdGl2ZUFuaW1hdGlvbkNvbXBsZXRlKCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoIXN0YWdnZXJUaW1lICYmIHN0eWxlcykgewogICAgICAgICAgaWYgKCF0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbikgewogICAgICAgICAgICBlbGVtZW50LmNzcygndHJhbnNpdGlvbicsIHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gKyAncyBsaW5lYXIgYWxsJyk7CiAgICAgICAgICAgIGFwcGxpZWRTdHlsZXMucHVzaCgndHJhbnNpdGlvbicpOwogICAgICAgICAgfQogICAgICAgICAgZWxlbWVudC5jc3Moc3R5bGVzKTsKICAgICAgICB9CgogICAgICAgIHZhciBtYXhEZWxheSA9IE1hdGgubWF4KHRpbWluZ3MudHJhbnNpdGlvbkRlbGF5LCB0aW1pbmdzLmFuaW1hdGlvbkRlbGF5KTsKICAgICAgICB2YXIgbWF4RGVsYXlUaW1lID0gbWF4RGVsYXkgKiBPTkVfU0VDT05EOwoKICAgICAgICBpZiAoYXBwbGllZFN0eWxlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAvL3RoZSBlbGVtZW50IGJlaW5nIGFuaW1hdGVkIG1heSBzb21ldGltZXMgY29udGFpbiBjb21tZW50IG5vZGVzIGluCiAgICAgICAgICAvL3RoZSBqcUxpdGUgb2JqZWN0LCBzbyB3ZSdyZSBzYWZlIHRvIHVzZSBhIHNpbmdsZSB2YXJpYWJsZSB0byBob3VzZQogICAgICAgICAgLy90aGUgc3R5bGVzIHNpbmNlIHRoZXJlIGlzIGFsd2F5cyBvbmx5IG9uZSBlbGVtZW50IGJlaW5nIGFuaW1hdGVkCiAgICAgICAgICB2YXIgb2xkU3R5bGUgPSBub2RlLmdldEF0dHJpYnV0ZSgnc3R5bGUnKSB8fCAnJzsKICAgICAgICAgIGlmIChvbGRTdHlsZS5jaGFyQXQob2xkU3R5bGUubGVuZ3RoLTEpICE9PSAnOycpIHsKICAgICAgICAgICAgb2xkU3R5bGUgKz0gJzsnOwogICAgICAgICAgfQogICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgb2xkU3R5bGUgKyAnICcgKyBzdHlsZSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTsKICAgICAgICB2YXIgY3NzM0FuaW1hdGlvbkV2ZW50cyA9IEFOSU1BVElPTkVORF9FVkVOVCArICcgJyArIFRSQU5TSVRJT05FTkRfRVZFTlQ7CiAgICAgICAgdmFyIGFuaW1hdGlvblRpbWUgICAgID0gKG1heERlbGF5ICsgbWF4RHVyYXRpb24pICogQ0xPU0lOR19USU1FX0JVRkZFUjsKICAgICAgICB2YXIgdG90YWxUaW1lICAgICAgICAgPSAoc3RhZ2dlclRpbWUgKyBhbmltYXRpb25UaW1lKSAqIE9ORV9TRUNPTkQ7CgogICAgICAgIHZhciBzdGFnZ2VyVGltZW91dDsKICAgICAgICBpZiAoc3RhZ2dlclRpbWUgPiAwKSB7CiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKHBlbmRpbmdDbGFzc05hbWUpOwogICAgICAgICAgc3RhZ2dlclRpbWVvdXQgPSAkdGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgc3RhZ2dlclRpbWVvdXQgPSBudWxsOwoKICAgICAgICAgICAgaWYgKHRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uID4gMCkgewogICAgICAgICAgICAgIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0aW1pbmdzLmFuaW1hdGlvbkR1cmF0aW9uID4gMCkgewogICAgICAgICAgICAgIGJsb2NrQW5pbWF0aW9ucyhub2RlLCBmYWxzZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoYWN0aXZlQ2xhc3NOYW1lKTsKICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhwZW5kaW5nQ2xhc3NOYW1lKTsKCiAgICAgICAgICAgIGlmIChzdHlsZXMpIHsKICAgICAgICAgICAgICBpZiAodGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gPT09IDApIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKCd0cmFuc2l0aW9uJywgdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiArICdzIGxpbmVhciBhbGwnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxlbWVudC5jc3Moc3R5bGVzKTsKICAgICAgICAgICAgICBhcHBsaWVkU3R5bGVzLnB1c2goJ3RyYW5zaXRpb24nKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgc3RhZ2dlclRpbWUgKiBPTkVfU0VDT05ELCBmYWxzZSk7CiAgICAgICAgfQoKICAgICAgICBlbGVtZW50Lm9uKGNzczNBbmltYXRpb25FdmVudHMsIG9uQW5pbWF0aW9uUHJvZ3Jlc3MpOwogICAgICAgIGVsZW1lbnREYXRhLmNsb3NlQW5pbWF0aW9uRm5zLnB1c2goZnVuY3Rpb24oKSB7CiAgICAgICAgICBvbkVuZCgpOwogICAgICAgICAgYWN0aXZlQW5pbWF0aW9uQ29tcGxldGUoKTsKICAgICAgICB9KTsKCiAgICAgICAgZWxlbWVudERhdGEucnVubmluZysrOwogICAgICAgIGFuaW1hdGlvbkNsb3NlSGFuZGxlcihlbGVtZW50LCB0b3RhbFRpbWUpOwogICAgICAgIHJldHVybiBvbkVuZDsKCiAgICAgICAgLy8gVGhpcyB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgY2FsbGVkIGJ5ICRhbmltYXRlIHNvCiAgICAgICAgLy8gdGhlcmUgaXMgbm8gbmVlZCB0byBhdHRhY2ggdGhpcyBpbnRlcm5hbGx5IHRvIHRoZQogICAgICAgIC8vIHRpbWVvdXQgZG9uZSBtZXRob2QuCiAgICAgICAgZnVuY3Rpb24gb25FbmQoKSB7CiAgICAgICAgICBlbGVtZW50Lm9mZihjc3MzQW5pbWF0aW9uRXZlbnRzLCBvbkFuaW1hdGlvblByb2dyZXNzKTsKICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3NOYW1lKTsKICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MocGVuZGluZ0NsYXNzTmFtZSk7CiAgICAgICAgICBpZiAoc3RhZ2dlclRpbWVvdXQpIHsKICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHN0YWdnZXJUaW1lb3V0KTsKICAgICAgICAgIH0KICAgICAgICAgIGFuaW1hdGVDbG9zZShlbGVtZW50LCBjbGFzc05hbWUpOwogICAgICAgICAgdmFyIG5vZGUgPSBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCk7CiAgICAgICAgICBmb3IgKHZhciBpIGluIGFwcGxpZWRTdHlsZXMpIHsKICAgICAgICAgICAgbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShhcHBsaWVkU3R5bGVzW2ldKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9uQW5pbWF0aW9uUHJvZ3Jlc3MoZXZlbnQpIHsKICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgdmFyIGV2ID0gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudDsKICAgICAgICAgIHZhciB0aW1lU3RhbXAgPSBldi4kbWFudWFsVGltZVN0YW1wIHx8IGV2LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpOwoKICAgICAgICAgIC8qIEZpcmVmb3ggKG9yIHBvc3NpYmx5IGp1c3QgR2Vja28pIGxpa2VzIHRvIG5vdCByb3VuZCB2YWx1ZXMgdXAKICAgICAgICAgICAqIHdoZW4gYSBtcyBtZWFzdXJlbWVudCBpcyB1c2VkIGZvciB0aGUgYW5pbWF0aW9uICovCiAgICAgICAgICB2YXIgZWxhcHNlZFRpbWUgPSBwYXJzZUZsb2F0KGV2LmVsYXBzZWRUaW1lLnRvRml4ZWQoRUxBUFNFRF9USU1FX01BWF9ERUNJTUFMX1BMQUNFUykpOwoKICAgICAgICAgIC8qICRtYW51YWxUaW1lU3RhbXAgaXMgYSBtb2NrZWQgdGltZVN0YW1wIHZhbHVlIHdoaWNoIGlzIHNldAogICAgICAgICAgICogd2l0aGluIGJyb3dzZXJUcmlnZ2VyKCkuIFRoaXMgaXMgb25seSBoZXJlIHNvIHRoYXQgdGVzdHMgY2FuCiAgICAgICAgICAgKiBtb2NrIGFuaW1hdGlvbnMgcHJvcGVybHkuIFJlYWwgZXZlbnRzIGZhbGxiYWNrIHRvIGV2ZW50LnRpbWVTdGFtcCwKICAgICAgICAgICAqIG9yLCBpZiB0aGV5IGRvbid0LCB0aGVuIGEgdGltZVN0YW1wIGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBmb3IgdGhlbS4KICAgICAgICAgICAqIFdlJ3JlIGNoZWNraW5nIHRvIHNlZSBpZiB0aGUgdGltZVN0YW1wIHN1cnBhc3NlcyB0aGUgZXhwZWN0ZWQgZGVsYXksCiAgICAgICAgICAgKiBidXQgd2UncmUgdXNpbmcgZWxhcHNlZFRpbWUgaW5zdGVhZCBvZiB0aGUgdGltZVN0YW1wIG9uIHRoZSAybmQKICAgICAgICAgICAqIHByZS1jb25kaXRpb24gc2luY2UgYW5pbWF0aW9ucyBzb21ldGltZXMgY2xvc2Ugb2ZmIGVhcmx5ICovCiAgICAgICAgICBpZiAoTWF0aC5tYXgodGltZVN0YW1wIC0gc3RhcnRUaW1lLCAwKSA+PSBtYXhEZWxheVRpbWUgJiYgZWxhcHNlZFRpbWUgPj0gbWF4RHVyYXRpb24pIHsKICAgICAgICAgICAgYWN0aXZlQW5pbWF0aW9uQ29tcGxldGUoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgYm9vbCkgewogICAgICAgIG5vZGUuc3R5bGVbVFJBTlNJVElPTl9QUk9QICsgUFJPUEVSVFlfS0VZXSA9IGJvb2wgPyAnbm9uZScgOiAnJzsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gYmxvY2tBbmltYXRpb25zKG5vZGUsIGJvb2wpIHsKICAgICAgICBub2RlLnN0eWxlW0FOSU1BVElPTl9QUk9QICsgQU5JTUFUSU9OX1BMQVlTVEFURV9LRVldID0gYm9vbCA/ICdwYXVzZWQnIDogJyc7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGFuaW1hdGVCZWZvcmUoYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgc3R5bGVzKSB7CiAgICAgICAgaWYgKGFuaW1hdGVTZXR1cChhbmltYXRpb25FdmVudCwgZWxlbWVudCwgY2xhc3NOYW1lLCBzdHlsZXMpKSB7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FuY2VsbGVkKSB7CiAgICAgICAgICAgIGNhbmNlbGxlZCAmJiBhbmltYXRlQ2xvc2UoZWxlbWVudCwgY2xhc3NOYW1lKTsKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9CgogICAgICBmdW5jdGlvbiBhbmltYXRlQWZ0ZXIoYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgYWZ0ZXJBbmltYXRpb25Db21wbGV0ZSwgc3R5bGVzKSB7CiAgICAgICAgaWYgKGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NTU19EQVRBX0tFWSkpIHsKICAgICAgICAgIHJldHVybiBhbmltYXRlUnVuKGFuaW1hdGlvbkV2ZW50LCBlbGVtZW50LCBjbGFzc05hbWUsIGFmdGVyQW5pbWF0aW9uQ29tcGxldGUsIHN0eWxlcyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFuaW1hdGVDbG9zZShlbGVtZW50LCBjbGFzc05hbWUpOwogICAgICAgICAgYWZ0ZXJBbmltYXRpb25Db21wbGV0ZSgpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZnVuY3Rpb24gYW5pbWF0ZShhbmltYXRpb25FdmVudCwgZWxlbWVudCwgY2xhc3NOYW1lLCBhbmltYXRpb25Db21wbGV0ZSwgb3B0aW9ucykgewogICAgICAgIC8vSWYgdGhlIGFuaW1hdGVTZXR1cCBmdW5jdGlvbiBkb2Vzbid0IGJvdGhlciByZXR1cm5pbmcgYQogICAgICAgIC8vY2FuY2VsbGF0aW9uIGZ1bmN0aW9uIHRoZW4gaXQgbWVhbnMgdGhhdCB0aGVyZSBpcyBubyBhbmltYXRpb24KICAgICAgICAvL3RvIHBlcmZvcm0gYXQgYWxsCiAgICAgICAgdmFyIHByZVJlZmxvd0NhbmNlbGxhdGlvbiA9IGFuaW1hdGVCZWZvcmUoYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucy5mcm9tKTsKICAgICAgICBpZiAoIXByZVJlZmxvd0NhbmNlbGxhdGlvbikgewogICAgICAgICAgY2xlYXJDYWNoZUFmdGVyUmVmbG93KCk7CiAgICAgICAgICBhbmltYXRpb25Db21wbGV0ZSgpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgLy9UaGVyZSBhcmUgdHdvIGNhbmNlbGxhdGlvbiBmdW5jdGlvbnM6IG9uZSBpcyBiZWZvcmUgdGhlIGZpcnN0CiAgICAgICAgLy9yZWZsb3cgYW5pbWF0aW9uIGFuZCB0aGUgc2Vjb25kIGlzIGR1cmluZyB0aGUgYWN0aXZlIHN0YXRlCiAgICAgICAgLy9hbmltYXRpb24uIFRoZSBmaXJzdCBmdW5jdGlvbiB3aWxsIHRha2UgY2FyZSBvZiByZW1vdmluZyB0aGUKICAgICAgICAvL2RhdGEgZnJvbSB0aGUgZWxlbWVudCB3aGljaCB3aWxsIG5vdCBtYWtlIHRoZSAybmQgYW5pbWF0aW9uCiAgICAgICAgLy9oYXBwZW4gaW4gdGhlIGZpcnN0IHBsYWNlCiAgICAgICAgdmFyIGNhbmNlbCA9IHByZVJlZmxvd0NhbmNlbGxhdGlvbjsKICAgICAgICBhZnRlclJlZmxvdyhlbGVtZW50LCBmdW5jdGlvbigpIHsKICAgICAgICAgIC8vb25jZSB0aGUgcmVmbG93IGlzIGNvbXBsZXRlIHRoZW4gd2UgcG9pbnQgY2FuY2VsIHRvCiAgICAgICAgICAvL3RoZSBuZXcgY2FuY2VsbGF0aW9uIGZ1bmN0aW9uIHdoaWNoIHdpbGwgcmVtb3ZlIGFsbCBvZiB0aGUKICAgICAgICAgIC8vYW5pbWF0aW9uIHByb3BlcnRpZXMgZnJvbSB0aGUgYWN0aXZlIGFuaW1hdGlvbgogICAgICAgICAgY2FuY2VsID0gYW5pbWF0ZUFmdGVyKGFuaW1hdGlvbkV2ZW50LCBlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkNvbXBsZXRlLCBvcHRpb25zLnRvKTsKICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbmNlbGxlZCkgewogICAgICAgICAgKGNhbmNlbCB8fCBub29wKShjYW5jZWxsZWQpOwogICAgICAgIH07CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGFuaW1hdGVDbG9zZShlbGVtZW50LCBjbGFzc05hbWUpIHsKICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7CiAgICAgICAgdmFyIGRhdGEgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DU1NfREFUQV9LRVkpOwogICAgICAgIGlmIChkYXRhKSB7CiAgICAgICAgICBpZiAoZGF0YS5ydW5uaW5nKSB7CiAgICAgICAgICAgIGRhdGEucnVubmluZy0tOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFkYXRhLnJ1bm5pbmcgfHwgZGF0YS5ydW5uaW5nID09PSAwKSB7CiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRGF0YShOR19BTklNQVRFX0NTU19EQVRBX0tFWSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIGFuaW1hdGUgOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGZyb20sIHRvLCBhbmltYXRpb25Db21wbGV0ZWQsIG9wdGlvbnMpIHsKICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICAgICAgb3B0aW9ucy5mcm9tID0gZnJvbTsKICAgICAgICAgIG9wdGlvbnMudG8gPSB0bzsKICAgICAgICAgIHJldHVybiBhbmltYXRlKCdhbmltYXRlJywgZWxlbWVudCwgY2xhc3NOYW1lLCBhbmltYXRpb25Db21wbGV0ZWQsIG9wdGlvbnMpOwogICAgICAgIH0sCgogICAgICAgIGVudGVyIDogZnVuY3Rpb24oZWxlbWVudCwgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zKSB7CiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICAgIHJldHVybiBhbmltYXRlKCdlbnRlcicsIGVsZW1lbnQsICduZy1lbnRlcicsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucyk7CiAgICAgICAgfSwKCiAgICAgICAgbGVhdmUgOiBmdW5jdGlvbihlbGVtZW50LCBhbmltYXRpb25Db21wbGV0ZWQsIG9wdGlvbnMpIHsKICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICAgICAgcmV0dXJuIGFuaW1hdGUoJ2xlYXZlJywgZWxlbWVudCwgJ25nLWxlYXZlJywgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zKTsKICAgICAgICB9LAoKICAgICAgICBtb3ZlIDogZnVuY3Rpb24oZWxlbWVudCwgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zKSB7CiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICAgIHJldHVybiBhbmltYXRlKCdtb3ZlJywgZWxlbWVudCwgJ25nLW1vdmUnLCBhbmltYXRpb25Db21wbGV0ZWQsIG9wdGlvbnMpOwogICAgICAgIH0sCgogICAgICAgIGJlZm9yZVNldENsYXNzIDogZnVuY3Rpb24oZWxlbWVudCwgYWRkLCByZW1vdmUsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucykgewogICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gc3VmZml4Q2xhc3NlcyhyZW1vdmUsICctcmVtb3ZlJykgKyAnICcgKwogICAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeENsYXNzZXMoYWRkLCAnLWFkZCcpOwogICAgICAgICAgdmFyIGNhbmNlbGxhdGlvbk1ldGhvZCA9IGFuaW1hdGVCZWZvcmUoJ3NldENsYXNzJywgZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zLmZyb20pOwogICAgICAgICAgaWYgKGNhbmNlbGxhdGlvbk1ldGhvZCkgewogICAgICAgICAgICBhZnRlclJlZmxvdyhlbGVtZW50LCBhbmltYXRpb25Db21wbGV0ZWQpOwogICAgICAgICAgICByZXR1cm4gY2FuY2VsbGF0aW9uTWV0aG9kOwogICAgICAgICAgfQogICAgICAgICAgY2xlYXJDYWNoZUFmdGVyUmVmbG93KCk7CiAgICAgICAgICBhbmltYXRpb25Db21wbGV0ZWQoKTsKICAgICAgICB9LAoKICAgICAgICBiZWZvcmVBZGRDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zKSB7CiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICAgIHZhciBjYW5jZWxsYXRpb25NZXRob2QgPSBhbmltYXRlQmVmb3JlKCdhZGRDbGFzcycsIGVsZW1lbnQsIHN1ZmZpeENsYXNzZXMoY2xhc3NOYW1lLCAnLWFkZCcpLCBvcHRpb25zLmZyb20pOwogICAgICAgICAgaWYgKGNhbmNlbGxhdGlvbk1ldGhvZCkgewogICAgICAgICAgICBhZnRlclJlZmxvdyhlbGVtZW50LCBhbmltYXRpb25Db21wbGV0ZWQpOwogICAgICAgICAgICByZXR1cm4gY2FuY2VsbGF0aW9uTWV0aG9kOwogICAgICAgICAgfQogICAgICAgICAgY2xlYXJDYWNoZUFmdGVyUmVmbG93KCk7CiAgICAgICAgICBhbmltYXRpb25Db21wbGV0ZWQoKTsKICAgICAgICB9LAoKICAgICAgICBiZWZvcmVSZW1vdmVDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zKSB7CiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICAgIHZhciBjYW5jZWxsYXRpb25NZXRob2QgPSBhbmltYXRlQmVmb3JlKCdyZW1vdmVDbGFzcycsIGVsZW1lbnQsIHN1ZmZpeENsYXNzZXMoY2xhc3NOYW1lLCAnLXJlbW92ZScpLCBvcHRpb25zLmZyb20pOwogICAgICAgICAgaWYgKGNhbmNlbGxhdGlvbk1ldGhvZCkgewogICAgICAgICAgICBhZnRlclJlZmxvdyhlbGVtZW50LCBhbmltYXRpb25Db21wbGV0ZWQpOwogICAgICAgICAgICByZXR1cm4gY2FuY2VsbGF0aW9uTWV0aG9kOwogICAgICAgICAgfQogICAgICAgICAgY2xlYXJDYWNoZUFmdGVyUmVmbG93KCk7CiAgICAgICAgICBhbmltYXRpb25Db21wbGV0ZWQoKTsKICAgICAgICB9LAoKICAgICAgICBzZXRDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZCwgcmVtb3ZlLCBhbmltYXRpb25Db21wbGV0ZWQsIG9wdGlvbnMpIHsKICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogICAgICAgICAgcmVtb3ZlID0gc3VmZml4Q2xhc3NlcyhyZW1vdmUsICctcmVtb3ZlJyk7CiAgICAgICAgICBhZGQgPSBzdWZmaXhDbGFzc2VzKGFkZCwgJy1hZGQnKTsKICAgICAgICAgIHZhciBjbGFzc05hbWUgPSByZW1vdmUgKyAnICcgKyBhZGQ7CiAgICAgICAgICByZXR1cm4gYW5pbWF0ZUFmdGVyKCdzZXRDbGFzcycsIGVsZW1lbnQsIGNsYXNzTmFtZSwgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zLnRvKTsKICAgICAgICB9LAoKICAgICAgICBhZGRDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zKSB7CiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICAgIHJldHVybiBhbmltYXRlQWZ0ZXIoJ2FkZENsYXNzJywgZWxlbWVudCwgc3VmZml4Q2xhc3NlcyhjbGFzc05hbWUsICctYWRkJyksIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucy50byk7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlQ2xhc3MgOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucykgewogICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgICByZXR1cm4gYW5pbWF0ZUFmdGVyKCdyZW1vdmVDbGFzcycsIGVsZW1lbnQsIHN1ZmZpeENsYXNzZXMoY2xhc3NOYW1lLCAnLXJlbW92ZScpLCBhbmltYXRpb25Db21wbGV0ZWQsIG9wdGlvbnMudG8pOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGZ1bmN0aW9uIHN1ZmZpeENsYXNzZXMoY2xhc3Nlcywgc3VmZml4KSB7CiAgICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnOwogICAgICAgIGNsYXNzZXMgPSBpc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXMuc3BsaXQoL1xzKy8pOwogICAgICAgIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oa2xhc3MsIGkpIHsKICAgICAgICAgIGlmIChrbGFzcyAmJiBrbGFzcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGNsYXNzTmFtZSArPSAoaSA+IDAgPyAnICcgOiAnJykgKyBrbGFzcyArIHN1ZmZpeDsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gY2xhc3NOYW1lOwogICAgICB9CiAgICB9XSk7CiAgfV0pOwoKCn0pKHdpbmRvdywgd2luZG93LmFuZ3VsYXIpOwoKLyoqCiAqIGFuZ3VsYXItc3RyYXAKICogQHZlcnNpb24gdjIuMS4yIC0gMjAxNC0xMC0xOQogKiBAbGluayBodHRwOi8vbWdjcmVhLmdpdGh1Yi5pby9hbmd1bGFyLXN0cmFwCiAqIEBhdXRob3IgT2xpdmllciBMb3V2aWduZXMgKG9saXZpZXJAbWctY3JlYS5jb20pCiAqIEBsaWNlbnNlIE1JVCBMaWNlbnNlLCBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVAogKi8KKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkgewondXNlIHN0cmljdCc7Ci8vIFNvdXJjZTogbW9kdWxlLmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcCcsIFsKICAnbWdjcmVhLm5nU3RyYXAubW9kYWwnLAogICdtZ2NyZWEubmdTdHJhcC5hc2lkZScsCiAgJ21nY3JlYS5uZ1N0cmFwLmFsZXJ0JywKICAnbWdjcmVhLm5nU3RyYXAuYnV0dG9uJywKICAnbWdjcmVhLm5nU3RyYXAuc2VsZWN0JywKICAnbWdjcmVhLm5nU3RyYXAuZGF0ZXBpY2tlcicsCiAgJ21nY3JlYS5uZ1N0cmFwLnRpbWVwaWNrZXInLAogICdtZ2NyZWEubmdTdHJhcC5uYXZiYXInLAogICdtZ2NyZWEubmdTdHJhcC50b29sdGlwJywKICAnbWdjcmVhLm5nU3RyYXAucG9wb3ZlcicsCiAgJ21nY3JlYS5uZ1N0cmFwLmRyb3Bkb3duJywKICAnbWdjcmVhLm5nU3RyYXAudHlwZWFoZWFkJywKICAnbWdjcmVhLm5nU3RyYXAuc2Nyb2xsc3B5JywKICAnbWdjcmVhLm5nU3RyYXAuYWZmaXgnLAogICdtZ2NyZWEubmdTdHJhcC50YWInLAogICdtZ2NyZWEubmdTdHJhcC5jb2xsYXBzZScKXSk7CgovLyBTb3VyY2U6IGFsZXJ0LmpzCi8vIEBCVUc6IGZvbGxvd2luZyBzbmlwcGV0IHdvbid0IGNvbXBpbGUgY29ycmVjdGx5Ci8vIEBUT0RPOiBzdWJtaXQgaXNzdWUgdG8gY29yZQovLyAnPHNwYW4gbmctaWY9InRpdGxlIj48c3Ryb25nIG5nLWJpbmQ9InRpdGxlIj48L3N0cm9uZz4mbmJzcDs8L3NwYW4+PHNwYW4gbmctYmluZC1odG1sPSJjb250ZW50Ij48L3NwYW4+JyArCgphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAuYWxlcnQnLCBbJ21nY3JlYS5uZ1N0cmFwLm1vZGFsJ10pCgogIC5wcm92aWRlcignJGFsZXJ0JywgZnVuY3Rpb24oKSB7CgogICAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHsKICAgICAgYW5pbWF0aW9uOiAnYW0tZmFkZScsCiAgICAgIHByZWZpeENsYXNzOiAnYWxlcnQnLAogICAgICBwcmVmaXhFdmVudDogJ2FsZXJ0JywKICAgICAgcGxhY2VtZW50OiBudWxsLAogICAgICB0ZW1wbGF0ZTogJ2FsZXJ0L2FsZXJ0LnRwbC5odG1sJywKICAgICAgY29udGFpbmVyOiBmYWxzZSwKICAgICAgZWxlbWVudDogbnVsbCwKICAgICAgYmFja2Ryb3A6IGZhbHNlLAogICAgICBrZXlib2FyZDogdHJ1ZSwKICAgICAgc2hvdzogdHJ1ZSwKICAgICAgLy8gU3BlY2lmaWMgb3B0aW9ucwogICAgICBkdXJhdGlvbjogZmFsc2UsCiAgICAgIHR5cGU6IGZhbHNlLAogICAgICBkaXNtaXNzYWJsZTogdHJ1ZQogICAgfTsKCiAgICB0aGlzLiRnZXQgPSBbIiRtb2RhbCIsICIkdGltZW91dCIsIGZ1bmN0aW9uKCRtb2RhbCwgJHRpbWVvdXQpIHsKCiAgICAgIGZ1bmN0aW9uIEFsZXJ0RmFjdG9yeShjb25maWcpIHsKCiAgICAgICAgdmFyICRhbGVydCA9IHt9OwoKICAgICAgICAvLyBDb21tb24gdmFycwogICAgICAgIHZhciBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sIGRlZmF1bHRzLCBjb25maWcpOwoKICAgICAgICAkYWxlcnQgPSAkbW9kYWwob3B0aW9ucyk7CgogICAgICAgIC8vIFN1cHBvcnQgc2NvcGUgYXMgc3RyaW5nIG9wdGlvbnMgWy8qdGl0bGUsIGNvbnRlbnQsICovIHR5cGUsIGRpc21pc3NhYmxlXQogICAgICAgICRhbGVydC4kc2NvcGUuZGlzbWlzc2FibGUgPSAhIW9wdGlvbnMuZGlzbWlzc2FibGU7CiAgICAgICAgaWYob3B0aW9ucy50eXBlKSB7CiAgICAgICAgICAkYWxlcnQuJHNjb3BlLnR5cGUgPSBvcHRpb25zLnR5cGU7CiAgICAgICAgfQoKICAgICAgICAvLyBTdXBwb3J0IGF1dG8tY2xvc2UgZHVyYXRpb24KICAgICAgICB2YXIgc2hvdyA9ICRhbGVydC5zaG93OwogICAgICAgIGlmKG9wdGlvbnMuZHVyYXRpb24pIHsKICAgICAgICAgICRhbGVydC5zaG93ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNob3coKTsKICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgJGFsZXJ0LmhpZGUoKTsKICAgICAgICAgICAgfSwgb3B0aW9ucy5kdXJhdGlvbiAqIDEwMDApOwogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkYWxlcnQ7CgogICAgICB9CgogICAgICByZXR1cm4gQWxlcnRGYWN0b3J5OwoKICAgIH1dOwoKICB9KQoKICAuZGlyZWN0aXZlKCdic0FsZXJ0JywgWyIkd2luZG93IiwgIiRzY2UiLCAiJGFsZXJ0IiwgZnVuY3Rpb24oJHdpbmRvdywgJHNjZSwgJGFsZXJ0KSB7CgogICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8ICR3aW5kb3cuc2V0VGltZW91dDsKCiAgICByZXR1cm4gewogICAgICByZXN0cmljdDogJ0VBQycsCiAgICAgIHNjb3BlOiB0cnVlLAogICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgdHJhbnNjbHVzaW9uKSB7CgogICAgICAgIC8vIERpcmVjdGl2ZSBvcHRpb25zCiAgICAgICAgdmFyIG9wdGlvbnMgPSB7c2NvcGU6IHNjb3BlLCBlbGVtZW50OiBlbGVtZW50LCBzaG93OiBmYWxzZX07CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKFsndGVtcGxhdGUnLCAncGxhY2VtZW50JywgJ2tleWJvYXJkJywgJ2h0bWwnLCAnY29udGFpbmVyJywgJ2FuaW1hdGlvbicsICdkdXJhdGlvbicsICdkaXNtaXNzYWJsZSddLCBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgIGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJba2V5XSkpIG9wdGlvbnNba2V5XSA9IGF0dHJba2V5XTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gU3VwcG9ydCBzY29wZSBhcyBkYXRhLWF0dHJzCiAgICAgICAgYW5ndWxhci5mb3JFYWNoKFsndGl0bGUnLCAnY29udGVudCcsICd0eXBlJ10sIGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgYXR0cltrZXldICYmIGF0dHIuJG9ic2VydmUoa2V5LCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgICAgc2NvcGVba2V5XSA9ICRzY2UudHJ1c3RBc0h0bWwobmV3VmFsdWUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIFN1cHBvcnQgc2NvcGUgYXMgYW4gb2JqZWN0CiAgICAgICAgYXR0ci5ic0FsZXJ0ICYmIHNjb3BlLiR3YXRjaChhdHRyLmJzQWxlcnQsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgaWYoYW5ndWxhci5pc09iamVjdChuZXdWYWx1ZSkpIHsKICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoc2NvcGUsIG5ld1ZhbHVlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNjb3BlLmNvbnRlbnQgPSBuZXdWYWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9LCB0cnVlKTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhbGVydAogICAgICAgIHZhciBhbGVydCA9ICRhbGVydChvcHRpb25zKTsKCiAgICAgICAgLy8gVHJpZ2dlcgogICAgICAgIGVsZW1lbnQub24oYXR0ci50cmlnZ2VyIHx8ICdjbGljaycsIGFsZXJ0LnRvZ2dsZSk7CgogICAgICAgIC8vIEdhcmJhZ2UgY29sbGVjdGlvbgogICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmIChhbGVydCkgYWxlcnQuZGVzdHJveSgpOwogICAgICAgICAgb3B0aW9ucyA9IG51bGw7CiAgICAgICAgICBhbGVydCA9IG51bGw7CiAgICAgICAgfSk7CgogICAgICB9CiAgICB9OwoKICB9XSk7CgovLyBTb3VyY2U6IGFmZml4LmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcC5hZmZpeCcsIFsnbWdjcmVhLm5nU3RyYXAuaGVscGVycy5kaW1lbnNpb25zJywgJ21nY3JlYS5uZ1N0cmFwLmhlbHBlcnMuZGVib3VuY2UnXSkKCiAgLnByb3ZpZGVyKCckYWZmaXgnLCBmdW5jdGlvbigpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0gewogICAgICBvZmZzZXRUb3A6ICdhdXRvJwogICAgfTsKCiAgICB0aGlzLiRnZXQgPSBbIiR3aW5kb3ciLCAiZGVib3VuY2UiLCAiZGltZW5zaW9ucyIsIGZ1bmN0aW9uKCR3aW5kb3csIGRlYm91bmNlLCBkaW1lbnNpb25zKSB7CgogICAgICB2YXIgYm9keUVsID0gYW5ndWxhci5lbGVtZW50KCR3aW5kb3cuZG9jdW1lbnQuYm9keSk7CiAgICAgIHZhciB3aW5kb3dFbCA9IGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KTsKCiAgICAgIGZ1bmN0aW9uIEFmZml4RmFjdG9yeShlbGVtZW50LCBjb25maWcpIHsKCiAgICAgICAgdmFyICRhZmZpeCA9IHt9OwoKICAgICAgICAvLyBDb21tb24gdmFycwogICAgICAgIHZhciBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sIGRlZmF1bHRzLCBjb25maWcpOwogICAgICAgIHZhciB0YXJnZXRFbCA9IG9wdGlvbnMudGFyZ2V0OwoKICAgICAgICAvLyBJbml0aWFsIHByaXZhdGUgdmFycwogICAgICAgIHZhciByZXNldCA9ICdhZmZpeCBhZmZpeC10b3AgYWZmaXgtYm90dG9tJywKICAgICAgICAgICAgaW5pdGlhbEFmZml4VG9wID0gMCwKICAgICAgICAgICAgaW5pdGlhbE9mZnNldFRvcCA9IDAsCiAgICAgICAgICAgIG9mZnNldFRvcCA9IDAsCiAgICAgICAgICAgIG9mZnNldEJvdHRvbSA9IDAsCiAgICAgICAgICAgIGFmZml4ZWQgPSBudWxsLAogICAgICAgICAgICB1bnBpbiA9IG51bGw7CgogICAgICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudCgpOwogICAgICAgIC8vIE9wdGlvbnM6IGN1c3RvbSBwYXJlbnQKICAgICAgICBpZiAob3B0aW9ucy5vZmZzZXRQYXJlbnQpIHsKICAgICAgICAgIGlmIChvcHRpb25zLm9mZnNldFBhcmVudC5tYXRjaCgvXlxkKyQvKSkgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IChvcHRpb25zLm9mZnNldFBhcmVudCAqIDEpIC0gMTsgaSsrKSB7CiAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcGFyZW50ID0gYW5ndWxhci5lbGVtZW50KG9wdGlvbnMub2Zmc2V0UGFyZW50KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRhZmZpeC5pbml0ID0gZnVuY3Rpb24oKSB7CgogICAgICAgICAgJGFmZml4LiRwYXJzZU9mZnNldHMoKTsKICAgICAgICAgIGluaXRpYWxPZmZzZXRUb3AgPSBkaW1lbnNpb25zLm9mZnNldChlbGVtZW50WzBdKS50b3AgKyBpbml0aWFsQWZmaXhUb3A7CgogICAgICAgICAgLy8gQmluZCBldmVudHMKICAgICAgICAgIHRhcmdldEVsLm9uKCdzY3JvbGwnLCAkYWZmaXguY2hlY2tQb3NpdGlvbik7CiAgICAgICAgICB0YXJnZXRFbC5vbignY2xpY2snLCAkYWZmaXguY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3ApOwogICAgICAgICAgd2luZG93RWwub24oJ3Jlc2l6ZScsICRhZmZpeC4kZGVib3VuY2VkT25SZXNpemUpOwoKICAgICAgICAgIC8vIEJvdGggb2YgdGhlc2UgY2hlY2tQb3NpdGlvbigpIGNhbGxzIGFyZSBuZWNlc3NhcnkgZm9yIHRoZSBjYXNlIHdoZXJlCiAgICAgICAgICAvLyB0aGUgdXNlciBoaXRzIHJlZnJlc2ggYWZ0ZXIgc2Nyb2xsaW5nIHRvIHRoZSBib3R0b20gb2YgdGhlIHBhZ2UuCiAgICAgICAgICAkYWZmaXguY2hlY2tQb3NpdGlvbigpOwogICAgICAgICAgJGFmZml4LmNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wKCk7CgogICAgICAgIH07CgogICAgICAgICRhZmZpeC5kZXN0cm95ID0gZnVuY3Rpb24oKSB7CgogICAgICAgICAgLy8gVW5iaW5kIGV2ZW50cwogICAgICAgICAgdGFyZ2V0RWwub2ZmKCdzY3JvbGwnLCAkYWZmaXguY2hlY2tQb3NpdGlvbik7CiAgICAgICAgICB0YXJnZXRFbC5vZmYoJ2NsaWNrJywgJGFmZml4LmNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wKTsKICAgICAgICAgIHdpbmRvd0VsLm9mZigncmVzaXplJywgJGFmZml4LiRkZWJvdW5jZWRPblJlc2l6ZSk7CgogICAgICAgIH07CgogICAgICAgICRhZmZpeC5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCA9IGZ1bmN0aW9uKCkgewoKICAgICAgICAgIHNldFRpbWVvdXQoJGFmZml4LmNoZWNrUG9zaXRpb24sIDEpOwoKICAgICAgICB9OwoKICAgICAgICAkYWZmaXguY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgLy8gaWYgKCF0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSByZXR1cm4KCiAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsVG9wKCk7CiAgICAgICAgICB2YXIgcG9zaXRpb24gPSBkaW1lbnNpb25zLm9mZnNldChlbGVtZW50WzBdKTsKICAgICAgICAgIHZhciBlbGVtZW50SGVpZ2h0ID0gZGltZW5zaW9ucy5oZWlnaHQoZWxlbWVudFswXSk7CgogICAgICAgICAgLy8gR2V0IHJlcXVpcmVkIGFmZml4IGNsYXNzIGFjY29yZGluZyB0byBwb3NpdGlvbgogICAgICAgICAgdmFyIGFmZml4ID0gZ2V0UmVxdWlyZWRBZmZpeENsYXNzKHVucGluLCBwb3NpdGlvbiwgZWxlbWVudEhlaWdodCk7CgogICAgICAgICAgLy8gRGlkIGFmZml4IHN0YXR1cyBjaGFuZ2VkIHRoaXMgbGFzdCBjaGVjaz8KICAgICAgICAgIGlmKGFmZml4ZWQgPT09IGFmZml4KSByZXR1cm47CiAgICAgICAgICBhZmZpeGVkID0gYWZmaXg7CgogICAgICAgICAgLy8gQWRkIHByb3BlciBhZmZpeCBjbGFzcwogICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhyZXNldCkuYWRkQ2xhc3MoJ2FmZml4JyArICgoYWZmaXggIT09ICdtaWRkbGUnKSA/ICctJyArIGFmZml4IDogJycpKTsKCiAgICAgICAgICBpZihhZmZpeCA9PT0gJ3RvcCcpIHsKICAgICAgICAgICAgdW5waW4gPSBudWxsOwogICAgICAgICAgICBlbGVtZW50LmNzcygncG9zaXRpb24nLCAob3B0aW9ucy5vZmZzZXRQYXJlbnQpID8gJycgOiAncmVsYXRpdmUnKTsKICAgICAgICAgICAgZWxlbWVudC5jc3MoJ3RvcCcsICcnKTsKICAgICAgICAgIH0gZWxzZSBpZihhZmZpeCA9PT0gJ2JvdHRvbScpIHsKICAgICAgICAgICAgaWYgKG9wdGlvbnMub2Zmc2V0VW5waW4pIHsKICAgICAgICAgICAgICB1bnBpbiA9IC0ob3B0aW9ucy5vZmZzZXRVbnBpbiAqIDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB1bnBpbiB0aHJlc2hvbGQgd2hlbiBhZmZpeGVkIHRvIGJvdHRvbS4KICAgICAgICAgICAgICAvLyBIb3BlZnVsbHkgdGhlIGJyb3dzZXIgc2Nyb2xscyBwaXhlbCBieSBwaXhlbC4KICAgICAgICAgICAgICB1bnBpbiA9IHBvc2l0aW9uLnRvcCAtIHNjcm9sbFRvcDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbGVtZW50LmNzcygncG9zaXRpb24nLCAob3B0aW9ucy5vZmZzZXRQYXJlbnQpID8gJycgOiAncmVsYXRpdmUnKTsKICAgICAgICAgICAgZWxlbWVudC5jc3MoJ3RvcCcsIChvcHRpb25zLm9mZnNldFBhcmVudCkgPyAnJyA6ICgoYm9keUVsWzBdLm9mZnNldEhlaWdodCAtIG9mZnNldEJvdHRvbSAtIGVsZW1lbnRIZWlnaHQgLSBpbml0aWFsT2Zmc2V0VG9wKSArICdweCcpKTsKICAgICAgICAgIH0gZWxzZSB7IC8vIGFmZml4ID09PSAnbWlkZGxlJwogICAgICAgICAgICB1bnBpbiA9IG51bGw7CiAgICAgICAgICAgIGVsZW1lbnQuY3NzKCdwb3NpdGlvbicsICdmaXhlZCcpOwogICAgICAgICAgICBlbGVtZW50LmNzcygndG9wJywgaW5pdGlhbEFmZml4VG9wICsgJ3B4Jyk7CiAgICAgICAgICB9CgogICAgICAgIH07CgogICAgICAgICRhZmZpeC4kb25SZXNpemUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICRhZmZpeC4kcGFyc2VPZmZzZXRzKCk7CiAgICAgICAgICAkYWZmaXguY2hlY2tQb3NpdGlvbigpOwogICAgICAgIH07CiAgICAgICAgJGFmZml4LiRkZWJvdW5jZWRPblJlc2l6ZSA9IGRlYm91bmNlKCRhZmZpeC4kb25SZXNpemUsIDUwKTsKCiAgICAgICAgJGFmZml4LiRwYXJzZU9mZnNldHMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBpbml0aWFsUG9zaXRpb24gPSBlbGVtZW50LmNzcygncG9zaXRpb24nKTsKICAgICAgICAgIC8vIFJlc2V0IHBvc2l0aW9uIHRvIGNhbGN1bGF0ZSBjb3JyZWN0IG9mZnNldFRvcAogICAgICAgICAgZWxlbWVudC5jc3MoJ3Bvc2l0aW9uJywgKG9wdGlvbnMub2Zmc2V0UGFyZW50KSA/ICcnIDogJ3JlbGF0aXZlJyk7CgogICAgICAgICAgaWYob3B0aW9ucy5vZmZzZXRUb3ApIHsKICAgICAgICAgICAgaWYob3B0aW9ucy5vZmZzZXRUb3AgPT09ICdhdXRvJykgewogICAgICAgICAgICAgIG9wdGlvbnMub2Zmc2V0VG9wID0gJyswJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZihvcHRpb25zLm9mZnNldFRvcC5tYXRjaCgvXlstK11cZCskLykpIHsKICAgICAgICAgICAgICBpbml0aWFsQWZmaXhUb3AgPSAtIG9wdGlvbnMub2Zmc2V0VG9wICogMTsKICAgICAgICAgICAgICBpZihvcHRpb25zLm9mZnNldFBhcmVudCkgewogICAgICAgICAgICAgICAgb2Zmc2V0VG9wID0gZGltZW5zaW9ucy5vZmZzZXQocGFyZW50WzBdKS50b3AgKyAob3B0aW9ucy5vZmZzZXRUb3AgKiAxKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBvZmZzZXRUb3AgPSBkaW1lbnNpb25zLm9mZnNldChlbGVtZW50WzBdKS50b3AgLSBkaW1lbnNpb25zLmNzcyhlbGVtZW50WzBdLCAnbWFyZ2luVG9wJywgdHJ1ZSkgKyAob3B0aW9ucy5vZmZzZXRUb3AgKiAxKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgb2Zmc2V0VG9wID0gb3B0aW9ucy5vZmZzZXRUb3AgKiAxOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYob3B0aW9ucy5vZmZzZXRCb3R0b20pIHsKICAgICAgICAgICAgaWYob3B0aW9ucy5vZmZzZXRQYXJlbnQgJiYgb3B0aW9ucy5vZmZzZXRCb3R0b20ubWF0Y2goL15bLStdXGQrJC8pKSB7CiAgICAgICAgICAgICAgLy8gYWRkIDEgcGl4ZWwgZHVlIHRvIHJvdW5kaW5nIHByb2JsZW1zLi4uCiAgICAgICAgICAgICAgb2Zmc2V0Qm90dG9tID0gZ2V0U2Nyb2xsSGVpZ2h0KCkgLSAoZGltZW5zaW9ucy5vZmZzZXQocGFyZW50WzBdKS50b3AgKyBkaW1lbnNpb25zLmhlaWdodChwYXJlbnRbMF0pKSArIChvcHRpb25zLm9mZnNldEJvdHRvbSAqIDEpICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICBvZmZzZXRCb3R0b20gPSBvcHRpb25zLm9mZnNldEJvdHRvbSAqIDE7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBCcmluZyBiYWNrIHRoZSBlbGVtZW50J3MgcG9zaXRpb24gYWZ0ZXIgY2FsY3VsYXRpb25zCiAgICAgICAgICBlbGVtZW50LmNzcygncG9zaXRpb24nLCBpbml0aWFsUG9zaXRpb24pOwogICAgICAgIH07CgogICAgICAgIC8vIFByaXZhdGUgbWV0aG9kcwoKICAgICAgICBmdW5jdGlvbiBnZXRSZXF1aXJlZEFmZml4Q2xhc3ModW5waW4sIHBvc2l0aW9uLCBlbGVtZW50SGVpZ2h0KSB7CgogICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbFRvcCgpOwogICAgICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IGdldFNjcm9sbEhlaWdodCgpOwoKICAgICAgICAgIGlmKHNjcm9sbFRvcCA8PSBvZmZzZXRUb3ApIHsKICAgICAgICAgICAgcmV0dXJuICd0b3AnOwogICAgICAgICAgfSBlbHNlIGlmKHVucGluICE9PSBudWxsICYmIChzY3JvbGxUb3AgKyB1bnBpbiA8PSBwb3NpdGlvbi50b3ApKSB7CiAgICAgICAgICAgIHJldHVybiAnbWlkZGxlJzsKICAgICAgICAgIH0gZWxzZSBpZihvZmZzZXRCb3R0b20gIT09IG51bGwgJiYgKHBvc2l0aW9uLnRvcCArIGVsZW1lbnRIZWlnaHQgKyBpbml0aWFsQWZmaXhUb3AgPj0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSkgewogICAgICAgICAgICByZXR1cm4gJ2JvdHRvbSc7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gJ21pZGRsZSc7CiAgICAgICAgICB9CgogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0U2Nyb2xsVG9wKCkgewogICAgICAgICAgcmV0dXJuIHRhcmdldEVsWzBdID09PSAkd2luZG93ID8gJHdpbmRvdy5wYWdlWU9mZnNldCA6IHRhcmdldEVsWzBdLnNjcm9sbFRvcDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldFNjcm9sbEhlaWdodCgpIHsKICAgICAgICAgIHJldHVybiB0YXJnZXRFbFswXSA9PT0gJHdpbmRvdyA/ICR3aW5kb3cuZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQgOiB0YXJnZXRFbFswXS5zY3JvbGxIZWlnaHQ7CiAgICAgICAgfQoKICAgICAgICAkYWZmaXguaW5pdCgpOwogICAgICAgIHJldHVybiAkYWZmaXg7CgogICAgICB9CgogICAgICByZXR1cm4gQWZmaXhGYWN0b3J5OwoKICAgIH1dOwoKICB9KQoKICAuZGlyZWN0aXZlKCdic0FmZml4JywgWyIkYWZmaXgiLCAiJHdpbmRvdyIsIGZ1bmN0aW9uKCRhZmZpeCwgJHdpbmRvdykgewoKICAgIHJldHVybiB7CiAgICAgIHJlc3RyaWN0OiAnRUFDJywKICAgICAgcmVxdWlyZTogJ14/YnNBZmZpeFRhcmdldCcsCiAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBhZmZpeFRhcmdldCkgewoKICAgICAgICB2YXIgb3B0aW9ucyA9IHtzY29wZTogc2NvcGUsIG9mZnNldFRvcDogJ2F1dG8nLCB0YXJnZXQ6IGFmZml4VGFyZ2V0ID8gYWZmaXhUYXJnZXQuJGVsZW1lbnQgOiBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdyl9OwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChbJ29mZnNldFRvcCcsICdvZmZzZXRCb3R0b20nLCAnb2Zmc2V0UGFyZW50JywgJ29mZnNldFVucGluJ10sIGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgaWYoYW5ndWxhci5pc0RlZmluZWQoYXR0cltrZXldKSkgb3B0aW9uc1trZXldID0gYXR0cltrZXldOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgYWZmaXggPSAkYWZmaXgoZWxlbWVudCwgb3B0aW9ucyk7CiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgYWZmaXggJiYgYWZmaXguZGVzdHJveSgpOwogICAgICAgICAgb3B0aW9ucyA9IG51bGw7CiAgICAgICAgICBhZmZpeCA9IG51bGw7CiAgICAgICAgfSk7CgogICAgICB9CiAgICB9OwoKICB9XSkKCiAgLmRpcmVjdGl2ZSgnYnNBZmZpeFRhcmdldCcsIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgY29udHJvbGxlcjogWyIkZWxlbWVudCIsIGZ1bmN0aW9uKCRlbGVtZW50KSB7CiAgICAgICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50OwogICAgICB9XQogICAgfTsKICB9KTsKCi8vIFNvdXJjZTogYXNpZGUuanMKYW5ndWxhci5tb2R1bGUoJ21nY3JlYS5uZ1N0cmFwLmFzaWRlJywgWydtZ2NyZWEubmdTdHJhcC5tb2RhbCddKQoKICAucHJvdmlkZXIoJyRhc2lkZScsIGZ1bmN0aW9uKCkgewoKICAgIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgPSB7CiAgICAgIGFuaW1hdGlvbjogJ2FtLWZhZGUtYW5kLXNsaWRlLXJpZ2h0JywKICAgICAgcHJlZml4Q2xhc3M6ICdhc2lkZScsCiAgICAgIHByZWZpeEV2ZW50OiAnYXNpZGUnLAogICAgICBwbGFjZW1lbnQ6ICdyaWdodCcsCiAgICAgIHRlbXBsYXRlOiAnYXNpZGUvYXNpZGUudHBsLmh0bWwnLAogICAgICBjb250ZW50VGVtcGxhdGU6IGZhbHNlLAogICAgICBjb250YWluZXI6IGZhbHNlLAogICAgICBlbGVtZW50OiBudWxsLAogICAgICBiYWNrZHJvcDogdHJ1ZSwKICAgICAga2V5Ym9hcmQ6IHRydWUsCiAgICAgIGh0bWw6IGZhbHNlLAogICAgICBzaG93OiB0cnVlCiAgICB9OwoKICAgIHRoaXMuJGdldCA9IFsiJG1vZGFsIiwgZnVuY3Rpb24oJG1vZGFsKSB7CgogICAgICBmdW5jdGlvbiBBc2lkZUZhY3RvcnkoY29uZmlnKSB7CgogICAgICAgIHZhciAkYXNpZGUgPSB7fTsKCiAgICAgICAgLy8gQ29tbW9uIHZhcnMKICAgICAgICB2YXIgb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBkZWZhdWx0cywgY29uZmlnKTsKCiAgICAgICAgJGFzaWRlID0gJG1vZGFsKG9wdGlvbnMpOwoKICAgICAgICByZXR1cm4gJGFzaWRlOwoKICAgICAgfQoKICAgICAgcmV0dXJuIEFzaWRlRmFjdG9yeTsKCiAgICB9XTsKCiAgfSkKCiAgLmRpcmVjdGl2ZSgnYnNBc2lkZScsIFsiJHdpbmRvdyIsICIkc2NlIiwgIiRhc2lkZSIsIGZ1bmN0aW9uKCR3aW5kb3csICRzY2UsICRhc2lkZSkgewoKICAgIHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAkd2luZG93LnNldFRpbWVvdXQ7CgogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdFQUMnLAogICAgICBzY29wZTogdHJ1ZSwKICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIHRyYW5zY2x1c2lvbikgewogICAgICAgIC8vIERpcmVjdGl2ZSBvcHRpb25zCiAgICAgICAgdmFyIG9wdGlvbnMgPSB7c2NvcGU6IHNjb3BlLCBlbGVtZW50OiBlbGVtZW50LCBzaG93OiBmYWxzZX07CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKFsndGVtcGxhdGUnLCAnY29udGVudFRlbXBsYXRlJywgJ3BsYWNlbWVudCcsICdiYWNrZHJvcCcsICdrZXlib2FyZCcsICdodG1sJywgJ2NvbnRhaW5lcicsICdhbmltYXRpb24nXSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICBpZihhbmd1bGFyLmlzRGVmaW5lZChhdHRyW2tleV0pKSBvcHRpb25zW2tleV0gPSBhdHRyW2tleV07CiAgICAgICAgfSk7CgogICAgICAgIC8vIFN1cHBvcnQgc2NvcGUgYXMgZGF0YS1hdHRycwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChbJ3RpdGxlJywgJ2NvbnRlbnQnXSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICBhdHRyW2tleV0gJiYgYXR0ci4kb2JzZXJ2ZShrZXksIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgICBzY29wZVtrZXldID0gJHNjZS50cnVzdEFzSHRtbChuZXdWYWx1ZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gU3VwcG9ydCBzY29wZSBhcyBhbiBvYmplY3QKICAgICAgICBhdHRyLmJzQXNpZGUgJiYgc2NvcGUuJHdhdGNoKGF0dHIuYnNBc2lkZSwgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICBpZihhbmd1bGFyLmlzT2JqZWN0KG5ld1ZhbHVlKSkgewogICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChzY29wZSwgbmV3VmFsdWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2NvcGUuY29udGVudCA9IG5ld1ZhbHVlOwogICAgICAgICAgfQogICAgICAgIH0sIHRydWUpOwoKICAgICAgICAvLyBJbml0aWFsaXplIGFzaWRlCiAgICAgICAgdmFyIGFzaWRlID0gJGFzaWRlKG9wdGlvbnMpOwoKICAgICAgICAvLyBUcmlnZ2VyCiAgICAgICAgZWxlbWVudC5vbihhdHRyLnRyaWdnZXIgfHwgJ2NsaWNrJywgYXNpZGUudG9nZ2xlKTsKCiAgICAgICAgLy8gR2FyYmFnZSBjb2xsZWN0aW9uCiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKGFzaWRlKSBhc2lkZS5kZXN0cm95KCk7CiAgICAgICAgICBvcHRpb25zID0gbnVsbDsKICAgICAgICAgIGFzaWRlID0gbnVsbDsKICAgICAgICB9KTsKCiAgICAgIH0KICAgIH07CgogIH1dKTsKCi8vIFNvdXJjZTogYnV0dG9uLmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcC5idXR0b24nLCBbXSkKCiAgLnByb3ZpZGVyKCckYnV0dG9uJywgZnVuY3Rpb24oKSB7CgogICAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHsKICAgICAgYWN0aXZlQ2xhc3M6J2FjdGl2ZScsCiAgICAgIHRvZ2dsZUV2ZW50OidjbGljaycKICAgIH07CgogICAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB7ZGVmYXVsdHM6IGRlZmF1bHRzfTsKICAgIH07CgogIH0pCgogIC5kaXJlY3RpdmUoJ2JzQ2hlY2tib3hHcm91cCcsIGZ1bmN0aW9uKCkgewoKICAgIHJldHVybiB7CiAgICAgIHJlc3RyaWN0OiAnQScsCiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJywKICAgICAgY29tcGlsZTogZnVuY3Rpb24gcG9zdExpbmsoZWxlbWVudCwgYXR0cikgewogICAgICAgIGVsZW1lbnQuYXR0cignZGF0YS10b2dnbGUnLCAnYnV0dG9ucycpOwogICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cignbmctbW9kZWwnKTsKICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9ImNoZWNrYm94Il0nKTsKICAgICAgICBhbmd1bGFyLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7CiAgICAgICAgICB2YXIgY2hpbGRFbCA9IGFuZ3VsYXIuZWxlbWVudChjaGlsZCk7CiAgICAgICAgICBjaGlsZEVsLmF0dHIoJ2JzLWNoZWNrYm94JywgJycpOwogICAgICAgICAgY2hpbGRFbC5hdHRyKCduZy1tb2RlbCcsIGF0dHIubmdNb2RlbCArICcuJyArIGNoaWxkRWwuYXR0cigndmFsdWUnKSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICB9OwoKICB9KQoKICAuZGlyZWN0aXZlKCdic0NoZWNrYm94JywgWyIkYnV0dG9uIiwgIiQkckFGIiwgZnVuY3Rpb24oJGJ1dHRvbiwgJCRyQUYpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSAkYnV0dG9uLmRlZmF1bHRzOwogICAgdmFyIGNvbnN0YW50VmFsdWVSZWdFeHAgPSAvXih0cnVlfGZhbHNlfFxkKykkLzsKCiAgICByZXR1cm4gewogICAgICByZXN0cmljdDogJ0EnLAogICAgICByZXF1aXJlOiAnbmdNb2RlbCcsCiAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjb250cm9sbGVyKSB7CgogICAgICAgIHZhciBvcHRpb25zID0gZGVmYXVsdHM7CgogICAgICAgIC8vIFN1cHBvcnQgbGFiZWwgPiBpbnB1dFt0eXBlPSJjaGVja2JveCJdCiAgICAgICAgdmFyIGlzSW5wdXQgPSBlbGVtZW50WzBdLm5vZGVOYW1lID09PSAnSU5QVVQnOwogICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gaXNJbnB1dCA/IGVsZW1lbnQucGFyZW50KCkgOiBlbGVtZW50OwoKICAgICAgICB2YXIgdHJ1ZVZhbHVlID0gYW5ndWxhci5pc0RlZmluZWQoYXR0ci50cnVlVmFsdWUpID8gYXR0ci50cnVlVmFsdWUgOiB0cnVlOwogICAgICAgIGlmKGNvbnN0YW50VmFsdWVSZWdFeHAudGVzdChhdHRyLnRydWVWYWx1ZSkpIHsKICAgICAgICAgIHRydWVWYWx1ZSA9IHNjb3BlLiRldmFsKGF0dHIudHJ1ZVZhbHVlKTsKICAgICAgICB9CiAgICAgICAgdmFyIGZhbHNlVmFsdWUgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRyLmZhbHNlVmFsdWUpID8gYXR0ci5mYWxzZVZhbHVlIDogZmFsc2U7CiAgICAgICAgaWYoY29uc3RhbnRWYWx1ZVJlZ0V4cC50ZXN0KGF0dHIuZmFsc2VWYWx1ZSkpIHsKICAgICAgICAgIGZhbHNlVmFsdWUgPSBzY29wZS4kZXZhbChhdHRyLmZhbHNlVmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgLy8gUGFyc2UgZXhvdGljIHZhbHVlcwogICAgICAgIHZhciBoYXNFeG90aWNWYWx1ZXMgPSB0eXBlb2YgdHJ1ZVZhbHVlICE9PSAnYm9vbGVhbicgfHwgdHlwZW9mIGZhbHNlVmFsdWUgIT09ICdib29sZWFuJzsKICAgICAgICBpZihoYXNFeG90aWNWYWx1ZXMpIHsKICAgICAgICAgIGNvbnRyb2xsZXIuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2aWV3VmFsdWUpIHsKICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCckcGFyc2VyJywgZWxlbWVudC5hdHRyKCduZy1tb2RlbCcpLCAndmlld1ZhbHVlJywgdmlld1ZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIHZpZXdWYWx1ZSA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7CiAgICAgICAgICB9KTsKICAgICAgICAgIC8vIG1vZGVsVmFsdWUgLT4gJGZvcm1hdHRlcnMgLT4gdmlld1ZhbHVlCiAgICAgICAgICBjb250cm9sbGVyLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24obW9kZWxWYWx1ZSkgewogICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCckZm9ybWF0dGVyKCIlcyIpOiBtb2RlbFZhbHVlPSVvICglbyknLCBlbGVtZW50LmF0dHIoJ25nLW1vZGVsJyksIG1vZGVsVmFsdWUsIHR5cGVvZiBtb2RlbFZhbHVlKTsKICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmVxdWFscyhtb2RlbFZhbHVlLCB0cnVlVmFsdWUpOwogICAgICAgICAgfSk7CiAgICAgICAgICAvLyBGaXggcmVuZGVyaW5nIGZvciBleG90aWMgdmFsdWVzCiAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ01vZGVsLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgICAgY29udHJvbGxlci4kcmVuZGVyKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8vIG1vZGVsIC0+IHZpZXcKICAgICAgICBjb250cm9sbGVyLiRyZW5kZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJyRyZW5kZXInLCBlbGVtZW50LmF0dHIoJ25nLW1vZGVsJyksICdjb250cm9sbGVyLiRtb2RlbFZhbHVlJywgdHlwZW9mIGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUsIGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUsICdjb250cm9sbGVyLiR2aWV3VmFsdWUnLCB0eXBlb2YgY29udHJvbGxlci4kdmlld1ZhbHVlLCBjb250cm9sbGVyLiR2aWV3VmFsdWUpOwogICAgICAgICAgdmFyIGlzQWN0aXZlID0gYW5ndWxhci5lcXVhbHMoY29udHJvbGxlci4kbW9kZWxWYWx1ZSwgdHJ1ZVZhbHVlKTsKICAgICAgICAgICQkckFGKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZihpc0lucHV0KSBlbGVtZW50WzBdLmNoZWNrZWQgPSBpc0FjdGl2ZTsKICAgICAgICAgICAgYWN0aXZlRWxlbWVudC50b2dnbGVDbGFzcyhvcHRpb25zLmFjdGl2ZUNsYXNzLCBpc0FjdGl2ZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICAvLyB2aWV3IC0+IG1vZGVsCiAgICAgICAgZWxlbWVudC5iaW5kKG9wdGlvbnMudG9nZ2xlRXZlbnQsIGZ1bmN0aW9uKCkgewogICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCchY2xpY2snLCBlbGVtZW50LmF0dHIoJ25nLW1vZGVsJyksICdjb250cm9sbGVyLiR2aWV3VmFsdWUnLCB0eXBlb2YgY29udHJvbGxlci4kdmlld1ZhbHVlLCBjb250cm9sbGVyLiR2aWV3VmFsdWUsICdjb250cm9sbGVyLiRtb2RlbFZhbHVlJywgdHlwZW9mIGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUsIGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUpOwogICAgICAgICAgICBpZighaXNJbnB1dCkgewogICAgICAgICAgICAgIGNvbnRyb2xsZXIuJHNldFZpZXdWYWx1ZSghYWN0aXZlRWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCFoYXNFeG90aWNWYWx1ZXMpIHsKICAgICAgICAgICAgICBjb250cm9sbGVyLiRyZW5kZXIoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICB9CgogICAgfTsKCiAgfV0pCgogIC5kaXJlY3RpdmUoJ2JzUmFkaW9Hcm91cCcsIGZ1bmN0aW9uKCkgewoKICAgIHJldHVybiB7CiAgICAgIHJlc3RyaWN0OiAnQScsCiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJywKICAgICAgY29tcGlsZTogZnVuY3Rpb24gcG9zdExpbmsoZWxlbWVudCwgYXR0cikgewogICAgICAgIGVsZW1lbnQuYXR0cignZGF0YS10b2dnbGUnLCAnYnV0dG9ucycpOwogICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cignbmctbW9kZWwnKTsKICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9InJhZGlvIl0nKTsKICAgICAgICBhbmd1bGFyLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7CiAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoY2hpbGQpLmF0dHIoJ2JzLXJhZGlvJywgJycpOwogICAgICAgICAgYW5ndWxhci5lbGVtZW50KGNoaWxkKS5hdHRyKCduZy1tb2RlbCcsIGF0dHIubmdNb2RlbCk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICB9OwoKICB9KQoKICAuZGlyZWN0aXZlKCdic1JhZGlvJywgWyIkYnV0dG9uIiwgIiQkckFGIiwgZnVuY3Rpb24oJGJ1dHRvbiwgJCRyQUYpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSAkYnV0dG9uLmRlZmF1bHRzOwogICAgdmFyIGNvbnN0YW50VmFsdWVSZWdFeHAgPSAvXih0cnVlfGZhbHNlfFxkKykkLzsKCiAgICByZXR1cm4gewogICAgICByZXN0cmljdDogJ0EnLAogICAgICByZXF1aXJlOiAnbmdNb2RlbCcsCiAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjb250cm9sbGVyKSB7CgogICAgICAgIHZhciBvcHRpb25zID0gZGVmYXVsdHM7CgogICAgICAgIC8vIFN1cHBvcnQgYGxhYmVsID4gaW5wdXRbdHlwZT0icmFkaW8iXWAgbWFya3VwCiAgICAgICAgdmFyIGlzSW5wdXQgPSBlbGVtZW50WzBdLm5vZGVOYW1lID09PSAnSU5QVVQnOwogICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gaXNJbnB1dCA/IGVsZW1lbnQucGFyZW50KCkgOiBlbGVtZW50OwoKICAgICAgICB2YXIgdmFsdWUgPSBjb25zdGFudFZhbHVlUmVnRXhwLnRlc3QoYXR0ci52YWx1ZSkgPyBzY29wZS4kZXZhbChhdHRyLnZhbHVlKSA6IGF0dHIudmFsdWU7CgogICAgICAgIC8vIG1vZGVsIC0+IHZpZXcKICAgICAgICBjb250cm9sbGVyLiRyZW5kZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJyRyZW5kZXInLCBlbGVtZW50LmF0dHIoJ3ZhbHVlJyksICdjb250cm9sbGVyLiRtb2RlbFZhbHVlJywgdHlwZW9mIGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUsIGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUsICdjb250cm9sbGVyLiR2aWV3VmFsdWUnLCB0eXBlb2YgY29udHJvbGxlci4kdmlld1ZhbHVlLCBjb250cm9sbGVyLiR2aWV3VmFsdWUpOwogICAgICAgICAgdmFyIGlzQWN0aXZlID0gYW5ndWxhci5lcXVhbHMoY29udHJvbGxlci4kbW9kZWxWYWx1ZSwgdmFsdWUpOwogICAgICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmKGlzSW5wdXQpIGVsZW1lbnRbMF0uY2hlY2tlZCA9IGlzQWN0aXZlOwogICAgICAgICAgICBhY3RpdmVFbGVtZW50LnRvZ2dsZUNsYXNzKG9wdGlvbnMuYWN0aXZlQ2xhc3MsIGlzQWN0aXZlKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIC8vIHZpZXcgLT4gbW9kZWwKICAgICAgICBlbGVtZW50LmJpbmQob3B0aW9ucy50b2dnbGVFdmVudCwgZnVuY3Rpb24oKSB7CiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJyFjbGljaycsIGVsZW1lbnQuYXR0cigndmFsdWUnKSwgJ2NvbnRyb2xsZXIuJHZpZXdWYWx1ZScsIHR5cGVvZiBjb250cm9sbGVyLiR2aWV3VmFsdWUsIGNvbnRyb2xsZXIuJHZpZXdWYWx1ZSwgJ2NvbnRyb2xsZXIuJG1vZGVsVmFsdWUnLCB0eXBlb2YgY29udHJvbGxlci4kbW9kZWxWYWx1ZSwgY29udHJvbGxlci4kbW9kZWxWYWx1ZSk7CiAgICAgICAgICAgIGNvbnRyb2xsZXIuJHNldFZpZXdWYWx1ZSh2YWx1ZSk7CiAgICAgICAgICAgIGNvbnRyb2xsZXIuJHJlbmRlcigpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICB9CgogICAgfTsKCiAgfV0pOwoKLy8gU291cmNlOiBjb2xsYXBzZS5qcwphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAuY29sbGFwc2UnLCBbXSkKCiAgLnByb3ZpZGVyKCckY29sbGFwc2UnLCBmdW5jdGlvbigpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0gewogICAgICBhbmltYXRpb246ICdhbS1jb2xsYXBzZScsCiAgICAgIGRpc2FsbG93VG9nZ2xlOiBmYWxzZSwKICAgICAgYWN0aXZlQ2xhc3M6ICdpbicsCiAgICAgIHN0YXJ0Q29sbGFwc2VkOiBmYWxzZQogICAgfTsKCiAgICB2YXIgY29udHJvbGxlciA9IHRoaXMuY29udHJvbGxlciA9IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICAvLyBBdHRyaWJ1dGVzIG9wdGlvbnMKICAgICAgc2VsZi4kb3B0aW9ucyA9IGFuZ3VsYXIuY29weShkZWZhdWx0cyk7CiAgICAgIGFuZ3VsYXIuZm9yRWFjaChbJ2FuaW1hdGlvbicsICdkaXNhbGxvd1RvZ2dsZScsICdhY3RpdmVDbGFzcycsICdzdGFydENvbGxhcHNlZCddLCBmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgaWYoYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzW2tleV0pKSBzZWxmLiRvcHRpb25zW2tleV0gPSAkYXR0cnNba2V5XTsKICAgICAgfSk7CgogICAgICBzZWxmLiR0b2dnbGVzID0gW107CiAgICAgIHNlbGYuJHRhcmdldHMgPSBbXTsKCiAgICAgIHNlbGYuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgPSBbXTsKCiAgICAgIHNlbGYuJHJlZ2lzdGVyVG9nZ2xlID0gZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgIHNlbGYuJHRvZ2dsZXMucHVzaChlbGVtZW50KTsKICAgICAgfTsKICAgICAgc2VsZi4kcmVnaXN0ZXJUYXJnZXQgPSBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgc2VsZi4kdGFyZ2V0cy5wdXNoKGVsZW1lbnQpOwogICAgICB9OwoKICAgICAgc2VsZi4kdGFyZ2V0cy4kYWN0aXZlID0gIXNlbGYuJG9wdGlvbnMuc3RhcnRDb2xsYXBzZWQgPyAwIDogLTE7CiAgICAgIHNlbGYuJHNldEFjdGl2ZSA9ICRzY29wZS4kc2V0QWN0aXZlID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZighc2VsZi4kb3B0aW9ucy5kaXNhbGxvd1RvZ2dsZSkgewogICAgICAgICAgc2VsZi4kdGFyZ2V0cy4kYWN0aXZlID0gc2VsZi4kdGFyZ2V0cy4kYWN0aXZlID09PSB2YWx1ZSA/IC0xIDogdmFsdWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNlbGYuJHRhcmdldHMuJGFjdGl2ZSA9IHZhbHVlOwogICAgICAgIH0KICAgICAgICBzZWxmLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24oZm4pIHsKICAgICAgICAgIGZuKCk7CiAgICAgICAgfSk7CiAgICAgIH07CgogICAgfTsKCiAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyICRjb2xsYXBzZSA9IHt9OwogICAgICAkY29sbGFwc2UuZGVmYXVsdHMgPSBkZWZhdWx0czsKICAgICAgJGNvbGxhcHNlLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyOwogICAgICByZXR1cm4gJGNvbGxhcHNlOwogICAgfTsKCiAgfSkKCiAgLmRpcmVjdGl2ZSgnYnNDb2xsYXBzZScsIFsiJHdpbmRvdyIsICIkYW5pbWF0ZSIsICIkY29sbGFwc2UiLCBmdW5jdGlvbigkd2luZG93LCAkYW5pbWF0ZSwgJGNvbGxhcHNlKSB7CgogICAgdmFyIGRlZmF1bHRzID0gJGNvbGxhcHNlLmRlZmF1bHRzOwoKICAgIHJldHVybiB7CiAgICAgIHJlcXVpcmU6IFsnP25nTW9kZWwnLCAnYnNDb2xsYXBzZSddLAogICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsICckYXR0cnMnLCAkY29sbGFwc2UuY29udHJvbGxlcl0sCiAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMpIHsKCiAgICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY29udHJvbGxlcnNbMF07CiAgICAgICAgdmFyIGJzQ29sbGFwc2VDdHJsID0gY29udHJvbGxlcnNbMV07CgogICAgICAgIGlmKG5nTW9kZWxDdHJsKSB7CgogICAgICAgICAgLy8gVXBkYXRlIHRoZSBtb2RlbFZhbHVlIGZvbGxvd2luZwogICAgICAgICAgYnNDb2xsYXBzZUN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShic0NvbGxhcHNlQ3RybC4kdGFyZ2V0cy4kYWN0aXZlKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIC8vIG1vZGVsVmFsdWUgLT4gJGZvcm1hdHRlcnMgLT4gdmlld1ZhbHVlCiAgICAgICAgICBuZ01vZGVsQ3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKG1vZGVsVmFsdWUpIHsKICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCckZm9ybWF0dGVyKCIlcyIpOiBtb2RlbFZhbHVlPSVvICglbyknLCBlbGVtZW50LmF0dHIoJ25nLW1vZGVsJyksIG1vZGVsVmFsdWUsIHR5cGVvZiBtb2RlbFZhbHVlKTsKICAgICAgICAgICAgaWYgKGJzQ29sbGFwc2VDdHJsLiR0YXJnZXRzLiRhY3RpdmUgIT09IG1vZGVsVmFsdWUgKiAxKSB7CiAgICAgICAgICAgICAgYnNDb2xsYXBzZUN0cmwuJHNldEFjdGl2ZShtb2RlbFZhbHVlICogMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG1vZGVsVmFsdWU7CiAgICAgICAgICB9KTsKCiAgICAgICAgfQoKICAgICAgfQogICAgfTsKCiAgfV0pCgogIC5kaXJlY3RpdmUoJ2JzQ29sbGFwc2VUb2dnbGUnLCBmdW5jdGlvbigpIHsKCiAgICByZXR1cm4gewogICAgICByZXF1aXJlOiBbJ14/bmdNb2RlbCcsICdeYnNDb2xsYXBzZSddLAogICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzKSB7CgogICAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGNvbnRyb2xsZXJzWzBdOwogICAgICAgIHZhciBic0NvbGxhcHNlQ3RybCA9IGNvbnRyb2xsZXJzWzFdOwoKICAgICAgICAvLyBBZGQgYmFzZSBhdHRyCiAgICAgICAgZWxlbWVudC5hdHRyKCdkYXRhLXRvZ2dsZScsICdjb2xsYXBzZScpOwoKICAgICAgICAvLyBQdXNoIHBhbmUgdG8gcGFyZW50IGJzQ29sbGFwc2UgY29udHJvbGxlcgogICAgICAgIGJzQ29sbGFwc2VDdHJsLiRyZWdpc3RlclRvZ2dsZShlbGVtZW50KTsKICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGluZGV4ID0gYXR0cnMuYnNDb2xsYXBzZVRvZ2dsZSB8fCBic0NvbGxhcHNlQ3RybC4kdG9nZ2xlcy5pbmRleE9mKGVsZW1lbnQpOwogICAgICAgICAgYnNDb2xsYXBzZUN0cmwuJHNldEFjdGl2ZShpbmRleCAqIDEpOwogICAgICAgICAgc2NvcGUuJGFwcGx5KCk7CiAgICAgICAgfSk7CgogICAgICB9CiAgICB9OwoKICB9KQoKICAuZGlyZWN0aXZlKCdic0NvbGxhcHNlVGFyZ2V0JywgWyIkYW5pbWF0ZSIsIGZ1bmN0aW9uKCRhbmltYXRlKSB7CgogICAgcmV0dXJuIHsKICAgICAgcmVxdWlyZTogWydeP25nTW9kZWwnLCAnXmJzQ29sbGFwc2UnXSwKICAgICAgLy8gc2NvcGU6IHRydWUsCiAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMpIHsKCiAgICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY29udHJvbGxlcnNbMF07CiAgICAgICAgdmFyIGJzQ29sbGFwc2VDdHJsID0gY29udHJvbGxlcnNbMV07CgogICAgICAgIC8vIEFkZCBiYXNlIGNsYXNzCiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnY29sbGFwc2UnKTsKCiAgICAgICAgLy8gQWRkIGFuaW1hdGlvbiBjbGFzcwogICAgICAgIGlmKGJzQ29sbGFwc2VDdHJsLiRvcHRpb25zLmFuaW1hdGlvbikgewogICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhic0NvbGxhcHNlQ3RybC4kb3B0aW9ucy5hbmltYXRpb24pOwogICAgICAgIH0KCiAgICAgICAgLy8gUHVzaCBwYW5lIHRvIHBhcmVudCBic0NvbGxhcHNlIGNvbnRyb2xsZXIKICAgICAgICBic0NvbGxhcHNlQ3RybC4kcmVnaXN0ZXJUYXJnZXQoZWxlbWVudCk7CgogICAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgICAgIHZhciBpbmRleCA9IGJzQ29sbGFwc2VDdHJsLiR0YXJnZXRzLmluZGV4T2YoZWxlbWVudCk7CiAgICAgICAgICB2YXIgYWN0aXZlID0gYnNDb2xsYXBzZUN0cmwuJHRhcmdldHMuJGFjdGl2ZTsKICAgICAgICAgICRhbmltYXRlW2luZGV4ID09PSBhY3RpdmUgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oZWxlbWVudCwgYnNDb2xsYXBzZUN0cmwuJG9wdGlvbnMuYWN0aXZlQ2xhc3MpOwogICAgICAgIH0KCiAgICAgICAgYnNDb2xsYXBzZUN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbigpIHsKICAgICAgICAgIHJlbmRlcigpOwogICAgICAgIH0pOwogICAgICAgIHJlbmRlcigpOwoKICAgICAgfQogICAgfTsKCiAgfV0pOwoKLy8gU291cmNlOiBkYXRlcGlja2VyLmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcC5kYXRlcGlja2VyJywgWydtZ2NyZWEubmdTdHJhcC5oZWxwZXJzLmRhdGVQYXJzZXInLCAnbWdjcmVhLm5nU3RyYXAudG9vbHRpcCddKQoKICAucHJvdmlkZXIoJyRkYXRlcGlja2VyJywgZnVuY3Rpb24oKSB7CgogICAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHsKICAgICAgYW5pbWF0aW9uOiAnYW0tZmFkZScsCiAgICAgIHByZWZpeENsYXNzOiAnZGF0ZXBpY2tlcicsCiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbS1sZWZ0JywKICAgICAgdGVtcGxhdGU6ICdkYXRlcGlja2VyL2RhdGVwaWNrZXIudHBsLmh0bWwnLAogICAgICB0cmlnZ2VyOiAnZm9jdXMnLAogICAgICBjb250YWluZXI6IGZhbHNlLAogICAgICBrZXlib2FyZDogdHJ1ZSwKICAgICAgaHRtbDogZmFsc2UsCiAgICAgIGRlbGF5OiAwLAogICAgICAvLyBsYW5nOiAkbG9jYWxlLmlkLAogICAgICB1c2VOYXRpdmU6IGZhbHNlLAogICAgICBkYXRlVHlwZTogJ2RhdGUnLAogICAgICBkYXRlRm9ybWF0OiAnc2hvcnREYXRlJywKICAgICAgbW9kZWxEYXRlRm9ybWF0OiBudWxsLAogICAgICBkYXlGb3JtYXQ6ICdkZCcsCiAgICAgIHN0cmljdEZvcm1hdDogZmFsc2UsCiAgICAgIGF1dG9jbG9zZTogZmFsc2UsCiAgICAgIG1pbkRhdGU6IC1JbmZpbml0eSwKICAgICAgbWF4RGF0ZTogK0luZmluaXR5LAogICAgICBzdGFydFZpZXc6IDAsCiAgICAgIG1pblZpZXc6IDAsCiAgICAgIHN0YXJ0V2VlazogMCwKICAgICAgZGF5c09mV2Vla0Rpc2FibGVkOiAnJywKICAgICAgaWNvbkxlZnQ6ICdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdCcsCiAgICAgIGljb25SaWdodDogJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodCcKICAgIH07CgogICAgdGhpcy4kZ2V0ID0gWyIkd2luZG93IiwgIiRkb2N1bWVudCIsICIkcm9vdFNjb3BlIiwgIiRzY2UiLCAiJGxvY2FsZSIsICJkYXRlRmlsdGVyIiwgImRhdGVwaWNrZXJWaWV3cyIsICIkdG9vbHRpcCIsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCwgJHJvb3RTY29wZSwgJHNjZSwgJGxvY2FsZSwgZGF0ZUZpbHRlciwgZGF0ZXBpY2tlclZpZXdzLCAkdG9vbHRpcCkgewoKICAgICAgdmFyIGJvZHlFbCA9IGFuZ3VsYXIuZWxlbWVudCgkd2luZG93LmRvY3VtZW50LmJvZHkpOwogICAgICB2YXIgaXNOYXRpdmUgPSAvKGlwKGF8bylkfGlwaG9uZXxhbmRyb2lkKS9pZy50ZXN0KCR3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgIHZhciBpc1RvdWNoID0gKCdjcmVhdGVUb3VjaCcgaW4gJHdpbmRvdy5kb2N1bWVudCkgJiYgaXNOYXRpdmU7CiAgICAgIGlmKCFkZWZhdWx0cy5sYW5nKSBkZWZhdWx0cy5sYW5nID0gJGxvY2FsZS5pZDsKCiAgICAgIGZ1bmN0aW9uIERhdGVwaWNrZXJGYWN0b3J5KGVsZW1lbnQsIGNvbnRyb2xsZXIsIGNvbmZpZykgewoKICAgICAgICB2YXIgJGRhdGVwaWNrZXIgPSAkdG9vbHRpcChlbGVtZW50LCBhbmd1bGFyLmV4dGVuZCh7fSwgZGVmYXVsdHMsIGNvbmZpZykpOwogICAgICAgIHZhciBwYXJlbnRTY29wZSA9IGNvbmZpZy5zY29wZTsKICAgICAgICB2YXIgb3B0aW9ucyA9ICRkYXRlcGlja2VyLiRvcHRpb25zOwogICAgICAgIHZhciBzY29wZSA9ICRkYXRlcGlja2VyLiRzY29wZTsKICAgICAgICBpZihvcHRpb25zLnN0YXJ0Vmlldykgb3B0aW9ucy5zdGFydFZpZXcgLT0gb3B0aW9ucy5taW5WaWV3OwoKICAgICAgICAvLyBWaWV3IHZhcnMKCiAgICAgICAgdmFyIHBpY2tlclZpZXdzID0gZGF0ZXBpY2tlclZpZXdzKCRkYXRlcGlja2VyKTsKICAgICAgICAkZGF0ZXBpY2tlci4kdmlld3MgPSBwaWNrZXJWaWV3cy52aWV3czsKICAgICAgICB2YXIgdmlld0RhdGUgPSBwaWNrZXJWaWV3cy52aWV3RGF0ZTsKICAgICAgICBzY29wZS4kbW9kZSA9IG9wdGlvbnMuc3RhcnRWaWV3OwogICAgICAgIHNjb3BlLiRpY29uTGVmdCA9IG9wdGlvbnMuaWNvbkxlZnQ7CiAgICAgICAgc2NvcGUuJGljb25SaWdodCA9IG9wdGlvbnMuaWNvblJpZ2h0OwogICAgICAgIHZhciAkcGlja2VyID0gJGRhdGVwaWNrZXIuJHZpZXdzW3Njb3BlLiRtb2RlXTsKCiAgICAgICAgLy8gU2NvcGUgbWV0aG9kcwoKICAgICAgICBzY29wZS4kc2VsZWN0ID0gZnVuY3Rpb24oZGF0ZSkgewogICAgICAgICAgJGRhdGVwaWNrZXIuc2VsZWN0KGRhdGUpOwogICAgICAgIH07CiAgICAgICAgc2NvcGUuJHNlbGVjdFBhbmUgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgJGRhdGVwaWNrZXIuJHNlbGVjdFBhbmUodmFsdWUpOwogICAgICAgIH07CiAgICAgICAgc2NvcGUuJHRvZ2dsZU1vZGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICRkYXRlcGlja2VyLnNldE1vZGUoKHNjb3BlLiRtb2RlICsgMSkgJSAkZGF0ZXBpY2tlci4kdmlld3MubGVuZ3RoKTsKICAgICAgICB9OwoKICAgICAgICAvLyBQdWJsaWMgbWV0aG9kcwoKICAgICAgICAkZGF0ZXBpY2tlci51cGRhdGUgPSBmdW5jdGlvbihkYXRlKSB7CiAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJyRkYXRlcGlja2VyLnVwZGF0ZSgpIG5ld1ZhbHVlPSVvJywgZGF0ZSk7CiAgICAgICAgICBpZihhbmd1bGFyLmlzRGF0ZShkYXRlKSAmJiAhaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7CiAgICAgICAgICAgICRkYXRlcGlja2VyLiRkYXRlID0gZGF0ZTsKICAgICAgICAgICAgJHBpY2tlci51cGRhdGUuY2FsbCgkcGlja2VyLCBkYXRlKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vIEJ1aWxkIG9ubHkgaWYgcHJpc3RpbmUKICAgICAgICAgICRkYXRlcGlja2VyLiRidWlsZCh0cnVlKTsKICAgICAgICB9OwoKICAgICAgICAkZGF0ZXBpY2tlci51cGRhdGVEaXNhYmxlZERhdGVzID0gZnVuY3Rpb24oZGF0ZVJhbmdlcykgewogICAgICAgICAgb3B0aW9ucy5kaXNhYmxlZERhdGVSYW5nZXMgPSBkYXRlUmFuZ2VzOwogICAgICAgICAgZm9yKHZhciBpID0gMCwgbCA9IHNjb3BlLnJvd3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzY29wZS5yb3dzW2ldLCAkZGF0ZXBpY2tlci4kc2V0RGlzYWJsZWRFbCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgJGRhdGVwaWNrZXIuc2VsZWN0ID0gZnVuY3Rpb24oZGF0ZSwga2VlcCkgewogICAgICAgICAgLy8gY29uc29sZS53YXJuKCckZGF0ZXBpY2tlci5zZWxlY3QnLCBkYXRlLCBzY29wZS4kbW9kZSk7CiAgICAgICAgICBpZighYW5ndWxhci5pc0RhdGUoY29udHJvbGxlci4kZGF0ZVZhbHVlKSkgY29udHJvbGxlci4kZGF0ZVZhbHVlID0gbmV3IERhdGUoZGF0ZSk7CiAgICAgICAgICBpZighc2NvcGUuJG1vZGUgfHwga2VlcCkgewogICAgICAgICAgICBjb250cm9sbGVyLiRzZXRWaWV3VmFsdWUoYW5ndWxhci5jb3B5KGRhdGUpKTsKICAgICAgICAgICAgY29udHJvbGxlci4kcmVuZGVyKCk7CiAgICAgICAgICAgIGlmKG9wdGlvbnMuYXV0b2Nsb3NlICYmICFrZWVwKSB7CiAgICAgICAgICAgICAgJGRhdGVwaWNrZXIuaGlkZSh0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodmlld0RhdGUsIHt5ZWFyOiBkYXRlLmdldEZ1bGxZZWFyKCksIG1vbnRoOiBkYXRlLmdldE1vbnRoKCksIGRhdGU6IGRhdGUuZ2V0RGF0ZSgpfSk7CiAgICAgICAgICAgICRkYXRlcGlja2VyLnNldE1vZGUoc2NvcGUuJG1vZGUgLSAxKTsKICAgICAgICAgICAgJGRhdGVwaWNrZXIuJGJ1aWxkKCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgJGRhdGVwaWNrZXIuc2V0TW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHsKICAgICAgICAgIC8vIGNvbnNvbGUud2FybignJGRhdGVwaWNrZXIuc2V0TW9kZScsIG1vZGUpOwogICAgICAgICAgc2NvcGUuJG1vZGUgPSBtb2RlOwogICAgICAgICAgJHBpY2tlciA9ICRkYXRlcGlja2VyLiR2aWV3c1tzY29wZS4kbW9kZV07CiAgICAgICAgICAkZGF0ZXBpY2tlci4kYnVpbGQoKTsKICAgICAgICB9OwoKICAgICAgICAvLyBQcm90ZWN0ZWQgbWV0aG9kcwoKICAgICAgICAkZGF0ZXBpY2tlci4kYnVpbGQgPSBmdW5jdGlvbihwcmlzdGluZSkgewogICAgICAgICAgLy8gY29uc29sZS53YXJuKCckZGF0ZXBpY2tlci4kYnVpbGQoKSB2aWV3RGF0ZT0lbycsIHZpZXdEYXRlKTsKICAgICAgICAgIGlmKHByaXN0aW5lID09PSB0cnVlICYmICRwaWNrZXIuYnVpbHQpIHJldHVybjsKICAgICAgICAgIGlmKHByaXN0aW5lID09PSBmYWxzZSAmJiAhJHBpY2tlci5idWlsdCkgcmV0dXJuOwogICAgICAgICAgJHBpY2tlci5idWlsZC5jYWxsKCRwaWNrZXIpOwogICAgICAgIH07CgogICAgICAgICRkYXRlcGlja2VyLiR1cGRhdGVTZWxlY3RlZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgZm9yKHZhciBpID0gMCwgbCA9IHNjb3BlLnJvd3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzY29wZS5yb3dzW2ldLCB1cGRhdGVTZWxlY3RlZCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgJGRhdGVwaWNrZXIuJGlzU2VsZWN0ZWQgPSBmdW5jdGlvbihkYXRlKSB7CiAgICAgICAgICByZXR1cm4gJHBpY2tlci5pc1NlbGVjdGVkKGRhdGUpOwogICAgICAgIH07CgogICAgICAgICRkYXRlcGlja2VyLiRzZXREaXNhYmxlZEVsID0gZnVuY3Rpb24oZWwpIHsKICAgICAgICAgIGVsLmRpc2FibGVkID0gJHBpY2tlci5pc0Rpc2FibGVkKGVsLmRhdGUpOwogICAgICAgIH07CgogICAgICAgICRkYXRlcGlja2VyLiRzZWxlY3RQYW5lID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgIHZhciBzdGVwcyA9ICRwaWNrZXIuc3RlcHM7CiAgICAgICAgICB2YXIgdGFyZ2V0RGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKHZpZXdEYXRlLnllYXIgKyAoKHN0ZXBzLnllYXIgfHwgMCkgKiB2YWx1ZSksIHZpZXdEYXRlLm1vbnRoICsgKChzdGVwcy5tb250aCB8fCAwKSAqIHZhbHVlKSwgdmlld0RhdGUuZGF0ZSArICgoc3RlcHMuZGF5IHx8IDApICogdmFsdWUpKSk7CiAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh2aWV3RGF0ZSwge3llYXI6IHRhcmdldERhdGUuZ2V0VVRDRnVsbFllYXIoKSwgbW9udGg6IHRhcmdldERhdGUuZ2V0VVRDTW9udGgoKSwgZGF0ZTogdGFyZ2V0RGF0ZS5nZXRVVENEYXRlKCl9KTsKICAgICAgICAgICRkYXRlcGlja2VyLiRidWlsZCgpOwogICAgICAgIH07CgogICAgICAgICRkYXRlcGlja2VyLiRvbk1vdXNlRG93biA9IGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgLy8gUHJldmVudCBibHVyIG9uIG1vdXNlZG93biBvbiAuZHJvcGRvd24tbWVudQogICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAvLyBFbXVsYXRlIGNsaWNrIGZvciBtb2JpbGUgZGV2aWNlcwogICAgICAgICAgaWYoaXNUb3VjaCkgewogICAgICAgICAgICB2YXIgdGFyZ2V0RWwgPSBhbmd1bGFyLmVsZW1lbnQoZXZ0LnRhcmdldCk7CiAgICAgICAgICAgIGlmKHRhcmdldEVsWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdidXR0b24nKSB7CiAgICAgICAgICAgICAgdGFyZ2V0RWwgPSB0YXJnZXRFbC5wYXJlbnQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0YXJnZXRFbC50cmlnZ2VySGFuZGxlcignY2xpY2snKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkZGF0ZXBpY2tlci4kb25LZXlEb3duID0gZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICBpZiAoIS8oMzh8Mzd8Mzl8NDB8MTMpLy50ZXN0KGV2dC5rZXlDb2RlKSB8fCBldnQuc2hpZnRLZXkgfHwgZXZ0LmFsdEtleSkgcmV0dXJuOwogICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CgogICAgICAgICAgaWYoZXZ0LmtleUNvZGUgPT09IDEzKSB7CiAgICAgICAgICAgIGlmKCFzY29wZS4kbW9kZSkgewogICAgICAgICAgICAgIHJldHVybiAkZGF0ZXBpY2tlci5oaWRlKHRydWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7ICRkYXRlcGlja2VyLnNldE1vZGUoc2NvcGUuJG1vZGUgLSAxKTsgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBOYXZpZ2F0ZSB3aXRoIGtleWJvYXJkCiAgICAgICAgICAkcGlja2VyLm9uS2V5RG93bihldnQpOwogICAgICAgICAgcGFyZW50U2NvcGUuJGRpZ2VzdCgpOwogICAgICAgIH07CgogICAgICAgIC8vIFByaXZhdGUKCiAgICAgICAgZnVuY3Rpb24gdXBkYXRlU2VsZWN0ZWQoZWwpIHsKICAgICAgICAgIGVsLnNlbGVjdGVkID0gJGRhdGVwaWNrZXIuJGlzU2VsZWN0ZWQoZWwuZGF0ZSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBmb2N1c0VsZW1lbnQoKSB7CiAgICAgICAgICBlbGVtZW50WzBdLmZvY3VzKCk7CiAgICAgICAgfQoKICAgICAgICAvLyBPdmVycmlkZXMKCiAgICAgICAgdmFyIF9pbml0ID0gJGRhdGVwaWNrZXIuaW5pdDsKICAgICAgICAkZGF0ZXBpY2tlci5pbml0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZihpc05hdGl2ZSAmJiBvcHRpb25zLnVzZU5hdGl2ZSkgewogICAgICAgICAgICBlbGVtZW50LnByb3AoJ3R5cGUnLCAnZGF0ZScpOwogICAgICAgICAgICBlbGVtZW50LmNzcygnLXdlYmtpdC1hcHBlYXJhbmNlJywgJ3RleHRmaWVsZCcpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9IGVsc2UgaWYoaXNUb3VjaCkgewogICAgICAgICAgICBlbGVtZW50LnByb3AoJ3R5cGUnLCAndGV4dCcpOwogICAgICAgICAgICBlbGVtZW50LmF0dHIoJ3JlYWRvbmx5JywgJ3RydWUnKTsKICAgICAgICAgICAgZWxlbWVudC5vbignY2xpY2snLCBmb2N1c0VsZW1lbnQpOwogICAgICAgICAgfQogICAgICAgICAgX2luaXQoKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgX2Rlc3Ryb3kgPSAkZGF0ZXBpY2tlci5kZXN0cm95OwogICAgICAgICRkYXRlcGlja2VyLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmKGlzTmF0aXZlICYmIG9wdGlvbnMudXNlTmF0aXZlKSB7CiAgICAgICAgICAgIGVsZW1lbnQub2ZmKCdjbGljaycsIGZvY3VzRWxlbWVudCk7CiAgICAgICAgICB9CiAgICAgICAgICBfZGVzdHJveSgpOwogICAgICAgIH07CgogICAgICAgIHZhciBfc2hvdyA9ICRkYXRlcGlja2VyLnNob3c7CiAgICAgICAgJGRhdGVwaWNrZXIuc2hvdyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgX3Nob3coKTsKICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICRkYXRlcGlja2VyLiRlbGVtZW50Lm9uKGlzVG91Y2ggPyAndG91Y2hzdGFydCcgOiAnbW91c2Vkb3duJywgJGRhdGVwaWNrZXIuJG9uTW91c2VEb3duKTsKICAgICAgICAgICAgaWYob3B0aW9ucy5rZXlib2FyZCkgewogICAgICAgICAgICAgIGVsZW1lbnQub24oJ2tleWRvd24nLCAkZGF0ZXBpY2tlci4kb25LZXlEb3duKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIF9oaWRlID0gJGRhdGVwaWNrZXIuaGlkZTsKICAgICAgICAkZGF0ZXBpY2tlci5oaWRlID0gZnVuY3Rpb24oYmx1cikgewogICAgICAgICAgaWYoISRkYXRlcGlja2VyLiRpc1Nob3duKSByZXR1cm47CiAgICAgICAgICAkZGF0ZXBpY2tlci4kZWxlbWVudC5vZmYoaXNUb3VjaCA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLCAkZGF0ZXBpY2tlci4kb25Nb3VzZURvd24pOwogICAgICAgICAgaWYob3B0aW9ucy5rZXlib2FyZCkgewogICAgICAgICAgICBlbGVtZW50Lm9mZigna2V5ZG93bicsICRkYXRlcGlja2VyLiRvbktleURvd24pOwogICAgICAgICAgfQogICAgICAgICAgX2hpZGUoYmx1cik7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuICRkYXRlcGlja2VyOwoKICAgICAgfQoKICAgICAgRGF0ZXBpY2tlckZhY3RvcnkuZGVmYXVsdHMgPSBkZWZhdWx0czsKICAgICAgcmV0dXJuIERhdGVwaWNrZXJGYWN0b3J5OwoKICAgIH1dOwoKICB9KQoKICAuZGlyZWN0aXZlKCdic0RhdGVwaWNrZXInLCBbIiR3aW5kb3ciLCAiJHBhcnNlIiwgIiRxIiwgIiRsb2NhbGUiLCAiZGF0ZUZpbHRlciIsICIkZGF0ZXBpY2tlciIsICIkZGF0ZVBhcnNlciIsICIkdGltZW91dCIsIGZ1bmN0aW9uKCR3aW5kb3csICRwYXJzZSwgJHEsICRsb2NhbGUsIGRhdGVGaWx0ZXIsICRkYXRlcGlja2VyLCAkZGF0ZVBhcnNlciwgJHRpbWVvdXQpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSAkZGF0ZXBpY2tlci5kZWZhdWx0czsKICAgIHZhciBpc05hdGl2ZSA9IC8oaXAoYXxvKWR8aXBob25lfGFuZHJvaWQpL2lnLnRlc3QoJHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTsKCiAgICByZXR1cm4gewogICAgICByZXN0cmljdDogJ0VBQycsCiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJywKICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGNvbnRyb2xsZXIpIHsKCiAgICAgICAgLy8gRGlyZWN0aXZlIG9wdGlvbnMKICAgICAgICB2YXIgb3B0aW9ucyA9IHtzY29wZTogc2NvcGUsIGNvbnRyb2xsZXI6IGNvbnRyb2xsZXJ9OwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChbJ3BsYWNlbWVudCcsICdjb250YWluZXInLCAnZGVsYXknLCAndHJpZ2dlcicsICdrZXlib2FyZCcsICdodG1sJywgJ2FuaW1hdGlvbicsICd0ZW1wbGF0ZScsICdhdXRvY2xvc2UnLCAnZGF0ZVR5cGUnLCAnZGF0ZUZvcm1hdCcsICdtb2RlbERhdGVGb3JtYXQnLCAnZGF5Rm9ybWF0JywgJ3N0cmljdEZvcm1hdCcsICdzdGFydFdlZWsnLCAnc3RhcnREYXRlJywgJ3VzZU5hdGl2ZScsICdsYW5nJywgJ3N0YXJ0VmlldycsICdtaW5WaWV3JywgJ2ljb25MZWZ0JywgJ2ljb25SaWdodCcsICdkYXlzT2ZXZWVrRGlzYWJsZWQnXSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICBpZihhbmd1bGFyLmlzRGVmaW5lZChhdHRyW2tleV0pKSBvcHRpb25zW2tleV0gPSBhdHRyW2tleV07CiAgICAgICAgfSk7CgogICAgICAgIC8vIFZpc2liaWxpdHkgYmluZGluZyBzdXBwb3J0CiAgICAgICAgYXR0ci5ic1Nob3cgJiYgc2NvcGUuJHdhdGNoKGF0dHIuYnNTaG93LCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgIGlmKCFkYXRlcGlja2VyIHx8ICFhbmd1bGFyLmlzRGVmaW5lZChuZXdWYWx1ZSkpIHJldHVybjsKICAgICAgICAgIGlmKGFuZ3VsYXIuaXNTdHJpbmcobmV3VmFsdWUpKSBuZXdWYWx1ZSA9ICEhbmV3VmFsdWUubWF0Y2goL3RydWV8LD8oZGF0ZXBpY2tlciksPy9pKTsKICAgICAgICAgIG5ld1ZhbHVlID09PSB0cnVlID8gZGF0ZXBpY2tlci5zaG93KCkgOiBkYXRlcGlja2VyLmhpZGUoKTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBkYXRlcGlja2VyCiAgICAgICAgdmFyIGRhdGVwaWNrZXIgPSAkZGF0ZXBpY2tlcihlbGVtZW50LCBjb250cm9sbGVyLCBvcHRpb25zKTsKICAgICAgICBvcHRpb25zID0gZGF0ZXBpY2tlci4kb3B0aW9uczsKICAgICAgICAvLyBTZXQgZXhwZWN0ZWQgaU9TIGZvcm1hdAogICAgICAgIGlmKGlzTmF0aXZlICYmIG9wdGlvbnMudXNlTmF0aXZlKSBvcHRpb25zLmRhdGVGb3JtYXQgPSAneXl5eS1NTS1kZCc7CgogICAgICAgIC8vIEluaXRpYWxpemUgcGFyc2VyCiAgICAgICAgdmFyIGRhdGVQYXJzZXIgPSAkZGF0ZVBhcnNlcih7Zm9ybWF0OiBvcHRpb25zLmRhdGVGb3JtYXQsIGxhbmc6IG9wdGlvbnMubGFuZywgc3RyaWN0OiBvcHRpb25zLnN0cmljdEZvcm1hdH0pOwoKICAgICAgICAvLyBPYnNlcnZlIGF0dHJpYnV0ZXMgZm9yIGNoYW5nZXMKICAgICAgICBhbmd1bGFyLmZvckVhY2goWydtaW5EYXRlJywgJ21heERhdGUnXSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ2F0dHIuJG9ic2VydmUoJXMpJywga2V5LCBhdHRyW2tleV0pOwogICAgICAgICAgYW5ndWxhci5pc0RlZmluZWQoYXR0cltrZXldKSAmJiBhdHRyLiRvYnNlcnZlKGtleSwgZnVuY3Rpb24obmV3VmFsdWUpIHsKICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCdhdHRyLiRvYnNlcnZlKCVzKT0lbycsIGtleSwgbmV3VmFsdWUpOwogICAgICAgICAgICBkYXRlcGlja2VyLiRvcHRpb25zW2tleV0gPSBkYXRlUGFyc2VyLmdldERhdGVGb3JBdHRyaWJ1dGUoa2V5LCBuZXdWYWx1ZSk7CiAgICAgICAgICAgIC8vIEJ1aWxkIG9ubHkgaWYgZGlydHkKICAgICAgICAgICAgIWlzTmFOKGRhdGVwaWNrZXIuJG9wdGlvbnNba2V5XSkgJiYgZGF0ZXBpY2tlci4kYnVpbGQoZmFsc2UpOwogICAgICAgICAgICB2YWxpZGF0ZUFnYWluc3RNaW5NYXhEYXRlKGNvbnRyb2xsZXIuJGRhdGVWYWx1ZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gV2F0Y2ggbW9kZWwgZm9yIGNoYW5nZXMKICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ01vZGVsLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgIGRhdGVwaWNrZXIudXBkYXRlKGNvbnRyb2xsZXIuJGRhdGVWYWx1ZSk7CiAgICAgICAgfSwgdHJ1ZSk7CgogICAgICAgIC8vIE5vcm1hbGl6ZSB1bmRlZmluZWQvbnVsbC9lbXB0eSBhcnJheSwKICAgICAgICAvLyBzbyB0aGF0IHdlIGRvbid0IHRyZWF0IGNoYW5naW5nIGZyb20gdW5kZWZpbmVkLT5udWxsIGFzIGEgY2hhbmdlLgogICAgICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZURhdGVSYW5nZXMocmFuZ2VzKSB7CiAgICAgICAgICBpZiAoIXJhbmdlcyB8fCAhcmFuZ2VzLmxlbmd0aCkgcmV0dXJuIG51bGw7CiAgICAgICAgICByZXR1cm4gcmFuZ2VzOwogICAgICAgIH0KCiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHIuZGlzYWJsZWREYXRlcykpIHsKICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLmRpc2FibGVkRGF0ZXMsIGZ1bmN0aW9uKGRpc2FibGVkUmFuZ2VzLCBwcmV2aW91c1ZhbHVlKSB7CiAgICAgICAgICAgIGRpc2FibGVkUmFuZ2VzID0gbm9ybWFsaXplRGF0ZVJhbmdlcyhkaXNhYmxlZFJhbmdlcyk7CiAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBub3JtYWxpemVEYXRlUmFuZ2VzKHByZXZpb3VzVmFsdWUpOwoKICAgICAgICAgICAgaWYgKGRpc2FibGVkUmFuZ2VzKSB7CiAgICAgICAgICAgICAgZGF0ZXBpY2tlci51cGRhdGVEaXNhYmxlZERhdGVzKGRpc2FibGVkUmFuZ2VzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZUFnYWluc3RNaW5NYXhEYXRlKHBhcnNlZERhdGUpIHsKICAgICAgICAgIGlmICghYW5ndWxhci5pc0RhdGUocGFyc2VkRGF0ZSkpIHJldHVybjsKICAgICAgICAgIHZhciBpc01pblZhbGlkID0gaXNOYU4oZGF0ZXBpY2tlci4kb3B0aW9ucy5taW5EYXRlKSB8fCBwYXJzZWREYXRlLmdldFRpbWUoKSA+PSBkYXRlcGlja2VyLiRvcHRpb25zLm1pbkRhdGU7CiAgICAgICAgICB2YXIgaXNNYXhWYWxpZCA9IGlzTmFOKGRhdGVwaWNrZXIuJG9wdGlvbnMubWF4RGF0ZSkgfHwgcGFyc2VkRGF0ZS5nZXRUaW1lKCkgPD0gZGF0ZXBpY2tlci4kb3B0aW9ucy5tYXhEYXRlOwogICAgICAgICAgdmFyIGlzVmFsaWQgPSBpc01pblZhbGlkICYmIGlzTWF4VmFsaWQ7CiAgICAgICAgICBjb250cm9sbGVyLiRzZXRWYWxpZGl0eSgnZGF0ZScsIGlzVmFsaWQpOwogICAgICAgICAgY29udHJvbGxlci4kc2V0VmFsaWRpdHkoJ21pbicsIGlzTWluVmFsaWQpOwogICAgICAgICAgY29udHJvbGxlci4kc2V0VmFsaWRpdHkoJ21heCcsIGlzTWF4VmFsaWQpOwogICAgICAgICAgLy8gT25seSB1cGRhdGUgdGhlIG1vZGVsIHdoZW4gd2UgaGF2ZSBhIHZhbGlkIGRhdGUKICAgICAgICAgIGlmKGlzVmFsaWQpIGNvbnRyb2xsZXIuJGRhdGVWYWx1ZSA9IHBhcnNlZERhdGU7CiAgICAgICAgfQoKICAgICAgICAvLyB2aWV3VmFsdWUgLT4gJHBhcnNlcnMgLT4gbW9kZWxWYWx1ZQogICAgICAgIGNvbnRyb2xsZXIuJHBhcnNlcnMudW5zaGlmdChmdW5jdGlvbih2aWV3VmFsdWUpIHsKICAgICAgICAgIC8vIGNvbnNvbGUud2FybignJHBhcnNlcigiJXMiKTogdmlld1ZhbHVlPSVvJywgZWxlbWVudC5hdHRyKCduZy1tb2RlbCcpLCB2aWV3VmFsdWUpOwogICAgICAgICAgLy8gTnVsbCB2YWx1ZXMgc2hvdWxkIGNvcnJlY3RseSByZXNldCB0aGUgbW9kZWwgdmFsdWUgJiB2YWxpZGl0eQogICAgICAgICAgaWYoIXZpZXdWYWx1ZSkgewogICAgICAgICAgICBjb250cm9sbGVyLiRzZXRWYWxpZGl0eSgnZGF0ZScsIHRydWUpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IGRhdGVQYXJzZXIucGFyc2Uodmlld1ZhbHVlLCBjb250cm9sbGVyLiRkYXRlVmFsdWUpOwogICAgICAgICAgaWYoIXBhcnNlZERhdGUgfHwgaXNOYU4ocGFyc2VkRGF0ZS5nZXRUaW1lKCkpKSB7CiAgICAgICAgICAgIGNvbnRyb2xsZXIuJHNldFZhbGlkaXR5KCdkYXRlJywgZmFsc2UpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YWxpZGF0ZUFnYWluc3RNaW5NYXhEYXRlKHBhcnNlZERhdGUpOwogICAgICAgICAgfQogICAgICAgICAgaWYob3B0aW9ucy5kYXRlVHlwZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgcmV0dXJuIGRhdGVGaWx0ZXIocGFyc2VkRGF0ZSwgb3B0aW9ucy5tb2RlbERhdGVGb3JtYXQgfHwgb3B0aW9ucy5kYXRlRm9ybWF0KTsKICAgICAgICAgIH0gZWxzZSBpZihvcHRpb25zLmRhdGVUeXBlID09PSAnbnVtYmVyJykgewogICAgICAgICAgICByZXR1cm4gY29udHJvbGxlci4kZGF0ZVZhbHVlLmdldFRpbWUoKTsKICAgICAgICAgIH0gZWxzZSBpZihvcHRpb25zLmRhdGVUeXBlID09PSAnaXNvJykgewogICAgICAgICAgICByZXR1cm4gY29udHJvbGxlci4kZGF0ZVZhbHVlLnRvSVNPU3RyaW5nKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoY29udHJvbGxlci4kZGF0ZVZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgLy8gbW9kZWxWYWx1ZSAtPiAkZm9ybWF0dGVycyAtPiB2aWV3VmFsdWUKICAgICAgICBjb250cm9sbGVyLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24obW9kZWxWYWx1ZSkgewogICAgICAgICAgLy8gY29uc29sZS53YXJuKCckZm9ybWF0dGVyKCIlcyIpOiBtb2RlbFZhbHVlPSVvICglbyknLCBlbGVtZW50LmF0dHIoJ25nLW1vZGVsJyksIG1vZGVsVmFsdWUsIHR5cGVvZiBtb2RlbFZhbHVlKTsKICAgICAgICAgIHZhciBkYXRlOwogICAgICAgICAgaWYoYW5ndWxhci5pc1VuZGVmaW5lZChtb2RlbFZhbHVlKSB8fCBtb2RlbFZhbHVlID09PSBudWxsKSB7CiAgICAgICAgICAgIGRhdGUgPSBOYU47CiAgICAgICAgICB9IGVsc2UgaWYoYW5ndWxhci5pc0RhdGUobW9kZWxWYWx1ZSkpIHsKICAgICAgICAgICAgZGF0ZSA9IG1vZGVsVmFsdWU7CiAgICAgICAgICB9IGVsc2UgaWYob3B0aW9ucy5kYXRlVHlwZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgZGF0ZSA9IGRhdGVQYXJzZXIucGFyc2UobW9kZWxWYWx1ZSwgbnVsbCwgb3B0aW9ucy5tb2RlbERhdGVGb3JtYXQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKG1vZGVsVmFsdWUpOwogICAgICAgICAgfQogICAgICAgICAgLy8gU2V0dXAgZGVmYXVsdCB2YWx1ZT8KICAgICAgICAgIC8vIGlmKGlzTmFOKGRhdGUuZ2V0VGltZSgpKSkgewogICAgICAgICAgLy8gICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpOwogICAgICAgICAgLy8gICBkYXRlID0gbmV3IERhdGUodG9kYXkuZ2V0RnVsbFllYXIoKSwgdG9kYXkuZ2V0TW9udGgoKSwgdG9kYXkuZ2V0RGF0ZSgpLCAwLCAwLCAwLCAwKTsKICAgICAgICAgIC8vIH0KICAgICAgICAgIGNvbnRyb2xsZXIuJGRhdGVWYWx1ZSA9IGRhdGU7CiAgICAgICAgICByZXR1cm4gY29udHJvbGxlci4kZGF0ZVZhbHVlOwogICAgICAgIH0pOwoKICAgICAgICAvLyB2aWV3VmFsdWUgLT4gZWxlbWVudAogICAgICAgIGNvbnRyb2xsZXIuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgLy8gY29uc29sZS53YXJuKCckcmVuZGVyKCIlcyIpOiB2aWV3VmFsdWU9JW8nLCBlbGVtZW50LmF0dHIoJ25nLW1vZGVsJyksIGNvbnRyb2xsZXIuJHZpZXdWYWx1ZSk7CiAgICAgICAgICBlbGVtZW50LnZhbCghY29udHJvbGxlci4kZGF0ZVZhbHVlIHx8IGlzTmFOKGNvbnRyb2xsZXIuJGRhdGVWYWx1ZS5nZXRUaW1lKCkpID8gJycgOiBkYXRlRmlsdGVyKGNvbnRyb2xsZXIuJGRhdGVWYWx1ZSwgb3B0aW9ucy5kYXRlRm9ybWF0KSk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gR2FyYmFnZSBjb2xsZWN0aW9uCiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYoZGF0ZXBpY2tlcikgZGF0ZXBpY2tlci5kZXN0cm95KCk7CiAgICAgICAgICBvcHRpb25zID0gbnVsbDsKICAgICAgICAgIGRhdGVwaWNrZXIgPSBudWxsOwogICAgICAgIH0pOwoKICAgICAgfQogICAgfTsKCiAgfV0pCgogIC5wcm92aWRlcignZGF0ZXBpY2tlclZpZXdzJywgZnVuY3Rpb24oKSB7CgogICAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHsKICAgICAgZGF5Rm9ybWF0OiAnZGQnLAogICAgICBkYXlTcGxpdDogNwogICAgfTsKCiAgICAvLyBTcGxpdCBhcnJheSBpbnRvIHNtYWxsZXIgYXJyYXlzCiAgICBmdW5jdGlvbiBzcGxpdChhcnIsIHNpemUpIHsKICAgICAgdmFyIGFycmF5cyA9IFtdOwogICAgICB3aGlsZShhcnIubGVuZ3RoID4gMCkgewogICAgICAgIGFycmF5cy5wdXNoKGFyci5zcGxpY2UoMCwgc2l6ZSkpOwogICAgICB9CiAgICAgIHJldHVybiBhcnJheXM7CiAgICB9CgogICAgLy8gTW9kdWx1cyBvcGVyYXRvcgogICAgZnVuY3Rpb24gbW9kKG4sIG0pIHsKICAgICAgcmV0dXJuICgobiAlIG0pICsgbSkgJSBtOwogICAgfQoKICAgIHRoaXMuJGdldCA9IFsiJGxvY2FsZSIsICIkc2NlIiwgImRhdGVGaWx0ZXIiLCAiJGRhdGVQYXJzZXIiLCBmdW5jdGlvbigkbG9jYWxlLCAkc2NlLCBkYXRlRmlsdGVyLCAkZGF0ZVBhcnNlcikgewoKICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBpY2tlcikgewoKICAgICAgICB2YXIgc2NvcGUgPSBwaWNrZXIuJHNjb3BlOwogICAgICAgIHZhciBvcHRpb25zID0gcGlja2VyLiRvcHRpb25zOwogICAgICAgIHZhciBkYXRlUGFyc2VyID0gJGRhdGVQYXJzZXIoKTsKCiAgICAgICAgdmFyIHdlZWtEYXlzTWluID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLlNIT1JUREFZOwogICAgICAgIHZhciB3ZWVrRGF5c0xhYmVscyA9IHdlZWtEYXlzTWluLnNsaWNlKG9wdGlvbnMuc3RhcnRXZWVrKS5jb25jYXQod2Vla0RheXNNaW4uc2xpY2UoMCwgb3B0aW9ucy5zdGFydFdlZWspKTsKICAgICAgICB2YXIgd2Vla0RheXNMYWJlbHNIdG1sID0gJHNjZS50cnVzdEFzSHRtbCgnPHRoIGNsYXNzPSJkb3cgdGV4dC1jZW50ZXIiPicgKyB3ZWVrRGF5c0xhYmVscy5qb2luKCc8L3RoPjx0aCBjbGFzcz0iZG93IHRleHQtY2VudGVyIj4nKSArICc8L3RoPicpOwoKICAgICAgICB2YXIgc3RhcnREYXRlID0gcGlja2VyLiRkYXRlIHx8IChvcHRpb25zLnN0YXJ0RGF0ZSA/IGRhdGVQYXJzZXIuZ2V0RGF0ZUZvckF0dHJpYnV0ZSgnc3RhcnREYXRlJywgb3B0aW9ucy5zdGFydERhdGUpIDogbmV3IERhdGUoKSk7CiAgICAgICAgdmFyIHZpZXdEYXRlID0ge3llYXI6IHN0YXJ0RGF0ZS5nZXRGdWxsWWVhcigpLCBtb250aDogc3RhcnREYXRlLmdldE1vbnRoKCksIGRhdGU6IHN0YXJ0RGF0ZS5nZXREYXRlKCl9OwogICAgICAgIHZhciB0aW1lem9uZU9mZnNldCA9IHN0YXJ0RGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogNmU0OwoKICAgICAgICB2YXIgdmlld3MgPSBbewogICAgICAgICAgICBmb3JtYXQ6IG9wdGlvbnMuZGF5Rm9ybWF0LAogICAgICAgICAgICBzcGxpdDogNywKICAgICAgICAgICAgc3RlcHM6IHsgbW9udGg6IDEgfSwKICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihkYXRlLCBmb3JjZSkgewogICAgICAgICAgICAgIGlmKCF0aGlzLmJ1aWx0IHx8IGZvcmNlIHx8IGRhdGUuZ2V0RnVsbFllYXIoKSAhPT0gdmlld0RhdGUueWVhciB8fCBkYXRlLmdldE1vbnRoKCkgIT09IHZpZXdEYXRlLm1vbnRoKSB7CiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh2aWV3RGF0ZSwge3llYXI6IHBpY2tlci4kZGF0ZS5nZXRGdWxsWWVhcigpLCBtb250aDogcGlja2VyLiRkYXRlLmdldE1vbnRoKCksIGRhdGU6IHBpY2tlci4kZGF0ZS5nZXREYXRlKCl9KTsKICAgICAgICAgICAgICAgIHBpY2tlci4kYnVpbGQoKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYoZGF0ZS5nZXREYXRlKCkgIT09IHZpZXdEYXRlLmRhdGUpIHsKICAgICAgICAgICAgICAgIHZpZXdEYXRlLmRhdGUgPSBwaWNrZXIuJGRhdGUuZ2V0RGF0ZSgpOwogICAgICAgICAgICAgICAgcGlja2VyLiR1cGRhdGVTZWxlY3RlZCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgYnVpbGQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHZhciBmaXJzdERheU9mTW9udGggPSBuZXcgRGF0ZSh2aWV3RGF0ZS55ZWFyLCB2aWV3RGF0ZS5tb250aCwgMSksIGZpcnN0RGF5T2ZNb250aE9mZnNldCA9IGZpcnN0RGF5T2ZNb250aC5nZXRUaW1lem9uZU9mZnNldCgpOwogICAgICAgICAgICAgIHZhciBmaXJzdERhdGUgPSBuZXcgRGF0ZSgrZmlyc3REYXlPZk1vbnRoIC0gbW9kKGZpcnN0RGF5T2ZNb250aC5nZXREYXkoKSAtIG9wdGlvbnMuc3RhcnRXZWVrLCA3KSAqIDg2NGU1KSwgZmlyc3REYXRlT2Zmc2V0ID0gZmlyc3REYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7CiAgICAgICAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKS50b0RhdGVTdHJpbmcoKTsKICAgICAgICAgICAgICAvLyBIYW5kbGUgZGF5bGlnaHQgdGltZSBzd2l0Y2gKICAgICAgICAgICAgICBpZihmaXJzdERhdGVPZmZzZXQgIT09IGZpcnN0RGF5T2ZNb250aE9mZnNldCkgZmlyc3REYXRlID0gbmV3IERhdGUoK2ZpcnN0RGF0ZSArIChmaXJzdERhdGVPZmZzZXQgLSBmaXJzdERheU9mTW9udGhPZmZzZXQpICogNjBlMyk7CiAgICAgICAgICAgICAgdmFyIGRheXMgPSBbXSwgZGF5OwogICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCA0MjsgaSsrKSB7IC8vIDwgNyAqIDYKICAgICAgICAgICAgICAgIGRheSA9IG5ldyBEYXRlKGZpcnN0RGF0ZS5nZXRGdWxsWWVhcigpLCBmaXJzdERhdGUuZ2V0TW9udGgoKSwgZmlyc3REYXRlLmdldERhdGUoKSArIGkpOwogICAgICAgICAgICAgICAgZGF5cy5wdXNoKHtkYXRlOiBkYXksIGlzVG9kYXk6IGRheS50b0RhdGVTdHJpbmcoKSA9PT0gdG9kYXksIGxhYmVsOiBkYXRlRmlsdGVyKGRheSwgdGhpcy5mb3JtYXQpLCBzZWxlY3RlZDogcGlja2VyLiRkYXRlICYmIHRoaXMuaXNTZWxlY3RlZChkYXkpLCBtdXRlZDogZGF5LmdldE1vbnRoKCkgIT09IHZpZXdEYXRlLm1vbnRoLCBkaXNhYmxlZDogdGhpcy5pc0Rpc2FibGVkKGRheSl9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc2NvcGUudGl0bGUgPSBkYXRlRmlsdGVyKGZpcnN0RGF5T2ZNb250aCwgJ01NTU0geXl5eScpOwogICAgICAgICAgICAgIHNjb3BlLnNob3dMYWJlbHMgPSB0cnVlOwogICAgICAgICAgICAgIHNjb3BlLmxhYmVscyA9IHdlZWtEYXlzTGFiZWxzSHRtbDsKICAgICAgICAgICAgICBzY29wZS5yb3dzID0gc3BsaXQoZGF5cywgdGhpcy5zcGxpdCk7CiAgICAgICAgICAgICAgdGhpcy5idWlsdCA9IHRydWU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICAgICAgICByZXR1cm4gcGlja2VyLiRkYXRlICYmIGRhdGUuZ2V0RnVsbFllYXIoKSA9PT0gcGlja2VyLiRkYXRlLmdldEZ1bGxZZWFyKCkgJiYgZGF0ZS5nZXRNb250aCgpID09PSBwaWNrZXIuJGRhdGUuZ2V0TW9udGgoKSAmJiBkYXRlLmdldERhdGUoKSA9PT0gcGlja2VyLiRkYXRlLmdldERhdGUoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNEaXNhYmxlZDogZnVuY3Rpb24oZGF0ZSkgewogICAgICAgICAgICAgIHZhciB0aW1lID0gZGF0ZS5nZXRUaW1lKCk7CgogICAgICAgICAgICAgIC8vIERpc2FibGVkIGJlY2F1c2Ugb2YgbWluL21heCBkYXRlLgogICAgICAgICAgICAgIGlmICh0aW1lIDwgb3B0aW9ucy5taW5EYXRlIHx8IHRpbWUgPiBvcHRpb25zLm1heERhdGUpIHJldHVybiB0cnVlOwoKICAgICAgICAgICAgICAvLyBEaXNhYmxlZCBkdWUgdG8gYmVpbmcgYSBkaXNhYmxlZCBkYXkgb2YgdGhlIHdlZWsKICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kYXlzT2ZXZWVrRGlzYWJsZWQuaW5kZXhPZihkYXRlLmdldERheSgpKSAhPT0gLTEpIHJldHVybiB0cnVlOwoKICAgICAgICAgICAgICAvLyBEaXNhYmxlZCBiZWNhdXNlIG9mIGRpc2FibGVkIGRhdGUgcmFuZ2UuCiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGlzYWJsZWREYXRlUmFuZ2VzKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMuZGlzYWJsZWREYXRlUmFuZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgIGlmICh0aW1lID49IG9wdGlvbnMuZGlzYWJsZWREYXRlUmFuZ2VzW2ldLnN0YXJ0ICYmIHRpbWUgPD0gb3B0aW9ucy5kaXNhYmxlZERhdGVSYW5nZXNbaV0uZW5kKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbihldnQpIHsKICAgICAgICAgICAgICB2YXIgYWN0dWFsVGltZSA9IHBpY2tlci4kZGF0ZS5nZXRUaW1lKCk7CiAgICAgICAgICAgICAgdmFyIG5ld0RhdGU7CgogICAgICAgICAgICAgIGlmKGV2dC5rZXlDb2RlID09PSAzNykgbmV3RGF0ZSA9IG5ldyBEYXRlKGFjdHVhbFRpbWUgLSAxICogODY0ZTUpOwogICAgICAgICAgICAgIGVsc2UgaWYoZXZ0LmtleUNvZGUgPT09IDM4KSBuZXdEYXRlID0gbmV3IERhdGUoYWN0dWFsVGltZSAtIDcgKiA4NjRlNSk7CiAgICAgICAgICAgICAgZWxzZSBpZihldnQua2V5Q29kZSA9PT0gMzkpIG5ld0RhdGUgPSBuZXcgRGF0ZShhY3R1YWxUaW1lICsgMSAqIDg2NGU1KTsKICAgICAgICAgICAgICBlbHNlIGlmKGV2dC5rZXlDb2RlID09PSA0MCkgbmV3RGF0ZSA9IG5ldyBEYXRlKGFjdHVhbFRpbWUgKyA3ICogODY0ZTUpOwoKICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZChuZXdEYXRlKSkgcGlja2VyLnNlbGVjdChuZXdEYXRlLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgewogICAgICAgICAgICBuYW1lOiAnbW9udGgnLAogICAgICAgICAgICBmb3JtYXQ6ICdNTU0nLAogICAgICAgICAgICBzcGxpdDogNCwKICAgICAgICAgICAgc3RlcHM6IHsgeWVhcjogMSB9LAogICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKGRhdGUsIGZvcmNlKSB7CiAgICAgICAgICAgICAgaWYoIXRoaXMuYnVpbHQgfHwgZGF0ZS5nZXRGdWxsWWVhcigpICE9PSB2aWV3RGF0ZS55ZWFyKSB7CiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh2aWV3RGF0ZSwge3llYXI6IHBpY2tlci4kZGF0ZS5nZXRGdWxsWWVhcigpLCBtb250aDogcGlja2VyLiRkYXRlLmdldE1vbnRoKCksIGRhdGU6IHBpY2tlci4kZGF0ZS5nZXREYXRlKCl9KTsKICAgICAgICAgICAgICAgIHBpY2tlci4kYnVpbGQoKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYoZGF0ZS5nZXRNb250aCgpICE9PSB2aWV3RGF0ZS5tb250aCkgewogICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodmlld0RhdGUsIHttb250aDogcGlja2VyLiRkYXRlLmdldE1vbnRoKCksIGRhdGU6IHBpY2tlci4kZGF0ZS5nZXREYXRlKCl9KTsKICAgICAgICAgICAgICAgIHBpY2tlci4kdXBkYXRlU2VsZWN0ZWQoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJ1aWxkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB2YXIgZmlyc3RNb250aCA9IG5ldyBEYXRlKHZpZXdEYXRlLnllYXIsIDAsIDEpOwogICAgICAgICAgICAgIHZhciBtb250aHMgPSBbXSwgbW9udGg7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMjsgaSsrKSB7CiAgICAgICAgICAgICAgICBtb250aCA9IG5ldyBEYXRlKHZpZXdEYXRlLnllYXIsIGksIDEpOwogICAgICAgICAgICAgICAgbW9udGhzLnB1c2goe2RhdGU6IG1vbnRoLCBsYWJlbDogZGF0ZUZpbHRlcihtb250aCwgdGhpcy5mb3JtYXQpLCBzZWxlY3RlZDogcGlja2VyLiRpc1NlbGVjdGVkKG1vbnRoKSwgZGlzYWJsZWQ6IHRoaXMuaXNEaXNhYmxlZChtb250aCl9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc2NvcGUudGl0bGUgPSBkYXRlRmlsdGVyKG1vbnRoLCAneXl5eScpOwogICAgICAgICAgICAgIHNjb3BlLnNob3dMYWJlbHMgPSBmYWxzZTsKICAgICAgICAgICAgICBzY29wZS5yb3dzID0gc3BsaXQobW9udGhzLCB0aGlzLnNwbGl0KTsKICAgICAgICAgICAgICB0aGlzLmJ1aWx0ID0gdHJ1ZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNTZWxlY3RlZDogZnVuY3Rpb24oZGF0ZSkgewogICAgICAgICAgICAgIHJldHVybiBwaWNrZXIuJGRhdGUgJiYgZGF0ZS5nZXRGdWxsWWVhcigpID09PSBwaWNrZXIuJGRhdGUuZ2V0RnVsbFllYXIoKSAmJiBkYXRlLmdldE1vbnRoKCkgPT09IHBpY2tlci4kZGF0ZS5nZXRNb250aCgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBpc0Rpc2FibGVkOiBmdW5jdGlvbihkYXRlKSB7CiAgICAgICAgICAgICAgdmFyIGxhc3REYXRlID0gK25ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgMCk7CiAgICAgICAgICAgICAgcmV0dXJuIGxhc3REYXRlIDwgb3B0aW9ucy5taW5EYXRlIHx8IGRhdGUuZ2V0VGltZSgpID4gb3B0aW9ucy5tYXhEYXRlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgICAgIHZhciBhY3R1YWxNb250aCA9IHBpY2tlci4kZGF0ZS5nZXRNb250aCgpOwogICAgICAgICAgICAgIHZhciBuZXdEYXRlID0gbmV3IERhdGUocGlja2VyLiRkYXRlKTsKCiAgICAgICAgICAgICAgaWYoZXZ0LmtleUNvZGUgPT09IDM3KSBuZXdEYXRlLnNldE1vbnRoKGFjdHVhbE1vbnRoIC0gMSk7CiAgICAgICAgICAgICAgZWxzZSBpZihldnQua2V5Q29kZSA9PT0gMzgpIG5ld0RhdGUuc2V0TW9udGgoYWN0dWFsTW9udGggLSA0KTsKICAgICAgICAgICAgICBlbHNlIGlmKGV2dC5rZXlDb2RlID09PSAzOSkgbmV3RGF0ZS5zZXRNb250aChhY3R1YWxNb250aCArIDEpOwogICAgICAgICAgICAgIGVsc2UgaWYoZXZ0LmtleUNvZGUgPT09IDQwKSBuZXdEYXRlLnNldE1vbnRoKGFjdHVhbE1vbnRoICsgNCk7CgogICAgICAgICAgICAgIGlmICghdGhpcy5pc0Rpc2FibGVkKG5ld0RhdGUpKSBwaWNrZXIuc2VsZWN0KG5ld0RhdGUsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIG5hbWU6ICd5ZWFyJywKICAgICAgICAgICAgZm9ybWF0OiAneXl5eScsCiAgICAgICAgICAgIHNwbGl0OiA0LAogICAgICAgICAgICBzdGVwczogeyB5ZWFyOiAxMiB9LAogICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKGRhdGUsIGZvcmNlKSB7CiAgICAgICAgICAgICAgaWYoIXRoaXMuYnVpbHQgfHwgZm9yY2UgfHwgcGFyc2VJbnQoZGF0ZS5nZXRGdWxsWWVhcigpLzIwLCAxMCkgIT09IHBhcnNlSW50KHZpZXdEYXRlLnllYXIvMjAsIDEwKSkgewogICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodmlld0RhdGUsIHt5ZWFyOiBwaWNrZXIuJGRhdGUuZ2V0RnVsbFllYXIoKSwgbW9udGg6IHBpY2tlci4kZGF0ZS5nZXRNb250aCgpLCBkYXRlOiBwaWNrZXIuJGRhdGUuZ2V0RGF0ZSgpfSk7CiAgICAgICAgICAgICAgICBwaWNrZXIuJGJ1aWxkKCk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmKGRhdGUuZ2V0RnVsbFllYXIoKSAhPT0gdmlld0RhdGUueWVhcikgewogICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodmlld0RhdGUsIHt5ZWFyOiBwaWNrZXIuJGRhdGUuZ2V0RnVsbFllYXIoKSwgbW9udGg6IHBpY2tlci4kZGF0ZS5nZXRNb250aCgpLCBkYXRlOiBwaWNrZXIuJGRhdGUuZ2V0RGF0ZSgpfSk7CiAgICAgICAgICAgICAgICBwaWNrZXIuJHVwZGF0ZVNlbGVjdGVkKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBidWlsZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgdmFyIGZpcnN0WWVhciA9IHZpZXdEYXRlLnllYXIgLSB2aWV3RGF0ZS55ZWFyICUgKHRoaXMuc3BsaXQgKiAzKTsKICAgICAgICAgICAgICB2YXIgeWVhcnMgPSBbXSwgeWVhcjsKICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEyOyBpKyspIHsKICAgICAgICAgICAgICAgIHllYXIgPSBuZXcgRGF0ZShmaXJzdFllYXIgKyBpLCAwLCAxKTsKICAgICAgICAgICAgICAgIHllYXJzLnB1c2goe2RhdGU6IHllYXIsIGxhYmVsOiBkYXRlRmlsdGVyKHllYXIsIHRoaXMuZm9ybWF0KSwgc2VsZWN0ZWQ6IHBpY2tlci4kaXNTZWxlY3RlZCh5ZWFyKSwgZGlzYWJsZWQ6IHRoaXMuaXNEaXNhYmxlZCh5ZWFyKX0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBzY29wZS50aXRsZSA9IHllYXJzWzBdLmxhYmVsICsgJy0nICsgeWVhcnNbeWVhcnMubGVuZ3RoIC0gMV0ubGFiZWw7CiAgICAgICAgICAgICAgc2NvcGUuc2hvd0xhYmVscyA9IGZhbHNlOwogICAgICAgICAgICAgIHNjb3BlLnJvd3MgPSBzcGxpdCh5ZWFycywgdGhpcy5zcGxpdCk7CiAgICAgICAgICAgICAgdGhpcy5idWlsdCA9IHRydWU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICAgICAgICByZXR1cm4gcGlja2VyLiRkYXRlICYmIGRhdGUuZ2V0RnVsbFllYXIoKSA9PT0gcGlja2VyLiRkYXRlLmdldEZ1bGxZZWFyKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlzRGlzYWJsZWQ6IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICAgICAgICB2YXIgbGFzdERhdGUgPSArbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpICsgMSwgMCwgMCk7CiAgICAgICAgICAgICAgcmV0dXJuIGxhc3REYXRlIDwgb3B0aW9ucy5taW5EYXRlIHx8IGRhdGUuZ2V0VGltZSgpID4gb3B0aW9ucy5tYXhEYXRlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgICAgIHZhciBhY3R1YWxZZWFyID0gcGlja2VyLiRkYXRlLmdldEZ1bGxZZWFyKCksCiAgICAgICAgICAgICAgICAgIG5ld0RhdGUgPSBuZXcgRGF0ZShwaWNrZXIuJGRhdGUpOwoKICAgICAgICAgICAgICBpZihldnQua2V5Q29kZSA9PT0gMzcpIG5ld0RhdGUuc2V0WWVhcihhY3R1YWxZZWFyIC0gMSk7CiAgICAgICAgICAgICAgZWxzZSBpZihldnQua2V5Q29kZSA9PT0gMzgpIG5ld0RhdGUuc2V0WWVhcihhY3R1YWxZZWFyIC0gNCk7CiAgICAgICAgICAgICAgZWxzZSBpZihldnQua2V5Q29kZSA9PT0gMzkpIG5ld0RhdGUuc2V0WWVhcihhY3R1YWxZZWFyICsgMSk7CiAgICAgICAgICAgICAgZWxzZSBpZihldnQua2V5Q29kZSA9PT0gNDApIG5ld0RhdGUuc2V0WWVhcihhY3R1YWxZZWFyICsgNCk7CgogICAgICAgICAgICAgIGlmICghdGhpcy5pc0Rpc2FibGVkKG5ld0RhdGUpKSBwaWNrZXIuc2VsZWN0KG5ld0RhdGUsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9XTsKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHZpZXdzOiBvcHRpb25zLm1pblZpZXcgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh2aWV3cywgb3B0aW9ucy5taW5WaWV3KSA6IHZpZXdzLAogICAgICAgICAgdmlld0RhdGU6IHZpZXdEYXRlCiAgICAgICAgfTsKCiAgICAgIH07CgogICAgfV07CgogIH0pOwoKLy8gU291cmNlOiBkYXRlLXBhcnNlci5qcwphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAuaGVscGVycy5kYXRlUGFyc2VyJywgW10pCgoucHJvdmlkZXIoJyRkYXRlUGFyc2VyJywgWyIkbG9jYWxlUHJvdmlkZXIiLCBmdW5jdGlvbigkbG9jYWxlUHJvdmlkZXIpIHsKCiAgLy8gZGVmaW5lIGEgY3VzdG9tIFBhcnNlRGF0ZSBvYmplY3QgdG8gdXNlIGluc3RlYWQgb2YgbmF0aXZlIERhdGUgCiAgLy8gdG8gYXZvaWQgZGF0ZSB2YWx1ZXMgd3JhcHBpbmcgd2hlbiBzZXR0aW5nIGRhdGUgY29tcG9uZW50IHZhbHVlcwogIGZ1bmN0aW9uIFBhcnNlRGF0ZSgpIHsKICAgIHRoaXMueWVhciA9IDE5NzA7CiAgICB0aGlzLm1vbnRoID0gMDsKICAgIHRoaXMuZGF5ID0gMTsKICAgIHRoaXMuaG91cnMgPSAwOwogICAgdGhpcy5taW51dGVzID0gMDsKICAgIHRoaXMuc2Vjb25kcyA9IDA7CiAgICB0aGlzLm1pbGxpc2Vjb25kcyA9IDA7CiAgfQoKICBQYXJzZURhdGUucHJvdG90eXBlLnNldE1pbGxpc2Vjb25kcyA9IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubWlsbGlzZWNvbmRzID0gdmFsdWU7IH07CiAgUGFyc2VEYXRlLnByb3RvdHlwZS5zZXRTZWNvbmRzID0gZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5zZWNvbmRzID0gdmFsdWU7IH07CiAgUGFyc2VEYXRlLnByb3RvdHlwZS5zZXRNaW51dGVzID0gZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5taW51dGVzID0gdmFsdWU7IH07CiAgUGFyc2VEYXRlLnByb3RvdHlwZS5zZXRIb3VycyA9IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuaG91cnMgPSB2YWx1ZTsgfTsKICBQYXJzZURhdGUucHJvdG90eXBlLmdldEhvdXJzID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmhvdXJzOyB9OwogIFBhcnNlRGF0ZS5wcm90b3R5cGUuc2V0RGF0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuZGF5ID0gdmFsdWU7IH07CiAgUGFyc2VEYXRlLnByb3RvdHlwZS5zZXRNb250aCA9IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubW9udGggPSB2YWx1ZTsgfTsKICBQYXJzZURhdGUucHJvdG90eXBlLnNldEZ1bGxZZWFyID0gZnVuY3Rpb24odmFsdWUpIHsgdGhpcy55ZWFyID0gdmFsdWU7IH07CiAgUGFyc2VEYXRlLnByb3RvdHlwZS5mcm9tRGF0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICB0aGlzLnllYXIgPSB2YWx1ZS5nZXRGdWxsWWVhcigpOwogICAgdGhpcy5tb250aCA9IHZhbHVlLmdldE1vbnRoKCk7CiAgICB0aGlzLmRheSA9IHZhbHVlLmdldERhdGUoKTsKICAgIHRoaXMuaG91cnMgPSB2YWx1ZS5nZXRIb3VycygpOwogICAgdGhpcy5taW51dGVzID0gdmFsdWUuZ2V0TWludXRlcygpOwogICAgdGhpcy5zZWNvbmRzID0gdmFsdWUuZ2V0U2Vjb25kcygpOwogICAgdGhpcy5taWxsaXNlY29uZHMgPSB2YWx1ZS5nZXRNaWxsaXNlY29uZHMoKTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIFBhcnNlRGF0ZS5wcm90b3R5cGUudG9EYXRlID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gbmV3IERhdGUodGhpcy55ZWFyLCB0aGlzLm1vbnRoLCB0aGlzLmRheSwgdGhpcy5ob3VycywgdGhpcy5taW51dGVzLCB0aGlzLnNlY29uZHMsIHRoaXMubWlsbGlzZWNvbmRzKTsKICB9OwoKICB2YXIgcHJvdG8gPSBQYXJzZURhdGUucHJvdG90eXBlOwoKICBmdW5jdGlvbiBub29wKCkgewogIH0KCiAgZnVuY3Rpb24gaXNOdW1lcmljKG4pIHsKICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7CiAgfQoKICBmdW5jdGlvbiBpbmRleE9mQ2FzZUluc2Vuc2l0aXZlKGFycmF5LCB2YWx1ZSkgewogICAgdmFyIGxlbiA9IGFycmF5Lmxlbmd0aCwgc3RyPXZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTsKICAgIGZvciAodmFyIGk9MDsgaTxsZW47IGkrKykgewogICAgICBpZiAoYXJyYXlbaV0udG9Mb3dlckNhc2UoKSA9PT0gc3RyKSB7IHJldHVybiBpOyB9CiAgICB9CiAgICByZXR1cm4gLTE7IC8vIFJldHVybiAtMSBwZXIgdGhlICJBcnJheS5pbmRleE9mKCkiIG1ldGhvZC4gICAgCiAgfQoKICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0gewogICAgZm9ybWF0OiAnc2hvcnREYXRlJywKICAgIHN0cmljdDogZmFsc2UKICB9OwoKICB0aGlzLiRnZXQgPSBbIiRsb2NhbGUiLCAiZGF0ZUZpbHRlciIsIGZ1bmN0aW9uKCRsb2NhbGUsIGRhdGVGaWx0ZXIpIHsKCiAgICB2YXIgRGF0ZVBhcnNlckZhY3RvcnkgPSBmdW5jdGlvbihjb25maWcpIHsKCiAgICAgIHZhciBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sIGRlZmF1bHRzLCBjb25maWcpOwoKICAgICAgdmFyICRkYXRlUGFyc2VyID0ge307CgogICAgICB2YXIgcmVnRXhwTWFwID0gewogICAgICAgICdzc3MnICAgOiAnWzAtOV17M30nLAogICAgICAgICdzcycgICAgOiAnWzAtNV1bMC05XScsCiAgICAgICAgJ3MnICAgICA6IG9wdGlvbnMuc3RyaWN0ID8gJ1sxLTVdP1swLTldJyA6ICdbMC05XXxbMC01XVswLTldJywKICAgICAgICAnbW0nICAgIDogJ1swLTVdWzAtOV0nLAogICAgICAgICdtJyAgICAgOiBvcHRpb25zLnN0cmljdCA/ICdbMS01XT9bMC05XScgOiAnWzAtOV18WzAtNV1bMC05XScsCiAgICAgICAgJ0hIJyAgICA6ICdbMDFdWzAtOV18MlswLTNdJywKICAgICAgICAnSCcgICAgIDogb3B0aW9ucy5zdHJpY3QgPyAnMT9bMC05XXwyWzAtM10nIDogJ1swMV0/WzAtOV18MlswLTNdJywKICAgICAgICAnaGgnICAgIDogJ1swXVsxLTldfFsxXVswMTJdJywKICAgICAgICAnaCcgICAgIDogb3B0aW9ucy5zdHJpY3QgPyAnWzEtOV18MVswMTJdJyA6ICcwP1sxLTldfDFbMDEyXScsCiAgICAgICAgJ2EnICAgICA6ICdBTXxQTScsCiAgICAgICAgJ0VFRUUnICA6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5EQVkuam9pbignfCcpLAogICAgICAgICdFRUUnICAgOiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuU0hPUlREQVkuam9pbignfCcpLAogICAgICAgICdkZCcgICAgOiAnMFsxLTldfFsxMl1bMC05XXwzWzAxXScsCiAgICAgICAgJ2QnICAgICA6IG9wdGlvbnMuc3RyaWN0ID8gJ1sxLTldfFsxLTJdWzAtOV18M1swMV0nIDogJzA/WzEtOV18WzEtMl1bMC05XXwzWzAxXScsCiAgICAgICAgJ01NTU0nICA6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5NT05USC5qb2luKCd8JyksCiAgICAgICAgJ01NTScgICA6ICRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5TSE9SVE1PTlRILmpvaW4oJ3wnKSwKICAgICAgICAnTU0nICAgIDogJzBbMS05XXwxWzAxMl0nLAogICAgICAgICdNJyAgICAgOiBvcHRpb25zLnN0cmljdCA/ICdbMS05XXwxWzAxMl0nIDogJzA/WzEtOV18MVswMTJdJywKICAgICAgICAneXl5eScgIDogJ1sxXXsxfVswLTldezN9fFsyXXsxfVswLTldezN9JywKICAgICAgICAneXknICAgIDogJ1swLTldezJ9JywKICAgICAgICAneScgICAgIDogb3B0aW9ucy5zdHJpY3QgPyAnLT8oMHxbMS05XVswLTldezAsM30pJyA6ICctPzAqWzAtOV17MSw0fScsCiAgICAgIH07CgogICAgICB2YXIgc2V0Rm5NYXAgPSB7CiAgICAgICAgJ3NzcycgICA6IHByb3RvLnNldE1pbGxpc2Vjb25kcywKICAgICAgICAnc3MnICAgIDogcHJvdG8uc2V0U2Vjb25kcywKICAgICAgICAncycgICAgIDogcHJvdG8uc2V0U2Vjb25kcywKICAgICAgICAnbW0nICAgIDogcHJvdG8uc2V0TWludXRlcywKICAgICAgICAnbScgICAgIDogcHJvdG8uc2V0TWludXRlcywKICAgICAgICAnSEgnICAgIDogcHJvdG8uc2V0SG91cnMsCiAgICAgICAgJ0gnICAgICA6IHByb3RvLnNldEhvdXJzLAogICAgICAgICdoaCcgICAgOiBwcm90by5zZXRIb3VycywKICAgICAgICAnaCcgICAgIDogcHJvdG8uc2V0SG91cnMsCiAgICAgICAgJ0VFRUUnICA6IG5vb3AsCiAgICAgICAgJ0VFRScgICA6IG5vb3AsCiAgICAgICAgJ2RkJyAgICA6IHByb3RvLnNldERhdGUsCiAgICAgICAgJ2QnICAgICA6IHByb3RvLnNldERhdGUsCiAgICAgICAgJ2EnICAgICA6IGZ1bmN0aW9uKHZhbHVlKSB7IHZhciBob3VycyA9IHRoaXMuZ2V0SG91cnMoKSAlIDEyOyByZXR1cm4gdGhpcy5zZXRIb3Vycyh2YWx1ZS5tYXRjaCgvcG0vaSkgPyBob3VycyArIDEyIDogaG91cnMpOyB9LAogICAgICAgICdNTU1NJyAgOiBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdGhpcy5zZXRNb250aChpbmRleE9mQ2FzZUluc2Vuc2l0aXZlKCRsb2NhbGUuREFURVRJTUVfRk9STUFUUy5NT05USCwgdmFsdWUpKTsgfSwKICAgICAgICAnTU1NJyAgIDogZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHRoaXMuc2V0TW9udGgoaW5kZXhPZkNhc2VJbnNlbnNpdGl2ZSgkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuU0hPUlRNT05USCwgdmFsdWUpKTsgfSwKICAgICAgICAnTU0nICAgIDogZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHRoaXMuc2V0TW9udGgoMSAqIHZhbHVlIC0gMSk7IH0sCiAgICAgICAgJ00nICAgICA6IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB0aGlzLnNldE1vbnRoKDEgKiB2YWx1ZSAtIDEpOyB9LAogICAgICAgICd5eXl5JyAgOiBwcm90by5zZXRGdWxsWWVhciwKICAgICAgICAneXknICAgIDogZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHRoaXMuc2V0RnVsbFllYXIoMjAwMCArIDEgKiB2YWx1ZSk7IH0sCiAgICAgICAgJ3knICAgICA6IHByb3RvLnNldEZ1bGxZZWFyCiAgICAgIH07CgogICAgICB2YXIgcmVnZXgsIHNldE1hcDsKCiAgICAgICRkYXRlUGFyc2VyLmluaXQgPSBmdW5jdGlvbigpIHsKICAgICAgICAkZGF0ZVBhcnNlci4kZm9ybWF0ID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTW29wdGlvbnMuZm9ybWF0XSB8fCBvcHRpb25zLmZvcm1hdDsKICAgICAgICByZWdleCA9IHJlZ0V4cEZvckZvcm1hdCgkZGF0ZVBhcnNlci4kZm9ybWF0KTsKICAgICAgICBzZXRNYXAgPSBzZXRNYXBGb3JGb3JtYXQoJGRhdGVQYXJzZXIuJGZvcm1hdCk7CiAgICAgIH07CgogICAgICAkZGF0ZVBhcnNlci5pc1ZhbGlkID0gZnVuY3Rpb24oZGF0ZSkgewogICAgICAgIGlmKGFuZ3VsYXIuaXNEYXRlKGRhdGUpKSByZXR1cm4gIWlzTmFOKGRhdGUuZ2V0VGltZSgpKTsKICAgICAgICByZXR1cm4gcmVnZXgudGVzdChkYXRlKTsKICAgICAgfTsKCiAgICAgICRkYXRlUGFyc2VyLnBhcnNlID0gZnVuY3Rpb24odmFsdWUsIGJhc2VEYXRlLCBmb3JtYXQpIHsKICAgICAgICBpZihhbmd1bGFyLmlzRGF0ZSh2YWx1ZSkpIHZhbHVlID0gZGF0ZUZpbHRlcih2YWx1ZSwgZm9ybWF0IHx8ICRkYXRlUGFyc2VyLiRmb3JtYXQpOwogICAgICAgIHZhciBmb3JtYXRSZWdleCA9IGZvcm1hdCA/IHJlZ0V4cEZvckZvcm1hdChmb3JtYXQpIDogcmVnZXg7CiAgICAgICAgdmFyIGZvcm1hdFNldE1hcCA9IGZvcm1hdCA/IHNldE1hcEZvckZvcm1hdChmb3JtYXQpIDogc2V0TWFwOwogICAgICAgIHZhciBtYXRjaGVzID0gZm9ybWF0UmVnZXguZXhlYyh2YWx1ZSk7CiAgICAgICAgaWYoIW1hdGNoZXMpIHJldHVybiBmYWxzZTsKICAgICAgICAvLyB1c2UgY3VzdG9tIFBhcnNlRGF0ZSBvYmplY3QgdG8gc2V0IHBhcnNlZCB2YWx1ZXMKICAgICAgICB2YXIgZGF0ZSA9IGJhc2VEYXRlICYmICFpc05hTihiYXNlRGF0ZS5nZXRUaW1lKCkpID8gbmV3IFBhcnNlRGF0ZSgpLmZyb21EYXRlKGJhc2VEYXRlKSA6IG5ldyBQYXJzZURhdGUoKS5mcm9tRGF0ZShuZXcgRGF0ZSgxOTcwLCAwLCAxLCAwKSk7CiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IG1hdGNoZXMubGVuZ3RoIC0gMTsgaSsrKSB7CiAgICAgICAgICBmb3JtYXRTZXRNYXBbaV0gJiYgZm9ybWF0U2V0TWFwW2ldLmNhbGwoZGF0ZSwgbWF0Y2hlc1tpKzFdKTsKICAgICAgICB9CiAgICAgICAgLy8gY29udmVydCBiYWNrIHRvIG5hdGl2ZSBEYXRlIG9iamVjdAogICAgICAgIHJldHVybiBkYXRlLnRvRGF0ZSgpOwogICAgICB9OwoKICAgICAgJGRhdGVQYXJzZXIuZ2V0RGF0ZUZvckF0dHJpYnV0ZSA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgICB2YXIgZGF0ZTsKCiAgICAgICAgaWYodmFsdWUgPT09ICd0b2RheScpIHsKICAgICAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7CiAgICAgICAgICBkYXRlID0gbmV3IERhdGUodG9kYXkuZ2V0RnVsbFllYXIoKSwgdG9kYXkuZ2V0TW9udGgoKSwgdG9kYXkuZ2V0RGF0ZSgpICsgKGtleSA9PT0gJ21heERhdGUnID8gMSA6IDApLCAwLCAwLCAwLCAoa2V5ID09PSAnbWluRGF0ZScgPyAwIDogLTEpKTsKICAgICAgICB9IGVsc2UgaWYoYW5ndWxhci5pc1N0cmluZyh2YWx1ZSkgJiYgdmFsdWUubWF0Y2goL14iLisiJC8pKSB7IC8vIFN1cHBvcnQge3sgZGF0ZU9iaiB9fQogICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAyKSk7CiAgICAgICAgfSBlbHNlIGlmKGlzTnVtZXJpYyh2YWx1ZSkpIHsKICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShwYXJzZUludCh2YWx1ZSwgMTApKTsKICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNTdHJpbmcodmFsdWUpICYmIDAgPT09IHZhbHVlLmxlbmd0aCkgeyAvLyBSZXNldCBkYXRlCiAgICAgICAgICBkYXRlID0ga2V5ID09PSAnbWluRGF0ZScgPyAtSW5maW5pdHkgOiArSW5maW5pdHk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZGF0ZTsKICAgICAgfTsKCiAgICAgICRkYXRlUGFyc2VyLmdldFRpbWVGb3JBdHRyaWJ1dGUgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgdmFyIHRpbWU7CgogICAgICAgIGlmKHZhbHVlID09PSAnbm93JykgewogICAgICAgICAgdGltZSA9IG5ldyBEYXRlKCkuc2V0RnVsbFllYXIoMTk3MCwgMCwgMSk7CiAgICAgICAgfSBlbHNlIGlmKGFuZ3VsYXIuaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlLm1hdGNoKC9eIi4rIiQvKSkgewogICAgICAgICAgdGltZSA9IG5ldyBEYXRlKHZhbHVlLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAyKSkuc2V0RnVsbFllYXIoMTk3MCwgMCwgMSk7CiAgICAgICAgfSBlbHNlIGlmKGlzTnVtZXJpYyh2YWx1ZSkpIHsKICAgICAgICAgIHRpbWUgPSBuZXcgRGF0ZShwYXJzZUludCh2YWx1ZSwgMTApKS5zZXRGdWxsWWVhcigxOTcwLCAwLCAxKTsKICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNTdHJpbmcodmFsdWUpICYmIDAgPT09IHZhbHVlLmxlbmd0aCkgeyAvLyBSZXNldCB0aW1lCiAgICAgICAgICB0aW1lID0ga2V5ID09PSAnbWluVGltZScgPyAtSW5maW5pdHkgOiArSW5maW5pdHk7CiAgICAgICAgfSBlbHNlIHsgCiAgICAgICAgICB0aW1lID0gJGRhdGVQYXJzZXIucGFyc2UodmFsdWUsIG5ldyBEYXRlKDE5NzAsIDAsIDEsIDApKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aW1lOwogICAgICB9OwoKICAgICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnMKCiAgICAgIGZ1bmN0aW9uIHNldE1hcEZvckZvcm1hdChmb3JtYXQpIHsKICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNldEZuTWFwKSwgaTsKICAgICAgICB2YXIgbWFwID0gW10sIHNvcnRlZE1hcCA9IFtdOwogICAgICAgIC8vIE1hcCB0byBzZXRGbgogICAgICAgIHZhciBjbG9uZWRGb3JtYXQgPSBmb3JtYXQ7CiAgICAgICAgZm9yKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYoZm9ybWF0LnNwbGl0KGtleXNbaV0pLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgdmFyIGluZGV4ID0gY2xvbmVkRm9ybWF0LnNlYXJjaChrZXlzW2ldKTsKICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnNwbGl0KGtleXNbaV0pLmpvaW4oJycpOwogICAgICAgICAgICBpZihzZXRGbk1hcFtrZXlzW2ldXSkgewogICAgICAgICAgICAgIG1hcFtpbmRleF0gPSBzZXRGbk1hcFtrZXlzW2ldXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvLyBTb3J0IHJlc3VsdCBtYXAKICAgICAgICBhbmd1bGFyLmZvckVhY2gobWFwLCBmdW5jdGlvbih2KSB7CiAgICAgICAgICAvLyBjb25kaXRpb25hbCByZXF1aXJlZCBzaW5jZSBhbmd1bGFyLmZvckVhY2ggYnJva2UgYXJvdW5kIHYxLjIuMjEKICAgICAgICAgIC8vIHJlbGF0ZWQgcHI6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC84NTI1CiAgICAgICAgICBpZih2KSBzb3J0ZWRNYXAucHVzaCh2KTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gc29ydGVkTWFwOwogICAgICB9CgogICAgICBmdW5jdGlvbiBlc2NhcGVSZXNlcnZlZFN5bWJvbHModGV4dCkgewogICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1wvL2csICdbXFwvXScpLnJlcGxhY2UoJy8tL2cnLCAnWy1dJykucmVwbGFjZSgvXC4vZywgJ1suXScpLnJlcGxhY2UoL1xccy9nLCAnW1xcc10nKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gcmVnRXhwRm9yRm9ybWF0KGZvcm1hdCkgewogICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVnRXhwTWFwKSwgaTsKCiAgICAgICAgdmFyIHJlID0gZm9ybWF0OwogICAgICAgIC8vIEFic3RyYWN0IHJlcGxhY2VzIHRvIGF2b2lkIGNvbGxpc2lvbnMKICAgICAgICBmb3IoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICByZSA9IHJlLnNwbGl0KGtleXNbaV0pLmpvaW4oJyR7JyArIGkgKyAnfScpOwogICAgICAgIH0KICAgICAgICAvLyBSZXBsYWNlIGFic3RyYWN0ZWQgdmFsdWVzCiAgICAgICAgZm9yKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgcmUgPSByZS5zcGxpdCgnJHsnICsgaSArICd9Jykuam9pbignKCcgKyByZWdFeHBNYXBba2V5c1tpXV0gKyAnKScpOwogICAgICAgIH0KICAgICAgICBmb3JtYXQgPSBlc2NhcGVSZXNlcnZlZFN5bWJvbHMoZm9ybWF0KTsKCiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcmUgKyAnJCcsIFsnaSddKTsKICAgICAgfQoKICAgICAgJGRhdGVQYXJzZXIuaW5pdCgpOwogICAgICByZXR1cm4gJGRhdGVQYXJzZXI7CgogICAgfTsKCiAgICByZXR1cm4gRGF0ZVBhcnNlckZhY3Rvcnk7CgogIH1dOwoKfV0pOwoKLy8gU291cmNlOiBkZWJvdW5jZS5qcwphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAuaGVscGVycy5kZWJvdW5jZScsIFtdKQoKLy8gQHNvdXJjZSBqYXNoa2VuYXMvdW5kZXJzY29yZQovLyBAdXJsIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9ibG9iLzEuNS4yL3VuZGVyc2NvcmUuanMjTDY5MwouZmFjdG9yeSgnZGVib3VuY2UnLCBbIiR0aW1lb3V0IiwgZnVuY3Rpb24oJHRpbWVvdXQpIHsKICByZXR1cm4gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7CiAgICB2YXIgdGltZW91dCA9IG51bGw7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBjb250ZXh0ID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzLAogICAgICAgIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7CiAgICAgIGlmKHRpbWVvdXQpIHsKICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZW91dCk7CiAgICAgIH0KICAgICAgdGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uIGxhdGVyKCkgewogICAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICAgIGlmKCFpbW1lZGlhdGUpIHsKICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICAgICAgfQogICAgICB9LCB3YWl0LCBmYWxzZSk7CiAgICAgIGlmKGNhbGxOb3cpIHsKICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICB9CiAgICAgIHJldHVybiB0aW1lb3V0OwogICAgfTsKICB9Owp9XSkKCgovLyBAc291cmNlIGphc2hrZW5hcy91bmRlcnNjb3JlCi8vIEB1cmwgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL2Jsb2IvMS41LjIvdW5kZXJzY29yZS5qcyNMNjYxCi5mYWN0b3J5KCd0aHJvdHRsZScsIFsiJHRpbWVvdXQiLCBmdW5jdGlvbigkdGltZW91dCkgewogIHJldHVybiBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7CiAgICB2YXIgdGltZW91dCA9IG51bGw7CiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICB2YXIgY29udGV4dCA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgICAgaWYoIXRpbWVvdXQpIHsKICAgICAgICBpZihvcHRpb25zLmxlYWRpbmcgIT09IGZhbHNlKSB7CiAgICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICAgIH0KICAgICAgICB0aW1lb3V0ID0gJHRpbWVvdXQoZnVuY3Rpb24gbGF0ZXIoKSB7CiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICAgIGlmKG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7CiAgICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICAgICAgICB9CiAgICAgICAgfSwgd2FpdCwgZmFsc2UpOwogICAgICB9CiAgICB9OwogIH07Cn1dKTsKCi8vIFNvdXJjZTogZGltZW5zaW9ucy5qcwphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAuaGVscGVycy5kaW1lbnNpb25zJywgW10pCgogIC5mYWN0b3J5KCdkaW1lbnNpb25zJywgWyIkZG9jdW1lbnQiLCAiJHdpbmRvdyIsIGZ1bmN0aW9uKCRkb2N1bWVudCwgJHdpbmRvdykgewoKICAgIHZhciBqcUxpdGUgPSBhbmd1bGFyLmVsZW1lbnQ7CiAgICB2YXIgZm4gPSB7fTsKCiAgICAvKioKICAgICAqIFRlc3QgdGhlIGVsZW1lbnQgbm9kZU5hbWUKICAgICAqIEBwYXJhbSBlbGVtZW50CiAgICAgKiBAcGFyYW0gbmFtZQogICAgICovCiAgICB2YXIgbm9kZU5hbWUgPSBmbi5ub2RlTmFtZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUpIHsKICAgICAgcmV0dXJuIGVsZW1lbnQubm9kZU5hbWUgJiYgZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7CiAgICB9OwoKICAgIC8qKgogICAgICogUmV0dXJucyB0aGUgZWxlbWVudCBjb21wdXRlZCBzdHlsZQogICAgICogQHBhcmFtIGVsZW1lbnQKICAgICAqIEBwYXJhbSBwcm9wCiAgICAgKiBAcGFyYW0gZXh0cmEKICAgICAqLwogICAgZm4uY3NzID0gZnVuY3Rpb24oZWxlbWVudCwgcHJvcCwgZXh0cmEpIHsKICAgICAgdmFyIHZhbHVlOwogICAgICBpZiAoZWxlbWVudC5jdXJyZW50U3R5bGUpIHsgLy9JRQogICAgICAgIHZhbHVlID0gZWxlbWVudC5jdXJyZW50U3R5bGVbcHJvcF07CiAgICAgIH0gZWxzZSBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHsKICAgICAgICB2YWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW3Byb3BdOwogICAgICB9IGVsc2UgewogICAgICAgIHZhbHVlID0gZWxlbWVudC5zdHlsZVtwcm9wXTsKICAgICAgfQogICAgICByZXR1cm4gZXh0cmEgPT09IHRydWUgPyBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwIDogdmFsdWU7CiAgICB9OwoKICAgIC8qKgogICAgICogUHJvdmlkZXMgcmVhZC1vbmx5IGVxdWl2YWxlbnQgb2YgalF1ZXJ5J3Mgb2Zmc2V0IGZ1bmN0aW9uOgogICAgICogQHJlcXVpcmVkLWJ5IGJvb3RzdHJhcC10b29sdGlwLCBib290c3RyYXAtYWZmaXgKICAgICAqIEB1cmwgaHR0cDovL2FwaS5qcXVlcnkuY29tL29mZnNldC8KICAgICAqIEBwYXJhbSBlbGVtZW50CiAgICAgKi8KICAgIGZuLm9mZnNldCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgdmFyIGJveFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICB2YXIgZG9jRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDsKICAgICAgcmV0dXJuIHsKICAgICAgICB3aWR0aDogYm94UmVjdC53aWR0aCB8fCBlbGVtZW50Lm9mZnNldFdpZHRoLAogICAgICAgIGhlaWdodDogYm94UmVjdC5oZWlnaHQgfHwgZWxlbWVudC5vZmZzZXRIZWlnaHQsCiAgICAgICAgdG9wOiBib3hSZWN0LnRvcCArICh3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jRWxlbWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSAtIChkb2NFbGVtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRUb3AgfHwgMCksCiAgICAgICAgbGVmdDogYm94UmVjdC5sZWZ0ICsgKHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2NFbGVtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KSAtIChkb2NFbGVtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRMZWZ0IHx8IDApCiAgICAgIH07CiAgICB9OwoKICAgIC8qKgogICAgICogUHJvdmlkZXMgcmVhZC1vbmx5IGVxdWl2YWxlbnQgb2YgalF1ZXJ5J3MgcG9zaXRpb24gZnVuY3Rpb24KICAgICAqIEByZXF1aXJlZC1ieSBib290c3RyYXAtdG9vbHRpcCwgYm9vdHN0cmFwLWFmZml4CiAgICAgKiBAdXJsIGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmZzZXQvCiAgICAgKiBAcGFyYW0gZWxlbWVudAogICAgICovCiAgICBmbi5wb3NpdGlvbiA9IGZ1bmN0aW9uKGVsZW1lbnQpIHsKCiAgICAgIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0ge3RvcDogMCwgbGVmdDogMH0sCiAgICAgICAgICBvZmZzZXRQYXJlbnRFbGVtZW50LAogICAgICAgICAgb2Zmc2V0OwoKICAgICAgLy8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSwgYmVjYXVzZSBpdCBpcyBpdCdzIG9ubHkgb2Zmc2V0IHBhcmVudAogICAgICBpZiAoZm4uY3NzKGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7CgogICAgICAgIC8vIFdlIGFzc3VtZSB0aGF0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyBhdmFpbGFibGUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZAogICAgICAgIG9mZnNldCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CgogICAgICB9IGVsc2UgewoKICAgICAgICAvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudEVsZW1lbnQKICAgICAgICBvZmZzZXRQYXJlbnRFbGVtZW50ID0gb2Zmc2V0UGFyZW50KGVsZW1lbnQpOwogICAgICAgIG9mZnNldCA9IGZuLm9mZnNldChlbGVtZW50KTsKCiAgICAgICAgLy8gR2V0IGNvcnJlY3Qgb2Zmc2V0cwogICAgICAgIG9mZnNldCA9IGZuLm9mZnNldChlbGVtZW50KTsKICAgICAgICBpZiAoIW5vZGVOYW1lKG9mZnNldFBhcmVudEVsZW1lbnQsICdodG1sJykpIHsKICAgICAgICAgIG9mZnNldFBhcmVudFJlY3QgPSBmbi5vZmZzZXQob2Zmc2V0UGFyZW50RWxlbWVudCk7CiAgICAgICAgfQoKICAgICAgICAvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnMKICAgICAgICBvZmZzZXRQYXJlbnRSZWN0LnRvcCArPSBmbi5jc3Mob2Zmc2V0UGFyZW50RWxlbWVudCwgJ2JvcmRlclRvcFdpZHRoJywgdHJ1ZSk7CiAgICAgICAgb2Zmc2V0UGFyZW50UmVjdC5sZWZ0ICs9IGZuLmNzcyhvZmZzZXRQYXJlbnRFbGVtZW50LCAnYm9yZGVyTGVmdFdpZHRoJywgdHJ1ZSk7CiAgICAgIH0KCiAgICAgIC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnMKICAgICAgcmV0dXJuIHsKICAgICAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCwKICAgICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0LAogICAgICAgIHRvcDogb2Zmc2V0LnRvcCAtIG9mZnNldFBhcmVudFJlY3QudG9wIC0gZm4uY3NzKGVsZW1lbnQsICdtYXJnaW5Ub3AnLCB0cnVlKSwKICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdCAtIG9mZnNldFBhcmVudFJlY3QubGVmdCAtIGZuLmNzcyhlbGVtZW50LCAnbWFyZ2luTGVmdCcsIHRydWUpCiAgICAgIH07CgogICAgfTsKCiAgICAvKioKICAgICAqIFJldHVybnMgdGhlIGNsb3Nlc3QsIG5vbi1zdGF0aWNhbGx5IHBvc2l0aW9uZWQgb2Zmc2V0UGFyZW50IG9mIGEgZ2l2ZW4gZWxlbWVudAogICAgICogQHJlcXVpcmVkLWJ5IGZuLnBvc2l0aW9uCiAgICAgKiBAcGFyYW0gZWxlbWVudAogICAgICovCiAgICB2YXIgb2Zmc2V0UGFyZW50ID0gZnVuY3Rpb24gb2Zmc2V0UGFyZW50RWxlbWVudChlbGVtZW50KSB7CiAgICAgIHZhciBkb2NFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50OwogICAgICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgZG9jRWxlbWVudDsKICAgICAgaWYobm9kZU5hbWUob2Zmc2V0UGFyZW50LCAnI2RvY3VtZW50JykpIHJldHVybiBkb2NFbGVtZW50LmRvY3VtZW50RWxlbWVudDsKICAgICAgd2hpbGUob2Zmc2V0UGFyZW50ICYmICFub2RlTmFtZShvZmZzZXRQYXJlbnQsICdodG1sJykgJiYgZm4uY3NzKG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7CiAgICAgICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDsKICAgICAgfQogICAgICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY0VsZW1lbnQuZG9jdW1lbnRFbGVtZW50OwogICAgfTsKCiAgICAvKioKICAgICAqIFByb3ZpZGVzIGVxdWl2YWxlbnQgb2YgalF1ZXJ5J3MgaGVpZ2h0IGZ1bmN0aW9uCiAgICAgKiBAcmVxdWlyZWQtYnkgYm9vdHN0cmFwLWFmZml4CiAgICAgKiBAdXJsIGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9oZWlnaHQvCiAgICAgKiBAcGFyYW0gZWxlbWVudAogICAgICogQHBhcmFtIG91dGVyCiAgICAgKi8KICAgIGZuLmhlaWdodCA9IGZ1bmN0aW9uKGVsZW1lbnQsIG91dGVyKSB7CiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0OwogICAgICBpZihvdXRlcikgewogICAgICAgIHZhbHVlICs9IGZuLmNzcyhlbGVtZW50LCAnbWFyZ2luVG9wJywgdHJ1ZSkgKyBmbi5jc3MoZWxlbWVudCwgJ21hcmdpbkJvdHRvbScsIHRydWUpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhbHVlIC09IGZuLmNzcyhlbGVtZW50LCAncGFkZGluZ1RvcCcsIHRydWUpICsgZm4uY3NzKGVsZW1lbnQsICdwYWRkaW5nQm90dG9tJywgdHJ1ZSkgKyBmbi5jc3MoZWxlbWVudCwgJ2JvcmRlclRvcFdpZHRoJywgdHJ1ZSkgKyBmbi5jc3MoZWxlbWVudCwgJ2JvcmRlckJvdHRvbVdpZHRoJywgdHJ1ZSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHZhbHVlOwogICAgfTsKCiAgICAvKioKICAgICAqIFByb3ZpZGVzIGVxdWl2YWxlbnQgb2YgalF1ZXJ5J3Mgd2lkdGggZnVuY3Rpb24KICAgICAqIEByZXF1aXJlZC1ieSBib290c3RyYXAtYWZmaXgKICAgICAqIEB1cmwgaHR0cDovL2FwaS5qcXVlcnkuY29tL3dpZHRoLwogICAgICogQHBhcmFtIGVsZW1lbnQKICAgICAqIEBwYXJhbSBvdXRlcgogICAgICovCiAgICBmbi53aWR0aCA9IGZ1bmN0aW9uKGVsZW1lbnQsIG91dGVyKSB7CiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7CiAgICAgIGlmKG91dGVyKSB7CiAgICAgICAgdmFsdWUgKz0gZm4uY3NzKGVsZW1lbnQsICdtYXJnaW5MZWZ0JywgdHJ1ZSkgKyBmbi5jc3MoZWxlbWVudCwgJ21hcmdpblJpZ2h0JywgdHJ1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFsdWUgLT0gZm4uY3NzKGVsZW1lbnQsICdwYWRkaW5nTGVmdCcsIHRydWUpICsgZm4uY3NzKGVsZW1lbnQsICdwYWRkaW5nUmlnaHQnLCB0cnVlKSArIGZuLmNzcyhlbGVtZW50LCAnYm9yZGVyTGVmdFdpZHRoJywgdHJ1ZSkgKyBmbi5jc3MoZWxlbWVudCwgJ2JvcmRlclJpZ2h0V2lkdGgnLCB0cnVlKTsKICAgICAgfQogICAgICByZXR1cm4gdmFsdWU7CiAgICB9OwoKICAgIHJldHVybiBmbjsKCiAgfV0pOwoKLy8gU291cmNlOiBwYXJzZS1vcHRpb25zLmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcC5oZWxwZXJzLnBhcnNlT3B0aW9ucycsIFtdKQoKICAucHJvdmlkZXIoJyRwYXJzZU9wdGlvbnMnLCBmdW5jdGlvbigpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0gewogICAgICByZWdleHA6IC9eXHMqKC4qPykoPzpccythc1xzKyguKj8pKT8oPzpccytncm91cFxzK2J5XHMrKC4qKSk/XHMrZm9yXHMrKD86KFtcJFx3XVtcJFx3XSopfCg/OlwoXHMqKFtcJFx3XVtcJFx3XSopXHMqLFxzKihbXCRcd11bXCRcd10qKVxzKlwpKSlccytpblxzKyguKj8pKD86XHMrdHJhY2tccytieVxzKyguKj8pKT8kLwogICAgfTsKCiAgICB0aGlzLiRnZXQgPSBbIiRwYXJzZSIsICIkcSIsIGZ1bmN0aW9uKCRwYXJzZSwgJHEpIHsKCiAgICAgIGZ1bmN0aW9uIFBhcnNlT3B0aW9uc0ZhY3RvcnkoYXR0ciwgY29uZmlnKSB7CgogICAgICAgIHZhciAkcGFyc2VPcHRpb25zID0ge307CgogICAgICAgIC8vIENvbW1vbiB2YXJzCiAgICAgICAgdmFyIG9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgZGVmYXVsdHMsIGNvbmZpZyk7CiAgICAgICAgJHBhcnNlT3B0aW9ucy4kdmFsdWVzID0gW107CgogICAgICAgIC8vIFByaXZhdGUgdmFycwogICAgICAgIHZhciBtYXRjaCwgZGlzcGxheUZuLCB2YWx1ZU5hbWUsIGtleU5hbWUsIGdyb3VwQnlGbiwgdmFsdWVGbiwgdmFsdWVzRm47CgogICAgICAgICRwYXJzZU9wdGlvbnMuaW5pdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgJHBhcnNlT3B0aW9ucy4kbWF0Y2ggPSBtYXRjaCA9IGF0dHIubWF0Y2gob3B0aW9ucy5yZWdleHApOwogICAgICAgICAgZGlzcGxheUZuID0gJHBhcnNlKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSwKICAgICAgICAgIHZhbHVlTmFtZSA9IG1hdGNoWzRdIHx8IG1hdGNoWzZdLAogICAgICAgICAga2V5TmFtZSA9IG1hdGNoWzVdLAogICAgICAgICAgZ3JvdXBCeUZuID0gJHBhcnNlKG1hdGNoWzNdIHx8ICcnKSwKICAgICAgICAgIHZhbHVlRm4gPSAkcGFyc2UobWF0Y2hbMl0gPyBtYXRjaFsxXSA6IHZhbHVlTmFtZSksCiAgICAgICAgICB2YWx1ZXNGbiA9ICRwYXJzZShtYXRjaFs3XSk7CiAgICAgICAgfTsKCiAgICAgICAgJHBhcnNlT3B0aW9ucy52YWx1ZXNGbiA9IGZ1bmN0aW9uKHNjb3BlLCBjb250cm9sbGVyKSB7CiAgICAgICAgICByZXR1cm4gJHEud2hlbih2YWx1ZXNGbihzY29wZSwgY29udHJvbGxlcikpCiAgICAgICAgICAudGhlbihmdW5jdGlvbih2YWx1ZXMpIHsKICAgICAgICAgICAgJHBhcnNlT3B0aW9ucy4kdmFsdWVzID0gdmFsdWVzID8gcGFyc2VWYWx1ZXModmFsdWVzLCBzY29wZSkgOiB7fTsKICAgICAgICAgICAgcmV0dXJuICRwYXJzZU9wdGlvbnMuJHZhbHVlczsKICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgICRwYXJzZU9wdGlvbnMuZGlzcGxheVZhbHVlID0gZnVuY3Rpb24obW9kZWxWYWx1ZSkgewogICAgICAgICAgdmFyIHNjb3BlID0ge307CiAgICAgICAgICBzY29wZVt2YWx1ZU5hbWVdID0gbW9kZWxWYWx1ZTsKICAgICAgICAgIHJldHVybiBkaXNwbGF5Rm4oc2NvcGUpOwogICAgICAgIH07CgogICAgICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zCgogICAgICAgIGZ1bmN0aW9uIHBhcnNlVmFsdWVzKHZhbHVlcywgc2NvcGUpIHsKICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uKG1hdGNoLCBpbmRleCkgewogICAgICAgICAgICB2YXIgbG9jYWxzID0ge30sIGxhYmVsLCB2YWx1ZTsKICAgICAgICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSBtYXRjaDsKICAgICAgICAgICAgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVGbihzY29wZSwgbG9jYWxzKTsKICAgICAgICAgICAgcmV0dXJuIHtsYWJlbDogbGFiZWwsIHZhbHVlOiB2YWx1ZSwgaW5kZXg6IGluZGV4fTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgJHBhcnNlT3B0aW9ucy5pbml0KCk7CiAgICAgICAgcmV0dXJuICRwYXJzZU9wdGlvbnM7CgogICAgICB9CgogICAgICByZXR1cm4gUGFyc2VPcHRpb25zRmFjdG9yeTsKCiAgICB9XTsKCiAgfSk7CgovLyBTb3VyY2U6IHJhZi5qcwooYW5ndWxhci52ZXJzaW9uLm1pbm9yIDwgMyAmJiBhbmd1bGFyLnZlcnNpb24uZG90IDwgMTQpICYmIGFuZ3VsYXIubW9kdWxlKCduZycpCgouZmFjdG9yeSgnJCRyQUYnLCBbIiR3aW5kb3ciLCAiJHRpbWVvdXQiLCBmdW5jdGlvbigkd2luZG93LCAkdGltZW91dCkgewoKICB2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gJHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7CgogIHZhciBjYW5jZWxBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lOwoKICB2YXIgcmFmU3VwcG9ydGVkID0gISFyZXF1ZXN0QW5pbWF0aW9uRnJhbWU7CiAgdmFyIHJhZiA9IHJhZlN1cHBvcnRlZCA/CiAgICBmdW5jdGlvbihmbikgewogICAgICB2YXIgaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pOwogICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpOwogICAgICB9OwogICAgfSA6CiAgICBmdW5jdGlvbihmbikgewogICAgICB2YXIgdGltZXIgPSAkdGltZW91dChmbiwgMTYuNjYsIGZhbHNlKTsgLy8gMTAwMCAvIDYwID0gMTYuNjY2CiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZXIpOwogICAgICB9OwogICAgfTsKCiAgcmFmLnN1cHBvcnRlZCA9IHJhZlN1cHBvcnRlZDsKCiAgcmV0dXJuIHJhZjsKCn1dKTsKCi8vIC5mYWN0b3J5KCckJGFuaW1hdGVSZWZsb3cnLCBmdW5jdGlvbigkJHJBRiwgJGRvY3VtZW50KSB7CgovLyAgIHZhciBib2R5RWwgPSAkZG9jdW1lbnRbMF0uYm9keTsKCi8vICAgcmV0dXJuIGZ1bmN0aW9uKGZuKSB7Ci8vICAgICAvL3RoZSByZXR1cm5lZCBmdW5jdGlvbiBhY3RzIGFzIHRoZSBjYW5jZWxsYXRpb24gZnVuY3Rpb24KLy8gICAgIHJldHVybiAkJHJBRihmdW5jdGlvbigpIHsKLy8gICAgICAgLy90aGUgbGluZSBiZWxvdyB3aWxsIGZvcmNlIHRoZSBicm93c2VyIHRvIHBlcmZvcm0gYSByZXBhaW50Ci8vICAgICAgIC8vc28gdGhhdCBhbGwgdGhlIGFuaW1hdGVkIGVsZW1lbnRzIHdpdGhpbiB0aGUgYW5pbWF0aW9uIGZyYW1lCi8vICAgICAgIC8vd2lsbCBiZSBwcm9wZXJseSB1cGRhdGVkIGFuZCBkcmF3biBvbiBzY3JlZW4uIFRoaXMgaXMKLy8gICAgICAgLy9yZXF1aXJlZCB0byBwZXJmb3JtIG11bHRpLWNsYXNzIENTUyBiYXNlZCBhbmltYXRpb25zIHdpdGgKLy8gICAgICAgLy9GaXJlZm94LiBETyBOT1QgUkVNT1ZFIFRISVMgTElORS4KLy8gICAgICAgdmFyIGEgPSBib2R5RWwub2Zmc2V0V2lkdGggKyAxOwovLyAgICAgICBmbigpOwovLyAgICAgfSk7Ci8vICAgfTsKCi8vIH0pOwoKLy8gU291cmNlOiBkcm9wZG93bi5qcwphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAuZHJvcGRvd24nLCBbJ21nY3JlYS5uZ1N0cmFwLnRvb2x0aXAnXSkKCiAgLnByb3ZpZGVyKCckZHJvcGRvd24nLCBmdW5jdGlvbigpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0gewogICAgICBhbmltYXRpb246ICdhbS1mYWRlJywKICAgICAgcHJlZml4Q2xhc3M6ICdkcm9wZG93bicsCiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbS1sZWZ0JywKICAgICAgdGVtcGxhdGU6ICdkcm9wZG93bi9kcm9wZG93bi50cGwuaHRtbCcsCiAgICAgIHRyaWdnZXI6ICdjbGljaycsCiAgICAgIGNvbnRhaW5lcjogZmFsc2UsCiAgICAgIGtleWJvYXJkOiB0cnVlLAogICAgICBodG1sOiBmYWxzZSwKICAgICAgZGVsYXk6IDAKICAgIH07CgogICAgdGhpcy4kZ2V0ID0gWyIkd2luZG93IiwgIiRyb290U2NvcGUiLCAiJHRvb2x0aXAiLCBmdW5jdGlvbigkd2luZG93LCAkcm9vdFNjb3BlLCAkdG9vbHRpcCkgewoKICAgICAgdmFyIGJvZHlFbCA9IGFuZ3VsYXIuZWxlbWVudCgkd2luZG93LmRvY3VtZW50LmJvZHkpOwogICAgICB2YXIgbWF0Y2hlc1NlbGVjdG9yID0gRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUub01hdGNoZXNTZWxlY3RvcjsKCiAgICAgIGZ1bmN0aW9uIERyb3Bkb3duRmFjdG9yeShlbGVtZW50LCBjb25maWcpIHsKCiAgICAgICAgdmFyICRkcm9wZG93biA9IHt9OwoKICAgICAgICAvLyBDb21tb24gdmFycwogICAgICAgIHZhciBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sIGRlZmF1bHRzLCBjb25maWcpOwogICAgICAgIHZhciBzY29wZSA9ICRkcm9wZG93bi4kc2NvcGUgPSBvcHRpb25zLnNjb3BlICYmIG9wdGlvbnMuc2NvcGUuJG5ldygpIHx8ICRyb290U2NvcGUuJG5ldygpOwoKICAgICAgICAkZHJvcGRvd24gPSAkdG9vbHRpcChlbGVtZW50LCBvcHRpb25zKTsKICAgICAgICB2YXIgcGFyZW50RWwgPSBlbGVtZW50LnBhcmVudCgpOwoKICAgICAgICAvLyBQcm90ZWN0ZWQgbWV0aG9kcwoKICAgICAgICAkZHJvcGRvd24uJG9uS2V5RG93biA9IGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgaWYgKCEvKDM4fDQwKS8udGVzdChldnQua2V5Q29kZSkpIHJldHVybjsKICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwoKICAgICAgICAgIC8vIFJldHJpZXZlIGZvY3VzZWQgaW5kZXgKICAgICAgICAgIHZhciBpdGVtcyA9IGFuZ3VsYXIuZWxlbWVudCgkZHJvcGRvd24uJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvckFsbCgnbGk6bm90KC5kaXZpZGVyKSBhJykpOwogICAgICAgICAgaWYoIWl0ZW1zLmxlbmd0aCkgcmV0dXJuOwogICAgICAgICAgdmFyIGluZGV4OwogICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihlbCwgaSkgewogICAgICAgICAgICBpZihtYXRjaGVzU2VsZWN0b3IgJiYgbWF0Y2hlc1NlbGVjdG9yLmNhbGwoZWwsICc6Zm9jdXMnKSkgaW5kZXggPSBpOwogICAgICAgICAgfSk7CgogICAgICAgICAgLy8gTmF2aWdhdGUgd2l0aCBrZXlib2FyZAogICAgICAgICAgaWYoZXZ0LmtleUNvZGUgPT09IDM4ICYmIGluZGV4ID4gMCkgaW5kZXgtLTsKICAgICAgICAgIGVsc2UgaWYoZXZ0LmtleUNvZGUgPT09IDQwICYmIGluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMSkgaW5kZXgrKzsKICAgICAgICAgIGVsc2UgaWYoYW5ndWxhci5pc1VuZGVmaW5lZChpbmRleCkpIGluZGV4ID0gMDsKICAgICAgICAgIGl0ZW1zLmVxKGluZGV4KVswXS5mb2N1cygpOwoKICAgICAgICB9OwoKICAgICAgICAvLyBPdmVycmlkZXMKCiAgICAgICAgdmFyIHNob3cgPSAkZHJvcGRvd24uc2hvdzsKICAgICAgICAkZHJvcGRvd24uc2hvdyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgc2hvdygpOwogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgb3B0aW9ucy5rZXlib2FyZCAmJiAkZHJvcGRvd24uJGVsZW1lbnQub24oJ2tleWRvd24nLCAkZHJvcGRvd24uJG9uS2V5RG93bik7CiAgICAgICAgICAgIGJvZHlFbC5vbignY2xpY2snLCBvbkJvZHlDbGljayk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHBhcmVudEVsLmhhc0NsYXNzKCdkcm9wZG93bicpICYmIHBhcmVudEVsLmFkZENsYXNzKCdvcGVuJyk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGhpZGUgPSAkZHJvcGRvd24uaGlkZTsKICAgICAgICAkZHJvcGRvd24uaGlkZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYoISRkcm9wZG93bi4kaXNTaG93bikgcmV0dXJuOwogICAgICAgICAgb3B0aW9ucy5rZXlib2FyZCAmJiAkZHJvcGRvd24uJGVsZW1lbnQub2ZmKCdrZXlkb3duJywgJGRyb3Bkb3duLiRvbktleURvd24pOwogICAgICAgICAgYm9keUVsLm9mZignY2xpY2snLCBvbkJvZHlDbGljayk7CiAgICAgICAgICBwYXJlbnRFbC5oYXNDbGFzcygnZHJvcGRvd24nKSAmJiBwYXJlbnRFbC5yZW1vdmVDbGFzcygnb3BlbicpOwogICAgICAgICAgaGlkZSgpOwogICAgICAgIH07CgogICAgICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zCgogICAgICAgIGZ1bmN0aW9uIG9uQm9keUNsaWNrKGV2dCkgewogICAgICAgICAgaWYoZXZ0LnRhcmdldCA9PT0gZWxlbWVudFswXSkgcmV0dXJuOwogICAgICAgICAgcmV0dXJuIGV2dC50YXJnZXQgIT09IGVsZW1lbnRbMF0gJiYgJGRyb3Bkb3duLmhpZGUoKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkZHJvcGRvd247CgogICAgICB9CgogICAgICByZXR1cm4gRHJvcGRvd25GYWN0b3J5OwoKICAgIH1dOwoKICB9KQoKICAuZGlyZWN0aXZlKCdic0Ryb3Bkb3duJywgWyIkd2luZG93IiwgIiRzY2UiLCAiJGRyb3Bkb3duIiwgZnVuY3Rpb24oJHdpbmRvdywgJHNjZSwgJGRyb3Bkb3duKSB7CgogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdFQUMnLAogICAgICBzY29wZTogdHJ1ZSwKICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIHRyYW5zY2x1c2lvbikgewoKICAgICAgICAvLyBEaXJlY3RpdmUgb3B0aW9ucwogICAgICAgIHZhciBvcHRpb25zID0ge3Njb3BlOiBzY29wZX07CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKFsncGxhY2VtZW50JywgJ2NvbnRhaW5lcicsICdkZWxheScsICd0cmlnZ2VyJywgJ2tleWJvYXJkJywgJ2h0bWwnLCAnYW5pbWF0aW9uJywgJ3RlbXBsYXRlJ10sIGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgaWYoYW5ndWxhci5pc0RlZmluZWQoYXR0cltrZXldKSkgb3B0aW9uc1trZXldID0gYXR0cltrZXldOwogICAgICAgIH0pOwoKICAgICAgICAvLyBTdXBwb3J0IHNjb3BlIGFzIGFuIG9iamVjdAogICAgICAgIGF0dHIuYnNEcm9wZG93biAmJiBzY29wZS4kd2F0Y2goYXR0ci5ic0Ryb3Bkb3duLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgIHNjb3BlLmNvbnRlbnQgPSBuZXdWYWx1ZTsKICAgICAgICB9LCB0cnVlKTsKCiAgICAgICAgLy8gVmlzaWJpbGl0eSBiaW5kaW5nIHN1cHBvcnQKICAgICAgICBhdHRyLmJzU2hvdyAmJiBzY29wZS4kd2F0Y2goYXR0ci5ic1Nob3csIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgaWYoIWRyb3Bkb3duIHx8ICFhbmd1bGFyLmlzRGVmaW5lZChuZXdWYWx1ZSkpIHJldHVybjsKICAgICAgICAgIGlmKGFuZ3VsYXIuaXNTdHJpbmcobmV3VmFsdWUpKSBuZXdWYWx1ZSA9ICEhbmV3VmFsdWUubWF0Y2goL3RydWV8LD8oZHJvcGRvd24pLD8vaSk7CiAgICAgICAgICBuZXdWYWx1ZSA9PT0gdHJ1ZSA/IGRyb3Bkb3duLnNob3coKSA6IGRyb3Bkb3duLmhpZGUoKTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBkcm9wZG93bgogICAgICAgIHZhciBkcm9wZG93biA9ICRkcm9wZG93bihlbGVtZW50LCBvcHRpb25zKTsKCiAgICAgICAgLy8gR2FyYmFnZSBjb2xsZWN0aW9uCiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKGRyb3Bkb3duKSBkcm9wZG93bi5kZXN0cm95KCk7CiAgICAgICAgICBvcHRpb25zID0gbnVsbDsKICAgICAgICAgIGRyb3Bkb3duID0gbnVsbDsKICAgICAgICB9KTsKCiAgICAgIH0KICAgIH07CgogIH1dKTsKCi8vIFNvdXJjZTogbW9kYWwuanMKYW5ndWxhci5tb2R1bGUoJ21nY3JlYS5uZ1N0cmFwLm1vZGFsJywgWydtZ2NyZWEubmdTdHJhcC5oZWxwZXJzLmRpbWVuc2lvbnMnXSkKCiAgLnByb3ZpZGVyKCckbW9kYWwnLCBmdW5jdGlvbigpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0gewogICAgICBhbmltYXRpb246ICdhbS1mYWRlJywKICAgICAgYmFja2Ryb3BBbmltYXRpb246ICdhbS1mYWRlJywKICAgICAgcHJlZml4Q2xhc3M6ICdtb2RhbCcsCiAgICAgIHByZWZpeEV2ZW50OiAnbW9kYWwnLAogICAgICBwbGFjZW1lbnQ6ICd0b3AnLAogICAgICB0ZW1wbGF0ZTogJ21vZGFsL21vZGFsLnRwbC5odG1sJywKICAgICAgY29udGVudFRlbXBsYXRlOiBmYWxzZSwKICAgICAgY29udGFpbmVyOiBmYWxzZSwKICAgICAgZWxlbWVudDogbnVsbCwKICAgICAgYmFja2Ryb3A6IHRydWUsCiAgICAgIGtleWJvYXJkOiB0cnVlLAogICAgICBodG1sOiBmYWxzZSwKICAgICAgc2hvdzogdHJ1ZQogICAgfTsKCiAgICB0aGlzLiRnZXQgPSBbIiR3aW5kb3ciLCAiJHJvb3RTY29wZSIsICIkY29tcGlsZSIsICIkcSIsICIkdGVtcGxhdGVDYWNoZSIsICIkaHR0cCIsICIkYW5pbWF0ZSIsICIkdGltZW91dCIsICIkc2NlIiwgImRpbWVuc2lvbnMiLCBmdW5jdGlvbigkd2luZG93LCAkcm9vdFNjb3BlLCAkY29tcGlsZSwgJHEsICR0ZW1wbGF0ZUNhY2hlLCAkaHR0cCwgJGFuaW1hdGUsICR0aW1lb3V0LCAkc2NlLCBkaW1lbnNpb25zKSB7CgogICAgICB2YXIgZm9yRWFjaCA9IGFuZ3VsYXIuZm9yRWFjaDsKICAgICAgdmFyIHRyaW0gPSBTdHJpbmcucHJvdG90eXBlLnRyaW07CiAgICAgIHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAkd2luZG93LnNldFRpbWVvdXQ7CiAgICAgIHZhciBib2R5RWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgkd2luZG93LmRvY3VtZW50LmJvZHkpOwogICAgICB2YXIgaHRtbFJlcGxhY2VSZWdFeHAgPSAvbmctYmluZD0iL2lnOwoKICAgICAgZnVuY3Rpb24gTW9kYWxGYWN0b3J5KGNvbmZpZykgewoKICAgICAgICB2YXIgJG1vZGFsID0ge307CgogICAgICAgIC8vIENvbW1vbiB2YXJzCiAgICAgICAgdmFyIG9wdGlvbnMgPSAkbW9kYWwuJG9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgZGVmYXVsdHMsIGNvbmZpZyk7CiAgICAgICAgJG1vZGFsLiRwcm9taXNlID0gZmV0Y2hUZW1wbGF0ZShvcHRpb25zLnRlbXBsYXRlKTsKICAgICAgICB2YXIgc2NvcGUgPSAkbW9kYWwuJHNjb3BlID0gb3B0aW9ucy5zY29wZSAmJiBvcHRpb25zLnNjb3BlLiRuZXcoKSB8fCAkcm9vdFNjb3BlLiRuZXcoKTsKICAgICAgICBpZighb3B0aW9ucy5lbGVtZW50ICYmICFvcHRpb25zLmNvbnRhaW5lcikgewogICAgICAgICAgb3B0aW9ucy5jb250YWluZXIgPSAnYm9keSc7CiAgICAgICAgfQoKICAgICAgICAvLyBTdXBwb3J0IHNjb3BlIGFzIHN0cmluZyBvcHRpb25zCiAgICAgICAgZm9yRWFjaChbJ3RpdGxlJywgJ2NvbnRlbnQnXSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICBpZihvcHRpb25zW2tleV0pIHNjb3BlW2tleV0gPSAkc2NlLnRydXN0QXNIdG1sKG9wdGlvbnNba2V5XSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIFByb3ZpZGUgc2NvcGUgaGVscGVycwogICAgICAgIHNjb3BlLiRoaWRlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICRtb2RhbC5oaWRlKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICAgIHNjb3BlLiRzaG93ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICRtb2RhbC5zaG93KCk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICAgIHNjb3BlLiR0b2dnbGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHsKICAgICAgICAgICAgJG1vZGFsLnRvZ2dsZSgpOwogICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gU3VwcG9ydCBjb250ZW50VGVtcGxhdGUgb3B0aW9uCiAgICAgICAgaWYob3B0aW9ucy5jb250ZW50VGVtcGxhdGUpIHsKICAgICAgICAgICRtb2RhbC4kcHJvbWlzZSA9ICRtb2RhbC4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHRlbXBsYXRlKSB7CiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZUVsID0gYW5ndWxhci5lbGVtZW50KHRlbXBsYXRlKTsKICAgICAgICAgICAgcmV0dXJuIGZldGNoVGVtcGxhdGUob3B0aW9ucy5jb250ZW50VGVtcGxhdGUpCiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvbnRlbnRUZW1wbGF0ZSkgewogICAgICAgICAgICAgIHZhciBjb250ZW50RWwgPSBmaW5kRWxlbWVudCgnW25nLWJpbmQ9ImNvbnRlbnQiXScsIHRlbXBsYXRlRWxbMF0pLnJlbW92ZUF0dHIoJ25nLWJpbmQnKS5odG1sKGNvbnRlbnRUZW1wbGF0ZSk7CiAgICAgICAgICAgICAgLy8gRHJvcCB0aGUgZGVmYXVsdCBmb290ZXIgYXMgeW91IHByb2JhYmx5IGRvbid0IHdhbnQgaXQgaWYgeW91IHVzZSBhIGN1c3RvbSBjb250ZW50VGVtcGxhdGUKICAgICAgICAgICAgICBpZighY29uZmlnLnRlbXBsYXRlKSBjb250ZW50RWwubmV4dCgpLnJlbW92ZSgpOwogICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZUVsWzBdLm91dGVySFRNTDsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8vIEZldGNoLCBjb21waWxlIHRoZW4gaW5pdGlhbGl6ZSBtb2RhbAogICAgICAgIHZhciBtb2RhbExpbmtlciwgbW9kYWxFbGVtZW50OwogICAgICAgIHZhciBiYWNrZHJvcEVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXYgY2xhc3M9IicgKyBvcHRpb25zLnByZWZpeENsYXNzICsgJy1iYWNrZHJvcCIvPicpOwogICAgICAgICRtb2RhbC4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHRlbXBsYXRlKSB7CiAgICAgICAgICBpZihhbmd1bGFyLmlzT2JqZWN0KHRlbXBsYXRlKSkgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5kYXRhOwogICAgICAgICAgaWYob3B0aW9ucy5odG1sKSB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoaHRtbFJlcGxhY2VSZWdFeHAsICduZy1iaW5kLWh0bWw9IicpOwogICAgICAgICAgdGVtcGxhdGUgPSB0cmltLmFwcGx5KHRlbXBsYXRlKTsKICAgICAgICAgIG1vZGFsTGlua2VyID0gJGNvbXBpbGUodGVtcGxhdGUpOwogICAgICAgICAgJG1vZGFsLmluaXQoKTsKICAgICAgICB9KTsKCiAgICAgICAgJG1vZGFsLmluaXQgPSBmdW5jdGlvbigpIHsKCiAgICAgICAgICAvLyBPcHRpb25zOiBzaG93CiAgICAgICAgICBpZihvcHRpb25zLnNob3cpIHsKICAgICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICRtb2RhbC5zaG93KCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICB9OwoKICAgICAgICAkbW9kYWwuZGVzdHJveSA9IGZ1bmN0aW9uKCkgewoKICAgICAgICAgIC8vIFJlbW92ZSBlbGVtZW50CiAgICAgICAgICBpZihtb2RhbEVsZW1lbnQpIHsKICAgICAgICAgICAgbW9kYWxFbGVtZW50LnJlbW92ZSgpOwogICAgICAgICAgICBtb2RhbEVsZW1lbnQgPSBudWxsOwogICAgICAgICAgfQogICAgICAgICAgaWYoYmFja2Ryb3BFbGVtZW50KSB7CiAgICAgICAgICAgIGJhY2tkcm9wRWxlbWVudC5yZW1vdmUoKTsKICAgICAgICAgICAgYmFja2Ryb3BFbGVtZW50ID0gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBEZXN0cm95IHNjb3BlCiAgICAgICAgICBzY29wZS4kZGVzdHJveSgpOwoKICAgICAgICB9OwoKICAgICAgICAkbW9kYWwuc2hvdyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYoc2NvcGUuJGlzU2hvd24pIHJldHVybjsKCiAgICAgICAgICBpZihzY29wZS4kZW1pdChvcHRpb25zLnByZWZpeEV2ZW50ICsgJy5zaG93LmJlZm9yZScsICRtb2RhbCkuZGVmYXVsdFByZXZlbnRlZCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcGFyZW50OwogICAgICAgICAgaWYoYW5ndWxhci5pc0VsZW1lbnQob3B0aW9ucy5jb250YWluZXIpKSB7CiAgICAgICAgICAgIHBhcmVudCA9IG9wdGlvbnMuY29udGFpbmVyOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcGFyZW50ID0gb3B0aW9ucy5jb250YWluZXIgPyBmaW5kRWxlbWVudChvcHRpb25zLmNvbnRhaW5lcikgOiBudWxsOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGFmdGVyID0gb3B0aW9ucy5jb250YWluZXIgPyBudWxsIDogb3B0aW9ucy5lbGVtZW50OwoKICAgICAgICAgIC8vIEZldGNoIGEgY2xvbmVkIGVsZW1lbnQgbGlua2VkIGZyb20gdGVtcGxhdGUKICAgICAgICAgIG1vZGFsRWxlbWVudCA9ICRtb2RhbC4kZWxlbWVudCA9IG1vZGFsTGlua2VyKHNjb3BlLCBmdW5jdGlvbihjbG9uZWRFbGVtZW50LCBzY29wZSkge30pOwoKICAgICAgICAgIC8vIFNldCB0aGUgaW5pdGlhbCBwb3NpdGlvbmluZy4KICAgICAgICAgIG1vZGFsRWxlbWVudC5jc3Moe2Rpc3BsYXk6ICdibG9jayd9KS5hZGRDbGFzcyhvcHRpb25zLnBsYWNlbWVudCk7CgogICAgICAgICAgLy8gT3B0aW9uczogYW5pbWF0aW9uCiAgICAgICAgICBpZihvcHRpb25zLmFuaW1hdGlvbikgewogICAgICAgICAgICBpZihvcHRpb25zLmJhY2tkcm9wKSB7CiAgICAgICAgICAgICAgYmFja2Ryb3BFbGVtZW50LmFkZENsYXNzKG9wdGlvbnMuYmFja2Ryb3BBbmltYXRpb24pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG1vZGFsRWxlbWVudC5hZGRDbGFzcyhvcHRpb25zLmFuaW1hdGlvbik7CiAgICAgICAgICB9CgogICAgICAgICAgaWYob3B0aW9ucy5iYWNrZHJvcCkgewogICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihiYWNrZHJvcEVsZW1lbnQsIGJvZHlFbGVtZW50LCBudWxsKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vIFN1cHBvcnQgdjEuMysgJGFuaW1hdGUKICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvY29tbWl0L2JmMGY1NTAyYjFiYmZkZGM1Y2RkMmYxMzhlZmQ5MTg4YjhjNjUyYTkKICAgICAgICAgIHZhciBwcm9taXNlID0gJGFuaW1hdGUuZW50ZXIobW9kYWxFbGVtZW50LCBwYXJlbnQsIGFmdGVyLCBlbnRlckFuaW1hdGVDYWxsYmFjayk7CiAgICAgICAgICBpZihwcm9taXNlICYmIHByb21pc2UudGhlbikgcHJvbWlzZS50aGVuKGVudGVyQW5pbWF0ZUNhbGxiYWNrKTsKCiAgICAgICAgICBzY29wZS4kaXNTaG93biA9IHRydWU7CiAgICAgICAgICBzY29wZS4kJHBoYXNlIHx8IChzY29wZS4kcm9vdCAmJiBzY29wZS4kcm9vdC4kJHBoYXNlKSB8fCBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAvLyBGb2N1cyBvbmNlIHRoZSBlbnRlci1hbmltYXRpb24gaGFzIHN0YXJ0ZWQKICAgICAgICAgIC8vIFdlaXJkIFBoYW50b21KUyBidWcgaGFjawogICAgICAgICAgdmFyIGVsID0gbW9kYWxFbGVtZW50WzBdOwogICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBlbC5mb2N1cygpOwogICAgICAgICAgfSk7CgogICAgICAgICAgYm9keUVsZW1lbnQuYWRkQ2xhc3Mob3B0aW9ucy5wcmVmaXhDbGFzcyArICctb3BlbicpOwogICAgICAgICAgaWYob3B0aW9ucy5hbmltYXRpb24pIHsKICAgICAgICAgICAgYm9keUVsZW1lbnQuYWRkQ2xhc3Mob3B0aW9ucy5wcmVmaXhDbGFzcyArICctd2l0aC0nICsgb3B0aW9ucy5hbmltYXRpb24pOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIEJpbmQgZXZlbnRzCiAgICAgICAgICBpZihvcHRpb25zLmJhY2tkcm9wKSB7CiAgICAgICAgICAgIG1vZGFsRWxlbWVudC5vbignY2xpY2snLCBoaWRlT25CYWNrZHJvcENsaWNrKTsKICAgICAgICAgICAgYmFja2Ryb3BFbGVtZW50Lm9uKCdjbGljaycsIGhpZGVPbkJhY2tkcm9wQ2xpY2spOwogICAgICAgICAgfQogICAgICAgICAgaWYob3B0aW9ucy5rZXlib2FyZCkgewogICAgICAgICAgICBtb2RhbEVsZW1lbnQub24oJ2tleXVwJywgJG1vZGFsLiRvbktleVVwKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBmdW5jdGlvbiBlbnRlckFuaW1hdGVDYWxsYmFjaygpIHsKICAgICAgICAgIHNjb3BlLiRlbWl0KG9wdGlvbnMucHJlZml4RXZlbnQgKyAnLnNob3cnLCAkbW9kYWwpOwogICAgICAgIH0KCiAgICAgICAgJG1vZGFsLmhpZGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmKCFzY29wZS4kaXNTaG93bikgcmV0dXJuOwoKICAgICAgICAgIGlmKHNjb3BlLiRlbWl0KG9wdGlvbnMucHJlZml4RXZlbnQgKyAnLmhpZGUuYmVmb3JlJywgJG1vZGFsKS5kZWZhdWx0UHJldmVudGVkKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBwcm9taXNlID0gJGFuaW1hdGUubGVhdmUobW9kYWxFbGVtZW50LCBsZWF2ZUFuaW1hdGVDYWxsYmFjayk7CiAgICAgICAgICAvLyBTdXBwb3J0IHYxLjMrICRhbmltYXRlCiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2NvbW1pdC9iZjBmNTUwMmIxYmJmZGRjNWNkZDJmMTM4ZWZkOTE4OGI4YzY1MmE5CiAgICAgICAgICBpZihwcm9taXNlICYmIHByb21pc2UudGhlbikgcHJvbWlzZS50aGVuKGxlYXZlQW5pbWF0ZUNhbGxiYWNrKTsKCiAgICAgICAgICBpZihvcHRpb25zLmJhY2tkcm9wKSB7CiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGJhY2tkcm9wRWxlbWVudCk7CiAgICAgICAgICB9CiAgICAgICAgICBzY29wZS4kaXNTaG93biA9IGZhbHNlOwogICAgICAgICAgc2NvcGUuJCRwaGFzZSB8fCAoc2NvcGUuJHJvb3QgJiYgc2NvcGUuJHJvb3QuJCRwaGFzZSkgfHwgc2NvcGUuJGRpZ2VzdCgpOwoKICAgICAgICAgIC8vIFVuYmluZCBldmVudHMKICAgICAgICAgIGlmKG9wdGlvbnMuYmFja2Ryb3ApIHsKICAgICAgICAgICAgbW9kYWxFbGVtZW50Lm9mZignY2xpY2snLCBoaWRlT25CYWNrZHJvcENsaWNrKTsKICAgICAgICAgICAgYmFja2Ryb3BFbGVtZW50Lm9mZignY2xpY2snLCBoaWRlT25CYWNrZHJvcENsaWNrKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmKG9wdGlvbnMua2V5Ym9hcmQpIHsKICAgICAgICAgICAgbW9kYWxFbGVtZW50Lm9mZigna2V5dXAnLCAkbW9kYWwuJG9uS2V5VXApOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIGxlYXZlQW5pbWF0ZUNhbGxiYWNrKCkgewogICAgICAgICAgc2NvcGUuJGVtaXQob3B0aW9ucy5wcmVmaXhFdmVudCArICcuaGlkZScsICRtb2RhbCk7CiAgICAgICAgICBib2R5RWxlbWVudC5yZW1vdmVDbGFzcyhvcHRpb25zLnByZWZpeENsYXNzICsgJy1vcGVuJyk7CiAgICAgICAgICBpZihvcHRpb25zLmFuaW1hdGlvbikgewogICAgICAgICAgICBib2R5RWxlbWVudC5yZW1vdmVDbGFzcyhvcHRpb25zLnByZWZpeENsYXNzICsgJy13aXRoLScgKyBvcHRpb25zLmFuaW1hdGlvbik7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkbW9kYWwudG9nZ2xlID0gZnVuY3Rpb24oKSB7CgogICAgICAgICAgc2NvcGUuJGlzU2hvd24gPyAkbW9kYWwuaGlkZSgpIDogJG1vZGFsLnNob3coKTsKCiAgICAgICAgfTsKCiAgICAgICAgJG1vZGFsLmZvY3VzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBtb2RhbEVsZW1lbnRbMF0uZm9jdXMoKTsKICAgICAgICB9OwoKICAgICAgICAvLyBQcm90ZWN0ZWQgbWV0aG9kcwoKICAgICAgICAkbW9kYWwuJG9uS2V5VXAgPSBmdW5jdGlvbihldnQpIHsKCiAgICAgICAgICBpZiAoZXZ0LndoaWNoID09PSAyNyAmJiBzY29wZS4kaXNTaG93bikgewogICAgICAgICAgICAkbW9kYWwuaGlkZSgpOwogICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICB9CgogICAgICAgIH07CgogICAgICAgIC8vIFByaXZhdGUgbWV0aG9kcwoKICAgICAgICBmdW5jdGlvbiBoaWRlT25CYWNrZHJvcENsaWNrKGV2dCkgewogICAgICAgICAgaWYoZXZ0LnRhcmdldCAhPT0gZXZ0LmN1cnJlbnRUYXJnZXQpIHJldHVybjsKICAgICAgICAgIG9wdGlvbnMuYmFja2Ryb3AgPT09ICdzdGF0aWMnID8gJG1vZGFsLmZvY3VzKCkgOiAkbW9kYWwuaGlkZSgpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICRtb2RhbDsKCiAgICAgIH0KCiAgICAgIC8vIEhlbHBlciBmdW5jdGlvbnMKCiAgICAgIGZ1bmN0aW9uIGZpbmRFbGVtZW50KHF1ZXJ5LCBlbGVtZW50KSB7CiAgICAgICAgcmV0dXJuIGFuZ3VsYXIuZWxlbWVudCgoZWxlbWVudCB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChxdWVyeSkpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBmZXRjaFRlbXBsYXRlKHRlbXBsYXRlKSB7CiAgICAgICAgcmV0dXJuICRxLndoZW4oJHRlbXBsYXRlQ2FjaGUuZ2V0KHRlbXBsYXRlKSB8fCAkaHR0cC5nZXQodGVtcGxhdGUpKQogICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgaWYoYW5ndWxhci5pc09iamVjdChyZXMpKSB7CiAgICAgICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0ZW1wbGF0ZSwgcmVzLmRhdGEpOwogICAgICAgICAgICByZXR1cm4gcmVzLmRhdGE7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gTW9kYWxGYWN0b3J5OwoKICAgIH1dOwoKICB9KQoKICAuZGlyZWN0aXZlKCdic01vZGFsJywgWyIkd2luZG93IiwgIiRzY2UiLCAiJG1vZGFsIiwgZnVuY3Rpb24oJHdpbmRvdywgJHNjZSwgJG1vZGFsKSB7CgogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdFQUMnLAogICAgICBzY29wZTogdHJ1ZSwKICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIHRyYW5zY2x1c2lvbikgewoKICAgICAgICAvLyBEaXJlY3RpdmUgb3B0aW9ucwogICAgICAgIHZhciBvcHRpb25zID0ge3Njb3BlOiBzY29wZSwgZWxlbWVudDogZWxlbWVudCwgc2hvdzogZmFsc2V9OwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChbJ3RlbXBsYXRlJywgJ2NvbnRlbnRUZW1wbGF0ZScsICdwbGFjZW1lbnQnLCAnYmFja2Ryb3AnLCAna2V5Ym9hcmQnLCAnaHRtbCcsICdjb250YWluZXInLCAnYW5pbWF0aW9uJ10sIGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgaWYoYW5ndWxhci5pc0RlZmluZWQoYXR0cltrZXldKSkgb3B0aW9uc1trZXldID0gYXR0cltrZXldOwogICAgICAgIH0pOwoKICAgICAgICAvLyBTdXBwb3J0IHNjb3BlIGFzIGRhdGEtYXR0cnMKICAgICAgICBhbmd1bGFyLmZvckVhY2goWyd0aXRsZScsICdjb250ZW50J10sIGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgYXR0cltrZXldICYmIGF0dHIuJG9ic2VydmUoa2V5LCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgICAgc2NvcGVba2V5XSA9ICRzY2UudHJ1c3RBc0h0bWwobmV3VmFsdWUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIFN1cHBvcnQgc2NvcGUgYXMgYW4gb2JqZWN0CiAgICAgICAgYXR0ci5ic01vZGFsICYmIHNjb3BlLiR3YXRjaChhdHRyLmJzTW9kYWwsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgaWYoYW5ndWxhci5pc09iamVjdChuZXdWYWx1ZSkpIHsKICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoc2NvcGUsIG5ld1ZhbHVlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNjb3BlLmNvbnRlbnQgPSBuZXdWYWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9LCB0cnVlKTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBtb2RhbAogICAgICAgIHZhciBtb2RhbCA9ICRtb2RhbChvcHRpb25zKTsKCiAgICAgICAgLy8gVHJpZ2dlcgogICAgICAgIGVsZW1lbnQub24oYXR0ci50cmlnZ2VyIHx8ICdjbGljaycsIG1vZGFsLnRvZ2dsZSk7CgogICAgICAgIC8vIEdhcmJhZ2UgY29sbGVjdGlvbgogICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmIChtb2RhbCkgbW9kYWwuZGVzdHJveSgpOwogICAgICAgICAgb3B0aW9ucyA9IG51bGw7CiAgICAgICAgICBtb2RhbCA9IG51bGw7CiAgICAgICAgfSk7CgogICAgICB9CiAgICB9OwoKICB9XSk7CgovLyBTb3VyY2U6IG5hdmJhci5qcwphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAubmF2YmFyJywgW10pCgogIC5wcm92aWRlcignJG5hdmJhcicsIGZ1bmN0aW9uKCkgewoKICAgIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgPSB7CiAgICAgIGFjdGl2ZUNsYXNzOiAnYWN0aXZlJywKICAgICAgcm91dGVBdHRyOiAnZGF0YS1tYXRjaC1yb3V0ZScsCiAgICAgIHN0cmljdDogZmFsc2UKICAgIH07CgogICAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB7ZGVmYXVsdHM6IGRlZmF1bHRzfTsKICAgIH07CgogIH0pCgogIC5kaXJlY3RpdmUoJ2JzTmF2YmFyJywgWyIkd2luZG93IiwgIiRsb2NhdGlvbiIsICIkbmF2YmFyIiwgZnVuY3Rpb24oJHdpbmRvdywgJGxvY2F0aW9uLCAkbmF2YmFyKSB7CgogICAgdmFyIGRlZmF1bHRzID0gJG5hdmJhci5kZWZhdWx0czsKCiAgICByZXR1cm4gewogICAgICByZXN0cmljdDogJ0EnLAogICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY29udHJvbGxlcikgewoKICAgICAgICAvLyBEaXJlY3RpdmUgb3B0aW9ucwogICAgICAgIHZhciBvcHRpb25zID0gYW5ndWxhci5jb3B5KGRlZmF1bHRzKTsKICAgICAgICBhbmd1bGFyLmZvckVhY2goT2JqZWN0LmtleXMoZGVmYXVsdHMpLCBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgIGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJba2V5XSkpIG9wdGlvbnNba2V5XSA9IGF0dHJba2V5XTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gV2F0Y2ggZm9yIHRoZSAkbG9jYXRpb24KICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7CgogICAgICAgICAgcmV0dXJuICRsb2NhdGlvbi5wYXRoKCk7CgogICAgICAgIH0sIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewoKICAgICAgICAgIHZhciBsaUVsZW1lbnRzID0gZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yQWxsKCdsaVsnICsgb3B0aW9ucy5yb3V0ZUF0dHIgKyAnXScpOwoKICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChsaUVsZW1lbnRzLCBmdW5jdGlvbihsaSkgewoKICAgICAgICAgICAgdmFyIGxpRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudChsaSk7CiAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gbGlFbGVtZW50LmF0dHIob3B0aW9ucy5yb3V0ZUF0dHIpLnJlcGxhY2UoJy8nLCAnXFwvJyk7CiAgICAgICAgICAgIGlmKG9wdGlvbnMuc3RyaWN0KSB7CiAgICAgICAgICAgICAgcGF0dGVybiA9ICdeJyArIHBhdHRlcm4gKyAnJCc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAocGF0dGVybiwgWydpJ10pOwoKICAgICAgICAgICAgaWYocmVnZXhwLnRlc3QobmV3VmFsdWUpKSB7CiAgICAgICAgICAgICAgbGlFbGVtZW50LmFkZENsYXNzKG9wdGlvbnMuYWN0aXZlQ2xhc3MpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGxpRWxlbWVudC5yZW1vdmVDbGFzcyhvcHRpb25zLmFjdGl2ZUNsYXNzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgIH0pOwoKICAgICAgICB9KTsKCiAgICAgIH0KCiAgICB9OwoKICB9XSk7CgovLyBTb3VyY2U6IHBvcG92ZXIuanMKYW5ndWxhci5tb2R1bGUoJ21nY3JlYS5uZ1N0cmFwLnBvcG92ZXInLCBbJ21nY3JlYS5uZ1N0cmFwLnRvb2x0aXAnXSkKCiAgLnByb3ZpZGVyKCckcG9wb3ZlcicsIGZ1bmN0aW9uKCkgewoKICAgIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgPSB7CiAgICAgIGFuaW1hdGlvbjogJ2FtLWZhZGUnLAogICAgICBjdXN0b21DbGFzczogJycsCiAgICAgIGNvbnRhaW5lcjogZmFsc2UsCiAgICAgIHRhcmdldDogZmFsc2UsCiAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JywKICAgICAgdGVtcGxhdGU6ICdwb3BvdmVyL3BvcG92ZXIudHBsLmh0bWwnLAogICAgICBjb250ZW50VGVtcGxhdGU6IGZhbHNlLAogICAgICB0cmlnZ2VyOiAnY2xpY2snLAogICAgICBrZXlib2FyZDogdHJ1ZSwKICAgICAgaHRtbDogZmFsc2UsCiAgICAgIHRpdGxlOiAnJywKICAgICAgY29udGVudDogJycsCiAgICAgIGRlbGF5OiAwCiAgICB9OwoKICAgIHRoaXMuJGdldCA9IFsiJHRvb2x0aXAiLCBmdW5jdGlvbigkdG9vbHRpcCkgewoKICAgICAgZnVuY3Rpb24gUG9wb3ZlckZhY3RvcnkoZWxlbWVudCwgY29uZmlnKSB7CgogICAgICAgIC8vIENvbW1vbiB2YXJzCiAgICAgICAgdmFyIG9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgZGVmYXVsdHMsIGNvbmZpZyk7CgogICAgICAgIHZhciAkcG9wb3ZlciA9ICR0b29sdGlwKGVsZW1lbnQsIG9wdGlvbnMpOwoKICAgICAgICAvLyBTdXBwb3J0IHNjb3BlIGFzIHN0cmluZyBvcHRpb25zIFsvKnRpdGxlLCAqL2NvbnRlbnRdCiAgICAgICAgaWYob3B0aW9ucy5jb250ZW50KSB7CiAgICAgICAgICAkcG9wb3Zlci4kc2NvcGUuY29udGVudCA9IG9wdGlvbnMuY29udGVudDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkcG9wb3ZlcjsKCiAgICAgIH0KCiAgICAgIHJldHVybiBQb3BvdmVyRmFjdG9yeTsKCiAgICB9XTsKCiAgfSkKCiAgLmRpcmVjdGl2ZSgnYnNQb3BvdmVyJywgWyIkd2luZG93IiwgIiRzY2UiLCAiJHBvcG92ZXIiLCBmdW5jdGlvbigkd2luZG93LCAkc2NlLCAkcG9wb3ZlcikgewoKICAgIHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAkd2luZG93LnNldFRpbWVvdXQ7CgogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdFQUMnLAogICAgICBzY29wZTogdHJ1ZSwKICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKCiAgICAgICAgLy8gRGlyZWN0aXZlIG9wdGlvbnMKICAgICAgICB2YXIgb3B0aW9ucyA9IHtzY29wZTogc2NvcGV9OwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChbJ3RlbXBsYXRlJywgJ2NvbnRlbnRUZW1wbGF0ZScsICdwbGFjZW1lbnQnLCAnY29udGFpbmVyJywgJ3RhcmdldCcsICdkZWxheScsICd0cmlnZ2VyJywgJ2tleWJvYXJkJywgJ2h0bWwnLCAnYW5pbWF0aW9uJywgJ2N1c3RvbUNsYXNzJ10sIGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgaWYoYW5ndWxhci5pc0RlZmluZWQoYXR0cltrZXldKSkgb3B0aW9uc1trZXldID0gYXR0cltrZXldOwogICAgICAgIH0pOwoKICAgICAgICAvLyBTdXBwb3J0IHNjb3BlIGFzIGRhdGEtYXR0cnMKICAgICAgICBhbmd1bGFyLmZvckVhY2goWyd0aXRsZScsICdjb250ZW50J10sIGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgYXR0cltrZXldICYmIGF0dHIuJG9ic2VydmUoa2V5LCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgICAgc2NvcGVba2V5XSA9ICRzY2UudHJ1c3RBc0h0bWwobmV3VmFsdWUpOwogICAgICAgICAgICBhbmd1bGFyLmlzRGVmaW5lZChvbGRWYWx1ZSkgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIHBvcG92ZXIgJiYgcG9wb3Zlci4kYXBwbHlQbGFjZW1lbnQoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gU3VwcG9ydCBzY29wZSBhcyBhbiBvYmplY3QKICAgICAgICBhdHRyLmJzUG9wb3ZlciAmJiBzY29wZS4kd2F0Y2goYXR0ci5ic1BvcG92ZXIsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgaWYoYW5ndWxhci5pc09iamVjdChuZXdWYWx1ZSkpIHsKICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoc2NvcGUsIG5ld1ZhbHVlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNjb3BlLmNvbnRlbnQgPSBuZXdWYWx1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGFuZ3VsYXIuaXNEZWZpbmVkKG9sZFZhbHVlKSAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHBvcG92ZXIgJiYgcG9wb3Zlci4kYXBwbHlQbGFjZW1lbnQoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0sIHRydWUpOwoKICAgICAgICAvLyBWaXNpYmlsaXR5IGJpbmRpbmcgc3VwcG9ydAogICAgICAgIGF0dHIuYnNTaG93ICYmIHNjb3BlLiR3YXRjaChhdHRyLmJzU2hvdywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICBpZighcG9wb3ZlciB8fCAhYW5ndWxhci5pc0RlZmluZWQobmV3VmFsdWUpKSByZXR1cm47CiAgICAgICAgICBpZihhbmd1bGFyLmlzU3RyaW5nKG5ld1ZhbHVlKSkgbmV3VmFsdWUgPSAhIW5ld1ZhbHVlLm1hdGNoKC90cnVlfCw/KHBvcG92ZXIpLD8vaSk7CiAgICAgICAgICBuZXdWYWx1ZSA9PT0gdHJ1ZSA/IHBvcG92ZXIuc2hvdygpIDogcG9wb3Zlci5oaWRlKCk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIEluaXRpYWxpemUgcG9wb3ZlcgogICAgICAgIHZhciBwb3BvdmVyID0gJHBvcG92ZXIoZWxlbWVudCwgb3B0aW9ucyk7CgogICAgICAgIC8vIEdhcmJhZ2UgY29sbGVjdGlvbgogICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmIChwb3BvdmVyKSBwb3BvdmVyLmRlc3Ryb3koKTsKICAgICAgICAgIG9wdGlvbnMgPSBudWxsOwogICAgICAgICAgcG9wb3ZlciA9IG51bGw7CiAgICAgICAgfSk7CgogICAgICB9CiAgICB9OwoKICB9XSk7CgovLyBTb3VyY2U6IHNjcm9sbHNweS5qcwphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAuc2Nyb2xsc3B5JywgWydtZ2NyZWEubmdTdHJhcC5oZWxwZXJzLmRlYm91bmNlJywgJ21nY3JlYS5uZ1N0cmFwLmhlbHBlcnMuZGltZW5zaW9ucyddKQoKICAucHJvdmlkZXIoJyRzY3JvbGxzcHknLCBmdW5jdGlvbigpIHsKCiAgICAvLyBQb29sIG9mIHJlZ2lzdGVyZWQgc3BpZXMKICAgIHZhciBzcGllcyA9IHRoaXMuJCRzcGllcyA9IHt9OwoKICAgIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgPSB7CiAgICAgIGRlYm91bmNlOiAxNTAsCiAgICAgIHRocm90dGxlOiAxMDAsCiAgICAgIG9mZnNldDogMTAwCiAgICB9OwoKICAgIHRoaXMuJGdldCA9IFsiJHdpbmRvdyIsICIkZG9jdW1lbnQiLCAiJHJvb3RTY29wZSIsICJkaW1lbnNpb25zIiwgImRlYm91bmNlIiwgInRocm90dGxlIiwgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50LCAkcm9vdFNjb3BlLCBkaW1lbnNpb25zLCBkZWJvdW5jZSwgdGhyb3R0bGUpIHsKCiAgICAgIHZhciB3aW5kb3dFbCA9IGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KTsKICAgICAgdmFyIGRvY0VsID0gYW5ndWxhci5lbGVtZW50KCRkb2N1bWVudC5wcm9wKCdkb2N1bWVudEVsZW1lbnQnKSk7CiAgICAgIHZhciBib2R5RWwgPSBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdy5kb2N1bWVudC5ib2R5KTsKCiAgICAgIC8vIEhlbHBlciBmdW5jdGlvbnMKCiAgICAgIGZ1bmN0aW9uIG5vZGVOYW1lKGVsZW1lbnQsIG5hbWUpIHsKICAgICAgICByZXR1cm4gZWxlbWVudFswXS5ub2RlTmFtZSAmJiBlbGVtZW50WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gU2Nyb2xsU3B5RmFjdG9yeShjb25maWcpIHsKCiAgICAgICAgLy8gQ29tbW9uIHZhcnMKICAgICAgICB2YXIgb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBkZWZhdWx0cywgY29uZmlnKTsKICAgICAgICBpZighb3B0aW9ucy5lbGVtZW50KSBvcHRpb25zLmVsZW1lbnQgPSBib2R5RWw7CiAgICAgICAgdmFyIGlzV2luZG93U3B5ID0gbm9kZU5hbWUob3B0aW9ucy5lbGVtZW50LCAnYm9keScpOwogICAgICAgIHZhciBzY3JvbGxFbCA9IGlzV2luZG93U3B5ID8gd2luZG93RWwgOiBvcHRpb25zLmVsZW1lbnQ7CiAgICAgICAgdmFyIHNjcm9sbElkID0gaXNXaW5kb3dTcHkgPyAnd2luZG93JyA6IG9wdGlvbnMuaWQ7CgogICAgICAgIC8vIFVzZSBleGlzdGluZyBzcHkKICAgICAgICBpZihzcGllc1tzY3JvbGxJZF0pIHsKICAgICAgICAgIHNwaWVzW3Njcm9sbElkXS4kJGNvdW50Kys7CiAgICAgICAgICByZXR1cm4gc3BpZXNbc2Nyb2xsSWRdOwogICAgICAgIH0KCiAgICAgICAgdmFyICRzY3JvbGxzcHkgPSB7fTsKCiAgICAgICAgLy8gUHJpdmF0ZSB2YXJzCiAgICAgICAgdmFyIHVuYmluZFZpZXdDb250ZW50TG9hZGVkLCB1bmJpbmRJbmNsdWRlQ29udGVudExvYWRlZDsKICAgICAgICB2YXIgdHJhY2tlZEVsZW1lbnRzID0gJHNjcm9sbHNweS4kdHJhY2tlZEVsZW1lbnRzID0gW107CiAgICAgICAgdmFyIHNvcnRlZEVsZW1lbnRzID0gW107CiAgICAgICAgdmFyIGFjdGl2ZVRhcmdldDsKICAgICAgICB2YXIgZGVib3VuY2VkQ2hlY2tQb3NpdGlvbjsKICAgICAgICB2YXIgdGhyb3R0bGVkQ2hlY2tQb3NpdGlvbjsKICAgICAgICB2YXIgZGVib3VuY2VkQ2hlY2tPZmZzZXRzOwogICAgICAgIHZhciB2aWV3cG9ydEhlaWdodDsKICAgICAgICB2YXIgc2Nyb2xsVG9wOwoKICAgICAgICAkc2Nyb2xsc3B5LmluaXQgPSBmdW5jdGlvbigpIHsKCiAgICAgICAgICAvLyBTZXR1cCBpbnRlcm5hbCByZWYgY291bnRlcgogICAgICAgICAgdGhpcy4kJGNvdW50ID0gMTsKCiAgICAgICAgICAvLyBCaW5kIGV2ZW50cwogICAgICAgICAgZGVib3VuY2VkQ2hlY2tQb3NpdGlvbiA9IGRlYm91bmNlKHRoaXMuY2hlY2tQb3NpdGlvbiwgb3B0aW9ucy5kZWJvdW5jZSk7CiAgICAgICAgICB0aHJvdHRsZWRDaGVja1Bvc2l0aW9uID0gdGhyb3R0bGUodGhpcy5jaGVja1Bvc2l0aW9uLCBvcHRpb25zLnRocm90dGxlKTsKICAgICAgICAgIHNjcm9sbEVsLm9uKCdjbGljaycsIHRoaXMuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3ApOwogICAgICAgICAgd2luZG93RWwub24oJ3Jlc2l6ZScsIGRlYm91bmNlZENoZWNrUG9zaXRpb24pOwogICAgICAgICAgc2Nyb2xsRWwub24oJ3Njcm9sbCcsIHRocm90dGxlZENoZWNrUG9zaXRpb24pOwoKICAgICAgICAgIGRlYm91bmNlZENoZWNrT2Zmc2V0cyA9IGRlYm91bmNlKHRoaXMuY2hlY2tPZmZzZXRzLCBvcHRpb25zLmRlYm91bmNlKTsKICAgICAgICAgIHVuYmluZFZpZXdDb250ZW50TG9hZGVkID0gJHJvb3RTY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGRlYm91bmNlZENoZWNrT2Zmc2V0cyk7CiAgICAgICAgICB1bmJpbmRJbmNsdWRlQ29udGVudExvYWRlZCA9ICRyb290U2NvcGUuJG9uKCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBkZWJvdW5jZWRDaGVja09mZnNldHMpOwogICAgICAgICAgZGVib3VuY2VkQ2hlY2tPZmZzZXRzKCk7CgogICAgICAgICAgLy8gUmVnaXN0ZXIgc3B5IGZvciByZXVzZQogICAgICAgICAgaWYoc2Nyb2xsSWQpIHsKICAgICAgICAgICAgc3BpZXNbc2Nyb2xsSWRdID0gJHNjcm9sbHNweTsKICAgICAgICAgIH0KCiAgICAgICAgfTsKCiAgICAgICAgJHNjcm9sbHNweS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7CgogICAgICAgICAgLy8gQ2hlY2sgaW50ZXJuYWwgcmVmIGNvdW50ZXIKICAgICAgICAgIHRoaXMuJCRjb3VudC0tOwogICAgICAgICAgaWYodGhpcy4kJGNvdW50ID4gMCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgLy8gVW5iaW5kIGV2ZW50cwogICAgICAgICAgc2Nyb2xsRWwub2ZmKCdjbGljaycsIHRoaXMuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3ApOwogICAgICAgICAgd2luZG93RWwub2ZmKCdyZXNpemUnLCBkZWJvdW5jZWRDaGVja1Bvc2l0aW9uKTsKICAgICAgICAgIHNjcm9sbEVsLm9mZignc2Nyb2xsJywgZGVib3VuY2VkQ2hlY2tQb3NpdGlvbik7CiAgICAgICAgICB1bmJpbmRWaWV3Q29udGVudExvYWRlZCgpOwogICAgICAgICAgdW5iaW5kSW5jbHVkZUNvbnRlbnRMb2FkZWQoKTsKICAgICAgICAgIGlmIChzY3JvbGxJZCkgewogICAgICAgICAgICBkZWxldGUgc3BpZXNbc2Nyb2xsSWRdOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgICRzY3JvbGxzcHkuY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uKCkgewoKICAgICAgICAgIC8vIE5vdCByZWFkeSB5ZXQKICAgICAgICAgIGlmKCFzb3J0ZWRFbGVtZW50cy5sZW5ndGgpIHJldHVybjsKCiAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHNjcm9sbCBwb3NpdGlvbgogICAgICAgICAgc2Nyb2xsVG9wID0gKGlzV2luZG93U3B5ID8gJHdpbmRvdy5wYWdlWU9mZnNldCA6IHNjcm9sbEVsLnByb3AoJ3Njcm9sbFRvcCcpKSB8fCAwOwoKICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgdmlld3BvcnQgaGVpZ2h0IGZvciB1c2UgYnkgdGhlIGNvbXBvbmVudHMKICAgICAgICAgIHZpZXdwb3J0SGVpZ2h0ID0gTWF0aC5tYXgoJHdpbmRvdy5pbm5lckhlaWdodCwgZG9jRWwucHJvcCgnY2xpZW50SGVpZ2h0JykpOwoKICAgICAgICAgIC8vIEFjdGl2YXRlIGZpcnN0IGVsZW1lbnQgaWYgc2Nyb2xsIGlzIHNtYWxsZXIKICAgICAgICAgIGlmKHNjcm9sbFRvcCA8IHNvcnRlZEVsZW1lbnRzWzBdLm9mZnNldFRvcCAmJiBhY3RpdmVUYXJnZXQgIT09IHNvcnRlZEVsZW1lbnRzWzBdLnRhcmdldCkgewogICAgICAgICAgICByZXR1cm4gJHNjcm9sbHNweS4kYWN0aXZhdGVFbGVtZW50KHNvcnRlZEVsZW1lbnRzWzBdKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBBY3RpdmF0ZSBwcm9wZXIgZWxlbWVudAogICAgICAgICAgZm9yICh2YXIgaSA9IHNvcnRlZEVsZW1lbnRzLmxlbmd0aDsgaS0tOykgewogICAgICAgICAgICBpZihhbmd1bGFyLmlzVW5kZWZpbmVkKHNvcnRlZEVsZW1lbnRzW2ldLm9mZnNldFRvcCkgfHwgc29ydGVkRWxlbWVudHNbaV0ub2Zmc2V0VG9wID09PSBudWxsKSBjb250aW51ZTsKICAgICAgICAgICAgaWYoYWN0aXZlVGFyZ2V0ID09PSBzb3J0ZWRFbGVtZW50c1tpXS50YXJnZXQpIGNvbnRpbnVlOwogICAgICAgICAgICBpZihzY3JvbGxUb3AgPCBzb3J0ZWRFbGVtZW50c1tpXS5vZmZzZXRUb3ApIGNvbnRpbnVlOwogICAgICAgICAgICBpZihzb3J0ZWRFbGVtZW50c1tpICsgMV0gJiYgc2Nyb2xsVG9wID4gc29ydGVkRWxlbWVudHNbaSArIDFdLm9mZnNldFRvcCkgY29udGludWU7CiAgICAgICAgICAgIHJldHVybiAkc2Nyb2xsc3B5LiRhY3RpdmF0ZUVsZW1lbnQoc29ydGVkRWxlbWVudHNbaV0pOwogICAgICAgICAgfQoKICAgICAgICB9OwoKICAgICAgICAkc2Nyb2xsc3B5LmNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY2hlY2tQb3NpdGlvbiwgMSk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gUHJvdGVjdGVkIG1ldGhvZHMKCiAgICAgICAgJHNjcm9sbHNweS4kYWN0aXZhdGVFbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgaWYoYWN0aXZlVGFyZ2V0KSB7CiAgICAgICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gJHNjcm9sbHNweS4kZ2V0VHJhY2tlZEVsZW1lbnQoYWN0aXZlVGFyZ2V0KTsKICAgICAgICAgICAgaWYoYWN0aXZlRWxlbWVudCkgewogICAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQuc291cmNlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTsKICAgICAgICAgICAgICBpZihub2RlTmFtZShhY3RpdmVFbGVtZW50LnNvdXJjZSwgJ2xpJykgJiYgbm9kZU5hbWUoYWN0aXZlRWxlbWVudC5zb3VyY2UucGFyZW50KCkucGFyZW50KCksICdsaScpKSB7CiAgICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50LnNvdXJjZS5wYXJlbnQoKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBhY3RpdmVUYXJnZXQgPSBlbGVtZW50LnRhcmdldDsKICAgICAgICAgIGVsZW1lbnQuc291cmNlLmFkZENsYXNzKCdhY3RpdmUnKTsKICAgICAgICAgIGlmKG5vZGVOYW1lKGVsZW1lbnQuc291cmNlLCAnbGknKSAmJiBub2RlTmFtZShlbGVtZW50LnNvdXJjZS5wYXJlbnQoKS5wYXJlbnQoKSwgJ2xpJykpIHsKICAgICAgICAgICAgZWxlbWVudC5zb3VyY2UucGFyZW50KCkucGFyZW50KCkuYWRkQ2xhc3MoJ2FjdGl2ZScpOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgICRzY3JvbGxzcHkuJGdldFRyYWNrZWRFbGVtZW50ID0gZnVuY3Rpb24odGFyZ2V0KSB7CiAgICAgICAgICByZXR1cm4gdHJhY2tlZEVsZW1lbnRzLmZpbHRlcihmdW5jdGlvbihvYmopIHsKICAgICAgICAgICAgcmV0dXJuIG9iai50YXJnZXQgPT09IHRhcmdldDsKICAgICAgICAgIH0pWzBdOwogICAgICAgIH07CgogICAgICAgIC8vIFRyYWNrIG9mZnNldHMgYmVoYXZpb3IKCiAgICAgICAgJHNjcm9sbHNweS5jaGVja09mZnNldHMgPSBmdW5jdGlvbigpIHsKCiAgICAgICAgICBhbmd1bGFyLmZvckVhY2godHJhY2tlZEVsZW1lbnRzLCBmdW5jdGlvbih0cmFja2VkRWxlbWVudCkgewogICAgICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodHJhY2tlZEVsZW1lbnQudGFyZ2V0KTsKICAgICAgICAgICAgdHJhY2tlZEVsZW1lbnQub2Zmc2V0VG9wID0gdGFyZ2V0RWxlbWVudCA/IGRpbWVuc2lvbnMub2Zmc2V0KHRhcmdldEVsZW1lbnQpLnRvcCA6IG51bGw7CiAgICAgICAgICAgIGlmKG9wdGlvbnMub2Zmc2V0ICYmIHRyYWNrZWRFbGVtZW50Lm9mZnNldFRvcCAhPT0gbnVsbCkgdHJhY2tlZEVsZW1lbnQub2Zmc2V0VG9wIC09IG9wdGlvbnMub2Zmc2V0ICogMTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIHNvcnRlZEVsZW1lbnRzID0gdHJhY2tlZEVsZW1lbnRzCiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7CiAgICAgICAgICAgIHJldHVybiBlbC5vZmZzZXRUb3AgIT09IG51bGw7CiAgICAgICAgICB9KQogICAgICAgICAgLnNvcnQoZnVuY3Rpb24oYSwgYikgewogICAgICAgICAgICByZXR1cm4gYS5vZmZzZXRUb3AgLSBiLm9mZnNldFRvcDsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGRlYm91bmNlZENoZWNrUG9zaXRpb24oKTsKCiAgICAgICAgfTsKCiAgICAgICAgJHNjcm9sbHNweS50cmFja0VsZW1lbnQgPSBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkgewogICAgICAgICAgdHJhY2tlZEVsZW1lbnRzLnB1c2goe3RhcmdldDogdGFyZ2V0LCBzb3VyY2U6IHNvdXJjZX0pOwogICAgICAgIH07CgogICAgICAgICRzY3JvbGxzcHkudW50cmFja0VsZW1lbnQgPSBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkgewogICAgICAgICAgdmFyIHRvRGVsZXRlOwogICAgICAgICAgZm9yICh2YXIgaSA9IHRyYWNrZWRFbGVtZW50cy5sZW5ndGg7IGktLTspIHsKICAgICAgICAgICAgaWYodHJhY2tlZEVsZW1lbnRzW2ldLnRhcmdldCA9PT0gdGFyZ2V0ICYmIHRyYWNrZWRFbGVtZW50c1tpXS5zb3VyY2UgPT09IHNvdXJjZSkgewogICAgICAgICAgICAgIHRvRGVsZXRlID0gaTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdHJhY2tlZEVsZW1lbnRzID0gdHJhY2tlZEVsZW1lbnRzLnNwbGljZSh0b0RlbGV0ZSwgMSk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjcm9sbHNweS5hY3RpdmF0ZSA9IGZ1bmN0aW9uKGkpIHsKICAgICAgICAgIHRyYWNrZWRFbGVtZW50c1tpXS5hZGRDbGFzcygnYWN0aXZlJyk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBwbHVnaW4KCiAgICAgICAgJHNjcm9sbHNweS5pbml0KCk7CiAgICAgICAgcmV0dXJuICRzY3JvbGxzcHk7CgogICAgICB9CgogICAgICByZXR1cm4gU2Nyb2xsU3B5RmFjdG9yeTsKCiAgICB9XTsKCiAgfSkKCiAgLmRpcmVjdGl2ZSgnYnNTY3JvbGxzcHknLCBbIiRyb290U2NvcGUiLCAiZGVib3VuY2UiLCAiZGltZW5zaW9ucyIsICIkc2Nyb2xsc3B5IiwgZnVuY3Rpb24oJHJvb3RTY29wZSwgZGVib3VuY2UsIGRpbWVuc2lvbnMsICRzY3JvbGxzcHkpIHsKCiAgICByZXR1cm4gewogICAgICByZXN0cmljdDogJ0VBQycsCiAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CgogICAgICAgIHZhciBvcHRpb25zID0ge3Njb3BlOiBzY29wZX07CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKFsnb2Zmc2V0JywgJ3RhcmdldCddLCBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgIGlmKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJba2V5XSkpIG9wdGlvbnNba2V5XSA9IGF0dHJba2V5XTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIHNjcm9sbHNweSA9ICRzY3JvbGxzcHkob3B0aW9ucyk7CiAgICAgICAgc2Nyb2xsc3B5LnRyYWNrRWxlbWVudChvcHRpb25zLnRhcmdldCwgZWxlbWVudCk7CgogICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmIChzY3JvbGxzcHkpIHsKICAgICAgICAgICAgc2Nyb2xsc3B5LnVudHJhY2tFbGVtZW50KG9wdGlvbnMudGFyZ2V0LCBlbGVtZW50KTsKICAgICAgICAgICAgc2Nyb2xsc3B5LmRlc3Ryb3koKTsKICAgICAgICAgIH0KICAgICAgICAgIG9wdGlvbnMgPSBudWxsOwogICAgICAgICAgc2Nyb2xsc3B5ID0gbnVsbDsKICAgICAgICB9KTsKCiAgICAgIH0KICAgIH07CgogIH1dKQoKCiAgLmRpcmVjdGl2ZSgnYnNTY3JvbGxzcHlMaXN0JywgWyIkcm9vdFNjb3BlIiwgImRlYm91bmNlIiwgImRpbWVuc2lvbnMiLCAiJHNjcm9sbHNweSIsIGZ1bmN0aW9uKCRyb290U2NvcGUsIGRlYm91bmNlLCBkaW1lbnNpb25zLCAkc2Nyb2xsc3B5KSB7CgogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdBJywKICAgICAgY29tcGlsZTogZnVuY3Rpb24gcG9zdExpbmsoZWxlbWVudCwgYXR0cikgewogICAgICAgIHZhciBjaGlsZHJlbiA9IGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvckFsbCgnbGkgPiBhW2hyZWZdJyk7CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkgewogICAgICAgICAgdmFyIGNoaWxkRWwgPSBhbmd1bGFyLmVsZW1lbnQoY2hpbGQpOwogICAgICAgICAgY2hpbGRFbC5wYXJlbnQoKS5hdHRyKCdicy1zY3JvbGxzcHknLCAnJykuYXR0cignZGF0YS10YXJnZXQnLCBjaGlsZEVsLmF0dHIoJ2hyZWYnKSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICB9OwoKICB9XSk7CgovLyBTb3VyY2U6IHNlbGVjdC5qcwphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAuc2VsZWN0JywgWydtZ2NyZWEubmdTdHJhcC50b29sdGlwJywgJ21nY3JlYS5uZ1N0cmFwLmhlbHBlcnMucGFyc2VPcHRpb25zJ10pCgogIC5wcm92aWRlcignJHNlbGVjdCcsIGZ1bmN0aW9uKCkgewoKICAgIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgPSB7CiAgICAgIGFuaW1hdGlvbjogJ2FtLWZhZGUnLAogICAgICBwcmVmaXhDbGFzczogJ3NlbGVjdCcsCiAgICAgIHByZWZpeEV2ZW50OiAnJHNlbGVjdCcsCiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbS1sZWZ0JywKICAgICAgdGVtcGxhdGU6ICdzZWxlY3Qvc2VsZWN0LnRwbC5odG1sJywKICAgICAgdHJpZ2dlcjogJ2ZvY3VzJywKICAgICAgY29udGFpbmVyOiBmYWxzZSwKICAgICAga2V5Ym9hcmQ6IHRydWUsCiAgICAgIGh0bWw6IGZhbHNlLAogICAgICBkZWxheTogMCwKICAgICAgbXVsdGlwbGU6IGZhbHNlLAogICAgICBhbGxOb25lQnV0dG9uczogZmFsc2UsCiAgICAgIHNvcnQ6IHRydWUsCiAgICAgIGNhcmV0SHRtbDogJyZuYnNwOzxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPicsCiAgICAgIHBsYWNlaG9sZGVyOiAnQ2hvb3NlIGFtb25nIHRoZSBmb2xsb3dpbmcuLi4nLAogICAgICBtYXhMZW5ndGg6IDMsCiAgICAgIG1heExlbmd0aEh0bWw6ICdzZWxlY3RlZCcsCiAgICAgIGljb25DaGVja21hcms6ICdnbHlwaGljb24gZ2x5cGhpY29uLW9rJwogICAgfTsKCiAgICB0aGlzLiRnZXQgPSBbIiR3aW5kb3ciLCAiJGRvY3VtZW50IiwgIiRyb290U2NvcGUiLCAiJHRvb2x0aXAiLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQsICRyb290U2NvcGUsICR0b29sdGlwKSB7CgogICAgICB2YXIgYm9keUVsID0gYW5ndWxhci5lbGVtZW50KCR3aW5kb3cuZG9jdW1lbnQuYm9keSk7CiAgICAgIHZhciBpc05hdGl2ZSA9IC8oaXAoYXxvKWR8aXBob25lfGFuZHJvaWQpL2lnLnRlc3QoJHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTsKICAgICAgdmFyIGlzVG91Y2ggPSAoJ2NyZWF0ZVRvdWNoJyBpbiAkd2luZG93LmRvY3VtZW50KSAmJiBpc05hdGl2ZTsKCiAgICAgIGZ1bmN0aW9uIFNlbGVjdEZhY3RvcnkoZWxlbWVudCwgY29udHJvbGxlciwgY29uZmlnKSB7CgogICAgICAgIHZhciAkc2VsZWN0ID0ge307CgogICAgICAgIC8vIENvbW1vbiB2YXJzCiAgICAgICAgdmFyIG9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgZGVmYXVsdHMsIGNvbmZpZyk7CgogICAgICAgICRzZWxlY3QgPSAkdG9vbHRpcChlbGVtZW50LCBvcHRpb25zKTsKICAgICAgICB2YXIgc2NvcGUgPSAkc2VsZWN0LiRzY29wZTsKCiAgICAgICAgc2NvcGUuJG1hdGNoZXMgPSBbXTsKICAgICAgICBzY29wZS4kYWN0aXZlSW5kZXggPSAwOwogICAgICAgIHNjb3BlLiRpc011bHRpcGxlID0gb3B0aW9ucy5tdWx0aXBsZTsKICAgICAgICBzY29wZS4kc2hvd0FsbE5vbmVCdXR0b25zID0gb3B0aW9ucy5hbGxOb25lQnV0dG9ucyAmJiBvcHRpb25zLm11bHRpcGxlOwogICAgICAgIHNjb3BlLiRpY29uQ2hlY2ttYXJrID0gb3B0aW9ucy5pY29uQ2hlY2ttYXJrOwoKICAgICAgICBzY29wZS4kYWN0aXZhdGUgPSBmdW5jdGlvbihpbmRleCkgewogICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkc2VsZWN0LmFjdGl2YXRlKGluZGV4KTsKICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIHNjb3BlLiRzZWxlY3QgPSBmdW5jdGlvbihpbmRleCwgZXZ0KSB7CiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICRzZWxlY3Quc2VsZWN0KGluZGV4KTsKICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIHNjb3BlLiRpc1Zpc2libGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiAkc2VsZWN0LiRpc1Zpc2libGUoKTsKICAgICAgICB9OwoKICAgICAgICBzY29wZS4kaXNBY3RpdmUgPSBmdW5jdGlvbihpbmRleCkgewogICAgICAgICAgcmV0dXJuICRzZWxlY3QuJGlzQWN0aXZlKGluZGV4KTsKICAgICAgICB9OwoKICAgICAgICBzY29wZS4kc2VsZWN0QWxsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY29wZS4kbWF0Y2hlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoIXNjb3BlLiRpc0FjdGl2ZShpKSkgewogICAgICAgICAgICAgIHNjb3BlLiRzZWxlY3QoaSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBzY29wZS4kc2VsZWN0Tm9uZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NvcGUuJG1hdGNoZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKHNjb3BlLiRpc0FjdGl2ZShpKSkgewogICAgICAgICAgICAgIHNjb3BlLiRzZWxlY3QoaSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAvLyBQdWJsaWMgbWV0aG9kcwoKICAgICAgICAkc2VsZWN0LnVwZGF0ZSA9IGZ1bmN0aW9uKG1hdGNoZXMpIHsKICAgICAgICAgIHNjb3BlLiRtYXRjaGVzID0gbWF0Y2hlczsKICAgICAgICAgICRzZWxlY3QuJHVwZGF0ZUFjdGl2ZUluZGV4KCk7CiAgICAgICAgfTsKCiAgICAgICAgJHNlbGVjdC5hY3RpdmF0ZSA9IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICBpZihvcHRpb25zLm11bHRpcGxlKSB7CiAgICAgICAgICAgIHNjb3BlLiRhY3RpdmVJbmRleC5zb3J0KCk7CiAgICAgICAgICAgICRzZWxlY3QuJGlzQWN0aXZlKGluZGV4KSA/IHNjb3BlLiRhY3RpdmVJbmRleC5zcGxpY2Uoc2NvcGUuJGFjdGl2ZUluZGV4LmluZGV4T2YoaW5kZXgpLCAxKSA6IHNjb3BlLiRhY3RpdmVJbmRleC5wdXNoKGluZGV4KTsKICAgICAgICAgICAgaWYob3B0aW9ucy5zb3J0KSBzY29wZS4kYWN0aXZlSW5kZXguc29ydCgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2NvcGUuJGFjdGl2ZUluZGV4ID0gaW5kZXg7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gc2NvcGUuJGFjdGl2ZUluZGV4OwogICAgICAgIH07CgogICAgICAgICRzZWxlY3Quc2VsZWN0ID0gZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IHNjb3BlLiRtYXRjaGVzW2luZGV4XS52YWx1ZTsKICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgJHNlbGVjdC5hY3RpdmF0ZShpbmRleCk7CiAgICAgICAgICAgIGlmKG9wdGlvbnMubXVsdGlwbGUpIHsKICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRWaWV3VmFsdWUoc2NvcGUuJGFjdGl2ZUluZGV4Lm1hcChmdW5jdGlvbihpbmRleCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiRtYXRjaGVzW2luZGV4XS52YWx1ZTsKICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY29udHJvbGxlci4kc2V0Vmlld1ZhbHVlKHZhbHVlKTsKICAgICAgICAgICAgICAvLyBIaWRlIGlmIHNpbmdsZSBzZWxlY3QKICAgICAgICAgICAgICAkc2VsZWN0LmhpZGUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICAvLyBFbWl0IGV2ZW50CiAgICAgICAgICBzY29wZS4kZW1pdChvcHRpb25zLnByZWZpeEV2ZW50ICsgJy5zZWxlY3QnLCB2YWx1ZSwgaW5kZXgpOwogICAgICAgIH07CgogICAgICAgIC8vIFByb3RlY3RlZCBtZXRob2RzCgogICAgICAgICRzZWxlY3QuJHVwZGF0ZUFjdGl2ZUluZGV4ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZihjb250cm9sbGVyLiRtb2RlbFZhbHVlICYmIHNjb3BlLiRtYXRjaGVzLmxlbmd0aCkgewogICAgICAgICAgICBpZihvcHRpb25zLm11bHRpcGxlICYmIGFuZ3VsYXIuaXNBcnJheShjb250cm9sbGVyLiRtb2RlbFZhbHVlKSkgewogICAgICAgICAgICAgIHNjb3BlLiRhY3RpdmVJbmRleCA9IGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUubWFwKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJHNlbGVjdC4kZ2V0SW5kZXgodmFsdWUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNjb3BlLiRhY3RpdmVJbmRleCA9ICRzZWxlY3QuJGdldEluZGV4KGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYoc2NvcGUuJGFjdGl2ZUluZGV4ID49IHNjb3BlLiRtYXRjaGVzLmxlbmd0aCkgewogICAgICAgICAgICBzY29wZS4kYWN0aXZlSW5kZXggPSBvcHRpb25zLm11bHRpcGxlID8gW10gOiAwOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgICRzZWxlY3QuJGlzVmlzaWJsZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYoIW9wdGlvbnMubWluTGVuZ3RoIHx8ICFjb250cm9sbGVyKSB7CiAgICAgICAgICAgIHJldHVybiBzY29wZS4kbWF0Y2hlcy5sZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgICAvLyBtaW5MZW5ndGggc3VwcG9ydAogICAgICAgICAgcmV0dXJuIHNjb3BlLiRtYXRjaGVzLmxlbmd0aCAmJiBjb250cm9sbGVyLiR2aWV3VmFsdWUubGVuZ3RoID49IG9wdGlvbnMubWluTGVuZ3RoOwogICAgICAgIH07CgogICAgICAgICRzZWxlY3QuJGlzQWN0aXZlID0gZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICAgIGlmKG9wdGlvbnMubXVsdGlwbGUpIHsKICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiRhY3RpdmVJbmRleC5pbmRleE9mKGluZGV4KSAhPT0gLTE7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gc2NvcGUuJGFjdGl2ZUluZGV4ID09PSBpbmRleDsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkc2VsZWN0LiRnZXRJbmRleCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICB2YXIgbCA9IHNjb3BlLiRtYXRjaGVzLmxlbmd0aCwgaSA9IGw7CiAgICAgICAgICBpZighbCkgcmV0dXJuOwogICAgICAgICAgZm9yKGkgPSBsOyBpLS07KSB7CiAgICAgICAgICAgIGlmKHNjb3BlLiRtYXRjaGVzW2ldLnZhbHVlID09PSB2YWx1ZSkgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBpZihpIDwgMCkgcmV0dXJuOwogICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgfTsKCiAgICAgICAgJHNlbGVjdC4kb25Nb3VzZURvd24gPSBmdW5jdGlvbihldnQpIHsKICAgICAgICAgIC8vIFByZXZlbnQgYmx1ciBvbiBtb3VzZWRvd24gb24gLmRyb3Bkb3duLW1lbnUKICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgLy8gRW11bGF0ZSBjbGljayBmb3IgbW9iaWxlIGRldmljZXMKICAgICAgICAgIGlmKGlzVG91Y2gpIHsKICAgICAgICAgICAgdmFyIHRhcmdldEVsID0gYW5ndWxhci5lbGVtZW50KGV2dC50YXJnZXQpOwogICAgICAgICAgICB0YXJnZXRFbC50cmlnZ2VySGFuZGxlcignY2xpY2snKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkc2VsZWN0LiRvbktleURvd24gPSBmdW5jdGlvbihldnQpIHsKICAgICAgICAgIGlmICghLyg5fDEzfDM4fDQwKS8udGVzdChldnQua2V5Q29kZSkpIHJldHVybjsKICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwoKICAgICAgICAgIC8vIFNlbGVjdCB3aXRoIGVudGVyCiAgICAgICAgICBpZighb3B0aW9ucy5tdWx0aXBsZSAmJiAoZXZ0LmtleUNvZGUgPT09IDEzIHx8IGV2dC5rZXlDb2RlID09PSA5KSkgewogICAgICAgICAgICByZXR1cm4gJHNlbGVjdC5zZWxlY3Qoc2NvcGUuJGFjdGl2ZUluZGV4KTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBOYXZpZ2F0ZSB3aXRoIGtleWJvYXJkCiAgICAgICAgICBpZihldnQua2V5Q29kZSA9PT0gMzggJiYgc2NvcGUuJGFjdGl2ZUluZGV4ID4gMCkgc2NvcGUuJGFjdGl2ZUluZGV4LS07CiAgICAgICAgICBlbHNlIGlmKGV2dC5rZXlDb2RlID09PSA0MCAmJiBzY29wZS4kYWN0aXZlSW5kZXggPCBzY29wZS4kbWF0Y2hlcy5sZW5ndGggLSAxKSBzY29wZS4kYWN0aXZlSW5kZXgrKzsKICAgICAgICAgIGVsc2UgaWYoYW5ndWxhci5pc1VuZGVmaW5lZChzY29wZS4kYWN0aXZlSW5kZXgpKSBzY29wZS4kYWN0aXZlSW5kZXggPSAwOwogICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgIH07CgogICAgICAgIC8vIE92ZXJyaWRlcwoKICAgICAgICB2YXIgX3Nob3cgPSAkc2VsZWN0LnNob3c7CiAgICAgICAgJHNlbGVjdC5zaG93ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBfc2hvdygpOwogICAgICAgICAgaWYob3B0aW9ucy5tdWx0aXBsZSkgewogICAgICAgICAgICAkc2VsZWN0LiRlbGVtZW50LmFkZENsYXNzKCdzZWxlY3QtbXVsdGlwbGUnKTsKICAgICAgICAgIH0KICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICRzZWxlY3QuJGVsZW1lbnQub24oaXNUb3VjaCA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLCAkc2VsZWN0LiRvbk1vdXNlRG93bik7CiAgICAgICAgICAgIGlmKG9wdGlvbnMua2V5Ym9hcmQpIHsKICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgJHNlbGVjdC4kb25LZXlEb3duKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIF9oaWRlID0gJHNlbGVjdC5oaWRlOwogICAgICAgICRzZWxlY3QuaGlkZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgJHNlbGVjdC4kZWxlbWVudC5vZmYoaXNUb3VjaCA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLCAkc2VsZWN0LiRvbk1vdXNlRG93bik7CiAgICAgICAgICBpZihvcHRpb25zLmtleWJvYXJkKSB7CiAgICAgICAgICAgIGVsZW1lbnQub2ZmKCdrZXlkb3duJywgJHNlbGVjdC4kb25LZXlEb3duKTsKICAgICAgICAgIH0KICAgICAgICAgIF9oaWRlKHRydWUpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiAkc2VsZWN0OwoKICAgICAgfQoKICAgICAgU2VsZWN0RmFjdG9yeS5kZWZhdWx0cyA9IGRlZmF1bHRzOwogICAgICByZXR1cm4gU2VsZWN0RmFjdG9yeTsKCiAgICB9XTsKCiAgfSkKCiAgLmRpcmVjdGl2ZSgnYnNTZWxlY3QnLCBbIiR3aW5kb3ciLCAiJHBhcnNlIiwgIiRxIiwgIiRzZWxlY3QiLCAiJHBhcnNlT3B0aW9ucyIsIGZ1bmN0aW9uKCR3aW5kb3csICRwYXJzZSwgJHEsICRzZWxlY3QsICRwYXJzZU9wdGlvbnMpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSAkc2VsZWN0LmRlZmF1bHRzOwoKICAgIHJldHVybiB7CiAgICAgIHJlc3RyaWN0OiAnRUFDJywKICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLAogICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY29udHJvbGxlcikgewoKICAgICAgICAvLyBEaXJlY3RpdmUgb3B0aW9ucwogICAgICAgIHZhciBvcHRpb25zID0ge3Njb3BlOiBzY29wZSwgcGxhY2Vob2xkZXI6IGRlZmF1bHRzLnBsYWNlaG9sZGVyfTsKICAgICAgICBhbmd1bGFyLmZvckVhY2goWydwbGFjZW1lbnQnLCAnY29udGFpbmVyJywgJ2RlbGF5JywgJ3RyaWdnZXInLCAna2V5Ym9hcmQnLCAnaHRtbCcsICdhbmltYXRpb24nLCAndGVtcGxhdGUnLCAncGxhY2Vob2xkZXInLCAnbXVsdGlwbGUnLCAnYWxsTm9uZUJ1dHRvbnMnLCAnbWF4TGVuZ3RoJywgJ21heExlbmd0aEh0bWwnXSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICBpZihhbmd1bGFyLmlzRGVmaW5lZChhdHRyW2tleV0pKSBvcHRpb25zW2tleV0gPSBhdHRyW2tleV07CiAgICAgICAgfSk7CgogICAgICAgIC8vIEFkZCBzdXBwb3J0IGZvciBzZWxlY3QgbWFya3VwCiAgICAgICAgaWYoZWxlbWVudFswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0JykgewogICAgICAgICAgdmFyIGlucHV0RWwgPSBlbGVtZW50OwogICAgICAgICAgaW5wdXRFbC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgICAgICAgZWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgnPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiPjwvYnV0dG9uPicpOwogICAgICAgICAgaW5wdXRFbC5hZnRlcihlbGVtZW50KTsKICAgICAgICB9CgogICAgICAgIC8vIEJ1aWxkIHByb3BlciBuZ09wdGlvbnMKICAgICAgICB2YXIgcGFyc2VkT3B0aW9ucyA9ICRwYXJzZU9wdGlvbnMoYXR0ci5uZ09wdGlvbnMpOwoKICAgICAgICAvLyBJbml0aWFsaXplIHNlbGVjdAogICAgICAgIHZhciBzZWxlY3QgPSAkc2VsZWN0KGVsZW1lbnQsIGNvbnRyb2xsZXIsIG9wdGlvbnMpOwoKICAgICAgICAvLyBXYXRjaCBuZ09wdGlvbnMgdmFsdWVzIGJlZm9yZSBmaWx0ZXJpbmcgZm9yIGNoYW5nZXMKICAgICAgICB2YXIgd2F0Y2hlZE9wdGlvbnMgPSBwYXJzZWRPcHRpb25zLiRtYXRjaFs3XS5yZXBsYWNlKC9cfC4rLywgJycpLnRyaW0oKTsKICAgICAgICBzY29wZS4kd2F0Y2god2F0Y2hlZE9wdGlvbnMsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgLy8gY29uc29sZS53YXJuKCdzY29wZS4kd2F0Y2goJXMpJywgd2F0Y2hlZE9wdGlvbnMsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7CiAgICAgICAgICBwYXJzZWRPcHRpb25zLnZhbHVlc0ZuKHNjb3BlLCBjb250cm9sbGVyKQogICAgICAgICAgLnRoZW4oZnVuY3Rpb24odmFsdWVzKSB7CiAgICAgICAgICAgIHNlbGVjdC51cGRhdGUodmFsdWVzKTsKICAgICAgICAgICAgY29udHJvbGxlci4kcmVuZGVyKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9LCB0cnVlKTsKCiAgICAgICAgLy8gV2F0Y2ggbW9kZWwgZm9yIGNoYW5nZXMKICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ01vZGVsLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgIC8vIGNvbnNvbGUud2Fybignc2NvcGUuJHdhdGNoKCVzKScsIGF0dHIubmdNb2RlbCwgbmV3VmFsdWUsIG9sZFZhbHVlKTsKICAgICAgICAgIHNlbGVjdC4kdXBkYXRlQWN0aXZlSW5kZXgoKTsKICAgICAgICAgIGNvbnRyb2xsZXIuJHJlbmRlcigpOwogICAgICAgIH0sIHRydWUpOwoKICAgICAgICAvLyBNb2RlbCByZW5kZXJpbmcgaW4gdmlldwogICAgICAgIGNvbnRyb2xsZXIuJHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIGNvbnNvbGUud2FybignJHJlbmRlcicsIGVsZW1lbnQuYXR0cignbmctbW9kZWwnKSwgJ2NvbnRyb2xsZXIuJG1vZGVsVmFsdWUnLCB0eXBlb2YgY29udHJvbGxlci4kbW9kZWxWYWx1ZSwgY29udHJvbGxlci4kbW9kZWxWYWx1ZSwgJ2NvbnRyb2xsZXIuJHZpZXdWYWx1ZScsIHR5cGVvZiBjb250cm9sbGVyLiR2aWV3VmFsdWUsIGNvbnRyb2xsZXIuJHZpZXdWYWx1ZSk7CiAgICAgICAgICB2YXIgc2VsZWN0ZWQsIGluZGV4OwogICAgICAgICAgaWYob3B0aW9ucy5tdWx0aXBsZSAmJiBhbmd1bGFyLmlzQXJyYXkoY29udHJvbGxlci4kbW9kZWxWYWx1ZSkpIHsKICAgICAgICAgICAgc2VsZWN0ZWQgPSBjb250cm9sbGVyLiRtb2RlbFZhbHVlLm1hcChmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgIGluZGV4ID0gc2VsZWN0LiRnZXRJbmRleCh2YWx1ZSk7CiAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKGluZGV4KSA/IHNlbGVjdC4kc2NvcGUuJG1hdGNoZXNbaW5kZXhdLmxhYmVsIDogZmFsc2U7CiAgICAgICAgICAgIH0pLmZpbHRlcihhbmd1bGFyLmlzRGVmaW5lZCk7CiAgICAgICAgICAgIGlmKHNlbGVjdGVkLmxlbmd0aCA+IChvcHRpb25zLm1heExlbmd0aCB8fCBkZWZhdWx0cy5tYXhMZW5ndGgpKSB7CiAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBzZWxlY3RlZC5sZW5ndGggKyAnICcgKyAob3B0aW9ucy5tYXhMZW5ndGhIdG1sIHx8IGRlZmF1bHRzLm1heExlbmd0aEh0bWwpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNlbGVjdGVkID0gc2VsZWN0ZWQuam9pbignLCAnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaW5kZXggPSBzZWxlY3QuJGdldEluZGV4KGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUpOwogICAgICAgICAgICBzZWxlY3RlZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKGluZGV4KSA/IHNlbGVjdC4kc2NvcGUuJG1hdGNoZXNbaW5kZXhdLmxhYmVsIDogZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICBlbGVtZW50Lmh0bWwoKHNlbGVjdGVkID8gc2VsZWN0ZWQgOiBvcHRpb25zLnBsYWNlaG9sZGVyKSArIGRlZmF1bHRzLmNhcmV0SHRtbCk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gR2FyYmFnZSBjb2xsZWN0aW9uCiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKHNlbGVjdCkgc2VsZWN0LmRlc3Ryb3koKTsKICAgICAgICAgIG9wdGlvbnMgPSBudWxsOwogICAgICAgICAgc2VsZWN0ID0gbnVsbDsKICAgICAgICB9KTsKCiAgICAgIH0KICAgIH07CgogIH1dKTsKCi8vIFNvdXJjZTogdGFiLmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcC50YWInLCBbXSkKCiAgLnByb3ZpZGVyKCckdGFiJywgZnVuY3Rpb24oKSB7CgogICAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHsKICAgICAgYW5pbWF0aW9uOiAnYW0tZmFkZScsCiAgICAgIHRlbXBsYXRlOiAndGFiL3RhYi50cGwuaHRtbCcsCiAgICAgIG5hdkNsYXNzOiAnbmF2LXRhYnMnLAogICAgICBhY3RpdmVDbGFzczogJ2FjdGl2ZScKICAgIH07CgogICAgdmFyIGNvbnRyb2xsZXIgPSB0aGlzLmNvbnRyb2xsZXIgPSBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgLy8gQXR0cmlidXRlcyBvcHRpb25zCiAgICAgIHNlbGYuJG9wdGlvbnMgPSBhbmd1bGFyLmNvcHkoZGVmYXVsdHMpOwogICAgICBhbmd1bGFyLmZvckVhY2goWydhbmltYXRpb24nLCAnbmF2Q2xhc3MnLCAnYWN0aXZlQ2xhc3MnXSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgaWYoYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzW2tleV0pKSBzZWxmLiRvcHRpb25zW2tleV0gPSAkYXR0cnNba2V5XTsKICAgICAgfSk7CgogICAgICAvLyBQdWJsaXNoIG9wdGlvbnMgb24gc2NvcGUKICAgICAgJHNjb3BlLiRuYXZDbGFzcyA9IHNlbGYuJG9wdGlvbnMubmF2Q2xhc3M7CiAgICAgICRzY29wZS4kYWN0aXZlQ2xhc3MgPSBzZWxmLiRvcHRpb25zLmFjdGl2ZUNsYXNzOwoKICAgICAgc2VsZi4kcGFuZXMgPSAkc2NvcGUuJHBhbmVzID0gW107CgogICAgICBzZWxmLiR2aWV3Q2hhbmdlTGlzdGVuZXJzID0gW107CgogICAgICBzZWxmLiRwdXNoID0gZnVuY3Rpb24ocGFuZSkgewogICAgICAgIHNlbGYuJHBhbmVzLnB1c2gocGFuZSk7CiAgICAgIH07CgogICAgICBzZWxmLiRyZW1vdmUgPSBmdW5jdGlvbihwYW5lKSB7CiAgICAgICAgdmFyIGluZGV4ID0gc2VsZi4kcGFuZXMuaW5kZXhPZihwYW5lKTsKICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSBzZWxmLiRwYW5lcy4kYWN0aXZlOwoKICAgICAgICAvLyByZW1vdmUgcGFuZSBmcm9tICRwYW5lcyBhcnJheQogICAgICAgIHNlbGYuJHBhbmVzLnNwbGljZShpbmRleCwgMSk7CgogICAgICAgIGlmIChpbmRleCA8IGFjdGl2ZUluZGV4KSB7CiAgICAgICAgICAvLyB3ZSByZW1vdmVkIGEgcGFuZSBiZWZvcmUgdGhlIGFjdGl2ZSBwYW5lLCBzbyB3ZSBuZWVkIHRvIAogICAgICAgICAgLy8gZGVjcmVtZW50IHRoZSBhY3RpdmUgcGFuZSBpbmRleAogICAgICAgICAgYWN0aXZlSW5kZXgtLTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IGFjdGl2ZUluZGV4ICYmIGFjdGl2ZUluZGV4ID09PSBzZWxmLiRwYW5lcy5sZW5ndGgpIHsKICAgICAgICAgIC8vIHdlIHJlbW92ZSB0aGUgYWN0aXZlIHBhbmUgYW5kIGl0IHdhcyB0aGUgb25lIGF0IHRoZSBlbmQsCiAgICAgICAgICAvLyBzbyBzZWxlY3QgdGhlIHByZXZpb3VzIG9uZQogICAgICAgICAgYWN0aXZlSW5kZXgtLTsKICAgICAgICB9CiAgICAgICAgc2VsZi4kc2V0QWN0aXZlKGFjdGl2ZUluZGV4KTsKICAgICAgfTsKCiAgICAgIHNlbGYuJHBhbmVzLiRhY3RpdmUgPSAwOwogICAgICBzZWxmLiRzZXRBY3RpdmUgPSAkc2NvcGUuJHNldEFjdGl2ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgc2VsZi4kcGFuZXMuJGFjdGl2ZSA9IHZhbHVlOwogICAgICAgIHNlbGYuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihmbikgewogICAgICAgICAgZm4oKTsKICAgICAgICB9KTsKICAgICAgfTsKCiAgICB9OwoKICAgIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgJHRhYiA9IHt9OwogICAgICAkdGFiLmRlZmF1bHRzID0gZGVmYXVsdHM7CiAgICAgICR0YWIuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7CiAgICAgIHJldHVybiAkdGFiOwogICAgfTsKCiAgfSkKCiAgLmRpcmVjdGl2ZSgnYnNUYWJzJywgWyIkd2luZG93IiwgIiRhbmltYXRlIiwgIiR0YWIiLCBmdW5jdGlvbigkd2luZG93LCAkYW5pbWF0ZSwgJHRhYikgewoKICAgIHZhciBkZWZhdWx0cyA9ICR0YWIuZGVmYXVsdHM7CgogICAgcmV0dXJuIHsKICAgICAgcmVxdWlyZTogWyc/bmdNb2RlbCcsICdic1RhYnMnXSwKICAgICAgdHJhbnNjbHVkZTogdHJ1ZSwKICAgICAgc2NvcGU6IHRydWUsCiAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRhdHRycycsICR0YWIuY29udHJvbGxlcl0sCiAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgcmV0dXJuIGF0dHIudGVtcGxhdGUgfHwgZGVmYXVsdHMudGVtcGxhdGU7CiAgICAgIH0sCiAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMpIHsKCiAgICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY29udHJvbGxlcnNbMF07CiAgICAgICAgdmFyIGJzVGFic0N0cmwgPSBjb250cm9sbGVyc1sxXTsKCiAgICAgICAgaWYobmdNb2RlbEN0cmwpIHsKCiAgICAgICAgICAvLyBVcGRhdGUgdGhlIG1vZGVsVmFsdWUgZm9sbG93aW5nCiAgICAgICAgICBic1RhYnNDdHJsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoYnNUYWJzQ3RybC4kcGFuZXMuJGFjdGl2ZSk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICAvLyBtb2RlbFZhbHVlIC0+ICRmb3JtYXR0ZXJzIC0+IHZpZXdWYWx1ZQogICAgICAgICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihtb2RlbFZhbHVlKSB7CiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignJGZvcm1hdHRlcigiJXMiKTogbW9kZWxWYWx1ZT0lbyAoJW8pJywgZWxlbWVudC5hdHRyKCduZy1tb2RlbCcpLCBtb2RlbFZhbHVlLCB0eXBlb2YgbW9kZWxWYWx1ZSk7CiAgICAgICAgICAgIGJzVGFic0N0cmwuJHNldEFjdGl2ZShtb2RlbFZhbHVlICogMSk7CiAgICAgICAgICAgIHJldHVybiBtb2RlbFZhbHVlOwogICAgICAgICAgfSk7CgogICAgICAgIH0KCiAgICAgIH0KICAgIH07CgogIH1dKQoKICAuZGlyZWN0aXZlKCdic1BhbmUnLCBbIiR3aW5kb3ciLCAiJGFuaW1hdGUiLCAiJHNjZSIsIGZ1bmN0aW9uKCR3aW5kb3csICRhbmltYXRlLCAkc2NlKSB7CgogICAgcmV0dXJuIHsKICAgICAgcmVxdWlyZTogWydeP25nTW9kZWwnLCAnXmJzVGFicyddLAogICAgICBzY29wZTogdHJ1ZSwKICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycykgewoKICAgICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjb250cm9sbGVyc1swXTsKICAgICAgICB2YXIgYnNUYWJzQ3RybCA9IGNvbnRyb2xsZXJzWzFdOwoKICAgICAgICAvLyBBZGQgYmFzZSBjbGFzcwogICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ3RhYi1wYW5lJyk7CgogICAgICAgIC8vIE9ic2VydmUgdGl0bGUgYXR0cmlidXRlIGZvciBjaGFuZ2UKICAgICAgICBhdHRycy4kb2JzZXJ2ZSgndGl0bGUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgIHNjb3BlLnRpdGxlID0gJHNjZS50cnVzdEFzSHRtbChuZXdWYWx1ZSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIEFkZCBhbmltYXRpb24gY2xhc3MKICAgICAgICBpZihic1RhYnNDdHJsLiRvcHRpb25zLmFuaW1hdGlvbikgewogICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhic1RhYnNDdHJsLiRvcHRpb25zLmFuaW1hdGlvbik7CiAgICAgICAgfQoKICAgICAgICAvLyBQdXNoIHBhbmUgdG8gcGFyZW50IGJzVGFicyBjb250cm9sbGVyCiAgICAgICAgYnNUYWJzQ3RybC4kcHVzaChzY29wZSk7CgogICAgICAgIC8vIHJlbW92ZSBwYW5lIGZyb20gdGFiIGNvbnRyb2xsZXIgd2hlbiBwYW5lIGlzIGRlc3Ryb3llZAogICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGJzVGFic0N0cmwuJHJlbW92ZShzY29wZSk7CiAgICAgICAgfSk7CgogICAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgICAgIHZhciBpbmRleCA9IGJzVGFic0N0cmwuJHBhbmVzLmluZGV4T2Yoc2NvcGUpOwogICAgICAgICAgdmFyIGFjdGl2ZSA9IGJzVGFic0N0cmwuJHBhbmVzLiRhY3RpdmU7CiAgICAgICAgICAkYW5pbWF0ZVtpbmRleCA9PT0gYWN0aXZlID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGVsZW1lbnQsIGJzVGFic0N0cmwuJG9wdGlvbnMuYWN0aXZlQ2xhc3MpOwogICAgICAgIH0KCiAgICAgICAgYnNUYWJzQ3RybC4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgcmVuZGVyKCk7CiAgICAgICAgfSk7CiAgICAgICAgcmVuZGVyKCk7CgogICAgICB9CiAgICB9OwoKICB9XSk7CgovLyBTb3VyY2U6IHRpbWVwaWNrZXIuanMKYW5ndWxhci5tb2R1bGUoJ21nY3JlYS5uZ1N0cmFwLnRpbWVwaWNrZXInLCBbJ21nY3JlYS5uZ1N0cmFwLmhlbHBlcnMuZGF0ZVBhcnNlcicsICdtZ2NyZWEubmdTdHJhcC50b29sdGlwJ10pCgogIC5wcm92aWRlcignJHRpbWVwaWNrZXInLCBmdW5jdGlvbigpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0gewogICAgICBhbmltYXRpb246ICdhbS1mYWRlJywKICAgICAgcHJlZml4Q2xhc3M6ICd0aW1lcGlja2VyJywKICAgICAgcGxhY2VtZW50OiAnYm90dG9tLWxlZnQnLAogICAgICB0ZW1wbGF0ZTogJ3RpbWVwaWNrZXIvdGltZXBpY2tlci50cGwuaHRtbCcsCiAgICAgIHRyaWdnZXI6ICdmb2N1cycsCiAgICAgIGNvbnRhaW5lcjogZmFsc2UsCiAgICAgIGtleWJvYXJkOiB0cnVlLAogICAgICBodG1sOiBmYWxzZSwKICAgICAgZGVsYXk6IDAsCiAgICAgIC8vIGxhbmc6ICRsb2NhbGUuaWQsCiAgICAgIHVzZU5hdGl2ZTogdHJ1ZSwKICAgICAgdGltZVR5cGU6ICdkYXRlJywKICAgICAgdGltZUZvcm1hdDogJ3Nob3J0VGltZScsCiAgICAgIG1vZGVsVGltZUZvcm1hdDogbnVsbCwKICAgICAgYXV0b2Nsb3NlOiBmYWxzZSwKICAgICAgbWluVGltZTogLUluZmluaXR5LAogICAgICBtYXhUaW1lOiArSW5maW5pdHksCiAgICAgIGxlbmd0aDogNSwKICAgICAgaG91clN0ZXA6IDEsCiAgICAgIG1pbnV0ZVN0ZXA6IDUsCiAgICAgIGljb25VcDogJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcsCiAgICAgIGljb25Eb3duOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24nLAogICAgICBhcnJvd0JlaGF2aW9yOiAncGFnZXInCiAgICB9OwoKICAgIHRoaXMuJGdldCA9IFsiJHdpbmRvdyIsICIkZG9jdW1lbnQiLCAiJHJvb3RTY29wZSIsICIkc2NlIiwgIiRsb2NhbGUiLCAiZGF0ZUZpbHRlciIsICIkdG9vbHRpcCIsICIkdGltZW91dCIsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCwgJHJvb3RTY29wZSwgJHNjZSwgJGxvY2FsZSwgZGF0ZUZpbHRlciwgJHRvb2x0aXAsICR0aW1lb3V0KSB7CgogICAgICB2YXIgYm9keUVsID0gYW5ndWxhci5lbGVtZW50KCR3aW5kb3cuZG9jdW1lbnQuYm9keSk7CiAgICAgIHZhciBpc05hdGl2ZSA9IC8oaXAoYXxvKWR8aXBob25lfGFuZHJvaWQpL2lnLnRlc3QoJHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTsKICAgICAgdmFyIGlzVG91Y2ggPSAoJ2NyZWF0ZVRvdWNoJyBpbiAkd2luZG93LmRvY3VtZW50KSAmJiBpc05hdGl2ZTsKICAgICAgaWYoIWRlZmF1bHRzLmxhbmcpIGRlZmF1bHRzLmxhbmcgPSAkbG9jYWxlLmlkOwoKICAgICAgZnVuY3Rpb24gdGltZXBpY2tlckZhY3RvcnkoZWxlbWVudCwgY29udHJvbGxlciwgY29uZmlnKSB7CgogICAgICAgIHZhciAkdGltZXBpY2tlciA9ICR0b29sdGlwKGVsZW1lbnQsIGFuZ3VsYXIuZXh0ZW5kKHt9LCBkZWZhdWx0cywgY29uZmlnKSk7CiAgICAgICAgdmFyIHBhcmVudFNjb3BlID0gY29uZmlnLnNjb3BlOwogICAgICAgIHZhciBvcHRpb25zID0gJHRpbWVwaWNrZXIuJG9wdGlvbnM7CiAgICAgICAgdmFyIHNjb3BlID0gJHRpbWVwaWNrZXIuJHNjb3BlOwoKICAgICAgICAvLyBWaWV3IHZhcnMKCiAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSAwOwogICAgICAgIHZhciBzdGFydERhdGUgPSBjb250cm9sbGVyLiRkYXRlVmFsdWUgfHwgbmV3IERhdGUoKTsKICAgICAgICB2YXIgdmlld0RhdGUgPSB7aG91cjogc3RhcnREYXRlLmdldEhvdXJzKCksIG1lcmlkaWFuOiBzdGFydERhdGUuZ2V0SG91cnMoKSA8IDEyLCBtaW51dGU6IHN0YXJ0RGF0ZS5nZXRNaW51dGVzKCksIHNlY29uZDogc3RhcnREYXRlLmdldFNlY29uZHMoKSwgbWlsbGlzZWNvbmQ6IHN0YXJ0RGF0ZS5nZXRNaWxsaXNlY29uZHMoKX07CgogICAgICAgIHZhciBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbb3B0aW9ucy50aW1lRm9ybWF0XSB8fCBvcHRpb25zLnRpbWVGb3JtYXQ7CiAgICAgICAgdmFyIGZvcm1hdHMgPSAvKGgrKShbOlwuXSk/KG0rKVsgXT8oYT8pL2kuZXhlYyhmb3JtYXQpLnNsaWNlKDEpOwogICAgICAgIHNjb3BlLiRpY29uVXAgPSBvcHRpb25zLmljb25VcDsKICAgICAgICBzY29wZS4kaWNvbkRvd24gPSBvcHRpb25zLmljb25Eb3duOwoKICAgICAgICAvLyBTY29wZSBtZXRob2RzCgogICAgICAgIHNjb3BlLiRzZWxlY3QgPSBmdW5jdGlvbihkYXRlLCBpbmRleCkgewogICAgICAgICAgJHRpbWVwaWNrZXIuc2VsZWN0KGRhdGUsIGluZGV4KTsKICAgICAgICB9OwogICAgICAgIHNjb3BlLiRtb3ZlSW5kZXggPSBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgICAgICR0aW1lcGlja2VyLiRtb3ZlSW5kZXgodmFsdWUsIGluZGV4KTsKICAgICAgICB9OwogICAgICAgIHNjb3BlLiRzd2l0Y2hNZXJpZGlhbiA9IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICAgICR0aW1lcGlja2VyLnN3aXRjaE1lcmlkaWFuKGRhdGUpOwogICAgICAgIH07CgogICAgICAgIC8vIFB1YmxpYyBtZXRob2RzCgogICAgICAgICR0aW1lcGlja2VyLnVwZGF0ZSA9IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICAgIC8vIGNvbnNvbGUud2FybignJHRpbWVwaWNrZXIudXBkYXRlKCkgbmV3VmFsdWU9JW8nLCBkYXRlKTsKICAgICAgICAgIGlmKGFuZ3VsYXIuaXNEYXRlKGRhdGUpICYmICFpc05hTihkYXRlLmdldFRpbWUoKSkpIHsKICAgICAgICAgICAgJHRpbWVwaWNrZXIuJGRhdGUgPSBkYXRlOwogICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh2aWV3RGF0ZSwge2hvdXI6IGRhdGUuZ2V0SG91cnMoKSwgbWludXRlOiBkYXRlLmdldE1pbnV0ZXMoKSwgc2Vjb25kOiBkYXRlLmdldFNlY29uZHMoKSwgbWlsbGlzZWNvbmQ6IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCl9KTsKICAgICAgICAgICAgJHRpbWVwaWNrZXIuJGJ1aWxkKCk7CiAgICAgICAgICB9IGVsc2UgaWYoISR0aW1lcGlja2VyLiRpc0J1aWx0KSB7CiAgICAgICAgICAgICR0aW1lcGlja2VyLiRidWlsZCgpOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgICR0aW1lcGlja2VyLnNlbGVjdCA9IGZ1bmN0aW9uKGRhdGUsIGluZGV4LCBrZWVwKSB7CiAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJyR0aW1lcGlja2VyLnNlbGVjdCcsIGRhdGUsIHNjb3BlLiRtb2RlKTsKICAgICAgICAgIGlmKCFjb250cm9sbGVyLiRkYXRlVmFsdWUgfHwgaXNOYU4oY29udHJvbGxlci4kZGF0ZVZhbHVlLmdldFRpbWUoKSkpIGNvbnRyb2xsZXIuJGRhdGVWYWx1ZSA9IG5ldyBEYXRlKDE5NzAsIDAsIDEpOwogICAgICAgICAgaWYoIWFuZ3VsYXIuaXNEYXRlKGRhdGUpKSBkYXRlID0gbmV3IERhdGUoZGF0ZSk7CiAgICAgICAgICBpZihpbmRleCA9PT0gMCkgY29udHJvbGxlci4kZGF0ZVZhbHVlLnNldEhvdXJzKGRhdGUuZ2V0SG91cnMoKSk7CiAgICAgICAgICBlbHNlIGlmKGluZGV4ID09PSAxKSBjb250cm9sbGVyLiRkYXRlVmFsdWUuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSk7CiAgICAgICAgICBjb250cm9sbGVyLiRzZXRWaWV3VmFsdWUoY29udHJvbGxlci4kZGF0ZVZhbHVlKTsKICAgICAgICAgIGNvbnRyb2xsZXIuJHJlbmRlcigpOwogICAgICAgICAgaWYob3B0aW9ucy5hdXRvY2xvc2UgJiYgIWtlZXApIHsKICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7ICR0aW1lcGlja2VyLmhpZGUodHJ1ZSk7IH0pOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgICR0aW1lcGlja2VyLnN3aXRjaE1lcmlkaWFuID0gZnVuY3Rpb24oZGF0ZSkgewogICAgICAgICAgaWYgKCFjb250cm9sbGVyLiRkYXRlVmFsdWUgfHwgaXNOYU4oY29udHJvbGxlci4kZGF0ZVZhbHVlLmdldFRpbWUoKSkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGhvdXJzID0gKGRhdGUgfHwgY29udHJvbGxlci4kZGF0ZVZhbHVlKS5nZXRIb3VycygpOwogICAgICAgICAgY29udHJvbGxlci4kZGF0ZVZhbHVlLnNldEhvdXJzKGhvdXJzIDwgMTIgPyBob3VycyArIDEyIDogaG91cnMgLSAxMik7CiAgICAgICAgICBjb250cm9sbGVyLiRzZXRWaWV3VmFsdWUoY29udHJvbGxlci4kZGF0ZVZhbHVlKTsKICAgICAgICAgIGNvbnRyb2xsZXIuJHJlbmRlcigpOwogICAgICAgIH07CgogICAgICAgIC8vIFByb3RlY3RlZCBtZXRob2RzCgogICAgICAgICR0aW1lcGlja2VyLiRidWlsZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgLy8gY29uc29sZS53YXJuKCckdGltZXBpY2tlci4kYnVpbGQoKSB2aWV3RGF0ZT0lbycsIHZpZXdEYXRlKTsKICAgICAgICAgIHZhciBpLCBtaWRJbmRleCA9IHNjb3BlLm1pZEluZGV4ID0gcGFyc2VJbnQob3B0aW9ucy5sZW5ndGggLyAyLCAxMCk7CiAgICAgICAgICB2YXIgaG91cnMgPSBbXSwgaG91cjsKICAgICAgICAgIGZvcihpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaG91ciA9IG5ldyBEYXRlKDE5NzAsIDAsIDEsIHZpZXdEYXRlLmhvdXIgLSAobWlkSW5kZXggLSBpKSAqIG9wdGlvbnMuaG91clN0ZXApOwogICAgICAgICAgICBob3Vycy5wdXNoKHtkYXRlOiBob3VyLCBsYWJlbDogZGF0ZUZpbHRlcihob3VyLCBmb3JtYXRzWzBdKSwgc2VsZWN0ZWQ6ICR0aW1lcGlja2VyLiRkYXRlICYmICR0aW1lcGlja2VyLiRpc1NlbGVjdGVkKGhvdXIsIDApLCBkaXNhYmxlZDogJHRpbWVwaWNrZXIuJGlzRGlzYWJsZWQoaG91ciwgMCl9KTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBtaW51dGVzID0gW10sIG1pbnV0ZTsKICAgICAgICAgIGZvcihpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgbWludXRlID0gbmV3IERhdGUoMTk3MCwgMCwgMSwgMCwgdmlld0RhdGUubWludXRlIC0gKG1pZEluZGV4IC0gaSkgKiBvcHRpb25zLm1pbnV0ZVN0ZXApOwogICAgICAgICAgICBtaW51dGVzLnB1c2goe2RhdGU6IG1pbnV0ZSwgbGFiZWw6IGRhdGVGaWx0ZXIobWludXRlLCBmb3JtYXRzWzJdKSwgc2VsZWN0ZWQ6ICR0aW1lcGlja2VyLiRkYXRlICYmICR0aW1lcGlja2VyLiRpc1NlbGVjdGVkKG1pbnV0ZSwgMSksIGRpc2FibGVkOiAkdGltZXBpY2tlci4kaXNEaXNhYmxlZChtaW51dGUsIDEpfSk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHJvd3MgPSBbXTsKICAgICAgICAgIGZvcihpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcm93cy5wdXNoKFtob3Vyc1tpXSwgbWludXRlc1tpXV0pOwogICAgICAgICAgfQogICAgICAgICAgc2NvcGUucm93cyA9IHJvd3M7CiAgICAgICAgICBzY29wZS5zaG93QU0gPSAhIWZvcm1hdHNbM107CiAgICAgICAgICBzY29wZS5pc0FNID0gKCR0aW1lcGlja2VyLiRkYXRlIHx8IGhvdXJzW21pZEluZGV4XS5kYXRlKS5nZXRIb3VycygpIDwgMTI7CiAgICAgICAgICBzY29wZS50aW1lU2VwYXJhdG9yID0gZm9ybWF0c1sxXTsKICAgICAgICAgICR0aW1lcGlja2VyLiRpc0J1aWx0ID0gdHJ1ZTsKICAgICAgICB9OwoKICAgICAgICAkdGltZXBpY2tlci4kaXNTZWxlY3RlZCA9IGZ1bmN0aW9uKGRhdGUsIGluZGV4KSB7CiAgICAgICAgICBpZighJHRpbWVwaWNrZXIuJGRhdGUpIHJldHVybiBmYWxzZTsKICAgICAgICAgIGVsc2UgaWYoaW5kZXggPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSA9PT0gJHRpbWVwaWNrZXIuJGRhdGUuZ2V0SG91cnMoKTsKICAgICAgICAgIH0gZWxzZSBpZihpbmRleCA9PT0gMSkgewogICAgICAgICAgICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCkgPT09ICR0aW1lcGlja2VyLiRkYXRlLmdldE1pbnV0ZXMoKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkdGltZXBpY2tlci4kaXNEaXNhYmxlZCA9IGZ1bmN0aW9uKGRhdGUsIGluZGV4KSB7CiAgICAgICAgICB2YXIgc2VsZWN0ZWRUaW1lOwogICAgICAgICAgaWYoaW5kZXggPT09IDApIHsKICAgICAgICAgICAgc2VsZWN0ZWRUaW1lID0gZGF0ZS5nZXRUaW1lKCkgKyB2aWV3RGF0ZS5taW51dGUgKiA2ZTQ7CiAgICAgICAgICB9IGVsc2UgaWYoaW5kZXggPT09IDEpIHsKICAgICAgICAgICAgc2VsZWN0ZWRUaW1lID0gZGF0ZS5nZXRUaW1lKCkgKyB2aWV3RGF0ZS5ob3VyICogMzZlNTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBzZWxlY3RlZFRpbWUgPCBvcHRpb25zLm1pblRpbWUgKiAxIHx8IHNlbGVjdGVkVGltZSA+IG9wdGlvbnMubWF4VGltZSAqIDE7CiAgICAgICAgfTsKCiAgICAgICAgc2NvcGUuJGFycm93QWN0aW9uID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkgewogICAgICAgICAgaWYgKG9wdGlvbnMuYXJyb3dCZWhhdmlvciA9PT0gJ3BpY2tlcicpIHsKICAgICAgICAgICAgJHRpbWVwaWNrZXIuJHNldFRpbWVCeVN0ZXAodmFsdWUsaW5kZXgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHRpbWVwaWNrZXIuJG1vdmVJbmRleCh2YWx1ZSxpbmRleCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgJHRpbWVwaWNrZXIuJHNldFRpbWVCeVN0ZXAgPSBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgICAgIHZhciBuZXdEYXRlID0gbmV3IERhdGUoJHRpbWVwaWNrZXIuJGRhdGUpOwogICAgICAgICAgdmFyIGhvdXJzID0gbmV3RGF0ZS5nZXRIb3VycygpLCBob3Vyc0xlbmd0aCA9IGRhdGVGaWx0ZXIobmV3RGF0ZSwgJ2gnKS5sZW5ndGg7CiAgICAgICAgICB2YXIgbWludXRlcyA9IG5ld0RhdGUuZ2V0TWludXRlcygpLCBtaW51dGVzTGVuZ3RoID0gZGF0ZUZpbHRlcihuZXdEYXRlLCAnbW0nKS5sZW5ndGg7CiAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHsKICAgICAgICAgICAgbmV3RGF0ZS5zZXRIb3Vycyhob3VycyAtIChwYXJzZUludChvcHRpb25zLmhvdXJTdGVwLCAxMCkgKiB2YWx1ZSkpOwogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIG5ld0RhdGUuc2V0TWludXRlcyhtaW51dGVzIC0gKHBhcnNlSW50KG9wdGlvbnMubWludXRlU3RlcCwgMTApICogdmFsdWUpKTsKICAgICAgICAgIH0KICAgICAgICAgICR0aW1lcGlja2VyLnNlbGVjdChuZXdEYXRlLCBpbmRleCwgdHJ1ZSk7CiAgICAgICAgICBwYXJlbnRTY29wZS4kZGlnZXN0KCk7CiAgICAgICAgfTsKCiAgICAgICAgJHRpbWVwaWNrZXIuJG1vdmVJbmRleCA9IGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkgewogICAgICAgICAgdmFyIHRhcmdldERhdGU7CiAgICAgICAgICBpZihpbmRleCA9PT0gMCkgewogICAgICAgICAgICB0YXJnZXREYXRlID0gbmV3IERhdGUoMTk3MCwgMCwgMSwgdmlld0RhdGUuaG91ciArICh2YWx1ZSAqIG9wdGlvbnMubGVuZ3RoKSwgdmlld0RhdGUubWludXRlKTsKICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodmlld0RhdGUsIHtob3VyOiB0YXJnZXREYXRlLmdldEhvdXJzKCl9KTsKICAgICAgICAgIH0gZWxzZSBpZihpbmRleCA9PT0gMSkgewogICAgICAgICAgICB0YXJnZXREYXRlID0gbmV3IERhdGUoMTk3MCwgMCwgMSwgdmlld0RhdGUuaG91ciwgdmlld0RhdGUubWludXRlICsgKHZhbHVlICogb3B0aW9ucy5sZW5ndGggKiBvcHRpb25zLm1pbnV0ZVN0ZXApKTsKICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodmlld0RhdGUsIHttaW51dGU6IHRhcmdldERhdGUuZ2V0TWludXRlcygpfSk7CiAgICAgICAgICB9CiAgICAgICAgICAkdGltZXBpY2tlci4kYnVpbGQoKTsKICAgICAgICB9OwoKICAgICAgICAkdGltZXBpY2tlci4kb25Nb3VzZURvd24gPSBmdW5jdGlvbihldnQpIHsKICAgICAgICAgIC8vIFByZXZlbnQgYmx1ciBvbiBtb3VzZWRvd24gb24gLmRyb3Bkb3duLW1lbnUKICAgICAgICAgIGlmKGV2dC50YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2lucHV0JykgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAvLyBFbXVsYXRlIGNsaWNrIGZvciBtb2JpbGUgZGV2aWNlcwogICAgICAgICAgaWYoaXNUb3VjaCkgewogICAgICAgICAgICB2YXIgdGFyZ2V0RWwgPSBhbmd1bGFyLmVsZW1lbnQoZXZ0LnRhcmdldCk7CiAgICAgICAgICAgIGlmKHRhcmdldEVsWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdidXR0b24nKSB7CiAgICAgICAgICAgICAgdGFyZ2V0RWwgPSB0YXJnZXRFbC5wYXJlbnQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0YXJnZXRFbC50cmlnZ2VySGFuZGxlcignY2xpY2snKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkdGltZXBpY2tlci4kb25LZXlEb3duID0gZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICBpZiAoIS8oMzh8Mzd8Mzl8NDB8MTMpLy50ZXN0KGV2dC5rZXlDb2RlKSB8fCBldnQuc2hpZnRLZXkgfHwgZXZ0LmFsdEtleSkgcmV0dXJuOwogICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CgogICAgICAgICAgLy8gQ2xvc2Ugb24gZW50ZXIKICAgICAgICAgIGlmKGV2dC5rZXlDb2RlID09PSAxMykgcmV0dXJuICR0aW1lcGlja2VyLmhpZGUodHJ1ZSk7CgogICAgICAgICAgLy8gTmF2aWdhdGUgd2l0aCBrZXlib2FyZAogICAgICAgICAgdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZSgkdGltZXBpY2tlci4kZGF0ZSk7CiAgICAgICAgICB2YXIgaG91cnMgPSBuZXdEYXRlLmdldEhvdXJzKCksIGhvdXJzTGVuZ3RoID0gZGF0ZUZpbHRlcihuZXdEYXRlLCAnaCcpLmxlbmd0aDsKICAgICAgICAgIHZhciBtaW51dGVzID0gbmV3RGF0ZS5nZXRNaW51dGVzKCksIG1pbnV0ZXNMZW5ndGggPSBkYXRlRmlsdGVyKG5ld0RhdGUsICdtbScpLmxlbmd0aDsKICAgICAgICAgIHZhciBsYXRlcmFsTW92ZSA9IC8oMzd8MzkpLy50ZXN0KGV2dC5rZXlDb2RlKTsKICAgICAgICAgIHZhciBjb3VudCA9IDIgKyAhIWZvcm1hdHNbM10gKiAxOwoKICAgICAgICAgIC8vIE5hdmlnYXRlIGluZGV4ZXMgKGxlZnQsIHJpZ2h0KQogICAgICAgICAgaWYgKGxhdGVyYWxNb3ZlKSB7CiAgICAgICAgICAgIGlmKGV2dC5rZXlDb2RlID09PSAzNykgc2VsZWN0ZWRJbmRleCA9IHNlbGVjdGVkSW5kZXggPCAxID8gY291bnQgLSAxIDogc2VsZWN0ZWRJbmRleCAtIDE7CiAgICAgICAgICAgIGVsc2UgaWYoZXZ0LmtleUNvZGUgPT09IDM5KSBzZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleCA8IGNvdW50IC0gMSA/IHNlbGVjdGVkSW5kZXggKyAxIDogMDsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBVcGRhdGUgdmFsdWVzICh1cCwgZG93bikKICAgICAgICAgIHZhciBzZWxlY3RSYW5nZSA9IFswLCBob3Vyc0xlbmd0aF07CiAgICAgICAgICBpZihzZWxlY3RlZEluZGV4ID09PSAwKSB7CiAgICAgICAgICAgIGlmKGV2dC5rZXlDb2RlID09PSAzOCkgbmV3RGF0ZS5zZXRIb3Vycyhob3VycyAtIHBhcnNlSW50KG9wdGlvbnMuaG91clN0ZXAsIDEwKSk7CiAgICAgICAgICAgIGVsc2UgaWYoZXZ0LmtleUNvZGUgPT09IDQwKSBuZXdEYXRlLnNldEhvdXJzKGhvdXJzICsgcGFyc2VJbnQob3B0aW9ucy5ob3VyU3RlcCwgMTApKTsKICAgICAgICAgICAgc2VsZWN0UmFuZ2UgPSBbMCwgaG91cnNMZW5ndGhdOwogICAgICAgICAgfSBlbHNlIGlmKHNlbGVjdGVkSW5kZXggPT09IDEpIHsKICAgICAgICAgICAgaWYoZXZ0LmtleUNvZGUgPT09IDM4KSBuZXdEYXRlLnNldE1pbnV0ZXMobWludXRlcyAtIHBhcnNlSW50KG9wdGlvbnMubWludXRlU3RlcCwgMTApKTsKICAgICAgICAgICAgZWxzZSBpZihldnQua2V5Q29kZSA9PT0gNDApIG5ld0RhdGUuc2V0TWludXRlcyhtaW51dGVzICsgcGFyc2VJbnQob3B0aW9ucy5taW51dGVTdGVwLCAxMCkpOwogICAgICAgICAgICBzZWxlY3RSYW5nZSA9IFtob3Vyc0xlbmd0aCArIDEsIGhvdXJzTGVuZ3RoICsgMSArIG1pbnV0ZXNMZW5ndGhdOwogICAgICAgICAgfSBlbHNlIGlmKHNlbGVjdGVkSW5kZXggPT09IDIpIHsKICAgICAgICAgICAgaWYoIWxhdGVyYWxNb3ZlKSAkdGltZXBpY2tlci5zd2l0Y2hNZXJpZGlhbigpOwogICAgICAgICAgICBzZWxlY3RSYW5nZSA9IFtob3Vyc0xlbmd0aCArIDEgKyBtaW51dGVzTGVuZ3RoICsgMSwgaG91cnNMZW5ndGggKyAxICsgbWludXRlc0xlbmd0aCArIDNdOwogICAgICAgICAgfQogICAgICAgICAgJHRpbWVwaWNrZXIuc2VsZWN0KG5ld0RhdGUsIHNlbGVjdGVkSW5kZXgsIHRydWUpOwogICAgICAgICAgY3JlYXRlU2VsZWN0aW9uKHNlbGVjdFJhbmdlWzBdLCBzZWxlY3RSYW5nZVsxXSk7CiAgICAgICAgICBwYXJlbnRTY29wZS4kZGlnZXN0KCk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gUHJpdmF0ZQoKICAgICAgICBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rpb24oc3RhcnQsIGVuZCkgewogICAgICAgICAgaWYoZWxlbWVudFswXS5jcmVhdGVUZXh0UmFuZ2UpIHsKICAgICAgICAgICAgdmFyIHNlbFJhbmdlID0gZWxlbWVudFswXS5jcmVhdGVUZXh0UmFuZ2UoKTsKICAgICAgICAgICAgc2VsUmFuZ2UuY29sbGFwc2UodHJ1ZSk7CiAgICAgICAgICAgIHNlbFJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpOwogICAgICAgICAgICBzZWxSYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQpOwogICAgICAgICAgICBzZWxSYW5nZS5zZWxlY3QoKTsKICAgICAgICAgIH0gZWxzZSBpZihlbGVtZW50WzBdLnNldFNlbGVjdGlvblJhbmdlKSB7CiAgICAgICAgICAgIGVsZW1lbnRbMF0uc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGVuZCk7CiAgICAgICAgICB9IGVsc2UgaWYoYW5ndWxhci5pc1VuZGVmaW5lZChlbGVtZW50WzBdLnNlbGVjdGlvblN0YXJ0KSkgewogICAgICAgICAgICBlbGVtZW50WzBdLnNlbGVjdGlvblN0YXJ0ID0gc3RhcnQ7CiAgICAgICAgICAgIGVsZW1lbnRbMF0uc2VsZWN0aW9uRW5kID0gZW5kOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZm9jdXNFbGVtZW50KCkgewogICAgICAgICAgZWxlbWVudFswXS5mb2N1cygpOwogICAgICAgIH0KCiAgICAgICAgLy8gT3ZlcnJpZGVzCgogICAgICAgIHZhciBfaW5pdCA9ICR0aW1lcGlja2VyLmluaXQ7CiAgICAgICAgJHRpbWVwaWNrZXIuaW5pdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYoaXNOYXRpdmUgJiYgb3B0aW9ucy51c2VOYXRpdmUpIHsKICAgICAgICAgICAgZWxlbWVudC5wcm9wKCd0eXBlJywgJ3RpbWUnKTsKICAgICAgICAgICAgZWxlbWVudC5jc3MoJy13ZWJraXQtYXBwZWFyYW5jZScsICd0ZXh0ZmllbGQnKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfSBlbHNlIGlmKGlzVG91Y2gpIHsKICAgICAgICAgICAgZWxlbWVudC5wcm9wKCd0eXBlJywgJ3RleHQnKTsKICAgICAgICAgICAgZWxlbWVudC5hdHRyKCdyZWFkb25seScsICd0cnVlJyk7CiAgICAgICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZm9jdXNFbGVtZW50KTsKICAgICAgICAgIH0KICAgICAgICAgIF9pbml0KCk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIF9kZXN0cm95ID0gJHRpbWVwaWNrZXIuZGVzdHJveTsKICAgICAgICAkdGltZXBpY2tlci5kZXN0cm95ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZihpc05hdGl2ZSAmJiBvcHRpb25zLnVzZU5hdGl2ZSkgewogICAgICAgICAgICBlbGVtZW50Lm9mZignY2xpY2snLCBmb2N1c0VsZW1lbnQpOwogICAgICAgICAgfQogICAgICAgICAgX2Rlc3Ryb3koKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgX3Nob3cgPSAkdGltZXBpY2tlci5zaG93OwogICAgICAgICR0aW1lcGlja2VyLnNob3cgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIF9zaG93KCk7CiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkdGltZXBpY2tlci4kZWxlbWVudC5vbihpc1RvdWNoID8gJ3RvdWNoc3RhcnQnIDogJ21vdXNlZG93bicsICR0aW1lcGlja2VyLiRvbk1vdXNlRG93bik7CiAgICAgICAgICAgIGlmKG9wdGlvbnMua2V5Ym9hcmQpIHsKICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgJHRpbWVwaWNrZXIuJG9uS2V5RG93bik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIHZhciBfaGlkZSA9ICR0aW1lcGlja2VyLmhpZGU7CiAgICAgICAgJHRpbWVwaWNrZXIuaGlkZSA9IGZ1bmN0aW9uKGJsdXIpIHsKICAgICAgICAgIGlmKCEkdGltZXBpY2tlci4kaXNTaG93bikgcmV0dXJuOwogICAgICAgICAgJHRpbWVwaWNrZXIuJGVsZW1lbnQub2ZmKGlzVG91Y2ggPyAndG91Y2hzdGFydCcgOiAnbW91c2Vkb3duJywgJHRpbWVwaWNrZXIuJG9uTW91c2VEb3duKTsKICAgICAgICAgIGlmKG9wdGlvbnMua2V5Ym9hcmQpIHsKICAgICAgICAgICAgZWxlbWVudC5vZmYoJ2tleWRvd24nLCAkdGltZXBpY2tlci4kb25LZXlEb3duKTsKICAgICAgICAgIH0KICAgICAgICAgIF9oaWRlKGJsdXIpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiAkdGltZXBpY2tlcjsKCiAgICAgIH0KCiAgICAgIHRpbWVwaWNrZXJGYWN0b3J5LmRlZmF1bHRzID0gZGVmYXVsdHM7CiAgICAgIHJldHVybiB0aW1lcGlja2VyRmFjdG9yeTsKCiAgICB9XTsKCiAgfSkKCgogIC5kaXJlY3RpdmUoJ2JzVGltZXBpY2tlcicsIFsiJHdpbmRvdyIsICIkcGFyc2UiLCAiJHEiLCAiJGxvY2FsZSIsICJkYXRlRmlsdGVyIiwgIiR0aW1lcGlja2VyIiwgIiRkYXRlUGFyc2VyIiwgIiR0aW1lb3V0IiwgZnVuY3Rpb24oJHdpbmRvdywgJHBhcnNlLCAkcSwgJGxvY2FsZSwgZGF0ZUZpbHRlciwgJHRpbWVwaWNrZXIsICRkYXRlUGFyc2VyLCAkdGltZW91dCkgewoKICAgIHZhciBkZWZhdWx0cyA9ICR0aW1lcGlja2VyLmRlZmF1bHRzOwogICAgdmFyIGlzTmF0aXZlID0gLyhpcChhfG8pZHxpcGhvbmV8YW5kcm9pZCkvaWcudGVzdCgkd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpOwogICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8ICR3aW5kb3cuc2V0VGltZW91dDsKCiAgICByZXR1cm4gewogICAgICByZXN0cmljdDogJ0VBQycsCiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJywKICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGNvbnRyb2xsZXIpIHsKCiAgICAgICAgLy8gRGlyZWN0aXZlIG9wdGlvbnMKICAgICAgICB2YXIgb3B0aW9ucyA9IHtzY29wZTogc2NvcGUsIGNvbnRyb2xsZXI6IGNvbnRyb2xsZXJ9OwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChbJ3BsYWNlbWVudCcsICdjb250YWluZXInLCAnZGVsYXknLCAndHJpZ2dlcicsICdrZXlib2FyZCcsICdodG1sJywgJ2FuaW1hdGlvbicsICd0ZW1wbGF0ZScsICdhdXRvY2xvc2UnLCAndGltZVR5cGUnLCAndGltZUZvcm1hdCcsICdtb2RlbFRpbWVGb3JtYXQnLCAndXNlTmF0aXZlJywgJ2hvdXJTdGVwJywgJ21pbnV0ZVN0ZXAnLCAnbGVuZ3RoJywgJ2Fycm93QmVoYXZpb3InLCAnaWNvblVwJywgJ2ljb25Eb3duJ10sIGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgaWYoYW5ndWxhci5pc0RlZmluZWQoYXR0cltrZXldKSkgb3B0aW9uc1trZXldID0gYXR0cltrZXldOwogICAgICAgIH0pOwoKICAgICAgICAvLyBWaXNpYmlsaXR5IGJpbmRpbmcgc3VwcG9ydAogICAgICAgIGF0dHIuYnNTaG93ICYmIHNjb3BlLiR3YXRjaChhdHRyLmJzU2hvdywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICBpZighdGltZXBpY2tlciB8fCAhYW5ndWxhci5pc0RlZmluZWQobmV3VmFsdWUpKSByZXR1cm47CiAgICAgICAgICBpZihhbmd1bGFyLmlzU3RyaW5nKG5ld1ZhbHVlKSkgbmV3VmFsdWUgPSAhIW5ld1ZhbHVlLm1hdGNoKC90cnVlfCw/KHRpbWVwaWNrZXIpLD8vaSk7CiAgICAgICAgICBuZXdWYWx1ZSA9PT0gdHJ1ZSA/IHRpbWVwaWNrZXIuc2hvdygpIDogdGltZXBpY2tlci5oaWRlKCk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIEluaXRpYWxpemUgdGltZXBpY2tlcgogICAgICAgIGlmKGlzTmF0aXZlICYmIChvcHRpb25zLnVzZU5hdGl2ZSB8fCBkZWZhdWx0cy51c2VOYXRpdmUpKSBvcHRpb25zLnRpbWVGb3JtYXQgPSAnSEg6bW0nOwogICAgICAgIHZhciB0aW1lcGlja2VyID0gJHRpbWVwaWNrZXIoZWxlbWVudCwgY29udHJvbGxlciwgb3B0aW9ucyk7CiAgICAgICAgb3B0aW9ucyA9IHRpbWVwaWNrZXIuJG9wdGlvbnM7CgogICAgICAgIC8vIEluaXRpYWxpemUgcGFyc2VyCiAgICAgICAgdmFyIGRhdGVQYXJzZXIgPSAkZGF0ZVBhcnNlcih7Zm9ybWF0OiBvcHRpb25zLnRpbWVGb3JtYXQsIGxhbmc6IG9wdGlvbnMubGFuZ30pOwoKICAgICAgICAvLyBPYnNlcnZlIGF0dHJpYnV0ZXMgZm9yIGNoYW5nZXMKICAgICAgICBhbmd1bGFyLmZvckVhY2goWydtaW5UaW1lJywgJ21heFRpbWUnXSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ2F0dHIuJG9ic2VydmUoJXMpJywga2V5LCBhdHRyW2tleV0pOwogICAgICAgICAgYW5ndWxhci5pc0RlZmluZWQoYXR0cltrZXldKSAmJiBhdHRyLiRvYnNlcnZlKGtleSwgZnVuY3Rpb24obmV3VmFsdWUpIHsKICAgICAgICAgICAgdGltZXBpY2tlci4kb3B0aW9uc1trZXldID0gZGF0ZVBhcnNlci5nZXRUaW1lRm9yQXR0cmlidXRlKGtleSwgbmV3VmFsdWUpOwogICAgICAgICAgICAhaXNOYU4odGltZXBpY2tlci4kb3B0aW9uc1trZXldKSAmJiB0aW1lcGlja2VyLiRidWlsZCgpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIFdhdGNoIG1vZGVsIGZvciBjaGFuZ2VzCiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdNb2RlbCwgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ3Njb3BlLiR3YXRjaCglcyknLCBhdHRyLm5nTW9kZWwsIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgY29udHJvbGxlci4kZGF0ZVZhbHVlKTsKICAgICAgICAgIHRpbWVwaWNrZXIudXBkYXRlKGNvbnRyb2xsZXIuJGRhdGVWYWx1ZSk7CiAgICAgICAgfSwgdHJ1ZSk7CgogICAgICAgIC8vIHZpZXdWYWx1ZSAtPiAkcGFyc2VycyAtPiBtb2RlbFZhbHVlCiAgICAgICAgY29udHJvbGxlci4kcGFyc2Vycy51bnNoaWZ0KGZ1bmN0aW9uKHZpZXdWYWx1ZSkgewogICAgICAgICAgLy8gY29uc29sZS53YXJuKCckcGFyc2VyKCIlcyIpOiB2aWV3VmFsdWU9JW8nLCBlbGVtZW50LmF0dHIoJ25nLW1vZGVsJyksIHZpZXdWYWx1ZSk7CiAgICAgICAgICAvLyBOdWxsIHZhbHVlcyBzaG91bGQgY29ycmVjdGx5IHJlc2V0IHRoZSBtb2RlbCB2YWx1ZSAmIHZhbGlkaXR5CiAgICAgICAgICBpZighdmlld1ZhbHVlKSB7CiAgICAgICAgICAgIGNvbnRyb2xsZXIuJHNldFZhbGlkaXR5KCdkYXRlJywgdHJ1ZSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBwYXJzZWRUaW1lID0gYW5ndWxhci5pc0RhdGUodmlld1ZhbHVlKSA/IHZpZXdWYWx1ZSA6IGRhdGVQYXJzZXIucGFyc2Uodmlld1ZhbHVlLCBjb250cm9sbGVyLiRkYXRlVmFsdWUpOwogICAgICAgICAgaWYoIXBhcnNlZFRpbWUgfHwgaXNOYU4ocGFyc2VkVGltZS5nZXRUaW1lKCkpKSB7CiAgICAgICAgICAgIGNvbnRyb2xsZXIuJHNldFZhbGlkaXR5KCdkYXRlJywgZmFsc2UpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBpc01pblZhbGlkID0gaXNOYU4ob3B0aW9ucy5taW5UaW1lKSB8fCBwYXJzZWRUaW1lLmdldFRpbWUoKSA+PSBvcHRpb25zLm1pblRpbWU7CiAgICAgICAgICAgICAgdmFyIGlzTWF4VmFsaWQgPSBpc05hTihvcHRpb25zLm1heFRpbWUpIHx8IHBhcnNlZFRpbWUuZ2V0VGltZSgpIDw9IG9wdGlvbnMubWF4VGltZTsKICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IGlzTWluVmFsaWQgJiYgaXNNYXhWYWxpZDsKICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRWYWxpZGl0eSgnZGF0ZScsIGlzVmFsaWQpOwogICAgICAgICAgICAgIGNvbnRyb2xsZXIuJHNldFZhbGlkaXR5KCdtaW4nLCBpc01pblZhbGlkKTsKICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRWYWxpZGl0eSgnbWF4JywgaXNNYXhWYWxpZCk7CiAgICAgICAgICAgICAgLy8gT25seSB1cGRhdGUgdGhlIG1vZGVsIHdoZW4gd2UgaGF2ZSBhIHZhbGlkIGRhdGUKICAgICAgICAgICAgICBpZighaXNWYWxpZCkgewogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbnRyb2xsZXIuJGRhdGVWYWx1ZSA9IHBhcnNlZFRpbWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZihvcHRpb25zLnRpbWVUeXBlID09PSAnc3RyaW5nJykgewogICAgICAgICAgICByZXR1cm4gZGF0ZUZpbHRlcihwYXJzZWRUaW1lLCBvcHRpb25zLm1vZGVsVGltZUZvcm1hdCB8fCBvcHRpb25zLnRpbWVGb3JtYXQpOwogICAgICAgICAgfSBlbHNlIGlmKG9wdGlvbnMudGltZVR5cGUgPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyLiRkYXRlVmFsdWUuZ2V0VGltZSgpOwogICAgICAgICAgfSBlbHNlIGlmKG9wdGlvbnMudGltZVR5cGUgPT09ICdpc28nKSB7CiAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyLiRkYXRlVmFsdWUudG9JU09TdHJpbmcoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShjb250cm9sbGVyLiRkYXRlVmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvLyBtb2RlbFZhbHVlIC0+ICRmb3JtYXR0ZXJzIC0+IHZpZXdWYWx1ZQogICAgICAgIGNvbnRyb2xsZXIuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihtb2RlbFZhbHVlKSB7CiAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJyRmb3JtYXR0ZXIoIiVzIik6IG1vZGVsVmFsdWU9JW8gKCVvKScsIGVsZW1lbnQuYXR0cignbmctbW9kZWwnKSwgbW9kZWxWYWx1ZSwgdHlwZW9mIG1vZGVsVmFsdWUpOwogICAgICAgICAgdmFyIGRhdGU7CiAgICAgICAgICBpZihhbmd1bGFyLmlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpIHx8IG1vZGVsVmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgICAgZGF0ZSA9IE5hTjsKICAgICAgICAgIH0gZWxzZSBpZihhbmd1bGFyLmlzRGF0ZShtb2RlbFZhbHVlKSkgewogICAgICAgICAgICBkYXRlID0gbW9kZWxWYWx1ZTsKICAgICAgICAgIH0gZWxzZSBpZihvcHRpb25zLnRpbWVUeXBlID09PSAnc3RyaW5nJykgewogICAgICAgICAgICBkYXRlID0gZGF0ZVBhcnNlci5wYXJzZShtb2RlbFZhbHVlLCBudWxsLCBvcHRpb25zLm1vZGVsVGltZUZvcm1hdCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBkYXRlID0gbmV3IERhdGUobW9kZWxWYWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgICAvLyBTZXR1cCBkZWZhdWx0IHZhbHVlPwogICAgICAgICAgLy8gaWYoaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSBkYXRlID0gbmV3IERhdGUobmV3IERhdGUoKS5zZXRNaW51dGVzKDApICsgMzZlNSk7CiAgICAgICAgICBjb250cm9sbGVyLiRkYXRlVmFsdWUgPSBkYXRlOwogICAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXIuJGRhdGVWYWx1ZTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gdmlld1ZhbHVlIC0+IGVsZW1lbnQKICAgICAgICBjb250cm9sbGVyLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIC8vIGNvbnNvbGUud2FybignJHJlbmRlcigiJXMiKTogdmlld1ZhbHVlPSVvJywgZWxlbWVudC5hdHRyKCduZy1tb2RlbCcpLCBjb250cm9sbGVyLiR2aWV3VmFsdWUpOwogICAgICAgICAgZWxlbWVudC52YWwoIWNvbnRyb2xsZXIuJGRhdGVWYWx1ZSB8fCBpc05hTihjb250cm9sbGVyLiRkYXRlVmFsdWUuZ2V0VGltZSgpKSA/ICcnIDogZGF0ZUZpbHRlcihjb250cm9sbGVyLiRkYXRlVmFsdWUsIG9wdGlvbnMudGltZUZvcm1hdCkpOwogICAgICAgIH07CgogICAgICAgIC8vIEdhcmJhZ2UgY29sbGVjdGlvbgogICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmICh0aW1lcGlja2VyKSB0aW1lcGlja2VyLmRlc3Ryb3koKTsKICAgICAgICAgIG9wdGlvbnMgPSBudWxsOwogICAgICAgICAgdGltZXBpY2tlciA9IG51bGw7CiAgICAgICAgfSk7CgogICAgICB9CiAgICB9OwoKICB9XSk7CgovLyBTb3VyY2U6IHRvb2x0aXAuanMKYW5ndWxhci5tb2R1bGUoJ21nY3JlYS5uZ1N0cmFwLnRvb2x0aXAnLCBbJ21nY3JlYS5uZ1N0cmFwLmhlbHBlcnMuZGltZW5zaW9ucyddKQoKICAucHJvdmlkZXIoJyR0b29sdGlwJywgZnVuY3Rpb24oKSB7CgogICAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHsKICAgICAgYW5pbWF0aW9uOiAnYW0tZmFkZScsCiAgICAgIGN1c3RvbUNsYXNzOiAnJywKICAgICAgcHJlZml4Q2xhc3M6ICd0b29sdGlwJywKICAgICAgcHJlZml4RXZlbnQ6ICd0b29sdGlwJywKICAgICAgY29udGFpbmVyOiBmYWxzZSwKICAgICAgdGFyZ2V0OiBmYWxzZSwKICAgICAgcGxhY2VtZW50OiAndG9wJywKICAgICAgdGVtcGxhdGU6ICd0b29sdGlwL3Rvb2x0aXAudHBsLmh0bWwnLAogICAgICBjb250ZW50VGVtcGxhdGU6IGZhbHNlLAogICAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLAogICAgICBrZXlib2FyZDogZmFsc2UsCiAgICAgIGh0bWw6IGZhbHNlLAogICAgICBzaG93OiBmYWxzZSwKICAgICAgdGl0bGU6ICcnLAogICAgICB0eXBlOiAnJywKICAgICAgZGVsYXk6IDAKICAgIH07CgogICAgdGhpcy4kZ2V0ID0gWyIkd2luZG93IiwgIiRyb290U2NvcGUiLCAiJGNvbXBpbGUiLCAiJHEiLCAiJHRlbXBsYXRlQ2FjaGUiLCAiJGh0dHAiLCAiJGFuaW1hdGUiLCAiZGltZW5zaW9ucyIsICIkJHJBRiIsIGZ1bmN0aW9uKCR3aW5kb3csICRyb290U2NvcGUsICRjb21waWxlLCAkcSwgJHRlbXBsYXRlQ2FjaGUsICRodHRwLCAkYW5pbWF0ZSwgZGltZW5zaW9ucywgJCRyQUYpIHsKCiAgICAgIHZhciB0cmltID0gU3RyaW5nLnByb3RvdHlwZS50cmltOwogICAgICB2YXIgaXNUb3VjaCA9ICdjcmVhdGVUb3VjaCcgaW4gJHdpbmRvdy5kb2N1bWVudDsKICAgICAgdmFyIGh0bWxSZXBsYWNlUmVnRXhwID0gL25nLWJpbmQ9Ii9pZzsKCiAgICAgIGZ1bmN0aW9uIFRvb2x0aXBGYWN0b3J5KGVsZW1lbnQsIGNvbmZpZykgewoKICAgICAgICB2YXIgJHRvb2x0aXAgPSB7fTsKCiAgICAgICAgLy8gQ29tbW9uIHZhcnMKICAgICAgICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgdmFyIG9wdGlvbnMgPSAkdG9vbHRpcC4kb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBkZWZhdWx0cywgY29uZmlnKTsKICAgICAgICAkdG9vbHRpcC4kcHJvbWlzZSA9IGZldGNoVGVtcGxhdGUob3B0aW9ucy50ZW1wbGF0ZSk7CiAgICAgICAgdmFyIHNjb3BlID0gJHRvb2x0aXAuJHNjb3BlID0gb3B0aW9ucy5zY29wZSAmJiBvcHRpb25zLnNjb3BlLiRuZXcoKSB8fCAkcm9vdFNjb3BlLiRuZXcoKTsKICAgICAgICBpZihvcHRpb25zLmRlbGF5ICYmIGFuZ3VsYXIuaXNTdHJpbmcob3B0aW9ucy5kZWxheSkpIHsKICAgICAgICAgIHZhciBzcGxpdCA9IG9wdGlvbnMuZGVsYXkuc3BsaXQoJywnKS5tYXAocGFyc2VGbG9hdCk7CiAgICAgICAgICBvcHRpb25zLmRlbGF5ID0gc3BsaXQubGVuZ3RoID4gMSA/IHtzaG93OiBzcGxpdFswXSwgaGlkZTogc3BsaXRbMV19IDogc3BsaXRbMF07CiAgICAgICAgfQoKICAgICAgICAvLyBTdXBwb3J0IHNjb3BlIGFzIHN0cmluZyBvcHRpb25zCiAgICAgICAgaWYob3B0aW9ucy50aXRsZSkgewogICAgICAgICAgJHRvb2x0aXAuJHNjb3BlLnRpdGxlID0gb3B0aW9ucy50aXRsZTsKICAgICAgICB9CgogICAgICAgIC8vIFByb3ZpZGUgc2NvcGUgaGVscGVycwogICAgICAgIHNjb3BlLiRoaWRlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICR0b29sdGlwLmhpZGUoKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgc2NvcGUuJHNob3cgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHsKICAgICAgICAgICAgJHRvb2x0aXAuc2hvdygpOwogICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgICBzY29wZS4kdG9nZ2xlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICR0b29sdGlwLnRvZ2dsZSgpOwogICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgICAkdG9vbHRpcC4kaXNTaG93biA9IHNjb3BlLiRpc1Nob3duID0gZmFsc2U7CgogICAgICAgIC8vIFByaXZhdGUgdmFycwogICAgICAgIHZhciB0aW1lb3V0LCBob3ZlclN0YXRlOwoKICAgICAgICAvLyBTdXBwb3J0IGNvbnRlbnRUZW1wbGF0ZSBvcHRpb24KICAgICAgICBpZihvcHRpb25zLmNvbnRlbnRUZW1wbGF0ZSkgewogICAgICAgICAgJHRvb2x0aXAuJHByb21pc2UgPSAkdG9vbHRpcC4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHRlbXBsYXRlKSB7CiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZUVsID0gYW5ndWxhci5lbGVtZW50KHRlbXBsYXRlKTsKICAgICAgICAgICAgcmV0dXJuIGZldGNoVGVtcGxhdGUob3B0aW9ucy5jb250ZW50VGVtcGxhdGUpCiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvbnRlbnRUZW1wbGF0ZSkgewogICAgICAgICAgICAgIHZhciBjb250ZW50RWwgPSBmaW5kRWxlbWVudCgnW25nLWJpbmQ9ImNvbnRlbnQiXScsIHRlbXBsYXRlRWxbMF0pOwogICAgICAgICAgICAgIGlmKCFjb250ZW50RWwubGVuZ3RoKSBjb250ZW50RWwgPSBmaW5kRWxlbWVudCgnW25nLWJpbmQ9InRpdGxlIl0nLCB0ZW1wbGF0ZUVsWzBdKTsKICAgICAgICAgICAgICBjb250ZW50RWwucmVtb3ZlQXR0cignbmctYmluZCcpLmh0bWwoY29udGVudFRlbXBsYXRlKTsKICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVFbFswXS5vdXRlckhUTUw7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICAvLyBGZXRjaCwgY29tcGlsZSB0aGVuIGluaXRpYWxpemUgdG9vbHRpcAogICAgICAgIHZhciB0aXBMaW5rZXIsIHRpcEVsZW1lbnQsIHRpcFRlbXBsYXRlLCB0aXBDb250YWluZXI7CiAgICAgICAgJHRvb2x0aXAuJHByb21pc2UudGhlbihmdW5jdGlvbih0ZW1wbGF0ZSkgewogICAgICAgICAgaWYoYW5ndWxhci5pc09iamVjdCh0ZW1wbGF0ZSkpIHRlbXBsYXRlID0gdGVtcGxhdGUuZGF0YTsKICAgICAgICAgIGlmKG9wdGlvbnMuaHRtbCkgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKGh0bWxSZXBsYWNlUmVnRXhwLCAnbmctYmluZC1odG1sPSInKTsKICAgICAgICAgIHRlbXBsYXRlID0gdHJpbS5hcHBseSh0ZW1wbGF0ZSk7CiAgICAgICAgICB0aXBUZW1wbGF0ZSA9IHRlbXBsYXRlOwogICAgICAgICAgdGlwTGlua2VyID0gJGNvbXBpbGUodGVtcGxhdGUpOwogICAgICAgICAgJHRvb2x0aXAuaW5pdCgpOwogICAgICAgIH0pOwoKICAgICAgICAkdG9vbHRpcC5pbml0ID0gZnVuY3Rpb24oKSB7CgogICAgICAgICAgLy8gT3B0aW9uczogZGVsYXkKICAgICAgICAgIGlmIChvcHRpb25zLmRlbGF5ICYmIGFuZ3VsYXIuaXNOdW1iZXIob3B0aW9ucy5kZWxheSkpIHsKICAgICAgICAgICAgb3B0aW9ucy5kZWxheSA9IHsKICAgICAgICAgICAgICBzaG93OiBvcHRpb25zLmRlbGF5LAogICAgICAgICAgICAgIGhpZGU6IG9wdGlvbnMuZGVsYXkKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBSZXBsYWNlIHRyaWdnZXIgb24gdG91Y2ggZGV2aWNlcyA/CiAgICAgICAgICAvLyBpZihpc1RvdWNoICYmIG9wdGlvbnMudHJpZ2dlciA9PT0gZGVmYXVsdHMudHJpZ2dlcikgewogICAgICAgICAgLy8gICBvcHRpb25zLnRyaWdnZXIucmVwbGFjZSgvaG92ZXIvZywgJ2NsaWNrJyk7CiAgICAgICAgICAvLyB9CgogICAgICAgICAgLy8gT3B0aW9ucyA6IGNvbnRhaW5lcgogICAgICAgICAgaWYob3B0aW9ucy5jb250YWluZXIgPT09ICdzZWxmJykgewogICAgICAgICAgICB0aXBDb250YWluZXIgPSBlbGVtZW50OwogICAgICAgICAgfSBlbHNlIGlmKGFuZ3VsYXIuaXNFbGVtZW50KG9wdGlvbnMuY29udGFpbmVyKSkgewogICAgICAgICAgICB0aXBDb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjsKICAgICAgICAgIH0gZWxzZSBpZihvcHRpb25zLmNvbnRhaW5lcikgewogICAgICAgICAgICB0aXBDb250YWluZXIgPSBmaW5kRWxlbWVudChvcHRpb25zLmNvbnRhaW5lcik7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gT3B0aW9uczogdHJpZ2dlcgogICAgICAgICAgdmFyIHRyaWdnZXJzID0gb3B0aW9ucy50cmlnZ2VyLnNwbGl0KCcgJyk7CiAgICAgICAgICBhbmd1bGFyLmZvckVhY2godHJpZ2dlcnMsIGZ1bmN0aW9uKHRyaWdnZXIpIHsKICAgICAgICAgICAgaWYodHJpZ2dlciA9PT0gJ2NsaWNrJykgewogICAgICAgICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgJHRvb2x0aXAudG9nZ2xlKTsKICAgICAgICAgICAgfSBlbHNlIGlmKHRyaWdnZXIgIT09ICdtYW51YWwnKSB7CiAgICAgICAgICAgICAgZWxlbWVudC5vbih0cmlnZ2VyID09PSAnaG92ZXInID8gJ21vdXNlZW50ZXInIDogJ2ZvY3VzJywgJHRvb2x0aXAuZW50ZXIpOwogICAgICAgICAgICAgIGVsZW1lbnQub24odHJpZ2dlciA9PT0gJ2hvdmVyJyA/ICdtb3VzZWxlYXZlJyA6ICdibHVyJywgJHRvb2x0aXAubGVhdmUpOwogICAgICAgICAgICAgIG5vZGVOYW1lID09PSAnYnV0dG9uJyAmJiB0cmlnZ2VyICE9PSAnaG92ZXInICYmIGVsZW1lbnQub24oaXNUb3VjaCA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLCAkdG9vbHRpcC4kb25Gb2N1c0VsZW1lbnRNb3VzZURvd24pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKCiAgICAgICAgICAvLyBPcHRpb25zOiB0YXJnZXQKICAgICAgICAgIGlmKG9wdGlvbnMudGFyZ2V0KSB7CiAgICAgICAgICAgIG9wdGlvbnMudGFyZ2V0ID0gYW5ndWxhci5pc0VsZW1lbnQob3B0aW9ucy50YXJnZXQpID8gb3B0aW9ucy50YXJnZXQgOiBmaW5kRWxlbWVudChvcHRpb25zLnRhcmdldCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gT3B0aW9uczogc2hvdwogICAgICAgICAgaWYob3B0aW9ucy5zaG93KSB7CiAgICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBvcHRpb25zLnRyaWdnZXIgPT09ICdmb2N1cycgPyBlbGVtZW50WzBdLmZvY3VzKCkgOiAkdG9vbHRpcC5zaG93KCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICB9OwoKICAgICAgICAkdG9vbHRpcC5kZXN0cm95ID0gZnVuY3Rpb24oKSB7CgogICAgICAgICAgLy8gVW5iaW5kIGV2ZW50cwogICAgICAgICAgdmFyIHRyaWdnZXJzID0gb3B0aW9ucy50cmlnZ2VyLnNwbGl0KCcgJyk7CiAgICAgICAgICBmb3IgKHZhciBpID0gdHJpZ2dlcnMubGVuZ3RoOyBpLS07KSB7CiAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gdHJpZ2dlcnNbaV07CiAgICAgICAgICAgIGlmKHRyaWdnZXIgPT09ICdjbGljaycpIHsKICAgICAgICAgICAgICBlbGVtZW50Lm9mZignY2xpY2snLCAkdG9vbHRpcC50b2dnbGUpOwogICAgICAgICAgICB9IGVsc2UgaWYodHJpZ2dlciAhPT0gJ21hbnVhbCcpIHsKICAgICAgICAgICAgICBlbGVtZW50Lm9mZih0cmlnZ2VyID09PSAnaG92ZXInID8gJ21vdXNlZW50ZXInIDogJ2ZvY3VzJywgJHRvb2x0aXAuZW50ZXIpOwogICAgICAgICAgICAgIGVsZW1lbnQub2ZmKHRyaWdnZXIgPT09ICdob3ZlcicgPyAnbW91c2VsZWF2ZScgOiAnYmx1cicsICR0b29sdGlwLmxlYXZlKTsKICAgICAgICAgICAgICBub2RlTmFtZSA9PT0gJ2J1dHRvbicgJiYgdHJpZ2dlciAhPT0gJ2hvdmVyJyAmJiBlbGVtZW50Lm9mZihpc1RvdWNoID8gJ3RvdWNoc3RhcnQnIDogJ21vdXNlZG93bicsICR0b29sdGlwLiRvbkZvY3VzRWxlbWVudE1vdXNlRG93bik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBSZW1vdmUgZWxlbWVudAogICAgICAgICAgaWYodGlwRWxlbWVudCkgewogICAgICAgICAgICB0aXBFbGVtZW50LnJlbW92ZSgpOwogICAgICAgICAgICB0aXBFbGVtZW50ID0gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBDYW5jZWwgcGVuZGluZyBjYWxsYmFja3MKICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKCiAgICAgICAgICAvLyBEZXN0cm95IHNjb3BlCiAgICAgICAgICBzY29wZS4kZGVzdHJveSgpOwoKICAgICAgICB9OwoKICAgICAgICAkdG9vbHRpcC5lbnRlciA9IGZ1bmN0aW9uKCkgewoKICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgICAgICAgIGhvdmVyU3RhdGUgPSAnaW4nOwogICAgICAgICAgaWYgKCFvcHRpb25zLmRlbGF5IHx8ICFvcHRpb25zLmRlbGF5LnNob3cpIHsKICAgICAgICAgICAgcmV0dXJuICR0b29sdGlwLnNob3coKTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKGhvdmVyU3RhdGUgPT09J2luJykgJHRvb2x0aXAuc2hvdygpOwogICAgICAgICAgfSwgb3B0aW9ucy5kZWxheS5zaG93KTsKCiAgICAgICAgfTsKCiAgICAgICAgJHRvb2x0aXAuc2hvdyA9IGZ1bmN0aW9uKCkgewoKICAgICAgICAgIHNjb3BlLiRlbWl0KG9wdGlvbnMucHJlZml4RXZlbnQgKyAnLnNob3cuYmVmb3JlJywgJHRvb2x0aXApOwogICAgICAgICAgdmFyIHBhcmVudCA9IG9wdGlvbnMuY29udGFpbmVyID8gdGlwQ29udGFpbmVyIDogbnVsbDsKICAgICAgICAgIHZhciBhZnRlciA9IG9wdGlvbnMuY29udGFpbmVyID8gbnVsbCA6IGVsZW1lbnQ7CgogICAgICAgICAgLy8gSGlkZSBhbnkgZXhpc3RpbmcgdGlwRWxlbWVudAogICAgICAgICAgaWYodGlwRWxlbWVudCkgdGlwRWxlbWVudC5yZW1vdmUoKTsKICAgICAgICAgIC8vIEZldGNoIGEgY2xvbmVkIGVsZW1lbnQgbGlua2VkIGZyb20gdGVtcGxhdGUKICAgICAgICAgIHRpcEVsZW1lbnQgPSAkdG9vbHRpcC4kZWxlbWVudCA9IHRpcExpbmtlcihzY29wZSwgZnVuY3Rpb24oY2xvbmVkRWxlbWVudCwgc2NvcGUpIHt9KTsKCiAgICAgICAgICAvLyBTZXQgdGhlIGluaXRpYWwgcG9zaXRpb25pbmcuICBNYWtlIHRoZSB0b29sdGlwIGludmlzaWJsZQogICAgICAgICAgLy8gc28gSUUgZG9lc24ndCB0cnkgdG8gZm9jdXMgb24gaXQgb2ZmIHNjcmVlbi4KICAgICAgICAgIHRpcEVsZW1lbnQuY3NzKHt0b3A6ICctOTk5OXB4JywgbGVmdDogJy05OTk5cHgnLCBkaXNwbGF5OiAnYmxvY2snLCB2aXNpYmlsaXR5OiAnaGlkZGVuJ30pLmFkZENsYXNzKG9wdGlvbnMucGxhY2VtZW50KTsKCiAgICAgICAgICAvLyBPcHRpb25zOiBhbmltYXRpb24KICAgICAgICAgIGlmKG9wdGlvbnMuYW5pbWF0aW9uKSB0aXBFbGVtZW50LmFkZENsYXNzKG9wdGlvbnMuYW5pbWF0aW9uKTsKICAgICAgICAgIC8vIE9wdGlvbnM6IHR5cGUKICAgICAgICAgIGlmKG9wdGlvbnMudHlwZSkgdGlwRWxlbWVudC5hZGRDbGFzcyhvcHRpb25zLnByZWZpeENsYXNzICsgJy0nICsgb3B0aW9ucy50eXBlKTsKICAgICAgICAgIC8vIE9wdGlvbnM6IGN1c3RvbSBjbGFzc2VzCiAgICAgICAgICBpZihvcHRpb25zLmN1c3RvbUNsYXNzKSB0aXBFbGVtZW50LmFkZENsYXNzKG9wdGlvbnMuY3VzdG9tQ2xhc3MpOwoKICAgICAgICAgIC8vIFN1cHBvcnQgdjEuMysgJGFuaW1hdGUKICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvY29tbWl0L2JmMGY1NTAyYjFiYmZkZGM1Y2RkMmYxMzhlZmQ5MTg4YjhjNjUyYTkKICAgICAgICAgIHZhciBwcm9taXNlID0gJGFuaW1hdGUuZW50ZXIodGlwRWxlbWVudCwgcGFyZW50LCBhZnRlciwgZW50ZXJBbmltYXRlQ2FsbGJhY2spOwogICAgICAgICAgaWYocHJvbWlzZSAmJiBwcm9taXNlLnRoZW4pIHByb21pc2UudGhlbihlbnRlckFuaW1hdGVDYWxsYmFjayk7CgogICAgICAgICAgJHRvb2x0aXAuJGlzU2hvd24gPSBzY29wZS4kaXNTaG93biA9IHRydWU7CiAgICAgICAgICBzY29wZS4kJHBoYXNlIHx8IChzY29wZS4kcm9vdCAmJiBzY29wZS4kcm9vdC4kJHBoYXNlKSB8fCBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAkJHJBRihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICR0b29sdGlwLiRhcHBseVBsYWNlbWVudCgpOwoKICAgICAgICAgICAgLy8gT25jZSBwbGFjZWQsIG1ha2UgdGhlIHRvb2x0aXAgdmlzaWJsZQogICAgICAgICAgICB0aXBFbGVtZW50LmNzcyh7dmlzaWJpbGl0eTogJ3Zpc2libGUnfSk7CiAgICAgICAgICB9KTsgLy8gdmFyIGEgPSBib2R5RWwub2Zmc2V0V2lkdGggKyAxOyA/CgogICAgICAgICAgLy8gQmluZCBldmVudHMKICAgICAgICAgIGlmKG9wdGlvbnMua2V5Ym9hcmQpIHsKICAgICAgICAgICAgaWYob3B0aW9ucy50cmlnZ2VyICE9PSAnZm9jdXMnKSB7CiAgICAgICAgICAgICAgJHRvb2x0aXAuZm9jdXMoKTsKICAgICAgICAgICAgICB0aXBFbGVtZW50Lm9uKCdrZXl1cCcsICR0b29sdGlwLiRvbktleVVwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdrZXl1cCcsICR0b29sdGlwLiRvbkZvY3VzS2V5VXApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIGVudGVyQW5pbWF0ZUNhbGxiYWNrKCkgewogICAgICAgICAgc2NvcGUuJGVtaXQob3B0aW9ucy5wcmVmaXhFdmVudCArICcuc2hvdycsICR0b29sdGlwKTsKICAgICAgICB9CgogICAgICAgICR0b29sdGlwLmxlYXZlID0gZnVuY3Rpb24oKSB7CgogICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpOwogICAgICAgICAgaG92ZXJTdGF0ZSA9ICdvdXQnOwogICAgICAgICAgaWYgKCFvcHRpb25zLmRlbGF5IHx8ICFvcHRpb25zLmRlbGF5LmhpZGUpIHsKICAgICAgICAgICAgcmV0dXJuICR0b29sdGlwLmhpZGUoKTsKICAgICAgICAgIH0KICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKGhvdmVyU3RhdGUgPT09ICdvdXQnKSB7CiAgICAgICAgICAgICAgJHRvb2x0aXAuaGlkZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCBvcHRpb25zLmRlbGF5LmhpZGUpOwoKICAgICAgICB9OwoKICAgICAgICAkdG9vbHRpcC5oaWRlID0gZnVuY3Rpb24oYmx1cikgewoKICAgICAgICAgIGlmKCEkdG9vbHRpcC4kaXNTaG93bikgcmV0dXJuOwogICAgICAgICAgc2NvcGUuJGVtaXQob3B0aW9ucy5wcmVmaXhFdmVudCArICcuaGlkZS5iZWZvcmUnLCAkdG9vbHRpcCk7CgogICAgICAgICAgLy8gU3VwcG9ydCB2MS4zKyAkYW5pbWF0ZQogICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9jb21taXQvYmYwZjU1MDJiMWJiZmRkYzVjZGQyZjEzOGVmZDkxODhiOGM2NTJhOQogICAgICAgICAgdmFyIHByb21pc2UgPSAkYW5pbWF0ZS5sZWF2ZSh0aXBFbGVtZW50LCBsZWF2ZUFuaW1hdGVDYWxsYmFjayk7CiAgICAgICAgICBpZihwcm9taXNlICYmIHByb21pc2UudGhlbikgcHJvbWlzZS50aGVuKGxlYXZlQW5pbWF0ZUNhbGxiYWNrKTsKCiAgICAgICAgICAkdG9vbHRpcC4kaXNTaG93biA9IHNjb3BlLiRpc1Nob3duID0gZmFsc2U7CiAgICAgICAgICBzY29wZS4kJHBoYXNlIHx8IChzY29wZS4kcm9vdCAmJiBzY29wZS4kcm9vdC4kJHBoYXNlKSB8fCBzY29wZS4kZGlnZXN0KCk7CgogICAgICAgICAgLy8gVW5iaW5kIGV2ZW50cwogICAgICAgICAgaWYob3B0aW9ucy5rZXlib2FyZCAmJiB0aXBFbGVtZW50ICE9PSBudWxsKSB7CiAgICAgICAgICAgIHRpcEVsZW1lbnQub2ZmKCdrZXl1cCcsICR0b29sdGlwLiRvbktleVVwKTsKICAgICAgICAgIH0KCiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gbGVhdmVBbmltYXRlQ2FsbGJhY2soKSB7CiAgICAgICAgICBzY29wZS4kZW1pdChvcHRpb25zLnByZWZpeEV2ZW50ICsgJy5oaWRlJywgJHRvb2x0aXApOwogICAgICAgICAgLy8gQWxsb3cgdG8gYmx1ciB0aGUgaW5wdXQgd2hlbiBoaWRkZW4sIGxpa2Ugd2hlbiBwcmVzc2luZyBlbnRlciBrZXkKICAgICAgICAgIGlmKGJsdXIgJiYgb3B0aW9ucy50cmlnZ2VyID09PSAnZm9jdXMnKSB7CiAgICAgICAgICAgIHJldHVybiBlbGVtZW50WzBdLmJsdXIoKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICR0b29sdGlwLnRvZ2dsZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgJHRvb2x0aXAuJGlzU2hvd24gPyAkdG9vbHRpcC5sZWF2ZSgpIDogJHRvb2x0aXAuZW50ZXIoKTsKICAgICAgICB9OwoKICAgICAgICAkdG9vbHRpcC5mb2N1cyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdGlwRWxlbWVudFswXS5mb2N1cygpOwogICAgICAgIH07CgogICAgICAgIC8vIFByb3RlY3RlZCBtZXRob2RzCgogICAgICAgICR0b29sdGlwLiRhcHBseVBsYWNlbWVudCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYoIXRpcEVsZW1lbnQpIHJldHVybjsKCiAgICAgICAgICAvLyBHZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSB0b29sdGlwIGVsZW1lbnQuCiAgICAgICAgICB2YXIgZWxlbWVudFBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTsKCiAgICAgICAgICAvLyBHZXQgdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgdGhlIHRvb2x0aXAgc28gd2UgY2FuIGNlbnRlciBpdC4KICAgICAgICAgIHZhciB0aXBXaWR0aCA9IHRpcEVsZW1lbnQucHJvcCgnb2Zmc2V0V2lkdGgnKSwKICAgICAgICAgICAgICB0aXBIZWlnaHQgPSB0aXBFbGVtZW50LnByb3AoJ29mZnNldEhlaWdodCcpOwoKICAgICAgICAgIC8vIEdldCB0aGUgdG9vbHRpcCdzIHRvcCBhbmQgbGVmdCBjb29yZGluYXRlcyB0byBjZW50ZXIgaXQgd2l0aCB0aGlzIGRpcmVjdGl2ZS4KICAgICAgICAgIHZhciB0aXBQb3NpdGlvbiA9IGdldENhbGN1bGF0ZWRPZmZzZXQob3B0aW9ucy5wbGFjZW1lbnQsIGVsZW1lbnRQb3NpdGlvbiwgdGlwV2lkdGgsIHRpcEhlaWdodCk7CgogICAgICAgICAgLy8gTm93IHNldCB0aGUgY2FsY3VsYXRlZCBwb3NpdGlvbmluZy4KICAgICAgICAgIHRpcFBvc2l0aW9uLnRvcCArPSAncHgnOwogICAgICAgICAgdGlwUG9zaXRpb24ubGVmdCArPSAncHgnOwogICAgICAgICAgdGlwRWxlbWVudC5jc3ModGlwUG9zaXRpb24pOwoKICAgICAgICB9OwoKICAgICAgICAkdG9vbHRpcC4kb25LZXlVcCA9IGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgaWYgKGV2dC53aGljaCA9PT0gMjcgJiYgJHRvb2x0aXAuJGlzU2hvd24pIHsKICAgICAgICAgICAgJHRvb2x0aXAuaGlkZSgpOwogICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgJHRvb2x0aXAuJG9uRm9jdXNLZXlVcCA9IGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgaWYgKGV2dC53aGljaCA9PT0gMjcpIHsKICAgICAgICAgICAgZWxlbWVudFswXS5ibHVyKCk7CiAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkdG9vbHRpcC4kb25Gb2N1c0VsZW1lbnRNb3VzZURvd24gPSBmdW5jdGlvbihldnQpIHsKICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgLy8gU29tZSBicm93c2VycyBkbyBub3QgYXV0by1mb2N1cyBidXR0b25zIChlZy4gU2FmYXJpKQogICAgICAgICAgJHRvb2x0aXAuJGlzU2hvd24gPyBlbGVtZW50WzBdLmJsdXIoKSA6IGVsZW1lbnRbMF0uZm9jdXMoKTsKICAgICAgICB9OwoKICAgICAgICAvLyBQcml2YXRlIG1ldGhvZHMKCiAgICAgICAgZnVuY3Rpb24gZ2V0UG9zaXRpb24oKSB7CiAgICAgICAgICBpZihvcHRpb25zLmNvbnRhaW5lciA9PT0gJ2JvZHknKSB7CiAgICAgICAgICAgIHJldHVybiBkaW1lbnNpb25zLm9mZnNldChvcHRpb25zLnRhcmdldFswXSB8fCBlbGVtZW50WzBdKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBkaW1lbnNpb25zLnBvc2l0aW9uKG9wdGlvbnMudGFyZ2V0WzBdIHx8IGVsZW1lbnRbMF0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvc2l0aW9uLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7CiAgICAgICAgICB2YXIgb2Zmc2V0OwogICAgICAgICAgdmFyIHNwbGl0ID0gcGxhY2VtZW50LnNwbGl0KCctJyk7CgogICAgICAgICAgc3dpdGNoIChzcGxpdFswXSkgewogICAgICAgICAgY2FzZSAncmlnaHQnOgogICAgICAgICAgICBvZmZzZXQgPSB7CiAgICAgICAgICAgICAgdG9wOiBwb3NpdGlvbi50b3AgKyBwb3NpdGlvbi5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwKICAgICAgICAgICAgICBsZWZ0OiBwb3NpdGlvbi5sZWZ0ICsgcG9zaXRpb24ud2lkdGgKICAgICAgICAgICAgfTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdib3R0b20nOgogICAgICAgICAgICBvZmZzZXQgPSB7CiAgICAgICAgICAgICAgdG9wOiBwb3NpdGlvbi50b3AgKyBwb3NpdGlvbi5oZWlnaHQsCiAgICAgICAgICAgICAgbGVmdDogcG9zaXRpb24ubGVmdCArIHBvc2l0aW9uLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMgogICAgICAgICAgICB9OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgJ2xlZnQnOgogICAgICAgICAgICBvZmZzZXQgPSB7CiAgICAgICAgICAgICAgdG9wOiBwb3NpdGlvbi50b3AgKyBwb3NpdGlvbi5oZWlnaHQgLyAyIC0gYWN0dWFsSGVpZ2h0IC8gMiwKICAgICAgICAgICAgICBsZWZ0OiBwb3NpdGlvbi5sZWZ0IC0gYWN0dWFsV2lkdGgKICAgICAgICAgICAgfTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBvZmZzZXQgPSB7CiAgICAgICAgICAgICAgdG9wOiBwb3NpdGlvbi50b3AgLSBhY3R1YWxIZWlnaHQsCiAgICAgICAgICAgICAgbGVmdDogcG9zaXRpb24ubGVmdCArIHBvc2l0aW9uLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMgogICAgICAgICAgICB9OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICBpZighc3BsaXRbMV0pIHsKICAgICAgICAgICAgcmV0dXJuIG9mZnNldDsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBBZGQgc3VwcG9ydCBmb3IgY29ybmVycyBAdG9kbyBjc3MKICAgICAgICAgIGlmKHNwbGl0WzBdID09PSAndG9wJyB8fCBzcGxpdFswXSA9PT0gJ2JvdHRvbScpIHsKICAgICAgICAgICAgc3dpdGNoIChzcGxpdFsxXSkgewogICAgICAgICAgICBjYXNlICdsZWZ0JzoKICAgICAgICAgICAgICBvZmZzZXQubGVmdCA9IHBvc2l0aW9uLmxlZnQ7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzoKICAgICAgICAgICAgICBvZmZzZXQubGVmdCA9ICBwb3NpdGlvbi5sZWZ0ICsgcG9zaXRpb24ud2lkdGggLSBhY3R1YWxXaWR0aDsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmKHNwbGl0WzBdID09PSAnbGVmdCcgfHwgc3BsaXRbMF0gPT09ICdyaWdodCcpIHsKICAgICAgICAgICAgc3dpdGNoIChzcGxpdFsxXSkgewogICAgICAgICAgICBjYXNlICd0b3AnOgogICAgICAgICAgICAgIG9mZnNldC50b3AgPSBwb3NpdGlvbi50b3AgLSBhY3R1YWxIZWlnaHQ7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6CiAgICAgICAgICAgICAgb2Zmc2V0LnRvcCA9IHBvc2l0aW9uLnRvcCArIHBvc2l0aW9uLmhlaWdodDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBvZmZzZXQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJHRvb2x0aXA7CgogICAgICB9CgogICAgICAvLyBIZWxwZXIgZnVuY3Rpb25zCgogICAgICBmdW5jdGlvbiBmaW5kRWxlbWVudChxdWVyeSwgZWxlbWVudCkgewogICAgICAgIHJldHVybiBhbmd1bGFyLmVsZW1lbnQoKGVsZW1lbnQgfHwgZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gZmV0Y2hUZW1wbGF0ZSh0ZW1wbGF0ZSkgewogICAgICAgIHJldHVybiAkcS53aGVuKCR0ZW1wbGF0ZUNhY2hlLmdldCh0ZW1wbGF0ZSkgfHwgJGh0dHAuZ2V0KHRlbXBsYXRlKSkKICAgICAgICAudGhlbihmdW5jdGlvbihyZXMpIHsKICAgICAgICAgIGlmKGFuZ3VsYXIuaXNPYmplY3QocmVzKSkgewogICAgICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodGVtcGxhdGUsIHJlcy5kYXRhKTsKICAgICAgICAgICAgcmV0dXJuIHJlcy5kYXRhOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIFRvb2x0aXBGYWN0b3J5OwoKICAgIH1dOwoKICB9KQoKICAuZGlyZWN0aXZlKCdic1Rvb2x0aXAnLCBbIiR3aW5kb3ciLCAiJGxvY2F0aW9uIiwgIiRzY2UiLCAiJHRvb2x0aXAiLCAiJCRyQUYiLCBmdW5jdGlvbigkd2luZG93LCAkbG9jYXRpb24sICRzY2UsICR0b29sdGlwLCAkJHJBRikgewoKICAgIHJldHVybiB7CiAgICAgIHJlc3RyaWN0OiAnRUFDJywKICAgICAgc2NvcGU6IHRydWUsCiAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCB0cmFuc2NsdXNpb24pIHsKCiAgICAgICAgLy8gRGlyZWN0aXZlIG9wdGlvbnMKICAgICAgICB2YXIgb3B0aW9ucyA9IHtzY29wZTogc2NvcGV9OwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChbJ3RlbXBsYXRlJywgJ2NvbnRlbnRUZW1wbGF0ZScsICdwbGFjZW1lbnQnLCAnY29udGFpbmVyJywgJ3RhcmdldCcsICdkZWxheScsICd0cmlnZ2VyJywgJ2tleWJvYXJkJywgJ2h0bWwnLCAnYW5pbWF0aW9uJywgJ3R5cGUnLCAnY3VzdG9tQ2xhc3MnXSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICBpZihhbmd1bGFyLmlzRGVmaW5lZChhdHRyW2tleV0pKSBvcHRpb25zW2tleV0gPSBhdHRyW2tleV07CiAgICAgICAgfSk7CgogICAgICAgIC8vIE9ic2VydmUgc2NvcGUgYXR0cmlidXRlcyBmb3IgY2hhbmdlCiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgndGl0bGUnLCBmdW5jdGlvbihuZXdWYWx1ZSkgewogICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG5ld1ZhbHVlKSB8fCAhc2NvcGUuaGFzT3duUHJvcGVydHkoJ3RpdGxlJykpIHsKICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gc2NvcGUudGl0bGU7CiAgICAgICAgICAgIHNjb3BlLnRpdGxlID0gJHNjZS50cnVzdEFzSHRtbChuZXdWYWx1ZSk7CiAgICAgICAgICAgIGFuZ3VsYXIuaXNEZWZpbmVkKG9sZFZhbHVlKSAmJiAkJHJBRihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB0b29sdGlwICYmIHRvb2x0aXAuJGFwcGx5UGxhY2VtZW50KCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvLyBTdXBwb3J0IHNjb3BlIGFzIGFuIG9iamVjdAogICAgICAgIGF0dHIuYnNUb29sdGlwICYmIHNjb3BlLiR3YXRjaChhdHRyLmJzVG9vbHRpcCwgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICBpZihhbmd1bGFyLmlzT2JqZWN0KG5ld1ZhbHVlKSkgewogICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChzY29wZSwgbmV3VmFsdWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2NvcGUudGl0bGUgPSBuZXdWYWx1ZTsKICAgICAgICAgIH0KICAgICAgICAgIGFuZ3VsYXIuaXNEZWZpbmVkKG9sZFZhbHVlKSAmJiAkJHJBRihmdW5jdGlvbigpIHsKICAgICAgICAgICAgdG9vbHRpcCAmJiB0b29sdGlwLiRhcHBseVBsYWNlbWVudCgpOwogICAgICAgICAgfSk7CiAgICAgICAgfSwgdHJ1ZSk7CgogICAgICAgIC8vIFZpc2liaWxpdHkgYmluZGluZyBzdXBwb3J0CiAgICAgICAgYXR0ci5ic1Nob3cgJiYgc2NvcGUuJHdhdGNoKGF0dHIuYnNTaG93LCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgIGlmKCF0b29sdGlwIHx8ICFhbmd1bGFyLmlzRGVmaW5lZChuZXdWYWx1ZSkpIHJldHVybjsKICAgICAgICAgIGlmKGFuZ3VsYXIuaXNTdHJpbmcobmV3VmFsdWUpKSBuZXdWYWx1ZSA9ICEhbmV3VmFsdWUubWF0Y2goL3RydWV8LD8odG9vbHRpcCksPy9pKTsKICAgICAgICAgIG5ld1ZhbHVlID09PSB0cnVlID8gdG9vbHRpcC5zaG93KCkgOiB0b29sdGlwLmhpZGUoKTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSBwb3BvdmVyCiAgICAgICAgdmFyIHRvb2x0aXAgPSAkdG9vbHRpcChlbGVtZW50LCBvcHRpb25zKTsKCiAgICAgICAgLy8gR2FyYmFnZSBjb2xsZWN0aW9uCiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYodG9vbHRpcCkgdG9vbHRpcC5kZXN0cm95KCk7CiAgICAgICAgICBvcHRpb25zID0gbnVsbDsKICAgICAgICAgIHRvb2x0aXAgPSBudWxsOwogICAgICAgIH0pOwoKICAgICAgfQogICAgfTsKCiAgfV0pOwoKLy8gU291cmNlOiB0eXBlYWhlYWQuanMKYW5ndWxhci5tb2R1bGUoJ21nY3JlYS5uZ1N0cmFwLnR5cGVhaGVhZCcsIFsnbWdjcmVhLm5nU3RyYXAudG9vbHRpcCcsICdtZ2NyZWEubmdTdHJhcC5oZWxwZXJzLnBhcnNlT3B0aW9ucyddKQoKICAucHJvdmlkZXIoJyR0eXBlYWhlYWQnLCBmdW5jdGlvbigpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0gewogICAgICBhbmltYXRpb246ICdhbS1mYWRlJywKICAgICAgcHJlZml4Q2xhc3M6ICd0eXBlYWhlYWQnLAogICAgICBwcmVmaXhFdmVudDogJyR0eXBlYWhlYWQnLAogICAgICBwbGFjZW1lbnQ6ICdib3R0b20tbGVmdCcsCiAgICAgIHRlbXBsYXRlOiAndHlwZWFoZWFkL3R5cGVhaGVhZC50cGwuaHRtbCcsCiAgICAgIHRyaWdnZXI6ICdmb2N1cycsCiAgICAgIGNvbnRhaW5lcjogZmFsc2UsCiAgICAgIGtleWJvYXJkOiB0cnVlLAogICAgICBodG1sOiBmYWxzZSwKICAgICAgZGVsYXk6IDAsCiAgICAgIG1pbkxlbmd0aDogMSwKICAgICAgZmlsdGVyOiAnZmlsdGVyJywKICAgICAgbGltaXQ6IDYKICAgIH07CgogICAgdGhpcy4kZ2V0ID0gWyIkd2luZG93IiwgIiRyb290U2NvcGUiLCAiJHRvb2x0aXAiLCBmdW5jdGlvbigkd2luZG93LCAkcm9vdFNjb3BlLCAkdG9vbHRpcCkgewoKICAgICAgdmFyIGJvZHlFbCA9IGFuZ3VsYXIuZWxlbWVudCgkd2luZG93LmRvY3VtZW50LmJvZHkpOwoKICAgICAgZnVuY3Rpb24gVHlwZWFoZWFkRmFjdG9yeShlbGVtZW50LCBjb250cm9sbGVyLCBjb25maWcpIHsKCiAgICAgICAgdmFyICR0eXBlYWhlYWQgPSB7fTsKCiAgICAgICAgLy8gQ29tbW9uIHZhcnMKICAgICAgICB2YXIgb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBkZWZhdWx0cywgY29uZmlnKTsKCiAgICAgICAgJHR5cGVhaGVhZCA9ICR0b29sdGlwKGVsZW1lbnQsIG9wdGlvbnMpOwogICAgICAgIHZhciBwYXJlbnRTY29wZSA9IGNvbmZpZy5zY29wZTsKICAgICAgICB2YXIgc2NvcGUgPSAkdHlwZWFoZWFkLiRzY29wZTsKCiAgICAgICAgc2NvcGUuJHJlc2V0TWF0Y2hlcyA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICBzY29wZS4kbWF0Y2hlcyA9IFtdOwogICAgICAgICAgc2NvcGUuJGFjdGl2ZUluZGV4ID0gMDsKICAgICAgICB9OwogICAgICAgIHNjb3BlLiRyZXNldE1hdGNoZXMoKTsKCiAgICAgICAgc2NvcGUuJGFjdGl2YXRlID0gZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHsKICAgICAgICAgICAgJHR5cGVhaGVhZC5hY3RpdmF0ZShpbmRleCk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBzY29wZS4kc2VsZWN0ID0gZnVuY3Rpb24oaW5kZXgsIGV2dCkgewogICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkdHlwZWFoZWFkLnNlbGVjdChpbmRleCk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBzY29wZS4kaXNWaXNpYmxlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gJHR5cGVhaGVhZC4kaXNWaXNpYmxlKCk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gUHVibGljIG1ldGhvZHMKCiAgICAgICAgJHR5cGVhaGVhZC51cGRhdGUgPSBmdW5jdGlvbihtYXRjaGVzKSB7CiAgICAgICAgICBzY29wZS4kbWF0Y2hlcyA9IG1hdGNoZXM7CiAgICAgICAgICBpZihzY29wZS4kYWN0aXZlSW5kZXggPj0gbWF0Y2hlcy5sZW5ndGgpIHsKICAgICAgICAgICAgc2NvcGUuJGFjdGl2ZUluZGV4ID0gMDsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkdHlwZWFoZWFkLmFjdGl2YXRlID0gZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICAgIHNjb3BlLiRhY3RpdmVJbmRleCA9IGluZGV4OwogICAgICAgIH07CgogICAgICAgICR0eXBlYWhlYWQuc2VsZWN0ID0gZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IHNjb3BlLiRtYXRjaGVzW2luZGV4XS52YWx1ZTsKICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCckc2V0Vmlld1ZhbHVlJywgdmFsdWUpOwogICAgICAgICAgY29udHJvbGxlci4kc2V0Vmlld1ZhbHVlKHZhbHVlKTsKICAgICAgICAgIGNvbnRyb2xsZXIuJHJlbmRlcigpOwogICAgICAgICAgc2NvcGUuJHJlc2V0TWF0Y2hlcygpOwogICAgICAgICAgaWYocGFyZW50U2NvcGUpIHBhcmVudFNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgIC8vIEVtaXQgZXZlbnQKICAgICAgICAgIHNjb3BlLiRlbWl0KG9wdGlvbnMucHJlZml4RXZlbnQgKyAnLnNlbGVjdCcsIHZhbHVlLCBpbmRleCk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gUHJvdGVjdGVkIG1ldGhvZHMKCiAgICAgICAgJHR5cGVhaGVhZC4kaXNWaXNpYmxlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZighb3B0aW9ucy5taW5MZW5ndGggfHwgIWNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgcmV0dXJuICEhc2NvcGUuJG1hdGNoZXMubGVuZ3RoOwogICAgICAgICAgfQogICAgICAgICAgLy8gbWluTGVuZ3RoIHN1cHBvcnQKICAgICAgICAgIHJldHVybiBzY29wZS4kbWF0Y2hlcy5sZW5ndGggJiYgYW5ndWxhci5pc1N0cmluZyhjb250cm9sbGVyLiR2aWV3VmFsdWUpICYmIGNvbnRyb2xsZXIuJHZpZXdWYWx1ZS5sZW5ndGggPj0gb3B0aW9ucy5taW5MZW5ndGg7CiAgICAgICAgfTsKCiAgICAgICAgJHR5cGVhaGVhZC4kZ2V0SW5kZXggPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgdmFyIGwgPSBzY29wZS4kbWF0Y2hlcy5sZW5ndGgsIGkgPSBsOwogICAgICAgICAgaWYoIWwpIHJldHVybjsKICAgICAgICAgIGZvcihpID0gbDsgaS0tOykgewogICAgICAgICAgICBpZihzY29wZS4kbWF0Y2hlc1tpXS52YWx1ZSA9PT0gdmFsdWUpIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgaWYoaSA8IDApIHJldHVybjsKICAgICAgICAgIHJldHVybiBpOwogICAgICAgIH07CgogICAgICAgICR0eXBlYWhlYWQuJG9uTW91c2VEb3duID0gZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICAvLyBQcmV2ZW50IGJsdXIgb24gbW91c2Vkb3duCiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICB9OwoKICAgICAgICAkdHlwZWFoZWFkLiRvbktleURvd24gPSBmdW5jdGlvbihldnQpIHsKICAgICAgICAgIGlmKCEvKDM4fDQwfDEzKS8udGVzdChldnQua2V5Q29kZSkpIHJldHVybjsKCiAgICAgICAgICAvLyBMZXQgbmdTdWJtaXQgcGFzcyBpZiB0aGUgdHlwZWFoZWFkIHRpcCBpcyBoaWRkZW4KICAgICAgICAgIGlmKCR0eXBlYWhlYWQuJGlzVmlzaWJsZSgpKSB7CiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gU2VsZWN0IHdpdGggZW50ZXIKICAgICAgICAgIGlmKGV2dC5rZXlDb2RlID09PSAxMyAmJiBzY29wZS4kbWF0Y2hlcy5sZW5ndGgpIHsKICAgICAgICAgICAgJHR5cGVhaGVhZC5zZWxlY3Qoc2NvcGUuJGFjdGl2ZUluZGV4KTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBOYXZpZ2F0ZSB3aXRoIGtleWJvYXJkCiAgICAgICAgICBlbHNlIGlmKGV2dC5rZXlDb2RlID09PSAzOCAmJiBzY29wZS4kYWN0aXZlSW5kZXggPiAwKSBzY29wZS4kYWN0aXZlSW5kZXgtLTsKICAgICAgICAgIGVsc2UgaWYoZXZ0LmtleUNvZGUgPT09IDQwICYmIHNjb3BlLiRhY3RpdmVJbmRleCA8IHNjb3BlLiRtYXRjaGVzLmxlbmd0aCAtIDEpIHNjb3BlLiRhY3RpdmVJbmRleCsrOwogICAgICAgICAgZWxzZSBpZihhbmd1bGFyLmlzVW5kZWZpbmVkKHNjb3BlLiRhY3RpdmVJbmRleCkpIHNjb3BlLiRhY3RpdmVJbmRleCA9IDA7CiAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gT3ZlcnJpZGVzCgogICAgICAgIHZhciBzaG93ID0gJHR5cGVhaGVhZC5zaG93OwogICAgICAgICR0eXBlYWhlYWQuc2hvdyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgc2hvdygpOwogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgJHR5cGVhaGVhZC4kZWxlbWVudC5vbignbW91c2Vkb3duJywgJHR5cGVhaGVhZC4kb25Nb3VzZURvd24pOwogICAgICAgICAgICBpZihvcHRpb25zLmtleWJvYXJkKSB7CiAgICAgICAgICAgICAgZWxlbWVudC5vbigna2V5ZG93bicsICR0eXBlYWhlYWQuJG9uS2V5RG93bik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIHZhciBoaWRlID0gJHR5cGVhaGVhZC5oaWRlOwogICAgICAgICR0eXBlYWhlYWQuaGlkZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgJHR5cGVhaGVhZC4kZWxlbWVudC5vZmYoJ21vdXNlZG93bicsICR0eXBlYWhlYWQuJG9uTW91c2VEb3duKTsKICAgICAgICAgIGlmKG9wdGlvbnMua2V5Ym9hcmQpIHsKICAgICAgICAgICAgZWxlbWVudC5vZmYoJ2tleWRvd24nLCAkdHlwZWFoZWFkLiRvbktleURvd24pOwogICAgICAgICAgfQogICAgICAgICAgaGlkZSgpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiAkdHlwZWFoZWFkOwoKICAgICAgfQoKICAgICAgVHlwZWFoZWFkRmFjdG9yeS5kZWZhdWx0cyA9IGRlZmF1bHRzOwogICAgICByZXR1cm4gVHlwZWFoZWFkRmFjdG9yeTsKCiAgICB9XTsKCiAgfSkKCiAgLmRpcmVjdGl2ZSgnYnNUeXBlYWhlYWQnLCBbIiR3aW5kb3ciLCAiJHBhcnNlIiwgIiRxIiwgIiR0eXBlYWhlYWQiLCAiJHBhcnNlT3B0aW9ucyIsIGZ1bmN0aW9uKCR3aW5kb3csICRwYXJzZSwgJHEsICR0eXBlYWhlYWQsICRwYXJzZU9wdGlvbnMpIHsKCiAgICB2YXIgZGVmYXVsdHMgPSAkdHlwZWFoZWFkLmRlZmF1bHRzOwoKICAgIHJldHVybiB7CiAgICAgIHJlc3RyaWN0OiAnRUFDJywKICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLAogICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY29udHJvbGxlcikgewoKICAgICAgICAvLyBEaXJlY3RpdmUgb3B0aW9ucwogICAgICAgIHZhciBvcHRpb25zID0ge3Njb3BlOiBzY29wZX07CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKFsncGxhY2VtZW50JywgJ2NvbnRhaW5lcicsICdkZWxheScsICd0cmlnZ2VyJywgJ2tleWJvYXJkJywgJ2h0bWwnLCAnYW5pbWF0aW9uJywgJ3RlbXBsYXRlJywgJ2ZpbHRlcicsICdsaW1pdCcsICdtaW5MZW5ndGgnLCAnd2F0Y2hPcHRpb25zJywgJ3NlbGVjdE1vZGUnXSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICBpZihhbmd1bGFyLmlzRGVmaW5lZChhdHRyW2tleV0pKSBvcHRpb25zW2tleV0gPSBhdHRyW2tleV07CiAgICAgICAgfSk7CgogICAgICAgIC8vIEJ1aWxkIHByb3BlciBuZ09wdGlvbnMKICAgICAgICB2YXIgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXIgfHwgZGVmYXVsdHMuZmlsdGVyOwogICAgICAgIHZhciBsaW1pdCA9IG9wdGlvbnMubGltaXQgfHwgZGVmYXVsdHMubGltaXQ7CiAgICAgICAgdmFyIG5nT3B0aW9ucyA9IGF0dHIubmdPcHRpb25zOwogICAgICAgIGlmKGZpbHRlcikgbmdPcHRpb25zICs9ICcgfCAnICsgZmlsdGVyICsgJzokdmlld1ZhbHVlJzsKICAgICAgICBpZihsaW1pdCkgbmdPcHRpb25zICs9ICcgfCBsaW1pdFRvOicgKyBsaW1pdDsKICAgICAgICB2YXIgcGFyc2VkT3B0aW9ucyA9ICRwYXJzZU9wdGlvbnMobmdPcHRpb25zKTsKCiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0eXBlYWhlYWQKICAgICAgICB2YXIgdHlwZWFoZWFkID0gJHR5cGVhaGVhZChlbGVtZW50LCBjb250cm9sbGVyLCBvcHRpb25zKTsKCiAgICAgICAgLy8gV2F0Y2ggb3B0aW9ucyBvbiBkZW1hbmQKICAgICAgICBpZihvcHRpb25zLndhdGNoT3B0aW9ucykgewogICAgICAgICAgLy8gV2F0Y2ggbmdPcHRpb25zIHZhbHVlcyBiZWZvcmUgZmlsdGVyaW5nIGZvciBjaGFuZ2VzLCBkcm9wIGZ1bmN0aW9uIGNhbGxzCiAgICAgICAgICB2YXIgd2F0Y2hlZE9wdGlvbnMgPSBwYXJzZWRPcHRpb25zLiRtYXRjaFs3XS5yZXBsYWNlKC9cfC4rLywgJycpLnJlcGxhY2UoL1woLipcKS9nLCAnJykudHJpbSgpOwogICAgICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoZWRPcHRpb25zLCBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAgIC8vIGNvbnNvbGUud2Fybignc2NvcGUuJHdhdGNoKCVzKScsIHdhdGNoZWRPcHRpb25zLCBuZXdWYWx1ZSwgb2xkVmFsdWUpOwogICAgICAgICAgICBwYXJzZWRPcHRpb25zLnZhbHVlc0ZuKHNjb3BlLCBjb250cm9sbGVyKS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHsKICAgICAgICAgICAgICB0eXBlYWhlYWQudXBkYXRlKHZhbHVlcyk7CiAgICAgICAgICAgICAgY29udHJvbGxlci4kcmVuZGVyKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwgdHJ1ZSk7CiAgICAgICAgfQoKICAgICAgICAvLyBXYXRjaCBtb2RlbCBmb3IgY2hhbmdlcwogICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nTW9kZWwsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgLy8gY29uc29sZS53YXJuKCckd2F0Y2gnLCBlbGVtZW50LmF0dHIoJ25nLW1vZGVsJyksIG5ld1ZhbHVlKTsKICAgICAgICAgIHNjb3BlLiRtb2RlbFZhbHVlID0gbmV3VmFsdWU7IC8vIFB1Ymxpc2ggbW9kZWxWYWx1ZSBvbiBzY29wZSBmb3IgY3VzdG9tIHRlbXBsYXRlcwogICAgICAgICAgcGFyc2VkT3B0aW9ucy52YWx1ZXNGbihzY29wZSwgY29udHJvbGxlcikKICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHZhbHVlcykgewogICAgICAgICAgICAvLyBQcmV2ZW50IGlucHV0IHdpdGggbm8gZnV0dXJlIHByb3NwZWN0IGlmIHNlbGVjdE1vZGUgaXMgdHJ1dGh5CiAgICAgICAgICAgIC8vIEBUT0RPIHRlc3Qgc2VsZWN0TW9kZQogICAgICAgICAgICBpZihvcHRpb25zLnNlbGVjdE1vZGUgJiYgIXZhbHVlcy5sZW5ndGggJiYgbmV3VmFsdWUubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIGNvbnRyb2xsZXIuJHNldFZpZXdWYWx1ZShjb250cm9sbGVyLiR2aWV3VmFsdWUuc3Vic3RyaW5nKDAsIGNvbnRyb2xsZXIuJHZpZXdWYWx1ZS5sZW5ndGggLSAxKSk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKHZhbHVlcy5sZW5ndGggPiBsaW1pdCkgdmFsdWVzID0gdmFsdWVzLnNsaWNlKDAsIGxpbWl0KTsKICAgICAgICAgICAgdmFyIGlzVmlzaWJsZSA9IHR5cGVhaGVhZC4kaXNWaXNpYmxlKCk7CiAgICAgICAgICAgIGlzVmlzaWJsZSAmJiB0eXBlYWhlYWQudXBkYXRlKHZhbHVlcyk7CiAgICAgICAgICAgIC8vIERvIG5vdCByZS1xdWV1ZSBhbiB1cGRhdGUgaWYgYSBjb3JyZWN0IHZhbHVlIGhhcyBiZWVuIHNlbGVjdGVkCiAgICAgICAgICAgIGlmKHZhbHVlcy5sZW5ndGggPT09IDEgJiYgdmFsdWVzWzBdLnZhbHVlID09PSBuZXdWYWx1ZSkgcmV0dXJuOwogICAgICAgICAgICAhaXNWaXNpYmxlICYmIHR5cGVhaGVhZC51cGRhdGUodmFsdWVzKTsKICAgICAgICAgICAgLy8gUXVldWUgYSBuZXcgcmVuZGVyaW5nIHRoYXQgd2lsbCBsZXZlcmFnZSBjb2xsZWN0aW9uIGxvYWRpbmcKICAgICAgICAgICAgY29udHJvbGxlci4kcmVuZGVyKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gbW9kZWxWYWx1ZSAtPiAkZm9ybWF0dGVycyAtPiB2aWV3VmFsdWUKICAgICAgICBjb250cm9sbGVyLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24obW9kZWxWYWx1ZSkgewogICAgICAgICAgLy8gY29uc29sZS53YXJuKCckZm9ybWF0dGVyKCIlcyIpOiBtb2RlbFZhbHVlPSVvICglbyknLCBlbGVtZW50LmF0dHIoJ25nLW1vZGVsJyksIG1vZGVsVmFsdWUsIHR5cGVvZiBtb2RlbFZhbHVlKTsKICAgICAgICAgIHJldHVybiBwYXJzZWRPcHRpb25zLmRpc3BsYXlWYWx1ZShtb2RlbFZhbHVlKTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gTW9kZWwgcmVuZGVyaW5nIGluIHZpZXcKICAgICAgICBjb250cm9sbGVyLiRyZW5kZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJyRyZW5kZXInLCBlbGVtZW50LmF0dHIoJ25nLW1vZGVsJyksICdjb250cm9sbGVyLiRtb2RlbFZhbHVlJywgdHlwZW9mIGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUsIGNvbnRyb2xsZXIuJG1vZGVsVmFsdWUsICdjb250cm9sbGVyLiR2aWV3VmFsdWUnLCB0eXBlb2YgY29udHJvbGxlci4kdmlld1ZhbHVlLCBjb250cm9sbGVyLiR2aWV3VmFsdWUpOwogICAgICAgICAgaWYoY29udHJvbGxlci4kaXNFbXB0eShjb250cm9sbGVyLiR2aWV3VmFsdWUpKSByZXR1cm4gZWxlbWVudC52YWwoJycpOwogICAgICAgICAgdmFyIGluZGV4ID0gdHlwZWFoZWFkLiRnZXRJbmRleChjb250cm9sbGVyLiRtb2RlbFZhbHVlKTsKICAgICAgICAgIHZhciBzZWxlY3RlZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKGluZGV4KSA/IHR5cGVhaGVhZC4kc2NvcGUuJG1hdGNoZXNbaW5kZXhdLmxhYmVsIDogY29udHJvbGxlci4kdmlld1ZhbHVlOwogICAgICAgICAgc2VsZWN0ZWQgPSBhbmd1bGFyLmlzT2JqZWN0KHNlbGVjdGVkKSA/IHNlbGVjdGVkLmxhYmVsIDogc2VsZWN0ZWQ7CiAgICAgICAgICBlbGVtZW50LnZhbChzZWxlY3RlZCA/IHNlbGVjdGVkLnJlcGxhY2UoLzwoPzoufFxuKSo/Pi9nbSwgJycpLnRyaW0oKSA6ICcnKTsKICAgICAgICB9OwoKICAgICAgICAvLyBHYXJiYWdlIGNvbGxlY3Rpb24KICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAodHlwZWFoZWFkKSB0eXBlYWhlYWQuZGVzdHJveSgpOwogICAgICAgICAgb3B0aW9ucyA9IG51bGw7CiAgICAgICAgICB0eXBlYWhlYWQgPSBudWxsOwogICAgICAgIH0pOwoKICAgICAgfQogICAgfTsKCiAgfV0pOwoKfSkod2luZG93LCBkb2N1bWVudCk7CgovKioKICogYW5ndWxhci1zdHJhcAogKiBAdmVyc2lvbiB2Mi4xLjIgLSAyMDE0LTEwLTE5CiAqIEBsaW5rIGh0dHA6Ly9tZ2NyZWEuZ2l0aHViLmlvL2FuZ3VsYXItc3RyYXAKICogQGF1dGhvciBPbGl2aWVyIExvdXZpZ25lcyAob2xpdmllckBtZy1jcmVhLmNvbSkKICogQGxpY2Vuc2UgTUlUIExpY2Vuc2UsIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUCiAqLwooZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7Cid1c2Ugc3RyaWN0JzsKCi8vIFNvdXJjZTogYWxlcnQudHBsLmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcC5hbGVydCcpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHsKCiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdhbGVydC9hbGVydC50cGwuaHRtbCcsICc8ZGl2IGNsYXNzPSJhbGVydCIgbmctY2xhc3M9Ilt0eXBlID8gXCdhbGVydC1cJyArIHR5cGUgOiBudWxsXSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgbmctaWY9ImRpc21pc3NhYmxlIiBuZy1jbGljaz0iJGhpZGUoKSI+JnRpbWVzOzwvYnV0dG9uPiA8c3Ryb25nIG5nLWJpbmQ9InRpdGxlIj48L3N0cm9uZz4mbmJzcDs8c3BhbiBuZy1iaW5kLWh0bWw9ImNvbnRlbnQiPjwvc3Bhbj48L2Rpdj4nKTsKCn1dKTsKCi8vIFNvdXJjZTogYXNpZGUudHBsLmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcC5hc2lkZScpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHsKCiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdhc2lkZS9hc2lkZS50cGwuaHRtbCcsICc8ZGl2IGNsYXNzPSJhc2lkZSIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciPjxkaXYgY2xhc3M9ImFzaWRlLWRpYWxvZyI+PGRpdiBjbGFzcz0iYXNpZGUtY29udGVudCI+PGRpdiBjbGFzcz0iYXNpZGUtaGVhZGVyIiBuZy1zaG93PSJ0aXRsZSI+PGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgbmctY2xpY2s9IiRoaWRlKCkiPiZ0aW1lczs8L2J1dHRvbj48aDQgY2xhc3M9ImFzaWRlLXRpdGxlIiBuZy1iaW5kPSJ0aXRsZSI+PC9oND48L2Rpdj48ZGl2IGNsYXNzPSJhc2lkZS1ib2R5IiBuZy1iaW5kPSJjb250ZW50Ij48L2Rpdj48ZGl2IGNsYXNzPSJhc2lkZS1mb290ZXIiPjxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiBuZy1jbGljaz0iJGhpZGUoKSI+Q2xvc2U8L2J1dHRvbj48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj4nKTsKCn1dKTsKCi8vIFNvdXJjZTogZHJvcGRvd24udHBsLmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcC5kcm9wZG93bicpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHsKCiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdkcm9wZG93bi9kcm9wZG93bi50cGwuaHRtbCcsICc8dWwgdGFiaW5kZXg9Ii0xIiBjbGFzcz0iZHJvcGRvd24tbWVudSIgcm9sZT0ibWVudSI+PGxpIHJvbGU9InByZXNlbnRhdGlvbiIgbmctY2xhc3M9IntkaXZpZGVyOiBpdGVtLmRpdmlkZXJ9IiBuZy1yZXBlYXQ9Iml0ZW0gaW4gY29udGVudCI+PGEgcm9sZT0ibWVudWl0ZW0iIHRhYmluZGV4PSItMSIgbmctaHJlZj0ie3tpdGVtLmhyZWZ9fSIgbmctaWY9IiFpdGVtLmRpdmlkZXIgJiYgaXRlbS5ocmVmIiB0YXJnZXQ9Int7aXRlbS50YXJnZXQgfHwgXCdcJ319IiBuZy1iaW5kPSJpdGVtLnRleHQiPjwvYT4gPGEgcm9sZT0ibWVudWl0ZW0iIHRhYmluZGV4PSItMSIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBuZy1pZj0iIWl0ZW0uZGl2aWRlciAmJiBpdGVtLmNsaWNrIiBuZy1jbGljaz0iJGV2YWwoaXRlbS5jbGljayk7JGhpZGUoKSIgbmctYmluZD0iaXRlbS50ZXh0Ij48L2E+PC9saT48L3VsPicpOwoKfV0pOwoKLy8gU291cmNlOiBkYXRlcGlja2VyLnRwbC5qcwphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAuZGF0ZXBpY2tlcicpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHsKCiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdkYXRlcGlja2VyL2RhdGVwaWNrZXIudHBsLmh0bWwnLCAnPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSBkYXRlcGlja2VyIiBuZy1jbGFzcz0iXCdkYXRlcGlja2VyLW1vZGUtXCcgKyAkbW9kZSIgc3R5bGU9Im1heC13aWR0aDogMzIwcHgiPjx0YWJsZSBzdHlsZT0idGFibGUtbGF5b3V0OiBmaXhlZDsgaGVpZ2h0OiAxMDAlOyB3aWR0aDogMTAwJSI+PHRoZWFkPjx0ciBjbGFzcz0idGV4dC1jZW50ZXIiPjx0aD48YnV0dG9uIHRhYmluZGV4PSItMSIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHB1bGwtbGVmdCIgbmctY2xpY2s9IiRzZWxlY3RQYW5lKC0xKSI+PGkgY2xhc3M9Int7JGljb25MZWZ0fX0iPjwvaT48L2J1dHRvbj48L3RoPjx0aCBjb2xzcGFuPSJ7eyByb3dzWzBdLmxlbmd0aCAtIDIgfX0iPjxidXR0b24gdGFiaW5kZXg9Ii0xIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgYnRuLWJsb2NrIHRleHQtc3Ryb25nIiBuZy1jbGljaz0iJHRvZ2dsZU1vZGUoKSI+PHN0cm9uZyBzdHlsZT0idGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemUiIG5nLWJpbmQ9InRpdGxlIj48L3N0cm9uZz48L2J1dHRvbj48L3RoPjx0aD48YnV0dG9uIHRhYmluZGV4PSItMSIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHB1bGwtcmlnaHQiIG5nLWNsaWNrPSIkc2VsZWN0UGFuZSgrMSkiPjxpIGNsYXNzPSJ7eyRpY29uUmlnaHR9fSI+PC9pPjwvYnV0dG9uPjwvdGg+PC90cj48dHIgbmctc2hvdz0ic2hvd0xhYmVscyIgbmctYmluZC1odG1sPSJsYWJlbHMiPjwvdHI+PC90aGVhZD48dGJvZHk+PHRyIG5nLXJlcGVhdD0iKGksIHJvdykgaW4gcm93cyIgaGVpZ2h0PSJ7eyAxMDAgLyByb3dzLmxlbmd0aCB9fSUiPjx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiIG5nLXJlcGVhdD0iKGosIGVsKSBpbiByb3ciPjxidXR0b24gdGFiaW5kZXg9Ii0xIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiIHN0eWxlPSJ3aWR0aDogMTAwJSIgbmctY2xhc3M9IntcJ2J0bi1wcmltYXJ5XCc6IGVsLnNlbGVjdGVkLCBcJ2J0bi1pbmZvIGJ0bi10b2RheVwnOiBlbC5pc1RvZGF5ICYmICFlbC5zZWxlY3RlZH0iIG5nLWNsaWNrPSIkc2VsZWN0KGVsLmRhdGUpIiBuZy1kaXNhYmxlZD0iZWwuZGlzYWJsZWQiPjxzcGFuIG5nLWNsYXNzPSJ7XCd0ZXh0LW11dGVkXCc6IGVsLm11dGVkfSIgbmctYmluZD0iZWwubGFiZWwiPjwvc3Bhbj48L2J1dHRvbj48L3RkPjwvdHI+PC90Ym9keT48L3RhYmxlPjwvZGl2PicpOwoKfV0pOwoKLy8gU291cmNlOiBtb2RhbC50cGwuanMKYW5ndWxhci5tb2R1bGUoJ21nY3JlYS5uZ1N0cmFwLm1vZGFsJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgewoKICAkdGVtcGxhdGVDYWNoZS5wdXQoJ21vZGFsL21vZGFsLnRwbC5odG1sJywgJzxkaXYgY2xhc3M9Im1vZGFsIiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyI+PGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIj48ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij48ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiIG5nLXNob3c9InRpdGxlIj48YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBuZy1jbGljaz0iJGhpZGUoKSI+JnRpbWVzOzwvYnV0dG9uPjxoNCBjbGFzcz0ibW9kYWwtdGl0bGUiIG5nLWJpbmQ9InRpdGxlIj48L2g0PjwvZGl2PjxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiIG5nLWJpbmQ9ImNvbnRlbnQiPjwvZGl2PjxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+PGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiIG5nLWNsaWNrPSIkaGlkZSgpIj5DbG9zZTwvYnV0dG9uPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PicpOwoKfV0pOwoKLy8gU291cmNlOiBwb3BvdmVyLnRwbC5qcwphbmd1bGFyLm1vZHVsZSgnbWdjcmVhLm5nU3RyYXAucG9wb3ZlcicpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHsKCiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdwb3BvdmVyL3BvcG92ZXIudHBsLmh0bWwnLCAnPGRpdiBjbGFzcz0icG9wb3ZlciI+PGRpdiBjbGFzcz0iYXJyb3ciPjwvZGl2PjxoMyBjbGFzcz0icG9wb3Zlci10aXRsZSIgbmctYmluZD0idGl0bGUiIG5nLXNob3c9InRpdGxlIj48L2gzPjxkaXYgY2xhc3M9InBvcG92ZXItY29udGVudCIgbmctYmluZD0iY29udGVudCI+PC9kaXY+PC9kaXY+Jyk7Cgp9XSk7CgovLyBTb3VyY2U6IHNlbGVjdC50cGwuanMKYW5ndWxhci5tb2R1bGUoJ21nY3JlYS5uZ1N0cmFwLnNlbGVjdCcpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHsKCiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdzZWxlY3Qvc2VsZWN0LnRwbC5odG1sJywgJzx1bCB0YWJpbmRleD0iLTEiIGNsYXNzPSJzZWxlY3QgZHJvcGRvd24tbWVudSIgbmctc2hvdz0iJGlzVmlzaWJsZSgpIiByb2xlPSJzZWxlY3QiPjxsaSBuZy1pZj0iJHNob3dBbGxOb25lQnV0dG9ucyI+PGRpdiBjbGFzcz0iYnRuLWdyb3VwIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogNXB4OyBtYXJnaW4tbGVmdDogNXB4Ij48YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgYnRuLXhzIiBuZy1jbGljaz0iJHNlbGVjdEFsbCgpIj5BbGw8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IGJ0bi14cyIgbmctY2xpY2s9IiRzZWxlY3ROb25lKCkiPk5vbmU8L2J1dHRvbj48L2Rpdj48L2xpPjxsaSByb2xlPSJwcmVzZW50YXRpb24iIG5nLXJlcGVhdD0ibWF0Y2ggaW4gJG1hdGNoZXMiIG5nLWNsYXNzPSJ7YWN0aXZlOiAkaXNBY3RpdmUoJGluZGV4KX0iPjxhIHN0eWxlPSJjdXJzb3I6IGRlZmF1bHQiIHJvbGU9Im1lbnVpdGVtIiB0YWJpbmRleD0iLTEiIG5nLWNsaWNrPSIkc2VsZWN0KCRpbmRleCwgJGV2ZW50KSI+PHNwYW4gbmctYmluZD0ibWF0Y2gubGFiZWwiPjwvc3Bhbj4gPGkgY2xhc3M9Int7JGljb25DaGVja21hcmt9fSBwdWxsLXJpZ2h0IiBuZy1pZj0iJGlzTXVsdGlwbGUgJiYgJGlzQWN0aXZlKCRpbmRleCkiPjwvaT48L2E+PC9saT48L3VsPicpOwoKfV0pOwoKLy8gU291cmNlOiB0YWIudHBsLmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcC50YWInKS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7CgogICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGFiL3RhYi50cGwuaHRtbCcsICc8dWwgY2xhc3M9Im5hdiIgbmctY2xhc3M9IiRuYXZDbGFzcyIgcm9sZT0idGFibGlzdCI+PGxpIG5nLXJlcGVhdD0iJHBhbmUgaW4gJHBhbmVzIiBuZy1jbGFzcz0iJGluZGV4ID09ICRwYW5lcy4kYWN0aXZlID8gJGFjdGl2ZUNsYXNzIDogXCdcJyI+PGEgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIiBuZy1jbGljaz0iJHNldEFjdGl2ZSgkaW5kZXgpIiBkYXRhLWluZGV4PSJ7eyAkaW5kZXggfX0iIG5nLWJpbmQtaHRtbD0iJHBhbmUudGl0bGUiPjwvYT48L2xpPjwvdWw+PGRpdiBuZy10cmFuc2NsdWRlIGNsYXNzPSJ0YWItY29udGVudCI+PC9kaXY+Jyk7Cgp9XSk7CgovLyBTb3VyY2U6IHRpbWVwaWNrZXIudHBsLmpzCmFuZ3VsYXIubW9kdWxlKCdtZ2NyZWEubmdTdHJhcC50aW1lcGlja2VyJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgewoKICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3RpbWVwaWNrZXIvdGltZXBpY2tlci50cGwuaHRtbCcsICc8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IHRpbWVwaWNrZXIiIHN0eWxlPSJtaW4td2lkdGg6IDBweDt3aWR0aDogYXV0byI+PHRhYmxlIGhlaWdodD0iMTAwJSI+PHRoZWFkPjx0ciBjbGFzcz0idGV4dC1jZW50ZXIiPjx0aD48YnV0dG9uIHRhYmluZGV4PSItMSIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHB1bGwtbGVmdCIgbmctY2xpY2s9IiRhcnJvd0FjdGlvbigtMSwgMCkiPjxpIGNsYXNzPSJ7eyAkaWNvblVwIH19Ij48L2k+PC9idXR0b24+PC90aD48dGg+Jm5ic3A7PC90aD48dGg+PGJ1dHRvbiB0YWJpbmRleD0iLTEiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCBwdWxsLWxlZnQiIG5nLWNsaWNrPSIkYXJyb3dBY3Rpb24oLTEsIDEpIj48aSBjbGFzcz0ie3sgJGljb25VcCB9fSI+PC9pPjwvYnV0dG9uPjwvdGg+PC90cj48L3RoZWFkPjx0Ym9keT48dHIgbmctcmVwZWF0PSIoaSwgcm93KSBpbiByb3dzIj48dGQgY2xhc3M9InRleHQtY2VudGVyIj48YnV0dG9uIHRhYmluZGV4PSItMSIgc3R5bGU9IndpZHRoOiAxMDAlIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQiIG5nLWNsYXNzPSJ7XCdidG4tcHJpbWFyeVwnOiByb3dbMF0uc2VsZWN0ZWR9IiBuZy1jbGljaz0iJHNlbGVjdChyb3dbMF0uZGF0ZSwgMCkiIG5nLWRpc2FibGVkPSJyb3dbMF0uZGlzYWJsZWQiPjxzcGFuIG5nLWNsYXNzPSJ7XCd0ZXh0LW11dGVkXCc6IHJvd1swXS5tdXRlZH0iIG5nLWJpbmQ9InJvd1swXS5sYWJlbCI+PC9zcGFuPjwvYnV0dG9uPjwvdGQ+PHRkPjxzcGFuIG5nLWJpbmQ9ImkgPT0gbWlkSW5kZXggPyB0aW1lU2VwYXJhdG9yIDogXCcgXCciPjwvc3Bhbj48L3RkPjx0ZCBjbGFzcz0idGV4dC1jZW50ZXIiPjxidXR0b24gdGFiaW5kZXg9Ii0xIiBuZy1pZj0icm93WzFdLmRhdGUiIHN0eWxlPSJ3aWR0aDogMTAwJSIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiBuZy1jbGFzcz0ie1wnYnRuLXByaW1hcnlcJzogcm93WzFdLnNlbGVjdGVkfSIgbmctY2xpY2s9IiRzZWxlY3Qocm93WzFdLmRhdGUsIDEpIiBuZy1kaXNhYmxlZD0icm93WzFdLmRpc2FibGVkIj48c3BhbiBuZy1jbGFzcz0ie1wndGV4dC1tdXRlZFwnOiByb3dbMV0ubXV0ZWR9IiBuZy1iaW5kPSJyb3dbMV0ubGFiZWwiPjwvc3Bhbj48L2J1dHRvbj48L3RkPjx0ZCBuZy1pZj0ic2hvd0FNIj4mbmJzcDs8L3RkPjx0ZCBuZy1pZj0ic2hvd0FNIj48YnV0dG9uIHRhYmluZGV4PSItMSIgbmctc2hvdz0iaSA9PSBtaWRJbmRleCAtICFpc0FNICogMSIgc3R5bGU9IndpZHRoOiAxMDAlIiB0eXBlPSJidXR0b24iIG5nLWNsYXNzPSJ7XCdidG4tcHJpbWFyeVwnOiAhIWlzQU19IiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IiBuZy1jbGljaz0iJHN3aXRjaE1lcmlkaWFuKCkiIG5nLWRpc2FibGVkPSJlbC5kaXNhYmxlZCI+QU08L2J1dHRvbj4gPGJ1dHRvbiB0YWJpbmRleD0iLTEiIG5nLXNob3c9ImkgPT0gbWlkSW5kZXggKyAxIC0gIWlzQU0gKiAxIiBzdHlsZT0id2lkdGg6IDEwMCUiIHR5cGU9ImJ1dHRvbiIgbmctY2xhc3M9IntcJ2J0bi1wcmltYXJ5XCc6ICFpc0FNfSIgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCIgbmctY2xpY2s9IiRzd2l0Y2hNZXJpZGlhbigpIiBuZy1kaXNhYmxlZD0iZWwuZGlzYWJsZWQiPlBNPC9idXR0b24+PC90ZD48L3RyPjwvdGJvZHk+PHRmb290Pjx0ciBjbGFzcz0idGV4dC1jZW50ZXIiPjx0aD48YnV0dG9uIHRhYmluZGV4PSItMSIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kZWZhdWx0IHB1bGwtbGVmdCIgbmctY2xpY2s9IiRhcnJvd0FjdGlvbigxLCAwKSI+PGkgY2xhc3M9Int7ICRpY29uRG93biB9fSI+PC9pPjwvYnV0dG9uPjwvdGg+PHRoPiZuYnNwOzwvdGg+PHRoPjxidXR0b24gdGFiaW5kZXg9Ii0xIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRlZmF1bHQgcHVsbC1sZWZ0IiBuZy1jbGljaz0iJGFycm93QWN0aW9uKDEsIDEpIj48aSBjbGFzcz0ie3sgJGljb25Eb3duIH19Ij48L2k+PC9idXR0b24+PC90aD48L3RyPjwvdGZvb3Q+PC90YWJsZT48L2Rpdj4nKTsKCn1dKTsKCi8vIFNvdXJjZTogdG9vbHRpcC50cGwuanMKYW5ndWxhci5tb2R1bGUoJ21nY3JlYS5uZ1N0cmFwLnRvb2x0aXAnKS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7CgogICR0ZW1wbGF0ZUNhY2hlLnB1dCgndG9vbHRpcC90b29sdGlwLnRwbC5odG1sJywgJzxkaXYgY2xhc3M9InRvb2x0aXAgaW4iIG5nLXNob3c9InRpdGxlIj48ZGl2IGNsYXNzPSJ0b29sdGlwLWFycm93Ij48L2Rpdj48ZGl2IGNsYXNzPSJ0b29sdGlwLWlubmVyIiBuZy1iaW5kPSJ0aXRsZSI+PC9kaXY+PC9kaXY+Jyk7Cgp9XSk7CgovLyBTb3VyY2U6IHR5cGVhaGVhZC50cGwuanMKYW5ndWxhci5tb2R1bGUoJ21nY3JlYS5uZ1N0cmFwLnR5cGVhaGVhZCcpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHsKCiAgJHRlbXBsYXRlQ2FjaGUucHV0KCd0eXBlYWhlYWQvdHlwZWFoZWFkLnRwbC5odG1sJywgJzx1bCB0YWJpbmRleD0iLTEiIGNsYXNzPSJ0eXBlYWhlYWQgZHJvcGRvd24tbWVudSIgbmctc2hvdz0iJGlzVmlzaWJsZSgpIiByb2xlPSJzZWxlY3QiPjxsaSByb2xlPSJwcmVzZW50YXRpb24iIG5nLXJlcGVhdD0ibWF0Y2ggaW4gJG1hdGNoZXMiIG5nLWNsYXNzPSJ7YWN0aXZlOiAkaW5kZXggPT0gJGFjdGl2ZUluZGV4fSI+PGEgcm9sZT0ibWVudWl0ZW0iIHRhYmluZGV4PSItMSIgbmctY2xpY2s9IiRzZWxlY3QoJGluZGV4LCAkZXZlbnQpIiBuZy1iaW5kPSJtYXRjaC5sYWJlbCI+PC9hPjwvbGk+PC91bD4nKTsKCn1dKTsKCgp9KSh3aW5kb3csIGRvY3VtZW50KTsKCi8vISBtb21lbnQuanMKLy8hIHZlcnNpb24gOiAyLjguMwovLyEgYXV0aG9ycyA6IFRpbSBXb29kLCBJc2tyZW4gQ2hlcm5ldiwgTW9tZW50LmpzIGNvbnRyaWJ1dG9ycwovLyEgbGljZW5zZSA6IE1JVAovLyEgbW9tZW50anMuY29tCgooZnVuY3Rpb24gKHVuZGVmaW5lZCkgewogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgICAgIENvbnN0YW50cwogICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKICAgIHZhciBtb21lbnQsCiAgICAgICAgVkVSU0lPTiA9ICcyLjguMycsCiAgICAgICAgLy8gdGhlIGdsb2JhbC1zY29wZSB0aGlzIGlzIE5PVCB0aGUgZ2xvYmFsIG9iamVjdCBpbiBOb2RlLmpzCiAgICAgICAgZ2xvYmFsU2NvcGUgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHRoaXMsCiAgICAgICAgb2xkR2xvYmFsTW9tZW50LAogICAgICAgIHJvdW5kID0gTWF0aC5yb3VuZCwKICAgICAgICBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksCiAgICAgICAgaSwKCiAgICAgICAgWUVBUiA9IDAsCiAgICAgICAgTU9OVEggPSAxLAogICAgICAgIERBVEUgPSAyLAogICAgICAgIEhPVVIgPSAzLAogICAgICAgIE1JTlVURSA9IDQsCiAgICAgICAgU0VDT05EID0gNSwKICAgICAgICBNSUxMSVNFQ09ORCA9IDYsCgogICAgICAgIC8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXMKICAgICAgICBsb2NhbGVzID0ge30sCgogICAgICAgIC8vIGV4dHJhIG1vbWVudCBpbnRlcm5hbCBwcm9wZXJ0aWVzIChwbHVnaW5zIHJlZ2lzdGVyIHByb3BzIGhlcmUpCiAgICAgICAgbW9tZW50UHJvcGVydGllcyA9IFtdLAoKICAgICAgICAvLyBjaGVjayBmb3Igbm9kZUpTCiAgICAgICAgaGFzTW9kdWxlID0gKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSwKCiAgICAgICAgLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4CiAgICAgICAgYXNwTmV0SnNvblJlZ2V4ID0gL15cLz9EYXRlXCgoXC0/XGQrKS9pLAogICAgICAgIGFzcE5ldFRpbWVTcGFuSnNvblJlZ2V4ID0gLyhcLSk/KD86KFxkKilcLik/KFxkKylcOihcZCspKD86XDooXGQrKVwuPyhcZHszfSk/KT8vLAoKICAgICAgICAvLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbAogICAgICAgIC8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmUKICAgICAgICBpc29EdXJhdGlvblJlZ2V4ID0gL14oLSk/UCg/Oig/OihbMC05LC5dKilZKT8oPzooWzAtOSwuXSopTSk/KD86KFswLTksLl0qKUQpPyg/OlQoPzooWzAtOSwuXSopSCk/KD86KFswLTksLl0qKU0pPyg/OihbMC05LC5dKilTKT8pP3woWzAtOSwuXSopVykkLywKCiAgICAgICAgLy8gZm9ybWF0IHRva2VucwogICAgICAgIGZvcm1hdHRpbmdUb2tlbnMgPSAvKFxbW15cW10qXF0pfChcXCk/KE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFF8WVlZWVlZfFlZWVlZfFlZWVl8WVl8Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98bW0/fHNzP3xTezEsNH18WHx6ej98Wlo/fC4pL2csCiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcW1teXFtdKlxdKXwoXFwpPyhMVHxMTD9MP0w/fGx7MSw0fSkvZywKCiAgICAgICAgLy8gcGFyc2luZyB0b2tlbiByZWdleGVzCiAgICAgICAgcGFyc2VUb2tlbk9uZU9yVHdvRGlnaXRzID0gL1xkXGQ/LywgLy8gMCAtIDk5CiAgICAgICAgcGFyc2VUb2tlbk9uZVRvVGhyZWVEaWdpdHMgPSAvXGR7MSwzfS8sIC8vIDAgLSA5OTkKICAgICAgICBwYXJzZVRva2VuT25lVG9Gb3VyRGlnaXRzID0gL1xkezEsNH0vLCAvLyAwIC0gOTk5OQogICAgICAgIHBhcnNlVG9rZW5PbmVUb1NpeERpZ2l0cyA9IC9bK1wtXT9cZHsxLDZ9LywgLy8gLTk5OSw5OTkgLSA5OTksOTk5CiAgICAgICAgcGFyc2VUb2tlbkRpZ2l0cyA9IC9cZCsvLCAvLyBub256ZXJvIG51bWJlciBvZiBkaWdpdHMKICAgICAgICBwYXJzZVRva2VuV29yZCA9IC9bMC05XSpbJ2Etelx1MDBBMC1cdTA1RkZcdTA3MDAtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRUZdK3xbXHUwNjAwLVx1MDZGRlwvXSsoXHMqP1tcdTA2MDAtXHUwNkZGXSspezEsMn0vaSwgLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuCiAgICAgICAgcGFyc2VUb2tlblRpbWV6b25lID0gL1p8W1wrXC1dXGRcZDo/XGRcZC9naSwgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaCiAgICAgICAgcGFyc2VUb2tlblQgPSAvVC9pLCAvLyBUIChJU08gc2VwYXJhdG9yKQogICAgICAgIHBhcnNlVG9rZW5UaW1lc3RhbXBNcyA9IC9bXCtcLV0/XGQrKFwuXGR7MSwzfSk/LywgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjMKICAgICAgICBwYXJzZVRva2VuT3JkaW5hbCA9IC9cZHsxLDJ9LywKCiAgICAgICAgLy9zdHJpY3QgcGFyc2luZyByZWdleGVzCiAgICAgICAgcGFyc2VUb2tlbk9uZURpZ2l0ID0gL1xkLywgLy8gMCAtIDkKICAgICAgICBwYXJzZVRva2VuVHdvRGlnaXRzID0gL1xkXGQvLCAvLyAwMCAtIDk5CiAgICAgICAgcGFyc2VUb2tlblRocmVlRGlnaXRzID0gL1xkezN9LywgLy8gMDAwIC0gOTk5CiAgICAgICAgcGFyc2VUb2tlbkZvdXJEaWdpdHMgPSAvXGR7NH0vLCAvLyAwMDAwIC0gOTk5OQogICAgICAgIHBhcnNlVG9rZW5TaXhEaWdpdHMgPSAvWystXT9cZHs2fS8sIC8vIC05OTksOTk5IC0gOTk5LDk5OQogICAgICAgIHBhcnNlVG9rZW5TaWduZWROdW1iZXIgPSAvWystXT9cZCsvLCAvLyAtaW5mIC0gaW5mCgogICAgICAgIC8vIGlzbyA4NjAxIHJlZ2V4CiAgICAgICAgLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApCiAgICAgICAgaXNvUmVnZXggPSAvXlxzKig/OlsrLV1cZHs2fXxcZHs0fSktKD86KFxkXGQtXGRcZCl8KFdcZFxkJCl8KFdcZFxkLVxkKXwoXGRcZFxkKSkoKFR8ICkoXGRcZCg6XGRcZCg6XGRcZChcLlxkKyk/KT8pPyk/KFtcK1wtXVxkXGQoPzo6P1xkXGQpP3xccypaKT8pPyQvLAoKICAgICAgICBpc29Gb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onLAoKICAgICAgICBpc29EYXRlcyA9IFsKICAgICAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxkezZ9LVxkezJ9LVxkezJ9L10sCiAgICAgICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cZHs0fS1cZHsyfS1cZHsyfS9dLAogICAgICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cZHs0fS1XXGR7Mn0tXGQvXSwKICAgICAgICAgICAgWydHR0dHLVtXXVdXJywgL1xkezR9LVdcZHsyfS9dLAogICAgICAgICAgICBbJ1lZWVktREREJywgL1xkezR9LVxkezN9L10KICAgICAgICBdLAoKICAgICAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzCiAgICAgICAgaXNvVGltZXMgPSBbCiAgICAgICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC8oVHwgKVxkXGQ6XGRcZDpcZFxkXC5cZCsvXSwKICAgICAgICAgICAgWydISDptbTpzcycsIC8oVHwgKVxkXGQ6XGRcZDpcZFxkL10sCiAgICAgICAgICAgIFsnSEg6bW0nLCAvKFR8IClcZFxkOlxkXGQvXSwKICAgICAgICAgICAgWydISCcsIC8oVHwgKVxkXGQvXQogICAgICAgIF0sCgogICAgICAgIC8vIHRpbWV6b25lIGNodW5rZXIgJysxMDowMCcgPiBbJzEwJywgJzAwJ10gb3IgJy0xNTMwJyA+IFsnLTE1JywgJzMwJ10KICAgICAgICBwYXJzZVRpbWV6b25lQ2h1bmtlciA9IC8oW1wrXC1dfFxkXGQpL2dpLAoKICAgICAgICAvLyBnZXR0ZXIgYW5kIHNldHRlciBuYW1lcwogICAgICAgIHByb3h5R2V0dGVyc0FuZFNldHRlcnMgPSAnRGF0ZXxIb3Vyc3xNaW51dGVzfFNlY29uZHN8TWlsbGlzZWNvbmRzJy5zcGxpdCgnfCcpLAogICAgICAgIHVuaXRNaWxsaXNlY29uZEZhY3RvcnMgPSB7CiAgICAgICAgICAgICdNaWxsaXNlY29uZHMnIDogMSwKICAgICAgICAgICAgJ1NlY29uZHMnIDogMWUzLAogICAgICAgICAgICAnTWludXRlcycgOiA2ZTQsCiAgICAgICAgICAgICdIb3VycycgOiAzNmU1LAogICAgICAgICAgICAnRGF5cycgOiA4NjRlNSwKICAgICAgICAgICAgJ01vbnRocycgOiAyNTkyZTYsCiAgICAgICAgICAgICdZZWFycycgOiAzMTUzNmU2CiAgICAgICAgfSwKCiAgICAgICAgdW5pdEFsaWFzZXMgPSB7CiAgICAgICAgICAgIG1zIDogJ21pbGxpc2Vjb25kJywKICAgICAgICAgICAgcyA6ICdzZWNvbmQnLAogICAgICAgICAgICBtIDogJ21pbnV0ZScsCiAgICAgICAgICAgIGggOiAnaG91cicsCiAgICAgICAgICAgIGQgOiAnZGF5JywKICAgICAgICAgICAgRCA6ICdkYXRlJywKICAgICAgICAgICAgdyA6ICd3ZWVrJywKICAgICAgICAgICAgVyA6ICdpc29XZWVrJywKICAgICAgICAgICAgTSA6ICdtb250aCcsCiAgICAgICAgICAgIFEgOiAncXVhcnRlcicsCiAgICAgICAgICAgIHkgOiAneWVhcicsCiAgICAgICAgICAgIERERCA6ICdkYXlPZlllYXInLAogICAgICAgICAgICBlIDogJ3dlZWtkYXknLAogICAgICAgICAgICBFIDogJ2lzb1dlZWtkYXknLAogICAgICAgICAgICBnZzogJ3dlZWtZZWFyJywKICAgICAgICAgICAgR0c6ICdpc29XZWVrWWVhcicKICAgICAgICB9LAoKICAgICAgICBjYW1lbEZ1bmN0aW9ucyA9IHsKICAgICAgICAgICAgZGF5b2Z5ZWFyIDogJ2RheU9mWWVhcicsCiAgICAgICAgICAgIGlzb3dlZWtkYXkgOiAnaXNvV2Vla2RheScsCiAgICAgICAgICAgIGlzb3dlZWsgOiAnaXNvV2VlaycsCiAgICAgICAgICAgIHdlZWt5ZWFyIDogJ3dlZWtZZWFyJywKICAgICAgICAgICAgaXNvd2Vla3llYXIgOiAnaXNvV2Vla1llYXInCiAgICAgICAgfSwKCiAgICAgICAgLy8gZm9ybWF0IGZ1bmN0aW9uIHN0cmluZ3MKICAgICAgICBmb3JtYXRGdW5jdGlvbnMgPSB7fSwKCiAgICAgICAgLy8gZGVmYXVsdCByZWxhdGl2ZSB0aW1lIHRocmVzaG9sZHMKICAgICAgICByZWxhdGl2ZVRpbWVUaHJlc2hvbGRzID0gewogICAgICAgICAgICBzOiA0NSwgIC8vIHNlY29uZHMgdG8gbWludXRlCiAgICAgICAgICAgIG06IDQ1LCAgLy8gbWludXRlcyB0byBob3VyCiAgICAgICAgICAgIGg6IDIyLCAgLy8gaG91cnMgdG8gZGF5CiAgICAgICAgICAgIGQ6IDI2LCAgLy8gZGF5cyB0byBtb250aAogICAgICAgICAgICBNOiAxMSAgIC8vIG1vbnRocyB0byB5ZWFyCiAgICAgICAgfSwKCiAgICAgICAgLy8gdG9rZW5zIHRvIG9yZGluYWxpemUgYW5kIHBhZAogICAgICAgIG9yZGluYWxpemVUb2tlbnMgPSAnREREIHcgVyBNIEQgZCcuc3BsaXQoJyAnKSwKICAgICAgICBwYWRkZWRUb2tlbnMgPSAnTSBEIEggaCBtIHMgdyBXJy5zcGxpdCgnICcpLAoKICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHsKICAgICAgICAgICAgTSAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxOwogICAgICAgICAgICB9LAogICAgICAgICAgICBNTU0gIDogZnVuY3Rpb24gKGZvcm1hdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE1NTU0gOiBmdW5jdGlvbiAoZm9ybWF0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEQgICAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIERERCAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXlPZlllYXIoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZCAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSgpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZCAgIDogZnVuY3Rpb24gKGZvcm1hdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRkZCAgOiBmdW5jdGlvbiAoZm9ybWF0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZGRkIDogZnVuY3Rpb24gKGZvcm1hdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHcgICAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53ZWVrKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFcgICAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc29XZWVrKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFlZICAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMueWVhcigpICUgMTAwLCAyKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWVlZWSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodGhpcy55ZWFyKCksIDQpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBZWVlZWSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodGhpcy55ZWFyKCksIDUpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBZWVlZWVkgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgeSA9IHRoaXMueWVhcigpLCBzaWduID0geSA+PSAwID8gJysnIDogJy0nOwogICAgICAgICAgICAgICAgcmV0dXJuIHNpZ24gKyBsZWZ0WmVyb0ZpbGwoTWF0aC5hYnMoeSksIDYpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZyAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0aGlzLndlZWtZZWFyKCkgJSAxMDAsIDIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZ2dnIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0aGlzLndlZWtZZWFyKCksIDQpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZ2dnZyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodGhpcy53ZWVrWWVhcigpLCA1KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgR0cgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodGhpcy5pc29XZWVrWWVhcigpICUgMTAwLCAyKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgR0dHRyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodGhpcy5pc29XZWVrWWVhcigpLCA0KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgR0dHR0cgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMuaXNvV2Vla1llYXIoKSwgNSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53ZWVrZGF5KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc29XZWVrZGF5KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGEgICAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0odGhpcy5ob3VycygpLCB0aGlzLm1pbnV0ZXMoKSwgdHJ1ZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEEgICAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0odGhpcy5ob3VycygpLCB0aGlzLm1pbnV0ZXMoKSwgZmFsc2UpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBIICAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaCAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbSAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1pbnV0ZXMoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcyAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlY29uZHMoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgUyAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0b0ludCh0aGlzLm1pbGxpc2Vjb25kcygpIC8gMTAwKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgU1MgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0WmVyb0ZpbGwodG9JbnQodGhpcy5taWxsaXNlY29uZHMoKSAvIDEwKSwgMik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFNTUyAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdFplcm9GaWxsKHRoaXMubWlsbGlzZWNvbmRzKCksIDMpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBTU1NTIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbCh0aGlzLm1pbGxpc2Vjb25kcygpLCAzKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWiAgICA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBhID0gLXRoaXMuem9uZSgpLAogICAgICAgICAgICAgICAgICAgIGIgPSAnKyc7CiAgICAgICAgICAgICAgICBpZiAoYSA8IDApIHsKICAgICAgICAgICAgICAgICAgICBhID0gLWE7CiAgICAgICAgICAgICAgICAgICAgYiA9ICctJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBiICsgbGVmdFplcm9GaWxsKHRvSW50KGEgLyA2MCksIDIpICsgJzonICsgbGVmdFplcm9GaWxsKHRvSW50KGEpICUgNjAsIDIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBaWiAgIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGEgPSAtdGhpcy56b25lKCksCiAgICAgICAgICAgICAgICAgICAgYiA9ICcrJzsKICAgICAgICAgICAgICAgIGlmIChhIDwgMCkgewogICAgICAgICAgICAgICAgICAgIGEgPSAtYTsKICAgICAgICAgICAgICAgICAgICBiID0gJy0nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGIgKyBsZWZ0WmVyb0ZpbGwodG9JbnQoYSAvIDYwKSwgMikgKyBsZWZ0WmVyb0ZpbGwodG9JbnQoYSkgJSA2MCwgMik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHogOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy56b25lQWJicigpOwogICAgICAgICAgICB9LAogICAgICAgICAgICB6eiA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnpvbmVOYW1lKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFggICAgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy51bml4KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFEgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5xdWFydGVyKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBkZXByZWNhdGlvbnMgPSB7fSwKCiAgICAgICAgbGlzdHMgPSBbJ21vbnRocycsICdtb250aHNTaG9ydCcsICd3ZWVrZGF5cycsICd3ZWVrZGF5c1Nob3J0JywgJ3dlZWtkYXlzTWluJ107CgogICAgLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLiBkZmwgY29tZXMgZnJvbQogICAgLy8gZGVmYXVsdC4KICAgIGZ1bmN0aW9uIGRmbChhLCBiLCBjKSB7CiAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIGEgIT0gbnVsbCA/IGEgOiBiOwogICAgICAgICAgICBjYXNlIDM6IHJldHVybiBhICE9IG51bGwgPyBhIDogYiAhPSBudWxsID8gYiA6IGM7CiAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignSW1wbGVtZW50IG1lJyk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikgewogICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7CiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LCBhbmQgZXM1IHN0YW5kYXJkIGlzIG5vdCB2ZXJ5CiAgICAgICAgLy8gaGVscGZ1bC4KICAgICAgICByZXR1cm4gewogICAgICAgICAgICBlbXB0eSA6IGZhbHNlLAogICAgICAgICAgICB1bnVzZWRUb2tlbnMgOiBbXSwKICAgICAgICAgICAgdW51c2VkSW5wdXQgOiBbXSwKICAgICAgICAgICAgb3ZlcmZsb3cgOiAtMiwKICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlciA6IDAsCiAgICAgICAgICAgIG51bGxJbnB1dCA6IGZhbHNlLAogICAgICAgICAgICBpbnZhbGlkTW9udGggOiBudWxsLAogICAgICAgICAgICBpbnZhbGlkRm9ybWF0IDogZmFsc2UsCiAgICAgICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLAogICAgICAgICAgICBpc286IGZhbHNlCiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBwcmludE1zZyhtc2cpIHsKICAgICAgICBpZiAobW9tZW50LnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiYKICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4pIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHsKICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTsKICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkgewogICAgICAgICAgICAgICAgcHJpbnRNc2cobXNnKTsKICAgICAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0sIGZuKTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7CiAgICAgICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHsKICAgICAgICAgICAgcHJpbnRNc2cobXNnKTsKICAgICAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGFkVG9rZW4oZnVuYywgY291bnQpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGxlZnRaZXJvRmlsbChmdW5jLmNhbGwodGhpcywgYSksIGNvdW50KTsKICAgICAgICB9OwogICAgfQogICAgZnVuY3Rpb24gb3JkaW5hbGl6ZVRva2VuKGZ1bmMsIHBlcmlvZCkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmNhbGwodGhpcywgYSksIHBlcmlvZCk7CiAgICAgICAgfTsKICAgIH0KCiAgICB3aGlsZSAob3JkaW5hbGl6ZVRva2Vucy5sZW5ndGgpIHsKICAgICAgICBpID0gb3JkaW5hbGl6ZVRva2Vucy5wb3AoKTsKICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tpICsgJ28nXSA9IG9yZGluYWxpemVUb2tlbihmb3JtYXRUb2tlbkZ1bmN0aW9uc1tpXSwgaSk7CiAgICB9CiAgICB3aGlsZSAocGFkZGVkVG9rZW5zLmxlbmd0aCkgewogICAgICAgIGkgPSBwYWRkZWRUb2tlbnMucG9wKCk7CiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbaSArIGldID0gcGFkVG9rZW4oZm9ybWF0VG9rZW5GdW5jdGlvbnNbaV0sIDIpOwogICAgfQogICAgZm9ybWF0VG9rZW5GdW5jdGlvbnMuRERERCA9IHBhZFRva2VuKGZvcm1hdFRva2VuRnVuY3Rpb25zLkRERCwgMyk7CgoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAgICBDb25zdHJ1Y3RvcnMKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCiAgICBmdW5jdGlvbiBMb2NhbGUoKSB7CiAgICB9CgogICAgLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3QKICAgIGZ1bmN0aW9uIE1vbWVudChjb25maWcsIHNraXBPdmVyZmxvdykgewogICAgICAgIGlmIChza2lwT3ZlcmZsb3cgIT09IGZhbHNlKSB7CiAgICAgICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTsKICAgICAgICB9CiAgICAgICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpOwogICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZSgrY29uZmlnLl9kKTsKICAgIH0KCiAgICAvLyBEdXJhdGlvbiBDb25zdHJ1Y3RvcgogICAgZnVuY3Rpb24gRHVyYXRpb24oZHVyYXRpb24pIHsKICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLAogICAgICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsCiAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCwKICAgICAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsCiAgICAgICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgMCwKICAgICAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCwKICAgICAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLAogICAgICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLAogICAgICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLAogICAgICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDsKCiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmUKICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSArbWlsbGlzZWNvbmRzICsKICAgICAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDAKICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MAogICAgICAgICAgICBob3VycyAqIDM2ZTU7IC8vIDEwMDAgKiA2MCAqIDYwCiAgICAgICAgLy8gQmVjYXVzZSBvZiBkYXRlQWRkUmVtb3ZlIHRyZWF0cyAyNCBob3VycyBhcyBkaWZmZXJlbnQgZnJvbSBhCiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseQogICAgICAgIHRoaXMuX2RheXMgPSArZGF5cyArCiAgICAgICAgICAgIHdlZWtzICogNzsKICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZwogICAgICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlCiAgICAgICAgLy8gaXQgc2VwYXJhdGVseS4KICAgICAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICsKICAgICAgICAgICAgcXVhcnRlcnMgKiAzICsKICAgICAgICAgICAgeWVhcnMgKiAxMjsKCiAgICAgICAgdGhpcy5fZGF0YSA9IHt9OwoKICAgICAgICB0aGlzLl9sb2NhbGUgPSBtb21lbnQubG9jYWxlRGF0YSgpOwoKICAgICAgICB0aGlzLl9idWJibGUoKTsKICAgIH0KCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgSGVscGVycwogICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCiAgICBmdW5jdGlvbiBleHRlbmQoYSwgYikgewogICAgICAgIGZvciAodmFyIGkgaW4gYikgewogICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkgewogICAgICAgICAgICAgICAgYVtpXSA9IGJbaV07CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7CiAgICAgICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nOwogICAgICAgIH0KCiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkgewogICAgICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gYTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7CiAgICAgICAgdmFyIGksIHByb3AsIHZhbDsKCiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9pc0FNb21lbnRPYmplY3QgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIHRvLl9pc0FNb21lbnRPYmplY3QgPSBmcm9tLl9pc0FNb21lbnRPYmplY3Q7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgZnJvbS5faSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgdG8uX2kgPSBmcm9tLl9pOwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGZyb20uX2YgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIHRvLl9mID0gZnJvbS5fZjsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9sICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICB0by5fbCA9IGZyb20uX2w7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgZnJvbS5fc3RyaWN0ICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICB0by5fc3RyaWN0ID0gZnJvbS5fc3RyaWN0OwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGZyb20uX3R6bSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgdG8uX3R6bSA9IGZyb20uX3R6bTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9pc1VUQyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgdG8uX2lzVVRDID0gZnJvbS5faXNVVEM7CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgZnJvbS5fb2Zmc2V0ICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICB0by5fb2Zmc2V0ID0gZnJvbS5fb2Zmc2V0OwogICAgICAgIH0KICAgICAgICBpZiAodHlwZW9mIGZyb20uX3BmICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICB0by5fcGYgPSBmcm9tLl9wZjsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBmcm9tLl9sb2NhbGUgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7CiAgICAgICAgfQoKICAgICAgICBpZiAobW9tZW50UHJvcGVydGllcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGZvciAoaSBpbiBtb21lbnRQcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTsKICAgICAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRvOwogICAgfQoKICAgIGZ1bmN0aW9uIGFic1JvdW5kKG51bWJlcikgewogICAgICAgIGlmIChudW1iZXIgPCAwKSB7CiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBsZWZ0IHplcm8gZmlsbCBhIG51bWJlcgogICAgLy8gc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2xlZnQtemVyby1maWxsaW5nIGZvciBwZXJmb3JtYW5jZSBjb21wYXJpc29uCiAgICBmdW5jdGlvbiBsZWZ0WmVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikgewogICAgICAgIHZhciBvdXRwdXQgPSAnJyArIE1hdGguYWJzKG51bWJlciksCiAgICAgICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDsKCiAgICAgICAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHsKICAgICAgICAgICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0OwogICAgICAgIH0KICAgICAgICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArIG91dHB1dDsKICAgIH0KCiAgICBmdW5jdGlvbiBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7CiAgICAgICAgdmFyIHJlcyA9IHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07CgogICAgICAgIHJlcy5tb250aHMgPSBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICsKICAgICAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyOwogICAgICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHsKICAgICAgICAgICAgLS1yZXMubW9udGhzOwogICAgICAgIH0KCiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICsoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpKTsKCiAgICAgICAgcmV0dXJuIHJlczsKICAgIH0KCiAgICBmdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikgewogICAgICAgIHZhciByZXM7CiAgICAgICAgb3RoZXIgPSBtYWtlQXMob3RoZXIsIGJhc2UpOwogICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkgewogICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTsKICAgICAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9IC1yZXMubWlsbGlzZWNvbmRzOwogICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzOwogICAgfQoKICAgIC8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWQKICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHsKICAgICAgICAgICAgdmFyIGR1ciwgdG1wOwogICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXQKICAgICAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHsKICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCAnbW9tZW50KCkuJyArIG5hbWUgICsgJyhwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS4nICsgbmFtZSArICcobnVtYmVyLCBwZXJpb2QpLicpOwogICAgICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyArdmFsIDogdmFsOwogICAgICAgICAgICBkdXIgPSBtb21lbnQuZHVyYXRpb24odmFsLCBwZXJpb2QpOwogICAgICAgICAgICBhZGRPclN1YnRyYWN0RHVyYXRpb25Gcm9tTW9tZW50KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGRPclN1YnRyYWN0RHVyYXRpb25Gcm9tTW9tZW50KG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHsKICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcywKICAgICAgICAgICAgZGF5cyA9IGR1cmF0aW9uLl9kYXlzLAogICAgICAgICAgICBtb250aHMgPSBkdXJhdGlvbi5fbW9udGhzOwogICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDsKCiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykgewogICAgICAgICAgICBtb20uX2Quc2V0VGltZSgrbW9tLl9kICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpOwogICAgICAgIH0KICAgICAgICBpZiAoZGF5cykgewogICAgICAgICAgICByYXdTZXR0ZXIobW9tLCAnRGF0ZScsIHJhd0dldHRlcihtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpOwogICAgICAgIH0KICAgICAgICBpZiAobW9udGhzKSB7CiAgICAgICAgICAgIHJhd01vbnRoU2V0dGVyKG1vbSwgcmF3R2V0dGVyKG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7CiAgICAgICAgfQogICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHsKICAgICAgICAgICAgbW9tZW50LnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gY2hlY2sgaWYgaXMgYW4gYXJyYXkKICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHsKICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJzsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHsKICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nIHx8CiAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgRGF0ZTsKICAgIH0KCiAgICAvLyBjb21wYXJlIHR3byBhcnJheXMsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzCiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkgewogICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSwKICAgICAgICAgICAgbGVuZ3RoRGlmZiA9IE1hdGguYWJzKGFycmF5MS5sZW5ndGggLSBhcnJheTIubGVuZ3RoKSwKICAgICAgICAgICAgZGlmZnMgPSAwLAogICAgICAgICAgICBpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICBpZiAoKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fAogICAgICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKSkgewogICAgICAgICAgICAgICAgZGlmZnMrKzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZGlmZnMgKyBsZW5ndGhEaWZmOwogICAgfQoKICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7CiAgICAgICAgaWYgKHVuaXRzKSB7CiAgICAgICAgICAgIHZhciBsb3dlcmVkID0gdW5pdHMudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oLilzJC8sICckMScpOwogICAgICAgICAgICB1bml0cyA9IHVuaXRBbGlhc2VzW3VuaXRzXSB8fCBjYW1lbEZ1bmN0aW9uc1tsb3dlcmVkXSB8fCBsb3dlcmVkOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdW5pdHM7CiAgICB9CgogICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHsKICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sCiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wLAogICAgICAgICAgICBwcm9wOwoKICAgICAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHsKICAgICAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7CiAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApOwogICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7CiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbm9ybWFsaXplZElucHV0OwogICAgfQoKICAgIGZ1bmN0aW9uIG1ha2VMaXN0KGZpZWxkKSB7CiAgICAgICAgdmFyIGNvdW50LCBzZXR0ZXI7CgogICAgICAgIGlmIChmaWVsZC5pbmRleE9mKCd3ZWVrJykgPT09IDApIHsKICAgICAgICAgICAgY291bnQgPSA3OwogICAgICAgICAgICBzZXR0ZXIgPSAnZGF5JzsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoZmllbGQuaW5kZXhPZignbW9udGgnKSA9PT0gMCkgewogICAgICAgICAgICBjb3VudCA9IDEyOwogICAgICAgICAgICBzZXR0ZXIgPSAnbW9udGgnOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgbW9tZW50W2ZpZWxkXSA9IGZ1bmN0aW9uIChmb3JtYXQsIGluZGV4KSB7CiAgICAgICAgICAgIHZhciBpLCBnZXR0ZXIsCiAgICAgICAgICAgICAgICBtZXRob2QgPSBtb21lbnQuX2xvY2FsZVtmaWVsZF0sCiAgICAgICAgICAgICAgICByZXN1bHRzID0gW107CgogICAgICAgICAgICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0OwogICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9CgogICAgICAgICAgICBnZXR0ZXIgPSBmdW5jdGlvbiAoaSkgewogICAgICAgICAgICAgICAgdmFyIG0gPSBtb21lbnQoKS51dGMoKS5zZXQoc2V0dGVyLCBpKTsKICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuY2FsbChtb21lbnQuX2xvY2FsZSwgbSwgZm9ybWF0IHx8ICcnKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0dGVyKGluZGV4KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGdldHRlcihpKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikgewogICAgICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sCiAgICAgICAgICAgIHZhbHVlID0gMDsKCiAgICAgICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHsKICAgICAgICAgICAgaWYgKGNvZXJjZWROdW1iZXIgPj0gMCkgewogICAgICAgICAgICAgICAgdmFsdWUgPSBNYXRoLmZsb29yKGNvZXJjZWROdW1iZXIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFsdWUgPSBNYXRoLmNlaWwoY29lcmNlZE51bWJlcik7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkgewogICAgICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCArIDEsIDApKS5nZXRVVENEYXRlKCk7CiAgICB9CgogICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHsKICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb21lbnQoW3llYXIsIDExLCAzMSArIGRvdyAtIGRveV0pLCBkb3csIGRveSkud2VlazsKICAgIH0KCiAgICBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHsKICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHsKICAgICAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7CiAgICB9CgogICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyhtKSB7CiAgICAgICAgdmFyIG92ZXJmbG93OwogICAgICAgIGlmIChtLl9hICYmIG0uX3BmLm92ZXJmbG93ID09PSAtMikgewogICAgICAgICAgICBvdmVyZmxvdyA9CiAgICAgICAgICAgICAgICBtLl9hW01PTlRIXSA8IDAgfHwgbS5fYVtNT05USF0gPiAxMSA/IE1PTlRIIDoKICAgICAgICAgICAgICAgIG0uX2FbREFURV0gPCAxIHx8IG0uX2FbREFURV0gPiBkYXlzSW5Nb250aChtLl9hW1lFQVJdLCBtLl9hW01PTlRIXSkgPyBEQVRFIDoKICAgICAgICAgICAgICAgIG0uX2FbSE9VUl0gPCAwIHx8IG0uX2FbSE9VUl0gPiAyMyA/IEhPVVIgOgogICAgICAgICAgICAgICAgbS5fYVtNSU5VVEVdIDwgMCB8fCBtLl9hW01JTlVURV0gPiA1OSA/IE1JTlVURSA6CiAgICAgICAgICAgICAgICBtLl9hW1NFQ09ORF0gPCAwIHx8IG0uX2FbU0VDT05EXSA+IDU5ID8gU0VDT05EIDoKICAgICAgICAgICAgICAgIG0uX2FbTUlMTElTRUNPTkRdIDwgMCB8fCBtLl9hW01JTExJU0VDT05EXSA+IDk5OSA/IE1JTExJU0VDT05EIDoKICAgICAgICAgICAgICAgIC0xOwoKICAgICAgICAgICAgaWYgKG0uX3BmLl9vdmVyZmxvd0RheU9mWWVhciAmJiAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSkpIHsKICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbS5fcGYub3ZlcmZsb3cgPSBvdmVyZmxvdzsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaXNWYWxpZChtKSB7CiAgICAgICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkgewogICAgICAgICAgICBtLl9pc1ZhbGlkID0gIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJgogICAgICAgICAgICAgICAgbS5fcGYub3ZlcmZsb3cgPCAwICYmCiAgICAgICAgICAgICAgICAhbS5fcGYuZW1wdHkgJiYKICAgICAgICAgICAgICAgICFtLl9wZi5pbnZhbGlkTW9udGggJiYKICAgICAgICAgICAgICAgICFtLl9wZi5udWxsSW5wdXQgJiYKICAgICAgICAgICAgICAgICFtLl9wZi5pbnZhbGlkRm9ybWF0ICYmCiAgICAgICAgICAgICAgICAhbS5fcGYudXNlckludmFsaWRhdGVkOwoKICAgICAgICAgICAgaWYgKG0uX3N0cmljdCkgewogICAgICAgICAgICAgICAgbS5faXNWYWxpZCA9IG0uX2lzVmFsaWQgJiYKICAgICAgICAgICAgICAgICAgICBtLl9wZi5jaGFyc0xlZnRPdmVyID09PSAwICYmCiAgICAgICAgICAgICAgICAgICAgbS5fcGYudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbS5faXNWYWxpZDsKICAgIH0KCiAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7CiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5OwogICAgfQoKICAgIC8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheQogICAgLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2gKICAgIC8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3QKICAgIGZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykgewogICAgICAgIHZhciBpID0gMCwgaiwgbmV4dCwgbG9jYWxlLCBzcGxpdDsKCiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHsKICAgICAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7CiAgICAgICAgICAgIGogPSBzcGxpdC5sZW5ndGg7CiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTsKICAgICAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsOwogICAgICAgICAgICB3aGlsZSAoaiA+IDApIHsKICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTsKICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5sZW5ndGggPj0gaiAmJiBjb21wYXJlQXJyYXlzKHNwbGl0LCBuZXh0LCB0cnVlKSA+PSBqIC0gMSkgewogICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmUKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGotLTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpKys7CiAgICAgICAgfQogICAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIGZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkgewogICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsOwogICAgICAgIGlmICghbG9jYWxlc1tuYW1lXSAmJiBoYXNNb2R1bGUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IG1vbWVudC5sb2NhbGUoKTsKICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTsKICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgZGVmaW5lTG9jYWxlIGN1cnJlbnRseSBhbHNvIHNldHMgdGhlIGdsb2JhbCBsb2NhbGUsIHdlIHdhbnQgdG8gdW5kbyB0aGF0IGZvciBsYXp5IGxvYWRlZCBsb2NhbGVzCiAgICAgICAgICAgICAgICBtb21lbnQubG9jYWxlKG9sZExvY2FsZSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTsKICAgIH0KCiAgICAvLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLgogICAgZnVuY3Rpb24gbWFrZUFzKGlucHV0LCBtb2RlbCkgewogICAgICAgIHJldHVybiBtb2RlbC5faXNVVEMgPyBtb21lbnQoaW5wdXQpLnpvbmUobW9kZWwuX29mZnNldCB8fCAwKSA6CiAgICAgICAgICAgIG1vbWVudChpbnB1dCkubG9jYWwoKTsKICAgIH0KCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgTG9jYWxlCiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKICAgIGV4dGVuZChMb2NhbGUucHJvdG90eXBlLCB7CgogICAgICAgIHNldCA6IGZ1bmN0aW9uIChjb25maWcpIHsKICAgICAgICAgICAgdmFyIHByb3AsIGk7CiAgICAgICAgICAgIGZvciAoaSBpbiBjb25maWcpIHsKICAgICAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBfbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksCiAgICAgICAgbW9udGhzIDogZnVuY3Rpb24gKG0pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1ttLm1vbnRoKCldOwogICAgICAgIH0sCgogICAgICAgIF9tb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSwKICAgICAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFttLm1vbnRoKCldOwogICAgICAgIH0sCgogICAgICAgIG1vbnRoc1BhcnNlIDogZnVuY3Rpb24gKG1vbnRoTmFtZSkgewogICAgICAgICAgICB2YXIgaSwgbW9tLCByZWdleDsKCiAgICAgICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHsKICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7CiAgICAgICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHkKICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2VbaV0pIHsKICAgICAgICAgICAgICAgICAgICBtb20gPSBtb21lbnQudXRjKFsyMDAwLCBpXSk7CiAgICAgICAgICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXgKICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIF93ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSwKICAgICAgICB3ZWVrZGF5cyA6IGZ1bmN0aW9uIChtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1ttLmRheSgpXTsKICAgICAgICB9LAoKICAgICAgICBfd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksCiAgICAgICAgd2Vla2RheXNTaG9ydCA6IGZ1bmN0aW9uIChtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldOwogICAgICAgIH0sCgogICAgICAgIF93ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSwKICAgICAgICB3ZWVrZGF5c01pbiA6IGZ1bmN0aW9uIChtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXTsKICAgICAgICB9LAoKICAgICAgICB3ZWVrZGF5c1BhcnNlIDogZnVuY3Rpb24gKHdlZWtkYXlOYW1lKSB7CiAgICAgICAgICAgIHZhciBpLCBtb20sIHJlZ2V4OwoKICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7CiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHsKICAgICAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeQogICAgICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7CiAgICAgICAgICAgICAgICAgICAgbW9tID0gbW9tZW50KFsyMDAwLCAxXSkuZGF5KGkpOwogICAgICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXgKICAgICAgICAgICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBfbG9uZ0RhdGVGb3JtYXQgOiB7CiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsCiAgICAgICAgICAgIEwgOiAnTU0vREQvWVlZWScsCiAgICAgICAgICAgIExMIDogJ01NTU0gRCwgWVlZWScsCiAgICAgICAgICAgIExMTCA6ICdNTU1NIEQsIFlZWVkgTFQnLAogICAgICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBMVCcKICAgICAgICB9LAogICAgICAgIGxvbmdEYXRlRm9ybWF0IDogZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTsKICAgICAgICAgICAgaWYgKCFvdXRwdXQgJiYgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldKSB7CiAgICAgICAgICAgICAgICBvdXRwdXQgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV0ucmVwbGFjZSgvTU1NTXxNTXxERHxkZGRkL2csIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gb3V0cHV0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7CiAgICAgICAgfSwKCiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkgewogICAgICAgICAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzCiAgICAgICAgICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLgogICAgICAgICAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnKTsKICAgICAgICB9LAoKICAgICAgICBfbWVyaWRpZW1QYXJzZSA6IC9bYXBdXC4/bT9cLj8vaSwKICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikgewogICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBfY2FsZW5kYXIgOiB7CiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsCiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsCiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsCiAgICAgICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLAogICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJywKICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCcKICAgICAgICB9LAogICAgICAgIGNhbGVuZGFyIDogZnVuY3Rpb24gKGtleSwgbW9tKSB7CiAgICAgICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldOwogICAgICAgICAgICByZXR1cm4gdHlwZW9mIG91dHB1dCA9PT0gJ2Z1bmN0aW9uJyA/IG91dHB1dC5hcHBseShtb20pIDogb3V0cHV0OwogICAgICAgIH0sCgogICAgICAgIF9yZWxhdGl2ZVRpbWUgOiB7CiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsCiAgICAgICAgICAgIHBhc3QgOiAnJXMgYWdvJywKICAgICAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJywKICAgICAgICAgICAgbSA6ICdhIG1pbnV0ZScsCiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLAogICAgICAgICAgICBoIDogJ2FuIGhvdXInLAogICAgICAgICAgICBoaCA6ICclZCBob3VycycsCiAgICAgICAgICAgIGQgOiAnYSBkYXknLAogICAgICAgICAgICBkZCA6ICclZCBkYXlzJywKICAgICAgICAgICAgTSA6ICdhIG1vbnRoJywKICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJywKICAgICAgICAgICAgeSA6ICdhIHllYXInLAogICAgICAgICAgICB5eSA6ICclZCB5ZWFycycKICAgICAgICB9LAoKICAgICAgICByZWxhdGl2ZVRpbWUgOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7CiAgICAgICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTsKICAgICAgICAgICAgcmV0dXJuICh0eXBlb2Ygb3V0cHV0ID09PSAnZnVuY3Rpb24nKSA/CiAgICAgICAgICAgICAgICBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSA6CiAgICAgICAgICAgICAgICBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTsKICAgICAgICB9LAoKICAgICAgICBwYXN0RnV0dXJlIDogZnVuY3Rpb24gKGRpZmYsIG91dHB1dCkgewogICAgICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddOwogICAgICAgICAgICByZXR1cm4gdHlwZW9mIGZvcm1hdCA9PT0gJ2Z1bmN0aW9uJyA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7CiAgICAgICAgfSwKCiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpOwogICAgICAgIH0sCiAgICAgICAgX29yZGluYWwgOiAnJWQnLAoKICAgICAgICBwcmVwYXJzZSA6IGZ1bmN0aW9uIChzdHJpbmcpIHsKICAgICAgICAgICAgcmV0dXJuIHN0cmluZzsKICAgICAgICB9LAoKICAgICAgICBwb3N0Zm9ybWF0IDogZnVuY3Rpb24gKHN0cmluZykgewogICAgICAgICAgICByZXR1cm4gc3RyaW5nOwogICAgICAgIH0sCgogICAgICAgIHdlZWsgOiBmdW5jdGlvbiAobW9tKSB7CiAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrOwogICAgICAgIH0sCgogICAgICAgIF93ZWVrIDogewogICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay4KICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLgogICAgICAgIH0sCgogICAgICAgIF9pbnZhbGlkRGF0ZTogJ0ludmFsaWQgZGF0ZScsCiAgICAgICAgaW52YWxpZERhdGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlOwogICAgICAgIH0KICAgIH0pOwoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAgICBGb3JtYXR0aW5nCiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKICAgIGZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHsKICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xbW1xzXFNdLykpIHsKICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cW3xcXSQvZywgJycpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFwvZywgJycpOwogICAgfQoKICAgIGZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHsKICAgICAgICB2YXIgYXJyYXkgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksIGksIGxlbmd0aDsKCiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkgewogICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkgewogICAgICAgICAgICB2YXIgb3V0cHV0ID0gJyc7CiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgb3V0cHV0ICs9IGFycmF5W2ldIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KSA6IGFycmF5W2ldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7CiAgICAgICAgfTsKICAgIH0KCiAgICAvLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3QKICAgIGZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHsKICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7CiAgICAgICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpOwogICAgICAgIH0KCiAgICAgICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpOwoKICAgICAgICBpZiAoIWZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKSB7CiAgICAgICAgICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7CiAgICB9CgogICAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbG9jYWxlKSB7CiAgICAgICAgdmFyIGkgPSA1OwoKICAgICAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHsKICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7CiAgICAgICAgfQoKICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDsKICAgICAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHsKICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobG9jYWxGb3JtYXR0aW5nVG9rZW5zLCByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMpOwogICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDsKICAgICAgICAgICAgaSAtPSAxOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZvcm1hdDsKICAgIH0KCgogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgICAgIFBhcnNpbmcKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgogICAgLy8gZ2V0IHRoZSByZWdleCB0byBmaW5kIHRoZSBuZXh0IHRva2VuCiAgICBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykgewogICAgICAgIHZhciBhLCBzdHJpY3QgPSBjb25maWcuX3N0cmljdDsKICAgICAgICBzd2l0Y2ggKHRva2VuKSB7CiAgICAgICAgY2FzZSAnUSc6CiAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuT25lRGlnaXQ7CiAgICAgICAgY2FzZSAnRERERCc6CiAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuVGhyZWVEaWdpdHM7CiAgICAgICAgY2FzZSAnWVlZWSc6CiAgICAgICAgY2FzZSAnR0dHRyc6CiAgICAgICAgY2FzZSAnZ2dnZyc6CiAgICAgICAgICAgIHJldHVybiBzdHJpY3QgPyBwYXJzZVRva2VuRm91ckRpZ2l0cyA6IHBhcnNlVG9rZW5PbmVUb0ZvdXJEaWdpdHM7CiAgICAgICAgY2FzZSAnWSc6CiAgICAgICAgY2FzZSAnRyc6CiAgICAgICAgY2FzZSAnZyc6CiAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuU2lnbmVkTnVtYmVyOwogICAgICAgIGNhc2UgJ1lZWVlZWSc6CiAgICAgICAgY2FzZSAnWVlZWVknOgogICAgICAgIGNhc2UgJ0dHR0dHJzoKICAgICAgICBjYXNlICdnZ2dnZyc6CiAgICAgICAgICAgIHJldHVybiBzdHJpY3QgPyBwYXJzZVRva2VuU2l4RGlnaXRzIDogcGFyc2VUb2tlbk9uZVRvU2l4RGlnaXRzOwogICAgICAgIGNhc2UgJ1MnOgogICAgICAgICAgICBpZiAoc3RyaWN0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbk9uZURpZ2l0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICBjYXNlICdTUyc6CiAgICAgICAgICAgIGlmIChzdHJpY3QpIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuVHdvRGlnaXRzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICBjYXNlICdTU1MnOgogICAgICAgICAgICBpZiAoc3RyaWN0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlblRocmVlRGlnaXRzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8KICAgICAgICBjYXNlICdEREQnOgogICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbk9uZVRvVGhyZWVEaWdpdHM7CiAgICAgICAgY2FzZSAnTU1NJzoKICAgICAgICBjYXNlICdNTU1NJzoKICAgICAgICBjYXNlICdkZCc6CiAgICAgICAgY2FzZSAnZGRkJzoKICAgICAgICBjYXNlICdkZGRkJzoKICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5Xb3JkOwogICAgICAgIGNhc2UgJ2EnOgogICAgICAgIGNhc2UgJ0EnOgogICAgICAgICAgICByZXR1cm4gY29uZmlnLl9sb2NhbGUuX21lcmlkaWVtUGFyc2U7CiAgICAgICAgY2FzZSAnWCc6CiAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuVGltZXN0YW1wTXM7CiAgICAgICAgY2FzZSAnWic6CiAgICAgICAgY2FzZSAnWlonOgogICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlblRpbWV6b25lOwogICAgICAgIGNhc2UgJ1QnOgogICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlblQ7CiAgICAgICAgY2FzZSAnU1NTUyc6CiAgICAgICAgICAgIHJldHVybiBwYXJzZVRva2VuRGlnaXRzOwogICAgICAgIGNhc2UgJ01NJzoKICAgICAgICBjYXNlICdERCc6CiAgICAgICAgY2FzZSAnWVknOgogICAgICAgIGNhc2UgJ0dHJzoKICAgICAgICBjYXNlICdnZyc6CiAgICAgICAgY2FzZSAnSEgnOgogICAgICAgIGNhc2UgJ2hoJzoKICAgICAgICBjYXNlICdtbSc6CiAgICAgICAgY2FzZSAnc3MnOgogICAgICAgIGNhc2UgJ3d3JzoKICAgICAgICBjYXNlICdXVyc6CiAgICAgICAgICAgIHJldHVybiBzdHJpY3QgPyBwYXJzZVRva2VuVHdvRGlnaXRzIDogcGFyc2VUb2tlbk9uZU9yVHdvRGlnaXRzOwogICAgICAgIGNhc2UgJ00nOgogICAgICAgIGNhc2UgJ0QnOgogICAgICAgIGNhc2UgJ2QnOgogICAgICAgIGNhc2UgJ0gnOgogICAgICAgIGNhc2UgJ2gnOgogICAgICAgIGNhc2UgJ20nOgogICAgICAgIGNhc2UgJ3MnOgogICAgICAgIGNhc2UgJ3cnOgogICAgICAgIGNhc2UgJ1cnOgogICAgICAgIGNhc2UgJ2UnOgogICAgICAgIGNhc2UgJ0UnOgogICAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbk9uZU9yVHdvRGlnaXRzOwogICAgICAgIGNhc2UgJ0RvJzoKICAgICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5PcmRpbmFsOwogICAgICAgIGRlZmF1bHQgOgogICAgICAgICAgICBhID0gbmV3IFJlZ0V4cChyZWdleHBFc2NhcGUodW5lc2NhcGVGb3JtYXQodG9rZW4ucmVwbGFjZSgnXFwnLCAnJykpLCAnaScpKTsKICAgICAgICAgICAgcmV0dXJuIGE7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHRpbWV6b25lTWludXRlc0Zyb21TdHJpbmcoc3RyaW5nKSB7CiAgICAgICAgc3RyaW5nID0gc3RyaW5nIHx8ICcnOwogICAgICAgIHZhciBwb3NzaWJsZVR6TWF0Y2hlcyA9IChzdHJpbmcubWF0Y2gocGFyc2VUb2tlblRpbWV6b25lKSB8fCBbXSksCiAgICAgICAgICAgIHR6Q2h1bmsgPSBwb3NzaWJsZVR6TWF0Y2hlc1twb3NzaWJsZVR6TWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXSwKICAgICAgICAgICAgcGFydHMgPSAodHpDaHVuayArICcnKS5tYXRjaChwYXJzZVRpbWV6b25lQ2h1bmtlcikgfHwgWyctJywgMCwgMF0sCiAgICAgICAgICAgIG1pbnV0ZXMgPSArKHBhcnRzWzFdICogNjApICsgdG9JbnQocGFydHNbMl0pOwoKICAgICAgICByZXR1cm4gcGFydHNbMF0gPT09ICcrJyA/IC1taW51dGVzIDogbWludXRlczsKICAgIH0KCiAgICAvLyBmdW5jdGlvbiB0byBjb252ZXJ0IHN0cmluZyBpbnB1dCB0byBkYXRlCiAgICBmdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykgewogICAgICAgIHZhciBhLCBkYXRlUGFydEFycmF5ID0gY29uZmlnLl9hOwoKICAgICAgICBzd2l0Y2ggKHRva2VuKSB7CiAgICAgICAgLy8gUVVBUlRFUgogICAgICAgIGNhc2UgJ1EnOgogICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgZGF0ZVBhcnRBcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIE1PTlRICiAgICAgICAgY2FzZSAnTScgOiAvLyBmYWxsIHRocm91Z2ggdG8gTU0KICAgICAgICBjYXNlICdNTScgOgogICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgZGF0ZVBhcnRBcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ01NTScgOiAvLyBmYWxsIHRocm91Z2ggdG8gTU1NTQogICAgICAgIGNhc2UgJ01NTU0nIDoKICAgICAgICAgICAgYSA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKGlucHV0KTsKICAgICAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuCiAgICAgICAgICAgIGlmIChhICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbTU9OVEhdID0gYTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbmZpZy5fcGYuaW52YWxpZE1vbnRoID0gaW5wdXQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8gREFZIE9GIE1PTlRICiAgICAgICAgY2FzZSAnRCcgOiAvLyBmYWxsIHRocm91Z2ggdG8gREQKICAgICAgICBjYXNlICdERCcgOgogICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgZGF0ZVBhcnRBcnJheVtEQVRFXSA9IHRvSW50KGlucHV0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdEbycgOgogICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgZGF0ZVBhcnRBcnJheVtEQVRFXSA9IHRvSW50KHBhcnNlSW50KGlucHV0LCAxMCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIERBWSBPRiBZRUFSCiAgICAgICAgY2FzZSAnREREJyA6IC8vIGZhbGwgdGhyb3VnaCB0byBERERECiAgICAgICAgY2FzZSAnRERERCcgOgogICAgICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIFlFQVIKICAgICAgICBjYXNlICdZWScgOgogICAgICAgICAgICBkYXRlUGFydEFycmF5W1lFQVJdID0gbW9tZW50LnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnWVlZWScgOgogICAgICAgIGNhc2UgJ1lZWVlZJyA6CiAgICAgICAgY2FzZSAnWVlZWVlZJyA6CiAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbWUVBUl0gPSB0b0ludChpbnB1dCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIEFNIC8gUE0KICAgICAgICBjYXNlICdhJyA6IC8vIGZhbGwgdGhyb3VnaCB0byBBCiAgICAgICAgY2FzZSAnQScgOgogICAgICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8gMjQgSE9VUgogICAgICAgIGNhc2UgJ0gnIDogLy8gZmFsbCB0aHJvdWdoIHRvIGhoCiAgICAgICAgY2FzZSAnSEgnIDogLy8gZmFsbCB0aHJvdWdoIHRvIGhoCiAgICAgICAgY2FzZSAnaCcgOiAvLyBmYWxsIHRocm91Z2ggdG8gaGgKICAgICAgICBjYXNlICdoaCcgOgogICAgICAgICAgICBkYXRlUGFydEFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAvLyBNSU5VVEUKICAgICAgICBjYXNlICdtJyA6IC8vIGZhbGwgdGhyb3VnaCB0byBtbQogICAgICAgIGNhc2UgJ21tJyA6CiAgICAgICAgICAgIGRhdGVQYXJ0QXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8gU0VDT05ECiAgICAgICAgY2FzZSAncycgOiAvLyBmYWxsIHRocm91Z2ggdG8gc3MKICAgICAgICBjYXNlICdzcycgOgogICAgICAgICAgICBkYXRlUGFydEFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIE1JTExJU0VDT05ECiAgICAgICAgY2FzZSAnUycgOgogICAgICAgIGNhc2UgJ1NTJyA6CiAgICAgICAgY2FzZSAnU1NTJyA6CiAgICAgICAgY2FzZSAnU1NTUycgOgogICAgICAgICAgICBkYXRlUGFydEFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIFVOSVggVElNRVNUQU1QIFdJVEggTVMKICAgICAgICBjYXNlICdYJzoKICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCkgKiAxMDAwKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8gVElNRVpPTkUKICAgICAgICBjYXNlICdaJyA6IC8vIGZhbGwgdGhyb3VnaCB0byBaWgogICAgICAgIGNhc2UgJ1paJyA6CiAgICAgICAgICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTsKICAgICAgICAgICAgY29uZmlnLl90em0gPSB0aW1lem9uZU1pbnV0ZXNGcm9tU3RyaW5nKGlucHV0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgLy8gV0VFS0RBWSAtIGh1bWFuCiAgICAgICAgY2FzZSAnZGQnOgogICAgICAgIGNhc2UgJ2RkZCc6CiAgICAgICAgY2FzZSAnZGRkZCc6CiAgICAgICAgICAgIGEgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTsKICAgICAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkCiAgICAgICAgICAgIGlmIChhICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTsKICAgICAgICAgICAgICAgIGNvbmZpZy5fd1snZCddID0gYTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbmZpZy5fcGYuaW52YWxpZFdlZWtkYXkgPSBpbnB1dDsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAvLyBXRUVLLCBXRUVLIERBWSAtIG51bWVyaWMKICAgICAgICBjYXNlICd3JzoKICAgICAgICBjYXNlICd3dyc6CiAgICAgICAgY2FzZSAnVyc6CiAgICAgICAgY2FzZSAnV1cnOgogICAgICAgIGNhc2UgJ2QnOgogICAgICAgIGNhc2UgJ2UnOgogICAgICAgIGNhc2UgJ0UnOgogICAgICAgICAgICB0b2tlbiA9IHRva2VuLnN1YnN0cigwLCAxKTsKICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgIGNhc2UgJ2dnZ2cnOgogICAgICAgIGNhc2UgJ0dHR0cnOgogICAgICAgIGNhc2UgJ0dHR0dHJzoKICAgICAgICAgICAgdG9rZW4gPSB0b2tlbi5zdWJzdHIoMCwgMik7CiAgICAgICAgICAgIGlmIChpbnB1dCkgewogICAgICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9OwogICAgICAgICAgICAgICAgY29uZmlnLl93W3Rva2VuXSA9IHRvSW50KGlucHV0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdnZyc6CiAgICAgICAgY2FzZSAnR0cnOgogICAgICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307CiAgICAgICAgICAgIGNvbmZpZy5fd1t0b2tlbl0gPSBtb21lbnQucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7CiAgICAgICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcDsKCiAgICAgICAgdyA9IGNvbmZpZy5fdzsKICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7CiAgICAgICAgICAgIGRvdyA9IDE7CiAgICAgICAgICAgIGRveSA9IDQ7CgogICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb24KICAgICAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZQogICAgICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZAogICAgICAgICAgICAvLyBjcmVhdGUgbm93KS4KICAgICAgICAgICAgd2Vla1llYXIgPSBkZmwody5HRywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKG1vbWVudCgpLCAxLCA0KS55ZWFyKTsKICAgICAgICAgICAgd2VlayA9IGRmbCh3LlcsIDEpOwogICAgICAgICAgICB3ZWVrZGF5ID0gZGZsKHcuRSwgMSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93OwogICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7CgogICAgICAgICAgICB3ZWVrWWVhciA9IGRmbCh3LmdnLCBjb25maWcuX2FbWUVBUl0sIHdlZWtPZlllYXIobW9tZW50KCksIGRvdywgZG95KS55ZWFyKTsKICAgICAgICAgICAgd2VlayA9IGRmbCh3LncsIDEpOwoKICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWsKICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7CiAgICAgICAgICAgICAgICBpZiAod2Vla2RheSA8IGRvdykgewogICAgICAgICAgICAgICAgICAgICsrd2VlazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbmluZyBvZiB3ZWVrCiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbmluZyBvZiB3ZWVrCiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gZG93OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRveSwgZG93KTsKCiAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyOwogICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7CiAgICB9CgogICAgLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuCiAgICAvLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvdwogICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuCiAgICAvLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF0KICAgIGZ1bmN0aW9uIGRhdGVGcm9tQ29uZmlnKGNvbmZpZykgewogICAgICAgIHZhciBpLCBkYXRlLCBpbnB1dCA9IFtdLCBjdXJyZW50RGF0ZSwgeWVhclRvVXNlOwoKICAgICAgICBpZiAoY29uZmlnLl9kKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpOwoKICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzCiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiBjb25maWcuX2FbREFURV0gPT0gbnVsbCAmJiBjb25maWcuX2FbTU9OVEhdID09IG51bGwpIHsKICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7CiAgICAgICAgfQoKICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXMKICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIpIHsKICAgICAgICAgICAgeWVhclRvVXNlID0gZGZsKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pOwoKICAgICAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpKSB7CiAgICAgICAgICAgICAgICBjb25maWcuX3BmLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGRhdGUgPSBtYWtlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTsKICAgICAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTsKICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7CiAgICAgICAgfQoKICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS4KICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5CiAgICAgICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXIKICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhcgogICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZwogICAgICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHsKICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTsKICAgICAgICB9CgogICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZQogICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7CiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gKGNvbmZpZy5fYVtpXSA9PSBudWxsKSA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldOwogICAgICAgIH0KCiAgICAgICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gbWFrZVVUQ0RhdGUgOiBtYWtlRGF0ZSkuYXBwbHkobnVsbCwgaW5wdXQpOwogICAgICAgIC8vIEFwcGx5IHRpbWV6b25lIG9mZnNldCBmcm9tIGlucHV0LiBUaGUgYWN0dWFsIHpvbmUgY2FuIGJlIGNoYW5nZWQKICAgICAgICAvLyB3aXRoIHBhcnNlWm9uZS4KICAgICAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkgewogICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpICsgY29uZmlnLl90em0pOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBkYXRlRnJvbU9iamVjdChjb25maWcpIHsKICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0OwoKICAgICAgICBpZiAoY29uZmlnLl9kKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7CiAgICAgICAgY29uZmlnLl9hID0gWwogICAgICAgICAgICBub3JtYWxpemVkSW5wdXQueWVhciwKICAgICAgICAgICAgbm9ybWFsaXplZElucHV0Lm1vbnRoLAogICAgICAgICAgICBub3JtYWxpemVkSW5wdXQuZGF5LAogICAgICAgICAgICBub3JtYWxpemVkSW5wdXQuaG91ciwKICAgICAgICAgICAgbm9ybWFsaXplZElucHV0Lm1pbnV0ZSwKICAgICAgICAgICAgbm9ybWFsaXplZElucHV0LnNlY29uZCwKICAgICAgICAgICAgbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kCiAgICAgICAgXTsKCiAgICAgICAgZGF0ZUZyb21Db25maWcoY29uZmlnKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykgewogICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpOwogICAgICAgIGlmIChjb25maWcuX3VzZVVUQykgewogICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgbm93LmdldFVUQ0Z1bGxZZWFyKCksCiAgICAgICAgICAgICAgICBub3cuZ2V0VVRDTW9udGgoKSwKICAgICAgICAgICAgICAgIG5vdy5nZXRVVENEYXRlKCkKICAgICAgICAgICAgXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gW25vdy5nZXRGdWxsWWVhcigpLCBub3cuZ2V0TW9udGgoKSwgbm93LmdldERhdGUoKV07CiAgICAgICAgfQogICAgfQoKICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmcKICAgIGZ1bmN0aW9uIG1ha2VEYXRlRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHsKICAgICAgICBpZiAoY29uZmlnLl9mID09PSBtb21lbnQuSVNPXzg2MDEpIHsKICAgICAgICAgICAgcGFyc2VJU08oY29uZmlnKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgY29uZmlnLl9hID0gW107CiAgICAgICAgY29uZmlnLl9wZi5lbXB0eSA9IHRydWU7CgogICAgICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgCiAgICAgICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLAogICAgICAgICAgICBpLCBwYXJzZWRJbnB1dCwgdG9rZW5zLCB0b2tlbiwgc2tpcHBlZCwKICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCwKICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDA7CgogICAgICAgIHRva2VucyA9IGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTsKCiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTsKICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdOwogICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHsKICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7CiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9wZi51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuCiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHsKICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkgewogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fcGYuZW1wdHkgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fcGYudW51c2VkVG9rZW5zLnB1c2godG9rZW4pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkgewogICAgICAgICAgICAgICAgY29uZmlnLl9wZi51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmcKICAgICAgICBjb25maWcuX3BmLmNoYXJzTGVmdE92ZXIgPSBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoOwogICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkgewogICAgICAgICAgICBjb25maWcuX3BmLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTsKICAgICAgICB9CgogICAgICAgIC8vIGhhbmRsZSBhbSBwbQogICAgICAgIGlmIChjb25maWcuX2lzUG0gJiYgY29uZmlnLl9hW0hPVVJdIDwgMTIpIHsKICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdICs9IDEyOwogICAgICAgIH0KICAgICAgICAvLyBpZiBpcyAxMiBhbSwgY2hhbmdlIGhvdXJzIHRvIDAKICAgICAgICBpZiAoY29uZmlnLl9pc1BtID09PSBmYWxzZSAmJiBjb25maWcuX2FbSE9VUl0gPT09IDEyKSB7CiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7CiAgICAgICAgfQoKICAgICAgICBkYXRlRnJvbUNvbmZpZyhjb25maWcpOwogICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTsKICAgIH0KCiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7CiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvXFwoXFspfFxcKFxdKXxcWyhbXlxdXFtdKilcXXxcXCguKS9nLCBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHsKICAgICAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0OwogICAgICAgIH0pOwogICAgfQoKICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHQKICAgIGZ1bmN0aW9uIHJlZ2V4cEVzY2FwZShzKSB7CiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cL1xcXiQqKz8uKCl8W1xde31dL2csICdcXCQmJyk7CiAgICB9CgogICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3MKICAgIGZ1bmN0aW9uIG1ha2VEYXRlRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykgewogICAgICAgIHZhciB0ZW1wQ29uZmlnLAogICAgICAgICAgICBiZXN0TW9tZW50LAoKICAgICAgICAgICAgc2NvcmVUb0JlYXQsCiAgICAgICAgICAgIGksCiAgICAgICAgICAgIGN1cnJlbnRTY29yZTsKCiAgICAgICAgaWYgKGNvbmZpZy5fZi5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgY29uZmlnLl9wZi5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTsKICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZy5fZi5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBjdXJyZW50U2NvcmUgPSAwOwogICAgICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTsKICAgICAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRlbXBDb25maWcuX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpOwogICAgICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldOwogICAgICAgICAgICBtYWtlRGF0ZUZyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7CgogICAgICAgICAgICBpZiAoIWlzVmFsaWQodGVtcENvbmZpZykpIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdAogICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gdGVtcENvbmZpZy5fcGYuY2hhcnNMZWZ0T3ZlcjsKCiAgICAgICAgICAgIC8vb3IgdG9rZW5zCiAgICAgICAgICAgIGN1cnJlbnRTY29yZSArPSB0ZW1wQ29uZmlnLl9wZi51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7CgogICAgICAgICAgICB0ZW1wQ29uZmlnLl9wZi5zY29yZSA9IGN1cnJlbnRTY29yZTsKCiAgICAgICAgICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7CiAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTsKICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpOwogICAgfQoKICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0CiAgICBmdW5jdGlvbiBwYXJzZUlTTyhjb25maWcpIHsKICAgICAgICB2YXIgaSwgbCwKICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLAogICAgICAgICAgICBtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoc3RyaW5nKTsKCiAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgIGNvbmZpZy5fcGYuaXNvID0gdHJ1ZTsKICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMoc3RyaW5nKSkgewogICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzVdIHNob3VsZCBiZSAnVCcgb3IgdW5kZWZpbmVkCiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9mID0gaXNvRGF0ZXNbaV1bMF0gKyAobWF0Y2hbNl0gfHwgJyAnKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhzdHJpbmcpKSB7CiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9mICs9IGlzb1RpbWVzW2ldWzBdOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzdHJpbmcubWF0Y2gocGFyc2VUb2tlblRpbWV6b25lKSkgewogICAgICAgICAgICAgICAgY29uZmlnLl9mICs9ICdaJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBtYWtlRGF0ZUZyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXQgb3IgZmFsbGJhY2sKICAgIGZ1bmN0aW9uIG1ha2VEYXRlRnJvbVN0cmluZyhjb25maWcpIHsKICAgICAgICBwYXJzZUlTTyhjb25maWcpOwogICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7CiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7CiAgICAgICAgICAgIG1vbWVudC5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBtYXAoYXJyLCBmbikgewogICAgICAgIHZhciByZXMgPSBbXSwgaTsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzOwogICAgfQoKICAgIGZ1bmN0aW9uIG1ha2VEYXRlRnJvbUlucHV0KGNvbmZpZykgewogICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSwgbWF0Y2hlZDsKICAgICAgICBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgpOwogICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkgewogICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgraW5wdXQpOwogICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhpbnB1dCkpICE9PSBudWxsKSB7CiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgbWFrZURhdGVGcm9tU3RyaW5nKGNvbmZpZyk7CiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkgewogICAgICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHsKICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRhdGVGcm9tQ29uZmlnKGNvbmZpZyk7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YoaW5wdXQpID09PSAnb2JqZWN0JykgewogICAgICAgICAgICBkYXRlRnJvbU9iamVjdChjb25maWcpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKGlucHV0KSA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHMKICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1vbWVudC5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBtYWtlRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcykgewogICAgICAgIC8vY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6CiAgICAgICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE4MTM0OC9pbnN0YW50aWF0aW5nLWEtamF2YXNjcmlwdC1vYmplY3QtYnktY2FsbGluZy1wcm90b3R5cGUtY29uc3RydWN0b3ItYXBwbHkKICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTsKCiAgICAgICAgLy90aGUgZGF0ZSBjb25zdHJ1Y3RvciBkb2Vzbid0IGFjY2VwdCB5ZWFycyA8IDE5NzAKICAgICAgICBpZiAoeSA8IDE5NzApIHsKICAgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGRhdGU7CiAgICB9CgogICAgZnVuY3Rpb24gbWFrZVVUQ0RhdGUoeSkgewogICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7CiAgICAgICAgaWYgKHkgPCAxOTcwKSB7CiAgICAgICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBkYXRlOwogICAgfQoKICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7CiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgaWYgKCFpc05hTihpbnB1dCkpIHsKICAgICAgICAgICAgICAgIGlucHV0ID0gcGFyc2VJbnQoaW5wdXQsIDEwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gaW5wdXQ7CiAgICB9CgogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgICAgIFJlbGF0aXZlIFRpbWUKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgogICAgLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemUKICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7CiAgICAgICAgcmV0dXJuIGxvY2FsZS5yZWxhdGl2ZVRpbWUobnVtYmVyIHx8IDEsICEhd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSk7CiAgICB9CgogICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCBsb2NhbGUpIHsKICAgICAgICB2YXIgZHVyYXRpb24gPSBtb21lbnQuZHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpLAogICAgICAgICAgICBzZWNvbmRzID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSksCiAgICAgICAgICAgIG1pbnV0ZXMgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKSwKICAgICAgICAgICAgaG91cnMgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKSwKICAgICAgICAgICAgZGF5cyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpLAogICAgICAgICAgICBtb250aHMgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKSwKICAgICAgICAgICAgeWVhcnMgPSByb3VuZChkdXJhdGlvbi5hcygneScpKSwKCiAgICAgICAgICAgIGFyZ3MgPSBzZWNvbmRzIDwgcmVsYXRpdmVUaW1lVGhyZXNob2xkcy5zICYmIFsncycsIHNlY29uZHNdIHx8CiAgICAgICAgICAgICAgICBtaW51dGVzID09PSAxICYmIFsnbSddIHx8CiAgICAgICAgICAgICAgICBtaW51dGVzIDwgcmVsYXRpdmVUaW1lVGhyZXNob2xkcy5tICYmIFsnbW0nLCBtaW51dGVzXSB8fAogICAgICAgICAgICAgICAgaG91cnMgPT09IDEgJiYgWydoJ10gfHwKICAgICAgICAgICAgICAgIGhvdXJzIDwgcmVsYXRpdmVUaW1lVGhyZXNob2xkcy5oICYmIFsnaGgnLCBob3Vyc10gfHwKICAgICAgICAgICAgICAgIGRheXMgPT09IDEgJiYgWydkJ10gfHwKICAgICAgICAgICAgICAgIGRheXMgPCByZWxhdGl2ZVRpbWVUaHJlc2hvbGRzLmQgJiYgWydkZCcsIGRheXNdIHx8CiAgICAgICAgICAgICAgICBtb250aHMgPT09IDEgJiYgWydNJ10gfHwKICAgICAgICAgICAgICAgIG1vbnRocyA8IHJlbGF0aXZlVGltZVRocmVzaG9sZHMuTSAmJiBbJ01NJywgbW9udGhzXSB8fAogICAgICAgICAgICAgICAgeWVhcnMgPT09IDEgJiYgWyd5J10gfHwgWyd5eScsIHllYXJzXTsKCiAgICAgICAgYXJnc1syXSA9IHdpdGhvdXRTdWZmaXg7CiAgICAgICAgYXJnc1szXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7CiAgICAgICAgYXJnc1s0XSA9IGxvY2FsZTsKICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkoe30sIGFyZ3MpOwogICAgfQoKCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgV2VlayBvZiBZZWFyCiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKICAgIC8vIGZpcnN0RGF5T2ZXZWVrICAgICAgIDAgPSBzdW4sIDYgPSBzYXQKICAgIC8vICAgICAgICAgICAgICAgICAgICAgIHRoZSBkYXkgb2YgdGhlIHdlZWsgdGhhdCBzdGFydHMgdGhlIHdlZWsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgICh1c3VhbGx5IHN1bmRheSBvciBtb25kYXkpCiAgICAvLyBmaXJzdERheU9mV2Vla09mWWVhciAwID0gc3VuLCA2ID0gc2F0CiAgICAvLyAgICAgICAgICAgICAgICAgICAgICB0aGUgZmlyc3Qgd2VlayBpcyB0aGUgd2VlayB0aGF0IGNvbnRhaW5zIHRoZSBmaXJzdAogICAgLy8gICAgICAgICAgICAgICAgICAgICAgb2YgdGhpcyBkYXkgb2YgdGhlIHdlZWsKICAgIC8vICAgICAgICAgICAgICAgICAgICAgIChlZy4gSVNPIHdlZWtzIHVzZSB0aHVyc2RheSAoNCkpCiAgICBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZmlyc3REYXlPZldlZWssIGZpcnN0RGF5T2ZXZWVrT2ZZZWFyKSB7CiAgICAgICAgdmFyIGVuZCA9IGZpcnN0RGF5T2ZXZWVrT2ZZZWFyIC0gZmlyc3REYXlPZldlZWssCiAgICAgICAgICAgIGRheXNUb0RheU9mV2VlayA9IGZpcnN0RGF5T2ZXZWVrT2ZZZWFyIC0gbW9tLmRheSgpLAogICAgICAgICAgICBhZGp1c3RlZE1vbWVudDsKCgogICAgICAgIGlmIChkYXlzVG9EYXlPZldlZWsgPiBlbmQpIHsKICAgICAgICAgICAgZGF5c1RvRGF5T2ZXZWVrIC09IDc7CiAgICAgICAgfQoKICAgICAgICBpZiAoZGF5c1RvRGF5T2ZXZWVrIDwgZW5kIC0gNykgewogICAgICAgICAgICBkYXlzVG9EYXlPZldlZWsgKz0gNzsKICAgICAgICB9CgogICAgICAgIGFkanVzdGVkTW9tZW50ID0gbW9tZW50KG1vbSkuYWRkKGRheXNUb0RheU9mV2VlaywgJ2QnKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICB3ZWVrOiBNYXRoLmNlaWwoYWRqdXN0ZWRNb21lbnQuZGF5T2ZZZWFyKCkgLyA3KSwKICAgICAgICAgICAgeWVhcjogYWRqdXN0ZWRNb21lbnQueWVhcigpCiAgICAgICAgfTsKICAgIH0KCiAgICAvL2h0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXkKICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBmaXJzdERheU9mV2Vla09mWWVhciwgZmlyc3REYXlPZldlZWspIHsKICAgICAgICB2YXIgZCA9IG1ha2VVVENEYXRlKHllYXIsIDAsIDEpLmdldFVUQ0RheSgpLCBkYXlzVG9BZGQsIGRheU9mWWVhcjsKCiAgICAgICAgZCA9IGQgPT09IDAgPyA3IDogZDsKICAgICAgICB3ZWVrZGF5ID0gd2Vla2RheSAhPSBudWxsID8gd2Vla2RheSA6IGZpcnN0RGF5T2ZXZWVrOwogICAgICAgIGRheXNUb0FkZCA9IGZpcnN0RGF5T2ZXZWVrIC0gZCArIChkID4gZmlyc3REYXlPZldlZWtPZlllYXIgPyA3IDogMCkgLSAoZCA8IGZpcnN0RGF5T2ZXZWVrID8gNyA6IDApOwogICAgICAgIGRheU9mWWVhciA9IDcgKiAod2VlayAtIDEpICsgKHdlZWtkYXkgLSBmaXJzdERheU9mV2VlaykgKyBkYXlzVG9BZGQgKyAxOwoKICAgICAgICByZXR1cm4gewogICAgICAgICAgICB5ZWFyOiBkYXlPZlllYXIgPiAwID8geWVhciA6IHllYXIgLSAxLAogICAgICAgICAgICBkYXlPZlllYXI6IGRheU9mWWVhciA+IDAgPyAgZGF5T2ZZZWFyIDogZGF5c0luWWVhcih5ZWFyIC0gMSkgKyBkYXlPZlllYXIKICAgICAgICB9OwogICAgfQoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAgICBUb3AgTGV2ZWwgRnVuY3Rpb25zCiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgogICAgZnVuY3Rpb24gbWFrZU1vbWVudChjb25maWcpIHsKICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksCiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjsKCiAgICAgICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBtb21lbnQubG9jYWxlRGF0YShjb25maWcuX2wpOwoKICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHsKICAgICAgICAgICAgcmV0dXJuIG1vbWVudC5pbnZhbGlkKHtudWxsSW5wdXQ6IHRydWV9KTsKICAgICAgICB9CgogICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpOwogICAgICAgIH0KCiAgICAgICAgaWYgKG1vbWVudC5pc01vbWVudChpbnB1dCkpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoaW5wdXQsIHRydWUpOwogICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7CiAgICAgICAgICAgIGlmIChpc0FycmF5KGZvcm1hdCkpIHsKICAgICAgICAgICAgICAgIG1ha2VEYXRlRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBtYWtlRGF0ZUZyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1ha2VEYXRlRnJvbUlucHV0KGNvbmZpZyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjb25maWcpOwogICAgfQoKICAgIG1vbWVudCA9IGZ1bmN0aW9uIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkgewogICAgICAgIHZhciBjOwoKICAgICAgICBpZiAodHlwZW9mKGxvY2FsZSkgPT09ICdib29sZWFuJykgewogICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7CiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDsKICAgICAgICB9CiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuCiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjMKICAgICAgICBjID0ge307CiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTsKICAgICAgICBjLl9pID0gaW5wdXQ7CiAgICAgICAgYy5fZiA9IGZvcm1hdDsKICAgICAgICBjLl9sID0gbG9jYWxlOwogICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDsKICAgICAgICBjLl9pc1VUQyA9IGZhbHNlOwogICAgICAgIGMuX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpOwoKICAgICAgICByZXR1cm4gbWFrZU1vbWVudChjKTsKICAgIH07CgogICAgbW9tZW50LnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlOwoKICAgIG1vbWVudC5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZSgKICAgICAgICAnbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUuIFRoaXMgaXMgJyArCiAgICAgICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdXBjb21pbmcgbWFqb3IgJyArCiAgICAgICAgJ3JlbGVhc2UuIFBsZWFzZSByZWZlciB0byAnICsKICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MDcgZm9yIG1vcmUgaW5mby4nLAogICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHsKICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pKTsKICAgICAgICB9CiAgICApOwoKICAgIC8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsCiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuCiAgICAvLwogICAgLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZQogICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy4KICAgIGZ1bmN0aW9uIHBpY2tCeShmbiwgbW9tZW50cykgewogICAgICAgIHZhciByZXMsIGk7CiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHsKICAgICAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF07CiAgICAgICAgfQogICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIG1vbWVudCgpOwogICAgICAgIH0KICAgICAgICByZXMgPSBtb21lbnRzWzBdOwogICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgIGlmIChtb21lbnRzW2ldW2ZuXShyZXMpKSB7CiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXM7CiAgICB9CgogICAgbW9tZW50Lm1pbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsKCiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTsKICAgIH07CgogICAgbW9tZW50Lm1heCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsKCiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpOwogICAgfTsKCiAgICAvLyBjcmVhdGluZyB3aXRoIHV0YwogICAgbW9tZW50LnV0YyA9IGZ1bmN0aW9uIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkgewogICAgICAgIHZhciBjOwoKICAgICAgICBpZiAodHlwZW9mKGxvY2FsZSkgPT09ICdib29sZWFuJykgewogICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7CiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDsKICAgICAgICB9CiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuCiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjMKICAgICAgICBjID0ge307CiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTsKICAgICAgICBjLl91c2VVVEMgPSB0cnVlOwogICAgICAgIGMuX2lzVVRDID0gdHJ1ZTsKICAgICAgICBjLl9sID0gbG9jYWxlOwogICAgICAgIGMuX2kgPSBpbnB1dDsKICAgICAgICBjLl9mID0gZm9ybWF0OwogICAgICAgIGMuX3N0cmljdCA9IHN0cmljdDsKICAgICAgICBjLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTsKCiAgICAgICAgcmV0dXJuIG1ha2VNb21lbnQoYykudXRjKCk7CiAgICB9OwoKICAgIC8vIGNyZWF0aW5nIHdpdGggdW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpCiAgICBtb21lbnQudW5peCA9IGZ1bmN0aW9uIChpbnB1dCkgewogICAgICAgIHJldHVybiBtb21lbnQoaW5wdXQgKiAxMDAwKTsKICAgIH07CgogICAgLy8gZHVyYXRpb24KICAgIG1vbWVudC5kdXJhdGlvbiA9IGZ1bmN0aW9uIChpbnB1dCwga2V5KSB7CiAgICAgICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsCiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kCiAgICAgICAgICAgIG1hdGNoID0gbnVsbCwKICAgICAgICAgICAgc2lnbiwKICAgICAgICAgICAgcmV0LAogICAgICAgICAgICBwYXJzZUlzbywKICAgICAgICAgICAgZGlmZlJlczsKCiAgICAgICAgaWYgKG1vbWVudC5pc0R1cmF0aW9uKGlucHV0KSkgewogICAgICAgICAgICBkdXJhdGlvbiA9IHsKICAgICAgICAgICAgICAgIG1zOiBpbnB1dC5fbWlsbGlzZWNvbmRzLAogICAgICAgICAgICAgICAgZDogaW5wdXQuX2RheXMsCiAgICAgICAgICAgICAgICBNOiBpbnB1dC5fbW9udGhzCiAgICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgIGR1cmF0aW9uID0ge307CiAgICAgICAgICAgIGlmIChrZXkpIHsKICAgICAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9IGlucHV0OwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGFzcE5ldFRpbWVTcGFuSnNvblJlZ2V4LmV4ZWMoaW5wdXQpKSkgewogICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxOwogICAgICAgICAgICBkdXJhdGlvbiA9IHsKICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICBkOiB0b0ludChtYXRjaFtEQVRFXSkgKiBzaWduLAogICAgICAgICAgICAgICAgaDogdG9JbnQobWF0Y2hbSE9VUl0pICogc2lnbiwKICAgICAgICAgICAgICAgIG06IHRvSW50KG1hdGNoW01JTlVURV0pICogc2lnbiwKICAgICAgICAgICAgICAgIHM6IHRvSW50KG1hdGNoW1NFQ09ORF0pICogc2lnbiwKICAgICAgICAgICAgICAgIG1zOiB0b0ludChtYXRjaFtNSUxMSVNFQ09ORF0pICogc2lnbgogICAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBpc29EdXJhdGlvblJlZ2V4LmV4ZWMoaW5wdXQpKSkgewogICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxOwogICAgICAgICAgICBwYXJzZUlzbyA9IGZ1bmN0aW9uIChpbnApIHsKICAgICAgICAgICAgICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvCiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy4KICAgICAgICAgICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC4KICAgICAgICAgICAgICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpOwogICAgICAgICAgICAgICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdAogICAgICAgICAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduOwogICAgICAgICAgICB9OwogICAgICAgICAgICBkdXJhdGlvbiA9IHsKICAgICAgICAgICAgICAgIHk6IHBhcnNlSXNvKG1hdGNoWzJdKSwKICAgICAgICAgICAgICAgIE06IHBhcnNlSXNvKG1hdGNoWzNdKSwKICAgICAgICAgICAgICAgIGQ6IHBhcnNlSXNvKG1hdGNoWzRdKSwKICAgICAgICAgICAgICAgIGg6IHBhcnNlSXNvKG1hdGNoWzVdKSwKICAgICAgICAgICAgICAgIG06IHBhcnNlSXNvKG1hdGNoWzZdKSwKICAgICAgICAgICAgICAgIHM6IHBhcnNlSXNvKG1hdGNoWzddKSwKICAgICAgICAgICAgICAgIHc6IHBhcnNlSXNvKG1hdGNoWzhdKQogICAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJgogICAgICAgICAgICAgICAgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKSkgewogICAgICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UobW9tZW50KGR1cmF0aW9uLmZyb20pLCBtb21lbnQoZHVyYXRpb24udG8pKTsKCiAgICAgICAgICAgIGR1cmF0aW9uID0ge307CiAgICAgICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7CiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRoczsKICAgICAgICB9CgogICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7CgogICAgICAgIGlmIChtb21lbnQuaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkgewogICAgICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmV0OwogICAgfTsKCiAgICAvLyB2ZXJzaW9uIG51bWJlcgogICAgbW9tZW50LnZlcnNpb24gPSBWRVJTSU9OOwoKICAgIC8vIGRlZmF1bHQgZm9ybWF0CiAgICBtb21lbnQuZGVmYXVsdEZvcm1hdCA9IGlzb0Zvcm1hdDsKCiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkCiAgICBtb21lbnQuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTsKCiAgICAvLyBQbHVnaW5zIHRoYXQgYWRkIHByb3BlcnRpZXMgc2hvdWxkIGFsc28gYWRkIHRoZSBrZXkgaGVyZSAobnVsbCB2YWx1ZSksCiAgICAvLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLgogICAgbW9tZW50Lm1vbWVudFByb3BlcnRpZXMgPSBtb21lbnRQcm9wZXJ0aWVzOwoKICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC4KICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLgogICAgbW9tZW50LnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9OwoKICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgYSB0aHJlc2hvbGQgZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5ncwogICAgbW9tZW50LnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGZ1bmN0aW9uICh0aHJlc2hvbGQsIGxpbWl0KSB7CiAgICAgICAgaWYgKHJlbGF0aXZlVGltZVRocmVzaG9sZHNbdGhyZXNob2xkXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHJlbGF0aXZlVGltZVRocmVzaG9sZHNbdGhyZXNob2xkXTsKICAgICAgICB9CiAgICAgICAgcmVsYXRpdmVUaW1lVGhyZXNob2xkc1t0aHJlc2hvbGRdID0gbGltaXQ7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9OwoKICAgIG1vbWVudC5sYW5nID0gZGVwcmVjYXRlKAogICAgICAgICdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsCiAgICAgICAgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgcmV0dXJuIG1vbWVudC5sb2NhbGUoa2V5LCB2YWx1ZSk7CiAgICAgICAgfQogICAgKTsKCiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWYKICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsCiAgICAvLyBsb2NhbGUga2V5LgogICAgbW9tZW50LmxvY2FsZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlcykgewogICAgICAgIHZhciBkYXRhOwogICAgICAgIGlmIChrZXkpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZih2YWx1ZXMpICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgZGF0YSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgZGF0YSA9IG1vbWVudC5sb2NhbGVEYXRhKGtleSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChkYXRhKSB7CiAgICAgICAgICAgICAgICBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG1vbWVudC5fbG9jYWxlLl9hYmJyOwogICAgfTsKCiAgICBtb21lbnQuZGVmaW5lTG9jYWxlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlcykgewogICAgICAgIGlmICh2YWx1ZXMgIT09IG51bGwpIHsKICAgICAgICAgICAgdmFsdWVzLmFiYnIgPSBuYW1lOwogICAgICAgICAgICBpZiAoIWxvY2FsZXNbbmFtZV0pIHsKICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbG9jYWxlc1tuYW1lXS5zZXQodmFsdWVzKTsKCiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZQogICAgICAgICAgICBtb21lbnQubG9jYWxlKG5hbWUpOwoKICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nCiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdOwogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICB9OwoKICAgIG1vbWVudC5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgKICAgICAgICAnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsCiAgICAgICAgZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgICByZXR1cm4gbW9tZW50LmxvY2FsZURhdGEoa2V5KTsKICAgICAgICB9CiAgICApOwoKICAgIC8vIHJldHVybnMgbG9jYWxlIGRhdGEKICAgIG1vbWVudC5sb2NhbGVEYXRhID0gZnVuY3Rpb24gKGtleSkgewogICAgICAgIHZhciBsb2NhbGU7CgogICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHsKICAgICAgICAgICAga2V5ID0ga2V5Ll9sb2NhbGUuX2FiYnI7CiAgICAgICAgfQoKICAgICAgICBpZiAoIWtleSkgewogICAgICAgICAgICByZXR1cm4gbW9tZW50Ll9sb2NhbGU7CiAgICAgICAgfQoKICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkgewogICAgICAgICAgICAvL3Nob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBlbHNlCiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTsKICAgICAgICAgICAgaWYgKGxvY2FsZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBrZXkgPSBba2V5XTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTsKICAgIH07CgogICAgLy8gY29tcGFyZSBtb21lbnQgb2JqZWN0CiAgICBtb21lbnQuaXNNb21lbnQgPSBmdW5jdGlvbiAob2JqKSB7CiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fAogICAgICAgICAgICAob2JqICE9IG51bGwgJiYgaGFzT3duUHJvcChvYmosICdfaXNBTW9tZW50T2JqZWN0JykpOwogICAgfTsKCiAgICAvLyBmb3IgdHlwZWNoZWNraW5nIER1cmF0aW9uIG9iamVjdHMKICAgIG1vbWVudC5pc0R1cmF0aW9uID0gZnVuY3Rpb24gKG9iaikgewogICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjsKICAgIH07CgogICAgZm9yIChpID0gbGlzdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICBtYWtlTGlzdChsaXN0c1tpXSk7CiAgICB9CgogICAgbW9tZW50Lm5vcm1hbGl6ZVVuaXRzID0gZnVuY3Rpb24gKHVuaXRzKSB7CiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTsKICAgIH07CgogICAgbW9tZW50LmludmFsaWQgPSBmdW5jdGlvbiAoZmxhZ3MpIHsKICAgICAgICB2YXIgbSA9IG1vbWVudC51dGMoTmFOKTsKICAgICAgICBpZiAoZmxhZ3MgIT0gbnVsbCkgewogICAgICAgICAgICBleHRlbmQobS5fcGYsIGZsYWdzKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIG0uX3BmLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbTsKICAgIH07CgogICAgbW9tZW50LnBhcnNlWm9uZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gbW9tZW50LmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7CiAgICB9OwoKICAgIG1vbWVudC5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkgewogICAgICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7CiAgICB9OwoKICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAgICAgICBNb21lbnQgUHJvdG90eXBlCiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgoKICAgIGV4dGVuZChtb21lbnQuZm4gPSBNb21lbnQucHJvdG90eXBlLCB7CgogICAgICAgIGNsb25lIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gbW9tZW50KHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIHZhbHVlT2YgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiArdGhpcy5fZCArICgodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDApOwogICAgICAgIH0sCgogICAgICAgIHVuaXggOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCt0aGlzIC8gMTAwMCk7CiAgICAgICAgfSwKCiAgICAgICAgdG9TdHJpbmcgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTsKICAgICAgICB9LAoKICAgICAgICB0b0RhdGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vZmZzZXQgPyBuZXcgRGF0ZSgrdGhpcykgOiB0aGlzLl9kOwogICAgICAgIH0sCgogICAgICAgIHRvSVNPU3RyaW5nIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbSA9IG1vbWVudCh0aGlzKS51dGMoKTsKICAgICAgICAgICAgaWYgKDAgPCBtLnllYXIoKSAmJiBtLnllYXIoKSA8PSA5OTk5KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHRvQXJyYXkgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBtID0gdGhpczsKICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgIG0ueWVhcigpLAogICAgICAgICAgICAgICAgbS5tb250aCgpLAogICAgICAgICAgICAgICAgbS5kYXRlKCksCiAgICAgICAgICAgICAgICBtLmhvdXJzKCksCiAgICAgICAgICAgICAgICBtLm1pbnV0ZXMoKSwKICAgICAgICAgICAgICAgIG0uc2Vjb25kcygpLAogICAgICAgICAgICAgICAgbS5taWxsaXNlY29uZHMoKQogICAgICAgICAgICBdOwogICAgICAgIH0sCgogICAgICAgIGlzVmFsaWQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkKHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIGlzRFNUU2hpZnRlZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHRoaXMuX2EpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSAmJiBjb21wYXJlQXJyYXlzKHRoaXMuX2EsICh0aGlzLl9pc1VUQyA/IG1vbWVudC51dGModGhpcy5fYSkgOiBtb21lbnQodGhpcy5fYSkpLnRvQXJyYXkoKSkgPiAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSwKCiAgICAgICAgcGFyc2luZ0ZsYWdzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCB0aGlzLl9wZik7CiAgICAgICAgfSwKCiAgICAgICAgaW52YWxpZEF0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wZi5vdmVyZmxvdzsKICAgICAgICB9LAoKICAgICAgICB1dGMgOiBmdW5jdGlvbiAoa2VlcExvY2FsVGltZSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy56b25lKDAsIGtlZXBMb2NhbFRpbWUpOwogICAgICAgIH0sCgogICAgICAgIGxvY2FsIDogZnVuY3Rpb24gKGtlZXBMb2NhbFRpbWUpIHsKICAgICAgICAgICAgaWYgKHRoaXMuX2lzVVRDKSB7CiAgICAgICAgICAgICAgICB0aGlzLnpvbmUoMCwga2VlcExvY2FsVGltZSk7CiAgICAgICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlOwoKICAgICAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGQodGhpcy5fZGF0ZVR6T2Zmc2V0KCksICdtJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgZm9ybWF0IDogZnVuY3Rpb24gKGlucHV0U3RyaW5nKSB7CiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcgfHwgbW9tZW50LmRlZmF1bHRGb3JtYXQpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpOwogICAgICAgIH0sCgogICAgICAgIGFkZCA6IGNyZWF0ZUFkZGVyKDEsICdhZGQnKSwKCiAgICAgICAgc3VidHJhY3QgOiBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0JyksCgogICAgICAgIGRpZmYgOiBmdW5jdGlvbiAoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7CiAgICAgICAgICAgIHZhciB0aGF0ID0gbWFrZUFzKGlucHV0LCB0aGlzKSwKICAgICAgICAgICAgICAgIHpvbmVEaWZmID0gKHRoaXMuem9uZSgpIC0gdGhhdC56b25lKCkpICogNmU0LAogICAgICAgICAgICAgICAgZGlmZiwgb3V0cHV0LCBkYXlzQWRqdXN0OwoKICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7CgogICAgICAgICAgICBpZiAodW5pdHMgPT09ICd5ZWFyJyB8fCB1bml0cyA9PT0gJ21vbnRoJykgewogICAgICAgICAgICAgICAgLy8gYXZlcmFnZSBudW1iZXIgb2YgZGF5cyBpbiB0aGUgbW9udGhzIGluIHRoZSBnaXZlbiBkYXRlcwogICAgICAgICAgICAgICAgZGlmZiA9ICh0aGlzLmRheXNJbk1vbnRoKCkgKyB0aGF0LmRheXNJbk1vbnRoKCkpICogNDMyZTU7IC8vIDI0ICogNjAgKiA2MCAqIDEwMDAgLyAyCiAgICAgICAgICAgICAgICAvLyBkaWZmZXJlbmNlIGluIG1vbnRocwogICAgICAgICAgICAgICAgb3V0cHV0ID0gKCh0aGlzLnllYXIoKSAtIHRoYXQueWVhcigpKSAqIDEyKSArICh0aGlzLm1vbnRoKCkgLSB0aGF0Lm1vbnRoKCkpOwogICAgICAgICAgICAgICAgLy8gYWRqdXN0IGJ5IHRha2luZyBkaWZmZXJlbmNlIGluIGRheXMsIGF2ZXJhZ2UgbnVtYmVyIG9mIGRheXMKICAgICAgICAgICAgICAgIC8vIGFuZCBkc3QgaW4gdGhlIGdpdmVuIG1vbnRocy4KICAgICAgICAgICAgICAgIGRheXNBZGp1c3QgPSAodGhpcyAtIG1vbWVudCh0aGlzKS5zdGFydE9mKCdtb250aCcpKSAtCiAgICAgICAgICAgICAgICAgICAgKHRoYXQgLSBtb21lbnQodGhhdCkuc3RhcnRPZignbW9udGgnKSk7CiAgICAgICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aXRoIHpvbmVzLCB0byBuZWdhdGUgYWxsIGRzdAogICAgICAgICAgICAgICAgZGF5c0FkanVzdCAtPSAoKHRoaXMuem9uZSgpIC0gbW9tZW50KHRoaXMpLnN0YXJ0T2YoJ21vbnRoJykuem9uZSgpKSAtCiAgICAgICAgICAgICAgICAgICAgICAgICh0aGF0LnpvbmUoKSAtIG1vbWVudCh0aGF0KS5zdGFydE9mKCdtb250aCcpLnpvbmUoKSkpICogNmU0OwogICAgICAgICAgICAgICAgb3V0cHV0ICs9IGRheXNBZGp1c3QgLyBkaWZmOwogICAgICAgICAgICAgICAgaWYgKHVuaXRzID09PSAneWVhcicpIHsKICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgLyAxMjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRpZmYgPSAodGhpcyAtIHRoYXQpOwogICAgICAgICAgICAgICAgb3V0cHV0ID0gdW5pdHMgPT09ICdzZWNvbmQnID8gZGlmZiAvIDFlMyA6IC8vIDEwMDAKICAgICAgICAgICAgICAgICAgICB1bml0cyA9PT0gJ21pbnV0ZScgPyBkaWZmIC8gNmU0IDogLy8gMTAwMCAqIDYwCiAgICAgICAgICAgICAgICAgICAgdW5pdHMgPT09ICdob3VyJyA/IGRpZmYgLyAzNmU1IDogLy8gMTAwMCAqIDYwICogNjAKICAgICAgICAgICAgICAgICAgICB1bml0cyA9PT0gJ2RheScgPyAoZGlmZiAtIHpvbmVEaWZmKSAvIDg2NGU1IDogLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdAogICAgICAgICAgICAgICAgICAgIHVuaXRzID09PSAnd2VlaycgPyAoZGlmZiAtIHpvbmVEaWZmKSAvIDYwNDhlNSA6IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0CiAgICAgICAgICAgICAgICAgICAgZGlmZjsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic1JvdW5kKG91dHB1dCk7CiAgICAgICAgfSwKCiAgICAgICAgZnJvbSA6IGZ1bmN0aW9uICh0aW1lLCB3aXRob3V0U3VmZml4KSB7CiAgICAgICAgICAgIHJldHVybiBtb21lbnQuZHVyYXRpb24oe3RvOiB0aGlzLCBmcm9tOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTsKICAgICAgICB9LAoKICAgICAgICBmcm9tTm93IDogZnVuY3Rpb24gKHdpdGhvdXRTdWZmaXgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShtb21lbnQoKSwgd2l0aG91dFN1ZmZpeCk7CiAgICAgICAgfSwKCiAgICAgICAgY2FsZW5kYXIgOiBmdW5jdGlvbiAodGltZSkgewogICAgICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLgogICAgICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSB6b25lJ2Qgb3Igbm90LgogICAgICAgICAgICB2YXIgbm93ID0gdGltZSB8fCBtb21lbnQoKSwKICAgICAgICAgICAgICAgIHNvZCA9IG1ha2VBcyhub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLAogICAgICAgICAgICAgICAgZGlmZiA9IHRoaXMuZGlmZihzb2QsICdkYXlzJywgdHJ1ZSksCiAgICAgICAgICAgICAgICBmb3JtYXQgPSBkaWZmIDwgLTYgPyAnc2FtZUVsc2UnIDoKICAgICAgICAgICAgICAgICAgICBkaWZmIDwgLTEgPyAnbGFzdFdlZWsnIDoKICAgICAgICAgICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6CiAgICAgICAgICAgICAgICAgICAgZGlmZiA8IDEgPyAnc2FtZURheScgOgogICAgICAgICAgICAgICAgICAgIGRpZmYgPCAyID8gJ25leHREYXknIDoKICAgICAgICAgICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnOwogICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQodGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzKSk7CiAgICAgICAgfSwKCiAgICAgICAgaXNMZWFwWWVhciA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpOwogICAgICAgIH0sCgogICAgICAgIGlzRFNUIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gKHRoaXMuem9uZSgpIDwgdGhpcy5jbG9uZSgpLm1vbnRoKDApLnpvbmUoKSB8fAogICAgICAgICAgICAgICAgdGhpcy56b25lKCkgPCB0aGlzLmNsb25lKCkubW9udGgoNSkuem9uZSgpKTsKICAgICAgICB9LAoKICAgICAgICBkYXkgOiBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICAgICAgdmFyIGRheSA9IHRoaXMuX2lzVVRDID8gdGhpcy5fZC5nZXRVVENEYXkoKSA6IHRoaXMuX2QuZ2V0RGF5KCk7CiAgICAgICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGRheTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIG1vbnRoIDogbWFrZUFjY2Vzc29yKCdNb250aCcsIHRydWUpLAoKICAgICAgICBzdGFydE9mIDogZnVuY3Rpb24gKHVuaXRzKSB7CiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpOwogICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIHN3aXRjaCBpbnRlbnRpb25hbGx5IG9taXRzIGJyZWFrIGtleXdvcmRzCiAgICAgICAgICAgIC8vIHRvIHV0aWxpemUgZmFsbGluZyB0aHJvdWdoIHRoZSBjYXNlcy4KICAgICAgICAgICAgc3dpdGNoICh1bml0cykgewogICAgICAgICAgICBjYXNlICd5ZWFyJzoKICAgICAgICAgICAgICAgIHRoaXMubW9udGgoMCk7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOgogICAgICAgICAgICBjYXNlICdtb250aCc6CiAgICAgICAgICAgICAgICB0aGlzLmRhdGUoMSk7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOgogICAgICAgICAgICBjYXNlICdpc29XZWVrJzoKICAgICAgICAgICAgY2FzZSAnZGF5JzoKICAgICAgICAgICAgICAgIHRoaXMuaG91cnMoMCk7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgIGNhc2UgJ2hvdXInOgogICAgICAgICAgICAgICAgdGhpcy5taW51dGVzKDApOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICBjYXNlICdtaW51dGUnOgogICAgICAgICAgICAgICAgdGhpcy5zZWNvbmRzKDApOwogICAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLwogICAgICAgICAgICBjYXNlICdzZWNvbmQnOgogICAgICAgICAgICAgICAgdGhpcy5taWxsaXNlY29uZHMoMCk7CiAgICAgICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHdlZWtzIGFyZSBhIHNwZWNpYWwgY2FzZQogICAgICAgICAgICBpZiAodW5pdHMgPT09ICd3ZWVrJykgewogICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5KDApOwogICAgICAgICAgICB9IGVsc2UgaWYgKHVuaXRzID09PSAnaXNvV2VlaycpIHsKICAgICAgICAgICAgICAgIHRoaXMuaXNvV2Vla2RheSgxKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gcXVhcnRlcnMgYXJlIGFsc28gc3BlY2lhbAogICAgICAgICAgICBpZiAodW5pdHMgPT09ICdxdWFydGVyJykgewogICAgICAgICAgICAgICAgdGhpcy5tb250aChNYXRoLmZsb29yKHRoaXMubW9udGgoKSAvIDMpICogMyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGVuZE9mOiBmdW5jdGlvbiAodW5pdHMpIHsKICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0T2YodW5pdHMpLmFkZCgxLCAodW5pdHMgPT09ICdpc29XZWVrJyA/ICd3ZWVrJyA6IHVuaXRzKSkuc3VidHJhY3QoMSwgJ21zJyk7CiAgICAgICAgfSwKCiAgICAgICAgaXNBZnRlcjogZnVuY3Rpb24gKGlucHV0LCB1bml0cykgewogICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHR5cGVvZiB1bml0cyAhPT0gJ3VuZGVmaW5lZCcgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpOwogICAgICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHsKICAgICAgICAgICAgICAgIGlucHV0ID0gbW9tZW50LmlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogbW9tZW50KGlucHV0KTsKICAgICAgICAgICAgICAgIHJldHVybiArdGhpcyA+ICtpbnB1dDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiArdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpID4gK21vbWVudChpbnB1dCkuc3RhcnRPZih1bml0cyk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBpc0JlZm9yZTogZnVuY3Rpb24gKGlucHV0LCB1bml0cykgewogICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHR5cGVvZiB1bml0cyAhPT0gJ3VuZGVmaW5lZCcgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpOwogICAgICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHsKICAgICAgICAgICAgICAgIGlucHV0ID0gbW9tZW50LmlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogbW9tZW50KGlucHV0KTsKICAgICAgICAgICAgICAgIHJldHVybiArdGhpcyA8ICtpbnB1dDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiArdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpIDwgK21vbWVudChpbnB1dCkuc3RhcnRPZih1bml0cyk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBpc1NhbWU6IGZ1bmN0aW9uIChpbnB1dCwgdW5pdHMpIHsKICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyB8fCAnbWlsbGlzZWNvbmQnKTsKICAgICAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7CiAgICAgICAgICAgICAgICBpbnB1dCA9IG1vbWVudC5pc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IG1vbWVudChpbnB1dCk7CiAgICAgICAgICAgICAgICByZXR1cm4gK3RoaXMgPT09ICtpbnB1dDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiArdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpID09PSArbWFrZUFzKGlucHV0LCB0aGlzKS5zdGFydE9mKHVuaXRzKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIG1pbjogZGVwcmVjYXRlKAogICAgICAgICAgICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE1NDgnLAogICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChvdGhlcikgewogICAgICAgICAgICAgICAgICAgICBvdGhlciA9IG1vbWVudC5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgKSwKCiAgICAgICAgbWF4OiBkZXByZWNhdGUoCiAgICAgICAgICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNTQ4JywKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChvdGhlcikgewogICAgICAgICAgICAgICAgICAgIG90aGVyID0gbW9tZW50LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICApLAoKICAgICAgICAvLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXQKICAgICAgICAvLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bem9uZSgyLCB0cnVlKV0tLT4KICAgICAgICAvLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IGludCB6b25lCiAgICAgICAgLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLgogICAgICAgIC8vCiAgICAgICAgLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpCiAgICAgICAgLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0CiAgICAgICAgLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpbgogICAgICAgIC8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZQogICAgICAgIC8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuCiAgICAgICAgem9uZSA6IGZ1bmN0aW9uIChpbnB1dCwga2VlcExvY2FsVGltZSkgewogICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsCiAgICAgICAgICAgICAgICBsb2NhbEFkanVzdDsKICAgICAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSB0aW1lem9uZU1pbnV0ZXNGcm9tU3RyaW5nKGlucHV0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhpbnB1dCkgPCAxNikgewogICAgICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkgewogICAgICAgICAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gdGhpcy5fZGF0ZVR6T2Zmc2V0KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDsKICAgICAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChsb2NhbEFkanVzdCwgJ20nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkT3JTdWJ0cmFjdER1cmF0aW9uRnJvbU1vbWVudCh0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbWVudC5kdXJhdGlvbihvZmZzZXQgLSBpbnB1dCwgJ20nKSwgMSwgZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vbWVudC51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IHRoaXMuX2RhdGVUek9mZnNldCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHpvbmVBYmJyIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnOwogICAgICAgIH0sCgogICAgICAgIHpvbmVOYW1lIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7CiAgICAgICAgfSwKCiAgICAgICAgcGFyc2Vab25lIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAodGhpcy5fdHptKSB7CiAgICAgICAgICAgICAgICB0aGlzLnpvbmUodGhpcy5fdHptKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIHRoaXMuem9uZSh0aGlzLl9pKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBoYXNBbGlnbmVkSG91ck9mZnNldCA6IGZ1bmN0aW9uIChpbnB1dCkgewogICAgICAgICAgICBpZiAoIWlucHV0KSB7CiAgICAgICAgICAgICAgICBpbnB1dCA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBpbnB1dCA9IG1vbWVudChpbnB1dCkuem9uZSgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gKHRoaXMuem9uZSgpIC0gaW5wdXQpICUgNjAgPT09IDA7CiAgICAgICAgfSwKCiAgICAgICAgZGF5c0luTW9udGggOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTsKICAgICAgICB9LAoKICAgICAgICBkYXlPZlllYXIgOiBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICAgICAgdmFyIGRheU9mWWVhciA9IHJvdW5kKChtb21lbnQodGhpcykuc3RhcnRPZignZGF5JykgLSBtb21lbnQodGhpcykuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7CiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoKGlucHV0IC0gZGF5T2ZZZWFyKSwgJ2QnKTsKICAgICAgICB9LAoKICAgICAgICBxdWFydGVyIDogZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyB0aGlzLm1vbnRoKCkgJSAzKTsKICAgICAgICB9LAoKICAgICAgICB3ZWVrWWVhciA6IGZ1bmN0aW9uIChpbnB1dCkgewogICAgICAgICAgICB2YXIgeWVhciA9IHdlZWtPZlllYXIodGhpcywgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LCB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3kpLnllYXI7CiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8geWVhciA6IHRoaXMuYWRkKChpbnB1dCAtIHllYXIpLCAneScpOwogICAgICAgIH0sCgogICAgICAgIGlzb1dlZWtZZWFyIDogZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgICAgIHZhciB5ZWFyID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS55ZWFyOwogICAgICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSB5ZWFyKSwgJ3knKTsKICAgICAgICB9LAoKICAgICAgICB3ZWVrIDogZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpOwogICAgICAgIH0sCgogICAgICAgIGlzb1dlZWsgOiBmdW5jdGlvbiAoaW5wdXQpIHsKICAgICAgICAgICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7CiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTsKICAgICAgICB9LAoKICAgICAgICB3ZWVrZGF5IDogZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7CiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTsKICAgICAgICB9LAoKICAgICAgICBpc29XZWVrZGF5IDogZnVuY3Rpb24gKGlucHV0KSB7CiAgICAgICAgICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHQKICAgICAgICAgICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNikKICAgICAgICAgICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLgogICAgICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHRoaXMuZGF5KCkgfHwgNyA6IHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gaW5wdXQgOiBpbnB1dCAtIDcpOwogICAgICAgIH0sCgogICAgICAgIGlzb1dlZWtzSW5ZZWFyIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpOwogICAgICAgIH0sCgogICAgICAgIHdlZWtzSW5ZZWFyIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlazsKICAgICAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0IDogZnVuY3Rpb24gKHVuaXRzKSB7CiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpOwogICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTsKICAgICAgICB9LAoKICAgICAgICBzZXQgOiBmdW5jdGlvbiAodW5pdHMsIHZhbHVlKSB7CiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpOwogICAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbdW5pdHNdID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICB0aGlzW3VuaXRzXSh2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpcwogICAgICAgIC8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb24KICAgICAgICAvLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuCiAgICAgICAgbG9jYWxlIDogZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgICB2YXIgbmV3TG9jYWxlRGF0YTsKCiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG5ld0xvY2FsZURhdGEgPSBtb21lbnQubG9jYWxlRGF0YShrZXkpOwogICAgICAgICAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGxhbmcgOiBkZXByZWNhdGUoCiAgICAgICAgICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSBpbnN0ZWFkLicsCiAgICAgICAgICAgIGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICApLAoKICAgICAgICBsb2NhbGVEYXRhIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlOwogICAgICAgIH0sCgogICAgICAgIF9kYXRlVHpPZmZzZXQgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuCiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L3B1bGwvMTg3MQogICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkgLyAxNSkgKiAxNTsKICAgICAgICB9CiAgICB9KTsKCiAgICBmdW5jdGlvbiByYXdNb250aFNldHRlcihtb20sIHZhbHVlKSB7CiAgICAgICAgdmFyIGRheU9mTW9udGg7CgogICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyBvdXQgb2YgaGVyZSEKICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgewogICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpOwogICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlPwogICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykgewogICAgICAgICAgICAgICAgcmV0dXJuIG1vbTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksCiAgICAgICAgICAgICAgICBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpOwogICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyAnTW9udGgnXSh2YWx1ZSwgZGF5T2ZNb250aCk7CiAgICAgICAgcmV0dXJuIG1vbTsKICAgIH0KCiAgICBmdW5jdGlvbiByYXdHZXR0ZXIobW9tLCB1bml0KSB7CiAgICAgICAgcmV0dXJuIG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJhd1NldHRlcihtb20sIHVuaXQsIHZhbHVlKSB7CiAgICAgICAgaWYgKHVuaXQgPT09ICdNb250aCcpIHsKICAgICAgICAgICAgcmV0dXJuIHJhd01vbnRoU2V0dGVyKG1vbSwgdmFsdWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBtYWtlQWNjZXNzb3IodW5pdCwga2VlcFRpbWUpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByYXdTZXR0ZXIodGhpcywgdW5pdCwgdmFsdWUpOwogICAgICAgICAgICAgICAgbW9tZW50LnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiByYXdHZXR0ZXIodGhpcywgdW5pdCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKICAgIG1vbWVudC5mbi5taWxsaXNlY29uZCA9IG1vbWVudC5mbi5taWxsaXNlY29uZHMgPSBtYWtlQWNjZXNzb3IoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTsKICAgIG1vbWVudC5mbi5zZWNvbmQgPSBtb21lbnQuZm4uc2Vjb25kcyA9IG1ha2VBY2Nlc3NvcignU2Vjb25kcycsIGZhbHNlKTsKICAgIG1vbWVudC5mbi5taW51dGUgPSBtb21lbnQuZm4ubWludXRlcyA9IG1ha2VBY2Nlc3NvcignTWludXRlcycsIGZhbHNlKTsKICAgIC8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseQogICAgLy8gc3BlY2lmaWVkIHdoaWNoIGhvdXIgaGUgd2FudHMuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpbgogICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93CiAgICAvLyB0aGlzIHJ1bGUuCiAgICBtb21lbnQuZm4uaG91ciA9IG1vbWVudC5mbi5ob3VycyA9IG1ha2VBY2Nlc3NvcignSG91cnMnLCB0cnVlKTsKICAgIC8vIG1vbWVudC5mbi5tb250aCBpcyBkZWZpbmVkIHNlcGFyYXRlbHkKICAgIG1vbWVudC5mbi5kYXRlID0gbWFrZUFjY2Vzc29yKCdEYXRlJywgdHJ1ZSk7CiAgICBtb21lbnQuZm4uZGF0ZXMgPSBkZXByZWNhdGUoJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJywgbWFrZUFjY2Vzc29yKCdEYXRlJywgdHJ1ZSkpOwogICAgbW9tZW50LmZuLnllYXIgPSBtYWtlQWNjZXNzb3IoJ0Z1bGxZZWFyJywgdHJ1ZSk7CiAgICBtb21lbnQuZm4ueWVhcnMgPSBkZXByZWNhdGUoJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQuJywgbWFrZUFjY2Vzc29yKCdGdWxsWWVhcicsIHRydWUpKTsKCiAgICAvLyBhZGQgcGx1cmFsIG1ldGhvZHMKICAgIG1vbWVudC5mbi5kYXlzID0gbW9tZW50LmZuLmRheTsKICAgIG1vbWVudC5mbi5tb250aHMgPSBtb21lbnQuZm4ubW9udGg7CiAgICBtb21lbnQuZm4ud2Vla3MgPSBtb21lbnQuZm4ud2VlazsKICAgIG1vbWVudC5mbi5pc29XZWVrcyA9IG1vbWVudC5mbi5pc29XZWVrOwogICAgbW9tZW50LmZuLnF1YXJ0ZXJzID0gbW9tZW50LmZuLnF1YXJ0ZXI7CgogICAgLy8gYWRkIGFsaWFzZWQgZm9ybWF0IG1ldGhvZHMKICAgIG1vbWVudC5mbi50b0pTT04gPSBtb21lbnQuZm4udG9JU09TdHJpbmc7CgogICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogICAgICAgIER1cmF0aW9uIFByb3RvdHlwZQogICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKCiAgICBmdW5jdGlvbiBkYXlzVG9ZZWFycyAoZGF5cykgewogICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcykKICAgICAgICByZXR1cm4gZGF5cyAqIDQwMCAvIDE0NjA5NzsKICAgIH0KCiAgICBmdW5jdGlvbiB5ZWFyc1RvRGF5cyAoeWVhcnMpIHsKICAgICAgICAvLyB5ZWFycyAqIDM2NSArIGFic1JvdW5kKHllYXJzIC8gNCkgLQogICAgICAgIC8vICAgICBhYnNSb3VuZCh5ZWFycyAvIDEwMCkgKyBhYnNSb3VuZCh5ZWFycyAvIDQwMCk7CiAgICAgICAgcmV0dXJuIHllYXJzICogMTQ2MDk3IC8gNDAwOwogICAgfQoKICAgIGV4dGVuZChtb21lbnQuZHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGUsIHsKCiAgICAgICAgX2J1YmJsZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcywKICAgICAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzLAogICAgICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzLAogICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuX2RhdGEsCiAgICAgICAgICAgICAgICBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMgPSAwOwoKICAgICAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGJ1YmJsZXMgdXAgdmFsdWVzLCBzZWUgdGhlIHRlc3RzIGZvcgogICAgICAgICAgICAvLyBleGFtcGxlcyBvZiB3aGF0IHRoYXQgbWVhbnMuCiAgICAgICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDsKCiAgICAgICAgICAgIHNlY29uZHMgPSBhYnNSb3VuZChtaWxsaXNlY29uZHMgLyAxMDAwKTsKICAgICAgICAgICAgZGF0YS5zZWNvbmRzID0gc2Vjb25kcyAlIDYwOwoKICAgICAgICAgICAgbWludXRlcyA9IGFic1JvdW5kKHNlY29uZHMgLyA2MCk7CiAgICAgICAgICAgIGRhdGEubWludXRlcyA9IG1pbnV0ZXMgJSA2MDsKCiAgICAgICAgICAgIGhvdXJzID0gYWJzUm91bmQobWludXRlcyAvIDYwKTsKICAgICAgICAgICAgZGF0YS5ob3VycyA9IGhvdXJzICUgMjQ7CgogICAgICAgICAgICBkYXlzICs9IGFic1JvdW5kKGhvdXJzIC8gMjQpOwoKICAgICAgICAgICAgLy8gQWNjdXJhdGVseSBjb252ZXJ0IGRheXMgdG8geWVhcnMsIGFzc3VtZSBzdGFydCBmcm9tIHllYXIgMC4KICAgICAgICAgICAgeWVhcnMgPSBhYnNSb3VuZChkYXlzVG9ZZWFycyhkYXlzKSk7CiAgICAgICAgICAgIGRheXMgLT0gYWJzUm91bmQoeWVhcnNUb0RheXMoeWVhcnMpKTsKCiAgICAgICAgICAgIC8vIDMwIGRheXMgdG8gYSBtb250aAogICAgICAgICAgICAvLyBUT0RPIChpc2tyZW4pOiBVc2UgYW5jaG9yIGRhdGUgKGxpa2UgMXN0IEphbikgdG8gY29tcHV0ZSB0aGlzLgogICAgICAgICAgICBtb250aHMgKz0gYWJzUm91bmQoZGF5cyAvIDMwKTsKICAgICAgICAgICAgZGF5cyAlPSAzMDsKCiAgICAgICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXIKICAgICAgICAgICAgeWVhcnMgKz0gYWJzUm91bmQobW9udGhzIC8gMTIpOwogICAgICAgICAgICBtb250aHMgJT0gMTI7CgogICAgICAgICAgICBkYXRhLmRheXMgPSBkYXlzOwogICAgICAgICAgICBkYXRhLm1vbnRocyA9IG1vbnRoczsKICAgICAgICAgICAgZGF0YS55ZWFycyA9IHllYXJzOwogICAgICAgIH0sCgogICAgICAgIGFicyA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gTWF0aC5hYnModGhpcy5fbWlsbGlzZWNvbmRzKTsKICAgICAgICAgICAgdGhpcy5fZGF5cyA9IE1hdGguYWJzKHRoaXMuX2RheXMpOwogICAgICAgICAgICB0aGlzLl9tb250aHMgPSBNYXRoLmFicyh0aGlzLl9tb250aHMpOwoKICAgICAgICAgICAgdGhpcy5fZGF0YS5taWxsaXNlY29uZHMgPSBNYXRoLmFicyh0aGlzLl9kYXRhLm1pbGxpc2Vjb25kcyk7CiAgICAgICAgICAgIHRoaXMuX2RhdGEuc2Vjb25kcyA9IE1hdGguYWJzKHRoaXMuX2RhdGEuc2Vjb25kcyk7CiAgICAgICAgICAgIHRoaXMuX2RhdGEubWludXRlcyA9IE1hdGguYWJzKHRoaXMuX2RhdGEubWludXRlcyk7CiAgICAgICAgICAgIHRoaXMuX2RhdGEuaG91cnMgPSBNYXRoLmFicyh0aGlzLl9kYXRhLmhvdXJzKTsKICAgICAgICAgICAgdGhpcy5fZGF0YS5tb250aHMgPSBNYXRoLmFicyh0aGlzLl9kYXRhLm1vbnRocyk7CiAgICAgICAgICAgIHRoaXMuX2RhdGEueWVhcnMgPSBNYXRoLmFicyh0aGlzLl9kYXRhLnllYXJzKTsKCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHdlZWtzIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gYWJzUm91bmQodGhpcy5kYXlzKCkgLyA3KTsKICAgICAgICB9LAoKICAgICAgICB2YWx1ZU9mIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fbWlsbGlzZWNvbmRzICsKICAgICAgICAgICAgICB0aGlzLl9kYXlzICogODY0ZTUgKwogICAgICAgICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgKwogICAgICAgICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTY7CiAgICAgICAgfSwKCiAgICAgICAgaHVtYW5pemUgOiBmdW5jdGlvbiAod2l0aFN1ZmZpeCkgewogICAgICAgICAgICB2YXIgb3V0cHV0ID0gcmVsYXRpdmVUaW1lKHRoaXMsICF3aXRoU3VmZml4LCB0aGlzLmxvY2FsZURhdGEoKSk7CgogICAgICAgICAgICBpZiAod2l0aFN1ZmZpeCkgewogICAgICAgICAgICAgICAgb3V0cHV0ID0gdGhpcy5sb2NhbGVEYXRhKCkucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KTsKICAgICAgICB9LAoKICAgICAgICBhZGQgOiBmdW5jdGlvbiAoaW5wdXQsIHZhbCkgewogICAgICAgICAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQobW9tZW50KQogICAgICAgICAgICB2YXIgZHVyID0gbW9tZW50LmR1cmF0aW9uKGlucHV0LCB2YWwpOwoKICAgICAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICs9IGR1ci5fbWlsbGlzZWNvbmRzOwogICAgICAgICAgICB0aGlzLl9kYXlzICs9IGR1ci5fZGF5czsKICAgICAgICAgICAgdGhpcy5fbW9udGhzICs9IGR1ci5fbW9udGhzOwoKICAgICAgICAgICAgdGhpcy5fYnViYmxlKCk7CgogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBzdWJ0cmFjdCA6IGZ1bmN0aW9uIChpbnB1dCwgdmFsKSB7CiAgICAgICAgICAgIHZhciBkdXIgPSBtb21lbnQuZHVyYXRpb24oaW5wdXQsIHZhbCk7CgogICAgICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgLT0gZHVyLl9taWxsaXNlY29uZHM7CiAgICAgICAgICAgIHRoaXMuX2RheXMgLT0gZHVyLl9kYXlzOwogICAgICAgICAgICB0aGlzLl9tb250aHMgLT0gZHVyLl9tb250aHM7CgogICAgICAgICAgICB0aGlzLl9idWJibGUoKTsKCiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGdldCA6IGZ1bmN0aW9uICh1bml0cykgewogICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHMudG9Mb3dlckNhc2UoKSArICdzJ10oKTsKICAgICAgICB9LAoKICAgICAgICBhcyA6IGZ1bmN0aW9uICh1bml0cykgewogICAgICAgICAgICB2YXIgZGF5cywgbW9udGhzOwogICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTsKCiAgICAgICAgICAgIGlmICh1bml0cyA9PT0gJ21vbnRoJyB8fCB1bml0cyA9PT0gJ3llYXInKSB7CiAgICAgICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIHRoaXMuX21pbGxpc2Vjb25kcyAvIDg2NGU1OwogICAgICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvWWVhcnMoZGF5cykgKiAxMjsKICAgICAgICAgICAgICAgIHJldHVybiB1bml0cyA9PT0gJ21vbnRoJyA/IG1vbnRocyA6IG1vbnRocyAvIDEyOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KQogICAgICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyB5ZWFyc1RvRGF5cyh0aGlzLl9tb250aHMgLyAxMik7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnd2Vlayc6IHJldHVybiBkYXlzIC8gNyArIHRoaXMuX21pbGxpc2Vjb25kcyAvIDYwNDhlNTsKICAgICAgICAgICAgICAgICAgICBjYXNlICdkYXknOiByZXR1cm4gZGF5cyArIHRoaXMuX21pbGxpc2Vjb25kcyAvIDg2NGU1OwogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hvdXInOiByZXR1cm4gZGF5cyAqIDI0ICsgdGhpcy5fbWlsbGlzZWNvbmRzIC8gMzZlNTsKICAgICAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnOiByZXR1cm4gZGF5cyAqIDI0ICogNjAgKyB0aGlzLl9taWxsaXNlY29uZHMgLyA2ZTQ7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzogcmV0dXJuIGRheXMgKiAyNCAqIDYwICogNjAgKyB0aGlzLl9taWxsaXNlY29uZHMgLyAxMDAwOwogICAgICAgICAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzogcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApICsgdGhpcy5fbWlsbGlzZWNvbmRzOwogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBsYW5nIDogbW9tZW50LmZuLmxhbmcsCiAgICAgICAgbG9jYWxlIDogbW9tZW50LmZuLmxvY2FsZSwKCiAgICAgICAgdG9Jc29TdHJpbmcgOiBkZXByZWNhdGUoCiAgICAgICAgICAgICd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkICcgKwogICAgICAgICAgICAnKG5vdGljZSB0aGUgY2FwaXRhbHMpJywKICAgICAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9JU09TdHJpbmcoKTsKICAgICAgICAgICAgfQogICAgICAgICksCgogICAgICAgIHRvSVNPU3RyaW5nIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qcwogICAgICAgICAgICB2YXIgeWVhcnMgPSBNYXRoLmFicyh0aGlzLnllYXJzKCkpLAogICAgICAgICAgICAgICAgbW9udGhzID0gTWF0aC5hYnModGhpcy5tb250aHMoKSksCiAgICAgICAgICAgICAgICBkYXlzID0gTWF0aC5hYnModGhpcy5kYXlzKCkpLAogICAgICAgICAgICAgICAgaG91cnMgPSBNYXRoLmFicyh0aGlzLmhvdXJzKCkpLAogICAgICAgICAgICAgICAgbWludXRlcyA9IE1hdGguYWJzKHRoaXMubWludXRlcygpKSwKICAgICAgICAgICAgICAgIHNlY29uZHMgPSBNYXRoLmFicyh0aGlzLnNlY29uZHMoKSArIHRoaXMubWlsbGlzZWNvbmRzKCkgLyAxMDAwKTsKCiAgICAgICAgICAgIGlmICghdGhpcy5hc1NlY29uZHMoKSkgewogICAgICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLgogICAgICAgICAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKQogICAgICAgICAgICAgICAgcmV0dXJuICdQMEQnOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gKHRoaXMuYXNTZWNvbmRzKCkgPCAwID8gJy0nIDogJycpICsKICAgICAgICAgICAgICAgICdQJyArCiAgICAgICAgICAgICAgICAoeWVhcnMgPyB5ZWFycyArICdZJyA6ICcnKSArCiAgICAgICAgICAgICAgICAobW9udGhzID8gbW9udGhzICsgJ00nIDogJycpICsKICAgICAgICAgICAgICAgIChkYXlzID8gZGF5cyArICdEJyA6ICcnKSArCiAgICAgICAgICAgICAgICAoKGhvdXJzIHx8IG1pbnV0ZXMgfHwgc2Vjb25kcykgPyAnVCcgOiAnJykgKwogICAgICAgICAgICAgICAgKGhvdXJzID8gaG91cnMgKyAnSCcgOiAnJykgKwogICAgICAgICAgICAgICAgKG1pbnV0ZXMgPyBtaW51dGVzICsgJ00nIDogJycpICsKICAgICAgICAgICAgICAgIChzZWNvbmRzID8gc2Vjb25kcyArICdTJyA6ICcnKTsKICAgICAgICB9LAoKICAgICAgICBsb2NhbGVEYXRhIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlOwogICAgICAgIH0KICAgIH0pOwoKICAgIG1vbWVudC5kdXJhdGlvbi5mbi50b1N0cmluZyA9IG1vbWVudC5kdXJhdGlvbi5mbi50b0lTT1N0cmluZzsKCiAgICBmdW5jdGlvbiBtYWtlRHVyYXRpb25HZXR0ZXIobmFtZSkgewogICAgICAgIG1vbWVudC5kdXJhdGlvbi5mbltuYW1lXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFbbmFtZV07CiAgICAgICAgfTsKICAgIH0KCiAgICBmb3IgKGkgaW4gdW5pdE1pbGxpc2Vjb25kRmFjdG9ycykgewogICAgICAgIGlmIChoYXNPd25Qcm9wKHVuaXRNaWxsaXNlY29uZEZhY3RvcnMsIGkpKSB7CiAgICAgICAgICAgIG1ha2VEdXJhdGlvbkdldHRlcihpLnRvTG93ZXJDYXNlKCkpOwogICAgICAgIH0KICAgIH0KCiAgICBtb21lbnQuZHVyYXRpb24uZm4uYXNNaWxsaXNlY29uZHMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYXMoJ21zJyk7CiAgICB9OwogICAgbW9tZW50LmR1cmF0aW9uLmZuLmFzU2Vjb25kcyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpcy5hcygncycpOwogICAgfTsKICAgIG1vbWVudC5kdXJhdGlvbi5mbi5hc01pbnV0ZXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYXMoJ20nKTsKICAgIH07CiAgICBtb21lbnQuZHVyYXRpb24uZm4uYXNIb3VycyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpcy5hcygnaCcpOwogICAgfTsKICAgIG1vbWVudC5kdXJhdGlvbi5mbi5hc0RheXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYXMoJ2QnKTsKICAgIH07CiAgICBtb21lbnQuZHVyYXRpb24uZm4uYXNXZWVrcyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpcy5hcygnd2Vla3MnKTsKICAgIH07CiAgICBtb21lbnQuZHVyYXRpb24uZm4uYXNNb250aHMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYXMoJ00nKTsKICAgIH07CiAgICBtb21lbnQuZHVyYXRpb24uZm4uYXNZZWFycyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpcy5hcygneScpOwogICAgfTsKCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgRGVmYXVsdCBMb2NhbGUKICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KCgogICAgLy8gU2V0IGRlZmF1bHQgbG9jYWxlLCBvdGhlciBsb2NhbGUgd2lsbCBpbmhlcml0IGZyb20gRW5nbGlzaC4KICAgIG1vbWVudC5sb2NhbGUoJ2VuJywgewogICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7CiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsCiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOgogICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6CiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDoKICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnOwogICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0OwogICAgICAgIH0KICAgIH0pOwoKICAgIC8qIEVNQkVEX0xPQ0FMRVMgKi8KCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgICAgRXhwb3NpbmcgTW9tZW50CiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCgogICAgZnVuY3Rpb24gbWFrZUdsb2JhbChzaG91bGREZXByZWNhdGUpIHsKICAgICAgICAvKmdsb2JhbCBlbmRlcjpmYWxzZSAqLwogICAgICAgIGlmICh0eXBlb2YgZW5kZXIgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgb2xkR2xvYmFsTW9tZW50ID0gZ2xvYmFsU2NvcGUubW9tZW50OwogICAgICAgIGlmIChzaG91bGREZXByZWNhdGUpIHsKICAgICAgICAgICAgZ2xvYmFsU2NvcGUubW9tZW50ID0gZGVwcmVjYXRlKAogICAgICAgICAgICAgICAgICAgICdBY2Nlc3NpbmcgTW9tZW50IHRocm91Z2ggdGhlIGdsb2JhbCBzY29wZSBpcyAnICsKICAgICAgICAgICAgICAgICAgICAnZGVwcmVjYXRlZCwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhbiB1cGNvbWluZyAnICsKICAgICAgICAgICAgICAgICAgICAncmVsZWFzZS4nLAogICAgICAgICAgICAgICAgICAgIG1vbWVudCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZ2xvYmFsU2NvcGUubW9tZW50ID0gbW9tZW50OwogICAgICAgIH0KICAgIH0KCiAgICAvLyBDb21tb25KUyBtb2R1bGUgaXMgZGVmaW5lZAogICAgaWYgKGhhc01vZHVsZSkgewogICAgICAgIG1vZHVsZS5leHBvcnRzID0gbW9tZW50OwogICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsKICAgICAgICBkZWZpbmUoJ21vbWVudCcsIGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHsKICAgICAgICAgICAgaWYgKG1vZHVsZS5jb25maWcgJiYgbW9kdWxlLmNvbmZpZygpICYmIG1vZHVsZS5jb25maWcoKS5ub0dsb2JhbCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgLy8gcmVsZWFzZSB0aGUgZ2xvYmFsIHZhcmlhYmxlCiAgICAgICAgICAgICAgICBnbG9iYWxTY29wZS5tb21lbnQgPSBvbGRHbG9iYWxNb21lbnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBtb21lbnQ7CiAgICAgICAgfSk7CiAgICAgICAgbWFrZUdsb2JhbCh0cnVlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgbWFrZUdsb2JhbCgpOwogICAgfQp9KS5jYWxsKHRoaXMpOwoKLyogYW5ndWxhci1tb21lbnQuanMgLyB2MC44LjIgLyAoYykgMjAxMywgMjAxNCBVcmkgU2hha2VkIC8gTUlUIExpY2VuY2UgKi8KCi8qIGdsb2JhbCBkZWZpbmUgKi8KCihmdW5jdGlvbiAoKSB7CgkndXNlIHN0cmljdCc7CgoJZnVuY3Rpb24gYW5ndWxhck1vbWVudChhbmd1bGFyLCBtb21lbnQpIHsKCgkJLyoqCgkJICogQG5nZG9jIG92ZXJ2aWV3CgkJICogQG5hbWUgYW5ndWxhck1vbWVudAoJCSAqCgkJICogQGRlc2NyaXB0aW9uCgkJICogYW5ndWxhck1vbWVudCBtb2R1bGUgcHJvdmlkZXMgbW9tZW50LmpzIGZ1bmN0aW9uYWxpdHkgZm9yIGFuZ3VsYXIuanMgYXBwcy4KCQkgKi8KCQlyZXR1cm4gYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXJNb21lbnQnLCBbXSkKCgkJLyoqCgkJICogQG5nZG9jIG9iamVjdAoJCSAqIEBuYW1lIGFuZ3VsYXJNb21lbnQuY29uZmlnOmFuZ3VsYXJNb21lbnRDb25maWcKCQkgKgoJCSAqIEBkZXNjcmlwdGlvbgoJCSAqIENvbW1vbiBjb25maWd1cmF0aW9uIG9mIHRoZSBhbmd1bGFyTW9tZW50IG1vZHVsZQoJCSAqLwoJCQkuY29uc3RhbnQoJ2FuZ3VsYXJNb21lbnRDb25maWcnLCB7CgkJCQkvKioKCQkJCSAqIEBuZ2RvYyBwcm9wZXJ0eQoJCQkJICogQG5hbWUgYW5ndWxhck1vbWVudC5jb25maWcuYW5ndWxhck1vbWVudENvbmZpZyNwcmVwcm9jZXNzCgkJCQkgKiBAcHJvcGVydHlPZiBhbmd1bGFyTW9tZW50LmNvbmZpZzphbmd1bGFyTW9tZW50Q29uZmlnCgkJCQkgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZGVmYXVsdCBwcmVwcm9jZXNzb3IgdG8gYXBwbHkKCQkJCSAqCgkJCQkgKiBAZGVzY3JpcHRpb24KCQkJCSAqIERlZmluZXMgYSBkZWZhdWx0IHByZXByb2Nlc3NvciB0byBhcHBseSAoZS5nLiAndW5peCcsICdldGMnLCAuLi4pLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBudWxsLAoJCQkJICogaS5lLiBubyBwcmVwcm9jZXNzb3Igd2lsbCBiZSBhcHBsaWVkLgoJCQkJICovCgkJCQlwcmVwcm9jZXNzOiBudWxsLCAvLyBlLmcuICd1bml4JywgJ3V0YycsIC4uLgoKCQkJCS8qKgoJCQkJICogQG5nZG9jIHByb3BlcnR5CgkJCQkgKiBAbmFtZSBhbmd1bGFyTW9tZW50LmNvbmZpZy5hbmd1bGFyTW9tZW50Q29uZmlnI3RpbWV6b25lCgkJCQkgKiBAcHJvcGVydHlPZiBhbmd1bGFyTW9tZW50LmNvbmZpZzphbmd1bGFyTW9tZW50Q29uZmlnCgkJCQkgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZGVmYXVsdCB0aW1lem9uZQoJCQkJICoKCQkJCSAqIEBkZXNjcmlwdGlvbgoJCQkJICogVGhlIGRlZmF1bHQgdGltZXpvbmUgKGUuZy4gJ0V1cm9wZS9Mb25kb24nKS4gRW1wdHkgc3RyaW5nIGJ5IGRlZmF1bHQgKGRvZXMgbm90IGFwcGx5CgkJCQkgKiBhbnkgdGltZXpvbmUgc2hpZnQpLgoJCQkJICovCgkJCQl0aW1lem9uZTogJycsCgoJCQkJLyoqCgkJCQkgKiBAbmdkb2MgcHJvcGVydHkKCQkJCSAqIEBuYW1lIGFuZ3VsYXJNb21lbnQuY29uZmlnLmFuZ3VsYXJNb21lbnRDb25maWcjZm9ybWF0CgkJCQkgKiBAcHJvcGVydHlPZiBhbmd1bGFyTW9tZW50LmNvbmZpZzphbmd1bGFyTW9tZW50Q29uZmlnCgkJCQkgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcHJlLWNvbnZlcnNpb24gZm9ybWF0IG9mIHRoZSBkYXRlCgkJCQkgKgoJCQkJICogQGRlc2NyaXB0aW9uCgkJCQkgKiBTcGVjaWZ5IHRoZSBmb3JtYXQgb2YgdGhlIGlucHV0IGRhdGUuIEVzc2VudGlhbGx5IGl0J3MgYQoJCQkJICogZGVmYXVsdCBhbmQgc2F2ZXMgeW91IGZyb20gc3BlY2lmeWluZyBhIGZvcm1hdCBpbiBldmVyeQoJCQkJICogZWxlbWVudC4gT3ZlcnJpZGRlbiBieSBlbGVtZW50IGF0dHIuIE51bGwgYnkgZGVmYXVsdC4KCQkJCSAqLwoJCQkJZm9ybWF0OiBudWxsCgkJCX0pCgoJCS8qKgoJCSAqIEBuZ2RvYyBvYmplY3QKCQkgKiBAbmFtZSBhbmd1bGFyTW9tZW50Lm9iamVjdDptb21lbnQKCQkgKgoJCSAqIEBkZXNjcmlwdGlvbgoJCSAqIG1vbWVudCBnbG9iYWwgKGFzIHByb3ZpZGVkIGJ5IHRoZSBtb21lbnQuanMgbGlicmFyeSkKCQkgKi8KCQkJLmNvbnN0YW50KCdtb21lbnQnLCBtb21lbnQpCgoJCS8qKgoJCSAqIEBuZ2RvYyBvYmplY3QKCQkgKiBAbmFtZSBhbmd1bGFyTW9tZW50LmNvbmZpZzphbVRpbWVBZ29Db25maWcKCQkgKiBAbW9kdWxlIGFuZ3VsYXJNb21lbnQKCQkgKgoJCSAqIEBkZXNjcmlwdGlvbgoJCSAqIGNvbmZpZ3VyYXRpb24gc3BlY2lmaWMgdG8gdGhlIGFtVGltZUFnbyBkaXJlY3RpdmUKCQkgKi8KCQkJLmNvbnN0YW50KCdhbVRpbWVBZ29Db25maWcnLCB7CgkJCQkvKioKCQkJCSAqIEBuZ2RvYyBwcm9wZXJ0eQoJCQkJICogQG5hbWUgYW5ndWxhck1vbWVudC5jb25maWcuYW1UaW1lQWdvQ29uZmlnI3dpdGhvdXRTdWZmaXgKCQkJCSAqIEBwcm9wZXJ0eU9mIGFuZ3VsYXJNb21lbnQuY29uZmlnOmFtVGltZUFnb0NvbmZpZwoJCQkJICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdG8gaW5jbHVkZSBhIHN1ZmZpeCBpbiBhbS10aW1lLWFnbyBkaXJlY3RpdmUKCQkJCSAqCgkJCQkgKiBAZGVzY3JpcHRpb24KCQkJCSAqIERlZmF1bHRzIHRvIGZhbHNlLgoJCQkJICovCgkJCQl3aXRob3V0U3VmZml4OiBmYWxzZSwKCgkJCQkvKioKCQkJCSAqIEBuZ2RvYyBwcm9wZXJ0eQoJCQkJICogQG5hbWUgYW5ndWxhck1vbWVudC5jb25maWcuYW1UaW1lQWdvQ29uZmlnI3NlcnZlclRpbWUKCQkJCSAqIEBwcm9wZXJ0eU9mIGFuZ3VsYXJNb21lbnQuY29uZmlnOmFtVGltZUFnb0NvbmZpZwoJCQkJICogQHJldHVybnMge251bWJlcn0gU2VydmVyIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaAoJCQkJICoKCQkJCSAqIEBkZXNjcmlwdGlvbgoJCQkJICogSWYgc2V0LCB0aW1lIGFnbyB3aWxsIGJlIGNhbGN1bGF0ZWQgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHZhbHVlLgoJCQkJICogSWYgbnVsbCwgbG9jYWwgdGltZSB3aWxsIGJlIHVzZWQuIERlZmF1bHRzIHRvIG51bGwuCgkJCQkgKi8KCQkJCXNlcnZlclRpbWU6IG51bGwKCQkJfSkKCgkJLyoqCgkJICogQG5nZG9jIGRpcmVjdGl2ZQoJCSAqIEBuYW1lIGFuZ3VsYXJNb21lbnQuZGlyZWN0aXZlOmFtVGltZUFnbwoJCSAqIEBtb2R1bGUgYW5ndWxhck1vbWVudAoJCSAqCgkJICogQHJlc3RyaWN0IEEKCQkgKi8KCQkJLmRpcmVjdGl2ZSgnYW1UaW1lQWdvJywgWyckd2luZG93JywgJ21vbWVudCcsICdhbU1vbWVudCcsICdhbVRpbWVBZ29Db25maWcnLCAnYW5ndWxhck1vbWVudENvbmZpZycsIGZ1bmN0aW9uICgkd2luZG93LCBtb21lbnQsIGFtTW9tZW50LCBhbVRpbWVBZ29Db25maWcsIGFuZ3VsYXJNb21lbnRDb25maWcpIHsKCgkJCQlyZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CgkJCQkJdmFyIGFjdGl2ZVRpbWVvdXQgPSBudWxsOwoJCQkJCXZhciBjdXJyZW50VmFsdWU7CgkJCQkJdmFyIGN1cnJlbnRGb3JtYXQgPSBhbmd1bGFyTW9tZW50Q29uZmlnLmZvcm1hdDsKCQkJCQl2YXIgd2l0aG91dFN1ZmZpeCA9IGFtVGltZUFnb0NvbmZpZy53aXRob3V0U3VmZml4OwoJCQkJCXZhciBsb2NhbERhdGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKCQkJCQl2YXIgcHJlcHJvY2VzcyA9IGFuZ3VsYXJNb21lbnRDb25maWcucHJlcHJvY2VzczsKCQkJCQl2YXIgbW9kZWxOYW1lID0gYXR0ci5hbVRpbWVBZ28ucmVwbGFjZSgvXjo6LywgJycpOwoJCQkJCXZhciBpc0JpbmRPbmNlID0gKGF0dHIuYW1UaW1lQWdvLmluZGV4T2YoJzo6JykgPT09IDApOwoJCQkJCXZhciBpc1RpbWVFbGVtZW50ID0gKCdUSU1FJyA9PT0gZWxlbWVudFswXS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpKTsKCQkJCQl2YXIgdW53YXRjaENoYW5nZXM7CgoJCQkJCWZ1bmN0aW9uIGdldE5vdygpIHsKCQkJCQkJdmFyIG5vdzsKCQkJCQkJaWYgKGFtVGltZUFnb0NvbmZpZy5zZXJ2ZXJUaW1lKSB7CgkJCQkJCQl2YXIgbG9jYWxOb3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKCQkJCQkJCXZhciBub3dNaWxsaXMgPSBsb2NhbE5vdyAtIGxvY2FsRGF0ZSArIGFtVGltZUFnb0NvbmZpZy5zZXJ2ZXJUaW1lOwoJCQkJCQkJbm93ID0gbW9tZW50KG5vd01pbGxpcyk7CgkJCQkJCX0KCQkJCQkJZWxzZSB7CgkJCQkJCQlub3cgPSBtb21lbnQoKTsKCQkJCQkJfQoJCQkJCQlyZXR1cm4gbm93OwoJCQkJCX0KCgkJCQkJZnVuY3Rpb24gY2FuY2VsVGltZXIoKSB7CgkJCQkJCWlmIChhY3RpdmVUaW1lb3V0KSB7CgkJCQkJCQkkd2luZG93LmNsZWFyVGltZW91dChhY3RpdmVUaW1lb3V0KTsKCQkJCQkJCWFjdGl2ZVRpbWVvdXQgPSBudWxsOwoJCQkJCQl9CgkJCQkJfQoKCQkJCQlmdW5jdGlvbiB1cGRhdGVUaW1lKG1vbWVudEluc3RhbmNlKSB7CgkJCQkJCWVsZW1lbnQudGV4dChtb21lbnRJbnN0YW5jZS5mcm9tKGdldE5vdygpLCB3aXRob3V0U3VmZml4KSk7CgkJCQkJCWlmICghaXNCaW5kT25jZSkgewoKCQkJCQkJCXZhciBob3dPbGQgPSBNYXRoLmFicyhnZXROb3coKS5kaWZmKG1vbWVudEluc3RhbmNlLCAnbWludXRlJykpOwoJCQkJCQkJdmFyIHNlY29uZHNVbnRpbFVwZGF0ZSA9IDM2MDA7CgkJCQkJCQlpZiAoaG93T2xkIDwgMSkgewoJCQkJCQkJCXNlY29uZHNVbnRpbFVwZGF0ZSA9IDE7CgkJCQkJCQl9IGVsc2UgaWYgKGhvd09sZCA8IDYwKSB7CgkJCQkJCQkJc2Vjb25kc1VudGlsVXBkYXRlID0gMzA7CgkJCQkJCQl9IGVsc2UgaWYgKGhvd09sZCA8IDE4MCkgewoJCQkJCQkJCXNlY29uZHNVbnRpbFVwZGF0ZSA9IDMwMDsKCQkJCQkJCX0KCgkJCQkJCQlhY3RpdmVUaW1lb3V0ID0gJHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKCQkJCQkJCQl1cGRhdGVUaW1lKG1vbWVudEluc3RhbmNlKTsKCQkJCQkJCX0sIHNlY29uZHNVbnRpbFVwZGF0ZSAqIDEwMDApOwoJCQkJCQl9CgkJCQkJfQoKCQkJCQlmdW5jdGlvbiB1cGRhdGVEYXRlVGltZUF0dHIodmFsdWUpIHsKCQkJCQkJaWYgKGlzVGltZUVsZW1lbnQpIHsKCQkJCQkJCWVsZW1lbnQuYXR0cignZGF0ZXRpbWUnLCB2YWx1ZSk7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCWZ1bmN0aW9uIHVwZGF0ZU1vbWVudCgpIHsKCQkJCQkJY2FuY2VsVGltZXIoKTsKCQkJCQkJaWYgKGN1cnJlbnRWYWx1ZSkgewoJCQkJCQkJdmFyIG1vbWVudFZhbHVlID0gYW1Nb21lbnQucHJlcHJvY2Vzc0RhdGUoY3VycmVudFZhbHVlLCBwcmVwcm9jZXNzLCBjdXJyZW50Rm9ybWF0KTsKCQkJCQkJCXVwZGF0ZVRpbWUobW9tZW50VmFsdWUpOwoJCQkJCQkJdXBkYXRlRGF0ZVRpbWVBdHRyKG1vbWVudFZhbHVlLnRvSVNPU3RyaW5nKCkpOwoJCQkJCQl9CgkJCQkJfQoKCQkJCQl1bndhdGNoQ2hhbmdlcyA9IHNjb3BlLiR3YXRjaChtb2RlbE5hbWUsIGZ1bmN0aW9uICh2YWx1ZSkgewoJCQkJCQlpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHx8ICh2YWx1ZSA9PT0gbnVsbCkgfHwgKHZhbHVlID09PSAnJykpIHsKCQkJCQkJCWNhbmNlbFRpbWVyKCk7CgkJCQkJCQlpZiAoY3VycmVudFZhbHVlKSB7CgkJCQkJCQkJZWxlbWVudC50ZXh0KCcnKTsKCQkJCQkJCQl1cGRhdGVEYXRlVGltZUF0dHIoJycpOwoJCQkJCQkJCWN1cnJlbnRWYWx1ZSA9IG51bGw7CgkJCQkJCQl9CgkJCQkJCQlyZXR1cm47CgkJCQkJCX0KCgkJCQkJCWN1cnJlbnRWYWx1ZSA9IHZhbHVlOwoJCQkJCQl1cGRhdGVNb21lbnQoKTsKCgkJCQkJCWlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIGlzQmluZE9uY2UpIHsKCQkJCQkJCXVud2F0Y2hDaGFuZ2VzKCk7CgkJCQkJCX0KCQkJCQl9KTsKCgkJCQkJaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHIuYW1XaXRob3V0U3VmZml4KSkgewoJCQkJCQlzY29wZS4kd2F0Y2goYXR0ci5hbVdpdGhvdXRTdWZmaXgsIGZ1bmN0aW9uICh2YWx1ZSkgewoJCQkJCQkJaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7CgkJCQkJCQkJd2l0aG91dFN1ZmZpeCA9IHZhbHVlOwoJCQkJCQkJCXVwZGF0ZU1vbWVudCgpOwoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQl3aXRob3V0U3VmZml4ID0gYW1UaW1lQWdvQ29uZmlnLndpdGhvdXRTdWZmaXg7CgkJCQkJCQl9CgkJCQkJCX0pOwoJCQkJCX0KCgkJCQkJYXR0ci4kb2JzZXJ2ZSgnYW1Gb3JtYXQnLCBmdW5jdGlvbiAoZm9ybWF0KSB7CgkJCQkJCWlmICh0eXBlb2YgZm9ybWF0ICE9PSAndW5kZWZpbmVkJykgewoJCQkJCQkJY3VycmVudEZvcm1hdCA9IGZvcm1hdDsKCQkJCQkJCXVwZGF0ZU1vbWVudCgpOwoJCQkJCQl9CgkJCQkJfSk7CgoJCQkJCWF0dHIuJG9ic2VydmUoJ2FtUHJlcHJvY2VzcycsIGZ1bmN0aW9uIChuZXdWYWx1ZSkgewoJCQkJCQlwcmVwcm9jZXNzID0gbmV3VmFsdWU7CgkJCQkJCXVwZGF0ZU1vbWVudCgpOwoJCQkJCX0pOwoKCQkJCQlzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgewoJCQkJCQljYW5jZWxUaW1lcigpOwoJCQkJCX0pOwoKCQkJCQlzY29wZS4kb24oJ2FtTW9tZW50OmxvY2FsZUNoYW5nZWQnLCBmdW5jdGlvbiAoKSB7CgkJCQkJCXVwZGF0ZU1vbWVudCgpOwoJCQkJCX0pOwoJCQkJfTsKCQkJfV0pCgoJCS8qKgoJCSAqIEBuZ2RvYyBzZXJ2aWNlCgkJICogQG5hbWUgYW5ndWxhck1vbWVudC5zZXJ2aWNlLmFtTW9tZW50CgkJICogQG1vZHVsZSBhbmd1bGFyTW9tZW50CgkJICovCgkJCS5zZXJ2aWNlKCdhbU1vbWVudCcsIFsnbW9tZW50JywgJyRyb290U2NvcGUnLCAnJGxvZycsICdhbmd1bGFyTW9tZW50Q29uZmlnJywgZnVuY3Rpb24gKG1vbWVudCwgJHJvb3RTY29wZSwgJGxvZywgYW5ndWxhck1vbWVudENvbmZpZykgewoJCQkJdmFyIHRoYXQgPSB0aGlzOwoJCQkJLyoqCgkJCQkgKiBAbmdkb2MgcHJvcGVydHkKCQkJCSAqIEBuYW1lIGFuZ3VsYXJNb21lbnQ6YW1Nb21lbnQjcHJlcHJvY2Vzc29ycwoJCQkJICogQG1vZHVsZSBhbmd1bGFyTW9tZW50CgkJCQkgKgoJCQkJICogQGRlc2NyaXB0aW9uCgkJCQkgKiBEZWZpbmVzIHRoZSBwcmVwcm9jZXNzb3JzIGZvciB0aGUgcHJlcHJvY2Vzc0RhdGUgbWV0aG9kLiBCeSBkZWZhdWx0LCB0aGUgZm9sbG93aW5nIHByZXByb2Nlc3NvcnMKCQkJCSAqIGFyZSBkZWZpbmVkOiB1dGMsIHVuaXguCgkJCQkgKi8KCQkJCXRoaXMucHJlcHJvY2Vzc29ycyA9IHsKCQkJCQl1dGM6IG1vbWVudC51dGMsCgkJCQkJdW5peDogbW9tZW50LnVuaXgKCQkJCX07CgoJCQkJLyoqCgkJCQkgKiBAbmdkb2MgZnVuY3Rpb24KCQkJCSAqIEBuYW1lIGFuZ3VsYXJNb21lbnQuc2VydmljZS5hbU1vbWVudCNjaGFuZ2VMb2NhbGUKCQkJCSAqIEBtZXRob2RPZiBhbmd1bGFyTW9tZW50LnNlcnZpY2UuYW1Nb21lbnQKCQkJCSAqCgkJCQkgKiBAZGVzY3JpcHRpb24KCQkJCSAqIENoYW5nZXMgdGhlIGxvY2FsZSBmb3IgbW9tZW50LmpzIGFuZCB1cGRhdGVzIGFsbCB0aGUgYW0tdGltZS1hZ28gZGlyZWN0aXZlIGluc3RhbmNlcwoJCQkJICogd2l0aCB0aGUgbmV3IGxvY2FsZS4gQWxzbyBicm9hZGNhc3RzIGEgYGFtTW9tZW50OmxvY2FsZUNoYW5nZWRgIGV2ZW50IG9uICRyb290U2NvcGUuCgkJCQkgKgoJCQkJICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSAyLWxldHRlciBsYW5ndWFnZSBjb2RlIChlLmcuIGVuLCBlcywgcnUsIGV0Yy4pCgkJCQkgKi8KCQkJCXRoaXMuY2hhbmdlTG9jYWxlID0gZnVuY3Rpb24gKGxvY2FsZSkgewoJCQkJCXZhciByZXN1bHQgPSAobW9tZW50LmxvY2FsZXx8bW9tZW50LmxhbmcpKGxvY2FsZSk7CgkJCQkJaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGxvY2FsZSkpIHsKCQkJCQkJJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdhbU1vbWVudDpsb2NhbGVDaGFuZ2VkJyk7CgoJCQkJCQkvLyBUaGUgZm9sbG93aW5nIGV2ZW50IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhbiB1cGNvbWluZwoJCQkJCQkvLyBtYWpvciByZWxlYXNlLgoJCQkJCQkkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2FtTW9tZW50Omxhbmd1YWdlQ2hhbmdlJyk7CgkJCQkJfQoJCQkJCXJldHVybiByZXN1bHQ7CgkJCQl9OwoKCQkJCS8qKgoJCQkJICogQG5nZG9jIGZ1bmN0aW9uCgkJCQkgKiBAbmFtZSBhbmd1bGFyTW9tZW50LnNlcnZpY2UuYW1Nb21lbnQjY2hhbmdlTGFuZ3VhZ2UKCQkJCSAqIEBtZXRob2RPZiBhbmd1bGFyTW9tZW50LnNlcnZpY2UuYW1Nb21lbnQKCQkJCSAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgY2hhbmdlTG9jYWxlKCkgaW5zdGVhZC4KCQkJCSAqCgkJCQkgKiBAZGVzY3JpcHRpb24KCQkJCSAqIERlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgY2hhbmdlTG9jYWxlKCkgaW5zdGVhZC4KCQkJCSAqLwoJCQkJdGhpcy5jaGFuZ2VMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nKSB7CgkJCQkJJGxvZy53YXJuKCdhbmd1bGFyLW1vbWVudDogVXNhZ2Ugb2YgYW1Nb21lbnQuY2hhbmdlTGFuZ3VhZ2UoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGNoYW5nZUxvY2FsZSgpJyk7CgkJCQkJcmV0dXJuIHRoYXQuY2hhbmdlTG9jYWxlKGxhbmcpOwoJCQkJfTsKCgkJCQkvKioKCQkJCSAqIEBuZ2RvYyBmdW5jdGlvbgoJCQkJICogQG5hbWUgYW5ndWxhck1vbWVudC5zZXJ2aWNlLmFtTW9tZW50I3ByZXByb2Nlc3NEYXRlCgkJCQkgKiBAbWV0aG9kT2YgYW5ndWxhck1vbWVudC5zZXJ2aWNlLmFtTW9tZW50CgkJCQkgKgoJCQkJICogQGRlc2NyaXB0aW9uCgkJCQkgKiBQcmVwcm9jZXNzIGEgZ2l2ZW4gdmFsdWUgYW5kIGNvbnZlcnQgaXQgaW50byBhIE1vbWVudCBpbnN0YW5jZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIHRoZQoJCQkJICogYW0tdGltZS1hZ28gZGlyZWN0aXZlIGFuZCB0aGUgZmlsdGVycy4KCQkJCSAqCgkJCQkgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBwcmVwcm9jZXNzZWQKCQkJCSAqIEBwYXJhbSB7c3RyaW5nfSBwcmVwcm9jZXNzIFRoZSBuYW1lIG9mIHRoZSBwcmVwcm9jZXNzb3IgdGhlIGFwcGx5IChlLmcuIHV0YywgdW5peCkKCQkJCSAqIEBwYXJhbSB7c3RyaW5nPX0gZm9ybWF0IFNwZWNpZmllcyBob3cgdG8gcGFyc2UgdGhlIHZhbHVlIChzZWUge0BsaW5rIGh0dHA6Ly9tb21lbnRqcy5jb20vZG9jcy8jL3BhcnNpbmcvc3RyaW5nLWZvcm1hdC99KQoJCQkJICogQHJldHVybiB7TW9tZW50fSBBIHZhbHVlIHRoYXQgY2FuIGJlIHBhcnNlZCBieSB0aGUgbW9tZW50IGxpYnJhcnkKCQkJCSAqLwoJCQkJdGhpcy5wcmVwcm9jZXNzRGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgcHJlcHJvY2VzcywgZm9ybWF0KSB7CgkJCQkJaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQocHJlcHJvY2VzcykpIHsKCQkJCQkJcHJlcHJvY2VzcyA9IGFuZ3VsYXJNb21lbnRDb25maWcucHJlcHJvY2VzczsKCQkJCQl9CgkJCQkJaWYgKHRoaXMucHJlcHJvY2Vzc29yc1twcmVwcm9jZXNzXSkgewoJCQkJCQlyZXR1cm4gdGhpcy5wcmVwcm9jZXNzb3JzW3ByZXByb2Nlc3NdKHZhbHVlLCBmb3JtYXQpOwoJCQkJCX0KCQkJCQlpZiAocHJlcHJvY2VzcykgewoJCQkJCQkkbG9nLndhcm4oJ2FuZ3VsYXItbW9tZW50OiBJZ25vcmluZyB1bnN1cHBvcnRlZCB2YWx1ZSBmb3IgcHJlcHJvY2VzczogJyArIHByZXByb2Nlc3MpOwoJCQkJCX0KCQkJCQlpZiAoIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKSAmJiBpc0Zpbml0ZSh2YWx1ZSkpIHsKCQkJCQkJLy8gTWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaAoJCQkJCQlyZXR1cm4gbW9tZW50KHBhcnNlSW50KHZhbHVlLCAxMCkpOwoJCQkJCX0KCQkJCQkvLyBlbHNlIGp1c3QgcmV0dXJucyB0aGUgdmFsdWUgYXMtaXMuCgkJCQkJcmV0dXJuIG1vbWVudCh2YWx1ZSwgZm9ybWF0KTsKCQkJCX07CgoJCQkJLyoqCgkJCQkgKiBAbmdkb2MgZnVuY3Rpb24KCQkJCSAqIEBuYW1lIGFuZ3VsYXJNb21lbnQuc2VydmljZS5hbU1vbWVudCNhcHBseVRpbWV6b25lCgkJCQkgKiBAbWV0aG9kT2YgYW5ndWxhck1vbWVudC5zZXJ2aWNlLmFtTW9tZW50CgkJCQkgKgoJCQkJICogQGRlc2NyaXB0aW9uCgkJCQkgKiBBcHBseSBhIHRpbWV6b25lIG9udG8gYSBnaXZlbiBtb21lbnQgb2JqZWN0IC0gaWYgbW9tZW50LXRpbWV6b25lLmpzIGlzIGluY2x1ZGVkCgkJCQkgKiBPdGhlcndpc2UsIGl0J2xsIG5vdCBhcHBseSBhbnkgdGltZXpvbmUgc2hpZnQuCgkJCQkgKgoJCQkJICogQHBhcmFtIHtNb21lbnR9IGFNb21lbnQgYSBtb21lbnQoKSBpbnN0YW5jZSB0byBhcHBseSB0aGUgdGltZXpvbmUgc2hpZnQgdG8KCQkJCSAqIEByZXR1cm5zIHtNb21lbnR9IFRoZSBnaXZlbiBtb21lbnQgd2l0aCB0aGUgdGltZXpvbmUgc2hpZnQgYXBwbGllZAoJCQkJICovCgkJCQl0aGlzLmFwcGx5VGltZXpvbmUgPSBmdW5jdGlvbiAoYU1vbWVudCkgewoJCQkJCXZhciB0aW1lem9uZSA9IGFuZ3VsYXJNb21lbnRDb25maWcudGltZXpvbmU7CgkJCQkJaWYgKGFNb21lbnQgJiYgdGltZXpvbmUpIHsKCQkJCQkJaWYgKGFNb21lbnQudHopIHsKCQkJCQkJCWFNb21lbnQgPSBhTW9tZW50LnR6KHRpbWV6b25lKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCSRsb2cud2FybignYW5ndWxhci1tb21lbnQ6IHRpbWV6b25lIHNwZWNpZmllZCBidXQgbW9tZW50LnR6KCkgaXMgdW5kZWZpbmVkLiBEaWQgeW91IGZvcmdldCB0byBpbmNsdWRlIG1vbWVudC10aW1lem9uZS5qcz8nKTsKCQkJCQkJfQoJCQkJCX0KCQkJCQlyZXR1cm4gYU1vbWVudDsKCQkJCX07CgkJCX1dKQoKCQkvKioKCQkgKiBAbmdkb2MgZmlsdGVyCgkJICogQG5hbWUgYW5ndWxhck1vbWVudC5maWx0ZXI6YW1DYWxlbmRhcgoJCSAqIEBtb2R1bGUgYW5ndWxhck1vbWVudAoJCSAqLwoJCQkuZmlsdGVyKCdhbUNhbGVuZGFyJywgWydtb21lbnQnLCAnYW1Nb21lbnQnLCBmdW5jdGlvbiAobW9tZW50LCBhbU1vbWVudCkgewoJCQkJcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgcHJlcHJvY2VzcykgewoJCQkJCWlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlID09PSBudWxsKSB7CgkJCQkJCXJldHVybiAnJzsKCQkJCQl9CgoJCQkJCXZhbHVlID0gYW1Nb21lbnQucHJlcHJvY2Vzc0RhdGUodmFsdWUsIHByZXByb2Nlc3MpOwoJCQkJCXZhciBkYXRlID0gbW9tZW50KHZhbHVlKTsKCQkJCQlpZiAoIWRhdGUuaXNWYWxpZCgpKSB7CgkJCQkJCXJldHVybiAnJzsKCQkJCQl9CgoJCQkJCXJldHVybiBhbU1vbWVudC5hcHBseVRpbWV6b25lKGRhdGUpLmNhbGVuZGFyKCk7CgkJCQl9OwoJCQl9XSkKCgkJLyoqCgkJICogQG5nZG9jIGZpbHRlcgoJCSAqIEBuYW1lIGFuZ3VsYXJNb21lbnQuZmlsdGVyOmFtRGF0ZUZvcm1hdAoJCSAqIEBtb2R1bGUgYW5ndWxhck1vbWVudAoJCSAqIEBmdW5jdGlvbgoJCSAqLwoJCQkuZmlsdGVyKCdhbURhdGVGb3JtYXQnLCBbJ21vbWVudCcsICdhbU1vbWVudCcsIGZ1bmN0aW9uIChtb21lbnQsIGFtTW9tZW50KSB7CgkJCQlyZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCBmb3JtYXQsIHByZXByb2Nlc3MpIHsKCQkJCQlpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZSA9PT0gbnVsbCkgewoJCQkJCQlyZXR1cm4gJyc7CgkJCQkJfQoKCQkJCQl2YWx1ZSA9IGFtTW9tZW50LnByZXByb2Nlc3NEYXRlKHZhbHVlLCBwcmVwcm9jZXNzKTsKCQkJCQl2YXIgZGF0ZSA9IG1vbWVudCh2YWx1ZSk7CgkJCQkJaWYgKCFkYXRlLmlzVmFsaWQoKSkgewoJCQkJCQlyZXR1cm4gJyc7CgkJCQkJfQoKCQkJCQlyZXR1cm4gYW1Nb21lbnQuYXBwbHlUaW1lem9uZShkYXRlKS5mb3JtYXQoZm9ybWF0KTsKCQkJCX07CgkJCX1dKQoKCQkvKioKCQkgKiBAbmdkb2MgZmlsdGVyCgkJICogQG5hbWUgYW5ndWxhck1vbWVudC5maWx0ZXI6YW1EdXJhdGlvbkZvcm1hdAoJCSAqIEBtb2R1bGUgYW5ndWxhck1vbWVudAoJCSAqIEBmdW5jdGlvbgoJCSAqLwoJCQkuZmlsdGVyKCdhbUR1cmF0aW9uRm9ybWF0JywgWydtb21lbnQnLCBmdW5jdGlvbiAobW9tZW50KSB7CgkJCQlyZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCBmb3JtYXQsIHN1ZmZpeCkgewoJCQkJCWlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlID09PSBudWxsKSB7CgkJCQkJCXJldHVybiAnJzsKCQkJCQl9CgoJCQkJCXJldHVybiBtb21lbnQuZHVyYXRpb24odmFsdWUsIGZvcm1hdCkuaHVtYW5pemUoc3VmZml4KTsKCQkJCX07CgkJCX1dKTsKCX0KCglpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7CgkJZGVmaW5lKCdhbmd1bGFyLW1vbWVudCcsIFsnYW5ndWxhcicsICdtb21lbnQnXSwgYW5ndWxhck1vbWVudCk7Cgl9IGVsc2UgewoJCWFuZ3VsYXJNb21lbnQoYW5ndWxhciwgd2luZG93Lm1vbWVudCk7Cgl9Cn0pKCk7CgoKLyoKUHJvamVjdDogYW5ndWxhci1nYW50dCBmb3IgQW5ndWxhckpTCkF1dGhvcjogTWFyY28gU2Nod2VpZ2hhdXNlcgpDb250cmlidXRvcnM6IFLDqW1pIEFsdmVyZ25hdApMaWNlbnNlOiBNSVQuCkdpdGh1YjogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItZ2FudHQvYW5ndWxhci1nYW50dAoqLwondXNlIHN0cmljdCc7CgoKdmFyIGdhbnR0ID0gYW5ndWxhci5tb2R1bGUoJ2dhbnR0JywgWydnYW50dFRlbXBsYXRlcycsICdhbmd1bGFyTW9tZW50J10pOwpnYW50dC5kaXJlY3RpdmUoJ2dhbnR0JywgWydHYW50dCcsICdnYW50dE9wdGlvbnMnLCAnR2FudHRDYWxlbmRhcicsICdtb21lbnQnLCAnZ2FudHRNb3VzZU9mZnNldCcsICdnYW50dERlYm91bmNlJywgJ2dhbnR0RW5hYmxlTmdBbmltYXRlJywgZnVuY3Rpb24oR2FudHQsIE9wdGlvbnMsIENhbGVuZGFyLCBtb21lbnQsIG1vdXNlT2Zmc2V0LCBkZWJvdW5jZSwgZW5hYmxlTmdBbmltYXRlKSB7CiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnRUEnLAogICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsCiAgICAgICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsKICAgICAgICAgICAgaWYgKHRBdHRycy50ZW1wbGF0ZVVybCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJ3RlbXBsYXRlL2RlZmF1bHQuZ2FudHQudG1wbC5odG1sJzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0QXR0cnMudGVtcGxhdGVVcmw7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHNjb3BlOiB7CiAgICAgICAgICAgIHNvcnRNb2RlOiAnPT8nLCAvLyBQb3NzaWJsZSBtb2RlczogJ25hbWUnLCAnZGF0ZScsICdjdXN0b20nCiAgICAgICAgICAgIGZpbHRlclRhc2s6ICc9PycsIC8vIFRhc2sgZmlsdGVyIGFzIGEgYW5ndWxhckpTIGV4cHJlc3Npb24KICAgICAgICAgICAgZmlsdGVyVGFza0NvbXBhcmF0b3I6ICc9PycsIC8vIENvbXBhcmF0b3IgdG8gdXNlIGZvciB0aGUgdGFzayBmaWx0ZXIKICAgICAgICAgICAgZmlsdGVyUm93OiAnPT8nLCAvLyBSb3cgZmlsdGVyIGFzIGEgYW5ndWxhckpTIGV4cHJlc3Npb24KICAgICAgICAgICAgZmlsdGVyUm93Q29tcGFyYXRvcjogJz0/JywgLy8gQ29tcGFyYXRvciB0byB1c2UgZm9yIHRoZSByb3cgZmlsdGVyCiAgICAgICAgICAgIHZpZXdTY2FsZTogJz0/JywgLy8gUG9zc2libGUgc2NhbGVzOiAnaG91cicsICdkYXknLCAnd2VlaycsICdtb250aCcKICAgICAgICAgICAgY29sdW1uV2lkdGg6ICc9PycsIC8vIERlZmluZXMgdGhlIHNpemUgb2YgYSBjb2x1bW4sIDEgYmVpbmcgMWVtIHBlciB1bml0IChob3VyIG9yIGRheSwgLi4gZGVwZW5kaW5nIG9uIHNjYWxlKSwKICAgICAgICAgICAgYWxsb3dMYWJlbHNSZXNpemluZzogJz0/JywgLy8gU2V0IHRvIHRydWUgaWYgdGhlIHVzZXIgc2hvdWxkIGJlIGFibGUgdG8gcmVzaXplIHRoZSBsYWJlbCBzZWN0aW9uLgogICAgICAgICAgICBmcm9tRGF0ZTogJz0/JywgLy8gSWYgbm90IHNwZWNpZmllZCB3aWxsIHVzZSB0aGUgZWFybGllc3QgdGFzayBkYXRlIChub3RlOiBhcyBvZiBub3cgdGhpcyBjYW4gb25seSBleHBhbmQgbm90IHNocmluaykKICAgICAgICAgICAgdG9EYXRlOiAnPT8nLCAvLyBJZiBub3Qgc3BlY2lmaWVkIHdpbGwgdXNlIHRoZSBsYXRlc3QgdGFzayBkYXRlIChub3RlOiBhcyBvZiBub3cgdGhpcyBjYW4gb25seSBleHBhbmQgbm90IHNocmluaykKICAgICAgICAgICAgY3VycmVudERhdGVWYWx1ZTogJz0/JywgLy8gSWYgc3BlY2lmaWVkLCB0aGUgY3VycmVudCBkYXRlIHdpbGwgYmUgZGlzcGxheWVkCiAgICAgICAgICAgIGN1cnJlbnREYXRlOiAnPT8nLCAvLyBUaGUgZGlzcGxheSBvZiBjdXJyZW50RGF0ZSAoJ25vbmUnLCAnbGluZScgb3IgJ2NvbHVtbicpLgogICAgICAgICAgICBhdXRvRXhwYW5kOiAnPT8nLCAvLyBTZXQgdGhpcyBib3RoLCBsZWZ0IG9yIHJpZ2h0IGlmIHRoZSBkYXRlIHJhbmdlIHNoYWxsIGV4cGFuZCBpZiB0aGUgdXNlciBzY3JvbGwgdG8gdGhlIGxlZnQgb3IgcmlnaHQgZW5kLiBPdGhlcndpc2Ugc2V0IHRvIGZhbHNlIG9yIG5vbmUuCiAgICAgICAgICAgIHRhc2tPdXRPZlJhbmdlOiAnPT8nLCAvLyBTZXQgdGhpcyB0byBleHBhbmQgb3IgdHJ1bmNhdGUgdG8gZGVmaW5lIHRoZSBiZWhhdmlvciBvZiB0YXNrcyBnb2luZyBvdXQgb2YgdmlzaWJsZSByYW5nZS4KICAgICAgICAgICAgbWF4SGVpZ2h0OiAnPT8nLCAvLyBEZWZpbmUgdGhlIG1heGltdW0gaGVpZ2h0IG9mIHRoZSBHYW50dCBpbiBQWC4gPiAwIHRvIGFjdGl2YXRlIG1heCBoZWlnaHQgYmVoYXZpb3VyLgogICAgICAgICAgICBsYWJlbHNXaWR0aDogJz0/JywgLy8gRGVmaW5lIHRoZSB3aWR0aCBvZiB0aGUgbGFiZWxzIHNlY3Rpb24uIENoYW5nZXMgd2hlbiB0aGUgdXNlciBpcyByZXNpemluZyB0aGUgbGFiZWxzIHdpZHRoCiAgICAgICAgICAgIHNob3dMYWJlbHNDb2x1bW46ICc9PycsIC8vIFdoZXRoZXIgdG8gc2hvdyBjb2x1bW4gd2l0aCBsYWJlbHMgb3Igbm90LiBEZWZhdWx0ICh0cnVlKQogICAgICAgICAgICBzaG93VG9vbHRpcHM6ICc9PycsIC8vIFRydWUgd2hlbiB0b29sdGlwcyBzaGFsbCBiZSBlbmFibGVkLiBEZWZhdWx0ICh0cnVlKQogICAgICAgICAgICBoZWFkZXJzOiAnPT8nLCAvLyBBbiBhcnJheSBvZiB1bml0cyBmb3IgaGVhZGVycy4KICAgICAgICAgICAgaGVhZGVyc0Zvcm1hdHM6ICc9PycsIC8vIEFuIGFycmF5IG9mIGNvcnJlc3BvbmRpbmcgZm9ybWF0cyBmb3IgaGVhZGVycy4KICAgICAgICAgICAgdGltZUZyYW1lczogJz0/JywKICAgICAgICAgICAgZGF0ZUZyYW1lczogJz0/JywKICAgICAgICAgICAgdGltZUZyYW1lc1dvcmtpbmdNb2RlOiAnPT8nLAogICAgICAgICAgICB0aW1lRnJhbWVzTm9uV29ya2luZ01vZGU6ICc9PycsCiAgICAgICAgICAgIHRvb2x0aXBEYXRlRm9ybWF0OiAnPT8nLAogICAgICAgICAgICB0aW1lc3BhbnM6ICc9PycsCiAgICAgICAgICAgIGNvbHVtbk1hZ25ldDogJz0/JywKICAgICAgICAgICAgZGF0YTogJz0/JywKICAgICAgICAgICAgYXBpOiAnPT8nLAogICAgICAgICAgICBvcHRpb25zOiAnPT8nCiAgICAgICAgfSwKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKICAgICAgICAgICAgZm9yICh2YXIgb3B0aW9uIGluICRzY29wZS5vcHRpb25zKSB7CiAgICAgICAgICAgICAgICAkc2NvcGVbb3B0aW9uXSA9ICRzY29wZS5vcHRpb25zW29wdGlvbl07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIE9wdGlvbnMuaW5pdGlhbGl6ZSgkc2NvcGUpOwoKICAgICAgICAgICAgLy8gRGlzYWJsZSBhbmltYXRpb24gaWYgbmdBbmltYXRlIGlzIHByZXNlbnQsIGFzIGl0IGRyb3BzIGRvd24gcGVyZm9ybWFuY2UuCiAgICAgICAgICAgIGVuYWJsZU5nQW5pbWF0ZShmYWxzZSwgJGVsZW1lbnQpOwoKICAgICAgICAgICAgJHNjb3BlLmdhbnR0ID0gbmV3IEdhbnR0KCRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICB0aGlzLmdhbnR0ID0gJHNjb3BlLmdhbnR0OwogICAgICAgIH1dLAogICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7CiAgICAgICAgICAgIC8vIEdhbnR0IGlzIGluaXRpYWxpemVkLiBTaWduYWwgdGhhdCB0aGUgR2FudHQgaXMgcmVhZHkuCiAgICAgICAgICAgIHNjb3BlLmdhbnR0LmFwaS5jb3JlLnJhaXNlLnJlYWR5KHNjb3BlLmdhbnR0LmFwaSk7CgogICAgICAgICAgICBzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5uZXcoJ2dhbnR0Jywgc2NvcGUsIGVsZW1lbnQpOwogICAgICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5kZXN0cm95KCdnYW50dCcsIHNjb3BlLCBlbGVtZW50KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfTsKfV0pOwoKCi8vIFRoaXMgZmlsZSBpcyBhZGFwdGVkIGZyb20gQW5ndWxhciBVSSBuZ0dyaWQgcHJvamVjdAovLyBNSVQgTGljZW5zZQovLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci11aS9uZy1ncmlkL2Jsb2IvdjMuMC4wLXJjLjEyL3NyYy9qcy9jb3JlL2ZhY3Rvcmllcy9HcmlkQXBpLmpzCihmdW5jdGlvbigpIHsKCiAgICBhbmd1bGFyLm1vZHVsZSgnZ2FudHQnKQogICAgICAgIC5mYWN0b3J5KCdHYW50dEFwaScsIFsnJHEnLCAnJHJvb3RTY29wZScsICdnYW50dFV0aWxzJywKICAgICAgICAgICAgZnVuY3Rpb24oJHEsICRyb290U2NvcGUsIHV0aWxzKSB7CiAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgICAgICAgICAgICogQG5hbWUgZ2FudHQuY2xhc3M6R2FudHRBcGkKICAgICAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBHYW50dEFwaSBwcm92aWRlcyB0aGUgYWJpbGl0eSB0byByZWdpc3RlciBwdWJsaWMgbWV0aG9kcyBldmVudHMgaW5zaWRlIHRoZSBnYW50dCBhbmQgYWxsb3cKICAgICAgICAgICAgICAgICAqIGZvciBvdGhlciBjb21wb25lbnRzIHRvIHVzZSB0aGUgYXBpIHZpYSBmZWF0dXJlTmFtZS5tZXRob2ROYW1lIGFuZCBmZWF0dXJlTmFtZS5vbi5ldmVudE5hbWUoZnVuY3Rpb24oYXJncyl7fQogICAgICAgICAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGdhbnR0IGdhbnR0IHRoYXQgb3ducyBhcGkKICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgdmFyIEdhbnR0QXBpID0gZnVuY3Rpb24gR2FudHRBcGkoZ2FudHQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbnR0ID0gZ2FudHQ7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmFwaUlkID0gdXRpbHMubmV3SWQoKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICAgICAgICAgICAqIEBuYW1lIGdhbnR0LmNsYXNzOnN1cHByZXNzRXZlbnRzCiAgICAgICAgICAgICAgICAgKiBAbWV0aG9kT2YgZ2FudHQuY2xhc3M6R2FudHRBcGkKICAgICAgICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBVc2VkIHRvIGV4ZWN1dGUgYSBmdW5jdGlvbiB3aGlsZSBkaXNhYmxpbmcgdGhlIHNwZWNpZmllZCBldmVudCBsaXN0ZW5lcnMuCiAgICAgICAgICAgICAgICAgKiBEaXNhYmxlcyB0aGUgbGlzdGVuZXJGdW5jdGlvbnMsIGV4ZWN1dGVzIHRoZSBjYWxsYmFja0ZuLCBhbmQgdGhlbiBlbmFibGVzCiAgICAgICAgICAgICAgICAgKiB0aGUgbGlzdGVuZXJGdW5jdGlvbnMgYWdhaW4KICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBsaXN0ZW5lckZ1bmNzIGxpc3RlbmVyRnVuYyBvciBhcnJheSBvZiBsaXN0ZW5lckZ1bmNzIHRvIHN1cHByZXNzLiBUaGVzZSBtdXN0IGJlIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgKiBmdW5jdGlvbnMgdGhhdCB3ZXJlIHVzZWQgaW4gdGhlIC5vbi5ldmVudE5hbWUgbWV0aG9kCiAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gY2FsbEJhY2tGbiBmdW5jdGlvbiB0byBleGVjdXRlCiAgICAgICAgICAgICAgICAgKiBAZXhhbXBsZQogICAgICAgICAgICAgICAgICogPHByZT4KICAgICAgICAgICAgICAgICAqICAgIHZhciBuYXZpZ2F0ZSA9IGZ1bmN0aW9uIChuZXdSb3dDb2wsIG9sZFJvd0NvbCl7CiAgICAgICAgICAgICAgICAgKiAgICAgICAvL2RvIHNvbWV0aGluZyBvbiBuYXZpZ2F0ZQogICAgICAgICAgICAgICAgICogICAgfQogICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAqICAgIGdhbnR0QXBpLmNlbGxOYXYub24ubmF2aWdhdGUoc2NvcGUsbmF2aWdhdGUpOwogICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgKiAgICAvL2NhbGwgdGhlIHNjcm9sbFRvIGV2ZW50IGFuZCBzdXBwcmVzcyBvdXIgbmF2aWdhdGUgbGlzdGVuZXIKICAgICAgICAgICAgICAgICAqICAgIC8vc2Nyb2xsVG8gd2lsbCBzdGlsbCByYWlzZSB0aGUgZXZlbnQgZm9yIG90aGVyIGxpc3RlbmVycwogICAgICAgICAgICAgICAgICogICAgZ2FudHRBcGkuc3VwcHJlc3NFdmVudHMobmF2aWdhdGUsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgKiAgICAgICBnYW50dEFwaS5jZWxsTmF2LnNjcm9sbFRvKGFSb3csIGFDb2wpOwogICAgICAgICAgICAgICAgICogICAgfSk7CiAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICogPC9wcmU+CiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIEdhbnR0QXBpLnByb3RvdHlwZS5zdXBwcmVzc0V2ZW50cyA9IGZ1bmN0aW9uKGxpc3RlbmVyRnVuY3MsIGNhbGxCYWNrRm4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IGFuZ3VsYXIuaXNBcnJheShsaXN0ZW5lckZ1bmNzKSA/IGxpc3RlbmVyRnVuY3MgOiBbbGlzdGVuZXJGdW5jc107CgogICAgICAgICAgICAgICAgICAgIC8vZmluZCBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMKICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmRMaXN0ZW5lcnMgPSBbXTsKICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kTGlzdGVuZXJzID0gc2VsZi5saXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uKGxzdG5yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbCA9PT0gbHN0bnIuaGFuZGxlcjsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIC8vZGVyZWdpc3RlciBhbGwgdGhlIGxpc3RlbmVycwogICAgICAgICAgICAgICAgICAgIGZvdW5kTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24obCkgewogICAgICAgICAgICAgICAgICAgICAgICBsLmRlcmVnKCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIGNhbGxCYWNrRm4oKTsKCiAgICAgICAgICAgICAgICAgICAgLy9yZXJlZ2lzdGVyIGFsbCB0aGUgbGlzdGVuZXJzCiAgICAgICAgICAgICAgICAgICAgZm91bmRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGwuZGVyZWcgPSByZWdpc3RlckV2ZW50V2l0aEFuZ3VsYXIobC5zY29wZSwgbC5ldmVudElkLCBsLmhhbmRsZXIsIHNlbGYuZ2FudHQpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICAgICAgICAgICAqIEBuYW1lIHJlZ2lzdGVyRXZlbnQKICAgICAgICAgICAgICAgICAqIEBtZXRob2RPZiBnYW50dC5jbGFzczpHYW50dEFwaQogICAgICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlZ2lzdGVycyBhIG5ldyBldmVudCBmb3IgdGhlIGdpdmVuIGZlYXR1cmUKICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlTmFtZSBuYW1lIG9mIHRoZSBmZWF0dXJlIHRoYXQgcmFpc2VzIHRoZSBldmVudAogICAgICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAgbmFtZSBvZiB0aGUgZXZlbnQKICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgR2FudHRBcGkucHJvdG90eXBlLnJlZ2lzdGVyRXZlbnQgPSBmdW5jdGlvbihmZWF0dXJlTmFtZSwgZXZlbnROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgIGlmICghc2VsZltmZWF0dXJlTmFtZV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZltmZWF0dXJlTmFtZV0gPSB7fTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciBmZWF0dXJlID0gc2VsZltmZWF0dXJlTmFtZV07CiAgICAgICAgICAgICAgICAgICAgaWYgKCFmZWF0dXJlLm9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUub24gPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5yYWlzZSA9IHt9OwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50SWQgPSAnZXZlbnQ6Z2FudHQ6JyArIHRoaXMuYXBpSWQgKyAnOicgKyBmZWF0dXJlTmFtZSArICc6JyArIGV2ZW50TmFtZTsKCiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5yYWlzZVtldmVudE5hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdC5hcHBseSgkcm9vdFNjb3BlLCBbZXZlbnRJZF0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLm9uW2V2ZW50TmFtZV0gPSBmdW5jdGlvbihzY29wZSwgaGFuZGxlcikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVyZWcgPSByZWdpc3RlckV2ZW50V2l0aEFuZ3VsYXIoc2NvcGUsIGV2ZW50SWQsIGhhbmRsZXIsIHNlbGYuZ2FudHQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy90cmFjayBvdXIgbGlzdGVuZXIgc28gd2UgY2FuIHR1cm4gb2ZmIGFuZCBvbgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSB7aGFuZGxlcjogaGFuZGxlciwgZGVyZWc6IGRlcmVnLCBldmVudElkOiBldmVudElkLCBzY29wZTogc2NvcGV9OwogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVzdHJveSB0cmFja2luZyB3aGVuIHNjb3BlIGlzIGRlc3Ryb3llZAogICAgICAgICAgICAgICAgICAgICAgICAvL3dhbnRlZCB0byByZW1vdmUgdGhlIGxpc3RlbmVyIGZyb20gdGhlIGFycmF5IGJ1dCBhbmd1bGFyIGRvZXMKICAgICAgICAgICAgICAgICAgICAgICAgLy9zdHJhbmdlIHRoaW5ncyBpbiBzY29wZS4kZGVzdHJveSBzbyBJIGNvdWxkIG5vdCBhY2Nlc3MgdGhlIGxpc3RlbmVyIGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmRlcmVnID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmhhbmRsZXIgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuZXZlbnRJZCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5zY29wZSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRXaXRoQW5ndWxhcihzY29wZSwgZXZlbnRJZCwgaGFuZGxlciwgZ2FudHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJG9uKGV2ZW50SWQsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3Muc3BsaWNlKDAsIDEpOyAvL3JlbW92ZSBldnQgYXJndW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5hcHBseShnYW50dC5hcGksIGFyZ3MpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAgICAgICAgICAgKiBAbmFtZSByZWdpc3RlckV2ZW50c0Zyb21PYmplY3QKICAgICAgICAgICAgICAgICAqIEBtZXRob2RPZiBnYW50dC5jbGFzczpHYW50dEFwaQogICAgICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlZ2lzdGVycyBmZWF0dXJlcyBhbmQgZXZlbnRzIGZyb20gYSBzaW1wbGUgb2JqZWN0TWFwLgogICAgICAgICAgICAgICAgICogZXZlbnRPYmplY3RNYXAgbXVzdCBiZSBpbiB0aGlzIGZvcm1hdCAobXVsdGlwbGUgZmVhdHVyZXMgYWxsb3dlZCkKICAgICAgICAgICAgICAgICAqIDxwcmU+CiAgICAgICAgICAgICAgICAgKiB7ZmVhdHVyZU5hbWU6CiAgICAgICAgICAgICAgICAgKiAgICAgICAgewogICAgICAgICAgICAgICAgICogICAgICAgICAgZXZlbnROYW1lT25lOmZ1bmN0aW9uKGFyZ3Mpe30sCiAgICAgICAgICAgICAgICAgKiAgICAgICAgICBldmVudE5hbWVUd286ZnVuY3Rpb24oYXJncyl7fQogICAgICAgICAgICAgICAgICogICAgICAgIH0KICAgICAgICAgICAgICAgICAqICB9CiAgICAgICAgICAgICAgICAgKiA8L3ByZT4KICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudE9iamVjdE1hcCBtYXAgb2YgZmVhdHVyZS9ldmVudCBuYW1lcwogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICBHYW50dEFwaS5wcm90b3R5cGUucmVnaXN0ZXJFdmVudHNGcm9tT2JqZWN0ID0gZnVuY3Rpb24oZXZlbnRPYmplY3RNYXApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZlYXR1cmVzID0gW107CiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGV2ZW50T2JqZWN0TWFwLCBmdW5jdGlvbihmZWF0UHJvcCwgZmVhdFByb3BOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZWF0dXJlID0ge25hbWU6IGZlYXRQcm9wTmFtZSwgZXZlbnRzOiBbXX07CiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChmZWF0UHJvcCwgZnVuY3Rpb24ocHJvcCwgcHJvcE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZXZlbnRzLnB1c2gocHJvcE5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbihmZWF0dXJlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZXZlbnRzLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVnaXN0ZXJFdmVudChmZWF0dXJlLm5hbWUsIGV2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgICAgICAgICAgICogQG5hbWUgcmVnaXN0ZXJNZXRob2QKICAgICAgICAgICAgICAgICAqIEBtZXRob2RPZiBnYW50dC5jbGFzczpHYW50dEFwaQogICAgICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlZ2lzdGVycyBhIG5ldyBldmVudCBmb3IgdGhlIGdpdmVuIGZlYXR1cmUKICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlTmFtZSBuYW1lIG9mIHRoZSBmZWF0dXJlCiAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSAgbmFtZSBvZiB0aGUgbWV0aG9kCiAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gY2FsbEJhY2tGbiBmdW5jdGlvbiB0byBleGVjdXRlCiAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gdGhpc0FyZyBiaW5kcyBjYWxsQmFja0ZuICd0aGlzJyB0byB0aGlzQXJnLiAgRGVmYXVsdHMgdG8gZ2FudHRBcGkuZ2FudHQKICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgR2FudHRBcGkucHJvdG90eXBlLnJlZ2lzdGVyTWV0aG9kID0gZnVuY3Rpb24oZmVhdHVyZU5hbWUsIG1ldGhvZE5hbWUsIGNhbGxCYWNrRm4sIHRoaXNBcmcpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXNbZmVhdHVyZU5hbWVdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbZmVhdHVyZU5hbWVdID0ge307CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZSA9IHRoaXNbZmVhdHVyZU5hbWVdOwoKICAgICAgICAgICAgICAgICAgICBmZWF0dXJlW21ldGhvZE5hbWVdID0gdXRpbHMuY3JlYXRlQm91bmRlZFdyYXBwZXIodGhpc0FyZyB8fCB0aGlzLmdhbnR0LCBjYWxsQmFja0ZuKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICAgICAgICAgICAqIEBuYW1lIHJlZ2lzdGVyTWV0aG9kc0Zyb21PYmplY3QKICAgICAgICAgICAgICAgICAqIEBtZXRob2RPZiBnYW50dC5jbGFzczpHYW50dEFwaQogICAgICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlZ2lzdGVycyBmZWF0dXJlcyBhbmQgbWV0aG9kcyBmcm9tIGEgc2ltcGxlIG9iamVjdE1hcC4KICAgICAgICAgICAgICAgICAqIGV2ZW50T2JqZWN0TWFwIG11c3QgYmUgaW4gdGhpcyBmb3JtYXQgKG11bHRpcGxlIGZlYXR1cmVzIGFsbG93ZWQpCiAgICAgICAgICAgICAgICAgKiA8YnI+CiAgICAgICAgICAgICAgICAgKiB7ZmVhdHVyZU5hbWU6CiAgICAgICAgICAgICAgICAgKiAgICAgICAgewogICAgICAgICAgICAgICAgICogICAgICAgICAgbWV0aG9kTmFtZU9uZTpmdW5jdGlvbihhcmdzKXt9LAogICAgICAgICAgICAgICAgICogICAgICAgICAgbWV0aG9kTmFtZVR3bzpmdW5jdGlvbihhcmdzKXt9CiAgICAgICAgICAgICAgICAgKiAgICAgICAgfQogICAgICAgICAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50T2JqZWN0TWFwIG1hcCBvZiBmZWF0dXJlL2V2ZW50IG5hbWVzCiAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gdGhpc0FyZyBiaW5kcyB0aGlzIHRvIHRoaXNBcmcgZm9yIGFsbCBmdW5jdGlvbnMuICBEZWZhdWx0cyB0byBHYW50dEFwaS5nYW50dAogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICBHYW50dEFwaS5wcm90b3R5cGUucmVnaXN0ZXJNZXRob2RzRnJvbU9iamVjdCA9IGZ1bmN0aW9uKG1ldGhvZE1hcCwgdGhpc0FyZykgewogICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZXMgPSBbXTsKICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gobWV0aG9kTWFwLCBmdW5jdGlvbihmZWF0UHJvcCwgZmVhdFByb3BOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZWF0dXJlID0ge25hbWU6IGZlYXRQcm9wTmFtZSwgbWV0aG9kczogW119OwogICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZmVhdFByb3AsIGZ1bmN0aW9uKHByb3AsIHByb3BOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLm1ldGhvZHMucHVzaCh7bmFtZTogcHJvcE5hbWUsIGZuOiBwcm9wfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5wdXNoKGZlYXR1cmUpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uKGZlYXR1cmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5tZXRob2RzLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlZ2lzdGVyTWV0aG9kKGZlYXR1cmUubmFtZSwgbWV0aG9kLm5hbWUsIG1ldGhvZC5mbiwgdGhpc0FyZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgcmV0dXJuIEdhbnR0QXBpOwoKICAgICAgICAgICAgfV0pOwoKfSkoKTsKCgpnYW50dC5mYWN0b3J5KCdnYW50dE9wdGlvbnMnLCBbJ21vbWVudCcsIGZ1bmN0aW9uKG1vbWVudCkgewogICAgcmV0dXJuIHtpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgICAgb3B0aW9ucy5hcGkgPSBvcHRpb25zLmFwaSB8fCBhbmd1bGFyLm5vb3AoKTsKCiAgICAgICAgb3B0aW9ucy5kYXRhID0gb3B0aW9ucy5kYXRhIHx8IFtdOwoKICAgICAgICBvcHRpb25zLnRpbWVzcGFucyA9IG9wdGlvbnMudGltZXNwYW5zIHx8IFtdOwoKICAgICAgICBvcHRpb25zLnNvcnRNb2RlID0gb3B0aW9ucy5zb3J0TW9kZSB8fCAnbmFtZSc7CgogICAgICAgIG9wdGlvbnMuZmlsdGVyVGFzayA9IG9wdGlvbnMuZmlsdGVyVGFzayB8fCB1bmRlZmluZWQ7CiAgICAgICAgb3B0aW9ucy5maWx0ZXJUYXNrQ29tcGFyYXRvciA9IG9wdGlvbnMuZmlsdGVyVGFza0NvbXBhcmF0b3IgfHwgdW5kZWZpbmVkOwoKICAgICAgICBvcHRpb25zLmZpbHRlclJvdyA9IG9wdGlvbnMuZmlsdGVyUm93IHx8IHVuZGVmaW5lZDsKICAgICAgICBvcHRpb25zLmZpbHRlclJvd0NvbXBhcmF0b3IgPSBvcHRpb25zLmZpbHRlclJvd0NvbXBhcmF0b3IgfHwgdW5kZWZpbmVkOwoKICAgICAgICBvcHRpb25zLnZpZXdTY2FsZSA9IG9wdGlvbnMudmlld1NjYWxlIHx8ICdkYXknOwogICAgICAgIG9wdGlvbnMuY29sdW1uTWFnbmV0ID0gb3B0aW9ucy5jb2x1bW5NYWduZXQgfHwgJzE1IG1pbnV0ZXMnOwogICAgICAgIG9wdGlvbnMuY29sdW1uV2lkdGggPSBvcHRpb25zLmNvbHVtbldpZHRoIHx8IHVuZGVmaW5lZDsKCiAgICAgICAgb3B0aW9ucy5mcm9tRGF0ZSA9IG9wdGlvbnMuZnJvbURhdGUgfHwgdW5kZWZpbmVkOwogICAgICAgIG9wdGlvbnMudG9EYXRlID0gb3B0aW9ucy50b0RhdGUgfHwgdW5kZWZpbmVkOwoKICAgICAgICBvcHRpb25zLmFsbG93TGFiZWxzUmVzaXppbmcgPSBvcHRpb25zLmFsbG93TGFiZWxzUmVzaXppbmcgIT09IHVuZGVmaW5lZCA/ICEhb3B0aW9ucy5hbGxvd0xhYmVsc1Jlc2l6aW5nIDogdHJ1ZTsKCiAgICAgICAgb3B0aW9ucy5jdXJyZW50RGF0ZSA9IG9wdGlvbnMuY3VycmVudERhdGUgfHwgJ2xpbmUnOwogICAgICAgIG9wdGlvbnMuY3VycmVudERhdGVWYWx1ZSA9IG9wdGlvbnMuY3VycmVudERhdGVWYWx1ZSB8fCBtb21lbnQoKTsKCiAgICAgICAgb3B0aW9ucy5hdXRvRXhwYW5kID0gb3B0aW9ucy5hdXRvRXhwYW5kIHx8ICdub25lJzsKICAgICAgICBvcHRpb25zLnRhc2tPdXRPZlJhbmdlID0gb3B0aW9ucy50YXNrT3V0T2ZSYW5nZSB8fCAndHJ1bmNhdGUnOwoKICAgICAgICBvcHRpb25zLm1heEhlaWdodCA9IG9wdGlvbnMubWF4SGVpZ2h0IHx8IDA7CgogICAgICAgIG9wdGlvbnMubGFiZWxzV2lkdGggPSBvcHRpb25zLmxhYmVsc1dpZHRoIHx8IHVuZGVmaW5lZDsKCiAgICAgICAgb3B0aW9ucy5zaG93TGFiZWxzQ29sdW1uID0gb3B0aW9ucy5zaG93TGFiZWxzQ29sdW1uICE9PSB1bmRlZmluZWQgPyAhIW9wdGlvbnMuc2hvd0xhYmVsc0NvbHVtbiA6IHRydWU7CiAgICAgICAgb3B0aW9ucy5zaG93VG9vbHRpcHMgPSBvcHRpb25zLnNob3dUb29sdGlwcyAhPT0gdW5kZWZpbmVkID8gISFvcHRpb25zLnNob3dUb29sdGlwcyA6IHRydWU7CgogICAgICAgIG9wdGlvbnMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB1bmRlZmluZWQ7CiAgICAgICAgb3B0aW9ucy5oZWFkZXJzRm9ybWF0cyA9IG9wdGlvbnMuaGVhZGVyc0Zvcm1hdHMgfHwgdW5kZWZpbmVkOwoKICAgICAgICBvcHRpb25zLnRpbWVGcmFtZXMgPSBvcHRpb25zLnRpbWVGcmFtZXMgfHwgW107CiAgICAgICAgb3B0aW9ucy5kYXRlRnJhbWVzID0gb3B0aW9ucy5kYXRlRnJhbWVzIHx8IFtdOwoKICAgICAgICBvcHRpb25zLnRpbWVGcmFtZXNXb3JraW5nTW9kZSA9IG9wdGlvbnMudGltZUZyYW1lc1dvcmtpbmdNb2RlIHx8ICdoaWRkZW4nOwogICAgICAgIG9wdGlvbnMudGltZUZyYW1lc05vbldvcmtpbmdNb2RlID0gb3B0aW9ucy50aW1lRnJhbWVzTm9uV29ya2luZ01vZGUgfHwgJ3Zpc2libGUnOwoKICAgICAgICBvcHRpb25zLnRvb2x0aXBEYXRlRm9ybWF0ID0gb3B0aW9ucy50b29sdGlwRGF0ZUZvcm1hdCB8fCAnTU1NIERELCBISDptbSc7CgogICAgICAgIHJldHVybiBvcHRpb25zOwogICAgfQogICAgfTsKfV0pOwoKCi8qKgogKiBDYWxlbmRhciBmYWN0b3J5IGlzIHVzZWQgdG8gZGVmaW5lIHdvcmtpbmcgcGVyaW9kcywgbm9uIHdvcmtpbmcgcGVyaW9kcywgYW5kIG90aGVyIHNwZWNpZmljIHBlcmlvZCBvZiB0aW1lLAogKiBhbmQgcmV0cmlldmUgZWZmZWN0aXZlIHRpbWVGcmFtZXMgZm9yIGVhY2ggZGF5IG9mIHRoZSBnYW50dC4KICovCmdhbnR0LmZhY3RvcnkoJ0dhbnR0Q2FsZW5kYXInLCBbJyRmaWx0ZXInLCBmdW5jdGlvbigkZmlsdGVyKSB7CiAgICAvKioKICAgICAqIFRpbWVGcmFtZSByZXByZXNlbnRzIHRpbWUgZnJhbWUgaW4gYW55IGRheS4gcGFyYW1ldGVycyBhcmUgZ2l2ZW4gdXNpbmcgb3B0aW9ucyBvYmplY3QuCiAgICAgKgogICAgICogQHBhcmFtIHttb21lbnR8c3RyaW5nfSBzdGFydCBzdGFydCBvZiB0aW1lRnJhbWUuIElmIGEgc3RyaW5nIGlzIGdpdmVuLCBpdCB3aWxsIGJlIHBhcnNlZCBhcyBhIG1vbWVudC4KICAgICAqIEBwYXJhbSB7bW9tZW50fHN0cmluZ30gZW5kIGVuZCBvZiB0aW1lRnJhbWUuIElmIGEgc3RyaW5nIGlzIGdpdmVuLCBpdCB3aWxsIGJlIHBhcnNlZCBhcyBhIG1vbWVudC4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gd29ya2luZyBpcyB0aGlzIHRpbWVGcmFtZSBmbGFnZ2VkIGFzIHdvcmtpbmcuCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRlZmF1bHQgaXMgdGhpcyB0aW1lRnJhbWUgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHQuCiAgICAgKiBAcGFyYW0ge2NvbG9yfSBjc3MgY29sb3IgYXR0YWNoZWQgdG8gdGhpcyB0aW1lRnJhbWUuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NlcyBjc3MgY2xhc3NlcyBhdHRhY2hlZCB0byB0aGlzIHRpbWVGcmFtZS4KICAgICAqCiAgICAgKiBAY29uc3RydWN0b3IKICAgICAqLwogICAgdmFyIFRpbWVGcmFtZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTsKICAgICAgICB9CgogICAgICAgIHRoaXMuc3RhcnQgPSBvcHRpb25zLnN0YXJ0OwogICAgICAgIHRoaXMuZW5kID0gb3B0aW9ucy5lbmQ7CiAgICAgICAgdGhpcy53b3JraW5nID0gb3B0aW9ucy53b3JraW5nOwogICAgICAgIHRoaXMuZGVmYXVsdCA9IG9wdGlvbnMuZGVmYXVsdDsKICAgICAgICB0aGlzLmNvbG9yID0gb3B0aW9ucy5jb2xvcjsKICAgICAgICB0aGlzLmNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXM7CiAgICB9OwoKCiAgICBUaW1lRnJhbWUucHJvdG90eXBlLmdldER1cmF0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZW5kLmRpZmYodGhpcy5zdGFydCwgJ21pbGxpc2Vjb25kcycpOwogICAgfTsKCiAgICBUaW1lRnJhbWUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIG5ldyBUaW1lRnJhbWUodGhpcyk7CiAgICB9OwoKICAgIC8qKgogICAgICogVGltZUZyYW1lTWFwcGluZyBkZWZpbmVzIGhvdyB0aW1lRnJhbWVzIHdpbGwgYmUgcGxhY2VkIGZvciBlYWNoIGRheXMuIHBhcmFtZXRlcnMgYXJlIGdpdmVuIHVzaW5nIG9wdGlvbnMgb2JqZWN0LgogICAgICoKICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgYSBmdW5jdGlvbiB3aXRoIGRhdGUgcGFyYW1ldGVyLCB0aGF0IHdpbGwgYmUgZXZhbHVhdGVkIGZvciBlYWNoIGRpc3RpbmN0IGRheSBvZiB0aGUgZ2FudHQuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZnVuY3Rpb24gbXVzdCByZXR1cm4gYW4gYXJyYXkgb2YgdGltZUZyYW1lIG5hbWVzIHRvIGFwcGx5LgogICAgICogQGNvbnN0cnVjdG9yCiAgICAgKi8KICAgIHZhciBUaW1lRnJhbWVNYXBwaW5nID0gZnVuY3Rpb24oZnVuYykgewogICAgICAgIHRoaXMuZnVuYyA9IGZ1bmM7CiAgICB9OwoKICAgIFRpbWVGcmFtZU1hcHBpbmcucHJvdG90eXBlLmdldFRpbWVGcmFtZXMgPSBmdW5jdGlvbihkYXRlKSB7CiAgICAgICAgdmFyIHJldCA9IHRoaXMuZnVuYyhkYXRlKTsKICAgICAgICBpZiAoIShyZXQgaW5zdGFuY2VvZiBBcnJheSkpIHsKICAgICAgICAgICAgcmV0ID0gW3JldF07CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXQ7CiAgICB9OwoKICAgIFRpbWVGcmFtZU1hcHBpbmcucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIG5ldyBUaW1lRnJhbWVNYXBwaW5nKHRoaXMuZnVuYyk7CiAgICB9OwoKICAgIC8qKgogICAgICogQSBEYXRlRnJhbWUgaXMgZGF0ZSByYW5nZSB0aGF0IHdpbGwgdXNlIGEgc3BlY2lmaWMgVGltZUZyYW1lTWFwcGluZywgY29uZmlndXJlZCB1c2luZyBhIGZ1bmN0aW9uIChldmFsdWF0b3IpLAogICAgICogYSBkYXRlIChkYXRlKSBvciBhIGRhdGUgcmFuZ2UgKHN0YXJ0LCBlbmQpLiBwYXJhbWV0ZXJzIGFyZSBnaXZlbiB1c2luZyBvcHRpb25zIG9iamVjdC4KICAgICAqCiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBldmFsdWF0b3IgYSBmdW5jdGlvbiB3aXRoIGRhdGUgcGFyYW1ldGVyLCB0aGF0IHdpbGwgYmUgZXZhbHVhdGVkIGZvciBlYWNoIGRpc3RpbmN0IGRheSBvZiB0aGUgZ2FudHQuCiAgICAgKiAgICAgICAgICAgICAgICAgICB0aGlzIGZ1bmN0aW9uIG11c3QgcmV0dXJuIGEgYm9vbGVhbiByZXByZXNlbnRpbmcgbWF0Y2hpbmcgb2YgdGhpcyBkYXRlRnJhbWUgb3Igbm90LgogICAgICogQHBhcmFtIHttb21lbnR9IGRhdGUgZGF0ZSBvZiBkYXRlRnJhbWUuCiAgICAgKiBAcGFyYW0ge21vbWVudH0gc3RhcnQgc3RhcnQgb2YgZGF0ZSBmcmFtZS4KICAgICAqIEBwYXJhbSB7bW9tZW50fSBlbmQgZW5kIG9mIGRhdGUgZnJhbWUuCiAgICAgKiBAcGFyYW0ge2FycmF5fSB0YXJnZXRzIGFycmF5IG9mIFRpbWVGcmFtZU1hcHBpbmdzL1RpbWVGcmFtZXMgbmFtZXMgdG8gdXNlIGZvciB0aGlzIGRhdGUgZnJhbWUuCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRlZmF1bHQgaXMgdGhpcyBkYXRlRnJhbWUgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHQuCiAgICAgKiBAY29uc3RydWN0b3IKICAgICAqLwogICAgdmFyIERhdGVGcmFtZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgICB0aGlzLmV2YWx1YXRvciA9IG9wdGlvbnMuZXZhbHVhdG9yOwogICAgICAgIGlmIChvcHRpb25zLmRhdGUpIHsKICAgICAgICAgICAgdGhpcy5zdGFydCA9IG1vbWVudChvcHRpb25zLmRhdGUpLnN0YXJ0T2YoJ2RheScpOwogICAgICAgICAgICB0aGlzLmVuZCA9IG1vbWVudChvcHRpb25zLmRhdGUpLmVuZE9mKCdkYXknKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnN0YXJ0ID0gb3B0aW9ucy5zdGFydDsKICAgICAgICAgICAgdGhpcy5lbmQgPSBvcHRpb25zLmVuZDsKICAgICAgICB9CiAgICAgICAgaWYgKG9wdGlvbnMudGFyZ2V0cyBpbnN0YW5jZW9mIEFycmF5KSB7CiAgICAgICAgICAgIHRoaXMudGFyZ2V0cyA9IG9wdGlvbnMudGFyZ2V0czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnRhcmdldHMgPSBbb3B0aW9ucy50YXJnZXRzXTsKICAgICAgICB9CiAgICAgICAgdGhpcy5kZWZhdWx0ID0gb3B0aW9ucy5kZWZhdWx0OwogICAgfTsKCiAgICBEYXRlRnJhbWUucHJvdG90eXBlLmRhdGVNYXRjaCA9IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICBpZiAodGhpcy5ldmFsdWF0b3IpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZhbHVhdG9yKGRhdGUpOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGFydCAmJiB0aGlzLmVuZCkgewogICAgICAgICAgICByZXR1cm4gZGF0ZSA+PSB0aGlzLnN0YXJ0ICYmIGRhdGUgPD0gdGhpcy5lbmQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH07CgogICAgRGF0ZUZyYW1lLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBuZXcgRGF0ZUZyYW1lKHRoaXMpOwogICAgfTsKCgoKICAgIC8qKgogICAgICogUmVnaXN0ZXIgVGltZUZyYW1lLCBUaW1lRnJhbWVNYXBwaW5nIGFuZCBEYXRlTWFwcGluZyBvYmplY3RzIGludG8gQ2FsZW5kYXIgb2JqZWN0LAogICAgICogYW5kIHVzZSBDYWxlbmRhciNnZXRUaW1lRnJhbWVzKGRhdGUpIGZ1bmN0aW9uIHRvIHJldHJpZXZlIGVmZmVjdGl2ZSB0aW1lRnJhbWVzIGZvciBhIHNwZWNpZmljIGRheS4KICAgICAqCiAgICAgKiBAY29uc3RydWN0b3IKICAgICAqLwogICAgdmFyIENhbGVuZGFyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy50aW1lRnJhbWVzID0ge307CiAgICAgICAgdGhpcy50aW1lRnJhbWVNYXBwaW5ncyA9IHt9OwogICAgICAgIHRoaXMuZGF0ZUZyYW1lcyA9IHt9OwogICAgfTsKCiAgICAvKioKICAgICAqIFJlbW92ZSBhbGwgb2JqZWN0cy4KICAgICAqLwogICAgQ2FsZW5kYXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy50aW1lRnJhbWVzID0ge307CiAgICAgICAgdGhpcy50aW1lRnJhbWVNYXBwaW5ncyA9IHt9OwogICAgICAgIHRoaXMuZGF0ZUZyYW1lcyA9IHt9OwogICAgfTsKCiAgICAvKioKICAgICAqIFJlZ2lzdGVyIFRpbWVGcmFtZSBvYmplY3RzLgogICAgICoKICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0aW1lRnJhbWVzIHdpdGggbmFtZXMgb2YgdGltZUZyYW1lcyBmb3Iga2V5cyBhbmQgVGltZUZyYW1lIG9iamVjdHMgZm9yIHZhbHVlcy4KICAgICAqLwogICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlZ2lzdGVyVGltZUZyYW1lcyA9IGZ1bmN0aW9uKHRpbWVGcmFtZXMpIHsKICAgICAgICBhbmd1bGFyLmZvckVhY2godGltZUZyYW1lcywgZnVuY3Rpb24odGltZUZyYW1lLCBuYW1lKSB7CiAgICAgICAgICAgIHRoaXMudGltZUZyYW1lc1tuYW1lXSA9IG5ldyBUaW1lRnJhbWUodGltZUZyYW1lKTsKICAgICAgICB9LCB0aGlzKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBSZW1vdmVzIFRpbWVGcmFtZSBvYmplY3RzLgogICAgICoKICAgICAqIEBwYXJhbSB7YXJyYXl9IHRpbWVGcmFtZXMgbmFtZXMgb2YgdGltZUZyYW1lcyB0byByZW1vdmUuCiAgICAgKi8KICAgIENhbGVuZGFyLnByb3RvdHlwZS5yZW1vdmVUaW1lRnJhbWVzID0gZnVuY3Rpb24odGltZUZyYW1lcykgewogICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aW1lRnJhbWVzLCBmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRpbWVGcmFtZXNbbmFtZV07CiAgICAgICAgfSwgdGhpcyk7CiAgICB9OwoKICAgIC8qKgogICAgICogUmVtb3ZlIGFsbCBUaW1lRnJhbWUgb2JqZWN0cy4KICAgICAqLwogICAgQ2FsZW5kYXIucHJvdG90eXBlLmNsZWFyVGltZUZyYW1lcyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMudGltZUZyYW1lcyA9IHt9OwogICAgfTsKCiAgICAvKioKICAgICAqIFJlZ2lzdGVyIFRpbWVGcmFtZU1hcHBpbmcgb2JqZWN0cy4KICAgICAqCiAgICAgKiBAcGFyYW0ge29iamVjdH0gbWFwcGluZ3Mgb2JqZWN0IHdpdGggbmFtZXMgb2YgdGltZUZyYW1lcyBtYXBwaW5ncyBmb3Iga2V5cyBhbmQgVGltZUZyYW1lTWFwcGluZyBvYmplY3RzIGZvciB2YWx1ZXMuCiAgICAgKi8KICAgIENhbGVuZGFyLnByb3RvdHlwZS5yZWdpc3RlclRpbWVGcmFtZU1hcHBpbmdzID0gZnVuY3Rpb24obWFwcGluZ3MpIHsKICAgICAgICBhbmd1bGFyLmZvckVhY2gobWFwcGluZ3MsIGZ1bmN0aW9uKHRpbWVGcmFtZU1hcHBpbmcsIG5hbWUpIHsKICAgICAgICAgICAgdGhpcy50aW1lRnJhbWVNYXBwaW5nc1tuYW1lXSA9IG5ldyBUaW1lRnJhbWVNYXBwaW5nKHRpbWVGcmFtZU1hcHBpbmcpOwogICAgICAgIH0sIHRoaXMpOwogICAgfTsKCiAgICAvKioKICAgICAqIFJlbW92ZXMgVGltZUZyYW1lTWFwcGluZyBvYmplY3RzLgogICAgICoKICAgICAqIEBwYXJhbSB7YXJyYXl9IG1hcHBpbmdzIG5hbWVzIG9mIHRpbWVGcmFtZSBtYXBwaW5ncyB0byByZW1vdmUuCiAgICAgKi8KICAgIENhbGVuZGFyLnByb3RvdHlwZS5yZW1vdmVUaW1lRnJhbWVNYXBwaW5ncyA9IGZ1bmN0aW9uKG1hcHBpbmdzKSB7CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1hcHBpbmdzLCBmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRpbWVGcmFtZU1hcHBpbmdzW25hbWVdOwogICAgICAgIH0sIHRoaXMpOwogICAgfTsKCiAgICAvKioKICAgICAqIFJlbW92ZXMgYWxsIFRpbWVGcmFtZU1hcHBpbmcgb2JqZWN0cy4KICAgICAqLwogICAgQ2FsZW5kYXIucHJvdG90eXBlLmNsZWFyVGltZUZyYW1lTWFwcGluZ3MgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLnRpbWVGcmFtZU1hcHBpbmdzID0ge307CiAgICB9OwoKICAgIC8qKgogICAgICogUmVnaXN0ZXIgRGF0ZUZyYW1lIG9iamVjdHMuCiAgICAgKgogICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGVGcmFtZXMgb2JqZWN0IHdpdGggbmFtZXMgb2YgZGF0ZUZyYW1lcyBmb3Iga2V5cyBhbmQgRGF0ZUZyYW1lIG9iamVjdHMgZm9yIHZhbHVlcy4KICAgICAqLwogICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlZ2lzdGVyRGF0ZUZyYW1lcyA9IGZ1bmN0aW9uKGRhdGVGcmFtZXMpIHsKICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0ZUZyYW1lcywgZnVuY3Rpb24oZGF0ZUZyYW1lLCBuYW1lKSB7CiAgICAgICAgICAgIHRoaXMuZGF0ZUZyYW1lc1tuYW1lXSA9IG5ldyBEYXRlRnJhbWUoZGF0ZUZyYW1lKTsKICAgICAgICB9LCB0aGlzKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBSZW1vdmUgRGF0ZUZyYW1lIG9iamVjdHMuCiAgICAgKgogICAgICogQHBhcmFtIHthcnJheX0gbWFwcGluZ3MgbmFtZXMgb2YgZGF0ZSBmcmFtZXMgdG8gcmVtb3ZlLgogICAgICovCiAgICBDYWxlbmRhci5wcm90b3R5cGUucmVtb3ZlRGF0ZUZyYW1lcyA9IGZ1bmN0aW9uKGRhdGVGcmFtZXMpIHsKICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0ZUZyYW1lcywgZnVuY3Rpb24obmFtZSkgewogICAgICAgICAgICBkZWxldGUgdGhpcy5kYXRlRnJhbWVzW25hbWVdOwogICAgICAgIH0sIHRoaXMpOwogICAgfTsKCiAgICAvKioKICAgICAqIFJlbW92ZXMgYWxsIERhdGVGcmFtZSBvYmplY3RzLgogICAgICovCiAgICBDYWxlbmRhci5wcm90b3R5cGUuY2xlYXJEYXRlRnJhbWVzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy5kYXRlRnJhbWVzID0ge307CiAgICB9OwoKICAgIHZhciBmaWx0ZXJEYXRlRnJhbWVzID0gZnVuY3Rpb24oaW5wdXREYXRlRnJhbWVzLCBkYXRlKSB7CiAgICAgICAgdmFyIGRhdGVGcmFtZXMgPSBbXTsKICAgICAgICBhbmd1bGFyLmZvckVhY2goaW5wdXREYXRlRnJhbWVzLCBmdW5jdGlvbihkYXRlRnJhbWUpIHsKICAgICAgICAgICAgaWYgKGRhdGVGcmFtZS5kYXRlTWF0Y2goZGF0ZSkpIHsKICAgICAgICAgICAgICAgIGRhdGVGcmFtZXMucHVzaChkYXRlRnJhbWUpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgaWYgKGRhdGVGcmFtZXMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpbnB1dERhdGVGcmFtZXMsIGZ1bmN0aW9uKGRhdGVGcmFtZSkgewogICAgICAgICAgICAgICAgaWYgKGRhdGVGcmFtZS5kZWZhdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgZGF0ZUZyYW1lcy5wdXNoKGRhdGVGcmFtZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZGF0ZUZyYW1lczsKICAgIH07CgogICAgLyoqCiAgICAgKiBSZXRyaWV2ZXMgVGltZUZyYW1lIG9iamVjdHMgZm9yIGEgZ2l2ZW4gZGF0ZSwgdXNpbmcgd2hvbGUgY29uZmlndXJhdGlvbiBmb3IgdGhpcyBDYWxlbmRhciBvYmplY3QuCiAgICAgKgogICAgICogQHBhcmFtIHttb21lbnR9IGRhdGUKICAgICAqCiAgICAgKiBAcmV0dXJuIHthcnJheX0gYW4gYXJyYXkgb2YgVGltZUZyYW1lIG9iamVjdHMuCiAgICAgKi8KICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXRUaW1lRnJhbWVzID0gZnVuY3Rpb24oZGF0ZSkgewogICAgICAgIHZhciB0aW1lRnJhbWVzID0gW107CiAgICAgICAgdmFyIGRhdGVGcmFtZXMgPSBmaWx0ZXJEYXRlRnJhbWVzKHRoaXMuZGF0ZUZyYW1lcywgZGF0ZSk7CgogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChkYXRlRnJhbWVzLCBmdW5jdGlvbihkYXRlRnJhbWUpIHsKICAgICAgICAgICAgaWYgKGRhdGVGcmFtZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0ZUZyYW1lLnRhcmdldHMsIGZ1bmN0aW9uKHRpbWVGcmFtZU1hcHBpbmdOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVGcmFtZU1hcHBpbmcgPSB0aGlzLnRpbWVGcmFtZU1hcHBpbmdzW3RpbWVGcmFtZU1hcHBpbmdOYW1lXTsKICAgICAgICAgICAgICAgICAgICBpZiAodGltZUZyYW1lTWFwcGluZyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGEgdGltZUZyYW1lIG1hcHBpbmcgaXMgZm91bmQKICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZyYW1lcy5wdXNoKHRpbWVGcmFtZU1hcHBpbmcuZ2V0VGltZUZyYW1lcygpKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBubyB0aW1lRnJhbWUgbWFwcGluZyBpcyBmb3VuZCwgdHJ5IHVzaW5nIGRpcmVjdCB0aW1lRnJhbWUKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVGcmFtZSA9IHRoaXMudGltZUZyYW1lc1t0aW1lRnJhbWVNYXBwaW5nTmFtZV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lRnJhbWUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZyYW1lcy5wdXNoKHRpbWVGcmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgfQogICAgICAgIH0sIHRoaXMpOwoKICAgICAgICB2YXIgZGF0ZVllYXIgPSBkYXRlLnllYXIoKTsKICAgICAgICB2YXIgZGF0ZU1vbnRoID0gZGF0ZS5tb250aCgpOwogICAgICAgIHZhciBkYXRlRGF0ZSA9IGRhdGUuZGF0ZSgpOwoKICAgICAgICB2YXIgdmFsaWRhdGVkVGltZUZyYW1lcyA9IFtdOwogICAgICAgIGlmICh0aW1lRnJhbWVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godGhpcy50aW1lRnJhbWVzLCBmdW5jdGlvbih0aW1lRnJhbWUpIHsKICAgICAgICAgICAgICAgIGlmICh0aW1lRnJhbWUuZGVmYXVsdCkgewogICAgICAgICAgICAgICAgICAgIHRpbWVGcmFtZXMucHVzaCh0aW1lRnJhbWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aW1lRnJhbWVzLCBmdW5jdGlvbih0aW1lRnJhbWUpIHsKICAgICAgICAgICAgdGltZUZyYW1lID0gdGltZUZyYW1lLmNsb25lKCk7CgogICAgICAgICAgICBpZiAodGltZUZyYW1lLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHRpbWVGcmFtZS5zdGFydC55ZWFyKGRhdGVZZWFyKTsKICAgICAgICAgICAgICAgIHRpbWVGcmFtZS5zdGFydC5tb250aChkYXRlTW9udGgpOwogICAgICAgICAgICAgICAgdGltZUZyYW1lLnN0YXJ0LmRhdGUoZGF0ZURhdGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodGltZUZyYW1lLmVuZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICB0aW1lRnJhbWUuZW5kLnllYXIoZGF0ZVllYXIpOwogICAgICAgICAgICAgICAgdGltZUZyYW1lLmVuZC5tb250aChkYXRlTW9udGgpOwogICAgICAgICAgICAgICAgdGltZUZyYW1lLmVuZC5kYXRlKGRhdGVEYXRlKTsKCiAgICAgICAgICAgICAgICBpZiAobW9tZW50KHRpbWVGcmFtZS5lbmQpLnN0YXJ0T2YoJ2RheScpID09PSB0aW1lRnJhbWUuZW5kKSB7CiAgICAgICAgICAgICAgICAgICAgdGltZUZyYW1lLmVuZC5hZGQoMSwgJ2RheScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICB2YWxpZGF0ZWRUaW1lRnJhbWVzLnB1c2godGltZUZyYW1lKTsKICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZFRpbWVGcmFtZXM7CiAgICB9OwoKICAgIC8qKgogICAgICogU29sdmUgdGltZUZyYW1lcyB1c2luZyB0d28gcnVsZXMuCiAgICAgKgogICAgICogMSkgSWYgYXQgbGVhc3Qgb25lIHdvcmtpbmcgdGltZUZyYW1lIGlzIGRlZmluZWQsIGV2ZXJ5dGhpbmcgb3V0c2lkZQogICAgICogZGVmaW5lZCB0aW1lRnJhbWVzIGlzIGNvbnNpZGVyZWQgYXMgbm9uLXdvcmtpbmcuIEVsc2UgaXQncyBjb25zaWRlcmVkCiAgICAgKiBhcyB3b3JraW5nLgogICAgICoKICAgICAqIDIpIFNtYWxsZXIgdGltZUZyYW1lcyBoYXZlIHByaW9yaXR5IG92ZXIgbGFyZ2VyIG9uZS4KICAgICAqCiAgICAgKiBAcGFyYW0ge2FycmF5fSB0aW1lRnJhbWVzIEFycmF5IG9mIHRpbWVGcmFtZXMgdG8gc29sdmUKICAgICAqIEBwYXJhbSB7bW9tZW50fSBzdGFydERhdGUKICAgICAqIEBwYXJhbSB7bW9tZW50fSBlbmREYXRlCiAgICAgKi8KICAgIENhbGVuZGFyLnByb3RvdHlwZS5zb2x2ZSA9IGZ1bmN0aW9uKHRpbWVGcmFtZXMsIHN0YXJ0RGF0ZSwgZW5kRGF0ZSkgewogICAgICAgIHZhciBkZWZhdWx0V29ya2luZyA9IHRpbWVGcmFtZXMubGVuZ3RoID09PSAwOwogICAgICAgIHZhciBjb2xvcjsKICAgICAgICB2YXIgY2xhc3NlczsKICAgICAgICB2YXIgbWluRGF0ZTsKICAgICAgICB2YXIgbWF4RGF0ZTsKCiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRpbWVGcmFtZXMsIGZ1bmN0aW9uKHRpbWVGcmFtZSkgewogICAgICAgICAgICBpZiAobWluRGF0ZSA9PT0gdW5kZWZpbmVkIHx8IG1pbkRhdGUgPiB0aW1lRnJhbWUuc3RhcnQpIHsKICAgICAgICAgICAgICAgIG1pbkRhdGUgPSB0aW1lRnJhbWUuc3RhcnQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG1heERhdGUgPT09IHVuZGVmaW5lZCB8fCBtYXhEYXRlIDwgdGltZUZyYW1lLmVuZCkgewogICAgICAgICAgICAgICAgbWF4RGF0ZSA9IHRpbWVGcmFtZS5lbmQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGNvbG9yID09PSB1bmRlZmluZWQgJiYgdGltZUZyYW1lLmNvbG9yKSB7CiAgICAgICAgICAgICAgICBjb2xvciA9IHRpbWVGcmFtZS5jb2xvcjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGltZUZyYW1lLmNsYXNzZXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBbXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLmNvbmNhdCh0aW1lRnJhbWUuY2xhc3Nlcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgaWYgKHN0YXJ0RGF0ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IG1pbkRhdGU7CiAgICAgICAgfQoKICAgICAgICBpZiAoZW5kRGF0ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGVuZERhdGUgPSBtYXhEYXRlOwogICAgICAgIH0KCiAgICAgICAgdmFyIHNvbHZlZFRpbWVGcmFtZXMgPSBbbmV3IFRpbWVGcmFtZSh7c3RhcnQ6IHN0YXJ0RGF0ZSwgZW5kOiBlbmREYXRlLCB3b3JraW5nOiBkZWZhdWx0V29ya2luZywgY29sb3I6IGNvbG9yLCBjbGFzc2VzOiBjbGFzc2VzfSldOwoKICAgICAgICB2YXIgb3JkZXJlZFRpbWVGcmFtZXMgPSAkZmlsdGVyKCdvcmRlckJ5JykodGltZUZyYW1lcywgZnVuY3Rpb24odGltZUZyYW1lKSB7CiAgICAgICAgICAgIHJldHVybiAtdGltZUZyYW1lLmdldER1cmF0aW9uKCk7CiAgICAgICAgfSk7CgogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChvcmRlcmVkVGltZUZyYW1lcywgZnVuY3Rpb24odGltZUZyYW1lKSB7CiAgICAgICAgICAgIHZhciB0bXBTb2x2ZWRUaW1lRnJhbWVzID0gc29sdmVkVGltZUZyYW1lcy5zbGljZSgpOwoKICAgICAgICAgICAgdmFyIGk9MDsKICAgICAgICAgICAgdmFyIGRpc3BhdGNoZWQgPSBmYWxzZTsKICAgICAgICAgICAgdmFyIHRyZWF0ZWQgPSBmYWxzZTsKICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNvbHZlZFRpbWVGcmFtZXMsIGZ1bmN0aW9uKHNvbHZlZFRpbWVGcmFtZSkgewogICAgICAgICAgICAgICAgaWYgKCF0cmVhdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVGcmFtZS5lbmQgPiBzb2x2ZWRUaW1lRnJhbWUuc3RhcnQgJiYgdGltZUZyYW1lLnN0YXJ0IDwgc29sdmVkVGltZUZyYW1lLmVuZCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW1lRnJhbWUgaXMgaW5jbHVkZWQgaW4gdGhpcyBzb2x2ZWRUaW1lRnJhbWUuCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvbHZlZFRpbWVGcmFtZTp8c3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3wKICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgdGltZUZyYW1lOiAgICAgICAgICB8dHR0dHR0fAogICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICByZXN1bHQ6fHNzc3Nzc3Nzc3x0dHR0dHR8c3Nzc3Nzc3Nzc3Nzc3Nzc3N8CgogICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUgPSB0aW1lRnJhbWUuY2xvbmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1NvbHZlZFRpbWVGcmFtZSA9IHNvbHZlZFRpbWVGcmFtZS5jbG9uZSgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgc29sdmVkVGltZUZyYW1lLmVuZCA9IG1vbWVudCh0aW1lRnJhbWUuc3RhcnQpOwogICAgICAgICAgICAgICAgICAgICAgICBuZXdTb2x2ZWRUaW1lRnJhbWUuc3RhcnQgPSBtb21lbnQodGltZUZyYW1lLmVuZCk7CgogICAgICAgICAgICAgICAgICAgICAgICB0bXBTb2x2ZWRUaW1lRnJhbWVzLnNwbGljZShpICsgMSwgMCwgdGltZUZyYW1lLmNsb25lKCksIG5ld1NvbHZlZFRpbWVGcmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWF0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRpc3BhdGNoZWQgJiYgdGltZUZyYW1lLnN0YXJ0IDwgc29sdmVkVGltZUZyYW1lLmVuZCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW1lRnJhbWUgaXMgZGlzcGF0Y2hlZCBvbiB0d28gc29sdmVkVGltZUZyYW1lLgogICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJzdCBwYXJ0CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvbHZlZFRpbWVGcmFtZTp8c3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3N8cysxO3MrMTtzKzE7cysxO3MrMTtzKzF8CiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgIHRpbWVGcmFtZTogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx0dHR0dHR8CiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgIHJlc3VsdDp8c3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3x0dHR0dHR8O3MrMTtzKzE7cysxO3MrMTtzKzF8CgogICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUgPSB0aW1lRnJhbWUuY2xvbmUoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHNvbHZlZFRpbWVGcmFtZS5lbmQgPSBtb21lbnQodGltZUZyYW1lLnN0YXJ0KTsKICAgICAgICAgICAgICAgICAgICAgICAgdG1wU29sdmVkVGltZUZyYW1lcy5zcGxpY2UoaSArIDEsIDAsIHRpbWVGcmFtZSk7CgogICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRpc3BhdGNoZWQgJiYgdGltZUZyYW1lLmVuZCA+IHNvbHZlZFRpbWVGcmFtZS5zdGFydCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyB0aW1lRnJhbWUgaXMgZGlzcGF0Y2hlZCBvbiB0d28gc29sdmVkVGltZUZyYW1lLgogICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWNvbmQgcGFydAoKICAgICAgICAgICAgICAgICAgICAgICAgc29sdmVkVGltZUZyYW1lLnN0YXJ0ID0gbW9tZW50KHRpbWVGcmFtZS5lbmQpOwogICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWF0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpKys7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgc29sdmVkVGltZUZyYW1lcyA9IHRtcFNvbHZlZFRpbWVGcmFtZXM7CiAgICAgICAgfSk7CgogICAgICAgIHNvbHZlZFRpbWVGcmFtZXMgPSAkZmlsdGVyKCdmaWx0ZXInKShzb2x2ZWRUaW1lRnJhbWVzLCBmdW5jdGlvbih0aW1lRnJhbWUpIHsKICAgICAgICAgICAgcmV0dXJuICh0aW1lRnJhbWUuc3RhcnQgPT09IHVuZGVmaW5lZCB8fCB0aW1lRnJhbWUuc3RhcnQgPCBlbmREYXRlKSAmJiAodGltZUZyYW1lLmVuZCA9PT0gdW5kZWZpbmVkIHx8IHRpbWVGcmFtZS5lbmQgPiBzdGFydERhdGUpOwogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gc29sdmVkVGltZUZyYW1lczsKCiAgICB9OwoKICAgIHJldHVybiBDYWxlbmRhcjsKfV0pOwoKCmdhbnR0LmZhY3RvcnkoJ0dhbnR0Q3VycmVudERhdGVNYW5hZ2VyJywgW2Z1bmN0aW9uKCkgewogICAgdmFyIEdhbnR0Q3VycmVudERhdGVNYW5hZ2VyID0gZnVuY3Rpb24oZ2FudHQpIHsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICAgIHRoaXMuZ2FudHQgPSBnYW50dDsKCiAgICAgICAgdGhpcy5kYXRlID0gdW5kZWZpbmVkOwogICAgICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy5jdXJyZW50RGF0ZUNvbHVtbiA9IHVuZGVmaW5lZDsKCiAgICAgICAgdGhpcy5nYW50dC4kc2NvcGUuJHdhdGNoR3JvdXAoWydjdXJyZW50RGF0ZScsICdjdXJyZW50RGF0ZVZhbHVlJ10sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzZWxmLnNldEN1cnJlbnREYXRlKHNlbGYuZ2FudHQuJHNjb3BlLmN1cnJlbnREYXRlVmFsdWUpOwogICAgICAgIH0pOwogICAgfTsKCiAgICBHYW50dEN1cnJlbnREYXRlTWFuYWdlci5wcm90b3R5cGUuc2V0Q3VycmVudERhdGUgPSBmdW5jdGlvbihjdXJyZW50RGF0ZSkgewogICAgICAgIHRoaXMuZGF0ZSA9IGN1cnJlbnREYXRlOwogICAgICAgIGlmICh0aGlzLmN1cnJlbnREYXRlQ29sdW1uICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZUNvbHVtbi5jdXJyZW50RGF0ZSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgZGVsZXRlIHRoaXMuY3VycmVudERhdGVDb2x1bW47CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5kYXRlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuZ2FudHQuY29sdW1uc01hbmFnZXIuZ2V0Q29sdW1uQnlEYXRlKHRoaXMuZGF0ZSk7CiAgICAgICAgICAgIGlmIChjb2x1bW4gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgY29sdW1uLmN1cnJlbnREYXRlID0gdGhpcy5kYXRlOwogICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZUNvbHVtbiA9IGNvbHVtbjsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuZ2FudHQuZ2V0UG9zaXRpb25CeURhdGUodGhpcy5kYXRlKTsKICAgIH07CiAgICByZXR1cm4gR2FudHRDdXJyZW50RGF0ZU1hbmFnZXI7Cn1dKTsKCgpnYW50dC5mYWN0b3J5KCdHYW50dENvbHVtbicsIFsgJ21vbWVudCcsIGZ1bmN0aW9uKG1vbWVudCkgewogICAgLy8gVXNlZCB0byBkaXNwbGF5IHRoZSBHYW50dCBncmlkIGFuZCBoZWFkZXIuCiAgICAvLyBUaGUgY29sdW1ucyBhcmUgZ2VuZXJhdGVkIGJ5IHRoZSBjb2x1bW4gZ2VuZXJhdG9yLgogICAgdmFyIENvbHVtbiA9IGZ1bmN0aW9uKGRhdGUsIGVuZERhdGUsIGxlZnQsIHdpZHRoLCBjYWxlbmRhciwgdGltZUZyYW1lc1dvcmtpbmdNb2RlLCB0aW1lRnJhbWVzTm9uV29ya2luZ01vZGUsIGNvbHVtbk1hZ25ldFZhbHVlLCBjb2x1bW5NYWduZXRVbml0KSB7CiAgICAgICAgdGhpcy5kYXRlID0gZGF0ZTsKICAgICAgICB0aGlzLmVuZERhdGUgPSBlbmREYXRlOwogICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7CiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoOwogICAgICAgIHRoaXMuY2FsZW5kYXIgPSBjYWxlbmRhcjsKICAgICAgICB0aGlzLmR1cmF0aW9uID0gdGhpcy5lbmREYXRlLmRpZmYodGhpcy5kYXRlLCAnbWlsbGlzZWNvbmRzJyk7CiAgICAgICAgdGhpcy50aW1lRnJhbWVzV29ya2luZ01vZGUgPSB0aW1lRnJhbWVzV29ya2luZ01vZGU7CiAgICAgICAgdGhpcy50aW1lRnJhbWVzTm9uV29ya2luZ01vZGUgPSB0aW1lRnJhbWVzTm9uV29ya2luZ01vZGU7CiAgICAgICAgdGhpcy50aW1lRnJhbWVzID0gW107CiAgICAgICAgdGhpcy52aXNpYmxlVGltZUZyYW1lcyA9IFtdOwogICAgICAgIHRoaXMuZGF5c1RpbWVGcmFtZXMgPSB7fTsKICAgICAgICB0aGlzLmNyb3BwZWQgPSBmYWxzZTsKICAgICAgICB0aGlzLmNvbHVtbk1hZ25ldFZhbHVlID0gY29sdW1uTWFnbmV0VmFsdWU7CiAgICAgICAgdGhpcy5jb2x1bW5NYWduZXRVbml0ID0gY29sdW1uTWFnbmV0VW5pdDsKICAgICAgICB0aGlzLm9yaWdpbmFsU2l6ZSA9IHtsZWZ0OiB0aGlzLmxlZnQsIHdpZHRoOiB0aGlzLndpZHRofTsKICAgICAgICB0aGlzLnVwZGF0ZVRpbWVGcmFtZXMoKTsKICAgIH07CgogICAgdmFyIGdldERhdGVLZXkgPSBmdW5jdGlvbihkYXRlKSB7CiAgICAgICAgcmV0dXJuIGRhdGUueWVhcigpICsgJy0nICsgZGF0ZS5tb250aCgpICsgJy0nICsgZGF0ZS5kYXRlKCk7CiAgICB9OwoKICAgIENvbHVtbi5wcm90b3R5cGUudXBkYXRlVGltZUZyYW1lcyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAgICAgaWYgKHNlbGYuY2FsZW5kYXIgIT09IHVuZGVmaW5lZCAmJiAoc2VsZi50aW1lRnJhbWVzTm9uV29ya2luZ01vZGUgIT09ICdoaWRkZW4nIHx8IHNlbGYudGltZUZyYW1lc1dvcmtpbmdNb2RlICE9PSAnaGlkZGVuJykpIHsKICAgICAgICAgICAgdmFyIGJ1aWxkUHVzaFRpbWVGcmFtZXMgPSBmdW5jdGlvbih0aW1lRnJhbWVzLCBzdGFydERhdGUsIGVuZERhdGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0aW1lRnJhbWUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSB0aW1lRnJhbWUuc3RhcnQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydERhdGU7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB2YXIgZW5kID0gdGltZUZyYW1lLmVuZDsKICAgICAgICAgICAgICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gZW5kRGF0ZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChzdGFydCA8IHNlbGYuZGF0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHNlbGYuZGF0ZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPiBzZWxmLmVuZERhdGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gc2VsZi5lbmREYXRlOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdGltZUZyYW1lID0gdGltZUZyYW1lLmNsb25lKCk7CgogICAgICAgICAgICAgICAgICAgIHRpbWVGcmFtZS5zdGFydCA9IG1vbWVudChzdGFydCk7CiAgICAgICAgICAgICAgICAgICAgdGltZUZyYW1lLmVuZCA9IG1vbWVudChlbmQpOwoKICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWVzLnB1c2godGltZUZyYW1lKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH07CgogICAgICAgICAgICB2YXIgY0RhdGUgPSBzZWxmLmRhdGU7CiAgICAgICAgICAgIHZhciBjRGF0ZVN0YXJ0T2ZEYXkgPSBtb21lbnQoY0RhdGUpLnN0YXJ0T2YoJ2RheScpOwogICAgICAgICAgICB2YXIgY0RhdGVOZXh0RGF5ID0gY0RhdGVTdGFydE9mRGF5LmFkZCgxLCAnZGF5Jyk7CiAgICAgICAgICAgIHdoaWxlIChjRGF0ZSA8IHNlbGYuZW5kRGF0ZSkgewogICAgICAgICAgICAgICAgdmFyIHRpbWVGcmFtZXMgPSBzZWxmLmNhbGVuZGFyLmdldFRpbWVGcmFtZXMoY0RhdGUpOwogICAgICAgICAgICAgICAgdmFyIG5leHRDRGF0ZSA9IG1vbWVudC5taW4oY0RhdGVOZXh0RGF5LCBzZWxmLmVuZERhdGUpOwogICAgICAgICAgICAgICAgdGltZUZyYW1lcyA9IHNlbGYuY2FsZW5kYXIuc29sdmUodGltZUZyYW1lcywgY0RhdGUsIG5leHRDRGF0ZSk7CiAgICAgICAgICAgICAgICB2YXIgY1RpbWVGcmFtZXMgPSBbXTsKICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aW1lRnJhbWVzLCBidWlsZFB1c2hUaW1lRnJhbWVzKGNUaW1lRnJhbWVzLCBjRGF0ZSwgbmV4dENEYXRlKSk7CiAgICAgICAgICAgICAgICBzZWxmLnRpbWVGcmFtZXMgPSBzZWxmLnRpbWVGcmFtZXMuY29uY2F0KGNUaW1lRnJhbWVzKTsKCiAgICAgICAgICAgICAgICB2YXIgY0RhdGVLZXkgPSBnZXREYXRlS2V5KGNEYXRlKTsKICAgICAgICAgICAgICAgIHNlbGYuZGF5c1RpbWVGcmFtZXNbY0RhdGVLZXldID0gY1RpbWVGcmFtZXM7CgogICAgICAgICAgICAgICAgY0RhdGUgPSBuZXh0Q0RhdGU7CiAgICAgICAgICAgICAgICBjRGF0ZVN0YXJ0T2ZEYXkgPSBtb21lbnQoY0RhdGUpLnN0YXJ0T2YoJ2RheScpOwogICAgICAgICAgICAgICAgY0RhdGVOZXh0RGF5ID0gY0RhdGVTdGFydE9mRGF5LmFkZCgxLCAnZGF5Jyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZWxmLnRpbWVGcmFtZXMsIGZ1bmN0aW9uKHRpbWVGcmFtZSkgewogICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uRHVyYXRpb24gPSB0aW1lRnJhbWUuc3RhcnQuZGlmZihzZWxmLmRhdGUsICdtaWxsaXNlY29uZHMnKTsKICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHBvc2l0aW9uRHVyYXRpb24gLyBzZWxmLmR1cmF0aW9uICogc2VsZi53aWR0aDsKCiAgICAgICAgICAgICAgICB2YXIgdGltZUZyYW1lRHVyYXRpb24gPSB0aW1lRnJhbWUuZW5kLmRpZmYodGltZUZyYW1lLnN0YXJ0LCAnbWlsbGlzZWNvbmRzJyk7CiAgICAgICAgICAgICAgICB2YXIgdGltZUZyYW1lUG9zaXRpb24gPSB0aW1lRnJhbWVEdXJhdGlvbiAvIHNlbGYuZHVyYXRpb24gKiBzZWxmLndpZHRoOwoKICAgICAgICAgICAgICAgIHZhciBoaWRkZW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmICh0aW1lRnJhbWUud29ya2luZyAmJiBzZWxmLnRpbWVGcmFtZXNXb3JraW5nTW9kZSAhPT0gJ3Zpc2libGUnKSB7CiAgICAgICAgICAgICAgICAgICAgaGlkZGVuID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRpbWVGcmFtZS53b3JraW5nICYmIHNlbGYudGltZUZyYW1lc05vbldvcmtpbmdNb2RlICE9PSAndmlzaWJsZScpIHsKICAgICAgICAgICAgICAgICAgICBoaWRkZW4gPSB0cnVlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghaGlkZGVuKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZi52aXNpYmxlVGltZUZyYW1lcy5wdXNoKHRpbWVGcmFtZSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGltZUZyYW1lLmhpZGRlbiA9IGhpZGRlbjsKICAgICAgICAgICAgICAgIHRpbWVGcmFtZS5sZWZ0ID0gcG9zaXRpb247CiAgICAgICAgICAgICAgICB0aW1lRnJhbWUud2lkdGggPSB0aW1lRnJhbWVQb3NpdGlvbjsKICAgICAgICAgICAgICAgIHRpbWVGcmFtZS5vcmlnaW5hbFNpemUgPSB7bGVmdDogdGltZUZyYW1lLmxlZnQsIHdpZHRoOiB0aW1lRnJhbWUud2lkdGh9OwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChzZWxmLnRpbWVGcmFtZXNOb25Xb3JraW5nTW9kZSA9PT0gJ2Nyb3BwZWQnIHx8IHNlbGYudGltZUZyYW1lc1dvcmtpbmdNb2RlID09PSAnY3JvcHBlZCcpIHsKICAgICAgICAgICAgICAgIHZhciB0aW1lRnJhbWVzV2lkdGggPSAwOwogICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYudGltZUZyYW1lcywgZnVuY3Rpb24odGltZUZyYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aW1lRnJhbWUud29ya2luZyAmJiBzZWxmLnRpbWVGcmFtZXNOb25Xb3JraW5nTW9kZSAhPT0gJ2Nyb3BwZWQnIHx8CiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGcmFtZS53b3JraW5nICYmIHNlbGYudGltZUZyYW1lc1dvcmtpbmdNb2RlICE9PSAnY3JvcHBlZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZyYW1lc1dpZHRoICs9IHRpbWVGcmFtZS53aWR0aDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAodGltZUZyYW1lc1dpZHRoICE9PSBzZWxmLndpZHRoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNyb3BwZWRSYXRpbyA9IHNlbGYud2lkdGggLyB0aW1lRnJhbWVzV2lkdGg7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNyb3BwZWRXaWR0aCA9IDA7CiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsQ3JvcHBlZFdpZHRoID0gMDsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGFsbENyb3BwZWQgPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VsZi50aW1lRnJhbWVzLCBmdW5jdGlvbih0aW1lRnJhbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aW1lRnJhbWUud29ya2luZyAmJiBzZWxmLnRpbWVGcmFtZXNOb25Xb3JraW5nTW9kZSAhPT0gJ2Nyb3BwZWQnIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUud29ya2luZyAmJiBzZWxmLnRpbWVGcmFtZXNXb3JraW5nTW9kZSAhPT0gJ2Nyb3BwZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUubGVmdCA9ICh0aW1lRnJhbWUubGVmdCAtIGNyb3BwZWRXaWR0aCkgKiBjcm9wcGVkUmF0aW87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUud2lkdGggPSB0aW1lRnJhbWUud2lkdGggKiBjcm9wcGVkUmF0aW87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUub3JpZ2luYWxTaXplLmxlZnQgPSAodGltZUZyYW1lLm9yaWdpbmFsU2l6ZS5sZWZ0IC0gb3JpZ2luYWxDcm9wcGVkV2lkdGgpICogY3JvcHBlZFJhdGlvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZyYW1lLm9yaWdpbmFsU2l6ZS53aWR0aCA9IHRpbWVGcmFtZS5vcmlnaW5hbFNpemUud2lkdGggKiBjcm9wcGVkUmF0aW87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUuY3JvcHBlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ3JvcHBlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JvcHBlZFdpZHRoICs9IHRpbWVGcmFtZS53aWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsQ3JvcHBlZFdpZHRoICs9IHRpbWVGcmFtZS5vcmlnaW5hbFNpemUud2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUubGVmdCA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGcmFtZS53aWR0aCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUub3JpZ2luYWxTaXplID0ge2xlZnQ6IHVuZGVmaW5lZCwgd2lkdGg6IDB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZyYW1lLmNyb3BwZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIHNlbGYuY3JvcHBlZCA9IGFsbENyb3BwZWQ7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNlbGYuY3JvcHBlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKCiAgICBDb2x1bW4ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIG5ldyBDb2x1bW4obW9tZW50KHRoaXMuZGF0ZSksIG1vbWVudCh0aGlzLmVuZERhdGUpLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgsIHRoaXMuY2FsZW5kYXIpOwogICAgfTsKCiAgICBDb2x1bW4ucHJvdG90eXBlLmNvbnRhaW5zRGF0ZSA9IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICByZXR1cm4gZGF0ZSA+IHRoaXMuZGF0ZSAmJiBkYXRlIDw9IHRoaXMuZW5kRGF0ZTsKICAgIH07CgogICAgQ29sdW1uLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihvdGhlcikgewogICAgICAgIHJldHVybiB0aGlzLmRhdGUgPT09IG90aGVyLmRhdGU7CiAgICB9OwoKICAgIENvbHVtbi5wcm90b3R5cGUuZ2V0TWFnbmV0RGF0ZSA9IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICBpZiAodGhpcy5jb2x1bW5NYWduZXRWYWx1ZSA+IDAgJiYgdGhpcy5jb2x1bW5NYWduZXRVbml0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgZGF0ZSA9IG1vbWVudChkYXRlKTsKICAgICAgICAgICAgdmFyIHZhbHVlID0gZGF0ZS5nZXQodGhpcy5jb2x1bW5NYWduZXRVbml0KTsKICAgICAgICAgICAgdmFyIG1hZ25ldFZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZS90aGlzLmNvbHVtbk1hZ25ldFZhbHVlKSAqIHRoaXMuY29sdW1uTWFnbmV0VmFsdWU7CiAgICAgICAgICAgIGRhdGUuc3RhcnRPZih0aGlzLmNvbHVtbk1hZ25ldFVuaXQpOwogICAgICAgICAgICBkYXRlLnNldCh0aGlzLmNvbHVtbk1hZ25ldFVuaXQsIG1hZ25ldFZhbHVlKTsKICAgICAgICAgICAgcmV0dXJuIGRhdGU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBkYXRlOwogICAgfTsKCiAgICB2YXIgZ2V0RGF0ZUJ5UG9zaXRpb25Vc2luZ1RpbWVGcmFtZXMgPSBmdW5jdGlvbih0aW1lRnJhbWVzLCBwb3NpdGlvbikgewogICAgICAgIGZvciAodmFyIGk9MDsgaSA8IHRpbWVGcmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgLy8gVE9ETzogcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIGNvdWxkIGJlIGRvbmUuCiAgICAgICAgICAgIHZhciB0aW1lRnJhbWUgPSB0aW1lRnJhbWVzW2ldOwogICAgICAgICAgICBpZiAoIXRpbWVGcmFtZS5jcm9wcGVkICYmIHBvc2l0aW9uID49IHRpbWVGcmFtZS5sZWZ0ICYmIHBvc2l0aW9uIDw9IHRpbWVGcmFtZS5sZWZ0ICsgdGltZUZyYW1lLndpZHRoKSB7CiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb25EdXJhdGlvbiA9IHRpbWVGcmFtZS5nZXREdXJhdGlvbigpIC8gdGltZUZyYW1lLndpZHRoICogKHBvc2l0aW9uIC0gdGltZUZyYW1lLmxlZnQpOwogICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBtb21lbnQodGltZUZyYW1lLnN0YXJ0KS5hZGQocG9zaXRpb25EdXJhdGlvbiwgJ21pbGxpc2Vjb25kcycpOwogICAgICAgICAgICAgICAgcmV0dXJuIGRhdGU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwoKICAgIENvbHVtbi5wcm90b3R5cGUuZ2V0RGF0ZUJ5UG9zaXRpb24gPSBmdW5jdGlvbihwb3NpdGlvbiwgbWFnbmV0KSB7CiAgICAgICAgdmFyIHBvc2l0aW9uRHVyYXRpb247CiAgICAgICAgdmFyIGRhdGU7CgogICAgICAgIGlmIChwb3NpdGlvbiA8IDApIHsKICAgICAgICAgICAgcG9zaXRpb24gPSAwOwogICAgICAgIH0KICAgICAgICBpZiAocG9zaXRpb24gPiB0aGlzLndpZHRoKSB7CiAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy53aWR0aDsKICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLnRpbWVGcmFtZXNOb25Xb3JraW5nTW9kZSA9PT0gJ2Nyb3BwZWQnIHx8IHRoaXMudGltZUZyYW1lc1dvcmtpbmdNb2RlID09PSAnY3JvcHBlZCcpIHsKICAgICAgICAgICAgZGF0ZSA9IGdldERhdGVCeVBvc2l0aW9uVXNpbmdUaW1lRnJhbWVzKHRoaXMudGltZUZyYW1lcywgcG9zaXRpb24pOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRhdGUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBwb3NpdGlvbkR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbiAvIHRoaXMud2lkdGggKiBwb3NpdGlvbjsKICAgICAgICAgICAgZGF0ZSA9IG1vbWVudCh0aGlzLmRhdGUpLmFkZChwb3NpdGlvbkR1cmF0aW9uLCAnbWlsbGlzZWNvbmRzJyk7CiAgICAgICAgfQoKICAgICAgICBpZiAobWFnbmV0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE1hZ25ldERhdGUoZGF0ZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZGF0ZTsKICAgIH07CgogICAgQ29sdW1uLnByb3RvdHlwZS5nZXREYXlUaW1lRnJhbWUgPSBmdW5jdGlvbihkYXRlKSB7CiAgICAgICAgdmFyIGR0ZiA9IHRoaXMuZGF5c1RpbWVGcmFtZXNbZ2V0RGF0ZUtleShkYXRlKV07CiAgICAgICAgaWYgKGR0ZiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGR0ZjsKICAgIH07CgogICAgQ29sdW1uLnByb3RvdHlwZS5nZXRQb3NpdGlvbkJ5RGF0ZSA9IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICB2YXIgcG9zaXRpb25EdXJhdGlvbjsKICAgICAgICB2YXIgcG9zaXRpb247CgogICAgICAgIGlmICh0aGlzLnRpbWVGcmFtZXNOb25Xb3JraW5nTW9kZSA9PT0gJ2Nyb3BwZWQnIHx8IHRoaXMudGltZUZyYW1lc1dvcmtpbmdNb2RlID09PSAnY3JvcHBlZCcpIHsKICAgICAgICAgICAgdmFyIGNyb3BwZWREYXRlID0gZGF0ZTsKICAgICAgICAgICAgdmFyIHRpbWVGcmFtZXMgPSB0aGlzLmdldERheVRpbWVGcmFtZShjcm9wcGVkRGF0ZSk7CiAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaSA8IHRpbWVGcmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciB0aW1lRnJhbWUgPSB0aW1lRnJhbWVzW2ldOwogICAgICAgICAgICAgICAgaWYgKGNyb3BwZWREYXRlID49IHRpbWVGcmFtZS5zdGFydCAmJiBjcm9wcGVkRGF0ZSA8PSB0aW1lRnJhbWUuZW5kKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVGcmFtZS5jcm9wcGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lRnJhbWVzLmxlbmd0aCA+IGkrMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JvcHBlZERhdGUgPSB0aW1lRnJhbWVzW2krMV0uc3RhcnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcm9wcGVkRGF0ZSA9IHRpbWVGcmFtZS5lbmQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkR1cmF0aW9uID0gY3JvcHBlZERhdGUuZGlmZih0aW1lRnJhbWUuc3RhcnQsICdtaWxsaXNlY29uZHMnKTsKICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbkR1cmF0aW9uIC8gdGltZUZyYW1lLmdldER1cmF0aW9uKCkgKiB0aW1lRnJhbWUud2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZnQgKyB0aW1lRnJhbWUubGVmdCArIHBvc2l0aW9uOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcG9zaXRpb25EdXJhdGlvbiA9IGRhdGUuZGlmZih0aGlzLmRhdGUsICdtaWxsaXNlY29uZHMnKTsKICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uRHVyYXRpb24gLyB0aGlzLmR1cmF0aW9uICogdGhpcy53aWR0aDsKCiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMCkgewogICAgICAgICAgICBwb3NpdGlvbiA9IDA7CiAgICAgICAgfQoKICAgICAgICBpZiAocG9zaXRpb24gPiB0aGlzLndpZHRoKSB7CiAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy53aWR0aDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLmxlZnQgKyBwb3NpdGlvbjsKICAgIH07CgogICAgcmV0dXJuIENvbHVtbjsKfV0pOwoKCmdhbnR0LmZhY3RvcnkoJ0dhbnR0Q29sdW1uR2VuZXJhdG9yJywgWyAnR2FudHRDb2x1bW4nLCAnbW9tZW50JywgZnVuY3Rpb24oQ29sdW1uLCBtb21lbnQpIHsKICAgIHZhciBDb2x1bW5HZW5lcmF0b3IgPSBmdW5jdGlvbihjb2x1bW5zTWFuYWdlcikgewogICAgICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAgICAgdmFyIGNvbHVtbldpZHRoID0gY29sdW1uc01hbmFnZXIuZ2FudHQuJHNjb3BlLmNvbHVtbldpZHRoOwogICAgICAgIGlmIChjb2x1bW5XaWR0aCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGNvbHVtbldpZHRoID0gMjA7CiAgICAgICAgfQogICAgICAgIHZhciB1bml0ID0gY29sdW1uc01hbmFnZXIuZ2FudHQuJHNjb3BlLnZpZXdTY2FsZTsKICAgICAgICB2YXIgY2FsZW5kYXIgPSBjb2x1bW5zTWFuYWdlci5nYW50dC5jYWxlbmRhcjsKICAgICAgICB2YXIgdGltZUZyYW1lc1dvcmtpbmdNb2RlID0gY29sdW1uc01hbmFnZXIuZ2FudHQuJHNjb3BlLnRpbWVGcmFtZXNXb3JraW5nTW9kZTsKICAgICAgICB2YXIgdGltZUZyYW1lc05vbldvcmtpbmdNb2RlID0gY29sdW1uc01hbmFnZXIuZ2FudHQuJHNjb3BlLnRpbWVGcmFtZXNOb25Xb3JraW5nTW9kZTsKCiAgICAgICAgdmFyIGNvbHVtbk1hZ25ldFZhbHVlOwogICAgICAgIHZhciBjb2x1bW5NYWduZXRVbml0OwoKICAgICAgICBpZiAoY29sdW1uc01hbmFnZXIuZ2FudHQuJHNjb3BlLmNvbHVtbk1hZ25ldCkgewogICAgICAgICAgICB2YXIgc3BsaXR0ZWRDb2x1bW5NYWduZXQgPSBjb2x1bW5zTWFuYWdlci5nYW50dC4kc2NvcGUuY29sdW1uTWFnbmV0LnRyaW0oKS5zcGxpdCgnICcpOwogICAgICAgICAgICBpZiAoc3BsaXR0ZWRDb2x1bW5NYWduZXQubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgY29sdW1uTWFnbmV0VmFsdWUgPSBwYXJzZUludChzcGxpdHRlZENvbHVtbk1hZ25ldFswXSk7CiAgICAgICAgICAgICAgICBjb2x1bW5NYWduZXRVbml0ID0gc3BsaXR0ZWRDb2x1bW5NYWduZXRbc3BsaXR0ZWRDb2x1bW5NYWduZXQubGVuZ3RoLTFdOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBHZW5lcmF0ZXMgb25lIGNvbHVtbiBmb3IgZWFjaCB0aW1lIHVuaXQgYmV0d2VlbiB0aGUgZ2l2ZW4gZnJvbSBhbmQgdG8gZGF0ZS4KICAgICAgICBzZWxmLmdlbmVyYXRlID0gZnVuY3Rpb24oZnJvbSwgdG8sIG1heGltdW1XaWR0aCwgbGVmdE9mZnNldCwgcmV2ZXJzZSkgewogICAgICAgICAgICBpZiAoIXRvICYmICFtYXhpbXVtV2lkdGgpIHsKICAgICAgICAgICAgICAgIHRocm93ICd0byBvciBtYXhpbXVtV2lkdGggbXVzdCBiZSBkZWZpbmVkJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGV4Y2x1ZGVUbyA9IGZhbHNlOwogICAgICAgICAgICBmcm9tID0gbW9tZW50KGZyb20pLnN0YXJ0T2YodW5pdCk7CiAgICAgICAgICAgIGlmICh0bykgewogICAgICAgICAgICAgICAgZXhjbHVkZVRvID0gaXNUb0RhdGVUb0V4Y2x1ZGUodG8pOwogICAgICAgICAgICAgICAgdG8gPSBtb21lbnQodG8pLnN0YXJ0T2YodW5pdCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBkYXRlID0gbW9tZW50KGZyb20pLnN0YXJ0T2YodW5pdCk7CiAgICAgICAgICAgIHZhciBnZW5lcmF0ZWRDb2xzID0gW107CiAgICAgICAgICAgIHZhciBsZWZ0ID0gMDsKCiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgICAgICAgICBpZiAobWF4aW11bVdpZHRoICYmIE1hdGguYWJzKGxlZnQpID4gbWF4aW11bVdpZHRoICsgY29sdW1uV2lkdGgpIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgc3RhcnREYXRlID0gbW9tZW50KGRhdGUpOwogICAgICAgICAgICAgICAgdmFyIGVuZERhdGUgPSBtb21lbnQoc3RhcnREYXRlKS5hZGQoMSwgdW5pdCk7CgogICAgICAgICAgICAgICAgdmFyIGNvbHVtbiA9IG5ldyBDb2x1bW4oc3RhcnREYXRlLCBlbmREYXRlLCBsZWZ0T2Zmc2V0ID8gbGVmdCArIGxlZnRPZmZzZXQgOiBsZWZ0LCBjb2x1bW5XaWR0aCwgY2FsZW5kYXIsIHRpbWVGcmFtZXNXb3JraW5nTW9kZSwgdGltZUZyYW1lc05vbldvcmtpbmdNb2RlLCBjb2x1bW5NYWduZXRWYWx1ZSwgY29sdW1uTWFnbmV0VW5pdCk7CiAgICAgICAgICAgICAgICBpZiAoIWNvbHVtbi5jcm9wcGVkKSB7CiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVkQ29scy5wdXNoKGNvbHVtbik7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJldmVyc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAtPSBjb2x1bW5XaWR0aDsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ICs9IGNvbHVtbldpZHRoOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKHRvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXZlcnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZVRvICYmIGRhdGUgPCB0byB8fCAhZXhjbHVkZVRvICYmIGRhdGUgPD0gdG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGNsdWRlVG8gJiYgZGF0ZSA+IHRvIHx8ICFleGNsdWRlVG8gJiYgZGF0ZSA+PSB0bykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGF0ZS5hZGQocmV2ZXJzZSA/IC0xIDogMSwgdW5pdCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChyZXZlcnNlKSB7CiAgICAgICAgICAgICAgICBpZiAoaXNUb0RhdGVUb0V4Y2x1ZGUoZnJvbSkpIHsKICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZWRDb2xzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBnZW5lcmF0ZWRDb2xzLnJldmVyc2UoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlZENvbHM7CiAgICAgICAgfTsKCiAgICAgICAgLy8gQ29sdW1ucyBhcmUgZ2VuZXJhdGVkIGluY2x1ZGluZyBvciBleGNsdWRpbmcgdGhlIHRvIGRhdGUuCiAgICAgICAgLy8gSWYgdGhlIFRvIGRhdGUgaXMgdGhlIGZpcnN0IGRheSBvZiBtb250aCBhbmQgdGhlIHRpbWUgaXMgMDA6MDAgdGhlbiBubyBuZXcgY29sdW1uIGlzIGdlbmVyYXRlZCBmb3IgdGhpcyBtb250aC4KCiAgICAgICAgdmFyIGlzVG9EYXRlVG9FeGNsdWRlID0gZnVuY3Rpb24odG8pIHsKICAgICAgICAgICAgcmV0dXJuIG1vbWVudCh0bykuYWRkKDEsIHVuaXQpLnN0YXJ0T2YodW5pdCkgPT09IHRvOwogICAgICAgIH07CiAgICB9OwogICAgcmV0dXJuIENvbHVtbkdlbmVyYXRvcjsKfV0pOwoKCmdhbnR0LmZhY3RvcnkoJ0dhbnR0Q29sdW1uSGVhZGVyJywgWyAnbW9tZW50JywgJ0dhbnR0Q29sdW1uJywgZnVuY3Rpb24obW9tZW50LCBDb2x1bW4pIHsKICAgIC8vIFVzZWQgdG8gZGlzcGxheSB0aGUgR2FudHQgZ3JpZCBhbmQgaGVhZGVyLgogICAgLy8gVGhlIGNvbHVtbnMgYXJlIGdlbmVyYXRlZCBieSB0aGUgY29sdW1uIGdlbmVyYXRvci4KCiAgICB2YXIgQ29sdW1uSGVhZGVyID0gZnVuY3Rpb24oZGF0ZSwgdW5pdCwgbGVmdCwgd2lkdGgsIGxhYmVsKSB7CiAgICAgICAgdmFyIHN0YXJ0RGF0ZSA9IG1vbWVudChkYXRlKTsKICAgICAgICB2YXIgZW5kRGF0ZSA9IG1vbWVudChzdGFydERhdGUpLmFkZCgxLCB1bml0KTsKCiAgICAgICAgdmFyIGNvbHVtbiA9IG5ldyBDb2x1bW4oc3RhcnREYXRlLCBlbmREYXRlLCBsZWZ0LCB3aWR0aCk7CiAgICAgICAgY29sdW1uLnVuaXQgPSB1bml0OwogICAgICAgIGNvbHVtbi5sYWJlbCA9IGxhYmVsOwoKICAgICAgICByZXR1cm4gY29sdW1uOwogICAgfTsKICAgIHJldHVybiBDb2x1bW5IZWFkZXI7Cn1dKTsKCgpnYW50dC5mYWN0b3J5KCdHYW50dENvbHVtbnNNYW5hZ2VyJywgWydHYW50dENvbHVtbkdlbmVyYXRvcicsICdHYW50dEhlYWRlckdlbmVyYXRvcicsICckZmlsdGVyJywgJ2dhbnR0TGF5b3V0JywgJ2dhbnR0QmluYXJ5U2VhcmNoJywgZnVuY3Rpb24oQ29sdW1uR2VuZXJhdG9yLCBIZWFkZXJHZW5lcmF0b3IsICRmaWx0ZXIsIGxheW91dCwgYnMpIHsKICAgIHZhciBDb2x1bW5zTWFuYWdlciA9IGZ1bmN0aW9uKGdhbnR0KSB7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgICB0aGlzLmdhbnR0ID0gZ2FudHQ7CgogICAgICAgIHRoaXMuZnJvbSA9IHVuZGVmaW5lZDsKICAgICAgICB0aGlzLnRvID0gdW5kZWZpbmVkOwoKICAgICAgICB0aGlzLmNvbHVtbnMgPSBbXTsKICAgICAgICB0aGlzLnZpc2libGVDb2x1bW5zID0gW107CiAgICAgICAgdGhpcy5wcmV2aW91c0NvbHVtbnMgPSBbXTsKICAgICAgICB0aGlzLm5leHRDb2x1bW5zID0gW107CgogICAgICAgIHRoaXMuaGVhZGVycyA9IHt9OwogICAgICAgIHRoaXMudmlzaWJsZUhlYWRlcnMgPSB7fTsKCiAgICAgICAgdGhpcy5zY3JvbGxBbmNob3IgPSB1bmRlZmluZWQ7CgogICAgICAgIC8vIEFkZCBhIHdhdGNoZXIgaWYgYSB2aWV3IHJlbGF0ZWQgc2V0dGluZyBjaGFuZ2VkIGZyb20gb3V0c2lkZSBvZiB0aGUgR2FudHQuIFVwZGF0ZSB0aGUgZ2FudHQgYWNjb3JkaW5nbHkgaWYgc28uCiAgICAgICAgLy8gQWxsIHRob3NlIGNoYW5nZXMgbmVlZCBhIHJlY2FsY3VsYXRpb24gb2YgdGhlIGhlYWRlciBjb2x1bW5zCiAgICAgICAgdGhpcy5nYW50dC4kc2NvcGUuJHdhdGNoR3JvdXAoWyd2aWV3U2NhbGUnLCAnY29sdW1uV2lkdGgnLCAndGltZUZyYW1lc1dvcmtpbmdNb2RlJywgJ3RpbWVGcmFtZXNOb25Xb3JraW5nTW9kZScsICdjb2x1bW5NYWduZXQnLCAnZnJvbURhdGUnLCAndG9EYXRlJywgJ2F1dG9FeHBhbmQnLCAndGFza091dE9mUmFuZ2UnXSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNlbGYuZ2VuZXJhdGVDb2x1bW5zKCk7CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuZ2FudHQuJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ2hlYWRlcnMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgc2VsZi5nZW5lcmF0ZUNvbHVtbnMoKTsKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5nYW50dC4kc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignaGVhZGVyc0Zvcm1hdHMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgc2VsZi5nZW5lcmF0ZUNvbHVtbnMoKTsKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5nYW50dC4kc2NvcGUuJHdhdGNoR3JvdXAoWydnYW50dEVsZW1lbnRXaWR0aCcsICdsYWJlbHNXaWR0aCcsICdzaG93TGFiZWxzQ29sdW1uJywgJ21heEhlaWdodCddLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgc2VsZi51cGRhdGVDb2x1bW5zTWV0YSgpOwogICAgICAgIH0pOwoKICAgICAgICB0aGlzLmdhbnR0LiRzY29wZS4kd2F0Y2hHcm91cChbJ3Njcm9sbExlZnQnLCAnc2Nyb2xsV2lkdGgnXSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNlbGYudXBkYXRlVmlzaWJsZUNvbHVtbnMoKTsKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5nYW50dC5hcGkuZGF0YS5vbi5sb2FkKHRoaXMuZ2FudHQuJHNjb3BlLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKHNlbGYuZnJvbSA+IHNlbGYuZ2FudHQucm93c01hbmFnZXIuZ2V0RGVmYXVsdEZyb20oKSB8fAogICAgICAgICAgICAgICAgc2VsZi50byA8IHNlbGYuZ2FudHQucm93c01hbmFnZXIuZ2V0RGVmYXVsdFRvKCkpIHsKICAgICAgICAgICAgICAgIHNlbGYuZ2VuZXJhdGVDb2x1bW5zKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNlbGYuZ2FudHQucm93c01hbmFnZXIuc29ydFJvd3MoKTsKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5nYW50dC5hcGkuZGF0YS5vbi5yZW1vdmUodGhpcy5nYW50dC4kc2NvcGUsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzZWxmLmdhbnR0LnJvd3NNYW5hZ2VyLnNvcnRSb3dzKCk7CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuZ2FudHQuYXBpLnJlZ2lzdGVyTWV0aG9kKCdjb2x1bW5zJywgJ2NsZWFyJywgdGhpcy5jbGVhckNvbHVtbnMsIHRoaXMpOwogICAgICAgIHRoaXMuZ2FudHQuYXBpLnJlZ2lzdGVyTWV0aG9kKCdjb2x1bW5zJywgJ2dlbmVyYXRlJywgdGhpcy5nZW5lcmF0ZUNvbHVtbnMsIHRoaXMpOwoKICAgICAgICB0aGlzLmdhbnR0LmFwaS5yZWdpc3RlckV2ZW50KCdjb2x1bW5zJywgJ2dlbmVyYXRlJyk7CiAgICB9OwoKICAgIENvbHVtbnNNYW5hZ2VyLnByb3RvdHlwZS5zZXRTY3JvbGxBbmNob3IgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAodGhpcy5nYW50dC5zY3JvbGwuJGVsZW1lbnQgJiYgdGhpcy5jb2x1bW5zLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgdmFyIGVsID0gdGhpcy5nYW50dC5zY3JvbGwuJGVsZW1lbnRbMF07CiAgICAgICAgICAgIHZhciBjZW50ZXIgPSBlbC5zY3JvbGxMZWZ0ICsgZWwub2Zmc2V0V2lkdGggLyAyOwoKICAgICAgICAgICAgdGhpcy5zY3JvbGxBbmNob3IgPSB0aGlzLmdhbnR0LmdldERhdGVCeVBvc2l0aW9uKGNlbnRlcik7CiAgICAgICAgfQogICAgfTsKCiAgICBDb2x1bW5zTWFuYWdlci5wcm90b3R5cGUuc2Nyb2xsVG9TY3JvbGxBbmNob3IgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICAgIGlmICh0aGlzLmNvbHVtbnMubGVuZ3RoID4gMCAmJiB0aGlzLnNjcm9sbEFuY2hvciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIC8vIFVnbHkgYnV0IHByZXZlbnRzIHNjcmVlbiBmbGlja2VyaW5nICh1bmxpa2UgJHRpbWVvdXQpCiAgICAgICAgICAgIHRoaXMuZ2FudHQuJHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHNlbGYuZ2FudHQuYXBpLnNjcm9sbC50b0RhdGUoc2VsZi5zY3JvbGxBbmNob3IpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9OwoKICAgIENvbHVtbnNNYW5hZ2VyLnByb3RvdHlwZS5jbGVhckNvbHVtbnMgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLnNldFNjcm9sbEFuY2hvcigpOwoKICAgICAgICB0aGlzLmZyb20gPSB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy50byA9IHVuZGVmaW5lZDsKCiAgICAgICAgdGhpcy5jb2x1bW5zID0gW107CiAgICAgICAgdGhpcy52aXNpYmxlQ29sdW1ucyA9IFtdOwogICAgICAgIHRoaXMucHJldmlvdXNDb2x1bW5zID0gW107CiAgICAgICAgdGhpcy5uZXh0Q29sdW1ucyA9IFtdOwoKICAgICAgICB0aGlzLmhlYWRlcnMgPSBbXTsKICAgICAgICB0aGlzLnZpc2libGVIZWFkZXJzID0ge307CgogICAgICAgIHRoaXMuZ2FudHQuYXBpLmNvbHVtbnMucmFpc2UuY2xlYXIoKTsKICAgIH07CgogICAgQ29sdW1uc01hbmFnZXIucHJvdG90eXBlLmdlbmVyYXRlQ29sdW1ucyA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7CiAgICAgICAgaWYgKCFmcm9tKSB7CiAgICAgICAgICAgIGZyb20gPSB0aGlzLmdhbnR0LiRzY29wZS5mcm9tRGF0ZTsKICAgICAgICB9CgogICAgICAgIGlmICghdG8pIHsKICAgICAgICAgICAgdG8gPSB0aGlzLmdhbnR0LiRzY29wZS50b0RhdGU7CiAgICAgICAgfQoKICAgICAgICBpZiAoIWZyb20pIHsKICAgICAgICAgICAgZnJvbSA9IHRoaXMuZ2FudHQucm93c01hbmFnZXIuZ2V0RGVmYXVsdEZyb20oKTsKICAgICAgICAgICAgaWYgKCFmcm9tKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICghdG8pIHsKICAgICAgICAgICAgdG8gPSB0aGlzLmdhbnR0LnJvd3NNYW5hZ2VyLmdldERlZmF1bHRUbygpOwogICAgICAgICAgICBpZiAoIXRvKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLmdhbnR0LiRzY29wZS50YXNrT3V0T2ZSYW5nZSA9PT0gJ2V4cGFuZCcpIHsKICAgICAgICAgICAgZnJvbSA9IHRoaXMuZ2FudHQucm93c01hbmFnZXIuZ2V0RXhwYW5kZWRGcm9tKGZyb20pOwogICAgICAgICAgICB0byA9IHRoaXMuZ2FudHQucm93c01hbmFnZXIuZ2V0RXhwYW5kZWRUbyh0byk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnNldFNjcm9sbEFuY2hvcigpOwoKICAgICAgICB0aGlzLmZyb20gPSBmcm9tOwogICAgICAgIHRoaXMudG8gPSB0bzsKCiAgICAgICAgdmFyIGNvbHVtbkdlbmVyYXRvciA9IG5ldyBDb2x1bW5HZW5lcmF0b3IodGhpcyk7CiAgICAgICAgdmFyIGhlYWRlckdlbmVyYXRvciA9IG5ldyBIZWFkZXJHZW5lcmF0b3IodGhpcyk7CgogICAgICAgIHRoaXMuY29sdW1ucyA9IGNvbHVtbkdlbmVyYXRvci5nZW5lcmF0ZShmcm9tLCB0byk7CiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVyR2VuZXJhdG9yLmdlbmVyYXRlKHRoaXMuY29sdW1ucyk7CiAgICAgICAgdGhpcy5wcmV2aW91c0NvbHVtbnMgPSBbXTsKICAgICAgICB0aGlzLm5leHRDb2x1bW5zID0gW107CgogICAgICAgIHRoaXMudXBkYXRlQ29sdW1uc01ldGEoKTsKICAgICAgICB0aGlzLnNjcm9sbFRvU2Nyb2xsQW5jaG9yKCk7CiAgICAgICAgdGhpcy5nYW50dC5hcGkuY29sdW1ucy5yYWlzZS5nZW5lcmF0ZSh0aGlzLmNvbHVtbnMsIHRoaXMuaGVhZGVycyk7CiAgICB9OwoKICAgIENvbHVtbnNNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVDb2x1bW5zTWV0YSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBsYXN0Q29sdW1uID0gdGhpcy5nZXRMYXN0Q29sdW1uKCk7CiAgICAgICAgdGhpcy5nYW50dC5vcmlnaW5hbFdpZHRoID0gbGFzdENvbHVtbiAhPT0gdW5kZWZpbmVkID8gbGFzdENvbHVtbi5vcmlnaW5hbFNpemUubGVmdCArIGxhc3RDb2x1bW4ub3JpZ2luYWxTaXplLndpZHRoIDogMDsKCiAgICAgICAgaWYgKHRoaXMuZ2FudHQuJHNjb3BlLmNvbHVtbldpZHRoID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdmFyIG5ld1dpZHRoID0gdGhpcy5nYW50dC4kc2NvcGUuZ2FudHRFbGVtZW50V2lkdGggLSAodGhpcy5nYW50dC4kc2NvcGUuc2hvd0xhYmVsc0NvbHVtbiA/IHRoaXMuZ2FudHQuJHNjb3BlLmxhYmVsc1dpZHRoIDogMCk7CgogICAgICAgICAgICBpZiAodGhpcy5nYW50dC4kc2NvcGUubWF4SGVpZ2h0ID4gMCkgewogICAgICAgICAgICAgICAgbmV3V2lkdGggPSBuZXdXaWR0aCAtIGxheW91dC5nZXRTY3JvbGxCYXJXaWR0aCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBsYXlvdXQuc2V0Q29sdW1uc1dpZHRoKG5ld1dpZHRoLCB0aGlzLmdhbnR0Lm9yaWdpbmFsV2lkdGgsIHRoaXMucHJldmlvdXNDb2x1bW5zKTsKICAgICAgICAgICAgbGF5b3V0LnNldENvbHVtbnNXaWR0aChuZXdXaWR0aCwgdGhpcy5nYW50dC5vcmlnaW5hbFdpZHRoLCB0aGlzLmNvbHVtbnMpOwogICAgICAgICAgICBsYXlvdXQuc2V0Q29sdW1uc1dpZHRoKG5ld1dpZHRoLCB0aGlzLmdhbnR0Lm9yaWdpbmFsV2lkdGgsIHRoaXMubmV4dENvbHVtbnMpOwoKICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuaGVhZGVycywgZnVuY3Rpb24oaGVhZGVyKSB7CiAgICAgICAgICAgICAgICBsYXlvdXQuc2V0Q29sdW1uc1dpZHRoKG5ld1dpZHRoLCB0aGlzLmdhbnR0Lm9yaWdpbmFsV2lkdGgsIGhlYWRlcik7CiAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5nYW50dC53aWR0aCA9IGxhc3RDb2x1bW4gIT09IHVuZGVmaW5lZCA/IGxhc3RDb2x1bW4ubGVmdCArIGxhc3RDb2x1bW4ud2lkdGggOiAwOwoKICAgICAgICB0aGlzLmdhbnR0LnJvd3NNYW5hZ2VyLnVwZGF0ZVRhc2tzUG9zQW5kU2l6ZSgpOwogICAgICAgIHRoaXMuZ2FudHQudGltZXNwYW5zTWFuYWdlci51cGRhdGVUaW1lc3BhbnNQb3NBbmRTaXplKCk7CgogICAgICAgIHRoaXMudXBkYXRlVmlzaWJsZUNvbHVtbnMoKTsKICAgICAgICB0aGlzLmdhbnR0LnJvd3NNYW5hZ2VyLnVwZGF0ZVZpc2libGVPYmplY3RzKCk7CgogICAgICAgIHRoaXMuZ2FudHQuY3VycmVudERhdGVNYW5hZ2VyLnNldEN1cnJlbnREYXRlKHRoaXMuZ2FudHQuJHNjb3BlLmN1cnJlbnREYXRlVmFsdWUpOwogICAgfTsKCiAgICAvLyBSZXR1cm5zIHRoZSBsYXN0IEdhbnR0IGNvbHVtbiBvciB1bmRlZmluZWQKICAgIENvbHVtbnNNYW5hZ2VyLnByb3RvdHlwZS5nZXRMYXN0Q29sdW1uID0gZnVuY3Rpb24oZXh0ZW5kZWQpIHsKICAgICAgICB2YXIgY29sdW1ucyA9IHRoaXMuY29sdW1uczsKICAgICAgICBpZiAoZXh0ZW5kZWQpIHsKICAgICAgICAgICAgY29sdW1ucyA9IHRoaXMubmV4dENvbHVtbnM7CiAgICAgICAgfQogICAgICAgIGlmIChjb2x1bW5zICYmIGNvbHVtbnMubGVuZ3RoID4gMCkgewogICAgICAgICAgICByZXR1cm4gY29sdW1uc1tjb2x1bW5zLmxlbmd0aCAtIDFdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgfQogICAgfTsKCiAgICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBHYW50dCBjb2x1bW4gb3IgdW5kZWZpbmVkCiAgICBDb2x1bW5zTWFuYWdlci5wcm90b3R5cGUuZ2V0Rmlyc3RDb2x1bW4gPSBmdW5jdGlvbihleHRlbmRlZCkgewogICAgICAgIHZhciBjb2x1bW5zID0gdGhpcy5jb2x1bW5zOwogICAgICAgIGlmIChleHRlbmRlZCkgewogICAgICAgICAgICBjb2x1bW5zID0gdGhpcy5wcmV2aW91c0NvbHVtbnM7CiAgICAgICAgfQoKICAgICAgICBpZiAoY29sdW1ucyAmJiBjb2x1bW5zLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgcmV0dXJuIGNvbHVtbnNbMF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICB9CiAgICB9OwoKICAgIC8vIFJldHVybnMgdGhlIGNvbHVtbiBhdCB0aGUgZ2l2ZW4gb3IgbmV4dCBwb3NzaWJsZSBkYXRlCiAgICBDb2x1bW5zTWFuYWdlci5wcm90b3R5cGUuZ2V0Q29sdW1uQnlEYXRlID0gZnVuY3Rpb24oZGF0ZSkgewogICAgICAgIHRoaXMuZXhwYW5kRXh0ZW5kZWRDb2x1bW5zRm9yRGF0ZShkYXRlKTsKICAgICAgICB2YXIgZXh0ZW5kZWRDb2x1bW5zID0gdGhpcy5wcmV2aW91c0NvbHVtbnMuY29uY2F0KHRoaXMuY29sdW1ucywgdGhpcy5uZXh0Q29sdW1ucyk7CiAgICAgICAgdmFyIGNvbHVtbnMgPSBicy5nZXQoZXh0ZW5kZWRDb2x1bW5zLCBkYXRlLCBmdW5jdGlvbihjKSB7CiAgICAgICAgICAgIHJldHVybiBjLmRhdGU7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGNvbHVtbnNbMF0gIT09IHVuZGVmaW5lZCA/IGNvbHVtbnNbMF0gOiBjb2x1bW5zWzFdOwogICAgfTsKCiAgICAvLyBSZXR1cm5zIHRoZSBjb2x1bW4gYXQgdGhlIGdpdmVuIHBvc2l0aW9uIHggKGluIGVtKQogICAgQ29sdW1uc01hbmFnZXIucHJvdG90eXBlLmdldENvbHVtbkJ5UG9zaXRpb24gPSBmdW5jdGlvbih4KSB7CiAgICAgICAgdGhpcy5leHBhbmRFeHRlbmRlZENvbHVtbnNGb3JQb3NpdGlvbih4KTsKICAgICAgICB2YXIgZXh0ZW5kZWRDb2x1bW5zID0gdGhpcy5wcmV2aW91c0NvbHVtbnMuY29uY2F0KHRoaXMuY29sdW1ucywgdGhpcy5uZXh0Q29sdW1ucyk7CiAgICAgICAgcmV0dXJuIGJzLmdldChleHRlbmRlZENvbHVtbnMsIHgsIGZ1bmN0aW9uKGMpIHsKICAgICAgICAgICAgcmV0dXJuIGMubGVmdDsKICAgICAgICB9KVswXTsKICAgIH07CgogICAgQ29sdW1uc01hbmFnZXIucHJvdG90eXBlLmV4cGFuZEV4dGVuZGVkQ29sdW1uc0ZvclBvc2l0aW9uID0gZnVuY3Rpb24oeCkgewogICAgICAgIGlmICh4IDwgMCkgewogICAgICAgICAgICB2YXIgZmlyc3RDb2x1bW4gPSB0aGlzLmdldEZpcnN0Q29sdW1uKCk7CiAgICAgICAgICAgIHZhciBmcm9tID0gZmlyc3RDb2x1bW4uZGF0ZTsKICAgICAgICAgICAgdmFyIGZpcnN0RXh0ZW5kZWRDb2x1bW4gPSB0aGlzLmdldEZpcnN0Q29sdW1uKHRydWUpOwogICAgICAgICAgICBpZiAoIWZpcnN0RXh0ZW5kZWRDb2x1bW4gfHwgZmlyc3RFeHRlbmRlZENvbHVtbi5sZWZ0ID4geCkgewogICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c0NvbHVtbnMgPSBuZXcgQ29sdW1uR2VuZXJhdG9yKHRoaXMpLmdlbmVyYXRlKGZyb20sIHVuZGVmaW5lZCwgLXgsIDAsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAoeCA+IHRoaXMud2lkdGgpIHsKICAgICAgICAgICAgdmFyIGxhc3RDb2x1bW4gPSB0aGlzLmdldExhc3RDb2x1bW4oKTsKICAgICAgICAgICAgdmFyIGVuZERhdGUgPSBsYXN0Q29sdW1uLmdldERhdGVCeVBvc2l0aW9uKGxhc3RDb2x1bW4ud2lkdGgpOwogICAgICAgICAgICB2YXIgbGFzdEV4dGVuZGVkQ29sdW1uID0gdGhpcy5nZXRMYXN0Q29sdW1uKHRydWUpOwogICAgICAgICAgICBpZiAoIWxhc3RFeHRlbmRlZENvbHVtbiB8fCBsYXN0RXh0ZW5kZWRDb2x1bW4ubGVmdCArIGxhc3RFeHRlbmRlZENvbHVtbi53aWR0aCA8IHgpIHsKICAgICAgICAgICAgICAgIHRoaXMubmV4dENvbHVtbnMgPSBuZXcgQ29sdW1uR2VuZXJhdG9yKHRoaXMpLmdlbmVyYXRlKGVuZERhdGUsIHVuZGVmaW5lZCwgeCAtIHRoaXMud2lkdGgsIHRoaXMud2lkdGgsIGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKCiAgICBDb2x1bW5zTWFuYWdlci5wcm90b3R5cGUuZXhwYW5kRXh0ZW5kZWRDb2x1bW5zRm9yRGF0ZSA9IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICB2YXIgZmlyc3RDb2x1bW4gPSB0aGlzLmdldEZpcnN0Q29sdW1uKCk7CiAgICAgICAgdmFyIGZyb207CiAgICAgICAgaWYgKGZpcnN0Q29sdW1uKSB7CiAgICAgICAgICAgIGZyb20gPSBmaXJzdENvbHVtbi5kYXRlOwogICAgICAgIH0KCiAgICAgICAgdmFyIGxhc3RDb2x1bW4gPSB0aGlzLmdldExhc3RDb2x1bW4oKTsKICAgICAgICB2YXIgZW5kRGF0ZTsKICAgICAgICBpZiAobGFzdENvbHVtbikgewogICAgICAgICAgICBlbmREYXRlID0gbGFzdENvbHVtbi5nZXREYXRlQnlQb3NpdGlvbihsYXN0Q29sdW1uLndpZHRoKTsKICAgICAgICB9CgogICAgICAgIGlmIChmcm9tICYmIGRhdGUgPCBmcm9tKSB7CiAgICAgICAgICAgIHZhciBmaXJzdEV4dGVuZGVkQ29sdW1uID0gdGhpcy5nZXRGaXJzdENvbHVtbih0cnVlKTsKICAgICAgICAgICAgaWYgKCFmaXJzdEV4dGVuZGVkQ29sdW1uIHx8IGZpcnN0RXh0ZW5kZWRDb2x1bW4uZGF0ZSA+IGRhdGUpIHsKICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNDb2x1bW5zID0gbmV3IENvbHVtbkdlbmVyYXRvcih0aGlzKS5nZW5lcmF0ZShmcm9tLCBkYXRlLCB1bmRlZmluZWQsIDAsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAoZW5kRGF0ZSAmJiBkYXRlID4gZW5kRGF0ZSkgewogICAgICAgICAgICB2YXIgbGFzdEV4dGVuZGVkQ29sdW1uID0gdGhpcy5nZXRMYXN0Q29sdW1uKHRydWUpOwogICAgICAgICAgICBpZiAoIWxhc3RFeHRlbmRlZENvbHVtbiB8fCBlbmREYXRlIDwgbGFzdEV4dGVuZGVkQ29sdW1uKSB7CiAgICAgICAgICAgICAgICB0aGlzLm5leHRDb2x1bW5zID0gbmV3IENvbHVtbkdlbmVyYXRvcih0aGlzKS5nZW5lcmF0ZShlbmREYXRlLCBkYXRlLCB1bmRlZmluZWQsIHRoaXMud2lkdGgsIGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKCiAgICAvLyBSZXR1cm5zIHRoZSBudW1iZXIgb2YgYWN0aXZlIGhlYWRlcnMKICAgIENvbHVtbnNNYW5hZ2VyLnByb3RvdHlwZS5nZXRBY3RpdmVIZWFkZXJzQ291bnQgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgc2l6ZSA9IDAsIGtleTsKICAgICAgICBmb3IgKGtleSBpbiB0aGlzLmhlYWRlcnMpIHsKICAgICAgICAgICAgaWYgKHRoaXMuaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICBzaXplKys7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNpemU7CiAgICB9OwoKICAgIENvbHVtbnNNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVWaXNpYmxlQ29sdW1ucyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMudmlzaWJsZUNvbHVtbnMgPSAkZmlsdGVyKCdnYW50dENvbHVtbkxpbWl0JykodGhpcy5jb2x1bW5zLCB0aGlzLmdhbnR0LiRzY29wZS5zY3JvbGxMZWZ0LCB0aGlzLmdhbnR0LiRzY29wZS5zY3JvbGxXaWR0aCk7CgogICAgICAgIHRoaXMudmlzaWJsZUhlYWRlcnMgPSB7fTsKICAgICAgICBhbmd1bGFyLmZvckVhY2godGhpcy5oZWFkZXJzLCBmdW5jdGlvbihoZWFkZXJzLCBrZXkpIHsKICAgICAgICAgICAgaWYgKHRoaXMuaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICB0aGlzLnZpc2libGVIZWFkZXJzW2tleV0gPSAkZmlsdGVyKCdnYW50dENvbHVtbkxpbWl0JykoaGVhZGVycywgdGhpcy5nYW50dC4kc2NvcGUuc2Nyb2xsTGVmdCwgdGhpcy5nYW50dC4kc2NvcGUuc2Nyb2xsV2lkdGgpOwogICAgICAgICAgICB9CiAgICAgICAgfSwgdGhpcyk7CiAgICB9OwoKICAgIHZhciBkZWZhdWx0SGVhZGVyc0Zvcm1hdHMgPSB7J3llYXInOiAnWVlZWScsICdxdWFydGVyJzogJ1tRXVEgWVlZWScsIG1vbnRoOiAnTU1NTSBZWVlZJywgd2VlazogJ3cnLCBkYXk6ICdEJywgaG91cjogJ0gnLCBtaW51dGU6J0hIOm1tJ307CiAgICB2YXIgZGVmYXVsdERheUhlYWRlcnNGb3JtYXRzID0ge2RheTogJ0xMJywgaG91cjogJ0gnLCBtaW51dGU6J0hIOm1tJ307CiAgICB2YXIgZGVmYXVsdFllYXJIZWFkZXJzRm9ybWF0cyA9IHsneWVhcic6ICdZWVlZJywgJ3F1YXJ0ZXInOiAnW1FdUScsIG1vbnRoOiAnTU1NTSd9OwoKICAgIENvbHVtbnNNYW5hZ2VyLnByb3RvdHlwZS5nZXRIZWFkZXJGb3JtYXQgPSBmdW5jdGlvbih1bml0KSB7CiAgICAgICAgdmFyIGZvcm1hdDsKICAgICAgICBpZiAodGhpcy5nYW50dC4kc2NvcGUuaGVhZGVyc0Zvcm1hdHMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBmb3JtYXQgPSB0aGlzLmdhbnR0LiRzY29wZS5oZWFkZXJzRm9ybWF0c1t1bml0XTsKICAgICAgICB9CiAgICAgICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGlmIChbJ21pbGxpc2Vjb25kJywgJ3NlY29uZCcsICdtaW51dGUnLCAnaG91ciddLmluZGV4T2YodGhpcy5nYW50dC4kc2NvcGUudmlld1NjYWxlKSA+IC0xKSB7CiAgICAgICAgICAgICAgICBmb3JtYXQgPSBkZWZhdWx0RGF5SGVhZGVyc0Zvcm1hdHNbdW5pdF07CiAgICAgICAgICAgIH0gZWxzZSBpZiAoWydtb250aCcsICdxdWFydGVyJywgJ3llYXInXS5pbmRleE9mKHRoaXMuZ2FudHQuJHNjb3BlLnZpZXdTY2FsZSkgPiAtMSkgewogICAgICAgICAgICAgICAgZm9ybWF0ID0gZGVmYXVsdFllYXJIZWFkZXJzRm9ybWF0c1t1bml0XTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIGZvcm1hdCA9IGRlZmF1bHRIZWFkZXJzRm9ybWF0c1t1bml0XTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZm9ybWF0OwogICAgfTsKCiAgICByZXR1cm4gQ29sdW1uc01hbmFnZXI7Cn1dKTsKCgpnYW50dC5mYWN0b3J5KCdHYW50dEhlYWRlckdlbmVyYXRvcicsIFsnR2FudHRDb2x1bW5IZWFkZXInLCBmdW5jdGlvbihDb2x1bW5IZWFkZXIpIHsKICAgIHZhciBnZW5lcmF0ZUhlYWRlciA9IGZ1bmN0aW9uKGNvbHVtbnNNYW5hZ2VyLCBjb2x1bW5zLCB1bml0KSB7CiAgICAgICAgdmFyIGdlbmVyYXRlZEhlYWRlcnMgPSBbXTsKICAgICAgICB2YXIgaGVhZGVyOwogICAgICAgIHZhciBwcmV2Q29sRGF0ZVZhbDsKCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjb2x1bW5zLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICB2YXIgY29sID0gY29sdW1uc1tpXTsKICAgICAgICAgICAgdmFyIGNvbERhdGVWYWwgPSBjb2wuZGF0ZS5nZXQodW5pdCk7CiAgICAgICAgICAgIGlmIChpID09PSAwIHx8IHByZXZDb2xEYXRlVmFsICE9PSBjb2xEYXRlVmFsKSB7CiAgICAgICAgICAgICAgICBwcmV2Q29sRGF0ZVZhbCA9IGNvbERhdGVWYWw7CiAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBjb2wuZGF0ZS5mb3JtYXQoY29sdW1uc01hbmFnZXIuZ2V0SGVhZGVyRm9ybWF0KHVuaXQpKTsKCiAgICAgICAgICAgICAgICBoZWFkZXIgPSBuZXcgQ29sdW1uSGVhZGVyKGNvbC5kYXRlLCB1bml0LCBjb2wub3JpZ2luYWxTaXplLmxlZnQsIGNvbC5vcmlnaW5hbFNpemUud2lkdGgsIGxhYmVsKTsKICAgICAgICAgICAgICAgIGhlYWRlci5sZWZ0ID0gY29sLmxlZnQ7CiAgICAgICAgICAgICAgICBoZWFkZXIud2lkdGggPSBjb2wud2lkdGg7CiAgICAgICAgICAgICAgICBnZW5lcmF0ZWRIZWFkZXJzLnB1c2goaGVhZGVyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGhlYWRlci5vcmlnaW5hbFNpemUud2lkdGggKz0gY29sLm9yaWdpbmFsU2l6ZS53aWR0aDsKICAgICAgICAgICAgICAgIGhlYWRlci53aWR0aCArPSBjb2wud2lkdGg7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGdlbmVyYXRlZEhlYWRlcnM7CgogICAgfTsKCiAgICByZXR1cm4gZnVuY3Rpb24oY29sdW1uc01hbmFnZXIpIHsKICAgICAgICB0aGlzLmdlbmVyYXRlID0gZnVuY3Rpb24oY29sdW1ucykgewogICAgICAgICAgICB2YXIgdW5pdHMgPSBbXTsKICAgICAgICAgICAgaWYgKGNvbHVtbnNNYW5hZ2VyLmdhbnR0LiRzY29wZS5oZWFkZXJzID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHVuaXRzID0gW107CiAgICAgICAgICAgICAgICBpZiAoWyd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnXS5pbmRleE9mKGNvbHVtbnNNYW5hZ2VyLmdhbnR0LiRzY29wZS52aWV3U2NhbGUpID4gLTEpIHsKICAgICAgICAgICAgICAgICAgICB1bml0cy5wdXNoKCd5ZWFyJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoWydxdWFydGVyJ10uaW5kZXhPZihjb2x1bW5zTWFuYWdlci5nYW50dC4kc2NvcGUudmlld1NjYWxlKSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgdW5pdHMucHVzaCgncXVhcnRlcicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKFsnZGF5JywgJ3dlZWsnLCAnbW9udGgnXS5pbmRleE9mKGNvbHVtbnNNYW5hZ2VyLmdhbnR0LiRzY29wZS52aWV3U2NhbGUpID4gLTEpIHsKICAgICAgICAgICAgICAgICAgICB1bml0cy5wdXNoKCdtb250aCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKFsnZGF5JywgJ3dlZWsnXS5pbmRleE9mKGNvbHVtbnNNYW5hZ2VyLmdhbnR0LiRzY29wZS52aWV3U2NhbGUpID4gLTEpIHsKICAgICAgICAgICAgICAgICAgICB1bml0cy5wdXNoKCd3ZWVrJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoWydob3VyJywgJ2RheSddLmluZGV4T2YoY29sdW1uc01hbmFnZXIuZ2FudHQuJHNjb3BlLnZpZXdTY2FsZSkgPiAtMSkgewogICAgICAgICAgICAgICAgICAgIHVuaXRzLnB1c2goJ2RheScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKFsnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJ10uaW5kZXhPZihjb2x1bW5zTWFuYWdlci5nYW50dC4kc2NvcGUudmlld1NjYWxlKSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgdW5pdHMucHVzaCgnaG91cicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKFsnbWludXRlJywgJ3NlY29uZCddLmluZGV4T2YoY29sdW1uc01hbmFnZXIuZ2FudHQuJHNjb3BlLnZpZXdTY2FsZSkgPiAtMSkgewogICAgICAgICAgICAgICAgICAgIHVuaXRzLnB1c2goJ21pbnV0ZScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKFsnc2Vjb25kJ10uaW5kZXhPZihjb2x1bW5zTWFuYWdlci5nYW50dC4kc2NvcGUudmlld1NjYWxlKSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgdW5pdHMucHVzaCgnc2Vjb25kJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodW5pdHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgdW5pdHMucHVzaChjb2x1bW5zTWFuYWdlci5nYW50dC4kc2NvcGUudmlld1NjYWxlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHVuaXRzID0gY29sdW1uc01hbmFnZXIuZ2FudHQuJHNjb3BlLmhlYWRlcnM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBoZWFkZXJzID0gW107CiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh1bml0cywgZnVuY3Rpb24odW5pdCkgewogICAgICAgICAgICAgICAgaGVhZGVycy5wdXNoKGdlbmVyYXRlSGVhZGVyKGNvbHVtbnNNYW5hZ2VyLCBjb2x1bW5zLCB1bml0KSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIGhlYWRlcnM7CiAgICAgICAgfTsKICAgIH07Cn1dKTsKCgpnYW50dC5mYWN0b3J5KCdHYW50dCcsIFsKICAgICdHYW50dEFwaScsICdHYW50dENhbGVuZGFyJywgJ0dhbnR0U2Nyb2xsJywgJ0dhbnR0Qm9keScsICdHYW50dFJvd0hlYWRlcicsICdHYW50dEhlYWRlcicsICdHYW50dExhYmVscycsICdHYW50dFJvd3NNYW5hZ2VyJywgJ0dhbnR0Q29sdW1uc01hbmFnZXInLCAnR2FudHRUaW1lc3BhbnNNYW5hZ2VyJywgJ0dhbnR0Q3VycmVudERhdGVNYW5hZ2VyJywKICAgIGZ1bmN0aW9uKEdhbnR0QXBpLCBDYWxlbmRhciwgU2Nyb2xsLCBCb2R5LCBSb3dIZWFkZXIsIEhlYWRlciwgTGFiZWxzLCBSb3dzTWFuYWdlciwgQ29sdW1uc01hbmFnZXIsIFRpbWVzcGFuc01hbmFnZXIsIEN1cnJlbnREYXRlTWFuYWdlcikgewogICAgICAgIC8vIEdhbnR0IGxvZ2ljLiBNYW5hZ2VzIHRoZSBjb2x1bW5zLCByb3dzIGFuZCBzb3J0aW5nIGZ1bmN0aW9uYWxpdHkuCiAgICAgICAgdmFyIEdhbnR0ID0gZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCkgewogICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTsKICAgICAgICAgICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50OwoKICAgICAgICAgICAgdGhpcy5hcGkgPSBuZXcgR2FudHRBcGkodGhpcyk7CgogICAgICAgICAgICB0aGlzLmFwaS5yZWdpc3RlckV2ZW50KCdjb3JlJywgJ3JlYWR5Jyk7CgogICAgICAgICAgICB0aGlzLmFwaS5yZWdpc3RlckV2ZW50KCdkaXJlY3RpdmVzJywgJ25ldycpOwogICAgICAgICAgICB0aGlzLmFwaS5yZWdpc3RlckV2ZW50KCdkaXJlY3RpdmVzJywgJ2Rlc3Ryb3knKTsKCiAgICAgICAgICAgIHRoaXMuYXBpLnJlZ2lzdGVyRXZlbnQoJ2RhdGEnLCAnbG9hZCcpOwogICAgICAgICAgICB0aGlzLmFwaS5yZWdpc3RlckV2ZW50KCdkYXRhJywgJ3JlbW92ZScpOwogICAgICAgICAgICB0aGlzLmFwaS5yZWdpc3RlckV2ZW50KCdkYXRhJywgJ2NsZWFyJywgdGhpcy5jbGVhckRhdGEsIHRoaXMpOwoKICAgICAgICAgICAgdGhpcy5hcGkucmVnaXN0ZXJNZXRob2QoJ2NvcmUnLCAnZ2V0RGF0ZUJ5UG9zaXRpb24nLCB0aGlzLmdldERhdGVCeVBvc2l0aW9uLCB0aGlzKTsKICAgICAgICAgICAgdGhpcy5hcGkucmVnaXN0ZXJNZXRob2QoJ2NvcmUnLCAnZ2V0UG9zaXRpb25CeURhdGUnLCB0aGlzLmdldFBvc2l0aW9uQnlEYXRlLCB0aGlzKTsKCiAgICAgICAgICAgIHRoaXMuYXBpLnJlZ2lzdGVyTWV0aG9kKCdkYXRhJywgJ2xvYWQnLCB0aGlzLmxvYWREYXRhLCB0aGlzKTsKICAgICAgICAgICAgdGhpcy5hcGkucmVnaXN0ZXJNZXRob2QoJ2RhdGEnLCAncmVtb3ZlJywgdGhpcy5yZW1vdmVEYXRhLCB0aGlzKTsKICAgICAgICAgICAgdGhpcy5hcGkucmVnaXN0ZXJNZXRob2QoJ2RhdGEnLCAnY2xlYXInLCB0aGlzLmNsZWFyRGF0YSwgdGhpcyk7CgogICAgICAgICAgICB0aGlzLmNhbGVuZGFyID0gbmV3IENhbGVuZGFyKHRoaXMpOwogICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnJlZ2lzdGVyVGltZUZyYW1lcyh0aGlzLiRzY29wZS50aW1lRnJhbWVzKTsKICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5yZWdpc3RlckRhdGVGcmFtZXModGhpcy4kc2NvcGUuZGF0ZUZyYW1lcyk7CgogICAgICAgICAgICB0aGlzLmFwaS5yZWdpc3Rlck1ldGhvZCgndGltZWZyYW1lcycsICdyZWdpc3RlclRpbWVGcmFtZXMnLCB0aGlzLmNhbGVuZGFyLnJlZ2lzdGVyVGltZUZyYW1lcywgdGhpcy5jYWxlbmRhcik7CiAgICAgICAgICAgIHRoaXMuYXBpLnJlZ2lzdGVyTWV0aG9kKCd0aW1lZnJhbWVzJywgJ2NsZWFyVGltZWZyYW1lcycsIHRoaXMuY2FsZW5kYXIuY2xlYXJUaW1lRnJhbWVzLCB0aGlzLmNhbGVuZGFyKTsKICAgICAgICAgICAgdGhpcy5hcGkucmVnaXN0ZXJNZXRob2QoJ3RpbWVmcmFtZXMnLCAncmVnaXN0ZXJEYXRlRnJhbWVzJywgdGhpcy5jYWxlbmRhci5yZWdpc3RlckRhdGVGcmFtZXMsIHRoaXMuY2FsZW5kYXIpOwogICAgICAgICAgICB0aGlzLmFwaS5yZWdpc3Rlck1ldGhvZCgndGltZWZyYW1lcycsICdjbGVhckRhdGVGcmFtZXMnLCB0aGlzLmNhbGVuZGFyLmNsZWFyRGF0ZUZyYW1lcywgdGhpcy5jYWxlbmRhcik7CiAgICAgICAgICAgIHRoaXMuYXBpLnJlZ2lzdGVyTWV0aG9kKCd0aW1lZnJhbWVzJywgJ3JlZ2lzdGVyVGltZUZyYW1lTWFwcGluZ3MnLCB0aGlzLmNhbGVuZGFyLnJlZ2lzdGVyVGltZUZyYW1lTWFwcGluZ3MsIHRoaXMuY2FsZW5kYXIpOwogICAgICAgICAgICB0aGlzLmFwaS5yZWdpc3Rlck1ldGhvZCgndGltZWZyYW1lcycsICdjbGVhclRpbWVGcmFtZU1hcHBpbmdzJywgdGhpcy5jYWxlbmRhci5jbGVhclRpbWVGcmFtZU1hcHBpbmdzLCB0aGlzLmNhbGVuZGFyKTsKCiAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ3RpbWVGcmFtZXMnLCBmdW5jdGlvbihuZXdWYWx1ZXMsIG9sZFZhbHVlcykgewogICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVxdWFscyhuZXdWYWx1ZXMsIG9sZFZhbHVlcykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmNsZWFyVGltZUZyYW1lcygpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIucmVnaXN0ZXJUaW1lRnJhbWVzKCRzY29wZS50aW1lRnJhbWVzKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbnNNYW5hZ2VyLmdlbmVyYXRlQ29sdW1ucygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ2RhdGVGcmFtZXMnLCBmdW5jdGlvbihuZXdWYWx1ZXMsIG9sZFZhbHVlcykgewogICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVxdWFscyhuZXdWYWx1ZXMsIG9sZFZhbHVlcykpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmNsZWFyVGltZUZyYW1lcygpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIucmVnaXN0ZXJUaW1lRnJhbWVzKCRzY29wZS50aW1lRnJhbWVzKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbnNNYW5hZ2VyLmdlbmVyYXRlQ29sdW1ucygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHRoaXMuc2Nyb2xsID0gbmV3IFNjcm9sbCh0aGlzKTsKICAgICAgICAgICAgdGhpcy5ib2R5ID0gbmV3IEJvZHkodGhpcyk7CiAgICAgICAgICAgIHRoaXMucm93SGVhZGVyID0gbmV3IFJvd0hlYWRlcih0aGlzKTsKICAgICAgICAgICAgdGhpcy5oZWFkZXIgPSBuZXcgSGVhZGVyKHRoaXMpOwogICAgICAgICAgICB0aGlzLmxhYmVscyA9IG5ldyBMYWJlbHModGhpcyk7CgogICAgICAgICAgICB0aGlzLnJvd3NNYW5hZ2VyID0gbmV3IFJvd3NNYW5hZ2VyKHRoaXMpOwogICAgICAgICAgICB0aGlzLmNvbHVtbnNNYW5hZ2VyID0gbmV3IENvbHVtbnNNYW5hZ2VyKHRoaXMpOwogICAgICAgICAgICB0aGlzLnRpbWVzcGFuc01hbmFnZXIgPSBuZXcgVGltZXNwYW5zTWFuYWdlcih0aGlzKTsKICAgICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZU1hbmFnZXIgPSBuZXcgQ3VycmVudERhdGVNYW5hZ2VyKHRoaXMpOwoKICAgICAgICAgICAgdGhpcy5vcmlnaW5hbFdpZHRoID0gMDsKICAgICAgICAgICAgdGhpcy53aWR0aCA9IDA7CgogICAgICAgICAgICB0aGlzLiRzY29wZS4kd2F0Y2goJ2RhdGEnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5lcXVhbHMobmV3VmFsdWUsIG9sZFZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXJEYXRhKCk7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2FkRGF0YShuZXdWYWx1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbih0aGlzLiRzY29wZS5hcGkpKSB7CiAgICAgICAgICAgICAgICB0aGlzLiRzY29wZS5hcGkodGhpcy5hcGkpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgLy8gUmV0dXJucyB0aGUgZXhhY3QgY29sdW1uIGRhdGUgYXQgdGhlIGdpdmVuIHBvc2l0aW9uIHggKGluIGVtKQogICAgICAgIEdhbnR0LnByb3RvdHlwZS5nZXREYXRlQnlQb3NpdGlvbiA9IGZ1bmN0aW9uKHgsIG1hZ25ldCkgewogICAgICAgICAgICB2YXIgY29sdW1uID0gdGhpcy5jb2x1bW5zTWFuYWdlci5nZXRDb2x1bW5CeVBvc2l0aW9uKHgpOwogICAgICAgICAgICBpZiAoY29sdW1uICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjb2x1bW4uZ2V0RGF0ZUJ5UG9zaXRpb24oeCAtIGNvbHVtbi5sZWZ0LCBtYWduZXQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIC8vIFJldHVybnMgdGhlIHBvc2l0aW9uIGluc2lkZSB0aGUgR2FudHQgY2FsY3VsYXRlZCBieSB0aGUgZ2l2ZW4gZGF0ZQogICAgICAgIEdhbnR0LnByb3RvdHlwZS5nZXRQb3NpdGlvbkJ5RGF0ZSA9IGZ1bmN0aW9uKGRhdGUpIHsKICAgICAgICAgICAgaWYgKGRhdGUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFtb21lbnQuaXNNb21lbnQobW9tZW50KSkgewogICAgICAgICAgICAgICAgZGF0ZSA9IG1vbWVudChkYXRlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uc01hbmFnZXIuZ2V0Q29sdW1uQnlEYXRlKGRhdGUpOwogICAgICAgICAgICBpZiAoY29sdW1uICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjb2x1bW4uZ2V0UG9zaXRpb25CeURhdGUoZGF0ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgLy8gQWRkcyBvciB1cGRhdGUgcm93cyBhbmQgdGFza3MuCiAgICAgICAgR2FudHQucHJvdG90eXBlLmxvYWREYXRhID0gZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNBcnJheShkYXRhKSkgewogICAgICAgICAgICAgICAgZGF0YSA9IFtkYXRhXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgdmFyIHJvd0RhdGEgPSBkYXRhW2ldOwogICAgICAgICAgICAgICAgdGhpcy5yb3dzTWFuYWdlci5hZGRSb3cocm93RGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5hcGkuZGF0YS5yYWlzZS5sb2FkKHRoaXMuJHNjb3BlLCBkYXRhKTsKICAgICAgICB9OwoKICAgICAgICAvLyBSZW1vdmVzIHNwZWNpZmllZCByb3dzIG9yIHRhc2tzLgogICAgICAgIC8vIElmIGEgcm93IGhhcyBubyB0YXNrcyBpbnNpZGUgdGhlIGNvbXBsZXRlIHJvdyB3aWxsIGJlIGRlbGV0ZWQuCiAgICAgICAgR2FudHQucHJvdG90eXBlLnJlbW92ZURhdGEgPSBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KGRhdGEpKSB7CiAgICAgICAgICAgICAgICBkYXRhID0gW2RhdGFdOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLnJvd3NNYW5hZ2VyLnJlbW92ZURhdGEoZGF0YSk7CiAgICAgICAgICAgIHRoaXMuYXBpLmRhdGEucmFpc2UucmVtb3ZlKHRoaXMuJHNjb3BlLCBkYXRhKTsKICAgICAgICB9OwoKICAgICAgICAvLyBSZW1vdmVzIGFsbCByb3dzIGFuZCB0YXNrcwogICAgICAgIEdhbnR0LnByb3RvdHlwZS5jbGVhckRhdGEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5yb3dzTWFuYWdlci5yZW1vdmVBbGwoKTsKICAgICAgICAgICAgdGhpcy5hcGkuZGF0YS5yYWlzZS5jbGVhcih0aGlzLiRzY29wZSk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIEdhbnR0OwogICAgfV0pOwoKCmdhbnR0LmZhY3RvcnkoJ0dhbnR0Um93JywgWydHYW50dFRhc2snLCAnbW9tZW50JywgJyRmaWx0ZXInLCBmdW5jdGlvbihUYXNrLCBtb21lbnQsICRmaWx0ZXIpIHsKICAgIHZhciBSb3cgPSBmdW5jdGlvbihpZCwgcm93c01hbmFnZXIsIG5hbWUsIG9yZGVyLCBoZWlnaHQsIGNvbG9yLCBjbGFzc2VzLCBkYXRhKSB7CiAgICAgICAgdGhpcy5pZCA9IGlkOwogICAgICAgIHRoaXMucm93c01hbmFnZXIgPSByb3dzTWFuYWdlcjsKICAgICAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgICAgIHRoaXMub3JkZXIgPSBvcmRlcjsKICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDsKICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7CiAgICAgICAgdGhpcy5jbGFzc2VzID0gY2xhc3NlczsKICAgICAgICB0aGlzLmZyb20gPSB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy50byA9IHVuZGVmaW5lZDsKICAgICAgICB0aGlzLnRhc2tzTWFwID0ge307CiAgICAgICAgdGhpcy50YXNrcyA9IFtdOwogICAgICAgIHRoaXMuZmlsdGVyZWRUYXNrcyA9IFtdOwogICAgICAgIHRoaXMudmlzaWJsZVRhc2tzID0gW107CiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTsKICAgIH07CgogICAgLy8gQWRkcyBhIHRhc2sgdG8gYSBzcGVjaWZpYyByb3cuIE1lcmdlcyB0aGUgdGFzayBpZiB0aGVyZSBpcyBhbHJlYWR5IG9uZSB3aXRoIHRoZSBzYW1lIGlkCiAgICBSb3cucHJvdG90eXBlLmFkZFRhc2sgPSBmdW5jdGlvbih0YXNrRGF0YSkgewogICAgICAgIC8vIENvcHkgdG8gbmV3IHRhc2sgKGFkZCkgb3IgbWVyZ2Ugd2l0aCBleGlzdGluZyAodXBkYXRlKQogICAgICAgIHZhciB0YXNrOwoKICAgICAgICBpZiAodGFza0RhdGEuaWQgaW4gdGhpcy50YXNrc01hcCkgewogICAgICAgICAgICB0YXNrID0gdGhpcy50YXNrc01hcFt0YXNrRGF0YS5pZF07CiAgICAgICAgICAgIHRhc2suY29weSh0YXNrRGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGFzayA9IG5ldyBUYXNrKHRhc2tEYXRhLmlkLCB0aGlzLCB0YXNrRGF0YS5uYW1lLCB0YXNrRGF0YS5jb2xvciwgdGFza0RhdGEuY2xhc3NlcywgdGFza0RhdGEucHJpb3JpdHksIHRhc2tEYXRhLmZyb20sIHRhc2tEYXRhLnRvLCB0YXNrRGF0YS5kYXRhLCB0YXNrRGF0YS5lc3QsIHRhc2tEYXRhLmxjdCwgdGFza0RhdGEucHJvZ3Jlc3MpOwogICAgICAgICAgICB0aGlzLnRhc2tzTWFwW3Rhc2tEYXRhLmlkXSA9IHRhc2s7CiAgICAgICAgICAgIHRoaXMudGFza3MucHVzaCh0YXNrKTsKICAgICAgICAgICAgdGhpcy5maWx0ZXJlZFRhc2tzLnB1c2godGFzayk7CiAgICAgICAgICAgIHRoaXMudmlzaWJsZVRhc2tzLnB1c2godGFzayk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnNvcnRUYXNrcygpOwogICAgICAgIHRoaXMuc2V0RnJvbVRvQnlUYXNrKHRhc2spOwogICAgICAgIHRoaXMucm93c01hbmFnZXIuZ2FudHQuYXBpLnRhc2tzLnJhaXNlLmFkZCh0YXNrKTsKICAgICAgICByZXR1cm4gdGFzazsKICAgIH07CgogICAgLy8gUmVtb3ZlcyB0aGUgdGFzayBmcm9tIHRoZSBleGlzdGluZyByb3cgYW5kIGFkZHMgaXQgdG8gaGUgY3VycmVudCBvbmUKICAgIFJvdy5wcm90b3R5cGUubW92ZVRhc2tUb1JvdyA9IGZ1bmN0aW9uKHRhc2spIHsKICAgICAgICB2YXIgb2xkUm93ID0gdGFzay5yb3c7CiAgICAgICAgb2xkUm93LnJlbW92ZVRhc2sodGFzay5pZCwgdHJ1ZSk7CiAgICAgICAgb2xkUm93LnVwZGF0ZVZpc2libGVUYXNrcygpOwoKICAgICAgICB0aGlzLnRhc2tzTWFwW3Rhc2suaWRdID0gdGFzazsKICAgICAgICB0aGlzLnRhc2tzLnB1c2godGFzayk7CiAgICAgICAgdGhpcy5maWx0ZXJlZFRhc2tzLnB1c2godGFzayk7CiAgICAgICAgdGhpcy52aXNpYmxlVGFza3MucHVzaCh0YXNrKTsKICAgICAgICB0YXNrLnJvdyA9IHRoaXM7CgogICAgICAgIHRoaXMuc29ydFRhc2tzKCk7CiAgICAgICAgdGhpcy5zZXRGcm9tVG9CeVRhc2sodGFzayk7CgogICAgICAgIHRhc2sudXBkYXRlUG9zQW5kU2l6ZSgpOwogICAgICAgIHRoaXMudXBkYXRlVmlzaWJsZVRhc2tzKCk7CgogICAgICAgIHRoaXMucm93c01hbmFnZXIuZ2FudHQuYXBpLnRhc2tzLnJhaXNlLm1vdmUodGFzaywgb2xkUm93KTsKCiAgICB9OwoKICAgIFJvdy5wcm90b3R5cGUudXBkYXRlVmlzaWJsZVRhc2tzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKHRoaXMucm93c01hbmFnZXIuZ2FudHQuJHNjb3BlLmZpbHRlclRhc2spIHsKICAgICAgICAgICAgdGhpcy5maWx0ZXJlZFRhc2tzID0gJGZpbHRlcignZmlsdGVyJykodGhpcy50YXNrcywgdGhpcy5yb3dzTWFuYWdlci5nYW50dC4kc2NvcGUuZmlsdGVyVGFzaywgdGhpcy5yb3dzTWFuYWdlci5nYW50dC4kc2NvcGUuZmlsdGVyVGFza0NvbXBhcmF0b3IpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuZmlsdGVyZWRUYXNrcyA9IHRoaXMudGFza3Muc2xpY2UoMCk7CiAgICAgICAgfQogICAgICAgIHRoaXMudmlzaWJsZVRhc2tzID0gJGZpbHRlcignZ2FudHRUYXNrTGltaXQnKSh0aGlzLmZpbHRlcmVkVGFza3MsIHRoaXMucm93c01hbmFnZXIuZ2FudHQpOwogICAgfTsKCiAgICBSb3cucHJvdG90eXBlLnVwZGF0ZVRhc2tzUG9zQW5kU2l6ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gdGhpcy50YXNrcy5sZW5ndGg7IGogPCBrOyBqKyspIHsKICAgICAgICAgICAgdGhpcy50YXNrc1tqXS51cGRhdGVQb3NBbmRTaXplKCk7CiAgICAgICAgfQogICAgfTsKCiAgICAvLyBSZW1vdmUgdGhlIHNwZWNpZmllZCB0YXNrIGZyb20gdGhlIHJvdwogICAgUm93LnByb3RvdHlwZS5yZW1vdmVUYXNrID0gZnVuY3Rpb24odGFza0lkLCBkaXNhYmxlRW1pdCkgewogICAgICAgIGlmICh0YXNrSWQgaW4gdGhpcy50YXNrc01hcCkgewogICAgICAgICAgICBkZWxldGUgdGhpcy50YXNrc01hcFt0YXNrSWRdOyAvLyBSZW1vdmUgZnJvbSBtYXAKCiAgICAgICAgICAgIHZhciB0YXNrOwogICAgICAgICAgICB2YXIgcmVtb3ZlZFRhc2s7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRhc2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgICAgICAgICB0YXNrID0gdGhpcy50YXNrc1tpXTsKICAgICAgICAgICAgICAgIGlmICh0YXNrLmlkID09PSB0YXNrSWQpIHsKICAgICAgICAgICAgICAgICAgICByZW1vdmVkVGFzayA9IHRhc2s7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXNrcy5zcGxpY2UoaSwgMSk7IC8vIFJlbW92ZSBmcm9tIGFycmF5CgogICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBlYXJsaWVzdCBvciBsYXRlc3QgZGF0ZSBpbmZvIGFzIHRoaXMgbWF5IGNoYW5nZQogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZyb20gLSB0YXNrLmZyb20gPT09IDAgfHwgdGhpcy50byAtIHRhc2sudG8gPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGcm9tVG8oKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAoaSA9IHRoaXMuZmlsdGVyZWRUYXNrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgICAgICAgICAgdGFzayA9IHRoaXMuZmlsdGVyZWRUYXNrc1tpXTsKICAgICAgICAgICAgICAgIGlmICh0YXNrLmlkID09PSB0YXNrSWQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcmVkVGFza3Muc3BsaWNlKGksIDEpOyAvLyBSZW1vdmUgZnJvbSBmaWx0ZXJlZCBhcnJheQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKGkgPSB0aGlzLnZpc2libGVUYXNrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgICAgICAgICAgdGFzayA9IHRoaXMudmlzaWJsZVRhc2tzW2ldOwogICAgICAgICAgICAgICAgaWYgKHRhc2suaWQgPT09IHRhc2tJZCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZVRhc2tzLnNwbGljZShpLCAxKTsgLy8gUmVtb3ZlIGZyb20gdmlzaWJsZSBhcnJheQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIWRpc2FibGVFbWl0KSB7CiAgICAgICAgICAgICAgICB0aGlzLnJvd3NNYW5hZ2VyLmdhbnR0LmFwaS50YXNrcy5yYWlzZS5yZW1vdmUocmVtb3ZlZFRhc2spOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmVtb3ZlZFRhc2s7CiAgICAgICAgfQogICAgfTsKCiAgICAvLyBDYWxjdWxhdGUgdGhlIGVhcmxpZXN0IGZyb20gYW5kIGxhdGVzdCB0byBkYXRlIG9mIGFsbCB0YXNrcyBpbiBhIHJvdwogICAgUm93LnByb3RvdHlwZS5zZXRGcm9tVG8gPSBmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLmZyb20gPSB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy50byA9IHVuZGVmaW5lZDsKICAgICAgICBmb3IgKHZhciBqID0gMCwgayA9IHRoaXMudGFza3MubGVuZ3RoOyBqIDwgazsgaisrKSB7CiAgICAgICAgICAgIHRoaXMuc2V0RnJvbVRvQnlUYXNrKHRoaXMudGFza3Nbal0pOwogICAgICAgIH0KICAgIH07CgogICAgUm93LnByb3RvdHlwZS5zZXRGcm9tVG9CeVRhc2sgPSBmdW5jdGlvbih0YXNrKSB7CiAgICAgICAgaWYgKHRoaXMuZnJvbSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHRoaXMuZnJvbSA9IG1vbWVudCh0YXNrLmZyb20pOwogICAgICAgIH0gZWxzZSBpZiAodGFzay5mcm9tIDwgdGhpcy5mcm9tKSB7CiAgICAgICAgICAgIHRoaXMuZnJvbSA9IG1vbWVudCh0YXNrLmZyb20pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMudG8gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICB0aGlzLnRvID0gbW9tZW50KHRhc2sudG8pOwogICAgICAgIH0gZWxzZSBpZiAodGFzay50byA+IHRoaXMudG8pIHsKICAgICAgICAgICAgdGhpcy50byA9IG1vbWVudCh0YXNrLnRvKTsKICAgICAgICB9CiAgICB9OwoKICAgIFJvdy5wcm90b3R5cGUuc29ydFRhc2tzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy50YXNrcy5zb3J0KGZ1bmN0aW9uKHQxLCB0MikgewogICAgICAgICAgICByZXR1cm4gdDEubGVmdCAtIHQyLmxlZnQ7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIFJvdy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uKHJvdykgewogICAgICAgIHRoaXMubmFtZSA9IHJvdy5uYW1lOwogICAgICAgIHRoaXMuaGVpZ2h0ID0gcm93LmhlaWdodDsKICAgICAgICB0aGlzLmNvbG9yID0gcm93LmNvbG9yOwogICAgICAgIHRoaXMuY2xhc3NlcyA9IHJvdy5jbGFzc2VzOwogICAgICAgIHRoaXMuZGF0YSA9IHJvdy5kYXRhOwoKICAgICAgICBpZiAocm93Lm9yZGVyICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdGhpcy5vcmRlciA9IHJvdy5vcmRlcjsKICAgICAgICB9CiAgICB9OwoKICAgIFJvdy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgY2xvbmUgPSBuZXcgUm93KHRoaXMuaWQsIHRoaXMucm93c01hbmFnZXIsIHRoaXMubmFtZSwgdGhpcy5vcmRlciwgdGhpcy5oZWlnaHQsIHRoaXMuY29sb3IsIHRoaXMuY2xhc3NlcywgdGhpcy5kYXRhKTsKICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMudGFza3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgIGNsb25lLmFkZFRhc2sodGhpcy50YXNrc1tpXS5jbG9uZSgpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNsb25lOwogICAgfTsKCiAgICByZXR1cm4gUm93Owp9XSk7CgoKZ2FudHQuZmFjdG9yeSgnR2FudHRSb3dIZWFkZXInLCBbZnVuY3Rpb24oKSB7CiAgICB2YXIgUm93SGVhZGVyID0gZnVuY3Rpb24oZ2FudHQpIHsKICAgICAgICB0aGlzLmdhbnR0ID0gZ2FudHQ7CiAgICB9OwogICAgcmV0dXJuIFJvd0hlYWRlcjsKfV0pOwoKCmdhbnR0LmZhY3RvcnkoJ0dhbnR0Um93c01hbmFnZXInLCBbJ0dhbnR0Um93JywgJyRmaWx0ZXInLCAnbW9tZW50JywgZnVuY3Rpb24oUm93LCAkZmlsdGVyLCBtb21lbnQpIHsKICAgIHZhciBSb3dzTWFuYWdlciA9IGZ1bmN0aW9uKGdhbnR0KSB7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgICB0aGlzLmdhbnR0ID0gZ2FudHQ7CgogICAgICAgIHRoaXMucm93c01hcCA9IHt9OwogICAgICAgIHRoaXMucm93cyA9IFtdOwogICAgICAgIHRoaXMuZmlsdGVyZWRSb3dzID0gW107CiAgICAgICAgdGhpcy52aXNpYmxlUm93cyA9IFtdOwoKICAgICAgICB0aGlzLmdhbnR0LiRzY29wZS4kd2F0Y2hHcm91cChbJ3Njcm9sbExlZnQnLCAnc2Nyb2xsV2lkdGgnXSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNlbGYudXBkYXRlVmlzaWJsZVRhc2tzKCk7CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuZ2FudHQuJHNjb3BlLiR3YXRjaEdyb3VwKFsnZmlsdGVyVGFzaycsICdmaWx0ZXJUYXNrQ29tcGFyYXRvciddLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgc2VsZi51cGRhdGVWaXNpYmxlVGFza3MoKTsKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy5nYW50dC4kc2NvcGUuJHdhdGNoR3JvdXAoWydmaWx0ZXJSb3cnLCAnZmlsdGVyUm93Q29tcGFyYXRvciddLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgc2VsZi51cGRhdGVWaXNpYmxlUm93cygpOwogICAgICAgIH0pOwoKICAgICAgICB0aGlzLmdhbnR0LiRzY29wZS4kd2F0Y2goJ3NvcnRNb2RlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNlbGYuc29ydFJvd3MoKTsKICAgICAgICB9KTsKCiAgICAgICAgdGhpcy51cGRhdGVWaXNpYmxlT2JqZWN0cygpOwoKICAgICAgICB0aGlzLmdhbnR0LmFwaS5yZWdpc3Rlck1ldGhvZCgncm93cycsICdzb3J0JywgUm93c01hbmFnZXIucHJvdG90eXBlLnNvcnRSb3dzLCB0aGlzKTsKICAgICAgICB0aGlzLmdhbnR0LmFwaS5yZWdpc3Rlck1ldGhvZCgncm93cycsICdzd2FwJywgUm93c01hbmFnZXIucHJvdG90eXBlLnN3YXBSb3dzLCB0aGlzKTsKCiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJFdmVudCgndGFza3MnLCAnYWRkJyk7CiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJFdmVudCgndGFza3MnLCAnY2hhbmdlJyk7CiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJFdmVudCgndGFza3MnLCAncmVtb3ZlJyk7CgogICAgICAgIHRoaXMuZ2FudHQuYXBpLnJlZ2lzdGVyRXZlbnQoJ3Rhc2tzJywgJ2ZpbHRlcicpOwoKICAgICAgICB0aGlzLmdhbnR0LmFwaS5yZWdpc3RlckV2ZW50KCdyb3dzJywgJ2FkZCcpOwogICAgICAgIHRoaXMuZ2FudHQuYXBpLnJlZ2lzdGVyRXZlbnQoJ3Jvd3MnLCAnY2hhbmdlJyk7CiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJFdmVudCgncm93cycsICdyZW1vdmUnKTsKICAgICAgICB0aGlzLmdhbnR0LmFwaS5yZWdpc3RlckV2ZW50KCdyb3dzJywgJ29yZGVyQ2hhbmdlJyk7CgogICAgICAgIHRoaXMuZ2FudHQuYXBpLnJlZ2lzdGVyRXZlbnQoJ3Jvd3MnLCAnZmlsdGVyJyk7CgogICAgfTsKCiAgICBSb3dzTWFuYWdlci5wcm90b3R5cGUuYWRkUm93ID0gZnVuY3Rpb24ocm93RGF0YSkgewogICAgICAgIC8vIENvcHkgdG8gbmV3IHJvdyAoYWRkKSBvciBtZXJnZSB3aXRoIGV4aXN0aW5nICh1cGRhdGUpCiAgICAgICAgdmFyIHJvdywgaXNVcGRhdGUgPSBmYWxzZTsKCiAgICAgICAgaWYgKHJvd0RhdGEuaWQgaW4gdGhpcy5yb3dzTWFwKSB7CiAgICAgICAgICAgIHJvdyA9IHRoaXMucm93c01hcFtyb3dEYXRhLmlkXTsKICAgICAgICAgICAgcm93LmNvcHkocm93RGF0YSk7CiAgICAgICAgICAgIGlzVXBkYXRlID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy5nYW50dC5hcGkucm93cy5yYWlzZS5jaGFuZ2Uocm93KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgb3JkZXIgPSByb3dEYXRhLm9yZGVyOwoKICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHJvdyBoYXMgYSBvcmRlciBwcmVkZWZpbmVkLiBJZiBub3QgYXNzaWduIG9uZQogICAgICAgICAgICBpZiAob3JkZXIgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgb3JkZXIgPSB0aGlzLmhpZ2hlc3RSb3dPcmRlcjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG9yZGVyID49IHRoaXMuaGlnaGVzdFJvd09yZGVyKSB7CiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hlc3RSb3dPcmRlciA9IG9yZGVyICsgMTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcm93ID0gbmV3IFJvdyhyb3dEYXRhLmlkLCB0aGlzLCByb3dEYXRhLm5hbWUsIG9yZGVyLCByb3dEYXRhLmhlaWdodCwgcm93RGF0YS5jb2xvciwgcm93RGF0YS5jbGFzc2VzLCByb3dEYXRhLmRhdGEpOwogICAgICAgICAgICB0aGlzLnJvd3NNYXBbcm93RGF0YS5pZF0gPSByb3c7CiAgICAgICAgICAgIHRoaXMucm93cy5wdXNoKHJvdyk7CiAgICAgICAgICAgIHRoaXMuZmlsdGVyZWRSb3dzLnB1c2gocm93KTsKICAgICAgICAgICAgdGhpcy52aXNpYmxlUm93cy5wdXNoKHJvdyk7CiAgICAgICAgICAgIHRoaXMuZ2FudHQuYXBpLnJvd3MucmFpc2UuYWRkKHJvdyk7CiAgICAgICAgfQoKICAgICAgICBpZiAocm93RGF0YS50YXNrcyAhPT0gdW5kZWZpbmVkICYmIHJvd0RhdGEudGFza3MubGVuZ3RoID4gMCkgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJvd0RhdGEudGFza3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgICAgICByb3cuYWRkVGFzayhyb3dEYXRhLnRhc2tzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gaXNVcGRhdGU7CiAgICB9OwoKICAgIFJvd3NNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmVSb3cgPSBmdW5jdGlvbihyb3dJZCkgewogICAgICAgIGlmIChyb3dJZCBpbiB0aGlzLnJvd3NNYXApIHsKICAgICAgICAgICAgZGVsZXRlIHRoaXMucm93c01hcFtyb3dJZF07IC8vIFJlbW92ZSBmcm9tIG1hcAoKICAgICAgICAgICAgdmFyIHJlbW92ZWRSb3c7CiAgICAgICAgICAgIHZhciByb3c7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnJvd3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgICAgICAgIHJvdyA9IHRoaXMucm93c1tpXTsKICAgICAgICAgICAgICAgIGlmIChyb3cuaWQgPT09IHJvd0lkKSB7CiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZFJvdyA9IHJvdzsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd3Muc3BsaWNlKGksIDEpOyAvLyBSZW1vdmUgZnJvbSBhcnJheQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKGkgPSB0aGlzLmZpbHRlcmVkUm93cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgICAgICAgICAgcm93ID0gdGhpcy5maWx0ZXJlZFJvd3NbaV07CiAgICAgICAgICAgICAgICBpZiAocm93LmlkID09PSByb3dJZCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyZWRSb3dzLnNwbGljZShpLCAxKTsgLy8gUmVtb3ZlIGZyb20gZmlsdGVyZWQgYXJyYXkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yIChpID0gdGhpcy52aXNpYmxlUm93cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgICAgICAgICAgcm93ID0gdGhpcy52aXNpYmxlUm93c1tpXTsKICAgICAgICAgICAgICAgIGlmIChyb3cuaWQgPT09IHJvd0lkKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy52aXNpYmxlUm93cy5zcGxpY2UoaSwgMSk7IC8vIFJlbW92ZSBmcm9tIHZpc2libGUgYXJyYXkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5nYW50dC5hcGkucm93cy5yYWlzZS5yZW1vdmUocmVtb3ZlZFJvdyk7CiAgICAgICAgICAgIHJldHVybiByb3c7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfTsKCiAgICBSb3dzTWFuYWdlci5wcm90b3R5cGUucmVtb3ZlRGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgIHZhciByb3dEYXRhID0gZGF0YVtpXTsKICAgICAgICAgICAgdmFyIHJvdzsKCiAgICAgICAgICAgIGlmIChyb3dEYXRhLnRhc2tzICE9PSB1bmRlZmluZWQgJiYgcm93RGF0YS50YXNrcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAvLyBPbmx5IGRlbGV0ZSB0aGUgc3BlY2lmaWVkIHRhc2tzIGJ1dCBub3QgdGhlIHJvdyBhbmQgdGhlIG90aGVyIHRhc2tzCgogICAgICAgICAgICAgICAgaWYgKHJvd0RhdGEuaWQgaW4gdGhpcy5yb3dzTWFwKSB7CiAgICAgICAgICAgICAgICAgICAgcm93ID0gdGhpcy5yb3dzTWFwW3Jvd0RhdGEuaWRdOwoKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgayA9IHJvd0RhdGEudGFza3MubGVuZ3RoOyBqIDwgazsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5yZW1vdmVUYXNrKHJvd0RhdGEudGFza3Nbal0uaWQpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW50dC5hcGkucm93cy5yYWlzZS5jaGFuZ2Uocm93KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgY29tcGxldGUgcm93CiAgICAgICAgICAgICAgICByb3cgPSB0aGlzLnJlbW92ZVJvdyhyb3dEYXRhLmlkKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLnVwZGF0ZVZpc2libGVPYmplY3RzKCk7CiAgICB9OwoKICAgIFJvd3NNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmVBbGwgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLnJvd3NNYXAgPSB7fTsKICAgICAgICB0aGlzLnJvd3MgPSBbXTsKICAgICAgICB0aGlzLmZpbHRlcmVkUm93cyA9IFtdOwogICAgICAgIHRoaXMudmlzaWJsZVJvd3MgPSBbXTsKICAgIH07CgogICAgUm93c01hbmFnZXIucHJvdG90eXBlLnNvcnRSb3dzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLmdhbnR0LiRzY29wZS5zb3J0TW9kZTsKCiAgICAgICAgdmFyIHJldmVyc2UgPSBmYWxzZTsKICAgICAgICBpZiAoZXhwcmVzc2lvbi5jaGFyQXQoMCkgPT09ICctJykgewogICAgICAgICAgICByZXZlcnNlID0gdHJ1ZTsKICAgICAgICAgICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24uc3Vic3RyKDEpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGFuZ3VsYXJPcmRlckJ5ID0gJGZpbHRlcignb3JkZXJCeScpOwogICAgICAgIGlmIChleHByZXNzaW9uID09PSAnY3VzdG9tJykgewogICAgICAgICAgICB0aGlzLnJvd3MgPSBhbmd1bGFyT3JkZXJCeSh0aGlzLnJvd3MsICdvcmRlcicsIHJldmVyc2UpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMucm93cyA9IGFuZ3VsYXJPcmRlckJ5KHRoaXMucm93cywgZXhwcmVzc2lvbiwgcmV2ZXJzZSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnVwZGF0ZVZpc2libGVSb3dzKCk7CiAgICB9OwoKICAgIC8vIFN3YXBzIHR3byByb3dzIGFuZCBjaGFuZ2VzIHRoZSBzb3J0IG9yZGVyIHRvIGN1c3RvbSB0byBkaXNwbGF5IHRoZSBzd2FwcGVkIHJvd3MKICAgIFJvd3NNYW5hZ2VyLnByb3RvdHlwZS5zd2FwUm93cyA9IGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAvLyBTd2FwIHRoZSB0d28gcm93cwogICAgICAgIHZhciBvcmRlciA9IGEub3JkZXI7CiAgICAgICAgYS5vcmRlciA9IGIub3JkZXI7CiAgICAgICAgYi5vcmRlciA9IG9yZGVyOwoKICAgICAgICAvLyBSYWlzZSBjaGFuZ2UgZXZlbnRzCiAgICAgICAgdGhpcy5nYW50dC5hcGkucm93cy5yYWlzZS5jaGFuZ2UoYSk7CiAgICAgICAgdGhpcy5nYW50dC5hcGkucm93cy5yYWlzZS5vcmRlckNoYW5nZShhKTsKICAgICAgICB0aGlzLmdhbnR0LmFwaS5yb3dzLnJhaXNlLmNoYW5nZShiKTsKICAgICAgICB0aGlzLmdhbnR0LmFwaS5yb3dzLnJhaXNlLm9yZGVyQ2hhbmdlKGIpOwoKICAgICAgICAvLyBTd2l0Y2ggdG8gY3VzdG9tIHNvcnQgbW9kZSBhbmQgdHJpZ2dlciBzb3J0CiAgICAgICAgaWYgKHRoaXMuZ2FudHQuJHNjb3BlLnNvcnRNb2RlICE9PSAnY3VzdG9tJykgewogICAgICAgICAgICB0aGlzLmdhbnR0LiRzY29wZS5zb3J0TW9kZSA9ICdjdXN0b20nOyAvLyBTb3J0IHdpbGwgYmUgdHJpZ2dlcmVkIGJ5IHRoZSB3YXRjaGVyCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5zb3J0Um93cygpOwogICAgICAgIH0KICAgIH07CgogICAgUm93c01hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVZpc2libGVPYmplY3RzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy51cGRhdGVWaXNpYmxlUm93cygpOwogICAgICAgIHRoaXMudXBkYXRlVmlzaWJsZVRhc2tzKCk7CiAgICB9OwoKICAgIFJvd3NNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVWaXNpYmxlUm93cyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBvbGRGaWx0ZXJlZFJvd3MgPSB0aGlzLmZpbHRlcmVkUm93czsKICAgICAgICBpZiAodGhpcy5nYW50dC4kc2NvcGUuZmlsdGVyUm93KSB7CiAgICAgICAgICAgIHRoaXMuZmlsdGVyZWRSb3dzID0gJGZpbHRlcignZmlsdGVyJykodGhpcy5yb3dzLCB0aGlzLmdhbnR0LiRzY29wZS5maWx0ZXJSb3csIHRoaXMuZ2FudHQuJHNjb3BlLmZpbHRlclJvd0NvbXBhcmF0b3IpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuZmlsdGVyZWRSb3dzID0gdGhpcy5yb3dzLnNsaWNlKDApOwogICAgICAgIH0KCgogICAgICAgIHZhciByYWlzZUV2ZW50ID0gIWFuZ3VsYXIuZXF1YWxzKG9sZEZpbHRlcmVkUm93cywgdGhpcy5maWx0ZXJlZFJvd3MpOwoKICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgcm93TGltaXQgbGlrZSBjb2x1bW5MaW1pdCB0byBlbmhhbmNlIHBlcmZvcm1hbmNlIGZvciBnYW50dCB3aXRoIG1hbnkgcm93cwogICAgICAgIHRoaXMudmlzaWJsZVJvd3MgPSB0aGlzLmZpbHRlcmVkUm93czsKICAgICAgICBpZiAocmFpc2VFdmVudCkgewogICAgICAgICAgICB0aGlzLmdhbnR0LmFwaS5yb3dzLnJhaXNlLmZpbHRlcih0aGlzLnJvd3MsIHRoaXMuZmlsdGVyZWRSb3dzKTsKICAgICAgICB9CiAgICB9OwoKICAgIFJvd3NNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVWaXNpYmxlVGFza3MgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgb2xkRmlsdGVyZWRUYXNrcyA9IFtdOwogICAgICAgIHZhciBmaWx0ZXJlZFRhc2tzID0gW107CiAgICAgICAgdmFyIHRhc2tzID0gW107CgogICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmZpbHRlcmVkUm93cywgZnVuY3Rpb24ocm93KSB7CiAgICAgICAgICAgIG9sZEZpbHRlcmVkVGFza3MgPSBvbGRGaWx0ZXJlZFRhc2tzLmNvbmNhdChyb3cuZmlsdGVyZWRUYXNrcyk7CiAgICAgICAgICAgIHJvdy51cGRhdGVWaXNpYmxlVGFza3MoKTsKICAgICAgICAgICAgZmlsdGVyZWRUYXNrcyA9IGZpbHRlcmVkVGFza3MuY29uY2F0KHJvdy5maWx0ZXJlZFRhc2tzKTsKICAgICAgICAgICAgdGFza3MgPSB0YXNrcy5jb25jYXQocm93LnRhc2tzKTsKICAgICAgICB9KTsKCiAgICAgICAgdmFyIGZpbHRlckV2ZW50ID0gIWFuZ3VsYXIuZXF1YWxzKG9sZEZpbHRlcmVkVGFza3MsIGZpbHRlcmVkVGFza3MpOwoKICAgICAgICBpZiAoZmlsdGVyRXZlbnQpIHsKICAgICAgICAgICAgdGhpcy5nYW50dC5hcGkudGFza3MucmFpc2UuZmlsdGVyKHRhc2tzLCBmaWx0ZXJlZFRhc2tzKTsKICAgICAgICB9CiAgICB9OwoKICAgIC8vIFVwZGF0ZSB0aGUgcG9zaXRpb24vc2l6ZSBvZiBhbGwgdGFza3MgaW4gdGhlIEdhbnR0CiAgICBSb3dzTWFuYWdlci5wcm90b3R5cGUudXBkYXRlVGFza3NQb3NBbmRTaXplID0gZnVuY3Rpb24oKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnJvd3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXMucm93c1tpXS51cGRhdGVUYXNrc1Bvc0FuZFNpemUoKTsKICAgICAgICB9CiAgICB9OwoKICAgIFJvd3NNYW5hZ2VyLnByb3RvdHlwZS5nZXRFeHBhbmRlZEZyb20gPSBmdW5jdGlvbihmcm9tKSB7CiAgICAgICAgZnJvbSA9IGZyb20gPyBtb21lbnQoZnJvbSkgOiBmcm9tOwoKICAgICAgICB2YXIgbWluUm93RnJvbSA9IGZyb207CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMucm93cywgZnVuY3Rpb24ocm93KSB7CiAgICAgICAgICAgIGlmIChtaW5Sb3dGcm9tID09PSB1bmRlZmluZWQgfHwgbWluUm93RnJvbSA+IHJvdy5mcm9tKSB7CiAgICAgICAgICAgICAgICBtaW5Sb3dGcm9tID0gcm93LmZyb207CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBpZiAobWluUm93RnJvbSAmJiAoIWZyb20gfHwgbWluUm93RnJvbSA8IGZyb20pKSB7CiAgICAgICAgICAgIHJldHVybiBtaW5Sb3dGcm9tOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZnJvbTsKICAgIH07CgogICAgUm93c01hbmFnZXIucHJvdG90eXBlLmdldEV4cGFuZGVkVG8gPSBmdW5jdGlvbih0bykgewogICAgICAgIHRvID0gdG8gPyBtb21lbnQodG8pIDogdG87CgogICAgICAgIHZhciBtYXhSb3dUbyA9IHRvOwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLnJvd3MsIGZ1bmN0aW9uKHJvdykgewogICAgICAgICAgICBpZiAobWF4Um93VG8gPT09IHVuZGVmaW5lZCB8fCBtYXhSb3dUbyA8IHJvdy50bykgewogICAgICAgICAgICAgICAgbWF4Um93VG8gPSByb3cudG87CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBpZiAobWF4Um93VG8gJiYgKCF0aGlzLmdhbnR0LiRzY29wZS50b0RhdGUgfHwgbWF4Um93VG8gPiB0aGlzLmdhbnR0LiRzY29wZS50b0RhdGUpKSB7CiAgICAgICAgICAgIHJldHVybiBtYXhSb3dUbzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRvOwogICAgfTsKCiAgICBSb3dzTWFuYWdlci5wcm90b3R5cGUuZ2V0RGVmYXVsdEZyb20gPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZGVmYXVsdEZyb207CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMucm93cywgZnVuY3Rpb24ocm93KSB7CiAgICAgICAgICAgIGlmIChkZWZhdWx0RnJvbSA9PT0gdW5kZWZpbmVkIHx8IHJvdy5mcm9tIDwgZGVmYXVsdEZyb20pIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRGcm9tID0gcm93LmZyb207CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZGVmYXVsdEZyb207CiAgICB9OwoKICAgIFJvd3NNYW5hZ2VyLnByb3RvdHlwZS5nZXREZWZhdWx0VG8gPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZGVmYXVsdFRvOwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLnJvd3MsIGZ1bmN0aW9uKHJvdykgewogICAgICAgICAgICBpZiAoZGVmYXVsdFRvID09PSB1bmRlZmluZWQgfHwgcm93LnRvID4gZGVmYXVsdFRvKSB7CiAgICAgICAgICAgICAgICBkZWZhdWx0VG8gPSByb3cudG87CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZGVmYXVsdFRvOwogICAgfTsKCiAgICByZXR1cm4gUm93c01hbmFnZXI7Cn1dKTsKCgpnYW50dC5mYWN0b3J5KCdHYW50dFRhc2snLCBbJ21vbWVudCcsICdHYW50dFRhc2tQcm9ncmVzcycsIGZ1bmN0aW9uKG1vbWVudCwgVGFza1Byb2dyZXNzKSB7CiAgICB2YXIgVGFzayA9IGZ1bmN0aW9uKGlkLCByb3csIG5hbWUsIGNvbG9yLCBjbGFzc2VzLCBwcmlvcml0eSwgZnJvbSwgdG8sIGRhdGEsIGVzdCwgbGN0LCBwcm9ncmVzcykgewogICAgICAgIHRoaXMuaWQgPSBpZDsKICAgICAgICB0aGlzLnJvd3NNYW5hZ2VyID0gcm93LnJvd3NNYW5hZ2VyOwogICAgICAgIHRoaXMucm93ID0gcm93OwogICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yOwogICAgICAgIHRoaXMuY2xhc3NlcyA9IGNsYXNzZXM7CiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5OwogICAgICAgIHRoaXMuZnJvbSA9IG1vbWVudChmcm9tKTsKICAgICAgICB0aGlzLnRvID0gbW9tZW50KHRvKTsKICAgICAgICB0aGlzLnRydW5jYXRlZExlZnQgPSBmYWxzZTsKICAgICAgICB0aGlzLnRydW5jYXRlZFJpZ2h0ID0gZmFsc2U7CiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTsKCiAgICAgICAgaWYgKHByb2dyZXNzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9ncmVzcyA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBuZXcgVGFza1Byb2dyZXNzKHRoaXMsIHByb2dyZXNzLnBlcmNlbnQsIHByb2dyZXNzLmNvbG9yLCBwcm9ncmVzcy5jbGFzc2VzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBuZXcgVGFza1Byb2dyZXNzKHRoaXMsIHByb2dyZXNzKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGVzdCAhPT0gdW5kZWZpbmVkICYmIGxjdCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHRoaXMuZXN0ID0gbW9tZW50KGVzdCk7ICAvL0VhcmxpZXN0IFN0YXJ0IFRpbWUKICAgICAgICAgICAgdGhpcy5sY3QgPSBtb21lbnQobGN0KTsgIC8vTGF0ZXN0IENvbXBsZXRpb24gVGltZQogICAgICAgIH0KCiAgICAgICAgdGhpcy5fZnJvbUxhYmVsID0gdW5kZWZpbmVkOwogICAgICAgIHRoaXMuX3RvTGFiZWwgPSB1bmRlZmluZWQ7CiAgICB9OwoKCiAgICBUYXNrLnByb3RvdHlwZS5nZXRGcm9tTGFiZWwgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAodGhpcy5fZnJvbUxhYmVsID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdGhpcy5fZnJvbUxhYmVsID0gdGhpcy5mcm9tLmZvcm1hdCh0aGlzLnJvd3NNYW5hZ2VyLmdhbnR0LiRzY29wZS50b29sdGlwRGF0ZUZvcm1hdCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLl9mcm9tTGFiZWw7CiAgICB9OwoKICAgIFRhc2sucHJvdG90eXBlLmdldFRvTGFiZWwgPSBmdW5jdGlvbigpIHsKICAgICAgICBpZiAodGhpcy5fdG9MYWJlbCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHRoaXMuX3RvTGFiZWwgPSB0aGlzLnRvLmZvcm1hdCh0aGlzLnJvd3NNYW5hZ2VyLmdhbnR0LiRzY29wZS50b29sdGlwRGF0ZUZvcm1hdCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLl90b0xhYmVsOwogICAgfTsKCiAgICBUYXNrLnByb3RvdHlwZS5jaGVja0lmTWlsZXN0b25lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy5pc01pbGVzdG9uZSA9IHRoaXMuZnJvbSAtIHRoaXMudG8gPT09IDA7CiAgICB9OwoKICAgIFRhc2sucHJvdG90eXBlLmNoZWNrSWZNaWxlc3RvbmUoKTsKCiAgICAvLyBVcGRhdGVzIHRoZSBwb3MgYW5kIHNpemUgb2YgdGhlIHRhc2sgYWNjb3JkaW5nIHRvIHRoZSBmcm9tIC0gdG8gZGF0ZQogICAgVGFzay5wcm90b3R5cGUudXBkYXRlUG9zQW5kU2l6ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMubW9kZWxMZWZ0ID0gdGhpcy5yb3dzTWFuYWdlci5nYW50dC5nZXRQb3NpdGlvbkJ5RGF0ZSh0aGlzLmZyb20pOwogICAgICAgIHRoaXMubW9kZWxXaWR0aCA9IHRoaXMucm93c01hbmFnZXIuZ2FudHQuZ2V0UG9zaXRpb25CeURhdGUodGhpcy50bykgLSB0aGlzLm1vZGVsTGVmdDsKCiAgICAgICAgdGhpcy5vdXRPZlJhbmdlID0gdGhpcy5tb2RlbExlZnQgKyB0aGlzLm1vZGVsV2lkdGggPCAwIHx8IHRoaXMubW9kZWxMZWZ0ID4gdGhpcy5yb3dzTWFuYWdlci5nYW50dC53aWR0aDsKCiAgICAgICAgdGhpcy5sZWZ0ID0gTWF0aC5taW4oTWF0aC5tYXgodGhpcy5tb2RlbExlZnQsIDApLCB0aGlzLnJvd3NNYW5hZ2VyLmdhbnR0LndpZHRoKTsKICAgICAgICBpZiAodGhpcy5tb2RlbExlZnQgPCAwKSB7CiAgICAgICAgICAgIHRoaXMudHJ1bmNhdGVkTGVmdCA9IHRydWU7CiAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsV2lkdGggKyB0aGlzLm1vZGVsTGVmdCA+IHRoaXMucm93c01hbmFnZXIuZ2FudHQud2lkdGgpIHsKICAgICAgICAgICAgICAgIHRoaXMudHJ1bmNhdGVkUmlnaHQgPSB0cnVlOwogICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMucm93c01hbmFnZXIuZ2FudHQud2lkdGg7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLnRydW5jYXRlZFJpZ2h0ID0gZmFsc2U7CiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5tb2RlbFdpZHRoICsgdGhpcy5tb2RlbExlZnQ7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZWxXaWR0aCArIHRoaXMubW9kZWxMZWZ0ID4gdGhpcy5yb3dzTWFuYWdlci5nYW50dC53aWR0aCkgewogICAgICAgICAgICB0aGlzLnRydW5jYXRlZFJpZ2h0ID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy50cnVuY2F0ZWRMZWZ0ID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnJvd3NNYW5hZ2VyLmdhbnR0LndpZHRoIC0gdGhpcy5tb2RlbExlZnQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy50cnVuY2F0ZWRMZWZ0ID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMudHJ1bmNhdGVkUmlnaHQgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMubW9kZWxXaWR0aDsKICAgICAgICB9CiAgICB9OwoKICAgIC8vIEV4cGFuZHMgdGhlIHN0YXJ0IG9mIHRoZSB0YXNrIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24gKGluIGVtKQogICAgVGFzay5wcm90b3R5cGUuc2V0RnJvbSA9IGZ1bmN0aW9uKHgpIHsKICAgICAgICB0aGlzLmZyb20gPSB0aGlzLnJvd3NNYW5hZ2VyLmdhbnR0LmdldERhdGVCeVBvc2l0aW9uKHgsIHRydWUpOwogICAgICAgIHRoaXMuX2Zyb21MYWJlbCA9IHVuZGVmaW5lZDsKICAgICAgICB0aGlzLnJvdy5zZXRGcm9tVG9CeVRhc2sodGhpcyk7CiAgICAgICAgdGhpcy51cGRhdGVQb3NBbmRTaXplKCk7CiAgICAgICAgdGhpcy5jaGVja0lmTWlsZXN0b25lKCk7CiAgICB9OwoKICAgIC8vIEV4cGFuZHMgdGhlIGVuZCBvZiB0aGUgdGFzayB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uIChpbiBlbSkKICAgIFRhc2sucHJvdG90eXBlLnNldFRvID0gZnVuY3Rpb24oeCkgewogICAgICAgIHRoaXMudG8gPSB0aGlzLnJvd3NNYW5hZ2VyLmdhbnR0LmdldERhdGVCeVBvc2l0aW9uKHgsIHRydWUpOwogICAgICAgIHRoaXMuX3RvTGFiZWwgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy5yb3cuc2V0RnJvbVRvQnlUYXNrKHRoaXMpOwogICAgICAgIHRoaXMudXBkYXRlUG9zQW5kU2l6ZSgpOwogICAgICAgIHRoaXMuY2hlY2tJZk1pbGVzdG9uZSgpOwogICAgfTsKCiAgICAvLyBNb3ZlcyB0aGUgdGFzayB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uIChpbiBlbSkKICAgIFRhc2sucHJvdG90eXBlLm1vdmVUbyA9IGZ1bmN0aW9uKHgpIHsKICAgICAgICB0aGlzLmZyb20gPSB0aGlzLnJvd3NNYW5hZ2VyLmdhbnR0LmdldERhdGVCeVBvc2l0aW9uKHgsIHRydWUpOwogICAgICAgIHRoaXMuX2Zyb21MYWJlbCA9IHVuZGVmaW5lZDsKICAgICAgICB2YXIgbmV3VGFza0xlZnQgPSB0aGlzLnJvd3NNYW5hZ2VyLmdhbnR0LmdldFBvc2l0aW9uQnlEYXRlKHRoaXMuZnJvbSk7CiAgICAgICAgdGhpcy50byA9IHRoaXMucm93c01hbmFnZXIuZ2FudHQuZ2V0RGF0ZUJ5UG9zaXRpb24obmV3VGFza0xlZnQgKyB0aGlzLm1vZGVsV2lkdGgsIHRydWUpOwogICAgICAgIHRoaXMuX3RvTGFiZWwgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy5yb3cuc2V0RnJvbVRvQnlUYXNrKHRoaXMpOwogICAgICAgIHRoaXMudXBkYXRlUG9zQW5kU2l6ZSgpOwogICAgfTsKCiAgICBUYXNrLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24odGFzaykgewogICAgICAgIHRoaXMubmFtZSA9IHRhc2submFtZTsKICAgICAgICB0aGlzLmNvbG9yID0gdGFzay5jb2xvcjsKICAgICAgICB0aGlzLmNsYXNzZXMgPSB0YXNrLmNsYXNzZXM7CiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHRhc2sucHJpb3JpdHk7CiAgICAgICAgdGhpcy5mcm9tID0gbW9tZW50KHRhc2suZnJvbSk7CiAgICAgICAgdGhpcy50byA9IG1vbWVudCh0YXNrLnRvKTsKICAgICAgICB0aGlzLmVzdCA9IHRhc2suZXN0ICE9PSB1bmRlZmluZWQgPyBtb21lbnQodGFzay5lc3QpIDogdW5kZWZpbmVkOwogICAgICAgIHRoaXMubGN0ID0gdGFzay5sY3QgIT09IHVuZGVmaW5lZCA/IG1vbWVudCh0YXNrLmxjdCkgOiB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy5kYXRhID0gdGFzay5kYXRhOwogICAgICAgIHRoaXMuaXNNaWxlc3RvbmUgPSB0YXNrLmlzTWlsZXN0b25lOwogICAgfTsKCiAgICBUYXNrLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBuZXcgVGFzayh0aGlzLmlkLCB0aGlzLnJvdywgdGhpcy5uYW1lLCB0aGlzLmNvbG9yLCB0aGlzLmNsYXNzZXMsIHRoaXMucHJpb3JpdHksIHRoaXMuZnJvbSwgdGhpcy50bywgdGhpcy5kYXRhLCB0aGlzLmVzdCwgdGhpcy5sY3QsIHRoaXMucHJvZ3Jlc3MpOwogICAgfTsKCiAgICByZXR1cm4gVGFzazsKfV0pOwoKCmdhbnR0LmZhY3RvcnkoJ0dhbnR0VGFza1Byb2dyZXNzJywgW2Z1bmN0aW9uKCkgewogICAgdmFyIFRhc2tQcm9ncmVzcyA9IGZ1bmN0aW9uKHRhc2ssIHBlcmNlbnQsIGNvbG9yLCBjbGFzc2VzKSB7CiAgICAgICAgdGhpcy50YXNrID0gdGFzazsKICAgICAgICB0aGlzLnBlcmNlbnQgPSBwZXJjZW50OwogICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjsKICAgICAgICB0aGlzLmNsYXNzZXMgPSBjbGFzc2VzOwogICAgfTsKCiAgICBUYXNrUHJvZ3Jlc3MucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIG5ldyBUYXNrUHJvZ3Jlc3ModGhpcy50YXNrLCB0aGlzLnBlcmNlbnQsIHRoaXMuY29sb3IsIHRoaXMuY2xhc3Nlcyk7CiAgICB9OwoKICAgIHJldHVybiBUYXNrUHJvZ3Jlc3M7Cn1dKTsKCgpnYW50dC5mYWN0b3J5KCdHYW50dEJvZHknLCBbJ0dhbnR0Qm9keUNvbHVtbnMnLCAnR2FudHRCb2R5Um93cycsIGZ1bmN0aW9uKEJvZHlDb2x1bW5zLCBCb2R5Um93cykgewogICAgdmFyIEJvZHk9IGZ1bmN0aW9uKGdhbnR0KSB7CiAgICAgICAgdGhpcy5nYW50dCA9IGdhbnR0OwoKICAgICAgICB0aGlzLmNvbHVtbnMgPSBuZXcgQm9keUNvbHVtbnModGhpcyk7CiAgICAgICAgdGhpcy5yb3dzID0gbmV3IEJvZHlSb3dzKHRoaXMpOwogICAgfTsKICAgIHJldHVybiBCb2R5Owp9XSk7CgoKZ2FudHQuZmFjdG9yeSgnR2FudHRCb2R5Q29sdW1ucycsIFtmdW5jdGlvbigpIHsKICAgIHZhciBCb2R5Q29sdW1ucyA9IGZ1bmN0aW9uKCRlbGVtZW50KSB7CiAgICAgICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50OwogICAgfTsKICAgIHJldHVybiBCb2R5Q29sdW1uczsKfV0pOwoKCmdhbnR0LmZhY3RvcnkoJ0dhbnR0Qm9keVJvd3MnLCBbZnVuY3Rpb24oKSB7CiAgICB2YXIgQm9keVJvd3MgPSBmdW5jdGlvbigkZWxlbWVudCkgewogICAgICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDsKICAgIH07CiAgICByZXR1cm4gQm9keVJvd3M7Cn1dKTsKCgpnYW50dC5mYWN0b3J5KCdHYW50dEhlYWRlcicsIFsnR2FudHRIZWFkZXJDb2x1bW5zJywgZnVuY3Rpb24oSGVhZGVyQ29sdW1ucykgewogICAgdmFyIEhlYWRlciA9IGZ1bmN0aW9uKGdhbnR0KSB7CiAgICAgICAgdGhpcy5nYW50dCA9IGdhbnR0OwogICAgICAgIHRoaXMuY29sdW1ucyA9IG5ldyBIZWFkZXJDb2x1bW5zKHRoaXMpOwoKICAgICAgICB0aGlzLmdldEhlaWdodCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudFswXS5vZmZzZXRIZWlnaHQ7CiAgICAgICAgfTsKICAgIH07CiAgICByZXR1cm4gSGVhZGVyOwp9XSk7CgoKZ2FudHQuZmFjdG9yeSgnR2FudHRIZWFkZXJDb2x1bW5zJywgW2Z1bmN0aW9uKCkgewogICAgdmFyIEhlYWRlckNvbHVtbnMgPSBmdW5jdGlvbigkZWxlbWVudCkgewogICAgICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDsKICAgIH07CiAgICByZXR1cm4gSGVhZGVyQ29sdW1uczsKfV0pOwoKCmdhbnR0LmZhY3RvcnkoJ0dhbnR0TGFiZWxzJywgW2Z1bmN0aW9uKCkgewogICAgdmFyIExhYmVscz0gZnVuY3Rpb24oZ2FudHQpIHsKICAgICAgICB0aGlzLmdhbnR0ID0gZ2FudHQ7CiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJFdmVudCgnbGFiZWxzJywgJ3Jlc2l6ZScpOwogICAgfTsKICAgIHJldHVybiBMYWJlbHM7Cn1dKTsKCgpnYW50dC5mYWN0b3J5KCdHYW50dFNjcm9sbCcsIFtmdW5jdGlvbigpIHsKICAgIHZhciBTY3JvbGwgPSBmdW5jdGlvbihnYW50dCkgewogICAgICAgIHRoaXMuZ2FudHQgPSBnYW50dDsKCiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJFdmVudCgnc2Nyb2xsJywgJ3Njcm9sbCcpOwoKICAgICAgICB0aGlzLmdhbnR0LmFwaS5yZWdpc3Rlck1ldGhvZCgnc2Nyb2xsJywgJ3RvJywgU2Nyb2xsLnByb3RvdHlwZS5zY3JvbGxUbywgdGhpcyk7CiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJNZXRob2QoJ3Njcm9sbCcsICd0b0RhdGUnLCBTY3JvbGwucHJvdG90eXBlLnNjcm9sbFRvRGF0ZSwgdGhpcyk7CiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJNZXRob2QoJ3Njcm9sbCcsICdsZWZ0JywgU2Nyb2xsLnByb3RvdHlwZS5zY3JvbGxUb0xlZnQsIHRoaXMpOwogICAgICAgIHRoaXMuZ2FudHQuYXBpLnJlZ2lzdGVyTWV0aG9kKCdzY3JvbGwnLCAncmlnaHQnLCBTY3JvbGwucHJvdG90eXBlLnNjcm9sbFRvUmlnaHQsIHRoaXMpOwogICAgfTsKCiAgICAvKioKICAgICAqIFNjcm9sbCB0byBhIHBvc2l0aW9uCiAgICAgKgogICAgICogQHBhcmFtIHtudW1iZXJ9IHBvc2l0aW9uIFBvc2l0aW9uIHRvIHNjcm9sbCB0by4KICAgICAqLwogICAgU2Nyb2xsLnByb3RvdHlwZS5zY3JvbGxUbyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7CiAgICAgICAgdGhpcy4kZWxlbWVudFswXS5zY3JvbGxMZWZ0ID0gcG9zaXRpb247CiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VySGFuZGxlcignc2Nyb2xsJyk7CiAgICB9OwoKICAgIC8qKgogICAgICogU2Nyb2xsIHRvIHRoZSBsZWZ0IHNpZGUKICAgICAqCiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IE9mZnNldCB0byBzY3JvbGwuCiAgICAgKi8KICAgIFNjcm9sbC5wcm90b3R5cGUuc2Nyb2xsVG9MZWZ0ID0gZnVuY3Rpb24ob2Zmc2V0KSB7CiAgICAgICAgdGhpcy4kZWxlbWVudFswXS5zY3JvbGxMZWZ0IC09IG9mZnNldDsKICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCdzY3JvbGwnKTsKICAgIH07CgogICAgLyoqCiAgICAgKiBTY3JvbGwgdG8gdGhlIHJpZ2h0IHNpZGUKICAgICAqCiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IE9mZnNldCB0byBzY3JvbGwuCiAgICAgKi8KICAgIFNjcm9sbC5wcm90b3R5cGUuc2Nyb2xsVG9SaWdodCA9IGZ1bmN0aW9uKG9mZnNldCkgewogICAgICAgIHRoaXMuJGVsZW1lbnRbMF0uc2Nyb2xsTGVmdCArPSBvZmZzZXQ7CiAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VySGFuZGxlcignc2Nyb2xsJyk7CiAgICB9OwoKICAgIC8qKgogICAgICogU2Nyb2xsIHRvIGEgZGF0ZQogICAgICoKICAgICAqIEBwYXJhbSB7bW9tZW50fSBkYXRlIG1vbWVudCB0byBzY3JvbGwgdG8uCiAgICAgKi8KICAgIFNjcm9sbC5wcm90b3R5cGUuc2Nyb2xsVG9EYXRlID0gZnVuY3Rpb24oZGF0ZSkgewogICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZ2FudHQuZ2V0UG9zaXRpb25CeURhdGUoZGF0ZSk7CgogICAgICAgIGlmIChwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnRbMF0uc2Nyb2xsTGVmdCA9IHBvc2l0aW9uIC0gdGhpcy4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvIDI7CiAgICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gU2Nyb2xsOwp9XSk7CgoKZ2FudHQuZmFjdG9yeSgnR2FudHRUaW1lc3BhbicsIFsnbW9tZW50JywgZnVuY3Rpb24obW9tZW50KSB7CiAgICB2YXIgVGltZXNwYW4gPSBmdW5jdGlvbihpZCwgZ2FudHQsIG5hbWUsIGNvbG9yLCBjbGFzc2VzLCBwcmlvcml0eSwgZnJvbSwgdG8sIGRhdGEsIGVzdCwgbGN0KSB7CiAgICAgICAgdGhpcy5pZCA9IGlkOwogICAgICAgIHRoaXMuZ2FudHQgPSBnYW50dDsKICAgICAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjsKICAgICAgICB0aGlzLmNsYXNzZXMgPSBjbGFzc2VzOwogICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTsKICAgICAgICB0aGlzLmZyb20gPSBtb21lbnQoZnJvbSk7CiAgICAgICAgdGhpcy50byA9IG1vbWVudCh0byk7CiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTsKCiAgICAgICAgaWYgKGVzdCAhPT0gdW5kZWZpbmVkICYmIGxjdCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHRoaXMuZXN0ID0gbW9tZW50KGVzdCk7ICAvL0VhcmxpZXN0IFN0YXJ0IFRpbWUKICAgICAgICAgICAgdGhpcy5sY3QgPSBtb21lbnQobGN0KTsgIC8vTGF0ZXN0IENvbXBsZXRpb24gVGltZQogICAgICAgIH0KICAgIH07CgogICAgLy8gVXBkYXRlcyB0aGUgcG9zIGFuZCBzaXplIG9mIHRoZSB0aW1lc3BhbiBhY2NvcmRpbmcgdG8gdGhlIGZyb20gLSB0byBkYXRlCiAgICBUaW1lc3Bhbi5wcm90b3R5cGUudXBkYXRlUG9zQW5kU2l6ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMubGVmdCA9IHRoaXMuZ2FudHQuZ2V0UG9zaXRpb25CeURhdGUodGhpcy5mcm9tKTsKICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5nYW50dC5nZXRQb3NpdGlvbkJ5RGF0ZSh0aGlzLnRvKSAtIHRoaXMubGVmdDsKICAgIH07CgogICAgLy8gRXhwYW5kcyB0aGUgc3RhcnQgb2YgdGhlIHRpbWVzcGFuIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24gKGluIGVtKQogICAgVGltZXNwYW4ucHJvdG90eXBlLnNldEZyb20gPSBmdW5jdGlvbih4KSB7CiAgICAgICAgdGhpcy5mcm9tID0gdGhpcy5nYW50dC5nZXREYXRlQnlQb3NpdGlvbih4KTsKICAgICAgICB0aGlzLnVwZGF0ZVBvc0FuZFNpemUoKTsKICAgIH07CgogICAgLy8gRXhwYW5kcyB0aGUgZW5kIG9mIHRoZSB0aW1lc3BhbiB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uIChpbiBlbSkKICAgIFRpbWVzcGFuLnByb3RvdHlwZS5zZXRUbyA9IGZ1bmN0aW9uKHgpIHsKICAgICAgICB0aGlzLnRvID0gdGhpcy5nYW50dC5nZXREYXRlQnlQb3NpdGlvbih4KTsKICAgICAgICB0aGlzLnVwZGF0ZVBvc0FuZFNpemUoKTsKICAgIH07CgogICAgLy8gTW92ZXMgdGhlIHRpbWVzcGFuIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24gKGluIGVtKQogICAgVGltZXNwYW4ucHJvdG90eXBlLm1vdmVUbyA9IGZ1bmN0aW9uKHgpIHsKICAgICAgICB0aGlzLmZyb20gPSB0aGlzLmdhbnR0LmdldERhdGVCeVBvc2l0aW9uKHgpOwogICAgICAgIHRoaXMudG8gPSB0aGlzLmdhbnR0LmdldERhdGVCeVBvc2l0aW9uKHggKyB0aGlzLndpZHRoKTsKICAgICAgICB0aGlzLnVwZGF0ZVBvc0FuZFNpemUoKTsKICAgIH07CgogICAgVGltZXNwYW4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbih0aW1lc3BhbikgewogICAgICAgIHRoaXMubmFtZSA9IHRpbWVzcGFuLm5hbWU7CiAgICAgICAgdGhpcy5jb2xvciA9IHRpbWVzcGFuLmNvbG9yOwogICAgICAgIHRoaXMuY2xhc3NlcyA9IHRpbWVzcGFuLmNsYXNzZXM7CiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHRpbWVzcGFuLnByaW9yaXR5OwogICAgICAgIHRoaXMuZnJvbSA9IG1vbWVudCh0aW1lc3Bhbi5mcm9tKTsKICAgICAgICB0aGlzLnRvID0gbW9tZW50KHRpbWVzcGFuLnRvKTsKICAgICAgICB0aGlzLmVzdCA9IHRpbWVzcGFuLmVzdCAhPT0gdW5kZWZpbmVkID8gbW9tZW50KHRpbWVzcGFuLmVzdCkgOiB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy5sY3QgPSB0aW1lc3Bhbi5sY3QgIT09IHVuZGVmaW5lZCA/IG1vbWVudCh0aW1lc3Bhbi5sY3QpIDogdW5kZWZpbmVkOwogICAgICAgIHRoaXMuZGF0YSA9IHRpbWVzcGFuLmRhdGE7CiAgICB9OwoKICAgIFRpbWVzcGFuLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBuZXcgVGltZXNwYW4odGhpcy5pZCwgdGhpcy5nYW50dCwgdGhpcy5uYW1lLCB0aGlzLmNvbG9yLCB0aGlzLmNsYXNzZXMsIHRoaXMucHJpb3JpdHksIHRoaXMuZnJvbSwgdGhpcy50bywgdGhpcy5kYXRhLCB0aGlzLmVzdCwgdGhpcy5sY3QpOwogICAgfTsKCiAgICByZXR1cm4gVGltZXNwYW47Cn1dKTsKCgpnYW50dC5mYWN0b3J5KCdHYW50dFRpbWVzcGFuc01hbmFnZXInLCBbJ0dhbnR0VGltZXNwYW4nLCBmdW5jdGlvbihUaW1lc3BhbikgewogICAgdmFyIEdhbnR0VGltZXNwYW5zTWFuYWdlciA9IGZ1bmN0aW9uKGdhbnR0KSB7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgICB0aGlzLmdhbnR0ID0gZ2FudHQ7CgogICAgICAgIHRoaXMudGltZXNwYW5zTWFwID0ge307CiAgICAgICAgdGhpcy50aW1lc3BhbnMgPSBbXTsKCiAgICAgICAgdGhpcy5nYW50dC4kc2NvcGUuJHdhdGNoKCd0aW1lc3BhbnMnLCBmdW5jdGlvbihuZXdWYWx1ZSkgewogICAgICAgICAgICBzZWxmLmNsZWFyVGltZXNwYW5zKCk7CiAgICAgICAgICAgIHNlbGYubG9hZFRpbWVzcGFucyhuZXdWYWx1ZSk7CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuZ2FudHQuYXBpLnJlZ2lzdGVyTWV0aG9kKCd0aW1lc3BhbnMnLCAnbG9hZCcsIHRoaXMubG9hZFRpbWVzcGFucywgdGhpcyk7CiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJNZXRob2QoJ3RpbWVzcGFucycsICdyZW1vdmUnLCB0aGlzLnJlbW92ZVRpbWVzcGFucywgdGhpcyk7CiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJNZXRob2QoJ3RpbWVzcGFucycsICdjbGVhcicsIHRoaXMuY2xlYXJUaW1lc3BhbnMsIHRoaXMpOwoKICAgICAgICB0aGlzLmdhbnR0LmFwaS5yZWdpc3RlckV2ZW50KCd0aW1lc3BhbnMnLCAnYWRkJyk7CiAgICAgICAgdGhpcy5nYW50dC5hcGkucmVnaXN0ZXJFdmVudCgndGltZXNwYW5zJywgJ3JlbW92ZScpOwogICAgICAgIHRoaXMuZ2FudHQuYXBpLnJlZ2lzdGVyRXZlbnQoJ3RpbWVzcGFucycsICdjaGFuZ2UnKTsKICAgIH07CgogICAgLy8gQWRkcyBvciB1cGRhdGVzIHRpbWVzcGFucwogICAgR2FudHRUaW1lc3BhbnNNYW5hZ2VyLnByb3RvdHlwZS5sb2FkVGltZXNwYW5zID0gZnVuY3Rpb24odGltZXNwYW5zKSB7CiAgICAgICAgaWYgKCFhbmd1bGFyLmlzQXJyYXkodGltZXNwYW5zKSkgewogICAgICAgICAgICB0aW1lc3BhbnMgPSBbdGltZXNwYW5zXTsKICAgICAgICB9CgogICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGltZXNwYW5zLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICB2YXIgdGltZXNwYW5EYXRhID0gdGltZXNwYW5zW2ldOwogICAgICAgICAgICB0aGlzLmxvYWRUaW1lc3Bhbih0aW1lc3BhbkRhdGEpOwogICAgICAgIH0KICAgIH07CgogICAgLy8gQWRkcyBhIHRpbWVzcGFuIG9yIG1lcmdlcyB0aGUgdGltZXNwYW4gaWYgdGhlcmUgaXMgYWxyZWFkeSBvbmUgd2l0aCB0aGUgc2FtZSBpZAogICAgR2FudHRUaW1lc3BhbnNNYW5hZ2VyLnByb3RvdHlwZS5sb2FkVGltZXNwYW4gPSBmdW5jdGlvbih0aW1lc3BhbkRhdGEpIHsKICAgICAgICAvLyBDb3B5IHRvIG5ldyB0aW1lc3BhbiAoYWRkKSBvciBtZXJnZSB3aXRoIGV4aXN0aW5nICh1cGRhdGUpCiAgICAgICAgdmFyIHRpbWVzcGFuLCBpc1VwZGF0ZSA9IGZhbHNlOwoKICAgICAgICBpZiAodGltZXNwYW5EYXRhLmlkIGluIHRoaXMudGltZXNwYW5zTWFwKSB7CiAgICAgICAgICAgIHRpbWVzcGFuID0gdGhpcy50aW1lc3BhbnNNYXBbdGltZXNwYW5EYXRhLmlkXTsKICAgICAgICAgICAgdGltZXNwYW4uY29weSh0aW1lc3BhbkRhdGEpOwogICAgICAgICAgICBpc1VwZGF0ZSA9IHRydWU7CiAgICAgICAgICAgIHRoaXMuZ2FudHQuYXBpLnRpbWVzcGFucy5yYWlzZS5jaGFuZ2UodGltZXNwYW4pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRpbWVzcGFuID0gbmV3IFRpbWVzcGFuKHRpbWVzcGFuRGF0YS5pZCwgdGhpcy5nYW50dCwgdGltZXNwYW5EYXRhLm5hbWUsIHRpbWVzcGFuRGF0YS5jb2xvciwKICAgICAgICAgICAgICAgIHRpbWVzcGFuRGF0YS5jbGFzc2VzLCB0aW1lc3BhbkRhdGEucHJpb3JpdHksIHRpbWVzcGFuRGF0YS5mcm9tLCB0aW1lc3BhbkRhdGEudG8sIHRpbWVzcGFuRGF0YS5kYXRhKTsKICAgICAgICAgICAgdGhpcy50aW1lc3BhbnNNYXBbdGltZXNwYW5EYXRhLmlkXSA9IHRpbWVzcGFuOwogICAgICAgICAgICB0aGlzLnRpbWVzcGFucy5wdXNoKHRpbWVzcGFuKTsKICAgICAgICAgICAgdGhpcy5nYW50dC5hcGkudGltZXNwYW5zLnJhaXNlLmFkZCh0aW1lc3Bhbik7CiAgICAgICAgfQoKICAgICAgICB0aW1lc3Bhbi51cGRhdGVQb3NBbmRTaXplKCk7CiAgICAgICAgcmV0dXJuIGlzVXBkYXRlOwogICAgfTsKCiAgICBHYW50dFRpbWVzcGFuc01hbmFnZXIucHJvdG90eXBlLnJlbW92ZVRpbWVzcGFucyA9IGZ1bmN0aW9uKHRpbWVzcGFucykgewogICAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KHRpbWVzcGFucykpIHsKICAgICAgICAgICAgdGltZXNwYW5zID0gW3RpbWVzcGFuc107CiAgICAgICAgfQoKICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRpbWVzcGFucy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgdmFyIHRpbWVzcGFuRGF0YSA9IHRpbWVzcGFuc1tpXTsKICAgICAgICAgICAgLy8gRGVsZXRlIHRoZSB0aW1lc3BhbgogICAgICAgICAgICB0aGlzLnJlbW92ZVRpbWVzcGFuKHRpbWVzcGFuRGF0YS5pZCk7CiAgICAgICAgfQogICAgICAgIHRoaXMudXBkYXRlVmlzaWJsZU9iamVjdHMoKTsKICAgIH07CgogICAgR2FudHRUaW1lc3BhbnNNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmVUaW1lc3BhbiA9IGZ1bmN0aW9uKHRpbWVzcGFuSWQpIHsKICAgICAgICBpZiAodGltZXNwYW5JZCBpbiB0aGlzLnRpbWVzcGFuc01hcCkgewogICAgICAgICAgICBkZWxldGUgdGhpcy50aW1lc3BhbnNNYXBbdGltZXNwYW5JZF07IC8vIFJlbW92ZSBmcm9tIG1hcAoKICAgICAgICAgICAgdmFyIHJlbW92ZWRUaW1lc3BhbjsKICAgICAgICAgICAgdmFyIHRpbWVzcGFuOwogICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy50aW1lc3BhbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgICAgICAgIHRpbWVzcGFuID0gdGhpcy50aW1lc3BhbnNbaV07CiAgICAgICAgICAgICAgICBpZiAodGltZXNwYW4uaWQgPT09IHRpbWVzcGFuSWQpIHsKICAgICAgICAgICAgICAgICAgICByZW1vdmVkVGltZXNwYW4gPSB0aW1lc3BhbjsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVzcGFucy5zcGxpY2UoaSwgMSk7IC8vIFJlbW92ZSBmcm9tIGFycmF5CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRoaXMuZ2FudHQuYXBpLnRpbWVzcGFucy5yYWlzZS5yZW1vdmUocmVtb3ZlZFRpbWVzcGFuKTsKICAgICAgICAgICAgcmV0dXJuIHJlbW92ZWRUaW1lc3BhbjsKICAgICAgICB9CgogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9OwoKICAgIC8vIFJlbW92ZXMgYWxsIHRpbWVzcGFucwogICAgR2FudHRUaW1lc3BhbnNNYW5hZ2VyLnByb3RvdHlwZS5jbGVhclRpbWVzcGFucyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMudGltZXNwYW5zTWFwID0ge307CiAgICAgICAgdGhpcy50aW1lc3BhbnMgPSBbXTsKICAgIH07CgogICAgR2FudHRUaW1lc3BhbnNNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVUaW1lc3BhbnNQb3NBbmRTaXplID0gZnVuY3Rpb24oKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnRpbWVzcGFucy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgdGhpcy50aW1lc3BhbnNbaV0udXBkYXRlUG9zQW5kU2l6ZSgpOwogICAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIEdhbnR0VGltZXNwYW5zTWFuYWdlcjsKfV0pOwoKCmdhbnR0LnNlcnZpY2UoJ2dhbnR0QmluYXJ5U2VhcmNoJywgWyBmdW5jdGlvbigpIHsKICAgIC8vIFJldHVybnMgdGhlIG9iamVjdCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgaW4gYW4gYXJyYXkgdXNpbmcgdGhlIGdpdmVuIGNtcCBmdW5jdGlvbi4KICAgIC8vIFRoZSBjb21wYXJlIGZ1bmN0aW9uIGRlZmluZWQgd2hpY2ggcHJvcGVydHkgb2YgdGhlIHZhbHVlIHRvIGNvbXBhcmUgKGUuZy46IGMgPT4gYy5sZWZ0KQoKICAgIHJldHVybiB7CiAgICAgICAgZ2V0SW5kaWNlc09ubHk6IGZ1bmN0aW9uKGlucHV0LCB2YWx1ZSwgY29tcGFyZXIpIHsKICAgICAgICAgICAgdmFyIGxvID0gLTEsIGhpID0gaW5wdXQubGVuZ3RoOwogICAgICAgICAgICB3aGlsZSAoaGkgLSBsbyA+IDEpIHsKICAgICAgICAgICAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsbyArIGhpKSAvIDIpOwogICAgICAgICAgICAgICAgaWYgKGNvbXBhcmVyKGlucHV0W21pZF0pIDw9IHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgbG8gPSBtaWQ7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGhpID0gbWlkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpbnB1dFtsb10gIT09IHVuZGVmaW5lZCAmJiBjb21wYXJlcihpbnB1dFtsb10pID09PSB2YWx1ZSkgewogICAgICAgICAgICAgICAgaGkgPSBsbzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gW2xvLCBoaV07CiAgICAgICAgfSwKICAgICAgICBnZXQ6IGZ1bmN0aW9uKGlucHV0LCB2YWx1ZSwgY29tcGFyZXIpIHsKICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuZ2V0SW5kaWNlc09ubHkoaW5wdXQsIHZhbHVlLCBjb21wYXJlcik7CiAgICAgICAgICAgIHJldHVybiBbaW5wdXRbcmVzWzBdXSwgaW5wdXRbcmVzWzFdXV07CiAgICAgICAgfQogICAgfTsKfV0pOwoKZ2FudHQuc2VydmljZSgnZ2FudHRVdGlscycsIFtmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgICAgY3JlYXRlQm91bmRlZFdyYXBwZXI6IGZ1bmN0aW9uKG9iamVjdCwgbWV0aG9kKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkob2JqZWN0LCBhcmd1bWVudHMpOwogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgbmV3SWQ6IChmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHNlZWRJZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VlZElkICs9IDE7CiAgICAgICAgICAgIH07CiAgICAgICAgfSkoKQogICAgfTsKfV0pOwoKCmdhbnR0LmZpbHRlcignZ2FudHRDb2x1bW5MaW1pdCcsIFsgJ2dhbnR0QmluYXJ5U2VhcmNoJywgZnVuY3Rpb24oYnMpIHsKICAgIC8vIFJldHVybnMgb25seSB0aGUgY29sdW1ucyB3aGljaCBhcmUgdmlzaWJsZSBvbiB0aGUgc2NyZWVuCgogICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBzY3JvbGxMZWZ0LCBzY3JvbGxXaWR0aCkgewogICAgICAgIHZhciBjbXAgPSBmdW5jdGlvbihjKSB7CiAgICAgICAgICAgIHJldHVybiBjLmxlZnQ7CiAgICAgICAgfTsKICAgICAgICB2YXIgc3RhcnQgPSBicy5nZXRJbmRpY2VzT25seShpbnB1dCwgc2Nyb2xsTGVmdCwgY21wKVswXTsKICAgICAgICB2YXIgZW5kID0gYnMuZ2V0SW5kaWNlc09ubHkoaW5wdXQsIHNjcm9sbExlZnQgKyBzY3JvbGxXaWR0aCwgY21wKVsxXTsKICAgICAgICByZXR1cm4gaW5wdXQuc2xpY2Uoc3RhcnQsIGVuZCk7CiAgICB9Owp9XSk7CgoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dExpbWl0VXBkYXRlcicsIFsnJHRpbWVvdXQnLCAnZ2FudHREZWJvdW5jZScsIGZ1bmN0aW9uKCR0aW1lb3V0LCBkZWJvdW5jZSkgewogICAgLy8gVXBkYXRlcyB0aGUgbGltaXQgZmlsdGVycyBpZiB0aGUgdXNlciBzY3JvbGxzIHRoZSBnYW50dCBjaGFydAoKICAgIHJldHVybiB7CiAgICAgICAgcmVzdHJpY3Q6ICdBJywKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKICAgICAgICAgICAgdmFyIGVsID0gJGVsZW1lbnRbMF07CiAgICAgICAgICAgIHZhciBzY3JvbGxVcGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICRzY29wZS5zY3JvbGxMZWZ0ID0gZWwuc2Nyb2xsTGVmdDsKICAgICAgICAgICAgICAgICRzY29wZS5zY3JvbGxXaWR0aCA9IGVsLm9mZnNldFdpZHRoOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgJGVsZW1lbnQuYmluZCgnc2Nyb2xsJywgZGVib3VuY2UoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzY3JvbGxVcGRhdGUoKTsKICAgICAgICAgICAgfSwgNSkpOwoKICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgnZ2FudHQud2lkdGgnLCBkZWJvdW5jZShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHNjcm9sbFVwZGF0ZSgpOwogICAgICAgICAgICB9LCAyMCkpOwogICAgICAgIH1dCiAgICB9Owp9XSk7CgoKZ2FudHQuZmlsdGVyKCdnYW50dFRhc2tMaW1pdCcsIFtmdW5jdGlvbigpIHsKICAgIC8vIFJldHVybnMgb25seSB0aGUgdGFza3Mgd2hpY2ggYXJlIHZpc2libGUgb24gdGhlIHNjcmVlbgogICAgLy8gVXNlIHRoZSB0YXNrIHdpZHRoIGFuZCBwb3NpdGlvbiB0byBkZWNpZGUgaWYgYSB0YXNrIGlzIHN0aWxsIHZpc2libGUKCiAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGdhbnR0KSB7CiAgICAgICAgdmFyIHJlcyA9IFtdOwogICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaW5wdXQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgIHZhciB0YXNrID0gaW5wdXRbaV07CiAgICAgICAgICAgIC8vIElmIHRoZSB0YXNrIGNhbiBiZSBkcmF3biB3aXRoIGdhbnR0IGNvbHVtbnMgb25seS4KICAgICAgICAgICAgaWYgKHRhc2sudG8gPiBnYW50dC5jb2x1bW5zTWFuYWdlci5nZXRGaXJzdENvbHVtbigpLmRhdGUgJiYgdGFzay5mcm9tIDwgZ2FudHQuY29sdW1uc01hbmFnZXIuZ2V0TGFzdENvbHVtbigpLmVuZERhdGUpIHsKCiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdhbnR0LiRzY29wZS5zY3JvbGxMZWZ0OwogICAgICAgICAgICAgICAgdmFyIHNjcm9sbFdpZHRoID0gZ2FudHQuJHNjb3BlLnNjcm9sbFdpZHRoOwoKICAgICAgICAgICAgICAgIC8vIElmIHRhc2sgaGFzIGEgdmlzaWJsZSBwYXJ0IG9uIHRoZSBzY3JlZW4KICAgICAgICAgICAgICAgIGlmICh0YXNrLmxlZnQgPj0gc2Nyb2xsTGVmdCAmJiB0YXNrLmxlZnQgPD0gc2Nyb2xsTGVmdCArIHNjcm9sbFdpZHRoIHx8CiAgICAgICAgICAgICAgICAgICAgdGFzay5sZWZ0ICsgdGFzay53aWR0aCA+PSBzY3JvbGxMZWZ0ICYmIHRhc2subGVmdCArIHRhc2sud2lkdGggPD0gc2Nyb2xsTGVmdCArIHNjcm9sbFdpZHRoIHx8CiAgICAgICAgICAgICAgICAgICAgdGFzay5sZWZ0IDwgc2Nyb2xsTGVmdCAmJiB0YXNrLmxlZnQgKyB0YXNrLndpZHRoID4gc2Nyb2xsTGVmdCArIHNjcm9sbFdpZHRoKSB7CgogICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRhc2spOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlczsKICAgIH07Cn1dKTsKCgpnYW50dC5kaXJlY3RpdmUoJ2dhbnR0TGFiZWxzUmVzaXplJywgWyckZG9jdW1lbnQnLCAnZ2FudHREZWJvdW5jZScsICdnYW50dE1vdXNlT2Zmc2V0JywgZnVuY3Rpb24oJGRvY3VtZW50LCBkZWJvdW5jZSwgbW91c2VPZmZzZXQpIHsKCiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnQScsCiAgICAgICAgc2NvcGU6IHsgZW5hYmxlZDogJz1nYW50dExhYmVsc1Jlc2l6ZScsCiAgICAgICAgICAgIHdpZHRoOiAnPWdhbnR0TGFiZWxzUmVzaXplV2lkdGgnLAogICAgICAgICAgICBtaW5XaWR0aDogJz1nYW50dExhYmVsc1Jlc2l6ZU1pbldpZHRoJ30sCiAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50KSB7CiAgICAgICAgICAgIHZhciByZXNpemVBcmVhV2lkdGggPSA1OwogICAgICAgICAgICB2YXIgY3Vyc29yID0gJ2V3LXJlc2l6ZSc7CiAgICAgICAgICAgIHZhciBvcmlnaW5hbFBvczsKCiAgICAgICAgICAgICRlbGVtZW50LmJpbmQoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZW5hYmxlZCAmJiBpc0luUmVzaXplQXJlYShlKSkgewogICAgICAgICAgICAgICAgICAgIGVuYWJsZVJlc2l6ZU1vZGUoZSk7CiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICRlbGVtZW50LmJpbmQoJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZW5hYmxlZCkgewogICAgICAgICAgICAgICAgICAgIGlmIChpc0luUmVzaXplQXJlYShlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5jc3MoJ2N1cnNvcicsIGN1cnNvcik7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQuY3NzKCdjdXJzb3InLCAnJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHZhciByZXNpemUgPSBmdW5jdGlvbih4KSB7CiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLndpZHRoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLndpZHRoID0gJGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJHNjb3BlLndpZHRoICs9IHggLSBvcmlnaW5hbFBvczsKICAgICAgICAgICAgICAgIGlmICgkc2NvcGUud2lkdGggPCAkc2NvcGUubWluV2lkdGgpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUud2lkdGggPSAkc2NvcGUubWluV2lkdGg7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgb3JpZ2luYWxQb3MgPSB4OwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIGlzSW5SZXNpemVBcmVhID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgdmFyIHggPSBtb3VzZU9mZnNldC5nZXRPZmZzZXQoZSkueDsKCiAgICAgICAgICAgICAgICByZXR1cm4geCA+ICRlbGVtZW50WzBdLm9mZnNldFdpZHRoIC0gcmVzaXplQXJlYVdpZHRoOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIGVuYWJsZVJlc2l6ZU1vZGUgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICBvcmlnaW5hbFBvcyA9IGUuc2NyZWVuWDsKCiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50WzBdLmJvZHkpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJy1tb3otdXNlci1zZWxlY3QnOiAnLW1vei1ub25lJywKICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC11c2VyLXNlbGVjdCc6ICdub25lJywKICAgICAgICAgICAgICAgICAgICAnLW1zLXVzZXItc2VsZWN0JzogJ25vbmUnLAogICAgICAgICAgICAgICAgICAgICd1c2VyLXNlbGVjdCc6ICdub25lJywKICAgICAgICAgICAgICAgICAgICAnY3Vyc29yJzogY3Vyc29yCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB2YXIgbW92ZUhhbmRsZXIgPSBkZWJvdW5jZShmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzaXplKGUuc2NyZWVuWCk7CiAgICAgICAgICAgICAgICB9LCA1KTsKCiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50WzBdLmJvZHkpLmJpbmQoJ21vdXNlbW92ZScsIG1vdmVIYW5kbGVyKTsKCiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50WzBdLmJvZHkpLm9uZSgnbW91c2V1cCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnRbMF0uYm9keSkudW5iaW5kKCdtb3VzZW1vdmUnLCBtb3ZlSGFuZGxlcik7CiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVJlc2l6ZU1vZGUoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIGRpc2FibGVSZXNpemVNb2RlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkZWxlbWVudC5jc3MoJ2N1cnNvcicsICcnKTsKCiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50WzBdLmJvZHkpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJy1tb3otdXNlci1zZWxlY3QnOiAnJywKICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC11c2VyLXNlbGVjdCc6ICcnLAogICAgICAgICAgICAgICAgICAgICctbXMtdXNlci1zZWxlY3QnOiAnJywKICAgICAgICAgICAgICAgICAgICAndXNlci1zZWxlY3QnOiAnJywKICAgICAgICAgICAgICAgICAgICAnY3Vyc29yJzogJycKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkubGFiZWxzLnJhaXNlLnJlc2l6ZSgkc2NvcGUud2lkdGgpOwogICAgICAgICAgICB9OwogICAgICAgIH1dCiAgICB9Owp9XSk7CgoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dFJpZ2h0Q2xpY2snLCBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkgewoKICAgIHJldHVybiB7CiAgICAgICAgcmVzdHJpY3Q6ICdBJywKICAgICAgICBjb21waWxlOiBmdW5jdGlvbigkZWxlbWVudCwgYXR0cikgewogICAgICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0ci5nYW50dFJpZ2h0Q2xpY2spOwoKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7CiAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdjb250ZXh0bWVudScsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBmbihzY29wZSwgeyRldmVudDogZXZlbnR9KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwogICAgICAgIH0KICAgIH07Cn1dKTsKCmdhbnR0LmRpcmVjdGl2ZSgnZ2FudHRIb3Jpem9udGFsU2Nyb2xsUmVjZWl2ZXInLCBmdW5jdGlvbigpIHsKICAgIC8vIFRoZSBlbGVtZW50IHdpdGggdGhpcyBhdHRyaWJ1dGUgd2lsbCBzY3JvbGwgYXQgdGhlIHNhbWUgdGltZSBhcyB0aGUgc2Nyb2xsU2VuZGVyIGVsZW1lbnQKCiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnQScsCiAgICAgICAgcmVxdWlyZTogJ15nYW50dFNjcm9sbE1hbmFnZXInLAogICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRlbGVtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCkgewogICAgICAgICAgICAkc2NvcGUuc2Nyb2xsTWFuYWdlci5ob3Jpem9udGFsLnB1c2goJGVsZW1lbnRbMF0pOwogICAgICAgIH1dCiAgICB9Owp9KTsKCmdhbnR0LmRpcmVjdGl2ZSgnZ2FudHRTY3JvbGxNYW5hZ2VyJywgZnVuY3Rpb24oKSB7CiAgICAvLyBUaGUgZWxlbWVudCB3aXRoIHRoaXMgYXR0cmlidXRlIHdpbGwgc2Nyb2xsIGF0IHRoZSBzYW1lIHRpbWUgYXMgdGhlIHNjcm9sbFNlbmRlciBlbGVtZW50CgogICAgcmV0dXJuIHsKICAgICAgICByZXN0cmljdDogJ0EnLAogICAgICAgIHJlcXVpcmU6ICdeZ2FudHQnLAogICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICRzY29wZS5zY3JvbGxNYW5hZ2VyID0gewogICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogW10sCiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogW10KICAgICAgICAgICAgfTsKICAgICAgICB9XQogICAgfTsKfSk7CgoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dFNjcm9sbFNlbmRlcicsIFsnJHRpbWVvdXQnLCAnZ2FudHREZWJvdW5jZScsIGZ1bmN0aW9uKCR0aW1lb3V0LCBkZWJvdW5jZSkgewogICAgLy8gVXBkYXRlcyB0aGUgZWxlbWVudCB3aGljaCBhcmUgcmVnaXN0ZXJlZCBmb3IgdGhlIGhvcml6b250YWwgb3IgdmVydGljYWwgc2Nyb2xsIGV2ZW50CgogICAgcmV0dXJuIHsKICAgICAgICByZXN0cmljdDogJ0EnLAogICAgICAgIHJlcXVpcmU6ICdeZ2FudHRTY3JvbGxNYW5hZ2VyJywKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKICAgICAgICAgICAgdmFyIGVsID0gJGVsZW1lbnRbMF07CiAgICAgICAgICAgIHZhciB1cGRhdGVMaXN0ZW5lcnMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBpLCBsOwoKICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSAkc2NvcGUuc2Nyb2xsTWFuYWdlci52ZXJ0aWNhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdkVsZW1lbnQgPSAkc2NvcGUuc2Nyb2xsTWFuYWdlci52ZXJ0aWNhbFtpXTsKICAgICAgICAgICAgICAgICAgICBpZiAodkVsZW1lbnQuc3R5bGUudG9wICE9PSAtZWwuc2Nyb2xsVG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZFbGVtZW50LnN0eWxlLnRvcCA9IC1lbC5zY3JvbGxUb3AgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICAgICB2RWxlbWVudC5zdHlsZS5oZWlnaHQgPSBlbC5zY3JvbGxIZWlnaHQgKyAncHgnOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gJHNjb3BlLnNjcm9sbE1hbmFnZXIuaG9yaXpvbnRhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaEVsZW1lbnQgPSAkc2NvcGUuc2Nyb2xsTWFuYWdlci5ob3Jpem9udGFsW2ldOwogICAgICAgICAgICAgICAgICAgIGlmIChoRWxlbWVudC5zdHlsZS5sZWZ0ICE9PSAtZWwuc2Nyb2xsTGVmdCkgewogICAgICAgICAgICAgICAgICAgICAgICBoRWxlbWVudC5zdHlsZS5sZWZ0ID0gLWVsLnNjcm9sbExlZnQgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICAgICBoRWxlbWVudC5zdHlsZS53aWR0aCA9IGVsLnNjcm9sbFdpZHRoICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAkZWxlbWVudC5iaW5kKCdzY3JvbGwnLCB1cGRhdGVMaXN0ZW5lcnMpOwogICAgICAgICAgICAkc2NvcGUuZ2FudHQuYXBpLnJvd3Mub24uY2hhbmdlKCRzY29wZSwgZGVib3VuY2UoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB1cGRhdGVMaXN0ZW5lcnMoKTsKICAgICAgICAgICAgfSwgNSkpOwoKICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgnZ2FudHQud2lkdGgnLCBmdW5jdGlvbihuZXdWYWx1ZSkgewogICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUxpc3RlbmVycygpOwogICAgICAgICAgICAgICAgICAgIH0sIDAsIHRydWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9XQogICAgfTsKfV0pOwoKCmdhbnR0LmRpcmVjdGl2ZSgnZ2FudHRTY3JvbGxhYmxlJywgWydnYW50dERlYm91bmNlJywgJ2dhbnR0TGF5b3V0JywgZnVuY3Rpb24oZGVib3VuY2UsIGxheW91dCkgewogICAgcmV0dXJuIHsKICAgICAgICByZXN0cmljdDogJ0UnLAogICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsCiAgICAgICAgcmVwbGFjZTogdHJ1ZSwKICAgICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICBpZiAodEF0dHJzLnRlbXBsYXRlVXJsID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAndGVtcGxhdGUvZGVmYXVsdC5zY3JvbGxhYmxlLnRtcGwuaHRtbCc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdEF0dHJzLnRlbXBsYXRlVXJsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKICAgICAgICAgICAgJHNjb3BlLmdhbnR0LnNjcm9sbC4kZWxlbWVudCA9ICRlbGVtZW50OwoKICAgICAgICAgICAgdmFyIHNjcm9sbEJhcldpZHRoID0gbGF5b3V0LmdldFNjcm9sbEJhcldpZHRoKCk7CiAgICAgICAgICAgIHZhciBsYXN0U2Nyb2xsTGVmdDsKCiAgICAgICAgICAgIHZhciBsYXN0QXV0b0V4cGFuZDsKICAgICAgICAgICAgdmFyIGF1dG9FeHBhbmRDb29sRG93blBlcmlvZCA9IDUwMDsKICAgICAgICAgICAgdmFyIGF1dG9FeHBhbmRDb2x1bW5zID0gZnVuY3Rpb24oZWwsIGRhdGUsIGRpcmVjdGlvbikgewogICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hdXRvRXhwYW5kICE9PSAnYm90aCcgJiYgJHNjb3BlLmF1dG9FeHBhbmQgIT09IHRydWUgJiYgJHNjb3BlLmF1dG9FeHBhbmQgIT09IGRpcmVjdGlvbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIGxhc3RBdXRvRXhwYW5kIDwgYXV0b0V4cGFuZENvb2xEb3duUGVyaW9kKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBmcm9tLCB0bzsKICAgICAgICAgICAgICAgIHZhciBleHBhbmRIb3VyID0gMSwgZXhwYW5kRGF5ID0gMzE7CgogICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7CiAgICAgICAgICAgICAgICAgICAgZnJvbSA9ICRzY29wZS52aWV3U2NhbGUgPT09ICdob3VyJyA/IG1vbWVudChkYXRlKS5hZGQoLWV4cGFuZEhvdXIsICdkYXknKSA6IG1vbWVudChkYXRlKS5hZGQoLWV4cGFuZERheSwgJ2RheScpOwogICAgICAgICAgICAgICAgICAgIHRvID0gZGF0ZTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IGRhdGU7CiAgICAgICAgICAgICAgICAgICAgdG8gPSAkc2NvcGUudmlld1NjYWxlID09PSAnaG91cicgPyBtb21lbnQoZGF0ZSkuYWRkKGV4cGFuZEhvdXIsICdkYXknKSA6IG1vbWVudChkYXRlKS5hZGQoZXhwYW5kRGF5LCAnZGF5Jyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJHNjb3BlLmZyb21EYXRlID0gZnJvbTsKICAgICAgICAgICAgICAgICRzY29wZS50b0RhdGUgPSB0bzsKICAgICAgICAgICAgICAgIGxhc3RBdXRvRXhwYW5kID0gRGF0ZS5ub3coKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICRlbGVtZW50LmJpbmQoJ3Njcm9sbCcsIGRlYm91bmNlKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGVsID0gJGVsZW1lbnRbMF07CiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uOwogICAgICAgICAgICAgICAgdmFyIGRhdGU7CgogICAgICAgICAgICAgICAgaWYgKGVsLnNjcm9sbExlZnQgPCBsYXN0U2Nyb2xsTGVmdCAmJiBlbC5zY3JvbGxMZWZ0ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gJ2xlZnQnOwogICAgICAgICAgICAgICAgICAgIGRhdGUgPSAkc2NvcGUuZ2FudHQuY29sdW1uc01hbmFnZXIuZnJvbTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwuc2Nyb2xsTGVmdCA+IGxhc3RTY3JvbGxMZWZ0ICYmIGVsLm9mZnNldFdpZHRoICsgZWwuc2Nyb2xsTGVmdCA+PSBlbC5zY3JvbGxXaWR0aCAtIDEpIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAncmlnaHQnOwogICAgICAgICAgICAgICAgICAgIGRhdGUgPSAkc2NvcGUuZ2FudHQuY29sdW1uc01hbmFnZXIudG87CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbGFzdFNjcm9sbExlZnQgPSBlbC5zY3JvbGxMZWZ0OwoKICAgICAgICAgICAgICAgIGlmIChkYXRlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICBhdXRvRXhwYW5kQ29sdW1ucyhlbCwgZGF0ZSwgZGlyZWN0aW9uKTsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2FudHQuYXBpLnNjcm9sbC5yYWlzZS5zY3JvbGwoZWwuc2Nyb2xsTGVmdCwgZGF0ZSwgZGlyZWN0aW9uKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5zY3JvbGwucmFpc2Uuc2Nyb2xsKGVsLnNjcm9sbExlZnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCA1KSk7CgogICAgICAgICAgICAkc2NvcGUuZ2V0U2Nyb2xsYWJsZUNzcyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIGNzcyA9IHt9OwoKICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZ2FudHRFbGVtZW50V2lkdGggLSAoJHNjb3BlLnNob3dMYWJlbHNDb2x1bW4gPyAkc2NvcGUubGFiZWxzV2lkdGggOiAwKSA+ICRzY29wZS5nYW50dC53aWR0aCArIHNjcm9sbEJhcldpZHRoKSB7CiAgICAgICAgICAgICAgICAgICAgY3NzLndpZHRoID0gJHNjb3BlLmdhbnR0LndpZHRoICsgc2Nyb2xsQmFyV2lkdGggKyAncHgnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubWF4SGVpZ2h0ID4gMCkgewogICAgICAgICAgICAgICAgICAgIGNzc1snbWF4LWhlaWdodCddID0gJHNjb3BlLm1heEhlaWdodCAtICRzY29wZS5nYW50dC5oZWFkZXIuZ2V0SGVpZ2h0KCkgKyAncHgnOwogICAgICAgICAgICAgICAgICAgIGNzc1snb3ZlcmZsb3cteSddID0gJ2F1dG8nOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjc3NbJ292ZXJmbG93LXknXSA9ICdoaWRkZW4nOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBjc3M7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAkc2NvcGUuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UubmV3KCdnYW50dFNjcm9sbGFibGUnLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5kZXN0cm95KCdnYW50dFNjcm9sbGFibGUnLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfV0KICAgIH07Cn1dKTsKCgpnYW50dC5kaXJlY3RpdmUoJ2dhbnR0VmVydGljYWxTY3JvbGxSZWNlaXZlcicsIGZ1bmN0aW9uKCkgewogICAgLy8gVGhlIGVsZW1lbnQgd2l0aCB0aGlzIGF0dHJpYnV0ZSB3aWxsIHNjcm9sbCBhdCB0aGUgc2FtZSB0aW1lIGFzIHRoZSBzY3JvbGxTZW5kZXIgZWxlbWVudAoKICAgIHJldHVybiB7CiAgICAgICAgcmVzdHJpY3Q6ICdBJywKICAgICAgICByZXF1aXJlOiAnXmdhbnR0U2Nyb2xsTWFuYWdlcicsCiAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50KSB7CiAgICAgICAgICAgICRzY29wZS5zY3JvbGxNYW5hZ2VyLnZlcnRpY2FsLnB1c2goJGVsZW1lbnRbMF0pOwogICAgICAgIH1dCiAgICB9Owp9KTsKCmdhbnR0LmRpcmVjdGl2ZSgnZ2FudHRFbGVtZW50V2lkdGhMaXN0ZW5lcicsIFtmdW5jdGlvbigpIHsKICAgIC8vIFVwZGF0ZXMgdGhlIGxpbWl0IGZpbHRlcnMgaWYgdGhlIHVzZXIgc2Nyb2xscyB0aGUgZ2FudHQgY2hhcnQKCiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnQScsCiAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzKSB7CiAgICAgICAgICAgIHZhciBzY29wZVZhcmlhYmxlID0gJGF0dHJzLmdhbnR0RWxlbWVudFdpZHRoTGlzdGVuZXI7CiAgICAgICAgICAgIGlmIChzY29wZVZhcmlhYmxlID09PSAnJykgewogICAgICAgICAgICAgICAgc2NvcGVWYXJpYWJsZSA9ICdnYW50dEVsZW1lbnRXaWR0aCc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBlZmZlY3RpdmVTY29wZSA9ICRzY29wZTsKCiAgICAgICAgICAgIHdoaWxlKHNjb3BlVmFyaWFibGUuaW5kZXhPZignJHBhcmVudC4nKSA9PT0gMCkgewogICAgICAgICAgICAgICAgc2NvcGVWYXJpYWJsZSA9IHNjb3BlVmFyaWFibGUuc3Vic3RyaW5nKCckcGFyZW50LicubGVuZ3RoKTsKICAgICAgICAgICAgICAgIGVmZmVjdGl2ZVNjb3BlID0gJHNjb3BlLiRwYXJlbnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGVmZmVjdGl2ZVNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGVmZmVjdGl2ZVNjb3BlW3Njb3BlVmFyaWFibGVdID0gJGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7CiAgICAgICAgICAgIH0pOwogICAgICAgIH1dCiAgICB9Owp9XSk7CgoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dEJvdW5kcycsIFtmdW5jdGlvbigpIHsKICAgIC8vIERpc3BsYXlzIGEgYm94IHJlcHJlc2VudGluZyB0aGUgZWFybGllc3QgYWxsb3dhYmxlIHN0YXJ0IHRpbWUgYW5kIGxhdGVzdCBjb21wbGV0aW9uIHRpbWUgZm9yIGEgam9iCgogICAgcmV0dXJuIHsKICAgICAgICByZXN0cmljdDogJ0UnLAogICAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7CiAgICAgICAgICAgIGlmICh0QXR0cnMudGVtcGxhdGVVcmwgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuICd0ZW1wbGF0ZS9kZWZhdWx0LmJvdW5kcy50bXBsLmh0bWwnOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRBdHRycy50ZW1wbGF0ZVVybDsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgcmVwbGFjZTogdHJ1ZSwKICAgICAgICBzY29wZToge3Rhc2s6ICc9bmdNb2RlbCd9LAogICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRlbGVtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCkgewogICAgICAgICAgICB2YXIgY3NzID0ge307CgogICAgICAgICAgICAkc2NvcGUuJHdhdGNoR3JvdXAoWyd0YXNrLmVzdCcsICd0YXNrLmxjdCddLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmICgkc2NvcGUudGFzay5lc3QgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUudGFzay5sY3QgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5ib3VuZHMgPSB7fTsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYm91bmRzLmxlZnQgPSAkc2NvcGUudGFzay5yb3dzTWFuYWdlci5nYW50dC5nZXRQb3NpdGlvbkJ5RGF0ZSgkc2NvcGUudGFzay5lc3QpOwogICAgICAgICAgICAgICAgICAgICRzY29wZS5ib3VuZHMud2lkdGggPSAkc2NvcGUudGFzay5yb3dzTWFuYWdlci5nYW50dC5nZXRQb3NpdGlvbkJ5RGF0ZSgkc2NvcGUudGFzay5sY3QpIC0gJHNjb3BlLmJvdW5kcy5sZWZ0OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYm91bmRzID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICRzY29wZS50YXNrLiRlbGVtZW50LmJpbmQoJ21vdXNlZW50ZXInLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzVGFza01vdXNlT3ZlciA9IHRydWU7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAkc2NvcGUudGFzay4kZWxlbWVudC5iaW5kKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Rhc2tNb3VzZU92ZXIgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICRzY29wZS5nZXRDc3MgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYm91bmRzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICBjc3Mud2lkdGggPSAkc2NvcGUuYm91bmRzLndpZHRoICsgJ3B4JzsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXNrLmlzTWlsZXN0b25lID09PSB0cnVlIHx8ICRzY29wZS50YXNrLndpZHRoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNzcy5sZWZ0ID0gKCRzY29wZS5ib3VuZHMubGVmdCAtICgkc2NvcGUudGFzay5sZWZ0IC0gMC4zKSkgKyAncHgnOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNzcy5sZWZ0ID0gKCRzY29wZS5ib3VuZHMubGVmdCAtICRzY29wZS50YXNrLmxlZnQpICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIGNzczsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICRzY29wZS5nZXRDbGFzcyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXNrLmVzdCA9PT0gdW5kZWZpbmVkIHx8ICRzY29wZS50YXNrLmxjdCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdnYW50dC10YXNrLWJvdW5kcy1pbic7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS50YXNrLmVzdCA+ICRzY29wZS50YXNrLmZyb20pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2dhbnR0LXRhc2stYm91bmRzLW91dCc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICgkc2NvcGUudGFzay5sY3QgPCAkc2NvcGUudGFzay50bykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAnZ2FudHQtdGFzay1ib3VuZHMtb3V0JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAnZ2FudHQtdGFzay1ib3VuZHMtaW4nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgJHNjb3BlLnRhc2sucm93c01hbmFnZXIuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UubmV3KCdnYW50dEJvdW5kcycsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLnRhc2sucm93c01hbmFnZXIuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UuZGVzdHJveSgnZ2FudHRCb3VuZHMnLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfV0KICAgIH07Cn1dKTsKCgpnYW50dC5kaXJlY3RpdmUoJ2dhbnR0VGFza1Byb2dyZXNzJywgW2Z1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgICByZXN0cmljdDogJ0UnLAogICAgICAgIHJlcXVpcmVzOiAnXmdhbnR0VGFzaycsCiAgICAgICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsKICAgICAgICAgICAgaWYgKHRBdHRycy50ZW1wbGF0ZVVybCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJ3RlbXBsYXRlL2RlZmF1bHQudGFza1Byb2dyZXNzLnRtcGwuaHRtbCc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdEF0dHJzLnRlbXBsYXRlVXJsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICByZXBsYWNlOiB0cnVlLAogICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRlbGVtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCkgewogICAgICAgICAgICAkc2NvcGUuZ2V0Q3NzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgY3NzID0ge307CgogICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXNrLnByb2dyZXNzLmNvbG9yKSB7CiAgICAgICAgICAgICAgICAgICAgY3NzWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSAkc2NvcGUudGFzay5wcm9ncmVzcy5jb2xvcjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY3NzWydiYWNrZ3JvdW5kLWNvbG9yJ10gPSAnIzZCQzQ0Myc7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY3NzLndpZHRoID0gJHNjb3BlLnRhc2sucHJvZ3Jlc3MucGVyY2VudCArICclJzsKCiAgICAgICAgICAgICAgICByZXR1cm4gY3NzOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgJHNjb3BlLnRhc2sucm93c01hbmFnZXIuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UubmV3KCdnYW50dFRhc2tQcm9ncmVzcycsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLnRhc2sucm93c01hbmFnZXIuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UuZGVzdHJveSgnZ2FudHRUYXNrUHJvZ3Jlc3MnLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfV0KICAgIH07Cn1dKTsKCgpnYW50dC5kaXJlY3RpdmUoJ2dhbnR0VGFzaycsIFtmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICByZXF1aXJlOiAnXmdhbnR0Um93JywKICAgICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICBpZiAodEF0dHJzLnRlbXBsYXRlVXJsID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAndGVtcGxhdGUvZGVmYXVsdC50YXNrLnRtcGwuaHRtbCc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdEF0dHJzLnRlbXBsYXRlVXJsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICByZXBsYWNlOiB0cnVlLAogICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRlbGVtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCkgewogICAgICAgICAgICAkc2NvcGUudGFzay4kZWxlbWVudCA9ICRlbGVtZW50OwoKICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5kaXJlY3RpdmVzLnJhaXNlLm5ldygnZ2FudHRUYXNrJywgJHNjb3BlLCAkZWxlbWVudCk7CiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UuZGVzdHJveSgnZ2FudHRUYXNrJywgJHNjb3BlLCAkZWxlbWVudCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH1dCiAgICB9Owp9XSk7CgoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dFRvb2x0aXAnLCBbJyR0aW1lb3V0JywgJyRkb2N1bWVudCcsICdnYW50dERlYm91bmNlJywgJ2dhbnR0U21hcnRFdmVudCcsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkZG9jdW1lbnQsIGRlYm91bmNlLCBzbWFydEV2ZW50KSB7CiAgICAvLyBUaGlzIHRvb2x0aXAgZGlzcGxheXMgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBhIHRhc2sKCiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsKICAgICAgICAgICAgaWYgKHRBdHRycy50ZW1wbGF0ZVVybCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJ3RlbXBsYXRlL2RlZmF1bHQudG9vbHRpcC50bXBsLmh0bWwnOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRBdHRycy50ZW1wbGF0ZVVybDsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgcmVwbGFjZTogdHJ1ZSwKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKICAgICAgICAgICAgdmFyIGJvZHlFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCRkb2N1bWVudFswXS5ib2R5KTsKICAgICAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSAkZWxlbWVudC5wYXJlbnQoKTsKICAgICAgICAgICAgdmFyIHNob3dUb29sdGlwUHJvbWlzZTsKICAgICAgICAgICAgdmFyIG1vdXNlUG9zaXRpb25YOwoKICAgICAgICAgICAgJHNjb3BlLmNzcyA9IHt9OwoKICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgnaXNUYXNrTW91c2VPdmVyJywgZnVuY3Rpb24obmV3VmFsdWUpIHsKICAgICAgICAgICAgICAgIGlmIChzaG93VG9vbHRpcFByb21pc2UpIHsKICAgICAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwoc2hvd1Rvb2x0aXBQcm9taXNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIHNob3dUb29sdGlwUHJvbWlzZSA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBzaG93VG9vbHRpcChtb3VzZVBvc2l0aW9uWCk7CiAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUudGFzay5pc01vdmluZykgewogICAgICAgICAgICAgICAgICAgICAgICBoaWRlVG9vbHRpcCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAkc2NvcGUudGFzay4kZWxlbWVudC5iaW5kKCdtb3VzZW1vdmUnLCBmdW5jdGlvbihldnQpIHsKICAgICAgICAgICAgICAgIG1vdXNlUG9zaXRpb25YID0gZXZ0LmNsaWVudFg7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJHNjb3BlLnRhc2suJGVsZW1lbnQuYmluZCgnbW91c2VlbnRlcicsIGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW91c2VFbnRlclggPSBldnQuY2xpZW50WDsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNUYXNrTW91c2VPdmVyID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICRzY29wZS50YXNrLiRlbGVtZW50LmJpbmQoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vdXNlRW50ZXJYID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Rhc2tNb3VzZU92ZXIgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHZhciBtb3VzZU1vdmVIYW5kbGVyID0gc21hcnRFdmVudCgkc2NvcGUsIGJvZHlFbGVtZW50LCAnbW91c2Vtb3ZlJywgZGVib3VuY2UoZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgdXBkYXRlVG9vbHRpcChlLmNsaWVudFgpOwogICAgICAgICAgICB9LCA1LCBmYWxzZSkpOwoKICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgndGFzay5pc01vdmluZycsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7CiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICBtb3VzZU1vdmVIYW5kbGVyLmJpbmQoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmV3VmFsdWUgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgbW91c2VNb3ZlSGFuZGxlci51bmJpbmQoKTsKICAgICAgICAgICAgICAgICAgICBoaWRlVG9vbHRpcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHZhciBnZXRWaWV3UG9ydFdpZHRoID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgZCA9ICRkb2N1bWVudFswXTsKICAgICAgICAgICAgICAgIHJldHVybiBkLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCB8fCBkLmRvY3VtZW50RWxlbWVudC5nZXRFbGVtZW50QnlJZCgnYm9keScpWzBdLmNsaWVudFdpZHRoOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIHNob3dUb29sdGlwID0gZnVuY3Rpb24oeCkgewogICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVG9vbHRpcCh4KTsKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNzcy50b3AgPSBwYXJlbnRFbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArICdweCc7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNzcy5tYXJnaW5Ub3AgPSAtJGVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0IC0gOCArICdweCc7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNzcy5vcGFjaXR5ID0gMTsKICAgICAgICAgICAgICAgIH0sIDAsIHRydWUpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIHVwZGF0ZVRvb2x0aXAgPSBmdW5jdGlvbih4KSB7CiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBpbmZvIGlzIG92ZXJsYXBwaW5nIHdpdGggdmlldyBwb3J0CiAgICAgICAgICAgICAgICBpZiAoeCArICRlbGVtZW50WzBdLm9mZnNldFdpZHRoID4gZ2V0Vmlld1BvcnRXaWR0aCgpKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNzcy5sZWZ0ID0gKHggKyAyMCAtICRlbGVtZW50WzBdLm9mZnNldFdpZHRoKSArICdweCc7CiAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ2dhbnR0LXRhc2staW5mb0Fycm93UicpOyAvLyBSaWdodCBhbGlnbmVkIGluZm8KICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcygnZ2FudHQtdGFzay1pbmZvQXJyb3cnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNzcy5sZWZ0ID0gKHggLSAyMCkgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICRlbGVtZW50LmFkZENsYXNzKCdnYW50dC10YXNrLWluZm9BcnJvdycpOwogICAgICAgICAgICAgICAgICAgICRlbGVtZW50LnJlbW92ZUNsYXNzKCdnYW50dC10YXNrLWluZm9BcnJvd1InKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHZhciBoaWRlVG9vbHRpcCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmNzcy5vcGFjaXR5ID0gMDsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5uZXcoJ2dhbnR0VG9vbHRpcCcsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5kaXJlY3RpdmVzLnJhaXNlLmRlc3Ryb3koJ2dhbnR0VG9vbHRpcCcsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICB9KTsKICAgICAgICB9XQogICAgfTsKfV0pOwoKCmdhbnR0LmRpcmVjdGl2ZSgnZ2FudHRCb2R5JywgW2Z1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgICByZXN0cmljdDogJ0UnLAogICAgICAgIHJlcXVpcmU6ICdeZ2FudHQnLAogICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsCiAgICAgICAgcmVwbGFjZTogdHJ1ZSwKICAgICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICBpZiAodEF0dHJzLnRlbXBsYXRlVXJsID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAndGVtcGxhdGUvZGVmYXVsdC5ib2R5LnRtcGwuaHRtbCc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdEF0dHJzLnRlbXBsYXRlVXJsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmJvZHkuJGVsZW1lbnQgPSAkZWxlbWVudDsKCiAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5uZXcoJ2dhbnR0Qm9keScsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5kaXJlY3RpdmVzLnJhaXNlLmRlc3Ryb3koJ2dhbnR0Qm9keScsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICB9KTsKICAgICAgICB9XQogICAgfTsKfV0pOwoKCmdhbnR0LmRpcmVjdGl2ZSgnZ2FudHRCb2R5Q29sdW1ucycsIFtmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICByZXF1aXJlOiAnXmdhbnR0Qm9keScsCiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSwKICAgICAgICByZXBsYWNlOiB0cnVlLAogICAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7CiAgICAgICAgICAgIGlmICh0QXR0cnMudGVtcGxhdGVVcmwgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuICd0ZW1wbGF0ZS9kZWZhdWx0LmJvZHlDb2x1bW5zLnRtcGwuaHRtbCc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdEF0dHJzLnRlbXBsYXRlVXJsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmJvZHkuY29sdW1ucy4kZWxlbWVudCA9ICRlbGVtZW50OwoKICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5kaXJlY3RpdmVzLnJhaXNlLm5ldygnZ2FudHRCb2R5Q29sdW1ucycsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5kaXJlY3RpdmVzLnJhaXNlLmRlc3Ryb3koJ2dhbnR0Qm9keUNvbHVtbnMnLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfV0KICAgIH07Cn1dKTsKCgpnYW50dC5kaXJlY3RpdmUoJ2dhbnR0Qm9keVJvd3MnLCBbZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgcmVxdWlyZTogJ15nYW50dEJvZHknLAogICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsCiAgICAgICAgcmVwbGFjZTogdHJ1ZSwKICAgICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICBpZiAodEF0dHJzLnRlbXBsYXRlVXJsID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAndGVtcGxhdGUvZGVmYXVsdC5ib2R5Um93cy50bXBsLmh0bWwnOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRBdHRycy50ZW1wbGF0ZVVybDsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50KSB7CiAgICAgICAgICAgICRzY29wZS5nYW50dC5ib2R5LnJvd3MuJGVsZW1lbnQgPSAkZWxlbWVudDsKCiAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5uZXcoJ2dhbnR0Qm9keVJvd3MnLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5kZXN0cm95KCdnYW50dEJvZHlSb3dzJywgJHNjb3BlLCAkZWxlbWVudCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH1dCiAgICB9Owp9XSk7CgoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dENvbHVtbicsIFtmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICByZXF1aXJlOiAnXmdhbnR0Qm9keUNvbHVtbnMnLAogICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsCiAgICAgICAgcmVwbGFjZTogdHJ1ZSwKICAgICAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICBpZiAodEF0dHJzLnRlbXBsYXRlVXJsID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAndGVtcGxhdGUvZGVmYXVsdC5jb2x1bW4udG1wbC5odG1sJzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0QXR0cnMudGVtcGxhdGVVcmw7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRlbGVtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCkgewogICAgICAgICAgICAkc2NvcGUuY29sdW1uLiRlbGVtZW50ID0gJGVsZW1lbnQ7CgogICAgICAgICAgICAkc2NvcGUuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UubmV3KCdnYW50dENvbHVtbicsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5kaXJlY3RpdmVzLnJhaXNlLmRlc3Ryb3koJ2dhbnR0Q29sdW1uJywgJHNjb3BlLCAkZWxlbWVudCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH1dCiAgICB9Owp9XSk7CgoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dENvbHVtbkhlYWRlcicsIFtmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLAogICAgICAgIHJlcGxhY2U6IHRydWUsCiAgICAgICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsKICAgICAgICAgICAgaWYgKHRBdHRycy50ZW1wbGF0ZVVybCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJ3RlbXBsYXRlL2RlZmF1bHQuY29sdW1uSGVhZGVyLnRtcGwuaHRtbCc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdEF0dHJzLnRlbXBsYXRlVXJsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5kaXJlY3RpdmVzLnJhaXNlLm5ldygnZ2FudHRDb2x1bW5IZWFkZXInLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5kZXN0cm95KCdnYW50dENvbHVtbkhlYWRlcicsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICB9KTsKICAgICAgICB9XQogICAgfTsKfV0pOwoKCmdhbnR0LmRpcmVjdGl2ZSgnZ2FudHRIZWFkZXInLCBbZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgcmVxdWlyZTogJ15nYW50dCcsCiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSwKICAgICAgICByZXBsYWNlOiB0cnVlLAogICAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7CiAgICAgICAgICAgIGlmICh0QXR0cnMudGVtcGxhdGVVcmwgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuICd0ZW1wbGF0ZS9kZWZhdWx0LmhlYWRlci50bXBsLmh0bWwnOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRBdHRycy50ZW1wbGF0ZVVybDsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50KSB7CiAgICAgICAgICAgICRzY29wZS5nYW50dC5oZWFkZXIuJGVsZW1lbnQgPSAkZWxlbWVudDsKCiAgICAgICAgICAgICRzY29wZS5nZXRIZWFkZXJDc3MgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBjc3MgPSB7fTsKCiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmdhbnR0RWxlbWVudFdpZHRoIC0gKCRzY29wZS5zaG93TGFiZWxzQ29sdW1uID8gJHNjb3BlLmxhYmVsc1dpZHRoIDogMCkgPiAkc2NvcGUuZ2FudHQud2lkdGgpIHsKICAgICAgICAgICAgICAgICAgICBjc3Mud2lkdGggPSAkc2NvcGUuZ2FudHQud2lkdGggKyAncHgnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBjc3M7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAkc2NvcGUuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UubmV3KCdnYW50dEhlYWRlcicsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5kaXJlY3RpdmVzLnJhaXNlLmRlc3Ryb3koJ2dhbnR0SGVhZGVyJywgJHNjb3BlLCAkZWxlbWVudCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH1dCiAgICB9Owp9XSk7CgoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dEhlYWRlckNvbHVtbnMnLCBbZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgcmVxdWlyZTogJ15nYW50dEhlYWRlcicsCiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSwKICAgICAgICByZXBsYWNlOiB0cnVlLAogICAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7CiAgICAgICAgICAgIGlmICh0QXR0cnMudGVtcGxhdGVVcmwgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuICd0ZW1wbGF0ZS9kZWZhdWx0LmhlYWRlckNvbHVtbnMudG1wbC5odG1sJzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0QXR0cnMudGVtcGxhdGVVcmw7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRlbGVtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCkgewogICAgICAgICAgICAkc2NvcGUuZ2FudHQuaGVhZGVyLmNvbHVtbnMuJGVsZW1lbnQgPSAkZWxlbWVudDsKCiAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5uZXcoJ2dhbnR0SGVhZGVyQ29sdW1ucycsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5kaXJlY3RpdmVzLnJhaXNlLmRlc3Ryb3koJ2dhbnR0SGVhZGVyQ29sdW1ucycsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICB9KTsKICAgICAgICB9XQogICAgfTsKfV0pOwoKCmdhbnR0LmRpcmVjdGl2ZSgnZ2FudHRMYWJlbHMnLCBbZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgcmVxdWlyZTogJ15nYW50dCcsCiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSwKICAgICAgICByZXBsYWNlOiB0cnVlLAogICAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7CiAgICAgICAgICAgIGlmICh0QXR0cnMudGVtcGxhdGVVcmwgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuICd0ZW1wbGF0ZS9kZWZhdWx0LmxhYmVscy50bXBsLmh0bWwnOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRBdHRycy50ZW1wbGF0ZVVybDsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50KSB7CiAgICAgICAgICAgICRzY29wZS5nYW50dC5sYWJlbHMuJGVsZW1lbnQgPSAkZWxlbWVudDsKCiAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5uZXcoJ2dhbnR0TGFiZWxzJywgJHNjb3BlLCAkZWxlbWVudCk7CiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UuZGVzdHJveSgnZ2FudHRMYWJlbHMnLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfV0KICAgIH07Cn1dKTsKCgpnYW50dC5kaXJlY3RpdmUoJ2dhbnR0Um93JywgW2Z1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgICByZXN0cmljdDogJ0UnLAogICAgICAgIHJlcXVpcmU6ICdeZ2FudHRCb2R5JywKICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLAogICAgICAgIHJlcGxhY2U6IHRydWUsCiAgICAgICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsKICAgICAgICAgICAgaWYgKHRBdHRycy50ZW1wbGF0ZVVybCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJ3RlbXBsYXRlL2RlZmF1bHQucm93LnRtcGwuaHRtbCc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdEF0dHJzLnRlbXBsYXRlVXJsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKICAgICAgICAgICAgJHNjb3BlLnJvdy4kZWxlbWVudCA9ICRlbGVtZW50OwoKICAgICAgICAgICAgJHNjb3BlLmdhbnR0LmFwaS5kaXJlY3RpdmVzLnJhaXNlLm5ldygnZ2FudHRSb3cnLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5kZXN0cm95KCdnYW50dFJvdycsICRzY29wZSwgJGVsZW1lbnQpOwogICAgICAgICAgICB9KTsKICAgICAgICB9XQogICAgfTsKfV0pOwoKCmdhbnR0LmRpcmVjdGl2ZSgnZ2FudHRSb3dIZWFkZXInLCBbZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSwKICAgICAgICByZXBsYWNlOiB0cnVlLAogICAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7CiAgICAgICAgICAgIGlmICh0QXR0cnMudGVtcGxhdGVVcmwgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuICd0ZW1wbGF0ZS9kZWZhdWx0LnJvd0hlYWRlci50bXBsLmh0bWwnOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRBdHRycy50ZW1wbGF0ZVVybDsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50KSB7CiAgICAgICAgICAgICRzY29wZS5nYW50dC5yb3dIZWFkZXIuJGVsZW1lbnQgPSAkZWxlbWVudDsKCiAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5uZXcoJ2dhbnR0Um93SGVhZGVyJywgJHNjb3BlLCAkZWxlbWVudCk7CiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UuZGVzdHJveSgnZ2FudHRSb3dIZWFkZXInLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfV0KICAgIH07Cn1dKTsKCgpnYW50dC5kaXJlY3RpdmUoJ2dhbnR0Um93TGFiZWwnLCBbZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSwKICAgICAgICByZXBsYWNlOiB0cnVlLAogICAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7CiAgICAgICAgICAgIGlmICh0QXR0cnMudGVtcGxhdGVVcmwgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmV0dXJuICd0ZW1wbGF0ZS9kZWZhdWx0LnJvd0xhYmVsLnRtcGwuaHRtbCc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdEF0dHJzLnRlbXBsYXRlVXJsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKCiAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5uZXcoJ2dhbnR0Um93TGFiZWwnLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5kZXN0cm95KCdnYW50dFJvd0xhYmVsJywgJHNjb3BlLCAkZWxlbWVudCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH1dCiAgICB9Owp9XSk7CgoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dFRpbWVGcmFtZScsIFtmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICByZXF1aXJlOiAnXmdhbnR0Q29sdW1uJywKICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLAogICAgICAgIHJlcGxhY2U6IHRydWUsCiAgICAgICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsKICAgICAgICAgICAgaWYgKHRBdHRycy50ZW1wbGF0ZVVybCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJ3RlbXBsYXRlL2RlZmF1bHQudGltZUZyYW1lLnRtcGwuaHRtbCc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdEF0dHJzLnRlbXBsYXRlVXJsOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckZWxlbWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHsKICAgICAgICAgICAgJHNjb3BlLnRpbWVGcmFtZS4kZWxlbWVudCA9ICRlbGVtZW50OwoKICAgICAgICAgICAgJHNjb3BlLmdldENsYXNzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IFsnZ2FudHQtdGltZWZyYW1lJyArICgkc2NvcGUudGltZUZyYW1lLndvcmtpbmcgPyAnJyA6ICctbm9uJykgKyAnLXdvcmtpbmcnXTsKCiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRpbWVGcmFtZS5jbGFzc2VzKSB7CiAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXMuY29uY2F0KCRzY29wZS50aW1lRnJhbWUuY2xhc3Nlcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gY2xhc3NlczsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICRzY29wZS5nYW50dC5hcGkuZGlyZWN0aXZlcy5yYWlzZS5uZXcoJ2dhbnR0VGltZUZyYW1lJywgJHNjb3BlLCAkZWxlbWVudCk7CiAgICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUuZ2FudHQuYXBpLmRpcmVjdGl2ZXMucmFpc2UuZGVzdHJveSgnZ2FudHRUaW1lRnJhbWUnLCAkc2NvcGUsICRlbGVtZW50KTsKICAgICAgICAgICAgfSk7CgogICAgICAgIH1dCiAgICB9Owp9XSk7CgoKZ2FudHQuZmFjdG9yeSgnZ2FudHREZWJvdW5jZScsIFsnJHRpbWVvdXQnLCBmdW5jdGlvbigkdGltZW91dCkgewogICAgZnVuY3Rpb24gZGVib3VuY2UoZm4sIHRpbWVvdXQsIGludm9rZUFwcGx5KSB7CiAgICAgICAgdmFyIG50aENhbGwgPSAwOwogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgICB2YXIgYXJneiA9IGFyZ3VtZW50czsKICAgICAgICAgICAgbnRoQ2FsbCsrOwogICAgICAgICAgICB2YXIgbGF0ZXIgPSAoZnVuY3Rpb24odmVyc2lvbikgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uID09PSBudGhDYWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmd6KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KShudGhDYWxsKTsKICAgICAgICAgICAgcmV0dXJuICR0aW1lb3V0KGxhdGVyLCB0aW1lb3V0LCBpbnZva2VBcHBseSA9PT0gdW5kZWZpbmVkID8gdHJ1ZTogaW52b2tlQXBwbHkpOwogICAgICAgIH07CiAgICB9CgogICAgcmV0dXJuIGRlYm91bmNlOwp9XSk7CgpnYW50dC5zZXJ2aWNlKCdnYW50dEVuYWJsZU5nQW5pbWF0ZScsIFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7CiAgICB2YXIgbmdBbmltYXRlOwogICAgdHJ5IHsKICAgICAgICBuZ0FuaW1hdGUgPSAkaW5qZWN0b3IuZ2V0KCckYW5pbWF0ZScpOwogICAgfSBjYXRjaCAoZSkgewogICAgfQoKICAgIGlmIChuZ0FuaW1hdGUgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBmdW5jdGlvbihlbmFibGVkLCBlbGVtZW50KSB7CiAgICAgICAgICAgIG5nQW5pbWF0ZS5lbmFibGVkKGZhbHNlLCBlbGVtZW50KTsKICAgICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7fTsKICAgIH0KCgp9XSk7CgoKZ2FudHQuc2VydmljZSgnZ2FudHRMYXlvdXQnLCBbJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRkb2N1bWVudCkgewogICAgcmV0dXJuIHsKICAgICAgICAvKioKICAgICAgICAgKiBDb21wdXRlIHRoZSB3aWR0aCBvZiBzY3JvbGxiYXIuCiAgICAgICAgICoKICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSB3aWR0aCBvZiB0aGUgc2Nyb2xsYmFyLCBpbiBweC4KICAgICAgICAgKi8KICAgICAgICBnZXRTY3JvbGxCYXJXaWR0aDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBpbm5lciA9ICRkb2N1bWVudFswXS5jcmVhdGVFbGVtZW50KCdwJyk7CiAgICAgICAgICAgIGlubmVyLnN0eWxlLndpZHRoID0gJzEwMCUnOwogICAgICAgICAgICBpbm5lci5zdHlsZS5oZWlnaHQgPSAnMjAwcHgnOwoKICAgICAgICAgICAgdmFyIG91dGVyID0gJGRvY3VtZW50WzBdLmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICBvdXRlci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7CiAgICAgICAgICAgIG91dGVyLnN0eWxlLnRvcCA9ICcwcHgnOwogICAgICAgICAgICBvdXRlci5zdHlsZS5sZWZ0ID0gJzBweCc7CiAgICAgICAgICAgIG91dGVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJzsKICAgICAgICAgICAgb3V0ZXIuc3R5bGUud2lkdGggPSAnMjAwcHgnOwogICAgICAgICAgICBvdXRlci5zdHlsZS5oZWlnaHQgPSAnMTUwcHgnOwogICAgICAgICAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nOwogICAgICAgICAgICBvdXRlci5hcHBlbmRDaGlsZCAoaW5uZXIpOwoKICAgICAgICAgICAgJGRvY3VtZW50WzBdLmJvZHkuYXBwZW5kQ2hpbGQgKG91dGVyKTsKICAgICAgICAgICAgdmFyIHcxID0gaW5uZXIub2Zmc2V0V2lkdGg7CiAgICAgICAgICAgIG91dGVyLnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7CiAgICAgICAgICAgIHZhciB3MiA9IGlubmVyLm9mZnNldFdpZHRoOwogICAgICAgICAgICBpZiAodzEgPT09IHcyKSB7CiAgICAgICAgICAgICAgICB3MiA9IG91dGVyLmNsaWVudFdpZHRoOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRkb2N1bWVudFswXS5ib2R5LnJlbW92ZUNoaWxkIChvdXRlcik7CgogICAgICAgICAgICByZXR1cm4gKHcxIC0gdzIpOwogICAgICAgIH0sCgogICAgICAgIHNldENvbHVtbnNXaWR0aDogZnVuY3Rpb24od2lkdGgsIG9yaWdpbmFsV2lkdGgsIGNvbHVtbnMpIHsKICAgICAgICAgICAgaWYgKHdpZHRoICYmIG9yaWdpbmFsV2lkdGggJiYgY29sdW1ucykgewoKICAgICAgICAgICAgICAgIHZhciB3aWR0aEZhY3RvciA9IE1hdGguYWJzKHdpZHRoIC8gb3JpZ2luYWxXaWR0aCk7CgogICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNvbHVtbnMsIGZ1bmN0aW9uKGNvbHVtbikgewogICAgICAgICAgICAgICAgICAgIGNvbHVtbi5sZWZ0ID0gd2lkdGhGYWN0b3IgKiBjb2x1bW4ub3JpZ2luYWxTaXplLmxlZnQ7CiAgICAgICAgICAgICAgICAgICAgY29sdW1uLndpZHRoID0gd2lkdGhGYWN0b3IgKiBjb2x1bW4ub3JpZ2luYWxTaXplLndpZHRoOwoKICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29sdW1uLnRpbWVGcmFtZXMsIGZ1bmN0aW9uKHRpbWVGcmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUubGVmdCA9IHdpZHRoRmFjdG9yICogdGltZUZyYW1lLm9yaWdpbmFsU2l6ZS5sZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICB0aW1lRnJhbWUud2lkdGggPSB3aWR0aEZhY3RvciAqIHRpbWVGcmFtZS5vcmlnaW5hbFNpemUud2lkdGg7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07Cn1dKTsKCgpnYW50dC5zZXJ2aWNlKCdnYW50dE1vdXNlQnV0dG9uJywgWyBmdW5jdGlvbigpIHsKICAgIC8vIE1vdXNlIGJ1dHRvbiBjcm9zcyBicm93c2VyIG5vcm1hbGl6YXRpb24KCiAgICByZXR1cm4gewogICAgICAgIGdldEJ1dHRvbjogZnVuY3Rpb24oZSkgewogICAgICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7CgogICAgICAgICAgICBpZiAoIWUud2hpY2gpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlLmJ1dHRvbiA8IDIgPyAxIDogZS5idXR0b24gPT09IDQgPyAyIDogMzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBlLndoaWNoOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKfV0pOwoKZ2FudHQuc2VydmljZSgnZ2FudHRNb3VzZU9mZnNldCcsIFsgZnVuY3Rpb24oKSB7CiAgICAvLyBNb3VzZSBvZmZzZXQgc3VwcG9ydCBmb3IgbGVzc2VyIGJyb3dzZXJzIChyZWFkIElFIDgpCgogICAgcmV0dXJuIHsKICAgICAgICBnZXRPZmZzZXQ6IGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgICBpZiAoZXZ0Lm9mZnNldFggJiYgZXZ0Lm9mZnNldFkpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IGV2dC5vZmZzZXRYLCB5OiBldnQub2Zmc2V0WSB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChldnQubGF5ZXJYICYmIGV2dC5sYXllclkpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IGV2dC5sYXllclgsIHk6IGV2dC5sYXllclkgfTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9mZnNldEZvckVsZW1lbnQoZXZ0LnRhcmdldCwgZXZ0KTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZ2V0T2Zmc2V0Rm9yRWxlbWVudDogZnVuY3Rpb24oZWwsIGV2dCkgewogICAgICAgICAgICB2YXIgYmIgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgICAgICAgICAgcmV0dXJuIHsgeDogZXZ0LmNsaWVudFggLSBiYi5sZWZ0LCB5OiBldnQuY2xpZW50WSAtIGJiLnRvcCB9OwogICAgICAgIH0KICAgIH07Cn1dKTsKCmdhbnR0LmZhY3RvcnkoJ2dhbnR0U21hcnRFdmVudCcsIFtmdW5jdGlvbigpIHsKICAgIC8vIEF1dG8gcmVsZWFzZWQgdGhlIGJpbmRpbmcgd2hlbiB0aGUgc2NvcGUgaXMgZGVzdHJveWVkLiBVc2UgaWYgYW4gZXZlbnQgaXMgcmVnaXN0ZXJlZCBvbiBhbm90aGVyIGVsZW1lbnQgdGhhbiB0aGUgc2NvcGUuCgogICAgZnVuY3Rpb24gc21hcnRFdmVudCgkc2NvcGUsICRlbGVtZW50LCBldmVudCwgZm4pIHsKICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkZWxlbWVudC51bmJpbmQoZXZlbnQsIGZuKTsKICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgYmluZE9uY2U6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJGVsZW1lbnQub25lKGV2ZW50LCBmbik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJpbmQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJGVsZW1lbnQuYmluZChldmVudCwgZm4pOwogICAgICAgICAgICB9LAogICAgICAgICAgICB1bmJpbmQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJGVsZW1lbnQudW5iaW5kKGV2ZW50LCBmbik7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKICAgIHJldHVybiBzbWFydEV2ZW50Owp9XSk7CmFuZ3VsYXIubW9kdWxlKCdnYW50dFRlbXBsYXRlcycsIFtdKS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7CiAgICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3RlbXBsYXRlL2RlZmF1bHQuZ2FudHQudG1wbC5odG1sJywKICAgICAgICAnPGRpdiBjbGFzcz0iZ2FudHQgdW5zZWxlY3RhYmxlIiBuZy1jbG9hayBnYW50dC1zY3JvbGwtbWFuYWdlciBnYW50dC1lbGVtZW50LXdpZHRoLWxpc3RlbmVyPlxuJyArCiAgICAgICAgJyAgICA8Z2FudHQtbGFiZWxzPlxuJyArCiAgICAgICAgJyAgICAgICAgPGRpdiBjbGFzcz0iZ2FudHQtbGFiZWxzLWhlYWRlciI+XG4nICsKICAgICAgICAnICAgICAgICAgICAgPGdhbnR0LXJvdy1oZWFkZXI+PC9nYW50dC1yb3ctaGVhZGVyPlxuJyArCiAgICAgICAgJyAgICAgICAgPC9kaXY+XG4nICsKICAgICAgICAnICAgICAgICA8ZGl2IGNsYXNzPSJnYW50dC1sYWJlbHMtYm9keSJcbicgKwogICAgICAgICcgICAgICAgICAgICAgbmctc3R5bGU9IihtYXhIZWlnaHQgPiAwICYmIHtcJ21heC1oZWlnaHRcJzogKG1heEhlaWdodCAtIGdhbnR0LmhlYWRlci5nZXRIZWlnaHQoKSkrXCdweFwnfSB8fCB7fSkiXG4nICsKICAgICAgICAnICAgICAgICAgICAgIG5nLXNob3c9ImdhbnR0LmNvbHVtbnNNYW5hZ2VyLmNvbHVtbnMubGVuZ3RoID4gMCI+XG4nICsKICAgICAgICAnICAgICAgICAgICAgPGRpdiBnYW50dC12ZXJ0aWNhbC1zY3JvbGwtcmVjZWl2ZXIgc3R5bGU9InBvc2l0aW9uOiByZWxhdGl2ZSI+XG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgIDxnYW50dC1yb3ctbGFiZWwgbmctcmVwZWF0PSJyb3cgaW4gZ2FudHQucm93c01hbmFnZXIudmlzaWJsZVJvd3MgdHJhY2sgYnkgJGluZGV4Ij5cbicgKwogICAgICAgICcgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJnYW50dC1sYWJlbHMtdGV4dCI+e3sgcm93Lm5hbWUgfX08L3NwYW4+XG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgIDwvZ2FudHQtcm93LWxhYmVsPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgIDwvZGl2PlxuJyArCiAgICAgICAgJyAgICAgICAgPC9kaXY+XG4nICsKICAgICAgICAnICAgIDwvZ2FudHQtbGFiZWxzPlxuJyArCiAgICAgICAgJyAgICA8Z2FudHQtaGVhZGVyPlxuJyArCiAgICAgICAgJyAgICAgICAgPGdhbnR0LWhlYWRlci1jb2x1bW5zPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgIDxkaXYgbmctcmVwZWF0PSJoZWFkZXIgaW4gZ2FudHQuY29sdW1uc01hbmFnZXIudmlzaWJsZUhlYWRlcnMiPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnYW50dC1oZWFkZXItcm93IGdhbnR0LWhlYWRlci1yb3ctYm90dG9tIj5cbicgKwogICAgICAgICcgICAgICAgICAgICAgICAgICAgIDxnYW50dC1jb2x1bW4taGVhZGVyIG5nLXJlcGVhdD0iY29sdW1uIGluIGhlYWRlciB0cmFjayBieSAkaW5kZXgiPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICAgICAgICAgIHt7IGNvbHVtbi5sYWJlbCB9fVxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICAgICAgPC9nYW50dC1jb2x1bW4taGVhZGVyPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICA8L2Rpdj5cbicgKwogICAgICAgICcgICAgICAgICAgICA8L2Rpdj5cbicgKwogICAgICAgICcgICAgICAgIDwvZ2FudHQtaGVhZGVyLWNvbHVtbnM+XG4nICsKICAgICAgICAnICAgIDwvZ2FudHQtaGVhZGVyPlxuJyArCiAgICAgICAgJyAgICA8Z2FudHQtc2Nyb2xsYWJsZT5cbicgKwogICAgICAgICcgICAgICAgIDxnYW50dC1ib2R5PlxuJyArCiAgICAgICAgJyAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbnR0LWJvZHktYmFja2dyb3VuZCI+XG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbnR0LXJvdy1oZWlnaHQiXG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgICAgICAgbmctY2xhc3Mtb2RkPSJcJ2dhbnR0LWJhY2tncm91bmQtcm93XCciXG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgICAgICAgbmctY2xhc3MtZXZlbj0iXCdnYW50dC1iYWNrZ3JvdW5kLXJvdy1hbHRcJyJcbicgKwogICAgICAgICcgICAgICAgICAgICAgICAgICAgICBuZy1jbGFzcz0icm93LmNsYXNzZXMiXG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgICAgICAgbmctc3R5bGU9IntcJ2JhY2tncm91bmQtY29sb3JcJzogcm93LmNvbG9yLCBcJ2hlaWdodFwnOiByb3cuaGVpZ2h0fSJcbicgKwogICAgICAgICcgICAgICAgICAgICAgICAgICAgICBuZy1yZXBlYXQ9InJvdyBpbiBnYW50dC5yb3dzTWFuYWdlci52aXNpYmxlUm93cyB0cmFjayBieSAkaW5kZXgiPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICA8L2Rpdj5cbicgKwogICAgICAgICcgICAgICAgICAgICA8L2Rpdj5cbicgKwogICAgICAgICcgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnYW50dC1ib2R5LWZvcmVncm91bmQiPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnYW50dC1jdXJyZW50LWRhdGUtbGluZSIgbmctaWY9ImN1cnJlbnREYXRlID09PSBcJ2xpbmVcJyAmJiBnYW50dC5jdXJyZW50RGF0ZU1hbmFnZXIucG9zaXRpb24gPj0gMCAmJiBnYW50dC5jdXJyZW50RGF0ZU1hbmFnZXIucG9zaXRpb24gPD0gZ2FudHQud2lkdGgiIG5nLXN0eWxlPSJ7XCdsZWZ0XCc6IGdhbnR0LmN1cnJlbnREYXRlTWFuYWdlci5wb3NpdGlvbiArIFwncHhcJyB9Ij48L2Rpdj5cbicgKwogICAgICAgICcgICAgICAgICAgICA8L2Rpdj5cbicgKwogICAgICAgICcgICAgICAgICAgICA8Z2FudHQtYm9keS1jb2x1bW5zIGNsYXNzPSJnYW50dC1ib2R5LWNvbHVtbnMiPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICA8Z2FudHQtY29sdW1uIG5nLXJlcGVhdD0iY29sdW1uIGluIGdhbnR0LmNvbHVtbnNNYW5hZ2VyLnZpc2libGVDb2x1bW5zIHRyYWNrIGJ5ICRpbmRleCI+XG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgICAgICA8Z2FudHQtdGltZS1mcmFtZSBuZy1yZXBlYXQ9InRpbWVGcmFtZSBpbiBjb2x1bW4udmlzaWJsZVRpbWVGcmFtZXMiPjwvZ2FudHQtdGltZS1mcmFtZT5cbicgKwogICAgICAgICcgICAgICAgICAgICAgICAgPC9nYW50dC1jb2x1bW4+XG4nICsKICAgICAgICAnICAgICAgICAgICAgPC9nYW50dC1ib2R5LWNvbHVtbnM+XG4nICsKICAgICAgICAnICAgICAgICAgICAgPGdhbnR0LWJvZHktcm93cz5cbicgKwogICAgICAgICcgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2FudHQtdGltZXNwYW4iXG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgICAgICAgbmctc3R5bGU9IntcJ2xlZnRcJzogKCh0aW1lc3Bhbi5sZWZ0LTAuMykgfHwgdGltZXNwYW4ubGVmdCkrXCdweFwnLCBcJ3dpZHRoXCc6IHRpbWVzcGFuLndpZHRoICtcJ3B4XCcsIFwnei1pbmRleFwnOiAodGltZXNwYW4ucHJpb3JpdHkgfHwgMCl9IlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICAgICAgIG5nLWNsYXNzPSJ0aW1lc3Bhbi5jbGFzc2VzIlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICAgICAgIG5nLXJlcGVhdD0idGltZXNwYW4gaW4gZ2FudHQudGltZXNwYW5zTWFuYWdlci50aW1lc3BhbnMiPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICAgICAgPGdhbnR0LXRvb2x0aXAgbmctbW9kZWw9InRpbWVzcGFuIiBkYXRlLWZvcm1hdD0iXCdNTU0gZFwnIj5cbicgKwogICAgICAgICcgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnYW50dC10YXNrLWNvbnRlbnQiPjxzcGFuPnt7IHRpbWVzcGFuLm5hbWUgfX08L3NwYW4+PC9kaXY+XG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgICAgICA8L2dhbnR0LXRvb2x0aXA+XG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgIDwvZGl2PlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICA8Z2FudHQtcm93IG5nLXJlcGVhdD0icm93IGluIGdhbnR0LnJvd3NNYW5hZ2VyLnZpc2libGVSb3dzIHRyYWNrIGJ5ICRpbmRleCI+XG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgICAgICA8Z2FudHQtdGFzayBuZy1yZXBlYXQ9InRhc2sgaW4gcm93LnZpc2libGVUYXNrcyB0cmFjayBieSB0YXNrLmlkIj48L2dhbnR0LXRhc2s+XG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgIDwvZ2FudHQtcm93PlxuJyArCiAgICAgICAgJyAgICAgICAgICAgIDwvZ2FudHQtYm9keS1yb3dzPlxuJyArCiAgICAgICAgJyAgICAgICAgPC9nYW50dC1ib2R5PlxuJyArCiAgICAgICAgJyAgICA8L2dhbnR0LXNjcm9sbGFibGU+XG4nICsKICAgICAgICAnXG4nICsKICAgICAgICAnICAgIDwhLS0gUGx1Z2lucyAtLT5cbicgKwogICAgICAgICcgICAgPG5nLXRyYW5zY2x1ZGU+PC9uZy10cmFuc2NsdWRlPlxuJyArCiAgICAgICAgJ1xuJyArCiAgICAgICAgJyAgICA8IS0tXG4nICsKICAgICAgICAnICAgICoqKioqKiogSW5saW5lIHRlbXBsYXRlcyAqKioqKioqXG4nICsKICAgICAgICAnICAgIFlvdSBjYW4gc3BlY2lmeSB5b3VyIG93biB0ZW1wbGF0ZXMgYnkgZWl0aGVyIGNoYW5naW5nIHRoZSBkZWZhdWx0IG9uZXMgYmVsb3cgb3IgYnlcbicgKwogICAgICAgICcgICAgYWRkaW5nIGFuIGF0dHJpYnV0ZSB0ZW1wbGF0ZS11cmw9Ijx1cmwgdG8geW91ciB0ZW1wbGF0ZT4iIG9uIHRoZSBzcGVjaWZpYyBlbGVtZW50LlxuJyArCiAgICAgICAgJyAgICAtLT5cbicgKwogICAgICAgICdcbicgKwogICAgICAgICcgICAgPCEtLSBCb2R5IHRlbXBsYXRlIC0tPlxuJyArCiAgICAgICAgJyAgICA8c2NyaXB0IHR5cGU9InRleHQvbmctdGVtcGxhdGUiIGlkPSJ0ZW1wbGF0ZS9kZWZhdWx0LmJvZHkudG1wbC5odG1sIj5cbicgKwogICAgICAgICcgICAgICAgIDxkaXYgbmctdHJhbnNjbHVkZSBjbGFzcz0iZ2FudHQtYm9keSJcbicgKwogICAgICAgICcgICAgICAgICAgICAgbmctc3R5bGU9IntcJ3dpZHRoXCc6IGdhbnR0LndpZHRoICtcJ3B4XCd9Ij48L2Rpdj5cbicgKwogICAgICAgICcgICAgPC9zY3JpcHQ+XG4nICsKICAgICAgICAnXG4nICsKICAgICAgICAnICAgIDwhLS0gSGVhZGVyIHRlbXBsYXRlIC0tPlxuJyArCiAgICAgICAgJyAgICA8c2NyaXB0IHR5cGU9InRleHQvbmctdGVtcGxhdGUiIGlkPSJ0ZW1wbGF0ZS9kZWZhdWx0LmhlYWRlci50bXBsLmh0bWwiPlxuJyArCiAgICAgICAgJyAgICAgICAgPGRpdiBuZy10cmFuc2NsdWRlIGNsYXNzPSJnYW50dC1oZWFkZXIiXG4nICsKICAgICAgICAnICAgICAgICAgICAgIG5nLXNob3c9ImdhbnR0LmNvbHVtbnNNYW5hZ2VyLmNvbHVtbnMubGVuZ3RoID4gMCAmJiBnYW50dC5jb2x1bW5zTWFuYWdlci5nZXRBY3RpdmVIZWFkZXJzQ291bnQoKSA+IDAiXG4nICsKICAgICAgICAnICAgICAgICAgICAgIG5nLXN0eWxlPSJnZXRIZWFkZXJDc3MoKSI+PC9kaXY+XG4nICsKICAgICAgICAnICAgIDwvc2NyaXB0PlxuJyArCiAgICAgICAgJ1xuJyArCiAgICAgICAgJyAgICA8IS0tIFJvdyBsYWJlbCB0ZW1wbGF0ZSAtLT5cbicgKwogICAgICAgICcgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L25nLXRlbXBsYXRlIiBpZD0idGVtcGxhdGUvZGVmYXVsdC5yb3dMYWJlbC50bXBsLmh0bWwiPlxuJyArCiAgICAgICAgJyAgICAgICAgPGRpdiBuZy10cmFuc2NsdWRlIGNsYXNzPSJnYW50dC1sYWJlbHMtcm93IGdhbnR0LXJvdy1oZWlnaHQiXG4nICsKICAgICAgICAnICAgICAgICAgICAgIG5nLWNsYXNzLW9kZD0iXCdnYW50dC1iYWNrZ3JvdW5kLXJvd1wnIlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICBuZy1jbGFzcy1ldmVuPSJcJ2dhbnR0LWJhY2tncm91bmQtcm93LWFsdFwnIlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICBuZy1jbGFzcz0icm93LmNsYXNzZXMiIG5nLXN0eWxlPSJ7XCdiYWNrZ3JvdW5kLWNvbG9yXCc6IHJvdy5jb2xvciwgXCdoZWlnaHRcJzogcm93LmhlaWdodH0iPlxuJyArCiAgICAgICAgJyAgICAgICAgPC9kaXY+XG4nICsKICAgICAgICAnICAgIDwvc2NyaXB0PlxuJyArCiAgICAgICAgJ1xuJyArCiAgICAgICAgJyAgICA8IS0tIFJvdyBoZWFkZXIgdGVtcGxhdGUgLS0+XG4nICsKICAgICAgICAnICAgIDxzY3JpcHQgdHlwZT0idGV4dC9uZy10ZW1wbGF0ZSIgaWQ9InRlbXBsYXRlL2RlZmF1bHQucm93SGVhZGVyLnRtcGwuaHRtbCI+XG4nICsKICAgICAgICAnICAgICAgICA8ZGl2IGNsYXNzPSJnYW50dC1sYWJlbHMtaGVhZGVyLXJvdyJcbicgKwogICAgICAgICcgICAgICAgICAgICAgbmctc2hvdz0iZ2FudHQuY29sdW1uc01hbmFnZXIuY29sdW1ucy5sZW5ndGggPiAwICYmIGdhbnR0LmNvbHVtbnNNYW5hZ2VyLmdldEFjdGl2ZUhlYWRlcnNDb3VudCgpID4gMCJcbicgKwogICAgICAgICcgICAgICAgICAgICAgbmctc3R5bGU9IntcJ21hcmdpbi10b3BcJzogKChnYW50dC5jb2x1bW5zTWFuYWdlci5nZXRBY3RpdmVIZWFkZXJzQ291bnQoKS0xKSoyKStcJ2VtXCd9Ij5cbicgKwogICAgICAgICcgICAgICAgICAgICA8c3Bhbj5OYW1lPC9zcGFuPlxuJyArCiAgICAgICAgJyAgICAgICAgPC9kaXY+XG4nICsKICAgICAgICAnICAgIDwvc2NyaXB0PlxuJyArCiAgICAgICAgJ1xuJyArCiAgICAgICAgJyAgICA8IS0tIExhYmVscyB0ZW1wbGF0ZSAtLT5cbicgKwogICAgICAgICcgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L25nLXRlbXBsYXRlIiBpZD0idGVtcGxhdGUvZGVmYXVsdC5sYWJlbHMudG1wbC5odG1sIj5cbicgKwogICAgICAgICcgICAgICAgIDxkaXYgbmctdHJhbnNjbHVkZSBuZy1pZj0ic2hvd0xhYmVsc0NvbHVtbiIgY2xhc3M9ImdhbnR0LWxhYmVscyJcbicgKwogICAgICAgICcgICAgICAgICAgICAgbmctc3R5bGU9IihsYWJlbHNXaWR0aCA+IDAgJiYge1wnd2lkdGhcJzogbGFiZWxzV2lkdGgrXCdweFwnfSB8fCB7fSkiXG4nICsKICAgICAgICAnICAgICAgICAgICAgIGdhbnR0LWxhYmVscy1yZXNpemU9IiRwYXJlbnQuYWxsb3dMYWJlbHNSZXNpemluZyJcbicgKwogICAgICAgICcgICAgICAgICAgICAgZ2FudHQtbGFiZWxzLXJlc2l6ZS13aWR0aD0iJHBhcmVudC5sYWJlbHNXaWR0aCJcbicgKwogICAgICAgICcgICAgICAgICAgICAgZ2FudHQtbGFiZWxzLXJlc2l6ZS1taW4td2lkdGg9IjUwIlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICBnYW50dC1lbGVtZW50LXdpZHRoLWxpc3RlbmVyPSIkcGFyZW50LmxhYmVsc1dpZHRoIj48L2Rpdj5cbicgKwogICAgICAgICcgICAgPC9zY3JpcHQ+XG4nICsKICAgICAgICAnXG4nICsKICAgICAgICAnICAgIDwhLS0gSGVhZGVyIGNvbHVtbnMgdGVtcGxhdGUgLS0+XG4nICsKICAgICAgICAnICAgIDxzY3JpcHQgdHlwZT0idGV4dC9uZy10ZW1wbGF0ZSIgaWQ9InRlbXBsYXRlL2RlZmF1bHQuaGVhZGVyQ29sdW1ucy50bXBsLmh0bWwiPlxuJyArCiAgICAgICAgJyAgICAgICAgPGRpdiBuZy10cmFuc2NsdWRlIGNsYXNzPSJnYW50dC1oZWFkZXItY29sdW1ucyJcbicgKwogICAgICAgICcgICAgICAgICAgICAgIGdhbnR0LWhvcml6b250YWwtc2Nyb2xsLXJlY2VpdmVyPjwvZGl2PlxuJyArCiAgICAgICAgJyAgICA8L3NjcmlwdD5cbicgKwogICAgICAgICdcbicgKwogICAgICAgICcgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L25nLXRlbXBsYXRlIiBpZD0idGVtcGxhdGUvZGVmYXVsdC5jb2x1bW5IZWFkZXIudG1wbC5odG1sIj5cbicgKwogICAgICAgICcgICAgICAgIDxkaXYgbmctdHJhbnNjbHVkZSBjbGFzcz0iZ2FudHQtY29sdW1uLWhlYWRlciJcbicgKwogICAgICAgICcgICAgICAgICAgICAgIG5nLXN0eWxlPSJ7XCdsZWZ0XCc6IGNvbHVtbi5sZWZ0K1wncHhcJywgXCd3aWR0aFwnOiBjb2x1bW4ud2lkdGgrXCdweFwnfSI+PC9kaXY+XG4nICsKICAgICAgICAnICAgIDwvc2NyaXB0PlxuJyArCiAgICAgICAgJ1xuJyArCiAgICAgICAgJyAgICA8IS0tIEJvZHkgY29sdW1ucyB0ZW1wbGF0ZSAtLT5cbicgKwogICAgICAgICcgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L25nLXRlbXBsYXRlIiBpZD0idGVtcGxhdGUvZGVmYXVsdC5ib2R5Q29sdW1ucy50bXBsLmh0bWwiPlxuJyArCiAgICAgICAgJyAgICAgICAgPGRpdiBuZy10cmFuc2NsdWRlIGNsYXNzPSJnYW50dC1ib2R5LWNvbHVtbnMiPjwvZGl2PlxuJyArCiAgICAgICAgJyAgICA8L3NjcmlwdD5cbicgKwogICAgICAgICdcbicgKwogICAgICAgICcgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L25nLXRlbXBsYXRlIiBpZD0idGVtcGxhdGUvZGVmYXVsdC5jb2x1bW4udG1wbC5odG1sIj5cbicgKwogICAgICAgICcgICAgICAgIDxkaXYgbmctdHJhbnNjbHVkZSBjbGFzcz0iZ2FudHQtY29sdW1uIlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICBuZy1jbGFzcz0iKGNvbHVtbi5jdXJyZW50RGF0ZSAmJiBjdXJyZW50RGF0ZSA9PT0gXCdjb2x1bW5cJykgJiYgXCdnYW50dC1mb3JlZ3JvdW5kLWNvbC1jdXJyZW50LWRhdGVcJyB8fCBcJ2dhbnR0LWZvcmVncm91bmQtY29sXCciXG4nICsKICAgICAgICAnICAgICAgICAgICAgIG5nLXN0eWxlPSJ7XCdsZWZ0XCc6IGNvbHVtbi5sZWZ0K1wncHhcJywgXCd3aWR0aFwnOiBjb2x1bW4ud2lkdGgrXCdweFwnfSI+PC9kaXY+XG4nICsKICAgICAgICAnICAgIDwvc2NyaXB0PlxuJyArCiAgICAgICAgJ1xuJyArCiAgICAgICAgJyAgICA8c2NyaXB0IHR5cGU9InRleHQvbmctdGVtcGxhdGUiIGlkPSJ0ZW1wbGF0ZS9kZWZhdWx0LnRpbWVGcmFtZS50bXBsLmh0bWwiPlxuJyArCiAgICAgICAgJyAgICAgICAgPGRpdiBjbGFzcz0iZ2FudHQtdGltZWZyYW1lIlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICBuZy1jbGFzcz0iZ2V0Q2xhc3MoKSJcbicgKwogICAgICAgICcgICAgICAgICAgICAgbmctc3R5bGU9IntcJ2xlZnRcJzogdGltZUZyYW1lLmxlZnQgKyBcJ3B4XCcsIFwnd2lkdGhcJzogdGltZUZyYW1lLndpZHRoICsgXCdweFwnLCBcJ2JhY2tncm91bmQtY29sb3JcJzogdGltZUZyYW1lLmNvbG9yICYmIHRpbWVGcmFtZS5jb2xvciB8fCBcJ1wnfSI+PC9kaXY+XG4nICsKICAgICAgICAnICAgIDwvc2NyaXB0PlxuJyArCiAgICAgICAgJ1xuJyArCiAgICAgICAgJyAgICA8IS0tIFNjcm9sbGFibGUgdGVtcGxhdGUgLS0+XG4nICsKICAgICAgICAnICAgIDxzY3JpcHQgdHlwZT0idGV4dC9uZy10ZW1wbGF0ZSIgaWQ9InRlbXBsYXRlL2RlZmF1bHQuc2Nyb2xsYWJsZS50bXBsLmh0bWwiPlxuJyArCiAgICAgICAgJyAgICAgICAgPGRpdiBuZy10cmFuc2NsdWRlIGNsYXNzPSJnYW50dC1zY3JvbGxhYmxlIiBnYW50dC1zY3JvbGwtc2VuZGVyIGdhbnR0LWxpbWl0LXVwZGF0ZXJcbicgKwogICAgICAgICcgICAgICAgICAgICAgbmctc3R5bGU9ImdldFNjcm9sbGFibGVDc3MoKSI+PC9kaXY+XG4nICsKICAgICAgICAnICAgIDwvc2NyaXB0PlxuJyArCiAgICAgICAgJ1xuJyArCiAgICAgICAgJyAgICA8IS0tIFJvd3MgdGVtcGxhdGUgLS0+XG4nICsKICAgICAgICAnICAgIDxzY3JpcHQgdHlwZT0idGV4dC9uZy10ZW1wbGF0ZSIgaWQ9InRlbXBsYXRlL2RlZmF1bHQuYm9keVJvd3MudG1wbC5odG1sIj5cbicgKwogICAgICAgICcgICAgICAgIDxkaXYgbmctdHJhbnNjbHVkZSBjbGFzcz0iZ2FudHQtYm9keS1yb3dzIj48L2Rpdj5cbicgKwogICAgICAgICcgICAgPC9zY3JpcHQ+XG4nICsKICAgICAgICAnXG4nICsKICAgICAgICAnICAgIDwhLS0gVGFzayB0ZW1wbGF0ZSAtLT5cbicgKwogICAgICAgICcgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L25nLXRlbXBsYXRlIiBpZD0idGVtcGxhdGUvZGVmYXVsdC50YXNrLnRtcGwuaHRtbCI+XG4nICsKICAgICAgICAnICAgICAgICA8ZGl2IG5nLWNsYXNzPSIodGFzay5pc01pbGVzdG9uZSA9PT0gdHJ1ZSAmJiBbXCdnYW50dC10YXNrLW1pbGVzdG9uZVwnXSB8fCBbXCdnYW50dC10YXNrXCddKS5jb25jYXQodGFzay5jbGFzc2VzKSJcbicgKwogICAgICAgICcgICAgICAgICAgICAgbmctc3R5bGU9IntcJ2xlZnRcJzogKCh0YXNrLmlzTWlsZXN0b25lID09PSB0cnVlIHx8IHRhc2sud2lkdGggPT09IDApICYmICh0YXNrLmxlZnQtMC4zKSB8fCB0YXNrLmxlZnQpK1wncHhcJywgXCd3aWR0aFwnOiB0YXNrLndpZHRoICtcJ3B4XCcsIFwnei1pbmRleFwnOiAodGFzay5pc01vdmluZyA9PT0gdHJ1ZSAmJiAxICB8fCB0YXNrLnByaW9yaXR5IHx8IFwnXCcpLCBcJ2JhY2tncm91bmQtY29sb3JcJzogdGFzay5jb2xvcn0iPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgIDxnYW50dC1ib3VuZHMgbmctbW9kZWw9InRhc2siPjwvZ2FudHQtYm91bmRzPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgIDxnYW50dC10b29sdGlwIG5nLW1vZGVsPSJ0YXNrIj48L2dhbnR0LXRvb2x0aXA+XG4nICsKICAgICAgICAnICAgICAgICAgICAgPGRpdiBuZy1pZj0idGFzay50cnVuY2F0ZWRMZWZ0IiBjbGFzcz0iZ2FudHQtdGFzay10cnVuY2F0ZWQtbGVmdCI+PHNwYW4+Jmx0Ozwvc3Bhbj48L2Rpdj5cbicgKwogICAgICAgICcgICAgICAgICAgICA8ZGl2IGNsYXNzPSJnYW50dC10YXNrLWNvbnRlbnQiPjxzcGFuPnt7ICh0YXNrLmlzTWlsZXN0b25lID09PSB0cnVlICYmIFwnJm5ic3A7XCcgfHwgdGFzay5uYW1lKSB9fTwvc3Bhbj48L2Rpdj5cbicgKwogICAgICAgICcgICAgICAgICAgICA8ZGl2IG5nLWlmPSJ0YXNrLnRydW5jYXRlZFJpZ2h0IiBjbGFzcz0iZ2FudHQtdGFzay10cnVuY2F0ZWQtcmlnaHQiPjxzcGFuPiZndDs8L3NwYW4+PC9kaXY+XG4nICsKICAgICAgICAnICAgICAgICAgICAgPGdhbnR0LXRhc2stcHJvZ3Jlc3MgbmctaWY9InRhc2sucHJvZ3Jlc3MgIT09IHVuZGVmaW5lZCI+PC9nYW50dC10YXNrLXByb2dyZXNzPlxuJyArCiAgICAgICAgJyAgICAgICAgPC9kaXY+XG4nICsKICAgICAgICAnICAgIDwvc2NyaXB0PlxuJyArCiAgICAgICAgJ1xuJyArCiAgICAgICAgJyAgICA8IS0tIFRvb2x0aXAgdGVtcGxhdGUgLS0+XG4nICsKICAgICAgICAnICAgIDxzY3JpcHQgdHlwZT0idGV4dC9uZy10ZW1wbGF0ZSIgaWQ9InRlbXBsYXRlL2RlZmF1bHQudG9vbHRpcC50bXBsLmh0bWwiPlxuJyArCiAgICAgICAgJyAgICAgICAgPGRpdiBuZy1zaG93PSJzaG93VG9vbHRpcHMiIGNsYXNzPSJnYW50dC10YXNrLWluZm8iIG5nLXN0eWxlPSJjc3MiPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdhbnR0LXRhc2staW5mby1jb250ZW50Ij5cbicgKwogICAgICAgICcgICAgICAgICAgICAgICAge3sgdGFzay5uYW1lIH19PC9icj5cbicgKwogICAgICAgICcgICAgICAgICAgICAgICAgPHNtYWxsPlxuJyArCiAgICAgICAgJyAgICAgICAgICAgICAgICAgICAge3tcbicgKwogICAgICAgICcgICAgICAgICAgICAgICAgICAgIHRhc2suaXNNaWxlc3RvbmUgPT09IHRydWUgJiYgKHRhc2suZ2V0RnJvbUxhYmVsKCkpIHx8ICh0YXNrLmdldEZyb21MYWJlbCgpICsgXCcgLSBcJyArIHRhc2suZ2V0VG9MYWJlbCgpKTtcbicgKwogICAgICAgICcgICAgICAgICAgICAgICAgICAgIH19XG4nICsKICAgICAgICAnICAgICAgICAgICAgICAgIDwvc21hbGw+XG4nICsKICAgICAgICAnICAgICAgICAgICAgPC9kaXY+XG4nICsKICAgICAgICAnICAgICAgICA8L2Rpdj5cbicgKwogICAgICAgICcgICAgPC9zY3JpcHQ+XG4nICsKICAgICAgICAnXG4nICsKICAgICAgICAnICAgIDwhLS0gVGFzayBib3VuZHMgdGVtcGxhdGUgLS0+XG4nICsKICAgICAgICAnICAgIDxzY3JpcHQgdHlwZT0idGV4dC9uZy10ZW1wbGF0ZSIgaWQ9InRlbXBsYXRlL2RlZmF1bHQuYm91bmRzLnRtcGwuaHRtbCI+XG4nICsKICAgICAgICAnICAgICAgICA8ZGl2IG5nLXNob3c9ImJvdW5kcyAmJiBpc1Rhc2tNb3VzZU92ZXIiIGNsYXNzPSJnYW50dC10YXNrLWJvdW5kcyJcbicgKwogICAgICAgICcgICAgICAgICAgICAgbmctc3R5bGU9ImdldENzcygpIiBuZy1jbGFzcz0iZ2V0Q2xhc3MoKSI+PC9kaXY+XG4nICsKICAgICAgICAnICAgIDwvc2NyaXB0PlxuJyArCiAgICAgICAgJ1xuJyArCiAgICAgICAgJyAgICA8IS0tIFRhc2sgcHJvZ3Jlc3MgdGVtcGxhdGUgLS0+XG4nICsKICAgICAgICAnICAgIDxzY3JpcHQgdHlwZT0idGV4dC9uZy10ZW1wbGF0ZSIgaWQ9InRlbXBsYXRlL2RlZmF1bHQudGFza1Byb2dyZXNzLnRtcGwuaHRtbCI+XG4nICsKICAgICAgICAnICAgICAgICA8ZGl2IGNsYXNzPVwnZ2FudHQtdGFzay1wcm9ncmVzc1wnIG5nLXN0eWxlPSJnZXRDc3MoKSIgbmctY2xhc3M9InByb2dyZXNzLmNsYXNzZXMiPjwvZGl2PlxuJyArCiAgICAgICAgJyAgICA8L3NjcmlwdD5cbicgKwogICAgICAgICdcbicgKwogICAgICAgICcgICAgPCEtLSBSb3cgdGVtcGxhdGUgLS0+XG4nICsKICAgICAgICAnICAgIDxzY3JpcHQgdHlwZT0idGV4dC9uZy10ZW1wbGF0ZSIgaWQ9InRlbXBsYXRlL2RlZmF1bHQucm93LnRtcGwuaHRtbCI+XG4nICsKICAgICAgICAnICAgICAgICA8ZGl2IG5nLXRyYW5zY2x1ZGUgY2xhc3M9ImdhbnR0LXJvdyBnYW50dC1yb3ctaGVpZ2h0IiBuZy1zdHlsZT0ie1wnaGVpZ2h0XCc6IHJvdy5oZWlnaHR9Ij48L2Rpdj5cbicgKwogICAgICAgICcgICAgPC9zY3JpcHQ+XG4nICsKICAgICAgICAnXG4nICsKICAgICAgICAnPC9kaXY+XG4nICsKICAgICAgICAnJyk7Cn1dKTsKCi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuZ3VsYXItZ2FudHQuanMubWFwCi8qClByb2plY3Q6IGFuZ3VsYXItZ2FudHQgZm9yIEFuZ3VsYXJKUwpBdXRob3I6IE1hcmNvIFNjaHdlaWdoYXVzZXIKQ29udHJpYnV0b3JzOiBSw6ltaSBBbHZlcmduYXQKTGljZW5zZTogTUlULgpHaXRodWI6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyLWdhbnR0L2FuZ3VsYXItZ2FudHQKKi8KJ3VzZSBzdHJpY3QnOwoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dE1vdmFibGUnLCBbJ2dhbnR0TW91c2VCdXR0b24nLCAnZ2FudHRNb3VzZU9mZnNldCcsICdnYW50dERlYm91bmNlJywgJ2dhbnR0U21hcnRFdmVudCcsICdnYW50dE1vdmFibGVPcHRpb25zJywgJyR3aW5kb3cnLCAnJGRvY3VtZW50JywgJyR0aW1lb3V0JywKICAgIGZ1bmN0aW9uKG1vdXNlQnV0dG9uLCBtb3VzZU9mZnNldCwgZGVib3VuY2UsIHNtYXJ0RXZlbnQsIG1vdmFibGVPcHRpb25zLCAkd2luZG93LCAkZG9jdW1lbnQsICR0aW1lb3V0KSB7CiAgICAgICAgLy8gUHJvdmlkZXMgbW92aW5nIGFuZCByZXNpemluZyBvZiB0YXNrcwogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgICAgIHJlcXVpcmU6ICdeZ2FudHQnLAogICAgICAgICAgICBzY29wZTogewogICAgICAgICAgICAgICAgYWxsb3dNb3Zpbmc6ICc9PycsCiAgICAgICAgICAgICAgICBhbGxvd1Jlc2l6aW5nOiAnPT8nLAogICAgICAgICAgICAgICAgYWxsb3dSb3dTd2l0Y2hpbmc6ICc9PycKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBnYW50dEN0cmwpIHsKICAgICAgICAgICAgICAgIHZhciBhcGkgPSBnYW50dEN0cmwuZ2FudHQuYXBpOwoKICAgICAgICAgICAgICAgIGFwaS5yZWdpc3RlckV2ZW50KCd0YXNrcycsICdtb3ZlJyk7CiAgICAgICAgICAgICAgICBhcGkucmVnaXN0ZXJFdmVudCgndGFza3MnLCAnbW92ZUJlZ2luJyk7CiAgICAgICAgICAgICAgICBhcGkucmVnaXN0ZXJFdmVudCgndGFza3MnLCAnbW92ZUVuZCcpOwogICAgICAgICAgICAgICAgYXBpLnJlZ2lzdGVyRXZlbnQoJ3Rhc2tzJywgJ3Jlc2l6ZScpOwogICAgICAgICAgICAgICAgYXBpLnJlZ2lzdGVyRXZlbnQoJ3Rhc2tzJywgJ3Jlc2l6ZUJlZ2luJyk7CiAgICAgICAgICAgICAgICBhcGkucmVnaXN0ZXJFdmVudCgndGFza3MnLCAncmVzaXplRW5kJyk7CgogICAgICAgICAgICAgICAgaWYgKHNjb3BlLm9wdGlvbnMgJiYgdHlwZW9mKHNjb3BlLm9wdGlvbnMubW92YWJsZSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgb3B0aW9uIGluIHNjb3BlLm9wdGlvbnMubW92YWJsZSkgewogICAgICAgICAgICAgICAgICAgICAgICBzY29wZVtvcHRpb25dID0gc2NvcGUub3B0aW9uc1tvcHRpb25dOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBtb3ZhYmxlT3B0aW9ucy5pbml0aWFsaXplKHNjb3BlKTsKCiAgICAgICAgICAgICAgICBhcGkuZGlyZWN0aXZlcy5vbi5uZXcoc2NvcGUsIGZ1bmN0aW9uKGRpcmVjdGl2ZU5hbWUsIHRhc2tTY29wZSwgdGFza0VsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aXZlTmFtZSA9PT0gJ2dhbnR0VGFzaycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc2l6ZUFyZWFXaWR0aEJpZyA9IDU7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNpemVBcmVhV2lkdGhTbWFsbCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxTcGVlZCA9IDE1OwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsVHJpZ2dlckRpc3RhbmNlID0gNTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2FudHRSb3dFbGVtZW50ID0gdGFza1Njb3BlLnJvdy4kZWxlbWVudDsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdhbnR0Qm9keUVsZW1lbnQgPSB0YXNrU2NvcGUucm93LnJvd3NNYW5hZ2VyLmdhbnR0LmJvZHkuJGVsZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnYW50dFNjcm9sbEVsZW1lbnQgPSB0YXNrU2NvcGUucm93LnJvd3NNYW5hZ2VyLmdhbnR0LnNjcm9sbC4kZWxlbWVudDsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXNrSGFzQmVlbkNoYW5nZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vdXNlT2Zmc2V0SW5FbTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vdmVTdGFydFg7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxJbnRlcnZhbDsKCiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tFbGVtZW50LmJpbmQoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Njb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZSA9IGdldE1vdmVNb2RlKGV2dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGUgIT09ICcnICYmIG1vdXNlQnV0dG9uLmdldEJ1dHRvbihldnQpID09PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXRYID0gbW91c2VPZmZzZXQuZ2V0T2Zmc2V0Rm9yRWxlbWVudChnYW50dEJvZHlFbGVtZW50WzBdLCBldnQpLng7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZU1vdmVNb2RlKG1vZGUsIG9mZnNldFgsIGV2dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgdGFza0VsZW1lbnQuYmluZCgnbW91c2Vtb3ZlJywgZGVib3VuY2UoZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGUgPSBnZXRNb3ZlTW9kZShlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RlICE9PSAnJyAmJiAodGFza1Njb3BlLnRhc2suaXNNb3ZpbmcgfHwgbW9kZSAhPT0gJ00nKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tFbGVtZW50LmNzcygnY3Vyc29yJywgZ2V0Q3Vyc29yKG1vZGUpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza0VsZW1lbnQuY3NzKCdjdXJzb3InLCAnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVNb3ZlID0gZnVuY3Rpb24obW9kZSwgZXZ0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFza1Njb3BlLnRhc2suaXNNb3ZpbmcgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUYXNrKG1vZGUsIGV2dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxTY3JlZW4obW9kZSwgZXZ0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb3ZlVGFzayA9IGZ1bmN0aW9uKG1vZGUsIGV2dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vdXNlUG9zID0gbW91c2VPZmZzZXQuZ2V0T2Zmc2V0Rm9yRWxlbWVudChnYW50dEJvZHlFbGVtZW50WzBdLCBldnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Njb3BlLnRhc2subW91c2VPZmZzZXRYID0gbW91c2VQb3MueDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gbW91c2VQb3MueDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RlID09PSAnTScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUuYWxsb3dSb3dTd2l0Y2hpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFJvdyA9IGdldFJvd0J5WShtb3VzZVBvcy55KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFJvdyAhPT0gdW5kZWZpbmVkICYmIHRhc2tTY29wZS50YXNrLnJvdy5pZCAhPT0gdGFyZ2V0Um93LmlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb3cubW92ZVRhc2tUb1Jvdyh0YXNrU2NvcGUudGFzayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5hbGxvd01vdmluZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0geCAtIG1vdXNlT2Zmc2V0SW5FbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2tTY29wZS50YXNrT3V0T2ZSYW5nZSAhPT0gJ3RydW5jYXRlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHggKyB0YXNrU2NvcGUudGFzay53aWR0aCA+PSB0YXNrU2NvcGUuZ2FudHQud2lkdGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gdGFza1Njb3BlLmdhbnR0LndpZHRoIC0gdGFza1Njb3BlLnRhc2sud2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Njb3BlLnRhc2subW92ZVRvKHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrU2NvcGUucm93LnJvd3NNYW5hZ2VyLmdhbnR0LmFwaS50YXNrcy5yYWlzZS5tb3ZlKHRhc2tTY29wZS50YXNrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdFJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXNrU2NvcGUudGFza091dE9mUmFuZ2UgIT09ICd0cnVuY2F0ZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggPCB0YXNrU2NvcGUudGFzay5sZWZ0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gdGFza1Njb3BlLnRhc2subGVmdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4ID4gdGFza1Njb3BlLmdhbnR0LndpZHRoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gdGFza1Njb3BlLmdhbnR0LndpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTY29wZS50YXNrLnNldFRvKHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTY29wZS5yb3cucm93c01hbmFnZXIuZ2FudHQuYXBpLnRhc2tzLnJhaXNlLnJlc2l6ZSh0YXNrU2NvcGUudGFzayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXNrU2NvcGUudGFza091dE9mUmFuZ2UgIT09ICd0cnVuY2F0ZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggPiB0YXNrU2NvcGUudGFzay5sZWZ0ICsgdGFza1Njb3BlLnRhc2sud2lkdGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSB0YXNrU2NvcGUudGFzay5sZWZ0ICsgdGFza1Njb3BlLnRhc2sud2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeCA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTY29wZS50YXNrLnNldEZyb20oeCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Njb3BlLnJvdy5yb3dzTWFuYWdlci5nYW50dC5hcGkudGFza3MucmFpc2UucmVzaXplKHRhc2tTY29wZS50YXNrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrSGFzQmVlbkNoYW5nZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbFNjcmVlbiA9IGZ1bmN0aW9uKG1vZGUsIGV2dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vdXNlUG9zID0gbW91c2VPZmZzZXQuZ2V0T2Zmc2V0Rm9yRWxlbWVudChnYW50dEJvZHlFbGVtZW50WzBdLCBldnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlZnRTY3JlZW5Cb3JkZXIgPSBnYW50dFNjcm9sbEVsZW1lbnRbMF0uc2Nyb2xsTGVmdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZWVwT25TY3JvbGxpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW91c2VQb3MueCA8IG1vdmVTdGFydFgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTY3JvbGwgdG8gdGhlIGxlZnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW91c2VQb3MueCA8PSBsZWZ0U2NyZWVuQm9yZGVyICsgc2Nyb2xsVHJpZ2dlckRpc3RhbmNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlUG9zLnggLT0gc2Nyb2xsU3BlZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtlZXBPblNjcm9sbGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTY29wZS5yb3cucm93c01hbmFnZXIuZ2FudHQuYXBpLnNjcm9sbC5sZWZ0KHNjcm9sbFNwZWVkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNjcm9sbCB0byB0aGUgcmlnaHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NyZWVuV2lkdGggPSBnYW50dFNjcm9sbEVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJpZ2h0U2NyZWVuQm9yZGVyID0gbGVmdFNjcmVlbkJvcmRlciArIHNjcmVlbldpZHRoOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW91c2VQb3MueCA+PSByaWdodFNjcmVlbkJvcmRlciAtIHNjcm9sbFRyaWdnZXJEaXN0YW5jZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZVBvcy54ICs9IHNjcm9sbFNwZWVkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZWVwT25TY3JvbGxpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrU2NvcGUucm93LnJvd3NNYW5hZ2VyLmdhbnR0LmFwaS5zY3JvbGwucmlnaHQoc2Nyb2xsU3BlZWQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2VlcE9uU2Nyb2xsaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsSW50ZXJ2YWwgPSAkdGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTW92ZShtb2RlLCBldnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xlYXJTY3JvbGxJbnRlcnZhbCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbEludGVydmFsICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwoc2Nyb2xsSW50ZXJ2YWwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbEludGVydmFsID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldFJvd0J5WSA9IGZ1bmN0aW9uKHkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ID49IGdhbnR0Um93RWxlbWVudFswXS5vZmZzZXRUb3AgJiYgeSA8PSBnYW50dFJvd0VsZW1lbnRbMF0ub2Zmc2V0VG9wICsgZ2FudHRSb3dFbGVtZW50WzBdLm9mZnNldEhlaWdodCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXNrU2NvcGUudGFzay5yb3c7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aXNpYmxlUm93cyA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0YXNrU2NvcGUudGFzay5yb3cucm93c01hbmFnZXIucm93cywgZnVuY3Rpb24ocm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcm93LmhpZGRlbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZVJvd3MucHVzaChyb3cpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvd0hlaWdodCA9IGdhbnR0Qm9keUVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0IC8gdmlzaWJsZVJvd3MubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBNYXRoLmZsb29yKHkgLyByb3dIZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2aXNpYmxlUm93c1twb3NdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldE1vdmVNb2RlID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBtb3VzZU9mZnNldC5nZXRPZmZzZXQoZSkueDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSAwOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlZmluZSByZXNpemUmbW92ZSBhcmVhLiBNYWtlIHN1cmUgdGhlIG1vdmUgYXJlYSBkb2VzIG5vdCBnZXQgdG9vIHNtYWxsLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLmFsbG93UmVzaXppbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHRhc2tFbGVtZW50WzBdLm9mZnNldFdpZHRoIDwgMTAgPyByZXNpemVBcmVhV2lkdGhTbWFsbCA6IHJlc2l6ZUFyZWFXaWR0aEJpZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcGUuYWxsb3dSZXNpemluZyAmJiB4ID4gdGFza0VsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLSBkaXN0YW5jZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnRSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNjb3BlLmFsbG93UmVzaXppbmcgJiYgeCA8IGRpc3RhbmNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdXJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHNjb3BlLmFsbG93TW92aW5nIHx8IHNjb3BlLmFsbG93Um93U3dpdGNoaW5nKSAmJiB4ID49IGRpc3RhbmNlICYmIHggPD0gdGFza0VsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLSBkaXN0YW5jZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnTSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZXRDdXJzb3IgPSBmdW5jdGlvbihtb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1vZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdFJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdlLXJlc2l6ZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVyc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndy1yZXNpemUnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ00nOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ21vdmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuYWJsZU1vdmVNb2RlID0gZnVuY3Rpb24obW9kZSwgeCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmFpc2UgdGFzayBtb3ZlIHN0YXJ0IGV2ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRhc2tTY29wZS50YXNrLmlzTW92aW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdNJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrU2NvcGUucm93LnJvd3NNYW5hZ2VyLmdhbnR0LmFwaS50YXNrcy5yYWlzZS5tb3ZlQmVnaW4odGFza1Njb3BlLnRhc2spOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTY29wZS5yb3cucm93c01hbmFnZXIuZ2FudHQuYXBpLnRhc2tzLnJhaXNlLnJlc2l6ZUJlZ2luKHRhc2tTY29wZS50YXNrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5pdCB0YXNrIG1vdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tIYXNCZWVuQ2hhbmdlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Njb3BlLnRhc2subW92ZU1vZGUgPSBtb2RlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Njb3BlLnRhc2suaXNNb3ZpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVN0YXJ0WCA9IHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZU9mZnNldEluRW0gPSB4IC0gdGFza1Njb3BlLnRhc2subW9kZWxMZWZ0OwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBtb3ZlIGV2ZW50IGhhbmRsZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFza01vdmVIYW5kbGVyID0gZGVib3VuY2UoZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2tTY29wZS50YXNrLmlzTW92aW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzIHRoaXMgZnVuY3Rpb24gaXMgZGVmZXJlZCwgZGlzYWJsZU1vdmVNb2RlIG1heSBoYXZlIGJlZW4gY2FsbGVkIGJlZm9yZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2l0aG91dCB0aGlzIGNoZWNrLCB0YXNrLmNoYW5nZWQgZXZlbnQgaXMgbm90IGZpcmVkIGZvciBmYXN0ZXIgbW92ZXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlZSBnaXRodWIgaXNzdWUgIzE5MAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclNjcm9sbEludGVydmFsKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdmUobW9kZSwgZXZ0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA1KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYXJ0RXZlbnQodGFza1Njb3BlLCB3aW5kb3dFbGVtZW50LCAnbW91c2Vtb3ZlJywgdGFza01vdmVIYW5kbGVyKS5iaW5kKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc21hcnRFdmVudCh0YXNrU2NvcGUsIHdpbmRvd0VsZW1lbnQsICdtb3VzZXVwJywgZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Njb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93RWxlbWVudC51bmJpbmQoJ21vdXNlbW92ZScsIHRhc2tNb3ZlSGFuZGxlcik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVNb3ZlTW9kZShldnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuYmluZE9uY2UoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IG1vdXNlIG1vdmUvcmVzaXplIGN1cnNvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza0VsZW1lbnQuY3NzKCdjdXJzb3InLCBnZXRDdXJzb3IobW9kZSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCRkb2N1bWVudFswXS5ib2R5KS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctbW96LXVzZXItc2VsZWN0JzogJy1tb3otbm9uZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdXNlci1zZWxlY3QnOiAnbm9uZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1tcy11c2VyLXNlbGVjdCc6ICdub25lJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndXNlci1zZWxlY3QnOiAnbm9uZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2N1cnNvcic6IGdldEN1cnNvcihtb2RlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzYWJsZU1vdmVNb2RlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrU2NvcGUudGFzay5pc01vdmluZyA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0b3AgYW55IGFjdGl2ZSBhdXRvIHNjcm9sbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJTY3JvbGxJbnRlcnZhbCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBtb3VzZSBjdXJzb3IgYmFjayB0byBkZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrRWxlbWVudC5jc3MoJ2N1cnNvcicsICcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnRbMF0uYm9keSkuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLW1vei11c2VyLXNlbGVjdCc6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXVzZXItc2VsZWN0JzogJycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1tcy11c2VyLXNlbGVjdCc6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyLXNlbGVjdCc6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjdXJzb3InOiAnJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmFpc2UgbW92ZSBlbmQgZXZlbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXNrU2NvcGUudGFzay5tb3ZlTW9kZSA9PT0gJ00nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Njb3BlLnJvdy5yb3dzTWFuYWdlci5nYW50dC5hcGkudGFza3MucmFpc2UubW92ZUVuZCh0YXNrU2NvcGUudGFzayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTY29wZS5yb3cucm93c01hbmFnZXIuZ2FudHQuYXBpLnRhc2tzLnJhaXNlLnJlc2l6ZUVuZCh0YXNrU2NvcGUudGFzayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Njb3BlLnRhc2subW92ZU1vZGUgPSB1bmRlZmluZWQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmFpc2UgdGFzayBjaGFuZ2VkIGV2ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFza0hhc0JlZW5DaGFuZ2VkID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza0hhc0JlZW5DaGFuZ2VkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1Njb3BlLnRhc2sucm93LnNvcnRUYXNrcygpOyAvLyBTb3J0IHRhc2tzIHNvIHRoZXkgaGF2ZSB0aGUgcmlnaHQgei1vcmRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTY29wZS5yb3cucm93c01hbmFnZXIuZ2FudHQuYXBpLnRhc2tzLnJhaXNlLmNoYW5nZSh0YXNrU2NvcGUudGFzayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFza1Njb3BlLnRhc2suaXNDcmVhdGluZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRhc2tTY29wZS50YXNrLmlzQ3JlYXRpbmc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVNb3ZlTW9kZSgnRScsIHRhc2tTY29wZS50YXNrLm1vdXNlT2Zmc2V0WCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFza1Njb3BlLnRhc2suaXNNb3ZpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIGNhc2UgdGhlIHRhc2sgaGFzIGJlZW4gbW92ZWQgdG8gYW5vdGhlciByb3cgYSBuZXcgY29udHJvbGxlciBpcyBpcyBjcmVhdGVkIGJ5IGFuZ3VsYXIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbmFibGUgdGhlIG1vdmUgbW9kZSBhZ2FpbiBpZiB0aGlzIHdhcyB0aGUgY2FzZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZU1vdmVNb2RlKCdNJywgdGFza1Njb3BlLnRhc2subW91c2VPZmZzZXRYKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfV0pOwoKCmdhbnR0LmZhY3RvcnkoJ2dhbnR0TW92YWJsZU9wdGlvbnMnLCBbZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKCiAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dNb3ZpbmcgPSBvcHRpb25zLmFsbG93TW92aW5nICE9PSB1bmRlZmluZWQgPyAhIW9wdGlvbnMuYWxsb3dNb3ZpbmcgOiB0cnVlOwogICAgICAgICAgICBvcHRpb25zLmFsbG93UmVzaXppbmcgPSBvcHRpb25zLmFsbG93UmVzaXppbmcgIT09IHVuZGVmaW5lZCA/ICEhb3B0aW9ucy5hbGxvd1Jlc2l6aW5nIDogdHJ1ZTsKICAgICAgICAgICAgb3B0aW9ucy5hbGxvd1Jvd1N3aXRjaGluZyA9IG9wdGlvbnMuYWxsb3dSb3dTd2l0Y2hpbmcgIT09IHVuZGVmaW5lZCA/ICEhb3B0aW9ucy5hbGxvd1Jvd1N3aXRjaGluZyA6IHRydWU7CgogICAgICAgICAgICByZXR1cm4gb3B0aW9uczsKICAgICAgICB9CiAgICB9Owp9XSk7CgoKZ2FudHQuZGlyZWN0aXZlKCdnYW50dFNvcnRhYmxlJywgWyckZG9jdW1lbnQnLCBmdW5jdGlvbigkZG9jdW1lbnQpIHsKICAgIC8vIFByb3ZpZGVzIHRoZSByb3cgc29ydCBmdW5jdGlvbmFsaXR5IHRvIGFueSBHYW50dCByb3cKICAgIC8vIFVzZXMgdGhlIHNvcnRhYmxlU3RhdGUgdG8gc2hhcmUgdGhlIGN1cnJlbnQgcm93CgogICAgcmV0dXJuIHsKICAgICAgICByZXN0cmljdDogJ0UnLAogICAgICAgIHJlcXVpcmU6ICdeZ2FudHQnLAogICAgICAgIHNjb3BlOiB7CiAgICAgICAgICAgIGVuYWJsZWQ6ICc9PycKICAgICAgICB9LAogICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgZ2FudHRDdHJsKSB7CiAgICAgICAgICAgIHZhciBhcGkgPSBnYW50dEN0cmwuZ2FudHQuYXBpOwoKICAgICAgICAgICAgaWYgKHNjb3BlLmVuYWJsZWQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgc2NvcGUuZW5hYmxlZCA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFwaS5kaXJlY3RpdmVzLm9uLm5ldyhzY29wZSwgZnVuY3Rpb24oZGlyZWN0aXZlTmFtZSwgcm93U2NvcGUsIHJvd0VsZW1lbnQpIHsKICAgICAgICAgICAgICAgIGlmIChkaXJlY3RpdmVOYW1lID09PSAnZ2FudHRSb3dMYWJlbCcpIHsKICAgICAgICAgICAgICAgICAgICByb3dFbGVtZW50LmJpbmQoJ21vdXNlZG93bicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNjb3BlLmVuYWJsZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlRHJhZ01vZGUoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXNhYmxlSGFuZGxlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93U2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnRbMF0uYm9keSkudW5iaW5kKCdtb3VzZXVwJywgZGlzYWJsZUhhbmRsZXIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVEcmFnTW9kZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnRbMF0uYm9keSkuYmluZCgnbW91c2V1cCcsIGRpc2FibGVIYW5kbGVyKTsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgcm93RWxlbWVudC5iaW5kKCdtb3VzZW1vdmUnLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0luRHJhZ01vZGUoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRCZWxvd01vdXNlID0gJGRvY3VtZW50WzBdLmVsZW1lbnRGcm9tUG9pbnQoZS5jbGllbnRYLCBlLmNsaWVudFkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudEJlbG93TW91c2UgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudEJlbG93TW91c2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFJvdyA9IGVsZW1lbnRCZWxvd01vdXNlLnNjb3BlKCkucm93OwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRSb3cuaWQgIT09IHNjb3BlLnN0YXJ0Um93LmlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93U2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93U2NvcGUucm93LnJvd3NNYW5hZ2VyLnN3YXBSb3dzKHRhcmdldFJvdywgc2NvcGUuc3RhcnRSb3cpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIHZhciBpc0luRHJhZ01vZGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLnN0YXJ0Um93ICE9PSB1bmRlZmluZWQgJiYgIWFuZ3VsYXIuZXF1YWxzKHJvd1Njb3BlLnJvdywgc2NvcGUuc3RhcnRSb3cpOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIHZhciBlbmFibGVEcmFnTW9kZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zdGFydFJvdyA9IHJvd1Njb3BlLnJvdzsKICAgICAgICAgICAgICAgICAgICAgICAgcm93RWxlbWVudC5jc3MoJ2N1cnNvcicsICdtb3ZlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkZG9jdW1lbnRbMF0uYm9keSkuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICctbW96LXVzZXItc2VsZWN0JzogJy1tb3otbm9uZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC11c2VyLXNlbGVjdCc6ICdub25lJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICctbXMtdXNlci1zZWxlY3QnOiAnbm9uZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndXNlci1zZWxlY3QnOiAnbm9uZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3Vyc29yJzogJ25vLWRyb3AnCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIHZhciBkaXNhYmxlRHJhZ01vZGUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc3RhcnRSb3cgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0VsZW1lbnQuY3NzKCdjdXJzb3InLCAncG9pbnRlcicpOwogICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50WzBdLmJvZHkpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLW1vei11c2VyLXNlbGVjdCc6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdXNlci1zZWxlY3QnOiAnJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICctbXMtdXNlci1zZWxlY3QnOiAnJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyLXNlbGVjdCc6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2N1cnNvcic6ICdhdXRvJwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgfQogICAgfTsKfV0pOwoKLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5ndWxhci1nYW50dC1wbHVnaW5zLmpzLm1hcA==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 07:45:10 GMT",
                    "Content-Length": "1462383",
                    "Date": "Thu, 06 Nov 2014 07:45:11 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}