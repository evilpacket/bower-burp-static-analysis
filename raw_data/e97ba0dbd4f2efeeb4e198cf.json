{
    "url": "http://localhost:9999/Esri/geotriggers-js/geotrigger.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Client-side JSON injection (DOM-based)",
    "issueType": 2098032,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based JSON injection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and incorporates this into a string that is parsed as a JSON data structure and then processed by the application. An attacker may be able to use this behavior to construct a URL which, if visited by another application user, will cause arbitrary JSON data to be processed. Depending on the purpose for which this data is used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based JSON injection vulnerabilities is not to parse as JSON any string containing data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the JSON structure in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the JSON when it is parsed.",
    "issueDetail": "The application may be vulnerable to DOM-based client-side JSON injection. Data is read from <b>document.cookie</b> and written to <b>JSON.parse()</b> via the following statements:<ul><li>var tmp =  document.cookie.match((new RegExp(key +'=[a-zA-Z0-9.()=|%/_]+($|;)','g')));</li><li>return JSON.parse(tmp[0].substring(key.length+1,tmp[0].length).replace(';','')) || null;</li></ul>Because the data originates from a cookie, the application's behavior is not trivial to exploit in an attack against another user. Typically, you will need to find a means of setting an arbitrary cookie value in the victim's browser in order to exploit the vulnerability. Applications often contain \"cookie-forcing\" conditions which make this possible, and such a condition in any related domain or subdomain can potentially be used for this purpose. Nonetheless, this limitation somewhat mitigates the impact of the vulnerability. ",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/Esri/geotriggers-js/geotrigger.js",
                "path": "/Esri/geotriggers-js/geotrigger.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9Fc3JpL2dlb3RyaWdnZXJzLWpzL2dlb3RyaWdnZXIuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7CgogIC8vIE5vZGUuCiAgaWYodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0JykgewogICAgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCJ4bWxodHRwcmVxdWVzdCIpLlhNTEh0dHBSZXF1ZXN0OwogICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOwogIH0KCiAgLy8gQnJvd3NlciBHbG9iYWwuCiAgaWYodHlwZW9mIHdpbmRvdyA9PT0gIm9iamVjdCIpIHsKICAgIHJvb3QuR2VvdHJpZ2dlciA9IGZhY3RvcnkoKTsKICB9Cgp9KHRoaXMsIGZ1bmN0aW9uKCkgewoKICB2YXIgZ2VvdHJpZ2dlcnNVcmwgICAgPSAiaHR0cHM6Ly9nZW90cmlnZ2VyLmFyY2dpcy5jb20vIjsKICB2YXIgdG9rZW5VcmwgICAgICAgICAgPSAiaHR0cHM6Ly93d3cuYXJjZ2lzLmNvbS9zaGFyaW5nL29hdXRoMi90b2tlbiI7CiAgdmFyIHJlZ2lzdGVyRGV2aWNlVXJsID0gImh0dHBzOi8vd3d3LmFyY2dpcy5jb20vc2hhcmluZy9vYXV0aDIvcmVnaXN0ZXJEZXZpY2UiOwogIHZhciBleHBvcnRzICAgICAgICAgICA9IHt9OwogIHZhciBDT1JTICAgICAgICAgICAgICA9IHRydWU7CgogIGlmICh0eXBlb2Ygd2luZG93ID09PSAib2JqZWN0IikgewogICAgQ09SUyA9ICEhKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCAmJiAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKSk7CiAgfQoKICBpZiAoIUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKSB7CiAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChvVGhpcykgewogICAgICBpZiAodHlwZW9mIHRoaXMgIT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAvLyBjbG9zZXN0IHRoaW5nIHBvc3NpYmxlIHRvIHRoZSBFQ01BU2NyaXB0IDUgaW50ZXJuYWwgSXNDYWxsYWJsZSBmdW5jdGlvbgogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIC0gd2hhdCBpcyB0cnlpbmcgdG8gYmUgYm91bmQgaXMgbm90IGNhbGxhYmxlIik7CiAgICAgIH0KCiAgICAgIHZhciBhQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksCiAgICAgICAgICBmVG9CaW5kID0gdGhpcywKICAgICAgICAgIEZOT1AgPSBmdW5jdGlvbigpIHt9LAogICAgICAgICAgZkJvdW5kID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBmVG9CaW5kLmFwcGx5KHRoaXMgaW5zdGFuY2VvZiBGTk9QICYmIG9UaGlzID8gdGhpcyA6IG9UaGlzLCBhQXJncy5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpOwogICAgICAgICAgfTsKCiAgICAgIEZOT1AucHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7CiAgICAgIGZCb3VuZC5wcm90b3R5cGUgPSBuZXcgRk5PUCgpOwoKICAgICAgcmV0dXJuIGZCb3VuZDsKICAgIH07CiAgfQoKICBmdW5jdGlvbiBTZXNzaW9uKG9wdGlvbnMpewogICAgdGhpcy5fcXVldWUgPSBbXTsKICAgIHRoaXMuX3JlcXVlc3RRdWV1ZSA9IFtdOwogICAgdGhpcy5fZXZlbnRzID0ge307CgogICAgdmFyIGRlZmF1bHRzID0gewogICAgICBwcmVmZXJMb2NhbFN0b3JhZ2U6IHRydWUsCiAgICAgIHBlcnNpc3RTZXNzaW9uOiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpID8gZmFsc2UgOiB0cnVlLAogICAgICBnZW90cmlnZ2Vyc1VybDogZ2VvdHJpZ2dlcnNVcmwsCiAgICAgIHRva2VuVXJsOiB0b2tlblVybCwKICAgICAgcmVnaXN0ZXJEZXZpY2VVcmw6IHJlZ2lzdGVyRGV2aWNlVXJsLAogICAgICBhdXRvbWF0aWNSZWdpc3RhdGlvbjogdHJ1ZSwKICAgICAgcHJveHk6IGZhbHNlCiAgICB9OwoKICAgIC8vIHNldCBhcHBsaWNhdGlvbiBpZAogICAgaWYoIW9wdGlvbnMgfHwgIW9wdGlvbnMuY2xpZW50SWQpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJHZW90cmlnZ2VyLlNlc3Npb24gcmVxdWlyZXMgYW4gYGNsaWVudElkYCBvciBhIGBzZXNzaW9uYCBwYXJhbWV0ZXIuIik7CiAgICB9CgogICAgaWYoIW9wdGlvbnMucHJveHkgJiYgIUNPUlMpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBDT1JTIGFuZCBhIHByb3h5IGhhcyBub3QgYmVlbiBzZXQuIik7CiAgICB9CgogICAgLy8gbWVyZ2UgZGVmYXVsdHMgYW5kIG9wdGlvbnMgaW50byBgdGhpc2AKICAgIHV0aWwubWVyZ2UodGhpcywgdXRpbC5tZXJnZShkZWZhdWx0cywgb3B0aW9ucykpOwoKICAgIHRoaXMuYXV0aGVudGljYXRlZEFzID0gKHRoaXMuY2xpZW50SWQgJiYgdGhpcy5jbGllbnRTZWNyZXQpID8gImFwcGxpY2F0aW9uIiA6ICJkZXZpY2UiOwoKICAgIHRoaXMua2V5ID0gImdlb3RyaWdnZXJzXyIgKyB0aGlzLmF1dGhlbnRpY2F0ZWRBcyArICJfIiArIHRoaXMuY2xpZW50SWQ7CgogICAgLy9yZXN0b3JlIGEgc3RvcmVkIHNlc3Npb24gaWYgd2UgaGF2ZSBvbmUKICAgIGlmKHRoaXMucGVyc2lzdFNlc3Npb24pIHsKICAgICAgaWYodGhpcy5wcmVmZXJMb2NhbFN0b3JhZ2UgJiYgaGFzTG9jYWxTdG9yYWdlKXsKICAgICAgICB1dGlsLm1lcmdlKHRoaXMsIGxvY2FsU3RvcmFnZS5nZXQodGhpcy5rZXkpKTsKICAgICAgfSBlbHNlIGlmIChoYXNDb29raWVzKSB7CiAgICAgICAgdXRpbC5tZXJnZSh0aGlzLCBjb29raWUuZ2V0KHRoaXMua2V5KSk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBpZiB0aGVyZSBpcyBhbiBhY2Nlc3MgdG9rZW4gYW5kIGl0IGlzIGFmdGVyIHdoZW4gdGhlIHRva2VuIGV4cGlyZXMgb3IgdGhlcmUgaXMgbm8gYWNjZXNzIHRva2VuCiAgICBpZigodGhpcy50b2tlbiAmJiAoRGF0ZS5ub3coKSA+IG5ldyBEYXRlKHRoaXMuZXhwaXJlc09uKS5nZXRUaW1lKCkpKSB8fCAhdGhpcy50b2tlbil7CiAgICAgIC8vIHJlbW92ZSB0b2tlbiB0byBwcmV2ZW50IHF1ZXVlZCBmdW5jdGlvbnMgZnJvbSBmaXJpbmcKICAgICAgZGVsZXRlIHRoaXMudG9rZW47CiAgICAgIHRoaXMucmVmcmVzaCgpOwogICAgfQoKICAgIC8vIGlmIHRva2VuIGV4aXN0cywgaXMgbm90IGV4cGlyZWQsIGFuZCBzZXNzaW9uIGhhcyBiZWVuIHJlc3RvcmVkCiAgICBlbHNlIGlmICh0aGlzLnBlcnNpc3RTZXNzaW9uKSB7CiAgICAgIHRoaXMuZW1pdCgiYXV0aGVudGljYXRpb246cmVzdG9yZWQiKTsKICAgIH0KICB9CgogIFNlc3Npb24ucHJvdG90eXBlLmF1dGhlbnRpY2F0ZWQgPSBmdW5jdGlvbigpewogICAgcmV0dXJuICEhdGhpcy50b2tlbjsKICB9OwoKICBTZXNzaW9uLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKXsKICAgIGlmKHRoaXMucmVmcmVzaGluZyl7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMucmVmcmVzaGluZyA9IHRydWU7CiAgICB2YXIgdXJsID0gdGhpcy50b2tlblVybDsKICAgIHZhciBwYXJhbXMgPSB7CiAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRJZCwKICAgICAgZjogImpzb24iCiAgICB9OwoKICAgIGlmKHRoaXMuY2xpZW50U2VjcmV0KXsKICAgICAgcGFyYW1zLmNsaWVudF9zZWNyZXQgPSB0aGlzLmNsaWVudFNlY3JldDsKICAgICAgcGFyYW1zLmdyYW50X3R5cGUgPSAgImNsaWVudF9jcmVkZW50aWFscyI7CiAgICB9IGVsc2UgaWYgKHRoaXMucmVmcmVzaFRva2VuKXsKICAgICAgcGFyYW1zLnJlZnJlc2hfdG9rZW4gPSB0aGlzLnJlZnJlc2hUb2tlbjsKICAgICAgcGFyYW1zLmdyYW50X3R5cGUgPSAicmVmcmVzaF90b2tlbiI7CiAgICB9IGVsc2UgaWYgKHRoaXMuYXV0b21hdGljUmVnaXN0YXRpb24pIHsKICAgICAgdXJsID0gdGhpcy5yZWdpc3RlckRldmljZVVybDsKICAgIH0KCiAgICB0aGlzLnJlcXVlc3QodXJsLCBwYXJhbXMsIGZ1bmN0aW9uKGVycm9yLCByZXNwb25zZSwgeGhyKXsKICAgICAgdGhpcy5yZWZyZXNoaW5nID0gZmFsc2U7CgogICAgICBpZiAoZXJyb3IpIHsKICAgICAgICB0aGlzLmVtaXQoImF1dGhlbnRpY2F0aW9uOmVycm9yIiwgZXJyb3IsIHJlc3BvbnNlLCB4aHIpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5leHBpcmVzT24gPSBuZXcgRGF0ZShuZXcgRGF0ZSgpLmdldFRpbWUoKSArICgocmVzcG9uc2UuZXhwaXJlc19pbi0oNjAqNSkpICoxMDAwKSk7CgogICAgICBpZihyZXNwb25zZS5kZXZpY2VUb2tlbil7CiAgICAgICAgdGhpcy5yZWZyZXNoVG9rZW4gPSByZXNwb25zZS5kZXZpY2VUb2tlbi5yZWZyZXNoX3Rva2VuOwogICAgICAgIHRoaXMudG9rZW4gPSByZXNwb25zZS5kZXZpY2VUb2tlbi5hY2Nlc3NfdG9rZW47CiAgICAgICAgdGhpcy5kZXZpY2VJZCA9IHJlc3BvbnNlLmRldmljZS5kZXZpY2VJZDsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnRva2VuID0gcmVzcG9uc2UuYWNjZXNzX3Rva2VuOwogICAgICB9CgogICAgICBpZih0aGlzLnBlcnNpc3RTZXNzaW9uKXsKICAgICAgICB0aGlzLnBlcnNpc3QoKTsKICAgICAgfQoKICAgICAgd2hpbGUgKHRoaXMuX3F1ZXVlLmxlbmd0aCkgewogICAgICAgIHRoaXMuX3F1ZXVlLnNoaWZ0KCkuYXBwbHkodGhpcyk7CiAgICAgIH0KCiAgICAgIHRoaXMuZW1pdCgiYXV0aGVudGljYXRpb246c3VjY2VzcyIpOwoKICAgICAgd2hpbGUgKHRoaXMuX3JlcXVlc3RRdWV1ZS5sZW5ndGgpIHsKICAgICAgICB0aGlzLnJlcXVlc3QuYXBwbHkodGhpcywgdGhpcy5fcmVxdWVzdFF1ZXVlLnNoaWZ0KCkpOwogICAgICB9CiAgICB9LmJpbmQodGhpcykpOwogIH07CgogIFNlc3Npb24ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgb2JqID0ge307CiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcykgewogICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHRoaXNba2V5XSAmJiAha2V5Lm1hdGNoKC9eXy4rLykpIHsKICAgICAgICBvYmpba2V5XSA9IHRoaXNba2V5XTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG9iajsKICB9OwoKICBTZXNzaW9uLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKXsKICAgIHZhciB0eXBlcyA9IHR5cGUuc3BsaXQoJyAnKTsKCiAgICBmb3IgKHZhciBpPTA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAodHlwZW9mIHRoaXMuX2V2ZW50c1t0eXBlc1tpXV0gPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVzW2ldXSA9IFtdOwogICAgICB9CiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlc1tpXV0ucHVzaChsaXN0ZW5lcik7CiAgICB9CiAgfTsKCiAgU2Vzc2lvbi5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpewogICAgdmFyIGFyZ3MgPSBbXS5zcGxpY2UuY2FsbChhcmd1bWVudHMsMSk7CiAgICBpZiAodGhpcy5fZXZlbnRzW3R5cGVdIGluc3RhbmNlb2YgQXJyYXkpewogICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdOwogICAgICBmb3IgKHZhciBpPTAsIGxlbj1saXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspewogICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgfQogICAgfQogIH07CgogIFNlc3Npb24ucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKXsKICAgIGlmICh0aGlzLl9ldmVudHNbdHlwZV0gaW5zdGFuY2VvZiBBcnJheSl7CiAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07CiAgICAgIGZvciAodmFyIGk9MCwgbGVuPWxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7CiAgICAgICAgaWYgKGxpc3RlbmVyc1tpXSA9PT0gbGlzdGVuZXIpewogICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH07CgogIFNlc3Npb24ucHJvdG90eXBlLnF1ZXVlID0gZnVuY3Rpb24oZm4pIHsKICAgIGlmICghdGhpcy50b2tlbikgewogICAgICB0aGlzLl9xdWV1ZS5wdXNoKGZuKTsKICAgICAgdGhpcy5yZWZyZXNoKCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBmbi5hcHBseSh0aGlzKTsKICB9OwoKICBTZXNzaW9uLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24obWV0aG9kLCBwYXJhbXMsIGNhbGxiYWNrKXsKICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFyZ3VtZW50cyk7CiAgICB2YXIganNvbjsKICAgIHZhciBlcnJvcjsKICAgIHZhciByZXNwb25zZTsKICAgIHZhciBodHRwUmVxdWVzdDsKCiAgICAvLyBhc3N1bWUgdGhpcyBpcyBhIHJlcXVlc3QgdG8gZ2V0cmlnZ2VycyBpcyBpdCBkb2Vzbid0IHN0YXJ0IHdpdGggKGh0dHB8aHR0cHMpOi8vCiAgICB2YXIgZ2VvdHJpZ2dlcnNSZXF1ZXN0ID0gIW1ldGhvZC5tYXRjaCgvXmh0dHBzPzpcL1wvLyk7CgogICAgLy8gY3JlYXRlIHRoZSB1cmwgZm9yIHRoZSByZXF1ZXN0CiAgICB2YXIgdXJsID0gKGdlb3RyaWdnZXJzUmVxdWVzdCkgPyB0aGlzLmdlb3RyaWdnZXJzVXJsICsgbWV0aG9kIDogbWV0aG9kOwoKICAgIGlmICh0aGlzLnByb3h5KSB7CiAgICAgIHVybCA9IHRoaXMucHJveHkgKyB1cmw7CiAgICB9CgogICAgaWYodHlwZW9mIHBhcmFtcyA9PT0gImZ1bmN0aW9uIil7CiAgICAgIGNhbGxiYWNrID0gcGFyYW1zOwogICAgICBwYXJhbXMgPSB7fTsKICAgIH0KCiAgICBpZihnZW90cmlnZ2Vyc1JlcXVlc3QgJiYgIXRoaXMudG9rZW4pewogICAgICB0aGlzLl9yZXF1ZXN0UXVldWUucHVzaChhcmdzKTsKICAgICAgdGhpcy5yZWZyZXNoKCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBjYWxsYmFjayBmb3IgaGFuZGxpbmcgYSBzdWNjZXNzZnVsIHJlcXVlc3QKICAgIHZhciBoYW5kbGVTdWNjZXNzZnVsUmVzcG9uc2UgPSBmdW5jdGlvbigpewoKICAgICAgdHJ5IHsKICAgICAgICBqc29uID0gSlNPTi5wYXJzZShodHRwUmVxdWVzdC5yZXNwb25zZVRleHQpOwogICAgICAgIHJlc3BvbnNlID0gKGpzb24uZXJyb3IpID8gbnVsbCA6IGpzb247CiAgICAgICAgZXJyb3IgPSAoanNvbi5lcnJvcikgPyBqc29uLmVycm9yIDogbnVsbDsKICAgICAgfSBjYXRjaCAoZSl7CiAgICAgICAgcmVzcG9uc2UgPSBudWxsOwogICAgICAgIGVycm9yID0gewogICAgICAgICAgdHlwZTogInBhcnNlX2Vycm9yIiwKICAgICAgICAgIG1lc3NhZ2U6ICJjb3VuZCBub3QgcGFyc2UgcmVzcG9uc2UgYXMgSlNPTiIKICAgICAgICB9OwogICAgICB9CgogICAgICAvLyBkaWQgb3VyIHRva2VuIGV4cGlyZT8KICAgICAgLy8gaWYgaXQgZGlkbid0IHJlc29sdmUgb3IgcmVqZWN0IHRoZSBjYWxsYmFjawogICAgICAvLyBpZiBpdCBkaWQgcmVmcmVzaCB0aGUgYXV0aCBhbmQgcnVuIHRoZSByZXF1ZXN0IGFnYWluCiAgICAgIGlmKGVycm9yICYmIGVycm9yLnR5cGUgPT09ICJpbnZhbGlkSGVhZGVyIiAmJiBlcnJvci5oZWFkZXJzLkF1dGhvcml6YXRpb24pewogICAgICAgIHRoaXMuX3JlcXVlc3RRdWV1ZS5wdXNoKGFyZ3MpOwogICAgICAgIHRoaXMucmVmcmVzaCgpOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICghZXJyb3IpewogICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UsIGh0dHBSZXF1ZXN0KTsKICAgICAgICB9IGVsc2UgaWYgKGVycm9yKXsKICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsLCBodHRwUmVxdWVzdCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSB7CiAgICAgICAgICAgIHR5cGU6ICJ1bmV4cGVjdGVkX3Jlc3BvbnNlIiwKICAgICAgICAgICAgbWVzc2FnZTogInRoZSBhcGkgcmV0dXJuZWQgYSBub24gSlNPTiBvciB1bmV4cGVjdGVkIGRhdGEiCiAgICAgICAgICB9OwogICAgICAgICAgY2FsbGJhY2soZXJyb3JNZXNzYWdlLCBudWxsLCBodHRwUmVxdWVzdCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LmJpbmQodGhpcyk7CgogICAgLy8gY2FsbGJhY2sgZm9yIGhhbmRsaW5nIGFuIGh0dHAgZXJyb3IKICAgIHZhciBoYW5kbGVFcnJvclJlc3BvbnNlID0gZnVuY3Rpb24oKXsKICAgICAgdmFyIGVycm9yID0gewogICAgICAgIHR5cGU6ICJodHRwX2Vycm9yIgogICAgICB9OwoKICAgICAgdHJ5IHsKICAgICAgICBlcnJvci5tZXNzYWdlID0gSlNPTi5wYXJzZShodHRwUmVxdWVzdC5yZXNwb25zZVRleHQpOwogICAgICB9IGNhdGNoIChlKXsKICAgICAgICBlcnJvci5tZXNzYWdlID0gImh0dHAgZXJyb3IgYW5kIGNvdW5kIG5vdCBwYXJzZSByZXNwb25zZSBhcyBKU09OIjsKICAgICAgfQoKICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwsIGh0dHBSZXF1ZXN0KTsKICAgIH0uYmluZCh0aGlzKTsKCiAgICAvLyBjYWxsYmFjayBmb3IgaGFuZGxpbmcgc3RhdGUgY2hhbmdlCiAgICB2YXIgaGFuZGxlU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbigpewogICAgICBpZihodHRwUmVxdWVzdC5yZWFkeVN0YXRlID09PSA0ICYmIGh0dHBSZXF1ZXN0LnN0YXR1cyA8IDQwMCl7CiAgICAgICAgaGFuZGxlU3VjY2Vzc2Z1bFJlc3BvbnNlKCk7CiAgICAgIH0gZWxzZSBpZihodHRwUmVxdWVzdC5yZWFkeVN0YXRlID09PSA0ICYmIGh0dHBSZXF1ZXN0LnN0YXR1cyA+PSA0MDApIHsKICAgICAgICBoYW5kbGVFcnJvclJlc3BvbnNlKCk7CiAgICAgIH0KICAgIH0uYmluZCh0aGlzKTsKCiAgICBodHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgaHR0cFJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlU3RhdGVDaGFuZ2U7CgogICAgdmFyIGJvZHk7CgogICAgLy8gc2V0IHRoZSBhY2Nlc3MgdG9rZW4gaW4gdGhlIGJvZHkKICAgIGlmKGdlb3RyaWdnZXJzUmVxdWVzdCl7CiAgICAgIHBhcmFtcy50b2tlbiA9IHRoaXMudG9rZW47CiAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMpOwogICAgfSBlbHNlIHsKICAgICAgYm9keSA9IHV0aWwuc2VyaWFsaXplKHBhcmFtcyk7CiAgICB9CgogICAgaHR0cFJlcXVlc3Qub3BlbigiUE9TVCIsIHVybCk7CiAgICBodHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAoZ2VvdHJpZ2dlcnNSZXF1ZXN0KSA/ICdhcHBsaWNhdGlvbi9qc29uJyA6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTsKCiAgICBpZihnZW90cmlnZ2Vyc1JlcXVlc3QpewogICAgICBodHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdYLUdULUNsaWVudC1OYW1lJywgJ2dlb3RyaWdnZXItanMnKTsKICAgICAgaHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignWC1HVC1DbGllbnQtVmVyc2lvbicsICcxLjAuMCcpOwogICAgfQoKICAgIGh0dHBSZXF1ZXN0LnNlbmQoYm9keSk7CgogIH07CgogIFNlc3Npb24ucHJvdG90eXBlLnBlcnNpc3QgPSBmdW5jdGlvbigpIHsKICAgIHZhciB2YWx1ZSA9IHt9OwogICAgaWYodGhpcy5jbGllbnRJZCl7IHZhbHVlLmNsaWVudElkID0gdGhpcy5jbGllbnRJZDsgfQogICAgaWYodGhpcy5jbGllbnRTZWNyZXQpeyB2YWx1ZS5jbGllbnRTZWNyZXQgPSB0aGlzLmNsaWVudFNlY3JldDsgfQogICAgaWYodGhpcy50b2tlbil7IHZhbHVlLnRva2VuID0gdGhpcy50b2tlbjsgfQogICAgaWYodGhpcy5yZWZyZXNoVG9rZW4peyB2YWx1ZS5yZWZyZXNoVG9rZW4gPSB0aGlzLnJlZnJlc2hUb2tlbjsgfQogICAgaWYodGhpcy5kZXZpY2VJZCl7IHZhbHVlLmRldmljZUlkID0gdGhpcy5kZXZpY2VJZDsgfQogICAgaWYodGhpcy5wcmVmZXJMb2NhbFN0b3JhZ2UgJiYgaGFzTG9jYWxTdG9yYWdlKXsKICAgICAgbG9jYWxTdG9yYWdlLnNldCh0aGlzLmtleSwgdmFsdWUpOwogICAgfSBlbHNlIGlmIChoYXNDb29raWVzKSB7CiAgICAgIGNvb2tpZS5zZXQodGhpcy5rZXksIHZhbHVlKTsKICAgIH0KICB9OwoKICBTZXNzaW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7CiAgICBpZih0aGlzLnByZWZlckxvY2FsU3RvcmFnZSAmJiBoYXNMb2NhbFN0b3JhZ2UpIHsKICAgICAgbG9jYWxTdG9yYWdlLmVyYXNlKHRoaXMua2V5KTsKICAgIH0gZWxzZSBpZiAoaGFzQ29va2llcykgewogICAgICBjb29raWUuZXJhc2UodGhpcy5rZXkpOwogICAgfQogIH07CgogIGV4cG9ydHMuU2Vzc2lvbiA9IFNlc3Npb247CgogIC8qCiAgR2VuZXJhbCBQdXJwb3NlIFV0aWxpdGllcwogIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgKi8KCiAgdmFyIHV0aWwgPSB7CiAgICAvLyBNZXJnZSBPYmplY3QgMSBhbmQgT2JqZWN0IDIuCiAgICAvLyBQcm9wZXJ0aWVzIGZyb20gT2JqZWN0IDIgd2lsbCBvdmVycmlkZSBwcm9wZXJ0aWVzIGluIE9iamVjdCAxLgogICAgLy8gUmV0dXJucyBPYmplY3QgMQogICAgbWVyZ2U6IGZ1bmN0aW9uKHRhcmdldCwgb2JqKXsKICAgICAgZm9yICh2YXIgYXR0ciBpbiBvYmopIHsKICAgICAgICBpZihvYmouaGFzT3duUHJvcGVydHkoYXR0cikpewogICAgICAgICAgdGFyZ2V0W2F0dHJdID0gb2JqW2F0dHJdOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdGFyZ2V0OwogICAgfSwKCiAgICBpc09iamVjdDogZnVuY3Rpb24odGhpbmcpewogICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaW5nKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7CiAgICB9LAoKICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24ob2JqLCBwcmVmaXgpIHsKCiAgICAgIHZhciBlbmMgPSBlbmNvZGVVUklDb21wb25lbnQ7CgogICAgICAvLyBtYWtlIGFuIGFycmF5IHRvIGhvbGQgZWFjaCBwZWljZQogICAgICB2YXIgc3RyID0gW107CgogICAgICAvLyBmb3IgZXZlcnkga2V5IGluIG91ciBvYmplY3QKICAgICAgZm9yKHZhciBwIGluIG9iaikgewogICAgICAgIGlmKG9iai5oYXNPd25Qcm9wZXJ0eShwKSl7CiAgICAgICAgICB2YXIgZTsKICAgICAgICAgIHZhciBrID0gKHByZWZpeCkgPyBwcmVmaXggKyAiWyIgKyBwICsgIl0iIDogcCwgdiA9IG9ialtwXTsKICAgICAgICAgIGUgPSAodXRpbC5pc09iamVjdCh2KSkgPyB1dGlsLnNlcmlhbGl6ZSh2LCBrKSA6IGVuYyhrKSArICI9IiArIGVuYyh2KTsKICAgICAgICAgIHN0ci5wdXNoKGUpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gam9pbiB3aXRoIGFtcGVyc2FuZHMKICAgICAgcmV0dXJuIHN0ci5qb2luKCImIik7CiAgICB9CiAgfTsKCiAgLyoKICBVdGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBzZXNzaW9ucwogIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgKi8KCiAgdmFyIGhhc0xvY2FsU3RvcmFnZSA9ICh0eXBlb2Ygd2luZG93ID09PSAib2JqZWN0IiAmJiB0eXBlb2Ygd2luZG93LmxvY2FsU3RvcmFnZSA9PT0gIm9iamVjdCIpID8gdHJ1ZSA6IGZhbHNlOwogIHZhciBoYXNDb29raWVzID0gKHR5cGVvZiBkb2N1bWVudCA9PT0gIm9iamVjdCIgJiYgdHlwZW9mIGRvY3VtZW50LmNvb2tpZSA9PT0gInN0cmluZyIpID8gdHJ1ZSA6IGZhbHNlOwoKICB2YXIgbG9jYWxTdG9yYWdlID0gewogICAgc2V0OmZ1bmN0aW9uKGtleSwgdmFsdWUpewogICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpOwogICAgfSwKICAgIGdldDogZnVuY3Rpb24oa2V5KXsKICAgICAgcmV0dXJuIEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpOwogICAgfSwKICAgIGVyYXNlOiBmdW5jdGlvbihrZXkpewogICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTsKICAgIH0KICB9OwoKICB2YXIgY29va2llID0gewogICAgZ2V0OiBmdW5jdGlvbihrZXkpIHsKICAgICAgLy8gU3RpbGwgbm90IHN1cmUgdGhhdCAiW2EtekEtWjAtOS4oKT18JS9fXSsoJHw7KSIgbWF0Y2ggKmFsbCogYWxsb3dlZCBjaGFyYWN0ZXJzIGluIGNvb2tpZXMKICAgICAgdmFyIHRtcCA9ICBkb2N1bWVudC5jb29raWUubWF0Y2goKG5ldyBSZWdFeHAoa2V5ICsnPVthLXpBLVowLTkuKCk9fCUvX10rKCR8OyknLCdnJykpKTsKICAgICAgaWYoIXRtcCB8fCAhdG1wWzBdKXsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0bXBbMF0uc3Vic3RyaW5nKGtleS5sZW5ndGgrMSx0bXBbMF0ubGVuZ3RoKS5yZXBsYWNlKCc7JywnJykpIHx8IG51bGw7CiAgICAgIH0KICAgIH0sCgogICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlLCBzZWN1cmUpIHsKICAgICAgdmFyIGNvb2tpZSA9IFsKICAgICAgICBrZXkrJz0nK0pTT04uc3RyaW5naWZ5KHZhbHVlKSwKICAgICAgICAncGF0aD0vJywKICAgICAgICAnZG9tYWluPScrd2luZG93LmxvY2F0aW9uLmhvc3QKICAgICAgXTsKCiAgICAgIHZhciBleHBpcmF0aW9uX2RhdGUgPSBuZXcgRGF0ZSgpOwogICAgICBleHBpcmF0aW9uX2RhdGUuc2V0RnVsbFllYXIoZXhwaXJhdGlvbl9kYXRlLmdldEZ1bGxZZWFyKCkgKyAxKTsKICAgICAgY29va2llLnB1c2goZXhwaXJhdGlvbl9kYXRlLnRvR01UU3RyaW5nKCkpOwoKICAgICAgaWYgKHNlY3VyZSl7CiAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpOwogICAgICB9CiAgICAgIHJldHVybiBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTsKICAgIH0sCgogICAgZXJhc2U6IGZ1bmN0aW9uKGtleSkgewogICAgICBkb2N1bWVudC5jb29raWUgPSBrZXkgKyAiOyAiICsgbmV3IERhdGUoMCkudG9VVENTdHJpbmcoKTsKICAgIH0KICB9OwoKICByZXR1cm4gZXhwb3J0czsKfSkpOwo=",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 02:16:39 GMT",
                    "Content-Length": "12644",
                    "Date": "Fri, 07 Nov 2014 02:16:39 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}