{
    "url": "http://localhost:9999/avoidwork/abaaso/lib/abaaso.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>location.href</b> and written to <b>the 'href' property of a DOM element</b> via the following statements:<ul><li>uri = !server ? location.href : \"\";</li><li>obj.href = uri;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/avoidwork/abaaso/lib/abaaso.js",
                "path": "/avoidwork/abaaso/lib/abaaso.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hdm9pZHdvcmsvYWJhYXNvL2xpYi9hYmFhc28uanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMjc1NzM1DQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQpEYXRlOiBUaHUsIDA2IE5vdiAyMDE0IDA2OjA0OjM5IEdNVA0KTGFzdC1Nb2RpZmllZDogVGh1LCAwNiBOb3YgMjAxNCAwNjowNDozOSBHTVQNCg0KLyoqCiAqIGFiYWFzbwogKgogKiBAYXV0aG9yIEphc29uIE11bGxpZ2FuIDxqYXNvbi5tdWxsaWdhbkBhdm9pZHdvcmsuY29tPgogKiBAY29weXJpZ2h0IDIwMTQgSmFzb24gTXVsbGlnYW4KICogQGxpY2Vuc2UgQlNELTMgPGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vYXZvaWR3b3JrL2FiYWFzby9tYXN0ZXIvTElDRU5TRT4KICogQGxpbmsgaHR0cDovL2FiYWFzby5jb20KICogQG1vZHVsZSBhYmFhc28KICogQHZlcnNpb24gMy4xMS4xMgogKi8KKCBmdW5jdGlvbiAoIGdsb2JhbCApIHsKCnZhciBkb2N1bWVudCAgPSBnbG9iYWwuZG9jdW1lbnQsCiAgICBsb2NhdGlvbiAgPSBnbG9iYWwubG9jYXRpb24sCiAgICBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yLAogICAgc2VydmVyICAgID0gdHlwZW9mIGV4cG9ydHMgIT09ICJ1bmRlZmluZWQiLAogICAgVkVSU0lPTlMgID0gMTAwLAogICAgJCwgYWJhYXNvLCBodHRwLCBodHRwcywgdXJsOwoKaWYgKCBnbG9iYWwuYWJhYXNvICE9PSB1bmRlZmluZWQgKSB7CglyZXR1cm47Cn0KCmlmICggc2VydmVyICkgewoJdXJsICAgICA9IHJlcXVpcmUoICJ1cmwiICk7CglodHRwICAgID0gcmVxdWlyZSggImh0dHAiICk7CglodHRwcyAgID0gcmVxdWlyZSggImh0dHBzIiApOwoJbW9uZ29kYiA9IHJlcXVpcmUoICJtb25nb2RiIiApLk1vbmdvQ2xpZW50OwoJZm9ybWF0ICA9IHJlcXVpcmUoICJ1dGlsIiApLmZvcm1hdDsKCglpZiAoIHR5cGVvZiBTdG9yYWdlID09PSAidW5kZWZpbmVkIiApIHsKCQlsb2NhbFN0b3JhZ2UgPSByZXF1aXJlKCAibG9jYWxTdG9yYWdlIiApOwoJfQoKCWlmICggdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSAidW5kZWZpbmVkIiApIHsKCQlYTUxIdHRwUmVxdWVzdCA9IG51bGw7Cgl9Cn0KCi8qKgogKiBhYmFhc28KICoKICogQG5hbWVzcGFjZQogKi8KYWJhYXNvID0gKCBmdW5jdGlvbiAoKSB7CiJ1c2Ugc3RyaWN0IjsKCnZhciBib290c3RyYXAsIGV4dGVybmFsLCBoYXMsIHNsaWNlOwoKLyoqCiAqIFJlZ2V4IHBhdHRlcm5zIHVzZWQgdGhyb3VnaCBhYmFhc28KICoKICogYHVybGAgd2FzIGF1dGhvcmVkIGJ5IERpZWdvIFBlcmluaQogKgogKiBAdHlwZSB7T2JqZWN0fQogKi8KdmFyIHJlZ2V4ID0gewoJYWZ0ZXJfc3BhY2UgICAgICAgICAgICAgOiAvXHMrLiovLAoJYW5kcm9pZCAgICAgICAgICAgICAgICAgOiAvYW5kcm9pZC9pLAoJYWxsb3cgICAgICAgICAgICAgICAgICAgOiAvXmFsbG93JC9pLAoJYWxsb3dfY29ycyAgICAgICAgICAgICAgOiAvXmFjY2Vzcy1jb250cm9sLWFsbG93LW1ldGhvZHMkL2ksCglhbHBoYW51bSAgICAgICAgICAgICAgICA6IC9eW2EtekEtWjAtOV0rJC8sCglhbmQgICAgICAgICAgICAgICAgICAgICA6IC9eJi8sCglhc2MgICAgICAgICAgICAgICAgICAgICA6IC9ccythc2MkL2lnLAoJYXV0aCAgICAgICAgICAgICAgICAgICAgOiAvXC9cLyguKilcQC8sCglibGFja2JlcnJ5ICAgICAgICAgICAgICA6IC9ibGFja2JlcnJ5L2ksCgkiYm9vbGVhbiIgICAgICAgICAgICAgICA6IC9eKHRydWV8ZmFsc2UpPyQvLAoJYm9vbGVhbl9udW1iZXJfc3RyaW5nICAgOiAvYm9vbGVhbnxudW1iZXJ8c3RyaW5nLywKCWNkYXRhICAgICAgICAgICAgICAgICAgIDogL1wmfDx8PnxcInxcJ3xcdHxccnxcbnxcQHxcJC8sCgljaGVja2VkX2Rpc2FibGVkICAgICAgICA6IC9jaGVja2VkfGRpc2FibGVkL2ksCgljaHJvbWUgICAgICAgICAgICAgICAgICA6IC9jaHJvbWUvaSwKCWNvbXBsZXRlX2xvYWRlZCAgICAgICAgIDogL14oY29tcGxldGV8bG9hZGVkKSQvaSwKCWNzdl9xdW90ZSAgICAgICAgICAgICAgIDogL15cc3xcInxcbnwsfFxzJC8sCglkZWwgICAgICAgICAgICAgICAgICAgICA6IC9eZGVsLywKCWRlY2ltYWwgICAgICAgICAgICAgICAgIDogL15cZCsuKFxkKykvLAoJZGVzYyAgICAgICAgICAgICAgICAgICAgOiAvXHMrZGVzYyQvaSwKCWRvbWFpbiAgICAgICAgICAgICAgICAgIDogL15bXHcuLV9dK1wuW0EtWmEtel17Mix9JC8sCglkb3VibGVfc2xhc2ggICAgICAgICAgICA6IC9cL1wvLywKCWRvd24gICAgICAgICAgICAgICAgICAgIDogL2Rvd24vLAoJZG93bl91cCAgICAgICAgICAgICAgICAgOiAvZG93bnx1cC8sCgllbWFpbCAgICAgICAgICAgICAgICAgICA6IC9eW2EtekEtWjAtOS4hIyQlJicqK1wvPT9cXl9ge3x9flwtXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05XC1dezAsMjUzfVthLXpBLVowLTldKT8oPzpcLlthLXpBLVowLTldKD86W2EtekEtWjAtOVwtXXswLDI1M31bYS16QS1aMC05XSk/KSokLywKCWVuZHNsYXNoICAgICAgICAgICAgICAgIDogL1wvJC8sCgllbGVtZW50X3VwZGF0ZSAgICAgICAgICA6IC9pbm5lckhUTUx8aW5uZXJUZXh0fHRleHRDb250ZW50fHR5cGV8c3JjLywKCWZpcmVmb3ggICAgICAgICAgICAgICAgIDogL2ZpcmVmb3gvaSwKCWdldF9oZWFkZXJzICAgICAgICAgICAgIDogL14oaGVhZHxnZXR8b3B0aW9ucykkLywKCWdldF9yZW1vdmVfc2V0ICAgICAgICAgIDogL2dldHxyZW1vdmV8c2V0LywKCWhhc2ggICAgICAgICAgICAgICAgICAgIDogL15cIy8sCgloYXNoX2JhbmcgICAgICAgICAgICAgICA6IC9eXCNcIT8vLAoJaGVhZGVyX3JlcGxhY2UgICAgICAgICAgOiAvOi4qLywKCWhlYWRlcl92YWx1ZV9yZXBsYWNlICAgIDogLy4qOlxzKy8sCglodG1sICAgICAgICAgICAgICAgICAgICA6IC9ePC4qPiQvLAoJaHR0cF9ib2R5ICAgICAgICAgICAgICAgOiAvMjAwfDIwMXwyMDJ8MjAzfDIwNi8sCglodHRwX3BvcnRzICAgICAgICAgICAgICA6IC84MHw0NDMvLAoJaWUgICAgICAgICAgICAgICAgICAgICAgOiAvbXNpZXxpZS9pLAoJaW5wdXRfYnV0dG9uICAgICAgICAgICAgOiAvYnV0dG9ufHN1Ym1pdHxyZXNldC8sCglpbnRlZ2VyICAgICAgICAgICAgICAgICA6IC8oXi0/XGRcZCokKS8sCglpcCAgICAgICAgICAgICAgICAgICAgICA6IC9eKD86KD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykkLywKCWlzX3htbCAgICAgICAgICAgICAgICAgIDogL148XD94bWwuKlw/Pi8sCglpb3MgICAgICAgICAgICAgICAgICAgICA6IC9pcGFkfGlwaG9uZS9pLAoJanNvbl9tYXliZSAgICAgICAgICAgICAgOiAvanNvbnxwbGFpbnxqYXZhc2NyaXB0LywKCWpzb25fd3JhcCAgICAgICAgICAgICAgIDogL15bXFtce10vLAoJanNvbnBfd3JhcCAgICAgICAgICAgICAgOiAvKFthLXpBLVowLTlcLl0rXCgpKC4qKShcKSkkLywKCWtsYXNzICAgICAgICAgICAgICAgICAgIDogL15cLi8sCglsaW51eCAgICAgICAgICAgICAgICAgICA6IC9saW51eHxic2R8dW5peC9pLAoJbm8gICAgICAgICAgICAgICAgICAgICAgOiAvbm8tc3RvcmV8bm8tY2FjaGUvaSwKCW5vdF9lbmRwb2ludCAgICAgICAgICAgIDogLy4qXC8vLAoJbm90RW1wdHkgICAgICAgICAgICAgICAgOiAvXHd7MSx9LywKCW51bWJlciAgICAgICAgICAgICAgICAgIDogLyheLT9cZFxkKlwuXGQqJCl8KF4tP1xkXGQqJCl8KF4tP1wuXGRcZCokKXxudW1iZXIvLAoJbnVtYmVyX2Zvcm1hdF8xICAgICAgICAgOiAvLipcLi8sCgludW1iZXJfZm9ybWF0XzIgICAgICAgICA6IC9cLi4qLywKCW51bWJlcl9wcmVzZW50ICAgICAgICAgIDogL1xkezEsfS8sCgludW1iZXJfc3RyaW5nICAgICAgICAgICA6IC9udW1iZXJ8c3RyaW5nL2ksCgludW1iZXJfc3RyaW5nX29iamVjdCAgICA6IC9udW1iZXJ8b2JqZWN0fHN0cmluZy9pLAoJbnVsbF91bmRlZmluZWQgICAgICAgICAgOiAvbnVsbHx1bmRlZmluZWQvLAoJb2JzZXJ2ZXJfYWxsb3dlZCAgICAgICAgOiAvY2xpY2t8ZXJyb3J8a2V5fG1vdXNlZG93bnxtb3VzZXVwfHN1Ym1pdC9pLAoJb2JzZXJ2ZXJfZ2xvYmFscyAgICAgICAgOiAvYm9keXxkb2N1bWVudHx3aW5kb3cvaSwKCW9iamVjdF90eXBlICAgICAgICAgICAgIDogL1xbb2JqZWN0IE9iamVjdFxdLywKCW9iamVjdF91bmRlZmluZWQgICAgICAgIDogL29iamVjdHx1bmRlZmluZWQvLAoJb3BlcmEgICAgICAgICAgICAgICAgICAgOiAvb3BlcmEvaSwKCW9zeCAgICAgICAgICAgICAgICAgICAgIDogL21hY2ludG9zaC9pLAoJcGF0Y2ggICAgICAgICAgICAgICAgICAgOiAvXnBhdGNoJC9pLAoJcGhvbmUgICAgICAgICAgICAgICAgICAgOiAvXihbMC05XChcKVwvXCsgXC1cLl0rKSQvLAoJcGxheWJvb2sgICAgICAgICAgICAgICAgOiAvcGxheWJvb2svaSwKCXBsdXJhbCAgICAgICAgICAgICAgICAgIDogL3MkLywKCXByaW1pdGl2ZSAgICAgICAgICAgICAgIDogL14oYm9vbGVhbnxmdW5jdGlvbnxudW1iZXJ8c3RyaW5nKSQvLAoJcHJpdiAgICAgICAgICAgICAgICAgICAgOiAvcHJpdmF0ZS8sCglwdXRfcG9zdCAgICAgICAgICAgICAgICA6IC9eKHBvc3R8cHV0KSQvaSwKCXJhZGlvX2NoZWNrYm94ICAgICAgICAgIDogL14ocmFkaW98Y2hlY2tib3gpJC9pLAoJcmVmbGVjdCAgICAgICAgICAgICAgICAgOiAvZnVuY3Rpb25ccytcdypccypcKCguKj8pXCkvLAoJcm9vdCAgICAgICAgICAgICAgICAgICAgOiAvXlwvW15cL10vLAoJcm91dGVfbmdldCAgICAgICAgICAgICAgOiAvXihoZWFkfG9wdGlvbnMpJC9pLAoJcm91dGVfbWV0aG9kcyAgICAgICAgICAgOiAvXihhbGx8ZGVsZXRlfGdldHxwdXR8cG9zdHxoZWFkfG9wdGlvbnMpJC9pLAoJc2FmYXJpICAgICAgICAgICAgICAgICAgOiAvc2FmYXJpL2ksCglzY2hlbWUgICAgICAgICAgICAgICAgICA6IC8uKlwvXC8vLAoJc2VsZWN0ICAgICAgICAgICAgICAgICAgOiAvc2VsZWN0L2ksCglzZWxlY3Rvcl9pcyAgICAgICAgICAgICA6IC9eOi8sCglzZWxlY3Rvcl9tYW55ICAgICAgICAgICA6IC9cOnxcLnxcK3xcfnxcWy8sCglzZWxlY3Rvcl9jb21wbGV4ICAgICAgICA6IC9ccyt8XD58XCt8XH58XDp8XFsvLAoJc2VsZWN0b3Jfc3BsaXQgICAgICAgICAgOiAvXHMrfFw+fFwrfFx+LywKCXNldF9kZWwgICAgICAgICAgICAgICAgIDogL14oc2V0fGRlbHxkZWxldGUpJC8sCglzb3J0X25lZWRsZSAgICAgICAgICAgICA6IC9eLio6OjovLAoJc29ydF92YWx1ZSAgICAgICAgICAgICAgOiAvOjo6LiokLywKCXNwYWNlX2h5cGhlbiAgICAgICAgICAgIDogL1xzfC0vLAoJc3RyaW5nX2Jvb2xlYW4gICAgICAgICAgOiAvXih0cnVlfGZhbHNlKSQvaSwKCXN0cmluZ19vYmplY3QgICAgICAgICAgIDogL3N0cmluZ3xvYmplY3QvaSwKCXN0cmluZ190cnVlICAgICAgICAgICAgIDogL150cnVlJC9pLAoJc3ZnICAgICAgICAgICAgICAgICAgICAgOiAvc3ZnLywKCXRvcF9ib3R0b20gICAgICAgICAgICAgIDogL3RvcHxib3R0b20vaSwKCXRydWVfdW5kZWZpbmVkICAgICAgICAgIDogL3RydWV8dW5kZWZpbmVkL2ksCgl1cmwgICAgICAgICAgICAgICAgICAgICA6IC9eKD86KD86aHR0cHM/fGZ0cCk6XC9cLykoPzpcUysoPzo6XFMqKT9AKT8oPzooPyExMCg/OlwuXGR7MSwzfSl7M30pKD8hMTI3KD86XC5cZHsxLDN9KXszfSkoPyExNjlcLjI1NCg/OlwuXGR7MSwzfSl7Mn0pKD8hMTkyXC4xNjgoPzpcLlxkezEsM30pezJ9KSg/ITE3MlwuKD86MVs2LTldfDJcZHwzWzAtMV0pKD86XC5cZHsxLDN9KXsyfSkoPzpbMS05XVxkP3wxXGRcZHwyWzAxXVxkfDIyWzAtM10pKD86XC4oPzoxP1xkezEsMn18MlswLTRdXGR8MjVbMC01XSkpezJ9KD86XC4oPzpbMS05XVxkP3wxXGRcZHwyWzAtNF1cZHwyNVswLTRdKSl8KD86KD86W2Etelx1MDBhMS1cdWZmZmYwLTldKy0/KSpbYS16XHUwMGExLVx1ZmZmZjAtOV0rKSg/OlwuKD86W2Etelx1MDBhMS1cdWZmZmYwLTldKy0/KSpbYS16XHUwMGExLVx1ZmZmZjAtOV0rKSooPzpcLig/OlthLXpcdTAwYTEtXHVmZmZmXXsyLH0pKSkoPzo6XGR7Miw1fSk/KD86XC9bXlxzXSopPyQvaSwKCXdlYm9zICAgICAgICAgICAgICAgICAgIDogL3dlYm9zL2ksCgl3aW5kb3dzICAgICAgICAgICAgICAgICA6IC93aW5kb3dzL2ksCgl3b3JkICAgICAgICAgICAgICAgICAgICA6IC9eXHcrJC8sCgl4bWwgICAgICAgICAgICAgICAgICAgICA6IC94bWwvaQp9OwoKLyoqIEBuYW1lc3BhY2UgYXJyYXkgKi8KdmFyIGFycmF5ID0gewoJLyoqCgkgKiBBZGRzICdhcmcnIHRvICdvYmonIGlmIGl0IGlzIG5vdCBmb3VuZAoJICoKCSAqIEBtZXRob2QgYWRkCgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIEFycmF5IHRvIHJlY2VpdmUgJ2FyZycKCSAqIEBwYXJhbSAge01peGVkfSBhcmcgQXJndW1lbnQgdG8gc2V0IGluICdvYmonCgkgKiBAcmV0dXJuIHtBcnJheX0gICAgIEFycmF5IHRoYXQgd2FzIHF1ZXJpZWQKCSAqLwoJYWRkIDogZnVuY3Rpb24gKCBvYmosIGFyZyApIHsKCQlpZiAoICFhcnJheS5jb250YWlucyggb2JqLCBhcmcgKSApIHsKCQkJb2JqLnB1c2goIGFyZyApOwoJCX0KCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBQcmVmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb24gYSBzb3J0ZWQgQXJyYXkKCSAqCgkgKiBAbWV0aG9kIGJpbkluZGV4CgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIEFycmF5IHRvIHNlYXJjaAoJICogQHBhcmFtICB7TWl4ZWR9IGFyZyBWYWx1ZSB0byBmaW5kIGluZGV4IG9mCgkgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgIEluZGV4IG9mIGBhcmdgIHdpdGhpbiBgb2JqYAoJICovCgliaW5JbmRleCA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJdmFyIG1pbiA9IDAsCgkJICAgIG1heCA9IG9iai5sZW5ndGggLSAxLAoJCSAgICBpZHgsIHZhbDsKCgkJd2hpbGUgKCBtaW4gPD0gbWF4ICkgewoJCQlpZHggPSBNYXRoLmZsb29yKCAoIG1pbiArIG1heCApIC8gMiApOwoJCQl2YWwgPSBvYmpbaWR4XTsKCgkJCWlmICggdmFsIDwgYXJnICkgewoJCQkJbWluID0gaWR4ICsgMTsKCQkJfQoJCQllbHNlIGlmICggdmFsID4gYXJnICkgewoJCQkJbWF4ID0gaWR4IC0gMTsKCQkJfQoJCQllbHNlIHsKCQkJCXJldHVybiBpZHg7CgkJCX0KCQl9CgoJCXJldHVybiAtMTsKCX0sCgoJLyoqCgkgKiBSZXR1cm5zIGFuIE9iamVjdCAoIE5vZGVMaXN0LCBldGMuICkgYXMgYW4gQXJyYXkKCSAqCgkgKiBAbWV0aG9kIGNhc3QKCSAqIEBwYXJhbSAge09iamVjdH0gIG9iaiBPYmplY3QgdG8gY2FzdAoJICogQHBhcmFtICB7Qm9vbGVhbn0ga2V5IFtPcHRpb25hbF0gUmV0dXJucyBrZXkgb3IgdmFsdWUsIG9ubHkgYXBwbGllcyB0byBPYmplY3RzIHdpdGhvdXQgYSBsZW5ndGggcHJvcGVydHkKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgICBPYmplY3QgYXMgYW4gQXJyYXkKCSAqLwoJY2FzdCA6IGZ1bmN0aW9uICgpIHsKCQlpZiAoIHNlcnZlciB8fCAoICFjbGllbnQuaWUgfHwgY2xpZW50LnZlcnNpb24gPiA4ICkgKSB7CgkJCXJldHVybiBmdW5jdGlvbiAoIG9iaiwga2V5ICkgewoJCQkJa2V5ID0gKCBrZXkgPT09IHRydWUgKTsKCQkJCXZhciBvID0gW107CgoJCQkJaWYgKCAhaXNOYU4oIG9iai5sZW5ndGggKSApIHsKCQkJCQlvID0gc2xpY2UuY2FsbCggb2JqICk7CgkJCQl9CgkJCQllbHNlIGlmICgga2V5ICkgewoJCQkJCW8gPSBhcnJheS5rZXlzKCBvYmogKTsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCXV0aWxpdHkuaXRlcmF0ZSggb2JqLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQkJCW8ucHVzaCggaSApOwoJCQkJCX0pOwoJCQkJfQoKCQkJCXJldHVybiBvOwoJCQl9OwoJCX0KCQllbHNlIHsKCQkJcmV0dXJuIGZ1bmN0aW9uICggb2JqLCBrZXkgKSB7CgkJCQlrZXkgICA9ICgga2V5ID09PSB0cnVlICk7CgkJCQl2YXIgbyA9IFtdOwoKCQkJCWlmICggIWlzTmFOKCBvYmoubGVuZ3RoICkgKSB7CgkJCQkJdHJ5IHsKCQkJCQkJbyA9IHNsaWNlLmNhbGwoIG9iaiApOwoJCQkJCX0KCQkJCQljYXRjaCAoIGUgKSB7CgkJCQkJCXV0aWxpdHkuaXRlcmF0ZSggb2JqLCBmdW5jdGlvbiAoIGksIGlkeCApIHsKCQkJCQkJCWlmICggaWR4ICE9PSAibGVuZ3RoIiApIHsKCQkJCQkJCQlvLnB1c2goIGkgKTsKCQkJCQkJCX0KCQkJCQkJfSk7CgkJCQkJfQoJCQkJfQoJCQkJZWxzZSBpZiAoIGtleSApIHsKCQkJCQlvID0gYXJyYXkua2V5cyggb2JqICk7CgkJCQl9CgkJCQllbHNlIHsKCQkJCQl1dGlsaXR5Lml0ZXJhdGUoIG9iaiwgZnVuY3Rpb24gKCBpICkgewoJCQkJCQlvLnB1c2goIGkgKTsKCQkJCQl9KTsKCQkJCX0KCgkJCQlyZXR1cm4gbzsKCQkJfTsKCQl9Cgl9LAoKCS8qKgoJICogVHJhbnNmb3JtcyBhbiBBcnJheSB0byBhIDJEIEFycmF5IG9mIGNodW5rcwoJICoKCSAqIEBtZXRob2QgY2h1bmsKCSAqIEBwYXJhbSAge0FycmF5fSAgb2JqICBBcnJheSB0byBwYXJzZQoJICogQHBhcmFtICB7TnVtYmVyfSBzaXplIENodW5rIHNpemUgKCBpbnRlZ2VyICkKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgICBDaHVua2VkIEFycmF5CgkgKi8KCWNodW5rIDogZnVuY3Rpb24gKCBvYmosIHNpemUgKSB7CgkJdmFyIHJlc3VsdCA9IFtdLAoJCSAgICBudGggICAgPSBudW1iZXIucm91bmQoICggb2JqLmxlbmd0aCAvIHNpemUgKSwgInVwIiApLAoJCSAgICBzdGFydCAgPSAwLAoJCSAgICBpICAgICAgPSAtMTsKCgkJd2hpbGUgKCArK2kgPCBudGggKSB7CgkJCXN0YXJ0ID0gaSAqIHNpemU7CgkJCXJlc3VsdC5wdXNoKCBhcnJheS5saW1pdCggb2JqLCBzdGFydCwgc2l6ZSApICk7CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIENsZWFycyBhbiBBcnJheSB3aXRob3V0IGRlc3Ryb3lpbmcgaXQKCSAqCgkgKiBAbWV0aG9kIGNsZWFyCgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIEFycmF5IHRvIGNsZWFyCgkgKiBAcmV0dXJuIHtBcnJheX0gICAgIENsZWFyZWQgQXJyYXkKCSAqLwoJY2xlYXIgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gb2JqLmxlbmd0aCA+IDAgPyBhcnJheS5yZW1vdmUoIG9iaiwgMCwgb2JqLmxlbmd0aCApIDogb2JqOwoJfSwKCgkvKioKCSAqIENsb25lcyBhbiBBcnJheQoJICoKCSAqIEBtZXRob2QgY2xvbmUKCSAqIEBwYXJhbSAge0FycmF5fSBvYmogQXJyYXkgdG8gY2xvbmUKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgQ2xvbmUgb2YgQXJyYXkKCSAqLwoJY2xvbmUgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gb2JqLnNsaWNlKCk7Cgl9LAoKCS8qKgoJICogRGV0ZXJtaW5lcyBpZiBvYmogY29udGFpbnMgYXJnCgkgKgoJICogQG1ldGhvZCBjb250YWlucwoJICogQHBhcmFtICB7QXJyYXl9IG9iaiBBcnJheSB0byBzZWFyY2gKCSAqIEBwYXJhbSAge01peGVkfSBhcmcgVmFsdWUgdG8gbG9vayBmb3IKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgVHJ1ZSBpZiBmb3VuZCwgZmFsc2UgaWYgbm90CgkgKi8KCWNvbnRhaW5zIDogZnVuY3Rpb24gKCBvYmosIGFyZyApIHsKCQlyZXR1cm4gKCBhcnJheS5pbmRleCggb2JqLCBhcmcgKSA+IC0xICk7Cgl9LAoKCS8qKgoJICogQ3JlYXRlcyBhIG5ldyBBcnJheSBvZiB0aGUgcmVzdWx0IG9mIGBmbmAgZXhlY3V0ZWQgYWdhaW5zdCBldmVyeSBpbmRleCBvZiBgb2JqYAoJICoKCSAqIEBtZXRob2QgY29sbGVjdAoJICogQHBhcmFtICB7QXJyYXl9ICAgIG9iaiBBcnJheSB0byBpdGVyYXRlCgkgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgYWdhaW5zdCBpbmRpY2VzCgkgKiBAcmV0dXJuIHtBcnJheX0gICAgICAgIE5ldyBBcnJheQoJICovCgljb2xsZWN0IDogZnVuY3Rpb24gKCBvYmosIGZuICkgewoJCXZhciByZXN1bHQgPSBbXTsKCgkJYXJyYXkuZWFjaCggb2JqLCBmdW5jdGlvbiAoIGkgKSB7CgkJCXJlc3VsdC5wdXNoKCBmbiggaSApICk7CgkJfSk7CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogQ29tcGFjdHMgYSBBcnJheSBieSByZW1vdmluZyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgaW5kaWNlcwoJICoKCSAqIEBtZXRob2QgY29tcGFjdAoJICogQHBhcmFtICB7QXJyYXl9IG9iaiAgICBBcnJheSB0byBjb21wYWN0CgkgKiBAcGFyYW0gIHtCb29sZWFufSBkaWZmIEluZGljYXRlcyB0byByZXR1cm4gcmVzdWx0aW5nIEFycmF5IG9ubHkgaWYgdGhlcmUncyBhIGRpZmZlcmVuY2UKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgQ29tcGFjdGVkIGNvcHkgb2YgYG9iamAsIG9yIG51bGwgKCBpZiBgZGlmZmAgaXMgcGFzc2VkICYgbm8gZGlmZiBpcyBmb3VuZCApCgkgKi8KCWNvbXBhY3QgOiBmdW5jdGlvbiAoIG9iaiwgZGlmZiApIHsKCQl2YXIgcmVzdWx0ID0gW107CgoJCXJlc3VsdCA9IG9iai5maWx0ZXIoIGZ1bmN0aW9uICggaSApIHsKCQkJcmV0dXJuICFyZWdleC5udWxsX3VuZGVmaW5lZC50ZXN0KCBpICk7CgkJfSk7CgoJCXJldHVybiAhZGlmZiA/IHJlc3VsdCA6ICggcmVzdWx0Lmxlbmd0aCA8IG9iai5sZW5ndGggPyByZXN1bHQgOiBudWxsICk7Cgl9LAoKCS8qKgoJICogQ291bnRzIGB2YWx1ZWAgaW4gYG9iamAKCSAqCgkgKiBAbWV0aG9kIGNvdW50CgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqICAgQXJyYXkgdG8gc2VhcmNoCgkgKiBAcGFyYW0gIHtNaXhlZH0gdmFsdWUgVmFsdWUgdG8gY29tcGFyZQoJICogQHJldHVybiB7QXJyYXl9ICAgICAgIEFycmF5IG9mIGNvdW50cwoJICovCgljb3VudCA6IGZ1bmN0aW9uICggb2JqLCB2YWx1ZSApIHsKCQlyZXR1cm4gb2JqLmZpbHRlciggZnVuY3Rpb24gKCBpICkgewoJCQlyZXR1cm4gKCBpID09PSB2YWx1ZSApOwoJCX0pLmxlbmd0aDsKCX0sCgoJLyoqCgkgKiBGaW5kcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGFycmF5MSBhbmQgYXJyYXkyCgkgKgoJICogQG1ldGhvZCBkaWZmCgkgKiBAcGFyYW0gIHtBcnJheX0gYXJyYXkxIFNvdXJjZSBBcnJheQoJICogQHBhcmFtICB7QXJyYXl9IGFycmF5MiBDb21wYXJpc29uIEFycmF5CgkgKiBAcmV0dXJuIHtBcnJheX0gICAgICAgIEFycmF5IG9mIHRoZSBkaWZmZXJlbmNlcwoJICovCglkaWZmIDogZnVuY3Rpb24gKCBhcnJheTEsIGFycmF5MiApIHsKCQl2YXIgcmVzdWx0ID0gW107CgoJCWFycmF5LmVhY2goIGFycmF5MSwgZnVuY3Rpb24gKCBpICkgewoJCQlpZiAoICFhcnJheS5jb250YWlucyggYXJyYXkyLCBpICkgKSB7CgkJCQlhcnJheS5hZGQoIHJlc3VsdCwgaSApOwoJCQl9CgkJfSk7CgoJCWFycmF5LmVhY2goIGFycmF5MiwgZnVuY3Rpb24gKCBpICkgewoJCQlpZiAoICFhcnJheS5jb250YWlucyggYXJyYXkxLCBpICkgKSB7CgkJCQlhcnJheS5hZGQoIHJlc3VsdCwgaSApOwoJCQl9CgkJfSk7CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogSXRlcmF0ZXMgb2JqIGFuZCBleGVjdXRlcyBmbgoJICoKCSAqIFBhcmFtZXRlcnMgZm9yIGZuIGFyZSAndmFsdWUnLCAnaW5kZXgnCgkgKgoJICogQG1ldGhvZCBlYWNoCgkgKiBAcGFyYW0gIHtBcnJheX0gICAgb2JqICAgQXJyYXkgdG8gaXRlcmF0ZQoJICogQHBhcmFtICB7RnVuY3Rpb259IGZuICAgIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gaW5kZXggdmFsdWVzCgkgKiBAcGFyYW0gIHtCb29sZWFufSAgYXN5bmMgW09wdGlvbmFsXSBBc3luY2hyb25vdXMgaXRlcmF0aW9uCgkgKiBAcGFyYW0gIHtOdW1iZXJ9ICAgc2l6ZSAgW09wdGlvbmFsXSBCYXRjaCBzaXplIGZvciBhc3luYyBpdGVyYXRpb24sIGRlZmF1bHQgaXMgMTAKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheQoJICovCgllYWNoIDogZnVuY3Rpb24gKCBvYmosIGZuLCBhc3luYywgc2l6ZSApIHsKCQl2YXIgbnRoID0gb2JqLmxlbmd0aCwKCQkgICAgaSwgb2Zmc2V0OwoKCQlpZiAoIGFzeW5jICE9PSB0cnVlICkgewoJCQlmb3IgKCBpID0gMDsgaSA8IG50aDsgaSsrICkgewoJCQkJaWYgKCBmbi5jYWxsKCBvYmosIG9ialtpXSwgaSApID09PSBmYWxzZSApIHsKCQkJCQlicmVhazsKCQkJCX0KCQkJfQoJCX0KCQllbHNlIHsKCQkJc2l6ZSAgID0gc2l6ZSB8fCAxMDsKCQkJb2Zmc2V0ID0gMDsKCgkJCWlmICggc2l6ZSA+IG50aCApIHsKCQkJCXNpemUgPSBudGg7CgkJCX0KCgkJCXV0aWxpdHkucmVwZWF0KCBmdW5jdGlvbiAoKSB7CgkJCQl2YXIgaSA9IDAsCgkJCQkgICAgaWR4OwoKCQkJCWZvciAoIGkgPSAwOyBpIDwgc2l6ZTsgaSsrICkgewoJCQkJCWlkeCA9IGkgKyBvZmZzZXQ7CgoJCQkJCWlmICggaWR4ID09PSBudGggfHwgZm4uY2FsbCggb2JqLCBvYmpbaWR4XSwgaWR4ICkgPT09IGZhbHNlICkgewoJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJfQoJCQkJfQoKCQkJCW9mZnNldCArPSBzaXplOwoKCQkJCWlmICggb2Zmc2V0ID49IG50aCApIHsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX0sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmYWxzZSApOwoJCX0KCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBEZXRlcm1pbmVzIGlmIGFuIEFycmF5IGlzIGVtcHR5CgkgKgoJICogQG1ldGhvZCBlbXB0eQoJICogQHBhcmFtICB7QXJyYXl9IG9iaiBBcnJheSB0byBpbnNwZWN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgIGB0cnVlYCBpZiB0aGVyZSdzIG5vIGluZGljZXMKCSAqLwoJZW1wdHkgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gKCBvYmoubGVuZ3RoID09PSAwICk7Cgl9LAoKCS8qKgoJICogRGV0ZXJtaW5lcyBpZiBgYWAgaXMgZXF1YWwgdG8gYGJgCgkgKgoJICogQG1ldGhvZCBlcXVhbAoJICogQHBhcmFtICB7QXJyYXl9IGEgQXJyYXkgdG8gY29tcGFyZQoJICogQHBhcmFtICB7QXJyYXl9IGIgQXJyYXkgdG8gY29tcGFyZQoJICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBBcnJheXMgbWF0Y2gKCSAqLwoJZXF1YWwgOiBmdW5jdGlvbiAoIGEsIGIgKSB7CgkJcmV0dXJuICgganNvbi5lbmNvZGUoIGEgKSA9PT0ganNvbi5lbmNvZGUoIGIgKSApOwoJfSwKCgkvKioKCSAqIEZpYm9uYWNjaSBnZW5lcmF0b3IKCSAqCgkgKiBAbWV0aG9kIGZpYgoJICogQHBhcmFtICB7TnVtYmVyfSBhcmcgW09wdGlvbmFsXSBBbW91bnQgb2YgbnVtYmVycyB0byBnZW5lcmF0ZSwgZGVmYXVsdCBpcyAxMDAKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgIEFycmF5IG9mIG51bWJlcnMKCSAqLwoJZmliIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJdmFyIHJlc3VsdCA9IFsxLCAxXSwKCQkgICAgZmlyc3QgID0gcmVzdWx0WzBdLAoJCSAgICBzZWNvbmQgPSByZXN1bHRbMV0sCgkJICAgIHN1bTsKCgkJLy8gU3VidHJhY3RpbmcgMSB0byBhY2NvdW50IGZvciBgZmlyc3RgICYgYHNlY29uZGAKCQlhcmcgPSAoIGFyZyB8fCAxMDAgKSAtIDE7CgkJCgkJaWYgKCBpc05hTiggYXJnICkgfHwgYXJnIDwgMiApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJfQoKCQl3aGlsZSAoIC0tYXJnICkgewoJCQlzdW0gICAgPSBmaXJzdCArIHNlY29uZDsKCQkJZmlyc3QgID0gc2Vjb25kOwoJCQlzZWNvbmQgPSBzdW07CgkJCXJlc3VsdC5wdXNoKCBzdW0gKTsKCQl9CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogRmlsbHMgYG9iamAgd2l0aCB0aGUgZXZhbHV0aW9uIG9mIGBhcmdgLCBvcHRpb25hbGx5IGZyb20gYHN0YXJ0YCB0byBgb2Zmc2V0YAoJICoKCSAqIEBtZXRob2QgZmlsbAoJICogQHBhcmFtICB7QXJyYXl9ICBvYmogICBBcnJheSB0byBmaWxsCgkgKiBAcGFyYW0gIHtNaXhlZH0gIGFyZyAgIFN0cmluZywgTnVtYmVyIG9mIEZ1bmN0aW9uIHRvIGZpbGwgd2l0aAoJICogQHBhcmFtICB7TnVtYmVyfSBzdGFydCBbT3B0aW9uYWxdIEluZGV4IHRvIGJlZ2luIGZpbGxpbmcgYXQKCSAqIEBwYXJhbSAge051bWJlcn0gZW5kICAgW09wdGlvbmFsXSBPZmZzZXQgZnJvbSBzdGFydCB0byBzdG9wIGZpbGxpbmcgYXQKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgRmlsbGVkIEFycmF5CgkgKi8KCWZpbGwgOiBmdW5jdGlvbiAoIG9iaiwgYXJnLCBzdGFydCwgb2Zmc2V0ICkgewoJCXZhciBmbiAgPSB0eXBlb2YgYXJnID09PSAiZnVuY3Rpb24iLAoJCSAgICBsICAgPSBvYmoubGVuZ3RoLAoJCSAgICBpICAgPSAhaXNOYU4oIHN0YXJ0ICkgPyBzdGFydCA6IDAsCgkJICAgIG50aCA9ICFpc05hTiggb2Zmc2V0ICkgPyBpICsgb2Zmc2V0IDogbCAtIDE7CgoJCWlmICggbnRoID4gKCBsIC0gMSkgKSB7CgkJCW50aCA9IGwgLSAxOwoJCX0KCgkJd2hpbGUgKCBpIDw9IG50aCApIHsKCQkJb2JqW2ldID0gZm4gPyBhcmcoIG9ialtpXSApIDogYXJnOwoJCQlpKys7CgkJfQoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIFJldHVybnMgdGhlIGZpcnN0IEFycmF5IG5vZGUKCSAqCgkgKiBAbWV0aG9kIGZpcnN0CgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIFRoZSBhcnJheQoJICogQHJldHVybiB7TWl4ZWR9ICAgICBUaGUgZmlyc3Qgbm9kZSBvZiB0aGUgYXJyYXkKCSAqLwoJZmlyc3QgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gb2JqWzBdOwoJfSwKCgkvKioKCSAqIEZsYXR0ZW5zIGEgMkQgQXJyYXkKCSAqCgkgKiBAbWV0aG9kIGZsYXQKCSAqIEBwYXJhbSAge0FycmF5fSBvYmogMkQgQXJyYXkgdG8gZmxhdHRlbgoJICogQHJldHVybiB7QXJyYXl9ICAgICBGbGF0dGVuIEFycmF5CgkgKi8KCWZsYXQgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQl2YXIgcmVzdWx0ID0gW107CgoJCXJlc3VsdCA9IG9iai5yZWR1Y2UoIGZ1bmN0aW9uICggYSwgYiApIHsKCQkJcmV0dXJuIGEuY29uY2F0KCBiICk7CgkJfSwgcmVzdWx0ICk7CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogQ3JlYXRlcyBhIDJEIEFycmF5IGZyb20gYW4gT2JqZWN0CgkgKgoJICogQG1ldGhvZCBmcm9tT2JqZWN0CgkgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiBPYmplY3QgdG8gY29udmVydAoJICogQHJldHVybiB7QXJyYXl9ICAgICAgMkQgQXJyYXkKCSAqLwoJZnJvbU9iamVjdCA6IGZ1bmN0aW9uICggb2JqICkgewoJCXJldHVybiBhcnJheS5taW5nbGUoIGFycmF5LmtleXMoIG9iaiApLCBhcnJheS5jYXN0KCBvYmogKSApOwoJfSwKCgkvKioKCSAqIEZhY2FkZSB0byBpbmRleE9mIGZvciBzaG9ydGVyIHN5bnRheAoJICoKCSAqIEBtZXRob2QgaW5kZXgKCSAqIEBwYXJhbSAge0FycmF5fSBvYmogQXJyYXkgdG8gc2VhcmNoCgkgKiBAcGFyYW0gIHtNaXhlZH0gYXJnIFZhbHVlIHRvIGZpbmQgaW5kZXggb2YKCSAqIEByZXR1cm4ge051bWJlcn0gICAgVGhlIHBvc2l0aW9uIG9mIGFyZyBpbiBpbnN0YW5jZQoJICovCglpbmRleCA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJcmV0dXJuIG9iai5pbmRleE9mKCBhcmcgKTsKCX0sCgoJLyoqCgkgKiBSZXR1cm5zIGFuIEFzc29jaWF0aXZlIEFycmF5IGFzIGFuIEluZGV4ZWQgQXJyYXkKCSAqCgkgKiBAbWV0aG9kIGluZGV4ZWQKCSAqIEBwYXJhbSAge0FycmF5fSBvYmogQXJyYXkgdG8gaW5kZXgKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgSW5kZXhlZCBBcnJheQoJICovCglpbmRleGVkIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJdmFyIGluZGV4ZWQgPSBbXTsKCgkJdXRpbGl0eS5pdGVyYXRlKCBvYmosIGZ1bmN0aW9uICggdiApIHsKCQkJaW5kZXhlZC5wdXNoKCB2ICk7CgkJfSk7CgoJCXJldHVybiBpbmRleGVkOwoJfSwKCgkvKioKCSAqIEZpbmRzIHRoZSBpbnRlcnNlY3Rpb25zIGJldHdlZW4gYXJyYXkxIGFuZCBhcnJheTIKCSAqCgkgKiBAbWV0aG9kIGludGVyc2VjdAoJICogQHBhcmFtICB7QXJyYXl9IGFycmF5MSBTb3VyY2UgQXJyYXkKCSAqIEBwYXJhbSAge0FycmF5fSBhcnJheTIgQ29tcGFyaXNvbiBBcnJheQoJICogQHJldHVybiB7QXJyYXl9ICAgICAgICBBcnJheSBvZiB0aGUgaW50ZXJzZWN0aW9ucwoJICovCglpbnRlcnNlY3QgOiBmdW5jdGlvbiAoIGFycmF5MSwgYXJyYXkyICkgewoJCXZhciBhID0gYXJyYXkxLmxlbmd0aCA+IGFycmF5Mi5sZW5ndGggPyBhcnJheTEgOiBhcnJheTIsCgkJICAgIGIgPSAoIGEgPT09IGFycmF5MSA/IGFycmF5MiA6IGFycmF5MSApOwoKCQlyZXR1cm4gYS5maWx0ZXIoIGZ1bmN0aW9uICgga2V5ICkgewoJCQlyZXR1cm4gYXJyYXkuY29udGFpbnMoIGIsIGtleSApOwoJCX0pOwoJfSwKCgkvKioKCSAqIEtlZXBzIGV2ZXJ5IGVsZW1lbnQgb2YgYG9iamAgZm9yIHdoaWNoIGBmbmAgZXZhbHVhdGVzIHRvIHRydWUKCSAqCgkgKiBAbWV0aG9kIGtlZXBJZgoJICogQHBhcmFtICB7QXJyYXl9ICAgIG9iaiBBcnJheSB0byBpdGVyYXRlCgkgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gIEZ1bmN0aW9uIHRvIHRlc3QgaW5kaWNlcyBhZ2FpbnN0CgkgKiBAcmV0dXJuIHtBcnJheX0gICAgICAgIEFycmF5CgkgKi8KCWtlZXBJZiA6IGZ1bmN0aW9uICggb2JqLCBmbiApIHsKCQlpZiAoIHR5cGVvZiBmbiAhPT0gImZ1bmN0aW9uIiApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJfQoKCQl2YXIgcmVzdWx0ID0gW10sCgkJICAgIHJlbW92ZSA9IFtdOwoKCQlyZXN1bHQgPSBvYmouZmlsdGVyKCBmbiApOwoJCXJlbW92ZSA9IGFycmF5LmRpZmYoIG9iaiwgcmVzdWx0ICk7CgoJCWFycmF5LmVhY2goIHJlbW92ZSwgZnVuY3Rpb24gKCBpICkgewoJCQlhcnJheS5yZW1vdmUoIG9iaiwgYXJyYXkuaW5kZXgoIG9iaiwgaSApICk7CgkJfSk7CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8qKgoJICogU29ydHMgYW4gQXJyYXkgYmFzZWQgb24ga2V5IHZhbHVlcywgbGlrZSBhbiBTUUwgT1JERVIgQlkgY2xhdXNlCgkgKgoJICogQG1ldGhvZCBzb3J0CgkgKiBAcGFyYW0gIHtBcnJheX0gIG9iaiAgIEFycmF5IHRvIHNvcnQKCSAqIEBwYXJhbSAge1N0cmluZ30gcXVlcnkgU29ydCBxdWVyeSwgZS5nLiAibmFtZSwgYWdlIGRlc2MsIGNvdW50cnkiCgkgKiBAcGFyYW0gIHtTdHJpbmd9IHN1YiAgIFtPcHRpb25hbF0gS2V5IHdoaWNoIGhvbGRzIGRhdGEsIGUuZy4gIntkYXRhOiB7fX0iID0gImRhdGEiCgkgKiBAcmV0dXJuIHtBcnJheX0gICAgICAgIFNvcnRlZCBBcnJheQoJICovCglrZXlTb3J0IDogZnVuY3Rpb24gKCBvYmosIHF1ZXJ5LCBzdWIgKSB7CgkJcXVlcnkgICAgICAgPSBxdWVyeS5yZXBsYWNlKCAvXHMqYXNjL2lnLCAiIiApLnJlcGxhY2UoIC9ccypkZXNjL2lnLCAiIGRlc2MiICk7CgkJdmFyIHF1ZXJpZXMgPSBzdHJpbmcuZXhwbG9kZSggcXVlcnkgKS5tYXAoIGZ1bmN0aW9uICggaSApIHsgcmV0dXJuIGkuc3BsaXQoICIgIiApOyB9KSwKCQkgICAgc29ydHMgICA9IFtdOwoKCQlpZiAoIHN1YiAmJiBzdWIgIT09ICIiICkgewoJCQlzdWIgPSAiLiIgKyBzdWI7CgkJfQoJCWVsc2UgewoJCQlzdWIgPSAiIjsKCQl9CgoJCWFycmF5LmVhY2goIHF1ZXJpZXMsIGZ1bmN0aW9uICggaSApIHsKCQkJdmFyIGRlc2MgPSBpWzFdID09PSAiZGVzYyI7CgoJCQlpZiAoICFkZXNjICkgewoJCQkJc29ydHMucHVzaCggImlmICggYSIgKyBzdWIgKyAiW1wiIiArIGlbMF0gKyAiXCJdIDwgYiIgKyBzdWIgKyAiW1wiIiArIGlbMF0gKyAiXCJdICkgcmV0dXJuIC0xOyIgKTsKCQkJCXNvcnRzLnB1c2goICJpZiAoIGEiICsgc3ViICsgIltcIiIgKyBpWzBdICsgIlwiXSA+IGIiICsgc3ViICsgIltcIiIgKyBpWzBdICsgIlwiXSApIHJldHVybiAxOyIgKTsKCQkJfQoJCQllbHNlIHsKCQkJCXNvcnRzLnB1c2goICJpZiAoIGEiICsgc3ViICsgIltcIiIgKyBpWzBdICsgIlwiXSA8IGIiICsgc3ViICsgIltcIiIgKyBpWzBdICsgIlwiXSApIHJldHVybiAxOyIgKTsKCQkJCXNvcnRzLnB1c2goICJpZiAoIGEiICsgc3ViICsgIltcIiIgKyBpWzBdICsgIlwiXSA+IGIiICsgc3ViICsgIltcIiIgKyBpWzBdICsgIlwiXSApIHJldHVybiAtMTsiICk7CgkJCX0KCQl9KTsKCgkJc29ydHMucHVzaCggImVsc2UgcmV0dXJuIDA7IiApOwoKCQlyZXR1cm4gb2JqLnNvcnQoIG5ldyBGdW5jdGlvbiggImEiLCAiYiIsIHNvcnRzLmpvaW4oICJcbiIgKSApICk7Cgl9LAoKCS8qKgoJICogUmV0dXJucyB0aGUga2V5cyBpbiBhbiAiQXNzb2NpYXRpdmUgQXJyYXkiCgkgKgoJICogQG1ldGhvZCBrZXlzCgkgKiBAcGFyYW0gIHtNaXhlZH0gb2JqIEFycmF5IG9yIE9iamVjdCB0byBleHRyYWN0IGtleXMgZnJvbQoJICogQHJldHVybiB7QXJyYXl9ICAgICBBcnJheSBvZiB0aGUga2V5cwoJICovCglrZXlzIDogZnVuY3Rpb24gKCkgewoJCWlmICggdHlwZW9mIE9iamVjdC5rZXlzID09PSAiZnVuY3Rpb24iICkgewoJCQlyZXR1cm4gZnVuY3Rpb24gKCBvYmogKSB7CgkJCQlyZXR1cm4gT2JqZWN0LmtleXMoIG9iaiApOwoJCQl9OwoJCX0KCQllbHNlIHsKCQkJcmV0dXJuIGZ1bmN0aW9uICggb2JqICkgewoJCQkJdmFyIGtleXMgPSBbXTsKCgkJCQl1dGlsaXR5Lml0ZXJhdGUoIG9iaiwgZnVuY3Rpb24gKCB2LCBrICkgewoJCQkJCWtleXMucHVzaCggayApOwoJCQkJfSk7CgoJCQkJcmV0dXJuIGtleXM7CgkJCX07CgkJfQoJfSgpLAoKCS8qKgoJICogUmV0dXJucyB0aGUgbGFzdCBpbmRleCBvZiB0aGUgQXJyYXkKCSAqCgkgKiBAbWV0aG9kIGxhc3QKCSAqIEBwYXJhbSAge0FycmF5fSAgb2JqIEFycmF5CgkgKiBAcGFyYW0gIHtOdW1iZXJ9IGFyZyBbT3B0aW9uYWxdIE5lZ2F0aXZlIG9mZnNldCBmcm9tIGxhc3QgaW5kZXggdG8gcmV0dXJuCgkgKiBAcmV0dXJuIHtNaXhlZH0gICAgICBMYXN0IGluZGV4KCBzICkgb2YgQXJyYXkKCSAqLwoJbGFzdCA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJdmFyIG4gPSBvYmoubGVuZ3RoIC0gMTsKCgkJaWYgKCBhcmcgPj0gKCBuICsgMSApICkgewoJCQlyZXR1cm4gb2JqOwoJCX0KCQllbHNlIGlmICggaXNOYU4oIGFyZyApIHx8IGFyZyA9PT0gMSApIHsKCQkJcmV0dXJuIG9ialtuXTsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiBhcnJheS5saW1pdCggb2JqLCAoIG4gLSAoIC0tYXJnICkgKSwgbiApOwoJCX0KCX0sCgoJLyoqCgkgKiBSZXR1cm5zIGEgbGltaXRlZCByYW5nZSBvZiBpbmRpY2VzIGZyb20gdGhlIEFycmF5CgkgKgoJICogQG1ldGhvZCBsaW1pdAoJICogQHBhcmFtICB7QXJyYXl9ICBvYmogICAgQXJyYXkgdG8gaXRlcmF0ZQoJICogQHBhcmFtICB7TnVtYmVyfSBzdGFydCAgU3RhcnRpbmcgaW5kZXgKCSAqIEBwYXJhbSAge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBpbmRpY2VzIHRvIHJldHVybgoJICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgQXJyYXkgb2YgaW5kaWNlcwoJICovCglsaW1pdCA6IGZ1bmN0aW9uICggb2JqLCBzdGFydCwgb2Zmc2V0ICkgewoJCXZhciByZXN1bHQgPSBbXSwKCQkgICAgaSAgICAgID0gc3RhcnQgLSAxLAoJCSAgICBudGggICAgPSBzdGFydCArIG9mZnNldCwKCQkgICAgbWF4ICAgID0gb2JqLmxlbmd0aDsKCgkJaWYgKCBtYXggPiAwICkgewoJCQl3aGlsZSAoICsraSA8IG50aCAmJiBpIDwgbWF4ICkgewoJCQkJcmVzdWx0LnB1c2goIG9ialtpXSApOwoJCQl9CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIEZpbmRzIHRoZSBtYXhpbXVtIHZhbHVlIGluIGFuIEFycmF5CgkgKgoJICogQG1ldGhvZCBtYXgKCSAqIEBwYXJhbSAge0FycmF5fSBvYmogQXJyYXkgdG8gcGFyc2UKCSAqIEByZXR1cm4ge01peGVkfSAgICAgTnVtYmVyLCBTdHJpbmcsIGV0Yy4KCSAqLwoJbWF4IDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIGFycmF5Lmxhc3QoIG9iai5zb3J0KCBhcnJheS5zb3J0ICkgKTsKCX0sCgoJLyoqCgkgKiBGaW5kcyB0aGUgbWVhbiBvZiBhbiBBcnJheSAoIG9mIG51bWJlcnMgKQoJICoKCSAqIEBtZXRob2QgbWVhbgoJICogQHBhcmFtICB7QXJyYXl9IG9iaiBBcnJheSB0byBwYXJzZQoJICogQHJldHVybiB7TnVtYmVyfSAgICBNZWFuIG9mIHRoZSBBcnJheSAoIGZsb2F0IG9yIGludGVnZXIgKQoJICovCgltZWFuIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5sZW5ndGggPiAwID8gKCBhcnJheS5zdW0oIG9iaiApIC8gb2JqLmxlbmd0aCApIDogdW5kZWZpbmVkOwoJfSwKCgkvKioKCSAqIEZpbmRzIHRoZSBtZWRpYW4gdmFsdWUgb2YgYW4gQXJyYXkgKCBvZiBudW1iZXJzICkKCSAqCgkgKiBAbWV0aG9kIG1lZGlhbgoJICogQHBhcmFtICB7QXJyYXl9IG9iaiBBcnJheSB0byBwYXJzZQoJICogQHJldHVybiB7TnVtYmVyfSAgICBNZWRpYW4gbnVtYmVyIG9mIHRoZSBBcnJheSAoIGZsb2F0IG9yIGludGVnZXIgKQoJICovCgltZWRpYW4gOiBmdW5jdGlvbiAoIG9iaiApIHsKCQl2YXIgbnRoICAgID0gb2JqLmxlbmd0aCwKCQkgICAgbWlkICAgID0gbnVtYmVyLnJvdW5kKCBudGggLyAyLCAiZG93biIgKSwKCQkgICAgc29ydGVkID0gb2JqLnNvcnQoIGFycmF5LnNvcnQgKTsKCgkJcmV0dXJuIG51bWJlci5vZGQoIG50aCApID8gc29ydGVkW21pZF0gOiAoICggc29ydGVkW21pZCAtIDFdICsgc29ydGVkW21pZF0gKSAvIDIgKTsKCX0sCgoJLyoqCgkgKiBNZXJnZXMgYGFyZ2AgaW50byBgb2JqYCwgZXhjbHVkaW5nIGR1cGxpY2F0ZSBpbmRpY2VzCgkgKgoJICogQG1ldGhvZCBtZXJnZQoJICogQHBhcmFtICB7QXJyYXl9IG9iaiBBcnJheSB0byByZWNlaXZlIGluZGljZXMKCSAqIEBwYXJhbSAge0FycmF5fSBhcmcgQXJyYXkgdG8gbWVyZ2UKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgb2JqCgkgKi8KCW1lcmdlIDogZnVuY3Rpb24gKCBvYmosIGFyZyApIHsKCQlhcnJheS5lYWNoKCBhcmcsIGZ1bmN0aW9uICggaSApIHsKCQkJYXJyYXkuYWRkKCBvYmosIGkgKTsKCQl9KTsKCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBGaW5kcyB0aGUgbWluaW11bSB2YWx1ZSBpbiBhbiBBcnJheQoJICoKCSAqIEBtZXRob2QgbWluCgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIEFycmF5IHRvIHBhcnNlCgkgKiBAcmV0dXJuIHtNaXhlZH0gICAgIE51bWJlciwgU3RyaW5nLCBldGMuCgkgKi8KCW1pbiA6IGZ1bmN0aW9uICggb2JqICkgewoJCXJldHVybiBvYmouc29ydCggYXJyYXkuc29ydCApWzBdOwoJfSwKCgkvKioKCSAqIE1pbmdsZXMgQXJyYXlzIGFuZCByZXR1cm5zIGEgMkQgQXJyYXkKCSAqCgkgKiBAbWV0aG9kIG1pbmdsZQoJICogQHBhcmFtICB7QXJyYXl9IG9iajEgQXJyYXkgdG8gbWluZ2xlCgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqMiBBcnJheSB0byBtaW5nbGUKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgIDJEIEFycmF5CgkgKi8KCW1pbmdsZSA6IGZ1bmN0aW9uICggb2JqMSwgb2JqMiApIHsKCQl2YXIgcmVzdWx0OwoKCQlyZXN1bHQgPSBvYmoxLm1hcCggZnVuY3Rpb24gKCBpLCBpZHggKSB7CgkJCXJldHVybiBbaSwgb2JqMltpZHhdXTsKCQl9KTsKCgkJcmV0dXJuIHJlc3VsdDsKCX0sCgoJLyoqCgkgKiBGaW5kcyB0aGUgbW9kZSB2YWx1ZSBvZiBhbiBBcnJheQoJICoKCSAqIEBtZXRob2QgbW9kZQoJICogQHBhcmFtICB7QXJyYXl9IG9iaiBBcnJheSB0byBwYXJzZQoJICogQHJldHVybiB7TWl4ZWR9ICAgICBNb2RlIHZhbHVlIG9mIHRoZSBBcnJheQoJICovCgltb2RlIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJdmFyIHZhbHVlcyA9IHt9LAoJCSAgICBjb3VudCAgPSAwLAoJCSAgICBudGggICAgPSAwLAoJCSAgICBtb2RlICAgPSBbXSwKCQkgICAgcmVzdWx0OwoKCQkvLyBDb3VudGluZyB2YWx1ZXMKCQlhcnJheS5lYWNoKCBvYmosIGZ1bmN0aW9uICggaSApIHsKCQkJaWYgKCAhaXNOYU4oIHZhbHVlc1tpXSApICkgewoJCQkJdmFsdWVzW2ldKys7CgkJCX0KCQkJZWxzZSB7CgkJCQl2YWx1ZXNbaV0gPSAxOwoJCQl9CgkJfSk7CgoJCS8vIEZpbmRpbmcgdGhlIGhpZ2hlc3Qgb2NjdXJyaW5nIGNvdW50CgkJY291bnQgPSBhcnJheS5tYXgoIGFycmF5LmNhc3QoIHZhbHVlcyApICk7CgoJCS8vIEZpbmRpbmcgdmFsdWVzIHRoYXQgbWF0Y2ggdGhlIGNvdW50CgkJdXRpbGl0eS5pdGVyYXRlKCB2YWx1ZXMsIGZ1bmN0aW9uICggdiwgayApIHsKCQkJaWYgKCB2ID09PSBjb3VudCApIHsKCQkJCW1vZGUucHVzaCggbnVtYmVyLnBhcnNlKCBrICkgKTsKCQkJfQoJCX0pOwoKCQkvLyBEZXRlcm1pbmluZyB0aGUgcmVzdWx0CgkJbnRoID0gbW9kZS5sZW5ndGg7CgoJCWlmICggbnRoID4gMCApIHsKCQkJcmVzdWx0ID0gbnRoID09PSAxID8gbW9kZVswXSA6IG1vZGU7CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIENyZWF0ZXMgYW4gQXJyYXkgb2YgcGVyY2VudGFnZXMgZnJvbSBhbiBBcnJheSBvZiBOdW1iZXJzIChpbnRzL2Zsb2F0cykKCSAqCgkgKiBAbWV0aG9kIHBlcmNlbnRzCgkgKiBAcGFyYW0gIHtBcnJheX0gIG9iaiAgICAgICBBcnJheSB0byBpdGVyYXRlCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IHByZWNpc2lvbiBbT3B0aW9uYWxdIFJvdW5kaW5nIHByZWNpc2lvbgoJICogQHBhcmFtICB7TnVtYmVyfSB0b3RhbCAgICAgW09wdGlvbmFsXSBWYWx1ZSB0byBjb21wYXJlIGFnYWluc3QKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgIEFycmF5IG9mIHBlcmNlbnRzCgkgKi8KCXBlcmNlbnRzIDogZnVuY3Rpb24gKCBvYmosIHByZWNpc2lvbiwgdG90YWwgKSB7CgkJdmFyIHJlc3VsdCA9IFtdLAoJCSAgICBjdXN0b20gPSBmYWxzZSwKCQkgICAgbGFzdCwgcGFkZGluZywgc3VtOwoKCQlwcmVjaXNpb24gPSBwcmVjaXNpb24gfHwgMDsKCQkKCQlpZiAoIHRvdGFsID09PSB1bmRlZmluZWQgKSB7CgkJCXRvdGFsID0gYXJyYXkuc3VtKCBvYmogKTsKCQl9CgkJZWxzZSB7CgkJCWN1c3RvbSA9IHRydWU7CgkJfQoKCQlhcnJheS5lYWNoKCBvYmosIGZ1bmN0aW9uICggaSApIHsKCQkJcmVzdWx0LnB1c2goIG51bWJlci5wYXJzZSggKCAoIGkgLyB0b3RhbCApICogMTAwICkudG9GaXhlZCggcHJlY2lzaW9uICkgKSApOwoJCX0gKTsKCgkJLy8gRGVhbGluZyB3aXRoIHRoZSBhd2Vzb21lbmVzcyBvZiBKYXZhU2NyaXB0ICJpbnRlZ2VycyIKCQlpZiAoICFjdXN0b20gKSB7CgkJCXN1bSA9IGFycmF5LnN1bSggcmVzdWx0ICk7CgoJCQlpZiAoIHN1bSA8IDEwMCApIHsKCQkJCXBhZGRpbmcgPSBudW1iZXIucGFyc2UoIG51bWJlci5kaWZmKCBzdW0sIDEwMCApLnRvRml4ZWQoIHByZWNpc2lvbiApICk7CgkJCQlsYXN0ICAgID0gYXJyYXkubGFzdCggcmVzdWx0ICkgKyBwYWRkaW5nOwoJCQkJcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSA9IGxhc3Q7CgkJCX0KCQkJZWxzZSBpZiAoIHN1bSA+IDEwMCApIHsKCQkJCXBhZGRpbmcgPSBudW1iZXIucGFyc2UoIG51bWJlci5kaWZmKCBzdW0sIDEwMCApLnRvRml4ZWQoIHByZWNpc2lvbiApICk7CgkJCQlsYXN0ICAgID0gbnVtYmVyLnBhcnNlKCAoIGFycmF5Lmxhc3QoIHJlc3VsdCApIC0gcGFkZGluZyApLnRvRml4ZWQoIHByZWNpc2lvbiApICk7CgkJCQlyZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdID0gbGFzdDsKCQkJfQoJCX0KCgkJcmV0dXJuIHJlc3VsdDsKCX0sCgoJLyoqCgkgKiBGaW5kcyB0aGUgcmFuZ2Ugb2YgdGhlIEFycmF5ICggb2YgbnVtYmVycyApIHZhbHVlcwoJICoKCSAqIEBtZXRob2QgcmFuZ2UKCSAqIEBwYXJhbSAge0FycmF5fSBvYmogQXJyYXkgdG8gcGFyc2UKCSAqIEByZXR1cm4ge051bWJlcn0gICAgUmFuZ2Ugb2YgdGhlIGFycmF5ICggZmxvYXQgb3IgaW50ZWdlciApCgkgKi8KCXJhbmdlIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIGFycmF5Lm1heCggb2JqICkgLSBhcnJheS5taW4oIG9iaiApOwoJfSwKCgkvKioKCSAqIFNlYXJjaGVzIGEgMkQgQXJyYXkgYG9iamAgZm9yIHRoZSBmaXJzdCBtYXRjaCBvZiBgYXJnYCBhcyBhIHNlY29uZCBpbmRleAoJICoKCSAqIEBtZXRob2QgcmFzc29jCgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIDJEIEFycmF5IHRvIHNlYXJjaAoJICogQHBhcmFtICB7TWl4ZWR9IGFyZyBQcmltaXRpdmUgdG8gZmluZAoJICogQHJldHVybiB7TWl4ZWR9ICAgICBBcnJheSBvciB1bmRlZmluZWQKCSAqLwoJcmFzc29jIDogZnVuY3Rpb24gKCBvYmosIGFyZyApIHsKCQl2YXIgcmVzdWx0OwoKCQlhcnJheS5lYWNoKCBvYmosIGZ1bmN0aW9uICggaSwgaWR4ICkgewoJCQlpZiAoIGlbMV0gPT09IGFyZyApIHsKCQkJCXJlc3VsdCA9IG9ialtpZHhdOwoKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0pOwoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIFJldHVybnMgQXJyYXkgY29udGFpbmluZyB0aGUgaXRlbXMgaW4gYG9iamAgZm9yIHdoaWNoIGBmbigpYCBpcyBub3QgdHJ1ZQoJICoKCSAqIEBtZXRob2QgcmVqZWN0CgkgKiBAcGFyYW0gIHtBcnJheX0gICAgb2JqIEFycmF5IHRvIGl0ZXJhdGUKCSAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgRnVuY3Rpb24gdG8gZXhlY3V0ZSBhZ2FpbnN0IGBvYmpgIGluZGljZXMKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgQXJyYXkgb2YgaW5kaWNlcyB3aGljaCBmbigpIGlzIG5vdCB0cnVlCgkgKi8KCXJlamVjdCA6IGZ1bmN0aW9uICggb2JqLCBmbiApIHsKCQlyZXR1cm4gYXJyYXkuZGlmZiggb2JqLCBvYmouZmlsdGVyKCBmbiApICk7Cgl9LAoJCgkvKioKCSAqIFJlcGxhY2VzIHRoZSBjb250ZW50cyBvZiBgb2JqYCB3aXRoIGBhcmdgCgkgKgoJICogQG1ldGhvZCByZXBsYWNlCgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIEFycmF5IHRvIG1vZGlmeQoJICogQHBhcmFtICB7QXJyYXl9IGFyZyBBcnJheSB0byBiZWNvbWUgYG9iamAKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgTmV3IHZlcnNpb24gb2YgYG9iamAKCSAqLwoJcmVwbGFjZSA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJYXJyYXkucmVtb3ZlKCBvYmosIDAsIG9iai5sZW5ndGggKTsKCQlhcnJheS5lYWNoKCBhcmcsIGZ1bmN0aW9uICggaSApIHsKCQkJb2JqLnB1c2goIGkgKTsKCQl9KTsKCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBSZW1vdmVzIGluZGljZXMgZnJvbSBhbiBBcnJheSB3aXRob3V0IHJlY3JlYXRpbmcgaXQKCSAqCgkgKiBAbWV0aG9kIHJlbW92ZQoJICogQHBhcmFtICB7QXJyYXl9ICBvYmogICBBcnJheSB0byByZW1vdmUgZnJvbQoJICogQHBhcmFtICB7TWl4ZWR9ICBzdGFydCBTdGFydGluZyBpbmRleCwgb3IgdmFsdWUgdG8gZmluZCB3aXRoaW4gb2JqCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IGVuZCAgIFtPcHRpb25hbF0gRW5kaW5nIGluZGV4CgkgKiBAcmV0dXJuIHtBcnJheX0gICAgICAgIE1vZGlmaWVkIEFycmF5CgkgKi8KCXJlbW92ZSA6IGZ1bmN0aW9uICggb2JqLCBzdGFydCwgZW5kICkgewoJCWlmICggaXNOYU4oIHN0YXJ0ICkgKSB7CgkJCXN0YXJ0ID0gb2JqLmluZGV4KCBzdGFydCApOwoKCQkJaWYgKCBzdGFydCA9PT0gLTEgKSB7CgkJCQlyZXR1cm4gb2JqOwoJCQl9CgkJfQoJCWVsc2UgewoJCQlzdGFydCA9IHN0YXJ0IHx8IDA7CgkJfQoKCQl2YXIgbGVuZ3RoICAgID0gb2JqLmxlbmd0aCwKCQkgICAgcmVtYWluaW5nID0gb2JqLnNsaWNlKCAoIGVuZCB8fCBzdGFydCApICsgMSB8fCBsZW5ndGggKTsKCgkJb2JqLmxlbmd0aCA9IHN0YXJ0IDwgMCA/ICggbGVuZ3RoICsgc3RhcnQgKSA6IHN0YXJ0OwoJCW9iai5wdXNoLmFwcGx5KCBvYmosIHJlbWFpbmluZyApOwoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIERlbGV0ZXMgZXZlcnkgZWxlbWVudCBvZiBgb2JqYCBmb3Igd2hpY2ggYGZuYCBldmFsdWF0ZXMgdG8gdHJ1ZQoJICoKCSAqIEBtZXRob2QgcmVtb3ZlSWYKCSAqIEBwYXJhbSAge0FycmF5fSAgICBvYmogQXJyYXkgdG8gaXRlcmF0ZQoJICogQHBhcmFtICB7RnVuY3Rpb259IGZuICBGdW5jdGlvbiB0byB0ZXN0IGluZGljZXMgYWdhaW5zdAoJICogQHJldHVybiB7QXJyYXl9ICAgICAgICBBcnJheQoJICovCglyZW1vdmVJZiA6IGZ1bmN0aW9uICggb2JqLCBmbiApIHsKCQl2YXIgcmVtb3ZlOwoKCQlpZiAoIHR5cGVvZiBmbiAhPT0gImZ1bmN0aW9uIiApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJfQoKCQlyZW1vdmUgPSBvYmouZmlsdGVyKCBmbiApOwoKCQlhcnJheS5lYWNoKCByZW1vdmUsIGZ1bmN0aW9uICggaSApIHsKCQkJYXJyYXkucmVtb3ZlKCBvYmosIGFycmF5LmluZGV4ICggb2JqLCBpICkgKTsKCQl9KTsKCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBEZWxldGVzIGVsZW1lbnRzIG9mIGBvYmpgIHVudGlsIGBmbmAgZXZhbHVhdGVzIHRvIGZhbHNlCgkgKgoJICogQG1ldGhvZCByZW1vdmVXaGlsZQoJICogQHBhcmFtICB7QXJyYXl9ICAgIG9iaiBBcnJheSB0byBpdGVyYXRlCgkgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gIEZ1bmN0aW9uIHRvIHRlc3QgaW5kaWNlcyBhZ2FpbnN0CgkgKiBAcmV0dXJuIHtBcnJheX0gICAgICAgIEFycmF5CgkgKi8KCXJlbW92ZVdoaWxlIDogZnVuY3Rpb24gKCBvYmosIGZuICkgewoJCWlmICggdHlwZW9mIGZuICE9PSAiZnVuY3Rpb24iICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCQl9CgoJCXZhciByZW1vdmUgPSBbXTsKCgkJYXJyYXkuZWFjaCggb2JqLCBmdW5jdGlvbiAoIGkgKSB7CgkJCWlmICggZm4oIGkgKSAhPT0gZmFsc2UgKSB7CgkJCQlyZW1vdmUucHVzaCggaSApOwoJCQl9CgkJCWVsc2UgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfSk7CgoJCWFycmF5LmVhY2goIHJlbW92ZSwgZnVuY3Rpb24gKCBpICkgewoJCQlhcnJheS5yZW1vdmUoIG9iaiwgYXJyYXkuaW5kZXgoIG9iaiwgaSkgKTsKCQl9KTsKCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBSZXR1cm5zIHRoZSAicmVzdCIgb2YgYG9iamAgZnJvbSBgYXJnYAoJICoKCSAqIEBtZXRob2QgcmVzdAoJICogQHBhcmFtICB7QXJyYXl9ICBvYmogQXJyYXkgdG8gcGFyc2UKCSAqIEBwYXJhbSAge051bWJlcn0gYXJnIFtPcHRpb25hbF0gU3RhcnQgcG9zaXRpb24gb2Ygc3Vic2V0IG9mIGBvYmpgICggcG9zaXRpdmUgbnVtYmVyIG9ubHkgKQoJICogQHJldHVybiB7QXJyYXl9ICAgICAgQXJyYXkgb2YgYSBzdWJzZXQgb2YgYG9iamAKCSAqLwoJcmVzdCA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJYXJnID0gYXJnIHx8IDE7CgoJCWlmICggYXJnIDwgMSApIHsKCQkJYXJnID0gMTsKCQl9CgoJCXJldHVybiBhcnJheS5saW1pdCggb2JqLCBhcmcsIG9iai5sZW5ndGggKTsKCX0sCgoJLyoqCgkgKiBGaW5kcyB0aGUgbGFzdCBpbmRleCBvZiBgYXJnYCBpbiBgb2JqYAoJICoKCSAqIEBtZXRob2QgcmluZGV4CgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIEFycmF5IHRvIHNlYXJjaAoJICogQHBhcmFtICB7TWl4ZWR9IGFyZyBQcmltaXRpdmUgdG8gZmluZAoJICogQHJldHVybiB7TWl4ZWR9ICAgICBJbmRleCBvciB1bmRlZmluZWQKCSAqLwoJcmluZGV4IDogZnVuY3Rpb24gKCBvYmosIGFyZyApIHsKCQl2YXIgcmVzdWx0ID0gLTE7CgoJCWFycmF5LmVhY2goIG9iaiwgZnVuY3Rpb24gKCBpLCBpZHggKSB7CgkJCWlmICggaSA9PT0gYXJnICkgewoJCQkJcmVzdWx0ID0gaWR4OwoJCQl9CgkJfSk7CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogUmV0dXJucyBuZXcgQXJyYXkgd2l0aCBgYXJnYCBtb3ZlZCB0byB0aGUgZmlyc3QgaW5kZXgKCSAqCgkgKiBAbWV0aG9kIHJvdGF0ZQoJICogQHBhcmFtICB7QXJyYXl9ICBvYmogQXJyYXkgdG8gcm90YXRlCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IGFyZyBJbmRleCB0byBiZWNvbWUgdGhlIGZpcnN0IGluZGV4LCBpZiBuZWdhdGl2ZSB0aGUgcm90YXRpb24gaXMgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbgoJICogQHJldHVybiB7QXJyYXl9ICAgICAgTmV3bHkgcm90YXRlZCBBcnJheQoJICovCglyb3RhdGUgOiBmdW5jdGlvbiAoIG9iaiwgYXJnICkgewoJCXZhciBudGggPSBvYmoubGVuZ3RoLAoJCSAgICByZXN1bHQ7CgoJCWlmICggYXJnID09PSAwICkgewoJCQlyZXN1bHQgPSBvYmo7CgkJfQoJCWVsc2UgewoJCQlpZiAoIGFyZyA8IDAgKSB7CgkJCQlhcmcgKz0gbnRoOwoJCQl9CgkJCWVsc2UgewoJCQkJYXJnLS07CgkJCX0KCgkJCXJlc3VsdCA9IGFycmF5LmxpbWl0KCBvYmosIGFyZywgbnRoICk7CgkJCXJlc3VsdCA9IHJlc3VsdC5jb25jYXQoIGFycmF5LmxpbWl0KCBvYmosIDAsIGFyZyApICk7CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIEdlbmVyYXRlcyBhIHNlcmllcyBBcnJheQoJICoKCSAqIEBtZXRob2Qgc2VyaWVzCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IHN0YXJ0ICBTdGFydCB2YWx1ZSB0aGUgc2VyaWVzCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IGVuZCAgICBbT3B0aW9uYWxdIFRoZSBlbmQgb2YgdGhlIHNlcmllcwoJICogQHBhcmFtICB7TnVtYmVyfSBvZmZzZXQgW09wdGlvbmFsXSBPZmZzZXQgZm9yIGluZGljZXMsIGRlZmF1bHQgaXMgMQoJICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgQXJyYXkgb2YgbmV3IHNlcmllcwoJICovCglzZXJpZXMgOiBmdW5jdGlvbiAoIHN0YXJ0LCBlbmQsIG9mZnNldCApIHsKCQlzdGFydCAgICAgID0gc3RhcnQgIHx8IDA7CgkJZW5kICAgICAgICA9IGVuZCAgICB8fCBzdGFydDsKCQlvZmZzZXQgICAgID0gb2Zmc2V0IHx8IDE7CgkJdmFyIHJlc3VsdCA9IFtdLAoJCSAgICBuICAgICAgPSAtMSwKCQkgICAgbnRoICAgID0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbCggKCBlbmQgLSBzdGFydCApIC8gb2Zmc2V0ICkgKTsKCgkJd2hpbGUgKCArK24gPCBudGggKSB7CgkJCXJlc3VsdFtuXSAgPSBzdGFydDsKCQkJc3RhcnQgICAgICs9IG9mZnNldDsKCQl9CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogU3BsaXRzIGFuIEFycmF5IGJ5IGRpdmlzb3IKCSAqCgkgKiBAbWV0aG9kIHNwbGl0CgkgKiBAcGFyYW0gIHtBcnJheX0gIG9iaiAgICAgQXJyYXkgdG8gcGFyc2UKCSAqIEBwYXJhbSAge051bWJlcn0gZGl2aXNvciBJbnRlZ2VyIHRvIGRpdmlkZSB0aGUgQXJyYXkgYnkKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBTcGxpdCBBcnJheQoJICovCglzcGxpdCA6IGZ1bmN0aW9uICggb2JqLCBkaXZpc29yICkgewoJCXZhciByZXN1bHQgID0gW10sCgkJICAgIHRvdGFsICAgPSBvYmoubGVuZ3RoLAoJCSAgICBudGggICAgID0gTWF0aC5jZWlsKCB0b3RhbCAvIGRpdmlzb3IgKSwKCQkgICAgbG93ICAgICA9IE1hdGguZmxvb3IoIHRvdGFsIC8gZGl2aXNvciApLAoJCSAgICBsb3dlciAgID0gTWF0aC5jZWlsKCB0b3RhbCAvIG50aCApLAoJCSAgICBsb3dlcmVkID0gZmFsc2UsCgkJICAgIHN0YXJ0ICAgPSAwLAoJCSAgICBpICAgICAgID0gLTE7CgoJCS8vIEZpbmRpbmcgdGhlIGZvbGQKCQlpZiAoIG51bWJlci5kaWZmKCB0b3RhbCwgKCBkaXZpc29yICogbnRoICkgKSA+IG50aCApIHsKCQkJbG93ZXIgPSB0b3RhbCAtICggbG93ICogZGl2aXNvciApICsgbG93IC0gMTsKCQl9CgkJZWxzZSBpZiAoIHRvdGFsICUgZGl2aXNvciA+IDAgJiYgbG93ZXIgKiBudGggPj0gdG90YWwgKSB7CgkJCWxvd2VyLS07CgkJfQoKCQl3aGlsZSAoICsraSA8IGRpdmlzb3IgKSB7CgkJCWlmICggaSA+IDAgKSB7CgkJCQlzdGFydCA9IHN0YXJ0ICsgbnRoOwoJCQl9CgoJCQlpZiAoICFsb3dlcmVkICYmIGxvd2VyIDwgZGl2aXNvciAmJiBpID09PSBsb3dlciApIHsKCQkJCS0tbnRoOwoJCQkJbG93ZXJlZCA9IHRydWU7CgkJCX0KCgkJCXJlc3VsdC5wdXNoKCBhcnJheS5saW1pdCggb2JqLCBzdGFydCwgbnRoICkgKTsKCQl9CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogU29ydHMgdGhlIEFycmF5IGJ5IHBhcnNpbmcgdmFsdWVzCgkgKgoJICogQG1ldGhvZCBzb3J0CgkgKiBAcGFyYW0gIHtNaXhlZH0gYSBBcmd1bWVudCB0byBjb21wYXJlCgkgKiBAcGFyYW0gIHtNaXhlZH0gYiBBcmd1bWVudCB0byBjb21wYXJlCgkgKiBAcmV0dXJuIHtOdW1iZXJ9ICBOdW1iZXIgaW5kaWNhdGluZyBzb3J0IG9yZGVyCgkgKi8KCXNvcnQgOiBmdW5jdGlvbiAoIGEsIGIgKSB7CgkJdmFyIHR5cGVzID0ge2E6IHR5cGVvZiBhLCBiOiB0eXBlb2YgYn0sCgkJICAgIGMsIGQsIHJlc3VsdDsKCgkJaWYgKCB0eXBlcy5hID09PSAibnVtYmVyIiAmJiB0eXBlcy5iID09PSAibnVtYmVyIiApIHsKCQkJcmVzdWx0ID0gYSAtIGI7CgkJfQoJCWVsc2UgewoJCQljID0gYS50b1N0cmluZygpOwoJCQlkID0gYi50b1N0cmluZygpOwoKCQkJaWYgKCBjIDwgZCApIHsKCQkJCXJlc3VsdCA9IC0xOwoJCQl9CgkJCWVsc2UgaWYgKCBjID4gZCApIHsKCQkJCXJlc3VsdCA9IDE7CgkJCX0KCQkJZWxzZSBpZiAoIHR5cGVzLmEgPT09IHR5cGVzLmIgKSB7CgkJCQlyZXN1bHQgPSAwOwoJCQl9CgkJCWVsc2UgaWYgKCB0eXBlcy5hID09PSAiYm9vbGVhbiIgKSB7CgkJCQlyZXN1bHQgPSAtMTsKCQkJfQoJCQllbHNlIHsKCQkJCXJlc3VsdCA9IDE7CgkJCX0KCQl9CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogU29ydHMgYG9iamAgdXNpbmcgYGFycmF5LnNvcnRgCgkgKgoJICogQG1ldGhvZCBzb3J0ZWQKCSAqIEBwYXJhbSAge0FycmF5fSBvYmogQXJyYXkgdG8gc29ydAoJICogQHJldHVybiB7QXJyYXl9ICAgICBTb3J0ZWQgQXJyYXkKCSAqLwoJc29ydGVkIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5zb3J0KCBhcnJheS5zb3J0ICk7Cgl9LAoKCS8qKgoJICogRmluZHMgdGhlIHN0YW5kYXJkIGRldmlhdGlvbiBvZiBhbiBBcnJheSAoIG9mIG51bWJlcnMgKQoJICoKCSAqIEBtZXRob2Qgc3RkZGV2CgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIEFycmF5IHRvIHBhcnNlCgkgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgIFN0YW5kYXJkIGRldmlhdGlvbiBvZiB0aGUgQXJyYXkgKCBmbG9hdCBvciBpbnRlZ2VyICkKCSAqLwoJc3RkZGV2IDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIE1hdGguc3FydCggYXJyYXkudmFyaWFuY2UoIG9iaiApICk7Cgl9LAoKCS8qKgoJICogR2V0cyB0aGUgc3VtbWF0aW9uIG9mIGFuIEFycmF5IG9mIG51bWJlcnMKCSAqCgkgKiBAbWV0aG9kIHN1bQoJICogQHBhcmFtICB7QXJyYXl9IG9iaiBBcnJheSB0byBzdW0KCSAqIEByZXR1cm4ge051bWJlcn0gICAgU3VtbWF0aW9uIG9mIEFycmF5CgkgKi8KCXN1bSA6IGZ1bmN0aW9uICggb2JqICkgewoJCXZhciByZXN1bHQgPSAwOwoKCQlpZiAoIG9iai5sZW5ndGggPiAwICkgewoJCQlyZXN1bHQgPSBvYmoucmVkdWNlKCBmdW5jdGlvbiAoIHByZXYsIGN1ciApIHsKCQkJCXJldHVybiBwcmV2ICsgY3VyOwoJCQl9KTsKCQl9CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogVGFrZXMgdGhlIGZpcnN0IGBhcmdgIGluZGljZXMgZnJvbSBgb2JqYAoJICoKCSAqIEBtZXRob2QgdGFrZQoJICogQHBhcmFtICB7QXJyYXl9ICBvYmogQXJyYXkgdG8gcGFyc2UKCSAqIEBwYXJhbSAge051bWJlcn0gYXJnIE9mZnNldCBmcm9tIDAgdG8gcmV0dXJuCgkgKiBAcmV0dXJuIHtBcnJheX0gICAgICBTdWJzZXQgb2YgYG9iamAKCSAqLwoJdGFrZSA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJcmV0dXJuIGFycmF5LmxpbWl0KCBvYmosIDAsIGFyZyApOwoJfSwKCgkvKioKCSAqIEdldHMgdGhlIHRvdGFsIGtleXMgaW4gYW4gQXJyYXkKCSAqCgkgKiBAbWV0aG9kIHRvdGFsCgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIEFycmF5IHRvIGZpbmQgdGhlIGxlbmd0aCBvZgoJICogQHJldHVybiB7TnVtYmVyfSAgICBOdW1iZXIgb2Yga2V5cyBpbiBBcnJheQoJICovCgl0b3RhbCA6IGZ1bmN0aW9uICggb2JqICkgewoJCXJldHVybiBhcnJheS5pbmRleGVkKCBvYmogKS5sZW5ndGg7Cgl9LAoKCS8qKgoJICogQ2FzdHMgYW4gQXJyYXkgdG8gT2JqZWN0CgkgKgoJICogQG1ldGhvZCB0b09iamVjdAoJICogQHBhcmFtICB7QXJyYXl9IGFyIEFycmF5IHRvIHRyYW5zZm9ybQoJICogQHJldHVybiB7T2JqZWN0fSAgIE5ldyBvYmplY3QKCSAqLwoJdG9PYmplY3QgOiBmdW5jdGlvbiAoIGFyICkgewoJCXZhciBvYmogPSB7fSwKCQkgICAgaSAgID0gYXIubGVuZ3RoOwoKCQl3aGlsZSAoIGktLSApIHsKCQkJb2JqW2kudG9TdHJpbmcoKV0gPSBhcltpXTsKCQl9CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8qKgoJICogUmV0dXJucyBhbiBBcnJheSBvZiB1bmlxdWUgaW5kaWNlcyBvZiBgb2JqYAoJICoKCSAqIEBtZXRob2QgdW5pcXVlCgkgKiBAcGFyYW0gIHtBcnJheX0gb2JqIEFycmF5IHRvIHBhcnNlCgkgKiBAcmV0dXJuIHtBcnJheX0gICAgIEFycmF5IG9mIHVuaXF1ZSBpbmRpY2VzCgkgKi8KCXVuaXF1ZSA6IGZ1bmN0aW9uICggb2JqICkgewoJCXZhciByZXN1bHQgPSBbXTsKCgkJYXJyYXkuZWFjaCggb2JqLCBmdW5jdGlvbiAoIGkgKSB7CgkJCWFycmF5LmFkZCggcmVzdWx0LCBpICk7CgkJfSk7CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogRmluZHMgdGhlIHZhcmlhbmNlIG9mIGFuIEFycmF5ICggb2YgbnVtYmVycyApCgkgKgoJICogQG1ldGhvZCB2YXJpYW5jZQoJICogQHBhcmFtICB7QXJyYXl9IG9iaiBBcnJheSB0byBwYXJzZQoJICogQHJldHVybiB7TnVtYmVyfSAgICBWYXJpYW5jZSBvZiB0aGUgQXJyYXkgKCBmbG9hdCBvciBpbnRlZ2VyICkKCSAqLwoJdmFyaWFuY2UgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQl2YXIgbnRoID0gb2JqLmxlbmd0aCwKCQkgICAgbiAgID0gMCwKCQkgICAgbWVhbjsKCgkJaWYgKCBudGggPiAwICkgewoJCQltZWFuID0gYXJyYXkubWVhbiggb2JqICk7CgoJCQlhcnJheS5lYWNoKCBvYmosIGZ1bmN0aW9uICggaSApIHsKCQkJCW4gKz0gbWF0aC5zcXIoIGkgLSBtZWFuICk7CgkJCX0gKTsKCgkJCXJldHVybiBuIC8gbnRoOwoJCX0KCQllbHNlIHsKCQkJcmV0dXJuIG47CgkJfQoJfSwKCgkvKioKCSAqIENvbnZlcnRzIGFueSBhcmd1bWVudHMgdG8gQXJyYXlzLCB0aGVuIG1lcmdlcyBlbGVtZW50cyBvZiBgb2JqYCB3aXRoIGNvcnJlc3BvbmRpbmcgZWxlbWVudHMgZnJvbSBlYWNoIGFyZ3VtZW50CgkgKgoJICogQG1ldGhvZCB6aXAKCSAqIEBwYXJhbSAge0FycmF5fSBvYmogIEFycmF5IHRvIHRyYW5zZm9ybQoJICogQHBhcmFtICB7TWl4ZWR9IGFyZ3MgQXJndW1lbnQgaW5zdGFuY2Ugb3IgQXJyYXkgdG8gbWVyZ2UKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgIEFycmF5CgkgKi8KCXppcCA6IGZ1bmN0aW9uICggb2JqLCBhcmdzICkgewoJCXZhciByZXN1bHQgPSBbXTsKCgkJLy8gUHJlcGFyaW5nIGFyZ3MKCQlpZiAoICEoYXJncyBpbnN0YW5jZW9mIEFycmF5KSApIHsKCQkJYXJncyA9IHR5cGVvZiBhcmdzID09PSAib2JqZWN0IiA/IGFycmF5LmNhc3QoIGFyZ3MgKSA6IFthcmdzXTsKCQl9CgoJCWFycmF5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uICggaSwgaWR4ICkgewoJCQlpZiAoICEoIGkgaW5zdGFuY2VvZiBBcnJheSApICkgewoJCQkJdGhpc1tpZHhdID0gW2ldOwoJCQl9CgkJfSk7CgoJCS8vIEJ1aWxkaW5nIHJlc3VsdCBBcnJheQoJCWFycmF5LmVhY2goIG9iaiwgZnVuY3Rpb24gKCBpLCBpZHggKSB7CgkJCXJlc3VsdFtpZHhdID0gW2ldOwoJCQlhcnJheS5lYWNoKCBhcmdzLCBmdW5jdGlvbiAoIHggKSB7CgkJCQlyZXN1bHRbaWR4XS5wdXNoKCB4W2lkeF0gfHwgbnVsbCApOwoJCQl9KTsKCQl9KTsKCgkJcmV0dXJuIHJlc3VsdDsKCX0KfTsKCi8qKiBAbmFtZXNwYWNlIGNhY2hlICovCnZhciBjYWNoZSA9IHsKCS8vIENvbGxlY3Rpb24gVVJJcwoJaXRlbXMgOiB7fSwKCgkvKioKCSAqIEdhcmJhZ2UgY29sbGVjdG9yIGZvciB0aGUgY2FjaGVkIGl0ZW1zCgkgKgoJICogQG1ldGhvZCBjbGVhbgoJICogQHByaXZhdGUKCSAqIEByZXR1cm4ge1VuZGVmaW5lZH0gdW5kZWZpbmVkCgkgKi8KCWNsZWFuIDogZnVuY3Rpb24gKCkgewoJCXJldHVybiB1dGlsaXR5Lml0ZXJhdGUoIGNhY2hlLml0ZW1zLCBmdW5jdGlvbiAoIHYsIGsgKSB7CgkJCWlmICggY2FjaGUuZXhwaXJlZCggayApICkgewoJCQkJY2FjaGUuZXhwaXJlKCBrLCB0cnVlICk7CgkJCX0KCQl9KTsKCX0sCgoJLyoqCgkgKiBFeHBpcmVzIGEgVVJJIGZyb20gdGhlIGxvY2FsIGNhY2hlCgkgKgoJICogRXZlbnRzOiBleHBpcmUgICAgRmlyZXMgd2hlbiB0aGUgVVJJIGV4cGlyZXMKCSAqCgkgKiBAbWV0aG9kIGV4cGlyZQoJICogQHByaXZhdGUKCSAqIEBwYXJhbSAge1N0cmluZ30gIHVyaSAgICBVUkkgb2YgdGhlIGxvY2FsIHJlcHJlc2VudGF0aW9uCgkgKiBAcGFyYW0gIHtCb29sZWFufSBzaWxlbnQgW09wdGlvbmFsXSBJZiAndHJ1ZScsIHRoZSBldmVudCB3aWxsIG5vdCBmaXJlCgkgKiBAcmV0dXJuIHtVbmRlZmluZWR9ICAgICAgdW5kZWZpbmVkCgkgKi8KCWV4cGlyZSA6IGZ1bmN0aW9uICggdXJpLCBzaWxlbnQgKSB7CgkJc2lsZW50ID0gKCBzaWxlbnQgPT09IHRydWUgKTsKCQlpZiAoIGNhY2hlLml0ZW1zW3VyaV0gIT09IHVuZGVmaW5lZCApIHsKCQkJZGVsZXRlIGNhY2hlLml0ZW1zW3VyaV07CgoJCQlpZiAoICFzaWxlbnQgKSB7CgkJCQlvYnNlcnZlci5maXJlKCB1cmksICJiZWZvcmVFeHBpcmUsIGV4cGlyZSwgYWZ0ZXJFeHBpcmUiICk7CgkJCX0KCgkJCXJldHVybiB0cnVlOwoJCX0KCQllbHNlIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0sCgoJLyoqCgkgKiBEZXRlcm1pbmVzIGlmIGEgVVJJIGhhcyBleHBpcmVkCgkgKgoJICogQG1ldGhvZCBleHBpcmVkCgkgKiBAcHJpdmF0ZQoJICogQHBhcmFtICB7T2JqZWN0fSB1cmkgQ2FjaGVkIFVSSSBvYmplY3QKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgIFRydWUgaWYgdGhlIFVSSSBoYXMgZXhwaXJlZAoJICovCglleHBpcmVkIDogZnVuY3Rpb24gKCB1cmkgKSB7CgkJdmFyIGl0ZW0gPSBjYWNoZS5pdGVtc1t1cmldOwoKCQlyZXR1cm4gaXRlbSAhPT0gdW5kZWZpbmVkICYmIGl0ZW0uZXhwaXJlcyAhPT0gdW5kZWZpbmVkICYmIGl0ZW0uZXhwaXJlcyA8IG5ldyBEYXRlKCk7Cgl9LAoKCS8qKgoJICogUmV0dXJucyB0aGUgY2FjaGVkIG9iamVjdCB7aGVhZGVycywgcmVzcG9uc2V9IG9mIHRoZSBVUkkgb3IgZmFsc2UKCSAqCgkgKiBAbWV0aG9kIGdldAoJICogQHByaXZhdGUKCSAqIEBwYXJhbSAge1N0cmluZ30gIHVyaSAgICBVUkkvSWRlbnRpZmllciBmb3IgdGhlIHJlc291cmNlIHRvIHJldHJpZXZlIGZyb20gY2FjaGUKCSAqIEBwYXJhbSAge0Jvb2xlYW59IGV4cGlyZSBbT3B0aW9uYWxdIElmICdmYWxzZScgdGhlIFVSSSB3aWxsIG5vdCBleHBpcmUKCSAqIEBwYXJhbSAge0Jvb2xlYW59IHNpbGVudCBbT3B0aW9uYWxdIElmICd0cnVlJywgdGhlIGV2ZW50IHdpbGwgbm90IGZpcmUKCSAqIEByZXR1cm4ge01peGVkfSAgICAgICAgICBVUkkgT2JqZWN0IHtoZWFkZXJzLCByZXNwb25zZX0gb3IgRmFsc2UKCSAqLwoJZ2V0IDogZnVuY3Rpb24gKCB1cmksIGV4cGlyZSApIHsKCQl1cmkgICAgPSB1dGlsaXR5LnBhcnNlKCB1cmkgKS5ocmVmOwoJCWV4cGlyZSA9ICggZXhwaXJlICE9PSBmYWxzZSApOwoKCQlpZiAoIGNhY2hlLml0ZW1zW3VyaV0gPT09IHVuZGVmaW5lZCApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJaWYgKCBleHBpcmUgJiYgY2FjaGUuZXhwaXJlZCggdXJpICkgKSB7CgkJCWNhY2hlLmV4cGlyZSggdXJpICk7CgoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlyZXR1cm4gdXRpbGl0eS5jbG9uZSggY2FjaGUuaXRlbXNbdXJpXSwgdHJ1ZSApOwoJfSwKCgkvKioKCSAqIFNldHMsIG9yIHVwZGF0ZXMgYW4gaXRlbSBpbiBjYWNoZS5pdGVtcwoJICoKCSAqIEBtZXRob2Qgc2V0CgkgKiBAcHJpdmF0ZQoJICogQHBhcmFtICB7U3RyaW5nfSB1cmkgICAgICBVUkkgdG8gc2V0IG9yIHVwZGF0ZQoJICogQHBhcmFtICB7U3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBvZiB0aGUgY2FjaGVkIFVSSSB0byBzZXQKCSAqIEBwYXJhbSAge01peGVkfSB2YWx1ZSAgICAgVmFsdWUgdG8gc2V0CgkgKiBAcmV0dXJuIHtNaXhlZH0gICAgICAgICAgIFVSSSBPYmplY3Qge2hlYWRlcnMsIHJlc3BvbnNlfSBvciB1bmRlZmluZWQKCSAqLwoJc2V0IDogZnVuY3Rpb24gKCB1cmksIHByb3BlcnR5LCB2YWx1ZSApIHsKCQl1cmkgPSB1dGlsaXR5LnBhcnNlKCB1cmkgKS5ocmVmOwoKCQlpZiAoIGNhY2hlLml0ZW1zW3VyaV0gPT09IHVuZGVmaW5lZCApIHsKCQkJY2FjaGUuaXRlbXNbdXJpXSA9IHt9OwoJCQljYWNoZS5pdGVtc1t1cmldLnBlcm1pc3Npb24gPSAwOwoJCX0KCgkJaWYgKCBwcm9wZXJ0eSA9PT0gInBlcm1pc3Npb24iICkgewoJCQljYWNoZS5pdGVtc1t1cmldLnBlcm1pc3Npb24gfD0gdmFsdWU7CgkJfQoJCWVsc2UgaWYgKCBwcm9wZXJ0eSA9PT0gIiFwZXJtaXNzaW9uIiApIHsKCQkJY2FjaGUuaXRlbXNbdXJpXS5wZXJtaXNzaW9uICY9IH52YWx1ZTsKCQl9CgkJZWxzZSB7CgkJCWNhY2hlLml0ZW1zW3VyaV1bcHJvcGVydHldID0gdmFsdWU7CgkJfQoKCQlyZXR1cm4gY2FjaGUuaXRlbXNbdXJpXTsKCX0KfTsKCi8qKgogKiBDaGFubmVsIGZhY3RvcnkKICoKICogQG1ldGhvZCBjaGFubmVsCiAqIEByZXR1cm4ge09iamVjdH0gQ2hhbm5lbCBpbnN0YW5jZQogKi8KdmFyIGNoYW5uZWwgPSBmdW5jdGlvbiAoKSB7CglyZXR1cm4gbmV3IENoYW5uZWwoKTsKfTsKCi8qKgogKiBDaGFubmVsCiAqCiAqIEBjb25zdHJ1Y3RvcgogKiBAcmV0dXJuIHtPYmplY3R9IENoYW5uZWwgaW5zdGFuY2UKICovCmZ1bmN0aW9uIENoYW5uZWwgKCkgewoJdGhpcy5xdWV1ZSA9IFtdOwp9CgovLyBTZXR0aW5nIGNvbnN0cnVjdG9yIGxvb3AKQ2hhbm5lbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaGFubmVsOwoKLyoqCiAqIFB1dHMgYW4gaXRlbSBpbnRvIHRoZSBDaGFubmVsCiAqCiAqIEBtZXRob2QgcHV0CiAqIEBwYXJhbSAge01peGVkfSBhcmcgSXRlbQogKiBAcmV0dXJuIHtPYmplY3R9ICAgICBEZWZlcnJlZCBpbnN0YW5jZQogKi8KQ2hhbm5lbC5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKCBhcmcgKSB7Cgl2YXIgZGVmZXIgPSBkZWZlcnJlZCgpOwoKCWlmICggdGhpcy5xdWV1ZS5sZW5ndGggPT09IDAgKSB7CgkJdGhpcy5xdWV1ZS5wdXNoKCBhcmcgKTsKCgkJZGVmZXIucmVzb2x2ZSggWyJjb250aW51ZSIsIG51bGxdICk7Cgl9CgllbHNlIHsKCQlkZWZlci5yZXNvbHZlKCBbInBhdXNlIiwgbnVsbF0gKTsKCX0KCglyZXR1cm4gZGVmZXI7Cn07CgovKioKICogVGFrZXMgYW4gaXRlbSBmcm9tIHRoZSBDaGFubmVsCiAqCiAqIEBtZXRob2QgdGFrZQogKiBAcmV0dXJuIHtPYmplY3R9IERlZmVycmVkIGluc3RhbmNlCiAqLwpDaGFubmVsLnByb3RvdHlwZS50YWtlID0gZnVuY3Rpb24gKCkgewoJdmFyIGRlZmVyID0gZGVmZXJyZWQoKTsKCglpZiAoIHRoaXMucXVldWUubGVuZ3RoID09PSAwICkgewoJCWRlZmVyLnJlc29sdmUoIFsicGF1c2UiLCBudWxsXSApOwoJfQoJZWxzZSB7CgkJZGVmZXIucmVzb2x2ZSggWyJjb250aW51ZSIsIHRoaXMucXVldWUucG9wKCldICk7Cgl9CgoJcmV0dXJuIGRlZmVyOwp9OwoKLyoqIEBuYW1lc3BhY2UgY2xpZW50ICovCnZhciBjbGllbnQgPSB7CgkvKioKCSAqIEFjdGl2ZVggc3VwcG9ydAoJICoKCSAqIEB0eXBlIHtCb29sZWFufQoJICovCglhY3RpdmV4IDogZnVuY3Rpb24gKCkgewoJCXZhciByZXN1bHQgPSBmYWxzZSwKCQkgICAgb2JqOwoKCQlpZiAoIHR5cGVvZiBBY3RpdmVYT2JqZWN0ICE9PSAidW5kZWZpbmVkIiApIHsKCQkJdHJ5IHsKCQkJCW9iaiAgICA9IG5ldyBBY3RpdmVYT2JqZWN0KCAiTWljcm9zb2Z0LlhNTEhUVFAiICk7CgkJCQlyZXN1bHQgPSB0cnVlOwoJCQl9CgkJCWNhdGNoICggZSApIHt9CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfSgpLAoKCS8qKgoJICogQW5kcm9pZCBwbGF0Zm9ybQoJICoKCSAqIEB0eXBlIHtCb29sZWFufQoJICovCglhbmRyb2lkIDogZnVuY3Rpb24gKCkgewoJCXJldHVybiAhc2VydmVyICYmIHJlZ2V4LmFuZHJvaWQudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApOwoJfSgpLAoKCS8qKgoJICogQmxhY2tiZXJyeSBwbGF0Zm9ybQoJICoKCSAqIEB0eXBlIHtCb29sZWFufQoJICovCglibGFja2JlcnJ5IDogZnVuY3Rpb24gKCkgewoJCXJldHVybiAhc2VydmVyICYmIHJlZ2V4LmJsYWNrYmVycnkudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApOwoJfSgpLAoKCS8qKgoJICogQ2hyb21lIGJyb3dzZXIKCSAqCgkgKiBAdHlwZSB7Qm9vbGVhbn0KCSAqLwoJY2hyb21lIDogZnVuY3Rpb24gKCkgewoJCXJldHVybiAhc2VydmVyICYmIHJlZ2V4LmNocm9tZS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICk7Cgl9KCksCgoJLyoqCgkgKiBGaXJlZm94IGJyb3dzZXIKCSAqCgkgKiBAdHlwZSB7Qm9vbGVhbn0KCSAqLwoJZmlyZWZveCA6IGZ1bmN0aW9uICgpIHsKCQlyZXR1cm4gIXNlcnZlciAmJiByZWdleC5maXJlZm94LnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQgKTsKCX0oKSwKCgkvKioKCSAqIEludGVybmV0IEV4cGxvcmVyIGJyb3dzZXIKCSAqCgkgKiBAdHlwZSB7Qm9vbGVhbn0KCSAqLwoJaWUgOiBmdW5jdGlvbiAoKSB7CgkJcmV0dXJuICFzZXJ2ZXIgJiYgcmVnZXguaWUudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApOwoJfSgpLAoKCS8qKgoJICogaU9TIHBsYXRmb3JtCgkgKgoJICogQHR5cGUge0Jvb2xlYW59CgkgKi8KCWlvcyA6IGZ1bmN0aW9uICgpIHsKCQlyZXR1cm4gIXNlcnZlciAmJiByZWdleC5pb3MudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApOwoJfSgpLAoKCS8qKgoJICogTGludXggUGxhdGZvcm0KCSAqCgkgKiBAdHlwZSB7Qm9vbGVhbn0KCSAqLwoJbGludXggOiBmdW5jdGlvbiAoKSB7CgkJcmV0dXJuICFzZXJ2ZXIgJiYgcmVnZXgubGludXgudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApOwoJfSgpLAoKCS8qKgoJICogTW9iaWxlIHBsYXRmb3JtCgkgKgoJICogQHR5cGUge0Jvb2xlYW59CgkgKi8KCW1vYmlsZSA6IGZ1bmN0aW9uICgpIHsKCQl2YXIgc2l6ZTsKCgkJaWYgKCBzZXJ2ZXIgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJZWxzZSB7CgkJCXNpemUgPSBjbGllbnQuc2l6ZSgpOwoKCQkJcmV0dXJuICggL2JsYWNrYmVycnl8aXBob25lfHdlYm9zL2kudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApIHx8ICggcmVnZXguYW5kcm9pZC50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICkgJiYgKCBzaXplWzBdIDwgNzIwIHx8IHNpemVbMV0gPCA3MjAgKSApICk7CgkJfQoJfSwKCgkvKioKCSAqIFBsYXlib29rIHBsYXRmb3JtCgkgKgoJICogQHR5cGUge0Jvb2xlYW59CgkgKi8KCXBsYXlib29rOiBmdW5jdGlvbiAoKSB7CgkJcmV0dXJuICFzZXJ2ZXIgJiYgcmVnZXgucGxheWJvb2sudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApOwoJfSgpLAoKCS8qKgoJICogT3BlcmEgYnJvd3NlcgoJICoKCSAqIEB0eXBlIHtCb29sZWFufQoJICovCglvcGVyYSA6IGZ1bmN0aW9uICgpIHsKCQlyZXR1cm4gIXNlcnZlciAmJiByZWdleC5vcGVyYS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICk7Cgl9KCksCgoJLyoqCgkgKiBPU1ggcGxhdGZvcm0KCSAqCgkgKiBAdHlwZSB7Qm9vbGVhbn0KCSAqLwoJb3N4IDogZnVuY3Rpb24gKCkgewoJCXJldHVybiAhc2VydmVyICYmIHJlZ2V4Lm9zeC50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICk7Cgl9KCksCgoJLyoqCgkgKiBTYWZhcmkgYnJvd3NlcgoJICoKCSAqIEB0eXBlIHtCb29sZWFufQoJICovCglzYWZhcmkgOiBmdW5jdGlvbiAoKSB7CgkJcmV0dXJuICFzZXJ2ZXIgJiYgcmVnZXguc2FmYXJpLnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQucmVwbGFjZSgvY2hyb21lLiovaSwgIiIpICk7Cgl9KCksCgoJLyoqCgkgKiBUYWJsZXQgcGxhdGZvcm0KCSAqCgkgKiBNb2Rlcm4gc21hcnRwaG9uZSByZXNvbHV0aW9uIG1ha2VzIHRoaXMgYSBoaXQvbWlzcyBzY2VuYXJpbwoJICoKCSAqIEB0eXBlIHtCb29sZWFufQoJICovCgl0YWJsZXQgOiBmdW5jdGlvbiAoKSB7CgkJdmFyIHNpemU7CgoJCWlmICggc2VydmVyICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCWVsc2UgewoJCQlzaXplID0gY2xpZW50LnNpemUoKTsKCgkJCXJldHVybiAoIC9pcGFkfHBsYXlib29rfHdlYm9zL2kudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApIHx8ICggcmVnZXguYW5kcm9pZC50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICkgJiYgKCBzaXplWzBdID49IDcyMCB8fCBzaXplWzFdID49IDcyMCApICkgKTsKCQl9Cgl9LAoKCS8qKgoJICogV2ViT1MgcGxhdGZvcm0KCSAqCgkgKiBAdHlwZSB7Qm9vbGVhbn0KCSAqLwoJd2Vib3MgOiBmdW5jdGlvbiAoKSB7CgkJcmV0dXJuICFzZXJ2ZXIgJiYgcmVnZXgud2Vib3MudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApOwoJfSgpLAoKCS8qKgoJICogV2luZG93cyBwbGF0Zm9ybQoJICoKCSAqIEB0eXBlIHtCb29sZWFufQoJICovCgl3aW5kb3dzIDogZnVuY3Rpb24gKCkgewoJCXJldHVybiAhc2VydmVyICYmIHJlZ2V4LndpbmRvd3MudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApOwoJfSgpLAoKCS8qKgoJICogQ2xpZW50IHZlcnNpb24KCSAqCgkgKiBAdHlwZSB7Qm9vbGVhbn0KCSAqLwoJdmVyc2lvbiA6IGZ1bmN0aW9uICgpIHsKCQl2YXIgdmVyc2lvbiA9IDA7CgoJCWlmICggdGhpcy5jaHJvbWUgKSB7CgkJCXZlcnNpb24gPSBuYXZpZ2F0b3IudXNlckFnZW50LnJlcGxhY2UoIC8oLipjaHJvbWVcL3xzYWZhcmkuKikvZ2ksICIiICk7CgkJfQoJCWVsc2UgaWYgKCB0aGlzLmZpcmVmb3ggKSB7CgkJCXZlcnNpb24gPSBuYXZpZ2F0b3IudXNlckFnZW50LnJlcGxhY2UoIC8oLipmaXJlZm94XC8pL2dpLCAiIiApOwoJCX0KCQllbHNlIGlmICggdGhpcy5pZSApIHsKCQkJdmVyc2lvbiA9IG5hdmlnYXRvci51c2VyQWdlbnQucmVwbGFjZSgvKC4qbXNpZXw7LiopL2dpLCAiIik7CgkJfQoJCWVsc2UgaWYgKCB0aGlzLm9wZXJhICkgewoJCQl2ZXJzaW9uID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5yZXBsYWNlKCAvKC4qdmVyc2lvblwvfFwoLiopL2dpLCAiIiApOwoJCX0KCQllbHNlIGlmICggdGhpcy5zYWZhcmkgKSB7CgkJCXZlcnNpb24gPSBuYXZpZ2F0b3IudXNlckFnZW50LnJlcGxhY2UoIC8oLip2ZXJzaW9uXC98c2FmYXJpLiopL2dpLCAiIiApOwoJCX0KCQllbHNlIHsKCQkJdmVyc2lvbiA9IG5hdmlnYXRvci5hcHBWZXJzaW9uIHx8ICIwIjsKCQl9CgoJCXZlcnNpb24gPSBudW1iZXIucGFyc2UoIHN0cmluZy50cmltKCB2ZXJzaW9uICkgKTsKCgkJaWYgKCBpc05hTiggdmVyc2lvbiApICkgewoJCQl2ZXJzaW9uID0gMDsKCQl9CgoJCWlmICggdGhpcy5pZSAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDwgdmVyc2lvbiApIHsKCQkJdmVyc2lvbiA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTsKCQl9CgoJCXJldHVybiB2ZXJzaW9uOwoJfSwKCgkvKioKCSAqIFF1aWNrIHdheSB0byBzZWUgaWYgYSBVUkkgYWxsb3dzIGEgc3BlY2lmaWMgdmVyYgoJICoKCSAqIEBtZXRob2QgYWxsb3dzCgkgKiBAcGFyYW0gIHtTdHJpbmd9IHVyaSAgVVJJIHRvIHF1ZXJ5CgkgKiBAcGFyYW0gIHtTdHJpbmd9IHZlcmIgSFRUUCB2ZXJiCgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgYHRydWVgIGlmIHRoZSB2ZXJiIGlzIGFsbG93ZWQsIHVuZGVmaW5lZCBpZiB1bmtub3duCgkgKi8KCWFsbG93cyA6IGZ1bmN0aW9uICggdXJpLCB2ZXJiICkgewoJCWlmICggc3RyaW5nLmlzRW1wdHkoIHVyaSApIHx8IHN0cmluZy5pc0VtcHR5KCB2ZXJiICkgKSB7CgkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCX0KCgkJdXJpICAgICAgICA9IHV0aWxpdHkucGFyc2UoIHVyaSApLmhyZWY7CgkJdmVyYiAgICAgICA9IHZlcmIudG9Mb3dlckNhc2UoKTsKCQl2YXIgcmVzdWx0ID0gZmFsc2UsCgkJICAgIGJpdCAgICA9IDA7CgoJCWlmICggIWNhY2hlLmdldCggdXJpLCBmYWxzZSApICkgewoJCQlyZXN1bHQgPSB1bmRlZmluZWQ7CgkJfQoJCWVsc2UgewoJCQlpZiAoIHJlZ2V4LmRlbC50ZXN0KCB2ZXJiICkgKSB7CgkJCQliaXQgPSAxOwoJCQl9CgkJCWVsc2UgaWYgKCByZWdleC5nZXRfaGVhZGVycy50ZXN0KCB2ZXJiICkgKSB7CgkJCQliaXQgPSA0OwoJCQl9CgkJCWVsc2UgaWYgKCByZWdleC5wdXRfcG9zdC50ZXN0KCB2ZXJiICkgKSB7CgkJCQliaXQgPSAyOwoJCQl9CgkJCWVsc2UgaWYgKCByZWdleC5wYXRjaC50ZXN0KCB2ZXJiICkgKSB7CgkJCQliaXQgPSA4OwoJCQl9CgoJCQlyZXN1bHQgPSBCb29sZWFuKCBjbGllbnQucGVybWlzc2lvbnMoIHVyaSwgdmVyYiApLmJpdCAmIGJpdCApOwoJCX0KCgkJcmV0dXJuIHJlc3VsdDsKCX0sCgoJLyoqCgkgKiBHZXRzIGJpdCB2YWx1ZSBiYXNlZCBvbiBhcmdzCgkgKgoJICogQG1ldGhvZCBiaXQKCSAqIEBwYXJhbSAge0FycmF5fSBhcmdzIEFycmF5IG9mIGNvbW1hbmRzIHRoZSBVUkkgYWNjZXB0cwoJICogQHJldHVybiB7TnVtYmVyfSBUbyBiZSBzZXQgYXMgYSBiaXQKCSAqLwoJYml0IDogZnVuY3Rpb24gKCBhcmdzICkgewoJCXZhciByZXN1bHQgPSAwOwoKCQlhcnJheS5lYWNoKCBhcmdzLCBmdW5jdGlvbiAoIHZlcmIgKSB7CgkJCXZlcmIgPSB2ZXJiLnRvTG93ZXJDYXNlKCk7CgoJCQlpZiAoIHJlZ2V4LmdldF9oZWFkZXJzLnRlc3QoIHZlcmIgKSApIHsKCQkJCXJlc3VsdCB8PSA0OwoJCQl9CgkJCWVsc2UgaWYgKCByZWdleC5wdXRfcG9zdC50ZXN0KCB2ZXJiICkgKSB7CgkJCQlyZXN1bHQgfD0gMjsKCQkJfQoJCQllbHNlIGlmICggcmVnZXgucGF0Y2gudGVzdCggdmVyYiApICkgewoJCQkJcmVzdWx0IHw9IDg7CgkJCX0KCQkJZWxzZSBpZiAoIHJlZ2V4LmRlbC50ZXN0KCB2ZXJiICkgKSB7CgkJCQlyZXN1bHQgfD0gMTsKCQkJfQoJCX0pOwoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIERldGVybWluZXMgaWYgYSBVUkkgaXMgYSBDT1JTIGVuZCBwb2ludAoJICoKCSAqIEBtZXRob2QgY29ycwoJICogQHBhcmFtICB7U3RyaW5nfSB1cmkgIFVSSSB0byBwYXJzZQoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFRydWUgaWYgQ09SUwoJICovCgljb3JzIDogZnVuY3Rpb24gKCB1cmkgKSB7CgkJcmV0dXJuICggIXNlcnZlciAmJiB1cmkuaW5kZXhPZiggIi8vIiApID4gLTEgJiYgdXJpLmluZGV4T2YoICIvLyIgKyBsb2NhdGlvbi5ob3N0ICkgPT09IC0xICk7Cgl9LAoKCS8qKgoJICogQ2FjaGVzIHRoZSBoZWFkZXJzIGZyb20gdGhlIFhIUiByZXNwb25zZQoJICoKCSAqIEBtZXRob2QgaGVhZGVycwoJICogQHBhcmFtICB7T2JqZWN0fSB4aHIgIFhNTEh0dHBSZXF1ZXN0IE9iamVjdAoJICogQHBhcmFtICB7U3RyaW5nfSB1cmkgIFVSSSB0byByZXF1ZXN0CgkgKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGUgVHlwZSBvZiByZXF1ZXN0CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgQ2FjaGVkIFVSSSByZXByZXNlbnRhdGlvbgoJICovCgloZWFkZXJzIDogZnVuY3Rpb24gKCB4aHIsIHVyaSwgdHlwZSApIHsKCQl2YXIgaGVhZGVycyA9IHN0cmluZy50cmltKCB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgKS5zcGxpdCggIlxuIiApLAoJCSAgICBpdGVtcyAgID0ge30sCgkJICAgIG8gICAgICAgPSB7fSwKCQkgICAgYWxsb3cgICA9IG51bGwsCgkJICAgIGV4cGlyZXMgPSBuZXcgRGF0ZSgpLAoJCSAgICBjb3JzICAgID0gY2xpZW50LmNvcnMoIHVyaSApOwoKCQlhcnJheS5lYWNoKCBoZWFkZXJzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCXZhciBoZWFkZXIsIHZhbHVlOwoKCQkJdmFsdWUgICAgICAgICA9IGkucmVwbGFjZSggcmVnZXguaGVhZGVyX3ZhbHVlX3JlcGxhY2UsICIiICk7CgkJCWhlYWRlciAgICAgICAgPSBpLnJlcGxhY2UoIHJlZ2V4LmhlYWRlcl9yZXBsYWNlLCAiIiApOwoJCQloZWFkZXIgICAgICAgID0gc3RyaW5nLnVuaHlwaGVuYXRlKCBoZWFkZXIsIHRydWUgKS5yZXBsYWNlKCAvXHMrL2csICItIiApOwoJCQlpdGVtc1toZWFkZXJdID0gdmFsdWU7CgoJCQlpZiAoIGFsbG93ID09PSBudWxsICkgewoJCQkJaWYgKCAoICFjb3JzICYmIHJlZ2V4LmFsbG93LnRlc3QoIGhlYWRlcikgKSB8fCAoIGNvcnMgJiYgcmVnZXguYWxsb3dfY29ycy50ZXN0KCBoZWFkZXIpICkgKSB7CgkJCQkJYWxsb3cgPSB2YWx1ZTsKCQkJCX0KCQkJfQoJCX0pOwoKCQlpZiAoIHJlZ2V4Lm5vLnRlc3QoIGl0ZW1zWyJDYWNoZS1Db250cm9sIl0gKSApIHsKCQkJLy8gRG8gbm90aGluZwoJCX0KCQllbHNlIGlmICggaXRlbXNbIkNhY2hlLUNvbnRyb2wiXSAhPT0gdW5kZWZpbmVkICYmIHJlZ2V4Lm51bWJlcl9wcmVzZW50LnRlc3QoIGl0ZW1zWyJDYWNoZS1Db250cm9sIl0gKSApIHsKCQkJZXhwaXJlcyA9IGV4cGlyZXMuc2V0U2Vjb25kcyggZXhwaXJlcy5nZXRTZWNvbmRzKCkgKyBudW1iZXIucGFyc2UoIHJlZ2V4Lm51bWJlcl9wcmVzZW50LmV4ZWMoIGl0ZW1zWyJDYWNoZS1Db250cm9sIl0gKVswXSwgMTAgKSApOwoJCX0KCQllbHNlIGlmICggaXRlbXMuRXhwaXJlcyAhPT0gdW5kZWZpbmVkICkgewoJCQlleHBpcmVzID0gbmV3IERhdGUoIGl0ZW1zLkV4cGlyZXMgKTsKCQl9CgkJZWxzZSB7CgkJCWV4cGlyZXMgPSBleHBpcmVzLnNldFNlY29uZHMoIGV4cGlyZXMuZ2V0U2Vjb25kcygpICsgJC5leHBpcmVzICk7CgkJfQoKCQlvLmV4cGlyZXMgICAgPSBleHBpcmVzOwoJCW8uaGVhZGVycyAgICA9IGl0ZW1zOwoJCW8ucGVybWlzc2lvbiA9IGNsaWVudC5iaXQoIGFsbG93ICE9PSBudWxsID8gc3RyaW5nLmV4cGxvZGUoIGFsbG93ICkgOiBbdHlwZV0gKTsKCgkJaWYgKCB0eXBlID09PSAiZ2V0IiApIHsKCQkJY2FjaGUuc2V0KCB1cmksICJleHBpcmVzIiwgICAgby5leHBpcmVzICk7CgkJCWNhY2hlLnNldCggdXJpLCAiaGVhZGVycyIsICAgIG8uaGVhZGVycyApOwoJCQljYWNoZS5zZXQoIHVyaSwgInBlcm1pc3Npb24iLCBvLnBlcm1pc3Npb24gKTsKCQl9CgoJCXJldHVybiBvOwoJfSwKCgkvKioKCSAqIFBhcnNlcyBhbiBYSFIgcmVzcG9uc2UKCSAqCgkgKiBAbWV0aG9kIHBhcnNlCgkgKiBAcGFyYW0gIHtPYmplY3R9IHhociAgWEhSIE9iamVjdAoJICogQHBhcmFtICB7U3RyaW5nfSB0eXBlIFtPcHRpb25hbF0gQ29udGVudC1UeXBlIGhlYWRlciB2YWx1ZQoJICogQHJldHVybiB7TWl4ZWR9ICAgICAgIEFycmF5LCBCb29sZWFuLCBEb2N1bWVudCwgTnVtYmVyLCBPYmplY3Qgb3IgU3RyaW5nCgkgKi8KCXBhcnNlIDogZnVuY3Rpb24gKCB4aHIsIHR5cGUgKSB7CgkJdHlwZSA9IHR5cGUgfHwgIiI7CgkJdmFyIHJlc3VsdCwgb2JqOwoKCQlpZiAoICggcmVnZXguanNvbl9tYXliZS50ZXN0KCB0eXBlICkgfHwgc3RyaW5nLmlzRW1wdHkoIHR5cGUgKSApICYmICggcmVnZXguanNvbl93cmFwLnRlc3QoIHhoci5yZXNwb25zZVRleHQgKSAmJiBCb29sZWFuKCBvYmogPSBqc29uLmRlY29kZSggeGhyLnJlc3BvbnNlVGV4dCwgdHJ1ZSApICkgKSApIHsKCQkJcmVzdWx0ID0gb2JqOwoJCX0KCQllbHNlIGlmICggcmVnZXgueG1sLnRlc3QoIHR5cGUgKSApIHsKCQkJaWYgKCB0eXBlICE9PSAidGV4dC94bWwiICkgewoJCQkJeGhyLm92ZXJyaWRlTWltZVR5cGUoICJ0ZXh0L3htbCIgKTsKCQkJfQoKCQkJcmVzdWx0ID0geGhyLnJlc3BvbnNlWE1MOwoJCX0KCQllbHNlIGlmICggdHlwZSA9PT0gInRleHQvcGxhaW4iICYmIHJlZ2V4LmlzX3htbC50ZXN0KCB4aHIucmVzcG9uc2VUZXh0KSAmJiB4bWwudmFsaWQoIHhoci5yZXNwb25zZVRleHQgKSApIHsKCQkJcmVzdWx0ID0geG1sLmRlY29kZSggeGhyLnJlc3BvbnNlVGV4dCApOwoJCX0KCQllbHNlIHsKCQkJcmVzdWx0ID0geGhyLnJlc3BvbnNlVGV4dDsKCQl9CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogUmV0dXJucyB0aGUgcGVybWlzc2lvbiBvZiB0aGUgY2FjaGVkIFVSSQoJICoKCSAqIEBtZXRob2QgcGVybWlzc2lvbnMKCSAqIEBwYXJhbSAge1N0cmluZ30gdXJpIFVSSSB0byBxdWVyeQoJICogQHJldHVybiB7T2JqZWN0fSAgICAgQ29udGFpbnMgYW4gQXJyYXkgb2YgYXZhaWxhYmxlIGNvbW1hbmRzLCB0aGUgcGVybWlzc2lvbiBiaXQgYW5kIGEgbWFwCgkgKi8KCXBlcm1pc3Npb25zIDogZnVuY3Rpb24gKCB1cmkgKSB7CgkJdmFyIGNhY2hlZCA9IGNhY2hlLmdldCggdXJpLCBmYWxzZSApLAoJCSAgICBiaXQgICAgPSAhY2FjaGVkID8gMCA6IGNhY2hlZC5wZXJtaXNzaW9uLAoJCSAgICByZXN1bHQgPSB7YWxsb3dzOiBbXSwgYml0OiBiaXQsIG1hcDoge3BhcnRpYWw6IDgsIHJlYWQ6IDQsIHdyaXRlOiAyLCAiZGVsZXRlIjogMSwgdW5rbm93bjogMH19OwoKCQlpZiAoIGJpdCAmIDEpIHsKCQkJcmVzdWx0LmFsbG93cy5wdXNoKCAiREVMRVRFIiApOwoJCX0KCgkJaWYgKCBiaXQgJiAyKSB7CgkJCXJlc3VsdC5hbGxvd3MucHVzaCggIlBPU1QiICk7CgkJCXJlc3VsdC5hbGxvd3MucHVzaCggIlBVVCIgKTsKCQl9CgoJCWlmICggYml0ICYgNCkgewoJCQlyZXN1bHQuYWxsb3dzLnB1c2goICJHRVQiICk7CgkJfQoKCQlpZiAoIGJpdCAmIDgpIHsKCQkJcmVzdWx0LmFsbG93cy5wdXNoKCAiUEFUQ0giICk7CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIENyZWF0ZXMgYSBKU09OUCByZXF1ZXN0CgkgKgoJICogQG1ldGhvZCBqc29ucAoJICogQHBhcmFtICB7U3RyaW5nfSAgIHVyaSAgICAgVVJJIHRvIHJlcXVlc3QKCSAqIEBwYXJhbSAge0Z1bmN0aW9ufSBzdWNjZXNzIEEgaGFuZGxlciBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gYW4gYXBwcm9wcmlhdGUgcmVzcG9uc2UgYmVlbiByZWNlaXZlZAoJICogQHBhcmFtICB7RnVuY3Rpb259IGZhaWx1cmUgW09wdGlvbmFsXSBBIGhhbmRsZXIgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBlcnJvcgoJICogQHBhcmFtICB7TWl4ZWR9ICAgIGFyZ3MgICAgQ3VzdG9tIEpTT05QIGhhbmRsZXIgcGFyYW1ldGVyIG5hbWUsIGRlZmF1bHQgaXMgImNhbGxiYWNrIjsgb3IgY3VzdG9tIGhlYWRlcnMgZm9yIEdFVCByZXF1ZXN0ICggQ09SUyApCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICBEZWZlcnJlZAoJICovCglqc29ucCA6IGZ1bmN0aW9uICggdXJpLCBzdWNjZXNzLCBmYWlsdXJlLCBhcmdzICkgewoJCXZhciBkZWZlciAgICA9IGRlZmVycmVkKCksCgkJICAgIGNhbGxiYWNrID0gImNhbGxiYWNrIiwgY2JpZCwgczsKCgkJaWYgKCBleHRlcm5hbCA9PT0gdW5kZWZpbmVkICkgewoJCQlpZiAoIGdsb2JhbC5hYmFhc28gPT09IHVuZGVmaW5lZCApIHsKCQkJCXV0aWxpdHkuZGVmaW5lKCAiYWJhYXNvLmNhbGxiYWNrIiwge30sIGdsb2JhbCApOwoJCQl9CgoJCQlleHRlcm5hbCA9ICJhYmFhc28iOwoJCX0KCgkJaWYgKCBhcmdzIGluc3RhbmNlb2YgT2JqZWN0ICYmIGFyZ3MuY2FsbGJhY2sgIT09IHVuZGVmaW5lZCApIHsKCQkJY2FsbGJhY2sgPSBhcmdzLmNhbGxiYWNrOwoJCX0KCgkJZGVmZXIudGhlbiggZnVuY3Rpb24gKGFyZyApIHsKCQkJaWYgKCB0eXBlb2Ygc3VjY2VzcyA9PT0gImZ1bmN0aW9uIikgewoJCQkJc3VjY2VzcyggYXJnICk7CgkJCX0KCQl9LCBmdW5jdGlvbiAoIGUgKSB7CgkJCWlmICggdHlwZW9mIGZhaWx1cmUgPT09ICJmdW5jdGlvbiIpIHsKCQkJCWZhaWx1cmUoIGUgKTsKCQkJfQoKCQkJdGhyb3cgZTsKCQl9KTsKCgkJZG8gewoJCQljYmlkID0gdXRpbGl0eS5nZW5JZCgpLnNsaWNlKCAwLCAxMCApOwoJCX0KCQl3aGlsZSAoIGdsb2JhbC5hYmFhc28uY2FsbGJhY2tbY2JpZF0gIT09IHVuZGVmaW5lZCApOwoKCQl1cmkgPSB1cmkucmVwbGFjZSggY2FsbGJhY2sgKyAiPT8iLCBjYWxsYmFjayArICI9IiArIGV4dGVybmFsICsgIi5jYWxsYmFjay4iICsgY2JpZCApOwoKCQlnbG9iYWwuYWJhYXNvLmNhbGxiYWNrW2NiaWRdID0gZnVuY3Rpb24gKCBhcmcgKSB7CgkJCWNsZWFyVGltZW91dCggdXRpbGl0eS50aW1lcltjYmlkXSApOwoJCQlkZWxldGUgdXRpbGl0eS50aW1lcltjYmlkXTsKCQkJZGVsZXRlIGdsb2JhbC5hYmFhc28uY2FsbGJhY2tbY2JpZF07CgkJCWRlZmVyLnJlc29sdmUoIGFyZyApOwoJCQllbGVtZW50LmRlc3Ryb3koIHMgKTsKCQl9OwoKCQlzID0gZWxlbWVudC5jcmVhdGUoICJzY3JpcHQiLCB7c3JjOiB1cmksIHR5cGU6ICJ0ZXh0L2phdmFzY3JpcHQifSwgdXRpbGl0eS4kKCAiaGVhZCIgKVswXSApOwoJCQoJCXV0aWxpdHkuZGVmZXIoIGZ1bmN0aW9uICgpIHsKCQkJZGVmZXIucmVqZWN0KCB1bmRlZmluZWQgKTsKCQl9LCAzMDAwMCwgY2JpZCApOwoKCQlyZXR1cm4gZGVmZXI7Cgl9LAoKCS8qKgoJICogQ3JlYXRlcyBhbiBYbWxIdHRwUmVxdWVzdCB0byBhIFVSSSAoIGFsaWFzZWQgdG8gbXVsdGlwbGUgbWV0aG9kcyApCgkgKgoJICogVGhlIHJldHVybmVkIERlZmVycmVkIHdpbGwgaGF2ZSBhbiAueGhyIHByb3BlcnR5IGRlY29yYXRlZAoJICoKCSAqIEV2ZW50czogYmVmb3JlW3R5cGVdICAgICAgICAgIEZpcmVzIGJlZm9yZSB0aGUgWG1sSHR0cFJlcXVlc3QgaXMgbWFkZSwgdHlwZSBzcGVjaWZpYwoJICogICAgICAgICBmYWlsZWRbdHlwZV0gICAgICAgICAgRmlyZXMgb24gZXJyb3IKCSAqICAgICAgICAgcHJvZ3Jlc3NbdHlwZV0gICAgICAgIEZpcmVzIG9uIHByb2dyZXNzCgkgKiAgICAgICAgIHByb2dyZXNzVXBsb2FkW3R5cGVdICBGaXJlcyBvbiB1cGxvYWQgcHJvZ3Jlc3MKCSAqICAgICAgICAgcmVjZWl2ZWRbdHlwZV0gICAgICAgIEZpcmVzIG9uIFhIUiByZWFkeXN0YXRlIDIKCSAqICAgICAgICAgdGltZW91dFt0eXBlXSAgICAgICAgIEZpcmVzIHdoZW4gWG1sSHR0cFJlcXVlc3QgdGltZXMgb3V0CgkgKgoJICogQG1ldGhvZCByZXF1ZXN0CgkgKiBAcGFyYW0gIHtTdHJpbmd9ICAgdXJpICAgICBVUkkgdG8gcXVlcnkKCSAqIEBwYXJhbSAge1N0cmluZ30gICB0eXBlICAgIFR5cGUgb2YgcmVxdWVzdCAoIERFTEVURS9HRVQvUE9TVC9QVVQvSEVBRCApCgkgKiBAcGFyYW0gIHtGdW5jdGlvbn0gc3VjY2VzcyBBIGhhbmRsZXIgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGFuIGFwcHJvcHJpYXRlIHJlc3BvbnNlIGJlZW4gcmVjZWl2ZWQKCSAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmYWlsdXJlIFtPcHRpb25hbF0gQSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZXJyb3IKCSAqIEBwYXJhbSAge01peGVkfSAgICBhcmdzICAgIFtPcHRpb25hbF0gRGF0YSB0byBzZW5kIHdpdGggdGhlIHJlcXVlc3QKCSAqIEBwYXJhbSAge09iamVjdH0gICBoZWFkZXJzIFtPcHRpb25hbF0gQ3VzdG9tIHJlcXVlc3QgaGVhZGVycyAoIGNhbiBiZSB1c2VkIHRvIHNldCB3aXRoQ3JlZGVudGlhbHMgKQoJICogQHBhcmFtICB7TnVtYmVyfSAgIHRpbWVvdXQgW09wdGlvbmFsXSBUaW1lb3V0IGluIG1pbGxpc2Vjb25kcywgZGVmYXVsdCBpcyAzMDAwMAoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgRGVmZXJyZWQKCSAqLwoJcmVxdWVzdCA6IGZ1bmN0aW9uICggdXJpLCB0eXBlLCBzdWNjZXNzLCBmYWlsdXJlLCBhcmdzLCBoZWFkZXJzLCB0aW1lb3V0ICkgewoJCXRpbWVvdXQgPSB0aW1lb3V0IHx8IDMwMDAwOwoJCXZhciBjb3JzLCB4aHIsIHBheWxvYWQsIGNhY2hlZCwgdHlwZWQsIGNvbnRlbnRUeXBlLCBkb2MsIGFiLCBibG9iLCBkZWZlcjsKCgkJaWYgKCAoIHJlZ2V4LnB1dF9wb3N0LnRlc3QoIHR5cGUgKSB8fCByZWdleC5wYXRjaC50ZXN0KCB0eXBlICkgKSAmJiBhcmdzID09PSB1bmRlZmluZWQgKSB7CgkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCX0KCgkJdXJpICAgICAgICAgPSB1dGlsaXR5LnBhcnNlKCB1cmkgKS5ocmVmOwoJCXR5cGUgICAgICAgID0gdHlwZS50b0xvd2VyQ2FzZSgpOwoJCWhlYWRlcnMgICAgID0gaGVhZGVycyBpbnN0YW5jZW9mIE9iamVjdCA/IGhlYWRlcnMgOiBudWxsOwoJCWNvcnMgICAgICAgID0gY2xpZW50LmNvcnMoIHVyaSApOwoJCXhociAgICAgICAgID0gKCBjbGllbnQuaWUgJiYgY2xpZW50LnZlcnNpb24gPCAxMCAmJiBjb3JzICkgPyBuZXcgWERvbWFpblJlcXVlc3QoKSA6ICggIWNsaWVudC5pZSB8fCAoIGNsaWVudC52ZXJzaW9uID4gOCB8fCB0eXBlICE9PSAicGF0Y2giKSAgPyBuZXcgWE1MSHR0cFJlcXVlc3QoKSA6IG5ldyBBY3RpdmVYT2JqZWN0KCAiTWljcm9zb2Z0LlhNTEhUVFAiICkgKTsKCQlwYXlsb2FkICAgICA9ICggcmVnZXgucHV0X3Bvc3QudGVzdCggdHlwZSApIHx8IHJlZ2V4LnBhdGNoLnRlc3QoIHR5cGUgKSApICYmIGFyZ3MgIT09IHVuZGVmaW5lZCA/IGFyZ3MgOiBudWxsOwoJCWNhY2hlZCAgICAgID0gdHlwZSA9PT0gImdldCIgPyBjYWNoZS5nZXQoIHVyaSApIDogZmFsc2U7CgkJdHlwZWQgICAgICAgPSB0eXBlLmNhcGl0YWxpemUoKTsKCQljb250ZW50VHlwZSA9IG51bGw7CgkJZG9jICAgICAgICAgPSAoIHR5cGVvZiBEb2N1bWVudCAhPT0gInVuZGVmaW5lZCIgKTsKCQlhYiAgICAgICAgICA9ICggdHlwZW9mIEFycmF5QnVmZmVyICE9PSAidW5kZWZpbmVkIiApOwoJCWJsb2IgICAgICAgID0gKCB0eXBlb2YgQmxvYiAhPT0gInVuZGVmaW5lZCIgKTsKCQlkZWZlciAgICAgICA9IGRlZmVycmVkKCk7CgoJCS8vIFVzaW5nIGEgZGVmZXJyZWQgdG8gcmVzb2x2ZSByZXF1ZXN0CgkJZGVmZXIudGhlbiggZnVuY3Rpb24gKCBhcmcgKSB7CgkJCWlmICggdHlwZW9mIHN1Y2Nlc3MgPT09ICJmdW5jdGlvbiIgKSB7CgkJCQlzdWNjZXNzLmNhbGwoIHVyaSwgYXJnLCB4aHIgKTsKCQkJfQoKCQkJeGhyID0gbnVsbDsKCgkJCXJldHVybiBhcmc7CgkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQlpZiAoIHR5cGVvZiBmYWlsdXJlID09PSAiZnVuY3Rpb24iICkgewoJCQkJZmFpbHVyZS5jYWxsKCB1cmksIGUsIHhociApOwoJCQl9CgoJCQl4aHIgPSBudWxsOwoKCQkJdGhyb3cgZTsKCQl9KTsKCgkJdXJpLmZpcmUoICJiZWZvcmUiICsgdHlwZWQgKTsKCgkJaWYgKCAhY29ycyAmJiAhcmVnZXguZ2V0X2hlYWRlcnMudGVzdCggdHlwZSApICYmIGNsaWVudC5hbGxvd3MoIHVyaSwgdHlwZSApID09PSBmYWxzZSApIHsKCQkJeGhyLnN0YXR1cyA9IDQwNTsKCQkJZGVmZXIucmVqZWN0KCBudWxsICk7CgoJCQlyZXR1cm4gdXJpLmZpcmUoICJmYWlsZWQiICsgdHlwZWQsIG51bGwsIHhociApOwoJCX0KCgkJaWYgKCB0eXBlID09PSAiZ2V0IiAmJiBCb29sZWFuKCBjYWNoZWQgKSApIHsKCQkJLy8gRGVjb3JhdGluZyBYSFIgZm9yIHByb3h5IGJlaGF2aW9yCgkJCWlmICggc2VydmVyICkgewoJCQkJeGhyLnJlYWR5U3RhdGUgID0gNDsKCQkJCXhoci5zdGF0dXMgICAgICA9IDIwMDsKCQkJCXhoci5fcmVzaGVhZGVycyA9IGNhY2hlZC5oZWFkZXJzOwoJCQl9CgoJCQlkZWZlci5yZXNvbHZlKCBjYWNoZWQucmVzcG9uc2UgKTsKCQkJdXJpLmZpcmUoICJhZnRlckdldCIsIGNhY2hlZC5yZXNwb25zZSwgeGhyICk7CgkJfQoJCWVsc2UgewoJCQl4aHJbdHlwZW9mIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgIT09ICJ1bmRlZmluZWQiID8gIm9ucmVhZHlzdGF0ZWNoYW5nZSIgOiAib25sb2FkIl0gPSBmdW5jdGlvbiAoKSB7CgkJCQljbGllbnQucmVzcG9uc2UoIHhociwgdXJpLCB0eXBlLCBkZWZlciApOwoJCQl9OwoKCQkJLy8gU2V0dGluZyB0aW1lb3V0CgkJCXRyeSB7CgkJCQlpZiAoIHhoci50aW1lb3V0ICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJeGhyLnRpbWVvdXQgPSB0aW1lb3V0OwoJCQkJfQoJCQl9CgkJCWNhdGNoICggZSApIHt9CgoJCQkvLyBTZXR0aW5nIGV2ZW50cwoJCQlpZiAoIHhoci5vbnRpbWVvdXQgICE9PSB1bmRlZmluZWQgKSB7CgkJCQl4aHIub250aW1lb3V0ID0gZnVuY3Rpb24gKCBlICkgewoJCQkJCXVyaS5maXJlKCAidGltZW91dCIgICsgdHlwZWQsIGUsIHhociApOwoJCQkJfTsKCQkJfQoKCQkJaWYgKCB4aHIub25wcm9ncmVzcyAhPT0gdW5kZWZpbmVkICkgewoJCQkJeGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoZSkgewoJCQkJCXVyaS5maXJlKCAicHJvZ3Jlc3MiICsgdHlwZWQsIGUsIHhociApOwoJCQkJfTsKCQkJfQoKCQkJaWYgKCB4aHIudXBsb2FkICE9PSB1bmRlZmluZWQgJiYgeGhyLnVwbG9hZC5vbnByb2dyZXNzICE9PSB1bmRlZmluZWQgKSB7CgkJCQl4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoIGUgKSB7CgkJCQkJdXJpLmZpcmUoICJwcm9ncmVzc1VwbG9hZCIgKyB0eXBlZCwgZSwgeGhyICk7CgkJCQl9OwoJCQl9CgoJCQl4aHIub3BlbiggdHlwZS50b1VwcGVyQ2FzZSgpLCB1cmksIHRydWUgKTsKCgkJCS8vIFNldHRpbmcgQ29udGVudC1UeXBlIHZhbHVlCgkJCWlmICggaGVhZGVycyAhPT0gbnVsbCAmJiBoZWFkZXJzLmhhc093blByb3BlcnR5KCAiQ29udGVudC1UeXBlIiApICkgewoJCQkJY29udGVudFR5cGUgPSBoZWFkZXJzWyJDb250ZW50LVR5cGUiXTsKCQkJfQoKCQkJaWYgKCBjb3JzICYmIGNvbnRlbnRUeXBlID09PSBudWxsICkgewoJCQkJY29udGVudFR5cGUgPSAidGV4dC9wbGFpbiI7CgkJCX0KCgkJCS8vIFRyYW5zZm9ybWluZyBwYXlsb2FkCgkJCWlmICggcGF5bG9hZCAhPT0gbnVsbCApIHsKCQkJCWlmICggcGF5bG9hZC5oYXNPd25Qcm9wZXJ0eSggInhtbCIgKSApIHsKCQkJCQlwYXlsb2FkID0gcGF5bG9hZC54bWw7CgkJCQl9CgoJCQkJaWYgKCBkb2MgJiYgcGF5bG9hZCBpbnN0YW5jZW9mIERvY3VtZW50ICkgewoJCQkJCXBheWxvYWQgPSB4bWwuZGVjb2RlKCBwYXlsb2FkICk7CgkJCQl9CgoJCQkJaWYgKCB0eXBlb2YgcGF5bG9hZCA9PT0gInN0cmluZyIgJiYgcmVnZXguaXNfeG1sLnRlc3QoIHBheWxvYWQgKSApIHsKCQkJCQljb250ZW50VHlwZSA9ICJhcHBsaWNhdGlvbi94bWwiOwoJCQkJfQoKCQkJCWlmICggISggYWIgJiYgcGF5bG9hZCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyICkgJiYgISggYmxvYiAmJiBwYXlsb2FkIGluc3RhbmNlb2YgQmxvYiApICYmIHBheWxvYWQgaW5zdGFuY2VvZiBPYmplY3QgKSB7CgkJCQkJY29udGVudFR5cGUgPSAiYXBwbGljYXRpb24vanNvbiI7CgkJCQkJcGF5bG9hZCA9IGpzb24uZW5jb2RlKCBwYXlsb2FkICk7CgkJCQl9CgoJCQkJaWYgKCBjb250ZW50VHlwZSA9PT0gbnVsbCAmJiAoKGFiICYmIHBheWxvYWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgKGJsb2IgJiYgcGF5bG9hZCBpbnN0YW5jZW9mIEJsb2IpKSApIHsKCQkJCQljb250ZW50VHlwZSA9ICJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0iOwoJCQkJfQoKCQkJCWlmICggY29udGVudFR5cGUgPT09IG51bGwgKSB7CgkJCQkJY29udGVudFR5cGUgPSAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IjsKCQkJCX0KCQkJfQoKCQkJLy8gU2V0dGluZyBoZWFkZXJzICh1c2luZyB0eXBlb2YgZm9yIFBBVENIIHN1cHBvcnQgaW4gSUU4KQoJCQlpZiAoIHR5cGVvZiB4aHIuc2V0UmVxdWVzdEhlYWRlciAhPT0gInVuZGVmaW5lZCIgKSB7CgkJCQlpZiAoIHR5cGVvZiBjYWNoZWQgPT09ICJvYmplY3QiICYmIGNhY2hlZC5oZWFkZXJzLmhhc093blByb3BlcnR5KCAiRVRhZyIgKSApIHsKCQkJCQl4aHIuc2V0UmVxdWVzdEhlYWRlciggIkVUYWciLCBjYWNoZWQuaGVhZGVycy5FVGFnICk7CgkJCQl9CgoJCQkJaWYgKCBoZWFkZXJzID09PSBudWxsICkgewoJCQkJCWhlYWRlcnMgPSB7fTsKCQkJCX0KCgkJCQlpZiAoIGNvbnRlbnRUeXBlICE9PSBudWxsICkgewoJCQkJCWhlYWRlcnNbIkNvbnRlbnQtVHlwZSJdID0gY29udGVudFR5cGU7CgkJCQl9CgoJCQkJaWYgKCBoZWFkZXJzLmhhc093blByb3BlcnR5KCAiY2FsbGJhY2siICkgKSB7CgkJCQkJZGVsZXRlIGhlYWRlcnMuY2FsbGJhY2s7CgkJCQl9CgoJCQkJdXRpbGl0eS5pdGVyYXRlKCBoZWFkZXJzLCBmdW5jdGlvbiAoIHYsIGsgKSB7CgkJCQkJaWYgKCB2ICE9PSBudWxsICYmIGsgIT09ICJ3aXRoQ3JlZGVudGlhbHMiKSB7CgkJCQkJCXhoci5zZXRSZXF1ZXN0SGVhZGVyKCBrLCB2ICk7CgkJCQkJfQoJCQkJfSk7CgkJCX0KCgkJCS8vIENyb3NzIE9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nICggQ09SUyApCgkJCWlmICggdHlwZW9mIHhoci53aXRoQ3JlZGVudGlhbHMgPT09ICJib29sZWFuIiAmJiBoZWFkZXJzICE9PSBudWxsICYmIHR5cGVvZiBoZWFkZXJzLndpdGhDcmVkZW50aWFscyA9PT0gImJvb2xlYW4iICkgewoJCQkJeGhyLndpdGhDcmVkZW50aWFscyA9IGhlYWRlcnMud2l0aENyZWRlbnRpYWxzOwoJCQl9CgoJCQkvLyBGaXJpbmcgZXZlbnQgJiBzZW5kaW5nIHJlcXVlc3QKCQkJcGF5bG9hZCAhPT0gbnVsbCA/IHhoci5zZW5kKCBwYXlsb2FkICkgOiB4aHIuc2VuZCgpOwoJCX0KCgkJZGVmZXIueGhyID0geGhyOwoKCQlyZXR1cm4gZGVmZXI7Cgl9LAoKCS8qKgoJICogQ2FjaGVzIHRoZSBVUkkgaGVhZGVycyAmIHJlc3BvbnNlIGlmIHJlY2VpdmVkLCBhbmQgZmlyZXMgdGhlIHJlbGV2YW50IGV2ZW50cwoJICoKCSAqIElmIGFiYWFzby5zdGF0ZS5oZWFkZXIgaXMgc2V0LCBhbiBhcHBsaWNhdGlvbiBzdGF0ZSBjaGFuZ2UgaXMgcG9zc2libGUKCSAqCgkgKiBQZXJtaXNzaW9ucyBhcmUgaGFuZGxlZCBpZiB0aGUgQUNDRVBUIGhlYWRlciBpcyByZWNlaXZlZDsgYSBiaXQgaXMgc2V0IG9uIHRoZSBjYWNoZWQKCSAqIHJlc291cmNlCgkgKgoJICogRXZlbnRzOiBhZnRlclt0eXBlXSAgRmlyZXMgYWZ0ZXIgdGhlIFhtbEh0dHBSZXF1ZXN0IHJlc3BvbnNlIGlzIHJlY2VpdmVkLCB0eXBlIHNwZWNpZmljCgkgKiAgICAgICAgIHJlc2V0ICAgICAgICBGaXJlcyBpZiBhIDIwNiByZXNwb25zZSBpcyByZWNlaXZlZAoJICogICAgICAgICBmYWlsdXJlICAgICAgRmlyZXMgaWYgYW4gZXhjZXB0aW9uIGlzIHRocm93bgoJICogICAgICAgICBoZWFkZXJzICAgICAgRmlyZXMgYWZ0ZXIgYSBwb3NzaWJsZSBzdGF0ZSBjaGFuZ2UsIHdpdGggdGhlIGhlYWRlcnMgZnJvbSB0aGUgcmVzcG9uc2UKCSAqCgkgKiBAbWV0aG9kIHJlc3BvbnNlCgkgKiBAcGFyYW0gIHtPYmplY3R9IHhociAgICAgIFhNTEh0dHBSZXF1ZXN0IE9iamVjdAoJICogQHBhcmFtICB7U3RyaW5nfSB1cmkgICAgICBVUkkgdG8gcXVlcnkKCSAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSAgICAgVHlwZSBvZiByZXF1ZXN0CgkgKiBAcGFyYW0gIHtPYmplY3R9IGRlZmVyICAgIERlZmVycmVkIHRvIHJlY29uY2lsZSB3aXRoIHRoZSByZXNwb25zZQoJICogQHJldHVybiB7VW5kZWZpbmVkfSAgICAgICB1bmRlZmluZWQKCSAqLwoJcmVzcG9uc2UgOiBmdW5jdGlvbiAoIHhociwgdXJpLCB0eXBlLCBkZWZlciApIHsKCQl2YXIgdHlwZWQgICAgPSBzdHJpbmcuY2FwaXRhbGl6ZSggdHlwZS50b0xvd2VyQ2FzZSgpICksCgkJICAgIHhoclN0YXRlID0gbnVsbCwKCQkgICAgeGRyICAgICAgPSBjbGllbnQuaWUgJiYgeGhyLnJlYWR5U3RhdGUgPT09IHVuZGVmaW5lZCwKCQkgICAgc2hhcmVkICAgPSB0cnVlLAoJCSAgICBleGNlcHRpb24sIG8sIHIsIHQsIHJlZGlyZWN0OwoKCQkvLyBzZXJ2ZXItc2lkZSBleGNlcHRpb24gaGFuZGxpbmcKCQlleGNlcHRpb24gPSBmdW5jdGlvbiAoIGUsIHhociApIHsKCQkJZGVmZXIucmVqZWN0KCBlICk7CgkJCXVyaS5maXJlKCAiZmFpbGVkIiArIHR5cGVkLCBjbGllbnQucGFyc2UoIHhociApLCB4aHIgKTsKCQl9OwoKCQlpZiAoICF4ZHIgJiYgeGhyLnJlYWR5U3RhdGUgPT09IDIpIHsKCQkJdXJpLmZpcmUoICJyZWNlaXZlZCIgKyB0eXBlZCwgbnVsbCwgeGhyICk7CgkJfQoJCWVsc2UgaWYgKCAheGRyICYmIHhoci5yZWFkeVN0YXRlID09PSA0ICkgewoJCQlzd2l0Y2ggKCB4aHIuc3RhdHVzICkgewoJCQkJY2FzZSAyMDA6CgkJCQljYXNlIDIwMToKCQkJCWNhc2UgMjAyOgoJCQkJY2FzZSAyMDM6CgkJCQljYXNlIDIwNDoKCQkJCWNhc2UgMjA1OgoJCQkJY2FzZSAyMDY6CgkJCQkJLy8gQ2FjaGluZyBoZWFkZXJzCgkJCQkJbyA9IGNsaWVudC5oZWFkZXJzKCB4aHIsIHVyaSwgdHlwZSApOwoJCQkJCXVyaS5maXJlKCAiaGVhZGVycyIsIG8uaGVhZGVycywgeGhyICk7CgoJCQkJCWlmICggdHlwZSA9PT0gImhlYWQiICkgewoJCQkJCQlkZWZlci5yZXNvbHZlKCBvLmhlYWRlcnMgKTsKCgkJCQkJCXJldHVybiB1cmkuZmlyZSggImFmdGVySGVhZCIsIG8uaGVhZGVycyApOwoJCQkJCX0KCQkJCQllbHNlIGlmICggdHlwZSA9PT0gIm9wdGlvbnMiICkgewoJCQkJCQlkZWZlci5yZXNvbHZlKCBvLmhlYWRlcnMgKTsKCgkJCQkJCXJldHVybiB1cmkuZmlyZSggImFmdGVyT3B0aW9ucyIsIG8uaGVhZGVycyApOwoJCQkJCX0KCQkJCQllbHNlIGlmICggdHlwZSAhPT0gImRlbGV0ZSIgKSB7CgkJCQkJCWlmICggc2VydmVyICYmIHJlZ2V4LnByaXYudGVzdCggby5oZWFkZXJzWyJDYWNoZS1Db250cm9sIl0gKSApIHsKCQkJCQkJCXNoYXJlZCA9IGZhbHNlOwoJCQkJCQl9CgoJCQkJCQlpZiAoIHJlZ2V4Lmh0dHBfYm9keS50ZXN0KCB4aHIuc3RhdHVzICkgKSB7CgkJCQkJCQl0ID0gby5oZWFkZXJzWyJDb250ZW50LVR5cGUiXSB8fCAiIjsKCQkJCQkJCXIgPSBjbGllbnQucGFyc2UoIHhociwgdCApOwoKCQkJCQkJCWlmICggciA9PT0gdW5kZWZpbmVkICkgewoJCQkJCQkJCWV4Y2VwdGlvbiggbmV3IEVycm9yKCBsYWJlbC5lcnJvci5zZXJ2ZXJFcnJvciApLCB4aHIgKTsKCQkJCQkJCX0KCQkJCQkJfQoKCQkJCQkJaWYgKCB0eXBlID09PSAiZ2V0IiAmJiBzaGFyZWQgKSB7CgkJCQkJCQljYWNoZS5zZXQoIHVyaSwgInJlc3BvbnNlIiwgKCBvLnJlc3BvbnNlID0gdXRpbGl0eS5jbG9uZSggciwgdHJ1ZSApICkgKTsKCQkJCQkJfQoJCQkJCQllbHNlIHsKCQkJCQkJCWNhY2hlLmV4cGlyZSggdXJpLCB0cnVlICk7CgkJCQkJCX0KCQkJCQl9CgkJCQkJZWxzZSBpZiAoIHR5cGUgPT09ICJkZWxldGUiICkgewoJCQkJCQljYWNoZS5leHBpcmUoIHVyaSwgdHJ1ZSApOwoJCQkJCX0KCgkJCQkJLy8gQXBwbGljYXRpb24gc3RhdGUgY2hhbmdlIHRyaWdnZXJlZCBieSBoeXBlcm1lZGlhICggSEFURU9BUyApCgkJCQkJaWYgKCBzdGF0ZS5nZXRIZWFkZXIoKSAhPT0gbnVsbCAmJiBCb29sZWFuKCB4aHJTdGF0ZSA9IG8uaGVhZGVyc1tzdGF0ZS5nZXRIZWFkZXIoKV0gKSAmJiBzdGF0ZS5jdXJyZW50ICE9PSB4aHJTdGF0ZSApIHsKCQkJCQkJc3RhdGUuc2V0Q3VycmVudCggc3RhdGUgKTsKCQkJCQl9CgoJCQkJCXN3aXRjaCAoIHhoci5zdGF0dXMgKSB7CgkJCQkJCWNhc2UgMjAwOgoJCQkJCQljYXNlIDIwMjoKCQkJCQkJY2FzZSAyMDM6CgkJCQkJCWNhc2UgMjA2OgoJCQkJCQkJZGVmZXIucmVzb2x2ZSggciApOwoJCQkJCQkJdXJpLmZpcmUoICJhZnRlciIgKyB0eXBlZCwgciwgeGhyICk7CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAyMDE6CgkJCQkJCQlpZiAoICggby5oZWFkZXJzLmxvY2F0aW9uID09PSB1bmRlZmluZWQgfHwgc3RyaW5nLmlzRW1wdHkoIG8uaGVhZGVycy5sb2NhdGlvbiApICkgJiYgIXN0cmluZy5pc1VybCggciApICkgewoJCQkJCQkJCWRlZmVyLnJlc29sdmUoIHIgKTsKCQkJCQkJCX0KCQkJCQkJCWVsc2UgewoJCQkJCQkJCXJlZGlyZWN0ID0gc3RyaW5nLnRyaW0gKCBvLmhlYWRlcnMuTG9jYXRpb24gfHwgciApOwoJCQkJCQkJCWNsaWVudC5yZXF1ZXN0KCByZWRpcmVjdCwgIkdFVCIsIGZ1bmN0aW9uICggYXJnICkgewoJCQkJCQkJCQlkZWZlci5yZXNvbHZlICggYXJnICk7CgkJCQkJCQkJCXVyaS5maXJlKCAiYWZ0ZXIiICsgdHlwZWQsIGFyZywgeGhyICk7CgkJCQkJCQkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJCQkJCQlleGNlcHRpb24oIGUsIHhociApOwoJCQkJCQkJCX0gKTsKCQkJCQkJCX0KCQkJCQkJCWJyZWFrOwoJCQkJCQljYXNlIDIwNDoKCQkJCQkJCWRlZmVyLnJlc29sdmUoIG51bGwgKTsKCQkJCQkJCXVyaS5maXJlKCAiYWZ0ZXIiICsgdHlwZWQsIG51bGwsIHhociApOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgMjA1OgoJCQkJCQkJZGVmZXIucmVzb2x2ZSggbnVsbCApOwoJCQkJCQkJdXJpLmZpcmUoICJyZXNldCIsIG51bGwsIHhociApOwoJCQkJCQkJYnJlYWs7CgkJCQkJfQoJCQkJCWJyZWFrOwoJCQkJY2FzZSAzMDQ6CgkJCQkJZGVmZXIucmVzb2x2ZSggciApOwoJCQkJCXVyaS5maXJlKCAiYWZ0ZXIiICsgdHlwZWQsIHIsIHhociApOwoJCQkJCWJyZWFrOwoJCQkJY2FzZSA0MDE6CgkJCQkJZXhjZXB0aW9uKCBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLnNlcnZlclVuYXV0aG9yaXplZCApLCB4aHIgKTsKCQkJCQlicmVhazsKCQkJCWNhc2UgNDAzOgoJCQkJCWNhY2hlLnNldCggdXJpLCAiIXBlcm1pc3Npb24iLCBjbGllbnQuYml0KCBbdHlwZV0gKSApOwoJCQkJCWV4Y2VwdGlvbiggbmV3IEVycm9yKCBsYWJlbC5lcnJvci5zZXJ2ZXJGb3JiaWRkZW4gKSwgeGhyICk7CgkJCQkJYnJlYWs7CgkJCQljYXNlIDQwNToKCQkJCQljYWNoZS5zZXQoIHVyaSwgIiFwZXJtaXNzaW9uIiwgY2xpZW50LmJpdCggW3R5cGVdICkgKTsKCQkJCQlleGNlcHRpb24oIG5ldyBFcnJvciggbGFiZWwuZXJyb3Iuc2VydmVySW52YWxpZE1ldGhvZCApLCB4aHIgKTsKCQkJCQlicmVhazsKCQkJCWRlZmF1bHQ6CgkJCQkJZXhjZXB0aW9uKCBuZXcgRXJyb3IoIHhoci5yZXNwb25zZVRleHQgfHwgbGFiZWwuZXJyb3Iuc2VydmVyRXJyb3IgKSwgeGhyICk7CgkJCQkJYnJlYWs7CgkJCX0KCgkJCXRyeSB7CgkJCQl4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDsKCQkJfQoJCQljYXRjaCAoIGUgKSB7fQoJCX0KCQllbHNlIGlmICggeGRyICkgewoJCQlyID0gY2xpZW50LnBhcnNlKCB4aHIsICJ0ZXh0L3BsYWluIiApOwoJCQljYWNoZS5zZXQoIHVyaSwgInBlcm1pc3Npb24iLCBjbGllbnQuYml0KCBbImdldCJdICkgKTsKCQkJY2FjaGUuc2V0KCB1cmksICJyZXNwb25zZSIsIHIgKTsKCQkJZGVmZXIucmVzb2x2ZSggciApOwoJCQl1cmkuZmlyZSggImFmdGVyR2V0IiwgciwgeGhyICk7CgkJfQoJfSwKCgkvKioKCSAqIENyZWF0ZXMgYSBzY3JpcHQgRWxlbWVudCB0byBsb2FkIGFuIGV4dGVybmFsIHNjcmlwdAoJICoKCSAqIEBtZXRob2Qgc2NyaXB0CgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyAgICBVUkwgdG8gc2NyaXB0CgkgKiBAcGFyYW0gIHtPYmplY3R9IHRhcmdldCBbT3B0aW9uYWxdIEVsZW1lbnQgdG8gcmVjZWl2ZSB0aGUgc2NyaXB0CgkgKiBAcGFyYW0gIHtTdHJpbmd9IHBvcyAgICBbT3B0aW9uYWxdIFBvc2l0aW9uIHRvIGNyZWF0ZSB0aGUgc2NyaXB0IGF0IHdpdGhpbiB0aGUgdGFyZ2V0CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICBTY3JpcHQKCSAqLwoJc2NyaXB0IDogZnVuY3Rpb24gKCBhcmcsIHRhcmdldCwgcG9zICkgewoJCXJldHVybiBlbGVtZW50LmNyZWF0ZSggInNjcmlwdCIsIHt0eXBlOiAiYXBwbGljYXRpb24vamF2YXNjcmlwdCIsIHNyYzogYXJnfSwgdGFyZ2V0IHx8IHV0aWxpdHkuJCggImhlYWQiIClbMF0sIHBvcyApOwoJfSwKCgkvKioKCSAqIFNjcm9sbHMgdG8gYSBwb3NpdGlvbiBpbiB0aGUgdmlldyB1c2luZyBhIHR3byBwb2ludCBiZXppZXIgY3VydmUKCSAqCgkgKiBAbWV0aG9kIHNjcm9sbAoJICogQHBhcmFtICB7QXJyYXl9ICBkZXN0IENvb3JkaW5hdGVzCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IG1zICAgW09wdGlvbmFsXSBNaWxsaXNlY29uZHMgdG8gc2Nyb2xsLCBkZWZhdWx0IGlzIDI1MCwgbWluIGlzIDEwMAoJICogQHJldHVybiB7T2JqZWN0fSAgICAgIERlZmVycmVkCgkgKi8KCXNjcm9sbCA6IGZ1bmN0aW9uICggZGVzdCwgbXMgKSB7CgkJdmFyIGRlZmVyID0gZGVmZXJyZWQoKSwKCQkgICAgc3RhcnQgPSBjbGllbnQuc2Nyb2xsUG9zKCksCgkJICAgIHQgICAgID0gMDsKCgkJbXMgPSAoICFpc05hTiggbXMgKSA/IG1zIDogMjUwICkgLyAxMDA7CgoJCXV0aWxpdHkucmVwZWF0KCBmdW5jdGlvbiAoKSB7CgkJCXZhciBwb3MgPSBtYXRoLmJlemllciggc3RhcnRbMF0sIHN0YXJ0WzFdLCBkZXN0WzBdLCBkZXN0WzFdLCArK3QgLyAxMDAgKTsKCgkJCXdpbmRvdy5zY3JvbGxUbyggcG9zWzBdLCBwb3NbMV0gKTsKCgkJCWlmICggdCA9PT0gMTAwICkgewoJCQkJZGVmZXIucmVzb2x2ZSggdHJ1ZSApOwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfSwgbXMsICJzY3JvbGxpbmciICk7CgoJCXJldHVybiBkZWZlcjsKCX0sCgoJLyoqCgkgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgVmlldwoJICoKCSAqIEBtZXRob2Qgc2Nyb2xsUG9zCgkgKiBAcmV0dXJuIHtBcnJheX0gRGVzY3JpYmVzIHRoZSBzY3JvbGwgcG9zaXRpb24KCSAqLwoJc2Nyb2xsUG9zIDogZnVuY3Rpb24gKCkgewoJCXJldHVybiBbCgkJCXdpbmRvdy5zY3JvbGxYIHx8IDAsCgkJCXdpbmRvdy5zY3JvbGxZIHx8IDAKCQldOwoJfSwKCgkvKioKCSAqIFJldHVybnMgdGhlIHZpc2libGUgYXJlYSBvZiB0aGUgVmlldwoJICoKCSAqIEBtZXRob2Qgc2l6ZQoJICogQHJldHVybiB7QXJyYXl9IERlc2NyaWJlcyB0aGUgVmlldwoJICovCglzaXplIDogZnVuY3Rpb24gKCkgewoJCXJldHVybiBbCgkJCWRvY3VtZW50WyJkb2N1bWVudEVsZW1lbnQiIHx8ICJib2R5Il0uY2xpZW50V2lkdGggIHx8IDAsCgkJCWRvY3VtZW50WyJkb2N1bWVudEVsZW1lbnQiIHx8ICJib2R5Il0uY2xpZW50SGVpZ2h0IHx8IDAKCQldOwoJfSwKCgkvKioKCSAqIENyZWF0ZXMgYSBsaW5rIEVsZW1lbnQgdG8gbG9hZCBhbiBleHRlcm5hbCBzdHlsZXNoZWV0CgkgKgoJICogQG1ldGhvZCBzdHlsZXNoZWV0CgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyAgIFVSTCB0byBzdHlsZXNoZWV0CgkgKiBAcGFyYW0gIHtTdHJpbmd9IG1lZGlhIFtPcHRpb25hbF0gTWVkaWFzIHRoZSBzdHlsZXNoZWV0IGFwcGxpZXMgdG8KCSAqIEByZXR1cm4ge09iamVjY3R9ICAgICAgU3R5bGVzaGVldAoJICovCglzdHlsZXNoZWV0IDogZnVuY3Rpb24gKCBhcmcsIG1lZGlhICkgewoJCXJldHVybiBlbGVtZW50LmNyZWF0ZSggImxpbmsiLCB7cmVsOiAic3R5bGVzaGVldCIsIHR5cGU6ICJ0ZXh0L2NzcyIsIGhyZWY6IGFyZywgbWVkaWE6IG1lZGlhIHx8ICJwcmludCwgc2NyZWVuIn0sIHV0aWxpdHkuJCggImhlYWQiIClbMF0gKTsKCX0KfTsKCi8qKiBAbmFtZXNwYWNlIGNvb2tpZSAqLwp2YXIgY29va2llID0gewoJLyoqCgkgKiBFeHBpcmVzIGEgY29va2llIGlmIGl0IGV4aXN0cwoJICoKCSAqIEBtZXRob2QgZXhwaXJlCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBuYW1lICAgTmFtZSBvZiB0aGUgY29va2llIHRvIGV4cGlyZQoJICogQHBhcmFtICB7U3RyaW5nfSAgZG9tYWluIFtPcHRpb25hbF0gRG9tYWluIHRvIHNldCB0aGUgY29va2llIGZvcgoJICogQHBhcmFtICB7Qm9vbGVhbn0gc2VjdXJlIFtPcHRpb25hbF0gTWFrZSB0aGUgY29va2llIG9ubHkgYWNjZXNzaWJsZSB2aWEgU1NMCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBwYXRoICAgW09wdGlvbmFsXSBQYXRoIHRoZSBjb29raWUgaXMgZm9yCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBqYXIgICAgW09wdGlvbmFsXSBDb29raWUgamFyLCBkZWZhdWx0cyB0byBkb2N1bWVudC5jb29raWUKCSAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgIE5hbWUgb2YgdGhlIGV4cGlyZWQgY29va2llCgkgKi8KCWV4cGlyZSA6IGZ1bmN0aW9uICggbmFtZSwgZG9tYWluLCBzZWN1cmUsIHBhdGgsIGphciApIHsKCQljb29raWUuc2V0KCBuYW1lLCAiIiwgIi0xcyIsIGRvbWFpbiwgc2VjdXJlLCBwYXRoLCBqYXIgKTsKCgkJcmV0dXJuIG5hbWU7Cgl9LAoKCS8qKgoJICogR2V0cyBhIGNvb2tpZQoJICoKCSAqIEBtZXRob2QgZ2V0CgkgKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY29va2llIHRvIGdldAoJICogQHBhcmFtICB7U3RyaW5nfSBqYXIgIFtPcHRpb25hbF0gQ29va2llIGphciwgZGVmYXVsdHMgdG8gZG9jdW1lbnQuY29va2llCgkgKiBAcmV0dXJuIHtNaXhlZH0gICAgICAgQ29va2llIG9yIHVuZGVmaW5lZAoJICovCglnZXQgOiBmdW5jdGlvbiAoIG5hbWUsIGphciApIHsKCQlyZXR1cm4gdXRpbGl0eS5jb2VyY2UoIGNvb2tpZS5saXN0KCBqYXIgKVtuYW1lXSApOwoJfSwKCgkvKioKCSAqIEdldHMgdGhlIGNvb2tpZXMgZm9yIHRoZSBkb21haW4KCSAqCgkgKiBAbWV0aG9kIGxpc3QKCSAqIEBwYXJhbSAge1N0cmluZ30gamFyIFtPcHRpb25hbF0gQ29va2llIGphciwgZGVmYXVsdHMgdG8gZG9jdW1lbnQuY29va2llCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgIENvbGxlY3Rpb24gb2YgY29va2llcwoJICovCglsaXN0IDogZnVuY3Rpb24gKCBqYXIgKSB7CgkJdmFyIHJlc3VsdCA9IHt9OwoKCQlpZiAoIGphciA9PT0gdW5kZWZpbmVkICkgewoJCQlqYXIgPSBzZXJ2ZXIgPyAiIiA6IGRvY3VtZW50LmNvb2tpZTsKCQl9CgoJCWlmICggIXN0cmluZy5pc0VtcHR5KCBqYXIgKSApIHsKCQkJYXJyYXkuZWFjaCggc3RyaW5nLmV4cGxvZGUoIGphciwgIjsiICksIGZ1bmN0aW9uICggaSApIHsKCQkJCXZhciBpdGVtID0gc3RyaW5nLmV4cGxvZGUoIGksICI9IiApOwoKCQkJCXJlc3VsdFtpdGVtWzBdXSA9IHV0aWxpdHkuY29lcmNlKCBpdGVtWzFdICk7CgkJCX0gKTsKCQl9CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogQ3JlYXRlcyBhIGNvb2tpZQoJICoKCSAqIFRoZSBvZmZzZXQgc3BlY2lmaWVzIGEgcG9zaXRpdmUgb3IgbmVnYXRpdmUgc3BhbiBvZiB0aW1lIGFzIGRheSwgaG91ciwgbWludXRlIG9yIHNlY29uZAoJICoKCSAqIEBtZXRob2Qgc2V0CgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBuYW1lICAgTmFtZSBvZiB0aGUgY29va2llIHRvIGNyZWF0ZQoJICogQHBhcmFtICB7U3RyaW5nfSAgdmFsdWUgIFZhbHVlIHRvIHNldAoJICogQHBhcmFtICB7U3RyaW5nfSAgb2Zmc2V0IEEgcG9zaXRpdmUgb3IgbmVnYXRpdmUgaW50ZWdlciBmb2xsb3dlZCBieSAiZCIsICJoIiwgIm0iIG9yICJzIgoJICogQHBhcmFtICB7U3RyaW5nfSAgZG9tYWluIFtPcHRpb25hbF0gRG9tYWluIHRvIHNldCB0aGUgY29va2llIGZvcgoJICogQHBhcmFtICB7Qm9vbGVhbn0gc2VjdXJlIFtPcHRpb25hbF0gTWFrZSB0aGUgY29va2llIG9ubHkgYWNjZXNzaWJsZSB2aWEgU1NMCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBwYXRoICAgW09wdGlvbmFsXSBQYXRoIHRoZSBjb29raWUgaXMgZm9yCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBqYXIgICAgW09wdGlvbmFsXSBDb29raWUgamFyLCBkZWZhdWx0cyB0byBkb2N1bWVudC5jb29raWUKCSAqIEByZXR1cm4ge1VuZGVmaW5lZH0gICAgICB1bmRlZmluZWQKCSAqLwoJc2V0IDogZnVuY3Rpb24gKCBuYW1lLCB2YWx1ZSwgb2Zmc2V0LCBkb21haW4sIHNlY3VyZSwgcGF0aCwgamFyICkgewoJCXZhbHVlICAgICAgPSAoIHZhbHVlIHx8ICIiICkgKyAiOyI7CgkJb2Zmc2V0ICAgICA9IG9mZnNldCB8fCAiIjsKCQlkb21haW4gICAgID0gdHlwZW9mIGRvbWFpbiA9PT0gInN0cmluZyIgPyAoICIgRG9tYWluPSIgKyBkb21haW4gKyAiOyIgKSA6ICIiOwoJCXNlY3VyZSAgICAgPSAoIHNlY3VyZSA9PT0gdHJ1ZSApID8gIiBzZWN1cmUiIDogIiI7CgkJcGF0aCAgICAgICA9IHR5cGVvZiBwYXRoID09PSAic3RyaW5nIiA/ICggIiBQYXRoPSIgKyBwYXRoICsgIjsiICkgOiAiIjsKCQl2YXIgZXhwaXJlID0gIiIsCgkJICAgIHNwYW4gICA9IG51bGwsCgkJICAgIHR5cGUgICA9IG51bGwsCgkJICAgIHR5cGVzICA9IFsiZCIsICJoIiwgIm0iLCAicyJdLAoJCSAgICByZWdleCAgPSBuZXcgUmVnRXhwKCksCgkJICAgIGkgICAgICA9IHR5cGVzLmxlbmd0aCwKCQkgICAgY29va2llczsKCgkJaWYgKCAhc3RyaW5nLmlzRW1wdHkoIG9mZnNldCApICkgewoJCQl3aGlsZSAoIGktLSApIHsKCQkJCXV0aWxpdHkuY29tcGlsZSggcmVnZXgsIHR5cGVzW2ldICk7CgoJCQkJaWYgKCByZWdleC50ZXN0KCBvZmZzZXQgKSApIHsKCQkJCQl0eXBlID0gdHlwZXNbaV07CgkJCQkJc3BhbiA9IG51bWJlci5wYXJzZSggb2Zmc2V0LCAxMCApOwoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgoJCQlpZiAoIGlzTmFOKCBzcGFuICkgKSB7CgkJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCQkJfQoKCQkJZXhwaXJlID0gbmV3IERhdGUoKTsKCgkJCWlmICggdHlwZSA9PT0gImQiICkgewoJCQkJZXhwaXJlLnNldERhdGUoIGV4cGlyZS5nZXREYXRlKCkgKyBzcGFuICk7CgkJCX0KCQkJZWxzZSBpZiAoIHR5cGUgPT09ICJoIiApIHsKCQkJCWV4cGlyZS5zZXRIb3VycyggZXhwaXJlLmdldEhvdXJzKCkgKyBzcGFuICk7CgkJCX0KCQkJZWxzZSBpZiAoIHR5cGUgPT09ICJtIiApIHsKCQkJCWV4cGlyZS5zZXRNaW51dGVzKCBleHBpcmUuZ2V0TWludXRlcygpICsgc3BhbiApOwoJCQl9CgkJCWVsc2UgaWYgKCB0eXBlID09PSAicyIgKSB7CgkJCQlleHBpcmUuc2V0U2Vjb25kcyggZXhwaXJlLmdldFNlY29uZHMoKSArIHNwYW4gKTsKCQkJfQoJCX0KCgkJaWYgKCBleHBpcmUgaW5zdGFuY2VvZiBEYXRlKSB7CgkJCWV4cGlyZSA9ICIgRXhwaXJlcz0iICsgZXhwaXJlLnRvVVRDU3RyaW5nKCkgKyAiOyI7CgkJfQoKCQlpZiAoICFzZXJ2ZXIgKSB7CgkJCWRvY3VtZW50LmNvb2tpZSA9ICggc3RyaW5nLnRyaW0oIG5hbWUudG9TdHJpbmcoKSApICsgIj0iICsgdmFsdWUgKyBleHBpcmUgKyBkb21haW4gKyBwYXRoICsgc2VjdXJlICk7CgkJfQoJCWVsc2UgewoJCQljb29raWVzID0gamFyLmdldEhlYWRlciggIlNldC1Db29raWUiICkgfHwgW107CgkJCWNvb2tpZXMucHVzaCggKCBzdHJpbmcudHJpbSggbmFtZS50b1N0cmluZygpICkgKyAiPSIgKyB2YWx1ZSArIGV4cGlyZSArIGRvbWFpbiArIHBhdGggKyBzZWN1cmUgKS5yZXBsYWNlKCAvOyQvLCAiIiApICk7CgkJCWphci5zZXRIZWFkZXIoICJTZXQtQ29va2llIiwgY29va2llcyApOwoJCX0KCX0KfTsKCi8qKgogKiBEZWNvcmF0ZXMgYSBEYXRhU3RvcmUgb24gYW4gT2JqZWN0CiAqCiAqIEBtZXRob2QgZGVjb3JhdG9yCiAqIEBwYXJhbSAge09iamVjdH0gb2JqICBPYmplY3QKICogQHBhcmFtICB7TWl4ZWR9ICByZWNzIFtPcHRpb25hbF0gRGF0YSB0byBzZXQgd2l0aCB0aGlzLmJhdGNoCiAqIEBwYXJhbSAge09iamVjdH0gYXJncyBbT3B0aW9uYWxdIEFyZ3VtZW50cyB0byBzZXQgb24gdGhlIHN0b3JlCiAqIEByZXR1cm4ge09iamVjdH0gICAgICBEZWNvcmF0ZWQgT2JqZWN0CiAqLwp2YXIgZGF0YSA9IGZ1bmN0aW9uICggb2JqLCByZWNzLCBhcmdzICkgewoJdXRpbGl0eS5nZW5JZCggb2JqICk7CgoJLy8gRGVjb3JhdGluZyBvYnNlcnZlciBpZiBub3QgcHJlc2VudCBpbiBwcm90b3R5cGUgY2hhaW4KCWlmICggdHlwZW9mIG9iai5maXJlICE9PSAiZnVuY3Rpb24iICkgewoJCW9ic2VydmVyLmRlY29yYXRlKCBvYmogKTsKCX0KCgkvLyBDcmVhdGluZyBzdG9yZQoJb2JqLmRhdGEgPSBuZXcgRGF0YVN0b3JlKCBvYmogKTsKCglpZiAoIGFyZ3MgaW5zdGFuY2VvZiBPYmplY3QgKSB7CgkJdXRpbGl0eS5tZXJnZSggb2JqLmRhdGEsIGFyZ3MgKTsKCX0KCglpZiAoIHJlY3MgIT09IG51bGwgJiYgdHlwZW9mIHJlY3MgPT09ICJvYmplY3QiICkgewoJCW9iai5kYXRhLmJhdGNoKCAic2V0IiwgcmVjcyApOwoJfQoKCXJldHVybiBvYmo7Cn07CgovKioKICogRGF0YVN0b3JlCiAqCiAqIEBjb25zdHJ1Y3RvcgogKi8KZnVuY3Rpb24gRGF0YVN0b3JlICggb2JqICkgewoJdGhpcy5hdXRvc2F2ZSAgICA9IGZhbHNlOwoJdGhpcy5jYWxsYmFjayAgICA9IG51bGw7Cgl0aGlzLmNvbGxlY3Rpb25zID0gW107Cgl0aGlzLmNyZWRlbnRpYWxzID0gbnVsbDsKCXRoaXMuZGF0YWxpc3RzICAgPSBbXTsKCXRoaXMuZGVwdGggICAgICAgPSAwOwoJdGhpcy5ldmVudHMgICAgICA9IGZhbHNlOwoJdGhpcy5leHBpcmVzICAgICA9IG51bGw7Cgl0aGlzLmhlYWRlcnMgICAgID0ge0FjY2VwdDogImFwcGxpY2F0aW9uL2pzb24ifTsKCXRoaXMuaWdub3JlICAgICAgPSBbXTsKCXRoaXMua2V5ICAgICAgICAgPSBudWxsOwoJdGhpcy5rZXlzICAgICAgICA9IHt9OwoJdGhpcy5sZWFmcyAgICAgICA9IFtdOwoJdGhpcy5sb2FkZWQgICAgICA9IGZhbHNlOwoJdGhpcy5tYXhEZXB0aCAgICA9IDA7Cgl0aGlzLm1vbmdvZGIgICAgID0gIiI7Cgl0aGlzLnBhcmVudE5vZGUgID0gb2JqOwoJdGhpcy5wb2ludGVyICAgICA9IG51bGw7Cgl0aGlzLnJlY29yZHMgICAgID0gW107Cgl0aGlzLnJldHJpZXZlICAgID0gZmFsc2U7Cgl0aGlzLnNvdXJjZSAgICAgID0gbnVsbDsKCXRoaXMudG90YWwgICAgICAgPSAwOwoJdGhpcy52aWV3cyAgICAgICA9IHt9OwoJdGhpcy52ZXJzaW9ucyAgICA9IHt9OwoJdGhpcy52ZXJzaW9uaW5nICA9IHRydWU7Cgl0aGlzLnVyaSAgICAgICAgID0gbnVsbDsKfQoKLy8gU2V0dGluZyBjb25zdHJ1Y3RvciBsb29wCkRhdGFTdG9yZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEYXRhU3RvcmU7CgovKioKICogQmF0Y2ggc2V0cyBvciBkZWxldGVzIGRhdGEgaW4gdGhlIHN0b3JlCiAqCiAqIEV2ZW50czogYmVmb3JlRGF0YUJhdGNoICBGaXJlcyBiZWZvcmUgdGhlIGJhdGNoIGlzIHF1ZXVlZAogKiAgICAgICAgIGFmdGVyRGF0YUJhdGNoICAgRmlyZXMgYWZ0ZXIgdGhlIGJhdGNoIGlzIHF1ZXVlZAogKiAgICAgICAgIGZhaWxlZERhdGFCYXRjaCAgRmlyZXMgd2hlbiBhbiBleGNlcHRpb24gb2NjdXJzCiAqCiAqIEBtZXRob2QgYmF0Y2gKICogQHBhcmFtICB7U3RyaW5nfSAgdHlwZSBUeXBlIG9mIGFjdGlvbiB0byBwZXJmb3JtICggc2V0L2RlbC9kZWxldGUgKQogKiBAcGFyYW0gIHtBcnJheX0gICBkYXRhIEFycmF5IG9mIGtleXMgb3IgaW5kaWNlcyB0byBkZWxldGUsIG9yIE9iamVjdCBjb250YWluaW5nIG11bHRpcGxlIHJlY29yZHMgdG8gc2V0CiAqIEBwYXJhbSAge0Jvb2xlYW59IHN5bmMgW09wdGlvbmFsXSBTeW5jcyBzdG9yZSB3aXRoIGRhdGEsIGlmIHRydWUgZXZlcnl0aGluZyBpcyBlcmFzZWQKICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICBEZWZlcnJlZAogKi8KRGF0YVN0b3JlLnByb3RvdHlwZS5iYXRjaCA9IGZ1bmN0aW9uICggdHlwZSwgZGF0YSwgc3luYyApIHsKCWlmICggIXJlZ2V4LnNldF9kZWwudGVzdCggdHlwZSApIHx8ICggc3luYyAmJiByZWdleC5kZWwudGVzdCggdHlwZSApICkgfHwgdHlwZW9mIGRhdGEgIT09ICJvYmplY3QiICkgewoJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJfQoKCXN5bmMgICAgICAgICAgPSAoIHN5bmMgPT09IHRydWUgKTsKCXZhciBzZWxmICAgICAgPSB0aGlzLAoJICAgIGV2ZW50cyAgICA9IHRoaXMuZXZlbnRzLAoJICAgIGRlZmVyICAgICA9IGRlZmVycmVkKCksCgkgICAgZGVmZXJyZWRzID0gW107CgoJaWYgKCBldmVudHMgKSB7CgkJb2JzZXJ2ZXIuZmlyZSggc2VsZi5wYXJlbnROb2RlLCAiYmVmb3JlRGF0YUJhdGNoIiwgZGF0YSApOwoJfQoKCWlmICggc3luYyApIHsKCQl0aGlzLmNsZWFyKCBzeW5jICk7Cgl9CgoJaWYgKCBkYXRhLmxlbmd0aCA9PT0gMCApIHsKCQl0aGlzLmxvYWRlZCA9IHRydWU7CgoJCWlmICggZXZlbnRzICkgewoJCQlvYnNlcnZlci5maXJlKCB0aGlzLnBhcmVudE5vZGUsICJhZnRlckRhdGFCYXRjaCIsIHRoaXMucmVjb3JkcyApOwoJCX0KCgkJZGVmZXIucmVzb2x2ZSggdGhpcy5yZWNvcmRzICk7Cgl9CgllbHNlIHsKCQlpZiAoIHR5cGUgPT09ICJkZWwiICkgewoJCQlhcnJheS5lYWNoKCBkYXRhLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlkZWZlcnJlZHMucHVzaCggc2VsZi5kZWwoIGksIGZhbHNlLCB0cnVlICkgKTsKCQkJfSk7CgkJfQoJCWVsc2UgewoJCQlhcnJheS5lYWNoKCBkYXRhLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlkZWZlcnJlZHMucHVzaCggc2VsZi5zZXQoIG51bGwsIGksIHRydWUgKSApOwoJCQl9KTsKCQl9CgoJCXV0aWxpdHkud2hlbiggZGVmZXJyZWRzICkudGhlbiggZnVuY3Rpb24gKCkgewoJCQlzZWxmLmxvYWRlZCA9IHRydWU7CgoJCQlpZiAoIGV2ZW50cyApIHsKCQkJCW9ic2VydmVyLmZpcmUoIHNlbGYucGFyZW50Tm9kZSwgImFmdGVyRGF0YUJhdGNoIiwgc2VsZi5yZWNvcmRzICk7CgkJCX0KCgkJCWFycmF5LmVhY2goIHNlbGYuZGF0YWxpc3RzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlpLnJlZnJlc2goKTsKCQkJfSk7CgoJCQlpZiAoIHR5cGUgPT09ICJkZWwiICkgewoJCQkJc2VsZi5yZWluZGV4KCk7CgkJCX0KCgkJCWlmICggc2VsZi5hdXRvc2F2ZSApIHsKCQkJCXNlbGYuc2F2ZSgpOwoJCQl9CgoJCQlkZWZlci5yZXNvbHZlKCBzZWxmLnJlY29yZHMgKTsKCQl9LCBmdW5jdGlvbiAoIGUgKSB7CgkJCW9ic2VydmVyLmZpcmUoIHNlbGYucGFyZW50Tm9kZSwgImZhaWxlZERhdGFCYXRjaCIsIGUgKTsKCQkJZGVmZXIucmVqZWN0KCBlICk7CgkJfSk7Cgl9CgoJcmV0dXJuIGRlZmVyOwp9OwoKLyoqCiAqIEJ1aWxkcyBhIHJlbGF0aXZlIFVSSQogKgogKiBAbWV0aG9kIGJ1aWxkVXJpCiAqIEBwYXJhbSAge1N0cmluZ30ga2V5IFJlY29yZCBrZXkKICogQHJldHVybiB7U3RyaW5nfSAgICAgW2Rlc2NyaXB0aW9uXQogKi8KRGF0YVN0b3JlLnByb3RvdHlwZS5idWlsZFVyaSA9IGZ1bmN0aW9uICgga2V5ICkgewoJdmFyIHBhcnNlZCA9IHV0aWxpdHkucGFyc2UoIHRoaXMudXJpICk7CgoJcmV0dXJuIHBhcnNlZC5wcm90b2NvbCArICIvLyIgKyBwYXJzZWQuaG9zdCArIHBhcnNlZC5wYXRobmFtZSArICggcmVnZXguZW5kc2xhc2gudGVzdCggcGFyc2VkLnBhdGhuYW1lICkgPyAiIiA6ICIvIiApICsga2V5Owp9OwoKLyoqCiAqIENsZWFycyB0aGUgZGF0YSBvYmplY3QsIHVuc2V0cyB0aGUgdXJpIHByb3BlcnR5CiAqCiAqIEV2ZW50czogYmVmb3JlRGF0YUNsZWFyIEZpcmVzIGJlZm9yZSB0aGUgZGF0YSBpcyBjbGVhcmVkCiAqICAgICAgICAgYWZ0ZXJEYXRhQ2xlYXIgIEZpcmVzIGFmdGVyIHRoZSBkYXRhIGlzIGNsZWFyZWQKICoKICogQG1ldGhvZCBjbGVhcgogKiBAcGFyYW0gIHtCb29sZWFufSBzeW5jIFtPcHRpb25hbF0gQm9vbGVhbiB0byBsaW1pdCBjbGVhcmluZyBvZiBwcm9wZXJ0aWVzCiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgRGF0YSBzdG9yZQogKi8KRGF0YVN0b3JlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICggc3luYyApIHsKCXN5bmMgICAgICAgPSAoIHN5bmMgPT09IHRydWUgKTsKCXZhciBldmVudHMgPSAoIHRoaXMuZXZlbnRzID09PSB0cnVlICk7CgoJaWYgKCAhc3luYyApIHsKCQlpZiAoIGV2ZW50cyApIHsKCQkJb2JzZXJ2ZXIuZmlyZSggdGhpcy5wYXJlbnROb2RlLCAiYmVmb3JlRGF0YUNsZWFyIiApOwoJCX0KCgkJYXJyYXkuZWFjaCggdGhpcy5kYXRhbGlzdHMsIGZ1bmN0aW9uICggaSApIHsKCQkJaS50ZWFyZG93biggdHJ1ZSApOwoJCX0pOwoKCQl0aGlzLmF1dG9zYXZlICAgID0gZmFsc2U7CgkJdGhpcy5jYWxsYmFjayAgICA9IG51bGw7CgkJdGhpcy5jb2xsZWN0aW9ucyA9IFtdOwoJCXRoaXMuY3JlZGVudGlhbHMgPSBudWxsOwoJCXRoaXMuZGF0YWxpc3RzICAgPSBbXTsKCQl0aGlzLmRlcHRoICAgICAgID0gMDsKCQl0aGlzLmV2ZW50cyAgICAgID0gdHJ1ZTsKCQl0aGlzLmV4cGlyZXMgICAgID0gbnVsbDsKCQl0aGlzLmhlYWRlcnMgICAgID0ge0FjY2VwdDogImFwcGxpY2F0aW9uL2pzb24ifTsKCQl0aGlzLmlnbm9yZSAgICAgID0gW107CgkJdGhpcy5rZXkgICAgICAgICA9IG51bGw7CgkJdGhpcy5rZXlzICAgICAgICA9IHt9OwoJCXRoaXMubGVhZnMgICAgICAgPSBbXTsKCQl0aGlzLmxvYWRlZCAgICAgID0gZmFsc2U7CgkJdGhpcy5tYXhEZXB0aCAgICA9IDA7CgkJdGhpcy5wb2ludGVyICAgICA9IG51bGw7CgkJdGhpcy5yZWNvcmRzICAgICA9IFtdOwoJCXRoaXMucmV0cmlldmUgICAgPSBmYWxzZTsKCQl0aGlzLnNvdXJjZSAgICAgID0gbnVsbDsKCQl0aGlzLnRvdGFsICAgICAgID0gMDsKCQl0aGlzLnZlcnNpb25zICAgID0ge307CgkJdGhpcy52ZXJzaW9uaW5nICA9IHRydWU7CgkJdGhpcy52aWV3cyAgICAgICA9IHt9OwoJCXRoaXMudXJpICAgICAgICAgPSBudWxsOwoKCQlpZiAoIGV2ZW50cyApIHsKCQkJb2JzZXJ2ZXIuZmlyZSggdGhpcy5wYXJlbnROb2RlLCAiYWZ0ZXJEYXRhQ2xlYXIiICk7CgkJfQoJfQoJZWxzZSB7CgkJdGhpcy5jb2xsZWN0aW9ucyA9IFtdOwoJCXRoaXMua2V5cyAgICAgICAgPSB7fTsKCQl0aGlzLmxvYWRlZCAgICAgID0gZmFsc2U7CgkJdGhpcy5yZWNvcmRzICAgICA9IFtdOwoJCXRoaXMudG90YWwgICAgICAgPSAwOwoJCXRoaXMudmVyc2lvbnMgICAgPSB7fTsKCQl0aGlzLnZpZXdzICAgICAgID0ge307CgoJCWFycmF5LmVhY2goIHRoaXMuZGF0YWxpc3RzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCWkucmVmcmVzaCgpOwoJCX0pOwoJfQoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIENyYXdscyBhIHJlY29yZCdzIHByb3BlcnRpZXMgYW5kIGNyZWF0ZXMgRGF0YVN0b3JlcyB3aGVuIFVSSXMgYXJlIGRldGVjdGVkCiAqCiAqIEV2ZW50czogYmVmb3JlRGF0YVJldHJpZXZlIEZpcmVzIGJlZm9yZSBjcmF3bGluZyBhIHJlY29yZAogKiAgICAgICAgIGFmdGVyRGF0YVJldHJpZXZlICBGaXJlcyBhZnRlciB0aGUgc3RvcmUgaGFzIHJldHJpZXZlZCBhbGwgZGF0YSBmcm9tIGNyYXdsaW5nCiAqICAgICAgICAgZmFpbGVkRGF0YVJldHJpZXZlIEZpcmVzIGlmIGFuIGV4Y2VwdGlvbiBvY2N1cnMKICoKICogQG1ldGhvZCBjcmF3bAogKiBAcGFyYW0gIHtNaXhlZH0gIGFyZyBSZWNvcmQsIGtleSBvciBpbmRleAogKiBAcmV0dXJuIHtPYmplY3R9ICAgICBEZWZlcnJlZAogKi8KRGF0YVN0b3JlLnByb3RvdHlwZS5jcmF3bCA9IGZ1bmN0aW9uICggYXJnICkgewoJdmFyIHNlbGYgICAgICA9IHRoaXMsCgkgICAgZXZlbnRzICAgID0gKCB0aGlzLmV2ZW50cyA9PT0gdHJ1ZSApLAoJICAgIHJlY29yZCAgICA9ICggYXJnIGluc3RhbmNlb2YgT2JqZWN0ICkgPyBhcmcgOiB0aGlzLmdldCggYXJnICksCgkgICAgZGVmZXIgICAgID0gZGVmZXJyZWQoKSwKCSAgICBkZWZlcnJlZHMgPSBbXSwKCSAgICBwYXJzZWQgICAgPSB1dGlsaXR5LnBhcnNlKCB0aGlzLnVyaSB8fCAiIiApLAoJICAgIGNsb25lOwoKCWlmICggdGhpcy51cmkgPT09IG51bGwgfHwgcmVjb3JkID09PSB1bmRlZmluZWQgKSB7CgkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7Cgl9CgoJaWYgKCBldmVudHMgKSB7CgkJb2JzZXJ2ZXIuZmlyZSggdGhpcy5wYXJlbnROb2RlLCAiYmVmb3JlRGF0YVJldHJpZXZlIiwgcmVjb3JkICk7Cgl9CgoJLy8gQW4gQXJyYXkgaXMgY29uc2lkZXJlZCBhIGNvbGxlY3Rpb24KCWlmICggcmVjb3JkLmRhdGEgaW5zdGFuY2VvZiBBcnJheSApIHsKCQljbG9uZSAgICAgICA9IHV0aWxpdHkuY2xvbmUoIHJlY29yZC5kYXRhICk7CgkJcmVjb3JkLmRhdGEgPSB7fTsKCgkJYXJyYXkuZWFjaCggY2xvbmUsIGZ1bmN0aW9uICggaSApIHsKCQkJdmFyIGtleSA9IGkucmVwbGFjZSggLy4qXC8vLCAiIiApLAoJCQkgICAgdXJpOwoKCQkJcmVjb3JkLmRhdGFba2V5XSA9IGRhdGEoIHtpZDogcmVjb3JkLmtleSArICItIiArIGtleX0sIG51bGwsIHtrZXk6IHNlbGYua2V5LCBwb2ludGVyOiBzZWxmLnBvaW50ZXIsIHNvdXJjZTogc2VsZi5zb3VyY2UsIGlnbm9yZTogc2VsZi5pZ25vcmUuc2xpY2UoKSwgbGVhZnM6IHNlbGYubGVhZnMuc2xpY2UoKSwgZGVwdGg6IHNlbGYuZGVwdGggKyAxLCBtYXhEZXB0aDogc2VsZi5tYXhEZXB0aCwgaGVhZGVyczogc2VsZi5oZWFkZXJzLCByZXRyaWV2ZTogdHJ1ZX0gKTsKCgkJCWlmICggaS5pbmRleE9mKCAiLy8iICkgPT09IC0xICkgewoJCQkJLy8gUmVsYXRpdmUgcGF0aCB0byBzdG9yZSwgaS5lLiBhIGNoaWxkCgkJCQlpZiAoIGkuY2hhckF0KCAwICkgIT09ICIvIiApIHsKCQkJCQl1cmkgPSBzZWxmLmJ1aWxkVXJpKCBpICk7CgkJCQl9CgkJCQkvLyBSb290IHBhdGgsIHJlbGF0aXZlIHRvIHN0b3JlLCBpLmUuIGEgZG9tYWluCgkJCQllbHNlIHsKCQkJCQl1cmkgPSBwYXJzZWQucHJvdG9jb2wgKyAiLy8iICsgcGFyc2VkLmhvc3QgKyBpOwoJCQkJfQoJCQl9CgkJCWVsc2UgewoJCQkJdXJpID0gaTsKCQkJfQoKCQkJZGVmZXJyZWRzLnB1c2goIHJlY29yZC5kYXRhW2tleV0uZGF0YS5zZXRVcmkoIHVyaSApICk7CgkJfSApOwoJfQoJZWxzZSB7CgkJLy8gRGVwdGggb2YgcmVjdXJzaW9uIGlzIGNvbnRyb2xlZCBieSBgbWF4RGVwdGhgCgkJdXRpbGl0eS5pdGVyYXRlKCByZWNvcmQuZGF0YSwgZnVuY3Rpb24gKCB2LCBrICkgewoJCQl2YXIgdXJpOwoKCQkJaWYgKCBhcnJheS5jb250YWlucyggc2VsZi5pZ25vcmUsIGsgKSB8fCBhcnJheS5jb250YWlucyggc2VsZi5sZWFmcywgayApIHx8IHNlbGYuZGVwdGggPj0gc2VsZi5tYXhEZXB0aCB8fCAoICEoIHYgaW5zdGFuY2VvZiBBcnJheSApICYmIHR5cGVvZiB2ICE9PSAic3RyaW5nIiApIHx8ICggdi5pbmRleE9mKCAiLy8iICkgPT09IC0xICYmIHYuY2hhckF0KCAwICkgIT09ICIvIiApICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQlhcnJheS5hZGQoIHNlbGYuY29sbGVjdGlvbnMsIGsgKTsKCgkJCXJlY29yZC5kYXRhW2tdID0gZGF0YSgge2lkOiByZWNvcmQua2V5ICsgIi0iICsga30sIG51bGwsIHtrZXk6IHNlbGYua2V5LCBwb2ludGVyOiBzZWxmLnBvaW50ZXIsIHNvdXJjZTogc2VsZi5zb3VyY2UsIGlnbm9yZTogc2VsZi5pZ25vcmUuc2xpY2UoKSwgbGVhZnM6IHNlbGYubGVhZnMuc2xpY2UoKSwgZGVwdGg6IHNlbGYuZGVwdGggKyAxLCBtYXhEZXB0aDogc2VsZi5tYXhEZXB0aCwgaGVhZGVyczogc2VsZi5oZWFkZXJzLCByZXRyaWV2ZTogdHJ1ZX0gKTsKCgkJCWlmICggIWFycmF5LmNvbnRhaW5zKCBzZWxmLmxlYWZzLCBrICkgJiYgKCByZWNvcmQuZGF0YVtrXS5kYXRhLm1heERlcHRoID09PSAwIHx8IHJlY29yZC5kYXRhW2tdLmRhdGEuZGVwdGggPD0gcmVjb3JkLmRhdGFba10uZGF0YS5tYXhEZXB0aCApICkgewoJCQkJaWYgKCB2IGluc3RhbmNlb2YgQXJyYXkgKSB7CgkJCQkJZGVmZXJyZWRzLnB1c2goIHJlY29yZC5kYXRhW2tdLmRhdGEuYmF0Y2goICJzZXQiLCB2ICkgKTsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCWlmICggdi5pbmRleE9mKCAiLy8iICkgPT09IC0xICkgewoJCQkJCQkvLyBSZWxhdGl2ZSBwYXRoIHRvIHN0b3JlLCBpLmUuIGEgY2hpbGQKCQkJCQkJaWYgKCB2LmNoYXJBdCggMCApICE9PSAiLyIgKSB7CgkJCQkJCQl1cmkgPSBzZWxmLmJ1aWxkVXJpKCB2ICk7CgkJCQkJCX0KCQkJCQkJLy8gUm9vdCBwYXRoLCByZWxhdGl2ZSB0byBzdG9yZSwgaS5lLiBhIGRvbWFpbgoJCQkJCQllbHNlIHsKCQkJCQkJCXVyaSA9IHBhcnNlZC5wcm90b2NvbCArICIvLyIgKyBwYXJzZWQuaG9zdCArIHY7CgkJCQkJCX0KCQkJCQl9CgkJCQkJZWxzZSB7CgkJCQkJCXVyaSA9IHY7CgkJCQkJfQoKCQkJCQlkZWZlcnJlZHMucHVzaCggcmVjb3JkLmRhdGFba10uZGF0YS5zZXRVcmkoIHVyaSApICk7CgkJCQl9CgkJCX0KCQl9KTsKCX0KCglpZiAoIGRlZmVycmVkcy5sZW5ndGggPiAwICkgewoJCXV0aWxpdHkud2hlbiggZGVmZXJyZWRzICkudGhlbiggZnVuY3Rpb24gKCkgewoJCQlpZiAoIGV2ZW50cyApIHsKCQkJCW9ic2VydmVyLmZpcmUoIHNlbGYucGFyZW50Tm9kZSwgImFmdGVyRGF0YVJldHJpZXZlIiwgcmVjb3JkICk7CgkJCX0KCgkJCWRlZmVyLnJlc29sdmUoIHJlY29yZCApOwoJCX0sIGZ1bmN0aW9uICggZSApIHsKCQkJaWYgKCBldmVudHMgKSB7CgkJCQlvYnNlcnZlci5maXJlKCBzZWxmLnBhcmVudE5vZGUsICJmYWlsZWREYXRhUmV0cmlldmUiLCByZWNvcmQgKTsKCQkJfQoKCQkJZGVmZXIucmVqZWN0KCBlICk7CgkJfSk7Cgl9CgllbHNlIHsKCQlpZiAoIGV2ZW50cyApIHsKCQkJb2JzZXJ2ZXIuZmlyZSggc2VsZi5wYXJlbnROb2RlLCAiYWZ0ZXJEYXRhUmV0cmlldmUiLCByZWNvcmQgKTsKCQl9CgoJCWRlZmVyLnJlc29sdmUoIHJlY29yZCApOwoJfQoKCXJldHVybiBkZWZlcjsKfTsKCi8qKgogKiBEZWxldGVzIGEgcmVjb3JkIGJhc2VkIG9uIGtleSBvciBpbmRleAogKgogKiBFdmVudHM6IGJlZm9yZURhdGFEZWxldGUgIEZpcmVzIGJlZm9yZSB0aGUgcmVjb3JkIGlzIGRlbGV0ZWQKICogICAgICAgICBhZnRlckRhdGFEZWxldGUgICBGaXJlcyBhZnRlciB0aGUgcmVjb3JkIGlzIGRlbGV0ZWQKICogICAgICAgICBmYWlsZWREYXRhRGVsZXRlICBGaXJlcyBpZiB0aGUgc3RvcmUgaXMgUkVTVGZ1bCBhbmQgdGhlIGFjdGlvbiBpcyBkZW5pZWQKICoKICogQG1ldGhvZCBkZWwKICogQHBhcmFtICB7TWl4ZWR9ICAgcmVjb3JkICBSZWNvcmQsIGtleSBvciBpbmRleAogKiBAcGFyYW0gIHtCb29sZWFufSByZWluZGV4IFtPcHRpb25hbF0gYHRydWVgIGlmIERhdGFTdG9yZSBzaG91bGQgYmUgcmVpbmRleGVkCiAqIEBwYXJhbSAge0Jvb2xlYW59IGJhdGNoICAgW09wdGlvbmFsXSBgdHJ1ZWAgaWYgcGFydCBvZiBhIGJhdGNoIG9wZXJhdGlvbgogKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgIERlZmVycmVkCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uICggcmVjb3JkLCByZWluZGV4LCBiYXRjaCApIHsKCXJlY29yZCAgICA9IHJlY29yZC5rZXkgPyByZWNvcmQgOiB0aGlzLmdldCAoIHJlY29yZCApOwoJcmVpbmRleCAgID0gKCByZWluZGV4ICE9PSBmYWxzZSApOwoJYmF0Y2ggICAgID0gKCBiYXRjaCA9PT0gdHJ1ZSApOwoJdmFyIHNlbGYgID0gdGhpcywKCSAgICBkZWZlciA9IGRlZmVycmVkKCk7CgoJaWYgKCByZWNvcmQgPT09IHVuZGVmaW5lZCApIHsKCQlkZWZlci5yZWplY3QoIG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApICk7Cgl9CgllbHNlIHsKCQlpZiAoIHRoaXMuZXZlbnRzICkgewoJCQlvYnNlcnZlci5maXJlKCBzZWxmLnBhcmVudE5vZGUsICJiZWZvcmVEYXRhRGVsZXRlIiwgcmVjb3JkICk7CgkJfQoKCQlpZiAoIHRoaXMudXJpID09PSBudWxsIHx8IHRoaXMuY2FsbGJhY2sgIT09IG51bGwgKSB7CgkJCXRoaXMuZGVsQ29tcGxldGUoIHJlY29yZCwgcmVpbmRleCwgYmF0Y2gsIGRlZmVyICk7CgkJfQoJCWVsc2UgewoJCQljbGllbnQucmVxdWVzdCggdGhpcy5idWlsZFVyaSggcmVjb3JkLmtleSApLCAiREVMRVRFIiwgZnVuY3Rpb24gKCkgewoJCQkJc2VsZi5kZWxDb21wbGV0ZSggcmVjb3JkLCByZWluZGV4LCBiYXRjaCwgZGVmZXIgKTsKCQkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJb2JzZXJ2ZXIuZmlyZSggc2VsZi5wYXJlbnROb2RlLCAiZmFpbGVkRGF0YURlbGV0ZSIsIGUgKTsKCQkJCWRlZmVyLnJlamVjdCggZSApOwoJCQl9LCB1bmRlZmluZWQsIHV0aWxpdHkubWVyZ2UoIHt3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY3JlZGVudGlhbHN9LCB0aGlzLmhlYWRlcnMgKSApOwoJCX0KCX0KCglyZXR1cm4gZGVmZXI7Cn07CgovKioKICogRGVsZXRlIGNvbXBsZXRpb24KICoKICogQG1ldGhvZCBkZWxDb21wbGV0ZQogKiBAcGFyYW0gIHtPYmplY3R9ICByZWNvcmQgIERhdGFTdG9yZSByZWNvcmQKICogQHBhcmFtICB7Qm9vbGVhbn0gcmVpbmRleCBgdHJ1ZWAgaWYgRGF0YVN0b3JlIHNob3VsZCBiZSByZWluZGV4ZWQKICogQHBhcmFtICB7Qm9vbGVhbn0gYmF0Y2ggICBgdHJ1ZWAgaWYgcGFydCBvZiBhIGJhdGNoIG9wZXJhdGlvbgogKiBAcGFyYW0gIHtPYmplY3R9ICBkZWZlciAgIERlZmVycmVkIGluc3RhbmNlCiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgRGF0YVN0b3JlIGluc3RhbmNlCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLmRlbENvbXBsZXRlID0gZnVuY3Rpb24gKCByZWNvcmQsIHJlaW5kZXgsIGJhdGNoLCBkZWZlciApIHsKCWRlbGV0ZSB0aGlzLmtleXNbcmVjb3JkLmtleV07CglkZWxldGUgdGhpcy52ZXJzaW9uc1tyZWNvcmQua2V5XTsKCgl0aGlzLnJlY29yZHMucmVtb3ZlKCByZWNvcmQuaW5kZXggKTsKCgl0aGlzLnRvdGFsLS07Cgl0aGlzLnZpZXdzID0ge307CgoJYXJyYXkuZWFjaCggdGhpcy5jb2xsZWN0aW9ucywgZnVuY3Rpb24gKCBpICkgewoJCXJlY29yZC5kYXRhW2ldLnRlYXJkb3duKCk7Cgl9KTsKCglpZiAoICFiYXRjaCApIHsKCQlpZiAoIHJlaW5kZXggKSB7CgkJCXRoaXMucmVpbmRleCgpOwoJCX0KCgkJaWYgKCB0aGlzLmF1dG9zYXZlICkgewoJCQl0aGlzLnB1cmdlKCByZWNvcmQua2V5ICk7CgkJfQoKCQlpZiAoIHRoaXMuZXZlbnRzICkgewoJCQlvYnNlcnZlci5maXJlKCB0aGlzLnBhcmVudE5vZGUsICJhZnRlckRhdGFEZWxldGUiLCByZWNvcmQgKTsKCQl9CgoJCWFycmF5LmVhY2goIHRoaXMuZGF0YWxpc3RzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCWkucmVmcmVzaCgpOwoJCX0pOwoJfQoKCWRlZmVyLnJlc29sdmUoIHJlY29yZC5rZXkgKTsKCglyZXR1cm4gdGhpczsKfTsKCi8qKgogKiBFeHBvcnRzIGEgc3Vic2V0IG9yIGNvbXBsZXRlIHJlY29yZCBzZXQgb2YgRGF0YVN0b3JlCiAqCiAqIEBtZXRob2QgZHVtcAogKiBAcHVibGljCiAqIEBwYXJhbSAge0FycmF5fSBhcmdzICAgW09wdGlvbmFsXSBTdWItZGF0YSBzZXQgb2YgRGF0YVN0b3JlCiAqIEBwYXJhbSAge0FycmF5fSBmaWVsZHMgW09wdGlvbmFsXSBGaWVsZHMgdG8gZXhwb3J0LCBkZWZhdWx0cyB0byBhbGwKICogQHJldHVybiB7QXJyYXl9ICAgICAgICBSZWNvcmRzCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLmR1bXAgPSBmdW5jdGlvbiAoIGFyZ3MsIGZpZWxkcyApIHsKCWFyZ3MgICAgICAgPSBhcmdzIHx8IHRoaXMucmVjb3JkczsKCXZhciBzZWxmICAgPSB0aGlzLAoJICAgIGN1c3RvbSA9ICggZmllbGRzIGluc3RhbmNlb2YgQXJyYXkgJiYgZmllbGRzLmxlbmd0aCA+IDAgKSwKCSAgICBrZXkgICAgPSB0aGlzLmtleSAhPT0gbnVsbCwKCSAgICBmbjsKCglpZiAoIGN1c3RvbSApIHsKCQlmbiA9IGZ1bmN0aW9uICggaSApIHsKCQkJdmFyIHJlY29yZCA9IHt9OwoKCQkJYXJyYXkuZWFjaCggZmllbGRzLCBmdW5jdGlvbiAoIGYgKSB7CgkJCQlyZWNvcmRbZl0gPSBmID09PSBzZWxmLmtleSA/IGkua2V5IDogKCAhYXJyYXkuY29udGFpbnMoIHNlbGYuY29sbGVjdGlvbnMsIGYgKSA/IHV0aWxpdHkuY2xvbmUoIGkuZGF0YVtmXSwgdHJ1ZSApIDogaS5kYXRhW2ZdLmRhdGEudXJpICk7CgkJCX0pOwoKCQkJcmV0dXJuIHJlY29yZDsKCQl9OwoJfQoJZWxzZSB7CgkJZm4gPSBmdW5jdGlvbiAoIGkgKSB7CgkJCXZhciByZWNvcmQgPSB7fTsKCgkJCWlmICgga2V5ICkgewoJCQkJcmVjb3JkW3NlbGYua2V5XSA9IGkua2V5OwoJCQl9CgoJCQl1dGlsaXR5Lml0ZXJhdGUoIGkuZGF0YSwgZnVuY3Rpb24gKCB2LCBrICkgewoJCQkJcmVjb3JkW2tdID0gIWFycmF5LmNvbnRhaW5zKCBzZWxmLmNvbGxlY3Rpb25zLCBrICkgPyB1dGlsaXR5LmNsb25lKCB2LCB0cnVlICkgOiB2LmRhdGEudXJpOwoJCQl9KTsKCgkJCXJldHVybiByZWNvcmQ7CgkJfTsKCX0KCglyZXR1cm4gYXJncy5tYXAoIGZuICk7Cn07CgovKioKICogRmluZHMgbmVlZGxlIGluIHRoZSBoYXlzdGFjawogKgogKiBAbWV0aG9kIGZpbmQKICogQHBhcmFtICB7TWl4ZWR9ICBuZWVkbGUgICAgU3RyaW5nLCBOdW1iZXIsIFJlZ0V4cCBQYXR0ZXJuIG9yIEZ1bmN0aW9uCiAqIEBwYXJhbSAge1N0cmluZ30gaGF5c3RhY2sgIFtPcHRpb25hbF0gQ29tbW1hIGRlbGltaXRlZCBzdHJpbmcgb2YgdGhlIGZpZWxkKCBzICkgdG8gc2VhcmNoCiAqIEBwYXJhbSAge1N0cmluZ30gbW9kaWZpZXJzIFtPcHRpb25hbF0gUmVnZXggbW9kaWZpZXJzLCBkZWZhdWx0cyB0byAiZ2kiIHVubGVzcyB2YWx1ZSBpcyBudWxsCiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgIEFycmF5IG9mIHJlc3VsdHMKICovCkRhdGFTdG9yZS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uICggbmVlZGxlLCBoYXlzdGFjaywgbW9kaWZpZXJzICkgewoJaWYgKCBuZWVkbGUgPT09IHVuZGVmaW5lZCApIHsKCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCX0KCgl2YXIgcmVzdWx0ID0gW10sCgkgICAga2V5cyAgID0gW10sCgkgICAgcmVnZXggID0gbmV3IFJlZ0V4cCgpLAoJICAgIGZuICAgICA9IHR5cGVvZiBuZWVkbGUgPT09ICJmdW5jdGlvbiI7CgoJLy8gQmxvY2tpbmcgdW5uZWNlc3Nhcnkgb3BzCglpZiAoIHRoaXMudG90YWwgPT09IDAgKSB7CgkJcmV0dXJuIHJlc3VsdDsKCX0KCgkvLyBQcmVwYXJpbmcgcGFyYW1ldGVycwoJaWYgKCAhZm4gKSB7CgkJbmVlZGxlID0gdHlwZW9mIG5lZWRsZSA9PT0gInN0cmluZyIgPyBzdHJpbmcuZXhwbG9kZSggbmVlZGxlICkgOiBbbmVlZGxlXTsKCgkJaWYgKCBtb2RpZmllcnMgPT09IHVuZGVmaW5lZCB8fCBzdHJpbmcuaXNFbXB0eSggbW9kaWZpZXJzICkgKSB7CgkJCW1vZGlmaWVycyA9ICJnaSI7CgkJfQoJCWVsc2UgaWYgKCBtb2RpZmllcnMgPT09IG51bGwgKSB7CgkJCW1vZGlmaWVycyA9ICIiOwoJCX0KCX0KCgloYXlzdGFjayA9IHR5cGVvZiBoYXlzdGFjayA9PT0gInN0cmluZyIgPyBzdHJpbmcuZXhwbG9kZSggaGF5c3RhY2sgKSA6IG51bGw7CgoJLy8gTm8gaGF5c3RhY2ssIHRlc3RpbmcgZXZlcnl0aGluZwoJaWYgKCBoYXlzdGFjayA9PT0gbnVsbCApIHsKCQlhcnJheS5lYWNoKCB0aGlzLnJlY29yZHMsIGZ1bmN0aW9uICggciApIHsKCQkJaWYgKCAhZm4gKSB7CgkJCQl1dGlsaXR5Lml0ZXJhdGUoIHIuZGF0YSwgZnVuY3Rpb24gKCB2ICkgewoJCQkJCWlmICggYXJyYXkuY29udGFpbnMoIGtleXMsIHIua2V5ICkgKSB7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgoJCQkJCWlmICggdiA9PT0gbnVsbCB8fCB0eXBlb2Ygdi5kYXRhID09PSAib2JqZWN0IiApIHsKCQkJCQkJcmV0dXJuOwoJCQkJCX0KCgkJCQkJYXJyYXkuZWFjaCggbmVlZGxlLCBmdW5jdGlvbiAoIG4gKSB7CgkJCQkJCXV0aWxpdHkuY29tcGlsZSggcmVnZXgsIG4sIG1vZGlmaWVycyApOwoKCQkJCQkJaWYgKCByZWdleC50ZXN0KCB2ICkgKSB7CgkJCQkJCQlrZXlzLnB1c2goIHIua2V5ICk7CgkJCQkJCQlyZXN1bHQucHVzaCggciApOwoKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJfQoJCQkJCX0pOwoJCQkJfSk7CgkJCX0KCQkJZWxzZSBpZiAoIG5lZWRsZSggciApID09PSB0cnVlICkgewoJCQkJa2V5cy5wdXNoKCByLmtleSApOwoJCQkJcmVzdWx0LnB1c2goIHIgKTsKCQkJfQoJCX0pOwoJfQoJLy8gTG9va2luZyB0aHJvdWdoIHRoZSBoYXlzdGFjawoJZWxzZSB7CgkJYXJyYXkuZWFjaCggdGhpcy5yZWNvcmRzLCBmdW5jdGlvbiAoIHIgKSB7CgkJCWFycmF5LmVhY2goIGhheXN0YWNrLCBmdW5jdGlvbiAoIGggKSB7CgkJCQlpZiAoIGFycmF5LmNvbnRhaW5zKCBrZXlzLCByLmtleSApICkgewoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCgkJCQlpZiAoIHIuZGF0YVtoXSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiByLmRhdGFbaF0uZGF0YSA9PT0gIm9iamVjdCIgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCWlmICggIWZuICkgewoJCQkJCWFycmF5LmVhY2goIG5lZWRsZSwgZnVuY3Rpb24gKCBuICkgewoJCQkJCQl1dGlsaXR5LmNvbXBpbGUoIHJlZ2V4LCBuLCBtb2RpZmllcnMgKTsKCgkJCQkJCWlmICggcmVnZXgudGVzdCggci5kYXRhW2hdICkgKSB7CgkJCQkJCQlrZXlzLnB1c2goIHIua2V5ICk7CgkJCQkJCQlyZXN1bHQucHVzaCggciApOwoKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJfQoJCQkJCX0pOwoJCQkJfQoJCQkJZWxzZSBpZiAoIG5lZWRsZSggci5kYXRhW2hdICkgPT09IHRydWUgKSB7CgkJCQkJa2V5cy5wdXNoKCByLmtleSApOwoJCQkJCXJlc3VsdC5wdXNoKCByICk7CgoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJfSk7CgkJfSk7Cgl9CgoJcmV0dXJuIHJlc3VsdDsKfTsKCi8qKgogKiBSZXRyaWV2ZXMgYSByZWNvcmQgYmFzZWQgb24ga2V5IG9yIGluZGV4CiAqCiAqIElmIHRoZSBrZXkgaXMgYW4gaW50ZWdlciwgY2FzdCB0byBhIHN0cmluZyBiZWZvcmUgc2VuZGluZyBhcyBhbiBhcmd1bWVudCEKICoKICogQG1ldGhvZCBnZXQKICogQHBhcmFtICB7TWl4ZWR9ICByZWNvcmQgS2V5LCBpbmRleCBvciBBcnJheSBvZiBwYWdpbmF0aW9uIHN0YXJ0ICYgZW5kOyBvciBjb21tYSBkZWxpbWl0ZWQgU3RyaW5nIG9mIGtleXMgb3IgaW5kaWNlcwogKiBAcGFyYW0gIHtOdW1iZXJ9IG9mZnNldCBbT3B0aW9uYWxdIE9mZnNldCBmcm9tIGByZWNvcmRgIGZvciBwYWdpbmF0aW9uCiAqIEByZXR1cm4ge01peGVkfSAgICAgICAgIEluZGl2aWR1YWwgcmVjb3JkLCBvciBBcnJheSBvZiByZWNvcmRzCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICggcmVjb3JkLCBvZmZzZXQgKSB7Cgl2YXIgcmVjb3JkcyA9IHRoaXMucmVjb3JkcywKCSAgICB0eXBlICAgID0gdHlwZW9mIHJlY29yZCwKCSAgICBzZWxmICAgID0gdGhpcywKCSAgICByOwoKCWlmICggdHlwZSA9PT0gInVuZGVmaW5lZCIgKSB7CgkJciA9IHJlY29yZHM7Cgl9CgllbHNlIGlmICggdHlwZSA9PT0gInN0cmluZyIgKSB7CgkJaWYgKCByZWNvcmQuaW5kZXhPZiggIiwiICkgPT09IC0xICkgewoJCQlyID0gcmVjb3Jkc1tzZWxmLmtleXNbcmVjb3JkXV07CgkJfQoJCWVsc2UgewoJCQlyID0gc3RyaW5nLmV4cGxvZGUoIHJlY29yZCApLm1hcCggZnVuY3Rpb24gKCBpICkgewoJCQkJaWYgKCAhaXNOYU4oIGkgKSApIHsKCQkJCQlyZXR1cm4gcmVjb3Jkc1twYXJzZUludCggaSwgMTAgKV07CgkJCQl9CgkJCQllbHNlIHsKCQkJCQlyZXR1cm4gcmVjb3Jkc1tzZWxmLmtleXNbaV1dOwoJCQkJfQoJCQl9KTsKCQl9Cgl9CgllbHNlIGlmICggdHlwZSA9PT0gIm51bWJlciIgKSB7CgkJaWYgKCBpc05hTiggb2Zmc2V0ICkgKSB7CgkJCXIgPSByZWNvcmRzW3BhcnNlSW50KCByZWNvcmQsIDEwICldOwoJCX0KCQllbHNlIHsKCQkJciA9IGFycmF5LmxpbWl0KCByZWNvcmRzLCBwYXJzZUludCggcmVjb3JkLCAxMCApLCBwYXJzZUludCggb2Zmc2V0LCAxMCApICk7CgkJfQoJfQoKCXJldHVybiByOwp9LAoKLyoqCiAqIFBlcmZvcm1zIGFuIChJTk5FUi9MRUZUL1JJR0hUKSBKT0lOIG9uIHR3byBEYXRhU3RvcmVzCiAqCiAqIEBtZXRob2Qgam9pbgogKiBAcHVibGljCiAqIEBwYXJhbSAge1N0cmluZ30gYXJnICAgRGF0YVN0b3JlIHRvIGpvaW4KICogQHBhcmFtICB7U3RyaW5nfSBmaWVsZCBGaWVsZCBpbiBib3RoIERhdGFTdG9yZXMKICogQHBhcmFtICB7U3RyaW5nfSBqb2luICBUeXBlIG9mIEpPSU4gdG8gcGVyZm9ybSwgZGVmYXVsdHMgdG8gYGlubmVyYAogKiBAcmV0dXJuIHtBcnJheX0gICAgICAgIEFycmF5IG9mIHJlY29yZHMKICovCkRhdGFTdG9yZS5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uICggYXJnLCBmaWVsZCwgam9pbiApIHsKCWpvaW4gICAgICAgID0gam9pbiB8fCAiaW5uZXIiOwoJdmFyIHNlbGYgICAgPSB0aGlzLAoJICAgIHJlc3VsdHMgPSBbXSwKCSAgICBrZXkgICAgID0gZmllbGQgPT09IHRoaXMua2V5LAoJICAgIGtleXMgICAgPSBhcnJheS5tZXJnZSggYXJyYXkuY2FzdCggdGhpcy5yZWNvcmRzWzBdLmRhdGEsIHRydWUgKSwgYXJyYXkuY2FzdCggYXJnLmRhdGEucmVjb3Jkc1swXS5kYXRhLCB0cnVlICkgKSwKCQlmbjsKCglpZiAoIGpvaW4gPT09ICJpbm5lciIgKSB7CgkJZm4gPSBmdW5jdGlvbiAoIGkgKSB7CgkJCXZhciB3aGVyZSA9IHt9LAoJCQkJbWF0Y2g7CgoJCQl3aGVyZVtmaWVsZF0gPSBrZXkgPyBpLmtleSA6IGkuZGF0YVtmaWVsZF07CgkJCW1hdGNoICAgICAgICA9IGFyZy5kYXRhLnNlbGVjdCggd2hlcmUgKTsKCgkJCWlmICggbWF0Y2gubGVuZ3RoID4gMiApIHsKCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuZGF0YWJhc2VNb3JlVGhhbk9uZSApOwoJCQl9CgkJCWVsc2UgaWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7CgkJCQlyZXN1bHRzLnB1c2goIHV0aWxpdHkubWVyZ2UoIHV0aWxpdHkuY2xvbmUoIGkuZGF0YSwgdHJ1ZSApLCB1dGlsaXR5LmNsb25lKCBtYXRjaFswXS5kYXRhLCB0cnVlICkgKSApOwoJCQl9CgkJfTsKCX0KCWVsc2UgaWYgKCBqb2luID09PSAibGVmdCIgKSB7CgkJZm4gPSBmdW5jdGlvbiAoIGkgKSB7CgkJCXZhciB3aGVyZSAgPSB7fSwKCQkJICAgIHJlY29yZCA9IHV0aWxpdHkuY2xvbmUoIGkuZGF0YSwgdHJ1ZSApLAoJCQkJbWF0Y2g7CgoJCQl3aGVyZVtmaWVsZF0gPSBrZXkgPyBpLmtleSA6IGkuZGF0YVtmaWVsZF07CgkJCW1hdGNoICAgICAgICA9IGFyZy5kYXRhLnNlbGVjdCggd2hlcmUgKTsKCgkJCWlmICggbWF0Y2gubGVuZ3RoID4gMiApIHsKCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuZGF0YWJhc2VNb3JlVGhhbk9uZSApOwoJCQl9CgkJCWVsc2UgaWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7CgkJCQlyZXN1bHRzLnB1c2goIHV0aWxpdHkubWVyZ2UoIHV0aWxpdHkuY2xvbmUoIHJlY29yZCwgdHJ1ZSApLCB1dGlsaXR5LmNsb25lKCBtYXRjaFswXS5kYXRhLCB0cnVlICkgKSApOwoJCQl9CgkJCWVsc2UgewoJCQkJYXJyYXkuZWFjaCgga2V5cywgZnVuY3Rpb24gKCBpICkgewoJCQkJCWlmICggcmVjb3JkW2ldID09PSB1bmRlZmluZWQgKSB7CgkJCQkJCXJlY29yZFtpXSA9IG51bGw7CgkJCQkJfQoJCQkJfSk7CgoJCQkJcmVzdWx0cy5wdXNoKCByZWNvcmQgKTsKCQkJfQoJCX07Cgl9CgllbHNlIGlmICggam9pbiA9PT0gInJpZ2h0IiApIHsKCQlmbiA9IGZ1bmN0aW9uICggaSApIHsKCQkJdmFyIHdoZXJlICA9IHt9LAoJCQkgICAgcmVjb3JkID0gdXRpbGl0eS5jbG9uZSggaS5kYXRhLCB0cnVlICksCgkJCQltYXRjaDsKCgkJCXdoZXJlW2ZpZWxkXSA9IGtleSA/IGkua2V5IDogaS5kYXRhW2ZpZWxkXTsKCQkJbWF0Y2ggICAgICAgID0gc2VsZi5zZWxlY3QoIHdoZXJlICk7CgoJCQlpZiAoIG1hdGNoLmxlbmd0aCA+IDIgKSB7CgkJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmRhdGFiYXNlTW9yZVRoYW5PbmUgKTsKCQkJfQoJCQllbHNlIGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkgewoJCQkJcmVzdWx0cy5wdXNoKCB1dGlsaXR5Lm1lcmdlKCB1dGlsaXR5LmNsb25lKCByZWNvcmQsIHRydWUgKSwgdXRpbGl0eS5jbG9uZSggbWF0Y2hbMF0uZGF0YSwgdHJ1ZSApICkgKTsKCQkJfQoJCQllbHNlIHsKCQkJCWFycmF5LmVhY2goIGtleXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCQlpZiAoIHJlY29yZFtpXSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCQlyZWNvcmRbaV0gPSBudWxsOwoJCQkJCX0KCQkJCX0pOwoKCQkJCXJlc3VsdHMucHVzaCggcmVjb3JkICk7CgkJCX0KCQl9OwoJfQoKCWFycmF5LmVhY2goIGpvaW4gPT09ICJyaWdodCIgPyBhcmcuZGF0YS5yZWNvcmRzIDogdGhpcy5yZWNvcmRzLCBmbik7CgoJcmV0dXJuIHJlc3VsdHM7Cn07CgovKioKICogUmV0cmlldmVzIG9ubHkgMSBmaWVsZC9wcm9wZXJ0eQogKgogKiBAbWV0aG9kIG9ubHkKICogQHBhcmFtICB7U3RyaW5nfSBhcmcgRmllbGQvcHJvcGVydHkgdG8gcmV0cmlldmUKICogQHJldHVybiB7QXJyYXl9ICAgICAgQXJyYXkgb2YgdmFsdWVzCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLm9ubHkgPSBmdW5jdGlvbiAoIGFyZyApIHsKCWlmICggYXJnID09PSB0aGlzLmtleSApIHsKCQlyZXR1cm4gdGhpcy5yZWNvcmRzLm1hcCggZnVuY3Rpb24gKCBpICkgewoJCQlyZXR1cm4gaS5rZXk7CgkJfSk7Cgl9CgllbHNlIHsKCQlyZXR1cm4gdGhpcy5yZWNvcmRzLm1hcCggZnVuY3Rpb24gKCBpICkgewoJCQlyZXR1cm4gaS5kYXRhW2FyZ107CgkJfSk7Cgl9Cn07CgovKioKICogUHVyZ2VzIERhdGFTdG9yZSBvciByZWNvcmQgZnJvbSBsb2NhbFN0b3JhZ2UKICoKICogQG1ldGhvZCBwdXJnZQogKiBAcGFyYW0gIHtNaXhlZH0gYXJnICBbT3B0aW9uYWxdIFN0cmluZyBvciBOdW1iZXIgZm9yIHJlY29yZAogKiBAcmV0dXJuIHtPYmplY3R9ICAgICBSZWNvcmQgb3Igc3RvcmUKICovCkRhdGFTdG9yZS5wcm90b3R5cGUucHVyZ2UgPSBmdW5jdGlvbiAoIGFyZyApIHsKCXJldHVybiB0aGlzLnN0b3JhZ2UoIGFyZyB8fCB0aGlzLCAicmVtb3ZlIiApOwp9OwoKLyoqCiAqIFJlaW5kZXhlcyB0aGUgRGF0YVN0b3JlCiAqCiAqIEBtZXRob2QgcmVpbmRleAogKiBAcmV0dXJuIHtPYmplY3R9IERhdGEgc3RvcmUKICovCkRhdGFTdG9yZS5wcm90b3R5cGUucmVpbmRleCA9IGZ1bmN0aW9uICgpIHsKCXZhciBudGggPSB0aGlzLnRvdGFsLAoJICAgIGkgICA9IC0xOwoKCXRoaXMudmlld3MgPSB7fTsKCglpZiAoIG50aCA+IDAgKSB7CgkJd2hpbGUgKCArK2kgPCBudGggKSB7CgkJCXRoaXMucmVjb3Jkc1tpXS5pbmRleCA9IGk7CgkJCXRoaXMua2V5c1t0aGlzLnJlY29yZHNbaV0ua2V5XSA9IGk7CgkJfQoJfQoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIFJlc3RvcmVzIERhdGFTdG9yZSBvciByZWNvcmQgZnJvbWUgbG9jYWxTdG9yYWdlCiAqCiAqIEBtZXRob2QgcmVzdG9yZQogKiBAcGFyYW0gIHtNaXhlZH0gYXJnICBbT3B0aW9uYWxdIFN0cmluZyBvciBOdW1iZXIgZm9yIHJlY29yZAogKiBAcmV0dXJuIHtPYmplY3R9ICAgICBSZWNvcmQgb3Igc3RvcmUKICovCkRhdGFTdG9yZS5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uICggYXJnICkgewoJcmV0dXJuIHRoaXMuc3RvcmFnZSggYXJnIHx8IHRoaXMsICJnZXQiICk7Cn07CgovKioKICogU2F2ZXMgRGF0YVN0b3JlIG9yIHJlY29yZCB0byBsb2NhbFN0b3JhZ2UsIHNlc3Npb25TdG9yYWdlIG9yIE1vbmdvREIgKG5vZGUuanMgb25seSkKICoKICogQG1ldGhvZCBzYXZlCiAqIEBwYXJhbSAge01peGVkfSBhcmcgIFtPcHRpb25hbF0gU3RyaW5nIG9yIE51bWJlciBmb3IgcmVjb3JkCiAqIEByZXR1cm4ge09iamVjdH0gICAgIERlZmVycmVkCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoIGFyZyApIHsKCXJldHVybiB0aGlzLnN0b3JhZ2UoIGFyZyB8fCB0aGlzLCAic2V0IiApOwp9OwoKLyoqCiAqIFNlbGVjdHMgcmVjb3JkcyBiYXNlZCBvbiBhbiBleHBsY2l0IGRlc2NyaXB0aW9uCiAqCiAqIEBtZXRob2Qgc2VsZWN0CiAqIEBwYXJhbSAge09iamVjdH0gd2hlcmUgIE9iamVjdCBkZXNjcmliaW5nIHRoZSBXSEVSRSBjbGF1c2UKICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgQXJyYXkgb2YgcmVjb3JkcwogKi8KRGF0YVN0b3JlLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoIHdoZXJlICkgewoJdmFyIGNsYXVzZXMgPSBhcnJheS5mcm9tT2JqZWN0KCB3aGVyZSApLAoJICAgIGNvbmQgICAgPSAicmV0dXJuICggIjsKCglpZiAoIGNsYXVzZXMubGVuZ3RoID4gMSApIHsKCQlhcnJheS5lYWNoKCBjbGF1c2VzLCBmdW5jdGlvbiAoIGksIGlkeCApIHsKCQkJdmFyIGIxID0gIiggIjsKCgkJCWlmICggaWR4ID4gMCApIHsKCQkJCWIxID0gIiAmJiAoICI7CgkJCX0KCgkJCWlmICggaVsxXSBpbnN0YW5jZW9mIEZ1bmN0aW9uICkgewoJCQkJY29uZCArPSBiMSArIGlbMV0udG9TdHJpbmcoKSArICIoIHJlYy5kYXRhW1wiIiArIGlbMF0gKyAiXCJdICkgKSI7CgkJCX0KCQkJZWxzZSBpZiAoICFpc05hTiggaVsxXSApICkgewoJCQkJY29uZCArPSBiMSArICJyZWMuZGF0YVtcIiIgKyBpWzBdICsgIlwiXSA9PT0gIiArIGlbMV0gKyAiICkiOwoJCQl9CgkJCWVsc2UgewoJCQkJY29uZCArPSBiMSArICJyZWMuZGF0YVtcIiIgKyBpWzBdICsgIlwiXSA9PT0gXCIiICsgaVsxXSArICJcIiApIjsKCQkJfQoJCX0gKTsKCX0KCWVsc2UgewoJCWlmICggY2xhdXNlc1swXVsxXSBpbnN0YW5jZW9mIEZ1bmN0aW9uICkgewoJCQljb25kICs9IGNsYXVzZXNbMF1bMV0udG9TdHJpbmcoKSArICIoIHJlYy5kYXRhW1wiIiArIGNsYXVzZXNbMF1bMF0gKyAiXCJdICkiOwoJCX0KCQllbHNlIGlmICggIWlzTmFOKCBjbGF1c2VzWzBdWzFdICkgKSB7CgkJCWNvbmQgKz0gInJlYy5kYXRhW1wiIiArIGNsYXVzZXNbMF1bMF0gKyAiXCJdID09PSAiICsgY2xhdXNlc1swXVsxXTsKCQl9CgkJZWxzZSB7CgkJCWNvbmQgKz0gInJlYy5kYXRhW1wiIiArIGNsYXVzZXNbMF1bMF0gKyAiXCJdID09PSBcIiIgKyBjbGF1c2VzWzBdWzFdICsgIlwiIjsKCQl9Cgl9CgoJY29uZCArPSAiICk7IjsKCglyZXR1cm4gdGhpcy5yZWNvcmRzLmZpbHRlciggbmV3IEZ1bmN0aW9uKCAicmVjIiwgY29uZCApICk7Cn07CgovKioKICogQ3JlYXRlcyBvciB1cGRhdGVzIGFuIGV4aXN0aW5nIHJlY29yZAogKgogKiBFdmVudHM6IGJlZm9yZURhdGFTZXQgIEZpcmVzIGJlZm9yZSB0aGUgcmVjb3JkIGlzIHNldAogKiAgICAgICAgIGFmdGVyRGF0YVNldCAgIEZpcmVzIGFmdGVyIHRoZSByZWNvcmQgaXMgc2V0LCB0aGUgcmVjb3JkIGlzIHRoZSBhcmd1bWVudCBmb3IgbGlzdGVuZXJzCiAqICAgICAgICAgZmFpbGVkRGF0YVNldCAgRmlyZXMgaWYgdGhlIHN0b3JlIGlzIFJFU1RmdWwgYW5kIHRoZSBhY3Rpb24gaXMgZGVuaWVkCiAqCiAqIEBtZXRob2Qgc2V0CiAqIEBwYXJhbSAge01peGVkfSAgIGtleSAgIFtPcHRpb25hbF0gSW50ZWdlciBvciBTdHJpbmcgdG8gdXNlIGFzIGEgUHJpbWFyeSBLZXkKICogQHBhcmFtICB7T2JqZWN0fSAgZGF0YSAgS2V5OlZhbHVlIHBhaXJzIHRvIHNldCBhcyBmaWVsZCB2YWx1ZXMKICogQHBhcmFtICB7Qm9vbGVhbn0gYmF0Y2ggW09wdGlvbmFsXSBUcnVlIGlmIGNhbGxlZCBieSBkYXRhLmJhdGNoCiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgIERlZmVycmVkCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICgga2V5LCBkYXRhLCBiYXRjaCApIHsKCWRhdGEgICAgICAgPSB1dGlsaXR5LmNsb25lKCBkYXRhLCB0cnVlICk7CgliYXRjaCAgICAgID0gKCBiYXRjaCA9PT0gdHJ1ZSApOwoJdmFyIHNlbGYgICA9IHRoaXMsCgkgICAgZXZlbnRzID0gdGhpcy5ldmVudHMsCgkgICAgZGVmZXIgID0gZGVmZXJyZWQoKSwKCSAgICByZWNvcmQgPSBrZXkgIT09IG51bGwgPyB0aGlzLmdldCgga2V5ICkgfHwgbnVsbCA6IGRhdGFbdGhpcy5rZXldID8gdGhpcy5nZXQoIGRhdGFbdGhpcy5rZXldICkgfHwgbnVsbCA6IG51bGwsCgkgICAgbWV0aG9kID0gIlBPU1QiLAoJICAgIHBhcnNlZCA9IHV0aWxpdHkucGFyc2UoIHNlbGYudXJpIHx8ICIiICksCgkgICAgdXJpOwoKCWlmICggdHlwZW9mIGRhdGEgPT09ICJzdHJpbmciICkgewoJCWlmICggZGF0YS5pbmRleE9mKCAiLy8iICkgPT09IC0xICkgewoJCQkvLyBSZWxhdGl2ZSBwYXRoIHRvIHN0b3JlLCBpLmUuIGEgY2hpbGQKCQkJaWYgKCBkYXRhLmNoYXJBdCggMCApICE9PSAiLyIgKSB7CgkJCQl1cmkgPSB0aGlzLmJ1aWxkVXJpKCBkYXRhICk7CgkJCX0KCQkJLy8gUm9vdCBwYXRoLCByZWxhdGl2ZSB0byBzdG9yZSwgaS5lLiBhIGRvbWFpbgoJCQllbHNlIGlmICggc2VsZi51cmkgIT09IG51bGwgJiYgcmVnZXgucm9vdC50ZXN0KCBkYXRhICkgKSB7CgkJCQl1cmkgPSBwYXJzZWQucHJvdG9jb2wgKyAiLy8iICsgcGFyc2VkLmhvc3QgKyBkYXRhOwoJCQl9CgkJCWVsc2UgewoJCQkJdXJpID0gZGF0YTsKCQkJfQoJCX0KCQllbHNlIHsKCQkJdXJpID0gZGF0YTsKCQl9CgoJCWtleSA9IHVyaS5yZXBsYWNlKCByZWdleC5ub3RfZW5kcG9pbnQsICIiICk7CgoJCWlmICggc3RyaW5nLmlzRW1wdHkoIGtleSApICkgewoJCQlkZWZlci5yZWplY3QoIG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApICk7CgkJfQoJCWVsc2UgewoJCQlpZiAoICFiYXRjaCAmJiBldmVudHMgKSB7CgkJCQlvYnNlcnZlci5maXJlKCBzZWxmLnBhcmVudE5vZGUsICJiZWZvcmVEYXRhU2V0Iiwge2tleToga2V5LCBkYXRhOiBkYXRhfSApOwoJCQl9CgoJCQljbGllbnQucmVxdWVzdCggdXJpLCAiR0VUIiwgZnVuY3Rpb24gKCBhcmcgKSB7CgkJCQlzZWxmLnNldENvbXBsZXRlKCByZWNvcmQsIGtleSwgc2VsZi5zb3VyY2UgPyBhcmdbc2VsZi5zb3VyY2VdIDogYXJnLCBiYXRjaCwgZGVmZXIgKTsKCQkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJb2JzZXJ2ZXIuZmlyZSggc2VsZi5wYXJlbnROb2RlLCAiZmFpbGVkRGF0YVNldCIsIGUgKTsKCQkJCWRlZmVyLnJlamVjdCggZSApOwoJCQl9LCB1bmRlZmluZWQsIHV0aWxpdHkubWVyZ2UoIHt3aXRoQ3JlZGVudGlhbHM6IHNlbGYuY3JlZGVudGlhbHN9LCBzZWxmLmhlYWRlcnMgKSApOwoJCX0KCX0KCWVsc2UgewoJCWlmICggIWJhdGNoICYmIGV2ZW50cyApIHsKCQkJb2JzZXJ2ZXIuZmlyZSggc2VsZi5wYXJlbnROb2RlLCAiYmVmb3JlRGF0YVNldCIsIHtrZXk6IGtleSwgZGF0YTogZGF0YX0gKTsKCQl9CgoJCWlmICggYmF0Y2ggfHwgdGhpcy51cmkgPT09IG51bGwgKSB7CgkJCXRoaXMuc2V0Q29tcGxldGUoIHJlY29yZCwga2V5LCBkYXRhLCBiYXRjaCwgZGVmZXIgKTsKCQl9CgkJZWxzZSB7CgkJCWlmICgga2V5ICE9PSBudWxsICkgewoJCQkJbWV0aG9kID0gIlBVVCI7CgkJCQl1cmkgICAgPSB0aGlzLmJ1aWxkVXJpKCBrZXkgKTsKCgkJCQlpZiAoIGNsaWVudC5hbGxvd3MoIHVyaSwgInBhdGNoIiApICYmICggIWNsaWVudC5pZSB8fCAoIGNsaWVudC52ZXJzaW9uID4gOCB8fCBjbGllbnQuYWN0aXZleCApICkgKSB7CgkJCQkJbWV0aG9kID0gIlBBVENIIjsKCQkJCX0KCQkJCWVsc2UgaWYgKCByZWNvcmQgIT09IG51bGwgKSB7CgkJCQkJdXRpbGl0eS5pdGVyYXRlKCByZWNvcmQuZGF0YSwgZnVuY3Rpb24gKCB2LCBrICkgewoJCQkJCQlpZiAoICFhcnJheS5jb250YWlucyggc2VsZi5jb2xsZWN0aW9ucywgayApICYmICFkYXRhW2tdICkgewoJCQkJCQkJZGF0YVtrXSA9IHY7CgkJCQkJCX0KCQkJCQl9KTsKCQkJCX0KCQkJfQoJCQllbHNlIHsKCQkJCXVyaSA9IHRoaXMudXJpOwoJCQl9CgoJCQljbGllbnQucmVxdWVzdCggdXJpLCBtZXRob2QsIGZ1bmN0aW9uICggYXJnICkgewoJCQkJc2VsZi5zZXRDb21wbGV0ZSggcmVjb3JkLCBrZXksIHNlbGYuc291cmNlID8gYXJnW3NlbGYuc291cmNlXSA6IGFyZywgYmF0Y2gsIGRlZmVyICk7CgkJCX0sIGZ1bmN0aW9uICggZSApIHsKCQkJCW9ic2VydmVyLmZpcmUoIHNlbGYucGFyZW50Tm9kZSwgImZhaWxlZERhdGFTZXQiLCBlICk7CgkJCQlkZWZlci5yZWplY3QoIGUgKTsKCQkJfSwgZGF0YSwgdXRpbGl0eS5tZXJnZSgge3dpdGhDcmVkZW50aWFsczogdGhpcy5jcmVkZW50aWFsc30sIHRoaXMuaGVhZGVycyApICk7CgkJfQoJfQoKCXJldHVybiBkZWZlcjsKfTsKCi8qKgogKiBTZXQgY29tcGxldGlvbgogKgogKiBAbWV0aG9kIHNldENvbXBsZXRlCiAqIEBwYXJhbSAge01peGVkfSAgIHJlY29yZCBEYXRhU3RvcmUgcmVjb3JkLCBvciBgbnVsbGAgaWYgbmV3CiAqIEBwYXJhbSAge1N0cmluZ30gIGtleSAgICBSZWNvcmQga2V5CiAqIEBwYXJhbSAge09iamVjdH0gIGRhdGEgICBSZWNvcmQgZGF0YQogKiBAcGFyYW0gIHtCb29sZWFufSBiYXRjaCAgYHRydWVgIGlmIHBhcnQgb2YgYSBiYXRjaCBvcGVyYXRpb24KICogQHBhcmFtICB7T2JqZWN0fSAgZGVmZXIgIERlZmVycmVkIGluc3RhbmNlCiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICBEYXRhU3RvcmUgaW5zdGFuY2UKICovCkRhdGFTdG9yZS5wcm90b3R5cGUuc2V0Q29tcGxldGUgPSBmdW5jdGlvbiAoIHJlY29yZCwga2V5LCBkYXRhLCBiYXRjaCwgZGVmZXIgKSB7Cgl2YXIgc2VsZiAgICAgID0gdGhpcywKCSAgICBkZWZlcnJlZHMgPSBbXTsKCgkvLyBDbGVhcmluZyBjYWNoZWQgdmlld3MKCXRoaXMudmlld3MgPSB7fTsKCgkvLyBTZXR0aW5nIGtleQoJaWYgKCAha2V5ICkgewoJCWlmICggdGhpcy5rZXkgIT09IG51bGwgJiYgZGF0YVt0aGlzLmtleV0gKSB7CgkJCWtleSA9IGRhdGFbdGhpcy5rZXldOwoJCX0KCQllbHNlIHsKCQkJa2V5ID0gdXRpbGl0eS51dWlkKCk7CgkJfQoJfQoKCS8vIFJlbW92aW5nIHByaW1hcnkga2V5IGZyb20gZGF0YQoJaWYgKCB0aGlzLmtleSApIHsKCQlkZWxldGUgZGF0YVt0aGlzLmtleV07Cgl9CgoJLy8gQ3JlYXRlCglpZiAoIHJlY29yZCA9PT0gbnVsbCApIHsKCQlyZWNvcmQgPSB7CgkJCWluZGV4IDogdGhpcy50b3RhbCsrLAoJCQlrZXkgICA6IGtleSwKCQkJZGF0YSAgOiBkYXRhCgkJfTsKCgkJdGhpcy5rZXlzW2tleV0gICAgICAgICAgICAgICAgPSByZWNvcmQuaW5kZXg7CgkJdGhpcy5yZWNvcmRzW3JlY29yZC5pbmRleF0gICAgPSByZWNvcmQ7CgkJdGhpcy52ZXJzaW9uc1tyZWNvcmQua2V5XSAgICAgPSBscnUoIFZFUlNJT05TICk7CgkJdGhpcy52ZXJzaW9uc1tyZWNvcmQua2V5XS5udGggPSAwOwoKCQlpZiAoIHRoaXMucmV0cmlldmUgKSB7CgkJCWRlZmVycmVkcy5wdXNoKCB0aGlzLmNyYXdsKCByZWNvcmQgKSApOwoJCX0KCX0KCS8vIFVwZGF0ZQoJZWxzZSB7CgkJaWYgKCB0aGlzLnZlcnNpb25pbmcgKSB7CgkJCXRoaXMudmVyc2lvbnNbcmVjb3JkLmtleV0uc2V0KCAidiIgKyAoICsrdGhpcy52ZXJzaW9uc1tyZWNvcmQua2V5XS5udGggKSwgdGhpcy5kdW1wKCBbcmVjb3JkXSApWzBdICk7CgkJfQoKCQl1dGlsaXR5Lml0ZXJhdGUoIGRhdGEsIGZ1bmN0aW9uICggdiwgayApIHsKCQkJaWYgKCAhYXJyYXkuY29udGFpbnMoIHNlbGYuY29sbGVjdGlvbnMsIGsgKSApIHsKCQkJCXJlY29yZC5kYXRhW2tdID0gdjsKCQkJfQoJCQllbHNlIGlmICggdHlwZW9mIHYgPT09ICJzdHJpbmciICkgewoJCQkJZGVmZXJyZWRzLnB1c2goIHJlY29yZC5kYXRhW2tdLmRhdGEuc2V0VXJpKCByZWNvcmQuZGF0YVtrXS5kYXRhLnVyaSArICIvIiArIHYsIHRydWUgKSApOwoJCQl9CgkJCWVsc2UgewoJCQkJZGVmZXJyZWRzLnB1c2goIHJlY29yZC5kYXRhW2tdLmRhdGEuYmF0Y2goICJzZXQiLCB2LCB0cnVlICkgKTsKCQkJfQoJCX0pOwoJfQoKCWlmICggIWJhdGNoICYmIHRoaXMuZXZlbnRzICkgewoJCW9ic2VydmVyLmZpcmUoIHNlbGYucGFyZW50Tm9kZSwgImFmdGVyRGF0YVNldCIsIHJlY29yZCApOwoKCQlhcnJheS5lYWNoKCB0aGlzLmRhdGFsaXN0cywgZnVuY3Rpb24gKCBpICkgewoJCQlpLnJlZnJlc2goKTsKCQl9KTsKCX0KCglpZiAoIGRlZmVycmVkcy5sZW5ndGggPT09IDAgKSB7CgkJZGVmZXIucmVzb2x2ZSggcmVjb3JkICk7Cgl9CgllbHNlIHsKCQl1dGlsaXR5LndoZW4oIGRlZmVycmVkcyApLnRoZW4oIGZ1bmN0aW9uICgpIHsKCQkJZGVmZXIucmVzb2x2ZSggcmVjb3JkICk7CgkJfSk7Cgl9CgoJcmV0dXJuIHRoaXM7Cn07CgovKioKICogR2V0cyBvciBzZXRzIGFuIGV4cGxpY2l0IGV4cGlyYXRpb24gb2YgZGF0YQogKgogKiBAbWV0aG9kIHNldEV4cGlyZXMKICogQHBhcmFtICB7TnVtYmVyfSBhcmcgIE1pbGxpc2Vjb25kcyB1bnRpbCBkYXRhIGlzIHN0YWxlCiAqIEByZXR1cm4ge09iamVjdH0gICAgICBEYXRhIHN0b3JlCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLnNldEV4cGlyZXMgPSBmdW5jdGlvbiAoIGFyZyApIHsKCS8vIEV4cGlyeSBjYW5ub3QgYmUgbGVzcyB0aGFuIGEgc2Vjb25kLCBhbmQgbXVzdCBiZSBhIHZhbGlkIHNjZW5hcmlvIGZvciBjb25zdW1wdGlvbjsgbnVsbCB3aWxsIGRpc2FibGUgcmVwZXRpdGl2ZSBleHBpcmF0aW9uCglpZiAoICggYXJnICE9PSBudWxsICYmIHRoaXMudXJpID09PSBudWxsICkgfHwgKCBhcmcgIT09IG51bGwgJiYgKCBpc05hTiggYXJnICkgfHwgYXJnIDwgMTAwMCApICkgKSB7CgkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7Cgl9CgoJaWYgKCB0aGlzLmV4cGlyZXMgPT09IGFyZyApIHsKCQlyZXR1cm47Cgl9CgoJdGhpcy5leHBpcmVzID0gYXJnOwoKCXZhciBpZCAgICAgID0gdGhpcy5wYXJlbnROb2RlLmlkICsgIkRhdGFFeHBpcmUiLAoJICAgIGV4cGlyZXMgPSBhcmcsCgkgICAgc2VsZiAgICA9IHRoaXM7CgoJdXRpbGl0eS5jbGVhclRpbWVycyggaWQgKTsKCglpZiAoIGFyZyA9PT0gbnVsbCApIHsKCQlyZXR1cm47Cgl9CgoJdXRpbGl0eS5yZXBlYXQoIGZ1bmN0aW9uICgpIHsKCQlpZiAoIHNlbGYudXJpID09PSBudWxsICkgewoJCQlzZWxmLnNldEV4cGlyZXMoIG51bGwgKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJaWYgKCAhY2FjaGUuZXhwaXJlKCBzZWxmLnVyaSApICkgewoJCQlvYnNlcnZlci5maXJlKCBzZWxmLnVyaSwgImJlZm9yZUV4cGlyZSwgZXhwaXJlLCBhZnRlckV4cGlyZSIgKTsKCQl9Cgl9LCBleHBpcmVzLCBpZCwgZmFsc2UpOwp9OwoKLyoqCiAqIFNldHMgdGhlIFJFU1RmdWwgQVBJIGVuZCBwb2ludAogKgogKiBAbWV0aG9kIHNldFVyaQogKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyBBUEkgY29sbGVjdGlvbiBlbmQgcG9pbnQKICogQHJldHVybiB7T2JqZWN0fSAgICAgRGVmZXJyZWQKICovCkRhdGFTdG9yZS5wcm90b3R5cGUuc2V0VXJpID0gZnVuY3Rpb24gKCBhcmcgKSB7Cgl2YXIgZGVmZXIgPSBkZWZlcnJlZCgpLAoJICAgIHBhcnNlZCwgdXJpOwoKCWlmICggYXJnICE9PSBudWxsICYmIHN0cmluZy5pc0VtcHR5KCBhcmcgKSApIHsKCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCX0KCglwYXJzZWQgPSB1dGlsaXR5LnBhcnNlKCBhcmcgKTsKCXVyaSAgICA9IHBhcnNlZC5ocmVmOwoKCS8vIFJlLWVuY29kaW5nIHRoZSBxdWVyeSBzdHJpbmcgZm9yIHRoZSByZXF1ZXN0CglpZiAoIGFycmF5LmtleXMoIHBhcnNlZC5xdWVyeSApLmxlbmd0aCA+IDAgKSB7CgkJdXJpID0gdXJpLnJlcGxhY2UoIC9cPy4qLywgIj8iICk7CgoJCXV0aWxpdHkuaXRlcmF0ZSggcGFyc2VkLnF1ZXJ5LCBmdW5jdGlvbiAoIHYsIGsgKSB7CgkJCWlmICggISggdiBpbnN0YW5jZW9mIEFycmF5ICkgKSB7CgkJCQl1cmkgKz0gIiYiICsgayArICI9IiArIGVuY29kZVVSSUNvbXBvbmVudCggdiApOwoJCQl9CgkJCWVsc2UgewoJCQkJYXJyYXkuZWFjaCggdiwgZnVuY3Rpb24gKCBpICkgewoJCQkJCXVyaSArPSAiJiIgKyBrICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KCBpICk7CgkJCQl9ICk7CgkJCX0KCQl9ICk7CgoJCXVyaSA9IHVyaS5yZXBsYWNlKCAiPyYiLCAiPyIgKTsKCX0KCglpZiAoIHRoaXMudXJpICE9PSBudWxsKSB7CgkJb2JzZXJ2ZXIucmVtb3ZlKCB0aGlzLnVyaSApOwoJfQoKCXRoaXMudXJpID0gdXJpOwoKCWlmICggdGhpcy51cmkgIT09IG51bGwgKSB7CgkJb2JzZXJ2ZXIuYWRkKCB0aGlzLnVyaSwgImV4cGlyZSIsIGZ1bmN0aW9uICgpIHsKCQkJdGhpcy5zeW5jKCk7CgkJfSwgImRhdGFTeW5jIiwgdGhpcyk7CgoJCWNhY2hlLmV4cGlyZSggdGhpcy51cmksIHRydWUgKTsKCgkJdGhpcy5zeW5jKCkudGhlbiggZnVuY3Rpb24gKGFyZyApIHsKCQkJZGVmZXIucmVzb2x2ZSggYXJnICk7CgkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQlkZWZlci5yZWplY3QoIGUgKTsKCQl9KTsKCX0KCglyZXR1cm4gZGVmZXI7Cn07CgovKioKICogUmV0dXJucyBhIHZpZXcsIG9yIGNyZWF0ZXMgYSB2aWV3IGFuZCByZXR1cm5zIGl0CiAqCiAqIFJlY29yZHMgaW4gYSB2aWV3IGFyZSBub3QgYnkgcmVmZXJlbmNlLCB0aGV5IGFyZSBjbG9uZXMKICoKICogQG1ldGhvZCBzb3J0CiAqIEBwYXJhbSAge1N0cmluZ30gcXVlcnkgIFNRTCAoIHN0eWxlICkgb3JkZXIgYnkKICogQHBhcmFtICB7U3RyaW5nfSBjcmVhdGUgW09wdGlvbmFsLCBkZWZhdWx0IGJlaGF2aW9yIGlzIHRydWUsIHZhbHVlIGlzIGZhbHNlXSBCb29sZWFuIGRldGVybWluZXMgd2hldGhlciB0byByZWNyZWF0ZSBhIHZpZXcgaWYgaXQgZXhpc3RzCiAqIEBwYXJhbSAge09iamVjdH0gd2hlcmUgIFtPcHRpb25hbF0gT2JqZWN0IGRlc2NyaWJpbmcgdGhlIFdIRVJFIGNsYXVzZQogKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICBWaWV3IG9mIGRhdGEKICovCkRhdGFTdG9yZS5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uICggcXVlcnksIGNyZWF0ZSwgd2hlcmUgKSB7CgljcmVhdGUgICAgICA9ICggY3JlYXRlID09PSB0cnVlIHx8ICggd2hlcmUgaW5zdGFuY2VvZiBPYmplY3QgKSApOwoJdmFyIHZpZXcgICAgPSBzdHJpbmcuZXhwbG9kZSggcXVlcnkgKS5qb2luKCAiICIgKS50b0NhbWVsQ2FzZSgpLAoJICAgIHJlY29yZHMgPSAhd2hlcmUgPyB0aGlzLnJlY29yZHMgOiB0aGlzLnNlbGVjdCggd2hlcmUgKTsKCglpZiAoIHRoaXMudG90YWwgPT09IDAgKSB7CgkJcmV0dXJuIFtdOwoJfQoJZWxzZSBpZiAoICFjcmVhdGUgJiYgdGhpcy52aWV3c1t2aWV3XSApIHsKCQlyZXR1cm4gdGhpcy52aWV3c1t2aWV3XTsKCX0KCWVsc2UgewoJCXRoaXMudmlld3Nbdmlld10gPSBhcnJheS5rZXlTb3J0KCByZWNvcmRzLnNsaWNlKCksIHF1ZXJ5LCAiZGF0YSIgKTsKCgkJcmV0dXJuIHRoaXMudmlld3Nbdmlld107Cgl9Cn07CgovKioKICogU3RvcmFnZSBpbnRlcmZhY2UKICoKICogU1FML05vU1FMIGJhY2tlbmRzIHdpbGwgYmUgdXNlZCBpZiBjb25maWd1cmVkIGluIGxpZXUgb2YgbG9jYWxTdG9yYWdlIChub2RlLmpzIG9ubHkpCiAqCiAqIEBtZXRoZCBzdG9yYWdlCiAqIEBwYXJhbSAge01peGVkfSAgb2JqICBSZWNvcmQgKCBPYmplY3QsIGtleSBvciBpbmRleCApIG9yIHN0b3JlCiAqIEBwYXJhbSAge09iamVjdH0gb3AgICBPcGVyYXRpb24gdG8gcGVyZm9ybSAoIGdldCwgcmVtb3ZlIG9yIHNldCApCiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSBbT3B0aW9uYWxdIFR5cGUgb2YgU3RvcmFnZSB0byB1c2UgKCBsb2NhbCwgc2Vzc2lvbiBbbG9jYWxdICkKICogQHJldHVybiB7T2JqZWN0fSAgICAgIERlZmVycmVkCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLnN0b3JhZ2UgPSBmdW5jdGlvbiAoIG9iaiwgb3AsIHR5cGUgKSB7Cgl2YXIgc2VsZiAgICA9IHRoaXMsCgkgICAgcmVjb3JkICA9IGZhbHNlLAoJICAgIG1vbmdvICAgPSAhc3RyaW5nLmlzRW1wdHkoIHRoaXMubW9uZ29kYiApLAoJICAgIHNlc3Npb24gPSAoIHR5cGUgPT09ICJzZXNzaW9uIiAmJiB0eXBlb2Ygc2Vzc2lvblN0b3JhZ2UgIT09ICJ1bmRlZmluZWQiICksCgkgICAgZGVmZXIgICA9IGRlZmVycmVkKCksCgkgICAgZGF0YSwgZGVmZXJyZWRzLCBrZXksIHJlc3VsdDsKCglpZiAoICFyZWdleC5udW1iZXJfc3RyaW5nX29iamVjdC50ZXN0KCB0eXBlb2Ygb2JqICkgfHwgIXJlZ2V4LmdldF9yZW1vdmVfc2V0LnRlc3QoIG9wICkgKSB7CgkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7Cgl9CgoJcmVjb3JkID0gKCByZWdleC5udW1iZXJfc3RyaW5nLnRlc3QoIHR5cGVvZiBvYmogKSB8fCAoIG9iai5oYXNPd25Qcm9wZXJ0eSggImtleSIgKSAmJiAhb2JqLmhhc093blByb3BlcnR5KCAicGFyZW50Tm9kZSIgKSApICk7CgoJaWYgKCBvcCAhPT0gInJlbW92ZSIgKSB7CgkJaWYgKCByZWNvcmQgJiYgISggb2JqIGluc3RhbmNlb2YgT2JqZWN0ICkgKSB7CgkJCW9iaiA9IHRoaXMuZ2V0KCBvYmogKTsKCQl9CgoJCWtleSA9IHJlY29yZCA/IG9iai5rZXkgOiBvYmoucGFyZW50Tm9kZS5pZDsKCX0KCWVsc2UgaWYgKCBvcCA9PT0gInJlbW92ZSIgJiYgcmVjb3JkICkgewoJCWtleSA9IG9iai5rZXkgfHwgb2JqOwoJfQoKCWlmICggb3AgPT09ICJnZXQiICkgewoJCWlmICggbW9uZ28gKSB7CgkJCW1vbmdvZGIuY29ubmVjdCggdGhpcy5tb25nb2RiLCBmdW5jdGlvbiggZSwgZGIgKSB7CgkJCQlpZiAoIGUgKSB7CgkJCQkJaWYgKCBkYiApIHsKCQkJCQkJZGIuY2xvc2UoKTsKCQkJCQl9CgoJCQkJCWRlZmVyLnJlamVjdCggZSApOwoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJZGIuY3JlYXRlQ29sbGVjdGlvbiggc2VsZi5wYXJlbnROb2RlLmlkLCBmdW5jdGlvbiAoIGUsIGNvbGxlY3Rpb24gKSB7CgkJCQkJCWlmICggZSApIHsKCQkJCQkJCWRlZmVyLnJlamVjdCggZSApOwoJCQkJCQkJZGIuY2xvc2UoKTsKCQkJCQkJfQoJCQkJCQllbHNlIGlmICggcmVjb3JkICkgewoJCQkJCQkJY29sbGVjdGlvbi5maW5kKCB7X2lkOiBvYmoua2V5fSApLmxpbWl0KCAxICkudG9BcnJheSggZnVuY3Rpb24gKCBlLCByZWNzICkgewoJCQkJCQkJCWlmICggZSApIHsKCQkJCQkJCQkJZGVmZXIucmVqZWN0KCBlICk7CgkJCQkJCQkJfQoJCQkJCQkJCWVsc2UgewoJCQkJCQkJCQlkZWxldGUgcmVjc1swXS5faWQ7CgoJCQkJCQkJCQlzZWxmLnNldCgga2V5LCByZWNzWzBdLCB0cnVlICkudGhlbiggZnVuY3Rpb24gKCByZWMgKSB7CgkJCQkJCQkJCQlkZWZlci5yZXNvbHZlKCByZWMgKTsKCQkJCQkJCQkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJCQkJCQkJZGVmZXIucmVqZWN0KCBlICk7CgkJCQkJCQkJCX0gKTsKCQkJCQkJCQl9CgoJCQkJCQkJCWRiLmNsb3NlKCk7CgkJCQkJCQl9ICk7CgkJCQkJCX0KCQkJCQkJZWxzZSB7CgkJCQkJCQljb2xsZWN0aW9uLmZpbmQoIHt9ICkudG9BcnJheSggZnVuY3Rpb24gKCBlLCByZWNzICkgewoJCQkJCQkJCXZhciBpICAgPSAtMSwKCQkJCQkJCQkgICAgbnRoID0gcmVjcy5sZW5ndGg7CgkJCQkJCQkJCgkJCQkJCQkJaWYgKCBlICkgewoJCQkJCQkJCQlkZWZlci5yZWplY3QoIGUgKTsKCQkJCQkJCQl9CgkJCQkJCQkJZWxzZSB7CgkJCQkJCQkJCWlmICggbnRoID4gMCApIHsKCQkJCQkJCQkJCXNlbGYucmVjb3JkcyA9IHJlY3MubWFwKCBmdW5jdGlvbiAoIHIgKSB7CgkJCQkJCQkJCQkJdmFyIHJlYyA9IHtrZXk6IHIuX2lkLCBpbmRleDogKytpLCBkYXRhOiB7fX07CgoJCQkJCQkJCQkJCXNlbGYua2V5c1tyZWMua2V5XSA9IHJlYy5pbmRleDsKCQkJCQkJCQkJCQlyZWMuZGF0YSA9IHI7CgkJCQkJCQkJCQkJZGVsZXRlIHJlYy5kYXRhLl9pZDsKCgkJCQkJCQkJCQkJcmV0dXJuIHJlYzsKCQkJCQkJCQkJCX0gKTsKCQkJCQkJCQkJCQoJCQkJCQkJCQkJc2VsZi50b3RhbCA9IG50aDsKCQkJCQkJCQkJfQoJCQkJCQkJCQkKCQkJCQkJCQkJZGVmZXIucmVzb2x2ZSggc2VsZi5yZWNvcmRzICk7CgkJCQkJCQkJfQoKCQkJCQkJCQlkYi5jbG9zZSgpOwoJCQkJCQkJfSApOwoJCQkJCQl9CgkJCQkJfSApOwoJCQkJfQoJCQl9ICk7CgkJfQoJCWVsc2UgewoJCQlyZXN1bHQgPSBzZXNzaW9uID8gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgga2V5ICkgOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgga2V5ICk7CgoJCQlpZiAoIHJlc3VsdCAhPT0gbnVsbCApIHsKCQkJCXJlc3VsdCA9IGpzb24uZGVjb2RlKCByZXN1bHQgKTsKCgkJCQlpZiAoIHJlY29yZCApIHsKCQkJCQlzZWxmLnNldCgga2V5LCByZXN1bHQsIHRydWUgKS50aGVuKCBmdW5jdGlvbiAoIHJlYyApIHsKCQkJCQkJZGVmZXIucmVzb2x2ZSggcmVjICk7CgkJCQkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJCQlkZWZlci5yZWplY3QoIGUgKTsKCQkJCQl9ICk7CgkJCQl9CgkJCQllbHNlIHsKCQkJCQl1dGlsaXR5Lm1lcmdlKCBzZWxmLCByZXN1bHQgKTsKCQkJCQlkZWZlci5yZXNvbHZlKCBzZWxmICk7CgkJCQl9CgkJCX0KCQkJZWxzZSB7CgkJCQlkZWZlci5yZXNvbHZlKCBzZWxmICk7CgkJCX0KCQl9Cgl9CgllbHNlIGlmICggb3AgPT09ICJyZW1vdmUiICkgewoJCWlmICggbW9uZ28gKSB7CgkJCW1vbmdvZGIuY29ubmVjdCggdGhpcy5tb25nb2RiLCBmdW5jdGlvbiggZSwgZGIgKSB7CgkJCQlpZiAoIGUgKSB7CgkJCQkJaWYgKCBkYiApIHsKCQkJCQkJZGIuY2xvc2UoKTsKCQkJCQl9CgoJCQkJCWRlZmVyLnJlamVjdCggZSApOwoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJZGIuY3JlYXRlQ29sbGVjdGlvbiggc2VsZi5wYXJlbnROb2RlLmlkLCBmdW5jdGlvbiAoIGUsIGNvbGxlY3Rpb24gKSB7CgkJCQkJCWlmICggZSApIHsKCQkJCQkJCWlmICggZGIgKSB7CgkJCQkJCQkJZGIuY2xvc2UoKTsKCQkJCQkJCX0KCgkJCQkJCQlkZWZlci5yZWplY3QoIGUgKTsKCQkJCQkJfQoJCQkJCQllbHNlIHsKCQkJCQkJCWNvbGxlY3Rpb24ucmVtb3ZlKCByZWNvcmQgPyB7X2lkOiBrZXl9IDoge30sIHtzYWZlOiB0cnVlfSwgZnVuY3Rpb24gKCBlLCBhcmcgKSB7CgkJCQkJCQkJaWYgKCBlICkgewoJCQkJCQkJCQlkZWZlci5yZWplY3QoIGUgKTsKCQkJCQkJCQl9CgkJCQkJCQkJZWxzZSB7CgkJCQkJCQkJCWRlZmVyLnJlc29sdmUoIGFyZyApOwoJCQkJCQkJCX0KCgkJCQkJCQkJZGIuY2xvc2UoKTsKCQkJCQkJCX0gKTsKCQkJCQkJfQoJCQkJCX0gKTsKCQkJCX0KCQkJfSApOwoJCX0KCQllbHNlIHsKCQkJc2Vzc2lvbiA/IHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oIGtleSApIDogbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oIGtleSApOwoJCQlkZWZlci5yZXNvbHZlKCB0aGlzICk7CgkJfQoJfQoJZWxzZSBpZiAoIG9wID09PSAic2V0IiApIHsKCQlpZiAoIG1vbmdvICkgewoJCQltb25nb2RiLmNvbm5lY3QoIHRoaXMubW9uZ29kYiwgZnVuY3Rpb24oIGUsIGRiICkgewoJCQkJaWYgKCBlICkgewoJCQkJCWlmICggZGIgKSB7CgkJCQkJCWRiLmNsb3NlKCk7CgkJCQkJfQoKCQkJCQlkZWZlci5yZWplY3QoIGUgKTsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCWRiLmNyZWF0ZUNvbGxlY3Rpb24oIHNlbGYucGFyZW50Tm9kZS5pZCwgZnVuY3Rpb24gKCBlLCBjb2xsZWN0aW9uICkgewoJCQkJCQlpZiAoIGUgKSB7CgkJCQkJCQlkZWZlci5yZWplY3QoIGUgKTsKCQkJCQkJCWRiLmNsb3NlKCk7CgkJCQkJCX0KCQkJCQkJZWxzZSBpZiAoIHJlY29yZCApIHsKCQkJCQkJCWNvbGxlY3Rpb24udXBkYXRlKCB7X2lkOiBvYmoua2V5fSwgeyRzZXQ6IG9iai5kYXRhfSwge3c6IDEsIHNhZmU6IHRydWUsIHVwc2VydDogdHJ1ZX0sIGZ1bmN0aW9uICggZSwgYXJnICkgewoJCQkJCQkJCWlmICggZSApIHsKCQkJCQkJCQkJZGVmZXIucmVqZWN0KCBlICk7CgkJCQkJCQkJfQoJCQkJCQkJCWVsc2UgewoJCQkJCQkJCQlkZWZlci5yZXNvbHZlKCBhcmcgKTsKCQkJCQkJCQl9CgoJCQkJCQkJCWRiLmNsb3NlKCk7CgkJCQkJCQl9ICk7CgkJCQkJCX0KCQkJCQkJZWxzZSB7CgkJCQkJCQkvLyBSZW1vdmluZyBhbGwgZG9jdW1lbnRzICYgcmUtaW5zZXJ0aW5nCgkJCQkJCQljb2xsZWN0aW9uLnJlbW92ZSgge30sIHt3OiAxLCBzYWZlOiB0cnVlfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJCQkJCWlmICggZSApIHsKCQkJCQkJCQkJZGVmZXIucmVqZWN0KCBlICk7CgkJCQkJCQkJCWRiLmNsb3NlKCk7CgkJCQkJCQkJfQoJCQkJCQkJCWVsc2UgewoJCQkJCQkJCQlkZWZlcnJlZHMgPSBbXTsKCgkJCQkJCQkJCWFycmF5LmVhY2goIHNlbGYucmVjb3JkcywgZnVuY3Rpb24gKCBpICkgewoJCQkJCQkJCQkJdmFyIGRhdGEgICA9IHt9LAoJCQkJCQkJCQkJICAgIGRlZmVyMiA9IGRlZmVycmVkKCk7CgoJCQkJCQkJCQkJZGVmZXJyZWRzLnB1c2goIGRlZmVyMiApOwoKCQkJCQkJCQkJCXV0aWxpdHkuaXRlcmF0ZSggaS5kYXRhLCBmdW5jdGlvbiAoIHYsIGsgKSB7CgkJCQkJCQkJCQkJaWYgKCAhYXJyYXkuY29udGFpbnMoIHNlbGYuY29sbGVjdGlvbnMsIGsgKSApIHsKCQkJCQkJCQkJCQkJZGF0YVtrXSA9IHY7CgkJCQkJCQkJCQkJfQoJCQkJCQkJCQkJfSApOwoKCQkJCQkJCQkJCWNvbGxlY3Rpb24udXBkYXRlKCB7X2lkOiBpLmtleX0sIHskc2V0OiBkYXRhfSwge3c6MSwgc2FmZTp0cnVlLCB1cHNlcnQ6dHJ1ZX0sIGZ1bmN0aW9uICggZSwgYXJnICkgewoJCQkJCQkJCQkJCWlmICggZSApIHsKCQkJCQkJCQkJCQkJZGVmZXIyLnJlamVjdCggZSApOwoJCQkJCQkJCQkJCX0KCQkJCQkJCQkJCQllbHNlIHsKCQkJCQkJCQkJCQkJZGVmZXIyLnJlc29sdmUoIGFyZyApOwoJCQkJCQkJCQkJCX0KCQkJCQkJCQkJCX0gKTsKCQkJCQkJCQkJfSApOwoKCQkJCQkJCQkJdXRpbGl0eS53aGVuKCBkZWZlcnJlZHMgKS50aGVuKCBmdW5jdGlvbiAoIHJlc3VsdCApIHsKCQkJCQkJCQkJCWRlZmVyLnJlc29sdmUoIHJlc3VsdCApOwoJCQkJCQkJCQkJZGIuY2xvc2UoKTsKCQkJCQkJCQkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJCQkJCQkJZGVmZXIucmVqZWN0KCBlICk7CgkJCQkJCQkJCQlkYi5jbG9zZSgpOwoJCQkJCQkJCQl9ICk7CgkJCQkJCQkJfQoJCQkJCQkJfSApOwoJCQkJCQl9CgkJCQkJfSApOwoJCQkJfQoJCQl9ICk7CgkJfQoJCWVsc2UgewoJCQlkYXRhID0ganNvbi5lbmNvZGUoIHJlY29yZCA/IG9iai5kYXRhIDoge3RvdGFsOiB0aGlzLnRvdGFsLCBrZXlzOiB0aGlzLmtleXMsIHJlY29yZHM6IHRoaXMucmVjb3Jkc30gKTsKCQkJc2Vzc2lvbiA/IHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oIGtleSwgZGF0YSApIDogbG9jYWxTdG9yYWdlLnNldEl0ZW0oIGtleSwgZGF0YSApOwoJCQlkZWZlci5yZXNvbHZlKCB0aGlzICk7CgkJfQoJfQoKCXJldHVybiBkZWZlcjsKfTsKCi8qKgogKiBTeW5jcyB0aGUgRGF0YVN0b3JlIHdpdGggYSBVUkkgcmVwcmVzZW50YXRpb24KICoKICogRXZlbnRzOiBiZWZvcmVEYXRhU3luYyAgRmlyZXMgYmVmb3JlIHN5bmNpbmcgdGhlIERhdGFTdG9yZQogKiAgICAgICAgIGFmdGVyRGF0YVN5bmMgICBGaXJlcyBhZnRlciBzeW5jaW5nIHRoZSBEYXRhU3RvcmUKICogICAgICAgICBmYWlsZWREYXRhU3luYyAgRmlyZXMgd2hlbiBhbiBleGNlcHRpb24gb2NjdXJzCiAqCiAqIEBtZXRob2Qgc3luYwogKiBAcmV0dXJuIHtPYmplY3R9IERlZmVycmVkCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbiAoKSB7CglpZiAoIHRoaXMudXJpID09PSBudWxsIHx8IHN0cmluZy5pc0VtcHR5KCB0aGlzLnVyaSApICkgewoJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJfQoKCXZhciBzZWxmICAgPSB0aGlzLAoJICAgIGV2ZW50cyA9ICggdGhpcy5ldmVudHMgPT09IHRydWUgKSwKCSAgICBkZWZlciAgPSBkZWZlcnJlZCgpLAoJICAgIHN1Y2Nlc3MsIGZhaWx1cmU7CgoJLyoqCgkgKiBSZXNvbHZlcyBwdWJsaWMgZGVmZXJyZWQKCSAqCgkgKiBAbWV0aG9kIHN1Y2Nlc3MKCSAqIEBwcml2YXRlCgkgKiBAcGFyYW0gIHtPYmplY3R9IGFyZyBBUEkgcmVzcG9uc2UKCSAqIEByZXR1cm4ge1VuZGVmaW5lZH0gIHVuZGVmaW5lZAoJICovCglzdWNjZXNzID0gZnVuY3Rpb24gKCBhcmcgKSB7CgkJdmFyIGRhdGE7CgoJCWlmICggdHlwZW9mIGFyZyAhPT0gIm9iamVjdCIgKSB7CgkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuZXhwZWN0ZWRPYmplY3QgKTsKCQl9CgoJCWlmICggc2VsZi5zb3VyY2UgIT09IG51bGwgKSB7CgkJCWFyZyA9IHV0aWxpdHkud2FsayggYXJnLCBzZWxmLnNvdXJjZSApOwoJCX0KCgkJaWYgKCBhcmcgaW5zdGFuY2VvZiBBcnJheSApIHsKCQkJZGF0YSA9IGFyZzsKCQl9CgkJZWxzZSB7CgkJCWRhdGEgPSBbYXJnXTsKCQl9CgoJCXNlbGYuYmF0Y2goICJzZXQiLCBkYXRhLCB0cnVlICkudGhlbiggZnVuY3Rpb24gKCBhcmcgKSB7CgkJCWlmICggZXZlbnRzICkgewoJCQkJb2JzZXJ2ZXIuZmlyZSggc2VsZi5wYXJlbnROb2RlLCAiYWZ0ZXJEYXRhU3luYyIsIGFyZyApOwoJCQl9CgoJCQlkZWZlci5yZXNvbHZlKCBhcmcgKTsKCQl9LCBmYWlsdXJlKTsKCX07CgoJLyoqCgkgKiBSZWplY3RzIHB1YmxpYyBkZWZlcnJlZAoJICoKCSAqIEBtZXRob2QgZmFpbHVyZQoJICogQHByaXZhdGUKCSAqIEBwYXJhbSAge09iamVjdH0gZSBFcnJvciBpbnN0YW5jZQoJICogQHJldHVybiB7VW5kZWZpbmVkfSB1bmRlZmluZWQKCSAqLwoJZmFpbHVyZSA9IGZ1bmN0aW9uICggZSApIHsKCQlpZiAoIGV2ZW50cyApIHsKCQkJb2JzZXJ2ZXIuZmlyZSggc2VsZi5wYXJlbnROb2RlLCAiZmFpbGVkRGF0YVN5bmMiLCBlICk7CgkJfQoKCQlkZWZlci5yZWplY3QoIGUgKTsKCX07CgoJaWYgKCBldmVudHMpIHsKCQlvYnNlcnZlci5maXJlKCB0aGlzLnBhcmVudE5vZGUsICJiZWZvcmVEYXRhU3luYyIsIHRoaXMudXJpICk7Cgl9CgoJaWYgKCB0aGlzLmNhbGxiYWNrICE9PSBudWxsICkgewoJCWNsaWVudC5qc29ucCggdGhpcy51cmksIHN1Y2Nlc3MsIGZhaWx1cmUsIHtjYWxsYmFjazogdGhpcy5jYWxsYmFja30gKTsKCX0KCWVsc2UgewoJCWNsaWVudC5yZXF1ZXN0KCB0aGlzLnVyaSwgIkdFVCIsIHN1Y2Nlc3MsIGZhaWx1cmUsIG51bGwsIHV0aWxpdHkubWVyZ2UoIHt3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY3JlZGVudGlhbHN9LCB0aGlzLmhlYWRlcnMpICk7Cgl9CgoJcmV0dXJuIGRlZmVyOwp9OwoKLyoqCiAqIFRlYXJzIGRvd24gYSBzdG9yZSAmIGV4cGlyZXMgYWxsIHJlY29yZHMgYXNzb2NpYXRlZCB0byBhbiBBUEkKICoKICogQG1ldGhvZCB0ZWFyZG93bgogKiBAcmV0dXJuIHtVbmRlZmluZWR9IHVuZGVmaW5lZAogKi8KRGF0YVN0b3JlLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uICgpIHsKCXZhciB1cmkgPSB0aGlzLnVyaSwKCSAgICBpZDsKCglpZiAoIHVyaSAhPT0gbnVsbCApIHsKCQljYWNoZS5leHBpcmUoIHVyaSwgdHJ1ZSApOwoJCW9ic2VydmVyLnJlbW92ZSggdXJpICk7CgoJCWlkID0gdGhpcy5wYXJlbnROb2RlLmlkICsgIkRhdGFFeHBpcmUiOwoJCXV0aWxpdHkuY2xlYXJUaW1lcnMoIGlkICk7CgoJCWFycmF5LmVhY2goIHRoaXMuZGF0YWxpc3RzLCBmdW5jdGlvbiAoaSApIHsKCQkJaS50ZWFyZG93bigpOwoJCX0pOwoKCQlhcnJheS5lYWNoKCB0aGlzLnJlY29yZHMsIGZ1bmN0aW9uICggaSApIHsKCQkJdmFyIHJlY29yZFVyaSA9IHVyaSArICIvIiArIGkua2V5OwoKCQkJY2FjaGUuZXhwaXJlKCByZWNvcmRVcmksIHRydWUgKTsKCQkJb2JzZXJ2ZXIucmVtb3ZlKCByZWNvcmRVcmkgKTsKCgkJCXV0aWxpdHkuaXRlcmF0ZSggaS5kYXRhLCBmdW5jdGlvbiAoIHYgKSB7CgkJCQlpZiAoIHYgPT09IG51bGwgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCWlmICggdi5kYXRhICYmIHR5cGVvZiB2LmRhdGEudGVhcmRvd24gPT09ICJmdW5jdGlvbiIgKSB7CgkJCQkJb2JzZXJ2ZXIucmVtb3ZlKCB2LmlkICk7CgkJCQkJdi5kYXRhLnRlYXJkb3duKCk7CgkJCQl9CgkJCX0pOwoJCX0pOwoJfQoKCXRoaXMuY2xlYXIoIHRydWUgKTsKCW9ic2VydmVyLmZpcmUoIHRoaXMucGFyZW50Tm9kZSwgImFmdGVyRGF0YVRlYXJkb3duIiApOwoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIFVuZG9lcyB0aGUgbGFzdCBtb2RpZmljYXRpb24gdG8gYSByZWNvcmQsIGlmIGl0IGV4aXN0cwogKgogKiBAbWV0aG9kIHVuZG8KICogQHBhcmFtICB7TWl4ZWR9ICBrZXkgICAgIEtleSBvciBpbmRleAogKiBAcGFyYW0gIHtTdHJpbmd9IHZlcnNpb24gW09wdGlvbmFsXSBWZXJzaW9uIHRvIHJlc3RvcmUKICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgIERlZmVycmVkCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLnVuZG8gPSBmdW5jdGlvbiAoIGtleSwgdmVyc2lvbiApIHsKCXZhciByZWNvcmQgICA9IHRoaXMuZ2V0KCBrZXkgKSwKCSAgICBkZWZlciAgICA9IGRlZmVycmVkKCksCgkgICAgdmVyc2lvbnMgPSB0aGlzLnZlcnNpb25zW3JlY29yZC5rZXldLAoJICAgIHByZXZpb3VzOwoKCWlmICggcmVjb3JkID09PSB1bmRlZmluZWQgKSB7CgkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7Cgl9CgoJaWYgKCB2ZXJzaW9ucyApIHsKCQlwcmV2aW91cyA9IHZlcnNpb25zLmdldCggdmVyc2lvbiB8fCB2ZXJzaW9ucy5maXJzdCApOwoKCQlpZiAoIHByZXZpb3VzID09PSB1bmRlZmluZWQgKSB7CgkJCWRlZmVyLnJlamVjdCggbGFiZWwuZXJyb3IuZGF0YXN0b3JlTm9QcmV2VmVyc2lvbiApOwoJCX0KCQllbHNlIHsKCQkJdGhpcy5zZXQoIGtleSwgcHJldmlvdXMgKS50aGVuKCBmdW5jdGlvbiAoIGFyZyApIHsKCQkJCWRlZmVyLnJlc29sdmUoIGFyZyApOwoJCQl9LCBmdW5jdGlvbiAoIGUgKSB7CgkJCQlkZWZlci5yZWplY3QoIGUgKTsKCQkJfSApOwoJCX0KCX0KCWVsc2UgewoJCWRlZmVyLnJlamVjdCggbGFiZWwuZXJyb3IuZGF0YXN0b3JlTm9QcmV2VmVyc2lvbiApOwoJfQoKCXJldHVybiBkZWZlcjsKfTsKCi8qKgogKiBSZXR1cm5zIEFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgb2YgYGtleWAKICoKICogQG1ldGhvZCB1bmlxdWUKICogQHBhcmFtICB7U3RyaW5nfSBrZXkgRmllbGQgdG8gY29tcGFyZQogKiBAcmV0dXJuIHtBcnJheX0gICAgICBBcnJheSBvZiB2YWx1ZXMKICovCkRhdGFTdG9yZS5wcm90b3R5cGUudW5pcXVlID0gZnVuY3Rpb24gKCBrZXkgKSB7CglyZXR1cm4gYXJyYXkudW5pcXVlKCB0aGlzLnJlY29yZHMubWFwKCBmdW5jdGlvbiAoIGkgKSB7CgkJcmV0dXJuIGkuZGF0YVtrZXldOwoJfSkpOwp9OwoKLyoqCiAqIEFwcGxpZXMgYSBkaWZmZXJlbmNlIHRvIGEgcmVjb3JkCiAqCiAqIFVzZSBgZGF0YS5zZXQoKWAgaWYgYGRhdGFgIGlzIHRoZSBjb21wbGV0ZSBmaWVsZCBzZXQKICoKICogQG1ldGhvZCB1cGRhdGUKICogQHBhcmFtICB7TWl4ZWR9ICBrZXkgIEtleSBvciBpbmRleAogKiBAcGFyYW0gIHtPYmplY3R9IGRhdGEgS2V5OlZhbHVlIHBhaXJzIHRvIHNldCBhcyBmaWVsZCB2YWx1ZXMKICogQHJldHVybiB7T2JqZWN0fSAgICAgIERlZmVycmVkCiAqLwpEYXRhU3RvcmUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgga2V5LCBkYXRhICkgewoJdmFyIHJlY29yZCA9IHRoaXMuZ2V0KCBrZXkgKSwKCSAgICBkZWZlciAgPSBkZWZlcnJlZCgpOwoKCWlmICggcmVjb3JkID09PSB1bmRlZmluZWQgKSB7CgkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7Cgl9CgoJdXRpbGl0eS5pdGVyYXRlKCByZWNvcmQuZGF0YSwgZnVuY3Rpb24gKCB2LCBrICkgewoJCWRhdGFbdl0gPSBrOwoJfSk7CgkKCXRoaXMuc2V0KCBrZXksIGRhdGEgKS50aGVuKCBmdW5jdGlvbiAoIGFyZyApIHsKCQlkZWZlci5yZXNvbHZlKCBhcmcgKTsKCX0sIGZ1bmN0aW9uICggZSApIHsKCQlkZWZlci5yZWplY3QoIGUgKTsKCX0pOwoKCXJldHVybiBkZWZlcjsKfTsKCi8qKiBAbmFtZXNwYWNlIGRhdGFsaXN0ICovCnZhciBkYXRhbGlzdCA9IHsKCS8qKgoJICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBkYXRhbGlzdAoJICoKCSAqIEBtZXRob2QgZmFjdG9yeQoJICogQHBhcmFtICB7T2JqZWN0fSB0YXJnZXQgICBFbGVtZW50IHRvIHJlY2VpdmUgdGhlIERhdGFMaXN0CgkgKiBAcGFyYW0gIHtPYmplY3R9IHN0b3JlICAgIERhdGEgc3RvcmUgdG8gZmVlZCB0aGUgRGF0YUxpc3QKCSAqIEBwYXJhbSAge01peGVkfSAgdGVtcGxhdGUgUmVjb3JkIGZpZWxkLCB0ZW1wbGF0ZSAoICQudHBsICksIG9yIFN0cmluZywgZS5nLiAiPHA+dGhpcyBpcyBhIHt7ZmllbGR9fSBzYW1wbGUuPC9wPiIsIGZpZWxkcyBhcmUgbWFya2VkIHdpdGgge3sgfX0KCSAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyAgT3B0aW9uYWwgcGFyYW1ldGVycyB0byBzZXQgb24gdGhlIERhdGFMaXN0CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgIERhdGFMaXN0IGluc3RhbmNlCgkgKi8KCWZhY3RvcnkgOiBmdW5jdGlvbiAoIHRhcmdldCwgc3RvcmUsIHRlbXBsYXRlLCBvcHRpb25zICkgewoJCXZhciByZWYgPSBbc3RvcmVdLAoJCSAgICBvYmosIGluc3RhbmNlOwoKCQlpZiAoICEoIHRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQgKSB8fCB0eXBlb2Ygc3RvcmUgIT09ICJvYmplY3QiIHx8ICFyZWdleC5zdHJpbmdfb2JqZWN0LnRlc3QoIHR5cGVvZiB0ZW1wbGF0ZSApICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCQl9CgoJCW9iaiA9IGVsZW1lbnQuY3JlYXRlKCAidWwiLCB7ImNsYXNzIjogImxpc3QiLCBpZDogc3RvcmUucGFyZW50Tm9kZS5pZCArICItZGF0YWxpc3QifSwgdGFyZ2V0ICk7CgoJCS8vIENyZWF0aW5nIGluc3RhbmNlCgkJaW5zdGFuY2UgPSBuZXcgRGF0YUxpc3QoIG9iaiwgcmVmWzBdLCB0ZW1wbGF0ZSApOwoKCQlpZiAoIG9wdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QpIHsKCQkJdXRpbGl0eS5tZXJnZSggaW5zdGFuY2UsIG9wdGlvbnMgKTsKCQl9CgoJCWluc3RhbmNlLnN0b3JlLmRhdGFsaXN0cy5wdXNoKCBpbnN0YW5jZSApOwoKCQkvLyBSZW5kZXJpbmcgaWYgbm90IHRpZWQgdG8gYW4gQVBJIG9yIGRhdGEgaXMgcmVhZHkKCQlpZiAoIGluc3RhbmNlLnN0b3JlLnVyaSA9PT0gbnVsbCB8fCBpbnN0YW5jZS5zdG9yZS5sb2FkZWQgKSB7CgkJCWluc3RhbmNlLnJlZnJlc2goKTsKCQl9CgoJCXJldHVybiBpbnN0YW5jZTsKCX0sCgoJLyoqCgkgKiBDYWxjdWxhdGVzIHRoZSB0b3RhbCBwYWdlcwoJICoKCSAqIEBtZXRob2QgcGFnZXMKCSAqIEBwcml2YXRlCgkgKiBAcmV0dXJuIHtOdW1iZXJ9IFRvdGFsIHBhZ2VzCgkgKi8KCXBhZ2VzIDogZnVuY3Rpb24gKCkgewoJCWlmICggaXNOYU4oIHRoaXMucGFnZVNpemUgKSApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJfQoKCQlyZXR1cm4gbnVtYmVyLnJvdW5kKCAoICF0aGlzLmZpbHRlciA/IHRoaXMudG90YWwgOiB0aGlzLmZpbHRlcmVkLmxlbmd0aCApIC8gdGhpcy5wYWdlU2l6ZSwgInVwIiApOwoJfSwKCgkvKioKCSAqIENhbGN1bGF0ZXMgdGhlIHBhZ2Ugc2l6ZSBhcyBhbiBBcnJheSBvZiBzdGFydCAmIGZpbmlzaAoJICoKCSAqIEBtZXRob2QgcmFuZ2UKCSAqIEBwcml2YXRlCgkgKiBAcmV0dXJuIHtBcnJheX0gIEFycmF5IG9mIHN0YXJ0ICYgZW5kIG51bWJlcnMKCSAqLwoJcmFuZ2UgOiBmdW5jdGlvbiAoKSB7CgkJdmFyIHN0YXJ0ID0gKCB0aGlzLnBhZ2VJbmRleCAqIHRoaXMucGFnZVNpemUgKSAtIHRoaXMucGFnZVNpemUsCgkJICAgIGVuZCAgID0gdGhpcy5wYWdlU2l6ZTsKCgkJcmV0dXJuIFtzdGFydCwgZW5kXTsKCX0KfTsKCi8qKgogKiBEYXRhTGlzdCBmYWN0b3J5CiAqCiAqIEBjb25zdHJ1Y3RvcgogKi8KZnVuY3Rpb24gRGF0YUxpc3QgKCBlbGVtZW50LCBzdG9yZSwgdGVtcGxhdGUgKSB7Cgl0aGlzLmNhbGxiYWNrICAgID0gbnVsbDsKCXRoaXMuZWxlbWVudCAgICAgPSBlbGVtZW50OwoJdGhpcy5lbXB0eU1zZyAgICA9ICJOb3RoaW5nIHRvIGRpc3BsYXkiOwoJdGhpcy5maWx0ZXIgICAgICA9IG51bGw7Cgl0aGlzLmZpbHRlcmVkICAgID0gW107Cgl0aGlzLmlkICAgICAgICAgID0gdXRpbGl0eS5nZW5JZCgpOwoJdGhpcy5wYWdlSW5kZXggICA9IDE7Cgl0aGlzLnBhZ2VTaXplICAgID0gbnVsbDsKCXRoaXMucGFnZVJhbmdlICAgPSA1OwoJdGhpcy5wYWdpbmF0aW9uICA9ICJib3R0b20iOyAvLyAidG9wIiBvciAiYm90dG9tfHRvcCIgYXJlIGFsc28gdmFsaWQKCXRoaXMucGxhY2Vob2xkZXIgPSAiIjsKCXRoaXMub3JkZXIgICAgICAgPSAiIjsKCXRoaXMucmVjb3JkcyAgICAgPSBbXTsKCXRoaXMuY3VycmVudCAgICAgPSBbXTsKCXRoaXMudGVtcGxhdGUgICAgPSB0ZW1wbGF0ZTsKCXRoaXMudG90YWwgICAgICAgPSAwOwoJdGhpcy5zdG9yZSAgICAgICA9IHN0b3JlOwoJdGhpcy53aGVyZSAgICAgICA9IG51bGw7Cn0KCi8vIFNldHRpbmcgY29uc3RydWN0b3IgbG9vcApEYXRhTGlzdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEYXRhTGlzdDsKCi8qKgogKiBFeHBvcnRzIGRhdGEgbGlzdCByZWNvcmRzCiAqCiAqIEBtZXRob2QgZHVtcAogKiBAcmV0dXJuIHtBcnJheX0gUmVjb3JkIHNldAogKi8KRGF0YUxpc3QucHJvdG90eXBlLmR1bXAgPSBmdW5jdGlvbiAoKSB7CglyZXR1cm4gdGhpcy5zdG9yZS5kdW1wKCB0aGlzLnJlY29yZHMgKTsKfTsKCi8qKgogKiBDaGFuZ2VzIHRoZSBwYWdlIGluZGV4IG9mIHRoZSBEYXRhTGlzdAogKgogKiBAbWV0aG9kIHBhZ2UKICogQHBhcmFtICB7TnVtYmVyfSBhcmcgUGFnZSBudW1iZXIgdG8gZGlzcGxheQogKiBAcmV0dXJuIHtPYmplY3R9ICAgICBEYXRhTGlzdCBpbnN0YW5jZQogKi8KRGF0YUxpc3QucHJvdG90eXBlLnBhZ2UgPSBmdW5jdGlvbiAoIGFyZyApIHsKCXRoaXMucGFnZUluZGV4ID0gYXJnOwoKCXJldHVybiB0aGlzLnJlZnJlc2goKTsKfTsKCi8qKgogKiBBZGRzIHBhZ2luYXRpb24gRWxlbWVudHMgdG8gdGhlIFZpZXcKICoKICogQG1ldGhvZCBwYWdlcwogKiBAcmV0dXJuIHtPYmplY3R9ICBEYXRhTGlzdCBpbnN0YW5jZQogKi8KRGF0YUxpc3QucHJvdG90eXBlLnBhZ2VzID0gZnVuY3Rpb24gKCkgewoJdmFyIG9iaiAgID0gdGhpcy5lbGVtZW50LAoJICAgIHBhZ2UgID0gdGhpcy5wYWdlSW5kZXgsCgkgICAgcG9zICAgPSB0aGlzLnBhZ2luYXRpb24sCgkgICAgcmFuZ2UgPSB0aGlzLnBhZ2VSYW5nZSwKCSAgICBtaWQgICA9IG51bWJlci5yb3VuZCggbnVtYmVyLmhhbGYoIHJhbmdlICksICJkb3duIiApLAoJICAgIHN0YXJ0ID0gcGFnZSAtIG1pZCwKCSAgICBlbmQgICA9IHBhZ2UgKyBtaWQsCgkgICAgc2VsZiAgPSB0aGlzLAoJICAgIHRvdGFsID0gZGF0YWxpc3QucGFnZXMuY2FsbCggdGhpcyApLAoJICAgIGRpZmY7CgoJaWYgKCAhcmVnZXgudG9wX2JvdHRvbS50ZXN0KCBwb3MgKSApIHsKCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCX0KCgkvLyBSZW1vdmluZyB0aGUgZXhpc3RpbmcgY29udHJvbHMKCWFycmF5LmVhY2goIHV0aWxpdHkuJCggIiMiICsgb2JqLmlkICsgIi1wYWdlcy10b3AsICMiICsgb2JqLmlkICsgIi1wYWdlcy1ib3R0b20iICksIGZ1bmN0aW9uICggaSApIHsKCQlpZiAoIGkgKSB7CgkJCWVsZW1lbnQuZGVzdHJveSggaSApOwoJCX0KCX0pOwoJCgkvLyBIYWx0aW5nIGJlY2F1c2UgdGhlcmUncyAxIHBhZ2UsIG9yIG5vdGhpbmcKCWlmICggKCB0aGlzLmZpbHRlciAmJiB0aGlzLmZpbHRlcmVkLmxlbmd0aCA9PT0gMCApIHx8IHRoaXMudG90YWwgPT09IDAgfHwgdG90YWwgPT09IDEgKSB7CgkJcmV0dXJuIHRoaXM7Cgl9CgoJLy8gR2V0dGluZyB0aGUgcmFuZ2UgdG8gZGlzcGxheQoJaWYgKCBzdGFydCA8IDEgKSB7CgkJZGlmZiAgPSBudW1iZXIuZGlmZiggc3RhcnQsIDEgKTsKCQlzdGFydCA9IHN0YXJ0ICsgZGlmZjsKCQllbmQgICA9IGVuZCAgICsgZGlmZjsKCX0KCglpZiAoIGVuZCA+IHRvdGFsICkgewoJCWVuZCAgID0gdG90YWw7CgkJc3RhcnQgPSAoIGVuZCAtIHJhbmdlICkgKyAxOwoKCQlpZiAoIHN0YXJ0IDwgMSApIHsKCQkJc3RhcnQgPSAxOwoJCX0KCX0KCglpZiAoIG51bWJlci5kaWZmKCBzdGFydCwgZW5kICkgPj0gcmFuZ2UgKSB7CgkJLS1lbmQ7Cgl9CgoJYXJyYXkuZWFjaCggc3RyaW5nLmV4cGxvZGUoIHBvcyApLCBmdW5jdGlvbiAoIGkgKSB7CgkJdmFyIGN1cnJlbnQgPSBmYWxzZSwKCQkgICAgbW9yZSAgICA9IHBhZ2UgPiAxLAoJCSAgICBuZXh0ICAgID0gKCBwYWdlICsgMSApIDw9IHRvdGFsLAoJCSAgICBsYXN0ICAgID0gKCBwYWdlID49IHRvdGFsICksCgkJICAgIGVsLCBuOwoKCQkvLyBTZXR0aW5nIHVwIHRoZSBsaXN0CgkJZWwgPSBlbGVtZW50LmNyZWF0ZSggInVsIiwgeyJjbGFzcyI6ICJsaXN0IHBhZ2VzIGhpZGRlbiAiICsgaSwgaWQ6IG9iai5pZCArICItcGFnZXMtIiArIGl9LCBvYmosIGkgPT09ICJib3R0b20iID8gImFmdGVyIiA6ICJiZWZvcmUiICk7CgoJCS8vIEZpcnN0IHBhZ2UKCQllbGVtZW50LmNyZWF0ZSggbW9yZSA/ICJhIiA6ICJzcGFuIiwgeyJjbGFzcyI6ICJmaXJzdCBwYWdlIiwgImRhdGEtcGFnZSI6IDEsIGlubmVySFRNTDogIiZsdDsmbHQ7In0sIGVsZW1lbnQuY3JlYXRlKCAibGkiLCB7fSwgZWwpICk7CgoJCS8vIFByZXZpb3VzIHBhZ2UKCQllbGVtZW50LmNyZWF0ZSggbW9yZSA/ICJhIiA6ICJzcGFuIiwgeyJjbGFzcyI6ICJwcmV2IHBhZ2UiLCAiZGF0YS1wYWdlIjogKHBhZ2UgLSAxKSwgaW5uZXJIVE1MOiAiJmx0OyJ9LCBlbGVtZW50LmNyZWF0ZSggImxpIiwge30sIGVsKSApOwoKCQkvLyBSZW5kZXJpbmcgdGhlIHBhZ2UgcmFuZ2UKCQlmb3IgKCBuID0gc3RhcnQ7IG4gPD0gZW5kOyBuKysgKSB7CgkJCWN1cnJlbnQgPSAoIG4gPT09IHBhZ2UgKTsKCQkJZWxlbWVudC5jcmVhdGUoIGN1cnJlbnQgPyAic3BhbiIgOiAiYSIsIHsiY2xhc3MiOiBjdXJyZW50ID8gImN1cnJlbnQgcGFnZSIgOiAicGFnZSIsICJkYXRhLXBhZ2UiOiBuLCBpbm5lckhUTUw6IG59LCBlbGVtZW50LmNyZWF0ZSggImxpIiwge30sIGVsKSApOwoJCX0KCgkJLy8gTmV4dCBwYWdlCgkJZWxlbWVudC5jcmVhdGUoIG5leHQgPyAiYSIgOiAic3BhbiIsIHsiY2xhc3MiOiAibmV4dCBwYWdlIiwgImRhdGEtcGFnZSI6IG5leHQgPyAocGFnZSArIDEpIDogbnVsbCwgaW5uZXJIVE1MOiAiJmd0OyJ9LCBlbGVtZW50LmNyZWF0ZSggImxpIiwge30sIGVsKSApOwoKCQkvLyBMYXN0IHBhZ2UKCQllbGVtZW50LmNyZWF0ZSggbGFzdCA/ICJzcGFuIiA6ICJhIiwgeyJjbGFzcyI6ICJsYXN0IHBhZ2UiLCAiZGF0YS1wYWdlIjogbGFzdCA/IG51bGwgOiB0b3RhbCwgaW5uZXJIVE1MOiAiJmd0OyZndDsifSwgZWxlbWVudC5jcmVhdGUoICJsaSIsIHt9LCBlbCkgKTsKCgkJLy8gQWRkaW5nIHRvIERPTQoJCWVsZW1lbnQua2xhc3MoIGVsLCAiaGlkZGVuIiwgZmFsc2UgKTsKCgkJLy8gQ2xpY2sgaGFuZGxlciBzY3JvbGxzIHRvIHRvcCB0aGUgdG9wIG9mIHBhZ2UKCQlvYnNlcnZlci5hZGQoIGVsLCAiY2xpY2siLCBmdW5jdGlvbiAoZSApIHsKCQkJdmFyIHRhcmdldCA9IHV0aWxpdHkudGFyZ2V0KCBlICk7CgoJCQl1dGlsaXR5LnN0b3AoIGUgKTsKCgkJCWlmICggdGFyZ2V0Lm5vZGVOYW1lID09PSAiQSIgKSB7CgkJCQlzZWxmLnBhZ2UoIGVsZW1lbnQuZGF0YSggdGFyZ2V0LCAicGFnZSIpICk7CgkJCQllbGVtZW50LnNjcm9sbFRvKCBvYmogKTsKCQkJfQoJCX0sICJwYWdpbmF0aW9uIik7Cgl9KTsKCglyZXR1cm4gdGhpczsKfTsKCi8qKgogKiBSZWZyZXNoZXMgZWxlbWVudAogKgogKiBFdmVudHM6IGJlZm9yZURhdGFMaXN0UmVmcmVzaCAgRmlyZXMgZnJvbSB0aGUgZWxlbWVudCBjb250YWluaW5nIHRoZSBEYXRhTGlzdAogKiAgICAgICAgIGFmdGVyRGF0YUxpc3RSZWZyZXNoICAgRmlyZXMgZnJvbSB0aGUgZWxlbWVudCBjb250YWluaW5nIHRoZSBEYXRhTGlzdAogKgogKiBAbWV0aG9kIHJlZnJlc2gKICogQHBhcmFtICB7Qm9vbGVhbn0gcmVkcmF3IFtPcHRpb25hbF0gQm9vbGVhbiB0byBmb3JjZSBjbGVhcmluZyB0aGUgRGF0YUxpc3QgKCBkZWZhdWx0ICksIGZhbHNlIHRvZ2dsZXMgImhpZGRlbiIgY2xhc3Mgb2YgaXRlbXMKICogQHBhcmFtICB7Qm9vbGVhbn0gY3JlYXRlIFtPcHRpb25hbF0gUmVjcmVhdGVzIGNhY2hlZCBWaWV3IG9mIGRhdGEKICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgIERhdGFMaXN0IGluc3RhbmNlCiAqLwpEYXRhTGlzdC5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uICggcmVkcmF3LCBjcmVhdGUgKSB7Cgl2YXIgZWwgICAgICAgPSB0aGlzLmVsZW1lbnQsCgkgICAgdGVtcGxhdGUgPSAoIHR5cGVvZiB0aGlzLnRlbXBsYXRlID09PSAib2JqZWN0IiApLAoJICAgIGZpbHRlciAgID0gdGhpcy5maWx0ZXIgIT09IG51bGwsCgkgICAgaXRlbXMgICAgPSBbXSwKCSAgICBzZWxmICAgICA9IHRoaXMsCgkgICAgY2FsbGJhY2sgPSAoIHR5cGVvZiB0aGlzLmNhbGxiYWNrID09PSAiZnVuY3Rpb24iICksCgkgICAgcmVnICAgICAgPSBuZXcgUmVnRXhwKCksCgkgICAgcmVnaXN0cnkgPSBbXSwgLy8ga2VlcHMgdHJhY2sgb2YgcmVjb3JkcyBpbiB0aGUgbGlzdCAoIGZvciBmaWx0ZXJpbmcgKQoJICAgIHJhbmdlICAgID0gW10sCgkgICAgZm4sIGNlaWxpbmc7CgoJcmVkcmF3ID0gcmVkcmF3ICE9PSBmYWxzZTsKCWNyZWF0ZSA9IGNyZWF0ZSA9PT0gdHJ1ZTsKCglvYnNlcnZlci5maXJlKCBlbCwgImJlZm9yZURhdGFMaXN0UmVmcmVzaCIgKTsKCgkvLyBGdW5jdGlvbiB0byBjcmVhdGUgdGVtcGxhdGVzIGZvciB0aGUgaHRtbCByZXAKCWlmICggIXRlbXBsYXRlICkgewoJCWZuID0gZnVuY3Rpb24gKCBpICkgewoJCQl2YXIgaHRtbCAgPSBzZWxmLnRlbXBsYXRlLAoJCQkgICAgaXRlbXMgPSBhcnJheS51bmlxdWUoIGh0bWwubWF0Y2goIC9ce1x7W1x3XC5cLVxbXF1dK1x9XH0vZyApICk7CgoJCQkvLyBSZXBsYWNpbmcgcmVjb3JkIGtleQoJCQlodG1sID0gaHRtbC5yZXBsYWNlKCAie3siICsgc2VsZi5zdG9yZS5rZXkgKyAifX0iLCBpLmtleSApOwoJCQkKCQkJLy8gUmVwbGFjaW5nIGRvdCBub3RhdGlvbiBwcm9wZXJ0aWVzCgkJCWFycmF5LmVhY2goIGl0ZW1zLCBmdW5jdGlvbiAoIGF0dHIgKSB7CgkJCQl2YXIga2V5ICAgPSBhdHRyLnJlcGxhY2UoIC9ce1x7fFx9XH0vZywgIiIgKSwKCQkJCSAgICB2YWx1ZSA9IHV0aWxpdHkud2FsayggaS5kYXRhLCBrZXkgKTsKCgkJCQlyZWcuY29tcGlsZSggc3RyaW5nLmVzY2FwZSggYXR0ciApLCAiZyIgKTsKCQkJCWh0bWwgPSBodG1sLnJlcGxhY2UoIHJlZywgdmFsdWUgKTsKCQkJfSk7CgoJCQkvLyBGaWxsaW5nIGluIHBsYWNlaG9sZGVyIHZhbHVlCgkJCWh0bWwgPSBodG1sLnJlcGxhY2UoIC9ce1x7LipcfVx9L2csIHNlbGYucGxhY2Vob2xkZXIgKTsKCgkJCXJldHVybiAiPGxpIGRhdGEta2V5PVwiIiArIGkua2V5ICsgIlwiPiIgKyBodG1sICsgIjwvbGk+IjsKCQl9OwoJfQoJZWxzZSB7CgkJZm4gPSBmdW5jdGlvbiAoIGkgKSB7CgkJCXZhciBvYmogICA9IGpzb24uZW5jb2RlKCBzZWxmLnRlbXBsYXRlICksCgkJCSAgICBpdGVtcyA9IGFycmF5LnVuaXF1ZSggb2JqLm1hdGNoKCAvXHtce1tcd1wuXC1cW1xdXStcfVx9L2cgKSApOwoKCQkJLy8gUmVwbGFjaW5nIHJlY29yZCBrZXkKCQkJb2JqID0gb2JqLnJlcGxhY2UoICJ7eyIgKyBzZWxmLnN0b3JlLmtleSArICJ9fSIsIGkua2V5ICk7CgkJCQoJCQkvLyBSZXBsYWNpbmcgZG90IG5vdGF0aW9uIHByb3BlcnRpZXMKCQkJYXJyYXkuZWFjaCggaXRlbXMsIGZ1bmN0aW9uICggYXR0ciApIHsKCQkJCXZhciBrZXkgICA9IGF0dHIucmVwbGFjZSggL1x7XHt8XH1cfS9nLCAiIiApLAoJCQkJICAgIHZhbHVlID0gdXRpbGl0eS53YWxrKCBpLmRhdGEsIGtleSApOwoKCQkJCXJlZy5jb21waWxlKCBzdHJpbmcuZXNjYXBlKCBhdHRyICksICJnIiApOwoKCQkJCS8vIFN0cmlwcGluZyBmaXJzdCBhbmQgbGFzdCAiIHRvIGNvbmNhdCB0byB2YWxpZCBKU09OCgkJCQlvYmogPSBvYmoucmVwbGFjZSggcmVnLCBqc29uLmVuY29kZSggdmFsdWUgKS5yZXBsYWNlKCAvKF4iKXwoIiQpL2csICIiICkgKTsKCQkJfSk7CgoJCQkvLyBGaWxsaW5nIGluIHBsYWNlaG9sZGVyIHZhbHVlCgkJCW9iaiA9IGpzb24uZGVjb2RlKCBvYmoucmVwbGFjZSggL1x7XHsuKlx9XH0vZywgc2VsZi5wbGFjZWhvbGRlciApICk7CgoJCQlyZXR1cm4ge2xpOiBvYmp9OwoJCX07Cgl9CgoJLy8gQ29uc3VtaW5nIHJlY29yZHMgYmFzZWQgb24gc29ydAoJaWYgKCB0aGlzLndoZXJlID09PSBudWxsICkgewoJCXRoaXMucmVjb3JkcyA9IHN0cmluZy5pc0VtcHR5KCB0aGlzLm9yZGVyICkgPyB0aGlzLnN0b3JlLmdldCgpIDogdGhpcy5zdG9yZS5zb3J0KCB0aGlzLm9yZGVyLCBjcmVhdGUgKTsKCX0KCWVsc2UgewoJCXRoaXMucmVjb3JkcyA9IHN0cmluZy5pc0VtcHR5KCB0aGlzLm9yZGVyICkgPyB0aGlzLnN0b3JlLnNlbGVjdCggdGhpcy53aGVyZSApIDogdGhpcy5zdG9yZS5zb3J0KCB0aGlzLm9yZGVyLCBjcmVhdGUsIHRoaXMud2hlcmUgKTsKCX0KCgl0aGlzLnRvdGFsICAgID0gdGhpcy5yZWNvcmRzLmxlbmd0aDsKCXRoaXMuZmlsdGVyZWQgPSBbXTsKCgkvLyBSZXNldHRpbmcgJ3ZpZXcnIHNwZWNpZmljIGFycmF5cwoJdGhpcy5jdXJyZW50ICA9IFtdOwoKCS8vIEZpbHRlcmluZyByZWNvcmRzIChpZiBhcHBsaWNhYmxlKQoJaWYgKCBmaWx0ZXIgKSB7CgkJYXJyYXkuZWFjaCggdGhpcy5yZWNvcmRzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCXV0aWxpdHkuaXRlcmF0ZSggc2VsZi5maWx0ZXIsIGZ1bmN0aW9uICggdiwgayApIHsKCQkJCXZhciByZWcsIGtleTsKCgkJCQlpZiAoIGFycmF5LmNvbnRhaW5zKCByZWdpc3RyeSwgaS5rZXkgKSApIHsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCQkKCQkJCXYgICA9IHN0cmluZy5leHBsb2RlKCB2ICk7CgkJCQlyZWcgPSBuZXcgUmVnRXhwKCksCgkJCQlrZXkgPSAoIGsgPT09IHNlbGYuc3RvcmUua2V5ICk7CgoJCQkJYXJyYXkuZWFjaCggdiwgZnVuY3Rpb24gKCBxdWVyeSApIHsKCQkJCQl2YXIgdmFsdWUgPSAha2V5ID8gdXRpbGl0eS53YWxrKCBpLmRhdGEsIGsgKSA6ICIiOwoKCQkJCQl1dGlsaXR5LmNvbXBpbGUoIHJlZywgcXVlcnksICJpIiApOwoKCQkJCQlpZiAoICgga2V5ICYmIHJlZy50ZXN0KCBpLmtleSApICkgfHwgcmVnLnRlc3QoIHZhbHVlICkgKSB7CgkJCQkJCXJlZ2lzdHJ5LnB1c2goIGkua2V5ICk7CgkJCQkJCXNlbGYuZmlsdGVyZWQucHVzaCggaSApOwoKCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCX0KCQkJCX0pOwoJCQl9KTsKCQl9KTsKCX0KCgkvLyBQYWdpbmF0aW9uCglpZiAoIHR5cGVvZiB0aGlzLnBhZ2VJbmRleCA9PT0gIm51bWJlciIgJiYgdHlwZW9mIHRoaXMucGFnZVNpemUgPT09ICJudW1iZXIiICkgewoJCWNlaWxpbmcgPSBkYXRhbGlzdC5wYWdlcy5jYWxsKCB0aGlzICk7CgoJCS8vIFBhc3NlZCB0aGUgZW5kLCBzbyBwdXR0aW5nIHlvdSBvbiB0aGUgZW5kCgkJaWYgKCBjZWlsaW5nID4gMCAmJiB0aGlzLnBhZ2VJbmRleCA+IGNlaWxpbmcgKSB7CgkJCXJldHVybiB0aGlzLnBhZ2UoIGNlaWxpbmcgKTsKCQl9CgoJCS8vIFBhZ2luYXRpbmcgdGhlIGl0ZW1zCgkJZWxzZSBpZiAoIHRoaXMudG90YWwgPiAwICkgewoJCQlyYW5nZSAgICAgICAgPSBkYXRhbGlzdC5yYW5nZS5jYWxsKCB0aGlzICk7CgkJCXRoaXMuY3VycmVudCA9IGFycmF5LmxpbWl0KCAhZmlsdGVyID8gdGhpcy5yZWNvcmRzIDogdGhpcy5maWx0ZXJlZCwgcmFuZ2VbMF0sIHJhbmdlWzFdICk7CgkJfQoJfQoJZWxzZSB7CgkJdGhpcy5jdXJyZW50ID0gIWZpbHRlciA/IHRoaXMucmVjb3JkcyA6IHRoaXMuZmlsdGVyZWQ7Cgl9CgoJLy8gUHJvY2Vzc2luZyByZWNvcmRzICYgZ2VuZXJhdGluZyB0ZW1wbGF0ZXMKCWFycmF5LmVhY2goIHRoaXMuY3VycmVudCwgZnVuY3Rpb24gKCBpICkgewoJCWl0ZW1zLnB1c2goIHtrZXk6IGkua2V5LCB0ZW1wbGF0ZTogZm4oIGkgKX0gKTsKCX0pOwoKCS8vIFByZXBhcmluZyB0aGUgdGFyZ2V0IGVsZW1lbnQKCWlmICggcmVkcmF3ICkgewoJCWlmICggaXRlbXMubGVuZ3RoID09PSAwICkgewoJCQllbC5pbm5lckhUTUwgPSAiPGxpIGNsYXNzPVwiZW1wdHlcIj4iICsgdGhpcy5lbXB0eU1zZyArICI8L2xpPiI7CgkJfQoJCWVsc2UgewoJCQllbC5pbm5lckhUTUwgPSBpdGVtcy5tYXAoIGZ1bmN0aW9uICggaSApIHsKCQkJCXJldHVybiBpLnRlbXBsYXRlOwoJCQl9KS5qb2luKCAiXG4iICk7CgoJCQlpZiAoIGNhbGxiYWNrICkgewoJCQkJYXJyYXkuZWFjaCggZWxlbWVudC5maW5kKCBlbCwgIj4gbGkiICksIGZ1bmN0aW9uICggaSApIHsKCQkJCQlzZWxmLmNhbGxiYWNrKCBpICk7CgkJCQl9KTsKCQkJfQoJCX0KCX0KCWVsc2UgewoJCWFycmF5LmVhY2goIGVsZW1lbnQuZmluZCggZWwsICI+IGxpIiApLCBmdW5jdGlvbiAoIGkgKSB7CgkJCWVsZW1lbnQuYWRkQ2xhc3MoIGksICJoaWRkZW4iICk7CgkJfSk7CgoJCWFycmF5LmVhY2goIGl0ZW1zLCBmdW5jdGlvbiAoIGkgKSB7CgkJCWFycmF5LmVhY2goIGVsZW1lbnQuZmluZCggZWwsICI+IGxpW2RhdGEta2V5PSciICsgaS5rZXkgKyAiJ10iICksIGZ1bmN0aW9uICggbyApIHsKCQkJCWVsZW1lbnQucmVtb3ZlQ2xhc3MoIG8sICJoaWRkZW4iICk7CgkJCX0pOwoJCX0pOwoJfQoKCS8vIFJlbmRlcmluZyBwYWdpbmF0aW9uIGVsZW1lbnRzCglpZiAoIHJlZ2V4LnRvcF9ib3R0b20udGVzdCggdGhpcy5wYWdpbmF0aW9uICkgJiYgdHlwZW9mIHRoaXMucGFnZUluZGV4ID09PSAibnVtYmVyIiAmJiB0eXBlb2YgdGhpcy5wYWdlU2l6ZSA9PT0gIm51bWJlciIpIHsKCQl0aGlzLnBhZ2VzKCk7Cgl9CgllbHNlIHsKCQlhcnJheS5lYWNoKCB1dGlsaXR5LiQoICIjIiArIGVsLmlkICsgIi1wYWdlcy10b3AsICMiICsgZWwuaWQgKyAiLXBhZ2VzLWJvdHRvbSIgKSwgZnVuY3Rpb24gKCBpICkgewoJCQllbGVtZW50LmRlc3Ryb3koIGkgKTsKCQl9KTsKCX0KCglvYnNlcnZlci5maXJlKCBlbCwgImFmdGVyRGF0YUxpc3RSZWZyZXNoIiApOwoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIFNvcnRzIGRhdGEgbGlzdCAmIHJlZnJlc2hlcyBlbGVtZW50CiAqCiAqIEBtZXRob2Qgc29ydAogKiBAcGFyYW0gIHtTdHJpbmd9IG9yZGVyIFNRTCAib3JkZXIgYnkiIHN0YXRlbWVudAogKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgIERhdGFMaXN0IGluc3RhbmNlCiAqLwpEYXRhTGlzdC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uICggb3JkZXIgKSB7Cgl0aGlzLm9yZGVyID0gb3JkZXI7CgoJcmV0dXJuIHRoaXMucmVmcmVzaCgpOwp9OwoKLyoqCiAqIFRlYXJzIGRvd24gcmVmZXJlbmNlcyB0byB0aGUgRGF0YUxpc3QKICoKICogQG1ldGhvZCB0ZWFyZG93bgogKiBAcGFyYW0gIHtCb29sZWFufSBkZXN0cm95IFtPcHRpb25hbF0gYHRydWVgIHdpbGwgcmVtb3ZlIHRoZSBEYXRhTGlzdCBmcm9tIHRoZSBET00KICogQHJldHVybiB7T2JqZWN0fSAgRGF0YUxpc3QgaW5zdGFuY2UKICovCkRhdGFMaXN0LnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uICggZGVzdHJveSApIHsKCWRlc3Ryb3kgID0gKCBkZXN0cm95ID09PSB0cnVlICk7Cgl2YXIgc2VsZiA9IHRoaXMsCgkgICAgaWQgICA9IHRoaXMuZWxlbWVudC5pZDsKCglvYnNlcnZlci5yZW1vdmUoIGlkICk7CgoJYXJyYXkuZWFjaCggdXRpbGl0eS4kKCAiIyIgKyBpZCArICItcGFnZXMtdG9wLCAjIiArIGlkICsgIi1wYWdlcy1ib3R0b20iICksIGZ1bmN0aW9uICggaSApIHsKCQlvYnNlcnZlci5yZW1vdmUoIGkgKTsKCX0pOwoKCWFycmF5LmVhY2goIHRoaXMuc3RvcmUuZGF0YWxpc3RzLCBmdW5jdGlvbiAoIGksIGlkeCApIHsKCQlpZiAoIGkuaWQgPT09IHNlbGYuaWQgKSB7CgkJCXRoaXMucmVtb3ZlKCBpZHggKTsKCgkJCXJldHVybiBmYWxzZTsKCQl9Cgl9KTsKCglpZiAoIGRlc3Ryb3kgKSB7CgkJZWxlbWVudC5kZXN0cm95KCB0aGlzLmVsZW1lbnQgKTsKCQl0aGlzLmVsZW1lbnQgPSBudWxsOwoJfQoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIGRlZmVycmVkIGZhY3RvcnkKICoKICogQG1ldGhvZCBkZWZlcnJlZAogKiBAcmV0dXJuIHtPYmplY3R9IERlZmVycmVkIGluc3RhbmNlCiAqLwp2YXIgZGVmZXJyZWQgPSBmdW5jdGlvbiAoKSB7CglyZXR1cm4gbmV3IERlZmVycmVkKCk7Cn07CgovKioKICogRGVmZXJyZWQKICoKICogQGNvbnN0cnVjdG9yCiAqLwpmdW5jdGlvbiBEZWZlcnJlZCAoKSB7Cgl2YXIgc2VsZiAgICAgID0gdGhpczsKCgl0aGlzLnByb21pc2UgID0gcHJvbWlzZS5mYWN0b3J5KCk7Cgl0aGlzLm9uRG9uZSAgID0gW107Cgl0aGlzLm9uQWx3YXlzID0gW107Cgl0aGlzLm9uRmFpbCAgID0gW107CgoJLy8gU2V0dGluZyBoYW5kbGVycyB0byBleGVjdXRlIEFycmF5cyBvZiBGdW5jdGlvbnMKCXRoaXMucHJvbWlzZS50aGVuKCBmdW5jdGlvbiAoIGFyZyApIHsKCQlwcm9taXNlLmRlbGF5KCBmdW5jdGlvbiAoKSB7CgkJCWFycmF5LmVhY2goIHNlbGYub25Eb25lLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlpKCBhcmcgKTsKCQkJfSk7CgoJCQlhcnJheS5lYWNoKCBzZWxmLm9uQWx3YXlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlpKCBhcmcgKTsKCQkJfSk7CgoJCQlzZWxmLm9uQWx3YXlzID0gW107CgkJCXNlbGYub25Eb25lICAgPSBbXTsKCQkJc2VsZi5vbkZhaWwgICA9IFtdOwoJCX0pOwoJfSwgZnVuY3Rpb24gKCBhcmcgKSB7CgkJcHJvbWlzZS5kZWxheSggZnVuY3Rpb24gKCkgewoJCQlhcnJheS5lYWNoKCBzZWxmLm9uRmFpbCwgZnVuY3Rpb24gKCBpICkgewoJCQkJaSggYXJnICk7CgkJCX0pOwoKCQkJYXJyYXkuZWFjaCggc2VsZi5vbkFsd2F5cywgZnVuY3Rpb24gKCBpICkgewoJCQkJaSggYXJnICk7CgkJCX0pOwoKCQkJc2VsZi5vbkFsd2F5cyA9IFtdOwoJCQlzZWxmLm9uRG9uZSAgID0gW107CgkJCXNlbGYub25GYWlsICAgPSBbXTsKCQl9KTsKCX0pOwp9CgovLyBTZXR0aW5nIGNvbnN0cnVjdG9yIGxvb3AKRGVmZXJyZWQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGVmZXJyZWQ7CgovKioKICogUmVnaXN0ZXJzIGEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhZnRlciBQcm9taXNlIGlzIHJlY29uY2lsZWQKICoKICogQG1ldGhvZCBhbHdheXMKICogQHBhcmFtICB7RnVuY3Rpb259IGFyZyBGdW5jdGlvbiB0byBleGVjdXRlCiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgRGVmZXJyZWQgaW5zdGFuY2UKICovCkRlZmVycmVkLnByb3RvdHlwZS5hbHdheXMgPSBmdW5jdGlvbiAoIGFyZyApIHsKCWlmICggdHlwZW9mIGFyZyAhPT0gImZ1bmN0aW9uIiApIHsKCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCX0KCWVsc2UgaWYgKCB0aGlzLnByb21pc2Uuc3RhdGUgPiAwICkgewoJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IucHJvbWlzZVJlc29sdmVkLnJlcGxhY2UoICJ7e291dGNvbWV9fSIsIHRoaXMucHJvbWlzZS52YWx1ZSApICk7Cgl9CgoJdGhpcy5vbkFsd2F5cy5wdXNoKCBhcmcgKTsKCglyZXR1cm4gdGhpczsKfTsKCi8qKgogKiBSZWdpc3RlcnMgYSBmdW5jdGlvbiB0byBleGVjdXRlIGFmdGVyIFByb21pc2UgaXMgcmVzb2x2ZWQKICoKICogQG1ldGhvZCBkb25lCiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBhcmcgRnVuY3Rpb24gdG8gZXhlY3V0ZQogKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgIERlZmVycmVkIGluc3RhbmNlCiAqLwpEZWZlcnJlZC5wcm90b3R5cGUuZG9uZSA9IGZ1bmN0aW9uICggYXJnICkgewoJaWYgKCB0eXBlb2YgYXJnICE9PSAiZnVuY3Rpb24iICkgewoJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJfQoJZWxzZSBpZiAoIHRoaXMucHJvbWlzZS5zdGF0ZSA+IDAgKSB7CgkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5wcm9taXNlUmVzb2x2ZWQucmVwbGFjZSggInt7b3V0Y29tZX19IiwgdGhpcy5wcm9taXNlLnZhbHVlICkgKTsKCX0KCgl0aGlzLm9uRG9uZS5wdXNoKCBhcmcgKTsKCglyZXR1cm4gdGhpczsKfTsKCi8qKgogKiBSZWdpc3RlcnMgYSBmdW5jdGlvbiB0byBleGVjdXRlIGFmdGVyIFByb21pc2UgaXMgcmVqZWN0ZWQKICoKICogQG1ldGhvZCBmYWlsCiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBhcmcgRnVuY3Rpb24gdG8gZXhlY3V0ZQogKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgIERlZmVycmVkIGluc3RhbmNlCiAqLwpEZWZlcnJlZC5wcm90b3R5cGUuZmFpbCA9IGZ1bmN0aW9uICggYXJnICkgewoJaWYgKCB0eXBlb2YgYXJnICE9PSAiZnVuY3Rpb24iICkgewoJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJfQoJZWxzZSBpZiAoIHRoaXMucHJvbWlzZS5zdGF0ZSA+IDAgKSB7CgkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5wcm9taXNlUmVzb2x2ZWQucmVwbGFjZSggInt7b3V0Y29tZX19IiwgdGhpcy5wcm9taXNlLnZhbHVlICkgKTsKCX0KCgl0aGlzLm9uRmFpbC5wdXNoKCBhcmcgKTsKCglyZXR1cm4gdGhpczsKfTsKCi8qKgogKiBEZXRlcm1pbmVzIGlmIERlZmVycmVkIGlzIHJlamVjdGVkCiAqCiAqIEBtZXRob2QgaXNSZWplY3RlZAogKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgcmVqZWN0ZWQKICovCkRlZmVycmVkLnByb3RvdHlwZS5pc1JlamVjdGVkID0gZnVuY3Rpb24gKCkgewoJcmV0dXJuICggdGhpcy5wcm9taXNlLnN0YXRlID09PSBwcm9taXNlLnN0YXRlLkZBSUxFRCApOwp9OwoKLyoqCiAqIERldGVybWluZXMgaWYgRGVmZXJyZWQgaXMgcmVzb2x2ZWQKICoKICogQG1ldGhvZCBpc1Jlc29sdmVkCiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiByZXNvbHZlZAogKi8KRGVmZXJyZWQucHJvdG90eXBlLmlzUmVzb2x2ZWQgPSBmdW5jdGlvbiAoKSB7CglyZXR1cm4gKCB0aGlzLnByb21pc2Uuc3RhdGUgPT09IHByb21pc2Uuc3RhdGUuU1VDQ0VTUyApOwp9OwoKLyoqCiAqIFJlamVjdHMgdGhlIFByb21pc2UKICoKICogQG1ldGhvZCByZWplY3QKICogQHBhcmFtICB7TWl4ZWR9IGFyZyBSZWplY3Rpb24gb3V0Y29tZQogKiBAcmV0dXJuIHtPYmplY3R9ICAgIERlZmVycmVkIGluc3RhbmNlCiAqLwpEZWZlcnJlZC5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24gKCBhcmcgKSB7Cgl0aGlzLnByb21pc2UucmVqZWN0LmNhbGwoIHRoaXMucHJvbWlzZSwgYXJnICk7CgoJcmV0dXJuIHRoaXM7Cn07CgovKioKICogUmVzb2x2ZXMgdGhlIFByb21pc2UKICoKICogQG1ldGhvZCByZXNvbHZlCiAqIEBwYXJhbSAge01peGVkfSBhcmcgUmVzb2x1dGlvbiBvdXRjb21lCiAqIEByZXR1cm4ge09iamVjdH0gICAgRGVmZXJyZWQgaW5zdGFuY2UKICovCkRlZmVycmVkLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gKCBhcmcgKSB7Cgl0aGlzLnByb21pc2UucmVzb2x2ZS5jYWxsKCB0aGlzLnByb21pc2UsIGFyZyApOwoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIEdldHMgdGhlIHN0YXRlIG9mIHRoZSBQcm9taXNlCiAqCiAqIEBtZXRob2Qgc3RhdGUKICogQHJldHVybiB7U3RyaW5nfSBEZXNjcmliZXMgdGhlIHN0YXRlCiAqLwpEZWZlcnJlZC5wcm90b3R5cGUuc3RhdGUgPSBmdW5jdGlvbiAoKSB7CglyZXR1cm4gdGhpcy5wcm9taXNlLnN0YXRlOwp9OwoKLyoqCiAqIFJlZ2lzdGVycyBoYW5kbGVyKHMpIGZvciB0aGUgUHJvbWlzZQogKgogKiBAbWV0aG9kIHRoZW4KICogQHBhcmFtICB7RnVuY3Rpb259IHN1Y2Nlc3MgRXhlY3V0ZWQgd2hlbi9pZiBwcm9taXNlIGlzIHJlc29sdmVkCiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmYWlsdXJlIFtPcHRpb25hbF0gRXhlY3V0ZWQgd2hlbi9pZiBwcm9taXNlIGlzIGJyb2tlbgogKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICBOZXcgUHJvbWlzZSBpbnN0YW5jZQogKi8KRGVmZXJyZWQucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiAoIHN1Y2Nlc3MsIGZhaWx1cmUgKSB7CglyZXR1cm4gdGhpcy5wcm9taXNlLnRoZW4oIHN1Y2Nlc3MsIGZhaWx1cmUgKTsKfTsKCi8qKiBAbmFtZXNwYWNlIGVsZW1lbnQgKi8KdmFyIGVsZW1lbnQgPSB7CgkvKioKCSAqIEdldHMgb3Igc2V0cyBhbiBFbGVtZW50IGF0dHJpYnV0ZQoJICoKCSAqIEBtZXRob2QgYXR0cgoJICogQHBhcmFtICB7TWl4ZWR9ICBvYmogICBFbGVtZW50CgkgKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgIEF0dHJpYnV0ZSBuYW1lCgkgKiBAcGFyYW0gIHtNaXhlZH0gIHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZQoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICBFbGVtZW50CgkgKi8KCWF0dHIgOiBmdW5jdGlvbiAoIG9iaiwga2V5LCB2YWx1ZSApIHsKCQl2YXIgdGFyZ2V0LCByZXN1bHQ7CgoJCWlmICggcmVnZXguc3ZnLnRlc3QoIG9iai5uYW1lc3BhY2VVUkkgKSApIHsKCQkJaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJcmVzdWx0ID0gb2JqLmdldEF0dHJpYnV0ZU5TKCBvYmoubmFtZXNwYWNlVVJJLCBrZXkgKTsKCgkJCQlpZiAoIHJlc3VsdCA9PT0gbnVsbCB8fCBzdHJpbmcuaXNFbXB0eSggcmVzdWx0ICkgKSB7CgkJCQkJcmVzdWx0ID0gdW5kZWZpbmVkOwoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJcmVzdWx0ID0gdXRpbGl0eS5jb2VyY2UoIHJlc3VsdCApOwoJCQkJfQoJCQl9CgkJCWVsc2UgewoJCQkJb2JqLnNldEF0dHJpYnV0ZU5TKCBvYmoubmFtZXNwYWNlVVJJLCBrZXksIHZhbHVlICk7CgkJCX0KCQl9CgkJZWxzZSB7CgkJCWlmICggdHlwZW9mIHZhbHVlID09PSAic3RyaW5nIiApIHsKCQkJCXZhbHVlID0gc3RyaW5nLnRyaW0oIHZhbHVlICk7CgkJCX0KCgkJCWlmICggcmVnZXguY2hlY2tlZF9kaXNhYmxlZC50ZXN0KCBrZXkgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJcmV0dXJuIHV0aWxpdHkuY29lcmNlKCBvYmpba2V5XSApOwoJCQl9CgkJCWVsc2UgaWYgKCByZWdleC5jaGVja2VkX2Rpc2FibGVkLnRlc3QoIGtleSApICYmIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgkJCQlvYmpba2V5XSA9IHZhbHVlOwoJCQl9CgkJCWVsc2UgaWYgKCBvYmoubm9kZU5hbWUgPT09ICJTRUxFQ1QiICYmIGtleSA9PT0gInNlbGVjdGVkIiAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CgkJCQlyZXR1cm4gdXRpbGl0eS4kKCAiIyIgKyBvYmouaWQgKyAiIG9wdGlvbltzZWxlY3RlZD1cInNlbGVjdGVkXCJdIiApWzBdIHx8IHV0aWxpdHkuJCggIiMiICsgb2JqLmlkICsgIiBvcHRpb24iIClbMF07CgkJCX0KCQkJZWxzZSBpZiAoIG9iai5ub2RlTmFtZSA9PT0gIlNFTEVDVCIgJiYga2V5ID09PSAic2VsZWN0ZWQiICYmIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgkJCQl0YXJnZXQgPSB1dGlsaXR5LiQoICIjIiArIG9iai5pZCArICIgb3B0aW9uW3NlbGVjdGVkPVwic2VsZWN0ZWRcIl0iIClbMF07CgoJCQkJaWYgKCB0YXJnZXQgIT09IHVuZGVmaW5lZCApIHsKCQkJCQl0YXJnZXQuc2VsZWN0ZWQgPSBmYWxzZTsKCQkJCQl0YXJnZXQucmVtb3ZlQXR0cmlidXRlKCAic2VsZWN0ZWQiICk7CgkJCQl9CgoJCQkJdGFyZ2V0ID0gdXRpbGl0eS4kKCAiIyIgKyBvYmouaWQgKyAiIG9wdGlvblt2YWx1ZT1cIiIgKyB2YWx1ZSArICJcIl0iIClbMF07CgkJCQl0YXJnZXQuc2VsZWN0ZWQgPSB0cnVlOwoJCQkJdGFyZ2V0LnNldEF0dHJpYnV0ZSggInNlbGVjdGVkIiwgInNlbGVjdGVkIiApOwoJCQl9CgkJCWVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJcmVzdWx0ID0gb2JqLmdldEF0dHJpYnV0ZSgga2V5ICk7CgoJCQkJaWYgKCByZXN1bHQgPT09IG51bGwgfHwgc3RyaW5nLmlzRW1wdHkoIHJlc3VsdCApICkgewoJCQkJCXJlc3VsdCA9IHVuZGVmaW5lZDsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCXJlc3VsdCA9IHV0aWxpdHkuY29lcmNlKCByZXN1bHQgKTsKCQkJCX0KCgkJCQlyZXR1cm4gcmVzdWx0OwoJCQl9CgkJCWVsc2UgewoJCQkJb2JqLnNldEF0dHJpYnV0ZSgga2V5LCB2YWx1ZSApOwoJCQl9CgkJfQoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIENsZWFycyBhbiBvYmplY3QncyBpbm5lckhUTUwsIG9yIHJlc2V0cyBpdCdzIHN0YXRlCgkgKgoJICogQG1ldGhvZCBjbGVhcgoJICogQHBhcmFtICB7TWl4ZWR9IG9iaiBFbGVtZW50CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgIEVsZW1lbnQKCSAqLwoJY2xlYXIgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlpZiAoIHR5cGVvZiBvYmoucmVzZXQgPT09ICJmdW5jdGlvbiIgKSB7CgkJCW9iai5yZXNldCgpOwoJCX0KCQllbHNlIGlmICggb2JqLnZhbHVlICE9PSB1bmRlZmluZWQgKSB7CgkJCWVsZW1lbnQudXBkYXRlKCBvYmosIHtpbm5lckhUTUw6ICIiLCB2YWx1ZTogIiJ9ICk7CgkJfQoJCWVsc2UgewoJCQllbGVtZW50LnVwZGF0ZSggb2JqLCB7aW5uZXJIVE1MOiAiIn0gKTsKCQl9CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8qKgoJICogQ3JlYXRlcyBhbiBFbGVtZW50IGluIGRvY3VtZW50LmJvZHkgb3IgYSB0YXJnZXQgRWxlbWVudAoJICoKCSAqIEFuIGlkIGlzIGdlbmVyYXRlZCBpZiBub3Qgc3BlY2lmaWVkIHdpdGggYXJncwoJICoKCSAqIEBtZXRob2QgY3JlYXRlCgkgKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGUgICBUeXBlIG9mIEVsZW1lbnQgdG8gY3JlYXRlCgkgKiBAcGFyYW0gIHtPYmplY3R9IGFyZ3MgICBbT3B0aW9uYWxdIENvbGxlY3Rpb24gb2YgcHJvcGVydGllcyB0byBhcHBseSB0byB0aGUgbmV3IGVsZW1lbnQKCSAqIEBwYXJhbSAge01peGVkfSAgdGFyZ2V0IFtPcHRpb25hbF0gVGFyZ2V0IEVsZW1lbnQKCSAqIEBwYXJhbSAge01peGVkfSAgcG9zICAgIFtPcHRpb25hbF0gImZpcnN0IiwgImxhc3QiIG9yIE9iamVjdCBkZXNjcmliaW5nIGhvdyB0byBhZGQgdGhlIG5ldyBFbGVtZW50LCBlLmcuIHtiZWZvcmU6IHJlZmVyZW5jZUVsZW1lbnR9CgkgKiBAcmV0dXJuIHtNaXhlZH0gICAgICAgICBFbGVtZW50IHRoYXQgd2FzIGNyZWF0ZWQsIG9yIGFuIEFycmF5IGlmIGB0eXBlYCBpcyBhIFN0cmluZyBvZiBtdWx0aXBsZSBFbGVtZW50cyAoZnJhZykKCSAqLwoJY3JlYXRlIDogZnVuY3Rpb24gKCB0eXBlLCBhcmdzLCB0YXJnZXQsIHBvcyApIHsKCQl2YXIgc3ZnICA9IGZhbHNlLAoJCSAgICBmcmFnID0gZmFsc2UsCgkJICAgIG9iaiwgdWlkLCByZXN1bHQ7CgoJCS8vIFJlbW92aW5nIHBvdGVudGlhbCBIVE1MIHRlbXBsYXRlIGZvcm1hdHRpbmcKCQl0eXBlID0gdHlwZS5yZXBsYWNlKCAvXHR8XG58XHIvZywgIiIgKTsKCgkJaWYgKCB0YXJnZXQgIT09IHVuZGVmaW5lZCApIHsKCQkJc3ZnID0gKCB0YXJnZXQubmFtZXNwYWNlVVJJICE9PSB1bmRlZmluZWQgJiYgcmVnZXguc3ZnLnRlc3QoIHRhcmdldC5uYW1lc3BhY2VVUkkgKSApOwoJCX0KCQllbHNlIHsKCQkJdGFyZ2V0ID0gZG9jdW1lbnQuYm9keTsKCQl9CgkJCgkJaWYgKCBhcmdzIGluc3RhbmNlb2YgT2JqZWN0ICYmIGFyZ3MuaWQgIT09IHVuZGVmaW5lZCAmJiB1dGlsaXR5LiQoICIjIiArIGFyZ3MuaWQgKSA9PT0gdW5kZWZpbmVkICkgewoJCQl1aWQgPSBhcmdzLmlkOwoJCQlkZWxldGUgYXJncy5pZDsKCQl9CgkJZWxzZSBpZiAoICFzdmcgKSB7CgkJCXVpZCA9IHV0aWxpdHkuZ2VuSWQoIHVuZGVmaW5lZCwgdHJ1ZSApOwoJCX0KCgkJLy8gU3RyaW5nIGluamVjdGlvbiwgY3JlYXRlIGEgZnJhZyBhbmQgYXBwbHkgaXQKCQlpZiAoIHJlZ2V4Lmh0bWwudGVzdCggdHlwZSApICkgewoJCQlmcmFnICAgPSB0cnVlOwoJCQlvYmogICAgPSBlbGVtZW50LmZyYWcoIHR5cGUgKTsKCQkJcmVzdWx0ID0gb2JqLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxID8gb2JqLmNoaWxkTm9kZXNbMF0gOiBhcnJheS5jYXN0KCBvYmouY2hpbGROb2RlcyApOwoJCX0KCQkvLyBPcmlnaW5hbCBzeW50YXgKCQllbHNlIHsKCQkJaWYgKCAhc3ZnICYmICFyZWdleC5zdmcudGVzdCggdHlwZSApICkgewoJCQkJb2JqID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggdHlwZSApOwoJCQl9CgkJCWVsc2UgewoJCQkJb2JqID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLCB0eXBlICk7CgkJCX0KCgkJCWlmICggdWlkICE9PSB1bmRlZmluZWQgKSB7CgkJCQlvYmouaWQgPSB1aWQ7CgkJCX0KCgkJCWlmICggYXJncyBpbnN0YW5jZW9mIE9iamVjdCApIHsKCQkJCWVsZW1lbnQudXBkYXRlKCBvYmosIGFyZ3MgKTsKCQkJfQoJCX0KCgkJaWYgKCBwb3MgPT09IHVuZGVmaW5lZCB8fCBwb3MgPT09ICJsYXN0IiApIHsKCQkJdGFyZ2V0LmFwcGVuZENoaWxkKCBvYmogKTsKCQl9CgkJZWxzZSBpZiAoIHBvcyA9PT0gImZpcnN0IiApIHsKCQkJZWxlbWVudC5wcmVwZW5kQ2hpbGQoIHRhcmdldCwgb2JqICk7CgkJfQoJCWVsc2UgaWYgKCBwb3MgPT09ICJhZnRlciIgKSB7CgkJCXBvcyA9IHt9OwoJCQlwb3MuYWZ0ZXIgPSB0YXJnZXQ7CgkJCXRhcmdldCAgICA9IHRhcmdldC5wYXJlbnROb2RlOwoJCQl0YXJnZXQuaW5zZXJ0QmVmb3JlKCBvYmosIHBvcy5hZnRlci5uZXh0U2libGluZyApOwoJCX0KCQllbHNlIGlmICggcG9zLmFmdGVyICE9PSB1bmRlZmluZWQgKSB7CgkJCXRhcmdldC5pbnNlcnRCZWZvcmUoIG9iaiwgcG9zLmFmdGVyLm5leHRTaWJsaW5nICk7CgkJfQoJCWVsc2UgaWYgKCBwb3MgPT09ICJiZWZvcmUiICkgewoJCQlwb3MgPSB7fTsKCQkJcG9zLmJlZm9yZSA9IHRhcmdldDsKCQkJdGFyZ2V0ICAgICA9IHRhcmdldC5wYXJlbnROb2RlOwoJCQl0YXJnZXQuaW5zZXJ0QmVmb3JlKCBvYmosIHBvcy5iZWZvcmUgKTsKCQl9CgkJZWxzZSBpZiAoIHBvcy5iZWZvcmUgIT09IHVuZGVmaW5lZCApIHsKCQkJdGFyZ2V0Lmluc2VydEJlZm9yZSggb2JqLCBwb3MuYmVmb3JlICk7CgkJfQoJCWVsc2UgewoJCQl0YXJnZXQuYXBwZW5kQ2hpbGQoIG9iaiApOwoJCX0KCgkJcmV0dXJuICFmcmFnID8gb2JqIDogcmVzdWx0OwoJfSwKCgkvKioKCSAqIEdldHMgb3Igc2V0cyBhIENTUyBzdHlsZSBhdHRyaWJ1dGUgb24gYW4gRWxlbWVudAoJICoKCSAqIEBtZXRob2QgY3NzCgkgKiBAcGFyYW0gIHtNaXhlZH0gIG9iaiAgIEVsZW1lbnQKCSAqIEBwYXJhbSAge1N0cmluZ30ga2V5ICAgQ1NTIHRvIHB1dCBpbiBhIHN0eWxlIHRhZwoJICogQHBhcmFtICB7U3RyaW5nfSB2YWx1ZSBbT3B0aW9uYWxdIFZhbHVlIHRvIHNldAoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICBFbGVtZW50CgkgKi8KCWNzcyA6IGZ1bmN0aW9uICggb2JqLCBrZXksIHZhbHVlICkgewoJCWtleSA9IHN0cmluZy50b0NhbWVsQ2FzZSgga2V5ICk7CgoJCWlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKCQkJb2JqLnN0eWxlW2tleV0gPSB2YWx1ZTsKCQkJcmV0dXJuIG9iajsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiBvYmouc3R5bGVba2V5XTsKCQl9Cgl9LAoKCS8qKgoJICogRGF0YSBhdHRyaWJ1dGUgZmFjYWRlIGFjdGluZyBhcyBhIGdldHRlciAod2l0aCBjb2VyY2lvbikgJiBzZXR0ZXIKCSAqCgkgKiBAbWV0aG9kIGRhdGEKCSAqIEBwYXJhbSAge01peGVkfSAgb2JqICAgRWxlbWVudAoJICogQHBhcmFtICB7U3RyaW5nfSBrZXkgICBEYXRhIGtleQoJICogQHBhcmFtICB7TWl4ZWR9ICB2YWx1ZSBCb29sZWFuLCBOdW1iZXIgb3IgU3RyaW5nIHRvIHNldAoJICogQHJldHVybiB7TWl4ZWR9ICAgICAgICB1bmRlZmluZWQsIEVsZW1lbnQgb3IgdmFsdWUKCSAqLwoJZGF0YSA6IGZ1bmN0aW9uICggb2JqLCBrZXksIHZhbHVlICkgewoJCWlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKCQkJb2JqLnNldEF0dHJpYnV0ZSggImRhdGEtIiArIGtleSwgcmVnZXguanNvbl93cmFwLnRlc3QoIHZhbHVlICkgPyBqc29uLmVuY29kZSggdmFsdWUgKSA6IHZhbHVlICk7CgkJCXJldHVybiBvYmo7CgkJfQoJCWVsc2UgewoJCQlyZXR1cm4gdXRpbGl0eS5jb2VyY2UoIG9iai5nZXRBdHRyaWJ1dGUoICJkYXRhLSIgKyBrZXkgKSApOwoJCX0KCX0sCgoJLyoqCgkgKiBEZXN0cm95cyBhbiBFbGVtZW50CgkgKgoJICogQG1ldGhvZCBkZXN0cm95CgkgKiBAcGFyYW0gIHtNaXhlZH0gb2JqIEVsZW1lbnQKCSAqIEByZXR1cm4ge1VuZGVmaW5lZH0gdW5kZWZpbmVkCgkgKi8KCWRlc3Ryb3kgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlvYnNlcnZlci5yZW1vdmUoIG9iaiApOwoKCQlpZiAoIG9iai5wYXJlbnROb2RlICE9PSBudWxsICkgewoJCQlvYmoucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggb2JqICk7CgkJfQoKCQlyZXR1cm4gdW5kZWZpbmVkOwoJfSwKCgkvKioKCSAqIERpc2FibGVzIGFuIEVsZW1lbnQKCSAqCgkgKiBAbWV0aG9kIGRpc2FibGUKCSAqIEBwYXJhbSAge01peGVkfSBvYmogRWxlbWVudAoJICogQHJldHVybiB7T2JqZWN0fSAgICBFbGVtZW50CgkgKi8KCWRpc2FibGUgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlpZiAoIHR5cGVvZiBvYmouZGlzYWJsZWQgPT09ICJib29sZWFuIiAmJiAhb2JqLmRpc2FibGVkICkgewoJCQlvYmouZGlzYWJsZWQgPSB0cnVlOwoJCX0KCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBEaXNwYXRjaGVzIGEgRE9NIEV2ZW50IGZyb20gYW4gRWxlbWVudAoJICoKCSAqIGBkYXRhYCB3aWxsIGFwcGVhciBhcyBgRXZlbnQuZGV0YWlsYAoJICoKCSAqIEBtZXRob2QgZGlzcGF0Y2gKCSAqIEBwYXJhbSAge09iamVjdH0gIG9iaiAgICAgICAgRWxlbWVudCB3aGljaCBkaXNwYXRjaGVzIHRoZSBFdmVudAoJICogQHBhcmFtICB7U3RyaW5nfSAgdHlwZSAgICAgICBUeXBlIG9mIEV2ZW50IHRvIGRpc3BhdGNoCgkgKiBAcGFyYW0gIHtPYmplY3R9ICBkYXRhICAgICAgIERhdGEgdG8gaW5jbHVkZSB3aXRoIHRoZSBFdmVudAoJICogQHBhcmFtICB7Qm9vbGVhbn0gYnViYmxlcyAgICBbT3B0aW9uYWxdIERldGVybWluZXMgaWYgdGhlIEV2ZW50IGJ1YmJsZXMsIGRlZmF1bHRzIHRvIGB0cnVlYAoJICogQHBhcmFtICB7Qm9vbGVhbn0gY2FuY2VsYWJsZSBbT3B0aW9uYWxdIERldGVybWluZXMgaWYgdGhlIEV2ZW50IGNhbiBiZSBjYW5jZWxlZCwgZGVmYXVsdHMgdG8gYHRydWVgCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgIEVsZW1lbnQgd2hpY2ggZGlzcGF0Y2hlcyB0aGUgRXZlbnQKCSAqLwoJZGlzcGF0Y2ggOiBmdW5jdGlvbiAoKSB7CgkJaWYgKCB0eXBlb2YgQ3VzdG9tRXZlbnQgPT09ICJmdW5jdGlvbiIgKSB7CgkJCXJldHVybiBmdW5jdGlvbiAoIG9iaiwgdHlwZSwgZGF0YSwgYnViYmxlcywgY2FuY2VsYWJsZSApIHsKCQkJCXZhciBldiA9IG5ldyBDdXN0b21FdmVudCggdHlwZSApOwoKCQkJCWJ1YmJsZXMgICAgPSAoIGJ1YmJsZXMgICAgIT09IGZhbHNlICk7CgkJCQljYW5jZWxhYmxlID0gKCBjYW5jZWxhYmxlICE9PSBmYWxzZSApOwoKCQkJCWV2LmluaXRDdXN0b21FdmVudCggdHlwZSwgYnViYmxlcywgY2FuY2VsYWJsZSwgZGF0YSB8fCB7fSApOwoKCQkJCW9iai5kaXNwYXRjaEV2ZW50KGV2KTsKCgkJCQlyZXR1cm4gb2JqOwoJCQl9OwoJCX0KCQllbHNlIGlmICggZG9jdW1lbnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPT09ICJmdW5jdGlvbiIgKSB7CgkJCXJldHVybiBmdW5jdGlvbiAoIG9iaiwgdHlwZSwgZGF0YSwgYnViYmxlcywgY2FuY2VsYWJsZSApIHsKCQkJCXZhciBldiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCAiSFRNTEV2ZW50cyIgKTsKCgkJCQlidWJibGVzICAgID0gKCBidWJibGVzICAgICE9PSBmYWxzZSApOwoJCQkJY2FuY2VsYWJsZSA9ICggY2FuY2VsYWJsZSAhPT0gZmFsc2UgKTsKCgkJCQlldi5pbml0RXZlbnQoIHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUgKTsKCgkJCQlldi5kZXRhaWwgPSBkYXRhIHx8IHt9OwoKCQkJCW9iai5kaXNwYXRjaEV2ZW50KGV2KTsKCgkJCQlyZXR1cm4gb2JqOwoJCQl9OwoJCX0KCQllbHNlIGlmICggZG9jdW1lbnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QgPT09ICJvYmplY3QiICkgewoJCQlyZXR1cm4gZnVuY3Rpb24gKCBvYmosIHR5cGUsIGRhdGEsIGJ1YmJsZXMgKSB7CgkJCQl2YXIgZXYgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpOwoKCQkJCWV2LmNhbmNlbEJ1YmJsZSA9ICggYnViYmxlcyAhPT0gZmFsc2UgKTsKCQkJCWV2LmRldGFpbCAgICAgICA9IGRhdGEgfHwge307CgoJCQkJb2JqLmZpcmVFdmVudCggIm9uIiArIHR5cGUsIGV2ICk7CgkJCX07CgkJfQoJCWVsc2UgewoJCQlyZXR1cm4gZnVuY3Rpb24gKCkgewoJCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5ub3RTdXBwb3J0ZWQgKTsKCQkJfTsKCQl9Cgl9KCksCgoJLyoqCgkgKiBFbmFibGVzIGFuIEVsZW1lbnQKCSAqCgkgKiBAbWV0aG9kIGVuYWJsZQoJICogQHBhcmFtICB7TWl4ZWR9IG9iaiBFbGVtZW50CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgIEVsZW1lbnQKCSAqLwoJZW5hYmxlIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJaWYgKCB0eXBlb2Ygb2JqLmRpc2FibGVkID09PSAiYm9vbGVhbiIgJiYgb2JqLmRpc2FibGVkICkgewoJCQlvYmouZGlzYWJsZWQgPSBmYWxzZTsKCQl9CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8qKgoJICogRmluZHMgZGVzY2VuZGFudCBjaGlsZE5vZGVzIG9mIEVsZW1lbnQgbWF0Y2hlZCBieSBhcmcKCSAqCgkgKiBAbWV0aG9kIGZpbmQKCSAqIEBwYXJhbSAge01peGVkfSAgb2JqIEVsZW1lbnQgdG8gc2VhcmNoCgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyBDb21tYSBkZWxpbWl0ZWQgc3RyaW5nIG9mIGRlc2NlbmRhbnQgc2VsZWN0b3JzCgkgKiBAcmV0dXJuIHtNaXhlZH0gICAgICBBcnJheSBvZiBFbGVtZW50cyBvciB1bmRlZmluZWQKCSAqLwoJZmluZCA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJdmFyIHJlc3VsdCA9IFtdOwoKCQl1dGlsaXR5LmdlbklkKCBvYmosIHRydWUgKTsKCgkJYXJyYXkuZWFjaCggc3RyaW5nLmV4cGxvZGUoIGFyZyApLCBmdW5jdGlvbiAoIGkgKSB7CgkJCXJlc3VsdCA9IHJlc3VsdC5jb25jYXQoIHV0aWxpdHkuJCggIiMiICsgb2JqLmlkICsgIiAiICsgaSApICk7CgkJfSk7CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogQ3JlYXRlcyBhIGRvY3VtZW50IGZyYWdtZW50CgkgKgoJICogQG1ldGhvZCBmcmFnCgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyBbT3B0aW9uYWxdIGlubmVySFRNTAoJICogQHJldHVybiB7T2JqZWN0fSAgICAgRG9jdW1lbnQgZnJhZ21lbnQKCSAqLwoJZnJhZyA6IGZ1bmN0aW9uICggYXJnICkgewoJCXZhciBvYmogPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CgoJCWlmICggYXJnICkgewoJCQlhcnJheS5lYWNoKCBhcnJheS5jYXN0KCBlbGVtZW50LmNyZWF0ZSggImRpdiIsIHtpbm5lckhUTUw6IGFyZ30sIG9iaiApLmNoaWxkTm9kZXMgKSwgZnVuY3Rpb24gKCBpICkgewoJCQkJb2JqLmFwcGVuZENoaWxkKCBpICk7CgkJCX0pOwoKCQkJb2JqLnJlbW92ZUNoaWxkKCBvYmouY2hpbGROb2Rlc1swXSApOwoJCX0KCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBEZXRlcm1pbmVzIGlmIEVsZW1lbnQgaGFzIGRlc2NlbmRhbnRzIG1hdGNoaW5nIGFyZwoJICoKCSAqIEBtZXRob2QgaGFzCgkgKiBAcGFyYW0gIHtNaXhlZH0gICBvYmogRWxlbWVudCBvciBBcnJheSBvZiBFbGVtZW50cyBvciAkIHF1ZXJpZXMKCSAqIEBwYXJhbSAge1N0cmluZ30gIGFyZyBUeXBlIG9mIEVsZW1lbnQgdG8gZmluZAoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFRydWUgaWYgMSBvciBtb3JlIEVsZW1lbnRzIGFyZSBmb3VuZAoJICovCgloYXMgOiBmdW5jdGlvbiAoIG9iaiwgYXJnICkgewoJCXZhciByZXN1bHQgPSBlbGVtZW50LmZpbmQoIG9iaiwgYXJnICk7CgoJCXJldHVybiAoICFpc05hTiggcmVzdWx0Lmxlbmd0aCApICYmIHJlc3VsdC5sZW5ndGggPiAwICk7Cgl9LAoKCS8qKgoJICogRGV0ZXJtaW5lcyBpZiBvYmogaGFzIGEgc3BlY2lmaWMgQ1NTIGNsYXNzCgkgKgoJICogQG1ldGhvZCBoYXNDbGFzcwoJICogQHBhcmFtICB7TWl4ZWR9IG9iaiBFbGVtZW50CgkgKiBAcmV0dXJuIHtNaXhlZH0gICAgIEVsZW1lbnQsIEFycmF5IG9mIEVsZW1lbnRzIG9yIHVuZGVmaW5lZAoJICovCgloYXNDbGFzcyA6IGZ1bmN0aW9uICggb2JqLCBrbGFzcyApIHsKCQlyZXR1cm4gb2JqLmNsYXNzTGlzdC5jb250YWlucygga2xhc3MgKTsKCX0sCgoJLyoqCgkgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpZGNhdGluZyBpZiB0aGUgT2JqZWN0IGlzIGhpZGRlbgoJICoKCSAqIEBtZXRob2QgaGlkZGVuCgkgKiBAcGFyYW0gIHtNaXhlZH0gb2JqIEVsZW1lbnQKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgVHJ1ZSBpZiBoaWRkZW4KCSAqLwoJaGlkZGVuIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5zdHlsZS5kaXNwbGF5ID09PSAibm9uZSIgfHwgKCB0eXBlb2Ygb2JqLmhpZGRlbiA9PT0gImJvb2xlYW4iICYmIG9iai5oaWRkZW4gKTsKCX0sCgoJLyoqCgkgKiBHZXRzIG9yIHNldHMgYW4gRWxlbWVudHMgaW5uZXJIVE1MCgkgKgoJICogQG1ldGhvZCBodG1sCgkgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiBFbGVtZW50CgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyBbT3B0aW9uYWxdIGlubmVySFRNTCB2YWx1ZQoJICogQHJldHVybiB7T2JqZWN0fSAgICAgRWxlbWVudAoJICovCglodG1sIDogZnVuY3Rpb24gKCBvYmosIGFyZyApIHsKCQlpZiAoIGFyZyA9PT0gdW5kZWZpbmVkICkgewoJCQlyZXR1cm4gb2JqLmlubmVySFRNTDsKCQl9CgkJZWxzZSB7CgkJCSBvYmouaW5uZXJIVE1MID0gYXJnOwoJCQkgcmV0dXJuIG9iajsKCQl9Cgl9LAoKCS8qKgoJICogRGV0ZXJtaW5lcyBpZiBFbGVtZW50IGlzIGVxdWFsIHRvIGFyZywgc3VwcG9ydHMgbm9kZU5hbWVzICYgQ1NTMisgc2VsZWN0b3JzCgkgKgoJICogQG1ldGhvZCBpcwoJICogQHBhcmFtICB7TWl4ZWR9ICAgb2JqIEVsZW1lbnQKCSAqIEBwYXJhbSAge1N0cmluZ30gIGFyZyBQcm9wZXJ0eSB0byBxdWVyeQoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFRydWUgaWYgYSBtYXRjaAoJICovCglpcyA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJaWYgKCByZWdleC5zZWxlY3Rvcl9pcy50ZXN0KCBhcmcgKSApIHsKCQkJdXRpbGl0eS5pZCggb2JqICk7CgkJCXJldHVybiAoIGVsZW1lbnQuZmluZCggb2JqLnBhcmVudE5vZGUsIG9iai5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICsgYXJnICkuZmlsdGVyKCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXR1cm4gKCBpLmlkID09PSBvYmouaWQgKTsKCQkJfSkubGVuZ3RoID09PSAxICk7CgkJfQoJCWVsc2UgewoJCQlyZXR1cm4gbmV3IFJlZ0V4cCggYXJnLCAiaSIgKS50ZXN0KCBvYmoubm9kZU5hbWUgKTsKCQl9Cgl9LAoKCS8qKgoJICogVGVzdHMgaWYgRWxlbWVudCB2YWx1ZSBvciB0ZXh0IGlzIGFscGhhLW51bWVyaWMKCSAqCgkgKiBAbWV0aG9kIGlzQWxwaGFOdW0KCSAqIEBwYXJhbSAge09iamVjdH0gIG9iaiBFbGVtZW50IHRvIHRlc3QKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICBSZXN1bHQgb2YgdGVzdAoJICovCglpc0FscGhhTnVtIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5ub2RlTmFtZSA9PT0gIkZPUk0iID8gZmFsc2UgOiB2YWxpZGF0ZS50ZXN0KCB7YWxwaGFudW0gIDogb2JqLnZhbHVlIHx8IGVsZW1lbnQudGV4dCggb2JqICl9ICkucGFzczsKCX0sCgoJLyoqCgkgKiBUZXN0cyBpZiBFbGVtZW50IHZhbHVlIG9yIHRleHQgaXMgYSBib29sZWFuCgkgKgoJICogQG1ldGhvZCBpc0Jvb2xlYW4KCSAqIEBwYXJhbSAge09iamVjdH0gIG9iaiBFbGVtZW50IHRvIHRlc3QKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICBSZXN1bHQgb2YgdGVzdAoJICovCglpc0Jvb2xlYW4gOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gb2JqLm5vZGVOYW1lID09PSAiRk9STSIgPyBmYWxzZSA6IHZhbGlkYXRlLnRlc3QoIHsiYm9vbGVhbiIgOiBvYmoudmFsdWUgfHwgZWxlbWVudC50ZXh0KCBvYmogKX0gKS5wYXNzOwoJfSwKCgkvKioKCSAqIFRlc3RzIGlmIEVsZW1lbnQgdmFsdWUgb3IgdGV4dCBpcyBjaGVja2VkCgkgKgoJICogQG1ldGhvZCBpc0NoZWNrZWQKCSAqIEBwYXJhbSAge09iamVjdH0gIG9iaiBFbGVtZW50IHRvIHRlc3QKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICBSZXN1bHQgb2YgdGVzdAoJICovCglpc0NoZWNrZWQgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gb2JqLm5vZGVOYW1lICE9PSAiSU5QVVQiID8gZmFsc2UgOiBlbGVtZW50LmF0dHIoIG9iaiwgImNoZWNrZWQiICk7Cgl9LAoKCS8qKgoJICogVGVzdHMgaWYgRWxlbWVudCB2YWx1ZSBvciB0ZXh0IGlzIGEgZGF0ZQoJICoKCSAqIEBtZXRob2QgaXNEYXRlCgkgKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogRWxlbWVudCB0byB0ZXN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgUmVzdWx0IG9mIHRlc3QKCSAqLwoJaXNEYXRlIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5ub2RlTmFtZSA9PT0gIkZPUk0iID8gZmFsc2UgOiBzdHJpbmcuaXNEYXRlKCBvYmoudmFsdWUgICB8fCBlbGVtZW50LnRleHQoIG9iaiApICk7Cgl9LAoKCS8qKgoJICogVGVzdHMgaWYgRWxlbWVudCB2YWx1ZSBvciB0ZXh0IGlzIGRpc2FibGVkCgkgKgoJICogQG1ldGhvZCBpc0Rpc2FibGVkCgkgKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogRWxlbWVudCB0byB0ZXN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgUmVzdWx0IG9mIHRlc3QKCSAqLwoJaXNEaXNhYmxlZDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5ub2RlTmFtZSAhPT0gIklOUFVUIiA/IGZhbHNlIDogZWxlbWVudC5hdHRyKCBvYmosICJkaXNhYmxlZCIgKTsKCX0sCgoJLyoqCgkgKiBUZXN0cyBpZiBFbGVtZW50IHZhbHVlIG9yIHRleHQgaXMgYSBkb21haW4KCSAqCgkgKiBAbWV0aG9kIGlzRG9tYWluCgkgKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogRWxlbWVudCB0byB0ZXN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgUmVzdWx0IG9mIHRlc3QKCSAqLwoJaXNEb21haW4gOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gb2JqLm5vZGVOYW1lID09PSAiRk9STSIgPyBmYWxzZSA6IHN0cmluZy5pc0RvbWFpbiggb2JqLnZhbHVlIHx8IGVsZW1lbnQudGV4dCggb2JqICkgKTsKCX0sCgoJLyoqCgkgKiBUZXN0cyBpZiBFbGVtZW50IHZhbHVlIG9yIHRleHQgaXMgYW4gZW1haWwgYWRkcmVzcwoJICoKCSAqIEBtZXRob2QgaXNFbWFpbAoJICogQHBhcmFtICB7T2JqZWN0fSAgb2JqIEVsZW1lbnQgdG8gdGVzdAoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFJlc3VsdCBvZiB0ZXN0CgkgKi8KCWlzRW1haWwgIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5ub2RlTmFtZSA9PT0gIkZPUk0iID8gZmFsc2UgOiBzdHJpbmcuaXNFbWFpbCggb2JqLnZhbHVlIHx8IGVsZW1lbnQudGV4dCggb2JqICkgKTsKCX0sCgoJLyoqCgkgKiBUZXN0cyBpZiBFbGVtZW50IHZhbHVlIG9yIHRleHQgaXMgZW1wdHkKCSAqCgkgKiBAbWV0aG9kIGlzRW1wdHkKCSAqIEBwYXJhbSAge09iamVjdH0gIG9iaiBFbGVtZW50IHRvIHRlc3QKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICBSZXN1bHQgb2YgdGVzdAoJICovCglpc0VtcHR5ICA6IGZ1bmN0aW9uICggb2JqICkgewoJCXJldHVybiBvYmoubm9kZU5hbWUgPT09ICJGT1JNIiA/IGZhbHNlIDogc3RyaW5nLmlzRW1wdHkoIG9iai52YWx1ZSB8fCBlbGVtZW50LnRleHQoIG9iaiApICk7Cgl9LAoKCS8qKgoJICogVGVzdHMgaWYgRWxlbWVudCB2YWx1ZSBvciB0ZXh0IGlzIGFuIElQIGFkZHJlc3MKCSAqCgkgKiBAbWV0aG9kIGlzSVAKCSAqIEBwYXJhbSAge09iamVjdH0gIG9iaiBFbGVtZW50IHRvIHRlc3QKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICBSZXN1bHQgb2YgdGVzdAoJICovCglpc0lQIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5ub2RlTmFtZSA9PT0gIkZPUk0iID8gZmFsc2UgOiBzdHJpbmcuaXNJUCggb2JqLnZhbHVlIHx8IGVsZW1lbnQudGV4dCggb2JqICkgKTsKCX0sCgoJLyoqCgkgKiBUZXN0cyBpZiBFbGVtZW50IHZhbHVlIG9yIHRleHQgaXMgYW4gaW50ZWdlcgoJICoKCSAqIEBtZXRob2QgaXNJbnQKCSAqIEBwYXJhbSAge09iamVjdH0gIG9iaiBFbGVtZW50IHRvIHRlc3QKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICBSZXN1bHQgb2YgdGVzdAoJICovCglpc0ludCA6IGZ1bmN0aW9uICggb2JqICkgewoJCXJldHVybiBvYmoubm9kZU5hbWUgPT09ICJGT1JNIiA/IGZhbHNlIDogc3RyaW5nLmlzSW50KCBvYmoudmFsdWUgfHwgZWxlbWVudC50ZXh0KCBvYmogKSApOwoJfSwKCgkvKioKCSAqIFRlc3RzIGlmIEVsZW1lbnQgdmFsdWUgb3IgdGV4dCBpcyBudW1lcmljCgkgKgoJICogQG1ldGhvZCBpc051bWJlcgoJICogQHBhcmFtICB7T2JqZWN0fSAgb2JqIEVsZW1lbnQgdG8gdGVzdAoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFJlc3VsdCBvZiB0ZXN0CgkgKi8KCWlzTnVtYmVyIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5ub2RlTmFtZSA9PT0gIkZPUk0iID8gZmFsc2UgOiBzdHJpbmcuaXNOdW1iZXIoIG9iai52YWx1ZSB8fCBlbGVtZW50LnRleHQoIG9iaiApICk7Cgl9LAoKCS8qKgoJICogVGVzdHMgaWYgRWxlbWVudCB2YWx1ZSBvciB0ZXh0IGlzIGEgcGhvbmUgbnVtYmVyCgkgKgoJICogQG1ldGhvZCBpc1Bob25lCgkgKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogRWxlbWVudCB0byB0ZXN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgUmVzdWx0IG9mIHRlc3QKCSAqLwoJaXNQaG9uZSA6IGZ1bmN0aW9uICggb2JqICkgewoJCXJldHVybiBvYmoubm9kZU5hbWUgPT09ICJGT1JNIiA/IGZhbHNlIDogc3RyaW5nLmlzUGhvbmUoIG9iai52YWx1ZSB8fCBlbGVtZW50LnRleHQoIG9iaiApICk7Cgl9LAoKCS8qKgoJICogVGVzdHMgaWYgRWxlbWVudCB2YWx1ZSBvciB0ZXh0IGlzIGEgVVJMCgkgKgoJICogQG1ldGhvZCBpc1VybAoJICogQHBhcmFtICB7T2JqZWN0fSAgb2JqIEVsZW1lbnQgdG8gdGVzdAoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFJlc3VsdCBvZiB0ZXN0CgkgKi8KCWlzVXJsIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5ub2RlTmFtZSA9PT0gIkZPUk0iID8gZmFsc2UgOiBzdHJpbmcuaXNVcmwoIG9iai52YWx1ZSB8fCBlbGVtZW50LnRleHQoIG9iaiApICk7Cgl9LAoKCS8qKgoJICogQWRkcyBvciByZW1vdmVzIGEgQ1NTIGNsYXNzCgkgKgoJICogQG1ldGhvZCBrbGFzcwoJICogQHBhcmFtICB7TWl4ZWR9ICAgb2JqIEVsZW1lbnQKCSAqIEBwYXJhbSAge1N0cmluZ30gIGFyZyBDbGFzcyB0byBhZGQgb3IgcmVtb3ZlICggY2FuIGJlIGEgd2lsZGNhcmQgKQoJICogQHBhcmFtICB7Qm9vbGVhbn0gYWRkIEJvb2xlYW4gdG8gYWRkIG9yIHJlbW92ZSwgZGVmYXVsdHMgdG8gdHJ1ZQoJICogQHJldHVybiB7T2JqZWN0fSAgICAgIEVsZW1lbnQKCSAqLwoJa2xhc3MgOiBmdW5jdGlvbiAoIG9iaiwgYXJnLCBhZGQgKSB7CgkJYWRkID0gKCBhZGQgIT09IGZhbHNlICk7CgkJYXJnID0gc3RyaW5nLmV4cGxvZGUoIGFyZywgIiAiICk7CgoJCWlmICggYWRkICkgewoJCQlhcnJheS5lYWNoKCBhcmcsIGZ1bmN0aW9uICggaSApIHsKCQkJCW9iai5jbGFzc0xpc3QuYWRkKCBpICk7CgkJCX0pOwoJCX0KCQllbHNlIHsKCQkJYXJyYXkuZWFjaCggYXJnLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlpZiAoIGkgIT09ICIqIiApIHsKCQkJCQlvYmouY2xhc3NMaXN0LnJlbW92ZSggaSApOwoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJYXJyYXkuZWFjaCggb2JqLmNsYXNzTGlzdCwgZnVuY3Rpb24gKCB4ICkgewoJCQkJCQl0aGlzLnJlbW92ZSggeCApOwoJCQkJCX0pOwoKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX0pOwoJCX0KCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBGaW5kcyB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudAoJICoKCSAqIEBtZXRob2QgcG9zaXRpb24KCSAqIEBwYXJhbSAge01peGVkfSBvYmogRWxlbWVudAoJICogQHJldHVybiB7QXJyYXl9ICAgICBDb29yZGluYXRlcyBbbGVmdCwgdG9wLCByaWdodCwgYm90dG9tXQoJICovCglwb3NpdGlvbiA6IGZ1bmN0aW9uICggb2JqICkgewoJCW9iaiA9IG9iaiB8fCBkb2N1bWVudC5ib2R5OwoJCXZhciBsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b20sIGhlaWdodCwgd2lkdGg7CgoJCWxlZnQgICA9IHRvcCA9IDA7CgkJd2lkdGggID0gb2JqLm9mZnNldFdpZHRoOwoJCWhlaWdodCA9IG9iai5vZmZzZXRIZWlnaHQ7CgoJCWlmICggb2JqLm9mZnNldFBhcmVudCApIHsKCQkJdG9wICAgID0gb2JqLm9mZnNldFRvcDsKCQkJbGVmdCAgID0gb2JqLm9mZnNldExlZnQ7CgoJCQl3aGlsZSAoIG9iaiA9IG9iai5vZmZzZXRQYXJlbnQgKSB7CgkJCQlsZWZ0ICs9IG9iai5vZmZzZXRMZWZ0OwoJCQkJdG9wICArPSBvYmoub2Zmc2V0VG9wOwoJCQl9CgoJCQlyaWdodCAgPSBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoICAtICggbGVmdCArIHdpZHRoICk7CgkJCWJvdHRvbSA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0IC0gKCB0b3AgICsgaGVpZ2h0ICk7CgkJfQoJCWVsc2UgewoJCQlyaWdodCAgPSB3aWR0aDsKCQkJYm90dG9tID0gaGVpZ2h0OwoJCX0KCgkJcmV0dXJuIFtsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b21dOwoJfSwKCgkvKioKCSAqIFByZXBlbmRzIGFuIEVsZW1lbnQgdG8gYW4gRWxlbWVudAoJICoKCSAqIEBtZXRob2QgcHJlcGVuZENoaWxkCgkgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiAgIEVsZW1lbnQKCSAqIEBwYXJhbSAge09iamVjdH0gY2hpbGQgQ2hpbGQgRWxlbWVudAoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICBFbGVtZW50CgkgKi8KCXByZXBlbmRDaGlsZCA6IGZ1bmN0aW9uICggb2JqLCBjaGlsZCApIHsKCQlyZXR1cm4gb2JqLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwID8gb2JqLmFwcGVuZENoaWxkKCBjaGlsZCApIDogb2JqLmluc2VydEJlZm9yZSggY2hpbGQsIG9iai5jaGlsZE5vZGVzWzBdICk7Cgl9LAoKCS8qKgoJICogUmVtb3ZlcyBhbiBFbGVtZW50IGF0dHJpYnV0ZQoJICoKCSAqIEBtZXRob2QgcmVtb3ZlQXR0cgoJICogQHBhcmFtICB7TWl4ZWR9ICBvYmogRWxlbWVudAoJICogQHBhcmFtICB7U3RyaW5nfSBrZXkgQXR0cmlidXRlIG5hbWUKCSAqIEByZXR1cm4ge09iamVjdH0gICAgIEVsZW1lbnQKCSAqLwoJcmVtb3ZlQXR0ciA6IGZ1bmN0aW9uICggb2JqLCBrZXkgKSB7CgkJdmFyIHRhcmdldDsKCgkJaWYgKCByZWdleC5zdmcudGVzdCggb2JqLm5hbWVzcGFjZVVSSSApICkgewoJCQlvYmoucmVtb3ZlQXR0cmlidXRlTlMoIG9iai5uYW1lc3BhY2VVUkksIGtleSApOwoJCX0KCQllbHNlIHsKCQkJaWYgKCBvYmoubm9kZU5hbWUgPT09ICJTRUxFQ1QiICYmIGtleSA9PT0gInNlbGVjdGVkIikgewoJCQkJdGFyZ2V0ID0gdXRpbGl0eS4kKCAiIyIgKyBvYmouaWQgKyAiIG9wdGlvbltzZWxlY3RlZD1cInNlbGVjdGVkXCJdIiApWzBdOwoKCQkJCWlmICggdGFyZ2V0ICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJdGFyZ2V0LnNlbGVjdGVkID0gZmFsc2U7CgkJCQkJdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZSggInNlbGVjdGVkIiApOwoJCQkJfQoJCQl9CgkJCWVsc2UgewoJCQkJb2JqLnJlbW92ZUF0dHJpYnV0ZSgga2V5ICk7CgkJCX0KCQl9CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8qKgoJICogU2Nyb2xscyB0byB0aGUgcG9zaXRpb24gb2YgYW4gRWxlbWVudAoJICoKCSAqIEBtZXRob2Qgc2Nyb2xsVG8KCSAqIEBwYXJhbSAge09iamVjdH0gb2JqIEVsZW1lbnQgdG8gc2Nyb2xsIHRvCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IG1zICBbT3B0aW9uYWxdIE1pbGxpc2Vjb25kcyB0byBzY3JvbGwsIGRlZmF1bHQgaXMgMjUwLCBtaW4gaXMgMTAwCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICBEZWZlcnJlZAoJICovCglzY3JvbGxUbyA6IGZ1bmN0aW9uICggb2JqLCBtcyApIHsKCQlyZXR1cm4gY2xpZW50LnNjcm9sbCggYXJyYXkucmVtb3ZlKCBlbGVtZW50LnBvc2l0aW9uKCBvYmogKSwgMiwgMyApLCBtcyApOwoJfSwKCgkvKioKCSAqIFNlcmlhbGl6ZXMgdGhlIGVsZW1lbnRzIG9mIGFuIEVsZW1lbnQKCSAqCgkgKiBAbWV0aG9kIHNlcmlhbGl6ZQoJICogQHBhcmFtICB7T2JqZWN0fSAgb2JqICAgIEVsZW1lbnQKCSAqIEBwYXJhbSAge0Jvb2xlYW59IHN0cmluZyBbT3B0aW9uYWxdIHRydWUgaWYgeW91IHdhbnQgYSBxdWVyeSBzdHJpbmcsIGRlZmF1bHQgaXMgZmFsc2UgKCBKU09OICkKCSAqIEBwYXJhbSAge0Jvb2xlYW59IGVuY29kZSBbT3B0aW9uYWxdIHRydWUgaWYgeW91IHdhbnQgdG8gVVJJIGVuY29kZSB0aGUgdmFsdWUsIGRlZmF1bHQgaXMgdHJ1ZQoJICogQHJldHVybiB7TWl4ZWR9ICAgICAgICAgIFN0cmluZyBvciBPYmplY3QKCSAqLwoJc2VyaWFsaXplIDogZnVuY3Rpb24gKCBvYmosIHN0cmluZywgZW5jb2RlICkgewoJCXN0cmluZyAgICAgICA9ICggc3RyaW5nID09PSB0cnVlICk7CgkJZW5jb2RlICAgICAgID0gKCBlbmNvZGUgIT09IGZhbHNlICk7CgkJdmFyIGNoaWxkcmVuID0gW10sCgkJICAgIHJlZ2lzdHJ5ID0ge30sCgkJICAgIHJlc3VsdDsKCgkJY2hpbGRyZW4gPSBvYmoubm9kZU5hbWUgPT09ICJGT1JNIiA/ICggb2JqLmVsZW1lbnRzICE9PSB1bmRlZmluZWQgPyBhcnJheS5jYXN0KCBvYmouZWxlbWVudHMgKSA6IG9iai5maW5kKCAiYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSIgKSApIDogW29ial07CgoJCWFycmF5LmVhY2goIGNoaWxkcmVuLCBmdW5jdGlvbiAoIGkgKSB7CgkJCWlmICggaS5ub2RlTmFtZSA9PT0gIkZPUk0iICkgewoJCQkJdXRpbGl0eS5tZXJnZSggcmVnaXN0cnksIGpzb24uZGVjb2RlKCBlbGVtZW50LnNlcmlhbGl6ZSggaSApICkgKTsKCQkJfQoJCQllbHNlIGlmICggcmVnaXN0cnlbaS5uYW1lXSA9PT0gdW5kZWZpbmVkICkgewoJCQkJcmVnaXN0cnlbaS5uYW1lXSA9IGVsZW1lbnQudmFsKCBpICk7CgkJCX0KCQl9KTsKCgkJaWYgKCAhc3RyaW5nICkgewoJCQlyZXN1bHQgPSBqc29uLmVuY29kZSggcmVnaXN0cnkgKTsKCQl9CgkJZWxzZSB7CgkJCXJlc3VsdCA9ICIiOwoKCQkJdXRpbGl0eS5pdGVyYXRlKCByZWdpc3RyeSwgZnVuY3Rpb24gKCB2LCBrICkgewoJCQkJZW5jb2RlID8gcmVzdWx0ICs9ICImIiArIGVuY29kZVVSSUNvbXBvbmVudCggayApICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2ICkgOiByZXN1bHQgKz0gIiYiICsgayArICI9IiArIHY7CgkJCX0pOwoKCQkJcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoIHJlZ2V4LmFuZCwgIj8iICk7CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIFJldHVybnMgdGhlIHNpemUgb2YgdGhlIE9iamVjdAoJICoKCSAqIEBtZXRob2Qgc2l6ZQoJICogQHBhcmFtICB7TWl4ZWR9IG9iaiBFbGVtZW50CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgIFNpemUge2hlaWdodDogbiwgd2lkdGg6bn0KCSAqLwoJc2l6ZSA6IGZ1bmN0aW9uICggb2JqICkgewoJCXZhciBwYXJzZSA9IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gbnVtYmVyLnBhcnNlKGFyZywgMTApOwoJCX07CgoJCXJldHVybiB7CgkJCWhlaWdodCA6IG9iai5vZmZzZXRIZWlnaHQgKyBwYXJzZSggb2JqLnN0eWxlLnBhZGRpbmdUb3AgIHx8IDAgKSArIHBhcnNlKCBvYmouc3R5bGUucGFkZGluZ0JvdHRvbSB8fCAwICkgKyBwYXJzZSggb2JqLnN0eWxlLmJvcmRlclRvcCAgfHwgMCApICsgcGFyc2UoIG9iai5zdHlsZS5ib3JkZXJCb3R0b20gfHwgMCApLAoJCQl3aWR0aCAgOiBvYmoub2Zmc2V0V2lkdGggICsgcGFyc2UoIG9iai5zdHlsZS5wYWRkaW5nTGVmdCB8fCAwICkgKyBwYXJzZSggb2JqLnN0eWxlLnBhZGRpbmdSaWdodCAgfHwgMCApICsgcGFyc2UoIG9iai5zdHlsZS5ib3JkZXJMZWZ0IHx8IDAgKSArIHBhcnNlKCBvYmouc3R5bGUuYm9yZGVyUmlnaHQgIHx8IDAgKQoJCX07Cgl9LAoKCS8qKgoJICogR2V0dGVyIC8gc2V0dGVyIGZvciBhbiBFbGVtZW50J3MgdGV4dAoJICoKCSAqIEBtZXRob2QgdGV4dAoJICogQHBhcmFtICB7T2JqZWN0fSBvYmogRWxlbWVudAoJICogQHBhcmFtICB7U3RyaW5nfSBhcmcgW09wdGlvbmFsXSBWYWx1ZSB0byBzZXQKCSAqIEByZXR1cm4ge09iamVjdH0gICAgIEVsZW1lbnQKCSAqLwoJdGV4dCA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJdmFyIGtleSAgICAgPSBvYmoudGV4dENvbnRlbnQgIT09IHVuZGVmaW5lZCA/ICJ0ZXh0Q29udGVudCIgOiAiaW5uZXJUZXh0IiwKCQkgICAgcGF5bG9hZCA9IHt9LAoJCSAgICBzZXQgICAgID0gZmFsc2U7CgoJCWlmICggdHlwZW9mIGFyZyAhPT0gInVuZGVmaW5lZCIgKSB7CgkJCXNldCAgICAgICAgICA9IHRydWU7CgkJCXBheWxvYWRba2V5XSA9IGFyZzsKCQl9CgoJCXJldHVybiBzZXQgPyBlbGVtZW50LnVwZGF0ZSggb2JqLCBwYXlsb2FkICkgOiBvYmpba2V5XTsKCX0sCgoJLyoqCgkgKiBUb2dnbGVzIGEgQ1NTIGNsYXNzCgkgKgoJICogQG1ldGhvZCB0b2dnbGVDbGFzcwoJICogQHBhcmFtICB7T2JqZWN0fSBvYmogRWxlbWVudCwgb3IgJCBxdWVyeQoJICogQHBhcmFtICB7U3RyaW5nfSBhcmcgQ1NTIGNsYXNzIHRvIHRvZ2dsZQoJICogQHJldHVybiB7T2JqZWN0fSAgICAgRWxlbWVudAoJICovCgl0b2dnbGVDbGFzcyA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJb2JqLmNsYXNzTGlzdC50b2dnbGUoIGFyZyApOwoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIFVwZGF0ZXMgYW4gRWxlbWVudAoJICoKCSAqIEBtZXRob2QgdXBkYXRlCgkgKiBAcGFyYW0gIHtNaXhlZH0gIG9iaiAgRWxlbWVudAoJICogQHBhcmFtICB7T2JqZWN0fSBhcmdzIENvbGxlY3Rpb24gb2YgcHJvcGVydGllcwoJICogQHJldHVybiB7T2JqZWN0fSAgICAgIEVsZW1lbnQKCSAqLwoJdXBkYXRlIDogZnVuY3Rpb24gKCBvYmosIGFyZ3MgKSB7CgkJYXJncyA9IGFyZ3MgfHwge307CgoJCXV0aWxpdHkuaXRlcmF0ZSggYXJncywgZnVuY3Rpb24gKCB2LCBrICkgewoJCQlpZiAoIHJlZ2V4LmVsZW1lbnRfdXBkYXRlLnRlc3QoIGsgKSApIHsKCQkJCW9ialtrXSA9IHY7CgkJCX0KCQkJZWxzZSBpZiAoIGsgPT09ICJjbGFzcyIgKSB7CgkJCQkhc3RyaW5nLmlzRW1wdHkoIHYgKSA/IGVsZW1lbnQua2xhc3MoIG9iaiwgdiApIDogZWxlbWVudC5rbGFzcyggb2JqLCAiKiIsIGZhbHNlICk7CgkJCX0KCQkJZWxzZSBpZiAoIGsuaW5kZXhPZiggImRhdGEtIiApID09PSAwICkgewoJCQkJZWxlbWVudC5kYXRhKCBvYmosIGsucmVwbGFjZSggImRhdGEtIiwgIiIgKSwgdiApOwoJCQl9CgkJCWVsc2UgaWYgKCBrID09PSAiaWQiICkgewoJCQkJdmFyIG8gPSBvYnNlcnZlci5saXN0ZW5lcnM7CgoJCQkJaWYgKCBvW29iai5pZF0gIT09IHVuZGVmaW5lZCApIHsKCQkJCQlvW2tdID0gb1tvYmouaWRdOwoJCQkJCWRlbGV0ZSBvW29iai5pZF07CgkJCQl9CgkJCX0KCQkJZWxzZSB7CgkJCQllbGVtZW50LmF0dHIgKCBvYmosIGssIHYgKTsKCQkJfQoJCX0pOwoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIEdldHMgb3Igc2V0cyB0aGUgdmFsdWUgb2YgRWxlbWVudAoJICoKCSAqIEBtZXRob2QgdmFsCgkgKiBAcGFyYW0gIHtNaXhlZH0gIG9iaiAgIEVsZW1lbnQKCSAqIEBwYXJhbSAge01peGVkfSAgdmFsdWUgW09wdGlvbmFsXSBWYWx1ZSB0byBzZXQKCSAqIEByZXR1cm4ge09iamVjdH0gICAgICAgRWxlbWVudAoJICovCgl2YWwgOiBmdW5jdGlvbiAoIG9iaiwgdmFsdWUgKSB7CgkJdmFyIGV2ZW50ID0gImlucHV0IiwKCQkgICAgb3V0cHV0OwoKCQlpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7CgkJCWlmICggcmVnZXgucmFkaW9fY2hlY2tib3gudGVzdCggb2JqLnR5cGUgKSApIHsKCQkJCWlmICggc3RyaW5nLmlzRW1wdHkoIG9iai5uYW1lICkgKSB7CgkJCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5leHBlY3RlZFByb3BlcnR5ICk7CgkJCQl9CgoJCQkJYXJyYXkuZWFjaCggdXRpbGl0eS4kKCAiaW5wdXRbbmFtZT0nIiArIG9iai5uYW1lICsgIiddIiApLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQkJaWYgKCBpLmNoZWNrZWQgKSB7CgkJCQkJCW91dHB1dCA9IGkudmFsdWU7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQl9KTsKCQkJfQoJCQllbHNlIGlmICggcmVnZXguc2VsZWN0LnRlc3QoIG9iai50eXBlICkgKSB7CgkJCQlvdXRwdXQgPSBvYmoub3B0aW9uc1tvYmouc2VsZWN0ZWRJbmRleF0udmFsdWU7CgkJCX0KCQkJZWxzZSBpZiAoICJ2YWx1ZSIgaW4gb2JqICkgewoJCQkJb3V0cHV0ID0gb2JqLnZhbHVlOwoJCQl9CgkJCWVsc2UgewoJCQkJb3V0cHV0ID0gZWxlbWVudC50ZXh0KCBvYmogKTsKCQkJfQoKCQkJaWYgKCBvdXRwdXQgIT09IHVuZGVmaW5lZCApIHsKCQkJCW91dHB1dCA9IHV0aWxpdHkuY29lcmNlKCBvdXRwdXQgKTsKCQkJfQoKCQkJaWYgKCB0eXBlb2Ygb3V0cHV0ID09PSAic3RyaW5nIiApIHsKCQkJCW91dHB1dCA9IHN0cmluZy50cmltKCBvdXRwdXQgKTsKCQkJfQoJCX0KCQllbHNlIHsKCQkJdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpOwoKCQkJaWYgKCByZWdleC5yYWRpb19jaGVja2JveC50ZXN0KCBvYmoudHlwZSApICkgewoJCQkJZXZlbnQgPSAiY2xpY2siOwoKCQkJCWFycmF5LmVhY2goIHV0aWxpdHkuJCggImlucHV0W25hbWU9JyIgKyBvYmoubmFtZSArICInXSIgKSwgZnVuY3Rpb24gKCBpICkgewoJCQkJCWlmICggaS52YWx1ZSA9PT0gdmFsdWUgKSB7CgkJCQkJCWkuY2hlY2tlZCA9IHRydWU7CgkJCQkJCW91dHB1dCA9IGk7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQl9KTsKCQkJfQoJCQllbHNlIGlmICggcmVnZXguc2VsZWN0LnRlc3QoIG9iai50eXBlICkgKSB7CgkJCQlldmVudCA9ICJjaGFuZ2UiOwoKCQkJCWFycmF5LmVhY2goIGVsZW1lbnQuZmluZCggb2JqLCAiPiAqIiApLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQkJaWYgKCBpLnZhbHVlID09PSB2YWx1ZSApIHsKCQkJCQkJaS5zZWxlY3RlZCA9IHRydWU7CgkJCQkJCW91dHB1dCA9IGk7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQl9KTsKCQkJfQoJCQllbHNlIHsKCQkJCW9iai52YWx1ZSAhPT0gdW5kZWZpbmVkID8gb2JqLnZhbHVlID0gdmFsdWUgOiBlbGVtZW50LnRleHQoIG9iaiwgdmFsdWUgKTsKCQkJfQoKCQkJZWxlbWVudC5kaXNwYXRjaCggb2JqLCBldmVudCApOwoKCQkJb3V0cHV0ID0gb2JqOwoJCX0KCgkJcmV0dXJuIG91dHB1dDsKCX0sCgoJLyoqCgkgKiBWYWxpZGF0ZXMgdGhlIGNvbnRlbnRzIG9mIEVsZW1lbnQKCSAqCgkgKiBAbWV0aG9kIHZhbGlkYXRlCgkgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiBFbGVtZW50IHRvIHRlc3QKCSAqIEByZXR1cm4ge09iamVjdH0gICAgIFJlc3VsdCBvZiB0ZXN0CgkgKi8KCXZhbGlkYXRlIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5ub2RlTmFtZSA9PT0gIkZPUk0iID8gdmFsaWRhdGUudGVzdCggb2JqICkgOiAhc3RyaW5nLmlzRW1wdHkoIG9iai52YWx1ZSB8fCBlbGVtZW50LnRleHQoIG9iaiApICk7Cgl9Cn07CgovKioKICogRGF0YUxpc3RGaWx0ZXIgZmFjdG9yeQogKgogKiBAbWV0aG9kIGZhY3RvcnkKICogQHBhcmFtICB7T2JqZWN0fSBvYmogICAgICBFbGVtZW50IHRvIHJlY2VpdmUgdGhlIGZpbHRlcgogKiBAcGFyYW0gIHtPYmplY3R9IGRhdGFsaXN0IERhdGEgbGlzdCBsaW5rZWQgdG8gdGhlIGRhdGEgc3RvcmUKICogQHBhcmFtICB7U3RyaW5nfSBmaWx0ZXJzICBDb21tYSBkZWxpbWl0ZWQgc3RyaW5nIG9mIGZpZWxkcyB0byBmaWx0ZXIgYnkKICogQHBhcmFtICB7TnVtYmVyfSBkZWJvdW5jZSBbT3B0aW9uYWxdIE1pbGxpc2Vjb25kcyB0byBkZWJvdW5jZQogKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgIERhdGFMaXN0RmlsdGVyIGluc3RhbmNlCiAqLwp2YXIgZmlsdGVyID0gZnVuY3Rpb24gKCBvYmosIGRhdGFsaXN0LCBmaWx0ZXJzLCBkZWJvdW5jZSApIHsKCWRlYm91bmNlID0gZGVib3VuY2UgfHwgMjUwOwoJdmFyIHJlZiAgPSBbZGF0YWxpc3RdOwoKCWlmICggISggb2JqIGluc3RhbmNlb2YgRWxlbWVudCApIHx8ICggZGF0YWxpc3QgIT09IHVuZGVmaW5lZCAmJiBkYXRhbGlzdC5zdG9yZSA9PT0gdW5kZWZpbmVkICkgfHwgKCB0eXBlb2YgZmlsdGVycyAhPT0gInN0cmluZyIgfHwgc3RyaW5nLmlzRW1wdHkoIGZpbHRlcnMgKSApICkgewoJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJfQoKCXJldHVybiBuZXcgRGF0YUxpc3RGaWx0ZXIoIG9iaiwgcmVmWzBdLCBkZWJvdW5jZSApLnNldCggZmlsdGVycyApLmluaXQoKTsKfTsKCi8qKgogKiBEYXRhTGlzdEZpbHRlcgogKgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtICB7T2JqZWN0fSBvYmogICAgICBFbGVtZW50IHRvIHJlY2VpdmUgdGhlIGZpbHRlcgogKiBAcGFyYW0gIHtPYmplY3R9IGRhdGFsaXN0IERhdGEgbGlzdCBsaW5rZWQgdG8gdGhlIGRhdGEgc3RvcmUKICogQHBhcmFtICB7TnVtYmVyfSBkZWJvdW5jZSBbT3B0aW9uYWxdIE1pbGxpc2Vjb25kcyB0byBkZWJvdW5jZQogKi8KZnVuY3Rpb24gRGF0YUxpc3RGaWx0ZXIgKCBlbGVtZW50LCBkYXRhbGlzdCwgZGVib3VuY2UgKSB7Cgl0aGlzLmVsZW1lbnQgID0gZWxlbWVudDsKCXRoaXMuZGF0YWxpc3QgPSBkYXRhbGlzdDsKCXRoaXMuZGVib3VuY2UgPSBkZWJvdW5jZTsKCXRoaXMuZmlsdGVycyAgPSB7fTsKfQoKLy8gU2V0dGluZyBjb25zdHJ1Y3RvciBsb29wCkRhdGFMaXN0RmlsdGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERhdGFMaXN0RmlsdGVyOwoKLyoqCiAqIEluaXRpYXRlIGFsbCBldmVudCBsaXN0ZW5lcnMKICoKICogQG1ldGhvZCBpbml0CiAqIEByZXR1cm4ge09iamVjdH0gRGF0YUxpc3RGaWx0ZXIgaW5zdGFuY2UKICovCkRhdGFMaXN0RmlsdGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkgewoJb2JzZXJ2ZXIuYWRkKCB0aGlzLmVsZW1lbnQsICJrZXl1cCIsIHRoaXMudXBkYXRlLCAiZmlsdGVyIiwgdGhpcyApOwoJb2JzZXJ2ZXIuYWRkKCB0aGlzLmVsZW1lbnQsICJpbnB1dCIsIHRoaXMudXBkYXRlLCAidmFsdWUiLCAgdGhpcyApOwoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIFNldCB0aGUgZmlsdGVycwogKgogKiBDcmVhdGUgYW4gb2JqZWN0IGJhc2VkIG9uIGNvbW1hIHNlcGFyYXRlZCBrZXkgc3RyaW5nCiAqCiAqIEBtZXRob2Qgc2V0CiAqIEBwYXJhbSAge1N0cmluZ30gZmllbGRzIENvbW1hIHNlcGFyYXRlZCBmaWx0ZXJzCiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgIERhdGFMaXN0RmlsdGVyIGluc3RhbmNlCiAqLwpEYXRhTGlzdEZpbHRlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKCBmaWVsZHMgKSB7Cgl2YXIgb2JqID0ge307CgoJYXJyYXkuZWFjaCggc3RyaW5nLmV4cGxvZGUoIGZpZWxkcyApLCBmdW5jdGlvbiAoIHYgKSB7CgkJb2JqW3ZdID0gIiI7Cgl9KTsKCgl0aGlzLmZpbHRlcnMgPSBvYmo7CgoJcmV0dXJuIHRoaXM7Cn07CgovKioKICogQ2FuY2VsIGFsbCBldmVudCBsaXN0ZW5lcnMKICoKICogQG1ldGhvZCB0ZWFyZG93bgogKiBAcmV0dXJuIHtPYmplY3R9IERhdGFMaXN0RmlsdGVyIGluc3RhbmNlCiAqLwpEYXRhTGlzdEZpbHRlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7CglvYnNlcnZlci5yZW1vdmUoIHRoaXMuZWxlbWVudCwgImtleXVwIiwgImZpbHRlciIgKTsKCW9ic2VydmVyLnJlbW92ZSggdGhpcy5lbGVtZW50LCAiaW5wdXQiLCAidmFsdWUiICk7CgoJcmV0dXJuIHRoaXM7Cn07CgovKioKICogVXBkYXRlIHRoZSByZXN1bHRzIGxpc3QKICoKICogQG1ldGhvZCB1cGRhdGUKICogQHJldHVybiB7T2JqZWN0fSBEYXRhTGlzdEZpbHRlciBpbnN0YW5jZQogKi8KRGF0YUxpc3RGaWx0ZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsKCXZhciBzZWxmID0gdGhpczsKCgl1dGlsaXR5LmRlZmVyKCBmdW5jdGlvbiAoKSB7CgkJdmFyIHZhbCA9IGVsZW1lbnQudmFsKCBzZWxmLmVsZW1lbnQgKS50b1N0cmluZygpOwoJCQoJCWlmICggIXN0cmluZy5pc0VtcHR5KCB2YWwgKSApIHsKCQkJdXRpbGl0eS5pdGVyYXRlKCBzZWxmLmZpbHRlcnMsIGZ1bmN0aW9uICggdiwgayApIHsKCQkJCXZhciBxdWVyaWVzID0gc3RyaW5nLmV4cGxvZGUoIHZhbCApOwoKCQkJCS8vIElnbm9yaW5nIHRyYWlsaW5nIGNvbW1hcwoJCQkJcXVlcmllcyA9IHF1ZXJpZXMuZmlsdGVyKCBmdW5jdGlvbiAoIGkgKSB7CgkJCQkJcmV0dXJuICFzdHJpbmcuaXNFbXB0eSggaSApOwoJCQkJfSk7CgoJCQkJLy8gU2hhcGluZyB2YWxpZCBwYXR0ZXJuCgkJCQlhcnJheS5lYWNoKCBxdWVyaWVzLCBmdW5jdGlvbiAoIGksIGlkeCApIHsKCQkJCQl0aGlzW2lkeF0gPSAiXi4qIiArIHN0cmluZy5lc2NhcGUoIGkgKS5yZXBsYWNlKCAvKF5cKnxcKiQpL2csICIiICkucmVwbGFjZSggL1wqL2csICIuKiIgKSArICIuKiI7CgkJCQl9KTsKCgkJCQl0aGlzW2tdID0gcXVlcmllcy5qb2luKCAiLCIgKTsKCQkJfSk7CgoJCQlzZWxmLmRhdGFsaXN0LmZpbHRlciA9IHNlbGYuZmlsdGVyczsKCQl9CgkJZWxzZSB7CgkJCXNlbGYuZGF0YWxpc3QuZmlsdGVyID0gbnVsbDsKCQl9CgoJCXNlbGYuZGF0YWxpc3QucGFnZUluZGV4ID0gMTsKCQlzZWxmLmRhdGFsaXN0LnJlZnJlc2goKTsKCX0sIHRoaXMuZGVib3VuY2UsIHRoaXMuZWxlbWVudC5pZCArICJEZWJvdW5jZSIpOwoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIERhdGFHcmlkIGZhY3RvcnkKICoKICogQG1ldGhvZCBncmlkCiAqIEBwYXJhbSAge09iamVjdH0gIGVsZW1lbnQgICAgIEVsZW1lbnQgdG8gcmVjZWl2ZSBEYXRhR3JpZAogKiBAcGFyYW0gIHtPYmplY3R9ICBzdG9yZSAgICAgICBEYXRhU3RvcmUKICogQHBhcmFtICB7QXJyYXl9ICAgZmllbGRzICAgICAgQXJyYXkgb2YgZmllbGRzIHRvIGRpc3BsYXkKICogQHBhcmFtICB7QXJyYXl9ICAgc29ydGFibGUgICAgW09wdGlvbmFsXSBBcnJheSBvZiBzb3J0YWJsZSBjb2x1bW5zL2ZpZWxkcwogKiBAcGFyYW0gIHtPYmplY3R9ICBvcHRpb25zICAgICBbT3B0aW9uYWxdIERhdGFMaXN0IG9wdGlvbnMKICogQHBhcmFtICB7Qm9vbGVhbn0gZmlsdGVyZWQgICAgW09wdGlvbmFsXSBDcmVhdGUgYW4gaW5wdXQgdG8gZmlsdGVyIHRoZSBkYXRhIGdyaWQKICogQHBhcmFtICB7TnVtYmVyfSAgZGVib3VuY2UgICAgW09wdGlvbmFsXSBEYXRhTGlzdEZpbHRlciBpbnB1dCBkZWJvdW5jZSwgZGVmYXVsdCBpcyAyNTAKICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgRGF0YUdyaWQgaW5zdGFuY2UKICovCnZhciBncmlkID0gZnVuY3Rpb24gKCBlbGVtZW50LCBzdG9yZSwgZmllbGRzLCBzb3J0YWJsZSwgb3B0aW9ucywgZmlsdGVyZWQsIGRlYm91bmNlICkgewoJdmFyIHJlZiA9IFtzdG9yZV07CgoJcmV0dXJuIG5ldyBEYXRhR3JpZCggZWxlbWVudCwgcmVmWzBdLCBmaWVsZHMsIHNvcnRhYmxlLCBvcHRpb25zLCBmaWx0ZXJlZCApLmluaXQoIGRlYm91bmNlICk7Cn07CgovKioKICogRGF0YUdyaWQgZmFjdG9yeQogKgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtICB7T2JqZWN0fSAgZWxlbWVudCAgRWxlbWVudCB0byByZWNlaXZlIERhdGFHcmlkCiAqIEBwYXJhbSAge09iamVjdH0gIHN0b3JlICAgIERhdGFTdG9yZQogKiBAcGFyYW0gIHtBcnJheX0gICBmaWVsZHMgICBBcnJheSBvZiBmaWVsZHMgdG8gZGlzcGxheQogKiBAcGFyYW0gIHtBcnJheX0gICBzb3J0YWJsZSBbT3B0aW9uYWxdIEFycmF5IG9mIHNvcnRhYmxlIGNvbHVtbnMvZmllbGRzCiAqIEBwYXJhbSAge09iamVjdH0gIG9wdGlvbnMgIFtPcHRpb25hbF0gRGF0YUxpc3Qgb3B0aW9ucwogKiBAcGFyYW0gIHtCb29sZWFufSBmaWx0ZXJlZCBbT3B0aW9uYWxdIENyZWF0ZSBhbiBpbnB1dCB0byBmaWx0ZXIgdGhlIERhdGFHcmlkCiAqLwpmdW5jdGlvbiBEYXRhR3JpZCAoIGVsZW1lbnQsIHN0b3JlLCBmaWVsZHMsIHNvcnRhYmxlLCBvcHRpb25zLCBmaWx0ZXJlZCApIHsKCXZhciBzb3J0T3JkZXI7CgoJaWYgKCBvcHRpb25zLm9yZGVyICYmICFzdHJpbmcuaXNFbXB0eSggb3B0aW9ucy5vcmRlciApICkgewoJCXNvcnRPcmRlciA9IHN0cmluZy5leHBsb2RlKCBvcHRpb25zLm9yZGVyICkubWFwKCBmdW5jdGlvbiAoIGkgKSB7CgkJCXJldHVybiBpLnJlcGxhY2UoIHJlZ2V4LmFmdGVyX3NwYWNlLCAiIiApOwoJCX0pOwoJfQoKCXRoaXMuZWxlbWVudCAgICAgPSBlbGVtZW50OwoJdGhpcy5maWVsZHMgICAgICA9IGZpZWxkczsKCXRoaXMuZmlsdGVyICAgICAgPSBudWxsOwoJdGhpcy5maWx0ZXJlZCAgICA9ICggZmlsdGVyZWQgPT09IHRydWUgKTsKCXRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTsKCXRoaXMubGlzdCAgICAgICAgPSBudWxsOwoJdGhpcy5vcHRpb25zICAgICA9IG9wdGlvbnMgICB8fCB7fTsKCXRoaXMuc3RvcmUgICAgICAgPSBzdG9yZTsKCXRoaXMuc29ydGFibGUgICAgPSBzb3J0YWJsZSAgfHwgW107Cgl0aGlzLnNvcnRPcmRlciAgID0gc29ydE9yZGVyIHx8IHNvcnRhYmxlIHx8IFtdOwp9CgovLyBTZXR0aW5nIGNvbnN0cnVjdG9yIGxvb3AKRGF0YUdyaWQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGF0YUdyaWQ7CgovKioKICogRXhwb3J0cyBkYXRhIGdyaWQgcmVjb3JkcwogKgogKiBAbWV0aG9kIGR1bXAKICogQHJldHVybiB7QXJyYXl9IFJlY29yZCBzZXQKICovCkRhdGFHcmlkLnByb3RvdHlwZS5kdW1wID0gZnVuY3Rpb24gKCkgewoJcmV0dXJuIHRoaXMuc3RvcmUuZHVtcCggdGhpcy5saXN0LnJlY29yZHMsIHRoaXMuZmllbGRzICk7Cn07CgovKioKICogSW5pdGlhbGl6ZXMgRGF0YUdyaWQKICoKICogQG1ldGhvZCBpbml0CiAqIEBwYXJhbSAge051bWJlcn0gZGVib3VuY2UgW09wdGlvbmFsXSBEZWJvdW5jZSB2YWx1ZSBmb3IgRGF0YUxpc3RGaWx0ZXIsIGRlZmF1bHRzIHRvIDI1MAogKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgIERhdGFHcmlkIGluc3RhbmNlCiAqLwpEYXRhR3JpZC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICggZGVib3VuY2UgKSB7Cgl2YXIgc2VsZiwgcmVmLCB0ZW1wbGF0ZSwgY29udGFpbmVyLCBoZWFkZXIsIHdpZHRoLCBjc3MsIHNvcnQ7CgoJaWYgKCAhdGhpcy5pbml0aWFsaXplZCApIHsKCQlzZWxmICAgICAgPSB0aGlzOwoJCXJlZiAgICAgICA9IFtdOwoJCXRlbXBsYXRlICA9ICIiOwoJCWNvbnRhaW5lciA9IGVsZW1lbnQuY3JlYXRlKCAic2VjdGlvbiIsIHsiY2xhc3MiOiAiZ3JpZCJ9LCB0aGlzLmVsZW1lbnQgKTsKCQloZWFkZXIgICAgPSBlbGVtZW50LmNyZWF0ZSggImxpIiwge30sIGVsZW1lbnQuY3JlYXRlKCAidWwiLCB7ImNsYXNzIjogImhlYWRlciJ9LCBjb250YWluZXIgKSApOwoJCXdpZHRoICAgICA9ICggMTAwIC8gdGhpcy5maWVsZHMubGVuZ3RoICkgKyAiJSI7CgkJY3NzICAgICAgID0gImRpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOiIgKyB3aWR0aDsKCQlzb3J0ICAgICAgPSB0aGlzLm9wdGlvbnMub3JkZXIgPyBzdHJpbmcuZXhwbG9kZSggdGhpcy5vcHRpb25zLm9yZGVyICkgOiBbXTsKCgkJLy8gQ3JlYXRpbmcgRGF0YUxpc3QgdGVtcGxhdGUgYmFzZWQgb24gZmllbGRzCgkJYXJyYXkuZWFjaCggdGhpcy5maWVsZHMsIGZ1bmN0aW9uICggaSApIHsKCQkJdmFyIHRyaW1tZWQgPSAgaS5yZXBsYWNlKCAvLipcLi9nLCAiIiApLAoJCQkgICAgb2JqICAgICA9IGVsZW1lbnQuY3JlYXRlKCAic3BhbiIsIHtpbm5lckhUTUw6IHN0cmluZy5jYXBpdGFsaXplKCBzdHJpbmcudW5DYW1lbENhc2UoIHN0cmluZy51bmh5cGhlbmF0ZSggdHJpbW1lZCwgdHJ1ZSApICksIHRydWUgKSwgc3R5bGU6IGNzcywgImNsYXNzIjogdHJpbW1lZCwgImRhdGEtZmllbGQiOiBpfSwgaGVhZGVyICk7CgoJCQkvLyBBZGRpbmcgQ1NTIGNsYXNzIGlmICJjb2x1bW4iIGlzIHNvcnRhYmxlCgkJCWlmICggc2VsZi5zb3J0YWJsZS5jb250YWlucyggaSApICkgewoJCQkJZWxlbWVudC5rbGFzcyggb2JqLCAic29ydGFibGUiLCB0cnVlICk7CgoJCQkJLy8gQXBwbHlpbmcgZGVmYXVsdCBzb3J0LCBpZiBzcGVjaWZpZWQKCQkJCWlmICggc29ydC5maWx0ZXIoIGZ1bmN0aW9uICggeCApIHsgcmV0dXJuICggeC5pbmRleE9mKCBpICkgPT09IDAgKTsgfSApLmxlbmd0aCA+IDAgKSB7CgkJCQkJZWxlbWVudC5kYXRhKCBvYmosICJzb3J0IiwgYXJyYXkuY29udGFpbnMoIHNvcnQsIGkgKyAiIGRlc2MiICkgPyAiZGVzYyIgOiAiYXNjIiApOwoJCQkJfQoJCQl9CgoJCQl0ZW1wbGF0ZSArPSAiPHNwYW4gY2xhc3M9XCIiICsgaSArICJcIiBkYXRhLWZpZWxkPVwiIiArIGkgKyAiXCIgc3R5bGU9XCIiICsgY3NzICsgIlwiPnt7IiArIGkgKyAifX08L3NwYW4+IjsKCQl9KTsKCgkJLy8gU2V0dGluZyBjbGljayBoYW5kbGVyIG9uIHNvcnRhYmxlICJjb2x1bW5zIgoJCWlmICggdGhpcy5zb3J0YWJsZS5sZW5ndGggPiAwICkgewoJCQlvYnNlcnZlci5hZGQoIGhlYWRlciwgImNsaWNrIiwgdGhpcy5zb3J0LCAic29ydCIsIHRoaXMgKTsKCQl9CgoJCS8vIENyZWF0aW5nIERhdGFMaXN0CgkJcmVmLnB1c2goIGRhdGFsaXN0LmZhY3RvcnkoIGNvbnRhaW5lciwgdGhpcy5zdG9yZSwgdGVtcGxhdGUsIHRoaXMub3B0aW9ucyApICk7CgoJCS8vIFNldHRpbmcgYnktcmVmZXJlbmNlIERhdGFMaXN0IG9uIERhdGFHcmlkCgkJdGhpcy5saXN0ID0gcmVmWzBdOwoKCQlpZiAoIHRoaXMuZmlsdGVyZWQgPT09IHRydWUgKSB7CgkJCS8vIENyZWF0aW5nIERhdGFMaXN0RmlsdGVyCgkJCXJlZi5wdXNoKCBmaWx0ZXIoIGVsZW1lbnQuY3JlYXRlKCAiaW5wdXQiLCB7ImNsYXNzIjogImZpbHRlciIsICJ0eXBlIjogInRleHQifSwgY29udGFpbmVyLCAiZmlyc3QiICksIHJlZlswXSwgdGhpcy5maWVsZHMuam9pbiggIiwiICksIGRlYm91bmNlIHx8IDI1MCApICk7CgkJCQoJCQkvLyBTZXR0aW5nIGJ5LXJlZmVyZW5jZSBEYXRhTGlzdEZpbHRlciBvbiBEYXRhR3JpZAoJCQl0aGlzLmZpbHRlciA9IHJlZlsxXTsKCQl9CgoJCXRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlOwoJfQoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIFJlZnJlc2hlcyB0aGUgRGF0YUdyaWQKICoKICogQG1ldGhvZCByZWZyZXNoCiAqIEByZXR1cm4ge09iamVjdH0gRGF0YUdyaWQgaW5zdGFuY2UKICovCkRhdGFHcmlkLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkgewoJdmFyIHNvcnQgPSBbXSwKCSAgICBzZWxmID0gdGhpczsKCglpZiAoIHRoaXMuc29ydE9yZGVyLmxlbmd0aCA+IDAgKSB7CgkJYXJyYXkuZWFjaCggdGhpcy5zb3J0T3JkZXIsIGZ1bmN0aW9uICggaSApIHsKCQkJdmFyIG9iaiA9IGVsZW1lbnQuZmluZCggc2VsZi5lbGVtZW50LCAiLmhlYWRlciBzcGFuW2RhdGEtZmllbGQ9JyIgKyBpICsgIiddIiApWzBdOwoKCQkJc29ydC5wdXNoKCBzdHJpbmcudHJpbSggaSArICIgIiArICggZWxlbWVudC5kYXRhKCBvYmosICJzb3J0IiApIHx8ICIiICkgKSApOwoJCX0gKTsKCgkJdGhpcy5vcHRpb25zLm9yZGVyID0gdGhpcy5saXN0Lm9yZGVyID0gc29ydC5qb2luKCAiLCAiICk7Cgl9CgoJdGhpcy5saXN0LndoZXJlID0gbnVsbDsKCXV0aWxpdHkubWVyZ2UoIHRoaXMubGlzdCwgdGhpcy5vcHRpb25zICk7Cgl0aGlzLmxpc3QucmVmcmVzaCgpOwoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIFNvcnRzIHRoZSBEYXRhR3JpZCB3aGVuIGEgY29sdW1uIGhlYWRlciBpcyBjbGlja2VkCiAqCiAqIEBtZXRob2Qgc29ydAogKiBAcGFyYW0gIHtPYmplY3R9IGUgRXZlbnQKICogQHJldHVybiB7T2JqZWN0fSAgIERhdGFHcmlkIGluc3RhbmNlCiAqLwpEYXRhR3JpZC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uICggZSApIHsKCXZhciB0YXJnZXQgPSB1dGlsaXR5LnRhcmdldCggZSApLAoJICAgIGZpZWxkOwoKCS8vIFN0b3BwaW5nIGV2ZW50IHByb3BvZ2F0aW9uCgl1dGlsaXR5LnN0b3AoIGUgKTsKCgkvLyBSZWZyZXNoaW5nIGxpc3QgaWYgdGFyZ2V0IGlzIHNvcnRhYmxlCglpZiAoIGVsZW1lbnQuaGFzQ2xhc3MoIHRhcmdldCwgInNvcnRhYmxlIiApICkgewoJCWZpZWxkID0gZWxlbWVudC5kYXRhKCB0YXJnZXQsICJmaWVsZCIgKTsKCgkJZWxlbWVudC5kYXRhKCB0YXJnZXQsICJzb3J0IiwgZWxlbWVudC5kYXRhKCB0YXJnZXQsICJzb3J0IiApID09PSAiYXNjIiA/ICJkZXNjIiA6ICJhc2MiICk7CgkJYXJyYXkucmVtb3ZlKCB0aGlzLnNvcnRPcmRlciwgZmllbGQgKTsKCQl0aGlzLnNvcnRPcmRlci5zcGxpY2UoIDAsIDAsIGZpZWxkICk7CgkJdGhpcy5yZWZyZXNoKCk7Cgl9CgoJcmV0dXJuIHRoaXM7Cn07CgovKioKICogVGVhcnMgZG93biB0aGUgRGF0YUdyaWQKICoKICogQG1ldGhvZCB0ZWFyZG93bgogKiBAcmV0dXJuIHtPYmplY3R9IERhdGFHcmlkIGluc3RhbmNlCiAqLwpEYXRhR3JpZC5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7CglpZiAoIHRoaXMuZmlsdGVyICE9PSBudWxsICkgewoJCXRoaXMuZmlsdGVyLnRlYXJkb3duKCk7Cgl9CgoJdGhpcy5saXN0LnRlYXJkb3duKCk7CgoJLy8gUmVtb3ZpbmcgY2xpY2sgaGFuZGxlciBvbiBEYXRhR3JpZCBoZWFkZXIKCW9ic2VydmVyLnJlbW92ZSggZWxlbWVudC5maW5kKCB0aGlzLmVsZW1lbnQsICIuaGVhZGVyIiApWzBdLCAiY2xpY2siLCAic29ydCIgKTsKCgkvLyBEZXN0cm95aW5nIERhdGFHcmlkIChmcm9tIERPTSkKCWVsZW1lbnQuZGVzdHJveSggZWxlbWVudC5maW5kKCB0aGlzLmVsZW1lbnQsICIuZ3JpZCIgKVswXSApOwoKCXJldHVybiB0aGlzOwp9OwoKLyoqIEBuYW1lc3BhY2UganNvbiAqLwp2YXIganNvbiA9IHsKCS8qKgoJICogVHJhbnNmb3JtcyBKU09OIHRvIENTVgoJICoKCSAqIEBtZXRob2QgY3N2CgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBhcmcgSlNPTiAgc3RyaW5nIHRvIHRyYW5zZm9ybQoJICogQHBhcmFtICB7U3RyaW5nfSAgZGVsaW1pdGVyIFtPcHRpb25hbF0gQ2hhcmFjdGVyIHRvIHNlcGFyYXRlIGZpZWxkcwoJICogQHBhcmFtICB7Qm9vbGVhbn0gaGVhZGVyICAgIFtPcHRpb25hbF0gRmFsc2UgdG8gbm90IGluY2x1ZGUgZmllbGQgbmFtZXMgYXMgZmlyc3Qgcm93CgkgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAgQ1NWIHN0cmluZwoJICovCgljc3YgOiBmdW5jdGlvbiAoIGFyZywgZGVsaW1pdGVyLCBoZWFkZXIgKSB7CgkJZGVsaW1pdGVyICA9IGRlbGltaXRlciB8fCAiLCI7CgkJaGVhZGVyICAgICA9ICggaGVhZGVyICE9PSBmYWxzZSApOwoJCXZhciBvYmogICAgPSBqc29uLmRlY29kZSggYXJnLCB0cnVlICkgfHwgYXJnLAoJCSAgICByZXN1bHQgPSAiIiwKCQkgICAgcHJlcGFyZTsKCgkJLy8gUHJlcGFyZXMgaW5wdXQgYmFzZWQgb24gQ1NWIHJ1bGVzCgkJcHJlcGFyZSA9IGZ1bmN0aW9uICggaW5wdXQgKSB7CgkJCXZhciBvdXRwdXQ7CgoJCQlpZiAoIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgKSB7CgkJCQlvdXRwdXQgPSAiXCIiICsgaW5wdXQudG9TdHJpbmcoKSArICJcIiI7CgoJCQkJaWYgKCByZWdleC5vYmplY3RfdHlwZS50ZXN0KCBvdXRwdXQgKSApIHsKCQkJCQlvdXRwdXQgPSAiXCIiICsganNvbi5jc3YoIGlucHV0LCBkZWxpbWl0ZXIgKSArICJcIiI7CgkJCQl9CgkJCX0KCQkJZWxzZSBpZiAoIGlucHV0IGluc3RhbmNlb2YgT2JqZWN0ICkgewoJCQkJb3V0cHV0ID0gIlwiIiArIGpzb24uY3N2KCBpbnB1dCwgZGVsaW1pdGVyICkgKyAiXCIiOwoJCQl9CgkJCWVsc2UgaWYgKCByZWdleC5jc3ZfcXVvdGUudGVzdCggaW5wdXQgKSApIHsKCQkJCW91dHB1dCA9ICJcIiIgKyBpbnB1dC5yZXBsYWNlKCAvIi9nLCAiXCJcIiIgKSArICJcIiI7CgkJCX0KCQkJZWxzZSB7CgkJCQlvdXRwdXQgPSBpbnB1dDsKCQkJfQoKCQkJcmV0dXJuIG91dHB1dDsKCQl9OwoKCQlpZiAoIG9iaiBpbnN0YW5jZW9mIEFycmF5ICkgewoJCQlpZiAoIG9ialswXSBpbnN0YW5jZW9mIE9iamVjdCApIHsKCQkJCWlmICggaGVhZGVyICkgewoJCQkJCXJlc3VsdCA9ICggYXJyYXkua2V5cyggb2JqWzBdICkuam9pbiggZGVsaW1pdGVyICkgKyAiXG4iICk7CgkJCQl9CgoJCQkJcmVzdWx0ICs9IG9iai5tYXAoIGZ1bmN0aW9uICggaSApIHsKCQkJCQlyZXR1cm4ganNvbi5jc3YoIGksIGRlbGltaXRlciwgZmFsc2UgKTsKCQkJCX0pLmpvaW4oICJcbiIgKTsKCQkJfQoJCQllbHNlIHsKCQkJCXJlc3VsdCArPSAoIHByZXBhcmUoIG9iaiwgZGVsaW1pdGVyICkgKyAiXG4iICk7CgkJCX0KCgkJfQoJCWVsc2UgewoJCQlpZiAoIGhlYWRlciApIHsKCQkJCXJlc3VsdCA9ICggYXJyYXkua2V5cyggb2JqICkuam9pbiggZGVsaW1pdGVyICkgKyAiXG4iICk7CgkJCX0KCgkJCXJlc3VsdCArPSAoIGFycmF5LmNhc3QoIG9iaiApLm1hcCggcHJlcGFyZSApLmpvaW4oIGRlbGltaXRlciApICsgIlxuIiApOwoJCX0KCgkJcmV0dXJuIHJlc3VsdC5yZXBsYWNlKC9cbiQvLCAiIik7Cgl9LAoKCS8qKgoJICogRGVjb2RlcyB0aGUgYXJndW1lbnQKCSAqCgkgKiBAbWV0aG9kIGRlY29kZQoJICogQHBhcmFtICB7U3RyaW5nfSAgYXJnICAgIFN0cmluZyB0byBwYXJzZQoJICogQHBhcmFtICB7Qm9vbGVhbn0gc2lsZW50IFtPcHRpb25hbF0gU2lsZW50bHkgZmFpbAoJICogQHJldHVybiB7TWl4ZWR9ICAgICAgICAgIEVudGl0eSByZXN1bHRpbmcgZnJvbSBwYXJzaW5nIEpTT04sIG9yIHVuZGVmaW5lZAoJICovCglkZWNvZGUgOiBmdW5jdGlvbiAoIGFyZywgc2lsZW50ICkgewoJCXRyeSB7CgkJCXJldHVybiBKU09OLnBhcnNlKCBhcmcgKTsKCQl9CgkJY2F0Y2ggKCBlICkgewoJCQlpZiAoIHNpbGVudCAhPT0gdHJ1ZSApIHsKCQkJCXV0aWxpdHkuZXJyb3IoIGUsIGFyZ3VtZW50cywgdGhpcyApOwoJCQl9CgoJCQlyZXR1cm4gdW5kZWZpbmVkOwoJCX0KCX0sCgoJLyoqCgkgKiBFbmNvZGVzIHRoZSBhcmd1bWVudCBhcyBKU09OCgkgKgoJICogQG1ldGhvZCBlbmNvZGUKCSAqIEBwYXJhbSAge01peGVkfSAgIGFyZyAgICBFbnRpdHkgdG8gZW5jb2RlCgkgKiBAcGFyYW0gIHtCb29sZWFufSBzaWxlbnQgW09wdGlvbmFsXSBTaWxlbnRseSBmYWlsCgkgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgSlNPTiwgb3IgdW5kZWZpbmVkCgkgKi8KCWVuY29kZSA6IGZ1bmN0aW9uICggYXJnLCBzaWxlbnQgKSB7CgkJdHJ5IHsKCQkJcmV0dXJuIEpTT04uc3RyaW5naWZ5KCBhcmcgKTsKCQl9CgkJY2F0Y2ggKCBlICkgewoJCQlpZiAoIHNpbGVudCAhPT0gdHJ1ZSkgewoJCQkJdXRpbGl0eS5lcnJvciggZSwgYXJndW1lbnRzLCB0aGlzICk7CgkJCX0KCgkJCXJldHVybiB1bmRlZmluZWQ7CgkJfQoJfQp9OwoKLyoqIEBuYW1lc3BhY2UgbGFiZWwgKi8KdmFyIGxhYmVsID0gewoJLy8gQ29tbW9uIGxhYmVscwoJY29tbW9uIDogewoJCWJhY2sgICAgICAgIDogIkJhY2siLAoJCWNhbmNlbCAgICAgIDogIkNhbmNlbCIsCgkJY2xlYXIgICAgICAgOiAiQ2xlYXIiLAoJCWNsb3NlICAgICAgIDogIkNsb3NlIiwKCQljb250ICAgICAgICA6ICJDb250aW51ZSIsCgkJY3JlYXRlCSAgICA6ICJDcmVhdGUiLAoJCWN1c3RvbVJhbmdlIDogIkN1c3RvbSBSYW5nZSIsCgkJZGVsICAgICAgICAgOiAiRGVsZXRlIiwKCQllZGl0ICAgICAgICA6ICJFZGl0IiwKCQlmaW5kICAgICAgICA6ICJGaW5kIiwKCQlmcm9tICAgICAgICA6ICJGcm9tIiwKCQlnZW4gICAgICAgICA6ICJHZW5lcmF0ZSIsCgkJZ28gICAgICAgICAgOiAiR28iLAoJCWxvYWRpbmcgICAgIDogIkxvYWRpbmciLAoJCW5leHQgICAgICAgIDogIk5leHQiLAoJCWxvZ2luICAgICAgIDogIkxvZ2luIiwKCQlyYW4gICAgICAgICA6ICJSYW5kb20iLAoJCXJlc2V0ICAgICAgIDogIlJlc2V0IiwKCQlzYXZlICAgICAgICA6ICJTYXZlIiwKCQlzZWFyY2ggICAgICA6ICJTZWFyY2giLAoJCXN1Ym1pdCAgICAgIDogIlN1Ym1pdCIsCgkJdG8gICAgICAgICAgOiAiVG8iLAoJCXRvZGF5ICAgICAgIDogIlRvZGF5IiwKCQl5ZXN0ZXJkYXkgICA6ICJZZXN0ZXJkYXkiCgl9LAoKCS8vIERheXMgb2YgdGhlIHdlZWsKCWRheSA6IHsKCQkwIDogIlN1bmRheSIsCgkJMSA6ICJNb25kYXkiLAoJCTIgOiAiVHVlc2RheSIsCgkJMyA6ICJXZWRuZXNkYXkiLAoJCTQgOiAiVGh1cnNkYXkiLAoJCTUgOiAiRnJpZGF5IiwKCQk2IDogIlNhdHVyZGF5IgoJfSwKCgkvLyBFcnJvciBtZXNzYWdlcwoJZXJyb3IgOiB7CgkJZGF0YWJhc2VOb3RPcGVuICAgICAgIDogIkZhaWxlZCB0byBvcGVuIHRoZSBEYXRhYmFzZSwgcG9zc2libHkgZXhjZWVkZWQgRG9tYWluIHF1b3RhIiwKCQlkYXRhYmFzZU5vdFN1cHBvcnRlZCAgOiAiQ2xpZW50IGRvZXMgbm90IHN1cHBvcnQgbG9jYWwgZGF0YWJhc2Ugc3RvcmFnZSIsCgkJZGF0YWJhc2VXYXJuSW5qZWN0aW9uIDogIlBvc3NpYmxlIFNRTCBpbmplY3Rpb24gaW4gZGF0YWJhc2UgdHJhbnNhY3Rpb24sIHVzZSB0aGUgJiM2MzsgcGxhY2Vob2xkZXIiLAoJCWRhdGFiYXNlTW9yZVRoYW5PbmUgICA6ICJNb3JlIHRoYW4gb25lIG1hdGNoIGZvdW5kIiwKCQlkYXRhc3RvcmVOb1ByZXZWZXJzaW9uOiAiQ291bGQgbm90IGZpbmQgYSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoaXMgcmVjb3JkIiwKCQllbGVtZW50Tm90Q3JlYXRlZCAgICAgOiAiQ291bGQgbm90IGNyZWF0ZSB0aGUgRWxlbWVudCIsCgkJZWxlbWVudE5vdEZvdW5kICAgICAgIDogIkNvdWxkIG5vdCBmaW5kIHRoZSBFbGVtZW50IiwKCQlleHBlY3RlZEFycmF5ICAgICAgICAgOiAiRXhwZWN0ZWQgYW4gQXJyYXkiLAoJCWV4cGVjdGVkQXJyYXlPYmplY3QgICA6ICJFeHBlY3RlZCBhbiBBcnJheSBvciBPYmplY3QiLAoJCWV4cGVjdGVkQm9vbGVhbiAgICAgICA6ICJFeHBlY3RlZCBhIEJvb2xlYW4gdmFsdWUiLAoJCWV4cGVjdGVkTnVtYmVyICAgICAgICA6ICJFeHBlY3RlZCBhIE51bWJlciIsCgkJZXhwZWN0ZWRQcm9wZXJ0eSAgICAgIDogIkV4cGVjdGVkIGEgcHJvcGVydHksIGFuZCBpdCB3YXMgbm90IHNldCIsCgkJZXhwZWN0ZWRPYmplY3QgICAgICAgIDogIkV4cGVjdGVkIGFuIE9iamVjdCIsCgkJaW52YWxpZEFyZ3VtZW50cyAgICAgIDogIk9uZSBvciBtb3JlIGFyZ3VtZW50cyBpcyBpbnZhbGlkIiwKCQlpbnZhbGlkRGF0ZSAgICAgICAgICAgOiAiSW52YWxpZCBEYXRlIiwKCQlpbnZhbGlkRmllbGRzICAgICAgICAgOiAiVGhlIGZvbGxvd2luZyByZXF1aXJlZCBmaWVsZHMgYXJlIGludmFsaWQ6ICIsCgkJaW52YWxpZFJvdXRlICAgICAgICAgIDogIlRoZSByb3V0ZSBjb3VsZCBub3QgYmUgZm91bmQiLAoJCWludmFsaWRTdGF0ZU5vSGVhZGVycyA6ICJJTlZBTElEX1NUQVRFX0VSUjogSGVhZGVycyBoYXZlIG5vdCBiZWVuIHJlY2VpdmVkIiwKCQlpbnZhbGlkU3RhdGVOb1N5bmMgICAgOiAiU3luY2hyb25vdXMgWE1MSHR0cFJlcXVlc3QgcmVxdWVzdHMgYXJlIG5vdCBzdXBwb3J0ZWQiLAoJCWludmFsaWRTdGF0ZU5vdE9wZW4gICA6ICJJTlZBTElEX1NUQVRFX0VSUjogT2JqZWN0IGlzIG5vdCBvcGVuIiwKCQlpbnZhbGlkU3RhdGVOb3RTZW5kaW5nOiAiSU5WQUxJRF9TVEFURV9FUlI6IE9iamVjdCBpcyBzZW5kaW5nIiwKCQlpbnZhbGlkU3RhdGVOb3RVc2FibGUgOiAiSU5WQUxJRF9TVEFURV9FUlI6IE9iamVjdCBpcyBub3QgdXNhYmxlIiwKCQlub3RBdmFpbGFibGUgICAgICAgICAgOiAiUmVxdWVzdGVkIG1ldGhvZCBpcyBub3QgYXZhaWxhYmxlIiwKCQlub3RTdXBwb3J0ZWQgICAgICAgICAgOiAiVGhpcyBmZWF0dXJlIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBwbGF0Zm9ybSIsCgkJcHJvcGVydHlOb3RGb3VuZCAgICAgIDogIkNvdWxkIG5vdCBmaW5kIHRoZSByZXF1ZXN0ZWQgcHJvcGVydHkiLAoJCXByb21pc2VQZW5kaW5nICAgICAgICA6ICJUaGUgcHJvbWlzZSBjYW5ub3QgYmUgcmVzb2x2ZWQgd2hpbGUgcGVuZGluZyByZXN1bHQiLAoJCXByb21pc2VSZXNvbHZlZCAgICAgICA6ICJUaGUgcHJvbWlzZSBoYXMgYmVlbiByZXNvbHZlZDoge3tvdXRjb21lfX0iLAoJCXNlcnZlckVycm9yICAgICAgICAgICA6ICJTZXJ2ZXIgZXJyb3IgaGFzIG9jY3VycmVkIiwKCQlzZXJ2ZXJGb3JiaWRkZW4gICAgICAgOiAiRm9yYmlkZGVuIHRvIGFjY2VzcyBVUkkiLAoJCXNlcnZlckludmFsaWRNZXRob2QgICA6ICJNZXRob2Qgbm90IGFsbG93ZWQiLAoJCXNlcnZlclVuYXV0aG9yaXplZCAgICA6ICJBdXRob3JpemF0aW9uIHJlcXVpcmVkIHRvIGFjY2VzcyBVUkkiLAoJCXJlYWRPbmx5ICAgICAgICAgICAgICA6ICJQcm9wZXJ0eSBpcyByZWFkIG9ubHkiLAoJCXVwZ3JhZGUgICAgICAgICAgICAgICA6ICJZb3VyIGJyb3dzZXIgaXMgdG9vIG9sZCB0byB1c2UgYWJhYXNvLCBwbGVhc2UgdXBncmFkZSIKCX0sCgoJLy8gTW9udGhzIG9mIHRoZSBZZWFyCgltb250aCA6IHsKCQkwICA6ICJKYW51YXJ5IiwKCQkxICA6ICJGZWJydWFyeSIsCgkJMiAgOiAiTWFyY2giLAoJCTMgIDogIkFwcmlsIiwKCQk0ICA6ICJNYXkiLAoJCTUgIDogIkp1bmUiLAoJCTYgIDogIkp1bHkiLAoJCTcgIDogIkF1Z3VzdCIsCgkJOCAgOiAiU2VwdGVtYmVyIiwKCQk5ICA6ICJPY3RvYmVyIiwKCQkxMCA6ICJOb3ZlbWJlciIsCgkJMTEgOiAiRGVjZW1iZXIiCgl9Cn07CgovKioKICogTFJVIGZhY3RvcnkKICoKICogQG1ldGhvZCBscnUKICogQHBhcmFtICB7TnVtYmVyfSBtYXggW09wdGlvbmFsXSBNYXggc2l6ZSBvZiBjYWNoZSwgZGVmYXVsdCBpcyAxMDAwCiAqIEByZXR1cm4ge09iamVjdH0gICAgIExSVSBpbnN0YW5jZQogKi8KdmFyIGxydSA9IGZ1bmN0aW9uICggbWF4ICkgewoJcmV0dXJuIG5ldyBMUlUoIG1heCApOwp9OwoKLyoqCiAqIExlYXN0IFJlY2VudGx5IFVzZWQgY2FjaGUKICoKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSAge051bWJlcn0gbWF4IFtPcHRpb25hbF0gTWF4IHNpemUgb2YgY2FjaGUsIGRlZmF1bHQgaXMgMTAwMAogKi8KZnVuY3Rpb24gTFJVICggbWF4ICkgewoJdGhpcy5jYWNoZSAgPSB7fTsKCXRoaXMubWF4ICAgID0gbWF4IHx8IDEwMDA7Cgl0aGlzLmZpcnN0ICA9IG51bGw7Cgl0aGlzLmxhc3QgICA9IG51bGw7Cgl0aGlzLmxlbmd0aCA9IDA7Cn0KCi8vIFNldHRpbmcgY29uc3RydWN0b3IgbG9vcApMUlUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTFJVOwoKLyoqCiAqIEV2aWN0cyB0aGUgbGVhc3QgcmVjZW50bHkgdXNlZCBpdGVtIGZyb20gY2FjaGUKICoKICogQG1ldGhvZCBldmljdAogKiBAcmV0dXJuIHtPYmplY3R9IExSVSBpbnN0YW5jZQogKi8KTFJVLnByb3RvdHlwZS5ldmljdCA9IGZ1bmN0aW9uICgpIHsKCWlmICggdGhpcy5sYXN0ICE9PSBudWxsICkgewoJCXRoaXMucmVtb3ZlKCB0aGlzLmxhc3QgKTsKCX0KCglyZXR1cm4gdGhpczsKfTsKCi8qKgogKiBHZXRzIGNhY2hlZCBpdGVtIGFuZCBtb3ZlcyBpdCB0byB0aGUgZnJvbnQKICoKICogQG1ldGhvZCBnZXQKICogQHBhcmFtICB7U3RyaW5nfSBrZXkgSXRlbSBrZXkKICogQHJldHVybiB7TWl4ZWR9ICAgICAgVW5kZWZpbmVkIG9yIEl0ZW0gdmFsdWUKICovCkxSVS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCBrZXkgKSB7Cgl2YXIgaXRlbSA9IHRoaXMuY2FjaGVba2V5XTsKCglpZiAoIGl0ZW0gPT09IHVuZGVmaW5lZCApIHsKCQlyZXR1cm47Cgl9CgoJdGhpcy5zZXQoIGtleSwgaXRlbS52YWx1ZSApOwoKCXJldHVybiBpdGVtLnZhbHVlOwp9OwoKLyoqCiAqIFJlbW92ZXMgaXRlbSBmcm9tIGNhY2hlCiAqCiAqIEBtZXRob2QgcmVtb3ZlCiAqIEBwYXJhbSAge1N0cmluZ30ga2V5IEl0ZW0ga2V5CiAqIEByZXR1cm4ge09iamVjdH0gICAgIExSVUl0ZW0gaW5zdGFuY2UKICovCkxSVS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCBrZXkgKSB7Cgl2YXIgaXRlbSA9IHRoaXMuY2FjaGVbIGtleSBdOwoKCWlmICggaXRlbSAhPT0gdW5kZWZpbmVkICkgewoJCWRlbGV0ZSB0aGlzLmNhY2hlW2tleV07CgoJCXRoaXMubGVuZ3RoLS07CgoJCWlmICggaXRlbS5wcmV2aW91cyAhPT0gbnVsbCApIHsKCQkJdGhpcy5jYWNoZVtpdGVtLnByZXZpb3VzXS5uZXh0ID0gaXRlbS5uZXh0OwoJCX0KCgkJaWYgKCBpdGVtLm5leHQgIT09IG51bGwgKSB7CgkJCXRoaXMuY2FjaGVbaXRlbS5uZXh0XS5wcmV2aW91cyA9IGl0ZW0ucHJldmlvdXM7CgkJfQoKCQlpZiAoIHRoaXMuZmlyc3QgPT09IGtleSApIHsKCQkJdGhpcy5maXJzdCA9IGl0ZW0ucHJldmlvdXM7CgkJfQoKCQlpZiAoIHRoaXMubGFzdCA9PT0ga2V5ICkgewoJCQl0aGlzLmxhc3QgPSBpdGVtLm5leHQ7CgkJfQoJfQoKCXJldHVybiBpdGVtOwp9OwoKLyoqCiAqIFNldHMgaXRlbSBpbiBjYWNoZSBhcyBgZmlyc3RgCiAqCiAqIEBtZXRob2Qgc2V0CiAqIEBwYXJhbSAge1N0cmluZ30ga2V5ICAgSXRlbSBrZXkKICogQHBhcmFtICB7TWl4ZWR9ICB2YWx1ZSBJdGVtIHZhbHVlCiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgTFJVIGluc3RhbmNlCiAqLwpMUlUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICgga2V5LCB2YWx1ZSApIHsKCXZhciBpdGVtID0gdGhpcy5yZW1vdmUoIGtleSApOwoKCWlmICggaXRlbSA9PT0gdW5kZWZpbmVkICkgewoJCWl0ZW0gPSBuZXcgTFJVSXRlbSggdmFsdWUgKTsKCX0KCWVsc2UgewoJCWl0ZW0udmFsdWUgPSB2YWx1ZTsKCX0KCglpdGVtLm5leHQgICAgICAgPSBudWxsOwoJaXRlbS5wcmV2aW91cyAgID0gdGhpcy5maXJzdDsKCXRoaXMuY2FjaGVba2V5XSA9IGl0ZW07CgoJaWYgKCB0aGlzLmZpcnN0ICE9PSBudWxsICkgewoJCXRoaXMuY2FjaGVbdGhpcy5maXJzdF0ubmV4dCA9IGtleTsKCX0KCgl0aGlzLmZpcnN0ID0ga2V5OwoKCWlmICggdGhpcy5sYXN0ID09PSBudWxsICkgewoJCXRoaXMubGFzdCA9IGtleTsKCX0KCglpZiAoICsrdGhpcy5sZW5ndGggPiB0aGlzLm1heCApIHsKCQl0aGlzLmV2aWN0KCk7Cgl9CgoJcmV0dXJuIHRoaXM7Cn07CgovKioKICogTFJVIEl0ZW0gZmFjdG9yeQogKgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgSXRlbSB2YWx1ZQogKi8KZnVuY3Rpb24gTFJVSXRlbSAoIHZhbHVlICkgewoJdGhpcy5uZXh0ICAgICA9IG51bGw7Cgl0aGlzLnByZXZpb3VzID0gbnVsbDsKCXRoaXMudmFsdWUgICAgPSB2YWx1ZTsKfQoKLy8gU2V0dGluZyBwcm90b3R5cGUgJiBjb25zdHJ1Y3RvciBsb29wCkxSVUl0ZW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTFJVSXRlbTsKCi8qKiBAbmFtZXNwYWNlIG1hcCAqLwp2YXIgbWF0aCA9IHsKCS8qKgoJICogR2VuZXJhdGVzIGJlemllciBjdXJ2ZSBjb29yZGluYXRlcyBmb3IgdXAgdG8gNCBwb2ludHMsIGxhc3QgcGFyYW1ldGVyIGlzIGB0YAoJICoKCSAqIFR3byBwb2ludCBleGFtcGxlOiAoMCwgMTAsIDAsIDAsIDEpIG1lYW5zIG1vdmUgc3RyYWlnaHQgdXAKCSAqCgkgKiBAbWV0aG9kIGJlemllcgoJICogQHJldHVybiB7QXJyYXl9IENvb3JkaW5hdGVzCgkgKi8KCWJlemllciA6IGZ1bmN0aW9uICgpIHsKCQl2YXIgYSA9IGFycmF5LmNhc3QoIGFyZ3VtZW50cyApLAoJCSAgICB0ID0gYS5wb3AoKSwKCQkgICAgUCA9IGFycmF5LmNodW5rKCBhLCAyICksCgkJICAgIG4gPSBQLmxlbmd0aCwKCQkgICAgYywgUzAsIFEwLCBRMSwgUTIsIEMwLCBDMSwgQzIsIEMzOwoKCQlpZiAoIG4gPCAyIHx8IG4gPiA0ICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCQl9CgoJCS8vIFNldHRpbmcgdmFyaWFibGVzCgkJYyAgPSBbXTsKCQlTMCA9IDEgLSB0OwoJCVEwID0gbWF0aC5zcXIoIFMwICk7CgkJUTEgPSAyICogUzAgKiB0OwoJCVEyID0gbWF0aC5zcXIoIHQgKTsKCQlDMCA9IE1hdGgucG93KCBTMCwgMyApOwoJCUMxID0gMyAqIFEwICogdDsKCQlDMiA9IDMgKiBTMCAqIFEyOwoJCUMzID0gTWF0aC5wb3coIHQsIDMgKTsKCgkJLy8gU3RyYWlnaHQKCQlpZiAoIG4gPT09IDIgKSB7CgkJCWMucHVzaCggKCBTMCAqIFBbMF1bMF0gKSArICggdCAqIFBbMV1bMF0gKSApOwoJCQljLnB1c2goICggUzAgKiBQWzBdWzFdICkgKyAoIHQgKiBQWzFdWzFdICkgKTsKCQl9CgkJLy8gUXVhZHJhdGljCgkJZWxzZSBpZiAoIG4gPT09IDMgKSB7CgkJCWMucHVzaCggKCBRMCAqIFBbMF1bMF0gKSArICggUTEgKiBQWzFdWzBdICkgKyAoIFEyICsgUFsyXVswXSApICk7CgkJCWMucHVzaCggKCBRMCAqIFBbMF1bMV0gKSArICggUTEgKiBQWzFdWzFdICkgKyAoIFEyICsgUFsyXVsxXSApICk7CgkJfQoJCS8vIEN1YmljCgkJZWxzZSBpZiAoIG4gPT09IDQgKSB7CgkJCWMucHVzaCggKCBDMCAqIFBbMF1bMF0gKSArICggQzEgKiBQWzFdWzBdICkgKyAoIEMyICogUFsyXVswXSApICsgKCBDMyAqIFBbM11bMF0gKSApOwoJCQljLnB1c2goICggQzAgKiBQWzBdWzFdICkgKyAoIEMxICogUFsxXVsxXSApICsgKCBDMiAqIFBbMl1bMV0gKSArICggQzMgKiBQWzNdWzFdICkgKTsKCQl9CgoJCXJldHVybiBjOwoJfSwKCgkvKioKCSAqIEZpbmRzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIDIgQXJyYXlzIG9mIGNvb3JkaW5hdGVzCgkgKgoJICogQG1ldGhvZCBkaXN0CgkgKiBAcGFyYW0gIHtBcnJheX0gYSBDb29yZGluYXRlcyBbeCwgeV0KCSAqIEBwYXJhbSAge0FycmF5fSBiIENvb3JkaW5hdGVzIFt4LCB5XQoJICogQHJldHVybiB7TnVtYmVyfSAgRGlzdGFuY2UgYmV0d2VlbiBgYWAgJiBgYmAKCSAqLwoJZGlzdCA6IGZ1bmN0aW9uICggYSwgYiApIHsKCQlyZXR1cm4gTWF0aC5zcXJ0KCBtYXRoLnNxciggYlswXSAtIGFbMF0gKSArIG1hdGguc3FyKCBiWzFdIC0gYVsxXSApICk7Cgl9LAoKCS8qKgoJICogU3F1YXJlcyBhIE51bWJlcgoJICoKCSAqIEBtZXRob2Qgc3FyCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IG4gTnVtYmVyIHRvIHNxdWFyZQoJICogQHJldHVybiB7TnVtYmVyfSAgIFNxdWFyZWQgdmFsdWUKCSAqLwoJc3FyIDogZnVuY3Rpb24gKCBuICkgewoJCXJldHVybiBuICogbjsKCX0KfTsKCi8qKiBAbmFtZXNwYWNlIG1lc3NhZ2UgKi8KdmFyIG1lc3NhZ2UgPSB7CgkvKioKCSAqIENsZWFycyB0aGUgbWVzc2FnZSBsaXN0ZW5lcgoJICoKCSAqIEBtZXRob2QgY2xlYXIKCSAqIEByZXR1cm4ge09iamVjdH0gYWJhYXNvCgkgKi8KCWNsZWFyIDogZnVuY3Rpb24gKCBzdGF0ZSApIHsKCQlzdGF0ZSA9IHN0YXRlIHx8ICJhbGwiOwoKCQlyZXR1cm4gb2JzZXJ2ZXIucmVtb3ZlKCBnbG9iYWwsICJtZXNzYWdlIiwgIm1lc3NhZ2UiLCBzdGF0ZSApOwoJfSwKCgkvKioKCSAqIFBvc3RzIGEgbWVzc2FnZSB0byB0aGUgdGFyZ2V0CgkgKgoJICogQG1ldGhvZCBzZW5kCgkgKiBAcGFyYW0gIHtPYmplY3R9IHRhcmdldCBPYmplY3QgdG8gcmVjZWl2ZSBtZXNzYWdlCgkgKiBAcGFyYW0gIHtNaXhlZH0gIGFyZyAgICBFbnRpdHkgdG8gc2VuZCBhcyBtZXNzYWdlCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICB0YXJnZXQKCSAqLwoJc2VuZCA6IGZ1bmN0aW9uICggdGFyZ2V0LCBhcmcgKSB7CgkJdHJ5IHsKCQkJdGFyZ2V0LnBvc3RNZXNzYWdlKCBhcmcsICIqIiApOwoJCX0KCQljYXRjaCAoIGUgKSB7CgkJCXV0aWxpdHkuZXJyb3IoIGUsIGFyZ3VtZW50cywgdGhpcyApOwoJCX0KCgkJcmV0dXJuIHRhcmdldDsKCX0sCgoJLyoqCgkgKiBTZXRzIGEgaGFuZGxlciBmb3IgcmVjaWV2aW5nIGEgbWVzc2FnZQoJICoKCSAqIEBtZXRob2QgcmVjdgoJICogQHBhcmFtICB7RnVuY3Rpb259IGZuIENhbGxiYWNrIGZ1bmN0aW9uCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgYWJhYXNvCgkgKi8KCXJlY3YgOiBmdW5jdGlvbiAoIGZuLCBzdGF0ZSApIHsKCQlzdGF0ZSA9IHN0YXRlIHx8ICJhbGwiOwoKCQlyZXR1cm4gb2JzZXJ2ZXIuYWRkKCBnbG9iYWwsICJtZXNzYWdlIiwgZm4sICJtZXNzYWdlIiwgZ2xvYmFsLCBzdGF0ZSApOwoJfQp9OwoKLyoqIEBuYW1lc3BhY2UgbW91c2UgKi8KdmFyIG1vdXNlID0gewoJLy9JbmRpY2F0ZXMgd2hldGhlciBtb3VzZSB0cmFja2luZyBpcyBlbmFibGVkCgllbmFibGVkIDogZmFsc2UsCgoJLy8gSW5kaWNhdGVzIHdoZXRoZXIgdG8gdHJ5IGxvZ2dpbmcgY28tb3JkaW5hdGVzIHRvIHRoZSBjb25zb2xlCglsb2cgOiBmYWxzZSwKCgkvLyBNb3VzZSBjb29yZGluYXRlcwoJZGlmZiA6IHt4OiBudWxsLCB5OiBudWxsfSwKCXBvcyAgOiB7eDogbnVsbCwgeTogbnVsbH0sCglwcmV2IDoge3g6IG51bGwsIHk6IG51bGx9LAoKCS8vIENhY2hpbmcgdGhlIHZpZXcKCXZpZXcgICAgOiBmdW5jdGlvbiAoKSB7CgkJcmV0dXJuIGNsaWVudC5pZSAmJiBjbGllbnQudmVyc2lvbiA8IDkgPyAiZG9jdW1lbnRFbGVtZW50IiA6ICJib2R5IjsKCX0sCgoJLyoqCgkgKiBFbmFibGVzIG9yIGRpc2FibGVzIG1vdXNlIGNvLW9yZGluYXRlIHRyYWNraW5nCgkgKgoJICogQG1ldGhvZCB0cmFjawoJICogQHBhcmFtICB7TWl4ZWR9IGFyZyBCb29sZWFuIHRvIGVuYWJsZS9kaXNhYmxlIHRyYWNraW5nLCBvciBNb3VzZSBFdmVudAoJICogQHJldHVybiB7T2JqZWN0fSAgICAkLm1vdXNlCgkgKi8KCXRyYWNrIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJdmFyIHR5cGUgPSB0eXBlb2YgYXJnOwoKCQlpZiAoIHR5cGUgPT09ICJvYmplY3QiICkgewoJCQl2YXIgdiA9IGRvY3VtZW50W21vdXNlLnZpZXddLAoJCQkgICAgeCA9IGFyZy5wYWdlWCA/IGFyZy5wYWdlWCA6ICggdi5zY3JvbGxMZWZ0ICsgYXJnLmNsaWVudFggKSwKCQkJICAgIHkgPSBhcmcucGFnZVkgPyBhcmcucGFnZVkgOiAoIHYuc2Nyb2xsVG9wICArIGFyZy5jbGllbnRZICksCgkJCSAgICBjID0gZmFsc2U7CgoJCQlpZiAoIG1vdXNlLnBvcy54ICE9PSB4ICkgewoJCQkJYyA9IHRydWU7CgkJCX0KCgkJCSQubW91c2UucHJldi54ID0gbW91c2UucHJldi54ID0gbnVtYmVyLnBhcnNlKCBtb3VzZS5wb3MueCwgMTAgKTsKCQkJJC5tb3VzZS5wb3MueCAgPSBtb3VzZS5wb3MueCAgPSB4OwoJCQkkLm1vdXNlLmRpZmYueCA9IG1vdXNlLmRpZmYueCA9IG1vdXNlLnBvcy54IC0gbW91c2UucHJldi54OwoKCQkJaWYgKCBtb3VzZS5wb3MueSAhPT0geSApIHsKCQkJCWMgPSB0cnVlOwoJCQl9CgoJCQkkLm1vdXNlLnByZXYueSA9IG1vdXNlLnByZXYueSA9IG51bWJlci5wYXJzZSggbW91c2UucG9zLnksIDEwICk7CgkJCSQubW91c2UucG9zLnkgID0gbW91c2UucG9zLnkgID0geTsKCQkJJC5tb3VzZS5kaWZmLnkgPSBtb3VzZS5kaWZmLnkgPSBtb3VzZS5wb3MueSAtIG1vdXNlLnByZXYueTsKCgkJCWlmICggYyAmJiAkLm1vdXNlLmxvZyApIHsKCQkJCXV0aWxpdHkubG9nKCBbbW91c2UucG9zLngsIG1vdXNlLnBvcy55LCBtb3VzZS5kaWZmLngsIG1vdXNlLmRpZmYueV0gKTsKCQkJfQoJCX0KCQllbHNlIGlmICggdHlwZSA9PT0gImJvb2xlYW4iICkgewoJCQlhcmcgPyBvYnNlcnZlci5hZGQoIGRvY3VtZW50LCAibW91c2Vtb3ZlIiwgbW91c2UudHJhY2ssICJ0cmFja2luZyIgKSA6IG9ic2VydmVyLnJlbW92ZSggZG9jdW1lbnQsICJtb3VzZW1vdmUiLCAidHJhY2tpbmciICk7CgkJCSQubW91c2UuZW5hYmxlZCA9IG1vdXNlLmVuYWJsZWQgPSBhcmc7CgkJfQoKCQlyZXR1cm4gJC5tb3VzZTsKCX0KfTsKCi8qKiBAbmFtZXNwYWNlIG51bWJlciAqLwp2YXIgbnVtYmVyID0gewoJLyoqCgkgKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIGFyZwoJICoKCSAqIEBtZXRob2Qgb2RkCgkgKiBAcGFyYW0ge051bWJlcn0gYXJnIE51bWJlciB0byBjb21wYXJlCgkgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgIFRoZSBhYnNvbHV0ZSBkaWZmZXJlbmNlCgkgKi8KCWRpZmYgOiBmdW5jdGlvbiAoIG51bTEsIG51bTIgKSB7CgkJaWYgKCBpc05hTiggbnVtMSApIHx8IGlzTmFOKCBudW0yICkgKSB7CgkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuZXhwZWN0ZWROdW1iZXIgKTsKCQl9CgoJCXJldHVybiBNYXRoLmFicyggbnVtMSAtIG51bTIgKTsKCX0sCgoJLyoqCgkgKiBUZXN0cyBpZiBhbiBudW1iZXIgaXMgZXZlbgoJICoKCSAqIEBtZXRob2QgZXZlbgoJICogQHBhcmFtIHtOdW1iZXJ9IGFyZyBOdW1iZXIgdG8gdGVzdAoJICogQHJldHVybiB7Qm9vbGVhbn0gICBUcnVlIGlmIGV2ZW4sIG9yIHVuZGVmaW5lZAoJICovCglldmVuIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJcmV0dXJuIGFyZyAlIDIgPT09IDA7Cgl9LAoKCS8qKgoJICogRm9ybWF0cyBhIE51bWJlciB0byBhIGRlbGltaXRlZCBTdHJpbmcKCSAqCgkgKiBAbWV0aG9kIGZvcm1hdAoJICogQHBhcmFtICB7TnVtYmVyfSBhcmcgICAgICAgTnVtYmVyIHRvIGZvcm1hdAoJICogQHBhcmFtICB7U3RyaW5nfSBkZWxpbWl0ZXIgW09wdGlvbmFsXSBTdHJpbmcgdG8gZGVsaW1pdCB0aGUgTnVtYmVyIHdpdGgKCSAqIEBwYXJhbSAge1N0cmluZ30gZXZlcnkgICAgIFtPcHRpb25hbF0gUG9zaXRpb24gdG8gaW5zZXJ0IHRoZSBkZWxpbWl0ZXIsIGRlZmF1bHQgaXMgMwoJICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgTnVtYmVyIHJlcHJlc2VudGVkIGFzIGEgY29tbWEgZGVsaW1pdGVkIFN0cmluZwoJICovCglmb3JtYXQgOiBmdW5jdGlvbiAoIGFyZywgZGVsaW1pdGVyLCBldmVyeSApIHsKCQlpZiAoIGlzTmFOKCBhcmcgKSApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5leHBlY3RlZE51bWJlciApOwoJCX0KCgkJYXJnICAgICAgID0gYXJnLnRvU3RyaW5nKCk7CgkJZGVsaW1pdGVyID0gZGVsaW1pdGVyIHx8ICIsIjsKCQlldmVyeSAgICAgPSBldmVyeSAgICAgfHwgMzsKCgkJdmFyIGQgPSBhcmcuaW5kZXhPZiggIi4iICkgPiAtMSA/ICIuIiArIGFyZy5yZXBsYWNlKCByZWdleC5udW1iZXJfZm9ybWF0XzEsICIiICkgOiAiIiwKCQkgICAgYSA9IGFyZy5yZXBsYWNlKCByZWdleC5udW1iZXJfZm9ybWF0XzIsICIiICkuc3BsaXQoICIiICkucmV2ZXJzZSgpLAoJCSAgICBwID0gTWF0aC5mbG9vciggYS5sZW5ndGggLyBldmVyeSApLAoJCSAgICBpID0gMSwgbiwgYjsKCgkJZm9yICggYiA9IDA7IGIgPCBwOyBiKysgKSB7CgkJCW4gPSBpID09PSAxID8gZXZlcnkgOiAoIGV2ZXJ5ICogaSApICsgKCBpID09PSAyID8gMSA6ICggaSAtIDEgKSApOwoJCQlhLnNwbGljZSggbiwgMCwgZGVsaW1pdGVyICk7CgkJCWkrKzsKCQl9CgoJCWEgPSBhLnJldmVyc2UoKS5qb2luKCAiIiApOwoKCQlpZiAoIGEuY2hhckF0KCAwICkgPT09IGRlbGltaXRlciApIHsKCQkJYSA9IGEuc3Vic3RyaW5nKCAxICk7CgkJfQoKCQlyZXR1cm4gYSArIGQ7Cgl9LAoKCS8qKgoJICogUmV0dXJucyBoYWxmIG9mIGEsIG9yIHRydWUgaWYgYSBpcyBoYWxmIG9mIGIKCSAqCgkgKiBAbWV0aG9kIGhhbGYKCSAqIEBwYXJhbSAge051bWJlcn0gYSBOdW1iZXIgdG8gZGl2aWRlCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IGIgW09wdGlvbmFsXSBOdW1iZXIgdG8gdGVzdCBhIGFnYWluc3QKCSAqIEByZXR1cm4ge01peGVkfSAgICBCb29sZWFuIGlmIGIgaXMgcGFzc2VkLCBOdW1iZXIgaWYgYiBpcyB1bmRlZmluZWQKCSAqLwoJaGFsZiA6IGZ1bmN0aW9uICggYSwgYiApIHsKCQlyZXR1cm4gYiAhPT0gdW5kZWZpbmVkID8gKCAoIGEgLyBiICkgPT09IDAuNSApIDogKCBhIC8gMiApOwoJfSwKCgkvKioKCSAqIFRlc3RzIGlmIGEgbnVtYmVyIGlzIG9kZAoJICoKCSAqIEBtZXRob2Qgb2RkCgkgKiBAcHVibGljCgkgKiBAcGFyYW0ge051bWJlcn0gYXJnIE51bWJlciB0byB0ZXN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgIFRydWUgaWYgb2RkLCBvciB1bmRlZmluZWQKCSAqLwoJb2RkIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJcmV0dXJuICFudW1iZXIuZXZlbiggYXJnICk7Cgl9LAoKCS8qKgoJICogUGFyc2VzIHRoZSBudW1iZXIKCSAqCgkgKiBAbWV0aG9kIHBhcnNlCgkgKiBAcGFyYW0gIHtNaXhlZH0gIGFyZyAgTnVtYmVyIHRvIHBhcnNlCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IGJhc2UgSW50ZWdlciByZXByZXNlbnRpbmcgdGhlIGJhc2Ugb3IgcmFkaXgKCSAqIEByZXR1cm4ge051bWJlcn0gICAgICBJbnRlZ2VyIG9yIGZsb2F0CgkgKi8KCXBhcnNlIDogZnVuY3Rpb24gKCBhcmcsIGJhc2UgKSB7CgkJcmV0dXJuICggYmFzZSA9PT0gdW5kZWZpbmVkICkgPyBwYXJzZUZsb2F0KCBhcmcgKSA6IHBhcnNlSW50KCBhcmcsIGJhc2UgKTsKCX0sCgoJLyoqCgkgKiBHZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gMCBhbmQgYXJnCgkgKgoJICogQG1ldGhvZCByYW5kb20KCSAqIEBwYXJhbSAge051bWJlcn0gYXJnIENlaWxpbmcgZm9yIHJhbmRvbSBudW1iZXIsIGRlZmF1bHQgaXMgMTAwCgkgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICBSYW5kb20gbnVtYmVyCgkgKi8KCXJhbmRvbSA6IGZ1bmN0aW9uICggYXJnICkgewoJCWFyZyA9IGFyZyB8fCAxMDA7CgoJCXJldHVybiBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBhcmcgKyAxICkgKTsKCX0sCgoJLyoqCgkgKiBSb3VuZHMgYSBudW1iZXIgdXAgb3IgZG93bgoJICoKCSAqIEBtZXRob2Qgcm91bmQKCSAqIEBwYXJhbSAge051bWJlcn0gYXJnICAgICAgIE51bWJlciB0byByb3VuZAoJICogQHBhcmFtICB7U3RyaW5nfSBkaXJlY3Rpb24gW09wdGlvbmFsXSAidXAiIG9yICJkb3duIgoJICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgUm91bmRlZCBpbnRlcmdlcgoJICovCglyb3VuZCA6IGZ1bmN0aW9uICggYXJnLCBkaXJlY3Rpb24gKSB7CgkJYXJnID0gbnVtYmVyLnBhcnNlKCBhcmcgKTsKCgkJaWYgKCBkaXJlY3Rpb24gPT09IHVuZGVmaW5lZCB8fCBzdHJpbmcuaXNFbXB0eSggZGlyZWN0aW9uICkgKSB7CgkJCXJldHVybiBudW1iZXIucGFyc2UoIGFyZy50b0ZpeGVkKCAwICkgKTsKCQl9CgkJZWxzZSBpZiAoIHJlZ2V4LmRvd24udGVzdCggZGlyZWN0aW9uICkgKSB7CgkJCXJldHVybiB+figgYXJnICk7CgkJfQoJCWVsc2UgewoJCQlyZXR1cm4gTWF0aC5jZWlsKCBhcmcgKTsKCQl9Cgl9Cn07CgovKiogQG5hbWVzcGFjZSBvYnNlcnZlciAqLwp2YXIgb2JzZXJ2ZXIgPSB7CgkvKioKCSAqIENvbGxlY3Rpb24gb2YgbGlzdGVuZXJzCgkgKgoJICogQHR5cGUge09iamVjdH0KCSAqLwoJbGlzdGVuZXJzICA6IHt9LAoKCS8qKgoJICogQXJyYXkgY29weSBvZiBsaXN0ZW5lcnMgZm9yIG9ic2VydmVyLmZpcmUoKQoJICoKCSAqIEB0eXBlIHtPYmplY3R9CgkgKi8KCWFsaXN0ZW5lcnMgOiB7fSwKCgkvKioKCSAqIEV2ZW50IGxpc3RlbmVycwoJICoKCSAqIEB0eXBlIHtPYmplY3R9CgkgKi8KCWVsaXN0ZW5lcnMgOiB7fSwKCgkvKioKCSAqIFRyYWNrcyBjb3VudCBvZiBsaXN0ZW5lcnMgcGVyIGV2ZW50IGFjcm9zcyBhbGwgc3RhdGVzCgkgKgoJICogQHR5cGUge09iamVjdH0KCSAqLwoJY2xpc3RlbmVycyA6IHt9LAoKCS8qKgoJICogQm9vbGVhbiBpbmRpY2F0aW5nIGlmIGV2ZW50cyBhcmUgbG9nZ2VkIHRvIHRoZSBjb25zb2xlCgkgKgoJICogQHR5cGUge0Jvb2xlYW59CgkgKi8KCWxvZyA6IGZhbHNlLAoKCS8qKgoJICogUXVldWUgb2YgZXZlbnRzIHRvIGZpcmUKCSAqCgkgKiBAdHlwZSB7QXJyYXl9CgkgKi8KCXF1ZXVlIDogW10sCgoJLyoqCgkgKiBJZiBgdHJ1ZWAsIGV2ZW50cyBhcmUgcXVldWVkCgkgKgoJICogQHR5cGUge0Jvb2xlYW59CgkgKi8KCXNpbGVudCA6IGZhbHNlLAoKCS8qKgoJICogSWYgYHRydWVgLCBldmVudHMgYXJlIGlnbm9yZWQKCSAqCgkgKiBAdHlwZSB7Qm9vbGVhbn0KCSAqLwoJaWdub3JlIDogZmFsc2UsCgoJLyoqCgkgKiBBZGRzIGEgaGFuZGxlciB0byBhbiBldmVudAoJICoKCSAqIEBtZXRob2QgYWRkCgkgKiBAcGFyYW0gIHtNaXhlZH0gICAgb2JqICAgUHJpbWl0aXZlCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICAgZXZlbnQgRXZlbnQsIG9yIEV2ZW50cyBiZWluZyBmaXJlZCAoIGNvbW1hIGRlbGltaXRlZCBzdXBwb3J0ZWQgKQoJICogQHBhcmFtICB7RnVuY3Rpb259IGZuICAgIEV2ZW50IGhhbmRsZXIKCSAqIEBwYXJhbSAge1N0cmluZ30gICBpZCAgICBbT3B0aW9uYWwgLyBSZWNvbW1lbmRlZF0gVGhlIGlkIGZvciB0aGUgbGlzdGVuZXIKCSAqIEBwYXJhbSAge1N0cmluZ30gICBzY29wZSBbT3B0aW9uYWwgLyBSZWNvbW1lbmRlZF0gVGhlIGlkIG9mIHRoZSBvYmplY3Qgb3IgZWxlbWVudCB0byBiZSBzZXQgYXMgJ3RoaXMnCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICAgc3QgICAgW09wdGlvbmFsXSBBcHBsaWNhdGlvbiBzdGF0ZSwgZGVmYXVsdCBpcyBjdXJyZW50CgkgKiBAcmV0dXJuIHtNaXhlZH0gICAgICAgICAgUHJpbWl0aXZlCgkgKi8KCWFkZCA6IGZ1bmN0aW9uICggb2JqLCBldmVudCwgZm4sIGlkLCBzY29wZSwgc3QgKSB7CgkJc2NvcGUgPSBzY29wZSB8fCBvYmo7CgkJc3QgICAgPSBzdCAgICB8fCBzdGF0ZS5nZXRDdXJyZW50KCk7CgoJCWlmICggZXZlbnQgIT09IHVuZGVmaW5lZCApIHsKCQkJZXZlbnQgPSBzdHJpbmcuZXhwbG9kZSggZXZlbnQgKTsKCQl9CgoJCWlkID0gaWQgfHwgdXRpbGl0eS5nZW5JZCgpOwoKCQl2YXIgaW5zdGFuY2UgPSBudWxsLAoJCSAgICBsICAgICAgICA9IG9ic2VydmVyLmxpc3RlbmVycywKCQkgICAgYSAgICAgICAgPSBvYnNlcnZlci5hbGlzdGVuZXJzLAoJCSAgICBldiAgICAgICA9IG9ic2VydmVyLmVsaXN0ZW5lcnMsCgkJICAgIGNsICAgICAgID0gb2JzZXJ2ZXIuY2xpc3RlbmVycywKCQkgICAgZ3IgICAgICAgPSByZWdleC5vYnNlcnZlcl9nbG9iYWxzLAoJCSAgICBhciAgICAgICA9IHJlZ2V4Lm9ic2VydmVyX2FsbG93ZWQsCgkJICAgIG8gICAgICAgID0gb2JzZXJ2ZXIuaWQoIG9iaiApLAoJCSAgICBhZGQsIHJlZzsKCgkJaWYgKCBvID09PSB1bmRlZmluZWQgfHwgZXZlbnQgPT09IG51bGwgfHwgZXZlbnQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgZm4gIT09ICJmdW5jdGlvbiIgKSB7CgkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCX0KCgkJaWYgKCBsW29dID09PSB1bmRlZmluZWQgKSB7CgkJCWxbb10gID0ge307CgkJCWFbb10gID0ge307CgkJCWNsW29dID0ge307CgkJfQoKCQlhcnJheS5lYWNoKCBldmVudCwgZnVuY3Rpb24gKCBpICkgewoJCQl2YXIgZWlkID0gbyArICJfIiArIGk7CgoJCQlpZiAoIGxbb11baV0gPT09IHVuZGVmaW5lZCApIHsKCQkJCWxbb11baV0gID0ge307CgkJCQlhW29dW2ldICA9IHt9OwoJCQkJY2xbb11baV0gPSAwOwoJCQl9CgoJCQlpZiAoIGxbb11baV1bc3RdID09PSB1bmRlZmluZWQgKSB7CgkJCQlsW29dW2ldW3N0XSA9IHt9OwoJCQkJYVtvXVtpXVtzdF0gPSBbXTsKCQkJfQoKCQkJaW5zdGFuY2UgPSAoIGdyLnRlc3QoIG8gKSB8fCAoIS9cLy9nLnRlc3QoIG8gKSAmJiBvICE9PSAiYWJhYXNvIiApICkgPyBvYmogOiBudWxsOwoKCQkJLy8gU2V0dGluZyB1cCBldmVudCBsaXN0ZW5lciBpZiB2YWxpZAoJCQlpZiAoIGluc3RhbmNlICE9PSBudWxsICYmIGluc3RhbmNlICE9PSB1bmRlZmluZWQgJiYgaS50b0xvd2VyQ2FzZSgpICE9PSAiYWZ0ZXJqc29ucCIgJiYgZXZbZWlkXSA9PT0gdW5kZWZpbmVkICYmICggZ3IudGVzdCggbyApIHx8IHR5cGVvZiBpbnN0YW5jZS5saXN0ZW5lcnMgPT09ICJmdW5jdGlvbiIgKSApIHsKCQkJCWFkZCA9ICggdHlwZW9mIGluc3RhbmNlLmFkZEV2ZW50TGlzdGVuZXIgPT09ICJmdW5jdGlvbiIgKTsKCQkJCXJlZyA9ICggdHlwZW9mIGluc3RhbmNlLmF0dGFjaEV2ZW50ID09PSAib2JqZWN0IiB8fCBhZGQgKTsKCgkJCQlpZiAoIHJlZyApIHsKCQkJCQkvLyBSZWdpc3RlcmluZyBldmVudCBsaXN0ZW5lcgoJCQkJCWV2W2VpZF0gPSBmdW5jdGlvbiAoIGUgKSB7CgkJCQkJCWlmICggIWFyLnRlc3QoIGUudHlwZSApICkgewoJCQkJCQkJdXRpbGl0eS5zdG9wKCBlICk7CgkJCQkJCX0KCgkJCQkJCW9ic2VydmVyLmZpcmUoIG9iaiwgaSwgZSApOwoJCQkJCX07CgoJCQkJCS8vIEhvb2tpbmcgZXZlbnQgbGlzdGVuZXIKCQkJCQlpbnN0YW5jZVthZGQgPyAiYWRkRXZlbnRMaXN0ZW5lciIgOiAiYXR0YWNoRXZlbnQiXSggKCBhZGQgPyAiIiA6ICJvbiIgKSArIGksIGV2W2VpZF0sIGZhbHNlICk7CgkJCQl9CgkJCX0KCgkJCWxbb11baV1bc3RdW2lkXSA9IHtmbjogZm4sIHNjb3BlOiBzY29wZX07CgkJCW9ic2VydmVyLnN5bmMoIG8sIGksIHN0ICk7CgkJCWNsW29dW2ldKys7CgkJfSk7CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8qKgoJICogRGVjb3JhdGVzIGBvYmpgIHdpdGggYG9ic2VydmVyYCBtZXRob2RzCgkgKgoJICogQG1ldGhvZCBkZWNvcmF0ZQoJICogQHBhcmFtICB7T2JqZWN0fSBvYmogT2JqZWN0IHRvIGRlY29yYXRlCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICBPYmplY3QgdG8gZGVjb3JhdGUKCSAqLwoJZGVjb3JhdGUgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQl2YXIgbWV0aG9kcyA9IFsKCQkJWyJmaXJlIiwgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBvYnNlcnZlci5maXJlLmFwcGx5KCBvYnNlcnZlciwgW3RoaXNdLmNvbmNhdCggYXJyYXkuY2FzdCggYXJndW1lbnRzICkgKSApOyB9XSwKCQkJWyJsaXN0ZW5lcnMiLCBmdW5jdGlvbiAoIGV2ZW50ICkgeyByZXR1cm4gb2JzZXJ2ZXIubGlzdCh0aGlzLCBldmVudCApOyB9XSwKCQkJWyJvbiIsICAgICAgICBmdW5jdGlvbiAoIGV2ZW50LCBsaXN0ZW5lciwgaWQsIHNjb3BlLCBzdGFuZGJ5ICkgeyByZXR1cm4gb2JzZXJ2ZXIuYWRkKCB0aGlzLCBldmVudCwgbGlzdGVuZXIsIGlkLCBzY29wZSwgc3RhbmRieSApOyB9XSwKCQkJWyJvbmNlIiwgICAgICBmdW5jdGlvbiAoIGV2ZW50LCBsaXN0ZW5lciwgaWQsIHNjb3BlLCBzdGFuZGJ5ICkgeyByZXR1cm4gb2JzZXJ2ZXIub25jZSggdGhpcywgZXZlbnQsIGxpc3RlbmVyLCBpZCwgc2NvcGUsIHN0YW5kYnkgKTsgfV0sCgkJCVsidW4iLCAgICAgICAgZnVuY3Rpb24gKCBldmVudCwgaWQgKSB7IHJldHVybiBvYnNlcnZlci5yZW1vdmUoIHRoaXMsIGV2ZW50LCBpZCApOyB9XQoJCV07CgoJCWFycmF5LmVhY2goIG1ldGhvZHMsIGZ1bmN0aW9uICggaSApIHsKCQkJdXRpbGl0eS5wcm9wZXJ0eSggb2JqLCBpWzBdLCB7dmFsdWU6IGlbMV0sIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWV9ICk7CgkJfSk7CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8qKgoJICogRGlzY2FyZCBvYnNlcnZlciBldmVudHMKCSAqCgkgKiBAbWV0aG9kIGRpc2NhcmQKCSAqIEBwYXJhbSAge0Jvb2xlYW59IGFyZyBbT3B0aW9uYWxdIEJvb2xlYW4gaW5kaWNhdGluZyBpZiBldmVudHMgd2lsbCBiZSBpZ25vcmVkCgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgQ3VycmVudCBzZXR0aW5nCgkgKi8KCWRpc2NhcmQgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQlyZXR1cm4gYXJnID09PSB1bmRlZmluZWQgPyBvYnNlcnZlci5pZ25vcmUgOiAoIG9ic2VydmVyLmlnbm9yZSA9ICggYXJnID09PSB0cnVlICkgKTsKCX0sCgoJLyoqCgkgKiBGaXJlcyBhbiBldmVudAoJICoKCSAqIEBtZXRob2QgZmlyZQoJICogQHBhcmFtICB7TWl4ZWR9ICBvYmogICBQcmltaXRpdmUKCSAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnQgRXZlbnQsIG9yIEV2ZW50cyBiZWluZyBmaXJlZCAoIGNvbW1hIGRlbGltaXRlZCBzdXBwb3J0ZWQgKQoJICogQHJldHVybiB7TWl4ZWR9ICAgICAgICBQcmltaXRpdmUKCSAqLwoJZmlyZSA6IGZ1bmN0aW9uICggb2JqLCBldmVudCApIHsKCQl2YXIgcXVpdCA9IGZhbHNlLAoJCSAgICBhICAgID0gYXJyYXkucmVtb3ZlKCBhcnJheS5jYXN0KCBhcmd1bWVudHMgKSwgMCwgMSApLAoJCSAgICBvLCBzLCBsb2csIGxpc3Q7CgoJCWlmICggb2JzZXJ2ZXIuaWdub3JlICkgewoJCQlyZXR1cm4gb2JqOwoJCX0KCgkJbyA9IG9ic2VydmVyLmlkKCBvYmogKTsKCgkJaWYgKCBvID09PSB1bmRlZmluZWQgfHwgZXZlbnQgPT09IHVuZGVmaW5lZCApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJfQoKCQlpZiAoIG9ic2VydmVyLnNpbGVudCApIHsKCQkJb2JzZXJ2ZXIucXVldWUucHVzaCgge29iajogb2JqLCBldmVudDogZXZlbnR9ICk7CgkJfQoJCWVsc2UgewoJCQlzICAgPSBzdGF0ZS5nZXRDdXJyZW50KCk7CgkJCWxvZyA9ICQubG9nZ2luZzsKCgkJCWFycmF5LmVhY2goIHN0cmluZy5leHBsb2RlKCBldmVudCApLCBmdW5jdGlvbiAoIGUgKSB7CgkJCQlpZiAoIGxvZyApIHsKCQkJCQl1dGlsaXR5LmxvZyhvICsgIiBmaXJpbmcgIiArIGUgKTsKCQkJCX0KCgkJCQlsaXN0ID0gb2JzZXJ2ZXIubGlzdCggb2JqLCBlLCBvYnNlcnZlci5hbGlzdGVuZXJzICk7CgoJCQkJaWYgKCBsaXN0LmFsbCAhPT0gdW5kZWZpbmVkICkgewoJCQkJCWFycmF5LmVhY2goIGxpc3QuYWxsLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQkJCXZhciByZXN1bHQgPSBpLmZuLmFwcGx5KCBpLnNjb3BlLCBhICk7CgoJCQkJCQlpZiAoIHJlc3VsdCA9PT0gZmFsc2UgKSB7CgkJCQkJCQlxdWl0ID0gdHJ1ZTsKCgkJCQkJCQlyZXR1cm4gcmVzdWx0OwoJCQkJCQl9CgkJCQkJfSk7CgkJCQl9CgoJCQkJaWYgKCAhcXVpdCAmJiBzICE9PSAiYWxsIiAmJiBsaXN0W3NdICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJYXJyYXkuZWFjaCggbGlzdFtzXSwgZnVuY3Rpb24gKCBpICkgewoJCQkJCQlyZXR1cm4gaS5mbi5hcHBseSggaS5zY29wZSwgYSApOwoJCQkJCX0pOwoJCQkJfQoJCQl9KTsKCQl9CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8qKgoJICogR2V0cyB0aGUgT2JzZXJ2ZXIgaWQgb2YgYXJnCgkgKgoJICogQG1ldGhvZCBpZAoJICogQHBhcmFtICB7TWl4ZWR9ICBPYmplY3Qgb3IgU3RyaW5nCgkgKiBAcmV0dXJuIHtTdHJpbmd9IE9ic2VydmVyIGlkCgkgKi8KCWlkIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJdmFyIGlkOwoKCQlpZiAoIGFyZyA9PT0gZ2xvYmFsICkgewoJCQlpZCA9ICJ3aW5kb3ciOwoJCX0KCQllbHNlIGlmICggIXNlcnZlciAmJiBhcmcgPT09IGRvY3VtZW50ICkgewoJCQlpZCA9ICJkb2N1bWVudCI7CgkJfQoJCWVsc2UgaWYgKCAhc2VydmVyICYmIGFyZyA9PT0gZG9jdW1lbnQuYm9keSApIHsKCQkJaWQgPSAiYm9keSI7CgkJfQoJCWVsc2UgewoJCQl1dGlsaXR5LmdlbklkKCBhcmcgKTsKCQkJaWQgPSBhcmcuaWQgfHwgKCB0eXBlb2YgYXJnLnRvU3RyaW5nID09PSAiZnVuY3Rpb24iID8gYXJnLnRvU3RyaW5nKCkgOiBhcmcgKTsKCQl9CgoJCXJldHVybiBpZDsKCX0sCgoJLyoqCgkgKiBHZXRzIHRoZSBsaXN0ZW5lcnMgZm9yIGFuIGV2ZW50CgkgKgoJICogQG1ldGhvZCBsaXN0CgkgKiBAcGFyYW0gIHtNaXhlZH0gIG9iaiAgICBQcmltaXRpdmUKCSAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnQgIEV2ZW50IGJlaW5nIHF1ZXJpZWQKCSAqIEBwYXJhbSAge09iamVjdH0gdGFyZ2V0IFtPcHRpb25hbF0gTGlzdGVuZXJzIGNvbGxlY3Rpb24gdG8gYWNjZXNzLCBkZWZhdWx0IGlzIGBvYnNlcnZlci5saXN0ZW5lcnNgCgkgKiBAcmV0dXJuIHtNaXhlZH0gICAgICAgICBQcmltaXRpdmUKCSAqLwoJbGlzdCA6IGZ1bmN0aW9uICggb2JqLCBldmVudCwgdGFyZ2V0ICkgewoJCXZhciBsID0gdGFyZ2V0IHx8IG9ic2VydmVyLmxpc3RlbmVycywKCQkgICAgbyA9IG9ic2VydmVyLmlkKCBvYmogKSwKCQkgICAgcjsKCgkJaWYgKCBsW29dID09PSB1bmRlZmluZWQgJiYgZXZlbnQgPT09IHVuZGVmaW5lZCApIHsKCQkJciA9IHt9OwoJCX0KCQllbHNlIGlmICggbFtvXSAhPT0gdW5kZWZpbmVkICYmICggZXZlbnQgPT09IHVuZGVmaW5lZCB8fCBzdHJpbmcuaXNFbXB0eSggZXZlbnQgKSApICkgewoJCQlyID0gbFtvXTsKCQl9CgkJZWxzZSBpZiAoIGxbb10gIT09IHVuZGVmaW5lZCAmJiBsW29dW2V2ZW50XSAhPT0gdW5kZWZpbmVkICkgewoJCQlyID0gbFtvXVtldmVudF07CgkJfQoJCWVsc2UgewoJCQlyID0ge307CgkJfQoKCQlyZXR1cm4gcjsKCX0sCgoJLyoqCgkgKiBBZGRzIGEgbGlzdGVuZXIgZm9yIGEgc2luZ2xlIGV4ZWN1dGlvbgoJICoKCSAqIEBtZXRob2Qgb25jZQoJICogQHBhcmFtICB7TWl4ZWR9ICAgIG9iaiAgIFByaW1pdGl2ZQoJICogQHBhcmFtICB7U3RyaW5nfSAgIGV2ZW50IEV2ZW50IGJlaW5nIGZpcmVkCgkgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICAgRXZlbnQgaGFuZGxlcgoJICogQHBhcmFtICB7U3RyaW5nfSAgIGlkICAgIFtPcHRpb25hbCAvIFJlY29tbWVuZGVkXSBUaGUgaWQgZm9yIHRoZSBsaXN0ZW5lcgoJICogQHBhcmFtICB7U3RyaW5nfSAgIHNjb3BlIFtPcHRpb25hbCAvIFJlY29tbWVuZGVkXSBUaGUgaWQgb2YgdGhlIG9iamVjdCBvciBlbGVtZW50IHRvIGJlIHNldCBhcyAndGhpcycKCSAqIEBwYXJhbSAge1N0cmluZ30gICBzdCAgICBbT3B0aW9uYWxdIEFwcGxpY2F0aW9uIHN0YXRlLCBkZWZhdWx0IGlzIGN1cnJlbnQKCSAqIEByZXR1cm4ge01peGVkfSAgICAgICAgICBQcmltaXRpdmUKCSAqLwoJb25jZSA6IGZ1bmN0aW9uICggb2JqLCBldmVudCwgZm4sIGlkLCBzY29wZSwgc3QgKSB7CgkJdmFyIHV1aWQgPSBpZCB8fCB1dGlsaXR5LmdlbklkKCk7CgoJCXNjb3BlID0gc2NvcGUgfHwgb2JqOwoJCXN0ICAgID0gc3QgICAgfHwgc3RhdGUuZ2V0Q3VycmVudCgpOwoKCQlpZiAoIG9iaiA9PT0gdW5kZWZpbmVkIHx8IGV2ZW50ID09PSBudWxsIHx8IGV2ZW50ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGZuICE9PSAiZnVuY3Rpb24iICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCQl9CgoJCW9ic2VydmVyLmFkZCggb2JqLCBldmVudCwgZnVuY3Rpb24gKCkgewoJCQlmbi5hcHBseSggc2NvcGUsIGFyZ3VtZW50cyApOwoJCQlvYnNlcnZlci5yZW1vdmUoIG9iaiwgZXZlbnQsIHV1aWQsIHN0ICk7CgkJfSwgdXVpZCwgc2NvcGUsIHN0KTsKCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBQYXVzZXMgb2JzZXJ2ZXIgZXZlbnRzLCBhbmQgcXVldWVzIHRoZW0KCSAqCgkgKiBAbWV0aG9kIHBhdXNlCgkgKiBAcGFyYW0gIHtCb29sZWFufSBhcmcgQm9vbGVhbiBpbmRpY2F0aW5nIGlmIGV2ZW50cyB3aWxsIGJlIHF1ZXVlZAoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIEN1cnJlbnQgc2V0dGluZwoJICovCglwYXVzZSA6IGZ1bmN0aW9uICggYXJnICkgewoJCWlmICggYXJnID09PSB0cnVlICkgewoJCQlvYnNlcnZlci5zaWxlbnQgPSBhcmc7CgkJfQoJCWVsc2UgaWYgKCBhcmcgPT09IGZhbHNlICkgewoJCQlvYnNlcnZlci5zaWxlbnQgPSBhcmc7CgoJCQlhcnJheS5lYWNoKCBvYnNlcnZlci5xdWV1ZSwgZnVuY3Rpb24gKCBpICkgewoJCQkJb2JzZXJ2ZXIuZmlyZSggaS5vYmosIGkuZXZlbnQgKTsKCQkJfSk7CgoJCQlvYnNlcnZlci5xdWV1ZSA9IFtdOwoJCX0KCgkJcmV0dXJuIGFyZzsKCX0sCgoJLyoqCgkgKiBSZW1vdmVzIGxpc3RlbmVycwoJICoKCSAqIEBtZXRob2QgcmVtb3ZlCgkgKiBAcGFyYW0gIHtNaXhlZH0gIG9iaiAgIFByaW1pdGl2ZQoJICogQHBhcmFtICB7U3RyaW5nfSBldmVudCBbT3B0aW9uYWxdIEV2ZW50LCBvciBFdmVudHMgYmVpbmcgZmlyZWQgKCBjb21tYSBkZWxpbWl0ZWQgc3VwcG9ydGVkICkKCSAqIEBwYXJhbSAge1N0cmluZ30gaWQgICAgW09wdGlvbmFsXSBMaXN0ZW5lciBpZAoJICogQHBhcmFtICB7U3RyaW5nfSBzdCAgICBbT3B0aW9uYWxdIEFwcGxpY2F0aW9uIHN0YXRlLCBkZWZhdWx0IGlzIGN1cnJlbnQKCSAqIEByZXR1cm4ge01peGVkfSAgICAgICAgUHJpbWl0aXZlCgkgKi8KCXJlbW92ZSA6IGZ1bmN0aW9uICggb2JqLCBldmVudCwgaWQsIHN0ICkgewoJCXN0ID0gc3QgfHwgc3RhdGUuZ2V0Q3VycmVudCgpOwoKCQl2YXIgbCAgID0gb2JzZXJ2ZXIubGlzdGVuZXJzLAoJCSAgICBhICAgPSBvYnNlcnZlci5hbGlzdGVuZXJzLAoJCSAgICBldiAgPSBvYnNlcnZlci5lbGlzdGVuZXJzLAoJCSAgICBjbCAgPSBvYnNlcnZlci5jbGlzdGVuZXJzLAoJCSAgICBvICAgPSBvYnNlcnZlci5pZCggb2JqICksCgkJICAgIGFkZCA9ICggdHlwZW9mIG9iai5hZGRFdmVudExpc3RlbmVyID09PSAiZnVuY3Rpb24iICksCgkJICAgIHJlZyA9ICggdHlwZW9mIG9iai5hdHRhY2hFdmVudCA9PT0gIm9iamVjdCIgfHwgYWRkICksCgkJICAgIGZuOwoKCQkvKioKCQkgKiBSZW1vdmVzIERPTSBldmVudCBob29rCgkJICoKCQkgKiBAbWV0aG9kIGZuCgkJICogQHByaXZhdGUKCQkgKiBAcGFyYW0gIHtNaXhlZH0gIGV2ZW50IFN0cmluZyBvciBudWxsCgkJICogQHBhcmFtICB7TnVtYmVyfSBpICAgICBBbW91bnQgb2YgbGlzdGVuZXJzIGJlaW5nIHJlbW92ZWQKCQkgKiBAcmV0dXJuIHtVbmRlZmluZWR9ICAgIHVuZGVmaW5lZAoJCSAqLwoJCWZuID0gZnVuY3Rpb24gKCBldmVudCwgaSApIHsKCQkJdmFyIHVuaG9vayA9ICggdHlwZW9mIGkgPT09ICJudW1iZXIiICYmICggY2xbb11bZXZlbnRdID0gKCBjbFtvXVtldmVudF0gLSBpICkgKSA9PT0gMCApOwoKCQkJaWYgKCB1bmhvb2sgJiYgcmVnICkgewoJCQkJb2JqW2FkZCA/ICJyZW1vdmVFdmVudExpc3RlbmVyIiA6ICJkZXRhY2hFdmVudCJdKCAoIGFkZCA/ICIiIDogIm9uIiApICsgZXZlbnQsIGV2W28gKyAiXyIgKyBldmVudF0sIGZhbHNlICk7CgkJCQlkZWxldGUgZXZbbyArICJfIiArIGV2ZW50XTsKCQkJfQoJCX07CgoJCWlmICggbFtvXSA9PT0gdW5kZWZpbmVkICkgewoJCQlyZXR1cm4gb2JqOwoJCX0KCgkJaWYgKCBldmVudCA9PT0gdW5kZWZpbmVkIHx8IGV2ZW50ID09PSBudWxsICkgewoJCQlpZiAoIHJlZ2V4Lm9ic2VydmVyX2dsb2JhbHMudGVzdCggbyApIHx8IHR5cGVvZiBvLmxpc3RlbmVycyA9PT0gImZ1bmN0aW9uIiApIHsKCQkJCXV0aWxpdHkuaXRlcmF0ZSggZXYsIGZ1bmN0aW9uICggdiwgayApIHsKCQkJCQlpZiAoIGsuaW5kZXhPZiggbyArICJfIiApID09PSAwKSB7CgkJCQkJCWZuKCBrLnJlcGxhY2UoIC8uKl8vLCAiIiApLCAxICk7CgkJCQkJfQoJCQkJfSk7CgkJCX0KCgkJCWRlbGV0ZSBsW29dOwoJCQlkZWxldGUgYVtvXTsKCQkJZGVsZXRlIGNsW29dOwoJCX0KCQllbHNlIHsKCQkJYXJyYXkuZWFjaCggc3RyaW5nLmV4cGxvZGUoIGV2ZW50ICksIGZ1bmN0aW9uICggZSApIHsKCQkJCXZhciBzeW5jID0gZmFsc2U7CgoJCQkJaWYgKCBsW29dW2VdID09PSB1bmRlZmluZWQgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCWlmICggaWQgPT09IHVuZGVmaW5lZCApIHsKCQkJCQlpZiAoIHJlZ2V4Lm9ic2VydmVyX2dsb2JhbHMudGVzdCggbyApIHx8IHR5cGVvZiBvLmxpc3RlbmVycyA9PT0gImZ1bmN0aW9uIiApIHsKCQkJCQkJZm4oIGUsIGFycmF5LmtleXMoIGxbb11bZV1bc3RdICkubGVuZ3RoICk7CgkJCQkJfQoKCQkJCQlsW29dW2VdW3N0XSA9IHt9OwoJCQkJCXN5bmMgPSB0cnVlOwoJCQkJfQoJCQkJZWxzZSBpZiAoIGxbb11bZV1bc3RdW2lkXSAhPT0gdW5kZWZpbmVkICkgewoJCQkJCWZuKCBlLCAxICk7CgkJCQkJZGVsZXRlIGxbb11bZV1bc3RdW2lkXTsKCQkJCQlzeW5jID0gdHJ1ZTsKCQkJCX0KCgkJCQlpZiAoIHN5bmMgKSB7CgkJCQkJb2JzZXJ2ZXIuc3luYyggbywgZSwgc3QgKTsKCQkJCX0KCQkJfSk7CgkJfQoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIFJldHVybnMgdGhlIHN1bSBvZiBhY3RpdmUgbGlzdGVuZXJzIGZvciBvbmUgb3IgYWxsIE9iamVjdHMKCSAqCgkgKiBAbWV0aG9kIHN1bQoJICogQHBhcmFtICB7TWl4ZWR9IG9iaiBbT3B0aW9uYWxdIEVudGl0eQoJICogQHJldHVybiB7T2JqZWN0fSAgICBPYmplY3Qgd2l0aCB0b3RhbCBsaXN0ZW5lcnMgcGVyIGV2ZW50CgkgKi8KCXN1bSA6IGZ1bmN0aW9uICggb2JqICkgewoJCXJldHVybiBvYmogPyBvYnNlcnZlci5jbGlzdGVuZXJzW29ic2VydmVyLmlkKCBvYmogKV0gOiBhcnJheS5rZXlzKCBvYnNlcnZlci5jbGlzdGVuZXJzICkubGVuZ3RoOwoJfSwKCgkvKioKCSAqIFN5bmNzIGBhbGlzdGVuZXJzYCB3aXRoIGBsaXN0ZW5lcnNgCgkgKgoJICogQG1ldGhvZCBzeW5jCgkgKiBAcGFyYW0gIHtTdHJpbmd9IG9iaiAgIE9iamVjdCBJRAoJICogQHBhcmFtICB7U3RyaW5nfSBldmVudCBFdmVudAoJICogQHBhcmFtICB7U3RyaW5nfSBzdCAgICBBcHBsaWNhdGlvbiBzdGF0ZQoJICogQHJldHVybiB7VW5kZWZpbmVkfSAgICB1bmRlZmluZWQKCSAqLwoJc3luYyA6IGZ1bmN0aW9uICggb2JqLCBldmVudCwgc3QgKSB7CgkJb2JzZXJ2ZXIuYWxpc3RlbmVyc1tvYmpdW2V2ZW50XVtzdF0gPSBhcnJheS5jYXN0KCBvYnNlcnZlci5saXN0ZW5lcnNbb2JqXVtldmVudF1bc3RdICk7Cgl9Cn07CgovKiogQG5hbWVzcGFjZSBwcm9taXNlICovCnZhciBwcm9taXNlID0gewoJLyoqCgkgKiBBc3luYyBkZWxheSBzdHJhdGVneQoJICoKCSAqIEBtZXRob2QgZGVsYXkKCSAqIEByZXR1cm4ge0Z1bmN0aW9ufSBEZWxheSBtZXRob2QKCSAqLwoJZGVsYXkgOiBmdW5jdGlvbiAoKSB7CgkJaWYgKCB0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAidW5kZWZpbmVkIiApIHsKCQkJcmV0dXJuIGZ1bmN0aW9uICggYXJnICkgewoJCQkJc2V0SW1tZWRpYXRlKCBhcmcgKTsKCQkJfTsKCQl9CgkJZWxzZSBpZiAoIHR5cGVvZiBwcm9jZXNzICE9PSAidW5kZWZpbmVkIiApIHsKCQkJcmV0dXJuIHByb2Nlc3MubmV4dFRpY2s7CgkJfQoJCWVsc2UgewoJCQlyZXR1cm4gZnVuY3Rpb24gKCBhcmcgKSB7CgkJCQlzZXRUaW1lb3V0KCBhcmcsIDAgKTsKCQkJfTsKCQl9Cgl9KCksCgoJLyoqCgkgKiBQcm9taXNlIGZhY3RvcnkKCSAqCgkgKiBAbWV0aG9kIGZhY3RvcnkKCSAqIEByZXR1cm4ge09iamVjdH0gSW5zdGFuY2Ugb2YgcHJvbWlzZQoJICovCglmYWN0b3J5IDogZnVuY3Rpb24gKCkgewoJCXJldHVybiBuZXcgUHJvbWlzZSgpOwoJfSwKCgkvKioKCSAqIFBpcGVzIGEgcmVjb25jaWxpYXRpb24gZnJvbSBgcGFyZW50YCB0byBgY2hpbGRgCgkgKgoJICogQG1ldGhvZCBwaXBlCgkgKiBAcGFyYW0gIHtPYmplY3R9IHBhcmVudCBQcm9taXNlCgkgKiBAcGFyYW0gIHtPYmplY3R9IGNoaWxkICBQcm9taXNlCgkgKiBAcmV0dXJuIHtVbmRlZmluZWR9ICAgICB1bmRlZmluZWQKCSAqLwoJcGlwZSA6IGZ1bmN0aW9uICggcGFyZW50LCBjaGlsZCApIHsKCQlwYXJlbnQudGhlbiggZnVuY3Rpb24gKCBhcmcgKSB7CgkJCWNoaWxkLnJlc29sdmUoIGFyZyApOwoJCX0sIGZ1bmN0aW9uICggZSApIHsKCQkJY2hpbGQucmVqZWN0KCBlICk7CgkJfSk7Cgl9LAoKCS8qKgoJICogSW5pdGlhdGVzIHByb2Nlc3NpbmcgYSBQcm9taXNlCgkgKgoJICogQG1lbWJlck9mIHByb2Nlc3MKCSAqIEBwYXJhbSAge09iamVjdH0gb2JqICAgUHJvbWlzZSBpbnN0YW5jZQoJICogQHBhcmFtICB7TWl4ZWR9ICBhcmcgICBQcm9taXNlIHZhbHVlCgkgKiBAcGFyYW0gIHtOdW1iZXJ9IHN0YXRlIFN0YXRlLCBlLmcuICIxIgoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICBQcm9taXNlIGluc3RhbmNlCgkgKi8KCXByb2Nlc3MgOiBmdW5jdGlvbiAoIG9iaiwgYXJnLCBzdGF0ZSApIHsKCQlpZiAoIG9iai5zdGF0ZSA+IHByb21pc2Uuc3RhdGUuUEVORElORyApIHsKCQkJcmV0dXJuOwoJCX0KCgkJb2JqLnZhbHVlID0gYXJnOwoJCW9iai5zdGF0ZSA9IHN0YXRlOwoKCQlpZiAoICFvYmouZGVmZXJyZWQgKSB7CgkJCXByb21pc2UuZGVsYXkoIGZ1bmN0aW9uICgpIHsKCQkJCW9iai5wcm9jZXNzKCk7CgkJCX0pOwoKCQkJb2JqLmRlZmVycmVkID0gdHJ1ZTsKCQl9CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8qKgoJICogU3RhdGVzIG9mIGEgUHJvbWlzZQoJICoKCSAqIEB0eXBlIHtPYmplY3R9CgkgKi8KCXN0YXRlIDogewoJCVBFTkRJTkcgOiAwLAoJCUZBSUxVUkUgOiAxLAoJCVNVQ0NFU1MgOiAyCgl9Cn07CgovKioKICogUHJvbWlzZQogKgogKiBAbWV0aG9kIFByb21pc2UKICogQGNvbnN0cnVjdG9yCiAqIEByZXR1cm4ge09iamVjdH0gUHJvbWlzZSBpbnN0YW5jZQogKi8KZnVuY3Rpb24gUHJvbWlzZSAoKSB7Cgl0aGlzLmRlZmVycmVkID0gZmFsc2U7Cgl0aGlzLmhhbmRsZXJzID0gW107Cgl0aGlzLnN0YXRlICAgID0gcHJvbWlzZS5zdGF0ZS5QRU5ESU5HOwoJdGhpcy52YWx1ZSAgICA9IG51bGw7Cn0KCi8vIFNldHRpbmcgY29uc3RydWN0b3IgbG9vcApQcm9taXNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFByb21pc2U7CgovKioKICogUHJvY2Vzc2VzIGBoYW5kbGVyc2AgcXVldWUKICoKICogQG1ldGhvZCBwcm9jZXNzCiAqIEByZXR1cm4ge09iamVjdH0gUHJvbWlzZSBpbnN0YW5jZQogKi8KUHJvbWlzZS5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKCkgewoJdmFyIHJlc3VsdCwgc3VjY2VzcywgdmFsdWU7CgoJdGhpcy5kZWZlcnJlZCA9IGZhbHNlOwoKCWlmICggdGhpcy5zdGF0ZSA9PT0gcHJvbWlzZS5zdGF0ZS5QRU5ESU5HICkgewoJCXJldHVybjsKCX0KCgl2YWx1ZSAgID0gdGhpcy52YWx1ZTsKCXN1Y2Nlc3MgPSB0aGlzLnN0YXRlID09PSBwcm9taXNlLnN0YXRlLlNVQ0NFU1M7CgoJYXJyYXkuZWFjaCggdGhpcy5oYW5kbGVycy5zbGljZSgpLCBmdW5jdGlvbiAoIGkgKSB7CgkJdmFyIGNhbGxiYWNrID0gaVtzdWNjZXNzID8gInN1Y2Nlc3MiIDogImZhaWx1cmUiIF0sCgkJICAgIGNoaWxkICAgID0gaS5wcm9taXNlOwoKCQlpZiAoICFjYWxsYmFjayB8fCB0eXBlb2YgY2FsbGJhY2sgIT09ICJmdW5jdGlvbiIgKSB7CgkJCWlmICggdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICJmdW5jdGlvbiIgKSB7CgkJCQlwcm9taXNlLnBpcGUoIHZhbHVlLCBjaGlsZCApOwoJCQl9CgkJCWVsc2UgewoJCQkJaWYgKCBzdWNjZXNzICkgewoJCQkJCWNoaWxkLnJlc29sdmUoIHZhbHVlICk7CgkJCQl9IGVsc2UgewoJCQkJCWNoaWxkLnJlamVjdCggdmFsdWUgKTsKCQkJCX0KCQkJfQoKCQkJcmV0dXJuOwoJCX0KCgkJdHJ5IHsKCQkJcmVzdWx0ID0gY2FsbGJhY2soIHZhbHVlICk7CgkJfQoJCWNhdGNoICggZSApIHsKCQkJY2hpbGQucmVqZWN0KCBlICk7CgkJCXJldHVybjsKCQl9CgoJCWlmICggcmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gImZ1bmN0aW9uIiApIHsKCQkJcHJvbWlzZS5waXBlKCByZXN1bHQsIHByb21pc2UgKTsKCQl9CgkJZWxzZSB7CgkJCWNoaWxkLnJlc29sdmUoIHJlc3VsdCApOwoJCX0KCX0pOwoKCXJldHVybiB0aGlzOwp9OwoKLyoqCiAqIEJyZWFrcyBhIFByb21pc2UKICoKICogQG1ldGhvZCByZWplY3QKICogQHBhcmFtICB7TWl4ZWR9IGFyZyBQcm9taXNlIHZhbHVlCiAqIEByZXR1cm4ge09iamVjdH0gICAgUHJvbWlzZSBpbnN0YW5jZQogKi8KUHJvbWlzZS5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24gKCBhcmcgKSB7CglyZXR1cm4gcHJvbWlzZS5wcm9jZXNzKCB0aGlzLCBhcmcsIHByb21pc2Uuc3RhdGUuRkFJTFVSRSApOwp9OwoKLyoqCiAqIFJlc29sdmVzIGEgUHJvbWlzZQogKgogKiBAbWV0aG9kIHJlc29sdmUKICogQHBhcmFtICB7TWl4ZWR9IGFyZyBQcm9taXNlIHZhbHVlCiAqIEByZXR1cm4ge09iamVjdH0gICAgUHJvbWlzZSBpbnN0YW5jZQogKi8KUHJvbWlzZS5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uICggYXJnICkgewoJcmV0dXJuIHByb21pc2UucHJvY2VzcyggdGhpcywgYXJnLCBwcm9taXNlLnN0YXRlLlNVQ0NFU1MgKTsKfTsKCi8qKgogKiBSZWdpc3RlcnMgaGFuZGxlcihzKSBmb3IgYSBQcm9taXNlCiAqCiAqIEBtZXRob2QgdGhlbgogKiBAcGFyYW0gIHtGdW5jdGlvbn0gc3VjY2VzcyBbT3B0aW9uYWxdIFN1Y2Nlc3MgaGFuZGxlciBmb3IgZXZlbnR1YWwgdmFsdWUKICogQHBhcmFtICB7RnVuY3Rpb259IGZhaWx1cmUgW09wdGlvbmFsXSBGYWlsdXJlIGhhbmRsZXIgZm9yIGV2ZW50dWFsIHZhbHVlCiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgIE5ldyBQcm9taXNlIGluc3RhbmNlCiAqLwpQcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKCBzdWNjZXNzLCBmYWlsdXJlICkgewoJdmFyIHNlbGYgID0gdGhpcywKCSAgICBjaGlsZCA9IG5ldyBQcm9taXNlKCk7CgoJdGhpcy5oYW5kbGVycy5wdXNoKCB7CgkJc3VjY2VzcyA6IHN1Y2Nlc3MsCgkJZmFpbHVyZSA6IGZhaWx1cmUsCgkJcHJvbWlzZSA6IGNoaWxkCgl9ICk7CgoJaWYgKCB0aGlzLnN0YXRlID4gcHJvbWlzZS5zdGF0ZS5QRU5ESU5HICYmICF0aGlzLmRlZmVycmVkICkgewoJCXByb21pc2UuZGVsYXkoIGZ1bmN0aW9uICgpIHsKCQkJc2VsZi5wcm9jZXNzKCk7CgkJfSk7CgoJCXRoaXMuZGVmZXJyZWQgPSB0cnVlOwoJfQoKCXJldHVybiBjaGlsZDsKfTsKCi8qKgogKiBQcm90b3R5cGUgaG9va3MKICoKICogQHByaXZhdGUKICogQHR5cGUge09iamVjdH0KICovCnZhciBwcm90b3R5cGVzID0gewoJLy8gQXJyYXkucHJvdG90eXBlCglhcnJheSA6IHsKCQlhZGQgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGFycmF5LmFkZCggdGhpcywgYXJnICk7CgkJfSwKCQlhZGRDbGFzcyA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJZWxlbWVudC5rbGFzcyggaSwgYXJnICk7CgkJCX0pOwoJCX0sCgkJYWZ0ZXIgOiBmdW5jdGlvbiAoIHR5cGUsIGFyZ3MgKSB7CgkJCXZhciByZXN1bHQgPSBbXTsKCgkJCWFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCXJlc3VsdC5wdXNoKCBlbGVtZW50LmNyZWF0ZSggdHlwZSwgYXJncywgaSwgImFmdGVyIiApICk7CgkJCX0pOwoKCQkJcmV0dXJuIHJlc3VsdDsKCQl9LAoJCWFwcGVuZCA6IGZ1bmN0aW9uICggdHlwZSwgYXJncyApIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJcmVzdWx0LnB1c2goIGVsZW1lbnQuY3JlYXRlKCB0eXBlLCBhcmdzLCBpLCAibGFzdCIgKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlhdHRyIDogZnVuY3Rpb24gKCBrZXksIHZhbHVlICkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXN1bHQucHVzaCggZWxlbWVudC5hdHRyKCBpLCBrZXksIHZhbHVlICkgKTsKCQkJfSk7CgoJCQlyZXR1cm4gcmVzdWx0OwoJCX0sCgkJYmVmb3JlIDogZnVuY3Rpb24gKCB0eXBlLCBhcmdzICkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXN1bHQucHVzaCggZWxlbWVudC5jcmVhdGUoIHR5cGUsIGFyZ3MsIGksICJiZWZvcmUiICkgKTsKCQkJfSk7CgoJCQlyZXR1cm4gcmVzdWx0OwoJCX0sCgkJYmluSW5kZXggOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGFycmF5LmJpbkluZGV4KCB0aGlzLCBhcmcgKTsKCQl9LAoJCWNodW5rIDogZnVuY3Rpb24gKCBzaXplICkgewoJCQlyZXR1cm4gYXJyYXkuY2h1bmsoIHRoaXMsIHNpemUgKTsKCQl9LAoJCWNsZWFyIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gIXNlcnZlciAmJiAoIHRoaXNbMF0gaW5zdGFuY2VvZiBFbGVtZW50ICkgPyBhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQllbGVtZW50LmNsZWFyKGkpOwoJCQl9KSA6IGFycmF5LmNsZWFyKCB0aGlzICk7CgkJfSwKCQljbG9uZSA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIHV0aWxpdHkuY2xvbmUoIHRoaXMgKTsKCQl9LAoJCWNvbGxlY3QgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGFycmF5LmNvbGxlY3QoIHRoaXMsIGFyZyApOwoJCX0sCgkJY29tcGFjdCA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5LmNvbXBhY3QoIHRoaXMgKTsKCQl9LAoJCWNvbnRhaW5zIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBhcnJheS5jb250YWlucyggdGhpcywgYXJnICk7CgkJfSwKCQljb3VudCA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gYXJyYXkuY291bnQoIHRoaXMsIGFyZyApOwoJCX0sCgkJY3JlYXRlIDogZnVuY3Rpb24gKCB0eXBlLCBhcmdzLCBwb3NpdGlvbiApIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJcmVzdWx0LnB1c2goIGVsZW1lbnQuY3JlYXRlKCB0eXBlLCBhcmdzLCBpLCBwb3NpdGlvbiApICk7CgkJCX0pOwoKCQkJcmV0dXJuIHJlc3VsdDsKCQl9LAoJCWNzcyA6IGZ1bmN0aW9uICgga2V5LCB2YWx1ZSApIHsKCQkJcmV0dXJuIGFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCWVsZW1lbnQuY3NzKCBpLCBrZXksIHZhbHVlICk7CgkJCX0pOwoJCX0sCgkJZGF0YSA6IGZ1bmN0aW9uICgga2V5LCB2YWx1ZSApIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKGkpIHsKCQkJCXJlc3VsdC5wdXNoKCBlbGVtZW50LmRhdGEoIGksIGtleSwgdmFsdWUgKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlkaWZmIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBhcnJheS5kaWZmKCB0aGlzLCBhcmcgKTsKCQl9LAoJCWRpc2FibGUgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQllbGVtZW50LmRpc2FibGUoIGkgKTsKCQkJfSk7CgkJfSwKCQlkaXNwYXRjaCA6IGZ1bmN0aW9uICggZXZlbnQsIGRhdGEsIGJ1YmJsZXMsIGNhbmNlbGFibGUgKSB7CgkJCXJldHVybiBhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQllbGVtZW50LmRpc3BhdGNoKCBpLCBldmVudCwgZGF0YSwgYnViYmxlcywgY2FuY2VsYWJsZSApOwoJCQl9KTsKCQl9LAoJCWRlc3Ryb3kgOiBmdW5jdGlvbiAoKSB7CgkJCWFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCWVsZW1lbnQuZGVzdHJveSggaSApOwoJCQl9KTsKCgkJCXJldHVybiBbXTsKCQl9LAoJCWVhY2ggOiBmdW5jdGlvbiAoIGFyZywgYXN5bmMsIHNpemUgKSB7CgkJCXJldHVybiBhcnJheS5lYWNoKCB0aGlzLCBhcmcsIGFzeW5jLCBzaXplICk7CgkJfSwKCQllbXB0eSA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5LmVtcHR5KCB0aGlzICk7CgkJfSwKCQllbmFibGUgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQllbGVtZW50LmVuYWJsZSggaSApOwoJCQl9KTsKCQl9LAoJCWVxdWFsIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBhcnJheS5lcXVhbCggdGhpcywgYXJnICk7CgkJfSwKCQlmaWIgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGFycmF5LmZpYiggYXJnICk7CgkJfSwKCQlmaWxsIDogZnVuY3Rpb24gKCBhcmcsIHN0YXJ0LCBvZmZzZXQgKSB7CgkJCXJldHVybiBhcnJheS5maWxsKCB0aGlzLCBhcmcsIHN0YXJ0LCBvZmZzZXQgKTsKCQl9LAoJCWZpbmQgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJaS5maW5kKCBhcmcgKS5lYWNoKCBmdW5jdGlvbiAoIHIgKSB7CgkJCQkJcmVzdWx0LmFkZCggciApOwoJCQkJfSk7CgkJCX0pOwoKCQkJcmV0dXJuIHJlc3VsdDsKCQl9LAoJCWZpcmUgOiBmdW5jdGlvbiAoKSB7CgkJCXZhciBhcmdzID0gYXJndW1lbnRzOwoKCQkJcmV0dXJuIGFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCW9ic2VydmVyLmZpcmUuYXBwbHkoIG9ic2VydmVyLCBbaV0uY29uY2F0KCBhcnJheS5jYXN0KCBhcmdzICkgKSApOwoJCQl9KTsKCQl9LAoJCWZpcnN0IDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gYXJyYXkuZmlyc3QoIHRoaXMgKTsKCQl9LAoJCWZsYXQgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBhcnJheS5mbGF0KCB0aGlzICk7CgkJfSwKCQlmcm9tT2JqZWN0IDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBhcnJheS5mcm9tT2JqZWN0KCBhcmcgKTsKCQl9LAoJCWdlbklkIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJdXRpbGl0eS5nZW5JZCggaSApOwoJCQl9KTsKCQl9LAoJCWdldCA6IGZ1bmN0aW9uICggdXJpLCBoZWFkZXJzICkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGksIGlkeCApIHsKCQkJCWkuZ2V0KCB1cmksIGhlYWRlcnMsIGZ1bmN0aW9uICggYXJnICkgewoJCQkJCXJlc3VsdFtpZHhdID0gYXJnOwoJCQkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJCXJlc3VsdFtpZHhdID0gZTsKCQkJCX0pOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQloYXMgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJcmVzdWx0LnB1c2goIGVsZW1lbnQuaGFzKCBpLCBhcmcgKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQloYXNDbGFzcyA6IGZ1bmN0aW9uICggYXJnICkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXN1bHQucHVzaCggZWxlbWVudC5oYXNDbGFzcyggaSwgYXJnICkgKTsKCQkJfSk7CgoJCQlyZXR1cm4gcmVzdWx0OwoJCX0sCgkJaHRtbCA6IGZ1bmN0aW9uICggYXJnICkgewoJCQl2YXIgcmVzdWx0OwoKCQkJaWYgKCBhcmcgIT09IHVuZGVmaW5lZCApIHsKCQkJCXJldHVybiBhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQkJZWxlbWVudC5odG1sKCBpLCBhcmcgKTsKCQkJCX0pOwoJCQl9CgkJCWVsc2UgewoJCQkJcmVzdWx0ID0gW107CgkJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQkJcmVzdWx0LnB1c2goIGVsZW1lbnQuaHRtbCggaSApICk7CgkJCQl9KTsKCgkJCQlyZXR1cm4gcmVzdWx0OwoJCQl9CgkJfSwKCQlpbmRleCA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gYXJyYXkuaW5kZXgoIHRoaXMsIGFyZyApOwoJCX0sCgkJaW5kZXhlZCA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5LmluZGV4ZWQoIHRoaXMgKTsKCQl9LAoJCWludGVyc2VjdCA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gYXJyYXkuaW50ZXJzZWN0KCB0aGlzLCBhcmcgKTsKCQl9LAoJCWlzIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXZhciByZXN1bHQgPSBbXTsKCgkJCWFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCXJlc3VsdC5wdXNoKCBlbGVtZW50LmlzKCBpLCBhcmcgKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlpc0FscGhhTnVtIDogZnVuY3Rpb24gKCkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXN1bHQucHVzaCggaS5pc0FscGhhTnVtKCkgKTsKCQkJfSk7CgoJCQlyZXR1cm4gcmVzdWx0OwoJCX0sCgkJaXNCb29sZWFuIDogZnVuY3Rpb24gKCkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXN1bHQucHVzaCggaS5pc0Jvb2xlYW4oKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlpc0NoZWNrZWQgOiBmdW5jdGlvbiAoKSB7CgkJCXZhciByZXN1bHQgPSBbXTsKCgkJCWFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCXJlc3VsdC5wdXNoKCBpLmlzQ2hlY2tlZCgpICk7CgkJCX0pOwoKCQkJcmV0dXJuIHJlc3VsdDsKCQl9LAoJCWlzRGF0ZSA6IGZ1bmN0aW9uICgpIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJcmVzdWx0LnB1c2goIGkuaXNEYXRlKCkgKTsKCQkJfSk7CgoJCQlyZXR1cm4gcmVzdWx0OwoJCX0sCgkJaXNEaXNhYmxlZCA6IGZ1bmN0aW9uICgpIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJcmVzdWx0LnB1c2goIGVsZW1lbnQuaXNEaXNhYmxlZCggaSApICk7CgkJCX0pOwoKCQkJcmV0dXJuIHJlc3VsdDsKCQl9LAoJCWlzRG9tYWluIDogZnVuY3Rpb24gKCkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXN1bHQucHVzaCggaS5pc0RvbWFpbigpICk7CgkJCX0pOwoKCQkJcmV0dXJuIHJlc3VsdDsKCQl9LAoJCWlzRW1haWwgOiBmdW5jdGlvbiAoKSB7CgkJCXZhciByZXN1bHQgPSBbXTsKCgkJCWFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCXJlc3VsdC5wdXNoKCBpLmlzRW1haWwoKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlpc0VtcHR5IDogZnVuY3Rpb24gKCkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXN1bHQucHVzaCggaS5pc0VtcHR5KCkgKTsKCQkJfSk7CgoJCQlyZXR1cm4gcmVzdWx0OwoJCX0sCgkJaXNIaWRkZW4gOiBmdW5jdGlvbiAoKSB7CgkJCXZhciByZXN1bHQgPSBbXTsKCgkJCWFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCXJlc3VsdC5wdXNoKCBlbGVtZW50LmlzSGlkZGVuKCBpICkgKTsKCQkJfSk7CgoJCQlyZXR1cm4gcmVzdWx0OwoJCX0sCgkJaXNJUCA6IGZ1bmN0aW9uICgpIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJcmVzdWx0LnB1c2goIGkuaXNJUCgpICk7CgkJCX0pOwoKCQkJcmV0dXJuIHJlc3VsdDsKCQl9LAoJCWlzSW50IDogZnVuY3Rpb24gKCkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXN1bHQucHVzaCggaS5pc0ludCgpICk7CgkJCX0pOwoKCQkJcmV0dXJuIHJlc3VsdDsKCQl9LAoJCWlzTnVtYmVyIDogZnVuY3Rpb24gKCkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXN1bHQucHVzaCggaS5pc051bWJlcigpICk7CgkJCX0pOwoKCQkJcmV0dXJuIHJlc3VsdDsKCQl9LAoJCWlzUGhvbmUgOiBmdW5jdGlvbiAoKSB7CgkJCXZhciByZXN1bHQgPSBbXTsKCgkJCWFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCXJlc3VsdC5wdXNoKCBpLmlzUGhvbmUoKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlpc1VybCA6IGZ1bmN0aW9uICgpIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJcmVzdWx0LnB1c2goIGkuaXNVcmwoKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlrZWVwSWYgOiBmdW5jdGlvbiAoIGZuICkgewoJCQlyZXR1cm4gYXJyYXkua2VlcElmKCB0aGlzLCBmbiApOwoJCX0sCgkJa2V5U29ydCA6IGZ1bmN0aW9uICggcXVlcnksIHN1YiApIHsKCQkJcmV0dXJuIGFycmF5LmtleVNvcnQoIHRoaXMsIHF1ZXJ5LCBzdWIgKTsKCQl9LAoJCWtleXMgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBhcnJheS5rZXlzKCB0aGlzICk7CgkJfSwKCQlsYXN0IDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBhcnJheS5sYXN0KCB0aGlzLCBhcmcgKTsKCQl9LAoJCWxpbWl0IDogZnVuY3Rpb24gKCBzdGFydCwgb2Zmc2V0ICkgewoJCQlyZXR1cm4gYXJyYXkubGltaXQoIHRoaXMsIHN0YXJ0LCBvZmZzZXQgKTsKCQl9LAoJCWxpc3RlbmVyczogZnVuY3Rpb24gKCBldmVudCApIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJYXJyYXkubWVyZ2UocmVzdWx0LCBvYnNlcnZlci5saXN0ZW5lcnMoIGksIGV2ZW50ICkgKTsKCQkJfSk7CgoJCQlyZXR1cm4gcmVzdWx0OwoJCX0sCgkJbG9hZGluZyA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCXV0aWxpdHkubG9hZGluZyggaSApOwoJCQl9KTsKCQl9LAoJCW1heCA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5Lm1heCggdGhpcyApOwoJCX0sCgkJbWVhbiA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5Lm1lYW4oIHRoaXMgKTsKCQl9LAoJCW1lZGlhbiA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5Lm1lZGlhbiggdGhpcyApOwoJCX0sCgkJbWVyZ2UgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGFycmF5Lm1lcmdlKCB0aGlzLCBhcmcgKTsKCQl9LAoJCW1pbiA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5Lm1pbiggdGhpcyApOwoJCX0sCgkJbWluZ2xlIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBhcnJheS5taW5nbGUoIHRoaXMsIGFyZyApOwoJCX0sCgkJbW9kZSA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5Lm1vZGUoIHRoaXMgKTsKCQl9LAoJCW9uIDogZnVuY3Rpb24gKCBldmVudCwgbGlzdGVuZXIsIGlkLCBzY29wZSwgc3RhdGUgKSB7CgkJCXJldHVybiBhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlvYnNlcnZlci5hZGQoIGksIGV2ZW50LCBsaXN0ZW5lciwgaWQsIHNjb3BlIHx8IGksIHN0YXRlICk7CgkJCX0pOwoJCX0sCgkJb25jZSA6IGZ1bmN0aW9uICggZXZlbnQsIGxpc3RlbmVyLCBpZCwgc2NvcGUsIHN0YXRlICkgewoJCQlyZXR1cm4gYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJb2JzZXJ2ZXIub25jZSggaSwgZXZlbnQsIGxpc3RlbmVyLCBpZCwgc2NvcGUgfHwgaSwgc3RhdGUgKTsKCQkJfSk7CgkJfSwKCQlwZXJjZW50cyA6IGZ1bmN0aW9uICggcHJlY2lzaW9uLCB0b3RhbCApIHsKCQkJcmV0dXJuIGFycmF5LnBlcmNlbnRzKCB0aGlzLCBwcmVjaXNpb24sIHRvdGFsICk7CgkJfSwKCQlwb3NpdGlvbiA6IGZ1bmN0aW9uICgpIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJcmVzdWx0LnB1c2goIGVsZW1lbnQucG9zaXRpb24oIGkgKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlwcmVwZW5kIDogZnVuY3Rpb24gKCB0eXBlLCBhcmdzICkgewoJCQl2YXIgcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXN1bHQucHVzaCggZWxlbWVudC5jcmVhdGUoIHR5cGUsIGFyZ3MsIGksICJmaXJzdCIgKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlyYW5nZSA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5LnJhbmdlKCB0aGlzICk7CgkJfSwKCQlyYXNzb2MgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGFycmF5LnJhc3NvYyggdGhpcywgYXJnICk7CgkJfSwKCQlyZWplY3QgOiBmdW5jdGlvbiAoIGZuICkgewoJCQlyZXR1cm4gYXJyYXkucmVqZWN0KCB0aGlzLCBmbiApOwoJCX0sCgkJcmVtb3ZlIDogZnVuY3Rpb24gKCBzdGFydCwgZW5kICkgewoJCQlyZXR1cm4gYXJyYXkucmVtb3ZlKCB0aGlzLCBzdGFydCwgZW5kICk7CgkJfSwKCQlyZW1vdmVJZiA6IGZ1bmN0aW9uICggZm4gKSB7CgkJCXJldHVybiBhcnJheS5yZW1vdmVJZiggdGhpcywgZm4gKTsKCQl9LAoJCXJlbW92ZVdoaWxlOiBmdW5jdGlvbiAoIGZuICkgewoJCQlyZXR1cm4gYXJyYXkucmVtb3ZlV2hpbGUoIHRoaXMsIGZuICk7CgkJfSwKCQlyZW1vdmVBdHRyIDogZnVuY3Rpb24gKCBrZXkgKSB7CgkJCWFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCWVsZW1lbnQucmVtb3ZlQXR0ciggaSwga2V5ICk7CgkJCX0pOwoKCQkJcmV0dXJuIHRoaXM7CgkJfSwKCQlyZW1vdmVDbGFzczogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQllbGVtZW50LmtsYXNzKCBpLCBhcmcsIGZhbHNlICk7CgkJCX0pOwoJCX0sCgkJcmVwbGFjZSA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gYXJyYXkucmVwbGFjZSggdGhpcywgYXJnICk7CgkJfSwKCQlyZXN0IDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBhcnJheS5yZXN0KCB0aGlzLCBhcmcgKTsKCQl9LAoJCXJpbmRleCA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gYXJyYXkucmluZGV4KCB0aGlzLCBhcmcgKTsKCQl9LAoJCXJvdGF0ZSA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gYXJyYXkucm90YXRlKCB0aGlzLCBhcmcgKTsKCQl9LAoJCXNlcmlhbGl6ZSA6IGZ1bmN0aW9uICggc3RyaW5nLCBlbmNvZGUgKSB7CgkJCXJldHVybiBlbGVtZW50LnNlcmlhbGl6ZSggdGhpcywgc3RyaW5nLCBlbmNvZGUgKTsKCQl9LAoJCXNlcmllcyA6IGZ1bmN0aW9uICggc3RhcnQsIGVuZCwgb2Zmc2V0ICkgewoJCQlyZXR1cm4gYXJyYXkuc2VyaWVzKCBzdGFydCwgZW5kLCBvZmZzZXQgKTsKCQl9LAoJCXNpemUgOiBmdW5jdGlvbiAoKSB7CgkJCXZhciByZXN1bHQgPSBbXTsKCgkJCWFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCXJlc3VsdC5wdXNoKCBlbGVtZW50LnNpemUoIGkgKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlzb3J0ZWQgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBhcnJheS5zb3J0ZWQoIHRoaXMgKTsKCQl9LAoJCXNwbGl0IDogZnVuY3Rpb24gKCBzaXplICkgewoJCQlyZXR1cm4gYXJyYXkuc3BsaXQoIHRoaXMsIHNpemUgKTsKCQl9LAoJCXN0ZGRldiA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5LnN0ZGRldiggdGhpcyApOwoJCX0sCgkJc3VtIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gYXJyYXkuc3VtKCB0aGlzICk7CgkJfSwKCQl0YWtlIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBhcnJheS50YWtlKCB0aGlzLCBhcmcgKTsKCQl9LAoJCXRleHQgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggbm9kZSApIHsKCQkJCWlmICggdHlwZW9mIG5vZGUgIT09ICJvYmplY3QiKSB7CgkJCQkJbm9kZSA9IHV0aWxpdHkub2JqZWN0KCBub2RlICk7CgkJCQl9CgoJCQkJaWYgKCB0eXBlb2Ygbm9kZS50ZXh0ID09PSAiZnVuY3Rpb24iKSB7CgkJCQkJbm9kZS50ZXh0KCBhcmcgKTsKCQkJCX0KCQkJfSk7CgkJfSwKCQl0cGwgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCXV0aWxpdHkudHBsICggYXJnLCBpICk7CgkJCX0pOwoJCX0sCgkJdG9nZ2xlQ2xhc3MgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCWVsZW1lbnQudG9nZ2xlQ2xhc3MoIGksIGFyZyApOwoJCQl9KTsKCQl9LAoJCXRvdGFsIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gYXJyYXkudG90YWwoIHRoaXMgKTsKCQl9LAoJCXRvT2JqZWN0IDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gYXJyYXkudG9PYmplY3QoIHRoaXMgKTsKCQl9LAoJCXVuIDogZnVuY3Rpb24gKCBldmVudCwgaWQsIHN0YXRlICkgewoJCQlyZXR1cm4gYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJb2JzZXJ2ZXIucmVtb3ZlKCBpLCBldmVudCwgaWQsIHN0YXRlICk7CgkJCX0pOwoJCX0sCgkJdW5pcXVlIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gYXJyYXkudW5pcXVlKCB0aGlzICk7CgkJfSwKCQl1cGRhdGUgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGFycmF5LmVhY2goIHRoaXMsIGZ1bmN0aW9uICggaSApIHsKCQkJCWVsZW1lbnQudXBkYXRlKCBpLCBhcmcgKTsKCQkJfSk7CgkJfSwKCQl2YWwgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJdmFyIGEgICAgPSBbXSwKCQkJICAgIHR5cGUgPSBudWxsLAoJCQkgICAgc2FtZSA9IHRydWU7CgoJCQlhcnJheS5lYWNoKCB0aGlzLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlpZiAoIHR5cGUgIT09IG51bGwgKSB7CgkJCQkJc2FtZSA9ICggdHlwZSA9PT0gaS50eXBlICk7CgkJCQl9CgoJCQkJdHlwZSA9IGkudHlwZTsKCgkJCQlpZiAoIHR5cGVvZiBpLnZhbCA9PT0gImZ1bmN0aW9uIiApIHsKCQkJCQlhLnB1c2goIGVsZW1lbnQudmFsKCBpLCBhcmcgKSApOwoJCQkJfQoJCQl9KTsKCgkJCXJldHVybiBzYW1lID8gYVswXSA6IGE7CgkJfSwKCQl2YWxpZGF0ZSA6IGZ1bmN0aW9uICgpIHsKCQkJdmFyIHJlc3VsdCA9IFtdOwoKCQkJYXJyYXkuZWFjaCggdGhpcywgZnVuY3Rpb24gKCBpICkgewoJCQkJcmVzdWx0LnB1c2goIGVsZW1lbnQudmFsaWRhdGUoIGkgKSApOwoJCQl9KTsKCgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQl2YXJpYW5jZSA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGFycmF5LnZhcmlhbmNlKCB0aGlzICk7CgkJfSwKCQl6aXAgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBhcnJheS56aXAoIHRoaXMsIGFyZ3VtZW50cyApOwoJCX0KCX0sCgkvLyBFbGVtZW50LnByb3RvdHlwZQoJZWxlbWVudCA6IHsKCQlhZGRDbGFzcyA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gZWxlbWVudC5rbGFzcyggdGhpcywgYXJnLCB0cnVlICk7CgkJfSwKCQlhZnRlciA6IGZ1bmN0aW9uICggdHlwZSwgYXJncyApIHsKCQkJcmV0dXJuIGVsZW1lbnQuY3JlYXRlKCB0eXBlLCBhcmdzLCB0aGlzLCAiYWZ0ZXIiICk7CgkJfSwKCQlhcHBlbmQgOiBmdW5jdGlvbiAoIHR5cGUsIGFyZ3MgKSB7CgkJCXJldHVybiBlbGVtZW50LmNyZWF0ZSggdHlwZSwgYXJncywgdGhpcywgImxhc3QiICk7CgkJfSwKCQlhdHRyIDogZnVuY3Rpb24gKCBrZXksIHZhbHVlICkgewoJCQlyZXR1cm4gZWxlbWVudC5hdHRyKCB0aGlzLCBrZXksIHZhbHVlICk7CgkJfSwKCQliZWZvcmUgOiBmdW5jdGlvbiAoIHR5cGUsIGFyZ3MgKSB7CgkJCXJldHVybiBlbGVtZW50LmNyZWF0ZSggdHlwZSwgYXJncywgdGhpcywgImJlZm9yZSIgKTsKCQl9LAoJCWNsZWFyIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gZWxlbWVudC5jbGVhciggdGhpcyApOwoJCX0sCgkJY3JlYXRlIDogZnVuY3Rpb24gKCB0eXBlLCBhcmdzLCBwb3NpdGlvbiApIHsKCQkJcmV0dXJuIGVsZW1lbnQuY3JlYXRlKCB0eXBlLCBhcmdzLCB0aGlzLCBwb3NpdGlvbiApOwoJCX0sCgkJY3NzIDogZnVuY3Rpb24gKCBrZXksIHZhbHVlICkgewoJCQlyZXR1cm4gZWxlbWVudC5jc3MoIHRoaXMsIGtleSwgdmFsdWUgKTsKCQl9LAoJCWRhdGEgOiBmdW5jdGlvbiAoIGtleSwgdmFsdWUgKSB7CgkJCXJldHVybiBlbGVtZW50LmRhdGEoIHRoaXMsIGtleSwgdmFsdWUgKTsKCQl9LAoJCWRlc3Ryb3kgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBlbGVtZW50LmRlc3Ryb3koIHRoaXMgKTsKCQl9LAoJCWRpc2FibGUgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBlbGVtZW50LmRpc2FibGUoIHRoaXMgKTsKCQl9LAoJCWRpc3BhdGNoIDogZnVuY3Rpb24gKCBldmVudCwgZGF0YSwgYnViYmxlcywgY2FuY2VsYWJsZSApIHsKCQkJcmV0dXJuIGVsZW1lbnQuZGlzcGF0Y2goIHRoaXMsIGV2ZW50LCBkYXRhLCBidWJibGVzLCBjYW5jZWxhYmxlICk7CgkJfSwKCQllbmFibGUgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBlbGVtZW50LmVuYWJsZSggdGhpcyApOwoJCX0sCgkJZmluZCA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gZWxlbWVudC5maW5kKCB0aGlzLCBhcmcgKTsKCQl9LAoJCWZpcmUgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBvYnNlcnZlci5maXJlLmFwcGx5KCBvYnNlcnZlciwgW3RoaXNdLmNvbmNhdCggYXJyYXkuY2FzdCggYXJndW1lbnRzICkgKSApOwoJCX0sCgkJZ2VuSWQgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiB1dGlsaXR5LmdlbklkKCB0aGlzICk7CgkJfSwKCQlnZXQgOiBmdW5jdGlvbiAoIHVyaSwgc3VjY2VzcywgZmFpbHVyZSwgaGVhZGVycywgdGltZW91dCApIHsKCQkJdmFyIHNlbGYgID0gdGhpcywKCQkJICAgIGRlZmVyID0gZGVmZXJyZWQoKTsKCgkJCWRlZmVyLnRoZW4oIGZ1bmN0aW9uICggYXJnICkgewoJCQkJZWxlbWVudC5odG1sKCBzZWxmLCBhcmcgKTsKCQkJCW9ic2VydmVyLmZpcmUoIHNlbGYsICJhZnRlckdldCIgKTsKCgkJCQlpZiAoIHR5cGVvZiBzdWNjZXNzID09PSAiZnVuY3Rpb24iKSB7CgkJCQkJc3VjY2Vzcy5jYWxsKCBzZWxmLCBhcmcgKTsKCQkJCX0KCQkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJZWxlbWVudC5odG1sKCBzZWxmLCBlIHx8IGxhYmVsLmVycm9yLnNlcnZlckVycm9yICk7CgkJCQlvYnNlcnZlci5maXJlKCBzZWxmLCAiZmFpbGVkR2V0IiApOwoKCQkJCWlmICggdHlwZW9mIGZhaWx1cmUgPT09ICJmdW5jdGlvbiIpIHsKCQkJCQlmYWlsdXJlLmNhbGwoIHNlbGYsIGUgKTsKCQkJCX0KCgkJCQl0aHJvdyBlOwoJCQl9KTsKCgkJCW9ic2VydmVyLmZpcmUoIHRoaXMsICJiZWZvcmVHZXQiICk7CgoJCQl1cmkuZ2V0KCBmdW5jdGlvbiAoIGFyZyApIHsKCQkJCWRlZmVyLnJlc29sdmUoIGFyZyApOwoJCQl9LCBmdW5jdGlvbiAoIGUgKSB7CgkJCQlkZWZlci5yZWplY3QoIGUgKTsKCQkJfSwgaGVhZGVycywgdGltZW91dCk7CgoJCQlyZXR1cm4gZGVmZXI7CgkJfSwKCQloYXMgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGVsZW1lbnQuaGFzKCB0aGlzLCBhcmcgKTsKCQl9LAoJCWhhc0NsYXNzIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBlbGVtZW50Lmhhc0NsYXNzKCB0aGlzLCBhcmcgKTsKCQl9LAoJCWh0bWwgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGVsZW1lbnQuaHRtbCggdGhpcywgYXJnICk7CgkJfSwKCQlpcyA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gZWxlbWVudC5pcyggdGhpcywgYXJnICk7CgkJfSwKCQlpc0FscGhhTnVtIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gZWxlbWVudC5pc0FscGhhTnVtKCB0aGlzICk7CgkJfSwKCQlpc0Jvb2xlYW4gOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBlbGVtZW50LmlzQm9vbGVhbiggdGhpcyApOwoJCX0sCgkJaXNDaGVja2VkIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gZWxlbWVudC5pc0NoZWNrZWQoIHRoaXMgKTsKCQl9LAoJCWlzRGF0ZSA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGVsZW1lbnQuaXNEYXRlKCB0aGlzICk7CgkJfSwKCQlpc0Rpc2FibGVkIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gZWxlbWVudC5pc0Rpc2FibGVkKCB0aGlzICk7CgkJfSwKCQlpc0RvbWFpbiA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGVsZW1lbnQuaXNEb21haW4oIHRoaXMgKTsKCQl9LAoJCWlzRW1haWwgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBlbGVtZW50LmlzRW1haWwoIHRoaXMgKTsKCQl9LAoJCWlzRW1wdHkgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBlbGVtZW50LmlzRW1wdHkoIHRoaXMgKTsKCQl9LAoJCWlzSGlkZGVuIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gZWxlbWVudC5oaWRkZW4oIHRoaXMgKTsKCQl9LAoJCWlzSVAgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBlbGVtZW50LmlzSVAoIHRoaXMgKTsKCQl9LAoJCWlzSW50IDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gZWxlbWVudC5pc0ludCggdGhpcyApOwoJCX0sCgkJaXNOdW1iZXIgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBlbGVtZW50LmlzTnVtYmVyKCB0aGlzICk7CgkJfSwKCQlpc1Bob25lIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gZWxlbWVudC5pc1Bob25lKCB0aGlzICk7CgkJfSwKCQlpc1VybCA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGVsZW1lbnQuaXNVcmwoIHRoaXMgKTsKCQl9LAoJCWpzb25wIDogZnVuY3Rpb24gKCB1cmksIHByb3BlcnR5LCBjYWxsYmFjayApIHsKCQkJdmFyIHRhcmdldCA9IHRoaXMsCgkJCSAgICBhcmcgICAgPSBwcm9wZXJ0eTsKCgkJCXJldHVybiBjbGllbnQuanNvbnAoIHVyaSwgZnVuY3Rpb24gKCByZXNwb25zZSApIHsKCQkJCXZhciBzZWxmID0gdGFyZ2V0LAoJCQkJICAgIG5vZGUgPSByZXNwb25zZSwKCQkJCSAgICBwcm9wID0gYXJnLAoJCQkJICAgIHJlc3VsdDsKCgkJCQl0cnkgewoJCQkJCWlmICggcHJvcCAhPT0gdW5kZWZpbmVkICkgewoJCQkJCQlwcm9wID0gcHJvcC5yZXBsYWNlKCAvXF18J3wiL2cgLCAiIiApLnJlcGxhY2UoIC9cLi9nLCAiWyIgKS5zcGxpdCggIlsiICk7CgoJCQkJCQlwcm9wLmVhY2goIGZ1bmN0aW9uICggaSApIHsKCQkJCQkJCW5vZGUgPSBub2RlWyEhaXNOYU4oIGkgKSA/IGkgOiBudW1iZXIucGFyc2UoIGksIDEwICldOwoKCQkJCQkJCWlmICggbm9kZSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IucHJvcGVydHlOb3RGb3VuZCApOwoJCQkJCQkJfQoJCQkJCQl9KTsKCgkJCQkJCXJlc3VsdCA9IG5vZGU7CgkJCQkJfQoJCQkJCWVsc2UgewoJCQkJCQlyZXN1bHQgPSByZXNwb25zZTsKCQkJCQl9CgkJCQl9CgkJCQljYXRjaCAoIGUgKSB7CgkJCQkJcmVzdWx0ID0gbGFiZWwuZXJyb3Iuc2VydmVyRXJyb3I7CgkJCQkJdXRpbGl0eS5lcnJvciggZSwgYXJndW1lbnRzLCB0aGlzICk7CgkJCQl9CgoJCQkJZWxlbWVudC5odG1sKCBzZWxmLCByZXN1bHQgKTsKCQkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJZWxlbWVudC5odG1sKCB0YXJnZXQsIGxhYmVsLmVycm9yLnNlcnZlckVycm9yICk7CgoJCQkJdGhyb3cgZTsKCQkJfSwgY2FsbGJhY2sgKTsKCQl9LAoJCWxpc3RlbmVycyA6IGZ1bmN0aW9uICggZXZlbnQgKSB7CgkJCXJldHVybiBvYnNlcnZlci5saXN0KCB0aGlzLCBldmVudCApOwoJCX0sCgkJbG9hZGluZyA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIHV0aWxpdHkubG9hZGluZyggdGhpcyApOwoJCX0sCgkJb24gOiBmdW5jdGlvbiAoIGV2ZW50LCBsaXN0ZW5lciwgaWQsIHNjb3BlLCBzdGF0ZSApIHsKCQkJcmV0dXJuIG9ic2VydmVyLmFkZCggIHRoaXMsIGV2ZW50LCBsaXN0ZW5lciwgaWQsIHNjb3BlIHx8IHRoaXMsIHN0YXRlICk7CgkJfSwKCQlvbmNlIDogZnVuY3Rpb24gKCBldmVudCwgbGlzdGVuZXIsIGlkLCBzY29wZSwgc3RhdGUgKSB7CgkJCXJldHVybiBvYnNlcnZlci5vbmNlKCB0aGlzLCBldmVudCwgbGlzdGVuZXIsIGlkLCBzY29wZSB8fCB0aGlzLCBzdGF0ZSApOwoJCX0sCgkJcHJlcGVuZCA6IGZ1bmN0aW9uICggdHlwZSwgYXJncyApIHsKCQkJcmV0dXJuIGVsZW1lbnQuY3JlYXRlKCB0eXBlLCBhcmdzLCB0aGlzLCAiZmlyc3QiICk7CgkJfSwKCQlwcmVwZW5kQ2hpbGQgOiBmdW5jdGlvbiAoIGNoaWxkICkgewoJCQlyZXR1cm4gZWxlbWVudC5wcmVwZW5kQ2hpbGQoIHRoaXMsIGNoaWxkICk7CgkJfSwKCQlwb3NpdGlvbiA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGVsZW1lbnQucG9zaXRpb24oIHRoaXMgKTsKCQl9LAoJCXJlbW92ZUF0dHIgOiBmdW5jdGlvbiAoIGtleSApIHsKCQkJcmV0dXJuIGVsZW1lbnQucmVtb3ZlQXR0ciggdGhpcywga2V5ICk7CgkJfSwKCQlyZW1vdmVDbGFzcyA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gZWxlbWVudC5rbGFzcyggdGhpcywgYXJnLCBmYWxzZSApOwoJCX0sCgkJc2Nyb2xsVG8gIDogZnVuY3Rpb24gKCBtcyApIHsKCQkJcmV0dXJuIGVsZW1lbnQuc2Nyb2xsVG8oIHRoaXMsIG1zICk7CgkJfSwKCQlzZXJpYWxpemUgOiBmdW5jdGlvbiAoIHN0cmluZywgZW5jb2RlICkgewoJCQlyZXR1cm4gZWxlbWVudC5zZXJpYWxpemUoIHRoaXMsIHN0cmluZywgZW5jb2RlICk7CgkJfSwKCQlzaXplIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gZWxlbWVudC5zaXplKCB0aGlzICk7CgkJfSwKCQl0ZXh0IDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBlbGVtZW50LnRleHQoIHRoaXMsIGFyZyApOwoJCX0sCgkJdG9nZ2xlQ2xhc3MgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIGVsZW1lbnQudG9nZ2xlQ2xhc3MoIHRoaXMsIGFyZyApOwoJCX0sCgkJdHBsIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiB1dGlsaXR5LnRwbCggYXJnLCB0aGlzICk7CgkJfSwKCQl1biA6IGZ1bmN0aW9uICggZXZlbnQsIGlkLCBzdGF0ZSApIHsKCQkJcmV0dXJuIG9ic2VydmVyLnJlbW92ZSggdGhpcywgZXZlbnQsIGlkLCBzdGF0ZSApOwoJCX0sCgkJdXBkYXRlIDogZnVuY3Rpb24gKCBhcmdzICkgewoJCQlyZXR1cm4gZWxlbWVudC51cGRhdGUoIHRoaXMsIGFyZ3MgKTsKCQl9LAoJCXZhbCA6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gZWxlbWVudC52YWwoIHRoaXMsIGFyZyApOwoJCX0sCgkJdmFsaWRhdGUgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBlbGVtZW50LnZhbGlkYXRlKCB0aGlzICk7CgkJfQoJfSwKCS8vIEZ1bmN0aW9uLnByb3RvdHlwZQoJImZ1bmN0aW9uIjogewoJCXJlZmxlY3QgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiB1dGlsaXR5LnJlZmxlY3QoIHRoaXMgKTsKCQl9LAoJCWRlYm91bmNlIDogZnVuY3Rpb24gKCBtcyApIHsKCQkJcmV0dXJuIHV0aWxpdHkuZGVib3VuY2UoIHRoaXMsIG1zICk7CgkJfQoJfSwKCS8vIE1hdGgKCW1hdGggOiB7CgkJYmV6aWVyIDogbWF0aC5iZXppZXIsCgkJZGlzdCAgIDogbWF0aC5kaXN0LAoJCXNxciAgICA6IG1hdGguc3FyCgl9LAoJLy8gTnVtYmVyLnByb3RvdHlwZQoJbnVtYmVyIDogewoJCWRpZmYgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIG51bWJlci5kaWZmKCB0aGlzLCBhcmcgKTsKCQl9LAoJCWZpcmUgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBvYnNlcnZlci5maXJlLmFwcGx5KCBvYnNlcnZlciwgW3RoaXMudG9TdHJpbmcoKV0uY29uY2F0KCBhcnJheS5jYXN0KCBhcmd1bWVudHMgKSApICk7CgkJfSwKCQlmb3JtYXQgOiBmdW5jdGlvbiAoIGRlbGltaXRlciwgZXZlcnkgKSB7CgkJCXJldHVybiBudW1iZXIuZm9ybWF0KCB0aGlzLCBkZWxpbWl0ZXIsIGV2ZXJ5ICk7CgkJfSwKCQloYWxmIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBudW1iZXIuaGFsZiggdGhpcywgYXJnICk7CgkJfSwKCQlpc0V2ZW4gOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBudW1iZXIuZXZlbiggdGhpcyApOwoJCX0sCgkJaXNPZGQgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBudW1iZXIub2RkKCB0aGlzICk7CgkJfSwKCQlsaXN0ZW5lcnMgOiBmdW5jdGlvbiAoIGV2ZW50ICkgewoJCQlyZXR1cm4gb2JzZXJ2ZXIubGlzdCggdGhpcy50b1N0cmluZygpLCBldmVudCApOwoJCX0sCgkJb24gOiBmdW5jdGlvbiAoIGV2ZW50LCBsaXN0ZW5lciwgaWQsIHNjb3BlLCBzdGF0ZSApIHsKCQkJb2JzZXJ2ZXIuYWRkKCAgdGhpcy50b1N0cmluZygpLCBldmVudCwgbGlzdGVuZXIsIGlkLCBzY29wZSB8fCB0aGlzLCBzdGF0ZSApOwoKCQkJcmV0dXJuIHRoaXM7CgkJfSwKCQlvbmNlIDogZnVuY3Rpb24gKCBldmVudCwgbGlzdGVuZXIsIGlkLCBzY29wZSwgc3RhdGUgKSB7CgkJCW9ic2VydmVyLm9uY2UoIHRoaXMudG9TdHJpbmcoKSwgZXZlbnQsIGxpc3RlbmVyLCBpZCwgc2NvcGUgfHwgdGhpcywgc3RhdGUgKTsKCgkJCXJldHVybiB0aGlzOwoJCX0sCgkJcmFuZG9tIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gbnVtYmVyLnJhbmRvbSggdGhpcyApOwoJCX0sCgkJcm91bmQgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBudW1iZXIucm91bmQoIHRoaXMgKTsKCQl9LAoJCXJvdW5kRG93biA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIG51bWJlci5yb3VuZCggdGhpcywgImRvd24iICk7CgkJfSwKCQlyb3VuZFVwIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gbnVtYmVyLnJvdW5kKCB0aGlzLCAidXAiICk7CgkJfSwKCQl1biA6IGZ1bmN0aW9uICggZXZlbnQsIGlkLCBzdGF0ZSApIHsKCQkJb2JzZXJ2ZXIucmVtb3ZlKCB0aGlzLnRvU3RyaW5nKCksIGV2ZW50LCBpZCwgc3RhdGUgKTsKCgkJCXJldHVybiB0aGlzOwoJCX0KCX0sCgkvLyBTdHJpbmcucHJvdG90eXBlCglzdHJpbmcgOiB7CgkJYWxsb3dzIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBjbGllbnQuYWxsb3dzKCB0aGlzLCBhcmcgKTsKCQl9LAoJCWNhcGl0YWxpemU6IGZ1bmN0aW9uICggYXJnICkgewoJCQlyZXR1cm4gc3RyaW5nLmNhcGl0YWxpemUoIHRoaXMsIGFyZyApOwoJCX0sCgkJZGVsIDogZnVuY3Rpb24gKCBzdWNjZXNzLCBmYWlsdXJlLCBoZWFkZXJzICkgewoJCQlyZXR1cm4gY2xpZW50LnJlcXVlc3QoIHRoaXMsICJERUxFVEUiLCBzdWNjZXNzLCBmYWlsdXJlLCBudWxsLCBoZWFkZXJzICk7CgkJfSwKCQllc2NhcGUgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBzdHJpbmcuZXNjYXBlKCB0aGlzICk7CgkJfSwKCQlleHBpcmUgOiBmdW5jdGlvbiAoIHNpbGVudCApIHsKCQkJcmV0dXJuIGNhY2hlLmV4cGlyZSggdGhpcywgc2lsZW50ICk7CgkJfSwKCQlleHBsb2RlIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJCXJldHVybiBzdHJpbmcuZXhwbG9kZSggdGhpcywgYXJnICk7CgkJfSwKCQlmaXJlIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gb2JzZXJ2ZXIuZmlyZS5hcHBseSggb2JzZXJ2ZXIsIFt0aGlzXS5jb25jYXQoIGFycmF5LmNhc3QoIGFyZ3VtZW50cyApICkgKTsKCQl9LAoJCWdldCA6IGZ1bmN0aW9uICggc3VjY2VzcywgZmFpbHVyZSwgaGVhZGVycyApIHsKCQkJcmV0dXJuIGNsaWVudC5yZXF1ZXN0KCB0aGlzLCAiR0VUIiwgc3VjY2VzcywgZmFpbHVyZSwgbnVsbCwgaGVhZGVycyApOwoJCX0sCgkJaGVhZGVycyA6IGZ1bmN0aW9uICggc3VjY2VzcywgZmFpbHVyZSApIHsKCQkJcmV0dXJuIGNsaWVudC5yZXF1ZXN0KCB0aGlzLCAiSEVBRCIsIHN1Y2Nlc3MsIGZhaWx1cmUgKTsKCQl9LAoJCWh5cGhlbmF0ZSA6IGZ1bmN0aW9uICggY2FtZWwgKSB7CgkJCXJldHVybiBzdHJpbmcuaHlwaGVuYXRlKCB0aGlzLCBjYW1lbCApOwoJCX0sCgkJaXNBbHBoYU51bSA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIHN0cmluZy5pc0FscGhhTnVtKCB0aGlzICk7CgkJfSwKCQlpc0Jvb2xlYW4gOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBzdHJpbmcuaXNCb29sZWFuKCB0aGlzICk7CgkJfSwKCQlpc0RhdGUgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBzdHJpbmcuaXNEYXRlKCB0aGlzICk7CgkJfSwKCQlpc0RvbWFpbiA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIHN0cmluZy5pc0RvbWFpbiggdGhpcyApOwoJCX0sCgkJaXNFbWFpbCA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIHN0cmluZy5pc0VtYWlsKCB0aGlzICk7CgkJfSwKCQlpc0VtcHR5IDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gc3RyaW5nLmlzRW1wdHkoIHRoaXMgKTsKCQl9LAoJCWlzSVAgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBzdHJpbmcuaXNJUCggdGhpcyApOwoJCX0sCgkJaXNJbnQgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBzdHJpbmcuaXNJbnQoIHRoaXMgKTsKCQl9LAoJCWlzTnVtYmVyIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gc3RyaW5nLmlzTnVtYmVyKCB0aGlzICk7CgkJfSwKCQlpc1Bob25lIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gc3RyaW5nLmlzUGhvbmUoIHRoaXMgKTsKCQl9LAoJCWlzVXJsIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gc3RyaW5nLmlzVXJsKCB0aGlzICk7CgkJfSwKCQlqc29ucCA6IGZ1bmN0aW9uICggc3VjY2VzcywgZmFpbHVyZSwgY2FsbGJhY2sgKSB7CgkJCXJldHVybiBjbGllbnQuanNvbnAoIHRoaXMsIHN1Y2Nlc3MsIGZhaWx1cmUsIGNhbGxiYWNrICk7CgkJfSwKCQlsaXN0ZW5lcnMgOiBmdW5jdGlvbiAoIGV2ZW50ICkgewoJCQlyZXR1cm4gb2JzZXJ2ZXIubGlzdCggdGhpcywgZXZlbnQgKTsKCQl9LAoJCXBhdGNoIDogZnVuY3Rpb24gKCBzdWNjZXNzLCBmYWlsdXJlLCBhcmdzLCBoZWFkZXJzICkgewoJCQlyZXR1cm4gY2xpZW50LnJlcXVlc3QoIHRoaXMsICJQQVRDSCIsIHN1Y2Nlc3MsIGZhaWx1cmUsIGFyZ3MsIGhlYWRlcnMgKTsKCQl9LAoJCXBvc3QgOiBmdW5jdGlvbiAoIHN1Y2Nlc3MsIGZhaWx1cmUsIGFyZ3MsIGhlYWRlcnMgKSB7CgkJCXJldHVybiBjbGllbnQucmVxdWVzdCggdGhpcywgIlBPU1QiLCBzdWNjZXNzLCBmYWlsdXJlLCBhcmdzLCBoZWFkZXJzICk7CgkJfSwKCQlwdXQgOiBmdW5jdGlvbiAoIHN1Y2Nlc3MsIGZhaWx1cmUsIGFyZ3MsIGhlYWRlcnMgKSB7CgkJCXJldHVybiBjbGllbnQucmVxdWVzdCggdGhpcywgIlBVVCIsIHN1Y2Nlc3MsIGZhaWx1cmUsIGFyZ3MsIGhlYWRlcnMgKTsKCQl9LAoJCW9uIDogZnVuY3Rpb24gKCBldmVudCwgbGlzdGVuZXIsIGlkLCBzY29wZSwgc3RhdGUgKSB7CgkJCXJldHVybiBvYnNlcnZlci5hZGQoIHRoaXMsIGV2ZW50LCBsaXN0ZW5lciwgaWQsIHNjb3BlLCBzdGF0ZSApOwoJCX0sCgkJb25jZSA6IGZ1bmN0aW9uICggZXZlbnQsIGxpc3RlbmVyLCBpZCwgc2NvcGUsIHN0YXRlICkgewoJCQlyZXR1cm4gb2JzZXJ2ZXIuYWRkKCB0aGlzLCBldmVudCwgbGlzdGVuZXIsIGlkLCBzY29wZSwgc3RhdGUgKTsKCQl9LAoJCW9wdGlvbnMgOiBmdW5jdGlvbiAoIHN1Y2Nlc3MsIGZhaWx1cmUgKSB7CgkJCXJldHVybiBjbGllbnQucmVxdWVzdCggdGhpcywgIk9QVElPTlMiLCBzdWNjZXNzLCBmYWlsdXJlICk7CgkJfSwKCQlwZXJtaXNzaW9ucyA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGNsaWVudC5wZXJtaXNzaW9ucyggdGhpcyApOwoJCX0sCgkJc2luZ3VsYXIgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBzdHJpbmcuc2luZ3VsYXIoIHRoaXMgKTsKCQl9LAoJCXRvQ2FtZWxDYXNlIDogZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gc3RyaW5nLnRvQ2FtZWxDYXNlKCB0aGlzICk7CgkJfSwKCQl0b051bWJlciA6IGZ1bmN0aW9uICggYmFzZSApIHsKCQkJcmV0dXJuIG51bWJlci5wYXJzZSggdGhpcywgYmFzZSApOwoJCX0sCgkJdHJpbSA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIHN0cmluZy50cmltKCB0aGlzICk7CgkJfSwKCQl1biA6IGZ1bmN0aW9uICggZXZlbnQsIGlkLCBzdGF0ZSApIHsKCQkJcmV0dXJuIG9ic2VydmVyLnJlbW92ZSggdGhpcywgZXZlbnQsIGlkLCBzdGF0ZSApOwoJCX0sCgkJdW5DYW1lbENhc2UgOiBmdW5jdGlvbiAoKSB7CgkJCXJldHVybiBzdHJpbmcudW5DYW1lbENhc2UoIHRoaXMgKTsKCQl9LAoJCXVuY2FwaXRhbGl6ZSA6IGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIHN0cmluZy51bmNhcGl0YWxpemUoIHRoaXMgKTsKCQl9LAoJCXVuaHlwaGVuYXRlOiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmV0dXJuIHN0cmluZy51bmh5cGhlbmF0ZSggdGhpcywgYXJnICk7CgkJfQoJfQp9OwoKLyoqIEBuYW1lc3BhY2Ugc3RhdGUgKi8KdmFyIHN0YXRlID0gKCBmdW5jdGlvbiAoKSB7Cgl2YXIgcHJvcCA9IHtjdXJyZW50OiAiYWN0aXZlIiwgcHJldmlvdXM6IG51bGwsIGhlYWRlcjogbnVsbH0sCgkgICAgZ2V0Q3VycmVudCwgc2V0Q3VycmVudCwgZ2V0SGVhZGVyLCBzZXRIZWFkZXIsIGdldFByZXZpb3VzLCBzZXRQcmV2aW91czsKCgkvKioKCSAqIEdldHMgY3VycmVudCBhcHBsaWNhdGlvbiBzdGF0ZQoJICoKCSAqIEBtZXRob2QgZ2V0Q3VycmVudAoJICogQHByaXZhdGUKCSAqIEByZXR1cm4ge1N0cmluZ30gQXBwbGljYXRpb24gc3RhdGUKCSAqLwoJZ2V0Q3VycmVudCA9IGZ1bmN0aW9uICgpIHsKCQlyZXR1cm4gcHJvcC5jdXJyZW50OwoJfTsKCgkvKioKCSAqIFNldHMgY3VycmVudCBhcHBsaWNhdGlvbiBzdGF0ZQoJICoKCSAqIEBtZXRob2Qgc2V0Q3VycmVudAoJICogQHByaXZhdGUKCSAqIEBwYXJhbSAge1N0cmluZ30gYXJnIE5ldyBhcHBsaWNhdGlvbiBzdGF0ZQoJICogQHJldHVybiB7U3RyaW5nfSAgICAgQXBwbGljYXRpb24gc3RhdGUKCSAqLwoJc2V0Q3VycmVudCA9IGZ1bmN0aW9uICggYXJnICkgewoJCWlmICggYXJnID09PSBudWxsIHx8IHR5cGVvZiBhcmcgIT09ICJzdHJpbmciIHx8IHByb3BbMF0gPT09IGFyZyB8fCBzdHJpbmcuaXNFbXB0eSggYXJnICkgKSB7CgkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCX0KCgkJcHJvcC5wcmV2aW91cyA9IHByb3AuY3VycmVudDsKCQlwcm9wLmN1cnJlbnQgID0gYXJnOwoKCQlvYnNlcnZlci5maXJlKCBhYmFhc28sICJzdGF0ZSIsIGFyZyApOwoKCQlyZXR1cm4gYXJnOwoJfTsKCgkvKioKCSAqIEdldHMgY3VycmVudCBhcHBsaWNhdGlvbiBzdGF0ZSBoZWFkZXIKCSAqCgkgKiBAbWV0aG9kIGdldEhlYWRlcgoJICogQHByaXZhdGUKCSAqIEByZXR1cm4ge1N0cmluZ30gQXBwbGljYXRpb24gc3RhdGUgaGVhZGVyCgkgKi8KCWdldEhlYWRlciA9IGZ1bmN0aW9uICgpIHsKCQlyZXR1cm4gcHJvcC5oZWFkZXI7Cgl9OwoKCS8qKgoJICogU2V0cyBjdXJyZW50IGFwcGxpY2F0aW9uIHN0YXRlIGhlYWRlcgoJICoKCSAqIEBtZXRob2Qgc2V0SGVhZGVyCgkgKiBAcHJpdmF0ZQoJICogQHBhcmFtICB7U3RyaW5nfSBhcmcgTmV3IGFwcGxpY2F0aW9uIHN0YXRlIGhlYWRlcgoJICogQHJldHVybiB7U3RyaW5nfSAgICAgQXBwbGljYXRpb24gc3RhdGUgaGVhZGVyCgkgKi8KCXNldEhlYWRlciA9IGZ1bmN0aW9uICggYXJnICkgewoJCWlmICggYXJnICE9PSBudWxsICYmICggdHlwZW9mIGFyZyAhPT0gInN0cmluZyIgfHwgcHJvcC5oZWFkZXIgPT09IGFyZyB8fCBzdHJpbmcuaXNFbXB0eSggYXJnICkgKSApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJfQoKCQlwcm9wLmhlYWRlciA9IGFyZzsKCgkJcmV0dXJuIGFyZzsKCX07CgoJLyoqCgkgKiBHZXRzIHByZXZpb3VzIGFwcGxpY2F0aW9uIHN0YXRlCgkgKgoJICogQG1ldGhvZCBnZXRQcmV2aW91cwoJICogQHByaXZhdGUKCSAqIEByZXR1cm4ge1N0cmluZ30gUHJldmlvdXMgYXBwbGljYXRpb24gc3RhdGUKCSAqLwoJZ2V0UHJldmlvdXMgPSBmdW5jdGlvbiAoKSB7CgkJcmV0dXJuIHByb3AucHJldmlvdXM7Cgl9OwoKCS8qKgoJICogRXhpc3RzIGJlY2F1c2UgeW91IGNhbid0IG1peCBhY2Nlc3NvciAmIGRhdGEgZGVzY3JpcHRvcnMKCSAqCgkgKiBAbWV0aG9kIHNldFByZXZpb3VzCgkgKiBAcHJpdmF0ZQoJICogQHJldHVybiB7VW5kZWZpbmVkfSB1bmRlZmluZWQKCSAqLwoJc2V0UHJldmlvdXMgPSBmdW5jdGlvbiAoKSB7CgkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5yZWFkT25seSApOwoJfTsKCgkvLyBpbnRlcmZhY2UKCXJldHVybiB7CgkJZ2V0Q3VycmVudCAgOiBnZXRDdXJyZW50LAoJCXNldEN1cnJlbnQgIDogc2V0Q3VycmVudCwKCQlnZXRIZWFkZXIgICA6IGdldEhlYWRlciwKCQlzZXRIZWFkZXIgICA6IHNldEhlYWRlciwKCQlnZXRQcmV2aW91cyA6IGdldFByZXZpb3VzLAoJCXNldFByZXZpb3VzIDogc2V0UHJldmlvdXMKCX07Cn0pKCk7CgovKiogQG5hbWVzcGFjZSBzdHJpbmcgKi8KdmFyIHN0cmluZyA9IHsKCS8qKgoJICogQ2FwaXRhbGl6ZXMgdGhlIFN0cmluZwoJICoKCSAqIEBtZXRob2QgY2FwaXRhbGl6ZQoJICogQHBhcmFtICB7U3RyaW5nfSAgb2JqIFN0cmluZyB0byBjYXBpdGFsaXplCgkgKiBAcGFyYW0gIHtCb29sZWFufSBhbGwgW09wdGlvbmFsXSBDYXBpdGFsaXplIGVhY2ggd29yZAoJICogQHJldHVybiB7U3RyaW5nfSAgICAgIENhcGl0YWxpemVkIFN0cmluZwoJICovCgljYXBpdGFsaXplIDogZnVuY3Rpb24gKCBvYmosIGFsbCApIHsKCQlhbGwgPSAoIGFsbCA9PT0gdHJ1ZSApOwoKCQl2YXIgcmVzdWx0OwoKCQlpZiAoIGFsbCApIHsKCQkJcmVzdWx0ID0gc3RyaW5nLmV4cGxvZGUoIG9iaiwgIiAiICkubWFwKCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXR1cm4gaS5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgaS5zbGljZSggMSApOwoJCQl9KS5qb2luKCIgIik7CgkJfQoJCWVsc2UgewoJCQlyZXN1bHQgPSBvYmouY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArIG9iai5zbGljZSggMSApOwoJCX0KCgkJcmV0dXJuIHJlc3VsdDsKCX0sCgoJLyoqCgkgKiBFc2NhcGVzIG1ldGEgY2hhcmFjdGVycyB3aXRoaW4gYSBzdHJpbmcKCSAqCgkgKiBAbWV0aG9kIGVzY2FwZQoJICogQHBhcmFtICB7U3RyaW5nfSBvYmogU3RyaW5nIHRvIGVzY2FwZQoJICogQHJldHVybiB7U3RyaW5nfSAgICAgRXNjYXBlZCBzdHJpbmcKCSAqLwoJZXNjYXBlIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5yZXBsYWNlKCAvW1wtXFtcXXt9KCkqKz8uLFxcXF5cJHwjXHNdL2csICJcXCQmIiApOwoJfSwKCgkvKioKCSAqIFNwbGl0cyBhIHN0cmluZyBvbiBjb21tYSwgb3IgYSBwYXJhbWV0ZXIsIGFuZCB0cmltcyBlYWNoIHZhbHVlIGluIHRoZSByZXN1bHRpbmcgQXJyYXkKCSAqCgkgKiBAbWV0aG9kIGV4cGxvZGUKCSAqIEBwYXJhbSAge1N0cmluZ30gb2JqIFN0cmluZyB0byBjYXBpdGFsaXplCgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyBTdHJpbmcgdG8gc3BsaXQgb24KCSAqIEByZXR1cm4ge0FycmF5fSAgICAgIEFycmF5IG9mIHRoZSBleHBsb2RlZCBTdHJpbmcKCSAqLwoJZXhwbG9kZSA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJYXJnID0gYXJnIHx8ICIsIjsKCgkJcmV0dXJuIHN0cmluZy50cmltKCBvYmogKS5zcGxpdCggbmV3IFJlZ0V4cCggIlxccyoiICsgYXJnICsgIlxccyoiICkgKTsKCX0sCgoJLyoqCgkgKiBSZXBsYWNlcyBhbGwgc3BhY2VzIGluIGEgc3RyaW5nIHdpdGggZGFzaGVzCgkgKgoJICogQG1ldGhvZCBoeXBoZW5hdGUKCSAqIEBwYXJhbSAge1N0cmluZ30gb2JqICAgU3RyaW5nIHRvIGh5cGhlbmF0ZQoJICogQHBhcmFtIHtCb29sZWFufSBjYW1lbCBbT3B0aW9uYWxdIEh5cGhlbmF0ZSBjYW1lbENhc2UKCSAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgU3RyaW5nIHdpdGggZGFzaGVzIGluc3RlYWQgb2Ygc3BhY2VzCgkgKi8KCWh5cGhlbmF0ZSA6IGZ1bmN0aW9uICggb2JqLCBjYW1lbCApIHsKCQl2YXIgcmVzdWx0ID0gc3RyaW5nLnRyaW0oIG9iaiApLnJlcGxhY2UoIC9ccysvZywgIi0iICk7CgoJCWlmICggY2FtZWwgPT09IHRydWUgKSB7CgkJCXJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKCAvKFtBLVpdKS9nLCAiLSQxIiApLnRvTG93ZXJDYXNlKCk7CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIFRlc3RzIGlmIGEgc3RyaW5nIGlzIGFscGhhLW51bWVyaWMKCSAqCgkgKiBAbWV0aG9kIGlzQWxwaGFOdW0KCSAqIEBwYXJhbSAge1N0cmluZ30gIG9iaiBTdHJpbmcgdG8gdGVzdAoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFJlc3VsdCBvZiB0ZXN0CgkgKi8KCWlzQWxwaGFOdW0gOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gdmFsaWRhdGUudGVzdCgge2FscGhhbnVtOiBvYmp9ICkucGFzczsKCX0sCgoJLyoqCgkgKiBUZXN0cyBpZiBhIHN0cmluZyBpcyBhIGJvb2xlYW4KCSAqCgkgKiBAbWV0aG9kIGlzQm9vbGVhbgoJICogQHBhcmFtICB7U3RyaW5nfSAgb2JqIFN0cmluZyB0byB0ZXN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgUmVzdWx0IG9mIHRlc3QKCSAqLwoJaXNCb29sZWFuIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIHZhbGlkYXRlLnRlc3QoIHsiYm9vbGVhbiI6IG9ian0gKS5wYXNzOwoJfSwKCgkvKioKCSAqIFRlc3RzIGlmIGEgc3RyaW5nIGEgZGF0ZQoJICoKCSAqIEBtZXRob2QgaXNEYXRlCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBvYmogU3RyaW5nIHRvIHRlc3QKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICBSZXN1bHQgb2YgdGVzdAoJICovCglpc0RhdGUgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gdmFsaWRhdGUudGVzdCgge2RhdGU6IG9ian0gKS5wYXNzOwoJfSwKCgkvKioKCSAqIFRlc3RzIGlmIGEgc3RyaW5nIGlzIGEgZG9tYWluCgkgKgoJICogQG1ldGhvZCBpc0RvbWFpbgoJICogQHBhcmFtICB7U3RyaW5nfSAgb2JqIFN0cmluZyB0byB0ZXN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgUmVzdWx0IG9mIHRlc3QKCSAqLwoJaXNEb21haW4gOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gdmFsaWRhdGUudGVzdCgge2RvbWFpbjogb2JqfSApLnBhc3M7Cgl9LAoKCS8qKgoJICogVGVzdHMgaWYgYSBzdHJpbmcgaXMgYW4gZW1haWwgYWRkcmVzcwoJICoKCSAqIEBtZXRob2QgaXNFbWFpbAoJICogQHBhcmFtICB7U3RyaW5nfSAgb2JqIFN0cmluZyB0byB0ZXN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgUmVzdWx0IG9mIHRlc3QKCSAqLwoJaXNFbWFpbCA6IGZ1bmN0aW9uICggb2JqICkgewoJCXJldHVybiB2YWxpZGF0ZS50ZXN0KCB7ZW1haWw6IG9ian0gKS5wYXNzOwoJfSwKCgkvKioKCSAqIFRlc3RzIGlmIGEgc3RyaW5nIGlzIGVtcHR5CgkgKgoJICogQG1ldGhvZCBpc0VtcHR5CgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBvYmogU3RyaW5nIHRvIHRlc3QKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICBSZXN1bHQgb2YgdGVzdAoJICovCglpc0VtcHR5IDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuICggc3RyaW5nLnRyaW0oIG9iaiApID09PSAiIiApOwoJfSwKCgkvKioKCSAqIFRlc3RzIGlmIGEgc3RyaW5nIGlzIGFuIElQIGFkZHJlc3MKCSAqCgkgKiBAbWV0aG9kIGlzSVAKCSAqIEBwYXJhbSAge1N0cmluZ30gIG9iaiBTdHJpbmcgdG8gdGVzdAoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFJlc3VsdCBvZiB0ZXN0CgkgKi8KCWlzSVAgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gdmFsaWRhdGUudGVzdCgge2lwOiBvYmp9ICkucGFzczsKCX0sCgoJLyoqCgkgKiBUZXN0cyBpZiBhIHN0cmluZyBpcyBhbiBpbnRlZ2VyCgkgKgoJICogQG1ldGhvZCBpc0ludAoJICogQHBhcmFtICB7U3RyaW5nfSAgb2JqIFN0cmluZyB0byB0ZXN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgUmVzdWx0IG9mIHRlc3QKCSAqLwoJaXNJbnQgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gdmFsaWRhdGUudGVzdCgge2ludGVnZXI6IG9ian0gKS5wYXNzOwoJfSwKCgkvKioKCSAqIFRlc3RzIGlmIGEgc3RyaW5nIGlzIGEgbnVtYmVyCgkgKgoJICogQG1ldGhvZCBpc051bWJlcgoJICogQHBhcmFtICB7U3RyaW5nfSAgb2JqIFN0cmluZyB0byB0ZXN0CgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgUmVzdWx0IG9mIHRlc3QKCSAqLwoJaXNOdW1iZXIgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gdmFsaWRhdGUudGVzdCgge251bWJlcjogb2JqfSApLnBhc3M7Cgl9LAoKCS8qKgoJICogVGVzdHMgaWYgYSBzdHJpbmcgaXMgYSBwaG9uZSBudW1iZXIKCSAqCgkgKiBAbWV0aG9kIGlzUGhvbmUKCSAqIEBwYXJhbSAge1N0cmluZ30gIG9iaiBTdHJpbmcgdG8gdGVzdAoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFJlc3VsdCBvZiB0ZXN0CgkgKi8KCWlzUGhvbmUgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQlyZXR1cm4gdmFsaWRhdGUudGVzdCgge3Bob25lOiBvYmp9ICkucGFzczsKCX0sCgoJLyoqCgkgKiBUZXN0cyBpZiBhIHN0cmluZyBpcyBhIFVSTAoJICoKCSAqIEBtZXRob2QgaXNVcmwKCSAqIEBwYXJhbSAge1N0cmluZ30gIG9iaiBTdHJpbmcgdG8gdGVzdAoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFJlc3VsdCBvZiB0ZXN0CgkgKi8KCWlzVXJsIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIHZhbGlkYXRlLnRlc3QoIHt1cmw6IG9ian0gKS5wYXNzOwoJfSwKCgkvKioKCSAqIFJldHVybnMgc2luZ3VsYXIgZm9ybSBvZiB0aGUgc3RyaW5nCgkgKgoJICogQG1ldGhvZCBzaW5ndWxhcgoJICogQHBhcmFtICB7U3RyaW5nfSBvYmogU3RyaW5nIHRvIHRyYW5zZm9ybQoJICogQHJldHVybiB7U3RyaW5nfSAgICAgVHJhbnNmb3JtZWQgc3RyaW5nCgkgKi8KCXNpbmd1bGFyIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIG9iai5yZXBsYWNlKCAvb2U/cyQvLCAibyIgKS5yZXBsYWNlKCAvaWVzJC8sICJ5IiApLnJlcGxhY2UoIC9zZXMkLywgInNlIiApLnJlcGxhY2UoIC9zJC8sICIiICk7Cgl9LAoKCS8qKgoJICogVHJhbnNmb3JtcyB0aGUgY2FzZSBvZiBhIFN0cmluZyBpbnRvIENhbWVsQ2FzZQoJICoKCSAqIEBtZXRob2QgdG9DYW1lbENhc2UKCSAqIEBwYXJhbSAge1N0cmluZ30gb2JqIFN0cmluZyB0byBjYXBpdGFsaXplCgkgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICBDYW1lbCBjYXNlIFN0cmluZwoJICovCgl0b0NhbWVsQ2FzZSA6IGZ1bmN0aW9uICggb2JqICkgewoJCXZhciBzID0gc3RyaW5nLnRyaW0oIG9iaiApLnJlcGxhY2UoIC9cLnxffC18XEB8XFt8XF18XCh8XCl8XCN8XCR8XCV8XF58XCZ8XCp8XHMrL2csICIgIiApLnRvTG93ZXJDYXNlKCkuc3BsaXQoIHJlZ2V4LnNwYWNlX2h5cGhlbiApLAoJCSAgICByID0gW107CgoJCWFycmF5LmVhY2goIHMsIGZ1bmN0aW9uICggaSwgaWR4ICkgewoJCQlyLnB1c2goIGlkeCA9PT0gMCA/IGkgOiBzdHJpbmcuY2FwaXRhbGl6ZSggaSApICk7CgkJfSk7CgoJCXJldHVybiByLmpvaW4oICIiICk7Cgl9LAoKCS8qKgoJICogVHJpbXMgdGhlIHdoaXRlc3BhY2UgYXJvdW5kIGEgU3RyaW5nCgkgKgoJICogQG1ldGhvZCB0cmltCgkgKiBAcGFyYW0gIHtTdHJpbmd9IG9iaiBTdHJpbmcgdG8gY2FwaXRhbGl6ZQoJICogQHJldHVybiB7U3RyaW5nfSAgICAgVHJpbW1lZCBTdHJpbmcKCSAqLwoJdHJpbSA6IGZ1bmN0aW9uICggb2JqICkgewoJCXJldHVybiBvYmoucmVwbGFjZSggL14oXHMrfFx0Kyl8KFxzK3xcdCspJC9nLCAiIiApOwoJfSwKCgkvKioKCSAqIFVuY2FtZWxjYXNlcyB0aGUgU3RyaW5nCgkgKgoJICogQG1ldGhvZCB1bkNhbWVsQ2FzZQoJICogQHBhcmFtICB7U3RyaW5nfSBvYmogU3RyaW5nIHRvIHVuY2FtZWxjYXNlCgkgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICBVbmNhbWVsY2FzZWQgU3RyaW5nCgkgKi8KCXVuQ2FtZWxDYXNlIDogZnVuY3Rpb24gKCBvYmogKSB7CgkJcmV0dXJuIHN0cmluZy50cmltKCBvYmoucmVwbGFjZSggLyhbQS1aXSkvZywgIiAkMSIgKS50b0xvd2VyQ2FzZSgpICk7Cgl9LAoKCS8qKgoJICogVW5jYXBpdGFsaXplcyB0aGUgU3RyaW5nCgkgKgoJICogQG1ldGhvZCB1bmNhcGl0YWxpemUKCSAqIEBwYXJhbSAge1N0cmluZ30gb2JqIFN0cmluZyB0byB1bmNhcGl0YWxpemUKCSAqIEByZXR1cm4ge1N0cmluZ30gICAgIFVuY2FwaXRhbGl6ZWQgU3RyaW5nCgkgKi8KCXVuY2FwaXRhbGl6ZSA6IGZ1bmN0aW9uICggb2JqICkgewoJCW9iaiA9IHN0cmluZy50cmltKCBvYmogKTsKCgkJcmV0dXJuIG9iai5jaGFyQXQoIDAgKS50b0xvd2VyQ2FzZSgpICsgb2JqLnNsaWNlKCAxICk7Cgl9LAoKCS8qKgoJICogUmVwbGFjZXMgYWxsIGh5cGhlbnMgd2l0aCBzcGFjZXMKCSAqCgkgKiBAbWV0aG9kIHVuaHlwaGVuYXRlCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBvYmogIFN0cmluZyB0byB1bmh5cGVuYXRlCgkgKiBAcGFyYW0gIHtCb29sZWFufSBjYXBzIFtPcHRpb25hbF0gVHJ1ZSB0byBjYXBpdGFsaXplIGVhY2ggd29yZAoJICogQHJldHVybiB7U3RyaW5nfSAgICAgICBVbmh5cGhlbmF0ZWQgU3RyaW5nCgkgKi8KCXVuaHlwaGVuYXRlIDogZnVuY3Rpb24gKCBvYmosIGNhcHMgKSB7CgkJaWYgKCBjYXBzICE9PSB0cnVlICkgewoJCQlyZXR1cm4gc3RyaW5nLmV4cGxvZGUoIG9iaiwgIi0iICkuam9pbiggIiAiICk7CgkJfQoJCWVsc2UgewoJCQlyZXR1cm4gc3RyaW5nLmV4cGxvZGUoIG9iaiwgIi0iICkubWFwKCBmdW5jdGlvbiAoIGkgKSB7CgkJCQlyZXR1cm4gc3RyaW5nLmNhcGl0YWxpemUoIGkgKTsKCQkJfSkuam9pbiggIiAiICk7CgkJfQoJfQp9OwoKLyoqIEBuYW1lc3BhY2UgdXRpbGl0eSAqLwp2YXIgdXRpbGl0eSA9IHsKCS8vIENvbGxlY3Rpb24gb2YgdGltZXJzCgl0aW1lciA6IHt9LAoKCS8vIENvbGxlY3Rpb24gb2YgcmVwZWF0aW5nIGZ1bmN0aW9ucwoJcmVwZWF0aW5nOiB7fSwKCgkvKioKCSAqIFF1ZXJpZXMgdGhlIERPTSB1c2luZyBDU1Mgc2VsZWN0b3JzIGFuZCByZXR1cm5zIGFuIEVsZW1lbnQgb3IgQXJyYXkgb2YgRWxlbWVudHMKCSAqCgkgKiBAbWV0aG9kICQKCSAqIEBwYXJhbSAge1N0cmluZ30gYXJnIENvbW1hIGRlbGltaXRlZCBzdHJpbmcgb2YgQ1NTIHNlbGVjdG9ycwoJICogQHJldHVybiB7TWl4ZWR9ICAgICAgRWxlbWVudCBvciBBcnJheSBvZiBFbGVtZW50cwoJICovCgkkIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJdmFyIHJlc3VsdDsKCgkJaWYgKCAhYXJnICkgewoJCQlyZXR1cm47CgkJfQoKCQlhcmcgPSBzdHJpbmcudHJpbSggYXJnICk7CgoJCWlmICggYXJnLmluZGV4T2YoICIsIiApID09PSAtMSApIHsKCQkJcmVzdWx0ID0gdXRpbGl0eS5kb20oIGFyZyApOwoJCX0KCQllbHNlIHsKCQkJcmVzdWx0ID0gW107CgoJCQlhcnJheS5lYWNoKCBzdHJpbmcuZXhwbG9kZSggYXJnICksIGZ1bmN0aW9uICggcXVlcnkgKSB7CgkJCQl2YXIgb2JqID0gdXRpbGl0eS5kb20oIHF1ZXJ5ICk7CgoJCQkJaWYgKCBvYmogaW5zdGFuY2VvZiBBcnJheSApIHsKCQkJCQlyZXN1bHQgPSByZXN1bHQuY29uY2F0KCBvYmogKTsKCQkJCX0KCQkJCWVsc2UgaWYgKCBvYmogKSB7CgkJCQkJcmVzdWx0LnB1c2goIG9iaiApOwoJCQkJfQoJCQl9KTsKCQl9CgoJCXJldHVybiByZXN1bHQ7Cgl9LAoKCS8qKgoJICogQWxpYXNlcyBvcmlnaW4gb250byBvYmoKCSAqCgkgKiBAbWV0aG9kIGFsaWFzCgkgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiAgICBPYmplY3QgcmVjZWl2aW5nIGFsaWFzaW5nCgkgKiBAcGFyYW0gIHtPYmplY3R9IG9yaWdpbiBPYmplY3QgcHJvdmlkaW5nIHN0cnVjdHVyZSB0byBvYmoKCSAqIEByZXR1cm4ge09iamVjdH0gICAgICAgIE9iamVjdCByZWNlaXZpbmcgYWxpYXNpbmcKCSAqLwoJYWxpYXMgOiBmdW5jdGlvbiAoIG9iaiwgb3JpZ2luICkgewoJCXZhciBvID0gb2JqLAoJCSAgICBzID0gb3JpZ2luOwoKCQl1dGlsaXR5Lml0ZXJhdGUoIHMsIGZ1bmN0aW9uICggdiwgayApIHsKCQkJdmFyIGdldHRlciwgc2V0dGVyOwoKCQkJaWYgKCAhKCB2IGluc3RhbmNlb2YgUmVnRXhwICkgJiYgdHlwZW9mIHYgPT09ICJmdW5jdGlvbiIgKSB7CgkJCQlvW2tdID0gdi5iaW5kKCBvW2tdICk7CgkJCX0KCQkJZWxzZSBpZiAoICEodiBpbnN0YW5jZW9mIFJlZ0V4cCApICYmICEodiBpbnN0YW5jZW9mIEFycmF5ICkgJiYgdiBpbnN0YW5jZW9mIE9iamVjdCApIHsKCQkJCWlmICggb1trXSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCW9ba10gPSB7fTsKCQkJCX0KCgkJCQl1dGlsaXR5LmFsaWFzKCBvW2tdLCBzW2tdICk7CgkJCX0KCQkJZWxzZSB7CgkJCQlnZXR0ZXIgPSBmdW5jdGlvbiAoKSB7CgkJCQkJcmV0dXJuIHNba107CgkJCQl9OwoKCQkJCXNldHRlciA9IGZ1bmN0aW9uICggYXJnICkgewoJCQkJCXNba10gPSBhcmc7CgkJCQl9OwoKCQkJCXV0aWxpdHkucHJvcGVydHkoIG8sIGssIHtlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciwgc2V0OiBzZXR0ZXIsIHZhbHVlOiBzW2tdfSApOwoJCQl9CgkJfSk7CgoJCXJldHVybiBvYmo7Cgl9LAoKCS8qKgoJICogQ2xlYXJzIGRlZmVycmVkICYgcmVwZWF0aW5nIGZ1bmN0aW9ucwoJICoKCSAqIEBtZXRob2QgY2xlYXJUaW1lcnMKCSAqIEBwYXJhbSAge1N0cmluZ30gaWQgSUQgb2YgdGltZXIoIHMgKQoJICogQHJldHVybiB7VW5kZWZpbmVkfSB1bmRlZmluZWQKCSAqLwoJY2xlYXJUaW1lcnMgOiBmdW5jdGlvbiAoIGlkICkgewoJCWlmICggaWQgPT09IHVuZGVmaW5lZCB8fCBzdHJpbmcuaXNFbXB0eSggaWQgKSApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJfQoKCQkvLyBkZWZlcnJlZAoJCWlmICggdXRpbGl0eS50aW1lcltpZF0gIT09IHVuZGVmaW5lZCApIHsKCQkJY2xlYXJUaW1lb3V0KCB1dGlsaXR5LnRpbWVyW2lkXSApOwoJCQlkZWxldGUgdXRpbGl0eS50aW1lcltpZF07CgkJfQoKCQkvLyByZXBlYXRpbmcKCQlpZiAoIHV0aWxpdHkucmVwZWF0aW5nW2lkXSAhPT0gdW5kZWZpbmVkICkgewoJCQljbGVhclRpbWVvdXQoIHV0aWxpdHkucmVwZWF0aW5nW2lkXSApOwoJCQlkZWxldGUgdXRpbGl0eS5yZXBlYXRpbmdbaWRdOwoJCX0KCX0sCgoJLyoqCgkgKiBDbG9uZXMgYW4gT2JqZWN0CgkgKgoJICogQG1ldGhvZCBjbG9uZQoJICogQHBhcmFtIHtPYmplY3R9ICBvYmogICAgIE9iamVjdCB0byBjbG9uZQoJICogQHBhcmFtIHtCb29sZWFufSBzaGFsbG93IFtPcHRpb25hbF0gQ3JlYXRlIGEgc2hhbGxvdyBjbG9uZSwgd2hpY2ggZG9lc24ndCBtYWludGFpbiBwcm90b3R5cGVzLCBkZWZhdWx0IGlzIGBmYWxzZWAKCSAqIEByZXR1cm4ge09iamVjdH0gICAgIENsb25lIG9mIG9iagoJICovCgljbG9uZSA6IGZ1bmN0aW9uICggb2JqLCBzaGFsbG93ICkgewoJCXZhciBjbG9uZTsKCgkJaWYgKCBzaGFsbG93ID09PSB0cnVlICkgewoJCQlyZXR1cm4ganNvbi5kZWNvZGUoIGpzb24uZW5jb2RlKCBvYmogKSApOwoJCX0KCQllbHNlIGlmICggIW9iaiB8fCByZWdleC5wcmltaXRpdmUudGVzdCggdHlwZW9mIG9iaiApIHx8ICggb2JqIGluc3RhbmNlb2YgUmVnRXhwICkgKSB7CgkJCXJldHVybiBvYmo7CgkJfQoJCWVsc2UgaWYgKCBvYmogaW5zdGFuY2VvZiBBcnJheSApIHsKCQkJcmV0dXJuIG9iai5zbGljZSgpOwoJCX0KCQllbHNlIGlmICggIXNlcnZlciAmJiAhY2xpZW50LmllICYmIG9iaiBpbnN0YW5jZW9mIERvY3VtZW50ICkgewoJCQlyZXR1cm4geG1sLmRlY29kZSggeG1sLmVuY29kZSggb2JqICkgKTsKCQl9CgkJZWxzZSBpZiAoIHR5cGVvZiBvYmouX19wcm90b19fICE9PSAidW5kZWZpbmVkIiApIHsKCQkJcmV0dXJuIHV0aWxpdHkuZXh0ZW5kKCBvYmouX19wcm90b19fLCBvYmogKTsKCQl9CgkJZWxzZSBpZiAoIG9iaiBpbnN0YW5jZW9mIE9iamVjdCApIHsKCQkJLy8gSWYgSlNPTiBlbmNvZGluZyBmYWlscyBkdWUgdG8gcmVjdXJzaW9uLCB0aGUgb3JpZ2luYWwgT2JqZWN0IGlzIHJldHVybmVkIGJlY2F1c2UgaXQncyBhc3N1bWVkIHRoaXMgaXMgZm9yIGRlY29yYXRpb24KCQkJY2xvbmUgPSBqc29uLmVuY29kZSggb2JqLCB0cnVlICk7CgoJCQlpZiAoIGNsb25lICE9PSB1bmRlZmluZWQgKSB7CgkJCQljbG9uZSA9IGpzb24uZGVjb2RlKCBjbG9uZSApOwoKCQkJCS8vIERlY29yYXRpbmcgRnVuY3Rpb25zIHRoYXQgd291bGQgYmUgbG9zdCB3aXRoIEpTT04gZW5jb2RpbmcvZGVjb2RpbmcKCQkJCXV0aWxpdHkuaXRlcmF0ZSggb2JqLCBmdW5jdGlvbiAoIHYsIGsgKSB7CgkJCQkJaWYgKCB0eXBlb2YgdiA9PT0gImZ1bmN0aW9uIiApIHsKCQkJCQkJY2xvbmVba10gPSB2OwoJCQkJCX0KCQkJCX0pOwoJCQl9CgkJCWVsc2UgewoJCQkJY2xvbmUgPSBvYmo7CgkJCX0KCgkJCXJldHVybiBjbG9uZTsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiBvYmo7CgkJfQoJfSwKCgkvKioKCSAqIENvZXJjZXMgYSBTdHJpbmcgdG8gYSBUeXBlCgkgKgoJICogQG1ldGhvZCBjb2VyY2UKCSAqIEBwYXJhbSAge1N0cmluZ30gdmFsdWUgU3RyaW5nIHRvIGNvZXJjZQoJICogQHJldHVybiB7TWl4ZWR9ICAgICAgICBQcmltaXRpdmUgdmVyc2lvbiBvZiB0aGUgU3RyaW5nCgkgKi8KCWNvZXJjZSA6IGZ1bmN0aW9uICggdmFsdWUgKSB7CgkJdmFyIHRtcDsKCgkJaWYgKCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgewoJCQlyZXR1cm4gdW5kZWZpbmVkOwoJCX0KCQllbHNlIGlmICggdmFsdWUgPT09ICJ0cnVlIiApIHsKCQkJcmV0dXJuIHRydWU7CgkJfQoJCWVsc2UgaWYgKCB2YWx1ZSA9PT0gImZhbHNlIiApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQllbHNlIGlmICggdmFsdWUgPT09ICJudWxsIiApIHsKCQkJcmV0dXJuIG51bGw7CgkJfQoJCWVsc2UgaWYgKCB2YWx1ZSA9PT0gInVuZGVmaW5lZCIgKSB7CgkJCXJldHVybiB1bmRlZmluZWQ7CgkJfQoJCWVsc2UgaWYgKCB2YWx1ZSA9PT0gIiIgKSB7CgkJCXJldHVybiB2YWx1ZTsKCQl9CgkJZWxzZSBpZiAoICFpc05hTiggdG1wID0gTnVtYmVyKCB2YWx1ZSApICkgKSB7CgkJCXJldHVybiB0bXA7CgkJfQoJCWVsc2UgaWYgKCByZWdleC5qc29uX3dyYXAudGVzdCggdmFsdWUgKSApIHsKCQkJcmV0dXJuIGpzb24uZGVjb2RlKCB2YWx1ZSwgdHJ1ZSApIHx8IHZhbHVlOwoJCX0KCQllbHNlIHsKCQkJcmV0dXJuIHZhbHVlOwoJCX0KCX0sCgoJLyoqCgkgKiBSZWNvbXBpbGVzIGEgUmVnRXhwIGJ5IHJlZmVyZW5jZQoJICoKCSAqIFRoaXMgaXMgaWRlYWwgd2hlbiB5b3UgbmVlZCB0byByZWNvbXBpbGUgYSByZWdleCBmb3IgdXNlIHdpdGhpbiBhIGNvbmRpdGlvbmFsIHN0YXRlbWVudAoJICoKCSAqIEBtZXRob2QgY29tcGlsZQoJICogQHBhcmFtICB7T2JqZWN0fSByZWdleCAgICAgUmVnRXhwCgkgKiBAcGFyYW0gIHtTdHJpbmd9IHBhdHRlcm4gICBSZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybgoJICogQHBhcmFtICB7U3RyaW5nfSBtb2RpZmllcnMgTW9kaWZpZXJzIHRvIGFwcGx5IHRvIHRoZSBwYXR0ZXJuCgkgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgICB0cnVlCgkgKi8KCWNvbXBpbGUgOiBmdW5jdGlvbiAoIHJlZywgcGF0dGVybiwgbW9kaWZpZXJzICkgewoJCXJlZy5jb21waWxlKCBwYXR0ZXJuLCBtb2RpZmllcnMgKTsKCgkJcmV0dXJuIHRydWU7Cgl9LAoKCS8qKgoJICogQ3JlYXRlcyBhIENTUyBzdHlsZXNoZWV0IGluIHRoZSBWaWV3CgkgKgoJICogQG1ldGhvZCBjc3MKCSAqIEBwYXJhbSAge1N0cmluZ30gY29udGVudCBDU1MgdG8gcHV0IGluIGEgc3R5bGUgdGFnCgkgKiBAcGFyYW0gIHtTdHJpbmd9IG1lZGlhICAgW09wdGlvbmFsXSBNZWRpYXMgdGhlIHN0eWxlc2hlZXQgYXBwbGllcyB0bwoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgIEVsZW1lbnQgY3JlYXRlZCBvciB1bmRlZmluZWQKCSAqLwoJY3NzIDogZnVuY3Rpb24gKCBjb250ZW50LCBtZWRpYSApIHsKCQl2YXIgc3MsIGNzczsKCgkJc3MgPSBlbGVtZW50LmNyZWF0ZSggInN0eWxlIiwge3R5cGU6ICJ0ZXh0L2NzcyIsIG1lZGlhOiBtZWRpYSB8fCAicHJpbnQsIHNjcmVlbiJ9LCB1dGlsaXR5LiQoICJoZWFkIiApWzBdICk7CgoJCWlmICggc3Muc3R5bGVTaGVldCApIHsKCQkJc3Muc3R5bGVTaGVldC5jc3NUZXh0ID0gY29udGVudDsKCQl9CgkJZWxzZSB7CgkJCWNzcyA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCBjb250ZW50ICk7CgkJCXNzLmFwcGVuZENoaWxkKCBjc3MgKTsKCQl9CgoJCXJldHVybiBzczsKCX0sCgoJLyoqCgkgKiBEZWJvdW5jZXMgYSBmdW5jdGlvbgoJICoKCSAqIEBtZXRob2QgZGVib3VuY2UKCSAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgICBGdW5jdGlvbiB0byBleGVjdXRlCgkgKiBAcGFyYW0gIHtOdW1iZXJ9ICAgbXMgICAgVGltZSB0byB3YWl0IHRvIGV4ZWN1dGUgaW4gbWlsbGlzZWNvbmRzLCBkZWZhdWx0IGlzIDEwMDAKCSAqIEBwYXJhbSAge01peGVkfSAgICBzY29wZSBgdGhpc2AgY29udGV4dCBkdXJpbmcgZXhlY3V0aW9uLCBkZWZhdWx0IGlzIGBnbG9iYWxgCgkgKiBAcmV0dXJuIHtVbmRlZmluZWR9ICAgICAgdW5kZWZpbmVkCgkgKi8KCWRlYm91bmNlIDogZnVuY3Rpb24gKCBmbiwgbXMsIHNjb3BlICkgewoJCW1zICAgID0gbXMgICAgfHwgMTAwMDsKCQlzY29wZSA9IHNjb3BlIHx8IGdsb2JhbDsKCgkJcmV0dXJuIGZ1bmN0aW9uIGRlYm91bmNlZCAoKSB7CgkJCXNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHsKCQkJCWZuLmFwcGx5KCBzY29wZSwgYXJndW1lbnRzICk7CgkJCX0sIG1zKTsKCQl9OwoJfSwKCgkvKioKCSAqIEFsbG93cyBkZWVwIHNldHRpbmcgb2YgcHJvcGVydGllcyB3aXRob3V0IGtub3dpbmcKCSAqIGlmIHRoZSBzdHJ1Y3R1cmUgaXMgdmFsaWQKCSAqCgkgKiBAbWV0aG9kIGRlZmluZQoJICogQHBhcmFtICB7U3RyaW5nfSBhcmdzICBEb3QgZGVsaW1pdGVkIHN0cmluZyBvZiB0aGUgc3RydWN0dXJlCgkgKiBAcGFyYW0gIHtNaXhlZH0gIHZhbHVlIFZhbHVlIHRvIHNldAoJICogQHBhcmFtICB7T2JqZWN0fSBvYmogICBPYmplY3QgcmVjZWl2aW5nIHZhbHVlCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgIE9iamVjdCByZWNlaXZpbmcgdmFsdWUKCSAqLwoJZGVmaW5lIDogZnVuY3Rpb24gKCBhcmdzLCB2YWx1ZSwgb2JqICkgewoJCWFyZ3MgICAgPSBhcmdzLnNwbGl0KCAiLiIgKTsKCQl2YXIgcCAgID0gb2JqLAoJCSAgICBudGggPSBhcmdzLmxlbmd0aDsKCgkJaWYgKCBvYmogPT09IHVuZGVmaW5lZCApIHsKCQkJb2JqID0gdGhpczsKCQl9CgoJCWlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCQkJdmFsdWUgPSBudWxsOwoJCX0KCgkJYXJyYXkuZWFjaCggYXJncywgZnVuY3Rpb24gKCBpLCBpZHggKSB7CgkJCXZhciBudW0gPSBpZHggKyAxIDwgbnRoICYmICFpc05hTiggbnVtYmVyLnBhcnNlKCBhcmdzW2lkeCArIDFdLCAxMCApICksCgkJCSAgICB2YWwgPSB2YWx1ZTsKCgkJCWlmICggIWlzTmFOKCBudW1iZXIucGFyc2UoIGksIDEwICkgKSApICB7CgkJCQlpID0gbnVtYmVyLnBhcnNlKCBpLCAxMCApOwoJCQl9CgkJCQoJCQkvLyBDcmVhdGluZyBvciBjYXN0aW5nCgkJCWlmICggcFtpXSA9PT0gdW5kZWZpbmVkICkgewoJCQkJcFtpXSA9IG51bSA/IFtdIDoge307CgkJCX0KCQkJZWxzZSBpZiAoIHBbaV0gaW5zdGFuY2VvZiBPYmplY3QgJiYgbnVtICkgewoJCQkJcFtpXSA9IGFycmF5LmNhc3QoIHBbaV0gKTsKCQkJfQoJCQllbHNlIGlmICggcFtpXSBpbnN0YW5jZW9mIE9iamVjdCApIHsKCQkJCS8vIERvIG5vdGhpbmcKCQkJfQoJCQllbHNlIGlmICggcFtpXSBpbnN0YW5jZW9mIEFycmF5ICYmICFudW0gKSB7CgkJCQlwW2ldID0gYXJyYXkudG9PYmplY3QoIHBbaV0gKTsKCQkJfQoJCQllbHNlIHsKCQkJCXBbaV0gPSB7fTsKCQkJfQoKCQkJLy8gU2V0dGluZyByZWZlcmVuY2Ugb3IgdmFsdWUKCQkJaWR4ICsgMSA9PT0gbnRoID8gcFtpXSA9IHZhbCA6IHAgPSBwW2ldOwoJCX0pOwoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIERlZmVycyB0aGUgZXhlY3V0aW9uIG9mIEZ1bmN0aW9uIGJ5IGF0IGxlYXN0IHRoZSBzdXBwbGllZCBtaWxsaXNlY29uZHMKCSAqIFRpbWluZyBtYXkgdmFyeSB1bmRlciAiaGVhdnkgbG9hZCIgcmVsYXRpdmUgdG8gdGhlIENQVSAmIGNsaWVudCBKYXZhU2NyaXB0IGVuZ2luZQoJICoKCSAqIEBtZXRob2QgZGVmZXIKCSAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgICAgRnVuY3Rpb24gdG8gZGVmZXIgZXhlY3V0aW9uIG9mCgkgKiBAcGFyYW0gIHtOdW1iZXJ9ICAgbXMgICAgIE1pbGxpc2Vjb25kcyB0byBkZWZlciBleGVjdXRpb24KCSAqIEBwYXJhbSAge051bWJlcn0gICBpZCAgICAgW09wdGlvbmFsXSBJRCBvZiB0aGUgZGVmZXJyZWQgZnVuY3Rpb24KCSAqIEBwYXJhbSAge0Jvb2xlYW59ICByZXBlYXQgW09wdGlvbmFsXSBEZXNjcmliZXMgdGhlIGV4ZWN1dGlvbiwgZGVmYXVsdCBpcyBgZmFsc2VgCgkgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgIElEIG9mIHRoZSB0aW1lcgoJICovCglkZWZlciA6IGZ1bmN0aW9uICggZm4sIG1zLCBpZCwgcmVwZWF0ICkgewoJCXZhciBvcDsKCgkJbXMgICAgID0gbXMgfHwgMDsKCQlyZXBlYXQgPSAoIHJlcGVhdCA9PT0gdHJ1ZSApOwoKCQlpZiAoIGlkICE9PSB1bmRlZmluZWQgKSB7CgkJCXV0aWxpdHkuY2xlYXJUaW1lcnMoIGlkICk7CgkJfQoJCWVsc2UgewoJCQlpZCA9IHV0aWxpdHkudXVpZCggdHJ1ZSApOwoJCX0KCgkJb3AgPSBmdW5jdGlvbiAoKSB7CgkJCXV0aWxpdHkuY2xlYXJUaW1lcnMoIGlkICk7CgkJCWZuKCk7CgkJfTsKCgkJdXRpbGl0eVtyZXBlYXQgPyAicmVwZWF0aW5nIiA6ICJ0aW1lciJdW2lkXSA9IHNldFRpbWVvdXQoIG9wLCBtcyApOwoKCQlyZXR1cm4gaWQ7Cgl9LAoKCS8qKgoJICogUXVlcmllcyBET00gd2l0aCBmYXN0ZXN0IG1ldGhvZAoJICoKCSAqIEBtZXRob2QgZG9tCgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyBET00gcXVlcnkKCSAqIEByZXR1cm4ge01peGVkfSAgICAgIHVuZGVmaW5lZCwgRWxlbWVudCwgb3IgQXJyYXkgb2YgRWxlbWVudHMKCSAqLwoJZG9tIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJdmFyIHJlc3VsdDsKCgkJaWYgKCAhcmVnZXguc2VsZWN0b3JfY29tcGxleC50ZXN0KCBhcmcgKSApIHsKCQkJaWYgKCByZWdleC5oYXNoLnRlc3QoIGFyZyApICkgewoJCQkJcmVzdWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGFyZy5yZXBsYWNlKCByZWdleC5oYXNoLCAiIiApICkgfHwgdW5kZWZpbmVkOwoJCQl9CgkJCWVsc2UgaWYgKCByZWdleC5rbGFzcy50ZXN0KCBhcmcgKSApIHsKCQkJCXJlc3VsdCA9IGFycmF5LmNhc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGFyZy5yZXBsYWNlKCByZWdleC5rbGFzcywgIiIgKSApICk7CgkJCX0KCQkJZWxzZSBpZiAoIHJlZ2V4LndvcmQudGVzdCggYXJnICkgKSB7CgkJCQlyZXN1bHQgPSBhcnJheS5jYXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggYXJnICkgKTsKCQkJfQoJCQllbHNlIHsKCQkJCXJlc3VsdCA9IGFycmF5LmNhc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGFyZyApICk7CgkJCX0KCQl9CgkJZWxzZSB7CgkJCXJlc3VsdCA9IGFycmF5LmNhc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGFyZyApICk7CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIEVuY29kZXMgYSBVVUlEIHRvIGEgRE9NIGZyaWVuZGx5IElECgkgKgoJICogQG1ldGhvZCBkb21JZAoJICogQHBhcmFtICB7U3RyaW5nfSBVVUlECgkgKiBAcmV0dXJuIHtTdHJpbmd9IERPTSBmcmllbmRseSBJRAoJICovCglkb21JZCA6IGZ1bmN0aW9uICggYXJnICkgewoJCXJldHVybiAiYSIgKyBhcmcucmVwbGFjZSggLy0vZywgIiIgKS5zbGljZSggMSApOwoJfSwKCgkvKioKCSAqIEVycm9yIGhhbmRsaW5nLCB3aXRoIGhpc3RvcnkgaW4gLmxvZwoJICoKCSAqIEBtZXRob2QgZXJyb3IKCSAqIEBwYXJhbSAge01peGVkfSAgIGUgICAgICAgRXJyb3Igb2JqZWN0IG9yIG1lc3NhZ2UgdG8gZGlzcGxheQoJICogQHBhcmFtICB7QXJyYXl9ICAgYXJncyAgICBBcnJheSBvZiBhcmd1bWVudHMgZnJvbSB0aGUgY2FsbHN0YWNrCgkgKiBAcGFyYW0gIHtNaXhlZH0gICBzY29wZSAgIEVudGl0eSB0aGF0IHdhcyAidGhpcyIKCSAqIEBwYXJhbSAge0Jvb2xlYW59IHdhcm5pbmcgW09wdGlvbmFsXSBXaWxsIGRpc3BsYXkgYXMgY29uc29sZSB3YXJuaW5nIGlmIHRydWUKCSAqIEByZXR1cm4ge1VuZGVmaW5lZH0gICAgICAgdW5kZWZpbmVkCgkgKi8KCWVycm9yIDogZnVuY3Rpb24gKCBlLCBhcmdzLCBzY29wZSwgd2FybmluZyApIHsKCQl3YXJuaW5nID0gKCB3YXJuaW5nID09PSB0cnVlICk7CgkJdmFyIG8gICA9IHsKCQkJImFyZ3VtZW50cyIgOiBhcmdzICE9PSB1bmRlZmluZWQgPyBhcnJheS5jYXN0KCBhcmdzICkgOiBbXSwKCQkJbWVzc2FnZSAgICAgOiBlLm1lc3NhZ2UgfHwgZSwKCQkJbnVtYmVyICAgICAgOiBlLm51bWJlciAhPT0gdW5kZWZpbmVkID8gKCBlLm51bWJlciAmIDB4RkZGRiApIDogdW5kZWZpbmVkLAoJCQlzY29wZSAgICAgICA6IHNjb3BlLAoJCQlzdGFjayAgICAgICA6IGUuc3RhY2sgICB8fCB1bmRlZmluZWQsCgkJCXRpbWVzdGFtcCAgIDogbmV3IERhdGUoKS50b1VUQ1N0cmluZygpLAoJCQl0eXBlICAgICAgICA6IGUudHlwZSAgICB8fCAiVHlwZUVycm9yIgoJCX07CgoJCXV0aWxpdHkubG9nKCAoIG8uc3RhY2sgfHwgby5tZXNzYWdlIHx8IG8gKSwgIXdhcm5pbmcgPyAiZXJyb3IiIDogIndhcm4iICk7CgkJdXRpbGl0eS5lcnJvci5sb2cucHVzaCggbyApOwoJCW9ic2VydmVyLmZpcmUoIGFiYWFzbywgImVycm9yIiwgbyApOwoKCQlyZXR1cm4gdW5kZWZpbmVkOwoJfSwKCgkvKioKCSAqIENyZWF0ZXMgYSAiY2xhc3MiIGV4dGVuZGluZyBPYmplY3QsIHdpdGggb3B0aW9uYWwgZGVjb3JhdGlvbgoJICoKCSAqIEBtZXRob2QgZXh0ZW5kCgkgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiBPYmplY3QgdG8gZXh0ZW5kCgkgKiBAcGFyYW0gIHtPYmplY3R9IGFyZyBbT3B0aW9uYWxdIE9iamVjdCBmb3IgZGVjb3JhdGlvbgoJICogQHJldHVybiB7T2JqZWN0fSAgICAgRGVjb3JhdGVkIG9iagoJICovCglleHRlbmQgOiBmdW5jdGlvbiAoKSB7CgkJaWYgKCB0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gImZ1bmN0aW9uIiApIHsKCQkJcmV0dXJuIGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJCQl2YXIgbzsKCgkJCQlpZiAoIG9iaiA9PT0gdW5kZWZpbmVkICkgewoJCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCQkJfQoKCQkJCW8gPSBPYmplY3QuY3JlYXRlKCBvYmogKTsKCgkJCQlpZiAoIGFyZyBpbnN0YW5jZW9mIE9iamVjdCApIHsKCQkJCQl1dGlsaXR5Lm1lcmdlKCBvLCBhcmcgKTsKCQkJCX0KCgkJCQlyZXR1cm4gbzsKCQkJfTsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiBmdW5jdGlvbiAoIG9iaiwgYXJnICkgewoJCQkJZnVuY3Rpb24gRXh0ZW5kZWQgKCkge30KCgkJCQl2YXIgbzsKCgkJCQlpZiAoIG9iaiA9PT0gdW5kZWZpbmVkICkgewoJCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCQkJfQoKCQkJCUV4dGVuZGVkLnByb3RvdHlwZSA9IG9iajsKCgkJCQlvID0gbmV3IEV4dGVuZGVkKCk7CgoJCQkJaWYgKCBhcmcgaW5zdGFuY2VvZiBPYmplY3QgKSB7CgkJCQkJdXRpbGl0eS5tZXJnZSggbywgYXJnICk7CgkJCQl9CgoJCQkJcmV0dXJuIG87CgkJCX07CgkJfQoJfSgpLAoKCS8qKgoJICogRmlib25hY2NpIGNhbGN1bGF0b3IKCSAqCgkgKiBAbWV0aG9kIGZpYgoJICogQHBhcmFtICB7TnVtYmVyfSAgaSBOdW1iZXIgdG8gY2FsY3VsYXRlCgkgKiBAcGFyYW0gIHtCb29sZWFufSByIFJlY3Vyc2l2ZSBpZiBgdHJ1ZWAKCSAqIEByZXR1cm4ge051bWJlcn0gICAgQ2FsY3VsYXRlZCBudW1iZXIKCSAqLwoJZmliIDogZnVuY3Rpb24gKCBpLCByICkgewoJCWlmICggciA9PT0gdHJ1ZSApIHsKCQkJcmV0dXJuIGkgPiAxID8gdXRpbGl0eS5maWIoIGkgLSAxLCByICkgKyB1dGlsaXR5LmZpYiggaSAtIDIsIHIgKSA6IGk7CgkJfQoJCWVsc2UgewoJCQlyZXR1cm4gYXJyYXkubGFzdCggYXJyYXkuZmliKCBpICkgKTsKCQl9Cgl9LAoKCS8qKgoJICogR2VuZXJhdGVzIGFuIElEIHZhbHVlCgkgKgoJICogQG1ldGhvZCBnZW5JZAoJICogQHBhcmFtICB7TWl4ZWR9ICAgb2JqIFtPcHRpb25hbF0gT2JqZWN0IHRvIHJlY2VpdmUgaWQKCSAqIEBwYXJhbSAge0Jvb2xlYW59IGRvbSBbT3B0aW9uYWxdIFZlcmlmeSB0aGUgSUQgaXMgdW5pcXVlIGluIHRoZSBET00sIGRlZmF1bHQgaXMgZmFsc2UKCSAqIEByZXR1cm4ge01peGVkfSAgICAgICBPYmplY3Qgb3IgaWQKCSAqLwoJZ2VuSWQgOiBmdW5jdGlvbiAoIG9iaiwgZG9tICkgewoJCWRvbSA9ICggZG9tID09PSB0cnVlICk7CgkJdmFyIGlkOwoKCQlpZiAoIG9iaiAhPT0gdW5kZWZpbmVkICYmICggKCBvYmouaWQgIT09IHVuZGVmaW5lZCAmJiBvYmouaWQgIT09ICIiICkgfHwgKCBvYmogaW5zdGFuY2VvZiBBcnJheSApIHx8ICggb2JqIGluc3RhbmNlb2YgU3RyaW5nIHx8IHR5cGVvZiBvYmogPT09ICJzdHJpbmciICkgKSApIHsKCQkJcmV0dXJuIG9iajsKCQl9CgoJCWlmICggZG9tICkgewoJCQlkbyB7CgkJCQlpZCA9IHV0aWxpdHkuZG9tSWQoIHV0aWxpdHkudXVpZCggdHJ1ZSkgKTsKCQkJfQoJCQl3aGlsZSAoIHV0aWxpdHkuJCggIiMiICsgaWQgKSAhPT0gdW5kZWZpbmVkICk7CgkJfQoJCWVsc2UgewoJCQlpZCA9IHV0aWxpdHkuZG9tSWQoIHV0aWxpdHkudXVpZCggdHJ1ZSkgKTsKCQl9CgoJCWlmICggdHlwZW9mIG9iaiA9PT0gIm9iamVjdCIgKSB7CgkJCW9iai5pZCA9IGlkOwoKCQkJcmV0dXJuIG9iajsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiBpZDsKCQl9Cgl9LAoKCS8qKgoJICogR2V0dGVyIC8gc2V0dGVyIGZvciB0aGUgaGFzaGJhbmcKCSAqCgkgKiBAbWV0aG9kIGhhc2gKCSAqIEBwYXJhbSAge1N0cmluZ30gYXJnIFJvdXRlIHRvIHNldAoJICogQHJldHVybiB7U3RyaW5nfSAgICAgQ3VycmVudCByb3V0ZQoJICovCgloYXNoIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJaWYgKCBhcmcgIT09IHVuZGVmaW5lZCApIHsKCQkJZG9jdW1lbnQubG9jYXRpb24uaGFzaCA9IGFyZzsKCQl9CgoJCXJldHVybiBkb2N1bWVudC5sb2NhdGlvbi5oYXNoOwoJfSwKCgkvKioKCSAqIENvbnZlcnRzIFJHQiB0byBIRVgKCSAqCgkgKiBAbWV0aG9kIGhleAoJICogQHBhcmFtICB7U3RyaW5nfSBjb2xvciBSR0IgYXMgYHJnYigyNTUsIDI1NSwgMjU1KWAgb3IgYDI1NSwgMjU1LCAyNTVgCgkgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgIENvbG9yIGFzIEhFWAoJICovCgloZXggOiBmdW5jdGlvbiAoIGNvbG9yICkgewoJCXZhciBkaWdpdHMsIHJlZCwgZ3JlZW4sIGJsdWUsIHJlc3VsdCwgaSwgbnRoOwoKCQlpZiAoIGNvbG9yLmNoYXJBdCggMCApID09PSAiIyIgKSB7CgkJICAgIHJlc3VsdCA9IGNvbG9yOwoJCX0KCQllbHNlIHsKCQkJZGlnaXRzID0gc3RyaW5nLmV4cGxvZGUoIGNvbG9yLnJlcGxhY2UoIC8uKlwofFwpL2csICIiICkgKTsKCQkJcmVkICAgID0gbnVtYmVyLnBhcnNlKCBkaWdpdHNbMF0gfHwgMCApOwoJCQlncmVlbiAgPSBudW1iZXIucGFyc2UoIGRpZ2l0c1sxXSB8fCAwICk7CgkJCWJsdWUgICA9IG51bWJlci5wYXJzZSggZGlnaXRzWzJdIHx8IDAgKTsKCQkJcmVzdWx0ID0gKCBibHVlIHwgKCBncmVlbiA8PCA4ICkgfCAoIHJlZCA8PCAxNiApICkudG9TdHJpbmcoIDE2ICk7CgoJCQlpZiAoIHJlc3VsdC5sZW5ndGggPCA2ICkgewoJCQkJbnRoID0gbnVtYmVyLmRpZmYoIHJlc3VsdC5sZW5ndGgsIDYgKTsKCQkJCWkgICA9IC0xOwoKCQkJCXdoaWxlICggKytpIDwgbnRoICkgewoJCQkJCXJlc3VsdCA9ICIwIiArIHJlc3VsdDsKCQkJCX0KCQkJfQoKCQkJcmVzdWx0ID0gIiMiICsgcmVzdWx0OwoJCX0KCgkJcmV0dXJuIHJlc3VsdDsKCX0sCgoJLyoqCgkgKiBJdGVyYXRlcyBhbiBPYmplY3QgYW5kIGV4ZWN1dGVzIGEgZnVuY3Rpb24gYWdhaW5zdCB0aGUgcHJvcGVydGllcwoJICoKCSAqIEl0ZXJhdGlvbiBjYW4gYmUgc3RvcHBlZCBieSByZXR1cm5pbmcgZmFsc2UgZnJvbSBmbgoJICoKCSAqIEBtZXRob2QgaXRlcmF0ZQoJICogQHBhcmFtICB7T2JqZWN0fSAgIG9iaiBPYmplY3QgdG8gaXRlcmF0ZQoJICogQHBhcmFtICB7RnVuY3Rpb259IGZuICBGdW5jdGlvbiB0byBleGVjdXRlIGFnYWluc3QgcHJvcGVydGllcwoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICBPYmplY3QKCSAqLwoJaXRlcmF0ZSA6IGZ1bmN0aW9uICgpIHsKCQlpZiAoIHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gImZ1bmN0aW9uIiApIHsKCQkJcmV0dXJuIGZ1bmN0aW9uICggb2JqLCBmbiApIHsKCQkJCWlmICggdHlwZW9mIGZuICE9PSAiZnVuY3Rpb24iICkgewoJCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCQkJfQoKCQkJCWFycmF5LmVhY2goIE9iamVjdC5rZXlzKCBvYmogKSwgZnVuY3Rpb24gKCBpICkgewoJCQkJCXJldHVybiBmbi5jYWxsKCBvYmosIG9ialtpXSwgaSApOwoJCQkJfSk7CgoJCQkJcmV0dXJuIG9iajsKCQkJfTsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiBmdW5jdGlvbiAoIG9iaiwgZm4gKSB7CgkJCQl2YXIgaSwgcmVzdWx0OwoKCQkJCWlmICggdHlwZW9mIGZuICE9PSAiZnVuY3Rpb24iICkgewoJCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCQkJfQoKCQkJCWZvciAoIGkgaW4gb2JqICkgewoJCQkJCWlmICggaGFzLmNhbGwoIG9iaiwgaSApICkgewoJCQkJCQlyZXN1bHQgPSBmbi5jYWxsKCBvYmosIG9ialtpXSwgaSApOwoKCQkJCQkJaWYgKCByZXN1bHQgPT09IGZhbHNlICkgewoJCQkJCQkJYnJlYWs7CgkJCQkJCX0KCQkJCQl9CgkJCQkJZWxzZSB7CgkJCQkJCWJyZWFrOwoJCQkJCX0KCQkJCX0KCgkJCQlyZXR1cm4gb2JqOwoJCQl9OwoJCX0KCX0oKSwKCgkvKioKCSAqIFJlbmRlcnMgYSBsb2FkaW5nIGljb24gaW4gYSB0YXJnZXQgZWxlbWVudCwKCSAqIHdpdGggYSBjbGFzcyBvZiAibG9hZGluZyIKCSAqCgkgKiBAbWV0aG9kIGxvYWRpbmcKCSAqIEBwYXJhbSAge01peGVkfSBvYmogRWxlbWVudAoJICogQHJldHVybiB7TWl4ZWR9ICAgICBFbGVtZW50CgkgKi8KCWxvYWRpbmcgOiBmdW5jdGlvbiAoIG9iaiApIHsKCQl2YXIgbCA9IGFiYWFzby5sb2FkaW5nOwoKCQlpZiAoIGwudXJsID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCQl9CgoJCS8vIFNldHRpbmcgbG9hZGluZyBpbWFnZQoJCWlmICggbC5pbWFnZSA9PT0gdW5kZWZpbmVkICkgewoJCQlsLmltYWdlICAgICA9IG5ldyBJbWFnZSgpOwoJCQlsLmltYWdlLnNyYyA9IGwudXJsOwoJCX0KCgkJLy8gQ2xlYXJpbmcgdGFyZ2V0IGVsZW1lbnQKCQllbGVtZW50LmNsZWFyKCBvYmogKTsKCgkJLy8gQ3JlYXRpbmcgbG9hZGluZyBpbWFnZSBpbiB0YXJnZXQgZWxlbWVudAoJCWVsZW1lbnQuY3JlYXRlKCAiaW1nIiwge2FsdDogbGFiZWwuY29tbW9uLmxvYWRpbmcsIHNyYzogbC5pbWFnZS5zcmN9LCBlbGVtZW50LmNyZWF0ZSggImRpdiIsIHsiY2xhc3MiOiAibG9hZGluZyJ9LCBvYmogKSApOwoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIFdyaXRlcyBhcmd1bWVudCB0byB0aGUgY29uc29sZQoJICoKCSAqIEBtZXRob2QgbG9nCgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyAgICBTdHJpbmcgdG8gd3JpdGUgdG8gdGhlIGNvbnNvbGUKCSAqIEBwYXJhbSAge1N0cmluZ30gdGFyZ2V0IFtPcHRpb25hbF0gVGFyZ2V0IGNvbnNvbGUsIGRlZmF1bHQgaXMgImxvZyIKCSAqIEByZXR1cm4ge1VuZGVmaW5lZH0gICAgIHVuZGVmaW5lZAoJICovCglsb2cgOiBmdW5jdGlvbiAoIGFyZywgdGFyZ2V0ICkgewoJCXZhciB0cywgbXNnOwoKCQlpZiAoIHR5cGVvZiBjb25zb2xlICE9PSAidW5kZWZpbmVkIiApIHsKCQkJdHMgID0gdHlwZW9mIGFyZyAhPT0gIm9iamVjdCI7CgkJCW1zZyA9IHRzID8gIlsiICsgbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKSArICJdICIgKyBhcmcgOiBhcmc7CgkJCWNvbnNvbGVbdGFyZ2V0IHx8ICJsb2ciXSggbXNnICk7CgkJfQoJfSwKCgkvKioKCSAqIE1lcmdlcyBvYmogd2l0aCBhcmcKCSAqCgkgKiBAbWV0aG9kIG1lcmdlCgkgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiBPYmplY3QgdG8gZGVjb3JhdGUKCSAqIEBwYXJhbSAge09iamVjdH0gYXJnIERlY29yYXRpb24KCSAqIEByZXR1cm4ge09iamVjdH0gICAgIERlY29yYXRlZCBPYmplY3QKCSAqLwoJbWVyZ2UgOiBmdW5jdGlvbiAoIG9iaiwgYXJnICkgewoJCXV0aWxpdHkuaXRlcmF0ZSggYXJnLCBmdW5jdGlvbiAoIHYsIGsgKSB7CgkJCWlmICggKCBvYmpba10gaW5zdGFuY2VvZiBBcnJheSApICYmICggdiBpbnN0YW5jZW9mIEFycmF5ICkgKSB7CgkJCQlhcnJheS5tZXJnZSggb2JqW2tdLCB2ICk7CgkJCX0KCQkJZWxzZSBpZiAoICggb2JqW2tdIGluc3RhbmNlb2YgT2JqZWN0ICkgJiYgKCB2IGluc3RhbmNlb2YgT2JqZWN0ICkgKSB7CgkJCQl1dGlsaXR5Lml0ZXJhdGUoIHYsIGZ1bmN0aW9uICggeCwgeSApIHsKCQkJCQlvYmpba11beV0gPSB1dGlsaXR5LmNsb25lKCB4ICk7CgkJCQl9KTsKCQkJfQoJCQllbHNlIHsKCQkJCW9ialtrXSA9IHV0aWxpdHkuY2xvbmUoIHYgKTsKCQkJfQoJCX0pOwoKCQlyZXR1cm4gb2JqOwoJfSwKCQoJLyoqCgkgKiBSZWdpc3RlcnMgYSBtb2R1bGUgb24gYWJhYXNvCgkgKgoJICogQG1ldGhvZCBtb2R1bGUKCSAqIEBwYXJhbSAge1N0cmluZ30gYXJnIE1vZHVsZSBuYW1lCgkgKiBAcGFyYW0gIHtPYmplY3R9IG9iaiBNb2R1bGUgc3RydWN0dXJlCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICBNb2R1bGUgcmVnaXN0ZXJlZAoJICovCgltb2R1bGUgOiBmdW5jdGlvbiAoIGFyZywgb2JqICkgewoJCWlmICggJFthcmddICE9PSB1bmRlZmluZWQgfHwgIW9iaiBpbnN0YW5jZW9mIE9iamVjdCApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJfQoJCQoJCSRbYXJnXSA9IG9iajsKCgkJcmV0dXJuICRbYXJnXTsKCX0sCgoJLyoqCgkgKiBSZXR1cm5zIE9iamVjdCwgb3IgcmVmZXJlbmNlIHRvIEVsZW1lbnQKCSAqCgkgKiBAbWV0aG9kIG9iamVjdAoJICogQHByaXZhdGUKCSAqIEBwYXJhbSAge01peGVkfSBvYmogRW50aXR5IG9yICQgcXVlcnkKCSAqIEByZXR1cm4ge01peGVkfSAgICAgRW50aXR5CgkgKi8KCW9iamVjdCA6IGZ1bmN0aW9uICggb2JqICkgewoJCXJldHVybiB0eXBlb2Ygb2JqID09PSAib2JqZWN0IiA/IG9iaiA6ICggb2JqLmNoYXJBdCAmJiBvYmouY2hhckF0KCAwICkgPT09ICIjIiA/IHV0aWxpdHkuJCggb2JqICkgOiBvYmogKTsKCX0sCgoJLyoqCgkgKiBQYXJzZXMgYSBVUkkgaW50byBhbiBPYmplY3QKCSAqCgkgKiBAbWV0aG9kIHBhcnNlCgkgKiBAcGFyYW0gIHtTdHJpbmd9IHVyaSBVUkkgdG8gcGFyc2UKCSAqIEByZXR1cm4ge09iamVjdH0gICAgIFBhcnNlZCBVUkkKCSAqLwoJcGFyc2UgOiBmdW5jdGlvbiAoIHVyaSApIHsKCQl2YXIgb2JqICAgID0ge30sCgkJICAgIHBhcnNlZCA9IHt9OwoKCQlpZiAoIHVyaSA9PT0gdW5kZWZpbmVkICkgewoJCQl1cmkgPSAhc2VydmVyID8gbG9jYXRpb24uaHJlZiA6ICIiOwoJCX0KCgkJaWYgKCAhc2VydmVyICkgewoJCQlvYmogPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiYSIgKTsKCQkJb2JqLmhyZWYgPSB1cmk7CgkJfQoJCWVsc2UgewoJCQlvYmogPSB1cmwucGFyc2UoIHVyaSApOwoJCX0KCgkJaWYgKCBzZXJ2ZXIgKSB7CgkJCXV0aWxpdHkuaXRlcmF0ZSggb2JqLCBmdW5jdGlvbiAoIHYsIGsgKSB7CgkJCQlpZiAoIHYgPT09IG51bGwgKSB7CgkJCQkJb2JqW2tdID0gdW5kZWZpbmVkOwoJCQkJfQoJCQl9KTsKCQl9CgoJCXBhcnNlZCA9IHsKCQkJYXV0aCAgICAgOiBzZXJ2ZXIgPyBudWxsIDogcmVnZXguYXV0aC5leGVjKCB1cmkgKSwKCQkJcHJvdG9jb2wgOiBvYmoucHJvdG9jb2wgfHwgImh0dHA6IiwKCQkJaG9zdG5hbWUgOiBvYmouaG9zdG5hbWUgfHwgImxvY2FsaG9zdCIsCgkJCXBvcnQgICAgIDogb2JqLnBvcnQgPyBudW1iZXIucGFyc2UoIG9iai5wb3J0LCAxMCApIDogIiIsCgkJCXBhdGhuYW1lIDogb2JqLnBhdGhuYW1lLAoJCQlzZWFyY2ggICA6IG9iai5zZWFyY2ggICB8fCAiIiwKCQkJaGFzaCAgICAgOiBvYmouaGFzaCAgICAgfHwgIiIsCgkJCWhvc3QgICAgIDogb2JqLmhvc3QgICAgIHx8ICJsb2NhbGhvc3QiCgkJfTsKCgkJLy8gJ2NhdXNlIElFIGlzIC4uLiBJRTsgcmVxdWlyZWQgZm9yIGRhdGEuYmF0Y2goKQoJCWlmICggY2xpZW50LmllICkgewoJCQlpZiAoIHBhcnNlZC5wcm90b2NvbCA9PT0gIjoiICkgewoJCQkJcGFyc2VkLnByb3RvY29sID0gbG9jYXRpb24ucHJvdG9jb2w7CgkJCX0KCgkJCWlmICggc3RyaW5nLmlzRW1wdHkoIHBhcnNlZC5ob3N0bmFtZSApICkgewoJCQkJcGFyc2VkLmhvc3RuYW1lID0gbG9jYXRpb24uaG9zdG5hbWU7CgkJCX0KCgkJCWlmICggc3RyaW5nLmlzRW1wdHkoIHBhcnNlZC5ob3N0ICkgKSB7CgkJCQlwYXJzZWQuaG9zdCA9IGxvY2F0aW9uLmhvc3Q7CgkJCX0KCgkJCWlmICggcGFyc2VkLnBhdGhuYW1lLmNoYXJBdCggMCApICE9PSAiLyIgKSB7CgkJCQlwYXJzZWQucGF0aG5hbWUgPSAiLyIgKyBwYXJzZWQucGF0aG5hbWU7CgkJCX0KCQl9CgoJCXBhcnNlZC5hdXRoICA9IG9iai5hdXRoIHx8ICggcGFyc2VkLmF1dGggPT09IG51bGwgPyAiIiA6IHBhcnNlZC5hdXRoWzFdICk7CgkJcGFyc2VkLmhyZWYgID0gb2JqLmhyZWYgfHwgKCBwYXJzZWQucHJvdG9jb2wgKyAiLy8iICsgKCBzdHJpbmcuaXNFbXB0eSggcGFyc2VkLmF1dGggKSA/ICIiIDogcGFyc2VkLmF1dGggKyAiQCIgKSArIHBhcnNlZC5ob3N0ICsgcGFyc2VkLnBhdGhuYW1lICsgcGFyc2VkLnNlYXJjaCArIHBhcnNlZC5oYXNoICk7CgkJcGFyc2VkLnBhdGggID0gb2JqLnBhdGggfHwgcGFyc2VkLnBhdGhuYW1lICsgcGFyc2VkLnNlYXJjaDsKCQlwYXJzZWQucXVlcnkgPSB1dGlsaXR5LnF1ZXJ5U3RyaW5nKCBudWxsLCBwYXJzZWQuc2VhcmNoICk7CgoJCXJldHVybiBwYXJzZWQ7Cgl9LAoKCS8qKgoJICogU2V0cyBhIHByb3BlcnR5IG9uIGFuIE9iamVjdCwgaWYgZGVmaW5lUHJvcGVydHkgY2Fubm90IGJlIHVzZWQgdGhlIHZhbHVlIHdpbGwgYmUgc2V0IGNsYXNzaWNhbGx5CgkgKgoJICogQG1ldGhvZCBwcm9wZXJ0eQoJICogQHBhcmFtICB7T2JqZWN0fSBvYmogICAgICAgIE9iamVjdCB0byBkZWNvcmF0ZQoJICogQHBhcmFtICB7U3RyaW5nfSBwcm9wICAgICAgIE5hbWUgb2YgcHJvcGVydHkgdG8gc2V0CgkgKiBAcGFyYW0gIHtPYmplY3R9IGRlc2NyaXB0b3IgRGVzY3JpcHRvciBvZiB0aGUgcHJvcGVydHkKCSAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICBPYmplY3QgcmVjZWl2aW5nIHRoZSBwcm9wZXJ0eQoJICovCglwcm9wZXJ0eSA6IGZ1bmN0aW9uICgpIHsKCQlpZiAoICggc2VydmVyIHx8ICggIWNsaWVudC5pZSB8fCBjbGllbnQudmVyc2lvbiA+IDggKSApICYmIHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgPT09ICJmdW5jdGlvbiIgKSB7CgkJCXJldHVybiBmdW5jdGlvbiAoIG9iaiwgcHJvcCwgZGVzY3JpcHRvciApIHsKCQkJCWlmICggISggZGVzY3JpcHRvciBpbnN0YW5jZW9mIE9iamVjdCApICkgewoJCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCQkJfQoKCQkJCWlmICggZGVzY3JpcHRvci52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIGRlc2NyaXB0b3IuZ2V0ICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJZGVsZXRlIGRlc2NyaXB0b3IudmFsdWU7CgkJCQl9CgoJCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KCBvYmosIHByb3AsIGRlc2NyaXB0b3IgKTsKCQkJfTsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiBmdW5jdGlvbiAoIG9iaiwgcHJvcCwgZGVzY3JpcHRvciApIHsKCQkJCWlmICggISggZGVzY3JpcHRvciBpbnN0YW5jZW9mIE9iamVjdCApICkgewoJCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCQkJfQoKCQkJCW9ialtwcm9wXSA9IGRlc2NyaXB0b3IudmFsdWU7CgoJCQkJcmV0dXJuIG9iajsKCQkJfTsKCQl9Cgl9LAoKCS8qKgoJICogU2V0cyBtZXRob2RzIG9uIGEgcHJvdG90eXBlIG9iamVjdAoJICoKCSAqIEFsbG93cyBob29rcyB0byBiZSBvdmVyd3JpdHRlbgoJICoKCSAqIEBtZXRob2QgcHJvdG8KCSAqIEBwYXJhbSAge09iamVjdH0gb2JqICBPYmplY3QgcmVjZWl2aW5nIHByb3RvdHlwZSBleHRlbnNpb24KCSAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSBJZGVudGlmaWVyIG9mIG9iaiwgZGV0ZXJtaW5lcyB3aGF0IEFycmF5cyB0byBhcHBseQoJICogQHJldHVybiB7T2JqZWN0fSAgICAgIG9iaiBvciB1bmRlZmluZWQKCSAqLwoJcHJvdG8gOiBmdW5jdGlvbiAoIG9iaiwgdHlwZSApIHsKCQl2YXIgdGFyZ2V0ID0gb2JqLnByb3RvdHlwZSB8fCBvYmo7CgoJCXV0aWxpdHkuaXRlcmF0ZSggcHJvdG90eXBlc1t0eXBlXSwgZnVuY3Rpb24gKCB2LCBrICkgewoJCQlpZiAoICF0YXJnZXRba10gKSB7CgkJCQl1dGlsaXR5LnByb3BlcnR5KCB0YXJnZXQsIGssIHt2YWx1ZTogdiwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZX0gKTsKCQkJfQoJCX0pOwoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIFBhcnNlcyBhIHF1ZXJ5IHN0cmluZyAmIGNvZXJjZXMgdmFsdWVzCgkgKgoJICogQG1ldGhvZCBxdWVyeVN0cmluZwoJICogQHBhcmFtICB7U3RyaW5nfSBhcmcgICAgIFtPcHRpb25hbF0gS2V5IHRvIGZpbmQgaW4gdGhlIHF1ZXJ5c3RyaW5nCgkgKiBAcGFyYW0gIHtTdHJpbmd9IHFzdHJpbmcgW09wdGlvbmFsXSBRdWVyeSBzdHJpbmcgdG8gcGFyc2UKCSAqIEByZXR1cm4ge01peGVkfSAgICAgICAgICBWYWx1ZSBvciBPYmplY3Qgb2Yga2V5OnZhbHVlIHBhaXJzCgkgKi8KCXF1ZXJ5U3RyaW5nIDogZnVuY3Rpb24gKCBhcmcsIHFzdHJpbmcgKSB7CgkJdmFyIG9iaiAgICA9IHt9LAoJCSAgICByZXN1bHQgPSBxc3RyaW5nICE9PSB1bmRlZmluZWQgPyAoIHFzdHJpbmcuaW5kZXhPZiggIj8iICkgPiAtMSA/IHFzdHJpbmcucmVwbGFjZSggLy4qXD8vLCAiIiApIDogbnVsbCkgOiAoIHNlcnZlciB8fCBzdHJpbmcuaXNFbXB0eSggbG9jYXRpb24uc2VhcmNoICkgPyBudWxsIDogbG9jYXRpb24uc2VhcmNoLnJlcGxhY2UoICI/IiwgIiIgKSApOwoKCQlpZiAoIHJlc3VsdCAhPT0gbnVsbCAmJiAhc3RyaW5nLmlzRW1wdHkoIHJlc3VsdCApICkgewoJCQlyZXN1bHQgPSByZXN1bHQuc3BsaXQoICImIiApOwoJCQlhcnJheS5lYWNoKCByZXN1bHQsIGZ1bmN0aW9uIChwcm9wICkgewoJCQkJdmFyIGl0ZW0gPSBwcm9wLnNwbGl0KCAiPSIgKTsKCgkJCQlpZiAoIHN0cmluZy5pc0VtcHR5KCBpdGVtWzBdICkgKSB7CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCWlmICggaXRlbVsxXSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCWl0ZW1bMV0gPSAiIjsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCWl0ZW1bMV0gPSB1dGlsaXR5LmNvZXJjZSggZGVjb2RlVVJJQ29tcG9uZW50KCBpdGVtWzFdICkgKTsKCQkJCX0KCgkJCQlpZiAoIG9ialtpdGVtWzBdXSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCW9ialtpdGVtWzBdXSA9IGl0ZW1bMV07CgkJCQl9CgkJCQllbHNlIGlmICggIShvYmpbaXRlbVswXV0gaW5zdGFuY2VvZiBBcnJheSkgKSB7CgkJCQkJb2JqW2l0ZW1bMF1dID0gW29ialtpdGVtWzBdXV07CgkJCQkJb2JqW2l0ZW1bMF1dLnB1c2goIGl0ZW1bMV0gKTsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCW9ialtpdGVtWzBdXS5wdXNoKCBpdGVtWzFdICk7CgkJCQl9CgkJCX0pOwoJCX0KCgkJaWYgKCBhcmcgIT09IG51bGwgJiYgYXJnICE9PSB1bmRlZmluZWQgKSB7CgkJCW9iaiA9IG9ialthcmddOwoJCX0KCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBSZXR1cm5zIGFuIEFycmF5IG9mIHBhcmFtZXRlcnMgb2YgYSBGdW5jdGlvbgoJICoKCSAqIEBtZXRob2QgcmVmbGVjdAoJICogQHBhcmFtICB7RnVuY3Rpb259IGFyZyBGdW5jdGlvbiB0byByZWZsZWN0CgkgKiBAcmV0dXJuIHtBcnJheX0gICAgICAgIEFycmF5IG9mIHBhcmFtZXRlcnMKCSAqLwoJcmVmbGVjdCA6IGZ1bmN0aW9uICggYXJnICkgewoJCWlmICggYXJnID09PSB1bmRlZmluZWQgKSB7CgkJCWFyZyA9IHRoaXMgfHwgdXRpbGl0eS4kOwoJCX0KCgkJYXJnID0gYXJnLnRvU3RyaW5nKCkubWF0Y2goIHJlZ2V4LnJlZmxlY3QgKVsxXTsKCgkJcmV0dXJuIHN0cmluZy5leHBsb2RlKCBhcmcgKTsKCX0sCgoJLyoqCgkgKiBDcmVhdGVzIGEgcmVjdXJzaXZlIGZ1bmN0aW9uCgkgKgoJICogUmV0dXJuIGZhbHNlIGZyb20gdGhlIGZ1bmN0aW9uIHRvIGhhbHQgcmVjdXJzaW9uCgkgKgoJICogQG1ldGhvZCByZXBlYXQKCSAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgRnVuY3Rpb24gdG8gZXhlY3V0ZSByZXBlYXRlZGx5CgkgKiBAcGFyYW0gIHtOdW1iZXJ9ICAgbXMgIE1pbGxpc2Vjb25kcyB0byBzdGFnZ2VyIHRoZSBleGVjdXRpb24KCSAqIEBwYXJhbSAge1N0cmluZ30gICBpZCAgW09wdGlvbmFsXSBUaW1lb3V0IElECgkgKiBAcGFyYW0gIHtCb29sZWFufSAgbm93IEV4ZWN1dGVzIGBmbmAgYW5kIHRoZW4gc2V0dXAgcmVwZXRpdGlvbiwgZGVmYXVsdCBpcyBgdHJ1ZWAKCSAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgVGltZW91dCBJRAoJICovCglyZXBlYXQgOiBmdW5jdGlvbiAoIGZuLCBtcywgaWQsIG5vdyApIHsKCQltcyAgPSBtcyB8fCAxMDsKCQlpZCAgPSBpZCB8fCB1dGlsaXR5LnV1aWQoIHRydWUgKTsKCQlub3cgPSAoIG5vdyAhPT0gZmFsc2UgKTsKCgkJLy8gQ291bGQgYmUgdmFsaWQgdG8gcmV0dXJuIGZhbHNlIGZyb20gaW5pdGlhbCBleGVjdXRpb24KCQlpZiAoIG5vdyAmJiBmbigpID09PSBmYWxzZSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gQ3JlYXRpbmcgcmVwZWF0aW5nIGV4ZWN1dGlvbgoJCXV0aWxpdHkuZGVmZXIoIGZ1bmN0aW9uICgpIHsKCQkJdmFyIHJlY3Vyc2l2ZSA9IGZ1bmN0aW9uICggZm4sIG1zLCBpZCApIHsKCQkJCXZhciByZWN1cnNpdmUgPSB0aGlzOwoKCQkJCWlmICggZm4oKSAhPT0gZmFsc2UgKSB7CgkJCQkJdXRpbGl0eS5yZXBlYXRpbmdbaWRdID0gc2V0VGltZW91dCggZnVuY3Rpb24gKCkgewoJCQkJCQlyZWN1cnNpdmUuY2FsbCggcmVjdXJzaXZlLCBmbiwgbXMsIGlkICk7CgkJCQkJfSwgbXMgKTsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCWRlbGV0ZSB1dGlsaXR5LnJlcGVhdGluZ1tpZF07CgkJCQl9CgkJCX07CgoJCQlyZWN1cnNpdmUuY2FsbCggcmVjdXJzaXZlLCBmbiwgbXMsIGlkICk7CgkJfSwgbXMsIGlkLCB0cnVlICk7CgoJCXJldHVybiBpZDsKCX0sCgoJLyoqCgkgKiBTdG9wcyBhbiBFdmVudCBmcm9tIGJ1YmJsaW5nCgkgKgoJICogQG1ldGhvZCBzdG9wCgkgKiBAcGFyYW0gIHtPYmplY3R9IGUgRXZlbnQKCSAqIEByZXR1cm4ge09iamVjdH0gICBFdmVudAoJICovCglzdG9wIDogZnVuY3Rpb24gKCBlICkgewoJCWlmICggZS5jYW5jZWxCdWJibGUgIT09IHVuZGVmaW5lZCApIHsKCQkJZS5jYW5jZWxCdWJibGUgPSB0cnVlOwoJCX0KCgkJaWYgKCB0eXBlb2YgZS5wcmV2ZW50RGVmYXVsdCA9PT0gImZ1bmN0aW9uIiApIHsKCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCX0KCgkJaWYgKCB0eXBlb2YgZS5zdG9wUHJvcGFnYXRpb24gPT09ICJmdW5jdGlvbiIgKSB7CgkJCWUuc3RvcFByb3BhZ2F0aW9uKCk7CgkJfQoKCQkvLyBBc3N1bWVkIHRvIGFsd2F5cyBiZSB2YWxpZCwgZXZlbiBpZiBpdCdzIG5vdCBkZWNvcmF0ZWQgb24gYGVgICggSSdtIGxvb2tpbmcgYXQgeW91IElFOCApCgkJZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOwoKCQlyZXR1cm4gZTsKCX0sCgoJLyoqCgkgKiBSZXR1cm5zIHRoZSBFdmVudCB0YXJnZXQKCSAqCgkgKiBAbWV0aG9kIHRhcmdldAoJICogQHBhcmFtICB7T2JqZWN0fSBlIEV2ZW50CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgRXZlbnQgdGFyZ2V0CgkgKi8KCXRhcmdldCA6IGZ1bmN0aW9uICggZSApIHsKCQlyZXR1cm4gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50OwoJfSwKCgkvKioKCSAqIFRyYW5zZm9ybXMgSlNPTiB0byBIVE1MIGFuZCBhcHBlbmRzIHRvIEJvZHkgb3IgdGFyZ2V0IEVsZW1lbnQKCSAqCgkgKiBAbWV0aG9kIHRwbAoJICogQHBhcmFtICB7T2JqZWN0fSBkYXRhICAgSlNPTiBPYmplY3QgZGVzY3JpYmluZyBIVE1MCgkgKiBAcGFyYW0gIHtNaXhlZH0gIHRhcmdldCBbT3B0aW9uYWxdIFRhcmdldCBFbGVtZW50IG9yIEVsZW1lbnQuaWQgdG8gcmVjZWl2ZSB0aGUgSFRNTAoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgTmV3IEVsZW1lbnQgY3JlYXRlZCBmcm9tIHRoZSB0ZW1wbGF0ZQoJICovCgl0cGwgOiBmdW5jdGlvbiAoIGFyZywgdGFyZ2V0ICkgewoJCXZhciBmcmFnOwoKCQlpZiAoIHR5cGVvZiBhcmcgIT09ICJvYmplY3QiIHx8ICghKHJlZ2V4Lm9iamVjdF91bmRlZmluZWQudGVzdCggdHlwZW9mIHRhcmdldCApICkgJiYgKCB0YXJnZXQgPSB0YXJnZXQuY2hhckF0KCAwICkgPT09ICIjIiA/IHV0aWxpdHkuJCggdGFyZ2V0ICkgOiB1dGlsaXR5LiQoIHRhcmdldCApWzBdICkgPT09IHVuZGVmaW5lZCApICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCQl9CgoJCWlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7CgkJCXRhcmdldCA9IHV0aWxpdHkuJCggImJvZHkiIClbMF07CgkJfQoKCQlmcmFnICA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKCgkJaWYgKCBhcmcgaW5zdGFuY2VvZiBBcnJheSApIHsKCQkJYXJyYXkuZWFjaCggYXJnLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQllbGVtZW50Lmh0bWwoIGVsZW1lbnQuY3JlYXRlKCBhcnJheS5jYXN0KCBpLCB0cnVlIClbMF0sIGZyYWcgKSwgYXJyYXkuY2FzdChpKVswXSApOwoJCQl9KTsKCQl9CgkJZWxzZSB7CgkJCXV0aWxpdHkuaXRlcmF0ZSggYXJnLCBmdW5jdGlvbiAoIHYsIGsgKSB7CgkJCQlpZiAoIHR5cGVvZiB2ID09PSAic3RyaW5nIiApIHsKCQkJCQllbGVtZW50Lmh0bWwoIGVsZW1lbnQuY3JlYXRlKCBrLCB1bmRlZmluZWQsIGZyYWcgKSwgdiApOwoJCQkJfQoJCQkJZWxzZSBpZiAoICggdiBpbnN0YW5jZW9mIEFycmF5ICkgfHwgKCB2IGluc3RhbmNlb2YgT2JqZWN0ICkgKSB7CgkJCQkJdXRpbGl0eS50cGwoIHYsIGVsZW1lbnQuY3JlYXRlKCBrLCB1bmRlZmluZWQsIGZyYWcgKSApOwoJCQkJfQoJCQl9KTsKCQl9CgoJCXRhcmdldC5hcHBlbmRDaGlsZCggZnJhZyApOwoKCQlyZXR1cm4gYXJyYXkubGFzdCggdGFyZ2V0LmNoaWxkTm9kZXMgKTsKCX0sCgoJLyoqCgkgKiBHZW5lcmF0ZXMgYSB2ZXJzaW9uIDQgVVVJRAoJICoKCSAqIEBtZXRob2QgdXVpZAoJICogQHBhcmFtICB7Qm9vbGVhbn0gc2FmZSBbT3B0aW9uYWxdIFN0cmlwcyAtIGZyb20gVVVJRAoJICogQHJldHVybiB7U3RyaW5nfSAgICAgICBVVUlECgkgKi8KCXV1aWQgOiBmdW5jdGlvbiAoIHNhZmUgKSB7CgkJdmFyIHMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoICggKCAxICsgTWF0aC5yYW5kb20oKSApICogMHgxMDAwMCApIHwgMCApLnRvU3RyaW5nKCAxNiApLnN1YnN0cmluZyggMSApOyB9LAoJCSAgICByID0gWzgsIDksICJhIiwgImIiXSwKCQkgICAgbzsKCgkJbyA9ICggcygpICsgcygpICsgIi0iICsgcygpICsgIi00IiArIHMoKS5zdWJzdHIoIDAsIDMgKSArICItIiArIHJbTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSAqIDQgKV0gKyBzKCkuc3Vic3RyKCAwLCAzICkgKyAiLSIgKyBzKCkgKyBzKCkgKyBzKCkgKTsKCgkJaWYgKCBzYWZlID09PSB0cnVlICkgewoJCQlvID0gby5yZXBsYWNlKCAvLS9nLCAiIiApOwoJCX0KCgkJcmV0dXJuIG87Cgl9LAoKCS8qKgoJICogV2Fsa3MgYSBzdHJ1Y3R1cmUgYW5kIHJldHVybnMgYXJnCgkgKgoJICogQG1ldGhvZCAgd2FsawoJICogQHBhcmFtICB7TWl4ZWR9ICBvYmogIE9iamVjdCBvciBBcnJheQoJICogQHBhcmFtICB7U3RyaW5nfSBhcmcgIFN0cmluZyBkZXNjcmliaW5nIHRoZSBwcm9wZXJ0eSB0byByZXR1cm4KCSAqIEByZXR1cm4ge01peGVkfSAgICAgICBhcmcKCSAqLwoJd2FsayA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJYXJyYXkuZWFjaCggYXJnLnJlcGxhY2UoIC9cXSQvLCAiIiApLnJlcGxhY2UoIC9cXS9nLCAiLiIgKS5yZXBsYWNlKCAvXC5cLi9nLCAiLiIgKS5zcGxpdCggL1wufFxbLyApLCBmdW5jdGlvbiAoIGkgKSB7CgkJCW9iaiA9IG9ialtpXTsKCQl9KTsKCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBBY2NlcHRzIERlZmVycmVkcyBvciBQcm9taXNlcyBhcyBhcmd1bWVudHMgb3IgYW4gQXJyYXkKCSAqCgkgKiBAbWV0aG9kIHdoZW4KCSAqIEByZXR1cm4ge09iamVjdH0gRGVmZXJyZWQKCSAqLwoJd2hlbiA6IGZ1bmN0aW9uICgpIHsKCQl2YXIgaSAgICAgPSAwLAoJCSAgICBkZWZlciA9IGRlZmVycmVkKCksCgkJICAgIGFyZ3MgID0gYXJyYXkuY2FzdCggYXJndW1lbnRzICksCgkJICAgIG50aDsKCgkJLy8gRGlkIHdlIHJlY2VpdmUgYW4gQXJyYXk/IGlmIHNvIGl0IG92ZXJyaWRlcyBhbnkgb3RoZXIgYXJndW1lbnRzCgkJaWYgKCBhcmdzWzBdIGluc3RhbmNlb2YgQXJyYXkgKSB7CgkJCWFyZ3MgPSBhcmdzWzBdOwoJCX0KCgkJLy8gSG93IG1hbnkgaW5zdGFuY2VzIHRvIG9ic2VydmU/CgkJbnRoID0gYXJncy5sZW5ndGg7CgoJCS8vIE5vbmUsIGVuZCBvbiBuZXh0IHRpY2sKCQlpZiAoIG50aCA9PT0gMCApIHsKCQkJZGVmZXIucmVzb2x2ZSggbnVsbCApOwoJCX0KCQkvLyBTZXR1cCBhbmQgd2FpdAoJCWVsc2UgewoJCQlhcnJheS5lYWNoKCBhcmdzLCBmdW5jdGlvbiAoIHAgKSB7CgkJCQlwLnRoZW4oIGZ1bmN0aW9uICgpIHsKCQkJCQlpZiAoICsraSA9PT0gbnRoICYmICFkZWZlci5pc1Jlc29sdmVkKCkpIHsKCQkJCQkJaWYgKCBhcmdzLmxlbmd0aCA+IDEgKSB7CgkJCQkJCQlkZWZlci5yZXNvbHZlKCBhcmdzLm1hcCggZnVuY3Rpb24gKCBvYmogKSB7CgkJCQkJCQkJcmV0dXJuIG9iai52YWx1ZSB8fCBvYmoucHJvbWlzZS52YWx1ZTsKCQkJCQkJCX0pKTsKCQkJCQkJfQoJCQkJCQllbHNlIHsKCQkJCQkJCWRlZmVyLnJlc29sdmUoIGFyZ3NbMF0udmFsdWUgfHwgYXJnc1swXS5wcm9taXNlLnZhbHVlICk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9LCBmdW5jdGlvbiAoKSB7CgkJCQkJaWYgKCAhZGVmZXIuaXNSZXNvbHZlZCgpICkgewoJCQkJCQlpZiAoIGFyZ3MubGVuZ3RoID4gMSApIHsKCQkJCQkJCWRlZmVyLnJlamVjdCggYXJncy5tYXAoIGZ1bmN0aW9uICggb2JqICkgewoJCQkJCQkJCXJldHVybiBvYmoudmFsdWUgfHwgb2JqLnByb21pc2UudmFsdWU7CgkJCQkJCQl9KSk7CgkJCQkJCX0KCQkJCQkJZWxzZSB7CgkJCQkJCQlkZWZlci5yZWplY3QoIGFyZ3NbMF0udmFsdWUgfHwgYXJnc1swXS5wcm9taXNlLnZhbHVlICk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9KTsKCQkJfSk7CgkJfQoKCQlyZXR1cm4gZGVmZXI7Cgl9Cn07CgovKiogQG5hbWVzcGFjZSB2YWxpZGF0ZSAqLwp2YXIgdmFsaWRhdGUgPSB7CgkvKioKCSAqIFZhbGlkYXRlcyBhcmdzIGJhc2VkIG9uIHRoZSB0eXBlIG9yIHBhdHRlcm4gc3BlY2lmaWVkCgkgKgoJICogQG1ldGhvZCB0ZXN0CgkgKiBAcGFyYW0gIHtPYmplY3R9IGFyZ3MgT2JqZWN0IHRvIHRlc3QgeyggcGF0dGVybltuYW1lXSB8fCAvcGF0dGVybi8pIDogKHZhbHVlIHx8ICNvYmplY3QuaWQgKX0KCSAqIEByZXR1cm4ge09iamVjdH0gICAgICBSZXN1bHRzCgkgKi8KCXRlc3QgOiBmdW5jdGlvbiAoIGFyZ3MgKSB7CgkJdmFyIGV4Y2VwdGlvbiA9IGZhbHNlLAoJCSAgICBpbnZhbGlkICAgPSBbXSwKCQkgICAgdmFsdWUgICAgID0gbnVsbCwKCQkgICAgYyAgICAgICAgID0gW10sCgkJICAgIHA7CgoJCWlmICggYXJncy5ub2RlTmFtZSAhPT0gdW5kZWZpbmVkICYmIGFyZ3Mubm9kZU5hbWUgPT09ICJGT1JNIiApIHsKCQkJaWYgKCBzdHJpbmcuaXNFbXB0eSggYXJncy5pZCApICkgewoJCQkJdXRpbGl0eS5nZW5JZCggYXJncyApOwoJCQl9CgoJCQljID0gdXRpbGl0eS4kKCAiIyIgKyBhcmdzLmlkICsgIiBpbnB1dCwgIyIgKyBhcmdzLmlkICsgIiBzZWxlY3QiICk7CgoJCQlhcnJheS5lYWNoKCBjLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQl2YXIgeiA9IHt9LAoJCQkJICAgIHAsIHYsIHI7CgoJCQkJcCA9IHJlZ2V4W2kubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0gPyByZWdleFtpLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldIDogKCAoICFzdHJpbmcuaXNFbXB0eSggaS5pZCApICYmIHJlZ2V4W2kuaWQudG9Mb3dlckNhc2UoKV0gKSA/IHJlZ2V4W2kuaWQudG9Mb3dlckNhc2UoKV0gOiAibm90RW1wdHkiICk7CgkJCQl2ID0gZWxlbWVudC52YWwoIGkgKTsKCgkJCQlpZiAoIHYgPT09IG51bGwgKSB7CgkJCQkJdiA9ICIiOwoJCQkJfQoKCQkJCXpbcF0gPSB2OwoJCQkJciAgICA9IHZhbGlkYXRlLnRlc3QoIHogKTsKCgkJCQlpZiAoICFyLnBhc3MgKSB7CgkJCQkJaW52YWxpZC5wdXNoKCB7ZWxlbWVudDogaSwgdGVzdDogcCwgdmFsdWU6IHZ9ICk7CgkJCQkJZXhjZXB0aW9uID0gdHJ1ZTsKCQkJCX0KCQkJfSk7CgkJfQoJCWVsc2UgewoJCQl1dGlsaXR5Lml0ZXJhdGUoIGFyZ3MsIGZ1bmN0aW9uICggdiwgayApIHsKCQkJCWlmICggdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGwgKSB7CgkJCQkJaW52YWxpZC5wdXNoKCB7dGVzdDogaywgdmFsdWU6IHZ9ICk7CgkJCQkJZXhjZXB0aW9uID0gdHJ1ZTsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJdmFsdWUgPSB2LnRvU3RyaW5nKCkuY2hhckF0KCAwICkgPT09ICIjIiA/ICggdXRpbGl0eS4kKCB2ICkgIT09IHVuZGVmaW5lZCA/IGVsZW1lbnQudmFsKCB1dGlsaXR5LiQoIHYgKSApIDogIiIgKSA6IHY7CgoJCQkJaWYgKCBrID09PSAiZGF0ZSIgKSB7CgkJCQkJaWYgKCBpc05hTiggbmV3IERhdGUoIHZhbHVlICkuZ2V0WWVhcigpICkgKSB7CgkJCQkJCWludmFsaWQucHVzaCgge3Rlc3Q6IGssIHZhbHVlOiB2YWx1ZX0gKTsKCQkJCQkJZXhjZXB0aW9uID0gdHJ1ZTsKCQkJCQl9CgkJCQl9CgkJCQllbHNlIGlmICggayA9PT0gImRvbWFpbiIgKSB7CgkJCQkJaWYgKCAhcmVnZXguZG9tYWluLnRlc3QoIHZhbHVlLnJlcGxhY2UoIHJlZ2V4LnNjaGVtZSwgIiIgKSApICkgewoJCQkJCQlpbnZhbGlkLnB1c2goIHt0ZXN0OiBrLCB2YWx1ZTogdmFsdWV9ICk7CgkJCQkJCWV4Y2VwdGlvbiA9IHRydWU7CgkJCQkJfQoJCQkJfQoJCQkJZWxzZSBpZiAoIGsgPT09ICJkb21haW5pcCIgKSB7CgkJCQkJaWYgKCAhcmVnZXguZG9tYWluLnRlc3QoIHZhbHVlLnJlcGxhY2UoIHJlZ2V4LnNjaGVtZSwgIiIgKSApIHx8ICFyZWdleC5pcC50ZXN0KCB2YWx1ZSApICkgewoJCQkJCQlpbnZhbGlkLnB1c2goIHt0ZXN0OiBrLCB2YWx1ZTogdmFsdWV9ICk7CgkJCQkJCWV4Y2VwdGlvbiA9IHRydWU7CgkJCQkJfQoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJcCA9IHJlZ2V4W2tdIHx8IGs7CgoJCQkJCWlmICggIXAudGVzdCggdmFsdWUgKSApIHsKCQkJCQkJaW52YWxpZC5wdXNoKCB7dGVzdDogaywgdmFsdWU6IHZhbHVlfSApOwoJCQkJCQlleGNlcHRpb24gPSB0cnVlOwoJCQkJCX0KCQkJCX0KCQkJfSk7CgkJfQoKCQlyZXR1cm4ge3Bhc3M6ICFleGNlcHRpb24sIGludmFsaWQ6IGludmFsaWR9OwoJfQp9OwoKLyoqCiAqIFhNTEh0dHBSZXF1ZXN0IHNoaW0gZm9yIG5vZGUuanMKICoKICogQG1ldGhvZCB4aHIKICogQHJldHVybiB7T2JqZWN0fSBYTUxIdHRwUmVxdWVzdCBpbnN0YW5jZQogKi8KdmFyIHhociA9IGZ1bmN0aW9uICgpIHsKCXZhciBVTlNFTlQgICAgICAgICAgID0gMCwKCSAgICBPUEVORUQgICAgICAgICAgID0gMSwKCSAgICBIRUFERVJTX1JFQ0VJVkVEID0gMiwKCSAgICBMT0FESU5HICAgICAgICAgID0gMywKCSAgICBET05FICAgICAgICAgICAgID0gNCwKCSAgICBFUlJfUkVGVVNFRCAgICAgID0gL0VDT05OUkVGVVNFRC8sCgkgICAgcmVhZHkgICAgICAgICAgICA9IG5ldyBSZWdFeHAoIEhFQURFUlNfUkVDRUlWRUQgKyAifCIgKyBMT0FESU5HICksCgkgICAgWE1MSHR0cFJlcXVlc3QsIGhlYWRlcnMsIGhhbmRsZXIsIGhhbmRsZXJFcnJvciwgc3RhdGU7CgoJaGVhZGVycyA9IHsKCQkiVXNlci1BZ2VudCIgICA6ICJhYmFhc28vMy4xMS4xMiBub2RlLmpzLyIgKyBwcm9jZXNzLnZlcnNpb25zLm5vZGUucmVwbGFjZSggL152LywgIiIgKSArICIgKCIgKyBzdHJpbmcuY2FwaXRhbGl6ZSggcHJvY2Vzcy5wbGF0Zm9ybSApICsgIiBWOC8iICsgcHJvY2Vzcy52ZXJzaW9ucy52OCArICIgKSIsCgkJIkNvbnRlbnQtVHlwZSIgOiAidGV4dC9wbGFpbiIsCgkJIkFjY2VwdCIgICAgICAgOiAiKi8qIgoJfTsKCgkvKioKCSAqIENoYW5nZXMgdGhlIHJlYWR5U3RhdGUgb2YgYW4gWE1MSHR0cFJlcXVlc3QKCSAqCgkgKiBAbWV0aG9kIHN0YXRlCgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyBOZXcgcmVhZHlTdGF0ZQoJICogQHJldHVybiB7T2JqZWN0fSAgICAgWE1MSHR0cFJlcXVlc3QgaW5zdGFuY2UKCSAqLwoJc3RhdGUgPSBmdW5jdGlvbiAoIGFyZyApIHsKCQlpZiAoIHRoaXMucmVhZHlTdGF0ZSAhPT0gYXJnICkgewoJCQl0aGlzLnJlYWR5U3RhdGUgPSBhcmc7CgkJCXRoaXMuZGlzcGF0Y2hFdmVudCggInJlYWR5c3RhdGVjaGFuZ2UiICk7CgoJCQlpZiAoIHRoaXMucmVhZHlTdGF0ZSA9PT0gRE9ORSAmJiAhdGhpcy5fZXJyb3IgKSB7CgkJCQl0aGlzLmRpc3BhdGNoRXZlbnQoICJsb2FkIiApOwoJCQkJdGhpcy5kaXNwYXRjaEV2ZW50KCAibG9hZGVuZCIgKTsKCQkJfQoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9OwoKCS8qKgoJICogUmVzcG9uc2UgaGFuZGxlcgoJICoKCSAqIEBtZXRob2QgaGFuZGxlcgoJICogQHBhcmFtICB7T2JqZWN0fSByZXMgSFRUUChTKSBSZXNwb25zZSBPYmplY3QKCSAqIEByZXR1cm4ge3VuZGVmaW5lZH0gIHVuZGVmaW5lZAoJICovCgloYW5kbGVyID0gZnVuY3Rpb24gKCByZXMgKSB7CgkJdmFyIHNlbGYgPSB0aGlzOwoKCQlzdGF0ZS5jYWxsKCB0aGlzLCBIRUFERVJTX1JFQ0VJVkVEICk7CgoJCXRoaXMuc3RhdHVzICAgICAgPSByZXMuc3RhdHVzQ29kZTsKCQl0aGlzLl9yZXNoZWFkZXJzID0gcmVzLmhlYWRlcnM7CgoJCWlmICggdGhpcy5fcmVzaGVhZGVyc1sic2V0LWNvb2tpZSJdICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fcmVzaGVhZGVyc1sic2V0LWNvb2tpZSJdIGluc3RhbmNlb2YgQXJyYXkgKSB7CgkJCXRoaXMuX3Jlc2hlYWRlcnNbInNldC1jb29raWUiXSA9IHRoaXMuX3Jlc2hlYWRlcnNbInNldC1jb29raWUiXS5qb2luKCAiOyIgKTsKCQl9CgoJCXJlcy5vbiggImRhdGEiLCBmdW5jdGlvbiAoIGFyZyApIHsKCQkJcmVzLnNldEVuY29kaW5nKCAidXRmOCIgKTsKCgkJCWlmICggc2VsZi5fc2VuZCApIHsKCQkJCWlmICggYXJnICkgewoJCQkJCXNlbGYucmVzcG9uc2VUZXh0ICs9IGFyZzsKCQkJCX0KCgkJCQlzdGF0ZS5jYWxsKCBzZWxmLCBMT0FESU5HICk7CgkJCX0KCQl9KTsKCgkJcmVzLm9uKCAiZW5kIiwgZnVuY3Rpb24gKCkgewoJCQlpZiAoIHNlbGYuX3NlbmQgKSB7CgkJCQlzdGF0ZS5jYWxsKCBzZWxmLCBET05FICk7CgkJCQlzZWxmLl9zZW5kID0gZmFsc2U7CgkJCX0KCQl9KTsKCX07CgoJLyoqCgkgKiBSZXNwb25zZSBlcnJvciBoYW5kbGVyCgkgKgoJICogQG1ldGhvZCBoYW5kbGVyRXJyb3IKCSAqIEBwYXJhbSAge09iamVjdH0gZSBFcnJvcgoJICogQHJldHVybiB7VW5kZWZpbmVkfSB1bmRlZmluZWQKCSAqLwoJaGFuZGxlckVycm9yID0gZnVuY3Rpb24gKCBlICkgewoJCXRoaXMuc3RhdHVzICAgICAgID0gRVJSX1JFRlVTRUQudGVzdCggZS5tZXNzYWdlICkgPyA1MDMgOiA1MDA7CgkJdGhpcy5zdGF0dXNUZXh0ICAgPSAiIjsKCQl0aGlzLnJlc3BvbnNlVGV4dCA9IGUubWVzc2FnZSB8fCBsYWJlbC5lcnJvci5zZXJ2ZXJFcnJvcjsKCQl0aGlzLl9lcnJvciAgICAgICA9IHRydWU7CgkJdGhpcy5fc2VuZCAgICAgICAgPSBmYWxzZTsKCQl0aGlzLmRpc3BhdGNoRXZlbnQoICJlcnJvciIgKTsKCQlzdGF0ZS5jYWxsKCB0aGlzLCBET05FICk7Cgl9OwoKCS8qKgoJICogWE1MSHR0cFJlcXVlc3QKCSAqCgkgKiBAbWV0aG9kIFhNTEh0dHBSZXF1ZXN0CgkgKiBAY29uc3RydWN0b3IKCSAqIEByZXR1cm4ge09iamVjdH0gWE1MSHR0cFJlcXVlc3QgaW5zdGFuY2UKCSAqLwoJWE1MSHR0cFJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7CgkJdGhpcy5vbmFib3J0ICAgICAgICAgICAgPSBudWxsOwoJCXRoaXMub25lcnJvciAgICAgICAgICAgID0gbnVsbDsKCQl0aGlzLm9ubG9hZCAgICAgICAgICAgICA9IG51bGw7CgkJdGhpcy5vbmxvYWRlbmQgICAgICAgICAgPSBudWxsOwoJCXRoaXMub25sb2Fkc3RhcnQgICAgICAgID0gbnVsbDsKCQl0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7CgkJdGhpcy5yZWFkeVN0YXRlICAgICAgICAgPSBVTlNFTlQ7CgkJdGhpcy5yZXNwb25zZSAgICAgICAgICAgPSBudWxsOwoJCXRoaXMucmVzcG9uc2VUZXh0ICAgICAgID0gIiI7CgkJdGhpcy5yZXNwb25zZVR5cGUgICAgICAgPSAiIjsKCQl0aGlzLnJlc3BvbnNlWE1MICAgICAgICA9IG51bGw7CgkJdGhpcy5zdGF0dXMgICAgICAgICAgICAgPSBVTlNFTlQ7CgkJdGhpcy5zdGF0dXNUZXh0ICAgICAgICAgPSAiIjsKCgkJLy8gUHN1ZWRvIHByaXZhdGUgZm9yIHByb3RvdHlwZSBjaGFpbgoJCXRoaXMuX2lkICAgICAgICAgICAgICAgID0gdXRpbGl0eS5nZW5JZCgpOwoJCXRoaXMuX2Vycm9yICAgICAgICAgICAgID0gZmFsc2U7CgkJdGhpcy5faGVhZGVycyAgICAgICAgICAgPSB7fTsKCQl0aGlzLl9saXN0ZW5lcnMgICAgICAgICA9IHt9OwoJCXRoaXMuX3BhcmFtcyAgICAgICAgICAgID0ge307CgkJdGhpcy5fcmVxdWVzdCAgICAgICAgICAgPSBudWxsOwoJCXRoaXMuX3Jlc2hlYWRlcnMgICAgICAgID0ge307CgkJdGhpcy5fc2VuZCAgICAgICAgICAgICAgPSBmYWxzZTsKCX07CgoJLyoqCgkgKiBBYm9ydHMgYSByZXF1ZXN0CgkgKgoJICogQG1ldGhvZCBhYm9ydAoJICogQHJldHVybiB7T2JqZWN0fSBYTUxIdHRwUmVxdWVzdCBpbnN0YW5jZQoJICovCglYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7CgkJaWYgKCB0aGlzLl9yZXF1ZXN0ICE9PSBudWxsICkgewoJCQl0aGlzLl9yZXF1ZXN0LmFib3J0KCk7CgkJCXRoaXMuX3JlcXVlc3QgPSBudWxsOwoJCX0KCgkJdGhpcy5yZXNwb25zZVRleHQgPSAiIjsKCQl0aGlzLnJlc3BvbnNlWE1MICA9ICIiOwoJCXRoaXMuX2Vycm9yICAgICAgID0gdHJ1ZTsKCQl0aGlzLl9oZWFkZXJzICAgICA9IHt9OwoKCQlpZiAoIHRoaXMuX3NlbmQgPT09IHRydWUgfHwgcmVhZHkudGVzdCggdGhpcy5yZWFkeVN0YXRlICkgKSB7CgkJCXRoaXMuX3NlbmQgPSBmYWxzZTsKCQkJc3RhdGUuY2FsbCggdGhpcywgRE9ORSApOwoJCX0KCgkJdGhpcy5kaXNwYXRjaEV2ZW50KCAiYWJvcnQiICk7CgkJdGhpcy5yZWFkeVN0YXRlID0gVU5TRU5UOwoKCQlyZXR1cm4gdGhpczsKCX07CgoJLyoqCgkgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGFuIFhNTEh0dHBSZXF1ZXN0IGluc3RhbmNlCgkgKgoJICogQG1ldGhvZCBhZGRFdmVudExpc3RlbmVyCgkgKiBAcGFyYW0ge1N0cmluZ30gICBldmVudCBFdmVudCB0byBsaXN0ZW4gZm9yCgkgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAgICBFdmVudCBoYW5kbGVyCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICBYTUxIdHRwUmVxdWVzdCBpbnN0YW5jZQoJICovCglYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICggZXZlbnQsIGZuICkgewoJCWlmICggIXRoaXMuX2xpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eSggZXZlbnQgKSApIHsKCQkJdGhpcy5fbGlzdGVuZXJzW2V2ZW50XSA9IFtdOwoJCX0KCgkJdGhpcy5fbGlzdGVuZXJzW2V2ZW50XS5hZGQoIGZuICk7CgoJCXJldHVybiB0aGlzOwoJfTsKCgkvKioKCSAqIERpc3BhdGNoZXMgYW4gZXZlbnQKCSAqCgkgKiBAbWV0aG9kIGRpc3BhdGNoRXZlbnQKCSAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnQgTmFtZSBvZiBldmVudAoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICBYTUxIdHRwUmVxdWVzdCBpbnN0YW5jZQoJICovCglYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uICggZXZlbnQgKSB7CgkJdmFyIHNlbGYgPSB0aGlzOwoKCQlpZiAoIHR5cGVvZiB0aGlzWyJvbiIgKyBldmVudF0gPT09ICJmdW5jdGlvbiIgKSB7CgkJCXRoaXNbIm9uIiArIGV2ZW50XSgpOwoJCX0KCgkJaWYgKCB0aGlzLl9saXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoIGV2ZW50ICkpIHsKCQkJYXJyYXkuZWFjaCggdGhpcy5fbGlzdGVuZXJzW2V2ZW50XSwgZnVuY3Rpb24gKCBpICkgewoJCQkJaWYgKCB0eXBlb2YgaSA9PT0gImZ1bmN0aW9uIiApIHsKCQkJCQlpLmNhbGwoIHNlbGYgKTsKCQkJCX0KCQkJfSk7CgkJfQoKCQlyZXR1cm4gdGhpczsKCX07CgoJLyoqCgkgKiBHZXRzIGFsbCByZXNwb25zZSBoZWFkZXJzCgkgKgoJICogQG1ldGhvZCBnZXRBbGxSZXNwb25zZUhlYWRlcnMKCSAqIEByZXR1cm4ge09iamVjdH0gUmVzcG9uc2UgaGVhZGVycwoJICovCglYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzID0gZnVuY3Rpb24gKCkgewoJCXZhciByZXN1bHQgPSAiIjsKCgkJaWYgKCB0aGlzLnJlYWR5U3RhdGUgPCBIRUFERVJTX1JFQ0VJVkVEICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRTdGF0ZU5vSGVhZGVycyApOwoJCX0KCgkJdXRpbGl0eS5pdGVyYXRlKCB0aGlzLl9yZXNoZWFkZXJzLCBmdW5jdGlvbiAoIHYsIGsgKSB7CgkJCXJlc3VsdCArPSBrICsgIjogIiArIHYgKyAiXG4iOwoJCX0pOwoKCQlyZXR1cm4gcmVzdWx0OwoJfTsKCgkvKioKCSAqIEdldHMgYSBzcGVjaWZpYyByZXNwb25zZSBoZWFkZXIKCSAqCgkgKiBAbWV0aG9kIGdldFJlc3BvbnNlSGVhZGVyCgkgKiBAcGFyYW0gIHtTdHJpbmd9IGhlYWRlciBIZWFkZXIgdG8gZ2V0CgkgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICBSZXNwb25zZSBoZWFkZXIgdmFsdWUKCSAqLwoJWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLmdldFJlc3BvbnNlSGVhZGVyID0gZnVuY3Rpb24gKCBoZWFkZXIgKSB7CgkJdmFyIHJlc3VsdDsKCgkJaWYgKCB0aGlzLnJlYWR5U3RhdGUgPCBIRUFERVJTX1JFQ0VJVkVEIHx8IHRoaXMuX2Vycm9yICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRTdGF0ZU5vSGVhZGVycyApOwoJCX0KCgkJcmVzdWx0ID0gdGhpcy5fcmVzaGVhZGVyc1toZWFkZXJdIHx8IHRoaXMuX3Jlc2hlYWRlcnNbaGVhZGVyLnRvTG93ZXJDYXNlKCldOwoKCQlyZXR1cm4gcmVzdWx0OwoJfTsKCgkvKioKCSAqIFByZXBhcmVzIGFuIFhNTEh0dHBSZXF1ZXN0IGluc3RhbmNlIHRvIG1ha2UgYSByZXF1ZXN0CgkgKgoJICogQG1ldGhvZCBvcGVuCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBtZXRob2QgICBIVFRQIG1ldGhvZAoJICogQHBhcmFtICB7U3RyaW5nfSAgdXJsICAgICAgVVJMIHRvIHJlY2VpdmUgcmVxdWVzdAoJICogQHBhcmFtICB7Qm9vbGVhbn0gYXN5bmMgICAgW09wdGlvbmFsXSBBc3luY2hyb25vdXMgcmVxdWVzdAoJICogQHBhcmFtICB7U3RyaW5nfSAgdXNlciAgICAgW09wdGlvbmFsXSBCYXNpYyBhdXRoIHVzZXJuYW1lCgkgKiBAcGFyYW0gIHtTdHJpbmd9ICBwYXNzd29yZCBbT3B0aW9uYWxdIEJhc2ljIGF1dGggcGFzc3dvcmQKCSAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgIFhNTEh0dHBSZXF1ZXN0IGluc3RhbmNlCgkgKi8KCVhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCBtZXRob2QsIHVybCwgYXN5bmMsIHVzZXIsIHBhc3N3b3JkICkgewoJCXZhciBzZWxmID0gdGhpczsKCgkJaWYgKCBhc3luYyAhPT0gdW5kZWZpbmVkICYmIGFzeW5jICE9PSB0cnVlKSB7CgkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZFN0YXRlTm9TeW5jICk7CgkJfQoKCQl0aGlzLmFib3J0KCk7CgkJdGhpcy5fZXJyb3IgID0gZmFsc2U7CgkJdGhpcy5fcGFyYW1zID0gewoJCQltZXRob2QgICA6IG1ldGhvZCwKCQkJdXJsICAgICAgOiB1cmwsCgkJCWFzeW5jICAgIDogYXN5bmMgICAgfHwgdHJ1ZSwKCQkJdXNlciAgICAgOiB1c2VyICAgICB8fCBudWxsLAoJCQlwYXNzd29yZCA6IHBhc3N3b3JkIHx8IG51bGwKCQl9OwoKCQl1dGlsaXR5Lml0ZXJhdGUoIGhlYWRlcnMsIGZ1bmN0aW9uICggdiwgayApIHsKCQkJc2VsZi5faGVhZGVyc1trXSA9IHY7CgkJfSk7CgoJCXRoaXMucmVhZHlTdGF0ZSA9IE9QRU5FRDsKCgkJcmV0dXJuIHRoaXM7Cgl9OwoKCS8qKgoJICogT3ZlcnJpZGVzIHRoZSBDb250ZW50LVR5cGUgb2YgdGhlIHJlcXVlc3QKCSAqCgkgKiBAbWV0aG9kIG92ZXJyaWRlTWltZVR5cGUKCSAqIEBwYXJhbSAge1N0cmluZ30gbWltZSBNaW1lIHR5cGUgb2YgdGhlIHJlcXVlc3QgKCBtZWRpYSB0eXBlICkKCSAqIEByZXR1cm4ge09iamVjdH0gICAgICBYTUxIdHRwUmVxdWVzdCBpbnN0YW5jZQoJICovCglYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUub3ZlcnJpZGVNaW1lVHlwZSA9IGZ1bmN0aW9uICggbWltZSApIHsKCQl0aGlzLl9oZWFkZXJzWyJDb250ZW50LVR5cGUiXSA9IG1pbWU7CgoJCXJldHVybiB0aGlzOwoJfTsKCgkvKioKCSAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgZnJvbSBhbiBYTUxIdHRwUmVxdWVzdCBpbnN0YW5jZQoJICoKCSAqIEBtZXRob2QgcmVtb3ZlRXZlbnRMaXN0ZW5lcgoJICogQHBhcmFtIHtTdHJpbmd9ICAgZXZlbnQgRXZlbnQgdG8gbGlzdGVuIGZvcgoJICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gICAgRXZlbnQgaGFuZGxlcgoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgWE1MSHR0cFJlcXVlc3QgaW5zdGFuY2UKCSAqLwoJWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoIGV2ZW50LCBmbiApIHsKCQlpZiAoICF0aGlzLl9saXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoIGV2ZW50ICkgKSB7CgkJCXJldHVybjsKCQl9CgoJCXRoaXMuX2xpc3RlbmVyc1tldmVudF0ucmVtb3ZlKCBmbiApOwoKCQlyZXR1cm4gdGhpczsKCX07CgoJLyoqCgkgKiBTZW5kcyBhbiBYTUxIdHRwUmVxdWVzdCByZXF1ZXN0CgkgKgoJICogQG1ldGhvZCBzZW5kCgkgKiBAcGFyYW0gIHtNaXhlZH0gZGF0YSBbT3B0aW9uYWxdIFBheWxvYWQgdG8gc2VuZCB3aXRoIHRoZSByZXF1ZXN0CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICBYTUxIdHRwUmVxdWVzdCBpbnN0YW5jZQoJICovCglYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICggZGF0YSApIHsKCQlkYXRhICAgICA9IGRhdGEgfHwgbnVsbDsKCQl2YXIgc2VsZiA9IHRoaXMsCgkJICAgIG9wdGlvbnMsIHBhcnNlZCwgcmVxdWVzdCwgb2JqOwoKCQlpZiAoIHRoaXMucmVhZHlTdGF0ZSA8IE9QRU5FRCApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkU3RhdGVOb3RPcGVuICk7CgkJfQoJCWVsc2UgaWYgKCB0aGlzLl9zZW5kICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRTdGF0ZU5vdFNlbmRpbmcgKTsKCQl9CgoJCXBhcnNlZCAgICAgID0gdXRpbGl0eS5wYXJzZSggdGhpcy5fcGFyYW1zLnVybCApOwoJCXBhcnNlZC5wb3J0ID0gcGFyc2VkLnBvcnQgfHwgKCBwYXJzZWQucHJvdG9jb2wgPT09ICJodHRwczoiID8gNDQzIDogODAgKTsKCgkJaWYgKCB0aGlzLl9wYXJhbXMudXNlciAhPT0gbnVsbCAmJiB0aGlzLl9wYXJhbXMucGFzc3dvcmQgIT09IG51bGwgKSB7CgkJCXBhcnNlZC5hdXRoID0gdGhpcy5fcGFyYW1zLnVzZXIgKyAiOiIgKyB0aGlzLl9wYXJhbXMucGFzc3dvcmQ7CgkJfQoKCQkvLyBTcGVjaWZ5aW5nIENvbnRlbnQtTGVuZ3RoIGFjY29yZGluZ2x5CgkJaWYgKCByZWdleC5wdXRfcG9zdC50ZXN0KCB0aGlzLl9wYXJhbXMubWV0aG9kICkgfHwgcmVnZXgucGF0Y2gudGVzdCggdGhpcy5fcGFyYW1zLm1ldGhvZCApICkgewoJCQlpZiAoIGRhdGEgPT09IG51bGwgKSB7CgkJCQl0aGlzLl9oZWFkZXJzWyJjb250ZW50LWxlbmd0aCJdID0gMDsKCQkJfQoJCQllbHNlIGlmICggdHlwZW9mIGRhdGEgPT0gInN0cmluZyIgKSB7CgkJCQl0aGlzLl9oZWFkZXJzWyJjb250ZW50LWxlbmd0aCJdID0gQnVmZmVyLmJ5dGVMZW5ndGgoIGRhdGEgKTsKCQkJfQoJCQllbHNlIGlmICggZGF0YSBpbnN0YW5jZW9mIEJ1ZmZlciB8fCB0eXBlb2YgZGF0YS50b1N0cmluZyA9PSAiZnVuY3Rpb24iICkgewoJCQkJZGF0YSA9IGRhdGEudG9TdHJpbmcoKTsKCQkJCXRoaXMuX2hlYWRlcnNbImNvbnRlbnQtbGVuZ3RoIl0gPSBCdWZmZXIuYnl0ZUxlbmd0aCggZGF0YSApOwoJCQl9CgkJCWVsc2UgewoJCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJCX0KCQl9CgoJCXRoaXMuX2hlYWRlcnMuSG9zdCA9IHBhcnNlZC5ob3N0OwoKCQlvcHRpb25zID0gewoJCQlob3N0bmFtZSA6IHBhcnNlZC5ob3N0bmFtZSwKCQkJcGF0aCAgICAgOiBwYXJzZWQucGF0aCwKCQkJcG9ydCAgICAgOiBwYXJzZWQucG9ydCwKCQkJbWV0aG9kICAgOiB0aGlzLl9wYXJhbXMubWV0aG9kLAoJCQloZWFkZXJzICA6IHRoaXMuX2hlYWRlcnMsCgkJCWFnZW50ICAgIDogZmFsc2UKCQl9OwoKCQlpZiAoIHBhcnNlZC5wcm90b2NvbCA9PT0gImh0dHBzOiIgKSB7CgkJCW9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkID0gZmFsc2U7CgkJfQoKCQlpZiAoIHBhcnNlZC5hdXRoICE9PSB1bmRlZmluZWQgJiYgIXN0cmluZy5pc0VtcHR5KCBwYXJzZWQuYXV0aCApICkgewoJCQlvcHRpb25zLmF1dGggPSBwYXJzZWQuYXV0aDsKCQl9CgoJCXNlbGYuX3NlbmQgPSB0cnVlOwoJCXNlbGYuZGlzcGF0Y2hFdmVudCggInJlYWR5c3RhdGVjaGFuZ2UiICk7CgoJCW9iaiA9IHBhcnNlZC5wcm90b2NvbCA9PT0gImh0dHA6IiA/IGh0dHAgOiBodHRwczsKCgkJcmVxdWVzdCA9IG9iai5yZXF1ZXN0KCBvcHRpb25zLCBmdW5jdGlvbiAoIGFyZyApIHsKCQkJaGFuZGxlci5jYWxsKCBzZWxmLCBhcmcgKTsKCQl9ICkub24oICJlcnJvciIsIGZ1bmN0aW9uICggZSApIHsKCQkJaGFuZGxlckVycm9yLmNhbGwoIHNlbGYsIGUgKTsKCQl9ICkub24oICJ0aW1lb3V0IiwgZnVuY3Rpb24gKCkgewoJCQlyZXF1ZXN0LmFib3J0KCk7CgkJfSApOwoKCQlkYXRhID09PSBudWxsID8gcmVxdWVzdC5zZXRTb2NrZXRLZWVwQWxpdmUoIHRydWUgKSA6IHJlcXVlc3Qud3JpdGUoIGRhdGEsICJ1dGY4IiApOwoJCXRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0OwoJCXJlcXVlc3QuZW5kKCk7CgoJCXNlbGYuZGlzcGF0Y2hFdmVudCggImxvYWRzdGFydCIgKTsKCgkJcmV0dXJuIHRoaXM7Cgl9OwoKCS8qKgoJICogU2V0cyBhIHJlcXVlc3QgaGVhZGVyIG9mIGFuIFhNTEh0dHBSZXF1ZXN0IGluc3RhbmNlCgkgKgoJICogQG1ldGhvZCBzZXRSZXF1ZXN0SGVhZGVyCgkgKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVyIEhUVFAgaGVhZGVyCgkgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgIEhlYWRlciB2YWx1ZQoJICogQHJldHVybiB7T2JqZWN0fSAgICAgICBYTUxIdHRwUmVxdWVzdCBpbnN0YW5jZQoJICovCglYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2V0UmVxdWVzdEhlYWRlciA9IGZ1bmN0aW9uICggaGVhZGVyLCB2YWx1ZSApIHsKCQlpZiAoIHRoaXMucmVhZHlTdGF0ZSAhPT0gT1BFTkVEICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRTdGF0ZU5vdFVzYWJsZSApOwoJCX0KCQllbHNlIGlmICggdGhpcy5fc2VuZCApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkU3RhdGVOb3RTZW5kaW5nICk7CgkJfQoKCQl0aGlzLl9oZWFkZXJzW2hlYWRlcl0gPSB2YWx1ZTsKCgkJcmV0dXJuIHRoaXM7Cgl9OwoKCXJldHVybiBYTUxIdHRwUmVxdWVzdDsKfTsKCi8qKiBAbmFtZXNwYWNlIHhtbCAqLwp2YXIgeG1sID0gewoJLyoqCgkgKiBSZXR1cm5zIFhNTCAoRG9jdW1lbnQpIE9iamVjdCBmcm9tIGEgU3RyaW5nCgkgKgoJICogQG1ldGhvZCBkZWNvZGUKCSAqIEBwYXJhbSAge1N0cmluZ30gYXJnIFhNTCBTdHJpbmcKCSAqIEByZXR1cm4ge09iamVjdH0gICAgIFhNTCBPYmplY3Qgb3IgdW5kZWZpbmVkCgkgKi8KCWRlY29kZSA6IGZ1bmN0aW9uICgpIHsKCQlpZiAoIHNlcnZlciB8fCAhY2xpZW50LmllIHx8IGNsaWVudC52ZXJzaW9uID4gOCApIHsKCQkJcmV0dXJuIGZ1bmN0aW9uICggYXJnICkgewoJCQkJaWYgKCB0eXBlb2YgYXJnICE9PSAic3RyaW5nIiB8fCBzdHJpbmcuaXNFbXB0eSggYXJnICkgKSB7CgkJCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJCQl9CgoJCQkJcmV0dXJuIG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoIGFyZywgInRleHQveG1sIiApOwoJCQl9OwoJCX0KCQllbHNlIHsKCQkJcmV0dXJuIGZ1bmN0aW9uICggYXJnICkgewoJCQkJdmFyIHg7CgoJCQkJaWYgKCB0eXBlb2YgYXJnICE9PSAic3RyaW5nIiB8fCBzdHJpbmcuaXNFbXB0eSggYXJnICkgKSB7CgkJCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJCQl9CgoJCQkJeCA9IG5ldyBBY3RpdmVYT2JqZWN0KCAiTWljcm9zb2Z0LlhNTERPTSIgKTsKCQkJCXguYXN5bmMgPSAiZmFsc2UiOwoJCQkJeC5sb2FkWE1MKCBhcmcgKTsKCgkJCQlyZXR1cm4geDsKCQkJfTsKCQl9Cgl9KCksCgoJLyoqCgkgKiBSZXR1cm5zIFhNTCBTdHJpbmcgZnJvbSBhbiBPYmplY3Qgb3IgQXJyYXkKCSAqCgkgKiBAbWV0aG9kIGVuY29kZQoJICogQHBhcmFtICB7TWl4ZWR9IGFyZyBPYmplY3Qgb3IgQXJyYXkgdG8gY2FzdCB0byBYTUwgU3RyaW5nCgkgKiBAcmV0dXJuIHtTdHJpbmd9ICAgIFhNTCBTdHJpbmcgb3IgdW5kZWZpbmVkCgkgKi8KCWVuY29kZSA6IGZ1bmN0aW9uICggYXJnLCB3cmFwICkgewoJCXRyeSB7CgkJCWlmICggYXJnID09PSB1bmRlZmluZWQgKSB7CgkJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCQkJfQoKCQkJd3JhcCAgICA9ICggd3JhcCAhPT0gZmFsc2UgKTsKCQkJdmFyIHggICA9IHdyYXAgPyAiPHhtbD4iIDogIiIsCgkJCSAgICB0b3AgPSAoIGFyZ3VtZW50c1syXSAhPT0gZmFsc2UgKSwKCQkJICAgIG5vZGU7CgoJCQkvKioKCQkJICogRW5jb2RlcyBhIHZhbHVlIGFzIGEgbm9kZQoJCQkgKgoJCQkgKiBAbWV0aG9kIG5vZGUKCQkJICogQHByaXZhdGUKCQkJICogQHBhcmFtICB7U3RyaW5nfSBuYW1lICBOb2RlIG5hbWUKCQkJICogQHBhcmFtICB7VmFsdWV9ICB2YWx1ZSBOb2RlIHZhbHVlCgkJCSAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgTm9kZQoJCQkgKi8KCQkJbm9kZSA9IGZ1bmN0aW9uICggbmFtZSwgdmFsdWUgKSB7CgkJCQl2YXIgb3V0cHV0ID0gIjxuPnY8L24+IjsKCgkJCQlvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSggInYiLCAoIHJlZ2V4LmNkYXRhLnRlc3QoIHZhbHVlICkgPyAiPCFbQ0RBVEFbIiArIHZhbHVlICsgIl1dPiIgOiB2YWx1ZSApICk7CgkJCQlyZXR1cm4gb3V0cHV0LnJlcGxhY2UoLzwoXC8pP24+L2csICI8JDEiICsgbmFtZSArICI+Iik7CgkJCX07CgoJCQlpZiAoIGFyZyAhPT0gbnVsbCAmJiBhcmcueG1sICE9PSB1bmRlZmluZWQgKSB7CgkJCQlhcmcgPSBhcmcueG1sOwoJCQl9CgoJCQlpZiAoIGFyZyBpbnN0YW5jZW9mIERvY3VtZW50ICkgewoJCQkJYXJnID0gKCBuZXcgWE1MU2VyaWFsaXplcigpICkuc2VyaWFsaXplVG9TdHJpbmcoIGFyZyApOwoJCQl9CgoJCQlpZiAoIHJlZ2V4LmJvb2xlYW5fbnVtYmVyX3N0cmluZy50ZXN0KCB0eXBlb2YgYXJnICkgKSB7CgkJCQl4ICs9IG5vZGUoICJpdGVtIiwgYXJnICk7CgkJCX0KCQkJZWxzZSBpZiAoIHR5cGVvZiBhcmcgPT09ICJvYmplY3QiICkgewoJCQkJdXRpbGl0eS5pdGVyYXRlKCBhcmcsIGZ1bmN0aW9uICggdiwgayApIHsKCQkJCQl4ICs9IHhtbC5lbmNvZGUoIHYsICggdHlwZW9mIHYgPT09ICJvYmplY3QiICksIGZhbHNlICkucmVwbGFjZSggL2l0ZW18eG1sL2csIGlzTmFOKCBrICkgPyBrIDogIml0ZW0iICk7CgkJCQl9KTsKCQkJfQoKCQkJeCArPSB3cmFwID8gIjwveG1sPiIgOiAiIjsKCgkJCWlmICggdG9wICkgewoJCQkJeCA9ICI8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEY4XCI/PiIgKyB4OwoJCQl9CgoJCQlyZXR1cm4geDsKCQl9CgkJY2F0Y2ggKCBlICkgewoJCQl1dGlsaXR5LmVycm9yKCBlLCBhcmd1bWVudHMsIHRoaXMgKTsKCgkJCXJldHVybiB1bmRlZmluZWQ7CgkJfQoJfSwKCgkvKioKCSAqIFZhbGlkYXRlcyBgYXJnYCBpcyBYTUwKCSAqCgkgKiBAbWV0aG9kIHZhbGlkCgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyBTdHJpbmcgdG8gdmFsaWRhdGUKCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgIGB0cnVlYCBpZiB2YWxpZCBYTUwKCSAqLwoJdmFsaWQgOiBmdW5jdGlvbiAoKSB7CgkJaWYgKCBzZXJ2ZXIgfHwgIWNsaWVudC5pZSB8fCBjbGllbnQudmVyc2lvbiA+IDggKSB7CgkJCXJldHVybiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJCXJldHVybiAoIHhtbC5kZWNvZGUoIGFyZyApLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAicGFyc2VyZXJyb3IiICkubGVuZ3RoID09PSAwICk7CgkJCX07CgkJfQoJCWVsc2UgewoJCQlyZXR1cm4gZnVuY3Rpb24gKCBhcmcgKSB7CgkJCQlyZXR1cm4gKCB4bWwuZGVjb2RlKCBhcmcgKS5wYXJzZUVycm9yLmVycm9yQ29kZSA9PT0gMCApOwoJCQl9OwoJCX0KCX0oKQp9OwoKLyoqCiAqIEJvb3RzdHJhcHMgZnJhbWV3b3JrIGFuZCBzZXRzIG9uICQKICoKICogQG1ldGhvZCBib290c3RyYXAKICogQHByaXZhdGUKICogQHJldHVybiB7VW5kZWZpbmVkfSB1bmRlZmluZWQKICovCmJvb3RzdHJhcCA9IGZ1bmN0aW9uICgpIHsKCXZhciBzZWxmID0gdGhpcywKCSAgICBjbGVhbnVwLCBmbjsKCgkvLyBSZW1vdmVzIHJlZmVyZW5jZXMgdG8gZGVsZXRlZCBET00gZWxlbWVudHMsIGF2b2lkaW5nIG1lbW9yeSBsZWFrcwoJY2xlYW51cCA9IGZ1bmN0aW9uICggb2JqICkgewoJCW9ic2VydmVyLnJlbW92ZSggb2JqICk7CgkJYXJyYXkuZWFjaCggYXJyYXkuY2FzdCggb2JqLmNoaWxkTm9kZXMgKSwgZnVuY3Rpb24gKCBpICkgewoJCQljbGVhbnVwKCBpICk7CgkJfSk7Cgl9OwoKCS8vIFJlcGVhdGluZyBmdW5jdGlvbiB0byBjYWxsIGluaXQoKQoJZm4gPSBmdW5jdGlvbiAoKSB7CgkJaWYgKCByZWdleC5jb21wbGV0ZV9sb2FkZWQudGVzdCggZG9jdW1lbnQucmVhZHlTdGF0ZSApICkgewoJCQlpZiAoIHR5cGVvZiBzZWxmLmluaXQgPT09ICJmdW5jdGlvbiIgKSB7CgkJCQlzZWxmLmluaXQuY2FsbCggc2VsZiApOwoJCQl9CgoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJfTsKCgkvLyBCbG9ja2luZyBtdWx0aXBsZSBleGVjdXRpb25zCglkZWxldGUgdGhpcy5ib290c3RyYXA7CgoJLy8gQ3JlYXRpbmcgZXJyb3IgbG9nCgl0aGlzLmVycm9yLmxvZyA9IFtdOwoKCS8vIERlc2NyaWJpbmcgdGhlIENsaWVudAoJaWYgKCAhc2VydmVyICkgewoJCXRoaXMuY2xpZW50LnZlcnNpb24gPSBjbGllbnQudmVyc2lvbiA9IGNsaWVudC52ZXJzaW9uKCk7CgkJdGhpcy5jbGllbnQubW9iaWxlICA9IGNsaWVudC5tb2JpbGUuY2FsbCggdGhpcyApOwoJCXRoaXMuY2xpZW50LnRhYmxldCAgPSBjbGllbnQudGFibGV0LmNhbGwoIHRoaXMgKTsKCgkJLy8gSUU3IGFuZCBvbGRlciBpcyBub3Qgc3VwcG9ydGVkCgkJaWYgKCBjbGllbnQuaWUgJiYgY2xpZW50LnZlcnNpb24gPCA4ICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLnVwZ3JhZGUgKTsKCQl9CgoJCS8vIFN0cmF0ZWdpZXMKCQl0aGlzLmFycmF5LmNhc3QgPSBhcnJheS5jYXN0KCk7CgkJdGhpcy5tb3VzZS52aWV3ID0gbW91c2UudmlldygpOwoJCXRoaXMucHJvcGVydHkgICA9IHV0aWxpdHkucHJvcGVydHkgPSB1dGlsaXR5LnByb3BlcnR5KCk7CgoJCWlmICggQXJyYXkucHJvdG90eXBlLmZpbHRlciA9PT0gdW5kZWZpbmVkICkgewoJCQlBcnJheS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKCBmbiwgc2VsZiApIHsKCQkJCXNlbGYgICAgICAgPSBzZWxmIHx8IHRoaXM7CgkJCQl2YXIgcmVzdWx0ID0gW107CgoJCQkJaWYgKCBzZWxmID09PSB1bmRlZmluZWQgfHwgc2VsZiA9PT0gbnVsbCB8fCB0eXBlb2YgZm4gIT09ICJmdW5jdGlvbiIgKSB7CgkJCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJCQl9CgoJCQkJYXJyYXkuZWFjaCggc2VsZiwgZnVuY3Rpb24gKCBpICkgewoJCQkJCWlmICggZm4uY2FsbCggc2VsZiwgaSApICkgewoJCQkJCQlyZXN1bHQucHVzaCggaSApOwoJCQkJCX0KCQkJCX0pOwoKCQkJCXJldHVybiByZXN1bHQ7CgkJCX07CgkJfQoKCQlpZiAoIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoID09PSB1bmRlZmluZWQgKSB7CgkJCUFycmF5LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKCBmbiwgc2VsZiApIHsKCQkJCXNlbGYgPSBzZWxmIHx8IHRoaXM7CgoJCQkJaWYgKCB0aGlzID09PSBudWxsIHx8IHR5cGVvZiBmbiAhPT0gImZ1bmN0aW9uIiApIHsKCQkJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCQkJCX0KCgkJCQlhcnJheS5lYWNoKCBzZWxmLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQkJZm4uY2FsbCggc2VsZiwgaSApOwoJCQkJfSk7CgkJCX07CgkJfQoKCQlpZiAoIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSB1bmRlZmluZWQgKSB7CgkJCUFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24oIGFyZywgc3RhcnQgKSB7CgkJCQl2YXIgbnRoID0gdGhpcy5sZW5ndGggPj4gMCwKCQkJCSAgICBpICAgPSAoIHN0YXJ0IHx8IDAgKSAtMTsKCgkJCQlpZiAoIHRoaXMgPT09IHVuZGVmaW5lZCB8fCB0aGlzID09PSBudWxsIHx8IGFyZyA9PT0gdW5kZWZpbmVkICkgewoJCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCQkJfQoKCQkJCXdoaWxlICggKytpIDwgbnRoICkgewoJCQkJCWlmICggdGhpc1tpXSA9PT0gYXJnICkgewoJCQkJCQlyZXR1cm4gaTsKCQkJCQl9CgkJCQl9CgoJCQkJcmV0dXJuIC0xOwoJCQl9OwoJCX0KCgkJaWYgKCBBcnJheS5wcm90b3R5cGUubWFwID09PSB1bmRlZmluZWQgKSB7CgkJCUFycmF5LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoIGZuLCBzZWxmICkgewoJCQkJc2VsZiAgICAgICA9IHNlbGYgfHwgdGhpczsKCQkJCXZhciByZXN1bHQgPSBbXTsKCgkJCQlpZiAoIHNlbGYgPT09IHVuZGVmaW5lZCB8fCBzZWxmID09PSBudWxsIHx8IHR5cGVvZiBmbiAhPT0gImZ1bmN0aW9uIiApIHsKCQkJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmVycm9yLmludmFsaWRBcmd1bWVudHMgKTsKCQkJCX0KCgkJCQlhcnJheS5lYWNoKCBzZWxmLCBmdW5jdGlvbiAoIGkgKSB7CgkJCQkJcmVzdWx0LnB1c2goIGZuLmNhbGwoIHNlbGYsIGkgKSApOwoJCQkJfSk7CgoJCQkJcmV0dXJuIHJlc3VsdDsKCQkJfTsKCQl9CgoJCWlmICggQXJyYXkucHJvdG90eXBlLnJlZHVjZSA9PT0gdW5kZWZpbmVkICkgewoJCQlBcnJheS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKCBmbiwgeCApIHsKCQkJCXZhciBudGggPSB0aGlzLmxlbmd0aCA+PiAwLAoJCQkJICAgIGkgICA9IDA7CgoJCQkJaWYgKCB0aGlzID09PSB1bmRlZmluZWQgfHwgdGhpcyA9PT0gbnVsbCB8fCB0eXBlb2YgZm4gIT09ICJmdW5jdGlvbiIgKSB7CgkJCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5lcnJvci5pbnZhbGlkQXJndW1lbnRzICk7CgkJCQl9CgoJCQkJaWYgKCB4ID09PSB1bmRlZmluZWQgKSB7CgkJCQkJaWYgKCBudGggPT09IDAgKSB7CgkJCQkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuZXJyb3IuaW52YWxpZEFyZ3VtZW50cyApOwoJCQkJCX0KCgkJCQkJeCA9IHRoaXNbMF07CgkJCQkJaSA9IDE7CgkJCQl9CgoJCQkJaS0tOwoKCQkJCXdoaWxlICggKytpIDwgbnRoICkgewoJCQkJCXggPSBmbi5jYWxsKCB0aGlzLCB4LCB0aGlzW2ldICk7CgkJCQl9CgoJCQkJcmV0dXJuIHg7CgkJCX07CgkJfQoKCQlpZiAoIEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPT09IHVuZGVmaW5lZCApIHsKCQkJKCBmdW5jdGlvbiAoKSB7CgkJCQl2YXIgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IGZ1bmN0aW9uICggYXJnICkgewoJCQkJCXJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAiLiIgKyBhcmcgKTsKCQkJCX07CgoJCQkJaWYgKCB0eXBlb2YgSFRNTERvY3VtZW50ICE9ICJ1bmRlZmluZWQiICkgewoJCQkJCUVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBIVE1MRG9jdW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lOwoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IGdldEVsZW1lbnRzQnlDbGFzc05hbWU7CgkJCQl9CgkJCX0pKCk7CgkJfQoKCQlpZiAoIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QgPT09IHVuZGVmaW5lZCApIHsKCQkJKCBmdW5jdGlvbiAoIHZpZXcgKSB7CgkJCQl2YXIgQ2xhc3NMaXN0LCBnZXR0ZXIsIHByb3RvLCB0YXJnZXQsIGRlc2NyaXB0b3I7CgoJCQkJaWYgKCAhKCAiSFRNTEVsZW1lbnQiIGluIHZpZXcgKSAmJiAhKCAiRWxlbWVudCIgaW4gdmlldyApICkgewoJCQkJCXJldHVybjsKCQkJCX0KCgkJCQlDbGFzc0xpc3QgPSBmdW5jdGlvbiAoIG9iaiApIHsKCQkJCQl2YXIgY2xhc3NlcyA9IHN0cmluZy5leHBsb2RlKCBvYmouY2xhc3NOYW1lLCAiICIgKSwKCQkJCQkgICAgc2VsZiAgICA9IHRoaXM7CgoJCQkJCWFycmF5LmVhY2goIGNsYXNzZXMsIGZ1bmN0aW9uIChpKSB7CgkJCQkJCXNlbGYucHVzaCggaSApOwoJCQkJCX0pOwoKCQkJCQl0aGlzLnVwZGF0ZUNsYXNzTmFtZSA9IGZ1bmN0aW9uICgpIHsKCQkJCQkJb2JqLmNsYXNzTmFtZSA9IHRoaXMuam9pbiggIiAiICk7CgkJCQkJfTsKCQkJCX07CgoJCQkJZ2V0dGVyID0gZnVuY3Rpb24gKCkgewoJCQkJCXJldHVybiBuZXcgQ2xhc3NMaXN0KCB0aGlzICk7CgkJCQl9OwoKCQkJCXByb3RvICA9IENsYXNzTGlzdC5wcm90b3R5cGUgPSBbXTsKCQkJCXRhcmdldCA9ICggdmlldy5IVE1MRWxlbWVudCB8fCB2aWV3LkVsZW1lbnQgKS5wcm90b3R5cGU7CgoJCQkJcHJvdG8uYWRkID0gZnVuY3Rpb24gKCBhcmcgKSB7CgkJCQkJaWYgKCAhYXJyYXkuY29udGFpbnMoIHRoaXMsIGFyZyApICkgewoJCQkJCQl0aGlzLnB1c2goIGFyZyApOwoJCQkJCQl0aGlzLnVwZGF0ZUNsYXNzTmFtZSgpOwoJCQkJCX0KCQkJCX07CgoJCQkJcHJvdG8uY29udGFpbnMgPSBmdW5jdGlvbiAoIGFyZyApIHsKCQkJCQlyZXR1cm4gYXJyYXkuY29udGFpbnMoIHRoaXMsIGFyZyApOwoJCQkJfTsKCgkJCQlwcm90by5yZW1vdmUgPSBmdW5jdGlvbiAoIGFyZyApIHsKCQkJCQlpZiAoIGFycmF5LmNvbnRhaW5zKHRoaXMsIGFyZykgKSB7CgkJCQkJCWFycmF5LnJlbW92ZSggdGhpcywgYXJnICk7CgkJCQkJCXRoaXMudXBkYXRlQ2xhc3NOYW1lKCk7CgkJCQkJfQoJCQkJfTsKCgkJCQlwcm90by50b2dnbGUgPSBmdW5jdGlvbiAoIGFyZyApIHsKCQkJCQlhcnJheVthcnJheS5jb250YWlucyggdGhpcywgYXJnKSA/ICJyZW1vdmUiIDogImFkZCJdKCB0aGlzLCBhcmcgKTsKCQkJCQl0aGlzLnVwZGF0ZUNsYXNzTmFtZSgpOwoJCQkJfTsKCgkJCQlpZiAoIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSApIHsKCQkJCQlkZXNjcmlwdG9yID0gewoJCQkJCQlnZXQgICAgICAgICAgOiBnZXR0ZXIsCgkJCQkJCWVudW1lcmFibGUgICA6ICFjbGllbnQuaWUgfHwgY2xpZW50LnZlcnNpb24gPiA4ID8gdHJ1ZSA6IGZhbHNlLAoJCQkJCQljb25maWd1cmFibGUgOiB0cnVlCgkJCQkJfTsKCgkJCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KCB0YXJnZXQsICJjbGFzc0xpc3QiLCBkZXNjcmlwdG9yICk7CgkJCQl9CgkJCQllbHNlIGlmICggT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKSB7CgkJCQkJdGFyZ2V0Ll9fZGVmaW5lR2V0dGVyX18oICJjbGFzc0xpc3QiLCBnZXR0ZXIgKTsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCXRocm93IG5ldyBFcnJvciggIkNvdWxkIG5vdCBjcmVhdGUgY2xhc3NMaXN0IHNoaW0iICk7CgkJCQl9CgkJCX0pKCBnbG9iYWwgKTsKCQl9CgoJCWlmICggRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPT09IHVuZGVmaW5lZCApIHsKCQkJRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoIGFyZyApIHsKCQkJCXZhciBmbiAgICA9IHRoaXMsCgkJCQkgICAgYXJncyAgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKTsKCgkJCQlyZXR1cm4gZnVuY3Rpb24gKCkgewoJCQkJCXJldHVybiBmbi5hcHBseSggYXJnLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApOwoJCQkJfTsKCQkJfTsKCQl9Cgl9CgllbHNlIHsKCQkvLyBTdHJhdGVnaWVzCgkJdGhpcy5hcnJheS5jYXN0ID0gYXJyYXkuY2FzdCgpOwoJCXRoaXMucHJvcGVydHkgICA9IHV0aWxpdHkucHJvcGVydHkgPSB1dGlsaXR5LnByb3BlcnR5KCk7CgoJCS8vIFhIUiBzaGltCgkJWE1MSHR0cFJlcXVlc3QgPSB4aHIoKTsKCX0KCgkvLyBDYWNoaW5nIGZ1bmN0aW9ucwoJaGFzICAgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5OwoJc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7CgoJLy8gQmluZGluZyBoZWxwZXIgJiBuYW1lc3BhY2UgdG8gJAoJJCA9IHV0aWxpdHkuJDsKCXV0aWxpdHkubWVyZ2UoICQsIHRoaXMgKTsKCWRlbGV0ZSAkLmluaXQ7CglkZWxldGUgJC5sb2FkaW5nOwoKCS8vIEhvb2tpbmcgYWJhYXNvIGludG8gbmF0aXZlIE9iamVjdHMKCXV0aWxpdHkucHJvdG8oIEFycmF5LCAiYXJyYXkiICk7CgoJaWYgKCB0eXBlb2YgRWxlbWVudCAhPT0gInVuZGVmaW5lZCIgKSB7CgkJdXRpbGl0eS5wcm90byggRWxlbWVudCwgImVsZW1lbnQiICk7Cgl9CgoJaWYgKCBjbGllbnQuaWUgJiYgY2xpZW50LnZlcnNpb24gPT09IDggKSB7CgkJdXRpbGl0eS5wcm90byggSFRNTERvY3VtZW50LCAiZWxlbWVudCIgKTsKCX0KCgl1dGlsaXR5LnByb3RvKCBGdW5jdGlvbiwgImZ1bmN0aW9uIiApOwoJdXRpbGl0eS5wcm90byggTWF0aCwgICAgICJtYXRoIiApOwoJdXRpbGl0eS5wcm90byggTnVtYmVyLCAgICJudW1iZXIiICk7Cgl1dGlsaXR5LnByb3RvKCBTdHJpbmcsICAgInN0cmluZyIgKTsKCgkvLyBTZXR0aW5nIGV2ZW50cyAmIGdhcmJhZ2UgY29sbGVjdGlvbgoJaWYgKCAhc2VydmVyICkgewoJCW9ic2VydmVyLmFkZCggZ2xvYmFsLCAiZXJyb3IiLCBmdW5jdGlvbiAoIGUgKSB7CgkJCW9ic2VydmVyLmZpcmUoIGFiYWFzbywgImVycm9yIiwgZSApOwoJCX0sICJlcnJvciIsIGdsb2JhbCwgImFsbCIpOwoKCQlvYnNlcnZlci5hZGQoIGdsb2JhbCwgImhhc2hjaGFuZ2UiLCBmdW5jdGlvbiAoKSAgewoJCQlvYnNlcnZlci5maXJlKCBhYmFhc28sICJiZWZvcmVIYXNoLCBoYXNoLCBhZnRlckhhc2giLCBsb2NhdGlvbi5oYXNoICk7CgkJfSwgImhhc2giLCBnbG9iYWwsICJhbGwiICk7CgoJCW9ic2VydmVyLmFkZCggZ2xvYmFsLCAibG9hZCIsIGZ1bmN0aW9uICgpICB7CgkJCW9ic2VydmVyLmZpcmUoIGFiYWFzbywgInJlbmRlciIgKTsKCQkJb2JzZXJ2ZXIucmVtb3ZlKCBhYmFhc28sICJyZW5kZXIiICk7CgkJCW9ic2VydmVyLnJlbW92ZSggdGhpcywgImxvYWQiICk7CgkJfSk7CgoJCWlmICggdHlwZW9mIE9iamVjdC5vYnNlcnZlID09PSAiZnVuY3Rpb24iICkgewoJCQlvYnNlcnZlci5hZGQoIGdsb2JhbCwgIkRPTU5vZGVJbnNlcnRlZCIsIGZ1bmN0aW9uICggZSApIHsKCQkJCXZhciBvYmogPSB1dGlsaXR5LnRhcmdldCggZSApOwoKCQkJCU9iamVjdC5vYnNlcnZlKCBvYmosIGZ1bmN0aW9uICggYXJnICkgewoJCQkJCW9ic2VydmVyLmZpcmUoIG9iaiwgImNoYW5nZSIsIGFyZyApOwoJCQkJfSk7CgkJCX0sICJtdXRhdGlvbiIsIGdsb2JhbCwgImFsbCIpOwoJCX0KCgkJb2JzZXJ2ZXIuYWRkKCBnbG9iYWwsICJET01Ob2RlUmVtb3ZlZCIsIGZ1bmN0aW9uIChlICkgewoJCQl2YXIgb2JqID0gdXRpbGl0eS50YXJnZXQoIGUgKTsKCgkJCWlmICggb2JqLmlkICE9PSB1bmRlZmluZWQgJiYgIXN0cmluZy5pc0VtcHR5KCBvYmouaWQgKSAmJiAoIGUucmVsYXRlZE5vZGUgaW5zdGFuY2VvZiBFbGVtZW50ICkgKSB7CgkJCQljbGVhbnVwKCBvYmogKTsKCQkJfQoJCX0sICJtdXRhdGlvbiIsIGdsb2JhbCwgImFsbCIpOwoJfQoKCS8vIENyZWF0aW5nIGEgcHVibGljIGZhY2FkZSBmb3IgYHN0YXRlYAoJaWYgKCAhY2xpZW50LmllIHx8IGNsaWVudC52ZXJzaW9uID4gOCApIHsKCQl1dGlsaXR5LnByb3BlcnR5KCB0aGlzLnN0YXRlLCAiY3VycmVudCIsICB7ZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBzdGF0ZS5nZXRDdXJyZW50LCAgc2V0OiBzdGF0ZS5zZXRDdXJyZW50fSApOwoJCXV0aWxpdHkucHJvcGVydHkoIHRoaXMuc3RhdGUsICJwcmV2aW91cyIsIHtlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IHN0YXRlLmdldFByZXZpb3VzLCBzZXQ6IHN0YXRlLnNldFByZXZpb3VzfSApOwoJCXV0aWxpdHkucHJvcGVydHkoIHRoaXMuc3RhdGUsICJoZWFkZXIiLCAgIHtlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IHN0YXRlLmdldEhlYWRlciwgICBzZXQ6IHN0YXRlLnNldEhlYWRlcn0gKTsKCQl1dGlsaXR5LnByb3BlcnR5KCAkLnN0YXRlLCAgICAiY3VycmVudCIsICB7ZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBzdGF0ZS5nZXRDdXJyZW50LCAgc2V0OiBzdGF0ZS5zZXRDdXJyZW50fSApOwoJCXV0aWxpdHkucHJvcGVydHkoICQuc3RhdGUsICAgICJwcmV2aW91cyIsIHtlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IHN0YXRlLmdldFByZXZpb3VzLCBzZXQ6IHN0YXRlLnNldFByZXZpb3VzfSApOwoJCXV0aWxpdHkucHJvcGVydHkoICQuc3RhdGUsICAgICJoZWFkZXIiLCAgIHtlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IHN0YXRlLmdldEhlYWRlciwgICBzZXQ6IHN0YXRlLnNldEhlYWRlcn0gKTsKCX0KCWVsc2UgewoJCS8vIFB1cmUgaGFja2VyeSwgb25seSBleGlzdHMgd2hlbiBuZWVkZWQKCQkkLnN0YXRlLmN1cnJlbnQgICA9IHRoaXMuc3RhdGUuY3VycmVudCAgID0gdGhpcy5zdGF0ZS5fY3VycmVudDsKCQkkLnN0YXRlLmNoYW5nZSAgICA9IHRoaXMuc3RhdGUuY2hhbmdlICAgID0gZnVuY3Rpb24gKCBhcmcpIHsgcmV0dXJuIHNlbGYuc3RhdGUuY3VycmVudCA9IHN0YXRlLnNldEN1cnJlbnQoYXJnICk7IH07CgkJJC5zdGF0ZS5zZXRIZWFkZXIgPSB0aGlzLnN0YXRlLnNldEhlYWRlciA9IGZ1bmN0aW9uICggYXJnKSB7IHJldHVybiBzZWxmLnN0YXRlLmhlYWRlciAgPSBzdGF0ZS5zZXRIZWFkZXIoYXJnICk7IH07Cgl9CgoJJC5yZWFkeSA9IHRoaXMucmVhZHkgPSB0cnVlOwoKCS8vIEluaXRpYWxpemluZwoJaWYgKCB0eXBlb2YgZXhwb3J0cyAhPT0gInVuZGVmaW5lZCIgfHwgdHlwZW9mIGRlZmluZSA9PSAiZnVuY3Rpb24iIHx8IHJlZ2V4LmNvbXBsZXRlX2xvYWRlZC50ZXN0KCBkb2N1bWVudC5yZWFkeVN0YXRlICkgKSB7CgkJdGhpcy5pbml0KCk7Cgl9CgllbHNlIGlmICggdHlwZW9mIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgPT09ICJmdW5jdGlvbiIgKSB7CgkJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggIkRPTUNvbnRlbnRMb2FkZWQiICwgZnVuY3Rpb24gKCkgewoJCQlzZWxmLmluaXQuY2FsbCggc2VsZiApOwoJCX0sIGZhbHNlKTsKCX0KCWVsc2UgaWYgKCB0eXBlb2YgZG9jdW1lbnQuYXR0YWNoRXZlbnQgPT09ICJmdW5jdGlvbiIgKSB7CgkJZG9jdW1lbnQuYXR0YWNoRXZlbnQoICJvbnJlYWR5c3RhdGVjaGFuZ2UiICwgZm4gKTsKCX0KCWVsc2UgewoJCXV0aWxpdHkucmVwZWF0KCBmbiApOwoJfQp9OwoKcmV0dXJuIHsKCS8vIENsYXNzZXMKCWFycmF5ICAgICAgICAgICA6IGFycmF5LAoJY2FsbGJhY2sgICAgICAgIDoge30sCgljbGllbnQgICAgICAgICAgOiB7CgkJYWN0aXZleCAgICA6IGNsaWVudC5hY3RpdmV4LAoJCWFuZHJvaWQgICAgOiBjbGllbnQuYW5kcm9pZCwKCQlibGFja2JlcnJ5IDogY2xpZW50LmJsYWNrYmVycnksCgkJY2hyb21lICAgICA6IGNsaWVudC5jaHJvbWUsCgkJZmlyZWZveCAgICA6IGNsaWVudC5maXJlZm94LAoJCWllICAgICAgICAgOiBjbGllbnQuaWUsCgkJaW9zICAgICAgICA6IGNsaWVudC5pb3MsCgkJbGludXggICAgICA6IGNsaWVudC5saW51eCwKCQltb2JpbGUgICAgIDogY2xpZW50Lm1vYmlsZSwKCQlvcGVyYSAgICAgIDogY2xpZW50Lm9wZXJhLAoJCW9zeCAgICAgICAgOiBjbGllbnQub3N4LAoJCXBsYXlib29rICAgOiBjbGllbnQucGxheWJvb2ssCgkJc2FmYXJpICAgICA6IGNsaWVudC5zYWZhcmksCgkJdGFibGV0ICAgICA6IGNsaWVudC50YWJsZXQsCgkJdmVyc2lvbiAgICA6IDAsCgkJd2Vib3MgICAgICA6IGNsaWVudC53ZWJvcywKCQl3aW5kb3dzICAgIDogY2xpZW50LndpbmRvd3MsCgkJZGVsICAgICAgICA6IGZ1bmN0aW9uICggdXJpLCBzdWNjZXNzLCBmYWlsdXJlLCBoZWFkZXJzLCB0aW1lb3V0ICkgewoJCQlyZXR1cm4gY2xpZW50LnJlcXVlc3QoIHVyaSwgIkRFTEVURSIsIHN1Y2Nlc3MsIGZhaWx1cmUsIG51bGwsIGhlYWRlcnMsIHRpbWVvdXQgKTsKCQl9LAoJCWdldCAgICAgICAgOiBmdW5jdGlvbiAoIHVyaSwgc3VjY2VzcywgZmFpbHVyZSwgaGVhZGVycywgdGltZW91dCApIHsKCQkJcmV0dXJuIGNsaWVudC5yZXF1ZXN0KCB1cmksICJHRVQiLCBzdWNjZXNzLCBmYWlsdXJlLCBudWxsLCBoZWFkZXJzLCB0aW1lb3V0ICk7CgkJfSwKCQloZWFkZXJzICAgIDogZnVuY3Rpb24gKCB1cmksIHN1Y2Nlc3MsIGZhaWx1cmUsIHRpbWVvdXQgKSB7CgkJCXJldHVybiBjbGllbnQucmVxdWVzdCggdXJpLCAiSEVBRCIsIHN1Y2Nlc3MsIGZhaWx1cmUsIG51bGwsIG51bGwsIHRpbWVvdXQgKTsKCQl9LAoJCXBhdGNoICAgICAgOiBmdW5jdGlvbiAoIHVyaSwgc3VjY2VzcywgZmFpbHVyZSwgYXJncywgaGVhZGVycywgdGltZW91dCApIHsKCQkJcmV0dXJuIGNsaWVudC5yZXF1ZXN0KCB1cmksICJQQVRDSCIsIHN1Y2Nlc3MsIGZhaWx1cmUsIGFyZ3MsIGhlYWRlcnMsIHRpbWVvdXQgKTsKCQl9LAoJCXBvc3QgICAgICAgOiBmdW5jdGlvbiAoIHVyaSwgc3VjY2VzcywgZmFpbHVyZSwgYXJncywgaGVhZGVycywgdGltZW91dCApIHsKCQkJcmV0dXJuIGNsaWVudC5yZXF1ZXN0KCB1cmksICJQT1NUIiwgc3VjY2VzcywgZmFpbHVyZSwgYXJncywgaGVhZGVycywgdGltZW91dCApOwoJCX0sCgkJcHV0ICAgICAgICA6IGZ1bmN0aW9uICggdXJpLCBzdWNjZXNzLCBmYWlsdXJlLCBhcmdzLCBoZWFkZXJzLCB0aW1lb3V0ICkgewoJCQlyZXR1cm4gY2xpZW50LnJlcXVlc3QoIHVyaSwgIlBVVCIsIHN1Y2Nlc3MsIGZhaWx1cmUsIGFyZ3MsIGhlYWRlcnMsIHRpbWVvdXQgKTsKCQl9LAoJCWpzb25wICAgICAgOiBmdW5jdGlvbiAoIHVyaSwgc3VjY2VzcywgZmFpbHVyZSwgY2FsbGJhY2sgKSB7CgkJCXJldHVybiBjbGllbnQuanNvbnAodXJpLCBzdWNjZXNzLCBmYWlsdXJlLCBjYWxsYmFjayApOwoJCX0sCgkJb3B0aW9ucyAgICA6IGZ1bmN0aW9uICggdXJpLCBzdWNjZXNzLCBmYWlsdXJlLCB0aW1lb3V0ICkgewoJCQlyZXR1cm4gY2xpZW50LnJlcXVlc3QodXJpLCAiT1BUSU9OUyIsIHN1Y2Nlc3MsIGZhaWx1cmUsIG51bGwsIG51bGwsIHRpbWVvdXQgKTsKCQl9LAoJCXBlcm1pc3Npb25zOiBjbGllbnQucGVybWlzc2lvbnMsCgkJc2Nyb2xsUG9zICA6IGNsaWVudC5zY3JvbGxQb3MsCgkJc2l6ZSAgICAgICA6IGNsaWVudC5zaXplCgl9LAoJY29va2llICAgICAgICAgIDogY29va2llLAoJZWxlbWVudCAgICAgICAgIDogZWxlbWVudCwKCWpzb24gICAgICAgICAgICA6IGpzb24sCglsYWJlbCAgICAgICAgICAgOiBsYWJlbCwKCWxvYWRpbmcgICAgICAgICA6IHsKCQljcmVhdGUgIDogdXRpbGl0eS5sb2FkaW5nLAoJCXVybCAgICAgOiBudWxsCgl9LAoJbWF0aCAgICAgICAgICAgIDogbWF0aCwKCW1lc3NhZ2UgICAgICAgICA6IG1lc3NhZ2UsCgltb3VzZSAgICAgICAgICAgOiBtb3VzZSwKCW51bWJlciAgICAgICAgICA6IG51bWJlciwKCXJlZ2V4ICAgICAgICAgICA6IHJlZ2V4LAoJc3RhdGUgICAgICAgICAgIDoge30sCglzdHJpbmcgICAgICAgICAgOiBzdHJpbmcsCgl4bWwgICAgICAgICAgICAgOiB4bWwsCgoJLy8gTWV0aG9kcyAmIFByb3BlcnRpZXMKCWFsaWFzICAgICAgICAgICA6IHV0aWxpdHkuYWxpYXMsCglhbGxvd3MgICAgICAgICAgOiBjbGllbnQuYWxsb3dzLAoJYXBwZW5kICAgICAgICAgIDogZnVuY3Rpb24gKCB0eXBlLCBhcmdzLCBvYmogKSB7CgkJaWYgKCBvYmogaW5zdGFuY2VvZiBFbGVtZW50ICkgewoJCQlvYmouZ2VuSWQoKTsKCQl9CgoJCXJldHVybiBlbGVtZW50LmNyZWF0ZSggdHlwZSwgYXJncywgb2JqLCAibGFzdCIgKTsKCX0sCglib290c3RyYXAgICAgICAgOiBib290c3RyYXAsCgljaGFubmVsICAgICAgICAgOiBjaGFubmVsLAoJY2xlYXIgICAgICAgICAgIDogZWxlbWVudC5jbGVhciwKCWNsZWFyVGltZXIgICAgICA6IHV0aWxpdHkuY2xlYXJUaW1lcnMsCgljbG9uZSAgICAgICAgICAgOiB1dGlsaXR5LmNsb25lLAoJY29lcmNlICAgICAgICAgIDogdXRpbGl0eS5jb2VyY2UsCgljb21waWxlICAgICAgICAgOiB1dGlsaXR5LmNvbXBpbGUsCgljcmVhdGUgICAgICAgICAgOiBlbGVtZW50LmNyZWF0ZSwKCWNzcyAgICAgICAgICAgICA6IHV0aWxpdHkuY3NzLAoJZGF0YSAgICAgICAgICAgIDogZGF0YSwKCWRhdGFsaXN0ICAgICAgICA6IGRhdGFsaXN0LmZhY3RvcnksCglkaXNjYXJkICAgICAgICAgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQlyZXR1cm4gb2JzZXJ2ZXIuZGlzY2FyZCggYXJnICk7Cgl9LAoJZGVib3VuY2UgICAgICAgIDogdXRpbGl0eS5kZWJvdW5jZSwKCWRlY29kZSAgICAgICAgICA6IGpzb24uZGVjb2RlLAoJZGVmZXIgICAgICAgICAgIDogZGVmZXJyZWQsCglkZWZpbmUgICAgICAgICAgOiB1dGlsaXR5LmRlZmluZSwKCWRlbCAgICAgICAgICAgICA6IGZ1bmN0aW9uICggdXJpLCBzdWNjZXNzLCBmYWlsdXJlLCBoZWFkZXJzLCB0aW1lb3V0ICkgewoJCXJldHVybiBjbGllbnQucmVxdWVzdCggdXJpLCAiREVMRVRFIiwgc3VjY2VzcywgZmFpbHVyZSwgbnVsbCwgaGVhZGVycywgdGltZW91dCApOwoJfSwKCWRlbGF5ICAgICAgICAgICA6IHV0aWxpdHkuZGVmZXIsCglkZXN0cm95ICAgICAgICAgOiBlbGVtZW50LmRlc3Ryb3ksCgllYWNoICAgICAgICAgICAgOiBhcnJheS5lYWNoLAoJZW5jb2RlICAgICAgICAgIDoganNvbi5lbmNvZGUsCgllcnJvciAgICAgICAgICAgOiB1dGlsaXR5LmVycm9yLAoJZXhwaXJlICAgICAgICAgIDogY2FjaGUuY2xlYW4sCglleHBpcmVzICAgICAgICAgOiAxMjAwMDAsCglmaWIgICAgICAgICAgICAgOiB1dGlsaXR5LmZpYiwKCWV4dGVuZCAgICAgICAgICA6IHV0aWxpdHkuZXh0ZW5kLAoJZmlsdGVyICAgICAgICAgIDogZmlsdGVyLAoJZmlyZSAgICAgICAgICAgIDogZnVuY3Rpb24gKCBvYmosIGV2ZW50ICkgewoJCXZhciBhbGwgID0gdHlwZW9mIG9iaiA9PT0gIm9iamVjdCIsCgkJICAgIG8gICAgPSBhbGwgPyBvYmogICA6IHRoaXMsCgkJICAgIGUgICAgPSBhbGwgPyBldmVudCA6IG9iaiwKCQkgICAgYXJncyA9IFtvLCBlXS5jb25jYXQoIGFycmF5LnJlbW92ZSggYXJyYXkuY2FzdCggYXJndW1lbnRzICksIDAsICFhbGwgPyAwIDogMSApICk7CgoJCXJldHVybiBvYnNlcnZlci5maXJlLmFwcGx5KCBvYnNlcnZlciwgYXJncyApOwoJfSwKCWZyYWcgICAgICAgICAgICA6IGVsZW1lbnQuZnJhZywKCWdlbklkICAgICAgICAgICA6IHV0aWxpdHkuZ2VuSWQsCglnZXQgICAgICAgICAgICAgOiBmdW5jdGlvbiAoIHVyaSwgc3VjY2VzcywgZmFpbHVyZSwgaGVhZGVycywgdGltZW91dCApIHsKCQlyZXR1cm4gY2xpZW50LnJlcXVlc3QoIHVyaSwgIkdFVCIsIHN1Y2Nlc3MsIGZhaWx1cmUsIG51bGwsIGhlYWRlcnMsIHRpbWVvdXQgKTsKCX0sCglncmlkICAgICAgICAgICAgOiBncmlkLAoJZ3VpZCAgICAgICAgICAgIDogZnVuY3Rpb24gKCkgewoJCXJldHVybiB1dGlsaXR5LnV1aWQoKS50b1VwcGVyQ2FzZSgpOwoJfSwKCWhhc2ggICAgICAgICAgICA6IHV0aWxpdHkuaGFzaCwKCWhlYWRlcnMgICAgICAgICA6IGZ1bmN0aW9uICggdXJpLCBzdWNjZXNzLCBmYWlsdXJlLCB0aW1lb3V0ICkgewoJCXJldHVybiBjbGllbnQucmVxdWVzdCggdXJpLCAiSEVBRCIsIHN1Y2Nlc3MsIGZhaWx1cmUsIG51bGwsIHt9LCB0aW1lb3V0ICk7Cgl9LAoJaGV4ICAgICAgICAgICAgIDogdXRpbGl0eS5oZXgsCgloaWRkZW4gICAgICAgICAgOiBlbGVtZW50LmhpZGRlbiwKCWhvb2sgICAgICAgICAgICA6IG9ic2VydmVyLmRlY29yYXRlLAoJaWQgICAgICAgICAgICAgIDogImFiYWFzbyIsCglpbml0ICAgICAgICAgICAgOiBmdW5jdGlvbiAoKSB7CgkJLy8gU3RvcHBpbmcgbXVsdGlwbGUgZXhlY3V0aW9ucwoJCWRlbGV0ZSBhYmFhc28uaW5pdDsKCgkJLy8gQ2FjaGUgZ2FyYmFnZSBjb2xsZWN0b3IgKGV2ZXJ5IG1pbnV0ZSkKCQl1dGlsaXR5LnJlcGVhdCggZnVuY3Rpb24gKCkgewoJCQljYWNoZS5jbGVhbigpOwoJCX0sIDYwMDAwLCAiY2FjaGVHYXJiYWdlQ29sbGVjdG9yIik7CgoJCS8vIEZpcmluZyBldmVudHMgdG8gc2V0dXAKCQlyZXR1cm4gb2JzZXJ2ZXIuZmlyZSggdGhpcywgImluaXQsIHJlYWR5IiApLnVuKCB0aGlzLCAiaW5pdCwgcmVhZHkiICk7Cgl9LAoJaXRlcmF0ZSAgICAgICAgIDogdXRpbGl0eS5pdGVyYXRlLAoJanNvbnAgICAgICAgICAgIDogZnVuY3Rpb24gKCB1cmksIHN1Y2Nlc3MsIGZhaWx1cmUsIGNhbGxiYWNrKSB7CgkJcmV0dXJuIGNsaWVudC5qc29ucCggdXJpLCBzdWNjZXNzLCBmYWlsdXJlLCBjYWxsYmFjayApOwoJfSwKCWxpc3RlbmVycyAgICAgICA6IGZ1bmN0aW9uICggb2JqLCBldmVudCApIHsKCQlyZXR1cm4gb2JzZXJ2ZXIubGlzdCggdHlwZW9mIG9iaiA9PT0gIm9iamVjdCIgPyBvYmogOiB0aGlzLCBldmVudCApOwoJfSwKCWxpc3RlbmVyc1RvdGFsICA6IG9ic2VydmVyLnN1bSwKCWxvZyAgICAgICAgICAgICA6IHV0aWxpdHkubG9nLAoJbG9nZ2luZyAgICAgICAgIDogb2JzZXJ2ZXIubG9nLAoJbHJ1ICAgICAgICAgICAgIDogbHJ1LAoJbWVyZ2UgICAgICAgICAgIDogdXRpbGl0eS5tZXJnZSwKCW1vZHVsZSAgICAgICAgICA6IHV0aWxpdHkubW9kdWxlLAoJb2JqZWN0ICAgICAgICAgIDogdXRpbGl0eS5vYmplY3QsCglvYnNlcnZlcmFibGUgICAgOiBvYnNlcnZlci5kZWNvcmF0ZSwKCW9uICAgICAgICAgICAgICA6IGZ1bmN0aW9uICggb2JqLCBldmVudCwgbGlzdGVuZXIsIGlkLCBzY29wZSwgc3RhdGUgKSB7CgkJdmFyIGFsbCA9IHR5cGVvZiBvYmogPT09ICJvYmplY3QiLAoJCSAgICBvLCBlLCBsLCBpLCBzLCBzdDsKCgkJaWYgKCBhbGwgKSB7CgkJCW8gID0gb2JqOwoJCQllICA9IGV2ZW50OwoJCQlsICA9IGxpc3RlbmVyOwoJCQlpICA9IGlkOwoJCQlzICA9IHNjb3BlOwoJCQlzdCA9IHN0YXRlOwoJCX0KCQllbHNlIHsKCQkJbyAgPSB0aGlzOwoJCQllICA9IG9iajsKCQkJbCAgPSBldmVudDsKCQkJaSAgPSBsaXN0ZW5lcjsKCQkJcyAgPSBpZDsKCQkJc3QgPSBzY29wZTsKCQl9CgoJCWlmICggcyA9PT0gdW5kZWZpbmVkICkgewoJCQlzID0gbzsKCQl9CgoJCXJldHVybiBvYnNlcnZlci5hZGQoIG8sIGUsIGwsIGksIHMsIHN0ICk7Cgl9LAoJb25jZSAgICAgICAgICAgIDogZnVuY3Rpb24gKCBvYmosIGV2ZW50LCBsaXN0ZW5lciwgaWQsIHNjb3BlLCBzdGF0ZSApIHsKCQl2YXIgYWxsID0gdHlwZW9mIG9iaiA9PT0gIm9iamVjdCIsCgkJICAgIG8sIGUsIGwsIGksIHMsIHN0OwoKCQlpZiAoIGFsbCApIHsKCQkJbyAgPSBvYmo7CgkJCWUgID0gZXZlbnQ7CgkJCWwgID0gbGlzdGVuZXI7CgkJCWkgID0gaWQ7CgkJCXMgID0gc2NvcGU7CgkJCXN0ID0gc3RhdGU7CgkJfQoJCWVsc2UgewoJCQlvICA9IHRoaXM7CgkJCWUgID0gb2JqOwoJCQlsICA9IGV2ZW50OwoJCQlpICA9IGxpc3RlbmVyOwoJCQlzICA9IGlkOwoJCQlzdCA9IHNjb3BlOwoJCX0KCgkJaWYgKCBzID09PSB1bmRlZmluZWQgKSB7CgkJCXMgPSBvOwoJCX0KCgkJcmV0dXJuIG9ic2VydmVyLm9uY2UoIG8sIGUsIGwsIGksIHMsIHN0ICk7Cgl9LAoJb3B0aW9ucyAgICAgICAgIDogZnVuY3Rpb24gKCB1cmksIHN1Y2Nlc3MsIGZhaWx1cmUsIHRpbWVvdXQgKSB7CgkJcmV0dXJuIGNsaWVudC5yZXF1ZXN0KCB1cmksICJPUFRJT05TIiwgc3VjY2VzcywgZmFpbHVyZSwgbnVsbCwgbnVsbCwgdGltZW91dCApOwoJfSwKCXBhcnNlICAgICAgICAgICA6IHV0aWxpdHkucGFyc2UsCglwYXRjaCAgICAgICAgICAgOiBmdW5jdGlvbiAoIHVyaSwgc3VjY2VzcywgZmFpbHVyZSwgYXJncywgaGVhZGVycywgdGltZW91dCApIHsKCQlyZXR1cm4gY2xpZW50LnJlcXVlc3QoIHVyaSwgIlBBVENIIiwgc3VjY2VzcywgZmFpbHVyZSwgYXJncywgaGVhZGVycywgdGltZW91dCApOwoJfSwKCXBhdXNlICAgICAgICAgICA6IGZ1bmN0aW9uICggYXJnICkgewoJCXJldHVybiBvYnNlcnZlci5wYXVzZSggKCBhcmcgIT09IGZhbHNlICkgKTsKCX0sCglwZXJtaXNzaW9ucyAgICAgOiBjbGllbnQucGVybWlzc2lvbnMsCglwb3NpdGlvbiAgICAgICAgOiBlbGVtZW50LnBvc2l0aW9uLAoJcG9zdCAgICAgICAgICAgIDogZnVuY3Rpb24gKCB1cmksIHN1Y2Nlc3MsIGZhaWx1cmUsIGFyZ3MsIGhlYWRlcnMsIHRpbWVvdXQgKSB7CgkJcmV0dXJuIGNsaWVudC5yZXF1ZXN0KCB1cmksICJQT1NUIiwgc3VjY2VzcywgZmFpbHVyZSwgYXJncywgaGVhZGVycywgdGltZW91dCApOwoJfSwKCXByZXBlbmQgICAgICAgICA6IGZ1bmN0aW9uICggdHlwZSwgYXJncywgb2JqICkgewoJCWlmICggb2JqIGluc3RhbmNlb2YgRWxlbWVudCApIHsKCQkJb2JqLmdlbklkKCk7CgkJfQoKCQlyZXR1cm4gZWxlbWVudC5jcmVhdGUoIHR5cGUsIGFyZ3MsIG9iaiwgImZpcnN0IiApOwoJfSwKCXByb21pc2UgICAgICAgICA6IHByb21pc2UuZmFjdG9yeSwKCXByb3BlcnR5ICAgICAgICA6IHV0aWxpdHkucHJvcGVydHksCglwdXQgICAgICAgICAgICAgOiBmdW5jdGlvbiAoIHVyaSwgc3VjY2VzcywgZmFpbHVyZSwgYXJncywgaGVhZGVycywgdGltZW91dCApIHsKCQlyZXR1cm4gY2xpZW50LnJlcXVlc3QoIHVyaSwgIlBVVCIsIHN1Y2Nlc3MsIGZhaWx1cmUsIGFyZ3MsIGhlYWRlcnMsIHRpbWVvdXQgKTsKCX0sCglxdWVyeVN0cmluZyAgICAgOiBmdW5jdGlvbiAoIGtleSwgc3RyaW5nICkgewoJCXJldHVybiB1dGlsaXR5LnF1ZXJ5U3RyaW5nKCBrZXksIHN0cmluZyApOwoJfSwKCXJhbmRvbSAgICAgICAgICA6IG51bWJlci5yYW5kb20sCglyZWFkeSAgICAgICAgICAgOiBmYWxzZSwKCXJlZmxlY3QgICAgICAgICA6IHV0aWxpdHkucmVmbGVjdCwKCXJlcGVhdCAgICAgICAgICA6IHV0aWxpdHkucmVwZWF0LAoJcmVwZWF0aW5nICAgICAgIDogZnVuY3Rpb24gKCkgewoJCXJldHVybiBhcnJheS5rZXlzKCB1dGlsaXR5LnJlcGVhdGluZyApOwoJfSwKCXNjcmlwdCAgICAgICAgICA6IGNsaWVudC5zY3JpcHQsCglzY3JvbGwgICAgICAgICAgOiBjbGllbnQuc2Nyb2xsLAoJc2Nyb2xsVG8gICAgICAgIDogZWxlbWVudC5zY3JvbGxUbywKCXN0eWxlc2hlZXQgICAgICA6IGNsaWVudC5zdHlsZXNoZWV0LAoJc3RvcCAgICAgICAgICAgIDogdXRpbGl0eS5zdG9wLAoJc3RvcmUgICAgICAgICAgIDogZGF0YSwKCXRhcmdldCAgICAgICAgICA6IHV0aWxpdHkudGFyZ2V0LAoJdHBsICAgICAgICAgICAgIDogdXRpbGl0eS50cGwsCgl1biAgICAgICAgICAgICAgOiBmdW5jdGlvbiAoIG9iaiwgZXZlbnQsIGlkLCBzdGF0ZSApIHsKCQl2YXIgYWxsID0gdHlwZW9mIG9iaiA9PT0gIm9iamVjdCIsCgkJICAgIG8sIGUsIGksIHM7CgoJCWlmICggYWxsICkgewoJCQlvID0gb2JqOwoJCQllID0gZXZlbnQ7CgkJCWkgPSBpZDsKCQkJcyA9IHN0YXRlOwoJCX0KCQllbHNlIHsKCQkJbyA9IHRoaXM7CgkJCWUgPSBvYmo7CgkJCWkgPSBldmVudDsKCQkJcyA9IGlkOwoJCX0KCgkJcmV0dXJuIG9ic2VydmVyLnJlbW92ZSggbywgZSwgaSwgcyApOwoJfSwKCXVwZGF0ZSAgICAgICAgICA6IGVsZW1lbnQudXBkYXRlLAoJdXVpZCAgICAgICAgICAgIDogdXRpbGl0eS51dWlkLAoJdmFsaWRhdGUgICAgICAgIDogdmFsaWRhdGUudGVzdCwKCXZlcnNpb24gICAgICAgICA6ICIzLjExLjEyIiwKCXdhbGsgICAgICAgICAgICA6IHV0aWxpdHkud2FsaywKCXdoZW4gICAgICAgICAgICA6IHV0aWxpdHkud2hlbgp9OwoKfSkoKTsKCi8vIEJvb3RzdHJhcHBpbmcgdGhlIGZyYW1ld29yawphYmFhc28uYm9vdHN0cmFwKCk7CgovLyBOb2RlLCBBTUQgJiB3aW5kb3cgc3VwcG9ydGVkCmlmICggdHlwZW9mIGV4cG9ydHMgIT09ICJ1bmRlZmluZWQiICkgewoJbW9kdWxlLmV4cG9ydHMgPSAkOwp9CmVsc2UgaWYgKCB0eXBlb2YgZGVmaW5lID09PSAiZnVuY3Rpb24iICkgewoJZGVmaW5lKCAiYWJhYXNvIiwgZnVuY3Rpb24gKCkgewoJCXJldHVybiAkOwoJfSk7Cn0KZWxzZSB7CglnbG9iYWwuYWJhYXNvID0gJDsKfQp9KSggdGhpcyApOwo=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 06:04:39 GMT",
                    "Content-Length": "275735",
                    "Date": "Thu, 06 Nov 2014 06:04:39 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}