{
    "url": "http://localhost:9999/lhorie/mithril/archive/v0.1.20/mithril.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>window.location.pathname</b> and written to <b>the 'href' property of a DOM element</b> via the following statement:<ul><li>element.href = window.location.pathname + modes[m.route.mode] + element.pathname</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/lhorie/mithril/archive/v0.1.20/mithril.js",
                "path": "/lhorie/mithril/archive/v0.1.20/mithril.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9saG9yaWUvbWl0aHJpbC9hcmNoaXZlL3YwLjEuMjAvbWl0aHJpbC5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMjY5NjENCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IEZyaSwgMDcgTm92IDIwMTQgMTY6MTI6MDcgR01UDQpMYXN0LU1vZGlmaWVkOiBGcmksIDA3IE5vdiAyMDE0IDE2OjEyOjA1IEdNVA0KDQpNaXRocmlsID0gbSA9IG5ldyBmdW5jdGlvbiBhcHAod2luZG93LCB1bmRlZmluZWQpIHsKCXZhciB0eXBlID0ge30udG9TdHJpbmcKCXZhciBwYXJzZXIgPSAvKD86KF58I3xcLikoW14jXC5cW1xdXSspKXwoXFsuKz9cXSkvZywgYXR0clBhcnNlciA9IC9cWyguKz8pKD86PSgifCd8KSguKj8pXDIpP1xdLwoJCglmdW5jdGlvbiBtKCkgewoJCXZhciBhcmdzID0gYXJndW1lbnRzCgkJdmFyIGhhc0F0dHJzID0gYXJnc1sxXSAhPT0gdW5kZWZpbmVkICYmIHR5cGUuY2FsbChhcmdzWzFdKSA9PSAiW29iamVjdCBPYmplY3RdIiAmJiAhKCJ0YWciIGluIGFyZ3NbMV0pICYmICEoInN1YnRyZWUiIGluIGFyZ3NbMV0pCgkJdmFyIGF0dHJzID0gaGFzQXR0cnMgPyBhcmdzWzFdIDoge30KCQl2YXIgY2xhc3NBdHRyTmFtZSA9ICJjbGFzcyIgaW4gYXR0cnMgPyAiY2xhc3MiIDogImNsYXNzTmFtZSIKCQl2YXIgY2VsbCA9IHt0YWc6ICJkaXYiLCBhdHRyczoge319CgkJdmFyIG1hdGNoLCBjbGFzc2VzID0gW10KCQl3aGlsZSAobWF0Y2ggPSBwYXJzZXIuZXhlYyhhcmdzWzBdKSkgewoJCQlpZiAobWF0Y2hbMV0gPT0gIiIpIGNlbGwudGFnID0gbWF0Y2hbMl0KCQkJZWxzZSBpZiAobWF0Y2hbMV0gPT0gIiMiKSBjZWxsLmF0dHJzLmlkID0gbWF0Y2hbMl0KCQkJZWxzZSBpZiAobWF0Y2hbMV0gPT0gIi4iKSBjbGFzc2VzLnB1c2gobWF0Y2hbMl0pCgkJCWVsc2UgaWYgKG1hdGNoWzNdWzBdID09ICJbIikgewoJCQkJdmFyIHBhaXIgPSBhdHRyUGFyc2VyLmV4ZWMobWF0Y2hbM10pCgkJCQljZWxsLmF0dHJzW3BhaXJbMV1dID0gcGFpclszXSB8fCAocGFpclsyXSA/ICIiIDp0cnVlKQoJCQl9CgkJfQoJCWlmIChjbGFzc2VzLmxlbmd0aCA+IDApIGNlbGwuYXR0cnNbY2xhc3NBdHRyTmFtZV0gPSBjbGFzc2VzLmpvaW4oIiAiKQoJCQoJCWNlbGwuY2hpbGRyZW4gPSBoYXNBdHRycyA/IGFyZ3NbMl0gOiBhcmdzWzFdCgkJCgkJZm9yICh2YXIgYXR0ck5hbWUgaW4gYXR0cnMpIHsKCQkJaWYgKGF0dHJOYW1lID09IGNsYXNzQXR0ck5hbWUpIGNlbGwuYXR0cnNbYXR0ck5hbWVdID0gKGNlbGwuYXR0cnNbYXR0ck5hbWVdIHx8ICIiKSArICIgIiArIGF0dHJzW2F0dHJOYW1lXQoJCQllbHNlIGNlbGwuYXR0cnNbYXR0ck5hbWVdID0gYXR0cnNbYXR0ck5hbWVdCgkJfQoJCXJldHVybiBjZWxsCgl9CglmdW5jdGlvbiBidWlsZChwYXJlbnRFbGVtZW50LCBwYXJlbnRUYWcsIHBhcmVudENhY2hlLCBwYXJlbnRJbmRleCwgZGF0YSwgY2FjaGVkLCBzaG91bGRSZWF0dGFjaCwgaW5kZXgsIGVkaXRhYmxlLCBuYW1lc3BhY2UsIGNvbmZpZ3MpIHsKCQkvL2BidWlsZGAgaXMgYSByZWN1cnNpdmUgZnVuY3Rpb24gdGhhdCBtYW5hZ2VzIGNyZWF0aW9uL2RpZmZpbmcvcmVtb3ZhbCBvZiBET00gZWxlbWVudHMgYmFzZWQgb24gY29tcGFyaXNvbiBiZXR3ZWVuIGBkYXRhYCBhbmQgYGNhY2hlZGAKCgkJLy9gcGFyZW50RWxlbWVudGAgaXMgYSBET00gZWxlbWVudCB1c2VkIGZvciBXM0MgRE9NIEFQSSBjYWxscwoJCS8vYHBhcmVudFRhZ2AgaXMgb25seSB1c2VkIGZvciBoYW5kbGluZyBhIGNvcm5lciBjYXNlIGZvciB0ZXh0YXJlYSB2YWx1ZXMKCQkvL2BwYXJlbnRDYWNoZWAgaXMgdXNlZCB0byByZW1vdmUgbm9kZXMgaW4gc29tZSBtdWx0aS1ub2RlIGNhc2VzCgkJLy9gcGFyZW50SW5kZXhgIGFuZCBgaW5kZXhgIGFyZSB1c2VkIHRvIGZpZ3VyZSBvdXQgdGhlIG9mZnNldCBvZiBub2Rlcy4gVGhleSdyZSBhcnRpZmFjdHMgZnJvbSBiZWZvcmUgYXJyYXlzIHN0YXJ0ZWQgYmVpbmcgZmxhdHRlbmVkIGFuZCBhcmUgbGlrZWx5IHJlZmFjdG9yYWJsZQoJCS8vYGRhdGFgIGFuZCBgY2FjaGVkYCBhcmUsIHJlc3BlY3RpdmVseSwgdGhlIG5ldyBhbmQgb2xkIG5vZGVzIGJlaW5nIGRpZmZlZAoJCS8vYHNob3VsZFJlYXR0YWNoYCBpcyBhIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIGEgcGFyZW50IG5vZGUgd2FzIHJlY3JlYXRlZCAoaWYgc28sIGFuZCBpZiB0aGlzIG5vZGUgaXMgcmV1c2VkLCB0aGVuIHRoaXMgbm9kZSBtdXN0IHJlYXR0YWNoIGl0c2VsZiB0byB0aGUgbmV3IHBhcmVudCkKCQkvL2BlZGl0YWJsZWAgaXMgYSBmbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgYW4gYW5jZXN0b3IgaXMgY29udGVudGVkaXRhYmxlCgkJLy9gbmFtZXNwYWNlYCBpbmRpY2F0ZXMgdGhlIGNsb3Nlc3QgSFRNTCBuYW1lc3BhY2UgYXMgaXQgY2FzY2FkZXMgZG93biBmcm9tIGFuIGFuY2VzdG9yCgkJLy9gY29uZmlnc2AgaXMgYSBsaXN0IG9mIGNvbmZpZyBmdW5jdGlvbnMgdG8gcnVuIGFmdGVyIHRoZSB0b3Btb3N0IGBidWlsZGAgY2FsbCBmaW5pc2hlcyBydW5uaW5nCgkJCgkJLy90aGVyZSdzIGxvZ2ljIHRoYXQgcmVsaWVzIG9uIHRoZSBhc3N1bXB0aW9uIHRoYXQgbnVsbCBhbmQgdW5kZWZpbmVkIGRhdGEgYXJlIGVxdWl2YWxlbnQgdG8gZW1wdHkgc3RyaW5ncwoJCS8vLSB0aGlzIHByZXZlbnRzIGxpZmVjeWNsZSBzdXJwcmlzZXMgZnJvbSBwcm9jZWR1cmFsIGhlbHBlcnMgdGhhdCBtaXggaW1wbGljaXQgYW5kIGV4cGxpY2l0IHJldHVybiBzdGF0ZW1lbnRzCgkJLy8tIGl0IHNpbXBsaWZpZXMgZGlmZmluZyBjb2RlCgkJaWYgKGRhdGEgPT09IHVuZGVmaW5lZCB8fCBkYXRhID09PSBudWxsKSBkYXRhID0gIiIKCQlpZiAoZGF0YS5zdWJ0cmVlID09PSAicmV0YWluIikgcmV0dXJuIGNhY2hlZAoKCQl2YXIgY2FjaGVkVHlwZSA9IHR5cGUuY2FsbChjYWNoZWQpLCBkYXRhVHlwZSA9IHR5cGUuY2FsbChkYXRhKQoJCWlmIChjYWNoZWQgPT09IHVuZGVmaW5lZCB8fCBjYWNoZWQgPT09IG51bGwgfHwgY2FjaGVkVHlwZSAhPSBkYXRhVHlwZSkgewoJCQlpZiAoY2FjaGVkICE9PSBudWxsICYmIGNhY2hlZCAhPT0gdW5kZWZpbmVkKSB7CgkJCQlpZiAocGFyZW50Q2FjaGUgJiYgcGFyZW50Q2FjaGUubm9kZXMpIHsKCQkJCQl2YXIgb2Zmc2V0ID0gaW5kZXggLSBwYXJlbnRJbmRleAoJCQkJCXZhciBlbmQgPSBvZmZzZXQgKyAoZGF0YVR5cGUgPT0gIltvYmplY3QgQXJyYXldIiA/IGRhdGEgOiBjYWNoZWQubm9kZXMpLmxlbmd0aAoJCQkJCWNsZWFyKHBhcmVudENhY2hlLm5vZGVzLnNsaWNlKG9mZnNldCwgZW5kKSwgcGFyZW50Q2FjaGUuc2xpY2Uob2Zmc2V0LCBlbmQpKQoJCQkJfQoJCQkJZWxzZSBpZiAoY2FjaGVkLm5vZGVzKSBjbGVhcihjYWNoZWQubm9kZXMsIGNhY2hlZCkKCQkJfQoJCQljYWNoZWQgPSBuZXcgZGF0YS5jb25zdHJ1Y3RvcgoJCQljYWNoZWQubm9kZXMgPSBbXQoJCX0KCgkJaWYgKGRhdGFUeXBlID09ICJbb2JqZWN0IEFycmF5XSIpIHsKCQkJZGF0YSA9IGZsYXR0ZW4oZGF0YSkKCQkJdmFyIG5vZGVzID0gW10sIGludGFjdCA9IGNhY2hlZC5sZW5ndGggPT09IGRhdGEubGVuZ3RoLCBzdWJBcnJheUNvdW50ID0gMAoJCQkKCQkJLy9rZXkgYWxnb3JpdGhtOiBzb3J0IGVsZW1lbnRzIHdpdGhvdXQgcmVjcmVhdGluZyB0aGVtIGlmIGtleXMgYXJlIHByZXNlbnQKCQkJLy8xKSBjcmVhdGUgYSBtYXAgb2YgYWxsIGV4aXN0aW5nIGtleXMsIGFuZCBtYXJrIGFsbCBmb3IgZGVsZXRpb24KCQkJLy8yKSBhZGQgbmV3IGtleXMgdG8gbWFwIGFuZCBtYXJrIHRoZW0gZm9yIGFkZGl0aW9uCgkJCS8vMykgaWYga2V5IGV4aXN0cyBpbiBuZXcgbGlzdCwgY2hhbmdlIGFjdGlvbiBmcm9tIGRlbGV0aW9uIHRvIGEgbW92ZQoJCQkvLzQpIGZvciBlYWNoIGtleSwgaGFuZGxlIGl0cyBjb3JyZXNwb25kaW5nIGFjdGlvbiBhcyBtYXJrZWQgaW4gcHJldmlvdXMgc3RlcHMKCQkJLy81KSBjb3B5IHVua2V5ZWQgaXRlbXMgaW50byB0aGVpciByZXNwZWN0aXZlIGdhcHMKCQkJdmFyIERFTEVUSU9OID0gMSwgSU5TRVJUSU9OID0gMiAsIE1PVkUgPSAzCgkJCXZhciBleGlzdGluZyA9IHt9LCB1bmtleWVkID0gW10sIHNob3VsZE1haW50YWluSWRlbnRpdGllcyA9IGZhbHNlCgkJCWZvciAodmFyIGkgPSAwOyBpIDwgY2FjaGVkLmxlbmd0aDsgaSsrKSB7CgkJCQlpZiAoY2FjaGVkW2ldICYmIGNhY2hlZFtpXS5hdHRycyAmJiBjYWNoZWRbaV0uYXR0cnMua2V5ICE9PSB1bmRlZmluZWQpIHsKCQkJCQlzaG91bGRNYWludGFpbklkZW50aXRpZXMgPSB0cnVlCgkJCQkJZXhpc3RpbmdbY2FjaGVkW2ldLmF0dHJzLmtleV0gPSB7YWN0aW9uOiBERUxFVElPTiwgaW5kZXg6IGl9CgkJCQl9CgkJCX0KCQkJaWYgKHNob3VsZE1haW50YWluSWRlbnRpdGllcykgewoJCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CgkJCQkJaWYgKGRhdGFbaV0gJiYgZGF0YVtpXS5hdHRycykgewoJCQkJCQlpZiAoZGF0YVtpXS5hdHRycy5rZXkgIT09IHVuZGVmaW5lZCkgewoJCQkJCQkJdmFyIGtleSA9IGRhdGFbaV0uYXR0cnMua2V5CgkJCQkJCQlpZiAoIWV4aXN0aW5nW2tleV0pIGV4aXN0aW5nW2tleV0gPSB7YWN0aW9uOiBJTlNFUlRJT04sIGluZGV4OiBpfQoJCQkJCQkJZWxzZSBleGlzdGluZ1trZXldID0ge2FjdGlvbjogTU9WRSwgaW5kZXg6IGksIGZyb206IGV4aXN0aW5nW2tleV0uaW5kZXgsIGVsZW1lbnQ6IHBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1tleGlzdGluZ1trZXldLmluZGV4XX0KCQkJCQkJfQoJCQkJCQllbHNlIHVua2V5ZWQucHVzaCh7aW5kZXg6IGksIGVsZW1lbnQ6IHBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1tpXX0pCgkJCQkJfQoJCQkJfQoJCQkJdmFyIGFjdGlvbnMgPSBPYmplY3Qua2V5cyhleGlzdGluZykubWFwKGZ1bmN0aW9uKGtleSkge3JldHVybiBleGlzdGluZ1trZXldfSkKCQkJCXZhciBjaGFuZ2VzID0gYWN0aW9ucy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtyZXR1cm4gYS5hY3Rpb24gLSBiLmFjdGlvbiB8fCBhLmluZGV4IC0gYi5pbmRleH0pCgkJCQl2YXIgbmV3Q2FjaGVkID0gY2FjaGVkLnNsaWNlKCkKCQkJCQoJCQkJZm9yICh2YXIgaSA9IDAsIGNoYW5nZTsgY2hhbmdlID0gY2hhbmdlc1tpXTsgaSsrKSB7CgkJCQkJaWYgKGNoYW5nZS5hY3Rpb24gPT0gREVMRVRJT04pIHsKCQkJCQkJY2xlYXIoY2FjaGVkW2NoYW5nZS5pbmRleF0ubm9kZXMsIGNhY2hlZFtjaGFuZ2UuaW5kZXhdKQoJCQkJCQluZXdDYWNoZWQuc3BsaWNlKGNoYW5nZS5pbmRleCwgMSkKCQkJCQl9CgkJCQkJaWYgKGNoYW5nZS5hY3Rpb24gPT0gSU5TRVJUSU9OKSB7CgkJCQkJCXZhciBkdW1teSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKQoJCQkJCQlkdW1teS5rZXkgPSBkYXRhW2NoYW5nZS5pbmRleF0uYXR0cnMua2V5CgkJCQkJCXBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGR1bW15LCBwYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbY2hhbmdlLmluZGV4XSkKCQkJCQkJbmV3Q2FjaGVkLnNwbGljZShjaGFuZ2UuaW5kZXgsIDAsIHthdHRyczoge2tleTogZGF0YVtjaGFuZ2UuaW5kZXhdLmF0dHJzLmtleX0sIG5vZGVzOiBbZHVtbXldfSkKCQkJCQl9CgkJCQkJCgkJCQkJaWYgKGNoYW5nZS5hY3Rpb24gPT0gTU9WRSkgewoJCQkJCQlpZiAocGFyZW50RWxlbWVudC5jaGlsZE5vZGVzW2NoYW5nZS5pbmRleF0gIT09IGNoYW5nZS5lbGVtZW50ICYmIGNoYW5nZS5lbGVtZW50ICE9PSBudWxsKSB7CgkJCQkJCQlwYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShjaGFuZ2UuZWxlbWVudCwgcGFyZW50RWxlbWVudC5jaGlsZE5vZGVzW2NoYW5nZS5pbmRleF0pCgkJCQkJCX0KCQkJCQkJbmV3Q2FjaGVkW2NoYW5nZS5pbmRleF0gPSBjYWNoZWRbY2hhbmdlLmZyb21dCgkJCQkJfQoJCQkJfQoJCQkJZm9yICh2YXIgaSA9IDA7IGkgPCB1bmtleWVkLmxlbmd0aDsgaSsrKSB7CgkJCQkJdmFyIGNoYW5nZSA9IHVua2V5ZWRbaV0KCQkJCQlwYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShjaGFuZ2UuZWxlbWVudCwgcGFyZW50RWxlbWVudC5jaGlsZE5vZGVzW2NoYW5nZS5pbmRleF0pCgkJCQkJbmV3Q2FjaGVkW2NoYW5nZS5pbmRleF0gPSBjYWNoZWRbY2hhbmdlLmluZGV4XQoJCQkJfQoJCQkJY2FjaGVkID0gbmV3Q2FjaGVkCgkJCQljYWNoZWQubm9kZXMgPSBbXQoJCQkJZm9yICh2YXIgaSA9IDAsIGNoaWxkOyBjaGlsZCA9IHBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1tpXTsgaSsrKSBjYWNoZWQubm9kZXMucHVzaChjaGlsZCkKCQkJfQoJCQkvL2VuZCBrZXkgYWxnb3JpdGhtCgkJCQoJCQlmb3IgKHZhciBpID0gMCwgY2FjaGVDb3VudCA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CgkJCQl2YXIgaXRlbSA9IGJ1aWxkKHBhcmVudEVsZW1lbnQsIHBhcmVudFRhZywgY2FjaGVkLCBpbmRleCwgZGF0YVtpXSwgY2FjaGVkW2NhY2hlQ291bnRdLCBzaG91bGRSZWF0dGFjaCwgaW5kZXggKyBzdWJBcnJheUNvdW50IHx8IHN1YkFycmF5Q291bnQsIGVkaXRhYmxlLCBuYW1lc3BhY2UsIGNvbmZpZ3MpCgkJCQlpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZQoJCQkJaWYgKCFpdGVtLm5vZGVzLmludGFjdCkgaW50YWN0ID0gZmFsc2UKCQkJCXZhciBpc0FycmF5ID0gdHlwZS5jYWxsKGl0ZW0pID09ICJbb2JqZWN0IEFycmF5XSIKCQkJCXN1YkFycmF5Q291bnQgKz0gaXNBcnJheSA/IGl0ZW0ubGVuZ3RoIDogMQoJCQkJY2FjaGVkW2NhY2hlQ291bnQrK10gPSBpdGVtCgkJCX0KCQkJaWYgKCFpbnRhY3QpIHsKCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewoJCQkJCWlmIChjYWNoZWRbaV0gIT09IHVuZGVmaW5lZCkgbm9kZXMgPSBub2Rlcy5jb25jYXQoY2FjaGVkW2ldLm5vZGVzKQoJCQkJfQoJCQkJZm9yICh2YXIgaSA9IDAsIG5vZGU7IG5vZGUgPSBjYWNoZWQubm9kZXNbaV07IGkrKykgewoJCQkJCWlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwgJiYgbm9kZXMuaW5kZXhPZihub2RlKSA8IDApIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKQoJCQkJfQoJCQkJZm9yICh2YXIgaSA9IGNhY2hlZC5ub2Rlcy5sZW5ndGgsIG5vZGU7IG5vZGUgPSBub2Rlc1tpXTsgaSsrKSB7CgkJCQkJaWYgKG5vZGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChub2RlKQoJCQkJfQoJCQkJaWYgKGRhdGEubGVuZ3RoIDwgY2FjaGVkLmxlbmd0aCkgY2FjaGVkLmxlbmd0aCA9IGRhdGEubGVuZ3RoCgkJCQljYWNoZWQubm9kZXMgPSBub2RlcwoJCQl9CgkJCQoJCX0KCQllbHNlIGlmIChkYXRhICE9PSB1bmRlZmluZWQgJiYgZGF0YVR5cGUgPT0gIltvYmplY3QgT2JqZWN0XSIpIHsKCQkJLy9pZiBhbiBlbGVtZW50IGlzIGRpZmZlcmVudCBlbm91Z2ggZnJvbSB0aGUgb25lIGluIGNhY2hlLCByZWNyZWF0ZSBpdAoJCQlpZiAoZGF0YS50YWcgIT0gY2FjaGVkLnRhZyB8fCBPYmplY3Qua2V5cyhkYXRhLmF0dHJzKS5qb2luKCkgIT0gT2JqZWN0LmtleXMoY2FjaGVkLmF0dHJzKS5qb2luKCkgfHwgZGF0YS5hdHRycy5pZCAhPSBjYWNoZWQuYXR0cnMuaWQpIHsKCQkJCWNsZWFyKGNhY2hlZC5ub2RlcykKCQkJCWlmIChjYWNoZWQuY29uZmlnQ29udGV4dCAmJiB0eXBlb2YgY2FjaGVkLmNvbmZpZ0NvbnRleHQub251bmxvYWQgPT0gImZ1bmN0aW9uIikgY2FjaGVkLmNvbmZpZ0NvbnRleHQub251bmxvYWQoKQoJCQl9CgkJCWlmICh0eXBlb2YgZGF0YS50YWcgIT0gInN0cmluZyIpIHJldHVybgoKCQkJdmFyIG5vZGUsIGlzTmV3ID0gY2FjaGVkLm5vZGVzLmxlbmd0aCA9PT0gMAoJCQlpZiAoZGF0YS5hdHRycy54bWxucykgbmFtZXNwYWNlID0gZGF0YS5hdHRycy54bWxucwoJCQllbHNlIGlmIChkYXRhLnRhZyA9PT0gInN2ZyIpIG5hbWVzcGFjZSA9ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKCQkJZWxzZSBpZiAoZGF0YS50YWcgPT09ICJtYXRoIikgbmFtZXNwYWNlID0gImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwiCgkJCWlmIChpc05ldykgewoJCQkJbm9kZSA9IG5hbWVzcGFjZSA9PT0gdW5kZWZpbmVkID8gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZGF0YS50YWcpIDogd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIGRhdGEudGFnKQoJCQkJY2FjaGVkID0gewoJCQkJCXRhZzogZGF0YS50YWcsCgkJCQkJLy9wcm9jZXNzIGNoaWxkcmVuIGJlZm9yZSBhdHRycyBzbyB0aGF0IHNlbGVjdC52YWx1ZSB3b3JrcyBjb3JyZWN0bHkKCQkJCQljaGlsZHJlbjogZGF0YS5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkID8gYnVpbGQobm9kZSwgZGF0YS50YWcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBkYXRhLmNoaWxkcmVuLCBjYWNoZWQuY2hpbGRyZW4sIHRydWUsIDAsIGRhdGEuYXR0cnMuY29udGVudGVkaXRhYmxlID8gbm9kZSA6IGVkaXRhYmxlLCBuYW1lc3BhY2UsIGNvbmZpZ3MpIDogW10sCgkJCQkJYXR0cnM6IHNldEF0dHJpYnV0ZXMobm9kZSwgZGF0YS50YWcsIGRhdGEuYXR0cnMsIHt9LCBuYW1lc3BhY2UpLAoJCQkJCW5vZGVzOiBbbm9kZV0KCQkJCX0KCQkJCXBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIHBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1tpbmRleF0gfHwgbnVsbCkKCQkJfQoJCQllbHNlIHsKCQkJCW5vZGUgPSBjYWNoZWQubm9kZXNbMF0KCQkJCXNldEF0dHJpYnV0ZXMobm9kZSwgZGF0YS50YWcsIGRhdGEuYXR0cnMsIGNhY2hlZC5hdHRycywgbmFtZXNwYWNlKQoJCQkJY2FjaGVkLmNoaWxkcmVuID0gZGF0YS5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkID8gYnVpbGQobm9kZSwgZGF0YS50YWcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBkYXRhLmNoaWxkcmVuLCBjYWNoZWQuY2hpbGRyZW4sIGZhbHNlLCAwLCBkYXRhLmF0dHJzLmNvbnRlbnRlZGl0YWJsZSA/IG5vZGUgOiBlZGl0YWJsZSwgbmFtZXNwYWNlLCBjb25maWdzKSA6IFtdCgkJCQljYWNoZWQubm9kZXMuaW50YWN0ID0gdHJ1ZQoJCQkJaWYgKHNob3VsZFJlYXR0YWNoID09PSB0cnVlICYmIG5vZGUgIT09IG51bGwpIHBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIHBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1tpbmRleF0gfHwgbnVsbCkKCQkJfQoJCQkvL3NjaGVkdWxlIGNvbmZpZ3MgdG8gYmUgY2FsbGVkLiBUaGV5IGFyZSBjYWxsZWQgYWZ0ZXIgYGJ1aWxkYCBmaW5pc2hlcyBydW5uaW5nCgkJCWlmICh0eXBlb2YgZGF0YS5hdHRyc1siY29uZmlnIl0gPT09ICJmdW5jdGlvbiIpIHsKCQkJCWNvbmZpZ3MucHVzaChkYXRhLmF0dHJzWyJjb25maWciXS5iaW5kKHdpbmRvdywgbm9kZSwgIWlzTmV3LCBjYWNoZWQuY29uZmlnQ29udGV4dCA9IGNhY2hlZC5jb25maWdDb250ZXh0IHx8IHt9LCBjYWNoZWQpKQoJCQl9CgkJfQoJCWVsc2UgaWYgKHR5cGVvZiBkYXRhVHlwZSAhPSAiZnVuY3Rpb24iKSB7CgkJCS8vaGFuZGxlIHRleHQgbm9kZXMKCQkJdmFyIG5vZGVzCgkJCWlmIChjYWNoZWQubm9kZXMubGVuZ3RoID09PSAwKSB7CgkJCQlpZiAoZGF0YS4kdHJ1c3RlZCkgewoJCQkJCW5vZGVzID0gaW5qZWN0SFRNTChwYXJlbnRFbGVtZW50LCBpbmRleCwgZGF0YSkKCQkJCX0KCQkJCWVsc2UgewoJCQkJCW5vZGVzID0gW3dpbmRvdy5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKV0KCQkJCQlwYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShub2Rlc1swXSwgcGFyZW50RWxlbWVudC5jaGlsZE5vZGVzW2luZGV4XSB8fCBudWxsKQoJCQkJfQoJCQkJY2FjaGVkID0gInN0cmluZyBudW1iZXIgYm9vbGVhbiIuaW5kZXhPZih0eXBlb2YgZGF0YSkgPiAtMSA/IG5ldyBkYXRhLmNvbnN0cnVjdG9yKGRhdGEpIDogZGF0YQoJCQkJY2FjaGVkLm5vZGVzID0gbm9kZXMKCQkJfQoJCQllbHNlIGlmIChjYWNoZWQudmFsdWVPZigpICE9PSBkYXRhLnZhbHVlT2YoKSB8fCBzaG91bGRSZWF0dGFjaCA9PT0gdHJ1ZSkgewoJCQkJbm9kZXMgPSBjYWNoZWQubm9kZXMKCQkJCWlmICghZWRpdGFibGUgfHwgZWRpdGFibGUgIT09IHdpbmRvdy5kb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7CgkJCQkJaWYgKGRhdGEuJHRydXN0ZWQpIHsKCQkJCQkJY2xlYXIobm9kZXMsIGNhY2hlZCkKCQkJCQkJbm9kZXMgPSBpbmplY3RIVE1MKHBhcmVudEVsZW1lbnQsIGluZGV4LCBkYXRhKQoJCQkJCX0KCQkJCQllbHNlIHsKCQkJCQkJLy9jb3JuZXIgY2FzZTogcmVwbGFjaW5nIHRoZSBub2RlVmFsdWUgb2YgYSB0ZXh0IG5vZGUgdGhhdCBpcyBhIGNoaWxkIG9mIGEgdGV4dGFyZWEvY29udGVudGVkaXRhYmxlIGRvZXNuJ3Qgd29yawoJCQkJCQlpZiAocGFyZW50VGFnID09PSAidGV4dGFyZWEiKSBwYXJlbnRFbGVtZW50LnZhbHVlID0gZGF0YQoJCQkJCQllbHNlIGlmIChlZGl0YWJsZSkgZWRpdGFibGUuaW5uZXJIVE1MID0gZGF0YQoJCQkJCQllbHNlIHsKCQkJCQkJCWlmIChub2Rlc1swXS5ub2RlVHlwZSA9PSAxIHx8IG5vZGVzLmxlbmd0aCA+IDEpIHsgLy93YXMgYSB0cnVzdGVkIHN0cmluZwoJCQkJCQkJCWNsZWFyKGNhY2hlZC5ub2RlcywgY2FjaGVkKQoJCQkJCQkJCW5vZGVzID0gW3dpbmRvdy5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKV0KCQkJCQkJCX0KCQkJCQkJCXBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKG5vZGVzWzBdLCBwYXJlbnRFbGVtZW50LmNoaWxkTm9kZXNbaW5kZXhdIHx8IG51bGwpCgkJCQkJCQlub2Rlc1swXS5ub2RlVmFsdWUgPSBkYXRhCgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCQljYWNoZWQgPSBuZXcgZGF0YS5jb25zdHJ1Y3RvcihkYXRhKQoJCQkJY2FjaGVkLm5vZGVzID0gbm9kZXMKCQkJfQoJCQllbHNlIGNhY2hlZC5ub2Rlcy5pbnRhY3QgPSB0cnVlCgkJfQoKCQlyZXR1cm4gY2FjaGVkCgl9CglmdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKG5vZGUsIHRhZywgZGF0YUF0dHJzLCBjYWNoZWRBdHRycywgbmFtZXNwYWNlKSB7CgkJdmFyIGdyb3VwcyA9IHt9CgkJZm9yICh2YXIgYXR0ck5hbWUgaW4gZGF0YUF0dHJzKSB7CgkJCXZhciBkYXRhQXR0ciA9IGRhdGFBdHRyc1thdHRyTmFtZV0KCQkJdmFyIGNhY2hlZEF0dHIgPSBjYWNoZWRBdHRyc1thdHRyTmFtZV0KCQkJaWYgKCEoYXR0ck5hbWUgaW4gY2FjaGVkQXR0cnMpIHx8IChjYWNoZWRBdHRyICE9PSBkYXRhQXR0cikgfHwgbm9kZSA9PT0gd2luZG93LmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHsKCQkJCWNhY2hlZEF0dHJzW2F0dHJOYW1lXSA9IGRhdGFBdHRyCgkJCQlpZiAoYXR0ck5hbWUgPT09ICJjb25maWciKSBjb250aW51ZQoJCQkJZWxzZSBpZiAodHlwZW9mIGRhdGFBdHRyID09ICJmdW5jdGlvbiIgJiYgYXR0ck5hbWUuaW5kZXhPZigib24iKSA9PSAwKSB7CgkJCQkJbm9kZVthdHRyTmFtZV0gPSBhdXRvcmVkcmF3KGRhdGFBdHRyLCBub2RlKQoJCQkJfQoJCQkJZWxzZSBpZiAoYXR0ck5hbWUgPT09ICJzdHlsZSIgJiYgdHlwZW9mIGRhdGFBdHRyID09ICJvYmplY3QiKSB7CgkJCQkJZm9yICh2YXIgcnVsZSBpbiBkYXRhQXR0cikgewoJCQkJCQlpZiAoY2FjaGVkQXR0ciA9PT0gdW5kZWZpbmVkIHx8IGNhY2hlZEF0dHJbcnVsZV0gIT09IGRhdGFBdHRyW3J1bGVdKSBub2RlLnN0eWxlW3J1bGVdID0gZGF0YUF0dHJbcnVsZV0KCQkJCQl9CgkJCQkJZm9yICh2YXIgcnVsZSBpbiBjYWNoZWRBdHRyKSB7CgkJCQkJCWlmICghKHJ1bGUgaW4gZGF0YUF0dHIpKSBub2RlLnN0eWxlW3J1bGVdID0gIiIKCQkJCQl9CgkJCQl9CgkJCQllbHNlIGlmIChuYW1lc3BhY2UgIT09IHVuZGVmaW5lZCkgewoJCQkJCWlmIChhdHRyTmFtZSA9PT0gImhyZWYiKSBub2RlLnNldEF0dHJpYnV0ZU5TKCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiwgImhyZWYiLCBkYXRhQXR0cikKCQkJCQllbHNlIGlmIChhdHRyTmFtZSA9PT0gImNsYXNzTmFtZSIpIG5vZGUuc2V0QXR0cmlidXRlKCJjbGFzcyIsIGRhdGFBdHRyKQoJCQkJCWVsc2Ugbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGRhdGFBdHRyKQoJCQkJfQoJCQkJZWxzZSBpZiAoYXR0ck5hbWUgPT09ICJ2YWx1ZSIgJiYgdGFnID09PSAiaW5wdXQiKSB7CgkJCQkJaWYgKG5vZGUudmFsdWUgIT09IGRhdGFBdHRyKSBub2RlLnZhbHVlID0gZGF0YUF0dHIKCQkJCX0KCQkJCWVsc2UgaWYgKGF0dHJOYW1lIGluIG5vZGUgJiYgIShhdHRyTmFtZSA9PSAibGlzdCIgfHwgYXR0ck5hbWUgPT0gInN0eWxlIikpIHsKCQkJCQlub2RlW2F0dHJOYW1lXSA9IGRhdGFBdHRyCgkJCQl9CgkJCQllbHNlIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBkYXRhQXR0cikKCQkJfQoJCX0KCQlyZXR1cm4gY2FjaGVkQXR0cnMKCX0KCWZ1bmN0aW9uIGNsZWFyKG5vZGVzLCBjYWNoZWQpIHsKCQlmb3IgKHZhciBpID0gbm9kZXMubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pIHsKCQkJaWYgKG5vZGVzW2ldICYmIG5vZGVzW2ldLnBhcmVudE5vZGUpIHsKCQkJCW5vZGVzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZXNbaV0pCgkJCQljYWNoZWQgPSBbXS5jb25jYXQoY2FjaGVkKQoJCQkJaWYgKGNhY2hlZFtpXSkgdW5sb2FkKGNhY2hlZFtpXSkKCQkJfQoJCX0KCQlpZiAobm9kZXMubGVuZ3RoICE9IDApIG5vZGVzLmxlbmd0aCA9IDAKCX0KCWZ1bmN0aW9uIHVubG9hZChjYWNoZWQpIHsKCQlpZiAoY2FjaGVkLmNvbmZpZ0NvbnRleHQgJiYgdHlwZW9mIGNhY2hlZC5jb25maWdDb250ZXh0Lm9udW5sb2FkID09ICJmdW5jdGlvbiIpIGNhY2hlZC5jb25maWdDb250ZXh0Lm9udW5sb2FkKCkKCQlpZiAoY2FjaGVkLmNoaWxkcmVuKSB7CgkJCWlmICh0eXBlLmNhbGwoY2FjaGVkLmNoaWxkcmVuKSA9PSAiW29iamVjdCBBcnJheV0iKSBmb3IgKHZhciBpID0gMDsgaSA8IGNhY2hlZC5jaGlsZHJlbi5sZW5ndGg7IGkrKykgdW5sb2FkKGNhY2hlZC5jaGlsZHJlbltpXSkKCQkJZWxzZSBpZiAoY2FjaGVkLmNoaWxkcmVuLnRhZykgdW5sb2FkKGNhY2hlZC5jaGlsZHJlbikKCQl9Cgl9CglmdW5jdGlvbiBpbmplY3RIVE1MKHBhcmVudEVsZW1lbnQsIGluZGV4LCBkYXRhKSB7CgkJdmFyIG5leHRTaWJsaW5nID0gcGFyZW50RWxlbWVudC5jaGlsZE5vZGVzW2luZGV4XQoJCWlmIChuZXh0U2libGluZykgewoJCQl2YXIgaXNFbGVtZW50ID0gbmV4dFNpYmxpbmcubm9kZVR5cGUgIT0gMQoJCQl2YXIgcGxhY2Vob2xkZXIgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpCgkJCWlmIChpc0VsZW1lbnQpIHsKCQkJCXBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKHBsYWNlaG9sZGVyLCBuZXh0U2libGluZykKCQkJCXBsYWNlaG9sZGVyLmluc2VydEFkamFjZW50SFRNTCgiYmVmb3JlYmVnaW4iLCBkYXRhKQoJCQkJcGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChwbGFjZWhvbGRlcikKCQkJfQoJCQllbHNlIG5leHRTaWJsaW5nLmluc2VydEFkamFjZW50SFRNTCgiYmVmb3JlYmVnaW4iLCBkYXRhKQoJCX0KCQllbHNlIHBhcmVudEVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCJiZWZvcmVlbmQiLCBkYXRhKQoJCXZhciBub2RlcyA9IFtdCgkJd2hpbGUgKHBhcmVudEVsZW1lbnQuY2hpbGROb2Rlc1tpbmRleF0gIT09IG5leHRTaWJsaW5nKSB7CgkJCW5vZGVzLnB1c2gocGFyZW50RWxlbWVudC5jaGlsZE5vZGVzW2luZGV4XSkKCQkJaW5kZXgrKwoJCX0KCQlyZXR1cm4gbm9kZXMKCX0KCWZ1bmN0aW9uIGZsYXR0ZW4oZGF0YSkgewoJCXZhciBmbGF0dGVuZWQgPSBbXQoJCWZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewoJCQl2YXIgaXRlbSA9IGRhdGFbaV0KCQkJaWYgKHR5cGUuY2FsbChpdGVtKSA9PSAiW29iamVjdCBBcnJheV0iKSBmbGF0dGVuZWQucHVzaC5hcHBseShmbGF0dGVuZWQsIGZsYXR0ZW4oaXRlbSkpCgkJCWVsc2UgZmxhdHRlbmVkLnB1c2goaXRlbSkKCQl9CgkJcmV0dXJuIGZsYXR0ZW5lZAoJfQoJZnVuY3Rpb24gYXV0b3JlZHJhdyhjYWxsYmFjaywgb2JqZWN0LCBncm91cCkgewoJCXJldHVybiBmdW5jdGlvbihlKSB7CgkJCWUgPSBlIHx8IGV2ZW50CgkJCW0ucmVkcmF3LnN0cmF0ZWd5KCJkaWZmIikKCQkJbS5zdGFydENvbXB1dGF0aW9uKCkKCQkJdHJ5IHtyZXR1cm4gY2FsbGJhY2suY2FsbChvYmplY3QsIGUpfQoJCQlmaW5hbGx5IHsKCQkJCWlmICghbGFzdFJlZHJhd0lkKSBsYXN0UmVkcmF3SWQgPSAtMTsKCQkJCW0uZW5kQ29tcHV0YXRpb24oKQoJCQl9CgkJfQoJfQoKCXZhciBodG1sCgl2YXIgZG9jdW1lbnROb2RlID0gewoJCWluc2VydEFkamFjZW50SFRNTDogZnVuY3Rpb24oXywgZGF0YSkgewoJCQl3aW5kb3cuZG9jdW1lbnQud3JpdGUoZGF0YSkKCQkJd2luZG93LmRvY3VtZW50LmNsb3NlKCkKCQl9LAoJCWFwcGVuZENoaWxkOiBmdW5jdGlvbihub2RlKSB7CgkJCWlmIChodG1sID09PSB1bmRlZmluZWQpIGh0bWwgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaHRtbCIpCgkJCWlmIChub2RlLm5vZGVOYW1lID09ICJIVE1MIikgaHRtbCA9IG5vZGUKCQkJZWxzZSBodG1sLmFwcGVuZENoaWxkKG5vZGUpCgkJCWlmICh3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgIT09IGh0bWwpIHsKCQkJCXdpbmRvdy5kb2N1bWVudC5yZXBsYWNlQ2hpbGQoaHRtbCwgd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkKCQkJfQoJCQllbHNlIHdpbmRvdy5kb2N1bWVudC5hcHBlbmRDaGlsZChodG1sKQoJCX0sCgkJaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihub2RlKSB7CgkJCXRoaXMuYXBwZW5kQ2hpbGQobm9kZSkKCQl9LAoJCWNoaWxkTm9kZXM6IFtdCgl9Cgl2YXIgbm9kZUNhY2hlID0gW10sIGNlbGxDYWNoZSA9IHt9CgltLnJlbmRlciA9IGZ1bmN0aW9uKHJvb3QsIGNlbGwsIGZvcmNlUmVjcmVhdGlvbikgewoJCXZhciBjb25maWdzID0gW10KCQlpZiAoIXJvb3QpIHRocm93IG5ldyBFcnJvcigiUGxlYXNlIGVuc3VyZSB0aGUgRE9NIGVsZW1lbnQgZXhpc3RzIGJlZm9yZSByZW5kZXJpbmcgYSB0ZW1wbGF0ZSBpbnRvIGl0LiIpCgkJdmFyIGlkID0gZ2V0Q2VsbENhY2hlS2V5KHJvb3QpCgkJdmFyIG5vZGUgPSByb290ID09IHdpbmRvdy5kb2N1bWVudCB8fCByb290ID09IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudE5vZGUgOiByb290CgkJaWYgKGNlbGxDYWNoZVtpZF0gPT09IHVuZGVmaW5lZCkgY2xlYXIobm9kZS5jaGlsZE5vZGVzKQoJCWlmIChmb3JjZVJlY3JlYXRpb24gPT09IHRydWUpIHJlc2V0KHJvb3QpCgkJY2VsbENhY2hlW2lkXSA9IGJ1aWxkKG5vZGUsIG51bGwsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjZWxsLCBjZWxsQ2FjaGVbaWRdLCBmYWxzZSwgMCwgbnVsbCwgdW5kZWZpbmVkLCBjb25maWdzKQoJCWZvciAodmFyIGkgPSAwOyBpIDwgY29uZmlncy5sZW5ndGg7IGkrKykgY29uZmlnc1tpXSgpCgl9CglmdW5jdGlvbiBnZXRDZWxsQ2FjaGVLZXkoZWxlbWVudCkgewoJCXZhciBpbmRleCA9IG5vZGVDYWNoZS5pbmRleE9mKGVsZW1lbnQpCgkJcmV0dXJuIGluZGV4IDwgMCA/IG5vZGVDYWNoZS5wdXNoKGVsZW1lbnQpIC0gMSA6IGluZGV4Cgl9CgoJbS50cnVzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7CgkJdmFsdWUgPSBuZXcgU3RyaW5nKHZhbHVlKQoJCXZhbHVlLiR0cnVzdGVkID0gdHJ1ZQoJCXJldHVybiB2YWx1ZQoJfQoKCW0ucHJvcCA9IGZ1bmN0aW9uKHN0b3JlKSB7CgkJdmFyIHByb3AgPSBmdW5jdGlvbigpIHsKCQkJaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHN0b3JlID0gYXJndW1lbnRzWzBdCgkJCXJldHVybiBzdG9yZQoJCX0KCQlwcm9wLnRvSlNPTiA9IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gc3RvcmUKCQl9CgkJcmV0dXJuIHByb3AKCX0KCQoJdmFyIHJvb3RzID0gW10sIG1vZHVsZXMgPSBbXSwgY29udHJvbGxlcnMgPSBbXSwgbGFzdFJlZHJhd0lkID0gMCwgY29tcHV0ZVBvc3RSZWRyYXdIb29rID0gbnVsbCwgcHJldmVudGVkID0gZmFsc2UKCW0ubW9kdWxlID0gZnVuY3Rpb24ocm9vdCwgbW9kdWxlKSB7CgkJdmFyIGluZGV4ID0gcm9vdHMuaW5kZXhPZihyb290KQoJCWlmIChpbmRleCA8IDApIGluZGV4ID0gcm9vdHMubGVuZ3RoCgkJdmFyIGlzUHJldmVudGVkID0gZmFsc2UKCQlpZiAoY29udHJvbGxlcnNbaW5kZXhdICYmIHR5cGVvZiBjb250cm9sbGVyc1tpbmRleF0ub251bmxvYWQgPT0gImZ1bmN0aW9uIikgewoJCQl2YXIgZXZlbnQgPSB7CgkJCQlwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7aXNQcmV2ZW50ZWQgPSB0cnVlfQoJCQl9CgkJCWNvbnRyb2xsZXJzW2luZGV4XS5vbnVubG9hZChldmVudCkKCQl9CgkJaWYgKCFpc1ByZXZlbnRlZCkgewoJCQltLnJlZHJhdy5zdHJhdGVneSgiYWxsIikKCQkJbS5zdGFydENvbXB1dGF0aW9uKCkKCQkJcm9vdHNbaW5kZXhdID0gcm9vdAoJCQltb2R1bGVzW2luZGV4XSA9IG1vZHVsZQoJCQljb250cm9sbGVyc1tpbmRleF0gPSBuZXcgbW9kdWxlLmNvbnRyb2xsZXIKCQkJbS5lbmRDb21wdXRhdGlvbigpCgkJfQoJfQoJbS5yZWRyYXcgPSBmdW5jdGlvbigpIHsKCQl2YXIgY2FuY2VsID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5jbGVhclRpbWVvdXQKCQl2YXIgZGVmZXIgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5zZXRUaW1lb3V0CgkJaWYgKGxhc3RSZWRyYXdJZCkgewoJCQljYW5jZWwobGFzdFJlZHJhd0lkKQoJCQlsYXN0UmVkcmF3SWQgPSBkZWZlcihyZWRyYXcsIDApCgkJfQoJCWVsc2UgewoJCQlyZWRyYXcoKQoJCQlsYXN0UmVkcmF3SWQgPSBkZWZlcihmdW5jdGlvbigpIHtsYXN0UmVkcmF3SWQgPSBudWxsfSwgMCkKCQl9Cgl9CgltLnJlZHJhdy5zdHJhdGVneSA9IG0ucHJvcCgpCglmdW5jdGlvbiByZWRyYXcoKSB7CgkJdmFyIG1vZGUgPSBtLnJlZHJhdy5zdHJhdGVneSgpCgkJZm9yICh2YXIgaSA9IDA7IGkgPCByb290cy5sZW5ndGg7IGkrKykgewoJCQlpZiAoY29udHJvbGxlcnNbaV0gJiYgbW9kZSAhPSAibm9uZSIpIG0ucmVuZGVyKHJvb3RzW2ldLCBtb2R1bGVzW2ldLnZpZXcoY29udHJvbGxlcnNbaV0pLCBtb2RlID09ICJhbGwiKQoJCX0KCQlpZiAoY29tcHV0ZVBvc3RSZWRyYXdIb29rKSB7CgkJCWNvbXB1dGVQb3N0UmVkcmF3SG9vaygpCgkJCWNvbXB1dGVQb3N0UmVkcmF3SG9vayA9IG51bGwKCQl9CgkJbGFzdFJlZHJhd0lkID0gbnVsbAoJCW0ucmVkcmF3LnN0cmF0ZWd5KCJkaWZmIikKCX0KCgl2YXIgcGVuZGluZ1JlcXVlc3RzID0gMAoJbS5zdGFydENvbXB1dGF0aW9uID0gZnVuY3Rpb24oKSB7cGVuZGluZ1JlcXVlc3RzKyt9CgltLmVuZENvbXB1dGF0aW9uID0gZnVuY3Rpb24oKSB7CgkJcGVuZGluZ1JlcXVlc3RzID0gTWF0aC5tYXgocGVuZGluZ1JlcXVlc3RzIC0gMSwgMCkKCQlpZiAocGVuZGluZ1JlcXVlc3RzID09IDApIG0ucmVkcmF3KCkKCX0KCgltLndpdGhBdHRyID0gZnVuY3Rpb24ocHJvcCwgd2l0aEF0dHJDYWxsYmFjaykgewoJCXJldHVybiBmdW5jdGlvbihlKSB7CgkJCWUgPSBlIHx8IGV2ZW50CgkJCXZhciBjdXJyZW50VGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0IHx8IHRoaXMKCQkJd2l0aEF0dHJDYWxsYmFjayhwcm9wIGluIGN1cnJlbnRUYXJnZXQgPyBjdXJyZW50VGFyZ2V0W3Byb3BdIDogY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUocHJvcCkpCgkJfQoJfQoKCS8vcm91dGluZwoJdmFyIG1vZGVzID0ge3BhdGhuYW1lOiAiIiwgaGFzaDogIiMiLCBzZWFyY2g6ICI/In0KCXZhciByZWRpcmVjdCA9IGZ1bmN0aW9uKCkge30sIHJvdXRlUGFyYW1zID0ge30sIGN1cnJlbnRSb3V0ZQoJbS5yb3V0ZSA9IGZ1bmN0aW9uKCkgewoJCWlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gY3VycmVudFJvdXRlCgkJZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgYXJndW1lbnRzWzFdID09ICJzdHJpbmciKSB7CgkJCXZhciByb290ID0gYXJndW1lbnRzWzBdLCBkZWZhdWx0Um91dGUgPSBhcmd1bWVudHNbMV0sIHJvdXRlciA9IGFyZ3VtZW50c1syXQoJCQlyZWRpcmVjdCA9IGZ1bmN0aW9uKHNvdXJjZSkgewoJCQkJdmFyIHBhdGggPSBjdXJyZW50Um91dGUgPSBub3JtYWxpemVSb3V0ZShzb3VyY2UpCgkJCQlpZiAoIXJvdXRlQnlWYWx1ZShyb290LCByb3V0ZXIsIHBhdGgpKSB7CgkJCQkJbS5yb3V0ZShkZWZhdWx0Um91dGUsIHRydWUpCgkJCQl9CgkJCX0KCQkJdmFyIGxpc3RlbmVyID0gbS5yb3V0ZS5tb2RlID09ICJoYXNoIiA/ICJvbmhhc2hjaGFuZ2UiIDogIm9ucG9wc3RhdGUiCgkJCXdpbmRvd1tsaXN0ZW5lcl0gPSBmdW5jdGlvbigpIHsKCQkJCWlmIChjdXJyZW50Um91dGUgIT0gbm9ybWFsaXplUm91dGUod2luZG93LmxvY2F0aW9uW20ucm91dGUubW9kZV0pKSB7CgkJCQkJcmVkaXJlY3Qod2luZG93LmxvY2F0aW9uW20ucm91dGUubW9kZV0pCgkJCQl9CgkJCX0KCQkJY29tcHV0ZVBvc3RSZWRyYXdIb29rID0gc2V0U2Nyb2xsCgkJCXdpbmRvd1tsaXN0ZW5lcl0oKQoJCX0KCQllbHNlIGlmIChhcmd1bWVudHNbMF0uYWRkRXZlbnRMaXN0ZW5lcikgewoJCQl2YXIgZWxlbWVudCA9IGFyZ3VtZW50c1swXQoJCQl2YXIgaXNJbml0aWFsaXplZCA9IGFyZ3VtZW50c1sxXQoJCQlpZiAoZWxlbWVudC5ocmVmLmluZGV4T2YobW9kZXNbbS5yb3V0ZS5tb2RlXSkgPCAwKSB7CgkJCQllbGVtZW50LmhyZWYgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyBtb2Rlc1ttLnJvdXRlLm1vZGVdICsgZWxlbWVudC5wYXRobmFtZQoJCQl9CgkJCWlmICghaXNJbml0aWFsaXplZCkgewoJCQkJZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJjbGljayIsIHJvdXRlVW5vYnRydXNpdmUpCgkJCQllbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgcm91dGVVbm9idHJ1c2l2ZSkKCQkJfQoJCX0KCQllbHNlIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09ICJzdHJpbmciKSB7CgkJCWN1cnJlbnRSb3V0ZSA9IGFyZ3VtZW50c1swXQoJCQl2YXIgcXVlcnlzdHJpbmcgPSB0eXBlb2YgYXJndW1lbnRzWzFdID09ICJvYmplY3QiID8gYnVpbGRRdWVyeVN0cmluZyhhcmd1bWVudHNbMV0pIDogbnVsbAoJCQlpZiAocXVlcnlzdHJpbmcpIGN1cnJlbnRSb3V0ZSArPSAoY3VycmVudFJvdXRlLmluZGV4T2YoIj8iKSA9PT0gLTEgPyAiPyIgOiAiJiIpICsgcXVlcnlzdHJpbmcKCgkJCXZhciBzaG91bGRSZXBsYWNlSGlzdG9yeUVudHJ5ID0gKGFyZ3VtZW50cy5sZW5ndGggPT0gMyA/IGFyZ3VtZW50c1syXSA6IGFyZ3VtZW50c1sxXSkgPT09IHRydWUKCQkJCgkJCWlmICh3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHsKCQkJCWNvbXB1dGVQb3N0UmVkcmF3SG9vayA9IGZ1bmN0aW9uKCkgewoJCQkJCXdpbmRvdy5oaXN0b3J5W3Nob3VsZFJlcGxhY2VIaXN0b3J5RW50cnkgPyAicmVwbGFjZVN0YXRlIiA6ICJwdXNoU3RhdGUiXShudWxsLCB3aW5kb3cuZG9jdW1lbnQudGl0bGUsIG1vZGVzW20ucm91dGUubW9kZV0gKyBjdXJyZW50Um91dGUpCgkJCQkJc2V0U2Nyb2xsKCkKCQkJCX0KCQkJCXJlZGlyZWN0KG1vZGVzW20ucm91dGUubW9kZV0gKyBjdXJyZW50Um91dGUpCgkJCX0KCQkJZWxzZSB3aW5kb3cubG9jYXRpb25bbS5yb3V0ZS5tb2RlXSA9IGN1cnJlbnRSb3V0ZQoJCX0KCX0KCW0ucm91dGUucGFyYW0gPSBmdW5jdGlvbihrZXkpIHtyZXR1cm4gcm91dGVQYXJhbXNba2V5XX0KCW0ucm91dGUubW9kZSA9ICJzZWFyY2giCglmdW5jdGlvbiBub3JtYWxpemVSb3V0ZShyb3V0ZSkge3JldHVybiByb3V0ZS5zbGljZShtb2Rlc1ttLnJvdXRlLm1vZGVdLmxlbmd0aCl9CglmdW5jdGlvbiByb3V0ZUJ5VmFsdWUocm9vdCwgcm91dGVyLCBwYXRoKSB7CgkJcm91dGVQYXJhbXMgPSB7fQoKCQl2YXIgcXVlcnlTdGFydCA9IHBhdGguaW5kZXhPZigiPyIpCgkJaWYgKHF1ZXJ5U3RhcnQgIT09IC0xKSB7CgkJCXJvdXRlUGFyYW1zID0gcGFyc2VRdWVyeVN0cmluZyhwYXRoLnN1YnN0cihxdWVyeVN0YXJ0ICsgMSwgcGF0aC5sZW5ndGgpKQoJCQlwYXRoID0gcGF0aC5zdWJzdHIoMCwgcXVlcnlTdGFydCkKCQl9CgoJCWZvciAodmFyIHJvdXRlIGluIHJvdXRlcikgewoJCQlpZiAocm91dGUgPT0gcGF0aCkgewoJCQkJbS5tb2R1bGUocm9vdCwgcm91dGVyW3JvdXRlXSkKCQkJCXJldHVybiB0cnVlCgkJCX0KCgkJCXZhciBtYXRjaGVyID0gbmV3IFJlZ0V4cCgiXiIgKyByb3V0ZS5yZXBsYWNlKC86W15cL10rP1wuezN9L2csICIoLio/KSIpLnJlcGxhY2UoLzpbXlwvXSsvZywgIihbXlxcL10rKSIpICsgIlwvPyQiKQoKCQkJaWYgKG1hdGNoZXIudGVzdChwYXRoKSkgewoJCQkJcGF0aC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKCkgewoJCQkJCXZhciBrZXlzID0gcm91dGUubWF0Y2goLzpbXlwvXSsvZykgfHwgW10KCQkJCQl2YXIgdmFsdWVzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEsIC0yKQoJCQkJCWZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgcm91dGVQYXJhbXNba2V5c1tpXS5yZXBsYWNlKC86fFwuL2csICIiKV0gPSBkZWNvZGVTcGFjZSh2YWx1ZXNbaV0pCgkJCQkJbS5tb2R1bGUocm9vdCwgcm91dGVyW3JvdXRlXSkKCQkJCX0pCgkJCQlyZXR1cm4gdHJ1ZQoJCQl9CgkJfQoJfQoJZnVuY3Rpb24gcm91dGVVbm9idHJ1c2l2ZShlKSB7CgkJZSA9IGUgfHwgZXZlbnQKCQlpZiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLndoaWNoID09IDIpIHJldHVybgoJCWUucHJldmVudERlZmF1bHQoKQoJCW0ucm91dGUoZS5jdXJyZW50VGFyZ2V0W20ucm91dGUubW9kZV0uc2xpY2UobW9kZXNbbS5yb3V0ZS5tb2RlXS5sZW5ndGgpKQoJfQoJZnVuY3Rpb24gc2V0U2Nyb2xsKCkgewoJCWlmIChtLnJvdXRlLm1vZGUgIT0gImhhc2giICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoKSB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoCgkJZWxzZSB3aW5kb3cuc2Nyb2xsVG8oMCwgMCkKCX0KCWZ1bmN0aW9uIGJ1aWxkUXVlcnlTdHJpbmcob2JqZWN0LCBwcmVmaXgpIHsKCQl2YXIgc3RyID0gW10KCQlmb3IodmFyIHByb3AgaW4gb2JqZWN0KSB7CgkJCXZhciBrZXkgPSBwcmVmaXggPyBwcmVmaXggKyAiWyIgKyBwcm9wICsgIl0iIDogcHJvcCwgdmFsdWUgPSBvYmplY3RbcHJvcF0KCQkJc3RyLnB1c2godHlwZW9mIHZhbHVlID09ICJvYmplY3QiID8gYnVpbGRRdWVyeVN0cmluZyh2YWx1ZSwga2V5KSA6IGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSkKCQl9CgkJcmV0dXJuIHN0ci5qb2luKCImIikKCX0KCWZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcoc3RyKSB7CgkJdmFyIHBhaXJzID0gc3RyLnNwbGl0KCImIiksIHBhcmFtcyA9IHt9CgkJZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykgewoJCQl2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCI9IikKCQkJcGFyYW1zW2RlY29kZVNwYWNlKHBhaXJbMF0pXSA9IHBhaXJbMV0gPyBkZWNvZGVTcGFjZShwYWlyWzFdKSA6IChwYWlyLmxlbmd0aCA9PT0gMSA/IHRydWUgOiAiIikKCQl9CgkJcmV0dXJuIHBhcmFtcwoJfQoJZnVuY3Rpb24gZGVjb2RlU3BhY2Uoc3RyaW5nKSB7CgkJcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHJpbmcucmVwbGFjZSgvXCsvZywgIiAiKSkKCX0KCWZ1bmN0aW9uIHJlc2V0KHJvb3QpIHsKCQl2YXIgY2FjaGVLZXkgPSBnZXRDZWxsQ2FjaGVLZXkocm9vdCkKCQljbGVhcihyb290LmNoaWxkTm9kZXMsIGNlbGxDYWNoZVtjYWNoZUtleV0pCgkJY2VsbENhY2hlW2NhY2hlS2V5XSA9IHVuZGVmaW5lZAoJfQoKCXZhciBub25lID0ge30KCW0uZGVmZXJyZWQgPSBmdW5jdGlvbigpIHsKCQl2YXIgcmVzb2x2ZXJzID0gW10sIHJlamVjdGVycyA9IFtdLCByZXNvbHZlZCA9IG5vbmUsIHJlamVjdGVkID0gbm9uZSwgcHJvbWlzZSA9IG0ucHJvcCgpCgkJdmFyIG9iamVjdCA9IHsKCQkJcmVzb2x2ZTogZnVuY3Rpb24odmFsdWUpIHsKCQkJCWlmIChyZXNvbHZlZCA9PT0gbm9uZSkgcHJvbWlzZShyZXNvbHZlZCA9IHZhbHVlKQoJCQkJZm9yICh2YXIgaSA9IDA7IGkgPCByZXNvbHZlcnMubGVuZ3RoOyBpKyspIHJlc29sdmVyc1tpXSh2YWx1ZSkKCQkJCXJlc29sdmVycy5sZW5ndGggPSByZWplY3RlcnMubGVuZ3RoID0gMAoJCQl9LAoJCQlyZWplY3Q6IGZ1bmN0aW9uKHZhbHVlKSB7CgkJCQlpZiAocmVqZWN0ZWQgPT09IG5vbmUpIHJlamVjdGVkID0gdmFsdWUKCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgcmVqZWN0ZXJzLmxlbmd0aDsgaSsrKSByZWplY3RlcnNbaV0odmFsdWUpCgkJCQlyZXNvbHZlcnMubGVuZ3RoID0gcmVqZWN0ZXJzLmxlbmd0aCA9IDAKCQkJfSwKCQkJcHJvbWlzZTogcHJvbWlzZQoJCX0KCQlvYmplY3QucHJvbWlzZS5yZXNvbHZlcnMgPSByZXNvbHZlcnMKCQlvYmplY3QucHJvbWlzZS50aGVuID0gZnVuY3Rpb24oc3VjY2VzcywgZXJyb3IpIHsKCQkJdmFyIG5leHQgPSBtLmRlZmVycmVkKCkKCQkJaWYgKCFzdWNjZXNzKSBzdWNjZXNzID0gaWRlbnRpdHkKCQkJaWYgKCFlcnJvcikgZXJyb3IgPSBpZGVudGl0eQoJCQlmdW5jdGlvbiBjYWxsYmFjayhtZXRob2QsIGNhbGxiYWNrKSB7CgkJCQlyZXR1cm4gZnVuY3Rpb24odmFsdWUpIHsKCQkJCQl0cnkgewoJCQkJCQl2YXIgcmVzdWx0ID0gY2FsbGJhY2sodmFsdWUpCgkJCQkJCWlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09ICJmdW5jdGlvbiIpIHJlc3VsdC50aGVuKG5leHRbbWV0aG9kXSwgZXJyb3IpCgkJCQkJCWVsc2UgbmV4dFttZXRob2RdKHJlc3VsdCAhPT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdmFsdWUpCgkJCQkJfQoJCQkJCWNhdGNoIChlKSB7CgkJCQkJCWlmICh0eXBlLmNhbGwoZSkgPT0gIltvYmplY3QgRXJyb3JdIiAmJiBlLmNvbnN0cnVjdG9yICE9PSBFcnJvcikgdGhyb3cgZQoJCQkJCQllbHNlIG5leHQucmVqZWN0KGUpCgkJCQkJfQoJCQkJfQoJCQl9CgkJCWlmIChyZXNvbHZlZCAhPT0gbm9uZSkgY2FsbGJhY2soInJlc29sdmUiLCBzdWNjZXNzKShyZXNvbHZlZCkKCQkJZWxzZSBpZiAocmVqZWN0ZWQgIT09IG5vbmUpIGNhbGxiYWNrKCJyZWplY3QiLCBlcnJvcikocmVqZWN0ZWQpCgkJCWVsc2UgewoJCQkJcmVzb2x2ZXJzLnB1c2goY2FsbGJhY2soInJlc29sdmUiLCBzdWNjZXNzKSkKCQkJCXJlamVjdGVycy5wdXNoKGNhbGxiYWNrKCJyZWplY3QiLCBlcnJvcikpCgkJCX0KCQkJcmV0dXJuIG5leHQucHJvbWlzZQoJCX0KCQlyZXR1cm4gb2JqZWN0Cgl9CgltLnN5bmMgPSBmdW5jdGlvbihhcmdzKSB7CgkJdmFyIG1ldGhvZCA9ICJyZXNvbHZlIgoJCWZ1bmN0aW9uIHN5bmNocm9uaXplcihwb3MsIHJlc29sdmVkKSB7CgkJCXJldHVybiBmdW5jdGlvbih2YWx1ZSkgewoJCQkJcmVzdWx0c1twb3NdID0gdmFsdWUKCQkJCWlmICghcmVzb2x2ZWQpIG1ldGhvZCA9ICJyZWplY3QiCgkJCQlpZiAoLS1vdXRzdGFuZGluZyA9PSAwKSB7CgkJCQkJZGVmZXJyZWQucHJvbWlzZShyZXN1bHRzKQoJCQkJCWRlZmVycmVkW21ldGhvZF0ocmVzdWx0cykKCQkJCX0KCQkJCXJldHVybiB2YWx1ZQoJCQl9CgkJfQoKCQl2YXIgZGVmZXJyZWQgPSBtLmRlZmVycmVkKCkKCQl2YXIgb3V0c3RhbmRpbmcgPSBhcmdzLmxlbmd0aAoJCXZhciByZXN1bHRzID0gbmV3IEFycmF5KG91dHN0YW5kaW5nKQoJCWlmIChhcmdzLmxlbmd0aCA+IDApIHsKCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7CgkJCQlhcmdzW2ldLnRoZW4oc3luY2hyb25pemVyKGksIHRydWUpLCBzeW5jaHJvbml6ZXIoaSwgZmFsc2UpKQoJCQl9CgkJfQoJCWVsc2UgZGVmZXJyZWQucmVzb2x2ZSgpCgkJCgkJcmV0dXJuIGRlZmVycmVkLnByb21pc2UKCX0KCWZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7cmV0dXJuIHZhbHVlfQoKCWZ1bmN0aW9uIGFqYXgob3B0aW9ucykgewoJCXZhciB4aHIgPSBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0CgkJeGhyLm9wZW4ob3B0aW9ucy5tZXRob2QsIG9wdGlvbnMudXJsLCB0cnVlLCBvcHRpb25zLnVzZXIsIG9wdGlvbnMucGFzc3dvcmQpCgkJeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewoJCQlpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHsKCQkJCWlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSBvcHRpb25zLm9ubG9hZCh7dHlwZTogImxvYWQiLCB0YXJnZXQ6IHhocn0pCgkJCQllbHNlIG9wdGlvbnMub25lcnJvcih7dHlwZTogImVycm9yIiwgdGFyZ2V0OiB4aHJ9KQoJCQl9CgkJfQoJCWlmIChvcHRpb25zLnNlcmlhbGl6ZSA9PSBKU09OLnN0cmluZ2lmeSAmJiBvcHRpb25zLm1ldGhvZCAhPSAiR0VUIikgewoJCQl4aHIuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgiKTsKCQl9CgkJaWYgKHR5cGVvZiBvcHRpb25zLmNvbmZpZyA9PSAiZnVuY3Rpb24iKSB7CgkJCXZhciBtYXliZVhociA9IG9wdGlvbnMuY29uZmlnKHhociwgb3B0aW9ucykKCQkJaWYgKG1heWJlWGhyICE9PSB1bmRlZmluZWQpIHhociA9IG1heWJlWGhyCgkJfQoJCXhoci5zZW5kKG9wdGlvbnMubWV0aG9kID09ICJHRVQiID8gIiIgOiBvcHRpb25zLmRhdGEpCgkJcmV0dXJuIHhocgoJfQoJZnVuY3Rpb24gYmluZERhdGEoeGhyT3B0aW9ucywgZGF0YSwgc2VyaWFsaXplKSB7CgkJaWYgKGRhdGEgJiYgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID4gMCkgewoJCQlpZiAoeGhyT3B0aW9ucy5tZXRob2QgPT0gIkdFVCIpIHsKCQkJCXhock9wdGlvbnMudXJsID0geGhyT3B0aW9ucy51cmwgKyAoeGhyT3B0aW9ucy51cmwuaW5kZXhPZigiPyIpIDwgMCA/ICI/IiA6ICImIikgKyBidWlsZFF1ZXJ5U3RyaW5nKGRhdGEpCgkJCX0KCQkJZWxzZSB4aHJPcHRpb25zLmRhdGEgPSBzZXJpYWxpemUoZGF0YSkKCQl9CgkJcmV0dXJuIHhock9wdGlvbnMKCX0KCWZ1bmN0aW9uIHBhcmFtZXRlcml6ZVVybCh1cmwsIGRhdGEpIHsKCQl2YXIgdG9rZW5zID0gdXJsLm1hdGNoKC86W2Etel1cdysvZ2kpCgkJaWYgKHRva2VucyAmJiBkYXRhKSB7CgkJCWZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7CgkJCQl2YXIga2V5ID0gdG9rZW5zW2ldLnNsaWNlKDEpCgkJCQl1cmwgPSB1cmwucmVwbGFjZSh0b2tlbnNbaV0sIGRhdGFba2V5XSkKCQkJCWRlbGV0ZSBkYXRhW2tleV0KCQkJfQoJCX0KCQlyZXR1cm4gdXJsCgl9CgoJbS5yZXF1ZXN0ID0gZnVuY3Rpb24oeGhyT3B0aW9ucykgewoJCWlmICh4aHJPcHRpb25zLmJhY2tncm91bmQgIT09IHRydWUpIG0uc3RhcnRDb21wdXRhdGlvbigpCgkJdmFyIGRlZmVycmVkID0gbS5kZWZlcnJlZCgpCgkJdmFyIHNlcmlhbGl6ZSA9IHhock9wdGlvbnMuc2VyaWFsaXplID0geGhyT3B0aW9ucy5zZXJpYWxpemUgfHwgSlNPTi5zdHJpbmdpZnkKCQl2YXIgZGVzZXJpYWxpemUgPSB4aHJPcHRpb25zLmRlc2VyaWFsaXplID0geGhyT3B0aW9ucy5kZXNlcmlhbGl6ZSB8fCBKU09OLnBhcnNlCgkJdmFyIGV4dHJhY3QgPSB4aHJPcHRpb25zLmV4dHJhY3QgfHwgZnVuY3Rpb24oeGhyKSB7CgkJCXJldHVybiB4aHIucmVzcG9uc2VUZXh0Lmxlbmd0aCA9PT0gMCAmJiBkZXNlcmlhbGl6ZSA9PT0gSlNPTi5wYXJzZSA/IG51bGwgOiB4aHIucmVzcG9uc2VUZXh0CgkJfQoJCXhock9wdGlvbnMudXJsID0gcGFyYW1ldGVyaXplVXJsKHhock9wdGlvbnMudXJsLCB4aHJPcHRpb25zLmRhdGEpCgkJeGhyT3B0aW9ucyA9IGJpbmREYXRhKHhock9wdGlvbnMsIHhock9wdGlvbnMuZGF0YSwgc2VyaWFsaXplKQoJCXhock9wdGlvbnMub25sb2FkID0geGhyT3B0aW9ucy5vbmVycm9yID0gZnVuY3Rpb24oZSkgewoJCQl0cnkgewoJCQkJZSA9IGUgfHwgZXZlbnQKCQkJCXZhciB1bndyYXAgPSAoZS50eXBlID09ICJsb2FkIiA/IHhock9wdGlvbnMudW53cmFwU3VjY2VzcyA6IHhock9wdGlvbnMudW53cmFwRXJyb3IpIHx8IGlkZW50aXR5CgkJCQl2YXIgcmVzcG9uc2UgPSB1bndyYXAoZGVzZXJpYWxpemUoZXh0cmFjdChlLnRhcmdldCwgeGhyT3B0aW9ucykpKQoJCQkJaWYgKGUudHlwZSA9PSAibG9hZCIpIHsKCQkJCQlpZiAodHlwZS5jYWxsKHJlc3BvbnNlKSA9PSAiW29iamVjdCBBcnJheV0iICYmIHhock9wdGlvbnMudHlwZSkgewoJCQkJCQlmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLmxlbmd0aDsgaSsrKSByZXNwb25zZVtpXSA9IG5ldyB4aHJPcHRpb25zLnR5cGUocmVzcG9uc2VbaV0pCgkJCQkJfQoJCQkJCWVsc2UgaWYgKHhock9wdGlvbnMudHlwZSkgcmVzcG9uc2UgPSBuZXcgeGhyT3B0aW9ucy50eXBlKHJlc3BvbnNlKQoJCQkJfQoJCQkJZGVmZXJyZWRbZS50eXBlID09ICJsb2FkIiA/ICJyZXNvbHZlIiA6ICJyZWplY3QiXShyZXNwb25zZSkKCQkJfQoJCQljYXRjaCAoZSkgewoJCQkJaWYgKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcikgdGhyb3cgbmV3IFN5bnRheEVycm9yKCJDb3VsZCBub3QgcGFyc2UgSFRUUCByZXNwb25zZS4gU2VlIGh0dHA6Ly9saG9yaWUuZ2l0aHViLmlvL21pdGhyaWwvbWl0aHJpbC5yZXF1ZXN0Lmh0bWwjdXNpbmctdmFyaWFibGUtZGF0YS1mb3JtYXRzIikKCQkJCWVsc2UgaWYgKHR5cGUuY2FsbChlKSA9PSAiW29iamVjdCBFcnJvcl0iICYmIGUuY29uc3RydWN0b3IgIT09IEVycm9yKSB0aHJvdyBlCgkJCQllbHNlIGRlZmVycmVkLnJlamVjdChlKQoJCQl9CgkJCWlmICh4aHJPcHRpb25zLmJhY2tncm91bmQgIT09IHRydWUpIG0uZW5kQ29tcHV0YXRpb24oKQoJCX0KCQlhamF4KHhock9wdGlvbnMpCgkJcmV0dXJuIGRlZmVycmVkLnByb21pc2UKCX0KCgkvL3Rlc3RpbmcgQVBJCgltLmRlcHMgPSBmdW5jdGlvbihtb2NrKSB7cmV0dXJuIHdpbmRvdyA9IG1vY2t9CgkvL2ZvciBpbnRlcm5hbCB0ZXN0aW5nIG9ubHksIGRvIG5vdCB1c2UgYG0uZGVwcy5mYWN0b3J5YAoJbS5kZXBzLmZhY3RvcnkgPSBhcHAKCglyZXR1cm4gbQp9KHR5cGVvZiB3aW5kb3cgIT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCmlmICh0eXBlb2YgbW9kdWxlICE9ICJ1bmRlZmluZWQiICYmIG1vZHVsZSAhPT0gbnVsbCkgbW9kdWxlLmV4cG9ydHMgPSBtCmlmICh0eXBlb2YgZGVmaW5lID09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKGZ1bmN0aW9uKCkge3JldHVybiBtfSkKCjs7Owo=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 16:12:05 GMT",
                    "Content-Length": "26961",
                    "Date": "Fri, 07 Nov 2014 16:12:07 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}