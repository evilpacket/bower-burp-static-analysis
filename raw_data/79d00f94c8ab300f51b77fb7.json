{
    "url": "http://localhost:9999/ariatemplates/ariatemplates/src/aria/utils/History.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>window.location.href</b> and written to <b>window.location.replace()</b> via the following statement:<ul><li>window.location.replace(window.location.href.replace(/#.*$/, \"\") + \"#\" + hash);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/ariatemplates/ariatemplates/src/aria/utils/History.js",
                "path": "/ariatemplates/ariatemplates/src/aria/utils/History.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hcmlhdGVtcGxhdGVzL2FyaWF0ZW1wbGF0ZXMvc3JjL2FyaWEvdXRpbHMvSGlzdG9yeS5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMjI3NzgNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IFRodSwgMDYgTm92IDIwMTQgMDk6MzM6NTkgR01UDQpMYXN0LU1vZGlmaWVkOiBUaHUsIDA2IE5vdiAyMDE0IDA5OjMzOjU3IEdNVA0KDQovKgogKiBDb3B5cmlnaHQgMjAxMiBBbWFkZXVzIHMuYS5zLgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwoKdmFyIEFyaWEgPSByZXF1aXJlKCIuLi9BcmlhIik7CnZhciBhcmlhVXRpbHNUeXBlID0gcmVxdWlyZSgiLi9UeXBlIik7CnZhciBhcmlhVXRpbHNKc29uID0gcmVxdWlyZSgiLi9Kc29uIik7CnZhciBhcmlhU3RvcmFnZUxvY2FsU3RvcmFnZSA9IHJlcXVpcmUoIi4uL3N0b3JhZ2UvTG9jYWxTdG9yYWdlIik7CnZhciBhcmlhQ29yZUJyb3dzZXIgPSByZXF1aXJlKCIuLi9jb3JlL0Jyb3dzZXIiKTsKdmFyIGFyaWFVdGlsc0V2ZW50ID0gcmVxdWlyZSgiLi9FdmVudCIpOwovKioKICogPHByZT4KICogewogKiAgICAgaXNIdG1sNUhpc3RvcnlBdmFpbGFibGUgOiB3aGV0aGVyIHRoZSBIVE1MNSBIaXN0b3J5IEFQSSBpcyBhdmFpbGFibGUsCiAqICAgICBoYXNoTWFuYWdlciA6IGEgcmVmZXJlbmNlIHRvIGFyaWEudXRpbHMuSGFzaE1hbmFnZXIgaWYgbmVlZGVkLAogKiAgICAgYXJyYXlVdGlsIDogYSByZWZlcmVuY2UgdG8gYXJpYS51dGlscy5BcnJheSBpZiBuZWVkZWQKICogfQogKiA8L3ByZT4KICoKICogQHR5cGUgT2JqZWN0CiAqIEBwcml2YXRlCiAqLwp2YXIgZHluYW1pY0RlcGVuZGVuY2llcyA9IHJlcXVpcmUoIi4vJEhpc3RvcnkiKS5nZXREZXBlbmRlbmNpZXMoKTsKCihmdW5jdGlvbiAoKSB7CiAgICAidXNlIHN0cmljdCI7CgogICAgdmFyIHdpbmRvdyA9IEFyaWEuJHdpbmRvdzsKCiAgICB2YXIgcmVhZEh0bWw1SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIC8vIHJlYWRpbmcgaGlzdG9yeS5zdGF0ZSBvbiBJRSAxMCBjYW4gcmFpc2UgYW4gIlVuc3BlY2lmaWVkIGVycm9yIiBleGNlcHRpb24KICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgfTsKCiAgICAvKioKICAgICAqIFdoZXRoZXIgSFRNTDUgaGlzdG9yeSBBUEkgaXMgbmF0aXZlbHkgc3VwcG9ydGVkCiAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgKiBAcHJpdmF0ZQogICAgICovCiAgICB2YXIgaHRtbDVIaXN0b3J5ID0gZHluYW1pY0RlcGVuZGVuY2llcy5pc0h0bWw1SGlzdG9yeUF2YWlsYWJsZTsKCiAgICAvKioKICAgICAqIENvbnRhaW5zIGEgc2V0IG9mIHN0YXRlcyB0aGF0IGhhdmUgdG8gYmUgc3RvcmVkLiBJZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBuYXRpdmUgSFRNTDUgaGlzdG9yeSBBUEksIGl0IG9ubHkKICAgICAqIGNvbnRhaW5zIHRoZSBpbml0aWFsIHN0YXRlcyBpbiBvcmRlciB0byBiZSBhYmxlIHRvIHJlc3RvcmUgdGhlIHRpdGxlLiBMb2NhbCBzdG9yYWdlIGlzIHVzZWQgaW4gb3JkZXIgdG8ga2VlcCB0aGlzCiAgICAgKiBpbmZvcm1hdGlvbiBwZXJzaXN0ZW50LiBUaGlzIGFsbG93cyB0byBzdXBwb3J0IG5hdmlnYXRpb24gdG8gZXh0ZXJuYWwgbGlua3MgYW5kIHBhZ2UgcmVmcmVzaC4KICAgICAqIEB0eXBlIE9iamVjdAogICAgICogQHByaXZhdGUKICAgICAqLwogICAgdmFyIHN0YXRlTWVtb3J5ID0ge307CgogICAgLyoqCiAgICAgKiBVc2VkIG9ubHkgd2hlbiBoYXNoLWJhc2VkIGZhbGxiYWNrIGlzIG5lZWRlZAogICAgICogQHR5cGUgYXJpYS51dGlscy5IYXNoTWFuYWdlcgogICAgICogQHByaXZhdGUKICAgICAqLwogICAgdmFyIGhhc2hNYW5hZ2VyID0gZHluYW1pY0RlcGVuZGVuY2llcy5oYXNoTWFuYWdlcjsKCiAgICAvKioKICAgICAqIFByb3ZpZGVzIGEgY3Jvc3MtYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgaGlzdG9yeSBBUEkuIEl0IHVzZXMgbmF0aXZlIEhUTUw1IEhpc3RvcnkgQVBJIHdoZW4gcG9zc2libGUuCiAgICAgKiBAZGVwZW5kZW5jaWVzIFsiYXJpYS51dGlscy5TdHJpbmciLCAiYXJpYS51dGlscy5UeXBlIiwgImFyaWEudXRpbHMuSnNvbiIsICJhcmlhLnN0b3JhZ2UuTG9jYWxTdG9yYWdlIiwKICAgICAqICJhcmlhLmNvcmUuQnJvd3NlciIsICJhcmlhLnV0aWxzLkV2ZW50Il0KICAgICAqLwogICAgbW9kdWxlLmV4cG9ydHMgPSBBcmlhLmNsYXNzRGVmaW5pdGlvbih7CiAgICAgICAgJGNsYXNzcGF0aCA6ICJhcmlhLnV0aWxzLkhpc3RvcnkiLAogICAgICAgICRzaW5nbGV0b24gOiB0cnVlLAogICAgICAgICRzdGF0aWNzIDogewogICAgICAgICAgICAvKiBCQUNLV0FSRC1DT01QQVRJQklMSVRZLUJFR0lOIEdILTExMjMgKi8KICAgICAgICAgICAgT05QT1BTVEFURV9ERVBSRUNBVEVEX0VWRU5UIDogImBvbnBvcHN0YXRlYCBldmVudCBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIGBwb3BzdGF0ZWAgaW5zdGVhZCIsCiAgICAgICAgICAgIC8qIEJBQ0tXQVJELUNPTVBBVElCSUxJVFktRU5EIEdILTExMjMgKi8KCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBLZXkgdGhhdCBpcyB1c2VkIGluIG9yZGVyIHRvIHNhdmUgc3RhdGUgaW5mb3JtYXRpb24gaW4gdGhlIGxvY2FsIHN0b3JhZ2UKICAgICAgICAgICAgICogQHR5cGUgU3RyaW5nCiAgICAgICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBfU1RPUkFHRV9LRVkgOiAiYXRfaGlzdG9yeSIsCgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogS2V5IHRoYXQgaXMgdXNlZCBpbiBvcmRlciB0byBhcHBlbmQgdGhlIGlkIG9mIHRoZSBzdGF0ZSBpbiB0aGUgdXJsLiBJdCBpcyBuZWVkZWQgZm9yIGhhc2gtYmFzZWQKICAgICAgICAgICAgICogbmF2aWdhdGlvbiBmYWxsYmFjawogICAgICAgICAgICAgKiBAdHlwZSBTdHJpbmcKICAgICAgICAgICAgICovCiAgICAgICAgICAgIElEX0tFWSA6ICImX2hpZD0iLAoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIFJlcHJlc2VudHMgdGhlIG51bWJlciBvZiBzZWNvbmRzIGFmdGVyIHdoaWNoIHRoZSBzdGF0ZXMgcmV0cmlldmVkIGZyb20gdGhlIGxvY2FsIHN0b3JhZ2UgYXJlIGNvbnNpZGVyZWQKICAgICAgICAgICAgICogZXhwaXJlZC4gSXQgY2FuIGJlIHNldCBmcm9tIHRoZSBvdXRzaWRlLgogICAgICAgICAgICAgKiBAdHlwZSBOdW1iZXIKICAgICAgICAgICAgICovCiAgICAgICAgICAgIEVYUElSQVRJT05fVElNRSA6IDg2NDAwCiAgICAgICAgfSwKICAgICAgICAkY29uc3RydWN0b3IgOiBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogQ2FsbGVkIG9uIHdpbmRvdyB1bmxvYWQuCiAgICAgICAgICAgICAqIEB0eXBlIGFyaWEuY29yZS5DZmdCZWFuczpDYWxsYmFjawogICAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgdGhpcy5fc2F2ZVN0YXRlQ0IgPSB7CiAgICAgICAgICAgICAgICBmbiA6IHRoaXMuX3NhdmVTdGF0ZSwKICAgICAgICAgICAgICAgIHNjb3BlIDogdGhpcwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEN1cnJlbnQgc3RhdGUgaWQuIE9ubHkgdXNlZCBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnkgQVBJLgogICAgICAgICAgICAgKiBAdHlwZSBTdHJpbmcKICAgICAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJZCA9IG51bGw7CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogUG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgc3RhdGUgaW4gdGhlIGFycmF5IG9mIHN0b3JlZCBzdGF0ZXMuIE9ubHkgdXNlZCBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0CiAgICAgICAgICAgICAqIEhUTUw1IGhpc3RvcnkgQVBJLgogICAgICAgICAgICAgKiBAdHlwZSBTdHJpbmcKICAgICAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQb3MgPSAwOwoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIENhbGxlZCBvbiBoYXNoIGNoYW5nZU9ubHkgdXNlZCBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnkgQVBJLgogICAgICAgICAgICAgKiBAdHlwZSBhcmlhLmNvcmUuQ2ZnQmVhbnM6Q2FsbGJhY2sKICAgICAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHRoaXMuX2hhc2hDaGFuZ2VDQiA9IHsKICAgICAgICAgICAgICAgIGZuIDogdGhpcy5fb25IYXNoQ2hhbmdlLAogICAgICAgICAgICAgICAgc2NvcGUgOiB0aGlzCiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogVXNlZCB0byBzdG9yZSBzdGF0ZSBpbmZvcm1hdGlvbiBmb3IgcGFnZSByZWZyZXNoIGFuZCBleHRlcm5hbCBuYXZpZ2F0aW9uCiAgICAgICAgICAgICAqIEB0eXBlIGFyaWEuc3RvcmFnZS5Mb2NhbFN0b3JhZ2UKICAgICAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2UgPSBuZXcgYXJpYVN0b3JhZ2VMb2NhbFN0b3JhZ2UoKTsKCiAgICAgICAgICAgIHN0YXRlTWVtb3J5ID0gdGhpcy5fc3RvcmFnZS5nZXRJdGVtKHRoaXMuX1NUT1JBR0VfS0VZKSB8fCB7CiAgICAgICAgICAgICAgICBkaXNjYXJkZWQgOiBbXSwKICAgICAgICAgICAgICAgIHN0YXRlcyA6IFtdCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBhcmlhVXRpbHNFdmVudC5hZGRMaXN0ZW5lcih3aW5kb3csICJ1bmxvYWQiLCB0aGlzLl9zYXZlU3RhdGVDQik7CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogV2hldGhlciB0aGUgYnJvd3NlciBpcyBJRTcgb3IgYSBwcmV2aW91cyB2ZXJzaW9uCiAgICAgICAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHRoaXMuX2lzSUU3T3JMZXNzID0gYXJpYUNvcmVCcm93c2VyLmlzT2xkSUUgJiYgYXJpYUNvcmVCcm93c2VyLm1ham9yVmVyc2lvbiA8IDg7CgogICAgICAgICAgICB0aGlzLl9pbml0KCk7CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogU3RhdGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGRhdGEgdGhhdCB3ZXJlIGFzc29jaWF0ZWQgdG8gaXQgd2hlbiBwdXNoaW5nIG9yIHJlcGxhY2luZyB0aGUgc3RhdGUuCiAgICAgICAgICAgICAqIENvbXBsaWFudCB3aXRoIHRoZSBzdGFuZGFyZCB3aW5kb3cuaGlzdG9yeS5zdGF0ZQogICAgICAgICAgICAgKiBAdHlwZSBPYmplY3QKICAgICAgICAgICAgICovCiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmdldFN0YXRlKCk7CgogICAgICAgIH0sCiAgICAgICAgJGRlc3RydWN0b3IgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICh0aGlzLl9zdG9yYWdlKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9zYXZlU3RhdGUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl9kaXNwb3NlKCk7CiAgICAgICAgfSwKICAgICAgICAkZXZlbnRzIDogewogICAgICAgICAgICAvKiBCQUNLV0FSRC1DT01QQVRJQklMSVRZLUJFR0lOIEdILTExMjMgKi8KICAgICAgICAgICAgIm9ucG9wc3RhdGUiIDogewogICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gOiAiW0RFUFJFQ0FURUQsIHVzZSBgcG9wc3RhdGVgIGV2ZW50XSBOb3RpZnkgd2luZG93IHdoZW4gYSBzdGF0ZSBpcyBwb3BwZWQgYW5kIHJhaXNlIHRoaXMgZXZlbnQiLAogICAgICAgICAgICAgICAgcHJvcGVydGllcyA6IHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZSA6ICJUaGUgc3RhdGUgdGhhdCBoYXMgYmVlbiBwb3BwZWQuIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAvKiBCQUNLV0FSRC1DT01QQVRJQklMSVRZLUVORCBHSC0xMTIzICovCiAgICAgICAgICAgICJwb3BzdGF0ZSIgOiB7CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA6ICJOb3RpZnkgd2luZG93IHdoZW4gYSBzdGF0ZSBpcyBwb3BwZWQgYW5kIHJhaXNlIHRoaXMgZXZlbnQiLAogICAgICAgICAgICAgICAgcHJvcGVydGllcyA6IHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZSA6ICJUaGUgc3RhdGUgdGhhdCBoYXMgYmVlbiBwb3BwZWQuIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAkcHJvdG90eXBlIDogewogICAgICAgICAgICAvKiBCQUNLV0FSRC1DT01QQVRJQklMSVRZLUJFR0lOIEdILTExMjMgKi8KICAgICAgICAgICAgJG9uIDogZnVuY3Rpb24gKGxzdENmZywgaXRmV3JhcCkgewogICAgICAgICAgICAgICAgdGhpcy4kYWRkTGlzdGVuZXJzKGxzdENmZywgaXRmV3JhcCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICRhZGRMaXN0ZW5lcnMgOiBmdW5jdGlvbiAobHN0Q2ZnLCBpdGZXcmFwKSB7CiAgICAgICAgICAgICAgICBpZiAoIm9ucG9wc3RhdGUiIGluIGxzdENmZykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuJGxvZ1dhcm4odGhpcy5PTlBPUFNUQVRFX0RFUFJFQ0FURURfRVZFTlQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy4kSnNPYmplY3QuJGFkZExpc3RlbmVycy5jYWxsKHRoaXMsIGxzdENmZywgaXRmV3JhcCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8qIEJBQ0tXQVJELUNPTVBBVElCSUxJVFktRU5EIEdILTExMjMgKi8KCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBicm93c2VyCiAgICAgICAgICAgICAqIEByZXR1cm4ge29iamVjdH0gc3RhdGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGRhdGEgdGhhdCB3ZXJlIGFzc29jaWF0ZWQgdG8gaXQgd2hlbiBwdXNoaW5nIG9yIHJlcGxhY2luZwogICAgICAgICAgICAgKiB0aGUgc3RhdGUuIENvbXBsaWFudCB3aXRoIHRoZSBzdGFuZGFyZCB3aW5kb3cuaGlzdG9yeS5zdGF0ZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZ2V0U3RhdGUgOiBodG1sNUhpc3RvcnkgPyBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBhcmlhVXRpbHNKc29uLmNvcHkocmVhZEh0bWw1SGlzdG9yeVN0YXRlKCkpOwogICAgICAgICAgICAgICAgaWYgKHN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLl9faW5mbzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgc3RhdGVJbmZvID0gdGhpcy5fcmV0cmlldmVGcm9tTWVtb3J5KCk7CiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzdGF0ZUluZm8gPyBzdGF0ZUluZm8uc3RhdGUuc3RhdGUgOiBudWxsOwogICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEdldHMgdGhlIGN1cnJlbnQgdGl0bGUgb2YgdGhlIHBhZ2UKICAgICAgICAgICAgICogQHJldHVybiB7U3RyaW5nfSB0aXRsZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZ2V0VGl0bGUgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmRvY3VtZW50LnRpdGxlOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEdldHMgdXJsIHBhcnQgdGhhdCB3YXMgc2V0IHVzaW5nIGEgcHVzaFN0YXRlIG9yIHJlcGxhY2VTdGF0ZQogICAgICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHVybAogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZ2V0VXJsIDogaHRtbDVIaXN0b3J5ID8gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gcmVhZEh0bWw1SGlzdG9yeVN0YXRlKCk7CiAgICAgICAgICAgICAgICBpZiAoc3RhdGUgJiYgc3RhdGUuX19pbmZvKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLl9faW5mby51cmw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IGhhc2hNYW5hZ2VyLmdldEhhc2hTdHJpbmcoKTsKICAgICAgICAgICAgICAgIGlmIChoYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhc2guc3BsaXQodGhpcy5JRF9LRVkpWzBdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEdvIGJhY2sgb25jZSB0aHJvdWdoIHRoZSBoaXN0b3J5IChzYW1lIGFzIGhpdHRpbmcgdGhlIGJyb3dzZXIncyBiYWNrIGJ1dHRvbikKICAgICAgICAgICAgICovCiAgICAgICAgICAgIGJhY2sgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogR28gZm9yd2FyZCBvbmNlIHRocm91Z2ggdGhlIGhpc3RvcnkgKHNhbWUgYXMgaGl0dGluZyB0aGUgYnJvd3NlcidzIGZvcndhcmQgYnV0dG9uKQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZm9yd2FyZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LmZvcndhcmQoKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBHbyBiYWNrIG9yIGZvcndhcmQgdGhyb3VnaCB0aGUgaGlzdG9yeSB4IHRpbWVzCiAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBuIHBvc2l0aXZlIHRvIGdvIGZvcndhcmQsIG5lZ2F0aXZlIHRvIGdvIGJhY2sKICAgICAgICAgICAgICovCiAgICAgICAgICAgIGdvIDogd2luZG93Lmhpc3RvcnkuZ28gPyBmdW5jdGlvbiAobikgewogICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkuZ28obik7CiAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAobikgewogICAgICAgICAgICAgICAgdmFyIG1ldGhvZCA9IG4gPCAwID8gImJhY2siIDogImZvcndhcmQiOwogICAgICAgICAgICAgICAgbiA9IE1hdGguYWJzKG4pOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeVttZXRob2RdKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogUHVzaGVzIGEgbmV3IHN0YXRlIHRvIHRoZSBicm93c2VyCiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhCiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZQogICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIG1hbmRhdG9yeQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgcHVzaFN0YXRlIDogaHRtbDVIaXN0b3J5ID8gZnVuY3Rpb24gKGRhdGEsIHRpdGxlLCB1cmwpIHsKICAgICAgICAgICAgICAgIHRpdGxlID0gdGhpcy5fc2V0VGl0bGUodGl0bGUpOwogICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEgPyBhcmlhVXRpbHNKc29uLmNvcHkoZGF0YSkgOiB7fTsKICAgICAgICAgICAgICAgIGRhdGEuX19pbmZvID0gewogICAgICAgICAgICAgICAgICAgIHRpdGxlIDogdGl0bGUsCiAgICAgICAgICAgICAgICAgICAgdXJsIDogdXJsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKGRhdGEsIHRpdGxlLCB1cmwpOwogICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKTsKCiAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAoZGF0YSwgdGl0bGUsIHVybCkgewogICAgICAgICAgICAgICAgdGhpcy5fc2V0U3RhdGUoZGF0YSwgdGl0bGUsIHVybCk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogUmVwbGFjZXMgdGhlIGV4aXN0aW5nIHN0YXRlIHdpdGggYSBuZXcgc3RhdGUgdG8gdGhlIGJyb3dzZXIKICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEKICAgICAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHRpdGxlCiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgbWFuZGF0b3J5CiAgICAgICAgICAgICAqLwogICAgICAgICAgICByZXBsYWNlU3RhdGUgOiBodG1sNUhpc3RvcnkgPyBmdW5jdGlvbiAoZGF0YSwgdGl0bGUsIHVybCkgewogICAgICAgICAgICAgICAgdGl0bGUgPSB0aGlzLl9zZXRUaXRsZSh0aXRsZSk7CiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YSA/IGFyaWFVdGlsc0pzb24uY29weShkYXRhKSA6IHt9OwogICAgICAgICAgICAgICAgZGF0YS5fX2luZm8gPSB7CiAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiB0aXRsZSwKICAgICAgICAgICAgICAgICAgICB1cmwgOiB1cmwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoZGF0YSwgdGl0bGUsIHVybCk7CiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5nZXRTdGF0ZSgpOwogICAgICAgICAgICB9IDogZnVuY3Rpb24gKGRhdGEsIHRpdGxlLCB1cmwpIHsKICAgICAgICAgICAgICAgIHRoaXMuX3NldFN0YXRlKGRhdGEsIHRpdGxlLCB1cmwsIHRydWUpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEFkZCBsaXN0ZW5lcnMgYW5kIHNhdmVzIHN0YXRlIGluZm9ybWF0aW9uIHRoYXQgYXJlIG5lZWRlZCBieSB0aGUgY2xhc3MgYWNjb3JkaW5nIHRvIHRoZSBicm93c2VyIHN1cHBvcnQKICAgICAgICAgICAgICogb2YgSFRNTDUgaGlzdG9yeSBBUEkuCiAgICAgICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBfaW5pdCA6IGh0bWw1SGlzdG9yeSA/IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgICAgICB3aW5kb3cub25wb3BzdGF0ZSA9IGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgICAgICAgICBzZWxmLl9yYWlzZU9uUG9wU3RhdGVFdmVudC5jYWxsKHNlbGYsIGV2dCk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gcmVhZEh0bWw1SGlzdG9yeVN0YXRlKCksIHRpdGxlOwogICAgICAgICAgICAgICAgaWYgKHN0YXRlICYmIHN0YXRlLl9faW5mbykgewogICAgICAgICAgICAgICAgICAgIHRpdGxlID0gc3RhdGUuX19pbmZvLnRpdGxlOwogICAgICAgICAgICAgICAgICAgIGlmICh0aXRsZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRUaXRsZSh0aXRsZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRJbml0aWFsU3RhdGUoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgdmFyIHN0YXRlSW5mbyA9IHRoaXMuX3JldHJpZXZlRnJvbU1lbW9yeSgpOwogICAgICAgICAgICAgICAgaWYgKHN0YXRlSW5mbykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX2FwcGx5U3RhdGUoc3RhdGVJbmZvKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkSW5pdGlhbFN0YXRlKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaGFzaE1hbmFnZXIuYWRkQ2FsbGJhY2sodGhpcy5faGFzaENoYW5nZUNCKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBTYXZlIHRoZSBzdGF0ZXMgdGhhdCBhcmUgc3RpbGwgdmFsaWQgYW5kIG5lZWRlZCBpbiBvcmRlciB0byBzdXBwb3J0IHBhZ2UgcmVmcmVzaCBhbmQgZXh0ZXJuYWwgbmF2aWdhdGlvbi4KICAgICAgICAgICAgICogQ2FsbGVkIG9uIHdpbmRvdyB1bmxvYWQuCiAgICAgICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBfc2F2ZVN0YXRlIDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlT2xkU3RhdGVzKCk7CiAgICAgICAgICAgICAgICBhcmlhVXRpbHNFdmVudC5yZW1vdmVMaXN0ZW5lcih3aW5kb3csICJ1bmxvYWQiLCB0aGlzLl9zYXZlU3RhdGVDQik7CiAgICAgICAgICAgICAgICB0aGlzLl9zdG9yYWdlLnNldEl0ZW0odGhpcy5fU1RPUkFHRV9LRVksIHN0YXRlTWVtb3J5KTsKICAgICAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2UuJGRpc3Bvc2UoKTsKICAgICAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2UgPSBudWxsOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIFJlbW92ZSBsaXN0ZW5lcnMgYWRkZWQgaW4gdGhlIF9pbml0IG1ldGhvZAogICAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgX2Rpc3Bvc2UgOiBodG1sNUhpc3RvcnkgPyBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cub25wb3BzdGF0ZSA9IG51bGw7CiAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBoYXNoTWFuYWdlci5yZW1vdmVDYWxsYmFjayh0aGlzLl9oYXNoQ2hhbmdlQ0IpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIFNldCB0aGUgdGl0bGUgb2YgdGhlIHBhZ2UuCiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZQogICAgICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IEFjdHVhbCB0aXRsZSBvZiB0aGUgcGFnZS4gSWYgbm8gYXJndW1lbnQgaXMgcHJvdmlkZWQsIGl0IHJlcHJlc2VudHMgdGhlIGFjdHVhbCB0aXRsZSBvZgogICAgICAgICAgICAgKiB0aGUgcGFnZQogICAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgX3NldFRpdGxlIDogZnVuY3Rpb24gKHRpdGxlKSB7CiAgICAgICAgICAgICAgICB2YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7CiAgICAgICAgICAgICAgICBpZiAoYXJpYVV0aWxzVHlwZS5pc1N0cmluZyh0aXRsZSkpIHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IHRpdGxlOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IGRvY3VtZW50LnRpdGxlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRpdGxlOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEdlbmVyYXRlIHVuaXF1ZSBpZCdzIGluIGFuIGluY3JlYXNpbmcgZmFzaGlvbgogICAgICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IElkCiAgICAgICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBfZ2VuZXJhdGVJZCA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpICsgIiI7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogUmV0cmlldmUgdGhlIHN0YXRlIGZyb20gdGhlIHN0b3JlLgogICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgSWQgb2YgdGhlIHN0YXRlCiAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogPHByZT4KICAgICAgICAgICAgICogewogICAgICAgICAgICAgKiAgICAgcG9zaXRpb24gOiB7TnVtYmVyfSBwb3NpdGlvbiBpbiB0aGUgc3RvcmUsCiAgICAgICAgICAgICAqICAgICBzdGF0ZSA6IHsKICAgICAgICAgICAgICogICAgICAgICBpZCA6IHtTdHJpbmd9IGlkIG9mIHRoZSBzdGF0ZSwKICAgICAgICAgICAgICogICAgICAgICB0aXRsZSA6IHtTdHJpbmd9IHRpdGxlIG9mIHRoZSBwYWdlLAogICAgICAgICAgICAgKiAgICAgICAgIHVybCA6IHtTdHJpbmd9IG9ubHkgZm9yIGluaXRpYWwgc3RhdGVzLAogICAgICAgICAgICAgKiAgICAgICAgIHN0YXRlIDoge09iamVjdH0gU2F2ZWQgZGF0YSBmb3IgdGhlIHN0YXRlCiAgICAgICAgICAgICAqICAgICB9CiAgICAgICAgICAgICAqIH0KICAgICAgICAgICAgICogPC9wcmU+CiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBfcmV0cmlldmVGcm9tTWVtb3J5IDogZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgICAgICAgICBpZiAoaHRtbDVIaXN0b3J5KSB7CiAgICAgICAgICAgICAgICAgICAgaWQgPSBudWxsOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZCA9IGlkIHx8IHRoaXMuX2dldElkRnJvbUhhc2goKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBzdGF0ZXMgPSBzdGF0ZU1lbW9yeS5zdGF0ZXM7CiAgICAgICAgICAgICAgICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgvIy4qJC8sICIiKTsKICAgICAgICAgICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IG51bGwsIG1vc3RSZWNlbnQgPSAiMCIsIHN0YXRlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHN0YXRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVzW2ldOwogICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5pZCA9PT0gaWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uIDogaSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlIDogc3RhdGUKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnVybCA9PT0gdXJsICYmIHN0YXRlLmlkID4gbW9zdFJlY2VudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uIDogaSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlIDogc3RhdGUKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgbW9zdFJlY2VudCA9IHN0YXRlLmlkOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBBZGQgYW4gaW5pdGlhbCBzdGF0ZSBieSBzdG9yaW5nIGFsc28gdGhlIHVybAogICAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgX2FkZEluaXRpYWxTdGF0ZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuX2dlbmVyYXRlSWQoKTsKICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQb3MgPSBzdGF0ZU1lbW9yeS5zdGF0ZXMubGVuZ3RoOwoKICAgICAgICAgICAgICAgIHZhciBzdGF0ZUVudHJ5ID0gewogICAgICAgICAgICAgICAgICAgIHVybCA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoLyMuKiQvLCAiIiksCiAgICAgICAgICAgICAgICAgICAgaWQgOiBpZCwKICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IHdpbmRvdy5kb2N1bWVudC50aXRsZSB8fCAiIiwKICAgICAgICAgICAgICAgICAgICBzdGF0ZSA6IG51bGwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBzdGF0ZU1lbW9yeS5zdGF0ZXMucHVzaChzdGF0ZUVudHJ5KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZW1vdmUgb2xkIHN0YXRlcyB0aGF0IGFyZSBwcmVzZW50IGluIHRoZSBzdGF0ZSBzdG9yZS4gU3RhdGVzIGFyZSBjb25zaWRlcmVkIG9sZCBpZiB0aGV5IGhhdmUgYmVlbiBzdG9yZWQKICAgICAgICAgICAgICogbW9yZSB0aGFuIGFyaWEudXRpbHMuSGlzdG9yeS5FWFBJUkFUSU9OX1RJTUUgc2Vjb25kcyBiZWZvcmUKICAgICAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgICAgICovCiAgICAgICAgICAgIF9yZW1vdmVPbGRTdGF0ZXMgOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBzdGF0ZU1lbW9yeS5kaXNjYXJkZWQgPSBbXTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0lFN09yTGVzcykgewogICAgICAgICAgICAgICAgICAgIHN0YXRlTWVtb3J5LnN0YXRlcyA9IFtzdGF0ZU1lbW9yeS5zdGF0ZXNbdGhpcy5fY3VycmVudFBvc11dOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBzdGF0ZXMgPSBzdGF0ZU1lbW9yeS5zdGF0ZXM7CiAgICAgICAgICAgICAgICB2YXIgZXhwaXJhdGlvblRpbWUgPSAoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAtIHRoaXMuRVhQSVJBVElPTl9USU1FICogMTAwMCkgKyAiIjsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlc1tpXS5pZCA+IGV4cGlyYXRpb25UaW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXRlcy5zcGxpY2UoMCwgaSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICAvLyBNZXRob2RzIHRoYXQgYXJlIHNwZWNpZmljIHRvIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBIVE1MNSBoaXN0b3J5IEFQSS4KCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZWFjdCB0byBuYXRpdmUgb25wb3BzdGF0ZSBldmVudCBieSBzZXR0aW5nIHRoZSB0aXRsZSBhbmQgcmFpc2luZyB0aGUgb25wb3BzdGF0ZSBjbGFzcyBldmVudC4gT25seSB1c2VkCiAgICAgICAgICAgICAqIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBIVE1MNSBoaXN0b3J5IEFQSS4KICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IEV2ZW50IG9iamVjdAogICAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgX3JhaXNlT25Qb3BTdGF0ZUV2ZW50IDogZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gYXJpYVV0aWxzSnNvbi5jb3B5KGV2dC5zdGF0ZSksIHRpdGxlOwogICAgICAgICAgICAgICAgaWYgKHN0YXRlICYmIHN0YXRlLl9faW5mbykgewogICAgICAgICAgICAgICAgICAgIHRpdGxlID0gc3RhdGUuX19pbmZvLnRpdGxlOwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5fX2luZm87CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZUluZm8gPSB0aGlzLl9yZXRyaWV2ZUZyb21NZW1vcnkoKTsKICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IHN0YXRlSW5mbyA/IHN0YXRlSW5mby5zdGF0ZS50aXRsZSA6IG51bGw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7CiAgICAgICAgICAgICAgICBpZiAodGl0bGUpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRUaXRsZSh0aXRsZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvKiBCQUNLV0FSRC1DT01QQVRJQklMSVRZLUJFR0lOIEdILTExMjMgKi8KICAgICAgICAgICAgICAgIHRoaXMuJHJhaXNlRXZlbnQoewogICAgICAgICAgICAgICAgICAgIG5hbWUgOiAib25wb3BzdGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGUgOiBzdGF0ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAvKiBCQUNLV0FSRC1DT01QQVRJQklMSVRZLUVORCBHSC0xMTIzICovCiAgICAgICAgICAgICAgICB0aGlzLiRyYWlzZUV2ZW50KHsKICAgICAgICAgICAgICAgICAgICBuYW1lIDogInBvcHN0YXRlIiwKICAgICAgICAgICAgICAgICAgICBzdGF0ZSA6IHN0YXRlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8vIE1ldGhvZHMgdGhhdCBhcmUgc3BlY2lmaWMgdG8gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5IEFQSS4gSGFzaC1iYXNlZCBuYXZpZ2F0aW9uCiAgICAgICAgICAgIC8vIGZhbGxiYWNrIGlzIG5lZWRlZAoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEdldCB0aGUgaWQgYmFzZWQgb24gdGhlIGhhc2guIFVzZWZ1bCB3aGVuIGhhc2gtYmFzZWQgbmF2aWdhdGlvbiBpcyB1c2VkIGFzIGEgZmFsbGJhY2sKICAgICAgICAgICAgICogQHJldHVybiB7U3RyaW5nfSBJbmZlcnJlZCBpZAogICAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgX2dldElkRnJvbUhhc2ggOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgaWQgPSBoYXNoTWFuYWdlci5nZXRIYXNoU3RyaW5nKCkuc3BsaXQodGhpcy5JRF9LRVkpOwogICAgICAgICAgICAgICAgaWYgKGlkLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWRbMV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZWFjdCB0byBhIGhhc2ggY2hhbmdlIGJ5IHJldHJpZXZpbmcgdGhlIHN0YXRlIGZyb20gdGhlIHN0b3JlIGFuZCByYWlzaW5nIHRoZSBvbnBvcHN0YXRlIGV2ZW50LgogICAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgX29uSGFzaENoYW5nZSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBzdGF0ZUluZm8gPSB0aGlzLl9yZXRyaWV2ZUZyb21NZW1vcnkoKTsKICAgICAgICAgICAgICAgIHZhciBpZCA9IHN0YXRlSW5mbyA/IHN0YXRlSW5mby5zdGF0ZS5pZCA6IG51bGw7CiAgICAgICAgICAgICAgICBpZiAoaWQgJiYgdGhpcy5fY3VycmVudElkICE9IGlkICYmIHRoaXMuX2FwcGx5U3RhdGUoc3RhdGVJbmZvKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmdldFN0YXRlKCk7CiAgICAgICAgICAgICAgICAgICAgLyogQkFDS1dBUkQtQ09NUEFUSUJJTElUWS1CRUdJTiBHSC0xMTIzICovCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcmFpc2VFdmVudCh7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgOiAib25wb3BzdGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlIDogdGhpcy5zdGF0ZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIC8qIEJBQ0tXQVJELUNPTVBBVElCSUxJVFktRU5EIEdILTExMjMgKi8KICAgICAgICAgICAgICAgICAgICB0aGlzLiRyYWlzZUV2ZW50KHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA6ICJwb3BzdGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlIDogdGhpcy5zdGF0ZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIFB1c2hlcyBvciByZXBsYWNlcyBhIG5ldyBzdGF0ZSBpbiB0aGUgYnJvd3NlciBoaXN0b3J5CiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhCiAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZQogICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIG1hbmRhdG9yeQogICAgICAgICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlcGxhY2UKICAgICAgICAgICAgICovCiAgICAgICAgICAgIF9zZXRTdGF0ZSA6IGZ1bmN0aW9uIChkYXRhLCB0aXRsZSwgdXJsLCByZXBsYWNlKSB7CiAgICAgICAgICAgICAgICBpZiAocmVwbGFjZSAmJiB0aGlzLl9pc0lFN09yTGVzcykgewogICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZUluZm8gPSB0aGlzLl9yZXRyaWV2ZUZyb21NZW1vcnkoKTsKICAgICAgICAgICAgICAgICAgICBzdGF0ZU1lbW9yeS5kaXNjYXJkZWQucHVzaChzdGF0ZUluZm8uc3RhdGUuaWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5fZ2VuZXJhdGVJZCgpOwogICAgICAgICAgICAgICAgdmFyIGhhc2ggPSB1cmwgfHwgIiI7CiAgICAgICAgICAgICAgICBoYXNoICs9IHRoaXMuSURfS0VZICsgaWQ7CiAgICAgICAgICAgICAgICB0aXRsZSA9IHRoaXMuX3NldFRpdGxlKHRpdGxlKTsKICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJZCA9IGlkOwogICAgICAgICAgICAgICAgdmFyIHN0YXRlRW50cnkgPSB7CiAgICAgICAgICAgICAgICAgICAgaWQgOiBpZCwKICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IHRpdGxlLAogICAgICAgICAgICAgICAgICAgIHN0YXRlIDogZGF0YSA/IGFyaWFVdGlsc0pzb24uY29weShkYXRhKSA6IHt9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFBvcysrOwogICAgICAgICAgICAgICAgc3RhdGVNZW1vcnkuc3RhdGVzLnNwbGljZSh0aGlzLl9jdXJyZW50UG9zLCBzdGF0ZU1lbW9yeS5zdGF0ZXMubGVuZ3RoIC0gdGhpcy5fY3VycmVudFBvcywgc3RhdGVFbnRyeSk7CiAgICAgICAgICAgICAgICBpZiAoIXJlcGxhY2UgfHwgdGhpcy5faXNJRTdPckxlc3MpIHsKICAgICAgICAgICAgICAgICAgICBoYXNoTWFuYWdlci5zZXRIYXNoKGhhc2gpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKC8jLiokLywgIiIpICsgIiMiICsgaGFzaCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5nZXRTdGF0ZSgpOwoKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBBcHBseSBhIHN0YXRlIGJ5IGFsc28gY2hlY2tpbmcgd2hldGhlciBpdCBpcyBkaXNjYXJkZWQgb3Igbm90CiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZXR9IHN0YXRlSW5mbwogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiA8cHJlPgogICAgICAgICAgICAgKiB7CiAgICAgICAgICAgICAqICAgICBwb3NpdGlvbiA6IHtOdW1iZXJ9IHBvc2l0aW9uIGluIHRoZSBzdG9yZSwKICAgICAgICAgICAgICogICAgIHN0YXRlIDogewogICAgICAgICAgICAgKiAgICAgICAgIGlkIDoge1N0cmluZ30gaWQgb2YgdGhlIHN0YXRlLAogICAgICAgICAgICAgKiAgICAgICAgIHRpdGxlIDoge1N0cmluZ30gdGl0bGUgb2YgdGhlIHBhZ2UsCiAgICAgICAgICAgICAqICAgICAgICAgdXJsIDoge1N0cmluZ30gb25seSBmb3IgaW5pdGlhbCBzdGF0ZXMsCiAgICAgICAgICAgICAqICAgICAgICAgc3RhdGUgOiB7T2JqZWN0fSBTYXZlZCBkYXRhIGZvciB0aGUgc3RhdGUKICAgICAgICAgICAgICogICAgIH0KICAgICAgICAgICAgICogfQogICAgICAgICAgICAgKiA8L3ByZT4KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgc3RhdGUgaGFzIGJlZW4gYXBwbGllZCwgZmFsc2UgaWYgdGhlIHN0YXRlIGlzIGRpc2NhcmRlZAogICAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgX2FwcGx5U3RhdGUgOiBmdW5jdGlvbiAoc3RhdGVJbmZvKSB7CiAgICAgICAgICAgICAgICBpZiAoZHluYW1pY0RlcGVuZGVuY2llcy5hcnJheVV0aWwuY29udGFpbnMoc3RhdGVNZW1vcnkuZGlzY2FyZGVkLCBzdGF0ZUluZm8uc3RhdGUuaWQpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlSW5mby5wb3NpdGlvbiA8IHRoaXMuX2N1cnJlbnRQb3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrKCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3J3YXJkKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQb3MgPSBzdGF0ZUluZm8ucG9zaXRpb247CiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50SWQgPSBzdGF0ZUluZm8uc3RhdGUuaWQ7CiAgICAgICAgICAgICAgICB0aGlzLl9zZXRUaXRsZShzdGF0ZUluZm8uc3RhdGUudGl0bGUpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgfQogICAgfSk7Cn0pKCk7Cg==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 09:33:57 GMT",
                    "Content-Length": "22778",
                    "Date": "Thu, 06 Nov 2014 09:33:59 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}