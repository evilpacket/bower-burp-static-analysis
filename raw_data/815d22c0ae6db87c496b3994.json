{
    "url": "http://localhost:9999/amazingSurge/amazing-shortcodes/shortcodes/js/jquery-asTabs.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.location.hash</b> and written to <b>window.history.pushState()</b> via the following statements:<ul><li>var url = window.location.hash;</li><li>url = url.replace(reg, '');</li><li>url = url.replace(/^#&amp;/, '#');</li><li>window.history.pushState(states, \"\", url);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/amazingSurge/amazing-shortcodes/shortcodes/js/jquery-asTabs.js",
                "path": "/amazingSurge/amazing-shortcodes/shortcodes/js/jquery-asTabs.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hbWF6aW5nU3VyZ2UvYW1hemluZy1zaG9ydGNvZGVzL3Nob3J0Y29kZXMvanMvanF1ZXJ5LWFzVGFicy5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 06:55:15 GMT",
                    "Content-Length": "21210",
                    "Date": "Thu, 06 Nov 2014 06:55:16 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}