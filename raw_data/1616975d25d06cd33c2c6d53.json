{
    "url": "http://localhost:9999/miclle/mice/assets/javascripts/mice/jquery.onepage-scroll.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.location.href</b> and written to <b>history.pushState()</b> via the following statements:<ul><li>var href = window.location.href.substr(0,window.location.href.indexOf('#')) + \"#\" + (init_index);</li><li>history.pushState( {}, document.title, href );</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/miclle/mice/assets/javascripts/mice/jquery.onepage-scroll.js",
                "path": "/miclle/mice/assets/javascripts/mice/jquery.onepage-scroll.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9taWNsbGUvbWljZS9hc3NldHMvamF2YXNjcmlwdHMvbWljZS9qcXVlcnkub25lcGFnZS1zY3JvbGwuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICoganF1ZXJ5LW9uZXBhZ2Utc2Nyb2xsLmpzIHYxLjMKICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICogQ29weXJpZ2h0IDIwMTMgUGV0ZSBSb2p3b25nc3VyaXlhLgogKiBodHRwOi8vd3d3LnRoZXBldGVkZXNpZ24uY29tCiAqCiAqIENyZWF0ZSBhbiBBcHBsZS1saWtlIHdlYnNpdGUgdGhhdCBsZXQgdXNlciBzY3JvbGwKICogb25lIHBhZ2UgYXQgYSB0aW1lCiAqCiAqIENyZWRpdDogRWlrZSBTZW5kIGZvciB0aGUgYXdlc29tZSBzd2lwZSBldmVudAogKiBodHRwczovL2dpdGh1Yi5jb20vcGVhY2hhbmFuci9vbmVwYWdlLXNjcm9sbAogKgogKiBMaWNlbnNlOiBHUEwgdjMKICoKICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoKIWZ1bmN0aW9uKCQpewoKICB2YXIgZGVmYXVsdHMgPSB7CiAgICBzZWN0aW9uQ29udGFpbmVyOiAic2VjdGlvbiIsCiAgICBlYXNpbmc6ICJlYXNlIiwKICAgIGFuaW1hdGlvblRpbWU6IDEwMDAsCiAgICBwYWdpbmF0aW9uOiB0cnVlLAogICAgdXBkYXRlVVJMOiBmYWxzZSwKICAgIGtleWJvYXJkOiB0cnVlLAogICAgYmVmb3JlTW92ZTogbnVsbCwKICAgIGFmdGVyTW92ZTogbnVsbCwKICAgIGxvb3A6IHRydWUsCiAgICByZXNwb25zaXZlRmFsbGJhY2s6IGZhbHNlLAogICAgZGlyZWN0aW9uIDogJ3ZlcnRpY2FsJwoJfTsKCgkvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgkvKiAgQ3JlZGl0OiBFaWtlIFNlbmQgZm9yIHRoZSBhd2Vzb21lIHN3aXBlIGV2ZW50ICovCgkvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoJJC5mbi5zd2lwZUV2ZW50cyA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewoKICAgICAgICB2YXIgc3RhcnRYLAogICAgICAgICAgICBzdGFydFksCiAgICAgICAgICAgICR0aGlzID0gJCh0aGlzKTsKCiAgICAgICAgJHRoaXMuYmluZCgndG91Y2hzdGFydCcsIHRvdWNoc3RhcnQpOwoKICAgICAgICBmdW5jdGlvbiB0b3VjaHN0YXJ0KGV2ZW50KSB7CiAgICAgICAgICB2YXIgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlczsKICAgICAgICAgIGlmICh0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoKSB7CiAgICAgICAgICAgIHN0YXJ0WCA9IHRvdWNoZXNbMF0ucGFnZVg7CiAgICAgICAgICAgIHN0YXJ0WSA9IHRvdWNoZXNbMF0ucGFnZVk7CiAgICAgICAgICAgICR0aGlzLmJpbmQoJ3RvdWNobW92ZScsIHRvdWNobW92ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB0b3VjaG1vdmUoZXZlbnQpIHsKICAgICAgICAgIHZhciB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzOwogICAgICAgICAgaWYgKHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGgpIHsKICAgICAgICAgICAgdmFyIGRlbHRhWCA9IHN0YXJ0WCAtIHRvdWNoZXNbMF0ucGFnZVg7CiAgICAgICAgICAgIHZhciBkZWx0YVkgPSBzdGFydFkgLSB0b3VjaGVzWzBdLnBhZ2VZOwoKICAgICAgICAgICAgaWYgKGRlbHRhWCA+PSA1MCkgewogICAgICAgICAgICAgICR0aGlzLnRyaWdnZXIoInN3aXBlTGVmdCIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkZWx0YVggPD0gLTUwKSB7CiAgICAgICAgICAgICAgJHRoaXMudHJpZ2dlcigic3dpcGVSaWdodCIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkZWx0YVkgPj0gNTApIHsKICAgICAgICAgICAgICAkdGhpcy50cmlnZ2VyKCJzd2lwZVVwIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGRlbHRhWSA8PSAtNTApIHsKICAgICAgICAgICAgICAkdGhpcy50cmlnZ2VyKCJzd2lwZURvd24iKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGVsdGFYKSA+PSA1MCB8fCBNYXRoLmFicyhkZWx0YVkpID49IDUwKSB7CiAgICAgICAgICAgICAgJHRoaXMudW5iaW5kKCd0b3VjaG1vdmUnLCB0b3VjaG1vdmUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgfSk7CiAgICB9OwoKCiAgJC5mbi5vbmVwYWdlX3Njcm9sbCA9IGZ1bmN0aW9uKG9wdGlvbnMpewogICAgdmFyIHNldHRpbmdzID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKSwKICAgICAgICBlbCA9ICQodGhpcyksCiAgICAgICAgc2VjdGlvbnMgPSAkKHNldHRpbmdzLnNlY3Rpb25Db250YWluZXIpCiAgICAgICAgdG90YWwgPSBzZWN0aW9ucy5sZW5ndGgsCiAgICAgICAgc3RhdHVzID0gIm9mZiIsCiAgICAgICAgdG9wUG9zID0gMCwKICAgICAgICBsZWZ0UG9zID0gMCwKICAgICAgICBsYXN0QW5pbWF0aW9uID0gMCwKICAgICAgICBxdWlldFBlcmlvZCA9IDUwMCwKICAgICAgICBwYWdpbmF0aW9uTGlzdCA9ICIiOwoKICAgICQuZm4udHJhbnNmb3JtUGFnZSA9IGZ1bmN0aW9uKHNldHRpbmdzLCBwb3MsIGluZGV4KSB7CiAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MuYmVmb3JlTW92ZSA9PSAnZnVuY3Rpb24nKSBzZXR0aW5ncy5iZWZvcmVNb3ZlKGluZGV4KTsKICAgICAgJCh0aGlzKS5jc3MoewogICAgICAgICItd2Via2l0LXRyYW5zZm9ybSI6ICggc2V0dGluZ3MuZGlyZWN0aW9uID09ICdob3Jpem9udGFsJyApID8gInRyYW5zbGF0ZTNkKCIgKyBwb3MgKyAiJSwgMCwgMCkiIDogInRyYW5zbGF0ZTNkKDAsICIgKyBwb3MgKyAiJSwgMCkiLAogICAgICAgICItd2Via2l0LXRyYW5zaXRpb24iOiAiYWxsICIgKyBzZXR0aW5ncy5hbmltYXRpb25UaW1lICsgIm1zICIgKyBzZXR0aW5ncy5lYXNpbmcsCiAgICAgICAgIi1tb3otdHJhbnNmb3JtIjogKCBzZXR0aW5ncy5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnICkgPyAidHJhbnNsYXRlM2QoIiArIHBvcyArICIlLCAwLCAwKSIgOiAidHJhbnNsYXRlM2QoMCwgIiArIHBvcyArICIlLCAwKSIsCiAgICAgICAgIi1tb3otdHJhbnNpdGlvbiI6ICJhbGwgIiArIHNldHRpbmdzLmFuaW1hdGlvblRpbWUgKyAibXMgIiArIHNldHRpbmdzLmVhc2luZywKICAgICAgICAiLW1zLXRyYW5zZm9ybSI6ICggc2V0dGluZ3MuZGlyZWN0aW9uID09ICdob3Jpem9udGFsJyApID8gInRyYW5zbGF0ZTNkKCIgKyBwb3MgKyAiJSwgMCwgMCkiIDogInRyYW5zbGF0ZTNkKDAsICIgKyBwb3MgKyAiJSwgMCkiLAogICAgICAgICItbXMtdHJhbnNpdGlvbiI6ICJhbGwgIiArIHNldHRpbmdzLmFuaW1hdGlvblRpbWUgKyAibXMgIiArIHNldHRpbmdzLmVhc2luZywKICAgICAgICAidHJhbnNmb3JtIjogKCBzZXR0aW5ncy5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnICkgPyAidHJhbnNsYXRlM2QoIiArIHBvcyArICIlLCAwLCAwKSIgOiAidHJhbnNsYXRlM2QoMCwgIiArIHBvcyArICIlLCAwKSIsCiAgICAgICAgInRyYW5zaXRpb24iOiAiYWxsICIgKyBzZXR0aW5ncy5hbmltYXRpb25UaW1lICsgIm1zICIgKyBzZXR0aW5ncy5lYXNpbmcKICAgICAgfSk7CiAgICAgICQodGhpcykub25lKCd3ZWJraXRUcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIG9UcmFuc2l0aW9uRW5kIG1zVHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24oZSkgewogICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MuYWZ0ZXJNb3ZlID09ICdmdW5jdGlvbicpIHNldHRpbmdzLmFmdGVyTW92ZShpbmRleCk7CiAgICAgIH0pOwogICAgfQoKICAgICQuZm4ubW92ZURvd24gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGVsID0gJCh0aGlzKQogICAgICBpbmRleCA9ICQoc2V0dGluZ3Muc2VjdGlvbkNvbnRhaW5lciArIi5hY3RpdmUiKS5kYXRhKCJpbmRleCIpOwogICAgICBjdXJyZW50ID0gJChzZXR0aW5ncy5zZWN0aW9uQ29udGFpbmVyICsgIltkYXRhLWluZGV4PSciICsgaW5kZXggKyAiJ10iKTsKICAgICAgbmV4dCA9ICQoc2V0dGluZ3Muc2VjdGlvbkNvbnRhaW5lciArICJbZGF0YS1pbmRleD0nIiArIChpbmRleCArIDEpICsgIiddIik7CiAgICAgIGlmKG5leHQubGVuZ3RoIDwgMSkgewogICAgICAgIGlmIChzZXR0aW5ncy5sb29wID09IHRydWUpIHsKICAgICAgICAgIHBvcyA9IDA7CiAgICAgICAgICBuZXh0ID0gJChzZXR0aW5ncy5zZWN0aW9uQ29udGFpbmVyICsgIltkYXRhLWluZGV4PScxJ10iKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuCiAgICAgICAgfQoKICAgICAgfWVsc2UgewogICAgICAgIHBvcyA9IChpbmRleCAqIDEwMCkgKiAtMTsKICAgICAgfQogICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmJlZm9yZU1vdmUgPT0gJ2Z1bmN0aW9uJykgc2V0dGluZ3MuYmVmb3JlTW92ZSggbmV4dC5kYXRhKCJpbmRleCIpKTsKICAgICAgY3VycmVudC5yZW1vdmVDbGFzcygiYWN0aXZlIikKICAgICAgbmV4dC5hZGRDbGFzcygiYWN0aXZlIik7CiAgICAgIGlmKHNldHRpbmdzLnBhZ2luYXRpb24gPT0gdHJ1ZSkgewogICAgICAgICQoIi5vbmVwYWdlLXBhZ2luYXRpb24gbGkgYSIgKyAiW2RhdGEtaW5kZXg9JyIgKyBpbmRleCArICInXSIpLnJlbW92ZUNsYXNzKCJhY3RpdmUiKTsKICAgICAgICAkKCIub25lcGFnZS1wYWdpbmF0aW9uIGxpIGEiICsgIltkYXRhLWluZGV4PSciICsgbmV4dC5kYXRhKCJpbmRleCIpICsgIiddIikuYWRkQ2xhc3MoImFjdGl2ZSIpOwogICAgICB9CgogICAgICAkKCJib2R5IilbMF0uY2xhc3NOYW1lID0gJCgiYm9keSIpWzBdLmNsYXNzTmFtZS5yZXBsYWNlKC9cYnZpZXdpbmctcGFnZS1cZC4qP1xiL2csICcnKTsKICAgICAgJCgiYm9keSIpLmFkZENsYXNzKCJ2aWV3aW5nLXBhZ2UtIituZXh0LmRhdGEoImluZGV4IikpCgogICAgICBpZiAoaGlzdG9yeS5yZXBsYWNlU3RhdGUgJiYgc2V0dGluZ3MudXBkYXRlVVJMID09IHRydWUpIHsKICAgICAgICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnN1YnN0cigwLHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKSkgKyAiIyIgKyAoaW5kZXggKyAxKTsKICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSgge30sIGRvY3VtZW50LnRpdGxlLCBocmVmICk7CiAgICAgIH0KICAgICAgZWwudHJhbnNmb3JtUGFnZShzZXR0aW5ncywgcG9zLCBuZXh0LmRhdGEoImluZGV4IikpOwogICAgfQoKICAgICQuZm4ubW92ZVVwID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBlbCA9ICQodGhpcykKICAgICAgaW5kZXggPSAkKHNldHRpbmdzLnNlY3Rpb25Db250YWluZXIgKyIuYWN0aXZlIikuZGF0YSgiaW5kZXgiKTsKICAgICAgY3VycmVudCA9ICQoc2V0dGluZ3Muc2VjdGlvbkNvbnRhaW5lciArICJbZGF0YS1pbmRleD0nIiArIGluZGV4ICsgIiddIik7CiAgICAgIG5leHQgPSAkKHNldHRpbmdzLnNlY3Rpb25Db250YWluZXIgKyAiW2RhdGEtaW5kZXg9JyIgKyAoaW5kZXggLSAxKSArICInXSIpOwoKICAgICAgaWYobmV4dC5sZW5ndGggPCAxKSB7CiAgICAgICAgaWYgKHNldHRpbmdzLmxvb3AgPT0gdHJ1ZSkgewogICAgICAgICAgcG9zID0gKCh0b3RhbCAtIDEpICogMTAwKSAqIC0xOwogICAgICAgICAgbmV4dCA9ICQoc2V0dGluZ3Muc2VjdGlvbkNvbnRhaW5lciArICJbZGF0YS1pbmRleD0nIit0b3RhbCsiJ10iKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgIH1lbHNlIHsKICAgICAgICBwb3MgPSAoKG5leHQuZGF0YSgiaW5kZXgiKSAtIDEpICogMTAwKSAqIC0xOwogICAgICB9CiAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MuYmVmb3JlTW92ZSA9PSAnZnVuY3Rpb24nKSBzZXR0aW5ncy5iZWZvcmVNb3ZlKG5leHQuZGF0YSgiaW5kZXgiKSk7CiAgICAgIGN1cnJlbnQucmVtb3ZlQ2xhc3MoImFjdGl2ZSIpCiAgICAgIG5leHQuYWRkQ2xhc3MoImFjdGl2ZSIpCiAgICAgIGlmKHNldHRpbmdzLnBhZ2luYXRpb24gPT0gdHJ1ZSkgewogICAgICAgICQoIi5vbmVwYWdlLXBhZ2luYXRpb24gbGkgYSIgKyAiW2RhdGEtaW5kZXg9JyIgKyBpbmRleCArICInXSIpLnJlbW92ZUNsYXNzKCJhY3RpdmUiKTsKICAgICAgICAkKCIub25lcGFnZS1wYWdpbmF0aW9uIGxpIGEiICsgIltkYXRhLWluZGV4PSciICsgbmV4dC5kYXRhKCJpbmRleCIpICsgIiddIikuYWRkQ2xhc3MoImFjdGl2ZSIpOwogICAgICB9CiAgICAgICQoImJvZHkiKVswXS5jbGFzc05hbWUgPSAkKCJib2R5IilbMF0uY2xhc3NOYW1lLnJlcGxhY2UoL1xidmlld2luZy1wYWdlLVxkLio/XGIvZywgJycpOwogICAgICAkKCJib2R5IikuYWRkQ2xhc3MoInZpZXdpbmctcGFnZS0iK25leHQuZGF0YSgiaW5kZXgiKSkKCiAgICAgIGlmIChoaXN0b3J5LnJlcGxhY2VTdGF0ZSAmJiBzZXR0aW5ncy51cGRhdGVVUkwgPT0gdHJ1ZSkgewogICAgICAgIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWYuc3Vic3RyKDAsd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpKSArICIjIiArIChpbmRleCAtIDEpOwogICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKCB7fSwgZG9jdW1lbnQudGl0bGUsIGhyZWYgKTsKICAgICAgfQogICAgICBlbC50cmFuc2Zvcm1QYWdlKHNldHRpbmdzLCBwb3MsIG5leHQuZGF0YSgiaW5kZXgiKSk7CiAgICB9CgogICAgJC5mbi5tb3ZlVG8gPSBmdW5jdGlvbihwYWdlX2luZGV4KSB7CiAgICAgIGN1cnJlbnQgPSAkKHNldHRpbmdzLnNlY3Rpb25Db250YWluZXIgKyAiLmFjdGl2ZSIpCiAgICAgIG5leHQgPSAkKHNldHRpbmdzLnNlY3Rpb25Db250YWluZXIgKyAiW2RhdGEtaW5kZXg9JyIgKyAocGFnZV9pbmRleCkgKyAiJ10iKTsKICAgICAgaWYobmV4dC5sZW5ndGggPiAwKSB7CiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5iZWZvcmVNb3ZlID09ICdmdW5jdGlvbicpIHNldHRpbmdzLmJlZm9yZU1vdmUobmV4dC5kYXRhKCJpbmRleCIpKTsKICAgICAgICBjdXJyZW50LnJlbW92ZUNsYXNzKCJhY3RpdmUiKQogICAgICAgIG5leHQuYWRkQ2xhc3MoImFjdGl2ZSIpCiAgICAgICAgJCgiLm9uZXBhZ2UtcGFnaW5hdGlvbiBsaSBhIiArICIuYWN0aXZlIikucmVtb3ZlQ2xhc3MoImFjdGl2ZSIpOwogICAgICAgICQoIi5vbmVwYWdlLXBhZ2luYXRpb24gbGkgYSIgKyAiW2RhdGEtaW5kZXg9JyIgKyAocGFnZV9pbmRleCkgKyAiJ10iKS5hZGRDbGFzcygiYWN0aXZlIik7CiAgICAgICAgJCgiYm9keSIpWzBdLmNsYXNzTmFtZSA9ICQoImJvZHkiKVswXS5jbGFzc05hbWUucmVwbGFjZSgvXGJ2aWV3aW5nLXBhZ2UtXGQuKj9cYi9nLCAnJyk7CiAgICAgICAgJCgiYm9keSIpLmFkZENsYXNzKCJ2aWV3aW5nLXBhZ2UtIituZXh0LmRhdGEoImluZGV4IikpCgogICAgICAgIHBvcyA9ICgocGFnZV9pbmRleCAtIDEpICogMTAwKSAqIC0xOwoKICAgICAgICBpZiAoaGlzdG9yeS5yZXBsYWNlU3RhdGUgJiYgc2V0dGluZ3MudXBkYXRlVVJMID09IHRydWUpIHsKICAgICAgICAgICAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zdWJzdHIoMCx3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJykpICsgIiMiICsgKHBhZ2VfaW5kZXggLSAxKTsKICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoIHt9LCBkb2N1bWVudC50aXRsZSwgaHJlZiApOwogICAgICAgIH0KICAgICAgICBlbC50cmFuc2Zvcm1QYWdlKHNldHRpbmdzLCBwb3MsIHBhZ2VfaW5kZXgpOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcmVzcG9uc2l2ZSgpIHsKICAgICAgLy9zdGFydCBtb2RpZmljYXRpb24KICAgICAgdmFyIHZhbEZvclRlc3QgPSBmYWxzZTsKICAgICAgdmFyIHR5cGVPZlJGID0gdHlwZW9mIHNldHRpbmdzLnJlc3BvbnNpdmVGYWxsYmFjawoKICAgICAgaWYodHlwZU9mUkYgPT0gIm51bWJlciIpewogICAgICAJdmFsRm9yVGVzdCA9ICQod2luZG93KS53aWR0aCgpIDwgc2V0dGluZ3MucmVzcG9uc2l2ZUZhbGxiYWNrOwogICAgICB9CiAgICAgIGlmKHR5cGVPZlJGID09ICJib29sZWFuIil7CiAgICAgIAl2YWxGb3JUZXN0ID0gc2V0dGluZ3MucmVzcG9uc2l2ZUZhbGxiYWNrOwogICAgICB9CiAgICAgIGlmKHR5cGVPZlJGID09ICJmdW5jdGlvbiIpewogICAgICAJdmFsRnVuY3Rpb24gPSBzZXR0aW5ncy5yZXNwb25zaXZlRmFsbGJhY2soKTsKICAgICAgCXZhbEZvclRlc3QgPSB2YWxGdW5jdGlvbjsKICAgICAgCXR5cGVPRnYgPSB0eXBlb2YgdmFsRm9yVGVzdDsKICAgICAgCWlmKHR5cGVPRnYgPT0gIm51bWJlciIpewogICAgICAJCXZhbEZvclRlc3QgPSAkKHdpbmRvdykud2lkdGgoKSA8IHZhbEZ1bmN0aW9uOwogICAgICAJfQogICAgICB9CgogICAgICAvL2VuZCBtb2RpZmljYXRpb24KICAgICAgaWYgKHZhbEZvclRlc3QpIHsKICAgICAgICAkKCJib2R5IikuYWRkQ2xhc3MoImRpc2FibGVkLW9uZXBhZ2Utc2Nyb2xsIik7CiAgICAgICAgJChkb2N1bWVudCkudW5iaW5kKCdtb3VzZXdoZWVsIERPTU1vdXNlU2Nyb2xsIE1vek1vdXNlUGl4ZWxTY3JvbGwnKTsKICAgICAgICBlbC5zd2lwZUV2ZW50cygpLnVuYmluZCgic3dpcGVEb3duIHN3aXBlVXAiKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZigkKCJib2R5IikuaGFzQ2xhc3MoImRpc2FibGVkLW9uZXBhZ2Utc2Nyb2xsIikpIHsKICAgICAgICAgICQoImJvZHkiKS5yZW1vdmVDbGFzcygiZGlzYWJsZWQtb25lcGFnZS1zY3JvbGwiKTsKICAgICAgICAgICQoImh0bWwsIGJvZHksIC53cmFwcGVyIikuYW5pbWF0ZSh7IHNjcm9sbFRvcDogMCB9LCAiZmFzdCIpOwogICAgICAgIH0KCgogICAgICAgIGVsLnN3aXBlRXZlbnRzKCkuYmluZCgic3dpcGVEb3duIiwgIGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgIGlmICghJCgiYm9keSIpLmhhc0NsYXNzKCJkaXNhYmxlZC1vbmVwYWdlLXNjcm9sbCIpKSBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgZWwubW92ZVVwKCk7CiAgICAgICAgfSkuYmluZCgic3dpcGVVcCIsIGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgIGlmICghJCgiYm9keSIpLmhhc0NsYXNzKCJkaXNhYmxlZC1vbmVwYWdlLXNjcm9sbCIpKSBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgZWwubW92ZURvd24oKTsKICAgICAgICB9KTsKCiAgICAgICAgJChkb2N1bWVudCkuYmluZCgnbW91c2V3aGVlbCBET01Nb3VzZVNjcm9sbCBNb3pNb3VzZVBpeGVsU2Nyb2xsJywgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICB2YXIgZGVsdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGEgfHwgLWV2ZW50Lm9yaWdpbmFsRXZlbnQuZGV0YWlsOwogICAgICAgICAgaW5pdF9zY3JvbGwoZXZlbnQsIGRlbHRhKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBpbml0X3Njcm9sbChldmVudCwgZGVsdGEpIHsKICAgICAgICBkZWx0YU9mSW50ZXJlc3QgPSBkZWx0YTsKICAgICAgICB2YXIgdGltZU5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgIC8vIENhbmNlbCBzY3JvbGwgaWYgY3VycmVudGx5IGFuaW1hdGluZyBvciB3aXRoaW4gcXVpZXQgcGVyaW9kCiAgICAgICAgaWYodGltZU5vdyAtIGxhc3RBbmltYXRpb24gPCBxdWlldFBlcmlvZCArIHNldHRpbmdzLmFuaW1hdGlvblRpbWUpIHsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRlbHRhT2ZJbnRlcmVzdCA8IDApIHsKICAgICAgICAgIGVsLm1vdmVEb3duKCkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZWwubW92ZVVwKCkKICAgICAgICB9CiAgICAgICAgbGFzdEFuaW1hdGlvbiA9IHRpbWVOb3c7CiAgICB9CgogICAgLy8gUHJlcGFyZSBldmVyeXRoaW5nIGJlZm9yZSBiaW5kaW5nIHdoZWVsIHNjcm9sbAoKICAgIGVsLmFkZENsYXNzKCJvbmVwYWdlLXdyYXBwZXIiKS5jc3MoInBvc2l0aW9uIiwicmVsYXRpdmUiKTsKICAgICQuZWFjaCggc2VjdGlvbnMsIGZ1bmN0aW9uKGkpIHsKICAgICAgJCh0aGlzKS5jc3MoewogICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgIHRvcDogdG9wUG9zICsgIiUiCiAgICAgIH0pLmFkZENsYXNzKCJzZWN0aW9uIikuYXR0cigiZGF0YS1pbmRleCIsIGkrMSk7CgoKICAgICAgJCh0aGlzKS5jc3MoewogICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgIGxlZnQ6ICggc2V0dGluZ3MuZGlyZWN0aW9uID09ICdob3Jpem9udGFsJyApCiAgICAgICAgICA/IGxlZnRQb3MgKyAiJSIKICAgICAgICAgIDogMCwKICAgICAgICB0b3A6ICggc2V0dGluZ3MuZGlyZWN0aW9uID09ICd2ZXJ0aWNhbCcgfHwgc2V0dGluZ3MuZGlyZWN0aW9uICE9ICdob3Jpem9udGFsJyApCiAgICAgICAgICA/IHRvcFBvcyArICIlIgogICAgICAgICAgOiAwCiAgICAgIH0pOwoKICAgICAgaWYgKHNldHRpbmdzLmRpcmVjdGlvbiA9PSAnaG9yaXpvbnRhbCcpCiAgICAgICAgbGVmdFBvcyA9IGxlZnRQb3MgKyAxMDA7CiAgICAgIGVsc2UKICAgICAgICB0b3BQb3MgPSB0b3BQb3MgKyAxMDA7CgoKICAgICAgaWYoc2V0dGluZ3MucGFnaW5hdGlvbiA9PSB0cnVlKSB7CiAgICAgICAgcGFnaW5hdGlvbkxpc3QgKz0gIjxsaT48YSBkYXRhLWluZGV4PSciKyhpKzEpKyInIGhyZWY9JyMiICsgKGkrMSkgKyAiJz48L2E+PC9saT4iCiAgICAgIH0KICAgIH0pOwoKICAgIGVsLnN3aXBlRXZlbnRzKCkuYmluZCgic3dpcGVEb3duIiwgIGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgaWYgKCEkKCJib2R5IikuaGFzQ2xhc3MoImRpc2FibGVkLW9uZXBhZ2Utc2Nyb2xsIikpIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGVsLm1vdmVVcCgpOwogICAgfSkuYmluZCgic3dpcGVVcCIsIGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgaWYgKCEkKCJib2R5IikuaGFzQ2xhc3MoImRpc2FibGVkLW9uZXBhZ2Utc2Nyb2xsIikpIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGVsLm1vdmVEb3duKCk7CiAgICB9KTsKCiAgICAvLyBDcmVhdGUgUGFnaW5hdGlvbiBhbmQgRGlzcGxheSBUaGVtCiAgICBpZiAoc2V0dGluZ3MucGFnaW5hdGlvbiA9PSB0cnVlKSB7CiAgICAgIGlmICgkKCd1bC5vbmVwYWdlLXBhZ2luYXRpb24nKS5sZW5ndGggPCAxKSAkKCI8dWwgY2xhc3M9J29uZXBhZ2UtcGFnaW5hdGlvbic+PC91bD4iKS5wcmVwZW5kVG8oImJvZHkiKTsKCiAgICAgIGlmKCBzZXR0aW5ncy5kaXJlY3Rpb24gPT0gJ2hvcml6b250YWwnICkgewogICAgICAgIHBvc0xlZnQgPSAoZWwuZmluZCgiLm9uZXBhZ2UtcGFnaW5hdGlvbiIpLndpZHRoKCkgLyAyKSAqIC0xOwogICAgICAgIGVsLmZpbmQoIi5vbmVwYWdlLXBhZ2luYXRpb24iKS5jc3MoIm1hcmdpbi1sZWZ0IiwgcG9zTGVmdCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcG9zVG9wID0gKGVsLmZpbmQoIi5vbmVwYWdlLXBhZ2luYXRpb24iKS5oZWlnaHQoKSAvIDIpICogLTE7CiAgICAgICAgZWwuZmluZCgiLm9uZXBhZ2UtcGFnaW5hdGlvbiIpLmNzcygibWFyZ2luLXRvcCIsIHBvc1RvcCk7CiAgICAgIH0KICAgICAgJCgndWwub25lcGFnZS1wYWdpbmF0aW9uJykuaHRtbChwYWdpbmF0aW9uTGlzdCk7CiAgICB9CgogICAgaWYod2luZG93LmxvY2F0aW9uLmhhc2ggIT0gIiIgJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggIT0gIiMxIikgewogICAgICBpbml0X2luZGV4ID0gIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoIiMiLCAiIikKCiAgICAgIGlmIChwYXJzZUludChpbml0X2luZGV4KSA8PSB0b3RhbCAmJiBwYXJzZUludChpbml0X2luZGV4KSA+IDApIHsKICAgICAgICAkKHNldHRpbmdzLnNlY3Rpb25Db250YWluZXIgKyAiW2RhdGEtaW5kZXg9JyIgKyBpbml0X2luZGV4ICsgIiddIikuYWRkQ2xhc3MoImFjdGl2ZSIpCiAgICAgICAgJCgiYm9keSIpLmFkZENsYXNzKCJ2aWV3aW5nLXBhZ2UtIisgaW5pdF9pbmRleCkKICAgICAgICBpZihzZXR0aW5ncy5wYWdpbmF0aW9uID09IHRydWUpICQoIi5vbmVwYWdlLXBhZ2luYXRpb24gbGkgYSIgKyAiW2RhdGEtaW5kZXg9JyIgKyBpbml0X2luZGV4ICsgIiddIikuYWRkQ2xhc3MoImFjdGl2ZSIpOwoKICAgICAgICBuZXh0ID0gJChzZXR0aW5ncy5zZWN0aW9uQ29udGFpbmVyICsgIltkYXRhLWluZGV4PSciICsgKGluaXRfaW5kZXgpICsgIiddIik7CiAgICAgICAgaWYobmV4dCkgewogICAgICAgICAgbmV4dC5hZGRDbGFzcygiYWN0aXZlIikKICAgICAgICAgIGlmKHNldHRpbmdzLnBhZ2luYXRpb24gPT0gdHJ1ZSkgJCgiLm9uZXBhZ2UtcGFnaW5hdGlvbiBsaSBhIiArICJbZGF0YS1pbmRleD0nIiArIChpbml0X2luZGV4KSArICInXSIpLmFkZENsYXNzKCJhY3RpdmUiKTsKICAgICAgICAgICQoImJvZHkiKVswXS5jbGFzc05hbWUgPSAkKCJib2R5IilbMF0uY2xhc3NOYW1lLnJlcGxhY2UoL1xidmlld2luZy1wYWdlLVxkLio/XGIvZywgJycpOwogICAgICAgICAgJCgiYm9keSIpLmFkZENsYXNzKCJ2aWV3aW5nLXBhZ2UtIituZXh0LmRhdGEoImluZGV4IikpCiAgICAgICAgICBpZiAoaGlzdG9yeS5yZXBsYWNlU3RhdGUgJiYgc2V0dGluZ3MudXBkYXRlVVJMID09IHRydWUpIHsKICAgICAgICAgICAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zdWJzdHIoMCx3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJykpICsgIiMiICsgKGluaXRfaW5kZXgpOwogICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSgge30sIGRvY3VtZW50LnRpdGxlLCBocmVmICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHBvcyA9ICgoaW5pdF9pbmRleCAtIDEpICogMTAwKSAqIC0xOwogICAgICAgIGVsLnRyYW5zZm9ybVBhZ2Uoc2V0dGluZ3MsIHBvcywgaW5pdF9pbmRleCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJChzZXR0aW5ncy5zZWN0aW9uQ29udGFpbmVyICsgIltkYXRhLWluZGV4PScxJ10iKS5hZGRDbGFzcygiYWN0aXZlIikKICAgICAgICAkKCJib2R5IikuYWRkQ2xhc3MoInZpZXdpbmctcGFnZS0xIikKICAgICAgICBpZihzZXR0aW5ncy5wYWdpbmF0aW9uID09IHRydWUpICQoIi5vbmVwYWdlLXBhZ2luYXRpb24gbGkgYSIgKyAiW2RhdGEtaW5kZXg9JzEnXSIpLmFkZENsYXNzKCJhY3RpdmUiKTsKICAgICAgfQogICAgfWVsc2V7CiAgICAgICQoc2V0dGluZ3Muc2VjdGlvbkNvbnRhaW5lciArICJbZGF0YS1pbmRleD0nMSddIikuYWRkQ2xhc3MoImFjdGl2ZSIpCiAgICAgICQoImJvZHkiKS5hZGRDbGFzcygidmlld2luZy1wYWdlLTEiKQogICAgICBpZihzZXR0aW5ncy5wYWdpbmF0aW9uID09IHRydWUpICQoIi5vbmVwYWdlLXBhZ2luYXRpb24gbGkgYSIgKyAiW2RhdGEtaW5kZXg9JzEnXSIpLmFkZENsYXNzKCJhY3RpdmUiKTsKICAgIH0KCiAgICBpZihzZXR0aW5ncy5wYWdpbmF0aW9uID09IHRydWUpICB7CiAgICAgICQoIi5vbmVwYWdlLXBhZ2luYXRpb24gbGkgYSIpLmNsaWNrKGZ1bmN0aW9uICgpewogICAgICAgIHZhciBwYWdlX2luZGV4ID0gJCh0aGlzKS5kYXRhKCJpbmRleCIpOwogICAgICAgIGVsLm1vdmVUbyhwYWdlX2luZGV4KTsKICAgICAgfSk7CiAgICB9CgoKICAgICQoZG9jdW1lbnQpLmJpbmQoJ21vdXNld2hlZWwgRE9NTW91c2VTY3JvbGwgTW96TW91c2VQaXhlbFNjcm9sbCcsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIHZhciBkZWx0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YSB8fCAtZXZlbnQub3JpZ2luYWxFdmVudC5kZXRhaWw7CiAgICAgIGlmKCEkKCJib2R5IikuaGFzQ2xhc3MoImRpc2FibGVkLW9uZXBhZ2Utc2Nyb2xsIikpIGluaXRfc2Nyb2xsKGV2ZW50LCBkZWx0YSk7CiAgICB9KTsKCgogICAgaWYoc2V0dGluZ3MucmVzcG9uc2l2ZUZhbGxiYWNrICE9IGZhbHNlKSB7CiAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7CiAgICAgICAgcmVzcG9uc2l2ZSgpOwogICAgICB9KTsKCiAgICAgIHJlc3BvbnNpdmUoKTsKICAgIH0KCiAgICBpZihzZXR0aW5ncy5rZXlib2FyZCA9PSB0cnVlKSB7CiAgICAgICQoZG9jdW1lbnQpLmtleWRvd24oZnVuY3Rpb24oZSkgewogICAgICAgIHZhciB0YWcgPSBlLnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7CgogICAgICAgIGlmICghJCgiYm9keSIpLmhhc0NsYXNzKCJkaXNhYmxlZC1vbmVwYWdlLXNjcm9sbCIpKSB7CiAgICAgICAgICBzd2l0Y2goZS53aGljaCkgewogICAgICAgICAgICBjYXNlIDM4OgogICAgICAgICAgICAgIGlmICh0YWcgIT0gJ2lucHV0JyAmJiB0YWcgIT0gJ3RleHRhcmVhJykgZWwubW92ZVVwKCkKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgNDA6CiAgICAgICAgICAgICAgaWYgKHRhZyAhPSAnaW5wdXQnICYmIHRhZyAhPSAndGV4dGFyZWEnKSBlbC5tb3ZlRG93bigpCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDMzOiAvL3BhZ2VnIHVwCiAgICAgICAgICAgICAgaWYgKHRhZyAhPSAnaW5wdXQnICYmIHRhZyAhPSAndGV4dGFyZWEnKSBlbC5tb3ZlVXAoKQogICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAzNDogLy9wYWdlIGR3bgogICAgICAgICAgICAgIGlmICh0YWcgIT0gJ2lucHV0JyAmJiB0YWcgIT0gJ3RleHRhcmVhJykgZWwubW92ZURvd24oKQogICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAzNjogLy9ob21lCiAgICAgICAgICAgICAgZWwubW92ZVRvKDEpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAzNTogLy9lbmQKICAgICAgICAgICAgICBlbC5tb3ZlVG8odG90YWwpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0KCgp9KHdpbmRvdy5qUXVlcnkpOwoK",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 09:49:57 GMT",
                    "Content-Length": "14958",
                    "Date": "Fri, 07 Nov 2014 09:49:57 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}