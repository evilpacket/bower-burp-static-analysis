{
    "url": "http://localhost:9999/avoidwork/keigai/src/utility.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>location.href</b> and written to <b>the 'href' property of a DOM element</b> via the following statements:<ul><li>uri = !server ? location.href : \"\";</li><li>obj.href = uri;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/avoidwork/keigai/src/utility.js",
                "path": "/avoidwork/keigai/src/utility.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9hdm9pZHdvcmsva2VpZ2FpL3NyYy91dGlsaXR5LmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyoqCiAqIEBuYW1lc3BhY2UgdXRpbGl0eQogKi8KdmFyIHV0aWxpdHkgPSB7CgkvKioKCSAqIENvbGxlY3Rpb24gb2YgdGltZXJzCgkgKgoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEB0eXBlIHtPYmplY3R9CgkgKiBAcHJpdmF0ZQoJICovCgl0aW1lciA6IHt9LAoKCS8qKgoJICogQ29sbGVjdGlvbiBvZiByZXBlYXRpbmcgZnVuY3Rpb25zCgkgKgoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEB0eXBlIHtPYmplY3R9CgkgKiBAcHJpdmF0ZQoJICovCglyZXBlYXRpbmc6IHt9LAoKCS8qKgoJICogQ3JlYXRlcyBFbGVtZW50cyBvciBRdWVyaWVzIHRoZSBET00gdXNpbmcgQ1NTIHNlbGVjdG9ycwoJICoKCSAqIEBtZXRob2QgJAoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge01peGVkfSBhcmcgSFRNTCwgb3IgQ29tbWEgZGVsaW1pdGVkIHN0cmluZyBvZiBDU1Mgc2VsZWN0b3JzCgkgKiBAcmV0dXJuIHtBcnJheX0gICAgIEFycmF5IG9mIG1hdGNoaW5nIEVsZW1lbnRzCgkgKiBAZXhhbXBsZQoJICogdmFyICQgPSBrZWlnYWkudXRpbC4kOwoJICoKCSAqIC8vIExvb2tpbmcgZm9yIEVsZW1lbnRzCgkgKiAkKCAiLnNvbWVDbGFzcyIgKS5mb3JFYWNoKCBmdW5jdGlvbiAoIGkgKSB7CgkgKiAgIC4uLgoJICogfSApOwoJICoKCSAqIC8vIENyZWF0aW5nIGFuIEgxIEVsZW1lbnQKCSAqICQoICImbHQ7aDEmZ3Q7IiApLmZvckVhY2goIGZ1bmN0aW9uICggaSApIHsKCSAqICAgLi4uCgkgKiB9ICk7CgkgKi8KCSQgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQl2YXIgcmVzdWx0OwoKCQkvLyBOb3RoaW5nCgkJaWYgKCAhYXJnICkgewoJCX0KCQkvLyBIVE1MCgkJZWxzZSBpZiAoIHJlZ2V4Lmh0bWwudGVzdCggYXJnICkgKSB7CgkJCXJlc3VsdCA9IFtlbGVtZW50LmNyZWF0ZSggYXJnICldOwoJCX0KCQkvLyBDU1Mgc2VsZWN0b3IocykKCQllbHNlIHsKCQkJYXJnID0gc3RyaW5nLnRyaW0oIGFyZyApOwoKCQkJaWYgKCBhcmcuaW5kZXhPZiggIiwiICkgPT09IC0xICkgewoJCQkJcmVzdWx0ID0gdXRpbGl0eS5kb20oIGFyZyApOwoKCQkJCWlmICggcmVzdWx0ICkgewoJCQkJCWlmICggaXNOYU4oIHJlc3VsdC5sZW5ndGggKSApIHsKCQkJCQkJcmVzdWx0ID0gW3Jlc3VsdF07CgkJCQkJfQoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJcmVzdWx0ID0gW107CgkJCQl9CgkJCX0KCQkJZWxzZSB7CgkJCQlyZXN1bHQgPSBbXTsKCgkJCQlhcnJheS5lYWNoKCBzdHJpbmcuZXhwbG9kZSggYXJnICksIGZ1bmN0aW9uICggcXVlcnkgKSB7CgkJCQkJdmFyIG9iaiA9IHV0aWxpdHkuZG9tKCBxdWVyeSApOwoKCQkJCQlpZiAoIG9iaiBpbnN0YW5jZW9mIEFycmF5ICkgewoJCQkJCQlyZXN1bHQgPSByZXN1bHQuY29uY2F0KCBvYmogKTsKCQkJCQl9CgkJCQkJZWxzZSBpZiAoIG9iaiApIHsKCQkJCQkJcmVzdWx0LnB1c2goIG9iaiApOwoJCQkJCX0KCQkJCX0gKTsKCQkJfQoJCX0KCgkJcmV0dXJuIHJlc3VsdDsKCX0sCgoJLyoqCgkgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIEJhc2UKCSAqCgkgKiBAbWV0aG9kIGJhc2UKCSAqIEBtZW1iZXJPZiB1dGlsaXR5CgkgKiBAcGFyYW0gIHtPYmplY3R9IGFyZyBbT3B0aW9uYWxdIERlY29yYXRpdmUgT2JqZWN0CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICBJbnN0YW5jZSBvZiBCYXNlCgkgKi8KCWJhc2UgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQl2YXIgb2JqID0gbmV3IEJhc2UoKTsKCgkJaWYgKCBhcmcgaW5zdGFuY2VvZiBPYmplY3QgKSB7CgkJCXV0aWxpdHkubWVyZ2UoIG9iaiwgYXJnICk7CgkJfQoKCQlvYmoub2JzZXJ2ZXIgPSBvYnNlcnZhYmxlLmZhY3RvcnkoKTsKCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBCbG9iIGZhY3RvcnkKCSAqCgkgKiBAbWV0aG9kIGJsb2IKCSAqIEBtZW1iZXJPZiB1dGlsaXR5CgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyBTdHJpbmcgdG8gY29udmVydCB0byBhIEJsb2IKCSAqIEByZXR1cm4ge09iamVjdH0gICAgIEJsb2IKCSAqIEBwcml2YXRlCgkgKi8KCWJsb2IgOiBmdW5jdGlvbiAoIGFyZyApIHsKCQl2YXIgb2JqOwoKCQl0cnkgewoJCQlvYmogPSBuZXcgQmxvYiggW2FyZ10sIHt0eXBlOiAiYXBwbGljYXRpb24vamF2YXNjcmlwdCJ9ICk7CgkJfQoJCWNhdGNoICggZSApIHsKCQkJaWYgKCAhZ2xvYmFsLkJsb2JCdWlsZGVyICkgewoJCQkJZ2xvYmFsLkJsb2JCdWlsZGVyID0gZ2xvYmFsLk1TQmxvYkJ1aWxkZXIgfHwgZ2xvYmFsLldlYktpdEJsb2JCdWlsZGVyIHx8IGdsb2JhbC5Nb3pCbG9iQnVpbGRlcjsKCQkJfQoKCQkJb2JqID0gbmV3IGdsb2JhbC5CbG9iQnVpbGRlcigpLmFwcGVuZCggYXJnICkuZ2V0QmxvYigpOwoJCX0KCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBDbGVhcnMgZGVmZXJyZWQgJiByZXBlYXRpbmcgZnVuY3Rpb25zCgkgKgoJICogQG1ldGhvZCBjbGVhclRpbWVycwoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge1N0cmluZ30gaWQgSUQgb2YgdGltZXIoIHMgKQoJICogQHJldHVybiB7VW5kZWZpbmVkfSB1bmRlZmluZWQKCSAqIEBwcml2YXRlCgkgKi8KCWNsZWFyVGltZXJzIDogZnVuY3Rpb24gKCBpZCApIHsKCQlpZiAoIGlkID09PSB1bmRlZmluZWQgfHwgc3RyaW5nLmlzRW1wdHkoIGlkICkgKSB7CgkJCXRocm93IG5ldyBFcnJvciggbGFiZWwuaW52YWxpZEFyZ3VtZW50cyApOwoJCX0KCgkJLy8gZGVmZXJyZWQKCQlpZiAoIHV0aWxpdHkudGltZXJbaWRdICkgewoJCQljbGVhclRpbWVvdXQoIHV0aWxpdHkudGltZXJbaWRdICk7CgkJCWRlbGV0ZSB1dGlsaXR5LnRpbWVyW2lkXTsKCQl9CgoJCS8vIHJlcGVhdGluZwoJCWlmICggdXRpbGl0eS5yZXBlYXRpbmdbaWRdICkgewoJCQljbGVhclRpbWVvdXQoIHV0aWxpdHkucmVwZWF0aW5nW2lkXSApOwoJCQlkZWxldGUgdXRpbGl0eS5yZXBlYXRpbmdbaWRdOwoJCX0KCX0sCgoJLyoqCgkgKiBDbG9uZXMgYW4gT2JqZWN0CgkgKgoJICogQG1ldGhvZCBjbG9uZQoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge09iamVjdH0gIG9iaiAgICAgT2JqZWN0IHRvIGNsb25lCgkgKiBAcGFyYW0gIHtCb29sZWFufSBzaGFsbG93IFtPcHRpb25hbF0gQ3JlYXRlIGEgc2hhbGxvdyBjbG9uZSwgd2hpY2ggZG9lc24ndCBtYWludGFpbiBwcm90b3R5cGVzLCBkZWZhdWx0IGlzIGBmYWxzZWAKCSAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgQ2xvbmUgb2Ygb2JqCgkgKiBAZXhhbXBsZQoJICogdmFyIHggPSB7YTogdHJ1ZSwgYjogZmFsc2V9LAoJICogICAgIHkgPSBrZWlnYWkudXRpbC5jbG9uZSggeCwgdHJ1ZSApOwoJICoKCSAqIHkuYTsgLy8gdHJ1ZQoJICovCgljbG9uZSA6IGZ1bmN0aW9uICggb2JqLCBzaGFsbG93ICkgewoJCXZhciBjbG9uZTsKCgkJaWYgKCBzaGFsbG93ID09PSB0cnVlICkgewoJCQlyZXR1cm4gb2JqICE9PSB1bmRlZmluZWQgJiYgb2JqICE9PSBudWxsID8ganNvbi5kZWNvZGUoIGpzb24uZW5jb2RlKCBvYmogKSApIDogb2JqOwoJCX0KCQllbHNlIGlmICggIW9iaiB8fCByZWdleC5wcmltaXRpdmUudGVzdCggdHlwZW9mIG9iaiApIHx8ICggb2JqIGluc3RhbmNlb2YgUmVnRXhwICkgKSB7CgkJCXJldHVybiBvYmo7CgkJfQoJCWVsc2UgaWYgKCBvYmogaW5zdGFuY2VvZiBBcnJheSApIHsKCQkJcmV0dXJuIG9iai5zbGljZSgpOwoJCX0KCQllbHNlIGlmICggIXNlcnZlciAmJiAhY2xpZW50LmllICYmIG9iaiBpbnN0YW5jZW9mIERvY3VtZW50ICkgewoJCQlyZXR1cm4geG1sLmRlY29kZSggeG1sLmVuY29kZSggb2JqICkgKTsKCQl9CgkJZWxzZSBpZiAoIHR5cGVvZiBvYmouX19wcm90b19fICE9ICJ1bmRlZmluZWQiICkgewoJCQlyZXR1cm4gdXRpbGl0eS5leHRlbmQoIG9iai5fX3Byb3RvX18sIG9iaiApOwoJCX0KCQllbHNlIGlmICggb2JqIGluc3RhbmNlb2YgT2JqZWN0ICkgewoJCQkvLyBJZiBKU09OIGVuY29kaW5nIGZhaWxzIGR1ZSB0byByZWN1cnNpb24sIHRoZSBvcmlnaW5hbCBPYmplY3QgaXMgcmV0dXJuZWQgYmVjYXVzZSBpdCdzIGFzc3VtZWQgdGhpcyBpcyBmb3IgZGVjb3JhdGlvbgoJCQljbG9uZSA9IGpzb24uZW5jb2RlKCBvYmosIHRydWUgKTsKCgkJCWlmICggY2xvbmUgIT09IHVuZGVmaW5lZCApIHsKCQkJCWNsb25lID0ganNvbi5kZWNvZGUoIGNsb25lICk7CgoJCQkJLy8gRGVjb3JhdGluZyBGdW5jdGlvbnMgdGhhdCB3b3VsZCBiZSBsb3N0IHdpdGggSlNPTiBlbmNvZGluZy9kZWNvZGluZwoJCQkJdXRpbGl0eS5pdGVyYXRlKCBvYmosIGZ1bmN0aW9uICggdiwgayApIHsKCQkJCQlpZiAoIHR5cGVvZiB2ID09ICJmdW5jdGlvbiIgKSB7CgkJCQkJCWNsb25lW2tdID0gdjsKCQkJCQl9CgkJCQl9ICk7CgkJCX0KCQkJZWxzZSB7CgkJCQljbG9uZSA9IG9iajsKCQkJfQoKCQkJcmV0dXJuIGNsb25lOwoJCX0KCQllbHNlIHsKCQkJcmV0dXJuIG9iajsKCQl9Cgl9LAoKCS8qKgoJICogQ29lcmNlcyBhIFN0cmluZyB0byBhIFR5cGUKCSAqCgkgKiBAbWV0aG9kIGNvZXJjZQoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge1N0cmluZ30gdmFsdWUgU3RyaW5nIHRvIGNvZXJjZQoJICogQHJldHVybiB7TWl4ZWR9ICAgICAgICBQcmltaXRpdmUgdmVyc2lvbiBvZiB0aGUgU3RyaW5nCgkgKiBAZXhhbXBsZQoJICoga2VpZ2FpLnV0aWwuY29lcmNlKCAiMSIgKTsgLy8gMQoJICovCgljb2VyY2UgOiBmdW5jdGlvbiAoIHZhbHVlICkgewoJCXZhciB0bXA7CgoJCWlmICggdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCApIHsKCQkJcmV0dXJuIHVuZGVmaW5lZDsKCQl9CgkJZWxzZSBpZiAoIHZhbHVlID09PSAidHJ1ZSIgKSB7CgkJCXJldHVybiB0cnVlOwoJCX0KCQllbHNlIGlmICggdmFsdWUgPT09ICJmYWxzZSIgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJZWxzZSBpZiAoIHZhbHVlID09PSAibnVsbCIgKSB7CgkJCXJldHVybiBudWxsOwoJCX0KCQllbHNlIGlmICggdmFsdWUgPT09ICJ1bmRlZmluZWQiICkgewoJCQlyZXR1cm4gdW5kZWZpbmVkOwoJCX0KCQllbHNlIGlmICggdmFsdWUgPT09ICIiICkgewoJCQlyZXR1cm4gdmFsdWU7CgkJfQoJCWVsc2UgaWYgKCAhaXNOYU4oIHRtcCA9IE51bWJlciggdmFsdWUgKSApICkgewoJCQlyZXR1cm4gdG1wOwoJCX0KCQllbHNlIGlmICggcmVnZXguanNvbl93cmFwLnRlc3QoIHZhbHVlICkgKSB7CgkJCXJldHVybiBqc29uLmRlY29kZSggdmFsdWUsIHRydWUgKSB8fCB2YWx1ZTsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiB2YWx1ZTsKCQl9Cgl9LAoKCS8qKgoJICogUmVjb21waWxlcyBhIFJlZ0V4cCBieSByZWZlcmVuY2UKCSAqCgkgKiBUaGlzIGlzIGlkZWFsIHdoZW4geW91IG5lZWQgdG8gcmVjb21waWxlIGEgcmVnZXggZm9yIHVzZSB3aXRoaW4gYSBjb25kaXRpb25hbCBzdGF0ZW1lbnQKCSAqCgkgKiBAbWV0aG9kIGNvbXBpbGUKCSAqIEBtZW1iZXJPZiB1dGlsaXR5CgkgKiBAcGFyYW0gIHtPYmplY3R9IHJlZ2V4ICAgICBSZWdFeHAKCSAqIEBwYXJhbSAge1N0cmluZ30gcGF0dGVybiAgIFJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuCgkgKiBAcGFyYW0gIHtTdHJpbmd9IG1vZGlmaWVycyBNb2RpZmllcnMgdG8gYXBwbHkgdG8gdGhlIHBhdHRlcm4KCSAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgIHRydWUKCSAqIEBwcml2YXRlCgkgKi8KCWNvbXBpbGUgOiBmdW5jdGlvbiAoIHJlZywgcGF0dGVybiwgbW9kaWZpZXJzICkgewoJCXJlZy5jb21waWxlKCBwYXR0ZXJuLCBtb2RpZmllcnMgKTsKCgkJcmV0dXJuIHRydWU7Cgl9LAoKCS8qKgoJICogQ3VycmllcyBhIEZ1bmN0aW9uCgkgKgoJICogTm90ZTogRnVuY3Rpb24gdG8gY3VycnkgbXVzdCByZXR1cm4gYSBGdW5jdGlvbgoJICoKCSAqIEBtZXRob2QgY3VycnkKCSAqIEBtZW1iZXJPZiB1dGlsaXR5CgkgKiBAcmV0dXJuIHtGdW5jdGlvbn0gQ3VycmllZCBGdW5jdGlvbgoJICogQGV4YW1wbGUKCSAqIGZ1bmN0aW9uIGYgKCBhLCBiICkgewoJICogICByZXR1cm4gZnVuY3Rpb24gKCBuICkgewoJICogICAgIHJldHVybiAoIGEgKyBiICkgKiBuOwoJICogICB9OwoJICogfQoJICoKCSAqIHZhciBnID0ga2VpZ2FpLnV0aWwuY3VycnkoIGYsIDIsIDggKTsKCSAqCgkgKiBnKCA1ICk7IC8vIDUwCgkgKi8KCWN1cnJ5IDogZnVuY3Rpb24gKCkgewoJCXZhciBhcmdzID0gYXJyYXkuY2FzdCggYXJndW1lbnRzICksCgkJICAgIGZuICAgPSBhcmdzLnNoaWZ0KCksCgkJICAgIGNmbiAgPSBmbi5hcHBseSggZm4sIGFyZ3MgKTsKCgkJcmV0dXJuIGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGNmbi5hcHBseSggY2ZuLCBhcmd1bWVudHMgKTsKCQl9OwoJfSwKCgkvKioKCSAqIERlZmVycyB0aGUgZXhlY3V0aW9uIG9mIEZ1bmN0aW9uIGJ5IGF0IGxlYXN0IHRoZSBzdXBwbGllZCBtaWxsaXNlY29uZHMuCgkgKiBUaW1pbmcgbWF5IHZhcnkgdW5kZXIgImhlYXZ5IGxvYWQiIHJlbGF0aXZlIHRvIHRoZSBDUFUgJiBjbGllbnQgSmF2YVNjcmlwdCBlbmdpbmUuCgkgKgoJICogQG1ldGhvZCBkZWZlcgoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgICAgRnVuY3Rpb24gdG8gZGVmZXIgZXhlY3V0aW9uIG9mCgkgKiBAcGFyYW0gIHtOdW1iZXJ9ICAgbXMgICAgIE1pbGxpc2Vjb25kcyB0byBkZWZlciBleGVjdXRpb24KCSAqIEBwYXJhbSAge051bWJlcn0gICBpZCAgICAgW09wdGlvbmFsXSBJRCBvZiB0aGUgZGVmZXJyZWQgZnVuY3Rpb24KCSAqIEBwYXJhbSAge0Jvb2xlYW59ICByZXBlYXQgW09wdGlvbmFsXSBEZXNjcmliZXMgdGhlIGV4ZWN1dGlvbiwgZGVmYXVsdCBpcyBgZmFsc2VgCgkgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgIElEIG9mIHRoZSB0aW1lcgoJICogQHByaXZhdGUKCSAqLwoJZGVmZXIgOiBmdW5jdGlvbiAoIGZuLCBtcywgaWQsIHJlcGVhdCApIHsKCQl2YXIgb3A7CgoJCW1zICAgICA9IG1zIHx8IDA7CgkJcmVwZWF0ID0gKCByZXBlYXQgPT09IHRydWUgKTsKCgkJaWYgKCBpZCAhPT0gdW5kZWZpbmVkICkgewoJCQl1dGlsaXR5LmNsZWFyVGltZXJzKCBpZCApOwoJCX0KCQllbHNlIHsKCQkJaWQgPSB1dGlsaXR5LnV1aWQoIHRydWUgKTsKCQl9CgoJCW9wID0gZnVuY3Rpb24gKCkgewoJCQl1dGlsaXR5LmNsZWFyVGltZXJzKCBpZCApOwoJCQlmbigpOwoJCX07CgoJCXV0aWxpdHlbcmVwZWF0ID8gInJlcGVhdGluZyIgOiAidGltZXIiXVtpZF0gPSBzZXRUaW1lb3V0KCBvcCwgbXMgKTsKCgkJcmV0dXJuIGlkOwoJfSwKCgkvKioKCSAqIEFzeW5jIGRlbGF5IHN0cmF0ZWd5CgkgKgoJICogQG1ldGhvZCBkZWxheQoJICogQG1lbWJlck9mIHByb21pc2UKCSAqIEByZXR1cm4ge0Z1bmN0aW9ufSBEZWxheSBtZXRob2QKCSAqIEBwcml2YXRlCgkgKi8KCWRlbGF5IDogZnVuY3Rpb24gKCkgewoJCWlmICggdHlwZW9mIHNldEltbWVkaWF0ZSAhPSAidW5kZWZpbmVkIiApIHsKCQkJcmV0dXJuIGZ1bmN0aW9uICggYXJnICkgewoJCQkJc2V0SW1tZWRpYXRlKCBhcmcgKTsKCQkJfTsKCQl9CgkJZWxzZSBpZiAoIHR5cGVvZiBwcm9jZXNzICE9ICJ1bmRlZmluZWQiICkgewoJCQlyZXR1cm4gcHJvY2Vzcy5uZXh0VGljazsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiBmdW5jdGlvbiAoIGFyZyApIHsKCQkJCXNldFRpbWVvdXQoIGFyZywgMCApOwoJCQl9OwoJCX0KCX0oKSwKCgkvKioKCSAqIFF1ZXJpZXMgRE9NIHdpdGggZmFzdGVzdCBtZXRob2QKCSAqCgkgKiBAbWV0aG9kIGRvbQoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge1N0cmluZ30gYXJnIERPTSBxdWVyeQoJICogQHJldHVybiB7TWl4ZWR9ICAgICAgdW5kZWZpbmVkLCBFbGVtZW50LCBvciBBcnJheSBvZiBFbGVtZW50cwoJICogQHByaXZhdGUKCSAqLwoJZG9tIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJdmFyIHJlc3VsdDsKCgkJaWYgKCAhcmVnZXguc2VsZWN0b3JfY29tcGxleC50ZXN0KCBhcmcgKSApIHsKCQkJaWYgKCByZWdleC5oYXNoLnRlc3QoIGFyZyApICkgewoJCQkJcmVzdWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGFyZy5yZXBsYWNlKCByZWdleC5oYXNoLCAiIiApICkgfHwgdW5kZWZpbmVkOwoJCQl9CgkJCWVsc2UgaWYgKCByZWdleC5rbGFzcy50ZXN0KCBhcmcgKSApIHsKCQkJCXJlc3VsdCA9IGFycmF5LmNhc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGFyZy5yZXBsYWNlKCByZWdleC5rbGFzcywgIiIgKSApICk7CgkJCX0KCQkJZWxzZSBpZiAoIHJlZ2V4LndvcmQudGVzdCggYXJnICkgKSB7CgkJCQlyZXN1bHQgPSBhcnJheS5jYXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggYXJnICkgKTsKCQkJfQoJCQllbHNlIHsKCQkJCXJlc3VsdCA9IGFycmF5LmNhc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGFyZyApICk7CgkJCX0KCQl9CgkJZWxzZSB7CgkJCXJlc3VsdCA9IGFycmF5LmNhc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGFyZyApICk7CgkJfQoKCQlyZXR1cm4gcmVzdWx0OwoJfSwKCgkvKioKCSAqIEVuY29kZXMgYSBVVUlEIHRvIGEgRE9NIGZyaWVuZGx5IElECgkgKgoJICogQG1ldGhvZCBkb21JZAoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge1N0cmluZ30gVVVJRAoJICogQHJldHVybiB7U3RyaW5nfSBET00gZnJpZW5kbHkgSUQKCSAqIEBwcml2YXRlCgkgKi8KCWRvbUlkIDogZnVuY3Rpb24gKCBhcmcgKSB7CgkJcmV0dXJuICJhIiArIGFyZy5yZXBsYWNlKCAvLS9nLCAiIiApLnNsaWNlKCAxICk7Cgl9LAoKCS8qKgoJICogRXJyb3IgaGFuZGxpbmcsIHdpdGggaGlzdG9yeSBpbiBgZXJyb3IubG9nYAoJICoKCSAqIEBtZXRob2QgZXJyb3IKCSAqIEBtZW1iZXJPZiB1dGlsaXR5CgkgKiBAcGFyYW0gIHtNaXhlZH0gICBlICAgICAgIEVycm9yIG9iamVjdCBvciBtZXNzYWdlIHRvIGRpc3BsYXkKCSAqIEBwYXJhbSAge0FycmF5fSAgIGFyZ3MgICAgQXJyYXkgb2YgYXJndW1lbnRzIGZyb20gdGhlIGNhbGxzdGFjawoJICogQHBhcmFtICB7TWl4ZWR9ICAgc2NvcGUgICBFbnRpdHkgdGhhdCB3YXMgInRoaXMiCgkgKiBAcGFyYW0gIHtCb29sZWFufSB3YXJuaW5nIFtPcHRpb25hbF0gV2lsbCBkaXNwbGF5IGFzIGNvbnNvbGUgd2FybmluZyBpZiB0cnVlCgkgKiBAcmV0dXJuIHtVbmRlZmluZWR9ICAgICAgIHVuZGVmaW5lZAoJICogQHByaXZhdGUKCSAqLwoJZXJyb3IgOiBmdW5jdGlvbiAoIGUsIGFyZ3MsIHNjb3BlLCB3YXJuaW5nICkgewoJCXZhciBvID0gewoJCQkiYXJndW1lbnRzIiA6IGFyZ3MgPyBhcnJheS5jYXN0KCBhcmdzICkgOiBbXSwKCQkJbWVzc2FnZSAgICAgOiBlLm1lc3NhZ2UgfHwgZSwKCQkJbnVtYmVyICAgICAgOiBlLm51bWJlciA/ICggZS5udW1iZXIgJiAweEZGRkYgKSA6IHVuZGVmaW5lZCwKCQkJc2NvcGUgICAgICAgOiBzY29wZSwKCQkJc3RhY2sgICAgICAgOiBlLnN0YWNrIHx8IHVuZGVmaW5lZCwKCQkJdGltZXN0YW1wICAgOiBuZXcgRGF0ZSgpLnRvVVRDU3RyaW5nKCksCgkJCXR5cGUgICAgICAgIDogZS50eXBlIHx8ICJUeXBlRXJyb3IiCgkJfTsKCgkJdXRpbGl0eS5sb2coIG8uc3RhY2sgfHwgby5tZXNzYWdlLCB3YXJuaW5nICE9PSB0cnVlID8gImVycm9yIiA6ICJ3YXJuIiApOwoKCQlyZXR1cm4gdW5kZWZpbmVkOwoJfSwKCgkvKioKCSAqIENyZWF0ZXMgYSAiY2xhc3MiIGV4dGVuZGluZyBPYmplY3QsIHdpdGggb3B0aW9uYWwgZGVjb3JhdGlvbgoJICoKCSAqIEBtZXRob2QgZXh0ZW5kCgkgKiBAbWVtYmVyT2YgdXRpbGl0eQoJICogQHBhcmFtICB7T2JqZWN0fSBvYmogT2JqZWN0IHRvIGV4dGVuZAoJICogQHBhcmFtICB7T2JqZWN0fSBhcmcgW09wdGlvbmFsXSBPYmplY3QgZm9yIGRlY29yYXRpb24KCSAqIEByZXR1cm4ge09iamVjdH0gICAgIERlY29yYXRlZCBvYmoKCSAqIEBleGFtcGxlCgkgKiB2YXIgZXh0ZW5kT2JqID0ga2VpZ2FpLnV0aWwuZXh0ZW5kKCBzb21lT2JqLCB7bmV3UHJvcGVydHk6IHZhbHVlfSApOwoJICovCglleHRlbmQgOiBmdW5jdGlvbiAoIG9iaiwgYXJnICkgewoJCXZhciBvOwoKCQlpZiAoIG9iaiA9PT0gdW5kZWZpbmVkICkgewoJCQl0aHJvdyBuZXcgRXJyb3IoIGxhYmVsLmludmFsaWRBcmd1bWVudHMgKTsKCQl9CgoJCW8gPSBPYmplY3QuY3JlYXRlKCBvYmogKTsKCgkJaWYgKCBhcmcgaW5zdGFuY2VvZiBPYmplY3QgKSB7CgkJCXV0aWxpdHkubWVyZ2UoIG8sIGFyZyApOwoJCX0KCgkJcmV0dXJuIG87Cgl9LAoKCS8qKgoJICogR2VuZXJhdGVzIGFuIElEIHZhbHVlCgkgKgoJICogQG1ldGhvZCBnZW5JZAoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge01peGVkfSAgIG9iaiBbT3B0aW9uYWxdIE9iamVjdCB0byByZWNlaXZlIGlkCgkgKiBAcGFyYW0gIHtCb29sZWFufSBkb20gW09wdGlvbmFsXSBWZXJpZnkgdGhlIElEIGlzIHVuaXF1ZSBpbiB0aGUgRE9NLCBkZWZhdWx0IGlzIGZhbHNlCgkgKiBAcmV0dXJuIHtNaXhlZH0gICAgICAgT2JqZWN0IG9yIGlkCgkgKiBAcHJpdmF0ZQoJICovCglnZW5JZCA6IGZ1bmN0aW9uICggb2JqLCBkb20gKSB7CgkJZG9tID0gKCBkb20gPT09IHRydWUgKTsKCQl2YXIgaWQ7CgoJCWlmICggb2JqICYmICggb2JqLmlkIHx8ICggb2JqIGluc3RhbmNlb2YgQXJyYXkgKSB8fCAoIHR5cGVvZiBvYmogPT0gInN0cmluZyIgfHwgb2JqIGluc3RhbmNlb2YgU3RyaW5nICkgKSApIHsKCQkJcmV0dXJuIG9iajsKCQl9CgoJCWlmICggZG9tICkgewoJCQlkbyB7CgkJCQlpZCA9IHV0aWxpdHkuZG9tSWQoIHV0aWxpdHkudXVpZCggdHJ1ZSApICk7CgkJCX0KCQkJd2hpbGUgKCB1dGlsaXR5LmRvbSggIiMiICsgaWQgKSApOwoJCX0KCQllbHNlIHsKCQkJaWQgPSB1dGlsaXR5LmRvbUlkKCB1dGlsaXR5LnV1aWQoIHRydWUgKSApOwoJCX0KCgkJaWYgKCB0eXBlb2Ygb2JqID09ICJvYmplY3QiICkgewoJCQlvYmouaWQgPSBpZDsKCgkJCXJldHVybiBvYmo7CgkJfQoJCWVsc2UgewoJCQlyZXR1cm4gaWQ7CgkJfQoJfSwKCgkvKioKCSAqIEl0ZXJhdGVzIGFuIE9iamVjdCBhbmQgZXhlY3V0ZXMgYSBmdW5jdGlvbiBhZ2FpbnN0IHRoZSBwcm9wZXJ0aWVzLgoJICogUmV0dXJuaW5nIGBmYWxzZWAgaGFsdHMgaXRlcmF0aW9uLgoJICoKCSAqIEBtZXRob2QgaXRlcmF0ZQoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge09iamVjdH0gICBvYmogT2JqZWN0IHRvIGl0ZXJhdGUKCSAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgRnVuY3Rpb24gdG8gZXhlY3V0ZSBhZ2FpbnN0IHByb3BlcnRpZXMKCSAqIEByZXR1cm4ge09iamVjdH0gICAgICAgT2JqZWN0CgkgKiBAZXhhbXBsZQoJICoga2VpZ2FpLnV0aWwuaXRlcmF0ZSggey4uLn0sIGZ1bmN0aW9uICggdmFsdWUsIGtleSApIHsKCSAqICAgLi4uCgkgKiB9ICk7CgkgKi8KCWl0ZXJhdGUgOiBmdW5jdGlvbiAoIG9iaiwgZm4gKSB7CgkJaWYgKCB0eXBlb2YgZm4gIT0gImZ1bmN0aW9uIiApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBsYWJlbC5pbnZhbGlkQXJndW1lbnRzICk7CgkJfQoKCQlhcnJheS5lYWNoKCBPYmplY3Qua2V5cyggb2JqICksIGZ1bmN0aW9uICggaSApIHsKCQkJcmV0dXJuIGZuLmNhbGwoIG9iaiwgb2JqW2ldLCBpICk7CgkJfSApOwoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIFdyaXRlcyBhcmd1bWVudCB0byB0aGUgY29uc29sZQoJICoKCSAqIEBtZXRob2QgbG9nCgkgKiBAbWVtYmVyT2YgdXRpbGl0eQoJICogQHBhcmFtICB7U3RyaW5nfSBhcmcgICAgU3RyaW5nIHRvIHdyaXRlIHRvIHRoZSBjb25zb2xlCgkgKiBAcGFyYW0gIHtTdHJpbmd9IHRhcmdldCBbT3B0aW9uYWxdIFRhcmdldCBjb25zb2xlLCBkZWZhdWx0IGlzICJsb2ciCgkgKiBAcmV0dXJuIHtVbmRlZmluZWR9ICAgICB1bmRlZmluZWQKCSAqIEBleGFtcGxlCgkgKiBrZWlnYWkudXRpbC5sb2coICJTb21ldGhpbmcgYmFkIGhhcHBlbmVkIiwgIndhcm4iICk7CgkgKi8KCWxvZyA6IGZ1bmN0aW9uICggYXJnLCB0YXJnZXQgKSB7CgkJdmFyIHRzLCBtc2c7CgoJCWlmICggdHlwZW9mIGNvbnNvbGUgIT0gInVuZGVmaW5lZCIgKSB7CgkJCXRzICA9IHR5cGVvZiBhcmcgIT0gIm9iamVjdCI7CgkJCW1zZyA9IHRzID8gIlsiICsgbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKSArICJdICIgKyBhcmcgOiBhcmc7CgkJCWNvbnNvbGVbdGFyZ2V0IHx8ICJsb2ciXSggbXNnICk7CgkJfQoJfSwKCgkvKioKCSAqIE1lcmdlcyBvYmogd2l0aCBhcmcKCSAqCgkgKiBAbWV0aG9kIG1lcmdlCgkgKiBAbWVtYmVyT2YgdXRpbGl0eQoJICogQHBhcmFtICB7T2JqZWN0fSBvYmogT2JqZWN0IHRvIGRlY29yYXRlCgkgKiBAcGFyYW0gIHtPYmplY3R9IGFyZyBEZWNvcmF0aW9uCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICBEZWNvcmF0ZWQgT2JqZWN0CgkgKiBAZXhhbXBsZQoJICogdmFyIG9iaiA9IHthOiB0cnVlfTsKCSAqCgkgKiBrZWlnYWkudXRpbC5tZXJnZSggb2JqLCB7YjogZmFsc2V9ICkKCSAqIG9iai5iOyAvLyBmYWxzZQoJICovCgltZXJnZSA6IGZ1bmN0aW9uICggb2JqLCBhcmcgKSB7CgkJdXRpbGl0eS5pdGVyYXRlKCBhcmcsIGZ1bmN0aW9uICggdiwgayApIHsKCQkJaWYgKCAoIG9ialtrXSBpbnN0YW5jZW9mIEFycmF5ICkgJiYgKCB2IGluc3RhbmNlb2YgQXJyYXkgKSApIHsKCQkJCWFycmF5Lm1lcmdlKCBvYmpba10sIHYgKTsKCQkJfQoJCQllbHNlIGlmICggKCBvYmpba10gaW5zdGFuY2VvZiBPYmplY3QgKSAmJiAoIHYgaW5zdGFuY2VvZiBPYmplY3QgKSApIHsKCQkJCXV0aWxpdHkuaXRlcmF0ZSggdiwgZnVuY3Rpb24gKCB4LCB5ICkgewoJCQkJCW9ialtrXVt5XSA9IHV0aWxpdHkuY2xvbmUoIHggKTsKCQkJCX0gKTsKCQkJfQoJCQllbHNlIHsKCQkJCW9ialtrXSA9IHV0aWxpdHkuY2xvbmUoIHYgKTsKCQkJfQoJCX0gKTsKCgkJcmV0dXJuIG9iajsKCX0sCgoJLyoqCgkgKiBQYXJzZXMgYSBVUkkgaW50byBhbiBPYmplY3QKCSAqCgkgKiBAbWV0aG9kIHBhcnNlCgkgKiBAbWVtYmVyT2YgdXRpbGl0eQoJICogQHBhcmFtICB7U3RyaW5nfSB1cmkgVVJJIHRvIHBhcnNlCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICBQYXJzZWQgVVJJCgkgKiBAZXhhbXBsZQoJICogdmFyIHBhcnNlZCA9IGtlaWdhaS51dGlsLnBhcnNlKCBsb2NhdGlvbi5ocmVmICk7CgkgKgoJICogcGFyc2VkOwoJICogewoJICogICBhdXRoICAgICA6ICIiLAoJICogICBoYXNoICAgICA6ICIiLAoJICogICBob3N0ICAgICA6ICIiLAoJICogICBob3N0bmFtZSA6ICIiLAoJICogICBxdWVyeSAgICA6IHt9LAoJICogICBwYXRobmFtZSA6ICIiLAoJICogICBwb3J0ICAgICA6IG4sCgkgKiAgIHByb3RvY29sIDogIiIsCgkgKiAgIHNlYXJjaCAgIDogIiIsCgkgKiB9CgkgKi8KCXBhcnNlIDogZnVuY3Rpb24gKCB1cmkgKSB7CgkJdmFyIG9iaiAgICA9IHt9LAoJCSAgICBwYXJzZWQgPSB7fTsKCgkJaWYgKCB1cmkgPT09IHVuZGVmaW5lZCApIHsKCQkJdXJpID0gIXNlcnZlciA/IGxvY2F0aW9uLmhyZWYgOiAiIjsKCQl9CgoJCWlmICggIXNlcnZlciApIHsKCQkJb2JqID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImEiICk7CgkJCW9iai5ocmVmID0gdXJpOwoJCX0KCQllbHNlIHsKCQkJb2JqID0gdXJsLnBhcnNlKCB1cmkgKTsKCQl9CgoJCWlmICggc2VydmVyICkgewoJCQl1dGlsaXR5Lml0ZXJhdGUoIG9iaiwgZnVuY3Rpb24gKCB2LCBrICkgewoJCQkJaWYgKCB2ID09PSBudWxsICkgewoJCQkJCW9ialtrXSA9IHVuZGVmaW5lZDsKCQkJCX0KCQkJfSApOwoJCX0KCgkJcGFyc2VkID0gewoJCQlhdXRoICAgICA6IHNlcnZlciA/IG51bGwgOiByZWdleC5hdXRoLmV4ZWMoIHVyaSApLAoJCQlwcm90b2NvbCA6IG9iai5wcm90b2NvbCB8fCAiaHR0cDoiLAoJCQlob3N0bmFtZSA6IG9iai5ob3N0bmFtZSB8fCAibG9jYWxob3N0IiwKCQkJcG9ydCAgICAgOiBvYmoucG9ydCA/IG51bWJlci5wYXJzZSggb2JqLnBvcnQsIDEwICkgOiAiIiwKCQkJcGF0aG5hbWUgOiBvYmoucGF0aG5hbWUsCgkJCXNlYXJjaCAgIDogb2JqLnNlYXJjaCAgIHx8ICIiLAoJCQloYXNoICAgICA6IG9iai5oYXNoICAgICB8fCAiIiwKCQkJaG9zdCAgICAgOiBvYmouaG9zdCAgICAgfHwgImxvY2FsaG9zdCIKCQl9OwoKCQkvLyAnY2F1c2UgSUUgaXMgLi4uIElFOyByZXF1aXJlZCBmb3IgZGF0YS5iYXRjaCgpCgkJaWYgKCBjbGllbnQuaWUgKSB7CgkJCWlmICggcGFyc2VkLnByb3RvY29sID09PSAiOiIgKSB7CgkJCQlwYXJzZWQucHJvdG9jb2wgPSBsb2NhdGlvbi5wcm90b2NvbDsKCQkJfQoKCQkJaWYgKCBzdHJpbmcuaXNFbXB0eSggcGFyc2VkLmhvc3RuYW1lICkgKSB7CgkJCQlwYXJzZWQuaG9zdG5hbWUgPSBsb2NhdGlvbi5ob3N0bmFtZTsKCQkJfQoKCQkJaWYgKCBzdHJpbmcuaXNFbXB0eSggcGFyc2VkLmhvc3QgKSApIHsKCQkJCXBhcnNlZC5ob3N0ID0gbG9jYXRpb24uaG9zdDsKCQkJfQoKCQkJaWYgKCBwYXJzZWQucGF0aG5hbWUuY2hhckF0KCAwICkgIT09ICIvIiApIHsKCQkJCXBhcnNlZC5wYXRobmFtZSA9ICIvIiArIHBhcnNlZC5wYXRobmFtZTsKCQkJfQoJCX0KCgkJcGFyc2VkLmF1dGggID0gb2JqLmF1dGggfHwgKCBwYXJzZWQuYXV0aCA9PT0gbnVsbCA/ICIiIDogcGFyc2VkLmF1dGhbMV0gKTsKCQlwYXJzZWQuaHJlZiAgPSBvYmouaHJlZiB8fCAoIHBhcnNlZC5wcm90b2NvbCArICIvLyIgKyAoIHN0cmluZy5pc0VtcHR5KCBwYXJzZWQuYXV0aCApID8gIiIgOiBwYXJzZWQuYXV0aCArICJAIiApICsgcGFyc2VkLmhvc3QgKyBwYXJzZWQucGF0aG5hbWUgKyBwYXJzZWQuc2VhcmNoICsgcGFyc2VkLmhhc2ggKTsKCQlwYXJzZWQucGF0aCAgPSBvYmoucGF0aCB8fCBwYXJzZWQucGF0aG5hbWUgKyBwYXJzZWQuc2VhcmNoOwoJCXBhcnNlZC5xdWVyeSA9IHV0aWxpdHkucXVlcnlTdHJpbmcoIG51bGwsIHBhcnNlZC5zZWFyY2ggKTsKCgkJcmV0dXJuIHBhcnNlZDsKCX0sCgoJLyoqCgkgKiBDcmVhdGVzIGEgcGFydGlhbGx5IGFwcGxpZWQgRnVuY3Rpb24KCSAqCgkgKiBAbWV0aG9kIHBhcnRpYWwKCSAqIEBtZW1iZXJPZiB1dGlsaXR5CgkgKiBAcmV0dXJuIHtGdW5jdGlvbn0gUGFydGlhbCBGdW5jdGlvbgoJICogQGV4YW1wbGUKCSAqIGZ1bmN0aW9uIGYgKCBhLCBiICkgewoJICogICByZXR1cm4gYSArIGI7CgkgKiB9CgkgKgoJICogdmFyIGcgPSBrZWlnYWkudXRpbC5wYXJ0aWFsKCBmLCAyICk7CgkgKgoJICogZyggMiApOyAvLyA0CgkgKi8KCXBhcnRpYWwgOiBmdW5jdGlvbiAoKSB7CgkJdmFyIGFyZ3MgPSBhcnJheS5jYXN0KCBhcmd1bWVudHMgKSwKCQkgICAgZm4gICA9IGFyZ3Muc2hpZnQoKTsKCgkJcmV0dXJuIGZ1bmN0aW9uICgpIHsKCQkJcmV0dXJuIGZuLmFwcGx5KCBmbiwgYXJncy5jb25jYXQoIGFycmF5LmNhc3QoIGFyZ3VtZW50cyApICkgKTsKCQl9OwoJfSwKCgkvKioKCSAqIFByZXZlbnRzIGRlZmF1bHQgYmVoYXZpb3Igb2YgYW4gRXZlbnQKCSAqCgkgKiBAbWV0aG9kIHByZXZlbnQKCSAqIEBtZW1iZXJPZiB1dGlsaXR5CgkgKiBAcGFyYW0gIHtPYmplY3R9IGV2IEV2ZW50CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgIEV2ZW50CgkgKiBAZXhhbXBsZQoJICoga2VpZ2FpLnV0aWwucHJldmVudCggRXZlbnQgKTsKCSAqLwoJcHJldmVudCA6IGZ1bmN0aW9uICggZXYgKSB7CgkJaWYgKCB0eXBlb2YgZXYucHJldmVudERlZmF1bHQgPT0gImZ1bmN0aW9uIiApIHsKCQkJZXYucHJldmVudERlZmF1bHQoKTsKCQl9CgoJCXJldHVybiBldjsKCX0sCgoJLyoqCgkgKiBQYXJzZXMgYSBxdWVyeSBzdHJpbmcgJiBjb2VyY2VzIHZhbHVlcwoJICoKCSAqIEBtZXRob2QgcXVlcnlTdHJpbmcKCSAqIEBtZW1iZXJPZiB1dGlsaXR5CgkgKiBAcGFyYW0gIHtTdHJpbmd9IGFyZyAgICAgW09wdGlvbmFsXSBLZXkgdG8gZmluZCBpbiB0aGUgcXVlcnlzdHJpbmcKCSAqIEBwYXJhbSAge1N0cmluZ30gcXN0cmluZyBbT3B0aW9uYWxdIFF1ZXJ5IHN0cmluZyB0byBwYXJzZQoJICogQHJldHVybiB7TWl4ZWR9ICAgICAgICAgIFZhbHVlIG9yIE9iamVjdCBvZiBrZXk6dmFsdWUgcGFpcnMKCSAqIEBwcml2YXRlCgkgKi8KCXF1ZXJ5U3RyaW5nIDogZnVuY3Rpb24gKCBhcmcsIHFzdHJpbmcgKSB7CgkJdmFyIG9iaiAgICA9IHt9LAoJCSAgICByZXN1bHQgPSBxc3RyaW5nICE9PSB1bmRlZmluZWQgPyAoIHFzdHJpbmcuaW5kZXhPZiggIj8iICkgPiAtMSA/IHFzdHJpbmcucmVwbGFjZSggLy4qXD8vLCAiIiApIDogbnVsbCApIDogKCBzZXJ2ZXIgfHwgc3RyaW5nLmlzRW1wdHkoIGxvY2F0aW9uLnNlYXJjaCApID8gbnVsbCA6IGxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKCAiPyIsICIiICkgKTsKCgkJaWYgKCByZXN1bHQgIT09IG51bGwgJiYgIXN0cmluZy5pc0VtcHR5KCByZXN1bHQgKSApIHsKCQkJcmVzdWx0ID0gcmVzdWx0LnNwbGl0KCAiJiIgKTsKCQkJYXJyYXkuZWFjaCggcmVzdWx0LCBmdW5jdGlvbiAoIHByb3AgKSB7CgkJCQl2YXIgaXRlbSA9IHByb3Auc3BsaXQoICI9IiApOwoKCQkJCWlmICggc3RyaW5nLmlzRW1wdHkoIGl0ZW1bMF0gKSApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJaWYgKCBpdGVtWzFdID09PSB1bmRlZmluZWQgKSB7CgkJCQkJaXRlbVsxXSA9ICIiOwoJCQkJfQoJCQkJZWxzZSB7CgkJCQkJaXRlbVsxXSA9IHV0aWxpdHkuY29lcmNlKCBkZWNvZGVVUklDb21wb25lbnQoIGl0ZW1bMV0gKSApOwoJCQkJfQoKCQkJCWlmICggb2JqW2l0ZW1bMF1dID09PSB1bmRlZmluZWQgKSB7CgkJCQkJb2JqW2l0ZW1bMF1dID0gaXRlbVsxXTsKCQkJCX0KCQkJCWVsc2UgaWYgKCAhKCBvYmpbaXRlbVswXV0gaW5zdGFuY2VvZiBBcnJheSApICkgewoJCQkJCW9ialtpdGVtWzBdXSA9IFtvYmpbaXRlbVswXV1dOwoJCQkJCW9ialtpdGVtWzBdXS5wdXNoKCBpdGVtWzFdICk7CgkJCQl9CgkJCQllbHNlIHsKCQkJCQlvYmpbaXRlbVswXV0ucHVzaCggaXRlbVsxXSApOwoJCQkJfQoJCQl9ICk7CgkJfQoKCQlpZiAoIGFyZyAhPT0gbnVsbCAmJiBhcmcgIT09IHVuZGVmaW5lZCApIHsKCQkJb2JqID0gb2JqW2FyZ107CgkJfQoKCQlyZXR1cm4gb2JqOwoJfSwKCgkvKioKCSAqIEFjY2VwdHMgRGVmZXJyZWRzIG9yIFByb21pc2VzIGFzIGFyZ3VtZW50cywgb3IgYW4gQXJyYXkgb2YgZWl0aGVyCgkgKgoJICogQG1ldGhvZCByYWNlCgkgKiBAbWVtYmVyT2YgdXRpbGl0eQoJICogQHJldHVybiB7T2JqZWN0fSB7QGxpbmsga2VpZ2FpLkRlZmVycmVkfQoJICogQGV4YW1wbGUKCSAqIHZhciBkZWZlcnJlZHMgPSBbXSwKCSAqICAgICBkZWZlcjEgICAgPSBrZWlnYWkudXRpbC5kZWZlcigpLAoJICogICAgIGRlZmVyMiAgICA9IGtlaWdhaS51dGlsLmRlZmVyKCk7CgkgKgoJICogZGVmZXJyZWRzLnB1c2goIGRlZmVyMSApOwoJICogZGVmZXJyZWRzLnB1c2goIGRlZmVyMiApOwoJICoKCSAqIC8vIEV4ZWN1dGVzIHdoZW4gb25lIGRlZmVycmVkIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkCgkgKiBrZWlnYWkudXRpbC5yYWNlKCBkZWZlcnJlZHMgKS50aGVuKCBmdW5jdGlvbiAoIGFyZyApICkgewoJICogICAuLi4KCSAqIH0sIGZ1bmN0aW9uICggZXJyICkgewoJICogICAuLi4KCSAqIH0gKTsKCSAqCgkgKiAuLi4KCSAqCgkgKiBkZWZlcjEucmVzb2x2ZSggdHJ1ZSApOwoJICogZGVmZXIyLnJlc29sdmUoIHRydWUgKTsKCSAqLwoJcmFjZSA6IGZ1bmN0aW9uICgpIHsKCQl2YXIgZGVmZXIgPSBkZWZlcnJlZC5mYWN0b3J5KCksCgkJICAgIGFyZ3MgID0gYXJyYXkuY2FzdCggYXJndW1lbnRzICk7CgoJCS8vIERpZCB3ZSByZWNlaXZlIGFuIEFycmF5PyBpZiBzbyBpdCBvdmVycmlkZXMgYW55IG90aGVyIGFyZ3VtZW50cwoJCWlmICggYXJnc1swXSBpbnN0YW5jZW9mIEFycmF5ICkgewoJCQlhcmdzID0gYXJnc1swXTsKCQl9CgoJCS8vIE5vbmUsIGVuZCBvbiBuZXh0IHRpY2sKCQlpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgewoJCQlkZWZlci5yZXNvbHZlKCBudWxsICk7CgkJfQoJCS8vIFNldHVwIGFuZCB3YWl0CgkJZWxzZSB7CgkJCVByb21pc2UucmFjZSggYXJncyApLnRoZW4oIGZ1bmN0aW9uICggcmVzdWx0cyApIHsKCQkJCWRlZmVyLnJlc29sdmUoIHJlc3VsdHMgKTsKCQkJfSwgZnVuY3Rpb24gKCBlICkgewoJCQkJZGVmZXIucmVqZWN0KCBlICk7CgkJCX0gKTsKCQl9CgoJCXJldHVybiBkZWZlcjsKCX0sCgoJLyoqCgkgKiBBc3luY2hyb25vdXMgRE9NIHJlbmRlcmluZyAoY2Fubm90IGJlIGNhbmNlbGxlZCwgc3VnZ2VzdGVkIGZvciByZWFjdGl2ZSBiZWhhdmlvcikKCSAqCgkgKiBAbWV0aG9kIHJlbmRlcgoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBleGVjdXRlIG9uIG5leHQgJ2ZyYW1lJwoJICogQHJldHVybiB7T2JqZWN0fSB7QGxpbmsga2VpZ2FpLkRlZmVycmVkfQoJICogQGV4YW1wbGUKCSAqIGtlaWdhaS51dGlsLnJlbmRlciggZnVuY3Rpb24gKCkgewoJICogICAgIHJldHVybiBrZWl0YWkudXRpbC5lbGVtZW50Lmh0bWwoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICIjaWQiICksICJIZWxsbyBXb3JsZCIgKQoJICogfSApLnRoZW4oIGZ1bmN0aW9uICggYXJnICkgewoJICogICAgIC8vIGFyZyBpcyB0aGUgcmV0dXJuIHZhbHVlIG9mIHlvdXIgZnVuY3Rpb24KCSAqIH0sIGZ1bmN0aW9uICggZSApIHsKCSAqICAgICAvLyBIYW5kbGUgZQoJICogfSApOwoJICovCglyZW5kZXIgOiBmdW5jdGlvbiAoIGZuICkgewoJCXZhciBkZWZlciA9IGRlZmVycmVkLmZhY3RvcnkoKTsKCgkJUkVOREVSKCBmdW5jdGlvbiAoIGFyZyApIHsKCQkJdHJ5IHsKCQkJCWRlZmVyLnJlc29sdmUoIGZuKCBhcmcgKSApOwoJCQl9CgkJCWNhdGNoICggZSApIHsKCQkJCWRlZmVyLnJlamVjdCggZSApOwoJCQl9CgkJfSApOwoKCQlyZXR1cm4gZGVmZXI7Cgl9LAoKCS8qKgoJICogQ3JlYXRlcyBhIHJlY3Vyc2l2ZSBmdW5jdGlvbi4gUmV0dXJuIGZhbHNlIGZyb20gdGhlIGZ1bmN0aW9uIHRvIGhhbHQgcmVjdXJzaW9uLgoJICoKCSAqIEBtZXRob2QgcmVwZWF0CgkgKiBAbWVtYmVyT2YgdXRpbGl0eQoJICogQHBhcmFtICB7RnVuY3Rpb259IGZuICBGdW5jdGlvbiB0byBleGVjdXRlIHJlcGVhdGVkbHkKCSAqIEBwYXJhbSAge051bWJlcn0gICBtcyAgTWlsbGlzZWNvbmRzIHRvIHN0YWdnZXIgdGhlIGV4ZWN1dGlvbgoJICogQHBhcmFtICB7U3RyaW5nfSAgIGlkICBbT3B0aW9uYWxdIFRpbWVvdXQgSUQKCSAqIEBwYXJhbSAge0Jvb2xlYW59ICBub3cgRXhlY3V0ZXMgYGZuYCBhbmQgdGhlbiBzZXR1cCByZXBldGl0aW9uLCBkZWZhdWx0IGlzIGB0cnVlYAoJICogQHJldHVybiB7U3RyaW5nfSAgICAgICBUaW1lb3V0IElECgkgKiBAZXhhbXBsZQoJICoga2VpZ2FpLnV0aWwucmVwZWF0KCBmdW5jdGlvbiAoKSB7CgkgKiAgIC4uLgoJICoKCSAqICAgLy8gQ2FuY2VsbGluZyByZXBldGl0aW9uIGF0IHNvbWUgcG9pbnQgaW4gdGhlIGZ1dHVyZQoJICogICBpZiAoIHNvbWVDb25kaXRpb24gKSB7CgkgKiAgICAgcmV0dXJuIGZhbHNlOwoJICogICB9CgkgKiB9LCAxMDAwLCAicmVwZWF0aW5nIiApOwoJICovCglyZXBlYXQgOiBmdW5jdGlvbiAoIGZuLCBtcywgaWQsIG5vdyApIHsKCQltcyAgPSBtcyB8fCAxMDsKCQlpZCAgPSBpZCB8fCB1dGlsaXR5LnV1aWQoIHRydWUgKTsKCQlub3cgPSAoIG5vdyAhPT0gZmFsc2UgKTsKCgkJLy8gQ291bGQgYmUgdmFsaWQgdG8gcmV0dXJuIGZhbHNlIGZyb20gaW5pdGlhbCBleGVjdXRpb24KCQlpZiAoIG5vdyAmJiBmbigpID09PSBmYWxzZSApIHsKCQkJcmV0dXJuOwoJCX0KCgkJLy8gQ3JlYXRpbmcgcmVwZWF0aW5nIGV4ZWN1dGlvbgoJCXV0aWxpdHkuZGVmZXIoIGZ1bmN0aW9uICgpIHsKCQkJdmFyIHJlY3Vyc2l2ZSA9IGZ1bmN0aW9uICggZm4sIG1zLCBpZCApIHsKCQkJCXZhciByZWN1cnNpdmUgPSB0aGlzOwoKCQkJCWlmICggZm4oKSAhPT0gZmFsc2UgKSB7CgkJCQkJdXRpbGl0eS5yZXBlYXRpbmdbaWRdID0gc2V0VGltZW91dCggZnVuY3Rpb24gKCkgewoJCQkJCQlyZWN1cnNpdmUuY2FsbCggcmVjdXJzaXZlLCBmbiwgbXMsIGlkICk7CgkJCQkJfSwgbXMgKTsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCWRlbGV0ZSB1dGlsaXR5LnJlcGVhdGluZ1tpZF07CgkJCQl9CgkJCX07CgoJCQlyZWN1cnNpdmUuY2FsbCggcmVjdXJzaXZlLCBmbiwgbXMsIGlkICk7CgkJfSwgbXMsIGlkLCB0cnVlICk7CgoJCXJldHVybiBpZDsKCX0sCgoJLyoqCgkgKiBTdG9wcyBhbiBFdmVudCBmcm9tIGJ1YmJsaW5nLCAmIHByZXZlbnRzIGRlZmF1bHQgYmVoYXZpb3IKCSAqCgkgKiBAbWV0aG9kIHN0b3AKCSAqIEBtZW1iZXJPZiB1dGlsaXR5CgkgKiBAcGFyYW0gIHtPYmplY3R9IGV2IEV2ZW50CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgIEV2ZW50CgkgKiBAZXhhbXBsZQoJICoga2VpZ2FpLnV0aWwuc3RvcCggRXZlbnQgKTsKCSAqLwoJc3RvcCA6IGZ1bmN0aW9uICggZXYgKSB7CgkJaWYgKCB0eXBlb2YgZXYuc3RvcFByb3BhZ2F0aW9uID09ICJmdW5jdGlvbiIgKSB7CgkJCWV2LnN0b3BQcm9wYWdhdGlvbigpOwoJCX0KCgkJdXRpbGl0eS5wcmV2ZW50KCBldiApOwoKCQlyZXR1cm4gZXY7Cgl9LAoKCS8qKgoJICogUmV0dXJucyB0aGUgRXZlbnQgdGFyZ2V0CgkgKgoJICogQG1ldGhvZCB0YXJnZXQKCSAqIEBtZW1iZXJPZiB1dGlsaXR5CgkgKiBAcGFyYW0gIHtPYmplY3R9IGV2IEV2ZW50CgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgIEV2ZW50IHRhcmdldAoJICogQGV4YW1wbGUKCSAqIHZhciB0YXJnZXQgPSBrZWlnYWkudXRpbC50YXJnZXQoIEV2ZW50ICk7CgkgKi8KCXRhcmdldCA6IGZ1bmN0aW9uICggZXYgKSB7CgkJcmV0dXJuIGV2LnRhcmdldCB8fCBldi5zcmNFbGVtZW50OwoJfSwKCgkvKioKCSAqIEdlbmVyYXRlcyBhIHZlcnNpb24gNCBVVUlECgkgKgoJICogQG1ldGhvZCB1dWlkCgkgKiBAbWVtYmVyT2YgdXRpbGl0eQoJICogQHBhcmFtICB7Qm9vbGVhbn0gc3RyaXAgW09wdGlvbmFsXSBTdHJpcHMgLSBmcm9tIFVVSUQKCSAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgIFVVSUQKCSAqIEBleGFtcGxlCgkgKiB2YXIgdXVpZDQgPSBrZWlnYWkudXRpbC51dWlkKCk7CgkgKi8KCXV1aWQgOiBmdW5jdGlvbiAoIHN0cmlwICkgewoJCXZhciBzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKCAoICggMSArIE1hdGgucmFuZG9tKCkgKSAqIDB4MTAwMDAgKSB8IDAgKS50b1N0cmluZyggMTYgKS5zdWJzdHJpbmcoIDEgKTsgfSwKCQkgICAgciA9IFs4LCA5LCAiYSIsICJiIl0sCgkJICAgIG87CgoJCW8gPSAoIHMoKSArIHMoKSArICItIiArIHMoKSArICItNCIgKyBzKCkuc3Vic3RyKCAwLCAzICkgKyAiLSIgKyByW01hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiA0ICldICsgcygpLnN1YnN0ciggMCwgMyApICsgIi0iICsgcygpICsgcygpICsgcygpICk7CgoJCWlmICggc3RyaXAgPT09IHRydWUgKSB7CgkJCW8gPSBvLnJlcGxhY2UoIC8tL2csICIiICk7CgkJfQoKCQlyZXR1cm4gbzsKCX0sCgoJLyoqCgkgKiBXYWxrcyBgb2JqYCBhbmQgcmV0dXJucyBgYXJnYCwgZm9yIHdoZW4geW91IGNhbid0IGVhc2lseSBhY2Nlc3MgYGFyZ2AKCSAqCgkgKiBAbWV0aG9kICB3YWxrCgkgKiBAbWVtYmVyT2YgdXRpbGl0eQoJICogQHBhcmFtICB7TWl4ZWR9ICBvYmogIE9iamVjdCBvciBBcnJheQoJICogQHBhcmFtICB7U3RyaW5nfSBhcmcgIFN0cmluZyBkZXNjcmliaW5nIHRoZSBwcm9wZXJ0eSB0byByZXR1cm4KCSAqIEByZXR1cm4ge01peGVkfSAgICAgICBUYXJnZXQgb3IgdW5kZWZpbmVkCgkgKiBAZXhhbXBsZQoJICogdmFyIG9iaiA9IHthOiBbe2I6IHRydWV9XX07CgkgKgoJICoga2VpZ2FpLnV0aWwud2Fsayggb2JqLCAiYVswXS5iIiApOyAvLyB0cnVlCgkgKi8KCXdhbGsgOiBmdW5jdGlvbiAoIG9iaiwgYXJnICkgewoJCXZhciBvdXRwdXQgPSBvYmo7CgoJCWFycmF5LmVhY2goIGFyZy5yZXBsYWNlKCAvXF0kLywgIiIgKS5yZXBsYWNlKCAvXF0vZywgIi4iICkucmVwbGFjZSggL1wuXC4vZywgIi4iICkuc3BsaXQoIC9cLnxcWy8gKSwgZnVuY3Rpb24gKCBpICkgewoJCQlpZiAoIG91dHB1dFtpXSA9PT0gdW5kZWZpbmVkIHx8IG91dHB1dFtpXSA9PT0gbnVsbCApIHsKCQkJCW91dHB1dCA9IHVuZGVmaW5lZDsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJb3V0cHV0ID0gb3V0cHV0W2ldOwoJCX0gKTsKCgkJcmV0dXJuIG91dHB1dDsKCX0sCgoJLyoqCgkgKiBBY2NlcHRzIERlZmVycmVkcyBvciBQcm9taXNlcyBhcyBhcmd1bWVudHMsIG9yIGFuIEFycmF5IG9mIGVpdGhlcgoJICoKCSAqIEBtZXRob2Qgd2hlbgoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEByZXR1cm4ge09iamVjdH0ge0BsaW5rIGtlaWdhaS5EZWZlcnJlZH0KCSAqIEBleGFtcGxlCgkgKiB2YXIgZGVmZXJyZWRzID0gW10sCgkgKiAgICAgZGVmZXIxICAgID0ga2VpZ2FpLnV0aWwuZGVmZXIoKSwKCSAqICAgICBkZWZlcjIgICAgPSBrZWlnYWkudXRpbC5kZWZlcigpOwoJICoKCSAqIGRlZmVycmVkcy5wdXNoKCBkZWZlcjEgKTsKCSAqIGRlZmVycmVkcy5wdXNoKCBkZWZlcjIgKTsKCSAqCgkgKiAvLyBFeGVjdXRlcyB3aGVuIGJvdGggZGVmZXJyZWRzIGhhdmUgcmVzb2x2ZWQgb3Igb25lIGhhcyByZWplY3RlZAoJICoga2VpZ2FpLnV0aWwud2hlbiggZGVmZXJyZWRzICkudGhlbiggZnVuY3Rpb24gKCBhcmdzICkgKSB7CgkgKiAgIC4uLgoJICogfSwgZnVuY3Rpb24gKCBlcnIgKSB7CgkgKiAgIC4uLgoJICogfSApOwoJICoKCSAqIC4uLgoJICoKCSAqIGRlZmVyMS5yZXNvbHZlKCB0cnVlICk7CgkgKiBkZWZlcjIucmVzb2x2ZSggdHJ1ZSApOwoJICovCgl3aGVuIDogZnVuY3Rpb24gKCkgewoJCXZhciBkZWZlciA9IGRlZmVycmVkLmZhY3RvcnkoKSwKCQkgICAgYXJncyAgPSBhcnJheS5jYXN0KCBhcmd1bWVudHMgKTsKCgkJLy8gRGlkIHdlIHJlY2VpdmUgYW4gQXJyYXk/IGlmIHNvIGl0IG92ZXJyaWRlcyBhbnkgb3RoZXIgYXJndW1lbnRzCgkJaWYgKCBhcmdzWzBdIGluc3RhbmNlb2YgQXJyYXkgKSB7CgkJCWFyZ3MgPSBhcmdzWzBdOwoJCX0KCgkJLy8gTm9uZSwgZW5kIG9uIG5leHQgdGljawoJCWlmICggYXJncy5sZW5ndGggPT09IDAgKSB7CgkJCWRlZmVyLnJlc29sdmUoIG51bGwgKTsKCQl9CgkJLy8gU2V0dXAgYW5kIHdhaXQKCQllbHNlIHsKCQkJUHJvbWlzZS5hbGwoIGFyZ3MgKS50aGVuKCBmdW5jdGlvbiAoIHJlc3VsdHMgKSB7CgkJCQlkZWZlci5yZXNvbHZlKCByZXN1bHRzICk7CgkJCX0sIGZ1bmN0aW9uICggZSApIHsKCQkJCWRlZmVyLnJlamVjdCggZSApOwoJCQl9ICk7CgkJfQoKCQlyZXR1cm4gZGVmZXI7Cgl9LAoKCS8qKgoJICogV29ya2VyIGZhY3RvcnkKCSAqCgkgKiBAbWV0aG9kIHdvcmtlcgoJICogQG1lbWJlck9mIHV0aWxpdHkKCSAqIEBwYXJhbSAge09iamVjdH0gZGVmZXIgRGVmZXJyZWQgdG8gcmVjZWl2ZSBtZXNzYWdlIGZyb20gV29ya2VyCgkgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgIFdvcmtlcgoJICogQHByaXZhdGUKCSAqLwoJd29ya2VyIDogZnVuY3Rpb24gKCBkZWZlciApIHsKCQl2YXIgb2JqID0gbmV3IFdvcmtlciggV09SS0VSICk7CgoJCW9iai5vbmVycm9yID0gZnVuY3Rpb24gKCBlcnIgKSB7CgkJCWRlZmVyLnJlamVjdCggZXJyICk7CgkJCW9iai50ZXJtaW5hdGUoKTsKCQl9OwoKCQlvYmoub25tZXNzYWdlID0gZnVuY3Rpb24gKCBldiApIHsKCQkJZGVmZXIucmVzb2x2ZSggZXYuZGF0YSApOwoJCQlvYmoudGVybWluYXRlKCk7CgkJfTsKCgkJcmV0dXJuIG9iajsKCX0KfTsK",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 07:59:18 GMT",
                    "Content-Length": "23730",
                    "Date": "Fri, 07 Nov 2014 07:59:19 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}