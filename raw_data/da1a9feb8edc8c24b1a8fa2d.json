{
    "url": "http://localhost:9999/remcoder/retrofy/dist/jquery.retrofy.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "HTML5 storage manipulation (DOM-based)",
    "issueType": 5246720,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based HTML5 storage manipulation occurs when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and stores this data in the HTML5 storage of the web browser (either localStorage or sessionStorage). An attacker may be able to use this behavior to construct a URL which, if visited by another application user, will cause the user's browser to store attacker-controllable data.<br><br>This behavior does not in itself constitute a security vulnerability. However, if the application later reads the data back from storage and processes it in an unsafe way, then an attacker may be able to leverage the storage mechanism to deliver other DOM-based attacks, such as cross-site scripting and JavaScript injection.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>You should also review the ways in which the wider application uses data that is retrieved from HTML5 storage. If the data is never handled in an unsafe manner, then this behavior may not constitute any kind of vulnerability.<br><br>The most effective way to avoid DOM-based HTML5 storage manipulation is not to place in HTML5 storage any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored.",
    "issueDetail": "The application may be vulnerable to DOM-based HTML5 storage manipulation. Data is read from <b>document.location.href</b> and written to <b>localStorage.setItem()</b> via the following statement:<ul><li>localStorage.setItem(document.location.href+\".gui\",JSON.stringify(d.getSaveObject()))</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/remcoder/retrofy/dist/jquery.retrofy.js",
                "path": "/remcoder/retrofy/dist/jquery.retrofy.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9yZW1jb2Rlci9yZXRyb2Z5L2Rpc3QvanF1ZXJ5LnJldHJvZnkuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyohIGpRdWVyeS5SZXRyb2Z5LmpzIC0gdjAuMS4wIC0gMjAxMy0wMS0wNAoqIGh0dHA6Ly9yZWFsc3R1ZmZmb3JhYnN0cmFjdHBlb3BsZS5jb20vCiogQ29weXJpZ2h0IChjKSAyMDEzIEByZW1jb2RlcjsgTGljZW5zZWQgTUlUICovCjsvKioKICogZGF0LWd1aSBKYXZhU2NyaXB0IENvbnRyb2xsZXIgTGlicmFyeQogKiBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvZGF0LWd1aQogKgogKiBDb3B5cmlnaHQgMjAxMSBEYXRhIEFydHMgVGVhbSwgR29vZ2xlIENyZWF0aXZlIExhYgogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqLwp2YXIgZGF0PWRhdHx8e307ZGF0Lmd1aT1kYXQuZ3VpfHx7fTtkYXQudXRpbHM9ZGF0LnV0aWxzfHx7fTtkYXQuY29udHJvbGxlcnM9ZGF0LmNvbnRyb2xsZXJzfHx7fTtkYXQuZG9tPWRhdC5kb218fHt9O2RhdC5jb2xvcj1kYXQuY29sb3J8fHt9O2RhdC51dGlscy5jc3M9ZnVuY3Rpb24oKXtyZXR1cm57bG9hZDpmdW5jdGlvbihlLGEpe3ZhciBhPWF8fGRvY3VtZW50LGM9YS5jcmVhdGVFbGVtZW50KCJsaW5rIik7Yy50eXBlPSJ0ZXh0L2NzcyI7Yy5yZWw9InN0eWxlc2hlZXQiO2MuaHJlZj1lO2EuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXS5hcHBlbmRDaGlsZChjKX0saW5qZWN0OmZ1bmN0aW9uKGUsYSl7dmFyIGE9YXx8ZG9jdW1lbnQsYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpO2MudHlwZT0idGV4dC9jc3MiO2MuaW5uZXJIVE1MPWU7YS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaGVhZCIpWzBdLmFwcGVuZENoaWxkKGMpfX19KCk7CmRhdC51dGlscy5jb21tb249ZnVuY3Rpb24oKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuZm9yRWFjaCxhPUFycmF5LnByb3RvdHlwZS5zbGljZTtyZXR1cm57QlJFQUs6e30sZXh0ZW5kOmZ1bmN0aW9uKGMpe3RoaXMuZWFjaChhLmNhbGwoYXJndW1lbnRzLDEpLGZ1bmN0aW9uKGEpe2Zvcih2YXIgZiBpbiBhKXRoaXMuaXNVbmRlZmluZWQoYVtmXSl8fChjW2ZdPWFbZl0pfSx0aGlzKTtyZXR1cm4gY30sZGVmYXVsdHM6ZnVuY3Rpb24oYyl7dGhpcy5lYWNoKGEuY2FsbChhcmd1bWVudHMsMSksZnVuY3Rpb24oYSl7Zm9yKHZhciBmIGluIGEpdGhpcy5pc1VuZGVmaW5lZChjW2ZdKSYmKGNbZl09YVtmXSl9LHRoaXMpO3JldHVybiBjfSxjb21wb3NlOmZ1bmN0aW9uKCl7dmFyIGM9YS5jYWxsKGFyZ3VtZW50cyk7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBkPWEuY2FsbChhcmd1bWVudHMpLGY9Yy5sZW5ndGgtMTtmPj0wO2YtLSlkPVtjW2ZdLmFwcGx5KHRoaXMsZCldO3JldHVybiBkWzBdfX0sCmVhY2g6ZnVuY3Rpb24oYSxkLGYpe2lmKGUmJmEuZm9yRWFjaD09PWUpYS5mb3JFYWNoKGQsZik7ZWxzZSBpZihhLmxlbmd0aD09PWEubGVuZ3RoKzApZm9yKHZhciBiPTAsbj1hLmxlbmd0aDtiPG47YisrKXtpZihiIGluIGEmJmQuY2FsbChmLGFbYl0sYik9PT10aGlzLkJSRUFLKWJyZWFrfWVsc2UgZm9yKGIgaW4gYSlpZihkLmNhbGwoZixhW2JdLGIpPT09dGhpcy5CUkVBSylicmVha30sZGVmZXI6ZnVuY3Rpb24oYSl7c2V0VGltZW91dChhLDApfSx0b0FycmF5OmZ1bmN0aW9uKGMpe3JldHVybiBjLnRvQXJyYXk/Yy50b0FycmF5KCk6YS5jYWxsKGMpfSxpc1VuZGVmaW5lZDpmdW5jdGlvbihhKXtyZXR1cm4gYT09PXZvaWQgMH0saXNOdWxsOmZ1bmN0aW9uKGEpe3JldHVybiBhPT09bnVsbH0saXNOYU46ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT1hfSxpc0FycmF5OkFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGEpe3JldHVybiBhLmNvbnN0cnVjdG9yPT09QXJyYXl9LGlzT2JqZWN0OmZ1bmN0aW9uKGEpe3JldHVybiBhPT09Ck9iamVjdChhKX0saXNOdW1iZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1hKzB9LGlzU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybiBhPT09YSsiIn0saXNCb29sZWFuOmZ1bmN0aW9uKGEpe3JldHVybiBhPT09ZmFsc2V8fGE9PT10cnVlfSxpc0Z1bmN0aW9uOmZ1bmN0aW9uKGEpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSk9PT0iW29iamVjdCBGdW5jdGlvbl0ifX19KCk7CmRhdC5jb250cm9sbGVycy5Db250cm9sbGVyPWZ1bmN0aW9uKGUpe3ZhciBhPWZ1bmN0aW9uKGEsZCl7dGhpcy5pbml0aWFsVmFsdWU9YVtkXTt0aGlzLmRvbUVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7dGhpcy5vYmplY3Q9YTt0aGlzLnByb3BlcnR5PWQ7dGhpcy5fX29uRmluaXNoQ2hhbmdlPXRoaXMuX19vbkNoYW5nZT12b2lkIDB9O2UuZXh0ZW5kKGEucHJvdG90eXBlLHtvbkNoYW5nZTpmdW5jdGlvbihhKXt0aGlzLl9fb25DaGFuZ2U9YTtyZXR1cm4gdGhpc30sb25GaW5pc2hDaGFuZ2U6ZnVuY3Rpb24oYSl7dGhpcy5fX29uRmluaXNoQ2hhbmdlPWE7cmV0dXJuIHRoaXN9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe3RoaXMub2JqZWN0W3RoaXMucHJvcGVydHldPWE7dGhpcy5fX29uQ2hhbmdlJiZ0aGlzLl9fb25DaGFuZ2UuY2FsbCh0aGlzLGEpO3RoaXMudXBkYXRlRGlzcGxheSgpO3JldHVybiB0aGlzfSxnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9iamVjdFt0aGlzLnByb3BlcnR5XX0sCnVwZGF0ZURpc3BsYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30saXNNb2RpZmllZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXRpYWxWYWx1ZSE9PXRoaXMuZ2V0VmFsdWUoKX19KTtyZXR1cm4gYX0oZGF0LnV0aWxzLmNvbW1vbik7CmRhdC5kb20uZG9tPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGEoYil7aWYoYj09PSIwInx8ZS5pc1VuZGVmaW5lZChiKSlyZXR1cm4gMDtiPWIubWF0Y2goZCk7cmV0dXJuIWUuaXNOdWxsKGIpP3BhcnNlRmxvYXQoYlsxXSk6MH12YXIgYz17fTtlLmVhY2goe0hUTUxFdmVudHM6WyJjaGFuZ2UiXSxNb3VzZUV2ZW50czpbImNsaWNrIiwibW91c2Vtb3ZlIiwibW91c2Vkb3duIiwibW91c2V1cCIsIm1vdXNlb3ZlciJdLEtleWJvYXJkRXZlbnRzOlsia2V5ZG93biJdfSxmdW5jdGlvbihiLGEpe2UuZWFjaChiLGZ1bmN0aW9uKGIpe2NbYl09YX0pfSk7dmFyIGQ9LyhcZCsoXC5cZCspPylweC8sZj17bWFrZVNlbGVjdGFibGU6ZnVuY3Rpb24oYixhKXtpZighKGI9PT12b2lkIDB8fGIuc3R5bGU9PT12b2lkIDApKWIub25zZWxlY3RzdGFydD1hP2Z1bmN0aW9uKCl7cmV0dXJuIGZhbHNlfTpmdW5jdGlvbigpe30sYi5zdHlsZS5Nb3pVc2VyU2VsZWN0PWE/ImF1dG8iOiJub25lIixiLnN0eWxlLktodG1sVXNlclNlbGVjdD0KYT8iYXV0byI6Im5vbmUiLGIudW5zZWxlY3RhYmxlPWE/Im9uIjoib2ZmIn0sbWFrZUZ1bGxzY3JlZW46ZnVuY3Rpb24oYixhLGQpe2UuaXNVbmRlZmluZWQoYSkmJihhPXRydWUpO2UuaXNVbmRlZmluZWQoZCkmJihkPXRydWUpO2Iuc3R5bGUucG9zaXRpb249ImFic29sdXRlIjtpZihhKWIuc3R5bGUubGVmdD0wLGIuc3R5bGUucmlnaHQ9MDtpZihkKWIuc3R5bGUudG9wPTAsYi5zdHlsZS5ib3R0b209MH0sZmFrZUV2ZW50OmZ1bmN0aW9uKGIsYSxkLGYpe3ZhciBkPWR8fHt9LG09Y1thXTtpZighbSl0aHJvdyBFcnJvcigiRXZlbnQgdHlwZSAiK2ErIiBub3Qgc3VwcG9ydGVkLiIpO3ZhciBsPWRvY3VtZW50LmNyZWF0ZUV2ZW50KG0pO3N3aXRjaChtKXtjYXNlICJNb3VzZUV2ZW50cyI6bC5pbml0TW91c2VFdmVudChhLGQuYnViYmxlc3x8ZmFsc2UsZC5jYW5jZWxhYmxlfHx0cnVlLHdpbmRvdyxkLmNsaWNrQ291bnR8fDEsMCwwLGQueHx8ZC5jbGllbnRYfHwwLGQueXx8ZC5jbGllbnRZfHwKMCxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSwwLG51bGwpO2JyZWFrO2Nhc2UgIktleWJvYXJkRXZlbnRzIjptPWwuaW5pdEtleWJvYXJkRXZlbnR8fGwuaW5pdEtleUV2ZW50O2UuZGVmYXVsdHMoZCx7Y2FuY2VsYWJsZTp0cnVlLGN0cmxLZXk6ZmFsc2UsYWx0S2V5OmZhbHNlLHNoaWZ0S2V5OmZhbHNlLG1ldGFLZXk6ZmFsc2Usa2V5Q29kZTp2b2lkIDAsY2hhckNvZGU6dm9pZCAwfSk7bShhLGQuYnViYmxlc3x8ZmFsc2UsZC5jYW5jZWxhYmxlLHdpbmRvdyxkLmN0cmxLZXksZC5hbHRLZXksZC5zaGlmdEtleSxkLm1ldGFLZXksZC5rZXlDb2RlLGQuY2hhckNvZGUpO2JyZWFrO2RlZmF1bHQ6bC5pbml0RXZlbnQoYSxkLmJ1YmJsZXN8fGZhbHNlLGQuY2FuY2VsYWJsZXx8dHJ1ZSl9ZS5kZWZhdWx0cyhsLGYpO2IuZGlzcGF0Y2hFdmVudChsKX0sYmluZDpmdW5jdGlvbihiLGEsZCxjKXtiLmFkZEV2ZW50TGlzdGVuZXI/Yi5hZGRFdmVudExpc3RlbmVyKGEsZCxjfHxmYWxzZSk6Yi5hdHRhY2hFdmVudCYmCmIuYXR0YWNoRXZlbnQoIm9uIithLGQpO3JldHVybiBmfSx1bmJpbmQ6ZnVuY3Rpb24oYixhLGQsYyl7Yi5yZW1vdmVFdmVudExpc3RlbmVyP2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLGQsY3x8ZmFsc2UpOmIuZGV0YWNoRXZlbnQmJmIuZGV0YWNoRXZlbnQoIm9uIithLGQpO3JldHVybiBmfSxhZGRDbGFzczpmdW5jdGlvbihiLGEpe2lmKGIuY2xhc3NOYW1lPT09dm9pZCAwKWIuY2xhc3NOYW1lPWE7ZWxzZSBpZihiLmNsYXNzTmFtZSE9PWEpe3ZhciBkPWIuY2xhc3NOYW1lLnNwbGl0KC8gKy8pO2lmKGQuaW5kZXhPZihhKT09LTEpZC5wdXNoKGEpLGIuY2xhc3NOYW1lPWQuam9pbigiICIpLnJlcGxhY2UoL15ccysvLCIiKS5yZXBsYWNlKC9ccyskLywiIil9cmV0dXJuIGZ9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGIsYSl7aWYoYSl7aWYoYi5jbGFzc05hbWUhPT12b2lkIDApaWYoYi5jbGFzc05hbWU9PT1hKWIucmVtb3ZlQXR0cmlidXRlKCJjbGFzcyIpO2Vsc2V7dmFyIGQ9Yi5jbGFzc05hbWUuc3BsaXQoLyArLyksCmM9ZC5pbmRleE9mKGEpO2lmKGMhPS0xKWQuc3BsaWNlKGMsMSksYi5jbGFzc05hbWU9ZC5qb2luKCIgIil9fWVsc2UgYi5jbGFzc05hbWU9dm9pZCAwO3JldHVybiBmfSxoYXNDbGFzczpmdW5jdGlvbihhLGQpe3JldHVybiBSZWdFeHAoIig/Ol58XFxzKykiK2QrIig/Olxccyt8JCkiKS50ZXN0KGEuY2xhc3NOYW1lKXx8ZmFsc2V9LGdldFdpZHRoOmZ1bmN0aW9uKGIpe2I9Z2V0Q29tcHV0ZWRTdHlsZShiKTtyZXR1cm4gYShiWyJib3JkZXItbGVmdC13aWR0aCJdKSthKGJbImJvcmRlci1yaWdodC13aWR0aCJdKSthKGJbInBhZGRpbmctbGVmdCJdKSthKGJbInBhZGRpbmctcmlnaHQiXSkrYShiLndpZHRoKX0sZ2V0SGVpZ2h0OmZ1bmN0aW9uKGIpe2I9Z2V0Q29tcHV0ZWRTdHlsZShiKTtyZXR1cm4gYShiWyJib3JkZXItdG9wLXdpZHRoIl0pK2EoYlsiYm9yZGVyLWJvdHRvbS13aWR0aCJdKSthKGJbInBhZGRpbmctdG9wIl0pK2EoYlsicGFkZGluZy1ib3R0b20iXSkrYShiLmhlaWdodCl9LApnZXRPZmZzZXQ6ZnVuY3Rpb24oYSl7dmFyIGQ9e2xlZnQ6MCx0b3A6MH07aWYoYS5vZmZzZXRQYXJlbnQpe2RvIGQubGVmdCs9YS5vZmZzZXRMZWZ0LGQudG9wKz1hLm9mZnNldFRvcDt3aGlsZShhPWEub2Zmc2V0UGFyZW50KX1yZXR1cm4gZH0saXNBY3RpdmU6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1kb2N1bWVudC5hY3RpdmVFbGVtZW50JiYoYS50eXBlfHxhLmhyZWYpfX07cmV0dXJuIGZ9KGRhdC51dGlscy5jb21tb24pOwpkYXQuY29udHJvbGxlcnMuT3B0aW9uQ29udHJvbGxlcj1mdW5jdGlvbihlLGEsYyl7dmFyIGQ9ZnVuY3Rpb24oZixiLGUpe2Quc3VwZXJjbGFzcy5jYWxsKHRoaXMsZixiKTt2YXIgaD10aGlzO3RoaXMuX19zZWxlY3Q9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2VsZWN0Iik7aWYoYy5pc0FycmF5KGUpKXt2YXIgaj17fTtjLmVhY2goZSxmdW5jdGlvbihhKXtqW2FdPWF9KTtlPWp9Yy5lYWNoKGUsZnVuY3Rpb24oYSxiKXt2YXIgZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTtkLmlubmVySFRNTD1iO2Quc2V0QXR0cmlidXRlKCJ2YWx1ZSIsYSk7aC5fX3NlbGVjdC5hcHBlbmRDaGlsZChkKX0pO3RoaXMudXBkYXRlRGlzcGxheSgpO2EuYmluZCh0aGlzLl9fc2VsZWN0LCJjaGFuZ2UiLGZ1bmN0aW9uKCl7aC5zZXRWYWx1ZSh0aGlzLm9wdGlvbnNbdGhpcy5zZWxlY3RlZEluZGV4XS52YWx1ZSl9KTt0aGlzLmRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fX3NlbGVjdCl9OwpkLnN1cGVyY2xhc3M9ZTtjLmV4dGVuZChkLnByb3RvdHlwZSxlLnByb3RvdHlwZSx7c2V0VmFsdWU6ZnVuY3Rpb24oYSl7YT1kLnN1cGVyY2xhc3MucHJvdG90eXBlLnNldFZhbHVlLmNhbGwodGhpcyxhKTt0aGlzLl9fb25GaW5pc2hDaGFuZ2UmJnRoaXMuX19vbkZpbmlzaENoYW5nZS5jYWxsKHRoaXMsdGhpcy5nZXRWYWx1ZSgpKTtyZXR1cm4gYX0sdXBkYXRlRGlzcGxheTpmdW5jdGlvbigpe3RoaXMuX19zZWxlY3QudmFsdWU9dGhpcy5nZXRWYWx1ZSgpO3JldHVybiBkLnN1cGVyY2xhc3MucHJvdG90eXBlLnVwZGF0ZURpc3BsYXkuY2FsbCh0aGlzKX19KTtyZXR1cm4gZH0oZGF0LmNvbnRyb2xsZXJzLkNvbnRyb2xsZXIsZGF0LmRvbS5kb20sZGF0LnV0aWxzLmNvbW1vbik7CmRhdC5jb250cm9sbGVycy5OdW1iZXJDb250cm9sbGVyPWZ1bmN0aW9uKGUsYSl7dmFyIGM9ZnVuY3Rpb24oZCxmLGIpe2Muc3VwZXJjbGFzcy5jYWxsKHRoaXMsZCxmKTtiPWJ8fHt9O3RoaXMuX19taW49Yi5taW47dGhpcy5fX21heD1iLm1heDt0aGlzLl9fc3RlcD1iLnN0ZXA7ZD10aGlzLl9faW1wbGllZFN0ZXA9YS5pc1VuZGVmaW5lZCh0aGlzLl9fc3RlcCk/dGhpcy5pbml0aWFsVmFsdWU9PTA/MTpNYXRoLnBvdygxMCxNYXRoLmZsb29yKE1hdGgubG9nKHRoaXMuaW5pdGlhbFZhbHVlKS9NYXRoLkxOMTApKS8xMDp0aGlzLl9fc3RlcDtkPWQudG9TdHJpbmcoKTt0aGlzLl9fcHJlY2lzaW9uPWQuaW5kZXhPZigiLiIpPi0xP2QubGVuZ3RoLWQuaW5kZXhPZigiLiIpLTE6MH07Yy5zdXBlcmNsYXNzPWU7YS5leHRlbmQoYy5wcm90b3R5cGUsZS5wcm90b3R5cGUse3NldFZhbHVlOmZ1bmN0aW9uKGEpe2lmKHRoaXMuX19taW4hPT12b2lkIDAmJmE8dGhpcy5fX21pbilhPXRoaXMuX19taW47CmVsc2UgaWYodGhpcy5fX21heCE9PXZvaWQgMCYmYT50aGlzLl9fbWF4KWE9dGhpcy5fX21heDt0aGlzLl9fc3RlcCE9PXZvaWQgMCYmYSV0aGlzLl9fc3RlcCE9MCYmKGE9TWF0aC5yb3VuZChhL3RoaXMuX19zdGVwKSp0aGlzLl9fc3RlcCk7cmV0dXJuIGMuc3VwZXJjbGFzcy5wcm90b3R5cGUuc2V0VmFsdWUuY2FsbCh0aGlzLGEpfSxtaW46ZnVuY3Rpb24oYSl7dGhpcy5fX21pbj1hO3JldHVybiB0aGlzfSxtYXg6ZnVuY3Rpb24oYSl7dGhpcy5fX21heD1hO3JldHVybiB0aGlzfSxzdGVwOmZ1bmN0aW9uKGEpe3RoaXMuX19zdGVwPWE7cmV0dXJuIHRoaXN9fSk7cmV0dXJuIGN9KGRhdC5jb250cm9sbGVycy5Db250cm9sbGVyLGRhdC51dGlscy5jb21tb24pOwpkYXQuY29udHJvbGxlcnMuTnVtYmVyQ29udHJvbGxlckJveD1mdW5jdGlvbihlLGEsYyl7dmFyIGQ9ZnVuY3Rpb24oZixiLGUpe2Z1bmN0aW9uIGgoKXt2YXIgYT1wYXJzZUZsb2F0KGwuX19pbnB1dC52YWx1ZSk7Yy5pc05hTihhKXx8bC5zZXRWYWx1ZShhKX1mdW5jdGlvbiBqKGEpe3ZhciBiPW8tYS5jbGllbnRZO2wuc2V0VmFsdWUobC5nZXRWYWx1ZSgpK2IqbC5fX2ltcGxpZWRTdGVwKTtvPWEuY2xpZW50WX1mdW5jdGlvbiBtKCl7YS51bmJpbmQod2luZG93LCJtb3VzZW1vdmUiLGopO2EudW5iaW5kKHdpbmRvdywibW91c2V1cCIsbSl9dGhpcy5fX3RydW5jYXRpb25TdXNwZW5kZWQ9ZmFsc2U7ZC5zdXBlcmNsYXNzLmNhbGwodGhpcyxmLGIsZSk7dmFyIGw9dGhpcyxvO3RoaXMuX19pbnB1dD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpO3RoaXMuX19pbnB1dC5zZXRBdHRyaWJ1dGUoInR5cGUiLCJ0ZXh0Iik7YS5iaW5kKHRoaXMuX19pbnB1dCwiY2hhbmdlIixoKTsKYS5iaW5kKHRoaXMuX19pbnB1dCwiYmx1ciIsZnVuY3Rpb24oKXtoKCk7bC5fX29uRmluaXNoQ2hhbmdlJiZsLl9fb25GaW5pc2hDaGFuZ2UuY2FsbChsLGwuZ2V0VmFsdWUoKSl9KTthLmJpbmQodGhpcy5fX2lucHV0LCJtb3VzZWRvd24iLGZ1bmN0aW9uKGIpe2EuYmluZCh3aW5kb3csIm1vdXNlbW92ZSIsaik7YS5iaW5kKHdpbmRvdywibW91c2V1cCIsbSk7bz1iLmNsaWVudFl9KTthLmJpbmQodGhpcy5fX2lucHV0LCJrZXlkb3duIixmdW5jdGlvbihhKXtpZihhLmtleUNvZGU9PT0xMylsLl9fdHJ1bmNhdGlvblN1c3BlbmRlZD10cnVlLHRoaXMuYmx1cigpLGwuX190cnVuY2F0aW9uU3VzcGVuZGVkPWZhbHNlfSk7dGhpcy51cGRhdGVEaXNwbGF5KCk7dGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX19pbnB1dCl9O2Quc3VwZXJjbGFzcz1lO2MuZXh0ZW5kKGQucHJvdG90eXBlLGUucHJvdG90eXBlLHt1cGRhdGVEaXNwbGF5OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fX2lucHV0LApiO2lmKHRoaXMuX190cnVuY2F0aW9uU3VzcGVuZGVkKWI9dGhpcy5nZXRWYWx1ZSgpO2Vsc2V7Yj10aGlzLmdldFZhbHVlKCk7dmFyIGM9TWF0aC5wb3coMTAsdGhpcy5fX3ByZWNpc2lvbik7Yj1NYXRoLnJvdW5kKGIqYykvY31hLnZhbHVlPWI7cmV0dXJuIGQuc3VwZXJjbGFzcy5wcm90b3R5cGUudXBkYXRlRGlzcGxheS5jYWxsKHRoaXMpfX0pO3JldHVybiBkfShkYXQuY29udHJvbGxlcnMuTnVtYmVyQ29udHJvbGxlcixkYXQuZG9tLmRvbSxkYXQudXRpbHMuY29tbW9uKTsKZGF0LmNvbnRyb2xsZXJzLk51bWJlckNvbnRyb2xsZXJTbGlkZXI9ZnVuY3Rpb24oZSxhLGMsZCxmKXt2YXIgYj1mdW5jdGlvbihkLGMsZixlLGwpe2Z1bmN0aW9uIG8oYil7Yi5wcmV2ZW50RGVmYXVsdCgpO3ZhciBkPWEuZ2V0T2Zmc2V0KGcuX19iYWNrZ3JvdW5kKSxjPWEuZ2V0V2lkdGgoZy5fX2JhY2tncm91bmQpO2cuc2V0VmFsdWUoZy5fX21pbisoZy5fX21heC1nLl9fbWluKSooKGIuY2xpZW50WC1kLmxlZnQpLyhkLmxlZnQrYy1kLmxlZnQpKSk7cmV0dXJuIGZhbHNlfWZ1bmN0aW9uIHkoKXthLnVuYmluZCh3aW5kb3csIm1vdXNlbW92ZSIsbyk7YS51bmJpbmQod2luZG93LCJtb3VzZXVwIix5KTtnLl9fb25GaW5pc2hDaGFuZ2UmJmcuX19vbkZpbmlzaENoYW5nZS5jYWxsKGcsZy5nZXRWYWx1ZSgpKX1iLnN1cGVyY2xhc3MuY2FsbCh0aGlzLGQsYyx7bWluOmYsbWF4OmUsc3RlcDpsfSk7dmFyIGc9dGhpczt0aGlzLl9fYmFja2dyb3VuZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKdGhpcy5fX2ZvcmVncm91bmQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7YS5iaW5kKHRoaXMuX19iYWNrZ3JvdW5kLCJtb3VzZWRvd24iLGZ1bmN0aW9uKGIpe2EuYmluZCh3aW5kb3csIm1vdXNlbW92ZSIsbyk7YS5iaW5kKHdpbmRvdywibW91c2V1cCIseSk7byhiKX0pO2EuYWRkQ2xhc3ModGhpcy5fX2JhY2tncm91bmQsInNsaWRlciIpO2EuYWRkQ2xhc3ModGhpcy5fX2ZvcmVncm91bmQsInNsaWRlci1mZyIpO3RoaXMudXBkYXRlRGlzcGxheSgpO3RoaXMuX19iYWNrZ3JvdW5kLmFwcGVuZENoaWxkKHRoaXMuX19mb3JlZ3JvdW5kKTt0aGlzLmRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fX2JhY2tncm91bmQpfTtiLnN1cGVyY2xhc3M9ZTtiLnVzZURlZmF1bHRTdHlsZXM9ZnVuY3Rpb24oKXtjLmluamVjdChmKX07ZC5leHRlbmQoYi5wcm90b3R5cGUsZS5wcm90b3R5cGUse3VwZGF0ZURpc3BsYXk6ZnVuY3Rpb24oKXt0aGlzLl9fZm9yZWdyb3VuZC5zdHlsZS53aWR0aD0KKHRoaXMuZ2V0VmFsdWUoKS10aGlzLl9fbWluKS8odGhpcy5fX21heC10aGlzLl9fbWluKSoxMDArIiUiO3JldHVybiBiLnN1cGVyY2xhc3MucHJvdG90eXBlLnVwZGF0ZURpc3BsYXkuY2FsbCh0aGlzKX19KTtyZXR1cm4gYn0oZGF0LmNvbnRyb2xsZXJzLk51bWJlckNvbnRyb2xsZXIsZGF0LmRvbS5kb20sZGF0LnV0aWxzLmNzcyxkYXQudXRpbHMuY29tbW9uLCIuc2xpZGVyIHtcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAycHggNHB4IHJnYmEoMCwwLDAsMC4xNSk7XG4gIGhlaWdodDogMWVtO1xuICBib3JkZXItcmFkaXVzOiAxZW07XG4gIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XG4gIHBhZGRpbmc6IDAgMC41ZW07XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi5zbGlkZXItZmcge1xuICBwYWRkaW5nOiAxcHggMCAycHggMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2FhYTtcbiAgaGVpZ2h0OiAxZW07XG4gIG1hcmdpbi1sZWZ0OiAtMC41ZW07XG4gIHBhZGRpbmctcmlnaHQ6IDAuNWVtO1xuICBib3JkZXItcmFkaXVzOiAxZW0gMCAwIDFlbTtcbn1cblxuLnNsaWRlci1mZzphZnRlciB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgYm9yZGVyLXJhZGl1czogMWVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBib3JkZXI6ICAxcHggc29saWQgI2FhYTtcbiAgY29udGVudDogJyc7XG4gIGZsb2F0OiByaWdodDtcbiAgbWFyZ2luLXJpZ2h0OiAtMWVtO1xuICBtYXJnaW4tdG9wOiAtMXB4O1xuICBoZWlnaHQ6IDAuOWVtO1xuICB3aWR0aDogMC45ZW07XG59Iik7CmRhdC5jb250cm9sbGVycy5GdW5jdGlvbkNvbnRyb2xsZXI9ZnVuY3Rpb24oZSxhLGMpe3ZhciBkPWZ1bmN0aW9uKGMsYixlKXtkLnN1cGVyY2xhc3MuY2FsbCh0aGlzLGMsYik7dmFyIGg9dGhpczt0aGlzLl9fYnV0dG9uPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO3RoaXMuX19idXR0b24uaW5uZXJIVE1MPWU9PT12b2lkIDA/IkZpcmUiOmU7YS5iaW5kKHRoaXMuX19idXR0b24sImNsaWNrIixmdW5jdGlvbihhKXthLnByZXZlbnREZWZhdWx0KCk7aC5maXJlKCk7cmV0dXJuIGZhbHNlfSk7YS5hZGRDbGFzcyh0aGlzLl9fYnV0dG9uLCJidXR0b24iKTt0aGlzLmRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fX2J1dHRvbil9O2Quc3VwZXJjbGFzcz1lO2MuZXh0ZW5kKGQucHJvdG90eXBlLGUucHJvdG90eXBlLHtmaXJlOmZ1bmN0aW9uKCl7dGhpcy5fX29uQ2hhbmdlJiZ0aGlzLl9fb25DaGFuZ2UuY2FsbCh0aGlzKTt0aGlzLl9fb25GaW5pc2hDaGFuZ2UmJnRoaXMuX19vbkZpbmlzaENoYW5nZS5jYWxsKHRoaXMsCnRoaXMuZ2V0VmFsdWUoKSk7dGhpcy5nZXRWYWx1ZSgpLmNhbGwodGhpcy5vYmplY3QpfX0pO3JldHVybiBkfShkYXQuY29udHJvbGxlcnMuQ29udHJvbGxlcixkYXQuZG9tLmRvbSxkYXQudXRpbHMuY29tbW9uKTsKZGF0LmNvbnRyb2xsZXJzLkJvb2xlYW5Db250cm9sbGVyPWZ1bmN0aW9uKGUsYSxjKXt2YXIgZD1mdW5jdGlvbihjLGIpe2Quc3VwZXJjbGFzcy5jYWxsKHRoaXMsYyxiKTt2YXIgZT10aGlzO3RoaXMuX19wcmV2PXRoaXMuZ2V0VmFsdWUoKTt0aGlzLl9fY2hlY2tib3g9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKTt0aGlzLl9fY2hlY2tib3guc2V0QXR0cmlidXRlKCJ0eXBlIiwiY2hlY2tib3giKTthLmJpbmQodGhpcy5fX2NoZWNrYm94LCJjaGFuZ2UiLGZ1bmN0aW9uKCl7ZS5zZXRWYWx1ZSghZS5fX3ByZXYpfSxmYWxzZSk7dGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX19jaGVja2JveCk7dGhpcy51cGRhdGVEaXNwbGF5KCl9O2Quc3VwZXJjbGFzcz1lO2MuZXh0ZW5kKGQucHJvdG90eXBlLGUucHJvdG90eXBlLHtzZXRWYWx1ZTpmdW5jdGlvbihhKXthPWQuc3VwZXJjbGFzcy5wcm90b3R5cGUuc2V0VmFsdWUuY2FsbCh0aGlzLGEpO3RoaXMuX19vbkZpbmlzaENoYW5nZSYmCnRoaXMuX19vbkZpbmlzaENoYW5nZS5jYWxsKHRoaXMsdGhpcy5nZXRWYWx1ZSgpKTt0aGlzLl9fcHJldj10aGlzLmdldFZhbHVlKCk7cmV0dXJuIGF9LHVwZGF0ZURpc3BsYXk6ZnVuY3Rpb24oKXt0aGlzLmdldFZhbHVlKCk9PT10cnVlPyh0aGlzLl9fY2hlY2tib3guc2V0QXR0cmlidXRlKCJjaGVja2VkIiwiY2hlY2tlZCIpLHRoaXMuX19jaGVja2JveC5jaGVja2VkPXRydWUpOnRoaXMuX19jaGVja2JveC5jaGVja2VkPWZhbHNlO3JldHVybiBkLnN1cGVyY2xhc3MucHJvdG90eXBlLnVwZGF0ZURpc3BsYXkuY2FsbCh0aGlzKX19KTtyZXR1cm4gZH0oZGF0LmNvbnRyb2xsZXJzLkNvbnRyb2xsZXIsZGF0LmRvbS5kb20sZGF0LnV0aWxzLmNvbW1vbik7CmRhdC5jb2xvci50b1N0cmluZz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oYSl7aWYoYS5hPT0xfHxlLmlzVW5kZWZpbmVkKGEuYSkpe2ZvcihhPWEuaGV4LnRvU3RyaW5nKDE2KTthLmxlbmd0aDw2OylhPSIwIithO3JldHVybiIjIithfWVsc2UgcmV0dXJuInJnYmEoIitNYXRoLnJvdW5kKGEucikrIiwiK01hdGgucm91bmQoYS5nKSsiLCIrTWF0aC5yb3VuZChhLmIpKyIsIithLmErIikifX0oZGF0LnV0aWxzLmNvbW1vbik7CmRhdC5jb2xvci5pbnRlcnByZXQ9ZnVuY3Rpb24oZSxhKXt2YXIgYyxkLGY9W3tsaXRtdXM6YS5pc1N0cmluZyxjb252ZXJzaW9uczp7VEhSRUVfQ0hBUl9IRVg6e3JlYWQ6ZnVuY3Rpb24oYSl7YT1hLm1hdGNoKC9eIyhbQS1GMC05XSkoW0EtRjAtOV0pKFtBLUYwLTldKSQvaSk7cmV0dXJuIGE9PT1udWxsP2ZhbHNlOntzcGFjZToiSEVYIixoZXg6cGFyc2VJbnQoIjB4IithWzFdLnRvU3RyaW5nKCkrYVsxXS50b1N0cmluZygpK2FbMl0udG9TdHJpbmcoKSthWzJdLnRvU3RyaW5nKCkrYVszXS50b1N0cmluZygpK2FbM10udG9TdHJpbmcoKSl9fSx3cml0ZTplfSxTSVhfQ0hBUl9IRVg6e3JlYWQ6ZnVuY3Rpb24oYSl7YT1hLm1hdGNoKC9eIyhbQS1GMC05XXs2fSkkL2kpO3JldHVybiBhPT09bnVsbD9mYWxzZTp7c3BhY2U6IkhFWCIsaGV4OnBhcnNlSW50KCIweCIrYVsxXS50b1N0cmluZygpKX19LHdyaXRlOmV9LENTU19SR0I6e3JlYWQ6ZnVuY3Rpb24oYSl7YT1hLm1hdGNoKC9ecmdiXChccyooLispXHMqLFxzKiguKylccyosXHMqKC4rKVxzKlwpLyk7CnJldHVybiBhPT09bnVsbD9mYWxzZTp7c3BhY2U6IlJHQiIscjpwYXJzZUZsb2F0KGFbMV0pLGc6cGFyc2VGbG9hdChhWzJdKSxiOnBhcnNlRmxvYXQoYVszXSl9fSx3cml0ZTplfSxDU1NfUkdCQTp7cmVhZDpmdW5jdGlvbihhKXthPWEubWF0Y2goL15yZ2JhXChccyooLispXHMqLFxzKiguKylccyosXHMqKC4rKVxzKlwsXHMqKC4rKVxzKlwpLyk7cmV0dXJuIGE9PT1udWxsP2ZhbHNlOntzcGFjZToiUkdCIixyOnBhcnNlRmxvYXQoYVsxXSksZzpwYXJzZUZsb2F0KGFbMl0pLGI6cGFyc2VGbG9hdChhWzNdKSxhOnBhcnNlRmxvYXQoYVs0XSl9fSx3cml0ZTplfX19LHtsaXRtdXM6YS5pc051bWJlcixjb252ZXJzaW9uczp7SEVYOntyZWFkOmZ1bmN0aW9uKGEpe3JldHVybntzcGFjZToiSEVYIixoZXg6YSxjb252ZXJzaW9uTmFtZToiSEVYIn19LHdyaXRlOmZ1bmN0aW9uKGEpe3JldHVybiBhLmhleH19fX0se2xpdG11czphLmlzQXJyYXksY29udmVyc2lvbnM6e1JHQl9BUlJBWTp7cmVhZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5sZW5ndGghPQozP2ZhbHNlOntzcGFjZToiUkdCIixyOmFbMF0sZzphWzFdLGI6YVsyXX19LHdyaXRlOmZ1bmN0aW9uKGEpe3JldHVyblthLnIsYS5nLGEuYl19fSxSR0JBX0FSUkFZOntyZWFkOmZ1bmN0aW9uKGEpe3JldHVybiBhLmxlbmd0aCE9ND9mYWxzZTp7c3BhY2U6IlJHQiIscjphWzBdLGc6YVsxXSxiOmFbMl0sYTphWzNdfX0sd3JpdGU6ZnVuY3Rpb24oYSl7cmV0dXJuW2EucixhLmcsYS5iLGEuYV19fX19LHtsaXRtdXM6YS5pc09iamVjdCxjb252ZXJzaW9uczp7UkdCQV9PQko6e3JlYWQ6ZnVuY3Rpb24oYil7cmV0dXJuIGEuaXNOdW1iZXIoYi5yKSYmYS5pc051bWJlcihiLmcpJiZhLmlzTnVtYmVyKGIuYikmJmEuaXNOdW1iZXIoYi5hKT97c3BhY2U6IlJHQiIscjpiLnIsZzpiLmcsYjpiLmIsYTpiLmF9OmZhbHNlfSx3cml0ZTpmdW5jdGlvbihhKXtyZXR1cm57cjphLnIsZzphLmcsYjphLmIsYTphLmF9fX0sUkdCX09CSjp7cmVhZDpmdW5jdGlvbihiKXtyZXR1cm4gYS5pc051bWJlcihiLnIpJiYKYS5pc051bWJlcihiLmcpJiZhLmlzTnVtYmVyKGIuYik/e3NwYWNlOiJSR0IiLHI6Yi5yLGc6Yi5nLGI6Yi5ifTpmYWxzZX0sd3JpdGU6ZnVuY3Rpb24oYSl7cmV0dXJue3I6YS5yLGc6YS5nLGI6YS5ifX19LEhTVkFfT0JKOntyZWFkOmZ1bmN0aW9uKGIpe3JldHVybiBhLmlzTnVtYmVyKGIuaCkmJmEuaXNOdW1iZXIoYi5zKSYmYS5pc051bWJlcihiLnYpJiZhLmlzTnVtYmVyKGIuYSk/e3NwYWNlOiJIU1YiLGg6Yi5oLHM6Yi5zLHY6Yi52LGE6Yi5hfTpmYWxzZX0sd3JpdGU6ZnVuY3Rpb24oYSl7cmV0dXJue2g6YS5oLHM6YS5zLHY6YS52LGE6YS5hfX19LEhTVl9PQko6e3JlYWQ6ZnVuY3Rpb24oYil7cmV0dXJuIGEuaXNOdW1iZXIoYi5oKSYmYS5pc051bWJlcihiLnMpJiZhLmlzTnVtYmVyKGIudik/e3NwYWNlOiJIU1YiLGg6Yi5oLHM6Yi5zLHY6Yi52fTpmYWxzZX0sd3JpdGU6ZnVuY3Rpb24oYSl7cmV0dXJue2g6YS5oLHM6YS5zLHY6YS52fX19fX1dO3JldHVybiBmdW5jdGlvbigpe2Q9CmZhbHNlO3ZhciBiPWFyZ3VtZW50cy5sZW5ndGg+MT9hLnRvQXJyYXkoYXJndW1lbnRzKTphcmd1bWVudHNbMF07YS5lYWNoKGYsZnVuY3Rpb24oZSl7aWYoZS5saXRtdXMoYikpcmV0dXJuIGEuZWFjaChlLmNvbnZlcnNpb25zLGZ1bmN0aW9uKGUsZil7Yz1lLnJlYWQoYik7aWYoZD09PWZhbHNlJiZjIT09ZmFsc2UpcmV0dXJuIGQ9YyxjLmNvbnZlcnNpb25OYW1lPWYsYy5jb252ZXJzaW9uPWUsYS5CUkVBS30pLGEuQlJFQUt9KTtyZXR1cm4gZH19KGRhdC5jb2xvci50b1N0cmluZyxkYXQudXRpbHMuY29tbW9uKTsKZGF0LkdVST1kYXQuZ3VpLkdVST1mdW5jdGlvbihlLGEsYyxkLGYsYixuLGgsaixtLGwsbyx5LGcsaSl7ZnVuY3Rpb24gcShhLGIscixjKXtpZihiW3JdPT09dm9pZCAwKXRocm93IEVycm9yKCJPYmplY3QgIitiKycgaGFzIG5vIHByb3BlcnR5ICInK3IrJyInKTtjLmNvbG9yP2I9bmV3IGwoYixyKTooYj1bYixyXS5jb25jYXQoYy5mYWN0b3J5QXJncyksYj1kLmFwcGx5KGEsYikpO2lmKGMuYmVmb3JlIGluc3RhbmNlb2YgZiljLmJlZm9yZT1jLmJlZm9yZS5fX2xpO3QoYSxiKTtnLmFkZENsYXNzKGIuZG9tRWxlbWVudCwiYyIpO3I9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpO2cuYWRkQ2xhc3MociwicHJvcGVydHktbmFtZSIpO3IuaW5uZXJIVE1MPWIucHJvcGVydHk7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7ZS5hcHBlbmRDaGlsZChyKTtlLmFwcGVuZENoaWxkKGIuZG9tRWxlbWVudCk7Yz1zKGEsZSxjLmJlZm9yZSk7Zy5hZGRDbGFzcyhjLGsuQ0xBU1NfQ09OVFJPTExFUl9ST1cpOwpnLmFkZENsYXNzKGMsdHlwZW9mIGIuZ2V0VmFsdWUoKSk7cChhLGMsYik7YS5fX2NvbnRyb2xsZXJzLnB1c2goYik7cmV0dXJuIGJ9ZnVuY3Rpb24gcyhhLGIsZCl7dmFyIGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGkiKTtiJiZjLmFwcGVuZENoaWxkKGIpO2Q/YS5fX3VsLmluc2VydEJlZm9yZShjLHBhcmFtcy5iZWZvcmUpOmEuX191bC5hcHBlbmRDaGlsZChjKTthLm9uUmVzaXplKCk7cmV0dXJuIGN9ZnVuY3Rpb24gcChhLGQsYyl7Yy5fX2xpPWQ7Yy5fX2d1aT1hO2kuZXh0ZW5kKGMse29wdGlvbnM6ZnVuY3Rpb24oYil7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXJldHVybiBjLnJlbW92ZSgpLHEoYSxjLm9iamVjdCxjLnByb3BlcnR5LHtiZWZvcmU6Yy5fX2xpLm5leHRFbGVtZW50U2libGluZyxmYWN0b3J5QXJnczpbaS50b0FycmF5KGFyZ3VtZW50cyldfSk7aWYoaS5pc0FycmF5KGIpfHxpLmlzT2JqZWN0KGIpKXJldHVybiBjLnJlbW92ZSgpLHEoYSxjLm9iamVjdCxjLnByb3BlcnR5LAp7YmVmb3JlOmMuX19saS5uZXh0RWxlbWVudFNpYmxpbmcsZmFjdG9yeUFyZ3M6W2JdfSl9LG5hbWU6ZnVuY3Rpb24oYSl7Yy5fX2xpLmZpcnN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTD1hO3JldHVybiBjfSxsaXN0ZW46ZnVuY3Rpb24oKXtjLl9fZ3VpLmxpc3RlbihjKTtyZXR1cm4gY30scmVtb3ZlOmZ1bmN0aW9uKCl7Yy5fX2d1aS5yZW1vdmUoYyk7cmV0dXJuIGN9fSk7aWYoYyBpbnN0YW5jZW9mIGope3ZhciBlPW5ldyBoKGMub2JqZWN0LGMucHJvcGVydHkse21pbjpjLl9fbWluLG1heDpjLl9fbWF4LHN0ZXA6Yy5fX3N0ZXB9KTtpLmVhY2goWyJ1cGRhdGVEaXNwbGF5Iiwib25DaGFuZ2UiLCJvbkZpbmlzaENoYW5nZSJdLGZ1bmN0aW9uKGEpe3ZhciBiPWNbYV0sSD1lW2FdO2NbYV09ZVthXT1mdW5jdGlvbigpe3ZhciBhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7Yi5hcHBseShjLGEpO3JldHVybiBILmFwcGx5KGUsYSl9fSk7CmcuYWRkQ2xhc3MoZCwiaGFzLXNsaWRlciIpO2MuZG9tRWxlbWVudC5pbnNlcnRCZWZvcmUoZS5kb21FbGVtZW50LGMuZG9tRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCl9ZWxzZSBpZihjIGluc3RhbmNlb2YgaCl7dmFyIGY9ZnVuY3Rpb24oYil7cmV0dXJuIGkuaXNOdW1iZXIoYy5fX21pbikmJmkuaXNOdW1iZXIoYy5fX21heCk/KGMucmVtb3ZlKCkscShhLGMub2JqZWN0LGMucHJvcGVydHkse2JlZm9yZTpjLl9fbGkubmV4dEVsZW1lbnRTaWJsaW5nLGZhY3RvcnlBcmdzOltjLl9fbWluLGMuX19tYXgsYy5fX3N0ZXBdfSkpOmJ9O2MubWluPWkuY29tcG9zZShmLGMubWluKTtjLm1heD1pLmNvbXBvc2UoZixjLm1heCl9ZWxzZSBpZihjIGluc3RhbmNlb2YgYilnLmJpbmQoZCwiY2xpY2siLGZ1bmN0aW9uKCl7Zy5mYWtlRXZlbnQoYy5fX2NoZWNrYm94LCJjbGljayIpfSksZy5iaW5kKGMuX19jaGVja2JveCwiY2xpY2siLGZ1bmN0aW9uKGEpe2Euc3RvcFByb3BhZ2F0aW9uKCl9KTsKZWxzZSBpZihjIGluc3RhbmNlb2YgbilnLmJpbmQoZCwiY2xpY2siLGZ1bmN0aW9uKCl7Zy5mYWtlRXZlbnQoYy5fX2J1dHRvbiwiY2xpY2siKX0pLGcuYmluZChkLCJtb3VzZW92ZXIiLGZ1bmN0aW9uKCl7Zy5hZGRDbGFzcyhjLl9fYnV0dG9uLCJob3ZlciIpfSksZy5iaW5kKGQsIm1vdXNlb3V0IixmdW5jdGlvbigpe2cucmVtb3ZlQ2xhc3MoYy5fX2J1dHRvbiwiaG92ZXIiKX0pO2Vsc2UgaWYoYyBpbnN0YW5jZW9mIGwpZy5hZGRDbGFzcyhkLCJjb2xvciIpLGMudXBkYXRlRGlzcGxheT1pLmNvbXBvc2UoZnVuY3Rpb24oYSl7ZC5zdHlsZS5ib3JkZXJMZWZ0Q29sb3I9Yy5fX2NvbG9yLnRvU3RyaW5nKCk7cmV0dXJuIGF9LGMudXBkYXRlRGlzcGxheSksYy51cGRhdGVEaXNwbGF5KCk7Yy5zZXRWYWx1ZT1pLmNvbXBvc2UoZnVuY3Rpb24oYil7YS5nZXRSb290KCkuX19wcmVzZXRfc2VsZWN0JiZjLmlzTW9kaWZpZWQoKSYmQihhLmdldFJvb3QoKSx0cnVlKTtyZXR1cm4gYn0sYy5zZXRWYWx1ZSl9CmZ1bmN0aW9uIHQoYSxiKXt2YXIgYz1hLmdldFJvb3QoKSxkPWMuX19yZW1lbWJlcmVkT2JqZWN0cy5pbmRleE9mKGIub2JqZWN0KTtpZihkIT0tMSl7dmFyIGU9Yy5fX3JlbWVtYmVyZWRPYmplY3RJbmRlY2VzVG9Db250cm9sbGVyc1tkXTtlPT09dm9pZCAwJiYoZT17fSxjLl9fcmVtZW1iZXJlZE9iamVjdEluZGVjZXNUb0NvbnRyb2xsZXJzW2RdPWUpO2VbYi5wcm9wZXJ0eV09YjtpZihjLmxvYWQmJmMubG9hZC5yZW1lbWJlcmVkKXtjPWMubG9hZC5yZW1lbWJlcmVkO2lmKGNbYS5wcmVzZXRdKWM9Y1thLnByZXNldF07ZWxzZSBpZihjW3ddKWM9Y1t3XTtlbHNlIHJldHVybjtpZihjW2RdJiZjW2RdW2IucHJvcGVydHldIT09dm9pZCAwKWQ9Y1tkXVtiLnByb3BlcnR5XSxiLmluaXRpYWxWYWx1ZT1kLGIuc2V0VmFsdWUoZCl9fX1mdW5jdGlvbiBJKGEpe3ZhciBiPWEuX19zYXZlX3Jvdz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsaSIpO2cuYWRkQ2xhc3MoYS5kb21FbGVtZW50LAoiaGFzLXNhdmUiKTthLl9fdWwuaW5zZXJ0QmVmb3JlKGIsYS5fX3VsLmZpcnN0Q2hpbGQpO2cuYWRkQ2xhc3MoYiwic2F2ZS1yb3ciKTt2YXIgYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7Yy5pbm5lckhUTUw9IiZuYnNwOyI7Zy5hZGRDbGFzcyhjLCJidXR0b24gZ2VhcnMiKTt2YXIgZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7ZC5pbm5lckhUTUw9IlNhdmUiO2cuYWRkQ2xhc3MoZCwiYnV0dG9uIik7Zy5hZGRDbGFzcyhkLCJzYXZlIik7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpO2UuaW5uZXJIVE1MPSJOZXciO2cuYWRkQ2xhc3MoZSwiYnV0dG9uIik7Zy5hZGRDbGFzcyhlLCJzYXZlLWFzIik7dmFyIGY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpO2YuaW5uZXJIVE1MPSJSZXZlcnQiO2cuYWRkQ2xhc3MoZiwiYnV0dG9uIik7Zy5hZGRDbGFzcyhmLCJyZXZlcnQiKTt2YXIgbT1hLl9fcHJlc2V0X3NlbGVjdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzZWxlY3QiKTsKYS5sb2FkJiZhLmxvYWQucmVtZW1iZXJlZD9pLmVhY2goYS5sb2FkLnJlbWVtYmVyZWQsZnVuY3Rpb24oYixjKXtDKGEsYyxjPT1hLnByZXNldCl9KTpDKGEsdyxmYWxzZSk7Zy5iaW5kKG0sImNoYW5nZSIsZnVuY3Rpb24oKXtmb3IodmFyIGI9MDtiPGEuX19wcmVzZXRfc2VsZWN0Lmxlbmd0aDtiKyspYS5fX3ByZXNldF9zZWxlY3RbYl0uaW5uZXJIVE1MPWEuX19wcmVzZXRfc2VsZWN0W2JdLnZhbHVlO2EucHJlc2V0PXRoaXMudmFsdWV9KTtiLmFwcGVuZENoaWxkKG0pO2IuYXBwZW5kQ2hpbGQoYyk7Yi5hcHBlbmRDaGlsZChkKTtiLmFwcGVuZENoaWxkKGUpO2IuYXBwZW5kQ2hpbGQoZik7aWYodSl7dmFyIGI9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImRnLXNhdmUtbG9jYWxseSIpLGw9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImRnLWxvY2FsLWV4cGxhaW4iKTtiLnN0eWxlLmRpc3BsYXk9ImJsb2NrIjtiPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJkZy1sb2NhbC1zdG9yYWdlIik7CmxvY2FsU3RvcmFnZS5nZXRJdGVtKGRvY3VtZW50LmxvY2F0aW9uLmhyZWYrIi5pc0xvY2FsIik9PT0idHJ1ZSImJmIuc2V0QXR0cmlidXRlKCJjaGVja2VkIiwiY2hlY2tlZCIpO3ZhciBvPWZ1bmN0aW9uKCl7bC5zdHlsZS5kaXNwbGF5PWEudXNlTG9jYWxTdG9yYWdlPyJibG9jayI6Im5vbmUifTtvKCk7Zy5iaW5kKGIsImNoYW5nZSIsZnVuY3Rpb24oKXthLnVzZUxvY2FsU3RvcmFnZT0hYS51c2VMb2NhbFN0b3JhZ2U7bygpfSl9dmFyIGg9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImRnLW5ldy1jb25zdHJ1Y3RvciIpO2cuYmluZChoLCJrZXlkb3duIixmdW5jdGlvbihhKXthLm1ldGFLZXkmJihhLndoaWNoPT09Njd8fGEua2V5Q29kZT09NjcpJiZ4LmhpZGUoKX0pO2cuYmluZChjLCJjbGljayIsZnVuY3Rpb24oKXtoLmlubmVySFRNTD1KU09OLnN0cmluZ2lmeShhLmdldFNhdmVPYmplY3QoKSx2b2lkIDAsMik7eC5zaG93KCk7aC5mb2N1cygpO2guc2VsZWN0KCl9KTtnLmJpbmQoZCwKImNsaWNrIixmdW5jdGlvbigpe2Euc2F2ZSgpfSk7Zy5iaW5kKGUsImNsaWNrIixmdW5jdGlvbigpe3ZhciBiPXByb21wdCgiRW50ZXIgYSBuZXcgcHJlc2V0IG5hbWUuIik7YiYmYS5zYXZlQXMoYil9KTtnLmJpbmQoZiwiY2xpY2siLGZ1bmN0aW9uKCl7YS5yZXZlcnQoKX0pfWZ1bmN0aW9uIEooYSl7ZnVuY3Rpb24gYihmKXtmLnByZXZlbnREZWZhdWx0KCk7ZT1mLmNsaWVudFg7Zy5hZGRDbGFzcyhhLl9fY2xvc2VCdXR0b24say5DTEFTU19EUkFHKTtnLmJpbmQod2luZG93LCJtb3VzZW1vdmUiLGMpO2cuYmluZCh3aW5kb3csIm1vdXNldXAiLGQpO3JldHVybiBmYWxzZX1mdW5jdGlvbiBjKGIpe2IucHJldmVudERlZmF1bHQoKTthLndpZHRoKz1lLWIuY2xpZW50WDthLm9uUmVzaXplKCk7ZT1iLmNsaWVudFg7cmV0dXJuIGZhbHNlfWZ1bmN0aW9uIGQoKXtnLnJlbW92ZUNsYXNzKGEuX19jbG9zZUJ1dHRvbixrLkNMQVNTX0RSQUcpO2cudW5iaW5kKHdpbmRvdywibW91c2Vtb3ZlIiwKYyk7Zy51bmJpbmQod2luZG93LCJtb3VzZXVwIixkKX1hLl9fcmVzaXplX2hhbmRsZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTtpLmV4dGVuZChhLl9fcmVzaXplX2hhbmRsZS5zdHlsZSx7d2lkdGg6IjZweCIsbWFyZ2luTGVmdDoiLTNweCIsaGVpZ2h0OiIyMDBweCIsY3Vyc29yOiJldy1yZXNpemUiLHBvc2l0aW9uOiJhYnNvbHV0ZSJ9KTt2YXIgZTtnLmJpbmQoYS5fX3Jlc2l6ZV9oYW5kbGUsIm1vdXNlZG93biIsYik7Zy5iaW5kKGEuX19jbG9zZUJ1dHRvbiwibW91c2Vkb3duIixiKTthLmRvbUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGEuX19yZXNpemVfaGFuZGxlLGEuZG9tRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCl9ZnVuY3Rpb24gRChhLGIpe2EuZG9tRWxlbWVudC5zdHlsZS53aWR0aD1iKyJweCI7aWYoYS5fX3NhdmVfcm93JiZhLmF1dG9QbGFjZSlhLl9fc2F2ZV9yb3cuc3R5bGUud2lkdGg9YisicHgiO2lmKGEuX19jbG9zZUJ1dHRvbilhLl9fY2xvc2VCdXR0b24uc3R5bGUud2lkdGg9CmIrInB4In1mdW5jdGlvbiB6KGEsYil7dmFyIGM9e307aS5lYWNoKGEuX19yZW1lbWJlcmVkT2JqZWN0cyxmdW5jdGlvbihkLGUpe3ZhciBmPXt9O2kuZWFjaChhLl9fcmVtZW1iZXJlZE9iamVjdEluZGVjZXNUb0NvbnRyb2xsZXJzW2VdLGZ1bmN0aW9uKGEsYyl7ZltjXT1iP2EuaW5pdGlhbFZhbHVlOmEuZ2V0VmFsdWUoKX0pO2NbZV09Zn0pO3JldHVybiBjfWZ1bmN0aW9uIEMoYSxiLGMpe3ZhciBkPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpO2QuaW5uZXJIVE1MPWI7ZC52YWx1ZT1iO2EuX19wcmVzZXRfc2VsZWN0LmFwcGVuZENoaWxkKGQpO2lmKGMpYS5fX3ByZXNldF9zZWxlY3Quc2VsZWN0ZWRJbmRleD1hLl9fcHJlc2V0X3NlbGVjdC5sZW5ndGgtMX1mdW5jdGlvbiBCKGEsYil7dmFyIGM9YS5fX3ByZXNldF9zZWxlY3RbYS5fX3ByZXNldF9zZWxlY3Quc2VsZWN0ZWRJbmRleF07Yy5pbm5lckhUTUw9Yj9jLnZhbHVlKyIqIjpjLnZhbHVlfWZ1bmN0aW9uIEUoYSl7YS5sZW5ndGghPQowJiZvKGZ1bmN0aW9uKCl7RShhKX0pO2kuZWFjaChhLGZ1bmN0aW9uKGEpe2EudXBkYXRlRGlzcGxheSgpfSl9ZS5pbmplY3QoYyk7dmFyIHc9IkRlZmF1bHQiLHU7dHJ5e3U9ImxvY2FsU3RvcmFnZSJpbiB3aW5kb3cmJndpbmRvdy5sb2NhbFN0b3JhZ2UhPT1udWxsfWNhdGNoKEspe3U9ZmFsc2V9dmFyIHgsRj10cnVlLHYsQT1mYWxzZSxHPVtdLGs9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe2xvY2FsU3RvcmFnZS5zZXRJdGVtKGRvY3VtZW50LmxvY2F0aW9uLmhyZWYrIi5ndWkiLEpTT04uc3RyaW5naWZ5KGQuZ2V0U2F2ZU9iamVjdCgpKSl9ZnVuY3Rpb24gYygpe3ZhciBhPWQuZ2V0Um9vdCgpO2Eud2lkdGgrPTE7aS5kZWZlcihmdW5jdGlvbigpe2Eud2lkdGgtPTF9KX12YXIgZD10aGlzO3RoaXMuZG9tRWxlbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTt0aGlzLl9fdWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidWwiKTt0aGlzLmRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fX3VsKTsKZy5hZGRDbGFzcyh0aGlzLmRvbUVsZW1lbnQsImRnIik7dGhpcy5fX2ZvbGRlcnM9e307dGhpcy5fX2NvbnRyb2xsZXJzPVtdO3RoaXMuX19yZW1lbWJlcmVkT2JqZWN0cz1bXTt0aGlzLl9fcmVtZW1iZXJlZE9iamVjdEluZGVjZXNUb0NvbnRyb2xsZXJzPVtdO3RoaXMuX19saXN0ZW5pbmc9W107YT1hfHx7fTthPWkuZGVmYXVsdHMoYSx7YXV0b1BsYWNlOnRydWUsd2lkdGg6ay5ERUZBVUxUX1dJRFRIfSk7YT1pLmRlZmF1bHRzKGEse3Jlc2l6YWJsZTphLmF1dG9QbGFjZSxoaWRlYWJsZTphLmF1dG9QbGFjZX0pO2lmKGkuaXNVbmRlZmluZWQoYS5sb2FkKSlhLmxvYWQ9e3ByZXNldDp3fTtlbHNlIGlmKGEucHJlc2V0KWEubG9hZC5wcmVzZXQ9YS5wcmVzZXQ7aS5pc1VuZGVmaW5lZChhLnBhcmVudCkmJmEuaGlkZWFibGUmJkcucHVzaCh0aGlzKTthLnJlc2l6YWJsZT1pLmlzVW5kZWZpbmVkKGEucGFyZW50KSYmYS5yZXNpemFibGU7aWYoYS5hdXRvUGxhY2UmJmkuaXNVbmRlZmluZWQoYS5zY3JvbGxhYmxlKSlhLnNjcm9sbGFibGU9CnRydWU7dmFyIGU9dSYmbG9jYWxTdG9yYWdlLmdldEl0ZW0oZG9jdW1lbnQubG9jYXRpb24uaHJlZisiLmlzTG9jYWwiKT09PSJ0cnVlIjtPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLHtwYXJlbnQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBhLnBhcmVudH19LHNjcm9sbGFibGU6e2dldDpmdW5jdGlvbigpe3JldHVybiBhLnNjcm9sbGFibGV9fSxhdXRvUGxhY2U6e2dldDpmdW5jdGlvbigpe3JldHVybiBhLmF1dG9QbGFjZX19LHByZXNldDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGQucGFyZW50P2QuZ2V0Um9vdCgpLnByZXNldDphLmxvYWQucHJlc2V0fSxzZXQ6ZnVuY3Rpb24oYil7ZC5wYXJlbnQ/ZC5nZXRSb290KCkucHJlc2V0PWI6YS5sb2FkLnByZXNldD1iO2ZvcihiPTA7Yjx0aGlzLl9fcHJlc2V0X3NlbGVjdC5sZW5ndGg7YisrKWlmKHRoaXMuX19wcmVzZXRfc2VsZWN0W2JdLnZhbHVlPT10aGlzLnByZXNldCl0aGlzLl9fcHJlc2V0X3NlbGVjdC5zZWxlY3RlZEluZGV4PQpiO2QucmV2ZXJ0KCl9fSx3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGEud2lkdGh9LHNldDpmdW5jdGlvbihiKXthLndpZHRoPWI7RChkLGIpfX0sbmFtZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGEubmFtZX0sc2V0OmZ1bmN0aW9uKGIpe2EubmFtZT1iO2lmKG0pbS5pbm5lckhUTUw9YS5uYW1lfX0sY2xvc2VkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYS5jbG9zZWR9LHNldDpmdW5jdGlvbihiKXthLmNsb3NlZD1iO2EuY2xvc2VkP2cuYWRkQ2xhc3MoZC5fX3VsLGsuQ0xBU1NfQ0xPU0VEKTpnLnJlbW92ZUNsYXNzKGQuX191bCxrLkNMQVNTX0NMT1NFRCk7dGhpcy5vblJlc2l6ZSgpO2lmKGQuX19jbG9zZUJ1dHRvbilkLl9fY2xvc2VCdXR0b24uaW5uZXJIVE1MPWI/ay5URVhUX09QRU46ay5URVhUX0NMT1NFRH19LGxvYWQ6e2dldDpmdW5jdGlvbigpe3JldHVybiBhLmxvYWR9fSx1c2VMb2NhbFN0b3JhZ2U6e2dldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24oYSl7dSYmCigoZT1hKT9nLmJpbmQod2luZG93LCJ1bmxvYWQiLGIpOmcudW5iaW5kKHdpbmRvdywidW5sb2FkIixiKSxsb2NhbFN0b3JhZ2Uuc2V0SXRlbShkb2N1bWVudC5sb2NhdGlvbi5ocmVmKyIuaXNMb2NhbCIsYSkpfX19KTtpZihpLmlzVW5kZWZpbmVkKGEucGFyZW50KSl7YS5jbG9zZWQ9ZmFsc2U7Zy5hZGRDbGFzcyh0aGlzLmRvbUVsZW1lbnQsay5DTEFTU19NQUlOKTtnLm1ha2VTZWxlY3RhYmxlKHRoaXMuZG9tRWxlbWVudCxmYWxzZSk7aWYodSYmZSl7ZC51c2VMb2NhbFN0b3JhZ2U9dHJ1ZTt2YXIgZj1sb2NhbFN0b3JhZ2UuZ2V0SXRlbShkb2N1bWVudC5sb2NhdGlvbi5ocmVmKyIuZ3VpIik7aWYoZilhLmxvYWQ9SlNPTi5wYXJzZShmKX10aGlzLl9fY2xvc2VCdXR0b249ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7dGhpcy5fX2Nsb3NlQnV0dG9uLmlubmVySFRNTD1rLlRFWFRfQ0xPU0VEO2cuYWRkQ2xhc3ModGhpcy5fX2Nsb3NlQnV0dG9uLGsuQ0xBU1NfQ0xPU0VfQlVUVE9OKTsKdGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX19jbG9zZUJ1dHRvbik7Zy5iaW5kKHRoaXMuX19jbG9zZUJ1dHRvbiwiY2xpY2siLGZ1bmN0aW9uKCl7ZC5jbG9zZWQ9IWQuY2xvc2VkfSl9ZWxzZXtpZihhLmNsb3NlZD09PXZvaWQgMClhLmNsb3NlZD10cnVlO3ZhciBtPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGEubmFtZSk7Zy5hZGRDbGFzcyhtLCJjb250cm9sbGVyLW5hbWUiKTtmPXMoZCxtKTtnLmFkZENsYXNzKHRoaXMuX191bCxrLkNMQVNTX0NMT1NFRCk7Zy5hZGRDbGFzcyhmLCJ0aXRsZSIpO2cuYmluZChmLCJjbGljayIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpO2QuY2xvc2VkPSFkLmNsb3NlZDtyZXR1cm4gZmFsc2V9KTtpZighYS5jbG9zZWQpdGhpcy5jbG9zZWQ9ZmFsc2V9YS5hdXRvUGxhY2UmJihpLmlzVW5kZWZpbmVkKGEucGFyZW50KSYmKEYmJih2PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLGcuYWRkQ2xhc3ModiwiZGciKSxnLmFkZENsYXNzKHYsCmsuQ0xBU1NfQVVUT19QTEFDRV9DT05UQUlORVIpLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodiksRj1mYWxzZSksdi5hcHBlbmRDaGlsZCh0aGlzLmRvbUVsZW1lbnQpLGcuYWRkQ2xhc3ModGhpcy5kb21FbGVtZW50LGsuQ0xBU1NfQVVUT19QTEFDRSkpLHRoaXMucGFyZW50fHxEKGQsYS53aWR0aCkpO2cuYmluZCh3aW5kb3csInJlc2l6ZSIsZnVuY3Rpb24oKXtkLm9uUmVzaXplKCl9KTtnLmJpbmQodGhpcy5fX3VsLCJ3ZWJraXRUcmFuc2l0aW9uRW5kIixmdW5jdGlvbigpe2Qub25SZXNpemUoKX0pO2cuYmluZCh0aGlzLl9fdWwsInRyYW5zaXRpb25lbmQiLGZ1bmN0aW9uKCl7ZC5vblJlc2l6ZSgpfSk7Zy5iaW5kKHRoaXMuX191bCwib1RyYW5zaXRpb25FbmQiLGZ1bmN0aW9uKCl7ZC5vblJlc2l6ZSgpfSk7dGhpcy5vblJlc2l6ZSgpO2EucmVzaXphYmxlJiZKKHRoaXMpO2QuZ2V0Um9vdCgpO2EucGFyZW50fHxjKCl9O2sudG9nZ2xlSGlkZT1mdW5jdGlvbigpe0E9IUE7aS5lYWNoKEcsCmZ1bmN0aW9uKGEpe2EuZG9tRWxlbWVudC5zdHlsZS56SW5kZXg9QT8tOTk5Ojk5OTthLmRvbUVsZW1lbnQuc3R5bGUub3BhY2l0eT1BPzA6MX0pfTtrLkNMQVNTX0FVVE9fUExBQ0U9ImEiO2suQ0xBU1NfQVVUT19QTEFDRV9DT05UQUlORVI9ImFjIjtrLkNMQVNTX01BSU49Im1haW4iO2suQ0xBU1NfQ09OVFJPTExFUl9ST1c9ImNyIjtrLkNMQVNTX1RPT19UQUxMPSJ0YWxsZXItdGhhbi13aW5kb3ciO2suQ0xBU1NfQ0xPU0VEPSJjbG9zZWQiO2suQ0xBU1NfQ0xPU0VfQlVUVE9OPSJjbG9zZS1idXR0b24iO2suQ0xBU1NfRFJBRz0iZHJhZyI7ay5ERUZBVUxUX1dJRFRIPTI0NTtrLlRFWFRfQ0xPU0VEPSJDbG9zZSBDb250cm9scyI7ay5URVhUX09QRU49Ik9wZW4gQ29udHJvbHMiO2cuYmluZCh3aW5kb3csImtleWRvd24iLGZ1bmN0aW9uKGEpe2RvY3VtZW50LmFjdGl2ZUVsZW1lbnQudHlwZSE9PSJ0ZXh0IiYmKGEud2hpY2g9PT03Mnx8YS5rZXlDb2RlPT03MikmJmsudG9nZ2xlSGlkZSgpfSwKZmFsc2UpO2kuZXh0ZW5kKGsucHJvdG90eXBlLHthZGQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gcSh0aGlzLGEsYix7ZmFjdG9yeUFyZ3M6QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpfSl9LGFkZENvbG9yOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHEodGhpcyxhLGIse2NvbG9yOnRydWV9KX0scmVtb3ZlOmZ1bmN0aW9uKGEpe3RoaXMuX191bC5yZW1vdmVDaGlsZChhLl9fbGkpO3RoaXMuX19jb250cm9sbGVycy5zbGljZSh0aGlzLl9fY29udHJvbGxlcnMuaW5kZXhPZihhKSwxKTt2YXIgYj10aGlzO2kuZGVmZXIoZnVuY3Rpb24oKXtiLm9uUmVzaXplKCl9KX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuYXV0b1BsYWNlJiZ2LnJlbW92ZUNoaWxkKHRoaXMuZG9tRWxlbWVudCl9LGFkZEZvbGRlcjpmdW5jdGlvbihhKXtpZih0aGlzLl9fZm9sZGVyc1thXSE9PXZvaWQgMCl0aHJvdyBFcnJvcignWW91IGFscmVhZHkgaGF2ZSBhIGZvbGRlciBpbiB0aGlzIEdVSSBieSB0aGUgbmFtZSAiJysKYSsnIicpO3ZhciBiPXtuYW1lOmEscGFyZW50OnRoaXN9O2IuYXV0b1BsYWNlPXRoaXMuYXV0b1BsYWNlO2lmKHRoaXMubG9hZCYmdGhpcy5sb2FkLmZvbGRlcnMmJnRoaXMubG9hZC5mb2xkZXJzW2FdKWIuY2xvc2VkPXRoaXMubG9hZC5mb2xkZXJzW2FdLmNsb3NlZCxiLmxvYWQ9dGhpcy5sb2FkLmZvbGRlcnNbYV07Yj1uZXcgayhiKTt0aGlzLl9fZm9sZGVyc1thXT1iO2E9cyh0aGlzLGIuZG9tRWxlbWVudCk7Zy5hZGRDbGFzcyhhLCJmb2xkZXIiKTtyZXR1cm4gYn0sb3BlbjpmdW5jdGlvbigpe3RoaXMuY2xvc2VkPWZhbHNlfSxjbG9zZTpmdW5jdGlvbigpe3RoaXMuY2xvc2VkPXRydWV9LG9uUmVzaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5nZXRSb290KCk7aWYoYS5zY3JvbGxhYmxlKXt2YXIgYj1nLmdldE9mZnNldChhLl9fdWwpLnRvcCxjPTA7aS5lYWNoKGEuX191bC5jaGlsZE5vZGVzLGZ1bmN0aW9uKGIpe2EuYXV0b1BsYWNlJiZiPT09YS5fX3NhdmVfcm93fHwoYys9CmcuZ2V0SGVpZ2h0KGIpKX0pO3dpbmRvdy5pbm5lckhlaWdodC1iLTIwPGM/KGcuYWRkQ2xhc3MoYS5kb21FbGVtZW50LGsuQ0xBU1NfVE9PX1RBTEwpLGEuX191bC5zdHlsZS5oZWlnaHQ9d2luZG93LmlubmVySGVpZ2h0LWItMjArInB4Iik6KGcucmVtb3ZlQ2xhc3MoYS5kb21FbGVtZW50LGsuQ0xBU1NfVE9PX1RBTEwpLGEuX191bC5zdHlsZS5oZWlnaHQ9ImF1dG8iKX1hLl9fcmVzaXplX2hhbmRsZSYmaS5kZWZlcihmdW5jdGlvbigpe2EuX19yZXNpemVfaGFuZGxlLnN0eWxlLmhlaWdodD1hLl9fdWwub2Zmc2V0SGVpZ2h0KyJweCJ9KTtpZihhLl9fY2xvc2VCdXR0b24pYS5fX2Nsb3NlQnV0dG9uLnN0eWxlLndpZHRoPWEud2lkdGgrInB4In0scmVtZW1iZXI6ZnVuY3Rpb24oKXtpZihpLmlzVW5kZWZpbmVkKHgpKXg9bmV3IHkseC5kb21FbGVtZW50LmlubmVySFRNTD1hO2lmKHRoaXMucGFyZW50KXRocm93IEVycm9yKCJZb3UgY2FuIG9ubHkgY2FsbCByZW1lbWJlciBvbiBhIHRvcCBsZXZlbCBHVUkuIik7CnZhciBiPXRoaXM7aS5lYWNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksZnVuY3Rpb24oYSl7Yi5fX3JlbWVtYmVyZWRPYmplY3RzLmxlbmd0aD09MCYmSShiKTtiLl9fcmVtZW1iZXJlZE9iamVjdHMuaW5kZXhPZihhKT09LTEmJmIuX19yZW1lbWJlcmVkT2JqZWN0cy5wdXNoKGEpfSk7dGhpcy5hdXRvUGxhY2UmJkQodGhpcyx0aGlzLndpZHRoKX0sZ2V0Um9vdDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzO2EucGFyZW50OylhPWEucGFyZW50O3JldHVybiBhfSxnZXRTYXZlT2JqZWN0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5sb2FkO2EuY2xvc2VkPXRoaXMuY2xvc2VkO2lmKHRoaXMuX19yZW1lbWJlcmVkT2JqZWN0cy5sZW5ndGg+MCl7YS5wcmVzZXQ9dGhpcy5wcmVzZXQ7aWYoIWEucmVtZW1iZXJlZClhLnJlbWVtYmVyZWQ9e307YS5yZW1lbWJlcmVkW3RoaXMucHJlc2V0XT16KHRoaXMpfWEuZm9sZGVycz17fTtpLmVhY2godGhpcy5fX2ZvbGRlcnMsZnVuY3Rpb24oYiwKYyl7YS5mb2xkZXJzW2NdPWIuZ2V0U2F2ZU9iamVjdCgpfSk7cmV0dXJuIGF9LHNhdmU6ZnVuY3Rpb24oKXtpZighdGhpcy5sb2FkLnJlbWVtYmVyZWQpdGhpcy5sb2FkLnJlbWVtYmVyZWQ9e307dGhpcy5sb2FkLnJlbWVtYmVyZWRbdGhpcy5wcmVzZXRdPXoodGhpcyk7Qih0aGlzLGZhbHNlKX0sc2F2ZUFzOmZ1bmN0aW9uKGEpe2lmKCF0aGlzLmxvYWQucmVtZW1iZXJlZCl0aGlzLmxvYWQucmVtZW1iZXJlZD17fSx0aGlzLmxvYWQucmVtZW1iZXJlZFt3XT16KHRoaXMsdHJ1ZSk7dGhpcy5sb2FkLnJlbWVtYmVyZWRbYV09eih0aGlzKTt0aGlzLnByZXNldD1hO0ModGhpcyxhLHRydWUpfSxyZXZlcnQ6ZnVuY3Rpb24oYSl7aS5lYWNoKHRoaXMuX19jb250cm9sbGVycyxmdW5jdGlvbihiKXt0aGlzLmdldFJvb3QoKS5sb2FkLnJlbWVtYmVyZWQ/dChhfHx0aGlzLmdldFJvb3QoKSxiKTpiLnNldFZhbHVlKGIuaW5pdGlhbFZhbHVlKX0sdGhpcyk7aS5lYWNoKHRoaXMuX19mb2xkZXJzLApmdW5jdGlvbihhKXthLnJldmVydChhKX0pO2F8fEIodGhpcy5nZXRSb290KCksZmFsc2UpfSxsaXN0ZW46ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fX2xpc3RlbmluZy5sZW5ndGg9PTA7dGhpcy5fX2xpc3RlbmluZy5wdXNoKGEpO2ImJkUodGhpcy5fX2xpc3RlbmluZyl9fSk7cmV0dXJuIGt9KGRhdC51dGlscy5jc3MsJzxkaXYgaWQ9ImRnLXNhdmUiIGNsYXNzPSJkZyBkaWFsb2d1ZSI+XG5cbiAgSGVyZVwncyB0aGUgbmV3IGxvYWQgcGFyYW1ldGVyIGZvciB5b3VyIDxjb2RlPkdVSTwvY29kZT5cJ3MgY29uc3RydWN0b3I6XG5cbiAgPHRleHRhcmVhIGlkPSJkZy1uZXctY29uc3RydWN0b3IiPjwvdGV4dGFyZWE+XG5cbiAgPGRpdiBpZD0iZGctc2F2ZS1sb2NhbGx5Ij5cblxuICAgIDxpbnB1dCBpZD0iZGctbG9jYWwtc3RvcmFnZSIgdHlwZT0iY2hlY2tib3giLz4gQXV0b21hdGljYWxseSBzYXZlXG4gICAgdmFsdWVzIHRvIDxjb2RlPmxvY2FsU3RvcmFnZTwvY29kZT4gb24gZXhpdC5cblxuICAgIDxkaXYgaWQ9ImRnLWxvY2FsLWV4cGxhaW4iPlRoZSB2YWx1ZXMgc2F2ZWQgdG8gPGNvZGU+bG9jYWxTdG9yYWdlPC9jb2RlPiB3aWxsXG4gICAgICBvdmVycmlkZSB0aG9zZSBwYXNzZWQgdG8gPGNvZGU+ZGF0LkdVSTwvY29kZT5cJ3MgY29uc3RydWN0b3IuIFRoaXMgbWFrZXMgaXRcbiAgICAgIGVhc2llciB0byB3b3JrIGluY3JlbWVudGFsbHksIGJ1dCA8Y29kZT5sb2NhbFN0b3JhZ2U8L2NvZGU+IGlzIGZyYWdpbGUsXG4gICAgICBhbmQgeW91ciBmcmllbmRzIG1heSBub3Qgc2VlIHRoZSBzYW1lIHZhbHVlcyB5b3UgZG8uXG4gICAgICBcbiAgICA8L2Rpdj5cbiAgICBcbiAgPC9kaXY+XG5cbjwvZGl2PicsCiIuZGcgdWx7bGlzdC1zdHlsZTpub25lO21hcmdpbjowO3BhZGRpbmc6MDt3aWR0aDoxMDAlO2NsZWFyOmJvdGh9LmRnLmFje3Bvc2l0aW9uOmZpeGVkO3RvcDowO2xlZnQ6MDtyaWdodDowO2hlaWdodDowO3otaW5kZXg6MH0uZGc6bm90KC5hYykgLm1haW57b3ZlcmZsb3c6aGlkZGVufS5kZy5tYWluey13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IDAuMXMgbGluZWFyOy1vLXRyYW5zaXRpb246b3BhY2l0eSAwLjFzIGxpbmVhcjstbW96LXRyYW5zaXRpb246b3BhY2l0eSAwLjFzIGxpbmVhcjt0cmFuc2l0aW9uOm9wYWNpdHkgMC4xcyBsaW5lYXJ9LmRnLm1haW4udGFsbGVyLXRoYW4td2luZG93e292ZXJmbG93LXk6YXV0b30uZGcubWFpbi50YWxsZXItdGhhbi13aW5kb3cgLmNsb3NlLWJ1dHRvbntvcGFjaXR5OjE7bWFyZ2luLXRvcDotMXB4O2JvcmRlci10b3A6MXB4IHNvbGlkICMyYzJjMmN9LmRnLm1haW4gdWwuY2xvc2VkIC5jbG9zZS1idXR0b257b3BhY2l0eToxICFpbXBvcnRhbnR9LmRnLm1haW46aG92ZXIgLmNsb3NlLWJ1dHRvbiwuZGcubWFpbiAuY2xvc2UtYnV0dG9uLmRyYWd7b3BhY2l0eToxfS5kZy5tYWluIC5jbG9zZS1idXR0b257LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgMC4xcyBsaW5lYXI7LW8tdHJhbnNpdGlvbjpvcGFjaXR5IDAuMXMgbGluZWFyOy1tb3otdHJhbnNpdGlvbjpvcGFjaXR5IDAuMXMgbGluZWFyO3RyYW5zaXRpb246b3BhY2l0eSAwLjFzIGxpbmVhcjtib3JkZXI6MDtwb3NpdGlvbjphYnNvbHV0ZTtsaW5lLWhlaWdodDoxOXB4O2hlaWdodDoyMHB4O2N1cnNvcjpwb2ludGVyO3RleHQtYWxpZ246Y2VudGVyO2JhY2tncm91bmQtY29sb3I6IzAwMH0uZGcubWFpbiAuY2xvc2UtYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6IzExMX0uZGcuYXtmbG9hdDpyaWdodDttYXJnaW4tcmlnaHQ6MTVweDtvdmVyZmxvdy14OmhpZGRlbn0uZGcuYS5oYXMtc2F2ZSB1bHttYXJnaW4tdG9wOjI3cHh9LmRnLmEuaGFzLXNhdmUgdWwuY2xvc2Vke21hcmdpbi10b3A6MH0uZGcuYSAuc2F2ZS1yb3d7cG9zaXRpb246Zml4ZWQ7dG9wOjA7ei1pbmRleDoxMDAyfS5kZyBsaXstd2Via2l0LXRyYW5zaXRpb246aGVpZ2h0IDAuMXMgZWFzZS1vdXQ7LW8tdHJhbnNpdGlvbjpoZWlnaHQgMC4xcyBlYXNlLW91dDstbW96LXRyYW5zaXRpb246aGVpZ2h0IDAuMXMgZWFzZS1vdXQ7dHJhbnNpdGlvbjpoZWlnaHQgMC4xcyBlYXNlLW91dH0uZGcgbGk6bm90KC5mb2xkZXIpe2N1cnNvcjphdXRvO2hlaWdodDoyN3B4O2xpbmUtaGVpZ2h0OjI3cHg7b3ZlcmZsb3c6aGlkZGVuO3BhZGRpbmc6MCA0cHggMCA1cHh9LmRnIGxpLmZvbGRlcntwYWRkaW5nOjA7Ym9yZGVyLWxlZnQ6NHB4IHNvbGlkIHJnYmEoMCwwLDAsMCl9LmRnIGxpLnRpdGxle2N1cnNvcjpwb2ludGVyO21hcmdpbi1sZWZ0Oi00cHh9LmRnIC5jbG9zZWQgbGk6bm90KC50aXRsZSksLmRnIC5jbG9zZWQgdWwgbGksLmRnIC5jbG9zZWQgdWwgbGkgPiAqe2hlaWdodDowO292ZXJmbG93OmhpZGRlbjtib3JkZXI6MH0uZGcgLmNye2NsZWFyOmJvdGg7cGFkZGluZy1sZWZ0OjNweDtoZWlnaHQ6MjdweH0uZGcgLnByb3BlcnR5LW5hbWV7Y3Vyc29yOmRlZmF1bHQ7ZmxvYXQ6bGVmdDtjbGVhcjpsZWZ0O3dpZHRoOjQwJTtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc30uZGcgLmN7ZmxvYXQ6bGVmdDt3aWR0aDo2MCV9LmRnIC5jIGlucHV0W3R5cGU9dGV4dF17Ym9yZGVyOjA7bWFyZ2luLXRvcDo0cHg7cGFkZGluZzozcHg7d2lkdGg6MTAwJTtmbG9hdDpyaWdodH0uZGcgLmhhcy1zbGlkZXIgaW5wdXRbdHlwZT10ZXh0XXt3aWR0aDozMCU7bWFyZ2luLWxlZnQ6MH0uZGcgLnNsaWRlcntmbG9hdDpsZWZ0O3dpZHRoOjY2JTttYXJnaW4tbGVmdDotNXB4O21hcmdpbi1yaWdodDowO2hlaWdodDoxOXB4O21hcmdpbi10b3A6NHB4fS5kZyAuc2xpZGVyLWZne2hlaWdodDoxMDAlfS5kZyAuYyBpbnB1dFt0eXBlPWNoZWNrYm94XXttYXJnaW4tdG9wOjlweH0uZGcgLmMgc2VsZWN0e21hcmdpbi10b3A6NXB4fS5kZyAuY3IuZnVuY3Rpb24sLmRnIC5jci5mdW5jdGlvbiAucHJvcGVydHktbmFtZSwuZGcgLmNyLmZ1bmN0aW9uICosLmRnIC5jci5ib29sZWFuLC5kZyAuY3IuYm9vbGVhbiAqe2N1cnNvcjpwb2ludGVyfS5kZyAuc2VsZWN0b3J7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO21hcmdpbi1sZWZ0Oi05cHg7bWFyZ2luLXRvcDoyM3B4O3otaW5kZXg6MTB9LmRnIC5jOmhvdmVyIC5zZWxlY3RvciwuZGcgLnNlbGVjdG9yLmRyYWd7ZGlzcGxheTpibG9ja30uZGcgbGkuc2F2ZS1yb3d7cGFkZGluZzowfS5kZyBsaS5zYXZlLXJvdyAuYnV0dG9ue2Rpc3BsYXk6aW5saW5lLWJsb2NrO3BhZGRpbmc6MHB4IDZweH0uZGcuZGlhbG9ndWV7YmFja2dyb3VuZC1jb2xvcjojMjIyO3dpZHRoOjQ2MHB4O3BhZGRpbmc6MTVweDtmb250LXNpemU6MTNweDtsaW5lLWhlaWdodDoxNXB4fSNkZy1uZXctY29uc3RydWN0b3J7cGFkZGluZzoxMHB4O2NvbG9yOiMyMjI7Zm9udC1mYW1pbHk6TW9uYWNvLCBtb25vc3BhY2U7Zm9udC1zaXplOjEwcHg7Ym9yZGVyOjA7cmVzaXplOm5vbmU7Ym94LXNoYWRvdzppbnNldCAxcHggMXB4IDFweCAjODg4O3dvcmQtd3JhcDpicmVhay13b3JkO21hcmdpbjoxMnB4IDA7ZGlzcGxheTpibG9jazt3aWR0aDo0NDBweDtvdmVyZmxvdy15OnNjcm9sbDtoZWlnaHQ6MTAwcHg7cG9zaXRpb246cmVsYXRpdmV9I2RnLWxvY2FsLWV4cGxhaW57ZGlzcGxheTpub25lO2ZvbnQtc2l6ZToxMXB4O2xpbmUtaGVpZ2h0OjE3cHg7Ym9yZGVyLXJhZGl1czozcHg7YmFja2dyb3VuZC1jb2xvcjojMzMzO3BhZGRpbmc6OHB4O21hcmdpbi10b3A6MTBweH0jZGctbG9jYWwtZXhwbGFpbiBjb2Rle2ZvbnQtc2l6ZToxMHB4fSNkYXQtZ3VpLXNhdmUtbG9jYWxseXtkaXNwbGF5Om5vbmV9LmRne2NvbG9yOiNlZWU7Zm9udDoxMXB4ICdMdWNpZGEgR3JhbmRlJywgc2Fucy1zZXJpZjt0ZXh0LXNoYWRvdzowIC0xcHggMCAjMTExfS5kZy5tYWluOjotd2Via2l0LXNjcm9sbGJhcnt3aWR0aDo1cHg7YmFja2dyb3VuZDojMWExYTFhfS5kZy5tYWluOjotd2Via2l0LXNjcm9sbGJhci1jb3JuZXJ7aGVpZ2h0OjA7ZGlzcGxheTpub25lfS5kZy5tYWluOjotd2Via2l0LXNjcm9sbGJhci10aHVtYntib3JkZXItcmFkaXVzOjVweDtiYWNrZ3JvdW5kOiM2NzY3Njd9LmRnIGxpOm5vdCguZm9sZGVyKXtiYWNrZ3JvdW5kOiMxYTFhMWE7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgIzJjMmMyY30uZGcgbGkuc2F2ZS1yb3d7bGluZS1oZWlnaHQ6MjVweDtiYWNrZ3JvdW5kOiNkYWQ1Y2I7Ym9yZGVyOjB9LmRnIGxpLnNhdmUtcm93IHNlbGVjdHttYXJnaW4tbGVmdDo1cHg7d2lkdGg6MTA4cHh9LmRnIGxpLnNhdmUtcm93IC5idXR0b257bWFyZ2luLWxlZnQ6NXB4O21hcmdpbi10b3A6MXB4O2JvcmRlci1yYWRpdXM6MnB4O2ZvbnQtc2l6ZTo5cHg7bGluZS1oZWlnaHQ6N3B4O3BhZGRpbmc6NHB4IDRweCA1cHggNHB4O2JhY2tncm91bmQ6I2M1YmRhZDtjb2xvcjojZmZmO3RleHQtc2hhZG93OjAgMXB4IDAgI2IwYTU4Zjtib3gtc2hhZG93OjAgLTFweCAwICNiMGE1OGY7Y3Vyc29yOnBvaW50ZXJ9LmRnIGxpLnNhdmUtcm93IC5idXR0b24uZ2VhcnN7YmFja2dyb3VuZDojYzViZGFkIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQU5DQVlBQUFCLzlaUTdBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQVFKSlJFRlVlTnBpWUtBVS9QLy9Qd0dJQy9BcENBQmlCU0FXK0k4QUNsQWNnS3hRNFQ5aG9NQUVVcnh4MlFTR042K2VnRFgrL3ZXVDRlN044MkFNWW9QQXgvZXZ3V29Zb1NZYkFDWDJzN0t4Q3h6Y3NlekRoM2V2Rm9ERUJZVEVFcXljZ2dXQXpBOUF1VVNRUWdlWVBhOWZQdjYvWVdtL0FjeDVJUGI3dHkvZncrUVpibHc2N3ZEczhSMFlIeVFoZ09ieCt5QUprQnFtRzVkUFBEaDFhUE9HUi9ldWdXMEc0dmxJb1RJZnlGY0ErUWVraGhISmhQZFF4YmlBSWd1TUJUUVpyUEQ3MTA4TTZyb1dZREZRaUlBQXY2QW93LzFiRndYZ2lzK2YyTFVBeW53b0lhTmN6OFhOeDNEbDdNRUpVREdRcHg5Z3RROFlDdWVCK0QyNk9FQ0FBUURhZHQ3ZTQ2RDQyUUFBQUFCSlJVNUVya0pnZ2c9PSkgMnB4IDFweCBuby1yZXBlYXQ7aGVpZ2h0OjdweDt3aWR0aDo4cHh9LmRnIGxpLnNhdmUtcm93IC5idXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojYmFiMTllO2JveC1zaGFkb3c6MCAtMXB4IDAgI2IwYTU4Zn0uZGcgbGkuZm9sZGVye2JvcmRlci1ib3R0b206MH0uZGcgbGkudGl0bGV7cGFkZGluZy1sZWZ0OjE2cHg7YmFja2dyb3VuZDojMDAwIHVybChkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhCUUFGQUpFQUFQLy8vL1B6OC8vLy8vLy8veUg1QkFFQUFBSUFMQUFBQUFBRkFBVUFBQUlJbEkraEtnRnhvQ2dBT3c9PSkgNnB4IDEwcHggbm8tcmVwZWF0O2N1cnNvcjpwb2ludGVyO2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHJnYmEoMjU1LDI1NSwyNTUsMC4yKX0uZGcgLmNsb3NlZCBsaS50aXRsZXtiYWNrZ3JvdW5kLWltYWdlOnVybChkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhCUUFGQUpFQUFQLy8vL1B6OC8vLy8vLy8veUg1QkFFQUFBSUFMQUFBQUFBRkFBVUFBQUlJbEdJV3FNQ2JXQUVBT3c9PSl9LmRnIC5jci5ib29sZWFue2JvcmRlci1sZWZ0OjNweCBzb2xpZCAjODA2Nzg3fS5kZyAuY3IuZnVuY3Rpb257Ym9yZGVyLWxlZnQ6M3B4IHNvbGlkICNlNjFkNWZ9LmRnIC5jci5udW1iZXJ7Ym9yZGVyLWxlZnQ6M3B4IHNvbGlkICMyZmExZDZ9LmRnIC5jci5udW1iZXIgaW5wdXRbdHlwZT10ZXh0XXtjb2xvcjojMmZhMWQ2fS5kZyAuY3Iuc3RyaW5ne2JvcmRlci1sZWZ0OjNweCBzb2xpZCAjMWVkMzZmfS5kZyAuY3Iuc3RyaW5nIGlucHV0W3R5cGU9dGV4dF17Y29sb3I6IzFlZDM2Zn0uZGcgLmNyLmZ1bmN0aW9uOmhvdmVyLC5kZyAuY3IuYm9vbGVhbjpob3ZlcntiYWNrZ3JvdW5kOiMxMTF9LmRnIC5jIGlucHV0W3R5cGU9dGV4dF17YmFja2dyb3VuZDojMzAzMDMwO291dGxpbmU6bm9uZX0uZGcgLmMgaW5wdXRbdHlwZT10ZXh0XTpob3ZlcntiYWNrZ3JvdW5kOiMzYzNjM2N9LmRnIC5jIGlucHV0W3R5cGU9dGV4dF06Zm9jdXN7YmFja2dyb3VuZDojNDk0OTQ5O2NvbG9yOiNmZmZ9LmRnIC5jIC5zbGlkZXJ7YmFja2dyb3VuZDojMzAzMDMwO2N1cnNvcjpldy1yZXNpemV9LmRnIC5jIC5zbGlkZXItZmd7YmFja2dyb3VuZDojMmZhMWQ2fS5kZyAuYyAuc2xpZGVyOmhvdmVye2JhY2tncm91bmQ6IzNjM2MzY30uZGcgLmMgLnNsaWRlcjpob3ZlciAuc2xpZGVyLWZne2JhY2tncm91bmQ6IzQ0YWJkYX1cbiIsCmRhdC5jb250cm9sbGVycy5mYWN0b3J5PWZ1bmN0aW9uKGUsYSxjLGQsZixiLG4pe3JldHVybiBmdW5jdGlvbihoLGosbSxsKXt2YXIgbz1oW2pdO2lmKG4uaXNBcnJheShtKXx8bi5pc09iamVjdChtKSlyZXR1cm4gbmV3IGUoaCxqLG0pO2lmKG4uaXNOdW1iZXIobykpcmV0dXJuIG4uaXNOdW1iZXIobSkmJm4uaXNOdW1iZXIobCk/bmV3IGMoaCxqLG0sbCk6bmV3IGEoaCxqLHttaW46bSxtYXg6bH0pO2lmKG4uaXNTdHJpbmcobykpcmV0dXJuIG5ldyBkKGgsaik7aWYobi5pc0Z1bmN0aW9uKG8pKXJldHVybiBuZXcgZihoLGosIiIpO2lmKG4uaXNCb29sZWFuKG8pKXJldHVybiBuZXcgYihoLGopfX0oZGF0LmNvbnRyb2xsZXJzLk9wdGlvbkNvbnRyb2xsZXIsZGF0LmNvbnRyb2xsZXJzLk51bWJlckNvbnRyb2xsZXJCb3gsZGF0LmNvbnRyb2xsZXJzLk51bWJlckNvbnRyb2xsZXJTbGlkZXIsZGF0LmNvbnRyb2xsZXJzLlN0cmluZ0NvbnRyb2xsZXI9ZnVuY3Rpb24oZSxhLGMpe3ZhciBkPQpmdW5jdGlvbihjLGIpe2Z1bmN0aW9uIGUoKXtoLnNldFZhbHVlKGguX19pbnB1dC52YWx1ZSl9ZC5zdXBlcmNsYXNzLmNhbGwodGhpcyxjLGIpO3ZhciBoPXRoaXM7dGhpcy5fX2lucHV0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7dGhpcy5fX2lucHV0LnNldEF0dHJpYnV0ZSgidHlwZSIsInRleHQiKTthLmJpbmQodGhpcy5fX2lucHV0LCJrZXl1cCIsZSk7YS5iaW5kKHRoaXMuX19pbnB1dCwiY2hhbmdlIixlKTthLmJpbmQodGhpcy5fX2lucHV0LCJibHVyIixmdW5jdGlvbigpe2guX19vbkZpbmlzaENoYW5nZSYmaC5fX29uRmluaXNoQ2hhbmdlLmNhbGwoaCxoLmdldFZhbHVlKCkpfSk7YS5iaW5kKHRoaXMuX19pbnB1dCwia2V5ZG93biIsZnVuY3Rpb24oYSl7YS5rZXlDb2RlPT09MTMmJnRoaXMuYmx1cigpfSk7dGhpcy51cGRhdGVEaXNwbGF5KCk7dGhpcy5kb21FbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX19pbnB1dCl9O2Quc3VwZXJjbGFzcz1lO2MuZXh0ZW5kKGQucHJvdG90eXBlLAplLnByb3RvdHlwZSx7dXBkYXRlRGlzcGxheTpmdW5jdGlvbigpe2lmKCFhLmlzQWN0aXZlKHRoaXMuX19pbnB1dCkpdGhpcy5fX2lucHV0LnZhbHVlPXRoaXMuZ2V0VmFsdWUoKTtyZXR1cm4gZC5zdXBlcmNsYXNzLnByb3RvdHlwZS51cGRhdGVEaXNwbGF5LmNhbGwodGhpcyl9fSk7cmV0dXJuIGR9KGRhdC5jb250cm9sbGVycy5Db250cm9sbGVyLGRhdC5kb20uZG9tLGRhdC51dGlscy5jb21tb24pLGRhdC5jb250cm9sbGVycy5GdW5jdGlvbkNvbnRyb2xsZXIsZGF0LmNvbnRyb2xsZXJzLkJvb2xlYW5Db250cm9sbGVyLGRhdC51dGlscy5jb21tb24pLGRhdC5jb250cm9sbGVycy5Db250cm9sbGVyLGRhdC5jb250cm9sbGVycy5Cb29sZWFuQ29udHJvbGxlcixkYXQuY29udHJvbGxlcnMuRnVuY3Rpb25Db250cm9sbGVyLGRhdC5jb250cm9sbGVycy5OdW1iZXJDb250cm9sbGVyQm94LGRhdC5jb250cm9sbGVycy5OdW1iZXJDb250cm9sbGVyU2xpZGVyLGRhdC5jb250cm9sbGVycy5PcHRpb25Db250cm9sbGVyLApkYXQuY29udHJvbGxlcnMuQ29sb3JDb250cm9sbGVyPWZ1bmN0aW9uKGUsYSxjLGQsZil7ZnVuY3Rpb24gYihhLGIsYyxkKXthLnN0eWxlLmJhY2tncm91bmQ9IiI7Zi5lYWNoKGosZnVuY3Rpb24oZSl7YS5zdHlsZS5jc3NUZXh0Kz0iYmFja2dyb3VuZDogIitlKyJsaW5lYXItZ3JhZGllbnQoIitiKyIsICIrYysiIDAlLCAiK2QrIiAxMDAlKTsgIn0pfWZ1bmN0aW9uIG4oYSl7YS5zdHlsZS5iYWNrZ3JvdW5kPSIiO2Euc3R5bGUuY3NzVGV4dCs9ImJhY2tncm91bmQ6IC1tb3otbGluZWFyLWdyYWRpZW50KHRvcCwgICNmZjAwMDAgMCUsICNmZjAwZmYgMTclLCAjMDAwMGZmIDM0JSwgIzAwZmZmZiA1MCUsICMwMGZmMDAgNjclLCAjZmZmZjAwIDg0JSwgI2ZmMDAwMCAxMDAlKTsiO2Euc3R5bGUuY3NzVGV4dCs9ImJhY2tncm91bmQ6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwgICNmZjAwMDAgMCUsI2ZmMDBmZiAxNyUsIzAwMDBmZiAzNCUsIzAwZmZmZiA1MCUsIzAwZmYwMCA2NyUsI2ZmZmYwMCA4NCUsI2ZmMDAwMCAxMDAlKTsiOwphLnN0eWxlLmNzc1RleHQrPSJiYWNrZ3JvdW5kOiAtby1saW5lYXItZ3JhZGllbnQodG9wLCAgI2ZmMDAwMCAwJSwjZmYwMGZmIDE3JSwjMDAwMGZmIDM0JSwjMDBmZmZmIDUwJSwjMDBmZjAwIDY3JSwjZmZmZjAwIDg0JSwjZmYwMDAwIDEwMCUpOyI7YS5zdHlsZS5jc3NUZXh0Kz0iYmFja2dyb3VuZDogLW1zLWxpbmVhci1ncmFkaWVudCh0b3AsICAjZmYwMDAwIDAlLCNmZjAwZmYgMTclLCMwMDAwZmYgMzQlLCMwMGZmZmYgNTAlLCMwMGZmMDAgNjclLCNmZmZmMDAgODQlLCNmZjAwMDAgMTAwJSk7IjthLnN0eWxlLmNzc1RleHQrPSJiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG9wLCAgI2ZmMDAwMCAwJSwjZmYwMGZmIDE3JSwjMDAwMGZmIDM0JSwjMDBmZmZmIDUwJSwjMDBmZjAwIDY3JSwjZmZmZjAwIDg0JSwjZmYwMDAwIDEwMCUpOyJ9dmFyIGg9ZnVuY3Rpb24oZSxsKXtmdW5jdGlvbiBvKGIpe3EoYik7YS5iaW5kKHdpbmRvdywibW91c2Vtb3ZlIixxKTthLmJpbmQod2luZG93LAoibW91c2V1cCIsail9ZnVuY3Rpb24gaigpe2EudW5iaW5kKHdpbmRvdywibW91c2Vtb3ZlIixxKTthLnVuYmluZCh3aW5kb3csIm1vdXNldXAiLGopfWZ1bmN0aW9uIGcoKXt2YXIgYT1kKHRoaXMudmFsdWUpO2EhPT1mYWxzZT8ocC5fX2NvbG9yLl9fc3RhdGU9YSxwLnNldFZhbHVlKHAuX19jb2xvci50b09yaWdpbmFsKCkpKTp0aGlzLnZhbHVlPXAuX19jb2xvci50b1N0cmluZygpfWZ1bmN0aW9uIGkoKXthLnVuYmluZCh3aW5kb3csIm1vdXNlbW92ZSIscyk7YS51bmJpbmQod2luZG93LCJtb3VzZXVwIixpKX1mdW5jdGlvbiBxKGIpe2IucHJldmVudERlZmF1bHQoKTt2YXIgYz1hLmdldFdpZHRoKHAuX19zYXR1cmF0aW9uX2ZpZWxkKSxkPWEuZ2V0T2Zmc2V0KHAuX19zYXR1cmF0aW9uX2ZpZWxkKSxlPShiLmNsaWVudFgtZC5sZWZ0K2RvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCkvYyxiPTEtKGIuY2xpZW50WS1kLnRvcCtkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCkvYztiPjE/Yj0KMTpiPDAmJihiPTApO2U+MT9lPTE6ZTwwJiYoZT0wKTtwLl9fY29sb3Iudj1iO3AuX19jb2xvci5zPWU7cC5zZXRWYWx1ZShwLl9fY29sb3IudG9PcmlnaW5hbCgpKTtyZXR1cm4gZmFsc2V9ZnVuY3Rpb24gcyhiKXtiLnByZXZlbnREZWZhdWx0KCk7dmFyIGM9YS5nZXRIZWlnaHQocC5fX2h1ZV9maWVsZCksZD1hLmdldE9mZnNldChwLl9faHVlX2ZpZWxkKSxiPTEtKGIuY2xpZW50WS1kLnRvcCtkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCkvYztiPjE/Yj0xOmI8MCYmKGI9MCk7cC5fX2NvbG9yLmg9YiozNjA7cC5zZXRWYWx1ZShwLl9fY29sb3IudG9PcmlnaW5hbCgpKTtyZXR1cm4gZmFsc2V9aC5zdXBlcmNsYXNzLmNhbGwodGhpcyxlLGwpO3RoaXMuX19jb2xvcj1uZXcgYyh0aGlzLmdldFZhbHVlKCkpO3RoaXMuX190ZW1wPW5ldyBjKDApO3ZhciBwPXRoaXM7dGhpcy5kb21FbGVtZW50PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO2EubWFrZVNlbGVjdGFibGUodGhpcy5kb21FbGVtZW50LApmYWxzZSk7dGhpcy5fX3NlbGVjdG9yPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO3RoaXMuX19zZWxlY3Rvci5jbGFzc05hbWU9InNlbGVjdG9yIjt0aGlzLl9fc2F0dXJhdGlvbl9maWVsZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTt0aGlzLl9fc2F0dXJhdGlvbl9maWVsZC5jbGFzc05hbWU9InNhdHVyYXRpb24tZmllbGQiO3RoaXMuX19maWVsZF9rbm9iPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO3RoaXMuX19maWVsZF9rbm9iLmNsYXNzTmFtZT0iZmllbGQta25vYiI7dGhpcy5fX2ZpZWxkX2tub2JfYm9yZGVyPSIycHggc29saWQgIjt0aGlzLl9faHVlX2tub2I9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7dGhpcy5fX2h1ZV9rbm9iLmNsYXNzTmFtZT0iaHVlLWtub2IiO3RoaXMuX19odWVfZmllbGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7dGhpcy5fX2h1ZV9maWVsZC5jbGFzc05hbWU9Imh1ZS1maWVsZCI7dGhpcy5fX2lucHV0PQpkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpO3RoaXMuX19pbnB1dC50eXBlPSJ0ZXh0Ijt0aGlzLl9faW5wdXRfdGV4dFNoYWRvdz0iMCAxcHggMXB4ICI7YS5iaW5kKHRoaXMuX19pbnB1dCwia2V5ZG93biIsZnVuY3Rpb24oYSl7YS5rZXlDb2RlPT09MTMmJmcuY2FsbCh0aGlzKX0pO2EuYmluZCh0aGlzLl9faW5wdXQsImJsdXIiLGcpO2EuYmluZCh0aGlzLl9fc2VsZWN0b3IsIm1vdXNlZG93biIsZnVuY3Rpb24oKXthLmFkZENsYXNzKHRoaXMsImRyYWciKS5iaW5kKHdpbmRvdywibW91c2V1cCIsZnVuY3Rpb24oKXthLnJlbW92ZUNsYXNzKHAuX19zZWxlY3RvciwiZHJhZyIpfSl9KTt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTtmLmV4dGVuZCh0aGlzLl9fc2VsZWN0b3Iuc3R5bGUse3dpZHRoOiIxMjJweCIsaGVpZ2h0OiIxMDJweCIscGFkZGluZzoiM3B4IixiYWNrZ3JvdW5kQ29sb3I6IiMyMjIiLGJveFNoYWRvdzoiMHB4IDFweCAzcHggcmdiYSgwLDAsMCwwLjMpIn0pOwpmLmV4dGVuZCh0aGlzLl9fZmllbGRfa25vYi5zdHlsZSx7cG9zaXRpb246ImFic29sdXRlIix3aWR0aDoiMTJweCIsaGVpZ2h0OiIxMnB4Iixib3JkZXI6dGhpcy5fX2ZpZWxkX2tub2JfYm9yZGVyKyh0aGlzLl9fY29sb3IudjwwLjU/IiNmZmYiOiIjMDAwIiksYm94U2hhZG93OiIwcHggMXB4IDNweCByZ2JhKDAsMCwwLDAuNSkiLGJvcmRlclJhZGl1czoiMTJweCIsekluZGV4OjF9KTtmLmV4dGVuZCh0aGlzLl9faHVlX2tub2Iuc3R5bGUse3Bvc2l0aW9uOiJhYnNvbHV0ZSIsd2lkdGg6IjE1cHgiLGhlaWdodDoiMnB4Iixib3JkZXJSaWdodDoiNHB4IHNvbGlkICNmZmYiLHpJbmRleDoxfSk7Zi5leHRlbmQodGhpcy5fX3NhdHVyYXRpb25fZmllbGQuc3R5bGUse3dpZHRoOiIxMDBweCIsaGVpZ2h0OiIxMDBweCIsYm9yZGVyOiIxcHggc29saWQgIzU1NSIsbWFyZ2luUmlnaHQ6IjNweCIsZGlzcGxheToiaW5saW5lLWJsb2NrIixjdXJzb3I6InBvaW50ZXIifSk7Zi5leHRlbmQodC5zdHlsZSwKe3dpZHRoOiIxMDAlIixoZWlnaHQ6IjEwMCUiLGJhY2tncm91bmQ6Im5vbmUifSk7Yih0LCJ0b3AiLCJyZ2JhKDAsMCwwLDApIiwiIzAwMCIpO2YuZXh0ZW5kKHRoaXMuX19odWVfZmllbGQuc3R5bGUse3dpZHRoOiIxNXB4IixoZWlnaHQ6IjEwMHB4IixkaXNwbGF5OiJpbmxpbmUtYmxvY2siLGJvcmRlcjoiMXB4IHNvbGlkICM1NTUiLGN1cnNvcjoibnMtcmVzaXplIn0pO24odGhpcy5fX2h1ZV9maWVsZCk7Zi5leHRlbmQodGhpcy5fX2lucHV0LnN0eWxlLHtvdXRsaW5lOiJub25lIix0ZXh0QWxpZ246ImNlbnRlciIsY29sb3I6IiNmZmYiLGJvcmRlcjowLGZvbnRXZWlnaHQ6ImJvbGQiLHRleHRTaGFkb3c6dGhpcy5fX2lucHV0X3RleHRTaGFkb3crInJnYmEoMCwwLDAsMC43KSJ9KTthLmJpbmQodGhpcy5fX3NhdHVyYXRpb25fZmllbGQsIm1vdXNlZG93biIsbyk7YS5iaW5kKHRoaXMuX19maWVsZF9rbm9iLCJtb3VzZWRvd24iLG8pO2EuYmluZCh0aGlzLl9faHVlX2ZpZWxkLCJtb3VzZWRvd24iLApmdW5jdGlvbihiKXtzKGIpO2EuYmluZCh3aW5kb3csIm1vdXNlbW92ZSIscyk7YS5iaW5kKHdpbmRvdywibW91c2V1cCIsaSl9KTt0aGlzLl9fc2F0dXJhdGlvbl9maWVsZC5hcHBlbmRDaGlsZCh0KTt0aGlzLl9fc2VsZWN0b3IuYXBwZW5kQ2hpbGQodGhpcy5fX2ZpZWxkX2tub2IpO3RoaXMuX19zZWxlY3Rvci5hcHBlbmRDaGlsZCh0aGlzLl9fc2F0dXJhdGlvbl9maWVsZCk7dGhpcy5fX3NlbGVjdG9yLmFwcGVuZENoaWxkKHRoaXMuX19odWVfZmllbGQpO3RoaXMuX19odWVfZmllbGQuYXBwZW5kQ2hpbGQodGhpcy5fX2h1ZV9rbm9iKTt0aGlzLmRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fX2lucHV0KTt0aGlzLmRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fX3NlbGVjdG9yKTt0aGlzLnVwZGF0ZURpc3BsYXkoKX07aC5zdXBlcmNsYXNzPWU7Zi5leHRlbmQoaC5wcm90b3R5cGUsZS5wcm90b3R5cGUse3VwZGF0ZURpc3BsYXk6ZnVuY3Rpb24oKXt2YXIgYT1kKHRoaXMuZ2V0VmFsdWUoKSk7CmlmKGEhPT1mYWxzZSl7dmFyIGU9ZmFsc2U7Zi5lYWNoKGMuQ09NUE9ORU5UUyxmdW5jdGlvbihiKXtpZighZi5pc1VuZGVmaW5lZChhW2JdKSYmIWYuaXNVbmRlZmluZWQodGhpcy5fX2NvbG9yLl9fc3RhdGVbYl0pJiZhW2JdIT09dGhpcy5fX2NvbG9yLl9fc3RhdGVbYl0pcmV0dXJuIGU9dHJ1ZSx7fX0sdGhpcyk7ZSYmZi5leHRlbmQodGhpcy5fX2NvbG9yLl9fc3RhdGUsYSl9Zi5leHRlbmQodGhpcy5fX3RlbXAuX19zdGF0ZSx0aGlzLl9fY29sb3IuX19zdGF0ZSk7dGhpcy5fX3RlbXAuYT0xO3ZhciBoPXRoaXMuX19jb2xvci52PDAuNXx8dGhpcy5fX2NvbG9yLnM+MC41PzI1NTowLGo9MjU1LWg7Zi5leHRlbmQodGhpcy5fX2ZpZWxkX2tub2Iuc3R5bGUse21hcmdpbkxlZnQ6MTAwKnRoaXMuX19jb2xvci5zLTcrInB4IixtYXJnaW5Ub3A6MTAwKigxLXRoaXMuX19jb2xvci52KS03KyJweCIsYmFja2dyb3VuZENvbG9yOnRoaXMuX190ZW1wLnRvU3RyaW5nKCksYm9yZGVyOnRoaXMuX19maWVsZF9rbm9iX2JvcmRlcisKInJnYigiK2grIiwiK2grIiwiK2grIikifSk7dGhpcy5fX2h1ZV9rbm9iLnN0eWxlLm1hcmdpblRvcD0oMS10aGlzLl9fY29sb3IuaC8zNjApKjEwMCsicHgiO3RoaXMuX190ZW1wLnM9MTt0aGlzLl9fdGVtcC52PTE7Yih0aGlzLl9fc2F0dXJhdGlvbl9maWVsZCwibGVmdCIsIiNmZmYiLHRoaXMuX190ZW1wLnRvU3RyaW5nKCkpO2YuZXh0ZW5kKHRoaXMuX19pbnB1dC5zdHlsZSx7YmFja2dyb3VuZENvbG9yOnRoaXMuX19pbnB1dC52YWx1ZT10aGlzLl9fY29sb3IudG9TdHJpbmcoKSxjb2xvcjoicmdiKCIraCsiLCIraCsiLCIraCsiKSIsdGV4dFNoYWRvdzp0aGlzLl9faW5wdXRfdGV4dFNoYWRvdysicmdiYSgiK2orIiwiK2orIiwiK2orIiwuNykifSl9fSk7dmFyIGo9WyItbW96LSIsIi1vLSIsIi13ZWJraXQtIiwiLW1zLSIsIiJdO3JldHVybiBofShkYXQuY29udHJvbGxlcnMuQ29udHJvbGxlcixkYXQuZG9tLmRvbSxkYXQuY29sb3IuQ29sb3I9ZnVuY3Rpb24oZSxhLGMsZCl7ZnVuY3Rpb24gZihhLApiLGMpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2dldDpmdW5jdGlvbigpe2lmKHRoaXMuX19zdGF0ZS5zcGFjZT09PSJSR0IiKXJldHVybiB0aGlzLl9fc3RhdGVbYl07bih0aGlzLGIsYyk7cmV0dXJuIHRoaXMuX19zdGF0ZVtiXX0sc2V0OmZ1bmN0aW9uKGEpe2lmKHRoaXMuX19zdGF0ZS5zcGFjZSE9PSJSR0IiKW4odGhpcyxiLGMpLHRoaXMuX19zdGF0ZS5zcGFjZT0iUkdCIjt0aGlzLl9fc3RhdGVbYl09YX19KX1mdW5jdGlvbiBiKGEsYil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Z2V0OmZ1bmN0aW9uKCl7aWYodGhpcy5fX3N0YXRlLnNwYWNlPT09IkhTViIpcmV0dXJuIHRoaXMuX19zdGF0ZVtiXTtoKHRoaXMpO3JldHVybiB0aGlzLl9fc3RhdGVbYl19LHNldDpmdW5jdGlvbihhKXtpZih0aGlzLl9fc3RhdGUuc3BhY2UhPT0iSFNWIiloKHRoaXMpLHRoaXMuX19zdGF0ZS5zcGFjZT0iSFNWIjt0aGlzLl9fc3RhdGVbYl09YX19KX1mdW5jdGlvbiBuKGIsYyxlKXtpZihiLl9fc3RhdGUuc3BhY2U9PT0KIkhFWCIpYi5fX3N0YXRlW2NdPWEuY29tcG9uZW50X2Zyb21faGV4KGIuX19zdGF0ZS5oZXgsZSk7ZWxzZSBpZihiLl9fc3RhdGUuc3BhY2U9PT0iSFNWIilkLmV4dGVuZChiLl9fc3RhdGUsYS5oc3ZfdG9fcmdiKGIuX19zdGF0ZS5oLGIuX19zdGF0ZS5zLGIuX19zdGF0ZS52KSk7ZWxzZSB0aHJvdyJDb3JydXB0ZWQgY29sb3Igc3RhdGUiO31mdW5jdGlvbiBoKGIpe3ZhciBjPWEucmdiX3RvX2hzdihiLnIsYi5nLGIuYik7ZC5leHRlbmQoYi5fX3N0YXRlLHtzOmMucyx2OmMudn0pO2lmKGQuaXNOYU4oYy5oKSl7aWYoZC5pc1VuZGVmaW5lZChiLl9fc3RhdGUuaCkpYi5fX3N0YXRlLmg9MH1lbHNlIGIuX19zdGF0ZS5oPWMuaH12YXIgaj1mdW5jdGlvbigpe3RoaXMuX19zdGF0ZT1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZih0aGlzLl9fc3RhdGU9PT1mYWxzZSl0aHJvdyJGYWlsZWQgdG8gaW50ZXJwcmV0IGNvbG9yIGFyZ3VtZW50cyI7dGhpcy5fX3N0YXRlLmE9dGhpcy5fX3N0YXRlLmF8fAoxfTtqLkNPTVBPTkVOVFM9InIsZyxiLGgscyx2LGhleCxhIi5zcGxpdCgiLCIpO2QuZXh0ZW5kKGoucHJvdG90eXBlLHt0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiBjKHRoaXMpfSx0b09yaWdpbmFsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX19zdGF0ZS5jb252ZXJzaW9uLndyaXRlKHRoaXMpfX0pO2Yoai5wcm90b3R5cGUsInIiLDIpO2Yoai5wcm90b3R5cGUsImciLDEpO2Yoai5wcm90b3R5cGUsImIiLDApO2Ioai5wcm90b3R5cGUsImgiKTtiKGoucHJvdG90eXBlLCJzIik7YihqLnByb3RvdHlwZSwidiIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShqLnByb3RvdHlwZSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9fc3RhdGUuYX0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuX19zdGF0ZS5hPWF9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGoucHJvdG90eXBlLCJoZXgiLHtnZXQ6ZnVuY3Rpb24oKXtpZighdGhpcy5fX3N0YXRlLnNwYWNlIT09IkhFWCIpdGhpcy5fX3N0YXRlLmhleD0KYS5yZ2JfdG9faGV4KHRoaXMucix0aGlzLmcsdGhpcy5iKTtyZXR1cm4gdGhpcy5fX3N0YXRlLmhleH0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuX19zdGF0ZS5zcGFjZT0iSEVYIjt0aGlzLl9fc3RhdGUuaGV4PWF9fSk7cmV0dXJuIGp9KGRhdC5jb2xvci5pbnRlcnByZXQsZGF0LmNvbG9yLm1hdGg9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm57aHN2X3RvX3JnYjpmdW5jdGlvbihhLGMsZCl7dmFyIGU9YS82MC1NYXRoLmZsb29yKGEvNjApLGI9ZCooMS1jKSxuPWQqKDEtZSpjKSxjPWQqKDEtKDEtZSkqYyksYT1bW2QsYyxiXSxbbixkLGJdLFtiLGQsY10sW2IsbixkXSxbYyxiLGRdLFtkLGIsbl1dW01hdGguZmxvb3IoYS82MCklNl07cmV0dXJue3I6YVswXSoyNTUsZzphWzFdKjI1NSxiOmFbMl0qMjU1fX0scmdiX3RvX2hzdjpmdW5jdGlvbihhLGMsZCl7dmFyIGU9TWF0aC5taW4oYSxjLGQpLGI9TWF0aC5tYXgoYSxjLGQpLGU9Yi1lO2lmKGI9PTApcmV0dXJue2g6TmFOLHM6MCx2OjB9OwphPWE9PWI/KGMtZCkvZTpjPT1iPzIrKGQtYSkvZTo0KyhhLWMpL2U7YS89NjthPDAmJihhKz0xKTtyZXR1cm57aDphKjM2MCxzOmUvYix2OmIvMjU1fX0scmdiX3RvX2hleDpmdW5jdGlvbihhLGMsZCl7YT10aGlzLmhleF93aXRoX2NvbXBvbmVudCgwLDIsYSk7YT10aGlzLmhleF93aXRoX2NvbXBvbmVudChhLDEsYyk7cmV0dXJuIGE9dGhpcy5oZXhfd2l0aF9jb21wb25lbnQoYSwwLGQpfSxjb21wb25lbnRfZnJvbV9oZXg6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYT4+Yyo4JjI1NX0saGV4X3dpdGhfY29tcG9uZW50OmZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4gZDw8KGU9Yyo4KXxhJn4oMjU1PDxlKX19fSgpLGRhdC5jb2xvci50b1N0cmluZyxkYXQudXRpbHMuY29tbW9uKSxkYXQuY29sb3IuaW50ZXJwcmV0LGRhdC51dGlscy5jb21tb24pLGRhdC51dGlscy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU9ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8CndpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKGUpe3dpbmRvdy5zZXRUaW1lb3V0KGUsMUUzLzYwKX19KCksZGF0LmRvbS5DZW50ZXJlZERpdj1mdW5jdGlvbihlLGEpe3ZhciBjPWZ1bmN0aW9uKCl7dGhpcy5iYWNrZ3JvdW5kRWxlbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTthLmV4dGVuZCh0aGlzLmJhY2tncm91bmRFbGVtZW50LnN0eWxlLHtiYWNrZ3JvdW5kQ29sb3I6InJnYmEoMCwwLDAsMC44KSIsdG9wOjAsbGVmdDowLGRpc3BsYXk6Im5vbmUiLHpJbmRleDoiMTAwMCIsb3BhY2l0eTowLFdlYmtpdFRyYW5zaXRpb246Im9wYWNpdHkgMC4ycyBsaW5lYXIifSk7ZS5tYWtlRnVsbHNjcmVlbih0aGlzLmJhY2tncm91bmRFbGVtZW50KTt0aGlzLmJhY2tncm91bmRFbGVtZW50LnN0eWxlLnBvc2l0aW9uPSJmaXhlZCI7dGhpcy5kb21FbGVtZW50PQpkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTthLmV4dGVuZCh0aGlzLmRvbUVsZW1lbnQuc3R5bGUse3Bvc2l0aW9uOiJmaXhlZCIsZGlzcGxheToibm9uZSIsekluZGV4OiIxMDAxIixvcGFjaXR5OjAsV2Via2l0VHJhbnNpdGlvbjoiLXdlYmtpdC10cmFuc2Zvcm0gMC4ycyBlYXNlLW91dCwgb3BhY2l0eSAwLjJzIGxpbmVhciJ9KTtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuYmFja2dyb3VuZEVsZW1lbnQpO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5kb21FbGVtZW50KTt2YXIgYz10aGlzO2UuYmluZCh0aGlzLmJhY2tncm91bmRFbGVtZW50LCJjbGljayIsZnVuY3Rpb24oKXtjLmhpZGUoKX0pfTtjLnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKCl7dmFyIGM9dGhpczt0aGlzLmJhY2tncm91bmRFbGVtZW50LnN0eWxlLmRpc3BsYXk9ImJsb2NrIjt0aGlzLmRvbUVsZW1lbnQuc3R5bGUuZGlzcGxheT0iYmxvY2siO3RoaXMuZG9tRWxlbWVudC5zdHlsZS5vcGFjaXR5PQowO3RoaXMuZG9tRWxlbWVudC5zdHlsZS53ZWJraXRUcmFuc2Zvcm09InNjYWxlKDEuMSkiO3RoaXMubGF5b3V0KCk7YS5kZWZlcihmdW5jdGlvbigpe2MuYmFja2dyb3VuZEVsZW1lbnQuc3R5bGUub3BhY2l0eT0xO2MuZG9tRWxlbWVudC5zdHlsZS5vcGFjaXR5PTE7Yy5kb21FbGVtZW50LnN0eWxlLndlYmtpdFRyYW5zZm9ybT0ic2NhbGUoMSkifSl9O2MucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGM9ZnVuY3Rpb24oKXthLmRvbUVsZW1lbnQuc3R5bGUuZGlzcGxheT0ibm9uZSI7YS5iYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS5kaXNwbGF5PSJub25lIjtlLnVuYmluZChhLmRvbUVsZW1lbnQsIndlYmtpdFRyYW5zaXRpb25FbmQiLGMpO2UudW5iaW5kKGEuZG9tRWxlbWVudCwidHJhbnNpdGlvbmVuZCIsYyk7ZS51bmJpbmQoYS5kb21FbGVtZW50LCJvVHJhbnNpdGlvbkVuZCIsYyl9O2UuYmluZCh0aGlzLmRvbUVsZW1lbnQsIndlYmtpdFRyYW5zaXRpb25FbmQiLApjKTtlLmJpbmQodGhpcy5kb21FbGVtZW50LCJ0cmFuc2l0aW9uZW5kIixjKTtlLmJpbmQodGhpcy5kb21FbGVtZW50LCJvVHJhbnNpdGlvbkVuZCIsYyk7dGhpcy5iYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS5vcGFjaXR5PTA7dGhpcy5kb21FbGVtZW50LnN0eWxlLm9wYWNpdHk9MDt0aGlzLmRvbUVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtPSJzY2FsZSgxLjEpIn07Yy5wcm90b3R5cGUubGF5b3V0PWZ1bmN0aW9uKCl7dGhpcy5kb21FbGVtZW50LnN0eWxlLmxlZnQ9d2luZG93LmlubmVyV2lkdGgvMi1lLmdldFdpZHRoKHRoaXMuZG9tRWxlbWVudCkvMisicHgiO3RoaXMuZG9tRWxlbWVudC5zdHlsZS50b3A9d2luZG93LmlubmVySGVpZ2h0LzItZS5nZXRIZWlnaHQodGhpcy5kb21FbGVtZW50KS8yKyJweCJ9O3JldHVybiBjfShkYXQuZG9tLmRvbSxkYXQudXRpbHMuY29tbW9uKSxkYXQuZG9tLmRvbSxkYXQudXRpbHMuY29tbW9uKTs7LyoqDQogKiBBIGNsYXNzIHRvIHBhcnNlIGNvbG9yIHZhbHVlcw0KICogQGF1dGhvciBTdG95YW4gU3RlZmFub3YgPHNzdG9vQGdtYWlsLmNvbT4NCiAqIEBsaW5rICAgaHR0cDovL3d3dy5waHBpZWQuY29tL3JnYi1jb2xvci1wYXJzZXItaW4tamF2YXNjcmlwdC8NCiAqIEBsaWNlbnNlIFVzZSBpdCBpZiB5b3UgbGlrZSBpdA0KICovDQpmdW5jdGlvbiBSR0JDb2xvcihjb2xvcl9zdHJpbmcpDQp7DQogICAgdGhpcy5vayA9IGZhbHNlOw0KDQogICAgLy8gc3RyaXAgYW55IGxlYWRpbmcgIw0KICAgIGlmIChjb2xvcl9zdHJpbmcuY2hhckF0KDApID09ICcjJykgeyAvLyByZW1vdmUgIyBpZiBhbnkNCiAgICAgICAgY29sb3Jfc3RyaW5nID0gY29sb3Jfc3RyaW5nLnN1YnN0cigxLDYpOw0KICAgIH0NCg0KICAgIGNvbG9yX3N0cmluZyA9IGNvbG9yX3N0cmluZy5yZXBsYWNlKC8gL2csJycpOw0KICAgIGNvbG9yX3N0cmluZyA9IGNvbG9yX3N0cmluZy50b0xvd2VyQ2FzZSgpOw0KDQogICAgLy8gYmVmb3JlIGdldHRpbmcgaW50byByZWdleHBzLCB0cnkgc2ltcGxlIG1hdGNoZXMNCiAgICAvLyBhbmQgb3ZlcndyaXRlIHRoZSBpbnB1dA0KICAgIHZhciBzaW1wbGVfY29sb3JzID0gew0KICAgICAgICBhbGljZWJsdWU6ICdmMGY4ZmYnLA0KICAgICAgICBhbnRpcXVld2hpdGU6ICdmYWViZDcnLA0KICAgICAgICBhcXVhOiAnMDBmZmZmJywNCiAgICAgICAgYXF1YW1hcmluZTogJzdmZmZkNCcsDQogICAgICAgIGF6dXJlOiAnZjBmZmZmJywNCiAgICAgICAgYmVpZ2U6ICdmNWY1ZGMnLA0KICAgICAgICBiaXNxdWU6ICdmZmU0YzQnLA0KICAgICAgICBibGFjazogJzAwMDAwMCcsDQogICAgICAgIGJsYW5jaGVkYWxtb25kOiAnZmZlYmNkJywNCiAgICAgICAgYmx1ZTogJzAwMDBmZicsDQogICAgICAgIGJsdWV2aW9sZXQ6ICc4YTJiZTInLA0KICAgICAgICBicm93bjogJ2E1MmEyYScsDQogICAgICAgIGJ1cmx5d29vZDogJ2RlYjg4NycsDQogICAgICAgIGNhZGV0Ymx1ZTogJzVmOWVhMCcsDQogICAgICAgIGNoYXJ0cmV1c2U6ICc3ZmZmMDAnLA0KICAgICAgICBjaG9jb2xhdGU6ICdkMjY5MWUnLA0KICAgICAgICBjb3JhbDogJ2ZmN2Y1MCcsDQogICAgICAgIGNvcm5mbG93ZXJibHVlOiAnNjQ5NWVkJywNCiAgICAgICAgY29ybnNpbGs6ICdmZmY4ZGMnLA0KICAgICAgICBjcmltc29uOiAnZGMxNDNjJywNCiAgICAgICAgY3lhbjogJzAwZmZmZicsDQogICAgICAgIGRhcmtibHVlOiAnMDAwMDhiJywNCiAgICAgICAgZGFya2N5YW46ICcwMDhiOGInLA0KICAgICAgICBkYXJrZ29sZGVucm9kOiAnYjg4NjBiJywNCiAgICAgICAgZGFya2dyYXk6ICdhOWE5YTknLA0KICAgICAgICBkYXJrZ3JlZW46ICcwMDY0MDAnLA0KICAgICAgICBkYXJra2hha2k6ICdiZGI3NmInLA0KICAgICAgICBkYXJrbWFnZW50YTogJzhiMDA4YicsDQogICAgICAgIGRhcmtvbGl2ZWdyZWVuOiAnNTU2YjJmJywNCiAgICAgICAgZGFya29yYW5nZTogJ2ZmOGMwMCcsDQogICAgICAgIGRhcmtvcmNoaWQ6ICc5OTMyY2MnLA0KICAgICAgICBkYXJrcmVkOiAnOGIwMDAwJywNCiAgICAgICAgZGFya3NhbG1vbjogJ2U5OTY3YScsDQogICAgICAgIGRhcmtzZWFncmVlbjogJzhmYmM4ZicsDQogICAgICAgIGRhcmtzbGF0ZWJsdWU6ICc0ODNkOGInLA0KICAgICAgICBkYXJrc2xhdGVncmF5OiAnMmY0ZjRmJywNCiAgICAgICAgZGFya3R1cnF1b2lzZTogJzAwY2VkMScsDQogICAgICAgIGRhcmt2aW9sZXQ6ICc5NDAwZDMnLA0KICAgICAgICBkZWVwcGluazogJ2ZmMTQ5MycsDQogICAgICAgIGRlZXBza3libHVlOiAnMDBiZmZmJywNCiAgICAgICAgZGltZ3JheTogJzY5Njk2OScsDQogICAgICAgIGRvZGdlcmJsdWU6ICcxZTkwZmYnLA0KICAgICAgICBmZWxkc3BhcjogJ2QxOTI3NScsDQogICAgICAgIGZpcmVicmljazogJ2IyMjIyMicsDQogICAgICAgIGZsb3JhbHdoaXRlOiAnZmZmYWYwJywNCiAgICAgICAgZm9yZXN0Z3JlZW46ICcyMjhiMjInLA0KICAgICAgICBmdWNoc2lhOiAnZmYwMGZmJywNCiAgICAgICAgZ2FpbnNib3JvOiAnZGNkY2RjJywNCiAgICAgICAgZ2hvc3R3aGl0ZTogJ2Y4ZjhmZicsDQogICAgICAgIGdvbGQ6ICdmZmQ3MDAnLA0KICAgICAgICBnb2xkZW5yb2Q6ICdkYWE1MjAnLA0KICAgICAgICBncmF5OiAnODA4MDgwJywNCiAgICAgICAgZ3JlZW46ICcwMDgwMDAnLA0KICAgICAgICBncmVlbnllbGxvdzogJ2FkZmYyZicsDQogICAgICAgIGhvbmV5ZGV3OiAnZjBmZmYwJywNCiAgICAgICAgaG90cGluazogJ2ZmNjliNCcsDQogICAgICAgIGluZGlhbnJlZCA6ICdjZDVjNWMnLA0KICAgICAgICBpbmRpZ28gOiAnNGIwMDgyJywNCiAgICAgICAgaXZvcnk6ICdmZmZmZjAnLA0KICAgICAgICBraGFraTogJ2YwZTY4YycsDQogICAgICAgIGxhdmVuZGVyOiAnZTZlNmZhJywNCiAgICAgICAgbGF2ZW5kZXJibHVzaDogJ2ZmZjBmNScsDQogICAgICAgIGxhd25ncmVlbjogJzdjZmMwMCcsDQogICAgICAgIGxlbW9uY2hpZmZvbjogJ2ZmZmFjZCcsDQogICAgICAgIGxpZ2h0Ymx1ZTogJ2FkZDhlNicsDQogICAgICAgIGxpZ2h0Y29yYWw6ICdmMDgwODAnLA0KICAgICAgICBsaWdodGN5YW46ICdlMGZmZmYnLA0KICAgICAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogJ2ZhZmFkMicsDQogICAgICAgIGxpZ2h0Z3JleTogJ2QzZDNkMycsDQogICAgICAgIGxpZ2h0Z3JlZW46ICc5MGVlOTAnLA0KICAgICAgICBsaWdodHBpbms6ICdmZmI2YzEnLA0KICAgICAgICBsaWdodHNhbG1vbjogJ2ZmYTA3YScsDQogICAgICAgIGxpZ2h0c2VhZ3JlZW46ICcyMGIyYWEnLA0KICAgICAgICBsaWdodHNreWJsdWU6ICc4N2NlZmEnLA0KICAgICAgICBsaWdodHNsYXRlYmx1ZTogJzg0NzBmZicsDQogICAgICAgIGxpZ2h0c2xhdGVncmF5OiAnNzc4ODk5JywNCiAgICAgICAgbGlnaHRzdGVlbGJsdWU6ICdiMGM0ZGUnLA0KICAgICAgICBsaWdodHllbGxvdzogJ2ZmZmZlMCcsDQogICAgICAgIGxpbWU6ICcwMGZmMDAnLA0KICAgICAgICBsaW1lZ3JlZW46ICczMmNkMzInLA0KICAgICAgICBsaW5lbjogJ2ZhZjBlNicsDQogICAgICAgIG1hZ2VudGE6ICdmZjAwZmYnLA0KICAgICAgICBtYXJvb246ICc4MDAwMDAnLA0KICAgICAgICBtZWRpdW1hcXVhbWFyaW5lOiAnNjZjZGFhJywNCiAgICAgICAgbWVkaXVtYmx1ZTogJzAwMDBjZCcsDQogICAgICAgIG1lZGl1bW9yY2hpZDogJ2JhNTVkMycsDQogICAgICAgIG1lZGl1bXB1cnBsZTogJzkzNzBkOCcsDQogICAgICAgIG1lZGl1bXNlYWdyZWVuOiAnM2NiMzcxJywNCiAgICAgICAgbWVkaXVtc2xhdGVibHVlOiAnN2I2OGVlJywNCiAgICAgICAgbWVkaXVtc3ByaW5nZ3JlZW46ICcwMGZhOWEnLA0KICAgICAgICBtZWRpdW10dXJxdW9pc2U6ICc0OGQxY2MnLA0KICAgICAgICBtZWRpdW12aW9sZXRyZWQ6ICdjNzE1ODUnLA0KICAgICAgICBtaWRuaWdodGJsdWU6ICcxOTE5NzAnLA0KICAgICAgICBtaW50Y3JlYW06ICdmNWZmZmEnLA0KICAgICAgICBtaXN0eXJvc2U6ICdmZmU0ZTEnLA0KICAgICAgICBtb2NjYXNpbjogJ2ZmZTRiNScsDQogICAgICAgIG5hdmFqb3doaXRlOiAnZmZkZWFkJywNCiAgICAgICAgbmF2eTogJzAwMDA4MCcsDQogICAgICAgIG9sZGxhY2U6ICdmZGY1ZTYnLA0KICAgICAgICBvbGl2ZTogJzgwODAwMCcsDQogICAgICAgIG9saXZlZHJhYjogJzZiOGUyMycsDQogICAgICAgIG9yYW5nZTogJ2ZmYTUwMCcsDQogICAgICAgIG9yYW5nZXJlZDogJ2ZmNDUwMCcsDQogICAgICAgIG9yY2hpZDogJ2RhNzBkNicsDQogICAgICAgIHBhbGVnb2xkZW5yb2Q6ICdlZWU4YWEnLA0KICAgICAgICBwYWxlZ3JlZW46ICc5OGZiOTgnLA0KICAgICAgICBwYWxldHVycXVvaXNlOiAnYWZlZWVlJywNCiAgICAgICAgcGFsZXZpb2xldHJlZDogJ2Q4NzA5MycsDQogICAgICAgIHBhcGF5YXdoaXA6ICdmZmVmZDUnLA0KICAgICAgICBwZWFjaHB1ZmY6ICdmZmRhYjknLA0KICAgICAgICBwZXJ1OiAnY2Q4NTNmJywNCiAgICAgICAgcGluazogJ2ZmYzBjYicsDQogICAgICAgIHBsdW06ICdkZGEwZGQnLA0KICAgICAgICBwb3dkZXJibHVlOiAnYjBlMGU2JywNCiAgICAgICAgcHVycGxlOiAnODAwMDgwJywNCiAgICAgICAgcmVkOiAnZmYwMDAwJywNCiAgICAgICAgcm9zeWJyb3duOiAnYmM4ZjhmJywNCiAgICAgICAgcm95YWxibHVlOiAnNDE2OWUxJywNCiAgICAgICAgc2FkZGxlYnJvd246ICc4YjQ1MTMnLA0KICAgICAgICBzYWxtb246ICdmYTgwNzInLA0KICAgICAgICBzYW5keWJyb3duOiAnZjRhNDYwJywNCiAgICAgICAgc2VhZ3JlZW46ICcyZThiNTcnLA0KICAgICAgICBzZWFzaGVsbDogJ2ZmZjVlZScsDQogICAgICAgIHNpZW5uYTogJ2EwNTIyZCcsDQogICAgICAgIHNpbHZlcjogJ2MwYzBjMCcsDQogICAgICAgIHNreWJsdWU6ICc4N2NlZWInLA0KICAgICAgICBzbGF0ZWJsdWU6ICc2YTVhY2QnLA0KICAgICAgICBzbGF0ZWdyYXk6ICc3MDgwOTAnLA0KICAgICAgICBzbm93OiAnZmZmYWZhJywNCiAgICAgICAgc3ByaW5nZ3JlZW46ICcwMGZmN2YnLA0KICAgICAgICBzdGVlbGJsdWU6ICc0NjgyYjQnLA0KICAgICAgICB0YW46ICdkMmI0OGMnLA0KICAgICAgICB0ZWFsOiAnMDA4MDgwJywNCiAgICAgICAgdGhpc3RsZTogJ2Q4YmZkOCcsDQogICAgICAgIHRvbWF0bzogJ2ZmNjM0NycsDQogICAgICAgIHR1cnF1b2lzZTogJzQwZTBkMCcsDQogICAgICAgIHZpb2xldDogJ2VlODJlZScsDQogICAgICAgIHZpb2xldHJlZDogJ2QwMjA5MCcsDQogICAgICAgIHdoZWF0OiAnZjVkZWIzJywNCiAgICAgICAgd2hpdGU6ICdmZmZmZmYnLA0KICAgICAgICB3aGl0ZXNtb2tlOiAnZjVmNWY1JywNCiAgICAgICAgeWVsbG93OiAnZmZmZjAwJywNCiAgICAgICAgeWVsbG93Z3JlZW46ICc5YWNkMzInDQogICAgfTsNCiAgICBmb3IgKHZhciBrZXkgaW4gc2ltcGxlX2NvbG9ycykgew0KICAgICAgICBpZiAoY29sb3Jfc3RyaW5nID09IGtleSkgew0KICAgICAgICAgICAgY29sb3Jfc3RyaW5nID0gc2ltcGxlX2NvbG9yc1trZXldOw0KICAgICAgICB9DQogICAgfQ0KICAgIC8vIGVtZCBvZiBzaW1wbGUgdHlwZS1pbiBjb2xvcnMNCg0KICAgIC8vIGFycmF5IG9mIGNvbG9yIGRlZmluaXRpb24gb2JqZWN0cw0KICAgIHZhciBjb2xvcl9kZWZzID0gWw0KICAgICAgICB7DQogICAgICAgICAgICByZTogL15yZ2JcKChcZHsxLDN9KSxccyooXGR7MSwzfSksXHMqKFxkezEsM30pXCkkLywNCiAgICAgICAgICAgIGV4YW1wbGU6IFsncmdiKDEyMywgMjM0LCA0NSknLCAncmdiKDI1NSwyMzQsMjQ1KSddLA0KICAgICAgICAgICAgcHJvY2VzczogZnVuY3Rpb24gKGJpdHMpew0KICAgICAgICAgICAgICAgIHJldHVybiBbDQogICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGJpdHNbMV0pLA0KICAgICAgICAgICAgICAgICAgICBwYXJzZUludChiaXRzWzJdKSwNCiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1szXSkNCiAgICAgICAgICAgICAgICBdOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICByZTogL14oXHd7Mn0pKFx3ezJ9KShcd3syfSkkLywNCiAgICAgICAgICAgIGV4YW1wbGU6IFsnIzAwZmYwMCcsICczMzY2OTknXSwNCiAgICAgICAgICAgIHByb2Nlc3M6IGZ1bmN0aW9uIChiaXRzKXsNCiAgICAgICAgICAgICAgICByZXR1cm4gWw0KICAgICAgICAgICAgICAgICAgICBwYXJzZUludChiaXRzWzFdLCAxNiksDQogICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGJpdHNbMl0sIDE2KSwNCiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1szXSwgMTYpDQogICAgICAgICAgICAgICAgXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgcmU6IC9eKFx3ezF9KShcd3sxfSkoXHd7MX0pJC8sDQogICAgICAgICAgICBleGFtcGxlOiBbJyNmYjAnLCAnZjBmJ10sDQogICAgICAgICAgICBwcm9jZXNzOiBmdW5jdGlvbiAoYml0cyl7DQogICAgICAgICAgICAgICAgcmV0dXJuIFsNCiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1sxXSArIGJpdHNbMV0sIDE2KSwNCiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1syXSArIGJpdHNbMl0sIDE2KSwNCiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYml0c1szXSArIGJpdHNbM10sIDE2KQ0KICAgICAgICAgICAgICAgIF07DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICBdOw0KDQogICAgLy8gc2VhcmNoIHRocm91Z2ggdGhlIGRlZmluaXRpb25zIHRvIGZpbmQgYSBtYXRjaA0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sb3JfZGVmcy5sZW5ndGg7IGkrKykgew0KICAgICAgICB2YXIgcmUgPSBjb2xvcl9kZWZzW2ldLnJlOw0KICAgICAgICB2YXIgcHJvY2Vzc29yID0gY29sb3JfZGVmc1tpXS5wcm9jZXNzOw0KICAgICAgICB2YXIgYml0cyA9IHJlLmV4ZWMoY29sb3Jfc3RyaW5nKTsNCiAgICAgICAgaWYgKGJpdHMpIHsNCiAgICAgICAgICAgIGNoYW5uZWxzID0gcHJvY2Vzc29yKGJpdHMpOw0KICAgICAgICAgICAgdGhpcy5yID0gY2hhbm5lbHNbMF07DQogICAgICAgICAgICB0aGlzLmcgPSBjaGFubmVsc1sxXTsNCiAgICAgICAgICAgIHRoaXMuYiA9IGNoYW5uZWxzWzJdOw0KICAgICAgICAgICAgdGhpcy5vayA9IHRydWU7DQogICAgICAgIH0NCg0KICAgIH0NCg0KICAgIC8vIHZhbGlkYXRlL2NsZWFudXAgdmFsdWVzDQogICAgdGhpcy5yID0gKHRoaXMuciA8IDAgfHwgaXNOYU4odGhpcy5yKSkgPyAwIDogKCh0aGlzLnIgPiAyNTUpID8gMjU1IDogdGhpcy5yKTsNCiAgICB0aGlzLmcgPSAodGhpcy5nIDwgMCB8fCBpc05hTih0aGlzLmcpKSA/IDAgOiAoKHRoaXMuZyA+IDI1NSkgPyAyNTUgOiB0aGlzLmcpOw0KICAgIHRoaXMuYiA9ICh0aGlzLmIgPCAwIHx8IGlzTmFOKHRoaXMuYikpID8gMCA6ICgodGhpcy5iID4gMjU1KSA/IDI1NSA6IHRoaXMuYik7DQoNCiAgICAvLyBzb21lIGdldHRlcnMNCiAgICB0aGlzLnRvUkdCID0gZnVuY3Rpb24gKCkgew0KICAgICAgICByZXR1cm4gJ3JnYignICsgdGhpcy5yICsgJywgJyArIHRoaXMuZyArICcsICcgKyB0aGlzLmIgKyAnKSc7DQogICAgfQ0KICAgIHRoaXMudG9IZXggPSBmdW5jdGlvbiAoKSB7DQogICAgICAgIHZhciByID0gdGhpcy5yLnRvU3RyaW5nKDE2KTsNCiAgICAgICAgdmFyIGcgPSB0aGlzLmcudG9TdHJpbmcoMTYpOw0KICAgICAgICB2YXIgYiA9IHRoaXMuYi50b1N0cmluZygxNik7DQogICAgICAgIGlmIChyLmxlbmd0aCA9PSAxKSByID0gJzAnICsgcjsNCiAgICAgICAgaWYgKGcubGVuZ3RoID09IDEpIGcgPSAnMCcgKyBnOw0KICAgICAgICBpZiAoYi5sZW5ndGggPT0gMSkgYiA9ICcwJyArIGI7DQogICAgICAgIHJldHVybiAnIycgKyByICsgZyArIGI7DQogICAgfQ0KDQogICAgLy8gaGVscA0KICAgIHRoaXMuZ2V0SGVscFhNTCA9IGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICB2YXIgZXhhbXBsZXMgPSBuZXcgQXJyYXkoKTsNCiAgICAgICAgLy8gYWRkIHJlZ2V4cHMNCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xvcl9kZWZzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICB2YXIgZXhhbXBsZSA9IGNvbG9yX2RlZnNbaV0uZXhhbXBsZTsNCiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZXhhbXBsZS5sZW5ndGg7IGorKykgew0KICAgICAgICAgICAgICAgIGV4YW1wbGVzW2V4YW1wbGVzLmxlbmd0aF0gPSBleGFtcGxlW2pdOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIC8vIGFkZCB0eXBlLWluIGNvbG9ycw0KICAgICAgICBmb3IgKHZhciBzYyBpbiBzaW1wbGVfY29sb3JzKSB7DQogICAgICAgICAgICBleGFtcGxlc1tleGFtcGxlcy5sZW5ndGhdID0gc2M7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgeG1sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTsNCiAgICAgICAgeG1sLnNldEF0dHJpYnV0ZSgnaWQnLCAncmdiY29sb3ItZXhhbXBsZXMnKTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleGFtcGxlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICB2YXIgbGlzdF9pdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsNCiAgICAgICAgICAgICAgICB2YXIgbGlzdF9jb2xvciA9IG5ldyBSR0JDb2xvcihleGFtcGxlc1tpXSk7DQogICAgICAgICAgICAgICAgdmFyIGV4YW1wbGVfZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7DQogICAgICAgICAgICAgICAgZXhhbXBsZV9kaXYuc3R5bGUuY3NzVGV4dCA9DQogICAgICAgICAgICAgICAgICAgICAgICAnbWFyZ2luOiAzcHg7ICcNCiAgICAgICAgICAgICAgICAgICAgICAgICsgJ2JvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyAnDQogICAgICAgICAgICAgICAgICAgICAgICArICdiYWNrZ3JvdW5kOicgKyBsaXN0X2NvbG9yLnRvSGV4KCkgKyAnOyAnDQogICAgICAgICAgICAgICAgICAgICAgICArICdjb2xvcjonICsgbGlzdF9jb2xvci50b0hleCgpDQogICAgICAgICAgICAgICAgOw0KICAgICAgICAgICAgICAgIGV4YW1wbGVfZGl2LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCd0ZXN0JykpOw0KICAgICAgICAgICAgICAgIHZhciBsaXN0X2l0ZW1fdmFsdWUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgNCiAgICAgICAgICAgICAgICAgICAgJyAnICsgZXhhbXBsZXNbaV0gKyAnIC0+ICcgKyBsaXN0X2NvbG9yLnRvUkdCKCkgKyAnIC0+ICcgKyBsaXN0X2NvbG9yLnRvSGV4KCkNCiAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgICAgIGxpc3RfaXRlbS5hcHBlbmRDaGlsZChleGFtcGxlX2Rpdik7DQogICAgICAgICAgICAgICAgbGlzdF9pdGVtLmFwcGVuZENoaWxkKGxpc3RfaXRlbV92YWx1ZSk7DQogICAgICAgICAgICAgICAgeG1sLmFwcGVuZENoaWxkKGxpc3RfaXRlbSk7DQoNCiAgICAgICAgICAgIH0gY2F0Y2goZSl7fQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiB4bWw7DQoNCiAgICB9DQoNCn0NCg0KOy8vICAgICBVbmRlcnNjb3JlLmpzIDEuMy4zCi8vICAgICAoYykgMjAwOS0yMDEyIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBJbmMuCi8vICAgICBVbmRlcnNjb3JlIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KLy8gICAgIFBvcnRpb25zIG9mIFVuZGVyc2NvcmUgYXJlIGluc3BpcmVkIG9yIGJvcnJvd2VkIGZyb20gUHJvdG90eXBlLAovLyAgICAgT2xpdmVyIFN0ZWVsZSdzIEZ1bmN0aW9uYWwsIGFuZCBKb2huIFJlc2lnJ3MgTWljcm8tVGVtcGxhdGluZy4KLy8gICAgIEZvciBhbGwgZGV0YWlscyBhbmQgZG9jdW1lbnRhdGlvbjoKLy8gICAgIGh0dHA6Ly9kb2N1bWVudGNsb3VkLmdpdGh1Yi5jb20vdW5kZXJzY29yZQoKKGZ1bmN0aW9uKCkgewoKICAvLyBCYXNlbGluZSBzZXR1cAogIC8vIC0tLS0tLS0tLS0tLS0tCgogIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZ2xvYmFsYCBvbiB0aGUgc2VydmVyLgogIHZhciByb290ID0gdGhpczsKCiAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBfYCB2YXJpYWJsZS4KICB2YXIgcHJldmlvdXNVbmRlcnNjb3JlID0gcm9vdC5fOwoKICAvLyBFc3RhYmxpc2ggdGhlIG9iamVjdCB0aGF0IGdldHMgcmV0dXJuZWQgdG8gYnJlYWsgb3V0IG9mIGEgbG9vcCBpdGVyYXRpb24uCiAgdmFyIGJyZWFrZXIgPSB7fTsKCiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjoKICB2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSwgT2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBGdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7CgogIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLgogIHZhciBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSwKICAgICAgdW5zaGlmdCAgICAgICAgICA9IEFycmF5UHJvdG8udW5zaGlmdCwKICAgICAgdG9TdHJpbmcgICAgICAgICA9IE9ialByb3RvLnRvU3RyaW5nLAogICAgICBoYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7CgogIC8vIEFsbCAqKkVDTUFTY3JpcHQgNSoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZQogIC8vIGFyZSBkZWNsYXJlZCBoZXJlLgogIHZhcgogICAgbmF0aXZlRm9yRWFjaCAgICAgID0gQXJyYXlQcm90by5mb3JFYWNoLAogICAgbmF0aXZlTWFwICAgICAgICAgID0gQXJyYXlQcm90by5tYXAsCiAgICBuYXRpdmVSZWR1Y2UgICAgICAgPSBBcnJheVByb3RvLnJlZHVjZSwKICAgIG5hdGl2ZVJlZHVjZVJpZ2h0ICA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQsCiAgICBuYXRpdmVGaWx0ZXIgICAgICAgPSBBcnJheVByb3RvLmZpbHRlciwKICAgIG5hdGl2ZUV2ZXJ5ICAgICAgICA9IEFycmF5UHJvdG8uZXZlcnksCiAgICBuYXRpdmVTb21lICAgICAgICAgPSBBcnJheVByb3RvLnNvbWUsCiAgICBuYXRpdmVJbmRleE9mICAgICAgPSBBcnJheVByb3RvLmluZGV4T2YsCiAgICBuYXRpdmVMYXN0SW5kZXhPZiAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mLAogICAgbmF0aXZlSXNBcnJheSAgICAgID0gQXJyYXkuaXNBcnJheSwKICAgIG5hdGl2ZUtleXMgICAgICAgICA9IE9iamVjdC5rZXlzLAogICAgbmF0aXZlQmluZCAgICAgICAgID0gRnVuY1Byb3RvLmJpbmQ7CgogIC8vIENyZWF0ZSBhIHNhZmUgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgdXNlIGJlbG93LgogIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7IHJldHVybiBuZXcgd3JhcHBlcihvYmopOyB9OwoKICAvLyBFeHBvcnQgdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciAqKk5vZGUuanMqKiwgd2l0aAogIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGUgb2xkIGByZXF1aXJlKClgIEFQSS4gSWYgd2UncmUgaW4KICAvLyB0aGUgYnJvd3NlciwgYWRkIGBfYCBhcyBhIGdsb2JhbCBvYmplY3QgdmlhIGEgc3RyaW5nIGlkZW50aWZpZXIsCiAgLy8gZm9yIENsb3N1cmUgQ29tcGlsZXIgImFkdmFuY2VkIiBtb2RlLgogIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgewogICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfOwogICAgfQogICAgZXhwb3J0cy5fID0gXzsKICB9IGVsc2UgewogICAgcm9vdFsnXyddID0gXzsKICB9CgogIC8vIEN1cnJlbnQgdmVyc2lvbi4KICBfLlZFUlNJT04gPSAnMS4zLjMnOwoKICAvLyBDb2xsZWN0aW9uIEZ1bmN0aW9ucwogIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tCgogIC8vIFRoZSBjb3JuZXJzdG9uZSwgYW4gYGVhY2hgIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLgogIC8vIEhhbmRsZXMgb2JqZWN0cyB3aXRoIHRoZSBidWlsdC1pbiBgZm9yRWFjaGAsIGFycmF5cywgYW5kIHJhdyBvYmplY3RzLgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBmb3JFYWNoYCBpZiBhdmFpbGFibGUuCiAgdmFyIGVhY2ggPSBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybjsKICAgIGlmIChuYXRpdmVGb3JFYWNoICYmIG9iai5mb3JFYWNoID09PSBuYXRpdmVGb3JFYWNoKSB7CiAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIH0gZWxzZSBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHsKICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgaWYgKGkgaW4gb2JqICYmIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopID09PSBicmVha2VyKSByZXR1cm47CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoXy5oYXMob2JqLCBrZXkpKSB7CiAgICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopID09PSBicmVha2VyKSByZXR1cm47CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRvciB0byBlYWNoIGVsZW1lbnQuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYG1hcGAgaWYgYXZhaWxhYmxlLgogIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgdmFyIHJlc3VsdHMgPSBbXTsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdHM7CiAgICBpZiAobmF0aXZlTWFwICYmIG9iai5tYXAgPT09IG5hdGl2ZU1hcCkgcmV0dXJuIG9iai5tYXAoaXRlcmF0b3IsIGNvbnRleHQpOwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoXSA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KTsKICAgIH0pOwogICAgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSByZXN1bHRzLmxlbmd0aCA9IG9iai5sZW5ndGg7CiAgICByZXR1cm4gcmVzdWx0czsKICB9OwoKICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsCiAgLy8gb3IgYGZvbGRsYC4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZWAgaWYgYXZhaWxhYmxlLgogIF8ucmVkdWNlID0gXy5mb2xkbCA9IF8uaW5qZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgbWVtbywgY29udGV4dCkgewogICAgdmFyIGluaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMjsKICAgIGlmIChvYmogPT0gbnVsbCkgb2JqID0gW107CiAgICBpZiAobmF0aXZlUmVkdWNlICYmIG9iai5yZWR1Y2UgPT09IG5hdGl2ZVJlZHVjZSkgewogICAgICBpZiAoY29udGV4dCkgaXRlcmF0b3IgPSBfLmJpbmQoaXRlcmF0b3IsIGNvbnRleHQpOwogICAgICByZXR1cm4gaW5pdGlhbCA/IG9iai5yZWR1Y2UoaXRlcmF0b3IsIG1lbW8pIDogb2JqLnJlZHVjZShpdGVyYXRvcik7CiAgICB9CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmICghaW5pdGlhbCkgewogICAgICAgIG1lbW8gPSB2YWx1ZTsKICAgICAgICBpbml0aWFsID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBtZW1vID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCBtZW1vLCB2YWx1ZSwgaW5kZXgsIGxpc3QpOwogICAgICB9CiAgICB9KTsKICAgIGlmICghaW5pdGlhbCkgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpOwogICAgcmV0dXJuIG1lbW87CiAgfTsKCiAgLy8gVGhlIHJpZ2h0LWFzc29jaWF0aXZlIHZlcnNpb24gb2YgcmVkdWNlLCBhbHNvIGtub3duIGFzIGBmb2xkcmAuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZVJpZ2h0YCBpZiBhdmFpbGFibGUuCiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KSB7CiAgICB2YXIgaW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyOwogICAgaWYgKG9iaiA9PSBudWxsKSBvYmogPSBbXTsKICAgIGlmIChuYXRpdmVSZWR1Y2VSaWdodCAmJiBvYmoucmVkdWNlUmlnaHQgPT09IG5hdGl2ZVJlZHVjZVJpZ2h0KSB7CiAgICAgIGlmIChjb250ZXh0KSBpdGVyYXRvciA9IF8uYmluZChpdGVyYXRvciwgY29udGV4dCk7CiAgICAgIHJldHVybiBpbml0aWFsID8gb2JqLnJlZHVjZVJpZ2h0KGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2VSaWdodChpdGVyYXRvcik7CiAgICB9CiAgICB2YXIgcmV2ZXJzZWQgPSBfLnRvQXJyYXkob2JqKS5yZXZlcnNlKCk7CiAgICBpZiAoY29udGV4dCAmJiAhaW5pdGlhbCkgaXRlcmF0b3IgPSBfLmJpbmQoaXRlcmF0b3IsIGNvbnRleHQpOwogICAgcmV0dXJuIGluaXRpYWwgPyBfLnJlZHVjZShyZXZlcnNlZCwgaXRlcmF0b3IsIG1lbW8sIGNvbnRleHQpIDogXy5yZWR1Y2UocmV2ZXJzZWQsIGl0ZXJhdG9yKTsKICB9OwoKICAvLyBSZXR1cm4gdGhlIGZpcnN0IHZhbHVlIHdoaWNoIHBhc3NlcyBhIHRydXRoIHRlc3QuIEFsaWFzZWQgYXMgYGRldGVjdGAuCiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICB2YXIgcmVzdWx0OwogICAgYW55KG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHsKICAgICAgICByZXN1bHQgPSB2YWx1ZTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGZpbHRlcmAgaWYgYXZhaWxhYmxlLgogIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuCiAgXy5maWx0ZXIgPSBfLnNlbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzOwogICAgaWYgKG5hdGl2ZUZpbHRlciAmJiBvYmouZmlsdGVyID09PSBuYXRpdmVGaWx0ZXIpIHJldHVybiBvYmouZmlsdGVyKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0c1tyZXN1bHRzLmxlbmd0aF0gPSB2YWx1ZTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfTsKCiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy4KICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzOwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAoIWl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0c1tyZXN1bHRzLmxlbmd0aF0gPSB2YWx1ZTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfTsKCiAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgYWxsIG9mIHRoZSBlbGVtZW50cyBtYXRjaCBhIHRydXRoIHRlc3QuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGV2ZXJ5YCBpZiBhdmFpbGFibGUuCiAgLy8gQWxpYXNlZCBhcyBgYWxsYC4KICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICB2YXIgcmVzdWx0ID0gdHJ1ZTsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDsKICAgIGlmIChuYXRpdmVFdmVyeSAmJiBvYmouZXZlcnkgPT09IG5hdGl2ZUV2ZXJ5KSByZXR1cm4gb2JqLmV2ZXJ5KGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgaWYgKCEocmVzdWx0ID0gcmVzdWx0ICYmIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkpIHJldHVybiBicmVha2VyOwogICAgfSk7CiAgICByZXR1cm4gISFyZXN1bHQ7CiAgfTsKCiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHNvbWVgIGlmIGF2YWlsYWJsZS4KICAvLyBBbGlhc2VkIGFzIGBhbnlgLgogIHZhciBhbnkgPSBfLnNvbWUgPSBfLmFueSA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIGl0ZXJhdG9yIHx8IChpdGVyYXRvciA9IF8uaWRlbnRpdHkpOwogICAgdmFyIHJlc3VsdCA9IGZhbHNlOwogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0OwogICAgaWYgKG5hdGl2ZVNvbWUgJiYgb2JqLnNvbWUgPT09IG5hdGl2ZVNvbWUpIHJldHVybiBvYmouc29tZShpdGVyYXRvciwgY29udGV4dCk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmIChyZXN1bHQgfHwgKHJlc3VsdCA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkpIHJldHVybiBicmVha2VyOwogICAgfSk7CiAgICByZXR1cm4gISFyZXN1bHQ7CiAgfTsKCiAgLy8gRGV0ZXJtaW5lIGlmIGEgZ2l2ZW4gdmFsdWUgaXMgaW5jbHVkZWQgaW4gdGhlIGFycmF5IG9yIG9iamVjdCB1c2luZyBgPT09YC4KICAvLyBBbGlhc2VkIGFzIGBjb250YWluc2AuCiAgXy5pbmNsdWRlID0gXy5jb250YWlucyA9IGZ1bmN0aW9uKG9iaiwgdGFyZ2V0KSB7CiAgICB2YXIgZm91bmQgPSBmYWxzZTsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZvdW5kOwogICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgb2JqLmluZGV4T2YgPT09IG5hdGl2ZUluZGV4T2YpIHJldHVybiBvYmouaW5kZXhPZih0YXJnZXQpICE9IC0xOwogICAgZm91bmQgPSBhbnkob2JqLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUgPT09IHRhcmdldDsKICAgIH0pOwogICAgcmV0dXJuIGZvdW5kOwogIH07CgogIC8vIEludm9rZSBhIG1ldGhvZCAod2l0aCBhcmd1bWVudHMpIG9uIGV2ZXJ5IGl0ZW0gaW4gYSBjb2xsZWN0aW9uLgogIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHsKICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOwogICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgcmV0dXJuIChfLmlzRnVuY3Rpb24obWV0aG9kKSA/IG1ldGhvZCB8fCB2YWx1ZSA6IHZhbHVlW21ldGhvZF0pLmFwcGx5KHZhbHVlLCBhcmdzKTsKICAgIH0pOwogIH07CgogIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYG1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuCiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7CiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSl7IHJldHVybiB2YWx1ZVtrZXldOyB9KTsKICB9OwoKICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCBvciAoZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuCiAgXy5tYXggPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSkgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIG9iaik7CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNFbXB0eShvYmopKSByZXR1cm4gLUluZmluaXR5OwogICAgdmFyIHJlc3VsdCA9IHtjb21wdXRlZCA6IC1JbmZpbml0eX07CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7CiAgICAgIGNvbXB1dGVkID49IHJlc3VsdC5jb21wdXRlZCAmJiAocmVzdWx0ID0ge3ZhbHVlIDogdmFsdWUsIGNvbXB1dGVkIDogY29tcHV0ZWR9KTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdC52YWx1ZTsKICB9OwoKICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuCiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSkgcmV0dXJuIE1hdGgubWluLmFwcGx5KE1hdGgsIG9iaik7CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNFbXB0eShvYmopKSByZXR1cm4gSW5maW5pdHk7CiAgICB2YXIgcmVzdWx0ID0ge2NvbXB1dGVkIDogSW5maW5pdHl9OwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICB2YXIgY29tcHV0ZWQgPSBpdGVyYXRvciA/IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSA6IHZhbHVlOwogICAgICBjb21wdXRlZCA8IHJlc3VsdC5jb21wdXRlZCAmJiAocmVzdWx0ID0ge3ZhbHVlIDogdmFsdWUsIGNvbXB1dGVkIDogY29tcHV0ZWR9KTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdC52YWx1ZTsKICB9OwoKICAvLyBTaHVmZmxlIGFuIGFycmF5LgogIF8uc2h1ZmZsZSA9IGZ1bmN0aW9uKG9iaikgewogICAgdmFyIHNodWZmbGVkID0gW10sIHJhbmQ7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHJhbmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaW5kZXggKyAxKSk7CiAgICAgIHNodWZmbGVkW2luZGV4XSA9IHNodWZmbGVkW3JhbmRdOwogICAgICBzaHVmZmxlZFtyYW5kXSA9IHZhbHVlOwogICAgfSk7CiAgICByZXR1cm4gc2h1ZmZsZWQ7CiAgfTsKCiAgLy8gU29ydCB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uIHByb2R1Y2VkIGJ5IGFuIGl0ZXJhdG9yLgogIF8uc29ydEJ5ID0gZnVuY3Rpb24ob2JqLCB2YWwsIGNvbnRleHQpIHsKICAgIHZhciBpdGVyYXRvciA9IF8uaXNGdW5jdGlvbih2YWwpID8gdmFsIDogZnVuY3Rpb24ob2JqKSB7IHJldHVybiBvYmpbdmFsXTsgfTsKICAgIHJldHVybiBfLnBsdWNrKF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdmFsdWUgOiB2YWx1ZSwKICAgICAgICBjcml0ZXJpYSA6IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KQogICAgICB9OwogICAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWEsIGIgPSByaWdodC5jcml0ZXJpYTsKICAgICAgaWYgKGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7CiAgICAgIGlmIChiID09PSB2b2lkIDApIHJldHVybiAtMTsKICAgICAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwOwogICAgfSksICd2YWx1ZScpOwogIH07CgogIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUKICAvLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi4KICBfLmdyb3VwQnkgPSBmdW5jdGlvbihvYmosIHZhbCkgewogICAgdmFyIHJlc3VsdCA9IHt9OwogICAgdmFyIGl0ZXJhdG9yID0gXy5pc0Z1bmN0aW9uKHZhbCkgPyB2YWwgOiBmdW5jdGlvbihvYmopIHsgcmV0dXJuIG9ialt2YWxdOyB9OwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkgewogICAgICB2YXIga2V5ID0gaXRlcmF0b3IodmFsdWUsIGluZGV4KTsKICAgICAgKHJlc3VsdFtrZXldIHx8IChyZXN1bHRba2V5XSA9IFtdKSkucHVzaCh2YWx1ZSk7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgLy8gVXNlIGEgY29tcGFyYXRvciBmdW5jdGlvbiB0byBmaWd1cmUgb3V0IGF0IHdoYXQgaW5kZXggYW4gb2JqZWN0IHNob3VsZAogIC8vIGJlIGluc2VydGVkIHNvIGFzIHRvIG1haW50YWluIG9yZGVyLiBVc2VzIGJpbmFyeSBzZWFyY2guCiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdG9yKSB7CiAgICBpdGVyYXRvciB8fCAoaXRlcmF0b3IgPSBfLmlkZW50aXR5KTsKICAgIHZhciBsb3cgPSAwLCBoaWdoID0gYXJyYXkubGVuZ3RoOwogICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHsKICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+PiAxOwogICAgICBpdGVyYXRvcihhcnJheVttaWRdKSA8IGl0ZXJhdG9yKG9iaikgPyBsb3cgPSBtaWQgKyAxIDogaGlnaCA9IG1pZDsKICAgIH0KICAgIHJldHVybiBsb3c7CiAgfTsKCiAgLy8gU2FmZWx5IGNvbnZlcnQgYW55dGhpbmcgaXRlcmFibGUgaW50byBhIHJlYWwsIGxpdmUgYXJyYXkuCiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7CiAgICBpZiAoIW9iaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgaWYgKF8uaXNBcnJheShvYmopKSAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzbGljZS5jYWxsKG9iaik7CiAgICBpZiAoXy5pc0FyZ3VtZW50cyhvYmopKSAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTsKICAgIGlmIChvYmoudG9BcnJheSAmJiBfLmlzRnVuY3Rpb24ob2JqLnRvQXJyYXkpKSByZXR1cm4gb2JqLnRvQXJyYXkoKTsKICAgIHJldHVybiBfLnZhbHVlcyhvYmopOwogIH07CgogIC8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIG9iamVjdC4KICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5sZW5ndGggOiBfLmtleXMob2JqKS5sZW5ndGg7CiAgfTsKCiAgLy8gQXJyYXkgRnVuY3Rpb25zCiAgLy8gLS0tLS0tLS0tLS0tLS0tCgogIC8vIEdldCB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgTgogIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYGhlYWRgIGFuZCBgdGFrZWAuIFRoZSAqKmd1YXJkKiogY2hlY2sKICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuCiAgXy5maXJzdCA9IF8uaGVhZCA9IF8udGFrZSA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkgewogICAgcmV0dXJuIChuICE9IG51bGwpICYmICFndWFyZCA/IHNsaWNlLmNhbGwoYXJyYXksIDAsIG4pIDogYXJyYXlbMF07CiAgfTsKCiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjY2lhbHkgdXNlZnVsIG9uCiAgLy8gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgaW4KICAvLyB0aGUgYXJyYXksIGV4Y2x1ZGluZyB0aGUgbGFzdCBOLiBUaGUgKipndWFyZCoqIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGgKICAvLyBgXy5tYXBgLgogIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkgewogICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIDAsIGFycmF5Lmxlbmd0aCAtICgobiA9PSBudWxsKSB8fCBndWFyZCA/IDEgOiBuKSk7CiAgfTsKCiAgLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTgogIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLgogIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkgewogICAgaWYgKChuICE9IG51bGwpICYmICFndWFyZCkgewogICAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgTWF0aC5tYXgoYXJyYXkubGVuZ3RoIC0gbiwgMCkpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdOwogICAgfQogIH07CgogIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAuCiAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgYW4gKippbmRleCoqIHdpbGwgcmV0dXJuCiAgLy8gdGhlIHJlc3Qgb2YgdGhlIHZhbHVlcyBpbiB0aGUgYXJyYXkgZnJvbSB0aGF0IGluZGV4IG9ud2FyZC4gVGhlICoqZ3VhcmQqKgogIC8vIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC4KICBfLnJlc3QgPSBfLnRhaWwgPSBmdW5jdGlvbihhcnJheSwgaW5kZXgsIGd1YXJkKSB7CiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgKGluZGV4ID09IG51bGwpIHx8IGd1YXJkID8gMSA6IGluZGV4KTsKICB9OwoKICAvLyBUcmltIG91dCBhbGwgZmFsc3kgdmFsdWVzIGZyb20gYW4gYXJyYXkuCiAgXy5jb21wYWN0ID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpeyByZXR1cm4gISF2YWx1ZTsgfSk7CiAgfTsKCiAgLy8gUmV0dXJuIGEgY29tcGxldGVseSBmbGF0dGVuZWQgdmVyc2lvbiBvZiBhbiBhcnJheS4KICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykgewogICAgcmV0dXJuIF8ucmVkdWNlKGFycmF5LCBmdW5jdGlvbihtZW1vLCB2YWx1ZSkgewogICAgICBpZiAoXy5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIG1lbW8uY29uY2F0KHNoYWxsb3cgPyB2YWx1ZSA6IF8uZmxhdHRlbih2YWx1ZSkpOwogICAgICBtZW1vW21lbW8ubGVuZ3RoXSA9IHZhbHVlOwogICAgICByZXR1cm4gbWVtbzsKICAgIH0sIFtdKTsKICB9OwoKICAvLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS4KICBfLndpdGhvdXQgPSBmdW5jdGlvbihhcnJheSkgewogICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICB9OwoKICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeQogIC8vIGJlZW4gc29ydGVkLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIHVzaW5nIGEgZmFzdGVyIGFsZ29yaXRobS4KICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLgogIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRvcikgewogICAgdmFyIGluaXRpYWwgPSBpdGVyYXRvciA/IF8ubWFwKGFycmF5LCBpdGVyYXRvcikgOiBhcnJheTsKICAgIHZhciByZXN1bHRzID0gW107CiAgICAvLyBUaGUgYGlzU29ydGVkYCBmbGFnIGlzIGlycmVsZXZhbnQgaWYgdGhlIGFycmF5IG9ubHkgY29udGFpbnMgdHdvIGVsZW1lbnRzLgogICAgaWYgKGFycmF5Lmxlbmd0aCA8IDMpIGlzU29ydGVkID0gdHJ1ZTsKICAgIF8ucmVkdWNlKGluaXRpYWwsIGZ1bmN0aW9uIChtZW1vLCB2YWx1ZSwgaW5kZXgpIHsKICAgICAgaWYgKGlzU29ydGVkID8gXy5sYXN0KG1lbW8pICE9PSB2YWx1ZSB8fCAhbWVtby5sZW5ndGggOiAhXy5pbmNsdWRlKG1lbW8sIHZhbHVlKSkgewogICAgICAgIG1lbW8ucHVzaCh2YWx1ZSk7CiAgICAgICAgcmVzdWx0cy5wdXNoKGFycmF5W2luZGV4XSk7CiAgICAgIH0KICAgICAgcmV0dXJuIG1lbW87CiAgICB9LCBbXSk7CiAgICByZXR1cm4gcmVzdWx0czsKICB9OwoKICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHVuaW9uOiBlYWNoIGRpc3RpbmN0IGVsZW1lbnQgZnJvbSBhbGwgb2YKICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy4KICBfLnVuaW9uID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gXy51bmlxKF8uZmxhdHRlbihhcmd1bWVudHMsIHRydWUpKTsKICB9OwoKICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgZXZlcnkgaXRlbSBzaGFyZWQgYmV0d2VlbiBhbGwgdGhlCiAgLy8gcGFzc2VkLWluIGFycmF5cy4gKEFsaWFzZWQgYXMgImludGVyc2VjdCIgZm9yIGJhY2stY29tcGF0LikKICBfLmludGVyc2VjdGlvbiA9IF8uaW50ZXJzZWN0ID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHZhciByZXN0ID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgcmV0dXJuIF8uZmlsdGVyKF8udW5pcShhcnJheSksIGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgcmV0dXJuIF8uZXZlcnkocmVzdCwgZnVuY3Rpb24ob3RoZXIpIHsKICAgICAgICByZXR1cm4gXy5pbmRleE9mKG90aGVyLCBpdGVtKSA+PSAwOwogICAgICB9KTsKICAgIH0pOwogIH07CgogIC8vIFRha2UgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBvbmUgYXJyYXkgYW5kIGEgbnVtYmVyIG9mIG90aGVyIGFycmF5cy4KICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLgogIF8uZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGFycmF5KSB7CiAgICB2YXIgcmVzdCA9IF8uZmxhdHRlbihzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIHRydWUpOwogICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBmdW5jdGlvbih2YWx1ZSl7IHJldHVybiAhXy5pbmNsdWRlKHJlc3QsIHZhbHVlKTsgfSk7CiAgfTsKCiAgLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZQogIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLgogIF8uemlwID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgIHZhciBsZW5ndGggPSBfLm1heChfLnBsdWNrKGFyZ3MsICdsZW5ndGgnKSk7CiAgICB2YXIgcmVzdWx0cyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgcmVzdWx0c1tpXSA9IF8ucGx1Y2soYXJncywgIiIgKyBpKTsKICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIC8vIElmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcGx5IHVzIHdpdGggaW5kZXhPZiAoSSdtIGxvb2tpbmcgYXQgeW91LCAqKk1TSUUqKiksCiAgLy8gd2UgbmVlZCB0aGlzIGZ1bmN0aW9uLiBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuCiAgLy8gaXRlbSBpbiBhbiBhcnJheSwgb3IgLTEgaWYgdGhlIGl0ZW0gaXMgbm90IGluY2x1ZGVkIGluIHRoZSBhcnJheS4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgaW5kZXhPZmAgaWYgYXZhaWxhYmxlLgogIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYAogIC8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guCiAgXy5pbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlzU29ydGVkKSB7CiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIC0xOwogICAgdmFyIGksIGw7CiAgICBpZiAoaXNTb3J0ZWQpIHsKICAgICAgaSA9IF8uc29ydGVkSW5kZXgoYXJyYXksIGl0ZW0pOwogICAgICByZXR1cm4gYXJyYXlbaV0gPT09IGl0ZW0gPyBpIDogLTE7CiAgICB9CiAgICBpZiAobmF0aXZlSW5kZXhPZiAmJiBhcnJheS5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtKTsKICAgIGZvciAoaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIGlmIChpIGluIGFycmF5ICYmIGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTsKICAgIHJldHVybiAtMTsKICB9OwoKICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgbGFzdEluZGV4T2ZgIGlmIGF2YWlsYWJsZS4KICBfLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0pIHsKICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gLTE7CiAgICBpZiAobmF0aXZlTGFzdEluZGV4T2YgJiYgYXJyYXkubGFzdEluZGV4T2YgPT09IG5hdGl2ZUxhc3RJbmRleE9mKSByZXR1cm4gYXJyYXkubGFzdEluZGV4T2YoaXRlbSk7CiAgICB2YXIgaSA9IGFycmF5Lmxlbmd0aDsKICAgIHdoaWxlIChpLS0pIGlmIChpIGluIGFycmF5ICYmIGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTsKICAgIHJldHVybiAtMTsKICB9OwoKICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mCiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWUKICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLgogIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkgewogICAgICBzdG9wID0gc3RhcnQgfHwgMDsKICAgICAgc3RhcnQgPSAwOwogICAgfQogICAgc3RlcCA9IGFyZ3VtZW50c1syXSB8fCAxOwoKICAgIHZhciBsZW4gPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7CiAgICB2YXIgaWR4ID0gMDsKICAgIHZhciByYW5nZSA9IG5ldyBBcnJheShsZW4pOwoKICAgIHdoaWxlKGlkeCA8IGxlbikgewogICAgICByYW5nZVtpZHgrK10gPSBzdGFydDsKICAgICAgc3RhcnQgKz0gc3RlcDsKICAgIH0KCiAgICByZXR1cm4gcmFuZ2U7CiAgfTsKCiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9ucwogIC8vIC0tLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBSZXVzYWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgcHJvdG90eXBlIHNldHRpbmcuCiAgdmFyIGN0b3IgPSBmdW5jdGlvbigpe307CgogIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIGEgZ2l2ZW4gb2JqZWN0IChhc3NpZ25pbmcgYHRoaXNgLCBhbmQgYXJndW1lbnRzLAogIC8vIG9wdGlvbmFsbHkpLiBCaW5kaW5nIHdpdGggYXJndW1lbnRzIGlzIGFsc28ga25vd24gYXMgYGN1cnJ5YC4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWYgYXZhaWxhYmxlLgogIC8vIFdlIGNoZWNrIGZvciBgZnVuYy5iaW5kYCBmaXJzdCwgdG8gZmFpbCBmYXN0IHdoZW4gYGZ1bmNgIGlzIHVuZGVmaW5lZC4KICBfLmJpbmQgPSBmdW5jdGlvbiBiaW5kKGZ1bmMsIGNvbnRleHQpIHsKICAgIHZhciBib3VuZCwgYXJnczsKICAgIGlmIChmdW5jLmJpbmQgPT09IG5hdGl2ZUJpbmQgJiYgbmF0aXZlQmluZCkgcmV0dXJuIG5hdGl2ZUJpbmQuYXBwbHkoZnVuYywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgIGlmICghXy5pc0Z1bmN0aW9uKGZ1bmMpKSB0aHJvdyBuZXcgVHlwZUVycm9yOwogICAgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTsKICAgIHJldHVybiBib3VuZCA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgYm91bmQpKSByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTsKICAgICAgY3Rvci5wcm90b3R5cGUgPSBmdW5jLnByb3RvdHlwZTsKICAgICAgdmFyIHNlbGYgPSBuZXcgY3RvcjsKICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkoc2VsZiwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7CiAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSByZXR1cm4gcmVzdWx0OwogICAgICByZXR1cm4gc2VsZjsKICAgIH07CiAgfTsKCiAgLy8gQmluZCBhbGwgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0CiAgLy8gYWxsIGNhbGxiYWNrcyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuCiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgZnVuY3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICBpZiAoZnVuY3MubGVuZ3RoID09IDApIGZ1bmNzID0gXy5mdW5jdGlvbnMob2JqKTsKICAgIGVhY2goZnVuY3MsIGZ1bmN0aW9uKGYpIHsgb2JqW2ZdID0gXy5iaW5kKG9ialtmXSwgb2JqKTsgfSk7CiAgICByZXR1cm4gb2JqOwogIH07CgogIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuCiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7CiAgICB2YXIgbWVtbyA9IHt9OwogICAgaGFzaGVyIHx8IChoYXNoZXIgPSBfLmlkZW50aXR5KTsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGtleSA9IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICByZXR1cm4gXy5oYXMobWVtbywga2V5KSA/IG1lbW9ba2V5XSA6IChtZW1vW2tleV0gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogICAgfTsKICB9OwoKICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzCiAgLy8gaXQgd2l0aCB0aGUgYXJndW1lbnRzIHN1cHBsaWVkLgogIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7CiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTsKICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7IHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpOyB9LCB3YWl0KTsKICB9OwoKICAvLyBEZWZlcnMgYSBmdW5jdGlvbiwgc2NoZWR1bGluZyBpdCB0byBydW4gYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMKICAvLyBjbGVhcmVkLgogIF8uZGVmZXIgPSBmdW5jdGlvbihmdW5jKSB7CiAgICByZXR1cm4gXy5kZWxheS5hcHBseShfLCBbZnVuYywgMV0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpOwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZQogIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLgogIF8udGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7CiAgICB2YXIgY29udGV4dCwgYXJncywgdGltZW91dCwgdGhyb3R0bGluZywgbW9yZSwgcmVzdWx0OwogICAgdmFyIHdoZW5Eb25lID0gXy5kZWJvdW5jZShmdW5jdGlvbigpeyBtb3JlID0gdGhyb3R0bGluZyA9IGZhbHNlOyB9LCB3YWl0KTsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgY29udGV4dCA9IHRoaXM7IGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICAgIGlmIChtb3JlKSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICAgIHdoZW5Eb25lKCk7CiAgICAgIH07CiAgICAgIGlmICghdGltZW91dCkgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpOwogICAgICBpZiAodGhyb3R0bGluZykgewogICAgICAgIG1vcmUgPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICAgIH0KICAgICAgd2hlbkRvbmUoKTsKICAgICAgdGhyb3R0bGluZyA9IHRydWU7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3QKICAvLyBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yCiAgLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlCiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy4KICBfLmRlYm91bmNlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7CiAgICB2YXIgdGltZW91dDsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOwogICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICBpZiAoIWltbWVkaWF0ZSkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgICAgfTsKICAgICAgaWYgKGltbWVkaWF0ZSAmJiAhdGltZW91dCkgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpOwogICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7CiAgICB9OwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvdwogIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uCiAgXy5vbmNlID0gZnVuY3Rpb24oZnVuYykgewogICAgdmFyIHJhbiA9IGZhbHNlLCBtZW1vOwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICBpZiAocmFuKSByZXR1cm4gbWVtbzsKICAgICAgcmFuID0gdHJ1ZTsKICAgICAgcmV0dXJuIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogIH07CgogIC8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLAogIC8vIGFsbG93aW5nIHlvdSB0byBhZGp1c3QgYXJndW1lbnRzLCBydW4gY29kZSBiZWZvcmUgYW5kIGFmdGVyLCBhbmQKICAvLyBjb25kaXRpb25hbGx5IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLgogIF8ud3JhcCA9IGZ1bmN0aW9uKGZ1bmMsIHdyYXBwZXIpIHsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBbZnVuY10uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSk7CiAgICAgIHJldHVybiB3cmFwcGVyLmFwcGx5KHRoaXMsIGFyZ3MpOwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaAogIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuCiAgXy5jb21wb3NlID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzOwogICAgICBmb3IgKHZhciBpID0gZnVuY3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICBhcmdzID0gW2Z1bmNzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpXTsKICAgICAgfQogICAgICByZXR1cm4gYXJnc1swXTsKICAgIH07CiAgfTsKCiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIGFmdGVyIGJlaW5nIGNhbGxlZCBOIHRpbWVzLgogIF8uYWZ0ZXIgPSBmdW5jdGlvbih0aW1lcywgZnVuYykgewogICAgaWYgKHRpbWVzIDw9IDApIHJldHVybiBmdW5jKCk7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGlmICgtLXRpbWVzIDwgMSkgeyByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9CiAgICB9OwogIH07CgogIC8vIE9iamVjdCBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0tCgogIC8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2AKICBfLmtleXMgPSBuYXRpdmVLZXlzIHx8IGZ1bmN0aW9uKG9iaikgewogICAgaWYgKG9iaiAhPT0gT2JqZWN0KG9iaikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgb2JqZWN0Jyk7CiAgICB2YXIga2V5cyA9IFtdOwogICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkga2V5c1trZXlzLmxlbmd0aF0gPSBrZXk7CiAgICByZXR1cm4ga2V5czsKICB9OwoKICAvLyBSZXRyaWV2ZSB0aGUgdmFsdWVzIG9mIGFuIG9iamVjdCdzIHByb3BlcnRpZXMuCiAgXy52YWx1ZXMgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpOwogIH07CgogIC8vIFJldHVybiBhIHNvcnRlZCBsaXN0IG9mIHRoZSBmdW5jdGlvbiBuYW1lcyBhdmFpbGFibGUgb24gdGhlIG9iamVjdC4KICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYAogIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgbmFtZXMgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTsKICAgIH0KICAgIHJldHVybiBuYW1lcy5zb3J0KCk7CiAgfTsKCiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuCiAgXy5leHRlbmQgPSBmdW5jdGlvbihvYmopIHsKICAgIGVhY2goc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCBmdW5jdGlvbihzb3VyY2UpIHsKICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHsKICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIG9iajsKICB9OwoKICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb25seSBjb250YWluaW5nIHRoZSB3aGl0ZWxpc3RlZCBwcm9wZXJ0aWVzLgogIF8ucGljayA9IGZ1bmN0aW9uKG9iaikgewogICAgdmFyIHJlc3VsdCA9IHt9OwogICAgZWFjaChfLmZsYXR0ZW4oc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSwgZnVuY3Rpb24oa2V5KSB7CiAgICAgIGlmIChrZXkgaW4gb2JqKSByZXN1bHRba2V5XSA9IG9ialtrZXldOwogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuCiAgXy5kZWZhdWx0cyA9IGZ1bmN0aW9uKG9iaikgewogICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkgewogICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkgewogICAgICAgIGlmIChvYmpbcHJvcF0gPT0gbnVsbCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LgogIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHsKICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqOwogICAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh7fSwgb2JqKTsKICB9OwoKICAvLyBJbnZva2VzIGludGVyY2VwdG9yIHdpdGggdGhlIG9iaiwgYW5kIHRoZW4gcmV0dXJucyBvYmouCiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byAidGFwIGludG8iIGEgbWV0aG9kIGNoYWluLCBpbgogIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLgogIF8udGFwID0gZnVuY3Rpb24ob2JqLCBpbnRlcmNlcHRvcikgewogICAgaW50ZXJjZXB0b3Iob2JqKTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24uCiAgZnVuY3Rpb24gZXEoYSwgYiwgc3RhY2spIHsKICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC4KICAgIC8vIFNlZSB0aGUgSGFybW9ueSBgZWdhbGAgcHJvcG9zYWw6IGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbC4KICAgIGlmIChhID09PSBiKSByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PSAxIC8gYjsKICAgIC8vIEEgc3RyaWN0IGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgYG51bGwgPT0gdW5kZWZpbmVkYC4KICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gYSA9PT0gYjsKICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLgogICAgaWYgKGEuX2NoYWluKSBhID0gYS5fd3JhcHBlZDsKICAgIGlmIChiLl9jaGFpbikgYiA9IGIuX3dyYXBwZWQ7CiAgICAvLyBJbnZva2UgYSBjdXN0b20gYGlzRXF1YWxgIG1ldGhvZCBpZiBvbmUgaXMgcHJvdmlkZWQuCiAgICBpZiAoYS5pc0VxdWFsICYmIF8uaXNGdW5jdGlvbihhLmlzRXF1YWwpKSByZXR1cm4gYS5pc0VxdWFsKGIpOwogICAgaWYgKGIuaXNFcXVhbCAmJiBfLmlzRnVuY3Rpb24oYi5pc0VxdWFsKSkgcmV0dXJuIGIuaXNFcXVhbChhKTsKICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuCiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTsKICAgIGlmIChjbGFzc05hbWUgIT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlOwogICAgc3dpdGNoIChjbGFzc05hbWUpIHsKICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuCiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6CiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGAiNSJgIGlzCiAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZygiNSIpYC4KICAgICAgICByZXR1cm4gYSA9PSBTdHJpbmcoYik7CiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6CiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS4gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvcgogICAgICAgIC8vIG90aGVyIG51bWVyaWMgdmFsdWVzLgogICAgICAgIHJldHVybiBhICE9ICthID8gYiAhPSArYiA6IChhID09IDAgPyAxIC8gYSA9PSAxIC8gYiA6IGEgPT0gK2IpOwogICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzoKICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6CiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpcgogICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMKICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuCiAgICAgICAgcmV0dXJuICthID09ICtiOwogICAgICAvLyBSZWdFeHBzIGFyZSBjb21wYXJlZCBieSB0aGVpciBzb3VyY2UgcGF0dGVybnMgYW5kIGZsYWdzLgogICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOgogICAgICAgIHJldHVybiBhLnNvdXJjZSA9PSBiLnNvdXJjZSAmJgogICAgICAgICAgICAgICBhLmdsb2JhbCA9PSBiLmdsb2JhbCAmJgogICAgICAgICAgICAgICBhLm11bHRpbGluZSA9PSBiLm11bHRpbGluZSAmJgogICAgICAgICAgICAgICBhLmlnbm9yZUNhc2UgPT0gYi5pZ25vcmVDYXNlOwogICAgfQogICAgaWYgKHR5cGVvZiBhICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7CiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljCiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC4KICAgIHZhciBsZW5ndGggPSBzdGFjay5sZW5ndGg7CiAgICB3aGlsZSAobGVuZ3RoLS0pIHsKICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mCiAgICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy4KICAgICAgaWYgKHN0YWNrW2xlbmd0aF0gPT0gYSkgcmV0dXJuIHRydWU7CiAgICB9CiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuCiAgICBzdGFjay5wdXNoKGEpOwogICAgdmFyIHNpemUgPSAwLCByZXN1bHQgPSB0cnVlOwogICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIGFuZCBhcnJheXMuCiAgICBpZiAoY2xhc3NOYW1lID09ICdbb2JqZWN0IEFycmF5XScpIHsKICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuCiAgICAgIHNpemUgPSBhLmxlbmd0aDsKICAgICAgcmVzdWx0ID0gc2l6ZSA9PSBiLmxlbmd0aDsKICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuCiAgICAgICAgd2hpbGUgKHNpemUtLSkgewogICAgICAgICAgLy8gRW5zdXJlIGNvbW11dGF0aXZlIGVxdWFsaXR5IGZvciBzcGFyc2UgYXJyYXlzLgogICAgICAgICAgaWYgKCEocmVzdWx0ID0gc2l6ZSBpbiBhID09IHNpemUgaW4gYiAmJiBlcShhW3NpemVdLCBiW3NpemVdLCBzdGFjaykpKSBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudC4KICAgICAgaWYgKCdjb25zdHJ1Y3RvcicgaW4gYSAhPSAnY29uc3RydWN0b3InIGluIGIgfHwgYS5jb25zdHJ1Y3RvciAhPSBiLmNvbnN0cnVjdG9yKSByZXR1cm4gZmFsc2U7CiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLgogICAgICBmb3IgKHZhciBrZXkgaW4gYSkgewogICAgICAgIGlmIChfLmhhcyhhLCBrZXkpKSB7CiAgICAgICAgICAvLyBDb3VudCB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHByb3BlcnRpZXMuCiAgICAgICAgICBzaXplKys7CiAgICAgICAgICAvLyBEZWVwIGNvbXBhcmUgZWFjaCBtZW1iZXIuCiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBfLmhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBzdGFjaykpKSBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMuCiAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICBmb3IgKGtleSBpbiBiKSB7CiAgICAgICAgICBpZiAoXy5oYXMoYiwga2V5KSAmJiAhKHNpemUtLSkpIGJyZWFrOwogICAgICAgIH0KICAgICAgICByZXN1bHQgPSAhc2l6ZTsKICAgICAgfQogICAgfQogICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuCiAgICBzdGFjay5wb3AoKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQoKICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC4KICBfLmlzRXF1YWwgPSBmdW5jdGlvbihhLCBiKSB7CiAgICByZXR1cm4gZXEoYSwgYiwgW10pOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gYXJyYXksIHN0cmluZywgb3Igb2JqZWN0IGVtcHR5PwogIC8vIEFuICJlbXB0eSIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLgogIF8uaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikgewogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTsKICAgIGlmIChfLmlzQXJyYXkob2JqKSB8fCBfLmlzU3RyaW5nKG9iaikpIHJldHVybiBvYmoubGVuZ3RoID09PSAwOwogICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkgcmV0dXJuIGZhbHNlOwogICAgcmV0dXJuIHRydWU7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50PwogIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gISEob2JqICYmIG9iai5ub2RlVHlwZSA9PSAxKTsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5PwogIC8vIERlbGVnYXRlcyB0byBFQ01BNSdzIG5hdGl2ZSBBcnJheS5pc0FycmF5CiAgXy5pc0FycmF5ID0gbmF0aXZlSXNBcnJheSB8fCBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgQXJyYXldJzsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD8KICBfLmlzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gb2JqID09PSBPYmplY3Qob2JqKTsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIGFyZ3VtZW50cyBvYmplY3Q/CiAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBBcmd1bWVudHNdJzsKICB9OwogIGlmICghXy5pc0FyZ3VtZW50cyhhcmd1bWVudHMpKSB7CiAgICBfLmlzQXJndW1lbnRzID0gZnVuY3Rpb24ob2JqKSB7CiAgICAgIHJldHVybiAhIShvYmogJiYgXy5oYXMob2JqLCAnY2FsbGVlJykpOwogICAgfTsKICB9CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBmdW5jdGlvbj8KICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgRnVuY3Rpb25dJzsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgc3RyaW5nPwogIF8uaXNTdHJpbmcgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgU3RyaW5nXSc7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIG51bWJlcj8KICBfLmlzTnVtYmVyID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0IE51bWJlcl0nOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gb2JqZWN0IGEgZmluaXRlIG51bWJlcj8KICBfLmlzRmluaXRlID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gXy5pc051bWJlcihvYmopICYmIGlzRmluaXRlKG9iaik7CiAgfTsKCiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gPwogIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHsKICAgIC8vIGBOYU5gIGlzIHRoZSBvbmx5IHZhbHVlIGZvciB3aGljaCBgPT09YCBpcyBub3QgcmVmbGV4aXZlLgogICAgcmV0dXJuIG9iaiAhPT0gb2JqOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuPwogIF8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0IEJvb2xlYW5dJzsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgZGF0ZT8KICBfLmlzRGF0ZSA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBEYXRlXSc7CiAgfTsKCiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGEgcmVndWxhciBleHByZXNzaW9uPwogIF8uaXNSZWdFeHAgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgUmVnRXhwXSc7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsPwogIF8uaXNOdWxsID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gb2JqID09PSBudWxsOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkPwogIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBvYmogPT09IHZvaWQgMDsKICB9OwoKICAvLyBIYXMgb3duIHByb3BlcnR5PwogIF8uaGFzID0gZnVuY3Rpb24ob2JqLCBrZXkpIHsKICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTsKICB9OwoKICAvLyBVdGlsaXR5IEZ1bmN0aW9ucwogIC8vIC0tLS0tLS0tLS0tLS0tLS0tCgogIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHMKICAvLyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuCiAgXy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7CiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7CiAgICByZXR1cm4gdGhpczsKICB9OwoKICAvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0b3JzLgogIF8uaWRlbnRpdHkgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlOwogIH07CgogIC8vIFJ1biBhIGZ1bmN0aW9uICoqbioqIHRpbWVzLgogIF8udGltZXMgPSBmdW5jdGlvbiAobiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGkpOwogIH07CgogIC8vIEVzY2FwZSBhIHN0cmluZyBmb3IgSFRNTCBpbnRlcnBvbGF0aW9uLgogIF8uZXNjYXBlID0gZnVuY3Rpb24oc3RyaW5nKSB7CiAgICByZXR1cm4gKCcnK3N0cmluZykucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpLnJlcGxhY2UoLyIvZywgJyZxdW90OycpLnJlcGxhY2UoLycvZywgJyYjeDI3OycpLnJlcGxhY2UoL1wvL2csJyYjeDJGOycpOwogIH07CgogIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgbmFtZWQgcHJvcGVydHkgaXMgYSBmdW5jdGlvbiB0aGVuIGludm9rZSBpdDsKICAvLyBvdGhlcndpc2UsIHJldHVybiBpdC4KICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsKICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuIG51bGw7CiAgICB2YXIgdmFsdWUgPSBvYmplY3RbcHJvcGVydHldOwogICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTsKICB9OwoKICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QsIGVuc3VyaW5nIHRoYXQKICAvLyB0aGV5J3JlIGNvcnJlY3RseSBhZGRlZCB0byB0aGUgT09QIHdyYXBwZXIgYXMgd2VsbC4KICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7CiAgICBlYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpewogICAgICBhZGRUb1dyYXBwZXIobmFtZSwgX1tuYW1lXSA9IG9ialtuYW1lXSk7CiAgICB9KTsKICB9OwoKICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLgogIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuCiAgdmFyIGlkQ291bnRlciA9IDA7CiAgXy51bmlxdWVJZCA9IGZ1bmN0aW9uKHByZWZpeCkgewogICAgdmFyIGlkID0gaWRDb3VudGVyKys7CiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDsKICB9OwoKICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGUKICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuCiAgXy50ZW1wbGF0ZVNldHRpbmdzID0gewogICAgZXZhbHVhdGUgICAgOiAvPCUoW1xzXFNdKz8pJT4vZywKICAgIGludGVycG9sYXRlIDogLzwlPShbXHNcU10rPyklPi9nLAogICAgZXNjYXBlICAgICAgOiAvPCUtKFtcc1xTXSs/KSU+L2cKICB9OwoKICAvLyBXaGVuIGN1c3RvbWl6aW5nIGB0ZW1wbGF0ZVNldHRpbmdzYCwgaWYgeW91IGRvbid0IHdhbnQgdG8gZGVmaW5lIGFuCiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpcwogIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLgogIHZhciBub01hdGNoID0gLy5eLzsKCiAgLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGEKICAvLyBzdHJpbmcgbGl0ZXJhbC4KICB2YXIgZXNjYXBlcyA9IHsKICAgICdcXCc6ICdcXCcsCiAgICAiJyI6ICInIiwKICAgICdyJzogJ1xyJywKICAgICduJzogJ1xuJywKICAgICd0JzogJ1x0JywKICAgICd1MjAyOCc6ICdcdTIwMjgnLAogICAgJ3UyMDI5JzogJ1x1MjAyOScKICB9OwoKICBmb3IgKHZhciBwIGluIGVzY2FwZXMpIGVzY2FwZXNbZXNjYXBlc1twXV0gPSBwOwogIHZhciBlc2NhcGVyID0gL1xcfCd8XHJ8XG58XHR8XHUyMDI4fFx1MjAyOS9nOwogIHZhciB1bmVzY2FwZXIgPSAvXFwoXFx8J3xyfG58dHx1MjAyOHx1MjAyOSkvZzsKCiAgLy8gV2l0aGluIGFuIGludGVycG9sYXRpb24sIGV2YWx1YXRpb24sIG9yIGVzY2FwaW5nLCByZW1vdmUgSFRNTCBlc2NhcGluZwogIC8vIHRoYXQgaGFkIGJlZW4gcHJldmlvdXNseSBhZGRlZC4KICB2YXIgdW5lc2NhcGUgPSBmdW5jdGlvbihjb2RlKSB7CiAgICByZXR1cm4gY29kZS5yZXBsYWNlKHVuZXNjYXBlciwgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZSkgewogICAgICByZXR1cm4gZXNjYXBlc1tlc2NhcGVdOwogICAgfSk7CiAgfTsKCiAgLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi4KICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsCiAgLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuCiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIGRhdGEsIHNldHRpbmdzKSB7CiAgICBzZXR0aW5ncyA9IF8uZGVmYXVsdHMoc2V0dGluZ3MgfHwge30sIF8udGVtcGxhdGVTZXR0aW5ncyk7CgogICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCB0YWtpbmcgY2FyZSB0byBlc2NhcGUgY2hhcmFjdGVycyB0aGF0CiAgICAvLyBjYW5ub3QgYmUgaW5jbHVkZWQgaW4gYSBzdHJpbmcgbGl0ZXJhbCBhbmQgdGhlbiB1bmVzY2FwZSB0aGVtIGluIGNvZGUKICAgIC8vIGJsb2Nrcy4KICAgIHZhciBzb3VyY2UgPSAiX19wKz0nIiArIHRleHQKICAgICAgLnJlcGxhY2UoZXNjYXBlciwgZnVuY3Rpb24obWF0Y2gpIHsKICAgICAgICByZXR1cm4gJ1xcJyArIGVzY2FwZXNbbWF0Y2hdOwogICAgICB9KQogICAgICAucmVwbGFjZShzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCwgZnVuY3Rpb24obWF0Y2gsIGNvZGUpIHsKICAgICAgICByZXR1cm4gIicrXG5fLmVzY2FwZSgiICsgdW5lc2NhcGUoY29kZSkgKyAiKStcbiciOwogICAgICB9KQogICAgICAucmVwbGFjZShzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoLCBmdW5jdGlvbihtYXRjaCwgY29kZSkgewogICAgICAgIHJldHVybiAiJytcbigiICsgdW5lc2NhcGUoY29kZSkgKyAiKStcbiciOwogICAgICB9KQogICAgICAucmVwbGFjZShzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoLCBmdW5jdGlvbihtYXRjaCwgY29kZSkgewogICAgICAgIHJldHVybiAiJztcbiIgKyB1bmVzY2FwZShjb2RlKSArICJcbjtfX3ArPSciOwogICAgICB9KSArICInO1xuIjsKCiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLgogICAgaWYgKCFzZXR0aW5ncy52YXJpYWJsZSkgc291cmNlID0gJ3dpdGgob2JqfHx7fSl7XG4nICsgc291cmNlICsgJ31cbic7CgogICAgc291cmNlID0gInZhciBfX3A9Jyc7IiArCiAgICAgICJ2YXIgcHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPUFycmF5LnByb3RvdHlwZS5qb2luLmNhbGwoYXJndW1lbnRzLCAnJyl9O1xuIiArCiAgICAgIHNvdXJjZSArICJyZXR1cm4gX19wO1xuIjsKCiAgICB2YXIgcmVuZGVyID0gbmV3IEZ1bmN0aW9uKHNldHRpbmdzLnZhcmlhYmxlIHx8ICdvYmonLCAnXycsIHNvdXJjZSk7CiAgICBpZiAoZGF0YSkgcmV0dXJuIHJlbmRlcihkYXRhLCBfKTsKICAgIHZhciB0ZW1wbGF0ZSA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pOwogICAgfTsKCiAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbiBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgYnVpbGQgdGltZQogICAgLy8gcHJlY29tcGlsYXRpb24uCiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIChzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJykgKyAnKXtcbicgKwogICAgICBzb3VyY2UgKyAnfSc7CgogICAgcmV0dXJuIHRlbXBsYXRlOwogIH07CgogIC8vIEFkZCBhICJjaGFpbiIgZnVuY3Rpb24sIHdoaWNoIHdpbGwgZGVsZWdhdGUgdG8gdGhlIHdyYXBwZXIuCiAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIF8ob2JqKS5jaGFpbigpOwogIH07CgogIC8vIFRoZSBPT1AgV3JhcHBlcgogIC8vIC0tLS0tLS0tLS0tLS0tLQoKICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdAogIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlCiAgLy8gdW5kZXJzY29yZSBmdW5jdGlvbnMuIFdyYXBwZWQgb2JqZWN0cyBtYXkgYmUgY2hhaW5lZC4KICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uKG9iaikgeyB0aGlzLl93cmFwcGVkID0gb2JqOyB9OwoKICAvLyBFeHBvc2UgYHdyYXBwZXIucHJvdG90eXBlYCBhcyBgXy5wcm90b3R5cGVgCiAgXy5wcm90b3R5cGUgPSB3cmFwcGVyLnByb3RvdHlwZTsKCiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLgogIHZhciByZXN1bHQgPSBmdW5jdGlvbihvYmosIGNoYWluKSB7CiAgICByZXR1cm4gY2hhaW4gPyBfKG9iaikuY2hhaW4oKSA6IG9iajsKICB9OwoKICAvLyBBIG1ldGhvZCB0byBlYXNpbHkgYWRkIGZ1bmN0aW9ucyB0byB0aGUgT09QIHdyYXBwZXIuCiAgdmFyIGFkZFRvV3JhcHBlciA9IGZ1bmN0aW9uKG5hbWUsIGZ1bmMpIHsKICAgIHdyYXBwZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpOwogICAgICB1bnNoaWZ0LmNhbGwoYXJncywgdGhpcy5fd3JhcHBlZCk7CiAgICAgIHJldHVybiByZXN1bHQoZnVuYy5hcHBseShfLCBhcmdzKSwgdGhpcy5fY2hhaW4pOwogICAgfTsKICB9OwoKICAvLyBBZGQgYWxsIG9mIHRoZSBVbmRlcnNjb3JlIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlciBvYmplY3QuCiAgXy5taXhpbihfKTsKCiAgLy8gQWRkIGFsbCBtdXRhdG9yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci4KICBlYWNoKFsncG9wJywgJ3B1c2gnLCAncmV2ZXJzZScsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG5hbWUpIHsKICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdOwogICAgd3JhcHBlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHdyYXBwZWQgPSB0aGlzLl93cmFwcGVkOwogICAgICBtZXRob2QuYXBwbHkod3JhcHBlZCwgYXJndW1lbnRzKTsKICAgICAgdmFyIGxlbmd0aCA9IHdyYXBwZWQubGVuZ3RoOwogICAgICBpZiAoKG5hbWUgPT0gJ3NoaWZ0JyB8fCBuYW1lID09ICdzcGxpY2UnKSAmJiBsZW5ndGggPT09IDApIGRlbGV0ZSB3cmFwcGVkWzBdOwogICAgICByZXR1cm4gcmVzdWx0KHdyYXBwZWQsIHRoaXMuX2NoYWluKTsKICAgIH07CiAgfSk7CgogIC8vIEFkZCBhbGwgYWNjZXNzb3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLgogIGVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7CiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTsKICAgIHdyYXBwZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiByZXN1bHQobWV0aG9kLmFwcGx5KHRoaXMuX3dyYXBwZWQsIGFyZ3VtZW50cyksIHRoaXMuX2NoYWluKTsKICAgIH07CiAgfSk7CgogIC8vIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC4KICB3cmFwcGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKCkgewogICAgdGhpcy5fY2hhaW4gPSB0cnVlOwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuCiAgd3JhcHBlci5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLl93cmFwcGVkOwogIH07Cgp9KS5jYWxsKHRoaXMpOwo7LyogWmVwdG8gdjEuMHJjMSAtIHBvbHlmaWxsIHplcHRvIGV2ZW50IGRldGVjdCBmeCBhamF4IGZvcm0gdG91Y2ggLSB6ZXB0b2pzLmNvbS9saWNlbnNlICovCjsoZnVuY3Rpb24odW5kZWZpbmVkKXsKICBpZiAoU3RyaW5nLnByb3RvdHlwZS50cmltID09PSB1bmRlZmluZWQpIC8vIGZpeCBmb3IgaU9TIDMuMgogICAgU3RyaW5nLnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMucmVwbGFjZSgvXlxzKy8sICcnKS5yZXBsYWNlKC9ccyskLywgJycpIH0KCiAgLy8gRm9yIGlPUyAzLngKICAvLyBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3JlZHVjZQogIGlmIChBcnJheS5wcm90b3R5cGUucmVkdWNlID09PSB1bmRlZmluZWQpCiAgICBBcnJheS5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24oZnVuKXsKICAgICAgaWYodGhpcyA9PT0gdm9pZCAwIHx8IHRoaXMgPT09IG51bGwpIHRocm93IG5ldyBUeXBlRXJyb3IoKQogICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKSwgbGVuID0gdC5sZW5ndGggPj4+IDAsIGsgPSAwLCBhY2N1bXVsYXRvcgogICAgICBpZih0eXBlb2YgZnVuICE9ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoKQogICAgICBpZihsZW4gPT0gMCAmJiBhcmd1bWVudHMubGVuZ3RoID09IDEpIHRocm93IG5ldyBUeXBlRXJyb3IoKQoKICAgICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+PSAyKQogICAgICAgYWNjdW11bGF0b3IgPSBhcmd1bWVudHNbMV0KICAgICAgZWxzZQogICAgICAgIGRvewogICAgICAgICAgaWYoayBpbiB0KXsKICAgICAgICAgICAgYWNjdW11bGF0b3IgPSB0W2srK10KICAgICAgICAgICAgYnJlYWsKICAgICAgICAgIH0KICAgICAgICAgIGlmKCsrayA+PSBsZW4pIHRocm93IG5ldyBUeXBlRXJyb3IoKQogICAgICAgIH0gd2hpbGUgKHRydWUpCgogICAgICB3aGlsZSAoayA8IGxlbil7CiAgICAgICAgaWYoayBpbiB0KSBhY2N1bXVsYXRvciA9IGZ1bi5jYWxsKHVuZGVmaW5lZCwgYWNjdW11bGF0b3IsIHRba10sIGssIHQpCiAgICAgICAgaysrCiAgICAgIH0KICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yCiAgICB9Cgp9KSgpCnZhciBaZXB0byA9IChmdW5jdGlvbigpIHsKICB2YXIgdW5kZWZpbmVkLCBrZXksICQsIGNsYXNzTGlzdCwgZW1wdHlBcnJheSA9IFtdLCBzbGljZSA9IGVtcHR5QXJyYXkuc2xpY2UsCiAgICBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCwKICAgIGVsZW1lbnREaXNwbGF5ID0ge30sIGNsYXNzQ2FjaGUgPSB7fSwKICAgIGdldENvbXB1dGVkU3R5bGUgPSBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlLAogICAgY3NzTnVtYmVyID0geyAnY29sdW1uLWNvdW50JzogMSwgJ2NvbHVtbnMnOiAxLCAnZm9udC13ZWlnaHQnOiAxLCAnbGluZS1oZWlnaHQnOiAxLCdvcGFjaXR5JzogMSwgJ3otaW5kZXgnOiAxLCAnem9vbSc6IDEgfSwKICAgIGZyYWdtZW50UkUgPSAvXlxzKjwoXHcrfCEpW14+XSo+LywKCiAgICAvLyBVc2VkIGJ5IGAkLnplcHRvLmluaXRgIHRvIHdyYXAgZWxlbWVudHMsIHRleHQvY29tbWVudCBub2RlcywgZG9jdW1lbnQsCiAgICAvLyBhbmQgZG9jdW1lbnQgZnJhZ21lbnQgbm9kZSB0eXBlcy4KICAgIGVsZW1lbnRUeXBlcyA9IFsxLCAzLCA4LCA5LCAxMV0sCgogICAgYWRqYWNlbmN5T3BlcmF0b3JzID0gWyAnYWZ0ZXInLCAncHJlcGVuZCcsICdiZWZvcmUnLCAnYXBwZW5kJyBdLAogICAgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpLAogICAgdGFibGVSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpLAogICAgY29udGFpbmVycyA9IHsKICAgICAgJ3RyJzogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGJvZHknKSwKICAgICAgJ3Rib2R5JzogdGFibGUsICd0aGVhZCc6IHRhYmxlLCAndGZvb3QnOiB0YWJsZSwKICAgICAgJ3RkJzogdGFibGVSb3csICd0aCc6IHRhYmxlUm93LAogICAgICAnKic6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpCiAgICB9LAogICAgcmVhZHlSRSA9IC9jb21wbGV0ZXxsb2FkZWR8aW50ZXJhY3RpdmUvLAogICAgY2xhc3NTZWxlY3RvclJFID0gL15cLihbXHctXSspJC8sCiAgICBpZFNlbGVjdG9yUkUgPSAvXiMoW1x3LV0rKSQvLAogICAgdGFnU2VsZWN0b3JSRSA9IC9eW1x3LV0rJC8sCiAgICB0b1N0cmluZyA9ICh7fSkudG9TdHJpbmcsCiAgICB6ZXB0byA9IHt9LAogICAgY2FtZWxpemUsIHVuaXEsCiAgICB0ZW1wUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykKCiAgemVwdG8ubWF0Y2hlcyA9IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKSB7CiAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkgcmV0dXJuIGZhbHNlCiAgICB2YXIgbWF0Y2hlc1NlbGVjdG9yID0gZWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm9NYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudC5tYXRjaGVzU2VsZWN0b3IKICAgIGlmIChtYXRjaGVzU2VsZWN0b3IpIHJldHVybiBtYXRjaGVzU2VsZWN0b3IuY2FsbChlbGVtZW50LCBzZWxlY3RvcikKICAgIC8vIGZhbGwgYmFjayB0byBwZXJmb3JtaW5nIGEgc2VsZWN0b3I6CiAgICB2YXIgbWF0Y2gsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSwgdGVtcCA9ICFwYXJlbnQKICAgIGlmICh0ZW1wKSAocGFyZW50ID0gdGVtcFBhcmVudCkuYXBwZW5kQ2hpbGQoZWxlbWVudCkKICAgIG1hdGNoID0gfnplcHRvLnFzYShwYXJlbnQsIHNlbGVjdG9yKS5pbmRleE9mKGVsZW1lbnQpCiAgICB0ZW1wICYmIHRlbXBQYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCkKICAgIHJldHVybiBtYXRjaAogIH0KCiAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gIltvYmplY3QgRnVuY3Rpb25dIiB9CiAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0IH0KICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7CiAgICB2YXIga2V5LCBjdG9yCiAgICBpZiAodG9TdHJpbmcuY2FsbCh2YWx1ZSkgIT09ICJbb2JqZWN0IE9iamVjdF0iKSByZXR1cm4gZmFsc2UKICAgIGN0b3IgPSAoaXNGdW5jdGlvbih2YWx1ZS5jb25zdHJ1Y3RvcikgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlKQogICAgaWYgKCFjdG9yIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKGN0b3IsICdpc1Byb3RvdHlwZU9mJykpIHJldHVybiBmYWxzZQogICAgZm9yIChrZXkgaW4gdmFsdWUpOwogICAgcmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkKICB9CiAgZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBBcnJheSB9CiAgZnVuY3Rpb24gbGlrZUFycmF5KG9iaikgeyByZXR1cm4gdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcicgfQoKICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7IHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24oaXRlbSl7IHJldHVybiBpdGVtICE9PSB1bmRlZmluZWQgJiYgaXRlbSAhPT0gbnVsbCB9KSB9CiAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkgeyByZXR1cm4gYXJyYXkubGVuZ3RoID4gMCA/IFtdLmNvbmNhdC5hcHBseShbXSwgYXJyYXkpIDogYXJyYXkgfQogIGNhbWVsaXplID0gZnVuY3Rpb24oc3RyKXsgcmV0dXJuIHN0ci5yZXBsYWNlKC8tKyguKT8vZywgZnVuY3Rpb24obWF0Y2gsIGNocil7IHJldHVybiBjaHIgPyBjaHIudG9VcHBlckNhc2UoKSA6ICcnIH0pIH0KICBmdW5jdGlvbiBkYXNoZXJpemUoc3RyKSB7CiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLzo6L2csICcvJykKICAgICAgICAgICAucmVwbGFjZSgvKFtBLVpdKykoW0EtWl1bYS16XSkvZywgJyQxXyQyJykKICAgICAgICAgICAucmVwbGFjZSgvKFthLXpcZF0pKFtBLVpdKS9nLCAnJDFfJDInKQogICAgICAgICAgIC5yZXBsYWNlKC9fL2csICctJykKICAgICAgICAgICAudG9Mb3dlckNhc2UoKQogIH0KICB1bmlxID0gZnVuY3Rpb24oYXJyYXkpeyByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0sIGlkeCl7IHJldHVybiBhcnJheS5pbmRleE9mKGl0ZW0pID09IGlkeCB9KSB9CgogIGZ1bmN0aW9uIGNsYXNzUkUobmFtZSkgewogICAgcmV0dXJuIG5hbWUgaW4gY2xhc3NDYWNoZSA/CiAgICAgIGNsYXNzQ2FjaGVbbmFtZV0gOiAoY2xhc3NDYWNoZVtuYW1lXSA9IG5ldyBSZWdFeHAoJyhefFxccyknICsgbmFtZSArICcoXFxzfCQpJykpCiAgfQoKICBmdW5jdGlvbiBtYXliZUFkZFB4KG5hbWUsIHZhbHVlKSB7CiAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PSAibnVtYmVyIiAmJiAhY3NzTnVtYmVyW2Rhc2hlcml6ZShuYW1lKV0pID8gdmFsdWUgKyAicHgiIDogdmFsdWUKICB9CgogIGZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KG5vZGVOYW1lKSB7CiAgICB2YXIgZWxlbWVudCwgZGlzcGxheQogICAgaWYgKCFlbGVtZW50RGlzcGxheVtub2RlTmFtZV0pIHsKICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobm9kZU5hbWUpCiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCkKICAgICAgZGlzcGxheSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgJycpLmdldFByb3BlcnR5VmFsdWUoImRpc3BsYXkiKQogICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCkKICAgICAgZGlzcGxheSA9PSAibm9uZSIgJiYgKGRpc3BsYXkgPSAiYmxvY2siKQogICAgICBlbGVtZW50RGlzcGxheVtub2RlTmFtZV0gPSBkaXNwbGF5CiAgICB9CiAgICByZXR1cm4gZWxlbWVudERpc3BsYXlbbm9kZU5hbWVdCiAgfQoKICAvLyBgJC56ZXB0by5mcmFnbWVudGAgdGFrZXMgYSBodG1sIHN0cmluZyBhbmQgYW4gb3B0aW9uYWwgdGFnIG5hbWUKICAvLyB0byBnZW5lcmF0ZSBET00gbm9kZXMgbm9kZXMgZnJvbSB0aGUgZ2l2ZW4gaHRtbCBzdHJpbmcuCiAgLy8gVGhlIGdlbmVyYXRlZCBET00gbm9kZXMgYXJlIHJldHVybmVkIGFzIGFuIGFycmF5LgogIC8vIFRoaXMgZnVuY3Rpb24gY2FuIGJlIG92ZXJyaWRlbiBpbiBwbHVnaW5zIGZvciBleGFtcGxlIHRvIG1ha2UKICAvLyBpdCBjb21wYXRpYmxlIHdpdGggYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHRoZSBET00gZnVsbHkuCiAgemVwdG8uZnJhZ21lbnQgPSBmdW5jdGlvbihodG1sLCBuYW1lKSB7CiAgICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSBuYW1lID0gZnJhZ21lbnRSRS50ZXN0KGh0bWwpICYmIFJlZ0V4cC4kMQogICAgaWYgKCEobmFtZSBpbiBjb250YWluZXJzKSkgbmFtZSA9ICcqJwogICAgdmFyIGNvbnRhaW5lciA9IGNvbnRhaW5lcnNbbmFtZV0KICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJyArIGh0bWwKICAgIHJldHVybiAkLmVhY2goc2xpY2UuY2FsbChjb250YWluZXIuY2hpbGROb2RlcyksIGZ1bmN0aW9uKCl7CiAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzKQogICAgfSkKICB9CgogIC8vIGAkLnplcHRvLlpgIHN3YXBzIG91dCB0aGUgcHJvdG90eXBlIG9mIHRoZSBnaXZlbiBgZG9tYCBhcnJheQogIC8vIG9mIG5vZGVzIHdpdGggYCQuZm5gIGFuZCB0aHVzIHN1cHBseWluZyBhbGwgdGhlIFplcHRvIGZ1bmN0aW9ucwogIC8vIHRvIHRoZSBhcnJheS4gTm90ZSB0aGF0IGBfX3Byb3RvX19gIGlzIG5vdCBzdXBwb3J0ZWQgb24gSW50ZXJuZXQKICAvLyBFeHBsb3Jlci4gVGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRlbiBpbiBwbHVnaW5zLgogIHplcHRvLlogPSBmdW5jdGlvbihkb20sIHNlbGVjdG9yKSB7CiAgICBkb20gPSBkb20gfHwgW10KICAgIGRvbS5fX3Byb3RvX18gPSBhcmd1bWVudHMuY2FsbGVlLnByb3RvdHlwZQogICAgZG9tLnNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJycKICAgIHJldHVybiBkb20KICB9CgogIC8vIGAkLnplcHRvLmlzWmAgc2hvdWxkIHJldHVybiBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBpcyBhIFplcHRvCiAgLy8gY29sbGVjdGlvbi4gVGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRlbiBpbiBwbHVnaW5zLgogIHplcHRvLmlzWiA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHplcHRvLloKICB9CgogIC8vIGAkLnplcHRvLmluaXRgIGlzIFplcHRvJ3MgY291bnRlcnBhcnQgdG8galF1ZXJ5J3MgYCQuZm4uaW5pdGAgYW5kCiAgLy8gdGFrZXMgYSBDU1Mgc2VsZWN0b3IgYW5kIGFuIG9wdGlvbmFsIGNvbnRleHQgKGFuZCBoYW5kbGVzIHZhcmlvdXMKICAvLyBzcGVjaWFsIGNhc2VzKS4KICAvLyBUaGlzIG1ldGhvZCBjYW4gYmUgb3ZlcnJpZGVuIGluIHBsdWdpbnMuCiAgemVwdG8uaW5pdCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjb250ZXh0KSB7CiAgICAvLyBJZiBub3RoaW5nIGdpdmVuLCByZXR1cm4gYW4gZW1wdHkgWmVwdG8gY29sbGVjdGlvbgogICAgaWYgKCFzZWxlY3RvcikgcmV0dXJuIHplcHRvLlooKQogICAgLy8gSWYgYSBmdW5jdGlvbiBpcyBnaXZlbiwgY2FsbCBpdCB3aGVuIHRoZSBET00gaXMgcmVhZHkKICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oc2VsZWN0b3IpKSByZXR1cm4gJChkb2N1bWVudCkucmVhZHkoc2VsZWN0b3IpCiAgICAvLyBJZiBhIFplcHRvIGNvbGxlY3Rpb24gaXMgZ2l2ZW4sIGp1dHMgcmV0dXJuIGl0CiAgICBlbHNlIGlmICh6ZXB0by5pc1ooc2VsZWN0b3IpKSByZXR1cm4gc2VsZWN0b3IKICAgIGVsc2UgewogICAgICB2YXIgZG9tCiAgICAgIC8vIG5vcm1hbGl6ZSBhcnJheSBpZiBhbiBhcnJheSBvZiBub2RlcyBpcyBnaXZlbgogICAgICBpZiAoaXNBcnJheShzZWxlY3RvcikpIGRvbSA9IGNvbXBhY3Qoc2VsZWN0b3IpCiAgICAgIC8vIGlmIGEgSmF2YVNjcmlwdCBvYmplY3QgaXMgZ2l2ZW4sIHJldHVybiBhIGNvcHkgb2YgaXQKICAgICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IHBlY3VsaWFyIG9wdGlvbiwgYnV0IHN1cHBvcnRlZCBieQogICAgICAvLyBqUXVlcnkgc28gd2UnbGwgZG8gaXQsIHRvbwogICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNlbGVjdG9yKSkKICAgICAgICBkb20gPSBbJC5leHRlbmQoe30sIHNlbGVjdG9yKV0sIHNlbGVjdG9yID0gbnVsbAogICAgICAvLyB3cmFwIHN0dWZmIGxpa2UgYGRvY3VtZW50YCBvciBgd2luZG93YAogICAgICBlbHNlIGlmIChlbGVtZW50VHlwZXMuaW5kZXhPZihzZWxlY3Rvci5ub2RlVHlwZSkgPj0gMCB8fCBzZWxlY3RvciA9PT0gd2luZG93KQogICAgICAgIGRvbSA9IFtzZWxlY3Rvcl0sIHNlbGVjdG9yID0gbnVsbAogICAgICAvLyBJZiBpdCdzIGEgaHRtbCBmcmFnbWVudCwgY3JlYXRlIG5vZGVzIGZyb20gaXQKICAgICAgZWxzZSBpZiAoZnJhZ21lbnRSRS50ZXN0KHNlbGVjdG9yKSkKICAgICAgICBkb20gPSB6ZXB0by5mcmFnbWVudChzZWxlY3Rvci50cmltKCksIFJlZ0V4cC4kMSksIHNlbGVjdG9yID0gbnVsbAogICAgICAvLyBJZiB0aGVyZSdzIGEgY29udGV4dCwgY3JlYXRlIGEgY29sbGVjdGlvbiBvbiB0aGF0IGNvbnRleHQgZmlyc3QsIGFuZCBzZWxlY3QKICAgICAgLy8gbm9kZXMgZnJvbSB0aGVyZQogICAgICBlbHNlIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQpIHJldHVybiAkKGNvbnRleHQpLmZpbmQoc2VsZWN0b3IpCiAgICAgIC8vIEFuZCBsYXN0IGJ1dCBubyBsZWFzdCwgaWYgaXQncyBhIENTUyBzZWxlY3RvciwgdXNlIGl0IHRvIHNlbGVjdCBub2Rlcy4KICAgICAgZWxzZSBkb20gPSB6ZXB0by5xc2EoZG9jdW1lbnQsIHNlbGVjdG9yKQogICAgICAvLyBjcmVhdGUgYSBuZXcgWmVwdG8gY29sbGVjdGlvbiBmcm9tIHRoZSBub2RlcyBmb3VuZAogICAgICByZXR1cm4gemVwdG8uWihkb20sIHNlbGVjdG9yKQogICAgfQogIH0KCiAgLy8gYCRgIHdpbGwgYmUgdGhlIGJhc2UgYFplcHRvYCBvYmplY3QuIFdoZW4gY2FsbGluZyB0aGlzCiAgLy8gZnVuY3Rpb24ganVzdCBjYWxsIGAkLnplcHRvLmluaXQsIHdoaWNocyBtYWtlcyB0aGUgaW1wbGVtZW50YXRpb24KICAvLyBkZXRhaWxzIG9mIHNlbGVjdGluZyBub2RlcyBhbmQgY3JlYXRpbmcgWmVwdG8gY29sbGVjdGlvbnMKICAvLyBwYXRjaGFibGUgaW4gcGx1Z2lucy4KICAkID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNvbnRleHQpewogICAgcmV0dXJuIHplcHRvLmluaXQoc2VsZWN0b3IsIGNvbnRleHQpCiAgfQoKICAvLyBDb3B5IGFsbCBidXQgdW5kZWZpbmVkIHByb3BlcnRpZXMgZnJvbSBvbmUgb3IgbW9yZQogIC8vIG9iamVjdHMgdG8gdGhlIGB0YXJnZXRgIG9iamVjdC4KICAkLmV4dGVuZCA9IGZ1bmN0aW9uKHRhcmdldCl7CiAgICBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkuZm9yRWFjaChmdW5jdGlvbihzb3VyY2UpIHsKICAgICAgZm9yIChrZXkgaW4gc291cmNlKQogICAgICAgIGlmIChzb3VyY2Vba2V5XSAhPT0gdW5kZWZpbmVkKQogICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XQogICAgfSkKICAgIHJldHVybiB0YXJnZXQKICB9CgogIC8vIGAkLnplcHRvLnFzYWAgaXMgWmVwdG8ncyBDU1Mgc2VsZWN0b3IgaW1wbGVtZW50YXRpb24gd2hpY2gKICAvLyB1c2VzIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsYCBhbmQgb3B0aW1pemVzIGZvciBzb21lIHNwZWNpYWwgY2FzZXMsIGxpa2UgYCNpZGAuCiAgLy8gVGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRlbiBpbiBwbHVnaW5zLgogIHplcHRvLnFzYSA9IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKXsKICAgIHZhciBmb3VuZAogICAgcmV0dXJuIChlbGVtZW50ID09PSBkb2N1bWVudCAmJiBpZFNlbGVjdG9yUkUudGVzdChzZWxlY3RvcikpID8KICAgICAgKCAoZm91bmQgPSBlbGVtZW50LmdldEVsZW1lbnRCeUlkKFJlZ0V4cC4kMSkpID8gW2ZvdW5kXSA6IGVtcHR5QXJyYXkgKSA6CiAgICAgIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxICYmIGVsZW1lbnQubm9kZVR5cGUgIT09IDkpID8gZW1wdHlBcnJheSA6CiAgICAgIHNsaWNlLmNhbGwoCiAgICAgICAgY2xhc3NTZWxlY3RvclJFLnRlc3Qoc2VsZWN0b3IpID8gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFJlZ0V4cC4kMSkgOgogICAgICAgIHRhZ1NlbGVjdG9yUkUudGVzdChzZWxlY3RvcikgPyBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKSA6CiAgICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKQogICAgICApCiAgfQoKICBmdW5jdGlvbiBmaWx0ZXJlZChub2Rlcywgc2VsZWN0b3IpIHsKICAgIHJldHVybiBzZWxlY3RvciA9PT0gdW5kZWZpbmVkID8gJChub2RlcykgOiAkKG5vZGVzKS5maWx0ZXIoc2VsZWN0b3IpCiAgfQoKICBmdW5jdGlvbiBmdW5jQXJnKGNvbnRleHQsIGFyZywgaWR4LCBwYXlsb2FkKSB7CiAgIHJldHVybiBpc0Z1bmN0aW9uKGFyZykgPyBhcmcuY2FsbChjb250ZXh0LCBpZHgsIHBheWxvYWQpIDogYXJnCiAgfQoKICAkLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uCiAgJC5pc09iamVjdCA9IGlzT2JqZWN0CiAgJC5pc0FycmF5ID0gaXNBcnJheQogICQuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3QKCiAgJC5pbkFycmF5ID0gZnVuY3Rpb24oZWxlbSwgYXJyYXksIGkpewogICAgcmV0dXJuIGVtcHR5QXJyYXkuaW5kZXhPZi5jYWxsKGFycmF5LCBlbGVtLCBpKQogIH0KCiAgJC50cmltID0gZnVuY3Rpb24oc3RyKSB7IHJldHVybiBzdHIudHJpbSgpIH0KCiAgLy8gcGx1Z2luIGNvbXBhdGliaWxpdHkKICAkLnV1aWQgPSAwCgogICQubWFwID0gZnVuY3Rpb24oZWxlbWVudHMsIGNhbGxiYWNrKXsKICAgIHZhciB2YWx1ZSwgdmFsdWVzID0gW10sIGksIGtleQogICAgaWYgKGxpa2VBcnJheShlbGVtZW50cykpCiAgICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhbHVlID0gY2FsbGJhY2soZWxlbWVudHNbaV0sIGkpCiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHZhbHVlcy5wdXNoKHZhbHVlKQogICAgICB9CiAgICBlbHNlCiAgICAgIGZvciAoa2V5IGluIGVsZW1lbnRzKSB7CiAgICAgICAgdmFsdWUgPSBjYWxsYmFjayhlbGVtZW50c1trZXldLCBrZXkpCiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHZhbHVlcy5wdXNoKHZhbHVlKQogICAgICB9CiAgICByZXR1cm4gZmxhdHRlbih2YWx1ZXMpCiAgfQoKICAkLmVhY2ggPSBmdW5jdGlvbihlbGVtZW50cywgY2FsbGJhY2spewogICAgdmFyIGksIGtleQogICAgaWYgKGxpa2VBcnJheShlbGVtZW50cykpIHsKICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKQogICAgICAgIGlmIChjYWxsYmFjay5jYWxsKGVsZW1lbnRzW2ldLCBpLCBlbGVtZW50c1tpXSkgPT09IGZhbHNlKSByZXR1cm4gZWxlbWVudHMKICAgIH0gZWxzZSB7CiAgICAgIGZvciAoa2V5IGluIGVsZW1lbnRzKQogICAgICAgIGlmIChjYWxsYmFjay5jYWxsKGVsZW1lbnRzW2tleV0sIGtleSwgZWxlbWVudHNba2V5XSkgPT09IGZhbHNlKSByZXR1cm4gZWxlbWVudHMKICAgIH0KCiAgICByZXR1cm4gZWxlbWVudHMKICB9CgogIC8vIERlZmluZSBtZXRob2RzIHRoYXQgd2lsbCBiZSBhdmFpbGFibGUgb24gYWxsCiAgLy8gWmVwdG8gY29sbGVjdGlvbnMKICAkLmZuID0gewogICAgLy8gQmVjYXVzZSBhIGNvbGxlY3Rpb24gYWN0cyBsaWtlIGFuIGFycmF5CiAgICAvLyBjb3B5IG92ZXIgdGhlc2UgdXNlZnVsIGFycmF5IGZ1bmN0aW9ucy4KICAgIGZvckVhY2g6IGVtcHR5QXJyYXkuZm9yRWFjaCwKICAgIHJlZHVjZTogZW1wdHlBcnJheS5yZWR1Y2UsCiAgICBwdXNoOiBlbXB0eUFycmF5LnB1c2gsCiAgICBpbmRleE9mOiBlbXB0eUFycmF5LmluZGV4T2YsCiAgICBjb25jYXQ6IGVtcHR5QXJyYXkuY29uY2F0LAoKICAgIC8vIGBtYXBgIGFuZCBgc2xpY2VgIGluIHRoZSBqUXVlcnkgQVBJIHdvcmsgZGlmZmVyZW50bHkKICAgIC8vIGZyb20gdGhlaXIgYXJyYXkgY291bnRlcnBhcnRzCiAgICBtYXA6IGZ1bmN0aW9uKGZuKXsKICAgICAgcmV0dXJuICQubWFwKHRoaXMsIGZ1bmN0aW9uKGVsLCBpKXsgcmV0dXJuIGZuLmNhbGwoZWwsIGksIGVsKSB9KQogICAgfSwKICAgIHNsaWNlOiBmdW5jdGlvbigpewogICAgICByZXR1cm4gJChzbGljZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKQogICAgfSwKCiAgICByZWFkeTogZnVuY3Rpb24oY2FsbGJhY2spewogICAgICBpZiAocmVhZHlSRS50ZXN0KGRvY3VtZW50LnJlYWR5U3RhdGUpKSBjYWxsYmFjaygkKQogICAgICBlbHNlIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpeyBjYWxsYmFjaygkKSB9LCBmYWxzZSkKICAgICAgcmV0dXJuIHRoaXMKICAgIH0sCiAgICBnZXQ6IGZ1bmN0aW9uKGlkeCl7CiAgICAgIHJldHVybiBpZHggPT09IHVuZGVmaW5lZCA/IHNsaWNlLmNhbGwodGhpcykgOiB0aGlzW2lkeF0KICAgIH0sCiAgICB0b0FycmF5OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5nZXQoKSB9LAogICAgc2l6ZTogZnVuY3Rpb24oKXsKICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoCiAgICB9LAogICAgcmVtb3ZlOiBmdW5jdGlvbigpewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CiAgICAgICAgaWYgKHRoaXMucGFyZW50Tm9kZSAhPSBudWxsKQogICAgICAgICAgdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpCiAgICAgIH0pCiAgICB9LAogICAgZWFjaDogZnVuY3Rpb24oY2FsbGJhY2spewogICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24oZWwsIGlkeCl7IGNhbGxiYWNrLmNhbGwoZWwsIGlkeCwgZWwpIH0pCiAgICAgIHJldHVybiB0aGlzCiAgICB9LAogICAgZmlsdGVyOiBmdW5jdGlvbihzZWxlY3Rvcil7CiAgICAgIHJldHVybiAkKFtdLmZpbHRlci5jYWxsKHRoaXMsIGZ1bmN0aW9uKGVsZW1lbnQpewogICAgICAgIHJldHVybiB6ZXB0by5tYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKQogICAgICB9KSkKICAgIH0sCiAgICBhZGQ6IGZ1bmN0aW9uKHNlbGVjdG9yLGNvbnRleHQpewogICAgICByZXR1cm4gJCh1bmlxKHRoaXMuY29uY2F0KCQoc2VsZWN0b3IsY29udGV4dCkpKSkKICAgIH0sCiAgICBpczogZnVuY3Rpb24oc2VsZWN0b3IpewogICAgICByZXR1cm4gdGhpcy5sZW5ndGggPiAwICYmIHplcHRvLm1hdGNoZXModGhpc1swXSwgc2VsZWN0b3IpCiAgICB9LAogICAgbm90OiBmdW5jdGlvbihzZWxlY3Rvcil7CiAgICAgIHZhciBub2Rlcz1bXQogICAgICBpZiAoaXNGdW5jdGlvbihzZWxlY3RvcikgJiYgc2VsZWN0b3IuY2FsbCAhPT0gdW5kZWZpbmVkKQogICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpewogICAgICAgICAgaWYgKCFzZWxlY3Rvci5jYWxsKHRoaXMsaWR4KSkgbm9kZXMucHVzaCh0aGlzKQogICAgICAgIH0pCiAgICAgIGVsc2UgewogICAgICAgIHZhciBleGNsdWRlcyA9IHR5cGVvZiBzZWxlY3RvciA9PSAnc3RyaW5nJyA/IHRoaXMuZmlsdGVyKHNlbGVjdG9yKSA6CiAgICAgICAgICAobGlrZUFycmF5KHNlbGVjdG9yKSAmJiBpc0Z1bmN0aW9uKHNlbGVjdG9yLml0ZW0pKSA/IHNsaWNlLmNhbGwoc2VsZWN0b3IpIDogJChzZWxlY3RvcikKICAgICAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24oZWwpewogICAgICAgICAgaWYgKGV4Y2x1ZGVzLmluZGV4T2YoZWwpIDwgMCkgbm9kZXMucHVzaChlbCkKICAgICAgICB9KQogICAgICB9CiAgICAgIHJldHVybiAkKG5vZGVzKQogICAgfSwKICAgIGVxOiBmdW5jdGlvbihpZHgpewogICAgICByZXR1cm4gaWR4ID09PSAtMSA/IHRoaXMuc2xpY2UoaWR4KSA6IHRoaXMuc2xpY2UoaWR4LCArIGlkeCArIDEpCiAgICB9LAogICAgZmlyc3Q6IGZ1bmN0aW9uKCl7CiAgICAgIHZhciBlbCA9IHRoaXNbMF0KICAgICAgcmV0dXJuIGVsICYmICFpc09iamVjdChlbCkgPyBlbCA6ICQoZWwpCiAgICB9LAogICAgbGFzdDogZnVuY3Rpb24oKXsKICAgICAgdmFyIGVsID0gdGhpc1t0aGlzLmxlbmd0aCAtIDFdCiAgICAgIHJldHVybiBlbCAmJiAhaXNPYmplY3QoZWwpID8gZWwgOiAkKGVsKQogICAgfSwKICAgIGZpbmQ6IGZ1bmN0aW9uKHNlbGVjdG9yKXsKICAgICAgdmFyIHJlc3VsdAogICAgICBpZiAodGhpcy5sZW5ndGggPT0gMSkgcmVzdWx0ID0gemVwdG8ucXNhKHRoaXNbMF0sIHNlbGVjdG9yKQogICAgICBlbHNlIHJlc3VsdCA9IHRoaXMubWFwKGZ1bmN0aW9uKCl7IHJldHVybiB6ZXB0by5xc2EodGhpcywgc2VsZWN0b3IpIH0pCiAgICAgIHJldHVybiAkKHJlc3VsdCkKICAgIH0sCiAgICBjbG9zZXN0OiBmdW5jdGlvbihzZWxlY3RvciwgY29udGV4dCl7CiAgICAgIHZhciBub2RlID0gdGhpc1swXQogICAgICB3aGlsZSAobm9kZSAmJiAhemVwdG8ubWF0Y2hlcyhub2RlLCBzZWxlY3RvcikpCiAgICAgICAgbm9kZSA9IG5vZGUgIT09IGNvbnRleHQgJiYgbm9kZSAhPT0gZG9jdW1lbnQgJiYgbm9kZS5wYXJlbnROb2RlCiAgICAgIHJldHVybiAkKG5vZGUpCiAgICB9LAogICAgcGFyZW50czogZnVuY3Rpb24oc2VsZWN0b3IpewogICAgICB2YXIgYW5jZXN0b3JzID0gW10sIG5vZGVzID0gdGhpcwogICAgICB3aGlsZSAobm9kZXMubGVuZ3RoID4gMCkKICAgICAgICBub2RlcyA9ICQubWFwKG5vZGVzLCBmdW5jdGlvbihub2RlKXsKICAgICAgICAgIGlmICgobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkgJiYgbm9kZSAhPT0gZG9jdW1lbnQgJiYgYW5jZXN0b3JzLmluZGV4T2Yobm9kZSkgPCAwKSB7CiAgICAgICAgICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpCiAgICAgICAgICAgIHJldHVybiBub2RlCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgcmV0dXJuIGZpbHRlcmVkKGFuY2VzdG9ycywgc2VsZWN0b3IpCiAgICB9LAogICAgcGFyZW50OiBmdW5jdGlvbihzZWxlY3Rvcil7CiAgICAgIHJldHVybiBmaWx0ZXJlZCh1bmlxKHRoaXMucGx1Y2soJ3BhcmVudE5vZGUnKSksIHNlbGVjdG9yKQogICAgfSwKICAgIGNoaWxkcmVuOiBmdW5jdGlvbihzZWxlY3Rvcil7CiAgICAgIHJldHVybiBmaWx0ZXJlZCh0aGlzLm1hcChmdW5jdGlvbigpeyByZXR1cm4gc2xpY2UuY2FsbCh0aGlzLmNoaWxkcmVuKSB9KSwgc2VsZWN0b3IpCiAgICB9LAogICAgc2libGluZ3M6IGZ1bmN0aW9uKHNlbGVjdG9yKXsKICAgICAgcmV0dXJuIGZpbHRlcmVkKHRoaXMubWFwKGZ1bmN0aW9uKGksIGVsKXsKICAgICAgICByZXR1cm4gc2xpY2UuY2FsbChlbC5wYXJlbnROb2RlLmNoaWxkcmVuKS5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpeyByZXR1cm4gY2hpbGQhPT1lbCB9KQogICAgICB9KSwgc2VsZWN0b3IpCiAgICB9LAogICAgZW1wdHk6IGZ1bmN0aW9uKCl7CiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsgdGhpcy5pbm5lckhUTUwgPSAnJyB9KQogICAgfSwKICAgIC8vIGBwbHVja2AgaXMgYm9ycm93ZWQgZnJvbSBQcm90b3R5cGUuanMKICAgIHBsdWNrOiBmdW5jdGlvbihwcm9wZXJ0eSl7CiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpeyByZXR1cm4gdGhpc1twcm9wZXJ0eV0gfSkKICAgIH0sCiAgICBzaG93OiBmdW5jdGlvbigpewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CiAgICAgICAgdGhpcy5zdHlsZS5kaXNwbGF5ID09ICJub25lIiAmJiAodGhpcy5zdHlsZS5kaXNwbGF5ID0gbnVsbCkKICAgICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLCAnJykuZ2V0UHJvcGVydHlWYWx1ZSgiZGlzcGxheSIpID09ICJub25lIikKICAgICAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5KHRoaXMubm9kZU5hbWUpCiAgICAgIH0pCiAgICB9LAogICAgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uKG5ld0NvbnRlbnQpewogICAgICByZXR1cm4gdGhpcy5iZWZvcmUobmV3Q29udGVudCkucmVtb3ZlKCkKICAgIH0sCiAgICB3cmFwOiBmdW5jdGlvbihuZXdDb250ZW50KXsKICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpewogICAgICAgICQodGhpcykud3JhcEFsbCgkKG5ld0NvbnRlbnQpWzBdLmNsb25lTm9kZShmYWxzZSkpCiAgICAgIH0pCiAgICB9LAogICAgd3JhcEFsbDogZnVuY3Rpb24obmV3Q29udGVudCl7CiAgICAgIGlmICh0aGlzWzBdKSB7CiAgICAgICAgJCh0aGlzWzBdKS5iZWZvcmUobmV3Q29udGVudCA9ICQobmV3Q29udGVudCkpCiAgICAgICAgbmV3Q29udGVudC5hcHBlbmQodGhpcykKICAgICAgfQogICAgICByZXR1cm4gdGhpcwogICAgfSwKICAgIHVud3JhcDogZnVuY3Rpb24oKXsKICAgICAgdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCl7CiAgICAgICAgJCh0aGlzKS5yZXBsYWNlV2l0aCgkKHRoaXMpLmNoaWxkcmVuKCkpCiAgICAgIH0pCiAgICAgIHJldHVybiB0aGlzCiAgICB9LAogICAgY2xvbmU6IGZ1bmN0aW9uKCl7CiAgICAgIHJldHVybiAkKHRoaXMubWFwKGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLmNsb25lTm9kZSh0cnVlKSB9KSkKICAgIH0sCiAgICBoaWRlOiBmdW5jdGlvbigpewogICAgICByZXR1cm4gdGhpcy5jc3MoImRpc3BsYXkiLCAibm9uZSIpCiAgICB9LAogICAgdG9nZ2xlOiBmdW5jdGlvbihzZXR0aW5nKXsKICAgICAgcmV0dXJuIChzZXR0aW5nID09PSB1bmRlZmluZWQgPyB0aGlzLmNzcygiZGlzcGxheSIpID09ICJub25lIiA6IHNldHRpbmcpID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKQogICAgfSwKICAgIHByZXY6IGZ1bmN0aW9uKCl7IHJldHVybiAkKHRoaXMucGx1Y2soJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnKSkgfSwKICAgIG5leHQ6IGZ1bmN0aW9uKCl7IHJldHVybiAkKHRoaXMucGx1Y2soJ25leHRFbGVtZW50U2libGluZycpKSB9LAogICAgaHRtbDogZnVuY3Rpb24oaHRtbCl7CiAgICAgIHJldHVybiBodG1sID09PSB1bmRlZmluZWQgPwogICAgICAgICh0aGlzLmxlbmd0aCA+IDAgPyB0aGlzWzBdLmlubmVySFRNTCA6IG51bGwpIDoKICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXsKICAgICAgICAgIHZhciBvcmlnaW5IdG1sID0gdGhpcy5pbm5lckhUTUwKICAgICAgICAgICQodGhpcykuZW1wdHkoKS5hcHBlbmQoIGZ1bmNBcmcodGhpcywgaHRtbCwgaWR4LCBvcmlnaW5IdG1sKSApCiAgICAgICAgfSkKICAgIH0sCiAgICB0ZXh0OiBmdW5jdGlvbih0ZXh0KXsKICAgICAgcmV0dXJuIHRleHQgPT09IHVuZGVmaW5lZCA/CiAgICAgICAgKHRoaXMubGVuZ3RoID4gMCA/IHRoaXNbMF0udGV4dENvbnRlbnQgOiBudWxsKSA6CiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7IHRoaXMudGV4dENvbnRlbnQgPSB0ZXh0IH0pCiAgICB9LAogICAgYXR0cjogZnVuY3Rpb24obmFtZSwgdmFsdWUpewogICAgICB2YXIgcmVzdWx0CiAgICAgIHJldHVybiAodHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPwogICAgICAgICh0aGlzLmxlbmd0aCA9PSAwIHx8IHRoaXNbMF0ubm9kZVR5cGUgIT09IDEgPyB1bmRlZmluZWQgOgogICAgICAgICAgKG5hbWUgPT0gJ3ZhbHVlJyAmJiB0aGlzWzBdLm5vZGVOYW1lID09ICdJTlBVVCcpID8gdGhpcy52YWwoKSA6CiAgICAgICAgICAoIShyZXN1bHQgPSB0aGlzWzBdLmdldEF0dHJpYnV0ZShuYW1lKSkgJiYgbmFtZSBpbiB0aGlzWzBdKSA/IHRoaXNbMF1bbmFtZV0gOiByZXN1bHQKICAgICAgICApIDoKICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXsKICAgICAgICAgIGlmICh0aGlzLm5vZGVUeXBlICE9PSAxKSByZXR1cm4KICAgICAgICAgIGlmIChpc09iamVjdChuYW1lKSkgZm9yIChrZXkgaW4gbmFtZSkgdGhpcy5zZXRBdHRyaWJ1dGUoa2V5LCBuYW1lW2tleV0pCiAgICAgICAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGZ1bmNBcmcodGhpcywgdmFsdWUsIGlkeCwgdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSkpKQogICAgICAgIH0pCiAgICB9LAogICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24obmFtZSl7CiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsgaWYgKHRoaXMubm9kZVR5cGUgPT09IDEpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpIH0pCiAgICB9LAogICAgcHJvcDogZnVuY3Rpb24obmFtZSwgdmFsdWUpewogICAgICByZXR1cm4gKHZhbHVlID09PSB1bmRlZmluZWQpID8KICAgICAgICAodGhpc1swXSA/IHRoaXNbMF1bbmFtZV0gOiB1bmRlZmluZWQpIDoKICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXsKICAgICAgICAgIHRoaXNbbmFtZV0gPSBmdW5jQXJnKHRoaXMsIHZhbHVlLCBpZHgsIHRoaXNbbmFtZV0pCiAgICAgICAgfSkKICAgIH0sCiAgICBkYXRhOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSl7CiAgICAgIHZhciBkYXRhID0gdGhpcy5hdHRyKCdkYXRhLScgKyBkYXNoZXJpemUobmFtZSksIHZhbHVlKQogICAgICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiB1bmRlZmluZWQKICAgIH0sCiAgICB2YWw6IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgcmV0dXJuICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/CiAgICAgICAgKHRoaXMubGVuZ3RoID4gMCA/IHRoaXNbMF0udmFsdWUgOiB1bmRlZmluZWQpIDoKICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oaWR4KXsKICAgICAgICAgIHRoaXMudmFsdWUgPSBmdW5jQXJnKHRoaXMsIHZhbHVlLCBpZHgsIHRoaXMudmFsdWUpCiAgICAgICAgfSkKICAgIH0sCiAgICBvZmZzZXQ6IGZ1bmN0aW9uKCl7CiAgICAgIGlmICh0aGlzLmxlbmd0aD09MCkgcmV0dXJuIG51bGwKICAgICAgdmFyIG9iaiA9IHRoaXNbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkKICAgICAgcmV0dXJuIHsKICAgICAgICBsZWZ0OiBvYmoubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCwKICAgICAgICB0b3A6IG9iai50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQsCiAgICAgICAgd2lkdGg6IG9iai53aWR0aCwKICAgICAgICBoZWlnaHQ6IG9iai5oZWlnaHQKICAgICAgfQogICAgfSwKICAgIGNzczogZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlKXsKICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHByb3BlcnR5ID09ICdzdHJpbmcnKQogICAgICAgIHJldHVybiAoCiAgICAgICAgICB0aGlzLmxlbmd0aCA9PSAwCiAgICAgICAgICAgID8gdW5kZWZpbmVkCiAgICAgICAgICAgIDogdGhpc1swXS5zdHlsZVtjYW1lbGl6ZShwcm9wZXJ0eSldIHx8IGdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgJycpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpKQoKICAgICAgdmFyIGNzcyA9ICcnCiAgICAgIGZvciAoa2V5IGluIHByb3BlcnR5KQogICAgICAgIGlmKHR5cGVvZiBwcm9wZXJ0eVtrZXldID09ICdzdHJpbmcnICYmIHByb3BlcnR5W2tleV0gPT0gJycpCiAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXsgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShkYXNoZXJpemUoa2V5KSkgfSkKICAgICAgICBlbHNlCiAgICAgICAgICBjc3MgKz0gZGFzaGVyaXplKGtleSkgKyAnOicgKyBtYXliZUFkZFB4KGtleSwgcHJvcGVydHlba2V5XSkgKyAnOycKCiAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT0gJ3N0cmluZycpCiAgICAgICAgaWYgKHZhbHVlID09ICcnKQogICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7IHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkoZGFzaGVyaXplKHByb3BlcnR5KSkgfSkKICAgICAgICBlbHNlCiAgICAgICAgICBjc3MgPSBkYXNoZXJpemUocHJvcGVydHkpICsgIjoiICsgbWF5YmVBZGRQeChwcm9wZXJ0eSwgdmFsdWUpCgogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7IHRoaXMuc3R5bGUuY3NzVGV4dCArPSAnOycgKyBjc3MgfSkKICAgIH0sCiAgICBpbmRleDogZnVuY3Rpb24oZWxlbWVudCl7CiAgICAgIHJldHVybiBlbGVtZW50ID8gdGhpcy5pbmRleE9mKCQoZWxlbWVudClbMF0pIDogdGhpcy5wYXJlbnQoKS5jaGlsZHJlbigpLmluZGV4T2YodGhpc1swXSkKICAgIH0sCiAgICBoYXNDbGFzczogZnVuY3Rpb24obmFtZSl7CiAgICAgIGlmICh0aGlzLmxlbmd0aCA8IDEpIHJldHVybiBmYWxzZQogICAgICBlbHNlIHJldHVybiBjbGFzc1JFKG5hbWUpLnRlc3QodGhpc1swXS5jbGFzc05hbWUpCiAgICB9LAogICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7CiAgICAgICAgY2xhc3NMaXN0ID0gW10KICAgICAgICB2YXIgY2xzID0gdGhpcy5jbGFzc05hbWUsIG5ld05hbWUgPSBmdW5jQXJnKHRoaXMsIG5hbWUsIGlkeCwgY2xzKQogICAgICAgIG5ld05hbWUuc3BsaXQoL1xzKy9nKS5mb3JFYWNoKGZ1bmN0aW9uKGtsYXNzKXsKICAgICAgICAgIGlmICghJCh0aGlzKS5oYXNDbGFzcyhrbGFzcykpIGNsYXNzTGlzdC5wdXNoKGtsYXNzKQogICAgICAgIH0sIHRoaXMpCiAgICAgICAgY2xhc3NMaXN0Lmxlbmd0aCAmJiAodGhpcy5jbGFzc05hbWUgKz0gKGNscyA/ICIgIiA6ICIiKSArIGNsYXNzTGlzdC5qb2luKCIgIikpCiAgICAgIH0pCiAgICB9LAogICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpewogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGlkeCl7CiAgICAgICAgaWYgKG5hbWUgPT09IHVuZGVmaW5lZCkKICAgICAgICAgIHJldHVybiB0aGlzLmNsYXNzTmFtZSA9ICcnCiAgICAgICAgY2xhc3NMaXN0ID0gdGhpcy5jbGFzc05hbWUKICAgICAgICBmdW5jQXJnKHRoaXMsIG5hbWUsIGlkeCwgY2xhc3NMaXN0KS5zcGxpdCgvXHMrL2cpLmZvckVhY2goZnVuY3Rpb24oa2xhc3MpewogICAgICAgICAgY2xhc3NMaXN0ID0gY2xhc3NMaXN0LnJlcGxhY2UoY2xhc3NSRShrbGFzcyksICIgIikKICAgICAgICB9KQogICAgICAgIHRoaXMuY2xhc3NOYW1lID0gY2xhc3NMaXN0LnRyaW0oKQogICAgICB9KQogICAgfSwKICAgIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbihuYW1lLCB3aGVuKXsKICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpewogICAgICAgIHZhciBuZXdOYW1lID0gZnVuY0FyZyh0aGlzLCBuYW1lLCBpZHgsIHRoaXMuY2xhc3NOYW1lKQogICAgICAgIDsod2hlbiA9PT0gdW5kZWZpbmVkID8gISQodGhpcykuaGFzQ2xhc3MobmV3TmFtZSkgOiB3aGVuKSA/CiAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKG5ld05hbWUpIDogJCh0aGlzKS5yZW1vdmVDbGFzcyhuZXdOYW1lKQogICAgICB9KQogICAgfQogIH0KCiAgLy8gR2VuZXJhdGUgdGhlIGB3aWR0aGAgYW5kIGBoZWlnaHRgIGZ1bmN0aW9ucwogIDtbJ3dpZHRoJywgJ2hlaWdodCddLmZvckVhY2goZnVuY3Rpb24oZGltZW5zaW9uKXsKICAgICQuZm5bZGltZW5zaW9uXSA9IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgdmFyIG9mZnNldCwgRGltZW5zaW9uID0gZGltZW5zaW9uLnJlcGxhY2UoLy4vLCBmdW5jdGlvbihtKXsgcmV0dXJuIG1bMF0udG9VcHBlckNhc2UoKSB9KQogICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXNbMF0gPT0gd2luZG93ID8gd2luZG93Wydpbm5lcicgKyBEaW1lbnNpb25dIDoKICAgICAgICB0aGlzWzBdID09IGRvY3VtZW50ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WydvZmZzZXQnICsgRGltZW5zaW9uXSA6CiAgICAgICAgKG9mZnNldCA9IHRoaXMub2Zmc2V0KCkpICYmIG9mZnNldFtkaW1lbnNpb25dCiAgICAgIGVsc2UgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpZHgpewogICAgICAgIHZhciBlbCA9ICQodGhpcykKICAgICAgICBlbC5jc3MoZGltZW5zaW9uLCBmdW5jQXJnKHRoaXMsIHZhbHVlLCBpZHgsIGVsW2RpbWVuc2lvbl0oKSkpCiAgICAgIH0pCiAgICB9CiAgfSkKCiAgZnVuY3Rpb24gaW5zZXJ0KG9wZXJhdG9yLCB0YXJnZXQsIG5vZGUpIHsKICAgIHZhciBwYXJlbnQgPSAob3BlcmF0b3IgJSAyKSA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnROb2RlCiAgICBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsCiAgICAgICFvcGVyYXRvciA/IHRhcmdldC5uZXh0U2libGluZyA6ICAgICAgLy8gYWZ0ZXIKICAgICAgb3BlcmF0b3IgPT0gMSA/IHBhcmVudC5maXJzdENoaWxkIDogICAvLyBwcmVwZW5kCiAgICAgIG9wZXJhdG9yID09IDIgPyB0YXJnZXQgOiAgICAgICAgICAgICAgLy8gYmVmb3JlCiAgICAgIG51bGwpIDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXBwZW5kCiAgICAgICQobm9kZSkucmVtb3ZlKCkKICB9CgogIGZ1bmN0aW9uIHRyYXZlcnNlTm9kZShub2RlLCBmdW4pIHsKICAgIGZ1bihub2RlKQogICAgZm9yICh2YXIga2V5IGluIG5vZGUuY2hpbGROb2RlcykgdHJhdmVyc2VOb2RlKG5vZGUuY2hpbGROb2Rlc1trZXldLCBmdW4pCiAgfQoKICAvLyBHZW5lcmF0ZSB0aGUgYGFmdGVyYCwgYHByZXBlbmRgLCBgYmVmb3JlYCwgYGFwcGVuZGAsCiAgLy8gYGluc2VydEFmdGVyYCwgYGluc2VydEJlZm9yZWAsIGBhcHBlbmRUb2AsIGFuZCBgcHJlcGVuZFRvYCBtZXRob2RzLgogIGFkamFjZW5jeU9wZXJhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgb3BlcmF0b3IpIHsKICAgICQuZm5ba2V5XSA9IGZ1bmN0aW9uKCl7CiAgICAgIC8vIGFyZ3VtZW50cyBjYW4gYmUgbm9kZXMsIGFycmF5cyBvZiBub2RlcywgWmVwdG8gb2JqZWN0cyBhbmQgSFRNTCBzdHJpbmdzCiAgICAgIHZhciBub2RlcyA9ICQubWFwKGFyZ3VtZW50cywgZnVuY3Rpb24obil7IHJldHVybiBpc09iamVjdChuKSA/IG4gOiB6ZXB0by5mcmFnbWVudChuKSB9KQogICAgICBpZiAobm9kZXMubGVuZ3RoIDwgMSkgcmV0dXJuIHRoaXMKICAgICAgdmFyIHNpemUgPSB0aGlzLmxlbmd0aCwgY29weUJ5Q2xvbmUgPSBzaXplID4gMSwgaW5SZXZlcnNlID0gb3BlcmF0b3IgPCAyCgogICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCB0YXJnZXQpewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHZhciBub2RlID0gbm9kZXNbaW5SZXZlcnNlID8gbm9kZXMubGVuZ3RoLWktMSA6IGldCiAgICAgICAgICB0cmF2ZXJzZU5vZGUobm9kZSwgZnVuY3Rpb24obm9kZSl7CiAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lICE9IG51bGwgJiYgbm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJyAmJiAoIW5vZGUudHlwZSB8fCBub2RlLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnKSkKICAgICAgICAgICAgICB3aW5kb3dbJ2V2YWwnXS5jYWxsKHdpbmRvdywgbm9kZS5pbm5lckhUTUwpCiAgICAgICAgICB9KQogICAgICAgICAgaWYgKGNvcHlCeUNsb25lICYmIGluZGV4IDwgc2l6ZSAtIDEpIG5vZGUgPSBub2RlLmNsb25lTm9kZSh0cnVlKQogICAgICAgICAgaW5zZXJ0KG9wZXJhdG9yLCB0YXJnZXQsIG5vZGUpCiAgICAgICAgfQogICAgICB9KQogICAgfQoKICAgICQuZm5bKG9wZXJhdG9yICUgMikgPyBrZXkrJ1RvJyA6ICdpbnNlcnQnKyhvcGVyYXRvciA/ICdCZWZvcmUnIDogJ0FmdGVyJyldID0gZnVuY3Rpb24oaHRtbCl7CiAgICAgICQoaHRtbClba2V5XSh0aGlzKQogICAgICByZXR1cm4gdGhpcwogICAgfQogIH0pCgogIHplcHRvLloucHJvdG90eXBlID0gJC5mbgoKICAvLyBFeHBvcnQgaW50ZXJuYWwgQVBJIGZ1bmN0aW9ucyBpbiB0aGUgYCQuemVwdG9gIG5hbWVzcGFjZQogIHplcHRvLmNhbWVsaXplID0gY2FtZWxpemUKICB6ZXB0by51bmlxID0gdW5pcQogICQuemVwdG8gPSB6ZXB0bwoKICByZXR1cm4gJAp9KSgpCgovLyBJZiBgJGAgaXMgbm90IHlldCBkZWZpbmVkLCBwb2ludCBpdCB0byBgWmVwdG9gCndpbmRvdy5aZXB0byA9IFplcHRvCickJyBpbiB3aW5kb3cgfHwgKHdpbmRvdy4kID0gWmVwdG8pCjsoZnVuY3Rpb24oJCl7CiAgdmFyICQkID0gJC56ZXB0by5xc2EsIGhhbmRsZXJzID0ge30sIF96aWQgPSAxLCBzcGVjaWFsRXZlbnRzPXt9CgogIHNwZWNpYWxFdmVudHMuY2xpY2sgPSBzcGVjaWFsRXZlbnRzLm1vdXNlZG93biA9IHNwZWNpYWxFdmVudHMubW91c2V1cCA9IHNwZWNpYWxFdmVudHMubW91c2Vtb3ZlID0gJ01vdXNlRXZlbnRzJwoKICBmdW5jdGlvbiB6aWQoZWxlbWVudCkgewogICAgcmV0dXJuIGVsZW1lbnQuX3ppZCB8fCAoZWxlbWVudC5femlkID0gX3ppZCsrKQogIH0KICBmdW5jdGlvbiBmaW5kSGFuZGxlcnMoZWxlbWVudCwgZXZlbnQsIGZuLCBzZWxlY3RvcikgewogICAgZXZlbnQgPSBwYXJzZShldmVudCkKICAgIGlmIChldmVudC5ucykgdmFyIG1hdGNoZXIgPSBtYXRjaGVyRm9yKGV2ZW50Lm5zKQogICAgcmV0dXJuIChoYW5kbGVyc1t6aWQoZWxlbWVudCldIHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24oaGFuZGxlcikgewogICAgICByZXR1cm4gaGFuZGxlcgogICAgICAgICYmICghZXZlbnQuZSAgfHwgaGFuZGxlci5lID09IGV2ZW50LmUpCiAgICAgICAgJiYgKCFldmVudC5ucyB8fCBtYXRjaGVyLnRlc3QoaGFuZGxlci5ucykpCiAgICAgICAgJiYgKCFmbiAgICAgICB8fCB6aWQoaGFuZGxlci5mbikgPT09IHppZChmbikpCiAgICAgICAgJiYgKCFzZWxlY3RvciB8fCBoYW5kbGVyLnNlbCA9PSBzZWxlY3RvcikKICAgIH0pCiAgfQogIGZ1bmN0aW9uIHBhcnNlKGV2ZW50KSB7CiAgICB2YXIgcGFydHMgPSAoJycgKyBldmVudCkuc3BsaXQoJy4nKQogICAgcmV0dXJuIHtlOiBwYXJ0c1swXSwgbnM6IHBhcnRzLnNsaWNlKDEpLnNvcnQoKS5qb2luKCcgJyl9CiAgfQogIGZ1bmN0aW9uIG1hdGNoZXJGb3IobnMpIHsKICAgIHJldHVybiBuZXcgUmVnRXhwKCcoPzpefCApJyArIG5zLnJlcGxhY2UoJyAnLCAnIC4qID8nKSArICcoPzogfCQpJykKICB9CgogIGZ1bmN0aW9uIGVhY2hFdmVudChldmVudHMsIGZuLCBpdGVyYXRvcil7CiAgICBpZiAoJC5pc09iamVjdChldmVudHMpKSAkLmVhY2goZXZlbnRzLCBpdGVyYXRvcikKICAgIGVsc2UgZXZlbnRzLnNwbGl0KC9ccy8pLmZvckVhY2goZnVuY3Rpb24odHlwZSl7IGl0ZXJhdG9yKHR5cGUsIGZuKSB9KQogIH0KCiAgZnVuY3Rpb24gYWRkKGVsZW1lbnQsIGV2ZW50cywgZm4sIHNlbGVjdG9yLCBnZXREZWxlZ2F0ZSwgY2FwdHVyZSl7CiAgICBjYXB0dXJlID0gISFjYXB0dXJlCiAgICB2YXIgaWQgPSB6aWQoZWxlbWVudCksIHNldCA9IChoYW5kbGVyc1tpZF0gfHwgKGhhbmRsZXJzW2lkXSA9IFtdKSkKICAgIGVhY2hFdmVudChldmVudHMsIGZuLCBmdW5jdGlvbihldmVudCwgZm4pewogICAgICB2YXIgZGVsZWdhdGUgPSBnZXREZWxlZ2F0ZSAmJiBnZXREZWxlZ2F0ZShmbiwgZXZlbnQpLAogICAgICAgIGNhbGxiYWNrID0gZGVsZWdhdGUgfHwgZm4KICAgICAgdmFyIHByb3h5Zm4gPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2suYXBwbHkoZWxlbWVudCwgW2V2ZW50XS5jb25jYXQoZXZlbnQuZGF0YSkpCiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIGV2ZW50LnByZXZlbnREZWZhdWx0KCkKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgIH0KICAgICAgdmFyIGhhbmRsZXIgPSAkLmV4dGVuZChwYXJzZShldmVudCksIHtmbjogZm4sIHByb3h5OiBwcm94eWZuLCBzZWw6IHNlbGVjdG9yLCBkZWw6IGRlbGVnYXRlLCBpOiBzZXQubGVuZ3RofSkKICAgICAgc2V0LnB1c2goaGFuZGxlcikKICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGhhbmRsZXIuZSwgcHJveHlmbiwgY2FwdHVyZSkKICAgIH0pCiAgfQogIGZ1bmN0aW9uIHJlbW92ZShlbGVtZW50LCBldmVudHMsIGZuLCBzZWxlY3Rvcil7CiAgICB2YXIgaWQgPSB6aWQoZWxlbWVudCkKICAgIGVhY2hFdmVudChldmVudHMgfHwgJycsIGZuLCBmdW5jdGlvbihldmVudCwgZm4pewogICAgICBmaW5kSGFuZGxlcnMoZWxlbWVudCwgZXZlbnQsIGZuLCBzZWxlY3RvcikuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKXsKICAgICAgICBkZWxldGUgaGFuZGxlcnNbaWRdW2hhbmRsZXIuaV0KICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoaGFuZGxlci5lLCBoYW5kbGVyLnByb3h5LCBmYWxzZSkKICAgICAgfSkKICAgIH0pCiAgfQoKICAkLmV2ZW50ID0geyBhZGQ6IGFkZCwgcmVtb3ZlOiByZW1vdmUgfQoKICAkLnByb3h5ID0gZnVuY3Rpb24oZm4sIGNvbnRleHQpIHsKICAgIGlmICgkLmlzRnVuY3Rpb24oZm4pKSB7CiAgICAgIHZhciBwcm94eUZuID0gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cykgfQogICAgICBwcm94eUZuLl96aWQgPSB6aWQoZm4pCiAgICAgIHJldHVybiBwcm94eUZuCiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZXh0ID09ICdzdHJpbmcnKSB7CiAgICAgIHJldHVybiAkLnByb3h5KGZuW2NvbnRleHRdLCBmbikKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoImV4cGVjdGVkIGZ1bmN0aW9uIikKICAgIH0KICB9CgogICQuZm4uYmluZCA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjayl7CiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CiAgICAgIGFkZCh0aGlzLCBldmVudCwgY2FsbGJhY2spCiAgICB9KQogIH0KICAkLmZuLnVuYmluZCA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjayl7CiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7CiAgICAgIHJlbW92ZSh0aGlzLCBldmVudCwgY2FsbGJhY2spCiAgICB9KQogIH0KICAkLmZuLm9uZSA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjayl7CiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGksIGVsZW1lbnQpewogICAgICBhZGQodGhpcywgZXZlbnQsIGNhbGxiYWNrLCBudWxsLCBmdW5jdGlvbihmbiwgdHlwZSl7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gZm4uYXBwbHkoZWxlbWVudCwgYXJndW1lbnRzKQogICAgICAgICAgcmVtb3ZlKGVsZW1lbnQsIHR5cGUsIGZuKQogICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgIH0KICAgICAgfSkKICAgIH0pCiAgfQoKICB2YXIgcmV0dXJuVHJ1ZSA9IGZ1bmN0aW9uKCl7cmV0dXJuIHRydWV9LAogICAgICByZXR1cm5GYWxzZSA9IGZ1bmN0aW9uKCl7cmV0dXJuIGZhbHNlfSwKICAgICAgZXZlbnRNZXRob2RzID0gewogICAgICAgIHByZXZlbnREZWZhdWx0OiAnaXNEZWZhdWx0UHJldmVudGVkJywKICAgICAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ICdpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCcsCiAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiAnaXNQcm9wYWdhdGlvblN0b3BwZWQnCiAgICAgIH0KICBmdW5jdGlvbiBjcmVhdGVQcm94eShldmVudCkgewogICAgdmFyIHByb3h5ID0gJC5leHRlbmQoe29yaWdpbmFsRXZlbnQ6IGV2ZW50fSwgZXZlbnQpCiAgICAkLmVhY2goZXZlbnRNZXRob2RzLCBmdW5jdGlvbihuYW1lLCBwcmVkaWNhdGUpIHsKICAgICAgcHJveHlbbmFtZV0gPSBmdW5jdGlvbigpewogICAgICAgIHRoaXNbcHJlZGljYXRlXSA9IHJldHVyblRydWUKICAgICAgICByZXR1cm4gZXZlbnRbbmFtZV0uYXBwbHkoZXZlbnQsIGFyZ3VtZW50cykKICAgICAgfQogICAgICBwcm94eVtwcmVkaWNhdGVdID0gcmV0dXJuRmFsc2UKICAgIH0pCiAgICByZXR1cm4gcHJveHkKICB9CgogIC8vIGVtdWxhdGVzIHRoZSAnZGVmYXVsdFByZXZlbnRlZCcgcHJvcGVydHkgZm9yIGJyb3dzZXJzIHRoYXQgaGF2ZSBub25lCiAgZnVuY3Rpb24gZml4KGV2ZW50KSB7CiAgICBpZiAoISgnZGVmYXVsdFByZXZlbnRlZCcgaW4gZXZlbnQpKSB7CiAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZQogICAgICB2YXIgcHJldmVudCA9IGV2ZW50LnByZXZlbnREZWZhdWx0CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZQogICAgICAgIHByZXZlbnQuY2FsbCh0aGlzKQogICAgICB9CiAgICB9CiAgfQoKICAkLmZuLmRlbGVnYXRlID0gZnVuY3Rpb24oc2VsZWN0b3IsIGV2ZW50LCBjYWxsYmFjayl7CiAgICB2YXIgY2FwdHVyZSA9IGZhbHNlCiAgICBpZihldmVudCA9PSAnYmx1cicgfHwgZXZlbnQgPT0gJ2ZvY3VzJyl7CiAgICAgIGlmKCQuaXN3ZWJraXQpCiAgICAgICAgZXZlbnQgPSBldmVudCA9PSAnYmx1cicgPyAnZm9jdXNvdXQnIDogZXZlbnQgPT0gJ2ZvY3VzJyA/ICdmb2N1c2luJyA6IGV2ZW50CiAgICAgIGVsc2UKICAgICAgICBjYXB0dXJlID0gdHJ1ZQogICAgfQoKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSwgZWxlbWVudCl7CiAgICAgIGFkZChlbGVtZW50LCBldmVudCwgY2FsbGJhY2ssIHNlbGVjdG9yLCBmdW5jdGlvbihmbil7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUpewogICAgICAgICAgdmFyIGV2dCwgbWF0Y2ggPSAkKGUudGFyZ2V0KS5jbG9zZXN0KHNlbGVjdG9yLCBlbGVtZW50KS5nZXQoMCkKICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICBldnQgPSAkLmV4dGVuZChjcmVhdGVQcm94eShlKSwge2N1cnJlbnRUYXJnZXQ6IG1hdGNoLCBsaXZlRmlyZWQ6IGVsZW1lbnR9KQogICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkobWF0Y2gsIFtldnRdLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpKQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgY2FwdHVyZSkKICAgIH0pCiAgfQogICQuZm4udW5kZWxlZ2F0ZSA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBldmVudCwgY2FsbGJhY2spewogICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpewogICAgICByZW1vdmUodGhpcywgZXZlbnQsIGNhbGxiYWNrLCBzZWxlY3RvcikKICAgIH0pCiAgfQoKICAkLmZuLmxpdmUgPSBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spewogICAgJChkb2N1bWVudC5ib2R5KS5kZWxlZ2F0ZSh0aGlzLnNlbGVjdG9yLCBldmVudCwgY2FsbGJhY2spCiAgICByZXR1cm4gdGhpcwogIH0KICAkLmZuLmRpZSA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjayl7CiAgICAkKGRvY3VtZW50LmJvZHkpLnVuZGVsZWdhdGUodGhpcy5zZWxlY3RvciwgZXZlbnQsIGNhbGxiYWNrKQogICAgcmV0dXJuIHRoaXMKICB9CgogICQuZm4ub24gPSBmdW5jdGlvbihldmVudCwgc2VsZWN0b3IsIGNhbGxiYWNrKXsKICAgIHJldHVybiBzZWxlY3RvciA9PSB1bmRlZmluZWQgfHwgJC5pc0Z1bmN0aW9uKHNlbGVjdG9yKSA/CiAgICAgIHRoaXMuYmluZChldmVudCwgc2VsZWN0b3IpIDogdGhpcy5kZWxlZ2F0ZShzZWxlY3RvciwgZXZlbnQsIGNhbGxiYWNrKQogIH0KICAkLmZuLm9mZiA9IGZ1bmN0aW9uKGV2ZW50LCBzZWxlY3RvciwgY2FsbGJhY2spewogICAgcmV0dXJuIHNlbGVjdG9yID09IHVuZGVmaW5lZCB8fCAkLmlzRnVuY3Rpb24oc2VsZWN0b3IpID8KICAgICAgdGhpcy51bmJpbmQoZXZlbnQsIHNlbGVjdG9yKSA6IHRoaXMudW5kZWxlZ2F0ZShzZWxlY3RvciwgZXZlbnQsIGNhbGxiYWNrKQogIH0KCiAgJC5mbi50cmlnZ2VyID0gZnVuY3Rpb24oZXZlbnQsIGRhdGEpewogICAgaWYgKHR5cGVvZiBldmVudCA9PSAnc3RyaW5nJykgZXZlbnQgPSAkLkV2ZW50KGV2ZW50KQogICAgZml4KGV2ZW50KQogICAgZXZlbnQuZGF0YSA9IGRhdGEKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXsKICAgICAgLy8gaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24gbWlnaHQgbm90IGJlIERPTSBlbGVtZW50cwogICAgICAvLyAodG9kbzogcG9zc2libHkgc3VwcG9ydCBldmVudHMgb24gcGxhaW4gb2xkIG9iamVjdHMpCiAgICAgIGlmKCdkaXNwYXRjaEV2ZW50JyBpbiB0aGlzKSB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpCiAgICB9KQogIH0KCiAgLy8gdHJpZ2dlcnMgZXZlbnQgaGFuZGxlcnMgb24gY3VycmVudCBlbGVtZW50IGp1c3QgYXMgaWYgYW4gZXZlbnQgb2NjdXJyZWQsCiAgLy8gZG9lc24ndCB0cmlnZ2VyIGFuIGFjdHVhbCBldmVudCwgZG9lc24ndCBidWJibGUKICAkLmZuLnRyaWdnZXJIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQsIGRhdGEpewogICAgdmFyIGUsIHJlc3VsdAogICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGksIGVsZW1lbnQpewogICAgICBlID0gY3JlYXRlUHJveHkodHlwZW9mIGV2ZW50ID09ICdzdHJpbmcnID8gJC5FdmVudChldmVudCkgOiBldmVudCkKICAgICAgZS5kYXRhID0gZGF0YQogICAgICBlLnRhcmdldCA9IGVsZW1lbnQKICAgICAgJC5lYWNoKGZpbmRIYW5kbGVycyhlbGVtZW50LCBldmVudC50eXBlIHx8IGV2ZW50KSwgZnVuY3Rpb24oaSwgaGFuZGxlcil7CiAgICAgICAgcmVzdWx0ID0gaGFuZGxlci5wcm94eShlKQogICAgICAgIGlmIChlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHJldHVybiBmYWxzZQogICAgICB9KQogICAgfSkKICAgIHJldHVybiByZXN1bHQKICB9CgogIC8vIHNob3J0Y3V0IG1ldGhvZHMgZm9yIGAuYmluZChldmVudCwgZm4pYCBmb3IgZWFjaCBldmVudCB0eXBlCiAgOygnZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrICcrCiAgJ21vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgJysKICAnY2hhbmdlIHNlbGVjdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yJykuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAkLmZuW2V2ZW50XSA9IGZ1bmN0aW9uKGNhbGxiYWNrKXsgcmV0dXJuIHRoaXMuYmluZChldmVudCwgY2FsbGJhY2spIH0KICB9KQoKICA7Wydmb2N1cycsICdibHVyJ10uZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7CiAgICAkLmZuW25hbWVdID0gZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgaWYgKGNhbGxiYWNrKSB0aGlzLmJpbmQobmFtZSwgY2FsbGJhY2spCiAgICAgIGVsc2UgaWYgKHRoaXMubGVuZ3RoKSB0cnkgeyB0aGlzLmdldCgwKVtuYW1lXSgpIH0gY2F0Y2goZSl7fQogICAgICByZXR1cm4gdGhpcwogICAgfQogIH0pCgogICQuRXZlbnQgPSBmdW5jdGlvbih0eXBlLCBwcm9wcykgewogICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoc3BlY2lhbEV2ZW50c1t0eXBlXSB8fCAnRXZlbnRzJyksIGJ1YmJsZXMgPSB0cnVlCiAgICBpZiAocHJvcHMpIGZvciAodmFyIG5hbWUgaW4gcHJvcHMpIChuYW1lID09ICdidWJibGVzJykgPyAoYnViYmxlcyA9ICEhcHJvcHNbbmFtZV0pIDogKGV2ZW50W25hbWVdID0gcHJvcHNbbmFtZV0pCiAgICBldmVudC5pbml0RXZlbnQodHlwZSwgYnViYmxlcywgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCkKICAgIHJldHVybiBldmVudAogIH0KCn0pKFplcHRvKQo7KGZ1bmN0aW9uKCQpewogIGZ1bmN0aW9uIGRldGVjdCh1YSl7CiAgICB2YXIgb3MgPSB0aGlzLm9zID0ge30sIGJyb3dzZXIgPSB0aGlzLmJyb3dzZXIgPSB7fSwKICAgICAgd2Via2l0ID0gdWEubWF0Y2goL1dlYktpdFwvKFtcZC5dKykvKSwKICAgICAgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZClccysoW1xkLl0rKS8pLAogICAgICBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NccyhbXGRfXSspLyksCiAgICAgIGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXHNPUylccyhbXGRfXSspLyksCiAgICAgIHdlYm9zID0gdWEubWF0Y2goLyh3ZWJPU3xocHdPUylbXHNcL10oW1xkLl0rKS8pLAogICAgICB0b3VjaHBhZCA9IHdlYm9zICYmIHVhLm1hdGNoKC9Ub3VjaFBhZC8pLAogICAgICBraW5kbGUgPSB1YS5tYXRjaCgvS2luZGxlXC8oW1xkLl0rKS8pLAogICAgICBzaWxrID0gdWEubWF0Y2goL1NpbGtcLyhbXGQuX10rKS8pLAogICAgICBibGFja2JlcnJ5ID0gdWEubWF0Y2goLyhCbGFja0JlcnJ5KS4qVmVyc2lvblwvKFtcZC5dKykvKQoKICAgIC8vIHRvZG8gY2xlYW4gdGhpcyB1cCB3aXRoIGEgYmV0dGVyIE9TL2Jyb3dzZXIKICAgIC8vIHNlcGFyYXRpb24uIHdlIG5lZWQgdG8gZGlzY2VybiBiZXR3ZWVuIG11bHRpcGxlCiAgICAvLyBicm93c2VycyBvbiBhbmRyb2lkLCBhbmQgZGVjaWRlIGlmIGtpbmRsZSBmaXJlIGluCiAgICAvLyBzaWxrIG1vZGUgaXMgYW5kcm9pZCBvciBub3QKCiAgICBpZiAoYnJvd3Nlci53ZWJraXQgPSAhIXdlYmtpdCkgYnJvd3Nlci52ZXJzaW9uID0gd2Via2l0WzFdCgogICAgaWYgKGFuZHJvaWQpIG9zLmFuZHJvaWQgPSB0cnVlLCBvcy52ZXJzaW9uID0gYW5kcm9pZFsyXQogICAgaWYgKGlwaG9uZSkgb3MuaW9zID0gb3MuaXBob25lID0gdHJ1ZSwgb3MudmVyc2lvbiA9IGlwaG9uZVsyXS5yZXBsYWNlKC9fL2csICcuJykKICAgIGlmIChpcGFkKSBvcy5pb3MgPSBvcy5pcGFkID0gdHJ1ZSwgb3MudmVyc2lvbiA9IGlwYWRbMl0ucmVwbGFjZSgvXy9nLCAnLicpCiAgICBpZiAod2Vib3MpIG9zLndlYm9zID0gdHJ1ZSwgb3MudmVyc2lvbiA9IHdlYm9zWzJdCiAgICBpZiAodG91Y2hwYWQpIG9zLnRvdWNocGFkID0gdHJ1ZQogICAgaWYgKGJsYWNrYmVycnkpIG9zLmJsYWNrYmVycnkgPSB0cnVlLCBvcy52ZXJzaW9uID0gYmxhY2tiZXJyeVsyXQogICAgaWYgKGtpbmRsZSkgb3Mua2luZGxlID0gdHJ1ZSwgb3MudmVyc2lvbiA9IGtpbmRsZVsxXQogICAgaWYgKHNpbGspIGJyb3dzZXIuc2lsayA9IHRydWUsIGJyb3dzZXIudmVyc2lvbiA9IHNpbGtbMV0KICAgIGlmICghc2lsayAmJiBvcy5hbmRyb2lkICYmIHVhLm1hdGNoKC9LaW5kbGUgRmlyZS8pKSBicm93c2VyLnNpbGsgPSB0cnVlCiAgfQoKICBkZXRlY3QuY2FsbCgkLCBuYXZpZ2F0b3IudXNlckFnZW50KQogIC8vIG1ha2UgYXZhaWxhYmxlIHRvIHVuaXQgdGVzdHMKICAkLl9fZGV0ZWN0ID0gZGV0ZWN0Cgp9KShaZXB0bykKOyhmdW5jdGlvbigkLCB1bmRlZmluZWQpewogIHZhciBwcmVmaXggPSAnJywgZXZlbnRQcmVmaXgsIGVuZEV2ZW50TmFtZSwgZW5kQW5pbWF0aW9uTmFtZSwKICAgIHZlbmRvcnMgPSB7IFdlYmtpdDogJ3dlYmtpdCcsIE1vejogJycsIE86ICdvJywgbXM6ICdNUycgfSwKICAgIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LCB0ZXN0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwKICAgIHN1cHBvcnRlZFRyYW5zZm9ybXMgPSAvXigodHJhbnNsYXRlfHJvdGF0ZXxzY2FsZSkoWHxZfFp8M2QpP3xtYXRyaXgoM2QpP3xwZXJzcGVjdGl2ZXxza2V3KFh8WSk/KSQvaSwKICAgIGNsZWFyUHJvcGVydGllcyA9IHt9CgogIGZ1bmN0aW9uIGRvd25jYXNlKHN0cikgeyByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkgfQogIGZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50KG5hbWUpIHsgcmV0dXJuIGV2ZW50UHJlZml4ID8gZXZlbnRQcmVmaXggKyBuYW1lIDogZG93bmNhc2UobmFtZSkgfQoKICAkLmVhY2godmVuZG9ycywgZnVuY3Rpb24odmVuZG9yLCBldmVudCl7CiAgICBpZiAodGVzdEVsLnN0eWxlW3ZlbmRvciArICdUcmFuc2l0aW9uUHJvcGVydHknXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHByZWZpeCA9ICctJyArIGRvd25jYXNlKHZlbmRvcikgKyAnLScKICAgICAgZXZlbnRQcmVmaXggPSBldmVudAogICAgICByZXR1cm4gZmFsc2UKICAgIH0KICB9KQoKICBjbGVhclByb3BlcnRpZXNbcHJlZml4ICsgJ3RyYW5zaXRpb24tcHJvcGVydHknXSA9CiAgY2xlYXJQcm9wZXJ0aWVzW3ByZWZpeCArICd0cmFuc2l0aW9uLWR1cmF0aW9uJ10gPQogIGNsZWFyUHJvcGVydGllc1twcmVmaXggKyAndHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nXSA9CiAgY2xlYXJQcm9wZXJ0aWVzW3ByZWZpeCArICdhbmltYXRpb24tbmFtZSddID0KICBjbGVhclByb3BlcnRpZXNbcHJlZml4ICsgJ2FuaW1hdGlvbi1kdXJhdGlvbiddID0gJycKCiAgJC5meCA9IHsKICAgIG9mZjogKGV2ZW50UHJlZml4ID09PSB1bmRlZmluZWQgJiYgdGVzdEVsLnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSA9PT0gdW5kZWZpbmVkKSwKICAgIGNzc1ByZWZpeDogcHJlZml4LAogICAgdHJhbnNpdGlvbkVuZDogbm9ybWFsaXplRXZlbnQoJ1RyYW5zaXRpb25FbmQnKSwKICAgIGFuaW1hdGlvbkVuZDogbm9ybWFsaXplRXZlbnQoJ0FuaW1hdGlvbkVuZCcpCiAgfQoKICAkLmZuLmFuaW1hdGUgPSBmdW5jdGlvbihwcm9wZXJ0aWVzLCBkdXJhdGlvbiwgZWFzZSwgY2FsbGJhY2spewogICAgaWYgKCQuaXNPYmplY3QoZHVyYXRpb24pKQogICAgICBlYXNlID0gZHVyYXRpb24uZWFzaW5nLCBjYWxsYmFjayA9IGR1cmF0aW9uLmNvbXBsZXRlLCBkdXJhdGlvbiA9IGR1cmF0aW9uLmR1cmF0aW9uCiAgICBpZiAoZHVyYXRpb24pIGR1cmF0aW9uID0gZHVyYXRpb24gLyAxMDAwCiAgICByZXR1cm4gdGhpcy5hbmltKHByb3BlcnRpZXMsIGR1cmF0aW9uLCBlYXNlLCBjYWxsYmFjaykKICB9CgogICQuZm4uYW5pbSA9IGZ1bmN0aW9uKHByb3BlcnRpZXMsIGR1cmF0aW9uLCBlYXNlLCBjYWxsYmFjayl7CiAgICB2YXIgdHJhbnNmb3JtcywgY3NzUHJvcGVydGllcyA9IHt9LCBrZXksIHRoYXQgPSB0aGlzLCB3cmFwcGVkQ2FsbGJhY2ssIGVuZEV2ZW50ID0gJC5meC50cmFuc2l0aW9uRW5kCiAgICBpZiAoZHVyYXRpb24gPT09IHVuZGVmaW5lZCkgZHVyYXRpb24gPSAwLjQKICAgIGlmICgkLmZ4Lm9mZikgZHVyYXRpb24gPSAwCgogICAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzID09ICdzdHJpbmcnKSB7CiAgICAgIC8vIGtleWZyYW1lIGFuaW1hdGlvbgogICAgICBjc3NQcm9wZXJ0aWVzW3ByZWZpeCArICdhbmltYXRpb24tbmFtZSddID0gcHJvcGVydGllcwogICAgICBjc3NQcm9wZXJ0aWVzW3ByZWZpeCArICdhbmltYXRpb24tZHVyYXRpb24nXSA9IGR1cmF0aW9uICsgJ3MnCiAgICAgIGVuZEV2ZW50ID0gJC5meC5hbmltYXRpb25FbmQKICAgIH0gZWxzZSB7CiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucwogICAgICBmb3IgKGtleSBpbiBwcm9wZXJ0aWVzKQogICAgICAgIGlmIChzdXBwb3J0ZWRUcmFuc2Zvcm1zLnRlc3Qoa2V5KSkgewogICAgICAgICAgdHJhbnNmb3JtcyB8fCAodHJhbnNmb3JtcyA9IFtdKQogICAgICAgICAgdHJhbnNmb3Jtcy5wdXNoKGtleSArICcoJyArIHByb3BlcnRpZXNba2V5XSArICcpJykKICAgICAgICB9CiAgICAgICAgZWxzZSBjc3NQcm9wZXJ0aWVzW2tleV0gPSBwcm9wZXJ0aWVzW2tleV0KCiAgICAgIGlmICh0cmFuc2Zvcm1zKSBjc3NQcm9wZXJ0aWVzW3ByZWZpeCArICd0cmFuc2Zvcm0nXSA9IHRyYW5zZm9ybXMuam9pbignICcpCiAgICAgIGlmICghJC5meC5vZmYgJiYgdHlwZW9mIHByb3BlcnRpZXMgPT09ICdvYmplY3QnKSB7CiAgICAgICAgY3NzUHJvcGVydGllc1twcmVmaXggKyAndHJhbnNpdGlvbi1wcm9wZXJ0eSddID0gT2JqZWN0LmtleXMocHJvcGVydGllcykuam9pbignLCAnKQogICAgICAgIGNzc1Byb3BlcnRpZXNbcHJlZml4ICsgJ3RyYW5zaXRpb24tZHVyYXRpb24nXSA9IGR1cmF0aW9uICsgJ3MnCiAgICAgICAgY3NzUHJvcGVydGllc1twcmVmaXggKyAndHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nXSA9IChlYXNlIHx8ICdsaW5lYXInKQogICAgICB9CiAgICB9CgogICAgd3JhcHBlZENhbGxiYWNrID0gZnVuY3Rpb24oZXZlbnQpewogICAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHJldHVybiAvLyBtYWtlcyBzdXJlIHRoZSBldmVudCBkaWRuJ3QgYnViYmxlIGZyb20gImJlbG93IgogICAgICAgICQoZXZlbnQudGFyZ2V0KS51bmJpbmQoZW5kRXZlbnQsIGFyZ3VtZW50cy5jYWxsZWUpCiAgICAgIH0KICAgICAgJCh0aGlzKS5jc3MoY2xlYXJQcm9wZXJ0aWVzKQogICAgICBjYWxsYmFjayAmJiBjYWxsYmFjay5jYWxsKHRoaXMpCiAgICB9CiAgICBpZiAoZHVyYXRpb24gPiAwKSB0aGlzLmJpbmQoZW5kRXZlbnQsIHdyYXBwZWRDYWxsYmFjaykKCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICB0aGF0LmNzcyhjc3NQcm9wZXJ0aWVzKQogICAgICBpZiAoZHVyYXRpb24gPD0gMCkgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICB0aGF0LmVhY2goZnVuY3Rpb24oKXsgd3JhcHBlZENhbGxiYWNrLmNhbGwodGhpcykgfSkKICAgICAgfSwgMCkKICAgIH0sIDApCgogICAgcmV0dXJuIHRoaXMKICB9CgogIHRlc3RFbCA9IG51bGwKfSkoWmVwdG8pCjsoZnVuY3Rpb24oJCl7CiAgdmFyIGpzb25wSUQgPSAwLAogICAgICBpc09iamVjdCA9ICQuaXNPYmplY3QsCiAgICAgIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LAogICAgICBrZXksCiAgICAgIG5hbWUsCiAgICAgIHJzY3JpcHQgPSAvPHNjcmlwdFxiW148XSooPzooPyE8XC9zY3JpcHQ+KTxbXjxdKikqPFwvc2NyaXB0Pi9naSwKICAgICAgc2NyaXB0VHlwZVJFID0gL14oPzp0ZXh0fGFwcGxpY2F0aW9uKVwvamF2YXNjcmlwdC9pLAogICAgICB4bWxUeXBlUkUgPSAvXig/OnRleHR8YXBwbGljYXRpb24pXC94bWwvaSwKICAgICAganNvblR5cGUgPSAnYXBwbGljYXRpb24vanNvbicsCiAgICAgIGh0bWxUeXBlID0gJ3RleHQvaHRtbCcsCiAgICAgIGJsYW5rUkUgPSAvXlxzKiQvCgogIC8vIHRyaWdnZXIgYSBjdXN0b20gZXZlbnQgYW5kIHJldHVybiBmYWxzZSBpZiBpdCB3YXMgY2FuY2VsbGVkCiAgZnVuY3Rpb24gdHJpZ2dlckFuZFJldHVybihjb250ZXh0LCBldmVudE5hbWUsIGRhdGEpIHsKICAgIHZhciBldmVudCA9ICQuRXZlbnQoZXZlbnROYW1lKQogICAgJChjb250ZXh0KS50cmlnZ2VyKGV2ZW50LCBkYXRhKQogICAgcmV0dXJuICFldmVudC5kZWZhdWx0UHJldmVudGVkCiAgfQoKICAvLyB0cmlnZ2VyIGFuIEFqYXggImdsb2JhbCIgZXZlbnQKICBmdW5jdGlvbiB0cmlnZ2VyR2xvYmFsKHNldHRpbmdzLCBjb250ZXh0LCBldmVudE5hbWUsIGRhdGEpIHsKICAgIGlmIChzZXR0aW5ncy5nbG9iYWwpIHJldHVybiB0cmlnZ2VyQW5kUmV0dXJuKGNvbnRleHQgfHwgZG9jdW1lbnQsIGV2ZW50TmFtZSwgZGF0YSkKICB9CgogIC8vIE51bWJlciBvZiBhY3RpdmUgQWpheCByZXF1ZXN0cwogICQuYWN0aXZlID0gMAoKICBmdW5jdGlvbiBhamF4U3RhcnQoc2V0dGluZ3MpIHsKICAgIGlmIChzZXR0aW5ncy5nbG9iYWwgJiYgJC5hY3RpdmUrKyA9PT0gMCkgdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgbnVsbCwgJ2FqYXhTdGFydCcpCiAgfQogIGZ1bmN0aW9uIGFqYXhTdG9wKHNldHRpbmdzKSB7CiAgICBpZiAoc2V0dGluZ3MuZ2xvYmFsICYmICEoLS0kLmFjdGl2ZSkpIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIG51bGwsICdhamF4U3RvcCcpCiAgfQoKICAvLyB0cmlnZ2VycyBhbiBleHRyYSBnbG9iYWwgZXZlbnQgImFqYXhCZWZvcmVTZW5kIiB0aGF0J3MgbGlrZSAiYWpheFNlbmQiIGJ1dCBjYW5jZWxhYmxlCiAgZnVuY3Rpb24gYWpheEJlZm9yZVNlbmQoeGhyLCBzZXR0aW5ncykgewogICAgdmFyIGNvbnRleHQgPSBzZXR0aW5ncy5jb250ZXh0CiAgICBpZiAoc2V0dGluZ3MuYmVmb3JlU2VuZC5jYWxsKGNvbnRleHQsIHhociwgc2V0dGluZ3MpID09PSBmYWxzZSB8fAogICAgICAgIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIGNvbnRleHQsICdhamF4QmVmb3JlU2VuZCcsIFt4aHIsIHNldHRpbmdzXSkgPT09IGZhbHNlKQogICAgICByZXR1cm4gZmFsc2UKCiAgICB0cmlnZ2VyR2xvYmFsKHNldHRpbmdzLCBjb250ZXh0LCAnYWpheFNlbmQnLCBbeGhyLCBzZXR0aW5nc10pCiAgfQogIGZ1bmN0aW9uIGFqYXhTdWNjZXNzKGRhdGEsIHhociwgc2V0dGluZ3MpIHsKICAgIHZhciBjb250ZXh0ID0gc2V0dGluZ3MuY29udGV4dCwgc3RhdHVzID0gJ3N1Y2Nlc3MnCiAgICBzZXR0aW5ncy5zdWNjZXNzLmNhbGwoY29udGV4dCwgZGF0YSwgc3RhdHVzLCB4aHIpCiAgICB0cmlnZ2VyR2xvYmFsKHNldHRpbmdzLCBjb250ZXh0LCAnYWpheFN1Y2Nlc3MnLCBbeGhyLCBzZXR0aW5ncywgZGF0YV0pCiAgICBhamF4Q29tcGxldGUoc3RhdHVzLCB4aHIsIHNldHRpbmdzKQogIH0KICAvLyB0eXBlOiAidGltZW91dCIsICJlcnJvciIsICJhYm9ydCIsICJwYXJzZXJlcnJvciIKICBmdW5jdGlvbiBhamF4RXJyb3IoZXJyb3IsIHR5cGUsIHhociwgc2V0dGluZ3MpIHsKICAgIHZhciBjb250ZXh0ID0gc2V0dGluZ3MuY29udGV4dAogICAgc2V0dGluZ3MuZXJyb3IuY2FsbChjb250ZXh0LCB4aHIsIHR5cGUsIGVycm9yKQogICAgdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgY29udGV4dCwgJ2FqYXhFcnJvcicsIFt4aHIsIHNldHRpbmdzLCBlcnJvcl0pCiAgICBhamF4Q29tcGxldGUodHlwZSwgeGhyLCBzZXR0aW5ncykKICB9CiAgLy8gc3RhdHVzOiAic3VjY2VzcyIsICJub3Rtb2RpZmllZCIsICJlcnJvciIsICJ0aW1lb3V0IiwgImFib3J0IiwgInBhcnNlcmVycm9yIgogIGZ1bmN0aW9uIGFqYXhDb21wbGV0ZShzdGF0dXMsIHhociwgc2V0dGluZ3MpIHsKICAgIHZhciBjb250ZXh0ID0gc2V0dGluZ3MuY29udGV4dAogICAgc2V0dGluZ3MuY29tcGxldGUuY2FsbChjb250ZXh0LCB4aHIsIHN0YXR1cykKICAgIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIGNvbnRleHQsICdhamF4Q29tcGxldGUnLCBbeGhyLCBzZXR0aW5nc10pCiAgICBhamF4U3RvcChzZXR0aW5ncykKICB9CgogIC8vIEVtcHR5IGZ1bmN0aW9uLCB1c2VkIGFzIGRlZmF1bHQgY2FsbGJhY2sKICBmdW5jdGlvbiBlbXB0eSgpIHt9CgogICQuYWpheEpTT05QID0gZnVuY3Rpb24ob3B0aW9ucyl7CiAgICB2YXIgY2FsbGJhY2tOYW1lID0gJ2pzb25wJyArICgrK2pzb25wSUQpLAogICAgICBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwKICAgICAgYWJvcnQgPSBmdW5jdGlvbigpewogICAgICAgICQoc2NyaXB0KS5yZW1vdmUoKQogICAgICAgIGlmIChjYWxsYmFja05hbWUgaW4gd2luZG93KSB3aW5kb3dbY2FsbGJhY2tOYW1lXSA9IGVtcHR5CiAgICAgICAgYWpheENvbXBsZXRlKCdhYm9ydCcsIHhociwgb3B0aW9ucykKICAgICAgfSwKICAgICAgeGhyID0geyBhYm9ydDogYWJvcnQgfSwgYWJvcnRUaW1lb3V0CgogICAgaWYgKG9wdGlvbnMuZXJyb3IpIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7CiAgICAgIHhoci5hYm9ydCgpCiAgICAgIG9wdGlvbnMuZXJyb3IoKQogICAgfQoKICAgIHdpbmRvd1tjYWxsYmFja05hbWVdID0gZnVuY3Rpb24oZGF0YSl7CiAgICAgIGNsZWFyVGltZW91dChhYm9ydFRpbWVvdXQpCiAgICAgICQoc2NyaXB0KS5yZW1vdmUoKQogICAgICBkZWxldGUgd2luZG93W2NhbGxiYWNrTmFtZV0KICAgICAgYWpheFN1Y2Nlc3MoZGF0YSwgeGhyLCBvcHRpb25zKQogICAgfQoKICAgIHNlcmlhbGl6ZURhdGEob3B0aW9ucykKICAgIHNjcmlwdC5zcmMgPSBvcHRpb25zLnVybC5yZXBsYWNlKC89XD8vLCAnPScgKyBjYWxsYmFja05hbWUpCiAgICAkKCdoZWFkJykuYXBwZW5kKHNjcmlwdCkKCiAgICBpZiAob3B0aW9ucy50aW1lb3V0ID4gMCkgYWJvcnRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgIHhoci5hYm9ydCgpCiAgICAgICAgYWpheENvbXBsZXRlKCd0aW1lb3V0JywgeGhyLCBvcHRpb25zKQogICAgICB9LCBvcHRpb25zLnRpbWVvdXQpCgogICAgcmV0dXJuIHhocgogIH0KCiAgJC5hamF4U2V0dGluZ3MgPSB7CiAgICAvLyBEZWZhdWx0IHR5cGUgb2YgcmVxdWVzdAogICAgdHlwZTogJ0dFVCcsCiAgICAvLyBDYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGJlZm9yZSByZXF1ZXN0CiAgICBiZWZvcmVTZW5kOiBlbXB0eSwKICAgIC8vIENhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMKICAgIHN1Y2Nlc3M6IGVtcHR5LAogICAgLy8gQ2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCB0aGUgdGhlIHNlcnZlciBkcm9wcyBlcnJvcgogICAgZXJyb3I6IGVtcHR5LAogICAgLy8gQ2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBvbiByZXF1ZXN0IGNvbXBsZXRlIChib3RoOiBlcnJvciBhbmQgc3VjY2VzcykKICAgIGNvbXBsZXRlOiBlbXB0eSwKICAgIC8vIFRoZSBjb250ZXh0IGZvciB0aGUgY2FsbGJhY2tzCiAgICBjb250ZXh0OiBudWxsLAogICAgLy8gV2hldGhlciB0byB0cmlnZ2VyICJnbG9iYWwiIEFqYXggZXZlbnRzCiAgICBnbG9iYWw6IHRydWUsCiAgICAvLyBUcmFuc3BvcnQKICAgIHhocjogZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpCiAgICB9LAogICAgLy8gTUlNRSB0eXBlcyBtYXBwaW5nCiAgICBhY2NlcHRzOiB7CiAgICAgIHNjcmlwdDogJ3RleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCcsCiAgICAgIGpzb246ICAganNvblR5cGUsCiAgICAgIHhtbDogICAgJ2FwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwnLAogICAgICBodG1sOiAgIGh0bWxUeXBlLAogICAgICB0ZXh0OiAgICd0ZXh0L3BsYWluJwogICAgfSwKICAgIC8vIFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgdG8gYW5vdGhlciBkb21haW4KICAgIGNyb3NzRG9tYWluOiBmYWxzZSwKICAgIC8vIERlZmF1bHQgdGltZW91dAogICAgdGltZW91dDogMAogIH0KCiAgZnVuY3Rpb24gbWltZVRvRGF0YVR5cGUobWltZSkgewogICAgcmV0dXJuIG1pbWUgJiYgKCBtaW1lID09IGh0bWxUeXBlID8gJ2h0bWwnIDoKICAgICAgbWltZSA9PSBqc29uVHlwZSA/ICdqc29uJyA6CiAgICAgIHNjcmlwdFR5cGVSRS50ZXN0KG1pbWUpID8gJ3NjcmlwdCcgOgogICAgICB4bWxUeXBlUkUudGVzdChtaW1lKSAmJiAneG1sJyApIHx8ICd0ZXh0JwogIH0KCiAgZnVuY3Rpb24gYXBwZW5kUXVlcnkodXJsLCBxdWVyeSkgewogICAgcmV0dXJuICh1cmwgKyAnJicgKyBxdWVyeSkucmVwbGFjZSgvWyY/XXsxLDJ9LywgJz8nKQogIH0KCiAgLy8gc2VyaWFsaXplIHBheWxvYWQgYW5kIGFwcGVuZCBpdCB0byB0aGUgVVJMIGZvciBHRVQgcmVxdWVzdHMKICBmdW5jdGlvbiBzZXJpYWxpemVEYXRhKG9wdGlvbnMpIHsKICAgIGlmIChpc09iamVjdChvcHRpb25zLmRhdGEpKSBvcHRpb25zLmRhdGEgPSAkLnBhcmFtKG9wdGlvbnMuZGF0YSkKICAgIGlmIChvcHRpb25zLmRhdGEgJiYgKCFvcHRpb25zLnR5cGUgfHwgb3B0aW9ucy50eXBlLnRvVXBwZXJDYXNlKCkgPT0gJ0dFVCcpKQogICAgICBvcHRpb25zLnVybCA9IGFwcGVuZFF1ZXJ5KG9wdGlvbnMudXJsLCBvcHRpb25zLmRhdGEpCiAgfQoKICAkLmFqYXggPSBmdW5jdGlvbihvcHRpb25zKXsKICAgIHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCBvcHRpb25zIHx8IHt9KQogICAgZm9yIChrZXkgaW4gJC5hamF4U2V0dGluZ3MpIGlmIChzZXR0aW5nc1trZXldID09PSB1bmRlZmluZWQpIHNldHRpbmdzW2tleV0gPSAkLmFqYXhTZXR0aW5nc1trZXldCgogICAgYWpheFN0YXJ0KHNldHRpbmdzKQoKICAgIGlmICghc2V0dGluZ3MuY3Jvc3NEb21haW4pIHNldHRpbmdzLmNyb3NzRG9tYWluID0gL14oW1x3LV0rOik/XC9cLyhbXlwvXSspLy50ZXN0KHNldHRpbmdzLnVybCkgJiYKICAgICAgUmVnRXhwLiQyICE9IHdpbmRvdy5sb2NhdGlvbi5ob3N0CgogICAgdmFyIGRhdGFUeXBlID0gc2V0dGluZ3MuZGF0YVR5cGUsIGhhc1BsYWNlaG9sZGVyID0gLz1cPy8udGVzdChzZXR0aW5ncy51cmwpCiAgICBpZiAoZGF0YVR5cGUgPT0gJ2pzb25wJyB8fCBoYXNQbGFjZWhvbGRlcikgewogICAgICBpZiAoIWhhc1BsYWNlaG9sZGVyKSBzZXR0aW5ncy51cmwgPSBhcHBlbmRRdWVyeShzZXR0aW5ncy51cmwsICdjYWxsYmFjaz0/JykKICAgICAgcmV0dXJuICQuYWpheEpTT05QKHNldHRpbmdzKQogICAgfQoKICAgIGlmICghc2V0dGluZ3MudXJsKSBzZXR0aW5ncy51cmwgPSB3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKQogICAgc2VyaWFsaXplRGF0YShzZXR0aW5ncykKCiAgICB2YXIgbWltZSA9IHNldHRpbmdzLmFjY2VwdHNbZGF0YVR5cGVdLAogICAgICAgIGJhc2VIZWFkZXJzID0geyB9LAogICAgICAgIHByb3RvY29sID0gL14oW1x3LV0rOilcL1wvLy50ZXN0KHNldHRpbmdzLnVybCkgPyBSZWdFeHAuJDEgOiB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wsCiAgICAgICAgeGhyID0gJC5hamF4U2V0dGluZ3MueGhyKCksIGFib3J0VGltZW91dAoKICAgIGlmICghc2V0dGluZ3MuY3Jvc3NEb21haW4pIGJhc2VIZWFkZXJzWydYLVJlcXVlc3RlZC1XaXRoJ10gPSAnWE1MSHR0cFJlcXVlc3QnCiAgICBpZiAobWltZSkgewogICAgICBiYXNlSGVhZGVyc1snQWNjZXB0J10gPSBtaW1lCiAgICAgIGlmIChtaW1lLmluZGV4T2YoJywnKSA+IC0xKSBtaW1lID0gbWltZS5zcGxpdCgnLCcsIDIpWzBdCiAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlKG1pbWUpCiAgICB9CiAgICBpZiAoc2V0dGluZ3MuY29udGVudFR5cGUgfHwgKHNldHRpbmdzLmRhdGEgJiYgc2V0dGluZ3MudHlwZS50b1VwcGVyQ2FzZSgpICE9ICdHRVQnKSkKICAgICAgYmFzZUhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gKHNldHRpbmdzLmNvbnRlbnRUeXBlIHx8ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKQogICAgc2V0dGluZ3MuaGVhZGVycyA9ICQuZXh0ZW5kKGJhc2VIZWFkZXJzLCBzZXR0aW5ncy5oZWFkZXJzIHx8IHt9KQoKICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpewogICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCkgewogICAgICAgIGNsZWFyVGltZW91dChhYm9ydFRpbWVvdXQpCiAgICAgICAgdmFyIHJlc3VsdCwgZXJyb3IgPSBmYWxzZQogICAgICAgIGlmICgoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkgfHwgeGhyLnN0YXR1cyA9PSAzMDQgfHwgKHhoci5zdGF0dXMgPT0gMCAmJiBwcm90b2NvbCA9PSAnZmlsZTonKSkgewogICAgICAgICAgZGF0YVR5cGUgPSBkYXRhVHlwZSB8fCBtaW1lVG9EYXRhVHlwZSh4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ2NvbnRlbnQtdHlwZScpKQogICAgICAgICAgcmVzdWx0ID0geGhyLnJlc3BvbnNlVGV4dAoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmIChkYXRhVHlwZSA9PSAnc2NyaXB0JykgICAgKDEsZXZhbCkocmVzdWx0KQogICAgICAgICAgICBlbHNlIGlmIChkYXRhVHlwZSA9PSAneG1sJykgIHJlc3VsdCA9IHhoci5yZXNwb25zZVhNTAogICAgICAgICAgICBlbHNlIGlmIChkYXRhVHlwZSA9PSAnanNvbicpIHJlc3VsdCA9IGJsYW5rUkUudGVzdChyZXN1bHQpID8gbnVsbCA6IEpTT04ucGFyc2UocmVzdWx0KQogICAgICAgICAgfSBjYXRjaCAoZSkgeyBlcnJvciA9IGUgfQoKICAgICAgICAgIGlmIChlcnJvcikgYWpheEVycm9yKGVycm9yLCAncGFyc2VyZXJyb3InLCB4aHIsIHNldHRpbmdzKQogICAgICAgICAgZWxzZSBhamF4U3VjY2VzcyhyZXN1bHQsIHhociwgc2V0dGluZ3MpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFqYXhFcnJvcihudWxsLCAnZXJyb3InLCB4aHIsIHNldHRpbmdzKQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHZhciBhc3luYyA9ICdhc3luYycgaW4gc2V0dGluZ3MgPyBzZXR0aW5ncy5hc3luYyA6IHRydWUKICAgIHhoci5vcGVuKHNldHRpbmdzLnR5cGUsIHNldHRpbmdzLnVybCwgYXN5bmMpCgogICAgZm9yIChuYW1lIGluIHNldHRpbmdzLmhlYWRlcnMpIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHNldHRpbmdzLmhlYWRlcnNbbmFtZV0pCgogICAgaWYgKGFqYXhCZWZvcmVTZW5kKHhociwgc2V0dGluZ3MpID09PSBmYWxzZSkgewogICAgICB4aHIuYWJvcnQoKQogICAgICByZXR1cm4gZmFsc2UKICAgIH0KCiAgICBpZiAoc2V0dGluZ3MudGltZW91dCA+IDApIGFib3J0VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHkKICAgICAgICB4aHIuYWJvcnQoKQogICAgICAgIGFqYXhFcnJvcihudWxsLCAndGltZW91dCcsIHhociwgc2V0dGluZ3MpCiAgICAgIH0sIHNldHRpbmdzLnRpbWVvdXQpCgogICAgLy8gYXZvaWQgc2VuZGluZyBlbXB0eSBzdHJpbmcgKCMzMTkpCiAgICB4aHIuc2VuZChzZXR0aW5ncy5kYXRhID8gc2V0dGluZ3MuZGF0YSA6IG51bGwpCiAgICByZXR1cm4geGhyCiAgfQoKICAkLmdldCA9IGZ1bmN0aW9uKHVybCwgc3VjY2Vzcyl7IHJldHVybiAkLmFqYXgoeyB1cmw6IHVybCwgc3VjY2Vzczogc3VjY2VzcyB9KSB9CgogICQucG9zdCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgc3VjY2VzcywgZGF0YVR5cGUpewogICAgaWYgKCQuaXNGdW5jdGlvbihkYXRhKSkgZGF0YVR5cGUgPSBkYXRhVHlwZSB8fCBzdWNjZXNzLCBzdWNjZXNzID0gZGF0YSwgZGF0YSA9IG51bGwKICAgIHJldHVybiAkLmFqYXgoeyB0eXBlOiAnUE9TVCcsIHVybDogdXJsLCBkYXRhOiBkYXRhLCBzdWNjZXNzOiBzdWNjZXNzLCBkYXRhVHlwZTogZGF0YVR5cGUgfSkKICB9CgogICQuZ2V0SlNPTiA9IGZ1bmN0aW9uKHVybCwgc3VjY2Vzcyl7CiAgICByZXR1cm4gJC5hamF4KHsgdXJsOiB1cmwsIHN1Y2Nlc3M6IHN1Y2Nlc3MsIGRhdGFUeXBlOiAnanNvbicgfSkKICB9CgogICQuZm4ubG9hZCA9IGZ1bmN0aW9uKHVybCwgc3VjY2Vzcyl7CiAgICBpZiAoIXRoaXMubGVuZ3RoKSByZXR1cm4gdGhpcwogICAgdmFyIHNlbGYgPSB0aGlzLCBwYXJ0cyA9IHVybC5zcGxpdCgvXHMvKSwgc2VsZWN0b3IKICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB1cmwgPSBwYXJ0c1swXSwgc2VsZWN0b3IgPSBwYXJ0c1sxXQogICAgJC5nZXQodXJsLCBmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgIHNlbGYuaHRtbChzZWxlY3RvciA/CiAgICAgICAgJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuaHRtbChyZXNwb25zZS5yZXBsYWNlKHJzY3JpcHQsICIiKSkuZmluZChzZWxlY3RvcikuaHRtbCgpCiAgICAgICAgOiByZXNwb25zZSkKICAgICAgc3VjY2VzcyAmJiBzdWNjZXNzLmNhbGwoc2VsZikKICAgIH0pCiAgICByZXR1cm4gdGhpcwogIH0KCiAgdmFyIGVzY2FwZSA9IGVuY29kZVVSSUNvbXBvbmVudAoKICBmdW5jdGlvbiBzZXJpYWxpemUocGFyYW1zLCBvYmosIHRyYWRpdGlvbmFsLCBzY29wZSl7CiAgICB2YXIgYXJyYXkgPSAkLmlzQXJyYXkob2JqKQogICAgJC5lYWNoKG9iaiwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgICBpZiAoc2NvcGUpIGtleSA9IHRyYWRpdGlvbmFsID8gc2NvcGUgOiBzY29wZSArICdbJyArIChhcnJheSA/ICcnIDoga2V5KSArICddJwogICAgICAvLyBoYW5kbGUgZGF0YSBpbiBzZXJpYWxpemVBcnJheSgpIGZvcm1hdAogICAgICBpZiAoIXNjb3BlICYmIGFycmF5KSBwYXJhbXMuYWRkKHZhbHVlLm5hbWUsIHZhbHVlLnZhbHVlKQogICAgICAvLyByZWN1cnNlIGludG8gbmVzdGVkIG9iamVjdHMKICAgICAgZWxzZSBpZiAodHJhZGl0aW9uYWwgPyAkLmlzQXJyYXkodmFsdWUpIDogaXNPYmplY3QodmFsdWUpKQogICAgICAgIHNlcmlhbGl6ZShwYXJhbXMsIHZhbHVlLCB0cmFkaXRpb25hbCwga2V5KQogICAgICBlbHNlIHBhcmFtcy5hZGQoa2V5LCB2YWx1ZSkKICAgIH0pCiAgfQoKICAkLnBhcmFtID0gZnVuY3Rpb24ob2JqLCB0cmFkaXRpb25hbCl7CiAgICB2YXIgcGFyYW1zID0gW10KICAgIHBhcmFtcy5hZGQgPSBmdW5jdGlvbihrLCB2KXsgdGhpcy5wdXNoKGVzY2FwZShrKSArICc9JyArIGVzY2FwZSh2KSkgfQogICAgc2VyaWFsaXplKHBhcmFtcywgb2JqLCB0cmFkaXRpb25hbCkKICAgIHJldHVybiBwYXJhbXMuam9pbignJicpLnJlcGxhY2UoJyUyMCcsICcrJykKICB9Cn0pKFplcHRvKQo7KGZ1bmN0aW9uICgkKSB7CiAgJC5mbi5zZXJpYWxpemVBcnJheSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciByZXN1bHQgPSBbXSwgZWwKICAgICQoIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuZ2V0KDApLmVsZW1lbnRzKSApLmVhY2goZnVuY3Rpb24gKCkgewogICAgICBlbCA9ICQodGhpcykKICAgICAgdmFyIHR5cGUgPSBlbC5hdHRyKCd0eXBlJykKICAgICAgaWYgKHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPSAnZmllbGRzZXQnICYmCiAgICAgICAgIXRoaXMuZGlzYWJsZWQgJiYgdHlwZSAhPSAnc3VibWl0JyAmJiB0eXBlICE9ICdyZXNldCcgJiYgdHlwZSAhPSAnYnV0dG9uJyAmJgogICAgICAgICgodHlwZSAhPSAncmFkaW8nICYmIHR5cGUgIT0gJ2NoZWNrYm94JykgfHwgdGhpcy5jaGVja2VkKSkKICAgICAgICByZXN1bHQucHVzaCh7CiAgICAgICAgICBuYW1lOiBlbC5hdHRyKCduYW1lJyksCiAgICAgICAgICB2YWx1ZTogZWwudmFsKCkKICAgICAgICB9KQogICAgfSkKICAgIHJldHVybiByZXN1bHQKICB9CgogICQuZm4uc2VyaWFsaXplID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHJlc3VsdCA9IFtdCiAgICB0aGlzLnNlcmlhbGl6ZUFycmF5KCkuZm9yRWFjaChmdW5jdGlvbiAoZWxtKSB7CiAgICAgIHJlc3VsdC5wdXNoKCBlbmNvZGVVUklDb21wb25lbnQoZWxtLm5hbWUpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGVsbS52YWx1ZSkgKQogICAgfSkKICAgIHJldHVybiByZXN1bHQuam9pbignJicpCiAgfQoKICAkLmZuLnN1Ym1pdCA9IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgaWYgKGNhbGxiYWNrKSB0aGlzLmJpbmQoJ3N1Ym1pdCcsIGNhbGxiYWNrKQogICAgZWxzZSBpZiAodGhpcy5sZW5ndGgpIHsKICAgICAgdmFyIGV2ZW50ID0gJC5FdmVudCgnc3VibWl0JykKICAgICAgdGhpcy5lcSgwKS50cmlnZ2VyKGV2ZW50KQogICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHRoaXMuZ2V0KDApLnN1Ym1pdCgpCiAgICB9CiAgICByZXR1cm4gdGhpcwogIH0KCn0pKFplcHRvKQo7KGZ1bmN0aW9uKCQpewogIHZhciB0b3VjaCA9IHt9LCB0b3VjaFRpbWVvdXQKCiAgZnVuY3Rpb24gcGFyZW50SWZUZXh0KG5vZGUpewogICAgcmV0dXJuICd0YWdOYW1lJyBpbiBub2RlID8gbm9kZSA6IG5vZGUucGFyZW50Tm9kZQogIH0KCiAgZnVuY3Rpb24gc3dpcGVEaXJlY3Rpb24oeDEsIHgyLCB5MSwgeTIpewogICAgdmFyIHhEZWx0YSA9IE1hdGguYWJzKHgxIC0geDIpLCB5RGVsdGEgPSBNYXRoLmFicyh5MSAtIHkyKQogICAgcmV0dXJuIHhEZWx0YSA+PSB5RGVsdGEgPyAoeDEgLSB4MiA+IDAgPyAnTGVmdCcgOiAnUmlnaHQnKSA6ICh5MSAtIHkyID4gMCA/ICdVcCcgOiAnRG93bicpCiAgfQoKICB2YXIgbG9uZ1RhcERlbGF5ID0gNzUwLCBsb25nVGFwVGltZW91dAoKICBmdW5jdGlvbiBsb25nVGFwKCl7CiAgICBsb25nVGFwVGltZW91dCA9IG51bGwKICAgIGlmICh0b3VjaC5sYXN0KSB7CiAgICAgIHRvdWNoLmVsLnRyaWdnZXIoJ2xvbmdUYXAnKQogICAgICB0b3VjaCA9IHt9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBjYW5jZWxMb25nVGFwKCl7CiAgICBpZiAobG9uZ1RhcFRpbWVvdXQpIGNsZWFyVGltZW91dChsb25nVGFwVGltZW91dCkKICAgIGxvbmdUYXBUaW1lb3V0ID0gbnVsbAogIH0KCiAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICAgIHZhciBub3csIGRlbHRhCgogICAgJChkb2N1bWVudC5ib2R5KS5iaW5kKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24oZSl7CiAgICAgIG5vdyA9IERhdGUubm93KCkKICAgICAgZGVsdGEgPSBub3cgLSAodG91Y2gubGFzdCB8fCBub3cpCiAgICAgIHRvdWNoLmVsID0gJChwYXJlbnRJZlRleHQoZS50b3VjaGVzWzBdLnRhcmdldCkpCiAgICAgIHRvdWNoVGltZW91dCAmJiBjbGVhclRpbWVvdXQodG91Y2hUaW1lb3V0KQogICAgICB0b3VjaC54MSA9IGUudG91Y2hlc1swXS5wYWdlWAogICAgICB0b3VjaC55MSA9IGUudG91Y2hlc1swXS5wYWdlWQogICAgICBpZiAoZGVsdGEgPiAwICYmIGRlbHRhIDw9IDI1MCkgdG91Y2guaXNEb3VibGVUYXAgPSB0cnVlCiAgICAgIHRvdWNoLmxhc3QgPSBub3cKICAgICAgbG9uZ1RhcFRpbWVvdXQgPSBzZXRUaW1lb3V0KGxvbmdUYXAsIGxvbmdUYXBEZWxheSkKICAgIH0pLmJpbmQoJ3RvdWNobW92ZScsIGZ1bmN0aW9uKGUpewogICAgICBjYW5jZWxMb25nVGFwKCkKICAgICAgdG91Y2gueDIgPSBlLnRvdWNoZXNbMF0ucGFnZVgKICAgICAgdG91Y2gueTIgPSBlLnRvdWNoZXNbMF0ucGFnZVkKICAgIH0pLmJpbmQoJ3RvdWNoZW5kJywgZnVuY3Rpb24oZSl7CiAgICAgICBjYW5jZWxMb25nVGFwKCkKCiAgICAgIC8vIGRvdWJsZSB0YXAgKHRhcHBlZCB0d2ljZSB3aXRoaW4gMjUwbXMpCiAgICAgIGlmICh0b3VjaC5pc0RvdWJsZVRhcCkgewogICAgICAgIHRvdWNoLmVsLnRyaWdnZXIoJ2RvdWJsZVRhcCcpCiAgICAgICAgdG91Y2ggPSB7fQoKICAgICAgLy8gc3dpcGUKICAgICAgfSBlbHNlIGlmICgodG91Y2gueDIgJiYgTWF0aC5hYnModG91Y2gueDEgLSB0b3VjaC54MikgPiAzMCkgfHwKICAgICAgICAgICAgICAgICAodG91Y2gueTIgJiYgTWF0aC5hYnModG91Y2gueTEgLSB0b3VjaC55MikgPiAzMCkpIHsKICAgICAgICB0b3VjaC5lbC50cmlnZ2VyKCdzd2lwZScpICYmCiAgICAgICAgICB0b3VjaC5lbC50cmlnZ2VyKCdzd2lwZScgKyAoc3dpcGVEaXJlY3Rpb24odG91Y2gueDEsIHRvdWNoLngyLCB0b3VjaC55MSwgdG91Y2gueTIpKSkKICAgICAgICB0b3VjaCA9IHt9CgogICAgICAvLyBub3JtYWwgdGFwCiAgICAgIH0gZWxzZSBpZiAoJ2xhc3QnIGluIHRvdWNoKSB7CiAgICAgICAgdG91Y2guZWwudHJpZ2dlcigndGFwJykKCiAgICAgICAgdG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgdG91Y2hUaW1lb3V0ID0gbnVsbAogICAgICAgICAgdG91Y2guZWwudHJpZ2dlcignc2luZ2xlVGFwJykKICAgICAgICAgIHRvdWNoID0ge30KICAgICAgICB9LCAyNTApCiAgICAgIH0KICAgIH0pLmJpbmQoJ3RvdWNoY2FuY2VsJywgZnVuY3Rpb24oKXsKICAgICAgaWYgKHRvdWNoVGltZW91dCkgY2xlYXJUaW1lb3V0KHRvdWNoVGltZW91dCkKICAgICAgaWYgKGxvbmdUYXBUaW1lb3V0KSBjbGVhclRpbWVvdXQobG9uZ1RhcFRpbWVvdXQpCiAgICAgIGxvbmdUYXBUaW1lb3V0ID0gdG91Y2hUaW1lb3V0ID0gbnVsbAogICAgICB0b3VjaCA9IHt9CiAgICB9KQogIH0pCgogIDtbJ3N3aXBlJywgJ3N3aXBlTGVmdCcsICdzd2lwZVJpZ2h0JywgJ3N3aXBlVXAnLCAnc3dpcGVEb3duJywgJ2RvdWJsZVRhcCcsICd0YXAnLCAnc2luZ2xlVGFwJywgJ2xvbmdUYXAnXS5mb3JFYWNoKGZ1bmN0aW9uKG0pewogICAgJC5mblttXSA9IGZ1bmN0aW9uKGNhbGxiYWNrKXsgcmV0dXJuIHRoaXMuYmluZChtLCBjYWxsYmFjaykgfQogIH0pCn0pKFplcHRvKQo7LypnbG9iYWxzIGpRdWVyeSxaZXB0byAqLwoKOyhmdW5jdGlvbigpIHsKCiAgICB3aW5kb3cuemVwUXVlcnkgPSB3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0bzsKICAgIHZhciAkID0gd2luZG93LnplcFF1ZXJ5OwoKICAgIC8vIFplcHRvIGRvZXNuJ3QgaGF2ZSBvdXRlckhlaWdodAogICAgJC5mbi5vdXRlckhlaWdodCA9ICQuZm4ub3V0ZXJIZWlnaHQgfHwgJC5mbi5oZWlnaHQ7Cn0oKSk7Cjt2YXIgVXRpbHMgPSAoZnVuY3Rpb24oKSB7CiAgInVzZSBzdHJpY3QiOwoKICBTdHJpbmcucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChvKSB7CiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9ceyhbXnt9XSopXH0vZywKICAgICAgZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICB2YXIgciA9IG9bYl07CiAgICAgICAgcmV0dXJuIHR5cGVvZiByID09PSAic3RyaW5nIiB8fCB0eXBlb2YgciA9PT0gIm51bWJlciIgPyByIDogYTsKICAgICAgfQogICAgKTsKICB9OwoKICBmdW5jdGlvbiByZ2JTdHJpbmcocixnLGIpIHsKICAgIHJldHVybiAicmdiKHtyfSx7Z30se2J9KSIuZm9ybWF0KHtyOnIsZzpnLGI6Yn0pOwogIH0KICAKICBmdW5jdGlvbiBwYXJzZUNzc1VybChpbnB1dCkgewogICAvLyByZW1vdmUgcXVvdGVzIGFuZCB3cmFwcGluZyB1cmwoKQogICByZXR1cm4gaW5wdXQucmVwbGFjZSgvIi9nLCIiKS5yZXBsYWNlKC91cmxcKHxcKSQvaWcsICIiKTsKICB9CgogIHJldHVybiB7CiAgICBwYXJzZUNzc1VybCA6IHBhcnNlQ3NzVXJsLAogICAgcmdiU3RyaW5nIDogcmdiU3RyaW5nCiAgfTsKCn0oKSk7Oy8qZ2xvYmFscyBSZXRyb2Z5LF8sJCAqLwp2YXIgQ29udGV4dCA9IGZ1bmN0aW9uKCkgewogICAgInVzZSBzdHJpY3QiOwoKICAgIC8vIGRlZmF1bHRzCiAgICB2YXIgcGFsZXR0ZSA9IFJldHJvZnkuQ29sb3JzLkM2NDsKICAgIHZhciB3ZWlnaHRzID0ge307CiAgICBfLmVhY2gocGFsZXR0ZSwgZnVuY3Rpb24oY29sb3IsIGtleSkgeyB3ZWlnaHRzW2tleV0gPSAxOyB9KTsKCiAgICByZXR1cm4gewogICAgICAgIGVsZW1lbnRzIDogJCgpLAogICAgICAgIHBhbGV0dGUgOiBwYWxldHRlLAogICAgICAgIHdlaWdodHMgOiB3ZWlnaHRzLAogICAgICAgIHRocmVzaG9sZCA6IDEKICAgIH07Cn07CjsvKmdsb2JhbCAgZG9jdW1lbnQsIHplcFF1ZXJ5LCBfLCBjb25zb2xlLCBSR0JDb2xvciwgVXRpbHMgKi8KKGZ1bmN0aW9uKCQpIHsKICAidXNlIHN0cmljdCI7CgogIHZhciBSZXRyb2Z5ID0gZnVuY3Rpb24oY29udGV4dCkgewoKICAgIGZ1bmN0aW9uIHJldHJvZnkoZWxlbWVudCkgewogICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpOwogICAgICAvL2NvbnNvbGUubG9nKGVsZW1lbnQudGFnTmFtZSk7CiAgICAgIHN3aXRjaCAoZWxlbWVudC50YWdOYW1lKQogICAgICB7CiAgICAgICAgLy8gc2tpcCB0aGVzZQogICAgICAgIGNhc2UgIkhUTUwiOgogICAgICAgIGNhc2UgIkhFQUQiOgogICAgICAgIGNhc2UgIlNUWUxFIjoKICAgICAgICBjYXNlICJTQ1JJUFQiOgogICAgICAgIGNhc2UgIlRJVExFIjoKICAgICAgICBjYXNlICJNRVRBIjoKICAgICAgICBjYXNlICJMSU5LIjoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICJJTUciOgogICAgICAgICAgY29udmVydEltYWdlKCRlbGVtZW50KTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgY29udmVydEdlbmVyaWMoJGVsZW1lbnQpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjb252ZXJ0R2VuZXJpYygkZWxlbWVudCkgewogICAgICBjb252ZXJ0Q29sb3JzKCRlbGVtZW50KTsKICAgICAgY29udmVydEJhY2tncm91bmQoJGVsZW1lbnQpOwogICAgICBjb252ZXJ0Rm9udCgkZWxlbWVudCk7CiAgICB9CgogICAgZnVuY3Rpb24gY29udmVydENvbG9ycyhlbCkgewogICAgICB2YXIgY29sb3JQcm9wcyA9IFsiY29sb3IiLCAiYmFja2dyb3VuZC1jb2xvciIsICJib3JkZXItY29sb3IiXTsKICAgICAgdmFyICRlbCA9ICQoZWwpOwogICAgICAkLmVhY2goY29sb3JQcm9wcywgZnVuY3Rpb24oaSxwcm9wTmFtZSkgewogICAgICAgIHZhciBvcmdDb2xvciA9ICRlbC5kYXRhKCJvcmlnaW5hbC0iICsgcHJvcE5hbWUpOwogICAgICAgIHZhciBjb2xvciA9IG9yZ0NvbG9yIHx8ICRlbC5jc3MocHJvcE5hbWUpOwogICAgICAgIGlmICghb3JnQ29sb3IpICRlbC5kYXRhKCJvcmlnaW5hbC0iICsgcHJvcE5hbWUsIGNvbG9yKTsKCiAgICAgICAgaWYgKCFjb2xvciB8IGNvbG9yID09ICJyZ2JhKDAsIDAsIDAsIDApIikgcmV0dXJuOwogICAgICAgIHZhciBwYXJzZWRDb2xvciA9IG5ldyBSR0JDb2xvcihjb2xvcik7CiAgICAgICAgLy8gY29uc29sZS5sb2cocGFyc2VkQ29sb3IpOwogICAgICAgIHZhciByZ2IgPSBjb252ZXJ0Q29sb3IocGFyc2VkQ29sb3IuciwgcGFyc2VkQ29sb3IuZywgcGFyc2VkQ29sb3IuYikuY29sb3IucmdiOwogICAgICAgIC8vIGNvbnNvbGUubG9nKHJnYik7CiAgICAgICAgdmFyIG5ld0NvbG9yID0gVXRpbHMucmdiU3RyaW5nKHJnYlswXSxyZ2JbMV0scmdiWzJdKTsKICAgICAgICAvLyBjb25zb2xlLmxvZyhlbC50YWdOYW1lLCBwcm9wTmFtZSxjb2xvciwgcGFyc2VkQ29sb3IsIHJnYiwgbmV3Q29sb3IpOwogICAgICAgICRlbC5jc3MocHJvcE5hbWUsIG5ld0NvbG9yKTsKICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gY29udmVydEZvbnQoJGVsKSB7CiAgICAgICRlbC5jc3MoImZvbnQtZmFtaWx5IiwgIidjNjQnICFpbXBvcnRhbnQiKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb252ZXJ0QmFja2dyb3VuZCgkZWwpIHsKICAgICAgdmFyIGJnSW1hZ2UgPSAkZWwuY3NzKCJiYWNrZ3JvdW5kLWltYWdlIik7CgogICAgICBpZiAoIWJnSW1hZ2UpIHJldHVybjsKICAgICAgaWYgKCFiZ0ltYWdlLmxlbmd0aCkgcmV0dXJuOwogICAgICBpZiAoYmdJbWFnZSA9PSAibm9uZSIpIHJldHVybjsKCiAgICAgIHZhciBvcmdTcmMgPSAkZWwuZGF0YSgib3JnaW5hbC11cmwiKTsKICAgICAgdmFyIHNyYyA9IG9yZ1NyYyB8fCBVdGlscy5wYXJzZUNzc1VybChiZ0ltYWdlKTsKCiAgICAgIGlmICghb3JnU3JjKQogICAgICAgICRlbC5kYXRhKCJvcmdpbmFsLXVybCIsIHNyYyk7CiAgICAgIC8vY29uc29sZS5sb2coYmdJbWFnZSwgc3JjKTsKCiAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTsKCiAgICAgIC8vIHN1cHBvcnQgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RlZCBpbWFnZXMgdGhhdCBhcmUgc2VydmVkIHdpdGggYSBDT1JTIGhlYWRlcgogICAgICAvLyBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9mZXRjaGluZy1yZXNvdXJjZXMuaHRtbCNwb3RlbnRpYWxseS1jb3JzLWVuYWJsZWQtZmV0Y2gKICAgICAgaW1nLmNyb3NzT3JpZ2luID0gImFub255bW91cyI7CgogICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHNyYyA9IGNvbnZlcnRJbWFnZVRvRGF0YVVybChpbWcpOwogICAgICAgICRlbC5jc3MoImJhY2tncm91bmQtaW1hZ2UiLCAidXJsKCIgKyBzcmMgKyAiKSIpOwogICAgICAgIGltZy5vbmxvYWQgPSB1bmRlZmluZWQ7CiAgICAgIH07CiAgICAgIGltZy5zcmMgPSBzcmM7CiAgICB9CgogICAgZnVuY3Rpb24gdHJ5Q29udmVydEltYWdlKGVsKSB7CiAgICAgIC8vY29uc29sZS5sb2coImJlIGNvbnZlcnRlZCEiICwgZWwpOwoKICAgICAgdHJ5CiAgICAgIHsKICAgICAgICByZXR1cm4gY29udmVydEltYWdlKGVsKTsKICAgICAgfQogICAgICBjYXRjaChleCkKICAgICAgewogICAgICAgIGNvbnNvbGUud2FybihleCwiaW1hZ2Ugbm90IGxvYWRlZCB5ZXQsIGF0dGFjaGluZyBsb2FkIGV2ZW50Iik7CiAgICAgICAgZWwub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgLy9jb25zb2xlLmxvZygiY29udmVydGluZyBzZWNvbmQgdHJ5Iik7CiAgICAgICAgICB0cnkKICAgICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRJbWFnZShlbCk7CiAgICAgICAgICB9CiAgICAgICAgICBjYXRjaChleDIpCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXgyKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9CiAgICB9CgogICAgLy8gRklYTUU6IGZvciBDT1JTIHN1cHBvcnQsIGFkZCBjcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnCiAgICBmdW5jdGlvbiBjb252ZXJ0SW1hZ2UoJGltZykgewogICAgICB2YXIgaW1nID0gJGltZ1swXTsKCiAgICAgIGlmIChpbWcuX2NvbnZlcnRpbmcpCiAgICAgICAgcmV0dXJuOwoKICAgICAgaW1nLl9jb252ZXJ0aW5nID0gdHJ1ZTsKCiAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHsKICAgICAgICBpbWcub25sb2FkID0gdW5kZWZpbmVkOwogICAgICAgIGNvbnNvbGUubG9nKCJkb25lIik7CiAgICAgICAgaW1nLl9jb252ZXJ0aW5nID0gZmFsc2U7CiAgICAgIH07CgogICAgICB2YXIgb3JnVXJsID0gJChpbWcpLmRhdGEoIm9yZ2luYWwtdXJsIik7CiAgICAgIGlmIChvcmdVcmwgJiYgb3JnVXJsLmxlbmd0aCkKICAgICAgewogICAgICAgIHZhciB0ZW1wID0gbmV3IEltYWdlKCk7CiAgICAgICAgdGVtcC5jcm9zc09yaWdpbiA9ICJhbm9ueW1vdXMiOwogICAgICAgIHRlbXAub25sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAvL2NvbnNvbGUubG9nKCJ0ZW1wIGRvbmUiKTsKICAgICAgICAgIGltZy5zcmMgPSBjb252ZXJ0SW1hZ2VUb0RhdGFVcmwodGVtcCk7CiAgICAgICAgfTsKICAgICAgICB0ZW1wLnNyYyA9IG9yZ1VybDsKICAgICAgfQogICAgICBlbHNlCiAgICAgIHsKICAgICAgICAkKGltZykuZGF0YSgib3JnaW5hbC11cmwiLCBpbWcuc3JjKTsKICAgICAgfQoKICAgICAgaW1nLnNyYyA9IGNvbnZlcnRJbWFnZVRvRGF0YVVybChpbWcpOwogICAgICBpbWcuX2NvbnZlcnRpbmcgPSBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb252ZXJ0SW1hZ2VUb0RhdGFVcmwoaW1nKSB7CiAgICAgIC8vY29uc29sZS5sb2coImNvbnZlcnQgdG8gZGF0YSB1cmwiKTsKICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwogICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoIjJkIik7CiAgICAgIGNhbnZhcy53aWR0aCA9IGltZy53aWR0aDsKICAgICAgY2FudmFzLmhlaWdodCA9IGltZy5oZWlnaHQ7CiAgICAgIC8vY29uc29sZS5sb2coImNyZWF0aW5nIHRlbXAgY2FudmFzIiAsdyxoKTsKICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsMCk7CiAgICAgIHZhciBibXAgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsMCxjYW52YXMud2lkdGgsY2FudmFzLmhlaWdodCk7CgogICAgICBjb252ZXJ0SW1hZ2VEYXRhKGJtcCk7CgogICAgICBjdHgucHV0SW1hZ2VEYXRhKGJtcCwwLDApOwogICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgpOwogICAgfQoKICAgIC8vIHRpbWUgdG8gYmVhdDogMjgybXMKICAgIC8vIHRpbWUgdG8gYmVhdDogMTQ1bXMgKDJ4KQogICAgLy8gdGltZSB0byBiZWF0OiA3M21zICgtMy44NngpCiAgICAvLyBGSVhNRTogdHJ5IG9wdGltaXppbmcgYnkgcmV1c2luZyBhIGNvbG9yIG9iamVjdCB0byBhdm9pZCBtZW1vcnkgYWxsb2NhdGlvbiBpbnNpZGUgdGhlIGxvb3AKICAgIC8vIEZJWE1FOiB0cnkgb3B0aW1pemluZyBieSByZXVzaW5nIGltYWdlZGF0YSBvYmplY3RzIGJldHdlZW4gc3VjY2Vzc2l2ZSBjYWxscy4KICAgIGZ1bmN0aW9uIGNvbnZlcnRJbWFnZURhdGEoaW1hZ2VkYXRhLCBhbHBoYSkgewogICAgICB2YXIgYm1wID0gaW1hZ2VkYXRhLmRhdGE7CiAgICAgIC8vIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KGJtcC5sZW5ndGgvNCk7CiAgICAgIHZhciBibG9ja1NpemUgID0gNDsKCiAgICAgIGZvciAodmFyIHkgPSAwIDsgeSA8IGltYWdlZGF0YS5oZWlnaHQgOyB5Kz1ibG9ja1NpemUgKQogICAgICBmb3IgKHZhciB4ID0gMCA7IHggPCBpbWFnZWRhdGEud2lkdGggOyB4Kz1ibG9ja1NpemUgKQogICAgICB7CiAgICAgICAgLy8gc2FtcGxlCiAgICAgICAgdmFyIHN4ID0gTWF0aC5taW4oeCtNYXRoLmZsb29yKGJsb2NrU2l6ZS8yKSwgaW1hZ2VkYXRhLndpZHRoLTEpOwogICAgICAgIHZhciBzeSA9IE1hdGgubWluKHkrTWF0aC5mbG9vcihibG9ja1NpemUvMiksIGltYWdlZGF0YS5oZWlnaHQtMSk7CiAgICAgICAgdmFyIGkgPSAoc3kgKiBpbWFnZWRhdGEud2lkdGggKyBzeCkgKiA0OwogICAgICAgIHZhciByZWQgPSBibXBbaV07CiAgICAgICAgdmFyIGdyZWVuID0gYm1wW2krMV07CiAgICAgICAgdmFyIGJsdWUgPSBibXBbaSsyXTsKICAgICAgICB2YXIgYSA9IGJtcFtpKzNdIDwgMTI4ID8gMCA6IDI1NTsKCiAgICAgICAgdmFyIG1hdGNoID0gY29udmVydENvbG9yKHJlZCwgZ3JlZW4sIGJsdWUpOwogICAgICAgIHZhciBjb2xvciA9IG1hdGNoLmNvbG9yLnJnYjsKCiAgICAgICAgZm9yICh2YXIgdHkgPSAwIDsgdHkgPCBibG9ja1NpemUgOyB0eSsrICkKICAgICAgICBmb3IgKHZhciB0eCA9IDAgOyB0eCA8IGJsb2NrU2l6ZSA7IHR4KysgKQogICAgICAgIHsKICAgICAgICAgIHZhciByeSA9IE1hdGgubWluKHkrdHksIGltYWdlZGF0YS5oZWlnaHQtMSk7CiAgICAgICAgICB2YXIgcnggPSBNYXRoLm1pbih4K3R4LCBpbWFnZWRhdGEud2lkdGgtMSk7CiAgICAgICAgICB2YXIgayA9ICggcnkqaW1hZ2VkYXRhLndpZHRoICsgcnggKSAqIDQ7CiAgICAgICAgICBibXBba10gPSBjb2xvclswXTsKICAgICAgICAgIGJtcFtrKzFdID0gY29sb3JbMV07CiAgICAgICAgICBibXBbaysyXSA9IGNvbG9yWzJdOwogICAgICAgICAgYm1wW2srM10gPSBhOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnZlcnRDb2xvcihyZWQsZ3JlZW4sYmx1ZSkgewogICAgICB2YXIgYzY0X2NvbG9yID0gbnVsbDsKICAgICAgdmFyIG1pbl9lcnJvciA9IEluZmluaXR5OwoKICAgICAgZm9yICh2YXIgYyBpbiBjb250ZXh0LnBhbGV0dGUpCiAgICAgIHsKICAgICAgICB2YXIgY29sb3IgPSBjb250ZXh0LnBhbGV0dGVbY107CiAgICAgICAgdmFyIGd1ZXNzID0gY29sb3IucmdiOwogICAgICAgIHZhciB3ID0gY29udGV4dC53ZWlnaHRzW2NdOwogICAgICAgIC8vdmFyIGFicyA9IE1hdGguc3FyOwogICAgICAgIHZhciBkciA9IHJlZCAtIGd1ZXNzWzBdOwogICAgICAgIHZhciBkZyA9IGdyZWVuIC0gZ3Vlc3NbMV07CiAgICAgICAgdmFyIGRiID0gYmx1ZSAtIGd1ZXNzWzJdOwogICAgICAgIHZhciBlcnJvciA9IGRyKmRyL3cgKyBkZypkZy93ICsgZGIqZGIvdzsKCiAgICAgICAgaWYgKGVycm9yIDwgbWluX2Vycm9yKQogICAgICAgIHsKICAgICAgICAgIGM2NF9jb2xvciA9IGNvbG9yOwogICAgICAgICAgbWluX2Vycm9yID0gZXJyb3I7CiAgICAgICAgfQoKICAgICAgICBpZiAoZXJyb3IgPCBjb250ZXh0LnRocmVzaGhvbGQpCiAgICAgICAgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4geyBjb2xvcjogYzY0X2NvbG9yLCBlcnJvcjptaW5fZXJyb3IsIGVhcmx5RXhpdCA6IGMgfTsKICAgIH0KCiAgICByZXR1cm4gewogICAgICBjb252ZXJ0Q29sb3IgOiBjb252ZXJ0Q29sb3IsCiAgICAgIGNvbnZlcnRJbWFnZURhdGE6IGNvbnZlcnRJbWFnZURhdGEsCiAgICAgIHJldHJvZnkgOiByZXRyb2Z5CiAgICB9OwogIH07CgogIC8vIGV4cG9ydAogIHdpbmRvdy5SZXRyb2Z5ID0gUmV0cm9meTsKICBSZXRyb2Z5LkNvbG9ycyA9IHt9OwoKfSh6ZXBRdWVyeSkpOwoKOy8qZ2xvYmFscyBSZXRyb2Z5ICovCgooZnVuY3Rpb24oKSB7CiAgInVzZSBzdHJpY3QiOwoKICBSZXRyb2Z5LkNvbG9ycy5DNjQgPSB7CiAgICAiMCI6IHsKICAgICAgICAibmFtZSI6ICJCbGFjayIsCiAgICAgICAgInJnYiI6IFswLCAwLCAwXQogICAgfSwKICAgICIxIjogewogICAgICAgICJuYW1lIjogIldoaXRlIiwKICAgICAgICAicmdiIjogWzI1NSwgMjU1LCAyNTVdCiAgICB9LAogICAgIjIiOiB7CiAgICAgICAgIm5hbWUiOiAiUmVkIiwKICAgICAgICAicmdiIjogWzIyNCwgNjQsIDY0XQogICAgfSwKICAgICIzIjogewogICAgICAgICJuYW1lIjogIkN5YW4iLAogICAgICAgICJyZ2IiOiBbOTYsIDI1NSwgMjU1XQogICAgfSwKICAgICI0IjogewogICAgICAgICJuYW1lIjogIk1hZ2VudGEiLAogICAgICAgICJyZ2IiOiBbMjI0LCA5NiwgMjI0XQogICAgfSwKICAgICI1IjogewogICAgICAgICJuYW1lIjogIkdyZWVuIiwKICAgICAgICAicmdiIjogWzY0LCAyMjQsIDY0XQogICAgfSwKICAgICI2IjogewogICAgICAgICJuYW1lIjogIkJsdWUiLAogICAgICAgICJyZ2IiOiBbNjQsIDY0LCAyMjRdCiAgICB9LAogICAgIjciOiB7CiAgICAgICAgIm5hbWUiOiAiWWVsbG93IiwKICAgICAgICAicmdiIjogWzI1NSwgMjU1LCA2NF0KICAgIH0sCiAgICAiOCI6IHsKICAgICAgICAibmFtZSI6ICJPcmFuZ2UiLAogICAgICAgICJyZ2IiOiBbMjI0LCAxNjAsIDY0XQogICAgfSwKICAgICI5IjogewogICAgICAgICJuYW1lIjogIkJyb3duIiwKICAgICAgICAicmdiIjogWzE1NiwgMTE2LCA3Ml0KICAgIH0sCiAgICAiMTAiOiB7CiAgICAgICAgIm5hbWUiOiAiUGluayIsCiAgICAgICAgInJnYiI6IFsyNTAsIDE2MCwgMTYwXQogICAgfSwKICAgICIxMSI6IHsKICAgICAgICAibmFtZSI6ICJEYXJrR3JleSIsCiAgICAgICAgInJnYiI6IFs4NCwgODQsIDg0XQogICAgfSwKICAgICIxMiI6IHsKICAgICAgICAibmFtZSI6ICJHcmV5IiwKICAgICAgICAicmdiIjogWzEzNiwgMTM2LCAxMzZdCiAgICB9LAogICAgIjEzIjogewogICAgICAgICJuYW1lIjogIkxpZ2h0R3JlZW4iLAogICAgICAgICJyZ2IiOiBbMTYwLCAyNTUsIDE2MF0KICAgIH0sCiAgICAiMTQiOiB7CiAgICAgICAgIm5hbWUiOiAiTGlnaHRCbHVlIiwKICAgICAgICAicmdiIjogWzE2MCwgMTYwLCAyNTVdCiAgICB9LAogICAgIjE1IjogewogICAgICAgICJuYW1lIjogIkxHcmV5IiwKICAgICAgICAicmdiIjogWzE5MiwgMTkyLCAxOTJdCiAgICB9CiAgfTsKCn0oKSk7CgovLyAvLyBjb252ZXJ0IHRvIGNzcwovLyBmb3IgKCB2YXIgayBpbiBSZXRyb2Z5LkNvbG9ycy5DNjQgKSB7Ci8vICAgdmFyIGNvbG9yID0gUmV0cm9meS5Db2xvcnMuQzY0W2tdOwovLyAgIGNvbnNvbGUubG9nKCIuIitjb2xvci5uYW1lKyIgeyBjb2xvcjogcmdiKCIgKyBjb2xvci5yZ2JbMF0gKyIsIiArIGNvbG9yLnJnYlsxXSArICIsIiArIGNvbG9yLnJnYlsyXSArICIpOyB9Iik7Ci8vICB9CjsvKmdsb2JhbHMgUmV0cm9meSAqLwoKLy8gZnJvbTogaHR0cDovL3d3dy50aGVhbG1pZ2h0eWd1cnUuY29tL0dhbWVzL0hhY2tpbmcvV2lraS9pbmRleC5waHA/dGl0bGU9TkVTX1BhbGV0dGUKCihmdW5jdGlvbigpIHsKICAidXNlIHN0cmljdCI7CgogIFJldHJvZnkuQ29sb3JzLk5FUzEgPSB7CiAgICAiMCIgOiB7IHJnYjogWzAsMCwwXSB9LAogICAgIjEiIDogeyByZ2I6IFsxMjQsMTI0LDEyNF0gfSwKICAgICIyIiA6IHsgcmdiOiBbMCwwLDI1Ml0gfSwKICAgICIzIiA6IHsgcmdiOiBbMCwwLDE4OF0gfSwKICAgICI0IiA6IHsgcmdiOiBbNjgsNDAsMTg4XSB9LAogICAgIjUiIDogeyByZ2I6IFsxNDgsMCwxMzJdIH0sCiAgICAiNiIgOiB7IHJnYjogWzE2OCwwLDMyXSB9LAogICAgIjciIDogeyByZ2I6IFsxNjgsMTYsMF0gfSwKICAgICI4IiA6IHsgcmdiOiBbMTM2LDIwLDBdIH0sCiAgICAiOSIgOiB7IHJnYjogWzgwLDQ4LDBdIH0sCiAgICAiMTAiIDogeyByZ2I6IFswLDEyMCwwXSB9LAogICAgIjExIiA6IHsgcmdiOiBbMCwxMDQsMF0gfSwKICAgICIxMiIgOiB7IHJnYjogWzAsODgsMF0gfSwKICAgICIxMyIgOiB7IHJnYjogWzAsNjQsODhdIH0KfTsKClJldHJvZnkuQ29sb3JzLk5FUzIgPSB7CiAgICAiMCIgOiB7IHJnYjogWzAsMCwwXSB9LAogICAgIjE3IiA6IHsgcmdiOiBbMTg4LDE4OCwxODhdIH0sCiAgICAiMTgiIDogeyByZ2I6IFswLDEyMCwyNDhdIH0sCiAgICAiMTkiIDogeyByZ2I6IFswLDg4LDI0OF0gfSwKICAgICIyMCIgOiB7IHJnYjogWzEwNCw2OCwyNTJdIH0sCiAgICAiMjEiIDogeyByZ2I6IFsyMTYsMCwyMDRdIH0sCiAgICAiMjIiIDogeyByZ2I6IFsyMjgsMCw4OF0gfSwKICAgICIyMyIgOiB7IHJnYjogWzI0OCw1NiwwXSB9LAogICAgIjI0IiA6IHsgcmdiOiBbMjI4LDkyLDE2XSB9LAogICAgIjI1IiA6IHsgcmdiOiBbMTcyLDEyNCwwXSB9LAogICAgIjI2IiA6IHsgcmdiOiBbMCwxODQsMF0gfSwKICAgICIyNyIgOiB7IHJnYjogWzAsMTY4LDBdIH0sCiAgICAiMjgiIDogeyByZ2I6IFswLDE2OCw2OF0gfSwKICAgICIyOSIgOiB7IHJnYjogWzAsMTM2LDEzNl0gfQp9OwoKUmV0cm9meS5Db2xvcnMuTkVTMyA9IHsKICAgICIwIiA6IHsgcmdiOiBbMCwwLDBdIH0sCiAgICAiMzMiIDogeyByZ2I6IFsyNDgsMjQ4LDI0OF0gfSwKICAgICIzNCIgOiB7IHJnYjogWzYwLDE4OCwyNTJdIH0sCiAgICAiMzUiIDogeyByZ2I6IFsxMDQsMTM2LDI1Ml0gfSwKICAgICIzNiIgOiB7IHJnYjogWzE1MiwxMjAsMjQ4XSB9LAogICAgIjM3IiA6IHsgcmdiOiBbMjQ4LDEyMCwyNDhdIH0sCiAgICAiMzgiIDogeyByZ2I6IFsyNDgsODgsMTUyXSB9LAogICAgIjM5IiA6IHsgcmdiOiBbMjQ4LDEyMCw4OF0gfSwKICAgICI0MCIgOiB7IHJnYjogWzI1MiwxNjAsNjhdIH0sCiAgICAiNDEiIDogeyByZ2I6IFsyNDgsMTg0LDBdIH0sCiAgICAiNDIiIDogeyByZ2I6IFsxODQsMjQ4LDI0XSB9LAogICAgIjQzIiA6IHsgcmdiOiBbODgsMjE2LDg0XSB9LAogICAgIjQ0IiA6IHsgcmdiOiBbODgsMjQ4LDE1Ml0gfSwKICAgICI0NSIgOiB7IHJnYjogWzAsMjMyLDIxNl0gfSwKICAgICI0NiIgOiB7IHJnYjogWzEyMCwxMjAsMTIwXSB9Cn07CgpSZXRyb2Z5LkNvbG9ycy5ORVM0ID0gewogICAgIjAiIDogeyByZ2I6IFswLDAsMF0gfSwKICAgICI0OSIgOiB7IHJnYjogWzI1MiwyNTIsMjUyXSB9LAogICAgIjUwIiA6IHsgcmdiOiBbMTY0LDIyOCwyNTJdIH0sCiAgICAiNTEiIDogeyByZ2I6IFsxODQsMTg0LDI0OF0gfSwKICAgICI1MiIgOiB7IHJnYjogWzIxNiwxODQsMjQ4XSB9LAogICAgIjUzIiA6IHsgcmdiOiBbMjQ4LDE4NCwyNDhdIH0sCiAgICAiNTQiIDogeyByZ2I6IFsyNDgsMTY0LDE5Ml0gfSwKICAgICI1NSIgOiB7IHJnYjogWzI0MCwyMDgsMTc2XSB9LAogICAgIjU2IiA6IHsgcmdiOiBbMjUyLDIyNCwxNjhdIH0sCiAgICAiNTciIDogeyByZ2I6IFsyNDgsMjE2LDEyMF0gfSwKICAgICI1OCIgOiB7IHJnYjogWzIxNiwyNDgsMTIwXSB9LAogICAgIjU5IiA6IHsgcmdiOiBbMTg0LDI0OCwxODRdIH0sCiAgICAiNjAiIDogeyByZ2I6IFsxODQsMjQ4LDIxNl0gfSwKICAgICI2MSIgOiB7IHJnYjogWzAsMjUyLDI1Ml0gfSwKICAgICI2MiIgOiB7IHJnYjogWzI0OCwyMTYsMjQ4XSB9CiAgfTsKCn0oKSk7CjsvKmdsb2JhbHMgUmV0cm9meSAqLwoKKGZ1bmN0aW9uKCkgewogICJ1c2Ugc3RyaWN0IjsKCiAgLy8gZnJvbTogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9aWF9TcGVjdHJ1bV9ncmFwaGljX21vZGVzCiAgUmV0cm9meS5Db2xvcnMuWlhTcGVjdHJ1bSA9IHsKICAgICJibGFjazAiOiB7IHJnYiA6IFswLDAsMF0gfSwKICAgICJibHVlMCI6IHsgcmdiIDogWzAsMCwyMDVdIH0sCiAgICAicmVkMCI6IHsgcmdiIDogWzIwNSwwLDBdIH0sCiAgICAibWFnZW50YTAiOiB7IHJnYiA6IFsyMDUsMCwyMDVdIH0sCiAgICAiZ3JlZW4wIjogeyByZ2IgOiBbMCwyMDUsMF0gfSwKICAgICJjeWFuMCI6IHsgcmdiIDogWzAsMjA1LDIwNV0gfSwKICAgICJ5ZWxsb3cwIjogeyByZ2IgOiBbMCwyMDUsMjA1XSB9LAogICAgIndoaXRlMCI6IHsgcmdiIDogWzIwNSwyMDUsMjA1XSB9LAoKICAgICJibHVlMSI6IHsgcmdiOiBbMCwwLDI1NV0gfSwKICAgICJyZWQxIjogeyByZ2I6IFsyNTUsMCwwXSB9LAogICAgIm1hZ2VudGExIjogeyByZ2I6IFsyNTUsMCwyNTVdIH0sCiAgICAiZ3JlZW4xIjogeyByZ2I6IFswLDI1NSwwXSB9LAogICAgImN5YW4xIjogeyByZ2I6IFswLDI1NSwyNTVdIH0sCiAgICAieWVsbG93MSI6IHsgcmdiOiBbMjU1LDI1NSwwXSB9LAogICAgIndoaXRlMSI6IHsgcmdiOiBbMjU1LDI1NSwyNTVdIH0KICB9Owp9KCkpOzsvKmdsb2JhbCB6ZXBRdWVyeSxkYXQsXywgUmV0cm9meSAqLwoKKGZ1bmN0aW9uICgkKSB7CiAgInVzZSBzdHJpY3QiOwoKICBmdW5jdGlvbiBEYXNoYm9hcmQoY29udGV4dCwgcmVuZGVyKSB7CgogICAgcmVuZGVyID0gcmVuZGVyIHx8IGZ1bmN0aW9uKCkge307CgogICAgdmFyICRkYXNoYm9hcmQsICRidXR0b24sICRjb250cm9scywKICAgICAgZGVidWcgPSBmYWxzZSwKICAgICAgc2hvd092ZXJsYXkgPSBmYWxzZTsKCiAgICB2YXIgY29sb3JDb250cm9sbGVycyA9IFtdOwoKICAgIHZhciBndWkgPSBuZXcgZGF0LkdVSSh7IGF1dG9QbGFjZTogZmFsc2UgfSk7CgogICAgZnVuY3Rpb24gc2xpZGVEb3duKCkgewogICAgICAkZGFzaGJvYXJkLmNzcyh7CiAgICAgICAgdG9wIDogLSRkYXNoYm9hcmQub3V0ZXJIZWlnaHQoKSAtICRidXR0b24ub3V0ZXJIZWlnaHQoKQogICAgICB9KTsKCiAgICAgICRkYXNoYm9hcmQuYW5pbWF0ZSh7CiAgICAgICAgdG9wIDogLSRkYXNoYm9hcmQub3V0ZXJIZWlnaHQoKQogICAgICB9LAogICAgICB7CiAgICAgICAgZHVyYXRpb246IDQwMAogICAgICAgIC8vZWFzaW5nOiAiZWFzZS1vdXQiCiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIHRvZ2dsZURhc2hib2FyZCgpIHsKICAgICAgZGVidWc9IWRlYnVnOwogICAgICAkZGFzaGJvYXJkLmFuaW1hdGUoewogICAgICAgIHRvcCA6IGRlYnVnID8gMCA6IC0kZGFzaGJvYXJkLm91dGVySGVpZ2h0KCkKICAgICAgfSwKICAgICAgewogICAgICAgIGR1cmF0aW9uIDogMjAwCiAgICAgIH0pOwogICAgfQoKICAgIC8vY29uc29sZS5sb2coY29sb3JzQW5kV2VpZ2h0cyk7CgogICAgZnVuY3Rpb24gY3JlYXRlQ29sb3JDb250cm9sbGVyKGtleSkgewogICAgICB2YXIgY29udHJvbGxlciA9IGd1aS5hZGQoY29udGV4dC53ZWlnaHRzLCBrZXkgLCAwLCAzKTsKICAgICAgY29udHJvbGxlci5vbkNoYW5nZShfLnRocm90dGxlKHJlbmRlciwgMjAwKSk7CgogICAgICByZXR1cm4gY29udHJvbGxlcjsKICAgIH0KCiAgICAvLyBpbml0CgogICAgLy8gaW5qZWN0IGNzcwogICAgdmFyIGNzcyA9ICIjZGFzaGJvYXJkIHsgIHBvc2l0aW9uOiBmaXhlZDsgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMSk7ICBjb2xvcjogbGltZTsgIGxlZnQ6MDsgIGZvbnQtZmFtaWx5OiAnUFQgTW9ubycsIHNhbnMtc2VyaWY7ICBmb250LXNpemU6IDE0cHg7ICBwYWRkaW5nOiAyMHB4OyAgYm9yZGVyLXJhZGl1czogMTBweDt9LmRhc2hib2FyZC1wYW5lbCwgLmRhc2hib2FyZC13aWRnZXQgeyAgbWFyZ2luLXJpZ2h0OiAxNXB4OyAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgdmVydGljYWwtYWxpZ246IHRvcDt9I2NvbnRyb2xzIHsgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgIHZlcnRpY2FsLWFsaWduOiB0b3A7fSNkYXNoYm9hcmQgLmNsb3NlLWJ1dHRvbiB7ICAgZGlzcGxheTogbm9uZTt9LmRnLm1haW4geyAgZm9udC1zaXplOiAxM3B4O31idXR0b24uZGFzaGJvYXJkLWJ1dHRvbiB7ICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7ICBmb250LXNpemU6IDE2cHg7ICBib3JkZXI6MDsgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrOyAgY29sb3I6ICNlZWU7ICBib3JkZXItcmFkaXVzOiA1cHggNXB4IDVweCA1cHg7ICBwYWRkaW5nOiAxMHB4OyAgZm9udC1mYW1pbHk6IGM2NDt9YnV0dG9uOmhvdmVyIHsgIHRleHQtc2hhZG93OiAjOGY4IDBweCAwcHggNXB4O30uYm90dG9tLXBhbmVsIHsgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgIGJvdHRvbTogLTQwcHg7fSI7CiAgICAkKCJoZWFkIikuYXBwZW5kKCQoIjxzdHlsZT4iKS50ZXh0KGNzcykpOwoKICAgIC8vIGluamVjdCBodG1sCiAgICAkZGFzaGJvYXJkID0gJCgnPGRpdiBpZD0iZGFzaGJvYXJkIiBjbGFzcz0iaGlkZGVuIj48ZGl2IGNsYXNzPSJ3aWRnZXRzIj48ZGl2IGlkPSJjb250cm9scyIgY2xhc3M9ImRhc2hib2FyZC13aWRnZXQiPjwvZGl2PjxkaXYgaWQ9InN0YXR1cyIgY2xhc3M9ImRhc2hib2FyZC13aWRnZXQiPjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9ImJvdHRvbS1wYW5lbCI+PGJ1dHRvbiBjbGFzcz0iZGFzaGJvYXJkLWJ1dHRvbiByZXRybyIgZGF0YS1yb2xlPSJkYXNoYm9hcmQtb3BlbiI+cmV0cm9meTwvYnV0dG9uPjwvZGl2PjwvZGl2PicpOwogICAgJCgiYm9keSIpLmFwcGVuZCgkZGFzaGJvYXJkKTsKCiAgICAkYnV0dG9uID0gJGRhc2hib2FyZC5maW5kKCJbZGF0YS1yb2xlfj0nZGFzaGJvYXJkLW9wZW4nXSIpOwogICAgJGNvbnRyb2xzID0gJCgiI2NvbnRyb2xzIik7CgogICAgLy9ndWkucmVtZW1iZXIoU2V0dGluZ3MpOwogICAgJGNvbnRyb2xzLmFwcGVuZCggZ3VpLmRvbUVsZW1lbnQgKTsKCiAgICAkKGRvY3VtZW50KS5rZXlkb3duKGZ1bmN0aW9uKGUpIHsKICAgICAgaWYgKCBlLndoaWNoID09IDI3ICkgdG9nZ2xlRGFzaGJvYXJkKCk7CiAgICAgIGlmICggZS53aGljaCA9PSA3OSApIHNob3dPdmVybGF5ID0gIXNob3dPdmVybGF5OwogICAgfSk7CgogICAgJGJ1dHRvbi5jbGljayh0b2dnbGVEYXNoYm9hcmQpOwoKICAgIGZ1bmN0aW9uIHJlc2V0Q29sb3JTZXR0aW5ncygpIHsKICAgICAgXy5lYWNoKGNvbG9yQ29udHJvbGxlcnMsIGZ1bmN0aW9uKGNvbnRyKSB7CiAgICAgICAgZ3VpLnJlbW92ZShjb250cik7CiAgICAgIH0pOwoKICAgICAgY29sb3JDb250cm9sbGVycyA9IFtdOwoKICAgICAgXy5lYWNoKGNvbnRleHQucGFsZXR0ZSwgZnVuY3Rpb24oY29sb3IsIGtleSkgewogICAgICAgIGNvbnRleHQud2VpZ2h0c1trZXldID0gMTsKICAgICAgfSk7CgogICAgICBmb3IgKHZhciBrZXkgaW4gY29udGV4dC5wYWxldHRlKSB7CiAgICAgICAgdmFyIGMgPSBjcmVhdGVDb2xvckNvbnRyb2xsZXIoIGtleSApOwogICAgICAgIGNvbG9yQ29udHJvbGxlcnMucHVzaChjKTsKCiAgICAgICAgdmFyIGNvbG9yID0gY29udGV4dC5wYWxldHRlW2tleV07CiAgICAgICAgdmFyIHJnYiA9IGNvbG9yLnJnYjsKICAgICAgICB2YXIgY3NzQ29sb3IgPSAicmdiKHtyfSx7Z30se2J9KSIuZm9ybWF0KHsgcjpyZ2JbMF0sIGc6cmdiWzFdLCBiOnJnYlsyXSB9KTsKICAgICAgICB2YXIgJGxhYmVsID0gJChjLmRvbUVsZW1lbnQpLmZpbmQoIi5zbGlkZXItZmciKTsKICAgICAgICAkbGFiZWwuY3NzKCJiYWNrZ3JvdW5kLWNvbG9yIiwgY3NzQ29sb3IpOwogICAgICAgICQoYy5kb21FbGVtZW50KS5jc3MoIndpZHRoIiwgIjEwMCUiKS5wcmV2KCIucHJvcGVydHktbmFtZSIpLnJlbW92ZSgpOwogICAgICAgICQoYy5kb21FbGVtZW50KS5wYXJlbnRzKCJsaS5jciIpLmNzcygiYm9yZGVyIiwgIjAiKTsKICAgICAgfQogICAgfQoKICAgIHZhciBwYWxldHRlQ29udHJvbGxlciA9IGd1aS5hZGQoeyBwYWxldHRlOiBudWxsIH0sICJwYWxldHRlIiAsIF8ua2V5cyhSZXRyb2Z5LkNvbG9ycykgKTsKICAgICQocGFsZXR0ZUNvbnRyb2xsZXIuZG9tRWxlbWVudCkuZmluZCgic2VsZWN0IikuY3NzKCJmbG9hdCIsICJyaWdodCIpOwogICAgcGFsZXR0ZUNvbnRyb2xsZXIub25DaGFuZ2UoZnVuY3Rpb24odmFsdWUpIHsKICAgICAgY29udGV4dC5wYWxldHRlID0gUmV0cm9meS5Db2xvcnNbdmFsdWVdOwoKICAgICAgcmVzZXRDb2xvclNldHRpbmdzKCk7CgogICAgICByZW5kZXIoKTsKICAgIH0pOwoKICAgIC8vIHZhciB0aHJlc2hob2xkQ29udHJvbGxlciA9IGd1aS5hZGQoY29udGV4dCwgInRocmVzaG9sZCIgLCAwLCA4OCk7CiAgICAvLyB0aHJlc2hob2xkQ29udHJvbGxlci5vbkNoYW5nZShfLnRocm90dGxlKHJlbmRlciwgMjAwKSk7CgoKICAgIHJlc2V0Q29sb3JTZXR0aW5ncygpOwogICAgJGRhc2hib2FyZC5zaG93KCk7CiAgICBzbGlkZURvd24oKTsKCiAgICByZXR1cm4gewogICAgICBzbGlkZURvd24gOiBzbGlkZURvd24sCiAgICAgIHRvZ2dsZURhc2hib2FyZCA6IHRvZ2dsZURhc2hib2FyZAogICAgfTsKICB9CgogIFJldHJvZnkuRGFzaGJvYXJkID0gRGFzaGJvYXJkOwoKfSh6ZXBRdWVyeSkpOwo7LypnbG9iYWwgemVwUXVlcnksUmV0cm9meSxDb250ZXh0ICovCgooZnVuY3Rpb24oJCkgewogICJ1c2Ugc3RyaWN0IjsKCiAgdmFyIGRhc2hib2FyZDsKICB2YXIgcmV0cm9meTsKICB2YXIgZGVmYXVsdHMgPSB7fSwgc2V0dGluZ3MgPSB7fTsKICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KCk7CgogICQuZm4ucmV0cm9meSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHsKCiAgICBzZXR0aW5ncyA9ICQuZXh0ZW5kKHNldHRpbmdzLCBkZWZhdWx0cywgb3B0aW9ucyk7CiAgICAkLmZuLnJldHJvZnkuZGVmYXVsdHMgPSBkZWZhdWx0czsKICAgICQuZm4ucmV0cm9meS5zZXR0aW5ncyA9IHNldHRpbmdzOwoKICAgIGlmICghc2V0dGluZ3MucGFsZXR0ZSkKICAgICAgdGhyb3cgbmV3IEVycm9yKCJwYXJhbWV0ZXIgJ3BhbGV0dGUnIG1pc3NpbmciKTsKCiAgICByZXRyb2Z5ID0gcmV0cm9meSB8fCBuZXcgUmV0cm9meShjb250ZXh0KTsKCiAgICBpZiAoc2V0dGluZ3MuZGFzaGJvYXJkID09PSB0cnVlKSB7CiAgICAgIGRhc2hib2FyZCA9IGRhc2hib2FyZCB8fCBuZXcgUmV0cm9meS5EYXNoYm9hcmQoY29udGV4dCwgZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyByZXRyb2Z5LnJldHJvZnkodGhpcyk7IH0pOwogICAgICB9LmJpbmQodGhpcykpOwogICAgfQoKICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IHJldHJvZnkucmV0cm9meSh0aGlzKTsgfSk7CgogIH07Cgp9KHplcFF1ZXJ5KSk7Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 03:29:05 GMT",
                    "Content-Length": "156922",
                    "Date": "Sat, 08 Nov 2014 03:29:05 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}