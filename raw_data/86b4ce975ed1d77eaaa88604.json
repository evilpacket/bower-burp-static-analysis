{
    "url": "http://localhost:9999/jkphl/TYPO3-ext-squeezr/Resources/Private/Squeezr/squeezr/plugins/minify/min/builder/_index.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>location.hash</b> and written to <b>the 'text()' function of JQuery</b> via the following statements:<ul><li>var i = 0, found = location.hash.substr(1).split(','), l = found.length;</li><li>$p.append($('&lt;a href=#&gt;&lt;/a&gt;').text(found[i])[0]);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/jkphl/TYPO3-ext-squeezr/Resources/Private/Squeezr/squeezr/plugins/minify/min/builder/_index.js",
                "path": "/jkphl/TYPO3-ext-squeezr/Resources/Private/Squeezr/squeezr/plugins/minify/min/builder/_index.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9qa3BobC9UWVBPMy1leHQtc3F1ZWV6ci9SZXNvdXJjZXMvUHJpdmF0ZS9TcXVlZXpyL3NxdWVlenIvcGx1Z2lucy9taW5pZnkvbWluL2J1aWxkZXIvX2luZGV4LmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 05:24:49 GMT",
                    "Content-Length": "9113",
                    "Date": "Sat, 08 Nov 2014 05:24:49 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}