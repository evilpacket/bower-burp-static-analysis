{
    "url": "http://localhost:9999/Prinzhorn/skrollr-menu/src/skrollr.menu.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Link manipulation (DOM-based)",
    "issueType": 5246976,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based link manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:<ul><li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.",
    "issueDetail": "The application may be vulnerable to DOM-based link manipulation. Data is read from <b>window.location.hash</b> and written to <b>the 'href' property of a DOM element</b> via the following statement:<ul><li>link.href = window.location.hash;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/Prinzhorn/skrollr-menu/src/skrollr.menu.js",
                "path": "/Prinzhorn/skrollr-menu/src/skrollr.menu.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9Qcmluemhvcm4vc2tyb2xsci1tZW51L3NyYy9za3JvbGxyLm1lbnUuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "IC8qIQogKiBQbHVnaW4gZm9yIHNrcm9sbHIuCiAqIFRoaXMgcGx1Z2luIG1ha2VzIGhhc2hsaW5rcyBzY3JvbGwgbmljZWx5IHRvIHRoZWlyIHRhcmdldCBwb3NpdGlvbi4KICoKICogQWxleGFuZGVyIFByaW56aG9ybiAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Qcmluemhvcm4vc2tyb2xscgogKgogKiBGcmVlIHRvIHVzZSB1bmRlciB0ZXJtcyBvZiBNSVQgbGljZW5zZQogKi8KKGZ1bmN0aW9uKGRvY3VtZW50LCB3aW5kb3cpIHsKCSd1c2Ugc3RyaWN0JzsKCgl2YXIgREVGQVVMVF9EVVJBVElPTiA9IDUwMDsKCXZhciBERUZBVUxUX0VBU0lORyA9ICdzcXJ0JzsKCXZhciBERUZBVUxUX1NDQUxFID0gMTsKCgl2YXIgTUVOVV9UT1BfQVRUUiA9ICdkYXRhLW1lbnUtdG9wJzsKCXZhciBNRU5VX09GRlNFVF9BVFRSID0gJ2RhdGEtbWVudS1vZmZzZXQnOwoJdmFyIE1FTlVfRFVSQVRJT05fQVRUUiA9ICdkYXRhLW1lbnUtZHVyYXRpb24nOwoKCXZhciBza3JvbGxyID0gd2luZG93LnNrcm9sbHI7Cgl2YXIgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5OwoJdmFyIHN1cHBvcnRzSGlzdG9yeSA9ICEhaGlzdG9yeS5wdXNoU3RhdGU7CgoJLyoKCQlTaW5jZSB3ZSBhcmUgdXNpbmcgZXZlbnQgYnViYmxpbmcsIHRoZSBlbGVtZW50IHRoYXQgaGFzIGJlZW4gY2xpY2tlZAoJCW1pZ2h0IG5vdCBhY3V0YWxseSBiZSB0aGUgbGluayBidXQgYSBjaGlsZC4KCSovCgl2YXIgZmluZFBhcmVudExpbmsgPSBmdW5jdGlvbihlbGVtZW50KSB7CgkJLy9XZSByZWFjaGVkIHRoZSB0b3AsIG5vIGxpbmsgZm91bmQuCgkJaWYoZWxlbWVudCA9PT0gZG9jdW1lbnQpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJLy9ZYXksIGl0J3MgYSBsaW5rIQoJCWlmKGVsZW1lbnQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnQScpIHsKCQkJcmV0dXJuIGVsZW1lbnQ7CgkJfQoKCQkvL01heWJlIHRoZSBwYXJlbnQgaXMgYSBsaW5rLgoJCXJldHVybiBmaW5kUGFyZW50TGluayhlbGVtZW50LnBhcmVudE5vZGUpOwoJfTsKCgkvKgoJCUhhbmRsZSB0aGUgY2xpY2sgZXZlbnQgb24gdGhlIGRvY3VtZW50LgoJKi8KCXZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uKGUpIHsKCQkvL09ubHkgaGFuZGxlIGxlZnQgY2xpY2suCgkJaWYoZS53aGljaCAhPT0gMSAmJiBlLmJ1dHRvbiAhPT0gMCkgewoJCQlyZXR1cm47CgkJfQoKCQl2YXIgbGluayA9IGZpbmRQYXJlbnRMaW5rKGUudGFyZ2V0KTsKCgkJLy9UaGUgY2xpY2sgZGlkIG5vdCBoYXBwZW4gaW5zaWRlIGEgbGluay4KCQlpZighbGluaykgewoJCQlyZXR1cm47CgkJfQoKCQlpZihoYW5kbGVMaW5rKGxpbmspKSB7CgkJCWUucHJldmVudERlZmF1bHQoKTsKCQl9Cgl9OwoKCS8qCgkJSGFuZGxlcyB0aGUgY2xpY2sgb24gYSBsaW5rLiBNYXkgYmUgY2FsbGVkIHdpdGhvdXQgYW4gYWN0dWFsIGNsaWNrIGV2ZW50LgoJCVdoZW4gdGhlIGZha2UgZmxhZyBpcyBzZXQsIHRoZSBsaW5rIHdvbid0IGNoYW5nZSB0aGUgdXJsIGFuZCB0aGUgcG9zaXRpb24gd29uJ3QgYmUgYW5pbWF0ZWQuCgkqLwoJdmFyIGhhbmRsZUxpbmsgPSBmdW5jdGlvbihsaW5rLCBmYWtlKSB7CgkJdmFyIGhhc2g7CgoJCS8vV2hlbiBjb21wbGV4TGlua3MgaXMgZW5hYmxlZCwgd2UgYWxzbyBhY2NlcHQgbGlua3Mgd2hpY2ggZG8gbm90IGp1c3QgY29udGFpbiBhIHNpbXBsZSBoYXNoLgoJCWlmKF9jb21wbGV4TGlua3MpIHsKCQkJLy9UaGUgbGluayBwb2ludHMgdG8gc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50LgoJCQlpZihsaW5rLmhvc3RuYW1lICE9PSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJLy9UaGUgbGluayBkb2VzIG5vdCBsaW5rIHRvIHRoZSBzYW1lIHBhZ2UvcGF0aC4KCQkJaWYobGluay5wYXRobmFtZSAhPT0gZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWUpIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJaGFzaCA9IGxpbmsuaGFzaDsKCQl9IGVsc2UgewoJCQkvL0Rvbid0IHVzZSB0aGUgaHJlZiBwcm9wZXJ0eSAobGluay5ocmVmKSBiZWNhdXNlIGl0IGNvbnRhaW5zIHRoZSBhYnNvbHV0ZSB1cmwuCgkJCWhhc2ggPSBsaW5rLmdldEF0dHJpYnV0ZSgnaHJlZicpOwoJCX0KCgkJLy9Ob3QgYSBoYXNoIGxpbmsuCgkJaWYoIS9eIy8udGVzdChoYXNoKSkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvL05vdyBnZXQgdGhlIHRhcmdldFRvcCB0byBzY3JvbGwgdG8uCgkJdmFyIHRhcmdldFRvcDsKCgkJdmFyIG1lbnVUb3A7CgoJCS8vSWYgdGhlcmUncyBhIGhhbmRsZUxpbmsgZnVuY3Rpb24sIGl0IG92ZXJyaWRlcyB0aGUgYWN0dWFsIGFuY2hvciBvZmZzZXQuCgkJaWYoX2hhbmRsZUxpbmspIHsKCQkJbWVudVRvcCA9IF9oYW5kbGVMaW5rKGxpbmspOwoJCX0KCQkvL0lmIHRoZXJlJ3MgYSBkYXRhLW1lbnUtdG9wIGF0dHJpYnV0ZSBhbmQgbm8gaGFuZGxlTGluayBmdW5jdGlvbiwgaXQgb3ZlcnJpZGVzIHRoZSBhY3R1YWwgYW5jaG9yIG9mZnNldC4KCQllbHNlIHsKCQkJbWVudVRvcCA9IGxpbmsuZ2V0QXR0cmlidXRlKE1FTlVfVE9QX0FUVFIpOwoJCX0KCgkJaWYobWVudVRvcCAhPT0gbnVsbCkgewoJCQkvL0lzIGl0IGEgcGVyY2VudGFnZSBvZmZzZXQ/CgkJCWlmKC9wJC8udGVzdChtZW51VG9wKSkgewoJCQkJdGFyZ2V0VG9wID0gKG1lbnVUb3Auc2xpY2UoMCwgLTEpIC8gMTAwKSAqIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7CgkJCX0gZWxzZSB7CgkJCQl0YXJnZXRUb3AgPSArbWVudVRvcCAqIF9zY2FsZTsKCQkJfQoJCX0gZWxzZSB7CgkJCXZhciBzY3JvbGxUYXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoLnN1YnN0cigxKSk7CgoJCQkvL0lnbm9yZSB0aGUgY2xpY2sgaWYgbm8gdGFyZ2V0IGlzIGZvdW5kLgoJCQlpZighc2Nyb2xsVGFyZ2V0KSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCgkJCXRhcmdldFRvcCA9IF9za3JvbGxySW5zdGFuY2UucmVsYXRpdmVUb0Fic29sdXRlKHNjcm9sbFRhcmdldCwgJ3RvcCcsICd0b3AnKTsKCgkJCXZhciBtZW51T2Zmc2V0ID0gc2Nyb2xsVGFyZ2V0LmdldEF0dHJpYnV0ZShNRU5VX09GRlNFVF9BVFRSKTsKCgkJCWlmKG1lbnVPZmZzZXQgIT09IG51bGwpIHsKCQkJCXRhcmdldFRvcCArPSArbWVudU9mZnNldDsKCQkJfQoJCX0KCgkJaWYoc3VwcG9ydHNIaXN0b3J5ICYmICFmYWtlKSB7CgkJCWhpc3RvcnkucHVzaFN0YXRlKHt0b3A6IHRhcmdldFRvcH0sICcnLCBoYXNoKTsKCQl9CgoJCXZhciBtZW51RHVyYXRpb24gPSBwYXJzZUludChsaW5rLmdldEF0dHJpYnV0ZShNRU5VX0RVUkFUSU9OX0FUVFIpLCAxMCk7CgkJdmFyIGFuaW1hdGlvbkR1cmF0aW9uID0gX2R1cmF0aW9uKF9za3JvbGxySW5zdGFuY2UuZ2V0U2Nyb2xsVG9wKCksIHRhcmdldFRvcCk7CgoJCWlmKCFpc05hTihtZW51RHVyYXRpb24pKSB7CgkJCWFuaW1hdGlvbkR1cmF0aW9uID0gbWVudUR1cmF0aW9uOwoJCX0KCgkJLy9Ob3cgZmluYWxseSBzY3JvbGwgdGhlcmUuCgkJaWYoX2FuaW1hdGUgJiYgIWZha2UpIHsKCQkJX3Nrcm9sbHJJbnN0YW5jZS5hbmltYXRlVG8odGFyZ2V0VG9wLCB7CgkJCQlkdXJhdGlvbjogYW5pbWF0aW9uRHVyYXRpb24sCgkJCQllYXNpbmc6IF9lYXNpbmcKCQkJfSk7CgkJfSBlbHNlIHsKCQkJZGVmZXIoZnVuY3Rpb24oKSB7CgkJCQlfc2tyb2xsckluc3RhbmNlLnNldFNjcm9sbFRvcCh0YXJnZXRUb3ApOwoJCQl9KTsKCQl9CgoJCXJldHVybiB0cnVlOwoJfTsKCgl2YXIganVtcFN0cmFpZ2h0VG9IYXNoID0gZnVuY3Rpb24oKSB7CgkJaWYod2luZG93LmxvY2F0aW9uLmhhc2ggJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcikgewoJCQl2YXIgbGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2FbaHJlZj0iJyArIHdpbmRvdy5sb2NhdGlvbi5oYXNoICsgJyJdJyk7CgoJCQlpZighbGluaykgewoJCQkJLy8gTm8gbGluayBmb3VuZCBvbiBwYWdlLCBzbyB3ZSBjcmVhdGUgb25lIGFuZCB0aGVuIGFjdGl2YXRlIGl0CgkJCQlsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwoJCQkJbGluay5ocmVmID0gd2luZG93LmxvY2F0aW9uLmhhc2g7CgkJCX0KCgkJCWhhbmRsZUxpbmsobGluaywgdHJ1ZSk7CgkJfQoJfTsKCgl2YXIgZGVmZXIgPSBmdW5jdGlvbihmbikgewoJCXdpbmRvdy5zZXRUaW1lb3V0KGZuLCAxKTsKCX07CgoJLyoKCQlHbG9iYWwgbWVudSBmdW5jdGlvbiBhY2Nlc3NpYmxlIHRocm91Z2ggd2luZG93LnNrcm9sbHIubWVudS5pbml0LgoJKi8KCXNrcm9sbHIubWVudSA9IHt9OwoJc2tyb2xsci5tZW51LmluaXQgPSBmdW5jdGlvbihza3JvbGxySW5zdGFuY2UsIG9wdGlvbnMpIHsKCQlfc2tyb2xsckluc3RhbmNlID0gc2tyb2xsckluc3RhbmNlOwoKCQlvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCgkJX2Vhc2luZyA9IG9wdGlvbnMuZWFzaW5nIHx8IERFRkFVTFRfRUFTSU5HOwoJCV9hbmltYXRlID0gb3B0aW9ucy5hbmltYXRlICE9PSBmYWxzZTsKCQlfZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uIHx8IERFRkFVTFRfRFVSQVRJT047CgkJX2hhbmRsZUxpbmsgPSBvcHRpb25zLmhhbmRsZUxpbms7CgkJX3NjYWxlID0gb3B0aW9ucy5zY2FsZSB8fCBERUZBVUxUX1NDQUxFOwoJCV9jb21wbGV4TGlua3MgPSBvcHRpb25zLmNvbXBsZXhMaW5rcyA9PT0gdHJ1ZTsKCgkJaWYodHlwZW9mIF9kdXJhdGlvbiA9PT0gJ251bWJlcicpIHsKCQkJX2R1cmF0aW9uID0gKGZ1bmN0aW9uKGR1cmF0aW9uKSB7CgkJCQlyZXR1cm4gZnVuY3Rpb24oKSB7CgkJCQkJcmV0dXJuIGR1cmF0aW9uOwoJCQkJfTsKCQkJfShfZHVyYXRpb24pKTsKCQl9CgoJCS8vVXNlIGV2ZW50IGJ1YmJsaW5nIGFuZCBhdHRhY2ggYSBzaW5nbGUgbGlzdGVuZXIgdG8gdGhlIGRvY3VtZW50LgoJCXNrcm9sbHIuYWRkRXZlbnQoZG9jdW1lbnQsICdjbGljaycsIGhhbmRsZUNsaWNrKTsKCgkJaWYoc3VwcG9ydHNIaXN0b3J5KSB7CgkJCXNrcm9sbHIuYWRkRXZlbnQod2luZG93LCAncG9wc3RhdGUnLCBmdW5jdGlvbihlKSB7CgkJCQl2YXIgc3RhdGUgPSBlLnN0YXRlIHx8IHt9OwoJCQkJdmFyIHRvcCA9IHN0YXRlLnRvcCB8fCAwOwoKCQkJCWRlZmVyKGZ1bmN0aW9uKCkgewoJCQkJCV9za3JvbGxySW5zdGFuY2Uuc2V0U2Nyb2xsVG9wKHRvcCk7CgkJCQl9KTsKCQkJfSwgZmFsc2UpOwoJCX0KCgkJanVtcFN0cmFpZ2h0VG9IYXNoKCk7Cgl9OwoKCS8vRXhwb3NlIHRoZSBoYW5kbGVMaW5rIGZ1bmN0aW9uIHRvIGJlIGFibGUgdG8gcHJvZ3JhbW1hdGljYWxseSB0cmlnZ2VyIGNsaWNrcy4KCXNrcm9sbHIubWVudS5jbGljayA9IGZ1bmN0aW9uKGxpbmspIHsKCQkvL1dlJ3JlIG5vdCBhc3NpZ25pbmcgaXQgZGlyZWN0bHkgdG8gYGNsaWNrYCBiZWNhdXNlIG9mIHRoZSBzZWNvbmQgKCJwcml2YXRlIikgcGFyYW1ldGVyLgoJCWhhbmRsZUxpbmsobGluayk7Cgl9OwoKCS8vUHJpdmF0ZSByZWZlcmVuY2UgdG8gdGhlIGluaXRpYWxpemVkIHNrcm9sbHIuCgl2YXIgX3Nrcm9sbHJJbnN0YW5jZTsKCgl2YXIgX2Vhc2luZzsKCXZhciBfZHVyYXRpb247Cgl2YXIgX2FuaW1hdGU7Cgl2YXIgX2hhbmRsZUxpbms7Cgl2YXIgX3NjYWxlOwoJdmFyIF9jb21wbGV4TGlua3M7CgoJLy9JbiBjYXNlIHRoZSBwYWdlIHdhcyBvcGVuZWQgd2l0aCBhIGhhc2gsIHByZXZlbnQganVtcGluZyB0byBpdC4KCS8vaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNjU5MDcyL2pxdWVyeS1kaXNhYmxlLWFuY2hvci1qdW1wLXdoZW4tbG9hZGluZy1hLXBhZ2UKCWRlZmVyKGZ1bmN0aW9uKCkgewoJCWlmKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7CgkJCXdpbmRvdy5zY3JvbGxUbygwLCAwKTsKCQl9Cgl9KTsKfShkb2N1bWVudCwgd2luZG93KSk7Cg==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 04:48:33 GMT",
                    "Content-Length": "5887",
                    "Date": "Sat, 08 Nov 2014 04:48:33 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}