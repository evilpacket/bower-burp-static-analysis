{
    "url": "http://localhost:9999/opitzconsulting/jquery-mobile-angular-adapter/compiled/jquery-mobile-angular-adapter.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location</b> and written to <b>$()</b> via the following statement:<ul><li>$(\"&lt;a href='...\" + location+ \"' data-\" + $.mobile.ns+ \"icon='del...\" + $.mobile.ns+ \"iconpos='...\" + options.closeBtnTe...+ \"&lt;/a&gt;\" ) </li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/opitzconsulting/jquery-mobile-angular-adapter/compiled/jquery-mobile-angular-adapter.js",
                "path": "/opitzconsulting/jquery-mobile-angular-adapter/compiled/jquery-mobile-angular-adapter.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9vcGl0emNvbnN1bHRpbmcvanF1ZXJ5LW1vYmlsZS1hbmd1bGFyLWFkYXB0ZXIvY29tcGlsZWQvanF1ZXJ5LW1vYmlsZS1hbmd1bGFyLWFkYXB0ZXIuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyohIGpxdWVyeS1tb2JpbGUtYW5ndWxhci1hZGFwdGVyIC0gdjEuMy4yLVNOQVBTSE9UIC0gMjAxMy0wNi0yNwoqIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGl0emNvbnN1bHRpbmcvanF1ZXJ5LW1vYmlsZS1hbmd1bGFyLWFkYXB0ZXIKKiBDb3B5cmlnaHQgKGMpIDIwMTMgVG9iaWFzIEJvc2NoOyBMaWNlbnNlZCBNSVQgKi8KKGZ1bmN0aW9uKGZhY3RvcnkpIHsKaWYgKHR5cGVvZiBkZWZpbmUgPT09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgewpkZWZpbmUoWyJqcXVlcnkiLCAiYW5ndWxhciIsICJqcXVlcnkubW9iaWxlIl0sIGZhY3RvcnkpOwp9IGVsc2UgewpmYWN0b3J5KHdpbmRvdy5qUXVlcnksIHdpbmRvdy5hbmd1bGFyKTsKfQp9KShmdW5jdGlvbigkLCBhbmd1bGFyKSB7CihmdW5jdGlvbiAoJCkgewogICAgZnVuY3Rpb24gcGF0Y2gob2JqLCBmbk5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIF9vbGQgPSBvYmpbZm5OYW1lXTsKICAgICAgICBvYmpbZm5OYW1lXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKF9vbGQsIHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb2xsZWN0RXZlbnRMaXN0ZW5lcnMoY2FsbGJhY2spIHsKICAgICAgICB2YXIgdW5iaW5kQ2FsbHMgPSBbXSwKICAgICAgICAgICAgY2xlYW51cENhbGxzID0gW10sCiAgICAgICAgICAgIHJlY3Vyc2l2ZSA9IGZhbHNlLAogICAgICAgICAgICBpOwoKICAgICAgICBwYXRjaEJpbmRGbigib24iLCAib2ZmIik7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBmb3IgKGk9MDsgaTxjbGVhbnVwQ2FsbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGNsZWFudXBDYWxsc1tpXSgpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdW5iaW5kOwoKICAgICAgICBmdW5jdGlvbiB1bmJpbmQoKSB7CiAgICAgICAgICAgIGZvciAoaT0wOyBpPHVuYmluZENhbGxzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB1bmJpbmRDYWxsc1tpXSgpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBwYXRjaEJpbmRGbihiaW5kTmFtZSwgdW5iaW5kTmFtZSkgewogICAgICAgICAgICB2YXIgX29sZCA9ICQuZm5bYmluZE5hbWVdOwogICAgICAgICAgICAkLmZuW2JpbmROYW1lXSA9IHBhdGNoZWQ7CiAgICAgICAgICAgIGNsZWFudXBDYWxscy5wdXNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJC5mbltiaW5kTmFtZV0gPSBfb2xkOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGZ1bmN0aW9uIHBhdGNoZWQoKSB7CiAgICAgICAgICAgICAgICBpZiAoIXJlY3Vyc2l2ZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICAgICAgICAgICAgdW5iaW5kQ2FsbHMucHVzaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxbdW5iaW5kTmFtZV0uYXBwbHkoZWwsIGFyZ3MpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVjdXJzaXZlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9vbGQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgcmVjdXJzaXZlID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy8gaWYgbmF2aWdhdGluZyBmcm9tIGEganFtIHBhZ2UgdG8gdGhlIHNhbWUganFtIHBhZ2UsCiAgICAvLyBuZXZlciByZW1vdmUgdGhlIHBhZ2UgZnJvbSB0aGUgZG9tIGNhY2hlLgogICAgJChkb2N1bWVudCkub24oInBhZ2VyZW1vdmUiLCAiZGl2IiwgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICBpZiAoJC5tb2JpbGUuYWN0aXZlUGFnZSAmJiAkLm1vYmlsZS5hY3RpdmVQYWdlWzBdPT09dGhpcykgewogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0KICAgIH0pOwoKICAgIC8vIGlmIG5hdmlnYXRpbmcgZnJvbSBhIGpxbSBwYWdlIG90IHRoZSBzYW1lIGpxbSBwYWdlLAogICAgLy8gYW5kIGEgdHJhbnNpdGlvbiBsaWtlICdzbGlkZScgd2FzIHNwZWNpZmllZCwKICAgIC8vIGZhbGwgYmFjayB0byB0aGUgc2VxdWVudGlhbCB0cmFuc2l0aW9uICdmYWRlJywKICAgIC8vIGFzIHdlIGFyZSB0cmFuc2l0aW9uaW5nIHRoZSBzYW1lIHBhZ2UgdHdpY2UhCiAgICAkKGRvY3VtZW50KS5vbigicGFnZWJlZm9yZWNoYW5nZSIsIGZ1bmN0aW9uKGV2ZW50LCB0cmlnZ2VyRGF0YSkgewogICAgICAgIGlmICgkLm1vYmlsZS5hY3RpdmVQYWdlICYmIHRyaWdnZXJEYXRhLnRvUGFnZVswXT09PSQubW9iaWxlLmFjdGl2ZVBhZ2VbMF0pIHsKICAgICAgICAgICAgaWYgKHRyaWdnZXJEYXRhLm9wdGlvbnMudHJhbnNpdGlvbiAhPT0gJ25vbmUnKSB7CiAgICAgICAgICAgICAgICB0cmlnZ2VyRGF0YS5vcHRpb25zLnRyYW5zaXRpb24gPSAnZmFkZSc7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKCiAgICAvLyBzZWxlY3RtZW51IG1heSBjcmVhdGUgcGFyZW50IGVsZW1lbnRzIGFuZCBleHRyYSBwYWdlcwogICAgcGF0Y2goJC5tb2JpbGUuc2VsZWN0bWVudS5wcm90b3R5cGUsICdkZXN0cm95JywgZnVuY3Rpb24gKG9sZCwgc2VsZiwgYXJncykgewogICAgICAgIG9sZC5hcHBseShzZWxmLCBhcmdzKTsKICAgICAgICB2YXIgbWVudVBhZ2UgPSBzZWxmLm1lbnVQYWdlOwogICAgICAgIGlmIChtZW51UGFnZSkgewogICAgICAgICAgICBtZW51UGFnZS5yZW1vdmUoKTsKICAgICAgICB9CiAgICB9KTsKCiAgICAvLyBDb3B5IG9mIHRoZSBpbml0aWFsaXphdGlvbiBjb2RlIGZyb20ganF1ZXJ5IG1vYmlsZSBmb3IgY29udHJvbGdyb3VwLgogICAgLy8gTmVlZGVkIGFzIGpxbSBkb2VzIG5vdCBkbyB0aGlzIGJlZm9yZSB0aGUgcmVhZHkgZXZlbnQuCiAgICAvLyBBbmQgaWYgYW5ndWxhciBpcyBpbmNsdWRlZCBiZWZvcmUganFtLCBhbmd1bGFyIHdpbGwgcHJvY2VzcyB0aGUgZmlyc3QgcGFnZQogICAgLy8gb24gcmVhZHkgZXZlbnQgYmVmb3JlIHRoZSBjb250cm9sZ3JvdXAgaXMgbGlzdGVuaW5nIGZvciBwYWdlY3JlYXRlIGV2ZW50LgogICAgaWYgKCQuZm4uY29udHJvbGdyb3VwKSB7CiAgICAgICAgJC5tb2JpbGUuZG9jdW1lbnQuYmluZCggInBhZ2VjcmVhdGUgY3JlYXRlIiwgZnVuY3Rpb24oIGUgKSAgewogICAgICAgICAgICAkLm1vYmlsZS5jb250cm9sZ3JvdXAucHJvdG90eXBlLmVuaGFuY2VXaXRoaW4oIGUudGFyZ2V0LCB0cnVlICk7CiAgICAgICAgfSk7CiAgICB9CgogICAgLy8gJC5mbi5ncmlkIHRocm93cyBhbiBlcnJvciBpZiBpdCBjb250YWlucyBubyBjaGlsZHJlbgogICAgcGF0Y2goJC5mbiwgJ2dyaWQnLCBmdW5jdGlvbihvbGQsIHNlbGYsIGFyZ3MpIHsKICAgICAgICBpZiAoc2VsZi5jaGlsZHJlbigpLmxlbmd0aD09PTApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb2xkLmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgfSk7CgogICAgLy8gbmF2YmFyIGRvZXMgbm90IGNvbnRhaW4gYSByZWZyZXNoIGZ1bmN0aW9uLCBzbyB3ZSBhZGQgaXQgaGVyZS4KICAgIHBhdGNoKCQubW9iaWxlLm5hdmJhci5wcm90b3R5cGUsICdfY3JlYXRlJywgZnVuY3Rpb24gY2FwdHVyZUNsaWNrTGlzdGVuZXIob2xkLCBzZWxmLCBhcmdzKSB7CiAgICAgICAgLy8gSW4gdGhlIF9jcmVhdGUgZnVuY3Rpb24sIG5hdmJhciBiaW5kcyBsaXN0ZW5lcnMgdG8gZWxlbWVudHMuCiAgICAgICAgLy8gV2UgbmVlZCB0byBjYXB0dXJlIHRoYXQgbGlzdGVuZXIgc28gdGhhdCB3ZSBjYW4gdW5iaW5kIGl0IGxhdGVyLgogICAgICAgIHZhciByZXM7CiAgICAgICAgc2VsZi51bmJpbmRMaXN0ZW5lcnMgPSBjb2xsZWN0RXZlbnRMaXN0ZW5lcnMoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJlcyA9IG9sZC5hcHBseShzZWxmLCBhcmdzKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcmVzOwogICAgfSk7CgogICAgJC5tb2JpbGUubmF2YmFyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkgewogICAgICAgIC8vIGNsZWFuIHVwLgogICAgICAgIC8vIG9sZCBsaXN0ZW5lcnMKICAgICAgICBpZiAodGhpcy51bmJpbmRMaXN0ZW5lcnMpIHsKICAgICAgICAgICAgdGhpcy51bmJpbmRMaXN0ZW5lcnMoKTsKICAgICAgICAgICAgdGhpcy51bmJpbmRMaXN0ZW5lcnMgPSBudWxsOwogICAgICAgIH0KICAgICAgICAvLyBvbGQgY3NzIGNsYXNzZXMKICAgICAgICB2YXIgJG5hdmJhciA9IHRoaXMuZWxlbWVudDsKICAgICAgICB2YXIgbGlzdCA9ICRuYXZiYXIuZmluZCgidWwiKTsKICAgICAgICB2YXIgbGlzdEVudHJpZXMgPSBsaXN0LmNoaWxkcmVuKCJsaSIpOwogICAgICAgIGxpc3QucmVtb3ZlQ2xhc3MoZnVuY3Rpb24gKGluZGV4LCBjc3MpIHsKICAgICAgICAgICAgcmV0dXJuIChjc3MubWF0Y2goL1xidWktZ3JpZC1cUysvZykgfHwgW10pLmpvaW4oJyAnKTsKICAgICAgICB9KTsKICAgICAgICBsaXN0RW50cmllcy5yZW1vdmVDbGFzcyhmdW5jdGlvbiAoaW5kZXgsIGNzcykgewogICAgICAgICAgICByZXR1cm4gKGNzcy5tYXRjaCgvXGJ1aS1ibG9jay1cUysvZykgfHwgW10pLmpvaW4oJyAnKTsKICAgICAgICB9KTsKICAgICAgICAvLyByZWNyZWF0ZQogICAgICAgIHRoaXMuX2NyZWF0ZSgpOwogICAgfTsKICAgIC8vIHJhbmdlc2xpZGVyIGVuYWJsZS9kaXNhYmxlIHRocm93cwogICAgLy8gVHlwZUVycm9yOiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk6IEFyZ3VtZW50cyBsaXN0IGhhcyB3cm9uZyB0eXBlCiAgICAkLm1vYmlsZS5yYW5nZXNsaWRlci5wcm90b3R5cGUuX3NldE9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRpb25zICkgewogICAgICAgIC8vIE9sZDogdGhpcy5fc3VwZXJBcHBseShvcHRpb25zKTsKICAgICAgICAkLldpZGdldC5wcm90b3R5cGUuX3NldE9wdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIHRoaXMucmVmcmVzaCgpOwogICAgfTsKCn0pKHdpbmRvdy5qUXVlcnkpOwovKioKICogSGVscGVyIHRoYXQgaW50cm9kdWNlcyB0aGUgY29uY2VwdCBvZiBwcmVjb21waWxhdGlvbjogUHJlcHJvY2VzcyB0aGUgZG9tIGJlZm9yZQogKiBhbmd1bGFyIHByb2Nlc3NlcyBpdC4KICogPHA+CiAqIFVzYWdlOiBDcmVhdGUgYSBkZWNvcmF0b3Igb3IgYSBmYWN0b3J5IGZvciB0aGUgJHByZWNvbXBpbGUgc2VydmljZS4KICovCihmdW5jdGlvbiAoJCwgYW5ndWxhcikgewogICAgdmFyIG5nID0gYW5ndWxhci5tb2R1bGUoJ25nJyk7CiAgICBuZy5wcm92aWRlcigiJHByZWNvbXBpbGUiLCAkcHJlY29tcGlsZVByb3ZpZGVyKTsKICAgIG5nLmNvbmZpZyhbJyRwcm92aWRlJywgcHJlY29tcGlsZUNvbXBpbGVEZWNvcmF0b3JdKTsKICAgIG5nLmNvbmZpZyhbJyRjb21waWxlUHJvdmlkZXInLCAnJHByb3ZpZGUnLCBwcmVjb21waWxlVGVtcGxhdGVEaXJlY3RpdmVzXSk7CgogICAgcmV0dXJuOwoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGZ1bmN0aW9uICRwcmVjb21waWxlUHJvdmlkZXIoKSB7CiAgICAgICAgdmFyIGhhbmRsZXJzID0gW107CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgYWRkSGFuZGxlcjogZnVuY3Rpb24oaGFuZGxlcikgewogICAgICAgICAgICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgJGdldDogWyIkaW5qZWN0b3IiLCBmdW5jdGlvbigkaW5qZWN0b3IpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGk7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpPTA7IGk8aGFuZGxlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9ICRpbmplY3Rvci5pbnZva2UoaGFuZGxlcnNbaV0sIHRoaXMsIHtlbGVtZW50OiBlbGVtZW50fSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50OwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfV0KICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIHByZWNvbXBpbGVDb21waWxlRGVjb3JhdG9yKCRwcm92aWRlKSB7CiAgICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckY29tcGlsZScsIFsnJHByZWNvbXBpbGUnLCAnJGRlbGVnYXRlJywgZnVuY3Rpb24gKCRwcmVjb21waWxlLCAkY29tcGlsZSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgYXJnc1swXSA9ICRwcmVjb21waWxlKGFyZ3NbMF0pOwogICAgICAgICAgICAgICAgcmV0dXJuICRjb21waWxlLmFwcGx5KHRoaXMsIGFyZ3MpOwogICAgICAgICAgICB9OwogICAgICAgIH1dKTsKICAgIH0KCiAgICBmdW5jdGlvbiBwcmVjb21waWxlSHRtbFN0cmluZyhodG1sLCAkcHJlY29tcGlsZSkgewogICAgICAgIHZhciAkdGVtcGxhdGUgPSAkKCc8ZGl2PicgKyBodG1sICsgJzwvZGl2PicpOwogICAgICAgICRwcmVjb21waWxlKCR0ZW1wbGF0ZS5jb250ZW50cygpKTsKICAgICAgICByZXR1cm4gJHRlbXBsYXRlLmh0bWwoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBwcmVjb21waWxlVGVtcGxhdGVEaXJlY3RpdmVzICgkY29tcGlsZVByb3ZpZGVyLCAkcHJvdmlkZSkgewogICAgICAgIHZhciBkaXJlY3RpdmVUZW1wbGF0ZVVybHMgPSB7fTsKCiAgICAgICAgLy8gSG9vayBpbnRvIHRoZSByZWdpc3RyYXRpb24gb2YgZGlyZWN0aXZlcyB0bzoKICAgICAgICAvLyAtIHByZXByb2Nlc3MgdGVtcGxhdGUgaHRtbAogICAgICAgIC8vIC0gbWFyayB1cmxzIGZyb20gdGVtcGxhdGVVcmxzIHNvIHdlIGNhbiBwcmVwcm9jZXNzIGl0IGxhdGVyIGluICRodHRwCiAgICAgICAgdmFyIF9kaXJlY3RpdmUgPSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZTsKICAgICAgICAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSA9IGZ1bmN0aW9uIChuYW1lLCBmYWN0b3J5KSB7CiAgICAgICAgICAgIHZhciBuZXdGYWN0b3J5ID0gZnVuY3Rpb24gKCRwcmVjb21waWxlLCAkaW5qZWN0b3IpIHsKICAgICAgICAgICAgICAgIHZhciByZXMgPSAkaW5qZWN0b3IuaW52b2tlKGZhY3RvcnkpOwogICAgICAgICAgICAgICAgaWYgKHJlcy50ZW1wbGF0ZSkgewogICAgICAgICAgICAgICAgICAgIHJlcy50ZW1wbGF0ZSA9IHByZWNvbXBpbGVIdG1sU3RyaW5nKHJlcy50ZW1wbGF0ZSwgJHByZWNvbXBpbGUpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMudGVtcGxhdGVVcmwpIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVUZW1wbGF0ZVVybHNbcmVzLnRlbXBsYXRlVXJsXSA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gX2RpcmVjdGl2ZS5jYWxsKHRoaXMsIG5hbWUsIFsnJHByZWNvbXBpbGUnLCAnJGluamVjdG9yJywgbmV3RmFjdG9yeV0pOwogICAgICAgIH07CgogICAgICAgIC8vIHByZXByb2Nlc3MgJGh0dHAgcmVzdWx0cyBmb3IgdGVtcGxhdGVVcmxzLgogICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJGh0dHAnLCBbJyRxJywgJyRkZWxlZ2F0ZScsICckcHJlY29tcGlsZScsIGZ1bmN0aW9uICgkcSwgJGh0dHAsICRwcmVjb21waWxlKSB7CiAgICAgICAgICAgIHZhciBfZ2V0ID0gJGh0dHAuZ2V0OwogICAgICAgICAgICAkaHR0cC5nZXQgPSBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzID0gX2dldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZVRlbXBsYXRlVXJsc1t1cmxdKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9zdWNjZXNzID0gcmVzLnN1Y2Nlc3M7CiAgICAgICAgICAgICAgICAgICAgcmVzLnN1Y2Nlc3MgPSBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2FsbGJhY2sgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gYXJnc1swXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbMF0gPSBwcmVjb21waWxlSHRtbFN0cmluZyhjb250ZW50LCAkcHJlY29tcGlsZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfc3VjY2VzcyhuZXdDYWxsYmFjayk7CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiAkaHR0cDsKICAgICAgICB9XSk7CiAgICB9Cgp9KSgkLCBhbmd1bGFyKTsKKGZ1bmN0aW9uKGFuZ3VsYXIpIHsKCiAgICB2YXIgbmcgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKICAgIG5nLmNvbmZpZyhbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHsKICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRyb290U2NvcGUnLCBbJyRkZWxlZ2F0ZScsIHNjb3BlUmVjb25uZWN0RGVjb3JhdG9yXSk7CiAgICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckcm9vdFNjb3BlJywgWyckZGVsZWdhdGUnLCBzY29wZVBvc3REaWdlc3REZWNvcmF0b3JdKTsKICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRyb290U2NvcGUnLCBbJyRkZWxlZ2F0ZScsIHNjb3BlUmVlbnRyYW5jZURlY29yYXRvcl0pOwogICAgfV0pOwoKICAgIGZ1bmN0aW9uIHNjb3BlUmVjb25uZWN0RGVjb3JhdG9yKCRyb290U2NvcGUpIHsKICAgICAgICAkcm9vdFNjb3BlLiRkaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICh0aGlzLiRyb290ID09PSB0aGlzKSB7CiAgICAgICAgICAgICAgICByZXR1cm47IC8vIHdlIGNhbid0IGRpc2Nvbm5lY3QgdGhlIHJvb3Qgbm9kZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy4kcGFyZW50OwogICAgICAgICAgICB0aGlzLiQkZGlzY29ubmVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgLy8gU2VlIFNjb3BlLiRkZXN0cm95CiAgICAgICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQgPT09IHRoaXMpIHsKICAgICAgICAgICAgICAgIHBhcmVudC4kJGNoaWxkSGVhZCA9IHRoaXMuJCRuZXh0U2libGluZzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocGFyZW50LiQkY2hpbGRUYWlsID09PSB0aGlzKSB7CiAgICAgICAgICAgICAgICBwYXJlbnQuJCRjaGlsZFRhaWwgPSB0aGlzLiQkcHJldlNpYmxpbmc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMuJCRwcmV2U2libGluZykgewogICAgICAgICAgICAgICAgdGhpcy4kJHByZXZTaWJsaW5nLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkbmV4dFNpYmxpbmc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMuJCRuZXh0U2libGluZykgewogICAgICAgICAgICAgICAgdGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nID0gbnVsbDsKICAgICAgICB9OwogICAgICAgICRyb290U2NvcGUuJHJlY29ubmVjdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAodGhpcy4kcm9vdCA9PT0gdGhpcykgewogICAgICAgICAgICAgICAgcmV0dXJuOyAvLyB3ZSBjYW4ndCBkaXNjb25uZWN0IHRoZSByb290IG5vZGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpczsKICAgICAgICAgICAgaWYgKCFjaGlsZC4kJGRpc2Nvbm5lY3RlZCkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBjaGlsZC4kcGFyZW50OwogICAgICAgICAgICBjaGlsZC4kJGRpc2Nvbm5lY3RlZCA9IGZhbHNlOwogICAgICAgICAgICAvLyBTZWUgU2NvcGUuJG5ldyBmb3IgdGhpcyBsb2dpYy4uLgogICAgICAgICAgICBjaGlsZC4kJHByZXZTaWJsaW5nID0gcGFyZW50LiQkY2hpbGRUYWlsOwogICAgICAgICAgICBpZiAocGFyZW50LiQkY2hpbGRIZWFkKSB7CiAgICAgICAgICAgICAgICBwYXJlbnQuJCRjaGlsZFRhaWwuJCRuZXh0U2libGluZyA9IGNoaWxkOwogICAgICAgICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwYXJlbnQuJCRjaGlsZEhlYWQgPSBwYXJlbnQuJCRjaGlsZFRhaWwgPSBjaGlsZDsKICAgICAgICAgICAgfQoKICAgICAgICB9OwogICAgICAgIHJldHVybiAkcm9vdFNjb3BlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNjb3BlUG9zdERpZ2VzdERlY29yYXRvcigkcm9vdFNjb3BlKSB7CiAgICAgICAgdmFyIHByZUxpc3RlbmVycyA9IFtdLAogICAgICAgICAgICBwb3N0T25lTGlzdGVuZXJzID0gW10sCiAgICAgICAgICAgIHBvc3RBbHdheXNMaXN0ZW5lcnMgPSBbXSwKICAgICAgICAgICAgX2RpZ2VzdCA9ICRyb290U2NvcGUuJGRpZ2VzdDsKICAgICAgICAkcm9vdFNjb3BlLiRwcmVEaWdlc3QgPSBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICAgICAgICBhZGRMaXN0ZW5lcih0aGlzLCAnJCRwcmVEaWdlc3RMaXN0ZW5lcnMnLCBjYWxsYmFjayk7CiAgICAgICAgfTsKICAgICAgICAkcm9vdFNjb3BlLiRwb3N0RGlnZXN0T25lID0gZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgICAgICAgYWRkTGlzdGVuZXIodGhpcywgJyQkcG9zdERpZ2VzdE9uZUxpc3RlbmVycycsIGNhbGxiYWNrKTsKICAgICAgICB9OwogICAgICAgICRyb290U2NvcGUuJHBvc3REaWdlc3RBbHdheXMgPSBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICAgICAgICBhZGRMaXN0ZW5lcih0aGlzLCAnJCRwb3N0RGlnZXN0QWx3YXlzTGlzdGVuZXJzJywgY2FsbGJhY2spOwogICAgICAgIH07CiAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBpLCByZXMsCiAgICAgICAgICAgICAgICByZWRpZ2VzdCA9IHRydWU7CiAgICAgICAgICAgIHdoaWxlIChyZWRpZ2VzdCkgewogICAgICAgICAgICAgICAgcmVkaWdlc3QgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGxvb3BMaXN0ZW5lcnModGhpcywgJyQkcHJlRGlnZXN0TGlzdGVuZXJzJywgW10pOwogICAgICAgICAgICAgICAgcmVzID0gX2RpZ2VzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgbG9vcExpc3RlbmVycyh0aGlzLCAnJCRwb3N0RGlnZXN0T25lTGlzdGVuZXJzJywgW3JlcXVpcmVSZWRpZ2VzdF0sIHRydWUpOwogICAgICAgICAgICAgICAgbG9vcExpc3RlbmVycyh0aGlzLCAnJCRwb3N0RGlnZXN0QWx3YXlzTGlzdGVuZXJzJywgW3JlcXVpcmVSZWRpZ2VzdF0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXM7CgogICAgICAgICAgICBmdW5jdGlvbiByZXF1aXJlUmVkaWdlc3QoKSB7CiAgICAgICAgICAgICAgICByZWRpZ2VzdCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHJldHVybiAkcm9vdFNjb3BlOwoKICAgICAgICBmdW5jdGlvbiBhZGRMaXN0ZW5lcihzZWxmLCBwcm9wZXJ0eSwgbGlzdGVuZXIpIHsKICAgICAgICAgICAgdmFyIGlkLCBsaXN0ZW5lcnM7CiAgICAgICAgICAgIGlmICghc2VsZi5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHsKICAgICAgICAgICAgICAgIHNlbGZbcHJvcGVydHldID0gW107CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2VsZltwcm9wZXJ0eV0ucHVzaChsaXN0ZW5lcik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBsb29wTGlzdGVuZXJzKHNlbGYsIHByb3BlcnR5LCBhcmdzLCBjbGVhckFmdGVyQ2FsbGluZykgewogICAgICAgICAgICB2YXIgaSwgbGlzdGVuZXJzOwogICAgICAgICAgICBpZiAoc2VsZi5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHsKICAgICAgICAgICAgICAgIGxpc3RlbmVycyA9IHNlbGZbcHJvcGVydHldOwogICAgICAgICAgICAgICAgaWYgKGNsZWFyQWZ0ZXJDYWxsaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZltwcm9wZXJ0eV0gPSBbXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAoaT0wOyBpPGxpc3RlbmVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShudWxsLCBhcmdzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBzY29wZVJlZW50cmFuY2VEZWNvcmF0b3IoJHJvb3RTY29wZSkgewogICAgICAgIHZhciBfYXBwbHkgPSAkcm9vdFNjb3BlLiRhcHBseTsKICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS4kZXZhbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBfYXBwbHkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICAgIHZhciBfZGlnZXN0ID0gJHJvb3RTY29wZS4kZGlnZXN0OwogICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJlcyA9IF9kaWdlc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICAgIHJldHVybiAkcm9vdFNjb3BlOwogICAgfQp9KShhbmd1bGFyKTsKKGZ1bmN0aW9uKCQsIGFuZ3VsYXIpIHsKICAgIHZhciBuZyA9IGFuZ3VsYXIubW9kdWxlKCduZycpLAogICAgICAgIGpxbUluaXRpYWxpemVkID0gZmFsc2UsCiAgICAgICAgbGFzdENyZWF0ZWRQYWdlcyA9IFtdOwoKICAgICQubW9iaWxlLmF1dG9Jbml0aWFsaXplUGFnZSA9IGZhbHNlOwoKICAgIG5nLmNvbmZpZyhbIiRwcmVjb21waWxlUHJvdmlkZXIiLCBmdW5jdGlvbigkcHJlY29tcGlsZSkgewogICAgICAgICRwcmVjb21waWxlLmFkZEhhbmRsZXIoWyJqcW1OZ1dpZGdldCIsICJlbGVtZW50IiwgcHJlY29tcGlsZVBhZ2VBbmRXaWRnZXRzXSk7CiAgICB9XSk7CiAgICBuZy5ydW4oWyckcm9vdFNjb3BlJywgZGlnZXN0T25seUN1cnJlbnRTY29wZV0pOwogICAgbmcucnVuKFsnJHJvb3RTY29wZScsICckY29tcGlsZScsICdqcW1OZ1dpZGdldCcsICckYnJvd3NlcicsIGluaXRFeHRlcm5hbEpxbVBhZ2VzT25Mb2FkXSk7CiAgICBuZy5ydW4oWyckcm9vdFNjb3BlJywgZGlnZXN0T25QYWdlQmVmb3JlU2hvd10pOwoKICAgIG5nLmRpcmVjdGl2ZSgnbmdtUGFnZScsIFsianFtTmdXaWRnZXQiLCAiJHRpbWVvdXQiLCBuZ21QYWdlRGlyZWN0aXZlXSk7CgogICAgcmV0dXJuOwoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgIC8vIGltcGxlbWVudGF0aW9uIGZ1bmN0aW9ucwoKICAgIC8vIE9ubHkgZGlnZXN0IHRoZSAkLm1vYmlsZS5hY3RpdmVQYWdlIHdoZW4gcm9vdFNjb3BlLiRkaWdlc3QgaXMgY2FsbGVkLgoKICAgIGZ1bmN0aW9uIGRpZ2VzdE9ubHlDdXJyZW50U2NvcGUoJHJvb3RTY29wZSkgewogICAgICAgIHZhciBsYXN0QWN0aXZlU2NvcGU7CiAgICAgICAgJHJvb3RTY29wZS4kcHJlRGlnZXN0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgcCA9ICQubW9iaWxlLmFjdGl2ZVBhZ2U7CiAgICAgICAgICAgIHZhciBhY3RpdmVTY29wZSA9IHAgJiYgcC5zY29wZSgpOwogICAgICAgICAgICBpZiAobGFzdEFjdGl2ZVNjb3BlICYmIGxhc3RBY3RpdmVTY29wZSAhPT0gYWN0aXZlU2NvcGUpIHsKICAgICAgICAgICAgICAgIGxhc3RBY3RpdmVTY29wZS4kZGlzY29ubmVjdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxhc3RBY3RpdmVTY29wZSA9IGFjdGl2ZVNjb3BlOwogICAgICAgICAgICBpZiAoYWN0aXZlU2NvcGUpIHsKICAgICAgICAgICAgICAgIGFjdGl2ZVNjb3BlLiRyZWNvbm5lY3QoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgICRyb290U2NvcGUuJHBvc3REaWdlc3RBbHdheXMoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBoYXNQYWdlcyA9IGxhc3RDcmVhdGVkUGFnZXMubGVuZ3RoOwogICAgICAgICAgICB3aGlsZSAobGFzdENyZWF0ZWRQYWdlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHZhciBwYWdlU2NvcGUgPSBsYXN0Q3JlYXRlZFBhZ2VzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICAvLyBEZXRhY2ggdGhlIHNjb3BlIG9mIHRoZSBjcmVhdGVkIHBhZ2VzIGZyb20gdGhlIG5vcm1hbCAkZGlnZXN0IGN5Y2xlLgogICAgICAgICAgICAgICAgLy8gTmVlZGVkIHNvIHRoYXQgb25seSAkLm1vYmlsZS5hY3RpdmVQYWdlIGdldHMgZGlnZXN0ZWQgd2hlbiByb290U2NvcGUuJGRpZ2VzdAogICAgICAgICAgICAgICAgLy8gaXMgY2FsbGVkLgogICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgYWxsb3cgb25lIGRpZ2VzdCB0byBwcm9jZXNzIGV2ZXJ5IHBhZ2UKICAgICAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIHVzZSBkYXRhYmluZGluZyBmb3IgaWRzLCAuLi4gaW4gCiAgICAgICAgICAgICAgICAvLyBuZy1yZXBlYXRzIGZvciBqcW0gcGFnZXMuCiAgICAgICAgICAgICAgICBwYWdlU2NvcGUuJGRpc2Nvbm5lY3QoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaGFzUGFnZXMgJiYgIWpxbUluaXRpYWxpemVkKSB7CiAgICAgICAgICAgICAgICBqcW1Jbml0aWFsaXplZCA9IHRydWU7CiAgICAgICAgICAgICAgICB2YXIgX2NoYW5nZVBhZ2UgPSAkLm1vYmlsZS5jaGFuZ2VQYWdlOwogICAgICAgICAgICAgICAgJC5tb2JpbGUuY2hhbmdlUGFnZSA9IGZ1bmN0aW9uKCkge307CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICQubW9iaWxlLmluaXRpYWxpemVQYWdlKCk7CiAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICQubW9iaWxlLmNoYW5nZVBhZ2UgPSBfY2hhbmdlUGFnZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgianFtSW5pdCIpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gZGlnZXN0T25QYWdlQmVmb3JlU2hvdygkcm9vdFNjb3BlKSB7CiAgICAgICAgJChkb2N1bWVudCkub24oInBhZ2ViZWZvcmVzaG93IiwgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoInBhZ2ViZWZvcmVzaG93IiwgZSk7CiAgICAgICAgICAgIC8vIFRoZSBwYWdlIG1heSBub3QgYmUgY29ubmVjdGVkIHVudGlsIHRoZSBjYWxsCiAgICAgICAgICAgIC8vIG9mICRkaWdlc3QuIFNvIGZpcmUgdGhlIGV2ZW50IGRpcmVjdGx5IG9uIHRoZSBwYWdlIHNjb3BlLgogICAgICAgICAgICB2YXIgcGFnZVNjb3BlID0gJChlLnRhcmdldCkuc2NvcGUoKTsKICAgICAgICAgICAgaWYgKHBhZ2VTY29wZSAmJiBwYWdlU2NvcGUuJCRkaXNjb25uZWN0ZWQpIHsKICAgICAgICAgICAgICAgIHBhZ2VTY29wZS4kYnJvYWRjYXN0KCJwYWdlYmVmb3Jlc2hvdyIsIGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHsKICAgICAgICAgICAgICAgIC8vIElmIHdlIGFyZSBhbHJlYWR5IGRpZ2VzdGluZywKICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZm9yY2UgYW5vdGhlciBkaWdlc3QsCiAgICAgICAgICAgICAgICAvLyBhcyB3ZSBhcmUgY2hhbmdpbmcgdGhlIHNjb3BlIHN0cnVjdHVyZSBvbgogICAgICAgICAgICAgICAgLy8gcGFnZSBjaGFuZ2UgKGRpc2Nvbm5lY3QgdGhlIHNjb3BlIG9mIHRoZSBvbGQgcGFnZQogICAgICAgICAgICAgICAgLy8gYW5kIHJlY29ubmVjdCB0aGUgc2NvcGUgb2YgdGhlIG5ldyBwYWdlKS4KICAgICAgICAgICAgICAgICRyb290U2NvcGUuJHBvc3REaWdlc3RPbmUoZnVuY3Rpb24ocmVxdWlyZVJlZGlnZXN0KSB7CiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZVJlZGlnZXN0KCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGlzICRwcmVjb21waWxlIGhhbmRsZXIgd2lsbCBlbmhhbmNlIHRoZSBkb20gZHVyaW5nIGNvbXBpbGUKICAgICAqIHdpdGggbm9uIHdpZGdldCBtYXJrdXAuIFRoaXMgd2lsbCBhbHNvIG1hcmsgZWxlbWVudHMgdGhhdCBjb250YWluCiAgICAgKiBqcW0gd2lkZ2V0cy4KICAgICAqLwoKICAgIGZ1bmN0aW9uIHByZWNvbXBpbGVQYWdlQW5kV2lkZ2V0cyhqcW1OZ1dpZGdldCwgZWxlbWVudCkgewogICAgICAgIHZhciBwYWdlU2VsZWN0b3IgPSAnOmpxbURhdGEocm9sZT0icGFnZSIpLCA6anFtRGF0YShyb2xlPSJkaWFsb2ciKSc7CiAgICAgICAgLy8gc2F2ZSB0aGUgb2xkIHBhcmVudAogICAgICAgIHZhciBvbGRQYXJlbnROb2RlID0gZWxlbWVudFswXS5wYXJlbnROb2RlOwoKICAgICAgICAvLyBpZiB0aGUgZWxlbWVudCBpcyBub3QgY29ubmVjdGVkIHdpdGggdGhlIGRvY3VtZW50IGVsZW1lbnQsCiAgICAgICAgLy8gdGhlIGVuaGFuY2VtZW50cyBvZiBqcXVlcnkgbW9iaWxlIGRvIG5vdCB3b3JrICh1c2VzIGV2ZW50IGxpc3RlbmVycyBmb3IgdGhlIGRvY3VtZW50KS4KICAgICAgICAvLyBTbyB0ZW1wb3JhcmlseSBjb25uZWN0IGl0Li4uCiAgICAgICAgY29ubmVjdFRvRG9jdW1lbnRBbmRQYWdlKGpxbU5nV2lkZ2V0LCBlbGVtZW50WzBdLCBtYXJrUGFnZXNBbmRXaWRnZXRzQW5kQXBwbHlOb25XaWRnZXRNYXJrdXApOwoKICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCB3cmFwcGVkIGl0c2VsZiBpbnRvIGEgbmV3IGVsZW1lbnQsCiAgICAgICAgLy8gcmV0dXJuIHRoZSBlbGVtZW50IHRoYXQgaXMgdW5kZXIgdGhlIHNhbWUgb3JpZ2luYWwgcGFyZW50CiAgICAgICAgd2hpbGUgKGVsZW1lbnRbMF0ucGFyZW50Tm9kZSAhPT0gb2xkUGFyZW50Tm9kZSkgewogICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5lcSgwKS5wYXJlbnQoKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBlbGVtZW50OwoKICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLQoKICAgICAgICBmdW5jdGlvbiBtYXJrUGFnZXNBbmRXaWRnZXRzQW5kQXBwbHlOb25XaWRnZXRNYXJrdXAoKSB7CiAgICAgICAgICAgIHZhciBwYWdlcyA9IGVsZW1lbnQuZmluZChwYWdlU2VsZWN0b3IpLmFkZChlbGVtZW50LmZpbHRlcihwYWdlU2VsZWN0b3IpKTsKICAgICAgICAgICAgcGFnZXMuYXR0cigibmdtLXBhZ2UiLCAidHJ1ZSIpOwoKICAgICAgICAgICAgLy8gZW5oYW5jZSBub24td2lkZ2V0cyBtYXJrdXAuCiAgICAgICAgICAgIGpxbU5nV2lkZ2V0Lm1hcmtKcW1XaWRnZXRDcmVhdGlvbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGpxbU5nV2lkZ2V0LnByZXZlbnRKcW1XaWRnZXRDcmVhdGlvbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocGFnZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50IGNvbnRhaW5zIHBhZ2VzLgogICAgICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGVtcG9yYXJ5IHBhZ2VzIGZvciB0aGUgbm9uIHdpZGdldCBtYXJrdXAsIHRoYXQgd2UgZGVzdHJveSBhZnRlcndhcmRzLgogICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIG9rIGFzIG5vbiB3aWRnZXQgbWFya3VwIGRvZXMgbm90IGhvbGQgc3RhdGUsIGkuZS4gbm8gcGVybWFuZW50IHJlZmVyZW5jZSB0byB0aGUgcGFnZS4KICAgICAgICAgICAgICAgICAgICAgICAgcGFnZXMucGFnZSgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50KCkudHJpZ2dlcigiY3JlYXRlIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gRGVzdHJveSB0aGUgdGVtcG9yYXJ5IHBhZ2VzIGFnYWluCiAgICAgICAgICAgIHBhZ2VzLnBhZ2UoImRlc3Ryb3kiKTsKICAgICAgICB9CiAgICB9CgogICAgdmFyIGVtcHR5UGFnZTsKCiAgICBmdW5jdGlvbiBjb25uZWN0VG9Eb2N1bWVudEFuZFBhZ2UoanFtTmdXaWRnZXQsIG5vZGUsIGNhbGxiYWNrKSB7CiAgICAgICAgaWYgKCFub2RlLnBhcmVudE5vZGUpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7CiAgICAgICAgfQogICAgICAgIC8vIHNlYXJjaCB0aGUgdG9wIG1vc3QgZWxlbWVudCBmb3Igbm9kZS4KICAgICAgICB3aGlsZSAobm9kZS5wYXJlbnROb2RlICYmIG5vZGUucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gMSkgewogICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlOwogICAgICAgIH0KICAgICAgICB2YXIgb2xkUGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTsKICAgICAgICBpZiAob2xkUGFyZW50Tm9kZSAhPT0gZG9jdW1lbnQpIHsKICAgICAgICAgICAgaWYgKCFlbXB0eVBhZ2UpIHsKICAgICAgICAgICAgICAgIGVtcHR5UGFnZSA9ICQoJzxkaXYgZGF0YS1yb2xlPSJwYWdlIj48L2Rpdj4nKTsKICAgICAgICAgICAgICAgIGNyZWF0ZVBhZ2VzV2l0aG91dFBhZ2VDcmVhdGVFdmVudChqcW1OZ1dpZGdldCwgZW1wdHlQYWdlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkKCJib2R5IikuYXBwZW5kKGVtcHR5UGFnZSk7CiAgICAgICAgICAgIGVtcHR5UGFnZS5hcHBlbmQobm9kZSk7CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIGlmIChvbGRQYXJlbnROb2RlICE9PSBkb2N1bWVudCkgewogICAgICAgICAgICAgICAgaWYgKG9sZFBhcmVudE5vZGUpIHsKICAgICAgICAgICAgICAgICAgICBvbGRQYXJlbnROb2RlLmFwcGVuZENoaWxkKG5vZGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gRG9uJ3QgdXNlIHJlbW92ZSwgYXMgdGhpcyB3b3VsZCBkZXN0cm95IHRoZSBwYWdlIHdpZGdldCBhbHNvLAogICAgICAgICAgICAgICAgLy8gYnV0IHdlIHdhbnQgdG8gY2FjaGUgaXQhCiAgICAgICAgICAgICAgICBlbXB0eVBhZ2VbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbXB0eVBhZ2VbMF0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogU3BlY2lhbCBkaXJlY3RpdmUgZm9yIHBhZ2VzLCBhcyB0aGV5IG5lZWQgYW4gb3duIHNjb3BlLgogICAgICovCgogICAgZnVuY3Rpb24gbmdtUGFnZURpcmVjdGl2ZShqcW1OZ1dpZGdldCwgJHRpbWVvdXQpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICByZXN0cmljdDogJ0EnLAogICAgICAgICAgICBzY29wZTogdHJ1ZSwKICAgICAgICAgICAgY29tcGlsZTogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICAgICAgdEVsZW1lbnQucmVtb3ZlQXR0cigibmdtLXBhZ2UiKTsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoISQubW9iaWxlLnBhZ2VDb250YWluZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQubW9iaWxlLnBhZ2VDb250YWluZXIgPSBpRWxlbWVudC5wYXJlbnQoKS5hZGRDbGFzcygidWktbW9iaWxlLXZpZXdwb3J0Iik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgcGFnZSB3aWRnZXQgd2l0aG91dCB0aGUgcGFnZWNyZWF0ZS1FdmVudC4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBkb2VzIG5vIGRvbSB0cmFuc2Zvcm1hdGlvbiwgc28gaXQncyBzYWZlIHRvIGNhbGwgdGhpcyBpbiB0aGUgcHJlbGluayBmdW5jdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlUGFnZXNXaXRob3V0UGFnZUNyZWF0ZUV2ZW50KGpxbU5nV2lkZ2V0LCBpRWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDcmVhdGVkUGFnZXMucHVzaChzY29wZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlUGFnZXNXaXRob3V0UGFnZUNyZWF0ZUV2ZW50KGpxbU5nV2lkZ2V0LCBwYWdlcykgewogICAgICAgIGpxbU5nV2lkZ2V0LnByZXZlbnRKcW1XaWRnZXRDcmVhdGlvbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIG9sZFByZWZpeCA9ICQubW9iaWxlLnBhZ2UucHJvdG90eXBlLndpZGdldEV2ZW50UHJlZml4OwogICAgICAgICAgICAkLm1vYmlsZS5wYWdlLnByb3RvdHlwZS53aWRnZXRFdmVudFByZWZpeCA9ICdub29wJzsKICAgICAgICAgICAgcGFnZXMucGFnZSgpOwogICAgICAgICAgICAkLm1vYmlsZS5wYWdlLnByb3RvdHlwZS53aWRnZXRFdmVudFByZWZpeCA9IG9sZFByZWZpeDsKICAgICAgICB9KTsKICAgIH0KCiAgICAvLyBJZiBqcW0gbG9hZHMgYSBwYWdlIGZyb20gYW4gZXh0ZXJuYWwgc291cmNlLCBhbmd1bGFyIG5lZWRzIHRvIGNvbXBpbGUgaXQgdG9vIQoKICAgIGZ1bmN0aW9uIGluaXRFeHRlcm5hbEpxbVBhZ2VzT25Mb2FkKCRyb290U2NvcGUsICRjb21waWxlLCBqcW1OZ1dpZGdldCwgJGJyb3dzZXIpIHsKICAgICAgICBqcW1OZ1dpZGdldC5wYXRjaEpxKCdwYWdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghanFtTmdXaWRnZXQucHJldmVudEpxbVdpZGdldENyZWF0aW9uKCkgJiYgIXRoaXMuZGF0YSgkLm1vYmlsZS5wYWdlLnByb3RvdHlwZS53aWRnZXRGdWxsTmFtZSkpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0dHIoImRhdGEtIiArICQubW9iaWxlLm5zICsgImV4dGVybmFsLXBhZ2UiKSkgewogICAgICAgICAgICAgICAgICAgIGNvcnJlY3RSZWxhdGl2ZUxpbmtzKHRoaXMpOwogICAgICAgICAgICAgICAgICAgICRjb21waWxlKHRoaXMpKCRyb290U2NvcGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAkLmZuLm9yaWcucGFnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0pOwoKICAgICAgICBmdW5jdGlvbiBjb3JyZWN0UmVsYXRpdmVMaW5rcyhwYWdlKSB7CiAgICAgICAgICAgIC8vIGNvcnJlY3QgdGhlIHJlbGF0aXZlIGxpbmtzIGluIHRoaXMgcGFnZSByZWxhdGl2ZQogICAgICAgICAgICAvLyB0byB0aGUgcGFnZSB1cmwuCiAgICAgICAgICAgIC8vIEZvciBleHRlcm5hbCBsaW5rcywganFtIGFscmVhZHkgZG9lcyB0aGlzIHdoZW4KICAgICAgICAgICAgLy8gdGhlIHBhZ2UgaXMgbG9hZGVkLiBIb3dldmVyLCBub3JtYWwgbGlua3MKICAgICAgICAgICAgLy8gYXJlIGFkanVzdGVkIGluIGpxbSB2aWEgdGhlaXIgZGVmYXVsdCBqcW0gY2xpY2sgaGFuZGxlci4KICAgICAgICAgICAgLy8gQXMgd2UgdXNlIG91ciBvd24gZGVmYXVsdCBjbGljayBoYW5kbGVyIChzZWUgbmdtUm91dGluZy5qcyksCiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gYWRqdXN0IG5vcm1hbCBsaW5rcyBvdXJzZWx2ZXMuCiAgICAgICAgICAgIHZhciBwYWdlVXJsID0gcGFnZS5qcW1EYXRhKCJ1cmwiKSwKICAgICAgICAgICAgICAgIHBhZ2VQYXRoID0gJC5tb2JpbGUucGF0aC5nZXQocGFnZVVybCksCiAgICAgICAgICAgICAgICBBQlNPVUxURV9VUkxfUkUgPSAvXihcdys6fCN8XC8pLywKICAgICAgICAgICAgICAgIEVNUFRZX1JFID0gL14oXCN8I3xcLykvOwoKICAgICAgICAgICAgcGFnZS5maW5kKCJhIikuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksCiAgICAgICAgICAgICAgICAgICAgdGhpc1VybCA9ICR0aGlzLmF0dHIoImhyZWYiKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzVXJsICYmIHRoaXNVcmwubGVuZ3RoID4gMCAmJiAhQUJTT1VMVEVfVVJMX1JFLnRlc3QodGhpc1VybCkpIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy5hdHRyKCJocmVmIiwgcGFnZVBhdGggKyB0aGlzVXJsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQoKCgp9KSgkLCBhbmd1bGFyKTsKKGZ1bmN0aW9uKCQsIGFuZ3VsYXIpIHsKICAgIHZhciBuZyA9IGFuZ3VsYXIubW9kdWxlKCduZycpLAogICAgICAgIGV4ZWNGbGFncyA9IHt9OwoKICAgICQuZm4ub3JpZyA9IHt9OwoKICAgIG5nLnByb3ZpZGVyKCJqcW1OZ1dpZGdldCIsIFsiJGNvbXBpbGVQcm92aWRlciIsIGpxbU5nV2lkZ2V0UHJvdmlkZXJdKTsKICAgIG5nLnJ1bihbImpxbU5nV2lkZ2V0IiwgZnVuY3Rpb24oanFtTmdXaWRnZXQpIHsKICAgICAgICBqcW1OZ1dpZGdldC5faW5pdCgpOwogICAgfV0pOwoKICAgIGVuYWJsZURvbU1hbmlwRGVsZWdhdGUoImFmdGVyIik7CiAgICBlbmFibGVEb21NYW5pcERlbGVnYXRlKCJiZWZvcmUiKTsKICAgIGVuYWJsZURvbU1hbmlwRGVsZWdhdGUoImNzcyIsIGZ1bmN0aW9uKGF0dHJOYW1lLCB2YWx1ZSkgewogICAgICAgIC8vIGlmIHRoZSBlbGVtZW50IGlzIHNob3duL2hpZGRlbiwgZGVsZWdhdGUgdGhpcyB0byB0aGUgd3JhcHBlcgogICAgICAgIC8vIChzZWUgbmctc2hvdykuIE9ubHkgY2F0Y2ggdGhlIHNldHRlciEKICAgICAgICByZXR1cm4gYXR0ck5hbWUgPT09ICdkaXNwbGF5JyAmJiBhcmd1bWVudHMubGVuZ3RoID49IDI7CiAgICB9KTsKICAgIGVuYWJsZURvbU1hbmlwRGVsZWdhdGUoInJlbW92ZSIpOwoKICAgIHJldHVybjsKCiAgICAvLyAtLS0tLS0tLS0tLS0tLQoKICAgIC8qKgogICAgICogQG5nZG9jIG9iamVjdAogICAgICogQG5hbWUgbmcuanFtTmdXaWRnZXRQcm92aWRlcgogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogSGVscGVyIHNlcnZpY2UgZm9yIGNyZWF0aW5nIGEgY3VzdG9tIGRpcmVjdGl2ZSBmb3IgYSBqcW0gd2lkZ2V0LgogICAgICogVGhlIHByb3ZpZGVyIGNvbnRhaW5zIGEgbWV0aG9kIGZvciByZWdpc3RlcmluZyB3aWRnZXRzLAogICAgICogYW5kIHRoZSBzZXJ2aWNlIHByb3ZpZGVzIG1ldGhvZHMgZm9yIHJlZnJlc2hpbmcgdGhlIHdpZGdldC4KICAgICAqLwogICAgZnVuY3Rpb24ganFtTmdXaWRnZXRQcm92aWRlcigkY29tcGlsZVByb3ZpZGVyKSB7CiAgICAgICAgdmFyIHdpZGdldERlZnMgPSB7fSwKICAgICAgICB3aWRnZXRJbnN0YW5jZXMgPSB7fTsKCiAgICAgICAgdmFyIHByb3ZpZGVyID0gewogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogQG5hbWUgbmcuamdtTmdXaWRnZXRQcm92aWRlciN3aWRnZXQKICAgICAgICAgICAgICogQG1ldGhvZE9mIG5nLmpnbU5nV2lkZ2V0UHJvdmlkZXIKICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgICAqIFJlZ2lzdGVycyBhIGRpcmVjdGl2ZSBmb3IgYSBqcW0gd2lkZ2V0LgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gd2lkZ2V0TmFtZSBqcW0gd2lkZ2V0IG5hbWUsIGUuZy4gJ2RpYWxvZycuCiAgICAgICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZGlyZWN0aXZlIGluamVjdGFibGUgZnVuY3Rpb24sIHRoYXQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAqIDx1bD4KICAgICAgICAgICAgICogPGxpPntmdW5jdGlvbihlbGVtZW50KX0gcHJlY29tcGlsZSBPcHRpb25hbCB3aWxsIGJlIGNhbGxlZCBiZWZvcmUgYW5ndWxhciBjb21waWxlcyBhIGh0bWwgc25pcHBldC48L2xpPgogICAgICAgICAgICAgKiA8bGk+e2Z1bmN0aW9uKGVsZW1lbnQpfSBwcmVMaW5rIE9wdGlvbmFsIHdpbGwgYmUgY2FsbGVkIGp1c3QgbGlrZSBub3JtYWwgZGlyZWN0aXZlcyBgcHJlTGlua2AgZnVuY3Rpb24uCiAgICAgICAgICAgICAqIDxsaT57ZnVuY3Rpb24oZWxlbWVudCl9IGxpbmsgd2lsbCBiZSBjYWxsZWQganVzdCBsaWtlIG5vcm1hbCBkaXJlY3RpdmVzIGBsaW5rYC9gcG9zdExpbmtgIGZ1bmN0aW9uLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgd2lkZ2V0OiBmdW5jdGlvbihuYW1lLCBzcGVjKSB7CiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB3aWRnZXREZWZzW25hbWVdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG92ZXJyaWRlID0gISEgd2lkZ2V0RGVmc1tuYW1lXTsKICAgICAgICAgICAgICAgIHdpZGdldERlZnNbbmFtZV0gPSBzcGVjOwogICAgICAgICAgICAgICAgaWYgKCFvdmVycmlkZSkgewogICAgICAgICAgICAgICAgICAgIGFkZEpxbU5nV2lkZ2V0RGlyZWN0aXZlKG5hbWUsICRjb21waWxlUHJvdmlkZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAkZ2V0OiBbIiRpbmplY3RvciIsIGZ1bmN0aW9uKCRpbmplY3RvcikgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBsb29rdXA6IGZ1bmN0aW9uKHdpZGdldE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpZGdldEluc3RhbmNlc1t3aWRnZXROYW1lXTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIF9pbml0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZGdldE5hbWUsIHdpZGdldEluc3RhbmNlOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHdpZGdldE5hbWUgaW4gd2lkZ2V0RGVmcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkZ2V0SW5zdGFuY2UgPSB3aWRnZXRJbnN0YW5jZXNbd2lkZ2V0TmFtZV0gPSAkaW5qZWN0b3IuaW52b2tlKHdpZGdldERlZnNbd2lkZ2V0TmFtZV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hKcW1XaWRnZXQod2lkZ2V0TmFtZSwgd2lkZ2V0SW5zdGFuY2UpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwcmV2ZW50SnFtV2lkZ2V0Q3JlYXRpb246IHByZXZlbnRKcW1XaWRnZXRDcmVhdGlvbiwKICAgICAgICAgICAgICAgICAgICBtYXJrSnFtV2lkZ2V0Q3JlYXRpb246IG1hcmtKcW1XaWRnZXRDcmVhdGlvbiwKICAgICAgICAgICAgICAgICAgICBwYXRjaEpxOiBwYXRjaEpxLAogICAgICAgICAgICAgICAgICAgIGNyZWF0ZVdpZGdldDogZnVuY3Rpb24od2lkZ2V0TmFtZSwgaUVsZW1lbnQsIGlBdHRycykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdEFyZ3MgPSBKU09OLnBhcnNlKGlBdHRyc1tjYWxjRGlyZWN0aXZlTmFtZSh3aWRnZXROYW1lKV0pOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZURvbU1hbmlwVG9XcmFwcGVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5mbi5vcmlnW3dpZGdldE5hbWVdLmFwcGx5KGlFbGVtZW50LCBpbml0QXJncyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGlFbGVtZW50KTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGJpbmREZWZhdWx0QXR0cnNBbmRFdmVudHM6IGJpbmREZWZhdWx0QXR0cnNBbmRFdmVudHMsCiAgICAgICAgICAgICAgICAgICAgYmluZERpc2FibGVkQXR0cmlidXRlOiBiaW5kRGlzYWJsZWRBdHRyaWJ1dGUsCiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEFmdGVyTmdNb2RlbFJlbmRlcjogcmVmcmVzaEFmdGVyTmdNb2RlbFJlbmRlciwKICAgICAgICAgICAgICAgICAgICByZWZyZXNoT25DaGlsZHJlbkNoYW5nZTogcmVmcmVzaE9uQ2hpbGRyZW5DaGFuZ2UsCiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckFzeW5jUmVmcmVzaDogdHJpZ2dlckFzeW5jUmVmcmVzaAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfV0KICAgICAgICB9OwoKICAgICAgICByZXR1cm4gcHJvdmlkZXI7CiAgICB9CgogICAgZnVuY3Rpb24gY2FsY0RpcmVjdGl2ZU5hbWUod2lkZ2V0TmFtZSkgewogICAgICAgIHJldHVybiAibmdtIiArIHdpZGdldE5hbWVbMF0udG9VcHBlckNhc2UoKSArIHdpZGdldE5hbWUuc3Vic3RyaW5nKDEpOwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZEpxbU5nV2lkZ2V0RGlyZWN0aXZlKHdpZGdldE5hbWUsICRjb21waWxlUHJvdmlkZXIpIHsKICAgICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGNhbGNEaXJlY3RpdmVOYW1lKHdpZGdldE5hbWUpOwogICAgICAgICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKGRpcmVjdGl2ZU5hbWUsIFsianFtTmdXaWRnZXQiLCBkaXJlY3RpdmVJbXBsXSk7CiAgICAgICAgcmV0dXJuOwoKICAgICAgICBmdW5jdGlvbiBkaXJlY3RpdmVJbXBsKGpxbU5nV2lkZ2V0KSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICByZXN0cmljdDogJ0EnLAogICAgICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIG5vcm1hbCBhbmd1bGFyIHdpZGdldHMgbGlrZSBpbnB1dCwgbmdNb2RlbCwgLi4uCiAgICAgICAgICAgICAgICBwcmlvcml0eTogMCwKICAgICAgICAgICAgICAgIHJlcXVpcmU6IFsnP25nTW9kZWwnLCAnP3NlbGVjdCddLAogICAgICAgICAgICAgICAgY29tcGlsZTogZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICAgICAgICAgIHZhciBpbml0QXJncyA9IEpTT04ucGFyc2UodEF0dHJzW2RpcmVjdGl2ZU5hbWVdKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjdHJscykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZGdldFNwZWMgPSBqcW1OZ1dpZGdldC5sb29rdXAod2lkZ2V0TmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lkZ2V0U3BlYy5wcmVMaW5rKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkZ2V0U3BlYy5wcmVMaW5rKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjdHJsc1swXSwgY3RybHNbMV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBwb3N0OiBmdW5jdGlvbihzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY3RybHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aWRnZXRTcGVjID0ganFtTmdXaWRnZXQubG9va3VwKHdpZGdldE5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkZ2V0U3BlYy5saW5rKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjdHJsc1swXSwgY3RybHNbMV0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGF0Y2hKcW1XaWRnZXQod2lkZ2V0TmFtZSwgd2lkZ2V0SW5zdGFuY2UpIHsKICAgICAgICB2YXIgd2lkZ2V0QXR0ciA9ICJkYXRhLW5nbS0iICsgd2lkZ2V0TmFtZTsKICAgICAgICBwYXRjaEpxKHdpZGdldE5hbWUsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAobWFya0pxbVdpZGdldENyZWF0aW9uKCkpIHsKICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc2VsZi5sZW5ndGg7IGsrKykgewogICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gc2VsZi5lcShrKTsKICAgICAgICAgICAgICAgICAgICBpZiAod2lkZ2V0SW5zdGFuY2UgJiYgd2lkZ2V0SW5zdGFuY2UucHJlY29tcGlsZSkgewogICAgICAgICAgICAgICAgICAgICAgICB3aWRnZXRJbnN0YW5jZS5wcmVjb21waWxlKGVsZW1lbnQsIGFyZ3MpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmF0dHIod2lkZ2V0QXR0ciwgSlNPTi5zdHJpbmdpZnkoYXJncykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwcmV2ZW50SnFtV2lkZ2V0Q3JlYXRpb24oKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAkLmZuLm9yaWdbd2lkZ2V0TmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBwYXRjaEpxKGZuTmFtZSwgY2FsbGJhY2spIHsKICAgICAgICAkLmZuLm9yaWdbZm5OYW1lXSA9ICQuZm4ub3JpZ1tmbk5hbWVdIHx8ICQuZm5bZm5OYW1lXTsKICAgICAgICAkLmZuW2ZuTmFtZV0gPSBjYWxsYmFjazsKICAgIH0KCiAgICBmdW5jdGlvbiBleGVjV2l0aEZsYWcoZmxhZywgZm4pIHsKICAgICAgICBpZiAoIWZuKSB7CiAgICAgICAgICAgIHJldHVybiBleGVjRmxhZ3NbZmxhZ107CiAgICAgICAgfQogICAgICAgIHZhciBvbGQgPSBleGVjRmxhZ3NbZmxhZ107CiAgICAgICAgZXhlY0ZsYWdzW2ZsYWddID0gdHJ1ZTsKICAgICAgICB2YXIgcmVzID0gZm4oKTsKICAgICAgICBleGVjRmxhZ3NbZmxhZ10gPSBvbGQ7CiAgICAgICAgcmV0dXJuIHJlczsKICAgIH0KCiAgICBmdW5jdGlvbiBwcmV2ZW50SnFtV2lkZ2V0Q3JlYXRpb24oZm4pIHsKICAgICAgICByZXR1cm4gZXhlY1dpdGhGbGFnKCdwcmV2ZW50SnFtV2lkZ2V0Q3JlYXRpb24nLCBmbik7CiAgICB9CgogICAgZnVuY3Rpb24gbWFya0pxbVdpZGdldENyZWF0aW9uKGZuKSB7CiAgICAgICAgcmV0dXJuIGV4ZWNXaXRoRmxhZygnbWFya0pxbVdpZGdldENyZWF0aW9uJywgZm4pOwogICAgfQoKICAgIGZ1bmN0aW9uIHByZXZlbnREb21NYW5pcFdyYXBwZXIoZm4pIHsKICAgICAgICByZXR1cm4gZXhlY1dpdGhGbGFnKCdwcmV2ZW50RG9tTWFuaXBXcmFwcGVyJywgZm4pOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlbGVnYXRlRG9tTWFuaXBUb1dyYXBwZXIob3JpZ0NyZWF0ZSwgZWxlbWVudCkgewogICAgICAgIHZhciBvbGRQYXJlbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZWxlbWVudC5wYXJlbnRzKCkpLAogICAgICAgICAgICBuZXdQYXJlbnRzLAogICAgICAgICAgICBpLCBvbGRQYXJlbnQsIG5ld1BhcmVudDsKCiAgICAgICAgb2xkUGFyZW50cy51bnNoaWZ0KGVsZW1lbnRbMF0pOwogICAgICAgIHByZXZlbnREb21NYW5pcFdyYXBwZXIob3JpZ0NyZWF0ZSk7CiAgICAgICAgbmV3UGFyZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGVsZW1lbnQucGFyZW50cygpKTsKICAgICAgICBuZXdQYXJlbnRzLnVuc2hpZnQoZWxlbWVudFswXSk7CgogICAgICAgIGZvciAoaSA9IDA7IGkgPCBvbGRQYXJlbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIG9sZFBhcmVudCA9IG9sZFBhcmVudHNbb2xkUGFyZW50cy5sZW5ndGggLSBpIC0gMV07CiAgICAgICAgICAgIG5ld1BhcmVudCA9IG5ld1BhcmVudHNbbmV3UGFyZW50cy5sZW5ndGggLSBpIC0gMV07CiAgICAgICAgICAgIGlmIChvbGRQYXJlbnQgIT09IG5ld1BhcmVudCkgewogICAgICAgICAgICAgICAgJChvbGRQYXJlbnQpLmRhdGEoIndyYXBwZXJEZWxlZ2F0ZSIsICQobmV3UGFyZW50KSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBlbmFibGVEb21NYW5pcERlbGVnYXRlKGZuTmFtZSwgY2FsbEZpbHRlcikgewogICAgICAgIHZhciBvbGQgPSAkLmZuW2ZuTmFtZV07CiAgICAgICAgJC5mbltmbk5hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmIChlbmFibGVEb21NYW5pcERlbGVnYXRlLnJlY3Vyc2UgfHwgcHJldmVudERvbU1hbmlwV3JhcHBlcigpIHx8IChjYWxsRmlsdGVyICYmICFjYWxsRmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2xkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGVuYWJsZURvbU1hbmlwRGVsZWdhdGUucmVjdXJzZSA9IHRydWU7CiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksCiAgICAgICAgICAgICAgICAgICAgZGVsZWdhdGUsCiAgICAgICAgICAgICAgICAgICAgYXJnMCA9IGFyZ3NbMF0sCiAgICAgICAgICAgICAgICAgICAgYXJnRGVsZWdhdGU7CiAgICAgICAgICAgICAgICBkZWxlZ2F0ZSA9IHRoaXMuZGF0YSgid3JhcHBlckRlbGVnYXRlIik7CiAgICAgICAgICAgICAgICBpZiAoZGVsZWdhdGUgJiYgZm5OYW1lID09PSAncmVtb3ZlJykgewogICAgICAgICAgICAgICAgICAgIG9sZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGFyZzAgJiYgdHlwZW9mIGFyZzAuZGF0YSA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgICAgICAgIGFyZ0RlbGVnYXRlID0gYXJnMC5kYXRhKCJ3cmFwcGVyRGVsZWdhdGUiKTsKICAgICAgICAgICAgICAgICAgICBhcmdzWzBdID0gYXJnRGVsZWdhdGUgfHwgYXJnc1swXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvbGQuYXBwbHkoZGVsZWdhdGUgfHwgdGhpcywgYXJncyk7CiAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICBlbmFibGVEb21NYW5pcERlbGVnYXRlLnJlY3Vyc2UgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gYmluZERlZmF1bHRBdHRyc0FuZEV2ZW50cyh3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgbmdNb2RlbEN0cmwpIHsKICAgICAgICB2YXIgd2lkZ2V0SW5zdGFuY2UgPSBpRWxlbWVudC5kYXRhKCQubW9iaWxlW3dpZGdldE5hbWVdLnByb3RvdHlwZS53aWRnZXRGdWxsTmFtZSk7CiAgICAgICAgaWYgKCF3aWRnZXRJbnN0YW5jZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmICh3aWRnZXRJbnN0YW5jZS5kaXNhYmxlICYmIHdpZGdldEluc3RhbmNlLmVuYWJsZSAmJiAoaUF0dHJzLmRpc2FibGVkIHx8IGlBdHRycy5uZ0Rpc2FibGVkKSkgewogICAgICAgICAgICBiaW5kRGlzYWJsZWRBdHRyaWJ1dGUod2lkZ2V0TmFtZSwgaUVsZW1lbnQsIGlBdHRycyk7CiAgICAgICAgfQogICAgICAgIGlmICh3aWRnZXRJbnN0YW5jZS5yZWZyZXNoKSB7CiAgICAgICAgICAgIHJlZnJlc2hPbkNoaWxkcmVuQ2hhbmdlKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCk7CiAgICAgICAgICAgIGlmIChuZ01vZGVsQ3RybCkgewogICAgICAgICAgICAgICAgcmVmcmVzaEFmdGVyTmdNb2RlbFJlbmRlcih3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIG5nTW9kZWxDdHJsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBiaW5kRGlzYWJsZWRBdHRyaWJ1dGUod2lkZ2V0TmFtZSwgaUVsZW1lbnQsIGlBdHRycykgewogICAgICAgIGlBdHRycy4kb2JzZXJ2ZSgiZGlzYWJsZWQiLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgICAgICAgIGlFbGVtZW50W3dpZGdldE5hbWVdKCJkaXNhYmxlIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpRWxlbWVudFt3aWRnZXROYW1lXSgiZW5hYmxlIik7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiByZWZyZXNoQWZ0ZXJOZ01vZGVsUmVuZGVyKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgbmdNb2RlbEN0cmwpIHsKICAgICAgICBhZGRDdHJsRnVuY3Rpb25MaXN0ZW5lcihuZ01vZGVsQ3RybCwgIiRyZW5kZXIiLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdHJpZ2dlckFzeW5jUmVmcmVzaCh3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsICJyZWZyZXNoIik7CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkQ3RybEZ1bmN0aW9uTGlzdGVuZXIoY3RybCwgY3RybEZuTmFtZSwgZm4pIHsKICAgICAgICB2YXIgbGlzdGVuZXJzTmFtZSA9ICJfbGlzdGVuZXJzIiArIGN0cmxGbk5hbWU7CiAgICAgICAgaWYgKCFjdHJsW2xpc3RlbmVyc05hbWVdKSB7CiAgICAgICAgICAgIGN0cmxbbGlzdGVuZXJzTmFtZV0gPSBbXTsKICAgICAgICAgICAgdmFyIG9sZEZuID0gY3RybFtjdHJsRm5OYW1lXTsKICAgICAgICAgICAgY3RybFtjdHJsRm5OYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIHJlcyA9IG9sZEZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN0cmxbbGlzdGVuZXJzTmFtZV0ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBjdHJsW2xpc3RlbmVyc05hbWVdW2ldKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBjdHJsW2xpc3RlbmVyc05hbWVdLnB1c2goZm4pOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlZnJlc2hPbkNoaWxkcmVuQ2hhbmdlKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCkgewogICAgICAgIGlFbGVtZW50LmJpbmQoIiRjaGlsZHJlbkNoYW5nZWQiLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdHJpZ2dlckFzeW5jUmVmcmVzaCh3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsICJyZWZyZXNoIik7CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gdHJpZ2dlckFzeW5jUmVmcmVzaCh3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIG9wdGlvbnMpIHsKICAgICAgICB2YXIgcHJvcCA9ICJfcmVmcmVzaCIgKyB3aWRnZXROYW1lOwogICAgICAgIHZhciByZWZyZXNoSWQgPSAoaUVsZW1lbnQuZGF0YShwcm9wKSB8fCAwKSArIDE7CiAgICAgICAgaUVsZW1lbnQuZGF0YShwcm9wLCByZWZyZXNoSWQpOwogICAgICAgIHNjb3BlLiRyb290LiRwb3N0RGlnZXN0T25lKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoaUVsZW1lbnQuZGF0YShwcm9wKSA9PT0gcmVmcmVzaElkKSB7CiAgICAgICAgICAgICAgICBpRWxlbWVudFt3aWRnZXROYW1lXShvcHRpb25zKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKCgp9KSh3aW5kb3cualF1ZXJ5LCB3aW5kb3cuYW5ndWxhcik7CihmdW5jdGlvbiAoYW5ndWxhciwgJCkgewogICAgdmFyIG5nID0gYW5ndWxhci5tb2R1bGUoIm5nIik7CiAgICBuZy5jb25maWcoWyJqcW1OZ1dpZGdldFByb3ZpZGVyIiwgZnVuY3Rpb24oanFtTmdXaWRnZXRQcm92aWRlcikgewogICAgICAgIC8vIHJlZ2lzdGVyIGEgZGVmYXVsdCBoYW5kbGVyIGZvciBhbGwgd2lkZ2V0cy4KICAgICAgICB2YXIgd2lkZ2V0TmFtZSwgd2lkZ2V0OwogICAgICAgIGZvciAod2lkZ2V0TmFtZSBpbiAkLm1vYmlsZSkgewogICAgICAgICAgICB3aWRnZXQgPSAkLm1vYmlsZVt3aWRnZXROYW1lXTsKICAgICAgICAgICAgaWYgKHdpZGdldE5hbWUhPT0ncGFnZScgJiYgYW5ndWxhci5pc0Z1bmN0aW9uKHdpZGdldCkgJiYgd2lkZ2V0LnByb3RvdHlwZS53aWRnZXQpIHsKICAgICAgICAgICAgICAgIGpxbU5nV2lkZ2V0UHJvdmlkZXIud2lkZ2V0KHdpZGdldE5hbWUsIFsianFtTmdXaWRnZXQiLCBkZWZhdWx0V2lkZ2V0XSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIHJlZ2lzdGVyIHNwZWNpYWwgb3ZlcnJpZGUgaGFuZGxlcnMKICAgICAgICBqcW1OZ1dpZGdldFByb3ZpZGVyLndpZGdldCgiY2hlY2tib3hyYWRpbyIsIFsianFtTmdXaWRnZXQiLCBjaGVja2JveFJhZGlvV2lkZ2V0XSk7CiAgICAgICAganFtTmdXaWRnZXRQcm92aWRlci53aWRnZXQoImJ1dHRvbiIsIFsianFtTmdXaWRnZXQiLCBidXR0b25XaWRnZXRdKTsKICAgICAgICBqcW1OZ1dpZGdldFByb3ZpZGVyLndpZGdldCgiY29sbGFwc2libGUiLCBbImpxbU5nV2lkZ2V0IiwgIiRwYXJzZSIsIGNvbGxhcHNpYmxlV2lkZ2V0XSk7CiAgICAgICAganFtTmdXaWRnZXRQcm92aWRlci53aWRnZXQoImRpYWxvZyIsIFsianFtTmdXaWRnZXQiLCBkaWFsb2dXaWRnZXRdKTsKICAgICAgICBqcW1OZ1dpZGdldFByb3ZpZGVyLndpZGdldCgiY29udHJvbGdyb3VwIiwgWyJqcW1OZ1dpZGdldCIsIGNvbnRyb2xncm91cFdpZGdldF0pOwogICAgICAgIGpxbU5nV2lkZ2V0UHJvdmlkZXIud2lkZ2V0KCJ0ZXh0aW5wdXQiLCBbImpxbU5nV2lkZ2V0IiwgdGV4dGlucHV0V2lkZ2V0XSk7CiAgICAgICAganFtTmdXaWRnZXRQcm92aWRlci53aWRnZXQoInNsaWRlciIsIFsianFtTmdXaWRnZXQiLCAiJHBhcnNlIiwgc2xpZGVyV2lkZ2V0XSk7CiAgICAgICAganFtTmdXaWRnZXRQcm92aWRlci53aWRnZXQoInBvcHVwIiwgWyJqcW1OZ1dpZGdldCIsICIkcGFyc2UiLCBwb3B1cFdpZGdldF0pOwogICAgICAgIGpxbU5nV2lkZ2V0UHJvdmlkZXIud2lkZ2V0KCJwYW5lbCIsIFsianFtTmdXaWRnZXQiLCAiJHBhcnNlIiwgcGFuZWxXaWRnZXRdKTsKICAgICAgICBqcW1OZ1dpZGdldFByb3ZpZGVyLndpZGdldCgidGFibGUiLCBbImpxbU5nV2lkZ2V0IiwgdGFibGVXaWRnZXRdKTsKICAgIH1dKTsKCiAgICBmdW5jdGlvbiBkZWZhdWx0V2lkZ2V0KGpxbU5nV2lkZXQpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBsaW5rOiBmdW5jdGlvbih3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgbmdNb2RlbEN0cmwsIHNlbGVjdEN0cmwpIHsKICAgICAgICAgICAgICAgIGpxbU5nV2lkZXQuY3JlYXRlV2lkZ2V0KHdpZGdldE5hbWUsIGlFbGVtZW50LCBpQXR0cnMpOwogICAgICAgICAgICAgICAganFtTmdXaWRldC5iaW5kRGVmYXVsdEF0dHJzQW5kRXZlbnRzKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBuZ01vZGVsQ3RybCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIHRleHRpbnB1dFdpZGdldChqcW1OZ1dpZGdldCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHByZUxpbms6IGZ1bmN0aW9uKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBuZ01vZGVsQ3RybCwgc2VsZWN0Q3RybCkgewogICAgICAgICAgICAgICAgaWYgKGlBdHRycy50eXBlID09PSAncmFuZ2UnKSB7CiAgICAgICAgICAgICAgICAgICAgaUF0dHJzLnR5cGUgPSAnbnVtYmVyJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGluazogZnVuY3Rpb24od2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKSB7CiAgICAgICAgICAgICAgICBqcW1OZ1dpZGdldC5jcmVhdGVXaWRnZXQod2lkZ2V0TmFtZSwgaUVsZW1lbnQsIGlBdHRycyk7CiAgICAgICAgICAgICAgICBqcW1OZ1dpZGdldC5iaW5kRGVmYXVsdEF0dHJzQW5kRXZlbnRzKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBuZ01vZGVsQ3RybCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIHBvcHVwV2lkZ2V0KGpxbU5nV2lkZXQsICRwYXJzZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBuZ01vZGVsQ3RybCwgc2VsZWN0Q3RybCkgewogICAgICAgICAgICAgICAganFtTmdXaWRldC5jcmVhdGVXaWRnZXQod2lkZ2V0TmFtZSwgaUVsZW1lbnQsIGlBdHRycyk7CiAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LmJpbmREZWZhdWx0QXR0cnNBbmRFdmVudHMod2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsKTsKICAgICAgICAgICAgICAgIGFkZE9wZW5lZEJpbmRpbmcoInBvcHVwIiwgJHBhcnNlLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgJ18nKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gcGFuZWxXaWRnZXQoanFtTmdXaWRldCwgJHBhcnNlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgbGluazogZnVuY3Rpb24od2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKSB7CiAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LmNyZWF0ZVdpZGdldCh3aWRnZXROYW1lLCBpRWxlbWVudCwgaUF0dHJzKTsKICAgICAgICAgICAgICAgIGpxbU5nV2lkZXQuYmluZERlZmF1bHRBdHRyc0FuZEV2ZW50cyh3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgbmdNb2RlbEN0cmwpOwogICAgICAgICAgICAgICAgYWRkT3BlbmVkQmluZGluZygicGFuZWwiLCAkcGFyc2UsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCAnJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIGFkZE9wZW5lZEJpbmRpbmcod2lkZ2V0TmFtZSwgJHBhcnNlLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgb3BlbkNsb3NlTWV0aG9kUHJlZml4KSB7CiAgICAgICAgdmFyIHN5bmNpbmcgPSBmYWxzZTsKICAgICAgICBpZiAoaUF0dHJzLm9wZW5lZCkgewogICAgICAgICAgICB2YXIgb3BlbmVkR2V0dGVyID0gJHBhcnNlKGlBdHRycy5vcGVuZWQpLAogICAgICAgICAgICAgICAgb3BlbmVkU2V0dGVyID0gb3BlbmVkR2V0dGVyLmFzc2lnbjsKCiAgICAgICAgICAgIHNjb3BlLiR3YXRjaChvcGVuZWRHZXR0ZXIsIHVwZGF0ZVdpZGdldCk7CiAgICAgICAgICAgIGlmIChvcGVuZWRTZXR0ZXIpIHsKICAgICAgICAgICAgICAgIHVwZGF0ZVNjb3BlT24ob3BlbkNsb3NlTWV0aG9kUHJlZml4KyJvcGVuIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB1cGRhdGVTY29wZU9uKG9wZW5DbG9zZU1ldGhvZFByZWZpeCsiY2xvc2UiLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVNjb3BlT24obWV0aG9kTmFtZSwgc2NvcGVWYWx1ZSkgewogICAgICAgICAgICB2YXIgd2lkZ2V0ID0gaUVsZW1lbnQuZGF0YSgkLm1vYmlsZVt3aWRnZXROYW1lXS5wcm90b3R5cGUud2lkZ2V0RnVsbE5hbWUpLAogICAgICAgICAgICAgICAgX29sZCA9IHdpZGdldFttZXRob2ROYW1lXTsKICAgICAgICAgICAgd2lkZ2V0W21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzID0gX29sZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgaWYgKCFzeW5jaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgc3luY2luZyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVkU2V0dGVyKHNjb3BlLCBzY29wZVZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBzeW5jaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdXBkYXRlV2lkZ2V0KG9wZW5lZCkgewogICAgICAgICAgICBpZiAoc3luY2luZykgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHN5bmNpbmcgPSB0cnVlOwogICAgICAgICAgICBpZiAob3BlbmVkKSB7CiAgICAgICAgICAgICAgICBpRWxlbWVudFt3aWRnZXROYW1lXSgib3BlbiIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaUVsZW1lbnRbd2lkZ2V0TmFtZV0oImNsb3NlIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc3luY2luZyA9IGZhbHNlOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBzbGlkZXJXaWRnZXQoanFtTmdXaWRldCwgJHBhcnNlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgbGluazogZnVuY3Rpb24od2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKSB7CiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0Q3RybCkgewogICAgICAgICAgICAgICAgICAgIHdhaXRGb3JOZ09wdGlvbnNBbmROZ1JlcGVhdFRvQ3JlYXRlT3B0aW9ucyhzY29wZSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdFNlY29uZE9wdGlvbklmRmlyc3RJc1Vua25vd25PcHRpb25Ub1JlbW92ZVVua293bk9wdGlvbihpRWxlbWVudCwgbmdNb2RlbEN0cmwpOwogICAgICAgICAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LmNyZWF0ZVdpZGdldCh3aWRnZXROYW1lLCBpRWxlbWVudCwgaUF0dHJzKTsKICAgICAgICAgICAgICAgICAgICAgICAganFtTmdXaWRldC5iaW5kRGVmYXVsdEF0dHJzQW5kRXZlbnRzKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBuZ01vZGVsQ3RybCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBtb2RlbFZhbHVlOwogICAgICAgICAgICAgICAgICAgIGlmIChuZ01vZGVsQ3RybCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSBpcyBub3QgZmlsbGVkIHlldCwKICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gd2UgbmVlZCB0byBldmFsdWF0ZSB0aGUgbmctbW9kZWwgYXR0cmlidXRlIG91cnNlbHZlcy4uLgogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFZhbHVlID0gJHBhcnNlKGlBdHRycy5uZ01vZGVsKShzY29wZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHNldE1pblZhbHVlSW5TY29wZUlmTm9WYWx1ZUluU2NvcGVBc0pxbVN0YXJ0c1dpdGhNaW5WYWx1ZShpQXR0cnMsIG5nTW9kZWxDdHJsLCBtb2RlbFZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LmNyZWF0ZVdpZGdldCh3aWRnZXROYW1lLCBpRWxlbWVudCwgaUF0dHJzKTsKICAgICAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LmJpbmREZWZhdWx0QXR0cnNBbmRFdmVudHMod2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIHdhaXRGb3JOZ09wdGlvbnNBbmROZ1JlcGVhdFRvQ3JlYXRlT3B0aW9ucyhzY29wZSwgY2FsbGJhY2spIHsKICAgICAgICAgICAgLy8gTm90ZTogc2NvcGUuJGV2YWxBc3luYyBkb2VzIG5vdCB3b3JrIGhlcmUsIGFzIGl0IAogICAgICAgICAgICAvLyBjb3VsZCBnZXQgZXhlY3V0ZWQgbm90IHVudGlsIHRoZSBuZXh0ICRkaWdlc3QsIHdoaWNoIHdvdWxkIGJlIHRvbyBsYXRlIQogICAgICAgICAgICBzY29wZS4kcm9vdC4kcG9zdERpZ2VzdE9uZShmdW5jdGlvbihyZXF1aXJlRGlnZXN0KSB7CiAgICAgICAgICAgICAgICByZXF1aXJlRGlnZXN0KCk7CiAgICAgICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHNldE1pblZhbHVlSW5TY29wZUlmTm9WYWx1ZUluU2NvcGVBc0pxbVN0YXJ0c1dpdGhNaW5WYWx1ZShpQXR0cnMsIG5nTW9kZWxDdHJsLCBtb2RlbFZhbHVlKSB7CiAgICAgICAgICAgIGlmIChuZ01vZGVsQ3RybCAmJiB0eXBlb2YgaUF0dHJzLm1pbiAhPT0gInVuZGVmaW5lZCIgJiYgbW9kZWxWYWx1ZT09PXVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdmFyIF8kcHJpc3RpbmUgPSBuZ01vZGVsQ3RybC4kcHJpc3RpbmU7CiAgICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kcHJpc3RpbmUgPSBmYWxzZTsKICAgICAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoaUF0dHJzLm1pbik7CiAgICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7CiAgICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kcHJpc3RpbmUgPSBfJHByaXN0aW5lOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzZWxlY3RTZWNvbmRPcHRpb25JZkZpcnN0SXNVbmtub3duT3B0aW9uVG9SZW1vdmVVbmtvd25PcHRpb24oaUVsZW1lbnQsIG5nTW9kZWxDdHJsKSB7CiAgICAgICAgICAgIHZhciBvcHRpb25zID0gaUVsZW1lbnQuY2hpbGRyZW4oIm9wdGlvbiIpLAogICAgICAgICAgICAgICAgaW5pdFZhbHVlID0gb3B0aW9ucy5lcSgwKS52YWwoKSwKICAgICAgICAgICAgICAgIHNlbGVjdGVkSW5kZXg7CiAgICAgICAgICAgIGlmIChpbml0VmFsdWUgPT09ICc/JyB8fCBpbml0VmFsdWUuaW5kZXhPZignPyAnKT09PTApIHsKICAgICAgICAgICAgICAgIG9wdGlvbnMuZXEoMSkucHJvcCgic2VsZWN0ZWQiLCB0cnVlKTsKICAgICAgICAgICAgICAgIHZhciBfJHByaXN0aW5lID0gbmdNb2RlbEN0cmwuJHByaXN0aW5lOwogICAgICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHByaXN0aW5lID0gZmFsc2U7CiAgICAgICAgICAgICAgICBpRWxlbWVudC50cmlnZ2VyKCJjaGFuZ2UiKTsKICAgICAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRwcmlzdGluZSA9IF8kcHJpc3RpbmU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgoKCiAgICBmdW5jdGlvbiBjaGVja2JveFJhZGlvV2lkZ2V0KGpxbU5nV2lkZXQpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBwcmVjb21waWxlOiBjaGVja2JveFJhZGlvUHJlY29tcGlsZSwKICAgICAgICAgICAgbGluazogZnVuY3Rpb24od2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsKSB7CiAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBpRWxlbWVudC5wYXJlbnQoImxhYmVsIik7CiAgICAgICAgICAgICAgICBpZiAoIWlBdHRycy5uZ21Ob0xhYmVsICYmIGxhYmVsLmxlbmd0aD09PTApIHsKICAgICAgICAgICAgICAgICAgICAvLyBJZiB0d28gY2hlY2tib3hlcyBhcmUgY3JlYXRlZCBieSBuZy1yZXBlYXQsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAvLyBuZy1yZXBlYXQgaXMgb24gdGhlIGNoZWNrYm94IGFuZCBub3Qgb24gdGhlIGxhYmVsLAogICAgICAgICAgICAgICAgICAgIC8vIHRoZSBmaXJzdCBjaGVja2JveCB3aWxsIGJlIGZpbmUsIGJ1dCB0aGUgc2Vjb25kIG9uZQogICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgYmUgYXQgYW4gb2RkIHBsYWNlIGluIHRoZSBkb20uLi4KICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkRvbid0IHVzZSBuZy1yZXBlYXQgb3Igb3RoZXIgY29uZGl0aW9uYWwgZGlyZWN0aXZlcyBvbiBjaGVja2JveGVzL3JhZGlvYnV0dG9ucyBkaXJlY3RseS4gSW5zdGVhZCwgd3JhcCB0aGUgaW5wdXQgaW50byBhIGxhYmVsIGFuZCBwdXQgdGhlIGRpcmVjdGl2ZSBvbiB0aGF0IGlucHV0ISIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAganFtTmdXaWRldC5jcmVhdGVXaWRnZXQod2lkZ2V0TmFtZSwgaUVsZW1lbnQsIGlBdHRycyk7CgogICAgICAgICAgICAgICAganFtTmdXaWRldC5iaW5kRGVmYXVsdEF0dHJzQW5kRXZlbnRzKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBuZ01vZGVsQ3RybCk7CgogICAgICAgICAgICAgICAgaUF0dHJzLiRvYnNlcnZlKCJjaGVja2VkIiwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAganFtTmdXaWRldC50cmlnZ2VyQXN5bmNSZWZyZXNoKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgInJlZnJlc2giKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gY2hlY2tib3hSYWRpb1ByZWNvbXBpbGUob3JpZ0VsZW1lbnQsIGluaXRBcmdzKSB7CiAgICAgICAgICAgIC8vIHdyYXAgdGhlIGlucHV0IHRlbXBvcmFyaWx5IGludG8gaXQncyBsYWJlbCAod2lsbCBiZSB1bmRvbmUgYnkgdGhlIHdpZGdldCkuCiAgICAgICAgICAgIC8vIEJ5IHRoaXMsIHRoZSBqcW0gd2lkZ2V0IHdpbGwgYWx3YXlzCiAgICAgICAgICAgIC8vIHVzZSB0aGlzIGxhYmVsLCBldmVuIGlmIHRoZXJlIGFyZSBvdGhlciBsYWJlbHMgd2l0aCB0aGUgc2FtZSBpZCBvbiB0aGUgc2FtZSBwYWdlLgogICAgICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBpZiB3ZSB1c2UgbmctcmVwZWF0IG9uIGNoZWNrYm94ZXMsIGFzIHRoaXMgY291bGQKICAgICAgICAgICAgLy8gY3JlYXRlIG11bHRpcGxlIGNoZWNrYm94ZXMgd2l0aCB0aGUgc2FtZSBpZCEKICAgICAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBkb25lIGluIHRoZSBwcmVjb21waWxlLCBhcyBvdGhlcndpc2UgYW5ndWxhciBjb21waWxlciBjb3VsZCBnZXQgaW50byB0cm91YmxlCiAgICAgICAgICAgIC8vIHdoZW4gaW5wdXQgYW5kIGxhYmVsIGFyZSBzaWJsaW5ncyEKICAgICAgICAgICAgLy8gU2VlIHRoZSBjaGVja2JveHJhZGlvLVBsdWdpbiBpbiBqcW0gZm9yIHRoZSBzZWxlY3RvcnMgdXNlZCB0byBsb2NhdGUgdGhlIGxhYmVsLgogICAgICAgICAgICB2YXIgcGFyZW50TGFiZWwgPSAkKG9yaWdFbGVtZW50KS5jbG9zZXN0KCJsYWJlbCIpOwogICAgICAgICAgICB2YXIgY29udGFpbmVyID0gJChvcmlnRWxlbWVudCkuY2xvc2VzdCgiZm9ybSxmaWVsZHNldCw6anFtRGF0YShyb2xlPSdwYWdlJyksOmpxbURhdGEocm9sZT0nZGlhbG9nJykiKTsKICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IG9yaWdFbGVtZW50LnBhcmVudCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBsYWJlbCA9IHBhcmVudExhYmVsLmxlbmd0aCA/IHBhcmVudExhYmVsIDogY29udGFpbmVyLmZpbmQoImxhYmVsIikuZmlsdGVyKCJbZm9yPSciICsgb3JpZ0VsZW1lbnRbMF0uaWQgKyAiJ10iKTsKICAgICAgICAgICAgaWYgKGxhYmVsLmxlbmd0aD09PTApIHsKICAgICAgICAgICAgICAgIG9yaWdFbGVtZW50LmF0dHIoIm5nbS1uby1sYWJlbCIsICJ0cnVlIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsYWJlbC5hcHBlbmQob3JpZ0VsZW1lbnQpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJ1dHRvbldpZGdldChqcW1OZ1dpZGV0KSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcHJlY29tcGlsZTogZnVuY3Rpb24ob3JpZ0VsZW1lbnQsIGluaXRBcmdzKSB7CiAgICAgICAgICAgICAgICAvLyBBZGQgYSB0ZXh0IG5vZGUgd2l0aCB0aGUgdmFsdWUgY29udGVudCwKICAgICAgICAgICAgICAgIC8vIGFzIHdlIG5lZWQgYSB0ZXh0IG5vZGUgbGF0ZXIgaW4gdGhlIGpxbSBidXR0b24gbWFya3VwIQogICAgICAgICAgICAgICAgaWYgKG9yaWdFbGVtZW50WzBdLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdJTlBVVCcpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvcmlnRWxlbWVudC52YWwoKTsKICAgICAgICAgICAgICAgICAgICBvcmlnRWxlbWVudC5hcHBlbmQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWUpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGluazogZnVuY3Rpb24od2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsKSB7CiAgICAgICAgICAgICAgICAvLyBCdXR0b24gZGVzdHJveXMgdGhlIHRleHQgbm9kZSBhbmQgcmVjcmVhdGVzIGEgbmV3IG9uZS4gVGhpcyBkb2VzIG5vdCB3b3JrCiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdGV4dCBub2RlIGNvbnRhaW5zIGFuZ3VsYXIgZXhwcmVzc2lvbnMsIHNvIHdlIG1vdmUgdGhlCiAgICAgICAgICAgICAgICAvLyB0ZXh0IG5vZGUgdG8gdGhlIHJpZ2h0IHBsYWNlLgogICAgICAgICAgICAgICAgdmFyIHRleHROb2RlID0gaUVsZW1lbnQuY29udGVudHMoKTsKICAgICAgICAgICAgICAgIGpxbU5nV2lkZXQuY3JlYXRlV2lkZ2V0KHdpZGdldE5hbWUsIGlFbGVtZW50LCBpQXR0cnMpOwogICAgICAgICAgICAgICAgdmFyIHRleHRTcGFuID0gaUVsZW1lbnQucGFyZW50KCkuZmluZCgiLnVpLWJ0bi10ZXh0Iik7CiAgICAgICAgICAgICAgICB0ZXh0U3Bhbi5lbXB0eSgpOwogICAgICAgICAgICAgICAgdGV4dFNwYW4uYXBwZW5kKHRleHROb2RlKTsKCiAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LmJpbmREZWZhdWx0QXR0cnNBbmRFdmVudHMod2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gY29sbGFwc2libGVXaWRnZXQoanFtTmdXaWRldCwgJHBhcnNlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgbGluazogZnVuY3Rpb24od2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsKSB7CiAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LmNyZWF0ZVdpZGdldCh3aWRnZXROYW1lLCBpRWxlbWVudCwgaUF0dHJzKTsKICAgICAgICAgICAgICAgIGpxbU5nV2lkZXQuYmluZERlZmF1bHRBdHRyc0FuZEV2ZW50cyh3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgbmdNb2RlbEN0cmwpOwogICAgICAgICAgICAgICAgYmluZENvbGxhcHNlZEF0dHJpYnV0ZShzY29wZSwgaUVsZW1lbnQsIGlBdHRycyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBmdW5jdGlvbiBiaW5kQ29sbGFwc2VkQXR0cmlidXRlKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzKSB7CiAgICAgICAgICAgIHZhciBzeW5jaW5nID0gZmFsc2U7CiAgICAgICAgICAgIGlmIChpQXR0cnMuY29sbGFwc2VkKSB7CiAgICAgICAgICAgICAgICB2YXIgY29sbGFwc2VkR2V0dGVyID0gJHBhcnNlKGlBdHRycy5jb2xsYXBzZWQpOwogICAgICAgICAgICAgICAgdmFyIGNvbGxhcHNlZFNldHRlciA9IGNvbGxhcHNlZEdldHRlci5hc3NpZ247CiAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goY29sbGFwc2VkR2V0dGVyLCB1cGRhdGVXaWRnZXQpOwogICAgICAgICAgICAgICAgaWYgKGNvbGxhcHNlZFNldHRlcikgewogICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNjb3BlT24oImNvbGxhcHNlIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2NvcGVPbigiZXhwYW5kIiwgZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVXaWRnZXQoY29sbGFwc2VkKSB7CiAgICAgICAgICAgICAgICBpZiAoc3luY2luZykgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN5bmNpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgaWYgKGNvbGxhcHNlZCkgewogICAgICAgICAgICAgICAgICAgIGlFbGVtZW50LnRyaWdnZXJIYW5kbGVyKCJjb2xsYXBzZSIpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpRWxlbWVudC50cmlnZ2VySGFuZGxlcigiZXhwYW5kIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzeW5jaW5nID0gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVNjb3BlT24oZXZlbnROYW1lLCBuZXdDb2xsYXBzZWRWYWx1ZSkgewogICAgICAgICAgICAgICAgaUVsZW1lbnQuYmluZChldmVudE5hbWUsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgIGlmIChzeW5jaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgc3luY2luZyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgaWYgKCBpRWxlbWVudFswXT09PWV2ZW50LnRhcmdldCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlZFNldHRlcihzY29wZSwgbmV3Q29sbGFwc2VkVmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgc3luY2luZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZGlhbG9nV2lkZ2V0KGpxbU5nV2lkZXQpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBwcmVjb21waWxlOiBkaWFsb2dQcmVjb21waWxlLAogICAgICAgICAgICBsaW5rOiBmdW5jdGlvbih3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgbmdNb2RlbEN0cmwpIHsKICAgICAgICAgICAgICAgIGpxbU5nV2lkZXQuY3JlYXRlV2lkZ2V0KHdpZGdldE5hbWUsIGlFbGVtZW50LCBpQXR0cnMpOwogICAgICAgICAgICAgICAgLy8gYWRkIGhhbmRsZXIgdG8gZW5oYW5jZWQgY2xvc2UgYnV0dG9uIG1hbnVhbGx5ICh0aGUgb25lIHdlIGFkZGVkIGluIHByZWNvbXBpbGUpLAogICAgICAgICAgICAgICAgLy8gYW5kIHJlbW92ZSB0aGUgb3RoZXIgY2xvc2UgYnV0dG9uICh0aGUgb25lIHRoZSB3aWRnZXQgY3JlYXRlZCkuCiAgICAgICAgICAgICAgICB2YXIgY2xvc2VCdXR0b25zID0gaUVsZW1lbnQuZmluZCgnOmpxbURhdGEocm9sZT0iaGVhZGVyIikgYTpqcW1EYXRhKGljb249ImRlbGV0ZSIpJyk7CiAgICAgICAgICAgICAgICBjbG9zZUJ1dHRvbnMuZXEoMSkuYmluZCgiY2xpY2siLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBpRWxlbWVudC5kaWFsb2coImNsb3NlIik7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGNsb3NlQnV0dG9ucy5lcSgwKS5yZW1vdmUoKTsKCiAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LmJpbmREZWZhdWx0QXR0cnNBbmRFdmVudHMod2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIC8vIERpYWxvZzogc2VwYXJhdGUgZXZlbnQgYmluZGluZyBhbmQgZG9tIGVuaGFuY2VtZW50LgogICAgICAgIC8vIE5vdGU6IFdlIGRvIG5lZWQgdG8gYWRkIHRoZSBjbG9zZSBidXR0b24gZHVyaW5nIHByZWNvbXBpbGUsCiAgICAgICAgLy8gYXMgdGhlIGVuaGFuY2VtZW50IGZvciB0aGUgZGlhbG9nIGhlYWRlciBkZXBlbmRzIG9uIGl0IChjYWxjdWxhdGlvbiB3aGljaCBidXR0b24gaXMgbGVmdCwgcmlnaHQsIC4uLiksCiAgICAgICAgLy8gYW5kIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiB3ZSBjcmVhdGUgdGhlIHBhZ2Ugd2lkZ2V0LCB3aGljaCBpcyBiZWZvcmUgdGhlIGRpYWxvZyB3aWRnZXQgaXMgY3JlYXRlZCA6LSgKICAgICAgICAvLyBXZSBjYW5ub3QgYWRqdXN0IHRoZSB0aW1pbmcgb2YgdGhlIGhlYWRlciBlbmhhbmNlbWVudCBhcyBpdCBpcyBubyBqcW0gd2lkZ2V0LgogICAgICAgIGZ1bmN0aW9uIGRpYWxvZ1ByZWNvbXBpbGUob3JpZ0VsZW1lbnQsIGluaXRBdHRycykgewogICAgICAgICAgICBGYWtlRGlhbG9nLnByb3RvdHlwZSA9ICQubW9iaWxlLmRpYWxvZy5wcm90b3R5cGU7CiAgICAgICAgICAgIHZhciBmYWtlRGlhbG9nID0gbmV3IEZha2VEaWFsb2cob3JpZ0VsZW1lbnQsIHt9KSwKICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBmYWtlRGlhbG9nLm9wdGlvbnMsCiAgICAgICAgICAgICAgICB2YWx1ZSA9IG9wdGlvbnMuY2xvc2VCdG47CgogICAgICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgaXMgYWRhcHRlZCBmcm9tICQubW9iaWxlLmRpYWxvZy5wcm90b3R5cGUuX3NldENsb3NlQnRuCiAgICAgICAgICAgIGlmICggdmFsdWUgIT09ICJub25lIiApIHsKICAgICAgICAgICAgICAgIC8vIFNhbml0aXplIHZhbHVlCiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSAoIHZhbHVlID09PSAibGVmdCIgPyAibGVmdCIgOiAicmlnaHQiICk7CiAgICAgICAgICAgICAgICB2YXIgYnRuID0gJCggIjxhIGhyZWY9JyMnIGNsYXNzPSd1aS1idG4tIiArIGxvY2F0aW9uICsgIicgZGF0YS0iICsgJC5tb2JpbGUubnMgKyAiaWNvbj0nZGVsZXRlJyBkYXRhLSIgKyAkLm1vYmlsZS5ucyArICJpY29ucG9zPSdub3RleHQnPiIrIG9wdGlvbnMuY2xvc2VCdG5UZXh0ICsgIjwvYT4iICk7CiAgICAgICAgICAgICAgICBvcmlnRWxlbWVudC5maW5kKCAiOmpxbURhdGEocm9sZT0naGVhZGVyJykiICkuZmlyc3QoKS5wcmVwZW5kKCBidG4gKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gRmFrZURpYWxvZyhlbGVtZW50LCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gJC53aWRnZXQuZXh0ZW5kKCB7fSwKICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0Q3JlYXRlT3B0aW9ucygpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY29udHJvbGdyb3VwV2lkZ2V0KGpxbU5nV2lkZXQpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBsaW5rOiBmdW5jdGlvbih3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgbmdNb2RlbEN0cmwpIHsKICAgICAgICAgICAgICAgIGpxbU5nV2lkZXQuY3JlYXRlV2lkZ2V0KHdpZGdldE5hbWUsIGlFbGVtZW50LCBpQXR0cnMpOwoKICAgICAgICAgICAgICAgIGpxbU5nV2lkZXQuYmluZERlZmF1bHRBdHRyc0FuZEV2ZW50cyh3aWRnZXROYW1lLCBzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgbmdNb2RlbEN0cmwpOwogICAgICAgICAgICAgICAgaUVsZW1lbnQuYmluZCgiJGNoaWxkcmVuQ2hhbmdlZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LnRyaWdnZXJBc3luY1JlZnJlc2god2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCB7fSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gdGFibGVXaWRnZXQoanFtTmdXaWRldCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHdpZGdldE5hbWUsIHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBuZ01vZGVsQ3RybCwgc2VsZWN0Q3RybCkgewogICAgICAgICAgICAgICAgdmFyIHdpZGdldCwgcG9wdXBJZCwgcG9wdXA7CiAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LmNyZWF0ZVdpZGdldCh3aWRnZXROYW1lLCBpRWxlbWVudCwgaUF0dHJzKTsKICAgICAgICAgICAgICAgIHdpZGdldCA9IGlFbGVtZW50LmRhdGEoJC5tb2JpbGVbd2lkZ2V0TmFtZV0ucHJvdG90eXBlLndpZGdldEZ1bGxOYW1lKTsKICAgICAgICAgICAgICAgIC8vIFRoZSBjb2x1bW4tdG9nZ2xlIHdpZGdldCBjcmVhdGVzIGEgcG9wdXAgd2l0aCBhIG5vIGVuaGFuY2VkIGNvbnRyb2xncm91cAogICAgICAgICAgICAgICAgLy8gYW5kIHJlbGllcyBvbiB0aGUgb3JkZXIgaW4gd2hpY2gganFtIGVuaGFuY2VzIHRoZSB3aWRnZXRzLgogICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgdGhpcyBvcmRlciBpcyBkaWZmZXJlbnQgaW4gdGhlIGFkYXB0ZXIsCiAgICAgICAgICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBwb3B1cCBpcyBwcm9wZXJseSBlbmhhbmNlZC4KICAgICAgICAgICAgICAgIGlmICh3aWRnZXQgJiYgd2lkZ2V0Lm9wdGlvbnMubW9kZT09PSdjb2x1bW50b2dnbGUnKSB7CiAgICAgICAgICAgICAgICAgICAgcG9wdXBJZCA9ICggaUVsZW1lbnQuYXR0ciggImlkIiApIHx8IHdpZGdldC5vcHRpb25zLmNsYXNzZXMucG9wdXAgKSArICItcG9wdXAiOwogICAgICAgICAgICAgICAgICAgIHBvcHVwID0gJCgiIyIrcG9wdXBJZCk7CiAgICAgICAgICAgICAgICAgICAgcG9wdXAudHJpZ2dlcigiY3JlYXRlIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBqcW1OZ1dpZGV0LmJpbmREZWZhdWx0QXR0cnNBbmRFdmVudHMod2lkZ2V0TmFtZSwgc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIG5nTW9kZWxDdHJsKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9Cgp9KShhbmd1bGFyLCAkKTsKKGZ1bmN0aW9uICgkLCBhbmd1bGFyKSB7CgogICAgdmFyIG1vZCA9IGFuZ3VsYXIubW9kdWxlKCJuZyIpOwoKICAgICQubW9iaWxlLl9yZWdpc3RlckJyb3dzZXJEZWNvcmF0b3JzID0gJC5tb2JpbGUuX3JlZ2lzdGVyQnJvd3NlckRlY29yYXRvcnMgfHwgW107CiAgICAkLm1vYmlsZS5fcmVnaXN0ZXJCcm93c2VyRGVjb3JhdG9ycy5wdXNoKHJlZ2lzdGVyQnJvd3NlckRlY29yYXRvcik7CgogICAgbW9kLmNvbmZpZyhbJyRwcm92aWRlJywgZnVuY3Rpb24gKCRwcm92aWRlKSB7CiAgICAgICAgcmVnaXN0ZXJCcm93c2VyRGVjb3JhdG9yKCRwcm92aWRlKTsKICAgIH1dKTsKICAgIG1vZC5mYWN0b3J5KCckaGlzdG9yeScsICRoaXN0b3J5RmFjdG9yeSk7CgogICAgcmV0dXJuOwoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLQogICAgLy8gaW1wbGVtZW50YXRpb24gZnVuY3Rpb25zCgogICAgZnVuY3Rpb24gcmVnaXN0ZXJCcm93c2VyRGVjb3JhdG9yKCRwcm92aWRlKSB7CiAgICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckYnJvd3NlcicsIFsnJGRlbGVnYXRlJywgZW1pdE9uVXJsQ2hhbmdlQXN5bmNocm9ub3VzbHldKTsKICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRicm93c2VyJywgWyckZGVsZWdhdGUnLCBicm93c2VySGFzaFJlcGxhY2VEZWNvcmF0b3JdKTsKICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRicm93c2VyJywgWyckZGVsZWdhdGUnLCBhbGxvd0ZpbGVVcmxzSW5CYXNlSHJlZl0pOwogICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJGJyb3dzZXInLCBbJyRkZWxlZ2F0ZScsICckaGlzdG9yeScsICckcm9vdFNjb3BlJywgJyRpbmplY3RvcicsIGJyb3dzZXJIaXN0b3J5RGVjb3JhdG9yXSk7CiAgICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckbG9jYXRpb24nLCBbJyRkZWxlZ2F0ZScsICckaGlzdG9yeScsIGxvY2F0aW9uQmFja0RlY29yYXRvcl0pOwoKICAgICAgICBmdW5jdGlvbiBlbWl0T25VcmxDaGFuZ2VBc3luY2hyb25vdXNseSgkYnJvd3NlcikgewogICAgICAgICAgICAvLyBwb3BzdGF0ZSBhbHNvIHJlc3RvcmVzIHRoZSBzY3JvbGxpbmcgcG9zaXRpb24gZnJvbSB0aGUgCiAgICAgICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgcHVzaFN0YXRlLgogICAgICAgICAgICAvLyBCeSB0aGlzLCB3ZSBhcmUgdW5hYmxlIHRvIGNoYW5nZSB0aGUgc2Nyb2xsIHBvc2l0aW9uIGluIGEgcG9wc3RhdGUKICAgICAgICAgICAgLy8gKGUuZy4gYnJvd3NlciBiYWNrIGJ1dHRvbiksIHdoaWNoIHdlIHdhbnQgdG8gZG8gYXMgaXQncyB0aGUgCiAgICAgICAgICAgIC8vIGRlZmF1bHQgYmVoYXZpb3VyIG9mIGpxdWVyeSBtb2JpbGUuCiAgICAgICAgICAgIC8vIGpRdWVyeSBNb2JpbGUgYWxzbyBkb2VzIGEgc2V0VGltb3V0IHdoZW4gYSBwb3BzdGF0ZSBpcyByZWNlaXZlZC4uLgogICAgICAgICAgICB2YXIgX29uVXJsQ2hhbmdlID0gJGJyb3dzZXIub25VcmxDaGFuZ2U7CiAgICAgICAgICAgICRicm93c2VyLm9uVXJsQ2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgX2JpbmQgPSAkLmZuLmJpbmQ7CiAgICAgICAgICAgICAgICAkLmZuLmJpbmQgPSBmdW5jdGlvbihldmVudE5hbWUsIGxpc3RlbmVyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbMF09PT13aW5kb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIgPSB3cmFwTGlzdGVuZXIobGlzdGVuZXIpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2JpbmQuY2FsbCh0aGlzLCBldmVudE5hbWUsIGxpc3RlbmVyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9iaW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX29uVXJsQ2hhbmdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICQuZm4uYmluZCA9IF9iaW5kOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gJGJyb3dzZXI7CgogICAgICAgICAgICBmdW5jdGlvbiB3cmFwTGlzdGVuZXIobGlzdGVuZXIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChsaXN0ZW5lciwwKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGxvY2F0aW9uQmFja0RlY29yYXRvcigkbG9jYXRpb24sICRoaXN0b3J5KSB7CiAgICAgICAgICAgICRsb2NhdGlvbi5iYWNrID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJGxvY2F0aW9uLiQkcmVwbGFjZSA9ICJiYWNrIjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gJGxvY2F0aW9uOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYWxsb3dGaWxlVXJsc0luQmFzZUhyZWYoJGJyb3dzZXIpIHsKICAgICAgICAgICAgdmFyIF9iYXNlSHJlZiA9ICRicm93c2VyLmJhc2VIcmVmOwogICAgICAgICAgICAkYnJvd3Nlci5iYXNlSHJlZiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIC8vIFBhdGNoIGZvciBiYXNlSHJlZiB0byByZXR1cm4gdGhlIGNvcnJlY3QgcGF0aCBhbHNvIGZvciBmaWxlLXVybHMuCiAgICAgICAgICAgICAgICAvLyBTZWUgYnVnIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE2OTAKICAgICAgICAgICAgICAgIHZhciBocmVmID0gX2Jhc2VIcmVmLmNhbGwodGhpcyk7CiAgICAgICAgICAgICAgICByZXR1cm4gaHJlZiA/IGhyZWYucmVwbGFjZSgvXmZpbGU/XDpcL1wvW15cL10qLywgJycpIDogaHJlZjsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuICRicm93c2VyOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYnJvd3Nlckhhc2hSZXBsYWNlRGVjb3JhdG9yKCRicm93c2VyKSB7CiAgICAgICAgICAgIHZhciBfdXJsID0gJGJyb3dzZXIudXJsOwogICAgICAgICAgICAkYnJvd3Nlci51cmwgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciByZXMgPSBfdXJsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aD09PTApIHsKICAgICAgICAgICAgICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJTIzL2csJyMnKTsKICAgICAgICAgICAgICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvIC9nLCclMjAnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiAkYnJvd3NlcjsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGJyb3dzZXJIaXN0b3J5RGVjb3JhdG9yKCRicm93c2VyLCAkaGlzdG9yeSwgJHJvb3RTY29wZSwgJGluamVjdG9yKSB7CiAgICAgICAgICAgIHZhciBfdXJsID0gJGJyb3dzZXIudXJsLAogICAgICAgICAgICAgICAgX29uVXJsQ2hhbmdlID0gJGJyb3dzZXIub25VcmxDaGFuZ2UsCiAgICAgICAgICAgICAgICBfc3RvcE9uVXJsQ2hhbmdlTGlzdGVuZXJzOwogICAgICAgICAgICB2YXIgY2FjaGVkUm91dGVPdmVycmlkZSA9IG51bGw7CgogICAgICAgICAgICBfb25VcmxDaGFuZ2UuY2FsbCgkYnJvd3NlciwgZnVuY3Rpb24obmV3VXJsKSB7CiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkUm91dGVPdmVycmlkZSkgewogICAgICAgICAgICAgICAgICAgIHZhciAkbG9jYXRpb24gPSAkaW5qZWN0b3IuZ2V0KCckbG9jYXRpb24nKTsKICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucm91dGVPdmVycmlkZShjYWNoZWRSb3V0ZU92ZXJyaWRlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRoaXN0b3J5Lm9uVXJsQ2hhbmdlQnJvd3NlcihuZXdVcmwpOwogICAgICAgICAgICAgICAgaWYgKF9zdG9wT25VcmxDaGFuZ2VMaXN0ZW5lcnMpIHsKICAgICAgICAgICAgICAgICAgICBfc3RvcE9uVXJsQ2hhbmdlTGlzdGVuZXJzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkYnJvd3Nlci5vblVybENoYW5nZSA9IGZ1bmN0aW9uKGNiKSB7CiAgICAgICAgICAgICAgICBfb25VcmxDaGFuZ2UuY2FsbCh0aGlzLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIV9zdG9wT25VcmxDaGFuZ2VMaXN0ZW5lcnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICRicm93c2VyLnN0b3BPblVybENoYW5nZUxpc3RlbmVycyA9IGZ1bmN0aW9uKHJlcGxhY2VDYWxsYWNrKSB7CiAgICAgICAgICAgICAgICBfc3RvcE9uVXJsQ2hhbmdlTGlzdGVuZXJzID0gcmVwbGFjZUNhbGxhY2s7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAkaGlzdG9yeS5yZW1vdmVQYXN0RW50cmllcyA9IGZ1bmN0aW9uKG51bWJlcikgewogICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSAkaGlzdG9yeS51cmxTdGFja1skaGlzdG9yeS5hY3RpdmVJbmRleF0sCiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZWRJbmRleCA9ICRoaXN0b3J5LmFjdGl2ZUluZGV4LW51bWJlciwKICAgICAgICAgICAgICAgICAgICByZXBsYWNlZCA9ICRoaXN0b3J5LnVybFN0YWNrW3JlcGxhY2VkSW5kZXhdOwogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQudXJsICE9PSByZXBsYWNlZC51cmwpIHsKICAgICAgICAgICAgICAgICAgICAkYnJvd3Nlci5zdG9wT25VcmxDaGFuZ2VMaXN0ZW5lcnMoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYnJvd3Nlci51cmwoY3VycmVudC51cmwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGhpc3RvcnkudXJsU3RhY2tbcmVwbGFjZWRJbmRleF0gPSBjdXJyZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYnJvd3Nlci5zdG9wT25VcmxDaGFuZ2VMaXN0ZW5lcnMobnVsbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gQXR0ZW50aW9uOiBhbmd1bGFyIGRvZXMgbm90IGNhbGwKICAgICAgICAgICAgICAgICAgICAvLyBvblVybENoYW5nZWQgbGlzdGVuZXJzIGlmIHdlIGFyZSBnb2luZyBiYWNrIAogICAgICAgICAgICAgICAgICAgIC8vIGluIGhpc3RvcnkgdG8gdGhlIHNhbWUgdXJsIHdoZXJlIHdlIGFscmVhZHkgYXJlLgogICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlZm9yZSB3ZSBjYW5ub3QgdXNlICRicm93c2VyLnN0b3BPblVybENoYW5nZUxpc3RlbmVycwogICAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgY2FzZSEKICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBhbmd1bGFyLW1vY2tzIGRvZXMgbm90IHNpbXVsYXRlIHRoaXMgY29ycmVjdGx5IDotKAogICAgICAgICAgICAgICAgICAgICRoaXN0b3J5LnVybFN0YWNrW3JlcGxhY2VkSW5kZXhdID0gY3VycmVudDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRoaXN0b3J5LmdvKC1udW1iZXIpOwogICAgICAgICAgICB9OwoKCiAgICAgICAgICAgICRicm93c2VyLnVybCA9IGZ1bmN0aW9uICh1cmwsIHJlcGxhY2UpIHsKICAgICAgICAgICAgICAgIGlmICh1cmwpIHsKICAgICAgICAgICAgICAgICAgICAvLyBzZXR0ZXIKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gX3VybC5jYWxsKHRoaXMsIHVybCwgcmVwbGFjZSA9PT0gdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgJGhpc3Rvcnkub25VcmxDaGFuZ2VQcm9ncmFtbWF0aWNhbGx5KHVybCwgcmVwbGFjZSA9PT0gdHJ1ZSwgcmVwbGFjZT09PSdiYWNrJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0dGVyCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF91cmwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuICRicm93c2VyOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiAkaGlzdG9yeUZhY3RvcnkoKSB7CiAgICAgICAgdmFyICRoaXN0b3J5OwogICAgICAgIHJldHVybiAkaGlzdG9yeSA9IHsKICAgICAgICAgICAgZ286Z28sCiAgICAgICAgICAgIGdvQmFjazpnb0JhY2ssCiAgICAgICAgICAgIHVybFN0YWNrOltdLAogICAgICAgICAgICBpbmRleE9mOiBpbmRleE9mLAogICAgICAgICAgICBhY3RpdmVJbmRleDotMSwKICAgICAgICAgICAgZnJvbVVybENoYW5nZTpmYWxzZSwKICAgICAgICAgICAgb25VcmxDaGFuZ2VQcm9ncmFtbWF0aWNhbGx5Om9uVXJsQ2hhbmdlUHJvZ3JhbW1hdGljYWxseSwKICAgICAgICAgICAgb25VcmxDaGFuZ2VCcm93c2VyOm9uVXJsQ2hhbmdlQnJvd3NlcgogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIGdvKHJlbGF0aXZlSW5kZXgpIHsKICAgICAgICAgICAgLy8gQWx3YXlzIGV4ZWN1dGUgaGlzdG9yeS5nbyBhc3luY2hyb25vdXNseS4KICAgICAgICAgICAgLy8gVGhpcyBpcyByZXF1aXJlZCBhcyBmaXJlZm94IGFuZCBJRTEwIHRyaWdnZXIgdGhlIHBvcHN0YXRlIGV2ZW50CiAgICAgICAgICAgIC8vIGluIHN5bmMuIEJ5IHVzaW5nIGEgc2V0VGltZW91dCB3ZSBoYXZlIHRoZSBzYW1lIGJlaGF2aW91ciBldmVyeXdoZXJlLgogICAgICAgICAgICAvLyBEb24ndCB1c2UgJGRlZmVyIGhlcmUgYXMgd2UgZG9uJ3Qgd2FudCB0byB0cmlnZ2VyIGFub3RoZXIgZGlnZXN0IGN5Y2xlLgogICAgICAgICAgICAvLyBOb3RlIHRoYXQgd2UgbmVlZCBhdCBsZWFzdCAyMG1zIHRvIGVuc3VyZSB0aGF0CiAgICAgICAgICAgIC8vIHRoZSBoYXNoY2hhbmdlL3BvcHN0YXRlIGV2ZW50IGZvciB0aGUgY3VycmVudCBwYWdlCiAgICAgICAgICAgIC8vIGFzIGJlZW4gZGVsaXZlcmVkIChpbiBJRSB0aGlzIGNhbiB0YWtlIHNvbWUgdGltZS4uLikuCiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkuZ28ocmVsYXRpdmVJbmRleCk7CiAgICAgICAgICAgIH0sMjApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ29CYWNrKCkgewogICAgICAgICAgICAkaGlzdG9yeS5nbygtMSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpbmRleE9mKHVybCkgewogICAgICAgICAgICB2YXIgaSwKICAgICAgICAgICAgICAgIHVybFN0YWNrID0gJGhpc3RvcnkudXJsU3RhY2s7CiAgICAgICAgICAgIGZvciAoaT0wOyBpPHVybFN0YWNrLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAodXJsU3RhY2tbaV0udXJsPT09dXJsKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZmluZEluUGFzdCh1cmwpIHsKICAgICAgICAgICAgdmFyIGluZGV4ID0gJGhpc3RvcnkuYWN0aXZlSW5kZXgtMTsKICAgICAgICAgICAgd2hpbGUgKGluZGV4ID49IDAgJiYgJGhpc3RvcnkudXJsU3RhY2tbaW5kZXhdLnVybCAhPT0gdXJsKSB7CiAgICAgICAgICAgICAgICBpbmRleC0tOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBpbmRleDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9uVXJsQ2hhbmdlQnJvd3Nlcih1cmwpIHsKICAgICAgICAgICAgdmFyIG9sZEluZGV4ID0gJGhpc3RvcnkuYWN0aXZlSW5kZXg7CiAgICAgICAgICAgICRoaXN0b3J5LmFjdGl2ZUluZGV4ID0gaW5kZXhPZih1cmwpOwogICAgICAgICAgICBpZiAoJGhpc3RvcnkuYWN0aXZlSW5kZXggPT09IC0xKSB7CiAgICAgICAgICAgICAgICBvblVybENoYW5nZVByb2dyYW1tYXRpY2FsbHkodXJsLCBmYWxzZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkaGlzdG9yeS5sYXN0SW5kZXhGcm9tVXJsQ2hhbmdlID0gb2xkSW5kZXg7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9uVXJsQ2hhbmdlUHJvZ3JhbW1hdGljYWxseSh1cmwsIHJlcGxhY2UsIGJhY2spIHsKICAgICAgICAgICAgdmFyIGN1cnJlbnRFbnRyeSA9ICRoaXN0b3J5LnVybFN0YWNrWyRoaXN0b3J5LmFjdGl2ZUluZGV4XTsKICAgICAgICAgICAgaWYgKCFjdXJyZW50RW50cnkgfHwgY3VycmVudEVudHJ5LnVybCAhPT0gdXJsKSB7CiAgICAgICAgICAgICAgICAkaGlzdG9yeS5sYXN0SW5kZXhGcm9tVXJsQ2hhbmdlID0gLTE7CiAgICAgICAgICAgICAgICBpZiAoIXJlcGxhY2UpIHsKICAgICAgICAgICAgICAgICAgICAkaGlzdG9yeS5hY3RpdmVJbmRleCsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJGhpc3RvcnkudXJsU3RhY2suc3BsaWNlKCRoaXN0b3J5LmFjdGl2ZUluZGV4LCAkaGlzdG9yeS51cmxTdGFjay5sZW5ndGggLSAkaGlzdG9yeS5hY3RpdmVJbmRleCk7CiAgICAgICAgICAgICAgICAkaGlzdG9yeS51cmxTdGFjay5wdXNoKHt1cmw6IHVybH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChiYWNrKSB7CiAgICAgICAgICAgICAgICB2YXIgY3VyckluZGV4ID0gJGhpc3RvcnkuYWN0aXZlSW5kZXg7CiAgICAgICAgICAgICAgICB2YXIgbmV3SW5kZXggPSBmaW5kSW5QYXN0KHVybCk7CiAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggIT09IC0xICYmIGN1cnJJbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAkaGlzdG9yeS5yZW1vdmVQYXN0RW50cmllcyhjdXJySW5kZXggLSBuZXdJbmRleCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0pKHdpbmRvdy5qUXVlcnksIHdpbmRvdy5hbmd1bGFyKTsKLyoqCiAqIFRoaXMgY29tYmluZXMgdGhlIHJvdXRpbmcgb2YgYW5ndWxhciBhbmQganF1ZXJ5IG1vYmlsZS4gSW4gZGV0YWlsLCBpdCBkZWFjdGl2YXRlcyB0aGUgcm91dGluZyBpbiBqcW0KICogYW5kIHJldXNlcyB0aGF0IG9mIGFuZ3VsYXIuCiAqLwooZnVuY3Rpb24gKGFuZ3VsYXIsICQpIHsKICAgIHZhciBERUZBVUxUX0pRTV9QQUdFID0gJ0RFRkFVTFRfSlFNX1BBR0UnLAogICAgICAgIG1vZCA9IGFuZ3VsYXIubW9kdWxlKCJuZyIpOwoKICAgIGRpc2FibGVKcW1IYXNoQ2hhbmdlKCk7CgogICAgLy8gaHRtbDUgbW9kZSBpcyBhbHdheXMgcmVxdWlyZWQsIHNvIHdlIGFyZSBhYmxlIHRvIGFsbG93IGxpbmtzIGxpa2UKICAgIC8vIDxhIGhyZWY9InNvbWVQYWdlLmh0bWwiPiB0byBsb2FkIGV4dGVybmFsIHBhZ2VzLgogICAgbW9kLmNvbmZpZyhbJyRsb2NhdGlvblByb3ZpZGVyJywgZnVuY3Rpb24gKCRsb2NhdGlvblByb3ZpZGVyKSB7CiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpOwogICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmhhc2hQcmVmaXgoJyEnKTsKICAgIH1dKTsKCiAgICBtb2QuZGlyZWN0aXZlKCduZ1ZpZXcnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJuZ1ZpZXcgaXMgbm90IGFsbG93ZWQgYW5kIG5vdCBuZWVkZWQgd2l0aCB0aGUganFtIGFkYXB0ZXIuIik7CiAgICB9KTsKCiAgICBwYXRjaEFuZ3VsYXJUb0FsbG93VmNsaWNrc09uRW1wdHlBbmNob3JUYWdzKCk7CgogICAgbW9kLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgY29uZmlnTW9iaWxlUm91dGVzXSk7CiAgICBtb2QucnVuKFsiJHJvb3RTY29wZSIsICIkbG9jYXRpb24iLCBhcHBseVJvdXRlT3ZlcnJpZGVPblJvdXRlQ2hhbmdlU3RhcnRdKTsKICAgIG1vZC5ydW4oWyIkcm9vdFNjb3BlIiwgIiRyb3V0ZSIsICIkcm91dGVQYXJhbXMiLCAiJGxvY2F0aW9uIiwgIiRoaXN0b3J5Iiwgb25QYWdlU2hvd0V2YWxPbkFjdGl2YXRlQW5kVXBkYXRlRGlhbG9nVXJsc10pOwogICAgbW9kLnJ1bihbIiRyb290U2NvcGUiLCAiJHJvdXRlIiwgIiRsb2NhdGlvbiIsICIkYnJvd3NlciIsICIkaGlzdG9yeSIsYXBwbHlEZWZhdWx0TmF2aWdhdGlvbk9uUm91dGVDaGFuZ2VTdWNjZXNzXSk7CiAgICBtb2QucnVuKFsiJHJvb3RTY29wZSIsICIkbG9jYXRpb24iLCAiJGhpc3RvcnkiLCBpbnN0cnVtZW50RGlhbG9nQ2xvc2VUb05hdmlnYXRlQmFja1doZW5PcGVuZWRCeVJvdXRpbmddKTsKICAgIG1vZC5jb25maWcoWyckcHJvdmlkZScsIGZ1bmN0aW9uICgkcHJvdmlkZSkgewogICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJGxvY2F0aW9uJywgWyckZGVsZWdhdGUnLCBsb2NhdGlvblJvdXRlT3ZlcnJpZGVEZWNvcmF0b3JdKTsKICAgIH1dKTsKCiAgICBmdW5jdGlvbiBwYXRjaEFuZ3VsYXJUb0FsbG93VmNsaWNrc09uRW1wdHlBbmNob3JUYWdzKCkgewogICAgICAgIC8vIFByb2JsZW0gMToKICAgICAgICAvLyBBbmd1bGFyIGhhcyBhIGRpcmVjdGl2ZSBmb3IgbGlua3Mgd2l0aCBhbiBlbXB0eSAiaHJlZiIgYXR0cmlidXRlLgogICAgICAgIC8vIFRoaXMgZGlyZWN0aXZlIGhhcyBhIGNsaWNrLWxpc3RlbmVyIHdoaWNoIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbgogICAgICAgIC8vIGFuZCBzdG9wcyB0aGUgcHJvcGFnYXRpb24gb2YgdGhlIGV2ZW50IHRvIHBhcmVudCBlbGVtZW50cy4KICAgICAgICAvLyBIb3dldmVyLCBmb3Igc2ltdWxhdGluZyB2Y2xpY2tzIGluIGRlc2t0b3AgYnJvd3NlcnMsIGpRdWVyeSBNb2JpbGUgaGFzIGEgY2xpY2stbGlzdGVuZXIKICAgICAgICAvLyBvbiB0aGUgZG9jdW1lbnQuIEFzIGFuZ3VsYXIgc3RvcHMgcHJvcGFnYXRpb24gb2YgdGhlIGV2ZW50LCBqUXVlcnkgTW9iaWxlIG5ldmVyCiAgICAgICAgLy8gcmVjZWl2ZXMgaXQgYW5kIHRoZXJlZm9yZSBuZXZlciBmaXJlcyB0aGUgdmNsaWNrIGV2ZW50LgoKICAgICAgICAvLyBQcm9ibGVtIDI6CiAgICAgICAgLy8gTGlua3Mgd2l0aCBhIGhyZWYtQXR0cmlidXRlIG9mIHZhbHVlICIjIiBhcmUgbm9vcHMgaW4gcGxhaW4ganF1ZXJ5IG1vYmlsZSBhcHBzCiAgICAgICAgLy8gKHNlZSBlLmcuIHRoZSBjbG9zZSBidXR0b24gb2YgZGlhbG9ncykuCiAgICAgICAgLy8gSG93ZXZlciwgYW5ndWxhciBpbnRlcnByZXRzIHN1Y2ggbGlua3MgYXMgYSBub3JtYWwgbGluayBhbmQgYnkgdGhpcyB1cGRhdGVzCiAgICAgICAgLy8gdGhlIGhhc2ggb2YgJGxvY2F0aW9uLXNlcnZpY2UgdG8gYmUgZW1wdHkuCgogICAgICAgIC8vIFNvbHV0aW9uIHBhcnQxOiBuZXcgZGlyZWN0aXZlIHRoYXQgc2V0cyB0aGUgaHJlZi1BdHRyaWJ1dGUgb2YgYWxsIGxpbmtzIHRvICIjIi4gQnkgdGhpcywKICAgICAgICAvLyB0aGUgbWVudGlvbmVkIGFuZ3VsYXIgZGlyZWN0aXZlIGZvciBsaW5rcyB3aXRoIGVtcHR5IGhyZWYtQXR0cmlidXRlcyBkb2VzIG5vIG1vcmUgYXBwbHkKICAgICAgICBtb2QuZGlyZWN0aXZlKCdhJywgYWxsb3dFbXB0eUFuY2hvckxpbmtEaXJlY3RpdmUpOwogICAgICAgIC8vIFNvbHV0aW9uIHBhcnQyOiBwYXRjaCB0aGUgbGlzdGVuZXIgZm9yIGNsaWNrcyBpbiBhbmd1bGFyIHRoYXQgdXBkYXRlcyAkbG9jYXRpb24gdG8gb25seSBiZSBleGVjdXRlZAogICAgICAgIC8vIHdoZW4gdGhlIGhyZWYtQXR0cmlidXRlIG9mIGEgbGluayBpcyBub3QgZXF1YWwgdG8gIiMiLiBPdGhlcndpc2Ugc3RpbGwgcHJldmVudCB0aGUgZGVmYXVsdCBhY3Rpb24sCiAgICAgICAgLy8gc28gdGhhdCB0aGUgYnJvd3NlciBkb2VzIG5vdCB1cGRhdGUgdGhlIGJyb3dzZXIgbG9jYXRpb24gZGlyZWN0bHkuCiAgICAgICAgLy8gSGVyZSB3ZSBqdXN0IHByZXZlbnQgYW5ndWxhciBmcm9tIGluc3RhbGxpbmcgaXQncyBkZWZhdWx0IGNsaWNrIGhhbmRsZXIKICAgICAgICAvLyBhbmQgY3JlYXRlIG91ciBvd24uCiAgICAgICAgbW9kLmNvbmZpZyhbJyRsb2NhdGlvblByb3ZpZGVyJywgcmVwbGFjZURlZmF1bHRDbGlja0hhbmRsZXJMb2NhdGlvbkRlY29yYXRvcl0pOwogICAgfQoKICAgIHJldHVybjsKCgogICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZnVuY3Rpb24gbG9jYXRpb25Sb3V0ZU92ZXJyaWRlRGVjb3JhdG9yKCRsb2NhdGlvbikgewogICAgICAgICRsb2NhdGlvbi5yb3V0ZU92ZXJyaWRlID0gZnVuY3Rpb24gKHJvdXRlT3ZlcnJpZGUpIHsKICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiAkbG9jYXRpb24uJCRyb3V0ZU92ZXJyaWRlOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRsb2NhdGlvbi4kJHJvdXRlT3ZlcnJpZGUgPSByb3V0ZU92ZXJyaWRlOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9OwoKICAgICAgICAvLyBJZiB3ZSBzdGFydCB0aGUgYXBwIHdpdGggYSB1cmwgbGlrZQogICAgICAgIC8vIGluZGV4Lmh0bWw/YT1iIyEvc29tZVBhZ2UuaHRtbCwgaS5lLgogICAgICAgIC8vIHdlIGhhdmUgYSBzZWFyY2ggcGFyYW1ldGVyIGFuZCBsb2FkIGFuIGV4dGVybmFsIHN1YnBhZ2UsCiAgICAgICAgLy8gdGhlbiBhbmd1bGFyIGRvZXMgbm90IHBhcnNlIHRoZSBnaXZlbiBoYXNoYmFuZyB1cmwgY29ycmVjdGx5LgogICAgICAgIC8vIEhlcmUsIHdlIGNvcnJlY3QgdGhlIHdyb25nIHBhcnNpbmcuCiAgICAgICAgdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpOwogICAgICAgIGlmIChoYXNoICYmIGhhc2guaW5kZXhPZignIScpID09PSAwKSB7CiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goe30pOwogICAgICAgICAgICAkbG9jYXRpb24udXJsKGhhc2guc3Vic3RyaW5nKDEpKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkbG9jYXRpb247CiAgICB9CgogICAgLy8gVGhpcyBuZWVkcyB0byBiZSBvdXRzaWRlIG9mIGEgYW5ndWxhciBjb25maWcgY2FsbGJhY2ssIGFzIGpxbSByZWFkcyB0aGlzIGR1cmluZyBpbml0aWFsaXphdGlvbi4KICAgIGZ1bmN0aW9uIGRpc2FibGVKcW1IYXNoQ2hhbmdlKCkgewogICAgICAgICQubW9iaWxlLnB1c2hTdGF0ZUVuYWJsZWQgPSBmYWxzZTsKICAgICAgICAkLm1vYmlsZS5oYXNoTGlzdGVuaW5nRW5hYmxlZCA9IGZhbHNlOwogICAgICAgICQubW9iaWxlLmxpbmtCaW5kaW5nRW5hYmxlZCA9IGZhbHNlOwogICAgICAgICQubW9iaWxlLmNoYW5nZVBhZ2UuZGVmYXVsdHMuY2hhbmdlSGFzaCA9IGZhbHNlOwogICAgICAgICQubW9iaWxlLl9oYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gKCkgewogICAgICAgIH07CiAgICAgICAgLy8gV2UgZGVhY3RpdmF0ZSBkeW5hbWljIGJhc2UgdGFnLAogICAgICAgIC8vIGUuZy4gc28gdGhhdCB4aHJzIGFyZSBhbHdheXMgYWdhaW5zdCB0aGUKICAgICAgICAvLyB1cmwgd2l0aCB3aGljaCB0aGUgYXBwIHdhcyBzdGFydGVkIQogICAgICAgIGlmICgkLnN1cHBvcnQuZHluYW1pY0Jhc2VUYWcpIHsKICAgICAgICAgICAgJC5zdXBwb3J0LmR5bmFtaWNCYXNlVGFnID0gZmFsc2U7CiAgICAgICAgICAgICQubW9iaWxlLmJhc2Uuc2V0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICAkLm1vYmlsZS5jaGFuZ2VQYWdlLmRlZmF1bHRzLmFsbG93U2FtZVBhZ2VUcmFuc2l0aW9uID0gdHJ1ZTsKICAgICAgICB2YXIgX2FkZCA9ICQubW9iaWxlLnVybEhpc3RvcnkuYWRkOwogICAgICAgICQubW9iaWxlLnVybEhpc3RvcnkuYWRkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciByZXMgPSBfYWRkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIHZhciBoaXN0b3J5ID0gJC5tb2JpbGUudXJsSGlzdG9yeSwKICAgICAgICAgICAgICAgIHN0YWNrID0gaGlzdG9yeS5zdGFjaywKICAgICAgICAgICAgICAgIHJlbW92ZUVudHJpZXMgPSBzdGFjay5sZW5ndGgtMzsKICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aD4zKSB7CiAgICAgICAgICAgICAgICBzdGFjay5zcGxpY2UoMCwgcmVtb3ZlRW50cmllcyk7CiAgICAgICAgICAgICAgICBoaXN0b3J5LmFjdGl2ZUluZGV4IC09IHJlbW92ZUVudHJpZXM7CiAgICAgICAgICAgICAgICBpZiAoaGlzdG9yeS5hY3RpdmVJbmRleDwwKSB7CiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5hY3RpdmVJbmRleCA9IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlczsKICAgICAgICB9OwogICAgfQoKCiAgICBmdW5jdGlvbiBjb25maWdNb2JpbGVSb3V0ZXMoJHJvdXRlUHJvdmlkZXIpIHsKICAgICAgICB2YXIgX3doZW4gPSAkcm91dGVQcm92aWRlci53aGVuOwogICAgICAgICRyb3V0ZVByb3ZpZGVyLndoZW4gPSBmdW5jdGlvbiAocGF0aCwgcGFyYW1zKSB7CiAgICAgICAgICAgIGlmICghcGFyYW1zLnRlbXBsYXRlVXJsICYmICFwYXJhbXMucmVkaXJlY3RUbykgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJPbmx5IHJvdXRlcyB3aXRoIHRlbXBsYXRlVXJsIG9yIHJlZGlyZWN0VG8gYXJlIGFsbG93ZWQgd2l0aCB0aGUganFtIGFkYXB0ZXIhIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHBhcmFtcy5jb250cm9sbGVyKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkNvbnRyb2xsZXJzIGFyZSBub3QgYWxsb3dlZCBvbiByb3V0ZXMgd2l0aCB0aGUganFtIGFkYXB0ZXIuIEhvd2V2ZXIsIHlvdSBtYXkgdXNlIHRoZSBvbkFjdGl2YXRlIHBhcmFtZXRlciIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBfd2hlbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH07CgogICAgICAgICRyb3V0ZVByb3ZpZGVyLm90aGVyd2lzZSh7CiAgICAgICAgICAgIHRlbXBsYXRlVXJsOkRFRkFVTFRfSlFNX1BBR0UKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCYXNlUGF0aChwYXRoKSB7CiAgICAgICAgcmV0dXJuIHBhdGguc3Vic3RyKDAsIHBhdGgubGFzdEluZGV4T2YoJy8nKSk7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwbHlSb3V0ZU92ZXJyaWRlT25Sb3V0ZUNoYW5nZVN0YXJ0KCRyb290U2NvcGUsICRsb2NhdGlvbikgewogICAgICAgICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uKGV2ZW50LCBuZXdSb3V0ZSkgewogICAgICAgICAgICAvLyBhbHdheXMgY2xvbmUgdGhlIG9yaWdpbmFsIGpxbU9wdGlvbnMgYXMgd2UgbWlnaHQgbW9kaWZ5IHRoZW0gCiAgICAgICAgICAgIC8vIGFmdGVyd2FyZHMuLi4KICAgICAgICAgICAgbmV3Um91dGUuanFtT3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBuZXdSb3V0ZS5qcW1PcHRpb25zKTsKICAgICAgICAgICAgdmFyIHJvdXRlT3ZlcnJpZGUgPSAkbG9jYXRpb24uJCRyb3V0ZU92ZXJyaWRlOwogICAgICAgICAgICBkZWxldGUgJGxvY2F0aW9uLiQkcm91dGVPdmVycmlkZTsKICAgICAgICAgICAgaWYgKHJvdXRlT3ZlcnJpZGUpIHsKICAgICAgICAgICAgICAgIGlmIChyb3V0ZU92ZXJyaWRlLm9uQWN0aXZhdGUpIHsKICAgICAgICAgICAgICAgICAgICBuZXdSb3V0ZS5vbkFjdGl2YXRlID0gcm91dGVPdmVycmlkZS5vbkFjdGl2YXRlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQobmV3Um91dGUuanFtT3B0aW9ucywgcm91dGVPdmVycmlkZS5qcW1PcHRpb25zKTsKCiAgICAgICAgICAgICAgICBuZXdSb3V0ZS5yZXNvbHZlID0gbmV3Um91dGUucmVzb2x2ZSB8fCB7fTsKICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyb3V0ZU92ZXJyaWRlLmxvY2FscywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsKICAgICAgICAgICAgICAgICAgICBuZXdSb3V0ZS5yZXNvbHZlW2tleV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFByZXZlbnQgYW5ndWxhciBmcm9tIGxvYWRpbmcgdGhlIHRlbXBsYXRlLCBhcyBqcXVlcnkgbW9iaWxlIGFscmVhZHkgZG9lcyB0aGlzIQogICAgICAgICAgICBuZXdSb3V0ZS5uZ21UZW1wbGF0ZVVybCA9IG5ld1JvdXRlLnRlbXBsYXRlVXJsOwogICAgICAgICAgICBuZXdSb3V0ZS50ZW1wbGF0ZVVybCA9IHVuZGVmaW5lZDsKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBvblBhZ2VTaG93RXZhbE9uQWN0aXZhdGVBbmRVcGRhdGVEaWFsb2dVcmxzKCRyb290U2NvcGUsICRyb3V0ZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sICRoaXN0b3J5KSB7CiAgICAgICAgJChkb2N1bWVudCkub24oInBhZ2ViZWZvcmVjaGFuZ2UiLCBzYXZlTGFzdE5hdkluZm9JbnRvQWN0aXZlUGFnZSk7CgogICAgICAgICRyb290U2NvcGUuJG9uKCJwYWdlYmVmb3Jlc2hvdyIsIHBhZ2VCZWZvcmVTaG93SGFuZGxlcik7CiAgICAgICAgZnVuY3Rpb24gcGFnZUJlZm9yZVNob3dIYW5kbGVyKHNjb3BlLCBldmVudCkgewogICAgICAgICAgICB2YXIgYWN0aXZlUGFnZSA9ICQoZXZlbnQudGFyZ2V0KTsKICAgICAgICAgICAgdmFyIGpxbU5hdkluZm8gPSBhY3RpdmVQYWdlLmRhdGEoImxhc3ROYXZQcm9wcyIpOwogICAgICAgICAgICBpZiAoIWpxbU5hdkluZm8gfHwgIWpxbU5hdkluZm8ubmF2QnlOZykgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBjdXJyZW50Um91dGUgPSAkcm91dGUuY3VycmVudCwKICAgICAgICAgICAgICAgIG9uQWN0aXZhdGVQYXJhbXMsCiAgICAgICAgICAgICAgICBjdXJyZW50SGlzdG9yeUVudHJ5ID0gJGhpc3RvcnkudXJsU3RhY2tbJGhpc3RvcnkuYWN0aXZlSW5kZXhdOwogICAgICAgICAgICBpZiAoY3VycmVudEhpc3RvcnlFbnRyeSkgewogICAgICAgICAgICAgICAgJC5tb2JpbGUudXJsSGlzdG9yeS5nZXRBY3RpdmUoKS5sYXN0U2Nyb2xsID0gY3VycmVudEhpc3RvcnlFbnRyeS5sYXN0U2Nyb2xsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpc0RpYWxvZyhhY3RpdmVQYWdlKSkgewogICAgICAgICAgICAgICAgY3VycmVudEhpc3RvcnlFbnRyeS50ZW1wVXJsID0gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIGlmIChpc05vcm1hbFBhZ2UoYWN0aXZlUGFnZSkpIHsKICAgICAgICAgICAgICAgIHJlbW92ZVBhc3RUZW1wUGFnZXMoJGhpc3RvcnkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjdXJyZW50Um91dGUgJiYgY3VycmVudFJvdXRlLm9uQWN0aXZhdGUpIHsKICAgICAgICAgICAgICAgIG9uQWN0aXZhdGVQYXJhbXMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgY3VycmVudFJvdXRlLmxvY2FscywgJHJvdXRlUGFyYW1zKTsKICAgICAgICAgICAgICAgIGFjdGl2ZVBhZ2Uuc2NvcGUoKS4kZXZhbChjdXJyZW50Um91dGUub25BY3RpdmF0ZSwgb25BY3RpdmF0ZVBhcmFtcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHNhdmVMYXN0TmF2SW5mb0ludG9BY3RpdmVQYWdlKGV2ZW50LCBkYXRhKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS50b1BhZ2UgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICBkYXRhLnRvUGFnZS5kYXRhKCJsYXN0TmF2UHJvcHMiLCBkYXRhLm9wdGlvbnMpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiByZW1vdmVQYXN0VGVtcFBhZ2VzKCRoaXN0b3J5KSB7CiAgICAgICAgICAgIHZhciBpID0gJGhpc3RvcnkuYWN0aXZlSW5kZXgtMSwgcmVtb3ZlQ291bnQgPSAwOwogICAgICAgICAgICB3aGlsZSAoaT49MCAmJiAkaGlzdG9yeS51cmxTdGFja1tpXS50ZW1wVXJsKSB7CiAgICAgICAgICAgICAgICByZW1vdmVDb3VudCsrOwogICAgICAgICAgICAgICAgaS0tOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChyZW1vdmVDb3VudD4wKSB7CiAgICAgICAgICAgICAgICAkaGlzdG9yeS5yZW1vdmVQYXN0RW50cmllcyhyZW1vdmVDb3VudCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaXNEaWFsb2cocGFnZSkgewogICAgICAgIHJldHVybiBwYWdlICYmIHBhZ2UuanFtRGF0YSgicm9sZSIpID09PSAiZGlhbG9nIjsKICAgIH0KCiAgICBmdW5jdGlvbiBpc05vcm1hbFBhZ2UocGFnZSkgewogICAgICAgIHJldHVybiBwYWdlICYmIHBhZ2UuanFtRGF0YSgicm9sZSIpID09PSAicGFnZSI7CiAgICB9CgogICAgZnVuY3Rpb24gYXBwbHlEZWZhdWx0TmF2aWdhdGlvbk9uUm91dGVDaGFuZ2VTdWNjZXNzKCRyb290U2NvcGUsICRyb3V0ZSwgJGxvY2F0aW9uLCAkYnJvd3NlciwgJGhpc3RvcnkpIHsKICAgICAgICAkcm9vdFNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgbmV3Um91dGUgPSAkcm91dGUuY3VycmVudDsKICAgICAgICAgICAgaWYgKG5ld1JvdXRlLnJlZGlyZWN0VG8pIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgJGRvY3VtZW50ID0gJChkb2N1bWVudCk7CgogICAgICAgICAgICB2YXIgdXJsID0gbmV3Um91dGUubmdtVGVtcGxhdGVVcmw7CiAgICAgICAgICAgIGlmICh1cmwgPT09IERFRkFVTFRfSlFNX1BBR0UpIHsKICAgICAgICAgICAgICAgIHVybCA9ICRsb2NhdGlvbi51cmwoKTsKICAgICAgICAgICAgICAgIC8vICRsb2NhdGlvbiBhbHdheXMgeWllbHMgYWJzb2x1dGUgdXJscy4uLgogICAgICAgICAgICAgICAgaWYgKHVybCAmJiB1cmwuY2hhckF0KDApPT09Jy8nKSB7CiAgICAgICAgICAgICAgICAgICAgdXJsID0gdXJsLnNsaWNlKDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHVybCA9ICQubW9iaWxlLnBhdGgubWFrZVVybEFic29sdXRlKHVybCwgJGJyb3dzZXIuYmFzZUhyZWYoKSk7CiAgICAgICAgICAgIHZhciBuYXZDb25maWcgPSBuZXdSb3V0ZS5qcW1PcHRpb25zIHx8IHt9OwogICAgICAgICAgICByZXN0b3JlT3JTYXZlVHJhbnNpdGlvbkZvclVybENoYW5nZShuYXZDb25maWcpOwogICAgICAgICAgICBuYXZDb25maWcubmF2QnlOZyA9IHRydWU7CgogICAgICAgICAgICBpZiAoISQubW9iaWxlLmZpcnN0UGFnZSkgewogICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oImpxbUluaXQiLCBzdGFydE5hdmlnYXRpb24pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc3RhcnROYXZpZ2F0aW9uKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIHN0YXJ0TmF2aWdhdGlvbigpIHsKICAgICAgICAgICAgICAgICQubW9iaWxlLmNoYW5nZVBhZ2UodXJsLCBuYXZDb25maWcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiByZXN0b3JlT3JTYXZlVHJhbnNpdGlvbkZvclVybENoYW5nZShuYXZDb25maWcpIHsKICAgICAgICAgICAgICAgIHZhciBsYXN0RW50cnksCiAgICAgICAgICAgICAgICAgICAgY3VycmVudEVudHJ5ID0gJGhpc3RvcnkudXJsU3RhY2tbJGhpc3RvcnkuYWN0aXZlSW5kZXhdOwogICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50RW50cnkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBJbiBzb21lIFVuaXQtVGVzdGNhc2VzLCB0aGVyZSBpcyBubyBhY3RpdmUgJGhpc3RvcnkgZW50cnkuCiAgICAgICAgICAgICAgICAgICAgLy8gZG8gbm90aGluZyB0aGVuLi4uCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCRoaXN0b3J5Lmxhc3RJbmRleEZyb21VcmxDaGFuZ2UgPj0wICkgewogICAgICAgICAgICAgICAgICAgIC8vIE5hdmlnYXRpbmcgaW4gdGhlIGhpc3RvcnkKICAgICAgICAgICAgICAgICAgICBsYXN0RW50cnkgPSAkaGlzdG9yeS51cmxTdGFja1skaGlzdG9yeS5sYXN0SW5kZXhGcm9tVXJsQ2hhbmdlXTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25IaXN0b3J5RW50cnk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRoaXN0b3J5Lmxhc3RJbmRleEZyb21VcmxDaGFuZ2UgPiAkaGlzdG9yeS5hY3RpdmVJbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICBuYXZDb25maWcucmV2ZXJzZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25IaXN0b3J5RW50cnkgPSBsYXN0RW50cnk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkhpc3RvcnlFbnRyeSA9IGN1cnJlbnRFbnRyeTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25IaXN0b3J5RW50cnkgJiYgdHJhbnNpdGlvbkhpc3RvcnlFbnRyeS5qcW1PcHRpb25zKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hdkNvbmZpZy50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkhpc3RvcnlFbnRyeS5qcW1PcHRpb25zLnRyYW5zaXRpb247CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGluZyBuZXcgaGlzdG9yeSBlbnRyaWVzLi4uCiAgICAgICAgICAgICAgICAgICAgbGFzdEVudHJ5ID0gJGhpc3RvcnkudXJsU3RhY2tbJGhpc3RvcnkuYWN0aXZlSW5kZXggLSAxXTsKICAgICAgICAgICAgICAgICAgICBjdXJyZW50RW50cnkuanFtT3B0aW9ucyA9IG5hdkNvbmZpZzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChsYXN0RW50cnkpIHsKICAgICAgICAgICAgICAgICAgICBsYXN0RW50cnkubGFzdFNjcm9sbCA9ICQubW9iaWxlLnVybEhpc3RvcnkuZ2V0QWN0aXZlKCkubGFzdFNjcm9sbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGluc3RydW1lbnREaWFsb2dDbG9zZVRvTmF2aWdhdGVCYWNrV2hlbk9wZW5lZEJ5Um91dGluZygkcm9vdFNjb3BlLCAkbG9jYXRpb24sICRoaXN0b3J5KSB7CiAgICAgICAgdmFyIGRpYWxvZ1Byb3RvID0gJC5tb2JpbGUuZGlhbG9nLnByb3RvdHlwZTsKICAgICAgICBkaWFsb2dQcm90by5vcmlnQ2xvc2UgPSBkaWFsb2dQcm90by5vcmlnQ2xvc2UgfHwgZGlhbG9nUHJvdG8uY2xvc2U7CiAgICAgICAgZGlhbG9nUHJvdG8uY2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBqcW1OYXZJbmZvID0gJC5tb2JpbGUuYWN0aXZlUGFnZS5kYXRhKCJsYXN0TmF2UHJvcHMiKTsKICAgICAgICAgICAgaWYgKHRoaXMuX2lzQ2xvc2VhYmxlICYmIGpxbU5hdkluZm8gJiYganFtTmF2SW5mby5uYXZCeU5nKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9pc0Nsb3NlYWJsZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICRoaXN0b3J5LmdvQmFjaygpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLm9yaWdDbG9zZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZWZhdWx0Q2xpY2tIYW5kbGVyKGV2ZW50LCBpRWxlbWVudCwgJHNjb3BlLCAkbG9jYXRpb24sICRoaXN0b3J5KSB7CiAgICAgICAgLy8gQXR0ZW50aW9uOiBEbyBOT1Qgc3RvcFByb3BhZ2F0aW9uLCBhcyBvdGhlcndpc2UKICAgICAgICAvLyBqcXVlcnkgTW9iaWxlIHdpbGwgbm90IGdlbmVyYXRlIGEgdmNsaWNrIGV2ZW50IQogICAgICAgIHZhciByZWwgPSBpRWxlbWVudC5qcW1EYXRhKCJyZWwiKTsKICAgICAgICBpZiAocmVsID09PSAnYmFjaycpIHsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkaGlzdG9yeS5nb0JhY2soKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmIChyZWwgPT09ICdwb3B1cCcpIHsKICAgICAgICAgICAgLy8gRm9yIHBvcHVwcywgd2UgZG9uJ3Qgd2FudCB0aGVpciBoYXNoIGluIHRoZSB1cmwsCiAgICAgICAgICAgIC8vIGJ1dCBvbmx5IG9wZW4gdGhlIHBvcHVwCiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgcG9wdXAgPSAkLm1vYmlsZS5hY3RpdmVQYWdlLmZpbmQoaUVsZW1lbnQuYXR0cignaHJlZicpKTsKICAgICAgICAgICAgICAgIGlmIChwb3B1cC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gaUVsZW1lbnQub2Zmc2V0KCk7CiAgICAgICAgICAgICAgICAgICAgcG9wdXAucG9wdXAoICJvcGVuIiwgewogICAgICAgICAgICAgICAgICAgICAgICB4OiBvZmZzZXQubGVmdCArIGlFbGVtZW50Lm91dGVyV2lkdGgoKSAvIDIsCiAgICAgICAgICAgICAgICAgICAgICAgIHk6IG9mZnNldC50b3AgKyBpRWxlbWVudC5vdXRlckhlaWdodCgpIC8gMiwKICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogaUVsZW1lbnQuanFtRGF0YSggInRyYW5zaXRpb24iICksCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uVG86IGlFbGVtZW50LmpxbURhdGEoICJwb3NpdGlvbi10byIgKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgaWYgKGlzTm9vcExpbmsoaUVsZW1lbnQpKSB7CiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGFic0hyZWYgPSBpRWxlbWVudC5wcm9wKCdocmVmJyksCiAgICAgICAgICAgICAgICByZXdyaXR0ZW5VcmwgPSAkbG9jYXRpb24uJCRyZXdyaXRlQXBwVXJsKGFic0hyZWYpLAogICAgICAgICAgICAgICAgYWpheCA9IGlFbGVtZW50LmpxbURhdGEoImFqYXgiKTsKCiAgICAgICAgICAgIGlmIChhYnNIcmVmICYmICFpRWxlbWVudC5hdHRyKCd0YXJnZXQnKSAmJiBhamF4ICE9PSBmYWxzZSAmJiByZWwgIT09ICdleHRlcm5hbCcgJiYgcmV3cml0dGVuVXJsKSB7CiAgICAgICAgICAgICAgICAvLyBTZWUgb3JpZ2luYWwgYW5ndWxhciBkZWZhdWx0IGNsaWNrIGhhbmRsZXI6CiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgbG9jYXRpb24gbWFudWFsbHkKICAgICAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKHJld3JpdHRlblVybCk7CiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgLy8gaGFjayB0byB3b3JrIGFyb3VuZCBGRjYgYnVnIDY4NDIwOCB3aGVuIHNjZW5hcmlvIHJ1bm5lciBjbGlja3Mgb24gbGlua3MKICAgICAgICAgICAgICAgIHdpbmRvdy5hbmd1bGFyWydmZi02ODQyMDgtcHJldmVudERlZmF1bHQnXSA9IHRydWU7CiAgICAgICAgICAgICAgICAvLyBBZGRpdGlvbmFsIGhhbmRsaW5nCiAgICAgICAgICAgICAgICB2YXIgb3ZlcnJpZGUgPSAkbG9jYXRpb24ucm91dGVPdmVycmlkZSgpIHx8IHt9OwogICAgICAgICAgICAgICAgdmFyIGpxbU9wdGlvbnMgPSBvdmVycmlkZS5qcW1PcHRpb25zID0gewogICAgICAgICAgICAgICAgICAgIGxpbms6aUVsZW1lbnQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgdHJhbnMgPSBpRWxlbWVudC5qcW1EYXRhKCJ0cmFuc2l0aW9uIik7CiAgICAgICAgICAgICAgICBpZiAodHJhbnMpIHsKICAgICAgICAgICAgICAgICAgICBqcW1PcHRpb25zLnRyYW5zaXRpb24gPSB0cmFuczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBpRWxlbWVudC5qcW1EYXRhKCJkaXJlY3Rpb24iKTsKICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24pIHsKICAgICAgICAgICAgICAgICAgICBqcW1PcHRpb25zLnJldmVyc2UgPSBkaXJlY3Rpb24gPT09ICJyZXZlcnNlIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRsb2NhdGlvbi5yb3V0ZU92ZXJyaWRlKG92ZXJyaWRlKTsKICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBpc05vb3BMaW5rKGVsZW1lbnQpIHsKICAgICAgICB2YXIgaHJlZiA9IGVsZW1lbnQuYXR0cignaHJlZicpOwogICAgICAgIHJldHVybiAoaHJlZiA9PT0gJyMnIHx8ICFocmVmKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbGxvd0VtcHR5QW5jaG9yTGlua0RpcmVjdGl2ZSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICByZXN0cmljdDonRScsCiAgICAgICAgICAgIGNvbXBpbGU6ZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICAgICAgICAgIGlmIChpc05vb3BMaW5rKGVsZW1lbnQpKSB7CiAgICAgICAgICAgICAgICAgICAgYXR0ci4kc2V0KCdocmVmJywgJyMnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gcmVwbGFjZURlZmF1bHRDbGlja0hhbmRsZXJMb2NhdGlvbkRlY29yYXRvcigkbG9jYXRpb25Qcm92aWRlcikgewogICAgICAgIHZhciBvcmlnJGdldCA9ICRsb2NhdGlvblByb3ZpZGVyLiRnZXQ7CiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuJGdldCA9IFsnJGluamVjdG9yJywgJyRyb290RWxlbWVudCcsICckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRoaXN0b3J5JywgZnVuY3Rpb24gKCRpbmplY3RvciwgJHJvb3RFbGVtZW50LCAkcm9vdFNjb3BlLCAkYnJvd3NlciwgJGhpc3RvcnkpIHsKICAgICAgICAgICAgdmFyICRsb2NhdGlvbiA9IHByZXZlbnRDbGlja0hhbmRsZXJzT25Sb290RWxlbWVudFdoaWxlQ2FsbGluZygkcm9vdEVsZW1lbnQsCiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRpbmplY3Rvci5pbnZva2Uob3JpZyRnZXQsICRsb2NhdGlvblByb3ZpZGVyKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAvLyByZWdpc3RlciBvdXIgZGVmYXVsdCBjbGljayBoYW5kbGVyIGFsd2F5cyBhdCB0aGUgZG9jdW1lbnQKICAgICAgICAgICAgLy8gYW5kIGluIGEgc2V0VGltZW91dCwgc28gdGhhdCB3ZSBhcmUgYWx3YXlzIGxhdGVyIHRoYW4KICAgICAgICAgICAgLy8gdmNsaWNrcyBieSBqcXVlcnkgbW9iaWxlLiBOZWVkZWQgZS5nLiBmb3Igc2VsZWN0bWVudSBwb3B1cHMKICAgICAgICAgICAgLy8gd2hvIGNoYW5nZSB0aGUgbGluayBpbiBhIHZjbGljay4KICAgICAgICAgICAgJChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLmJpbmQoJ2NsaWNrJywgY2hlY2tBbmRDYWxsRGVmYXVsdENsaWNrSGFuZGxlcik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAvLyBOb3RlOiBTb21lIG9mIHRoaXMgY2xpY2sgaGFuZGxlciB3YXMgY29waWVkIGZyb20gdGhlIG9yaWdpbmFsCiAgICAgICAgICAgIC8vIGRlZmF1bHQgY2xpY2sgaGFuZGxlciBpbiBhbmd1bGFyLgogICAgICAgICAgICBmdW5jdGlvbiBjaGVja0FuZENhbGxEZWZhdWx0Q2xpY2tIYW5kbGVyKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAvLyBUT0RPKHZvanRhKTogcmV3cml0ZSBsaW5rIHdoZW4gb3BlbmluZyBpbiBuZXcgdGFiL3dpbmRvdyAoaW4gbGVnYWN5IGJyb3dzZXIpCiAgICAgICAgICAgICAgICAvLyBjdXJyZW50bHkgd2Ugb3BlbiBuaWNlIHVybCBsaW5rIGFuZCByZWRpcmVjdCB0aGVuCgogICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC53aGljaCA9PT0gMikgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgZWxtID0gJChldmVudC50YXJnZXQpOwoKICAgICAgICAgICAgICAgIC8vIHRyYXZlcnNlIHRoZSBET00gdXAgdG8gZmluZCBmaXJzdCBBIHRhZwogICAgICAgICAgICAgICAgd2hpbGUgKGFuZ3VsYXIubG93ZXJjYXNlKGVsbVswXS5ub2RlTmFtZSkgIT09ICdhJykgewogICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSByZXdyaXRpbmcgaWYgbm8gQSB0YWcgKHJlYWNoZWQgcm9vdCBlbGVtZW50LCBvciBubyBwYXJlbnQgLSByZW1vdmVkIGZyb20gZG9jdW1lbnQpCiAgICAgICAgICAgICAgICAgICAgaWYgKGVsbVswXSA9PT0gJHJvb3RFbGVtZW50WzBdIHx8ICEoZWxtID0gZWxtLnBhcmVudCgpKVswXSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGVmYXVsdENsaWNrSGFuZGxlcihldmVudCwgZWxtLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24sICRoaXN0b3J5KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gJGxvY2F0aW9uOwogICAgICAgIH1dOwogICAgfQoKICAgIGZ1bmN0aW9uIHByZXZlbnRDbGlja0hhbmRsZXJzT25Sb290RWxlbWVudFdoaWxlQ2FsbGluZygkcm9vdEVsZW1lbnQsIGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIF9iaW5kID0gJC5mbi5iaW5kOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgICQuZm4uYmluZCA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHsKICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT09ICdjbGljaycgJiYgdGhpc1swXSA9PT0gJHJvb3RFbGVtZW50WzBdKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIF9iaW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpOwogICAgICAgIH0KICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgICAgJC5mbi5iaW5kID0gX2JpbmQ7CiAgICAgICAgfQogICAgfQoKCn0pKGFuZ3VsYXIsICQpOwoKKGZ1bmN0aW9uICgkLCBhbmd1bGFyKSB7CiAgICAvLyBQYXRjaCBmb3IgbmctcmVwZWF0IHRvIGZpcmUgYW4gZXZlbnQgd2hlbmV2ZXIgdGhlIGNoaWxkcmVuIGNoYW5nZS4KICAgIC8vIE9ubHkgd2F0Y2hpbmcgU2NvcGUgY3JlYXRlL2Rlc3Ryb3kgaXMgbm90IGVub3VnaCBoZXJlLCBhcyBuZy1yZXBlYXQKICAgIC8vIGNhY2hlcyB0aGUgc2NvcGVzIGR1cmluZyByZW9yZGVyaW5nLgoKICAgIGZ1bmN0aW9uIHNoYWxsb3dFcXVhbHMoY29sbGVjdGlvbjEsIGNvbGxlY3Rpb24yKSB7CiAgICAgICAgdmFyIHg7CiAgICAgICAgaWYgKCEhY29sbGVjdGlvbjEgXiAhIWNvbGxlY3Rpb24yKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKCFjb2xsZWN0aW9uMSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShjb2xsZWN0aW9uMSkpIHsKICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24xLmxlbmd0aCAhPT0gY29sbGVjdGlvbjIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZm9yICh4IGluIGNvbGxlY3Rpb24xKSB7CiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uMlt4XSAhPT0gY29sbGVjdGlvbjFbeF0pIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IgKHggaW4gY29sbGVjdGlvbjIpIHsKICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24yW3hdICE9PSBjb2xsZWN0aW9uMVt4XSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIHNoYWxsb3dDbG9uZShjb2xsZWN0aW9uKSB7CiAgICAgICAgaWYgKCFjb2xsZWN0aW9uKSB7CiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uOwogICAgICAgIH0KICAgICAgICB2YXIgcmVzOwogICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoY29sbGVjdGlvbikpIHsKICAgICAgICAgICAgcmVzID0gW107CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzID0ge307CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIHggaW4gY29sbGVjdGlvbikgewogICAgICAgICAgICByZXNbeF0gPSBjb2xsZWN0aW9uW3hdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzOwogICAgfQoKICAgIHZhciBtb2QgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKICAgIG1vZC5kaXJlY3RpdmUoJ25nUmVwZWF0JywgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHByaW9yaXR5OjEwMDAsIC8vIHNhbWUgYXMgb3JpZ2luYWwgcmVwZWF0CiAgICAgICAgICAgIGNvbXBpbGU6ZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHIsIGxpbmtlcikgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwcmU6ZnVuY3Rpb24gKHNjb3BlLCBpdGVyU3RhcnRFbGVtZW50LCBhdHRyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHByZXNzaW9uID0gYXR0ci5uZ1JlcGVhdDsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaCgvXi4raW5ccysoLiopXHMqJC8pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkV4cGVjdGVkIG5nUmVwZWF0IGluIGZvcm0gb2YgJ19pdGVtXyBpbiBfY29sbGVjdGlvbl8nIGJ1dCBnb3QgJyIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gKyAiJy4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sbGVjdGlvbkV4cHIgPSBtYXRjaFsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RDb2xsZWN0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlQ291bnRlciA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IHNjb3BlLiRldmFsKGNvbGxlY3Rpb25FeHByKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2hhbGxvd0VxdWFscyhjb2xsZWN0aW9uLCBsYXN0Q29sbGVjdGlvbikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q29sbGVjdGlvbiA9IHNoYWxsb3dDbG9uZShjb2xsZWN0aW9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VDb3VudGVyKys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlQ291bnRlcjsKICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogbmVlZCB0byBiZSBwYXJlbnQoKSBhcyBqcXVlcnkgY2Fubm90IHRyaWdnZXIgZXZlbnRzIG9uIGNvbW1lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAoYW5ndWxhciBjcmVhdGVzIGEgY29tbWVudCBub2RlIHdoZW4gdXNpbmcgdHJhbnNjbHVzaW9uLCBhcyBuZy1yZXBlYXQgZG9lcykuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyU3RhcnRFbGVtZW50LnBhcmVudCgpLnRyaWdnZXIoIiRjaGlsZHJlbkNoYW5nZWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9KTsKfSkoJCwgYW5ndWxhcik7CihmdW5jdGlvbiAoJCwgYW5ndWxhcikgewogICAgLy8gVGhpcyBpcyBhIGNvcHkgb2YgcGFydHMgb2YgYW5ndWxhcidzIG5nT3B0aW9ucyBkaXJlY3RpdmUgdG8gZGV0ZWN0IGNoYW5nZXMgaW4gdGhlIHZhbHVlcwogICAgLy8gb2YgbmdPcHRpb25zIChlbWl0cyB0aGUgJGNoaWxkcmVuQ2hhbmdlZCBldmVudCBvbiB0aGUgc2NvcGUpLgogICAgLy8gVGhpcyBpcyBuZWVkZWQgYXMgbmdPcHRpb25zIGRvZXMgbm90IHByb3ZpZGUgYSB3YXkgdG8gbGlzdGVuIHRvIGNoYW5nZXMuCgogICAgZnVuY3Rpb24gc29ydGVkS2V5cyhvYmopIHsKICAgICAgICB2YXIga2V5cyA9IFtdOwogICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4ga2V5cy5zb3J0KCk7CiAgICB9CgogICAgdmFyIE5HX09QVElPTlNfUkVHRVhQID0gL15ccyooLio/KSg/OlxzK2FzXHMrKC4qPykpPyg/OlxzK2dyb3VwXHMrYnlccysoLiopKT9ccytmb3JccysoPzooW1wkXHddW1wkXHdcZF0qKXwoPzpcKFxzKihbXCRcd11bXCRcd1xkXSopXHMqLFxzKihbXCRcd11bXCRcd1xkXSopXHMqXCkpKVxzK2luXHMrKC4qKSQvOwogICAgdmFyIG1vZCA9IGFuZ3VsYXIubW9kdWxlKCduZycpOwogICAgbW9kLmRpcmVjdGl2ZSgnbmdPcHRpb25zJywgWyckcGFyc2UnLCBmdW5jdGlvbiAoJHBhcnNlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmVxdWlyZTogWydzZWxlY3QnLCAnP25nTW9kZWwnXSwKICAgICAgICAgICAgbGluazpmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7CiAgICAgICAgICAgICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nCiAgICAgICAgICAgICAgICBpZiAoIWN0cmxzWzFdKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBtYXRjaDsKICAgICAgICAgICAgICAgIHZhciBvcHRpb25zRXhwID0gYXR0ci5uZ09wdGlvbnM7CgogICAgICAgICAgICAgICAgaWYgKCEgKG1hdGNoID0gb3B0aW9uc0V4cC5tYXRjaChOR19PUFRJT05TX1JFR0VYUCkpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgICAgICAgICAgICAgICAgICAiRXhwZWN0ZWQgbmdPcHRpb25zIGluIGZvcm0gb2YgJ19zZWxlY3RfIChhcyBfbGFiZWxfKT8gZm9yIChfa2V5XywpP192YWx1ZV8gaW4gX2NvbGxlY3Rpb25fJyIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBidXQgZ290ICciICsgb3B0aW9uc0V4cCArICInLiIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5Rm4gPSAkcGFyc2UobWF0Y2hbMl0gfHwgbWF0Y2hbMV0pLAogICAgICAgICAgICAgICAgICAgIHZhbHVlTmFtZSA9IG1hdGNoWzRdIHx8IG1hdGNoWzZdLAogICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBtYXRjaFs1XSwKICAgICAgICAgICAgICAgICAgICBncm91cEJ5Rm4gPSAkcGFyc2UobWF0Y2hbM10gfHwgJycpLAogICAgICAgICAgICAgICAgICAgIHZhbHVlRm4gPSAkcGFyc2UobWF0Y2hbMl0gPyBtYXRjaFsxXSA6IHZhbHVlTmFtZSksCiAgICAgICAgICAgICAgICAgICAgdmFsdWVzRm4gPSAkcGFyc2UobWF0Y2hbN10pOwoKICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChvcHRpb25zTW9kZWwsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudHJpZ2dlcigiJGNoaWxkcmVuQ2hhbmdlZCIpOwogICAgICAgICAgICAgICAgfSwgdHJ1ZSk7CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gb3B0aW9uc01vZGVsKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25Hcm91cHMgPSBbXSwgLy8gVGVtcG9yYXJ5IGxvY2F0aW9uIGZvciB0aGUgb3B0aW9uIGdyb3VwcyBiZWZvcmUgd2UgcmVuZGVyIHRoZW0KICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW10sCiAgICAgICAgICAgICAgICAgICAgICAgIGtleXMgPSBrZXlOYW1lID8gc29ydGVkS2V5cyh2YWx1ZXMpIDogdmFsdWVzLAogICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbHMgPSB7fTsKCiAgICAgICAgICAgICAgICAgICAgLy8gV2Ugbm93IGJ1aWxkIHVwIHRoZSBsaXN0IG9mIG9wdGlvbnMgd2UgbmVlZCAod2UgbWVyZ2UgbGF0ZXIpCiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc1tpbmRleF07CiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWVzW2tleU5hbWUgPyBsb2NhbHNba2V5TmFtZV09a2V5c1tpbmRleF06aW5kZXhdOwogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25Hcm91cE5hbWUgPSBncm91cEJ5Rm4oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkdyb3Vwcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBrZXlOYW1lID8ga2V5c1tpbmRleF0gOiBpbmRleCwgICAvLyBlaXRoZXIgdGhlIGluZGV4IGludG8gYXJyYXkgb3Iga2V5IGZyb20gb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogZGlzcGxheUZuKHNjb3BlLCBsb2NhbHMpLCAvLyB3aGF0IHdpbGwgYmUgc2VlbiBieSB0aGUgdXNlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uR3JvdXA6IG9wdGlvbkdyb3VwTmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbkdyb3VwczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9XSk7CgoKfSkoJCwgYW5ndWxhcik7CihmdW5jdGlvbiAoYW5ndWxhcikgewogICAgdmFyIG5nID0gYW5ndWxhci5tb2R1bGUoIm5nIik7CiAgICBuZy5kaXJlY3RpdmUoJ29wdGlvbicsIFsnJGludGVycG9sYXRlJywgZnVuY3Rpb24gKCRpbnRlcnBvbGF0ZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlc3RyaWN0OidFJywKICAgICAgICAgICAgY29tcGlsZTpmdW5jdGlvbiAodEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICAgICAgdmFyIHRleHRJbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKHRFbGVtZW50LnRleHQoKSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWVJbnRlcnBvbGF0ZUZuID0gdEVsZW1lbnQuYXR0cigndmFsdWUnKTsKICAgICAgICAgICAgICAgIGlmICh2YWx1ZUludGVycG9sYXRlRm4gIT09IGZhbHNlICYmIHR5cGVvZiB2YWx1ZUludGVycG9sYXRlRm4gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVJbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKHRFbGVtZW50LmF0dHIoJ3ZhbHVlJyksIHRydWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgewogICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaCh0ZXh0SW50ZXJwb2xhdGVGbiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpRWxlbWVudC50cmlnZ2VyKCIkY2hpbGRyZW5DaGFuZ2VkIik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKHZhbHVlSW50ZXJwb2xhdGVGbiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpRWxlbWVudC50cmlnZ2VyKCIkY2hpbGRyZW5DaGFuZ2VkIik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH1dKTsKfSkoYW5ndWxhcik7CgooZnVuY3Rpb24gKGFuZ3VsYXIpIHsKICAgIHZhciBuZyA9IGFuZ3VsYXIubW9kdWxlKCJuZyIpOwogICAgbmcuZGlyZWN0aXZlKCdsaScsIGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlc3RyaWN0OidFJywKICAgICAgICAgICAgY29tcGlsZTpmdW5jdGlvbiAodEVsZW1lbnQsIHRBdHRycykgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgewogICAgICAgICAgICAgICAgICAgIGlFbGVtZW50LmJpbmQoIiRjaGlsZHJlbkNoYW5nZWQiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlFbGVtZW50LnJlbW92ZUNsYXNzKGZ1bmN0aW9uKGEsY3NzKSB7IHJldHVybiAoY3NzLm1hdGNoICgvXGJ1aS1cUysvZykgfHwgW10pLmpvaW4oJyAnKTsgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25FbGVtZW50cyA9IGlFbGVtZW50LmRhdGEoImJ1dHRvbkVsZW1lbnRzIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidXR0b25FbGVtZW50cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBidXR0b25FbGVtZW50cy50ZXh0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRleHQuZmlyc3RDaGlsZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlFbGVtZW50WzBdLmFwcGVuZENoaWxkKHRleHQuZmlyc3RDaGlsZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGJ1dHRvbkVsZW1lbnRzLmlubmVyKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpRWxlbWVudC5yZW1vdmVEYXRhKCJidXR0b25FbGVtZW50cyIpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9KTsKfSkoYW5ndWxhcik7CihmdW5jdGlvbiAoYW5ndWxhcikgewogICAgLy8gUGF0Y2ggZm9yIG5nLXN3aXRjaCB0byBmaXJlIGFuIGV2ZW50IHdoZW5ldmVyIHRoZSBjaGlsZHJlbiBjaGFuZ2UuCgogICAgdmFyIG5nID0gYW5ndWxhci5tb2R1bGUoIm5nIik7CiAgICBuZy5kaXJlY3RpdmUoIm5nU3dpdGNoIiwKICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICByZXN0cmljdDonRUEnLAogICAgICAgICAgICAgICAgY29tcGlsZTpmdW5jdGlvbiAoZWxlbWVudCwgYXR0cikgewogICAgICAgICAgICAgICAgICAgIHZhciB3YXRjaEV4cHIgPSBhdHRyLm5nU3dpdGNoIHx8IGF0dHIub247CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2god2F0Y2hFeHByLCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudHJpZ2dlcigiJGNoaWxkcmVuQ2hhbmdlZCIpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgIH0pOwp9KShhbmd1bGFyKTsKKGZ1bmN0aW9uIChhbmd1bGFyKSB7CiAgICAvLyBQYXRjaCBmb3IgbmctaW5jbHVkZSB0byBmaXJlIGFuIGV2ZW50IHdoZW5ldmVyIHRoZSBjaGlsZHJlbiBjaGFuZ2UuCgogICAgdmFyIG5nID0gYW5ndWxhci5tb2R1bGUoIm5nIik7CiAgICBuZy5kaXJlY3RpdmUoIm5nSW5jbHVkZSIsCiAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcmVzdHJpY3Q6J0VDQScsCiAgICAgICAgICAgICAgICBjb21waWxlOmZ1bmN0aW9uIChlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNyY0V4cCA9IGF0dHIubmdJbmNsdWRlIHx8IGF0dHIuc3JjOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKHNyY0V4cCwgZnVuY3Rpb24gKHNyYykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50cmlnZ2VyKCIkY2hpbGRyZW5DaGFuZ2VkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kb24oIiRpbmNsdWRlQ29udGVudExvYWRlZCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50cmlnZ2VyKCIkY2hpbGRyZW5DaGFuZ2VkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgfSk7Cn0pKGFuZ3VsYXIpOwooZnVuY3Rpb24gKCQsIGFuZ3VsYXIpIHsKICAgIHZhciBtb2QgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKCiAgICBmdW5jdGlvbiBpbnB1dERpcmVjdGl2ZVBhdGNoKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlc3RyaWN0OidFJywKICAgICAgICAgICAgcmVxdWlyZTonP25nTW9kZWwnLAogICAgICAgICAgICBjb21waWxlOmZ1bmN0aW9uICh0RWxlbWVudCwgdEF0dHJzKSB7CiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHRFbGVtZW50LmF0dHIoJ3R5cGUnKTsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcHJlOmZ1bmN0aW9uIChzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY3RybCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWN0cmwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuVG9FdmVudHMgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdkYXRlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQW5ndWxhciBiaW5kcyB0byB0aGUgaW5wdXQgb3Iga2V5ZG93bitjaGFuZ2UgZXZlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCBkYXRlIGlucHV0cyBvbiBJT1M1IGRvIG5vdCBmaXJlIGFueSBvZiB0aG9zZSAob25seSB0aGUgYmx1ciBldmVudCkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWUgaW9zNSBidWcgVE9ETwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuVG9FdmVudHMucHVzaCgiYmx1ciIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsd2F5cyBiaW5kIHRvIHRoZSBjaGFuZ2UgZXZlbnQsIGlmIGFuZ3VsYXIgd291bGQgb25seSBsaXN0ZW4gdG8gdGhlICJpbnB1dCIgZXZlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5lZWRlZCBhcyBqcW0gb2Z0ZW4gZmlyZXMgY2hhbmdlIGV2ZW50cyB3aGVuIHRoZSBpbnB1dCB3aWRnZXRzIGNoYW5nZS4uLgogICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5Ub0V2ZW50cy5wdXNoKCJjaGFuZ2UiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYmluZCA9IGlFbGVtZW50LmJpbmQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGlFbGVtZW50LmJpbmQgPSBmdW5jdGlvbiAoZXZlbnRzLCBjYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50cy5pbmRleE9mKCdpbnB1dCcpICE9PSAtMSB8fCBldmVudHMuaW5kZXhPZignY2hhbmdlJykgIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPGxpc3RlblRvRXZlbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGxpc3RlblRvRXZlbnRzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmluZGV4T2YoZXZlbnQpPT09LTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cys9IiAiK2V2ZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9iaW5kLmNhbGwodGhpcywgZXZlbnRzLCBjYWxsYmFjayk7CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgbW9kLmRpcmVjdGl2ZSgiaW5wdXQiLCBpbnB1dERpcmVjdGl2ZVBhdGNoKTsKICAgIG1vZC5kaXJlY3RpdmUoInRleHRhcmVhIiwgaW5wdXREaXJlY3RpdmVQYXRjaCk7Cn0pKCQsIGFuZ3VsYXIpOwoKKGZ1bmN0aW9uIChhbmd1bGFyKSB7CiAgICAvKgogICAgICogRGVmaW5lcyB0aGUgbmc6aWYgdGFnLiBUaGlzIGlzIHVzZWZ1bCBpZiBqcXVlcnkgbW9iaWxlIGRvZXMgbm90IGFsbG93CiAgICAgKiBhbiBuZy1zd2l0Y2ggZWxlbWVudCBpbiB0aGUgZG9tLCBlLmcuIGJldHdlZW4gdWwgYW5kIGxpLgogICAgICovCiAgICB2YXIgbmdJZkRpcmVjdGl2ZSA9IHsKICAgICAgICB0cmFuc2NsdWRlOidlbGVtZW50JywKICAgICAgICBwcmlvcml0eToxMDAwLAogICAgICAgIHRlcm1pbmFsOnRydWUsCiAgICAgICAgY29tcGlsZTpmdW5jdGlvbiAoZWxlbWVudCwgYXR0ciwgbGlua2VyKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGl0ZXJTdGFydEVsZW1lbnQsIGF0dHIpIHsKICAgICAgICAgICAgICAgIGl0ZXJTdGFydEVsZW1lbnRbMF0uZG9Ob3RNb3ZlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHZhciBleHByZXNzaW9uID0gYXR0ci5uZ21JZjsKICAgICAgICAgICAgICAgIHZhciBsYXN0RWxlbWVudDsKICAgICAgICAgICAgICAgIHZhciBsYXN0U2NvcGU7CiAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goZXhwcmVzc2lvbiwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RFbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50LnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChsYXN0U2NvcGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNjb3BlLiRkZXN0cm95KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTY29wZSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2NvcGUgPSBzY29wZS4kbmV3KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtlcihsYXN0U2NvcGUsIGZ1bmN0aW9uIChjbG9uZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBjbG9uZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJTdGFydEVsZW1lbnQuYWZ0ZXIoY2xvbmUpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogbmVlZCB0byBiZSBwYXJlbnQoKSBhcyBqcXVlcnkgY2Fubm90IHRyaWdnZXIgZXZlbnRzIG9uIGNvbW1lbnRzCiAgICAgICAgICAgICAgICAgICAgLy8gKGFuZ3VsYXIgY3JlYXRlcyBhIGNvbW1lbnQgbm9kZSB3aGVuIHVzaW5nIHRyYW5zY2x1c2lvbiwgYXMgbmctcmVwZWF0IGRvZXMpLgogICAgICAgICAgICAgICAgICAgIGl0ZXJTdGFydEVsZW1lbnQucGFyZW50KCkudHJpZ2dlcigiJGNoaWxkcmVuQ2hhbmdlZCIpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgfTsKICAgIHZhciBuZyA9IGFuZ3VsYXIubW9kdWxlKCduZycpOwogICAgbmcuZGlyZWN0aXZlKCduZ21JZicsIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gbmdJZkRpcmVjdGl2ZTsKICAgIH0pOwp9KShhbmd1bGFyKTsKCihmdW5jdGlvbiAoYW5ndWxhcikgewogICAgdmFyIG1vZCA9IGFuZ3VsYXIubW9kdWxlKCduZycpOwoKCiAgICAvLyBTZWUgaHR0cDovL2pxdWVyeW1vYmlsZS5jb20vZGVtb3MvMS4yLjAvZG9jcy9hcGkvZXZlbnRzLmh0bWwKICAgIHZhciBqcW1FdmVudHMgPSBbJ3RhcCcsICd0YXBob2xkJywgJ3N3aXBlJywgJ3N3aXBlcmlnaHQnLCAnc3dpcGVsZWZ0JywgJ3Ztb3VzZW92ZXInLAogICAgICAgICd2bW91c2VvdXQnLAogICAgICAgICd2bW91c2Vkb3duJywKICAgICAgICAndm1vdXNlbW92ZScsCiAgICAgICAgJ3Ztb3VzZXVwJywKICAgICAgICAndmNsaWNrJywKICAgICAgICAndm1vdXNlY2FuY2VsJywKICAgICAgICAnb3JpZW50YXRpb25jaGFuZ2UnLAogICAgICAgICdzY3JvbGxzdGFydCcsCiAgICAgICAgJ3Njcm9sbGVuZCcsCiAgICAgICAgJ3BhZ2ViZWZvcmVzaG93JywKICAgICAgICAncGFnZWJlZm9yZWhpZGUnLAogICAgICAgICdwYWdlc2hvdycsCiAgICAgICAgJ3BhZ2VoaWRlJwogICAgXTsKICAgIHZhciBuZ0V2ZW50cyA9IHsncGFnZWJlZm9yZXNob3cnOiB0cnVlfTsKICAgIHZhciBldmVudCwgZGlyZWN0aXZlLCBpOwogICAgZm9yIChpPTA7IGk8anFtRXZlbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgZXZlbnQgPSBqcW1FdmVudHNbaV07CiAgICAgICAgZGlyZWN0aXZlID0gJ25nbScgKyBldmVudC5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIGV2ZW50LnN1YnN0cmluZygxKTsKICAgICAgICBjcmVhdGVFdmVudERpcmVjdGl2ZShkaXJlY3RpdmUsIGV2ZW50LCBuZ0V2ZW50c1tldmVudF0pOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRIYW5kbGVyKHNjb3BlLCAkcGFyc2UsIGVsZW1lbnQsIGV2ZW50VHlwZSwgbmdFdmVudCwgaGFuZGxlcikgewogICAgICAgIHZhciBmbiA9ICRwYXJzZShoYW5kbGVyKTsKICAgICAgICBpZiAobmdFdmVudCkgewogICAgICAgICAgICBzY29wZS4kb24oZXZlbnRUeXBlLCBmdW5jdGlvbihuZ0V2ZW50LCBqcUV2ZW50KSB7CiAgICAgICAgICAgICAgICBmbihuZ0V2ZW50LmN1cnJlbnRTY29wZSwgeyRldmVudDpqcUV2ZW50fSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGVsZW1lbnQuYmluZChldmVudFR5cGUsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGZuKHNjb3BlLCB7JGV2ZW50OmV2ZW50fSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChldmVudFR5cGUuY2hhckF0KDApID09PSAndicpIHsKICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIHRvIHByZXZlbnQgYSBzZWNvbmQKICAgICAgICAgICAgICAgICAgICAvLyBjbGljayBldmVudCwgc2VlCiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbW9iaWxlL2lzc3Vlcy8xNzg3CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50RGlyZWN0aXZlKGRpcmVjdGl2ZSwgZXZlbnRUeXBlLCBuZ0V2ZW50KSB7CiAgICAgICAgbW9kLmRpcmVjdGl2ZShkaXJlY3RpdmUsIFsnJHBhcnNlJywgZnVuY3Rpb24gKCRwYXJzZSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycykgewogICAgICAgICAgICAgICAgdmFyIGV2ZW50SGFuZGxlciA9IGF0dHJzW2RpcmVjdGl2ZV07CiAgICAgICAgICAgICAgICByZWdpc3RlckV2ZW50SGFuZGxlcihzY29wZSwgJHBhcnNlLCBlbGVtZW50LCBldmVudFR5cGUsIG5nRXZlbnQsIGV2ZW50SGFuZGxlcik7CiAgICAgICAgICAgIH07CiAgICAgICAgfV0pOwogICAgfQoKfSkoYW5ndWxhcik7CihmdW5jdGlvbihhbmd1bGFyKSB7CiAgICB2YXIgc3RvcmFnZU5hbWUgPSAnJCRzaGFyZWRDb250cm9sbGVycyc7CgogICAgZnVuY3Rpb24gc3RvcmFnZShyb290U2NvcGUpIHsKICAgICAgICByZXR1cm4gcm9vdFNjb3BlW3N0b3JhZ2VOYW1lXSA9IHJvb3RTY29wZVtzdG9yYWdlTmFtZV0gfHwge307CiAgICB9CgogICAgZnVuY3Rpb24gc2hhcmVkQ3RybChyb290U2NvcGUsIGNvbnRyb2xsZXJOYW1lLCAkY29udHJvbGxlciwgdXNlZEluUGFnZSkgewogICAgICAgIHZhciBzdG9yZSA9IHN0b3JhZ2Uocm9vdFNjb3BlKTsKICAgICAgICB2YXIgc2NvcGVJbnN0YW5jZSA9IHN0b3JlW2NvbnRyb2xsZXJOYW1lXTsKICAgICAgICBpZiAoIXNjb3BlSW5zdGFuY2UpIHsKICAgICAgICAgICAgc2NvcGVJbnN0YW5jZSA9IHJvb3RTY29wZS4kbmV3KCk7CiAgICAgICAgICAgICRjb250cm9sbGVyKGNvbnRyb2xsZXJOYW1lLCB7JHNjb3BlOiBzY29wZUluc3RhbmNlfSk7CiAgICAgICAgICAgIHN0b3JlW2NvbnRyb2xsZXJOYW1lXSA9IHNjb3BlSW5zdGFuY2U7CiAgICAgICAgICAgIHNjb3BlSW5zdGFuY2UuJCRyZWZlcmVuY2VDb3VudCA9IDA7CiAgICAgICAgfQogICAgICAgIHNjb3BlSW5zdGFuY2UuJCRyZWZlcmVuY2VDb3VudCsrOwogICAgICAgIHVzZWRJblBhZ2UuYmluZCgiJGRlc3Ryb3kiLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgc2NvcGVJbnN0YW5jZS4kJHJlZmVyZW5jZUNvdW50LS07CiAgICAgICAgICAgIGlmIChzY29wZUluc3RhbmNlLiQkcmVmZXJlbmNlQ291bnQ9PT0wKSB7CiAgICAgICAgICAgICAgICBzY29wZUluc3RhbmNlLiRkZXN0cm95KCk7CiAgICAgICAgICAgICAgICBkZWxldGUgc3RvcmVbY29udHJvbGxlck5hbWVdOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHNjb3BlSW5zdGFuY2U7CiAgICB9CgogICAgZnVuY3Rpb24gcGFyc2VTaGFyZWRDb250cm9sbGVyc0V4cHJlc3Npb24oZXhwcmVzc2lvbikgewogICAgICAgIHZhciBwYXR0ZXJuID0gLyhbXlxzLDpdKylccyo6XHMqKFteXHMsOl0rKS9nOwogICAgICAgIHZhciBtYXRjaDsKICAgICAgICB2YXIgaGFzRGF0YSA9IGZhbHNlOwogICAgICAgIHZhciBjb250cm9sbGVycyA9IHt9OwogICAgICAgIHdoaWxlIChtYXRjaCA9IHBhdHRlcm4uZXhlYyhleHByZXNzaW9uKSkgewogICAgICAgICAgICBoYXNEYXRhID0gdHJ1ZTsKICAgICAgICAgICAgY29udHJvbGxlcnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07CiAgICAgICAgfQogICAgICAgIGlmICghaGFzRGF0YSkgewogICAgICAgICAgICB0aHJvdyAiRXhwcmVzc2lvbiAiICsgZXhwcmVzc2lvbiArICIgbmVlZHMgdG8gaGF2ZSB0aGUgc3ludGF4IDxuYW1lPjo8Y29udHJvbGxlcj4sLi4uIjsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXJzOwogICAgfQoKICAgIHZhciBtb2QgPSBhbmd1bGFyLm1vZHVsZSgnbmcnKTsKICAgIG1vZC5kaXJlY3RpdmUoJ25nbVNoYXJlZENvbnRyb2xsZXInLCBbJyRjb250cm9sbGVyJywgZnVuY3Rpb24oJGNvbnRyb2xsZXIpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBzY29wZTogdHJ1ZSwKICAgICAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHsKICAgICAgICAgICAgICAgIHZhciBleHByZXNzaW9uID0gYXR0cnMubmdtU2hhcmVkQ29udHJvbGxlcjsKICAgICAgICAgICAgICAgIHZhciBjb250cm9sbGVycyA9IHBhcnNlU2hhcmVkQ29udHJvbGxlcnNFeHByZXNzaW9uKGV4cHJlc3Npb24pOwogICAgICAgICAgICAgICAgdmFyIHByZUxpbmsgPSBmdW5jdGlvbihzY29wZSkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gY29udHJvbGxlcnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVbbmFtZV0gPSBzaGFyZWRDdHJsKHNjb3BlLiRyb290LCBjb250cm9sbGVyc1tuYW1lXSwgJGNvbnRyb2xsZXIsIGVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHByZTogcHJlTGluawogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9XSk7Cn0pKGFuZ3VsYXIpOwooZnVuY3Rpb24gKCQsIGFuZ3VsYXIpIHsKCiAgICBmdW5jdGlvbiB3YWl0RGlhbG9nRmFjdG9yeShyb290U2NvcGUpIHsKCiAgICAgICAgdmFyIHNob3dDYWxscyA9IFtdOwoKICAgICAgICBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7CiAgICAgICAgICAgIHZhciBsYXN0Q2FsbCA9IHNob3dDYWxsc1tzaG93Q2FsbHMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgIGlmIChsYXN0Q2FsbC5jYWxsYmFjaykgewogICAgICAgICAgICAgICAgcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgbGFzdENhbGwuY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIFRoaXMgaXMgcmVxdWlyZWQgdG8gcHJldmVudCBhIHNlY29uZAogICAgICAgICAgICAvLyBjbGljayBldmVudCwgc2VlCiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1vYmlsZS9pc3N1ZXMvMTc4NwogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGxvYWREaWFsb2c7CgogICAgICAgICQoZG9jdW1lbnQpLmRlbGVnYXRlKCIudWktbG9hZGVyIiwgInZjbGljayIsIG9uQ2xpY2spOwoKICAgICAgICBpZiAoISQubW9iaWxlLmxvYWRlci5wcm90b3R5cGUub3B0aW9ucy50ZXh0V2l0aENhbmNlbCkgewogICAgICAgICAgICAkLm1vYmlsZS5sb2FkZXIucHJvdG90eXBlLm9wdGlvbnMudGV4dFdpdGhDYW5jZWwgPSAnTG9hZGluZy4gQ2xpY2sgdG8gY2FuY2VsLic7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1cGRhdGVVaSgpIHsKICAgICAgICAgICAgaWYgKCEkLm1vYmlsZS5maXJzdFBhZ2UpIHsKICAgICAgICAgICAgICAgIHJvb3RTY29wZS4kb24oImpxbUluaXQiLCB1cGRhdGVVaSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHNob3dDYWxscy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICB2YXIgbGFzdENhbGwgPSBzaG93Q2FsbHNbc2hvd0NhbGxzLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgdmFyIG1zZyA9IGxhc3RDYWxsLm1zZzsKICAgICAgICAgICAgICAgIGlmIChtc2cpIHsKICAgICAgICAgICAgICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdzaG93Jywge3RleHQ6bXNnLCB0ZXh0VmlzaWJsZTohIW1zZ30pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdzaG93Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdoaWRlJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIGpxdWVyeSBtb2JpbGUgaGlkZXMgdGhlIHdhaXQgZGlhbG9nIHdoZW4gcGFnZXMgYXJlIHRyYW5zaXRpb25lZC4KICAgICAgICAgKiBUaGlzIGltbWVkaWF0ZWx5IGNsb3NlcyB3YWl0IGRpYWxvZ3MgdGhhdCBhcmUgb3BlbmVkIGluIHRoZSBwYWdlYmVmb3Jlc2hvdyBldmVudC4KICAgICAgICAgKi8KICAgICAgICAkKGRvY3VtZW50KS5vbigncGFnZXNob3cnLCAnZGl2JywgZnVuY3Rpb24gKGV2ZW50LCB1aSkgewogICAgICAgICAgICB1cGRhdGVVaSgpOwogICAgICAgIH0pOwoKICAgICAgICAvKioKICAgICAgICAgKgogICAgICAgICAqIEBwYXJhbSBtc2cgKG9wdGlvbmFsKQogICAgICAgICAqIEBwYXJhbSB0YXBDYWxsYmFjayAob3B0aW9uYWwpCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc2hvdygpIHsKICAgICAgICAgICAgdmFyIG1zZywgdGFwQ2FsbGJhY2s7CiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgbXNnID0gYXJndW1lbnRzWzBdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICB0YXBDYWxsYmFjayA9IGFyZ3VtZW50c1swXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgdGFwQ2FsbGJhY2sgPSBhcmd1bWVudHNbMV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNob3dDYWxscy5wdXNoKHttc2c6bXNnLCBjYWxsYmFjazp0YXBDYWxsYmFja30pOwogICAgICAgICAgICB1cGRhdGVVaSgpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaGlkZSgpIHsKICAgICAgICAgICAgc2hvd0NhbGxzLnBvcCgpOwogICAgICAgICAgICB1cGRhdGVVaSgpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYWx3YXlzKHByb21pc2UsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHByb21pc2UudGhlbihjYWxsYmFjaywgY2FsbGJhY2spOwogICAgICAgIH0KCiAgICAgICAgLyoqCiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0gcHJvbWlzZQogICAgICAgICAqIEBwYXJhbSBtc2cgKG9wdGlvbmFsKQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHdhaXRGb3IocHJvbWlzZSwgbXNnKSB7CiAgICAgICAgICAgIHNob3cobXNnKTsKICAgICAgICAgICAgYWx3YXlzKHByb21pc2UsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGhpZGUoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKgogICAgICAgICAqIEBwYXJhbSBkZWZlcnJlZAogICAgICAgICAqIEBwYXJhbSBjYW5jZWxEYXRhCiAgICAgICAgICogQHBhcmFtIG1zZyAob3B0aW9uYWwpCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gd2FpdEZvcldpdGhDYW5jZWwoZGVmZXJyZWQsIGNhbmNlbERhdGEsIG1zZykgewogICAgICAgICAgICBpZiAoIW1zZykgewogICAgICAgICAgICAgICAgbXNnID0gJC5tb2JpbGUubG9hZGVyLnByb3RvdHlwZS5vcHRpb25zLnRleHRXaXRoQ2FuY2VsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNob3cobXNnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoY2FuY2VsRGF0YSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBhbHdheXMoZGVmZXJyZWQucHJvbWlzZSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaGlkZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHNob3c6c2hvdywKICAgICAgICAgICAgaGlkZTpoaWRlLAogICAgICAgICAgICB3YWl0Rm9yOndhaXRGb3IsCiAgICAgICAgICAgIHdhaXRGb3JXaXRoQ2FuY2VsOndhaXRGb3JXaXRoQ2FuY2VsCiAgICAgICAgfTsKICAgIH0KCiAgICB2YXIgbW9kID0gYW5ndWxhci5tb2R1bGUoJ25nJyk7CiAgICBtb2QuZmFjdG9yeSgnJHdhaXREaWFsb2cnLCBbJyRyb290U2NvcGUnLCB3YWl0RGlhbG9nRmFjdG9yeV0pOwp9KSgkLCBhbmd1bGFyKTsKKGZ1bmN0aW9uICgkLCBhbmd1bGFyKSB7CgogICAgZnVuY3Rpb24gcGFnZWRMaXN0RmlsdGVyRmFjdG9yeShkZWZhdWx0TGlzdFBhZ2VTaXplKSB7CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAobGlzdCwgc3RhdGVQcm9wZXJ0eSwgb3BlcmF0b3IpIHsKICAgICAgICAgICAgaWYgKCFsaXN0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIXN0YXRlUHJvcGVydHkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTWlzc2luZyBwYWdlciBwcm9wZXJ0eSIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBzY29wZSA9IHRoaXM7CiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHNjb3BlW3N0YXRlUHJvcGVydHldOwogICAgICAgICAgICBpZiAoIXN0YXRlKSB7CiAgICAgICAgICAgICAgICBzdGF0ZSA9IHNjb3BlW3N0YXRlUHJvcGVydHldID0gewogICAgICAgICAgICAgICAgICAgIGxvYWRNb3JlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkTW9yZUNhbGxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcGFnZVNpemUgPSBvcGVyYXRvciA/ICgrb3BlcmF0b3IpIDogZGVmYXVsdExpc3RQYWdlU2l6ZTsKICAgICAgICAgICAgdmFyIGVuZEluZGV4ID0gc3RhdGUuZW5kSW5kZXggfHwgcGFnZVNpemU7CiAgICAgICAgICAgIGlmIChzdGF0ZS5sb2FkTW9yZUNhbGxlZCkgewogICAgICAgICAgICAgICAgc3RhdGUubG9hZE1vcmVDYWxsZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGVuZEluZGV4ICs9IHBhZ2VTaXplOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChlbmRJbmRleCA+PSBsaXN0Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgZW5kSW5kZXggPSBsaXN0Lmxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZW5kSW5kZXggPCBwYWdlU2l6ZSkgewogICAgICAgICAgICAgICAgZW5kSW5kZXggPSBwYWdlU2l6ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzdGF0ZS5oYXNNb3JlID0gZW5kSW5kZXggPCBsaXN0Lmxlbmd0aDsKICAgICAgICAgICAgc3RhdGUuZW5kSW5kZXggPSBlbmRJbmRleDsKICAgICAgICAgICAgc3RhdGUuY2FjaGUgPSBsaXN0LnNsaWNlKDAsIGVuZEluZGV4KTsKICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmNhY2hlOwogICAgICAgIH07CiAgICB9CgogICAgcGFnZWRMaXN0RmlsdGVyRmFjdG9yeS4kaW5qZWN0ID0gWydkZWZhdWx0TGlzdFBhZ2VTaXplJ107CiAgICB2YXIgbW9kID0gYW5ndWxhci5tb2R1bGUoWyduZyddKTsKICAgIG1vZC5jb25zdGFudCgnZGVmYXVsdExpc3RQYWdlU2l6ZScsIDEwKTsKICAgIG1vZC5maWx0ZXIoJ3BhZ2VkJywgcGFnZWRMaXN0RmlsdGVyRmFjdG9yeSk7Cn0pKCQsIGFuZ3VsYXIpOwp9KTs=",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 06:46:01 GMT",
                    "Content-Length": "100370",
                    "Date": "Fri, 07 Nov 2014 06:46:02 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}