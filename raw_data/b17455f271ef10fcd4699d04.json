{
    "url": "http://localhost:9999/bitovi/canjs.com/amd-dev/can/route/pushstate.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.location.hash</b> and written to <b>window.history.pushState()</b> via the following statements:<ul><li>path += window.location.hash;</li><li>window.history.pushState(null, null, can.route._call(\"root\") + path);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/bitovi/canjs.com/amd-dev/can/route/pushstate.js",
                "path": "/bitovi/canjs.com/amd-dev/can/route/pushstate.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9iaXRvdmkvY2FuanMuY29tL2FtZC1kZXYvY2FuL3JvdXRlL3B1c2hzdGF0ZS5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNTc2Nw0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KRGF0ZTogVGh1LCAwNiBOb3YgMjAxNCAxNDozNzoyNSBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMDYgTm92IDIwMTQgMTQ6Mzc6MjEgR01UDQoNCi8qIQogKiBDYW5KUyAtIDIuMS4zCiAqIGh0dHA6Ly9jYW5qcy51cy8KICogQ29weXJpZ2h0IChjKSAyMDE0IEJpdG92aQogKiBNb24sIDI1IEF1ZyAyMDE0IDIxOjUxOjI5IEdNVAogKiBMaWNlbnNlZCBNSVQKICogSW5jbHVkZXM6IENhbkpTIGRlZmF1bHQgYnVpbGQKICogRG93bmxvYWQgZnJvbTogaHR0cDovL2NhbmpzLnVzLwogKi8KZGVmaW5lKFsiY2FuL3V0aWwvbGlicmFyeSIsICJjYW4vcm91dGUiXSwgZnVuY3Rpb24gKGNhbikgewoJInVzZSBzdHJpY3QiOwoKCS8vIEluaXRpYWxpemUgcGx1Z2luIG9ubHkgaWYgYnJvd3NlciBzdXBwb3J0cyBwdXNoc3RhdGUuCglpZiAod2luZG93Lmhpc3RvcnkgJiYgaGlzdG9yeS5wdXNoU3RhdGUpIHsKCgkJLy8gUmVnaXN0ZXJzIGl0c2VsZiB3aXRoaW4gYGNhbi5yb3V0ZS5iaW5kaW5nc2AuCgkJY2FuLnJvdXRlLmJpbmRpbmdzLnB1c2hzdGF0ZSA9IHsKCQkJLyoqCgkJCSAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBjYW4ucm91dGUucHVzaHN0YXRlLnJvb3QKCQkJICogQHBhcmVudCBjYW4ucm91dGUucHVzaHN0YXRlCgkJCSAqCgkJCSAqIEBkZXNjcmlwdGlvbiBDb25maWd1cmUgdGhlIGJhc2UgdXJsIHRoYXQgd2lsbCBub3QgYmUgbW9kaWZpZWQuCgkJCSAqCgkJCSAqIEBvcHRpb24ge1N0cmluZ30gUmVwcmVzZW50cyB0aGUgYmFzZSB1cmwgdGhhdCBwdXNoc3RhdGUgd2lsbCBwcmVwZW5kIHRvIGFsbAoJCQkgKiByb3V0ZXMuICBgcm9vdGAgZGVmYXVsdHMgdG86IGAiLyJgLgoJCQkgKgoJCQkgKiBAYm9keQoJCQkgKgoJCQkgKiAjIyBVc2UKCQkJICoKCQkJICogQnkgZGVmYXVsdCwgYSByb3V0ZSBsaWtlOgoJCQkgKgoJCQkgKiAgICAgY2FuLnJvdXRlKCI6dHlwZS86aWQiKQoJCQkgKgoJCQkgKiBNYXRjaGVzIHVybHMgbGlrZToKCQkJICoKCQkJICogICAgIGh0dHA6Ly9kb21haW4uY29tL2NvbnRhY3QvNQoJCQkgKgoJCQkgKiBCdXQgc29tZXRpbWVzLCB5b3Ugb25seSB3YW50IHRvIG1hdGNoIHBhZ2VzIHdpdGhpbiBhIGNlcnRhaW4gZGlyZWN0b3J5LiAgRm9yCgkJCSAqIGV4YW1wbGUsIGFuIGFwcGxpY2F0aW9uIHRoYXQgaXMgYSBmaWxlbWFuYWdlci4gIFlvdSBtaWdodCB3YW50IHRvCgkJCSAqIHNwZWNpZnkgcm9vdCBhbmQgcm91dGVzIGxpa2U6CgkJCSAqCgkJCSAqICAgICBjYW4ucm91dGUucHVzaHN0YXRlLnJvb3QgPSAiL2ZpbGVtYW5hZ2VyLyIKCQkJICogICAgIGNhbi5yb3V0ZSgiZmlsZS06ZmlsZUlkIik7CgkJCSAqICAgICBjYW4ucm91dGUoImZvbGRlci06ZmlsZUlkIikKCQkJICoKCQkJICogV2hpY2ggbWF0Y2hlcyB1cmxzIGxpa2U6CgkJCSAqCgkJCSAqICAgICBodHRwOi8vZG9tYWluLmNvbS9maWxlbWFuYWdlci9maWxlLTM0MjM0CgkJCSAqCgkJCSAqLwoKCQkJLy8gU3RhcnQgb2YgYGxvY2F0aW9uLnBhdGhuYW1lYCBpcyB0aGUgcm9vdC4KCQkJLy8gKENhbiBiZSBjb25maWd1cmVkIHZpYSBgY2FuLnJvdXRlLmJpbmRpbmdzLnB1c2hzdGF0ZS5yb290YCkKCQkJcm9vdDogIi8iLAoJCQkvLyBkb24ndCBncmVlZGlseSBtYXRjaCBzbGFzaGVzIGluIHJvdXRpbmcgcnVsZXMKCQkJbWF0Y2hTbGFzaGVzOiBmYWxzZSwKCQkJcGFyYW1zTWF0Y2hlcjogL15cPyg/OltePV0rPVteJl0qJikqW149XSs9W14mXSovLAoJCQlxdWVyeVNlcGFyYXRvcjogJz8nLAoKCQkJLy8gIyMgYmluZAoKCQkJLy8gSW50ZXJjZXB0cyBjbGlja3Mgb24gYDxhPmAgZWxlbWVudHMgYW5kIHJld3JpdGVzIG9yaWdpbmFsIGBoaXN0b3J5YCBtZXRob2RzLgoJCQliaW5kOiBmdW5jdGlvbiAoKSB7CgkJCQkvLyBJbnRlcmNlcHQgcm91dGFibGUgbGlua3MuCgkJCQljYW4uZGVsZWdhdGUuY2FsbChjYW4uJChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLCAnYScsICdjbGljaycsIGFuY2hvckNsaWNrSGFuZGxlcik7CgoJCQkJLy8gUmV3cml0ZXMgb3JpZ2luYWwgYHB1c2hTdGF0ZWAvYHJlcGxhY2VTdGF0ZWAgbWV0aG9kcyBvbiBgaGlzdG9yeWAgYW5kIGtlZXBzIHBvaW50ZXIgdG8gb3JpZ2luYWwgbWV0aG9kcwoJCQkJY2FuLmVhY2gobWV0aG9kc1RvT3ZlcndyaXRlLCBmdW5jdGlvbiAobWV0aG9kKSB7CgkJCQkJb3JpZ2luYWxNZXRob2RzW21ldGhvZF0gPSB3aW5kb3cuaGlzdG9yeVttZXRob2RdOwoJCQkJCXdpbmRvdy5oaXN0b3J5W21ldGhvZF0gPSBmdW5jdGlvbiAoc3RhdGUsIHRpdGxlLCB1cmwpIHsKCQkJCQkJLy8gQXZvaWQgZG91YmxlZCBoaXN0b3J5IHN0YXRlcyAod2l0aCBwdXNoU3RhdGUpLgoJCQkJCQl2YXIgYWJzb2x1dGUgPSB1cmwuaW5kZXhPZigiaHR0cCIpID09PSAwOwoJCQkJCQl2YXIgc2VhcmNoSGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyB3aW5kb3cubG9jYXRpb24uaGFzaDsKCQkJCQkJLy8gSWYgdXJsIGRpZmZlcnMgZnJvbSBjdXJyZW50IGNhbGwgb3JpZ2luYWwgaGlzdG95IG1ldGhvZCBhbmQgdXBkYXRlIGBjYW4ucm91dGVgIHN0YXRlLgoJCQkJCQlpZiAoKCFhYnNvbHV0ZSAmJiB1cmwgIT09IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHNlYXJjaEhhc2gpIHx8IChhYnNvbHV0ZSAmJiB1cmwgIT09IHdpbmRvdy5sb2NhdGlvbi5ocmVmICsgc2VhcmNoSGFzaCkpIHsKCQkJCQkJCW9yaWdpbmFsTWV0aG9kc1ttZXRob2RdLmFwcGx5KHdpbmRvdy5oaXN0b3J5LCBhcmd1bWVudHMpOwoJCQkJCQkJY2FuLnJvdXRlLnNldFN0YXRlKCk7CgkJCQkJCX0KCQkJCQl9OwoJCQkJfSk7CgoJCQkJLy8gQmluZCB0byBgcG9wc3RhdGVgIGV2ZW50LCBmaXJlcyBvbiBiYWNrL2ZvcndhcmQuCgkJCQljYW4uYmluZC5jYWxsKHdpbmRvdywgJ3BvcHN0YXRlJywgY2FuLnJvdXRlLnNldFN0YXRlKTsKCQkJfSwKCgkJCS8vICMjIHVuYmluZAoKCQkJLy8gVW5iaW5kcyBhbmQgcmVzdG9yZXMgb3JpZ2luYWwgYGhpc3RvcnlgIG1ldGhvZHMKCQkJdW5iaW5kOiBmdW5jdGlvbiAoKSB7CgkJCQljYW4udW5kZWxlZ2F0ZS5jYWxsKGNhbi4kKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCksICdjbGljaycsICdhJywgYW5jaG9yQ2xpY2tIYW5kbGVyKTsKCgkJCQljYW4uZWFjaChtZXRob2RzVG9PdmVyd3JpdGUsIGZ1bmN0aW9uIChtZXRob2QpIHsKCQkJCQl3aW5kb3cuaGlzdG9yeVttZXRob2RdID0gb3JpZ2luYWxNZXRob2RzW21ldGhvZF07CgkJCQl9KTsKCQkJCWNhbi51bmJpbmQuY2FsbCh3aW5kb3csICdwb3BzdGF0ZScsIGNhbi5yb3V0ZS5zZXRTdGF0ZSk7CgkJCX0sCgoJCQkvLyAjIyBtYXRjaGluZ1BhcnRPZlVSTAoKCQkJLy8gUmV0dXJucyBtYXRjaGluZyBwYXJ0IG9mIHVybCB3aXRob3V0IHJvb3QuCgkJCW1hdGNoaW5nUGFydE9mVVJMOiBmdW5jdGlvbiAoKSB7CgkJCQl2YXIgcm9vdCA9IGNsZWFuUm9vdCgpLAoJCQkJCWxvYyA9IChsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCksCgkJCQkJaW5kZXggPSBsb2MuaW5kZXhPZihyb290KTsKCgkJCQlyZXR1cm4gbG9jLnN1YnN0cihpbmRleCArIHJvb3QubGVuZ3RoKTsKCQkJfSwKCgkJCS8vICMjIHNldFVSTAoKCQkJLy8gVXBkYXRlcyBVUkwgYnkgY2FsbGluZyBgcHVzaFN0YXRlYC4KCQkJc2V0VVJMOiBmdW5jdGlvbiAocGF0aCkgewoJCQkJLy8gS2VlcHMgaGFzaCBpZiBub3QgaW4gcGF0aC4KCQkJCWlmIChpbmNsdWRlSGFzaCAmJiBwYXRoLmluZGV4T2YoIiMiKSA9PT0gLTEgJiYgd2luZG93LmxvY2F0aW9uLmhhc2gpIHsKCQkJCQlwYXRoICs9IHdpbmRvdy5sb2NhdGlvbi5oYXNoOwoJCQkJfQoJCQkJd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGNhbi5yb3V0ZS5fY2FsbCgicm9vdCIpICsgcGF0aCk7CgkJCX0KCQl9OwoKCQkvLyAjIyBhbmNob3JDbGlja0hhbmRsZXIKCgkJLy8gSGFuZGxlciBmdW5jdGlvbiBmb3IgYGNsaWNrYCBldmVudHMuCgkJdmFyIGFuY2hvckNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7CgkJCWlmICghKGUuaXNEZWZhdWx0UHJldmVudGVkID8gZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSA6IGUuZGVmYXVsdFByZXZlbnRlZCA9PT0gdHJ1ZSkpIHsKCQkJCS8vIFlVSSBjYWxscyBiYWNrIGV2ZW50cyB0cmlnZ2VyZWQgd2l0aCB0aGlzIGFzIGEgd3JhcHBlZCBvYmplY3QuCgkJCQl2YXIgbm9kZSA9IHRoaXMuX25vZGUgfHwgdGhpczsKCQkJCS8vIEZpeCBmb3IgSUUgc2hvd2luZyBibGFuayBob3N0LCBidXQgYmxhbmsgaG9zdCBtZWFucyBjdXJyZW50IGhvc3QuCgkJCQl2YXIgbGlua3NIb3N0ID0gbm9kZS5ob3N0IHx8IHdpbmRvdy5sb2NhdGlvbi5ob3N0OwoKCQkJCS8vIElmIGxpbmsgaXMgd2l0aGluIHRoZSBzYW1lIGRvbWFpbiBhbmQgZGVzY2VuZGFudCBvZiBgcm9vdGAKCQkJCWlmICh3aW5kb3cubG9jYXRpb24uaG9zdCA9PT0gbGlua3NIb3N0KSB7CgkJCQkJdmFyIHJvb3QgPSBjbGVhblJvb3QoKTsKCQkJCQlpZiAobm9kZS5wYXRobmFtZS5pbmRleE9mKHJvb3QpID09PSAwKSB7CgoJCQkJCQkvLyBSZW1vdmVzIHJvb3QgZnJvbSB1cmwuCgkJCQkJCXZhciB1cmwgPSAobm9kZS5wYXRobmFtZSArIG5vZGUuc2VhcmNoKS5zdWJzdHIocm9vdC5sZW5ndGgpOwoJCQkJCQkvLyBJZiBhIHJvdXRlIG1hdGNoZXMgdXBkYXRlIHRoZSBkYXRhLgoJCQkJCQl2YXIgY3VyUGFyYW1zID0gY2FuLnJvdXRlLmRlcGFyYW0odXJsKTsKCQkJCQkJaWYgKGN1clBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgncm91dGUnKSkgewoJCQkJCQkJLy8gTWFrZXMgaXQgcG9zc2libGUgdG8gaGF2ZSBhIGxpbmsgd2l0aCBhIGhhc2guCgkJCQkJCQlpbmNsdWRlSGFzaCA9IHRydWU7CgkJCQkJCQl3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgbm9kZS5ocmVmKTsKCgkJCQkJCQkvLyBUZXN0IGlmIHlvdSBjYW4gcHJldmVudERlZmF1bHQKCQkJCQkJCS8vIG91ciB0ZXN0cyBjYW4ndCBjYWxsIC5jbGljaygpIGIvYyB0aGlzCgkJCQkJCQkvLyBmcmVlemVzIHBoYW50b20uCgkJCQkJCQlpZiAoZS5wcmV2ZW50RGVmYXVsdCkgewoJCQkJCQkJCWUucHJldmVudERlZmF1bHQoKTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoJCX0sCgoJCQkvLyAjIyBjbGVhblJvb3QKCgkJCS8vIEFsd2F5cyByZXR1cm5zIGNsZWFuIHJvb3QsIHdpdGhvdXQgZG9tYWluLgoJCQljbGVhblJvb3QgPSBmdW5jdGlvbiAoKSB7CgkJCQl2YXIgZG9tYWluID0gbG9jYXRpb24ucHJvdG9jb2wgKyAiLy8iICsgbG9jYXRpb24uaG9zdCwKCQkJCQlyb290ID0gY2FuLnJvdXRlLl9jYWxsKCJyb290IiksCgkJCQkJaW5kZXggPSByb290LmluZGV4T2YoZG9tYWluKTsKCQkJCWlmIChpbmRleCA9PT0gMCkgewoJCQkJCXJldHVybiByb290LnN1YnN0cihkb21haW4ubGVuZ3RoKTsKCQkJCX0KCQkJCXJldHVybiByb290OwoJCQl9LAoJCQkvLyBPcmlnaW5hbCBtZXRob2RzIG9uIGBoaXN0b3J5YCB0aGF0IHdpbGwgYmUgb3ZlcndyaXR0ZW4KCQkJbWV0aG9kc1RvT3ZlcndyaXRlID0gWydwdXNoU3RhdGUnLCAncmVwbGFjZVN0YXRlJ10sCgkJCS8vIEEgcGxhY2UgdG8gc3RvcmUgcG9pbnRlcnMgdG8gb3JpZ2luYWwgYGhpc3RvcnlgIG1ldGhvZHMuCgkJCW9yaWdpbmFsTWV0aG9kcyA9IHt9LAoJCQkvLyBVc2VkIHRvIHRlbGwgc2V0VVJMIHRvIGluY2x1ZGUgdGhlIGhhc2ggYmVjYXVzZSB3ZSBjbGlja2VkIG9uIGEgbGluay4KCQkJaW5jbHVkZUhhc2ggPSBmYWxzZTsKCgkJLy8gRW5hYmxlcyBwbHVnaW4sIGJ5IGRlZmF1bHQgYGhhc2hjaGFuZ2VgIGJpbmRpbmcgaXMgdXNlZC4KCQljYW4ucm91dGUuZGVmYXVsdEJpbmRpbmcgPSAicHVzaHN0YXRlIjsKCX0KCglyZXR1cm4gY2FuOwp9KTs=",
                "body": "LyohCiAqIENhbkpTIC0gMi4xLjMKICogaHR0cDovL2NhbmpzLnVzLwogKiBDb3B5cmlnaHQgKGMpIDIwMTQgQml0b3ZpCiAqIE1vbiwgMjUgQXVnIDIwMTQgMjE6NTE6MjkgR01UCiAqIExpY2Vuc2VkIE1JVAogKiBJbmNsdWRlczogQ2FuSlMgZGVmYXVsdCBidWlsZAogKiBEb3dubG9hZCBmcm9tOiBodHRwOi8vY2FuanMudXMvCiAqLwpkZWZpbmUoWyJjYW4vdXRpbC9saWJyYXJ5IiwgImNhbi9yb3V0ZSJdLCBmdW5jdGlvbiAoY2FuKSB7CgkidXNlIHN0cmljdCI7CgoJLy8gSW5pdGlhbGl6ZSBwbHVnaW4gb25seSBpZiBicm93c2VyIHN1cHBvcnRzIHB1c2hzdGF0ZS4KCWlmICh3aW5kb3cuaGlzdG9yeSAmJiBoaXN0b3J5LnB1c2hTdGF0ZSkgewoKCQkvLyBSZWdpc3RlcnMgaXRzZWxmIHdpdGhpbiBgY2FuLnJvdXRlLmJpbmRpbmdzYC4KCQljYW4ucm91dGUuYmluZGluZ3MucHVzaHN0YXRlID0gewoJCQkvKioKCQkJICogQHByb3BlcnR5IHtTdHJpbmd9IGNhbi5yb3V0ZS5wdXNoc3RhdGUucm9vdAoJCQkgKiBAcGFyZW50IGNhbi5yb3V0ZS5wdXNoc3RhdGUKCQkJICoKCQkJICogQGRlc2NyaXB0aW9uIENvbmZpZ3VyZSB0aGUgYmFzZSB1cmwgdGhhdCB3aWxsIG5vdCBiZSBtb2RpZmllZC4KCQkJICoKCQkJICogQG9wdGlvbiB7U3RyaW5nfSBSZXByZXNlbnRzIHRoZSBiYXNlIHVybCB0aGF0IHB1c2hzdGF0ZSB3aWxsIHByZXBlbmQgdG8gYWxsCgkJCSAqIHJvdXRlcy4gIGByb290YCBkZWZhdWx0cyB0bzogYCIvImAuCgkJCSAqCgkJCSAqIEBib2R5CgkJCSAqCgkJCSAqICMjIFVzZQoJCQkgKgoJCQkgKiBCeSBkZWZhdWx0LCBhIHJvdXRlIGxpa2U6CgkJCSAqCgkJCSAqICAgICBjYW4ucm91dGUoIjp0eXBlLzppZCIpCgkJCSAqCgkJCSAqIE1hdGNoZXMgdXJscyBsaWtlOgoJCQkgKgoJCQkgKiAgICAgaHR0cDovL2RvbWFpbi5jb20vY29udGFjdC81CgkJCSAqCgkJCSAqIEJ1dCBzb21ldGltZXMsIHlvdSBvbmx5IHdhbnQgdG8gbWF0Y2ggcGFnZXMgd2l0aGluIGEgY2VydGFpbiBkaXJlY3RvcnkuICBGb3IKCQkJICogZXhhbXBsZSwgYW4gYXBwbGljYXRpb24gdGhhdCBpcyBhIGZpbGVtYW5hZ2VyLiAgWW91IG1pZ2h0IHdhbnQgdG8KCQkJICogc3BlY2lmeSByb290IGFuZCByb3V0ZXMgbGlrZToKCQkJICoKCQkJICogICAgIGNhbi5yb3V0ZS5wdXNoc3RhdGUucm9vdCA9ICIvZmlsZW1hbmFnZXIvIgoJCQkgKiAgICAgY2FuLnJvdXRlKCJmaWxlLTpmaWxlSWQiKTsKCQkJICogICAgIGNhbi5yb3V0ZSgiZm9sZGVyLTpmaWxlSWQiKQoJCQkgKgoJCQkgKiBXaGljaCBtYXRjaGVzIHVybHMgbGlrZToKCQkJICoKCQkJICogICAgIGh0dHA6Ly9kb21haW4uY29tL2ZpbGVtYW5hZ2VyL2ZpbGUtMzQyMzQKCQkJICoKCQkJICovCgoJCQkvLyBTdGFydCBvZiBgbG9jYXRpb24ucGF0aG5hbWVgIGlzIHRoZSByb290LgoJCQkvLyAoQ2FuIGJlIGNvbmZpZ3VyZWQgdmlhIGBjYW4ucm91dGUuYmluZGluZ3MucHVzaHN0YXRlLnJvb3RgKQoJCQlyb290OiAiLyIsCgkJCS8vIGRvbid0IGdyZWVkaWx5IG1hdGNoIHNsYXNoZXMgaW4gcm91dGluZyBydWxlcwoJCQltYXRjaFNsYXNoZXM6IGZhbHNlLAoJCQlwYXJhbXNNYXRjaGVyOiAvXlw/KD86W149XSs9W14mXSomKSpbXj1dKz1bXiZdKi8sCgkJCXF1ZXJ5U2VwYXJhdG9yOiAnPycsCgoJCQkvLyAjIyBiaW5kCgoJCQkvLyBJbnRlcmNlcHRzIGNsaWNrcyBvbiBgPGE+YCBlbGVtZW50cyBhbmQgcmV3cml0ZXMgb3JpZ2luYWwgYGhpc3RvcnlgIG1ldGhvZHMuCgkJCWJpbmQ6IGZ1bmN0aW9uICgpIHsKCQkJCS8vIEludGVyY2VwdCByb3V0YWJsZSBsaW5rcy4KCQkJCWNhbi5kZWxlZ2F0ZS5jYWxsKGNhbi4kKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCksICdhJywgJ2NsaWNrJywgYW5jaG9yQ2xpY2tIYW5kbGVyKTsKCgkJCQkvLyBSZXdyaXRlcyBvcmlnaW5hbCBgcHVzaFN0YXRlYC9gcmVwbGFjZVN0YXRlYCBtZXRob2RzIG9uIGBoaXN0b3J5YCBhbmQga2VlcHMgcG9pbnRlciB0byBvcmlnaW5hbCBtZXRob2RzCgkJCQljYW4uZWFjaChtZXRob2RzVG9PdmVyd3JpdGUsIGZ1bmN0aW9uIChtZXRob2QpIHsKCQkJCQlvcmlnaW5hbE1ldGhvZHNbbWV0aG9kXSA9IHdpbmRvdy5oaXN0b3J5W21ldGhvZF07CgkJCQkJd2luZG93Lmhpc3RvcnlbbWV0aG9kXSA9IGZ1bmN0aW9uIChzdGF0ZSwgdGl0bGUsIHVybCkgewoJCQkJCQkvLyBBdm9pZCBkb3VibGVkIGhpc3Rvcnkgc3RhdGVzICh3aXRoIHB1c2hTdGF0ZSkuCgkJCQkJCXZhciBhYnNvbHV0ZSA9IHVybC5pbmRleE9mKCJodHRwIikgPT09IDA7CgkJCQkJCXZhciBzZWFyY2hIYXNoID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIHdpbmRvdy5sb2NhdGlvbi5oYXNoOwoJCQkJCQkvLyBJZiB1cmwgZGlmZmVycyBmcm9tIGN1cnJlbnQgY2FsbCBvcmlnaW5hbCBoaXN0b3kgbWV0aG9kIGFuZCB1cGRhdGUgYGNhbi5yb3V0ZWAgc3RhdGUuCgkJCQkJCWlmICgoIWFic29sdXRlICYmIHVybCAhPT0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgc2VhcmNoSGFzaCkgfHwgKGFic29sdXRlICYmIHVybCAhPT0gd2luZG93LmxvY2F0aW9uLmhyZWYgKyBzZWFyY2hIYXNoKSkgewoJCQkJCQkJb3JpZ2luYWxNZXRob2RzW21ldGhvZF0uYXBwbHkod2luZG93Lmhpc3RvcnksIGFyZ3VtZW50cyk7CgkJCQkJCQljYW4ucm91dGUuc2V0U3RhdGUoKTsKCQkJCQkJfQoJCQkJCX07CgkJCQl9KTsKCgkJCQkvLyBCaW5kIHRvIGBwb3BzdGF0ZWAgZXZlbnQsIGZpcmVzIG9uIGJhY2svZm9yd2FyZC4KCQkJCWNhbi5iaW5kLmNhbGwod2luZG93LCAncG9wc3RhdGUnLCBjYW4ucm91dGUuc2V0U3RhdGUpOwoJCQl9LAoKCQkJLy8gIyMgdW5iaW5kCgoJCQkvLyBVbmJpbmRzIGFuZCByZXN0b3JlcyBvcmlnaW5hbCBgaGlzdG9yeWAgbWV0aG9kcwoJCQl1bmJpbmQ6IGZ1bmN0aW9uICgpIHsKCQkJCWNhbi51bmRlbGVnYXRlLmNhbGwoY2FuLiQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSwgJ2NsaWNrJywgJ2EnLCBhbmNob3JDbGlja0hhbmRsZXIpOwoKCQkJCWNhbi5lYWNoKG1ldGhvZHNUb092ZXJ3cml0ZSwgZnVuY3Rpb24gKG1ldGhvZCkgewoJCQkJCXdpbmRvdy5oaXN0b3J5W21ldGhvZF0gPSBvcmlnaW5hbE1ldGhvZHNbbWV0aG9kXTsKCQkJCX0pOwoJCQkJY2FuLnVuYmluZC5jYWxsKHdpbmRvdywgJ3BvcHN0YXRlJywgY2FuLnJvdXRlLnNldFN0YXRlKTsKCQkJfSwKCgkJCS8vICMjIG1hdGNoaW5nUGFydE9mVVJMCgoJCQkvLyBSZXR1cm5zIG1hdGNoaW5nIHBhcnQgb2YgdXJsIHdpdGhvdXQgcm9vdC4KCQkJbWF0Y2hpbmdQYXJ0T2ZVUkw6IGZ1bmN0aW9uICgpIHsKCQkJCXZhciByb290ID0gY2xlYW5Sb290KCksCgkJCQkJbG9jID0gKGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoKSwKCQkJCQlpbmRleCA9IGxvYy5pbmRleE9mKHJvb3QpOwoKCQkJCXJldHVybiBsb2Muc3Vic3RyKGluZGV4ICsgcm9vdC5sZW5ndGgpOwoJCQl9LAoKCQkJLy8gIyMgc2V0VVJMCgoJCQkvLyBVcGRhdGVzIFVSTCBieSBjYWxsaW5nIGBwdXNoU3RhdGVgLgoJCQlzZXRVUkw6IGZ1bmN0aW9uIChwYXRoKSB7CgkJCQkvLyBLZWVwcyBoYXNoIGlmIG5vdCBpbiBwYXRoLgoJCQkJaWYgKGluY2x1ZGVIYXNoICYmIHBhdGguaW5kZXhPZigiIyIpID09PSAtMSAmJiB3aW5kb3cubG9jYXRpb24uaGFzaCkgewoJCQkJCXBhdGggKz0gd2luZG93LmxvY2F0aW9uLmhhc2g7CgkJCQl9CgkJCQl3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgY2FuLnJvdXRlLl9jYWxsKCJyb290IikgKyBwYXRoKTsKCQkJfQoJCX07CgoJCS8vICMjIGFuY2hvckNsaWNrSGFuZGxlcgoKCQkvLyBIYW5kbGVyIGZ1bmN0aW9uIGZvciBgY2xpY2tgIGV2ZW50cy4KCQl2YXIgYW5jaG9yQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHsKCQkJaWYgKCEoZS5pc0RlZmF1bHRQcmV2ZW50ZWQgPyBlLmlzRGVmYXVsdFByZXZlbnRlZCgpIDogZS5kZWZhdWx0UHJldmVudGVkID09PSB0cnVlKSkgewoJCQkJLy8gWVVJIGNhbGxzIGJhY2sgZXZlbnRzIHRyaWdnZXJlZCB3aXRoIHRoaXMgYXMgYSB3cmFwcGVkIG9iamVjdC4KCQkJCXZhciBub2RlID0gdGhpcy5fbm9kZSB8fCB0aGlzOwoJCQkJLy8gRml4IGZvciBJRSBzaG93aW5nIGJsYW5rIGhvc3QsIGJ1dCBibGFuayBob3N0IG1lYW5zIGN1cnJlbnQgaG9zdC4KCQkJCXZhciBsaW5rc0hvc3QgPSBub2RlLmhvc3QgfHwgd2luZG93LmxvY2F0aW9uLmhvc3Q7CgoJCQkJLy8gSWYgbGluayBpcyB3aXRoaW4gdGhlIHNhbWUgZG9tYWluIGFuZCBkZXNjZW5kYW50IG9mIGByb290YAoJCQkJaWYgKHdpbmRvdy5sb2NhdGlvbi5ob3N0ID09PSBsaW5rc0hvc3QpIHsKCQkJCQl2YXIgcm9vdCA9IGNsZWFuUm9vdCgpOwoJCQkJCWlmIChub2RlLnBhdGhuYW1lLmluZGV4T2Yocm9vdCkgPT09IDApIHsKCgkJCQkJCS8vIFJlbW92ZXMgcm9vdCBmcm9tIHVybC4KCQkJCQkJdmFyIHVybCA9IChub2RlLnBhdGhuYW1lICsgbm9kZS5zZWFyY2gpLnN1YnN0cihyb290Lmxlbmd0aCk7CgkJCQkJCS8vIElmIGEgcm91dGUgbWF0Y2hlcyB1cGRhdGUgdGhlIGRhdGEuCgkJCQkJCXZhciBjdXJQYXJhbXMgPSBjYW4ucm91dGUuZGVwYXJhbSh1cmwpOwoJCQkJCQlpZiAoY3VyUGFyYW1zLmhhc093blByb3BlcnR5KCdyb3V0ZScpKSB7CgkJCQkJCQkvLyBNYWtlcyBpdCBwb3NzaWJsZSB0byBoYXZlIGEgbGluayB3aXRoIGEgaGFzaC4KCQkJCQkJCWluY2x1ZGVIYXNoID0gdHJ1ZTsKCQkJCQkJCXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBub2RlLmhyZWYpOwoKCQkJCQkJCS8vIFRlc3QgaWYgeW91IGNhbiBwcmV2ZW50RGVmYXVsdAoJCQkJCQkJLy8gb3VyIHRlc3RzIGNhbid0IGNhbGwgLmNsaWNrKCkgYi9jIHRoaXMKCQkJCQkJCS8vIGZyZWV6ZXMgcGhhbnRvbS4KCQkJCQkJCWlmIChlLnByZXZlbnREZWZhdWx0KSB7CgkJCQkJCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJfSwKCgkJCS8vICMjIGNsZWFuUm9vdAoKCQkJLy8gQWx3YXlzIHJldHVybnMgY2xlYW4gcm9vdCwgd2l0aG91dCBkb21haW4uCgkJCWNsZWFuUm9vdCA9IGZ1bmN0aW9uICgpIHsKCQkJCXZhciBkb21haW4gPSBsb2NhdGlvbi5wcm90b2NvbCArICIvLyIgKyBsb2NhdGlvbi5ob3N0LAoJCQkJCXJvb3QgPSBjYW4ucm91dGUuX2NhbGwoInJvb3QiKSwKCQkJCQlpbmRleCA9IHJvb3QuaW5kZXhPZihkb21haW4pOwoJCQkJaWYgKGluZGV4ID09PSAwKSB7CgkJCQkJcmV0dXJuIHJvb3Quc3Vic3RyKGRvbWFpbi5sZW5ndGgpOwoJCQkJfQoJCQkJcmV0dXJuIHJvb3Q7CgkJCX0sCgkJCS8vIE9yaWdpbmFsIG1ldGhvZHMgb24gYGhpc3RvcnlgIHRoYXQgd2lsbCBiZSBvdmVyd3JpdHRlbgoJCQltZXRob2RzVG9PdmVyd3JpdGUgPSBbJ3B1c2hTdGF0ZScsICdyZXBsYWNlU3RhdGUnXSwKCQkJLy8gQSBwbGFjZSB0byBzdG9yZSBwb2ludGVycyB0byBvcmlnaW5hbCBgaGlzdG9yeWAgbWV0aG9kcy4KCQkJb3JpZ2luYWxNZXRob2RzID0ge30sCgkJCS8vIFVzZWQgdG8gdGVsbCBzZXRVUkwgdG8gaW5jbHVkZSB0aGUgaGFzaCBiZWNhdXNlIHdlIGNsaWNrZWQgb24gYSBsaW5rLgoJCQlpbmNsdWRlSGFzaCA9IGZhbHNlOwoKCQkvLyBFbmFibGVzIHBsdWdpbiwgYnkgZGVmYXVsdCBgaGFzaGNoYW5nZWAgYmluZGluZyBpcyB1c2VkLgoJCWNhbi5yb3V0ZS5kZWZhdWx0QmluZGluZyA9ICJwdXNoc3RhdGUiOwoJfQoKCXJldHVybiBjYW47Cn0pOw==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 14:37:21 GMT",
                    "Content-Length": "5767",
                    "Date": "Thu, 06 Nov 2014 14:37:25 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}