{
    "url": "http://localhost:9999/fex-team/ueditor/_test/tools/br/js/UserAction.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.href</b> and written to <b>the 'source' property of a DOM element</b> via the following statements:<ul><li>var srcpath = location.href.split(\"/_test/\")[0]             + \"/_test/tools/br/import.php\";</li><li>sc.src = srcpath + \"?f=\" + param0 + \"&amp;e=\" + param1;</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/fex-team/ueditor/_test/tools/br/js/UserAction.js",
                "path": "/fex-team/ueditor/_test/tools/br/js/UserAction.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9mZXgtdGVhbS91ZWRpdG9yL190ZXN0L3Rvb2xzL2JyL2pzL1VzZXJBY3Rpb24uanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyoqCiAqIOa1i+ivleeUqOS+i+W6k+aWh+S7tu+8jOaPkOS+m+WmgmV2ZW50IG1vY2vjgIFpZnJhbWXlsIHoo4XnrYnlkITnp43luLjnlKjlip/og70g6YOo5YiG5pa55rOV5p2l5rqQ5LqOWVVJ5rWL6K+V5qGG5p62CiAqLwpVc2VyQWN0aW9uID0gewogICAgYmVmb3JlZGlzcGF0Y2g6bnVsbCwKLy8gICAgZmxhZyA6IHRydWUsCiAgICBpc2YgLyogaXMgZnVuY3Rpb24gPyAqLzpmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKTsKICAgIH0sCiAgICBpc2IgLyogaXMgYm9vbGVhbj8gKi86ZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlICYmICh0eXBlb2YgdmFsdWUgPT0gJ2Jvb2xlYW4nKTsKICAgIH0sCiAgICBpc28gLyogaXMgb2JqZWN0PyAqLzpmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jyk7CiAgICB9LAogICAgaXNzIC8qIGlzIHN0cmluZz8gKi86ZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlICYmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpOwogICAgfSwKICAgIGlzbiAvKiBpcyBudW1iZXI/ICovOmZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHJldHVybiB2YWx1ZSAmJiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKTsKICAgIH0sCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLy8gR2VuZXJpYyBldmVudCBtZXRob2RzCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8qKgogICAgICogU2ltdWxhdGVzIGEga2V5IGV2ZW50IHVzaW5nIHRoZSBnaXZlbiBldmVudCBpbmZvcm1hdGlvbiB0byBwb3B1bGF0ZSB0aGUKICAgICAqIGdlbmVyYXRlZCBldmVudCBvYmplY3QuIFRoaXMgbWV0aG9kIGRvZXMgYnJvd3Nlci1lcXVhbGl6aW5nIGNhbGN1bGF0aW9ucwogICAgICogdG8gYWNjb3VudCBmb3IgZGlmZmVyZW5jZXMgaW4gdGhlIERPTSBhbmQgSUUgZXZlbnQgbW9kZWxzIGFzIHdlbGwgYXMKICAgICAqIGRpZmZlcmVudCBicm93c2VyIHF1aXJrcy4gTm90ZToga2V5ZG93biBjYXVzZXMgU2FmYXJpIDIueCB0byBjcmFzaC4KICAgICAqCiAgICAgKiBAbWV0aG9kIHNpbXVsYXRlS2V5RXZlbnQKICAgICAqIEBwcml2YXRlCiAgICAgKiBAc3RhdGljCiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fQogICAgICAgICogICAgICAgICAgICB0YXJnZXQgVGhlIHRhcmdldCBvZiB0aGUgZ2l2ZW4gZXZlbnQuCiAgICAgKiBAcGFyYW0ge1N0cmluZ30KICAgICAgICAqICAgICAgICAgICAgdHlwZSBUaGUgdHlwZSBvZiBldmVudCB0byBmaXJlLiBUaGlzIGNhbiBiZSBhbnkgb25lIG9mIHRoZQogICAgICogICAgICAgICAgICBmb2xsb3dpbmc6IGtleXVwLCBrZXlkb3duLCBhbmQga2V5cHJlc3MuCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59CiAgICAgICAgKiAgICAgICAgICAgIGJ1YmJsZXMgKE9wdGlvbmFsKSBJbmRpY2F0ZXMgaWYgdGhlIGV2ZW50IGNhbiBiZSBidWJibGVkIHVwLgogICAgICogICAgICAgICAgICBET00gTGV2ZWwgMyBzcGVjaWZpZXMgdGhhdCBhbGwga2V5IGV2ZW50cyBidWJibGUgYnkgZGVmYXVsdC4KICAgICAqICAgICAgICAgICAgVGhlIGRlZmF1bHQgaXMgdHJ1ZS4KICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0KICAgICAgICAqICAgICAgICAgICAgY2FuY2VsYWJsZSAoT3B0aW9uYWwpIEluZGljYXRlcyBpZiB0aGUgZXZlbnQgY2FuIGJlIGNhbmNlbGVkCiAgICAgKiAgICAgICAgICAgIHVzaW5nIHByZXZlbnREZWZhdWx0KCkuIERPTSBMZXZlbCAzIHNwZWNpZmllcyB0aGF0IGFsbCBrZXkKICAgICAqICAgICAgICAgICAgZXZlbnRzIGNhbiBiZSBjYW5jZWxsZWQuIFRoZSBkZWZhdWx0IGlzIHRydWUuCiAgICAgKiBAcGFyYW0ge1dpbmRvd30KICAgICAgICAqICAgICAgICAgICAgdmlldyAoT3B0aW9uYWwpIFRoZSB2aWV3IGNvbnRhaW5pbmcgdGhlIHRhcmdldC4gVGhpcyBpcwogICAgICogICAgICAgICAgICB0eXBpY2FsbHkgdGhlIHdpbmRvdyBvYmplY3QuIFRoZSBkZWZhdWx0IGlzIHdpbmRvdy4KICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0KICAgICAgICAqICAgICAgICAgICAgY3RybEtleSAoT3B0aW9uYWwpIEluZGljYXRlcyBpZiBvbmUgb2YgdGhlIENUUkwga2V5cyBpcwogICAgICogICAgICAgICAgICBwcmVzc2VkIHdoaWxlIHRoZSBldmVudCBpcyBmaXJpbmcuIFRoZSBkZWZhdWx0IGlzIGZhbHNlLgogICAgICogQHBhcmFtIHtCb29sZWFufQogICAgICAgICogICAgICAgICAgICBhbHRLZXkgKE9wdGlvbmFsKSBJbmRpY2F0ZXMgaWYgb25lIG9mIHRoZSBBTFQga2V5cyBpcyBwcmVzc2VkCiAgICAgKiAgICAgICAgICAgIHdoaWxlIHRoZSBldmVudCBpcyBmaXJpbmcuIFRoZSBkZWZhdWx0IGlzIGZhbHNlLgogICAgICogQHBhcmFtIHtCb29sZWFufQogICAgICAgICogICAgICAgICAgICBzaGlmdEtleSAoT3B0aW9uYWwpIEluZGljYXRlcyBpZiBvbmUgb2YgdGhlIFNISUZUIGtleXMgaXMKICAgICAqICAgICAgICAgICAgcHJlc3NlZCB3aGlsZSB0aGUgZXZlbnQgaXMgZmlyaW5nLiBUaGUgZGVmYXVsdCBpcyBmYWxzZS4KICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0KICAgICAgICAqICAgICAgICAgICAgbWV0YUtleSAoT3B0aW9uYWwpIEluZGljYXRlcyBpZiBvbmUgb2YgdGhlIE1FVEEga2V5cyBpcwogICAgICogICAgICAgICAgICBwcmVzc2VkIHdoaWxlIHRoZSBldmVudCBpcyBmaXJpbmcuIFRoZSBkZWZhdWx0IGlzIGZhbHNlLgogICAgICogQHBhcmFtIHtpbnR9CiAgICAgICAgKiAgICAgICAgICAgIGtleUNvZGUgKE9wdGlvbmFsKSBUaGUgY29kZSBmb3IgdGhlIGtleSB0aGF0IGlzIGluIHVzZS4gVGhlCiAgICAgKiAgICAgICAgICAgIGRlZmF1bHQgaXMgMC4KICAgICAqIEBwYXJhbSB7aW50fQogICAgICAgICogICAgICAgICAgICBjaGFyQ29kZSAoT3B0aW9uYWwpIFRoZSBVbmljb2RlIGNvZGUgZm9yIHRoZSBjaGFyYWN0ZXIKICAgICAqICAgICAgICAgICAgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkgYmVpbmcgdXNlZC4gVGhlIGRlZmF1bHQgaXMgMC4KICAgICAqLwogICAgc2ltdWxhdGVLZXlFdmVudDpmdW5jdGlvbiAodGFyZ2V0IC8qIDpIVE1MRWxlbWVudCAqLywgdHlwZSAvKiA6U3RyaW5nICovLCBidWJibGVzIC8qIDpCb29sZWFuICovLCBjYW5jZWxhYmxlIC8qIDpCb29sZWFuICovLCB2aWV3IC8qIDpXaW5kb3cgKi8sIGN0cmxLZXkgLyogOkJvb2xlYW4gKi8sIGFsdEtleSAvKiA6Qm9vbGVhbiAqLywgc2hpZnRLZXkgLyogOkJvb2xlYW4gKi8sIG1ldGFLZXkgLyogOkJvb2xlYW4gKi8sIGtleUNvZGUgLyogOmludCAqLywgY2hhckNvZGUgLyogOmludCAqLykgLyogOlZvaWQgKi8gewogICAgICAgIC8vIGNoZWNrIHRhcmdldAogICAgICAgIHRhcmdldCA9IHR5cGVvZiB0YXJnZXQgPT0gJ3N0cmluZycgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXQpCiAgICAgICAgICAgIDogdGFyZ2V0OwogICAgICAgIGlmICghdGFyZ2V0KSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigic2ltdWxhdGVLZXlFdmVudCgpOiBJbnZhbGlkIHRhcmdldC4iKTsKICAgICAgICB9CgogICAgICAgIC8vIGNoZWNrIGV2ZW50IHR5cGUKICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgICAgICAgICBjYXNlICJjb21wb3NpdGlvbmVuZCI6CiAgICAgICAgICAgICAgICBjYXNlICJjb21wb3NpdGlvbnN0YXJ0IjoKICAgICAgICAgICAgICAgIGNhc2UgInBhc3RlIjoKICAgICAgICAgICAgICAgIGNhc2UgImN1dCI6CiAgICAgICAgICAgICAgICBjYXNlICJrZXl1cCI6CiAgICAgICAgICAgICAgICBjYXNlICJrZXlkb3duIjoKICAgICAgICAgICAgICAgIGNhc2UgImtleXByZXNzIjoKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgInRleHRldmVudCI6IC8vIERPTSBMZXZlbCAzCiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICJrZXlwcmVzcyI7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAvLyBAVE9ETyB3YXMgdGhlIGZhbGx0aHJvdWdoIGludGVudGlvbmFsLCBpZiBzbyB0aHJvdyBlcnJvcgogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoInNpbXVsYXRlS2V5RXZlbnQoKTogRXZlbnQgdHlwZSAnIiArIHR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgKyAiJyBub3Qgc3VwcG9ydGVkLiIpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJzaW11bGF0ZUtleUV2ZW50KCk6IEV2ZW50IHR5cGUgbXVzdCBiZSBhIHN0cmluZy4iKTsKICAgICAgICB9CgogICAgICAgIC8vIHNldHVwIGRlZmF1bHQgdmFsdWVzCiAgICAgICAgaWYgKCF0aGlzLmlzYihidWJibGVzKSkgewogICAgICAgICAgICBidWJibGVzID0gdHJ1ZTsgLy8gYWxsIGtleSBldmVudHMgYnViYmxlCiAgICAgICAgfQogICAgICAgIGlmICghdGhpcy5pc2IoY2FuY2VsYWJsZSkpIHsKICAgICAgICAgICAgY2FuY2VsYWJsZSA9IHRydWU7IC8vIGFsbCBrZXkgZXZlbnRzIGNhbiBiZSBjYW5jZWxsZWQKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzbyh2aWV3KSkgewogICAgICAgICAgICB2aWV3ID0gd2luZG93OyAvLyB2aWV3IGlzIHR5cGljYWxseSB3aW5kb3cKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzYihjdHJsS2V5KSkgewogICAgICAgICAgICBjdHJsS2V5ID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmICghdGhpcy5pc2IodHlwZW9mIGFsdEtleSA9PSAnYm9vbGVhbicpKSB7CiAgICAgICAgICAgIGFsdEtleSA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoIXRoaXMuaXNiKHNoaWZ0S2V5KSkgewogICAgICAgICAgICBzaGlmdEtleSA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoIXRoaXMuaXNiKG1ldGFLZXkpKSB7CiAgICAgICAgICAgIG1ldGFLZXkgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKCEodHlwZW9mIGtleUNvZGUgPT0gJ251bWJlcicpKSB7CiAgICAgICAgICAgIGtleUNvZGUgPSAwOwogICAgICAgIH0KICAgICAgICBpZiAoISh0eXBlb2YgY2hhckNvZGUgPT0gJ251bWJlcicpKSB7CiAgICAgICAgICAgIGNoYXJDb2RlID0gMDsKICAgICAgICB9CgogICAgICAgIC8vIHRyeSB0byBjcmVhdGUgYSBtb3VzZSBldmVudAogICAgICAgIHZhciBjdXN0b21FdmVudCAvKiA6TW91c2VFdmVudCAqLyA9IG51bGw7CgogICAgICAgIC8vIGNoZWNrIGZvciBET00tY29tcGxpYW50IGJyb3dzZXJzIGZpcnN0CiAgICAgICAgaWYgKHRoaXMuaXNmKGRvY3VtZW50LmNyZWF0ZUV2ZW50KSkgewoKICAgICAgICAgICAgdHJ5IHsKCiAgICAgICAgICAgICAgICAvLyB0cnkgdG8gY3JlYXRlIGtleSBldmVudAogICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgiS2V5RXZlbnRzIik7CgogICAgICAgICAgICAgICAgLyoKICAgICAgICAgICAgICAgICAqIEludGVyZXN0aW5nIHByb2JsZW06IEZpcmVmb3ggaW1wbGVtZW50ZWQgYSBub24tc3RhbmRhcmQKICAgICAgICAgICAgICAgICAqIHZlcnNpb24gb2YgaW5pdEtleUV2ZW50KCkgYmFzZWQgb24gRE9NIExldmVsIDIgc3BlY3MuIEtleQogICAgICAgICAgICAgICAgICogZXZlbnQgd2FzIHJlbW92ZWQgZnJvbSBET00gTGV2ZWwgMiBhbmQgcmUtaW50cm9kdWNlZCBpbiBET00KICAgICAgICAgICAgICAgICAqIExldmVsIDMgd2l0aCBhIGRpZmZlcmVudCBpbnRlcmZhY2UuIEZpcmVmb3ggaXMgdGhlIG9ubHkKICAgICAgICAgICAgICAgICAqIGJyb3dzZXIgd2l0aCBhbnkgaW1wbGVtZW50YXRpb24gb2YgS2V5IEV2ZW50cywgc28gZm9yIG5vdywKICAgICAgICAgICAgICAgICAqIGFzc3VtZSBpdCdzIEZpcmVmb3ggaWYgdGhlIGFib3ZlIGxpbmUgZG9lc24ndCBlcnJvci4KICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgLy8gVE9ETzogRGVjaXBoZXIgYmV0d2VlbiBGaXJlZm94J3MgaW1wbGVtZW50YXRpb24gYW5kIGEgY29ycmVjdAogICAgICAgICAgICAgICAgLy8gb25lLgogICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQuaW5pdEtleUV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIHZpZXcsCiAgICAgICAgICAgICAgICAgICAgY3RybEtleSwgYWx0S2V5LCBzaGlmdEtleSwgbWV0YUtleSwga2V5Q29kZSwgY2hhckNvZGUpOwoKICAgICAgICAgICAgfSBjYXRjaCAoZXggLyogOkVycm9yICovKSB7CgogICAgICAgICAgICAgICAgLyoKICAgICAgICAgICAgICAgICAqIElmIGl0IGdvdCBoZXJlLCB0aGF0IG1lYW5zIGtleSBldmVudHMgYXJlbid0IG9mZmljaWFsbHkKICAgICAgICAgICAgICAgICAqIHN1cHBvcnRlZC4gU2FmYXJpL1dlYktpdCBpcyBhIHJlYWwgcHJvYmxlbSBub3cuIFdlYktpdCA1MjIKICAgICAgICAgICAgICAgICAqIHdvbid0IGxldCB5b3Ugc2V0IGtleUNvZGUsIGNoYXJDb2RlLCBvciBvdGhlciBwcm9wZXJ0aWVzIGlmCiAgICAgICAgICAgICAgICAgKiB5b3UgdXNlIGEgVUlFdmVudCwgc28gd2UgZmlyc3QgbXVzdCB0cnkgdG8gY3JlYXRlIGEgZ2VuZXJpYwogICAgICAgICAgICAgICAgICogZXZlbnQuIFRoZSBmdW4gcGFydCBpcyB0aGF0IHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvciBvbgogICAgICAgICAgICAgICAgICogU2FmYXJpIDIueC4gVGhlIGVuZCByZXN1bHQgaXMgdGhhdCB3ZSBuZWVkIGFub3RoZXIKICAgICAgICAgICAgICAgICAqIHRyeS4uLmNhdGNoIHN0YXRlbWVudCBqdXN0IHRvIGRlYWwgd2l0aCB0aGlzIG1lc3MuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIHRyeSB7CgogICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0byBjcmVhdGUgZ2VuZXJpYyBldmVudCAtIHdpbGwgZmFpbCBpbiBTYWZhcmkgMi54CiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgiRXZlbnRzIik7CgogICAgICAgICAgICAgICAgfSBjYXRjaCAodWllcnJvciAvKiA6RXJyb3IgKi8pIHsKCiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFib3ZlIGZhaWxlZCwgc28gY3JlYXRlIGEgVUlFdmVudCBmb3IgU2FmYXJpIDIueAogICAgICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoIlVJRXZlbnRzIik7CgogICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKCiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQuaW5pdEV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUpOwoKICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplCiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQudmlldyA9IHZpZXc7CiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQuYWx0S2V5ID0gYWx0S2V5OwogICAgICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50LmN0cmxLZXkgPSBjdHJsS2V5OwogICAgICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50LnNoaWZ0S2V5ID0gc2hpZnRLZXk7CiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQubWV0YUtleSA9IG1ldGFLZXk7CiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQua2V5Q29kZSA9IGtleUNvZGU7CiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQuY2hhckNvZGUgPSBjaGFyQ29kZTsKCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBiZWZvcmUgZGlzcGF0Y2gKICAgICAgICAgICAgaWYgKHRoaXMuYmVmb3JlZGlzcGF0Y2ggJiYgdHlwZW9mIHRoaXMuYmVmb3JlZGlzcGF0Y2ggPT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgICAgIHRoaXMuYmVmb3JlZGlzcGF0Y2goY3VzdG9tRXZlbnQpOwogICAgICAgICAgICB0aGlzLmJlZm9yZWRpc3BhdGNoID0gbnVsbDsKCiAgICAgICAgICAgIC8vIGZpcmUgdGhlIGV2ZW50CiAgICAgICAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KGN1c3RvbUV2ZW50KTsKCiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzbyhkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCkpIHsgLy8gSUUKCiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBJRSBldmVudCBvYmplY3QKICAgICAgICAgICAgY3VzdG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpOwoKICAgICAgICAgICAgLy8gYXNzaWduIGF2YWlsYWJsZSBwcm9wZXJ0aWVzCiAgICAgICAgICAgIGN1c3RvbUV2ZW50LmJ1YmJsZXMgPSBidWJibGVzOwogICAgICAgICAgICBjdXN0b21FdmVudC5jYW5jZWxhYmxlID0gY2FuY2VsYWJsZTsKICAgICAgICAgICAgY3VzdG9tRXZlbnQudmlldyA9IHZpZXc7CiAgICAgICAgICAgIGN1c3RvbUV2ZW50LmN0cmxLZXkgPSBjdHJsS2V5OwogICAgICAgICAgICBjdXN0b21FdmVudC5hbHRLZXkgPSBhbHRLZXk7CiAgICAgICAgICAgIGN1c3RvbUV2ZW50LnNoaWZ0S2V5ID0gc2hpZnRLZXk7CiAgICAgICAgICAgIGN1c3RvbUV2ZW50Lm1ldGFLZXkgPSBtZXRhS2V5OwoKICAgICAgICAgICAgLyoKICAgICAgICAgICAgICogSUUgZG9lc24ndCBzdXBwb3J0IGNoYXJDb2RlIGV4cGxpY2l0bHkuIENoYXJDb2RlIHNob3VsZCB0YWtlCiAgICAgICAgICAgICAqIHByZWNlZGVuY2Ugb3ZlciBhbnkga2V5Q29kZSB2YWx1ZSBmb3IgYWNjdXJhdGUgcmVwcmVzZW50YXRpb24uCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBjdXN0b21FdmVudC5rZXlDb2RlID0gKGNoYXJDb2RlID4gMCkgPyBjaGFyQ29kZSA6IGtleUNvZGU7CgogICAgICAgICAgICAvLyBiZWZvcmUgZGlzcGF0Y2gKICAgICAgICAgICAgaWYgKHRoaXMuYmVmb3JlZGlzcGF0Y2ggJiYgdHlwZW9mIHRoaXMuYmVmb3JlZGlzcGF0Y2ggPT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgICAgIHRoaXMuYmVmb3JlZGlzcGF0Y2goY3VzdG9tRXZlbnQpOwogICAgICAgICAgICB0aGlzLmJlZm9yZWRpc3BhdGNoID0gbnVsbDsKCiAgICAgICAgICAgIC8vIGZpcmUgdGhlIGV2ZW50CiAgICAgICAgICAgIHRhcmdldC5maXJlRXZlbnQoIm9uIiArIHR5cGUsIGN1c3RvbUV2ZW50KTsKCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgICAgICAgICAgInNpbXVsYXRlS2V5RXZlbnQoKTogTm8gZXZlbnQgc2ltdWxhdGlvbiBmcmFtZXdvcmsgcHJlc2VudC4iKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuYmVmb3JlZGlzcGF0Y2ggPSBudWxsOwogICAgfSwKCiAgICAvKioKICAgICAqIFNpbXVsYXRlcyBhIG1vdXNlIGV2ZW50IHVzaW5nIHRoZSBnaXZlbiBldmVudCBpbmZvcm1hdGlvbiB0byBwb3B1bGF0ZSB0aGUKICAgICAqIGdlbmVyYXRlZCBldmVudCBvYmplY3QuIFRoaXMgbWV0aG9kIGRvZXMgYnJvd3Nlci1lcXVhbGl6aW5nIGNhbGN1bGF0aW9ucwogICAgICogdG8gYWNjb3VudCBmb3IgZGlmZmVyZW5jZXMgaW4gdGhlIERPTSBhbmQgSUUgZXZlbnQgbW9kZWxzIGFzIHdlbGwgYXMKICAgICAqIGRpZmZlcmVudCBicm93c2VyIHF1aXJrcy4KICAgICAqCiAgICAgKiBAbWV0aG9kIHNpbXVsYXRlTW91c2VFdmVudAogICAgICogQHByaXZhdGUKICAgICAqIEBzdGF0aWMKICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9CiAgICAgICAgKiAgICAgICAgICAgIHRhcmdldCBUaGUgdGFyZ2V0IG9mIHRoZSBnaXZlbiBldmVudC4KICAgICAqIEBwYXJhbSB7U3RyaW5nfQogICAgICAgICogICAgICAgICAgICB0eXBlIFRoZSB0eXBlIG9mIGV2ZW50IHRvIGZpcmUuIFRoaXMgY2FuIGJlIGFueSBvbmUgb2YgdGhlCiAgICAgKiAgICAgICAgICAgIGZvbGxvd2luZzogY2xpY2ssIGRibGNsaWNrLCBtb3VzZWRvd24sIG1vdXNldXAsIG1vdXNlb3V0LAogICAgICogICAgICAgICAgICBtb3VzZW92ZXIsIGFuZCBtb3VzZW1vdmUuCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59CiAgICAgICAgKiAgICAgICAgICAgIGJ1YmJsZXMgKE9wdGlvbmFsKSBJbmRpY2F0ZXMgaWYgdGhlIGV2ZW50IGNhbiBiZSBidWJibGVkIHVwLgogICAgICogICAgICAgICAgICBET00gTGV2ZWwgMiBzcGVjaWZpZXMgdGhhdCBhbGwgbW91c2UgZXZlbnRzIGJ1YmJsZSBieSBkZWZhdWx0LgogICAgICogICAgICAgICAgICBUaGUgZGVmYXVsdCBpcyB0cnVlLgogICAgICogQHBhcmFtIHtCb29sZWFufQogICAgICAgICogICAgICAgICAgICBjYW5jZWxhYmxlIChPcHRpb25hbCkgSW5kaWNhdGVzIGlmIHRoZSBldmVudCBjYW4gYmUgY2FuY2VsZWQKICAgICAqICAgICAgICAgICAgdXNpbmcgcHJldmVudERlZmF1bHQoKS4gRE9NIExldmVsIDIgc3BlY2lmaWVzIHRoYXQgYWxsIG1vdXNlCiAgICAgKiAgICAgICAgICAgIGV2ZW50cyBleGNlcHQgbW91c2Vtb3ZlIGNhbiBiZSBjYW5jZWxsZWQuIFRoZSBkZWZhdWx0IGlzIHRydWUKICAgICAqICAgICAgICAgICAgZm9yIGFsbCBldmVudHMgZXhjZXB0IG1vdXNlbW92ZSwgZm9yIHdoaWNoIHRoZSBkZWZhdWx0IGlzCiAgICAgKiAgICAgICAgICAgIGZhbHNlLgogICAgICogQHBhcmFtIHtXaW5kb3d9CiAgICAgICAgKiAgICAgICAgICAgIHZpZXcgKE9wdGlvbmFsKSBUaGUgdmlldyBjb250YWluaW5nIHRoZSB0YXJnZXQuIFRoaXMgaXMKICAgICAqICAgICAgICAgICAgdHlwaWNhbGx5IHRoZSB3aW5kb3cgb2JqZWN0LiBUaGUgZGVmYXVsdCBpcyB3aW5kb3cuCiAgICAgKiBAcGFyYW0ge2ludH0KICAgICAgICAqICAgICAgICAgICAgZGV0YWlsIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiB0aW1lcyB0aGUgbW91c2UgYnV0dG9uIGhhcwogICAgICogICAgICAgICAgICBiZWVuIHVzZWQuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDEuCiAgICAgKiBAcGFyYW0ge2ludH0KICAgICAgICAqICAgICAgICAgICAgc2NyZWVuWCAoT3B0aW9uYWwpIFRoZSB4LWNvb3JkaW5hdGUgb24gdGhlIHNjcmVlbiBhdCB3aGljaAogICAgICogICAgICAgICAgICBwb2ludCB0aGUgZXZlbnQgb2NjdXJlZC4gVGhlIGRlZmF1bHQgaXMgMC4KICAgICAqIEBwYXJhbSB7aW50fQogICAgICAgICogICAgICAgICAgICBzY3JlZW5ZIChPcHRpb25hbCkgVGhlIHktY29vcmRpbmF0ZSBvbiB0aGUgc2NyZWVuIGF0IHdoaWNoCiAgICAgKiAgICAgICAgICAgIHBvaW50IHRoZSBldmVudCBvY2N1cmVkLiBUaGUgZGVmYXVsdCBpcyAwLgogICAgICogQHBhcmFtIHtpbnR9CiAgICAgICAgKiAgICAgICAgICAgIGNsaWVudFggKE9wdGlvbmFsKSBUaGUgeC1jb29yZGluYXRlIG9uIHRoZSBjbGllbnQgYXQgd2hpY2gKICAgICAqICAgICAgICAgICAgcG9pbnQgdGhlIGV2ZW50IG9jY3VyZWQuIFRoZSBkZWZhdWx0IGlzIDAuCiAgICAgKiBAcGFyYW0ge2ludH0KICAgICAgICAqICAgICAgICAgICAgY2xpZW50WSAoT3B0aW9uYWwpIFRoZSB5LWNvb3JkaW5hdGUgb24gdGhlIGNsaWVudCBhdCB3aGljaAogICAgICogICAgICAgICAgICBwb2ludCB0aGUgZXZlbnQgb2NjdXJlZC4gVGhlIGRlZmF1bHQgaXMgMC4KICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0KICAgICAgICAqICAgICAgICAgICAgY3RybEtleSAoT3B0aW9uYWwpIEluZGljYXRlcyBpZiBvbmUgb2YgdGhlIENUUkwga2V5cyBpcwogICAgICogICAgICAgICAgICBwcmVzc2VkIHdoaWxlIHRoZSBldmVudCBpcyBmaXJpbmcuIFRoZSBkZWZhdWx0IGlzIGZhbHNlLgogICAgICogQHBhcmFtIHtCb29sZWFufQogICAgICAgICogICAgICAgICAgICBhbHRLZXkgKE9wdGlvbmFsKSBJbmRpY2F0ZXMgaWYgb25lIG9mIHRoZSBBTFQga2V5cyBpcyBwcmVzc2VkCiAgICAgKiAgICAgICAgICAgIHdoaWxlIHRoZSBldmVudCBpcyBmaXJpbmcuIFRoZSBkZWZhdWx0IGlzIGZhbHNlLgogICAgICogQHBhcmFtIHtCb29sZWFufQogICAgICAgICogICAgICAgICAgICBzaGlmdEtleSAoT3B0aW9uYWwpIEluZGljYXRlcyBpZiBvbmUgb2YgdGhlIFNISUZUIGtleXMgaXMKICAgICAqICAgICAgICAgICAgcHJlc3NlZCB3aGlsZSB0aGUgZXZlbnQgaXMgZmlyaW5nLiBUaGUgZGVmYXVsdCBpcyBmYWxzZS4KICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0KICAgICAgICAqICAgICAgICAgICAgbWV0YUtleSAoT3B0aW9uYWwpIEluZGljYXRlcyBpZiBvbmUgb2YgdGhlIE1FVEEga2V5cyBpcwogICAgICogICAgICAgICAgICBwcmVzc2VkIHdoaWxlIHRoZSBldmVudCBpcyBmaXJpbmcuIFRoZSBkZWZhdWx0IGlzIGZhbHNlLgogICAgICogQHBhcmFtIHtpbnR9CiAgICAgICAgKiAgICAgICAgICAgIGJ1dHRvbiAoT3B0aW9uYWwpIFRoZSBidXR0b24gYmVpbmcgcHJlc3NlZCB3aGlsZSB0aGUgZXZlbnQgaXMKICAgICAqICAgICAgICAgICAgZXhlY3V0aW5nLiBUaGUgdmFsdWUgc2hvdWxkIGJlIDAgZm9yIHRoZSBwcmltYXJ5IG1vdXNlIGJ1dHRvbgogICAgICogICAgICAgICAgICAodHlwaWNhbGx5IHRoZSBsZWZ0IGJ1dHRvbiksIDEgZm9yIHRoZSB0ZXJjaWFyeSBtb3VzZSBidXR0b24KICAgICAqICAgICAgICAgICAgKHR5cGljYWxseSB0aGUgbWlkZGxlIGJ1dHRvbiksIGFuZCAyIGZvciB0aGUgc2Vjb25kYXJ5IG1vdXNlCiAgICAgKiAgICAgICAgICAgIGJ1dHRvbiAodHlwaWNhbGx5IHRoZSByaWdodCBidXR0b24pLiBUaGUgZGVmYXVsdCBpcyAwLgogICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0KICAgICAgICAqICAgICAgICAgICAgcmVsYXRlZFRhcmdldCAoT3B0aW9uYWwpIEZvciBtb3VzZW91dCBldmVudHMsIHRoaXMgaXMgdGhlCiAgICAgKiAgICAgICAgICAgIGVsZW1lbnQgdGhhdCB0aGUgbW91c2UgaGFzIG1vdmVkIHRvLiBGb3IgbW91c2VvdmVyIGV2ZW50cywKICAgICAqICAgICAgICAgICAgdGhpcyBpcyB0aGUgZWxlbWVudCB0aGF0IHRoZSBtb3VzZSBoYXMgbW92ZWQgZnJvbS4gVGhpcwogICAgICogICAgICAgICAgICBhcmd1bWVudCBpcyBpZ25vcmVkIGZvciBhbGwgb3RoZXIgZXZlbnRzLiBUaGUgZGVmYXVsdCBpcyBudWxsLgogICAgICovCiAgICBzaW11bGF0ZU1vdXNlRXZlbnQ6ZnVuY3Rpb24gKHRhcmdldCAvKiA6SFRNTEVsZW1lbnQgKi8sIHR5cGUgLyogOlN0cmluZyAqLywgYnViYmxlcyAvKiA6Qm9vbGVhbiAqLywgY2FuY2VsYWJsZSAvKiA6Qm9vbGVhbiAqLywgdmlldyAvKiA6V2luZG93ICovLCBkZXRhaWwgLyogOmludCAqLywgc2NyZWVuWCAvKiA6aW50ICovLCBzY3JlZW5ZIC8qIDppbnQgKi8sIGNsaWVudFggLyogOmludCAqLywgY2xpZW50WSAvKiA6aW50ICovLCBjdHJsS2V5IC8qIDpCb29sZWFuICovLCBhbHRLZXkgLyogOkJvb2xlYW4gKi8sIHNoaWZ0S2V5IC8qIDpCb29sZWFuICovLCBtZXRhS2V5IC8qIDpCb29sZWFuICovLCBidXR0b24gLyogOmludCAqLywgcmVsYXRlZFRhcmdldCAvKiA6SFRNTEVsZW1lbnQgKi8sYnV0dG9uKSAvKiA6Vm9pZCAqLyB7CgogICAgICAgIC8vIGNoZWNrIHRhcmdldAogICAgICAgIHRhcmdldCA9IHR5cGVvZiB0YXJnZXQgPT0gJ3N0cmluZycgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXQpCiAgICAgICAgICAgIDogdGFyZ2V0OwogICAgICAgIGlmICghdGFyZ2V0KSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigic2ltdWxhdGVNb3VzZUV2ZW50KCk6IEludmFsaWQgdGFyZ2V0LiIpOwogICAgICAgIH0KCiAgICAgICAgLy8gY2hlY2sgZXZlbnQgdHlwZQogICAgICAgIGlmICh0aGlzLmlzcyh0eXBlKSkgewogICAgICAgICAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHsKICAgICAgICAgICAgICAgIGNhc2UgIm1vdXNlb3ZlciI6CiAgICAgICAgICAgICAgICBjYXNlICJtb3VzZW91dCI6CiAgICAgICAgICAgICAgICBjYXNlICJtb3VzZWRvd24iOgogICAgICAgICAgICAgICAgY2FzZSAibW91c2V1cCI6CiAgICAgICAgICAgICAgICBjYXNlICJjbGljayI6CiAgICAgICAgICAgICAgICBjYXNlICJkYmxjbGljayI6CiAgICAgICAgICAgICAgICBjYXNlICJtb3VzZW1vdmUiOgogICAgICAgICAgICAgICAgY2FzZSAibW91c2VlbnRlciI6Ly8g6Z2e5qCH5YeG5pSv5oyB77yM5LuF5Li65rWL6K+V5o+Q5L6b77yM6K+l6aG55LuFSUXkuIt3b3JrCiAgICAgICAgICAgICAgICBjYXNlICJtb3VzZWxlYXZlIjoKICAgICAgICAgICAgICAgIGNhc2UgImNvbnRleHRtZW51IjoKICAgICAgICAgICAgICAgIGNhc2UgImRyYWdlbmQiOgogICAgICAgICAgICAgICAgY2FzZSAiYmx1ciI6CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigic2ltdWxhdGVNb3VzZUV2ZW50KCk6IEV2ZW50IHR5cGUgJyIgKyB0eXBlCiAgICAgICAgICAgICAgICAgICAgICAgICsgIicgbm90IHN1cHBvcnRlZC4iKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAgICJzaW11bGF0ZU1vdXNlRXZlbnQoKTogRXZlbnQgdHlwZSBtdXN0IGJlIGEgc3RyaW5nLiIpOwogICAgICAgIH0KCiAgICAgICAgLy8gc2V0dXAgZGVmYXVsdCB2YWx1ZXMKICAgICAgICBpZiAoIXRoaXMuaXNiKGJ1YmJsZXMpKSB7CiAgICAgICAgICAgIGJ1YmJsZXMgPSB0cnVlOyAvLyBhbGwgbW91c2UgZXZlbnRzIGJ1YmJsZQogICAgICAgIH0KICAgICAgICBpZiAoIXRoaXMuaXNiKGNhbmNlbGFibGUpKSB7CiAgICAgICAgICAgIGNhbmNlbGFibGUgPSAodHlwZSAhPSAibW91c2Vtb3ZlIik7IC8vIG1vdXNlbW92ZSBpcyB0aGUgb25seSBvbmUKICAgICAgICAgICAgLy8gdGhhdCBjYW4ndCBiZSBjYW5jZWxsZWQKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzbyh2aWV3KSkgewogICAgICAgICAgICB2aWV3ID0gd2luZG93OyAvLyB2aWV3IGlzIHR5cGljYWxseSB3aW5kb3cKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzbihkZXRhaWwpKSB7CiAgICAgICAgICAgIGRldGFpbCA9IDE7IC8vIG51bWJlciBvZiBtb3VzZSBjbGlja3MgbXVzdCBiZSBhdCBsZWFzdCBvbmUKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzbihzY3JlZW5YKSkgewogICAgICAgICAgICBzY3JlZW5YID0gMDsKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzbihzY3JlZW5ZKSkgewogICAgICAgICAgICBzY3JlZW5ZID0gMDsKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzbihjbGllbnRYKSkgewogICAgICAgICAgICBjbGllbnRYID0gMDsKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzbihjbGllbnRZKSkgewogICAgICAgICAgICBjbGllbnRZID0gMDsKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzYihjdHJsS2V5KSkgewogICAgICAgICAgICBjdHJsS2V5ID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmICghdGhpcy5pc2IoYWx0S2V5KSkgewogICAgICAgICAgICBhbHRLZXkgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzYihzaGlmdEtleSkpIHsKICAgICAgICAgICAgc2hpZnRLZXkgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmlzYihtZXRhS2V5KSkgewogICAgICAgICAgICBtZXRhS2V5ID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIGlmICghdGhpcy5pc24oYnV0dG9uKSkgewogICAgICAgICAgICBidXR0b24gPSAwOwogICAgICAgIH0KICAgICAgICAvLyB0cnkgdG8gY3JlYXRlIGEgbW91c2UgZXZlbnQKICAgICAgICB2YXIgY3VzdG9tRXZlbnQgLyogOk1vdXNlRXZlbnQgKi8gPSBudWxsOwoKICAgICAgICAvLyBjaGVjayBmb3IgRE9NLWNvbXBsaWFudCBicm93c2VycyBmaXJzdAogICAgICAgIGlmICh0aGlzLmlzZihkb2N1bWVudC5jcmVhdGVFdmVudCkpIHsKCiAgICAgICAgICAgIGN1c3RvbUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoIk1vdXNlRXZlbnRzIik7CiAgICAgICAgICAgIC8vIFNhZmFyaSAyLnggKFdlYktpdCA0MTgpIHN0aWxsIGRvZXNuJ3QgaW1wbGVtZW50IGluaXRNb3VzZUV2ZW50KCkKICAgICAgICAgICAgaWYgKHRoaXMuYnJvd3Nlci5pZSA8IDkgJiYgY3VzdG9tRXZlbnQuaW5pdE1vdXNlRXZlbnQpIHsKCiAgICAgICAgICAgICAgICBjdXN0b21FdmVudC5pbml0TW91c2VFdmVudCh0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlLCB2aWV3LAogICAgICAgICAgICAgICAgICAgIGRldGFpbCwgc2NyZWVuWCwgc2NyZWVuWSwgY2xpZW50WCwgY2xpZW50WSwgY3RybEtleSwKICAgICAgICAgICAgICAgICAgICBhbHRLZXksIHNoaWZ0S2V5LCBtZXRhS2V5LCBidXR0b24sIHJlbGF0ZWRUYXJnZXQpOwogICAgICAgICAgICB9IGVsc2UgeyAvLyBTYWZhcmkKCiAgICAgICAgICAgICAgICAvLyB0aGUgY2xvc2VzdCB0aGluZyBhdmFpbGFibGUgaW4gU2FmYXJpIDIueCBpcyBVSUV2ZW50cwogICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgiVUlFdmVudHMiKTsKICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50LmluaXRFdmVudCh0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlKTsKICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50LnZpZXcgPSB2aWV3OwogICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQuZGV0YWlsID0gZGV0YWlsOwogICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQuc2NyZWVuWCA9IHNjcmVlblg7CiAgICAgICAgICAgICAgICBjdXN0b21FdmVudC5zY3JlZW5ZID0gc2NyZWVuWTsKICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50LmNsaWVudFggPSBjbGllbnRYOwogICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQuY2xpZW50WSA9IGNsaWVudFk7CiAgICAgICAgICAgICAgICBjdXN0b21FdmVudC5jdHJsS2V5ID0gY3RybEtleTsKICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50LmFsdEtleSA9IGFsdEtleTsKICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50Lm1ldGFLZXkgPSBtZXRhS2V5OwogICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQuc2hpZnRLZXkgPSBzaGlmdEtleTsKICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50LmJ1dHRvbiA9IGJ1dHRvbjsKICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50LnJlbGF0ZWRUYXJnZXQgPSByZWxhdGVkVGFyZ2V0OwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKgogICAgICAgICAgICAgKiBDaGVjayB0byBzZWUgaWYgcmVsYXRlZFRhcmdldCBoYXMgYmVlbiBhc3NpZ25lZC4gRmlyZWZveCB2ZXJzaW9ucwogICAgICAgICAgICAgKiBsZXNzIHRoYW4gMi4wIGRvbid0IGFsbG93IGl0IHRvIGJlIGFzc2lnbmVkIHZpYSBpbml0TW91c2VFdmVudCgpCiAgICAgICAgICAgICAqIGFuZCB0aGUgcHJvcGVydHkgaXMgcmVhZG9ubHkgYWZ0ZXIgZXZlbnQgY3JlYXRpb24sIHNvIGluIG9yZGVyIHRvCiAgICAgICAgICAgICAqIGtlZXAgWUFIT08udXRpbC5nZXRSZWxhdGVkVGFyZ2V0KCkgd29ya2luZywgYXNzaWduIHRvIHRoZSBJRQogICAgICAgICAgICAgKiBwcm9wcmlldGFyeSB0b0VsZW1lbnQgcHJvcGVydHkgZm9yIG1vdXNlb3V0IGV2ZW50IGFuZCBmcm9tRWxlbWVudAogICAgICAgICAgICAgKiBwcm9wZXJ0eSBmb3IgbW91c2VvdmVyIGV2ZW50LgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgaWYgKHJlbGF0ZWRUYXJnZXQgJiYgIWN1c3RvbUV2ZW50LnJlbGF0ZWRUYXJnZXQpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICJtb3VzZW91dCIpIHsKICAgICAgICAgICAgICAgICAgICBjdXN0b21FdmVudC50b0VsZW1lbnQgPSByZWxhdGVkVGFyZ2V0OwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09ICJtb3VzZW92ZXIiKSB7CiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQuZnJvbUVsZW1lbnQgPSByZWxhdGVkVGFyZ2V0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBiZWZvcmUgZGlzcGF0Y2gKICAgICAgICAgICAgaWYgKHRoaXMuYmVmb3JlZGlzcGF0Y2ggJiYgdHlwZW9mIHRoaXMuYmVmb3JlZGlzcGF0Y2ggPT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgICAgIHRoaXMuYmVmb3JlZGlzcGF0Y2goY3VzdG9tRXZlbnQpOwogICAgICAgICAgICB0aGlzLmJlZm9yZWRpc3BhdGNoID0gbnVsbDsKCiAgICAgICAgICAgIC8vIGZpcmUgdGhlIGV2ZW50CiAgICAgICAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KGN1c3RvbUV2ZW50KTsKCiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzbyhkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCkpIHsgLy8gSUUKCiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBJRSBldmVudCBvYmplY3QKICAgICAgICAgICAgY3VzdG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpOwoKICAgICAgICAgICAgLy8gYXNzaWduIGF2YWlsYWJsZSBwcm9wZXJ0aWVzCiAgICAgICAgICAgIGN1c3RvbUV2ZW50LmJ1YmJsZXMgPSBidWJibGVzOwogICAgICAgICAgICBjdXN0b21FdmVudC5jYW5jZWxhYmxlID0gY2FuY2VsYWJsZTsKICAgICAgICAgICAgY3VzdG9tRXZlbnQudmlldyA9IHZpZXc7CiAgICAgICAgICAgIGN1c3RvbUV2ZW50LmRldGFpbCA9IGRldGFpbDsKICAgICAgICAgICAgY3VzdG9tRXZlbnQuc2NyZWVuWCA9IHNjcmVlblg7CiAgICAgICAgICAgIGN1c3RvbUV2ZW50LnNjcmVlblkgPSBzY3JlZW5ZOwogICAgICAgICAgICBjdXN0b21FdmVudC5jbGllbnRYID0gY2xpZW50WDsKICAgICAgICAgICAgY3VzdG9tRXZlbnQuY2xpZW50WSA9IGNsaWVudFk7CiAgICAgICAgICAgIGN1c3RvbUV2ZW50LmN0cmxLZXkgPSBjdHJsS2V5OwogICAgICAgICAgICBjdXN0b21FdmVudC5hbHRLZXkgPSBhbHRLZXk7CiAgICAgICAgICAgIGN1c3RvbUV2ZW50Lm1ldGFLZXkgPSBtZXRhS2V5OwogICAgICAgICAgICBjdXN0b21FdmVudC5zaGlmdEtleSA9IHNoaWZ0S2V5OwoKICAgICAgICAgICAgLy8gZml4IGJ1dHRvbiBwcm9wZXJ0eSBmb3IgSUUncyB3YWNreSBpbXBsZW1lbnRhdGlvbgogICAgICAgICAgICBzd2l0Y2ggKGJ1dHRvbikgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50LmJ1dHRvbiA9IDE7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRXZlbnQuYnV0dG9uID0gNDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICBjdXN0b21FdmVudC5idXR0b24gPSAyOwogICAgICAgICAgICAgICAgICAgIC8vIGxlYXZlIGFzIGlzCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIGN1c3RvbUV2ZW50LmJ1dHRvbiA9IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8qCiAgICAgICAgICAgICAqIEhhdmUgdG8gdXNlIHJlbGF0ZWRUYXJnZXQgYmVjYXVzZSBJRSB3b24ndCBhbGxvdyBhc3NpZ25tZW50IHRvCiAgICAgICAgICAgICAqIHRvRWxlbWVudCBvciBmcm9tRWxlbWVudCBvbiBnZW5lcmljIGV2ZW50cy4gVGhpcyBrZWVwcwogICAgICAgICAgICAgKiBZQUhPTy51dGlsLmN1c3RvbUV2ZW50LmdldFJlbGF0ZWRUYXJnZXQoKSBmdW5jdGlvbmFsLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgY3VzdG9tRXZlbnQucmVsYXRlZFRhcmdldCA9IHJlbGF0ZWRUYXJnZXQ7CgogICAgICAgICAgICAvLyBiZWZvcmUgZGlzcGF0Y2gKICAgICAgICAgICAgaWYgKHRoaXMuYmVmb3JlZGlzcGF0Y2ggJiYgdHlwZW9mIHRoaXMuYmVmb3JlZGlzcGF0Y2ggPT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgICAgIHRoaXMuYmVmb3JlZGlzcGF0Y2goY3VzdG9tRXZlbnQpOwogICAgICAgICAgICB0aGlzLmJlZm9yZWRpc3BhdGNoID0gbnVsbDsKICAgICAgICAgICAgLy8gZmlyZSB0aGUgZXZlbnQKICAgICAgICAgICAgdGFyZ2V0LmZpcmVFdmVudCgib24iICsgdHlwZSwgY3VzdG9tRXZlbnQpOwoKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgICAgICAic2ltdWxhdGVNb3VzZUV2ZW50KCk6IE5vIGV2ZW50IHNpbXVsYXRpb24gZnJhbWV3b3JrIHByZXNlbnQuIik7CiAgICAgICAgfQogICAgfSwKCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgLy8gTW91c2UgZXZlbnRzCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8qKgogICAgICogU2ltdWxhdGVzIGEgbW91c2UgZXZlbnQgb24gYSBwYXJ0aWN1bGFyIGVsZW1lbnQuCiAgICAgKgogICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0KICAgICAgICAqICAgICAgICAgICAgdGFyZ2V0IFRoZSBlbGVtZW50IHRvIGNsaWNrIG9uLgogICAgICogQHBhcmFtIHtTdHJpbmd9CiAgICAgICAgKiAgICAgICAgICAgIHR5cGUgVGhlIHR5cGUgb2YgZXZlbnQgdG8gZmlyZS4gVGhpcyBjYW4gYmUgYW55IG9uZSBvZiB0aGUKICAgICAqICAgICAgICAgICAgZm9sbG93aW5nOiBjbGljaywgZGJsY2xpY2ssIG1vdXNlZG93biwgbW91c2V1cCwgbW91c2VvdXQsCiAgICAgKiAgICAgICAgICAgIG1vdXNlb3ZlciwgYW5kIG1vdXNlbW92ZS4KICAgICAqIEBwYXJhbSB7T2JqZWN0fQogICAgICAgICogICAgICAgICAgICBvcHRpb25zIEFkZGl0aW9uYWwgZXZlbnQgb3B0aW9ucyAodXNlIERPTSBzdGFuZGFyZCBuYW1lcykuCiAgICAgKiBAbWV0aG9kIG1vdXNlRXZlbnQKICAgICAqIEBzdGF0aWMKICAgICAqLwogICAgZmlyZU1vdXNlRXZlbnQ6ZnVuY3Rpb24gKHRhcmdldCAvKiA6SFRNTEVsZW1lbnQgKi8sIHR5cGUgLyogOlN0cmluZyAqLywgb3B0aW9ucyAvKiA6T2JqZWN0ICovKSAvKiA6Vm9pZCAqLyB7CiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgdGhpcy5zaW11bGF0ZU1vdXNlRXZlbnQodGFyZ2V0LCB0eXBlLCBvcHRpb25zLmJ1YmJsZXMsCiAgICAgICAgICAgIG9wdGlvbnMuY2FuY2VsYWJsZSwgb3B0aW9ucy52aWV3LCBvcHRpb25zLmRldGFpbCwKICAgICAgICAgICAgb3B0aW9ucy5zY3JlZW5YLCBvcHRpb25zLnNjcmVlblksIG9wdGlvbnMuY2xpZW50WCwKICAgICAgICAgICAgb3B0aW9ucy5jbGllbnRZLCBvcHRpb25zLmN0cmxLZXksIG9wdGlvbnMuYWx0S2V5LAogICAgICAgICAgICBvcHRpb25zLnNoaWZ0S2V5LCBvcHRpb25zLm1ldGFLZXksIG9wdGlvbnMuYnV0dG9uLAogICAgICAgICAgICBvcHRpb25zLnJlbGF0ZWRUYXJnZXQsb3B0aW9ucy5idXR0b24pOwogICAgfSwKCiAgICAvKioKICAgICAqIFNpbXVsYXRlcyBhIGNsaWNrIG9uIGEgcGFydGljdWxhciBlbGVtZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9CiAgICAgICAgKiAgICAgICAgICAgIHRhcmdldCBUaGUgZWxlbWVudCB0byBjbGljayBvbi4KICAgICAqIEBwYXJhbSB7T2JqZWN0fQogICAgICAgICogICAgICAgICAgICBvcHRpb25zIEFkZGl0aW9uYWwgZXZlbnQgb3B0aW9ucyAodXNlIERPTSBzdGFuZGFyZCBuYW1lcykuCiAgICAgKiBAbWV0aG9kIGNsaWNrCiAgICAgKiBAc3RhdGljCiAgICAgKi8KICAgIGNsaWNrOmZ1bmN0aW9uICh0YXJnZXQgLyogOkhUTUxFbGVtZW50ICovLCBvcHRpb25zIC8qIDpPYmplY3QgKi8pIC8qIDpWb2lkICovIHsKICAgICAgICB0aGlzLmZpcmVNb3VzZUV2ZW50KHRhcmdldCwgImNsaWNrIiwgb3B0aW9ucyk7CiAgICB9LAoKICAgIC8qKgogICAgICogU2ltdWxhdGVzIGEgZG91YmxlIGNsaWNrIG9uIGEgcGFydGljdWxhciBlbGVtZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9CiAgICAgICAgKiAgICAgICAgICAgIHRhcmdldCBUaGUgZWxlbWVudCB0byBkb3VibGUgY2xpY2sgb24uCiAgICAgKiBAcGFyYW0ge09iamVjdH0KICAgICAgICAqICAgICAgICAgICAgb3B0aW9ucyBBZGRpdGlvbmFsIGV2ZW50IG9wdGlvbnMgKHVzZSBET00gc3RhbmRhcmQgbmFtZXMpLgogICAgICogQG1ldGhvZCBkYmxjbGljawogICAgICogQHN0YXRpYwogICAgICovCiAgICBkYmxjbGljazpmdW5jdGlvbiAodGFyZ2V0IC8qIDpIVE1MRWxlbWVudCAqLywgb3B0aW9ucyAvKiA6T2JqZWN0ICovKSAvKiA6Vm9pZCAqLyB7CiAgICAgICAgdGhpcy5maXJlTW91c2VFdmVudCh0YXJnZXQsICJkYmxjbGljayIsIG9wdGlvbnMpOwogICAgfSwKCiAgICAvKioKICAgICAqIFNpbXVsYXRlcyBhIG1vdXNlZG93biBvbiBhIHBhcnRpY3VsYXIgZWxlbWVudC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fQogICAgICAgICogICAgICAgICAgICB0YXJnZXQgVGhlIGVsZW1lbnQgdG8gYWN0IG9uLgogICAgICogQHBhcmFtIHtPYmplY3R9CiAgICAgICAgKiAgICAgICAgICAgIG9wdGlvbnMgQWRkaXRpb25hbCBldmVudCBvcHRpb25zICh1c2UgRE9NIHN0YW5kYXJkIG5hbWVzKS4KICAgICAqIEBtZXRob2QgbW91c2Vkb3duCiAgICAgKiBAc3RhdGljCiAgICAgKi8KICAgIG1vdXNlZG93bjpmdW5jdGlvbiAodGFyZ2V0IC8qIDpIVE1MRWxlbWVudCAqLywgb3B0aW9ucyAvKiBPYmplY3QgKi8pIC8qIDpWb2lkICovIHsKICAgICAgICB0aGlzLmZpcmVNb3VzZUV2ZW50KHRhcmdldCwgIm1vdXNlZG93biIsIG9wdGlvbnMpOwogICAgfSwKCiAgICAvKioKICAgICAqIFNpbXVsYXRlcyBhIG1vdXNlbW92ZSBvbiBhIHBhcnRpY3VsYXIgZWxlbWVudC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fQogICAgICAgICogICAgICAgICAgICB0YXJnZXQgVGhlIGVsZW1lbnQgdG8gYWN0IG9uLgogICAgICogQHBhcmFtIHtPYmplY3R9CiAgICAgICAgKiAgICAgICAgICAgIG9wdGlvbnMgQWRkaXRpb25hbCBldmVudCBvcHRpb25zICh1c2UgRE9NIHN0YW5kYXJkIG5hbWVzKS4KICAgICAqIEBtZXRob2QgbW91c2Vtb3ZlCiAgICAgKiBAc3RhdGljCiAgICAgKi8KICAgIG1vdXNlbW92ZTpmdW5jdGlvbiAodGFyZ2V0IC8qIDpIVE1MRWxlbWVudCAqLywgb3B0aW9ucyAvKiBPYmplY3QgKi8pIC8qIDpWb2lkICovIHsKICAgICAgICB0aGlzLmZpcmVNb3VzZUV2ZW50KHRhcmdldCwgIm1vdXNlbW92ZSIsIG9wdGlvbnMpOwogICAgfSwKCiAgICAvKioKICAgICAqIFNpbXVsYXRlcyBhIG1vdXNlb3V0IGV2ZW50IG9uIGEgcGFydGljdWxhciBlbGVtZW50LiBVc2UgInJlbGF0ZWRUYXJnZXQiCiAgICAgKiBvbiB0aGUgb3B0aW9ucyBvYmplY3QgdG8gc3BlY2lmeSB3aGVyZSB0aGUgbW91c2UgbW92ZWQgdG8uIFF1aXJrczoKICAgICAqIEZpcmVmb3ggbGVzcyB0aGFuIDIuMCBkb2Vzbid0IHNldCByZWxhdGVkVGFyZ2V0IHByb3Blcmx5LCBzbyB0b0VsZW1lbnQgaXMKICAgICAqIGFzc2lnbmVkIGluIGl0cyBwbGFjZS4gSUUgZG9lc24ndCBhbGxvdyB0b0VsZW1lbnQgdG8gYmUgYmUgYXNzaWduZWQsIHNvCiAgICAgKiByZWxhdGVkVGFyZ2V0IGlzIGFzc2lnbmVkIGluIGl0cyBwbGFjZS4gQm90aCBvZiB0aGVzZSBjb25jZXNzaW9ucyBhbGxvdwogICAgICogWUFIT08udXRpbC5FdmVudC5nZXRSZWxhdGVkVGFyZ2V0KCkgdG8gd29yayBjb3JyZWN0bHkgaW4gYm90aCBicm93c2Vycy4KICAgICAqCiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fQogICAgICAgICogICAgICAgICAgICB0YXJnZXQgVGhlIGVsZW1lbnQgdG8gYWN0IG9uLgogICAgICogQHBhcmFtIHtPYmplY3R9CiAgICAgICAgKiAgICAgICAgICAgIG9wdGlvbnMgQWRkaXRpb25hbCBldmVudCBvcHRpb25zICh1c2UgRE9NIHN0YW5kYXJkIG5hbWVzKS4KICAgICAqIEBtZXRob2QgbW91c2VvdXQKICAgICAqIEBzdGF0aWMKICAgICAqLwogICAgbW91c2VvdXQ6ZnVuY3Rpb24gKHRhcmdldCAvKiA6SFRNTEVsZW1lbnQgKi8sIG9wdGlvbnMgLyogT2JqZWN0ICovKSAvKiA6Vm9pZCAqLyB7CiAgICAgICAgdGhpcy5maXJlTW91c2VFdmVudCh0YXJnZXQsICJtb3VzZW91dCIsIG9wdGlvbnMpOwogICAgfSwKCiAgICAvKioKICAgICAqIFNpbXVsYXRlcyBhIG1vdXNlb3ZlciBldmVudCBvbiBhIHBhcnRpY3VsYXIgZWxlbWVudC4gVXNlICJyZWxhdGVkVGFyZ2V0IgogICAgICogb24gdGhlIG9wdGlvbnMgb2JqZWN0IHRvIHNwZWNpZnkgd2hlcmUgdGhlIG1vdXNlIG1vdmVkIGZyb20uIFF1aXJrczoKICAgICAqIEZpcmVmb3ggbGVzcyB0aGFuIDIuMCBkb2Vzbid0IHNldCByZWxhdGVkVGFyZ2V0IHByb3Blcmx5LCBzbyBmcm9tRWxlbWVudAogICAgICogaXMgYXNzaWduZWQgaW4gaXRzIHBsYWNlLiBJRSBkb2Vzbid0IGFsbG93IGZyb21FbGVtZW50IHRvIGJlIGJlIGFzc2lnbmVkLAogICAgICogc28gcmVsYXRlZFRhcmdldCBpcyBhc3NpZ25lZCBpbiBpdHMgcGxhY2UuIEJvdGggb2YgdGhlc2UgY29uY2Vzc2lvbnMKICAgICAqIGFsbG93IFlBSE9PLnV0aWwuRXZlbnQuZ2V0UmVsYXRlZFRhcmdldCgpIHRvIHdvcmsgY29ycmVjdGx5IGluIGJvdGgKICAgICAqIGJyb3dzZXJzLgogICAgICoKICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9CiAgICAgICAgKiAgICAgICAgICAgIHRhcmdldCBUaGUgZWxlbWVudCB0byBhY3Qgb24uCiAgICAgKiBAcGFyYW0ge09iamVjdH0KICAgICAgICAqICAgICAgICAgICAgb3B0aW9ucyBBZGRpdGlvbmFsIGV2ZW50IG9wdGlvbnMgKHVzZSBET00gc3RhbmRhcmQgbmFtZXMpLgogICAgICogQG1ldGhvZCBtb3VzZW92ZXIKICAgICAqIEBzdGF0aWMKICAgICAqLwogICAgbW91c2VvdmVyOmZ1bmN0aW9uICh0YXJnZXQgLyogOkhUTUxFbGVtZW50ICovLCBvcHRpb25zIC8qIE9iamVjdCAqLykgLyogOlZvaWQgKi8gewogICAgICAgIHRoaXMuZmlyZU1vdXNlRXZlbnQodGFyZ2V0LCAibW91c2VvdmVyIiwgb3B0aW9ucyk7CiAgICB9LAoKICAgIC8qKgogICAgICogU2ltdWxhdGVzIGEgbW91c2V1cCBvbiBhIHBhcnRpY3VsYXIgZWxlbWVudC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fQogICAgICAgICogICAgICAgICAgICB0YXJnZXQgVGhlIGVsZW1lbnQgdG8gYWN0IG9uLgogICAgICogQHBhcmFtIHtPYmplY3R9CiAgICAgICAgKiAgICAgICAgICAgIG9wdGlvbnMgQWRkaXRpb25hbCBldmVudCBvcHRpb25zICh1c2UgRE9NIHN0YW5kYXJkIG5hbWVzKS4KICAgICAqIEBtZXRob2QgbW91c2V1cAogICAgICogQHN0YXRpYwogICAgICovCiAgICBtb3VzZXVwOmZ1bmN0aW9uICh0YXJnZXQgLyogOkhUTUxFbGVtZW50ICovLCBvcHRpb25zIC8qIE9iamVjdCAqLykgLyogOlZvaWQgKi8gewogICAgICAgIHRoaXMuZmlyZU1vdXNlRXZlbnQodGFyZ2V0LCAibW91c2V1cCIsIG9wdGlvbnMpOwogICAgfSwKICAgIG1vdXNlZW50ZXI6ZnVuY3Rpb24gKHRhcmdldCAvKiA6SFRNTEVsZW1lbnQgKi8sIG9wdGlvbnMgLyogT2JqZWN0ICovKSAvKiA6Vm9pZCAqLyB7CiAgICAgICAgdGhpcy5maXJlTW91c2VFdmVudCh0YXJnZXQsICJtb3VzZWVudGVyIiwgb3B0aW9ucyk7CiAgICB9LAogICAgbW91c2VsZWF2ZTpmdW5jdGlvbiAodGFyZ2V0IC8qIDpIVE1MRWxlbWVudCAqLywgb3B0aW9ucyAvKiBPYmplY3QgKi8pIC8qIDpWb2lkICovIHsKICAgICAgICB0aGlzLmZpcmVNb3VzZUV2ZW50KHRhcmdldCwgIm1vdXNlbGVhdmUiLCBvcHRpb25zKTsKICAgIH0sCiAgICAvKioKICAgICAqIFNpbXVsYXRlcyBhIGNvbnRleHRtZW51IG9uIGEgcGFydGljdWxhciBlbGVtZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9CiAgICAgICAgKiAgICAgICAgICAgIHRhcmdldCBUaGUgZWxlbWVudCB0byBzaG93IGNvbnRleHRtZW51LgogICAgICogQHBhcmFtIHtPYmplY3R9CiAgICAgICAgKiAgICAgICAgICAgIG9wdGlvbnMgQWRkaXRpb25hbCBldmVudCBvcHRpb25zICh1c2UgRE9NIHN0YW5kYXJkIG5hbWVzKS4KICAgICAqIEBtZXRob2QgY29udGV4dG1lbnUKICAgICAqIEBzdGF0aWMKICAgICAqLwogICAgY29udGV4dG1lbnU6ZnVuY3Rpb24gKHRhcmdldCAvKiA6SFRNTEVsZW1lbnQgKi8sIG9wdGlvbnMgLyogOk9iamVjdCAqLykgLyogOlZvaWQgKi8gewogICAgICAgIHRoaXMuZmlyZU1vdXNlRXZlbnQodGFyZ2V0LCAiY29udGV4dG1lbnUiLCBvcHRpb25zKTsKICAgIH0sCiAgICAvKioKICAgICAqIFNpbXVsYXRlcyBhIGRyYWdlbmQgb24gYSBwYXJ0aWN1bGFyIGVsZW1lbnQuCiAgICAgKgogICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0KICAgICAgICAqICAgICAgICAgICAgdGFyZ2V0IFRoZSBlbGVtZW50IHRvIHNob3cgZHJhZ2VuZC4KICAgICAqIEBwYXJhbSB7T2JqZWN0fQogICAgICAgICogICAgICAgICAgICBvcHRpb25zIEFkZGl0aW9uYWwgZXZlbnQgb3B0aW9ucyAodXNlIERPTSBzdGFuZGFyZCBuYW1lcykuCiAgICAgKiBAbWV0aG9kIGRyYWdlbmQKICAgICAqIEBzdGF0aWMKICAgICAqLwogICAgZHJhZ2VuZDpmdW5jdGlvbiAodGFyZ2V0IC8qIDpIVE1MRWxlbWVudCAqLywgb3B0aW9ucyAvKiA6T2JqZWN0ICovKSAvKiA6Vm9pZCAqLyB7CiAgICAgICAgdGhpcy5maXJlTW91c2VFdmVudCh0YXJnZXQsICJkcmFnZW5kIiwgb3B0aW9ucyk7CiAgICB9LAogICAgLyoqCiAgICAgKiBTaW11bGF0ZXMgYSBibHVyIG9uIGEgcGFydGljdWxhciBlbGVtZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9CiAgICAgICAgKiAgICAgICAgICAgIHRhcmdldCBUaGUgZWxlbWVudCB0byBzaG93IGJsdXIuCiAgICAgKiBAcGFyYW0ge09iamVjdH0KICAgICAgICAqICAgICAgICAgICAgb3B0aW9ucyBBZGRpdGlvbmFsIGV2ZW50IG9wdGlvbnMgKHVzZSBET00gc3RhbmRhcmQgbmFtZXMpLgogICAgICogQG1ldGhvZCBibHVyCiAgICAgKiBAc3RhdGljCiAgICAgKi8KICAgIGJsdXI6ZnVuY3Rpb24gKHRhcmdldCAvKiA6SFRNTEVsZW1lbnQgKi8sIG9wdGlvbnMgLyogOk9iamVjdCAqLykgLyogOlZvaWQgKi8gewogICAgICAgIHRoaXMuZmlyZU1vdXNlRXZlbnQodGFyZ2V0LCAiYmx1ciIsIG9wdGlvbnMpOwogICAgfSwKICAgIGRyYWd0bzpmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7CiAgICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgICBtZS5tb3VzZW1vdmUodGFyZ2V0LCB7CiAgICAgICAgICAgIGNsaWVudFg6b3B0aW9ucy5zdGFydFgsCiAgICAgICAgICAgIGNsaWVudFk6b3B0aW9ucy5zdGFydFkKICAgICAgICB9KTsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgbWUubW91c2Vkb3duKHRhcmdldCwgewogICAgICAgICAgICAgICAgY2xpZW50WDpvcHRpb25zLnN0YXJ0WCwKICAgICAgICAgICAgICAgIGNsaWVudFk6b3B0aW9ucy5zdGFydFkKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgbWUubW91c2Vtb3ZlKHRhcmdldCwgewogICAgICAgICAgICAgICAgICAgIGNsaWVudFg6b3B0aW9ucy5lbmRYLAogICAgICAgICAgICAgICAgICAgIGNsaWVudFk6b3B0aW9ucy5lbmRZCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIG1lLm1vdXNldXAodGFyZ2V0LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudFg6b3B0aW9ucy5lbmRYLAogICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRZOm9wdGlvbnMuZW5kWQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNhbGxiYWNrKQogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgICB9LCBvcHRpb25zLmFmdGVybW92ZSB8fCAyMCk7CiAgICAgICAgICAgIH0sIG9wdGlvbnMuYmVmb3JlbW92ZSB8fCAyMCk7CiAgICAgICAgfSwgb3B0aW9ucy5iZWZvcmVzdGFydCB8fCA1MCk7CiAgICB9LAoKICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAvLyBLZXkgZXZlbnRzCiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8qKgogICAgICogRmlyZXMgYW4gZXZlbnQgdGhhdCBub3JtYWxseSB3b3VsZCBiZSBmaXJlZCBieSB0aGUga2V5Ym9hcmQgKGtleXVwLAogICAgICoga2V5ZG93biwga2V5cHJlc3MpLiBNYWtlIHN1cmUgdG8gc3BlY2lmeSBlaXRoZXIga2V5Q29kZSBvciBjaGFyQ29kZSBhcyBhbgogICAgICogb3B0aW9uLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0ge1N0cmluZ30KICAgICAgICAqICAgICAgICAgICAgdHlwZSBUaGUgdHlwZSBvZiBldmVudCAoImtleXVwIiwgImtleWRvd24iIG9yICJrZXlwcmVzcyIpLgogICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0KICAgICAgICAqICAgICAgICAgICAgdGFyZ2V0IFRoZSB0YXJnZXQgb2YgdGhlIGV2ZW50LgogICAgICogQHBhcmFtIHtPYmplY3R9CiAgICAgICAgKiAgICAgICAgICAgIG9wdGlvbnMgT3B0aW9ucyBmb3IgdGhlIGV2ZW50LiBFaXRoZXIga2V5Q29kZSBvciBjaGFyQ29kZSBhcmUKICAgICAqICAgICAgICAgICAgcmVxdWlyZWQuCiAgICAgKiBAbWV0aG9kIGZpcmVLZXlFdmVudAogICAgICogQHN0YXRpYwogICAgICovCiAgICBmaXJlS2V5RXZlbnQ6ZnVuY3Rpb24gKHR5cGUgLyogOlN0cmluZyAqLywgdGFyZ2V0IC8qIDpIVE1MRWxlbWVudCAqLywgb3B0aW9ucyAvKiA6T2JqZWN0ICovKSAvKiA6Vm9pZCAqLyB7CiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgICAgdGhpcy5zaW11bGF0ZUtleUV2ZW50KHRhcmdldCwgdHlwZSwgb3B0aW9ucy5idWJibGVzLAogICAgICAgICAgICBvcHRpb25zLmNhbmNlbGFibGUsIG9wdGlvbnMudmlldywgb3B0aW9ucy5jdHJsS2V5LAogICAgICAgICAgICBvcHRpb25zLmFsdEtleSwgb3B0aW9ucy5zaGlmdEtleSwgb3B0aW9ucy5tZXRhS2V5LAogICAgICAgICAgICBvcHRpb25zLmtleUNvZGUsIG9wdGlvbnMuY2hhckNvZGUpOwogICAgfSwKCiAgICAvKioKICAgICAqIFNpbXVsYXRlcyBhIGN1dCBldmVudCBvbiBhIHBhcnRpY3VsYXIgZWxlbWVudC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fQogICAgICAgICogICAgICAgICAgICB0YXJnZXQgVGhlIGVsZW1lbnQgdG8gYWN0IG9uLgogICAgICogQHBhcmFtIHtPYmplY3R9CiAgICAgICAgKiAgICAgICAgICAgIG9wdGlvbnMgQWRkaXRpb25hbCBldmVudCBvcHRpb25zICh1c2UgRE9NIHN0YW5kYXJkIG5hbWVzKS4KICAgICAqIEBtZXRob2QgY3V0CiAgICAgKiBAc3RhdGljCiAgICAgKi8KICAgIGN1dDpmdW5jdGlvbiAodGFyZ2V0IC8qIDpIVE1MRWxlbWVudCAqLywgb3B0aW9ucyAvKiA6T2JqZWN0ICovKSAvKiA6Vm9pZCAqLyB7CiAgICAgICAgdGhpcy5maXJlS2V5RXZlbnQoImN1dCIsIHRhcmdldCwgb3B0aW9ucyk7CiAgICB9LAoKICAgIC8qKgogICAgICogU2ltdWxhdGVzIGEgcGFzdGUgZXZlbnQgb24gYSBwYXJ0aWN1bGFyIGVsZW1lbnQuCiAgICAgKgogICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0KICAgICAgICAqICAgICAgICAgICAgdGFyZ2V0IFRoZSBlbGVtZW50IHRvIGFjdCBvbi4KICAgICAqIEBwYXJhbSB7T2JqZWN0fQogICAgICAgICogICAgICAgICAgICBvcHRpb25zIEFkZGl0aW9uYWwgZXZlbnQgb3B0aW9ucyAodXNlIERPTSBzdGFuZGFyZCBuYW1lcykuCiAgICAgKiBAbWV0aG9kIHBhc3RlCiAgICAgKiBAc3RhdGljCiAgICAgKi8KICAgIHBhc3RlOmZ1bmN0aW9uICggdGFyZ2V0IC8qIDpIVE1MRWxlbWVudCAqLywgb3B0aW9ucyAvKiA6T2JqZWN0ICovICkgLyogOlZvaWQgKi8gewogICAgICAgIHRoaXMuZmlyZUtleUV2ZW50KCAicGFzdGUiLCB0YXJnZXQsIG9wdGlvbnMgKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBTaW11bGF0ZXMgYSBrZXlkb3duIGV2ZW50IG9uIGEgcGFydGljdWxhciBlbGVtZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9CiAgICAgICAgKiAgICAgICAgICAgIHRhcmdldCBUaGUgZWxlbWVudCB0byBhY3Qgb24uCiAgICAgKiBAcGFyYW0ge09iamVjdH0KICAgICAgICAqICAgICAgICAgICAgb3B0aW9ucyBBZGRpdGlvbmFsIGV2ZW50IG9wdGlvbnMgKHVzZSBET00gc3RhbmRhcmQgbmFtZXMpLgogICAgICogQG1ldGhvZCBrZXlkb3duCiAgICAgKiBAc3RhdGljCiAgICAgKi8KICAgIGtleWRvd246ZnVuY3Rpb24gKHRhcmdldCAvKiA6SFRNTEVsZW1lbnQgKi8sIG9wdGlvbnMgLyogOk9iamVjdCAqLykgLyogOlZvaWQgKi8gewogICAgICAgIHRoaXMuZmlyZUtleUV2ZW50KCJrZXlkb3duIiwgdGFyZ2V0LCBvcHRpb25zKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBTaW11bGF0ZXMgYSBrZXlwcmVzcyBvbiBhIHBhcnRpY3VsYXIgZWxlbWVudC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fQogICAgICAgICogICAgICAgICAgICB0YXJnZXQgVGhlIGVsZW1lbnQgdG8gYWN0IG9uLgogICAgICogQHBhcmFtIHtPYmplY3R9CiAgICAgICAgKiAgICAgICAgICAgIG9wdGlvbnMgQWRkaXRpb25hbCBldmVudCBvcHRpb25zICh1c2UgRE9NIHN0YW5kYXJkIG5hbWVzKS4KICAgICAqIEBtZXRob2Qga2V5cHJlc3MKICAgICAqIEBzdGF0aWMKICAgICAqLwogICAga2V5cHJlc3M6ZnVuY3Rpb24gKHRhcmdldCAvKiA6SFRNTEVsZW1lbnQgKi8sIG9wdGlvbnMgLyogOk9iamVjdCAqLykgLyogOlZvaWQgKi8gewogICAgICAgIHRoaXMuZmlyZUtleUV2ZW50KCJrZXlwcmVzcyIsIHRhcmdldCwgb3B0aW9ucyk7CiAgICB9LAoKICAgIC8qKgogICAgICogU2ltdWxhdGVzIGEga2V5dXAgZXZlbnQgb24gYSBwYXJ0aWN1bGFyIGVsZW1lbnQuCiAgICAgKgogICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0KICAgICAgICAqICAgICAgICAgICAgdGFyZ2V0IFRoZSBlbGVtZW50IHRvIGFjdCBvbi4KICAgICAqIEBwYXJhbSB7T2JqZWN0fQogICAgICAgICogICAgICAgICAgICBvcHRpb25zIEFkZGl0aW9uYWwgZXZlbnQgb3B0aW9ucyAodXNlIERPTSBzdGFuZGFyZCBuYW1lcykuCiAgICAgKiBAbWV0aG9kIGtleXVwCiAgICAgKiBAc3RhdGljCiAgICAgKi8KICAgIGtleXVwOmZ1bmN0aW9uICh0YXJnZXQgLyogOkhUTUxFbGVtZW50ICovLCBvcHRpb25zIC8qIE9iamVjdCAqLykgLyogOlZvaWQgKi8gewogICAgICAgIHRoaXMuZmlyZUtleUV2ZW50KCJrZXl1cCIsIHRhcmdldCwgb3B0aW9ucyk7CiAgICB9LAoKICAgIC8qKgogICAgICogU2ltdWxhdGVzIGEgY29tcG9zaXRpb25zdGFydCBldmVudCBvbiBhIHBhcnRpY3VsYXIgZWxlbWVudC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fQogICAgICAgICogICAgICAgICAgICB0YXJnZXQgVGhlIGVsZW1lbnQgdG8gYWN0IG9uLgogICAgICogQHBhcmFtIHtPYmplY3R9CiAgICAgICAgKiAgICAgICAgICAgIG9wdGlvbnMgQWRkaXRpb25hbCBldmVudCBvcHRpb25zICh1c2UgRE9NIHN0YW5kYXJkIG5hbWVzKS4KICAgICAqIEBtZXRob2QgY29tcG9zaXRpb25zdGFydAogICAgICogQHN0YXRpYwogICAgICovCiAgICBjb21wb3NpdGlvbnN0YXJ0OmZ1bmN0aW9uICh0YXJnZXQgLyogOkhUTUxFbGVtZW50ICovLCBvcHRpb25zIC8qIE9iamVjdCAqLykgLyogOlZvaWQgKi8gewogICAgICAgIHRoaXMuZmlyZUtleUV2ZW50KCJjb21wb3NpdGlvbnN0YXJ0IiwgdGFyZ2V0LCBvcHRpb25zKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBTaW11bGF0ZXMgYSBjb21wb3NpdGlvbnN0YXJ0IGV2ZW50IG9uIGEgcGFydGljdWxhciBlbGVtZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9CiAgICAgICAgKiAgICAgICAgICAgIHRhcmdldCBUaGUgZWxlbWVudCB0byBhY3Qgb24uCiAgICAgKiBAcGFyYW0ge09iamVjdH0KICAgICAgICAqICAgICAgICAgICAgb3B0aW9ucyBBZGRpdGlvbmFsIGV2ZW50IG9wdGlvbnMgKHVzZSBET00gc3RhbmRhcmQgbmFtZXMpLgogICAgICogQG1ldGhvZCBjb21wb3NpdGlvbnN0YXJ0CiAgICAgKiBAc3RhdGljCiAgICAgKi8KICAgIGNvbXBvc2l0aW9uZW5kOmZ1bmN0aW9uICh0YXJnZXQgLyogOkhUTUxFbGVtZW50ICovLCBvcHRpb25zIC8qIE9iamVjdCAqLykgLyogOlZvaWQgKi8gewogICAgICAgIHRoaXMuZmlyZUtleUV2ZW50KCJjb21wb3NpdGlvbmVuZCIsIHRhcmdldCwgb3B0aW9ucyk7CiAgICB9LAoKICAgIC8qKgogICAgICog5o+Q5L6baWZyYW1l5omp5bGV5pSv5oyB77yM55So5L6L5rWL6K+V6ZyA6KaB54us56uL5Zy65pmv55qE55So5L6L77yM55Sx5LqO5byC5q2l5pSv5oyB77yM6YCa6L+HZmluaXNo5pa55rOV6Kem5Y+Rc3RhcnQKICAgICAqIDxsaT7kuovku7bnu5HlrprlnKhmcmFtZeS4iu+8jOWMheaLrGFmdGVyZmluaXNo5ZKManNsb2FkZWQKICAgICAqCiAgICAgKiBAcGFyYW0gb3Aud2luCiAgICAgKiBAcGFyYW0gb3Aubm9qcwogICAgICogICAgICAgICAgICDkuI3liqDovb3pop3lpJZqcwogICAgICogQHBhcmFtIG9wLm9udGVzdAogICAgICogICAgICAgICAgICDmtYvor5XmraXpqqQKICAgICAqIEBwYXJhbSBvcC5vbmJlZm9yZXN0YXJ0CiAgICAgKiAgICAgICAgICAgIOa1i+ivleWQr+WKqOWJjeWkhOeQhuatpemqpO+8jOm7mOiupOS4ulFVbml0LnN0b3AoKTsKICAgICAqIEBwYXJhbSBvcC5vbmFmdGVyZmluaXNoCiAgICAgKiAgICAgICAgICAgIOa1i+ivleWujOavleaJp+ihjOatpemqpO+8jOm7mOiupOS4ulFVbml0LnN0YXJ0KCkKICAgICAqCiAgICAgKi8KICAgIGZyYW1lRXh0OmZ1bmN0aW9uIChvcCkgewogICAgICAgIHN0b3AoKTsKICAgICAgICBvcCA9IHR5cGVvZiBvcCA9PSAnZnVuY3Rpb24nID8gewogICAgICAgICAgICBvbnRlc3Q6b3AKICAgICAgICB9IDogb3A7CiAgICAgICAgdmFyIHB3ID0gb3Aud2luIHx8IHdpbmRvdywgdywgZiwgdXJsID0gJycsIGlkID0gdHlwZW9mIG9wLmlkID09ICd1bmRlZmluZWQnID8gJ2YnCiAgICAgICAgICAgIDogb3AuaWQsIGZpZCA9ICdpZnJhbWUjJyArIGlkOwoKICAgICAgICBvcC5maW5pc2ggPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHB3LiQoZmlkKS51bmJpbmQoKTsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBwdy4kKCdkaXYjZGl2JyArIGlkKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgIHN0YXJ0KCk7CiAgICAgICAgICAgIH0sIDIwKTsKICAgICAgICB9OwoKICAgICAgICBpZiAocHcuJChmaWQpLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgIC8qIOa3u+WKoGZyYW1l77yM6YOo5YiG5oOF5Ya15LiL77yMaWZyYW1l5rKh5pyJ6L655qGG77yM5Li65LqG5Y+v5Lul55yL5Yiw5pWI5p6c77yM5re75Yqg5LiA5Liq5bim6L655qGG55qEZGl2ICovCiAgICAgICAgICAgIHB3LiQocHcuZG9jdW1lbnQuYm9keSkuYXBwZW5kKCc8ZGl2IGlkPSJkaXYnICsgaWQgKyAnIj48L2Rpdj4nKTsKICAgICAgICAgICAgcHcuJCgnZGl2I2RpdicgKyBpZCkuYXBwZW5kKCc8aWZyYW1lIGlkPSInICsgaWQgKyAnIj48L2lmcmFtZT4nKTsKICAgICAgICB9CiAgICAgICAgb3Aub25hZnRlcnN0YXJ0ICYmIG9wLm9uYWZ0ZXJzdGFydCgkKCdpZnJhbWUjZicpWzBdKTsKICAgICAgICBwdy4kKCdzY3JpcHQnKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHRoaXMuc3JjICYmIHRoaXMuc3JjLmluZGV4T2YoJ2ltcG9ydC5waHAnKSA+PSAwKSB7CiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLnNyYy5zcGxpdCgnaW1wb3J0LnBocCcpWzFdOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcHcuJChmaWQpLm9uZSgnbG9hZCcsCiAgICAgICAgICAgIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICB2YXIgdyA9IGUudGFyZ2V0LmNvbnRlbnRXaW5kb3c7CiAgICAgICAgICAgICAgICB2YXIgaCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBpZiAody5iYWlkdSkgey8vIOetieW+heWKoOi9veWujOaIkO+8jElFNuS4i+i/meWcsOaWueaAu+WHuumXrumimAogICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGgpOwogICAgICAgICAgICAgICAgICAgICAgICBvcC5vbnRlc3Qodywgdy5mcmFtZUVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIDIwKTsKICAgICAgICAgICAgICAgIC8vIOaJvuWIsOW9k+WJjeaTjeS9nOeahGlmcmFtZe+8jOeEtuWQjmNhbGwgb250ZXN0CiAgICAgICAgICAgIH0pLmF0dHIoJ3NyYycsIGNwYXRoICsgJ2ZyYW1lLnBocCcgKyB1cmwpOwogICAgfSwKCiAgICAvKioKICAgICAqCiAgICAgKiDliKTmlq0y5Liq5pWw57uE5piv5ZCm55u4562JCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICovCiAgICBpc0VxdWFsQXJyYXk6ZnVuY3Rpb24gKGFycmF5MSwgYXJyYXkyKSB7CiAgICAgICAgaWYgKCdbb2JqZWN0IEFycmF5XScgIT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycmF5MSkKICAgICAgICAgICAgfHwgJ1tvYmplY3QgQXJyYXldJyAhPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyYXkyKSkKICAgICAgICAgICAgcmV0dXJuIChhcnJheTEgPT09IGFycmF5Mik7CiAgICAgICAgZWxzZSBpZiAoYXJyYXkxLmxlbmd0aCAhPSBhcnJheTIubGVuZ3RoKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gYXJyYXkxKSB7CiAgICAgICAgICAgICAgICBpZiAoYXJyYXkxW2ldICE9IGFycmF5MltpXSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfSwKCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgICAgKgogICAgICog6YCa55So5pWw5o2u5qih5Z2XCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KICAgIGNvbW1vbkRhdGE6ey8vIOmSiOWvuea1i+ivleaWh+S7tueahOi3r+W+hOiAjOS4jeaYr1VzZXJBY3Rpb27nmoTot6/lvoQKICAgICAgICAidGVzdGRpciI6Jy4uLy4uLycsCiAgICAgICAgZGF0YWRpcjooZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gbG9jYXRpb24uaHJlZi5zcGxpdCgiL190ZXN0LyIpWzBdICsgIi9fdGVzdC90b29scy9kYXRhLyI7CiAgICAgICAgfSkoKSwKICAgICAgICBjdXJyZW50UGF0aDpmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBsb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLnNwbGl0KCcmJyk7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgcCA9IHBhcmFtc1tpXTsKICAgICAgICAgICAgICAgIGlmIChwLnNwbGl0KCc9JylbMF0gPT0gJ2Nhc2UnKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNhc2VwYXRoID0gcC5zcGxpdCgnPScpWzFdLnNwbGl0KCcuJykuam9pbignLycpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbi5ocmVmLnNwbGl0KCcvX3Rlc3QvJylbMF0gKyAnL190ZXN0LycKICAgICAgICAgICAgICAgICAgICAgICAgKyBjYXNlcGF0aC5zdWJzdHJpbmcoMCwgY2FzZXBhdGgubGFzdEluZGV4T2YoJy8nKSkKICAgICAgICAgICAgICAgICAgICAgICAgKyAnLyc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgIH0KICAgIH0sCgogICAgaW1wb3J0c3JjOmZ1bmN0aW9uIChzcmMsIGNhbGxiYWNrLCBtYXRjaGVyLCBleGNsdWRlLCB3aW4pIHsKICAgICAgICB3aW4gPSB3aW4gfHwgd2luZG93OwogICAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7CgogICAgICAgIHZhciBzcmNwYXRoID0gbG9jYXRpb24uaHJlZi5zcGxpdCgiL190ZXN0LyIpWzBdCiAgICAgICAgICAgICsgIi9fdGVzdC90b29scy9ici9pbXBvcnQucGhwIjsKICAgICAgICB2YXIgcGFyYW0wID0gc3JjOwogICAgICAgIHZhciBwcyA9IHsKICAgICAgICAgICAgZjpzcmMKICAgICAgICB9OwogICAgICAgIGlmIChleGNsdWRlKQogICAgICAgICAgICBwcy5lID0gZXhjbHVkZTsKICAgICAgICB2YXIgcGFyYW0xID0gZXhjbHVkZSB8fCAiIjsKICAgICAgICAvKioKICAgICAgICAgKiBJReS4i+mHjeWkjei9veWFpeS8muWHuueOsOaXoOazleaJp+ihjOaDheWGtQogICAgICAgICAqLwogICAgICAgIGlmICh3aW4uZXhlY1NjcmlwdCkgewogICAgICAgICAgICAkLmdldChzcmNwYXRoLCBwcywgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgIHdpbi5leGVjU2NyaXB0KGRhdGEpOwogICAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgaGVhZCA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdOwogICAgICAgICAgICB2YXIgc2MgPSBkb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CiAgICAgICAgICAgIHNjLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKICAgICAgICAgICAgc2Muc3JjID0gc3JjcGF0aCArICI/Zj0iICsgcGFyYW0wICsgIiZlPSIgKyBwYXJhbTE7CiAgICAgICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc2MpOwogICAgICAgIH0KCiAgICAgICAgbWF0Y2hlciA9IG1hdGNoZXIgfHwgc3JjOwogICAgICAgIHZhciBtbSA9IG1hdGNoZXIuc3BsaXQoIiwiKVswXS5zcGxpdCgiLiIpOwogICAgICAgIHZhciBoID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgcCA9IHdpbjsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtbS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocFttbVtpXV0pID09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobW1baV0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHAgPSBwW21tW2ldXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjbGVhckludGVydmFsKGgpOwogICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgY2FsbGJhY2spCiAgICAgICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgIH0sIDIwKTsKICAgIH0sCgogICAgLyog55So5LqO5Yqg6L29Y3Nz5paH5Lu277yM5aaC5p6c5rKh5pyJ5Yqg6L295a6M5q+V5YiZ5LiN5omn6KGM5Zue6LCD5Ye95pWwICovCiAgICBsb2FkY3NzOmZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrLCBjbGFzc25hbWUsIHN0eWxlLCB2YWx1ZSkgewogICAgICAgIHZhciBsaW5rcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdsaW5rJyk7CiAgICAgICAgZm9yICh2YXIgbGluayBpbiBsaW5rcykgewogICAgICAgICAgICBpZiAobGluay5ocmVmID09IHVybCkgewogICAgICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07CiAgICAgICAgdmFyIGxpbmsgPSBoZWFkLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKSk7CiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoInJlbCIsICJzdHlsZXNoZWV0Iik7CiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoInR5cGUiLCAidGV4dC9jc3MiKTsKICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgiaHJlZiIsIHVybCk7CiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikpOwogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KAogICAgICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBkaXYuY2xhc3NOYW1lID0gY2xhc3NuYW1lIHx8ICdjc3Nsb2FkZWQnOwogICAgICAgICAgICAgICAgdmFyIGggPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCQoZGl2KS5jc3Moc3R5bGUgfHwgJ3dpZHRoJykgPT0gdmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgfHwgJChkaXYpLmNzcyhzdHlsZSB8fCAnd2lkdGgnKSA9PSAnMjBweCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkaXYpOwogICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAyMCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgMjApOwogICAgICAgICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBvcHRpb25zIHN1cHBvcnRlZAogICAgICovCiAgICBkZWxheWhlbHBlcjpmdW5jdGlvbiAob25jaGVjaywgb25zdWNjZXNzLCBvbmZhaWwsIHRpbWVvdXQpIHsKICAgICAgICBvbnN1Y2Nlc3MgPSBvbnN1Y2Nlc3MgfHwgb25jaGVjay5vbnN1Y2Nlc3M7CiAgICAgICAgb25mYWlsID0gb25mYWlsIHx8IG9uY2hlY2sub25mYWlsIHx8IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgd2luZG93LlFVbml0LmZhaWwoJ3RpbWVvdXQgd2FpdCBmb3IgdGltZW91dCA6ICcgKyB0aW1lb3V0ICsgJ21zJyk7CiAgICAgICAgICAgIHN0YXJ0KCk7CiAgICAgICAgfTsKICAgICAgICB0aW1lb3V0ID0gdGltZW91dCB8fCBvbmNoZWNrLnRpbWVvdXQgfHwgMTAwMDA7CgogICAgICAgIG9uY2hlY2sgPSAodHlwZW9mIG9uY2hlY2sgPT0gJ2Z1bmN0aW9uJykgPyBvbmNoZWNrIDogb25jaGVjay5vbmNoZWNrOwogICAgICAgIHZhciBoMSA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCFvbmNoZWNrKCkpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChoMSk7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaDIpOwogICAgICAgICAgICAgICAgdHlwZW9mIG9uc3VjY2VzcyA9PSAiZnVuY3Rpb24iICYmIG9uc3VjY2VzcygpOwogICAgICAgICAgICB9CiAgICAgICAgfSwgMjApOwogICAgICAgIHZhciBoMiA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjbGVhckludGVydmFsKGgxKTsKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGgyKTsKICAgICAgICAgICAgb25mYWlsKCk7CiAgICAgICAgfSwgdGltZW91dCk7CiAgICB9LAoKICAgIGJyb3dzZXI6KGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgd2luID0gd2luZG93OwogICAgICAgIHZhciBudW1iZXJpZnkgPSBmdW5jdGlvbiAocykgewogICAgICAgICAgICAgICAgdmFyIGMgPSAwOwogICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQocy5yZXBsYWNlKC9cLi9nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjKysgPT0gMSkgPyAnJyA6ICcuJzsKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIG5hdiA9IHdpbiAmJiB3aW4ubmF2aWdhdG9yLAoKICAgICAgICAgICAgbyA9IHsKCiAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAqIEludGVybmV0IEV4cGxvcmVyIHZlcnNpb24gbnVtYmVyIG9yIDAuIEV4YW1wbGU6IDYKICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgaWUKICAgICAgICAgICAgICAgICAqIEB0eXBlIGZsb2F0CiAgICAgICAgICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGllOjAsCgogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBPcGVyYSB2ZXJzaW9uIG51bWJlciBvciAwLiBFeGFtcGxlOiA5LjIKICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgb3BlcmEKICAgICAgICAgICAgICAgICAqIEB0eXBlIGZsb2F0CiAgICAgICAgICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIG9wZXJhOjAsCgogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBHZWNrbyBlbmdpbmUgcmV2aXNpb24gbnVtYmVyLiBXaWxsIGV2YWx1YXRlIHRvIDEgaWYgR2Vja28gaXMKICAgICAgICAgICAgICAgICAqIGRldGVjdGVkIGJ1dCB0aGUgcmV2aXNpb24gY291bGQgbm90IGJlIGZvdW5kLiBPdGhlciBicm93c2VycyB3aWxsCiAgICAgICAgICAgICAgICAgKiBiZSAwLiBFeGFtcGxlOiAxLjgKICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgKiA8cHJlPgogICAgICAgICAgICAgICAgICogRmlyZWZveCAxLjAuMC40OiAxLjcuOCAgICZsdDstLSBSZXBvcnRzIDEuNwogICAgICAgICAgICAgICAgICogRmlyZWZveCAxLjUuMC45OiAxLjguMC45ICZsdDstLSAxLjgKICAgICAgICAgICAgICAgICAqIEZpcmVmb3ggMi4wLjAuMzogMS44LjEuMyAmbHQ7LS0gMS44MQogICAgICAgICAgICAgICAgICogRmlyZWZveCAzLjAgICAmbHQ7LS0gMS45CiAgICAgICAgICAgICAgICAgKiBGaXJlZm94IDMuNSAgICZsdDstLSAxLjkxCiAgICAgICAgICAgICAgICAgKiA8L3ByZT4KICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgZ2Vja28KICAgICAgICAgICAgICAgICAqIEB0eXBlIGZsb2F0CiAgICAgICAgICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGdlY2tvOjAsCgogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBBcHBsZVdlYktpdCB2ZXJzaW9uLiBLSFRNTCBicm93c2VycyB0aGF0IGFyZSBub3QgV2ViS2l0IGJyb3dzZXJzCiAgICAgICAgICAgICAgICAgKiB3aWxsIGV2YWx1YXRlIHRvIDEsIG90aGVyIGJyb3dzZXJzIDAuIEV4YW1wbGU6IDQxOC45CiAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICogPHByZT4KICAgICAgICAgICAgICAgICAqIFNhZmFyaSAxLjMuMiAoMzEyLjYpOiAzMTIuOC4xICZsdDstLSBSZXBvcnRzIDMxMi44IC0tIGN1cnJlbnRseSB0aGUKICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3QgYXZhaWxhYmxlIGZvciBNYWMgT1NYIDEwLjMuCiAgICAgICAgICAgICAgICAgKiBTYWZhcmkgMi4wLjI6ICAgICAgICAgNDE2ICAgICAmbHQ7LS0gaGFzT3duUHJvcGVydHkgaW50cm9kdWNlZAogICAgICAgICAgICAgICAgICogU2FmYXJpIDIuMC40OiAgICAgICAgIDQxOCAgICAgJmx0Oy0tIHByZXZlbnREZWZhdWx0IGZpeGVkCiAgICAgICAgICAgICAgICAgKiBTYWZhcmkgMi4wLjQgKDQxOS4zKTogNDE4LjkuMSAmbHQ7LS0gT25lIHZlcnNpb24gb2YgU2FmYXJpIG1heSBydW4KICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbnQgdmVyc2lvbnMgb2Ygd2Via2l0CiAgICAgICAgICAgICAgICAgKiBTYWZhcmkgMi4wLjQgKDQxOS4zKTogNDE5ICAgICAmbHQ7LS0gVGlnZXIgaW5zdGFsbGF0aW9ucyB0aGF0IGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWQsIGJ1dCBub3QgdXBkYXRlZAogICAgICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBsYXRlc3QgcGF0Y2guCiAgICAgICAgICAgICAgICAgKiBXZWJraXQgMjEyIG5pZ2h0bHk6ICAgNTIyKyAgICAmbHQ7LS0gU2FmYXJpIDMuMCBwcmVjdXJzb3IgKHdpdGggbmF0aXZlIFNWRwogICAgICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBtYW55IG1ham9yIGlzc3VlcyBmaXhlZCkuCiAgICAgICAgICAgICAgICAgKiBTYWZhcmkgMy4wLjQgKDUyMy4xMikgNTIzLjEyICAmbHQ7LS0gRmlyc3QgVGlnZXIgcmVsZWFzZSAtIGF1dG9tYXRpYyB1cGRhdGUKICAgICAgICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIDIueCB2aWEgdGhlIDEwLjQuMTEgT1MgcGF0Y2gKICAgICAgICAgICAgICAgICAqIFdlYmtpdCBuaWdodGx5IDEvMjAwODo1MjUrICAgICZsdDstLSBTdXBwb3J0cyBET01Db250ZW50TG9hZGVkIGV2ZW50LgogICAgICAgICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlhaG9vLmNvbSB1c2VyIGFnZW50IGhhY2sgcmVtb3ZlZC4KICAgICAgICAgICAgICAgICAqIDwvcHJlPgogICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAqIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FmYXJpX3ZlcnNpb25faGlzdG9yeQogICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB3ZWJraXQKICAgICAgICAgICAgICAgICAqIEB0eXBlIGZsb2F0CiAgICAgICAgICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIHdlYmtpdDowLAoKICAgICAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgICAgICogQ2hyb21lIHdpbGwgYmUgZGV0ZWN0ZWQgYXMgd2Via2l0LCBidXQgdGhpcyBwcm9wZXJ0eSB3aWxsIGFsc28gYmUKICAgICAgICAgICAgICAgICAqIHBvcHVsYXRlZCB3aXRoIHRoZSBDaHJvbWUgdmVyc2lvbiBudW1iZXIKICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgY2hyb21lCiAgICAgICAgICAgICAgICAgKiBAdHlwZSBmbG9hdAogICAgICAgICAgICAgICAgICogQHN0YXRpYwogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICBjaHJvbWU6MCwKCiAgICAgICAgICAgICAgICBzYWZhcmk6MCwKCiAgICAgICAgICAgICAgICBmaXJlZm94OjAsCgogICAgICAgICAgICAgICAgbWF4dGhvbjowLAogICAgICAgICAgICAgICAgbWF4dGhvbklFOjAsCgogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBUaGUgbW9iaWxlIHByb3BlcnR5IHdpbGwgYmUgc2V0IHRvIGEgc3RyaW5nIGNvbnRhaW5pbmcgYW55CiAgICAgICAgICAgICAgICAgKiByZWxldmFudCB1c2VyIGFnZW50IGluZm9ybWF0aW9uIHdoZW4gYSBtb2Rlcm4gbW9iaWxlIGJyb3dzZXIgaXMKICAgICAgICAgICAgICAgICAqIGRldGVjdGVkLiBDdXJyZW50bHkgbGltaXRlZCB0byBTYWZhcmkgb24gdGhlIGlQaG9uZS9pUG9kIFRvdWNoLAogICAgICAgICAgICAgICAgICogTm9raWEgTi1zZXJpZXMgZGV2aWNlcyB3aXRoIHRoZSBXZWJLaXQtYmFzZWQgYnJvd3NlciwgYW5kIE9wZXJhCiAgICAgICAgICAgICAgICAgKiBNaW5pLgogICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSBtb2JpbGUKICAgICAgICAgICAgICAgICAqIEB0eXBlIHN0cmluZwogICAgICAgICAgICAgICAgICogQHN0YXRpYwogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICBtb2JpbGU6bnVsbCwKCiAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAqIEFkb2JlIEFJUiB2ZXJzaW9uIG51bWJlciBvciAwLiBPbmx5IHBvcHVsYXRlZCBpZiB3ZWJraXQgaXMKICAgICAgICAgICAgICAgICAqIGRldGVjdGVkLiBFeGFtcGxlOiAxLjAKICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgYWlyCiAgICAgICAgICAgICAgICAgKiBAdHlwZSBmbG9hdAogICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICBhaXI6MCwKCiAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAqIEdvb2dsZSBDYWphIHZlcnNpb24gbnVtYmVyIG9yIDAuCiAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICogQHByb3BlcnR5IGNhamEKICAgICAgICAgICAgICAgICAqIEB0eXBlIGZsb2F0CiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGNhamE6bmF2ICYmIG5hdi5jYWphVmVyc2lvbiwKCiAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAqIFNldCB0byB0cnVlIGlmIHRoZSBwYWdlYnJlYWsgYXBwZWFycyB0byBiZSBpbiBTU0wKICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkgc2VjdXJlCiAgICAgICAgICAgICAgICAgKiBAdHlwZSBib29sZWFuCiAgICAgICAgICAgICAgICAgKiBAc3RhdGljCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIHNlY3VyZTpmYWxzZSwKCiAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAqIFRoZSBvcGVyYXRpbmcgc3lzdGVtLiBDdXJyZW50bHkgb25seSBkZXRlY3Rpbmcgd2luZG93cyBvcgogICAgICAgICAgICAgICAgICogbWFjaW50b3NoCiAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICogQHByb3BlcnR5IG9zCiAgICAgICAgICAgICAgICAgKiBAdHlwZSBzdHJpbmcKICAgICAgICAgICAgICAgICAqIEBzdGF0aWMKICAgICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgICAgb3M6bnVsbAoKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHVhID0gbmF2ICYmIG5hdi51c2VyQWdlbnQsCgogICAgICAgICAgICBsb2MgPSB3aW4gJiYgd2luLmxvY2F0aW9uLAoKICAgICAgICAgICAgaHJlZiA9IGxvYyAmJiBsb2MuaHJlZiwKCiAgICAgICAgICAgIG07CgogICAgICAgIG8uc2VjdXJlID0gaHJlZiAmJiAoaHJlZi50b0xvd2VyQ2FzZSgpLmluZGV4T2YoImh0dHBzIikgPT09IDApOwoKICAgICAgICBpZiAodWEpIHsKCiAgICAgICAgICAgIGlmICgoL3dpbmRvd3N8d2luMzIvaSkudGVzdCh1YSkpIHsKICAgICAgICAgICAgICAgIG8ub3MgPSAnd2luZG93cyc7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoKC9tYWNpbnRvc2gvaSkudGVzdCh1YSkpIHsKICAgICAgICAgICAgICAgIG8ub3MgPSAnbWFjaW50b3NoJzsKICAgICAgICAgICAgfSBlbHNlIGlmICgoL3JoaW5vL2kpLnRlc3QodWEpKSB7CiAgICAgICAgICAgICAgICBvLm9zID0gJ3JoaW5vJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gTW9kZXJuIEtIVE1MIGJyb3dzZXJzIHNob3VsZCBxdWFsaWZ5IGFzIFNhZmFyaSBYLUdyYWRlCiAgICAgICAgICAgIGlmICgoL0tIVE1MLykudGVzdCh1YSkpIHsKICAgICAgICAgICAgICAgIG8ud2Via2l0ID0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAod2luZG93LmV4dGVybmFsICYmIC8oXGQrXC5cZCkvLnRlc3QoZXh0ZXJuYWwubWF4X3ZlcnNpb24pKSB7CgogICAgICAgICAgICAgICAgby5tYXh0aG9uID0gcGFyc2VGbG9hdChSZWdFeHBbJ1x4MjQxJ10pOwogICAgICAgICAgICAgICAgaWYgKC9NU0lFLy50ZXN0KHVhKSkgewogICAgICAgICAgICAgICAgICAgIG8ubWF4dGhvbklFID0gMTsKICAgICAgICAgICAgICAgICAgICBvLm1heHRob24gPSAwOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBNb2Rlcm4gV2ViS2l0IGJyb3dzZXJzIGFyZSBhdCBsZWFzdCBYLUdyYWRlCiAgICAgICAgICAgIG0gPSB1YS5tYXRjaCgvQXBwbGVXZWJLaXRcLyhbXlxzXSopLyk7CiAgICAgICAgICAgIGlmIChtICYmIG1bMV0pIHsKICAgICAgICAgICAgICAgIG8ud2Via2l0ID0gbnVtYmVyaWZ5KG1bMV0pOwoKICAgICAgICAgICAgICAgIC8vIE1vYmlsZSBicm93c2VyIGNoZWNrCiAgICAgICAgICAgICAgICBpZiAoLyBNb2JpbGVcLy8udGVzdCh1YSkpIHsKICAgICAgICAgICAgICAgICAgICBvLm1vYmlsZSA9ICJBcHBsZSI7IC8vIGlQaG9uZSBvciBpUG9kIFRvdWNoCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG0gPSB1YS5tYXRjaCgvTm9raWFOW15cL10qfEFuZHJvaWQgXGRcLlxkfHdlYk9TXC9cZFwuXGQvKTsKICAgICAgICAgICAgICAgICAgICBpZiAobSkgewogICAgICAgICAgICAgICAgICAgICAgICBvLm1vYmlsZSA9IG1bMF07IC8vIE5va2lhIE4tc2VyaWVzLCBBbmRyb2lkLCB3ZWJPUywKICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXg6CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5va2lhTjk1CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBtMSA9IHVhLm1hdGNoKC9TYWZhcmlcLyhbXlxzXSopLyk7CiAgICAgICAgICAgICAgICBpZiAobTEgJiYgbTFbMV0pIC8vIFNhZmFyaQogICAgICAgICAgICAgICAgICAgIG8uc2FmYXJpID0gbnVtYmVyaWZ5KG0xWzFdKTsKICAgICAgICAgICAgICAgIG0gPSB1YS5tYXRjaCgvQ2hyb21lXC8oW15cc10qKS8pOwogICAgICAgICAgICAgICAgaWYgKG8uc2FmYXJpICYmIG0gJiYgbVsxXSkgewogICAgICAgICAgICAgICAgICAgIG8uY2hyb21lID0gbnVtYmVyaWZ5KG1bMV0pOyAvLyBDaHJvbWUKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbSA9IHVhLm1hdGNoKC9BZG9iZUFJUlwvKFteXHNdKikvKTsKICAgICAgICAgICAgICAgICAgICBpZiAobSkgewogICAgICAgICAgICAgICAgICAgICAgICBvLmFpciA9IG1bMF07IC8vIEFkb2JlIEFJUiAxLjAgb3IgYmV0dGVyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIW8ud2Via2l0KSB7IC8vIG5vdCB3ZWJraXQKICAgICAgICAgICAgICAgIC8vIEB0b2RvIGNoZWNrIE9wZXJhLzguMDEgKEoyTUUvTUlEUDsgT3BlcmEgTWluaS8yLjAuNDUwOS8xMzE2OwogICAgICAgICAgICAgICAgLy8gZmk7IFU7CiAgICAgICAgICAgICAgICAvLyB0cnkgZ2V0IGZpcmVmb3ggYW5kIGl0J3MgdmVyCiAgICAgICAgICAgICAgICAvLyBzc3IpCiAgICAgICAgICAgICAgICBtID0gdWEubWF0Y2goL09wZXJhW1xzXC9dKFteXHNdKikvKTsKICAgICAgICAgICAgICAgIGlmIChtICYmIG1bMV0pIHsKICAgICAgICAgICAgICAgICAgICBtID0gdWEubWF0Y2goL1ZlcnNpb25bXHNcL10oW15cc10qKS8pOwogICAgICAgICAgICAgICAgICAgIG8ub3BlcmEgPSBudW1iZXJpZnkobVsxXSk7CiAgICAgICAgICAgICAgICAgICAgbSA9IHVhLm1hdGNoKC9PcGVyYSBNaW5pW147XSovKTsKICAgICAgICAgICAgICAgICAgICBpZiAobSkgewogICAgICAgICAgICAgICAgICAgICAgICBvLm1vYmlsZSA9IG1bMF07IC8vIGV4OiBPcGVyYSBNaW5pLzIuMC40NTA5LzEzMTYKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBub3Qgb3BlcmEgb3Igd2Via2l0CiAgICAgICAgICAgICAgICAgICAgbSA9IHVhLm1hdGNoKC9NU0lFXHMoW147XSopLyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG0gJiYgbVsxXSkgewogICAgICAgICAgICAgICAgICAgICAgICBvLmllID0gbnVtYmVyaWZ5KG1bMV0pOwogICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmICh1YS5tYXRjaCgvR2Vja28oW15cc10qKS8pJiZ1YS5tYXRjaCgvcnY6MTEvKSl7Ly90b2RvCiAgICAgICAgICAgICAgICAgICAgICAgIG8uaWUgPSAxMTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBub3Qgb3BlcmEsIHdlYmtpdCwgb3IgaWUKICAgICAgICAgICAgICAgICAgICAgICAgbSA9IHVhLm1hdGNoKC9HZWNrb1wvKFteXHNdKikvKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZ2Vja28gPSAxOyAvLyBHZWNrbyBkZXRlY3RlZCwgbG9vayBmb3IgcmV2aXNpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSB1YS5tYXRjaCgvcnY6KFteXHNcKV0qKS8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0gJiYgbVsxXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZ2Vja28gPSBudW1iZXJpZnkobVsxXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBvOwogICAgfSkKICAgICAgICAoKSwKCiAgICAvKioKICAgICAqIOaPkOS+m+mYn+WIl+aWueW8j+aJp+ihjOeUqOS+i+eahOaWueahiO+8jOaOpeWPo+WMheaLrHN0YXJ044CBYWRk44CBbmV4dO+8jOaWueazleWFqOmDqOaJp+ihjOWujOavleaXtuS8muWQr+WKqOeUqOS+i+e7p+e7reaJp+ihjAogICAgICovCiAgICBmdW5jdGlvbkxpc3RIZWxwZXI6ZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBjaGVjayA9IHsKICAgICAgICAgICAgbGlzdDpbXSwKICAgICAgICAgICAgc3RhcnQ6ZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgICAgICAgJCh0aGlzKS5iaW5kKCduZXh0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgey8vIOmBv+WFjeWkqua3seeahOWghuagiAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5saXN0Lmxlbmd0aCA9PSAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5saXN0LnNoaWZ0KCkoKTsKICAgICAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgc2VsZi5uZXh0KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFkZDpmdW5jdGlvbiAoZnVuYykgewogICAgICAgICAgICAgICAgdGhpcy5saXN0LnB1c2goZnVuYyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5leHQ6ZnVuY3Rpb24gKGRlbGF5KSB7CiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgICAgICBpZiAoZGVsYXkpIHsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJChzZWxmKS50cmlnZ2VyKCduZXh0Jyk7CiAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpOwogICAgICAgICAgICAgICAgfSBlbHNlCiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCduZXh0Jyk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHJldHVybiBjaGVjazsKICAgIH0sCiAgICBnZXRIVE1MOmZ1bmN0aW9uIChjbykgewogICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgaDsKICAgICAgICBpZiAoIWNvKQogICAgICAgICAgICByZXR1cm4gJ251bGwnOwogICAgICAgIGRpdi5hcHBlbmRDaGlsZChjby5jbG9uZU5vZGUodHJ1ZSkpOwogICAgICAgIGggPSBkaXYuaW5uZXJIVE1MLnRvTG93ZXJDYXNlKCk7CgogICAgICAgIGggPSBoLnJlcGxhY2UoL1tcclxuXHRcdTIwMGJcdWZlZmZdL2csICcnKTsgLy8gUmVtb3ZlIGxpbmUgZmVlZHMgYW5kIHRhYnMKICAgICAgICBoID0gaC5yZXBsYWNlKC8gKFx3Kyk9KFteXCJdW15ccz5dKikvZ2ksICcgJDE9IiQyIicpOyAvLyBSZXN0b3JlCiAgICAgICAgLy8gYXR0cmlicyBvbiBJRQogICAgICAgIHJldHVybiBoOwogICAgfSwKICAgIGdldENoaWxkSFRNTDpmdW5jdGlvbiAoY28pIHsKCiAgICAgICAgdmFyIGggPSBjby5pbm5lckhUTUwudG9Mb3dlckNhc2UoKTsKCiAgICAgICAgaCA9IGgucmVwbGFjZSgvW1xyXG5cdFx1MjAwYlx1ZmVmZl0vZywgJycpOyAvLyBSZW1vdmUgbGluZSBmZWVkcyBhbmQgdGFicwogICAgICAgIGggPSBoLnJlcGxhY2UoLyAoXHcrKT0oW15cIl1bXlxzPl0qKS9naSwgJyAkMT0iJDIiJyk7IC8vIFJlc3RvcmUgYXR0cmlicyBvbiBJRQoKICAgICAgICByZXR1cm4gaC5yZXBsYWNlKC9cdTIwMEIvZywgJycpOwogICAgfSwKICAgIGdldEluZGV4OmZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgdmFyIGNoaWxkTm9kZXMgPSBub2RlLnBhcmVudE5vZGUuY2hpbGROb2RlcywgaSA9IDA7CiAgICAgICAgd2hpbGUgKGNoaWxkTm9kZXNbaV0gIT09IG5vZGUpCiAgICAgICAgICAgIGkrKzsKICAgICAgICByZXR1cm4gaTsKICAgIH0sCiAgICBjaGVja1Jlc3VsdDpmdW5jdGlvbiAocmFuZ2UsIHNjLCBlYywgc28sIGVvLCBjb2xsYXBzZWQsIGRlc2NyaXB0KSB7CiAgICAgICAgZGVzY3JpcHQgPSBkZXNjcmlwdCA/IGRlc2NyaXB0IDogJyc7CiAgICAgICAgZXF1YWwocmFuZ2UuY29sbGFwc2VkLCBjb2xsYXBzZWQsICJjaGVjayBjb2xsYXBzZWQgLS0iICsgZGVzY3JpcHQpOwogICAgICAgIG9rKHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSBzYywgImNoZWNrIHN0YXJ0Q29udGFpbmVyLS0iICsgZGVzY3JpcHQpOwogICAgICAgIG9rKHJhbmdlLmVuZENvbnRhaW5lciA9PT0gZWMsICJjaGVjayBlbmRDb250YWluZXItLSIgKyBkZXNjcmlwdCk7CiAgICAgICAgZXF1YWwocmFuZ2Uuc3RhcnRPZmZzZXQsIHNvLCAiY2hlY2sgc3RhcnRPZmZzZXQtLSIgKyBkZXNjcmlwdCk7CiAgICAgICAgZXF1YWwocmFuZ2UuZW5kT2Zmc2V0LCBlbywgImNoZWNrIGVuZE9mZnNldC0tIiArIGRlc2NyaXB0KTsKICAgIH0sCiAgICBpc1NhbWVSYW5nZTpmdW5jdGlvbiAocmFuZ2VBLCByYW5nZUIsIGRlc2NyaXB0KSB7CiAgICAgICAgZGVzY3JpcHQgPSBkZXNjcmlwdCA/IGRlc2NyaXB0IDogJyc7CiAgICAgICAgZXF1YWwocmFuZ2VBLmNvbGxhcHNlZCwgcmFuZ2VCLmNvbGxhcHNlZCwgImNoZWNrIGNvbGxhcHNlZCAtLSIgKyBkZXNjcmlwdCk7CiAgICAgICAgb2socmFuZ2VBLmRvY3VtZW50ID09PSByYW5nZUIuZG9jdW1lbnQsICJjaGVjayBkb2N1bWVudC0tIiArIGRlc2NyaXB0KTsKICAgICAgICBvayhyYW5nZUEuc3RhcnRDb250YWluZXIgPT09IHJhbmdlQi5zdGFydENvbnRhaW5lciwgImNoZWNrIHN0YXJ0Q29udGFpbmVyLS0iICsgZGVzY3JpcHQpOwogICAgICAgIG9rKHJhbmdlQS5lbmRDb250YWluZXIgPT09IHJhbmdlQi5lbmRDb250YWluZXIsICJjaGVjayBlbmRDb250YWluZXItLSIgKyBkZXNjcmlwdCk7CiAgICAgICAgZXF1YWwocmFuZ2VBLnN0YXJ0T2Zmc2V0LCByYW5nZUIuc3RhcnRPZmZzZXQsICJjaGVjayBzdGFydE9mZnNldC0tIiArIGRlc2NyaXB0KTsKICAgICAgICBlcXVhbChyYW5nZUEuZW5kT2Zmc2V0LCByYW5nZUIuZW5kT2Zmc2V0LCAiY2hlY2sgZW5kT2Zmc2V0LS0iICsgZGVzY3JpcHQpOwogICAgfSwKICAgIG1hbnVhbERlbGV0ZUZpbGxEYXRhOmZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgdmFyIGNoaWxkcyA9IG5vZGUuY2hpbGROb2RlczsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgZmlsbERhdGEgPSBjaGlsZHNbaV07CiAgICAgICAgICAgIGlmICgoZmlsbERhdGEubm9kZVR5cGUgPT0gMykgJiYgKCBmaWxsRGF0YS5kYXRhID09IGRvbVV0aWxzLmZpbGxDaGFyICkpIHsKICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShmaWxsRGF0YSk7CiAgICAgICAgICAgICAgICBmaWxsRGF0YSA9IG51bGw7CgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHRoaXMubWFudWFsRGVsZXRlRmlsbERhdGEoZmlsbERhdGEpOwogICAgICAgIH0KCgogICAgfSwKICAgIGNzc1N0eWxlVG9Eb21TdHlsZTpmdW5jdGlvbiAoY3NzTmFtZSkgewogICAgICAgIHZhciB0ZXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGUsCiAgICAgICAgICAgIGNzc0Zsb2F0ID0gdGVzdC5jc3NGbG9hdCAhPSB1bmRlZmluZWQgPyAnY3NzRmxvYXQnCiAgICAgICAgICAgICAgICA6IHRlc3Quc3R5bGVGbG9hdCAhPSB1bmRlZmluZWQgPyAnc3R5bGVGbG9hdCcKICAgICAgICAgICAgICAgIDogJ2Zsb2F0JywKICAgICAgICAgICAgY2FjaGUgPSB7ICdmbG9hdCc6Y3NzRmxvYXQgfTsKCiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZXIobWF0Y2gpIHsKICAgICAgICAgICAgcmV0dXJuIG1hdGNoLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpOwogICAgICAgIH0KCi8vICAgICAgICByZXR1cm4gZnVuY3Rpb24oIGNzc05hbWUgKSB7CiAgICAgICAgcmV0dXJuIGNhY2hlW2Nzc05hbWVdIHx8IChjYWNoZVtjc3NOYW1lXSA9IGNzc05hbWUucmVwbGFjZSgvLS4vZywgcmVwbGFjZXIpICk7Ci8vICAgICAgICB9OwogICAgfSwKICAgIGlzU2FtZVN0eWxlOmZ1bmN0aW9uIChlbGVtZW50QSwgZWxlbWVudEIpIHsKLy8gICAgICAgIHZhciBzdHlsZUEgPSBlbGVtZW50QS5zdHlsZS5jc3NUZXh0LAovLyAgICAgICAgICAgIHN0eWxlQiA9IGVsZW1lbnRCLnN0eWxlLmNzc1RleHQ7Ci8vICAgICAgICBpZiAoIHRoaXMuYnJvd3Nlci5pZSAmJiB0aGlzLmJyb3dzZXIudmVyc2lvbiA9PSA2ICkgewovLyAgICAgICAgICAgIHN0eWxlQSA9IHN0eWxlQS50b0xvd2VyQ2FzZSgpOwovLyAgICAgICAgICAgIHN0eWxlQiA9IHN0eWxlQi50b0xvd2VyQ2FzZSgpOwovLyAgICAgICAgfQovLyAgICAgICAgaWYgKCAhc3R5bGVBICYmICFzdHlsZUIgKSB7Ci8vICAgICAgICAgICAgcmV0dXJuIHRydWU7Ci8vICAgICAgICB9IGVsc2UgaWYgKCAhc3R5bGVBIHx8ICFzdHlsZUIgKSB7Ci8vICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwovLyAgICAgICAgfQovLyAgICAgICAgdmFyIHN0eWxlTmFtZU1hcCA9IHt9LAovLyAgICAgICAgICAgIHJlY29yZCA9IFtdLAovLyAgICAgICAgICAgIGV4aXQgPSB7fTsKLy8gICAgICAgIHN0eWxlQS5yZXBsYWNlKCAvW1x3LV0rXHMqKD89OikvZywgZnVuY3Rpb24gKCBuYW1lICkgewovLyAgICAgICAgICAgIHN0eWxlTmFtZU1hcFtuYW1lXSA9IHJlY29yZC5wdXNoKCBuYW1lICk7Ci8vICAgICAgICB9ICk7Ci8vICAgICAgICB0cnkgewovLyAgICAgICAgICAgIHN0eWxlQi5yZXBsYWNlKCAvW1x3LV0rXHMqKD89OikvZywgZnVuY3Rpb24gKCBuYW1lICkgewovLyAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBzdHlsZU5hbWVNYXBbbmFtZV07Ci8vICAgICAgICAgICAgICAgIGlmICggaW5kZXggKSB7Ci8vLy8gICAgICAgICAgICAgICAgICAgIG5hbWUgPSB0aGlzLmNzc1N0eWxlVG9Eb21TdHlsZSggbmFtZSApOwovLyAgICAgICAgICAgICAgICAgICAgaWYgKCBlbGVtZW50QS5zdHlsZVtuYW1lXSAhPT0gZWxlbWVudEIuc3R5bGVbbmFtZV0gKSB7Ci8vICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXhpdDsKLy8gICAgICAgICAgICAgICAgICAgIH0KLy8gICAgICAgICAgICAgICAgICAgIHJlY29yZFtpbmRleCAtIDFdID0gJyc7Ci8vICAgICAgICAgICAgICAgIH0gZWxzZSB7Ci8vICAgICAgICAgICAgICAgICAgICB0aHJvdyBleGl0OwovLyAgICAgICAgICAgICAgICB9Ci8vICAgICAgICAgICAgfSApOwovLyAgICAgICAgfSBjYXRjaCAoIGV4ICkgewovLyAgICAgICAgICAgIGlmICggZXggPT09IGV4aXQgKSB7Ci8vICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKLy8gICAgICAgICAgICB9Ci8vICAgICAgICB9Ci8vICAgICAgICByZXR1cm4gIXJlY29yZC5qb2luKCAnJyApOwogICAgICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIGl0ZW0sIGF0KSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSBhdCB8fCAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaV0gPT09IGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQoKICAgICAgICB2YXIgc3R5bGVBID0gZWxlbWVudEEuc3R5bGUuY3NzVGV4dC5yZXBsYWNlKC8oID87ID8pL2csICc7JykucmVwbGFjZSgvKCA/OiA/KS9nLCAnOicpLAogICAgICAgICAgICBzdHlsZUIgPSBlbGVtZW50Qi5zdHlsZS5jc3NUZXh0LnJlcGxhY2UoLyggPzsgPykvZywgJzsnKS5yZXBsYWNlKC8oID86ID8pL2csICc6Jyk7CiAgICAgICAgaWYgKGJyb3dzZXIub3BlcmEpIHsKICAgICAgICAgICAgc3R5bGVBID0gZWxlbWVudEEuc3R5bGU7CiAgICAgICAgICAgIHN0eWxlQiA9IGVsZW1lbnRCLnN0eWxlOwogICAgICAgICAgICBpZiAoc3R5bGVBLmxlbmd0aCAhPSBzdHlsZUIubGVuZ3RoKQogICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gc3R5bGVBKSB7CiAgICAgICAgICAgICAgICBpZiAoL14oXGQrfGNzc3RleHQpJC9pLnRlc3QocCkpCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICBpZiAoc3R5bGVBW3BdICE9IHN0eWxlQltwXSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICB9CgoKICAgICAgICBpZiAoIXN0eWxlQSB8fCAhc3R5bGVCKSB7CiAgICAgICAgICAgIHJldHVybiBzdHlsZUEgPT0gc3R5bGVCID8gMSA6IDA7CiAgICAgICAgfQogICAgICAgIHN0eWxlQSA9IHN0eWxlQS5zcGxpdCgnOycpOwogICAgICAgIHN0eWxlQiA9IHN0eWxlQi5zcGxpdCgnOycpOwoKICAgICAgICBpZiAoc3R5bGVBLmxlbmd0aCAhPSBzdHlsZUIubGVuZ3RoKQogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0eWxlQi5sZW5ndGg7IGorKykgewogICAgICAgICAgICBpZiAoc3R5bGVCW2pdLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigiY29sb3IiKSA+IC0xICYmIHN0eWxlQltqXS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoInJnYiIpID4gLTEpIHsKICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IHRoaXMuZm9ybWF0Q29sb3Ioc3R5bGVCW2pdLnN1YnN0cihzdHlsZUJbal0uaW5kZXhPZigicmdiIiksIHN0eWxlQltqXS5sZW5ndGgpKTsKICAgICAgICAgICAgICAgIHN0eWxlQltqXSA9IHN0eWxlQltqXS5yZXBsYWNlKHN0eWxlQltqXS5zdWJzdHIoc3R5bGVCW2pdLmluZGV4T2YoInJnYiIpLCBzdHlsZUJbal0ubGVuZ3RoKSwgY29sb3IpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSBzdHlsZUFbaSsrXTspIHsKICAgICAgICAgICAgaWYgKGNpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigiY29sb3IiKSA+IC0xICYmIGNpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigicmdiIikgPiAtMSkgewogICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gdGhpcy5mb3JtYXRDb2xvcihjaS5zdWJzdHIoY2kuaW5kZXhPZigicmdiIiksIGNpLmxlbmd0aCkpOwogICAgICAgICAgICAgICAgY2kgPSBjaS5yZXBsYWNlKGNpLnN1YnN0cihjaS5pbmRleE9mKCJyZ2IiKSwgY2kubGVuZ3RoKSwgY29sb3IpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpbmRleE9mKHN0eWxlQiwgY2kpID09IC0xKSB7CgogICAgICAgICAgICAgICAgcmV0dXJuIDA7CgogICAgICAgICAgICB9Ly9zdHlsZUFbMF0uc3Vic3RyKHN0eWxlQVswXS5pbmRleE9mKCJyZ2EiKSxzdHlsZUFbMF0ubGVuZ3RoKQogICAgICAgIH0KICAgICAgICByZXR1cm4gMTsKICAgIH0sCgoKICAgIGZvcm1hdENvbG9yOmZ1bmN0aW9uIChjb2xvcikgewogICAgICAgIHZhciByZWcxID0gL15cI1tcZGEtZl17Nn0kL2ksCiAgICAgICAgICAgIHJlZzIgPSAvXnJnYlwoKFxkKyksXHMqKFxkKyksXHMqKFxkKylcKSQvLAogICAgICAgICAgICBrZXl3b3JkID0gewogICAgICAgICAgICAgICAgYmxhY2s6JyMwMDAwMDAnLAogICAgICAgICAgICAgICAgc2lsdmVyOicjYzBjMGMwJywKICAgICAgICAgICAgICAgIGdyYXk6JyM4MDgwODAnLAogICAgICAgICAgICAgICAgd2hpdGU6JyNmZmZmZmYnLAogICAgICAgICAgICAgICAgbWFyb29uOicjODAwMDAwJywKICAgICAgICAgICAgICAgIHJlZDonI2ZmMDAwMCcsCiAgICAgICAgICAgICAgICBwdXJwbGU6JyM4MDAwODAnLAogICAgICAgICAgICAgICAgZnVjaHNpYTonI2ZmMDBmZicsCiAgICAgICAgICAgICAgICBncmVlbjonIzAwODAwMCcsCiAgICAgICAgICAgICAgICBsaW1lOicjMDBmZjAwJywKICAgICAgICAgICAgICAgIG9saXZlOicjODA4MDAwJywKICAgICAgICAgICAgICAgIHllbGxvdzonI2ZmZmYwJywKICAgICAgICAgICAgICAgIG5hdnk6JyMwMDAwODAnLAogICAgICAgICAgICAgICAgYmx1ZTonIzAwMDBmZicsCiAgICAgICAgICAgICAgICB0ZWFsOicjMDA4MDgwJywKICAgICAgICAgICAgICAgIGFxdWE6JyMwMGZmZmYnCiAgICAgICAgICAgIH07CiAgICAgICAgaWYgKHJlZzEudGVzdChjb2xvcikpIHsKICAgICAgICAgICAgLy8gI1JSR0dCQiDnm7TmjqXov5Tlm54KICAgICAgICAgICAgcmV0dXJuIGNvbG9yOwogICAgICAgIH0gZWxzZSBpZiAocmVnMi50ZXN0KGNvbG9yKSkgewogICAgICAgICAgICAvLyDpnZ5JReS4reeahCByZ2IoMCwgMCwgMCkKICAgICAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIGNvbG9yID0gIiMiOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgICAgICAgICBzID0gcGFyc2VJbnQoUmVnRXhwWyJceDI0IiArIGldKS50b1N0cmluZygxNik7CiAgICAgICAgICAgICAgICBjb2xvciArPSAoIjAwIiArIHMpLnN1YnN0cihzLmxlbmd0aCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGNvbG9yOwogICAgICAgIH0gZWxzZSBpZiAoL15cI1tcZGEtZl17M30kLy50ZXN0KGNvbG9yKSkgewogICAgICAgICAgICAvLyDnroDlhpnnmoTpopzoibLlgLw6ICNGMDAKICAgICAgICAgICAgdmFyIHMxID0gY29sb3IuY2hhckF0KDEpLAogICAgICAgICAgICAgICAgczIgPSBjb2xvci5jaGFyQXQoMiksCiAgICAgICAgICAgICAgICBzMyA9IGNvbG9yLmNoYXJBdCgzKTsKICAgICAgICAgICAgcmV0dXJuICIjIiArIHMxICsgczEgKyBzMiArIHMyICsgczMgKyBzMzsKICAgICAgICB9IGVsc2UgaWYgKGtleXdvcmRbY29sb3JdKQogICAgICAgICAgICByZXR1cm4ga2V5d29yZFtjb2xvcl07CgogICAgICAgIHJldHVybiAiIjsKCiAgICB9LAogICAgaGFzU2FtZUF0dHJzOmZ1bmN0aW9uIChub2RlQSwgbm9kZUIpIHsKICAgICAgICBpZiAobm9kZUEudGFnTmFtZSAhPSBub2RlQi50YWdOYW1lKQogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB2YXIgdGhpc0F0dHJpYnMgPSBub2RlQS5hdHRyaWJ1dGVzLAogICAgICAgICAgICBvdGhlckF0dHJpYnMgPSBub2RlQi5hdHRyaWJ1dGVzOwogICAgICAgIGlmICh0aGlzQXR0cmlicy5sZW5ndGggIT0gb3RoZXJBdHRyaWJzLmxlbmd0aCkKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgaWYgKHRoaXNBdHRyaWJzLmxlbmd0aCA9PSAwKQogICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICB2YXIgYXR0ckEsIGF0dHJCOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBhdHRyQSA9IHRoaXNBdHRyaWJzW2krK107KSB7CiAgICAgICAgICAgIGlmIChhdHRyQS5ub2RlTmFtZSA9PSAnc3R5bGUnKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1NhbWVTdHlsZShub2RlQSwgbm9kZUIpKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCF1YS5icm93c2VyLmllIHx8IGF0dHJBLnNwZWNpZmllZCkgewogICAgICAgICAgICAgICAgYXR0ckIgPSBub2RlQi5hdHRyaWJ1dGVzW2F0dHJBLm5vZGVOYW1lXTsKICAgICAgICAgICAgICAgIGlmICghYXR0ckIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDE7CiAgICB9LAogICAgLyoqCiAgICAgKua4hemZpOepulRleHToioLngrkKICAgICAqLwoKICAgIGNsZWFyV2hpdGVOb2RlOmZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSBub2RlLmNoaWxkTm9kZXNbaV07CiAgICAgICAgICAgIGlmICh0bXBOb2RlLm5vZGVUeXBlID09IDMgJiYgIXRtcE5vZGUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICB0bXBOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodG1wTm9kZSk7CiAgICAgICAgICAgICAgICBpLS07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgLyoqCiAgICAgKuajgOafpeS4pOS4quiKgueCue+8iOWMheWQq+aJgOacieWtkOiKgueCue+8ieaYr+WQpuWFt+acieebuOWQjOeahOWxnuaApwogICAgICovCiAgICBmbGFnOnRydWUsCiAgICBjaGVja0FsbENoaWxkQXR0cmliczpmdW5jdGlvbiAobm9kZUEsIG5vZGVCKSB7CiAgICAgICAgdmFyIGsgPSBub2RlQS5jaGlsZE5vZGVzLmxlbmd0aDsKICAgICAgICBpZiAoayAhPSBub2RlQi5jaGlsZE5vZGVzLmxlbmd0aCkgewogICAgICAgICAgICBpZiAodWEuYnJvd3Nlci5vcGVyYSkgewogICAgICAgICAgICAgICAgdGhpcy5jbGVhcldoaXRlTm9kZShub2RlQSk7CiAgICAgICAgICAgICAgICBrID0gbm9kZUEuY2hpbGROb2Rlcy5sZW5ndGg7CiAgICAgICAgICAgICAgICBpZiAoayAhPSBub2RlQi5jaGlsZE5vZGVzLmxlbmd0aCkKICAgICAgICAgICAgICAgICAgICB0aGlzLmZsYWcgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB0aGlzLmZsYWcgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKCF0aGlzLmZsYWcpCiAgICAgICAgICAgIHJldHVybiB0aGlzLmZsYWc7CiAgICAgICAgd2hpbGUgKGspIHsKICAgICAgICAgICAgdmFyIHRtcE5vZGVBID0gbm9kZUEuY2hpbGROb2Rlc1trIC0gMV07CiAgICAgICAgICAgIHZhciB0bXBOb2RlQiA9IG5vZGVCLmNoaWxkTm9kZXNbayAtIDFdOwogICAgICAgICAgICBrLS07CgogICAgICAgICAgICBpZiAodG1wTm9kZUEubm9kZVR5cGUgPT0gMyB8fCB0bXBOb2RlQi5ub2RlVHlwZSA9PSAzIHx8IHRtcE5vZGVBLm5vZGVUeXBlID09IDggfHwgdG1wTm9kZUIubm9kZVR5cGUgPT0gOCkKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICBpZiAoIXRoaXMuaGFzU2FtZUF0dHJzKHRtcE5vZGVBLCB0bXBOb2RlQikpIHsKICAgICAgICAgICAgICAgIHRoaXMuZmxhZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLmNoZWNrQWxsQ2hpbGRBdHRyaWJzKHRtcE5vZGVBLCB0bXBOb2RlQik7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLmZsYWc7CiAgICB9LAogICAgaGF2ZVNhbWVBbGxDaGlsZEF0dHJpYnM6ZnVuY3Rpb24gKG5vZGVBLCBub2RlQikgewogICAgICAgIHRoaXMuZmxhZyA9IHRydWU7CiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tBbGxDaGlsZEF0dHJpYnMobm9kZUEsIG5vZGVCKTsKICAgIH0sCiAgICAvKuafpeeci+S8oOWFpeeahGh0bWzmmK/lkKbkuI7kvKDlhaXnmoTlhYPntKBlbGXlhbfmnInnm7jlkIznmoRzdHlsZSovCiAgICBjaGVja0hUTUxTYW1lU3R5bGU6ZnVuY3Rpb24gKGh0bWwsIGRvYywgZWxlLCBkZXNjcmlwdCkgewogICAgICAgIHZhciB0YWdFbGUgPSBkb2MuY3JlYXRlRWxlbWVudChlbGUudGFnTmFtZSk7CiAgICAgICAgdGFnRWxlLmlubmVySFRNTCA9IGh0bWw7CiAgICAgICAgLyrkvJrmnInkuIDkupvkuI3lj6/op4HlrZfnrKbvvIzlnKjmr5TovoPliY3mj5DliY3liKDmjokqLwogICAgICAgIHRoaXMubWFudWFsRGVsZXRlRmlsbERhdGEoZWxlKTsKICAgICAgICBvayh0aGlzLmhhdmVTYW1lQWxsQ2hpbGRBdHRyaWJzKGVsZSwgdGFnRWxlKSwgZGVzY3JpcHQpOwovLyAgICAgICAgb2sodGhpcy5lcXVhbHNOb2RlKGVsZS5pbm5lckhNVEwsaHRtbCksZGVzY3JpcHQpOwogICAgfSwKCgogICAgZXF1YWxzTm9kZTpmdW5jdGlvbiAobmEsIG5iKSB7CiAgICAgICAgZnVuY3Rpb24gY29tcGFyZShub2RlQSwgbm9kZUIpIHsKICAgICAgICAgICAgaWYgKG5vZGVBLm5vZGVUeXBlICE9IG5vZGVCLm5vZGVUeXBlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobm9kZUEubm9kZVR5cGUgPT0gMykgewogICAgICAgICAgICAgICAgcmV0dXJuICBub2RlQS5ub2RlVmFsdWUgPT0gbm9kZUIubm9kZVZhbHVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzU2FtZUVsZW1lbnQobm9kZUEsIG5vZGVCKSkgewogICAgICAgICAgICAgICAgaWYgKCFub2RlQS5maXJzdENoaWxkICYmICFub2RlQi5maXJzdENoaWxkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAobm9kZUEuZmlyc3RDaGlsZCAmJiAhbm9kZUIuZmlyc3RDaGlsZCB8fCAhbm9kZUEuZmlyc3RDaGlsZCAmJiBub2RlQi5maXJzdENoaWxkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBhaSwgYmk7IGFpID0gbm9kZUEuY2hpbGROb2Rlc1tpXSwgYmkgPSBub2RlQi5jaGlsZE5vZGVzW2krK107KSB7CgogICAgICAgICAgICAgICAgICAgIGlmICghY29tcGFyZShhaSwgYmkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGNvbXBhcmUoZG9tVXRpbHMuY3JlYXRlRWxlbWVudChkb2N1bWVudCwgJ2RpdicsIHsKICAgICAgICAgICAgJ2lubmVySFRNTCc6bmEKICAgICAgICB9KSwgZG9tVXRpbHMuY3JlYXRlRWxlbWVudChkb2N1bWVudCwgJ2RpdicsIHsKICAgICAgICAgICAgJ2lubmVySFRNTCc6bmIKICAgICAgICB9KSk7CiAgICB9LAoKCiAgICBnZXRTZWxlY3RlZFRleHQ6ZnVuY3Rpb24gKCkgewogICAgICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7CiAgICAgICAgICAgIC8vIFRoaXMgdGVjaG5pcXVlIGlzIHRoZSBtb3N0IGxpa2VseSB0byBiZSBzdGFuZGFyZGl6ZWQuCiAgICAgICAgICAgIC8vIGdldFNlbGVjdGlvbigpIHJldHVybnMgYSBTZWxlY3Rpb24gb2JqZWN0LCB3aGljaCB3ZSBkbyBub3QgZG9jdW1lbnQuCiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKSB7CiAgICAgICAgICAgIC8vIFRoaXMgaXMgYW4gb2xkZXIsIHNpbXBsZXIgdGVjaG5pcXVlIHRoYXQgcmV0dXJucyBhIHN0cmluZwogICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikgewogICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBJRS1zcGVjaWZpYyB0ZWNobmlxdWUuCiAgICAgICAgICAgIC8vIFdlIGRvIG5vdCBkb2N1bWVudCB0aGUgSUUgc2VsZWN0aW9uIHByb3BlcnR5IG9yIFRleHRSYW5nZSBvYmplY3RzLgogICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCkudGV4dDsKICAgICAgICB9CiAgICB9LAogICAgZmluZFBvc2l0aW9uOmZ1bmN0aW9uIChvRWxlbWVudCkgewogICAgICAgIHZhciB4MiA9IDA7CiAgICAgICAgdmFyIHkyID0gMDsKICAgICAgICB2YXIgd2lkdGggPSBvRWxlbWVudC5vZmZzZXRXaWR0aDsKICAgICAgICB2YXIgaGVpZ2h0ID0gb0VsZW1lbnQub2Zmc2V0SGVpZ2h0OwogICAgICAgIGlmICh0eXBlb2YoIG9FbGVtZW50Lm9mZnNldFBhcmVudCApICE9ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIGZvciAodmFyIHBvc1ggPSAwLCBwb3NZID0gMDsgb0VsZW1lbnQ7IG9FbGVtZW50ID0gb0VsZW1lbnQub2Zmc2V0UGFyZW50KSB7CiAgICAgICAgICAgICAgICBwb3NYICs9IG9FbGVtZW50Lm9mZnNldExlZnQ7CiAgICAgICAgICAgICAgICBwb3NZICs9IG9FbGVtZW50Lm9mZnNldFRvcDsKICAgICAgICAgICAgfQogICAgICAgICAgICB4MiA9IHBvc1ggKyB3aWR0aDsKICAgICAgICAgICAgeTIgPSBwb3NZICsgaGVpZ2h0OwogICAgICAgICAgICByZXR1cm4gWyBwb3NYLCBwb3NZICwgeDIsIHkyXTsKCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgeDIgPSBvRWxlbWVudC54ICsgd2lkdGg7CiAgICAgICAgICAgIHkyID0gb0VsZW1lbnQueSArIGhlaWdodDsKICAgICAgICAgICAgcmV0dXJuIFsgb0VsZW1lbnQueCwgb0VsZW1lbnQueSwgeDIsIHkyXTsKICAgICAgICB9CiAgICB9LAoKICAgIGNoZWNrRWxlbWVudFBhdGg6ZnVuY3Rpb24gKGFycjEsIGFycjIsIGRlc2NyaXB0KSB7CiAgICAgICAgaWYgKCFkZXNjcmlwdCkKICAgICAgICAgICAgZGVzY3JpcHQgPSAnJzsKICAgICAgICB2YXIgaW5kZXggPSBhcnIxLmxlbmd0aDsKICAgICAgICBpZiAoaW5kZXggIT0gYXJyMi5sZW5ndGgpCiAgICAgICAgICAgIG9rKGZhbHNlLCAn6Lev5b6E5rex5bqm5LiN55u45ZCMJyk7CiAgICAgICAgZWxzZSB7CgogICAgICAgICAgICB3aGlsZSAoaW5kZXggPiAwKQogICAgICAgICAgICAgICAgZXF1YWwoYXJyMVstLWluZGV4IF0sIGFycjJbaW5kZXggXSwgZGVzY3JpcHQgKyAnLS0t56ysJyArIGluZGV4ICsgJ+S4quWFg+e0oCcgKyBhcnIxW2luZGV4XSk7CiAgICAgICAgfQogICAgfSwKICAgIGdldEJyb3dzZXI6ZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBicm93c2VyID0gIiI7CiAgICAgICAgaWYgKHRoaXMuYnJvd3Nlci5pZSA9PSA2KQogICAgICAgICAgICBicm93c2VyID0gJ2llNic7CiAgICAgICAgaWYgKHRoaXMuYnJvd3Nlci5pZSA9PSA3KQogICAgICAgICAgICBicm93c2VyID0gJ2llNyc7CiAgICAgICAgaWYgKHRoaXMuYnJvd3Nlci5pZSA9PSA4KQogICAgICAgICAgICBicm93c2VyID0gJ2llOCc7CiAgICAgICAgaWYgKHRoaXMuYnJvd3Nlci5pZSA9PSA5KQogICAgICAgICAgICBicm93c2VyID0gJ2llOSc7CiAgICAgICAgaWYgKHRoaXMuYnJvd3Nlci5zYWZhcmkpCiAgICAgICAgICAgIGJyb3dzZXIgPSAnc2FmYXJpJzsKICAgICAgICBpZiAodGhpcy5icm93c2VyLmZpcmVmb3gpCiAgICAgICAgICAgIGJyb3dzZXIgPSAnZmlyZWZveCc7CiAgICAgICAgaWYgKHRoaXMuYnJvd3Nlci5jaHJvbWUpCiAgICAgICAgICAgIGJyb3dzZXIgPSAnY2hyb21lJzsKICAgICAgICBpZiAodGhpcy5icm93c2VyLm1heHRob24pIHsKICAgICAgICAgICAgYnJvd3NlciA9ICdtYXh0aG9uJzsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuYnJvd3Nlci5tYXh0aG9uSUUpCiAgICAgICAgICAgIGJyb3dzZXIgPSAnbWF4SUUnOwogICAgICAgIGlmICh0aGlzLmJyb3dzZXIub3BlcmEpCiAgICAgICAgICAgIGJyb3dzZXIgPSAnb3BlcmEnOwogICAgICAgIHJldHVybiBicm93c2VyOwogICAgfSwKICAgIGdldEZsb2F0U3R5bGU6ZnVuY3Rpb24gKGVsZSkgewogICAgICAgIGlmICh0aGlzLmJyb3dzZXIuaWUpCiAgICAgICAgICAgIHJldHVybiBlbGUuc3R5bGVbJ3N0eWxlRmxvYXQnXTsKICAgICAgICBlbHNlCiAgICAgICAgICAgIHJldHVybiBlbGUuc3R5bGVbJ2Nzc0Zsb2F0J107CiAgICB9LAoKICAgIGdldENvbXB1dGVkU3R5bGU6ZnVuY3Rpb24oZWxlICl7CiAgICAgICAgaWYodGhpcy5icm93c2VyLmllJiZ1YS5icm93c2VyLmllPDkpewogICAgICAgICAgICByZXR1cm4gZWxlLmN1cnJlbnRTdHlsZTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZSk7CiAgICAgICAgfQogICAgfSwKICAgIHJlYWRGaWxlOmZ1bmN0aW9uIChuYW1lLCBmKSB7CiAgICAgICAgdmFyIGFyZ3MgPSB7fTsKICAgICAgICBhcmdzWyduYW1lJ10gPSAgbmFtZTsKICAgICAgICAkLmFqYXgoewogICAgICAgICAgICB1cmw6J3JlYWQucGhwJywKICAgICAgICAgICAgdHlwZToncG9zdCcsCiAgICAgICAgICAgIGRhdGE6YXJncywKICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgICAgICBmKG1zZyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVycm9yOmZ1bmN0aW9uICh4aHIsIG1zZykgewogICAgICAgICAgICAgICAgZihudWxsKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKICAgIHJlYWRUeHQ6ZnVuY3Rpb24gKG5hbWUsIGYpIHsKICAgICAgICB2YXIgYXJncyA9IHt9OwogICAgICAgIGFyZ3NbJ25hbWUnXSA9ICcuL3R4dC8nICsgbmFtZTsKICAgICAgICAkLmFqYXgoewogICAgICAgICAgICB1cmw6J3JlYWQucGhwJywKICAgICAgICAgICAgdHlwZToncG9zdCcsCiAgICAgICAgICAgIGRhdGE6YXJncywKICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgICAgICBmKG1zZyk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVycm9yOmZ1bmN0aW9uICh4aHIsIG1zZykgewogICAgICAgICAgICAgICAgZihudWxsKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwgY2hlY2tMb3dlckNhc2U6ZnVuY3Rpb24gKHN0cmluZ0EsIHN0cmluZ0IpIHsKICAgICAgICBpZiAoIShzdHJpbmdBIHx8IHN0cmluZ0IpKQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICBlbHNlIGlmICghc3RyaW5nQSB8fCAhc3RyaW5nQikKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGVsc2UgewogICAgICAgICAgICByZXR1cm4gc3RyaW5nQS50b0xvd2VyQ2FzZSgpID09IHN0cmluZ0IudG9Mb3dlckNhc2UoKTsKICAgICAgICB9CiAgICB9LCByZW1vdmVFbmRTZW1pY29sb246ZnVuY3Rpb24gKHN0eWxlVmFsdWUpIHsKICAgICAgICBpZiAoc3R5bGVWYWx1ZS5sZW5ndGggLSAxID09IHN0eWxlVmFsdWUubGFzdEluZGV4T2YoJzsnKSkKICAgICAgICAgICAgc3R5bGVWYWx1ZSA9IHN0eWxlVmFsdWUuc3Vic3RyaW5nKDAsIHN0eWxlVmFsdWUubGVuZ3RoIC0gMSk7CiAgICAgICAgcmV0dXJuIHN0eWxlVmFsdWU7CiAgICB9LCBjaGVja05vZGVTdHlsZTpmdW5jdGlvbiAobm9kZUEsIG5vZGVCKSB7CiAgICAgICAgdmFyIG5vZGVBU3R5bGUgPSB0aGlzLnJlbW92ZUVuZFNlbWljb2xvbihub2RlQS5nZXRBdHRyKCJzdHlsZSIpLnJlcGxhY2UoL1xzKy9nLCAiIikpLnJlcGxhY2UoLyZxdW90Oy9nLCcnKS5zcGxpdCgiOyIpOwogICAgICAgIHZhciBub2RlQlN0eWxlID0gdGhpcy5yZW1vdmVFbmRTZW1pY29sb24obm9kZUIuZ2V0QXR0cigic3R5bGUiKS5yZXBsYWNlKC9ccysvZywgIiIpKS5yZXBsYWNlKC8mcXVvdDsvZywnJykuc3BsaXQoIjsiKTsKICAgICAgICB2YXIgbGVuZ3RoQSA9IG5vZGVBU3R5bGUubGVuZ3RoOwogICAgICAgIHZhciBsZW5ndGhCID0gbm9kZUJTdHlsZS5sZW5ndGg7CiAgICAgICAgaWYgKCEobGVuZ3RoQSAmJiBsZW5ndGhCKSkKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgZWxzZSBpZiAobGVuZ3RoQSAhPSBsZW5ndGhCKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoQTsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAobm9kZUFTdHlsZVtpXS5tYXRjaCgvWy1cd10rXHMqOi8pICkgewogICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZU5hbWUgPSBub2RlQVN0eWxlW2ldLm1hdGNoKC9bLVx3XStccyo6LylbMF0ucmVwbGFjZSgvXHMqOi8sICIiKTsKICAgICAgICAgICAgICAgICAgICBub2RlQS5hdHRycy5zdHlsZSA9IG5vZGVBLmF0dHJzLnN0eWxlLnJlcGxhY2UoLyZxdW90Oy9nLCcnKTsKICAgICAgICAgICAgICAgICAgICBub2RlQi5hdHRycy5zdHlsZSA9IG5vZGVCLmF0dHJzLnN0eWxlLnJlcGxhY2UoLyZxdW90Oy9nLCcnKTsKICAgICAgICAgICAgICAgICAgICB2YXIgc3R5bGVWYWx1ZUEgPSBub2RlQS5nZXRTdHlsZShzdHlsZU5hbWUpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXHMrL2csICIiKTsKICAgICAgICAgICAgICAgICAgICB2YXIgc3R5bGVWYWx1ZUIgPSBub2RlQi5nZXRTdHlsZShzdHlsZU5hbWUpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXHMrL2csICIiKTsKICAgICAgICAgICAgICAgICAgICBpZigvY29sb3IvLnRlc3Qoc3R5bGVOYW1lKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlVmFsdWVBID0gdGhpcy5mb3JtYXRDb2xvcihzdHlsZVZhbHVlQSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlVmFsdWVCID0gdGhpcy5mb3JtYXRDb2xvcihzdHlsZVZhbHVlQik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2U7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlVmFsdWVBICE9IHN0eWxlVmFsdWVCKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9LCBnZXRQcm9wZXJ0eUNvdW50OmZ1bmN0aW9uIChvKSB7CiAgICAgICAgdmFyIG4sIGNvdW50ID0gMDsKICAgICAgICBmb3IgKG4gaW4gbykgewogICAgICAgICAgICBpZiAoby5oYXNPd25Qcm9wZXJ0eShuKSkgewogICAgICAgICAgICAgICAgY291bnQrKzsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gY291bnQ7CiAgICB9LGZvcm1IcmVmOmZ1bmN0aW9uKHN0cil7CiAgICAgICAgaWYoc3RyLmxhc3RJbmRleE9mKCcvJyk9PSBzdHIubGVuZ3RoLTEpewogICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsc3RyLmxlbmd0aC0xKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0cjsKICAgIH0sY2hlY2tTYW1lTm9kZUF0dHJzOmZ1bmN0aW9uIChub2RlQSwgbm9kZUIpIHsKICAgICAgICB2YXIgbGVuZ3RoQSA9IHRoaXMuZ2V0UHJvcGVydHlDb3VudChub2RlQS5hdHRycyk7CiAgICAgICAgdmFyIGxlbmd0aEIgPSB0aGlzLmdldFByb3BlcnR5Q291bnQobm9kZUIuYXR0cnMpOwogICAgICAgIGlmICghKGxlbmd0aEEgJiYgbGVuZ3RoQikpCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIGVsc2UgaWYgKGxlbmd0aEEgIT0gbGVuZ3RoQikKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGVsc2UgewogICAgICAgICAgICBmb3IgKHZhciBwIGluIG5vZGVBLmF0dHJzKSB7CiAgICAgICAgICAgICAgICBpZighbm9kZUIuZ2V0QXR0cihwKSYmIW5vZGVBLmdldEF0dHIocCkpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICBlbHNlIGlmICghbm9kZUIuZ2V0QXR0cihwKXx8IW5vZGVBLmdldEF0dHIocCkpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgZWxzZSBpZiAocC50b0xvd2VyQ2FzZSgpID09ICJzdHlsZSIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2tOb2RlU3R5bGUobm9kZUEsIG5vZGVCKSkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZihwLnRvTG93ZXJDYXNlKCkgPT0gImhyZWYiKXsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5mb3JtSHJlZihub2RlQS5nZXRBdHRyKHApLnRvTG93ZXJDYXNlKCkpICE9IHRoaXMuZm9ybUhyZWYobm9kZUIuZ2V0QXR0cihwKS50b0xvd2VyQ2FzZSgpKSkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVBLmdldEF0dHIocCkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9eXHMrfFxzKyQvZywgIiIpICE9IG5vZGVCLmdldEF0dHIocCkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9eXHMrfFxzKyQvZywgIiIpKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CgogICAgfSwgY2hlY2tDaGlsZHJlbjpmdW5jdGlvbiAobm9kZUEsIG5vZGVCKSB7CiAgICAgICAgaWYgKCEobm9kZUEuY2hpbGRyZW4gfHwgbm9kZUIuY2hpbGRyZW4pKQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICBlbHNlIGlmICghKG5vZGVBLmNoaWxkcmVuICYmIG5vZGVCLmNoaWxkcmVuKSkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGVsc2UgaWYgKG5vZGVBLmNoaWxkcmVuLmxlbmd0aCAhPSBub2RlQi5jaGlsZHJlbi5sZW5ndGgpCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdmFyIGxlbmd0aEEgPSBub2RlQS5jaGlsZHJlbi5sZW5ndGg7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoQTsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2tTYW1lTm9kZShub2RlQS5jaGlsZHJlbltpXSwgbm9kZUIuY2hpbGRyZW5baV0pKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0sIGNoZWNrU2FtZU5vZGU6ZnVuY3Rpb24gKG5vZGVBLCBub2RlQikgewogICAgICAgIGlmICghdGhpcy5jaGVja1NhbWVOb2RlQXR0cnMobm9kZUEsIG5vZGVCKSkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGVsc2UgaWYgKCF0aGlzLmNoZWNrQ2hpbGRyZW4obm9kZUEsIG5vZGVCKSkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGVsc2UgaWYgKG5vZGVBLmRhdGEgIT0gbm9kZUIuZGF0YSkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGVsc2UgaWYgKCF0aGlzLmNoZWNrTG93ZXJDYXNlKG5vZGVBLnRhZ05hbWUsIG5vZGVCLnRhZ05hbWUpKQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgZWxzZSBpZiAoIXRoaXMuY2hlY2tMb3dlckNhc2Uobm9kZUEudHlwZSwgbm9kZUIudHlwZSkpCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBlbHNlCiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgfSwgY2hlY2tTYW1lSHRtbDpmdW5jdGlvbiAoc3RyaW5nQSwgc3RyaW5nQiwgc2Nob2xpdW0pIHsKICAgICAgICBvayh0aGlzLmNoZWNrU2FtZU5vZGUoVUUuaHRtbHBhcnNlcihzdHJpbmdBKSwgVUUuaHRtbHBhcnNlcihzdHJpbmdCKSksIHNjaG9saXVtKTsKICAgIH0sCiAgICBnZXRDb250ZXh0bWVudUluZGV4QnlOYW1lOmZ1bmN0aW9uKGNvbnRleHRtZW51LG5hbWUpewogICAgICAgIGZvcih2YXIgaT0wO2k8Y29udGV4dG1lbnUubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIGlmKGNvbnRleHRtZW51W2ldLmlubmVyVGV4dCA9PW5hbWUgfHwgY29udGV4dG1lbnVbaV0udGV4dENvbnRlbnQgPT1uYW1lKQogICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAwOwogICAgfQp9Owp2YXIgdWEgPSBVc2VyQWN0aW9uOwp2YXIgdXBhdGggPSB1YS5jb21tb25EYXRhLmN1cnJlbnRQYXRoKCk7CnZhciBjcGF0aCA9IHVhLmNvbW1vbkRhdGEuZGF0YWRpcjs=",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sun, 09 Nov 2014 00:31:20 GMT",
                    "Content-Length": "70133",
                    "Date": "Sun, 09 Nov 2014 00:31:21 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}