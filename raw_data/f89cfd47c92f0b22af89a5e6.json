{
    "url": "http://localhost:9999/carlcraig/tc-angular-chartjs/demo/js/vendor/angular.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>the 'name' property of a DOM element</b> via the following statement:<ul><li>window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/carlcraig/tc-angular-chartjs/demo/js/vendor/angular.js",
                "path": "/carlcraig/tc-angular-chartjs/demo/js/vendor/angular.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9jYXJsY3JhaWcvdGMtYW5ndWxhci1jaGFydGpzL2RlbW8vanMvdmVuZG9yL2FuZ3VsYXIuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyoqCiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS4zLjAtYmV0YS4xOQogKiAoYykgMjAxMC0yMDE0IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZwogKiBMaWNlbnNlOiBNSVQKICovCihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHsndXNlIHN0cmljdCc7CgovKioKICogQGRlc2NyaXB0aW9uCiAqCiAqIFRoaXMgb2JqZWN0IHByb3ZpZGVzIGEgdXRpbGl0eSBmb3IgcHJvZHVjaW5nIHJpY2ggRXJyb3IgbWVzc2FnZXMgd2l0aGluCiAqIEFuZ3VsYXIuIEl0IGNhbiBiZSBjYWxsZWQgYXMgZm9sbG93czoKICoKICogdmFyIGV4YW1wbGVNaW5FcnIgPSBtaW5FcnIoJ2V4YW1wbGUnKTsKICogdGhyb3cgZXhhbXBsZU1pbkVycignb25lJywgJ1RoaXMgezB9IGlzIHsxfScsIGZvbywgYmFyKTsKICoKICogVGhlIGFib3ZlIGNyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgbWluRXJyIGluIHRoZSBleGFtcGxlIG5hbWVzcGFjZS4gVGhlCiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIGhhdmUgYSBuYW1lc3BhY2VkIGVycm9yIGNvZGUgb2YgZXhhbXBsZS5vbmUuICBUaGUKICogcmVzdWx0aW5nIGVycm9yIHdpbGwgcmVwbGFjZSB7MH0gd2l0aCB0aGUgdmFsdWUgb2YgZm9vLCBhbmQgezF9IHdpdGggdGhlCiAqIHZhbHVlIG9mIGJhci4gVGhlIG9iamVjdCBpcyBub3QgcmVzdHJpY3RlZCBpbiB0aGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBpdCBjYW4KICogdGFrZS4KICoKICogSWYgZmV3ZXIgYXJndW1lbnRzIGFyZSBzcGVjaWZpZWQgdGhhbiBuZWNlc3NhcnkgZm9yIGludGVycG9sYXRpb24sIHRoZSBleHRyYQogKiBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgd2lsbCBiZSBwcmVzZXJ2ZWQgaW4gdGhlIGZpbmFsIHN0cmluZy4KICoKICogU2luY2UgZGF0YSB3aWxsIGJlIHBhcnNlZCBzdGF0aWNhbGx5IGR1cmluZyBhIGJ1aWxkIHN0ZXAsIHNvbWUgcmVzdHJpY3Rpb25zCiAqIGFyZSBhcHBsaWVkIHdpdGggcmVzcGVjdCB0byBob3cgbWluRXJyIGluc3RhbmNlcyBhcmUgY3JlYXRlZCBhbmQgY2FsbGVkLgogKiBJbnN0YW5jZXMgc2hvdWxkIGhhdmUgbmFtZXMgb2YgdGhlIGZvcm0gbmFtZXNwYWNlTWluRXJyIGZvciBhIG1pbkVyciBjcmVhdGVkCiAqIHVzaW5nIG1pbkVycignbmFtZXNwYWNlJykgLiBFcnJvciBjb2RlcywgbmFtZXNwYWNlcyBhbmQgdGVtcGxhdGUgc3RyaW5ncwogKiBzaG91bGQgYWxsIGJlIHN0YXRpYyBzdHJpbmdzLCBub3QgdmFyaWFibGVzIG9yIGdlbmVyYWwgZXhwcmVzc2lvbnMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGUgVGhlIG5hbWVzcGFjZSB0byB1c2UgZm9yIHRoZSBuZXcgbWluRXJyIGluc3RhbmNlLgogKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29kZTpzdHJpbmcsIHRlbXBsYXRlOnN0cmluZywgLi4udGVtcGxhdGVBcmdzKTogRXJyb3J9IG1pbkVyciBpbnN0YW5jZQogKi8KCmZ1bmN0aW9uIG1pbkVycihtb2R1bGUpIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIGNvZGUgPSBhcmd1bWVudHNbMF0sCiAgICAgIHByZWZpeCA9ICdbJyArIChtb2R1bGUgPyBtb2R1bGUgKyAnOicgOiAnJykgKyBjb2RlICsgJ10gJywKICAgICAgdGVtcGxhdGUgPSBhcmd1bWVudHNbMV0sCiAgICAgIHRlbXBsYXRlQXJncyA9IGFyZ3VtZW50cywKICAgICAgc3RyaW5naWZ5ID0gZnVuY3Rpb24gKG9iaikgewogICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICByZXR1cm4gb2JqLnRvU3RyaW5nKCkucmVwbGFjZSgvIFx7W1xzXFNdKiQvLCAnJyk7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb2JqOwogICAgICB9LAogICAgICBtZXNzYWdlLCBpOwoKICAgIG1lc3NhZ2UgPSBwcmVmaXggKyB0ZW1wbGF0ZS5yZXBsYWNlKC9ce1xkK1x9L2csIGZ1bmN0aW9uIChtYXRjaCkgewogICAgICB2YXIgaW5kZXggPSArbWF0Y2guc2xpY2UoMSwgLTEpLCBhcmc7CgogICAgICBpZiAoaW5kZXggKyAyIDwgdGVtcGxhdGVBcmdzLmxlbmd0aCkgewogICAgICAgIGFyZyA9IHRlbXBsYXRlQXJnc1tpbmRleCArIDJdOwogICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICByZXR1cm4gYXJnLnRvU3RyaW5nKCkucmVwbGFjZSgvID9ce1tcc1xTXSokLywgJycpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgIHJldHVybiAndW5kZWZpbmVkJzsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICByZXR1cm4gdG9Kc29uKGFyZyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhcmc7CiAgICAgIH0KICAgICAgcmV0dXJuIG1hdGNoOwogICAgfSk7CgogICAgbWVzc2FnZSA9IG1lc3NhZ2UgKyAnXG5odHRwOi8vZXJyb3JzLmFuZ3VsYXJqcy5vcmcvMS4zLjAtYmV0YS4xOS8nICsKICAgICAgKG1vZHVsZSA/IG1vZHVsZSArICcvJyA6ICcnKSArIGNvZGU7CiAgICBmb3IgKGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlICsgKGkgPT0gMiA/ICc/JyA6ICcmJykgKyAncCcgKyAoaS0yKSArICc9JyArCiAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeShhcmd1bWVudHNbaV0pKTsKICAgIH0KCiAgICByZXR1cm4gbmV3IEVycm9yKG1lc3NhZ2UpOwogIH07Cn0KCi8qIFdlIG5lZWQgdG8gdGVsbCBqc2hpbnQgd2hhdCB2YXJpYWJsZXMgYXJlIGJlaW5nIGV4cG9ydGVkICovCi8qIGdsb2JhbCBhbmd1bGFyOiB0cnVlLAogIG1zaWU6IHRydWUsCiAganFMaXRlOiB0cnVlLAogIGpRdWVyeTogdHJ1ZSwKICBzbGljZTogdHJ1ZSwKICBwdXNoOiB0cnVlLAogIHRvU3RyaW5nOiB0cnVlLAogIG5nTWluRXJyOiB0cnVlLAogIGFuZ3VsYXJNb2R1bGU6IHRydWUsCiAgbm9kZU5hbWVfOiB0cnVlLAogIHVpZDogdHJ1ZSwKICBSRUdFWF9TVFJJTkdfUkVHRVhQOiB0cnVlLAogIFZBTElESVRZX1NUQVRFX1BST1BFUlRZOiB0cnVlLAoKICBsb3dlcmNhc2U6IHRydWUsCiAgdXBwZXJjYXNlOiB0cnVlLAogIG1hbnVhbExvd2VyY2FzZTogdHJ1ZSwKICBtYW51YWxVcHBlcmNhc2U6IHRydWUsCiAgbm9kZU5hbWVfOiB0cnVlLAogIGlzQXJyYXlMaWtlOiB0cnVlLAogIGZvckVhY2g6IHRydWUsCiAgc29ydGVkS2V5czogdHJ1ZSwKICBmb3JFYWNoU29ydGVkOiB0cnVlLAogIHJldmVyc2VQYXJhbXM6IHRydWUsCiAgbmV4dFVpZDogdHJ1ZSwKICBzZXRIYXNoS2V5OiB0cnVlLAogIGV4dGVuZDogdHJ1ZSwKICBpbnQ6IHRydWUsCiAgaW5oZXJpdDogdHJ1ZSwKICBub29wOiB0cnVlLAogIGlkZW50aXR5OiB0cnVlLAogIHZhbHVlRm46IHRydWUsCiAgaXNVbmRlZmluZWQ6IHRydWUsCiAgaXNEZWZpbmVkOiB0cnVlLAogIGlzT2JqZWN0OiB0cnVlLAogIGlzU3RyaW5nOiB0cnVlLAogIGlzTnVtYmVyOiB0cnVlLAogIGlzRGF0ZTogdHJ1ZSwKICBpc0FycmF5OiB0cnVlLAogIGlzRnVuY3Rpb246IHRydWUsCiAgaXNSZWdFeHA6IHRydWUsCiAgaXNXaW5kb3c6IHRydWUsCiAgaXNTY29wZTogdHJ1ZSwKICBpc0ZpbGU6IHRydWUsCiAgaXNCbG9iOiB0cnVlLAogIGlzQm9vbGVhbjogdHJ1ZSwKICBpc1Byb21pc2VMaWtlOiB0cnVlLAogIHRyaW06IHRydWUsCiAgaXNFbGVtZW50OiB0cnVlLAogIG1ha2VNYXA6IHRydWUsCiAgbWFwOiB0cnVlLAogIHNpemU6IHRydWUsCiAgaW5jbHVkZXM6IHRydWUsCiAgaW5kZXhPZjogdHJ1ZSwKICBhcnJheVJlbW92ZTogdHJ1ZSwKICBpc0xlYWZOb2RlOiB0cnVlLAogIGNvcHk6IHRydWUsCiAgc2hhbGxvd0NvcHk6IHRydWUsCiAgZXF1YWxzOiB0cnVlLAogIGNzcDogdHJ1ZSwKICBjb25jYXQ6IHRydWUsCiAgc2xpY2VBcmdzOiB0cnVlLAogIGJpbmQ6IHRydWUsCiAgdG9Kc29uUmVwbGFjZXI6IHRydWUsCiAgdG9Kc29uOiB0cnVlLAogIGZyb21Kc29uOiB0cnVlLAogIHN0YXJ0aW5nVGFnOiB0cnVlLAogIHRyeURlY29kZVVSSUNvbXBvbmVudDogdHJ1ZSwKICBwYXJzZUtleVZhbHVlOiB0cnVlLAogIHRvS2V5VmFsdWU6IHRydWUsCiAgZW5jb2RlVXJpU2VnbWVudDogdHJ1ZSwKICBlbmNvZGVVcmlRdWVyeTogdHJ1ZSwKICBhbmd1bGFySW5pdDogdHJ1ZSwKICBib290c3RyYXA6IHRydWUsCiAgc25ha2VfY2FzZTogdHJ1ZSwKICBiaW5kSlF1ZXJ5OiB0cnVlLAogIGFzc2VydEFyZzogdHJ1ZSwKICBhc3NlcnRBcmdGbjogdHJ1ZSwKICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eTogdHJ1ZSwKICBnZXR0ZXI6IHRydWUsCiAgZ2V0QmxvY2tOb2RlczogdHJ1ZSwKICBoYXNPd25Qcm9wZXJ0eTogdHJ1ZSwKICBjcmVhdGVNYXA6IHRydWUsCiovCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBAbmdkb2MgbW9kdWxlCiAqIEBuYW1lIG5nCiAqIEBtb2R1bGUgbmcKICogQGRlc2NyaXB0aW9uCiAqCiAqICMgbmcgKGNvcmUgbW9kdWxlKQogKiBUaGUgbmcgbW9kdWxlIGlzIGxvYWRlZCBieSBkZWZhdWx0IHdoZW4gYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uIGlzIHN0YXJ0ZWQuIFRoZSBtb2R1bGUgaXRzZWxmCiAqIGNvbnRhaW5zIHRoZSBlc3NlbnRpYWwgY29tcG9uZW50cyBmb3IgYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uIHRvIGZ1bmN0aW9uLiBUaGUgdGFibGUgYmVsb3cKICogbGlzdHMgYSBoaWdoIGxldmVsIGJyZWFrZG93biBvZiBlYWNoIG9mIHRoZSBzZXJ2aWNlcy9mYWN0b3JpZXMsIGZpbHRlcnMsIGRpcmVjdGl2ZXMgYW5kIHRlc3RpbmcKICogY29tcG9uZW50cyBhdmFpbGFibGUgd2l0aGluIHRoaXMgY29yZSBtb2R1bGUuCiAqCiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPSJuZyI+PC9kaXY+CiAqLwoKdmFyIFJFR0VYX1NUUklOR19SRUdFWFAgPSAvXlwvKC4rKVwvKFthLXpdKikkLzsKCi8vIFRoZSBuYW1lIG9mIGEgZm9ybSBjb250cm9sJ3MgVmFsaWRpdHlTdGF0ZSBwcm9wZXJ0eS4KLy8gVGhpcyBpcyB1c2VkIHNvIHRoYXQgaXQncyBwb3NzaWJsZSBmb3IgaW50ZXJuYWwgdGVzdHMgdG8gY3JlYXRlIG1vY2sgVmFsaWRpdHlTdGF0ZXMuCnZhciBWQUxJRElUWV9TVEFURV9QUk9QRVJUWSA9ICd2YWxpZGl0eSc7CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIubG93ZXJjYXNlCiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHRvIGxvd2VyY2FzZS4KICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIGxvd2VyY2FzZS4KICogQHJldHVybnMge3N0cmluZ30gTG93ZXJjYXNlZCBzdHJpbmcuCiAqLwp2YXIgbG93ZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKXtyZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b0xvd2VyQ2FzZSgpIDogc3RyaW5nO307CnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIudXBwZXJjYXNlCiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHRvIHVwcGVyY2FzZS4KICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIHVwcGVyY2FzZS4KICogQHJldHVybnMge3N0cmluZ30gVXBwZXJjYXNlZCBzdHJpbmcuCiAqLwp2YXIgdXBwZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKXtyZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b1VwcGVyQ2FzZSgpIDogc3RyaW5nO307CgoKdmFyIG1hbnVhbExvd2VyY2FzZSA9IGZ1bmN0aW9uKHMpIHsKICAvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi8KICByZXR1cm4gaXNTdHJpbmcocykKICAgICAgPyBzLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uKGNoKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSB8IDMyKTt9KQogICAgICA6IHM7Cn07CnZhciBtYW51YWxVcHBlcmNhc2UgPSBmdW5jdGlvbihzKSB7CiAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovCiAgcmV0dXJuIGlzU3RyaW5nKHMpCiAgICAgID8gcy5yZXBsYWNlKC9bYS16XS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgJiB+MzIpO30pCiAgICAgIDogczsKfTsKCgovLyBTdHJpbmcjdG9Mb3dlckNhc2UgYW5kIFN0cmluZyN0b1VwcGVyQ2FzZSBkb24ndCBwcm9kdWNlIGNvcnJlY3QgcmVzdWx0cyBpbiBicm93c2VycyB3aXRoIFR1cmtpc2gKLy8gbG9jYWxlLCBmb3IgdGhpcyByZWFzb24gd2UgbmVlZCB0byBkZXRlY3QgdGhpcyBjYXNlIGFuZCByZWRlZmluZSBsb3dlcmNhc2UvdXBwZXJjYXNlIG1ldGhvZHMKLy8gd2l0aCBjb3JyZWN0IGJ1dCBzbG93ZXIgYWx0ZXJuYXRpdmVzLgppZiAoJ2knICE9PSAnSScudG9Mb3dlckNhc2UoKSkgewogIGxvd2VyY2FzZSA9IG1hbnVhbExvd2VyY2FzZTsKICB1cHBlcmNhc2UgPSBtYW51YWxVcHBlcmNhc2U7Cn0KCgp2YXIgLyoqIGhvbGRzIG1ham9yIHZlcnNpb24gbnVtYmVyIGZvciBJRSBvciBOYU4gZm9yIHJlYWwgYnJvd3NlcnMgKi8KICAgIG1zaWUsCiAgICBqcUxpdGUsICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nIHNpbmNlIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgYWZ0ZXIgdXMuCiAgICBqUXVlcnksICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nCiAgICBzbGljZSAgICAgICAgICAgICA9IFtdLnNsaWNlLAogICAgcHVzaCAgICAgICAgICAgICAgPSBbXS5wdXNoLAogICAgdG9TdHJpbmcgICAgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLAogICAgbmdNaW5FcnIgICAgICAgICAgPSBtaW5FcnIoJ25nJyksCgogICAgLyoqIEBuYW1lIGFuZ3VsYXIgKi8KICAgIGFuZ3VsYXIgICAgICAgICAgID0gd2luZG93LmFuZ3VsYXIgfHwgKHdpbmRvdy5hbmd1bGFyID0ge30pLAogICAgYW5ndWxhck1vZHVsZSwKICAgIG5vZGVOYW1lXywKICAgIHVpZCAgICAgICAgICAgICAgID0gMDsKCi8qKgogKiBJRSAxMSBjaGFuZ2VkIHRoZSBmb3JtYXQgb2YgdGhlIFVzZXJBZ2VudCBzdHJpbmcuCiAqIFNlZSBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1Mzc1MDMuYXNweAogKi8KbXNpZSA9IGludCgoL21zaWUgKFxkKykvLmV4ZWMobG93ZXJjYXNlKG5hdmlnYXRvci51c2VyQWdlbnQpKSB8fCBbXSlbMV0pOwppZiAoaXNOYU4obXNpZSkpIHsKICBtc2llID0gaW50KCgvdHJpZGVudFwvLio7IHJ2OihcZCspLy5leGVjKGxvd2VyY2FzZShuYXZpZ2F0b3IudXNlckFnZW50KSkgfHwgW10pWzFdKTsKfQoKCi8qKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IG9iagogKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgYG9iamAgaXMgYW4gYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QgKE5vZGVMaXN0LCBBcmd1bWVudHMsCiAqICAgICAgICAgICAgICAgICAgIFN0cmluZyAuLi4pCiAqLwpmdW5jdGlvbiBpc0FycmF5TGlrZShvYmopIHsKICBpZiAob2JqID09IG51bGwgfHwgaXNXaW5kb3cob2JqKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7CgogIGlmIChvYmoubm9kZVR5cGUgPT09IDEgJiYgbGVuZ3RoKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHJldHVybiBpc1N0cmluZyhvYmopIHx8IGlzQXJyYXkob2JqKSB8fCBsZW5ndGggPT09IDAgfHwKICAgICAgICAgdHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicgJiYgbGVuZ3RoID4gMCAmJiAobGVuZ3RoIC0gMSkgaW4gb2JqOwp9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuZm9yRWFjaAogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBJbnZva2VzIHRoZSBgaXRlcmF0b3JgIGZ1bmN0aW9uIG9uY2UgZm9yIGVhY2ggaXRlbSBpbiBgb2JqYCBjb2xsZWN0aW9uLCB3aGljaCBjYW4gYmUgZWl0aGVyIGFuCiAqIG9iamVjdCBvciBhbiBhcnJheS4gVGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIGBpdGVyYXRvcih2YWx1ZSwga2V5KWAsIHdoZXJlIGB2YWx1ZWAKICogaXMgdGhlIHZhbHVlIG9mIGFuIG9iamVjdCBwcm9wZXJ0eSBvciBhbiBhcnJheSBlbGVtZW50IGFuZCBga2V5YCBpcyB0aGUgb2JqZWN0IHByb3BlcnR5IGtleSBvcgogKiBhcnJheSBlbGVtZW50IGluZGV4LiBTcGVjaWZ5aW5nIGEgYGNvbnRleHRgIGZvciB0aGUgZnVuY3Rpb24gaXMgb3B0aW9uYWwuCiAqCiAqIEl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IGAuZm9yRWFjaGAgZG9lcyBub3QgaXRlcmF0ZSBvdmVyIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlY2F1c2UgaXQgZmlsdGVycwogKiB1c2luZyB0aGUgYGhhc093blByb3BlcnR5YCBtZXRob2QuCiAqCiAgIGBgYGpzCiAgICAgdmFyIHZhbHVlcyA9IHtuYW1lOiAnbWlza28nLCBnZW5kZXI6ICdtYWxlJ307CiAgICAgdmFyIGxvZyA9IFtdOwogICAgIGFuZ3VsYXIuZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAgIHRoaXMucHVzaChrZXkgKyAnOiAnICsgdmFsdWUpOwogICAgIH0sIGxvZyk7CiAgICAgZXhwZWN0KGxvZykudG9FcXVhbChbJ25hbWU6IG1pc2tvJywgJ2dlbmRlcjogbWFsZSddKTsKICAgYGBgCiAqCiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogT2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci4KICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3IgSXRlcmF0b3IgZnVuY3Rpb24uCiAqIEBwYXJhbSB7T2JqZWN0PX0gY29udGV4dCBPYmplY3QgdG8gYmVjb21lIGNvbnRleHQgKGB0aGlzYCkgZm9yIHRoZSBpdGVyYXRvciBmdW5jdGlvbi4KICogQHJldHVybnMge09iamVjdHxBcnJheX0gUmVmZXJlbmNlIHRvIGBvYmpgLgogKi8KCmZ1bmN0aW9uIGZvckVhY2gob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogIHZhciBrZXksIGxlbmd0aDsKICBpZiAob2JqKSB7CiAgICBpZiAoaXNGdW5jdGlvbihvYmopKSB7CiAgICAgIGZvciAoa2V5IGluIG9iaikgewogICAgICAgIC8vIE5lZWQgdG8gY2hlY2sgaWYgaGFzT3duUHJvcGVydHkgZXhpc3RzLAogICAgICAgIC8vIGFzIG9uIElFOCB0aGUgcmVzdWx0IG9mIHF1ZXJ5U2VsZWN0b3JBbGwgaXMgYW4gb2JqZWN0IHdpdGhvdXQgYSBoYXNPd25Qcm9wZXJ0eSBmdW5jdGlvbgogICAgICAgIGlmIChrZXkgIT0gJ3Byb3RvdHlwZScgJiYga2V5ICE9ICdsZW5ndGgnICYmIGtleSAhPSAnbmFtZScgJiYgKCFvYmouaGFzT3duUHJvcGVydHkgfHwgb2JqLmhhc093blByb3BlcnR5KGtleSkpKSB7CiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXkpOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikgfHwgaXNBcnJheUxpa2Uob2JqKSkgewogICAgICB2YXIgaXNQcmltaXRpdmUgPSB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JzsKICAgICAgZm9yIChrZXkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBrZXkgPCBsZW5ndGg7IGtleSsrKSB7CiAgICAgICAgaWYgKGlzUHJpbWl0aXZlIHx8IGtleSBpbiBvYmopIHsKICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKG9iai5mb3JFYWNoICYmIG9iai5mb3JFYWNoICE9PSBmb3JFYWNoKSB7CiAgICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpOwogICAgfSBlbHNlIHsKICAgICAgZm9yIChrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXkpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBzb3J0ZWRLZXlzKG9iaikgewogIHZhciBrZXlzID0gW107CiAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgIGtleXMucHVzaChrZXkpOwogICAgfQogIH0KICByZXR1cm4ga2V5cy5zb3J0KCk7Cn0KCmZ1bmN0aW9uIGZvckVhY2hTb3J0ZWQob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogIHZhciBrZXlzID0gc29ydGVkS2V5cyhvYmopOwogIGZvciAoIHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsKICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldKTsKICB9CiAgcmV0dXJuIGtleXM7Cn0KCgovKioKICogd2hlbiB1c2luZyBmb3JFYWNoIHRoZSBwYXJhbXMgYXJlIHZhbHVlLCBrZXksIGJ1dCBpdCBpcyBvZnRlbiB1c2VmdWwgdG8gaGF2ZSBrZXksIHZhbHVlLgogKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgKil9IGl0ZXJhdG9yRm4KICogQHJldHVybnMge2Z1bmN0aW9uKCosIHN0cmluZyl9CiAqLwpmdW5jdGlvbiByZXZlcnNlUGFyYW1zKGl0ZXJhdG9yRm4pIHsKICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGtleSkgeyBpdGVyYXRvckZuKGtleSwgdmFsdWUpOyB9Owp9CgovKioKICogQSBjb25zaXN0ZW50IHdheSBvZiBjcmVhdGluZyB1bmlxdWUgSURzIGluIGFuZ3VsYXIuCiAqCiAqIFVzaW5nIHNpbXBsZSBudW1iZXJzIGFsbG93cyB1cyB0byBnZW5lcmF0ZSAyOC42IG1pbGxpb24gdW5pcXVlIGlkcyBwZXIgc2Vjb25kIGZvciAxMCB5ZWFycyBiZWZvcmUKICogd2UgaGl0IG51bWJlciBwcmVjaXNpb24gaXNzdWVzIGluIEphdmFTY3JpcHQuCiAqCiAqIE1hdGgucG93KDIsNTMpIC8gNjAgLyA2MCAvIDI0IC8gMzY1IC8gMTAgPSAyOC42TQogKgogKiBAcmV0dXJucyB7bnVtYmVyfSBhbiB1bmlxdWUgYWxwaGEtbnVtZXJpYyBzdHJpbmcKICovCmZ1bmN0aW9uIG5leHRVaWQoKSB7CiAgcmV0dXJuICsrdWlkOwp9CgoKLyoqCiAqIFNldCBvciBjbGVhciB0aGUgaGFzaGtleSBmb3IgYW4gb2JqZWN0LgogKiBAcGFyYW0gb2JqIG9iamVjdAogKiBAcGFyYW0gaCB0aGUgaGFzaGtleSAoIXRydXRoeSB0byBkZWxldGUgdGhlIGhhc2hrZXkpCiAqLwpmdW5jdGlvbiBzZXRIYXNoS2V5KG9iaiwgaCkgewogIGlmIChoKSB7CiAgICBvYmouJCRoYXNoS2V5ID0gaDsKICB9CiAgZWxzZSB7CiAgICBkZWxldGUgb2JqLiQkaGFzaEtleTsKICB9Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5leHRlbmQKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgYWxsIG9mIHRoZSBwcm9wZXJ0aWVzIGZyb20gdGhlIGBzcmNgIG9iamVjdChzKQogKiB0byBgZHN0YC4gWW91IGNhbiBzcGVjaWZ5IG11bHRpcGxlIGBzcmNgIG9iamVjdHMuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBkc3QgRGVzdGluYXRpb24gb2JqZWN0LgogKiBAcGFyYW0gey4uLk9iamVjdH0gc3JjIFNvdXJjZSBvYmplY3QocykuCiAqIEByZXR1cm5zIHtPYmplY3R9IFJlZmVyZW5jZSB0byBgZHN0YC4KICovCmZ1bmN0aW9uIGV4dGVuZChkc3QpIHsKICB2YXIgaCA9IGRzdC4kJGhhc2hLZXk7CiAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG9iaikgewogICAgaWYgKG9iaiAhPT0gZHN0KSB7CiAgICAgIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTsKICAgICAgfSk7CiAgICB9CiAgfSk7CgogIHNldEhhc2hLZXkoZHN0LGgpOwogIHJldHVybiBkc3Q7Cn0KCmZ1bmN0aW9uIGludChzdHIpIHsKICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCk7Cn0KCgpmdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHsKICByZXR1cm4gZXh0ZW5kKG5ldyAoZXh0ZW5kKGZ1bmN0aW9uKCkge30sIHtwcm90b3R5cGU6cGFyZW50fSkpKCksIGV4dHJhKTsKfQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLm5vb3AKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIG5vIG9wZXJhdGlvbnMuIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGUKICogZnVuY3Rpb25hbCBzdHlsZS4KICAgYGBganMKICAgICBmdW5jdGlvbiBmb28oY2FsbGJhY2spIHsKICAgICAgIHZhciByZXN1bHQgPSBjYWxjdWxhdGVSZXN1bHQoKTsKICAgICAgIChjYWxsYmFjayB8fCBhbmd1bGFyLm5vb3ApKHJlc3VsdCk7CiAgICAgfQogICBgYGAKICovCmZ1bmN0aW9uIG5vb3AoKSB7fQpub29wLiRpbmplY3QgPSBbXTsKCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaWRlbnRpdHkKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGUKICogZnVuY3Rpb25hbCBzdHlsZS4KICoKICAgYGBganMKICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1lcih0cmFuc2Zvcm1hdGlvbkZuLCB2YWx1ZSkgewogICAgICAgcmV0dXJuICh0cmFuc2Zvcm1hdGlvbkZuIHx8IGFuZ3VsYXIuaWRlbnRpdHkpKHZhbHVlKTsKICAgICB9OwogICBgYGAKICovCmZ1bmN0aW9uIGlkZW50aXR5KCQpIHtyZXR1cm4gJDt9CmlkZW50aXR5LiRpbmplY3QgPSBbXTsKCgpmdW5jdGlvbiB2YWx1ZUZuKHZhbHVlKSB7cmV0dXJuIGZ1bmN0aW9uKCkge3JldHVybiB2YWx1ZTt9O30KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc1VuZGVmaW5lZAogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIHVuZGVmaW5lZC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLgogKi8KZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO30KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNEZWZpbmVkCiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgZGVmaW5lZC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgZGVmaW5lZC4KICovCmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc09iamVjdAogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBPYmplY3RgLiBVbmxpa2UgYHR5cGVvZmAgaW4gSmF2YVNjcmlwdCwgYG51bGxgcyBhcmUgbm90CiAqIGNvbnNpZGVyZWQgdG8gYmUgb2JqZWN0cy4gTm90ZSB0aGF0IEphdmFTY3JpcHQgYXJyYXlzIGFyZSBvYmplY3RzLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgT2JqZWN0YCBidXQgbm90IGBudWxsYC4KICovCmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKXsKICAvLyBodHRwOi8vanNwZXJmLmNvbS9pc29iamVjdDQKICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JzsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc1N0cmluZwogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYFN0cmluZ2AuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFN0cmluZ2AuCiAqLwpmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc051bWJlcgogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYE51bWJlcmAuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYE51bWJlcmAuCiAqLwpmdW5jdGlvbiBpc051bWJlcih2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0RhdGUKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgZGF0ZS4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRGF0ZWAuCiAqLwpmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHsKICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJzsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0FycmF5CiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYEFycmF5YC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYEFycmF5YC4KICovCnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTsKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0Z1bmN0aW9uCiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgRnVuY3Rpb25gLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBGdW5jdGlvbmAuCiAqLwpmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO30KCgovKioKICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgcmVndWxhciBleHByZXNzaW9uIG9iamVjdC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgUmVnRXhwYC4KICovCmZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7CiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJzsKfQoKCi8qKgogKiBDaGVja3MgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqZWN0LgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0geyp9IG9iaiBPYmplY3QgdG8gY2hlY2sKICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqLgogKi8KZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmoud2luZG93ID09PSBvYmo7Cn0KCgpmdW5jdGlvbiBpc1Njb3BlKG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLiRldmFsQXN5bmMgJiYgb2JqLiR3YXRjaDsKfQoKCmZ1bmN0aW9uIGlzRmlsZShvYmopIHsKICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBGaWxlXSc7Cn0KCgpmdW5jdGlvbiBpc0Jsb2Iob2JqKSB7CiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQmxvYl0nOwp9CgoKZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nOwp9CgoKZnVuY3Rpb24gaXNQcm9taXNlTGlrZShvYmopIHsKICByZXR1cm4gb2JqICYmIGlzRnVuY3Rpb24ob2JqLnRoZW4pOwp9CgoKdmFyIHRyaW0gPSBmdW5jdGlvbih2YWx1ZSkgewogIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTsKfTsKCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNFbGVtZW50CiAqIEBtb2R1bGUgbmcKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLgogKi8KZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHsKICByZXR1cm4gISEobm9kZSAmJgogICAgKG5vZGUubm9kZU5hbWUgIC8vIHdlIGFyZSBhIGRpcmVjdCBlbGVtZW50CiAgICB8fCAobm9kZS5wcm9wICYmIG5vZGUuYXR0ciAmJiBub2RlLmZpbmQpKSk7ICAvLyB3ZSBoYXZlIGFuIG9uIGFuZCBmaW5kIG1ldGhvZCBwYXJ0IG9mIGpRdWVyeSBBUEkKfQoKLyoqCiAqIEBwYXJhbSBzdHIgJ2tleTEsa2V5MiwuLi4nCiAqIEByZXR1cm5zIHtvYmplY3R9IGluIHRoZSBmb3JtIG9mIHtrZXkxOnRydWUsIGtleTI6dHJ1ZSwgLi4ufQogKi8KZnVuY3Rpb24gbWFrZU1hcChzdHIpIHsKICB2YXIgb2JqID0ge30sIGl0ZW1zID0gc3RyLnNwbGl0KCIsIiksIGk7CiAgZm9yICggaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKyApCiAgICBvYmpbIGl0ZW1zW2ldIF0gPSB0cnVlOwogIHJldHVybiBvYmo7Cn0KCgppZiAobXNpZSA8IDkpIHsKICBub2RlTmFtZV8gPSBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBlbGVtZW50ID0gZWxlbWVudC5ub2RlTmFtZSA/IGVsZW1lbnQgOiBlbGVtZW50WzBdOwogICAgcmV0dXJuIGxvd2VyY2FzZSgKICAgICAgKGVsZW1lbnQuc2NvcGVOYW1lICYmIGVsZW1lbnQuc2NvcGVOYW1lICE9ICdIVE1MJykKICAgICAgPyBlbGVtZW50LnNjb3BlTmFtZSArICc6JyArIGVsZW1lbnQubm9kZU5hbWUgOiBlbGVtZW50Lm5vZGVOYW1lCiAgICApOwogIH07Cn0gZWxzZSB7CiAgbm9kZU5hbWVfID0gZnVuY3Rpb24oZWxlbWVudCkgewogICAgcmV0dXJuIGxvd2VyY2FzZShlbGVtZW50Lm5vZGVOYW1lID8gZWxlbWVudC5ub2RlTmFtZSA6IGVsZW1lbnRbMF0ubm9kZU5hbWUpOwogIH07Cn0KCgpmdW5jdGlvbiBtYXAob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogIHZhciByZXN1bHRzID0gW107CiAgZm9yRWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgcmVzdWx0cy5wdXNoKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSk7CiAgfSk7CiAgcmV0dXJuIHJlc3VsdHM7Cn0KCgovKioKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiBhbiBhcnJheSwgdGhlIG51bWJlciBvZiBwcm9wZXJ0aWVzIGFuIG9iamVjdCBoYXMsIG9yCiAqIHRoZSBsZW5ndGggb2YgYSBzdHJpbmcuCiAqCiAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhdWdtZW50IHRoZSBPYmplY3QgdHlwZSBpbiBBbmd1bGFyIGV4cHJlc3Npb25zLiBTZWUKICoge0BsaW5rIGFuZ3VsYXIuT2JqZWN0fSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBBbmd1bGFyIGFycmF5cy4KICoKICogQHBhcmFtIHtPYmplY3R8QXJyYXl8c3RyaW5nfSBvYmogT2JqZWN0LCBhcnJheSwgb3Igc3RyaW5nIHRvIGluc3BlY3QuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW293blByb3BzT25seT1mYWxzZV0gQ291bnQgb25seSAib3duIiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdAogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgc2l6ZSBvZiBgb2JqYCBvciBgMGAgaWYgYG9iamAgaXMgbmVpdGhlciBhbiBvYmplY3Qgbm9yIGFuIGFycmF5LgogKi8KZnVuY3Rpb24gc2l6ZShvYmosIG93blByb3BzT25seSkgewogIHZhciBjb3VudCA9IDAsIGtleTsKCiAgaWYgKGlzQXJyYXkob2JqKSB8fCBpc1N0cmluZyhvYmopKSB7CiAgICByZXR1cm4gb2JqLmxlbmd0aDsKICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9iaikpIHsKICAgIGZvciAoa2V5IGluIG9iaikKICAgICAgaWYgKCFvd25Qcm9wc09ubHkgfHwgb2JqLmhhc093blByb3BlcnR5KGtleSkpCiAgICAgICAgY291bnQrKzsKICB9CgogIHJldHVybiBjb3VudDsKfQoKCmZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCBvYmopIHsKICByZXR1cm4gaW5kZXhPZihhcnJheSwgb2JqKSAhPSAtMTsKfQoKZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgb2JqKSB7CiAgaWYgKGFycmF5LmluZGV4T2YpIHJldHVybiBhcnJheS5pbmRleE9mKG9iaik7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsKICAgIGlmIChvYmogPT09IGFycmF5W2ldKSByZXR1cm4gaTsKICB9CiAgcmV0dXJuIC0xOwp9CgpmdW5jdGlvbiBhcnJheVJlbW92ZShhcnJheSwgdmFsdWUpIHsKICB2YXIgaW5kZXggPSBpbmRleE9mKGFycmF5LCB2YWx1ZSk7CiAgaWYgKGluZGV4ID49MCkKICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7CiAgcmV0dXJuIHZhbHVlOwp9CgpmdW5jdGlvbiBpc0xlYWZOb2RlIChub2RlKSB7CiAgaWYgKG5vZGUpIHsKICAgIHN3aXRjaCAobm9kZU5hbWVfKG5vZGUpKSB7CiAgICBjYXNlICJvcHRpb24iOgogICAgY2FzZSAicHJlIjoKICAgIGNhc2UgInRpdGxlIjoKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfQogIHJldHVybiBmYWxzZTsKfQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmNvcHkKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQ3JlYXRlcyBhIGRlZXAgY29weSBvZiBgc291cmNlYCwgd2hpY2ggc2hvdWxkIGJlIGFuIG9iamVjdCBvciBhbiBhcnJheS4KICoKICogKiBJZiBubyBkZXN0aW5hdGlvbiBpcyBzdXBwbGllZCwgYSBjb3B5IG9mIHRoZSBvYmplY3Qgb3IgYXJyYXkgaXMgY3JlYXRlZC4KICogKiBJZiBhIGRlc3RpbmF0aW9uIGlzIHByb3ZpZGVkLCBhbGwgb2YgaXRzIGVsZW1lbnRzIChmb3IgYXJyYXkpIG9yIHByb3BlcnRpZXMgKGZvciBvYmplY3RzKQogKiAgIGFyZSBkZWxldGVkIGFuZCB0aGVuIGFsbCBlbGVtZW50cy9wcm9wZXJ0aWVzIGZyb20gdGhlIHNvdXJjZSBhcmUgY29waWVkIHRvIGl0LgogKiAqIElmIGBzb3VyY2VgIGlzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXkgKGluYy4gYG51bGxgIGFuZCBgdW5kZWZpbmVkYCksIGBzb3VyY2VgIGlzIHJldHVybmVkLgogKiAqIElmIGBzb3VyY2VgIGlzIGlkZW50aWNhbCB0byAnZGVzdGluYXRpb24nIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi4KICoKICogQHBhcmFtIHsqfSBzb3VyY2UgVGhlIHNvdXJjZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBtYWtlIGEgY29weS4KICogICAgICAgICAgICAgICAgICAgQ2FuIGJlIGFueSB0eXBlLCBpbmNsdWRpbmcgcHJpbWl0aXZlcywgYG51bGxgLCBhbmQgYHVuZGVmaW5lZGAuCiAqIEBwYXJhbSB7KE9iamVjdHxBcnJheSk9fSBkZXN0aW5hdGlvbiBEZXN0aW5hdGlvbiBpbnRvIHdoaWNoIHRoZSBzb3VyY2UgaXMgY29waWVkLiBJZgogKiAgICAgcHJvdmlkZWQsIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZSBhcyBgc291cmNlYC4KICogQHJldHVybnMgeyp9IFRoZSBjb3B5IG9yIHVwZGF0ZWQgYGRlc3RpbmF0aW9uYCwgaWYgYGRlc3RpbmF0aW9uYCB3YXMgc3BlY2lmaWVkLgogKgogKiBAZXhhbXBsZQogPGV4YW1wbGUgbW9kdWxlPSJjb3B5RXhhbXBsZSI+CiA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KIDxkaXYgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogPGZvcm0gbm92YWxpZGF0ZSBjbGFzcz0ic2ltcGxlLWZvcm0iPgogTmFtZTogPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJ1c2VyLm5hbWUiIC8+PGJyIC8+CiBFLW1haWw6IDxpbnB1dCB0eXBlPSJlbWFpbCIgbmctbW9kZWw9InVzZXIuZW1haWwiIC8+PGJyIC8+CiBHZW5kZXI6IDxpbnB1dCB0eXBlPSJyYWRpbyIgbmctbW9kZWw9InVzZXIuZ2VuZGVyIiB2YWx1ZT0ibWFsZSIgLz5tYWxlCiA8aW5wdXQgdHlwZT0icmFkaW8iIG5nLW1vZGVsPSJ1c2VyLmdlbmRlciIgdmFsdWU9ImZlbWFsZSIgLz5mZW1hbGU8YnIgLz4KIDxidXR0b24gbmctY2xpY2s9InJlc2V0KCkiPlJFU0VUPC9idXR0b24+CiA8YnV0dG9uIG5nLWNsaWNrPSJ1cGRhdGUodXNlcikiPlNBVkU8L2J1dHRvbj4KIDwvZm9ybT4KIDxwcmU+Zm9ybSA9IHt7dXNlciB8IGpzb259fTwvcHJlPgogPHByZT5tYXN0ZXIgPSB7e21hc3RlciB8IGpzb259fTwvcHJlPgogPC9kaXY+CgogPHNjcmlwdD4KICBhbmd1bGFyLm1vZHVsZSgnY29weUV4YW1wbGUnLCBbXSkKICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICRzY29wZS5tYXN0ZXI9IHt9OwoKICAgICAgJHNjb3BlLnVwZGF0ZSA9IGZ1bmN0aW9uKHVzZXIpIHsKICAgICAgICAvLyBFeGFtcGxlIHdpdGggMSBhcmd1bWVudAogICAgICAgICRzY29wZS5tYXN0ZXI9IGFuZ3VsYXIuY29weSh1c2VyKTsKICAgICAgfTsKCiAgICAgICRzY29wZS5yZXNldCA9IGZ1bmN0aW9uKCkgewogICAgICAgIC8vIEV4YW1wbGUgd2l0aCAyIGFyZ3VtZW50cwogICAgICAgIGFuZ3VsYXIuY29weSgkc2NvcGUubWFzdGVyLCAkc2NvcGUudXNlcik7CiAgICAgIH07CgogICAgICAkc2NvcGUucmVzZXQoKTsKICAgIH1dKTsKIDwvc2NyaXB0PgogPC9maWxlPgogPC9leGFtcGxlPgogKi8KZnVuY3Rpb24gY29weShzb3VyY2UsIGRlc3RpbmF0aW9uLCBzdGFja1NvdXJjZSwgc3RhY2tEZXN0KSB7CiAgaWYgKGlzV2luZG93KHNvdXJjZSkgfHwgaXNTY29wZShzb3VyY2UpKSB7CiAgICB0aHJvdyBuZ01pbkVycignY3B3cycsCiAgICAgICJDYW4ndCBjb3B5ISBNYWtpbmcgY29waWVzIG9mIFdpbmRvdyBvciBTY29wZSBpbnN0YW5jZXMgaXMgbm90IHN1cHBvcnRlZC4iKTsKICB9CgogIGlmICghZGVzdGluYXRpb24pIHsKICAgIGRlc3RpbmF0aW9uID0gc291cmNlOwogICAgaWYgKHNvdXJjZSkgewogICAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7CiAgICAgICAgZGVzdGluYXRpb24gPSBjb3B5KHNvdXJjZSwgW10sIHN0YWNrU291cmNlLCBzdGFja0Rlc3QpOwogICAgICB9IGVsc2UgaWYgKGlzRGF0ZShzb3VyY2UpKSB7CiAgICAgICAgZGVzdGluYXRpb24gPSBuZXcgRGF0ZShzb3VyY2UuZ2V0VGltZSgpKTsKICAgICAgfSBlbHNlIGlmIChpc1JlZ0V4cChzb3VyY2UpKSB7CiAgICAgICAgZGVzdGluYXRpb24gPSBuZXcgUmVnRXhwKHNvdXJjZS5zb3VyY2UsIHNvdXJjZS50b1N0cmluZygpLm1hdGNoKC9bXlwvXSokLylbMF0pOwogICAgICAgIGRlc3RpbmF0aW9uLmxhc3RJbmRleCA9IHNvdXJjZS5sYXN0SW5kZXg7CiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSkgewogICAgICAgIHZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSkpOwogICAgICAgIGRlc3RpbmF0aW9uID0gY29weShzb3VyY2UsIGVtcHR5T2JqZWN0LCBzdGFja1NvdXJjZSwgc3RhY2tEZXN0KTsKICAgICAgfQogICAgfQogIH0gZWxzZSB7CiAgICBpZiAoc291cmNlID09PSBkZXN0aW5hdGlvbikgdGhyb3cgbmdNaW5FcnIoJ2NwaScsCiAgICAgICJDYW4ndCBjb3B5ISBTb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGFyZSBpZGVudGljYWwuIik7CgogICAgc3RhY2tTb3VyY2UgPSBzdGFja1NvdXJjZSB8fCBbXTsKICAgIHN0YWNrRGVzdCA9IHN0YWNrRGVzdCB8fCBbXTsKCiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkgewogICAgICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YWNrU291cmNlLCBzb3VyY2UpOwogICAgICBpZiAoaW5kZXggIT09IC0xKSByZXR1cm4gc3RhY2tEZXN0W2luZGV4XTsKCiAgICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlKTsKICAgICAgc3RhY2tEZXN0LnB1c2goZGVzdGluYXRpb24pOwogICAgfQoKICAgIHZhciByZXN1bHQ7CiAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7CiAgICAgIGRlc3RpbmF0aW9uLmxlbmd0aCA9IDA7CiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykgewogICAgICAgIHJlc3VsdCA9IGNvcHkoc291cmNlW2ldLCBudWxsLCBzdGFja1NvdXJjZSwgc3RhY2tEZXN0KTsKICAgICAgICBpZiAoaXNPYmplY3Qoc291cmNlW2ldKSkgewogICAgICAgICAgc3RhY2tTb3VyY2UucHVzaChzb3VyY2VbaV0pOwogICAgICAgICAgc3RhY2tEZXN0LnB1c2gocmVzdWx0KTsKICAgICAgICB9CiAgICAgICAgZGVzdGluYXRpb24ucHVzaChyZXN1bHQpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB2YXIgaCA9IGRlc3RpbmF0aW9uLiQkaGFzaEtleTsKICAgICAgaWYgKGlzQXJyYXkoZGVzdGluYXRpb24pKSB7CiAgICAgICAgZGVzdGluYXRpb24ubGVuZ3RoID0gMDsKICAgICAgfSBlbHNlIHsKICAgICAgICBmb3JFYWNoKGRlc3RpbmF0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICAgICBkZWxldGUgZGVzdGluYXRpb25ba2V5XTsKICAgICAgICB9KTsKICAgICAgfQogICAgICBmb3IgKCB2YXIga2V5IGluIHNvdXJjZSkgewogICAgICAgIGlmKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICByZXN1bHQgPSBjb3B5KHNvdXJjZVtrZXldLCBudWxsLCBzdGFja1NvdXJjZSwgc3RhY2tEZXN0KTsKICAgICAgICAgIGlmIChpc09iamVjdChzb3VyY2Vba2V5XSkpIHsKICAgICAgICAgICAgc3RhY2tTb3VyY2UucHVzaChzb3VyY2Vba2V5XSk7CiAgICAgICAgICAgIHN0YWNrRGVzdC5wdXNoKHJlc3VsdCk7CiAgICAgICAgICB9CiAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gcmVzdWx0OwogICAgICAgIH0KICAgICAgfQogICAgICBzZXRIYXNoS2V5KGRlc3RpbmF0aW9uLGgpOwogICAgfQoKICB9CiAgcmV0dXJuIGRlc3RpbmF0aW9uOwp9CgovKioKICogQ3JlYXRlcyBhIHNoYWxsb3cgY29weSBvZiBhbiBvYmplY3QsIGFuIGFycmF5IG9yIGEgcHJpbWl0aXZlLgogKgogKiBBc3N1bWVzIHRoYXQgdGhlcmUgbm8gcHJvdG8gcHJvcGVydGllcyBmb3Igb2JqZWN0cwogKi8KZnVuY3Rpb24gc2hhbGxvd0NvcHkoc3JjLCBkc3QpIHsKICBpZiAoaXNBcnJheShzcmMpKSB7CiAgICBkc3QgPSBkc3QgfHwgW107CgogICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgZHN0W2ldID0gc3JjW2ldOwogICAgfQogIH0gZWxzZSBpZiAoaXNPYmplY3Qoc3JjKSkgewogICAgZHN0ID0gZHN0IHx8IHt9OwoKICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHsKICAgICAgaWYgKCEoa2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykpIHsKICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldOwogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gZHN0IHx8IHNyYzsKfQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5lcXVhbHMKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiB0d28gb2JqZWN0cyBvciB0d28gdmFsdWVzIGFyZSBlcXVpdmFsZW50LiBTdXBwb3J0cyB2YWx1ZSB0eXBlcywgcmVndWxhcgogKiBleHByZXNzaW9ucywgYXJyYXlzIGFuZCBvYmplY3RzLgogKgogKiBUd28gb2JqZWN0cyBvciB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOgogKgogKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgcGFzcyBgPT09YCBjb21wYXJpc29uLgogKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kIGFsbCBvZiB0aGVpciBwcm9wZXJ0aWVzIGFyZSBlcXVhbCBieQogKiAgIGNvbXBhcmluZyB0aGVtIHdpdGggYGFuZ3VsYXIuZXF1YWxzYC4KICogKiBCb3RoIHZhbHVlcyBhcmUgTmFOLiAoSW4gSmF2YVNjcmlwdCwgTmFOID09IE5hTiA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byBOYU4gYXMgZXF1YWwpCiAqICogQm90aCB2YWx1ZXMgcmVwcmVzZW50IHRoZSBzYW1lIHJlZ3VsYXIgZXhwcmVzc2lvbiAoSW4gSmF2YVNjcmlwdCwKICogICAvYWJjLyA9PSAvYWJjLyA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byByZWd1bGFyIGV4cHJlc3Npb25zIGFzIGVxdWFsIHdoZW4gdGhlaXIgdGV4dHVhbAogKiAgIHJlcHJlc2VudGF0aW9uIG1hdGNoZXMpLgogKgogKiBEdXJpbmcgYSBwcm9wZXJ0eSBjb21wYXJpc29uLCBwcm9wZXJ0aWVzIG9mIGBmdW5jdGlvbmAgdHlwZSBhbmQgcHJvcGVydGllcyB3aXRoIG5hbWVzCiAqIHRoYXQgYmVnaW4gd2l0aCBgJGAgYXJlIGlnbm9yZWQuCiAqCiAqIFNjb3BlIGFuZCBET01XaW5kb3cgb2JqZWN0cyBhcmUgYmVpbmcgY29tcGFyZWQgb25seSBieSBpZGVudGlmeSAoYD09PWApLgogKgogKiBAcGFyYW0geyp9IG8xIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLgogKiBAcGFyYW0geyp9IG8yIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhcmd1bWVudHMgYXJlIGVxdWFsLgogKi8KZnVuY3Rpb24gZXF1YWxzKG8xLCBvMikgewogIGlmIChvMSA9PT0gbzIpIHJldHVybiB0cnVlOwogIGlmIChvMSA9PT0gbnVsbCB8fCBvMiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlOwogIGlmIChvMSAhPT0gbzEgJiYgbzIgIT09IG8yKSByZXR1cm4gdHJ1ZTsgLy8gTmFOID09PSBOYU4KICB2YXIgdDEgPSB0eXBlb2YgbzEsIHQyID0gdHlwZW9mIG8yLCBsZW5ndGgsIGtleSwga2V5U2V0OwogIGlmICh0MSA9PSB0MikgewogICAgaWYgKHQxID09ICdvYmplY3QnKSB7CiAgICAgIGlmIChpc0FycmF5KG8xKSkgewogICAgICAgIGlmICghaXNBcnJheShvMikpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoKGxlbmd0aCA9IG8xLmxlbmd0aCkgPT0gbzIubGVuZ3RoKSB7CiAgICAgICAgICBmb3Ioa2V5PTA7IGtleTxsZW5ndGg7IGtleSsrKSB7CiAgICAgICAgICAgIGlmICghZXF1YWxzKG8xW2tleV0sIG8yW2tleV0pKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKG8xKSkgewogICAgICAgIGlmICghaXNEYXRlKG8yKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIHJldHVybiBlcXVhbHMobzEuZ2V0VGltZSgpLCBvMi5nZXRUaW1lKCkpOwogICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKG8xKSAmJiBpc1JlZ0V4cChvMikpIHsKICAgICAgICByZXR1cm4gbzEudG9TdHJpbmcoKSA9PSBvMi50b1N0cmluZygpOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChpc1Njb3BlKG8xKSB8fCBpc1Njb3BlKG8yKSB8fCBpc1dpbmRvdyhvMSkgfHwgaXNXaW5kb3cobzIpIHx8IGlzQXJyYXkobzIpKSByZXR1cm4gZmFsc2U7CiAgICAgICAga2V5U2V0ID0ge307CiAgICAgICAgZm9yKGtleSBpbiBvMSkgewogICAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgPT09ICckJyB8fCBpc0Z1bmN0aW9uKG8xW2tleV0pKSBjb250aW51ZTsKICAgICAgICAgIGlmICghZXF1YWxzKG8xW2tleV0sIG8yW2tleV0pKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICBrZXlTZXRba2V5XSA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGZvcihrZXkgaW4gbzIpIHsKICAgICAgICAgIGlmICgha2V5U2V0Lmhhc093blByb3BlcnR5KGtleSkgJiYKICAgICAgICAgICAgICBrZXkuY2hhckF0KDApICE9PSAnJCcgJiYKICAgICAgICAgICAgICBvMltrZXldICE9PSB1bmRlZmluZWQgJiYKICAgICAgICAgICAgICAhaXNGdW5jdGlvbihvMltrZXldKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn0KCnZhciBjc3AgPSBmdW5jdGlvbigpIHsKICBpZiAoaXNEZWZpbmVkKGNzcC5pc0FjdGl2ZV8pKSByZXR1cm4gY3NwLmlzQWN0aXZlXzsKCiAgdmFyIGFjdGl2ZSA9ICEhKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuZy1jc3BdJykgfHwKICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbmctY3NwXScpKTsKCiAgaWYgKCFhY3RpdmUpIHsKICAgIHRyeSB7CiAgICAgIC8qIGpzaGludCAtVzAzMSwgLVcwNTQgKi8KICAgICAgbmV3IEZ1bmN0aW9uKCcnKTsKICAgICAgLyoganNoaW50ICtXMDMxLCArVzA1NCAqLwogICAgfSBjYXRjaCAoZSkgewogICAgICBhY3RpdmUgPSB0cnVlOwogICAgfQogIH0KCiAgcmV0dXJuIChjc3AuaXNBY3RpdmVfID0gYWN0aXZlKTsKfTsKCgoKZnVuY3Rpb24gY29uY2F0KGFycmF5MSwgYXJyYXkyLCBpbmRleCkgewogIHJldHVybiBhcnJheTEuY29uY2F0KHNsaWNlLmNhbGwoYXJyYXkyLCBpbmRleCkpOwp9CgpmdW5jdGlvbiBzbGljZUFyZ3MoYXJncywgc3RhcnRJbmRleCkgewogIHJldHVybiBzbGljZS5jYWxsKGFyZ3MsIHN0YXJ0SW5kZXggfHwgMCk7Cn0KCgovKiBqc2hpbnQgLVcxMDEgKi8KLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmJpbmQKICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGZ1bmN0aW9uIGBmbmAgYm91bmQgdG8gYHNlbGZgIChgc2VsZmAgYmVjb21lcyB0aGUgYHRoaXNgIGZvcgogKiBgZm5gKS4gWW91IGNhbiBzdXBwbHkgb3B0aW9uYWwgYGFyZ3NgIHRoYXQgYXJlIHByZWJvdW5kIHRvIHRoZSBmdW5jdGlvbi4gVGhpcyBmZWF0dXJlIGlzIGFsc28KICoga25vd24gYXMgW3BhcnRpYWwgYXBwbGljYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGFydGlhbF9hcHBsaWNhdGlvbiksIGFzCiAqIGRpc3Rpbmd1aXNoZWQgZnJvbSBbZnVuY3Rpb24gY3VycnlpbmddKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3VycnlpbmcjQ29udHJhc3Rfd2l0aF9wYXJ0aWFsX2Z1bmN0aW9uX2FwcGxpY2F0aW9uKS4KICoKICogQHBhcmFtIHtPYmplY3R9IHNlbGYgQ29udGV4dCB3aGljaCBgZm5gIHNob3VsZCBiZSBldmFsdWF0ZWQgaW4uCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gRnVuY3Rpb24gdG8gYmUgYm91bmQuCiAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBhcmd1bWVudHMgdG8gYmUgcHJlYm91bmQgdG8gdGhlIGBmbmAgZnVuY3Rpb24gY2FsbC4KICogQHJldHVybnMge2Z1bmN0aW9uKCl9IEZ1bmN0aW9uIHRoYXQgd3JhcHMgdGhlIGBmbmAgd2l0aCBhbGwgdGhlIHNwZWNpZmllZCBiaW5kaW5ncy4KICovCi8qIGpzaGludCArVzEwMSAqLwpmdW5jdGlvbiBiaW5kKHNlbGYsIGZuKSB7CiAgdmFyIGN1cnJ5QXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gc2xpY2VBcmdzKGFyZ3VtZW50cywgMikgOiBbXTsKICBpZiAoaXNGdW5jdGlvbihmbikgJiYgIShmbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHsKICAgIHJldHVybiBjdXJyeUFyZ3MubGVuZ3RoCiAgICAgID8gZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aAogICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGN1cnJ5QXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKSkKICAgICAgICAgICAgOiBmbi5hcHBseShzZWxmLCBjdXJyeUFyZ3MpOwogICAgICAgIH0KICAgICAgOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoCiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKQogICAgICAgICAgICA6IGZuLmNhbGwoc2VsZik7CiAgICAgICAgfTsKICB9IGVsc2UgewogICAgLy8gaW4gSUUsIG5hdGl2ZSBtZXRob2RzIGFyZSBub3QgZnVuY3Rpb25zIHNvIHRoZXkgY2Fubm90IGJlIGJvdW5kIChub3RlOiB0aGV5IGRvbid0IG5lZWQgdG8gYmUpCiAgICByZXR1cm4gZm47CiAgfQp9CgoKZnVuY3Rpb24gdG9Kc29uUmVwbGFjZXIoa2V5LCB2YWx1ZSkgewogIHZhciB2YWwgPSB2YWx1ZTsKCiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICckJyAmJiBrZXkuY2hhckF0KDEpID09PSAnJCcpIHsKICAgIHZhbCA9IHVuZGVmaW5lZDsKICB9IGVsc2UgaWYgKGlzV2luZG93KHZhbHVlKSkgewogICAgdmFsID0gJyRXSU5ET1cnOwogIH0gZWxzZSBpZiAodmFsdWUgJiYgIGRvY3VtZW50ID09PSB2YWx1ZSkgewogICAgdmFsID0gJyRET0NVTUVOVCc7CiAgfSBlbHNlIGlmIChpc1Njb3BlKHZhbHVlKSkgewogICAgdmFsID0gJyRTQ09QRSc7CiAgfQoKICByZXR1cm4gdmFsOwp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLnRvSnNvbgogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTZXJpYWxpemVzIGlucHV0IGludG8gYSBKU09OLWZvcm1hdHRlZCBzdHJpbmcuIFByb3BlcnRpZXMgd2l0aCBsZWFkaW5nICQkIGNoYXJhY3RlcnMgd2lsbCBiZQogKiBzdHJpcHBlZCBzaW5jZSBhbmd1bGFyIHVzZXMgdGhpcyBub3RhdGlvbiBpbnRlcm5hbGx5LgogKgogKiBAcGFyYW0ge09iamVjdHxBcnJheXxEYXRlfHN0cmluZ3xudW1iZXJ9IG9iaiBJbnB1dCB0byBiZSBzZXJpYWxpemVkIGludG8gSlNPTi4KICogQHBhcmFtIHtib29sZWFuPX0gcHJldHR5IElmIHNldCB0byB0cnVlLCB0aGUgSlNPTiBvdXRwdXQgd2lsbCBjb250YWluIG5ld2xpbmVzIGFuZCB3aGl0ZXNwYWNlLgogKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gSlNPTi1pZmllZCBzdHJpbmcgcmVwcmVzZW50aW5nIGBvYmpgLgogKi8KZnVuY3Rpb24gdG9Kc29uKG9iaiwgcHJldHR5KSB7CiAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdW5kZWZpbmVkOwogIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIHRvSnNvblJlcGxhY2VyLCBwcmV0dHkgPyAnICAnIDogbnVsbCk7Cn0KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuZnJvbUpzb24KICogQG1vZHVsZSBuZwogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGVzZXJpYWxpemVzIGEgSlNPTiBzdHJpbmcuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIEpTT04gc3RyaW5nIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fHN0cmluZ3xudW1iZXJ9IERlc2VyaWFsaXplZCB0aGluZ3kuCiAqLwpmdW5jdGlvbiBmcm9tSnNvbihqc29uKSB7CiAgcmV0dXJuIGlzU3RyaW5nKGpzb24pCiAgICAgID8gSlNPTi5wYXJzZShqc29uKQogICAgICA6IGpzb247Cn0KCgovKioKICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlbGVtZW50LgogKi8KZnVuY3Rpb24gc3RhcnRpbmdUYWcoZWxlbWVudCkgewogIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCkuY2xvbmUoKTsKICB0cnkgewogICAgLy8gdHVybnMgb3V0IElFIGRvZXMgbm90IGxldCB5b3Ugc2V0IC5odG1sKCkgb24gZWxlbWVudHMgd2hpY2gKICAgIC8vIGFyZSBub3QgYWxsb3dlZCB0byBoYXZlIGNoaWxkcmVuLiBTbyB3ZSBqdXN0IGlnbm9yZSBpdC4KICAgIGVsZW1lbnQuZW1wdHkoKTsKICB9IGNhdGNoKGUpIHt9CiAgLy8gQXMgUGVyIERPTSBTdGFuZGFyZHMKICB2YXIgVEVYVF9OT0RFID0gMzsKICB2YXIgZWxlbUh0bWwgPSBqcUxpdGUoJzxkaXY+JykuYXBwZW5kKGVsZW1lbnQpLmh0bWwoKTsKICB0cnkgewogICAgcmV0dXJuIGVsZW1lbnRbMF0ubm9kZVR5cGUgPT09IFRFWFRfTk9ERSA/IGxvd2VyY2FzZShlbGVtSHRtbCkgOgogICAgICAgIGVsZW1IdG1sLgogICAgICAgICAgbWF0Y2goL14oPFtePl0rPikvKVsxXS4KICAgICAgICAgIHJlcGxhY2UoL148KFtcd1wtXSspLywgZnVuY3Rpb24obWF0Y2gsIG5vZGVOYW1lKSB7IHJldHVybiAnPCcgKyBsb3dlcmNhc2Uobm9kZU5hbWUpOyB9KTsKICB9IGNhdGNoKGUpIHsKICAgIHJldHVybiBsb3dlcmNhc2UoZWxlbUh0bWwpOwogIH0KCn0KCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovKioKICogVHJpZXMgdG8gZGVjb2RlIHRoZSBVUkkgY29tcG9uZW50IHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLgogKgogKiBAcHJpdmF0ZQogKiBAcGFyYW0gc3RyIHZhbHVlIHBvdGVudGlhbCBVUkkgY29tcG9uZW50IHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGNhbiBiZSBkZWNvZGVkCiAqIHdpdGggdGhlIGRlY29kZVVSSUNvbXBvbmVudCBmdW5jdGlvbi4KICovCmZ1bmN0aW9uIHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgewogIHRyeSB7CiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKICB9IGNhdGNoKGUpIHsKICAgIC8vIElnbm9yZSBhbnkgaW52YWxpZCB1cmkgY29tcG9uZW50CiAgfQp9CgoKLyoqCiAqIFBhcnNlcyBhbiBlc2NhcGVkIHVybCBxdWVyeSBzdHJpbmcgaW50byBrZXktdmFsdWUgcGFpcnMuCiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZyxib29sZWFufEFycmF5Pn0KICovCmZ1bmN0aW9uIHBhcnNlS2V5VmFsdWUoLyoqc3RyaW5nKi9rZXlWYWx1ZSkgewogIHZhciBvYmogPSB7fSwga2V5X3ZhbHVlLCBrZXk7CiAgZm9yRWFjaCgoa2V5VmFsdWUgfHwgIiIpLnNwbGl0KCcmJyksIGZ1bmN0aW9uKGtleVZhbHVlKSB7CiAgICBpZiAoIGtleVZhbHVlICkgewogICAgICBrZXlfdmFsdWUgPSBrZXlWYWx1ZS5yZXBsYWNlKC9cKy9nLCclMjAnKS5zcGxpdCgnPScpOwogICAgICBrZXkgPSB0cnlEZWNvZGVVUklDb21wb25lbnQoa2V5X3ZhbHVlWzBdKTsKICAgICAgaWYgKCBpc0RlZmluZWQoa2V5KSApIHsKICAgICAgICB2YXIgdmFsID0gaXNEZWZpbmVkKGtleV92YWx1ZVsxXSkgPyB0cnlEZWNvZGVVUklDb21wb25lbnQoa2V5X3ZhbHVlWzFdKSA6IHRydWU7CiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgb2JqW2tleV0gPSB2YWw7CiAgICAgICAgfSBlbHNlIGlmKGlzQXJyYXkob2JqW2tleV0pKSB7CiAgICAgICAgICBvYmpba2V5XS5wdXNoKHZhbCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG9ialtrZXldID0gW29ialtrZXldLHZhbF07CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSk7CiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gdG9LZXlWYWx1ZShvYmopIHsKICB2YXIgcGFydHMgPSBbXTsKICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7CiAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKGFycmF5VmFsdWUpIHsKICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgKwogICAgICAgICAgICAgICAgICAgKGFycmF5VmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KGFycmF5VmFsdWUsIHRydWUpKSk7CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArCiAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogJz0nICsgZW5jb2RlVXJpUXVlcnkodmFsdWUsIHRydWUpKSk7CiAgICB9CiAgfSk7CiAgcmV0dXJuIHBhcnRzLmxlbmd0aCA/IHBhcnRzLmpvaW4oJyYnKSA6ICcnOwp9CgoKLyoqCiAqIFdlIG5lZWQgb3VyIGN1c3RvbSBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGRvZXNuJ3QgZm9sbG93CiAqIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0IHdpdGggcmVnYXJkcyB0byB0aGUgY2hhcmFjdGVyIHNldCAocGNoYXIpIGFsbG93ZWQgaW4gcGF0aAogKiBzZWdtZW50czoKICogICAgc2VnbWVudCAgICAgICA9ICpwY2hhcgogKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvICI6IiAvICJAIgogKiAgICBwY3QtZW5jb2RlZCAgID0gIiUiIEhFWERJRyBIRVhESUcKICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyAiLSIgLyAiLiIgLyAiXyIgLyAifiIKICogICAgc3ViLWRlbGltcyAgICA9ICIhIiAvICIkIiAvICImIiAvICInIiAvICIoIiAvICIpIgogKiAgICAgICAgICAgICAgICAgICAgIC8gIioiIC8gIisiIC8gIiwiIC8gIjsiIC8gIj0iCiAqLwpmdW5jdGlvbiBlbmNvZGVVcmlTZWdtZW50KHZhbCkgewogIHJldHVybiBlbmNvZGVVcmlRdWVyeSh2YWwsIHRydWUpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTI2L2dpLCAnJicpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTNEL2dpLCAnPScpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTJCL2dpLCAnKycpOwp9CgoKLyoqCiAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBlbmNvZGluZyAqa2V5KiBvciAqdmFsdWUqIHBhcnRzIG9mIHF1ZXJ5IGNvbXBvbmVudC4gV2UgbmVlZCBhIGN1c3RvbQogKiBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGVuY29kZXMgc3R1ZmYgdGhhdCBkb2Vzbid0IGhhdmUgdG8gYmUKICogZW5jb2RlZCBwZXIgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NjoKICogICAgcXVlcnkgICAgICAgPSAqKCBwY2hhciAvICIvIiAvICI/IiApCiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gIjoiIC8gIkAiCiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gIi0iIC8gIi4iIC8gIl8iIC8gIn4iCiAqICAgIHBjdC1lbmNvZGVkICAgPSAiJSIgSEVYRElHIEhFWERJRwogKiAgICBzdWItZGVsaW1zICAgID0gIiEiIC8gIiQiIC8gIiYiIC8gIiciIC8gIigiIC8gIikiCiAqICAgICAgICAgICAgICAgICAgICAgLyAiKiIgLyAiKyIgLyAiLCIgLyAiOyIgLyAiPSIKICovCmZ1bmN0aW9uIGVuY29kZVVyaVF1ZXJ5KHZhbCwgcGN0RW5jb2RlU3BhY2VzKSB7CiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTI0L2csICckJykuCiAgICAgICAgICAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuCiAgICAgICAgICAgICByZXBsYWNlKC8lM0IvZ2ksICc7JykuCiAgICAgICAgICAgICByZXBsYWNlKC8lMjAvZywgKHBjdEVuY29kZVNwYWNlcyA/ICclMjAnIDogJysnKSk7Cn0KCnZhciBuZ0F0dHJQcmVmaXhlcyA9IFsnbmctJywgJ2RhdGEtbmctJywgJ25nOicsICd4LW5nLSddOwoKZnVuY3Rpb24gZ2V0TmdBdHRyaWJ1dGUoZWxlbWVudCwgbmdBdHRyKSB7CiAgdmFyIGF0dHIsIGksIGlpID0gbmdBdHRyUHJlZml4ZXMubGVuZ3RoOwogIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7CiAgZm9yIChpPTA7IGk8aWk7ICsraSkgewogICAgYXR0ciA9IG5nQXR0clByZWZpeGVzW2ldICsgbmdBdHRyOwogICAgaWYgKGlzU3RyaW5nKGF0dHIgPSBlbGVtZW50LmF0dHIoYXR0cikpKSB7CiAgICAgIHJldHVybiBhdHRyOwogICAgfQogIH0KICByZXR1cm4gbnVsbDsKfQoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdBcHAKICogQG1vZHVsZSBuZwogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHthbmd1bGFyLk1vZHVsZX0gbmdBcHAgYW4gb3B0aW9uYWwgYXBwbGljYXRpb24KICogICB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlfSBuYW1lIHRvIGxvYWQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nU3RyaWN0RGkgaWYgdGhpcyBhdHRyaWJ1dGUgaXMgcHJlc2VudCBvbiB0aGUgYXBwIGVsZW1lbnQsIHRoZSBpbmplY3RvciB3aWxsIGJlCiAqICAgY3JlYXRlZCBpbiAic3RyaWN0LWRpIiBtb2RlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGFwcGxpY2F0aW9uIHdpbGwgZmFpbCB0byBpbnZva2UgZnVuY3Rpb25zIHdoaWNoCiAqICAgZG8gbm90IHVzZSBleHBsaWNpdCBmdW5jdGlvbiBhbm5vdGF0aW9uIChhbmQgYXJlIHRodXMgdW5zdWl0YWJsZSBmb3IgbWluaWZpY2F0aW9uKSwgYXMgZGVzY3JpYmVkCiAqICAgaW4ge0BsaW5rIGd1aWRlL2RpIHRoZSBEZXBlbmRlbmN5IEluamVjdGlvbiBndWlkZX0sIGFuZCB1c2VmdWwgZGVidWdnaW5nIGluZm8gd2lsbCBhc3Npc3QgaW4KICogICB0cmFja2luZyBkb3duIHRoZSByb290IG9mIHRoZXNlIGJ1Z3MuCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBVc2UgdGhpcyBkaXJlY3RpdmUgdG8gKiphdXRvLWJvb3RzdHJhcCoqIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbi4gVGhlIGBuZ0FwcGAgZGlyZWN0aXZlCiAqIGRlc2lnbmF0ZXMgdGhlICoqcm9vdCBlbGVtZW50Kiogb2YgdGhlIGFwcGxpY2F0aW9uIGFuZCBpcyB0eXBpY2FsbHkgcGxhY2VkIG5lYXIgdGhlIHJvb3QgZWxlbWVudAogKiBvZiB0aGUgcGFnZSAtIGUuZy4gb24gdGhlIGA8Ym9keT5gIG9yIGA8aHRtbD5gIHRhZ3MuCiAqCiAqIE9ubHkgb25lIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBjYW4gYmUgYXV0by1ib290c3RyYXBwZWQgcGVyIEhUTUwgZG9jdW1lbnQuIFRoZSBmaXJzdCBgbmdBcHBgCiAqIGZvdW5kIGluIHRoZSBkb2N1bWVudCB3aWxsIGJlIHVzZWQgdG8gZGVmaW5lIHRoZSByb290IGVsZW1lbnQgdG8gYXV0by1ib290c3RyYXAgYXMgYW4KICogYXBwbGljYXRpb24uIFRvIHJ1biBtdWx0aXBsZSBhcHBsaWNhdGlvbnMgaW4gYW4gSFRNTCBkb2N1bWVudCB5b3UgbXVzdCBtYW51YWxseSBib290c3RyYXAgdGhlbSB1c2luZwogKiB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9IGluc3RlYWQuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbnMgY2Fubm90IGJlIG5lc3RlZCB3aXRoaW4gZWFjaCBvdGhlci4KICoKICogWW91IGNhbiBzcGVjaWZ5IGFuICoqQW5ndWxhckpTIG1vZHVsZSoqIHRvIGJlIHVzZWQgYXMgdGhlIHJvb3QgbW9kdWxlIGZvciB0aGUgYXBwbGljYXRpb24uICBUaGlzCiAqIG1vZHVsZSB3aWxsIGJlIGxvYWRlZCBpbnRvIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3J9IHdoZW4gdGhlIGFwcGxpY2F0aW9uIGlzIGJvb3RzdHJhcHBlZCBhbmQKICogc2hvdWxkIGNvbnRhaW4gdGhlIGFwcGxpY2F0aW9uIGNvZGUgbmVlZGVkIG9yIGhhdmUgZGVwZW5kZW5jaWVzIG9uIG90aGVyIG1vZHVsZXMgdGhhdCB3aWxsCiAqIGNvbnRhaW4gdGhlIGNvZGUuIFNlZSB7QGxpbmsgYW5ndWxhci5tb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLgogKgogKiBJbiB0aGUgZXhhbXBsZSBiZWxvdyBpZiB0aGUgYG5nQXBwYCBkaXJlY3RpdmUgd2VyZSBub3QgcGxhY2VkIG9uIHRoZSBgaHRtbGAgZWxlbWVudCB0aGVuIHRoZQogKiBkb2N1bWVudCB3b3VsZCBub3QgYmUgY29tcGlsZWQsIHRoZSBgQXBwQ29udHJvbGxlcmAgd291bGQgbm90IGJlIGluc3RhbnRpYXRlZCBhbmQgdGhlIGB7eyBhK2IgfX1gCiAqIHdvdWxkIG5vdCBiZSByZXNvbHZlZCB0byBgM2AuCiAqCiAqIGBuZ0FwcGAgaXMgdGhlIGVhc2llc3QsIGFuZCBtb3N0IGNvbW1vbiwgd2F5IHRvIGJvb3RzdHJhcCBhbiBhcHBsaWNhdGlvbi4KICoKIDxleGFtcGxlIG1vZHVsZT0ibmdBcHBEZW1vIj4KICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgIDxkaXYgbmctY29udHJvbGxlcj0ibmdBcHBEZW1vQ29udHJvbGxlciI+CiAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fQogICA8L2Rpdj4KICAgPC9maWxlPgogICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICBhbmd1bGFyLm1vZHVsZSgnbmdBcHBEZW1vJywgW10pLmNvbnRyb2xsZXIoJ25nQXBwRGVtb0NvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAkc2NvcGUuYSA9IDE7CiAgICAgJHNjb3BlLmIgPSAyOwogICB9KTsKICAgPC9maWxlPgogPC9leGFtcGxlPgogKgogKiBVc2luZyBgbmdTdHJpY3REaWAsIHlvdSB3b3VsZCBzZWUgc29tZXRoaW5nIGxpa2UgdGhpczoKICoKIDxleGFtcGxlIG5nLWFwcC1pbmNsdWRlZD0idHJ1ZSI+CiAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICA8ZGl2IG5nLWFwcD0ibmdBcHBTdHJpY3REZW1vIiBuZy1zdHJpY3QtZGk+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9Ikdvb2RDb250cm9sbGVyMSI+CiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fQoKICAgICAgICAgICA8cD5UaGlzIHJlbmRlcnMgYmVjYXVzZSB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBmYWlsIHRvCiAgICAgICAgICAgICAgaW5zdGFudGlhdGUsIGJ5IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gc3R5bGUgKHNlZQogICAgICAgICAgICAgIHNjcmlwdC5qcyBmb3IgZGV0YWlscykKICAgICAgICAgICA8L3A+CiAgICAgICA8L2Rpdj4KCiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9Ikdvb2RDb250cm9sbGVyMiI+CiAgICAgICAgICAgTmFtZTogPGlucHV0IG5nLW1vZGVsPSJuYW1lIj48YnIgLz4KICAgICAgICAgICBIZWxsbywge3tuYW1lfX0hCgogICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG8KICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZQogICAgICAgICAgICAgIChzZWUgc2NyaXB0LmpzIGZvciBkZXRhaWxzKQogICAgICAgICAgIDwvcD4KICAgICAgIDwvZGl2PgoKICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQmFkQ29udHJvbGxlciI+CiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fQoKICAgICAgICAgICA8cD5UaGUgY29udHJvbGxlciBjb3VsZCBub3QgYmUgaW5zdGFudGlhdGVkLCBkdWUgdG8gcmVseWluZwogICAgICAgICAgICAgIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9ucyAod2hpY2ggYXJlIGRpc2FibGVkIGluCiAgICAgICAgICAgICAgc3RyaWN0IG1vZGUpLiBBcyBzdWNoLCB0aGUgY29udGVudCBvZiB0aGlzIHNlY3Rpb24gaXMgbm90CiAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkLCBhbmQgdGhlcmUgc2hvdWxkIGJlIGFuIGVycm9yIGluIHlvdXIgd2ViIGNvbnNvbGUuCiAgICAgICAgICAgPC9wPgogICAgICAgPC9kaXY+CiAgIDwvZGl2PgogICA8L2ZpbGU+CiAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgIGFuZ3VsYXIubW9kdWxlKCduZ0FwcFN0cmljdERlbW8nLCBbXSkKICAgICAvLyBCYWRDb250cm9sbGVyIHdpbGwgZmFpbCB0byBpbnN0YW50aWF0ZSwgZHVlIHRvIHJlbHlpbmcgb24gYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24sCiAgICAgLy8gcmF0aGVyIHRoYW4gYW4gZXhwbGljaXQgYW5ub3RhdGlvbgogICAgIC5jb250cm9sbGVyKCdCYWRDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAkc2NvcGUuYSA9IDE7CiAgICAgICAkc2NvcGUuYiA9IDI7CiAgICAgfSkKICAgICAvLyBVbmxpa2UgQmFkQ29udHJvbGxlciwgR29vZENvbnRyb2xsZXIxIGFuZCBHb29kQ29udHJvbGxlcjIgd2lsbCBub3QgZmFpbCB0byBiZSBpbnN0YW50aWF0ZWQsCiAgICAgLy8gZHVlIHRvIHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb25zIHVzaW5nIHRoZSBhcnJheSBzdHlsZSBhbmQgJGluamVjdCBwcm9wZXJ0eSwgcmVzcGVjdGl2ZWx5LgogICAgIC5jb250cm9sbGVyKCdHb29kQ29udHJvbGxlcjEnLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgJHNjb3BlLmEgPSAxOwogICAgICAgJHNjb3BlLmIgPSAyOwogICAgIH1dKQogICAgIC5jb250cm9sbGVyKCdHb29kQ29udHJvbGxlcjInLCBHb29kQ29udHJvbGxlcjIpOwogICAgIGZ1bmN0aW9uIEdvb2RDb250cm9sbGVyMigkc2NvcGUpIHsKICAgICAgICRzY29wZS5uYW1lID0gIldvcmxkIjsKICAgICB9CiAgICAgR29vZENvbnRyb2xsZXIyLiRpbmplY3QgPSBbJyRzY29wZSddOwogICA8L2ZpbGU+CiAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgIGRpdltuZy1jb250cm9sbGVyXSB7CiAgICAgICBtYXJnaW4tYm90dG9tOiAxZW07CiAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDRweDsKICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDsKICAgICAgIGJvcmRlcjogMXB4IHNvbGlkOwogICAgICAgcGFkZGluZzogLjVlbTsKICAgfQogICBkaXZbbmctY29udHJvbGxlcl49R29vZF0gewogICAgICAgYm9yZGVyLWNvbG9yOiAjZDZlOWM2OwogICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RmZjBkODsKICAgICAgIGNvbG9yOiAjM2M3NjNkOwogICB9CiAgIGRpdltuZy1jb250cm9sbGVyXj1CYWRdIHsKICAgICAgIGJvcmRlci1jb2xvcjogI2ViY2NkMTsKICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmRlZGU7CiAgICAgICBjb2xvcjogI2E5NDQ0MjsKICAgICAgIG1hcmdpbi1ib3R0b206IDA7CiAgIH0KICAgPC9maWxlPgogPC9leGFtcGxlPgogKi8KZnVuY3Rpb24gYW5ndWxhckluaXQoZWxlbWVudCwgYm9vdHN0cmFwKSB7CiAgdmFyIGFwcEVsZW1lbnQsCiAgICAgIG1vZHVsZSwKICAgICAgY29uZmlnID0ge307CgogIC8vIFRoZSBlbGVtZW50IGBlbGVtZW50YCBoYXMgcHJpb3JpdHkgb3ZlciBhbnkgb3RoZXIgZWxlbWVudAogIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkgewogICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJzsKCiAgICBpZiAoIWFwcEVsZW1lbnQgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSkpIHsKICAgICAgYXBwRWxlbWVudCA9IGVsZW1lbnQ7CiAgICAgIG1vZHVsZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpOwogICAgfQogIH0pOwogIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkgewogICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJzsKICAgIHZhciBjYW5kaWRhdGU7CgogICAgaWYgKCFhcHBFbGVtZW50ICYmIChjYW5kaWRhdGUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgbmFtZS5yZXBsYWNlKCc6JywgJ1xcOicpICsgJ10nKSkpIHsKICAgICAgYXBwRWxlbWVudCA9IGNhbmRpZGF0ZTsKICAgICAgbW9kdWxlID0gY2FuZGlkYXRlLmdldEF0dHJpYnV0ZShuYW1lKTsKICAgIH0KICB9KTsKICBpZiAoYXBwRWxlbWVudCkgewogICAgY29uZmlnLnN0cmljdERpID0gZ2V0TmdBdHRyaWJ1dGUoYXBwRWxlbWVudCwgInN0cmljdC1kaSIpICE9PSBudWxsOwogICAgYm9vdHN0cmFwKGFwcEVsZW1lbnQsIG1vZHVsZSA/IFttb2R1bGVdIDogW10sIGNvbmZpZyk7CiAgfQp9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuYm9vdHN0cmFwCiAqIEBtb2R1bGUgbmcKICogQGRlc2NyaXB0aW9uCiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN0YXJ0IHVwIGFuZ3VsYXIgYXBwbGljYXRpb24uCiAqCiAqIFNlZToge0BsaW5rIGd1aWRlL2Jvb3RzdHJhcCBCb290c3RyYXB9CiAqCiAqIE5vdGUgdGhhdCBQcm90cmFjdG9yIGJhc2VkIGVuZC10by1lbmQgdGVzdHMgY2Fubm90IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGJvb3RzdHJhcCBtYW51YWxseS4KICogVGhleSBtdXN0IHVzZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfS4KICoKICogQW5ndWxhciB3aWxsIGRldGVjdCBpZiBpdCBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgYnJvd3NlciBtb3JlIHRoYW4gb25jZSBhbmQgb25seSBhbGxvdyB0aGUKICogZmlyc3QgbG9hZGVkIHNjcmlwdCB0byBiZSBib290c3RyYXBwZWQgYW5kIHdpbGwgcmVwb3J0IGEgd2FybmluZyB0byB0aGUgYnJvd3NlciBjb25zb2xlIGZvcgogKiBlYWNoIG9mIHRoZSBzdWJzZXF1ZW50IHNjcmlwdHMuIFRoaXMgcHJldmVudHMgc3RyYW5nZSByZXN1bHRzIGluIGFwcGxpY2F0aW9ucywgd2hlcmUgb3RoZXJ3aXNlCiAqIG11bHRpcGxlIGluc3RhbmNlcyBvZiBBbmd1bGFyIHRyeSB0byB3b3JrIG9uIHRoZSBET00uCiAqCiAqIGBgYGh0bWwKICogPCFkb2N0eXBlIGh0bWw+CiAqIDxodG1sPgogKiA8Ym9keT4KICogPGRpdiBuZy1jb250cm9sbGVyPSJXZWxjb21lQ29udHJvbGxlciI+CiAqICAge3tncmVldGluZ319CiAqIDwvZGl2PgogKgogKiA8c2NyaXB0IHNyYz0iYW5ndWxhci5qcyI+PC9zY3JpcHQ+CiAqIDxzY3JpcHQ+CiAqICAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdkZW1vJywgW10pCiAqICAgLmNvbnRyb2xsZXIoJ1dlbGNvbWVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAqICAgICAgICRzY29wZS5ncmVldGluZyA9ICdXZWxjb21lISc7CiAqICAgfSk7CiAqICAgYW5ndWxhci5ib290c3RyYXAoZG9jdW1lbnQsIFsnZGVtbyddKTsKICogPC9zY3JpcHQ+CiAqIDwvYm9keT4KICogPC9odG1sPgogKiBgYGAKICoKICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uCiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfEZ1bmN0aW9ufEFycmF5Pj19IG1vZHVsZXMgYW4gYXJyYXkgb2YgbW9kdWxlcyB0byBsb2FkIGludG8gdGhlIGFwcGxpY2F0aW9uLgogKiAgICAgRWFjaCBpdGVtIGluIHRoZSBhcnJheSBzaG91bGQgYmUgdGhlIG5hbWUgb2YgYSBwcmVkZWZpbmVkIG1vZHVsZSBvciBhIChESSBhbm5vdGF0ZWQpCiAqICAgICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBieSB0aGUgaW5qZWN0b3IgYXMgYSBydW4gYmxvY2suCiAqICAgICBTZWU6IHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfQogKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBhbiBvYmplY3QgZm9yIGRlZmluaW5nIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGFwcGxpY2F0aW9uLiBUaGUKICogICAgIGZvbGxvd2luZyBrZXlzIGFyZSBzdXBwb3J0ZWQ6CiAqCiAqICAgICAtIGBzdHJpY3REaWA6IGRpc2FibGUgYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhpcyBpcyBtZWFudCB0bwogKiAgICAgICBhc3Npc3QgaW4gZmluZGluZyBidWdzIHdoaWNoIGJyZWFrIG1pbmlmaWVkIGNvZGUuCiAqCiAqIEByZXR1cm5zIHthdXRvLiRpbmplY3Rvcn0gUmV0dXJucyB0aGUgbmV3bHkgY3JlYXRlZCBpbmplY3RvciBmb3IgdGhpcyBhcHAuCiAqLwpmdW5jdGlvbiBib290c3RyYXAoZWxlbWVudCwgbW9kdWxlcywgY29uZmlnKSB7CiAgaWYgKCFpc09iamVjdChjb25maWcpKSBjb25maWcgPSB7fTsKICB2YXIgZGVmYXVsdENvbmZpZyA9IHsKICAgIHN0cmljdERpOiBmYWxzZQogIH07CiAgY29uZmlnID0gZXh0ZW5kKGRlZmF1bHRDb25maWcsIGNvbmZpZyk7CiAgdmFyIGRvQm9vdHN0cmFwID0gZnVuY3Rpb24oKSB7CiAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpOwoKICAgIGlmIChlbGVtZW50LmluamVjdG9yKCkpIHsKICAgICAgdmFyIHRhZyA9IChlbGVtZW50WzBdID09PSBkb2N1bWVudCkgPyAnZG9jdW1lbnQnIDogc3RhcnRpbmdUYWcoZWxlbWVudCk7CiAgICAgIC8vRW5jb2RlIGFuZ2xlIGJyYWNrZXRzIHRvIHByZXZlbnQgaW5wdXQgZnJvbSBiZWluZyBzYW5pdGl6ZWQgdG8gZW1wdHkgc3RyaW5nICM4NjgzCiAgICAgIHRocm93IG5nTWluRXJyKAogICAgICAgICAgJ2J0c3RycGQnLAogICAgICAgICAgIkFwcCBBbHJlYWR5IEJvb3RzdHJhcHBlZCB3aXRoIHRoaXMgRWxlbWVudCAnezB9JyIsCiAgICAgICAgICB0YWcucmVwbGFjZSgvPC8sJyZsdDsnKS5yZXBsYWNlKC8+LywnJmd0OycpKTsKICAgIH0KCiAgICBtb2R1bGVzID0gbW9kdWxlcyB8fCBbXTsKICAgIG1vZHVsZXMudW5zaGlmdChbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHsKICAgICAgJHByb3ZpZGUudmFsdWUoJyRyb290RWxlbWVudCcsIGVsZW1lbnQpOwogICAgfV0pOwogICAgbW9kdWxlcy51bnNoaWZ0KCduZycpOwogICAgdmFyIGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IobW9kdWxlcywgY29uZmlnLnN0cmljdERpKTsKICAgIGluamVjdG9yLmludm9rZShbJyRyb290U2NvcGUnLCAnJHJvb3RFbGVtZW50JywgJyRjb21waWxlJywgJyRpbmplY3RvcicsCiAgICAgICBmdW5jdGlvbiBib290c3RyYXBBcHBseShzY29wZSwgZWxlbWVudCwgY29tcGlsZSwgaW5qZWN0b3IpIHsKICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICBlbGVtZW50LmRhdGEoJyRpbmplY3RvcicsIGluamVjdG9yKTsKICAgICAgICAgIGNvbXBpbGUoZWxlbWVudCkoc2NvcGUpOwogICAgICAgIH0pOwogICAgICB9XQogICAgKTsKICAgIHJldHVybiBpbmplY3RvcjsKICB9OwoKICB2YXIgTkdfREVGRVJfQk9PVFNUUkFQID0gL15OR19ERUZFUl9CT09UU1RSQVAhLzsKCiAgaWYgKHdpbmRvdyAmJiAhTkdfREVGRVJfQk9PVFNUUkFQLnRlc3Qod2luZG93Lm5hbWUpKSB7CiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTsKICB9CgogIHdpbmRvdy5uYW1lID0gd2luZG93Lm5hbWUucmVwbGFjZShOR19ERUZFUl9CT09UU1RSQVAsICcnKTsKICBhbmd1bGFyLnJlc3VtZUJvb3RzdHJhcCA9IGZ1bmN0aW9uKGV4dHJhTW9kdWxlcykgewogICAgZm9yRWFjaChleHRyYU1vZHVsZXMsIGZ1bmN0aW9uKG1vZHVsZSkgewogICAgICBtb2R1bGVzLnB1c2gobW9kdWxlKTsKICAgIH0pOwogICAgZG9Cb290c3RyYXAoKTsKICB9Owp9Cgp2YXIgU05BS0VfQ0FTRV9SRUdFWFAgPSAvW0EtWl0vZzsKZnVuY3Rpb24gc25ha2VfY2FzZShuYW1lLCBzZXBhcmF0b3IpIHsKICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJ18nOwogIHJldHVybiBuYW1lLnJlcGxhY2UoU05BS0VfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7CiAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpOwogIH0pOwp9Cgp2YXIgYmluZEpRdWVyeUZpcmVkID0gZmFsc2U7CnZhciBza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YTsKZnVuY3Rpb24gYmluZEpRdWVyeSgpIHsKICB2YXIgb3JpZ2luYWxDbGVhbkRhdGE7CgogIGlmIChiaW5kSlF1ZXJ5RmlyZWQpIHsKICAgIHJldHVybjsKICB9CgogIC8vIGJpbmQgdG8galF1ZXJ5IGlmIHByZXNlbnQ7CiAgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTsKICAvLyBVc2UgalF1ZXJ5IGlmIGl0IGV4aXN0cyB3aXRoIHByb3BlciBmdW5jdGlvbmFsaXR5LCBvdGhlcndpc2UgZGVmYXVsdCB0byB1cy4KICAvLyBBbmd1bGFyIDEuMisgcmVxdWlyZXMgalF1ZXJ5IDEuNysgZm9yIG9uKCkvb2ZmKCkgc3VwcG9ydC4KICAvLyBBbmd1bGFyIDEuMysgdGVjaG5pY2FsbHkgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IDIuMSsgYnV0IGl0IG1heSB3b3JrIHdpdGggb2xkZXIKICAvLyB2ZXJzaW9ucy4gSXQgd2lsbCBub3Qgd29yayBmb3Igc3VyZSB3aXRoIGpRdWVyeSA8MS43LCB0aG91Z2guCiAgaWYgKGpRdWVyeSAmJiBqUXVlcnkuZm4ub24pIHsKICAgIGpxTGl0ZSA9IGpRdWVyeTsKICAgIGV4dGVuZChqUXVlcnkuZm4sIHsKICAgICAgc2NvcGU6IEpRTGl0ZVByb3RvdHlwZS5zY29wZSwKICAgICAgaXNvbGF0ZVNjb3BlOiBKUUxpdGVQcm90b3R5cGUuaXNvbGF0ZVNjb3BlLAogICAgICBjb250cm9sbGVyOiBKUUxpdGVQcm90b3R5cGUuY29udHJvbGxlciwKICAgICAgaW5qZWN0b3I6IEpRTGl0ZVByb3RvdHlwZS5pbmplY3RvciwKICAgICAgaW5oZXJpdGVkRGF0YTogSlFMaXRlUHJvdG90eXBlLmluaGVyaXRlZERhdGEKICAgIH0pOwoKICAgIC8vIEFsbCBub2RlcyByZW1vdmVkIGZyb20gdGhlIERPTSB2aWEgdmFyaW91cyBqUXVlcnkgQVBJcyBsaWtlIC5yZW1vdmUoKQogICAgLy8gYXJlIHBhc3NlZCB0aHJvdWdoIGpRdWVyeS5jbGVhbkRhdGEuIE1vbmtleS1wYXRjaCB0aGlzIG1ldGhvZCB0byBmaXJlCiAgICAvLyB0aGUgJGRlc3Ryb3kgZXZlbnQgb24gYWxsIHJlbW92ZWQgbm9kZXMuCiAgICBvcmlnaW5hbENsZWFuRGF0YSA9IGpRdWVyeS5jbGVhbkRhdGE7CiAgICBqUXVlcnkuY2xlYW5EYXRhID0gZnVuY3Rpb24oZWxlbXMpIHsKICAgICAgaWYgKCFza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSkgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBlbGVtOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKyspIHsKICAgICAgICAgIGpRdWVyeShlbGVtKS50cmlnZ2VySGFuZGxlcignJGRlc3Ryb3knKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGEgPSBmYWxzZTsKICAgICAgfQogICAgICBvcmlnaW5hbENsZWFuRGF0YShlbGVtcyk7CiAgICB9OwogIH0gZWxzZSB7CiAgICBqcUxpdGUgPSBKUUxpdGU7CiAgfQoKICBhbmd1bGFyLmVsZW1lbnQgPSBqcUxpdGU7CgogIC8vIFByZXZlbnQgZG91YmxlLXByb3h5aW5nLgogIGJpbmRKUXVlcnlGaXJlZCA9IHRydWU7Cn0KCi8qKgogKiB0aHJvdyBlcnJvciBpZiB0aGUgYXJndW1lbnQgaXMgZmFsc3kuCiAqLwpmdW5jdGlvbiBhc3NlcnRBcmcoYXJnLCBuYW1lLCByZWFzb24pIHsKICBpZiAoIWFyZykgewogICAgdGhyb3cgbmdNaW5FcnIoJ2FyZXEnLCAiQXJndW1lbnQgJ3swfScgaXMgezF9IiwgKG5hbWUgfHwgJz8nKSwgKHJlYXNvbiB8fCAicmVxdWlyZWQiKSk7CiAgfQogIHJldHVybiBhcmc7Cn0KCmZ1bmN0aW9uIGFzc2VydEFyZ0ZuKGFyZywgbmFtZSwgYWNjZXB0QXJyYXlBbm5vdGF0aW9uKSB7CiAgaWYgKGFjY2VwdEFycmF5QW5ub3RhdGlvbiAmJiBpc0FycmF5KGFyZykpIHsKICAgICAgYXJnID0gYXJnW2FyZy5sZW5ndGggLSAxXTsKICB9CgogIGFzc2VydEFyZyhpc0Z1bmN0aW9uKGFyZyksIG5hbWUsICdub3QgYSBmdW5jdGlvbiwgZ290ICcgKwogICAgICAoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnID8gYXJnLmNvbnN0cnVjdG9yLm5hbWUgfHwgJ09iamVjdCcgOiB0eXBlb2YgYXJnKSk7CiAgcmV0dXJuIGFyZzsKfQoKLyoqCiAqIHRocm93IGVycm9yIGlmIHRoZSBuYW1lIGdpdmVuIGlzIGhhc093blByb3BlcnR5CiAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSAgICB0aGUgbmFtZSB0byB0ZXN0CiAqIEBwYXJhbSAge1N0cmluZ30gY29udGV4dCB0aGUgY29udGV4dCBpbiB3aGljaCB0aGUgbmFtZSBpcyB1c2VkLCBzdWNoIGFzIG1vZHVsZSBvciBkaXJlY3RpdmUKICovCmZ1bmN0aW9uIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsIGNvbnRleHQpIHsKICBpZiAobmFtZSA9PT0gJ2hhc093blByb3BlcnR5JykgewogICAgdGhyb3cgbmdNaW5FcnIoJ2JhZG5hbWUnLCAiaGFzT3duUHJvcGVydHkgaXMgbm90IGEgdmFsaWQgezB9IG5hbWUiLCBjb250ZXh0KTsKICB9Cn0KCi8qKgogKiBSZXR1cm4gdGhlIHZhbHVlIGFjY2Vzc2libGUgZnJvbSB0aGUgb2JqZWN0IGJ5IHBhdGguIEFueSB1bmRlZmluZWQgdHJhdmVyc2FscyBhcmUgaWdub3JlZAogKiBAcGFyYW0ge09iamVjdH0gb2JqIHN0YXJ0aW5nIG9iamVjdAogKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBwYXRoIHRvIHRyYXZlcnNlCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2JpbmRGblRvU2NvcGU9dHJ1ZV0KICogQHJldHVybnMge09iamVjdH0gdmFsdWUgYXMgYWNjZXNzaWJsZSBieSBwYXRoCiAqLwovL1RPRE8obWlza28pOiB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJlbW92ZWQKZnVuY3Rpb24gZ2V0dGVyKG9iaiwgcGF0aCwgYmluZEZuVG9TY29wZSkgewogIGlmICghcGF0aCkgcmV0dXJuIG9iajsKICB2YXIga2V5cyA9IHBhdGguc3BsaXQoJy4nKTsKICB2YXIga2V5OwogIHZhciBsYXN0SW5zdGFuY2UgPSBvYmo7CiAgdmFyIGxlbiA9IGtleXMubGVuZ3RoOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICBrZXkgPSBrZXlzW2ldOwogICAgaWYgKG9iaikgewogICAgICBvYmogPSAobGFzdEluc3RhbmNlID0gb2JqKVtrZXldOwogICAgfQogIH0KICBpZiAoIWJpbmRGblRvU2NvcGUgJiYgaXNGdW5jdGlvbihvYmopKSB7CiAgICByZXR1cm4gYmluZChsYXN0SW5zdGFuY2UsIG9iaik7CiAgfQogIHJldHVybiBvYmo7Cn0KCi8qKgogKiBSZXR1cm4gdGhlIERPTSBzaWJsaW5ncyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBub2RlIGluIHRoZSBnaXZlbiBhcnJheS4KICogQHBhcmFtIHtBcnJheX0gYXJyYXkgbGlrZSBvYmplY3QKICogQHJldHVybnMge2pxTGl0ZX0ganFMaXRlIGNvbGxlY3Rpb24gY29udGFpbmluZyB0aGUgbm9kZXMKICovCmZ1bmN0aW9uIGdldEJsb2NrTm9kZXMobm9kZXMpIHsKICAvLyBUT0RPKHBlcmYpOiBqdXN0IGNoZWNrIGlmIGFsbCBpdGVtcyBpbiBgbm9kZXNgIGFyZSBzaWJsaW5ncyBhbmQgaWYgdGhleSBhcmUgcmV0dXJuIHRoZSBvcmlnaW5hbAogIC8vICAgICAgICAgICAgIGNvbGxlY3Rpb24sIG90aGVyd2lzZSB1cGRhdGUgdGhlIG9yaWdpbmFsIGNvbGxlY3Rpb24uCiAgdmFyIG5vZGUgPSBub2Rlc1swXTsKICB2YXIgZW5kTm9kZSA9IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdOwogIHZhciBibG9ja05vZGVzID0gW25vZGVdOwoKICBkbyB7CiAgICBub2RlID0gbm9kZS5uZXh0U2libGluZzsKICAgIGlmICghbm9kZSkgYnJlYWs7CiAgICBibG9ja05vZGVzLnB1c2gobm9kZSk7CiAgfSB3aGlsZSAobm9kZSAhPT0gZW5kTm9kZSk7CgogIHJldHVybiBqcUxpdGUoYmxvY2tOb2Rlcyk7Cn0KCgovKioKICogQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aG91dCBhIHByb3RvdHlwZS4gVGhpcyBvYmplY3QgaXMgdXNlZnVsIGZvciBsb29rdXAgd2l0aG91dCBoYXZpbmcgdG8KICogZ3VhcmQgYWdhaW5zdCBwcm90b3R5cGljYWxseSBpbmhlcml0ZWQgcHJvcGVydGllcyB2aWEgaGFzT3duUHJvcGVydHkuCiAqCiAqIFJlbGF0ZWQgbWljcm8tYmVuY2htYXJrczoKICogLSBodHRwOi8vanNwZXJmLmNvbS9vYmplY3QtY3JlYXRlMgogKiAtIGh0dHA6Ly9qc3BlcmYuY29tL3Byb3RvLW1hcC1sb29rdXAvMgogKiAtIGh0dHA6Ly9qc3BlcmYuY29tL2Zvci1pbi12cy1vYmplY3Qta2V5czIKICoKICogQHJldHVybnMge09iamVjdH0KICovCmZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHsKICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTsKfQoKLyoqCiAqIEBuZ2RvYyB0eXBlCiAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlCiAqIEBtb2R1bGUgbmcKICogQGRlc2NyaXB0aW9uCiAqCiAqIEludGVyZmFjZSBmb3IgY29uZmlndXJpbmcgYW5ndWxhciB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlc30uCiAqLwoKZnVuY3Rpb24gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KSB7CgogIHZhciAkaW5qZWN0b3JNaW5FcnIgPSBtaW5FcnIoJyRpbmplY3RvcicpOwogIHZhciBuZ01pbkVyciA9IG1pbkVycignbmcnKTsKCiAgZnVuY3Rpb24gZW5zdXJlKG9iaiwgbmFtZSwgZmFjdG9yeSkgewogICAgcmV0dXJuIG9ialtuYW1lXSB8fCAob2JqW25hbWVdID0gZmFjdG9yeSgpKTsKICB9CgogIHZhciBhbmd1bGFyID0gZW5zdXJlKHdpbmRvdywgJ2FuZ3VsYXInLCBPYmplY3QpOwoKICAvLyBXZSBuZWVkIHRvIGV4cG9zZSBgYW5ndWxhci4kJG1pbkVycmAgdG8gbW9kdWxlcyBzdWNoIGFzIGBuZ1Jlc291cmNlYCB0aGF0IHJlZmVyZW5jZSBpdCBkdXJpbmcgYm9vdHN0cmFwCiAgYW5ndWxhci4kJG1pbkVyciA9IGFuZ3VsYXIuJCRtaW5FcnIgfHwgbWluRXJyOwoKICByZXR1cm4gZW5zdXJlKGFuZ3VsYXIsICdtb2R1bGUnLCBmdW5jdGlvbigpIHsKICAgIC8qKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGFuZ3VsYXIuTW9kdWxlPn0gKi8KICAgIHZhciBtb2R1bGVzID0ge307CgogICAgLyoqCiAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAqIEBuYW1lIGFuZ3VsYXIubW9kdWxlCiAgICAgKiBAbW9kdWxlIG5nCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqCiAgICAgKiBUaGUgYGFuZ3VsYXIubW9kdWxlYCBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcsIHJlZ2lzdGVyaW5nIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXIKICAgICAqIG1vZHVsZXMuCiAgICAgKiBBbGwgbW9kdWxlcyAoYW5ndWxhciBjb3JlIG9yIDNyZCBwYXJ0eSkgdGhhdCBzaG91bGQgYmUgYXZhaWxhYmxlIHRvIGFuIGFwcGxpY2F0aW9uIG11c3QgYmUKICAgICAqIHJlZ2lzdGVyZWQgdXNpbmcgdGhpcyBtZWNoYW5pc20uCiAgICAgKgogICAgICogV2hlbiBwYXNzZWQgdHdvIG9yIG1vcmUgYXJndW1lbnRzLCBhIG5ldyBtb2R1bGUgaXMgY3JlYXRlZC4gIElmIHBhc3NlZCBvbmx5IG9uZSBhcmd1bWVudCwgYW4KICAgICAqIGV4aXN0aW5nIG1vZHVsZSAodGhlIG5hbWUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBgbW9kdWxlYCkgaXMgcmV0cmlldmVkLgogICAgICoKICAgICAqCiAgICAgKiAjIE1vZHVsZQogICAgICoKICAgICAqIEEgbW9kdWxlIGlzIGEgY29sbGVjdGlvbiBvZiBzZXJ2aWNlcywgZGlyZWN0aXZlcywgY29udHJvbGxlcnMsIGZpbHRlcnMsIGFuZCBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLgogICAgICogYGFuZ3VsYXIubW9kdWxlYCBpcyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uCiAgICAgKgogICAgICogYGBganMKICAgICAqIC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUKICAgICAqIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdteU1vZHVsZScsIFtdKTsKICAgICAqCiAgICAgKiAvLyByZWdpc3RlciBhIG5ldyBzZXJ2aWNlCiAgICAgKiBteU1vZHVsZS52YWx1ZSgnYXBwTmFtZScsICdNeUNvb2xBcHAnKTsKICAgICAqCiAgICAgKiAvLyBjb25maWd1cmUgZXhpc3Rpbmcgc2VydmljZXMgaW5zaWRlIGluaXRpYWxpemF0aW9uIGJsb2Nrcy4KICAgICAqIG15TW9kdWxlLmNvbmZpZyhbJyRsb2NhdGlvblByb3ZpZGVyJywgZnVuY3Rpb24oJGxvY2F0aW9uUHJvdmlkZXIpIHsKICAgICAqICAgLy8gQ29uZmlndXJlIGV4aXN0aW5nIHByb3ZpZGVycwogICAgICogICAkbG9jYXRpb25Qcm92aWRlci5oYXNoUHJlZml4KCchJyk7CiAgICAgKiB9XSk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiBUaGVuIHlvdSBjYW4gY3JlYXRlIGFuIGluamVjdG9yIGFuZCBsb2FkIHlvdXIgbW9kdWxlcyBsaWtlIHRoaXM6CiAgICAgKgogICAgICogYGBganMKICAgICAqIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZycsICdteU1vZHVsZSddKQogICAgICogYGBgCiAgICAgKgogICAgICogSG93ZXZlciBpdCdzIG1vcmUgbGlrZWx5IHRoYXQgeW91J2xsIGp1c3QgdXNlCiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfSBvcgogICAgICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfSB0byBzaW1wbGlmeSB0aGlzIHByb2Nlc3MgZm9yIHlvdS4KICAgICAqCiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byBjcmVhdGUgb3IgcmV0cmlldmUuCiAgICAgKiBAcGFyYW0geyFBcnJheS48c3RyaW5nPj19IHJlcXVpcmVzIElmIHNwZWNpZmllZCB0aGVuIG5ldyBtb2R1bGUgaXMgYmVpbmcgY3JlYXRlZC4gSWYKICAgICAqICAgICAgICB1bnNwZWNpZmllZCB0aGVuIHRoZSBtb2R1bGUgaXMgYmVpbmcgcmV0cmlldmVkIGZvciBmdXJ0aGVyIGNvbmZpZ3VyYXRpb24uCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gY29uZmlnRm4gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmdW5jdGlvbiBmb3IgdGhlIG1vZHVsZS4gU2FtZSBhcwogICAgICogICAgICAgIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWcgTW9kdWxlI2NvbmZpZygpfS4KICAgICAqIEByZXR1cm5zIHttb2R1bGV9IG5ldyBtb2R1bGUgd2l0aCB0aGUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfSBhcGkuCiAgICAgKi8KICAgIHJldHVybiBmdW5jdGlvbiBtb2R1bGUobmFtZSwgcmVxdWlyZXMsIGNvbmZpZ0ZuKSB7CiAgICAgIHZhciBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUsIGNvbnRleHQpIHsKICAgICAgICBpZiAobmFtZSA9PT0gJ2hhc093blByb3BlcnR5JykgewogICAgICAgICAgdGhyb3cgbmdNaW5FcnIoJ2JhZG5hbWUnLCAnaGFzT3duUHJvcGVydHkgaXMgbm90IGEgdmFsaWQgezB9IG5hbWUnLCBjb250ZXh0KTsKICAgICAgICB9CiAgICAgIH07CgogICAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnbW9kdWxlJyk7CiAgICAgIGlmIChyZXF1aXJlcyAmJiBtb2R1bGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgbW9kdWxlc1tuYW1lXSA9IG51bGw7CiAgICAgIH0KICAgICAgcmV0dXJuIGVuc3VyZShtb2R1bGVzLCBuYW1lLCBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoIXJlcXVpcmVzKSB7CiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ25vbW9kJywgIk1vZHVsZSAnezB9JyBpcyBub3QgYXZhaWxhYmxlISBZb3UgZWl0aGVyIG1pc3NwZWxsZWQgIiArCiAgICAgICAgICAgICAidGhlIG1vZHVsZSBuYW1lIG9yIGZvcmdvdCB0byBsb2FkIGl0LiBJZiByZWdpc3RlcmluZyBhIG1vZHVsZSBlbnN1cmUgdGhhdCB5b3UgIiArCiAgICAgICAgICAgICAic3BlY2lmeSB0aGUgZGVwZW5kZW5jaWVzIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuIiwgbmFtZSk7CiAgICAgICAgfQoKICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48QXJyYXkuPCo+Pn0gKi8KICAgICAgICB2YXIgaW52b2tlUXVldWUgPSBbXTsKCiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi8KICAgICAgICB2YXIgY29uZmlnQmxvY2tzID0gW107CgogICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxGdW5jdGlvbj59ICovCiAgICAgICAgdmFyIHJ1bkJsb2NrcyA9IFtdOwoKICAgICAgICB2YXIgY29uZmlnID0gaW52b2tlTGF0ZXIoJyRpbmplY3RvcicsICdpbnZva2UnLCAncHVzaCcsIGNvbmZpZ0Jsb2Nrcyk7CgogICAgICAgIC8qKiBAdHlwZSB7YW5ndWxhci5Nb2R1bGV9ICovCiAgICAgICAgdmFyIG1vZHVsZUluc3RhbmNlID0gewogICAgICAgICAgLy8gUHJpdmF0ZSBzdGF0ZQogICAgICAgICAgX2ludm9rZVF1ZXVlOiBpbnZva2VRdWV1ZSwKICAgICAgICAgIF9jb25maWdCbG9ja3M6IGNvbmZpZ0Jsb2NrcywKICAgICAgICAgIF9ydW5CbG9ja3M6IHJ1bkJsb2NrcywKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcmVxdWlyZXMKICAgICAgICAgICAqIEBtb2R1bGUgbmcKICAgICAgICAgICAqCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIEhvbGRzIHRoZSBsaXN0IG9mIG1vZHVsZXMgd2hpY2ggdGhlIGluamVjdG9yIHdpbGwgbG9hZCBiZWZvcmUgdGhlIGN1cnJlbnQgbW9kdWxlIGlzCiAgICAgICAgICAgKiBsb2FkZWQuCiAgICAgICAgICAgKi8KICAgICAgICAgIHJlcXVpcmVzOiByZXF1aXJlcywKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjbmFtZQogICAgICAgICAgICogQG1vZHVsZSBuZwogICAgICAgICAgICoKICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogTmFtZSBvZiB0aGUgbW9kdWxlLgogICAgICAgICAgICovCiAgICAgICAgICBuYW1lOiBuYW1lLAoKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3Byb3ZpZGVyCiAgICAgICAgICAgKiBAbW9kdWxlIG5nCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyVHlwZSBDb25zdHJ1Y3Rpb24gZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGUKICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uCiAgICAgICAgICAgKi8KICAgICAgICAgIHByb3ZpZGVyOiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAncHJvdmlkZXInKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZhY3RvcnkKICAgICAgICAgICAqIEBtb2R1bGUgbmcKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZQogICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJGdW5jdGlvbiBGdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KCl9LgogICAgICAgICAgICovCiAgICAgICAgICBmYWN0b3J5OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnZmFjdG9yeScpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjc2VydmljZQogICAgICAgICAgICogQG1vZHVsZSBuZwogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBBIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnN0YW50aWF0ZWQuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoKX0uCiAgICAgICAgICAgKi8KICAgICAgICAgIHNlcnZpY2U6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdzZXJ2aWNlJyksCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSN2YWx1ZQogICAgICAgICAgICogQG1vZHVsZSBuZwogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lCiAgICAgICAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBTZXJ2aWNlIGluc3RhbmNlIG9iamVjdC4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlICRwcm92aWRlLnZhbHVlKCl9LgogICAgICAgICAgICovCiAgICAgICAgICB2YWx1ZTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3ZhbHVlJyksCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb25zdGFudAogICAgICAgICAgICogQG1vZHVsZSBuZwogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgY29uc3RhbnQgbmFtZQogICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgQ29uc3RhbnQgdmFsdWUuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIEJlY2F1c2UgdGhlIGNvbnN0YW50IGFyZSBmaXhlZCwgdGhleSBnZXQgYXBwbGllZCBiZWZvcmUgb3RoZXIgcHJvdmlkZSBtZXRob2RzLgogICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50ICRwcm92aWRlLmNvbnN0YW50KCl9LgogICAgICAgICAgICovCiAgICAgICAgICBjb25zdGFudDogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ2NvbnN0YW50JywgJ3Vuc2hpZnQnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2FuaW1hdGlvbgogICAgICAgICAgICogQG1vZHVsZSBuZwogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgYW5pbWF0aW9uIG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFuaW1hdGlvbkZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGFuCiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICoKICAgICAgICAgICAqICoqTk9URSoqOiBhbmltYXRpb25zIHRha2UgZWZmZWN0IG9ubHkgaWYgdGhlICoqbmdBbmltYXRlKiogbW9kdWxlIGlzIGxvYWRlZC4KICAgICAgICAgICAqCiAgICAgICAgICAgKgogICAgICAgICAgICogRGVmaW5lcyBhbiBhbmltYXRpb24gaG9vayB0aGF0IGNhbiBiZSBsYXRlciB1c2VkIHdpdGgKICAgICAgICAgICAqIHtAbGluayBuZ0FuaW1hdGUuJGFuaW1hdGUgJGFuaW1hdGV9IHNlcnZpY2UgYW5kIGRpcmVjdGl2ZXMgdGhhdCB1c2UgdGhpcyBzZXJ2aWNlLgogICAgICAgICAgICoKICAgICAgICAgICAqIGBgYGpzCiAgICAgICAgICAgKiBtb2R1bGUuYW5pbWF0aW9uKCcuYW5pbWF0aW9uLW5hbWUnLCBmdW5jdGlvbigkaW5qZWN0MSwgJGluamVjdDIpIHsKICAgICAgICAgICAqICAgcmV0dXJuIHsKICAgICAgICAgICAqICAgICBldmVudE5hbWUgOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7CiAgICAgICAgICAgKiAgICAgICAvL2NvZGUgdG8gcnVuIHRoZSBhbmltYXRpb24KICAgICAgICAgICAqICAgICAgIC8vb25jZSBjb21wbGV0ZSwgdGhlbiBydW4gZG9uZSgpCiAgICAgICAgICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gY2FuY2VsbGF0aW9uRnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgICAgICogICAgICAgICAvL2NvZGUgdG8gY2FuY2VsIHRoZSBhbmltYXRpb24KICAgICAgICAgICAqICAgICAgIH0KICAgICAgICAgICAqICAgICB9CiAgICAgICAgICAgKiAgIH0KICAgICAgICAgICAqIH0pCiAgICAgICAgICAgKiBgYGAKICAgICAgICAgICAqCiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZVByb3ZpZGVyI3JlZ2lzdGVyICRhbmltYXRlUHJvdmlkZXIucmVnaXN0ZXIoKX0gYW5kCiAgICAgICAgICAgKiB7QGxpbmsgbmdBbmltYXRlIG5nQW5pbWF0ZSBtb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLgogICAgICAgICAgICovCiAgICAgICAgICBhbmltYXRpb246IGludm9rZUxhdGVyKCckYW5pbWF0ZVByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmaWx0ZXIKICAgICAgICAgICAqIEBtb2R1bGUgbmcKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEZpbHRlciBuYW1lLgogICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgZmlsdGVyLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRmaWx0ZXJQcm92aWRlciNyZWdpc3RlciAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uCiAgICAgICAgICAgKi8KICAgICAgICAgIGZpbHRlcjogaW52b2tlTGF0ZXIoJyRmaWx0ZXJQcm92aWRlcicsICdyZWdpc3RlcicpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29udHJvbGxlcgogICAgICAgICAgICogQG1vZHVsZSBuZwogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIENvbnRyb2xsZXIgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBjb250cm9sbGVycyB3aGVyZSB0aGUKICAgICAgICAgICAqICAgIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbnN0cnVjdG9ycy4KICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciAkY29udHJvbGxlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LgogICAgICAgICAgICovCiAgICAgICAgICBjb250cm9sbGVyOiBpbnZva2VMYXRlcignJGNvbnRyb2xsZXJQcm92aWRlcicsICdyZWdpc3RlcicpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZGlyZWN0aXZlCiAgICAgICAgICAgKiBAbW9kdWxlIG5nCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgRGlyZWN0aXZlIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgZGlyZWN0aXZlcyB3aGVyZSB0aGUKICAgICAgICAgICAqICAgIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZhY3Rvcmllcy4KICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRpcmVjdGl2ZUZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mCiAgICAgICAgICAgKiBkaXJlY3RpdmVzLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCl9LgogICAgICAgICAgICovCiAgICAgICAgICBkaXJlY3RpdmU6IGludm9rZUxhdGVyKCckY29tcGlsZVByb3ZpZGVyJywgJ2RpcmVjdGl2ZScpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uZmlnCiAgICAgICAgICAgKiBAbW9kdWxlIG5nCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWdGbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gb24gbW9kdWxlIGxvYWQuIFVzZWZ1bCBmb3Igc2VydmljZQogICAgICAgICAgICogICAgY29uZmlndXJhdGlvbi4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggbmVlZHMgdG8gYmUgcGVyZm9ybWVkIG9uIG1vZHVsZSBsb2FkaW5nLgogICAgICAgICAgICogRm9yIG1vcmUgYWJvdXQgaG93IHRvIGNvbmZpZ3VyZSBzZXJ2aWNlcywgc2VlCiAgICAgICAgICAgKiB7QGxpbmsgcHJvdmlkZXJzI3Byb3ZpZGVyc19wcm92aWRlci1yZWNpcGUgUHJvdmlkZXIgUmVjaXBlfS4KICAgICAgICAgICAqLwogICAgICAgICAgY29uZmlnOiBjb25maWcsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNydW4KICAgICAgICAgICAqIEBtb2R1bGUgbmcKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGluaXRpYWxpemF0aW9uRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIGFmdGVyIGluamVjdG9yIGNyZWF0aW9uLgogICAgICAgICAgICogICAgVXNlZnVsIGZvciBhcHBsaWNhdGlvbiBpbml0aWFsaXphdGlvbi4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggc2hvdWxkIGJlIHBlcmZvcm1lZCB3aGVuIHRoZSBpbmplY3RvciBpcyBkb25lCiAgICAgICAgICAgKiBsb2FkaW5nIGFsbCBtb2R1bGVzLgogICAgICAgICAgICovCiAgICAgICAgICBydW46IGZ1bmN0aW9uKGJsb2NrKSB7CiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKGJsb2NrKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgaWYgKGNvbmZpZ0ZuKSB7CiAgICAgICAgICBjb25maWcoY29uZmlnRm4pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICBtb2R1bGVJbnN0YW5jZTsKCiAgICAgICAgLyoqCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZAogICAgICAgICAqIEBwYXJhbSB7U3RyaW5nPX0gaW5zZXJ0TWV0aG9kCiAgICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyKHByb3ZpZGVyLCBtZXRob2QsIGluc2VydE1ldGhvZCwgcXVldWUpIHsKICAgICAgICAgIGlmICghcXVldWUpIHF1ZXVlID0gaW52b2tlUXVldWU7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHF1ZXVlW2luc2VydE1ldGhvZCB8fCAncHVzaCddKFtwcm92aWRlciwgbWV0aG9kLCBhcmd1bWVudHNdKTsKICAgICAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlOwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKICB9KTsKCn0KCi8qIGdsb2JhbCBhbmd1bGFyTW9kdWxlOiB0cnVlLAogIHZlcnNpb246IHRydWUsCgogICRMb2NhbGVQcm92aWRlciwKICAkQ29tcGlsZVByb3ZpZGVyLAoKICBodG1sQW5jaG9yRGlyZWN0aXZlLAogIGlucHV0RGlyZWN0aXZlLAogIGlucHV0RGlyZWN0aXZlLAogIGZvcm1EaXJlY3RpdmUsCiAgc2NyaXB0RGlyZWN0aXZlLAogIHNlbGVjdERpcmVjdGl2ZSwKICBzdHlsZURpcmVjdGl2ZSwKICBvcHRpb25EaXJlY3RpdmUsCiAgbmdCaW5kRGlyZWN0aXZlLAogIG5nQmluZEh0bWxEaXJlY3RpdmUsCiAgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsCiAgbmdDbGFzc0RpcmVjdGl2ZSwKICBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSwKICBuZ0NsYXNzT2RkRGlyZWN0aXZlLAogIG5nQ3NwRGlyZWN0aXZlLAogIG5nQ2xvYWtEaXJlY3RpdmUsCiAgbmdDb250cm9sbGVyRGlyZWN0aXZlLAogIG5nRm9ybURpcmVjdGl2ZSwKICBuZ0hpZGVEaXJlY3RpdmUsCiAgbmdJZkRpcmVjdGl2ZSwKICBuZ0luY2x1ZGVEaXJlY3RpdmUsCiAgbmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUsCiAgbmdJbml0RGlyZWN0aXZlLAogIG5nTm9uQmluZGFibGVEaXJlY3RpdmUsCiAgbmdQbHVyYWxpemVEaXJlY3RpdmUsCiAgbmdSZXBlYXREaXJlY3RpdmUsCiAgbmdTaG93RGlyZWN0aXZlLAogIG5nU3R5bGVEaXJlY3RpdmUsCiAgbmdTd2l0Y2hEaXJlY3RpdmUsCiAgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLAogIG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSwKICBuZ09wdGlvbnNEaXJlY3RpdmUsCiAgbmdUcmFuc2NsdWRlRGlyZWN0aXZlLAogIG5nTW9kZWxEaXJlY3RpdmUsCiAgbmdMaXN0RGlyZWN0aXZlLAogIG5nQ2hhbmdlRGlyZWN0aXZlLAogIHBhdHRlcm5EaXJlY3RpdmUsCiAgcGF0dGVybkRpcmVjdGl2ZSwKICByZXF1aXJlZERpcmVjdGl2ZSwKICByZXF1aXJlZERpcmVjdGl2ZSwKICBtaW5sZW5ndGhEaXJlY3RpdmUsCiAgbWlubGVuZ3RoRGlyZWN0aXZlLAogIG1heGxlbmd0aERpcmVjdGl2ZSwKICBtYXhsZW5ndGhEaXJlY3RpdmUsCiAgbmdWYWx1ZURpcmVjdGl2ZSwKICBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSwKICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcywKICBuZ0V2ZW50RGlyZWN0aXZlcywKCiAgJEFuY2hvclNjcm9sbFByb3ZpZGVyLAogICRBbmltYXRlUHJvdmlkZXIsCiAgJEJyb3dzZXJQcm92aWRlciwKICAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIsCiAgJENvbnRyb2xsZXJQcm92aWRlciwKICAkRG9jdW1lbnRQcm92aWRlciwKICAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLAogICRGaWx0ZXJQcm92aWRlciwKICAkSW50ZXJwb2xhdGVQcm92aWRlciwKICAkSW50ZXJ2YWxQcm92aWRlciwKICAkSHR0cFByb3ZpZGVyLAogICRIdHRwQmFja2VuZFByb3ZpZGVyLAogICRMb2NhdGlvblByb3ZpZGVyLAogICRMb2dQcm92aWRlciwKICAkUGFyc2VQcm92aWRlciwKICAkUm9vdFNjb3BlUHJvdmlkZXIsCiAgJFFQcm92aWRlciwKICAkJFFQcm92aWRlciwKICAkJFNhbml0aXplVXJpUHJvdmlkZXIsCiAgJFNjZVByb3ZpZGVyLAogICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLAogICRTbmlmZmVyUHJvdmlkZXIsCiAgJFRlbXBsYXRlQ2FjaGVQcm92aWRlciwKICAkVGltZW91dFByb3ZpZGVyLAogICQkUkFGUHJvdmlkZXIsCiAgJCRBc3luY0NhbGxiYWNrUHJvdmlkZXIsCiAgJFdpbmRvd1Byb3ZpZGVyCiovCgoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgYW5ndWxhci52ZXJzaW9uCiAqIEBtb2R1bGUgbmcKICogQGRlc2NyaXB0aW9uCiAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IEFuZ3VsYXJKUyB2ZXJzaW9uLiBUaGlzIG9iamVjdCBoYXMgdGhlCiAqIGZvbGxvd2luZyBwcm9wZXJ0aWVzOgogKgogKiAtIGBmdWxsYCDigJMgYHtzdHJpbmd9YCDigJMgRnVsbCB2ZXJzaW9uIHN0cmluZywgc3VjaCBhcyAiMC45LjE4Ii4KICogLSBgbWFqb3JgIOKAkyBge251bWJlcn1gIOKAkyBNYWpvciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyAiMCIuCiAqIC0gYG1pbm9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWlub3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgIjkiLgogKiAtIGBkb3RgIOKAkyBge251bWJlcn1gIOKAkyBEb3QgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgIjE4Ii4KICogLSBgY29kZU5hbWVgIOKAkyBge3N0cmluZ31gIOKAkyBDb2RlIG5hbWUgb2YgdGhlIHJlbGVhc2UsIHN1Y2ggYXMgImppZ2dsaW5nLWFybWZhdCIuCiAqLwp2YXIgdmVyc2lvbiA9IHsKICBmdWxsOiAnMS4zLjAtYmV0YS4xOScsICAgIC8vIGFsbCBvZiB0aGVzZSBwbGFjZWhvbGRlciBzdHJpbmdzIHdpbGwgYmUgcmVwbGFjZWQgYnkgZ3J1bnQncwogIG1ham9yOiAxLCAgICAvLyBwYWNrYWdlIHRhc2sKICBtaW5vcjogMywKICBkb3Q6IDAsCiAgY29kZU5hbWU6ICdyYWZ0ZXItYXNjZW5zaW9uJwp9OwoKCmZ1bmN0aW9uIHB1Ymxpc2hFeHRlcm5hbEFQSShhbmd1bGFyKXsKICBleHRlbmQoYW5ndWxhciwgewogICAgJ2Jvb3RzdHJhcCc6IGJvb3RzdHJhcCwKICAgICdjb3B5JzogY29weSwKICAgICdleHRlbmQnOiBleHRlbmQsCiAgICAnZXF1YWxzJzogZXF1YWxzLAogICAgJ2VsZW1lbnQnOiBqcUxpdGUsCiAgICAnZm9yRWFjaCc6IGZvckVhY2gsCiAgICAnaW5qZWN0b3InOiBjcmVhdGVJbmplY3RvciwKICAgICdub29wJzogbm9vcCwKICAgICdiaW5kJzogYmluZCwKICAgICd0b0pzb24nOiB0b0pzb24sCiAgICAnZnJvbUpzb24nOiBmcm9tSnNvbiwKICAgICdpZGVudGl0eSc6IGlkZW50aXR5LAogICAgJ2lzVW5kZWZpbmVkJzogaXNVbmRlZmluZWQsCiAgICAnaXNEZWZpbmVkJzogaXNEZWZpbmVkLAogICAgJ2lzU3RyaW5nJzogaXNTdHJpbmcsCiAgICAnaXNGdW5jdGlvbic6IGlzRnVuY3Rpb24sCiAgICAnaXNPYmplY3QnOiBpc09iamVjdCwKICAgICdpc051bWJlcic6IGlzTnVtYmVyLAogICAgJ2lzRWxlbWVudCc6IGlzRWxlbWVudCwKICAgICdpc0FycmF5JzogaXNBcnJheSwKICAgICd2ZXJzaW9uJzogdmVyc2lvbiwKICAgICdpc0RhdGUnOiBpc0RhdGUsCiAgICAnbG93ZXJjYXNlJzogbG93ZXJjYXNlLAogICAgJ3VwcGVyY2FzZSc6IHVwcGVyY2FzZSwKICAgICdjYWxsYmFja3MnOiB7Y291bnRlcjogMH0sCiAgICAnJCRtaW5FcnInOiBtaW5FcnIsCiAgICAnJCRjc3AnOiBjc3AKICB9KTsKCiAgYW5ndWxhck1vZHVsZSA9IHNldHVwTW9kdWxlTG9hZGVyKHdpbmRvdyk7CiAgdHJ5IHsKICAgIGFuZ3VsYXJNb2R1bGUoJ25nTG9jYWxlJyk7CiAgfSBjYXRjaCAoZSkgewogICAgYW5ndWxhck1vZHVsZSgnbmdMb2NhbGUnLCBbXSkucHJvdmlkZXIoJyRsb2NhbGUnLCAkTG9jYWxlUHJvdmlkZXIpOwogIH0KCiAgYW5ndWxhck1vZHVsZSgnbmcnLCBbJ25nTG9jYWxlJ10sIFsnJHByb3ZpZGUnLAogICAgZnVuY3Rpb24gbmdNb2R1bGUoJHByb3ZpZGUpIHsKICAgICAgLy8gJCRzYW5pdGl6ZVVyaVByb3ZpZGVyIG5lZWRzIHRvIGJlIGJlZm9yZSAkY29tcGlsZVByb3ZpZGVyIGFzIGl0IGlzIHVzZWQgYnkgaXQuCiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHsKICAgICAgICAkJHNhbml0aXplVXJpOiAkJFNhbml0aXplVXJpUHJvdmlkZXIKICAgICAgfSk7CiAgICAgICRwcm92aWRlLnByb3ZpZGVyKCckY29tcGlsZScsICRDb21waWxlUHJvdmlkZXIpLgogICAgICAgIGRpcmVjdGl2ZSh7CiAgICAgICAgICAgIGE6IGh0bWxBbmNob3JEaXJlY3RpdmUsCiAgICAgICAgICAgIGlucHV0OiBpbnB1dERpcmVjdGl2ZSwKICAgICAgICAgICAgdGV4dGFyZWE6IGlucHV0RGlyZWN0aXZlLAogICAgICAgICAgICBmb3JtOiBmb3JtRGlyZWN0aXZlLAogICAgICAgICAgICBzY3JpcHQ6IHNjcmlwdERpcmVjdGl2ZSwKICAgICAgICAgICAgc2VsZWN0OiBzZWxlY3REaXJlY3RpdmUsCiAgICAgICAgICAgIHN0eWxlOiBzdHlsZURpcmVjdGl2ZSwKICAgICAgICAgICAgb3B0aW9uOiBvcHRpb25EaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQmluZDogbmdCaW5kRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0JpbmRIdG1sOiBuZ0JpbmRIdG1sRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0JpbmRUZW1wbGF0ZTogbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ2xhc3M6IG5nQ2xhc3NEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ2xhc3NFdmVuOiBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSwKICAgICAgICAgICAgbmdDbGFzc09kZDogbmdDbGFzc09kZERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdDbG9hazogbmdDbG9ha0RpcmVjdGl2ZSwKICAgICAgICAgICAgbmdDb250cm9sbGVyOiBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nRm9ybTogbmdGb3JtRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0hpZGU6IG5nSGlkZURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdJZjogbmdJZkRpcmVjdGl2ZSwKICAgICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nSW5pdDogbmdJbml0RGlyZWN0aXZlLAogICAgICAgICAgICBuZ05vbkJpbmRhYmxlOiBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1BsdXJhbGl6ZTogbmdQbHVyYWxpemVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nUmVwZWF0OiBuZ1JlcGVhdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdTaG93OiBuZ1Nob3dEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nU3R5bGU6IG5nU3R5bGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nU3dpdGNoOiBuZ1N3aXRjaERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdTd2l0Y2hXaGVuOiBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUsCiAgICAgICAgICAgIG5nU3dpdGNoRGVmYXVsdDogbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlLAogICAgICAgICAgICBuZ09wdGlvbnM6IG5nT3B0aW9uc0RpcmVjdGl2ZSwKICAgICAgICAgICAgbmdUcmFuc2NsdWRlOiBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nTW9kZWw6IG5nTW9kZWxEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nTGlzdDogbmdMaXN0RGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NoYW5nZTogbmdDaGFuZ2VEaXJlY3RpdmUsCiAgICAgICAgICAgIHBhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsCiAgICAgICAgICAgIG5nUGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSwKICAgICAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1JlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSwKICAgICAgICAgICAgbWlubGVuZ3RoOiBtaW5sZW5ndGhEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nTWlubGVuZ3RoOiBtaW5sZW5ndGhEaXJlY3RpdmUsCiAgICAgICAgICAgIG1heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLAogICAgICAgICAgICBuZ01heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1ZhbHVlOiBuZ1ZhbHVlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ01vZGVsT3B0aW9uczogbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUKICAgICAgICB9KS4KICAgICAgICBkaXJlY3RpdmUoewogICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZQogICAgICAgIH0pLgogICAgICAgIGRpcmVjdGl2ZShuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcykuCiAgICAgICAgZGlyZWN0aXZlKG5nRXZlbnREaXJlY3RpdmVzKTsKICAgICAgJHByb3ZpZGUucHJvdmlkZXIoewogICAgICAgICRhbmNob3JTY3JvbGw6ICRBbmNob3JTY3JvbGxQcm92aWRlciwKICAgICAgICAkYW5pbWF0ZTogJEFuaW1hdGVQcm92aWRlciwKICAgICAgICAkYnJvd3NlcjogJEJyb3dzZXJQcm92aWRlciwKICAgICAgICAkY2FjaGVGYWN0b3J5OiAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIsCiAgICAgICAgJGNvbnRyb2xsZXI6ICRDb250cm9sbGVyUHJvdmlkZXIsCiAgICAgICAgJGRvY3VtZW50OiAkRG9jdW1lbnRQcm92aWRlciwKICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcjogJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlciwKICAgICAgICAkZmlsdGVyOiAkRmlsdGVyUHJvdmlkZXIsCiAgICAgICAgJGludGVycG9sYXRlOiAkSW50ZXJwb2xhdGVQcm92aWRlciwKICAgICAgICAkaW50ZXJ2YWw6ICRJbnRlcnZhbFByb3ZpZGVyLAogICAgICAgICRodHRwOiAkSHR0cFByb3ZpZGVyLAogICAgICAgICRodHRwQmFja2VuZDogJEh0dHBCYWNrZW5kUHJvdmlkZXIsCiAgICAgICAgJGxvY2F0aW9uOiAkTG9jYXRpb25Qcm92aWRlciwKICAgICAgICAkbG9nOiAkTG9nUHJvdmlkZXIsCiAgICAgICAgJHBhcnNlOiAkUGFyc2VQcm92aWRlciwKICAgICAgICAkcm9vdFNjb3BlOiAkUm9vdFNjb3BlUHJvdmlkZXIsCiAgICAgICAgJHE6ICRRUHJvdmlkZXIsCiAgICAgICAgJCRxOiAkJFFQcm92aWRlciwKICAgICAgICAkc2NlOiAkU2NlUHJvdmlkZXIsCiAgICAgICAgJHNjZURlbGVnYXRlOiAkU2NlRGVsZWdhdGVQcm92aWRlciwKICAgICAgICAkc25pZmZlcjogJFNuaWZmZXJQcm92aWRlciwKICAgICAgICAkdGVtcGxhdGVDYWNoZTogJFRlbXBsYXRlQ2FjaGVQcm92aWRlciwKICAgICAgICAkdGltZW91dDogJFRpbWVvdXRQcm92aWRlciwKICAgICAgICAkd2luZG93OiAkV2luZG93UHJvdmlkZXIsCiAgICAgICAgJCRyQUY6ICQkUkFGUHJvdmlkZXIsCiAgICAgICAgJCRhc3luY0NhbGxiYWNrIDogJCRBc3luY0NhbGxiYWNrUHJvdmlkZXIKICAgICAgfSk7CiAgICB9CiAgXSk7Cn0KCi8qIGdsb2JhbCBKUUxpdGVQcm90b3R5cGU6IHRydWUsCiAgYWRkRXZlbnRMaXN0ZW5lckZuOiB0cnVlLAogIHJlbW92ZUV2ZW50TGlzdGVuZXJGbjogdHJ1ZSwKICBCT09MRUFOX0FUVFI6IHRydWUsCiAgQUxJQVNFRF9BVFRSOiB0cnVlLAoqLwoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovL0pRTGl0ZQovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuZWxlbWVudAogKiBAbW9kdWxlIG5nCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBXcmFwcyBhIHJhdyBET00gZWxlbWVudCBvciBIVE1MIHN0cmluZyBhcyBhIFtqUXVlcnldKGh0dHA6Ly9qcXVlcnkuY29tKSBlbGVtZW50LgogKgogKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YCBpcyBhbiBhbGlhcyBmb3IgdGhlCiAqIFtqUXVlcnldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkvKSBmdW5jdGlvbi4gSWYgalF1ZXJ5IGlzIG5vdCBhdmFpbGFibGUsIGBhbmd1bGFyLmVsZW1lbnRgCiAqIGRlbGVnYXRlcyB0byBBbmd1bGFyJ3MgYnVpbHQtaW4gc3Vic2V0IG9mIGpRdWVyeSwgY2FsbGVkICJqUXVlcnkgbGl0ZSIgb3IgImpxTGl0ZS4iCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MiPmpxTGl0ZSBpcyBhIHRpbnksIEFQSS1jb21wYXRpYmxlIHN1YnNldCBvZiBqUXVlcnkgdGhhdCBhbGxvd3MKICogQW5ndWxhciB0byBtYW5pcHVsYXRlIHRoZSBET00gaW4gYSBjcm9zcy1icm93c2VyIGNvbXBhdGlibGUgd2F5LiAqKmpxTGl0ZSoqIGltcGxlbWVudHMgb25seSB0aGUgbW9zdAogKiBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eSB3aXRoIHRoZSBnb2FsIG9mIGhhdmluZyBhIHZlcnkgc21hbGwgZm9vdHByaW50LjwvZGl2PgogKgogKiBUbyB1c2UgalF1ZXJ5LCBzaW1wbHkgbG9hZCBpdCBiZWZvcmUgYERPTUNvbnRlbnRMb2FkZWRgIGV2ZW50IGZpcmVkLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCI+KipOb3RlOioqIGFsbCBlbGVtZW50IHJlZmVyZW5jZXMgaW4gQW5ndWxhciBhcmUgYWx3YXlzIHdyYXBwZWQgd2l0aCBqUXVlcnkgb3IKICoganFMaXRlOyB0aGV5IGFyZSBuZXZlciByYXcgRE9NIHJlZmVyZW5jZXMuPC9kaXY+CiAqCiAqICMjIEFuZ3VsYXIncyBqcUxpdGUKICoganFMaXRlIHByb3ZpZGVzIG9ubHkgdGhlIGZvbGxvd2luZyBqUXVlcnkgbWV0aG9kczoKICoKICogLSBbYGFkZENsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWRkQ2xhc3MvKQogKiAtIFtgYWZ0ZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hZnRlci8pCiAqIC0gW2BhcHBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hcHBlbmQvKQogKiAtIFtgYXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2F0dHIvKQogKiAtIFtgYmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2JpbmQvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50RGF0YQogKiAtIFtgY2hpbGRyZW4oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jaGlsZHJlbi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnMKICogLSBbYGNsb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2xvbmUvKQogKiAtIFtgY29udGVudHMoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jb250ZW50cy8pCiAqIC0gW2Bjc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jc3MvKQogKiAtIFtgZGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RhdGEvKQogKiAtIFtgZGV0YWNoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZGV0YWNoLykKICogLSBbYGVtcHR5KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZW1wdHkvKQogKiAtIFtgZXEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lcS8pCiAqIC0gW2BmaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZmluZC8pIC0gTGltaXRlZCB0byBsb29rdXBzIGJ5IHRhZyBuYW1lCiAqIC0gW2BoYXNDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2hhc0NsYXNzLykKICogLSBbYGh0bWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9odG1sLykKICogLSBbYG5leHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9uZXh0LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9ycwogKiAtIFtgb24oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnREYXRhCiAqIC0gW2BvZmYoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBzZWxlY3RvcnMKICogLSBbYG9uZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uZS8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzIG9yIHNlbGVjdG9ycwogKiAtIFtgcGFyZW50KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9ycwogKiAtIFtgcHJlcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ByZXBlbmQvKQogKiAtIFtgcHJvcCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3Byb3AvKQogKiAtIFtgcmVhZHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZWFkeS8pCiAqIC0gW2ByZW1vdmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmUvKQogKiAtIFtgcmVtb3ZlQXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUF0dHIvKQogKiAtIFtgcmVtb3ZlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVDbGFzcy8pCiAqIC0gW2ByZW1vdmVEYXRhKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlRGF0YS8pCiAqIC0gW2ByZXBsYWNlV2l0aCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlcGxhY2VXaXRoLykKICogLSBbYHRleHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90ZXh0LykKICogLSBbYHRvZ2dsZUNsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdG9nZ2xlQ2xhc3MvKQogKiAtIFtgdHJpZ2dlckhhbmRsZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90cmlnZ2VySGFuZGxlci8pIC0gUGFzc2VzIGEgZHVtbXkgZXZlbnQgb2JqZWN0IHRvIGhhbmRsZXJzLgogKiAtIFtgdW5iaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdW5iaW5kLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMKICogLSBbYHZhbCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ZhbC8pCiAqIC0gW2B3cmFwKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vd3JhcC8pCiAqCiAqICMjIGpRdWVyeS9qcUxpdGUgRXh0cmFzCiAqIEFuZ3VsYXIgYWxzbyBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGFkZGl0aW9uYWwgbWV0aG9kcyBhbmQgZXZlbnRzIHRvIGJvdGggalF1ZXJ5IGFuZCBqcUxpdGU6CiAqCiAqICMjIyBFdmVudHMKICogLSBgJGRlc3Ryb3lgIC0gQW5ndWxhckpTIGludGVyY2VwdHMgYWxsIGpxTGl0ZS9qUXVlcnkncyBET00gZGVzdHJ1Y3Rpb24gYXBpcyBhbmQgZmlyZXMgdGhpcyBldmVudAogKiAgICBvbiBhbGwgRE9NIG5vZGVzIGJlaW5nIHJlbW92ZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNsZWFuIHVwIGFueSAzcmQgcGFydHkgYmluZGluZ3MgdG8gdGhlIERPTQogKiAgICBlbGVtZW50IGJlZm9yZSBpdCBpcyByZW1vdmVkLgogKgogKiAjIyMgTWV0aG9kcwogKiAtIGBjb250cm9sbGVyKG5hbWUpYCAtIHJldHJpZXZlcyB0aGUgY29udHJvbGxlciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIEJ5IGRlZmF1bHQKICogICByZXRyaWV2ZXMgY29udHJvbGxlciBhc3NvY2lhdGVkIHdpdGggdGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZS4gSWYgYG5hbWVgIGlzIHByb3ZpZGVkIGFzCiAqICAgY2FtZWxDYXNlIGRpcmVjdGl2ZSBuYW1lLCB0aGVuIHRoZSBjb250cm9sbGVyIGZvciB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJldHJpZXZlZCAoZS5nLgogKiAgIGAnbmdNb2RlbCdgKS4KICogLSBgaW5qZWN0b3IoKWAgLSByZXRyaWV2ZXMgdGhlIGluamVjdG9yIG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgb3IgaXRzIHBhcmVudC4KICogLSBgc2NvcGUoKWAgLSByZXRyaWV2ZXMgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBvZiB0aGUgY3VycmVudAogKiAgIGVsZW1lbnQgb3IgaXRzIHBhcmVudC4KICogLSBgaXNvbGF0ZVNjb3BlKClgIC0gcmV0cmlldmVzIGFuIGlzb2xhdGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IGlmIG9uZSBpcyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGUKICogICBjdXJyZW50IGVsZW1lbnQuIFRoaXMgZ2V0dGVyIHNob3VsZCBiZSB1c2VkIG9ubHkgb24gZWxlbWVudHMgdGhhdCBjb250YWluIGEgZGlyZWN0aXZlIHdoaWNoIHN0YXJ0cyBhIG5ldyBpc29sYXRlCiAqICAgc2NvcGUuIENhbGxpbmcgYHNjb3BlKClgIG9uIHRoaXMgZWxlbWVudCBhbHdheXMgcmV0dXJucyB0aGUgb3JpZ2luYWwgbm9uLWlzb2xhdGUgc2NvcGUuCiAqIC0gYGluaGVyaXRlZERhdGEoKWAgLSBzYW1lIGFzIGBkYXRhKClgLCBidXQgd2Fsa3MgdXAgdGhlIERPTSB1bnRpbCBhIHZhbHVlIGlzIGZvdW5kIG9yIHRoZSB0b3AKICogICBwYXJlbnQgZWxlbWVudCBpcyByZWFjaGVkLgogKgogKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEhUTUwgc3RyaW5nIG9yIERPTUVsZW1lbnQgdG8gYmUgd3JhcHBlZCBpbnRvIGpRdWVyeS4KICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC4KICovCgpKUUxpdGUuZXhwYW5kbyA9ICduZzMzOSc7Cgp2YXIganFDYWNoZSA9IEpRTGl0ZS5jYWNoZSA9IHt9LAogICAganFJZCA9IDEsCiAgICBhZGRFdmVudExpc3RlbmVyRm4gPSBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikgewogICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTsKICAgIH0sCiAgICByZW1vdmVFdmVudExpc3RlbmVyRm4gPSBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikgewogICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTsKICAgIH07CgovKgogKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgInByaXZhdGUiIGZ1bmN0aW9uICEhIQogKi8KSlFMaXRlLl9kYXRhID0gZnVuY3Rpb24obm9kZSkgewogIC8valF1ZXJ5IGFsd2F5cyByZXR1cm5zIGFuIG9iamVjdCBvbiBjYWNoZSBtaXNzCiAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTsKfTsKCmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9CgoKdmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gLyhbXDpcLVxfXSsoLikpL2c7CnZhciBNT1pfSEFDS19SRUdFWFAgPSAvXm1veihbQS1aXSkvOwp2YXIgTU9VU0VfRVZFTlRfTUFQPSB7IG1vdXNlbGVhdmUgOiAibW91c2VvdXQiLCBtb3VzZWVudGVyIDogIm1vdXNlb3ZlciJ9Owp2YXIganFMaXRlTWluRXJyID0gbWluRXJyKCdqcUxpdGUnKTsKCi8qKgogKiBDb252ZXJ0cyBzbmFrZV9jYXNlIHRvIGNhbWVsQ2FzZS4KICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci4KICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemUKICovCmZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7CiAgcmV0dXJuIG5hbWUuCiAgICByZXBsYWNlKFNQRUNJQUxfQ0hBUlNfUkVHRVhQLCBmdW5jdGlvbihfLCBzZXBhcmF0b3IsIGxldHRlciwgb2Zmc2V0KSB7CiAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjsKICAgIH0pLgogICAgcmVwbGFjZShNT1pfSEFDS19SRUdFWFAsICdNb3okMScpOwp9Cgp2YXIgU0lOR0xFX1RBR19SRUdFWFAgPSAvXjwoXHcrKVxzKlwvPz4oPzo8XC9cMT58KSQvOwp2YXIgSFRNTF9SRUdFWFAgPSAvPHwmIz9cdys7LzsKdmFyIFRBR19OQU1FX1JFR0VYUCA9IC88KFtcdzpdKykvOwp2YXIgWEhUTUxfVEFHX1JFR0VYUCA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcdzpdKylbXj5dKilcLz4vZ2k7Cgp2YXIgd3JhcE1hcCA9IHsKICAnb3B0aW9uJzogWzEsICc8c2VsZWN0IG11bHRpcGxlPSJtdWx0aXBsZSI+JywgJzwvc2VsZWN0PiddLAoKICAndGhlYWQnOiBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXSwKICAnY29sJzogWzIsICc8dGFibGU+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sCiAgJ3RyJzogWzIsICc8dGFibGU+PHRib2R5PicsICc8L3Rib2R5PjwvdGFibGU+J10sCiAgJ3RkJzogWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J10sCiAgJ19kZWZhdWx0JzogWzAsICIiLCAiIl0KfTsKCndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjsKd3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDsKd3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7CgoKZnVuY3Rpb24ganFMaXRlSXNUZXh0Tm9kZShodG1sKSB7CiAgcmV0dXJuICFIVE1MX1JFR0VYUC50ZXN0KGh0bWwpOwp9CgpmdW5jdGlvbiBqcUxpdGVBY2NlcHRzRGF0YShub2RlKSB7CiAgLy8gVGhlIHdpbmRvdyBvYmplY3QgY2FuIGFjY2VwdCBkYXRhIGJ1dCBoYXMgbm8gbm9kZVR5cGUKICAvLyBPdGhlcndpc2Ugd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBlbGVtZW50cyAoMSkgYW5kIGRvY3VtZW50cyAoOSkKICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlOwogIHJldHVybiBub2RlVHlwZSA9PT0gMSB8fCAhbm9kZVR5cGUgfHwgbm9kZVR5cGUgPT09IDk7Cn0KCmZ1bmN0aW9uIGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkgewogIHZhciB0bXAsIHRhZywgd3JhcCwKICAgICAgZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwKICAgICAgbm9kZXMgPSBbXSwgaTsKCiAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoaHRtbCkpIHsKICAgIC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZQogICAgbm9kZXMucHVzaChjb250ZXh0LmNyZWF0ZVRleHROb2RlKGh0bWwpKTsKICB9IGVsc2UgewogICAgLy8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzCiAgICB0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29udGV4dC5jcmVhdGVFbGVtZW50KCJkaXYiKSk7CiAgICB0YWcgPSAoVEFHX05BTUVfUkVHRVhQLmV4ZWMoaHRtbCkgfHwgWyIiLCAiIl0pWzFdLnRvTG93ZXJDYXNlKCk7CiAgICB3cmFwID0gd3JhcE1hcFt0YWddIHx8IHdyYXBNYXAuX2RlZmF1bHQ7CiAgICB0bXAuaW5uZXJIVE1MID0gd3JhcFsxXSArIGh0bWwucmVwbGFjZShYSFRNTF9UQUdfUkVHRVhQLCAiPCQxPjwvJDI+IikgKyB3cmFwWzJdOwoKICAgIC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudAogICAgaSA9IHdyYXBbMF07CiAgICB3aGlsZSAoaS0tKSB7CiAgICAgIHRtcCA9IHRtcC5sYXN0Q2hpbGQ7CiAgICB9CgogICAgbm9kZXMgPSBjb25jYXQobm9kZXMsIHRtcC5jaGlsZE5vZGVzKTsKCiAgICB0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkOwogICAgdG1wLnRleHRDb250ZW50ID0gIiI7CiAgfQoKICAvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50CiAgZnJhZ21lbnQudGV4dENvbnRlbnQgPSAiIjsKICBmcmFnbWVudC5pbm5lckhUTUwgPSAiIjsgLy8gQ2xlYXIgaW5uZXIgSFRNTAogIGZvckVhY2gobm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHsKICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpOwogIH0pOwoKICByZXR1cm4gZnJhZ21lbnQ7Cn0KCmZ1bmN0aW9uIGpxTGl0ZVBhcnNlSFRNTChodG1sLCBjb250ZXh0KSB7CiAgY29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7CiAgdmFyIHBhcnNlZDsKCiAgaWYgKChwYXJzZWQgPSBTSU5HTEVfVEFHX1JFR0VYUC5leGVjKGh0bWwpKSkgewogICAgcmV0dXJuIFtjb250ZXh0LmNyZWF0ZUVsZW1lbnQocGFyc2VkWzFdKV07CiAgfQoKICBpZiAoKHBhcnNlZCA9IGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkpKSB7CiAgICByZXR1cm4gcGFyc2VkLmNoaWxkTm9kZXM7CiAgfQoKICByZXR1cm4gW107Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwpmdW5jdGlvbiBKUUxpdGUoZWxlbWVudCkgewogIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSlFMaXRlKSB7CiAgICByZXR1cm4gZWxlbWVudDsKICB9CgogIHZhciBhcmdJc1N0cmluZzsKCiAgaWYgKGlzU3RyaW5nKGVsZW1lbnQpKSB7CiAgICBlbGVtZW50ID0gdHJpbShlbGVtZW50KTsKICAgIGFyZ0lzU3RyaW5nID0gdHJ1ZTsKICB9CiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEpRTGl0ZSkpIHsKICAgIGlmIChhcmdJc1N0cmluZyAmJiBlbGVtZW50LmNoYXJBdCgwKSAhPSAnPCcpIHsKICAgICAgdGhyb3cganFMaXRlTWluRXJyKCdub3NlbCcsICdMb29raW5nIHVwIGVsZW1lbnRzIHZpYSBzZWxlY3RvcnMgaXMgbm90IHN1cHBvcnRlZCBieSBqcUxpdGUhIFNlZTogaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvYW5ndWxhci5lbGVtZW50Jyk7CiAgICB9CiAgICByZXR1cm4gbmV3IEpRTGl0ZShlbGVtZW50KTsKICB9CgogIGlmIChhcmdJc1N0cmluZykgewogICAganFMaXRlQWRkTm9kZXModGhpcywganFMaXRlUGFyc2VIVE1MKGVsZW1lbnQpKTsKICB9IGVsc2UgewogICAganFMaXRlQWRkTm9kZXModGhpcywgZWxlbWVudCk7CiAgfQp9CgpmdW5jdGlvbiBqcUxpdGVDbG9uZShlbGVtZW50KSB7CiAgcmV0dXJuIGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpOwp9CgpmdW5jdGlvbiBqcUxpdGVEZWFsb2MoZWxlbWVudCwgb25seURlc2NlbmRhbnRzKXsKICBpZiAoIW9ubHlEZXNjZW5kYW50cykganFMaXRlUmVtb3ZlRGF0YShlbGVtZW50KTsKCiAgaWYgKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCkgewogICAgdmFyIGRlc2NlbmRhbnRzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcqJyk7CiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRlc2NlbmRhbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICBqcUxpdGVSZW1vdmVEYXRhKGRlc2NlbmRhbnRzW2ldKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGpxTGl0ZU9mZihlbGVtZW50LCB0eXBlLCBmbiwgdW5zdXBwb3J0ZWQpIHsKICBpZiAoaXNEZWZpbmVkKHVuc3VwcG9ydGVkKSkgdGhyb3cganFMaXRlTWluRXJyKCdvZmZhcmdzJywgJ2pxTGl0ZSNvZmYoKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIGFyZ3VtZW50Jyk7CgogIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCk7CiAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZXZlbnRzOwogIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmhhbmRsZTsKCiAgaWYgKCFoYW5kbGUpIHJldHVybjsgLy9ubyBsaXN0ZW5lcnMgcmVnaXN0ZXJlZAoKICBpZiAoIXR5cGUpIHsKICAgIGZvciAodHlwZSBpbiBldmVudHMpIHsKICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScpIHsKICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oZWxlbWVudCwgdHlwZSwgZXZlbnRzW3R5cGVdKTsKICAgICAgfQogICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgfQogIH0gZWxzZSB7CiAgICBmb3JFYWNoKHR5cGUuc3BsaXQoJyAnKSwgZnVuY3Rpb24odHlwZSkgewogICAgICBpZiAoaXNVbmRlZmluZWQoZm4pKSB7CiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGV2ZW50c1t0eXBlXSk7CiAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhcnJheVJlbW92ZShldmVudHNbdHlwZV0gfHwgW10sIGZuKTsKICAgICAgfQogICAgfSk7CiAgfQp9CgpmdW5jdGlvbiBqcUxpdGVSZW1vdmVEYXRhKGVsZW1lbnQsIG5hbWUpIHsKICB2YXIgZXhwYW5kb0lkID0gZWxlbWVudC5uZzMzOTsKICB2YXIgZXhwYW5kb1N0b3JlID0gZXhwYW5kb0lkICYmIGpxQ2FjaGVbZXhwYW5kb0lkXTsKCiAgaWYgKGV4cGFuZG9TdG9yZSkgewogICAgaWYgKG5hbWUpIHsKICAgICAgZGVsZXRlIGV4cGFuZG9TdG9yZS5kYXRhW25hbWVdOwogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGV4cGFuZG9TdG9yZS5oYW5kbGUpIHsKICAgICAgaWYgKGV4cGFuZG9TdG9yZS5ldmVudHMuJGRlc3Ryb3kpIHsKICAgICAgICBleHBhbmRvU3RvcmUuaGFuZGxlKHt9LCAnJGRlc3Ryb3knKTsKICAgICAgfQogICAgICBqcUxpdGVPZmYoZWxlbWVudCk7CiAgICB9CiAgICBkZWxldGUganFDYWNoZVtleHBhbmRvSWRdOwogICAgZWxlbWVudC5uZzMzOSA9IHVuZGVmaW5lZDsgLy8gZG9uJ3QgZGVsZXRlIERPTSBleHBhbmRvcy4gSUUgYW5kIENocm9tZSBkb24ndCBsaWtlIGl0CiAgfQp9CgoKZnVuY3Rpb24ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsIGNyZWF0ZUlmTmVjZXNzYXJ5KSB7CiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnQubmczMzksCiAgICAgIGV4cGFuZG9TdG9yZSA9IGV4cGFuZG9JZCAmJiBqcUNhY2hlW2V4cGFuZG9JZF07CgogIGlmIChjcmVhdGVJZk5lY2Vzc2FyeSAmJiAhZXhwYW5kb1N0b3JlKSB7CiAgICBlbGVtZW50Lm5nMzM5ID0gZXhwYW5kb0lkID0ganFOZXh0SWQoKTsKICAgIGV4cGFuZG9TdG9yZSA9IGpxQ2FjaGVbZXhwYW5kb0lkXSA9IHtldmVudHM6IHt9LCBkYXRhOiB7fSwgaGFuZGxlOiB1bmRlZmluZWR9OwogIH0KCiAgcmV0dXJuIGV4cGFuZG9TdG9yZTsKfQoKCmZ1bmN0aW9uIGpxTGl0ZURhdGEoZWxlbWVudCwga2V5LCB2YWx1ZSkgewogIGlmIChqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkgewoKICAgIHZhciBpc1NpbXBsZVNldHRlciA9IGlzRGVmaW5lZCh2YWx1ZSk7CiAgICB2YXIgaXNTaW1wbGVHZXR0ZXIgPSAhaXNTaW1wbGVTZXR0ZXIgJiYga2V5ICYmICFpc09iamVjdChrZXkpOwogICAgdmFyIG1hc3NHZXR0ZXIgPSAha2V5OwogICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAhaXNTaW1wbGVHZXR0ZXIpOwogICAgdmFyIGRhdGEgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmRhdGE7CgogICAgaWYgKGlzU2ltcGxlU2V0dGVyKSB7IC8vIGRhdGEoJ2tleScsIHZhbHVlKQogICAgICBkYXRhW2tleV0gPSB2YWx1ZTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChtYXNzR2V0dGVyKSB7ICAvLyBkYXRhKCkKICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoaXNTaW1wbGVHZXR0ZXIpIHsgLy8gZGF0YSgna2V5JykKICAgICAgICAgIC8vIGRvbid0IGZvcmNlIGNyZWF0aW9uIG9mIGV4cGFuZG9TdG9yZSBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldAogICAgICAgICAgcmV0dXJuIGRhdGEgJiYgZGF0YVtrZXldOwogICAgICAgIH0gZWxzZSB7IC8vIG1hc3Mtc2V0dGVyOiBkYXRhKHtrZXkxOiB2YWwxLCBrZXkyOiB2YWwyfSkKICAgICAgICAgIGV4dGVuZChkYXRhLCBrZXkpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQoKZnVuY3Rpb24ganFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgc2VsZWN0b3IpIHsKICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKSByZXR1cm4gZmFsc2U7CiAgcmV0dXJuICgoIiAiICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICIgIikucmVwbGFjZSgvW1xuXHRdL2csICIgIikuCiAgICAgIGluZGV4T2YoICIgIiArIHNlbGVjdG9yICsgIiAiICkgPiAtMSk7Cn0KCmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZUNsYXNzKGVsZW1lbnQsIGNzc0NsYXNzZXMpIHsKICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkgewogICAgZm9yRWFjaChjc3NDbGFzc2VzLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNzc0NsYXNzKSB7CiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRyaW0oCiAgICAgICAgICAoIiAiICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICIgIikKICAgICAgICAgIC5yZXBsYWNlKC9bXG5cdF0vZywgIiAiKQogICAgICAgICAgLnJlcGxhY2UoIiAiICsgdHJpbShjc3NDbGFzcykgKyAiICIsICIgIikpCiAgICAgICk7CiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIGpxTGl0ZUFkZENsYXNzKGVsZW1lbnQsIGNzc0NsYXNzZXMpIHsKICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkgewogICAgdmFyIGV4aXN0aW5nQ2xhc3NlcyA9ICgnICcgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgJyAnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcblx0XS9nLCAiICIpOwoKICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykgewogICAgICBjc3NDbGFzcyA9IHRyaW0oY3NzQ2xhc3MpOwogICAgICBpZiAoZXhpc3RpbmdDbGFzc2VzLmluZGV4T2YoJyAnICsgY3NzQ2xhc3MgKyAnICcpID09PSAtMSkgewogICAgICAgIGV4aXN0aW5nQ2xhc3NlcyArPSBjc3NDbGFzcyArICcgJzsKICAgICAgfQogICAgfSk7CgogICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShleGlzdGluZ0NsYXNzZXMpKTsKICB9Cn0KCgpmdW5jdGlvbiBqcUxpdGVBZGROb2Rlcyhyb290LCBlbGVtZW50cykgewogIC8vIFRISVMgQ09ERSBJUyBWRVJZIEhPVC4gRG9uJ3QgbWFrZSBjaGFuZ2VzIHdpdGhvdXQgYmVuY2htYXJraW5nLgoKICBpZiAoZWxlbWVudHMpIHsKCiAgICAvLyBpZiBhIE5vZGUgKHRoZSBtb3N0IGNvbW1vbiBjYXNlKQogICAgaWYgKGVsZW1lbnRzLm5vZGVUeXBlKSB7CiAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50czsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7CgogICAgICAvLyBpZiBhbiBBcnJheSBvciBOb2RlTGlzdCBhbmQgbm90IGEgV2luZG93CiAgICAgIGlmICh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyAmJiBlbGVtZW50cy53aW5kb3cgIT09IGVsZW1lbnRzKSB7CiAgICAgICAgaWYgKGxlbmd0aCkgewogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHNbaV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50czsKICAgICAgfQogICAgfQogIH0KfQoKCmZ1bmN0aW9uIGpxTGl0ZUNvbnRyb2xsZXIoZWxlbWVudCwgbmFtZSkgewogIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckJyArIChuYW1lIHx8ICduZ0NvbnRyb2xsZXInICkgKyAnQ29udHJvbGxlcicpOwp9CgpmdW5jdGlvbiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7CiAgLy8gaWYgZWxlbWVudCBpcyB0aGUgZG9jdW1lbnQgb2JqZWN0IHdvcmsgd2l0aCB0aGUgaHRtbCBlbGVtZW50IGluc3RlYWQKICAvLyB0aGlzIG1ha2VzICQoZG9jdW1lbnQpLnNjb3BlKCkgcG9zc2libGUKICBpZihlbGVtZW50Lm5vZGVUeXBlID09IDkpIHsKICAgIGVsZW1lbnQgPSBlbGVtZW50LmRvY3VtZW50RWxlbWVudDsKICB9CiAgdmFyIG5hbWVzID0gaXNBcnJheShuYW1lKSA/IG5hbWUgOiBbbmFtZV07CgogIHdoaWxlIChlbGVtZW50KSB7CiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGlmICgodmFsdWUgPSBqcUxpdGUuZGF0YShlbGVtZW50LCBuYW1lc1tpXSkpICE9PSB1bmRlZmluZWQpIHJldHVybiB2YWx1ZTsKICAgIH0KCiAgICAvLyBJZiBkZWFsaW5nIHdpdGggYSBkb2N1bWVudCBmcmFnbWVudCBub2RlIHdpdGggYSBob3N0IGVsZW1lbnQsIGFuZCBubyBwYXJlbnQsIHVzZSB0aGUgaG9zdAogICAgLy8gZWxlbWVudCBhcyB0aGUgcGFyZW50LiBUaGlzIGVuYWJsZXMgZGlyZWN0aXZlcyB3aXRoaW4gYSBTaGFkb3cgRE9NIG9yIHBvbHlmaWxsZWQgU2hhZG93IERPTQogICAgLy8gdG8gbG9va3VwIHBhcmVudCBjb250cm9sbGVycy4KICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUgfHwgKGVsZW1lbnQubm9kZVR5cGUgPT09IDExICYmIGVsZW1lbnQuaG9zdCk7CiAgfQp9CgpmdW5jdGlvbiBqcUxpdGVFbXB0eShlbGVtZW50KSB7CiAganFMaXRlRGVhbG9jKGVsZW1lbnQsIHRydWUpOwogIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHsKICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTsKICB9Cn0KCmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZShlbGVtZW50LCBrZWVwRGF0YSkgewogIGlmICgha2VlcERhdGEpIGpxTGl0ZURlYWxvYyhlbGVtZW50KTsKICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZChlbGVtZW50KTsKfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vIEZ1bmN0aW9ucyB3aGljaCBhcmUgZGVjbGFyZWQgZGlyZWN0bHkuCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwp2YXIgSlFMaXRlUHJvdG90eXBlID0gSlFMaXRlLnByb3RvdHlwZSA9IHsKICByZWFkeTogZnVuY3Rpb24oZm4pIHsKICAgIHZhciBmaXJlZCA9IGZhbHNlOwoKICAgIGZ1bmN0aW9uIHRyaWdnZXIoKSB7CiAgICAgIGlmIChmaXJlZCkgcmV0dXJuOwogICAgICBmaXJlZCA9IHRydWU7CiAgICAgIGZuKCk7CiAgICB9CgogICAgLy8gY2hlY2sgaWYgZG9jdW1lbnQgaXMgYWxyZWFkeSBsb2FkZWQKICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKXsKICAgICAgc2V0VGltZW91dCh0cmlnZ2VyKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMub24oJ0RPTUNvbnRlbnRMb2FkZWQnLCB0cmlnZ2VyKTsgLy8gd29ya3MgZm9yIG1vZGVybiBicm93c2VycyBhbmQgSUU5CiAgICAgIC8vIHdlIGNhbiBub3QgdXNlIGpxTGl0ZSBzaW5jZSB3ZSBhcmUgbm90IGRvbmUgbG9hZGluZyBhbmQgalF1ZXJ5IGNvdWxkIGJlIGxvYWRlZCBsYXRlci4KICAgICAgLy8ganNoaW50IC1XMDY0CiAgICAgIEpRTGl0ZSh3aW5kb3cpLm9uKCdsb2FkJywgdHJpZ2dlcik7IC8vIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQgZm9yIG90aGVycwogICAgICAvLyBqc2hpbnQgK1cwNjQKICAgICAgdGhpcy5vbignRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpOwogICAgfQogIH0sCiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgewogICAgdmFyIHZhbHVlID0gW107CiAgICBmb3JFYWNoKHRoaXMsIGZ1bmN0aW9uKGUpeyB2YWx1ZS5wdXNoKCcnICsgZSk7fSk7CiAgICByZXR1cm4gJ1snICsgdmFsdWUuam9pbignLCAnKSArICddJzsKICB9LAoKICBlcTogZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgcmV0dXJuIChpbmRleCA+PSAwKSA/IGpxTGl0ZSh0aGlzW2luZGV4XSkgOiBqcUxpdGUodGhpc1t0aGlzLmxlbmd0aCArIGluZGV4XSk7CiAgfSwKCiAgbGVuZ3RoOiAwLAogIHB1c2g6IHB1c2gsCiAgc29ydDogW10uc29ydCwKICBzcGxpY2U6IFtdLnNwbGljZQp9OwoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgZ2V0dGVyL3NldHRlcnMuCi8vIHRoZXNlIGZ1bmN0aW9ucyByZXR1cm4gc2VsZiBvbiBzZXR0ZXIgYW5kCi8vIHZhbHVlIG9uIGdldC4KLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCnZhciBCT09MRUFOX0FUVFIgPSB7fTsKZm9yRWFjaCgnbXVsdGlwbGUsc2VsZWN0ZWQsY2hlY2tlZCxkaXNhYmxlZCxyZWFkT25seSxyZXF1aXJlZCxvcGVuJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkgewogIEJPT0xFQU5fQVRUUltsb3dlcmNhc2UodmFsdWUpXSA9IHZhbHVlOwp9KTsKdmFyIEJPT0xFQU5fRUxFTUVOVFMgPSB7fTsKZm9yRWFjaCgnaW5wdXQsc2VsZWN0LG9wdGlvbix0ZXh0YXJlYSxidXR0b24sZm9ybSxkZXRhaWxzJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkgewogIEJPT0xFQU5fRUxFTUVOVFNbdmFsdWVdID0gdHJ1ZTsKfSk7CnZhciBBTElBU0VEX0FUVFIgPSB7CiAgJ25nTWlubGVuZ3RoJyA6ICdtaW5sZW5ndGgnLAogICduZ01heGxlbmd0aCcgOiAnbWF4bGVuZ3RoJywKICAnbmdQYXR0ZXJuJyA6ICdwYXR0ZXJuJwp9OwoKZnVuY3Rpb24gZ2V0Qm9vbGVhbkF0dHJOYW1lKGVsZW1lbnQsIG5hbWUpIHsKICAvLyBjaGVjayBkb20gbGFzdCBzaW5jZSB3ZSB3aWxsIG1vc3QgbGlrZWx5IGZhaWwgb24gbmFtZQogIHZhciBib29sZWFuQXR0ciA9IEJPT0xFQU5fQVRUUltuYW1lLnRvTG93ZXJDYXNlKCldOwoKICAvLyBib29sZWFuQXR0ciBpcyBoZXJlIHR3aWNlIHRvIG1pbmltaXplIERPTSBhY2Nlc3MKICByZXR1cm4gYm9vbGVhbkF0dHIgJiYgQk9PTEVBTl9FTEVNRU5UU1tub2RlTmFtZV8oZWxlbWVudCldICYmIGJvb2xlYW5BdHRyOwp9CgpmdW5jdGlvbiBnZXRBbGlhc2VkQXR0ck5hbWUoZWxlbWVudCwgbmFtZSkgewogIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7CiAgcmV0dXJuIChub2RlTmFtZSA9PT0gJ0lOUFVUJyB8fCBub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJykgJiYgQUxJQVNFRF9BVFRSW25hbWVdOwp9Cgpmb3JFYWNoKHsKICBkYXRhOiBqcUxpdGVEYXRhLAogIHJlbW92ZURhdGE6IGpxTGl0ZVJlbW92ZURhdGEKfSwgZnVuY3Rpb24oZm4sIG5hbWUpIHsKICBKUUxpdGVbbmFtZV0gPSBmbjsKfSk7Cgpmb3JFYWNoKHsKICBkYXRhOiBqcUxpdGVEYXRhLAogIGluaGVyaXRlZERhdGE6IGpxTGl0ZUluaGVyaXRlZERhdGEsCgogIHNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSEKICAgIHJldHVybiBqcUxpdGUuZGF0YShlbGVtZW50LCAnJHNjb3BlJykgfHwganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudCwgWyckaXNvbGF0ZVNjb3BlJywgJyRzY29wZSddKTsKICB9LAoKICBpc29sYXRlU2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIC8vIENhbid0IHVzZSBqcUxpdGVEYXRhIGhlcmUgZGlyZWN0bHkgc28gd2Ugc3RheSBjb21wYXRpYmxlIHdpdGggalF1ZXJ5IQogICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlJykgfHwganFMaXRlLmRhdGEoZWxlbWVudCwgJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyk7CiAgfSwKCiAgY29udHJvbGxlcjoganFMaXRlQ29udHJvbGxlciwKCiAgaW5qZWN0b3I6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckaW5qZWN0b3InKTsKICB9LAoKICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lKSB7CiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsKICB9LAoKICBoYXNDbGFzczoganFMaXRlSGFzQ2xhc3MsCgogIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHsKICAgIG5hbWUgPSBjYW1lbENhc2UobmFtZSk7CgogICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudC5zdHlsZVtuYW1lXSA9IHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbbmFtZV07CiAgICB9CiAgfSwKCiAgYXR0cjogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpewogICAgdmFyIGxvd2VyY2FzZWROYW1lID0gbG93ZXJjYXNlKG5hbWUpOwogICAgaWYgKEJPT0xFQU5fQVRUUltsb3dlcmNhc2VkTmFtZV0pIHsKICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgICBpZiAoISF2YWx1ZSkgewogICAgICAgICAgZWxlbWVudFtuYW1lXSA9IHRydWU7CiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCBsb3dlcmNhc2VkTmFtZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSBmYWxzZTsKICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGxvd2VyY2FzZWROYW1lKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIChlbGVtZW50W25hbWVdIHx8CiAgICAgICAgICAgICAgICAgKGVsZW1lbnQuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0obmFtZSl8fCBub29wKS5zcGVjaWZpZWQpCiAgICAgICAgICAgICAgID8gbG93ZXJjYXNlZE5hbWUKICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKHZhbHVlKSkgewogICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7CiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7CiAgICAgIC8vIHRoZSBleHRyYSBhcmd1bWVudCAiMiIgaXMgdG8gZ2V0IHRoZSByaWdodCB0aGluZyBmb3IgYS5ocmVmIGluIElFLCBzZWUgalF1ZXJ5IGNvZGUKICAgICAgLy8gc29tZSBlbGVtZW50cyAoZS5nLiBEb2N1bWVudCkgZG9uJ3QgaGF2ZSBnZXQgYXR0cmlidXRlLCBzbyByZXR1cm4gdW5kZWZpbmVkCiAgICAgIHZhciByZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lLCAyKTsKICAgICAgLy8gbm9ybWFsaXplIG5vbi1leGlzdGluZyBhdHRyaWJ1dGVzIHRvIHVuZGVmaW5lZCAoYXMgalF1ZXJ5KQogICAgICByZXR1cm4gcmV0ID09PSBudWxsID8gdW5kZWZpbmVkIDogcmV0OwogICAgfQogIH0sCgogIHByb3A6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7CiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkgewogICAgICBlbGVtZW50W25hbWVdID0gdmFsdWU7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZWxlbWVudFtuYW1lXTsKICAgIH0KICB9LAoKICB0ZXh0OiAoZnVuY3Rpb24oKSB7CiAgICBnZXRUZXh0LiRkdiA9ICcnOwogICAgcmV0dXJuIGdldFRleHQ7CgogICAgZnVuY3Rpb24gZ2V0VGV4dChlbGVtZW50LCB2YWx1ZSkgewogICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7CiAgICAgICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTsKICAgICAgICByZXR1cm4gKG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSAzKSA/IGVsZW1lbnQudGV4dENvbnRlbnQgOiAnJzsKICAgICAgfQogICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7CiAgICB9CiAgfSkoKSwKCiAgdmFsOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkgewogICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgewogICAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSAmJiBub2RlTmFtZV8oZWxlbWVudCkgPT09ICdzZWxlY3QnKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICAgIGZvckVhY2goZWxlbWVudC5vcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDAgPyBudWxsIDogcmVzdWx0OwogICAgICB9CiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlOwogICAgfQogICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlOwogIH0sCgogIGh0bWw6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlKSB7CiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7CiAgICAgIHJldHVybiBlbGVtZW50LmlubmVySFRNTDsKICAgIH0KICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTsKICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7CiAgfSwKCiAgZW1wdHk6IGpxTGl0ZUVtcHR5Cn0sIGZ1bmN0aW9uKGZuLCBuYW1lKXsKICAvKioKICAgKiBQcm9wZXJ0aWVzOiB3cml0ZXMgcmV0dXJuIHNlbGVjdGlvbiwgcmVhZHMgcmV0dXJuIGZpcnN0IHZhbHVlCiAgICovCiAgSlFMaXRlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHsKICAgIHZhciBpLCBrZXk7CiAgICB2YXIgbm9kZUNvdW50ID0gdGhpcy5sZW5ndGg7CgogICAgLy8ganFMaXRlSGFzQ2xhc3MgaGFzIG9ubHkgdHdvIGFyZ3VtZW50cywgYnV0IGlzIGEgZ2V0dGVyLW9ubHkgZm4sIHNvIHdlIG5lZWQgdG8gc3BlY2lhbC1jYXNlIGl0CiAgICAvLyBpbiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbi4KICAgIC8vIGpxTGl0ZUVtcHR5IHRha2VzIG5vIGFyZ3VtZW50cyBidXQgaXMgYSBzZXR0ZXIuCiAgICBpZiAoZm4gIT09IGpxTGl0ZUVtcHR5ICYmCiAgICAgICAgKCgoZm4ubGVuZ3RoID09IDIgJiYgKGZuICE9PSBqcUxpdGVIYXNDbGFzcyAmJiBmbiAhPT0ganFMaXRlQ29udHJvbGxlcikpID8gYXJnMSA6IGFyZzIpID09PSB1bmRlZmluZWQpKSB7CiAgICAgIGlmIChpc09iamVjdChhcmcxKSkgewoKICAgICAgICAvLyB3ZSBhcmUgYSB3cml0ZSwgYnV0IHRoZSBvYmplY3QgcHJvcGVydGllcyBhcmUgdGhlIGtleS92YWx1ZXMKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHsKICAgICAgICAgIGlmIChmbiA9PT0ganFMaXRlRGF0YSkgewogICAgICAgICAgICAvLyBkYXRhKCkgdGFrZXMgdGhlIHdob2xlIG9iamVjdCBpbiBqUXVlcnkKICAgICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3IgKGtleSBpbiBhcmcxKSB7CiAgICAgICAgICAgICAgZm4odGhpc1tpXSwga2V5LCBhcmcxW2tleV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHdlIGFyZSBhIHJlYWQsIHNvIHJlYWQgdGhlIGZpcnN0IGNoaWxkLgogICAgICAgIC8vIFRPRE86IGRvIHdlIHN0aWxsIG5lZWQgdGhpcz8KICAgICAgICB2YXIgdmFsdWUgPSBmbi4kZHY7CiAgICAgICAgLy8gT25seSBpZiB3ZSBoYXZlICRkdiBkbyB3ZSBpdGVyYXRlIG92ZXIgYWxsLCBvdGhlcndpc2UgaXQgaXMganVzdCB0aGUgZmlyc3QgZWxlbWVudC4KICAgICAgICB2YXIgamogPSAodmFsdWUgPT09IHVuZGVmaW5lZCkgPyBNYXRoLm1pbihub2RlQ291bnQsIDEpIDogbm9kZUNvdW50OwogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgamo7IGorKykgewogICAgICAgICAgdmFyIG5vZGVWYWx1ZSA9IGZuKHRoaXNbal0sIGFyZzEsIGFyZzIpOwogICAgICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlICsgbm9kZVZhbHVlIDogbm9kZVZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBzbyBhcHBseSB0byBhbGwgY2hpbGRyZW4KICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7CiAgICAgICAgZm4odGhpc1tpXSwgYXJnMSwgYXJnMik7CiAgICAgIH0KICAgICAgLy8gcmV0dXJuIHNlbGYgZm9yIGNoYWluaW5nCiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH07Cn0pOwoKZnVuY3Rpb24gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cykgewogIHZhciBldmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQsIHR5cGUpIHsKCiAgICAvLyBqUXVlcnkgc3BlY2lmaWMgYXBpCiAgICBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7CiAgICB9OwoKICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlIHx8IGV2ZW50LnR5cGVdOwogICAgdmFyIGV2ZW50Rm5zTGVuZ3RoID0gZXZlbnRGbnMgPyBldmVudEZucy5sZW5ndGggOiAwOwoKICAgIGlmICghZXZlbnRGbnNMZW5ndGgpIHJldHVybjsKCiAgICAvLyBDb3B5IGV2ZW50IGhhbmRsZXJzIGluIGNhc2UgZXZlbnQgaGFuZGxlcnMgYXJyYXkgaXMgbW9kaWZpZWQgZHVyaW5nIGV4ZWN1dGlvbi4KICAgIGlmICgoZXZlbnRGbnNMZW5ndGggPiAxKSkgewogICAgICBldmVudEZucyA9IHNoYWxsb3dDb3B5KGV2ZW50Rm5zKTsKICAgIH0KCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50Rm5zTGVuZ3RoOyBpKyspIHsKICAgICAgZXZlbnRGbnNbaV0uY2FsbChlbGVtZW50LCBldmVudCk7CiAgICB9CiAgfTsKCiAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2sgZm9yIGFuZ3VsYXJNb2Nrcy9jbGVhckRhdGFDYWNoZSB0aGF0IG1ha2VzIGl0IHBvc3NpYmxlIHRvIGRlcmVnaXN0ZXIgYWxsCiAgLy8gICAgICAgZXZlbnRzIG9uIGBlbGVtZW50YAogIGV2ZW50SGFuZGxlci5lbGVtID0gZWxlbWVudDsKICByZXR1cm4gZXZlbnRIYW5kbGVyOwp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyB0cmF2ZXJzYWwuCi8vIFRoZXNlIGZ1bmN0aW9ucyBjaGFpbiByZXN1bHRzIGludG8gYSBzaW5nbGUKLy8gc2VsZWN0b3IuCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwpmb3JFYWNoKHsKICByZW1vdmVEYXRhOiBqcUxpdGVSZW1vdmVEYXRhLAoKICBvbjogZnVuY3Rpb24ganFMaXRlT24oZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKXsKICAgIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29uYXJncycsICdqcUxpdGUjb24oKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIG9yIGBldmVudERhdGFgIHBhcmFtZXRlcnMnKTsKCiAgICAvLyBEbyBub3QgYWRkIGV2ZW50IGhhbmRsZXJzIHRvIG5vbi1lbGVtZW50cyBiZWNhdXNlIHRoZXkgd2lsbCBub3QgYmUgY2xlYW5lZCB1cC4KICAgIGlmICghanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgdHJ1ZSk7CiAgICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlLmV2ZW50czsKICAgIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUuaGFuZGxlOwoKICAgIGlmICghaGFuZGxlKSB7CiAgICAgIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGUgPSBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKTsKICAgIH0KCiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9zdHJpbmctaW5kZXhvZi12cy1zcGxpdAogICAgdmFyIHR5cGVzID0gdHlwZS5pbmRleE9mKCcgJykgPj0gMCA/IHR5cGUuc3BsaXQoJyAnKSA6IFt0eXBlXTsKICAgIHZhciBpID0gdHlwZXMubGVuZ3RoOwoKICAgIHdoaWxlIChpLS0pIHsKICAgICAgdHlwZSA9IHR5cGVzW2ldOwogICAgICB2YXIgZXZlbnRGbnMgPSBldmVudHNbdHlwZV07CgogICAgICBpZiAoIWV2ZW50Rm5zKSB7CiAgICAgICAgZXZlbnRzW3R5cGVdID0gW107CgogICAgICAgIGlmICh0eXBlID09PSAnbW91c2VlbnRlcicgfHwgdHlwZSA9PT0gJ21vdXNlbGVhdmUnKSB7CiAgICAgICAgICAvLyBSZWZlciB0byBqUXVlcnkncyBpbXBsZW1lbnRhdGlvbiBvZiBtb3VzZWVudGVyICYgbW91c2VsZWF2ZQogICAgICAgICAgLy8gUmVhZCBhYm91dCBtb3VzZWVudGVyIGFuZCBtb3VzZWxlYXZlOgogICAgICAgICAgLy8gaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfbW91c2UuaHRtbCNsaW5rOAoKICAgICAgICAgIGpxTGl0ZU9uKGVsZW1lbnQsIE1PVVNFX0VWRU5UX01BUFt0eXBlXSwgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMsIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0OwogICAgICAgICAgICAvLyBGb3IgbW91c2VudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuCiAgICAgICAgICAgIC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93CiAgICAgICAgICAgIGlmICggIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhdGFyZ2V0LmNvbnRhaW5zKHJlbGF0ZWQpKSApewogICAgICAgICAgICAgIGhhbmRsZShldmVudCwgdHlwZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwoKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScpIHsKICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGhhbmRsZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdOwogICAgICB9CiAgICAgIGV2ZW50Rm5zLnB1c2goZm4pOwogICAgfQogIH0sCgogIG9mZjoganFMaXRlT2ZmLAoKICBvbmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7CiAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpOwoKICAgIC8vYWRkIHRoZSBsaXN0ZW5lciB0d2ljZSBzbyB0aGF0IHdoZW4gaXQgaXMgY2FsbGVkCiAgICAvL3lvdSBjYW4gcmVtb3ZlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBhbmQgc3RpbGwgYmUKICAgIC8vYWJsZSB0byBjYWxsIGVsZW1lbnQub2ZmKGV2LCBmbikgbm9ybWFsbHkKICAgIGVsZW1lbnQub24odHlwZSwgZnVuY3Rpb24gb25GbigpIHsKICAgICAgZWxlbWVudC5vZmYodHlwZSwgZm4pOwogICAgICBlbGVtZW50Lm9mZih0eXBlLCBvbkZuKTsKICAgIH0pOwogICAgZWxlbWVudC5vbih0eXBlLCBmbik7CiAgfSwKCiAgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlcGxhY2VOb2RlKSB7CiAgICB2YXIgaW5kZXgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50KTsKICAgIGZvckVhY2gobmV3IEpRTGl0ZShyZXBsYWNlTm9kZSksIGZ1bmN0aW9uKG5vZGUpewogICAgICBpZiAoaW5kZXgpIHsKICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5vZGUsIGVsZW1lbnQpOwogICAgICB9CiAgICAgIGluZGV4ID0gbm9kZTsKICAgIH0pOwogIH0sCgogIGNoaWxkcmVuOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICB2YXIgY2hpbGRyZW4gPSBbXTsKICAgIGZvckVhY2goZWxlbWVudC5jaGlsZE5vZGVzLCBmdW5jdGlvbihlbGVtZW50KXsKICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IDEpCiAgICAgICAgY2hpbGRyZW4ucHVzaChlbGVtZW50KTsKICAgIH0pOwogICAgcmV0dXJuIGNoaWxkcmVuOwogIH0sCgogIGNvbnRlbnRzOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gZWxlbWVudC5jb250ZW50RG9jdW1lbnQgfHwgZWxlbWVudC5jaGlsZE5vZGVzIHx8IFtdOwogIH0sCgogIGFwcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkgewogICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTsKICAgIGlmIChub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gMTEpIHJldHVybjsKCiAgICBub2RlID0gbmV3IEpRTGl0ZShub2RlKTsKCiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBub2RlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTsKICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7CiAgICB9CiAgfSwKCiAgcHJlcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkgewogICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHsKICAgICAgdmFyIGluZGV4ID0gZWxlbWVudC5maXJzdENoaWxkOwogICAgICBmb3JFYWNoKG5ldyBKUUxpdGUobm9kZSksIGZ1bmN0aW9uKGNoaWxkKXsKICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShjaGlsZCwgaW5kZXgpOwogICAgICB9KTsKICAgIH0KICB9LAoKICB3cmFwOiBmdW5jdGlvbihlbGVtZW50LCB3cmFwTm9kZSkgewogICAgd3JhcE5vZGUgPSBqcUxpdGUod3JhcE5vZGUpLmVxKDApLmNsb25lKClbMF07CiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgaWYgKHBhcmVudCkgewogICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKHdyYXBOb2RlLCBlbGVtZW50KTsKICAgIH0KICAgIHdyYXBOb2RlLmFwcGVuZENoaWxkKGVsZW1lbnQpOwogIH0sCgogIHJlbW92ZToganFMaXRlUmVtb3ZlLAoKICBkZXRhY2g6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGpxTGl0ZVJlbW92ZShlbGVtZW50LCB0cnVlKTsKICB9LAoKICBhZnRlcjogZnVuY3Rpb24oZWxlbWVudCwgbmV3RWxlbWVudCkgewogICAgdmFyIGluZGV4ID0gZWxlbWVudCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgbmV3RWxlbWVudCA9IG5ldyBKUUxpdGUobmV3RWxlbWVudCk7CgogICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbmV3RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIHZhciBub2RlID0gbmV3RWxlbWVudFtpXTsKICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBpbmRleC5uZXh0U2libGluZyk7CiAgICAgIGluZGV4ID0gbm9kZTsKICAgIH0KICB9LAoKICBhZGRDbGFzczoganFMaXRlQWRkQ2xhc3MsCiAgcmVtb3ZlQ2xhc3M6IGpxTGl0ZVJlbW92ZUNsYXNzLAoKICB0b2dnbGVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IsIGNvbmRpdGlvbikgewogICAgaWYgKHNlbGVjdG9yKSB7CiAgICAgIGZvckVhY2goc2VsZWN0b3Iuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY2xhc3NOYW1lKXsKICAgICAgICB2YXIgY2xhc3NDb25kaXRpb24gPSBjb25kaXRpb247CiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNsYXNzQ29uZGl0aW9uKSkgewogICAgICAgICAgY2xhc3NDb25kaXRpb24gPSAhanFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTsKICAgICAgICB9CiAgICAgICAgKGNsYXNzQ29uZGl0aW9uID8ganFMaXRlQWRkQ2xhc3MgOiBqcUxpdGVSZW1vdmVDbGFzcykoZWxlbWVudCwgY2xhc3NOYW1lKTsKICAgICAgfSk7CiAgICB9CiAgfSwKCiAgcGFyZW50OiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDsKICB9LAoKICBuZXh0OiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7CiAgfSwKCiAgZmluZDogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IpIHsKICAgIGlmIChlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKSB7CiAgICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBbXTsKICAgIH0KICB9LAoKICBjbG9uZToganFMaXRlQ2xvbmUsCgogIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgZXh0cmFQYXJhbWV0ZXJzKSB7CgogICAgdmFyIGR1bW15RXZlbnQsIGV2ZW50Rm5zQ29weSwgaGFuZGxlckFyZ3M7CiAgICB2YXIgZXZlbnROYW1lID0gZXZlbnQudHlwZSB8fCBldmVudDsKICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCk7CiAgICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7CiAgICB2YXIgZXZlbnRGbnMgPSBldmVudHMgJiYgZXZlbnRzW2V2ZW50TmFtZV07CgogICAgaWYgKGV2ZW50Rm5zKSB7CgogICAgICAvLyBDcmVhdGUgYSBkdW1teSBldmVudCB0byBwYXNzIHRvIHRoZSBoYW5kbGVycwogICAgICBkdW1teUV2ZW50ID0gewogICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsgfSwKICAgICAgICBpc0RlZmF1bHRQcmV2ZW50ZWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5kZWZhdWx0UHJldmVudGVkID09PSB0cnVlOyB9LAogICAgICAgIHN0b3BQcm9wYWdhdGlvbjogbm9vcCwKICAgICAgICB0eXBlOiBldmVudE5hbWUsCiAgICAgICAgdGFyZ2V0OiBlbGVtZW50CiAgICAgIH07CgogICAgICAvLyBJZiBhIGN1c3RvbSBldmVudCB3YXMgcHJvdmlkZWQgdGhlbiBleHRlbmQgb3VyIGR1bW15IGV2ZW50IHdpdGggaXQKICAgICAgaWYgKGV2ZW50LnR5cGUpIHsKICAgICAgICBkdW1teUV2ZW50ID0gZXh0ZW5kKGR1bW15RXZlbnQsIGV2ZW50KTsKICAgICAgfQoKICAgICAgLy8gQ29weSBldmVudCBoYW5kbGVycyBpbiBjYXNlIGV2ZW50IGhhbmRsZXJzIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyBleGVjdXRpb24uCiAgICAgIGV2ZW50Rm5zQ29weSA9IHNoYWxsb3dDb3B5KGV2ZW50Rm5zKTsKICAgICAgaGFuZGxlckFyZ3MgPSBleHRyYVBhcmFtZXRlcnMgPyBbZHVtbXlFdmVudF0uY29uY2F0KGV4dHJhUGFyYW1ldGVycykgOiBbZHVtbXlFdmVudF07CgogICAgICBmb3JFYWNoKGV2ZW50Rm5zQ29weSwgZnVuY3Rpb24oZm4pIHsKICAgICAgICBmbi5hcHBseShlbGVtZW50LCBoYW5kbGVyQXJncyk7CiAgICAgIH0pOwoKICAgIH0KICB9Cn0sIGZ1bmN0aW9uKGZuLCBuYW1lKXsKICAvKioKICAgKiBjaGFpbmluZyBmdW5jdGlvbnMKICAgKi8KICBKUUxpdGUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykgewogICAgdmFyIHZhbHVlOwoKICAgIGZvcih2YXIgaSA9IDAsIGlpID0gdGhpcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgICB2YWx1ZSA9IGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIsIGFyZzMpOwogICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7CiAgICAgICAgICAvLyBhbnkgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHZhbHVlIG5lZWRzIHRvIGJlIHdyYXBwZWQKICAgICAgICAgIHZhbHVlID0ganFMaXRlKHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAganFMaXRlQWRkTm9kZXModmFsdWUsIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIsIGFyZzMpKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IHRoaXM7CiAgfTsKCiAgLy8gYmluZCBsZWdhY3kgYmluZC91bmJpbmQgdG8gb24vb2ZmCiAgSlFMaXRlLnByb3RvdHlwZS5iaW5kID0gSlFMaXRlLnByb3RvdHlwZS5vbjsKICBKUUxpdGUucHJvdG90eXBlLnVuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub2ZmOwp9KTsKCi8qKgogKiBDb21wdXRlcyBhIGhhc2ggb2YgYW4gJ29iaicuCiAqIEhhc2ggb2YgYToKICogIHN0cmluZyBpcyBzdHJpbmcKICogIG51bWJlciBpcyBudW1iZXIgYXMgc3RyaW5nCiAqICBvYmplY3QgaXMgZWl0aGVyIHJlc3VsdCBvZiBjYWxsaW5nICQkaGFzaEtleSBmdW5jdGlvbiBvbiB0aGUgb2JqZWN0IG9yIHVuaXF1ZWx5IGdlbmVyYXRlZCBpZCwKICogICAgICAgICB0aGF0IGlzIGFsc28gYXNzaWduZWQgdG8gdGhlICQkaGFzaEtleSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0LgogKgogKiBAcGFyYW0gb2JqCiAqIEByZXR1cm5zIHtzdHJpbmd9IGhhc2ggc3RyaW5nIHN1Y2ggdGhhdCB0aGUgc2FtZSBpbnB1dCB3aWxsIGhhdmUgdGhlIHNhbWUgaGFzaCBzdHJpbmcuCiAqICAgICAgICAgVGhlIHJlc3VsdGluZyBzdHJpbmcga2V5IGlzIGluICd0eXBlOmhhc2hLZXknIGZvcm1hdC4KICovCmZ1bmN0aW9uIGhhc2hLZXkob2JqLCBuZXh0VWlkRm4pIHsKICB2YXIgb2JqVHlwZSA9IHR5cGVvZiBvYmosCiAgICAgIGtleTsKCiAgaWYgKG9ialR5cGUgPT0gJ2Z1bmN0aW9uJyB8fCAob2JqVHlwZSA9PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwpKSB7CiAgICBpZiAodHlwZW9mIChrZXkgPSBvYmouJCRoYXNoS2V5KSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgIC8vIG11c3QgaW52b2tlIG9uIG9iamVjdCB0byBrZWVwIHRoZSByaWdodCB0aGlzCiAgICAgIGtleSA9IG9iai4kJGhhc2hLZXkoKTsKICAgIH0gZWxzZSBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHsKICAgICAga2V5ID0gb2JqLiQkaGFzaEtleSA9IChuZXh0VWlkRm4gfHwgbmV4dFVpZCkoKTsKICAgIH0KICB9IGVsc2UgewogICAga2V5ID0gb2JqOwogIH0KCiAgcmV0dXJuIG9ialR5cGUgKyAnOicgKyBrZXk7Cn0KCi8qKgogKiBIYXNoTWFwIHdoaWNoIGNhbiB1c2Ugb2JqZWN0cyBhcyBrZXlzCiAqLwpmdW5jdGlvbiBIYXNoTWFwKGFycmF5LCBpc29sYXRlZFVpZCkgewogIGlmIChpc29sYXRlZFVpZCkgewogICAgdmFyIHVpZCA9IDA7CiAgICB0aGlzLm5leHRVaWQgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuICsrdWlkOwogICAgfTsKICB9CiAgZm9yRWFjaChhcnJheSwgdGhpcy5wdXQsIHRoaXMpOwp9Ckhhc2hNYXAucHJvdG90eXBlID0gewogIC8qKgogICAqIFN0b3JlIGtleSB2YWx1ZSBwYWlyCiAgICogQHBhcmFtIGtleSBrZXkgdG8gc3RvcmUgY2FuIGJlIGFueSB0eXBlCiAgICogQHBhcmFtIHZhbHVlIHZhbHVlIHRvIHN0b3JlIGNhbiBiZSBhbnkgdHlwZQogICAqLwogIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgdGhpc1toYXNoS2V5KGtleSwgdGhpcy5uZXh0VWlkKV0gPSB2YWx1ZTsKICB9LAoKICAvKioKICAgKiBAcGFyYW0ga2V5CiAgICogQHJldHVybnMge09iamVjdH0gdGhlIHZhbHVlIGZvciB0aGUga2V5CiAgICovCiAgZ2V0OiBmdW5jdGlvbihrZXkpIHsKICAgIHJldHVybiB0aGlzW2hhc2hLZXkoa2V5LCB0aGlzLm5leHRVaWQpXTsKICB9LAoKICAvKioKICAgKiBSZW1vdmUgdGhlIGtleS92YWx1ZSBwYWlyCiAgICogQHBhcmFtIGtleQogICAqLwogIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7CiAgICB2YXIgdmFsdWUgPSB0aGlzW2tleSA9IGhhc2hLZXkoa2V5LCB0aGlzLm5leHRVaWQpXTsKICAgIGRlbGV0ZSB0aGlzW2tleV07CiAgICByZXR1cm4gdmFsdWU7CiAgfQp9OwoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbW9kdWxlIG5nCiAqIEBuYW1lIGFuZ3VsYXIuaW5qZWN0b3IKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZXMgYW4gaW5qZWN0b3IgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCBmb3IgcmV0cmlldmluZyBzZXJ2aWNlcyBhcyB3ZWxsIGFzIGZvcgogKiBkZXBlbmRlbmN5IGluamVjdGlvbiAoc2VlIHtAbGluayBndWlkZS9kaSBkZXBlbmRlbmN5IGluamVjdGlvbn0pLgogKgoKICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWUKICogICAgICAgIHtAbGluayBhbmd1bGFyLm1vZHVsZX0uIFRoZSBgbmdgIG1vZHVsZSBtdXN0IGJlIGV4cGxpY2l0bHkgYWRkZWQuCiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBJbmplY3RvciBmdW5jdGlvbi4gU2VlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LgogKgogKiBAZXhhbXBsZQogKiBUeXBpY2FsIHVzYWdlCiAqIGBgYGpzCiAqICAgLy8gY3JlYXRlIGFuIGluamVjdG9yCiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZyddKTsKICoKICogICAvLyB1c2UgdGhlIGluamVjdG9yIHRvIGtpY2sgb2ZmIHlvdXIgYXBwbGljYXRpb24KICogICAvLyB1c2UgdGhlIHR5cGUgaW5mZXJlbmNlIHRvIGF1dG8gaW5qZWN0IGFyZ3VtZW50cywgb3IgdXNlIGltcGxpY2l0IGluamVjdGlvbgogKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJHJvb3RTY29wZSwgJGNvbXBpbGUsICRkb2N1bWVudCkgewogKiAgICAgJGNvbXBpbGUoJGRvY3VtZW50KSgkcm9vdFNjb3BlKTsKICogICAgICRyb290U2NvcGUuJGRpZ2VzdCgpOwogKiAgIH0pOwogKiBgYGAKICoKICogU29tZXRpbWVzIHlvdSB3YW50IHRvIGdldCBhY2Nlc3MgdG8gdGhlIGluamVjdG9yIG9mIGEgY3VycmVudGx5IHJ1bm5pbmcgQW5ndWxhciBhcHAKICogZnJvbSBvdXRzaWRlIEFuZ3VsYXIuIFBlcmhhcHMsIHlvdSB3YW50IHRvIGluamVjdCBhbmQgY29tcGlsZSBzb21lIG1hcmt1cCBhZnRlciB0aGUKICogYXBwbGljYXRpb24gaGFzIGJlZW4gYm9vdHN0cmFwcGVkLiBZb3UgY2FuIGRvIHRoaXMgdXNpbmcgdGhlIGV4dHJhIGBpbmplY3RvcigpYCBhZGRlZAogKiB0byBKUXVlcnkvanFMaXRlIGVsZW1lbnRzLiBTZWUge0BsaW5rIGFuZ3VsYXIuZWxlbWVudH0uCiAqCiAqICpUaGlzIGlzIGZhaXJseSByYXJlIGJ1dCBjb3VsZCBiZSB0aGUgY2FzZSBpZiBhIHRoaXJkIHBhcnR5IGxpYnJhcnkgaXMgaW5qZWN0aW5nIHRoZQogKiBtYXJrdXAuKgogKgogKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgYSBuZXcgYmxvY2sgb2YgSFRNTCBjb250YWluaW5nIGEgYG5nLWNvbnRyb2xsZXJgCiAqIGRpcmVjdGl2ZSBpcyBhZGRlZCB0byB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudCBib2R5IGJ5IEpRdWVyeS4gV2UgdGhlbiBjb21waWxlIGFuZCBsaW5rCiAqIGl0IGludG8gdGhlIGN1cnJlbnQgQW5ndWxhckpTIHNjb3BlLgogKgogKiBgYGBqcwogKiB2YXIgJGRpdiA9ICQoJzxkaXYgbmctY29udHJvbGxlcj0iTXlDdHJsIj57e2NvbnRlbnQubGFiZWx9fTwvZGl2PicpOwogKiAkKGRvY3VtZW50LmJvZHkpLmFwcGVuZCgkZGl2KTsKICoKICogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5pbmplY3RvcigpLmludm9rZShmdW5jdGlvbigkY29tcGlsZSkgewogKiAgIHZhciBzY29wZSA9IGFuZ3VsYXIuZWxlbWVudCgkZGl2KS5zY29wZSgpOwogKiAgICRjb21waWxlKCRkaXYpKHNjb3BlKTsKICogfSk7CiAqIGBgYAogKi8KCgovKioKICogQG5nZG9jIG1vZHVsZQogKiBAbmFtZSBhdXRvCiAqIEBkZXNjcmlwdGlvbgogKgogKiBJbXBsaWNpdCBtb2R1bGUgd2hpY2ggZ2V0cyBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIGVhY2gge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uCiAqLwoKdmFyIEZOX0FSR1MgPSAvXmZ1bmN0aW9uXHMqW15cKF0qXChccyooW15cKV0qKVwpL207CnZhciBGTl9BUkdfU1BMSVQgPSAvLC87CnZhciBGTl9BUkcgPSAvXlxzKihfPykoXFMrPylcMVxzKiQvOwp2YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcL1wvLiokKXwoXC9cKltcc1xTXSo/XCpcLykpL21nOwp2YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTsKCmZ1bmN0aW9uIGFub25GbihmbikgewogIC8vIEZvciBhbm9ueW1vdXMgZnVuY3Rpb25zLCBzaG93aW5nIGF0IHRoZSB2ZXJ5IGxlYXN0IHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgY2FuIGhlbHAgaW4KICAvLyBkZWJ1Z2dpbmcuCiAgdmFyIGZuVGV4dCA9IGZuLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpLAogICAgICBhcmdzID0gZm5UZXh0Lm1hdGNoKEZOX0FSR1MpOwogIGlmIChhcmdzKSB7CiAgICByZXR1cm4gJ2Z1bmN0aW9uKCcgKyAoYXJnc1sxXSB8fCAnJykucmVwbGFjZSgvW1xzXHJcbl0rLywgJyAnKSArICcpJzsKICB9CiAgcmV0dXJuICdmbic7Cn0KCmZ1bmN0aW9uIGFubm90YXRlKGZuLCBzdHJpY3REaSwgbmFtZSkgewogIHZhciAkaW5qZWN0LAogICAgICBmblRleHQsCiAgICAgIGFyZ0RlY2wsCiAgICAgIGxhc3Q7CgogIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHsKICAgIGlmICghKCRpbmplY3QgPSBmbi4kaW5qZWN0KSkgewogICAgICAkaW5qZWN0ID0gW107CiAgICAgIGlmIChmbi5sZW5ndGgpIHsKICAgICAgICBpZiAoc3RyaWN0RGkpIHsKICAgICAgICAgIGlmICghaXNTdHJpbmcobmFtZSkgfHwgIW5hbWUpIHsKICAgICAgICAgICAgbmFtZSA9IGZuLm5hbWUgfHwgYW5vbkZuKGZuKTsKICAgICAgICAgIH0KICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignc3RyaWN0ZGknLAogICAgICAgICAgICAnezB9IGlzIG5vdCB1c2luZyBleHBsaWNpdCBhbm5vdGF0aW9uIGFuZCBjYW5ub3QgYmUgaW52b2tlZCBpbiBzdHJpY3QgbW9kZScsIG5hbWUpOwogICAgICAgIH0KICAgICAgICBmblRleHQgPSBmbi50b1N0cmluZygpLnJlcGxhY2UoU1RSSVBfQ09NTUVOVFMsICcnKTsKICAgICAgICBhcmdEZWNsID0gZm5UZXh0Lm1hdGNoKEZOX0FSR1MpOwogICAgICAgIGZvckVhY2goYXJnRGVjbFsxXS5zcGxpdChGTl9BUkdfU1BMSVQpLCBmdW5jdGlvbihhcmcpIHsKICAgICAgICAgIGFyZy5yZXBsYWNlKEZOX0FSRywgZnVuY3Rpb24oYWxsLCB1bmRlcnNjb3JlLCBuYW1lKSB7CiAgICAgICAgICAgICRpbmplY3QucHVzaChuYW1lKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIGZuLiRpbmplY3QgPSAkaW5qZWN0OwogICAgfQogIH0gZWxzZSBpZiAoaXNBcnJheShmbikpIHsKICAgIGxhc3QgPSBmbi5sZW5ndGggLSAxOwogICAgYXNzZXJ0QXJnRm4oZm5bbGFzdF0sICdmbicpOwogICAgJGluamVjdCA9IGZuLnNsaWNlKDAsIGxhc3QpOwogIH0gZWxzZSB7CiAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJywgdHJ1ZSk7CiAgfQogIHJldHVybiAkaW5qZWN0Owp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkaW5qZWN0b3IKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIGAkaW5qZWN0b3JgIGlzIHVzZWQgdG8gcmV0cmlldmUgb2JqZWN0IGluc3RhbmNlcyBhcyBkZWZpbmVkIGJ5CiAqIHtAbGluayBhdXRvLiRwcm92aWRlIHByb3ZpZGVyfSwgaW5zdGFudGlhdGUgdHlwZXMsIGludm9rZSBtZXRob2RzLAogKiBhbmQgbG9hZCBtb2R1bGVzLgogKgogKiBUaGUgZm9sbG93aW5nIGFsd2F5cyBob2xkcyB0cnVlOgogKgogKiBgYGBqcwogKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKCk7CiAqICAgZXhwZWN0KCRpbmplY3Rvci5nZXQoJyRpbmplY3RvcicpKS50b0JlKCRpbmplY3Rvcik7CiAqICAgZXhwZWN0KCRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGluamVjdG9yKSB7CiAqICAgICByZXR1cm4gJGluamVjdG9yOwogKiAgIH0pLnRvQmUoJGluamVjdG9yKTsKICogYGBgCiAqCiAqICMgSW5qZWN0aW9uIEZ1bmN0aW9uIEFubm90YXRpb24KICoKICogSmF2YVNjcmlwdCBkb2VzIG5vdCBoYXZlIGFubm90YXRpb25zLCBhbmQgYW5ub3RhdGlvbnMgYXJlIG5lZWRlZCBmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb24uIFRoZQogKiBmb2xsb3dpbmcgYXJlIGFsbCB2YWxpZCB3YXlzIG9mIGFubm90YXRpbmcgZnVuY3Rpb24gd2l0aCBpbmplY3Rpb24gYXJndW1lbnRzIGFuZCBhcmUgZXF1aXZhbGVudC4KICoKICogYGBganMKICogICAvLyBpbmZlcnJlZCAob25seSB3b3JrcyBpZiBjb2RlIG5vdCBtaW5pZmllZC9vYmZ1c2NhdGVkKQogKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oc2VydmljZUEpe30pOwogKgogKiAgIC8vIGFubm90YXRlZAogKiAgIGZ1bmN0aW9uIGV4cGxpY2l0KHNlcnZpY2VBKSB7fTsKICogICBleHBsaWNpdC4kaW5qZWN0ID0gWydzZXJ2aWNlQSddOwogKiAgICRpbmplY3Rvci5pbnZva2UoZXhwbGljaXQpOwogKgogKiAgIC8vIGlubGluZQogKiAgICRpbmplY3Rvci5pbnZva2UoWydzZXJ2aWNlQScsIGZ1bmN0aW9uKHNlcnZpY2VBKXt9XSk7CiAqIGBgYAogKgogKiAjIyBJbmZlcmVuY2UKICoKICogSW4gSmF2YVNjcmlwdCBjYWxsaW5nIGB0b1N0cmluZygpYCBvbiBhIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24uIFRoZSBkZWZpbml0aW9uCiAqIGNhbiB0aGVuIGJlIHBhcnNlZCBhbmQgdGhlIGZ1bmN0aW9uIGFyZ3VtZW50cyBjYW4gYmUgZXh0cmFjdGVkLiAqTk9URToqIFRoaXMgZG9lcyBub3Qgd29yayB3aXRoCiAqIG1pbmlmaWNhdGlvbiwgYW5kIG9iZnVzY2F0aW9uIHRvb2xzIHNpbmNlIHRoZXNlIHRvb2xzIGNoYW5nZSB0aGUgYXJndW1lbnQgbmFtZXMuCiAqCiAqICMjIGAkaW5qZWN0YCBBbm5vdGF0aW9uCiAqIEJ5IGFkZGluZyBhbiBgJGluamVjdGAgcHJvcGVydHkgb250byBhIGZ1bmN0aW9uIHRoZSBpbmplY3Rpb24gcGFyYW1ldGVycyBjYW4gYmUgc3BlY2lmaWVkLgogKgogKiAjIyBJbmxpbmUKICogQXMgYW4gYXJyYXkgb2YgaW5qZWN0aW9uIG5hbWVzLCB3aGVyZSB0aGUgbGFzdCBpdGVtIGluIHRoZSBhcnJheSBpcyB0aGUgZnVuY3Rpb24gdG8gY2FsbC4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSAkaW5qZWN0b3IjZ2V0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBSZXR1cm4gYW4gaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZSB0byByZXRyaWV2ZS4KICogQHJldHVybiB7Kn0gVGhlIGluc3RhbmNlLgogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRpbmplY3RvciNpbnZva2UKICoKICogQGRlc2NyaXB0aW9uCiAqIEludm9rZSB0aGUgbWV0aG9kIGFuZCBzdXBwbHkgdGhlIG1ldGhvZCBhcmd1bWVudHMgZnJvbSB0aGUgYCRpbmplY3RvcmAuCiAqCiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLiBGdW5jdGlvbiBwYXJhbWV0ZXJzIGFyZSBpbmplY3RlZCBhY2NvcmRpbmcgdG8gdGhlCiAqICAge0BsaW5rIGd1aWRlL2RpICRpbmplY3QgQW5ub3RhdGlvbn0gcnVsZXMuCiAqIEBwYXJhbSB7T2JqZWN0PX0gc2VsZiBUaGUgYHRoaXNgIGZvciB0aGUgaW52b2tlZCBtZXRob2QuCiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpcwogKiAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLgogKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBpbnZva2VkIGBmbmAgZnVuY3Rpb24uCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgJGluamVjdG9yI2hhcwogKgogKiBAZGVzY3JpcHRpb24KICogQWxsb3dzIHRoZSB1c2VyIHRvIHF1ZXJ5IGlmIHRoZSBwYXJ0aWN1bGFyIHNlcnZpY2UgZXhpc3RzLgogKgogKiBAcGFyYW0ge3N0cmluZ30gTmFtZSBvZiB0aGUgc2VydmljZSB0byBxdWVyeS4KICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybnMgdHJ1ZSBpZiBpbmplY3RvciBoYXMgZ2l2ZW4gc2VydmljZS4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSAkaW5qZWN0b3IjaW5zdGFudGlhdGUKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIGludm9rZXMgdGhlIG5ldwogKiBvcGVyYXRvciwgYW5kIHN1cHBsaWVzIGFsbCBvZiB0aGUgYXJndW1lbnRzIHRvIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBhcyBzcGVjaWZpZWQgYnkgdGhlCiAqIGNvbnN0cnVjdG9yIGFubm90YXRpb24uCiAqCiAqIEBwYXJhbSB7RnVuY3Rpb259IFR5cGUgQW5ub3RhdGVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLgogKiBAcGFyYW0ge09iamVjdD19IGxvY2FscyBPcHRpb25hbCBvYmplY3QuIElmIHByZXNldCB0aGVuIGFueSBhcmd1bWVudCBuYW1lcyBhcmUgcmVhZCBmcm9tIHRoaXMKICogb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC4KICogQHJldHVybnMge09iamVjdH0gbmV3IGluc3RhbmNlIG9mIGBUeXBlYC4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSAkaW5qZWN0b3IjYW5ub3RhdGUKICoKICogQGRlc2NyaXB0aW9uCiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VydmljZSBuYW1lcyB3aGljaCB0aGUgZnVuY3Rpb24gaXMgcmVxdWVzdGluZyBmb3IgaW5qZWN0aW9uLiBUaGlzIEFQSSBpcwogKiB1c2VkIGJ5IHRoZSBpbmplY3RvciB0byBkZXRlcm1pbmUgd2hpY2ggc2VydmljZXMgbmVlZCB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBmdW5jdGlvbiB3aGVuIHRoZQogKiBmdW5jdGlvbiBpcyBpbnZva2VkLiBUaGVyZSBhcmUgdGhyZWUgd2F5cyBpbiB3aGljaCB0aGUgZnVuY3Rpb24gY2FuIGJlIGFubm90YXRlZCB3aXRoIHRoZSBuZWVkZWQKICogZGVwZW5kZW5jaWVzLgogKgogKiAjIEFyZ3VtZW50IG5hbWVzCiAqCiAqIFRoZSBzaW1wbGVzdCBmb3JtIGlzIHRvIGV4dHJhY3QgdGhlIGRlcGVuZGVuY2llcyBmcm9tIHRoZSBhcmd1bWVudHMgb2YgdGhlIGZ1bmN0aW9uLiBUaGlzIGlzIGRvbmUKICogYnkgY29udmVydGluZyB0aGUgZnVuY3Rpb24gaW50byBhIHN0cmluZyB1c2luZyBgdG9TdHJpbmcoKWAgbWV0aG9kIGFuZCBleHRyYWN0aW5nIHRoZSBhcmd1bWVudAogKiBuYW1lcy4KICogYGBganMKICogICAvLyBHaXZlbgogKiAgIGZ1bmN0aW9uIE15Q29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSkgewogKiAgICAgLy8gLi4uCiAqICAgfQogKgogKiAgIC8vIFRoZW4KICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7CiAqIGBgYAogKgogKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCB3b3JrIHdpdGggY29kZSBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbi4gRm9yIHRoaXMgcmVhc29uIHRoZSBmb2xsb3dpbmcKICogYW5ub3RhdGlvbiBzdHJhdGVnaWVzIGFyZSBzdXBwb3J0ZWQuCiAqCiAqICMgVGhlIGAkaW5qZWN0YCBwcm9wZXJ0eQogKgogKiBJZiBhIGZ1bmN0aW9uIGhhcyBhbiBgJGluamVjdGAgcHJvcGVydHkgYW5kIGl0cyB2YWx1ZSBpcyBhbiBhcnJheSBvZiBzdHJpbmdzLCB0aGVuIHRoZSBzdHJpbmdzCiAqIHJlcHJlc2VudCBuYW1lcyBvZiBzZXJ2aWNlcyB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBmdW5jdGlvbi4KICogYGBganMKICogICAvLyBHaXZlbgogKiAgIHZhciBNeUNvbnRyb2xsZXIgPSBmdW5jdGlvbihvYmZ1c2NhdGVkU2NvcGUsIG9iZnVzY2F0ZWRSb3V0ZSkgewogKiAgICAgLy8gLi4uCiAqICAgfQogKiAgIC8vIERlZmluZSBmdW5jdGlvbiBkZXBlbmRlbmNpZXMKICogICBNeUNvbnRyb2xsZXJbJyRpbmplY3QnXSA9IFsnJHNjb3BlJywgJyRyb3V0ZSddOwogKgogKiAgIC8vIFRoZW4KICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7CiAqIGBgYAogKgogKiAjIFRoZSBhcnJheSBub3RhdGlvbgogKgogKiBJdCBpcyBvZnRlbiBkZXNpcmFibGUgdG8gaW5saW5lIEluamVjdGVkIGZ1bmN0aW9ucyBhbmQgdGhhdCdzIHdoZW4gc2V0dGluZyB0aGUgYCRpbmplY3RgIHByb3BlcnR5CiAqIGlzIHZlcnkgaW5jb252ZW5pZW50LiBJbiB0aGVzZSBzaXR1YXRpb25zIHVzaW5nIHRoZSBhcnJheSBub3RhdGlvbiB0byBzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgaW4KICogYSB3YXkgdGhhdCBzdXJ2aXZlcyBtaW5pZmljYXRpb24gaXMgYSBiZXR0ZXIgY2hvaWNlOgogKgogKiBgYGBqcwogKiAgIC8vIFdlIHdpc2ggdG8gd3JpdGUgdGhpcyAobm90IG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uIHNhZmUpCiAqICAgaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRjb21waWxlLCAkcm9vdFNjb3BlKSB7CiAqICAgICAvLyAuLi4KICogICB9KTsKICoKICogICAvLyBXZSBhcmUgZm9yY2VkIHRvIHdyaXRlIGJyZWFrIGlubGluaW5nCiAqICAgdmFyIHRtcEZuID0gZnVuY3Rpb24ob2JmdXNjYXRlZENvbXBpbGUsIG9iZnVzY2F0ZWRSb290U2NvcGUpIHsKICogICAgIC8vIC4uLgogKiAgIH07CiAqICAgdG1wRm4uJGluamVjdCA9IFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZSddOwogKiAgIGluamVjdG9yLmludm9rZSh0bXBGbik7CiAqCiAqICAgLy8gVG8gYmV0dGVyIHN1cHBvcnQgaW5saW5lIGZ1bmN0aW9uIHRoZSBpbmxpbmUgYW5ub3RhdGlvbiBpcyBzdXBwb3J0ZWQKICogICBpbmplY3Rvci5pbnZva2UoWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmQ29tcGlsZSwgb2JmUm9vdFNjb3BlKSB7CiAqICAgICAvLyAuLi4KICogICB9XSk7CiAqCiAqICAgLy8gVGhlcmVmb3JlCiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKAogKiAgICAgIFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKG9iZnVzXyRjb21waWxlLCBvYmZ1c18kcm9vdFNjb3BlKSB7fV0pCiAqICAgICkudG9FcXVhbChbJyRjb21waWxlJywgJyRyb290U2NvcGUnXSk7CiAqIGBgYAogKgogKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBGdW5jdGlvbiBmb3Igd2hpY2ggZGVwZW5kZW50IHNlcnZpY2UgbmFtZXMgbmVlZCB0bwogKiBiZSByZXRyaWV2ZWQgYXMgZGVzY3JpYmVkIGFib3ZlLgogKgogKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59IFRoZSBuYW1lcyBvZiB0aGUgc2VydmljZXMgd2hpY2ggdGhlIGZ1bmN0aW9uIHJlcXVpcmVzLgogKi8KCgoKCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkcHJvdmlkZQogKgogKiBAZGVzY3JpcHRpb24KICoKICogVGhlIHtAbGluayBhdXRvLiRwcm92aWRlICRwcm92aWRlfSBzZXJ2aWNlIGhhcyBhIG51bWJlciBvZiBtZXRob2RzIGZvciByZWdpc3RlcmluZyBjb21wb25lbnRzCiAqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBNYW55IG9mIHRoZXNlIGZ1bmN0aW9ucyBhcmUgYWxzbyBleHBvc2VkIG9uCiAqIHtAbGluayBhbmd1bGFyLk1vZHVsZX0uCiAqCiAqIEFuIEFuZ3VsYXIgKipzZXJ2aWNlKiogaXMgYSBzaW5nbGV0b24gb2JqZWN0IGNyZWF0ZWQgYnkgYSAqKnNlcnZpY2UgZmFjdG9yeSoqLiAgVGhlc2UgKipzZXJ2aWNlCiAqIGZhY3RvcmllcyoqIGFyZSBmdW5jdGlvbnMgd2hpY2gsIGluIHR1cm4sIGFyZSBjcmVhdGVkIGJ5IGEgKipzZXJ2aWNlIHByb3ZpZGVyKiouCiAqIFRoZSAqKnNlcnZpY2UgcHJvdmlkZXJzKiogYXJlIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucy4gV2hlbiBpbnN0YW50aWF0ZWQgdGhleSBtdXN0IGNvbnRhaW4gYQogKiBwcm9wZXJ0eSBjYWxsZWQgYCRnZXRgLCB3aGljaCBob2xkcyB0aGUgKipzZXJ2aWNlIGZhY3RvcnkqKiBmdW5jdGlvbi4KICoKICogV2hlbiB5b3UgcmVxdWVzdCBhIHNlcnZpY2UsIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSBpcyByZXNwb25zaWJsZSBmb3IgZmluZGluZyB0aGUKICogY29ycmVjdCAqKnNlcnZpY2UgcHJvdmlkZXIqKiwgaW5zdGFudGlhdGluZyBpdCBhbmQgdGhlbiBjYWxsaW5nIGl0cyBgJGdldGAgKipzZXJ2aWNlIGZhY3RvcnkqKgogKiBmdW5jdGlvbiB0byBnZXQgdGhlIGluc3RhbmNlIG9mIHRoZSAqKnNlcnZpY2UqKi4KICoKICogT2Z0ZW4gc2VydmljZXMgaGF2ZSBubyBjb25maWd1cmF0aW9uIG9wdGlvbnMgYW5kIHRoZXJlIGlzIG5vIG5lZWQgdG8gYWRkIG1ldGhvZHMgdG8gdGhlIHNlcnZpY2UKICogcHJvdmlkZXIuICBUaGUgcHJvdmlkZXIgd2lsbCBiZSBubyBtb3JlIHRoYW4gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aXRoIGEgYCRnZXRgIHByb3BlcnR5LiBGb3IKICogdGhlc2UgY2FzZXMgdGhlIHtAbGluayBhdXRvLiRwcm92aWRlICRwcm92aWRlfSBzZXJ2aWNlIGhhcyBhZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzIHRvIHJlZ2lzdGVyCiAqIHNlcnZpY2VzIHdpdGhvdXQgc3BlY2lmeWluZyBhIHByb3ZpZGVyLgogKgogKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3Byb3ZpZGVyIHByb3ZpZGVyKHByb3ZpZGVyKX0gLSByZWdpc3RlcnMgYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiB3aXRoIHRoZQogKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0KICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNjb25zdGFudCBjb25zdGFudChvYmopfSAtIHJlZ2lzdGVycyBhIHZhbHVlL29iamVjdCB0aGF0IGNhbiBiZSBhY2Nlc3NlZCBieQogKiAgICAgcHJvdmlkZXJzIGFuZCBzZXJ2aWNlcy4KICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZShvYmopfSAtIHJlZ2lzdGVycyBhIHZhbHVlL29iamVjdCB0aGF0IGNhbiBvbmx5IGJlIGFjY2Vzc2VkIGJ5CiAqICAgICBzZXJ2aWNlcywgbm90IHByb3ZpZGVycy4KICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5IGZhY3RvcnkoZm4pfSAtIHJlZ2lzdGVycyBhIHNlcnZpY2UgKipmYWN0b3J5IGZ1bmN0aW9uKiosIGBmbmAsCiAqICAgICB0aGF0IHdpbGwgYmUgd3JhcHBlZCBpbiBhICoqc2VydmljZSBwcm92aWRlcioqIG9iamVjdCwgd2hvc2UgYCRnZXRgIHByb3BlcnR5IHdpbGwgY29udGFpbiB0aGUKICogICAgIGdpdmVuIGZhY3RvcnkgZnVuY3Rpb24uCiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSBzZXJ2aWNlKGNsYXNzKX0gLSByZWdpc3RlcnMgYSAqKmNvbnN0cnVjdG9yIGZ1bmN0aW9uKiosIGBjbGFzc2AKICogICAgIHRoYXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogb2JqZWN0LCB3aG9zZSBgJGdldGAgcHJvcGVydHkgd2lsbCBpbnN0YW50aWF0ZQogKiAgICAgIGEgbmV3IG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gY29uc3RydWN0b3IgZnVuY3Rpb24uCiAqCiAqIFNlZSB0aGUgaW5kaXZpZHVhbCBtZXRob2RzIGZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlcy4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSAkcHJvdmlkZSNwcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICoKICogUmVnaXN0ZXIgYSAqKnByb3ZpZGVyIGZ1bmN0aW9uKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIFByb3ZpZGVyIGZ1bmN0aW9ucwogKiBhcmUgY29uc3RydWN0b3IgZnVuY3Rpb25zLCB3aG9zZSBpbnN0YW5jZXMgYXJlIHJlc3BvbnNpYmxlIGZvciAicHJvdmlkaW5nIiBhIGZhY3RvcnkgZm9yIGEKICogc2VydmljZS4KICoKICogU2VydmljZSBwcm92aWRlciBuYW1lcyBzdGFydCB3aXRoIHRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRoZXkgcHJvdmlkZSBmb2xsb3dlZCBieSBgUHJvdmlkZXJgLgogKiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2UgaGFzIGEgcHJvdmlkZXIgY2FsbGVkCiAqIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfS4KICoKICogU2VydmljZSBwcm92aWRlciBvYmplY3RzIGNhbiBoYXZlIGFkZGl0aW9uYWwgbWV0aG9kcyB3aGljaCBhbGxvdyBjb25maWd1cmF0aW9uIG9mIHRoZSBwcm92aWRlcgogKiBhbmQgaXRzIHNlcnZpY2UuIEltcG9ydGFudGx5LCB5b3UgY2FuIGNvbmZpZ3VyZSB3aGF0IGtpbmQgb2Ygc2VydmljZSBpcyBjcmVhdGVkIGJ5IHRoZSBgJGdldGAKICogbWV0aG9kLCBvciBob3cgdGhhdCBzZXJ2aWNlIHdpbGwgYWN0LiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfSBoYXMgYQogKiBtZXRob2Qge0BsaW5rIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWQgZGVidWdFbmFibGVkfQogKiB3aGljaCBsZXRzIHlvdSBzcGVjaWZ5IHdoZXRoZXIgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2Ugd2lsbCBsb2cgZGVidWcgbWVzc2FnZXMgdG8gdGhlCiAqIGNvbnNvbGUgb3Igbm90LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuIE5PVEU6IHRoZSBwcm92aWRlciB3aWxsIGJlIGF2YWlsYWJsZSB1bmRlciBgbmFtZSArCiAgICAgICAgICAgICAgICAgICAgICAgICdQcm92aWRlcidgIGtleS4KICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKCkpfSBwcm92aWRlciBJZiB0aGUgcHJvdmlkZXIgaXM6CiAqCiAqICAgLSBgT2JqZWN0YDogdGhlbiBpdCBzaG91bGQgaGF2ZSBhIGAkZ2V0YCBtZXRob2QuIFRoZSBgJGdldGAgbWV0aG9kIHdpbGwgYmUgaW52b2tlZCB1c2luZwogKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSAkaW5qZWN0b3IuaW52b2tlKCl9IHdoZW4gYW4gaW5zdGFuY2UgbmVlZHMgdG8gYmUgY3JlYXRlZC4KICogICAtIGBDb25zdHJ1Y3RvcmA6IGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcm92aWRlciB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcKICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnN0YW50aWF0ZSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoKX0sIHRoZW4gdHJlYXRlZCBhcyBgb2JqZWN0YC4KICoKICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZQoKICogQGV4YW1wbGUKICoKICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjcmVhdGUgYSBzaW1wbGUgZXZlbnQgdHJhY2tpbmcgc2VydmljZSBhbmQgcmVnaXN0ZXIgaXQgdXNpbmcKICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uCiAqCiAqIGBgYGpzCiAqICAvLyBEZWZpbmUgdGhlIGV2ZW50VHJhY2tlciBwcm92aWRlcgogKiAgZnVuY3Rpb24gRXZlbnRUcmFja2VyUHJvdmlkZXIoKSB7CiAqICAgIHZhciB0cmFja2luZ1VybCA9ICcvdHJhY2snOwogKgogKiAgICAvLyBBIHByb3ZpZGVyIG1ldGhvZCBmb3IgY29uZmlndXJpbmcgd2hlcmUgdGhlIHRyYWNrZWQgZXZlbnRzIHNob3VsZCBiZWVuIHNhdmVkCiAqICAgIHRoaXMuc2V0VHJhY2tpbmdVcmwgPSBmdW5jdGlvbih1cmwpIHsKICogICAgICB0cmFja2luZ1VybCA9IHVybDsKICogICAgfTsKICoKICogICAgLy8gVGhlIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvbgogKiAgICB0aGlzLiRnZXQgPSBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHsKICogICAgICB2YXIgdHJhY2tlZEV2ZW50cyA9IHt9OwogKiAgICAgIHJldHVybiB7CiAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gdHJhY2sgYW4gZXZlbnQKICogICAgICAgIGV2ZW50OiBmdW5jdGlvbihldmVudCkgewogKiAgICAgICAgICB2YXIgY291bnQgPSB0cmFja2VkRXZlbnRzW2V2ZW50XSB8fCAwOwogKiAgICAgICAgICBjb3VudCArPSAxOwogKiAgICAgICAgICB0cmFja2VkRXZlbnRzW2V2ZW50XSA9IGNvdW50OwogKiAgICAgICAgICByZXR1cm4gY291bnQ7CiAqICAgICAgICB9LAogKiAgICAgICAgLy8gQ2FsbCB0aGlzIHRvIHNhdmUgdGhlIHRyYWNrZWQgZXZlbnRzIHRvIHRoZSB0cmFja2luZ1VybAogKiAgICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7CiAqICAgICAgICAgICRodHRwLnBvc3QodHJhY2tpbmdVcmwsIHRyYWNrZWRFdmVudHMpOwogKiAgICAgICAgfQogKiAgICAgIH07CiAqICAgIH1dOwogKiAgfQogKgogKiAgZGVzY3JpYmUoJ2V2ZW50VHJhY2tlcicsIGZ1bmN0aW9uKCkgewogKiAgICB2YXIgcG9zdFNweTsKICoKICogICAgYmVmb3JlRWFjaChtb2R1bGUoZnVuY3Rpb24oJHByb3ZpZGUpIHsKICogICAgICAvLyBSZWdpc3RlciB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyCiAqICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJ2V2ZW50VHJhY2tlcicsIEV2ZW50VHJhY2tlclByb3ZpZGVyKTsKICogICAgfSkpOwogKgogKiAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbihldmVudFRyYWNrZXJQcm92aWRlcikgewogKiAgICAgIC8vIENvbmZpZ3VyZSBldmVudFRyYWNrZXIgcHJvdmlkZXIKICogICAgICBldmVudFRyYWNrZXJQcm92aWRlci5zZXRUcmFja2luZ1VybCgnL2N1c3RvbS10cmFjaycpOwogKiAgICB9KSk7CiAqCiAqICAgIGl0KCd0cmFja3MgZXZlbnRzJywgaW5qZWN0KGZ1bmN0aW9uKGV2ZW50VHJhY2tlcikgewogKiAgICAgIGV4cGVjdChldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJykpLnRvRXF1YWwoMSk7CiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgyKTsKICogICAgfSkpOwogKgogKiAgICBpdCgnc2F2ZXMgdG8gdGhlIHRyYWNraW5nIHVybCcsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIsICRodHRwKSB7CiAqICAgICAgcG9zdFNweSA9IHNweU9uKCRodHRwLCAncG9zdCcpOwogKiAgICAgIGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKTsKICogICAgICBldmVudFRyYWNrZXIuc2F2ZSgpOwogKiAgICAgIGV4cGVjdChwb3N0U3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7CiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkubm90LnRvRXF1YWwoJy90cmFjaycpOwogKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLnRvRXF1YWwoJy9jdXN0b20tdHJhY2snKTsKICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzFdKS50b0VxdWFsKHsgJ2xvZ2luJzogMSB9KTsKICogICAgfSkpOwogKiAgfSk7CiAqIGBgYAogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRwcm92aWRlI2ZhY3RvcnkKICogQGRlc2NyaXB0aW9uCiAqCiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGZhY3RvcnkqKiwgd2hpY2ggd2lsbCBiZSBjYWxsZWQgdG8gcmV0dXJuIHRoZSBzZXJ2aWNlIGluc3RhbmNlLgogKiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzIHByb3ZpZGVyIGNvbnNpc3RzIG9mIG9ubHkgYSBgJGdldGAgcHJvcGVydHksCiAqIHdoaWNoIGlzIHRoZSBnaXZlbiBzZXJ2aWNlIGZhY3RvcnkgZnVuY3Rpb24uCiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeShnZXRGbil9IGlmIHlvdSBkbyBub3QgbmVlZCB0bwogKiBjb25maWd1cmUgeW91ciBzZXJ2aWNlIGluIGEgcHJvdmlkZXIuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4KICogQHBhcmFtIHtmdW5jdGlvbigpfSAkZ2V0Rm4gVGhlICRnZXRGbiBmb3IgdGhlIGluc3RhbmNlIGNyZWF0aW9uLiBJbnRlcm5hbGx5IHRoaXMgaXMgYSBzaG9ydCBoYW5kCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBgJHByb3ZpZGUucHJvdmlkZXIobmFtZSwgeyRnZXQ6ICRnZXRGbn0pYC4KICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZQogKgogKiBAZXhhbXBsZQogKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlCiAqIGBgYGpzCiAqICAgJHByb3ZpZGUuZmFjdG9yeSgncGluZycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkgewogKiAgICAgcmV0dXJuIGZ1bmN0aW9uIHBpbmcoKSB7CiAqICAgICAgIHJldHVybiAkaHR0cC5zZW5kKCcvcGluZycpOwogKiAgICAgfTsKICogICB9XSk7CiAqIGBgYAogKiBZb3Ugd291bGQgdGhlbiBpbmplY3QgYW5kIHVzZSB0aGlzIHNlcnZpY2UgbGlrZSB0aGlzOgogKiBgYGBqcwogKiAgIHNvbWVNb2R1bGUuY29udHJvbGxlcignQ3RybCcsIFsncGluZycsIGZ1bmN0aW9uKHBpbmcpIHsKICogICAgIHBpbmcoKTsKICogICB9XSk7CiAqIGBgYAogKi8KCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSAkcHJvdmlkZSNzZXJ2aWNlCiAqIEBkZXNjcmlwdGlvbgogKgogKiBSZWdpc3RlciBhICoqc2VydmljZSBjb25zdHJ1Y3RvcioqLCB3aGljaCB3aWxsIGJlIGludm9rZWQgd2l0aCBgbmV3YCB0byBjcmVhdGUgdGhlIHNlcnZpY2UKICogaW5zdGFuY2UuCiAqIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHMgcHJvdmlkZXIncyBgJGdldGAgcHJvcGVydHkgaXMgdGhlIHNlcnZpY2UKICogY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gaW5zdGFudGlhdGUgdGhlIHNlcnZpY2UgaW5zdGFuY2UuCiAqCiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9IGlmIHlvdSBkZWZpbmUgeW91ciBzZXJ2aWNlCiAqIGFzIGEgdHlwZS9jbGFzcy4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBBIGNsYXNzIChjb25zdHJ1Y3RvciBmdW5jdGlvbikgdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC4KICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZQogKgogKiBAZXhhbXBsZQogKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHVzaW5nCiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9LgogKiBgYGBqcwogKiAgIHZhciBQaW5nID0gZnVuY3Rpb24oJGh0dHApIHsKICogICAgIHRoaXMuJGh0dHAgPSAkaHR0cDsKICogICB9OwogKgogKiAgIFBpbmcuJGluamVjdCA9IFsnJGh0dHAnXTsKICoKICogICBQaW5nLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oKSB7CiAqICAgICByZXR1cm4gdGhpcy4kaHR0cC5nZXQoJy9waW5nJyk7CiAqICAgfTsKICogICAkcHJvdmlkZS5zZXJ2aWNlKCdwaW5nJywgUGluZyk7CiAqIGBgYAogKiBZb3Ugd291bGQgdGhlbiBpbmplY3QgYW5kIHVzZSB0aGlzIHNlcnZpY2UgbGlrZSB0aGlzOgogKiBgYGBqcwogKiAgIHNvbWVNb2R1bGUuY29udHJvbGxlcignQ3RybCcsIFsncGluZycsIGZ1bmN0aW9uKHBpbmcpIHsKICogICAgIHBpbmcuc2VuZCgpOwogKiAgIH1dKTsKICogYGBgCiAqLwoKCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRwcm92aWRlI3ZhbHVlCiAqIEBkZXNjcmlwdGlvbgogKgogKiBSZWdpc3RlciBhICoqdmFsdWUgc2VydmljZSoqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LCBzdWNoIGFzIGEgc3RyaW5nLCBhCiAqIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLiAgVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0cwogKiBwcm92aWRlcidzIGAkZ2V0YCBwcm9wZXJ0eSBpcyBhIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB0YWtlcyBubyBhcmd1bWVudHMgYW5kIHJldHVybnMgdGhlICoqdmFsdWUKICogc2VydmljZSoqLgogKgogKiBWYWx1ZSBzZXJ2aWNlcyBhcmUgc2ltaWxhciB0byBjb25zdGFudCBzZXJ2aWNlcywgZXhjZXB0IHRoYXQgdGhleSBjYW5ub3QgYmUgaW5qZWN0ZWQgaW50byBhCiAqIG1vZHVsZSBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIChzZWUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ30pIGJ1dCB0aGV5IGNhbiBiZSBvdmVycmlkZGVuIGJ5CiAqIGFuIEFuZ3VsYXIKICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4KICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUuCiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2UKICoKICogQGV4YW1wbGUKICogSGVyZSBhcmUgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyB2YWx1ZSBzZXJ2aWNlcy4KICogYGBganMKICogICAkcHJvdmlkZS52YWx1ZSgnQURNSU5fVVNFUicsICdhZG1pbicpOwogKgogKiAgICRwcm92aWRlLnZhbHVlKCdSb2xlTG9va3VwJywgeyBhZG1pbjogMCwgd3JpdGVyOiAxLCByZWFkZXI6IDIgfSk7CiAqCiAqICAgJHByb3ZpZGUudmFsdWUoJ2hhbGZPZicsIGZ1bmN0aW9uKHZhbHVlKSB7CiAqICAgICByZXR1cm4gdmFsdWUgLyAyOwogKiAgIH0pOwogKiBgYGAKICovCgoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgJHByb3ZpZGUjY29uc3RhbnQKICogQGRlc2NyaXB0aW9uCiAqCiAqIFJlZ2lzdGVyIGEgKipjb25zdGFudCBzZXJ2aWNlKiosIHN1Y2ggYXMgYSBzdHJpbmcsIGEgbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sCiAqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBVbmxpa2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgdmFsdWV9IGl0IGNhbiBiZQogKiBpbmplY3RlZCBpbnRvIGEgbW9kdWxlIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKHNlZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnfSkgYW5kIGl0IGNhbm5vdAogKiBiZSBvdmVycmlkZGVuIGJ5IGFuIEFuZ3VsYXIge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb25zdGFudC4KICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgY29uc3RhbnQgdmFsdWUuCiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgaW5zdGFuY2UKICoKICogQGV4YW1wbGUKICogSGVyZSBhIHNvbWUgZXhhbXBsZXMgb2YgY3JlYXRpbmcgY29uc3RhbnRzOgogKiBgYGBqcwogKiAgICRwcm92aWRlLmNvbnN0YW50KCdTSEFSRF9IRUlHSFQnLCAzMDYpOwogKgogKiAgICRwcm92aWRlLmNvbnN0YW50KCdNWV9DT0xPVVJTJywgWydyZWQnLCAnYmx1ZScsICdncmV5J10pOwogKgogKiAgICRwcm92aWRlLmNvbnN0YW50KCdkb3VibGUnLCBmdW5jdGlvbih2YWx1ZSkgewogKiAgICAgcmV0dXJuIHZhbHVlICogMjsKICogICB9KTsKICogYGBgCiAqLwoKCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRwcm92aWRlI2RlY29yYXRvcgogKiBAZGVzY3JpcHRpb24KICoKICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgZGVjb3JhdG9yKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIEEgc2VydmljZSBkZWNvcmF0b3IKICogaW50ZXJjZXB0cyB0aGUgY3JlYXRpb24gb2YgYSBzZXJ2aWNlLCBhbGxvd2luZyBpdCB0byBvdmVycmlkZSBvciBtb2RpZnkgdGhlIGJlaGF2aW91ciBvZiB0aGUKICogc2VydmljZS4gVGhlIG9iamVjdCByZXR1cm5lZCBieSB0aGUgZGVjb3JhdG9yIG1heSBiZSB0aGUgb3JpZ2luYWwgc2VydmljZSwgb3IgYSBuZXcgc2VydmljZQogKiBvYmplY3Qgd2hpY2ggcmVwbGFjZXMgb3Igd3JhcHMgYW5kIGRlbGVnYXRlcyB0byB0aGUgb3JpZ2luYWwgc2VydmljZS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZGVjb3JhdG9yIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIHNlcnZpY2UgbmVlZHMgdG8gYmUKICogICAgaW5zdGFudGlhdGVkIGFuZCBzaG91bGQgcmV0dXJuIHRoZSBkZWNvcmF0ZWQgc2VydmljZSBpbnN0YW5jZS4gVGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCB1c2luZwogKiAgICB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3Rvci5pbnZva2V9IG1ldGhvZCBhbmQgaXMgdGhlcmVmb3JlIGZ1bGx5IGluamVjdGFibGUuCiAqICAgIExvY2FsIGluamVjdGlvbiBhcmd1bWVudHM6CiAqCiAqICAgICogYCRkZWxlZ2F0ZWAgLSBUaGUgb3JpZ2luYWwgc2VydmljZSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIG1vbmtleSBwYXRjaGVkLCBjb25maWd1cmVkLAogKiAgICAgIGRlY29yYXRlZCBvciBkZWxlZ2F0ZWQgdG8uCiAqCiAqIEBleGFtcGxlCiAqIEhlcmUgd2UgZGVjb3JhdGUgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2UgdG8gY29udmVydCB3YXJuaW5ncyB0byBlcnJvcnMgYnkgaW50ZXJjZXB0aW5nCiAqIGNhbGxzIHRvIHtAbGluayBuZy4kbG9nI2Vycm9yICRsb2cud2FybigpfS4KICogYGBganMKICogICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRsb2cnLCBbJyRkZWxlZ2F0ZScsIGZ1bmN0aW9uKCRkZWxlZ2F0ZSkgewogKiAgICAgJGRlbGVnYXRlLndhcm4gPSAkZGVsZWdhdGUuZXJyb3I7CiAqICAgICByZXR1cm4gJGRlbGVnYXRlOwogKiAgIH1dKTsKICogYGBgCiAqLwoKCmZ1bmN0aW9uIGNyZWF0ZUluamVjdG9yKG1vZHVsZXNUb0xvYWQsIHN0cmljdERpKSB7CiAgc3RyaWN0RGkgPSAoc3RyaWN0RGkgPT09IHRydWUpOwogIHZhciBJTlNUQU5USUFUSU5HID0ge30sCiAgICAgIHByb3ZpZGVyU3VmZml4ID0gJ1Byb3ZpZGVyJywKICAgICAgcGF0aCA9IFtdLAogICAgICBsb2FkZWRNb2R1bGVzID0gbmV3IEhhc2hNYXAoW10sIHRydWUpLAogICAgICBwcm92aWRlckNhY2hlID0gewogICAgICAgICRwcm92aWRlOiB7CiAgICAgICAgICAgIHByb3ZpZGVyOiBzdXBwb3J0T2JqZWN0KHByb3ZpZGVyKSwKICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSwKICAgICAgICAgICAgc2VydmljZTogc3VwcG9ydE9iamVjdChzZXJ2aWNlKSwKICAgICAgICAgICAgdmFsdWU6IHN1cHBvcnRPYmplY3QodmFsdWUpLAogICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksCiAgICAgICAgICAgIGRlY29yYXRvcjogZGVjb3JhdG9yCiAgICAgICAgICB9CiAgICAgIH0sCiAgICAgIHByb3ZpZGVySW5qZWN0b3IgPSAocHJvdmlkZXJDYWNoZS4kaW5qZWN0b3IgPQogICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3Rvcihwcm92aWRlckNhY2hlLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCd1bnByJywgIlVua25vd24gcHJvdmlkZXI6IHswfSIsIHBhdGguam9pbignIDwtICcpKTsKICAgICAgICAgIH0sIHN0cmljdERpKSksCiAgICAgIGluc3RhbmNlQ2FjaGUgPSB7fSwKICAgICAgaW5zdGFuY2VJbmplY3RvciA9IChpbnN0YW5jZUNhY2hlLiRpbmplY3RvciA9CiAgICAgICAgICBjcmVhdGVJbnRlcm5hbEluamVjdG9yKGluc3RhbmNlQ2FjaGUsIGZ1bmN0aW9uKHNlcnZpY2VuYW1lKSB7CiAgICAgICAgICAgIHZhciBwcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VuYW1lICsgcHJvdmlkZXJTdWZmaXgpOwogICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UocHJvdmlkZXIuJGdldCwgcHJvdmlkZXIsIHVuZGVmaW5lZCwgc2VydmljZW5hbWUpOwogICAgICAgICAgfSwgc3RyaWN0RGkpKTsKCgogIGZvckVhY2gobG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCksIGZ1bmN0aW9uKGZuKSB7IGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGZuIHx8IG5vb3ApOyB9KTsKCiAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3I7CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vICRwcm92aWRlcgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICBmdW5jdGlvbiBzdXBwb3J0T2JqZWN0KGRlbGVnYXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgICBpZiAoaXNPYmplY3Qoa2V5KSkgewogICAgICAgIGZvckVhY2goa2V5LCByZXZlcnNlUGFyYW1zKGRlbGVnYXRlKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGRlbGVnYXRlKGtleSwgdmFsdWUpOwogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gcHJvdmlkZXIobmFtZSwgcHJvdmlkZXJfKSB7CiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnc2VydmljZScpOwogICAgaWYgKGlzRnVuY3Rpb24ocHJvdmlkZXJfKSB8fCBpc0FycmF5KHByb3ZpZGVyXykpIHsKICAgICAgcHJvdmlkZXJfID0gcHJvdmlkZXJJbmplY3Rvci5pbnN0YW50aWF0ZShwcm92aWRlcl8pOwogICAgfQogICAgaWYgKCFwcm92aWRlcl8uJGdldCkgewogICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3BnZXQnLCAiUHJvdmlkZXIgJ3swfScgbXVzdCBkZWZpbmUgJGdldCBmYWN0b3J5IG1ldGhvZC4iLCBuYW1lKTsKICAgIH0KICAgIHJldHVybiBwcm92aWRlckNhY2hlW25hbWUgKyBwcm92aWRlclN1ZmZpeF0gPSBwcm92aWRlcl87CiAgfQoKICBmdW5jdGlvbiBmYWN0b3J5KG5hbWUsIGZhY3RvcnlGbikgeyByZXR1cm4gcHJvdmlkZXIobmFtZSwgeyAkZ2V0OiBmYWN0b3J5Rm4gfSk7IH0KCiAgZnVuY3Rpb24gc2VydmljZShuYW1lLCBjb25zdHJ1Y3RvcikgewogICAgcmV0dXJuIGZhY3RvcnkobmFtZSwgWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHsKICAgICAgcmV0dXJuICRpbmplY3Rvci5pbnN0YW50aWF0ZShjb25zdHJ1Y3Rvcik7CiAgICB9XSk7CiAgfQoKICBmdW5jdGlvbiB2YWx1ZShuYW1lLCB2YWwpIHsgcmV0dXJuIGZhY3RvcnkobmFtZSwgdmFsdWVGbih2YWwpKTsgfQoKICBmdW5jdGlvbiBjb25zdGFudChuYW1lLCB2YWx1ZSkgewogICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2NvbnN0YW50Jyk7CiAgICBwcm92aWRlckNhY2hlW25hbWVdID0gdmFsdWU7CiAgICBpbnN0YW5jZUNhY2hlW25hbWVdID0gdmFsdWU7CiAgfQoKICBmdW5jdGlvbiBkZWNvcmF0b3Ioc2VydmljZU5hbWUsIGRlY29yRm4pIHsKICAgIHZhciBvcmlnUHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4KSwKICAgICAgICBvcmlnJGdldCA9IG9yaWdQcm92aWRlci4kZ2V0OwoKICAgIG9yaWdQcm92aWRlci4kZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBvcmlnSW5zdGFuY2UgPSBpbnN0YW5jZUluamVjdG9yLmludm9rZShvcmlnJGdldCwgb3JpZ1Byb3ZpZGVyKTsKICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGRlY29yRm4sIG51bGwsIHskZGVsZWdhdGU6IG9yaWdJbnN0YW5jZX0pOwogICAgfTsKICB9CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIE1vZHVsZSBMb2FkaW5nCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgZnVuY3Rpb24gbG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCl7CiAgICB2YXIgcnVuQmxvY2tzID0gW10sIG1vZHVsZUZuLCBpbnZva2VRdWV1ZTsKICAgIGZvckVhY2gobW9kdWxlc1RvTG9hZCwgZnVuY3Rpb24obW9kdWxlKSB7CiAgICAgIGlmIChsb2FkZWRNb2R1bGVzLmdldChtb2R1bGUpKSByZXR1cm47CiAgICAgIGxvYWRlZE1vZHVsZXMucHV0KG1vZHVsZSwgdHJ1ZSk7CgogICAgICBmdW5jdGlvbiBydW5JbnZva2VRdWV1ZShxdWV1ZSkgewogICAgICAgIHZhciBpLCBpaTsKICAgICAgICBmb3IoaSA9IDAsIGlpID0gcXVldWUubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgdmFyIGludm9rZUFyZ3MgPSBxdWV1ZVtpXSwKICAgICAgICAgICAgICBwcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KGludm9rZUFyZ3NbMF0pOwoKICAgICAgICAgIHByb3ZpZGVyW2ludm9rZUFyZ3NbMV1dLmFwcGx5KHByb3ZpZGVyLCBpbnZva2VBcmdzWzJdKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRyeSB7CiAgICAgICAgaWYgKGlzU3RyaW5nKG1vZHVsZSkpIHsKICAgICAgICAgIG1vZHVsZUZuID0gYW5ndWxhck1vZHVsZShtb2R1bGUpOwogICAgICAgICAgcnVuQmxvY2tzID0gcnVuQmxvY2tzLmNvbmNhdChsb2FkTW9kdWxlcyhtb2R1bGVGbi5yZXF1aXJlcykpLmNvbmNhdChtb2R1bGVGbi5fcnVuQmxvY2tzKTsKICAgICAgICAgIHJ1bkludm9rZVF1ZXVlKG1vZHVsZUZuLl9pbnZva2VRdWV1ZSk7CiAgICAgICAgICBydW5JbnZva2VRdWV1ZShtb2R1bGVGbi5fY29uZmlnQmxvY2tzKTsKICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24obW9kdWxlKSkgewogICAgICAgICAgICBydW5CbG9ja3MucHVzaChwcm92aWRlckluamVjdG9yLmludm9rZShtb2R1bGUpKTsKICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobW9kdWxlKSkgewogICAgICAgICAgICBydW5CbG9ja3MucHVzaChwcm92aWRlckluamVjdG9yLmludm9rZShtb2R1bGUpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYXNzZXJ0QXJnRm4obW9kdWxlLCAnbW9kdWxlJyk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgaWYgKGlzQXJyYXkobW9kdWxlKSkgewogICAgICAgICAgbW9kdWxlID0gbW9kdWxlW21vZHVsZS5sZW5ndGggLSAxXTsKICAgICAgICB9CiAgICAgICAgaWYgKGUubWVzc2FnZSAmJiBlLnN0YWNrICYmIGUuc3RhY2suaW5kZXhPZihlLm1lc3NhZ2UpID09IC0xKSB7CiAgICAgICAgICAvLyBTYWZhcmkgJiBGRidzIHN0YWNrIHRyYWNlcyBkb24ndCBjb250YWluIGVycm9yLm1lc3NhZ2UgY29udGVudAogICAgICAgICAgLy8gdW5saWtlIHRob3NlIG9mIENocm9tZSBhbmQgSUUKICAgICAgICAgIC8vIFNvIGlmIHN0YWNrIGRvZXNuJ3QgY29udGFpbiBtZXNzYWdlLCB3ZSBjcmVhdGUgYSBuZXcgc3RyaW5nIHRoYXQgY29udGFpbnMgYm90aC4KICAgICAgICAgIC8vIFNpbmNlIGVycm9yLnN0YWNrIGlzIHJlYWQtb25seSBpbiBTYWZhcmksIEknbSBvdmVycmlkaW5nIGUgYW5kIG5vdCBlLnN0YWNrIGhlcmUuCiAgICAgICAgICAvKiBqc2hpbnQgLVcwMjIgKi8KICAgICAgICAgIGUgPSBlLm1lc3NhZ2UgKyAnXG4nICsgZS5zdGFjazsKICAgICAgICB9CiAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdtb2R1bGVycicsICJGYWlsZWQgdG8gaW5zdGFudGlhdGUgbW9kdWxlIHswfSBkdWUgdG86XG57MX0iLAogICAgICAgICAgICAgICAgICBtb2R1bGUsIGUuc3RhY2sgfHwgZS5tZXNzYWdlIHx8IGUpOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBydW5CbG9ja3M7CiAgfQoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAvLyBpbnRlcm5hbCBJbmplY3RvcgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbEluamVjdG9yKGNhY2hlLCBmYWN0b3J5KSB7CgogICAgZnVuY3Rpb24gZ2V0U2VydmljZShzZXJ2aWNlTmFtZSkgewogICAgICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkoc2VydmljZU5hbWUpKSB7CiAgICAgICAgaWYgKGNhY2hlW3NlcnZpY2VOYW1lXSA9PT0gSU5TVEFOVElBVElORykgewogICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdjZGVwJywgJ0NpcmN1bGFyIGRlcGVuZGVuY3kgZm91bmQ6IHswfScsCiAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWUgKyAnIDwtICcgKyBwYXRoLmpvaW4oJyA8LSAnKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHBhdGgudW5zaGlmdChzZXJ2aWNlTmFtZSk7CiAgICAgICAgICBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBJTlNUQU5USUFUSU5HOwogICAgICAgICAgcmV0dXJuIGNhY2hlW3NlcnZpY2VOYW1lXSA9IGZhY3Rvcnkoc2VydmljZU5hbWUpOwogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgaWYgKGNhY2hlW3NlcnZpY2VOYW1lXSA9PT0gSU5TVEFOVElBVElORykgewogICAgICAgICAgICBkZWxldGUgY2FjaGVbc2VydmljZU5hbWVdOwogICAgICAgICAgfQogICAgICAgICAgdGhyb3cgZXJyOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBwYXRoLnNoaWZ0KCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaW52b2tlKGZuLCBzZWxmLCBsb2NhbHMsIHNlcnZpY2VOYW1lKSB7CiAgICAgIGlmICh0eXBlb2YgbG9jYWxzID09PSAnc3RyaW5nJykgewogICAgICAgIHNlcnZpY2VOYW1lID0gbG9jYWxzOwogICAgICAgIGxvY2FscyA9IG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBhcmdzID0gW10sCiAgICAgICAgICAkaW5qZWN0ID0gYW5ub3RhdGUoZm4sIHN0cmljdERpLCBzZXJ2aWNlTmFtZSksCiAgICAgICAgICBsZW5ndGgsIGksCiAgICAgICAgICBrZXk7CgogICAgICBmb3IoaSA9IDAsIGxlbmd0aCA9ICRpbmplY3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgICBrZXkgPSAkaW5qZWN0W2ldOwogICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykgewogICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdpdGtuJywKICAgICAgICAgICAgICAgICAgJ0luY29ycmVjdCBpbmplY3Rpb24gdG9rZW4hIEV4cGVjdGVkIHNlcnZpY2UgbmFtZSBhcyBzdHJpbmcsIGdvdCB7MH0nLCBrZXkpOwogICAgICAgIH0KICAgICAgICBhcmdzLnB1c2goCiAgICAgICAgICBsb2NhbHMgJiYgbG9jYWxzLmhhc093blByb3BlcnR5KGtleSkKICAgICAgICAgID8gbG9jYWxzW2tleV0KICAgICAgICAgIDogZ2V0U2VydmljZShrZXkpCiAgICAgICAgKTsKICAgICAgfQogICAgICBpZiAoaXNBcnJheShmbikpIHsKICAgICAgICBmbiA9IGZuW2xlbmd0aF07CiAgICAgIH0KCiAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXJqcy1pbnZva2UtYXBwbHktdnMtc3dpdGNoCiAgICAgIC8vICM1Mzg4CiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpbnN0YW50aWF0ZShUeXBlLCBsb2NhbHMsIHNlcnZpY2VOYW1lKSB7CiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge30sCiAgICAgICAgICBpbnN0YW5jZSwgcmV0dXJuZWRWYWx1ZTsKCiAgICAgIC8vIENoZWNrIGlmIFR5cGUgaXMgYW5ub3RhdGVkIGFuZCB1c2UganVzdCB0aGUgZ2l2ZW4gZnVuY3Rpb24gYXQgbi0xIGFzIHBhcmFtZXRlcgogICAgICAvLyBlLmcuIHNvbWVNb2R1bGUuZmFjdG9yeSgnZ3JlZXRlcicsIFsnJHdpbmRvdycsIGZ1bmN0aW9uKHJlbmFtZWQkd2luZG93KSB7fV0pOwogICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSAoaXNBcnJheShUeXBlKSA/IFR5cGVbVHlwZS5sZW5ndGggLSAxXSA6IFR5cGUpLnByb3RvdHlwZTsKICAgICAgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsKICAgICAgcmV0dXJuZWRWYWx1ZSA9IGludm9rZShUeXBlLCBpbnN0YW5jZSwgbG9jYWxzLCBzZXJ2aWNlTmFtZSk7CgogICAgICByZXR1cm4gaXNPYmplY3QocmV0dXJuZWRWYWx1ZSkgfHwgaXNGdW5jdGlvbihyZXR1cm5lZFZhbHVlKSA/IHJldHVybmVkVmFsdWUgOiBpbnN0YW5jZTsKICAgIH0KCiAgICByZXR1cm4gewogICAgICBpbnZva2U6IGludm9rZSwKICAgICAgaW5zdGFudGlhdGU6IGluc3RhbnRpYXRlLAogICAgICBnZXQ6IGdldFNlcnZpY2UsCiAgICAgIGFubm90YXRlOiBhbm5vdGF0ZSwKICAgICAgaGFzOiBmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSArIHByb3ZpZGVyU3VmZml4KSB8fCBjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTsKICAgICAgfQogICAgfTsKICB9Cn0KCmNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUgPSBhbm5vdGF0ZTsKCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSAkYW5jaG9yU2Nyb2xsCiAqIEBraW5kIGZ1bmN0aW9uCiAqIEByZXF1aXJlcyAkd2luZG93CiAqIEByZXF1aXJlcyAkbG9jYXRpb24KICogQHJlcXVpcmVzICRyb290U2NvcGUKICoKICogQGRlc2NyaXB0aW9uCiAqIFdoZW4gY2FsbGVkLCBpdCBjaGVja3MgY3VycmVudCB2YWx1ZSBvZiBgJGxvY2F0aW9uLmhhc2goKWAgYW5kIHNjcm9sbHMgdG8gdGhlIHJlbGF0ZWQgZWxlbWVudCwKICogYWNjb3JkaW5nIHRvIHJ1bGVzIHNwZWNpZmllZCBpbgogKiBbSHRtbDUgc3BlY10oaHR0cDovL2Rldi53My5vcmcvaHRtbDUvc3BlYy9PdmVydmlldy5odG1sI3RoZS1pbmRpY2F0ZWQtcGFydC1vZi10aGUtZG9jdW1lbnQpLgogKgogKiBJdCBhbHNvIHdhdGNoZXMgdGhlIGAkbG9jYXRpb24uaGFzaCgpYCBhbmQgc2Nyb2xscyB3aGVuZXZlciBpdCBjaGFuZ2VzIHRvIG1hdGNoIGFueSBhbmNob3IuCiAqIFRoaXMgY2FuIGJlIGRpc2FibGVkIGJ5IGNhbGxpbmcgYCRhbmNob3JTY3JvbGxQcm92aWRlci5kaXNhYmxlQXV0b1Njcm9sbGluZygpYC4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGUgbW9kdWxlPSJhbmNob3JTY3JvbGxFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxkaXYgaWQ9InNjcm9sbEFyZWEiIG5nLWNvbnRyb2xsZXI9IlNjcm9sbENvbnRyb2xsZXIiPgogICAgICAgICA8YSBuZy1jbGljaz0iZ290b0JvdHRvbSgpIj5HbyB0byBib3R0b208L2E+CiAgICAgICAgIDxhIGlkPSJib3R0b20iPjwvYT4gWW91J3JlIGF0IHRoZSBib3R0b20hCiAgICAgICA8L2Rpdj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxFeGFtcGxlJywgW10pCiAgICAgICAgIC5jb250cm9sbGVyKCdTY3JvbGxDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRhbmNob3JTY3JvbGwnLAogICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJGFuY2hvclNjcm9sbCkgewogICAgICAgICAgICAgJHNjb3BlLmdvdG9Cb3R0b20gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBsb2NhdGlvbi5oYXNoIHRvIHRoZSBpZCBvZgogICAgICAgICAgICAgICAvLyB0aGUgZWxlbWVudCB5b3Ugd2lzaCB0byBzY3JvbGwgdG8uCiAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdib3R0b20nKTsKCiAgICAgICAgICAgICAgIC8vIGNhbGwgJGFuY2hvclNjcm9sbCgpCiAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTsKICAgICAgICAgICAgIH07CiAgICAgICAgICAgfV0pOwogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgI3Njcm9sbEFyZWEgewogICAgICAgICBoZWlnaHQ6IDM1MHB4OwogICAgICAgICBvdmVyZmxvdzogYXV0bzsKICAgICAgIH0KCiAgICAgICAjYm90dG9tIHsKICAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgIG1hcmdpbi10b3A6IDIwMDBweDsKICAgICAgIH0KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCmZ1bmN0aW9uICRBbmNob3JTY3JvbGxQcm92aWRlcigpIHsKCiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTsKCiAgdGhpcy5kaXNhYmxlQXV0b1Njcm9sbGluZyA9IGZ1bmN0aW9uKCkgewogICAgYXV0b1Njcm9sbGluZ0VuYWJsZWQgPSBmYWxzZTsKICB9OwoKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkd2luZG93LCAkbG9jYXRpb24sICRyb290U2NvcGUpIHsKICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7CgogICAgLy8gaGVscGVyIGZ1bmN0aW9uIHRvIGdldCBmaXJzdCBhbmNob3IgZnJvbSBhIE5vZGVMaXN0CiAgICAvLyBjYW4ndCB1c2UgZmlsdGVyLmZpbHRlciwgYXMgaXQgYWNjZXB0cyBvbmx5IGluc3RhbmNlcyBvZiBBcnJheQogICAgLy8gYW5kIElFIGNhbid0IGNvbnZlcnQgTm9kZUxpc3QgdG8gYW4gYXJyYXkgdXNpbmcgW10uc2xpY2UKICAgIC8vIFRPRE8odm9qdGEpOiB1c2UgZmlsdGVyIGlmIHdlIGNoYW5nZSBpdCB0byBhY2NlcHQgbGlzdHMgYXMgd2VsbAogICAgZnVuY3Rpb24gZ2V0Rmlyc3RBbmNob3IobGlzdCkgewogICAgICB2YXIgcmVzdWx0ID0gbnVsbDsKICAgICAgZm9yRWFjaChsaXN0LCBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgaWYgKCFyZXN1bHQgJiYgbm9kZU5hbWVfKGVsZW1lbnQpID09PSAnYScpIHJlc3VsdCA9IGVsZW1lbnQ7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIGZ1bmN0aW9uIHNjcm9sbCgpIHsKICAgICAgdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpLCBlbG07CgogICAgICAvLyBlbXB0eSBoYXNoLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZQogICAgICBpZiAoIWhhc2gpICR3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7CgogICAgICAvLyBlbGVtZW50IHdpdGggZ2l2ZW4gaWQKICAgICAgZWxzZSBpZiAoKGVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2gpKSkgZWxtLnNjcm9sbEludG9WaWV3KCk7CgogICAgICAvLyBmaXJzdCBhbmNob3Igd2l0aCBnaXZlbiBuYW1lIDotRAogICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgZWxtLnNjcm9sbEludG9WaWV3KCk7CgogICAgICAvLyBubyBlbGVtZW50IGFuZCBoYXNoID09ICd0b3AnLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZQogICAgICBlbHNlIGlmIChoYXNoID09PSAndG9wJykgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTsKICAgIH0KCiAgICAvLyBkb2VzIG5vdCBzY3JvbGwgd2hlbiB1c2VyIGNsaWNrcyBvbiBhbmNob3IgbGluayB0aGF0IGlzIGN1cnJlbnRseSBvbgogICAgLy8gKG5vIHVybCBjaGFuZ2UsIG5vICRsb2NhdGlvbi5oYXNoKCkgY2hhbmdlKSwgYnJvd3NlciBuYXRpdmUgZG9lcyBzY3JvbGwKICAgIGlmIChhdXRvU2Nyb2xsaW5nRW5hYmxlZCkgewogICAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2goKSB7cmV0dXJuICRsb2NhdGlvbi5oYXNoKCk7fSwKICAgICAgICBmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2hBY3Rpb24oKSB7CiAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoc2Nyb2xsKTsKICAgICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gc2Nyb2xsOwogIH1dOwp9Cgp2YXIgJGFuaW1hdGVNaW5FcnIgPSBtaW5FcnIoJyRhbmltYXRlJyk7CgovKioKICogQG5nZG9jIHByb3ZpZGVyCiAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIKICoKICogQGRlc2NyaXB0aW9uCiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgJGFuaW1hdGUgdGhhdCBkb2Vzbid0IHBlcmZvcm0gYW55IGFuaW1hdGlvbnMsIGluc3RlYWQganVzdAogKiBzeW5jaHJvbm91c2x5IHBlcmZvcm1zIERPTQogKiB1cGRhdGVzIGFuZCBjYWxscyBkb25lKCkgY2FsbGJhY2tzLgogKgogKiBJbiBvcmRlciB0byBlbmFibGUgYW5pbWF0aW9ucyB0aGUgbmdBbmltYXRlIG1vZHVsZSBoYXMgdG8gYmUgbG9hZGVkLgogKgogKiBUbyBzZWUgdGhlIGZ1bmN0aW9uYWwgaW1wbGVtZW50YXRpb24gY2hlY2sgb3V0IHNyYy9uZ0FuaW1hdGUvYW5pbWF0ZS5qcwogKi8KdmFyICRBbmltYXRlUHJvdmlkZXIgPSBbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHsKCgogIHRoaXMuJCRzZWxlY3RvcnMgPSB7fTsKCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkYW5pbWF0ZVByb3ZpZGVyI3JlZ2lzdGVyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBSZWdpc3RlcnMgYSBuZXcgaW5qZWN0YWJsZSBhbmltYXRpb24gZmFjdG9yeSBmdW5jdGlvbi4gVGhlIGZhY3RvcnkgZnVuY3Rpb24gcHJvZHVjZXMgdGhlCiAgICogYW5pbWF0aW9uIG9iamVjdCB3aGljaCBjb250YWlucyBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQgdGhhdCBpcyBleHBlY3RlZCB0byBiZQogICAqIGFuaW1hdGVkLgogICAqCiAgICogICAqIGBldmVudEZuYDogYGZ1bmN0aW9uKEVsZW1lbnQsIGRvbmVGdW5jdGlvbilgIFRoZSBlbGVtZW50IHRvIGFuaW1hdGUsIHRoZSBgZG9uZUZ1bmN0aW9uYAogICAqICAgbXVzdCBiZSBjYWxsZWQgb25jZSB0aGUgZWxlbWVudCBhbmltYXRpb24gaXMgY29tcGxldGUuIElmIGEgZnVuY3Rpb24gaXMgcmV0dXJuZWQgdGhlbiB0aGUKICAgKiAgIGFuaW1hdGlvbiBzZXJ2aWNlIHdpbGwgdXNlIHRoaXMgZnVuY3Rpb24gdG8gY2FuY2VsIHRoZSBhbmltYXRpb24gd2hlbmV2ZXIgYSBjYW5jZWwgZXZlbnQgaXMKICAgKiAgIHRyaWdnZXJlZC4KICAgKgogICAqCiAgICogYGBganMKICAgKiAgIHJldHVybiB7CiAgICAgKiAgICAgZXZlbnRGbiA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHsKICAgICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvbgogICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKCkKICAgICAqICAgICAgIHJldHVybiBmdW5jdGlvbiBjYW5jZWxsYXRpb25GdW5jdGlvbigpIHsKICAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uCiAgICAgKiAgICAgICB9CiAgICAgKiAgICAgfQogICAgICogICB9CiAgICogYGBgCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgYW5pbWF0aW9uLgogICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgVGhlIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHJldHVybiB0aGUgYW5pbWF0aW9uCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuCiAgICovCiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGZhY3RvcnkpIHsKICAgIHZhciBrZXkgPSBuYW1lICsgJy1hbmltYXRpb24nOwogICAgaWYgKG5hbWUgJiYgbmFtZS5jaGFyQXQoMCkgIT0gJy4nKSB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm90Y3NlbCcsCiAgICAgICAgIkV4cGVjdGluZyBjbGFzcyBzZWxlY3RvciBzdGFydGluZyB3aXRoICcuJyBnb3QgJ3swfScuIiwgbmFtZSk7CiAgICB0aGlzLiQkc2VsZWN0b3JzW25hbWUuc3Vic3RyKDEpXSA9IGtleTsKICAgICRwcm92aWRlLmZhY3Rvcnkoa2V5LCBmYWN0b3J5KTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNjbGFzc05hbWVGaWx0ZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgYW5kL29yIHJldHVybnMgdGhlIENTUyBjbGFzcyByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyBjaGVja2VkIHdoZW4gcGVyZm9ybWluZwogICAqIGFuIGFuaW1hdGlvbi4gVXBvbiBib290c3RyYXAgdGhlIGNsYXNzTmFtZUZpbHRlciB2YWx1ZSBpcyBub3Qgc2V0IGF0IGFsbCBhbmQgd2lsbAogICAqIHRoZXJlZm9yZSBlbmFibGUgJGFuaW1hdGUgdG8gYXR0ZW1wdCB0byBwZXJmb3JtIGFuIGFuaW1hdGlvbiBvbiBhbnkgZWxlbWVudC4KICAgKiBXaGVuIHNldHRpbmcgdGhlIGNsYXNzTmFtZUZpbHRlciB2YWx1ZSwgYW5pbWF0aW9ucyB3aWxsIG9ubHkgYmUgcGVyZm9ybWVkIG9uIGVsZW1lbnRzCiAgICogdGhhdCBzdWNjZXNzZnVsbHkgbWF0Y2ggdGhlIGZpbHRlciBleHByZXNzaW9uLiBUaGlzIGluIHR1cm4gY2FuIGJvb3N0IHBlcmZvcm1hbmNlCiAgICogZm9yIGxvdy1wb3dlcmVkIGRldmljZXMgYXMgd2VsbCBhcyBhcHBsaWNhdGlvbnMgY29udGFpbmluZyBhIGxvdCBvZiBzdHJ1Y3R1cmFsIG9wZXJhdGlvbnMuCiAgICogQHBhcmFtIHtSZWdFeHA9fSBleHByZXNzaW9uIFRoZSBjbGFzc05hbWUgZXhwcmVzc2lvbiB3aGljaCB3aWxsIGJlIGNoZWNrZWQgYWdhaW5zdCBhbGwgYW5pbWF0aW9ucwogICAqIEByZXR1cm4ge1JlZ0V4cH0gVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSBleHByZXNzaW9uIHZhbHVlLiBJZiBudWxsIHRoZW4gdGhlcmUgaXMgbm8gZXhwcmVzc2lvbiB2YWx1ZQogICAqLwogIHRoaXMuY2xhc3NOYW1lRmlsdGVyID0gZnVuY3Rpb24oZXhwcmVzc2lvbikgewogICAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgewogICAgICB0aGlzLiQkY2xhc3NOYW1lRmlsdGVyID0gKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBSZWdFeHApID8gZXhwcmVzc2lvbiA6IG51bGw7CiAgICB9CiAgICByZXR1cm4gdGhpcy4kJGNsYXNzTmFtZUZpbHRlcjsKICB9OwoKICB0aGlzLiRnZXQgPSBbJyR0aW1lb3V0JywgJyQkYXN5bmNDYWxsYmFjaycsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkJGFzeW5jQ2FsbGJhY2spIHsKCiAgICBmdW5jdGlvbiBhc3luYyhmbikgewogICAgICBmbiAmJiAkJGFzeW5jQ2FsbGJhY2soZm4pOwogICAgfQoKICAgIC8qKgogICAgICoKICAgICAqIEBuZ2RvYyBzZXJ2aWNlCiAgICAgKiBAbmFtZSAkYW5pbWF0ZQogICAgICogQGRlc2NyaXB0aW9uIFRoZSAkYW5pbWF0ZSBzZXJ2aWNlIHByb3ZpZGVzIHJ1ZGltZW50YXJ5IERPTSBtYW5pcHVsYXRpb24gZnVuY3Rpb25zIHRvCiAgICAgKiBpbnNlcnQsIHJlbW92ZSBhbmQgbW92ZSBlbGVtZW50cyB3aXRoaW4gdGhlIERPTSwgYXMgd2VsbCBhcyBhZGRpbmcgYW5kIHJlbW92aW5nIGNsYXNzZXMuCiAgICAgKiBUaGlzIHNlcnZpY2UgaXMgdGhlIGNvcmUgc2VydmljZSB1c2VkIGJ5IHRoZSBuZ0FuaW1hdGUgJGFuaW1hdG9yIHNlcnZpY2Ugd2hpY2ggcHJvdmlkZXMKICAgICAqIGhpZ2gtbGV2ZWwgYW5pbWF0aW9uIGhvb2tzIGZvciBDU1MgYW5kIEphdmFTY3JpcHQuCiAgICAgKgogICAgICogJGFuaW1hdGUgaXMgYXZhaWxhYmxlIGluIHRoZSBBbmd1bGFySlMgY29yZSwgaG93ZXZlciwgdGhlIG5nQW5pbWF0ZSBtb2R1bGUgbXVzdCBiZSBpbmNsdWRlZAogICAgICogdG8gZW5hYmxlIGZ1bGwgb3V0IGFuaW1hdGlvbiBzdXBwb3J0LiBPdGhlcndpc2UsICRhbmltYXRlIHdpbGwgb25seSBwZXJmb3JtIHNpbXBsZSBET00KICAgICAqIG1hbmlwdWxhdGlvbiBvcGVyYXRpb25zLgogICAgICoKICAgICAqIFRvIGxlYXJuIG1vcmUgYWJvdXQgZW5hYmxpbmcgYW5pbWF0aW9uIHN1cHBvcnQsIGNsaWNrIGhlcmUgdG8gdmlzaXQgdGhlIHtAbGluayBuZ0FuaW1hdGUKICAgICAqIG5nQW5pbWF0ZSBtb2R1bGUgcGFnZX0gYXMgd2VsbCBhcyB0aGUge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZSBuZ0FuaW1hdGUgJGFuaW1hdGUgc2VydmljZQogICAgICogcGFnZX0uCiAgICAgKi8KICAgIHJldHVybiB7CgogICAgICAvKioKICAgICAgICoKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNlbnRlcgogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyB0aGUgZWxlbWVudCBpbnRvIHRoZSBET00gZWl0aGVyIGFmdGVyIHRoZSBgYWZ0ZXJgIGVsZW1lbnQgb3IKICAgICAgICogYXMgdGhlIGZpcnN0IGNoaWxkIHdpdGhpbiB0aGUgYHBhcmVudGAgZWxlbWVudC4gT25jZSBjb21wbGV0ZSwgdGhlIGRvbmUoKSBjYWxsYmFjawogICAgICAgKiB3aWxsIGJlIGZpcmVkIChpZiBwcm92aWRlZCkuCiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIGluc2VydGVkIGludG8gdGhlIERPTQogICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQgYXMKICAgICAgICogICBhIGNoaWxkIChpZiB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudCkKICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50CiAgICAgICAqICAgYWZ0ZXIgaXRzZWxmCiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBkb25lIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGVsZW1lbnQgaGFzIGJlZW4KICAgICAgICogICBpbnNlcnRlZCBpbnRvIHRoZSBET00KICAgICAgICovCiAgICAgIGVudGVyIDogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgZG9uZSkgewogICAgICAgIGFmdGVyCiAgICAgICAgICAgID8gYWZ0ZXIuYWZ0ZXIoZWxlbWVudCkKICAgICAgICAgICAgOiBwYXJlbnQucHJlcGVuZChlbGVtZW50KTsKICAgICAgICBhc3luYyhkb25lKTsKICAgICAgICByZXR1cm4gbm9vcDsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRhbmltYXRlI2xlYXZlCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIHRoZSBlbGVtZW50IGZyb20gdGhlIERPTS4gT25jZSBjb21wbGV0ZSwgdGhlIGRvbmUoKSBjYWxsYmFjayB3aWxsIGJlCiAgICAgICAqICAgZmlyZWQgKGlmIHByb3ZpZGVkKS4KICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBET00KICAgICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGRvbmUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBhZnRlciB0aGUgZWxlbWVudCBoYXMgYmVlbgogICAgICAgKiAgIHJlbW92ZWQgZnJvbSB0aGUgRE9NCiAgICAgICAqLwogICAgICBsZWF2ZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHsKICAgICAgICBlbGVtZW50LnJlbW92ZSgpOwogICAgICAgIGFzeW5jKGRvbmUpOwogICAgICAgIHJldHVybiBub29wOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGFuaW1hdGUjbW92ZQogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKiBAZGVzY3JpcHRpb24gTW92ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwcm92aWRlZCBlbGVtZW50IHdpdGhpbiB0aGUgRE9NIHRvIGJlIHBsYWNlZAogICAgICAgKiBlaXRoZXIgYWZ0ZXIgdGhlIGBhZnRlcmAgZWxlbWVudCBvciBpbnNpZGUgb2YgdGhlIGBwYXJlbnRgIGVsZW1lbnQuIE9uY2UgY29tcGxldGUsIHRoZQogICAgICAgKiBkb25lKCkgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZCAoaWYgcHJvdmlkZWQpLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBtb3ZlZCBhcm91bmQgd2l0aGluIHRoZQogICAgICAgKiAgIERPTQogICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hlcmUgdGhlIGVsZW1lbnQgd2lsbCBiZQogICAgICAgKiAgIGluc2VydGVkIGludG8gKGlmIHRoZSBhZnRlciBlbGVtZW50IGlzIG5vdCBwcmVzZW50KQogICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgd2hlcmUgdGhlIGVsZW1lbnQgd2lsbCBiZQogICAgICAgKiAgIHBvc2l0aW9uZWQgbmV4dCB0bwogICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZG9uZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gKGlmIHByb3ZpZGVkKSB0aGF0IHdpbGwgYmUgZmlyZWQgYWZ0ZXIgdGhlCiAgICAgICAqICAgZWxlbWVudCBoYXMgYmVlbiBtb3ZlZCB0byBpdHMgbmV3IHBvc2l0aW9uCiAgICAgICAqLwogICAgICBtb3ZlIDogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgZG9uZSkgewogICAgICAgIC8vIERvIG5vdCByZW1vdmUgZWxlbWVudCBiZWZvcmUgaW5zZXJ0LiBSZW1vdmluZyB3aWxsIGNhdXNlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZQogICAgICAgIC8vIGVsZW1lbnQgdG8gYmUgZHJvcHBlZC4gSW5zZXJ0IHdpbGwgaW1wbGljaXRseSBkbyB0aGUgcmVtb3ZlLgogICAgICAgIHJldHVybiB0aGlzLmVudGVyKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIGRvbmUpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGFuaW1hdGUjYWRkQ2xhc3MKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICogQGRlc2NyaXB0aW9uIEFkZHMgdGhlIHByb3ZpZGVkIGNsYXNzTmFtZSBDU1MgY2xhc3MgdmFsdWUgdG8gdGhlIHByb3ZpZGVkIGVsZW1lbnQuIE9uY2UKICAgICAgICogY29tcGxldGUsIHRoZSBkb25lKCkgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZCAoaWYgcHJvdmlkZWQpLgogICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBoYXZlIHRoZSBjbGFzc05hbWUgdmFsdWUKICAgICAgICogICBhZGRlZCB0byBpdAogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3Mgd2hpY2ggd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudAogICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZG9uZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gKGlmIHByb3ZpZGVkKSB0aGF0IHdpbGwgYmUgZmlyZWQgYWZ0ZXIgdGhlCiAgICAgICAqICAgY2xhc3NOYW1lIHZhbHVlIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBlbGVtZW50CiAgICAgICAqLwogICAgICBhZGRDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkgewogICAgICAgIGNsYXNzTmFtZSA9ICFpc1N0cmluZyhjbGFzc05hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgID8gKGlzQXJyYXkoY2xhc3NOYW1lKSA/IGNsYXNzTmFtZS5qb2luKCcgJykgOiAnJykKICAgICAgICAgICAgICAgICAgICAgICAgOiBjbGFzc05hbWU7CiAgICAgICAgZm9yRWFjaChlbGVtZW50LCBmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgICAganFMaXRlQWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTsKICAgICAgICB9KTsKICAgICAgICBhc3luYyhkb25lKTsKICAgICAgICByZXR1cm4gbm9vcDsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRhbmltYXRlI3JlbW92ZUNsYXNzCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIHRoZSBwcm92aWRlZCBjbGFzc05hbWUgQ1NTIGNsYXNzIHZhbHVlIGZyb20gdGhlIHByb3ZpZGVkIGVsZW1lbnQuCiAgICAgICAqIE9uY2UgY29tcGxldGUsIHRoZSBkb25lKCkgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZCAoaWYgcHJvdmlkZWQpLgogICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBoYXZlIHRoZSBjbGFzc05hbWUgdmFsdWUKICAgICAgICogICByZW1vdmVkIGZyb20gaXQKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzIHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50CiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBkb25lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiAoaWYgcHJvdmlkZWQpIHRoYXQgd2lsbCBiZSBmaXJlZCBhZnRlciB0aGUKICAgICAgICogICBjbGFzc05hbWUgdmFsdWUgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50CiAgICAgICAqLwogICAgICByZW1vdmVDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkgewogICAgICAgIGNsYXNzTmFtZSA9IGlzU3RyaW5nKGNsYXNzTmFtZSkgPwogICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lIDoKICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXkoY2xhc3NOYW1lKSA/IGNsYXNzTmFtZS5qb2luKCcgJykgOiAnJzsKICAgICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgICAgICBqcUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpOwogICAgICAgIH0pOwogICAgICAgIGFzeW5jKGRvbmUpOwogICAgICAgIHJldHVybiBub29wOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGFuaW1hdGUjc2V0Q2xhc3MKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICogQGRlc2NyaXB0aW9uIEFkZHMgYW5kL29yIHJlbW92ZXMgdGhlIGdpdmVuIENTUyBjbGFzc2VzIHRvIGFuZCBmcm9tIHRoZSBlbGVtZW50LgogICAgICAgKiBPbmNlIGNvbXBsZXRlLCB0aGUgZG9uZSgpIGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQgKGlmIHByb3ZpZGVkKS4KICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgaGF2ZSBpdHMgQ1NTIGNsYXNzZXMgY2hhbmdlZAogICAgICAgKiAgIHJlbW92ZWQgZnJvbSBpdAogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkIHRoZSBDU1MgY2xhc3NlcyB3aGljaCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50CiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdmUgdGhlIENTUyBjbGFzcyB3aGljaCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudAogICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZG9uZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gKGlmIHByb3ZpZGVkKSB0aGF0IHdpbGwgYmUgZmlyZWQgYWZ0ZXIgdGhlCiAgICAgICAqICAgQ1NTIGNsYXNzZXMgaGF2ZSBiZWVuIHNldCBvbiB0aGUgZWxlbWVudAogICAgICAgKi8KICAgICAgc2V0Q2xhc3MgOiBmdW5jdGlvbihlbGVtZW50LCBhZGQsIHJlbW92ZSwgZG9uZSkgewogICAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICAgIGpxTGl0ZUFkZENsYXNzKGVsZW1lbnQsIGFkZCk7CiAgICAgICAgICBqcUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCByZW1vdmUpOwogICAgICAgIH0pOwogICAgICAgIGFzeW5jKGRvbmUpOwogICAgICAgIHJldHVybiBub29wOwogICAgICB9LAoKICAgICAgZW5hYmxlZCA6IG5vb3AKICAgIH07CiAgfV07Cn1dOwoKZnVuY3Rpb24gJCRBc3luY0NhbGxiYWNrUHJvdmlkZXIoKXsKICB0aGlzLiRnZXQgPSBbJyQkckFGJywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJCRyQUYsICR0aW1lb3V0KSB7CiAgICByZXR1cm4gJCRyQUYuc3VwcG9ydGVkCiAgICAgID8gZnVuY3Rpb24oZm4pIHsgcmV0dXJuICQkckFGKGZuKTsgfQogICAgICA6IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgcmV0dXJuICR0aW1lb3V0KGZuLCAwLCBmYWxzZSk7CiAgICAgIH07CiAgfV07Cn0KCi8qKgogKiAhIFRoaXMgaXMgYSBwcml2YXRlIHVuZG9jdW1lbnRlZCBzZXJ2aWNlICEKICoKICogQG5hbWUgJGJyb3dzZXIKICogQHJlcXVpcmVzICRsb2cKICogQGRlc2NyaXB0aW9uCiAqIFRoaXMgb2JqZWN0IGhhcyB0d28gZ29hbHM6CiAqCiAqIC0gaGlkZSBhbGwgdGhlIGdsb2JhbCBzdGF0ZSBpbiB0aGUgYnJvd3NlciBjYXVzZWQgYnkgdGhlIHdpbmRvdyBvYmplY3QKICogLSBhYnN0cmFjdCBhd2F5IGFsbCB0aGUgYnJvd3NlciBzcGVjaWZpYyBmZWF0dXJlcyBhbmQgaW5jb25zaXN0ZW5jaWVzCiAqCiAqIEZvciB0ZXN0cyB3ZSBwcm92aWRlIHtAbGluayBuZ01vY2suJGJyb3dzZXIgbW9jayBpbXBsZW1lbnRhdGlvbn0gb2YgdGhlIGAkYnJvd3NlcmAKICogc2VydmljZSwgd2hpY2ggY2FuIGJlIHVzZWQgZm9yIGNvbnZlbmllbnQgdGVzdGluZyBvZiB0aGUgYXBwbGljYXRpb24gd2l0aG91dCB0aGUgaW50ZXJhY3Rpb24gd2l0aAogKiB0aGUgcmVhbCBicm93c2VyIGFwaXMuCiAqLwovKioKICogQHBhcmFtIHtvYmplY3R9IHdpbmRvdyBUaGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QuCiAqIEBwYXJhbSB7b2JqZWN0fSBkb2N1bWVudCBqUXVlcnkgd3JhcHBlZCBkb2N1bWVudC4KICogQHBhcmFtIHtmdW5jdGlvbigpfSBYSFIgWE1MSHR0cFJlcXVlc3QgY29uc3RydWN0b3IuCiAqIEBwYXJhbSB7b2JqZWN0fSAkbG9nIGNvbnNvbGUubG9nIG9yIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGludGVyZmFjZS4KICogQHBhcmFtIHtvYmplY3R9ICRzbmlmZmVyICRzbmlmZmVyIHNlcnZpY2UKICovCmZ1bmN0aW9uIEJyb3dzZXIod2luZG93LCBkb2N1bWVudCwgJGxvZywgJHNuaWZmZXIpIHsKICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgIHJhd0RvY3VtZW50ID0gZG9jdW1lbnRbMF0sCiAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLAogICAgICBoaXN0b3J5ID0gd2luZG93Lmhpc3RvcnksCiAgICAgIHNldFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCwKICAgICAgY2xlYXJUaW1lb3V0ID0gd2luZG93LmNsZWFyVGltZW91dCwKICAgICAgcGVuZGluZ0RlZmVySWRzID0ge307CgogIHNlbGYuaXNNb2NrID0gZmFsc2U7CgogIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9IDA7CiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcyA9IFtdOwoKICAvLyBUT0RPKHZvanRhKTogcmVtb3ZlIHRoaXMgdGVtcG9yYXJ5IGFwaQogIHNlbGYuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCA9IGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0OwogIHNlbGYuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9IGZ1bmN0aW9uKCkgeyBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCsrOyB9OwoKICAvKioKICAgKiBFeGVjdXRlcyB0aGUgYGZuYCBmdW5jdGlvbihzdXBwb3J0cyBjdXJyeWluZykgYW5kIGRlY3JlbWVudHMgdGhlIGBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3NgCiAgICogY291bnRlci4gSWYgdGhlIGNvdW50ZXIgcmVhY2hlcyAwLCBhbGwgdGhlIGBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3NgIGFyZSBleGVjdXRlZC4KICAgKi8KICBmdW5jdGlvbiBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChmbikgewogICAgdHJ5IHsKICAgICAgZm4uYXBwbHkobnVsbCwgc2xpY2VBcmdzKGFyZ3VtZW50cywgMSkpOwogICAgfSBmaW5hbGx5IHsKICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQtLTsKICAgICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7CiAgICAgICAgd2hpbGUob3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLmxlbmd0aCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLnBvcCgpKCk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRsb2cuZXJyb3IoZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICAvKioKICAgKiBAcHJpdmF0ZQogICAqIE5vdGU6IHRoaXMgbWV0aG9kIGlzIHVzZWQgb25seSBieSBzY2VuYXJpbyBydW5uZXIKICAgKiBUT0RPKHZvanRhKTogcHJlZml4IHRoaXMgbWV0aG9kIHdpdGggJCQgPwogICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2sgRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIG5vIG91dHN0YW5kaW5nIHJlcXVlc3QKICAgKi8KICBzZWxmLm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHMgPSBmdW5jdGlvbihjYWxsYmFjaykgewogICAgLy8gZm9yY2UgYnJvd3NlciB0byBleGVjdXRlIGFsbCBwb2xsRm5zIC0gdGhpcyBpcyBuZWVkZWQgc28gdGhhdCBjb29raWVzIGFuZCBvdGhlciBwb2xsZXJzIGZpcmUKICAgIC8vIGF0IHNvbWUgZGV0ZXJtaW5pc3RpYyB0aW1lIGluIHJlc3BlY3QgdG8gdGhlIHRlc3QgcnVubmVyJ3MgYWN0aW9ucy4gTGVhdmluZyB0aGluZ3MgdXAgdG8gdGhlCiAgICAvLyByZWd1bGFyIHBvbGxlciB3b3VsZCByZXN1bHQgaW4gZmxha3kgdGVzdHMuCiAgICBmb3JFYWNoKHBvbGxGbnMsIGZ1bmN0aW9uKHBvbGxGbil7IHBvbGxGbigpOyB9KTsKCiAgICBpZiAob3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPT09IDApIHsKICAgICAgY2FsbGJhY2soKTsKICAgIH0gZWxzZSB7CiAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTsKICAgIH0KICB9OwoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIFBvbGwgV2F0Y2hlciBBUEkKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIHZhciBwb2xsRm5zID0gW10sCiAgICAgIHBvbGxUaW1lb3V0OwoKICAvKioKICAgKiBAbmFtZSAkYnJvd3NlciNhZGRQb2xsRm4KICAgKgogICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gUG9sbCBmdW5jdGlvbiB0byBhZGQKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIEFkZHMgYSBmdW5jdGlvbiB0byB0aGUgbGlzdCBvZiBmdW5jdGlvbnMgdGhhdCBwb2xsZXIgcGVyaW9kaWNhbGx5IGV4ZWN1dGVzLAogICAqIGFuZCBzdGFydHMgcG9sbGluZyBpZiBub3Qgc3RhcnRlZCB5ZXQuCiAgICoKICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gdGhlIGFkZGVkIGZ1bmN0aW9uCiAgICovCiAgc2VsZi5hZGRQb2xsRm4gPSBmdW5jdGlvbihmbikgewogICAgaWYgKGlzVW5kZWZpbmVkKHBvbGxUaW1lb3V0KSkgc3RhcnRQb2xsZXIoMTAwLCBzZXRUaW1lb3V0KTsKICAgIHBvbGxGbnMucHVzaChmbik7CiAgICByZXR1cm4gZm47CiAgfTsKCiAgLyoqCiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsIEhvdyBvZnRlbiBzaG91bGQgYnJvd3NlciBjYWxsIHBvbGwgZnVuY3Rpb25zIChtcykKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IHNldFRpbWVvdXQgUmVmZXJlbmNlIHRvIGEgcmVhbCBvciBmYWtlIGBzZXRUaW1lb3V0YCBmdW5jdGlvbi4KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIENvbmZpZ3VyZXMgdGhlIHBvbGxlciB0byBydW4gaW4gdGhlIHNwZWNpZmllZCBpbnRlcnZhbHMsIHVzaW5nIHRoZSBzcGVjaWZpZWQKICAgKiBzZXRUaW1lb3V0IGZuIGFuZCBraWNrcyBpdCBvZmYuCiAgICovCiAgZnVuY3Rpb24gc3RhcnRQb2xsZXIoaW50ZXJ2YWwsIHNldFRpbWVvdXQpIHsKICAgIChmdW5jdGlvbiBjaGVjaygpIHsKICAgICAgZm9yRWFjaChwb2xsRm5zLCBmdW5jdGlvbihwb2xsRm4peyBwb2xsRm4oKTsgfSk7CiAgICAgIHBvbGxUaW1lb3V0ID0gc2V0VGltZW91dChjaGVjaywgaW50ZXJ2YWwpOwogICAgfSkoKTsKICB9CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgLy8gVVJMIEFQSQogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogIHZhciBsYXN0QnJvd3NlclVybCA9IGxvY2F0aW9uLmhyZWYsCiAgICAgIGJhc2VFbGVtZW50ID0gZG9jdW1lbnQuZmluZCgnYmFzZScpLAogICAgICBuZXdMb2NhdGlvbiA9IG51bGw7CgogIC8qKgogICAqIEBuYW1lICRicm93c2VyI3VybAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogR0VUVEVSOgogICAqIFdpdGhvdXQgYW55IGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBqdXN0IHJldHVybnMgY3VycmVudCB2YWx1ZSBvZiBsb2NhdGlvbi5ocmVmLgogICAqCiAgICogU0VUVEVSOgogICAqIFdpdGggYXQgbGVhc3Qgb25lIGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBzZXRzIHVybCB0byBuZXcgdmFsdWUuCiAgICogSWYgaHRtbDUgaGlzdG9yeSBhcGkgc3VwcG9ydGVkLCBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlIGlzIHVzZWQsIG90aGVyd2lzZQogICAqIGxvY2F0aW9uLmhyZWYvbG9jYXRpb24ucmVwbGFjZSBpcyB1c2VkLgogICAqIFJldHVybnMgaXRzIG93biBpbnN0YW5jZSB0byBhbGxvdyBjaGFpbmluZwogICAqCiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5IHRoZSAkbG9jYXRpb24gc2VydmljZS4gUGxlYXNlIHVzZSB0aGUKICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBjaGFuZ2UgdXJsLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBOZXcgdXJsICh3aGVuIHVzZWQgYXMgc2V0dGVyKQogICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlcGxhY2UgU2hvdWxkIG5ldyB1cmwgcmVwbGFjZSBjdXJyZW50IGhpc3RvcnkgcmVjb3JkID8KICAgKi8KICBzZWxmLnVybCA9IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSkgewogICAgLy8gQW5kcm9pZCBCcm93c2VyIEJGQ2FjaGUgY2F1c2VzIGxvY2F0aW9uLCBoaXN0b3J5IHJlZmVyZW5jZSB0byBiZWNvbWUgc3RhbGUuCiAgICBpZiAobG9jYXRpb24gIT09IHdpbmRvdy5sb2NhdGlvbikgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247CiAgICBpZiAoaGlzdG9yeSAhPT0gd2luZG93Lmhpc3RvcnkpIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTsKCiAgICAvLyBzZXR0ZXIKICAgIGlmICh1cmwpIHsKICAgICAgaWYgKGxhc3RCcm93c2VyVXJsID09IHVybCkgcmV0dXJuOwogICAgICBsYXN0QnJvd3NlclVybCA9IHVybDsKICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIHsKICAgICAgICBpZiAocmVwbGFjZSkgaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgJycsIHVybCk7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCAnJywgdXJsKTsKICAgICAgICAgIC8vIENyYXp5IE9wZXJhIEJ1ZzogaHR0cDovL215Lm9wZXJhLmNvbS9jb21tdW5pdHkvZm9ydW1zL3RvcGljLmRtbD9pZD0xMTg1NDYyCiAgICAgICAgICBiYXNlRWxlbWVudC5hdHRyKCdocmVmJywgYmFzZUVsZW1lbnQuYXR0cignaHJlZicpKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbmV3TG9jYXRpb24gPSB1cmw7CiAgICAgICAgaWYgKHJlcGxhY2UpIHsKICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UodXJsKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHVybDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHNlbGY7CiAgICAvLyBnZXR0ZXIKICAgIH0gZWxzZSB7CiAgICAgIC8vIC0gbmV3TG9jYXRpb24gaXMgYSB3b3JrYXJvdW5kIGZvciBhbiBJRTctOSBpc3N1ZSB3aXRoIGxvY2F0aW9uLnJlcGxhY2UgYW5kIGxvY2F0aW9uLmhyZWYKICAgICAgLy8gICBtZXRob2RzIG5vdCB1cGRhdGluZyBsb2NhdGlvbi5ocmVmIHN5bmNocm9ub3VzbHkuCiAgICAgIC8vIC0gdGhlIHJlcGxhY2VtZW50IGlzIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDA3MTcyCiAgICAgIHJldHVybiBuZXdMb2NhdGlvbiB8fCBsb2NhdGlvbi5ocmVmLnJlcGxhY2UoLyUyNy9nLCInIik7CiAgICB9CiAgfTsKCiAgdmFyIHVybENoYW5nZUxpc3RlbmVycyA9IFtdLAogICAgICB1cmxDaGFuZ2VJbml0ID0gZmFsc2U7CgogIGZ1bmN0aW9uIGZpcmVVcmxDaGFuZ2UoKSB7CiAgICBuZXdMb2NhdGlvbiA9IG51bGw7CiAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT0gc2VsZi51cmwoKSkgcmV0dXJuOwoKICAgIGxhc3RCcm93c2VyVXJsID0gc2VsZi51cmwoKTsKICAgIGZvckVhY2godXJsQ2hhbmdlTGlzdGVuZXJzLCBmdW5jdGlvbihsaXN0ZW5lcikgewogICAgICBsaXN0ZW5lcihzZWxmLnVybCgpKTsKICAgIH0pOwogIH0KCiAgLyoqCiAgICogQG5hbWUgJGJyb3dzZXIjb25VcmxDaGFuZ2UKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJlZ2lzdGVyIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQsIHdoZW4gdXJsIGNoYW5nZXMuCiAgICoKICAgKiBJdCdzIG9ubHkgY2FsbGVkIHdoZW4gdGhlIHVybCBpcyBjaGFuZ2VkIGZyb20gb3V0c2lkZSBvZiBhbmd1bGFyOgogICAqIC0gdXNlciB0eXBlcyBkaWZmZXJlbnQgdXJsIGludG8gYWRkcmVzcyBiYXIKICAgKiAtIHVzZXIgY2xpY2tzIG9uIGhpc3RvcnkgKGZvcndhcmQvYmFjaykgYnV0dG9uCiAgICogLSB1c2VyIGNsaWNrcyBvbiBhIGxpbmsKICAgKgogICAqIEl0J3Mgbm90IGNhbGxlZCB3aGVuIHVybCBpcyBjaGFuZ2VkIGJ5ICRicm93c2VyLnVybCgpIG1ldGhvZAogICAqCiAgICogVGhlIGxpc3RlbmVyIGdldHMgY2FsbGVkIHdpdGggbmV3IHVybCBhcyBwYXJhbWV0ZXIuCiAgICoKICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZQogICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIG1vbml0b3IgdXJsIGNoYW5nZXMgaW4gYW5ndWxhciBhcHBzLgogICAqCiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpfSBsaXN0ZW5lciBMaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB1cmwgY2hhbmdlcy4KICAgKiBAcmV0dXJuIHtmdW5jdGlvbihzdHJpbmcpfSBSZXR1cm5zIHRoZSByZWdpc3RlcmVkIGxpc3RlbmVyIGZuIC0gaGFuZHkgaWYgdGhlIGZuIGlzIGFub255bW91cy4KICAgKi8KICBzZWxmLm9uVXJsQ2hhbmdlID0gZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgIC8vIFRPRE8odm9qdGEpOiByZWZhY3RvciB0byB1c2Ugbm9kZSdzIHN5bnRheCBmb3IgZXZlbnRzCiAgICBpZiAoIXVybENoYW5nZUluaXQpIHsKICAgICAgLy8gV2UgbGlzdGVuIG9uIGJvdGggKGhhc2hjaGFuZ2UvcG9wc3RhdGUpIHdoZW4gYXZhaWxhYmxlLCBhcyBzb21lIGJyb3dzZXJzIChlLmcuIE9wZXJhKQogICAgICAvLyBkb24ndCBmaXJlIHBvcHN0YXRlIHdoZW4gdXNlciBjaGFuZ2UgdGhlIGFkZHJlc3MgYmFyIGFuZCBkb24ndCBmaXJlIGhhc2hjaGFuZ2Ugd2hlbiB1cmwKICAgICAgLy8gY2hhbmdlZCBieSBwdXNoL3JlcGxhY2VTdGF0ZQoKICAgICAgLy8gaHRtbDUgaGlzdG9yeSBhcGkgLSBwb3BzdGF0ZSBldmVudAogICAgICBpZiAoJHNuaWZmZXIuaGlzdG9yeSkganFMaXRlKHdpbmRvdykub24oJ3BvcHN0YXRlJywgZmlyZVVybENoYW5nZSk7CiAgICAgIC8vIGhhc2hjaGFuZ2UgZXZlbnQKICAgICAgaWYgKCRzbmlmZmVyLmhhc2hjaGFuZ2UpIGpxTGl0ZSh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgZmlyZVVybENoYW5nZSk7CiAgICAgIC8vIHBvbGxpbmcKICAgICAgZWxzZSBzZWxmLmFkZFBvbGxGbihmaXJlVXJsQ2hhbmdlKTsKCiAgICAgIHVybENoYW5nZUluaXQgPSB0cnVlOwogICAgfQoKICAgIHVybENoYW5nZUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTsKICAgIHJldHVybiBjYWxsYmFjazsKICB9OwoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIE1pc2MgQVBJCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgLyoqCiAgICogQG5hbWUgJGJyb3dzZXIjYmFzZUhyZWYKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJldHVybnMgY3VycmVudCA8YmFzZSBocmVmPgogICAqIChhbHdheXMgcmVsYXRpdmUgLSB3aXRob3V0IGRvbWFpbikKICAgKgogICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjdXJyZW50IGJhc2UgaHJlZgogICAqLwogIHNlbGYuYmFzZUhyZWYgPSBmdW5jdGlvbigpIHsKICAgIHZhciBocmVmID0gYmFzZUVsZW1lbnQuYXR0cignaHJlZicpOwogICAgcmV0dXJuIGhyZWYgPyBocmVmLnJlcGxhY2UoL14oaHR0cHM/XDopP1wvXC9bXlwvXSovLCAnJykgOiAnJzsKICB9OwoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIENvb2tpZXMgQVBJCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICB2YXIgbGFzdENvb2tpZXMgPSB7fTsKICB2YXIgbGFzdENvb2tpZVN0cmluZyA9ICcnOwogIHZhciBjb29raWVQYXRoID0gc2VsZi5iYXNlSHJlZigpOwoKICAvKioKICAgKiBAbmFtZSAkYnJvd3NlciNjb29raWVzCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgQ29va2llIG5hbWUKICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIENvb2tpZSB2YWx1ZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhlIGNvb2tpZXMgbWV0aG9kIHByb3ZpZGVzIGEgJ3ByaXZhdGUnIGxvdyBsZXZlbCBhY2Nlc3MgdG8gYnJvd3NlciBjb29raWVzLgogICAqIEl0IGlzIG5vdCBtZWFudCB0byBiZSB1c2VkIGRpcmVjdGx5LCB1c2UgdGhlICRjb29raWUgc2VydmljZSBpbnN0ZWFkLgogICAqCiAgICogVGhlIHJldHVybiB2YWx1ZXMgdmFyeSBkZXBlbmRpbmcgb24gdGhlIGFyZ3VtZW50cyB0aGF0IHRoZSBtZXRob2Qgd2FzIGNhbGxlZCB3aXRoIGFzIGZvbGxvd3M6CiAgICoKICAgKiAtIGNvb2tpZXMoKSAtPiBoYXNoIG9mIGFsbCBjb29raWVzLCB0aGlzIGlzIE5PVCBhIGNvcHkgb2YgdGhlIGludGVybmFsIHN0YXRlLCBzbyBkbyBub3QgbW9kaWZ5CiAgICogICBpdAogICAqIC0gY29va2llcyhuYW1lLCB2YWx1ZSkgLT4gc2V0IG5hbWUgdG8gdmFsdWUsIGlmIHZhbHVlIGlzIHVuZGVmaW5lZCBkZWxldGUgdGhlIGNvb2tpZQogICAqIC0gY29va2llcyhuYW1lKSAtPiB0aGUgc2FtZSBhcyAobmFtZSwgdW5kZWZpbmVkKSA9PSBERUxFVEVTIChubyBvbmUgY2FsbHMgaXQgcmlnaHQgbm93IHRoYXQKICAgKiAgIHdheSkKICAgKgogICAqIEByZXR1cm5zIHtPYmplY3R9IEhhc2ggb2YgYWxsIGNvb2tpZXMgKGlmIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIpCiAgICovCiAgc2VsZi5jb29raWVzID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgIHZhciBjb29raWVMZW5ndGgsIGNvb2tpZUFycmF5LCBjb29raWUsIGksIGluZGV4OwoKICAgIGlmIChuYW1lKSB7CiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmF3RG9jdW1lbnQuY29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgIj07cGF0aD0iICsgY29va2llUGF0aCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjtleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UIjsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7CiAgICAgICAgICBjb29raWVMZW5ndGggPSAocmF3RG9jdW1lbnQuY29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJztwYXRoPScgKyBjb29raWVQYXRoKS5sZW5ndGggKyAxOwoKICAgICAgICAgIC8vIHBlciBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMyMTA5LnR4dCBicm93c2VyIG11c3QgYWxsb3cgYXQgbWluaW11bToKICAgICAgICAgIC8vIC0gMzAwIGNvb2tpZXMKICAgICAgICAgIC8vIC0gMjAgY29va2llcyBwZXIgdW5pcXVlIGRvbWFpbgogICAgICAgICAgLy8gLSA0MDk2IGJ5dGVzIHBlciBjb29raWUKICAgICAgICAgIGlmIChjb29raWVMZW5ndGggPiA0MDk2KSB7CiAgICAgICAgICAgICRsb2cud2FybigiQ29va2llICciKyBuYW1lICsKICAgICAgICAgICAgICAiJyBwb3NzaWJseSBub3Qgc2V0IG9yIG92ZXJmbG93ZWQgYmVjYXVzZSBpdCB3YXMgdG9vIGxhcmdlICgiKwogICAgICAgICAgICAgIGNvb2tpZUxlbmd0aCArICIgPiA0MDk2IGJ5dGVzKSEiKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmIChyYXdEb2N1bWVudC5jb29raWUgIT09IGxhc3RDb29raWVTdHJpbmcpIHsKICAgICAgICBsYXN0Q29va2llU3RyaW5nID0gcmF3RG9jdW1lbnQuY29va2llOwogICAgICAgIGNvb2tpZUFycmF5ID0gbGFzdENvb2tpZVN0cmluZy5zcGxpdCgiOyAiKTsKICAgICAgICBsYXN0Q29va2llcyA9IHt9OwoKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29va2llQXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvb2tpZSA9IGNvb2tpZUFycmF5W2ldOwogICAgICAgICAgaW5kZXggPSBjb29raWUuaW5kZXhPZignPScpOwogICAgICAgICAgaWYgKGluZGV4ID4gMCkgeyAvL2lnbm9yZSBuYW1lbGVzcyBjb29raWVzCiAgICAgICAgICAgIG5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQoY29va2llLnN1YnN0cmluZygwLCBpbmRleCkpOwogICAgICAgICAgICAvLyB0aGUgZmlyc3QgdmFsdWUgdGhhdCBpcyBzZWVuIGZvciBhIGNvb2tpZSBpcyB0aGUgbW9zdAogICAgICAgICAgICAvLyBzcGVjaWZpYyBvbmUuICB2YWx1ZXMgZm9yIHRoZSBzYW1lIGNvb2tpZSBuYW1lIHRoYXQKICAgICAgICAgICAgLy8gZm9sbG93IGFyZSBmb3IgbGVzcyBzcGVjaWZpYyBwYXRocy4KICAgICAgICAgICAgaWYgKGxhc3RDb29raWVzW25hbWVdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICBsYXN0Q29va2llc1tuYW1lXSA9IGRlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKGluZGV4ICsgMSkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBsYXN0Q29va2llczsKICAgIH0KICB9OwoKCiAgLyoqCiAgICogQG5hbWUgJGJyb3dzZXIjZGVmZXIKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdobydzIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVmZXJyZWQuCiAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gb2YgbWlsbGlzZWNvbmRzIHRvIGRlZmVyIHRoZSBmdW5jdGlvbiBleGVjdXRpb24uCiAgICogQHJldHVybnMgeyp9IERlZmVySWQgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgdGhlIHRhc2sgdmlhIGAkYnJvd3Nlci5kZWZlci5jYW5jZWwoKWAuCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBFeGVjdXRlcyBhIGZuIGFzeW5jaHJvbm91c2x5IHZpYSBgc2V0VGltZW91dChmbiwgZGVsYXkpYC4KICAgKgogICAqIFVubGlrZSB3aGVuIGNhbGxpbmcgYHNldFRpbWVvdXRgIGRpcmVjdGx5LCBpbiB0ZXN0IHRoaXMgZnVuY3Rpb24gaXMgbW9ja2VkIGFuZCBpbnN0ZWFkIG9mIHVzaW5nCiAgICogYHNldFRpbWVvdXRgIGluIHRlc3RzLCB0aGUgZm5zIGFyZSBxdWV1ZWQgaW4gYW4gYXJyYXksIHdoaWNoIGNhbiBiZSBwcm9ncmFtbWF0aWNhbGx5IGZsdXNoZWQKICAgKiB2aWEgYCRicm93c2VyLmRlZmVyLmZsdXNoKClgLgogICAqCiAgICovCiAgc2VsZi5kZWZlciA9IGZ1bmN0aW9uKGZuLCBkZWxheSkgewogICAgdmFyIHRpbWVvdXRJZDsKICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7CiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW3RpbWVvdXRJZF07CiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKTsKICAgIH0sIGRlbGF5IHx8IDApOwogICAgcGVuZGluZ0RlZmVySWRzW3RpbWVvdXRJZF0gPSB0cnVlOwogICAgcmV0dXJuIHRpbWVvdXRJZDsKICB9OwoKCiAgLyoqCiAgICogQG5hbWUgJGJyb3dzZXIjZGVmZXIuY2FuY2VsCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDYW5jZWxzIGEgZGVmZXJyZWQgdGFzayBpZGVudGlmaWVkIHdpdGggYGRlZmVySWRgLgogICAqCiAgICogQHBhcmFtIHsqfSBkZWZlcklkIFRva2VuIHJldHVybmVkIGJ5IHRoZSBgJGJyb3dzZXIuZGVmZXJgIGZ1bmN0aW9uLgogICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFzayBoYXNuJ3QgZXhlY3V0ZWQgeWV0IGFuZCB3YXMgc3VjY2Vzc2Z1bGx5CiAgICogICAgICAgICAgICAgICAgICAgIGNhbmNlbGVkLgogICAqLwogIHNlbGYuZGVmZXIuY2FuY2VsID0gZnVuY3Rpb24oZGVmZXJJZCkgewogICAgaWYgKHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXSkgewogICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW2RlZmVySWRdOwogICAgICBjbGVhclRpbWVvdXQoZGVmZXJJZCk7CiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9OwoKfQoKZnVuY3Rpb24gJEJyb3dzZXJQcm92aWRlcigpewogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9nJywgJyRzbmlmZmVyJywgJyRkb2N1bWVudCcsCiAgICAgIGZ1bmN0aW9uKCAkd2luZG93LCAgICRsb2csICAgJHNuaWZmZXIsICAgJGRvY3VtZW50KXsKICAgICAgICByZXR1cm4gbmV3IEJyb3dzZXIoJHdpbmRvdywgJGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcik7CiAgICAgIH1dOwp9CgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJGNhY2hlRmFjdG9yeQogKgogKiBAZGVzY3JpcHRpb24KICogRmFjdG9yeSB0aGF0IGNvbnN0cnVjdHMge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdHMgYW5kIGdpdmVzIGFjY2VzcyB0bwogKiB0aGVtLgogKgogKiBgYGBqcwogKgogKiAgdmFyIGNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpOwogKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdjYWNoZUlkJykpLnRvQmUoY2FjaGUpOwogKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdub1N1Y2hDYWNoZUlkJykpLm5vdC50b0JlRGVmaW5lZCgpOwogKgogKiAgY2FjaGUucHV0KCJrZXkiLCAidmFsdWUiKTsKICogIGNhY2hlLnB1dCgiYW5vdGhlciBrZXkiLCAiYW5vdGhlciB2YWx1ZSIpOwogKgogKiAgLy8gV2UndmUgc3BlY2lmaWVkIG5vIG9wdGlvbnMgb24gY3JlYXRpb24KICogIGV4cGVjdChjYWNoZS5pbmZvKCkpLnRvRXF1YWwoe2lkOiAnY2FjaGVJZCcsIHNpemU6IDJ9KTsKICoKICogYGBgCiAqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUlkIE5hbWUgb3IgaWQgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgY2FjaGUuCiAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgY2FjaGUgYmVoYXZpb3IuIFByb3BlcnRpZXM6CiAqCiAqICAgLSBge251bWJlcj19YCBgY2FwYWNpdHlgIOKAlCB0dXJucyB0aGUgY2FjaGUgaW50byBMUlUgY2FjaGUuCiAqCiAqIEByZXR1cm5zIHtvYmplY3R9IE5ld2x5IGNyZWF0ZWQgY2FjaGUgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzZXQgb2YgbWV0aG9kczoKICoKICogLSBge29iamVjdH1gIGBpbmZvKClgIOKAlCBSZXR1cm5zIGlkLCBzaXplLCBhbmQgb3B0aW9ucyBvZiBjYWNoZS4KICogLSBge3sqfX1gIGBwdXQoe3N0cmluZ30ga2V5LCB7Kn0gdmFsdWUpYCDigJQgUHV0cyBhIG5ldyBrZXktdmFsdWUgcGFpciBpbnRvIHRoZSBjYWNoZSBhbmQgcmV0dXJucwogKiAgIGl0LgogKiAtIGB7eyp9fWAgYGdldCh7c3RyaW5nfSBrZXkpYCDigJQgUmV0dXJucyBjYWNoZWQgdmFsdWUgZm9yIGBrZXlgIG9yIHVuZGVmaW5lZCBmb3IgY2FjaGUgbWlzcy4KICogLSBge3ZvaWR9YCBgcmVtb3ZlKHtzdHJpbmd9IGtleSlgIOKAlCBSZW1vdmVzIGEga2V5LXZhbHVlIHBhaXIgZnJvbSB0aGUgY2FjaGUuCiAqIC0gYHt2b2lkfWAgYHJlbW92ZUFsbCgpYCDigJQgUmVtb3ZlcyBhbGwgY2FjaGVkIHZhbHVlcy4KICogLSBge3ZvaWR9YCBgZGVzdHJveSgpYCDigJQgUmVtb3ZlcyByZWZlcmVuY2VzIHRvIHRoaXMgY2FjaGUgZnJvbSAkY2FjaGVGYWN0b3J5LgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBtb2R1bGU9ImNhY2hlRXhhbXBsZUFwcCI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkNhY2hlQ29udHJvbGxlciI+CiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD0ibmV3Q2FjaGVLZXkiIHBsYWNlaG9sZGVyPSJLZXkiPgogICAgICAgICA8aW5wdXQgbmctbW9kZWw9Im5ld0NhY2hlVmFsdWUiIHBsYWNlaG9sZGVyPSJWYWx1ZSI+CiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9InB1dChuZXdDYWNoZUtleSwgbmV3Q2FjaGVWYWx1ZSkiPkNhY2hlPC9idXR0b24+CgogICAgICAgICA8cCBuZy1pZj0ia2V5cy5sZW5ndGgiPkNhY2hlZCBWYWx1ZXM8L3A+CiAgICAgICAgIDxkaXYgbmctcmVwZWF0PSJrZXkgaW4ga2V5cyI+CiAgICAgICAgICAgPHNwYW4gbmctYmluZD0ia2V5Ij48L3NwYW4+CiAgICAgICAgICAgPHNwYW4+OiA8L3NwYW4+CiAgICAgICAgICAgPGIgbmctYmluZD0iY2FjaGUuZ2V0KGtleSkiPjwvYj4KICAgICAgICAgPC9kaXY+CgogICAgICAgICA8cD5DYWNoZSBJbmZvPC9wPgogICAgICAgICA8ZGl2IG5nLXJlcGVhdD0iKGtleSwgdmFsdWUpIGluIGNhY2hlLmluZm8oKSI+CiAgICAgICAgICAgPHNwYW4gbmctYmluZD0ia2V5Ij48L3NwYW4+CiAgICAgICAgICAgPHNwYW4+OiA8L3NwYW4+CiAgICAgICAgICAgPGIgbmctYmluZD0idmFsdWUiPjwvYj4KICAgICAgICAgPC9kaXY+CiAgICAgICA8L2Rpdj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjYWNoZUV4YW1wbGVBcHAnLCBbXSkuCiAgICAgICAgIGNvbnRyb2xsZXIoJ0NhY2hlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkc2NvcGUsICRjYWNoZUZhY3RvcnkpIHsKICAgICAgICAgICAkc2NvcGUua2V5cyA9IFtdOwogICAgICAgICAgICRzY29wZS5jYWNoZSA9ICRjYWNoZUZhY3RvcnkoJ2NhY2hlSWQnKTsKICAgICAgICAgICAkc2NvcGUucHV0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgICAgICAgICAgaWYgKCRzY29wZS5jYWNoZS5nZXQoa2V5KSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICRzY29wZS5rZXlzLnB1c2goa2V5KTsKICAgICAgICAgICAgIH0KICAgICAgICAgICAgICRzY29wZS5jYWNoZS5wdXQoa2V5LCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHZhbHVlKTsKICAgICAgICAgICB9OwogICAgICAgICB9XSk7CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgICAgICBwIHsKICAgICAgICAgbWFyZ2luOiAxMHB4IDAgM3B4OwogICAgICAgfQogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KZnVuY3Rpb24gJENhY2hlRmFjdG9yeVByb3ZpZGVyKCkgewoKICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHsKICAgIHZhciBjYWNoZXMgPSB7fTsKCiAgICBmdW5jdGlvbiBjYWNoZUZhY3RvcnkoY2FjaGVJZCwgb3B0aW9ucykgewogICAgICBpZiAoY2FjaGVJZCBpbiBjYWNoZXMpIHsKICAgICAgICB0aHJvdyBtaW5FcnIoJyRjYWNoZUZhY3RvcnknKSgnaWlkJywgIkNhY2hlSWQgJ3swfScgaXMgYWxyZWFkeSB0YWtlbiEiLCBjYWNoZUlkKTsKICAgICAgfQoKICAgICAgdmFyIHNpemUgPSAwLAogICAgICAgICAgc3RhdHMgPSBleHRlbmQoe30sIG9wdGlvbnMsIHtpZDogY2FjaGVJZH0pLAogICAgICAgICAgZGF0YSA9IHt9LAogICAgICAgICAgY2FwYWNpdHkgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNhcGFjaXR5KSB8fCBOdW1iZXIuTUFYX1ZBTFVFLAogICAgICAgICAgbHJ1SGFzaCA9IHt9LAogICAgICAgICAgZnJlc2hFbmQgPSBudWxsLAogICAgICAgICAgc3RhbGVFbmQgPSBudWxsOwoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyB0eXBlCiAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIEEgY2FjaGUgb2JqZWN0IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIGRhdGEsIHByaW1hcmlseSB1c2VkIGJ5CiAgICAgICAqIHtAbGluayAkaHR0cCAkaHR0cH0gYW5kIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOnNjcmlwdCBzY3JpcHR9IGRpcmVjdGl2ZSB0byBjYWNoZQogICAgICAgKiB0ZW1wbGF0ZXMgYW5kIG90aGVyIGRhdGEuCiAgICAgICAqCiAgICAgICAqIGBgYGpzCiAgICAgICAqICBhbmd1bGFyLm1vZHVsZSgnc3VwZXJDYWNoZScpCiAgICAgICAqICAgIC5mYWN0b3J5KCdzdXBlckNhY2hlJywgWyckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSkgewogICAgICAgKiAgICAgIHJldHVybiAkY2FjaGVGYWN0b3J5KCdzdXBlci1jYWNoZScpOwogICAgICAgKiAgICB9XSk7CiAgICAgICAqIGBgYAogICAgICAgKgogICAgICAgKiBFeGFtcGxlIHRlc3Q6CiAgICAgICAqCiAgICAgICAqIGBgYGpzCiAgICAgICAqICBpdCgnc2hvdWxkIGJlaGF2ZSBsaWtlIGEgY2FjaGUnLCBpbmplY3QoZnVuY3Rpb24oc3VwZXJDYWNoZSkgewogICAgICAgKiAgICBzdXBlckNhY2hlLnB1dCgna2V5JywgJ3ZhbHVlJyk7CiAgICAgICAqICAgIHN1cGVyQ2FjaGUucHV0KCdhbm90aGVyIGtleScsICdhbm90aGVyIHZhbHVlJyk7CiAgICAgICAqCiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmluZm8oKSkudG9FcXVhbCh7CiAgICAgICAqICAgICAgaWQ6ICdzdXBlci1jYWNoZScsCiAgICAgICAqICAgICAgc2l6ZTogMgogICAgICAgKiAgICB9KTsKICAgICAgICoKICAgICAgICogICAgc3VwZXJDYWNoZS5yZW1vdmUoJ2Fub3RoZXIga2V5Jyk7CiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmdldCgnYW5vdGhlciBrZXknKSkudG9CZVVuZGVmaW5lZCgpOwogICAgICAgKgogICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZUFsbCgpOwogICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5pbmZvKCkpLnRvRXF1YWwoewogICAgICAgKiAgICAgIGlkOiAnc3VwZXItY2FjaGUnLAogICAgICAgKiAgICAgIHNpemU6IDAKICAgICAgICogICAgfSk7CiAgICAgICAqICB9KSk7CiAgICAgICAqIGBgYAogICAgICAgKi8KICAgICAgcmV0dXJuIGNhY2hlc1tjYWNoZUlkXSA9IHsKCiAgICAgICAgLyoqCiAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjcHV0CiAgICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICAgKgogICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAqIEluc2VydHMgYSBuYW1lZCBlbnRyeSBpbnRvIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0IHRvIGJlCiAgICAgICAgICogcmV0cmlldmVkIGxhdGVyLCBhbmQgaW5jcmVtZW50aW5nIHRoZSBzaXplIG9mIHRoZSBjYWNoZSBpZiB0aGUga2V5IHdhcyBub3QgYWxyZWFkeQogICAgICAgICAqIHByZXNlbnQgaW4gdGhlIGNhY2hlLiBJZiBiZWhhdmluZyBsaWtlIGFuIExSVSBjYWNoZSwgaXQgd2lsbCBhbHNvIHJlbW92ZSBzdGFsZQogICAgICAgICAqIGVudHJpZXMgZnJvbSB0aGUgc2V0LgogICAgICAgICAqCiAgICAgICAgICogSXQgd2lsbCBub3QgaW5zZXJ0IHVuZGVmaW5lZCB2YWx1ZXMgaW50byB0aGUgY2FjaGUuCiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgdW5kZXIgd2hpY2ggdGhlIGNhY2hlZCBkYXRhIGlzIHN0b3JlZC4KICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIHRoZSB2YWx1ZSB0byBzdG9yZSBhbG9uZ3NpZGUgdGhlIGtleS4gSWYgaXQgaXMgdW5kZWZpbmVkLCB0aGUga2V5CiAgICAgICAgICogICAgd2lsbCBub3QgYmUgc3RvcmVkLgogICAgICAgICAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgc3RvcmVkLgogICAgICAgICAqLwogICAgICAgIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkgewogICAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV0gfHwgKGxydUhhc2hba2V5XSA9IHtrZXk6IGtleX0pOwoKICAgICAgICAgICAgcmVmcmVzaChscnVFbnRyeSk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuOwogICAgICAgICAgaWYgKCEoa2V5IGluIGRhdGEpKSBzaXplKys7CiAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTsKCiAgICAgICAgICBpZiAoc2l6ZSA+IGNhcGFjaXR5KSB7CiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN0YWxlRW5kLmtleSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2dldAogICAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAgICoKICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgKiBSZXRyaWV2ZXMgbmFtZWQgZGF0YSBzdG9yZWQgaW4gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QuCiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgb2YgdGhlIGRhdGEgdG8gYmUgcmV0cmlldmVkCiAgICAgICAgICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBzdG9yZWQuCiAgICAgICAgICovCiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHsKICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldOwoKICAgICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuOwoKICAgICAgICAgICAgcmVmcmVzaChscnVFbnRyeSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTsKICAgICAgICB9LAoKCiAgICAgICAgLyoqCiAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjcmVtb3ZlCiAgICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICAgKgogICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAqIFJlbW92ZXMgYW4gZW50cnkgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdC4KICAgICAgICAgKgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSBvZiB0aGUgZW50cnkgdG8gYmUgcmVtb3ZlZAogICAgICAgICAqLwogICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICBpZiAoY2FwYWNpdHkgPCBOdW1iZXIuTUFYX1ZBTFVFKSB7CiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTsKCiAgICAgICAgICAgIGlmICghbHJ1RW50cnkpIHJldHVybjsKCiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PSBmcmVzaEVuZCkgZnJlc2hFbmQgPSBscnVFbnRyeS5wOwogICAgICAgICAgICBpZiAobHJ1RW50cnkgPT0gc3RhbGVFbmQpIHN0YWxlRW5kID0gbHJ1RW50cnkubjsKICAgICAgICAgICAgbGluayhscnVFbnRyeS5uLGxydUVudHJ5LnApOwoKICAgICAgICAgICAgZGVsZXRlIGxydUhhc2hba2V5XTsKICAgICAgICAgIH0KCiAgICAgICAgICBkZWxldGUgZGF0YVtrZXldOwogICAgICAgICAgc2l6ZS0tOwogICAgICAgIH0sCgoKICAgICAgICAvKioKICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVBbGwKICAgICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgICAqCiAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICogQ2xlYXJzIHRoZSBjYWNoZSBvYmplY3Qgb2YgYW55IGVudHJpZXMuCiAgICAgICAgICovCiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHsKICAgICAgICAgIGRhdGEgPSB7fTsKICAgICAgICAgIHNpemUgPSAwOwogICAgICAgICAgbHJ1SGFzaCA9IHt9OwogICAgICAgICAgZnJlc2hFbmQgPSBzdGFsZUVuZCA9IG51bGw7CiAgICAgICAgfSwKCgogICAgICAgIC8qKgogICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2Rlc3Ryb3kKICAgICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgICAqCiAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICogRGVzdHJveXMgdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QgZW50aXJlbHksCiAgICAgICAgICogcmVtb3ZpbmcgaXQgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0gc2V0LgogICAgICAgICAqLwogICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkgewogICAgICAgICAgZGF0YSA9IG51bGw7CiAgICAgICAgICBzdGF0cyA9IG51bGw7CiAgICAgICAgICBscnVIYXNoID0gbnVsbDsKICAgICAgICAgIGRlbGV0ZSBjYWNoZXNbY2FjaGVJZF07CiAgICAgICAgfSwKCgogICAgICAgIC8qKgogICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2luZm8KICAgICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgICAqCiAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICogUmV0cmlldmUgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGEgcGFydGljdWxhciB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0uCiAgICAgICAgICoKICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6CiAgICAgICAgICogICA8dWw+CiAgICAgICAgICogICAgIDxsaT4qKmlkKio6IHRoZSBpZCBvZiB0aGUgY2FjaGUgaW5zdGFuY2U8L2xpPgogICAgICAgICAqICAgICA8bGk+KipzaXplKio6IHRoZSBudW1iZXIgb2YgZW50cmllcyBrZXB0IGluIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+CiAgICAgICAgICogICAgIDxsaT4qKi4uLioqOiBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGZyb20gdGhlIG9wdGlvbnMgb2JqZWN0IHdoZW4gY3JlYXRpbmcgdGhlCiAgICAgICAgICogICAgICAgY2FjaGUuPC9saT4KICAgICAgICAgKiAgIDwvdWw+CiAgICAgICAgICovCiAgICAgICAgaW5mbzogZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBzdGF0cywge3NpemU6IHNpemV9KTsKICAgICAgICB9CiAgICAgIH07CgoKICAgICAgLyoqCiAgICAgICAqIG1ha2VzIHRoZSBgZW50cnlgIHRoZSBmcmVzaEVuZCBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0CiAgICAgICAqLwogICAgICBmdW5jdGlvbiByZWZyZXNoKGVudHJ5KSB7CiAgICAgICAgaWYgKGVudHJ5ICE9IGZyZXNoRW5kKSB7CiAgICAgICAgICBpZiAoIXN0YWxlRW5kKSB7CiAgICAgICAgICAgIHN0YWxlRW5kID0gZW50cnk7CiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWxlRW5kID09IGVudHJ5KSB7CiAgICAgICAgICAgIHN0YWxlRW5kID0gZW50cnkubjsKICAgICAgICAgIH0KCiAgICAgICAgICBsaW5rKGVudHJ5Lm4sIGVudHJ5LnApOwogICAgICAgICAgbGluayhlbnRyeSwgZnJlc2hFbmQpOwogICAgICAgICAgZnJlc2hFbmQgPSBlbnRyeTsKICAgICAgICAgIGZyZXNoRW5kLm4gPSBudWxsOwogICAgICAgIH0KICAgICAgfQoKCiAgICAgIC8qKgogICAgICAgKiBiaWRpcmVjdGlvbmFsbHkgbGlua3MgdHdvIGVudHJpZXMgb2YgdGhlIExSVSBsaW5rZWQgbGlzdAogICAgICAgKi8KICAgICAgZnVuY3Rpb24gbGluayhuZXh0RW50cnksIHByZXZFbnRyeSkgewogICAgICAgIGlmIChuZXh0RW50cnkgIT0gcHJldkVudHJ5KSB7CiAgICAgICAgICBpZiAobmV4dEVudHJ5KSBuZXh0RW50cnkucCA9IHByZXZFbnRyeTsgLy9wIHN0YW5kcyBmb3IgcHJldmlvdXMsICdwcmV2JyBkaWRuJ3QgbWluaWZ5CiAgICAgICAgICBpZiAocHJldkVudHJ5KSBwcmV2RW50cnkubiA9IG5leHRFbnRyeTsgLy9uIHN0YW5kcyBmb3IgbmV4dCwgJ25leHQnIGRpZG4ndCBtaW5pZnkKICAgICAgICB9CiAgICAgIH0KICAgIH0KCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2luZm8KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgdGhlIGNhY2hlcyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkCiAgICoKICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIGtleS12YWx1ZSBtYXAgb2YgYGNhY2hlSWRgIHRvIHRoZSByZXN1bHQgb2YgY2FsbGluZyBgY2FjaGUjaW5mb2AKICAgKi8KICAgIGNhY2hlRmFjdG9yeS5pbmZvID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBpbmZvID0ge307CiAgICAgIGZvckVhY2goY2FjaGVzLCBmdW5jdGlvbihjYWNoZSwgY2FjaGVJZCkgewogICAgICAgIGluZm9bY2FjaGVJZF0gPSBjYWNoZS5pbmZvKCk7CiAgICAgIH0pOwogICAgICByZXR1cm4gaW5mbzsKICAgIH07CgoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGNhY2hlRmFjdG9yeSNnZXQKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIEdldCBhY2Nlc3MgdG8gYSBjYWNoZSBvYmplY3QgYnkgdGhlIGBjYWNoZUlkYCB1c2VkIHdoZW4gaXQgd2FzIGNyZWF0ZWQuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIGEgY2FjaGUgdG8gYWNjZXNzLgogICAqIEByZXR1cm5zIHtvYmplY3R9IENhY2hlIG9iamVjdCBpZGVudGlmaWVkIGJ5IHRoZSBjYWNoZUlkIG9yIHVuZGVmaW5lZCBpZiBubyBzdWNoIGNhY2hlLgogICAqLwogICAgY2FjaGVGYWN0b3J5LmdldCA9IGZ1bmN0aW9uKGNhY2hlSWQpIHsKICAgICAgcmV0dXJuIGNhY2hlc1tjYWNoZUlkXTsKICAgIH07CgoKICAgIHJldHVybiBjYWNoZUZhY3Rvcnk7CiAgfTsKfQoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICR0ZW1wbGF0ZUNhY2hlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgZmlyc3QgdGltZSBhIHRlbXBsYXRlIGlzIHVzZWQsIGl0IGlzIGxvYWRlZCBpbiB0aGUgdGVtcGxhdGUgY2FjaGUgZm9yIHF1aWNrIHJldHJpZXZhbC4gWW91CiAqIGNhbiBsb2FkIHRlbXBsYXRlcyBkaXJlY3RseSBpbnRvIHRoZSBjYWNoZSBpbiBhIGBzY3JpcHRgIHRhZywgb3IgYnkgY29uc3VtaW5nIHRoZQogKiBgJHRlbXBsYXRlQ2FjaGVgIHNlcnZpY2UgZGlyZWN0bHkuCiAqCiAqIEFkZGluZyB2aWEgdGhlIGBzY3JpcHRgIHRhZzoKICoKICogYGBgaHRtbAogKiAgIDxzY3JpcHQgdHlwZT0idGV4dC9uZy10ZW1wbGF0ZSIgaWQ9InRlbXBsYXRlSWQuaHRtbCI+CiAqICAgICA8cD5UaGlzIGlzIHRoZSBjb250ZW50IG9mIHRoZSB0ZW1wbGF0ZTwvcD4KICogICA8L3NjcmlwdD4KICogYGBgCiAqCiAqICoqTm90ZToqKiB0aGUgYHNjcmlwdGAgdGFnIGNvbnRhaW5pbmcgdGhlIHRlbXBsYXRlIGRvZXMgbm90IG5lZWQgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGBoZWFkYCBvZgogKiB0aGUgZG9jdW1lbnQsIGJ1dCBpdCBtdXN0IGJlIGJlbG93IHRoZSBgbmctYXBwYCBkZWZpbml0aW9uLgogKgogKiBBZGRpbmcgdmlhIHRoZSAkdGVtcGxhdGVDYWNoZSBzZXJ2aWNlOgogKgogKiBgYGBqcwogKiB2YXIgbXlBcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSk7CiAqIG15QXBwLnJ1bihmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgewogKiAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGVtcGxhdGVJZC5odG1sJywgJ1RoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlJyk7CiAqIH0pOwogKiBgYGAKICoKICogVG8gcmV0cmlldmUgdGhlIHRlbXBsYXRlIGxhdGVyLCBzaW1wbHkgdXNlIGl0IGluIHlvdXIgSFRNTDoKICogYGBgaHRtbAogKiA8ZGl2IG5nLWluY2x1ZGU9IiAndGVtcGxhdGVJZC5odG1sJyAiPjwvZGl2PgogKiBgYGAKICoKICogb3IgZ2V0IGl0IHZpYSBKYXZhc2NyaXB0OgogKiBgYGBqcwogKiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3RlbXBsYXRlSWQuaHRtbCcpCiAqIGBgYAogKgogKiBTZWUge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0uCiAqCiAqLwpmdW5jdGlvbiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyKCkgewogIHRoaXMuJGdldCA9IFsnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnkpIHsKICAgIHJldHVybiAkY2FjaGVGYWN0b3J5KCd0ZW1wbGF0ZXMnKTsKICB9XTsKfQoKLyogISBWQVJJQUJMRS9GVU5DVElPTiBOQU1JTkcgQ09OVkVOVElPTlMgVEhBVCBBUFBMWSBUTyBUSElTIEZJTEUhCiAqCiAqIERPTS1yZWxhdGVkIHZhcmlhYmxlczoKICoKICogLSAibm9kZSIgLSBET00gTm9kZQogKiAtICJlbGVtZW50IiAtIERPTSBFbGVtZW50IG9yIE5vZGUKICogLSAiJG5vZGUiIG9yICIkZWxlbWVudCIgLSBqcUxpdGUtd3JhcHBlZCBub2RlIG9yIGVsZW1lbnQKICoKICoKICogQ29tcGlsZXIgcmVsYXRlZCBzdHVmZjoKICoKICogLSAibGlua0ZuIiAtIGxpbmtpbmcgZm4gb2YgYSBzaW5nbGUgZGlyZWN0aXZlCiAqIC0gIm5vZGVMaW5rRm4iIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBwYXJ0aWN1bGFyIG5vZGUKICogLSAiY2hpbGRMaW5rRm4iIC0gIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGNoaWxkIG5vZGVzIG9mIGEgcGFydGljdWxhciBub2RlCiAqIC0gImNvbXBvc2l0ZUxpbmtGbiIgLSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBhIGNvbXBpbGF0aW9uIHJvb3QgKG5vZGVMaXN0KQogKi8KCgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJGNvbXBpbGUKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIENvbXBpbGVzIGFuIEhUTUwgc3RyaW5nIG9yIERPTSBpbnRvIGEgdGVtcGxhdGUgYW5kIHByb2R1Y2VzIGEgdGVtcGxhdGUgZnVuY3Rpb24sIHdoaWNoCiAqIGNhbiB0aGVuIGJlIHVzZWQgdG8gbGluayB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBgc2NvcGVgfSBhbmQgdGhlIHRlbXBsYXRlIHRvZ2V0aGVyLgogKgogKiBUaGUgY29tcGlsYXRpb24gaXMgYSBwcm9jZXNzIG9mIHdhbGtpbmcgdGhlIERPTSB0cmVlIGFuZCBtYXRjaGluZyBET00gZWxlbWVudHMgdG8KICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC13YXJuaW5nIj4KICogKipOb3RlOioqIFRoaXMgZG9jdW1lbnQgaXMgYW4gaW4tZGVwdGggcmVmZXJlbmNlIG9mIGFsbCBkaXJlY3RpdmUgb3B0aW9ucy4KICogRm9yIGEgZ2VudGxlIGludHJvZHVjdGlvbiB0byBkaXJlY3RpdmVzIHdpdGggZXhhbXBsZXMgb2YgY29tbW9uIHVzZSBjYXNlcywKICogc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZSBndWlkZX0uCiAqIDwvZGl2PgogKgogKiAjIyBDb21wcmVoZW5zaXZlIERpcmVjdGl2ZSBBUEkKICoKICogVGhlcmUgYXJlIG1hbnkgZGlmZmVyZW50IG9wdGlvbnMgZm9yIGEgZGlyZWN0aXZlLgogKgogKiBUaGUgZGlmZmVyZW5jZSByZXNpZGVzIGluIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZhY3RvcnkgZnVuY3Rpb24uCiAqIFlvdSBjYW4gZWl0aGVyIHJldHVybiBhICJEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3QiIChzZWUgYmVsb3cpIHRoYXQgZGVmaW5lcyB0aGUgZGlyZWN0aXZlIHByb3BlcnRpZXMsCiAqIG9yIGp1c3QgdGhlIGBwb3N0TGlua2AgZnVuY3Rpb24gKGFsbCBvdGhlciBwcm9wZXJ0aWVzIHdpbGwgaGF2ZSB0aGUgZGVmYXVsdCB2YWx1ZXMpLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1zdWNjZXNzIj4KICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSAiZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0IiBmb3JtLgogKiA8L2Rpdj4KICoKICogSGVyZSdzIGFuIGV4YW1wbGUgZGlyZWN0aXZlIGRlY2xhcmVkIHdpdGggYSBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3Q6CiAqCiAqIGBgYGpzCiAqICAgdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoLi4uKTsKICoKICogICBteU1vZHVsZS5kaXJlY3RpdmUoJ2RpcmVjdGl2ZU5hbWUnLCBmdW5jdGlvbiBmYWN0b3J5KGluamVjdGFibGVzKSB7CiAqICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHsKICogICAgICAgcHJpb3JpdHk6IDAsCiAqICAgICAgIHRlbXBsYXRlOiAnPGRpdj48L2Rpdj4nLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LAogKiAgICAgICAvLyBvcgogKiAgICAgICAvLyB0ZW1wbGF0ZVVybDogJ2RpcmVjdGl2ZS5odG1sJywgLy8gb3IgLy8gZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgeyAuLi4gfSwKICogICAgICAgdHJhbnNjbHVkZTogZmFsc2UsCiAqICAgICAgIHJlc3RyaWN0OiAnQScsCiAqICAgICAgIHNjb3BlOiBmYWxzZSwKICogICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdHJhbnNjbHVkZSwgb3RoZXJJbmplY3RhYmxlcykgeyAuLi4gfSwKICogICAgICAgY29udHJvbGxlckFzOiAnc3RyaW5nQWxpYXMnLAogKiAgICAgICByZXF1aXJlOiAnc2libGluZ0RpcmVjdGl2ZU5hbWUnLCAvLyBvciAvLyBbJ15wYXJlbnREaXJlY3RpdmVOYW1lJywgJz9vcHRpb25hbERpcmVjdGl2ZU5hbWUnLCAnP15vcHRpb25hbFBhcmVudCddLAogKiAgICAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHsKICogICAgICAgICByZXR1cm4gewogKiAgICAgICAgICAgcHJlOiBmdW5jdGlvbiBwcmVMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9LAogKiAgICAgICAgICAgcG9zdDogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH0KICogICAgICAgICB9CiAqICAgICAgICAgLy8gb3IKICogICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH0KICogICAgICAgfSwKICogICAgICAgLy8gb3IKICogICAgICAgLy8gbGluazogewogKiAgICAgICAvLyAgcHJlOiBmdW5jdGlvbiBwcmVMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9LAogKiAgICAgICAvLyAgcG9zdDogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH0KICogICAgICAgLy8gfQogKiAgICAgICAvLyBvcgogKiAgICAgICAvLyBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayggLi4uICkgeyAuLi4gfQogKiAgICAgfTsKICogICAgIHJldHVybiBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0OwogKiAgIH0pOwogKiBgYGAKICoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAqICoqTm90ZToqKiBBbnkgdW5zcGVjaWZpZWQgb3B0aW9ucyB3aWxsIHVzZSB0aGUgZGVmYXVsdCB2YWx1ZS4gWW91IGNhbiBzZWUgdGhlIGRlZmF1bHQgdmFsdWVzIGJlbG93LgogKiA8L2Rpdj4KICoKICogVGhlcmVmb3JlIHRoZSBhYm92ZSBjYW4gYmUgc2ltcGxpZmllZCBhczoKICoKICogYGBganMKICogICB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSguLi4pOwogKgogKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHsKICogICAgIHZhciBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0ID0gewogKiAgICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfQogKiAgICAgfTsKICogICAgIHJldHVybiBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0OwogKiAgICAgLy8gb3IKICogICAgIC8vIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfQogKiAgIH0pOwogKiBgYGAKICoKICoKICoKICogIyMjIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdAogKgogKiBUaGUgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0IHByb3ZpZGVzIGluc3RydWN0aW9ucyB0byB0aGUge0BsaW5rIG5nLiRjb21waWxlCiAqIGNvbXBpbGVyfS4gVGhlIGF0dHJpYnV0ZXMgYXJlOgogKgogKiAjIyMjIGBtdWx0aUVsZW1lbnRgCiAqIFdoZW4gdGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gdHJ1ZSwgdGhlIEhUTUwgY29tcGlsZXIgd2lsbCBjb2xsZWN0IERPTSBub2RlcyBiZXR3ZWVuCiAqIG5vZGVzIHdpdGggdGhlIGF0dHJpYnV0ZXMgYGRpcmVjdGl2ZS1uYW1lLXN0YXJ0YCBhbmQgYGRpcmVjdGl2ZS1uYW1lLWVuZGAsIGFuZCBncm91cCB0aGVtCiAqIHRvZ2V0aGVyIGFzIHRoZSBkaXJlY3RpdmUgZWxlbWVudHMuIEl0IGlzIHJlY29tZW5kZWQgdGhhdCB0aGlzIGZlYXR1cmUgYmUgdXNlZCBvbiBkaXJlY3RpdmVzCiAqIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgYmVoYXZpb3VyYWwgKHN1Y2ggYXMge0BsaW5rIGFwaS9uZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSksIGFuZCB3aGljaAogKiBkbyBub3QgbWFuaXB1bGF0ZSBvciByZXBsYWNlIGNoaWxkIG5vZGVzIChzdWNoIGFzIHtAbGluayBhcGkvbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBuZ0luY2x1ZGV9KS4KICoKICogIyMjIyBgcHJpb3JpdHlgCiAqIFdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGRpcmVjdGl2ZXMgZGVmaW5lZCBvbiBhIHNpbmdsZSBET00gZWxlbWVudCwgc29tZXRpbWVzIGl0CiAqIGlzIG5lY2Vzc2FyeSB0byBzcGVjaWZ5IHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYXBwbGllZC4gVGhlIGBwcmlvcml0eWAgaXMgdXNlZAogKiB0byBzb3J0IHRoZSBkaXJlY3RpdmVzIGJlZm9yZSB0aGVpciBgY29tcGlsZWAgZnVuY3Rpb25zIGdldCBjYWxsZWQuIFByaW9yaXR5IGlzIGRlZmluZWQgYXMgYQogKiBudW1iZXIuIERpcmVjdGl2ZXMgd2l0aCBncmVhdGVyIG51bWVyaWNhbCBgcHJpb3JpdHlgIGFyZSBjb21waWxlZCBmaXJzdC4gUHJlLWxpbmsgZnVuY3Rpb25zCiAqIGFyZSBhbHNvIHJ1biBpbiBwcmlvcml0eSBvcmRlciwgYnV0IHBvc3QtbGluayBmdW5jdGlvbnMgYXJlIHJ1biBpbiByZXZlcnNlIG9yZGVyLiBUaGUgb3JkZXIKICogb2YgZGlyZWN0aXZlcyB3aXRoIHRoZSBzYW1lIHByaW9yaXR5IGlzIHVuZGVmaW5lZC4gVGhlIGRlZmF1bHQgcHJpb3JpdHkgaXMgYDBgLgogKgogKiAjIyMjIGB0ZXJtaW5hbGAKICogSWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgY3VycmVudCBgcHJpb3JpdHlgIHdpbGwgYmUgdGhlIGxhc3Qgc2V0IG9mIGRpcmVjdGl2ZXMKICogd2hpY2ggd2lsbCBleGVjdXRlIChhbnkgZGlyZWN0aXZlcyBhdCB0aGUgY3VycmVudCBwcmlvcml0eSB3aWxsIHN0aWxsIGV4ZWN1dGUKICogYXMgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiBvbiBzYW1lIGBwcmlvcml0eWAgaXMgdW5kZWZpbmVkKS4KICoKICogIyMjIyBgc2NvcGVgCiAqICoqSWYgc2V0IHRvIGB0cnVlYCwqKiB0aGVuIGEgbmV3IHNjb3BlIHdpbGwgYmUgY3JlYXRlZCBmb3IgdGhpcyBkaXJlY3RpdmUuIElmIG11bHRpcGxlIGRpcmVjdGl2ZXMgb24gdGhlCiAqIHNhbWUgZWxlbWVudCByZXF1ZXN0IGEgbmV3IHNjb3BlLCBvbmx5IG9uZSBuZXcgc2NvcGUgaXMgY3JlYXRlZC4gVGhlIG5ldyBzY29wZSBydWxlIGRvZXMgbm90CiAqIGFwcGx5IGZvciB0aGUgcm9vdCBvZiB0aGUgdGVtcGxhdGUgc2luY2UgdGhlIHJvb3Qgb2YgdGhlIHRlbXBsYXRlIGFsd2F5cyBnZXRzIGEgbmV3IHNjb3BlLgogKgogKiAqKklmIHNldCB0byBge31gIChvYmplY3QgaGFzaCksKiogdGhlbiBhIG5ldyAiaXNvbGF0ZSIgc2NvcGUgaXMgY3JlYXRlZC4gVGhlICdpc29sYXRlJyBzY29wZSBkaWZmZXJzIGZyb20KICogbm9ybWFsIHNjb3BlIGluIHRoYXQgaXQgZG9lcyBub3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdCBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuIFRoaXMgaXMgdXNlZnVsCiAqIHdoZW4gY3JlYXRpbmcgcmV1c2FibGUgY29tcG9uZW50cywgd2hpY2ggc2hvdWxkIG5vdCBhY2NpZGVudGFsbHkgcmVhZCBvciBtb2RpZnkgZGF0YSBpbiB0aGUKICogcGFyZW50IHNjb3BlLgogKgogKiBUaGUgJ2lzb2xhdGUnIHNjb3BlIHRha2VzIGFuIG9iamVjdCBoYXNoIHdoaWNoIGRlZmluZXMgYSBzZXQgb2YgbG9jYWwgc2NvcGUgcHJvcGVydGllcwogKiBkZXJpdmVkIGZyb20gdGhlIHBhcmVudCBzY29wZS4gVGhlc2UgbG9jYWwgcHJvcGVydGllcyBhcmUgdXNlZnVsIGZvciBhbGlhc2luZyB2YWx1ZXMgZm9yCiAqIHRlbXBsYXRlcy4gTG9jYWxzIGRlZmluaXRpb24gaXMgYSBoYXNoIG9mIGxvY2FsIHNjb3BlIHByb3BlcnR5IHRvIGl0cyBzb3VyY2U6CiAqCiAqICogYEBgIG9yIGBAYXR0cmAgLSBiaW5kIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgdG8gdGhlIHZhbHVlIG9mIERPTSBhdHRyaWJ1dGUuIFRoZSByZXN1bHQgaXMKICogICBhbHdheXMgYSBzdHJpbmcgc2luY2UgRE9NIGF0dHJpYnV0ZXMgYXJlIHN0cmluZ3MuIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCAgdGhlbiB0aGUKICogICBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLgogKiAgIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9ImhlbGxvIHt7bmFtZX19Ij5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbgogKiAgIG9mIGBzY29wZTogeyBsb2NhbE5hbWU6J0BteUF0dHInIH1gLCB0aGVuIHdpZGdldCBzY29wZSBwcm9wZXJ0eSBgbG9jYWxOYW1lYCB3aWxsIHJlZmxlY3QKICogICB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlIG9mIGBoZWxsbyB7e25hbWV9fWAuIEFzIHRoZSBgbmFtZWAgYXR0cmlidXRlIGNoYW5nZXMgc28gd2lsbCB0aGUKICogICBgbG9jYWxOYW1lYCBwcm9wZXJ0eSBvbiB0aGUgd2lkZ2V0IHNjb3BlLiBUaGUgYG5hbWVgIGlzIHJlYWQgZnJvbSB0aGUgcGFyZW50IHNjb3BlIChub3QKICogICBjb21wb25lbnQgc2NvcGUpLgogKgogKiAqIGA9YCBvciBgPWF0dHJgIC0gc2V0IHVwIGJpLWRpcmVjdGlvbmFsIGJpbmRpbmcgYmV0d2VlbiBhIGxvY2FsIHNjb3BlIHByb3BlcnR5IGFuZCB0aGUKICogICBwYXJlbnQgc2NvcGUgcHJvcGVydHkgb2YgbmFtZSBkZWZpbmVkIHZpYSB0aGUgdmFsdWUgb2YgdGhlIGBhdHRyYCBhdHRyaWJ1dGUuIElmIG5vIGBhdHRyYAogKiAgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUuCiAqICAgR2l2ZW4gYDx3aWRnZXQgbXktYXR0cj0icGFyZW50TW9kZWwiPmAgYW5kIHdpZGdldCBkZWZpbml0aW9uIG9mCiAqICAgYHNjb3BlOiB7IGxvY2FsTW9kZWw6Jz1teUF0dHInIH1gLCB0aGVuIHdpZGdldCBzY29wZSBwcm9wZXJ0eSBgbG9jYWxNb2RlbGAgd2lsbCByZWZsZWN0IHRoZQogKiAgIHZhbHVlIG9mIGBwYXJlbnRNb2RlbGAgb24gdGhlIHBhcmVudCBzY29wZS4gQW55IGNoYW5nZXMgdG8gYHBhcmVudE1vZGVsYCB3aWxsIGJlIHJlZmxlY3RlZAogKiAgIGluIGBsb2NhbE1vZGVsYCBhbmQgYW55IGNoYW5nZXMgaW4gYGxvY2FsTW9kZWxgIHdpbGwgcmVmbGVjdCBpbiBgcGFyZW50TW9kZWxgLiBJZiB0aGUgcGFyZW50CiAqICAgc2NvcGUgcHJvcGVydHkgZG9lc24ndCBleGlzdCwgaXQgd2lsbCB0aHJvdyBhIE5PTl9BU1NJR05BQkxFX01PREVMX0VYUFJFU1NJT04gZXhjZXB0aW9uLiBZb3UKICogICBjYW4gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2luZyBgPT9gIG9yIGA9P2F0dHJgIGluIG9yZGVyIHRvIGZsYWcgdGhlIHByb3BlcnR5IGFzIG9wdGlvbmFsLgogKgogKiAqIGAmYCBvciBgJmF0dHJgIC0gcHJvdmlkZXMgYSB3YXkgdG8gZXhlY3V0ZSBhbiBleHByZXNzaW9uIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnQgc2NvcGUuCiAqICAgSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlCiAqICAgbG9jYWwgbmFtZS4gR2l2ZW4gYDx3aWRnZXQgbXktYXR0cj0iY291bnQgPSBjb3VudCArIHZhbHVlIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZgogKiAgIGBzY29wZTogeyBsb2NhbEZuOicmbXlBdHRyJyB9YCwgdGhlbiBpc29sYXRlIHNjb3BlIHByb3BlcnR5IGBsb2NhbEZuYCB3aWxsIHBvaW50IHRvCiAqICAgYSBmdW5jdGlvbiB3cmFwcGVyIGZvciB0aGUgYGNvdW50ID0gY291bnQgKyB2YWx1ZWAgZXhwcmVzc2lvbi4gT2Z0ZW4gaXQncyBkZXNpcmFibGUgdG8KICogICBwYXNzIGRhdGEgZnJvbSB0aGUgaXNvbGF0ZWQgc2NvcGUgdmlhIGFuIGV4cHJlc3Npb24gdG8gdGhlIHBhcmVudCBzY29wZSwgdGhpcyBjYW4gYmUKICogICBkb25lIGJ5IHBhc3NpbmcgYSBtYXAgb2YgbG9jYWwgdmFyaWFibGUgbmFtZXMgYW5kIHZhbHVlcyBpbnRvIHRoZSBleHByZXNzaW9uIHdyYXBwZXIgZm4uCiAqICAgRm9yIGV4YW1wbGUsIGlmIHRoZSBleHByZXNzaW9uIGlzIGBpbmNyZW1lbnQoYW1vdW50KWAgdGhlbiB3ZSBjYW4gc3BlY2lmeSB0aGUgYW1vdW50IHZhbHVlCiAqICAgYnkgY2FsbGluZyB0aGUgYGxvY2FsRm5gIGFzIGBsb2NhbEZuKHthbW91bnQ6IDIyfSlgLgogKgogKgogKgogKiAjIyMjIGBjb250cm9sbGVyYAogKiBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBUaGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQgYmVmb3JlIHRoZQogKiBwcmUtbGlua2luZyBwaGFzZSBhbmQgaXQgaXMgc2hhcmVkIHdpdGggb3RoZXIgZGlyZWN0aXZlcyAoc2VlCiAqIGByZXF1aXJlYCBhdHRyaWJ1dGUpLiBUaGlzIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byBjb21tdW5pY2F0ZSB3aXRoIGVhY2ggb3RoZXIgYW5kIGF1Z21lbnQKICogZWFjaCBvdGhlcidzIGJlaGF2aW9yLiBUaGUgY29udHJvbGxlciBpcyBpbmplY3RhYmxlIChhbmQgc3VwcG9ydHMgYnJhY2tldCBub3RhdGlvbikgd2l0aCB0aGUgZm9sbG93aW5nIGxvY2FsczoKICoKICogKiBgJHNjb3BlYCAtIEN1cnJlbnQgc2NvcGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50CiAqICogYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudAogKiAqIGAkYXR0cnNgIC0gQ3VycmVudCBhdHRyaWJ1dGVzIG9iamVjdCBmb3IgdGhlIGVsZW1lbnQKICogKiBgJHRyYW5zY2x1ZGVgIC0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb24gcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZToKICogICBgZnVuY3Rpb24oW3Njb3BlXSwgY2xvbmVMaW5raW5nRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpYC4KICogICAgKiBgc2NvcGVgOiBvcHRpb25hbCBhcmd1bWVudCB0byBvdmVycmlkZSB0aGUgc2NvcGUuCiAqICAgICogYGNsb25lTGlua2luZ0ZuYDogb3B0aW9uYWwgYXJndW1lbnQgdG8gY3JlYXRlIGNsb25lcyBvZiB0aGUgb3JpZ2luYWwgdHJhbnNsY3VkZWQgY29udGVudC4KICogICAgKiBgZnV0dXJlUGFyZW50RWxlbWVudGA6CiAqICAgICAgICAqIGRlZmluZXMgdGhlIHBhcmVudCB0byB3aGljaCB0aGUgYGNsb25lTGlua2luZ0ZuYCB3aWxsIGFkZCB0aGUgY2xvbmVkIGVsZW1lbnRzLgogKiAgICAgICAgKiBkZWZhdWx0OiBgJGVsZW1lbnQucGFyZW50KClgIHJlc3AuIGAkZWxlbWVudGAgZm9yIGB0cmFuc2NsdWRlOidlbGVtZW50J2AgcmVzcC4gYHRyYW5zY2x1ZGU6dHJ1ZWAuCiAqICAgICAgICAqIG9ubHkgbmVlZGVkIGZvciB0cmFuc2NsdWRlcyB0aGF0IGFyZSBhbGxvd2VkIHRvIGNvbnRhaW4gbm9uIGh0bWwgZWxlbWVudHMgKGUuZy4gU1ZHIGVsZW1lbnRzKQogKiAgICAgICAgICBhbmQgd2hlbiB0aGUgYGNsb25lTGlua2luRm5gIGlzIHBhc3NlZCwKICogICAgICAgICAgYXMgdGhvc2UgZWxlbWVudHMgbmVlZCB0byBjcmVhdGVkIGFuZCBjbG9uZWQgaW4gYSBzcGVjaWFsIHdheSB3aGVuIHRoZXkgYXJlIGRlZmluZWQgb3V0c2lkZSB0aGVpcgogKiAgICAgICAgICB1c3VhbCBjb250YWluZXJzIChlLmcuIGxpa2UgYDxzdmc+YCkuCiAqICAgICAgICAqIFNlZSBhbHNvIHRoZSBgZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlYCBwcm9wZXJ0eS4KICoKICoKICogIyMjIyBgcmVxdWlyZWAKICogUmVxdWlyZSBhbm90aGVyIGRpcmVjdGl2ZSBhbmQgaW5qZWN0IGl0cyBjb250cm9sbGVyIGFzIHRoZSBmb3VydGggYXJndW1lbnQgdG8gdGhlIGxpbmtpbmcgZnVuY3Rpb24uIFRoZQogKiBgcmVxdWlyZWAgdGFrZXMgYSBzdHJpbmcgbmFtZSAob3IgYXJyYXkgb2Ygc3RyaW5ncykgb2YgdGhlIGRpcmVjdGl2ZShzKSB0byBwYXNzIGluLiBJZiBhbiBhcnJheSBpcyB1c2VkLCB0aGUKICogaW5qZWN0ZWQgYXJndW1lbnQgd2lsbCBiZSBhbiBhcnJheSBpbiBjb3JyZXNwb25kaW5nIG9yZGVyLiBJZiBubyBzdWNoIGRpcmVjdGl2ZSBjYW4gYmUKICogZm91bmQsIG9yIGlmIHRoZSBkaXJlY3RpdmUgZG9lcyBub3QgaGF2ZSBhIGNvbnRyb2xsZXIsIHRoZW4gYW4gZXJyb3IgaXMgcmFpc2VkLiBUaGUgbmFtZSBjYW4gYmUgcHJlZml4ZWQgd2l0aDoKICoKICogKiAobm8gcHJlZml4KSAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBvbiB0aGUgY3VycmVudCBlbGVtZW50LiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuCiAqICogYD9gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb3IgcGFzcyBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuCiAqICogYF5gIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCBhbmQgaXRzIHBhcmVudHMuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC4KICogKiBgP15gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cyBvciBwYXNzCiAqICAgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLgogKgogKgogKiAjIyMjIGBjb250cm9sbGVyQXNgCiAqIENvbnRyb2xsZXIgYWxpYXMgYXQgdGhlIGRpcmVjdGl2ZSBzY29wZS4gQW4gYWxpYXMgZm9yIHRoZSBjb250cm9sbGVyIHNvIGl0CiAqIGNhbiBiZSByZWZlcmVuY2VkIGF0IHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUuIFRoZSBkaXJlY3RpdmUgbmVlZHMgdG8gZGVmaW5lIGEgc2NvcGUgZm9yIHRoaXMKICogY29uZmlndXJhdGlvbiB0byBiZSB1c2VkLiBVc2VmdWwgaW4gdGhlIGNhc2Ugd2hlbiBkaXJlY3RpdmUgaXMgdXNlZCBhcyBjb21wb25lbnQuCiAqCiAqCiAqICMjIyMgYHJlc3RyaWN0YAogKiBTdHJpbmcgb2Ygc3Vic2V0IG9mIGBFQUNNYCB3aGljaCByZXN0cmljdHMgdGhlIGRpcmVjdGl2ZSB0byBhIHNwZWNpZmljIGRpcmVjdGl2ZQogKiBkZWNsYXJhdGlvbiBzdHlsZS4gSWYgb21pdHRlZCwgdGhlIGRlZmF1bHRzIChlbGVtZW50cyBhbmQgYXR0cmlidXRlcykgYXJlIHVzZWQuCiAqCiAqICogYEVgIC0gRWxlbWVudCBuYW1lIChkZWZhdWx0KTogYDxteS1kaXJlY3RpdmU+PC9teS1kaXJlY3RpdmU+YAogKiAqIGBBYCAtIEF0dHJpYnV0ZSAoZGVmYXVsdCk6IGA8ZGl2IG15LWRpcmVjdGl2ZT0iZXhwIj48L2Rpdj5gCiAqICogYENgIC0gQ2xhc3M6IGA8ZGl2IGNsYXNzPSJteS1kaXJlY3RpdmU6IGV4cDsiPjwvZGl2PmAKICogKiBgTWAgLSBDb21tZW50OiBgPCEtLSBkaXJlY3RpdmU6IG15LWRpcmVjdGl2ZSBleHAgLS0+YAogKgogKgogKiAjIyMjIGB0ZW1wbGF0ZU5hbWVzcGFjZWAKICogU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZG9jdW1lbnQgdHlwZSB1c2VkIGJ5IHRoZSBtYXJrdXAgaW4gdGhlIHRlbXBsYXRlLgogKiBBbmd1bGFySlMgbmVlZHMgdGhpcyBpbmZvcm1hdGlvbiBhcyB0aG9zZSBlbGVtZW50cyBuZWVkIHRvIGJlIGNyZWF0ZWQgYW5kIGNsb25lZAogKiBpbiBhIHNwZWNpYWwgd2F5IHdoZW4gdGhleSBhcmUgZGVmaW5lZCBvdXRzaWRlIHRoZWlyIHVzdWFsIGNvbnRhaW5lcnMgbGlrZSBgPHN2Zz5gIGFuZCBgPG1hdGg+YC4KICoKICogKiBgaHRtbGAgLSBBbGwgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIEhUTUwuIFJvb3Qgbm9kZXMgbWF5IGFsc28gYmUKICogICB0b3AtbGV2ZWwgZWxlbWVudHMgc3VjaCBhcyBgPHN2Zz5gIG9yIGA8bWF0aD5gLgogKiAqIGBzdmdgIC0gVGhlIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBTVkcgZWxlbWVudHMgKGV4Y2x1ZGluZyBgPG1hdGg+YCkuCiAqICogYG1hdGhgIC0gVGhlIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBNYXRoTUwgZWxlbWVudHMgKGV4Y2x1ZGluZyBgPHN2Zz5gKS4KICoKICogSWYgbm8gYHRlbXBsYXRlTmFtZXNwYWNlYCBpcyBzcGVjaWZpZWQsIHRoZW4gdGhlIG5hbWVzcGFjZSBpcyBjb25zaWRlcmVkIHRvIGJlIGBodG1sYC4KICoKICogIyMjIyBgdGVtcGxhdGVgCiAqIEhUTUwgbWFya3VwIHRoYXQgbWF5OgogKiAqIFJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IChkZWZhdWx0KS4KICogKiBSZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGl0c2VsZiAoaWYgYHJlcGxhY2VgIGlzIHRydWUgLSBERVBSRUNBVEVEKS4KICogKiBXcmFwIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCAoaWYgYHRyYW5zY2x1ZGVgIGlzIHRydWUpLgogKgogKiBWYWx1ZSBtYXkgYmU6CiAqCiAqICogQSBzdHJpbmcuIEZvciBleGFtcGxlIGA8ZGl2IHJlZC1vbi1ob3Zlcj57e2RlbGV0ZV9zdHJ9fTwvZGl2PmAuCiAqICogQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYAogKiAgIGZ1bmN0aW9uIGFwaSBiZWxvdykgYW5kIHJldHVybnMgYSBzdHJpbmcgdmFsdWUuCiAqCiAqCiAqICMjIyMgYHRlbXBsYXRlVXJsYAogKiBTYW1lIGFzIGB0ZW1wbGF0ZWAgYnV0IHRoZSB0ZW1wbGF0ZSBpcyBsb2FkZWQgZnJvbSB0aGUgc3BlY2lmaWVkIFVSTC4gQmVjYXVzZQogKiB0aGUgdGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgdGhlIGNvbXBpbGF0aW9uL2xpbmtpbmcgaXMgc3VzcGVuZGVkIHVudGlsIHRoZSB0ZW1wbGF0ZQogKiBpcyBsb2FkZWQuCiAqCiAqIFlvdSBjYW4gc3BlY2lmeSBgdGVtcGxhdGVVcmxgIGFzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgVVJMIG9yIGFzIGEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdHdvCiAqIGFyZ3VtZW50cyBgdEVsZW1lbnRgIGFuZCBgdEF0dHJzYCAoZGVzY3JpYmVkIGluIHRoZSBgY29tcGlsZWAgZnVuY3Rpb24gYXBpIGJlbG93KSBhbmQgcmV0dXJucwogKiBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIHVybC4gIEluIGVpdGhlciBjYXNlLCB0aGUgdGVtcGxhdGUgVVJMIGlzIHBhc3NlZCB0aHJvdWdoIHtAbGluawogKiBhcGkvbmcuJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmwgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9LgogKgogKgogKiAjIyMjIGByZXBsYWNlYCAoWypERVBSRUNBVEVEKiFdLCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciByZWxlYXNlKQogKiBzcGVjaWZ5IHdoYXQgdGhlIHRlbXBsYXRlIHNob3VsZCByZXBsYWNlLiBEZWZhdWx0cyB0byBgZmFsc2VgLgogKgogKiAqIGB0cnVlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuCiAqICogYGZhbHNlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LgogKgogKiBUaGUgcmVwbGFjZW1lbnQgcHJvY2VzcyBtaWdyYXRlcyBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgLyBjbGFzc2VzIGZyb20gdGhlIG9sZCBlbGVtZW50IHRvIHRoZSBuZXcKICogb25lLiBTZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUjY3JlYXRpbmctY3VzdG9tLWRpcmVjdGl2ZXNfY3JlYXRpbmctZGlyZWN0aXZlc190ZW1wbGF0ZS1leHBhbmRpbmctZGlyZWN0aXZlCiAqIERpcmVjdGl2ZXMgR3VpZGV9IGZvciBhbiBleGFtcGxlLgogKgogKiBUaGVyZSB2ZXJ5IGZldyBzY2VuYXJpb3Mgd2VyZSBlbGVtZW50IHJlcGxhY2VtZW50IGlzIHJlcXVpcmVkIGZvciB0aGUgYXBwbGljYXRpb24gZnVuY3Rpb24sCiAqIHRoZSBtYWluIG9uZSBiZWluZyByZXVzYWJsZSBjdXN0b20gY29tcG9uZW50cyB0aGF0IGFyZSB1c2VkIHdpdGhpbiBTVkcgY29udGV4dHMKICogKGJlY2F1c2UgU1ZHIGRvZXNuJ3Qgd29yayB3aXRoIGN1c3RvbSBlbGVtZW50cyBpbiB0aGUgRE9NIHRyZWUpLgogKgogKiAjIyMjIGB0cmFuc2NsdWRlYAogKiBjb21waWxlIHRoZSBjb250ZW50IG9mIHRoZSBlbGVtZW50IGFuZCBtYWtlIGl0IGF2YWlsYWJsZSB0byB0aGUgZGlyZWN0aXZlLgogKiBUeXBpY2FsbHkgdXNlZCB3aXRoIHtAbGluayBuZy5kaXJlY3RpdmU6bmdUcmFuc2NsdWRlCiAqIG5nVHJhbnNjbHVkZX0uIFRoZSBhZHZhbnRhZ2Ugb2YgdHJhbnNjbHVzaW9uIGlzIHRoYXQgdGhlIGxpbmtpbmcgZnVuY3Rpb24gcmVjZWl2ZXMgYQogKiB0cmFuc2NsdXNpb24gZnVuY3Rpb24gd2hpY2ggaXMgcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHNjb3BlLiBJbiBhIHR5cGljYWwgc2V0dXAgdGhlIHdpZGdldAogKiBjcmVhdGVzIGFuIGBpc29sYXRlYCBzY29wZSwgYnV0IHRoZSB0cmFuc2NsdXNpb24gaXMgbm90IGEgY2hpbGQsIGJ1dCBhIHNpYmxpbmcgb2YgdGhlIGBpc29sYXRlYAogKiBzY29wZS4gVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgdGhlIHdpZGdldCB0byBoYXZlIHByaXZhdGUgc3RhdGUsIGFuZCB0aGUgdHJhbnNjbHVzaW9uIHRvCiAqIGJlIGJvdW5kIHRvIHRoZSBwYXJlbnQgKHByZS1gaXNvbGF0ZWApIHNjb3BlLgogKgogKiAqIGB0cnVlYCAtIHRyYW5zY2x1ZGUgdGhlIGNvbnRlbnQgb2YgdGhlIGRpcmVjdGl2ZS4KICogKiBgJ2VsZW1lbnQnYCAtIHRyYW5zY2x1ZGUgdGhlIHdob2xlIGVsZW1lbnQgaW5jbHVkaW5nIGFueSBkaXJlY3RpdmVzIGRlZmluZWQgYXQgbG93ZXIgcHJpb3JpdHkuCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKk5vdGU6KiogV2hlbiB0ZXN0aW5nIGFuIGVsZW1lbnQgdHJhbnNjbHVkZSBkaXJlY3RpdmUgeW91IG11c3Qgbm90IHBsYWNlIHRoZSBkaXJlY3RpdmUgYXQgdGhlIHJvb3Qgb2YgdGhlCiAqIERPTSBmcmFnbWVudCB0aGF0IGlzIGJlaW5nIGNvbXBpbGVkLiBTZWUge0BsaW5rIGd1aWRlL3VuaXQtdGVzdGluZyN0ZXN0aW5nLXRyYW5zY2x1c2lvbi1kaXJlY3RpdmVzCiAqIFRlc3RpbmcgVHJhbnNjbHVzaW9uIERpcmVjdGl2ZXN9LgogKiA8L2Rpdj4KICoKICogIyMjIyBgY29tcGlsZWAKICoKICogYGBganMKICogICBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHsgLi4uIH0KICogYGBgCiAqCiAqIFRoZSBjb21waWxlIGZ1bmN0aW9uIGRlYWxzIHdpdGggdHJhbnNmb3JtaW5nIHRoZSB0ZW1wbGF0ZSBET00uIFNpbmNlIG1vc3QgZGlyZWN0aXZlcyBkbyBub3QgZG8KICogdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24sIGl0IGlzIG5vdCB1c2VkIG9mdGVuLiBUaGUgY29tcGlsZSBmdW5jdGlvbiB0YWtlcyB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czoKICoKICogICAqIGB0RWxlbWVudGAgLSB0ZW1wbGF0ZSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBoYXMgYmVlbiBkZWNsYXJlZC4gSXQgaXMKICogICAgIHNhZmUgdG8gZG8gdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24gb24gdGhlIGVsZW1lbnQgYW5kIGNoaWxkIGVsZW1lbnRzIG9ubHkuCiAqCiAqICAgKiBgdEF0dHJzYCAtIHRlbXBsYXRlIGF0dHJpYnV0ZXMgLSBOb3JtYWxpemVkIGxpc3Qgb2YgYXR0cmlidXRlcyBkZWNsYXJlZCBvbiB0aGlzIGVsZW1lbnQgc2hhcmVkCiAqICAgICBiZXR3ZWVuIGFsbCBkaXJlY3RpdmUgY29tcGlsZSBmdW5jdGlvbnMuCiAqCiAqICAgKiBgdHJhbnNjbHVkZWAgLSAgWypERVBSRUNBVEVEKiFdIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uOiBgZnVuY3Rpb24oc2NvcGUsIGNsb25lTGlua2luZ0ZuKWAKICoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAqICoqTm90ZToqKiBUaGUgdGVtcGxhdGUgaW5zdGFuY2UgYW5kIHRoZSBsaW5rIGluc3RhbmNlIG1heSBiZSBkaWZmZXJlbnQgb2JqZWN0cyBpZiB0aGUgdGVtcGxhdGUgaGFzCiAqIGJlZW4gY2xvbmVkLiBGb3IgdGhpcyByZWFzb24gaXQgaXMgKipub3QqKiBzYWZlIHRvIGRvIGFueXRoaW5nIG90aGVyIHRoYW4gRE9NIHRyYW5zZm9ybWF0aW9ucyB0aGF0CiAqIGFwcGx5IHRvIGFsbCBjbG9uZWQgRE9NIG5vZGVzIHdpdGhpbiB0aGUgY29tcGlsZSBmdW5jdGlvbi4gU3BlY2lmaWNhbGx5LCBET00gbGlzdGVuZXIgcmVnaXN0cmF0aW9uCiAqIHNob3VsZCBiZSBkb25lIGluIGEgbGlua2luZyBmdW5jdGlvbiByYXRoZXIgdGhhbiBpbiBhIGNvbXBpbGUgZnVuY3Rpb24uCiAqIDwvZGl2PgoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAqICoqTm90ZToqKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBjYW5ub3QgaGFuZGxlIGRpcmVjdGl2ZXMgdGhhdCByZWN1cnNpdmVseSB1c2UgdGhlbXNlbHZlcyBpbiB0aGVpcgogKiBvd24gdGVtcGxhdGVzIG9yIGNvbXBpbGUgZnVuY3Rpb25zLiBDb21waWxpbmcgdGhlc2UgZGlyZWN0aXZlcyByZXN1bHRzIGluIGFuIGluZmluaXRlIGxvb3AgYW5kIGEKICogc3RhY2sgb3ZlcmZsb3cgZXJyb3JzLgogKgogKiBUaGlzIGNhbiBiZSBhdm9pZGVkIGJ5IG1hbnVhbGx5IHVzaW5nICRjb21waWxlIGluIHRoZSBwb3N0TGluayBmdW5jdGlvbiB0byBpbXBlcmF0aXZlbHkgY29tcGlsZQogKiBhIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIGluc3RlYWQgb2YgcmVseWluZyBvbiBhdXRvbWF0aWMgdGVtcGxhdGUgY29tcGlsYXRpb24gdmlhIGB0ZW1wbGF0ZWAgb3IKICogYHRlbXBsYXRlVXJsYCBkZWNsYXJhdGlvbiBvciBtYW51YWwgY29tcGlsYXRpb24gaW5zaWRlIHRoZSBjb21waWxlIGZ1bmN0aW9uLgogKiA8L2Rpdj4KICoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZXJyb3IiPgogKiAqKk5vdGU6KiogVGhlIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0aGF0IGlzIHBhc3NlZCB0byB0aGUgY29tcGlsZSBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLCBhcyBpdAogKiAgIGUuZy4gZG9lcyBub3Qga25vdyBhYm91dCB0aGUgcmlnaHQgb3V0ZXIgc2NvcGUuIFBsZWFzZSB1c2UgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWQKICogICB0byB0aGUgbGluayBmdW5jdGlvbiBpbnN0ZWFkLgogKiA8L2Rpdj4KCiAqIEEgY29tcGlsZSBmdW5jdGlvbiBjYW4gaGF2ZSBhIHJldHVybiB2YWx1ZSB3aGljaCBjYW4gYmUgZWl0aGVyIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0LgogKgogKiAqIHJldHVybmluZyBhIChwb3N0LWxpbmspIGZ1bmN0aW9uIC0gaXMgZXF1aXZhbGVudCB0byByZWdpc3RlcmluZyB0aGUgbGlua2luZyBmdW5jdGlvbiB2aWEgdGhlCiAqICAgYGxpbmtgIHByb3BlcnR5IG9mIHRoZSBjb25maWcgb2JqZWN0IHdoZW4gdGhlIGNvbXBpbGUgZnVuY3Rpb24gaXMgZW1wdHkuCiAqCiAqICogcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGZ1bmN0aW9uKHMpIHJlZ2lzdGVyZWQgdmlhIGBwcmVgIGFuZCBgcG9zdGAgcHJvcGVydGllcyAtIGFsbG93cyB5b3UgdG8KICogICBjb250cm9sIHdoZW4gYSBsaW5raW5nIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlLiBTZWUgaW5mbyBhYm91dAogKiAgIHByZS1saW5raW5nIGFuZCBwb3N0LWxpbmtpbmcgZnVuY3Rpb25zIGJlbG93LgogKgogKgogKiAjIyMjIGBsaW5rYAogKiBUaGlzIHByb3BlcnR5IGlzIHVzZWQgb25seSBpZiB0aGUgYGNvbXBpbGVgIHByb3BlcnR5IGlzIG5vdCBkZWZpbmVkLgogKgogKiBgYGBqcwogKiAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIsIHRyYW5zY2x1ZGVGbikgeyAuLi4gfQogKiBgYGAKICoKICogVGhlIGxpbmsgZnVuY3Rpb24gaXMgcmVzcG9uc2libGUgZm9yIHJlZ2lzdGVyaW5nIERPTSBsaXN0ZW5lcnMgYXMgd2VsbCBhcyB1cGRhdGluZyB0aGUgRE9NLiBJdCBpcwogKiBleGVjdXRlZCBhZnRlciB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gY2xvbmVkLiBUaGlzIGlzIHdoZXJlIG1vc3Qgb2YgdGhlIGRpcmVjdGl2ZSBsb2dpYyB3aWxsIGJlCiAqIHB1dC4KICoKICogICAqIGBzY29wZWAgLSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gLSBUaGUgc2NvcGUgdG8gYmUgdXNlZCBieSB0aGUKICogICAgIGRpcmVjdGl2ZSBmb3IgcmVnaXN0ZXJpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXN9LgogKgogKiAgICogYGlFbGVtZW50YCAtIGluc3RhbmNlIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGlzIHRvIGJlIHVzZWQuIEl0IGlzIHNhZmUgdG8KICogICAgIG1hbmlwdWxhdGUgdGhlIGNoaWxkcmVuIG9mIHRoZSBlbGVtZW50IG9ubHkgaW4gYHBvc3RMaW5rYCBmdW5jdGlvbiBzaW5jZSB0aGUgY2hpbGRyZW4gaGF2ZQogKiAgICAgYWxyZWFkeSBiZWVuIGxpbmtlZC4KICoKICogICAqIGBpQXR0cnNgIC0gaW5zdGFuY2UgYXR0cmlidXRlcyAtIE5vcm1hbGl6ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzIGRlY2xhcmVkIG9uIHRoaXMgZWxlbWVudCBzaGFyZWQKICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBsaW5raW5nIGZ1bmN0aW9ucy4KICoKICogICAqIGBjb250cm9sbGVyYCAtIGEgY29udHJvbGxlciBpbnN0YW5jZSAtIEEgY29udHJvbGxlciBpbnN0YW5jZSBpZiBhdCBsZWFzdCBvbmUgZGlyZWN0aXZlIG9uIHRoZQogKiAgICAgZWxlbWVudCBkZWZpbmVzIGEgY29udHJvbGxlci4gVGhlIGNvbnRyb2xsZXIgaXMgc2hhcmVkIGFtb25nIGFsbCB0aGUgZGlyZWN0aXZlcywgd2hpY2ggYWxsb3dzCiAqICAgICB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGNvbnRyb2xsZXJzIGFzIGEgY29tbXVuaWNhdGlvbiBjaGFubmVsLgogKgogKiAgICogYHRyYW5zY2x1ZGVGbmAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlLgogKiAgICAgVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgYCR0cmFuc2NsdWRlYAogKiAgICAgcGFyYW1ldGVyIG9mIGRpcmVjdGl2ZSBjb250cm9sbGVycywgc2VlIHRoZXJlIGZvciBkZXRhaWxzLgogKiAgICAgYGZ1bmN0aW9uKFtzY29wZV0sIGNsb25lTGlua2luZ0ZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KWAuCiAqCiAqICMjIyMgUHJlLWxpbmtpbmcgZnVuY3Rpb24KICoKICogRXhlY3V0ZWQgYmVmb3JlIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLiBOb3Qgc2FmZSB0byBkbyBET00gdHJhbnNmb3JtYXRpb24gc2luY2UgdGhlCiAqIGNvbXBpbGVyIGxpbmtpbmcgZnVuY3Rpb24gd2lsbCBmYWlsIHRvIGxvY2F0ZSB0aGUgY29ycmVjdCBlbGVtZW50cyBmb3IgbGlua2luZy4KICoKICogIyMjIyBQb3N0LWxpbmtpbmcgZnVuY3Rpb24KICoKICogRXhlY3V0ZWQgYWZ0ZXIgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuIEl0IGlzIHNhZmUgdG8gZG8gRE9NIHRyYW5zZm9ybWF0aW9uIGluIHRoZSBwb3N0LWxpbmtpbmcgZnVuY3Rpb24uCiAqCiAqIDxhIG5hbWU9IkF0dHJpYnV0ZXMiPjwvYT4KICogIyMjIEF0dHJpYnV0ZXMKICoKICogVGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyBBdHRyaWJ1dGVzfSBvYmplY3QgLSBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIgaW4gdGhlCiAqIGBsaW5rKClgIG9yIGBjb21waWxlKClgIGZ1bmN0aW9ucy4gSXQgaGFzIGEgdmFyaWV0eSBvZiB1c2VzLgogKgogKiBhY2Nlc3NpbmcgKk5vcm1hbGl6ZWQgYXR0cmlidXRlIG5hbWVzOioKICogRGlyZWN0aXZlcyBsaWtlICduZ0JpbmQnIGNhbiBiZSBleHByZXNzZWQgaW4gbWFueSB3YXlzOiAnbmc6YmluZCcsIGBkYXRhLW5nLWJpbmRgLCBvciAneC1uZy1iaW5kJy4KICogdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFsbG93cyBmb3Igbm9ybWFsaXplZCBhY2Nlc3MgdG8KICogICB0aGUgYXR0cmlidXRlcy4KICoKICogKiAqRGlyZWN0aXZlIGludGVyLWNvbW11bmljYXRpb246KiBBbGwgZGlyZWN0aXZlcyBzaGFyZSB0aGUgc2FtZSBpbnN0YW5jZSBvZiB0aGUgYXR0cmlidXRlcwogKiAgIG9iamVjdCB3aGljaCBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gdXNlIHRoZSBhdHRyaWJ1dGVzIG9iamVjdCBhcyBpbnRlciBkaXJlY3RpdmUKICogICBjb21tdW5pY2F0aW9uLgogKgogKiAqICpTdXBwb3J0cyBpbnRlcnBvbGF0aW9uOiogSW50ZXJwb2xhdGlvbiBhdHRyaWJ1dGVzIGFyZSBhc3NpZ25lZCB0byB0aGUgYXR0cmlidXRlIG9iamVjdAogKiAgIGFsbG93aW5nIG90aGVyIGRpcmVjdGl2ZXMgdG8gcmVhZCB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlLgogKgogKiAqICpPYnNlcnZpbmcgaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZXM6KiBVc2UgYCRvYnNlcnZlYCB0byBvYnNlcnZlIHRoZSB2YWx1ZSBjaGFuZ2VzIG9mIGF0dHJpYnV0ZXMKICogICB0aGF0IGNvbnRhaW4gaW50ZXJwb2xhdGlvbiAoZS5nLiBgc3JjPSJ7e2Jhcn19ImApLiBOb3Qgb25seSBpcyB0aGlzIHZlcnkgZWZmaWNpZW50IGJ1dCBpdCdzIGFsc28KICogICB0aGUgb25seSB3YXkgdG8gZWFzaWx5IGdldCB0aGUgYWN0dWFsIHZhbHVlIGJlY2F1c2UgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlIHRoZSBpbnRlcnBvbGF0aW9uCiAqICAgaGFzbid0IGJlZW4gZXZhbHVhdGVkIHlldCBhbmQgc28gdGhlIHZhbHVlIGlzIGF0IHRoaXMgdGltZSBzZXQgdG8gYHVuZGVmaW5lZGAuCiAqCiAqIGBgYGpzCiAqIGZ1bmN0aW9uIGxpbmtpbmdGbihzY29wZSwgZWxtLCBhdHRycywgY3RybCkgewogKiAgIC8vIGdldCB0aGUgYXR0cmlidXRlIHZhbHVlCiAqICAgY29uc29sZS5sb2coYXR0cnMubmdNb2RlbCk7CiAqCiAqICAgLy8gY2hhbmdlIHRoZSBhdHRyaWJ1dGUKICogICBhdHRycy4kc2V0KCduZ01vZGVsJywgJ25ldyB2YWx1ZScpOwogKgogKiAgIC8vIG9ic2VydmUgY2hhbmdlcyB0byBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlCiAqICAgYXR0cnMuJG9ic2VydmUoJ25nTW9kZWwnLCBmdW5jdGlvbih2YWx1ZSkgewogKiAgICAgY29uc29sZS5sb2coJ25nTW9kZWwgaGFzIGNoYW5nZWQgdmFsdWUgdG8gJyArIHZhbHVlKTsKICogICB9KTsKICogfQogKiBgYGAKICoKICogQmVsb3cgaXMgYW4gZXhhbXBsZSB1c2luZyBgJGNvbXBpbGVQcm92aWRlcmAuCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKk5vdGUqKjogVHlwaWNhbGx5IGRpcmVjdGl2ZXMgYXJlIHJlZ2lzdGVyZWQgd2l0aCBgbW9kdWxlLmRpcmVjdGl2ZWAuIFRoZSBleGFtcGxlIGJlbG93IGlzCiAqIHRvIGlsbHVzdHJhdGUgaG93IGAkY29tcGlsZWAgd29ya3MuCiAqIDwvZGl2PgogKgogPGV4YW1wbGUgbW9kdWxlPSJjb21waWxlRXhhbXBsZSI+CiAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgPHNjcmlwdD4KICAgICAgYW5ndWxhci5tb2R1bGUoJ2NvbXBpbGVFeGFtcGxlJywgW10sIGZ1bmN0aW9uKCRjb21waWxlUHJvdmlkZXIpIHsKICAgICAgICAvLyBjb25maWd1cmUgbmV3ICdjb21waWxlJyBkaXJlY3RpdmUgYnkgcGFzc2luZyBhIGRpcmVjdGl2ZQogICAgICAgIC8vIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIGluamVjdHMgdGhlICckY29tcGlsZScKICAgICAgICAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgnY29tcGlsZScsIGZ1bmN0aW9uKCRjb21waWxlKSB7CiAgICAgICAgICAvLyBkaXJlY3RpdmUgZmFjdG9yeSBjcmVhdGVzIGEgbGluayBmdW5jdGlvbgogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykgewogICAgICAgICAgICBzY29wZS4kd2F0Y2goCiAgICAgICAgICAgICAgZnVuY3Rpb24oc2NvcGUpIHsKICAgICAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gZm9yIGNoYW5nZXMKICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS4kZXZhbChhdHRycy5jb21waWxlKTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSAnY29tcGlsZScgZXhwcmVzc2lvbiBjaGFuZ2VzCiAgICAgICAgICAgICAgICAvLyBhc3NpZ24gaXQgaW50byB0aGUgY3VycmVudCBET00KICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7CgogICAgICAgICAgICAgICAgLy8gY29tcGlsZSB0aGUgbmV3IERPTSBhbmQgbGluayBpdCB0byB0aGUgY3VycmVudAogICAgICAgICAgICAgICAgLy8gc2NvcGUuCiAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBvbmx5IGNvbXBpbGUgLmNoaWxkTm9kZXMgc28gdGhhdAogICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgZ2V0IGludG8gaW5maW5pdGUgbG9vcCBjb21waWxpbmcgb3Vyc2VsdmVzCiAgICAgICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICk7CiAgICAgICAgICB9OwogICAgICAgIH0pOwogICAgICB9KQogICAgICAuY29udHJvbGxlcignR3JlZXRlckNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICRzY29wZS5uYW1lID0gJ0FuZ3VsYXInOwogICAgICAgICRzY29wZS5odG1sID0gJ0hlbGxvIHt7bmFtZX19JzsKICAgICAgfV0pOwogICAgPC9zY3JpcHQ+CiAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkdyZWV0ZXJDb250cm9sbGVyIj4KICAgICAgPGlucHV0IG5nLW1vZGVsPSJuYW1lIj4gPGJyPgogICAgICA8dGV4dGFyZWEgbmctbW9kZWw9Imh0bWwiPjwvdGV4dGFyZWE+IDxicj4KICAgICAgPGRpdiBjb21waWxlPSJodG1sIj48L2Rpdj4KICAgIDwvZGl2PgogICA8L2ZpbGU+CiAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgIGl0KCdzaG91bGQgYXV0byBjb21waWxlJywgZnVuY3Rpb24oKSB7CiAgICAgICB2YXIgdGV4dGFyZWEgPSAkKCd0ZXh0YXJlYScpOwogICAgICAgdmFyIG91dHB1dCA9ICQoJ2Rpdltjb21waWxlXScpOwogICAgICAgLy8gVGhlIGluaXRpYWwgc3RhdGUgcmVhZHMgJ0hlbGxvIEFuZ3VsYXInLgogICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIEFuZ3VsYXInKTsKICAgICAgIHRleHRhcmVhLmNsZWFyKCk7CiAgICAgICB0ZXh0YXJlYS5zZW5kS2V5cygne3tuYW1lfX0hJyk7CiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9CZSgnQW5ndWxhciEnKTsKICAgICB9KTsKICAgPC9maWxlPgogPC9leGFtcGxlPgoKICoKICoKICogQHBhcmFtIHtzdHJpbmd8RE9NRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IG9yIEhUTUwgc3RyaW5nIHRvIGNvbXBpbGUgaW50byBhIHRlbXBsYXRlIGZ1bmN0aW9uLgogKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZSBmdW5jdGlvbiBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcy4KICogQHBhcmFtIHtudW1iZXJ9IG1heFByaW9yaXR5IG9ubHkgYXBwbHkgZGlyZWN0aXZlcyBsb3dlciB0aGFuIGdpdmVuIHByaW9yaXR5IChPbmx5IGVmZmVjdHMgdGhlCiAqICAgICAgICAgICAgICAgICByb290IGVsZW1lbnQocyksIG5vdCB0aGVpciBjaGlsZHJlbikKICogQHJldHVybnMge2Z1bmN0aW9uKHNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IGEgbGluayBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIGJpbmQgdGVtcGxhdGUKICogKGEgRE9NIGVsZW1lbnQvdHJlZSkgdG8gYSBzY29wZS4gV2hlcmU6CiAqCiAqICAqIGBzY29wZWAgLSBBIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIFNjb3BlfSB0byBiaW5kIHRvLgogKiAgKiBgY2xvbmVBdHRhY2hGbmAgLSBJZiBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGxpbmsgZnVuY3Rpb24gd2lsbCBjbG9uZSB0aGUKICogIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGUKICogIGNsb25lZCBlbGVtZW50cyB0byB0aGUgRE9NIGRvY3VtZW50IGF0IHRoZSBhcHByb3ByaWF0ZSBwbGFjZS4gVGhlIGBjbG9uZUF0dGFjaEZuYCBpcwogKiAgY2FsbGVkIGFzOiA8YnI+IGBjbG9uZUF0dGFjaEZuKGNsb25lZEVsZW1lbnQsIHNjb3BlKWAgd2hlcmU6CiAqCiAqICAgICAgKiBgY2xvbmVkRWxlbWVudGAgLSBpcyBhIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBgZWxlbWVudGAgcGFzc2VkIGludG8gdGhlIGNvbXBpbGVyLgogKiAgICAgICogYHNjb3BlYCAtIGlzIHRoZSBjdXJyZW50IHNjb3BlIHdpdGggd2hpY2ggdGhlIGxpbmtpbmcgZnVuY3Rpb24gaXMgd29ya2luZyB3aXRoLgogKgogKiBDYWxsaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHRlbXBsYXRlLiBJdCBpcyBlaXRoZXIgdGhlIG9yaWdpbmFsCiAqIGVsZW1lbnQgcGFzc2VkIGluLCBvciB0aGUgY2xvbmUgb2YgdGhlIGVsZW1lbnQgaWYgdGhlIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZC4KICoKICogQWZ0ZXIgbGlua2luZyB0aGUgdmlldyBpcyBub3QgdXBkYXRlZCB1bnRpbCBhZnRlciBhIGNhbGwgdG8gJGRpZ2VzdCB3aGljaCB0eXBpY2FsbHkgaXMgZG9uZSBieQogKiBBbmd1bGFyIGF1dG9tYXRpY2FsbHkuCiAqCiAqIElmIHlvdSBuZWVkIGFjY2VzcyB0byB0aGUgYm91bmQgdmlldywgdGhlcmUgYXJlIHR3byB3YXlzIHRvIGRvIGl0OgogKgogKiAtIElmIHlvdSBhcmUgbm90IGFza2luZyB0aGUgbGlua2luZyBmdW5jdGlvbiB0byBjbG9uZSB0aGUgdGVtcGxhdGUsIGNyZWF0ZSB0aGUgRE9NIGVsZW1lbnQocykKICogICBiZWZvcmUgeW91IHNlbmQgdGhlbSB0byB0aGUgY29tcGlsZXIgYW5kIGtlZXAgdGhpcyByZWZlcmVuY2UgYXJvdW5kLgogKiAgIGBgYGpzCiAqICAgICB2YXIgZWxlbWVudCA9ICRjb21waWxlKCc8cD57e3RvdGFsfX08L3A+Jykoc2NvcGUpOwogKiAgIGBgYAogKgogKiAtIGlmIG9uIHRoZSBvdGhlciBoYW5kLCB5b3UgbmVlZCB0aGUgZWxlbWVudCB0byBiZSBjbG9uZWQsIHRoZSB2aWV3IHJlZmVyZW5jZSBmcm9tIHRoZSBvcmlnaW5hbAogKiAgIGV4YW1wbGUgd291bGQgbm90IHBvaW50IHRvIHRoZSBjbG9uZSwgYnV0IHJhdGhlciB0byB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgdGhhdCB3YXMgY2xvbmVkLiBJbgogKiAgIHRoaXMgY2FzZSwgeW91IGNhbiBhY2Nlc3MgdGhlIGNsb25lIHZpYSB0aGUgY2xvbmVBdHRhY2hGbjoKICogICBgYGBqcwogKiAgICAgdmFyIHRlbXBsYXRlRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgnPHA+e3t0b3RhbH19PC9wPicpLAogKiAgICAgICAgIHNjb3BlID0gLi4uLjsKICoKICogICAgIHZhciBjbG9uZWRFbGVtZW50ID0gJGNvbXBpbGUodGVtcGxhdGVFbGVtZW50KShzY29wZSwgZnVuY3Rpb24oY2xvbmVkRWxlbWVudCwgc2NvcGUpIHsKICogICAgICAgLy9hdHRhY2ggdGhlIGNsb25lIHRvIERPTSBkb2N1bWVudCBhdCB0aGUgcmlnaHQgcGxhY2UKICogICAgIH0pOwogKgogKiAgICAgLy9ub3cgd2UgaGF2ZSByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBET00gdmlhIGBjbG9uZWRFbGVtZW50YAogKiAgIGBgYAogKgogKgogKiBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRoZSBjb21waWxlciB3b3Jrcywgc2VlIHRoZQogKiB7QGxpbmsgZ3VpZGUvY29tcGlsZXIgQW5ndWxhciBIVE1MIENvbXBpbGVyfSBzZWN0aW9uIG9mIHRoZSBEZXZlbG9wZXIgR3VpZGUuCiAqLwoKdmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpOwoKLyoqCiAqIEBuZ2RvYyBwcm92aWRlcgogKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKi8KJENvbXBpbGVQcm92aWRlci4kaW5qZWN0ID0gWyckcHJvdmlkZScsICckJHNhbml0aXplVXJpUHJvdmlkZXInXTsKZnVuY3Rpb24gJENvbXBpbGVQcm92aWRlcigkcHJvdmlkZSwgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyKSB7CiAgdmFyIGhhc0RpcmVjdGl2ZXMgPSB7fSwKICAgICAgU3VmZml4ID0gJ0RpcmVjdGl2ZScsCiAgICAgIENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUCA9IC9eXHMqZGlyZWN0aXZlXDpccyooW1xkXHdfXC1dKylccysoLiopJC8sCiAgICAgIENMQVNTX0RJUkVDVElWRV9SRUdFWFAgPSAvKChbXGRcd19cLV0rKSg/Olw6KFteO10rKSk/Oz8pLywKICAgICAgQUxMX09SX05PVEhJTkdfQVRUUlMgPSBtYWtlTWFwKCduZ1NyYyxuZ1NyY3NldCxzcmMsc3Jjc2V0Jyk7CgogIC8vIFJlZjogaHR0cDovL2RldmVsb3BlcnMud2hhdHdnLm9yZy93ZWJhcHBhcGlzLmh0bWwjZXZlbnQtaGFuZGxlci1pZGwtYXR0cmlidXRlcwogIC8vIFRoZSBhc3N1bXB0aW9uIGlzIHRoYXQgZnV0dXJlIERPTSBldmVudCBhdHRyaWJ1dGUgbmFtZXMgd2lsbCBiZWdpbiB3aXRoCiAgLy8gJ29uJyBhbmQgYmUgY29tcG9zZWQgb2Ygb25seSBFbmdsaXNoIGxldHRlcnMuCiAgdmFyIEVWRU5UX0hBTkRMRVJfQVRUUl9SRUdFWFAgPSAvXihvblthLXpdK3xmb3JtYWN0aW9uKSQvOwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUKICAgKiBAa2luZCBmdW5jdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmVnaXN0ZXIgYSBuZXcgZGlyZWN0aXZlIHdpdGggdGhlIGNvbXBpbGVyLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBpbiBjYW1lbC1jYXNlIChpLmUuIDxjb2RlPm5nQmluZDwvY29kZT4gd2hpY2gKICAgKiAgICB3aWxsIG1hdGNoIGFzIDxjb2RlPm5nLWJpbmQ8L2NvZGU+KSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGUKICAgKiAgICBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZhY3Rvcmllcy4KICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBkaXJlY3RpdmVGYWN0b3J5IEFuIGluamVjdGFibGUgZGlyZWN0aXZlIGZhY3RvcnkgZnVuY3Rpb24uIFNlZQogICAqICAgIHtAbGluayBndWlkZS9kaXJlY3RpdmV9IGZvciBtb3JlIGluZm8uCiAgICogQHJldHVybnMge25nLiRjb21waWxlUHJvdmlkZXJ9IFNlbGYgZm9yIGNoYWluaW5nLgogICAqLwogICB0aGlzLmRpcmVjdGl2ZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZUZhY3RvcnkpIHsKICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdkaXJlY3RpdmUnKTsKICAgIGlmIChpc1N0cmluZyhuYW1lKSkgewogICAgICBhc3NlcnRBcmcoZGlyZWN0aXZlRmFjdG9yeSwgJ2RpcmVjdGl2ZUZhY3RvcnknKTsKICAgICAgaWYgKCFoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXSA9IFtdOwogICAgICAgICRwcm92aWRlLmZhY3RvcnkobmFtZSArIFN1ZmZpeCwgWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLAogICAgICAgICAgZnVuY3Rpb24oJGluamVjdG9yLCAkZXhjZXB0aW9uSGFuZGxlcikgewogICAgICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IFtdOwogICAgICAgICAgICBmb3JFYWNoKGhhc0RpcmVjdGl2ZXNbbmFtZV0sIGZ1bmN0aW9uKGRpcmVjdGl2ZUZhY3RvcnksIGluZGV4KSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHZhciBkaXJlY3RpdmUgPSAkaW5qZWN0b3IuaW52b2tlKGRpcmVjdGl2ZUZhY3RvcnkpOwogICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmUgPSB7IGNvbXBpbGU6IHZhbHVlRm4oZGlyZWN0aXZlKSB9OwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZGlyZWN0aXZlLmNvbXBpbGUgJiYgZGlyZWN0aXZlLmxpbmspIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLmNvbXBpbGUgPSB2YWx1ZUZuKGRpcmVjdGl2ZS5saW5rKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5wcmlvcml0eSA9IGRpcmVjdGl2ZS5wcmlvcml0eSB8fCAwOwogICAgICAgICAgICAgICAgZGlyZWN0aXZlLmluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmUubmFtZSA9IGRpcmVjdGl2ZS5uYW1lIHx8IG5hbWU7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlIHx8IChkaXJlY3RpdmUuY29udHJvbGxlciAmJiBkaXJlY3RpdmUubmFtZSk7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0VBJzsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBkaXJlY3RpdmVzOwogICAgICAgICAgfV0pOwogICAgICB9CiAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0ucHVzaChkaXJlY3RpdmVGYWN0b3J5KTsKICAgIH0gZWxzZSB7CiAgICAgIGZvckVhY2gobmFtZSwgcmV2ZXJzZVBhcmFtcyhyZWdpc3RlckRpcmVjdGl2ZSkpOwogICAgfQogICAgcmV0dXJuIHRoaXM7CiAgfTsKCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2FIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0CiAgICogQGtpbmQgZnVuY3Rpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmUKICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi4KICAgKgogICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuCiAgICoKICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGFbaHJlZl0gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50bwogICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdGAKICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSwKICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uCiAgICoKICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguCiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvcgogICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS4KICAgKi8KICB0aGlzLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7CiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHsKICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCgpOwogICAgfQogIH07CgoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QKICAgKiBAa2luZCBmdW5jdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZQogICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi4KICAgKgogICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuCiAgICoKICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGltZ1tzcmNdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG8KICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0YAogICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLAogICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS4KICAgKgogICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC4KICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yCiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLgogICAqLwogIHRoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7CiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHsKICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChyZWdleHApOwogICAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7CiAgICB9CiAgfTsKCiAgdGhpcy4kZ2V0ID0gWwogICAgICAgICAgICAnJGluamVjdG9yJywgJyRpbnRlcnBvbGF0ZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckcGFyc2UnLAogICAgICAgICAgICAnJGNvbnRyb2xsZXInLCAnJHJvb3RTY29wZScsICckZG9jdW1lbnQnLCAnJHNjZScsICckYW5pbWF0ZScsICckJHNhbml0aXplVXJpJywKICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgICAkaW50ZXJwb2xhdGUsICAgJGV4Y2VwdGlvbkhhbmRsZXIsICAgJGh0dHAsICAgJHRlbXBsYXRlQ2FjaGUsICAgJHBhcnNlLAogICAgICAgICAgICAgJGNvbnRyb2xsZXIsICAgJHJvb3RTY29wZSwgICAkZG9jdW1lbnQsICAgJHNjZSwgICAkYW5pbWF0ZSwgICAkJHNhbml0aXplVXJpKSB7CgogICAgdmFyIEF0dHJpYnV0ZXMgPSBmdW5jdGlvbihlbGVtZW50LCBhdHRyaWJ1dGVzVG9Db3B5KSB7CiAgICAgIGlmIChhdHRyaWJ1dGVzVG9Db3B5KSB7CiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzVG9Db3B5KTsKICAgICAgICB2YXIgaSwgbCwga2V5OwoKICAgICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgIGtleSA9IGtleXNbaV07CiAgICAgICAgICB0aGlzW2tleV0gPSBhdHRyaWJ1dGVzVG9Db3B5W2tleV07CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJGF0dHIgPSB7fTsKICAgICAgfQoKICAgICAgdGhpcy4kJGVsZW1lbnQgPSBlbGVtZW50OwogICAgfTsKCiAgICBBdHRyaWJ1dGVzLnByb3RvdHlwZSA9IHsKICAgICAgJG5vcm1hbGl6ZTogZGlyZWN0aXZlTm9ybWFsaXplLAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhZGRDbGFzcwogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogQWRkcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIHRvIHRoZSBlbGVtZW50LiBJZiBhbmltYXRpb25zCiAgICAgICAqIGFyZSBlbmFibGVkIHRoZW4gYW4gYW5pbWF0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGZvciB0aGUgY2xhc3MgYWRkaXRpb24uCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudAogICAgICAgKi8KICAgICAgJGFkZENsYXNzIDogZnVuY3Rpb24oY2xhc3NWYWwpIHsKICAgICAgICBpZihjbGFzc1ZhbCAmJiBjbGFzc1ZhbC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgY2xhc3NWYWwpOwogICAgICAgIH0KICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRyZW1vdmVDbGFzcwogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogUmVtb3ZlcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIGZyb20gdGhlIGVsZW1lbnQuIElmCiAgICAgICAqIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgdGhlbiBhbiBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBjbGFzcyByZW1vdmFsLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NWYWwgVGhlIGNsYXNzTmFtZSB2YWx1ZSB0aGF0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50CiAgICAgICAqLwogICAgICAkcmVtb3ZlQ2xhc3MgOiBmdW5jdGlvbihjbGFzc1ZhbCkgewogICAgICAgIGlmKGNsYXNzVmFsICYmIGNsYXNzVmFsLmxlbmd0aCA+IDApIHsKICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBjbGFzc1ZhbCk7CiAgICAgICAgfQogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHVwZGF0ZUNsYXNzCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBBZGRzIGFuZCByZW1vdmVzIHRoZSBhcHByb3ByaWF0ZSBDU1MgY2xhc3MgdmFsdWVzIHRvIHRoZSBlbGVtZW50IGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlCiAgICAgICAqIGJldHdlZW4gdGhlIG5ldyBhbmQgb2xkIENTUyBjbGFzcyB2YWx1ZXMgKHNwZWNpZmllZCBhcyBuZXdDbGFzc2VzIGFuZCBvbGRDbGFzc2VzKS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0NsYXNzZXMgVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSB2YWx1ZQogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkQ2xhc3NlcyBUaGUgZm9ybWVyIENTUyBjbGFzc05hbWUgdmFsdWUKICAgICAgICovCiAgICAgICR1cGRhdGVDbGFzcyA6IGZ1bmN0aW9uKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpIHsKICAgICAgICB2YXIgdG9BZGQgPSB0b2tlbkRpZmZlcmVuY2UobmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcyk7CiAgICAgICAgdmFyIHRvUmVtb3ZlID0gdG9rZW5EaWZmZXJlbmNlKG9sZENsYXNzZXMsIG5ld0NsYXNzZXMpOwoKICAgICAgICBpZih0b0FkZC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCB0b1JlbW92ZSk7CiAgICAgICAgfSBlbHNlIGlmKHRvUmVtb3ZlLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvQWRkKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgJGFuaW1hdGUuc2V0Q2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvQWRkLCB0b1JlbW92ZSk7CiAgICAgICAgfQogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIFNldCBhIG5vcm1hbGl6ZWQgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGluIGEgd2F5IHN1Y2ggdGhhdCBhbGwgZGlyZWN0aXZlcwogICAgICAgKiBjYW4gc2hhcmUgdGhlIGF0dHJpYnV0ZS4gVGhpcyBmdW5jdGlvbiBwcm9wZXJseSBoYW5kbGVzIGJvb2xlYW4gYXR0cmlidXRlcy4KICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKQogICAgICAgKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LiBJZiBgbnVsbGAgYXR0cmlidXRlIHdpbGwgYmUgZGVsZXRlZC4KICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gd3JpdGVBdHRyIElmIGZhbHNlLCBkb2VzIG5vdCB3cml0ZSB0aGUgdmFsdWUgdG8gRE9NIGVsZW1lbnQgYXR0cmlidXRlLgogICAgICAgKiAgICAgRGVmYXVsdHMgdG8gdHJ1ZS4KICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBhdHRyTmFtZSBPcHRpb25hbCBub25lIG5vcm1hbGl6ZWQgbmFtZS4gRGVmYXVsdHMgdG8ga2V5LgogICAgICAgKi8KICAgICAgJHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSwgd3JpdGVBdHRyLCBhdHRyTmFtZSkgewogICAgICAgIC8vIFRPRE86IGRlY2lkZSB3aGV0aGVyIG9yIG5vdCB0byB0aHJvdyBhbiBlcnJvciBpZiAiY2xhc3MiCiAgICAgICAgLy9pcyBzZXQgdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNpbmNlIGl0IG1heSBjYXVzZSAkdXBkYXRlQ2xhc3MgdG8KICAgICAgICAvL2JlY29tZSB1bnN0YWJsZS4KCiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLiQkZWxlbWVudFswXSwKICAgICAgICAgICAgYm9vbGVhbktleSA9IGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBrZXkpLAogICAgICAgICAgICBhbGlhc2VkS2V5ID0gZ2V0QWxpYXNlZEF0dHJOYW1lKG5vZGUsIGtleSksCiAgICAgICAgICAgIG9ic2VydmVyID0ga2V5LAogICAgICAgICAgICBub3JtYWxpemVkVmFsLAogICAgICAgICAgICBub2RlTmFtZTsKCiAgICAgICAgaWYgKGJvb2xlYW5LZXkpIHsKICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnByb3Aoa2V5LCB2YWx1ZSk7CiAgICAgICAgICBhdHRyTmFtZSA9IGJvb2xlYW5LZXk7CiAgICAgICAgfSBlbHNlIGlmKGFsaWFzZWRLZXkpIHsKICAgICAgICAgIHRoaXNbYWxpYXNlZEtleV0gPSB2YWx1ZTsKICAgICAgICAgIG9ic2VydmVyID0gYWxpYXNlZEtleTsKICAgICAgICB9CgogICAgICAgIHRoaXNba2V5XSA9IHZhbHVlOwoKICAgICAgICAvLyB0cmFuc2xhdGUgbm9ybWFsaXplZCBrZXkgdG8gYWN0dWFsIGtleQogICAgICAgIGlmIChhdHRyTmFtZSkgewogICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGF0dHJOYW1lID0gdGhpcy4kYXR0cltrZXldOwogICAgICAgICAgaWYgKCFhdHRyTmFtZSkgewogICAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZSA9IHNuYWtlX2Nhc2Uoa2V5LCAnLScpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbm9kZU5hbWUgPSBub2RlTmFtZV8odGhpcy4kJGVsZW1lbnQpOwoKICAgICAgICAvLyBzYW5pdGl6ZSBhW2hyZWZdIGFuZCBpbWdbc3JjXSB2YWx1ZXMKICAgICAgICBpZiAoKG5vZGVOYW1lID09PSAnYScgJiYga2V5ID09PSAnaHJlZicpIHx8CiAgICAgICAgICAgIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3JjJykpIHsKICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlID0gJCRzYW5pdGl6ZVVyaSh2YWx1ZSwga2V5ID09PSAnc3JjJyk7CiAgICAgICAgfQoKICAgICAgICBpZiAod3JpdGVBdHRyICE9PSBmYWxzZSkgewogICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdGhpcy4kJGVsZW1lbnQucmVtb3ZlQXR0cihhdHRyTmFtZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5hdHRyKGF0dHJOYW1lLCB2YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBmaXJlIG9ic2VydmVycwogICAgICAgIHZhciAkJG9ic2VydmVycyA9IHRoaXMuJCRvYnNlcnZlcnM7CiAgICAgICAgJCRvYnNlcnZlcnMgJiYgZm9yRWFjaCgkJG9ic2VydmVyc1tvYnNlcnZlcl0sIGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBmbih2YWx1ZSk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9LAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRvYnNlcnZlCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBPYnNlcnZlcyBhbiBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlLgogICAgICAgKgogICAgICAgKiBUaGUgb2JzZXJ2ZXIgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIG9uY2UgZHVyaW5nIHRoZSBuZXh0IGAkZGlnZXN0YCBmb2xsb3dpbmcKICAgICAgICogY29tcGlsYXRpb24uIFRoZSBvYnNlcnZlciBpcyB0aGVuIGludm9rZWQgd2hlbmV2ZXIgdGhlIGludGVycG9sYXRlZCB2YWx1ZQogICAgICAgKiBjaGFuZ2VzLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpIC4KICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihpbnRlcnBvbGF0ZWRWYWx1ZSl9IGZuIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIKICAgICAgICAgICAgICAgIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBjaGFuZ2VzLgogICAgICAgKiAgICAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI0F0dHJpYnV0ZXMgRGlyZWN0aXZlc30gZ3VpZGUgZm9yIG1vcmUgaW5mby4KICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBvYnNlcnZlci4KICAgICAgICovCiAgICAgICRvYnNlcnZlOiBmdW5jdGlvbihrZXksIGZuKSB7CiAgICAgICAgdmFyIGF0dHJzID0gdGhpcywKICAgICAgICAgICAgJCRvYnNlcnZlcnMgPSAoYXR0cnMuJCRvYnNlcnZlcnMgfHwgKGF0dHJzLiQkb2JzZXJ2ZXJzID0ge30pKSwKICAgICAgICAgICAgbGlzdGVuZXJzID0gKCQkb2JzZXJ2ZXJzW2tleV0gfHwgKCQkb2JzZXJ2ZXJzW2tleV0gPSBbXSkpOwoKICAgICAgICBsaXN0ZW5lcnMucHVzaChmbik7CiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCFsaXN0ZW5lcnMuJCRpbnRlcikgewogICAgICAgICAgICAvLyBubyBvbmUgcmVnaXN0ZXJlZCBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiwgc28gbGV0cyBjYWxsIGl0IG1hbnVhbGx5CiAgICAgICAgICAgIGZuKGF0dHJzW2tleV0pOwogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICBhcnJheVJlbW92ZShsaXN0ZW5lcnMsIGZuKTsKICAgICAgICB9OwogICAgICB9CiAgICB9OwoKICAgIHZhciBzdGFydFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpLAogICAgICAgIGVuZFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKSwKICAgICAgICBkZW5vcm1hbGl6ZVRlbXBsYXRlID0gKHN0YXJ0U3ltYm9sID09ICd7eycgfHwgZW5kU3ltYm9sICA9PSAnfX0nKQogICAgICAgICAgICA/IGlkZW50aXR5CiAgICAgICAgICAgIDogZnVuY3Rpb24gZGVub3JtYWxpemVUZW1wbGF0ZSh0ZW1wbGF0ZSkgewogICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC9ce1x7L2csIHN0YXJ0U3ltYm9sKS5yZXBsYWNlKC99fS9nLCBlbmRTeW1ib2wpOwogICAgICAgIH0sCiAgICAgICAgTkdfQVRUUl9CSU5ESU5HID0gL15uZ0F0dHJbQS1aXS87CgoKICAgIHJldHVybiBjb21waWxlOwoKICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCiAgICBmdW5jdGlvbiBjb21waWxlKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwKICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkgewogICAgICBpZiAoISgkY29tcGlsZU5vZGVzIGluc3RhbmNlb2YganFMaXRlKSkgewogICAgICAgIC8vIGpxdWVyeSBhbHdheXMgcmV3cmFwcywgd2hlcmVhcyB3ZSBuZWVkIHRvIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzZWxlY3RvciBzbyB0aGF0IHdlIGNhbgogICAgICAgIC8vIG1vZGlmeSBpdC4KICAgICAgICAkY29tcGlsZU5vZGVzID0ganFMaXRlKCRjb21waWxlTm9kZXMpOwogICAgICB9CiAgICAgIC8vIFdlIGNhbiBub3QgY29tcGlsZSB0b3AgbGV2ZWwgdGV4dCBlbGVtZW50cyBzaW5jZSB0ZXh0IG5vZGVzIGNhbiBiZSBtZXJnZWQgYW5kIHdlIHdpbGwKICAgICAgLy8gbm90IGJlIGFibGUgdG8gYXR0YWNoIHNjb3BlIGRhdGEgdG8gdGhlbSwgc28gd2Ugd2lsbCB3cmFwIHRoZW0gaW4gPHNwYW4+CiAgICAgIGZvckVhY2goJGNvbXBpbGVOb2RlcywgZnVuY3Rpb24obm9kZSwgaW5kZXgpewogICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDMgLyogdGV4dCBub2RlICovICYmIG5vZGUubm9kZVZhbHVlLm1hdGNoKC9cUysvKSAvKiBub24tZW1wdHkgKi8gKSB7CiAgICAgICAgICAkY29tcGlsZU5vZGVzW2luZGV4XSA9IGpxTGl0ZShub2RlKS53cmFwKCc8c3Bhbj48L3NwYW4+JykucGFyZW50KClbMF07CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdmFyIGNvbXBvc2l0ZUxpbmtGbiA9CiAgICAgICAgICAgICAgY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgJGNvbXBpbGVOb2RlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7CiAgICAgIHNhZmVBZGRDbGFzcygkY29tcGlsZU5vZGVzLCAnbmctc2NvcGUnKTsKICAgICAgdmFyIG5hbWVzcGFjZSA9IG51bGw7CiAgICAgIHJldHVybiBmdW5jdGlvbiBwdWJsaWNMaW5rRm4oc2NvcGUsIGNsb25lQ29ubmVjdEZuLCB0cmFuc2NsdWRlQ29udHJvbGxlcnMsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KXsKICAgICAgICBhc3NlcnRBcmcoc2NvcGUsICdzY29wZScpOwogICAgICAgIGlmICghbmFtZXNwYWNlKSB7CiAgICAgICAgICBuYW1lc3BhY2UgPSBkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzKGZ1dHVyZVBhcmVudEVsZW1lbnQpOwogICAgICAgICAgaWYgKG5hbWVzcGFjZSAhPT0gJ2h0bWwnKSB7CiAgICAgICAgICAgICRjb21waWxlTm9kZXMgPSBqcUxpdGUoCiAgICAgICAgICAgICAgd3JhcFRlbXBsYXRlKG5hbWVzcGFjZSwganFMaXRlKCc8ZGl2PicpLmFwcGVuZCgkY29tcGlsZU5vZGVzKS5odG1sKCkpCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBpbXBvcnRhbnQhITogd2UgbXVzdCBjYWxsIG91ciBqcUxpdGUuY2xvbmUoKSBzaW5jZSB0aGUgalF1ZXJ5IG9uZSBpcyB0cnlpbmcgdG8gYmUgc21hcnQKICAgICAgICAvLyBhbmQgc29tZXRpbWVzIGNoYW5nZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgRE9NLgogICAgICAgIHZhciAkbGlua05vZGUgPSBjbG9uZUNvbm5lY3RGbgogICAgICAgICAgPyBKUUxpdGVQcm90b3R5cGUuY2xvbmUuY2FsbCgkY29tcGlsZU5vZGVzKSAvLyBJTVBPUlRBTlQhISEKICAgICAgICAgIDogJGNvbXBpbGVOb2RlczsKCiAgICAgICAgaWYgKHRyYW5zY2x1ZGVDb250cm9sbGVycykgewogICAgICAgICAgZm9yICh2YXIgY29udHJvbGxlck5hbWUgaW4gdHJhbnNjbHVkZUNvbnRyb2xsZXJzKSB7CiAgICAgICAgICAgICRsaW5rTm9kZS5kYXRhKCckJyArIGNvbnRyb2xsZXJOYW1lICsgJ0NvbnRyb2xsZXInLCB0cmFuc2NsdWRlQ29udHJvbGxlcnNbY29udHJvbGxlck5hbWVdKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICRsaW5rTm9kZS5kYXRhKCckc2NvcGUnLCBzY29wZSk7CgogICAgICAgIGlmIChjbG9uZUNvbm5lY3RGbikgY2xvbmVDb25uZWN0Rm4oJGxpbmtOb2RlLCBzY29wZSk7CiAgICAgICAgaWYgKGNvbXBvc2l0ZUxpbmtGbikgY29tcG9zaXRlTGlua0ZuKHNjb3BlLCAkbGlua05vZGUsICRsaW5rTm9kZSwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pOwogICAgICAgIHJldHVybiAkbGlua05vZGU7CiAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gZGV0ZWN0TmFtZXNwYWNlRm9yQ2hpbGRFbGVtZW50cyhwYXJlbnRFbGVtZW50KSB7CiAgICAgIC8vIFRPRE86IE1ha2UgdGhpcyBkZXRlY3QgTWF0aE1MIGFzIHdlbGwuLi4KICAgICAgdmFyIG5vZGUgPSBwYXJlbnRFbGVtZW50ICYmIHBhcmVudEVsZW1lbnRbMF07CiAgICAgIGlmICghbm9kZSkgewogICAgICAgIHJldHVybiAnaHRtbCc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG5vZGVOYW1lXyhub2RlKSAhPT0gJ2ZvcmVpZ25vYmplY3QnICYmIG5vZGUudG9TdHJpbmcoKS5tYXRjaCgvU1ZHLykgPyAnc3ZnJzogJ2h0bWwnOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHsKICAgICAgdHJ5IHsKICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhjbGFzc05hbWUpOwogICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAvLyBpZ25vcmUsIHNpbmNlIGl0IG1lYW5zIHRoYXQgd2UgYXJlIHRyeWluZyB0byBzZXQgY2xhc3Mgb24KICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuCiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIENvbXBpbGUgZnVuY3Rpb24gbWF0Y2hlcyBlYWNoIG5vZGUgaW4gbm9kZUxpc3QgYWdhaW5zdCB0aGUgZGlyZWN0aXZlcy4gT25jZSBhbGwgZGlyZWN0aXZlcwogICAgICogZm9yIGEgcGFydGljdWxhciBub2RlIGFyZSBjb2xsZWN0ZWQgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGUgY29tcGlsZQogICAgICogZnVuY3Rpb25zIHJldHVybiB2YWx1ZXMgLSB0aGUgbGlua2luZyBmdW5jdGlvbnMgLSBhcmUgY29tYmluZWQgaW50byBhIGNvbXBvc2l0ZSBsaW5raW5nCiAgICAgKiBmdW5jdGlvbiwgd2hpY2ggaXMgdGhlIGEgbGlua2luZyBmdW5jdGlvbiBmb3IgdGhlIG5vZGUuCiAgICAgKgogICAgICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZUxpc3QgYW4gYXJyYXkgb2Ygbm9kZXMgb3IgTm9kZUxpc3QgdG8gY29tcGlsZQogICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZQogICAgICogICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS4KICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19ICRyb290RWxlbWVudCBJZiB0aGUgbm9kZUxpc3QgaXMgdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGF0aW9uIHRyZWUgdGhlbgogICAgICogICAgICAgIHRoZSByb290RWxlbWVudCBtdXN0IGJlIHNldCB0aGUganFMaXRlIGNvbGxlY3Rpb24gb2YgdGhlIGNvbXBpbGUgcm9vdC4gVGhpcyBpcwogICAgICogICAgICAgIG5lZWRlZCBzbyB0aGF0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBpdGVtcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCB3aWRnZXRzLgogICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXhQcmlvcml0eSBNYXggZGlyZWN0aXZlIHByaW9yaXR5LgogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGNvbXBvc2l0ZSBsaW5raW5nIGZ1bmN0aW9uIG9mIGFsbCBvZiB0aGUgbWF0Y2hlZCBkaXJlY3RpdmVzIG9yIG51bGwuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbXBpbGVOb2Rlcyhub2RlTGlzdCwgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7CiAgICAgIHZhciBsaW5rRm5zID0gW10sCiAgICAgICAgICBhdHRycywgZGlyZWN0aXZlcywgbm9kZUxpbmtGbiwgY2hpbGROb2RlcywgY2hpbGRMaW5rRm4sIGxpbmtGbkZvdW5kLCBub2RlTGlua0ZuRm91bmQ7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgYXR0cnMgPSBuZXcgQXR0cmlidXRlcygpOwoKICAgICAgICAvLyB3ZSBtdXN0IGFsd2F5cyByZWZlciB0byBub2RlTGlzdFtpXSBzaW5jZSB0aGUgbm9kZXMgY2FuIGJlIHJlcGxhY2VkIHVuZGVybmVhdGggdXMuCiAgICAgICAgZGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKG5vZGVMaXN0W2ldLCBbXSwgYXR0cnMsIGkgPT09IDAgPyBtYXhQcmlvcml0eSA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZURpcmVjdGl2ZSk7CgogICAgICAgIG5vZGVMaW5rRm4gPSAoZGlyZWN0aXZlcy5sZW5ndGgpCiAgICAgICAgICAgID8gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIG5vZGVMaXN0W2ldLCBhdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgW10sIFtdLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KQogICAgICAgICAgICA6IG51bGw7CgogICAgICAgIGlmIChub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4uc2NvcGUpIHsKICAgICAgICAgIHNhZmVBZGRDbGFzcyhhdHRycy4kJGVsZW1lbnQsICduZy1zY29wZScpOwogICAgICAgIH0KCiAgICAgICAgY2hpbGRMaW5rRm4gPSAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnRlcm1pbmFsIHx8CiAgICAgICAgICAgICAgICAgICAgICAhKGNoaWxkTm9kZXMgPSBub2RlTGlzdFtpXS5jaGlsZE5vZGVzKSB8fAogICAgICAgICAgICAgICAgICAgICAgIWNoaWxkTm9kZXMubGVuZ3RoKQogICAgICAgICAgICA/IG51bGwKICAgICAgICAgICAgOiBjb21waWxlTm9kZXMoY2hpbGROb2RlcywKICAgICAgICAgICAgICAgICBub2RlTGlua0ZuID8gKAogICAgICAgICAgICAgICAgICAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCB8fCAhbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQpCiAgICAgICAgICAgICAgICAgICAgICYmIG5vZGVMaW5rRm4udHJhbnNjbHVkZSkgOiB0cmFuc2NsdWRlRm4pOwoKICAgICAgICBsaW5rRm5zLnB1c2gobm9kZUxpbmtGbiwgY2hpbGRMaW5rRm4pOwogICAgICAgIGxpbmtGbkZvdW5kID0gbGlua0ZuRm91bmQgfHwgbm9kZUxpbmtGbiB8fCBjaGlsZExpbmtGbjsKICAgICAgICBub2RlTGlua0ZuRm91bmQgPSBub2RlTGlua0ZuRm91bmQgfHwgbm9kZUxpbmtGbjsKCiAgICAgICAgLy91c2UgdGhlIHByZXZpb3VzIGNvbnRleHQgb25seSBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHZpcnR1YWwgZ3JvdXAKICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0ID0gbnVsbDsKICAgICAgfQoKICAgICAgLy8gcmV0dXJuIGEgbGlua2luZyBmdW5jdGlvbiBpZiB3ZSBoYXZlIGZvdW5kIGFueXRoaW5nLCBudWxsIG90aGVyd2lzZQogICAgICByZXR1cm4gbGlua0ZuRm91bmQgPyBjb21wb3NpdGVMaW5rRm4gOiBudWxsOwoKICAgICAgZnVuY3Rpb24gY29tcG9zaXRlTGlua0ZuKHNjb3BlLCBub2RlTGlzdCwgJHJvb3RFbGVtZW50LCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbikgewogICAgICAgIHZhciBub2RlTGlua0ZuLCBjaGlsZExpbmtGbiwgbm9kZSwgY2hpbGRTY29wZSwgaSwgaWksIG4sIGNoaWxkQm91bmRUcmFuc2NsdWRlRm47CiAgICAgICAgdmFyIHN0YWJsZU5vZGVMaXN0OwoKCiAgICAgICAgaWYgKG5vZGVMaW5rRm5Gb3VuZCkgewogICAgICAgICAgLy8gY29weSBub2RlTGlzdCBzbyB0aGF0IGlmIGEgbm9kZUxpbmtGbiByZW1vdmVzIG9yIGFkZHMgYW4gZWxlbWVudCBhdCB0aGlzIERPTSBsZXZlbCBvdXIKICAgICAgICAgIC8vIG9mZnNldHMgZG9uJ3QgZ2V0IHNjcmV3ZWQgdXAKICAgICAgICAgIHZhciBub2RlTGlzdExlbmd0aCA9IG5vZGVMaXN0Lmxlbmd0aDsKICAgICAgICAgIHN0YWJsZU5vZGVMaXN0ID0gbmV3IEFycmF5KG5vZGVMaXN0TGVuZ3RoKTsKCiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZUxpc3RMZW5ndGg7IGkrKykgewogICAgICAgICAgICBzdGFibGVOb2RlTGlzdFtpXSA9IG5vZGVMaXN0W2ldOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5vZGVMaXN0OwogICAgICAgIH0KCiAgICAgICAgLy8gVE9ETyhwZXJmKTogd2hlbiB0aGUgRE9NIGlzIHNwYXJzZWx5IGFubm90YXRlZCB3aXRoIGRpcmVjdGl2ZXMsIHdlIHNwZW5kIGEgbG90IG9mIHRpbWUgaXRlcmF0aW5nIG92ZXIgbnVsbHMgaGVyZQogICAgICAgIGZvcihpID0gMCwgbiA9IDAsIGlpID0gbGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgbisrKSB7CiAgICAgICAgICBub2RlID0gc3RhYmxlTm9kZUxpc3Rbbl07CiAgICAgICAgICBub2RlTGlua0ZuID0gbGlua0Zuc1tpKytdOwogICAgICAgICAgY2hpbGRMaW5rRm4gPSBsaW5rRm5zW2krK107CgogICAgICAgICAgaWYgKG5vZGVMaW5rRm4pIHsKICAgICAgICAgICAgaWYgKG5vZGVMaW5rRm4uc2NvcGUpIHsKICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGUuJG5ldygpOwogICAgICAgICAgICAgIGpxTGl0ZS5kYXRhKG5vZGUsICckc2NvcGUnLCBjaGlsZFNjb3BlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICggbm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCApIHsKICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oCiAgICAgICAgICAgICAgICAgIHNjb3BlLCBub2RlTGlua0ZuLnRyYW5zY2x1ZGUsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuLAogICAgICAgICAgICAgICAgICBub2RlTGlua0ZuLmVsZW1lbnRUcmFuc2NsdWRlT25UaGlzRWxlbWVudCk7CgogICAgICAgICAgICB9IGVsc2UgaWYgKCFub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudCAmJiBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbikgewogICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjsKCiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXBhcmVudEJvdW5kVHJhbnNjbHVkZUZuICYmIHRyYW5zY2x1ZGVGbikgewogICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgdHJhbnNjbHVkZUZuKTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5vZGVMaW5rRm4oY2hpbGRMaW5rRm4sIGNoaWxkU2NvcGUsIG5vZGUsICRyb290RWxlbWVudCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7CgogICAgICAgICAgfSBlbHNlIGlmIChjaGlsZExpbmtGbikgewogICAgICAgICAgICBjaGlsZExpbmtGbihzY29wZSwgbm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgdHJhbnNjbHVkZUZuLCBwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuLCBlbGVtZW50VHJhbnNjbHVzaW9uKSB7CgogICAgICB2YXIgYm91bmRUcmFuc2NsdWRlRm4gPSBmdW5jdGlvbih0cmFuc2NsdWRlZFNjb3BlLCBjbG9uZUZuLCBjb250cm9sbGVycywgZnV0dXJlUGFyZW50RWxlbWVudCkgewogICAgICAgIHZhciBzY29wZUNyZWF0ZWQgPSBmYWxzZTsKCiAgICAgICAgaWYgKCF0cmFuc2NsdWRlZFNjb3BlKSB7CiAgICAgICAgICB0cmFuc2NsdWRlZFNjb3BlID0gc2NvcGUuJG5ldygpOwogICAgICAgICAgdHJhbnNjbHVkZWRTY29wZS4kJHRyYW5zY2x1ZGVkID0gdHJ1ZTsKICAgICAgICAgIHNjb3BlQ3JlYXRlZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2xvbmUgPSB0cmFuc2NsdWRlRm4odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMsIHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpOwogICAgICAgIGlmIChzY29wZUNyZWF0ZWQgJiYgIWVsZW1lbnRUcmFuc2NsdXNpb24pIHsKICAgICAgICAgIGNsb25lLm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgeyB0cmFuc2NsdWRlZFNjb3BlLiRkZXN0cm95KCk7IH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY2xvbmU7CiAgICAgIH07CgogICAgICByZXR1cm4gYm91bmRUcmFuc2NsdWRlRm47CiAgICB9CgogICAgLyoqCiAgICAgKiBMb29rcyBmb3IgZGlyZWN0aXZlcyBvbiB0aGUgZ2l2ZW4gbm9kZSBhbmQgYWRkcyB0aGVtIHRvIHRoZSBkaXJlY3RpdmUgY29sbGVjdGlvbiB3aGljaCBpcwogICAgICogc29ydGVkLgogICAgICoKICAgICAqIEBwYXJhbSBub2RlIE5vZGUgdG8gc2VhcmNoLgogICAgICogQHBhcmFtIGRpcmVjdGl2ZXMgQW4gYXJyYXkgdG8gd2hpY2ggdGhlIGRpcmVjdGl2ZXMgYXJlIGFkZGVkIHRvLiBUaGlzIGFycmF5IGlzIHNvcnRlZCBiZWZvcmUKICAgICAqICAgICAgICB0aGUgZnVuY3Rpb24gcmV0dXJucy4KICAgICAqIEBwYXJhbSBhdHRycyBUaGUgc2hhcmVkIGF0dHJzIG9iamVjdCB3aGljaCBpcyB1c2VkIHRvIHBvcHVsYXRlIHRoZSBub3JtYWxpemVkIGF0dHJpYnV0ZXMuCiAgICAgKiBAcGFyYW0ge251bWJlcj19IG1heFByaW9yaXR5IE1heCBkaXJlY3RpdmUgcHJpb3JpdHkuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbGxlY3REaXJlY3RpdmVzKG5vZGUsIGRpcmVjdGl2ZXMsIGF0dHJzLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSB7CiAgICAgIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGUsCiAgICAgICAgICBhdHRyc01hcCA9IGF0dHJzLiRhdHRyLAogICAgICAgICAgbWF0Y2gsCiAgICAgICAgICBjbGFzc05hbWU7CgogICAgICBzd2l0Y2gobm9kZVR5cGUpIHsKICAgICAgICBjYXNlIDE6IC8qIEVsZW1lbnQgKi8KICAgICAgICAgIC8vIHVzZSB0aGUgbm9kZSBuYW1lOiA8ZGlyZWN0aXZlPgogICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsCiAgICAgICAgICAgICAgZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lXyhub2RlKSksICdFJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSk7CgogICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBhdHRyaWJ1dGVzCiAgICAgICAgICBmb3IgKHZhciBhdHRyLCBuYW1lLCBuTmFtZSwgbmdBdHRyTmFtZSwgdmFsdWUsIGlzTmdBdHRyLCBuQXR0cnMgPSBub2RlLmF0dHJpYnV0ZXMsCiAgICAgICAgICAgICAgICAgICBqID0gMCwgamogPSBuQXR0cnMgJiYgbkF0dHJzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHsKICAgICAgICAgICAgdmFyIGF0dHJTdGFydE5hbWUgPSBmYWxzZTsKICAgICAgICAgICAgdmFyIGF0dHJFbmROYW1lID0gZmFsc2U7CgogICAgICAgICAgICBhdHRyID0gbkF0dHJzW2pdOwogICAgICAgICAgICBpZiAoIW1zaWUgfHwgbXNpZSA+PSA4IHx8IGF0dHIuc3BlY2lmaWVkKSB7CiAgICAgICAgICAgICAgbmFtZSA9IGF0dHIubmFtZTsKICAgICAgICAgICAgICB2YWx1ZSA9IHRyaW0oYXR0ci52YWx1ZSk7CgogICAgICAgICAgICAgIC8vIHN1cHBvcnQgbmdBdHRyIGF0dHJpYnV0ZSBiaW5kaW5nCiAgICAgICAgICAgICAgbmdBdHRyTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKTsKICAgICAgICAgICAgICBpZiAoaXNOZ0F0dHIgPSBOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKSkgewogICAgICAgICAgICAgICAgbmFtZSA9IHNuYWtlX2Nhc2UobmdBdHRyTmFtZS5zdWJzdHIoNiksICctJyk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB2YXIgZGlyZWN0aXZlTk5hbWUgPSBuZ0F0dHJOYW1lLnJlcGxhY2UoLyhTdGFydHxFbmQpJC8sICcnKTsKICAgICAgICAgICAgICBpZiAoZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQoZGlyZWN0aXZlTk5hbWUpKSB7CiAgICAgICAgICAgICAgICBpZiAobmdBdHRyTmFtZSA9PT0gZGlyZWN0aXZlTk5hbWUgKyAnU3RhcnQnKSB7CiAgICAgICAgICAgICAgICAgIGF0dHJTdGFydE5hbWUgPSBuYW1lOwogICAgICAgICAgICAgICAgICBhdHRyRW5kTmFtZSA9IG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gNSkgKyAnZW5kJzsKICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gNik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lLnRvTG93ZXJDYXNlKCkpOwogICAgICAgICAgICAgIGF0dHJzTWFwW25OYW1lXSA9IG5hbWU7CiAgICAgICAgICAgICAgaWYgKGlzTmdBdHRyIHx8ICFhdHRycy5oYXNPd25Qcm9wZXJ0eShuTmFtZSkpIHsKICAgICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdmFsdWU7CiAgICAgICAgICAgICAgICAgIGlmIChnZXRCb29sZWFuQXR0ck5hbWUobm9kZSwgbk5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJ1ZTsgLy8gcHJlc2VuY2UgbWVhbnMgdHJ1ZQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZShub2RlLCBkaXJlY3RpdmVzLCB2YWx1ZSwgbk5hbWUsIGlzTmdBdHRyKTsKICAgICAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdBJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgYXR0clN0YXJ0TmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJFbmROYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIHVzZSBjbGFzcyBhcyBkaXJlY3RpdmUKICAgICAgICAgIGNsYXNzTmFtZSA9IG5vZGUuY2xhc3NOYW1lOwogICAgICAgICAgaWYgKGlzU3RyaW5nKGNsYXNzTmFtZSkgJiYgY2xhc3NOYW1lICE9PSAnJykgewogICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMoY2xhc3NOYW1lKSkgewogICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzJdKTsKICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQycsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpKSB7CiAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cmltKG1hdGNoWzNdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnN1YnN0cihtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMzogLyogVGV4dCBOb2RlICovCiAgICAgICAgICBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgbm9kZS5ub2RlVmFsdWUpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSA4OiAvKiBDb21tZW50ICovCiAgICAgICAgICB0cnkgewogICAgICAgICAgICBtYXRjaCA9IENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUC5leGVjKG5vZGUubm9kZVZhbHVlKTsKICAgICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMV0pOwogICAgICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdNJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHsKICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbMl0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAvLyB0dXJucyBvdXQgdGhhdCB1bmRlciBzb21lIGNpcmN1bXN0YW5jZXMgSUU5IHRocm93cyBlcnJvcnMgd2hlbiBvbmUgYXR0ZW1wdHMgdG8gcmVhZAogICAgICAgICAgICAvLyBjb21tZW50J3Mgbm9kZSB2YWx1ZS4KICAgICAgICAgICAgLy8gSnVzdCBpZ25vcmUgaXQgYW5kIGNvbnRpbnVlLiAoQ2FuJ3Qgc2VlbSB0byByZXByb2R1Y2UgaW4gdGVzdCBjYXNlLikKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBkaXJlY3RpdmVzLnNvcnQoYnlQcmlvcml0eSk7CiAgICAgIHJldHVybiBkaXJlY3RpdmVzOwogICAgfQoKICAgIC8qKgogICAgICogR2l2ZW4gYSBub2RlIHdpdGggYW4gZGlyZWN0aXZlLXN0YXJ0IGl0IGNvbGxlY3RzIGFsbCBvZiB0aGUgc2libGluZ3MgdW50aWwgaXQgZmluZHMKICAgICAqIGRpcmVjdGl2ZS1lbmQuCiAgICAgKiBAcGFyYW0gbm9kZQogICAgICogQHBhcmFtIGF0dHJTdGFydAogICAgICogQHBhcmFtIGF0dHJFbmQKICAgICAqIEByZXR1cm5zIHsqfQogICAgICovCiAgICBmdW5jdGlvbiBncm91cFNjYW4obm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7CiAgICAgIHZhciBub2RlcyA9IFtdOwogICAgICB2YXIgZGVwdGggPSAwOwogICAgICBpZiAoYXR0clN0YXJ0ICYmIG5vZGUuaGFzQXR0cmlidXRlICYmIG5vZGUuaGFzQXR0cmlidXRlKGF0dHJTdGFydCkpIHsKICAgICAgICB2YXIgc3RhcnROb2RlID0gbm9kZTsKICAgICAgICBkbyB7CiAgICAgICAgICBpZiAoIW5vZGUpIHsKICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3V0ZXJkaXInLAogICAgICAgICAgICAgICAgICAgICAgIlVudGVybWluYXRlZCBhdHRyaWJ1dGUsIGZvdW5kICd7MH0nIGJ1dCBubyBtYXRjaGluZyAnezF9JyBmb3VuZC4iLAogICAgICAgICAgICAgICAgICAgICAgYXR0clN0YXJ0LCBhdHRyRW5kKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEgLyoqIEVsZW1lbnQgKiovKSB7CiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyU3RhcnQpKSBkZXB0aCsrOwogICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0ckVuZCkpIGRlcHRoLS07CiAgICAgICAgICB9CiAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpOwogICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7CiAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBub2Rlcy5wdXNoKG5vZGUpOwogICAgICB9CgogICAgICByZXR1cm4ganFMaXRlKG5vZGVzKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyYXBwZXIgZm9yIGxpbmtpbmcgZnVuY3Rpb24gd2hpY2ggY29udmVydHMgbm9ybWFsIGxpbmtpbmcgZnVuY3Rpb24gaW50byBhIGdyb3VwZWQKICAgICAqIGxpbmtpbmcgZnVuY3Rpb24uCiAgICAgKiBAcGFyYW0gbGlua0ZuCiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0CiAgICAgKiBAcGFyYW0gYXR0ckVuZAogICAgICogQHJldHVybnMge0Z1bmN0aW9ufQogICAgICovCiAgICBmdW5jdGlvbiBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihsaW5rRm4sIGF0dHJTdGFydCwgYXR0ckVuZCkgewogICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7CiAgICAgICAgZWxlbWVudCA9IGdyb3VwU2NhbihlbGVtZW50WzBdLCBhdHRyU3RhcnQsIGF0dHJFbmQpOwogICAgICAgIHJldHVybiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTsKICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIE9uY2UgdGhlIGRpcmVjdGl2ZXMgaGF2ZSBiZWVuIGNvbGxlY3RlZCwgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGlzIG1ldGhvZAogICAgICogaXMgcmVzcG9uc2libGUgZm9yIGlubGluaW5nIGRpcmVjdGl2ZSB0ZW1wbGF0ZXMgYXMgd2VsbCBhcyB0ZXJtaW5hdGluZyB0aGUgYXBwbGljYXRpb24KICAgICAqIG9mIHRoZSBkaXJlY3RpdmVzIGlmIHRoZSB0ZXJtaW5hbCBkaXJlY3RpdmUgaGFzIGJlZW4gcmVhY2hlZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0FycmF5fSBkaXJlY3RpdmVzIEFycmF5IG9mIGNvbGxlY3RlZCBkaXJlY3RpdmVzIHRvIGV4ZWN1dGUgdGhlaXIgY29tcGlsZSBmdW5jdGlvbi4KICAgICAqICAgICAgICB0aGlzIG5lZWRzIHRvIGJlIHByZS1zb3J0ZWQgYnkgcHJpb3JpdHkgb3JkZXIuCiAgICAgKiBAcGFyYW0ge05vZGV9IGNvbXBpbGVOb2RlIFRoZSByYXcgRE9NIG5vZGUgdG8gYXBwbHkgdGhlIGNvbXBpbGUgZnVuY3Rpb25zIHRvCiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVBdHRycyBUaGUgc2hhcmVkIGF0dHJpYnV0ZSBmdW5jdGlvbgogICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCBvZiB0aGUgdHJhbnNjbHVkZWQgcGFyZW50IHNjb3BlLgogICAgICogQHBhcmFtIHtKUUxpdGV9IGpxQ29sbGVjdGlvbiBJZiB3ZSBhcmUgd29ya2luZyBvbiB0aGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlIHRoZW4gdGhpcwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudCBoYXMgdGhlIHJvb3QganFMaXRlIGFycmF5IHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gaXQuCiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSBBbiBvcHRpb25hbCBkaXJlY3RpdmUgdGhhdCB3aWxsIGJlIGlnbm9yZWQgd2hlbgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGlsaW5nIHRoZSB0cmFuc2NsdXNpb24uCiAgICAgKiBAcGFyYW0ge0FycmF5LjxGdW5jdGlvbj59IHByZUxpbmtGbnMKICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcG9zdExpbmtGbnMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IENvbnRleHQgdXNlZCBmb3IgcHJldmlvdXMgY29tcGlsYXRpb24gb2YgdGhlIGN1cnJlbnQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUKICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gbGlua0ZuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgdHJhbnNjbHVkZUZuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpxQ29sbGVjdGlvbiwgb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7CiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IHx8IHt9OwoKICAgICAgdmFyIHRlcm1pbmFsUHJpb3JpdHkgPSAtTnVtYmVyLk1BWF9WQUxVRSwKICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlLAogICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXMgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0LmNvbnRyb2xsZXJEaXJlY3RpdmVzLAogICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5uZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsCiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQudGVtcGxhdGVEaXJlY3RpdmUsCiAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5ub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlLAogICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGZhbHNlLAogICAgICAgICAgaGFzVGVtcGxhdGUgPSBmYWxzZSwKICAgICAgICAgIGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSwKICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0ganFMaXRlKGNvbXBpbGVOb2RlKSwKICAgICAgICAgIGRpcmVjdGl2ZSwKICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsCiAgICAgICAgICAkdGVtcGxhdGUsCiAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLAogICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSB0cmFuc2NsdWRlRm4sCiAgICAgICAgICBsaW5rRm4sCiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZTsKCiAgICAgIC8vIGV4ZWN1dGVzIGFsbCBkaXJlY3RpdmVzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQKICAgICAgZm9yKHZhciBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldOwogICAgICAgIHZhciBhdHRyU3RhcnQgPSBkaXJlY3RpdmUuJCRzdGFydDsKICAgICAgICB2YXIgYXR0ckVuZCA9IGRpcmVjdGl2ZS4kJGVuZDsKCiAgICAgICAgLy8gY29sbGVjdCBtdWx0aWJsb2NrIHNlY3Rpb25zCiAgICAgICAgaWYgKGF0dHJTdGFydCkgewogICAgICAgICAgJGNvbXBpbGVOb2RlID0gZ3JvdXBTY2FuKGNvbXBpbGVOb2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpOwogICAgICAgIH0KICAgICAgICAkdGVtcGxhdGUgPSB1bmRlZmluZWQ7CgogICAgICAgIGlmICh0ZXJtaW5hbFByaW9yaXR5ID4gZGlyZWN0aXZlLnByaW9yaXR5KSB7CiAgICAgICAgICBicmVhazsgLy8gcHJldmVudCBmdXJ0aGVyIHByb2Nlc3Npbmcgb2YgZGlyZWN0aXZlcwogICAgICAgIH0KCiAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLnNjb3BlKSB7CgogICAgICAgICAgLy8gc2tpcCB0aGUgY2hlY2sgZm9yIGRpcmVjdGl2ZXMgd2l0aCBhc3luYyB0ZW1wbGF0ZXMsIHdlJ2xsIGNoZWNrIHRoZSBkZXJpdmVkIHN5bmMKICAgICAgICAgIC8vIGRpcmVjdGl2ZSB3aGVuIHRoZSB0ZW1wbGF0ZSBhcnJpdmVzCiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkgewogICAgICAgICAgICBpZiAoaXNPYmplY3QoZGlyZWN0aXZlVmFsdWUpKSB7CiAgICAgICAgICAgICAgLy8gVGhpcyBkaXJlY3RpdmUgaXMgdHJ5aW5nIHRvIGFkZCBhbiBpc29sYXRlZCBzY29wZS4KICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzIG5vIHNjb3BlIG9mIGFueSBraW5kIGFscmVhZHkKICAgICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnbmV3L2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8IG5ld1Njb3BlRGlyZWN0aXZlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTsKICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gVGhpcyBkaXJlY3RpdmUgaXMgdHJ5aW5nIHRvIGFkZCBhIGNoaWxkIHNjb3BlLgogICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgbm8gaXNvbGF0ZWQgc2NvcGUgYWxyZWFkeQogICAgICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCduZXcvaXNvbGF0ZWQgc2NvcGUnLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29tcGlsZU5vZGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBuZXdTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmU7CiAgICAgICAgfQoKICAgICAgICBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlLm5hbWU7CgogICAgICAgIGlmICghZGlyZWN0aXZlLnRlbXBsYXRlVXJsICYmIGRpcmVjdGl2ZS5jb250cm9sbGVyKSB7CiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5jb250cm9sbGVyOwogICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXMgPSBjb250cm9sbGVyRGlyZWN0aXZlcyB8fCB7fTsKICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCInIiArIGRpcmVjdGl2ZU5hbWUgKyAiJyBjb250cm9sbGVyIiwKICAgICAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpOwogICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBkaXJlY3RpdmU7CiAgICAgICAgfQoKICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUudHJhbnNjbHVkZSkgewogICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7CgogICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIG5nSWYgYW5kIG5nUmVwZWF0IHNvIHRoYXQgd2UgZG9uJ3QgY29tcGxhaW4gYWJvdXQgZHVwbGljYXRlIHRyYW5zY2x1c2lvbi4KICAgICAgICAgIC8vIFRoaXMgb3B0aW9uIHNob3VsZCBvbmx5IGJlIHVzZWQgYnkgZGlyZWN0aXZlcyB0aGF0IGtub3cgaG93IHRvIHNhZmVseSBoYW5kbGUgZWxlbWVudCB0cmFuc2NsdXNpb24sCiAgICAgICAgICAvLyB3aGVyZSB0aGUgdHJhbnNjbHVkZWQgbm9kZXMgYXJlIGFkZGVkIG9yIHJlcGxhY2VkIGFmdGVyIGxpbmtpbmcuCiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS4kJHRsYikgewogICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndHJhbnNjbHVzaW9uJywgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpOwogICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9PSAnZWxlbWVudCcpIHsKICAgICAgICAgICAgaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSB0cnVlOwogICAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5OwogICAgICAgICAgICAkdGVtcGxhdGUgPSAkY29tcGlsZU5vZGU7CiAgICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0KICAgICAgICAgICAgICAgIGpxTGl0ZShkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgJyArIGRpcmVjdGl2ZU5hbWUgKyAnOiAnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlQXR0cnNbZGlyZWN0aXZlTmFtZV0gKyAnICcpKTsKICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkY29tcGlsZU5vZGVbMF07CiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgc2xpY2VBcmdzKCR0ZW1wbGF0ZSksIGNvbXBpbGVOb2RlKTsKCiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsZSgkdGVtcGxhdGUsIHRyYW5zY2x1ZGVGbiwgdGVybWluYWxQcmlvcml0eSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgJiYgcmVwbGFjZURpcmVjdGl2ZS5uYW1lLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHBhc3MgaW46CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0gY29udHJvbGxlckRpcmVjdGl2ZXMgLSBvdGhlcndpc2Ugd2UnbGwgY3JlYXRlIGR1cGxpY2F0ZXMgY29udHJvbGxlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgb3IgdGVtcGxhdGVEaXJlY3RpdmUgLSBjb21iaW5pbmcgdGVtcGxhdGVzIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBlbGVtZW50IHRyYW5zY2x1c2lvbiBkb2Vzbid0IG1ha2Ugc2Vuc2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgb25seSBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlIHNvIHRoYXQgd2UgcHJldmVudCBwdXR0aW5nIHRyYW5zY2x1c2lvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbiB0aGUgc2FtZSBlbGVtZW50IG1vcmUgdGhhbiBvbmNlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlOiBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICR0ZW1wbGF0ZSA9IGpxTGl0ZShqcUxpdGVDbG9uZShjb21waWxlTm9kZSkpLmNvbnRlbnRzKCk7CiAgICAgICAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpOyAvLyBjbGVhciBjb250ZW50cwogICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IGNvbXBpbGUoJHRlbXBsYXRlLCB0cmFuc2NsdWRlRm4pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZW1wbGF0ZSkgewogICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlOwogICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RlbXBsYXRlJywgdGVtcGxhdGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTsKICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwoKICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlID0gKGlzRnVuY3Rpb24oZGlyZWN0aXZlLnRlbXBsYXRlKSkKICAgICAgICAgICAgICA/IGRpcmVjdGl2ZS50ZW1wbGF0ZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMpCiAgICAgICAgICAgICAgOiBkaXJlY3RpdmUudGVtcGxhdGU7CgogICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSBkZW5vcm1hbGl6ZVRlbXBsYXRlKGRpcmVjdGl2ZVZhbHVlKTsKCiAgICAgICAgICBpZiAoZGlyZWN0aXZlLnJlcGxhY2UpIHsKICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTsKICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoZGlyZWN0aXZlVmFsdWUpKSB7CiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKHdyYXBUZW1wbGF0ZShkaXJlY3RpdmUudGVtcGxhdGVOYW1lc3BhY2UsIHRyaW0oZGlyZWN0aXZlVmFsdWUpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkdGVtcGxhdGVbMF07CgogICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSAxKSB7CiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JywKICAgICAgICAgICAgICAgICAgIlRlbXBsYXRlIGZvciBkaXJlY3RpdmUgJ3swfScgbXVzdCBoYXZlIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gezF9IiwKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgJycpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXBsYWNlV2l0aChqcUNvbGxlY3Rpb24sICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpOwoKICAgICAgICAgICAgdmFyIG5ld1RlbXBsYXRlQXR0cnMgPSB7JGF0dHI6IHt9fTsKCiAgICAgICAgICAgIC8vIGNvbWJpbmUgZGlyZWN0aXZlcyBmcm9tIHRoZSBvcmlnaW5hbCBub2RlIGFuZCBmcm9tIHRoZSB0ZW1wbGF0ZToKICAgICAgICAgICAgLy8gLSB0YWtlIHRoZSBhcnJheSBvZiBkaXJlY3RpdmVzIGZvciB0aGlzIGVsZW1lbnQKICAgICAgICAgICAgLy8gLSBzcGxpdCBpdCBpbnRvIHR3byBwYXJ0cywgdGhvc2UgdGhhdCBhbHJlYWR5IGFwcGxpZWQgKHByb2Nlc3NlZCkgYW5kIHRob3NlIHRoYXQgd2VyZW4ndCAodW5wcm9jZXNzZWQpCiAgICAgICAgICAgIC8vIC0gY29sbGVjdCBkaXJlY3RpdmVzIGZyb20gdGhlIHRlbXBsYXRlIGFuZCBzb3J0IHRoZW0gYnkgcHJpb3JpdHkKICAgICAgICAgICAgLy8gLSBjb21iaW5lIGRpcmVjdGl2ZXMgYXM6IHByb2Nlc3NlZCArIHRlbXBsYXRlICsgdW5wcm9jZXNzZWQKICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgbmV3VGVtcGxhdGVBdHRycyk7CiAgICAgICAgICAgIHZhciB1bnByb2Nlc3NlZERpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLnNwbGljZShpICsgMSwgZGlyZWN0aXZlcy5sZW5ndGggLSAoaSArIDEpKTsKCiAgICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHsKICAgICAgICAgICAgICBtYXJrRGlyZWN0aXZlc0FzSXNvbGF0ZSh0ZW1wbGF0ZURpcmVjdGl2ZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLmNvbmNhdCh0ZW1wbGF0ZURpcmVjdGl2ZXMpLmNvbmNhdCh1bnByb2Nlc3NlZERpcmVjdGl2ZXMpOwogICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0ZW1wbGF0ZUF0dHJzLCBuZXdUZW1wbGF0ZUF0dHJzKTsKCiAgICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChkaXJlY3RpdmVWYWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlVXJsKSB7CiAgICAgICAgICBoYXNUZW1wbGF0ZSA9IHRydWU7CiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpOwogICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7CgogICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7CiAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgPSBkaXJlY3RpdmU7CiAgICAgICAgICB9CgogICAgICAgICAgbm9kZUxpbmtGbiA9IGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLnNwbGljZShpLCBkaXJlY3RpdmVzLmxlbmd0aCAtIGkpLCAkY29tcGlsZU5vZGUsCiAgICAgICAgICAgICAgdGVtcGxhdGVBdHRycywganFDb2xsZWN0aW9uLCBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlICYmIGNoaWxkVHJhbnNjbHVkZUZuLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucywgewogICAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXM6IGNvbnRyb2xsZXJEaXJlY3RpdmVzLAogICAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlOiBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsCiAgICAgICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZTogdGVtcGxhdGVEaXJlY3RpdmUsCiAgICAgICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlOiBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOwogICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aXZlLmNvbXBpbGUpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGxpbmtGbiA9IGRpcmVjdGl2ZS5jb21waWxlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgY2hpbGRUcmFuc2NsdWRlRm4pOwogICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihsaW5rRm4pKSB7CiAgICAgICAgICAgICAgYWRkTGlua0ZucyhudWxsLCBsaW5rRm4sIGF0dHJTdGFydCwgYXR0ckVuZCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlua0ZuKSB7CiAgICAgICAgICAgICAgYWRkTGlua0ZucyhsaW5rRm4ucHJlLCBsaW5rRm4ucG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlLCBzdGFydGluZ1RhZygkY29tcGlsZU5vZGUpKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChkaXJlY3RpdmUudGVybWluYWwpIHsKICAgICAgICAgIG5vZGVMaW5rRm4udGVybWluYWwgPSB0cnVlOwogICAgICAgICAgdGVybWluYWxQcmlvcml0eSA9IE1hdGgubWF4KHRlcm1pbmFsUHJpb3JpdHksIGRpcmVjdGl2ZS5wcmlvcml0eSk7CiAgICAgICAgfQoKICAgICAgfQoKICAgICAgbm9kZUxpbmtGbi5zY29wZSA9IG5ld1Njb3BlRGlyZWN0aXZlICYmIG5ld1Njb3BlRGlyZWN0aXZlLnNjb3BlID09PSB0cnVlOwogICAgICBub2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50ID0gaGFzVHJhbnNjbHVkZURpcmVjdGl2ZTsKICAgICAgbm9kZUxpbmtGbi5lbGVtZW50VHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZTsKICAgICAgbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQgPSBoYXNUZW1wbGF0ZTsKICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlID0gY2hpbGRUcmFuc2NsdWRlRm47CgogICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmU7CgogICAgICAvLyBtaWdodCBiZSBub3JtYWwgb3IgZGVsYXllZCBub2RlTGlua0ZuIGRlcGVuZGluZyBvbiBpZiB0ZW1wbGF0ZVVybCBpcyBwcmVzZW50CiAgICAgIHJldHVybiBub2RlTGlua0ZuOwoKICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAgIGZ1bmN0aW9uIGFkZExpbmtGbnMocHJlLCBwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpIHsKICAgICAgICBpZiAocHJlKSB7CiAgICAgICAgICBpZiAoYXR0clN0YXJ0KSBwcmUgPSBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihwcmUsIGF0dHJTdGFydCwgYXR0ckVuZCk7CiAgICAgICAgICBwcmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlOwogICAgICAgICAgcHJlLmRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOYW1lOwogICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9PT0gZGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSkgewogICAgICAgICAgICBwcmUgPSBjbG9uZUFuZEFubm90YXRlRm4ocHJlLCB7aXNvbGF0ZVNjb3BlOiB0cnVlfSk7CiAgICAgICAgICB9CiAgICAgICAgICBwcmVMaW5rRm5zLnB1c2gocHJlKTsKICAgICAgICB9CiAgICAgICAgaWYgKHBvc3QpIHsKICAgICAgICAgIGlmIChhdHRyU3RhcnQpIHBvc3QgPSBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpOwogICAgICAgICAgcG9zdC5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7CiAgICAgICAgICBwb3N0LmRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOYW1lOwogICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9PT0gZGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSkgewogICAgICAgICAgICBwb3N0ID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHBvc3QsIHtpc29sYXRlU2NvcGU6IHRydWV9KTsKICAgICAgICAgIH0KICAgICAgICAgIHBvc3RMaW5rRm5zLnB1c2gocG9zdCk7CiAgICAgICAgfQogICAgICB9CgoKICAgICAgZnVuY3Rpb24gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycykgewogICAgICAgIHZhciB2YWx1ZSwgcmV0cmlldmFsTWV0aG9kID0gJ2RhdGEnLCBvcHRpb25hbCA9IGZhbHNlOwogICAgICAgIGlmIChpc1N0cmluZyhyZXF1aXJlKSkgewogICAgICAgICAgd2hpbGUoKHZhbHVlID0gcmVxdWlyZS5jaGFyQXQoMCkpID09ICdeJyB8fCB2YWx1ZSA9PSAnPycpIHsKICAgICAgICAgICAgcmVxdWlyZSA9IHJlcXVpcmUuc3Vic3RyKDEpOwogICAgICAgICAgICBpZiAodmFsdWUgPT0gJ14nKSB7CiAgICAgICAgICAgICAgcmV0cmlldmFsTWV0aG9kID0gJ2luaGVyaXRlZERhdGEnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9wdGlvbmFsID0gb3B0aW9uYWwgfHwgdmFsdWUgPT0gJz8nOwogICAgICAgICAgfQogICAgICAgICAgdmFsdWUgPSBudWxsOwoKICAgICAgICAgIGlmIChlbGVtZW50Q29udHJvbGxlcnMgJiYgcmV0cmlldmFsTWV0aG9kID09PSAnZGF0YScpIHsKICAgICAgICAgICAgdmFsdWUgPSBlbGVtZW50Q29udHJvbGxlcnNbcmVxdWlyZV07CiAgICAgICAgICB9CiAgICAgICAgICB2YWx1ZSA9IHZhbHVlIHx8ICRlbGVtZW50W3JldHJpZXZhbE1ldGhvZF0oJyQnICsgcmVxdWlyZSArICdDb250cm9sbGVyJyk7CgogICAgICAgICAgaWYgKCF2YWx1ZSAmJiAhb3B0aW9uYWwpIHsKICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2N0cmVxJywKICAgICAgICAgICAgICAgICJDb250cm9sbGVyICd7MH0nLCByZXF1aXJlZCBieSBkaXJlY3RpdmUgJ3sxfScsIGNhbid0IGJlIGZvdW5kISIsCiAgICAgICAgICAgICAgICByZXF1aXJlLCBkaXJlY3RpdmVOYW1lKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkocmVxdWlyZSkpIHsKICAgICAgICAgIHZhbHVlID0gW107CiAgICAgICAgICBmb3JFYWNoKHJlcXVpcmUsIGZ1bmN0aW9uKHJlcXVpcmUpIHsKICAgICAgICAgICAgdmFsdWUucHVzaChnZXRDb250cm9sbGVycyhkaXJlY3RpdmVOYW1lLCByZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9CgoKICAgICAgZnVuY3Rpb24gbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7CiAgICAgICAgdmFyIGksIGlpLCBsaW5rRm4sIGNvbnRyb2xsZXIsIGlzb2xhdGVTY29wZSwgZWxlbWVudENvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4sICRlbGVtZW50LAogICAgICAgICAgICBhdHRyczsKCiAgICAgICAgaWYgKGNvbXBpbGVOb2RlID09PSBsaW5rTm9kZSkgewogICAgICAgICAgYXR0cnMgPSB0ZW1wbGF0ZUF0dHJzOwogICAgICAgICAgJGVsZW1lbnQgPSB0ZW1wbGF0ZUF0dHJzLiQkZWxlbWVudDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgJGVsZW1lbnQgPSBqcUxpdGUobGlua05vZGUpOwogICAgICAgICAgYXR0cnMgPSBuZXcgQXR0cmlidXRlcygkZWxlbWVudCwgdGVtcGxhdGVBdHRycyk7CiAgICAgICAgfQoKICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7CiAgICAgICAgICB2YXIgTE9DQUxfUkVHRVhQID0gL15ccyooW0A9Jl0pKFw/PylccyooXHcqKVxzKiQvOwoKICAgICAgICAgIGlzb2xhdGVTY29wZSA9IHNjb3BlLiRuZXcodHJ1ZSk7CgogICAgICAgICAgaWYgKHRlbXBsYXRlRGlyZWN0aXZlICYmICh0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8CiAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS4kJG9yaWdpbmFsRGlyZWN0aXZlKSkgewogICAgICAgICAgICAkZWxlbWVudC5kYXRhKCckaXNvbGF0ZVNjb3BlJywgaXNvbGF0ZVNjb3BlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRlbGVtZW50LmRhdGEoJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJywgaXNvbGF0ZVNjb3BlKTsKICAgICAgICAgIH0KCgoKICAgICAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgJ25nLWlzb2xhdGUtc2NvcGUnKTsKCiAgICAgICAgICBmb3JFYWNoKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5zY29wZSwgZnVuY3Rpb24oZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7CiAgICAgICAgICAgIHZhciBtYXRjaCA9IGRlZmluaXRpb24ubWF0Y2goTE9DQUxfUkVHRVhQKSB8fCBbXSwKICAgICAgICAgICAgICAgIGF0dHJOYW1lID0gbWF0Y2hbM10gfHwgc2NvcGVOYW1lLAogICAgICAgICAgICAgICAgb3B0aW9uYWwgPSAobWF0Y2hbMl0gPT0gJz8nKSwKICAgICAgICAgICAgICAgIG1vZGUgPSBtYXRjaFsxXSwgLy8gQCwgPSwgb3IgJgogICAgICAgICAgICAgICAgbGFzdFZhbHVlLAogICAgICAgICAgICAgICAgcGFyZW50R2V0LCBwYXJlbnRTZXQsIGNvbXBhcmU7CgogICAgICAgICAgICBpc29sYXRlU2NvcGUuJCRpc29sYXRlQmluZGluZ3Nbc2NvcGVOYW1lXSA9IG1vZGUgKyBhdHRyTmFtZTsKCiAgICAgICAgICAgIHN3aXRjaCAobW9kZSkgewoKICAgICAgICAgICAgICBjYXNlICdAJzoKICAgICAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKGF0dHJOYW1lLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgICAgICBpc29sYXRlU2NvcGVbc2NvcGVOYW1lXSA9IHZhbHVlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBhdHRycy4kJG9ic2VydmVyc1thdHRyTmFtZV0uJCRzY29wZSA9IHNjb3BlOwogICAgICAgICAgICAgICAgaWYoIGF0dHJzW2F0dHJOYW1lXSApIHsKICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGF0dHJpYnV0ZSBoYXMgYmVlbiBwcm92aWRlZCB0aGVuIHdlIHRyaWdnZXIgYW4gaW50ZXJwb2xhdGlvbiB0byBlbnN1cmUKICAgICAgICAgICAgICAgICAgLy8gdGhlIHZhbHVlIGlzIHRoZXJlIGZvciB1c2UgaW4gdGhlIGxpbmsgZm4KICAgICAgICAgICAgICAgICAgaXNvbGF0ZVNjb3BlW3Njb3BlTmFtZV0gPSAkaW50ZXJwb2xhdGUoYXR0cnNbYXR0ck5hbWVdKShzY29wZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAnPSc6CiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwgJiYgIWF0dHJzW2F0dHJOYW1lXSkgewogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJlbnRHZXQgPSAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKTsKICAgICAgICAgICAgICAgIGlmIChwYXJlbnRHZXQubGl0ZXJhbCkgewogICAgICAgICAgICAgICAgICBjb21wYXJlID0gZXF1YWxzOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgY29tcGFyZSA9IGZ1bmN0aW9uKGEsYikgeyByZXR1cm4gYSA9PT0gYiB8fCAoYSAhPT0gYSAmJiBiICE9PSBiKTsgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcmVudFNldCA9IHBhcmVudEdldC5hc3NpZ24gfHwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBjaGFuZ2UsIG9yIHdlIHdpbGwgdGhyb3cgdGhpcyBleGNlcHRpb24gb24gZXZlcnkgJGRpZ2VzdAogICAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBpc29sYXRlU2NvcGVbc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7CiAgICAgICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub25hc3NpZ24nLAogICAgICAgICAgICAgICAgICAgICAgIkV4cHJlc3Npb24gJ3swfScgdXNlZCB3aXRoIGRpcmVjdGl2ZSAnezF9JyBpcyBub24tYXNzaWduYWJsZSEiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnNbYXR0ck5hbWVdLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUubmFtZSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gaXNvbGF0ZVNjb3BlW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpOwogICAgICAgICAgICAgICAgdmFyIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSwgZnVuY3Rpb24gcGFyZW50VmFsdWVXYXRjaChwYXJlbnRWYWx1ZSkgewogICAgICAgICAgICAgICAgICBpZiAoIWNvbXBhcmUocGFyZW50VmFsdWUsIGlzb2xhdGVTY29wZVtzY29wZU5hbWVdKSkgewogICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBvdXQgb2Ygc3luYyBhbmQgbmVlZCB0byBjb3B5CiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBsYXN0VmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAvLyBwYXJlbnQgY2hhbmdlZCBhbmQgaXQgaGFzIHByZWNlZGVuY2UKICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGVTY29wZVtzY29wZU5hbWVdID0gcGFyZW50VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgY2FuIGJlIGFzc2lnbmVkIHRoZW4gZG8gc28KICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFNldChzY29wZSwgcGFyZW50VmFsdWUgPSBpc29sYXRlU2NvcGVbc2NvcGVOYW1lXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiBsYXN0VmFsdWUgPSBwYXJlbnRWYWx1ZTsKICAgICAgICAgICAgICAgIH0pLCBudWxsLCBwYXJlbnRHZXQubGl0ZXJhbCk7CiAgICAgICAgICAgICAgICBpc29sYXRlU2NvcGUuJG9uKCckZGVzdHJveScsIHVud2F0Y2gpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgJyYnOgogICAgICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7CiAgICAgICAgICAgICAgICBpc29sYXRlU2NvcGVbc2NvcGVOYW1lXSA9IGZ1bmN0aW9uKGxvY2FscykgewogICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50R2V0KHNjb3BlLCBsb2NhbHMpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2lzY3AnLAogICAgICAgICAgICAgICAgICAgICJJbnZhbGlkIGlzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbiBmb3IgZGlyZWN0aXZlICd7MH0nLiIgKwogICAgICAgICAgICAgICAgICAgICIgRGVmaW5pdGlvbjogey4uLiB7MX06ICd7Mn0nIC4uLn0iLAogICAgICAgICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5uYW1lLCBzY29wZU5hbWUsIGRlZmluaXRpb24pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgdHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm4gJiYgY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGU7CiAgICAgICAgaWYgKGNvbnRyb2xsZXJEaXJlY3RpdmVzKSB7CiAgICAgICAgICBlbGVtZW50Q29udHJvbGxlcnMgPSB7fTsKICAgICAgICAgIGZvckVhY2goY29udHJvbGxlckRpcmVjdGl2ZXMsIGZ1bmN0aW9uKGRpcmVjdGl2ZSkgewogICAgICAgICAgICB2YXIgbG9jYWxzID0gewogICAgICAgICAgICAgICRzY29wZTogZGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsCiAgICAgICAgICAgICAgJGVsZW1lbnQ6ICRlbGVtZW50LAogICAgICAgICAgICAgICRhdHRyczogYXR0cnMsCiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGU6IHRyYW5zY2x1ZGVGbgogICAgICAgICAgICB9LCBjb250cm9sbGVySW5zdGFuY2U7CgogICAgICAgICAgICBjb250cm9sbGVyID0gZGlyZWN0aXZlLmNvbnRyb2xsZXI7CiAgICAgICAgICAgIGlmIChjb250cm9sbGVyID09ICdAJykgewogICAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBhdHRyc1tkaXJlY3RpdmUubmFtZV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnRyb2xsZXJJbnN0YW5jZSA9ICRjb250cm9sbGVyKGNvbnRyb2xsZXIsIGxvY2Fscyk7CiAgICAgICAgICAgIC8vIEZvciBkaXJlY3RpdmVzIHdpdGggZWxlbWVudCB0cmFuc2NsdXNpb24gdGhlIGVsZW1lbnQgaXMgYSBjb21tZW50LAogICAgICAgICAgICAvLyBidXQgalF1ZXJ5IC5kYXRhIGRvZXNuJ3Qgc3VwcG9ydCBhdHRhY2hpbmcgZGF0YSB0byBjb21tZW50IG5vZGVzIGFzIGl0J3MgaGFyZCB0bwogICAgICAgICAgICAvLyBjbGVhbiB1cCAoaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvODMzNSkuCiAgICAgICAgICAgIC8vIEluc3RlYWQsIHdlIHNhdmUgdGhlIGNvbnRyb2xsZXJzIGZvciB0aGUgZWxlbWVudCBpbiBhIGxvY2FsIGhhc2ggYW5kIGF0dGFjaCB0byAuZGF0YQogICAgICAgICAgICAvLyBsYXRlciwgb25jZSB3ZSBoYXZlIHRoZSBhY3R1YWwgZWxlbWVudC4KICAgICAgICAgICAgZWxlbWVudENvbnRyb2xsZXJzW2RpcmVjdGl2ZS5uYW1lXSA9IGNvbnRyb2xsZXJJbnN0YW5jZTsKICAgICAgICAgICAgaWYgKCFoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSkgewogICAgICAgICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgZGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJJbnN0YW5jZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChkaXJlY3RpdmUuY29udHJvbGxlckFzKSB7CiAgICAgICAgICAgICAgbG9jYWxzLiRzY29wZVtkaXJlY3RpdmUuY29udHJvbGxlckFzXSA9IGNvbnRyb2xsZXJJbnN0YW5jZTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICAvLyBQUkVMSU5LSU5HCiAgICAgICAgZm9yKGkgPSAwLCBpaSA9IHByZUxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgbGlua0ZuID0gcHJlTGlua0Zuc1tpXTsKICAgICAgICAgIGludm9rZUxpbmtGbihsaW5rRm4sCiAgICAgICAgICAgICAgbGlua0ZuLmlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLAogICAgICAgICAgICAgICRlbGVtZW50LAogICAgICAgICAgICAgIGF0dHJzLAogICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5kaXJlY3RpdmVOYW1lLCBsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyksCiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuCiAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgLy8gUkVDVVJTSU9OCiAgICAgICAgLy8gV2Ugb25seSBwYXNzIHRoZSBpc29sYXRlIHNjb3BlLCBpZiB0aGUgaXNvbGF0ZSBkaXJlY3RpdmUgaGFzIGEgdGVtcGxhdGUsCiAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBjaGlsZCBlbGVtZW50cyBkbyBub3QgYmVsb25nIHRvIHRoZSBpc29sYXRlIGRpcmVjdGl2ZS4KICAgICAgICB2YXIgc2NvcGVUb0NoaWxkID0gc2NvcGU7CiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSAmJiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlIHx8IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS50ZW1wbGF0ZVVybCA9PT0gbnVsbCkpIHsKICAgICAgICAgIHNjb3BlVG9DaGlsZCA9IGlzb2xhdGVTY29wZTsKICAgICAgICB9CiAgICAgICAgY2hpbGRMaW5rRm4gJiYgY2hpbGRMaW5rRm4oc2NvcGVUb0NoaWxkLCBsaW5rTm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIGJvdW5kVHJhbnNjbHVkZUZuKTsKCiAgICAgICAgLy8gUE9TVExJTktJTkcKICAgICAgICBmb3IoaSA9IHBvc3RMaW5rRm5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgICBsaW5rRm4gPSBwb3N0TGlua0Zuc1tpXTsKICAgICAgICAgIGludm9rZUxpbmtGbihsaW5rRm4sCiAgICAgICAgICAgICAgbGlua0ZuLmlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLAogICAgICAgICAgICAgICRlbGVtZW50LAogICAgICAgICAgICAgIGF0dHJzLAogICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5kaXJlY3RpdmVOYW1lLCBsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyksCiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuCiAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZnVuY3Rpb24gdGhhdCBpcyBpbmplY3RlZCBhcyBgJHRyYW5zY2x1ZGVgLgogICAgICAgIC8vIE5vdGU6IGFsbCBhcmd1bWVudHMgYXJlIG9wdGlvbmFsIQogICAgICAgIGZ1bmN0aW9uIGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlKHNjb3BlLCBjbG9uZUF0dGFjaEZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KSB7CiAgICAgICAgICB2YXIgdHJhbnNjbHVkZUNvbnRyb2xsZXJzOwoKICAgICAgICAgIC8vIE5vIHNjb3BlIHBhc3NlZCBpbjoKICAgICAgICAgIGlmICghaXNTY29wZShzY29wZSkpIHsKICAgICAgICAgICAgZnV0dXJlUGFyZW50RWxlbWVudCA9IGNsb25lQXR0YWNoRm47CiAgICAgICAgICAgIGNsb25lQXR0YWNoRm4gPSBzY29wZTsKICAgICAgICAgICAgc2NvcGUgPSB1bmRlZmluZWQ7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlKSB7CiAgICAgICAgICAgIHRyYW5zY2x1ZGVDb250cm9sbGVycyA9IGVsZW1lbnRDb250cm9sbGVyczsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghZnV0dXJlUGFyZW50RWxlbWVudCkgewogICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPyAkZWxlbWVudC5wYXJlbnQoKSA6ICRlbGVtZW50OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBjbG9uZUF0dGFjaEZuLCB0cmFuc2NsdWRlQ29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIG1hcmtEaXJlY3RpdmVzQXNJc29sYXRlKGRpcmVjdGl2ZXMpIHsKICAgICAgLy8gbWFyayBhbGwgZGlyZWN0aXZlcyBhcyBuZWVkaW5nIGlzb2xhdGUgc2NvcGUuCiAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBqIDwgamo7IGorKykgewogICAgICAgIGRpcmVjdGl2ZXNbal0gPSBpbmhlcml0KGRpcmVjdGl2ZXNbal0sIHskJGlzb2xhdGVTY29wZTogdHJ1ZX0pOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCBkZWNvcmF0ZXMgaXQgd2l0aCBleGNlcHRpb24gaGFuZGxpbmcgYW5kIHByb3BlciBwYXJhbWV0ZXJzLiBXZQogICAgICogY2FsbCB0aGlzIHRoZSBib3VuZERpcmVjdGl2ZS4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBUaGUgZGlyZWN0aXZlIG11c3QgYmUgZm91bmQgaW4gc3BlY2lmaWMgZm9ybWF0LgogICAgICogICBTdHJpbmcgY29udGFpbmluZyBhbnkgb2YgdGhlc2VzIGNoYXJhY3RlcnM6CiAgICAgKgogICAgICogICAqIGBFYDogZWxlbWVudCBuYW1lCiAgICAgKiAgICogYEEnOiBhdHRyaWJ1dGUKICAgICAqICAgKiBgQ2A6IGNsYXNzCiAgICAgKiAgICogYE1gOiBjb21tZW50CiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBkaXJlY3RpdmUgd2FzIGFkZGVkLgogICAgICovCiAgICBmdW5jdGlvbiBhZGREaXJlY3RpdmUodERpcmVjdGl2ZXMsIG5hbWUsIGxvY2F0aW9uLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBzdGFydEF0dHJOYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEF0dHJOYW1lKSB7CiAgICAgIGlmIChuYW1lID09PSBpZ25vcmVEaXJlY3RpdmUpIHJldHVybiBudWxsOwogICAgICB2YXIgbWF0Y2ggPSBudWxsOwogICAgICBpZiAoaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgIGZvcih2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSwKICAgICAgICAgICAgaSA9IDAsIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7IGk8aWk7IGkrKykgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTsKICAgICAgICAgICAgaWYgKCAobWF4UHJpb3JpdHkgPT09IHVuZGVmaW5lZCB8fCBtYXhQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkgJiYKICAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QuaW5kZXhPZihsb2NhdGlvbikgIT0gLTEpIHsKICAgICAgICAgICAgICBpZiAoc3RhcnRBdHRyTmFtZSkgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlID0gaW5oZXJpdChkaXJlY3RpdmUsIHskJHN0YXJ0OiBzdGFydEF0dHJOYW1lLCAkJGVuZDogZW5kQXR0ck5hbWV9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdERpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpOwogICAgICAgICAgICAgIG1hdGNoID0gZGlyZWN0aXZlOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG1hdGNoOwogICAgfQoKCiAgICAvKioKICAgICAqIGxvb2tzIHVwIHRoZSBkaXJlY3RpdmUgYW5kIHJldHVybnMgdHJ1ZSBpZiBpdCBpcyBhIG11bHRpLWVsZW1lbnQgZGlyZWN0aXZlLAogICAgICogYW5kIHRoZXJlZm9yZSByZXF1aXJlcyBET00gbm9kZXMgYmV0d2VlbiAtc3RhcnQgYW5kIC1lbmQgbWFya2VycyB0byBiZSBncm91cGVkCiAgICAgKiB0b2dldGhlci4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC4KICAgICAqIEByZXR1cm5zIHRydWUgaWYgZGlyZWN0aXZlIHdhcyByZWdpc3RlcmVkIGFzIG11bHRpLWVsZW1lbnQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG5hbWUpIHsKICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICBmb3IodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksCiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpPGlpOyBpKyspIHsKICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07CiAgICAgICAgICBpZiAoZGlyZWN0aXZlLm11bHRpRWxlbWVudCkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogV2hlbiB0aGUgZWxlbWVudCBpcyByZXBsYWNlZCB3aXRoIEhUTUwgdGVtcGxhdGUgdGhlbiB0aGUgbmV3IGF0dHJpYnV0ZXMKICAgICAqIG9uIHRoZSB0ZW1wbGF0ZSBuZWVkIHRvIGJlIG1lcmdlZCB3aXRoIHRoZSBleGlzdGluZyBhdHRyaWJ1dGVzIGluIHRoZSBET00uCiAgICAgKiBUaGUgZGVzaXJlZCBlZmZlY3QgaXMgdG8gaGF2ZSBib3RoIG9mIHRoZSBhdHRyaWJ1dGVzIHByZXNlbnQuCiAgICAgKgogICAgICogQHBhcmFtIHtvYmplY3R9IGRzdCBkZXN0aW5hdGlvbiBhdHRyaWJ1dGVzIChvcmlnaW5hbCBET00pCiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3JjIHNvdXJjZSBhdHRyaWJ1dGVzIChmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUpCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKGRzdCwgc3JjKSB7CiAgICAgIHZhciBzcmNBdHRyID0gc3JjLiRhdHRyLAogICAgICAgICAgZHN0QXR0ciA9IGRzdC4kYXR0ciwKICAgICAgICAgICRlbGVtZW50ID0gZHN0LiQkZWxlbWVudDsKCiAgICAgIC8vIHJlYXBwbHkgdGhlIG9sZCBhdHRyaWJ1dGVzIHRvIHRoZSBuZXcgZWxlbWVudAogICAgICBmb3JFYWNoKGRzdCwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgIGlmIChrZXkuY2hhckF0KDApICE9ICckJykgewogICAgICAgICAgaWYgKHNyY1trZXldICYmIHNyY1trZXldICE9PSB2YWx1ZSkgewogICAgICAgICAgICB2YWx1ZSArPSAoa2V5ID09PSAnc3R5bGUnID8gJzsnIDogJyAnKSArIHNyY1trZXldOwogICAgICAgICAgfQogICAgICAgICAgZHN0LiRzZXQoa2V5LCB2YWx1ZSwgdHJ1ZSwgc3JjQXR0cltrZXldKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgLy8gY29weSB0aGUgbmV3IGF0dHJpYnV0ZXMgb24gdGhlIG9sZCBhdHRycyBvYmplY3QKICAgICAgZm9yRWFjaChzcmMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAgICBpZiAoa2V5ID09ICdjbGFzcycpIHsKICAgICAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgdmFsdWUpOwogICAgICAgICAgZHN0WydjbGFzcyddID0gKGRzdFsnY2xhc3MnXSA/IGRzdFsnY2xhc3MnXSArICcgJyA6ICcnKSArIHZhbHVlOwogICAgICAgIH0gZWxzZSBpZiAoa2V5ID09ICdzdHlsZScpIHsKICAgICAgICAgICRlbGVtZW50LmF0dHIoJ3N0eWxlJywgJGVsZW1lbnQuYXR0cignc3R5bGUnKSArICc7JyArIHZhbHVlKTsKICAgICAgICAgIGRzdFsnc3R5bGUnXSA9IChkc3RbJ3N0eWxlJ10gPyBkc3RbJ3N0eWxlJ10gKyAnOycgOiAnJykgKyB2YWx1ZTsKICAgICAgICAgIC8vIGBkc3RgIHdpbGwgbmV2ZXIgY29udGFpbiBoYXNPd25Qcm9wZXJ0eSBhcyBET00gcGFyc2VyIHdvbid0IGxldCBpdC4KICAgICAgICAgIC8vIFlvdSB3aWxsIGdldCBhbiAiSW52YWxpZENoYXJhY3RlckVycm9yOiBET00gRXhjZXB0aW9uIDUiIGVycm9yIGlmIHlvdQogICAgICAgICAgLy8gaGF2ZSBhbiBhdHRyaWJ1dGUgbGlrZSAiaGFzLW93bi1wcm9wZXJ0eSIgb3IgImRhdGEtaGFzLW93bi1wcm9wZXJ0eSIsIGV0Yy4KICAgICAgICB9IGVsc2UgaWYgKGtleS5jaGFyQXQoMCkgIT0gJyQnICYmICFkc3QuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTsKICAgICAgICAgIGRzdEF0dHJba2V5XSA9IHNyY0F0dHJba2V5XTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKCiAgICBmdW5jdGlvbiBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcywgJGNvbXBpbGVOb2RlLCB0QXR0cnMsCiAgICAgICAgJHJvb3RFbGVtZW50LCBjaGlsZFRyYW5zY2x1ZGVGbiwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHsKICAgICAgdmFyIGxpbmtRdWV1ZSA9IFtdLAogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4sCiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sCiAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdLAogICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlID0gZGlyZWN0aXZlcy5zaGlmdCgpLAogICAgICAgICAgLy8gVGhlIGZhY3QgdGhhdCB3ZSBoYXZlIHRvIGNvcHkgYW5kIHBhdGNoIHRoZSBkaXJlY3RpdmUgc2VlbXMgd3JvbmchCiAgICAgICAgICBkZXJpdmVkU3luY0RpcmVjdGl2ZSA9IGV4dGVuZCh7fSwgb3JpZ0FzeW5jRGlyZWN0aXZlLCB7CiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBudWxsLCB0cmFuc2NsdWRlOiBudWxsLCByZXBsYWNlOiBudWxsLCAkJG9yaWdpbmFsRGlyZWN0aXZlOiBvcmlnQXN5bmNEaXJlY3RpdmUKICAgICAgICAgIH0pLAogICAgICAgICAgdGVtcGxhdGVVcmwgPSAoaXNGdW5jdGlvbihvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwpKQogICAgICAgICAgICAgID8gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKCRjb21waWxlTm9kZSwgdEF0dHJzKQogICAgICAgICAgICAgIDogb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsLAogICAgICAgICAgdGVtcGxhdGVOYW1lc3BhY2UgPSBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVOYW1lc3BhY2U7CgogICAgICAkY29tcGlsZU5vZGUuZW1wdHkoKTsKCiAgICAgICRodHRwLmdldCgkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh0ZW1wbGF0ZVVybCksIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS4KICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGNvbnRlbnQpIHsKICAgICAgICAgIHZhciBjb21waWxlTm9kZSwgdGVtcFRlbXBsYXRlQXR0cnMsICR0ZW1wbGF0ZSwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbjsKCiAgICAgICAgICBjb250ZW50ID0gZGVub3JtYWxpemVUZW1wbGF0ZShjb250ZW50KTsKCiAgICAgICAgICBpZiAob3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpIHsKICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoY29udGVudCkpIHsKICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBbXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUod3JhcFRlbXBsYXRlKHRlbXBsYXRlTmFtZXNwYWNlLCB0cmltKGNvbnRlbnQpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkdGVtcGxhdGVbMF07CgogICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSAxKSB7CiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JywKICAgICAgICAgICAgICAgICAgIlRlbXBsYXRlIGZvciBkaXJlY3RpdmUgJ3swfScgbXVzdCBoYXZlIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gezF9IiwKICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLm5hbWUsIHRlbXBsYXRlVXJsKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGVtcFRlbXBsYXRlQXR0cnMgPSB7JGF0dHI6IHt9fTsKICAgICAgICAgICAgcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTsKICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgdGVtcFRlbXBsYXRlQXR0cnMpOwoKICAgICAgICAgICAgaWYgKGlzT2JqZWN0KG9yaWdBc3luY0RpcmVjdGl2ZS5zY29wZSkpIHsKICAgICAgICAgICAgICBtYXJrRGlyZWN0aXZlc0FzSXNvbGF0ZSh0ZW1wbGF0ZURpcmVjdGl2ZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSB0ZW1wbGF0ZURpcmVjdGl2ZXMuY29uY2F0KGRpcmVjdGl2ZXMpOwogICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0QXR0cnMsIHRlbXBUZW1wbGF0ZUF0dHJzKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZTsKICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoY29udGVudCk7CiAgICAgICAgICB9CgogICAgICAgICAgZGlyZWN0aXZlcy51bnNoaWZ0KGRlcml2ZWRTeW5jRGlyZWN0aXZlKTsKCiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbiA9IGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdEF0dHJzLAogICAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGUsIG9yaWdBc3luY0RpcmVjdGl2ZSwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsCiAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCk7CiAgICAgICAgICBmb3JFYWNoKCRyb290RWxlbWVudCwgZnVuY3Rpb24obm9kZSwgaSkgewogICAgICAgICAgICBpZiAobm9kZSA9PSBjb21waWxlTm9kZSkgewogICAgICAgICAgICAgICRyb290RWxlbWVudFtpXSA9ICRjb21waWxlTm9kZVswXTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4gPSBjb21waWxlTm9kZXMoJGNvbXBpbGVOb2RlWzBdLmNoaWxkTm9kZXMsIGNoaWxkVHJhbnNjbHVkZUZuKTsKCiAgICAgICAgICB3aGlsZShsaW5rUXVldWUubGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBzY29wZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLAogICAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLAogICAgICAgICAgICAgICAgbGlua1Jvb3RFbGVtZW50ID0gbGlua1F1ZXVlLnNoaWZ0KCksCiAgICAgICAgICAgICAgICBib3VuZFRyYW5zY2x1ZGVGbiA9IGxpbmtRdWV1ZS5zaGlmdCgpLAogICAgICAgICAgICAgICAgbGlua05vZGUgPSAkY29tcGlsZU5vZGVbMF07CgogICAgICAgICAgICBpZiAoYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSAhPT0gYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSkgewogICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYmVmb3JlVGVtcGxhdGVMaW5rTm9kZS5jbGFzc05hbWU7CgogICAgICAgICAgICAgIGlmICghKHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgJiYKICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpKSB7CiAgICAgICAgICAgICAgICAvLyBpdCB3YXMgY2xvbmVkIHRoZXJlZm9yZSB3ZSBoYXZlIHRvIGNsb25lIGFzIHdlbGwuCiAgICAgICAgICAgICAgICBsaW5rTm9kZSA9IGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJlcGxhY2VXaXRoKGxpbmtSb290RWxlbWVudCwganFMaXRlKGJlZm9yZVRlbXBsYXRlTGlua05vZGUpLCBsaW5rTm9kZSk7CgogICAgICAgICAgICAgIC8vIENvcHkgaW4gQ1NTIGNsYXNzZXMgZnJvbSBvcmlnaW5hbCBub2RlCiAgICAgICAgICAgICAgc2FmZUFkZENsYXNzKGpxTGl0ZShsaW5rTm9kZSksIG9sZENsYXNzZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkgewogICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBib3VuZFRyYW5zY2x1ZGVGbjsKICAgICAgICAgICAgfQogICAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbihhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sIHNjb3BlLCBsaW5rTm9kZSwgJHJvb3RFbGVtZW50LAogICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pOwogICAgICAgICAgfQogICAgICAgICAgbGlua1F1ZXVlID0gbnVsbDsKICAgICAgICB9KS4KICAgICAgICBlcnJvcihmdW5jdGlvbihyZXNwb25zZSwgY29kZSwgaGVhZGVycywgY29uZmlnKSB7CiAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBsb2FkJywgJ0ZhaWxlZCB0byBsb2FkIHRlbXBsYXRlOiB7MH0nLCBjb25maWcudXJsKTsKICAgICAgICB9KTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiBkZWxheWVkTm9kZUxpbmtGbihpZ25vcmVDaGlsZExpbmtGbiwgc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBib3VuZFRyYW5zY2x1ZGVGbikgewogICAgICAgIHZhciBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47CiAgICAgICAgaWYgKGxpbmtRdWV1ZSkgewogICAgICAgICAgbGlua1F1ZXVlLnB1c2goc2NvcGUpOwogICAgICAgICAgbGlua1F1ZXVlLnB1c2gobm9kZSk7CiAgICAgICAgICBsaW5rUXVldWUucHVzaChyb290RWxlbWVudCk7CiAgICAgICAgICBsaW5rUXVldWUucHVzaChjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7CiAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pOwogICAgICAgICAgfQogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBTb3J0aW5nIGZ1bmN0aW9uIGZvciBib3VuZCBkaXJlY3RpdmVzLgogICAgICovCiAgICBmdW5jdGlvbiBieVByaW9yaXR5KGEsIGIpIHsKICAgICAgdmFyIGRpZmYgPSBiLnByaW9yaXR5IC0gYS5wcmlvcml0eTsKICAgICAgaWYgKGRpZmYgIT09IDApIHJldHVybiBkaWZmOwogICAgICBpZiAoYS5uYW1lICE9PSBiLm5hbWUpIHJldHVybiAoYS5uYW1lIDwgYi5uYW1lKSA/IC0xIDogMTsKICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4OwogICAgfQoKCiAgICBmdW5jdGlvbiBhc3NlcnROb0R1cGxpY2F0ZSh3aGF0LCBwcmV2aW91c0RpcmVjdGl2ZSwgZGlyZWN0aXZlLCBlbGVtZW50KSB7CiAgICAgIGlmIChwcmV2aW91c0RpcmVjdGl2ZSkgewogICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdtdWx0aWRpcicsICdNdWx0aXBsZSBkaXJlY3RpdmVzIFt7MH0sIHsxfV0gYXNraW5nIGZvciB7Mn0gb246IHszfScsCiAgICAgICAgICAgIHByZXZpb3VzRGlyZWN0aXZlLm5hbWUsIGRpcmVjdGl2ZS5uYW1lLCB3aGF0LCBzdGFydGluZ1RhZyhlbGVtZW50KSk7CiAgICAgIH0KICAgIH0KCgogICAgZnVuY3Rpb24gYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIHRleHQpIHsKICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodGV4dCwgdHJ1ZSk7CiAgICAgIGlmIChpbnRlcnBvbGF0ZUZuKSB7CiAgICAgICAgZGlyZWN0aXZlcy5wdXNoKHsKICAgICAgICAgIHByaW9yaXR5OiAwLAogICAgICAgICAgY29tcGlsZTogZnVuY3Rpb24gdGV4dEludGVycG9sYXRlQ29tcGlsZUZuKHRlbXBsYXRlTm9kZSkgewogICAgICAgICAgICAvLyB3aGVuIHRyYW5zY2x1ZGluZyBhIHRlbXBsYXRlIHRoYXQgaGFzIGJpbmRpbmdzIGluIHRoZSByb290CiAgICAgICAgICAgIC8vIHRoZW4gd2UgZG9uJ3QgaGF2ZSBhIHBhcmVudCBhbmQgc2hvdWxkIGRvIHRoaXMgaW4gdGhlIGxpbmtGbgogICAgICAgICAgICB2YXIgcGFyZW50ID0gdGVtcGxhdGVOb2RlLnBhcmVudCgpLCBoYXNDb21waWxlUGFyZW50ID0gcGFyZW50Lmxlbmd0aDsKICAgICAgICAgICAgaWYgKGhhc0NvbXBpbGVQYXJlbnQpIHNhZmVBZGRDbGFzcyh0ZW1wbGF0ZU5vZGUucGFyZW50KCksICduZy1iaW5kaW5nJyk7CgogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGV4dEludGVycG9sYXRlTGlua0ZuKHNjb3BlLCBub2RlKSB7CiAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50KCksCiAgICAgICAgICAgICAgICAgIGJpbmRpbmdzID0gcGFyZW50LmRhdGEoJyRiaW5kaW5nJykgfHwgW107CiAgICAgICAgICAgICAgYmluZGluZ3MucHVzaChpbnRlcnBvbGF0ZUZuKTsKICAgICAgICAgICAgICBwYXJlbnQuZGF0YSgnJGJpbmRpbmcnLCBiaW5kaW5ncyk7CiAgICAgICAgICAgICAgaWYgKCFoYXNDb21waWxlUGFyZW50KSBzYWZlQWRkQ2xhc3MocGFyZW50LCAnbmctYmluZGluZycpOwogICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICAgIG5vZGVbMF0ubm9kZVZhbHVlID0gdmFsdWU7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCgogICAgZnVuY3Rpb24gd3JhcFRlbXBsYXRlKHR5cGUsIHRlbXBsYXRlKSB7CiAgICAgIHR5cGUgPSBsb3dlcmNhc2UodHlwZSB8fCAnaHRtbCcpOwogICAgICBzd2l0Y2godHlwZSkgewogICAgICBjYXNlICdzdmcnOgogICAgICBjYXNlICdtYXRoJzoKICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIHdyYXBwZXIuaW5uZXJIVE1MID0gJzwnK3R5cGUrJz4nK3RlbXBsYXRlKyc8LycrdHlwZSsnPic7CiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzOwogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBnZXRUcnVzdGVkQ29udGV4dChub2RlLCBhdHRyTm9ybWFsaXplZE5hbWUpIHsKICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PSAic3JjZG9jIikgewogICAgICAgIHJldHVybiAkc2NlLkhUTUw7CiAgICAgIH0KICAgICAgdmFyIHRhZyA9IG5vZGVOYW1lXyhub2RlKTsKICAgICAgLy8gbWFjdGlvblt4bGluazpocmVmXSBjYW4gc291cmNlIFNWRy4gIEl0J3Mgbm90IGxpbWl0ZWQgdG8gPG1hY3Rpb24+LgogICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09ICJ4bGlua0hyZWYiIHx8CiAgICAgICAgICAodGFnID09ICJmb3JtIiAmJiBhdHRyTm9ybWFsaXplZE5hbWUgPT0gImFjdGlvbiIpIHx8CiAgICAgICAgICAodGFnICE9ICJpbWciICYmIChhdHRyTm9ybWFsaXplZE5hbWUgPT0gInNyYyIgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOb3JtYWxpemVkTmFtZSA9PSAibmdTcmMiKSkpIHsKICAgICAgICByZXR1cm4gJHNjZS5SRVNPVVJDRV9VUkw7CiAgICAgIH0KICAgIH0KCgogICAgZnVuY3Rpb24gYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuYW1lLCBhbGxPck5vdGhpbmcpIHsKICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodmFsdWUsIHRydWUpOwoKICAgICAgLy8gbm8gaW50ZXJwb2xhdGlvbiBmb3VuZCAtPiBpZ25vcmUKICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47CgoKICAgICAgaWYgKG5hbWUgPT09ICJtdWx0aXBsZSIgJiYgbm9kZU5hbWVfKG5vZGUpID09PSAic2VsZWN0IikgewogICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCJzZWxtdWx0aSIsCiAgICAgICAgICAgICJCaW5kaW5nIHRvIHRoZSAnbXVsdGlwbGUnIGF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkLiBFbGVtZW50OiB7MH0iLAogICAgICAgICAgICBzdGFydGluZ1RhZyhub2RlKSk7CiAgICAgIH0KCiAgICAgIGRpcmVjdGl2ZXMucHVzaCh7CiAgICAgICAgcHJpb3JpdHk6IDEwMCwKICAgICAgICBjb21waWxlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZVByZUxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgICAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gKGF0dHIuJCRvYnNlcnZlcnMgfHwgKGF0dHIuJCRvYnNlcnZlcnMgPSB7fSkpOwoKICAgICAgICAgICAgICAgIGlmIChFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQLnRlc3QobmFtZSkpIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vZG9tZXZlbnRzJywKICAgICAgICAgICAgICAgICAgICAgICJJbnRlcnBvbGF0aW9ucyBmb3IgSFRNTCBET00gZXZlbnQgYXR0cmlidXRlcyBhcmUgZGlzYWxsb3dlZC4gIFBsZWFzZSB1c2UgdGhlICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICJuZy0gdmVyc2lvbnMgKHN1Y2ggYXMgbmctY2xpY2sgaW5zdGVhZCBvZiBvbmNsaWNrKSBpbnN0ZWFkLiIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gaW50ZXJwb2xhdGUgYWdhaW4sIGluIGNhc2UgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBoYXMgYmVlbiB1cGRhdGVkCiAgICAgICAgICAgICAgICAvLyAoZS5nLiBieSBhbm90aGVyIGRpcmVjdGl2ZSdzIGNvbXBpbGUgZnVuY3Rpb24pCiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGF0dHJbbmFtZV0sIHRydWUsIGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIG5hbWUpLAogICAgICAgICAgICAgICAgICAgIEFMTF9PUl9OT1RISU5HX0FUVFJTW25hbWVdIHx8IGFsbE9yTm90aGluZyk7CgogICAgICAgICAgICAgICAgLy8gaWYgYXR0cmlidXRlIHdhcyB1cGRhdGVkIHNvIHRoYXQgdGhlcmUgaXMgbm8gaW50ZXJwb2xhdGlvbiBnb2luZyBvbiB3ZSBkb24ndCB3YW50IHRvCiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhbnkgb2JzZXJ2ZXJzCiAgICAgICAgICAgICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjsKCiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIGF0dHIgb2JqZWN0IHNvIHRoYXQgaXQncyByZWFkeSBpbiBjYXNlIHdlIG5lZWQgdGhlIHZhbHVlIGZvciBpc29sYXRlCiAgICAgICAgICAgICAgICAvLyBzY29wZSBpbml0aWFsaXphdGlvbiwgb3RoZXJ3aXNlIHRoZSB2YWx1ZSB3b3VsZCBub3QgYmUgYXZhaWxhYmxlIGZyb20gaXNvbGF0ZQogICAgICAgICAgICAgICAgLy8gZGlyZWN0aXZlJ3MgbGlua2luZyBmbiBkdXJpbmcgbGlua2luZyBwaGFzZQogICAgICAgICAgICAgICAgYXR0cltuYW1lXSA9IGludGVycG9sYXRlRm4oc2NvcGUpOwoKICAgICAgICAgICAgICAgICgkJG9ic2VydmVyc1tuYW1lXSB8fCAoJCRvYnNlcnZlcnNbbmFtZV0gPSBbXSkpLiQkaW50ZXIgPSB0cnVlOwogICAgICAgICAgICAgICAgKGF0dHIuJCRvYnNlcnZlcnMgJiYgYXR0ci4kJG9ic2VydmVyc1tuYW1lXS4kJHNjb3BlIHx8IHNjb3BlKS4KICAgICAgICAgICAgICAgICAgJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAvL3NwZWNpYWwgY2FzZSBmb3IgY2xhc3MgYXR0cmlidXRlIGFkZGl0aW9uICsgcmVtb3ZhbAogICAgICAgICAgICAgICAgICAgIC8vc28gdGhhdCBjbGFzcyBjaGFuZ2VzIGNhbiB0YXAgaW50byB0aGUgYW5pbWF0aW9uCiAgICAgICAgICAgICAgICAgICAgLy9ob29rcyBwcm92aWRlZCBieSB0aGUgJGFuaW1hdGUgc2VydmljZS4gQmUgc3VyZSB0bwogICAgICAgICAgICAgICAgICAgIC8vc2tpcCBhbmltYXRpb25zIHdoZW4gdGhlIGZpcnN0IGRpZ2VzdCBvY2N1cnMgKHdoZW4KICAgICAgICAgICAgICAgICAgICAvL2JvdGggdGhlIG5ldyBhbmQgdGhlIG9sZCB2YWx1ZXMgYXJlIHRoZSBzYW1lKSBzaW5jZQogICAgICAgICAgICAgICAgICAgIC8vdGhlIENTUyBjbGFzc2VzIGFyZSB0aGUgbm9uLWludGVycG9sYXRlZCB2YWx1ZXMKICAgICAgICAgICAgICAgICAgICBpZihuYW1lID09PSAnY2xhc3MnICYmIG5ld1ZhbHVlICE9IG9sZFZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyLiR1cGRhdGVDbGFzcyhuZXdWYWx1ZSwgb2xkVmFsdWUpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbmV3VmFsdWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICB9KTsKICAgIH0KCgogICAgLyoqCiAgICAgKiBUaGlzIGlzIGEgc3BlY2lhbCBqcUxpdGUucmVwbGFjZVdpdGgsIHdoaWNoIGNhbiByZXBsYWNlIGl0ZW1zIHdoaWNoCiAgICAgKiBoYXZlIG5vIHBhcmVudHMsIHByb3ZpZGVkIHRoYXQgdGhlIGNvbnRhaW5pbmcganFMaXRlIGNvbGxlY3Rpb24gaXMgcHJvdmlkZWQuCiAgICAgKgogICAgICogQHBhcmFtIHtKcUxpdGU9fSAkcm9vdEVsZW1lbnQgVGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGUgdHJlZS4gVXNlZCBzbyB0aGF0IHdlIGNhbiByZXBsYWNlIG5vZGVzCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcm9vdCBvZiB0aGUgdHJlZS4KICAgICAqIEBwYXJhbSB7SnFMaXRlfSBlbGVtZW50c1RvUmVtb3ZlIFRoZSBqcUxpdGUgZWxlbWVudCB3aGljaCB3ZSBhcmUgZ29pbmcgdG8gcmVwbGFjZS4gV2Uga2VlcAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNoZWxsLCBidXQgcmVwbGFjZSBpdHMgRE9NIG5vZGUgcmVmZXJlbmNlLgogICAgICogQHBhcmFtIHtOb2RlfSBuZXdOb2RlIFRoZSBuZXcgRE9NIG5vZGUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgZWxlbWVudHNUb1JlbW92ZSwgbmV3Tm9kZSkgewogICAgICB2YXIgZmlyc3RFbGVtZW50VG9SZW1vdmUgPSBlbGVtZW50c1RvUmVtb3ZlWzBdLAogICAgICAgICAgcmVtb3ZlQ291bnQgPSBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCwKICAgICAgICAgIHBhcmVudCA9IGZpcnN0RWxlbWVudFRvUmVtb3ZlLnBhcmVudE5vZGUsCiAgICAgICAgICBpLCBpaTsKCiAgICAgIGlmICgkcm9vdEVsZW1lbnQpIHsKICAgICAgICBmb3IoaSA9IDAsIGlpID0gJHJvb3RFbGVtZW50Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnRbaV0gPT0gZmlyc3RFbGVtZW50VG9SZW1vdmUpIHsKICAgICAgICAgICAgJHJvb3RFbGVtZW50W2krK10gPSBuZXdOb2RlOwogICAgICAgICAgICBmb3IgKHZhciBqID0gaSwgajIgPSBqICsgcmVtb3ZlQ291bnQgLSAxLAogICAgICAgICAgICAgICAgICAgICBqaiA9ICRyb290RWxlbWVudC5sZW5ndGg7CiAgICAgICAgICAgICAgICAgaiA8IGpqOyBqKyssIGoyKyspIHsKICAgICAgICAgICAgICBpZiAoajIgPCBqaikgewogICAgICAgICAgICAgICAgJHJvb3RFbGVtZW50W2pdID0gJHJvb3RFbGVtZW50W2oyXTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZGVsZXRlICRyb290RWxlbWVudFtqXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJHJvb3RFbGVtZW50Lmxlbmd0aCAtPSByZW1vdmVDb3VudCAtIDE7CgogICAgICAgICAgICAvLyBJZiB0aGUgcmVwbGFjZWQgZWxlbWVudCBpcyBhbHNvIHRoZSBqUXVlcnkgLmNvbnRleHQgdGhlbiByZXBsYWNlIGl0CiAgICAgICAgICAgIC8vIC5jb250ZXh0IGlzIGEgZGVwcmVjYXRlZCBqUXVlcnkgYXBpLCBzbyB3ZSBzaG91bGQgc2V0IGl0IG9ubHkgd2hlbiBqUXVlcnkgc2V0IGl0CiAgICAgICAgICAgIC8vIGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jb250ZXh0LwogICAgICAgICAgICBpZiAoJHJvb3RFbGVtZW50LmNvbnRleHQgPT09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7CiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50LmNvbnRleHQgPSBuZXdOb2RlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHBhcmVudCkgewogICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgZmlyc3RFbGVtZW50VG9SZW1vdmUpOwogICAgICB9CiAgICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZmlyc3RFbGVtZW50VG9SZW1vdmUpOwoKICAgICAgLy8gQ29weSBvdmVyIHVzZXIgZGF0YSAodGhhdCBpbmNsdWRlcyBBbmd1bGFyJ3MgJHNjb3BlIGV0Yy4pLiBEb24ndCBjb3B5IHByaXZhdGUKICAgICAgLy8gZGF0YSBoZXJlIGJlY2F1c2UgdGhlcmUncyBubyBwdWJsaWMgaW50ZXJmYWNlIGluIGpRdWVyeSB0byBkbyB0aGF0IGFuZCBjb3B5aW5nIG92ZXIKICAgICAgLy8gZXZlbnQgbGlzdGVuZXJzICh3aGljaCBpcyB0aGUgbWFpbiB1c2Ugb2YgcHJpdmF0ZSBkYXRhKSB3b3VsZG4ndCB3b3JrIGFueXdheS4KICAgICAganFMaXRlKG5ld05vZGUpLmRhdGEoanFMaXRlKGZpcnN0RWxlbWVudFRvUmVtb3ZlKS5kYXRhKCkpOwoKICAgICAgLy8gUmVtb3ZlIGRhdGEgb2YgdGhlIHJlcGxhY2VkIGVsZW1lbnQuIFdlIGNhbm5vdCBqdXN0IGNhbGwgLnJlbW92ZSgpCiAgICAgIC8vIG9uIHRoZSBlbGVtZW50IGl0IHNpbmNlIHRoYXQgd291bGQgZGVhbGxvY2F0ZSBzY29wZSB0aGF0IGlzIG5lZWRlZAogICAgICAvLyBmb3IgdGhlIG5ldyBub2RlLiBJbnN0ZWFkLCByZW1vdmUgdGhlIGRhdGEgIm1hbnVhbGx5Ii4KICAgICAgaWYgKCFqUXVlcnkpIHsKICAgICAgICBkZWxldGUganFMaXRlLmNhY2hlW2ZpcnN0RWxlbWVudFRvUmVtb3ZlW2pxTGl0ZS5leHBhbmRvXV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8galF1ZXJ5IDIueCBkb2Vzbid0IGV4cG9zZSB0aGUgZGF0YSBzdG9yYWdlLiBVc2UgalF1ZXJ5LmNsZWFuRGF0YSB0byBjbGVhbiB1cCBhZnRlcgogICAgICAgIC8vIHRoZSByZXBsYWNlZCBlbGVtZW50LiBUaGUgY2xlYW5EYXRhIHZlcnNpb24gbW9ua2V5LXBhdGNoZWQgYnkgQW5ndWxhciB3b3VsZCBjYXVzZQogICAgICAgIC8vIHRoZSBzY29wZSB0byBiZSB0cmFzaGVkIGFuZCB3ZSBkbyBuZWVkIHRoZSB2ZXJ5IHNhbWUgc2NvcGUgdG8gd29yayB3aXRoIHRoZSBuZXcKICAgICAgICAvLyBlbGVtZW50LiBIb3dldmVyLCB3ZSBjYW5ub3QganVzdCBjYWNoZSB0aGUgbm9uLXBhdGNoZWQgdmVyc2lvbiBhbmQgdXNlIGl0IGhlcmUgYXMKICAgICAgICAvLyB0aGF0IHdvdWxkIGJyZWFrIGlmIGFub3RoZXIgbGlicmFyeSBwYXRjaGVzIHRoZSBtZXRob2QgYWZ0ZXIgQW5ndWxhciBkb2VzIChvbmUKICAgICAgICAvLyBleGFtcGxlIGlzIGpRdWVyeSBVSSkuIEluc3RlYWQsIHNldCBhIGZsYWcgaW5kaWNhdGluZyBzY29wZSBkZXN0cm95aW5nIHNob3VsZCBiZQogICAgICAgIC8vIHNraXBwZWQgdGhpcyBvbmUgdGltZS4KICAgICAgICBza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSA9IHRydWU7CiAgICAgICAgalF1ZXJ5LmNsZWFuRGF0YShbZmlyc3RFbGVtZW50VG9SZW1vdmVdKTsKICAgICAgfQoKICAgICAgZm9yICh2YXIgayA9IDEsIGtrID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGg7IGsgPCBrazsgaysrKSB7CiAgICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1RvUmVtb3ZlW2tdOwogICAgICAgIGpxTGl0ZShlbGVtZW50KS5yZW1vdmUoKTsgLy8gbXVzdCBkbyB0aGlzIHdheSB0byBjbGVhbiB1cCBleHBhbmRvCiAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7CiAgICAgICAgZGVsZXRlIGVsZW1lbnRzVG9SZW1vdmVba107CiAgICAgIH0KCiAgICAgIGVsZW1lbnRzVG9SZW1vdmVbMF0gPSBuZXdOb2RlOwogICAgICBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCA9IDE7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNsb25lQW5kQW5ub3RhdGVGbihmbiwgYW5ub3RhdGlvbikgewogICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKCkgeyByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgfSwgZm4sIGFubm90YXRpb24pOwogICAgfQoKCiAgICBmdW5jdGlvbiBpbnZva2VMaW5rRm4obGlua0ZuLCBzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7CiAgICAgIHRyeSB7CiAgICAgICAgbGlua0ZuKHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pOwogICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlLCBzdGFydGluZ1RhZygkZWxlbWVudCkpOwogICAgICB9CiAgICB9CiAgfV07Cn0KCnZhciBQUkVGSVhfUkVHRVhQID0gL14oeFtcOlwtX118ZGF0YVtcOlwtX10pL2k7Ci8qKgogKiBDb252ZXJ0cyBhbGwgYWNjZXB0ZWQgZGlyZWN0aXZlcyBmb3JtYXQgaW50byBwcm9wZXIgZGlyZWN0aXZlIG5hbWUuCiAqIEFsbCBvZiB0aGVzZSB3aWxsIGJlY29tZSAnbXlEaXJlY3RpdmUnOgogKiAgIG15OkRpcmVjdGl2ZQogKiAgIG15LWRpcmVjdGl2ZQogKiAgIHgtbXktZGlyZWN0aXZlCiAqICAgZGF0YS1teTpkaXJlY3RpdmUKICoKICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci4KICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemUKICovCmZ1bmN0aW9uIGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKSB7CiAgcmV0dXJuIGNhbWVsQ2FzZShuYW1lLnJlcGxhY2UoUFJFRklYX1JFR0VYUCwgJycpKTsKfQoKLyoqCiAqIEBuZ2RvYyB0eXBlCiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIHNoYXJlZCBvYmplY3QgYmV0d2VlbiBkaXJlY3RpdmUgY29tcGlsZSAvIGxpbmtpbmcgZnVuY3Rpb25zIHdoaWNoIGNvbnRhaW5zIG5vcm1hbGl6ZWQgRE9NCiAqIGVsZW1lbnQgYXR0cmlidXRlcy4gVGhlIHZhbHVlcyByZWZsZWN0IGN1cnJlbnQgYmluZGluZyBzdGF0ZSBge3sgfX1gLiBUaGUgbm9ybWFsaXphdGlvbiBpcwogKiBuZWVkZWQgc2luY2UgYWxsIG9mIHRoZXNlIGFyZSB0cmVhdGVkIGFzIGVxdWl2YWxlbnQgaW4gQW5ndWxhcjoKICoKICogYGBgCiAqICAgIDxzcGFuIG5nOmJpbmQ9ImEiIG5nLWJpbmQ9ImEiIGRhdGEtbmctYmluZD0iYSIgeC1uZy1iaW5kPSJhIj4KICogYGBgCiAqLwoKLyoqCiAqIEBuZ2RvYyBwcm9wZXJ0eQogKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0cgogKgogKiBAZGVzY3JpcHRpb24KICogQSBtYXAgb2YgRE9NIGVsZW1lbnQgYXR0cmlidXRlIG5hbWVzIHRvIHRoZSBub3JtYWxpemVkIG5hbWUuIFRoaXMgaXMKICogbmVlZGVkIHRvIGRvIHJldmVyc2UgbG9va3VwIGZyb20gbm9ybWFsaXplZCBuYW1lIGJhY2sgdG8gYWN0dWFsIG5hbWUuCiAqLwoKCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRzZXQKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIFNldCBET00gZWxlbWVudCBhdHRyaWJ1dGUgdmFsdWUuCiAqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5vcm1hbGl6ZWQgZWxlbWVudCBhdHRyaWJ1dGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gbW9kaWZ5LiBUaGUgbmFtZSBpcwogKiAgICAgICAgICByZXZlcnNlLXRyYW5zbGF0ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0ciAkYXR0cn0KICogICAgICAgICAgcHJvcGVydHkgdG8gdGhlIG9yaWdpbmFsIG5hbWUuCiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byBzZXQgdGhlIGF0dHJpYnV0ZSB0by4gVGhlIHZhbHVlIGNhbiBiZSBhbiBpbnRlcnBvbGF0ZWQgc3RyaW5nLgogKi8KCgoKLyoqCiAqIENsb3N1cmUgY29tcGlsZXIgdHlwZSBpbmZvcm1hdGlvbgogKi8KCmZ1bmN0aW9uIG5vZGVzZXRMaW5raW5nRm4oCiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSwKICAvKiBOb2RlTGlzdCAqLyBub2RlTGlzdCwKICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LAogIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGbgope30KCmZ1bmN0aW9uIGRpcmVjdGl2ZUxpbmtpbmdGbigKICAvKiBub2Rlc2V0TGlua2luZ0ZuICovIG5vZGVzZXRMaW5raW5nRm4sCiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSwKICAvKiBOb2RlICovIG5vZGUsCiAgLyogRWxlbWVudCAqLyByb290RWxlbWVudCwKICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm4KKXt9CgpmdW5jdGlvbiB0b2tlbkRpZmZlcmVuY2Uoc3RyMSwgc3RyMikgewogIHZhciB2YWx1ZXMgPSAnJywKICAgICAgdG9rZW5zMSA9IHN0cjEuc3BsaXQoL1xzKy8pLAogICAgICB0b2tlbnMyID0gc3RyMi5zcGxpdCgvXHMrLyk7CgogIG91dGVyOgogIGZvcih2YXIgaSA9IDA7IGkgPCB0b2tlbnMxLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgdG9rZW4gPSB0b2tlbnMxW2ldOwogICAgZm9yKHZhciBqID0gMDsgaiA8IHRva2VuczIubGVuZ3RoOyBqKyspIHsKICAgICAgaWYodG9rZW4gPT0gdG9rZW5zMltqXSkgY29udGludWUgb3V0ZXI7CiAgICB9CiAgICB2YWx1ZXMgKz0gKHZhbHVlcy5sZW5ndGggPiAwID8gJyAnIDogJycpICsgdG9rZW47CiAgfQogIHJldHVybiB2YWx1ZXM7Cn0KCi8qKgogKiBAbmdkb2MgcHJvdmlkZXIKICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICogVGhlIHtAbGluayBuZy4kY29udHJvbGxlciAkY29udHJvbGxlciBzZXJ2aWNlfSBpcyB1c2VkIGJ5IEFuZ3VsYXIgdG8gY3JlYXRlIG5ldwogKiBjb250cm9sbGVycy4KICoKICogVGhpcyBwcm92aWRlciBhbGxvd3MgY29udHJvbGxlciByZWdpc3RyYXRpb24gdmlhIHRoZQogKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciByZWdpc3Rlcn0gbWV0aG9kLgogKi8KZnVuY3Rpb24gJENvbnRyb2xsZXJQcm92aWRlcigpIHsKICB2YXIgY29udHJvbGxlcnMgPSB7fSwKICAgICAgZ2xvYmFscyA9IGZhbHNlLAogICAgICBDTlRSTF9SRUcgPSAvXihcUyspKFxzK2FzXHMrKFx3KykpPyQvOwoKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIKICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgQ29udHJvbGxlciBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGNvbnRyb2xsZXJzIHdoZXJlIHRoZSBrZXlzIGFyZQogICAqICAgIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbnN0cnVjdG9ycy4KICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBjb25zdHJ1Y3RvciBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZuIChvcHRpb25hbGx5IGRlY29yYXRlZCB3aXRoIERJCiAgICogICAgYW5ub3RhdGlvbnMgaW4gdGhlIGFycmF5IG5vdGF0aW9uKS4KICAgKi8KICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZSwgY29uc3RydWN0b3IpIHsKICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb250cm9sbGVyJyk7CiAgICBpZiAoaXNPYmplY3QobmFtZSkpIHsKICAgICAgZXh0ZW5kKGNvbnRyb2xsZXJzLCBuYW1lKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnRyb2xsZXJzW25hbWVdID0gY29uc3RydWN0b3I7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXIjYWxsb3dHbG9iYWxzCiAgICogQGRlc2NyaXB0aW9uIElmIGNhbGxlZCwgYWxsb3dzIGAkY29udHJvbGxlcmAgdG8gZmluZCBjb250cm9sbGVyIGNvbnN0cnVjdG9ycyBvbiBgd2luZG93YAogICAqLwogIHRoaXMuYWxsb3dHbG9iYWxzID0gZnVuY3Rpb24oKSB7CiAgICBnbG9iYWxzID0gdHJ1ZTsKICB9OwoKCiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRpbmplY3RvciwgJHdpbmRvdykgewoKICAgIC8qKgogICAgICogQG5nZG9jIHNlcnZpY2UKICAgICAqIEBuYW1lICRjb250cm9sbGVyCiAgICAgKiBAcmVxdWlyZXMgJGluamVjdG9yCiAgICAgKgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGNvbnN0cnVjdG9yIElmIGNhbGxlZCB3aXRoIGEgZnVuY3Rpb24gdGhlbiBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgdGhlCiAgICAgKiAgICBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBPdGhlcndpc2UgaXQncyBjb25zaWRlcmVkIHRvIGJlIGEgc3RyaW5nIHdoaWNoIGlzIHVzZWQKICAgICAqICAgIHRvIHJldHJpZXZlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6CiAgICAgKgogICAgICogICAgKiBjaGVjayBpZiBhIGNvbnRyb2xsZXIgd2l0aCBnaXZlbiBuYW1lIGlzIHJlZ2lzdGVyZWQgdmlhIGAkY29udHJvbGxlclByb3ZpZGVyYAogICAgICogICAgKiBjaGVjayBpZiBldmFsdWF0aW5nIHRoZSBzdHJpbmcgb24gdGhlIGN1cnJlbnQgc2NvcGUgcmV0dXJucyBhIGNvbnN0cnVjdG9yCiAgICAgKiAgICAqIGlmICRjb250cm9sbGVyUHJvdmlkZXIjYWxsb3dHbG9iYWxzLCBjaGVjayBgd2luZG93W2NvbnN0cnVjdG9yXWAgb24gdGhlIGdsb2JhbAogICAgICogICAgICBgd2luZG93YCBvYmplY3QgKG5vdCByZWNvbW1lbmRlZCkKICAgICAqCiAgICAgKiBAcGFyYW0ge09iamVjdH0gbG9jYWxzIEluamVjdGlvbiBsb2NhbHMgZm9yIENvbnRyb2xsZXIuCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEluc3RhbmNlIG9mIGdpdmVuIGNvbnRyb2xsZXIuCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBgJGNvbnRyb2xsZXJgIHNlcnZpY2UgaXMgcmVzcG9uc2libGUgZm9yIGluc3RhbnRpYXRpbmcgY29udHJvbGxlcnMuCiAgICAgKgogICAgICogSXQncyBqdXN0IGEgc2ltcGxlIGNhbGwgdG8ge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0sIGJ1dCBleHRyYWN0ZWQgaW50bwogICAgICogYSBzZXJ2aWNlLCBzbyB0aGF0IG9uZSBjYW4gb3ZlcnJpZGUgdGhpcyBzZXJ2aWNlIHdpdGggW0JDIHZlcnNpb25dKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzE2NDk3ODgpLgogICAgICovCiAgICByZXR1cm4gZnVuY3Rpb24oZXhwcmVzc2lvbiwgbG9jYWxzKSB7CiAgICAgIHZhciBpbnN0YW5jZSwgbWF0Y2gsIGNvbnN0cnVjdG9yLCBpZGVudGlmaWVyOwoKICAgICAgaWYoaXNTdHJpbmcoZXhwcmVzc2lvbikpIHsKICAgICAgICBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goQ05UUkxfUkVHKSwKICAgICAgICBjb25zdHJ1Y3RvciA9IG1hdGNoWzFdLAogICAgICAgIGlkZW50aWZpZXIgPSBtYXRjaFszXTsKICAgICAgICBleHByZXNzaW9uID0gY29udHJvbGxlcnMuaGFzT3duUHJvcGVydHkoY29uc3RydWN0b3IpCiAgICAgICAgICAgID8gY29udHJvbGxlcnNbY29uc3RydWN0b3JdCiAgICAgICAgICAgIDogZ2V0dGVyKGxvY2Fscy4kc2NvcGUsIGNvbnN0cnVjdG9yLCB0cnVlKSB8fAogICAgICAgICAgICAgICAgKGdsb2JhbHMgPyBnZXR0ZXIoJHdpbmRvdywgY29uc3RydWN0b3IsIHRydWUpIDogdW5kZWZpbmVkKTsKCiAgICAgICAgYXNzZXJ0QXJnRm4oZXhwcmVzc2lvbiwgY29uc3RydWN0b3IsIHRydWUpOwogICAgICB9CgogICAgICBpbnN0YW5jZSA9ICRpbmplY3Rvci5pbnN0YW50aWF0ZShleHByZXNzaW9uLCBsb2NhbHMsIGNvbnN0cnVjdG9yKTsKCiAgICAgIGlmIChpZGVudGlmaWVyKSB7CiAgICAgICAgaWYgKCEobG9jYWxzICYmIHR5cGVvZiBsb2NhbHMuJHNjb3BlID09PSAnb2JqZWN0JykpIHsKICAgICAgICAgIHRocm93IG1pbkVycignJGNvbnRyb2xsZXInKSgnbm9zY3AnLAogICAgICAgICAgICAgICJDYW5ub3QgZXhwb3J0IGNvbnRyb2xsZXIgJ3swfScgYXMgJ3sxfSchIE5vICRzY29wZSBvYmplY3QgcHJvdmlkZWQgdmlhIGBsb2NhbHNgLiIsCiAgICAgICAgICAgICAgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lLCBpZGVudGlmaWVyKTsKICAgICAgICB9CgogICAgICAgIGxvY2Fscy4kc2NvcGVbaWRlbnRpZmllcl0gPSBpbnN0YW5jZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGluc3RhbmNlOwogICAgfTsKICB9XTsKfQoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRkb2N1bWVudAogKiBAcmVxdWlyZXMgJHdpbmRvdwogKgogKiBAZGVzY3JpcHRpb24KICogQSB7QGxpbmsgYW5ndWxhci5lbGVtZW50IGpRdWVyeSBvciBqcUxpdGV9IHdyYXBwZXIgZm9yIHRoZSBicm93c2VyJ3MgYHdpbmRvdy5kb2N1bWVudGAgb2JqZWN0LgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBtb2R1bGU9ImRvY3VtZW50RXhhbXBsZSI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgPHA+JGRvY3VtZW50IHRpdGxlOiA8YiBuZy1iaW5kPSJ0aXRsZSI+PC9iPjwvcD4KICAgICAgICAgPHA+d2luZG93LmRvY3VtZW50IHRpdGxlOiA8YiBuZy1iaW5kPSJ3aW5kb3dUaXRsZSI+PC9iPjwvcD4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICAgYW5ndWxhci5tb2R1bGUoJ2RvY3VtZW50RXhhbXBsZScsIFtdKQogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkc2NvcGUsICRkb2N1bWVudCkgewogICAgICAgICAgICRzY29wZS50aXRsZSA9ICRkb2N1bWVudFswXS50aXRsZTsKICAgICAgICAgICAkc2NvcGUud2luZG93VGl0bGUgPSBhbmd1bGFyLmVsZW1lbnQod2luZG93LmRvY3VtZW50KVswXS50aXRsZTsKICAgICAgICAgfV0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KZnVuY3Rpb24gJERvY3VtZW50UHJvdmlkZXIoKXsKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbih3aW5kb3cpewogICAgcmV0dXJuIGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQpOwogIH1dOwp9CgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJGV4Y2VwdGlvbkhhbmRsZXIKICogQHJlcXVpcmVzIG5nLiRsb2cKICoKICogQGRlc2NyaXB0aW9uCiAqIEFueSB1bmNhdWdodCBleGNlcHRpb24gaW4gYW5ndWxhciBleHByZXNzaW9ucyBpcyBkZWxlZ2F0ZWQgdG8gdGhpcyBzZXJ2aWNlLgogKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzaW1wbHkgZGVsZWdhdGVzIHRvIGAkbG9nLmVycm9yYCB3aGljaCBsb2dzIGl0IGludG8KICogdGhlIGJyb3dzZXIgY29uc29sZS4KICoKICogSW4gdW5pdCB0ZXN0cywgaWYgYGFuZ3VsYXItbW9ja3MuanNgIGlzIGxvYWRlZCwgdGhpcyBzZXJ2aWNlIGlzIG92ZXJyaWRkZW4gYnkKICoge0BsaW5rIG5nTW9jay4kZXhjZXB0aW9uSGFuZGxlciBtb2NrICRleGNlcHRpb25IYW5kbGVyfSB3aGljaCBhaWRzIGluIHRlc3RpbmcuCiAqCiAqICMjIEV4YW1wbGU6CiAqCiAqIGBgYGpzCiAqICAgYW5ndWxhci5tb2R1bGUoJ2V4Y2VwdGlvbk92ZXJyaWRlJywgW10pLmZhY3RvcnkoJyRleGNlcHRpb25IYW5kbGVyJywgZnVuY3Rpb24gKCkgewogKiAgICAgcmV0dXJuIGZ1bmN0aW9uIChleGNlcHRpb24sIGNhdXNlKSB7CiAqICAgICAgIGV4Y2VwdGlvbi5tZXNzYWdlICs9ICcgKGNhdXNlZCBieSAiJyArIGNhdXNlICsgJyIpJzsKICogICAgICAgdGhyb3cgZXhjZXB0aW9uOwogKiAgICAgfTsKICogICB9KTsKICogYGBgCiAqCiAqIFRoaXMgZXhhbXBsZSB3aWxsIG92ZXJyaWRlIHRoZSBub3JtYWwgYWN0aW9uIG9mIGAkZXhjZXB0aW9uSGFuZGxlcmAsIHRvIG1ha2UgYW5ndWxhcgogKiBleGNlcHRpb25zIGZhaWwgaGFyZCB3aGVuIHRoZXkgaGFwcGVuLCBpbnN0ZWFkIG9mIGp1c3QgbG9nZ2luZyB0byB0aGUgY29uc29sZS4KICoKICogQHBhcmFtIHtFcnJvcn0gZXhjZXB0aW9uIEV4Y2VwdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLgogKiBAcGFyYW0ge3N0cmluZz19IGNhdXNlIG9wdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb250ZXh0IGluIHdoaWNoCiAqICAgICAgIHRoZSBlcnJvciB3YXMgdGhyb3duLgogKgogKi8KZnVuY3Rpb24gJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyRsb2cnLCBmdW5jdGlvbigkbG9nKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkgewogICAgICAkbG9nLmVycm9yLmFwcGx5KCRsb2csIGFyZ3VtZW50cyk7CiAgICB9OwogIH1dOwp9CgovKioKICogUGFyc2UgaGVhZGVycyBpbnRvIGtleSB2YWx1ZSBvYmplY3QKICoKICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlcnMgUmF3IGhlYWRlcnMgYXMgYSBzdHJpbmcKICogQHJldHVybnMge09iamVjdH0gUGFyc2VkIGhlYWRlcnMgYXMga2V5IHZhbHVlIG9iamVjdAogKi8KZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHsKICB2YXIgcGFyc2VkID0ge30sIGtleSwgdmFsLCBpOwoKICBpZiAoIWhlYWRlcnMpIHJldHVybiBwYXJzZWQ7CgogIGZvckVhY2goaGVhZGVycy5zcGxpdCgnXG4nKSwgZnVuY3Rpb24obGluZSkgewogICAgaSA9IGxpbmUuaW5kZXhPZignOicpOwogICAga2V5ID0gbG93ZXJjYXNlKHRyaW0obGluZS5zdWJzdHIoMCwgaSkpKTsKICAgIHZhbCA9IHRyaW0obGluZS5zdWJzdHIoaSArIDEpKTsKCiAgICBpZiAoa2V5KSB7CiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7CiAgICB9CiAgfSk7CgogIHJldHVybiBwYXJzZWQ7Cn0KCgovKioKICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHBhcnNlZCBoZWFkZXJzLgogKgogKiBIZWFkZXJzIGFyZSBsYXp5IHBhcnNlZCB3aGVuIGZpcnN0IHJlcXVlc3RlZC4KICogQHNlZSBwYXJzZUhlYWRlcnMKICoKICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCl9IGhlYWRlcnMgSGVhZGVycyB0byBwcm92aWRlIGFjY2VzcyB0by4KICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZz0pfSBSZXR1cm5zIGEgZ2V0dGVyIGZ1bmN0aW9uIHdoaWNoIGlmIGNhbGxlZCB3aXRoOgogKgogKiAgIC0gaWYgY2FsbGVkIHdpdGggc2luZ2xlIGFuIGFyZ3VtZW50IHJldHVybnMgYSBzaW5nbGUgaGVhZGVyIHZhbHVlIG9yIG51bGwKICogICAtIGlmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCBoZWFkZXJzLgogKi8KZnVuY3Rpb24gaGVhZGVyc0dldHRlcihoZWFkZXJzKSB7CiAgdmFyIGhlYWRlcnNPYmogPSBpc09iamVjdChoZWFkZXJzKSA/IGhlYWRlcnMgOiB1bmRlZmluZWQ7CgogIHJldHVybiBmdW5jdGlvbihuYW1lKSB7CiAgICBpZiAoIWhlYWRlcnNPYmopIGhlYWRlcnNPYmogPSAgcGFyc2VIZWFkZXJzKGhlYWRlcnMpOwoKICAgIGlmIChuYW1lKSB7CiAgICAgIHJldHVybiBoZWFkZXJzT2JqW2xvd2VyY2FzZShuYW1lKV0gfHwgbnVsbDsKICAgIH0KCiAgICByZXR1cm4gaGVhZGVyc09iajsKICB9Owp9CgoKLyoqCiAqIENoYWluIGFsbCBnaXZlbiBmdW5jdGlvbnMKICoKICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGZvciBib3RoIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWluZwogKgogKiBAcGFyYW0geyp9IGRhdGEgRGF0YSB0byB0cmFuc2Zvcm0uCiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nPSl9IGhlYWRlcnMgSHR0cCBoZWFkZXJzIGdldHRlciBmbi4KICogQHBhcmFtIHsoRnVuY3Rpb258QXJyYXkuPEZ1bmN0aW9uPil9IGZucyBGdW5jdGlvbiBvciBhbiBhcnJheSBvZiBmdW5jdGlvbnMuCiAqIEByZXR1cm5zIHsqfSBUcmFuc2Zvcm1lZCBkYXRhLgogKi8KZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHsKICBpZiAoaXNGdW5jdGlvbihmbnMpKQogICAgcmV0dXJuIGZucyhkYXRhLCBoZWFkZXJzKTsKCiAgZm9yRWFjaChmbnMsIGZ1bmN0aW9uKGZuKSB7CiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7CiAgfSk7CgogIHJldHVybiBkYXRhOwp9CgoKZnVuY3Rpb24gaXNTdWNjZXNzKHN0YXR1cykgewogIHJldHVybiAyMDAgPD0gc3RhdHVzICYmIHN0YXR1cyA8IDMwMDsKfQoKCi8qKgogKiBAbmdkb2MgcHJvdmlkZXIKICogQG5hbWUgJGh0dHBQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICogVXNlIGAkaHR0cFByb3ZpZGVyYCB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gc2VydmljZS4KICogKi8KZnVuY3Rpb24gJEh0dHBQcm92aWRlcigpIHsKICB2YXIgSlNPTl9TVEFSVCA9IC9eXHMqKFxbfFx7W15ce10pLywKICAgICAgSlNPTl9FTkQgPSAvW1x9XF1dXHMqJC8sCiAgICAgIFBST1RFQ1RJT05fUFJFRklYID0gL15cKVxdXH0nLD9cbi8sCiAgICAgIENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OID0geydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04J307CgogIC8qKgogICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAqIEBuYW1lICRodHRwUHJvdmlkZXIjZGVmYXVsdHMKICAgKiBAZGVzY3JpcHRpb24KICAgKgogICAqIE9iamVjdCBjb250YWluaW5nIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwge0BsaW5rIG5nLiRodHRwICRodHRwfSByZXF1ZXN0cy4KICAgKgogICAqIC0gKipgZGVmYXVsdHMueHNyZkNvb2tpZU5hbWVgKiogLSB7c3RyaW5nfSAtIE5hbWUgb2YgY29va2llIGNvbnRhaW5pbmcgdGhlIFhTUkYgdG9rZW4uCiAgICogRGVmYXVsdHMgdmFsdWUgaXMgYCdYU1JGLVRPS0VOJ2AuCiAgICoKICAgKiAtICoqYGRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lYCoqIC0ge3N0cmluZ30gLSBOYW1lIG9mIEhUVFAgaGVhZGVyIHRvIHBvcHVsYXRlIHdpdGggdGhlCiAgICogWFNSRiB0b2tlbi4gRGVmYXVsdHMgdmFsdWUgaXMgYCdYLVhTUkYtVE9LRU4nYC4KICAgKgogICAqIC0gKipgZGVmYXVsdHMuaGVhZGVyc2AqKiAtIHtPYmplY3R9IC0gRGVmYXVsdCBoZWFkZXJzIGZvciBhbGwgJGh0dHAgcmVxdWVzdHMuCiAgICogUmVmZXIgdG8ge0BsaW5rIG5nLiRodHRwI3NldHRpbmctaHR0cC1oZWFkZXJzICRodHRwfSBmb3IgZG9jdW1lbnRhdGlvbiBvbgogICAqIHNldHRpbmcgZGVmYXVsdCBoZWFkZXJzLgogICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMuY29tbW9uYCoqCiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wb3N0YCoqCiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wdXRgKioKICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLnBhdGNoYCoqCiAgICoqLwogIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgPSB7CiAgICAvLyB0cmFuc2Zvcm0gaW5jb21pbmcgcmVzcG9uc2UgZGF0YQogICAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbihkYXRhKSB7CiAgICAgIGlmIChpc1N0cmluZyhkYXRhKSkgewogICAgICAgIC8vIHN0cmlwIGpzb24gdnVsbmVyYWJpbGl0eSBwcm90ZWN0aW9uIHByZWZpeAogICAgICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoUFJPVEVDVElPTl9QUkVGSVgsICcnKTsKICAgICAgICBpZiAoSlNPTl9TVEFSVC50ZXN0KGRhdGEpICYmIEpTT05fRU5ELnRlc3QoZGF0YSkpCiAgICAgICAgICBkYXRhID0gZnJvbUpzb24oZGF0YSk7CiAgICAgIH0KICAgICAgcmV0dXJuIGRhdGE7CiAgICB9XSwKCiAgICAvLyB0cmFuc2Zvcm0gb3V0Z29pbmcgcmVxdWVzdCBkYXRhCiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24oZCkgewogICAgICByZXR1cm4gaXNPYmplY3QoZCkgJiYgIWlzRmlsZShkKSAmJiAhaXNCbG9iKGQpID8gdG9Kc29uKGQpIDogZDsKICAgIH1dLAoKICAgIC8vIGRlZmF1bHQgaGVhZGVycwogICAgaGVhZGVyczogewogICAgICBjb21tb246IHsKICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicKICAgICAgfSwKICAgICAgcG9zdDogICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiksCiAgICAgIHB1dDogICAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pLAogICAgICBwYXRjaDogIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKQogICAgfSwKCiAgICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLAogICAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nCiAgfTsKCiAgLyoqCiAgICogQXJlIG9yZGVyZWQgYnkgcmVxdWVzdCwgaS5lLiB0aGV5IGFyZSBhcHBsaWVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZQogICAqIGFycmF5LCBvbiByZXF1ZXN0LCBidXQgcmV2ZXJzZSBvcmRlciwgb24gcmVzcG9uc2UuCiAgICovCiAgdmFyIGludGVyY2VwdG9yRmFjdG9yaWVzID0gdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTsKCiAgdGhpcy4kZ2V0ID0gWyckaHR0cEJhY2tlbmQnLCAnJGJyb3dzZXInLCAnJGNhY2hlRmFjdG9yeScsICckcm9vdFNjb3BlJywgJyRxJywgJyRpbmplY3RvcicsCiAgICAgIGZ1bmN0aW9uKCRodHRwQmFja2VuZCwgJGJyb3dzZXIsICRjYWNoZUZhY3RvcnksICRyb290U2NvcGUsICRxLCAkaW5qZWN0b3IpIHsKCiAgICB2YXIgZGVmYXVsdENhY2hlID0gJGNhY2hlRmFjdG9yeSgnJGh0dHAnKTsKCiAgICAvKioKICAgICAqIEludGVyY2VwdG9ycyBzdG9yZWQgaW4gcmV2ZXJzZSBvcmRlci4gSW5uZXIgaW50ZXJjZXB0b3JzIGJlZm9yZSBvdXRlciBpbnRlcmNlcHRvcnMuCiAgICAgKiBUaGUgcmV2ZXJzYWwgaXMgbmVlZGVkIHNvIHRoYXQgd2UgY2FuIGJ1aWxkIHVwIHRoZSBpbnRlcmNlcHRpb24gY2hhaW4gYXJvdW5kIHRoZQogICAgICogc2VydmVyIHJlcXVlc3QuCiAgICAgKi8KICAgIHZhciByZXZlcnNlZEludGVyY2VwdG9ycyA9IFtdOwoKICAgIGZvckVhY2goaW50ZXJjZXB0b3JGYWN0b3JpZXMsIGZ1bmN0aW9uKGludGVyY2VwdG9yRmFjdG9yeSkgewogICAgICByZXZlcnNlZEludGVyY2VwdG9ycy51bnNoaWZ0KGlzU3RyaW5nKGludGVyY2VwdG9yRmFjdG9yeSkKICAgICAgICAgID8gJGluamVjdG9yLmdldChpbnRlcmNlcHRvckZhY3RvcnkpIDogJGluamVjdG9yLmludm9rZShpbnRlcmNlcHRvckZhY3RvcnkpKTsKICAgIH0pOwoKICAgIC8qKgogICAgICogQG5nZG9jIHNlcnZpY2UKICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgKiBAbmFtZSAkaHR0cAogICAgICogQHJlcXVpcmVzIG5nLiRodHRwQmFja2VuZAogICAgICogQHJlcXVpcmVzICRjYWNoZUZhY3RvcnkKICAgICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlCiAgICAgKiBAcmVxdWlyZXMgJHEKICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3IKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBjb3JlIEFuZ3VsYXIgc2VydmljZSB0aGF0IGZhY2lsaXRhdGVzIGNvbW11bmljYXRpb24gd2l0aCB0aGUgcmVtb3RlCiAgICAgKiBIVFRQIHNlcnZlcnMgdmlhIHRoZSBicm93c2VyJ3MgW1hNTEh0dHBSZXF1ZXN0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi94bWxodHRwcmVxdWVzdCkKICAgICAqIG9iamVjdCBvciB2aWEgW0pTT05QXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0pTT05QKS4KICAgICAqCiAgICAgKiBGb3IgdW5pdCB0ZXN0aW5nIGFwcGxpY2F0aW9ucyB0aGF0IHVzZSBgJGh0dHBgIHNlcnZpY2UsIHNlZQogICAgICoge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgJGh0dHBCYWNrZW5kIG1vY2t9LgogICAgICoKICAgICAqIEZvciBhIGhpZ2hlciBsZXZlbCBvZiBhYnN0cmFjdGlvbiwgcGxlYXNlIGNoZWNrIG91dCB0aGUge0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlCiAgICAgKiAkcmVzb3VyY2V9IHNlcnZpY2UuCiAgICAgKgogICAgICogVGhlICRodHRwIEFQSSBpcyBiYXNlZCBvbiB0aGUge0BsaW5rIG5nLiRxIGRlZmVycmVkL3Byb21pc2UgQVBJc30gZXhwb3NlZCBieQogICAgICogdGhlICRxIHNlcnZpY2UuIFdoaWxlIGZvciBzaW1wbGUgdXNhZ2UgcGF0dGVybnMgdGhpcyBkb2Vzbid0IG1hdHRlciBtdWNoLCBmb3IgYWR2YW5jZWQgdXNhZ2UKICAgICAqIGl0IGlzIGltcG9ydGFudCB0byBmYW1pbGlhcml6ZSB5b3Vyc2VsZiB3aXRoIHRoZXNlIEFQSXMgYW5kIHRoZSBndWFyYW50ZWVzIHRoZXkgcHJvdmlkZS4KICAgICAqCiAgICAgKgogICAgICogIyBHZW5lcmFsIHVzYWdlCiAgICAgKiBUaGUgYCRodHRwYCBzZXJ2aWNlIGlzIGEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgYSBzaW5nbGUgYXJndW1lbnQg4oCUIGEgY29uZmlndXJhdGlvbiBvYmplY3Qg4oCUCiAgICAgKiB0aGF0IGlzIHVzZWQgdG8gZ2VuZXJhdGUgYW4gSFRUUCByZXF1ZXN0IGFuZCByZXR1cm5zICBhIHtAbGluayBuZy4kcSBwcm9taXNlfQogICAgICogd2l0aCB0d28gJGh0dHAgc3BlY2lmaWMgbWV0aG9kczogYHN1Y2Nlc3NgIGFuZCBgZXJyb3JgLgogICAgICoKICAgICAqIGBgYGpzCiAgICAgKiAgICRodHRwKHttZXRob2Q6ICdHRVQnLCB1cmw6ICcvc29tZVVybCd9KS4KICAgICAqICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7CiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5CiAgICAgKiAgICAgICAvLyB3aGVuIHRoZSByZXNwb25zZSBpcyBhdmFpbGFibGUKICAgICAqICAgICB9KS4KICAgICAqICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykgewogICAgICogICAgICAgLy8gY2FsbGVkIGFzeW5jaHJvbm91c2x5IGlmIGFuIGVycm9yIG9jY3VycwogICAgICogICAgICAgLy8gb3Igc2VydmVyIHJldHVybnMgcmVzcG9uc2Ugd2l0aCBhbiBlcnJvciBzdGF0dXMuCiAgICAgKiAgICAgfSk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiBTaW5jZSB0aGUgcmV0dXJuZWQgdmFsdWUgb2YgY2FsbGluZyB0aGUgJGh0dHAgZnVuY3Rpb24gaXMgYSBgcHJvbWlzZWAsIHlvdSBjYW4gYWxzbyB1c2UKICAgICAqIHRoZSBgdGhlbmAgbWV0aG9kIHRvIHJlZ2lzdGVyIGNhbGxiYWNrcywgYW5kIHRoZXNlIGNhbGxiYWNrcyB3aWxsIHJlY2VpdmUgYSBzaW5nbGUgYXJndW1lbnQg4oCTCiAgICAgKiBhbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByZXNwb25zZS4gU2VlIHRoZSBBUEkgc2lnbmF0dXJlIGFuZCB0eXBlIGluZm8gYmVsb3cgZm9yIG1vcmUKICAgICAqIGRldGFpbHMuCiAgICAgKgogICAgICogQSByZXNwb25zZSBzdGF0dXMgY29kZSBiZXR3ZWVuIDIwMCBhbmQgMjk5IGlzIGNvbnNpZGVyZWQgYSBzdWNjZXNzIHN0YXR1cyBhbmQKICAgICAqIHdpbGwgcmVzdWx0IGluIHRoZSBzdWNjZXNzIGNhbGxiYWNrIGJlaW5nIGNhbGxlZC4gTm90ZSB0aGF0IGlmIHRoZSByZXNwb25zZSBpcyBhIHJlZGlyZWN0LAogICAgICogWE1MSHR0cFJlcXVlc3Qgd2lsbCB0cmFuc3BhcmVudGx5IGZvbGxvdyBpdCwgbWVhbmluZyB0aGF0IHRoZSBlcnJvciBjYWxsYmFjayB3aWxsIG5vdCBiZQogICAgICogY2FsbGVkIGZvciBzdWNoIHJlc3BvbnNlcy4KICAgICAqCiAgICAgKiAjIFdyaXRpbmcgVW5pdCBUZXN0cyB0aGF0IHVzZSAkaHR0cAogICAgICogV2hlbiB1bml0IHRlc3RpbmcgKHVzaW5nIHtAbGluayBuZ01vY2sgbmdNb2NrfSksIGl0IGlzIG5lY2Vzc2FyeSB0byBjYWxsCiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCNmbHVzaCAkaHR0cEJhY2tlbmQuZmx1c2goKX0gdG8gZmx1c2ggZWFjaCBwZW5kaW5nCiAgICAgKiByZXF1ZXN0IHVzaW5nIHRyYWluZWQgcmVzcG9uc2VzLgogICAgICoKICAgICAqIGBgYAogICAgICogJGh0dHBCYWNrZW5kLmV4cGVjdEdFVCguLi4pOwogICAgICogJGh0dHAuZ2V0KC4uLik7CiAgICAgKiAkaHR0cEJhY2tlbmQuZmx1c2goKTsKICAgICAqIGBgYAogICAgICoKICAgICAqICMgU2hvcnRjdXQgbWV0aG9kcwogICAgICoKICAgICAqIFNob3J0Y3V0IG1ldGhvZHMgYXJlIGFsc28gYXZhaWxhYmxlLiBBbGwgc2hvcnRjdXQgbWV0aG9kcyByZXF1aXJlIHBhc3NpbmcgaW4gdGhlIFVSTCwgYW5kCiAgICAgKiByZXF1ZXN0IGRhdGEgbXVzdCBiZSBwYXNzZWQgaW4gZm9yIFBPU1QvUFVUIHJlcXVlc3RzLgogICAgICoKICAgICAqIGBgYGpzCiAgICAgKiAgICRodHRwLmdldCgnL3NvbWVVcmwnKS5zdWNjZXNzKHN1Y2Nlc3NDYWxsYmFjayk7CiAgICAgKiAgICRodHRwLnBvc3QoJy9zb21lVXJsJywgZGF0YSkuc3VjY2VzcyhzdWNjZXNzQ2FsbGJhY2spOwogICAgICogYGBgCiAgICAgKgogICAgICogQ29tcGxldGUgbGlzdCBvZiBzaG9ydGN1dCBtZXRob2RzOgogICAgICoKICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2dldCAkaHR0cC5nZXR9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNoZWFkICRodHRwLmhlYWR9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwb3N0ICRodHRwLnBvc3R9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwdXQgJGh0dHAucHV0fQogICAgICogLSB7QGxpbmsgbmcuJGh0dHAjZGVsZXRlICRodHRwLmRlbGV0ZX0KICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2pzb25wICRodHRwLmpzb25wfQogICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcGF0Y2ggJGh0dHAucGF0Y2h9CiAgICAgKgogICAgICoKICAgICAqICMgU2V0dGluZyBIVFRQIEhlYWRlcnMKICAgICAqCiAgICAgKiBUaGUgJGh0dHAgc2VydmljZSB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGNlcnRhaW4gSFRUUCBoZWFkZXJzIHRvIGFsbCByZXF1ZXN0cy4gVGhlc2UgZGVmYXVsdHMKICAgICAqIGNhbiBiZSBmdWxseSBjb25maWd1cmVkIGJ5IGFjY2Vzc2luZyB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVyc2AgY29uZmlndXJhdGlvbgogICAgICogb2JqZWN0LCB3aGljaCBjdXJyZW50bHkgY29udGFpbnMgdGhpcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb246CiAgICAgKgogICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbmAgKGhlYWRlcnMgdGhhdCBhcmUgY29tbW9uIGZvciBhbGwgcmVxdWVzdHMpOgogICAgICogICAtIGBBY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICogLyAqYAogICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnBvc3RgOiAoaGVhZGVyIGRlZmF1bHRzIGZvciBQT1NUIHJlcXVlc3RzKQogICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gCiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucHV0YCAoaGVhZGVyIGRlZmF1bHRzIGZvciBQVVQgcmVxdWVzdHMpCiAgICAgKiAgIC0gYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbmAKICAgICAqCiAgICAgKiBUbyBhZGQgb3Igb3ZlcndyaXRlIHRoZXNlIGRlZmF1bHRzLCBzaW1wbHkgYWRkIG9yIHJlbW92ZSBhIHByb3BlcnR5IGZyb20gdGhlc2UgY29uZmlndXJhdGlvbgogICAgICogb2JqZWN0cy4gVG8gYWRkIGhlYWRlcnMgZm9yIGFuIEhUVFAgbWV0aG9kIG90aGVyIHRoYW4gUE9TVCBvciBQVVQsIHNpbXBseSBhZGQgYSBuZXcgb2JqZWN0CiAgICAgKiB3aXRoIHRoZSBsb3dlcmNhc2VkIEhUVFAgbWV0aG9kIG5hbWUgYXMgdGhlIGtleSwgZS5nLgogICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQgPSB7ICdNeS1IZWFkZXInIDogJ3ZhbHVlJyB9LgogICAgICoKICAgICAqIFRoZSBkZWZhdWx0cyBjYW4gYWxzbyBiZSBzZXQgYXQgcnVudGltZSB2aWEgdGhlIGAkaHR0cC5kZWZhdWx0c2Agb2JqZWN0IGluIHRoZSBzYW1lCiAgICAgKiBmYXNoaW9uLiBGb3IgZXhhbXBsZToKICAgICAqCiAgICAgKiBgYGAKICAgICAqIG1vZHVsZS5ydW4oZnVuY3Rpb24oJGh0dHApIHsKICAgICAqICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyBZbVZsY0RwaWIyOXcnCiAgICAgKiB9KTsKICAgICAqIGBgYAogICAgICoKICAgICAqIEluIGFkZGl0aW9uLCB5b3UgY2FuIHN1cHBseSBhIGBoZWFkZXJzYCBwcm9wZXJ0eSBpbiB0aGUgY29uZmlnIG9iamVjdCBwYXNzZWQgd2hlbgogICAgICogY2FsbGluZyBgJGh0dHAoY29uZmlnKWAsIHdoaWNoIG92ZXJyaWRlcyB0aGUgZGVmYXVsdHMgd2l0aG91dCBjaGFuZ2luZyB0aGVtIGdsb2JhbGx5LgogICAgICoKICAgICAqCiAgICAgKiAjIFRyYW5zZm9ybWluZyBSZXF1ZXN0cyBhbmQgUmVzcG9uc2VzCiAgICAgKgogICAgICogQm90aCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIGNhbiBiZSB0cmFuc2Zvcm1lZCB1c2luZyB0cmFuc2Zvcm0gZnVuY3Rpb25zLiBCeSBkZWZhdWx0LCBBbmd1bGFyCiAgICAgKiBhcHBsaWVzIHRoZXNlIHRyYW5zZm9ybWF0aW9uczoKICAgICAqCiAgICAgKiBSZXF1ZXN0IHRyYW5zZm9ybWF0aW9uczoKICAgICAqCiAgICAgKiAtIElmIHRoZSBgZGF0YWAgcHJvcGVydHkgb2YgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbnMgYW4gb2JqZWN0LCBzZXJpYWxpemUgaXQKICAgICAqICAgaW50byBKU09OIGZvcm1hdC4KICAgICAqCiAgICAgKiBSZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnM6CiAgICAgKgogICAgICogIC0gSWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykuCiAgICAgKiAgLSBJZiBKU09OIHJlc3BvbnNlIGlzIGRldGVjdGVkLCBkZXNlcmlhbGl6ZSBpdCB1c2luZyBhIEpTT04gcGFyc2VyLgogICAgICoKICAgICAqIFRvIGdsb2JhbGx5IGF1Z21lbnQgb3Igb3ZlcnJpZGUgdGhlIGRlZmF1bHQgdHJhbnNmb3JtcywgbW9kaWZ5IHRoZQogICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGAgYW5kIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYAogICAgICogcHJvcGVydGllcy4gVGhlc2UgcHJvcGVydGllcyBhcmUgYnkgZGVmYXVsdCBhbiBhcnJheSBvZiB0cmFuc2Zvcm0gZnVuY3Rpb25zLCB3aGljaCBhbGxvd3MgeW91CiAgICAgKiB0byBgcHVzaGAgb3IgYHVuc2hpZnRgIGEgbmV3IHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIGludG8gdGhlIHRyYW5zZm9ybWF0aW9uIGNoYWluLiBZb3UgY2FuCiAgICAgKiBhbHNvIGRlY2lkZSB0byBjb21wbGV0ZWx5IG92ZXJyaWRlIGFueSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyBieSBhc3NpZ25pbmcgeW91cgogICAgICogdHJhbnNmb3JtYXRpb24gZnVuY3Rpb25zIHRvIHRoZXNlIHByb3BlcnRpZXMgZGlyZWN0bHkgd2l0aG91dCB0aGUgYXJyYXkgd3JhcHBlci4gIFRoZXNlIGRlZmF1bHRzCiAgICAgKiBhcmUgYWdhaW4gYXZhaWxhYmxlIG9uIHRoZSAkaHR0cCBmYWN0b3J5IGF0IHJ1bi10aW1lLCB3aGljaCBtYXkgYmUgdXNlZnVsIGlmIHlvdSBoYXZlIHJ1bi10aW1lCiAgICAgKiBzZXJ2aWNlcyB5b3Ugd2lzaCB0byBiZSBpbnZvbHZlZCBpbiB5b3VyIHRyYW5zZm9ybWF0aW9ucy4KICAgICAqCiAgICAgKiBTaW1pbGFybHksIHRvIGxvY2FsbHkgb3ZlcnJpZGUgdGhlIHJlcXVlc3QvcmVzcG9uc2UgdHJhbnNmb3JtcywgYXVnbWVudCB0aGUKICAgICAqIGB0cmFuc2Zvcm1SZXF1ZXN0YCBhbmQvb3IgYHRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzIG9mIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBwYXNzZWQKICAgICAqIGludG8gYCRodHRwYC4KICAgICAqCiAgICAgKgogICAgICogIyBDYWNoaW5nCiAgICAgKgogICAgICogVG8gZW5hYmxlIGNhY2hpbmcsIHNldCB0aGUgcmVxdWVzdCBjb25maWd1cmF0aW9uIGBjYWNoZWAgcHJvcGVydHkgdG8gYHRydWVgICh0byB1c2UgZGVmYXVsdAogICAgICogY2FjaGUpIG9yIHRvIGEgY3VzdG9tIGNhY2hlIG9iamVjdCAoYnVpbHQgd2l0aCB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9KS4KICAgICAqIFdoZW4gdGhlIGNhY2hlIGlzIGVuYWJsZWQsIGAkaHR0cGAgc3RvcmVzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdGhlIHNwZWNpZmllZAogICAgICogY2FjaGUuIFRoZSBuZXh0IHRpbWUgdGhlIHNhbWUgcmVxdWVzdCBpcyBtYWRlLCB0aGUgcmVzcG9uc2UgaXMgc2VydmVkIGZyb20gdGhlIGNhY2hlIHdpdGhvdXQKICAgICAqIHNlbmRpbmcgYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIuCiAgICAgKgogICAgICogTm90ZSB0aGF0IGV2ZW4gaWYgdGhlIHJlc3BvbnNlIGlzIHNlcnZlZCBmcm9tIGNhY2hlLCBkZWxpdmVyeSBvZiB0aGUgZGF0YSBpcyBhc3luY2hyb25vdXMgaW4KICAgICAqIHRoZSBzYW1lIHdheSB0aGF0IHJlYWwgcmVxdWVzdHMgYXJlLgogICAgICoKICAgICAqIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBHRVQgcmVxdWVzdHMgZm9yIHRoZSBzYW1lIFVSTCB0aGF0IHNob3VsZCBiZSBjYWNoZWQgdXNpbmcgdGhlIHNhbWUKICAgICAqIGNhY2hlLCBidXQgdGhlIGNhY2hlIGlzIG5vdCBwb3B1bGF0ZWQgeWV0LCBvbmx5IG9uZSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgd2lsbCBiZSBtYWRlIGFuZAogICAgICogdGhlIHJlbWFpbmluZyByZXF1ZXN0cyB3aWxsIGJlIGZ1bGZpbGxlZCB1c2luZyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgZmlyc3QgcmVxdWVzdC4KICAgICAqCiAgICAgKiBZb3UgY2FuIGNoYW5nZSB0aGUgZGVmYXVsdCBjYWNoZSB0byBhIG5ldyBvYmplY3QgKGJ1aWx0IHdpdGgKICAgICAqIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pIGJ5IHVwZGF0aW5nIHRoZQogICAgICoge0BsaW5rIG5nLiRodHRwI3Byb3BlcnRpZXNfZGVmYXVsdHMgYCRodHRwLmRlZmF1bHRzLmNhY2hlYH0gcHJvcGVydHkuIEFsbCByZXF1ZXN0cyB3aG8gc2V0CiAgICAgKiB0aGVpciBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYCB3aWxsIG5vdyB1c2UgdGhpcyBjYWNoZSBvYmplY3QuCiAgICAgKgogICAgICogSWYgeW91IHNldCB0aGUgZGVmYXVsdCBjYWNoZSB0byBgZmFsc2VgIHRoZW4gb25seSByZXF1ZXN0cyB0aGF0IHNwZWNpZnkgdGhlaXIgb3duIGN1c3RvbQogICAgICogY2FjaGUgb2JqZWN0IHdpbGwgYmUgY2FjaGVkLgogICAgICoKICAgICAqICMgSW50ZXJjZXB0b3JzCiAgICAgKgogICAgICogQmVmb3JlIHlvdSBzdGFydCBjcmVhdGluZyBpbnRlcmNlcHRvcnMsIGJlIHN1cmUgdG8gdW5kZXJzdGFuZCB0aGUKICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS4KICAgICAqCiAgICAgKiBGb3IgcHVycG9zZXMgb2YgZ2xvYmFsIGVycm9yIGhhbmRsaW5nLCBhdXRoZW50aWNhdGlvbiwgb3IgYW55IGtpbmQgb2Ygc3luY2hyb25vdXMgb3IKICAgICAqIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZyBvZiByZXF1ZXN0IG9yIHBvc3Rwcm9jZXNzaW5nIG9mIHJlc3BvbnNlcywgaXQgaXMgZGVzaXJhYmxlIHRvIGJlCiAgICAgKiBhYmxlIHRvIGludGVyY2VwdCByZXF1ZXN0cyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIHRvIHRoZSBzZXJ2ZXIgYW5kCiAgICAgKiByZXNwb25zZXMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCBvdmVyIHRvIHRoZSBhcHBsaWNhdGlvbiBjb2RlIHRoYXQKICAgICAqIGluaXRpYXRlZCB0aGVzZSByZXF1ZXN0cy4gVGhlIGludGVyY2VwdG9ycyBsZXZlcmFnZSB0aGUge0BsaW5rIG5nLiRxCiAgICAgKiBwcm9taXNlIEFQSXN9IHRvIGZ1bGZpbGwgdGhpcyBuZWVkIGZvciBib3RoIHN5bmNocm9ub3VzIGFuZCBhc3luY2hyb25vdXMgcHJlLXByb2Nlc3NpbmcuCiAgICAgKgogICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGh0dHBQcm92aWRlcmAgYnkKICAgICAqIGFkZGluZyB0aGVtIHRvIHRoZSBgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnNgIGFycmF5LiBUaGUgZmFjdG9yeSBpcyBjYWxsZWQgYW5kCiAgICAgKiBpbmplY3RlZCB3aXRoIGRlcGVuZGVuY2llcyAoaWYgc3BlY2lmaWVkKSBhbmQgcmV0dXJucyB0aGUgaW50ZXJjZXB0b3IuCiAgICAgKgogICAgICogVGhlcmUgYXJlIHR3byBraW5kcyBvZiBpbnRlcmNlcHRvcnMgKGFuZCB0d28ga2luZHMgb2YgcmVqZWN0aW9uIGludGVyY2VwdG9ycyk6CiAgICAgKgogICAgICogICAqIGByZXF1ZXN0YDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBhIGh0dHAgYGNvbmZpZ2Agb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0bwogICAgICogICAgIG1vZGlmeSB0aGUgYGNvbmZpZ2Agb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGBjb25maWdgCiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYGNvbmZpZ2Agb3IgYSBuZXcgYGNvbmZpZ2Agb2JqZWN0LgogICAgICogICAqIGByZXF1ZXN0RXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3IKICAgICAqICAgICByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLgogICAgICogICAqIGByZXNwb25zZWA6IGludGVyY2VwdG9ycyBnZXQgY2FsbGVkIHdpdGggaHR0cCBgcmVzcG9uc2VgIG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzIGZyZWUgdG8KICAgICAqICAgICBtb2RpZnkgdGhlIGByZXNwb25zZWAgb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGByZXNwb25zZWAKICAgICAqICAgICBvYmplY3QgZGlyZWN0bHksIG9yIGFzIGEgcHJvbWlzZSBjb250YWluaW5nIHRoZSBgcmVzcG9uc2VgIG9yIGEgbmV3IGByZXNwb25zZWAgb2JqZWN0LgogICAgICogICAqIGByZXNwb25zZUVycm9yYDogaW50ZXJjZXB0b3IgZ2V0cyBjYWxsZWQgd2hlbiBhIHByZXZpb3VzIGludGVyY2VwdG9yIHRocmV3IGFuIGVycm9yIG9yCiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi4KICAgICAqCiAgICAgKgogICAgICogYGBganMKICAgICAqICAgLy8gcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9yIGFzIGEgc2VydmljZQogICAgICogICAkcHJvdmlkZS5mYWN0b3J5KCdteUh0dHBJbnRlcmNlcHRvcicsIGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHsKICAgICAqICAgICByZXR1cm4gewogICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kCiAgICAgKiAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2VzcwogICAgICogICAgICAgICByZXR1cm4gY29uZmlnOwogICAgICogICAgICAgfSwKICAgICAqCiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2QKICAgICAqICAgICAgJ3JlcXVlc3RFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikgewogICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3IKICAgICAqICAgICAgICAgaWYgKGNhblJlY292ZXIocmVqZWN0aW9uKSkgewogICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZQogICAgICogICAgICAgICB9CiAgICAgKiAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTsKICAgICAqICAgICAgIH0sCiAgICAgKgogICAgICoKICAgICAqCiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2QKICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBzdWNjZXNzCiAgICAgKiAgICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAqICAgICAgIH0sCiAgICAgKgogICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kCiAgICAgKiAgICAgICdyZXNwb25zZUVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7CiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvcgogICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7CiAgICAgKiAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlT3JOZXdQcm9taXNlCiAgICAgKiAgICAgICAgIH0KICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pOwogICAgICogICAgICAgfQogICAgICogICAgIH07CiAgICAgKiAgIH0pOwogICAgICoKICAgICAqICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnbXlIdHRwSW50ZXJjZXB0b3InKTsKICAgICAqCiAgICAgKgogICAgICogICAvLyBhbHRlcm5hdGl2ZWx5LCByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgdmlhIGFuIGFub255bW91cyBmYWN0b3J5CiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5MikgewogICAgICogICAgIHJldHVybiB7CiAgICAgKiAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7CiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlCiAgICAgKiAgICAgICB9LAogICAgICoKICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlCiAgICAgKiAgICAgICB9CiAgICAgKiAgICAgfTsKICAgICAqICAgfSk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiAjIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zCiAgICAgKgogICAgICogV2hlbiBkZXNpZ25pbmcgd2ViIGFwcGxpY2F0aW9ucywgY29uc2lkZXIgc2VjdXJpdHkgdGhyZWF0cyBmcm9tOgogICAgICoKICAgICAqIC0gW0pTT04gdnVsbmVyYWJpbGl0eV0oaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4KQogICAgICogLSBbWFNSRl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3JlcXVlc3RfZm9yZ2VyeSkKICAgICAqCiAgICAgKiBCb3RoIHNlcnZlciBhbmQgdGhlIGNsaWVudCBtdXN0IGNvb3BlcmF0ZSBpbiBvcmRlciB0byBlbGltaW5hdGUgdGhlc2UgdGhyZWF0cy4gQW5ndWxhciBjb21lcwogICAgICogcHJlLWNvbmZpZ3VyZWQgd2l0aCBzdHJhdGVnaWVzIHRoYXQgYWRkcmVzcyB0aGVzZSBpc3N1ZXMsIGJ1dCBmb3IgdGhpcyB0byB3b3JrIGJhY2tlbmQgc2VydmVyCiAgICAgKiBjb29wZXJhdGlvbiBpcyByZXF1aXJlZC4KICAgICAqCiAgICAgKiAjIyBKU09OIFZ1bG5lcmFiaWxpdHkgUHJvdGVjdGlvbgogICAgICoKICAgICAqIEEgW0pTT04gdnVsbmVyYWJpbGl0eV0oaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4KQogICAgICogYWxsb3dzIHRoaXJkIHBhcnR5IHdlYnNpdGUgdG8gdHVybiB5b3VyIEpTT04gcmVzb3VyY2UgVVJMIGludG8KICAgICAqIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkgcmVxdWVzdCB1bmRlciBzb21lIGNvbmRpdGlvbnMuIFRvCiAgICAgKiBjb3VudGVyIHRoaXMgeW91ciBzZXJ2ZXIgY2FuIHByZWZpeCBhbGwgSlNPTiByZXF1ZXN0cyB3aXRoIGZvbGxvd2luZyBzdHJpbmcgYCIpXX0nLFxuImAuCiAgICAgKiBBbmd1bGFyIHdpbGwgYXV0b21hdGljYWxseSBzdHJpcCB0aGUgcHJlZml4IGJlZm9yZSBwcm9jZXNzaW5nIGl0IGFzIEpTT04uCiAgICAgKgogICAgICogRm9yIGV4YW1wbGUgaWYgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gcmV0dXJuOgogICAgICogYGBganMKICAgICAqIFsnb25lJywndHdvJ10KICAgICAqIGBgYAogICAgICoKICAgICAqIHdoaWNoIGlzIHZ1bG5lcmFibGUgdG8gYXR0YWNrLCB5b3VyIHNlcnZlciBjYW4gcmV0dXJuOgogICAgICogYGBganMKICAgICAqICldfScsCiAgICAgKiBbJ29uZScsJ3R3byddCiAgICAgKiBgYGAKICAgICAqCiAgICAgKiBBbmd1bGFyIHdpbGwgc3RyaXAgdGhlIHByZWZpeCwgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIEpTT04uCiAgICAgKgogICAgICoKICAgICAqICMjIENyb3NzIFNpdGUgUmVxdWVzdCBGb3JnZXJ5IChYU1JGKSBQcm90ZWN0aW9uCiAgICAgKgogICAgICogW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpIGlzIGEgdGVjaG5pcXVlIGJ5IHdoaWNoCiAgICAgKiBhbiB1bmF1dGhvcml6ZWQgc2l0ZSBjYW4gZ2FpbiB5b3VyIHVzZXIncyBwcml2YXRlIGRhdGEuIEFuZ3VsYXIgcHJvdmlkZXMgYSBtZWNoYW5pc20KICAgICAqIHRvIGNvdW50ZXIgWFNSRi4gV2hlbiBwZXJmb3JtaW5nIFhIUiByZXF1ZXN0cywgdGhlICRodHRwIHNlcnZpY2UgcmVhZHMgYSB0b2tlbiBmcm9tIGEgY29va2llCiAgICAgKiAoYnkgZGVmYXVsdCwgYFhTUkYtVE9LRU5gKSBhbmQgc2V0cyBpdCBhcyBhbiBIVFRQIGhlYWRlciAoYFgtWFNSRi1UT0tFTmApLiBTaW5jZSBvbmx5CiAgICAgKiBKYXZhU2NyaXB0IHRoYXQgcnVucyBvbiB5b3VyIGRvbWFpbiBjb3VsZCByZWFkIHRoZSBjb29raWUsIHlvdXIgc2VydmVyIGNhbiBiZSBhc3N1cmVkIHRoYXQKICAgICAqIHRoZSBYSFIgY2FtZSBmcm9tIEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbi4gVGhlIGhlYWRlciB3aWxsIG5vdCBiZSBzZXQgZm9yCiAgICAgKiBjcm9zcy1kb21haW4gcmVxdWVzdHMuCiAgICAgKgogICAgICogVG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhpcywgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gc2V0IGEgdG9rZW4gaW4gYSBKYXZhU2NyaXB0IHJlYWRhYmxlIHNlc3Npb24KICAgICAqIGNvb2tpZSBjYWxsZWQgYFhTUkYtVE9LRU5gIG9uIHRoZSBmaXJzdCBIVFRQIEdFVCByZXF1ZXN0LiBPbiBzdWJzZXF1ZW50IFhIUiByZXF1ZXN0cyB0aGUKICAgICAqIHNlcnZlciBjYW4gdmVyaWZ5IHRoYXQgdGhlIGNvb2tpZSBtYXRjaGVzIGBYLVhTUkYtVE9LRU5gIEhUVFAgaGVhZGVyLCBhbmQgdGhlcmVmb3JlIGJlIHN1cmUKICAgICAqIHRoYXQgb25seSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4gY291bGQgaGF2ZSBzZW50IHRoZSByZXF1ZXN0LiBUaGUgdG9rZW4gbXVzdCBiZQogICAgICogdW5pcXVlIGZvciBlYWNoIHVzZXIgYW5kIG11c3QgYmUgdmVyaWZpYWJsZSBieSB0aGUgc2VydmVyICh0byBwcmV2ZW50IHRoZSBKYXZhU2NyaXB0IGZyb20KICAgICAqIG1ha2luZyB1cCBpdHMgb3duIHRva2VucykuIFdlIHJlY29tbWVuZCB0aGF0IHRoZSB0b2tlbiBpcyBhIGRpZ2VzdCBvZiB5b3VyIHNpdGUncwogICAgICogYXV0aGVudGljYXRpb24gY29va2llIHdpdGggYSBbc2FsdF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FsdF8oY3J5cHRvZ3JhcGh5JiM0MTspCiAgICAgKiBmb3IgYWRkZWQgc2VjdXJpdHkuCiAgICAgKgogICAgICogVGhlIG5hbWUgb2YgdGhlIGhlYWRlcnMgY2FuIGJlIHNwZWNpZmllZCB1c2luZyB0aGUgeHNyZkhlYWRlck5hbWUgYW5kIHhzcmZDb29raWVOYW1lCiAgICAgKiBwcm9wZXJ0aWVzIG9mIGVpdGhlciAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzIGF0IGNvbmZpZy10aW1lLCAkaHR0cC5kZWZhdWx0cyBhdCBydW4tdGltZSwKICAgICAqIG9yIHRoZSBwZXItcmVxdWVzdCBjb25maWcgb2JqZWN0LgogICAgICoKICAgICAqCiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIE9iamVjdCBkZXNjcmliaW5nIHRoZSByZXF1ZXN0IHRvIGJlIG1hZGUgYW5kIGhvdyBpdCBzaG91bGQgYmUKICAgICAqICAgIHByb2Nlc3NlZC4gVGhlIG9iamVjdCBoYXMgZm9sbG93aW5nIHByb3BlcnRpZXM6CiAgICAgKgogICAgICogICAgLSAqKm1ldGhvZCoqIOKAkyBge3N0cmluZ31gIOKAkyBIVFRQIG1ldGhvZCAoZS5nLiAnR0VUJywgJ1BPU1QnLCBldGMpCiAgICAgKiAgICAtICoqdXJsKiog4oCTIGB7c3RyaW5nfWAg4oCTIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQuCiAgICAgKiAgICAtICoqcGFyYW1zKiog4oCTIGB7T2JqZWN0LjxzdHJpbmd8T2JqZWN0Pn1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBvYmplY3RzIHdoaWNoIHdpbGwgYmUgdHVybmVkCiAgICAgKiAgICAgIHRvIGA/a2V5MT12YWx1ZTEma2V5Mj12YWx1ZTJgIGFmdGVyIHRoZSB1cmwuIElmIHRoZSB2YWx1ZSBpcyBub3QgYSBzdHJpbmcsIGl0IHdpbGwgYmUKICAgICAqICAgICAgSlNPTmlmaWVkLgogICAgICogICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIERhdGEgdG8gYmUgc2VudCBhcyB0aGUgcmVxdWVzdCBtZXNzYWdlIGRhdGEuCiAgICAgKiAgICAtICoqaGVhZGVycyoqIOKAkyBge09iamVjdH1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBmdW5jdGlvbnMgd2hpY2ggcmV0dXJuIHN0cmluZ3MgcmVwcmVzZW50aW5nCiAgICAgKiAgICAgIEhUVFAgaGVhZGVycyB0byBzZW5kIHRvIHRoZSBzZXJ2ZXIuIElmIHRoZSByZXR1cm4gdmFsdWUgb2YgYSBmdW5jdGlvbiBpcyBudWxsLCB0aGUKICAgICAqICAgICAgaGVhZGVyIHdpbGwgbm90IGJlIHNlbnQuCiAgICAgKiAgICAtICoqeHNyZkhlYWRlck5hbWUqKiDigJMgYHtzdHJpbmd9YCDigJMgTmFtZSBvZiBIVFRQIGhlYWRlciB0byBwb3B1bGF0ZSB3aXRoIHRoZSBYU1JGIHRva2VuLgogICAgICogICAgLSAqKnhzcmZDb29raWVOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgY29va2llIGNvbnRhaW5pbmcgdGhlIFhTUkYgdG9rZW4uCiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVxdWVzdCoqIOKAkwogICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJMKICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwCiAgICAgKiAgICAgIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBzZXJpYWxpemVkKSB2ZXJzaW9uLgogICAgICogICAgLSAqKnRyYW5zZm9ybVJlc3BvbnNlKiog4oCTCiAgICAgKiAgICAgIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpPn1gIOKAkwogICAgICogICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHAKICAgICAqICAgICAgcmVzcG9uc2UgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBkZXNlcmlhbGl6ZWQpIHZlcnNpb24uCiAgICAgKiAgICAtICoqY2FjaGUqKiDigJMgYHtib29sZWFufENhY2hlfWAg4oCTIElmIHRydWUsIGEgZGVmYXVsdCAkaHR0cCBjYWNoZSB3aWxsIGJlIHVzZWQgdG8gY2FjaGUgdGhlCiAgICAgKiAgICAgIEdFVCByZXF1ZXN0LCBvdGhlcndpc2UgaWYgYSBjYWNoZSBpbnN0YW5jZSBidWlsdCB3aXRoCiAgICAgKiAgICAgIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LCB0aGlzIGNhY2hlIHdpbGwgYmUgdXNlZCBmb3IKICAgICAqICAgICAgY2FjaGluZy4KICAgICAqICAgIC0gKip0aW1lb3V0Kiog4oCTIGB7bnVtYmVyfFByb21pc2V9YCDigJMgdGltZW91dCBpbiBtaWxsaXNlY29uZHMsIG9yIHtAbGluayBuZy4kcSBwcm9taXNlfQogICAgICogICAgICB0aGF0IHNob3VsZCBhYm9ydCB0aGUgcmVxdWVzdCB3aGVuIHJlc29sdmVkLgogICAgICogICAgLSAqKndpdGhDcmVkZW50aWFscyoqIC0gYHtib29sZWFufWAgLSB3aGV0aGVyIHRvIHNldCB0aGUgYHdpdGhDcmVkZW50aWFsc2AgZmxhZyBvbiB0aGUKICAgICAqICAgICAgWEhSIG9iamVjdC4gU2VlIFtyZXF1ZXN0cyB3aXRoIGNyZWRlbnRpYWxzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVFRQL0FjY2Vzc19jb250cm9sX0NPUlMjUmVxdWVzdHNfd2l0aF9jcmVkZW50aWFscykKICAgICAqICAgICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uCiAgICAgKiAgICAtICoqcmVzcG9uc2VUeXBlKiogLSBge3N0cmluZ31gIC0gc2VlCiAgICAgKiAgICAgIFtyZXF1ZXN0VHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9ET00vWE1MSHR0cFJlcXVlc3QjcmVzcG9uc2VUeXBlKS4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IFJldHVybnMgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX0gb2JqZWN0IHdpdGggdGhlCiAgICAgKiAgIHN0YW5kYXJkIGB0aGVuYCBtZXRob2QgYW5kIHR3byBodHRwIHNwZWNpZmljIG1ldGhvZHM6IGBzdWNjZXNzYCBhbmQgYGVycm9yYC4gVGhlIGB0aGVuYAogICAgICogICBtZXRob2QgdGFrZXMgdHdvIGFyZ3VtZW50cyBhIHN1Y2Nlc3MgYW5kIGFuIGVycm9yIGNhbGxiYWNrIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdpdGggYQogICAgICogICByZXNwb25zZSBvYmplY3QuIFRoZSBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgbWV0aG9kcyB0YWtlIGEgc2luZ2xlIGFyZ3VtZW50IC0gYSBmdW5jdGlvbiB0aGF0CiAgICAgKiAgIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZHMgb3IgZmFpbHMgcmVzcGVjdGl2ZWx5LiBUaGUgYXJndW1lbnRzIHBhc3NlZCBpbnRvCiAgICAgKiAgIHRoZXNlIGZ1bmN0aW9ucyBhcmUgZGVzdHJ1Y3R1cmVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZXNwb25zZSBvYmplY3QgcGFzc2VkIGludG8gdGhlCiAgICAgKiAgIGB0aGVuYCBtZXRob2QuIFRoZSByZXNwb25zZSBvYmplY3QgaGFzIHRoZXNlIHByb3BlcnRpZXM6CiAgICAgKgogICAgICogICAtICoqZGF0YSoqIOKAkyBge3N0cmluZ3xPYmplY3R9YCDigJMgVGhlIHJlc3BvbnNlIGJvZHkgdHJhbnNmb3JtZWQgd2l0aCB0aGUgdHJhbnNmb3JtCiAgICAgKiAgICAgZnVuY3Rpb25zLgogICAgICogICAtICoqc3RhdHVzKiog4oCTIGB7bnVtYmVyfWAg4oCTIEhUVFAgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlLgogICAgICogICAtICoqaGVhZGVycyoqIOKAkyBge2Z1bmN0aW9uKFtoZWFkZXJOYW1lXSl9YCDigJMgSGVhZGVyIGdldHRlciBmdW5jdGlvbi4KICAgICAqICAgLSAqKmNvbmZpZyoqIOKAkyBge09iamVjdH1gIOKAkyBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVxdWVzdC4KICAgICAqICAgLSAqKnN0YXR1c1RleHQqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBzdGF0dXMgdGV4dCBvZiB0aGUgcmVzcG9uc2UuCiAgICAgKgogICAgICogQHByb3BlcnR5IHtBcnJheS48T2JqZWN0Pn0gcGVuZGluZ1JlcXVlc3RzIEFycmF5IG9mIGNvbmZpZyBvYmplY3RzIGZvciBjdXJyZW50bHkgcGVuZGluZwogICAgICogICByZXF1ZXN0cy4gVGhpcyBpcyBwcmltYXJpbHkgbWVhbnQgdG8gYmUgdXNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLgogICAgICoKICAgICAqCiAgICAgKiBAZXhhbXBsZQo8ZXhhbXBsZSBtb2R1bGU9Imh0dHBFeGFtcGxlIj4KPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgPGRpdiBuZy1jb250cm9sbGVyPSJGZXRjaENvbnRyb2xsZXIiPgogICAgPHNlbGVjdCBuZy1tb2RlbD0ibWV0aG9kIj4KICAgICAgPG9wdGlvbj5HRVQ8L29wdGlvbj4KICAgICAgPG9wdGlvbj5KU09OUDwvb3B0aW9uPgogICAgPC9zZWxlY3Q+CiAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InVybCIgc2l6ZT0iODAiLz4KICAgIDxidXR0b24gaWQ9ImZldGNoYnRuIiBuZy1jbGljaz0iZmV0Y2goKSI+ZmV0Y2g8L2J1dHRvbj48YnI+CiAgICA8YnV0dG9uIGlkPSJzYW1wbGVnZXRidG4iIG5nLWNsaWNrPSJ1cGRhdGVNb2RlbCgnR0VUJywgJ2h0dHAtaGVsbG8uaHRtbCcpIj5TYW1wbGUgR0VUPC9idXR0b24+CiAgICA8YnV0dG9uIGlkPSJzYW1wbGVqc29ucGJ0biIKICAgICAgbmctY2xpY2s9InVwZGF0ZU1vZGVsKCdKU09OUCcsCiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9ncmVldC5waHA/Y2FsbGJhY2s9SlNPTl9DQUxMQkFDSyZuYW1lPVN1cGVyJTIwSGVybycpIj4KICAgICAgU2FtcGxlIEpTT05QCiAgICA8L2J1dHRvbj4KICAgIDxidXR0b24gaWQ9ImludmFsaWRqc29ucGJ0biIKICAgICAgbmctY2xpY2s9InVwZGF0ZU1vZGVsKCdKU09OUCcsICdodHRwczovL2FuZ3VsYXJqcy5vcmcvZG9lc250ZXhpc3QmY2FsbGJhY2s9SlNPTl9DQUxMQkFDSycpIj4KICAgICAgICBJbnZhbGlkIEpTT05QCiAgICAgIDwvYnV0dG9uPgogICAgPHByZT5odHRwIHN0YXR1cyBjb2RlOiB7e3N0YXR1c319PC9wcmU+CiAgICA8cHJlPmh0dHAgcmVzcG9uc2UgZGF0YToge3tkYXRhfX08L3ByZT4KICA8L2Rpdj4KPC9maWxlPgo8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogIGFuZ3VsYXIubW9kdWxlKCdodHRwRXhhbXBsZScsIFtdKQogICAgLmNvbnRyb2xsZXIoJ0ZldGNoQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywKICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUpIHsKICAgICAgICAkc2NvcGUubWV0aG9kID0gJ0dFVCc7CiAgICAgICAgJHNjb3BlLnVybCA9ICdodHRwLWhlbGxvLmh0bWwnOwoKICAgICAgICAkc2NvcGUuZmV0Y2ggPSBmdW5jdGlvbigpIHsKICAgICAgICAgICRzY29wZS5jb2RlID0gbnVsbDsKICAgICAgICAgICRzY29wZS5yZXNwb25zZSA9IG51bGw7CgogICAgICAgICAgJGh0dHAoe21ldGhvZDogJHNjb3BlLm1ldGhvZCwgdXJsOiAkc2NvcGUudXJsLCBjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS4KICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gc3RhdHVzOwogICAgICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YTsKICAgICAgICAgICAgfSkuCiAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YSB8fCAiUmVxdWVzdCBmYWlsZWQiOwogICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSBzdGF0dXM7CiAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUudXBkYXRlTW9kZWwgPSBmdW5jdGlvbihtZXRob2QsIHVybCkgewogICAgICAgICAgJHNjb3BlLm1ldGhvZCA9IG1ldGhvZDsKICAgICAgICAgICRzY29wZS51cmwgPSB1cmw7CiAgICAgICAgfTsKICAgICAgfV0pOwo8L2ZpbGU+CjxmaWxlIG5hbWU9Imh0dHAtaGVsbG8uaHRtbCI+CiAgSGVsbG8sICRodHRwIQo8L2ZpbGU+CjxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogIHZhciBzdGF0dXMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3N0YXR1cycpKTsKICB2YXIgZGF0YSA9IGVsZW1lbnQoYnkuYmluZGluZygnZGF0YScpKTsKICB2YXIgZmV0Y2hCdG4gPSBlbGVtZW50KGJ5LmlkKCdmZXRjaGJ0bicpKTsKICB2YXIgc2FtcGxlR2V0QnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlZ2V0YnRuJykpOwogIHZhciBzYW1wbGVKc29ucEJ0biA9IGVsZW1lbnQoYnkuaWQoJ3NhbXBsZWpzb25wYnRuJykpOwogIHZhciBpbnZhbGlkSnNvbnBCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbnZhbGlkanNvbnBidG4nKSk7CgogIGl0KCdzaG91bGQgbWFrZSBhbiB4aHIgR0VUIHJlcXVlc3QnLCBmdW5jdGlvbigpIHsKICAgIHNhbXBsZUdldEJ0bi5jbGljaygpOwogICAgZmV0Y2hCdG4uY2xpY2soKTsKICAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcyMDAnKTsKICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvSGVsbG8sIFwkaHR0cCEvKTsKICB9KTsKCiAgaXQoJ3Nob3VsZCBtYWtlIGEgSlNPTlAgcmVxdWVzdCB0byBhbmd1bGFyanMub3JnJywgZnVuY3Rpb24oKSB7CiAgICBzYW1wbGVKc29ucEJ0bi5jbGljaygpOwogICAgZmV0Y2hCdG4uY2xpY2soKTsKICAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcyMDAnKTsKICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvU3VwZXIgSGVybyEvKTsKICB9KTsKCiAgaXQoJ3Nob3VsZCBtYWtlIEpTT05QIHJlcXVlc3QgdG8gaW52YWxpZCBVUkwgYW5kIGludm9rZSB0aGUgZXJyb3IgaGFuZGxlcicsCiAgICAgIGZ1bmN0aW9uKCkgewogICAgaW52YWxpZEpzb25wQnRuLmNsaWNrKCk7CiAgICBmZXRjaEJ0bi5jbGljaygpOwogICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzAnKTsKICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgnUmVxdWVzdCBmYWlsZWQnKTsKICB9KTsKPC9maWxlPgo8L2V4YW1wbGU+CiAgICAgKi8KICAgIGZ1bmN0aW9uICRodHRwKHJlcXVlc3RDb25maWcpIHsKICAgICAgdmFyIGNvbmZpZyA9IHsKICAgICAgICBtZXRob2Q6ICdnZXQnLAogICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3QsCiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlCiAgICAgIH07CiAgICAgIHZhciBoZWFkZXJzID0gbWVyZ2VIZWFkZXJzKHJlcXVlc3RDb25maWcpOwoKICAgICAgZXh0ZW5kKGNvbmZpZywgcmVxdWVzdENvbmZpZyk7CiAgICAgIGNvbmZpZy5oZWFkZXJzID0gaGVhZGVyczsKICAgICAgY29uZmlnLm1ldGhvZCA9IHVwcGVyY2FzZShjb25maWcubWV0aG9kKTsKCiAgICAgIHZhciBzZXJ2ZXJSZXF1ZXN0ID0gZnVuY3Rpb24oY29uZmlnKSB7CiAgICAgICAgaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzOwogICAgICAgIHZhciByZXFEYXRhID0gdHJhbnNmb3JtRGF0YShjb25maWcuZGF0YSwgaGVhZGVyc0dldHRlcihoZWFkZXJzKSwgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3QpOwoKICAgICAgICAvLyBzdHJpcCBjb250ZW50LXR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWQKICAgICAgICBpZiAoaXNVbmRlZmluZWQocmVxRGF0YSkpIHsKICAgICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGhlYWRlcikgewogICAgICAgICAgICBpZiAobG93ZXJjYXNlKGhlYWRlcikgPT09ICdjb250ZW50LXR5cGUnKSB7CiAgICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1toZWFkZXJdOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGlmIChpc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSAmJiAhaXNVbmRlZmluZWQoZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzKSkgewogICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscyA9IGRlZmF1bHRzLndpdGhDcmVkZW50aWFsczsKICAgICAgICB9CgogICAgICAgIC8vIHNlbmQgcmVxdWVzdAogICAgICAgIHJldHVybiBzZW5kUmVxKGNvbmZpZywgcmVxRGF0YSwgaGVhZGVycykudGhlbih0cmFuc2Zvcm1SZXNwb25zZSwgdHJhbnNmb3JtUmVzcG9uc2UpOwogICAgICB9OwoKICAgICAgdmFyIGNoYWluID0gW3NlcnZlclJlcXVlc3QsIHVuZGVmaW5lZF07CiAgICAgIHZhciBwcm9taXNlID0gJHEud2hlbihjb25maWcpOwoKICAgICAgLy8gYXBwbHkgaW50ZXJjZXB0b3JzCiAgICAgIGZvckVhY2gocmV2ZXJzZWRJbnRlcmNlcHRvcnMsIGZ1bmN0aW9uKGludGVyY2VwdG9yKSB7CiAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlcXVlc3QgfHwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKSB7CiAgICAgICAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLnJlcXVlc3QsIGludGVyY2VwdG9yLnJlcXVlc3RFcnJvcik7CiAgICAgICAgfQogICAgICAgIGlmIChpbnRlcmNlcHRvci5yZXNwb25zZSB8fCBpbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKSB7CiAgICAgICAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLnJlc3BvbnNlLCBpbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgd2hpbGUoY2hhaW4ubGVuZ3RoKSB7CiAgICAgICAgdmFyIHRoZW5GbiA9IGNoYWluLnNoaWZ0KCk7CiAgICAgICAgdmFyIHJlamVjdEZuID0gY2hhaW4uc2hpZnQoKTsKCiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbih0aGVuRm4sIHJlamVjdEZuKTsKICAgICAgfQoKICAgICAgcHJvbWlzZS5zdWNjZXNzID0gZnVuY3Rpb24oZm4pIHsKICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgIGZuKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UuaGVhZGVycywgY29uZmlnKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcHJvbWlzZTsKICAgICAgfTsKCiAgICAgIHByb21pc2UuZXJyb3IgPSBmdW5jdGlvbihmbikgewogICAgICAgIHByb21pc2UudGhlbihudWxsLCBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgZm4ocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcpOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBwcm9taXNlOwogICAgICB9OwoKICAgICAgcmV0dXJuIHByb21pc2U7CgogICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShyZXNwb25zZSkgewogICAgICAgIC8vIG1ha2UgYSBjb3B5IHNpbmNlIHRoZSByZXNwb25zZSBtdXN0IGJlIGNhY2hlYWJsZQogICAgICAgIHZhciByZXNwID0gZXh0ZW5kKHt9LCByZXNwb25zZSwgewogICAgICAgICAgZGF0YTogdHJhbnNmb3JtRGF0YShyZXNwb25zZS5kYXRhLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UpCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIChpc1N1Y2Nlc3MocmVzcG9uc2Uuc3RhdHVzKSkKICAgICAgICAgID8gcmVzcAogICAgICAgICAgOiAkcS5yZWplY3QocmVzcCk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIG1lcmdlSGVhZGVycyhjb25maWcpIHsKICAgICAgICB2YXIgZGVmSGVhZGVycyA9IGRlZmF1bHRzLmhlYWRlcnMsCiAgICAgICAgICAgIHJlcUhlYWRlcnMgPSBleHRlbmQoe30sIGNvbmZpZy5oZWFkZXJzKSwKICAgICAgICAgICAgZGVmSGVhZGVyTmFtZSwgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSwgcmVxSGVhZGVyTmFtZTsKCiAgICAgICAgZGVmSGVhZGVycyA9IGV4dGVuZCh7fSwgZGVmSGVhZGVycy5jb21tb24sIGRlZkhlYWRlcnNbbG93ZXJjYXNlKGNvbmZpZy5tZXRob2QpXSk7CgogICAgICAgIC8vIHVzaW5nIGZvci1pbiBpbnN0ZWFkIG9mIGZvckVhY2ggdG8gYXZvaWQgdW5lY2Vzc2FyeSBpdGVyYXRpb24gYWZ0ZXIgaGVhZGVyIGhhcyBiZWVuIGZvdW5kCiAgICAgICAgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb246CiAgICAgICAgZm9yIChkZWZIZWFkZXJOYW1lIGluIGRlZkhlYWRlcnMpIHsKICAgICAgICAgIGxvd2VyY2FzZURlZkhlYWRlck5hbWUgPSBsb3dlcmNhc2UoZGVmSGVhZGVyTmFtZSk7CgogICAgICAgICAgZm9yIChyZXFIZWFkZXJOYW1lIGluIHJlcUhlYWRlcnMpIHsKICAgICAgICAgICAgaWYgKGxvd2VyY2FzZShyZXFIZWFkZXJOYW1lKSA9PT0gbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSkgewogICAgICAgICAgICAgIGNvbnRpbnVlIGRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcmVxSGVhZGVyc1tkZWZIZWFkZXJOYW1lXSA9IGRlZkhlYWRlcnNbZGVmSGVhZGVyTmFtZV07CiAgICAgICAgfQoKICAgICAgICAvLyBleGVjdXRlIGlmIGhlYWRlciB2YWx1ZSBpcyBhIGZ1bmN0aW9uIGZvciBtZXJnZWQgaGVhZGVycwogICAgICAgIGV4ZWNIZWFkZXJzKHJlcUhlYWRlcnMpOwogICAgICAgIHJldHVybiByZXFIZWFkZXJzOwoKICAgICAgICBmdW5jdGlvbiBleGVjSGVhZGVycyhoZWFkZXJzKSB7CiAgICAgICAgICB2YXIgaGVhZGVyQ29udGVudDsKCiAgICAgICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKGhlYWRlckZuLCBoZWFkZXIpIHsKICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGVhZGVyRm4pKSB7CiAgICAgICAgICAgICAgaGVhZGVyQ29udGVudCA9IGhlYWRlckZuKCk7CiAgICAgICAgICAgICAgaWYgKGhlYWRlckNvbnRlbnQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaGVhZGVyc1toZWFkZXJdID0gaGVhZGVyQ29udGVudDsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgICRodHRwLnBlbmRpbmdSZXF1ZXN0cyA9IFtdOwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJGh0dHAjZ2V0CiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgR0VUYCByZXF1ZXN0LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRodHRwI2RlbGV0ZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYERFTEVURWAgcmVxdWVzdC4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdAogICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QKICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdAogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkaHR0cCNoZWFkCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSEVBRGAgcmVxdWVzdC4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdAogICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QKICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdAogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkaHR0cCNqc29ucAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEpTT05QYCByZXF1ZXN0LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0LgogICAgICogICAgICAgICAgICAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgY2FsbGJhY2sgc2hvdWxkIGJlIHRoZSBzdHJpbmcgYEpTT05fQ0FMTEJBQ0tgLgogICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QKICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdAogICAgICovCiAgICBjcmVhdGVTaG9ydE1ldGhvZHMoJ2dldCcsICdkZWxldGUnLCAnaGVhZCcsICdqc29ucCcpOwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJGh0dHAjcG9zdAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBPU1RgIHJlcXVlc3QuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QKICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnQKICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0CiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3QKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJGh0dHAjcHV0CiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUFVUYCByZXF1ZXN0LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAgLyoqCiAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAqIEBuYW1lICRodHRwI3BhdGNoCiAgICAgICoKICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUEFUQ0hgIHJlcXVlc3QuCiAgICAgICoKICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdAogICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnQKICAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdAogICAgICAqLwogICAgY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEoJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJyk7CgogICAgICAgIC8qKgogICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAgICAgICAqIEBuYW1lICRodHRwI2RlZmF1bHRzCiAgICAgICAgICoKICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgKiBSdW50aW1lIGVxdWl2YWxlbnQgb2YgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzYCBwcm9wZXJ0eS4gQWxsb3dzIGNvbmZpZ3VyYXRpb24gb2YKICAgICAgICAgKiBkZWZhdWx0IGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscyBhcyB3ZWxsIGFzIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucy4KICAgICAgICAgKgogICAgICAgICAqIFNlZSAiU2V0dGluZyBIVFRQIEhlYWRlcnMiIGFuZCAiVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXMiIHNlY3Rpb25zIGFib3ZlLgogICAgICAgICAqLwogICAgJGh0dHAuZGVmYXVsdHMgPSBkZWZhdWx0czsKCgogICAgcmV0dXJuICRodHRwOwoKCiAgICBmdW5jdGlvbiBjcmVhdGVTaG9ydE1ldGhvZHMobmFtZXMpIHsKICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7CiAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKGNvbmZpZyB8fCB7fSwgewogICAgICAgICAgICBtZXRob2Q6IG5hbWUsCiAgICAgICAgICAgIHVybDogdXJsCiAgICAgICAgICB9KSk7CiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKG5hbWUpIHsKICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7CiAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKGNvbmZpZyB8fCB7fSwgewogICAgICAgICAgICBtZXRob2Q6IG5hbWUsCiAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICB9KSk7CiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9CgoKICAgIC8qKgogICAgICogTWFrZXMgdGhlIHJlcXVlc3QuCiAgICAgKgogICAgICogISEhIEFDQ0VTU0VTIENMT1NVUkUgVkFSUzoKICAgICAqICRodHRwQmFja2VuZCwgZGVmYXVsdHMsICRsb2csICRyb290U2NvcGUsIGRlZmF1bHRDYWNoZSwgJGh0dHAucGVuZGluZ1JlcXVlc3RzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhLCByZXFIZWFkZXJzKSB7CiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCksCiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSwKICAgICAgICAgIGNhY2hlLAogICAgICAgICAgY2FjaGVkUmVzcCwKICAgICAgICAgIHVybCA9IGJ1aWxkVXJsKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMpOwoKICAgICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnB1c2goY29uZmlnKTsKICAgICAgcHJvbWlzZS50aGVuKHJlbW92ZVBlbmRpbmdSZXEsIHJlbW92ZVBlbmRpbmdSZXEpOwoKCiAgICAgIGlmICgoY29uZmlnLmNhY2hlIHx8IGRlZmF1bHRzLmNhY2hlKSAmJiBjb25maWcuY2FjaGUgIT09IGZhbHNlICYmCiAgICAgICAgICAoY29uZmlnLm1ldGhvZCA9PT0gJ0dFVCcgfHwgY29uZmlnLm1ldGhvZCA9PT0gJ0pTT05QJykpIHsKICAgICAgICBjYWNoZSA9IGlzT2JqZWN0KGNvbmZpZy5jYWNoZSkgPyBjb25maWcuY2FjaGUKICAgICAgICAgICAgICA6IGlzT2JqZWN0KGRlZmF1bHRzLmNhY2hlKSA/IGRlZmF1bHRzLmNhY2hlCiAgICAgICAgICAgICAgOiBkZWZhdWx0Q2FjaGU7CiAgICAgIH0KCiAgICAgIGlmIChjYWNoZSkgewogICAgICAgIGNhY2hlZFJlc3AgPSBjYWNoZS5nZXQodXJsKTsKICAgICAgICBpZiAoaXNEZWZpbmVkKGNhY2hlZFJlc3ApKSB7CiAgICAgICAgICBpZiAoaXNQcm9taXNlTGlrZShjYWNoZWRSZXNwKSkgewogICAgICAgICAgICAvLyBjYWNoZWQgcmVxdWVzdCBoYXMgYWxyZWFkeSBiZWVuIHNlbnQsIGJ1dCB0aGVyZSBpcyBubyByZXNwb25zZSB5ZXQKICAgICAgICAgICAgY2FjaGVkUmVzcC50aGVuKHJlbW92ZVBlbmRpbmdSZXEsIHJlbW92ZVBlbmRpbmdSZXEpOwogICAgICAgICAgICByZXR1cm4gY2FjaGVkUmVzcDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIHNlcnZpbmcgZnJvbSBjYWNoZQogICAgICAgICAgICBpZiAoaXNBcnJheShjYWNoZWRSZXNwKSkgewogICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3BbMV0sIGNhY2hlZFJlc3BbMF0sIHNoYWxsb3dDb3B5KGNhY2hlZFJlc3BbMl0pLCBjYWNoZWRSZXNwWzNdKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwLCAyMDAsIHt9LCAnT0snKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBwdXQgdGhlIHByb21pc2UgZm9yIHRoZSBub24tdHJhbnNmb3JtZWQgcmVzcG9uc2UgaW50byBjYWNoZSBhcyBhIHBsYWNlaG9sZGVyCiAgICAgICAgICBjYWNoZS5wdXQodXJsLCBwcm9taXNlKTsKICAgICAgICB9CiAgICAgIH0KCgogICAgICAvLyBpZiB3ZSB3b24ndCBoYXZlIHRoZSByZXNwb25zZSBpbiBjYWNoZSwgc2V0IHRoZSB4c3JmIGhlYWRlcnMgYW5kCiAgICAgIC8vIHNlbmQgdGhlIHJlcXVlc3QgdG8gdGhlIGJhY2tlbmQKICAgICAgaWYgKGlzVW5kZWZpbmVkKGNhY2hlZFJlc3ApKSB7CiAgICAgICAgdmFyIHhzcmZWYWx1ZSA9IHVybElzU2FtZU9yaWdpbihjb25maWcudXJsKQogICAgICAgICAgICA/ICRicm93c2VyLmNvb2tpZXMoKVtjb25maWcueHNyZkNvb2tpZU5hbWUgfHwgZGVmYXVsdHMueHNyZkNvb2tpZU5hbWVdCiAgICAgICAgICAgIDogdW5kZWZpbmVkOwogICAgICAgIGlmICh4c3JmVmFsdWUpIHsKICAgICAgICAgIHJlcUhlYWRlcnNbKGNvbmZpZy54c3JmSGVhZGVyTmFtZSB8fCBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZSldID0geHNyZlZhbHVlOwogICAgICAgIH0KCiAgICAgICAgJGh0dHBCYWNrZW5kKGNvbmZpZy5tZXRob2QsIHVybCwgcmVxRGF0YSwgZG9uZSwgcmVxSGVhZGVycywgY29uZmlnLnRpbWVvdXQsCiAgICAgICAgICAgIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMsIGNvbmZpZy5yZXNwb25zZVR5cGUpOwogICAgICB9CgogICAgICByZXR1cm4gcHJvbWlzZTsKCgogICAgICAvKioKICAgICAgICogQ2FsbGJhY2sgcmVnaXN0ZXJlZCB0byAkaHR0cEJhY2tlbmQoKToKICAgICAgICogIC0gY2FjaGVzIHRoZSByZXNwb25zZSBpZiBkZXNpcmVkCiAgICAgICAqICAtIHJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZQogICAgICAgKiAgLSBjYWxscyAkYXBwbHkKICAgICAgICovCiAgICAgIGZ1bmN0aW9uIGRvbmUoc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCkgewogICAgICAgIGlmIChjYWNoZSkgewogICAgICAgICAgaWYgKGlzU3VjY2VzcyhzdGF0dXMpKSB7CiAgICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIFtzdGF0dXMsIHJlc3BvbnNlLCBwYXJzZUhlYWRlcnMoaGVhZGVyc1N0cmluZyksIHN0YXR1c1RleHRdKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIHJlbW92ZSBwcm9taXNlIGZyb20gdGhlIGNhY2hlCiAgICAgICAgICAgIGNhY2hlLnJlbW92ZSh1cmwpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCk7CiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGFwcGx5KCk7CiAgICAgIH0KCgogICAgICAvKioKICAgICAgICogUmVzb2x2ZXMgdGhlIHJhdyAkaHR0cCBwcm9taXNlLgogICAgICAgKi8KICAgICAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgc3RhdHVzVGV4dCkgewogICAgICAgIC8vIG5vcm1hbGl6ZSBpbnRlcm5hbCBzdGF0dXNlcyB0byAwCiAgICAgICAgc3RhdHVzID0gTWF0aC5tYXgoc3RhdHVzLCAwKTsKCiAgICAgICAgKGlzU3VjY2VzcyhzdGF0dXMpID8gZGVmZXJyZWQucmVzb2x2ZSA6IGRlZmVycmVkLnJlamVjdCkoewogICAgICAgICAgZGF0YTogcmVzcG9uc2UsCiAgICAgICAgICBzdGF0dXM6IHN0YXR1cywKICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNHZXR0ZXIoaGVhZGVycyksCiAgICAgICAgICBjb25maWc6IGNvbmZpZywKICAgICAgICAgIHN0YXR1c1RleHQgOiBzdGF0dXNUZXh0CiAgICAgICAgfSk7CiAgICAgIH0KCgogICAgICBmdW5jdGlvbiByZW1vdmVQZW5kaW5nUmVxKCkgewogICAgICAgIHZhciBpZHggPSBpbmRleE9mKCRodHRwLnBlbmRpbmdSZXF1ZXN0cywgY29uZmlnKTsKICAgICAgICBpZiAoaWR4ICE9PSAtMSkgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnNwbGljZShpZHgsIDEpOwogICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIGJ1aWxkVXJsKHVybCwgcGFyYW1zKSB7CiAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gdXJsOwogICAgICB2YXIgcGFydHMgPSBbXTsKICAgICAgZm9yRWFjaFNvcnRlZChwYXJhbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47CiAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlKSkgdmFsdWUgPSBbdmFsdWVdOwoKICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbih2KSB7CiAgICAgICAgICBpZiAoaXNPYmplY3QodikpIHsKICAgICAgICAgICAgaWYgKGlzRGF0ZSh2KSl7CiAgICAgICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh2KSkgewogICAgICAgICAgICAgIHYgPSB0b0pzb24odik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5KSArICc9JyArCiAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVyaVF1ZXJ5KHYpKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIGlmKHBhcnRzLmxlbmd0aCA+IDApIHsKICAgICAgICB1cmwgKz0gKCh1cmwuaW5kZXhPZignPycpID09IC0xKSA/ICc/JyA6ICcmJykgKyBwYXJ0cy5qb2luKCcmJyk7CiAgICAgIH0KICAgICAgcmV0dXJuIHVybDsKICAgIH0KICB9XTsKfQoKZnVuY3Rpb24gY3JlYXRlWGhyKG1ldGhvZCkgewogICAgLy9pZiBJRSBhbmQgdGhlIG1ldGhvZCBpcyBub3QgUkZDMjYxNiBjb21wbGlhbnQsIG9yIGlmIFhNTEh0dHBSZXF1ZXN0CiAgICAvL2lzIG5vdCBhdmFpbGFibGUsIHRyeSBnZXR0aW5nIGFuIEFjdGl2ZVhPYmplY3QuIE90aGVyd2lzZSwgdXNlIFhNTEh0dHBSZXF1ZXN0CiAgICAvL2lmIGl0IGlzIGF2YWlsYWJsZQogICAgaWYgKG1zaWUgPD0gOCAmJiAoIW1ldGhvZC5tYXRjaCgvXihnZXR8cG9zdHxoZWFkfHB1dHxkZWxldGV8b3B0aW9ucykkL2kpIHx8CiAgICAgICF3aW5kb3cuWE1MSHR0cFJlcXVlc3QpKSB7CiAgICAgIHJldHVybiBuZXcgd2luZG93LkFjdGl2ZVhPYmplY3QoIk1pY3Jvc29mdC5YTUxIVFRQIik7CiAgICB9IGVsc2UgaWYgKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCkgewogICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpOwogICAgfQoKICAgIHRocm93IG1pbkVycignJGh0dHBCYWNrZW5kJykoJ25veGhyJywgIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LiIpOwp9CgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJGh0dHBCYWNrZW5kCiAqIEByZXF1aXJlcyAkd2luZG93CiAqIEByZXF1aXJlcyAkZG9jdW1lbnQKICoKICogQGRlc2NyaXB0aW9uCiAqIEhUVFAgYmFja2VuZCB1c2VkIGJ5IHRoZSB7QGxpbmsgbmcuJGh0dHAgc2VydmljZX0gdGhhdCBkZWxlZ2F0ZXMgdG8KICogWE1MSHR0cFJlcXVlc3Qgb2JqZWN0IG9yIEpTT05QIGFuZCBkZWFscyB3aXRoIGJyb3dzZXIgaW5jb21wYXRpYmlsaXRpZXMuCiAqCiAqIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byB1c2UgdGhpcyBzZXJ2aWNlIGRpcmVjdGx5LCBpbnN0ZWFkIHVzZSB0aGUgaGlnaGVyLWxldmVsIGFic3RyYWN0aW9uczoKICoge0BsaW5rIG5nLiRodHRwICRodHRwfSBvciB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2UgJHJlc291cmNlfS4KICoKICogRHVyaW5nIHRlc3RpbmcgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzd2FwcGVkIHdpdGgge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgbW9jawogKiAkaHR0cEJhY2tlbmR9IHdoaWNoIGNhbiBiZSB0cmFpbmVkIHdpdGggcmVzcG9uc2VzLgogKi8KZnVuY3Rpb24gJEh0dHBCYWNrZW5kUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckd2luZG93JywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRicm93c2VyLCAkd2luZG93LCAkZG9jdW1lbnQpIHsKICAgIHJldHVybiBjcmVhdGVIdHRwQmFja2VuZCgkYnJvd3NlciwgY3JlYXRlWGhyLCAkYnJvd3Nlci5kZWZlciwgJHdpbmRvdy5hbmd1bGFyLmNhbGxiYWNrcywgJGRvY3VtZW50WzBdKTsKICB9XTsKfQoKZnVuY3Rpb24gY3JlYXRlSHR0cEJhY2tlbmQoJGJyb3dzZXIsIGNyZWF0ZVhociwgJGJyb3dzZXJEZWZlciwgY2FsbGJhY2tzLCByYXdEb2N1bWVudCkgewogIHZhciBBQk9SVEVEID0gLTE7CgogIC8vIFRPRE8odm9qdGEpOiBmaXggdGhlIHNpZ25hdHVyZQogIHJldHVybiBmdW5jdGlvbihtZXRob2QsIHVybCwgcG9zdCwgY2FsbGJhY2ssIGhlYWRlcnMsIHRpbWVvdXQsIHdpdGhDcmVkZW50aWFscywgcmVzcG9uc2VUeXBlKSB7CiAgICB2YXIgc3RhdHVzOwogICAgJGJyb3dzZXIuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCgpOwogICAgdXJsID0gdXJsIHx8ICRicm93c2VyLnVybCgpOwoKICAgIGlmIChsb3dlcmNhc2UobWV0aG9kKSA9PSAnanNvbnAnKSB7CiAgICAgIHZhciBjYWxsYmFja0lkID0gJ18nICsgKGNhbGxiYWNrcy5jb3VudGVyKyspLnRvU3RyaW5nKDM2KTsKICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gZnVuY3Rpb24oZGF0YSkgewogICAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXS5kYXRhID0gZGF0YTsKICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0uY2FsbGVkID0gdHJ1ZTsKICAgICAgfTsKCiAgICAgIHZhciBqc29ucERvbmUgPSBqc29ucFJlcSh1cmwucmVwbGFjZSgnSlNPTl9DQUxMQkFDSycsICdhbmd1bGFyLmNhbGxiYWNrcy4nICsgY2FsbGJhY2tJZCksCiAgICAgICAgICBjYWxsYmFja0lkLCBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHsKICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmRhdGEsICIiLCB0ZXh0KTsKICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0gPSBub29wOwogICAgICB9KTsKICAgIH0gZWxzZSB7CgogICAgICB2YXIgeGhyID0gY3JlYXRlWGhyKG1ldGhvZCk7CgogICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7CiAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7CiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsdWUpOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICAvLyBJbiBJRTYgYW5kIDcsIHRoaXMgbWlnaHQgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHkgd2hlbiB4aHIuc2VuZCBiZWxvdyBpcyBjYWxsZWQgYW5kIHRoZQogICAgICAvLyByZXNwb25zZSBpcyBpbiB0aGUgY2FjaGUuIHRoZSBwcm9taXNlIGFwaSB3aWxsIGVuc3VyZSB0aGF0IHRvIHRoZSBhcHAgY29kZSB0aGUgYXBpIGlzCiAgICAgIC8vIGFsd2F5cyBhc3luYwogICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gb25yZWFkeXN0YXRlY2hhbmdlIG1pZ2h0IGdldCBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2l0aCByZWFkeVN0YXRlID09PSA0IG9uIG1vYmlsZSB3ZWJraXQgY2F1c2VkIGJ5CiAgICAgICAgLy8geGhycyB0aGF0IGFyZSByZXNvbHZlZCB3aGlsZSB0aGUgYXBwIGlzIGluIHRoZSBiYWNrZ3JvdW5kIChzZWUgIzU0MjYpLgogICAgICAgIC8vIHNpbmNlIGNhbGxpbmcgY29tcGxldGVSZXF1ZXN0IHNldHMgdGhlIGB4aHJgIHZhcmlhYmxlIHRvIG51bGwsIHdlIGp1c3QgY2hlY2sgaWYgaXQncyBub3QgbnVsbCBiZWZvcmUKICAgICAgICAvLyBjb250aW51aW5nCiAgICAgICAgLy8KICAgICAgICAvLyB3ZSBjYW4ndCBzZXQgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSB0byB1bmRlZmluZWQgb3IgZGVsZXRlIGl0IGJlY2F1c2UgdGhhdCBicmVha3MgSUU4IChtZXRob2Q9UEFUQ0gpIGFuZAogICAgICAgIC8vIFNhZmFyaSByZXNwZWN0aXZlbHkuCiAgICAgICAgaWYgKHhociAmJiB4aHIucmVhZHlTdGF0ZSA9PSA0KSB7CiAgICAgICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gbnVsbCwKICAgICAgICAgICAgICByZXNwb25zZSA9IG51bGwsCiAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9ICcnOwoKICAgICAgICAgIGlmKHN0YXR1cyAhPT0gQUJPUlRFRCkgewogICAgICAgICAgICByZXNwb25zZUhlYWRlcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCk7CgogICAgICAgICAgICAvLyByZXNwb25zZVRleHQgaXMgdGhlIG9sZC1zY2hvb2wgd2F5IG9mIHJldHJpZXZpbmcgcmVzcG9uc2UgKHN1cHBvcnRlZCBieSBJRTggJiA5KQogICAgICAgICAgICAvLyByZXNwb25zZS9yZXNwb25zZVR5cGUgcHJvcGVydGllcyB3ZXJlIGludHJvZHVjZWQgaW4gWEhSIExldmVsMiBzcGVjIChzdXBwb3J0ZWQgYnkgSUUxMCkKICAgICAgICAgICAgcmVzcG9uc2UgPSAoJ3Jlc3BvbnNlJyBpbiB4aHIpID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dDsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBBY2Nlc3Npbmcgc3RhdHVzVGV4dCBvbiBhbiBhYm9ydGVkIHhociBvYmplY3Qgd2lsbAogICAgICAgICAgLy8gdGhyb3cgYW4gJ2MwMGMwMjNmIGVycm9yJyBpbiBJRTkgYW5kIGxvd2VyLCBkb24ndCB0b3VjaCBpdC4KICAgICAgICAgIGlmICghKHN0YXR1cyA9PT0gQUJPUlRFRCAmJiBtc2llIDwgMTApKSB7CiAgICAgICAgICAgIHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dDsKICAgICAgICAgIH0KCiAgICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssCiAgICAgICAgICAgICAgc3RhdHVzIHx8IHhoci5zdGF0dXMsCiAgICAgICAgICAgICAgcmVzcG9uc2UsCiAgICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzLAogICAgICAgICAgICAgIHN0YXR1c1RleHQpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHsKICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTsKICAgICAgfQoKICAgICAgaWYgKHJlc3BvbnNlVHlwZSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIC8vIFdlYktpdCBhZGRlZCBzdXBwb3J0IGZvciB0aGUganNvbiByZXNwb25zZVR5cGUgdmFsdWUgb24gMDkvMDMvMjAxMwogICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTczNjQ4LiBWZXJzaW9ucyBvZiBTYWZhcmkgcHJpb3IgdG8gNyBhcmUKICAgICAgICAgIC8vIGtub3duIHRvIHRocm93IHdoZW4gc2V0dGluZyB0aGUgdmFsdWUgImpzb24iIGFzIHRoZSByZXNwb25zZSB0eXBlLiBPdGhlciBvbGRlcgogICAgICAgICAgLy8gYnJvd3NlcnMgaW1wbGVtZW50aW5nIHRoZSByZXNwb25zZVR5cGUKICAgICAgICAgIC8vCiAgICAgICAgICAvLyBUaGUganNvbiByZXNwb25zZSB0eXBlIGNhbiBiZSBpZ25vcmVkIGlmIG5vdCBzdXBwb3J0ZWQsIGJlY2F1c2UgSlNPTiBwYXlsb2FkcyBhcmUKICAgICAgICAgIC8vIHBhcnNlZCBvbiB0aGUgY2xpZW50LXNpZGUgcmVnYXJkbGVzcy4KICAgICAgICAgIGlmIChyZXNwb25zZVR5cGUgIT09ICdqc29uJykgewogICAgICAgICAgICB0aHJvdyBlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgeGhyLnNlbmQocG9zdCB8fCBudWxsKTsKICAgIH0KCiAgICBpZiAodGltZW91dCA+IDApIHsKICAgICAgdmFyIHRpbWVvdXRJZCA9ICRicm93c2VyRGVmZXIodGltZW91dFJlcXVlc3QsIHRpbWVvdXQpOwogICAgfSBlbHNlIGlmIChpc1Byb21pc2VMaWtlKHRpbWVvdXQpKSB7CiAgICAgIHRpbWVvdXQudGhlbih0aW1lb3V0UmVxdWVzdCk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHRpbWVvdXRSZXF1ZXN0KCkgewogICAgICBzdGF0dXMgPSBBQk9SVEVEOwogICAgICBqc29ucERvbmUgJiYganNvbnBEb25lKCk7CiAgICAgIHhociAmJiB4aHIuYWJvcnQoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpIHsKICAgICAgLy8gY2FuY2VsIHRpbWVvdXQgYW5kIHN1YnNlcXVlbnQgdGltZW91dCBwcm9taXNlIHJlc29sdXRpb24KICAgICAgdGltZW91dElkICYmICRicm93c2VyRGVmZXIuY2FuY2VsKHRpbWVvdXRJZCk7CiAgICAgIGpzb25wRG9uZSA9IHhociA9IG51bGw7CgogICAgICAvLyBmaXggc3RhdHVzIGNvZGUgd2hlbiBpdCBpcyAwICgwIHN0YXR1cyBpcyB1bmRvY3VtZW50ZWQpLgogICAgICAvLyBPY2N1cnMgd2hlbiBhY2Nlc3NpbmcgZmlsZSByZXNvdXJjZXMgb3Igb24gQW5kcm9pZCA0LjEgc3RvY2sgYnJvd3NlcgogICAgICAvLyB3aGlsZSByZXRyaWV2aW5nIGZpbGVzIGZyb20gYXBwbGljYXRpb24gY2FjaGUuCiAgICAgIGlmIChzdGF0dXMgPT09IDApIHsKICAgICAgICBzdGF0dXMgPSByZXNwb25zZSA/IDIwMCA6IHVybFJlc29sdmUodXJsKS5wcm90b2NvbCA9PSAnZmlsZScgPyA0MDQgOiAwOwogICAgICB9CgogICAgICAvLyBub3JtYWxpemUgSUUgYnVnIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwKQogICAgICBzdGF0dXMgPSBzdGF0dXMgPT09IDEyMjMgPyAyMDQgOiBzdGF0dXM7CiAgICAgIHN0YXR1c1RleHQgPSBzdGF0dXNUZXh0IHx8ICcnOwoKICAgICAgY2FsbGJhY2soc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCk7CiAgICAgICRicm93c2VyLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Qobm9vcCk7CiAgICB9CiAgfTsKCiAgZnVuY3Rpb24ganNvbnBSZXEodXJsLCBjYWxsYmFja0lkLCBkb25lKSB7CiAgICAvLyB3ZSBjYW4ndCB1c2UgalF1ZXJ5L2pxTGl0ZSBoZXJlIGJlY2F1c2UgalF1ZXJ5IGRvZXMgY3Jhenkgc2hpdCB3aXRoIHNjcmlwdCBlbGVtZW50cywgZS5nLjoKICAgIC8vIC0gZmV0Y2hlcyBsb2NhbCBzY3JpcHRzIHZpYSBYSFIgYW5kIGV2YWxzIHRoZW0KICAgIC8vIC0gYWRkcyBhbmQgaW1tZWRpYXRlbHkgcmVtb3ZlcyBzY3JpcHQgZWxlbWVudHMgZnJvbSB0aGUgZG9jdW1lbnQKICAgIHZhciBzY3JpcHQgPSByYXdEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwgY2FsbGJhY2sgPSBudWxsOwogICAgc2NyaXB0LnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsKICAgIHNjcmlwdC5zcmMgPSB1cmw7CiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlOwoKICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgImxvYWQiLCBjYWxsYmFjayk7CiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihzY3JpcHQsICJlcnJvciIsIGNhbGxiYWNrKTsKICAgICAgcmF3RG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JpcHQpOwogICAgICBzY3JpcHQgPSBudWxsOwogICAgICB2YXIgc3RhdHVzID0gLTE7CiAgICAgIHZhciB0ZXh0ID0gInVua25vd24iOwoKICAgICAgaWYgKGV2ZW50KSB7CiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICJsb2FkIiAmJiAhY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmNhbGxlZCkgewogICAgICAgICAgZXZlbnQgPSB7IHR5cGU6ICJlcnJvciIgfTsKICAgICAgICB9CiAgICAgICAgdGV4dCA9IGV2ZW50LnR5cGU7CiAgICAgICAgc3RhdHVzID0gZXZlbnQudHlwZSA9PT0gImVycm9yIiA/IDQwNCA6IDIwMDsKICAgICAgfQoKICAgICAgaWYgKGRvbmUpIHsKICAgICAgICBkb25lKHN0YXR1cywgdGV4dCk7CiAgICAgIH0KICAgIH07CgogICAgYWRkRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgImxvYWQiLCBjYWxsYmFjayk7CiAgICBhZGRFdmVudExpc3RlbmVyRm4oc2NyaXB0LCAiZXJyb3IiLCBjYWxsYmFjayk7CiAgICByYXdEb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICByZXR1cm4gY2FsbGJhY2s7CiAgfQp9Cgp2YXIgJGludGVycG9sYXRlTWluRXJyID0gbWluRXJyKCckaW50ZXJwb2xhdGUnKTsKCi8qKgogKiBAbmdkb2MgcHJvdmlkZXIKICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXIKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIFVzZWQgZm9yIGNvbmZpZ3VyaW5nIHRoZSBpbnRlcnBvbGF0aW9uIG1hcmt1cC4gRGVmYXVsdHMgdG8gYHt7YCBhbmQgYH19YC4KICoKICogQGV4YW1wbGUKPGV4YW1wbGUgbW9kdWxlPSJjdXN0b21JbnRlcnBvbGF0aW9uQXBwIj4KPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CjxzY3JpcHQ+CiAgdmFyIGN1c3RvbUludGVycG9sYXRpb25BcHAgPSBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCcsIFtdKTsKCiAgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcC5jb25maWcoZnVuY3Rpb24oJGludGVycG9sYXRlUHJvdmlkZXIpIHsKICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLnN0YXJ0U3ltYm9sKCcvLycpOwogICAgJGludGVycG9sYXRlUHJvdmlkZXIuZW5kU3ltYm9sKCcvLycpOwogIH0pOwoKCiAgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcC5jb250cm9sbGVyKCdEZW1vQ29udHJvbGxlcicsIGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmxhYmVsID0gIlRoaXMgYmluZGluZyBpcyBicm91Z2h0IHlvdSBieSAvLyBpbnRlcnBvbGF0aW9uIHN5bWJvbHMuIjsKICB9KTsKPC9zY3JpcHQ+CjxkaXYgbmctYXBwPSJBcHAiIG5nLWNvbnRyb2xsZXI9IkRlbW9Db250cm9sbGVyIGFzIGRlbW8iPgogICAgLy9kZW1vLmxhYmVsLy8KPC9kaXY+CjwvZmlsZT4KPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgaXQoJ3Nob3VsZCBpbnRlcnBvbGF0ZSBiaW5kaW5nIHdpdGggY3VzdG9tIHN5bWJvbHMnLCBmdW5jdGlvbigpIHsKICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2RlbW8ubGFiZWwnKSkuZ2V0VGV4dCgpKS50b0JlKCdUaGlzIGJpbmRpbmcgaXMgYnJvdWdodCB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLicpOwogIH0pOwo8L2ZpbGU+CjwvZXhhbXBsZT4KICovCmZ1bmN0aW9uICRJbnRlcnBvbGF0ZVByb3ZpZGVyKCkgewogIHZhciBzdGFydFN5bWJvbCA9ICd7eyc7CiAgdmFyIGVuZFN5bWJvbCA9ICd9fSc7CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbAogICAqIEBkZXNjcmlwdGlvbgogICAqIFN5bWJvbCB0byBkZW5vdGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgc3RhcnRpbmcgc3ltYm9sIHRvLgogICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuCiAgICovCiAgdGhpcy5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKXsKICAgIGlmICh2YWx1ZSkgewogICAgICBzdGFydFN5bWJvbCA9IHZhbHVlOwogICAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBzdGFydFN5bWJvbDsKICAgIH0KICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sCiAgICogQGRlc2NyaXB0aW9uCiAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIGVuZGluZyBzeW1ib2wgdG8uCiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci4KICAgKi8KICB0aGlzLmVuZFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKXsKICAgIGlmICh2YWx1ZSkgewogICAgICBlbmRTeW1ib2wgPSB2YWx1ZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZW5kU3ltYm9sOwogICAgfQogIH07CgoKICB0aGlzLiRnZXQgPSBbJyRwYXJzZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckc2NlJywgZnVuY3Rpb24oJHBhcnNlLCAkZXhjZXB0aW9uSGFuZGxlciwgJHNjZSkgewogICAgdmFyIHN0YXJ0U3ltYm9sTGVuZ3RoID0gc3RhcnRTeW1ib2wubGVuZ3RoLAogICAgICAgIGVuZFN5bWJvbExlbmd0aCA9IGVuZFN5bWJvbC5sZW5ndGgsCiAgICAgICAgZXNjYXBlZFN0YXJ0UmVnZXhwID0gbmV3IFJlZ0V4cChzdGFydFN5bWJvbC5yZXBsYWNlKC8uL2csIGVzY2FwZSksICdnJyksCiAgICAgICAgZXNjYXBlZEVuZFJlZ2V4cCA9IG5ldyBSZWdFeHAoZW5kU3ltYm9sLnJlcGxhY2UoLy4vZywgZXNjYXBlKSwgJ2cnKTsKCiAgICBmdW5jdGlvbiBlc2NhcGUoY2gpIHsKICAgICAgcmV0dXJuICdcXFxcXFwnICsgY2g7CiAgICB9CgogICAgLyoqCiAgICAgKiBAbmdkb2Mgc2VydmljZQogICAgICogQG5hbWUgJGludGVycG9sYXRlCiAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICoKICAgICAqIEByZXF1aXJlcyAkcGFyc2UKICAgICAqIEByZXF1aXJlcyAkc2NlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKgogICAgICogQ29tcGlsZXMgYSBzdHJpbmcgd2l0aCBtYXJrdXAgaW50byBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLiBUaGlzIHNlcnZpY2UgaXMgdXNlZCBieSB0aGUKICAgICAqIEhUTUwge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSBzZXJ2aWNlIGZvciBkYXRhIGJpbmRpbmcuIFNlZQogICAgICoge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyICRpbnRlcnBvbGF0ZVByb3ZpZGVyfSBmb3IgY29uZmlndXJpbmcgdGhlCiAgICAgKiBpbnRlcnBvbGF0aW9uIG1hcmt1cC4KICAgICAqCiAgICAgKgogICAgICogYGBganMKICAgICAqICAgdmFyICRpbnRlcnBvbGF0ZSA9IC4uLjsgLy8gaW5qZWN0ZWQKICAgICAqICAgdmFyIGV4cCA9ICRpbnRlcnBvbGF0ZSgnSGVsbG8ge3tuYW1lIHwgdXBwZXJjYXNlfX0hJyk7CiAgICAgKiAgIGV4cGVjdChleHAoe25hbWU6J0FuZ3VsYXInfSkudG9FcXVhbCgnSGVsbG8gQU5HVUxBUiEnKTsKICAgICAqIGBgYAogICAgICoKICAgICAqIGAkaW50ZXJwb2xhdGVgIHRha2VzIGFuIG9wdGlvbmFsIGZvdXJ0aCBhcmd1bWVudCwgYGFsbE9yTm90aGluZ2AuIElmIGBhbGxPck5vdGhpbmdgIGlzCiAgICAgKiBgdHJ1ZWAsIHRoZSBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGB1bmRlZmluZWRgIHVubGVzcyBhbGwgZW1iZWRkZWQgZXhwcmVzc2lvbnMKICAgICAqIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC4KICAgICAqCiAgICAgKiBgYGBqcwogICAgICogICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZAogICAgICogICB2YXIgY29udGV4dCA9IHtncmVldGluZzogJ0hlbGxvJywgbmFtZTogdW5kZWZpbmVkIH07CiAgICAgKgogICAgICogICAvLyBkZWZhdWx0ICJmb3JnaXZpbmciIG1vZGUKICAgICAqICAgdmFyIGV4cCA9ICRpbnRlcnBvbGF0ZSgne3tncmVldGluZ319IHt7bmFtZX19IScpOwogICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0VxdWFsKCdIZWxsbyAhJyk7CiAgICAgKgogICAgICogICAvLyAiYWxsT3JOb3RoaW5nIiBtb2RlCiAgICAgKiAgIGV4cCA9ICRpbnRlcnBvbGF0ZSgne3tncmVldGluZ319IHt7bmFtZX19IScsIGZhbHNlLCBudWxsLCB0cnVlKTsKICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9CZVVuZGVmaW5lZCgpOwogICAgICogICBjb250ZXh0Lm5hbWUgPSAnQW5ndWxhcic7CiAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvRXF1YWwoJ0hlbGxvIEFuZ3VsYXIhJyk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiBgYWxsT3JOb3RoaW5nYCBpcyB1c2VmdWwgZm9yIGludGVycG9sYXRpbmcgVVJMcy4gYG5nU3JjYCBhbmQgYG5nU3Jjc2V0YCB1c2UgdGhpcyBiZWhhdmlvci4KICAgICAqCiAgICAgKiAjIyMjRXNjYXBlZCBJbnRlcnBvbGF0aW9uCiAgICAgKiAkaW50ZXJwb2xhdGUgcHJvdmlkZXMgYSBtZWNoYW5pc20gZm9yIGVzY2FwaW5nIGludGVycG9sYXRpb24gbWFya2Vycy4gU3RhcnQgYW5kIGVuZCBtYXJrZXJzCiAgICAgKiBjYW4gYmUgZXNjYXBlZCBieSBwcmVjZWRpbmcgZWFjaCBvZiB0aGVpciBjaGFyYWN0ZXJzIHdpdGggYSBSRVZFUlNFIFNPTElEVVMgVSswMDVDIChiYWNrc2xhc2gpLgogICAgICogSXQgd2lsbCBiZSByZW5kZXJlZCBhcyBhIHJlZ3VsYXIgc3RhcnQvZW5kIG1hcmtlciwgYW5kIHdpbGwgbm90IGJlIGludGVycHJldGVkIGFzIGFuIGV4cHJlc3Npb24KICAgICAqIG9yIGJpbmRpbmcuCiAgICAgKgogICAgICogVGhpcyBlbmFibGVzIHdlYi1zZXJ2ZXJzIHRvIHByZXZlbnQgc2NyaXB0IGluamVjdGlvbiBhdHRhY2tzIGFuZCBkZWZhY2luZyBhdHRhY2tzLCB0byBzb21lCiAgICAgKiBkZWdyZWUsIHdoaWxlIGFsc28gZW5hYmxpbmcgY29kZSBleGFtcGxlcyB0byB3b3JrIHdpdGhvdXQgcmVseWluZyBvbiB0aGUKICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdOb25CaW5kYWJsZSBuZ05vbkJpbmRhYmxlfSBkaXJlY3RpdmUuCiAgICAgKgogICAgICogKipGb3Igc2VjdXJpdHkgcHVycG9zZXMsIGl0IGlzIHN0cm9uZ2x5IGVuY291cmFnZWQgdGhhdCB3ZWIgc2VydmVycyBlc2NhcGUgdXNlci1zdXBwbGllZCBkYXRhLAogICAgICogcmVwbGFjaW5nIGFuZ2xlIGJyYWNrZXRzICgmbHQ7LCAmZ3Q7KSB3aXRoICZhbXA7bHQ7IGFuZCAmYW1wO2d0OyByZXNwZWN0aXZlbHksIGFuZCByZXBsYWNpbmcgYWxsCiAgICAgKiBpbnRlcnBvbGF0aW9uIHN0YXJ0L2VuZCBtYXJrZXJzIHdpdGggdGhlaXIgZXNjYXBlZCBjb3VudGVycGFydHMuKioKICAgICAqCiAgICAgKiBFc2NhcGVkIGludGVycG9sYXRpb24gbWFya2VycyBhcmUgb25seSByZXBsYWNlZCB3aXRoIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiBtYXJrZXJzIGluIHJlbmRlcmVkCiAgICAgKiBvdXRwdXQgd2hlbiB0aGUgJGludGVycG9sYXRlIHNlcnZpY2UgcHJvY2Vzc2VzIHRoZSB0ZXh0LiBTbywgZm9yIEhUTUwgZWxlbWVudHMgaW50ZXJwb2xhdGVkCiAgICAgKiBieSB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9LCBvciBvdGhlcndpc2UgaW50ZXJwb2xhdGVkIHdpdGggdGhlIGBtdXN0SGF2ZUV4cHJlc3Npb25gIHBhcmFtZXRlcgogICAgICogc2V0IHRvIGB0cnVlYCwgdGhlIGludGVycG9sYXRlZCB0ZXh0IG11c3QgY29udGFpbiBhbiB1bmVzY2FwZWQgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uLiBBcyBzdWNoLAogICAgICogdGhpcyBpcyB0eXBpY2FsbHkgdXNlZnVsIG9ubHkgd2hlbiB1c2VyLWRhdGEgaXMgdXNlZCBpbiByZW5kZXJpbmcgYSB0ZW1wbGF0ZSBmcm9tIHRoZSBzZXJ2ZXIsIG9yCiAgICAgKiB3aGVuIG90aGVyd2lzZSB1bnRydXN0ZWQgZGF0YSBpcyB1c2VkIGJ5IGEgZGlyZWN0aXZlLgogICAgICoKICAgICAqIDxleGFtcGxlPgogICAgICogIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICogICAgPGRpdiBuZy1pbml0PSJ1c2VybmFtZT0nQSB1c2VyJyI+CiAgICAgKiAgICAgIDxwIG5nLWluaXQ9ImFwcHRpdGxlPSdFc2NhcGluZyBkZW1vJyI+e3thcHB0aXRsZX19OiBce1x7IHVzZXJuYW1lID0gImRlZmFjZWQgdmFsdWUiOyBcfVx9CiAgICAgKiAgICAgICAgPC9wPgogICAgICogICAgICA8cD48c3Ryb25nPnt7dXNlcm5hbWV9fTwvc3Ryb25nPiBhdHRlbXB0cyB0byBpbmplY3QgY29kZSB3aGljaCB3aWxsIGRlZmFjZSB0aGUKICAgICAqICAgICAgICBhcHBsaWNhdGlvbiwgYnV0IGZhaWxzIHRvIGFjY29tcGxpc2ggdGhlaXIgdGFzaywgYmVjYXVzZSB0aGUgc2VydmVyIGhhcyBjb3JyZWN0bHkKICAgICAqICAgICAgICBlc2NhcGVkIHRoZSBpbnRlcnBvbGF0aW9uIHN0YXJ0L2VuZCBtYXJrZXJzIHdpdGggUkVWRVJTRSBTT0xJRFVTIFUrMDA1QyAoYmFja3NsYXNoKQogICAgICogICAgICAgIGNoYXJhY3RlcnMuPC9wPgogICAgICogICAgICA8cD5JbnN0ZWFkLCB0aGUgcmVzdWx0IG9mIHRoZSBhdHRlbXB0ZWQgc2NyaXB0IGluamVjdGlvbiBpcyB2aXNpYmxlLCBhbmQgY2FuIGJlIHJlbW92ZWQKICAgICAqICAgICAgICBmcm9tIHRoZSBkYXRhYmFzZSBieSBhbiBhZG1pbmlzdHJhdG9yLjwvcD4KICAgICAqICAgIDwvZGl2PgogICAgICogIDwvZmlsZT4KICAgICAqIDwvZXhhbXBsZT4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB3aXRoIG1hcmt1cCB0byBpbnRlcnBvbGF0ZS4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG11c3RIYXZlRXhwcmVzc2lvbiBpZiBzZXQgdG8gdHJ1ZSB0aGVuIHRoZSBpbnRlcnBvbGF0aW9uIHN0cmluZyBtdXN0IGhhdmUKICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gaW4gb3JkZXIgdG8gcmV0dXJuIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFN0cmluZ3Mgd2l0aCBubwogICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiB3aWxsIHJldHVybiBudWxsIGZvciB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4KICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHJ1c3RlZENvbnRleHQgd2hlbiBwcm92aWRlZCwgdGhlIHJldHVybmVkIGZ1bmN0aW9uIHBhc3NlcyB0aGUgaW50ZXJwb2xhdGVkCiAgICAgKiAgICByZXN1bHQgdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZChpbnRlcnBvbGF0ZWRSZXN1bHQsCiAgICAgKiAgICB0cnVzdGVkQ29udGV4dCl9IGJlZm9yZSByZXR1cm5pbmcgaXQuICBSZWZlciB0byB0aGUge0BsaW5rIG5nLiRzY2UgJHNjZX0gc2VydmljZSB0aGF0CiAgICAgKiAgICBwcm92aWRlcyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBmb3IgZGV0YWlscy4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGFsbE9yTm90aGluZyBpZiBgdHJ1ZWAsIHRoZW4gdGhlIHJldHVybmVkIGZ1bmN0aW9uIHJldHVybnMgdW5kZWZpbmVkCiAgICAgKiAgICB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC4KICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0KX0gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlCiAgICAgKiAgICBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBUaGUgZnVuY3Rpb24gaGFzIHRoZXNlIHBhcmFtZXRlcnM6CiAgICAgKgogICAgICogLSBgY29udGV4dGA6IGV2YWx1YXRpb24gY29udGV4dCBmb3IgYWxsIGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dAogICAgICovCiAgICBmdW5jdGlvbiAkaW50ZXJwb2xhdGUodGV4dCwgbXVzdEhhdmVFeHByZXNzaW9uLCB0cnVzdGVkQ29udGV4dCwgYWxsT3JOb3RoaW5nKSB7CiAgICAgIGFsbE9yTm90aGluZyA9ICEhYWxsT3JOb3RoaW5nOwogICAgICB2YXIgc3RhcnRJbmRleCwKICAgICAgICAgIGVuZEluZGV4LAogICAgICAgICAgaW5kZXggPSAwLAogICAgICAgICAgZXhwcmVzc2lvbnMgPSBbXSwKICAgICAgICAgIHBhcnNlRm5zID0gW10sCiAgICAgICAgICB0ZXh0TGVuZ3RoID0gdGV4dC5sZW5ndGgsCiAgICAgICAgICBleHAsCiAgICAgICAgICBjb25jYXQgPSBbXSwKICAgICAgICAgIGV4cHJlc3Npb25Qb3NpdGlvbnMgPSBbXTsKCiAgICAgIHdoaWxlKGluZGV4IDwgdGV4dExlbmd0aCkgewogICAgICAgIGlmICggKChzdGFydEluZGV4ID0gdGV4dC5pbmRleE9mKHN0YXJ0U3ltYm9sLCBpbmRleCkpICE9IC0xKSAmJgogICAgICAgICAgICAgKChlbmRJbmRleCA9IHRleHQuaW5kZXhPZihlbmRTeW1ib2wsIHN0YXJ0SW5kZXggKyBzdGFydFN5bWJvbExlbmd0aCkpICE9IC0xKSApIHsKICAgICAgICAgIGlmIChpbmRleCAhPT0gc3RhcnRJbmRleCkgewogICAgICAgICAgICBjb25jYXQucHVzaCh1bmVzY2FwZVRleHQodGV4dC5zdWJzdHJpbmcoaW5kZXgsIHN0YXJ0SW5kZXgpKSk7CiAgICAgICAgICB9CiAgICAgICAgICBleHAgPSB0ZXh0LnN1YnN0cmluZyhzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgsIGVuZEluZGV4KTsKICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2goZXhwKTsKICAgICAgICAgIHBhcnNlRm5zLnB1c2goJHBhcnNlKGV4cCwgcGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvcikpOwogICAgICAgICAgaW5kZXggPSBlbmRJbmRleCArIGVuZFN5bWJvbExlbmd0aDsKICAgICAgICAgIGV4cHJlc3Npb25Qb3NpdGlvbnMucHVzaChjb25jYXQubGVuZ3RoKTsKICAgICAgICAgIGNvbmNhdC5wdXNoKCcnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gd2UgZGlkIG5vdCBmaW5kIGFuIGludGVycG9sYXRpb24sIHNvIHdlIGhhdmUgdG8gYWRkIHRoZSByZW1haW5kZXIgdG8gdGhlIHNlcGFyYXRvcnMgYXJyYXkKICAgICAgICAgIGlmIChpbmRleCAhPT0gdGV4dExlbmd0aCkgewogICAgICAgICAgICBjb25jYXQucHVzaCh1bmVzY2FwZVRleHQodGV4dC5zdWJzdHJpbmcoaW5kZXgpKSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIENvbmNhdGVuYXRpbmcgZXhwcmVzc2lvbnMgbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXQgd2hldGhlciBzb21lIGNvbWJpbmF0aW9uIG9mCiAgICAgIC8vIGNvbmNhdGVuYXRlZCB2YWx1ZXMgYXJlIHVuc2FmZSB0byB1c2UgYW5kIGNvdWxkIGVhc2lseSBsZWFkIHRvIFhTUy4gIEJ5IHJlcXVpcmluZyB0aGF0IGEKICAgICAgLy8gc2luZ2xlIGV4cHJlc3Npb24gYmUgdXNlZCBmb3IgaWZyYW1lW3NyY10sIG9iamVjdFtzcmNdLCBldGMuLCB3ZSBlbnN1cmUgdGhhdCB0aGUgdmFsdWUKICAgICAgLy8gdGhhdCdzIHVzZWQgaXMgYXNzaWduZWQgb3IgY29uc3RydWN0ZWQgYnkgc29tZSBKUyBjb2RlIHNvbWV3aGVyZSB0aGF0IGlzIG1vcmUgdGVzdGFibGUgb3IKICAgICAgLy8gbWFrZSBpdCBvYnZpb3VzIHRoYXQgeW91IGJvdW5kIHRoZSB2YWx1ZSB0byBzb21lIHVzZXIgY29udHJvbGxlZCB2YWx1ZS4gIFRoaXMgaGVscHMgcmVkdWNlCiAgICAgIC8vIHRoZSBsb2FkIHdoZW4gYXVkaXRpbmcgZm9yIFhTUyBpc3N1ZXMuCiAgICAgIGlmICh0cnVzdGVkQ29udGV4dCAmJiBjb25jYXQubGVuZ3RoID4gMSkgewogICAgICAgICAgdGhyb3cgJGludGVycG9sYXRlTWluRXJyKCdub2NvbmNhdCcsCiAgICAgICAgICAgICAgIkVycm9yIHdoaWxlIGludGVycG9sYXRpbmc6IHswfVxuU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgZGlzYWxsb3dzICIgKwogICAgICAgICAgICAgICJpbnRlcnBvbGF0aW9ucyB0aGF0IGNvbmNhdGVuYXRlIG11bHRpcGxlIGV4cHJlc3Npb25zIHdoZW4gYSB0cnVzdGVkIHZhbHVlIGlzICIgKwogICAgICAgICAgICAgICJyZXF1aXJlZC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlIiwgdGV4dCk7CiAgICAgIH0KCiAgICAgIGlmICghbXVzdEhhdmVFeHByZXNzaW9uIHx8IGV4cHJlc3Npb25zLmxlbmd0aCkgewogICAgICAgIHZhciBjb21wdXRlID0gZnVuY3Rpb24odmFsdWVzKSB7CiAgICAgICAgICBmb3IodmFyIGkgPSAwLCBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgICAgaWYgKGFsbE9yTm90aGluZyAmJiBpc1VuZGVmaW5lZCh2YWx1ZXNbaV0pKSByZXR1cm47CiAgICAgICAgICAgIGNvbmNhdFtleHByZXNzaW9uUG9zaXRpb25zW2ldXSA9IHZhbHVlc1tpXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBjb25jYXQuam9pbignJyk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGdldFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gdHJ1c3RlZENvbnRleHQgPwogICAgICAgICAgICAkc2NlLmdldFRydXN0ZWQodHJ1c3RlZENvbnRleHQsIHZhbHVlKSA6CiAgICAgICAgICAgICRzY2UudmFsdWVPZih2YWx1ZSk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHsgLy8gbnVsbCB8fCB1bmRlZmluZWQKICAgICAgICAgICAgcmV0dXJuICcnOwogICAgICAgICAgfQogICAgICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHsKICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzogewogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6IHsKICAgICAgICAgICAgICB2YWx1ZSA9ICcnICsgdmFsdWU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGVmYXVsdDogewogICAgICAgICAgICAgIHZhbHVlID0gdG9Kc29uKHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uIGludGVycG9sYXRpb25Gbihjb250ZXh0KSB7CiAgICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgICAgdmFyIGlpID0gZXhwcmVzc2lvbnMubGVuZ3RoOwogICAgICAgICAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGlpKTsKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgZm9yICg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSBwYXJzZUZuc1tpXShjb250ZXh0KTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBjb21wdXRlKHZhbHVlcyk7CiAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7CiAgICAgICAgICAgICAgdmFyIG5ld0VyciA9ICRpbnRlcnBvbGF0ZU1pbkVycignaW50ZXJyJywgIkNhbid0IGludGVycG9sYXRlOiB7MH1cbnsxfSIsIHRleHQsCiAgICAgICAgICAgICAgICAgIGVyci50b1N0cmluZygpKTsKICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihuZXdFcnIpOwogICAgICAgICAgICB9CgogICAgICAgICAgfSwgewogICAgICAgICAgLy8gYWxsIG9mIHRoZXNlIHByb3BlcnRpZXMgYXJlIHVuZG9jdW1lbnRlZCBmb3Igbm93CiAgICAgICAgICBleHA6IHRleHQsIC8vanVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHJlZ3VsYXIgd2F0Y2hlcnMgY3JlYXRlZCB2aWEgJHdhdGNoCiAgICAgICAgICBleHByZXNzaW9uczogZXhwcmVzc2lvbnMsCiAgICAgICAgICAkJHdhdGNoRGVsZWdhdGU6IGZ1bmN0aW9uIChzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KSB7CiAgICAgICAgICAgIHZhciBsYXN0VmFsdWU7CiAgICAgICAgICAgIHJldHVybiBzY29wZS4kd2F0Y2hHcm91cChwYXJzZUZucywgZnVuY3Rpb24gaW50ZXJwb2xhdGVGbldhdGNoZXIodmFsdWVzLCBvbGRWYWx1ZXMpIHsKICAgICAgICAgICAgICB2YXIgY3VyclZhbHVlID0gY29tcHV0ZSh2YWx1ZXMpOwogICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkgewogICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBjdXJyVmFsdWUsIHZhbHVlcyAhPT0gb2xkVmFsdWVzID8gbGFzdFZhbHVlIDogY3VyclZhbHVlLCBzY29wZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGN1cnJWYWx1ZTsKICAgICAgICAgICAgfSwgb2JqZWN0RXF1YWxpdHkpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CgogICAgICBmdW5jdGlvbiB1bmVzY2FwZVRleHQodGV4dCkgewogICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoZXNjYXBlZFN0YXJ0UmVnZXhwLCBzdGFydFN5bWJvbCkuCiAgICAgICAgICByZXBsYWNlKGVzY2FwZWRFbmRSZWdleHAsIGVuZFN5bWJvbCk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHBhcnNlU3RyaW5naWZ5SW50ZXJjZXB0b3IodmFsdWUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgcmV0dXJuIHN0cmluZ2lmeShnZXRWYWx1ZSh2YWx1ZSkpOwogICAgICAgIH0gY2F0Y2goZXJyKSB7CiAgICAgICAgICB2YXIgbmV3RXJyID0gJGludGVycG9sYXRlTWluRXJyKCdpbnRlcnInLCAiQ2FuJ3QgaW50ZXJwb2xhdGU6IHswfVxuezF9IiwgdGV4dCwKICAgICAgICAgICAgZXJyLnRvU3RyaW5nKCkpOwogICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIobmV3RXJyKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjc3RhcnRTeW1ib2wKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC4KICAgICAqCiAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sICRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sfSB0byBjaGFuZ2UKICAgICAqIHRoZSBzeW1ib2wuCiAgICAgKgogICAgICogQHJldHVybnMge3N0cmluZ30gc3RhcnQgc3ltYm9sLgogICAgICovCiAgICAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sOwogICAgfTsKCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjZW5kU3ltYm9sCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLgogICAgICoKICAgICAqIFVzZSB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sICRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbH0gdG8gY2hhbmdlCiAgICAgKiB0aGUgc3ltYm9sLgogICAgICoKICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGVuZCBzeW1ib2wuCiAgICAgKi8KICAgICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2wgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGVuZFN5bWJvbDsKICAgIH07CgogICAgcmV0dXJuICRpbnRlcnBvbGF0ZTsKICB9XTsKfQoKZnVuY3Rpb24gJEludGVydmFsUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyR3aW5kb3cnLCAnJHEnLCAnJCRxJywKICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJHdpbmRvdywgICAkcSwgICAkJHEpIHsKICAgIHZhciBpbnRlcnZhbHMgPSB7fTsKCgogICAgIC8qKgogICAgICAqIEBuZ2RvYyBzZXJ2aWNlCiAgICAgICogQG5hbWUgJGludGVydmFsCiAgICAgICoKICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgKiBBbmd1bGFyJ3Mgd3JhcHBlciBmb3IgYHdpbmRvdy5zZXRJbnRlcnZhbGAuIFRoZSBgZm5gIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGV2ZXJ5IGBkZWxheWAKICAgICAgKiBtaWxsaXNlY29uZHMuCiAgICAgICoKICAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHJlZ2lzdGVyaW5nIGFuIGludGVydmFsIGZ1bmN0aW9uIGlzIGEgcHJvbWlzZS4gVGhpcyBwcm9taXNlIHdpbGwgYmUKICAgICAgKiBub3RpZmllZCB1cG9uIGVhY2ggdGljayBvZiB0aGUgaW50ZXJ2YWwsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIGBjb3VudGAgaXRlcmF0aW9ucywgb3IKICAgICAgKiBydW4gaW5kZWZpbml0ZWx5IGlmIGBjb3VudGAgaXMgbm90IGRlZmluZWQuIFRoZSB2YWx1ZSBvZiB0aGUgbm90aWZpY2F0aW9uIHdpbGwgYmUgdGhlCiAgICAgICogbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdGhhdCBoYXZlIHJ1bi4KICAgICAgKiBUbyBjYW5jZWwgYW4gaW50ZXJ2YWwsIGNhbGwgYCRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSlgLgogICAgICAqCiAgICAgICogSW4gdGVzdHMgeW91IGNhbiB1c2Uge0BsaW5rIG5nTW9jay4kaW50ZXJ2YWwjZmx1c2ggYCRpbnRlcnZhbC5mbHVzaChtaWxsaXMpYH0gdG8KICAgICAgKiBtb3ZlIGZvcndhcmQgYnkgYG1pbGxpc2AgbWlsbGlzZWNvbmRzIGFuZCB0cmlnZ2VyIGFueSBmdW5jdGlvbnMgc2NoZWR1bGVkIHRvIHJ1biBpbiB0aGF0CiAgICAgICogdGltZS4KICAgICAgKgogICAgICAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogICAgICAqICoqTm90ZSoqOiBJbnRlcnZhbHMgY3JlYXRlZCBieSB0aGlzIHNlcnZpY2UgbXVzdCBiZSBleHBsaWNpdGx5IGRlc3Ryb3llZCB3aGVuIHlvdSBhcmUgZmluaXNoZWQKICAgICAgKiB3aXRoIHRoZW0uICBJbiBwYXJ0aWN1bGFyIHRoZXkgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IGRlc3Ryb3llZCB3aGVuIGEgY29udHJvbGxlcidzIHNjb3BlIG9yIGEKICAgICAgKiBkaXJlY3RpdmUncyBlbGVtZW50IGFyZSBkZXN0cm95ZWQuCiAgICAgICogWW91IHNob3VsZCB0YWtlIHRoaXMgaW50byBjb25zaWRlcmF0aW9uIGFuZCBtYWtlIHN1cmUgdG8gYWx3YXlzIGNhbmNlbCB0aGUgaW50ZXJ2YWwgYXQgdGhlCiAgICAgICogYXBwcm9wcmlhdGUgbW9tZW50LiAgU2VlIHRoZSBleGFtcGxlIGJlbG93IGZvciBtb3JlIGRldGFpbHMgb24gaG93IGFuZCB3aGVuIHRvIGRvIHRoaXMuCiAgICAgICogPC9kaXY+CiAgICAgICoKICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgY2FsbGVkIHJlcGVhdGVkbHkuCiAgICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5IE51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiBlYWNoIGZ1bmN0aW9uIGNhbGwuCiAgICAgICogQHBhcmFtIHtudW1iZXI9fSBbY291bnQ9MF0gTnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdC4gSWYgbm90IHNldCwgb3IgMCwgd2lsbCByZXBlYXQKICAgICAgKiAgIGluZGVmaW5pdGVseS4KICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW52b2tlQXBwbHk9dHJ1ZV0gSWYgc2V0IHRvIGBmYWxzZWAgc2tpcHMgbW9kZWwgZGlydHkgY2hlY2tpbmcsIG90aGVyd2lzZQogICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLgogICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2Ugd2hpY2ggd2lsbCBiZSBub3RpZmllZCBvbiBlYWNoIGl0ZXJhdGlvbi4KICAgICAgKgogICAgICAqIEBleGFtcGxlCiAgICAgICogPGV4YW1wbGUgbW9kdWxlPSJpbnRlcnZhbEV4YW1wbGUiPgogICAgICAqIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAqICAgPHNjcmlwdD4KICAgICAgKiAgICAgYW5ndWxhci5tb2R1bGUoJ2ludGVydmFsRXhhbXBsZScsIFtdKQogICAgICAqICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsCiAgICAgICogICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRpbnRlcnZhbCkgewogICAgICAqICAgICAgICAgICAkc2NvcGUuZm9ybWF0ID0gJ00vZC95eSBoOm1tOnNzIGEnOwogICAgICAqICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9IDEwMDsKICAgICAgKiAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAxMjA7CiAgICAgICoKICAgICAgKiAgICAgICAgICAgdmFyIHN0b3A7CiAgICAgICogICAgICAgICAgICRzY29wZS5maWdodCA9IGZ1bmN0aW9uKCkgewogICAgICAqICAgICAgICAgICAgIC8vIERvbid0IHN0YXJ0IGEgbmV3IGZpZ2h0IGlmIHdlIGFyZSBhbHJlYWR5IGZpZ2h0aW5nCiAgICAgICogICAgICAgICAgICAgaWYgKCBhbmd1bGFyLmlzRGVmaW5lZChzdG9wKSApIHJldHVybjsKICAgICAgKgogICAgICAqICAgICAgICAgICBzdG9wID0gJGludGVydmFsKGZ1bmN0aW9uKCkgewogICAgICAqICAgICAgICAgICAgIGlmICgkc2NvcGUuYmxvb2RfMSA+IDAgJiYgJHNjb3BlLmJsb29kXzIgPiAwKSB7CiAgICAgICogICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9ICRzY29wZS5ibG9vZF8xIC0gMzsKICAgICAgKiAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gJHNjb3BlLmJsb29kXzIgLSA0OwogICAgICAqICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICogICAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7CiAgICAgICogICAgICAgICAgICAgfQogICAgICAqICAgICAgICAgICB9LCAxMDApOwogICAgICAqICAgICAgICAgfTsKICAgICAgKgogICAgICAqICAgICAgICAgJHNjb3BlLnN0b3BGaWdodCA9IGZ1bmN0aW9uKCkgewogICAgICAqICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoc3RvcCkpIHsKICAgICAgKiAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHN0b3ApOwogICAgICAqICAgICAgICAgICAgIHN0b3AgPSB1bmRlZmluZWQ7CiAgICAgICogICAgICAgICAgIH0KICAgICAgKiAgICAgICAgIH07CiAgICAgICoKICAgICAgKiAgICAgICAgICRzY29wZS5yZXNldEZpZ2h0ID0gZnVuY3Rpb24oKSB7CiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwOwogICAgICAqICAgICAgICAgICAkc2NvcGUuYmxvb2RfMiA9IDEyMDsKICAgICAgKiAgICAgICAgIH07CiAgICAgICoKICAgICAgKiAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICogICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBpbnRlcnZhbCBpcyBkZXN0cm95ZWQgdG9vCiAgICAgICogICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQoKTsKICAgICAgKiAgICAgICAgIH0pOwogICAgICAqICAgICAgIH1dKQogICAgICAqICAgICAgIC8vIFJlZ2lzdGVyIHRoZSAnbXlDdXJyZW50VGltZScgZGlyZWN0aXZlIGZhY3RvcnkgbWV0aG9kLgogICAgICAqICAgICAgIC8vIFdlIGluamVjdCAkaW50ZXJ2YWwgYW5kIGRhdGVGaWx0ZXIgc2VydmljZSBzaW5jZSB0aGUgZmFjdG9yeSBtZXRob2QgaXMgREkuCiAgICAgICogICAgICAgLmRpcmVjdGl2ZSgnbXlDdXJyZW50VGltZScsIFsnJGludGVydmFsJywgJ2RhdGVGaWx0ZXInLAogICAgICAqICAgICAgICAgZnVuY3Rpb24oJGludGVydmFsLCBkYXRlRmlsdGVyKSB7CiAgICAgICogICAgICAgICAgIC8vIHJldHVybiB0aGUgZGlyZWN0aXZlIGxpbmsgZnVuY3Rpb24uIChjb21waWxlIGZ1bmN0aW9uIG5vdCBuZWVkZWQpCiAgICAgICogICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHsKICAgICAgKiAgICAgICAgICAgICB2YXIgZm9ybWF0LCAgLy8gZGF0ZSBmb3JtYXQKICAgICAgKiAgICAgICAgICAgICAgICAgc3RvcFRpbWU7IC8vIHNvIHRoYXQgd2UgY2FuIGNhbmNlbCB0aGUgdGltZSB1cGRhdGVzCiAgICAgICoKICAgICAgKiAgICAgICAgICAgICAvLyB1c2VkIHRvIHVwZGF0ZSB0aGUgVUkKICAgICAgKiAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVUaW1lKCkgewogICAgICAqICAgICAgICAgICAgICAgZWxlbWVudC50ZXh0KGRhdGVGaWx0ZXIobmV3IERhdGUoKSwgZm9ybWF0KSk7CiAgICAgICogICAgICAgICAgICAgfQogICAgICAqCiAgICAgICogICAgICAgICAgICAgLy8gd2F0Y2ggdGhlIGV4cHJlc3Npb24sIGFuZCB1cGRhdGUgdGhlIFVJIG9uIGNoYW5nZS4KICAgICAgKiAgICAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0cnMubXlDdXJyZW50VGltZSwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgKiAgICAgICAgICAgICAgIGZvcm1hdCA9IHZhbHVlOwogICAgICAqICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpOwogICAgICAqICAgICAgICAgICAgIH0pOwogICAgICAqCiAgICAgICogICAgICAgICAgICAgc3RvcFRpbWUgPSAkaW50ZXJ2YWwodXBkYXRlVGltZSwgMTAwMCk7CiAgICAgICoKICAgICAgKiAgICAgICAgICAgICAvLyBsaXN0ZW4gb24gRE9NIGRlc3Ryb3kgKHJlbW92YWwpIGV2ZW50LCBhbmQgY2FuY2VsIHRoZSBuZXh0IFVJIHVwZGF0ZQogICAgICAqICAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdXBkYXRpbmcgdGltZSBhZnRlciB0aGUgRE9NIGVsZW1lbnQgd2FzIHJlbW92ZWQuCiAgICAgICogICAgICAgICAgICAgZWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgKiAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoc3RvcFRpbWUpOwogICAgICAqICAgICAgICAgICAgIH0pOwogICAgICAqICAgICAgICAgICB9CiAgICAgICogICAgICAgICB9XSk7CiAgICAgICogICA8L3NjcmlwdD4KICAgICAgKgogICAgICAqICAgPGRpdj4KICAgICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICogICAgICAgRGF0ZSBmb3JtYXQ6IDxpbnB1dCBuZy1tb2RlbD0iZm9ybWF0Ij4gPGhyLz4KICAgICAgKiAgICAgICBDdXJyZW50IHRpbWUgaXM6IDxzcGFuIG15LWN1cnJlbnQtdGltZT0iZm9ybWF0Ij48L3NwYW4+CiAgICAgICogICAgICAgPGhyLz4KICAgICAgKiAgICAgICBCbG9vZCAxIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8xfX08L2ZvbnQ+CiAgICAgICogICAgICAgQmxvb2QgMiA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMn19PC9mb250PgogICAgICAqICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBkYXRhLW5nLWNsaWNrPSJmaWdodCgpIj5GaWdodDwvYnV0dG9uPgogICAgICAqICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBkYXRhLW5nLWNsaWNrPSJzdG9wRmlnaHQoKSI+U3RvcEZpZ2h0PC9idXR0b24+CiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGRhdGEtbmctY2xpY2s9InJlc2V0RmlnaHQoKSI+cmVzZXRGaWdodDwvYnV0dG9uPgogICAgICAqICAgICA8L2Rpdj4KICAgICAgKiAgIDwvZGl2PgogICAgICAqCiAgICAgICogPC9maWxlPgogICAgICAqIDwvZXhhbXBsZT4KICAgICAgKi8KICAgIGZ1bmN0aW9uIGludGVydmFsKGZuLCBkZWxheSwgY291bnQsIGludm9rZUFwcGx5KSB7CiAgICAgIHZhciBzZXRJbnRlcnZhbCA9ICR3aW5kb3cuc2V0SW50ZXJ2YWwsCiAgICAgICAgICBjbGVhckludGVydmFsID0gJHdpbmRvdy5jbGVhckludGVydmFsLAogICAgICAgICAgaXRlcmF0aW9uID0gMCwKICAgICAgICAgIHNraXBBcHBseSA9IChpc0RlZmluZWQoaW52b2tlQXBwbHkpICYmICFpbnZva2VBcHBseSksCiAgICAgICAgICBkZWZlcnJlZCA9IChza2lwQXBwbHkgPyAkJHEgOiAkcSkuZGVmZXIoKSwKICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlOwoKICAgICAgY291bnQgPSBpc0RlZmluZWQoY291bnQpID8gY291bnQgOiAwOwoKICAgICAgcHJvbWlzZS50aGVuKG51bGwsIG51bGwsIGZuKTsKCiAgICAgIHByb21pc2UuJCRpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gdGljaygpIHsKICAgICAgICBkZWZlcnJlZC5ub3RpZnkoaXRlcmF0aW9uKyspOwoKICAgICAgICBpZiAoY291bnQgPiAwICYmIGl0ZXJhdGlvbiA+PSBjb3VudCkgewogICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShpdGVyYXRpb24pOwogICAgICAgICAgY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7CiAgICAgICAgICBkZWxldGUgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXTsKICAgICAgICB9CgogICAgICAgIGlmICghc2tpcEFwcGx5KSAkcm9vdFNjb3BlLiRhcHBseSgpOwoKICAgICAgfSwgZGVsYXkpOwoKICAgICAgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXSA9IGRlZmVycmVkOwoKICAgICAgcmV0dXJuIHByb21pc2U7CiAgICB9CgoKICAgICAvKioKICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICogQG5hbWUgJGludGVydmFsI2NhbmNlbAogICAgICAqCiAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuCiAgICAgICoKICAgICAgKiBAcGFyYW0ge3Byb21pc2V9IHByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkaW50ZXJ2YWxgIGZ1bmN0aW9uLgogICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFzayB3YXMgc3VjY2Vzc2Z1bGx5IGNhbmNlbGVkLgogICAgICAqLwogICAgaW50ZXJ2YWwuY2FuY2VsID0gZnVuY3Rpb24ocHJvbWlzZSkgewogICAgICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLiQkaW50ZXJ2YWxJZCBpbiBpbnRlcnZhbHMpIHsKICAgICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdLnJlamVjdCgnY2FuY2VsZWQnKTsKICAgICAgICAkd2luZG93LmNsZWFySW50ZXJ2YWwocHJvbWlzZS4kJGludGVydmFsSWQpOwogICAgICAgIGRlbGV0ZSBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CgogICAgcmV0dXJuIGludGVydmFsOwogIH1dOwp9CgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJGxvY2FsZQogKgogKiBAZGVzY3JpcHRpb24KICogJGxvY2FsZSBzZXJ2aWNlIHByb3ZpZGVzIGxvY2FsaXphdGlvbiBydWxlcyBmb3IgdmFyaW91cyBBbmd1bGFyIGNvbXBvbmVudHMuIEFzIG9mIHJpZ2h0IG5vdyB0aGUKICogb25seSBwdWJsaWMgYXBpIGlzOgogKgogKiAqIGBpZGAg4oCTIGB7c3RyaW5nfWAg4oCTIGxvY2FsZSBpZCBmb3JtYXR0ZWQgYXMgYGxhbmd1YWdlSWQtY291bnRyeUlkYCAoZS5nLiBgZW4tdXNgKQogKi8KZnVuY3Rpb24gJExvY2FsZVByb3ZpZGVyKCl7CiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBpZDogJ2VuLXVzJywKCiAgICAgIE5VTUJFUl9GT1JNQVRTOiB7CiAgICAgICAgREVDSU1BTF9TRVA6ICcuJywKICAgICAgICBHUk9VUF9TRVA6ICcsJywKICAgICAgICBQQVRURVJOUzogWwogICAgICAgICAgeyAvLyBEZWNpbWFsIFBhdHRlcm4KICAgICAgICAgICAgbWluSW50OiAxLAogICAgICAgICAgICBtaW5GcmFjOiAwLAogICAgICAgICAgICBtYXhGcmFjOiAzLAogICAgICAgICAgICBwb3NQcmU6ICcnLAogICAgICAgICAgICBwb3NTdWY6ICcnLAogICAgICAgICAgICBuZWdQcmU6ICctJywKICAgICAgICAgICAgbmVnU3VmOiAnJywKICAgICAgICAgICAgZ1NpemU6IDMsCiAgICAgICAgICAgIGxnU2l6ZTogMwogICAgICAgICAgfSx7IC8vQ3VycmVuY3kgUGF0dGVybgogICAgICAgICAgICBtaW5JbnQ6IDEsCiAgICAgICAgICAgIG1pbkZyYWM6IDIsCiAgICAgICAgICAgIG1heEZyYWM6IDIsCiAgICAgICAgICAgIHBvc1ByZTogJ1x1MDBBNCcsCiAgICAgICAgICAgIHBvc1N1ZjogJycsCiAgICAgICAgICAgIG5lZ1ByZTogJyhcdTAwQTQnLAogICAgICAgICAgICBuZWdTdWY6ICcpJywKICAgICAgICAgICAgZ1NpemU6IDMsCiAgICAgICAgICAgIGxnU2l6ZTogMwogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgQ1VSUkVOQ1lfU1lNOiAnJCcKICAgICAgfSwKCiAgICAgIERBVEVUSU1FX0ZPUk1BVFM6IHsKICAgICAgICBNT05USDoKICAgICAgICAgICAgJ0phbnVhcnksRmVicnVhcnksTWFyY2gsQXByaWwsTWF5LEp1bmUsSnVseSxBdWd1c3QsU2VwdGVtYmVyLE9jdG9iZXIsTm92ZW1iZXIsRGVjZW1iZXInCiAgICAgICAgICAgIC5zcGxpdCgnLCcpLAogICAgICAgIFNIT1JUTU9OVEg6ICAnSmFuLEZlYixNYXIsQXByLE1heSxKdW4sSnVsLEF1ZyxTZXAsT2N0LE5vdixEZWMnLnNwbGl0KCcsJyksCiAgICAgICAgREFZOiAnU3VuZGF5LE1vbmRheSxUdWVzZGF5LFdlZG5lc2RheSxUaHVyc2RheSxGcmlkYXksU2F0dXJkYXknLnNwbGl0KCcsJyksCiAgICAgICAgU0hPUlREQVk6ICdTdW4sTW9uLFR1ZSxXZWQsVGh1LEZyaSxTYXQnLnNwbGl0KCcsJyksCiAgICAgICAgQU1QTVM6IFsnQU0nLCdQTSddLAogICAgICAgIG1lZGl1bTogJ01NTSBkLCB5IGg6bW06c3MgYScsCiAgICAgICAgc2hvcnQ6ICdNL2QveXkgaDptbSBhJywKICAgICAgICBmdWxsRGF0ZTogJ0VFRUUsIE1NTU0gZCwgeScsCiAgICAgICAgbG9uZ0RhdGU6ICdNTU1NIGQsIHknLAogICAgICAgIG1lZGl1bURhdGU6ICdNTU0gZCwgeScsCiAgICAgICAgc2hvcnREYXRlOiAnTS9kL3l5JywKICAgICAgICBtZWRpdW1UaW1lOiAnaDptbTpzcyBhJywKICAgICAgICBzaG9ydFRpbWU6ICdoOm1tIGEnCiAgICAgIH0sCgogICAgICBwbHVyYWxDYXQ6IGZ1bmN0aW9uKG51bSkgewogICAgICAgIGlmIChudW0gPT09IDEpIHsKICAgICAgICAgIHJldHVybiAnb25lJzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICdvdGhlcic7CiAgICAgIH0KICAgIH07CiAgfTsKfQoKdmFyIFBBVEhfTUFUQ0ggPSAvXihbXlw/I10qKShcPyhbXiNdKikpPygjKC4qKSk/JC8sCiAgICBERUZBVUxUX1BPUlRTID0geydodHRwJzogODAsICdodHRwcyc6IDQ0MywgJ2Z0cCc6IDIxfTsKdmFyICRsb2NhdGlvbk1pbkVyciA9IG1pbkVycignJGxvY2F0aW9uJyk7CgoKLyoqCiAqIEVuY29kZSBwYXRoIHVzaW5nIGVuY29kZVVyaVNlZ21lbnQsIGlnbm9yaW5nIGZvcndhcmQgc2xhc2hlcwogKgogKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIGVuY29kZQogKiBAcmV0dXJucyB7c3RyaW5nfQogKi8KZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7CiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLycpLAogICAgICBpID0gc2VnbWVudHMubGVuZ3RoOwoKICB3aGlsZSAoaS0tKSB7CiAgICBzZWdtZW50c1tpXSA9IGVuY29kZVVyaVNlZ21lbnQoc2VnbWVudHNbaV0pOwogIH0KCiAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJy8nKTsKfQoKZnVuY3Rpb24gcGFyc2VBYnNvbHV0ZVVybChhYnNvbHV0ZVVybCwgbG9jYXRpb25PYmosIGFwcEJhc2UpIHsKICB2YXIgcGFyc2VkVXJsID0gdXJsUmVzb2x2ZShhYnNvbHV0ZVVybCwgYXBwQmFzZSk7CgogIGxvY2F0aW9uT2JqLiQkcHJvdG9jb2wgPSBwYXJzZWRVcmwucHJvdG9jb2w7CiAgbG9jYXRpb25PYmouJCRob3N0ID0gcGFyc2VkVXJsLmhvc3RuYW1lOwogIGxvY2F0aW9uT2JqLiQkcG9ydCA9IGludChwYXJzZWRVcmwucG9ydCkgfHwgREVGQVVMVF9QT1JUU1twYXJzZWRVcmwucHJvdG9jb2xdIHx8IG51bGw7Cn0KCgpmdW5jdGlvbiBwYXJzZUFwcFVybChyZWxhdGl2ZVVybCwgbG9jYXRpb25PYmosIGFwcEJhc2UpIHsKICB2YXIgcHJlZml4ZWQgPSAocmVsYXRpdmVVcmwuY2hhckF0KDApICE9PSAnLycpOwogIGlmIChwcmVmaXhlZCkgewogICAgcmVsYXRpdmVVcmwgPSAnLycgKyByZWxhdGl2ZVVybDsKICB9CiAgdmFyIG1hdGNoID0gdXJsUmVzb2x2ZShyZWxhdGl2ZVVybCwgYXBwQmFzZSk7CiAgbG9jYXRpb25PYmouJCRwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KHByZWZpeGVkICYmIG1hdGNoLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nID8KICAgICAgbWF0Y2gucGF0aG5hbWUuc3Vic3RyaW5nKDEpIDogbWF0Y2gucGF0aG5hbWUpOwogIGxvY2F0aW9uT2JqLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShtYXRjaC5zZWFyY2gpOwogIGxvY2F0aW9uT2JqLiQkaGFzaCA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5oYXNoKTsKCiAgLy8gbWFrZSBzdXJlIHBhdGggc3RhcnRzIHdpdGggJy8nOwogIGlmIChsb2NhdGlvbk9iai4kJHBhdGggJiYgbG9jYXRpb25PYmouJCRwYXRoLmNoYXJBdCgwKSAhPSAnLycpIHsKICAgIGxvY2F0aW9uT2JqLiQkcGF0aCA9ICcvJyArIGxvY2F0aW9uT2JqLiQkcGF0aDsKICB9Cn0KCgovKioKICoKICogQHBhcmFtIHtzdHJpbmd9IGJlZ2luCiAqIEBwYXJhbSB7c3RyaW5nfSB3aG9sZQogKiBAcmV0dXJucyB7c3RyaW5nfSByZXR1cm5zIHRleHQgZnJvbSB3aG9sZSBhZnRlciBiZWdpbiBvciB1bmRlZmluZWQgaWYgaXQgZG9lcyBub3QgYmVnaW4gd2l0aAogKiAgICAgICAgICAgICAgICAgICBleHBlY3RlZCBzdHJpbmcuCiAqLwpmdW5jdGlvbiBiZWdpbnNXaXRoKGJlZ2luLCB3aG9sZSkgewogIGlmICh3aG9sZS5pbmRleE9mKGJlZ2luKSA9PT0gMCkgewogICAgcmV0dXJuIHdob2xlLnN1YnN0cihiZWdpbi5sZW5ndGgpOwogIH0KfQoKCmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHsKICB2YXIgaW5kZXggPSB1cmwuaW5kZXhPZignIycpOwogIHJldHVybiBpbmRleCA9PSAtMSA/IHVybCA6IHVybC5zdWJzdHIoMCwgaW5kZXgpOwp9CgoKZnVuY3Rpb24gc3RyaXBGaWxlKHVybCkgewogIHJldHVybiB1cmwuc3Vic3RyKDAsIHN0cmlwSGFzaCh1cmwpLmxhc3RJbmRleE9mKCcvJykgKyAxKTsKfQoKLyogcmV0dXJuIHRoZSBzZXJ2ZXIgb25seSAoc2NoZW1lOi8vaG9zdDpwb3J0KSAqLwpmdW5jdGlvbiBzZXJ2ZXJCYXNlKHVybCkgewogIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCcvJywgdXJsLmluZGV4T2YoJy8vJykgKyAyKSk7Cn0KCgovKioKICogTG9jYXRpb25IdG1sNVVybCByZXByZXNlbnRzIGFuIHVybAogKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gSFRNTDUgbW9kZSBpcyBlbmFibGVkIGFuZCBzdXBwb3J0ZWQKICoKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMCiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUHJlZml4IHVybCBwYXRoIHByZWZpeAogKi8KZnVuY3Rpb24gTG9jYXRpb25IdG1sNVVybChhcHBCYXNlLCBiYXNlUHJlZml4KSB7CiAgdGhpcy4kJGh0bWw1ID0gdHJ1ZTsKICBiYXNlUHJlZml4ID0gYmFzZVByZWZpeCB8fCAnJzsKICB2YXIgYXBwQmFzZU5vRmlsZSA9IHN0cmlwRmlsZShhcHBCYXNlKTsKICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMsIGFwcEJhc2UpOwoKCiAgLyoqCiAgICogUGFyc2UgZ2l2ZW4gaHRtbDUgKHJlZ3VsYXIpIHVybCBzdHJpbmcgaW50byBwcm9wZXJ0aWVzCiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0Fic29sdXRlVXJsIEhUTUw1IHVybAogICAqIEBwcml2YXRlCiAgICovCiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7CiAgICB2YXIgcGF0aFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKTsKICAgIGlmICghaXNTdHJpbmcocGF0aFVybCkpIHsKICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpcHRocHJmeCcsICdJbnZhbGlkIHVybCAiezB9IiwgbWlzc2luZyBwYXRoIHByZWZpeCAiezF9Ii4nLCB1cmwsCiAgICAgICAgICBhcHBCYXNlTm9GaWxlKTsKICAgIH0KCiAgICBwYXJzZUFwcFVybChwYXRoVXJsLCB0aGlzLCBhcHBCYXNlKTsKCiAgICBpZiAoIXRoaXMuJCRwYXRoKSB7CiAgICAgIHRoaXMuJCRwYXRoID0gJy8nOwogICAgfQoKICAgIHRoaXMuJCRjb21wb3NlKCk7CiAgfTsKCiAgLyoqCiAgICogQ29tcG9zZSB1cmwgYW5kIHVwZGF0ZSBgYWJzVXJsYCBwcm9wZXJ0eQogICAqIEBwcml2YXRlCiAgICovCiAgdGhpcy4kJGNvbXBvc2UgPSBmdW5jdGlvbigpIHsKICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLAogICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7CgogICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7CiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZU5vRmlsZSArIHRoaXMuJCR1cmwuc3Vic3RyKDEpOyAvLyBmaXJzdCBjaGFyIGlzIGFsd2F5cyAnLycKICB9OwoKICB0aGlzLiQkcmV3cml0ZSA9IGZ1bmN0aW9uKHVybCkgewogICAgdmFyIGFwcFVybCwgcHJldkFwcFVybDsKCiAgICBpZiAoIChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2UsIHVybCkpICE9PSB1bmRlZmluZWQgKSB7CiAgICAgIHByZXZBcHBVcmwgPSBhcHBVcmw7CiAgICAgIGlmICggKGFwcFVybCA9IGJlZ2luc1dpdGgoYmFzZVByZWZpeCwgYXBwVXJsKSkgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICByZXR1cm4gYXBwQmFzZU5vRmlsZSArIChiZWdpbnNXaXRoKCcvJywgYXBwVXJsKSB8fCBhcHBVcmwpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBhcHBCYXNlICsgcHJldkFwcFVybDsKICAgICAgfQogICAgfSBlbHNlIGlmICggKGFwcFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKSkgIT09IHVuZGVmaW5lZCApIHsKICAgICAgcmV0dXJuIGFwcEJhc2VOb0ZpbGUgKyBhcHBVcmw7CiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT0gdXJsICsgJy8nKSB7CiAgICAgIHJldHVybiBhcHBCYXNlTm9GaWxlOwogICAgfQogIH07Cn0KCgovKioKICogTG9jYXRpb25IYXNoYmFuZ1VybCByZXByZXNlbnRzIHVybAogKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gZGV2ZWxvcGVyIGRvZXNuJ3Qgb3B0IGludG8gaHRtbDUgbW9kZS4KICogSXQgYWxzbyBzZXJ2ZXMgYXMgdGhlIGJhc2UgY2xhc3MgZm9yIGh0bWw1IG1vZGUgZmFsbGJhY2sgb24gbGVnYWN5IGJyb3dzZXJzLgogKgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkwKICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4CiAqLwpmdW5jdGlvbiBMb2NhdGlvbkhhc2hiYW5nVXJsKGFwcEJhc2UsIGhhc2hQcmVmaXgpIHsKICB2YXIgYXBwQmFzZU5vRmlsZSA9IHN0cmlwRmlsZShhcHBCYXNlKTsKCiAgcGFyc2VBYnNvbHV0ZVVybChhcHBCYXNlLCB0aGlzLCBhcHBCYXNlKTsKCgogIC8qKgogICAqIFBhcnNlIGdpdmVuIGhhc2hiYW5nIHVybCBpbnRvIHByb3BlcnRpZXMKICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEhhc2hiYW5nIHVybAogICAqIEBwcml2YXRlCiAgICovCiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7CiAgICB2YXIgd2l0aG91dEJhc2VVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2UsIHVybCkgfHwgYmVnaW5zV2l0aChhcHBCYXNlTm9GaWxlLCB1cmwpOwogICAgdmFyIHdpdGhvdXRIYXNoVXJsID0gd2l0aG91dEJhc2VVcmwuY2hhckF0KDApID09ICcjJwogICAgICAgID8gYmVnaW5zV2l0aChoYXNoUHJlZml4LCB3aXRob3V0QmFzZVVybCkKICAgICAgICA6ICh0aGlzLiQkaHRtbDUpCiAgICAgICAgICA/IHdpdGhvdXRCYXNlVXJsCiAgICAgICAgICA6ICcnOwoKICAgIGlmICghaXNTdHJpbmcod2l0aG91dEhhc2hVcmwpKSB7CiAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignaWhzaHByZngnLCAnSW52YWxpZCB1cmwgInswfSIsIG1pc3NpbmcgaGFzaCBwcmVmaXggInsxfSIuJywgdXJsLAogICAgICAgICAgaGFzaFByZWZpeCk7CiAgICB9CiAgICBwYXJzZUFwcFVybCh3aXRob3V0SGFzaFVybCwgdGhpcywgYXBwQmFzZSk7CgogICAgdGhpcy4kJHBhdGggPSByZW1vdmVXaW5kb3dzRHJpdmVOYW1lKHRoaXMuJCRwYXRoLCB3aXRob3V0SGFzaFVybCwgYXBwQmFzZSk7CgogICAgdGhpcy4kJGNvbXBvc2UoKTsKCiAgICAvKgogICAgICogSW4gV2luZG93cywgb24gYW4gYW5jaG9yIG5vZGUgb24gZG9jdW1lbnRzIGxvYWRlZCBmcm9tCiAgICAgKiB0aGUgZmlsZXN5c3RlbSwgdGhlIGJyb3dzZXIgd2lsbCByZXR1cm4gYSBwYXRobmFtZQogICAgICogcHJlZml4ZWQgd2l0aCB0aGUgZHJpdmUgbmFtZSAoJy9DOi9wYXRoJykgd2hlbiBhCiAgICAgKiBwYXRobmFtZSB3aXRob3V0IGEgZHJpdmUgaXMgc2V0OgogICAgICogICogYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnL2ZvbycpCiAgICAgKiAgICogYS5wYXRobmFtZSA9PT0gJy9DOi9mb28nIC8vdHJ1ZQogICAgICoKICAgICAqIEluc2lkZSBvZiBBbmd1bGFyLCB3ZSdyZSBhbHdheXMgdXNpbmcgcGF0aG5hbWVzIHRoYXQKICAgICAqIGRvIG5vdCBpbmNsdWRlIGRyaXZlIG5hbWVzIGZvciByb3V0aW5nLgogICAgICovCiAgICBmdW5jdGlvbiByZW1vdmVXaW5kb3dzRHJpdmVOYW1lIChwYXRoLCB1cmwsIGJhc2UpIHsKICAgICAgLyoKICAgICAgTWF0Y2hlcyBwYXRocyBmb3IgZmlsZSBwcm90b2NvbCBvbiB3aW5kb3dzLAogICAgICBzdWNoIGFzIC9DOi9mb28vYmFyLCBhbmQgY2FwdHVyZXMgb25seSAvZm9vL2Jhci4KICAgICAgKi8KICAgICAgdmFyIHdpbmRvd3NGaWxlUGF0aEV4cCA9IC9eXC9bQS1aXTooXC8uKikvOwoKICAgICAgdmFyIGZpcnN0UGF0aFNlZ21lbnRNYXRjaDsKCiAgICAgIC8vR2V0IHRoZSByZWxhdGl2ZSBwYXRoIGZyb20gdGhlIGlucHV0IFVSTC4KICAgICAgaWYgKHVybC5pbmRleE9mKGJhc2UpID09PSAwKSB7CiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoYmFzZSwgJycpOwogICAgICB9CgogICAgICAvLyBUaGUgaW5wdXQgVVJMIGludGVudGlvbmFsbHkgY29udGFpbnMgYSBmaXJzdCBwYXRoIHNlZ21lbnQgdGhhdCBlbmRzIHdpdGggYSBjb2xvbi4KICAgICAgaWYgKHdpbmRvd3NGaWxlUGF0aEV4cC5leGVjKHVybCkpIHsKICAgICAgICByZXR1cm4gcGF0aDsKICAgICAgfQoKICAgICAgZmlyc3RQYXRoU2VnbWVudE1hdGNoID0gd2luZG93c0ZpbGVQYXRoRXhwLmV4ZWMocGF0aCk7CiAgICAgIHJldHVybiBmaXJzdFBhdGhTZWdtZW50TWF0Y2ggPyBmaXJzdFBhdGhTZWdtZW50TWF0Y2hbMV0gOiBwYXRoOwogICAgfQogIH07CgogIC8qKgogICAqIENvbXBvc2UgaGFzaGJhbmcgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHkKICAgKiBAcHJpdmF0ZQogICAqLwogIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSwKICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnOwoKICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoOwogICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2UgKyAodGhpcy4kJHVybCA/IGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsIDogJycpOwogIH07CgogIHRoaXMuJCRyZXdyaXRlID0gZnVuY3Rpb24odXJsKSB7CiAgICBpZihzdHJpcEhhc2goYXBwQmFzZSkgPT0gc3RyaXBIYXNoKHVybCkpIHsKICAgICAgcmV0dXJuIHVybDsKICAgIH0KICB9Owp9CgoKLyoqCiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyB1cmwKICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIGh0bWw1IGhpc3RvcnkgYXBpIGlzIGVuYWJsZWQgYnV0IHRoZSBicm93c2VyCiAqIGRvZXMgbm90IHN1cHBvcnQgaXQuCiAqCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTAogKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXgKICovCmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsKGFwcEJhc2UsIGhhc2hQcmVmaXgpIHsKICB0aGlzLiQkaHRtbDUgPSB0cnVlOwogIExvY2F0aW9uSGFzaGJhbmdVcmwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCiAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7CgogIHRoaXMuJCRyZXdyaXRlID0gZnVuY3Rpb24odXJsKSB7CiAgICB2YXIgYXBwVXJsOwoKICAgIGlmICggYXBwQmFzZSA9PSBzdHJpcEhhc2godXJsKSApIHsKICAgICAgcmV0dXJuIHVybDsKICAgIH0gZWxzZSBpZiAoIChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpICkgewogICAgICByZXR1cm4gYXBwQmFzZSArIGhhc2hQcmVmaXggKyBhcHBVcmw7CiAgICB9IGVsc2UgaWYgKCBhcHBCYXNlTm9GaWxlID09PSB1cmwgKyAnLycpIHsKICAgICAgcmV0dXJuIGFwcEJhc2VOb0ZpbGU7CiAgICB9CiAgfTsKCiAgdGhpcy4kJGNvbXBvc2UgPSBmdW5jdGlvbigpIHsKICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLAogICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7CgogICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7CiAgICAvLyBpbmNsdWRlIGhhc2hQcmVmaXggaW4gJCRhYnNVcmwgd2hlbiAkJHVybCBpcyBlbXB0eSBzbyBJRTggJiA5IGRvIG5vdCByZWxvYWQgcGFnZSBiZWNhdXNlIG9mIHJlbW92YWwgb2YgJyMnCiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArIGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsOwogIH07Cgp9CgoKTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwucHJvdG90eXBlID0KICBMb2NhdGlvbkhhc2hiYW5nVXJsLnByb3RvdHlwZSA9CiAgTG9jYXRpb25IdG1sNVVybC5wcm90b3R5cGUgPSB7CgogIC8qKgogICAqIEFyZSB3ZSBpbiBodG1sNSBtb2RlPwogICAqIEBwcml2YXRlCiAgICovCiAgJCRodG1sNTogZmFsc2UsCgogIC8qKgogICAqIEhhcyBhbnkgY2hhbmdlIGJlZW4gcmVwbGFjaW5nID8KICAgKiBAcHJpdmF0ZQogICAqLwogICQkcmVwbGFjZTogZmFsc2UsCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkbG9jYXRpb24jYWJzVXJsCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS4KICAgKgogICAqIFJldHVybiBmdWxsIHVybCByZXByZXNlbnRhdGlvbiB3aXRoIGFsbCBzZWdtZW50cyBlbmNvZGVkIGFjY29yZGluZyB0byBydWxlcyBzcGVjaWZpZWQgaW4KICAgKiBbUkZDIDM5ODZdKGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0KS4KICAgKgogICAqIEByZXR1cm4ge3N0cmluZ30gZnVsbCB1cmwKICAgKi8KICBhYnNVcmw6IGxvY2F0aW9uR2V0dGVyKCckJGFic1VybCcpLAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGxvY2F0aW9uI3VybAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLgogICAqCiAgICogUmV0dXJuIHVybCAoZS5nLiBgL3BhdGg/YT1iI2hhc2hgKSB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuCiAgICoKICAgKiBDaGFuZ2UgcGF0aCwgc2VhcmNoIGFuZCBoYXNoLCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmc9fSB1cmwgTmV3IHVybCB3aXRob3V0IGJhc2UgcHJlZml4IChlLmcuIGAvcGF0aD9hPWIjaGFzaGApCiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXBsYWNlIFRoZSBwYXRoIHRoYXQgd2lsbCBiZSBjaGFuZ2VkCiAgICogQHJldHVybiB7c3RyaW5nfSB1cmwKICAgKi8KICB1cmw6IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSkgewogICAgaWYgKGlzVW5kZWZpbmVkKHVybCkpCiAgICAgIHJldHVybiB0aGlzLiQkdXJsOwoKICAgIHZhciBtYXRjaCA9IFBBVEhfTUFUQ0guZXhlYyh1cmwpOwogICAgaWYgKG1hdGNoWzFdKSB0aGlzLnBhdGgoZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzFdKSk7CiAgICBpZiAobWF0Y2hbMl0gfHwgbWF0Y2hbMV0pIHRoaXMuc2VhcmNoKG1hdGNoWzNdIHx8ICcnKTsKICAgIHRoaXMuaGFzaChtYXRjaFs1XSB8fCAnJywgcmVwbGFjZSk7CgogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRsb2NhdGlvbiNwcm90b2NvbAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuCiAgICoKICAgKiBSZXR1cm4gcHJvdG9jb2wgb2YgY3VycmVudCB1cmwuCiAgICoKICAgKiBAcmV0dXJuIHtzdHJpbmd9IHByb3RvY29sIG9mIGN1cnJlbnQgdXJsCiAgICovCiAgcHJvdG9jb2w6IGxvY2F0aW9uR2V0dGVyKCckJHByb3RvY29sJyksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkbG9jYXRpb24jaG9zdAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuCiAgICoKICAgKiBSZXR1cm4gaG9zdCBvZiBjdXJyZW50IHVybC4KICAgKgogICAqIEByZXR1cm4ge3N0cmluZ30gaG9zdCBvZiBjdXJyZW50IHVybC4KICAgKi8KICBob3N0OiBsb2NhdGlvbkdldHRlcignJCRob3N0JyksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkbG9jYXRpb24jcG9ydAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuCiAgICoKICAgKiBSZXR1cm4gcG9ydCBvZiBjdXJyZW50IHVybC4KICAgKgogICAqIEByZXR1cm4ge051bWJlcn0gcG9ydAogICAqLwogIHBvcnQ6IGxvY2F0aW9uR2V0dGVyKCckJHBvcnQnKSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRsb2NhdGlvbiNwYXRoCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuCiAgICoKICAgKiBSZXR1cm4gcGF0aCBvZiBjdXJyZW50IHVybCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuCiAgICoKICAgKiBDaGFuZ2UgcGF0aCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLgogICAqCiAgICogTm90ZTogUGF0aCBzaG91bGQgYWx3YXlzIGJlZ2luIHdpdGggZm9yd2FyZCBzbGFzaCAoLyksIHRoaXMgbWV0aG9kIHdpbGwgYWRkIHRoZSBmb3J3YXJkIHNsYXNoCiAgICogaWYgaXQgaXMgbWlzc2luZy4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0aCBOZXcgcGF0aAogICAqIEByZXR1cm4ge3N0cmluZ30gcGF0aAogICAqLwogIHBhdGg6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJHBhdGgnLCBmdW5jdGlvbihwYXRoKSB7CiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7CiAgfSksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkbG9jYXRpb24jc2VhcmNoCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuCiAgICoKICAgKiBSZXR1cm4gc2VhcmNoIHBhcnQgKGFzIG9iamVjdCkgb2YgY3VycmVudCB1cmwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLgogICAqCiAgICogQ2hhbmdlIHNlYXJjaCBwYXJ0IHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuCiAgICoKICAgKgogICAqIGBgYGpzCiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvCiAgICogdmFyIHNlYXJjaE9iamVjdCA9ICRsb2NhdGlvbi5zZWFyY2goKTsKICAgKiAvLyA9PiB7Zm9vOiAnYmFyJywgYmF6OiAneG94byd9CiAgICoKICAgKgogICAqIC8vIHNldCBmb28gdG8gJ3lpcGVlJwogICAqICRsb2NhdGlvbi5zZWFyY2goJ2ZvbycsICd5aXBlZScpOwogICAqIC8vID0+ICRsb2NhdGlvbgogICAqIGBgYAogICAqCiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmc+fE9iamVjdC48QXJyYXkuPHN0cmluZz4+fSBzZWFyY2ggTmV3IHNlYXJjaCBwYXJhbXMgLSBzdHJpbmcgb3IKICAgKiBoYXNoIG9iamVjdC4KICAgKgogICAqIFdoZW4gY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgdGhlIG1ldGhvZCBhY3RzIGFzIGEgc2V0dGVyLCBzZXR0aW5nIHRoZSBgc2VhcmNoYCBjb21wb25lbnQKICAgKiBvZiBgJGxvY2F0aW9uYCB0byB0aGUgc3BlY2lmaWVkIHZhbHVlLgogICAqCiAgICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgaGFzaCBvYmplY3QgY29udGFpbmluZyBhbiBhcnJheSBvZiB2YWx1ZXMsIHRoZXNlIHZhbHVlcyB3aWxsIGJlIGVuY29kZWQKICAgKiBhcyBkdXBsaWNhdGUgc2VhcmNoIHBhcmFtZXRlcnMgaW4gdGhlIHVybC4KICAgKgogICAqIEBwYXJhbSB7KHN0cmluZ3xBcnJheTxzdHJpbmc+fGJvb2xlYW4pPX0gcGFyYW1WYWx1ZSBJZiBgc2VhcmNoYCBpcyBhIHN0cmluZywgdGhlbiBgcGFyYW1WYWx1ZWAKICAgKiB3aWxsIG92ZXJyaWRlIG9ubHkgYSBzaW5nbGUgc2VhcmNoIHByb3BlcnR5LgogICAqCiAgICogSWYgYHBhcmFtVmFsdWVgIGlzIGFuIGFycmF5LCBpdCB3aWxsIG92ZXJyaWRlIHRoZSBwcm9wZXJ0eSBvZiB0aGUgYHNlYXJjaGAgY29tcG9uZW50IG9mCiAgICogYCRsb2NhdGlvbmAgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQuCiAgICoKICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYG51bGxgLCB0aGUgcHJvcGVydHkgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQgd2lsbCBiZSBkZWxldGVkLgogICAqCiAgICogSWYgYHBhcmFtVmFsdWVgIGlzIGB0cnVlYCwgdGhlIHByb3BlcnR5IHNwZWNpZmllZCB2aWEgdGhlIGZpcnN0IGFyZ3VtZW50IHdpbGwgYmUgYWRkZWQgd2l0aCBubwogICAqIHZhbHVlIG5vciB0cmFpbGluZyBlcXVhbCBzaWduLgogICAqCiAgICogQHJldHVybiB7T2JqZWN0fSBJZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMgcmV0dXJucyB0aGUgcGFyc2VkIGBzZWFyY2hgIG9iamVjdC4gSWYgY2FsbGVkIHdpdGgKICAgKiBvbmUgb3IgbW9yZSBhcmd1bWVudHMgcmV0dXJucyBgJGxvY2F0aW9uYCBvYmplY3QgaXRzZWxmLgogICAqLwogIHNlYXJjaDogZnVuY3Rpb24oc2VhcmNoLCBwYXJhbVZhbHVlKSB7CiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHsKICAgICAgY2FzZSAwOgogICAgICAgIHJldHVybiB0aGlzLiQkc2VhcmNoOwogICAgICBjYXNlIDE6CiAgICAgICAgaWYgKGlzU3RyaW5nKHNlYXJjaCkpIHsKICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKHNlYXJjaCk7CiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChzZWFyY2gpKSB7CiAgICAgICAgICAvLyByZW1vdmUgb2JqZWN0IHVuZGVmaW5lZCBvciBudWxsIHByb3BlcnRpZXMKICAgICAgICAgIGZvckVhY2goc2VhcmNoLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSBkZWxldGUgc2VhcmNoW2tleV07CiAgICAgICAgICB9KTsKCiAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gc2VhcmNoOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lzcmNoYXJnJywKICAgICAgICAgICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBgJGxvY2F0aW9uI3NlYXJjaCgpYCBjYWxsIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gb2JqZWN0LicpOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICBpZiAoaXNVbmRlZmluZWQocGFyYW1WYWx1ZSkgfHwgcGFyYW1WYWx1ZSA9PT0gbnVsbCkgewogICAgICAgICAgZGVsZXRlIHRoaXMuJCRzZWFyY2hbc2VhcmNoXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kJHNlYXJjaFtzZWFyY2hdID0gcGFyYW1WYWx1ZTsKICAgICAgICB9CiAgICB9CgogICAgdGhpcy4kJGNvbXBvc2UoKTsKICAgIHJldHVybiB0aGlzOwogIH0sCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkbG9jYXRpb24jaGFzaAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLgogICAqCiAgICogUmV0dXJuIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLgogICAqCiAgICogQ2hhbmdlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nPX0gaGFzaCBOZXcgaGFzaCBmcmFnbWVudAogICAqIEByZXR1cm4ge3N0cmluZ30gaGFzaAogICAqLwogIGhhc2g6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJGhhc2gnLCBpZGVudGl0eSksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkbG9jYXRpb24jcmVwbGFjZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogSWYgY2FsbGVkLCBhbGwgY2hhbmdlcyB0byAkbG9jYXRpb24gZHVyaW5nIGN1cnJlbnQgYCRkaWdlc3RgIHdpbGwgYmUgcmVwbGFjaW5nIGN1cnJlbnQgaGlzdG9yeQogICAqIHJlY29yZCwgaW5zdGVhZCBvZiBhZGRpbmcgbmV3IG9uZS4KICAgKi8KICByZXBsYWNlOiBmdW5jdGlvbigpIHsKICAgIHRoaXMuJCRyZXBsYWNlID0gdHJ1ZTsKICAgIHJldHVybiB0aGlzOwogIH0KfTsKCmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyKHByb3BlcnR5KSB7CiAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXNbcHJvcGVydHldOwogIH07Cn0KCgpmdW5jdGlvbiBsb2NhdGlvbkdldHRlclNldHRlcihwcm9wZXJ0eSwgcHJlcHJvY2VzcykgewogIHJldHVybiBmdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkKICAgICAgcmV0dXJuIHRoaXNbcHJvcGVydHldOwoKICAgIHRoaXNbcHJvcGVydHldID0gcHJlcHJvY2Vzcyh2YWx1ZSk7CiAgICB0aGlzLiQkY29tcG9zZSgpOwoKICAgIHJldHVybiB0aGlzOwogIH07Cn0KCgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJGxvY2F0aW9uCiAqCiAqIEByZXF1aXJlcyAkcm9vdEVsZW1lbnQKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSAkbG9jYXRpb24gc2VydmljZSBwYXJzZXMgdGhlIFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciAoYmFzZWQgb24gdGhlCiAqIFt3aW5kb3cubG9jYXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL3dpbmRvdy5sb2NhdGlvbikpIGFuZCBtYWtlcyB0aGUgVVJMCiAqIGF2YWlsYWJsZSB0byB5b3VyIGFwcGxpY2F0aW9uLiBDaGFuZ2VzIHRvIHRoZSBVUkwgaW4gdGhlIGFkZHJlc3MgYmFyIGFyZSByZWZsZWN0ZWQgaW50bwogKiAkbG9jYXRpb24gc2VydmljZSBhbmQgY2hhbmdlcyB0byAkbG9jYXRpb24gYXJlIHJlZmxlY3RlZCBpbnRvIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLgogKgogKiAqKlRoZSAkbG9jYXRpb24gc2VydmljZToqKgogKgogKiAtIEV4cG9zZXMgdGhlIGN1cnJlbnQgVVJMIGluIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLCBzbyB5b3UgY2FuCiAqICAgLSBXYXRjaCBhbmQgb2JzZXJ2ZSB0aGUgVVJMLgogKiAgIC0gQ2hhbmdlIHRoZSBVUkwuCiAqIC0gU3luY2hyb25pemVzIHRoZSBVUkwgd2l0aCB0aGUgYnJvd3NlciB3aGVuIHRoZSB1c2VyCiAqICAgLSBDaGFuZ2VzIHRoZSBhZGRyZXNzIGJhci4KICogICAtIENsaWNrcyB0aGUgYmFjayBvciBmb3J3YXJkIGJ1dHRvbiAob3IgY2xpY2tzIGEgSGlzdG9yeSBsaW5rKS4KICogICAtIENsaWNrcyBvbiBhIGxpbmsuCiAqIC0gUmVwcmVzZW50cyB0aGUgVVJMIG9iamVjdCBhcyBhIHNldCBvZiBtZXRob2RzIChwcm90b2NvbCwgaG9zdCwgcG9ydCwgcGF0aCwgc2VhcmNoLCBoYXNoKS4KICoKICogRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHtAbGluayBndWlkZS8kbG9jYXRpb24gRGV2ZWxvcGVyIEd1aWRlOiBVc2luZyAkbG9jYXRpb259CiAqLwoKLyoqCiAqIEBuZ2RvYyBwcm92aWRlcgogKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICogVXNlIHRoZSBgJGxvY2F0aW9uUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGRlZXAgbGlua2luZyBwYXRocyBhcmUgc3RvcmVkLgogKi8KZnVuY3Rpb24gJExvY2F0aW9uUHJvdmlkZXIoKXsKICB2YXIgaGFzaFByZWZpeCA9ICcnLAogICAgICBodG1sNU1vZGUgPSBmYWxzZTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRsb2NhdGlvblByb3ZpZGVyI2hhc2hQcmVmaXgKICAgKiBAZGVzY3JpcHRpb24KICAgKiBAcGFyYW0ge3N0cmluZz19IHByZWZpeCBQcmVmaXggZm9yIGhhc2ggcGFydCAoY29udGFpbmluZyBwYXRoIGFuZCBzZWFyY2gpCiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXIKICAgKi8KICB0aGlzLmhhc2hQcmVmaXggPSBmdW5jdGlvbihwcmVmaXgpIHsKICAgIGlmIChpc0RlZmluZWQocHJlZml4KSkgewogICAgICBoYXNoUHJlZml4ID0gcHJlZml4OwogICAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBoYXNoUHJlZml4OwogICAgfQogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNodG1sNU1vZGUKICAgKiBAZGVzY3JpcHRpb24KICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBtb2RlIFVzZSBIVE1MNSBzdHJhdGVneSBpZiBhdmFpbGFibGUuCiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXIKICAgKi8KICB0aGlzLmh0bWw1TW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHsKICAgIGlmIChpc0RlZmluZWQobW9kZSkpIHsKICAgICAgaHRtbDVNb2RlID0gbW9kZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gaHRtbDVNb2RlOwogICAgfQogIH07CgogIC8qKgogICAqIEBuZ2RvYyBldmVudAogICAqIEBuYW1lICRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdGFydAogICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGUKICAgKiBAZGVzY3JpcHRpb24KICAgKiBCcm9hZGNhc3RlZCBiZWZvcmUgYSBVUkwgd2lsbCBjaGFuZ2UuIFRoaXMgY2hhbmdlIGNhbiBiZSBwcmV2ZW50ZWQgYnkgY2FsbGluZwogICAqIGBwcmV2ZW50RGVmYXVsdGAgbWV0aG9kIG9mIHRoZSBldmVudC4gU2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gZm9yIG1vcmUKICAgKiBkZXRhaWxzIGFib3V0IGV2ZW50IG9iamVjdC4gVXBvbiBzdWNjZXNzZnVsIGNoYW5nZQogICAqIHtAbGluayBuZy4kbG9jYXRpb24jZXZlbnRzXyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MgJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc30gaXMgZmlyZWQuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuCiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMCiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRVcmwgVVJMIHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC4KICAgKi8KCiAgLyoqCiAgICogQG5nZG9jIGV2ZW50CiAgICogQG5hbWUgJGxvY2F0aW9uIyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MKICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlCiAgICogQGRlc2NyaXB0aW9uCiAgICogQnJvYWRjYXN0ZWQgYWZ0ZXIgYSBVUkwgd2FzIGNoYW5nZWQuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuCiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMCiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRVcmwgVVJMIHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC4KICAgKi8KCiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRzbmlmZmVyJywgJyRyb290RWxlbWVudCcsCiAgICAgIGZ1bmN0aW9uKCAkcm9vdFNjb3BlLCAgICRicm93c2VyLCAgICRzbmlmZmVyLCAgICRyb290RWxlbWVudCkgewogICAgdmFyICRsb2NhdGlvbiwKICAgICAgICBMb2NhdGlvbk1vZGUsCiAgICAgICAgYmFzZUhyZWYgPSAkYnJvd3Nlci5iYXNlSHJlZigpLCAvLyBpZiBiYXNlW2hyZWZdIGlzIHVuZGVmaW5lZCwgaXQgZGVmYXVsdHMgdG8gJycKICAgICAgICBpbml0aWFsVXJsID0gJGJyb3dzZXIudXJsKCksCiAgICAgICAgYXBwQmFzZTsKCiAgICBpZiAoaHRtbDVNb2RlKSB7CiAgICAgIGFwcEJhc2UgPSBzZXJ2ZXJCYXNlKGluaXRpYWxVcmwpICsgKGJhc2VIcmVmIHx8ICcvJyk7CiAgICAgIExvY2F0aW9uTW9kZSA9ICRzbmlmZmVyLmhpc3RvcnkgPyBMb2NhdGlvbkh0bWw1VXJsIDogTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmw7CiAgICB9IGVsc2UgewogICAgICBhcHBCYXNlID0gc3RyaXBIYXNoKGluaXRpYWxVcmwpOwogICAgICBMb2NhdGlvbk1vZGUgPSBMb2NhdGlvbkhhc2hiYW5nVXJsOwogICAgfQogICAgJGxvY2F0aW9uID0gbmV3IExvY2F0aW9uTW9kZShhcHBCYXNlLCAnIycgKyBoYXNoUHJlZml4KTsKICAgICRsb2NhdGlvbi4kJHBhcnNlKCRsb2NhdGlvbi4kJHJld3JpdGUoaW5pdGlhbFVybCkpOwoKICAgIHZhciBJR05PUkVfVVJJX1JFR0VYUCA9IC9eXHMqKGphdmFzY3JpcHR8bWFpbHRvKTovaTsKCiAgICAkcm9vdEVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgLy8gVE9ETyh2b2p0YSk6IHJld3JpdGUgbGluayB3aGVuIG9wZW5pbmcgaW4gbmV3IHRhYi93aW5kb3cgKGluIGxlZ2FjeSBicm93c2VyKQogICAgICAvLyBjdXJyZW50bHkgd2Ugb3BlbiBuaWNlIHVybCBsaW5rIGFuZCByZWRpcmVjdCB0aGVuCgogICAgICBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LndoaWNoID09IDIpIHJldHVybjsKCiAgICAgIHZhciBlbG0gPSBqcUxpdGUoZXZlbnQudGFyZ2V0KTsKCiAgICAgIC8vIHRyYXZlcnNlIHRoZSBET00gdXAgdG8gZmluZCBmaXJzdCBBIHRhZwogICAgICB3aGlsZSAobm9kZU5hbWVfKGVsbVswXSkgIT09ICdhJykgewogICAgICAgIC8vIGlnbm9yZSByZXdyaXRpbmcgaWYgbm8gQSB0YWcgKHJlYWNoZWQgcm9vdCBlbGVtZW50LCBvciBubyBwYXJlbnQgLSByZW1vdmVkIGZyb20gZG9jdW1lbnQpCiAgICAgICAgaWYgKGVsbVswXSA9PT0gJHJvb3RFbGVtZW50WzBdIHx8ICEoZWxtID0gZWxtLnBhcmVudCgpKVswXSkgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYWJzSHJlZiA9IGVsbS5wcm9wKCdocmVmJyk7CgogICAgICBpZiAoaXNPYmplY3QoYWJzSHJlZikgJiYgYWJzSHJlZi50b1N0cmluZygpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nKSB7CiAgICAgICAgLy8gU1ZHQW5pbWF0ZWRTdHJpbmcuYW5pbVZhbCBzaG91bGQgYmUgaWRlbnRpY2FsIHRvIFNWR0FuaW1hdGVkU3RyaW5nLmJhc2VWYWwsIHVubGVzcyBkdXJpbmcKICAgICAgICAvLyBhbiBhbmltYXRpb24uCiAgICAgICAgYWJzSHJlZiA9IHVybFJlc29sdmUoYWJzSHJlZi5hbmltVmFsKS5ocmVmOwogICAgICB9CgogICAgICAvLyBJZ25vcmUgd2hlbiB1cmwgaXMgc3RhcnRlZCB3aXRoIGphdmFzY3JpcHQ6IG9yIG1haWx0bzoKICAgICAgaWYgKElHTk9SRV9VUklfUkVHRVhQLnRlc3QoYWJzSHJlZikpIHJldHVybjsKCiAgICAgIC8vIE1ha2UgcmVsYXRpdmUgbGlua3Mgd29yayBpbiBIVE1MNSBtb2RlIGZvciBsZWdhY3kgYnJvd3NlcnMgKG9yIGF0IGxlYXN0IElFOCAmIDkpCiAgICAgIC8vIFRoZSBocmVmIHNob3VsZCBiZSBhIHJlZ3VsYXIgdXJsIGUuZy4gL2xpbmsvc29tZXdoZXJlIG9yIGxpbmsvc29tZXdoZXJlIG9yIC4uL3NvbWV3aGVyZSBvcgogICAgICAvLyBzb21ld2hlcmUjYW5jaG9yIG9yIGh0dHA6Ly9leGFtcGxlLmNvbS9zb21ld2hlcmUKICAgICAgaWYgKExvY2F0aW9uTW9kZSA9PT0gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwpIHsKICAgICAgICAvLyBnZXQgdGhlIGFjdHVhbCBocmVmIGF0dHJpYnV0ZSAtIHNlZQogICAgICAgIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kZDM0NzE0OCh2PXZzLjg1KS5hc3B4CiAgICAgICAgdmFyIGhyZWYgPSBlbG0uYXR0cignaHJlZicpIHx8IGVsbS5hdHRyKCd4bGluazpocmVmJyk7CgogICAgICAgIGlmIChocmVmICYmIGhyZWYuaW5kZXhPZignOi8vJykgPCAwKSB7ICAgICAgICAgLy8gSWdub3JlIGFic29sdXRlIFVSTHMKICAgICAgICAgIHZhciBwcmVmaXggPSAnIycgKyBoYXNoUHJlZml4OwogICAgICAgICAgaWYgKGhyZWZbMF0gPT0gJy8nKSB7CiAgICAgICAgICAgIC8vIGFic29sdXRlIHBhdGggLSByZXBsYWNlIG9sZCBwYXRoCiAgICAgICAgICAgIGFic0hyZWYgPSBhcHBCYXNlICsgcHJlZml4ICsgaHJlZjsKICAgICAgICAgIH0gZWxzZSBpZiAoaHJlZlswXSA9PSAnIycpIHsKICAgICAgICAgICAgLy8gbG9jYWwgYW5jaG9yCiAgICAgICAgICAgIGFic0hyZWYgPSBhcHBCYXNlICsgcHJlZml4ICsgKCRsb2NhdGlvbi5wYXRoKCkgfHwgJy8nKSArIGhyZWY7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyByZWxhdGl2ZSBwYXRoIC0gam9pbiB3aXRoIGN1cnJlbnQgcGF0aAogICAgICAgICAgICB2YXIgc3RhY2sgPSAkbG9jYXRpb24ucGF0aCgpLnNwbGl0KCIvIiksCiAgICAgICAgICAgICAgcGFydHMgPSBocmVmLnNwbGl0KCIvIik7CiAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPT09IDIgJiYgIXN0YWNrWzFdKSBzdGFjay5sZW5ndGggPSAxOwogICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8cGFydHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpZiAocGFydHNbaV0gPT0gIi4iKQogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgZWxzZSBpZiAocGFydHNbaV0gPT0gIi4uIikKICAgICAgICAgICAgICAgIHN0YWNrLnBvcCgpOwogICAgICAgICAgICAgIGVsc2UgaWYgKHBhcnRzW2ldLmxlbmd0aCkKICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gocGFydHNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFic0hyZWYgPSBhcHBCYXNlICsgcHJlZml4ICsgc3RhY2suam9pbignLycpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIHJld3JpdHRlblVybCA9ICRsb2NhdGlvbi4kJHJld3JpdGUoYWJzSHJlZik7CgogICAgICBpZiAoYWJzSHJlZiAmJiAhZWxtLmF0dHIoJ3RhcmdldCcpICYmIHJld3JpdHRlblVybCAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGlmIChyZXdyaXR0ZW5VcmwgIT0gJGJyb3dzZXIudXJsKCkpIHsKICAgICAgICAgIC8vIHVwZGF0ZSBsb2NhdGlvbiBtYW51YWxseQogICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2UocmV3cml0dGVuVXJsKTsKICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7CiAgICAgICAgICAvLyBoYWNrIHRvIHdvcmsgYXJvdW5kIEZGNiBidWcgNjg0MjA4IHdoZW4gc2NlbmFyaW8gcnVubmVyIGNsaWNrcyBvbiBsaW5rcwogICAgICAgICAgd2luZG93LmFuZ3VsYXJbJ2ZmLTY4NDIwOC1wcmV2ZW50RGVmYXVsdCddID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwoKCiAgICAvLyByZXdyaXRlIGhhc2hiYW5nIHVybCA8PiBodG1sNSB1cmwKICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT0gaW5pdGlhbFVybCkgewogICAgICAkYnJvd3Nlci51cmwoJGxvY2F0aW9uLmFic1VybCgpLCB0cnVlKTsKICAgIH0KCiAgICAvLyB1cGRhdGUgJGxvY2F0aW9uIHdoZW4gJGJyb3dzZXIgdXJsIGNoYW5nZXMKICAgICRicm93c2VyLm9uVXJsQ2hhbmdlKGZ1bmN0aW9uKG5ld1VybCkgewogICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9IG5ld1VybCkgewogICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7CgogICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2UobmV3VXJsKTsKICAgICAgICAgIGlmICgkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRVcmwpLmRlZmF1bHRQcmV2ZW50ZWQpIHsKICAgICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTsKICAgICAgICAgICAgJGJyb3dzZXIudXJsKG9sZFVybCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGRpZ2VzdCgpOwogICAgICB9CiAgICB9KTsKCiAgICAvLyB1cGRhdGUgYnJvd3NlcgogICAgdmFyIGNoYW5nZUNvdW50ZXIgPSAwOwogICAgJHJvb3RTY29wZS4kd2F0Y2goZnVuY3Rpb24gJGxvY2F0aW9uV2F0Y2goKSB7CiAgICAgIHZhciBvbGRVcmwgPSAkYnJvd3Nlci51cmwoKTsKICAgICAgdmFyIGN1cnJlbnRSZXBsYWNlID0gJGxvY2F0aW9uLiQkcmVwbGFjZTsKCiAgICAgIGlmICghY2hhbmdlQ291bnRlciB8fCBvbGRVcmwgIT0gJGxvY2F0aW9uLmFic1VybCgpKSB7CiAgICAgICAgY2hhbmdlQ291bnRlcisrOwogICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHsKICAgICAgICAgIGlmICgkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwpLgogICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQpIHsKICAgICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRicm93c2VyLnVybCgkbG9jYXRpb24uYWJzVXJsKCksIGN1cnJlbnRSZXBsYWNlKTsKICAgICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICAgICRsb2NhdGlvbi4kJHJlcGxhY2UgPSBmYWxzZTsKCiAgICAgIHJldHVybiBjaGFuZ2VDb3VudGVyOwogICAgfSk7CgogICAgcmV0dXJuICRsb2NhdGlvbjsKCiAgICBmdW5jdGlvbiBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCkgewogICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCAkbG9jYXRpb24uYWJzVXJsKCksIG9sZFVybCk7CiAgICB9Cn1dOwp9CgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJGxvZwogKiBAcmVxdWlyZXMgJHdpbmRvdwogKgogKiBAZGVzY3JpcHRpb24KICogU2ltcGxlIHNlcnZpY2UgZm9yIGxvZ2dpbmcuIERlZmF1bHQgaW1wbGVtZW50YXRpb24gc2FmZWx5IHdyaXRlcyB0aGUgbWVzc2FnZQogKiBpbnRvIHRoZSBicm93c2VyJ3MgY29uc29sZSAoaWYgcHJlc2VudCkuCiAqCiAqIFRoZSBtYWluIHB1cnBvc2Ugb2YgdGhpcyBzZXJ2aWNlIGlzIHRvIHNpbXBsaWZ5IGRlYnVnZ2luZyBhbmQgdHJvdWJsZXNob290aW5nLgogKgogKiBUaGUgZGVmYXVsdCBpcyB0byBsb2cgYGRlYnVnYCBtZXNzYWdlcy4gWW91IGNhbiB1c2UKICoge0BsaW5rIG5nLiRsb2dQcm92aWRlciBuZy4kbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkfSB0byBjaGFuZ2UgdGhpcy4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGUgbW9kdWxlPSJsb2dFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICAgYW5ndWxhci5tb2R1bGUoJ2xvZ0V4YW1wbGUnLCBbXSkKICAgICAgICAgLmNvbnRyb2xsZXIoJ0xvZ0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9nJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9nKSB7CiAgICAgICAgICAgJHNjb3BlLiRsb2cgPSAkbG9nOwogICAgICAgICAgICRzY29wZS5tZXNzYWdlID0gJ0hlbGxvIFdvcmxkISc7CiAgICAgICAgIH1dKTsKICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkxvZ0NvbnRyb2xsZXIiPgogICAgICAgICA8cD5SZWxvYWQgdGhpcyBwYWdlIHdpdGggb3BlbiBjb25zb2xlLCBlbnRlciB0ZXh0IGFuZCBoaXQgdGhlIGxvZyBidXR0b24uLi48L3A+CiAgICAgICAgIE1lc3NhZ2U6CiAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0ibWVzc2FnZSIvPgogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSIkbG9nLmxvZyhtZXNzYWdlKSI+bG9nPC9idXR0b24+CiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9IiRsb2cud2FybihtZXNzYWdlKSI+d2FybjwvYnV0dG9uPgogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSIkbG9nLmluZm8obWVzc2FnZSkiPmluZm88L2J1dHRvbj4KICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iJGxvZy5lcnJvcihtZXNzYWdlKSI+ZXJyb3I8L2J1dHRvbj4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCi8qKgogKiBAbmdkb2MgcHJvdmlkZXIKICogQG5hbWUgJGxvZ1Byb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKiBVc2UgdGhlIGAkbG9nUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGxvZ3MgbWVzc2FnZXMKICovCmZ1bmN0aW9uICRMb2dQcm92aWRlcigpewogIHZhciBkZWJ1ZyA9IHRydWUsCiAgICAgIHNlbGYgPSB0aGlzOwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZAogICAqIEBkZXNjcmlwdGlvbgogICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZsYWcgZW5hYmxlIG9yIGRpc2FibGUgZGVidWcgbGV2ZWwgbWVzc2FnZXMKICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlcgogICAqLwogIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykgewogICAgaWYgKGlzRGVmaW5lZChmbGFnKSkgewogICAgICBkZWJ1ZyA9IGZsYWc7CiAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBkZWJ1ZzsKICAgIH0KICB9OwoKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbigkd2luZG93KXsKICAgIHJldHVybiB7CiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRsb2cjbG9nCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBXcml0ZSBhIGxvZyBtZXNzYWdlCiAgICAgICAqLwogICAgICBsb2c6IGNvbnNvbGVMb2coJ2xvZycpLAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJGxvZyNpbmZvCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBXcml0ZSBhbiBpbmZvcm1hdGlvbiBtZXNzYWdlCiAgICAgICAqLwogICAgICBpbmZvOiBjb25zb2xlTG9nKCdpbmZvJyksCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkbG9nI3dhcm4KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGEgd2FybmluZyBtZXNzYWdlCiAgICAgICAqLwogICAgICB3YXJuOiBjb25zb2xlTG9nKCd3YXJuJyksCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkbG9nI2Vycm9yCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBXcml0ZSBhbiBlcnJvciBtZXNzYWdlCiAgICAgICAqLwogICAgICBlcnJvcjogY29uc29sZUxvZygnZXJyb3InKSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRsb2cjZGVidWcKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGEgZGVidWcgbWVzc2FnZQogICAgICAgKi8KICAgICAgZGVidWc6IChmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGZuID0gY29uc29sZUxvZygnZGVidWcnKTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKGRlYnVnKSB7CiAgICAgICAgICAgIGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfSgpKQogICAgfTsKCiAgICBmdW5jdGlvbiBmb3JtYXRFcnJvcihhcmcpIHsKICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7CiAgICAgICAgaWYgKGFyZy5zdGFjaykgewogICAgICAgICAgYXJnID0gKGFyZy5tZXNzYWdlICYmIGFyZy5zdGFjay5pbmRleE9mKGFyZy5tZXNzYWdlKSA9PT0gLTEpCiAgICAgICAgICAgICAgPyAnRXJyb3I6ICcgKyBhcmcubWVzc2FnZSArICdcbicgKyBhcmcuc3RhY2sKICAgICAgICAgICAgICA6IGFyZy5zdGFjazsKICAgICAgICB9IGVsc2UgaWYgKGFyZy5zb3VyY2VVUkwpIHsKICAgICAgICAgIGFyZyA9IGFyZy5tZXNzYWdlICsgJ1xuJyArIGFyZy5zb3VyY2VVUkwgKyAnOicgKyBhcmcubGluZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGFyZzsKICAgIH0KCiAgICBmdW5jdGlvbiBjb25zb2xlTG9nKHR5cGUpIHsKICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sCiAgICAgICAgICBsb2dGbiA9IGNvbnNvbGVbdHlwZV0gfHwgY29uc29sZS5sb2cgfHwgbm9vcCwKICAgICAgICAgIGhhc0FwcGx5ID0gZmFsc2U7CgogICAgICAvLyBOb3RlOiByZWFkaW5nIGxvZ0ZuLmFwcGx5IHRocm93cyBhbiBlcnJvciBpbiBJRTExIGluIElFOCBkb2N1bWVudCBtb2RlLgogICAgICAvLyBUaGUgcmVhc29uIGJlaGluZCB0aGlzIGlzIHRoYXQgY29uc29sZS5sb2cgaGFzIHR5cGUgIm9iamVjdCIgaW4gSUU4Li4uCiAgICAgIHRyeSB7CiAgICAgICAgaGFzQXBwbHkgPSAhIWxvZ0ZuLmFwcGx5OwogICAgICB9IGNhdGNoIChlKSB7fQoKICAgICAgaWYgKGhhc0FwcGx5KSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGFyZ3MgPSBbXTsKICAgICAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihhcmcpIHsKICAgICAgICAgICAgYXJncy5wdXNoKGZvcm1hdEVycm9yKGFyZykpOwogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gbG9nRm4uYXBwbHkoY29uc29sZSwgYXJncyk7CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgLy8gd2UgYXJlIElFIHdoaWNoIGVpdGhlciBkb2Vzbid0IGhhdmUgd2luZG93LmNvbnNvbGUgPT4gdGhpcyBpcyBub29wIGFuZCB3ZSBkbyBub3RoaW5nLAogICAgICAvLyBvciB3ZSBhcmUgSUUgd2hlcmUgY29uc29sZS5sb2cgZG9lc24ndCBoYXZlIGFwcGx5IHNvIHdlIGxvZyBhdCBsZWFzdCBmaXJzdCAyIGFyZ3MKICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHsKICAgICAgICBsb2dGbihhcmcxLCBhcmcyID09IG51bGwgPyAnJyA6IGFyZzIpOwogICAgICB9OwogICAgfQogIH1dOwp9Cgp2YXIgJHBhcnNlTWluRXJyID0gbWluRXJyKCckcGFyc2UnKTsKCi8vIFNhbmRib3hpbmcgQW5ndWxhciBFeHByZXNzaW9ucwovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gQW5ndWxhciBleHByZXNzaW9ucyBhcmUgZ2VuZXJhbGx5IGNvbnNpZGVyZWQgc2FmZSBiZWNhdXNlIHRoZXNlIGV4cHJlc3Npb25zIG9ubHkgaGF2ZSBkaXJlY3QKLy8gYWNjZXNzIHRvICRzY29wZSBhbmQgbG9jYWxzLiBIb3dldmVyLCBvbmUgY2FuIG9idGFpbiB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBKUyBjb2RlIGJ5Ci8vIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byBuYXRpdmUgSlMgZnVuY3Rpb25zIHN1Y2ggYXMgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yLgovLwovLyBBcyBhbiBleGFtcGxlLCBjb25zaWRlciB0aGUgZm9sbG93aW5nIEFuZ3VsYXIgZXhwcmVzc2lvbjoKLy8KLy8gICB7fS50b1N0cmluZy5jb25zdHJ1Y3RvcignYWxlcnQoImV2aWwgSlMgY29kZSIpJykKLy8KLy8gVGhpcyBzYW5kYm94aW5nIHRlY2huaXF1ZSBpcyBub3QgcGVyZmVjdCBhbmQgZG9lc24ndCBhaW0gdG8gYmUuIFRoZSBnb2FsIGlzIHRvIHByZXZlbnQgZXhwbG9pdHMKLy8gYWdhaW5zdCB0aGUgZXhwcmVzc2lvbiBsYW5ndWFnZSwgYnV0IG5vdCB0byBwcmV2ZW50IGV4cGxvaXRzIHRoYXQgd2VyZSBlbmFibGVkIGJ5IGV4cG9zaW5nCi8vIHNlbnNpdGl2ZSBKYXZhU2NyaXB0IG9yIGJyb3dzZXIgYXBpcyBvbiBTY29wZS4gRXhwb3Npbmcgc3VjaCBvYmplY3RzIG9uIGEgU2NvcGUgaXMgbmV2ZXIgYSBnb29kCi8vIHByYWN0aWNlIGFuZCB0aGVyZWZvcmUgd2UgYXJlIG5vdCBldmVuIHRyeWluZyB0byBwcm90ZWN0IGFnYWluc3QgaW50ZXJhY3Rpb24gd2l0aCBhbiBvYmplY3QKLy8gZXhwbGljaXRseSBleHBvc2VkIGluIHRoaXMgd2F5LgovLwovLyBJbiBnZW5lcmFsLCBpdCBpcyBub3QgcG9zc2libGUgdG8gYWNjZXNzIGEgV2luZG93IG9iamVjdCBmcm9tIGFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB1bmxlc3MgYQovLyB3aW5kb3cgb3Igc29tZSBET00gb2JqZWN0IHRoYXQgaGFzIGEgcmVmZXJlbmNlIHRvIHdpbmRvdyBpcyBwdWJsaXNoZWQgb250byBhIFNjb3BlLgovLyBTaW1pbGFybHkgd2UgcHJldmVudCBpbnZvY2F0aW9ucyBvZiBmdW5jdGlvbiBrbm93biB0byBiZSBkYW5nZXJvdXMsIGFzIHdlbGwgYXMgYXNzaWdubWVudHMgdG8KLy8gbmF0aXZlIG9iamVjdHMuCgoKZnVuY3Rpb24gZW5zdXJlU2FmZU1lbWJlck5hbWUobmFtZSwgZnVsbEV4cHJlc3Npb24pIHsKICBpZiAobmFtZSA9PT0gIl9fZGVmaW5lR2V0dGVyX18iIHx8IG5hbWUgPT09ICJfX2RlZmluZVNldHRlcl9fIgogICAgICB8fCBuYW1lID09PSAiX19sb29rdXBHZXR0ZXJfXyIgfHwgbmFtZSA9PT0gIl9fbG9va3VwU2V0dGVyX18iCiAgICAgIHx8IG5hbWUgPT09ICJfX3Byb3RvX18iKSB7CiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbGQnLAogICAgICAgICdBdHRlbXB0aW5nIHRvIGFjY2VzcyBhIGRpc2FsbG93ZWQgZmllbGQgaW4gQW5ndWxhciBleHByZXNzaW9ucyEgJwogICAgICAgICsnRXhwcmVzc2lvbjogezB9JywgZnVsbEV4cHJlc3Npb24pOwogIH0KICByZXR1cm4gbmFtZTsKfQoKZnVuY3Rpb24gZW5zdXJlU2FmZU9iamVjdChvYmosIGZ1bGxFeHByZXNzaW9uKSB7CiAgLy8gbmlmdHkgY2hlY2sgaWYgb2JqIGlzIEZ1bmN0aW9uIHRoYXQgaXMgZmFzdCBhbmQgd29ya3MgYWNyb3NzIGlmcmFtZXMgYW5kIG90aGVyIGNvbnRleHRzCiAgaWYgKG9iaikgewogICAgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gb2JqKSB7CiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZuJywKICAgICAgICAgICdSZWZlcmVuY2luZyBGdW5jdGlvbiBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsCiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7CiAgICB9IGVsc2UgaWYgKC8vIGlzV2luZG93KG9iaikKICAgICAgICBvYmoud2luZG93ID09PSBvYmopIHsKICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2Vjd2luZG93JywKICAgICAgICAgICdSZWZlcmVuY2luZyB0aGUgV2luZG93IGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JywKICAgICAgICAgIGZ1bGxFeHByZXNzaW9uKTsKICAgIH0gZWxzZSBpZiAoLy8gaXNFbGVtZW50KG9iaikKICAgICAgICBvYmouY2hpbGRyZW4gJiYgKG9iai5ub2RlTmFtZSB8fCAob2JqLnByb3AgJiYgb2JqLmF0dHIgJiYgb2JqLmZpbmQpKSkgewogICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNkb20nLAogICAgICAgICAgJ1JlZmVyZW5jaW5nIERPTSBub2RlcyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsCiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7CiAgICB9IGVsc2UgaWYgKC8vIGJsb2NrIE9iamVjdCBzbyB0aGF0IHdlIGNhbid0IGdldCBob2xkIG9mIGRhbmdlcm91cyBPYmplY3QuKiBtZXRob2RzCiAgICAgICAgb2JqID09PSBPYmplY3QpIHsKICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2Vjb2JqJywKICAgICAgICAgICdSZWZlcmVuY2luZyBPYmplY3QgaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLAogICAgICAgICAgZnVsbEV4cHJlc3Npb24pOwogICAgfQogIH0KICByZXR1cm4gb2JqOwp9Cgp2YXIgQ0FMTCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsOwp2YXIgQVBQTFkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7CnZhciBCSU5EID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7CgpmdW5jdGlvbiBlbnN1cmVTYWZlRnVuY3Rpb24ob2JqLCBmdWxsRXhwcmVzc2lvbikgewogIGlmIChvYmopIHsKICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IG9iaikgewogICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbicsCiAgICAgICAgJ1JlZmVyZW5jaW5nIEZ1bmN0aW9uIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JywKICAgICAgICBmdWxsRXhwcmVzc2lvbik7CiAgICB9IGVsc2UgaWYgKG9iaiA9PT0gQ0FMTCB8fCBvYmogPT09IEFQUExZIHx8IG9iaiA9PT0gQklORCkgewogICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmZicsCiAgICAgICAgJ1JlZmVyZW5jaW5nIGNhbGwsIGFwcGx5IG9yIGJpbmQgaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLAogICAgICAgIGZ1bGxFeHByZXNzaW9uKTsKICAgIH0KICB9Cn0KCnZhciBPUEVSQVRPUlMgPSBleHRlbmQoY3JlYXRlTWFwKCksIHsKICAgIC8qIGpzaGludCBiaXR3aXNlIDogZmFsc2UgKi8KICAgICdudWxsJzpmdW5jdGlvbigpe3JldHVybiBudWxsO30sCiAgICAndHJ1ZSc6ZnVuY3Rpb24oKXtyZXR1cm4gdHJ1ZTt9LAogICAgJ2ZhbHNlJzpmdW5jdGlvbigpe3JldHVybiBmYWxzZTt9LAogICAgdW5kZWZpbmVkOm5vb3AsCiAgICAnKyc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpewogICAgICBhPWEoc2VsZiwgbG9jYWxzKTsgYj1iKHNlbGYsIGxvY2Fscyk7CiAgICAgIGlmIChpc0RlZmluZWQoYSkpIHsKICAgICAgICBpZiAoaXNEZWZpbmVkKGIpKSB7CiAgICAgICAgICByZXR1cm4gYSArIGI7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhOwogICAgICB9CiAgICAgIHJldHVybiBpc0RlZmluZWQoYik/Yjp1bmRlZmluZWQ7fSwKICAgICctJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7CiAgICAgICAgICBhPWEoc2VsZiwgbG9jYWxzKTsgYj1iKHNlbGYsIGxvY2Fscyk7CiAgICAgICAgICByZXR1cm4gKGlzRGVmaW5lZChhKT9hOjApLShpc0RlZmluZWQoYik/YjowKTsKICAgICAgICB9LAogICAgJyonOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpKmIoc2VsZiwgbG9jYWxzKTt9LAogICAgJy8nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpL2Ioc2VsZiwgbG9jYWxzKTt9LAogICAgJyUnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpJWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJ14nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpXmIoc2VsZiwgbG9jYWxzKTt9LAogICAgJz0nOm5vb3AsCiAgICAnPT09JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk9PT1iKHNlbGYsIGxvY2Fscyk7fSwKICAgICchPT0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSE9PWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJz09JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKT09YihzZWxmLCBsb2NhbHMpO30sCiAgICAnIT0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpIT1iKHNlbGYsIGxvY2Fscyk7fSwKICAgICc8JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKTxiKHNlbGYsIGxvY2Fscyk7fSwKICAgICc+JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKT5iKHNlbGYsIGxvY2Fscyk7fSwKICAgICc8PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk8PWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJz49JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKT49YihzZWxmLCBsb2NhbHMpO30sCiAgICAnJiYnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpJiZiKHNlbGYsIGxvY2Fscyk7fSwKICAgICd8fCc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyl8fGIoc2VsZiwgbG9jYWxzKTt9LAogICAgJyYnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpJmIoc2VsZiwgbG9jYWxzKTt9LAovLyAgICAnfCc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhfGI7fSwKICAgICd8JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGIoc2VsZiwgbG9jYWxzKShzZWxmLCBsb2NhbHMsIGEoc2VsZiwgbG9jYWxzKSk7fSwKICAgICchJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEpe3JldHVybiAhYShzZWxmLCBsb2NhbHMpO30KfSk7Ci8qIGpzaGludCBiaXR3aXNlOiB0cnVlICovCnZhciBFU0NBUEUgPSB7Im4iOiJcbiIsICJmIjoiXGYiLCAiciI6IlxyIiwgInQiOiJcdCIsICJ2IjoiXHYiLCAiJyI6IiciLCAnIic6JyInfTsKCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKCi8qKgogKiBAY29uc3RydWN0b3IKICovCnZhciBMZXhlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKfTsKCkxleGVyLnByb3RvdHlwZSA9IHsKICBjb25zdHJ1Y3RvcjogTGV4ZXIsCgogIGxleDogZnVuY3Rpb24gKHRleHQpIHsKICAgIHRoaXMudGV4dCA9IHRleHQ7CiAgICB0aGlzLmluZGV4ID0gMDsKICAgIHRoaXMuY2ggPSB1bmRlZmluZWQ7CiAgICB0aGlzLnRva2VucyA9IFtdOwoKICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkgewogICAgICB0aGlzLmNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTsKICAgICAgaWYgKHRoaXMuaXMoJyJcJycpKSB7CiAgICAgICAgdGhpcy5yZWFkU3RyaW5nKHRoaXMuY2gpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuaXNOdW1iZXIodGhpcy5jaCkgfHwgdGhpcy5pcygnLicpICYmIHRoaXMuaXNOdW1iZXIodGhpcy5wZWVrKCkpKSB7CiAgICAgICAgdGhpcy5yZWFkTnVtYmVyKCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0lkZW50KHRoaXMuY2gpKSB7CiAgICAgICAgdGhpcy5yZWFkSWRlbnQoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmlzKCcoKXt9W10uLDs6PycpKSB7CiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7CiAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCwKICAgICAgICAgIHRleHQ6IHRoaXMuY2gKICAgICAgICB9KTsKICAgICAgICB0aGlzLmluZGV4Kys7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1doaXRlc3BhY2UodGhpcy5jaCkpIHsKICAgICAgICB0aGlzLmluZGV4Kys7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGNoMiA9IHRoaXMuY2ggKyB0aGlzLnBlZWsoKTsKICAgICAgICB2YXIgY2gzID0gY2gyICsgdGhpcy5wZWVrKDIpOwogICAgICAgIHZhciBmbiA9IE9QRVJBVE9SU1t0aGlzLmNoXTsKICAgICAgICB2YXIgZm4yID0gT1BFUkFUT1JTW2NoMl07CiAgICAgICAgdmFyIGZuMyA9IE9QRVJBVE9SU1tjaDNdOwogICAgICAgIGlmIChmbjMpIHsKICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2goe2luZGV4OiB0aGlzLmluZGV4LCB0ZXh0OiBjaDMsIGZuOiBmbjN9KTsKICAgICAgICAgIHRoaXMuaW5kZXggKz0gMzsKICAgICAgICB9IGVsc2UgaWYgKGZuMikgewogICAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6IHRoaXMuaW5kZXgsIHRleHQ6IGNoMiwgZm46IGZuMn0pOwogICAgICAgICAgdGhpcy5pbmRleCArPSAyOwogICAgICAgIH0gZWxzZSBpZiAoZm4pIHsKICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCwKICAgICAgICAgICAgdGV4dDogdGhpcy5jaCwKICAgICAgICAgICAgZm46IGZuCiAgICAgICAgICB9KTsKICAgICAgICAgIHRoaXMuaW5kZXggKz0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdVbmV4cGVjdGVkIG5leHQgY2hhcmFjdGVyICcsIHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyAxKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0aGlzLnRva2VuczsKICB9LAoKICBpczogZnVuY3Rpb24oY2hhcnMpIHsKICAgIHJldHVybiBjaGFycy5pbmRleE9mKHRoaXMuY2gpICE9PSAtMTsKICB9LAoKICBwZWVrOiBmdW5jdGlvbihpKSB7CiAgICB2YXIgbnVtID0gaSB8fCAxOwogICAgcmV0dXJuICh0aGlzLmluZGV4ICsgbnVtIDwgdGhpcy50ZXh0Lmxlbmd0aCkgPyB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXggKyBudW0pIDogZmFsc2U7CiAgfSwKCiAgaXNOdW1iZXI6IGZ1bmN0aW9uKGNoKSB7CiAgICByZXR1cm4gKCcwJyA8PSBjaCAmJiBjaCA8PSAnOScpOwogIH0sCgogIGlzV2hpdGVzcGFjZTogZnVuY3Rpb24oY2gpIHsKICAgIC8vIElFIHRyZWF0cyBub24tYnJlYWtpbmcgc3BhY2UgYXMgXHUwMEEwCiAgICByZXR1cm4gKGNoID09PSAnICcgfHwgY2ggPT09ICdccicgfHwgY2ggPT09ICdcdCcgfHwKICAgICAgICAgICAgY2ggPT09ICdcbicgfHwgY2ggPT09ICdcdicgfHwgY2ggPT09ICdcdTAwQTAnKTsKICB9LAoKICBpc0lkZW50OiBmdW5jdGlvbihjaCkgewogICAgcmV0dXJuICgnYScgPD0gY2ggJiYgY2ggPD0gJ3onIHx8CiAgICAgICAgICAgICdBJyA8PSBjaCAmJiBjaCA8PSAnWicgfHwKICAgICAgICAgICAgJ18nID09PSBjaCB8fCBjaCA9PT0gJyQnKTsKICB9LAoKICBpc0V4cE9wZXJhdG9yOiBmdW5jdGlvbihjaCkgewogICAgcmV0dXJuIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycgfHwgdGhpcy5pc051bWJlcihjaCkpOwogIH0sCgogIHRocm93RXJyb3I6IGZ1bmN0aW9uKGVycm9yLCBzdGFydCwgZW5kKSB7CiAgICBlbmQgPSBlbmQgfHwgdGhpcy5pbmRleDsKICAgIHZhciBjb2xTdHIgPSAoaXNEZWZpbmVkKHN0YXJ0KQogICAgICAgICAgICA/ICdzICcgKyBzdGFydCArICAnLScgKyB0aGlzLmluZGV4ICsgJyBbJyArIHRoaXMudGV4dC5zdWJzdHJpbmcoc3RhcnQsIGVuZCkgKyAnXScKICAgICAgICAgICAgOiAnICcgKyBlbmQpOwogICAgdGhyb3cgJHBhcnNlTWluRXJyKCdsZXhlcnInLCAnTGV4ZXIgRXJyb3I6IHswfSBhdCBjb2x1bW57MX0gaW4gZXhwcmVzc2lvbiBbezJ9XS4nLAogICAgICAgIGVycm9yLCBjb2xTdHIsIHRoaXMudGV4dCk7CiAgfSwKCiAgcmVhZE51bWJlcjogZnVuY3Rpb24oKSB7CiAgICB2YXIgbnVtYmVyID0gJyc7CiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4OwogICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7CiAgICAgIHZhciBjaCA9IGxvd2VyY2FzZSh0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpKTsKICAgICAgaWYgKGNoID09ICcuJyB8fCB0aGlzLmlzTnVtYmVyKGNoKSkgewogICAgICAgIG51bWJlciArPSBjaDsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgcGVla0NoID0gdGhpcy5wZWVrKCk7CiAgICAgICAgaWYgKGNoID09ICdlJyAmJiB0aGlzLmlzRXhwT3BlcmF0b3IocGVla0NoKSkgewogICAgICAgICAgbnVtYmVyICs9IGNoOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0V4cE9wZXJhdG9yKGNoKSAmJgogICAgICAgICAgICBwZWVrQ2ggJiYgdGhpcy5pc051bWJlcihwZWVrQ2gpICYmCiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09ICdlJykgewogICAgICAgICAgbnVtYmVyICs9IGNoOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0V4cE9wZXJhdG9yKGNoKSAmJgogICAgICAgICAgICAoIXBlZWtDaCB8fCAhdGhpcy5pc051bWJlcihwZWVrQ2gpKSAmJgogICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PSAnZScpIHsKICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCBleHBvbmVudCcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5pbmRleCsrOwogICAgfQogICAgbnVtYmVyID0gMSAqIG51bWJlcjsKICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICBpbmRleDogc3RhcnQsCiAgICAgIHRleHQ6IG51bWJlciwKICAgICAgY29uc3RhbnQ6IHRydWUsCiAgICAgIGZuOiBmdW5jdGlvbigpIHsgcmV0dXJuIG51bWJlcjsgfQogICAgfSk7CiAgfSwKCiAgcmVhZElkZW50OiBmdW5jdGlvbigpIHsKICAgIHZhciBwYXJzZXIgPSB0aGlzOwoKICAgIHZhciBpZGVudCA9ICcnOwogICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDsKCiAgICB2YXIgbGFzdERvdCwgcGVla0luZGV4LCBtZXRob2ROYW1lLCBjaDsKCiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHsKICAgICAgY2ggPSB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpOwogICAgICBpZiAoY2ggPT09ICcuJyB8fCB0aGlzLmlzSWRlbnQoY2gpIHx8IHRoaXMuaXNOdW1iZXIoY2gpKSB7CiAgICAgICAgaWYgKGNoID09PSAnLicpIGxhc3REb3QgPSB0aGlzLmluZGV4OwogICAgICAgIGlkZW50ICs9IGNoOwogICAgICB9IGVsc2UgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIHRoaXMuaW5kZXgrKzsKICAgIH0KCiAgICAvL2NoZWNrIGlmIHRoaXMgaXMgbm90IGEgbWV0aG9kIGludm9jYXRpb24gYW5kIGlmIGl0IGlzIGJhY2sgb3V0IHRvIGxhc3QgZG90CiAgICBpZiAobGFzdERvdCkgewogICAgICBwZWVrSW5kZXggPSB0aGlzLmluZGV4OwogICAgICB3aGlsZSAocGVla0luZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkgewogICAgICAgIGNoID0gdGhpcy50ZXh0LmNoYXJBdChwZWVrSW5kZXgpOwogICAgICAgIGlmIChjaCA9PT0gJygnKSB7CiAgICAgICAgICBtZXRob2ROYW1lID0gaWRlbnQuc3Vic3RyKGxhc3REb3QgLSBzdGFydCArIDEpOwogICAgICAgICAgaWRlbnQgPSBpZGVudC5zdWJzdHIoMCwgbGFzdERvdCAtIHN0YXJ0KTsKICAgICAgICAgIHRoaXMuaW5kZXggPSBwZWVrSW5kZXg7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuaXNXaGl0ZXNwYWNlKGNoKSkgewogICAgICAgICAgcGVla0luZGV4Kys7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfQoKCiAgICB2YXIgdG9rZW4gPSB7CiAgICAgIGluZGV4OiBzdGFydCwKICAgICAgdGV4dDogaWRlbnQKICAgIH07CgogICAgdmFyIGZuID0gT1BFUkFUT1JTW2lkZW50XTsKCiAgICBpZiAoZm4pIHsKICAgICAgdG9rZW4uZm4gPSBmbjsKICAgICAgdG9rZW4uY29uc3RhbnQgPSB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGdldHRlciA9IGdldHRlckZuKGlkZW50LCB0aGlzLm9wdGlvbnMsIHRoaXMudGV4dCk7CiAgICAgIC8vIFRPRE8ocGVyZik6IGNvbnNpZGVyIGV4cG9zaW5nIHRoZSBnZXR0ZXIgcmVmZXJlbmNlCiAgICAgIHRva2VuLmZuID0gZXh0ZW5kKGZ1bmN0aW9uICRwYXJzZVBhdGhHZXR0ZXIoc2VsZiwgbG9jYWxzKSB7CiAgICAgICAgcmV0dXJuIGdldHRlcihzZWxmLCBsb2NhbHMpOwogICAgICB9LCB7CiAgICAgICAgYXNzaWduOiBmdW5jdGlvbihzZWxmLCB2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIHNldHRlcihzZWxmLCBpZGVudCwgdmFsdWUsIHBhcnNlci50ZXh0KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIHRoaXMudG9rZW5zLnB1c2godG9rZW4pOwoKICAgIGlmIChtZXRob2ROYW1lKSB7CiAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgIGluZGV4OiBsYXN0RG90LAogICAgICAgIHRleHQ6ICcuJwogICAgICB9KTsKICAgICAgdGhpcy50b2tlbnMucHVzaCh7CiAgICAgICAgaW5kZXg6IGxhc3REb3QgKyAxLAogICAgICAgIHRleHQ6IG1ldGhvZE5hbWUKICAgICAgfSk7CiAgICB9CiAgfSwKCiAgcmVhZFN0cmluZzogZnVuY3Rpb24ocXVvdGUpIHsKICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7CiAgICB0aGlzLmluZGV4Kys7CiAgICB2YXIgc3RyaW5nID0gJyc7CiAgICB2YXIgcmF3U3RyaW5nID0gcXVvdGU7CiAgICB2YXIgZXNjYXBlID0gZmFsc2U7CiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHsKICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTsKICAgICAgcmF3U3RyaW5nICs9IGNoOwogICAgICBpZiAoZXNjYXBlKSB7CiAgICAgICAgaWYgKGNoID09PSAndScpIHsKICAgICAgICAgIHZhciBoZXggPSB0aGlzLnRleHQuc3Vic3RyaW5nKHRoaXMuaW5kZXggKyAxLCB0aGlzLmluZGV4ICsgNSk7CiAgICAgICAgICBpZiAoIWhleC5tYXRjaCgvW1xkYS1mXXs0fS9pKSkKICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXHUnICsgaGV4ICsgJ10nKTsKICAgICAgICAgIHRoaXMuaW5kZXggKz0gNDsKICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwgMTYpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHJlcCA9IEVTQ0FQRVtjaF07CiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAocmVwIHx8IGNoKTsKICAgICAgICB9CiAgICAgICAgZXNjYXBlID0gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXCcpIHsKICAgICAgICBlc2NhcGUgPSB0cnVlOwogICAgICB9IGVsc2UgaWYgKGNoID09PSBxdW90ZSkgewogICAgICAgIHRoaXMuaW5kZXgrKzsKICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHsKICAgICAgICAgIGluZGV4OiBzdGFydCwKICAgICAgICAgIHRleHQ6IHJhd1N0cmluZywKICAgICAgICAgIHN0cmluZzogc3RyaW5nLAogICAgICAgICAgY29uc3RhbnQ6IHRydWUsCiAgICAgICAgICBmbjogZnVuY3Rpb24oKSB7IHJldHVybiBzdHJpbmc7IH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RyaW5nICs9IGNoOwogICAgICB9CiAgICAgIHRoaXMuaW5kZXgrKzsKICAgIH0KICAgIHRoaXMudGhyb3dFcnJvcignVW50ZXJtaW5hdGVkIHF1b3RlJywgc3RhcnQpOwogIH0KfTsKCgovKioKICogQGNvbnN0cnVjdG9yCiAqLwp2YXIgUGFyc2VyID0gZnVuY3Rpb24gKGxleGVyLCAkZmlsdGVyLCBvcHRpb25zKSB7CiAgdGhpcy5sZXhlciA9IGxleGVyOwogIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7CiAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKfTsKClBhcnNlci5aRVJPID0gZXh0ZW5kKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gMDsKfSwgewogIGNvbnN0YW50OiB0cnVlCn0pOwoKUGFyc2VyLnByb3RvdHlwZSA9IHsKICBjb25zdHJ1Y3RvcjogUGFyc2VyLAoKICBwYXJzZTogZnVuY3Rpb24gKHRleHQpIHsKICAgIHRoaXMudGV4dCA9IHRleHQ7CiAgICB0aGlzLnRva2VucyA9IHRoaXMubGV4ZXIubGV4KHRleHQpOwoKICAgIHZhciB2YWx1ZSA9IHRoaXMuc3RhdGVtZW50cygpOwoKICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggIT09IDApIHsKICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBhbiB1bmV4cGVjdGVkIHRva2VuJywgdGhpcy50b2tlbnNbMF0pOwogICAgfQoKICAgIHZhbHVlLmxpdGVyYWwgPSAhIXZhbHVlLmxpdGVyYWw7CiAgICB2YWx1ZS5jb25zdGFudCA9ICEhdmFsdWUuY29uc3RhbnQ7CgogICAgcmV0dXJuIHZhbHVlOwogIH0sCgogIHByaW1hcnk6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBwcmltYXJ5OwogICAgaWYgKHRoaXMuZXhwZWN0KCcoJykpIHsKICAgICAgcHJpbWFyeSA9IHRoaXMuZmlsdGVyQ2hhaW4oKTsKICAgICAgdGhpcy5jb25zdW1lKCcpJyk7CiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCdbJykpIHsKICAgICAgcHJpbWFyeSA9IHRoaXMuYXJyYXlEZWNsYXJhdGlvbigpOwogICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdCgneycpKSB7CiAgICAgIHByaW1hcnkgPSB0aGlzLm9iamVjdCgpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoKTsKICAgICAgcHJpbWFyeSA9IHRva2VuLmZuOwogICAgICBpZiAoIXByaW1hcnkpIHsKICAgICAgICB0aGlzLnRocm93RXJyb3IoJ25vdCBhIHByaW1hcnkgZXhwcmVzc2lvbicsIHRva2VuKTsKICAgICAgfQogICAgICBpZiAodG9rZW4uY29uc3RhbnQpIHsKICAgICAgICBwcmltYXJ5LmNvbnN0YW50ID0gdHJ1ZTsKICAgICAgICBwcmltYXJ5LmxpdGVyYWwgPSB0cnVlOwogICAgICB9CiAgICB9CgogICAgdmFyIG5leHQsIGNvbnRleHQ7CiAgICB3aGlsZSAoKG5leHQgPSB0aGlzLmV4cGVjdCgnKCcsICdbJywgJy4nKSkpIHsKICAgICAgaWYgKG5leHQudGV4dCA9PT0gJygnKSB7CiAgICAgICAgcHJpbWFyeSA9IHRoaXMuZnVuY3Rpb25DYWxsKHByaW1hcnksIGNvbnRleHQpOwogICAgICAgIGNvbnRleHQgPSBudWxsOwogICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJ1snKSB7CiAgICAgICAgY29udGV4dCA9IHByaW1hcnk7CiAgICAgICAgcHJpbWFyeSA9IHRoaXMub2JqZWN0SW5kZXgocHJpbWFyeSk7CiAgICAgIH0gZWxzZSBpZiAobmV4dC50ZXh0ID09PSAnLicpIHsKICAgICAgICBjb250ZXh0ID0gcHJpbWFyeTsKICAgICAgICBwcmltYXJ5ID0gdGhpcy5maWVsZEFjY2VzcyhwcmltYXJ5KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0lNUE9TU0lCTEUnKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHByaW1hcnk7CiAgfSwKCiAgdGhyb3dFcnJvcjogZnVuY3Rpb24obXNnLCB0b2tlbikgewogICAgdGhyb3cgJHBhcnNlTWluRXJyKCdzeW50YXgnLAogICAgICAgICdTeW50YXggRXJyb3I6IFRva2VuIFwnezB9XCcgezF9IGF0IGNvbHVtbiB7Mn0gb2YgdGhlIGV4cHJlc3Npb24gW3szfV0gc3RhcnRpbmcgYXQgW3s0fV0uJywKICAgICAgICAgIHRva2VuLnRleHQsIG1zZywgKHRva2VuLmluZGV4ICsgMSksIHRoaXMudGV4dCwgdGhpcy50ZXh0LnN1YnN0cmluZyh0b2tlbi5pbmRleCkpOwogIH0sCgogIHBlZWtUb2tlbjogZnVuY3Rpb24oKSB7CiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID09PSAwKQogICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3Vlb2UnLCAnVW5leHBlY3RlZCBlbmQgb2YgZXhwcmVzc2lvbjogezB9JywgdGhpcy50ZXh0KTsKICAgIHJldHVybiB0aGlzLnRva2Vuc1swXTsKICB9LAoKICBwZWVrOiBmdW5jdGlvbihlMSwgZTIsIGUzLCBlNCkgewogICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA+IDApIHsKICAgICAgdmFyIHRva2VuID0gdGhpcy50b2tlbnNbMF07CiAgICAgIHZhciB0ID0gdG9rZW4udGV4dDsKICAgICAgaWYgKHQgPT09IGUxIHx8IHQgPT09IGUyIHx8IHQgPT09IGUzIHx8IHQgPT09IGU0IHx8CiAgICAgICAgICAoIWUxICYmICFlMiAmJiAhZTMgJiYgIWU0KSkgewogICAgICAgIHJldHVybiB0b2tlbjsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0sCgogIGV4cGVjdDogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpewogICAgdmFyIHRva2VuID0gdGhpcy5wZWVrKGUxLCBlMiwgZTMsIGU0KTsKICAgIGlmICh0b2tlbikgewogICAgICB0aGlzLnRva2Vucy5zaGlmdCgpOwogICAgICByZXR1cm4gdG9rZW47CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfSwKCiAgY29uc3VtZTogZnVuY3Rpb24oZTEpewogICAgaWYgKCF0aGlzLmV4cGVjdChlMSkpIHsKICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyB1bmV4cGVjdGVkLCBleHBlY3RpbmcgWycgKyBlMSArICddJywgdGhpcy5wZWVrKCkpOwogICAgfQogIH0sCgogIHVuYXJ5Rm46IGZ1bmN0aW9uKGZuLCByaWdodCkgewogICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbihzZWxmLCBsb2NhbHMpIHsKICAgICAgcmV0dXJuIGZuKHNlbGYsIGxvY2FscywgcmlnaHQpOwogICAgfSwgewogICAgICBjb25zdGFudDpyaWdodC5jb25zdGFudAogICAgfSk7CiAgfSwKCiAgdGVybmFyeUZuOiBmdW5jdGlvbihsZWZ0LCBtaWRkbGUsIHJpZ2h0KXsKICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oc2VsZiwgbG9jYWxzKXsKICAgICAgcmV0dXJuIGxlZnQoc2VsZiwgbG9jYWxzKSA/IG1pZGRsZShzZWxmLCBsb2NhbHMpIDogcmlnaHQoc2VsZiwgbG9jYWxzKTsKICAgIH0sIHsKICAgICAgY29uc3RhbnQ6IGxlZnQuY29uc3RhbnQgJiYgbWlkZGxlLmNvbnN0YW50ICYmIHJpZ2h0LmNvbnN0YW50CiAgICB9KTsKICB9LAoKICBiaW5hcnlGbjogZnVuY3Rpb24obGVmdCwgZm4sIHJpZ2h0KSB7CiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKHNlbGYsIGxvY2FscykgewogICAgICByZXR1cm4gZm4oc2VsZiwgbG9jYWxzLCBsZWZ0LCByaWdodCk7CiAgICB9LCB7CiAgICAgIGNvbnN0YW50OmxlZnQuY29uc3RhbnQgJiYgcmlnaHQuY29uc3RhbnQKICAgIH0pOwogIH0sCgogIHN0YXRlbWVudHM6IGZ1bmN0aW9uKCkgewogICAgdmFyIHN0YXRlbWVudHMgPSBbXTsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiAwICYmICF0aGlzLnBlZWsoJ30nLCAnKScsICc7JywgJ10nKSkKICAgICAgICBzdGF0ZW1lbnRzLnB1c2godGhpcy5maWx0ZXJDaGFpbigpKTsKICAgICAgaWYgKCF0aGlzLmV4cGVjdCgnOycpKSB7CiAgICAgICAgLy8gb3B0aW1pemUgZm9yIHRoZSBjb21tb24gY2FzZSB3aGVyZSB0aGVyZSBpcyBvbmx5IG9uZSBzdGF0ZW1lbnQuCiAgICAgICAgLy8gVE9ETyhzaXplKTogbWF5YmUgd2Ugc2hvdWxkIG5vdCBzdXBwb3J0IG11bHRpcGxlIHN0YXRlbWVudHM/CiAgICAgICAgcmV0dXJuIChzdGF0ZW1lbnRzLmxlbmd0aCA9PT0gMSkKICAgICAgICAgICAgPyBzdGF0ZW1lbnRzWzBdCiAgICAgICAgICAgIDogZnVuY3Rpb24oc2VsZiwgbG9jYWxzKSB7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWU7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlbWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlbWVudCA9IHN0YXRlbWVudHNbaV07CiAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHN0YXRlbWVudChzZWxmLCBsb2NhbHMpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgICAgfTsKICAgICAgfQogICAgfQogIH0sCgogIGZpbHRlckNoYWluOiBmdW5jdGlvbigpIHsKICAgIHZhciBsZWZ0ID0gdGhpcy5leHByZXNzaW9uKCk7CiAgICB2YXIgdG9rZW47CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJ3wnKSkpIHsKICAgICAgICBsZWZ0ID0gdGhpcy5iaW5hcnlGbihsZWZ0LCB0b2tlbi5mbiwgdGhpcy5maWx0ZXIoKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGxlZnQ7CiAgICAgIH0KICAgIH0KICB9LAoKICBmaWx0ZXI6IGZ1bmN0aW9uKCkgewogICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoKTsKICAgIHZhciBmbiA9IHRoaXMuJGZpbHRlcih0b2tlbi50ZXh0KTsKICAgIHZhciBhcmdzRm47CiAgICB2YXIgYXJnczsKCiAgICBpZiAodGhpcy5wZWVrKCc6JykpIHsKICAgICAgYXJnc0ZuID0gW107CiAgICAgIGFyZ3MgPSBbXTsgLy8gd2UgY2FuIHNhZmVseSByZXVzZSB0aGUgYXJyYXkKICAgICAgd2hpbGUgKHRoaXMuZXhwZWN0KCc6JykpIHsKICAgICAgICBhcmdzRm4ucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdmFsdWVGbihmdW5jdGlvbiAkcGFyc2VGaWx0ZXIoc2VsZiwgbG9jYWxzLCBpbnB1dCkgewogICAgICBpZiAoYXJncykgewogICAgICAgIGFyZ3NbMF0gPSBpbnB1dDsKCiAgICAgICAgdmFyIGkgPSBhcmdzRm4ubGVuZ3RoOwogICAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICAgIGFyZ3NbaSArIDFdID0gYXJnc0ZuW2ldKHNlbGYsIGxvY2Fscyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZm4uYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZuKGlucHV0KTsKICAgIH0pOwogIH0sCgogIGV4cHJlc3Npb246IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuYXNzaWdubWVudCgpOwogIH0sCgogIGFzc2lnbm1lbnQ6IGZ1bmN0aW9uKCkgewogICAgdmFyIGxlZnQgPSB0aGlzLnRlcm5hcnkoKTsKICAgIHZhciByaWdodDsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPScpKSkgewogICAgICBpZiAoIWxlZnQuYXNzaWduKSB7CiAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdpbXBsaWVzIGFzc2lnbm1lbnQgYnV0IFsnICsKICAgICAgICAgICAgdGhpcy50ZXh0LnN1YnN0cmluZygwLCB0b2tlbi5pbmRleCkgKyAnXSBjYW4gbm90IGJlIGFzc2lnbmVkIHRvJywgdG9rZW4pOwogICAgICB9CiAgICAgIHJpZ2h0ID0gdGhpcy50ZXJuYXJ5KCk7CiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzKSB7CiAgICAgICAgcmV0dXJuIGxlZnQuYXNzaWduKHNjb3BlLCByaWdodChzY29wZSwgbG9jYWxzKSwgbG9jYWxzKTsKICAgICAgfTsKICAgIH0KICAgIHJldHVybiBsZWZ0OwogIH0sCgogIHRlcm5hcnk6IGZ1bmN0aW9uKCkgewogICAgdmFyIGxlZnQgPSB0aGlzLmxvZ2ljYWxPUigpOwogICAgdmFyIG1pZGRsZTsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPycpKSkgewogICAgICBtaWRkbGUgPSB0aGlzLmFzc2lnbm1lbnQoKTsKICAgICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc6JykpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMudGVybmFyeUZuKGxlZnQsIG1pZGRsZSwgdGhpcy5hc3NpZ25tZW50KCkpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudGhyb3dFcnJvcignZXhwZWN0ZWQgOicsIHRva2VuKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGxlZnQ7CiAgICB9CiAgfSwKCiAgbG9naWNhbE9SOiBmdW5jdGlvbigpIHsKICAgIHZhciBsZWZ0ID0gdGhpcy5sb2dpY2FsQU5EKCk7CiAgICB2YXIgdG9rZW47CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJ3x8JykpKSB7CiAgICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHRoaXMubG9naWNhbEFORCgpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbGVmdDsKICAgICAgfQogICAgfQogIH0sCgogIGxvZ2ljYWxBTkQ6IGZ1bmN0aW9uKCkgewogICAgdmFyIGxlZnQgPSB0aGlzLmVxdWFsaXR5KCk7CiAgICB2YXIgdG9rZW47CiAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJyYmJykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLmxvZ2ljYWxBTkQoKSk7CiAgICB9CiAgICByZXR1cm4gbGVmdDsKICB9LAoKICBlcXVhbGl0eTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMucmVsYXRpb25hbCgpOwogICAgdmFyIHRva2VuOwogICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc9PScsJyE9JywnPT09JywnIT09JykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLmVxdWFsaXR5KCkpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfSwKCiAgcmVsYXRpb25hbDogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMuYWRkaXRpdmUoKTsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPCcsICc+JywgJzw9JywgJz49JykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLnJlbGF0aW9uYWwoKSk7CiAgICB9CiAgICByZXR1cm4gbGVmdDsKICB9LAoKICBhZGRpdGl2ZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMubXVsdGlwbGljYXRpdmUoKTsKICAgIHZhciB0b2tlbjsKICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKycsJy0nKSkpIHsKICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHRoaXMubXVsdGlwbGljYXRpdmUoKSk7CiAgICB9CiAgICByZXR1cm4gbGVmdDsKICB9LAoKICBtdWx0aXBsaWNhdGl2ZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMudW5hcnkoKTsKICAgIHZhciB0b2tlbjsKICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKicsJy8nLCclJykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLnVuYXJ5KCkpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfSwKCiAgdW5hcnk6IGZ1bmN0aW9uKCkgewogICAgdmFyIHRva2VuOwogICAgaWYgKHRoaXMuZXhwZWN0KCcrJykpIHsKICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeSgpOwogICAgfSBlbHNlIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnLScpKSkgewogICAgICByZXR1cm4gdGhpcy5iaW5hcnlGbihQYXJzZXIuWkVSTywgdG9rZW4uZm4sIHRoaXMudW5hcnkoKSk7CiAgICB9IGVsc2UgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCchJykpKSB7CiAgICAgIHJldHVybiB0aGlzLnVuYXJ5Rm4odG9rZW4uZm4sIHRoaXMudW5hcnkoKSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gdGhpcy5wcmltYXJ5KCk7CiAgICB9CiAgfSwKCiAgZmllbGRBY2Nlc3M6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgdmFyIHBhcnNlciA9IHRoaXM7CiAgICB2YXIgZmllbGQgPSB0aGlzLmV4cGVjdCgpLnRleHQ7CiAgICB2YXIgZ2V0dGVyID0gZ2V0dGVyRm4oZmllbGQsIHRoaXMub3B0aW9ucywgdGhpcy50ZXh0KTsKCiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRwYXJzZUZpZWxkQWNjZXNzKHNjb3BlLCBsb2NhbHMsIHNlbGYpIHsKICAgICAgcmV0dXJuIGdldHRlcihzZWxmIHx8IG9iamVjdChzY29wZSwgbG9jYWxzKSk7CiAgICB9LCB7CiAgICAgIGFzc2lnbjogZnVuY3Rpb24oc2NvcGUsIHZhbHVlLCBsb2NhbHMpIHsKICAgICAgICB2YXIgbyA9IG9iamVjdChzY29wZSwgbG9jYWxzKTsKICAgICAgICBpZiAoIW8pIG9iamVjdC5hc3NpZ24oc2NvcGUsIG8gPSB7fSk7CiAgICAgICAgcmV0dXJuIHNldHRlcihvLCBmaWVsZCwgdmFsdWUsIHBhcnNlci50ZXh0KTsKICAgICAgfQogICAgfSk7CiAgfSwKCiAgb2JqZWN0SW5kZXg6IGZ1bmN0aW9uKG9iaikgewogICAgdmFyIHBhcnNlciA9IHRoaXM7CgogICAgdmFyIGluZGV4Rm4gPSB0aGlzLmV4cHJlc3Npb24oKTsKICAgIHRoaXMuY29uc3VtZSgnXScpOwoKICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gJHBhcnNlT2JqZWN0SW5kZXgoc2VsZiwgbG9jYWxzKSB7CiAgICAgIHZhciBvID0gb2JqKHNlbGYsIGxvY2FscyksCiAgICAgICAgICBpID0gaW5kZXhGbihzZWxmLCBsb2NhbHMpLAogICAgICAgICAgdjsKCiAgICAgIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGksIHBhcnNlci50ZXh0KTsKICAgICAgaWYgKCFvKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICB2ID0gZW5zdXJlU2FmZU9iamVjdChvW2ldLCBwYXJzZXIudGV4dCk7CiAgICAgIHJldHVybiB2OwogICAgfSwgewogICAgICBhc3NpZ246IGZ1bmN0aW9uKHNlbGYsIHZhbHVlLCBsb2NhbHMpIHsKICAgICAgICB2YXIga2V5ID0gZW5zdXJlU2FmZU1lbWJlck5hbWUoaW5kZXhGbihzZWxmLCBsb2NhbHMpLCBwYXJzZXIudGV4dCk7CiAgICAgICAgLy8gcHJldmVudCBvdmVyd3JpdGluZyBvZiBGdW5jdGlvbi5jb25zdHJ1Y3RvciB3aGljaCB3b3VsZCBicmVhayBlbnN1cmVTYWZlT2JqZWN0IGNoZWNrCiAgICAgICAgdmFyIG8gPSBlbnN1cmVTYWZlT2JqZWN0KG9iaihzZWxmLCBsb2NhbHMpLCBwYXJzZXIudGV4dCk7CiAgICAgICAgaWYgKCFvKSBvYmouYXNzaWduKHNlbGYsIG8gPSB7fSk7CiAgICAgICAgcmV0dXJuIG9ba2V5XSA9IHZhbHVlOwogICAgICB9CiAgICB9KTsKICB9LAoKICBmdW5jdGlvbkNhbGw6IGZ1bmN0aW9uKGZuR2V0dGVyLCBjb250ZXh0R2V0dGVyKSB7CiAgICB2YXIgYXJnc0ZuID0gW107CiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnKScpIHsKICAgICAgZG8gewogICAgICAgIGFyZ3NGbi5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTsKICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7CiAgICB9CiAgICB0aGlzLmNvbnN1bWUoJyknKTsKCiAgICB2YXIgZXhwcmVzc2lvblRleHQgPSB0aGlzLnRleHQ7CiAgICAvLyB3ZSBjYW4gc2FmZWx5IHJldXNlIHRoZSBhcnJheSBhY3Jvc3MgaW52b2NhdGlvbnMKICAgIHZhciBhcmdzID0gYXJnc0ZuLmxlbmd0aCA/IFtdIDogbnVsbDsKCiAgICByZXR1cm4gZnVuY3Rpb24gJHBhcnNlRnVuY3Rpb25DYWxsKHNjb3BlLCBsb2NhbHMpIHsKICAgICAgdmFyIGNvbnRleHQgPSBjb250ZXh0R2V0dGVyID8gY29udGV4dEdldHRlcihzY29wZSwgbG9jYWxzKSA6IHNjb3BlOwogICAgICB2YXIgZm4gPSBmbkdldHRlcihzY29wZSwgbG9jYWxzLCBjb250ZXh0KSB8fCBub29wOwoKICAgICAgaWYgKGFyZ3MpIHsKICAgICAgICB2YXIgaSA9IGFyZ3NGbi5sZW5ndGg7CiAgICAgICAgd2hpbGUgKGktLSkgewogICAgICAgICAgYXJnc1tpXSA9IGFyZ3NGbltpXShzY29wZSwgbG9jYWxzKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGVuc3VyZVNhZmVPYmplY3QoY29udGV4dCwgZXhwcmVzc2lvblRleHQpOwogICAgICBlbnN1cmVTYWZlRnVuY3Rpb24oZm4sIGV4cHJlc3Npb25UZXh0KTsKCiAgICAgIC8vIElFIHN0dXBpZGl0eSEgKElFIGRvZXNuJ3QgaGF2ZSBhcHBseSBmb3Igc29tZSBuYXRpdmUgZnVuY3Rpb25zKQogICAgICB2YXIgdiA9IGZuLmFwcGx5CiAgICAgICAgICAgID8gZm4uYXBwbHkoY29udGV4dCwgYXJncykKICAgICAgICAgICAgOiBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTsKCiAgICAgIHJldHVybiBlbnN1cmVTYWZlT2JqZWN0KHYsIGV4cHJlc3Npb25UZXh0KTsKICAgIH07CiAgfSwKCiAgLy8gVGhpcyBpcyB1c2VkIHdpdGgganNvbiBhcnJheSBkZWNsYXJhdGlvbgogIGFycmF5RGVjbGFyYXRpb246IGZ1bmN0aW9uICgpIHsKICAgIHZhciBlbGVtZW50Rm5zID0gW107CiAgICB2YXIgYWxsQ29uc3RhbnQgPSB0cnVlOwogICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJ10nKSB7CiAgICAgIGRvIHsKICAgICAgICBpZiAodGhpcy5wZWVrKCddJykpIHsKICAgICAgICAgIC8vIFN1cHBvcnQgdHJhaWxpbmcgY29tbWFzIHBlciBFUzUuMS4KICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICB2YXIgZWxlbWVudEZuID0gdGhpcy5leHByZXNzaW9uKCk7CiAgICAgICAgZWxlbWVudEZucy5wdXNoKGVsZW1lbnRGbik7CiAgICAgICAgaWYgKCFlbGVtZW50Rm4uY29uc3RhbnQpIHsKICAgICAgICAgIGFsbENvbnN0YW50ID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTsKICAgIH0KICAgIHRoaXMuY29uc3VtZSgnXScpOwoKICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oc2VsZiwgbG9jYWxzKSB7CiAgICAgIHZhciBhcnJheSA9IFtdOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRGbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICBhcnJheS5wdXNoKGVsZW1lbnRGbnNbaV0oc2VsZiwgbG9jYWxzKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIGFycmF5OwogICAgfSwgewogICAgICBsaXRlcmFsOiB0cnVlLAogICAgICBjb25zdGFudDogYWxsQ29uc3RhbnQKICAgIH0pOwogIH0sCgogIG9iamVjdDogZnVuY3Rpb24gKCkgewogICAgdmFyIGtleVZhbHVlcyA9IFtdOwogICAgdmFyIGFsbENvbnN0YW50ID0gdHJ1ZTsKICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICd9JykgewogICAgICBkbyB7CiAgICAgICAgaWYgKHRoaXMucGVlaygnfScpKSB7CiAgICAgICAgICAvLyBTdXBwb3J0IHRyYWlsaW5nIGNvbW1hcyBwZXIgRVM1LjEuCiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoKSwKICAgICAgICBrZXkgPSB0b2tlbi5zdHJpbmcgfHwgdG9rZW4udGV4dDsKICAgICAgICB0aGlzLmNvbnN1bWUoJzonKTsKICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oKTsKICAgICAgICBrZXlWYWx1ZXMucHVzaCh7a2V5OiBrZXksIHZhbHVlOiB2YWx1ZX0pOwogICAgICAgIGlmICghdmFsdWUuY29uc3RhbnQpIHsKICAgICAgICAgIGFsbENvbnN0YW50ID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTsKICAgIH0KICAgIHRoaXMuY29uc3VtZSgnfScpOwoKICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oc2VsZiwgbG9jYWxzKSB7CiAgICAgIHZhciBvYmplY3QgPSB7fTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlWYWx1ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIga2V5VmFsdWUgPSBrZXlWYWx1ZXNbaV07CiAgICAgICAgb2JqZWN0W2tleVZhbHVlLmtleV0gPSBrZXlWYWx1ZS52YWx1ZShzZWxmLCBsb2NhbHMpOwogICAgICB9CiAgICAgIHJldHVybiBvYmplY3Q7CiAgICB9LCB7CiAgICAgIGxpdGVyYWw6IHRydWUsCiAgICAgIGNvbnN0YW50OiBhbGxDb25zdGFudAogICAgfSk7CiAgfQp9OwoKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vIFBhcnNlciBoZWxwZXIgZnVuY3Rpb25zCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgpmdW5jdGlvbiBzZXR0ZXIob2JqLCBwYXRoLCBzZXRWYWx1ZSwgZnVsbEV4cCkgewoKICB2YXIgZWxlbWVudCA9IHBhdGguc3BsaXQoJy4nKSwga2V5OwogIGZvciAodmFyIGkgPSAwOyBlbGVtZW50Lmxlbmd0aCA+IDE7IGkrKykgewogICAga2V5ID0gZW5zdXJlU2FmZU1lbWJlck5hbWUoZWxlbWVudC5zaGlmdCgpLCBmdWxsRXhwKTsKICAgIHZhciBwcm9wZXJ0eU9iaiA9IG9ialtrZXldOwogICAgaWYgKCFwcm9wZXJ0eU9iaikgewogICAgICBwcm9wZXJ0eU9iaiA9IHt9OwogICAgICBvYmpba2V5XSA9IHByb3BlcnR5T2JqOwogICAgfQogICAgb2JqID0gcHJvcGVydHlPYmo7CiAgfQogIGtleSA9IGVuc3VyZVNhZmVNZW1iZXJOYW1lKGVsZW1lbnQuc2hpZnQoKSwgZnVsbEV4cCk7CiAgZW5zdXJlU2FmZU9iamVjdChvYmosIGZ1bGxFeHApOwogIGVuc3VyZVNhZmVPYmplY3Qob2JqW2tleV0sIGZ1bGxFeHApOwogIG9ialtrZXldID0gc2V0VmFsdWU7CiAgcmV0dXJuIHNldFZhbHVlOwp9Cgp2YXIgZ2V0dGVyRm5DYWNoZSA9IGNyZWF0ZU1hcCgpOwoKLyoqCiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSAiQmxhY2sgSG9sZSIgdmFyaWFudCBmcm9tOgogKiAtIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXJqcy1wYXJzZS1nZXR0ZXIvNAogKiAtIGh0dHA6Ly9qc3BlcmYuY29tL3BhdGgtZXZhbHVhdGlvbi1zaW1wbGlmaWVkLzcKICovCmZ1bmN0aW9uIGNzcFNhZmVHZXR0ZXJGbihrZXkwLCBrZXkxLCBrZXkyLCBrZXkzLCBrZXk0LCBmdWxsRXhwKSB7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MCwgZnVsbEV4cCk7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MSwgZnVsbEV4cCk7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MiwgZnVsbEV4cCk7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MywgZnVsbEV4cCk7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5NCwgZnVsbEV4cCk7CgogIHJldHVybiBmdW5jdGlvbiBjc3BTYWZlR2V0dGVyKHNjb3BlLCBsb2NhbHMpIHsKICAgIHZhciBwYXRoVmFsID0gKGxvY2FscyAmJiBsb2NhbHMuaGFzT3duUHJvcGVydHkoa2V5MCkpID8gbG9jYWxzIDogc2NvcGU7CgogICAgaWYgKHBhdGhWYWwgPT0gbnVsbCkgcmV0dXJuIHBhdGhWYWw7CiAgICBwYXRoVmFsID0gcGF0aFZhbFtrZXkwXTsKCiAgICBpZiAoIWtleTEpIHJldHVybiBwYXRoVmFsOwogICAgaWYgKHBhdGhWYWwgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDsKICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTFdOwoKICAgIGlmICgha2V5MikgcmV0dXJuIHBhdGhWYWw7CiAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkOwogICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5Ml07CgogICAgaWYgKCFrZXkzKSByZXR1cm4gcGF0aFZhbDsKICAgIGlmIChwYXRoVmFsID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7CiAgICBwYXRoVmFsID0gcGF0aFZhbFtrZXkzXTsKCiAgICBpZiAoIWtleTQpIHJldHVybiBwYXRoVmFsOwogICAgaWYgKHBhdGhWYWwgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDsKICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTRdOwoKICAgIHJldHVybiBwYXRoVmFsOwogIH07Cn0KCmZ1bmN0aW9uIGdldHRlckZuKHBhdGgsIG9wdGlvbnMsIGZ1bGxFeHApIHsKICB2YXIgZm4gPSBnZXR0ZXJGbkNhY2hlW3BhdGhdOwoKICBpZiAoZm4pIHJldHVybiBmbjsKCiAgdmFyIHBhdGhLZXlzID0gcGF0aC5zcGxpdCgnLicpLAogICAgICBwYXRoS2V5c0xlbmd0aCA9IHBhdGhLZXlzLmxlbmd0aDsKCiAgLy8gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLXBhcnNlLWdldHRlci82CiAgaWYgKG9wdGlvbnMuY3NwKSB7CiAgICBpZiAocGF0aEtleXNMZW5ndGggPCA2KSB7CiAgICAgIGZuID0gY3NwU2FmZUdldHRlckZuKHBhdGhLZXlzWzBdLCBwYXRoS2V5c1sxXSwgcGF0aEtleXNbMl0sIHBhdGhLZXlzWzNdLCBwYXRoS2V5c1s0XSwgZnVsbEV4cCk7CiAgICB9IGVsc2UgewogICAgICBmbiA9IGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMpIHsKICAgICAgICB2YXIgaSA9IDAsIHZhbDsKICAgICAgICBkbyB7CiAgICAgICAgICB2YWwgPSBjc3BTYWZlR2V0dGVyRm4ocGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwgcGF0aEtleXNbaSsrXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoS2V5c1tpKytdLCBmdWxsRXhwKShzY29wZSwgbG9jYWxzKTsKCiAgICAgICAgICBsb2NhbHMgPSB1bmRlZmluZWQ7IC8vIGNsZWFyIGFmdGVyIGZpcnN0IGl0ZXJhdGlvbgogICAgICAgICAgc2NvcGUgPSB2YWw7CiAgICAgICAgfSB3aGlsZSAoaSA8IHBhdGhLZXlzTGVuZ3RoKTsKICAgICAgICByZXR1cm4gdmFsOwogICAgICB9OwogICAgfQogIH0gZWxzZSB7CiAgICB2YXIgY29kZSA9ICcnOwogICAgZm9yRWFjaChwYXRoS2V5cywgZnVuY3Rpb24oa2V5LCBpbmRleCkgewogICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXksIGZ1bGxFeHApOwogICAgICBjb2RlICs9ICdpZihzID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG4nICsKICAgICAgICAgICAgICAncz0nKyAoaW5kZXgKICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHNpbXBseSBkZXJlZmVyZW5jZSAncycgb24gYW55IC5kb3Qgbm90YXRpb24KICAgICAgICAgICAgICAgICAgICAgID8gJ3MnCiAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgaWYgd2UgYXJlIGZpcnN0IHRoZW4gd2UgY2hlY2sgbG9jYWxzIGZpcnN0LCBhbmQgaWYgc28gcmVhZCBpdCBmaXJzdAogICAgICAgICAgICAgICAgICAgICAgOiAnKChsJiZsLmhhc093blByb3BlcnR5KCInICsga2V5ICsgJyIpKT9sOnMpJykgKyAnLicgKyBrZXkgKyAnO1xuJzsKICAgIH0pOwogICAgY29kZSArPSAncmV0dXJuIHM7JzsKCiAgICAvKiBqc2hpbnQgLVcwNTQgKi8KICAgIHZhciBldmFsZWRGbkdldHRlciA9IG5ldyBGdW5jdGlvbigncycsICdsJywgY29kZSk7IC8vIHM9c2NvcGUsIGw9bG9jYWxzCiAgICAvKiBqc2hpbnQgK1cwNTQgKi8KICAgIGV2YWxlZEZuR2V0dGVyLnRvU3RyaW5nID0gdmFsdWVGbihjb2RlKTsKICAgIGZuID0gZXZhbGVkRm5HZXR0ZXI7CiAgfQoKICBnZXR0ZXJGbkNhY2hlW3BhdGhdID0gZm47CiAgcmV0dXJuIGZuOwp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRwYXJzZQogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICoKICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uCiAqCiAqIGBgYGpzCiAqICAgdmFyIGdldHRlciA9ICRwYXJzZSgndXNlci5uYW1lJyk7CiAqICAgdmFyIHNldHRlciA9IGdldHRlci5hc3NpZ247CiAqICAgdmFyIGNvbnRleHQgPSB7dXNlcjp7bmFtZTonYW5ndWxhcid9fTsKICogICB2YXIgbG9jYWxzID0ge3VzZXI6e25hbWU6J2xvY2FsJ319OwogKgogKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCkpLnRvRXF1YWwoJ2FuZ3VsYXInKTsKICogICBzZXR0ZXIoY29udGV4dCwgJ25ld1ZhbHVlJyk7CiAqICAgZXhwZWN0KGNvbnRleHQudXNlci5uYW1lKS50b0VxdWFsKCduZXdWYWx1ZScpOwogKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCwgbG9jYWxzKSkudG9FcXVhbCgnbG9jYWwnKTsKICogYGBgCiAqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuCiAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAqCiAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3MKICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4KICogICAgICBgY29udGV4dGAuCiAqCiAqICAgIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBhbHNvIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6CiAqICAgICAgKiBgbGl0ZXJhbGAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB3aGV0aGVyIHRoZSBleHByZXNzaW9uJ3MgdG9wLWxldmVsIG5vZGUgaXMgYSBKYXZhU2NyaXB0CiAqICAgICAgICBsaXRlcmFsLgogKiAgICAgICogYGNvbnN0YW50YCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgbWFkZSBlbnRpcmVseSBvZiBKYXZhU2NyaXB0CiAqICAgICAgICBjb25zdGFudCBsaXRlcmFscy4KICogICAgICAqIGBhc3NpZ25gIOKAkyBgez9mdW5jdGlvbihjb250ZXh0LCB2YWx1ZSl9YCDigJMgaWYgdGhlIGV4cHJlc3Npb24gaXMgYXNzaWduYWJsZSwgdGhpcyB3aWxsIGJlCiAqICAgICAgICBzZXQgdG8gYSBmdW5jdGlvbiB0byBjaGFuZ2UgaXRzIHZhbHVlIG9uIHRoZSBnaXZlbiBjb250ZXh0LgogKgogKi8KCgovKioKICogQG5nZG9jIHByb3ZpZGVyCiAqIEBuYW1lICRwYXJzZVByb3ZpZGVyCiAqIEBraW5kIGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBgJHBhcnNlUHJvdmlkZXJgIGNhbiBiZSB1c2VkIGZvciBjb25maWd1cmluZyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUge0BsaW5rIG5nLiRwYXJzZSAkcGFyc2V9CiAqICBzZXJ2aWNlLgogKi8KZnVuY3Rpb24gJFBhcnNlUHJvdmlkZXIoKSB7CiAgdmFyIGNhY2hlID0gY3JlYXRlTWFwKCk7CgogIHZhciAkcGFyc2VPcHRpb25zID0gewogICAgY3NwOiBmYWxzZQogIH07CgoKICB0aGlzLiRnZXQgPSBbJyRmaWx0ZXInLCAnJHNuaWZmZXInLCBmdW5jdGlvbigkZmlsdGVyLCAkc25pZmZlcikgewogICAgJHBhcnNlT3B0aW9ucy5jc3AgPSAkc25pZmZlci5jc3A7CgogICAgcmV0dXJuIGZ1bmN0aW9uICRwYXJzZShleHAsIGludGVyY2VwdG9yRm4pIHsKICAgICAgdmFyIHBhcnNlZEV4cHJlc3Npb24sIG9uZVRpbWUsIGNhY2hlS2V5OwoKICAgICAgc3dpdGNoICh0eXBlb2YgZXhwKSB7CiAgICAgICAgY2FzZSAnc3RyaW5nJzoKICAgICAgICAgIGNhY2hlS2V5ID0gZXhwID0gZXhwLnRyaW0oKTsKCiAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gY2FjaGVbY2FjaGVLZXldOwoKICAgICAgICAgIGlmICghcGFyc2VkRXhwcmVzc2lvbikgewogICAgICAgICAgICBpZiAoZXhwLmNoYXJBdCgwKSA9PT0gJzonICYmIGV4cC5jaGFyQXQoMSkgPT09ICc6JykgewogICAgICAgICAgICAgIG9uZVRpbWUgPSB0cnVlOwogICAgICAgICAgICAgIGV4cCA9IGV4cC5zdWJzdHJpbmcoMik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBsZXhlciA9IG5ldyBMZXhlcigkcGFyc2VPcHRpb25zKTsKICAgICAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIobGV4ZXIsICRmaWx0ZXIsICRwYXJzZU9wdGlvbnMpOwogICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gcGFyc2VyLnBhcnNlKGV4cCk7CgogICAgICAgICAgICBpZiAocGFyc2VkRXhwcmVzc2lvbi5jb25zdGFudCkgewogICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gY29uc3RhbnRXYXRjaERlbGVnYXRlOwogICAgICAgICAgICB9IGVsc2UgaWYgKG9uZVRpbWUpIHsKICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IHBhcnNlZEV4cHJlc3Npb24ubGl0ZXJhbCA/CiAgICAgICAgICAgICAgICBvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUgOiBvbmVUaW1lV2F0Y2hEZWxlZ2F0ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gcGFyc2VkRXhwcmVzc2lvbjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKTsKCiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOgogICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKGV4cCwgaW50ZXJjZXB0b3JGbik7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3Iobm9vcCwgaW50ZXJjZXB0b3JGbik7CiAgICAgIH0KICAgIH07CgogICAgZnVuY3Rpb24gb25lVGltZVdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikgewogICAgICB2YXIgdW53YXRjaCwgbGFzdFZhbHVlOwogICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBvbmVUaW1lV2F0Y2goc2NvcGUpIHsKICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7CiAgICAgIH0sIGZ1bmN0aW9uIG9uZVRpbWVMaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSkgewogICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlOwogICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkgewogICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmIChpc0RlZmluZWQobGFzdFZhbHVlKSkgewogICAgICAgICAgICAgIHVud2F0Y2goKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LCBvYmplY3RFcXVhbGl0eSk7CiAgICB9CgogICAgZnVuY3Rpb24gb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24pIHsKICAgICAgdmFyIHVud2F0Y2g7CiAgICAgIHJldHVybiB1bndhdGNoID0gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG9uZVRpbWVXYXRjaChzY29wZSkgewogICAgICAgIHJldHVybiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTsKICAgICAgfSwgZnVuY3Rpb24gb25lVGltZUxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7CiAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7CiAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHZhbHVlLCBvbGQsIHNjb3BlKTsKICAgICAgICB9CiAgICAgICAgaWYgKGlzQWxsRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmKGlzQWxsRGVmaW5lZCh2YWx1ZSkpIHVud2F0Y2goKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwgb2JqZWN0RXF1YWxpdHkpOwoKICAgICAgZnVuY3Rpb24gaXNBbGxEZWZpbmVkKHZhbHVlKSB7CiAgICAgICAgdmFyIGFsbERlZmluZWQgPSB0cnVlOwogICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICAgIGlmICghaXNEZWZpbmVkKHZhbCkpIGFsbERlZmluZWQgPSBmYWxzZTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gYWxsRGVmaW5lZDsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7CiAgICAgIHZhciB1bndhdGNoOwogICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBjb25zdGFudFdhdGNoKHNjb3BlKSB7CiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpOwogICAgICB9LCBmdW5jdGlvbiBjb25zdGFudExpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7CiAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7CiAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0KICAgICAgICB1bndhdGNoKCk7CiAgICAgIH0sIG9iamVjdEVxdWFsaXR5KTsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKSB7CiAgICAgIGlmICghaW50ZXJjZXB0b3JGbikgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb247CgogICAgICB2YXIgZm4gPSBmdW5jdGlvbiBpbnRlcmNlcHRlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscykgewogICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgdmFyIHJlc3VsdCA9IGludGVyY2VwdG9yRm4odmFsdWUsIHNjb3BlLCBsb2NhbHMpOwogICAgICAgIC8vIHdlIG9ubHkgcmV0dXJuIHRoZSBpbnRlcmNlcHRvcidzIHJlc3VsdCBpZiB0aGUKICAgICAgICAvLyBpbml0aWFsIHZhbHVlIGlzIGRlZmluZWQgKGZvciBiaW5kLW9uY2UpCiAgICAgICAgcmV0dXJuIGlzRGVmaW5lZCh2YWx1ZSkgPyByZXN1bHQgOiB2YWx1ZTsKICAgICAgfTsKICAgICAgZm4uJCR3YXRjaERlbGVnYXRlID0gcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGU7CiAgICAgIHJldHVybiBmbjsKICAgIH0KICB9XTsKfQoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRxCiAqIEByZXF1aXJlcyAkcm9vdFNjb3BlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIHByb21pc2UvZGVmZXJyZWQgaW1wbGVtZW50YXRpb24gaW5zcGlyZWQgYnkgW0tyaXMgS293YWwncyBRXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpLgogKgogKiAkcSBjYW4gYmUgdXNlZCBpbiB0d28gZmFzaGlvbnMgLS0tIE9uZSwgd2hpY2ggaXMgbW9yZSBzaW1pbGFyIHRvIEtyaXMgS293YWwncyBRIG9yIGpRdWVyeSdzIERlZmVycmVkCiAqIGltcGxlbWVudGF0aW9ucywgdGhlIG90aGVyIHJlc2VtYmxlcyBFUzYgcHJvbWlzZXMgdG8gc29tZSBkZWdyZWUuCiAqCiAqICMgJHEgY29uc3RydWN0b3IKICoKICogVGhlIHN0cmVhbWxpbmVkIEVTNiBzdHlsZSBwcm9taXNlIGlzIGVzc2VudGlhbGx5IGp1c3QgdXNpbmcgJHEgYXMgYSBjb25zdHJ1Y3RvciB3aGljaCB0YWtlcyBhIGByZXNvbHZlcmAKICogZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50KS4gVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSBuYXRpdmUgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiBmcm9tIEVTNiBIYXJtb255LAogKiBzZWUgW01ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZSkuCiAqCiAqIFdoaWxlIHRoZSBjb25zdHJ1Y3Rvci1zdHlsZSB1c2UgaXMgc3VwcG9ydGVkLCBub3QgYWxsIG9mIHRoZSBzdXBwb3J0aW5nIG1ldGhvZHMgZnJvbSBIYXJtb255IHByb21pc2VzIGFyZQogKiBhdmFpbGFibGUgeWV0LgogKgogKiBJdCBjYW4gYmUgdXNlZCBsaWtlIHNvOgogKgogKiBgYGBqcwogKiByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7CiAqICAgLy8gcGVyZm9ybSBzb21lIGFzeW5jaHJvbm91cyBvcGVyYXRpb24sIHJlc29sdmUgb3IgcmVqZWN0IHRoZSBwcm9taXNlIHdoZW4gYXBwcm9wcmlhdGUuCiAqICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7CiAqICAgICBpZiAocG9sbFN0YXR1cyA+IDApIHsKICogICAgICAgcmVzb2x2ZShwb2xsZWRWYWx1ZSk7CiAqICAgICB9IGVsc2UgaWYgKHBvbGxTdGF0dXMgPCAwKSB7CiAqICAgICAgIHJlamVjdChwb2xsZWRWYWx1ZSk7CiAqICAgICB9IGVsc2UgewogKiAgICAgICBwb2xsU3RhdHVzID0gcG9sbEFnYWluKGZ1bmN0aW9uKHZhbHVlKSB7CiAqICAgICAgICAgcG9sbGVkVmFsdWUgPSB2YWx1ZTsKICogICAgICAgfSk7CiAqICAgICB9CiAqICAgfSwgMTAwMDApOwogKiB9KS4KICogICB0aGVuKGZ1bmN0aW9uKHZhbHVlKSB7CiAqICAgICAvLyBoYW5kbGUgc3VjY2VzcwogKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgewogKiAgICAgLy8gaGFuZGxlIGZhaWx1cmUKICogICB9KTsKICogYGBgCiAqCiAqIE5vdGUsIHByb2dyZXNzL25vdGlmeSBjYWxsYmFja3MgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIHZpYSB0aGUgRVM2LXN0eWxlIGludGVyZmFjZS4KICoKICogSG93ZXZlciwgdGhlIG1vcmUgdHJhZGl0aW9uYWwgQ29tbW9uSlMgc3R5bGUgdXNhZ2UgaXMgc3RpbGwgYXZhaWxhYmxlLCBhbmQgZG9jdW1lbnRlZCBiZWxvdy4KICoKICogW1RoZSBDb21tb25KUyBQcm9taXNlIHByb3Bvc2FsXShodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Qcm9taXNlcykgZGVzY3JpYmVzIGEgcHJvbWlzZSBhcyBhbgogKiBpbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nIHdpdGggYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcmVzdWx0IG9mIGFuIGFjdGlvbiB0aGF0IGlzCiAqIHBlcmZvcm1lZCBhc3luY2hyb25vdXNseSwgYW5kIG1heSBvciBtYXkgbm90IGJlIGZpbmlzaGVkIGF0IGFueSBnaXZlbiBwb2ludCBpbiB0aW1lLgogKgogKiBGcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiBkZWFsaW5nIHdpdGggZXJyb3IgaGFuZGxpbmcsIGRlZmVycmVkIGFuZCBwcm9taXNlIEFQSXMgYXJlIHRvCiAqIGFzeW5jaHJvbm91cyBwcm9ncmFtbWluZyB3aGF0IGB0cnlgLCBgY2F0Y2hgIGFuZCBgdGhyb3dgIGtleXdvcmRzIGFyZSB0byBzeW5jaHJvbm91cyBwcm9ncmFtbWluZy4KICoKICogYGBganMKICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgLCBgc2NvcGVgIGFuZCBgb2tUb0dyZWV0YAogKiAgIC8vIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZSAodGhleSBjb3VsZCBoYXZlIGJlZW4gaW5qZWN0ZWQgb3IgcGFzc2VkIGluKS4KICoKICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHsKICogICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7CiAqCiAqICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogKiAgICAgICBkZWZlcnJlZC5ub3RpZnkoJ0Fib3V0IHRvIGdyZWV0ICcgKyBuYW1lICsgJy4nKTsKICoKICogICAgICAgaWYgKG9rVG9HcmVldChuYW1lKSkgewogKiAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJ0hlbGxvLCAnICsgbmFtZSArICchJyk7CiAqICAgICAgIH0gZWxzZSB7CiAqICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCdHcmVldGluZyAnICsgbmFtZSArICcgaXMgbm90IGFsbG93ZWQuJyk7CiAqICAgICAgIH0KICogICAgIH0sIDEwMDApOwogKgogKiAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7CiAqICAgfQogKgogKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpOwogKiAgIHByb21pc2UudGhlbihmdW5jdGlvbihncmVldGluZykgewogKiAgICAgYWxlcnQoJ1N1Y2Nlc3M6ICcgKyBncmVldGluZyk7CiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7CiAqICAgICBhbGVydCgnRmFpbGVkOiAnICsgcmVhc29uKTsKICogICB9LCBmdW5jdGlvbih1cGRhdGUpIHsKICogICAgIGFsZXJ0KCdHb3Qgbm90aWZpY2F0aW9uOiAnICsgdXBkYXRlKTsKICogICB9KTsKICogYGBgCiAqCiAqIEF0IGZpcnN0IGl0IG1pZ2h0IG5vdCBiZSBvYnZpb3VzIHdoeSB0aGlzIGV4dHJhIGNvbXBsZXhpdHkgaXMgd29ydGggdGhlIHRyb3VibGUuIFRoZSBwYXlvZmYKICogY29tZXMgaW4gdGhlIHdheSBvZiBndWFyYW50ZWVzIHRoYXQgcHJvbWlzZSBhbmQgZGVmZXJyZWQgQVBJcyBtYWtlLCBzZWUKICogaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC91bmNvbW1vbmpzL2Jsb2IvbWFzdGVyL3Byb21pc2VzL3NwZWNpZmljYXRpb24ubWQuCiAqCiAqIEFkZGl0aW9uYWxseSB0aGUgcHJvbWlzZSBhcGkgYWxsb3dzIGZvciBjb21wb3NpdGlvbiB0aGF0IGlzIHZlcnkgaGFyZCB0byBkbyB3aXRoIHRoZQogKiB0cmFkaXRpb25hbCBjYWxsYmFjayAoW0NQU10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db250aW51YXRpb24tcGFzc2luZ19zdHlsZSkpIGFwcHJvYWNoLgogKiBGb3IgbW9yZSBvbiB0aGlzIHBsZWFzZSBzZWUgdGhlIFtRIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkgZXNwZWNpYWxseSB0aGUKICogc2VjdGlvbiBvbiBzZXJpYWwgb3IgcGFyYWxsZWwgam9pbmluZyBvZiBwcm9taXNlcy4KICoKICogIyBUaGUgRGVmZXJyZWQgQVBJCiAqCiAqIEEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkIGlzIGNvbnN0cnVjdGVkIGJ5IGNhbGxpbmcgYCRxLmRlZmVyKClgLgogKgogKiBUaGUgcHVycG9zZSBvZiB0aGUgZGVmZXJyZWQgb2JqZWN0IGlzIHRvIGV4cG9zZSB0aGUgYXNzb2NpYXRlZCBQcm9taXNlIGluc3RhbmNlIGFzIHdlbGwgYXMgQVBJcwogKiB0aGF0IGNhbiBiZSB1c2VkIGZvciBzaWduYWxpbmcgdGhlIHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVsIGNvbXBsZXRpb24sIGFzIHdlbGwgYXMgdGhlIHN0YXR1cwogKiBvZiB0aGUgdGFzay4KICoKICogKipNZXRob2RzKioKICoKICogLSBgcmVzb2x2ZSh2YWx1ZSlgIOKAkyByZXNvbHZlcyB0aGUgZGVyaXZlZCBwcm9taXNlIHdpdGggdGhlIGB2YWx1ZWAuIElmIHRoZSB2YWx1ZSBpcyBhIHJlamVjdGlvbgogKiAgIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YCwgdGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCBpbnN0ZWFkLgogKiAtIGByZWplY3QocmVhc29uKWAg4oCTIHJlamVjdHMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgcmVhc29uYC4gVGhpcyBpcyBlcXVpdmFsZW50IHRvCiAqICAgcmVzb2x2aW5nIGl0IHdpdGggYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLgogKiAtIGBub3RpZnkodmFsdWUpYCAtIHByb3ZpZGVzIHVwZGF0ZXMgb24gdGhlIHN0YXR1cyBvZiB0aGUgcHJvbWlzZSdzIGV4ZWN1dGlvbi4gVGhpcyBtYXkgYmUgY2FsbGVkCiAqICAgbXVsdGlwbGUgdGltZXMgYmVmb3JlIHRoZSBwcm9taXNlIGlzIGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZC4KICoKICogKipQcm9wZXJ0aWVzKioKICoKICogLSBwcm9taXNlIOKAkyBge1Byb21pc2V9YCDigJMgcHJvbWlzZSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGVmZXJyZWQuCiAqCiAqCiAqICMgVGhlIFByb21pc2UgQVBJCiAqCiAqIEEgbmV3IHByb21pc2UgaW5zdGFuY2UgaXMgY3JlYXRlZCB3aGVuIGEgZGVmZXJyZWQgaW5zdGFuY2UgaXMgY3JlYXRlZCBhbmQgY2FuIGJlIHJldHJpZXZlZCBieQogKiBjYWxsaW5nIGBkZWZlcnJlZC5wcm9taXNlYC4KICoKICogVGhlIHB1cnBvc2Ugb2YgdGhlIHByb21pc2Ugb2JqZWN0IGlzIHRvIGFsbG93IGZvciBpbnRlcmVzdGVkIHBhcnRpZXMgdG8gZ2V0IGFjY2VzcyB0byB0aGUgcmVzdWx0CiAqIG9mIHRoZSBkZWZlcnJlZCB0YXNrIHdoZW4gaXQgY29tcGxldGVzLgogKgogKiAqKk1ldGhvZHMqKgogKgogKiAtIGB0aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaywgbm90aWZ5Q2FsbGJhY2spYCDigJMgcmVnYXJkbGVzcyBvZiB3aGVuIHRoZSBwcm9taXNlIHdhcyBvcgogKiAgIHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQsIGB0aGVuYCBjYWxscyBvbmUgb2YgdGhlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2FsbGJhY2tzIGFzeW5jaHJvbm91c2x5CiAqICAgYXMgc29vbiBhcyB0aGUgcmVzdWx0IGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQ6IHRoZSByZXN1bHQKICogICBvciByZWplY3Rpb24gcmVhc29uLiBBZGRpdGlvbmFsbHksIHRoZSBub3RpZnkgY2FsbGJhY2sgbWF5IGJlIGNhbGxlZCB6ZXJvIG9yIG1vcmUgdGltZXMgdG8KICogICBwcm92aWRlIGEgcHJvZ3Jlc3MgaW5kaWNhdGlvbiwgYmVmb3JlIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLgogKgogKiAgIFRoaXMgbWV0aG9kICpyZXR1cm5zIGEgbmV3IHByb21pc2UqIHdoaWNoIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZQogKiAgIGBzdWNjZXNzQ2FsbGJhY2tgLCBgZXJyb3JDYWxsYmFja2AuIEl0IGFsc28gbm90aWZpZXMgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlCiAqICAgYG5vdGlmeUNhbGxiYWNrYCBtZXRob2QuIFRoZSBwcm9taXNlIGNhbiBub3QgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgZnJvbSB0aGUgbm90aWZ5Q2FsbGJhY2sKICogICBtZXRob2QuCiAqCiAqIC0gYGNhdGNoKGVycm9yQ2FsbGJhY2spYCDigJMgc2hvcnRoYW5kIGZvciBgcHJvbWlzZS50aGVuKG51bGwsIGVycm9yQ2FsbGJhY2spYAogKgogKiAtIGBmaW5hbGx5KGNhbGxiYWNrKWAg4oCTIGFsbG93cyB5b3UgdG8gb2JzZXJ2ZSBlaXRoZXIgdGhlIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBvZiBhIHByb21pc2UsCiAqICAgYnV0IHRvIGRvIHNvIHdpdGhvdXQgbW9kaWZ5aW5nIHRoZSBmaW5hbCB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgdG8gcmVsZWFzZSByZXNvdXJjZXMgb3IgZG8gc29tZQogKiAgIGNsZWFuLXVwIHRoYXQgbmVlZHMgdG8gYmUgZG9uZSB3aGV0aGVyIHRoZSBwcm9taXNlIHdhcyByZWplY3RlZCBvciByZXNvbHZlZC4gU2VlIHRoZSBbZnVsbAogKiAgIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS93aWtpL0FQSS1SZWZlcmVuY2UjcHJvbWlzZWZpbmFsbHljYWxsYmFjaykgZm9yCiAqICAgbW9yZSBpbmZvcm1hdGlvbi4KICoKICogICBCZWNhdXNlIGBmaW5hbGx5YCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gSmF2YVNjcmlwdCBhbmQgcmVzZXJ2ZWQga2V5d29yZHMgYXJlIG5vdCBzdXBwb3J0ZWQgYXMKICogICBwcm9wZXJ0eSBuYW1lcyBieSBFUzMsIHlvdSdsbCBuZWVkIHRvIGludm9rZSB0aGUgbWV0aG9kIGxpa2UgYHByb21pc2VbJ2ZpbmFsbHknXShjYWxsYmFjaylgIHRvCiAqICAgbWFrZSB5b3VyIGNvZGUgSUU4IGFuZCBBbmRyb2lkIDIueCBjb21wYXRpYmxlLgogKgogKiAjIENoYWluaW5nIHByb21pc2VzCiAqCiAqIEJlY2F1c2UgY2FsbGluZyB0aGUgYHRoZW5gIG1ldGhvZCBvZiBhIHByb21pc2UgcmV0dXJucyBhIG5ldyBkZXJpdmVkIHByb21pc2UsIGl0IGlzIGVhc2lseQogKiBwb3NzaWJsZSB0byBjcmVhdGUgYSBjaGFpbiBvZiBwcm9taXNlczoKICoKICogYGBganMKICogICBwcm9taXNlQiA9IHByb21pc2VBLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7CiAqICAgICByZXR1cm4gcmVzdWx0ICsgMTsKICogICB9KTsKICoKICogICAvLyBwcm9taXNlQiB3aWxsIGJlIHJlc29sdmVkIGltbWVkaWF0ZWx5IGFmdGVyIHByb21pc2VBIGlzIHJlc29sdmVkIGFuZCBpdHMgdmFsdWUKICogICAvLyB3aWxsIGJlIHRoZSByZXN1bHQgb2YgcHJvbWlzZUEgaW5jcmVtZW50ZWQgYnkgMQogKiBgYGAKICoKICogSXQgaXMgcG9zc2libGUgdG8gY3JlYXRlIGNoYWlucyBvZiBhbnkgbGVuZ3RoIGFuZCBzaW5jZSBhIHByb21pc2UgY2FuIGJlIHJlc29sdmVkIHdpdGggYW5vdGhlcgogKiBwcm9taXNlICh3aGljaCB3aWxsIGRlZmVyIGl0cyByZXNvbHV0aW9uIGZ1cnRoZXIpLCBpdCBpcyBwb3NzaWJsZSB0byBwYXVzZS9kZWZlciByZXNvbHV0aW9uIG9mCiAqIHRoZSBwcm9taXNlcyBhdCBhbnkgcG9pbnQgaW4gdGhlIGNoYWluLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGltcGxlbWVudCBwb3dlcmZ1bCBBUElzIGxpa2UKICogJGh0dHAncyByZXNwb25zZSBpbnRlcmNlcHRvcnMuCiAqCiAqCiAqICMgRGlmZmVyZW5jZXMgYmV0d2VlbiBLcmlzIEtvd2FsJ3MgUSBhbmQgJHEKICoKICogIFRoZXJlIGFyZSB0d28gbWFpbiBkaWZmZXJlbmNlczoKICoKICogLSAkcSBpcyBpbnRlZ3JhdGVkIHdpdGggdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlfSBTY29wZSBtb2RlbCBvYnNlcnZhdGlvbgogKiAgIG1lY2hhbmlzbSBpbiBhbmd1bGFyLCB3aGljaCBtZWFucyBmYXN0ZXIgcHJvcGFnYXRpb24gb2YgcmVzb2x1dGlvbiBvciByZWplY3Rpb24gaW50byB5b3VyCiAqICAgbW9kZWxzIGFuZCBhdm9pZGluZyB1bm5lY2Vzc2FyeSBicm93c2VyIHJlcGFpbnRzLCB3aGljaCB3b3VsZCByZXN1bHQgaW4gZmxpY2tlcmluZyBVSS4KICogLSBRIGhhcyBtYW55IG1vcmUgZmVhdHVyZXMgdGhhbiAkcSwgYnV0IHRoYXQgY29tZXMgYXQgYSBjb3N0IG9mIGJ5dGVzLiAkcSBpcyB0aW55LCBidXQgY29udGFpbnMKICogICBhbGwgdGhlIGltcG9ydGFudCBmdW5jdGlvbmFsaXR5IG5lZWRlZCBmb3IgY29tbW9uIGFzeW5jIHRhc2tzLgogKgogKiAgIyBUZXN0aW5nCiAqCiAqICBgYGBqcwogKiAgICBpdCgnc2hvdWxkIHNpbXVsYXRlIHByb21pc2UnLCBpbmplY3QoZnVuY3Rpb24oJHEsICRyb290U2NvcGUpIHsKICogICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpOwogKiAgICAgIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTsKICogICAgICB2YXIgcmVzb2x2ZWRWYWx1ZTsKICoKICogICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsgcmVzb2x2ZWRWYWx1ZSA9IHZhbHVlOyB9KTsKICogICAgICBleHBlY3QocmVzb2x2ZWRWYWx1ZSkudG9CZVVuZGVmaW5lZCgpOwogKgogKiAgICAgIC8vIFNpbXVsYXRlIHJlc29sdmluZyBvZiBwcm9taXNlCiAqICAgICAgZGVmZXJyZWQucmVzb2x2ZSgxMjMpOwogKiAgICAgIC8vIE5vdGUgdGhhdCB0aGUgJ3RoZW4nIGZ1bmN0aW9uIGRvZXMgbm90IGdldCBjYWxsZWQgc3luY2hyb25vdXNseS4KICogICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2Ugd2FudCB0aGUgcHJvbWlzZSBBUEkgdG8gYWx3YXlzIGJlIGFzeW5jLCB3aGV0aGVyIG9yIG5vdAogKiAgICAgIC8vIGl0IGdvdCBjYWxsZWQgc3luY2hyb25vdXNseSBvciBhc3luY2hyb25vdXNseS4KICogICAgICBleHBlY3QocmVzb2x2ZWRWYWx1ZSkudG9CZVVuZGVmaW5lZCgpOwogKgogKiAgICAgIC8vIFByb3BhZ2F0ZSBwcm9taXNlIHJlc29sdXRpb24gdG8gJ3RoZW4nIGZ1bmN0aW9ucyB1c2luZyAkYXBwbHkoKS4KICogICAgICAkcm9vdFNjb3BlLiRhcHBseSgpOwogKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0VxdWFsKDEyMyk7CiAqICAgIH0pKTsKICogIGBgYAogKgogKiBAcGFyYW0ge2Z1bmN0aW9uKGZ1bmN0aW9uLCBmdW5jdGlvbil9IHJlc29sdmVyIEZ1bmN0aW9uIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciByZXNvbHZpbmcgb3IKICogICByZWplY3RpbmcgdGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS4gVGhlIGZpcnN0IHBhcmFtZXRldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgdGhlCiAqICAgcHJvbWlzZSwgdGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgYSBmdW5jdGlvbiB3aGljaCByZWplY3RzIHRoZSBwcm9taXNlLgogKgogKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS4KICovCmZ1bmN0aW9uICRRUHJvdmlkZXIoKSB7CgogIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRleGNlcHRpb25IYW5kbGVyKSB7CiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTsKICAgIH0sICRleGNlcHRpb25IYW5kbGVyKTsKICB9XTsKfQoKZnVuY3Rpb24gJCRRUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRicm93c2VyLCAkZXhjZXB0aW9uSGFuZGxlcikgewogICAgcmV0dXJuIHFGYWN0b3J5KGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTsKICAgIH0sICRleGNlcHRpb25IYW5kbGVyKTsKICB9XTsKfQoKLyoqCiAqIENvbnN0cnVjdHMgYSBwcm9taXNlIG1hbmFnZXIuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24pfSBuZXh0VGljayBGdW5jdGlvbiBmb3IgZXhlY3V0aW5nIGZ1bmN0aW9ucyBpbiB0aGUgbmV4dCB0dXJuLgogKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLiopfSBleGNlcHRpb25IYW5kbGVyIEZ1bmN0aW9uIGludG8gd2hpY2ggdW5leHBlY3RlZCBleGNlcHRpb25zIGFyZSBwYXNzZWQgZm9yCiAqICAgICBkZWJ1Z2dpbmcgcHVycG9zZXMuCiAqIEByZXR1cm5zIHtvYmplY3R9IFByb21pc2UgbWFuYWdlci4KICovCmZ1bmN0aW9uIHFGYWN0b3J5KG5leHRUaWNrLCBleGNlcHRpb25IYW5kbGVyKSB7CiAgZnVuY3Rpb24gY2FsbE9uY2Uoc2VsZiwgcmVzb2x2ZUZuLCByZWplY3RGbikgewogICAgdmFyIGNhbGxlZCA9IGZhbHNlOwogICAgZnVuY3Rpb24gd3JhcChmbikgewogICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZiAoY2FsbGVkKSByZXR1cm47CiAgICAgICAgY2FsbGVkID0gdHJ1ZTsKICAgICAgICBmbi5jYWxsKHNlbGYsIHZhbHVlKTsKICAgICAgfTsKICAgIH0KCiAgICByZXR1cm4gW3dyYXAocmVzb2x2ZUZuKSwgd3JhcChyZWplY3RGbildOwogIH0KCiAgLyoqCiAgICogQG5nZG9jCiAgICogQG5hbWUgbmcuJHEjZGVmZXIKICAgKiBAbWV0aG9kT2YgbmcuJHEKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDcmVhdGVzIGEgYERlZmVycmVkYCBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyBhIHRhc2sgd2hpY2ggd2lsbCBmaW5pc2ggaW4gdGhlIGZ1dHVyZS4KICAgKgogICAqIEByZXR1cm5zIHtEZWZlcnJlZH0gUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiBkZWZlcnJlZC4KICAgKi8KICB2YXIgZGVmZXIgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBuZXcgRGVmZXJyZWQoKTsKICB9OwoKICBmdW5jdGlvbiBQcm9taXNlKCkgewogICAgdGhpcy4kJHN0YXRlID0geyBzdGF0dXM6IDAgfTsKICB9CgogIFByb21pc2UucHJvdG90eXBlID0gewogICAgdGhlbjogZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFjaykgewogICAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7CgogICAgICB0aGlzLiQkc3RhdGUucGVuZGluZyA9IHRoaXMuJCRzdGF0ZS5wZW5kaW5nIHx8IFtdOwogICAgICB0aGlzLiQkc3RhdGUucGVuZGluZy5wdXNoKFtyZXN1bHQsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9ncmVzc0JhY2tdKTsKICAgICAgaWYgKHRoaXMuJCRzdGF0ZS5zdGF0dXMgPiAwKSBzY2hlZHVsZVByb2Nlc3NRdWV1ZSh0aGlzLiQkc3RhdGUpOwoKICAgICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlOwogICAgfSwKCiAgICAiY2F0Y2giOiBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIGNhbGxiYWNrKTsKICAgIH0sCgogICAgImZpbmFsbHkiOiBmdW5jdGlvbihjYWxsYmFjaywgcHJvZ3Jlc3NCYWNrKSB7CiAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIHRydWUsIGNhbGxiYWNrKTsKICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soZXJyb3IsIGZhbHNlLCBjYWxsYmFjayk7CiAgICAgIH0sIHByb2dyZXNzQmFjayk7CiAgICB9CiAgfTsKCiAgLy9GYXN0ZXIsIG1vcmUgYmFzaWMgdGhhbiBhbmd1bGFyLmJpbmQgaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhci1iaW5kLXZzLWN1c3RvbS12cy1uYXRpdmUKICBmdW5jdGlvbiBzaW1wbGVCaW5kKGNvbnRleHQsIGZuKSB7CiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgZm4uY2FsbChjb250ZXh0LCB2YWx1ZSk7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKHN0YXRlKSB7CiAgICB2YXIgZm4sIHByb21pc2UsIHBlbmRpbmc7CgogICAgcGVuZGluZyA9IHN0YXRlLnBlbmRpbmc7CiAgICBzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkID0gZmFsc2U7CiAgICBzdGF0ZS5wZW5kaW5nID0gdW5kZWZpbmVkOwogICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcGVuZGluZy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7CiAgICAgIHByb21pc2UgPSBwZW5kaW5nW2ldWzBdOwogICAgICBmbiA9IHBlbmRpbmdbaV1bc3RhdGUuc3RhdHVzXTsKICAgICAgdHJ5IHsKICAgICAgICBpZiAoaXNGdW5jdGlvbihmbikpIHsKICAgICAgICAgIHByb21pc2UucmVzb2x2ZShmbihzdGF0ZS52YWx1ZSkpOwogICAgICAgIH0gZWxzZSBpZiAoc3RhdGUuc3RhdHVzID09PSAxKSB7CiAgICAgICAgICBwcm9taXNlLnJlc29sdmUoc3RhdGUudmFsdWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwcm9taXNlLnJlamVjdChzdGF0ZS52YWx1ZSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoKGUpIHsKICAgICAgICBwcm9taXNlLnJlamVjdChlKTsKICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBzY2hlZHVsZVByb2Nlc3NRdWV1ZShzdGF0ZSkgewogICAgaWYgKHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgfHwgIXN0YXRlLnBlbmRpbmcpIHJldHVybjsKICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSB0cnVlOwogICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7IHByb2Nlc3NRdWV1ZShzdGF0ZSk7IH0pOwogIH0KCiAgZnVuY3Rpb24gRGVmZXJyZWQoKSB7CiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgpOwogICAgLy9OZWNlc3NhcnkgdG8gc3VwcG9ydCB1bmJvdW5kIGV4ZWN1dGlvbiA6LwogICAgdGhpcy5yZXNvbHZlID0gc2ltcGxlQmluZCh0aGlzLCB0aGlzLnJlc29sdmUpOwogICAgdGhpcy5yZWplY3QgPSBzaW1wbGVCaW5kKHRoaXMsIHRoaXMucmVqZWN0KTsKICAgIHRoaXMubm90aWZ5ID0gc2ltcGxlQmluZCh0aGlzLCB0aGlzLm5vdGlmeSk7CiAgfQoKICBEZWZlcnJlZC5wcm90b3R5cGUgPSB7CiAgICByZXNvbHZlOiBmdW5jdGlvbih2YWwpIHsKICAgICAgaWYgKHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cykgcmV0dXJuOwogICAgICBpZiAodmFsID09PSB0aGlzLnByb21pc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0N5Y2xlIGRldGVjdGVkJyk7CiAgICAgIHRoaXMuJCRyZXNvbHZlKHZhbCk7CiAgICB9LAoKICAgICQkcmVzb2x2ZTogZnVuY3Rpb24odmFsKSB7CiAgICAgIHZhciB0aGVuLCBmbnM7CgogICAgICBmbnMgPSBjYWxsT25jZSh0aGlzLCB0aGlzLiQkcmVzb2x2ZSwgdGhpcy4kJHJlamVjdCk7CiAgICAgIHRyeSB7CiAgICAgICAgaWYgKChpc09iamVjdCh2YWwpIHx8IGlzRnVuY3Rpb24odmFsKSkpIHRoZW4gPSB2YWwgJiYgdmFsLnRoZW47CiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhlbikpIHsKICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IC0xOwogICAgICAgICAgdGhlbi5jYWxsKHZhbCwgZm5zWzBdLCBmbnNbMV0sIHRoaXMubm90aWZ5KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUudmFsdWUgPSB2YWw7CiAgICAgICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAxOwogICAgICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy5wcm9taXNlLiQkc3RhdGUpOwogICAgICAgIH0KICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgZm5zWzFdKGUpOwogICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgIH0KICAgIH0sCgogICAgcmVqZWN0OiBmdW5jdGlvbihyZWFzb24pIHsKICAgICAgaWYgKHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cykgcmV0dXJuOwogICAgICB0aGlzLiQkcmVqZWN0KHJlYXNvbik7CiAgICB9LAoKICAgICQkcmVqZWN0OiBmdW5jdGlvbihyZWFzb24pIHsKICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUudmFsdWUgPSByZWFzb247CiAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IDI7CiAgICAgIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHRoaXMucHJvbWlzZS4kJHN0YXRlKTsKICAgIH0sCgogICAgbm90aWZ5OiBmdW5jdGlvbihwcm9ncmVzcykgewogICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5wcm9taXNlLiQkc3RhdGUucGVuZGluZzsKCiAgICAgIGlmICgodGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzIDw9IDApICYmIGNhbGxiYWNrcyAmJiBjYWxsYmFja3MubGVuZ3RoKSB7CiAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgY2FsbGJhY2ssIHJlc3VsdDsKICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrc1tpXVswXTsKICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV1bM107CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgcmVzdWx0Lm5vdGlmeShpc0Z1bmN0aW9uKGNhbGxiYWNrKSA/IGNhbGxiYWNrKHByb2dyZXNzKSA6IHByb2dyZXNzKTsKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jCiAgICogQG5hbWUgbmcuJHEjcmVqZWN0CiAgICogQG1ldGhvZE9mIG5nLiRxCiAgICogQGRlc2NyaXB0aW9uCiAgICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCBhcyByZWplY3RlZCB3aXRoIHRoZSBzcGVjaWZpZWQgYHJlYXNvbmAuIFRoaXMgYXBpIHNob3VsZCBiZQogICAqIHVzZWQgdG8gZm9yd2FyZCByZWplY3Rpb24gaW4gYSBjaGFpbiBvZiBwcm9taXNlcy4gSWYgeW91IGFyZSBkZWFsaW5nIHdpdGggdGhlIGxhc3QgcHJvbWlzZSBpbgogICAqIGEgcHJvbWlzZSBjaGFpbiwgeW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgaXQuCiAgICoKICAgKiBXaGVuIGNvbXBhcmluZyBkZWZlcnJlZHMvcHJvbWlzZXMgdG8gdGhlIGZhbWlsaWFyIGJlaGF2aW9yIG9mIHRyeS9jYXRjaC90aHJvdywgdGhpbmsgb2YKICAgKiBgcmVqZWN0YCBhcyB0aGUgYHRocm93YCBrZXl3b3JkIGluIEphdmFTY3JpcHQuIFRoaXMgYWxzbyBtZWFucyB0aGF0IGlmIHlvdSAiY2F0Y2giIGFuIGVycm9yIHZpYQogICAqIGEgcHJvbWlzZSBlcnJvciBjYWxsYmFjayBhbmQgeW91IHdhbnQgdG8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHByb21pc2UgZGVyaXZlZCBmcm9tIHRoZQogICAqIGN1cnJlbnQgcHJvbWlzZSwgeW91IGhhdmUgdG8gInJldGhyb3ciIHRoZSBlcnJvciBieSByZXR1cm5pbmcgYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhCiAgICogYHJlamVjdGAuCiAgICoKICAgKiBgYGBqcwogICAqICAgcHJvbWlzZUIgPSBwcm9taXNlQS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkgewogICAqICAgICAvLyBzdWNjZXNzOiBkbyBzb21ldGhpbmcgYW5kIHJlc29sdmUgcHJvbWlzZUIKICAgKiAgICAgLy8gICAgICAgICAgd2l0aCB0aGUgb2xkIG9yIGEgbmV3IHJlc3VsdAogICAqICAgICByZXR1cm4gcmVzdWx0OwogICAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7CiAgICogICAgIC8vIGVycm9yOiBoYW5kbGUgdGhlIGVycm9yIGlmIHBvc3NpYmxlIGFuZAogICAqICAgICAvLyAgICAgICAgcmVzb2x2ZSBwcm9taXNlQiB3aXRoIG5ld1Byb21pc2VPclZhbHVlLAogICAqICAgICAvLyAgICAgICAgb3RoZXJ3aXNlIGZvcndhcmQgdGhlIHJlamVjdGlvbiB0byBwcm9taXNlQgogICAqICAgICBpZiAoY2FuSGFuZGxlKHJlYXNvbikpIHsKICAgKiAgICAgIC8vIGhhbmRsZSB0aGUgZXJyb3IgYW5kIHJlY292ZXIKICAgKiAgICAgIHJldHVybiBuZXdQcm9taXNlT3JWYWx1ZTsKICAgKiAgICAgfQogICAqICAgICByZXR1cm4gJHEucmVqZWN0KHJlYXNvbik7CiAgICogICB9KTsKICAgKiBgYGAKICAgKgogICAqIEBwYXJhbSB7Kn0gcmVhc29uIENvbnN0YW50LCBtZXNzYWdlLCBleGNlcHRpb24gb3IgYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVqZWN0aW9uIHJlYXNvbi4KICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2UgdGhhdCB3YXMgYWxyZWFkeSByZXNvbHZlZCBhcyByZWplY3RlZCB3aXRoIHRoZSBgcmVhc29uYC4KICAgKi8KICB2YXIgcmVqZWN0ID0gZnVuY3Rpb24ocmVhc29uKSB7CiAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7CiAgICByZXN1bHQucmVqZWN0KHJlYXNvbik7CiAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7CiAgfTsKCiAgdmFyIG1ha2VQcm9taXNlID0gZnVuY3Rpb24gbWFrZVByb21pc2UodmFsdWUsIHJlc29sdmVkKSB7CiAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7CiAgICBpZiAocmVzb2x2ZWQpIHsKICAgICAgcmVzdWx0LnJlc29sdmUodmFsdWUpOwogICAgfSBlbHNlIHsKICAgICAgcmVzdWx0LnJlamVjdCh2YWx1ZSk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7CiAgfTsKCiAgdmFyIGhhbmRsZUNhbGxiYWNrID0gZnVuY3Rpb24gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIGlzUmVzb2x2ZWQsIGNhbGxiYWNrKSB7CiAgICB2YXIgY2FsbGJhY2tPdXRwdXQgPSBudWxsOwogICAgdHJ5IHsKICAgICAgaWYgKGlzRnVuY3Rpb24oY2FsbGJhY2spKSBjYWxsYmFja091dHB1dCA9IGNhbGxiYWNrKCk7CiAgICB9IGNhdGNoKGUpIHsKICAgICAgcmV0dXJuIG1ha2VQcm9taXNlKGUsIGZhbHNlKTsKICAgIH0KICAgIGlmIChpc1Byb21pc2VMaWtlKGNhbGxiYWNrT3V0cHV0KSkgewogICAgICByZXR1cm4gY2FsbGJhY2tPdXRwdXQudGhlbihmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbWFrZVByb21pc2UodmFsdWUsIGlzUmVzb2x2ZWQpOwogICAgICB9LCBmdW5jdGlvbihlcnJvcikgewogICAgICAgIHJldHVybiBtYWtlUHJvbWlzZShlcnJvciwgZmFsc2UpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBtYWtlUHJvbWlzZSh2YWx1ZSwgaXNSZXNvbHZlZCk7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jCiAgICogQG5hbWUgbmcuJHEjd2hlbgogICAqIEBtZXRob2RPZiBuZy4kcQogICAqIEBkZXNjcmlwdGlvbgogICAqIFdyYXBzIGFuIG9iamVjdCB0aGF0IG1pZ2h0IGJlIGEgdmFsdWUgb3IgYSAoM3JkIHBhcnR5KSB0aGVuLWFibGUgcHJvbWlzZSBpbnRvIGEgJHEgcHJvbWlzZS4KICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSBhcmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IG1pZ2h0IG9yIG1pZ2h0IG5vdCBiZSBhIHByb21pc2UsIG9yIGlmCiAgICogdGhlIHByb21pc2UgY29tZXMgZnJvbSBhIHNvdXJjZSB0aGF0IGNhbid0IGJlIHRydXN0ZWQuCiAgICoKICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIG9yIGEgcHJvbWlzZQogICAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZSBvZiB0aGUgcGFzc2VkIHZhbHVlIG9yIHByb21pc2UKICAgKi8KCgogIHZhciB3aGVuID0gZnVuY3Rpb24odmFsdWUsIGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spIHsKICAgIHZhciByZXN1bHQgPSBuZXcgRGVmZXJyZWQoKTsKICAgIHJlc3VsdC5yZXNvbHZlKHZhbHVlKTsKICAgIHJldHVybiByZXN1bHQucHJvbWlzZS50aGVuKGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spOwogIH07CgogIC8qKgogICAqIEBuZ2RvYwogICAqIEBuYW1lIG5nLiRxI2FsbAogICAqIEBtZXRob2RPZiBuZy4kcQogICAqIEBkZXNjcmlwdGlvbgogICAqIENvbWJpbmVzIG11bHRpcGxlIHByb21pc2VzIGludG8gYSBzaW5nbGUgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIHdoZW4gYWxsIG9mIHRoZSBpbnB1dAogICAqIHByb21pc2VzIGFyZSByZXNvbHZlZC4KICAgKgogICAqIEBwYXJhbSB7QXJyYXkuPFByb21pc2U+fE9iamVjdC48UHJvbWlzZT59IHByb21pc2VzIEFuIGFycmF5IG9yIGhhc2ggb2YgcHJvbWlzZXMuCiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBzaW5nbGUgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBhbiBhcnJheS9oYXNoIG9mIHZhbHVlcywKICAgKiAgIGVhY2ggdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbWlzZSBhdCB0aGUgc2FtZSBpbmRleC9rZXkgaW4gdGhlIGBwcm9taXNlc2AgYXJyYXkvaGFzaC4KICAgKiAgIElmIGFueSBvZiB0aGUgcHJvbWlzZXMgaXMgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbiwgdGhpcyByZXN1bHRpbmcgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkCiAgICogICB3aXRoIHRoZSBzYW1lIHJlamVjdGlvbiB2YWx1ZS4KICAgKi8KCiAgZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7CiAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKSwKICAgICAgICBjb3VudGVyID0gMCwKICAgICAgICByZXN1bHRzID0gaXNBcnJheShwcm9taXNlcykgPyBbXSA6IHt9OwoKICAgIGZvckVhY2gocHJvbWlzZXMsIGZ1bmN0aW9uKHByb21pc2UsIGtleSkgewogICAgICBjb3VudGVyKys7CiAgICAgIHdoZW4ocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIGlmIChyZXN1bHRzLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybjsKICAgICAgICByZXN1bHRzW2tleV0gPSB2YWx1ZTsKICAgICAgICBpZiAoISgtLWNvdW50ZXIpKSBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpOwogICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHsKICAgICAgICBpZiAocmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm47CiAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7CiAgICAgIH0pOwogICAgfSk7CgogICAgaWYgKGNvdW50ZXIgPT09IDApIHsKICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTsKICAgIH0KCiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTsKICB9CgogIHZhciAkUSA9IGZ1bmN0aW9uIFEocmVzb2x2ZXIpIHsKICAgIGlmICghaXNGdW5jdGlvbihyZXNvbHZlcikpIHsKICAgICAgLy8gVE9ETyhAY2FpdHApOiBtaW5FcnIgdGhpcwogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCByZXNvbHZlckZuJyk7CiAgICB9CgogICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFEpKSB7CiAgICAgIC8vIE1vcmUgdXNlZnVsIHdoZW4gJFEgaXMgdGhlIFByb21pc2UgaXRzZWxmLgogICAgICByZXR1cm4gbmV3IFEocmVzb2x2ZXIpOwogICAgfQoKICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpOwoKICAgIGZ1bmN0aW9uIHJlc29sdmVGbih2YWx1ZSkgewogICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiByZWplY3RGbihyZWFzb24pIHsKICAgICAgZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7CiAgICB9CgogICAgcmVzb2x2ZXIocmVzb2x2ZUZuLCByZWplY3RGbik7CgogICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7CiAgfTsKCiAgJFEuZGVmZXIgPSBkZWZlcjsKICAkUS5yZWplY3QgPSByZWplY3Q7CiAgJFEud2hlbiA9IHdoZW47CiAgJFEuYWxsID0gYWxsOwoKICByZXR1cm4gJFE7Cn0KCmZ1bmN0aW9uICQkUkFGUHJvdmlkZXIoKXsgLy9yQUYKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkd2luZG93LCAkdGltZW91dCkgewogICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZTsKCiAgICB2YXIgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZTsKCiAgICB2YXIgcmFmU3VwcG9ydGVkID0gISFyZXF1ZXN0QW5pbWF0aW9uRnJhbWU7CiAgICB2YXIgcmFmID0gcmFmU3VwcG9ydGVkCiAgICAgID8gZnVuY3Rpb24oZm4pIHsKICAgICAgICAgIHZhciBpZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTsKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICA6IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgICB2YXIgdGltZXIgPSAkdGltZW91dChmbiwgMTYuNjYsIGZhbHNlKTsgLy8gMTAwMCAvIDYwID0gMTYuNjY2CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lcik7CiAgICAgICAgICB9OwogICAgICAgIH07CgogICAgcmFmLnN1cHBvcnRlZCA9IHJhZlN1cHBvcnRlZDsKCiAgICByZXR1cm4gcmFmOwogIH1dOwp9CgovKioKICogREVTSUdOIE5PVEVTCiAqCiAqIFRoZSBkZXNpZ24gZGVjaXNpb25zIGJlaGluZCB0aGUgc2NvcGUgYXJlIGhlYXZpbHkgZmF2b3JlZCBmb3Igc3BlZWQgYW5kIG1lbW9yeSBjb25zdW1wdGlvbi4KICoKICogVGhlIHR5cGljYWwgdXNlIG9mIHNjb3BlIGlzIHRvIHdhdGNoIHRoZSBleHByZXNzaW9ucywgd2hpY2ggbW9zdCBvZiB0aGUgdGltZSByZXR1cm4gdGhlIHNhbWUKICogdmFsdWUgYXMgbGFzdCB0aW1lIHNvIHdlIG9wdGltaXplIHRoZSBvcGVyYXRpb24uCiAqCiAqIENsb3N1cmVzIGNvbnN0cnVjdGlvbiBpcyBleHBlbnNpdmUgaW4gdGVybXMgb2Ygc3BlZWQgYXMgd2VsbCBhcyBtZW1vcnk6CiAqICAgLSBObyBjbG9zdXJlcywgaW5zdGVhZCB1c2UgcHJvdG90eXBpY2FsIGluaGVyaXRhbmNlIGZvciBBUEkKICogICAtIEludGVybmFsIHN0YXRlIG5lZWRzIHRvIGJlIHN0b3JlZCBvbiBzY29wZSBkaXJlY3RseSwgd2hpY2ggbWVhbnMgdGhhdCBwcml2YXRlIHN0YXRlIGlzCiAqICAgICBleHBvc2VkIGFzICQkX19fXyBwcm9wZXJ0aWVzCiAqCiAqIExvb3Agb3BlcmF0aW9ucyBhcmUgb3B0aW1pemVkIGJ5IHVzaW5nIHdoaWxlKGNvdW50LS0pIHsgLi4uIH0KICogICAtIHRoaXMgbWVhbnMgdGhhdCBpbiBvcmRlciB0byBrZWVwIHRoZSBzYW1lIG9yZGVyIG9mIGV4ZWN1dGlvbiBhcyBhZGRpdGlvbiB3ZSBoYXZlIHRvIGFkZAogKiAgICAgaXRlbXMgdG8gdGhlIGFycmF5IGF0IHRoZSBiZWdpbm5pbmcgKHVuc2hpZnQpIGluc3RlYWQgb2YgYXQgdGhlIGVuZCAocHVzaCkKICoKICogQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIGFuZCByZW1vdmVkIG9mdGVuCiAqICAgLSBVc2luZyBhbiBhcnJheSB3b3VsZCBiZSBzbG93IHNpbmNlIGluc2VydHMgaW4gbWlkZGxlIGFyZSBleHBlbnNpdmUgc28gd2UgdXNlIGxpbmtlZCBsaXN0CiAqCiAqIFRoZXJlIGFyZSBmZXcgd2F0Y2hlcyB0aGVuIGEgbG90IG9mIG9ic2VydmVycy4gVGhpcyBpcyB3aHkgeW91IGRvbid0IHdhbnQgdGhlIG9ic2VydmVyIHRvIGJlCiAqIGltcGxlbWVudGVkIGluIHRoZSBzYW1lIHdheSBhcyB3YXRjaC4gV2F0Y2ggcmVxdWlyZXMgcmV0dXJuIG9mIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHdoaWNoCiAqIGFyZSBleHBlbnNpdmUgdG8gY29uc3RydWN0LgogKi8KCgovKioKICogQG5nZG9jIHByb3ZpZGVyCiAqIEBuYW1lICRyb290U2NvcGVQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICoKICogUHJvdmlkZXIgZm9yIHRoZSAkcm9vdFNjb3BlIHNlcnZpY2UuCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgJHJvb3RTY29wZVByb3ZpZGVyI2RpZ2VzdFR0bAogKiBAZGVzY3JpcHRpb24KICoKICogU2V0cyB0aGUgbnVtYmVyIG9mIGAkZGlnZXN0YCBpdGVyYXRpb25zIHRoZSBzY29wZSBzaG91bGQgYXR0ZW1wdCB0byBleGVjdXRlIGJlZm9yZSBnaXZpbmcgdXAgYW5kCiAqIGFzc3VtaW5nIHRoYXQgdGhlIG1vZGVsIGlzIHVuc3RhYmxlLgogKgogKiBUaGUgY3VycmVudCBkZWZhdWx0IGlzIDEwIGl0ZXJhdGlvbnMuCiAqCiAqIEluIGNvbXBsZXggYXBwbGljYXRpb25zIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgZGVwZW5kZW5jaWVzIGJldHdlZW4gYCR3YXRjaGBzIHdpbGwgcmVzdWx0IGluCiAqIHNldmVyYWwgZGlnZXN0IGl0ZXJhdGlvbnMuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwIGRpZ2VzdAogKiBpdGVyYXRpb25zIGZvciBpdHMgbW9kZWwgdG8gc3RhYmlsaXplIHRoZW4geW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB3aGF0IGlzIGNhdXNpbmcgdGhlIG1vZGVsIHRvCiAqIGNvbnRpbnVvdXNseSBjaGFuZ2UgZHVyaW5nIHRoZSBkaWdlc3QuCiAqCiAqIEluY3JlYXNpbmcgdGhlIFRUTCBjb3VsZCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucywgc28geW91IHNob3VsZCBub3QgY2hhbmdlIGl0IHdpdGhvdXQKICogcHJvcGVyIGp1c3RpZmljYXRpb24uCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbnVtYmVyIG9mIGRpZ2VzdCBpdGVyYXRpb25zLgogKi8KCgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJHJvb3RTY29wZQogKiBAZGVzY3JpcHRpb24KICoKICogRXZlcnkgYXBwbGljYXRpb24gaGFzIGEgc2luZ2xlIHJvb3Qge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LgogKiBBbGwgb3RoZXIgc2NvcGVzIGFyZSBkZXNjZW5kYW50IHNjb3BlcyBvZiB0aGUgcm9vdCBzY29wZS4gU2NvcGVzIHByb3ZpZGUgc2VwYXJhdGlvbgogKiBiZXR3ZWVuIHRoZSBtb2RlbCBhbmQgdGhlIHZpZXcsIHZpYSBhIG1lY2hhbmlzbSBmb3Igd2F0Y2hpbmcgdGhlIG1vZGVsIGZvciBjaGFuZ2VzLgogKiBUaGV5IGFsc28gcHJvdmlkZSBhbiBldmVudCBlbWlzc2lvbi9icm9hZGNhc3QgYW5kIHN1YnNjcmlwdGlvbiBmYWNpbGl0eS4gU2VlIHRoZQogKiB7QGxpbmsgZ3VpZGUvc2NvcGUgZGV2ZWxvcGVyIGd1aWRlIG9uIHNjb3Blc30uCiAqLwpmdW5jdGlvbiAkUm9vdFNjb3BlUHJvdmlkZXIoKXsKICB2YXIgVFRMID0gMTA7CiAgdmFyICRyb290U2NvcGVNaW5FcnIgPSBtaW5FcnIoJyRyb290U2NvcGUnKTsKICB2YXIgbGFzdERpcnR5V2F0Y2ggPSBudWxsOwoKICB0aGlzLmRpZ2VzdFR0bCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICBUVEwgPSB2YWx1ZTsKICAgIH0KICAgIHJldHVybiBUVEw7CiAgfTsKCiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHBhcnNlJywgJyRicm93c2VyJywKICAgICAgZnVuY3Rpb24oICRpbmplY3RvciwgICAkZXhjZXB0aW9uSGFuZGxlciwgICAkcGFyc2UsICAgJGJyb3dzZXIpIHsKCiAgICAvKioKICAgICAqIEBuZ2RvYyB0eXBlCiAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBBIHJvb3Qgc2NvcGUgY2FuIGJlIHJldHJpZXZlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUgJHJvb3RTY29wZX0ga2V5IGZyb20gdGhlCiAgICAgKiB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIHVzaW5nIHRoZQogICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlbgogICAgICogY29tcGlsZWQgSFRNTCB0ZW1wbGF0ZSBpcyBleGVjdXRlZC4pCiAgICAgKgogICAgICogSGVyZSBpcyBhIHNpbXBsZSBzY29wZSBzbmlwcGV0IHRvIHNob3cgaG93IHlvdSBjYW4gaW50ZXJhY3Qgd2l0aCB0aGUgc2NvcGUuCiAgICAgKiBgYGBodG1sCiAgICAgKiA8ZmlsZSBzcmM9Ii4vdGVzdC9uZy9yb290U2NvcGVTcGVjLmpzIiB0YWc9ImRvY3MxIiAvPgogICAgICogYGBgCiAgICAgKgogICAgICogIyBJbmhlcml0YW5jZQogICAgICogQSBzY29wZSBjYW4gaW5oZXJpdCBmcm9tIGEgcGFyZW50IHNjb3BlLCBhcyBpbiB0aGlzIGV4YW1wbGU6CiAgICAgKiBgYGBqcwogICAgICAgICB2YXIgcGFyZW50ID0gJHJvb3RTY29wZTsKICAgICAgICAgdmFyIGNoaWxkID0gcGFyZW50LiRuZXcoKTsKCiAgICAgICAgIHBhcmVudC5zYWx1dGF0aW9uID0gIkhlbGxvIjsKICAgICAgICAgY2hpbGQubmFtZSA9ICJXb3JsZCI7CiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdIZWxsbycpOwoKICAgICAgICAgY2hpbGQuc2FsdXRhdGlvbiA9ICJXZWxjb21lIjsKICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ1dlbGNvbWUnKTsKICAgICAgICAgZXhwZWN0KHBhcmVudC5zYWx1dGF0aW9uKS50b0VxdWFsKCdIZWxsbycpOwogICAgICogYGBgCiAgICAgKgogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKCk+PX0gcHJvdmlkZXJzIE1hcCBvZiBzZXJ2aWNlIGZhY3Rvcnkgd2hpY2ggbmVlZCB0byBiZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZCBmb3IgdGhlIGN1cnJlbnQgc2NvcGUuIERlZmF1bHRzIHRvIHtAbGluayBuZ30uCiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCAqPj19IGluc3RhbmNlQ2FjaGUgUHJvdmlkZXMgcHJlLWluc3RhbnRpYXRlZCBzZXJ2aWNlcyB3aGljaCBzaG91bGQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kL292ZXJyaWRlIHNlcnZpY2VzIHByb3ZpZGVkIGJ5IGBwcm92aWRlcnNgLiBUaGlzIGlzIGhhbmR5CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdW5pdC10ZXN0aW5nIGFuZCBoYXZpbmcgdGhlIG5lZWQgdG8gb3ZlcnJpZGUgYSBkZWZhdWx0CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBOZXdseSBjcmVhdGVkIHNjb3BlLgogICAgICoKICAgICAqLwogICAgZnVuY3Rpb24gU2NvcGUoKSB7CiAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpOwogICAgICB0aGlzLiQkcGhhc2UgPSB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkd2F0Y2hlcnMgPQogICAgICAgICAgICAgICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPQogICAgICAgICAgICAgICAgICAgICB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7CiAgICAgIHRoaXNbJ3RoaXMnXSA9IHRoaXMuJHJvb3QgPSAgdGhpczsKICAgICAgdGhpcy4kJGRlc3Ryb3llZCA9IGZhbHNlOwogICAgICB0aGlzLiQkYXN5bmNRdWV1ZSA9IFtdOwogICAgICB0aGlzLiQkcG9zdERpZ2VzdFF1ZXVlID0gW107CiAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTsKICAgICAgdGhpcy4kJGxpc3RlbmVyQ291bnQgPSB7fTsKICAgICAgdGhpcy4kJGlzb2xhdGVCaW5kaW5ncyA9IHt9OwogICAgfQoKICAgIC8qKgogICAgICogQG5nZG9jIHByb3BlcnR5CiAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRpZAogICAgICogQHJldHVybnMge251bWJlcn0gVW5pcXVlIHNjb3BlIElEIChtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcgYWxwaGFudW1lcmljIHNlcXVlbmNlKSB1c2VmdWwgZm9yCiAgICAgKiAgIGRlYnVnZ2luZy4KICAgICAqLwoKCiAgICBTY29wZS5wcm90b3R5cGUgPSB7CiAgICAgIGNvbnN0cnVjdG9yOiBTY29wZSwKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkbmV3CiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBDcmVhdGVzIGEgbmV3IGNoaWxkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfS4KICAgICAgICoKICAgICAgICogVGhlIHBhcmVudCBzY29wZSB3aWxsIHByb3BhZ2F0ZSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IGFuZAogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gZXZlbnRzLiBUaGUgc2NvcGUgY2FuIGJlIHJlbW92ZWQgZnJvbSB0aGUKICAgICAgICogc2NvcGUgaGllcmFyY2h5IHVzaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95ICRkZXN0cm95KCl9LgogICAgICAgKgogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfSBtdXN0IGJlIGNhbGxlZCBvbiBhIHNjb3BlIHdoZW4gaXQgaXMKICAgICAgICogZGVzaXJlZCBmb3IgdGhlIHNjb3BlIGFuZCBpdHMgY2hpbGQgc2NvcGVzIHRvIGJlIHBlcm1hbmVudGx5IGRldGFjaGVkIGZyb20gdGhlIHBhcmVudCBhbmQKICAgICAgICogdGh1cyBzdG9wIHBhcnRpY2lwYXRpbmcgaW4gbW9kZWwgY2hhbmdlIGRldGVjdGlvbiBhbmQgbGlzdGVuZXIgbm90aWZpY2F0aW9uIGJ5IGludm9raW5nLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzb2xhdGUgSWYgdHJ1ZSwgdGhlbiB0aGUgc2NvcGUgZG9lcyBub3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdCBmcm9tIHRoZQogICAgICAgKiAgICAgICAgIHBhcmVudCBzY29wZS4gVGhlIHNjb3BlIGlzIGlzb2xhdGVkLCBhcyBpdCBjYW4gbm90IHNlZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy4KICAgICAgICogICAgICAgICBXaGVuIGNyZWF0aW5nIHdpZGdldHMsIGl0IGlzIHVzZWZ1bCBmb3IgdGhlIHdpZGdldCB0byBub3QgYWNjaWRlbnRhbGx5IHJlYWQgcGFyZW50CiAgICAgICAqICAgICAgICAgc3RhdGUuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBuZXdseSBjcmVhdGVkIGNoaWxkIHNjb3BlLgogICAgICAgKgogICAgICAgKi8KICAgICAgJG5ldzogZnVuY3Rpb24oaXNvbGF0ZSkgewogICAgICAgIHZhciBjaGlsZDsKCiAgICAgICAgaWYgKGlzb2xhdGUpIHsKICAgICAgICAgIGNoaWxkID0gbmV3IFNjb3BlKCk7CiAgICAgICAgICBjaGlsZC4kcm9vdCA9IHRoaXMuJHJvb3Q7CiAgICAgICAgICAvLyBlbnN1cmUgdGhhdCB0aGVyZSBpcyBqdXN0IG9uZSBhc3luYyBxdWV1ZSBwZXIgJHJvb3RTY29wZSBhbmQgaXRzIGNoaWxkcmVuCiAgICAgICAgICBjaGlsZC4kJGFzeW5jUXVldWUgPSB0aGlzLiQkYXN5bmNRdWV1ZTsKICAgICAgICAgIGNoaWxkLiQkcG9zdERpZ2VzdFF1ZXVlID0gdGhpcy4kJHBvc3REaWdlc3RRdWV1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gT25seSBjcmVhdGUgYSBjaGlsZCBzY29wZSBjbGFzcyBpZiBzb21lYm9keSBhc2tzIGZvciBvbmUsCiAgICAgICAgICAvLyBidXQgY2FjaGUgaXQgdG8gYWxsb3cgdGhlIFZNIHRvIG9wdGltaXplIGxvb2t1cHMuCiAgICAgICAgICBpZiAoIXRoaXMuJCRDaGlsZFNjb3BlKSB7CiAgICAgICAgICAgIHRoaXMuJCRDaGlsZFNjb3BlID0gZnVuY3Rpb24gQ2hpbGRTY29wZSgpIHsKICAgICAgICAgICAgICB0aGlzLiQkd2F0Y2hlcnMgPSB0aGlzLiQkbmV4dFNpYmxpbmcgPQogICAgICAgICAgICAgICAgICB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7CiAgICAgICAgICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9OwogICAgICAgICAgICAgIHRoaXMuJCRsaXN0ZW5lckNvdW50ID0ge307CiAgICAgICAgICAgICAgdGhpcy4kaWQgPSBuZXh0VWlkKCk7CiAgICAgICAgICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBudWxsOwogICAgICAgICAgICB9OwogICAgICAgICAgICB0aGlzLiQkQ2hpbGRTY29wZS5wcm90b3R5cGUgPSB0aGlzOwogICAgICAgICAgfQogICAgICAgICAgY2hpbGQgPSBuZXcgdGhpcy4kJENoaWxkU2NvcGUoKTsKICAgICAgICB9CiAgICAgICAgY2hpbGRbJ3RoaXMnXSA9IGNoaWxkOwogICAgICAgIGNoaWxkLiRwYXJlbnQgPSB0aGlzOwogICAgICAgIGNoaWxkLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkY2hpbGRUYWlsOwogICAgICAgIGlmICh0aGlzLiQkY2hpbGRIZWFkKSB7CiAgICAgICAgICB0aGlzLiQkY2hpbGRUYWlsLiQkbmV4dFNpYmxpbmcgPSBjaGlsZDsKICAgICAgICAgIHRoaXMuJCRjaGlsZFRhaWwgPSBjaGlsZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBjaGlsZDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNoaWxkOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkd2F0Y2gKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFJlZ2lzdGVycyBhIGBsaXN0ZW5lcmAgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWQgd2hlbmV2ZXIgdGhlIGB3YXRjaEV4cHJlc3Npb25gIGNoYW5nZXMuCiAgICAgICAqCiAgICAgICAqIC0gVGhlIGB3YXRjaEV4cHJlc3Npb25gIGlzIGNhbGxlZCBvbiBldmVyeSBjYWxsIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QKICAgICAgICogICAkZGlnZXN0KCl9IGFuZCBzaG91bGQgcmV0dXJuIHRoZSB2YWx1ZSB0aGF0IHdpbGwgYmUgd2F0Y2hlZC4gKFNpbmNlCiAgICAgICAqICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IHJlcnVucyB3aGVuIGl0IGRldGVjdHMgY2hhbmdlcyB0aGUKICAgICAgICogICBgd2F0Y2hFeHByZXNzaW9uYCBjYW4gZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBwZXIKICAgICAgICogICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gYW5kIHNob3VsZCBiZSBpZGVtcG90ZW50LikKICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgb25seSB3aGVuIHRoZSB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGB3YXRjaEV4cHJlc3Npb25gIGFuZCB0aGUKICAgICAgICogICBwcmV2aW91cyBjYWxsIHRvIGB3YXRjaEV4cHJlc3Npb25gIGFyZSBub3QgZXF1YWwgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgaW5pdGlhbCBydW4sCiAgICAgICAqICAgc2VlIGJlbG93KS4gSW5lcXVhbGl0eSBpcyBkZXRlcm1pbmVkIGFjY29yZGluZyB0byByZWZlcmVuY2UgaW5lcXVhbGl0eSwKICAgICAgICogICBbc3RyaWN0IGNvbXBhcmlzb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9Db21wYXJpc29uX09wZXJhdG9ycykKICAgICAgICogICAgdmlhIHRoZSBgIT09YCBKYXZhc2NyaXB0IG9wZXJhdG9yLCB1bmxlc3MgYG9iamVjdEVxdWFsaXR5ID09IHRydWVgCiAgICAgICAqICAgKHNlZSBuZXh0IHBvaW50KQogICAgICAgKiAtIFdoZW4gYG9iamVjdEVxdWFsaXR5ID09IHRydWVgLCBpbmVxdWFsaXR5IG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBkZXRlcm1pbmVkCiAgICAgICAqICAgYWNjb3JkaW5nIHRvIHRoZSB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGZ1bmN0aW9uLiBUbyBzYXZlIHRoZSB2YWx1ZSBvZiB0aGUgb2JqZWN0IGZvcgogICAgICAgKiAgIGxhdGVyIGNvbXBhcmlzb24sIHRoZSB7QGxpbmsgYW5ndWxhci5jb3B5fSBmdW5jdGlvbiBpcyB1c2VkLiBUaGlzIHRoZXJlZm9yZSBtZWFucyB0aGF0CiAgICAgICAqICAgd2F0Y2hpbmcgY29tcGxleCBvYmplY3RzIHdpbGwgaGF2ZSBhZHZlcnNlIG1lbW9yeSBhbmQgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLgogICAgICAgKiAtIFRoZSB3YXRjaCBgbGlzdGVuZXJgIG1heSBjaGFuZ2UgdGhlIG1vZGVsLCB3aGljaCBtYXkgdHJpZ2dlciBvdGhlciBgbGlzdGVuZXJgcyB0byBmaXJlLgogICAgICAgKiAgIFRoaXMgaXMgYWNoaWV2ZWQgYnkgcmVydW5uaW5nIHRoZSB3YXRjaGVycyB1bnRpbCBubyBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gVGhlIHJlcnVuCiAgICAgICAqICAgaXRlcmF0aW9uIGxpbWl0IGlzIDEwIHRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcCBkZWFkbG9jay4KICAgICAgICoKICAgICAgICoKICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBpcyBjYWxsZWQsCiAgICAgICAqIHlvdSBjYW4gcmVnaXN0ZXIgYSBgd2F0Y2hFeHByZXNzaW9uYCBmdW5jdGlvbiB3aXRoIG5vIGBsaXN0ZW5lcmAuIChTaW5jZSBgd2F0Y2hFeHByZXNzaW9uYAogICAgICAgKiBjYW4gZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBwZXIge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZSB3aGVuIGEKICAgICAgICogY2hhbmdlIGlzIGRldGVjdGVkLCBiZSBwcmVwYXJlZCBmb3IgbXVsdGlwbGUgY2FsbHMgdG8geW91ciBsaXN0ZW5lci4pCiAgICAgICAqCiAgICAgICAqIEFmdGVyIGEgd2F0Y2hlciBpcyByZWdpc3RlcmVkIHdpdGggdGhlIHNjb3BlLCB0aGUgYGxpc3RlbmVyYCBmbiBpcyBjYWxsZWQgYXN5bmNocm9ub3VzbHkKICAgICAgICogKHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jICRldmFsQXN5bmN9KSB0byBpbml0aWFsaXplIHRoZQogICAgICAgKiB3YXRjaGVyLiBJbiByYXJlIGNhc2VzLCB0aGlzIGlzIHVuZGVzaXJhYmxlIGJlY2F1c2UgdGhlIGxpc3RlbmVyIGlzIGNhbGxlZCB3aGVuIHRoZSByZXN1bHQKICAgICAgICogb2YgYHdhdGNoRXhwcmVzc2lvbmAgZGlkbid0IGNoYW5nZS4gVG8gZGV0ZWN0IHRoaXMgc2NlbmFyaW8gd2l0aGluIHRoZSBgbGlzdGVuZXJgIGZuLCB5b3UKICAgICAgICogY2FuIGNvbXBhcmUgdGhlIGBuZXdWYWxgIGFuZCBgb2xkVmFsYC4gSWYgdGhlc2UgdHdvIHZhbHVlcyBhcmUgaWRlbnRpY2FsIChgPT09YCkgdGhlbiB0aGUKICAgICAgICogbGlzdGVuZXIgd2FzIGNhbGxlZCBkdWUgdG8gaW5pdGlhbGl6YXRpb24uCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiBgYGBqcwogICAgICAgICAgIC8vIGxldCdzIGFzc3VtZSB0aGF0IHNjb3BlIHdhcyBkZXBlbmRlbmN5IGluamVjdGVkIGFzIHRoZSAkcm9vdFNjb3BlCiAgICAgICAgICAgdmFyIHNjb3BlID0gJHJvb3RTY29wZTsKICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJzsKICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDsKCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICBzY29wZS5jb3VudGVyID0gc2NvcGUuY291bnRlciArIDE7CiAgICAgICAgICAgfSk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CgogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIgaXMgYWx3YXlzIGNhbGxlZCBkdXJpbmcgdGhlIGZpcnN0ICRkaWdlc3QgbG9vcCBhZnRlciBpdCB3YXMgcmVnaXN0ZXJlZAogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpOwoKICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAgLy8gYnV0IG5vdyBpdCB3aWxsIG5vdCBiZSBjYWxsZWQgdW5sZXNzIHRoZSB2YWx1ZSBjaGFuZ2VzCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7CgogICAgICAgICAgIHNjb3BlLm5hbWUgPSAnYWRhbSc7CiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDIpOwoKCgogICAgICAgICAgIC8vIFVzaW5nIGEgZnVuY3Rpb24gYXMgYSB3YXRjaEV4cHJlc3Npb24KICAgICAgICAgICB2YXIgZm9vZDsKICAgICAgICAgICBzY29wZS5mb29kQ291bnRlciA9IDA7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApOwogICAgICAgICAgIHNjb3BlLiR3YXRjaCgKICAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdmFsdWUgYmVpbmcgd2F0Y2hlZC4gSXQgaXMgY2FsbGVkIGZvciBlYWNoIHR1cm4gb2YgdGhlICRkaWdlc3QgbG9vcAogICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBmb29kOyB9LAogICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2hhbmdlIGxpc3RlbmVyLCBjYWxsZWQgd2hlbiB0aGUgdmFsdWUgcmV0dXJuZWQgZnJvbSB0aGUgYWJvdmUgZnVuY3Rpb24gY2hhbmdlcwogICAgICAgICAgICAgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICAgIGlmICggbmV3VmFsdWUgIT09IG9sZFZhbHVlICkgewogICAgICAgICAgICAgICAgIC8vIE9ubHkgaW5jcmVtZW50IHRoZSBjb3VudGVyIGlmIHRoZSB2YWx1ZSBjaGFuZ2VkCiAgICAgICAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSBzY29wZS5mb29kQ291bnRlciArIDE7CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KICAgICAgICAgICApOwogICAgICAgICAgIC8vIE5vIGRpZ2VzdCBoYXMgYmVlbiBydW4gc28gdGhlIGNvdW50ZXIgd2lsbCBiZSB6ZXJvCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApOwoKICAgICAgICAgICAvLyBSdW4gdGhlIGRpZ2VzdCBidXQgc2luY2UgZm9vZCBoYXMgbm90IGNoYW5nZWQgY291bnQgd2lsbCBzdGlsbCBiZSB6ZXJvCiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTsKCiAgICAgICAgICAgLy8gVXBkYXRlIGZvb2QgYW5kIHJ1biBkaWdlc3QuICBOb3cgdGhlIGNvdW50ZXIgd2lsbCBpbmNyZW1lbnQKICAgICAgICAgICBmb29kID0gJ2NoZWVzZWJ1cmdlcic7CiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgxKTsKCiAgICAgICAqIGBgYAogICAgICAgKgogICAgICAgKgogICAgICAgKgogICAgICAgKiBAcGFyYW0geyhmdW5jdGlvbigpfHN0cmluZyl9IHdhdGNoRXhwcmVzc2lvbiBFeHByZXNzaW9uIHRoYXQgaXMgZXZhbHVhdGVkIG9uIGVhY2gKICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQSBjaGFuZ2UgaW4gdGhlIHJldHVybiB2YWx1ZSB0cmlnZ2VycwogICAgICAgKiAgICBhIGNhbGwgdG8gdGhlIGBsaXN0ZW5lcmAuCiAgICAgICAqCiAgICAgICAqICAgIC0gYHN0cmluZ2A6IEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufQogICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBjYWxsZWQgd2l0aCBjdXJyZW50IGBzY29wZWAgYXMgYSBwYXJhbWV0ZXIuCiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSB2YWx1ZQogICAgICAgKiAgICBvZiBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLgogICAgICAgKgogICAgICAgKiAgICAtIGBuZXdWYWxgIGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYAogICAgICAgKiAgICAtIGBvbGRWYWxgIGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmAKICAgICAgICogICAgLSBgc2NvcGVgIHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZQogICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvYmplY3RFcXVhbGl0eSBDb21wYXJlIGZvciBvYmplY3QgZXF1YWxpdHkgdXNpbmcge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBpbnN0ZWFkIG9mCiAgICAgICAqICAgICBjb21wYXJpbmcgZm9yIHJlZmVyZW5jZSBlcXVhbGl0eS4KICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4KICAgICAgICovCiAgICAgICR3YXRjaDogZnVuY3Rpb24od2F0Y2hFeHAsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSkgewogICAgICAgIHZhciBnZXQgPSAkcGFyc2Uod2F0Y2hFeHApOwoKICAgICAgICBpZiAoZ2V0LiQkd2F0Y2hEZWxlZ2F0ZSkgewogICAgICAgICAgcmV0dXJuIGdldC4kJHdhdGNoRGVsZWdhdGUodGhpcywgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBnZXQpOwogICAgICAgIH0KICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLAogICAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMsCiAgICAgICAgICAgIHdhdGNoZXIgPSB7CiAgICAgICAgICAgICAgZm46IGxpc3RlbmVyLAogICAgICAgICAgICAgIGxhc3Q6IGluaXRXYXRjaFZhbCwKICAgICAgICAgICAgICBnZXQ6IGdldCwKICAgICAgICAgICAgICBleHA6IHdhdGNoRXhwLAogICAgICAgICAgICAgIGVxOiAhIW9iamVjdEVxdWFsaXR5CiAgICAgICAgICAgIH07CgogICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDsKCiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkgewogICAgICAgICAgd2F0Y2hlci5mbiA9IG5vb3A7CiAgICAgICAgfQoKICAgICAgICBpZiAoIWFycmF5KSB7CiAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMgPSBbXTsKICAgICAgICB9CiAgICAgICAgLy8gd2UgdXNlIHVuc2hpZnQgc2luY2Ugd2UgdXNlIGEgd2hpbGUgbG9vcCBpbiAkZGlnZXN0IGZvciBzcGVlZC4KICAgICAgICAvLyB0aGUgd2hpbGUgbG9vcCByZWFkcyBpbiByZXZlcnNlIG9yZGVyLgogICAgICAgIGFycmF5LnVuc2hpZnQod2F0Y2hlcik7CgogICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2goKSB7CiAgICAgICAgICBhcnJheVJlbW92ZShhcnJheSwgd2F0Y2hlcik7CiAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7CiAgICAgICAgfTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoR3JvdXAKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIEEgdmFyaWFudCBvZiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggJHdhdGNoKCl9IHdoZXJlIGl0IHdhdGNoZXMgYW4gYXJyYXkgb2YgYHdhdGNoRXhwcmVzc2lvbnNgLgogICAgICAgKiBJZiBhbnkgb25lIGV4cHJlc3Npb24gaW4gdGhlIGNvbGxlY3Rpb24gY2hhbmdlcyB0aGUgYGxpc3RlbmVyYCBpcyBleGVjdXRlZC4KICAgICAgICoKICAgICAgICogLSBUaGUgaXRlbXMgaW4gdGhlIGB3YXRjaEV4cHJlc3Npb25zYCBhcnJheSBhcmUgb2JzZXJ2ZWQgdmlhIHN0YW5kYXJkICR3YXRjaCBvcGVyYXRpb24gYW5kIGFyZSBleGFtaW5lZCBvbiBldmVyeQogICAgICAgKiAgIGNhbGwgdG8gJGRpZ2VzdCgpIHRvIHNlZSBpZiBhbnkgaXRlbXMgY2hhbmdlcy4KICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55IGV4cHJlc3Npb24gaW4gdGhlIGB3YXRjaEV4cHJlc3Npb25zYCBhcnJheSBjaGFuZ2VzLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8RnVuY3Rpb24oc2NvcGUpPn0gd2F0Y2hFeHByZXNzaW9ucyBBcnJheSBvZiBleHByZXNzaW9ucyB0aGF0IHdpbGwgYmUgaW5kaXZpZHVhbGx5CiAgICAgICAqIHdhdGNoZWQgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfQogICAgICAgKgogICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld1ZhbHVlcywgb2xkVmFsdWVzLCBzY29wZSl9IGxpc3RlbmVyIENhbGxiYWNrIGNhbGxlZCB3aGVuZXZlciB0aGUgcmV0dXJuIHZhbHVlIG9mIGFueQogICAgICAgKiAgICBleHByZXNzaW9uIGluIGB3YXRjaEV4cHJlc3Npb25zYCBjaGFuZ2VzCiAgICAgICAqICAgIFRoZSBgbmV3VmFsdWVzYCBhcnJheSBjb250YWlucyB0aGUgY3VycmVudCB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZwogICAgICAgKiAgICB0aG9zZSBvZiBgd2F0Y2hFeHByZXNzaW9uYAogICAgICAgKiAgICBhbmQgdGhlIGBvbGRWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZwogICAgICAgKiAgICB0aG9zZSBvZiBgd2F0Y2hFeHByZXNzaW9uYAogICAgICAgKiAgICBUaGUgYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGUuCiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciBhbGwgbGlzdGVuZXJzLgogICAgICAgKi8KICAgICAgJHdhdGNoR3JvdXA6IGZ1bmN0aW9uKHdhdGNoRXhwcmVzc2lvbnMsIGxpc3RlbmVyKSB7CiAgICAgICAgdmFyIG9sZFZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7CiAgICAgICAgdmFyIG5ld1ZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7CiAgICAgICAgdmFyIGRlcmVnaXN0ZXJGbnMgPSBbXTsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgdmFyIGNoYW5nZVJlYWN0aW9uU2NoZWR1bGVkID0gZmFsc2U7CiAgICAgICAgdmFyIGZpcnN0UnVuID0gdHJ1ZTsKCiAgICAgICAgaWYgKCF3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCkgewogICAgICAgICAgLy8gTm8gZXhwcmVzc2lvbnMgbWVhbnMgd2UgY2FsbCB0aGUgbGlzdGVuZXIgQVNBUAogICAgICAgICAgdmFyIHNob3VsZENhbGwgPSB0cnVlOwogICAgICAgICAgc2VsZi4kZXZhbEFzeW5jKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHNob3VsZENhbGwpIGxpc3RlbmVyKG5ld1ZhbHVlcywgbmV3VmFsdWVzLCBzZWxmKTsKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkgewogICAgICAgICAgICBzaG91bGRDYWxsID0gZmFsc2U7CiAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgaWYgKHdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugc2l6ZSBvZiBvbmUKICAgICAgICAgIHJldHVybiB0aGlzLiR3YXRjaCh3YXRjaEV4cHJlc3Npb25zWzBdLCBmdW5jdGlvbiB3YXRjaEdyb3VwQWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSwgc2NvcGUpIHsKICAgICAgICAgICAgbmV3VmFsdWVzWzBdID0gdmFsdWU7CiAgICAgICAgICAgIG9sZFZhbHVlc1swXSA9IG9sZFZhbHVlOwogICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZXMsICh2YWx1ZSA9PT0gb2xkVmFsdWUpID8gbmV3VmFsdWVzIDogb2xkVmFsdWVzLCBzY29wZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZvckVhY2god2F0Y2hFeHByZXNzaW9ucywgZnVuY3Rpb24gKGV4cHIsIGkpIHsKICAgICAgICAgIHZhciB1bndhdGNoRm4gPSBzZWxmLiR3YXRjaChleHByLCBmdW5jdGlvbiB3YXRjaEdyb3VwU3ViQWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSkgewogICAgICAgICAgICBuZXdWYWx1ZXNbaV0gPSB2YWx1ZTsKICAgICAgICAgICAgb2xkVmFsdWVzW2ldID0gb2xkVmFsdWU7CiAgICAgICAgICAgIGlmICghY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQpIHsKICAgICAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IHRydWU7CiAgICAgICAgICAgICAgc2VsZi4kZXZhbEFzeW5jKHdhdGNoR3JvdXBBY3Rpb24pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIGRlcmVnaXN0ZXJGbnMucHVzaCh1bndhdGNoRm4pOwogICAgICAgIH0pOwoKICAgICAgICBmdW5jdGlvbiB3YXRjaEdyb3VwQWN0aW9uKCkgewogICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSBmYWxzZTsKCiAgICAgICAgICBpZiAoZmlyc3RSdW4pIHsKICAgICAgICAgICAgZmlyc3RSdW4gPSBmYWxzZTsKICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNlbGYpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkgewogICAgICAgICAgd2hpbGUgKGRlcmVnaXN0ZXJGbnMubGVuZ3RoKSB7CiAgICAgICAgICAgIGRlcmVnaXN0ZXJGbnMuc2hpZnQoKSgpOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH0sCgoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkd2F0Y2hDb2xsZWN0aW9uCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBTaGFsbG93IHdhdGNoZXMgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZCBmaXJlcyB3aGVuZXZlciBhbnkgb2YgdGhlIHByb3BlcnRpZXMgY2hhbmdlCiAgICAgICAqIChmb3IgYXJyYXlzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmcgdGhlIGFycmF5IGl0ZW1zOyBmb3Igb2JqZWN0IG1hcHMsIHRoaXMgaW1wbGllcyB3YXRjaGluZwogICAgICAgKiB0aGUgcHJvcGVydGllcykuIElmIGEgY2hhbmdlIGlzIGRldGVjdGVkLCB0aGUgYGxpc3RlbmVyYCBjYWxsYmFjayBpcyBmaXJlZC4KICAgICAgICoKICAgICAgICogLSBUaGUgYG9iamAgY29sbGVjdGlvbiBpcyBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgaXMgZXhhbWluZWQgb24gZXZlcnkKICAgICAgICogICBjYWxsIHRvICRkaWdlc3QoKSB0byBzZWUgaWYgYW55IGl0ZW1zIGhhdmUgYmVlbiBhZGRlZCwgcmVtb3ZlZCwgb3IgbW92ZWQuCiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueXRoaW5nIHdpdGhpbiB0aGUgYG9iamAgaGFzIGNoYW5nZWQuIEV4YW1wbGVzIGluY2x1ZGUKICAgICAgICogICBhZGRpbmcsIHJlbW92aW5nLCBhbmQgbW92aW5nIGl0ZW1zIGJlbG9uZ2luZyB0byBhbiBvYmplY3Qgb3IgYXJyYXkuCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiBgYGBqcwogICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydpZ29yJywgJ21hdGlhcycsICdtaXNrbycsICdqYW1lcyddOwogICAgICAgICAgJHNjb3BlLmRhdGFDb3VudCA9IDQ7CgogICAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ25hbWVzJywgZnVuY3Rpb24obmV3TmFtZXMsIG9sZE5hbWVzKSB7CiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSBuZXdOYW1lcy5sZW5ndGg7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTsKICAgICAgICAgICRzY29wZS4kZGlnZXN0KCk7CgogICAgICAgICAgLy9zdGlsbCBhdCA0IC4uLiBubyBjaGFuZ2VzCiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTsKCiAgICAgICAgICAkc2NvcGUubmFtZXMucG9wKCk7CiAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpOwoKICAgICAgICAgIC8vbm93IHRoZXJlJ3MgYmVlbiBhIGNoYW5nZQogICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoMyk7CiAgICAgICAqIGBgYAogICAgICAgKgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbihzY29wZSl9IG9iaiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uIFRoZQogICAgICAgKiAgICBleHByZXNzaW9uIHZhbHVlIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgd2hpY2ggaXMgb2JzZXJ2ZWQgb24gZWFjaAogICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlLiBBbnkgc2hhbGxvdyBjaGFuZ2Ugd2l0aGluIHRoZQogICAgICAgKiAgICBjb2xsZWN0aW9uIHdpbGwgdHJpZ2dlciBhIGNhbGwgdG8gdGhlIGBsaXN0ZW5lcmAuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3Q29sbGVjdGlvbiwgb2xkQ29sbGVjdGlvbiwgc2NvcGUpfSBsaXN0ZW5lciBhIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZAogICAgICAgKiAgICB3aGVuIGEgY2hhbmdlIGlzIGRldGVjdGVkLgogICAgICAgKiAgICAtIFRoZSBgbmV3Q29sbGVjdGlvbmAgb2JqZWN0IGlzIHRoZSBuZXdseSBtb2RpZmllZCBkYXRhIG9idGFpbmVkIGZyb20gdGhlIGBvYmpgIGV4cHJlc3Npb24KICAgICAgICogICAgLSBUaGUgYG9sZENvbGxlY3Rpb25gIG9iamVjdCBpcyBhIGNvcHkgb2YgdGhlIGZvcm1lciBjb2xsZWN0aW9uIGRhdGEuCiAgICAgICAqICAgICAgRHVlIHRvIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb25zLCB0aGVgb2xkQ29sbGVjdGlvbmAgdmFsdWUgaXMgY29tcHV0ZWQgb25seSBpZiB0aGUKICAgICAgICogICAgICBgbGlzdGVuZXJgIGZ1bmN0aW9uIGRlY2xhcmVzIHR3byBvciBtb3JlIGFyZ3VtZW50cy4KICAgICAgICogICAgLSBUaGUgYHNjb3BlYCBhcmd1bWVudCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGUuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLiBXaGVuIHRoZQogICAgICAgKiAgICBkZS1yZWdpc3RyYXRpb24gZnVuY3Rpb24gaXMgZXhlY3V0ZWQsIHRoZSBpbnRlcm5hbCB3YXRjaCBvcGVyYXRpb24gaXMgdGVybWluYXRlZC4KICAgICAgICovCiAgICAgICR3YXRjaENvbGxlY3Rpb246IGZ1bmN0aW9uKG9iaiwgbGlzdGVuZXIpIHsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgLy8gdGhlIGN1cnJlbnQgdmFsdWUsIHVwZGF0ZWQgb24gZWFjaCBkaXJ0eS1jaGVjayBydW4KICAgICAgICB2YXIgbmV3VmFsdWU7CiAgICAgICAgLy8gYSBzaGFsbG93IGNvcHkgb2YgdGhlIG5ld1ZhbHVlIGZyb20gdGhlIGxhc3QgZGlydHktY2hlY2sgcnVuLAogICAgICAgIC8vIHVwZGF0ZWQgdG8gbWF0Y2ggbmV3VmFsdWUgZHVyaW5nIGRpcnR5LWNoZWNrIHJ1bgogICAgICAgIHZhciBvbGRWYWx1ZTsKICAgICAgICAvLyBhIHNoYWxsb3cgY29weSBvZiB0aGUgbmV3VmFsdWUgZnJvbSB3aGVuIHRoZSBsYXN0IGNoYW5nZSBoYXBwZW5lZAogICAgICAgIHZhciB2ZXJ5T2xkVmFsdWU7CiAgICAgICAgLy8gb25seSB0cmFjayB2ZXJ5T2xkVmFsdWUgaWYgdGhlIGxpc3RlbmVyIGlzIGFza2luZyBmb3IgaXQKICAgICAgICB2YXIgdHJhY2tWZXJ5T2xkVmFsdWUgPSAobGlzdGVuZXIubGVuZ3RoID4gMSk7CiAgICAgICAgdmFyIGNoYW5nZURldGVjdGVkID0gMDsKICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0b3IgPSAkcGFyc2Uob2JqLCAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IpOwogICAgICAgIHZhciBpbnRlcm5hbEFycmF5ID0gW107CiAgICAgICAgdmFyIGludGVybmFsT2JqZWN0ID0ge307CiAgICAgICAgdmFyIGluaXRSdW4gPSB0cnVlOwogICAgICAgIHZhciBvbGRMZW5ndGggPSAwOwoKICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IoX3ZhbHVlKSB7CiAgICAgICAgICBuZXdWYWx1ZSA9IF92YWx1ZTsKICAgICAgICAgIHZhciBuZXdMZW5ndGgsIGtleSwgYm90aE5hTiwgbmV3SXRlbSwgb2xkSXRlbTsKCiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkgeyAvLyBpZiBwcmltaXRpdmUKICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkgewogICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7CiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKzsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZShuZXdWYWx1ZSkpIHsKICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbEFycmF5KSB7CiAgICAgICAgICAgICAgLy8gd2UgYXJlIHRyYW5zaXRpb25pbmcgZnJvbSBzb21ldGhpbmcgd2hpY2ggd2FzIG5vdCBhbiBhcnJheSBpbnRvIGFycmF5LgogICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxBcnJheTsKICAgICAgICAgICAgICBvbGRMZW5ndGggPSBvbGRWYWx1ZS5sZW5ndGggPSAwOwogICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5ld0xlbmd0aCA9IG5ld1ZhbHVlLmxlbmd0aDsKCiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggIT09IG5ld0xlbmd0aCkgewogICAgICAgICAgICAgIC8vIGlmIGxlbmd0aHMgZG8gbm90IG1hdGNoIHdlIG5lZWQgdG8gdHJpZ2dlciBjaGFuZ2Ugbm90aWZpY2F0aW9uCiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKzsKICAgICAgICAgICAgICBvbGRWYWx1ZS5sZW5ndGggPSBvbGRMZW5ndGggPSBuZXdMZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gY29weSB0aGUgaXRlbXMgdG8gb2xkVmFsdWUgYW5kIGxvb2sgZm9yIGNoYW5nZXMuCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3TGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBvbGRJdGVtID0gb2xkVmFsdWVbaV07CiAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld1ZhbHVlW2ldOwoKICAgICAgICAgICAgICBib3RoTmFOID0gKG9sZEl0ZW0gIT09IG9sZEl0ZW0pICYmIChuZXdJdGVtICE9PSBuZXdJdGVtKTsKICAgICAgICAgICAgICBpZiAoIWJvdGhOYU4gJiYgKG9sZEl0ZW0gIT09IG5ld0l0ZW0pKSB7CiAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrOwogICAgICAgICAgICAgICAgb2xkVmFsdWVbaV0gPSBuZXdJdGVtOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbE9iamVjdCkgewogICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gb2JqZWN0IGludG8gb2JqZWN0LgogICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxPYmplY3QgPSB7fTsKICAgICAgICAgICAgICBvbGRMZW5ndGggPSAwOwogICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gY29weSB0aGUgaXRlbXMgdG8gb2xkVmFsdWUgYW5kIGxvb2sgZm9yIGNoYW5nZXMuCiAgICAgICAgICAgIG5ld0xlbmd0aCA9IDA7CiAgICAgICAgICAgIGZvciAoa2V5IGluIG5ld1ZhbHVlKSB7CiAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgIG5ld0xlbmd0aCsrOwogICAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld1ZhbHVlW2tleV07CiAgICAgICAgICAgICAgICBvbGRJdGVtID0gb2xkVmFsdWVba2V5XTsKCiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICAgICAgIGJvdGhOYU4gPSAob2xkSXRlbSAhPT0gb2xkSXRlbSkgJiYgKG5ld0l0ZW0gIT09IG5ld0l0ZW0pOwogICAgICAgICAgICAgICAgICBpZiAoIWJvdGhOYU4gJiYgKG9sZEl0ZW0gIT09IG5ld0l0ZW0pKSB7CiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKzsKICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZVtrZXldID0gbmV3SXRlbTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoKys7CiAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdJdGVtOwogICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAob2xkTGVuZ3RoID4gbmV3TGVuZ3RoKSB7CiAgICAgICAgICAgICAgLy8gd2UgdXNlZCB0byBoYXZlIG1vcmUga2V5cywgbmVlZCB0byBmaW5kIHRoZW0gYW5kIGRlc3Ryb3kgdGhlbS4KICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrOwogICAgICAgICAgICAgIGZvcihrZXkgaW4gb2xkVmFsdWUpIHsKICAgICAgICAgICAgICAgIGlmICghbmV3VmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICAgICAgICBvbGRMZW5ndGgtLTsKICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFZhbHVlW2tleV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gY2hhbmdlRGV0ZWN0ZWQ7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uQWN0aW9uKCkgewogICAgICAgICAgaWYgKGluaXRSdW4pIHsKICAgICAgICAgICAgaW5pdFJ1biA9IGZhbHNlOwogICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZSwgbmV3VmFsdWUsIHNlbGYpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUsIHZlcnlPbGRWYWx1ZSwgc2VsZik7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gbWFrZSBhIGNvcHkgZm9yIHRoZSBuZXh0IHRpbWUgYSBjb2xsZWN0aW9uIGlzIGNoYW5nZWQKICAgICAgICAgIGlmICh0cmFja1ZlcnlPbGRWYWx1ZSkgewogICAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkgewogICAgICAgICAgICAgIC8vcHJpbWl0aXZlCiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0gbmV3VmFsdWU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2UobmV3VmFsdWUpKSB7CiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0gbmV3IEFycmF5KG5ld1ZhbHVlLmxlbmd0aCk7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdWYWx1ZS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2ldID0gbmV3VmFsdWVbaV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiBvYmplY3QKICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSB7fTsKICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbmV3VmFsdWUpIHsKICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG5ld1ZhbHVlLCBrZXkpKSB7CiAgICAgICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZVtrZXldID0gbmV3VmFsdWVba2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLiR3YXRjaChjaGFuZ2VEZXRlY3RvciwgJHdhdGNoQ29sbGVjdGlvbkFjdGlvbik7CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFByb2Nlc3NlcyBhbGwgb2YgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyc30gb2YgdGhlIGN1cnJlbnQgc2NvcGUgYW5kCiAgICAgICAqIGl0cyBjaGlsZHJlbi4gQmVjYXVzZSBhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyfSdzIGxpc3RlbmVyIGNhbiBjaGFuZ2UKICAgICAgICogdGhlIG1vZGVsLCB0aGUgYCRkaWdlc3QoKWAga2VlcHMgY2FsbGluZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJzfQogICAgICAgKiB1bnRpbCBubyBtb3JlIGxpc3RlbmVycyBhcmUgZmlyaW5nLiBUaGlzIG1lYW5zIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gZ2V0IGludG8gYW4gaW5maW5pdGUKICAgICAgICogbG9vcC4gVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGAnTWF4aW11bSBpdGVyYXRpb24gbGltaXQgZXhjZWVkZWQuJ2AgaWYgdGhlIG51bWJlciBvZgogICAgICAgKiBpdGVyYXRpb25zIGV4Y2VlZHMgMTAuCiAgICAgICAqCiAgICAgICAqIFVzdWFsbHksIHlvdSBkb24ndCBjYWxsIGAkZGlnZXN0KClgIGRpcmVjdGx5IGluCiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDb250cm9sbGVyIGNvbnRyb2xsZXJzfSBvciBpbgogICAgICAgKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30uCiAgICAgICAqIEluc3RlYWQsIHlvdSBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5KCl9ICh0eXBpY2FsbHkgZnJvbSB3aXRoaW4KICAgICAgICogYSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlfSksIHdoaWNoIHdpbGwgZm9yY2UgYSBgJGRpZ2VzdCgpYC4KICAgICAgICoKICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIgYCRkaWdlc3QoKWAgaXMgY2FsbGVkLAogICAgICAgKiB5b3UgY2FuIHJlZ2lzdGVyIGEgYHdhdGNoRXhwcmVzc2lvbmAgZnVuY3Rpb24gd2l0aAogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggJHdhdGNoKCl9IHdpdGggbm8gYGxpc3RlbmVyYC4KICAgICAgICoKICAgICAgICogSW4gdW5pdCB0ZXN0cywgeW91IG1heSBuZWVkIHRvIGNhbGwgYCRkaWdlc3QoKWAgdG8gc2ltdWxhdGUgdGhlIHNjb3BlIGxpZmUgY3ljbGUuCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiBgYGBqcwogICAgICAgICAgIHZhciBzY29wZSA9IC4uLjsKICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJzsKICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDsKCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICBzY29wZS5jb3VudGVyID0gc2NvcGUuY291bnRlciArIDE7CiAgICAgICAgICAgfSk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CgogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIgaXMgYWx3YXlzIGNhbGxlZCBkdXJpbmcgdGhlIGZpcnN0ICRkaWdlc3QgbG9vcCBhZnRlciBpdCB3YXMgcmVnaXN0ZXJlZAogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpOwoKICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAgLy8gYnV0IG5vdyBpdCB3aWxsIG5vdCBiZSBjYWxsZWQgdW5sZXNzIHRoZSB2YWx1ZSBjaGFuZ2VzCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7CgogICAgICAgICAgIHNjb3BlLm5hbWUgPSAnYWRhbSc7CiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDIpOwogICAgICAgKiBgYGAKICAgICAgICoKICAgICAgICovCiAgICAgICRkaWdlc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciB3YXRjaCwgdmFsdWUsIGxhc3QsCiAgICAgICAgICAgIHdhdGNoZXJzLAogICAgICAgICAgICBhc3luY1F1ZXVlID0gdGhpcy4kJGFzeW5jUXVldWUsCiAgICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZSA9IHRoaXMuJCRwb3N0RGlnZXN0UXVldWUsCiAgICAgICAgICAgIGxlbmd0aCwKICAgICAgICAgICAgZGlydHksIHR0bCA9IFRUTCwKICAgICAgICAgICAgbmV4dCwgY3VycmVudCwgdGFyZ2V0ID0gdGhpcywKICAgICAgICAgICAgd2F0Y2hMb2cgPSBbXSwKICAgICAgICAgICAgbG9nSWR4LCBsb2dNc2csIGFzeW5jVGFzazsKCiAgICAgICAgYmVnaW5QaGFzZSgnJGRpZ2VzdCcpOwoKICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7CgogICAgICAgIGRvIHsgLy8gIndoaWxlIGRpcnR5IiBsb29wCiAgICAgICAgICBkaXJ0eSA9IGZhbHNlOwogICAgICAgICAgY3VycmVudCA9IHRhcmdldDsKCiAgICAgICAgICB3aGlsZShhc3luY1F1ZXVlLmxlbmd0aCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGFzeW5jVGFzayA9IGFzeW5jUXVldWUuc2hpZnQoKTsKICAgICAgICAgICAgICBhc3luY1Rhc2suc2NvcGUuJGV2YWwoYXN5bmNUYXNrLmV4cHJlc3Npb24pOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIHRyYXZlcnNlU2NvcGVzTG9vcDoKICAgICAgICAgIGRvIHsgLy8gInRyYXZlcnNlIHRoZSBzY29wZXMiIGxvb3AKICAgICAgICAgICAgaWYgKCh3YXRjaGVycyA9IGN1cnJlbnQuJCR3YXRjaGVycykpIHsKICAgICAgICAgICAgICAvLyBwcm9jZXNzIG91ciB3YXRjaGVzCiAgICAgICAgICAgICAgbGVuZ3RoID0gd2F0Y2hlcnMubGVuZ3RoOwogICAgICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgd2F0Y2ggPSB3YXRjaGVyc1tsZW5ndGhdOwogICAgICAgICAgICAgICAgICAvLyBNb3N0IGNvbW1vbiB3YXRjaGVzIGFyZSBvbiBwcmltaXRpdmVzLCBpbiB3aGljaCBjYXNlIHdlIGNhbiBzaG9ydAogICAgICAgICAgICAgICAgICAvLyBjaXJjdWl0IGl0IHdpdGggPT09IG9wZXJhdG9yLCBvbmx5IHdoZW4gPT09IGZhaWxzIGRvIHdlIHVzZSAuZXF1YWxzCiAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCkgewogICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgPSB3YXRjaC5nZXQoY3VycmVudCkpICE9PSAobGFzdCA9IHdhdGNoLmxhc3QpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICEod2F0Y2guZXEKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZXF1YWxzKHZhbHVlLCBsYXN0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgbGFzdCA9PT0gJ251bWJlcicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGlzTmFOKHZhbHVlKSAmJiBpc05hTihsYXN0KSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IHdhdGNoOwogICAgICAgICAgICAgICAgICAgICAgd2F0Y2gubGFzdCA9IHdhdGNoLmVxID8gY29weSh2YWx1ZSwgbnVsbCkgOiB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmZuKHZhbHVlLCAoKGxhc3QgPT09IGluaXRXYXRjaFZhbCkgPyB2YWx1ZSA6IGxhc3QpLCBjdXJyZW50KTsKICAgICAgICAgICAgICAgICAgICAgIGlmICh0dGwgPCA1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ0lkeCA9IDQgLSB0dGw7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2F0Y2hMb2dbbG9nSWR4XSkgd2F0Y2hMb2dbbG9nSWR4XSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBsb2dNc2cgPSAoaXNGdW5jdGlvbih3YXRjaC5leHApKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnZm46ICcgKyAod2F0Y2guZXhwLm5hbWUgfHwgd2F0Y2guZXhwLnRvU3RyaW5nKCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHdhdGNoLmV4cDsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nTXNnICs9ICc7IG5ld1ZhbDogJyArIHRvSnNvbih2YWx1ZSkgKyAnOyBvbGRWYWw6ICcgKyB0b0pzb24obGFzdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoTG9nW2xvZ0lkeF0ucHVzaChsb2dNc2cpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2F0Y2ggPT09IGxhc3REaXJ0eVdhdGNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbW9zdCByZWNlbnRseSBkaXJ0eSB3YXRjaGVyIGlzIG5vdyBjbGVhbiwgc2hvcnQgY2lyY3VpdCBzaW5jZSB0aGUgcmVtYWluaW5nIHdhdGNoZXJzCiAgICAgICAgICAgICAgICAgICAgICAvLyBoYXZlIGFscmVhZHkgYmVlbiB0ZXN0ZWQuCiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgdHJhdmVyc2VTY29wZXNMb29wOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbAogICAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IQogICAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRicm9hZGNhc3QKICAgICAgICAgICAgaWYgKCEobmV4dCA9IChjdXJyZW50LiQkY2hpbGRIZWFkIHx8CiAgICAgICAgICAgICAgICAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkgewogICAgICAgICAgICAgIHdoaWxlKGN1cnJlbnQgIT09IHRhcmdldCAmJiAhKG5leHQgPSBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSk7CgogICAgICAgICAgLy8gYGJyZWFrIHRyYXZlcnNlU2NvcGVzTG9vcDtgIHRha2VzIHVzIHRvIGhlcmUKCiAgICAgICAgICBpZigoZGlydHkgfHwgYXN5bmNRdWV1ZS5sZW5ndGgpICYmICEodHRsLS0pKSB7CiAgICAgICAgICAgIGNsZWFyUGhhc2UoKTsKICAgICAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5mZGlnJywKICAgICAgICAgICAgICAgICd7MH0gJGRpZ2VzdCgpIGl0ZXJhdGlvbnMgcmVhY2hlZC4gQWJvcnRpbmchXG4nICsKICAgICAgICAgICAgICAgICdXYXRjaGVycyBmaXJlZCBpbiB0aGUgbGFzdCA1IGl0ZXJhdGlvbnM6IHsxfScsCiAgICAgICAgICAgICAgICBUVEwsIHRvSnNvbih3YXRjaExvZykpOwogICAgICAgICAgfQoKICAgICAgICB9IHdoaWxlIChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCk7CgogICAgICAgIGNsZWFyUGhhc2UoKTsKCiAgICAgICAgd2hpbGUocG9zdERpZ2VzdFF1ZXVlLmxlbmd0aCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcG9zdERpZ2VzdFF1ZXVlLnNoaWZ0KCkoKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZXZlbnQKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveQogICAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiBzY29wZSBiZWluZyBkZXN0cm95ZWQKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIEJyb2FkY2FzdGVkIHdoZW4gYSBzY29wZSBhbmQgaXRzIGNoaWxkcmVuIGFyZSBiZWluZyBkZXN0cm95ZWQuCiAgICAgICAqCiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvCiAgICAgICAqIGNsZWFuIHVwIERPTSBiaW5kaW5ncyBiZWZvcmUgYW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS4KICAgICAgICovCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95CiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBSZW1vdmVzIHRoZSBjdXJyZW50IHNjb3BlIChhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbikgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBSZW1vdmFsIGltcGxpZXMKICAgICAgICogdGhhdCBjYWxscyB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gd2lsbCBubyBsb25nZXIKICAgICAgICogcHJvcGFnYXRlIHRvIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4uIFJlbW92YWwgYWxzbyBpbXBsaWVzIHRoYXQgdGhlIGN1cnJlbnQKICAgICAgICogc2NvcGUgaXMgZWxpZ2libGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi4KICAgICAgICoKICAgICAgICogVGhlIGAkZGVzdHJveSgpYCBpcyB1c3VhbGx5IHVzZWQgYnkgZGlyZWN0aXZlcyBzdWNoIGFzCiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IGZvciBtYW5hZ2luZyB0aGUKICAgICAgICogdW5yb2xsaW5nIG9mIHRoZSBsb29wLgogICAgICAgKgogICAgICAgKiBKdXN0IGJlZm9yZSBhIHNjb3BlIGlzIGRlc3Ryb3llZCwgYSBgJGRlc3Ryb3lgIGV2ZW50IGlzIGJyb2FkY2FzdGVkIG9uIHRoaXMgc2NvcGUuCiAgICAgICAqIEFwcGxpY2F0aW9uIGNvZGUgY2FuIHJlZ2lzdGVyIGEgYCRkZXN0cm95YCBldmVudCBoYW5kbGVyIHRoYXQgd2lsbCBnaXZlIGl0IGEgY2hhbmNlIHRvCiAgICAgICAqIHBlcmZvcm0gYW55IG5lY2Vzc2FyeSBjbGVhbnVwLgogICAgICAgKgogICAgICAgKiBOb3RlIHRoYXQsIGluIEFuZ3VsYXJKUywgdGhlcmUgaXMgYWxzbyBhIGAkZGVzdHJveWAgalF1ZXJ5IGV2ZW50LCB3aGljaCBjYW4gYmUgdXNlZCB0bwogICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uCiAgICAgICAqLwogICAgICAkZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gd2UgY2FuJ3QgZGVzdHJveSB0aGUgcm9vdCBzY29wZSBvciBhIHNjb3BlIHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWQKICAgICAgICBpZiAodGhpcy4kJGRlc3Ryb3llZCkgcmV0dXJuOwogICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7CgogICAgICAgIHRoaXMuJGJyb2FkY2FzdCgnJGRlc3Ryb3knKTsKICAgICAgICB0aGlzLiQkZGVzdHJveWVkID0gdHJ1ZTsKICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSkgcmV0dXJuOwoKICAgICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gdGhpcy4kJGxpc3RlbmVyQ291bnQpIHsKICAgICAgICAgIGRlY3JlbWVudExpc3RlbmVyQ291bnQodGhpcywgdGhpcy4kJGxpc3RlbmVyQ291bnRbZXZlbnROYW1lXSwgZXZlbnROYW1lKTsKICAgICAgICB9CgogICAgICAgIC8vIHNldmVyIGFsbCB0aGUgcmVmZXJlbmNlcyB0byBwYXJlbnQgc2NvcGVzIChhZnRlciB0aGlzIGNsZWFudXAsIHRoZSBjdXJyZW50IHNjb3BlIHNob3VsZAogICAgICAgIC8vIG5vdCBiZSByZXRhaW5lZCBieSBhbnkgb2Ygb3VyIHJlZmVyZW5jZXMgYW5kIHNob3VsZCBiZSBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uKQogICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZFRhaWwgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nOwogICAgICAgIGlmICh0aGlzLiQkcHJldlNpYmxpbmcpIHRoaXMuJCRwcmV2U2libGluZy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgIGlmICh0aGlzLiQkbmV4dFNpYmxpbmcpIHRoaXMuJCRuZXh0U2libGluZy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nOwoKCiAgICAgICAgLy8gQWxsIG9mIHRoZSBjb2RlIGJlbG93IGlzIGJvZ3VzIGNvZGUgdGhhdCB3b3JrcyBhcm91bmQgVjgncyBtZW1vcnkgbGVhayB2aWEgb3B0aW1pemVkIGNvZGUKICAgICAgICAvLyBhbmQgaW5saW5lIGNhY2hlcy4KICAgICAgICAvLwogICAgICAgIC8vIHNlZToKICAgICAgICAvLyAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDczI2MyNgogICAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNjc5NCNpc3N1ZWNvbW1lbnQtMzg2NDg5MDkKICAgICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzEzMTMjaXNzdWVjb21tZW50LTEwMzc4NDUxCgogICAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuJCRuZXh0U2libGluZyA9IHRoaXMuJCRwcmV2U2libGluZyA9IHRoaXMuJCRjaGlsZEhlYWQgPQogICAgICAgICAgICB0aGlzLiQkY2hpbGRUYWlsID0gdGhpcy4kcm9vdCA9IG51bGw7CgogICAgICAgIC8vIGRvbid0IHJlc2V0IHRoZXNlIHRvIG51bGwgaW4gY2FzZSBzb21lIGFzeW5jIHRhc2sgdHJpZXMgdG8gcmVnaXN0ZXIgYSBsaXN0ZW5lci93YXRjaC90YXNrCiAgICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9OwogICAgICAgIHRoaXMuJCR3YXRjaGVycyA9IHRoaXMuJCRhc3luY1F1ZXVlID0gdGhpcy4kJHBvc3REaWdlc3RRdWV1ZSA9IFtdOwoKICAgICAgICAvLyBwcmV2ZW50IE5QRXMgc2luY2UgdGhlc2UgbWV0aG9kcyBoYXZlIHJlZmVyZW5jZXMgdG8gcHJvcGVydGllcyB3ZSBudWxsZWQgb3V0CiAgICAgICAgdGhpcy4kZGVzdHJveSA9IHRoaXMuJGRpZ2VzdCA9IHRoaXMuJGFwcGx5ID0gbm9vcDsKICAgICAgICB0aGlzLiRvbiA9IHRoaXMuJHdhdGNoID0gdGhpcy4kd2F0Y2hHcm91cCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbm9vcDsgfTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGV2YWwKICAgICAgICogQGtpbmQgZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIEV4ZWN1dGVzIHRoZSBgZXhwcmVzc2lvbmAgb24gdGhlIGN1cnJlbnQgc2NvcGUgYW5kIHJldHVybnMgdGhlIHJlc3VsdC4gQW55IGV4Y2VwdGlvbnMgaW4KICAgICAgICogdGhlIGV4cHJlc3Npb24gYXJlIHByb3BhZ2F0ZWQgKHVuY2F1Z2h0KS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBldmFsdWF0aW5nIEFuZ3VsYXIKICAgICAgICogZXhwcmVzc2lvbnMuCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiBgYGBqcwogICAgICAgICAgIHZhciBzY29wZSA9IG5nLiRyb290U2NvcGUuU2NvcGUoKTsKICAgICAgICAgICBzY29wZS5hID0gMTsKICAgICAgICAgICBzY29wZS5iID0gMjsKCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLiRldmFsKCdhK2InKSkudG9FcXVhbCgzKTsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoZnVuY3Rpb24oc2NvcGUpeyByZXR1cm4gc2NvcGUuYSArIHNjb3BlLmI7IH0pKS50b0VxdWFsKDMpOwogICAgICAgKiBgYGAKICAgICAgICoKICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuCiAgICAgICAqCiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4gIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LgogICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLgogICAgICAgKgogICAgICAgKiBAcGFyYW0geyhvYmplY3QpPX0gbG9jYWxzIExvY2FsIHZhcmlhYmxlcyBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gc2NvcGUuCiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uCiAgICAgICAqLwogICAgICAkZXZhbDogZnVuY3Rpb24oZXhwciwgbG9jYWxzKSB7CiAgICAgICAgcmV0dXJuICRwYXJzZShleHByKSh0aGlzLCBsb2NhbHMpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jCiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuCiAgICAgICAqCiAgICAgICAqIFRoZSBgJGV2YWxBc3luY2AgbWFrZXMgbm8gZ3VhcmFudGVlcyBhcyB0byB3aGVuIHRoZSBgZXhwcmVzc2lvbmAgd2lsbCBiZSBleGVjdXRlZCwgb25seQogICAgICAgKiB0aGF0OgogICAgICAgKgogICAgICAgKiAgIC0gaXQgd2lsbCBleGVjdXRlIGFmdGVyIHRoZSBmdW5jdGlvbiB0aGF0IHNjaGVkdWxlZCB0aGUgZXZhbHVhdGlvbiAocHJlZmVyYWJseSBiZWZvcmUgRE9NCiAgICAgICAqICAgICByZW5kZXJpbmcpLgogICAgICAgKiAgIC0gYXQgbGVhc3Qgb25lIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCBjeWNsZX0gd2lsbCBiZSBwZXJmb3JtZWQgYWZ0ZXIKICAgICAgICogICAgIGBleHByZXNzaW9uYCBleGVjdXRpb24uCiAgICAgICAqCiAgICAgICAqIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZQogICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuCiAgICAgICAqCiAgICAgICAqIF9fTm90ZTpfXyBpZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgYCRkaWdlc3RgIGN5Y2xlLCBhIG5ldyBgJGRpZ2VzdGAgY3ljbGUKICAgICAgICogd2lsbCBiZSBzY2hlZHVsZWQuIEhvd2V2ZXIsIGl0IGlzIGVuY291cmFnZWQgdG8gYWx3YXlzIGNhbGwgY29kZSB0aGF0IGNoYW5nZXMgdGhlIG1vZGVsCiAgICAgICAqIGZyb20gd2l0aGluIGFuIGAkYXBwbHlgIGNhbGwuIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC4KICAgICAgICoKICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuCiAgICAgICAqCiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uCiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuCiAgICAgICAqCiAgICAgICAqLwogICAgICAkZXZhbEFzeW5jOiBmdW5jdGlvbihleHByKSB7CiAgICAgICAgLy8gaWYgd2UgYXJlIG91dHNpZGUgb2YgYW4gJGRpZ2VzdCBsb29wIGFuZCB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHdlIGFyZSBzY2hlZHVsaW5nIGFzeW5jCiAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2gKICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSAmJiAhJHJvb3RTY29wZS4kJGFzeW5jUXVldWUubGVuZ3RoKSB7CiAgICAgICAgICAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuJCRhc3luY1F1ZXVlLmxlbmd0aCkgewogICAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHRoaXMuJCRhc3luY1F1ZXVlLnB1c2goe3Njb3BlOiB0aGlzLCBleHByZXNzaW9uOiBleHByfSk7CiAgICAgIH0sCgogICAgICAkJHBvc3REaWdlc3QgOiBmdW5jdGlvbihmbikgewogICAgICAgIHRoaXMuJCRwb3N0RGlnZXN0UXVldWUucHVzaChmbik7CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRhcHBseQogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogYCRhcHBseSgpYCBpcyB1c2VkIHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiBhbmd1bGFyIGZyb20gb3V0c2lkZSBvZiB0aGUgYW5ndWxhcgogICAgICAgKiBmcmFtZXdvcmsuIChGb3IgZXhhbXBsZSBmcm9tIGJyb3dzZXIgRE9NIGV2ZW50cywgc2V0VGltZW91dCwgWEhSIG9yIHRoaXJkIHBhcnR5IGxpYnJhcmllcykuCiAgICAgICAqIEJlY2F1c2Ugd2UgYXJlIGNhbGxpbmcgaW50byB0aGUgYW5ndWxhciBmcmFtZXdvcmsgd2UgbmVlZCB0byBwZXJmb3JtIHByb3BlciBzY29wZSBsaWZlCiAgICAgICAqIGN5Y2xlIG9mIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciBleGNlcHRpb24gaGFuZGxpbmd9LAogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0IGV4ZWN1dGluZyB3YXRjaGVzfS4KICAgICAgICoKICAgICAgICogIyMgTGlmZSBjeWNsZQogICAgICAgKgogICAgICAgKiAjIFBzZXVkby1Db2RlIG9mIGAkYXBwbHkoKWAKICAgICAgICogYGBganMKICAgICAgICAgICBmdW5jdGlvbiAkYXBwbHkoZXhwcikgewogICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgcmV0dXJuICRldmFsKGV4cHIpOwogICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICRyb290LiRkaWdlc3QoKTsKICAgICAgICAgICAgIH0KICAgICAgICAgICB9CiAgICAgICAqIGBgYAogICAgICAgKgogICAgICAgKgogICAgICAgKiBTY29wZSdzIGAkYXBwbHkoKWAgbWV0aG9kIHRyYW5zaXRpb25zIHRocm91Z2ggdGhlIGZvbGxvd2luZyBzdGFnZXM6CiAgICAgICAqCiAgICAgICAqIDEuIFRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBleGVjdXRlZCB1c2luZyB0aGUKICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGV2YWwgJGV2YWwoKX0gbWV0aG9kLgogICAgICAgKiAyLiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGUKICAgICAgICogICAge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLgogICAgICAgKiAzLiBUaGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNofSBsaXN0ZW5lcnMgYXJlIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZQogICAgICAgKiAgICBleHByZXNzaW9uIHdhcyBleGVjdXRlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IG1ldGhvZC4KICAgICAgICoKICAgICAgICoKICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC4KICAgICAgICoKICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS4KICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLgogICAgICAgKgogICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uLgogICAgICAgKi8KICAgICAgJGFwcGx5OiBmdW5jdGlvbihleHByKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGJlZ2luUGhhc2UoJyRhcHBseScpOwogICAgICAgICAgcmV0dXJuIHRoaXMuJGV2YWwoZXhwcik7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIGNsZWFyUGhhc2UoKTsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgdGhyb3cgZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRvbgogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogTGlzdGVucyBvbiBldmVudHMgb2YgYSBnaXZlbiB0eXBlLiBTZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGVtaXQgJGVtaXR9IGZvcgogICAgICAgKiBkaXNjdXNzaW9uIG9mIGV2ZW50IGxpZmUgY3ljbGUuCiAgICAgICAqCiAgICAgICAqIFRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBmb3JtYXQgaXM6IGBmdW5jdGlvbihldmVudCwgYXJncy4uLilgLiBUaGUgYGV2ZW50YCBvYmplY3QKICAgICAgICogcGFzc2VkIGludG8gdGhlIGxpc3RlbmVyIGhhcyB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6CiAgICAgICAqCiAgICAgICAqICAgLSBgdGFyZ2V0U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgc2NvcGUgb24gd2hpY2ggdGhlIGV2ZW50IHdhcyBgJGVtaXRgLWVkIG9yCiAgICAgICAqICAgICBgJGJyb2FkY2FzdGAtZWQuCiAgICAgICAqICAgLSBgY3VycmVudFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIHRoYXQgaXMgY3VycmVudGx5IGhhbmRsaW5nIHRoZSBldmVudC4gT25jZSB0aGUKICAgICAgICogICAgIGV2ZW50IHByb3BhZ2F0ZXMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5LCB0aGlzIHByb3BlcnR5IGlzIHNldCB0byBudWxsLgogICAgICAgKiAgIC0gYG5hbWVgIC0gYHtzdHJpbmd9YDogbmFtZSBvZiB0aGUgZXZlbnQuCiAgICAgICAqICAgLSBgc3RvcFByb3BhZ2F0aW9uYCAtIGB7ZnVuY3Rpb249fWA6IGNhbGxpbmcgYHN0b3BQcm9wYWdhdGlvbmAgZnVuY3Rpb24gd2lsbCBjYW5jZWwKICAgICAgICogICAgIGZ1cnRoZXIgZXZlbnQgcHJvcGFnYXRpb24gKGF2YWlsYWJsZSBvbmx5IGZvciBldmVudHMgdGhhdCB3ZXJlIGAkZW1pdGAtZWQpLgogICAgICAgKiAgIC0gYHByZXZlbnREZWZhdWx0YCAtIGB7ZnVuY3Rpb259YDogY2FsbGluZyBgcHJldmVudERlZmF1bHRgIHNldHMgYGRlZmF1bHRQcmV2ZW50ZWRgIGZsYWcKICAgICAgICogICAgIHRvIHRydWUuCiAgICAgICAqICAgLSBgZGVmYXVsdFByZXZlbnRlZGAgLSBge2Jvb2xlYW59YDogdHJ1ZSBpZiBgcHJldmVudERlZmF1bHRgIHdhcyBjYWxsZWQuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gbGlzdGVuIG9uLgogICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50LCAuLi5hcmdzKX0gbGlzdGVuZXIgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBldmVudCBpcyBlbWl0dGVkLgogICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLgogICAgICAgKi8KICAgICAgJG9uOiBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikgewogICAgICAgIHZhciBuYW1lZExpc3RlbmVycyA9IHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV07CiAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVycykgewogICAgICAgICAgdGhpcy4kJGxpc3RlbmVyc1tuYW1lXSA9IG5hbWVkTGlzdGVuZXJzID0gW107CiAgICAgICAgfQogICAgICAgIG5hbWVkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpOwoKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXM7CiAgICAgICAgZG8gewogICAgICAgICAgaWYgKCFjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSkgewogICAgICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSA9IDA7CiAgICAgICAgICB9CiAgICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSsrOwogICAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gY3VycmVudC4kcGFyZW50KSk7CgogICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpbmRleE9mKG5hbWVkTGlzdGVuZXJzLCBsaXN0ZW5lcildID0gbnVsbDsKICAgICAgICAgIGRlY3JlbWVudExpc3RlbmVyQ291bnQoc2VsZiwgMSwgbmFtZSk7CiAgICAgICAgfTsKICAgICAgfSwKCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRlbWl0CiAgICAgICAqIEBraW5kIGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCB1cHdhcmRzIHRocm91Z2ggdGhlIHNjb3BlIGhpZXJhcmNoeSBub3RpZnlpbmcgdGhlCiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuCiAgICAgICAqCiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRlbWl0YCB3YXMgY2FsbGVkLiBBbGwKICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXQKICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCB0cmF2ZXJzZXMgdXB3YXJkcyB0b3dhcmQgdGhlIHJvb3Qgc2NvcGUgYW5kIGNhbGxzIGFsbAogICAgICAgKiByZWdpc3RlcmVkIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgd2lsbCBzdG9wIHByb3BhZ2F0aW5nIGlmIG9uZSBvZiB0aGUgbGlzdGVuZXJzCiAgICAgICAqIGNhbmNlbHMgaXQuCiAgICAgICAqCiAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZAogICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gZW1pdC4KICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIG9uZSBvciBtb3JlIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuCiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0IChzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSkuCiAgICAgICAqLwogICAgICAkZW1pdDogZnVuY3Rpb24obmFtZSwgYXJncykgewogICAgICAgIHZhciBlbXB0eSA9IFtdLAogICAgICAgICAgICBuYW1lZExpc3RlbmVycywKICAgICAgICAgICAgc2NvcGUgPSB0aGlzLAogICAgICAgICAgICBzdG9wUHJvcGFnYXRpb24gPSBmYWxzZSwKICAgICAgICAgICAgZXZlbnQgPSB7CiAgICAgICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgICAgICB0YXJnZXRTY29wZTogc2NvcGUsCiAgICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtzdG9wUHJvcGFnYXRpb24gPSB0cnVlO30sCiAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBmYWxzZQogICAgICAgICAgICB9LAogICAgICAgICAgICBsaXN0ZW5lckFyZ3MgPSBjb25jYXQoW2V2ZW50XSwgYXJndW1lbnRzLCAxKSwKICAgICAgICAgICAgaSwgbGVuZ3RoOwoKICAgICAgICBkbyB7CiAgICAgICAgICBuYW1lZExpc3RlbmVycyA9IHNjb3BlLiQkbGlzdGVuZXJzW25hbWVdIHx8IGVtcHR5OwogICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gc2NvcGU7CiAgICAgICAgICBmb3IgKGk9MCwgbGVuZ3RoPW5hbWVkTGlzdGVuZXJzLmxlbmd0aDsgaTxsZW5ndGg7IGkrKykgewoKICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheQogICAgICAgICAgICBpZiAoIW5hbWVkTGlzdGVuZXJzW2ldKSB7CiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMuc3BsaWNlKGksIDEpOwogICAgICAgICAgICAgIGktLTsKICAgICAgICAgICAgICBsZW5ndGgtLTsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIC8vYWxsb3cgYWxsIGxpc3RlbmVycyBhdHRhY2hlZCB0byB0aGUgY3VycmVudCBzY29wZSB0byBydW4KICAgICAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIC8vaWYgYW55IGxpc3RlbmVyIG9uIHRoZSBjdXJyZW50IHNjb3BlIHN0b3BzIHByb3BhZ2F0aW9uLCBwcmV2ZW50IGJ1YmJsaW5nCiAgICAgICAgICBpZiAoc3RvcFByb3BhZ2F0aW9uKSB7CiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IG51bGw7CiAgICAgICAgICAgIHJldHVybiBldmVudDsKICAgICAgICAgIH0KICAgICAgICAgIC8vdHJhdmVyc2UgdXB3YXJkcwogICAgICAgICAgc2NvcGUgPSBzY29wZS4kcGFyZW50OwogICAgICAgIH0gd2hpbGUgKHNjb3BlKTsKCiAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDsKCiAgICAgICAgcmV0dXJuIGV2ZW50OwogICAgICB9LAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGJyb2FkY2FzdAogICAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogRGlzcGF0Y2hlcyBhbiBldmVudCBgbmFtZWAgZG93bndhcmRzIHRvIGFsbCBjaGlsZCBzY29wZXMgKGFuZCB0aGVpciBjaGlsZHJlbikgbm90aWZ5aW5nIHRoZQogICAgICAgKiByZWdpc3RlcmVkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gbGlzdGVuZXJzLgogICAgICAgKgogICAgICAgKiBUaGUgZXZlbnQgbGlmZSBjeWNsZSBzdGFydHMgYXQgdGhlIHNjb3BlIG9uIHdoaWNoIGAkYnJvYWRjYXN0YCB3YXMgY2FsbGVkLiBBbGwKICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXQKICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCBwcm9wYWdhdGVzIHRvIGFsbCBkaXJlY3QgYW5kIGluZGlyZWN0IHNjb3BlcyBvZiB0aGUgY3VycmVudAogICAgICAgKiBzY29wZSBhbmQgY2FsbHMgYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCBjYW5ub3QgYmUgY2FuY2VsZWQuCiAgICAgICAqCiAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZAogICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gYnJvYWRjYXN0LgogICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgb25lIG9yIG1vcmUgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy4KICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QsIHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259CiAgICAgICAqLwogICAgICAkYnJvYWRjYXN0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7CiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMsCiAgICAgICAgICAgIGN1cnJlbnQgPSB0YXJnZXQsCiAgICAgICAgICAgIG5leHQgPSB0YXJnZXQsCiAgICAgICAgICAgIGV2ZW50ID0gewogICAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHRhcmdldCwKICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlCiAgICAgICAgICAgIH07CgogICAgICAgIGlmICghdGFyZ2V0LiQkbGlzdGVuZXJDb3VudFtuYW1lXSkgcmV0dXJuIGV2ZW50OwoKICAgICAgICB2YXIgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksCiAgICAgICAgICAgIGxpc3RlbmVycywgaSwgbGVuZ3RoOwoKICAgICAgICAvL2Rvd24gd2hpbGUgeW91IGNhbiwgdGhlbiB1cCBhbmQgbmV4dCBzaWJsaW5nIG9yIHVwIGFuZCBuZXh0IHNpYmxpbmcgdW50aWwgYmFjayBhdCByb290CiAgICAgICAgd2hpbGUgKChjdXJyZW50ID0gbmV4dCkpIHsKICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IGN1cnJlbnQ7CiAgICAgICAgICBsaXN0ZW5lcnMgPSBjdXJyZW50LiQkbGlzdGVuZXJzW25hbWVdIHx8IFtdOwogICAgICAgICAgZm9yIChpPTAsIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGk8bGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheQogICAgICAgICAgICBpZiAoIWxpc3RlbmVyc1tpXSkgewogICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgaS0tOwogICAgICAgICAgICAgIGxlbmd0aC0tOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpOwogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbAogICAgICAgICAgLy8geWVzLCB0aGlzIGNvZGUgaXMgYSBiaXQgY3JhenksIGJ1dCBpdCB3b3JrcyBhbmQgd2UgaGF2ZSB0ZXN0cyB0byBwcm92ZSBpdCEKICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGRpZ2VzdAogICAgICAgICAgLy8gKHRob3VnaCBpdCBkaWZmZXJzIGR1ZSB0byBoYXZpbmcgdGhlIGV4dHJhIGNoZWNrIGZvciAkJGxpc3RlbmVyQ291bnQpCiAgICAgICAgICBpZiAoIShuZXh0ID0gKChjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSAmJiBjdXJyZW50LiQkY2hpbGRIZWFkKSB8fAogICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7CiAgICAgICAgICAgIHdoaWxlKGN1cnJlbnQgIT09IHRhcmdldCAmJiAhKG5leHQgPSBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSB7CiAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDsKICAgICAgICByZXR1cm4gZXZlbnQ7CiAgICAgIH0KICAgIH07CgogICAgdmFyICRyb290U2NvcGUgPSBuZXcgU2NvcGUoKTsKCiAgICByZXR1cm4gJHJvb3RTY29wZTsKCgogICAgZnVuY3Rpb24gYmVnaW5QaGFzZShwaGFzZSkgewogICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7CiAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5wcm9nJywgJ3swfSBhbHJlYWR5IGluIHByb2dyZXNzJywgJHJvb3RTY29wZS4kJHBoYXNlKTsKICAgICAgfQoKICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gcGhhc2U7CiAgICB9CgogICAgZnVuY3Rpb24gY2xlYXJQaGFzZSgpIHsKICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gbnVsbDsKICAgIH0KCgogICAgZnVuY3Rpb24gZGVjcmVtZW50TGlzdGVuZXJDb3VudChjdXJyZW50LCBjb3VudCwgbmFtZSkgewogICAgICBkbyB7CiAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gLT0gY291bnQ7CgogICAgICAgIGlmIChjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSA9PT0gMCkgewogICAgICAgICAgZGVsZXRlIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdOwogICAgICAgIH0KICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTsKICAgIH0KCiAgICAvKioKICAgICAqIGZ1bmN0aW9uIHVzZWQgYXMgYW4gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMuCiAgICAgKiBiZWNhdXNlIGl0J3MgdW5pcXVlIHdlIGNhbiBlYXNpbHkgdGVsbCBpdCBhcGFydCBmcm9tIG90aGVyIHZhbHVlcwogICAgICovCiAgICBmdW5jdGlvbiBpbml0V2F0Y2hWYWwoKSB7fQogIH1dOwp9CgovKioKICogQGRlc2NyaXB0aW9uCiAqIFByaXZhdGUgc2VydmljZSB0byBzYW5pdGl6ZSB1cmlzIGZvciBsaW5rcyBhbmQgaW1hZ2VzLiBVc2VkIGJ5ICRjb21waWxlIGFuZCAkc2FuaXRpemUuCiAqLwpmdW5jdGlvbiAkJFNhbml0aXplVXJpUHJvdmlkZXIoKSB7CiAgdmFyIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gL15ccyooaHR0cHM/fGZ0cHxtYWlsdG98dGVsfGZpbGUpOi8sCiAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSAvXlxzKigoaHR0cHM/fGZ0cHxmaWxlfGJsb2IpOnxkYXRhOmltYWdlXC8pLzsKCiAgLyoqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZQogICAqIHVybHMgZHVyaW5nIGFbaHJlZl0gc2FuaXRpemF0aW9uLgogICAqCiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy4KICAgKgogICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gYVtocmVmXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvCiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YAogICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLAogICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS4KICAgKgogICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC4KICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yCiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLgogICAqLwogIHRoaXMuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHsKICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkgewogICAgICBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IHJlZ2V4cDsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICByZXR1cm4gYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7CiAgfTsKCgogIC8qKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmUKICAgKiB1cmxzIGR1cmluZyBpbWdbc3JjXSBzYW5pdGl6YXRpb24uCiAgICoKICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50IFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLgogICAqCiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvCiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdGAKICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSwKICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uCiAgICoKICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguCiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvcgogICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS4KICAgKi8KICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkgewogICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7CiAgICAgIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IHJlZ2V4cDsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgICByZXR1cm4gaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0OwogIH07CgogIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIHNhbml0aXplVXJpKHVyaSwgaXNJbWFnZSkgewogICAgICB2YXIgcmVnZXggPSBpc0ltYWdlID8gaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0IDogYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7CiAgICAgIHZhciBub3JtYWxpemVkVmFsOwogICAgICAvLyBOT1RFOiB1cmxSZXNvbHZlKCkgZG9lc24ndCBzdXBwb3J0IElFIDwgOCBzbyB3ZSBkb24ndCBzYW5pdGl6ZSBmb3IgdGhhdCBjYXNlLgogICAgICBpZiAoIW1zaWUgfHwgbXNpZSA+PSA4ICkgewogICAgICAgIG5vcm1hbGl6ZWRWYWwgPSB1cmxSZXNvbHZlKHVyaSkuaHJlZjsKICAgICAgICBpZiAobm9ybWFsaXplZFZhbCAhPT0gJycgJiYgIW5vcm1hbGl6ZWRWYWwubWF0Y2gocmVnZXgpKSB7CiAgICAgICAgICByZXR1cm4gJ3Vuc2FmZTonK25vcm1hbGl6ZWRWYWw7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB1cmk7CiAgICB9OwogIH07Cn0KCnZhciAkc2NlTWluRXJyID0gbWluRXJyKCckc2NlJyk7Cgp2YXIgU0NFX0NPTlRFWFRTID0gewogIEhUTUw6ICdodG1sJywKICBDU1M6ICdjc3MnLAogIFVSTDogJ3VybCcsCiAgLy8gUkVTT1VSQ0VfVVJMIGlzIGEgc3VidHlwZSBvZiBVUkwgdXNlZCBpbiBjb250ZXh0cyB3aGVyZSBhIHByaXZpbGVnZWQgcmVzb3VyY2UgaXMgc291cmNlZCBmcm9tIGEKICAvLyB1cmwuICAoZS5nLiBuZy1pbmNsdWRlLCBzY3JpcHQgc3JjLCB0ZW1wbGF0ZVVybCkKICBSRVNPVVJDRV9VUkw6ICdyZXNvdXJjZVVybCcsCiAgSlM6ICdqcycKfTsKCi8vIEhlbHBlciBmdW5jdGlvbnMgZm9sbG93LgoKLy8gQ29waWVkIGZyb206Ci8vIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX3N0cmluZ19zdHJpbmcuanMuc291cmNlLmh0bWwjbGluZTk2MgovLyBQcmVyZXE6IHMgaXMgYSBzdHJpbmcuCmZ1bmN0aW9uIGVzY2FwZUZvclJlZ2V4cChzKSB7CiAgcmV0dXJuIHMucmVwbGFjZSgvKFstKClcW1xde30rPyouJFxefCw6IzwhXFxdKS9nLCAnXFwkMScpLgogICAgICAgICAgIHJlcGxhY2UoL1x4MDgvZywgJ1xceDA4Jyk7Cn0KCgpmdW5jdGlvbiBhZGp1c3RNYXRjaGVyKG1hdGNoZXIpIHsKICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7CiAgICByZXR1cm4gbWF0Y2hlcjsKICB9IGVsc2UgaWYgKGlzU3RyaW5nKG1hdGNoZXIpKSB7CiAgICAvLyBTdHJpbmdzIG1hdGNoIGV4YWN0bHkgZXhjZXB0IGZvciAyIHdpbGRjYXJkcyAtICcqJyBhbmQgJyoqJy4KICAgIC8vICcqJyBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgZXhjZXB0IHRob3NlIGZyb20gdGhlIHNldCAnOi8uPyYnLgogICAgLy8gJyoqJyBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgKGxpa2UgLiogaW4gYSBSZWdFeHApLgogICAgLy8gTW9yZSB0aGFuIDIgKidzIHJhaXNlcyBhbiBlcnJvciBhcyBpdCdzIGlsbCBkZWZpbmVkLgogICAgaWYgKG1hdGNoZXIuaW5kZXhPZignKioqJykgPiAtMSkgewogICAgICB0aHJvdyAkc2NlTWluRXJyKCdpd2NhcmQnLAogICAgICAgICAgJ0lsbGVnYWwgc2VxdWVuY2UgKioqIGluIHN0cmluZyBtYXRjaGVyLiAgU3RyaW5nOiB7MH0nLCBtYXRjaGVyKTsKICAgIH0KICAgIG1hdGNoZXIgPSBlc2NhcGVGb3JSZWdleHAobWF0Y2hlcikuCiAgICAgICAgICAgICAgICAgIHJlcGxhY2UoJ1xcKlxcKicsICcuKicpLgogICAgICAgICAgICAgICAgICByZXBsYWNlKCdcXConLCAnW146Ly4/JjtdKicpOwogICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgbWF0Y2hlciArICckJyk7CiAgfSBlbHNlIGlmIChpc1JlZ0V4cChtYXRjaGVyKSkgewogICAgLy8gVGhlIG9ubHkgb3RoZXIgdHlwZSBvZiBtYXRjaGVyIGFsbG93ZWQgaXMgYSBSZWdleHAuCiAgICAvLyBNYXRjaCBlbnRpcmUgVVJMIC8gZGlzYWxsb3cgcGFydGlhbCBtYXRjaGVzLgogICAgLy8gRmxhZ3MgYXJlIHJlc2V0IChpLmUuIG5vIGdsb2JhbCwgaWdub3JlQ2FzZSBvciBtdWx0aWxpbmUpCiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyLnNvdXJjZSArICckJyk7CiAgfSBlbHNlIHsKICAgIHRocm93ICRzY2VNaW5FcnIoJ2ltYXRjaGVyJywKICAgICAgICAnTWF0Y2hlcnMgbWF5IG9ubHkgYmUgInNlbGYiLCBzdHJpbmcgcGF0dGVybnMgb3IgUmVnRXhwIG9iamVjdHMnKTsKICB9Cn0KCgpmdW5jdGlvbiBhZGp1c3RNYXRjaGVycyhtYXRjaGVycykgewogIHZhciBhZGp1c3RlZE1hdGNoZXJzID0gW107CiAgaWYgKGlzRGVmaW5lZChtYXRjaGVycykpIHsKICAgIGZvckVhY2gobWF0Y2hlcnMsIGZ1bmN0aW9uKG1hdGNoZXIpIHsKICAgICAgYWRqdXN0ZWRNYXRjaGVycy5wdXNoKGFkanVzdE1hdGNoZXIobWF0Y2hlcikpOwogICAgfSk7CiAgfQogIHJldHVybiBhZGp1c3RlZE1hdGNoZXJzOwp9CgoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRzY2VEZWxlZ2F0ZQogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICoKICogYCRzY2VEZWxlZ2F0ZWAgaXMgYSBzZXJ2aWNlIHRoYXQgaXMgdXNlZCBieSB0aGUgYCRzY2VgIHNlcnZpY2UgdG8gcHJvdmlkZSB7QGxpbmsgbmcuJHNjZSBTdHJpY3QKICogQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0gc2VydmljZXMgdG8gQW5ndWxhckpTLgogKgogKiBUeXBpY2FsbHksIHlvdSB3b3VsZCBjb25maWd1cmUgb3Igb3ZlcnJpZGUgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGUgJHNjZURlbGVnYXRlfSBpbnN0ZWFkIG9mCiAqIHRoZSBgJHNjZWAgc2VydmljZSB0byBjdXN0b21pemUgdGhlIHdheSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyB3b3JrcyBpbiBBbmd1bGFySlMuICBUaGlzIGlzCiAqIGJlY2F1c2UsIHdoaWxlIHRoZSBgJHNjZWAgcHJvdmlkZXMgbnVtZXJvdXMgc2hvcnRoYW5kIG1ldGhvZHMsIGV0Yy4sIHlvdSByZWFsbHkgb25seSBuZWVkIHRvCiAqIG92ZXJyaWRlIDMgY29yZSBmdW5jdGlvbnMgKGB0cnVzdEFzYCwgYGdldFRydXN0ZWRgIGFuZCBgdmFsdWVPZmApIHRvIHJlcGxhY2UgdGhlIHdheSB0aGluZ3MKICogd29yayBiZWNhdXNlIGAkc2NlYCBkZWxlZ2F0ZXMgdG8gYCRzY2VEZWxlZ2F0ZWAgZm9yIHRoZXNlIG9wZXJhdGlvbnMuCiAqCiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gdG8gY29uZmlndXJlIHRoaXMgc2VydmljZS4KICoKICogVGhlIGRlZmF1bHQgaW5zdGFuY2Ugb2YgYCRzY2VEZWxlZ2F0ZWAgc2hvdWxkIHdvcmsgb3V0IG9mIHRoZSBib3ggd2l0aCBsaXR0bGUgcGFpbi4gIFdoaWxlIHlvdQogKiBjYW4gb3ZlcnJpZGUgaXQgY29tcGxldGVseSB0byBjaGFuZ2UgdGhlIGJlaGF2aW9yIG9mIGAkc2NlYCwgdGhlIGNvbW1vbiBjYXNlIHdvdWxkCiAqIGludm9sdmUgY29uZmlndXJpbmcgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gaW5zdGVhZCBieSBzZXR0aW5nCiAqIHlvdXIgb3duIHdoaXRlbGlzdHMgYW5kIGJsYWNrbGlzdHMgZm9yIHRydXN0aW5nIFVSTHMgdXNlZCBmb3IgbG9hZGluZyBBbmd1bGFySlMgcmVzb3VyY2VzIHN1Y2ggYXMKICogdGVtcGxhdGVzLiAgUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0CiAqICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmQge0BsaW5rCiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fQogKi8KCi8qKgogKiBAbmdkb2MgcHJvdmlkZXIKICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqCiAqIFRoZSBgJHNjZURlbGVnYXRlUHJvdmlkZXJgIHByb3ZpZGVyIGFsbG93cyBkZXZlbG9wZXJzIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZQogKiAkc2NlRGVsZWdhdGV9IHNlcnZpY2UuICBUaGlzIGFsbG93cyBvbmUgdG8gZ2V0L3NldCB0aGUgd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyB1c2VkIHRvIGVuc3VyZQogKiB0aGF0IHRoZSBVUkxzIHVzZWQgZm9yIHNvdXJjaW5nIEFuZ3VsYXIgdGVtcGxhdGVzIGFyZSBzYWZlLiAgUmVmZXIge0BsaW5rCiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmQKICoge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fQogKgogKiBGb3IgdGhlIGdlbmVyYWwgZGV0YWlscyBhYm91dCB0aGlzIHNlcnZpY2UgaW4gQW5ndWxhciwgcmVhZCB0aGUgbWFpbiBwYWdlIGZvciB7QGxpbmsgbmcuJHNjZQogKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uCiAqCiAqICoqRXhhbXBsZSoqOiAgQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBjYXNlLiA8YSBuYW1lPSJleGFtcGxlIj48L2E+CiAqCiAqIC0geW91ciBhcHAgaXMgaG9zdGVkIGF0IHVybCBgaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2AKICogLSBidXQgc29tZSBvZiB5b3VyIHRlbXBsYXRlcyBhcmUgaG9zdGVkIG9uIG90aGVyIGRvbWFpbnMgeW91IGNvbnRyb2wgc3VjaCBhcwogKiAgIGBodHRwOi8vc3J2MDEuYXNzZXRzLmV4YW1wbGUuY29tL2AsICBgaHR0cDovL3NydjAyLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBldGMuCiAqIC0gYW5kIHlvdSBoYXZlIGFuIG9wZW4gcmVkaXJlY3QgYXQgYGh0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnU/Li4uYC4KICoKICogSGVyZSBpcyB3aGF0IGEgc2VjdXJlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgc2NlbmFyaW8gbWlnaHQgbG9vayBsaWtlOgogKgogKiBgYGAKICogIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZURlbGVnYXRlUHJvdmlkZXIpIHsKICogICAgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3QoWwogKiAgICAgIC8vIEFsbG93IHNhbWUgb3JpZ2luIHJlc291cmNlIGxvYWRzLgogKiAgICAgICdzZWxmJywKICogICAgICAvLyBBbGxvdyBsb2FkaW5nIGZyb20gb3VyIGFzc2V0cyBkb21haW4uICBOb3RpY2UgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiAqIGFuZCAqKi4KICogICAgICAnaHR0cDovL3NydiouYXNzZXRzLmV4YW1wbGUuY29tLyoqJwogKiAgICBdKTsKICoKICogICAgLy8gVGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCBzbyB0aGUgb3BlbiByZWRpcmVjdCBoZXJlIGlzIGJsb2NrZWQuCiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0KFsKICogICAgICAnaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2NsaWNrVGhydSoqJwogKiAgICBdKTsKICogIH0pOwogKiBgYGAKICovCgpmdW5jdGlvbiAkU2NlRGVsZWdhdGVQcm92aWRlcigpIHsKICB0aGlzLlNDRV9DT05URVhUUyA9IFNDRV9DT05URVhUUzsKCiAgLy8gUmVzb3VyY2UgVVJMcyBjYW4gYWxzbyBiZSB0cnVzdGVkIGJ5IHBvbGljeS4KICB2YXIgcmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBbJ3NlbGYnXSwKICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBbXTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0CiAgICogQGtpbmQgZnVuY3Rpb24KICAgKgogICAqIEBwYXJhbSB7QXJyYXk9fSB3aGl0ZWxpc3QgV2hlbiBwcm92aWRlZCwgcmVwbGFjZXMgdGhlIHJlc291cmNlVXJsV2hpdGVsaXN0IHdpdGggdGhlIHZhbHVlCiAgICogICAgIHByb3ZpZGVkLiAgVGhpcyBtdXN0IGJlIGFuIGFycmF5IG9yIG51bGwuICBBIHNuYXBzaG90IG9mIHRoaXMgYXJyYXkgaXMgdXNlZCBzbyBmdXJ0aGVyCiAgICogICAgIGNoYW5nZXMgdG8gdGhlIGFycmF5IGFyZSBpZ25vcmVkLgogICAqCiAgICogICAgIEZvbGxvdyB7QGxpbmsgbmcuJHNjZSNyZXNvdXJjZVVybFBhdHRlcm5JdGVtIHRoaXMgbGlua30gZm9yIGEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW1zCiAgICogICAgIGFsbG93ZWQgaW4gdGhpcyBhcnJheS4KICAgKgogICAqICAgICBOb3RlOiAqKmFuIGVtcHR5IHdoaXRlbGlzdCBhcnJheSB3aWxsIGJsb2NrIGFsbCBVUkxzKiohCiAgICoKICAgKiBAcmV0dXJuIHtBcnJheX0gdGhlIGN1cnJlbnRseSBzZXQgd2hpdGVsaXN0IGFycmF5LgogICAqCiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIGBbJ3NlbGYnXWAgYWxsb3dpbmcgb25seQogICAqIHNhbWUgb3JpZ2luIHJlc291cmNlIHJlcXVlc3RzLgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cy9HZXRzIHRoZSB3aGl0ZWxpc3Qgb2YgdHJ1c3RlZCByZXNvdXJjZSBVUkxzLgogICAqLwogIHRoaXMucmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gYWRqdXN0TWF0Y2hlcnModmFsdWUpOwogICAgfQogICAgcmV0dXJuIHJlc291cmNlVXJsV2hpdGVsaXN0OwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdAogICAqIEBraW5kIGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge0FycmF5PX0gYmxhY2tsaXN0IFdoZW4gcHJvdmlkZWQsIHJlcGxhY2VzIHRoZSByZXNvdXJjZVVybEJsYWNrbGlzdCB3aXRoIHRoZSB2YWx1ZQogICAqICAgICBwcm92aWRlZC4gIFRoaXMgbXVzdCBiZSBhbiBhcnJheSBvciBudWxsLiAgQSBzbmFwc2hvdCBvZiB0aGlzIGFycmF5IGlzIHVzZWQgc28gZnVydGhlcgogICAqICAgICBjaGFuZ2VzIHRvIHRoZSBhcnJheSBhcmUgaWdub3JlZC4KICAgKgogICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtcwogICAqICAgICBhbGxvd2VkIGluIHRoaXMgYXJyYXkuCiAgICoKICAgKiAgICAgVGhlIHR5cGljYWwgdXNhZ2UgZm9yIHRoZSBibGFja2xpc3QgaXMgdG8gKipibG9jawogICAqICAgICBbb3BlbiByZWRpcmVjdHNdKGh0dHA6Ly9jd2UubWl0cmUub3JnL2RhdGEvZGVmaW5pdGlvbnMvNjAxLmh0bWwpKiogc2VydmVkIGJ5IHlvdXIgZG9tYWluIGFzCiAgICogICAgIHRoZXNlIHdvdWxkIG90aGVyd2lzZSBiZSB0cnVzdGVkIGJ1dCBhY3R1YWxseSByZXR1cm4gY29udGVudCBmcm9tIHRoZSByZWRpcmVjdGVkIGRvbWFpbi4KICAgKgogICAqICAgICBGaW5hbGx5LCAqKnRoZSBibGFja2xpc3Qgb3ZlcnJpZGVzIHRoZSB3aGl0ZWxpc3QqKiBhbmQgaGFzIHRoZSBmaW5hbCBzYXkuCiAgICoKICAgKiBAcmV0dXJuIHtBcnJheX0gdGhlIGN1cnJlbnRseSBzZXQgYmxhY2tsaXN0IGFycmF5LgogICAqCiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIHRoZSBlbXB0eSBhcnJheSAoaS5lLiB0aGVyZQogICAqIGlzIG5vIGJsYWNrbGlzdC4pCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBTZXRzL0dldHMgdGhlIGJsYWNrbGlzdCBvZiB0cnVzdGVkIHJlc291cmNlIFVSTHMuCiAgICovCgogIHRoaXMucmVzb3VyY2VVcmxCbGFja2xpc3QgPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgIHJlc291cmNlVXJsQmxhY2tsaXN0ID0gYWRqdXN0TWF0Y2hlcnModmFsdWUpOwogICAgfQogICAgcmV0dXJuIHJlc291cmNlVXJsQmxhY2tsaXN0OwogIH07CgogIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7CgogICAgdmFyIGh0bWxTYW5pdGl6ZXIgPSBmdW5jdGlvbiBodG1sU2FuaXRpemVyKGh0bWwpIHsKICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTsKICAgIH07CgogICAgaWYgKCRpbmplY3Rvci5oYXMoJyRzYW5pdGl6ZScpKSB7CiAgICAgIGh0bWxTYW5pdGl6ZXIgPSAkaW5qZWN0b3IuZ2V0KCckc2FuaXRpemUnKTsKICAgIH0KCgogICAgZnVuY3Rpb24gbWF0Y2hVcmwobWF0Y2hlciwgcGFyc2VkVXJsKSB7CiAgICAgIGlmIChtYXRjaGVyID09PSAnc2VsZicpIHsKICAgICAgICByZXR1cm4gdXJsSXNTYW1lT3JpZ2luKHBhcnNlZFVybCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gZGVmaW5pdGVseSBhIHJlZ2V4LiAgU2VlIGFkanVzdE1hdGNoZXJzKCkKICAgICAgICByZXR1cm4gISFtYXRjaGVyLmV4ZWMocGFyc2VkVXJsLmhyZWYpOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeSh1cmwpIHsKICAgICAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUodXJsLnRvU3RyaW5nKCkpOwogICAgICB2YXIgaSwgbiwgYWxsb3dlZCA9IGZhbHNlOwogICAgICAvLyBFbnN1cmUgdGhhdCBhdCBsZWFzdCBvbmUgaXRlbSBmcm9tIHRoZSB3aGl0ZWxpc3QgYWxsb3dzIHRoaXMgdXJsLgogICAgICBmb3IgKGkgPSAwLCBuID0gcmVzb3VyY2VVcmxXaGl0ZWxpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7CiAgICAgICAgaWYgKG1hdGNoVXJsKHJlc291cmNlVXJsV2hpdGVsaXN0W2ldLCBwYXJzZWRVcmwpKSB7CiAgICAgICAgICBhbGxvd2VkID0gdHJ1ZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoYWxsb3dlZCkgewogICAgICAgIC8vIEVuc3VyZSB0aGF0IG5vIGl0ZW0gZnJvbSB0aGUgYmxhY2tsaXN0IGJsb2NrZWQgdGhpcyB1cmwuCiAgICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsQmxhY2tsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykgewogICAgICAgICAgaWYgKG1hdGNoVXJsKHJlc291cmNlVXJsQmxhY2tsaXN0W2ldLCBwYXJzZWRVcmwpKSB7CiAgICAgICAgICAgIGFsbG93ZWQgPSBmYWxzZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBhbGxvd2VkOwogICAgfQoKICAgIGZ1bmN0aW9uIGdlbmVyYXRlSG9sZGVyVHlwZShCYXNlKSB7CiAgICAgIHZhciBob2xkZXJUeXBlID0gZnVuY3Rpb24gVHJ1c3RlZFZhbHVlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWUpIHsKICAgICAgICB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlOwogICAgICAgIH07CiAgICAgIH07CiAgICAgIGlmIChCYXNlKSB7CiAgICAgICAgaG9sZGVyVHlwZS5wcm90b3R5cGUgPSBuZXcgQmFzZSgpOwogICAgICB9CiAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiBzY2VWYWx1ZU9mKCkgewogICAgICAgIHJldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCk7CiAgICAgIH07CiAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gc2NlVG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKS50b1N0cmluZygpOwogICAgICB9OwogICAgICByZXR1cm4gaG9sZGVyVHlwZTsKICAgIH0KCiAgICB2YXIgdHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSA9IGdlbmVyYXRlSG9sZGVyVHlwZSgpLAogICAgICAgIGJ5VHlwZSA9IHt9OwoKICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuSFRNTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7CiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkNTU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7CiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlVSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7CiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkpTXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTsKICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuUkVTT1VSQ0VfVVJMXSA9IGdlbmVyYXRlSG9sZGVyVHlwZShieVR5cGVbU0NFX0NPTlRFWFRTLlVSTF0pOwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3RydXN0QXMKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgaXMgdHJ1c3RlZCBieSBhbmd1bGFyIGZvciB1c2UgaW4gc3BlY2lmaWVkIHN0cmljdAogICAgICogY29udGV4dHVhbCBlc2NhcGluZyBjb250ZXh0cyAoc3VjaCBhcyBuZy1iaW5kLWh0bWwsIG5nLWluY2x1ZGUsIGFueSBzcmMKICAgICAqIGF0dHJpYnV0ZSBpbnRlcnBvbGF0aW9uLCBhbnkgZG9tIGV2ZW50IGJpbmRpbmcgYXR0cmlidXRlIGludGVycG9sYXRpb24KICAgICAqIHN1Y2ggYXMgZm9yIG9uY2xpY2ssICBldGMuKSB0aGF0IHVzZXMgdGhlIHByb3ZpZGVkIHZhbHVlLgogICAgICogU2VlIHtAbGluayBuZy4kc2NlICRzY2V9IGZvciBlbmFibGluZyBzdHJpY3QgY29udGV4dHVhbCBlc2NhcGluZy4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgc2FmZSBmb3IgdXNlLiAgZS5nLiB1cmwsCiAgICAgKiAgIHJlc291cmNlVXJsLCBodG1sLCBqcyBhbmQgY3NzLgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIHRydXN0ZWQvc2FmZS4KICAgICAqIEByZXR1cm5zIHsqfSBBIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgdG8gc3RhbmQgaW4gZm9yIHRoZSBwcm92aWRlZCBgdmFsdWVgIGluIHBsYWNlcwogICAgICogd2hlcmUgQW5ndWxhciBleHBlY3RzIGEgJHNjZS50cnVzdEFzKCkgcmV0dXJuIHZhbHVlLgogICAgICovCiAgICBmdW5jdGlvbiB0cnVzdEFzKHR5cGUsIHRydXN0ZWRWYWx1ZSkgewogICAgICB2YXIgQ29uc3RydWN0b3IgPSAoYnlUeXBlLmhhc093blByb3BlcnR5KHR5cGUpID8gYnlUeXBlW3R5cGVdIDogbnVsbCk7CiAgICAgIGlmICghQ29uc3RydWN0b3IpIHsKICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpY29udGV4dCcsCiAgICAgICAgICAgICdBdHRlbXB0ZWQgdG8gdHJ1c3QgYSB2YWx1ZSBpbiBpbnZhbGlkIGNvbnRleHQuIENvbnRleHQ6IHswfTsgVmFsdWU6IHsxfScsCiAgICAgICAgICAgIHR5cGUsIHRydXN0ZWRWYWx1ZSk7CiAgICAgIH0KICAgICAgaWYgKHRydXN0ZWRWYWx1ZSA9PT0gbnVsbCB8fCB0cnVzdGVkVmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0cnVzdGVkVmFsdWUgPT09ICcnKSB7CiAgICAgICAgcmV0dXJuIHRydXN0ZWRWYWx1ZTsKICAgICAgfQogICAgICAvLyBBbGwgdGhlIGN1cnJlbnQgY29udGV4dHMgaW4gU0NFX0NPTlRFWFRTIGhhcHBlbiB0byBiZSBzdHJpbmdzLiAgSW4gb3JkZXIgdG8gYXZvaWQgdHJ1c3RpbmcKICAgICAgLy8gbXV0YWJsZSBvYmplY3RzLCB3ZSBlbnN1cmUgaGVyZSB0aGF0IHRoZSB2YWx1ZSBwYXNzZWQgaW4gaXMgYWN0dWFsbHkgYSBzdHJpbmcuCiAgICAgIGlmICh0eXBlb2YgdHJ1c3RlZFZhbHVlICE9PSAnc3RyaW5nJykgewogICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2l0eXBlJywKICAgICAgICAgICAgJ0F0dGVtcHRlZCB0byB0cnVzdCBhIG5vbi1zdHJpbmcgdmFsdWUgaW4gYSBjb250ZW50IHJlcXVpcmluZyBhIHN0cmluZzogQ29udGV4dDogezB9JywKICAgICAgICAgICAgdHlwZSk7CiAgICAgIH0KICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0cnVzdGVkVmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3ZhbHVlT2YKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGhhZCBiZWVuIHJldHVybmVkIGJ5IGEgcHJpb3IgY2FsbCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMKICAgICAqIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LCByZXR1cm5zIHRoZSB2YWx1ZSB0aGF0IGhhZCBiZWVuIHBhc3NlZCB0byB7QGxpbmsKICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LgogICAgICoKICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGlzIG5vdCBhIHZhbHVlIHRoYXQgaGFkIGJlZW4gcmV0dXJuZWQgYnkge0BsaW5rCiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgcmV0dXJucyBpdCBhcy1pcy4KICAgICAqCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0KICAgICAqICAgICAgY2FsbCBvciBhbnl0aGluZyBlbHNlLgogICAgICogQHJldHVybnMgeyp9IFRoZSBgdmFsdWVgIHRoYXQgd2FzIG9yaWdpbmFsbHkgcHJvdmlkZWQgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzCiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gaWYgYHZhbHVlYCBpcyB0aGUgcmVzdWx0IG9mIHN1Y2ggYSBjYWxsLiAgT3RoZXJ3aXNlLCByZXR1cm5zCiAgICAgKiAgICAgYHZhbHVlYCB1bmNoYW5nZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHZhbHVlT2YobWF5YmVUcnVzdGVkKSB7CiAgICAgIGlmIChtYXliZVRydXN0ZWQgaW5zdGFuY2VvZiB0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKSB7CiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBUYWtlcyB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwgYW5kCiAgICAgKiByZXR1cm5zIHRoZSBvcmlnaW5hbGx5IHN1cHBsaWVkIHZhbHVlIGlmIHRoZSBxdWVyaWVkIGNvbnRleHQgdHlwZSBpcyBhIHN1cGVydHlwZSBvZiB0aGUKICAgICAqIGNyZWF0ZWQgdHlwZS4gIElmIHRoaXMgY29uZGl0aW9uIGlzbid0IHNhdGlzZmllZCwgdGhyb3dzIGFuIGV4Y2VwdGlvbi4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgdG8gYmUgdXNlZC4KICAgICAqIEBwYXJhbSB7Kn0gbWF5YmVUcnVzdGVkIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMKICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBjYWxsLgogICAgICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGUgd2FzIG9yaWdpbmFsbHkgcHJvdmlkZWQgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzCiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gaWYgdmFsaWQgaW4gdGhpcyBjb250ZXh0LiAgT3RoZXJ3aXNlLCB0aHJvd3MgYW4gZXhjZXB0aW9uLgogICAgICovCiAgICBmdW5jdGlvbiBnZXRUcnVzdGVkKHR5cGUsIG1heWJlVHJ1c3RlZCkgewogICAgICBpZiAobWF5YmVUcnVzdGVkID09PSBudWxsIHx8IG1heWJlVHJ1c3RlZCA9PT0gdW5kZWZpbmVkIHx8IG1heWJlVHJ1c3RlZCA9PT0gJycpIHsKICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkOwogICAgICB9CiAgICAgIHZhciBjb25zdHJ1Y3RvciA9IChieVR5cGUuaGFzT3duUHJvcGVydHkodHlwZSkgPyBieVR5cGVbdHlwZV0gOiBudWxsKTsKICAgICAgaWYgKGNvbnN0cnVjdG9yICYmIG1heWJlVHJ1c3RlZCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7CiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpOwogICAgICB9CiAgICAgIC8vIElmIHdlIGdldCBoZXJlLCB0aGVuIHdlIG1heSBvbmx5IHRha2Ugb25lIG9mIHR3byBhY3Rpb25zLgogICAgICAvLyAxLiBzYW5pdGl6ZSB0aGUgdmFsdWUgZm9yIHRoZSByZXF1ZXN0ZWQgdHlwZSwgb3IKICAgICAgLy8gMi4gdGhyb3cgYW4gZXhjZXB0aW9uLgogICAgICBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTCkgewogICAgICAgIGlmIChpc1Jlc291cmNlVXJsQWxsb3dlZEJ5UG9saWN5KG1heWJlVHJ1c3RlZCkpIHsKICAgICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2luc2VjdXJsJywKICAgICAgICAgICAgICAnQmxvY2tlZCBsb2FkaW5nIHJlc291cmNlIGZyb20gdXJsIG5vdCBhbGxvd2VkIGJ5ICRzY2VEZWxlZ2F0ZSBwb2xpY3kuICBVUkw6IHswfScsCiAgICAgICAgICAgICAgbWF5YmVUcnVzdGVkLnRvU3RyaW5nKCkpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBTQ0VfQ09OVEVYVFMuSFRNTCkgewogICAgICAgIHJldHVybiBodG1sU2FuaXRpemVyKG1heWJlVHJ1c3RlZCk7CiAgICAgIH0KICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTsKICAgIH0KCiAgICByZXR1cm4geyB0cnVzdEFzOiB0cnVzdEFzLAogICAgICAgICAgICAgZ2V0VHJ1c3RlZDogZ2V0VHJ1c3RlZCwKICAgICAgICAgICAgIHZhbHVlT2Y6IHZhbHVlT2YgfTsKICB9XTsKfQoKCi8qKgogKiBAbmdkb2MgcHJvdmlkZXIKICogQG5hbWUgJHNjZVByb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKgogKiBUaGUgJHNjZVByb3ZpZGVyIHByb3ZpZGVyIGFsbG93cyBkZXZlbG9wZXJzIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIG5nLiRzY2UgJHNjZX0gc2VydmljZS4KICogLSAgIGVuYWJsZS9kaXNhYmxlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGluIGEgbW9kdWxlCiAqIC0gICBvdmVycmlkZSB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB3aXRoIGEgY3VzdG9tIGRlbGVnYXRlCiAqCiAqIFJlYWQgbW9yZSBhYm91dCB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uCiAqLwoKLyoganNoaW50IG1heGxlbjogZmFsc2UqLwoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRzY2UKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIGAkc2NlYCBpcyBhIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBzZXJ2aWNlcyB0byBBbmd1bGFySlMuCiAqCiAqICMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcKICoKICogU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSkgaXMgYSBtb2RlIGluIHdoaWNoIEFuZ3VsYXJKUyByZXF1aXJlcyBiaW5kaW5ncyBpbiBjZXJ0YWluCiAqIGNvbnRleHRzIHRvIHJlc3VsdCBpbiBhIHZhbHVlIHRoYXQgaXMgbWFya2VkIGFzIHNhZmUgdG8gdXNlIGZvciB0aGF0IGNvbnRleHQuICBPbmUgZXhhbXBsZSBvZgogKiBzdWNoIGEgY29udGV4dCBpcyBiaW5kaW5nIGFyYml0cmFyeSBodG1sIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIgdmlhIGBuZy1iaW5kLWh0bWxgLiAgV2UgcmVmZXIKICogdG8gdGhlc2UgY29udGV4dHMgYXMgcHJpdmlsZWdlZCBvciBTQ0UgY29udGV4dHMuCiAqCiAqIEFzIG9mIHZlcnNpb24gMS4yLCBBbmd1bGFyIHNoaXBzIHdpdGggU0NFIGVuYWJsZWQgYnkgZGVmYXVsdC4KICoKICogTm90ZTogIFdoZW4gZW5hYmxlZCAodGhlIGRlZmF1bHQpLCBJRTggaW4gcXVpcmtzIG1vZGUgaXMgbm90IHN1cHBvcnRlZC4gIEluIHRoaXMgbW9kZSwgSUU4IGFsbG93cwogKiBvbmUgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgamF2YXNjcmlwdCBieSB0aGUgdXNlIG9mIHRoZSBleHByZXNzaW9uKCkgc3ludGF4LiAgUmVmZXIKICogPGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llL2FyY2hpdmUvMjAwOC8xMC8xNi9lbmRpbmctZXhwcmVzc2lvbnMuYXNweD4gdG8gbGVhcm4gbW9yZSBhYm91dCB0aGVtLgogKiBZb3UgY2FuIGVuc3VyZSB5b3VyIGRvY3VtZW50IGlzIGluIHN0YW5kYXJkcyBtb2RlIGFuZCBub3QgcXVpcmtzIG1vZGUgYnkgYWRkaW5nIGA8IWRvY3R5cGUgaHRtbD5gCiAqIHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MIGRvY3VtZW50LgogKgogKiBTQ0UgYXNzaXN0cyBpbiB3cml0aW5nIGNvZGUgaW4gd2F5IHRoYXQgKGEpIGlzIHNlY3VyZSBieSBkZWZhdWx0IGFuZCAoYikgbWFrZXMgYXVkaXRpbmcgZm9yCiAqIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyBzdWNoIGFzIFhTUywgY2xpY2tqYWNraW5nLCBldGMuIGEgbG90IGVhc2llci4KICoKICogSGVyZSdzIGFuIGV4YW1wbGUgb2YgYSBiaW5kaW5nIGluIGEgcHJpdmlsZWdlZCBjb250ZXh0OgogKgogKiBgYGAKICogPGlucHV0IG5nLW1vZGVsPSJ1c2VySHRtbCI+CiAqIDxkaXYgbmctYmluZC1odG1sPSJ1c2VySHRtbCI+PC9kaXY+CiAqIGBgYAogKgogKiBOb3RpY2UgdGhhdCBgbmctYmluZC1odG1sYCBpcyBib3VuZCB0byBgdXNlckh0bWxgIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIuICBXaXRoIFNDRQogKiBkaXNhYmxlZCwgdGhpcyBhcHBsaWNhdGlvbiBhbGxvd3MgdGhlIHVzZXIgdG8gcmVuZGVyIGFyYml0cmFyeSBIVE1MIGludG8gdGhlIERJVi4KICogSW4gYSBtb3JlIHJlYWxpc3RpYyBleGFtcGxlLCBvbmUgbWF5IGJlIHJlbmRlcmluZyB1c2VyIGNvbW1lbnRzLCBibG9nIGFydGljbGVzLCBldGMuIHZpYQogKiBiaW5kaW5ncy4gIChIVE1MIGlzIGp1c3Qgb25lIGV4YW1wbGUgb2YgYSBjb250ZXh0IHdoZXJlIHJlbmRlcmluZyB1c2VyIGNvbnRyb2xsZWQgaW5wdXQgY3JlYXRlcwogKiBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuKQogKgogKiBGb3IgdGhlIGNhc2Ugb2YgSFRNTCwgeW91IG1pZ2h0IHVzZSBhIGxpYnJhcnksIGVpdGhlciBvbiB0aGUgY2xpZW50IHNpZGUsIG9yIG9uIHRoZSBzZXJ2ZXIgc2lkZSwKICogdG8gc2FuaXRpemUgdW5zYWZlIEhUTUwgYmVmb3JlIGJpbmRpbmcgdG8gdGhlIHZhbHVlIGFuZCByZW5kZXJpbmcgaXQgaW4gdGhlIGRvY3VtZW50LgogKgogKiBIb3cgd291bGQgeW91IGVuc3VyZSB0aGF0IGV2ZXJ5IHBsYWNlIHRoYXQgdXNlZCB0aGVzZSB0eXBlcyBvZiBiaW5kaW5ncyB3YXMgYm91bmQgdG8gYSB2YWx1ZSB0aGF0CiAqIHdhcyBzYW5pdGl6ZWQgYnkgeW91ciBsaWJyYXJ5IChvciByZXR1cm5lZCBhcyBzYWZlIGZvciByZW5kZXJpbmcgYnkgeW91ciBzZXJ2ZXI/KSAgSG93IGNhbiB5b3UKICogZW5zdXJlIHRoYXQgeW91IGRpZG4ndCBhY2NpZGVudGFsbHkgZGVsZXRlIHRoZSBsaW5lIHRoYXQgc2FuaXRpemVkIHRoZSB2YWx1ZSwgb3IgcmVuYW1lZCBzb21lCiAqIHByb3BlcnRpZXMvZmllbGRzIGFuZCBmb3Jnb3QgdG8gdXBkYXRlIHRoZSBiaW5kaW5nIHRvIHRoZSBzYW5pdGl6ZWQgdmFsdWU/CiAqCiAqIFRvIGJlIHNlY3VyZSBieSBkZWZhdWx0LCB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBhbnkgc3VjaCBiaW5kaW5ncyBhcmUgZGlzYWxsb3dlZCB1bmxlc3MgeW91IGNhbgogKiBkZXRlcm1pbmUgdGhhdCBzb21ldGhpbmcgZXhwbGljaXRseSBzYXlzIGl0J3Mgc2FmZSB0byB1c2UgYSB2YWx1ZSBmb3IgYmluZGluZyBpbiB0aGF0CiAqIGNvbnRleHQuICBZb3UgY2FuIHRoZW4gYXVkaXQgeW91ciBjb2RlIChhIHNpbXBsZSBncmVwIHdvdWxkIGRvKSB0byBlbnN1cmUgdGhhdCB0aGlzIGlzIG9ubHkgZG9uZQogKiBmb3IgdGhvc2UgdmFsdWVzIHRoYXQgeW91IGNhbiBlYXNpbHkgdGVsbCBhcmUgc2FmZSAtIGJlY2F1c2UgdGhleSB3ZXJlIHJlY2VpdmVkIGZyb20geW91ciBzZXJ2ZXIsCiAqIHNhbml0aXplZCBieSB5b3VyIGxpYnJhcnksIGV0Yy4gIFlvdSBjYW4gb3JnYW5pemUgeW91ciBjb2RlYmFzZSB0byBoZWxwIHdpdGggdGhpcyAtIHBlcmhhcHMKICogYWxsb3dpbmcgb25seSB0aGUgZmlsZXMgaW4gYSBzcGVjaWZpYyBkaXJlY3RvcnkgdG8gZG8gdGhpcy4gIEVuc3VyaW5nIHRoYXQgdGhlIGludGVybmFsIEFQSQogKiBleHBvc2VkIGJ5IHRoYXQgY29kZSBkb2Vzbid0IG1hcmt1cCBhcmJpdHJhcnkgdmFsdWVzIGFzIHNhZmUgdGhlbiBiZWNvbWVzIGEgbW9yZSBtYW5hZ2VhYmxlIHRhc2suCiAqCiAqIEluIHRoZSBjYXNlIG9mIEFuZ3VsYXJKUycgU0NFIHNlcnZpY2UsIG9uZSB1c2VzIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfQogKiAoYW5kIHNob3J0aGFuZCBtZXRob2RzIHN1Y2ggYXMge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0sIGV0Yy4pIHRvCiAqIG9idGFpbiB2YWx1ZXMgdGhhdCB3aWxsIGJlIGFjY2VwdGVkIGJ5IFNDRSAvIHByaXZpbGVnZWQgY29udGV4dHMuCiAqCiAqCiAqICMjIEhvdyBkb2VzIGl0IHdvcms/CiAqCiAqIEluIHByaXZpbGVnZWQgY29udGV4dHMsIGRpcmVjdGl2ZXMgYW5kIGNvZGUgd2lsbCBiaW5kIHRvIHRoZSByZXN1bHQgb2Yge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZAogKiAkc2NlLmdldFRydXN0ZWQoY29udGV4dCwgdmFsdWUpfSByYXRoZXIgdGhhbiB0byB0aGUgdmFsdWUgZGlyZWN0bHkuICBEaXJlY3RpdmVzIHVzZSB7QGxpbmsKICogbmcuJHNjZSNwYXJzZSAkc2NlLnBhcnNlQXN9IHJhdGhlciB0aGFuIGAkcGFyc2VgIHRvIHdhdGNoIGF0dHJpYnV0ZSBiaW5kaW5ncywgd2hpY2ggcGVyZm9ybXMgdGhlCiAqIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkfSBiZWhpbmQgdGhlIHNjZW5lcyBvbiBub24tY29uc3RhbnQgbGl0ZXJhbHMuCiAqCiAqIEFzIGFuIGV4YW1wbGUsIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSB1c2VzIHtAbGluawogKiBuZy4kc2NlI3BhcnNlQXNIdG1sICRzY2UucGFyc2VBc0h0bWwoYmluZGluZyBleHByZXNzaW9uKX0uICBIZXJlJ3MgdGhlIGFjdHVhbCBjb2RlIChzbGlnaHRseQogKiBzaW1wbGlmaWVkKToKICoKICogYGBgCiAqIHZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgZnVuY3Rpb24oJHNjZSkgewogKiAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogKiAgICAgc2NvcGUuJHdhdGNoKCRzY2UucGFyc2VBc0h0bWwoYXR0ci5uZ0JpbmRIdG1sKSwgZnVuY3Rpb24odmFsdWUpIHsKICogICAgICAgZWxlbWVudC5odG1sKHZhbHVlIHx8ICcnKTsKICogICAgIH0pOwogKiAgIH07CiAqIH1dOwogKiBgYGAKICoKICogIyMgSW1wYWN0IG9uIGxvYWRpbmcgdGVtcGxhdGVzCiAqCiAqIFRoaXMgYXBwbGllcyBib3RoIHRvIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmctaW5jbHVkZWB9IGRpcmVjdGl2ZSBhcyB3ZWxsIGFzCiAqIGB0ZW1wbGF0ZVVybGAncyBzcGVjaWZpZWQgYnkge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS4KICoKICogQnkgZGVmYXVsdCwgQW5ndWxhciBvbmx5IGxvYWRzIHRlbXBsYXRlcyBmcm9tIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlIGFwcGxpY2F0aW9uCiAqIGRvY3VtZW50LiAgVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsCiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiB0aGUgdGVtcGxhdGUgVVJMLiAgVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIGFuZC9vcgogKiBwcm90b2NvbHMsIHlvdSBtYXkgZWl0aGVyIGVpdGhlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0CiAqIHRoZW19IG9yIHtAbGluayBuZy4kc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIGl0fSBpbnRvIGEgdHJ1c3RlZCB2YWx1ZS4KICoKICogKlBsZWFzZSBub3RlKjoKICogVGhlIGJyb3dzZXIncwogKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KQogKiBhbmQgW0Nyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIChDT1JTKV0oaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8pCiAqIHBvbGljeSBhcHBseSBpbiBhZGRpdGlvbiB0byB0aGlzIGFuZCBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHkKICogbG9hZGVkLiAgVGhpcyBtZWFucyB0aGF0IHdpdGhvdXQgdGhlIHJpZ2h0IENPUlMgcG9saWN5LCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGEgZGlmZmVyZW50IGRvbWFpbgogKiB3b24ndCB3b3JrIG9uIGFsbCBicm93c2Vycy4gIEFsc28sIGxvYWRpbmcgdGVtcGxhdGVzIGZyb20gYGZpbGU6Ly9gIFVSTCBkb2VzIG5vdCB3b3JrIG9uIHNvbWUKICogYnJvd3NlcnMuCiAqCiAqICMjIFRoaXMgZmVlbHMgbGlrZSB0b28gbXVjaCBvdmVyaGVhZAogKgogKiBJdCdzIGltcG9ydGFudCB0byByZW1lbWJlciB0aGF0IFNDRSBvbmx5IGFwcGxpZXMgdG8gaW50ZXJwb2xhdGlvbiBleHByZXNzaW9ucy4KICoKICogSWYgeW91ciBleHByZXNzaW9ucyBhcmUgY29uc3RhbnQgbGl0ZXJhbHMsIHRoZXkncmUgYXV0b21hdGljYWxseSB0cnVzdGVkIGFuZCB5b3UgZG9uJ3QgbmVlZCB0bwogKiBjYWxsIGAkc2NlLnRydXN0QXNgIG9uIHRoZW0gKHJlbWVtYmVyIHRvIGluY2x1ZGUgdGhlIGBuZ1Nhbml0aXplYCBtb2R1bGUpIChlLmcuCiAqIGA8ZGl2IG5nLWJpbmQtaHRtbD0iJzxiPmltcGxpY2l0bHkgdHJ1c3RlZDwvYj4nIj48L2Rpdj5gKSBqdXN0IHdvcmtzLgogKgogKiBBZGRpdGlvbmFsbHksIGBhW2hyZWZdYCBhbmQgYGltZ1tzcmNdYCBhdXRvbWF0aWNhbGx5IHNhbml0aXplIHRoZWlyIFVSTHMgYW5kIGRvIG5vdCBwYXNzIHRoZW0KICogdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0uICBTQ0UgZG9lc24ndCBwbGF5IGEgcm9sZSBoZXJlLgogKgogKiBUaGUgaW5jbHVkZWQge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGNvbWVzIHdpdGggc2FuZSBkZWZhdWx0cyB0byBhbGxvdyB5b3UgdG8gbG9hZAogKiB0ZW1wbGF0ZXMgaW4gYG5nLWluY2x1ZGVgIGZyb20geW91ciBhcHBsaWNhdGlvbidzIGRvbWFpbiB3aXRob3V0IGhhdmluZyB0byBldmVuIGtub3cgYWJvdXQgU0NFLgogKiBJdCBibG9ja3MgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIGxvYWRpbmcgdGVtcGxhdGVzIG92ZXIgaHR0cCBmcm9tIGFuIGh0dHBzCiAqIHNlcnZlZCBkb2N1bWVudC4gIFlvdSBjYW4gY2hhbmdlIHRoZXNlIGJ5IHNldHRpbmcgeW91ciBvd24gY3VzdG9tIHtAbGluawogKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3RzfSBhbmQge0BsaW5rCiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IGJsYWNrbGlzdHN9IGZvciBtYXRjaGluZyBzdWNoIFVSTHMuCiAqCiAqIFRoaXMgc2lnbmlmaWNhbnRseSByZWR1Y2VzIHRoZSBvdmVyaGVhZC4gIEl0IGlzIGZhciBlYXNpZXIgdG8gcGF5IHRoZSBzbWFsbCBvdmVyaGVhZCBhbmQgaGF2ZSBhbgogKiBhcHBsaWNhdGlvbiB0aGF0J3Mgc2VjdXJlIGFuZCBjYW4gYmUgYXVkaXRlZCB0byB2ZXJpZnkgdGhhdCB3aXRoIG11Y2ggbW9yZSBlYXNlIHRoYW4gYm9sdGluZwogKiBzZWN1cml0eSBvbnRvIGFuIGFwcGxpY2F0aW9uIGxhdGVyLgogKgogKiA8YSBuYW1lPSJjb250ZXh0cyI+PC9hPgogKiAjIyBXaGF0IHRydXN0ZWQgY29udGV4dCB0eXBlcyBhcmUgc3VwcG9ydGVkPwogKgogKiB8IENvbnRleHQgICAgICAgICAgICAgfCBOb3RlcyAgICAgICAgICB8CiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXwKICogfCBgJHNjZS5IVE1MYCAgICAgICAgIHwgRm9yIEhUTUwgdGhhdCdzIHNhZmUgdG8gc291cmNlIGludG8gdGhlIGFwcGxpY2F0aW9uLiAgVGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSBkaXJlY3RpdmUgdXNlcyB0aGlzIGNvbnRleHQgZm9yIGJpbmRpbmdzLiBJZiBhbiB1bnNhZmUgdmFsdWUgaXMgZW5jb3VudGVyZWQgYW5kIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSAkc2FuaXRpemV9IG1vZHVsZSBpcyBwcmVzZW50IHRoaXMgd2lsbCBzYW5pdGl6ZSB0aGUgdmFsdWUgaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBlcnJvci4gfAogKiB8IGAkc2NlLkNTU2AgICAgICAgICAgfCBGb3IgQ1NTIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIEN1cnJlbnRseSB1bnVzZWQuICBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHwKICogfCBgJHNjZS5VUkxgICAgICAgICAgIHwgRm9yIFVSTHMgdGhhdCBhcmUgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MuICBDdXJyZW50bHkgdW51c2VkIChgPGEgaHJlZj1gIGFuZCBgPGltZyBzcmM9YCBzYW5pdGl6ZSB0aGVpciB1cmxzIGFuZCBkb24ndCBjb25zdGl0dXRlIGFuIFNDRSBjb250ZXh0LiB8CiAqIHwgYCRzY2UuUkVTT1VSQ0VfVVJMYCB8IEZvciBVUkxzIHRoYXQgYXJlIG5vdCBvbmx5IHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLCBidXQgd2hvc2UgY29udGVudHMgYXJlIGFsc28gc2FmZSB0byBpbmNsdWRlIGluIHlvdXIgYXBwbGljYXRpb24uICBFeGFtcGxlcyBpbmNsdWRlIGBuZy1pbmNsdWRlYCwgYHNyY2AgLyBgbmdTcmNgIGJpbmRpbmdzIGZvciB0YWdzIG90aGVyIHRoYW4gYElNR2AgKGUuZy4gYElGUkFNRWAsIGBPQkpFQ1RgLCBldGMuKSAgPGJyPjxicj5Ob3RlIHRoYXQgYCRzY2UuUkVTT1VSQ0VfVVJMYCBtYWtlcyBhIHN0cm9uZ2VyIHN0YXRlbWVudCBhYm91dCB0aGUgVVJMIHRoYW4gYCRzY2UuVVJMYCBkb2VzIGFuZCB0aGVyZWZvcmUgY29udGV4dHMgcmVxdWlyaW5nIHZhbHVlcyB0cnVzdGVkIGZvciBgJHNjZS5SRVNPVVJDRV9VUkxgIGNhbiBiZSB1c2VkIGFueXdoZXJlIHRoYXQgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlVSTGAgYXJlIHJlcXVpcmVkLiB8CiAqIHwgYCRzY2UuSlNgICAgICAgICAgICB8IEZvciBKYXZhU2NyaXB0IHRoYXQgaXMgc2FmZSB0byBleGVjdXRlIGluIHlvdXIgYXBwbGljYXRpb24ncyBjb250ZXh0LiAgQ3VycmVudGx5IHVudXNlZC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfAogKgogKiAjIyBGb3JtYXQgb2YgaXRlbXMgaW4ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHJlc291cmNlVXJsV2hpdGVsaXN0fS97QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgQmxhY2tsaXN0fSA8YSBuYW1lPSJyZXNvdXJjZVVybFBhdHRlcm5JdGVtIj48L2E+CiAqCiAqICBFYWNoIGVsZW1lbnQgaW4gdGhlc2UgYXJyYXlzIG11c3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6CiAqCiAqICAtICoqJ3NlbGYnKioKICogICAgLSBUaGUgc3BlY2lhbCAqKnN0cmluZyoqLCBgJ3NlbGYnYCwgY2FuIGJlIHVzZWQgdG8gbWF0Y2ggYWdhaW5zdCBhbGwgVVJMcyBvZiB0aGUgKipzYW1lCiAqICAgICAgZG9tYWluKiogYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50IHVzaW5nIHRoZSAqKnNhbWUgcHJvdG9jb2wqKi4KICogIC0gKipTdHJpbmcqKiAoZXhjZXB0IHRoZSBzcGVjaWFsIHZhbHVlIGAnc2VsZidgKQogKiAgICAtIFRoZSBzdHJpbmcgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBmdWxsICpub3JtYWxpemVkIC8gYWJzb2x1dGUgVVJMKiBvZiB0aGUgcmVzb3VyY2UKICogICAgICBiZWluZyB0ZXN0ZWQgKHN1YnN0cmluZyBtYXRjaGVzIGFyZSBub3QgZ29vZCBlbm91Z2guKQogKiAgICAtIFRoZXJlIGFyZSBleGFjdGx5ICoqdHdvIHdpbGRjYXJkIHNlcXVlbmNlcyoqIC0gYCpgIGFuZCBgKipgLiAgQWxsIG90aGVyIGNoYXJhY3RlcnMKICogICAgICBtYXRjaCB0aGVtc2VsdmVzLgogKiAgICAtIGAqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgYW55IGNoYXJhY3RlciBvdGhlciB0aGFuIG9uZSBvZiB0aGUgZm9sbG93aW5nIDYKICogICAgICBjaGFyYWN0ZXJzOiAnYDpgJywgJ2AvYCcsICdgLmAnLCAnYD9gJywgJ2AmYCcgYW5kICc7Jy4gIEl0J3MgYSB1c2VmdWwgd2lsZGNhcmQgZm9yIHVzZQogKiAgICAgIGluIGEgd2hpdGVsaXN0LgogKiAgICAtIGAqKmA6IG1hdGNoZXMgemVybyBvciBtb3JlIG9jY3VycmVuY2VzIG9mICphbnkqIGNoYXJhY3Rlci4gIEFzIHN1Y2gsIGl0J3Mgbm90CiAqICAgICAgbm90IGFwcHJvcHJpYXRlIHRvIHVzZSBpbiBmb3IgYSBzY2hlbWUsIGRvbWFpbiwgZXRjLiBhcyBpdCB3b3VsZCBtYXRjaCB0b28gbXVjaC4gIChlLmcuCiAqICAgICAgaHR0cDovLyoqLmV4YW1wbGUuY29tLyB3b3VsZCBtYXRjaCBodHRwOi8vZXZpbC5jb20vP2lnbm9yZT0uZXhhbXBsZS5jb20vIGFuZCB0aGF0IG1pZ2h0CiAqICAgICAgbm90IGhhdmUgYmVlbiB0aGUgaW50ZW50aW9uLikgIEl0cyB1c2FnZSBhdCB0aGUgdmVyeSBlbmQgb2YgdGhlIHBhdGggaXMgb2suICAoZS5nLgogKiAgICAgIGh0dHA6Ly9mb28uZXhhbXBsZS5jb20vdGVtcGxhdGVzLyoqKS4KICogIC0gKipSZWdFeHAqKiAoKnNlZSBjYXZlYXQgYmVsb3cqKQogKiAgICAtICpDYXZlYXQqOiAgV2hpbGUgcmVndWxhciBleHByZXNzaW9ucyBhcmUgcG93ZXJmdWwgYW5kIG9mZmVyIGdyZWF0IGZsZXhpYmlsaXR5LCAgdGhlaXIgc3ludGF4CiAqICAgICAgKGFuZCBhbGwgdGhlIGluZXZpdGFibGUgZXNjYXBpbmcpIG1ha2VzIHRoZW0gKmhhcmRlciB0byBtYWludGFpbiouICBJdCdzIGVhc3kgdG8KICogICAgICBhY2NpZGVudGFsbHkgaW50cm9kdWNlIGEgYnVnIHdoZW4gb25lIHVwZGF0ZXMgYSBjb21wbGV4IGV4cHJlc3Npb24gKGltaG8sIGFsbCByZWdleGVzIHNob3VsZAogKiAgICAgIGhhdmUgZ29vZCB0ZXN0IGNvdmVyYWdlLikuICBGb3IgaW5zdGFuY2UsIHRoZSB1c2Ugb2YgYC5gIGluIHRoZSByZWdleCBpcyBjb3JyZWN0IG9ubHkgaW4gYQogKiAgICAgIHNtYWxsIG51bWJlciBvZiBjYXNlcy4gIEEgYC5gIGNoYXJhY3RlciBpbiB0aGUgcmVnZXggdXNlZCB3aGVuIG1hdGNoaW5nIHRoZSBzY2hlbWUgb3IgYQogKiAgICAgIHN1YmRvbWFpbiBjb3VsZCBiZSBtYXRjaGVkIGFnYWluc3QgYSBgOmAgb3IgbGl0ZXJhbCBgLmAgdGhhdCB3YXMgbGlrZWx5IG5vdCBpbnRlbmRlZC4gICBJdAogKiAgICAgIGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgdGhlIHN0cmluZyBwYXR0ZXJucyBhbmQgb25seSBmYWxsIGJhY2sgdG8gcmVndWxhciBleHByZXNzaW9ucwogKiAgICAgIGlmIHRoZXkgYXMgYSBsYXN0IHJlc29ydC4KICogICAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwIChpLmUuIG5vdCBhIHN0cmluZy4pICBJdCBpcwogKiAgICAgIG1hdGNoZWQgYWdhaW5zdCB0aGUgKiplbnRpcmUqKiAqbm9ybWFsaXplZCAvIGFic29sdXRlIFVSTCogb2YgdGhlIHJlc291cmNlIGJlaW5nIHRlc3RlZAogKiAgICAgIChldmVuIHdoZW4gdGhlIFJlZ0V4cCBkaWQgbm90IGhhdmUgdGhlIGBeYCBhbmQgYCRgIGNvZGVzLikgIEluIGFkZGl0aW9uLCBhbnkgZmxhZ3MKICogICAgICBwcmVzZW50IG9uIHRoZSBSZWdFeHAgKHN1Y2ggYXMgbXVsdGlsaW5lLCBnbG9iYWwsIGlnbm9yZUNhc2UpIGFyZSBpZ25vcmVkLgogKiAgICAtIElmIHlvdSBhcmUgZ2VuZXJhdGluZyB5b3VyIEphdmFTY3JpcHQgZnJvbSBzb21lIG90aGVyIHRlbXBsYXRpbmcgZW5naW5lIChub3QKICogICAgICByZWNvbW1lbmRlZCwgZS5nLiBpbiBpc3N1ZSBbIzQwMDZdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzQwMDYpKSwKICogICAgICByZW1lbWJlciB0byBlc2NhcGUgeW91ciByZWd1bGFyIGV4cHJlc3Npb24gKGFuZCBiZSBhd2FyZSB0aGF0IHlvdSBtaWdodCBuZWVkIG1vcmUgdGhhbgogKiAgICAgIG9uZSBsZXZlbCBvZiBlc2NhcGluZyBkZXBlbmRpbmcgb24geW91ciB0ZW1wbGF0aW5nIGVuZ2luZSBhbmQgdGhlIHdheSB5b3UgaW50ZXJwb2xhdGVkCiAqICAgICAgdGhlIHZhbHVlLikgIERvIG1ha2UgdXNlIG9mIHlvdXIgcGxhdGZvcm0ncyBlc2NhcGluZyBtZWNoYW5pc20gYXMgaXQgbWlnaHQgYmUgZ29vZAogKiAgICAgIGVub3VnaCBiZWZvcmUgY29kaW5nIHlvdXIgb3duLiAgZS5nLiBSdWJ5IGhhcwogKiAgICAgIFtSZWdleHAuZXNjYXBlKHN0cildKGh0dHA6Ly93d3cucnVieS1kb2Mub3JnL2NvcmUtMi4wLjAvUmVnZXhwLmh0bWwjbWV0aG9kLWMtZXNjYXBlKQogKiAgICAgIGFuZCBQeXRob24gaGFzIFtyZS5lc2NhcGVdKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9yZS5odG1sI3JlLmVzY2FwZSkuCiAqICAgICAgSmF2YXNjcmlwdCBsYWNrcyBhIHNpbWlsYXIgYnVpbHQgaW4gZnVuY3Rpb24gZm9yIGVzY2FwaW5nLiAgVGFrZSBhIGxvb2sgYXQgR29vZ2xlCiAqICAgICAgQ2xvc3VyZSBsaWJyYXJ5J3MgW2dvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZShzKV0oCiAqICAgICAgaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfc3RyaW5nX3N0cmluZy5qcy5zb3VyY2UuaHRtbCNsaW5lOTYyKS4KICoKICogUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSBmb3IgYW4gZXhhbXBsZS4KICoKICogIyMgU2hvdyBtZSBhbiBleGFtcGxlIHVzaW5nIFNDRS4KICoKICogPGV4YW1wbGUgbW9kdWxlPSJteVNjZUFwcCIgZGVwcz0iYW5ndWxhci1zYW5pdGl6ZS5qcyI+CiAqIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogKiAgIDxkaXYgbmctY29udHJvbGxlcj0iQXBwQ29udHJvbGxlciBhcyBteUN0cmwiPgogKiAgICAgPGkgbmctYmluZC1odG1sPSJteUN0cmwuZXhwbGljaXRseVRydXN0ZWRIdG1sIiBpZD0iZXhwbGljaXRseVRydXN0ZWRIdG1sIj48L2k+PGJyPjxicj4KICogICAgIDxiPlVzZXIgY29tbWVudHM8L2I+PGJyPgogKiAgICAgQnkgZGVmYXVsdCwgSFRNTCB0aGF0IGlzbid0IGV4cGxpY2l0bHkgdHJ1c3RlZCAoZS5nLiBBbGljZSdzIGNvbW1lbnQpIGlzIHNhbml0aXplZCB3aGVuCiAqICAgICAkc2FuaXRpemUgaXMgYXZhaWxhYmxlLiAgSWYgJHNhbml0aXplIGlzbid0IGF2YWlsYWJsZSwgdGhpcyByZXN1bHRzIGluIGFuIGVycm9yIGluc3RlYWQgb2YgYW4KICogICAgIGV4cGxvaXQuCiAqICAgICA8ZGl2IGNsYXNzPSJ3ZWxsIj4KICogICAgICAgPGRpdiBuZy1yZXBlYXQ9InVzZXJDb21tZW50IGluIG15Q3RybC51c2VyQ29tbWVudHMiPgogKiAgICAgICAgIDxiPnt7dXNlckNvbW1lbnQubmFtZX19PC9iPjoKICogICAgICAgICA8c3BhbiBuZy1iaW5kLWh0bWw9InVzZXJDb21tZW50Lmh0bWxDb21tZW50IiBjbGFzcz0iaHRtbENvbW1lbnQiPjwvc3Bhbj4KICogICAgICAgICA8YnI+CiAqICAgICAgIDwvZGl2PgogKiAgICAgPC9kaXY+CiAqICAgPC9kaXY+CiAqIDwvZmlsZT4KICoKICogPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICogICBhbmd1bGFyLm1vZHVsZSgnbXlTY2VBcHAnLCBbJ25nU2FuaXRpemUnXSkKICogICAgIC5jb250cm9sbGVyKCdBcHBDb250cm9sbGVyJywgWyckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckc2NlJywKICogICAgICAgZnVuY3Rpb24oJGh0dHAsICR0ZW1wbGF0ZUNhY2hlLCAkc2NlKSB7CiAqICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogKiAgICAgICAgICRodHRwLmdldCgidGVzdF9kYXRhLmpzb24iLCB7Y2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuc3VjY2VzcyhmdW5jdGlvbih1c2VyQ29tbWVudHMpIHsKICogICAgICAgICAgIHNlbGYudXNlckNvbW1lbnRzID0gdXNlckNvbW1lbnRzOwogKiAgICAgICAgIH0pOwogKiAgICAgICAgIHNlbGYuZXhwbGljaXRseVRydXN0ZWRIdG1sID0gJHNjZS50cnVzdEFzSHRtbCgKICogICAgICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPSJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgKwogKiAgICAgICAgICAgICAnc2FuaXRpemF0aW9uLiZxdW90OyI+SG92ZXIgb3ZlciB0aGlzIHRleHQuPC9zcGFuPicpOwogKiAgICAgICB9XSk7CiAqIDwvZmlsZT4KICoKICogPGZpbGUgbmFtZT0idGVzdF9kYXRhLmpzb24iPgogKiBbCiAqICAgeyAibmFtZSI6ICJBbGljZSIsCiAqICAgICAiaHRtbENvbW1lbnQiOgogKiAgICAgICAgICI8c3BhbiBvbm1vdXNlb3Zlcj0ndGhpcy50ZXh0Q29udGVudD1cIlBXTjNEIVwiJz5JcyA8aT5hbnlvbmU8L2k+IHJlYWRpbmcgdGhpcz88L3NwYW4+IgogKiAgIH0sCiAqICAgeyAibmFtZSI6ICJCb2IiLAogKiAgICAgImh0bWxDb21tZW50IjogIjxpPlllcyE8L2k+ICBBbSBJIHRoZSBvbmx5IG90aGVyIG9uZT8iCiAqICAgfQogKiBdCiAqIDwvZmlsZT4KICoKICogPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAqICAgZGVzY3JpYmUoJ1NDRSBkb2MgZGVtbycsIGZ1bmN0aW9uKCkgewogKiAgICAgaXQoJ3Nob3VsZCBzYW5pdGl6ZSB1bnRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7CiAqICAgICAgIGV4cGVjdChlbGVtZW50LmFsbChieS5jc3MoJy5odG1sQ29tbWVudCcpKS5maXJzdCgpLmdldElubmVySHRtbCgpKQogKiAgICAgICAgICAgLnRvQmUoJzxzcGFuPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj4nKTsKICogICAgIH0pOwogKgogKiAgICAgaXQoJ3Nob3VsZCBOT1Qgc2FuaXRpemUgZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkgewogKiAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZXhwbGljaXRseVRydXN0ZWRIdG1sJykpLmdldElubmVySHRtbCgpKS50b0JlKAogKiAgICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPSJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgKwogKiAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDsiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTsKICogICAgIH0pOwogKiAgIH0pOwogKiA8L2ZpbGU+CiAqIDwvZXhhbXBsZT4KICoKICoKICoKICogIyMgQ2FuIEkgZGlzYWJsZSBTQ0UgY29tcGxldGVseT8KICoKICogWWVzLCB5b3UgY2FuLiAgSG93ZXZlciwgdGhpcyBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC4gIFNDRSBnaXZlcyB5b3UgYSBsb3Qgb2Ygc2VjdXJpdHkgYmVuZWZpdHMKICogZm9yIGxpdHRsZSBjb2Rpbmcgb3ZlcmhlYWQuICBJdCB3aWxsIGJlIG11Y2ggaGFyZGVyIHRvIHRha2UgYW4gU0NFIGRpc2FibGVkIGFwcGxpY2F0aW9uIGFuZAogKiBlaXRoZXIgc2VjdXJlIGl0IG9uIHlvdXIgb3duIG9yIGVuYWJsZSBTQ0UgYXQgYSBsYXRlciBzdGFnZS4gIEl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gZGlzYWJsZSBTQ0UKICogZm9yIGNhc2VzIHdoZXJlIHlvdSBoYXZlIGEgbG90IG9mIGV4aXN0aW5nIGNvZGUgdGhhdCB3YXMgd3JpdHRlbiBiZWZvcmUgU0NFIHdhcyBpbnRyb2R1Y2VkIGFuZAogKiB5b3UncmUgbWlncmF0aW5nIHRoZW0gYSBtb2R1bGUgYXQgYSB0aW1lLgogKgogKiBUaGF0IHNhaWQsIGhlcmUncyBob3cgeW91IGNhbiBjb21wbGV0ZWx5IGRpc2FibGUgU0NFOgogKgogKiBgYGAKICogYW5ndWxhci5tb2R1bGUoJ215QXBwV2l0aFNjZURpc2FibGVkbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VQcm92aWRlcikgewogKiAgIC8vIENvbXBsZXRlbHkgZGlzYWJsZSBTQ0UuICBGb3IgZGVtb25zdHJhdGlvbiBwdXJwb3NlcyBvbmx5IQogKiAgIC8vIERvIG5vdCB1c2UgaW4gbmV3IHByb2plY3RzLgogKiAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTsKICogfSk7CiAqIGBgYAogKgogKi8KLyoganNoaW50IG1heGxlbjogMTAwICovCgpmdW5jdGlvbiAkU2NlUHJvdmlkZXIoKSB7CiAgdmFyIGVuYWJsZWQgPSB0cnVlOwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgJHNjZVByb3ZpZGVyI2VuYWJsZWQKICAgKiBAa2luZCBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgSWYgcHJvdmlkZWQsIHRoZW4gZW5hYmxlcy9kaXNhYmxlcyBTQ0UuCiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBTQ0UgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogRW5hYmxlcy9kaXNhYmxlcyBTQ0UgYW5kIHJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUuCiAgICovCiAgdGhpcy5lbmFibGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICBlbmFibGVkID0gISF2YWx1ZTsKICAgIH0KICAgIHJldHVybiBlbmFibGVkOwogIH07CgoKICAvKiBEZXNpZ24gbm90ZXMgb24gdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIFNDRS4KICAgKgogICAqIFRoZSBBUEkgY29udHJhY3QgZm9yIHRoZSBTQ0UgZGVsZWdhdGUKICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogVGhlIFNDRSBkZWxlZ2F0ZSBvYmplY3QgbXVzdCBwcm92aWRlIHRoZSBmb2xsb3dpbmcgMyBtZXRob2RzOgogICAqCiAgICogLSB0cnVzdEFzKGNvbnRleHRFbnVtLCB2YWx1ZSkKICAgKiAgICAgVGhpcyBtZXRob2QgaXMgdXNlZCB0byB0ZWxsIHRoZSBTQ0Ugc2VydmljZSB0aGF0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBPSyB0byB1c2UgaW4gdGhlCiAgICogICAgIGNvbnRleHRzIHNwZWNpZmllZCBieSBjb250ZXh0RW51bS4gIEl0IG11c3QgcmV0dXJuIGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnkKICAgKiAgICAgZ2V0VHJ1c3RlZCgpIGZvciBhIGNvbXBhdGlibGUgY29udGV4dEVudW0gYW5kIHJldHVybiB0aGlzIHZhbHVlLgogICAqCiAgICogLSB2YWx1ZU9mKHZhbHVlKQogICAqICAgICBGb3IgdmFsdWVzIHRoYXQgd2VyZSBub3QgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlbSBhcyBpcy4gIEZvciB2YWx1ZXMgdGhhdCB3ZXJlCiAgICogICAgIHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIGlucHV0IHZhbHVlIHRvIHRydXN0QXMuICBCYXNpY2FsbHksIGlmCiAgICogICAgIHRydXN0QXMgaXMgd3JhcHBpbmcgdGhlIGdpdmVuIHZhbHVlcyBpbnRvIHNvbWUgdHlwZSwgdGhpcyBvcGVyYXRpb24gdW53cmFwcyBpdCB3aGVuIGdpdmVuCiAgICogICAgIHN1Y2ggYSB2YWx1ZS4KICAgKgogICAqIC0gZ2V0VHJ1c3RlZChjb250ZXh0RW51bSwgdmFsdWUpCiAgICogICAgIFRoaXMgZnVuY3Rpb24gc2hvdWxkIHJldHVybiB0aGUgYSB2YWx1ZSB0aGF0IGlzIHNhZmUgdG8gdXNlIGluIHRoZSBjb250ZXh0IHNwZWNpZmllZCBieQogICAqICAgICBjb250ZXh0RW51bSBvciB0aHJvdyBhbmQgZXhjZXB0aW9uIG90aGVyd2lzZS4KICAgKgogICAqIE5PVEU6IFRoaXMgY29udHJhY3QgZGVsaWJlcmF0ZWx5IGRvZXMgTk9UIHN0YXRlIHRoYXQgdmFsdWVzIHJldHVybmVkIGJ5IHRydXN0QXMoKSBtdXN0IGJlCiAgICogb3BhcXVlIG9yIHdyYXBwZWQgaW4gc29tZSBob2xkZXIgb2JqZWN0LiAgVGhhdCBoYXBwZW5zIHRvIGJlIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbC4gIEZvcgogICAqIGluc3RhbmNlLCBhbiBpbXBsZW1lbnRhdGlvbiBjb3VsZCBtYWludGFpbiBhIHJlZ2lzdHJ5IG9mIGFsbCB0cnVzdGVkIG9iamVjdHMgYnkgY29udGV4dC4gIEluCiAgICogc3VjaCBhIGNhc2UsIHRydXN0QXMoKSB3b3VsZCByZXR1cm4gdGhlIHNhbWUgb2JqZWN0IHRoYXQgd2FzIHBhc3NlZCBpbi4gIGdldFRydXN0ZWQoKSB3b3VsZAogICAqIHJldHVybiB0aGUgc2FtZSBvYmplY3QgcGFzc2VkIGluIGlmIGl0IHdhcyBmb3VuZCBpbiB0aGUgcmVnaXN0cnkgdW5kZXIgYSBjb21wYXRpYmxlIGNvbnRleHQgb3IKICAgKiB0aHJvdyBhbiBleGNlcHRpb24gb3RoZXJ3aXNlLiAgQW4gaW1wbGVtZW50YXRpb24gbWlnaHQgb25seSB3cmFwIHZhbHVlcyBzb21lIG9mIHRoZSB0aW1lIGJhc2VkCiAgICogb24gc29tZSBjcml0ZXJpYS4gIGdldFRydXN0ZWQoKSBtaWdodCByZXR1cm4gYSB2YWx1ZSBhbmQgbm90IHRocm93IGFuIGV4Y2VwdGlvbiBmb3Igc3BlY2lhbAogICAqIGNvbnN0YW50cyBvciBvYmplY3RzIGV2ZW4gaWYgbm90IHdyYXBwZWQuICBBbGwgc3VjaCBpbXBsZW1lbnRhdGlvbnMgZnVsZmlsbCB0aGlzIGNvbnRyYWN0LgogICAqCiAgICoKICAgKiBBIG5vdGUgb24gdGhlIGluaGVyaXRhbmNlIG1vZGVsIGZvciBTQ0UgY29udGV4dHMKICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBJJ3ZlIHVzZWQgaW5oZXJpdGFuY2UgYW5kIG1hZGUgUkVTT1VSQ0VfVVJMIHdyYXBwZWQgdHlwZXMgYSBzdWJ0eXBlIG9mIFVSTCB3cmFwcGVkIHR5cGVzLiAgVGhpcwogICAqIGlzIHB1cmVseSBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLgogICAqCiAgICogVGhlIGNvbnRyYWN0IGlzIHNpbXBseSB0aGlzOgogICAqCiAgICogICAgIGdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKSBzdWNjZWVkaW5nIGltcGxpZXMgdGhhdCBnZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSkKICAgKiAgICAgd2lsbCBhbHNvIHN1Y2NlZWQuCiAgICoKICAgKiBJbmhlcml0YW5jZSBoYXBwZW5zIHRvIGNhcHR1cmUgdGhpcyBpbiBhIG5hdHVyYWwgd2F5LiAgSW4gc29tZSBmdXR1cmUsIHdlCiAgICogbWF5IG5vdCB1c2UgaW5oZXJpdGFuY2UgYW55bW9yZS4gIFRoYXQgaXMgT0sgYmVjYXVzZSBubyBjb2RlIG91dHNpZGUgb2YKICAgKiBzY2UuanMgYW5kIHNjZVNwZWNzLmpzIHdvdWxkIG5lZWQgdG8gYmUgYXdhcmUgb2YgdGhpcyBkZXRhaWwuCiAgICovCgogIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgJyRzbmlmZmVyJywgJyRzY2VEZWxlZ2F0ZScsIGZ1bmN0aW9uKAogICAgICAgICAgICAgICAgJHBhcnNlLCAgICRzbmlmZmVyLCAgICRzY2VEZWxlZ2F0ZSkgewogICAgLy8gUHJlcmVxOiBFbnN1cmUgdGhhdCB3ZSdyZSBub3QgcnVubmluZyBpbiBJRTggcXVpcmtzIG1vZGUuICBJbiB0aGF0IG1vZGUsIElFIGFsbG93cwogICAgLy8gdGhlICJleHByZXNzaW9uKGphdmFzY3JpcHQgZXhwcmVzc2lvbikiIHN5bnRheCB3aGljaCBpcyBpbnNlY3VyZS4KICAgIGlmIChlbmFibGVkICYmICRzbmlmZmVyLm1zaWUgJiYgJHNuaWZmZXIubXNpZURvY3VtZW50TW9kZSA8IDgpIHsKICAgICAgdGhyb3cgJHNjZU1pbkVycignaWVxdWlya3MnLAogICAgICAgICdTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkb2VzIG5vdCBzdXBwb3J0IEludGVybmV0IEV4cGxvcmVyIHZlcnNpb24gPCA5IGluIHF1aXJrcyAnICsKICAgICAgICAnbW9kZS4gIFlvdSBjYW4gZml4IHRoaXMgYnkgYWRkaW5nIHRoZSB0ZXh0IDwhZG9jdHlwZSBodG1sPiB0byB0aGUgdG9wIG9mIHlvdXIgSFRNTCAnICsKICAgICAgICAnZG9jdW1lbnQuICBTZWUgaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJHNjZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTsKICAgIH0KCiAgICB2YXIgc2NlID0gc2hhbGxvd0NvcHkoU0NFX0NPTlRFWFRTKTsKCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjaXNFbmFibGVkCiAgICAgKiBAa2luZCBmdW5jdGlvbgogICAgICoKICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS4gIElmIHlvdSB3YW50IHRvIHNldCB0aGUgdmFsdWUsIHlvdQogICAgICogaGF2ZSB0byBkbyBpdCBhdCBtb2R1bGUgY29uZmlnIHRpbWUgb24ge0BsaW5rIG5nLiRzY2VQcm92aWRlciAkc2NlUHJvdmlkZXJ9LgogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBTQ0UgaXMgZW5hYmxlZC4KICAgICAqLwogICAgc2NlLmlzRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGVuYWJsZWQ7CiAgICB9OwogICAgc2NlLnRydXN0QXMgPSAkc2NlRGVsZWdhdGUudHJ1c3RBczsKICAgIHNjZS5nZXRUcnVzdGVkID0gJHNjZURlbGVnYXRlLmdldFRydXN0ZWQ7CiAgICBzY2UudmFsdWVPZiA9ICRzY2VEZWxlZ2F0ZS52YWx1ZU9mOwoKICAgIGlmICghZW5hYmxlZCkgewogICAgICBzY2UudHJ1c3RBcyA9IHNjZS5nZXRUcnVzdGVkID0gZnVuY3Rpb24odHlwZSwgdmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9OwogICAgICBzY2UudmFsdWVPZiA9IGlkZW50aXR5OwogICAgfQoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNwYXJzZUFzCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi4gIFRoaXMgaXMgbGlrZSB7QGxpbmsKICAgICAqIG5nLiRwYXJzZSAkcGFyc2V9IGFuZCBpcyBpZGVudGljYWwgd2hlbiB0aGUgZXhwcmVzc2lvbiBpcyBhIGxpdGVyYWwgY29uc3RhbnQuICBPdGhlcndpc2UsIGl0CiAgICAgKiB3cmFwcyB0aGUgZXhwcmVzc2lvbiBpbiBhIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWQoKnR5cGUqLAogICAgICogKnJlc3VsdCopfQogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIFNDRSBjb250ZXh0IGluIHdoaWNoIHRoaXMgcmVzdWx0IHdpbGwgYmUgdXNlZC4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuCiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOgogICAgICoKICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3MKICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLgogICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbgogICAgICogICAgICBgY29udGV4dGAuCiAgICAgKi8KICAgIHNjZS5wYXJzZUFzID0gZnVuY3Rpb24gc2NlUGFyc2VBcyh0eXBlLCBleHByKSB7CiAgICAgIHZhciBwYXJzZWQgPSAkcGFyc2UoZXhwcik7CiAgICAgIGlmIChwYXJzZWQubGl0ZXJhbCAmJiBwYXJzZWQuY29uc3RhbnQpIHsKICAgICAgICByZXR1cm4gcGFyc2VkOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAkcGFyc2UoZXhwciwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gc2NlLmdldFRydXN0ZWQodHlwZSwgdmFsdWUpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSN0cnVzdEFzCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LiAgQXMgc3VjaCwKICAgICAqIHJldHVybnMgYW4gb2JqZWN0IHRoYXQgaXMgdHJ1c3RlZCBieSBhbmd1bGFyIGZvciB1c2UgaW4gc3BlY2lmaWVkIHN0cmljdCBjb250ZXh0dWFsCiAgICAgKiBlc2NhcGluZyBjb250ZXh0cyAoc3VjaCBhcyBuZy1iaW5kLWh0bWwsIG5nLWluY2x1ZGUsIGFueSBzcmMgYXR0cmlidXRlCiAgICAgKiBpbnRlcnBvbGF0aW9uLCBhbnkgZG9tIGV2ZW50IGJpbmRpbmcgYXR0cmlidXRlIGludGVycG9sYXRpb24gc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pCiAgICAgKiB0aGF0IHVzZXMgdGhlIHByb3ZpZGVkIHZhbHVlLiAgU2VlICoge0BsaW5rIG5nLiRzY2UgJHNjZX0gZm9yIGVuYWJsaW5nIHN0cmljdCBjb250ZXh0dWFsCiAgICAgKiBlc2NhcGluZy4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgc2FmZSBmb3IgdXNlLiAgZS5nLiB1cmwsCiAgICAgKiAgIHJlc291cmNlX3VybCwgaHRtbCwganMgYW5kIGNzcy4KICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCB0cnVzdGVkL3NhZmUuCiAgICAgKiBAcmV0dXJucyB7Kn0gQSB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIHN0YW5kIGluIGZvciB0aGUgcHJvdmlkZWQgYHZhbHVlYCBpbiBwbGFjZXMKICAgICAqIHdoZXJlIEFuZ3VsYXIgZXhwZWN0cyBhICRzY2UudHJ1c3RBcygpIHJldHVybiB2YWx1ZS4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSN0cnVzdEFzSHRtbAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNIdG1sKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkhUTUwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy4KICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRIdG1sCiAgICAgKiAgICAgJHNjZS5nZXRUcnVzdGVkSHRtbCh2YWx1ZSl9IHRvIG9idGFpbiB0aGUgb3JpZ2luYWwgdmFsdWUuICAocHJpdmlsZWdlZCBkaXJlY3RpdmVzCiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGUKICAgICAqICAgICByZXR1cm4gdmFsdWUgb2Yge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9LikKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSN0cnVzdEFzVXJsCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1VybCh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5VUkwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy4KICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRVcmwKICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRVcmwodmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlcwogICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlCiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH0KICAgICAqCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLgogICAgICogQHJldHVybnMgeyp9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsCiAgICAgKiAgICAgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlcwogICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlIHJldHVybgogICAgICogICAgIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0pzCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0pzKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkpTLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuCiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkSnMKICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRKcyh2YWx1ZSl9IHRvIG9idGFpbiB0aGUgb3JpZ2luYWwgdmFsdWUuICAocHJpdmlsZWdlZCBkaXJlY3RpdmVzCiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGUKICAgICAqICAgICByZXR1cm4gdmFsdWUgb2Yge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9LikKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGB9LiAgQXMgc3VjaCwKICAgICAqIHRha2VzIHRoZSByZXN1bHQgb2YgYSB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfSgpIGNhbGwgYW5kIHJldHVybnMgdGhlCiAgICAgKiBvcmlnaW5hbGx5IHN1cHBsaWVkIHZhbHVlIGlmIHRoZSBxdWVyaWVkIGNvbnRleHQgdHlwZSBpcyBhIHN1cGVydHlwZSBvZiB0aGUgY3JlYXRlZCB0eXBlLgogICAgICogSWYgdGhpcyBjb25kaXRpb24gaXNuJ3Qgc2F0aXNmaWVkLCB0aHJvd3MgYW4gZXhjZXB0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkLgogICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlI3RydXN0QXMgYCRzY2UudHJ1c3RBc2B9CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsLgogICAgICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGUgd2FzIG9yaWdpbmFsbHkgcHJvdmlkZWQgdG8KICAgICAqICAgICAgICAgICAgICB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfSBpZiB2YWxpZCBpbiB0aGlzIGNvbnRleHQuCiAgICAgKiAgICAgICAgICAgICAgT3RoZXJ3aXNlLCB0aHJvd3MgYW4gZXhjZXB0aW9uLgogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRIdG1sCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEh0bWwodmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYH0KICAgICAqCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLgogICAgICogQHJldHVybnMgeyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWAKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkQ3NzCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZENzcyh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5DU1MsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5DU1MsIHZhbHVlKWAKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkVXJsCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZFVybCh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKWAKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmwKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkYC4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWAKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkSnMKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSnModmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5KUywgdmFsdWUpYAogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNIdG1sCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0h0bWwoZXhwcmVzc2lvbiBzdHJpbmcpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZSBgJHNjZS5wYXJzZUFzKCRzY2UuSFRNTCwgdmFsdWUpYH0KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLgogICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjoKICAgICAqCiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzCiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS4KICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4KICAgICAqICAgICAgYGNvbnRleHRgLgogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNDc3MKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzQ3NzKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2UgYCRzY2UucGFyc2VBcygkc2NlLkNTUywgdmFsdWUpYH0KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLgogICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjoKICAgICAqCiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzCiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS4KICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4KICAgICAqICAgICAgYGNvbnRleHRgLgogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNVcmwKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzVXJsKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2UgYCRzY2UucGFyc2VBcygkc2NlLlVSTCwgdmFsdWUpYH0KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLgogICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjoKICAgICAqCiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzCiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS4KICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4KICAgICAqICAgICAgYGNvbnRleHRgLgogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNSZXNvdXJjZVVybAogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNSZXNvdXJjZVVybCh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlIGAkc2NlLnBhcnNlQXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS4KICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAgICAgKgogICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5ncwogICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluCiAgICAgKiAgICAgIGBjb250ZXh0YC4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgJHNjZSNwYXJzZUFzSnMKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSnModmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZSBgJHNjZS5wYXJzZUFzKCRzY2UuSlMsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS4KICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAgICAgKgogICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5ncwogICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluCiAgICAgKiAgICAgIGBjb250ZXh0YC4KICAgICAqLwoKICAgIC8vIFNob3J0aGFuZCBkZWxlZ2F0aW9ucy4KICAgIHZhciBwYXJzZSA9IHNjZS5wYXJzZUFzLAogICAgICAgIGdldFRydXN0ZWQgPSBzY2UuZ2V0VHJ1c3RlZCwKICAgICAgICB0cnVzdEFzID0gc2NlLnRydXN0QXM7CgogICAgZm9yRWFjaChTQ0VfQ09OVEVYVFMsIGZ1bmN0aW9uIChlbnVtVmFsdWUsIG5hbWUpIHsKICAgICAgdmFyIGxOYW1lID0gbG93ZXJjYXNlKG5hbWUpOwogICAgICBzY2VbY2FtZWxDYXNlKCJwYXJzZV9hc18iICsgbE5hbWUpXSA9IGZ1bmN0aW9uIChleHByKSB7CiAgICAgICAgcmV0dXJuIHBhcnNlKGVudW1WYWx1ZSwgZXhwcik7CiAgICAgIH07CiAgICAgIHNjZVtjYW1lbENhc2UoImdldF90cnVzdGVkXyIgKyBsTmFtZSldID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIGdldFRydXN0ZWQoZW51bVZhbHVlLCB2YWx1ZSk7CiAgICAgIH07CiAgICAgIHNjZVtjYW1lbENhc2UoInRydXN0X2FzXyIgKyBsTmFtZSldID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIHRydXN0QXMoZW51bVZhbHVlLCB2YWx1ZSk7CiAgICAgIH07CiAgICB9KTsKCiAgICByZXR1cm4gc2NlOwogIH1dOwp9CgovKioKICogISEhIFRoaXMgaXMgYW4gdW5kb2N1bWVudGVkICJwcml2YXRlIiBzZXJ2aWNlICEhIQogKgogKiBAbmFtZSAkc25pZmZlcgogKiBAcmVxdWlyZXMgJHdpbmRvdwogKiBAcmVxdWlyZXMgJGRvY3VtZW50CiAqCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaGlzdG9yeSBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgaHRtbDUgaGlzdG9yeSBhcGkgPwogKiBAcHJvcGVydHkge2Jvb2xlYW59IGhhc2hjaGFuZ2UgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IGhhc2hjaGFuZ2UgZXZlbnQgPwogKiBAcHJvcGVydHkge2Jvb2xlYW59IHRyYW5zaXRpb25zIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBDU1MgdHJhbnNpdGlvbiBldmVudHMgPwogKiBAcHJvcGVydHkge2Jvb2xlYW59IGFuaW1hdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyBhbmltYXRpb24gZXZlbnRzID8KICoKICogQGRlc2NyaXB0aW9uCiAqIFRoaXMgaXMgdmVyeSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgdGVzdGluZyBicm93c2VyJ3MgZmVhdHVyZXMuCiAqLwpmdW5jdGlvbiAkU25pZmZlclByb3ZpZGVyKCkgewogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQpIHsKICAgIHZhciBldmVudFN1cHBvcnQgPSB7fSwKICAgICAgICBhbmRyb2lkID0KICAgICAgICAgIGludCgoL2FuZHJvaWQgKFxkKykvLmV4ZWMobG93ZXJjYXNlKCgkd2luZG93Lm5hdmlnYXRvciB8fCB7fSkudXNlckFnZW50KSkgfHwgW10pWzFdKSwKICAgICAgICBib3hlZSA9IC9Cb3hlZS9pLnRlc3QoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpLAogICAgICAgIGRvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9LAogICAgICAgIGRvY3VtZW50TW9kZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSwKICAgICAgICB2ZW5kb3JQcmVmaXgsCiAgICAgICAgdmVuZG9yUmVnZXggPSAvXihNb3p8d2Via2l0fE98bXMpKD89W0EtWl0pLywKICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuc3R5bGUsCiAgICAgICAgdHJhbnNpdGlvbnMgPSBmYWxzZSwKICAgICAgICBhbmltYXRpb25zID0gZmFsc2UsCiAgICAgICAgbWF0Y2g7CgogICAgaWYgKGJvZHlTdHlsZSkgewogICAgICBmb3IodmFyIHByb3AgaW4gYm9keVN0eWxlKSB7CiAgICAgICAgaWYobWF0Y2ggPSB2ZW5kb3JSZWdleC5leGVjKHByb3ApKSB7CiAgICAgICAgICB2ZW5kb3JQcmVmaXggPSBtYXRjaFswXTsKICAgICAgICAgIHZlbmRvclByZWZpeCA9IHZlbmRvclByZWZpeC5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArIHZlbmRvclByZWZpeC5zdWJzdHIoMSk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmKCF2ZW5kb3JQcmVmaXgpIHsKICAgICAgICB2ZW5kb3JQcmVmaXggPSAoJ1dlYmtpdE9wYWNpdHknIGluIGJvZHlTdHlsZSkgJiYgJ3dlYmtpdCc7CiAgICAgIH0KCiAgICAgIHRyYW5zaXRpb25zID0gISEoKCd0cmFuc2l0aW9uJyBpbiBib2R5U3R5bGUpIHx8ICh2ZW5kb3JQcmVmaXggKyAnVHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKSk7CiAgICAgIGFuaW1hdGlvbnMgID0gISEoKCdhbmltYXRpb24nIGluIGJvZHlTdHlsZSkgfHwgKHZlbmRvclByZWZpeCArICdBbmltYXRpb24nIGluIGJvZHlTdHlsZSkpOwoKICAgICAgaWYgKGFuZHJvaWQgJiYgKCF0cmFuc2l0aW9uc3x8IWFuaW1hdGlvbnMpKSB7CiAgICAgICAgdHJhbnNpdGlvbnMgPSBpc1N0cmluZyhkb2N1bWVudC5ib2R5LnN0eWxlLndlYmtpdFRyYW5zaXRpb24pOwogICAgICAgIGFuaW1hdGlvbnMgPSBpc1N0cmluZyhkb2N1bWVudC5ib2R5LnN0eWxlLndlYmtpdEFuaW1hdGlvbik7CiAgICAgIH0KICAgIH0KCgogICAgcmV0dXJuIHsKICAgICAgLy8gQW5kcm9pZCBoYXMgaGlzdG9yeS5wdXNoU3RhdGUsIGJ1dCBpdCBkb2VzIG5vdCB1cGRhdGUgbG9jYXRpb24gY29ycmVjdGx5CiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGF0IGFsbC4KICAgICAgLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2FuZHJvaWQvaXNzdWVzL2RldGFpbD9pZD0xNzQ3MQogICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MDQKCiAgICAgIC8vIG9sZGVyIHdlYmtpdCBicm93c2VyICg1MzMuOSkgb24gQm94ZWUgYm94IGhhcyBleGFjdGx5IHRoZSBzYW1lIHByb2JsZW0gYXMgQW5kcm9pZCBoYXMKICAgICAgLy8gc28gbGV0J3Mgbm90IHVzZSB0aGUgaGlzdG9yeSBBUEkgYWxzbwogICAgICAvLyBXZSBhcmUgcHVycG9zZWZ1bGx5IHVzaW5nIGAhKGFuZHJvaWQgPCA0KWAgdG8gY292ZXIgdGhlIGNhc2Ugd2hlbiBgYW5kcm9pZGAgaXMgdW5kZWZpbmVkCiAgICAgIC8vIGpzaGludCAtVzAxOAogICAgICBoaXN0b3J5OiAhISgkd2luZG93Lmhpc3RvcnkgJiYgJHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSAmJiAhKGFuZHJvaWQgPCA0KSAmJiAhYm94ZWUpLAogICAgICAvLyBqc2hpbnQgK1cwMTgKICAgICAgaGFzaGNoYW5nZTogJ29uaGFzaGNoYW5nZScgaW4gJHdpbmRvdyAmJgogICAgICAgICAgICAgICAgICAvLyBJRTggY29tcGF0aWJsZSBtb2RlIGxpZXMKICAgICAgICAgICAgICAgICAgKCFkb2N1bWVudE1vZGUgfHwgZG9jdW1lbnRNb2RlID4gNyksCiAgICAgIGhhc0V2ZW50OiBmdW5jdGlvbihldmVudCkgewogICAgICAgIC8vIElFOSBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgaXQncyBzbyBmdWJhcmVkIHRoYXQgd2UgcmF0aGVyIHByZXRlbmQgdGhhdCBpdCBkb2Vzbid0IGhhdmUKICAgICAgICAvLyBpdC4gSW4gcGFydGljdWxhciB0aGUgZXZlbnQgaXMgbm90IGZpcmVkIHdoZW4gYmFja3NwYWNlIG9yIGRlbGV0ZSBrZXkgYXJlIHByZXNzZWQgb3IKICAgICAgICAvLyB3aGVuIGN1dCBvcGVyYXRpb24gaXMgcGVyZm9ybWVkLgogICAgICAgIGlmIChldmVudCA9PSAnaW5wdXQnICYmIG1zaWUgPT0gOSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnRTdXBwb3J0W2V2ZW50XSkpIHsKICAgICAgICAgIHZhciBkaXZFbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgIGV2ZW50U3VwcG9ydFtldmVudF0gPSAnb24nICsgZXZlbnQgaW4gZGl2RWxtOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGV2ZW50U3VwcG9ydFtldmVudF07CiAgICAgIH0sCiAgICAgIGNzcDogY3NwKCksCiAgICAgIHZlbmRvclByZWZpeDogdmVuZG9yUHJlZml4LAogICAgICB0cmFuc2l0aW9ucyA6IHRyYW5zaXRpb25zLAogICAgICBhbmltYXRpb25zIDogYW5pbWF0aW9ucywKICAgICAgYW5kcm9pZDogYW5kcm9pZCwKICAgICAgbXNpZSA6IG1zaWUsCiAgICAgIG1zaWVEb2N1bWVudE1vZGU6IGRvY3VtZW50TW9kZQogICAgfTsKICB9XTsKfQoKZnVuY3Rpb24gJFRpbWVvdXRQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJHEnLCAnJCRxJywgJyRleGNlcHRpb25IYW5kbGVyJywKICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHEsICAgJCRxLCAgICRleGNlcHRpb25IYW5kbGVyKSB7CiAgICB2YXIgZGVmZXJyZWRzID0ge307CgoKICAgICAvKioKICAgICAgKiBAbmdkb2Mgc2VydmljZQogICAgICAqIEBuYW1lICR0aW1lb3V0CiAgICAgICoKICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgKiBBbmd1bGFyJ3Mgd3JhcHBlciBmb3IgYHdpbmRvdy5zZXRUaW1lb3V0YC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgd3JhcHBlZCBpbnRvIGEgdHJ5L2NhdGNoCiAgICAgICogYmxvY2sgYW5kIGRlbGVnYXRlcyBhbnkgZXhjZXB0aW9ucyB0bwogICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgKgogICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYSB0aW1lb3V0IGZ1bmN0aW9uIGlzIGEgcHJvbWlzZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB3aGVuCiAgICAgICogdGhlIHRpbWVvdXQgaXMgcmVhY2hlZCBhbmQgdGhlIHRpbWVvdXQgZnVuY3Rpb24gaXMgZXhlY3V0ZWQuCiAgICAgICoKICAgICAgKiBUbyBjYW5jZWwgYSB0aW1lb3V0IHJlcXVlc3QsIGNhbGwgYCR0aW1lb3V0LmNhbmNlbChwcm9taXNlKWAuCiAgICAgICoKICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiR0aW1lb3V0IGAkdGltZW91dC5mbHVzaCgpYH0gdG8KICAgICAgKiBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZSBxdWV1ZSBvZiBkZWZlcnJlZCBmdW5jdGlvbnMuCiAgICAgICoKICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdob3NlIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVsYXllZC4KICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBEZWxheSBpbiBtaWxsaXNlY29uZHMuCiAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBgZmFsc2VgIHNraXBzIG1vZGVsIGRpcnR5IGNoZWNraW5nLCBvdGhlcndpc2UKICAgICAgKiAgIHdpbGwgaW52b2tlIGBmbmAgd2l0aGluIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5fSBibG9jay4KICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiB0aGUgdGltZW91dCBpcyByZWFjaGVkLiBUaGUgdmFsdWUgdGhpcwogICAgICAqICAgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGggaXMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgYGZuYCBmdW5jdGlvbi4KICAgICAgKgogICAgICAqLwogICAgZnVuY3Rpb24gdGltZW91dChmbiwgZGVsYXksIGludm9rZUFwcGx5KSB7CiAgICAgIHZhciBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLAogICAgICAgICAgZGVmZXJyZWQgPSAoc2tpcEFwcGx5ID8gJCRxIDogJHEpLmRlZmVyKCksCiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSwKICAgICAgICAgIHRpbWVvdXRJZDsKCiAgICAgIHRpbWVvdXRJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZuKCkpOwogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpOwogICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgfQogICAgICAgIGZpbmFsbHkgewogICAgICAgICAgZGVsZXRlIGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXTsKICAgICAgICB9CgogICAgICAgIGlmICghc2tpcEFwcGx5KSAkcm9vdFNjb3BlLiRhcHBseSgpOwogICAgICB9LCBkZWxheSk7CgogICAgICBwcm9taXNlLiQkdGltZW91dElkID0gdGltZW91dElkOwogICAgICBkZWZlcnJlZHNbdGltZW91dElkXSA9IGRlZmVycmVkOwoKICAgICAgcmV0dXJuIHByb21pc2U7CiAgICB9CgoKICAgICAvKioKICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICogQG5hbWUgJHRpbWVvdXQjY2FuY2VsCiAgICAgICoKICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgKiBDYW5jZWxzIGEgdGFzayBhc3NvY2lhdGVkIHdpdGggdGhlIGBwcm9taXNlYC4gQXMgYSByZXN1bHQgb2YgdGhpcywgdGhlIHByb21pc2Ugd2lsbCBiZQogICAgICAqIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uCiAgICAgICoKICAgICAgKiBAcGFyYW0ge1Byb21pc2U9fSBwcm9taXNlIFByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkdGltZW91dGAgZnVuY3Rpb24uCiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHkKICAgICAgKiAgIGNhbmNlbGVkLgogICAgICAqLwogICAgdGltZW91dC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7CiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7CiAgICAgICAgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdLnJlamVjdCgnY2FuY2VsZWQnKTsKICAgICAgICBkZWxldGUgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdOwogICAgICAgIHJldHVybiAkYnJvd3Nlci5kZWZlci5jYW5jZWwocHJvbWlzZS4kJHRpbWVvdXRJZCk7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKCiAgICByZXR1cm4gdGltZW91dDsKICB9XTsKfQoKLy8gTk9URTogIFRoZSB1c2FnZSBvZiB3aW5kb3cgYW5kIGRvY3VtZW50IGluc3RlYWQgb2YgJHdpbmRvdyBhbmQgJGRvY3VtZW50IGhlcmUgaXMKLy8gZGVsaWJlcmF0ZS4gIFRoaXMgc2VydmljZSBkZXBlbmRzIG9uIHRoZSBzcGVjaWZpYyBiZWhhdmlvciBvZiBhbmNob3Igbm9kZXMgY3JlYXRlZCBieSB0aGUKLy8gYnJvd3NlciAocmVzb2x2aW5nIGFuZCBwYXJzaW5nIFVSTHMpIHRoYXQgaXMgdW5saWtlbHkgdG8gYmUgcHJvdmlkZWQgYnkgbW9jayBvYmplY3RzIGFuZAovLyBjYXVzZSB1cyB0byBicmVhayB0ZXN0cy4gIEluIGFkZGl0aW9uLCB3aGVuIHRoZSBicm93c2VyIHJlc29sdmVzIGEgVVJMIGZvciBYSFIsIGl0Ci8vIGRvZXNuJ3Qga25vdyBhYm91dCBtb2NrZWQgbG9jYXRpb25zIGFuZCByZXNvbHZlcyBVUkxzIHRvIHRoZSByZWFsIGRvY3VtZW50IC0gd2hpY2ggaXMKLy8gZXhhY3RseSB0aGUgYmVoYXZpb3IgbmVlZGVkIGhlcmUuICBUaGVyZSBpcyBsaXR0bGUgdmFsdWUgaXMgbW9ja2luZyB0aGVzZSBvdXQgZm9yIHRoaXMKLy8gc2VydmljZS4KdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwp2YXIgb3JpZ2luVXJsID0gdXJsUmVzb2x2ZSh3aW5kb3cubG9jYXRpb24uaHJlZiwgdHJ1ZSk7CgoKLyoqCiAqCiAqIEltcGxlbWVudGF0aW9uIE5vdGVzIGZvciBub24tSUUgYnJvd3NlcnMKICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogKiBBc3NpZ25pbmcgYSBVUkwgdG8gdGhlIGhyZWYgcHJvcGVydHkgb2YgYW4gYW5jaG9yIERPTSBub2RlLCBldmVuIG9uZSBhdHRhY2hlZCB0byB0aGUgRE9NLAogKiByZXN1bHRzIGJvdGggaW4gdGhlIG5vcm1hbGl6aW5nIGFuZCBwYXJzaW5nIG9mIHRoZSBVUkwuICBOb3JtYWxpemluZyBtZWFucyB0aGF0IGEgcmVsYXRpdmUKICogVVJMIHdpbGwgYmUgcmVzb2x2ZWQgaW50byBhbiBhYnNvbHV0ZSBVUkwgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LgogKiBQYXJzaW5nIG1lYW5zIHRoYXQgdGhlIGFuY2hvciBub2RlJ3MgaG9zdCwgaG9zdG5hbWUsIHByb3RvY29sLCBwb3J0LCBwYXRobmFtZSBhbmQgcmVsYXRlZAogKiBwcm9wZXJ0aWVzIGFyZSBhbGwgcG9wdWxhdGVkIHRvIHJlZmxlY3QgdGhlIG5vcm1hbGl6ZWQgVVJMLiAgVGhpcyBhcHByb2FjaCBoYXMgd2lkZQogKiBjb21wYXRpYmlsaXR5IC0gU2FmYXJpIDErLCBNb3ppbGxhIDErLCBPcGVyYSA3KyxlIGV0Yy4gIFNlZQogKiBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWwKICoKICogSW1wbGVtZW50YXRpb24gTm90ZXMgZm9yIElFCiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogKiBJRSA+PSA4IGFuZCA8PSAxMCBub3JtYWxpemVzIHRoZSBVUkwgd2hlbiBhc3NpZ25lZCB0byB0aGUgYW5jaG9yIG5vZGUgc2ltaWxhciB0byB0aGUgb3RoZXIKICogYnJvd3NlcnMuICBIb3dldmVyLCB0aGUgcGFyc2VkIGNvbXBvbmVudHMgd2lsbCBub3QgYmUgc2V0IGlmIHRoZSBVUkwgYXNzaWduZWQgZGlkIG5vdCBzcGVjaWZ5CiAqIHRoZW0uICAoZS5nLiBpZiB5b3UgYXNzaWduIGEuaHJlZiA9ICJmb28iLCB0aGVuIGEucHJvdG9jb2wsIGEuaG9zdCwgZXRjLiB3aWxsIGJlIGVtcHR5LikgIFdlCiAqIHdvcmsgYXJvdW5kIHRoYXQgYnkgcGVyZm9ybWluZyB0aGUgcGFyc2luZyBpbiBhIDJuZCBzdGVwIGJ5IHRha2luZyBhIHByZXZpb3VzbHkgbm9ybWFsaXplZAogKiBVUkwgKGUuZy4gYnkgYXNzaWduaW5nIHRvIGEuaHJlZikgYW5kIGFzc2lnbmluZyBpdCBhLmhyZWYgYWdhaW4uICBUaGlzIGNvcnJlY3RseSBwb3B1bGF0ZXMgdGhlCiAqIHByb3BlcnRpZXMgc3VjaCBhcyBwcm90b2NvbCwgaG9zdG5hbWUsIHBvcnQsIGV0Yy4KICoKICogSUU3IGRvZXMgbm90IG5vcm1hbGl6ZSB0aGUgVVJMIHdoZW4gYXNzaWduZWQgdG8gYW4gYW5jaG9yIG5vZGUuICAoQXBwYXJlbnRseSwgaXQgZG9lcywgaWYgb25lCiAqIHVzZXMgdGhlIGlubmVyIEhUTUwgYXBwcm9hY2ggdG8gYXNzaWduIHRoZSBVUkwgYXMgcGFydCBvZiBhbiBIVE1MIHNuaXBwZXQgLQogKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NzI3MjkpICBIb3dldmVyLCBzZXR0aW5nIGltZ1tzcmNdIGRvZXMgbm9ybWFsaXplIHRoZSBVUkwuCiAqIFVuZm9ydHVuYXRlbHksIHNldHRpbmcgaW1nW3NyY10gdG8gc29tZXRoaW5nIGxpa2UgImphdmFzY3JpcHQ6Zm9vIiBvbiBJRSB0aHJvd3MgYW4gZXhjZXB0aW9uLgogKiBTaW5jZSB0aGUgcHJpbWFyeSB1c2FnZSBmb3Igbm9ybWFsaXppbmcgVVJMcyBpcyB0byBzYW5pdGl6ZSBzdWNoIFVSTHMsIHdlIGNhbid0IHVzZSB0aGF0CiAqIG1ldGhvZCBhbmQgSUUgPCA4IGlzIHVuc3VwcG9ydGVkLgogKgogKiBSZWZlcmVuY2VzOgogKiAgIGh0dHA6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxBbmNob3JFbGVtZW50CiAqICAgaHR0cDovL3d3dy5hcHRhbmEuY29tL3JlZmVyZW5jZS9odG1sL2FwaS9IVE1MQW5jaG9yRWxlbWVudC5odG1sCiAqICAgaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzCiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzI5MDIKICogICBodHRwOi8vamFtZXMucGFkb2xzZXkuY29tL2phdmFzY3JpcHQvcGFyc2luZy11cmxzLXdpdGgtdGhlLWRvbS8KICoKICogQGtpbmQgZnVuY3Rpb24KICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZC4KICogQGRlc2NyaXB0aW9uIE5vcm1hbGl6ZXMgYW5kIHBhcnNlcyBhIFVSTC4KICogQHJldHVybnMge29iamVjdH0gUmV0dXJucyB0aGUgbm9ybWFsaXplZCBVUkwgYXMgYSBkaWN0aW9uYXJ5LgogKgogKiAgIHwgbWVtYmVyIG5hbWUgICB8IERlc2NyaXB0aW9uICAgIHwKICogICB8LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18CiAqICAgfCBocmVmICAgICAgICAgIHwgQSBub3JtYWxpemVkIHZlcnNpb24gb2YgdGhlIHByb3ZpZGVkIFVSTCBpZiBpdCB3YXMgbm90IGFuIGFic29sdXRlIFVSTCB8CiAqICAgfCBwcm90b2NvbCAgICAgIHwgVGhlIHByb3RvY29sIGluY2x1ZGluZyB0aGUgdHJhaWxpbmcgY29sb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAqICAgfCBob3N0ICAgICAgICAgIHwgVGhlIGhvc3QgYW5kIHBvcnQgKGlmIHRoZSBwb3J0IGlzIG5vbi1kZWZhdWx0KSBvZiB0aGUgbm9ybWFsaXplZFVybCAgICB8CiAqICAgfCBzZWFyY2ggICAgICAgIHwgVGhlIHNlYXJjaCBwYXJhbXMsIG1pbnVzIHRoZSBxdWVzdGlvbiBtYXJrICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAqICAgfCBoYXNoICAgICAgICAgIHwgVGhlIGhhc2ggc3RyaW5nLCBtaW51cyB0aGUgaGFzaCBzeW1ib2wKICogICB8IGhvc3RuYW1lICAgICAgfCBUaGUgaG9zdG5hbWUKICogICB8IHBvcnQgICAgICAgICAgfCBUaGUgcG9ydCwgd2l0aG91dCAiOiIKICogICB8IHBhdGhuYW1lICAgICAgfCBUaGUgcGF0aG5hbWUsIGJlZ2lubmluZyB3aXRoICIvIgogKgogKi8KZnVuY3Rpb24gdXJsUmVzb2x2ZSh1cmwsIGJhc2UpIHsKICB2YXIgaHJlZiA9IHVybDsKCiAgaWYgKG1zaWUpIHsKICAgIC8vIE5vcm1hbGl6ZSBiZWZvcmUgcGFyc2UuICBSZWZlciBJbXBsZW1lbnRhdGlvbiBOb3RlcyBvbiB3aHkgdGhpcyBpcwogICAgLy8gZG9uZSBpbiB0d28gc3RlcHMgb24gSUUuCiAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoImhyZWYiLCBocmVmKTsKICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmOwogIH0KCiAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7CgogIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHMKICByZXR1cm4gewogICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZiwKICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsCiAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LAogICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlw/LywgJycpIDogJycsCiAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLAogICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLAogICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCwKICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpCiAgICAgID8gdXJsUGFyc2luZ05vZGUucGF0aG5hbWUKICAgICAgOiAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZQogIH07Cn0KCi8qKgogKiBQYXJzZSBhIHJlcXVlc3QgVVJMIGFuZCBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgc2FtZS1vcmlnaW4gcmVxdWVzdCBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVxdWVzdFVybCBUaGUgdXJsIG9mIHRoZSByZXF1ZXN0IGFzIGEgc3RyaW5nIHRoYXQgd2lsbCBiZSByZXNvbHZlZAogKiBvciBhIHBhcnNlZCBVUkwgb2JqZWN0LgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVxdWVzdCBpcyBmb3IgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC4KICovCmZ1bmN0aW9uIHVybElzU2FtZU9yaWdpbihyZXF1ZXN0VXJsKSB7CiAgdmFyIHBhcnNlZCA9IChpc1N0cmluZyhyZXF1ZXN0VXJsKSkgPyB1cmxSZXNvbHZlKHJlcXVlc3RVcmwpIDogcmVxdWVzdFVybDsKICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVXJsLnByb3RvY29sICYmCiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVXJsLmhvc3QpOwp9CgovKioKICogQG5nZG9jIHNlcnZpY2UKICogQG5hbWUgJHdpbmRvdwogKgogKiBAZGVzY3JpcHRpb24KICogQSByZWZlcmVuY2UgdG8gdGhlIGJyb3dzZXIncyBgd2luZG93YCBvYmplY3QuIFdoaWxlIGB3aW5kb3dgCiAqIGlzIGdsb2JhbGx5IGF2YWlsYWJsZSBpbiBKYXZhU2NyaXB0LCBpdCBjYXVzZXMgdGVzdGFiaWxpdHkgcHJvYmxlbXMsIGJlY2F1c2UKICogaXQgaXMgYSBnbG9iYWwgdmFyaWFibGUuIEluIGFuZ3VsYXIgd2UgYWx3YXlzIHJlZmVyIHRvIGl0IHRocm91Z2ggdGhlCiAqIGAkd2luZG93YCBzZXJ2aWNlLCBzbyBpdCBtYXkgYmUgb3ZlcnJpZGRlbiwgcmVtb3ZlZCBvciBtb2NrZWQgZm9yIHRlc3RpbmcuCiAqCiAqIEV4cHJlc3Npb25zLCBsaWtlIHRoZSBvbmUgZGVmaW5lZCBmb3IgdGhlIGBuZ0NsaWNrYCBkaXJlY3RpdmUgaW4gdGhlIGV4YW1wbGUKICogYmVsb3csIGFyZSBldmFsdWF0ZWQgd2l0aCByZXNwZWN0IHRvIHRoZSBjdXJyZW50IHNjb3BlLiAgVGhlcmVmb3JlLCB0aGVyZSBpcwogKiBubyByaXNrIG9mIGluYWR2ZXJ0ZW50bHkgY29kaW5nIGluIGEgZGVwZW5kZW5jeSBvbiBhIGdsb2JhbCB2YWx1ZSBpbiBzdWNoIGFuCiAqIGV4cHJlc3Npb24uCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlIG1vZHVsZT0id2luZG93RXhhbXBsZSI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBhbmd1bGFyLm1vZHVsZSgnd2luZG93RXhhbXBsZScsIFtdKQogICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyR3aW5kb3cnLCBmdW5jdGlvbiAoJHNjb3BlLCAkd2luZG93KSB7CiAgICAgICAgICAgICAkc2NvcGUuZ3JlZXRpbmcgPSAnSGVsbG8sIFdvcmxkISc7CiAgICAgICAgICAgICAkc2NvcGUuZG9HcmVldGluZyA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7CiAgICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZ3JlZXRpbmcpOwogICAgICAgICAgICAgfTsKICAgICAgICAgICB9XSk7CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9ImdyZWV0aW5nIiAvPgogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSJkb0dyZWV0aW5nKGdyZWV0aW5nKSI+QUxFUlQ8L2J1dHRvbj4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBncmVldGluZyBpbiB0aGUgaW5wdXQgYm94JywgZnVuY3Rpb24oKSB7CiAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdncmVldGluZycpKS5zZW5kS2V5cygnSGVsbG8sIEUyRSBUZXN0cycpOwogICAgICAgLy8gSWYgd2UgY2xpY2sgdGhlIGJ1dHRvbiBpdCB3aWxsIGJsb2NrIHRoZSB0ZXN0IHJ1bm5lcgogICAgICAgLy8gZWxlbWVudCgnOmJ1dHRvbicpLmNsaWNrKCk7CiAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KZnVuY3Rpb24gJFdpbmRvd1Byb3ZpZGVyKCl7CiAgdGhpcy4kZ2V0ID0gdmFsdWVGbih3aW5kb3cpOwp9CgovKiBnbG9iYWwgY3VycmVuY3lGaWx0ZXI6IHRydWUsCiBkYXRlRmlsdGVyOiB0cnVlLAogZmlsdGVyRmlsdGVyOiB0cnVlLAoganNvbkZpbHRlcjogdHJ1ZSwKIGxpbWl0VG9GaWx0ZXI6IHRydWUsCiBsb3dlcmNhc2VGaWx0ZXI6IHRydWUsCiBudW1iZXJGaWx0ZXI6IHRydWUsCiBvcmRlckJ5RmlsdGVyOiB0cnVlLAogdXBwZXJjYXNlRmlsdGVyOiB0cnVlLAogKi8KCi8qKgogKiBAbmdkb2MgcHJvdmlkZXIKICogQG5hbWUgJGZpbHRlclByb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKgogKiBGaWx0ZXJzIGFyZSBqdXN0IGZ1bmN0aW9ucyB3aGljaCB0cmFuc2Zvcm0gaW5wdXQgdG8gYW4gb3V0cHV0LiBIb3dldmVyIGZpbHRlcnMgbmVlZCB0byBiZQogKiBEZXBlbmRlbmN5IEluamVjdGVkLiBUbyBhY2hpZXZlIHRoaXMgYSBmaWx0ZXIgZGVmaW5pdGlvbiBjb25zaXN0cyBvZiBhIGZhY3RvcnkgZnVuY3Rpb24gd2hpY2ggaXMKICogYW5ub3RhdGVkIHdpdGggZGVwZW5kZW5jaWVzIGFuZCBpcyByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgYSBmaWx0ZXIgZnVuY3Rpb24uCiAqCiAqIGBgYGpzCiAqICAgLy8gRmlsdGVyIHJlZ2lzdHJhdGlvbgogKiAgIGZ1bmN0aW9uIE15TW9kdWxlKCRwcm92aWRlLCAkZmlsdGVyUHJvdmlkZXIpIHsKICogICAgIC8vIGNyZWF0ZSBhIHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgaW5qZWN0aW9uIChub3QgYWx3YXlzIG5lZWRlZCkKICogICAgICRwcm92aWRlLnZhbHVlKCdncmVldCcsIGZ1bmN0aW9uKG5hbWUpewogKiAgICAgICByZXR1cm4gJ0hlbGxvICcgKyBuYW1lICsgJyEnOwogKiAgICAgfSk7CiAqCiAqICAgICAvLyByZWdpc3RlciBhIGZpbHRlciBmYWN0b3J5IHdoaWNoIHVzZXMgdGhlCiAqICAgICAvLyBncmVldCBzZXJ2aWNlIHRvIGRlbW9uc3RyYXRlIERJLgogKiAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdncmVldCcsIGZ1bmN0aW9uKGdyZWV0KXsKICogICAgICAgLy8gcmV0dXJuIHRoZSBmaWx0ZXIgZnVuY3Rpb24gd2hpY2ggdXNlcyB0aGUgZ3JlZXQgc2VydmljZQogKiAgICAgICAvLyB0byBnZW5lcmF0ZSBzYWx1dGF0aW9uCiAqICAgICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7CiAqICAgICAgICAgLy8gZmlsdGVycyBuZWVkIHRvIGJlIGZvcmdpdmluZyBzbyBjaGVjayBpbnB1dCB2YWxpZGl0eQogKiAgICAgICAgIHJldHVybiB0ZXh0ICYmIGdyZWV0KHRleHQpIHx8IHRleHQ7CiAqICAgICAgIH07CiAqICAgICB9KTsKICogICB9CiAqIGBgYAogKgogKiBUaGUgZmlsdGVyIGZ1bmN0aW9uIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYCRpbmplY3RvcmAgdW5kZXIgdGhlIGZpbHRlciBuYW1lIHN1ZmZpeCB3aXRoCiAqIGBGaWx0ZXJgLgogKgogKiBgYGBqcwogKiAgIGl0KCdzaG91bGQgYmUgdGhlIHNhbWUgaW5zdGFuY2UnLCBpbmplY3QoCiAqICAgICBmdW5jdGlvbigkZmlsdGVyUHJvdmlkZXIpIHsKICogICAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdyZXZlcnNlJywgZnVuY3Rpb24oKXsKICogICAgICAgICByZXR1cm4gLi4uOwogKiAgICAgICB9KTsKICogICAgIH0sCiAqICAgICBmdW5jdGlvbigkZmlsdGVyLCByZXZlcnNlRmlsdGVyKSB7CiAqICAgICAgIGV4cGVjdCgkZmlsdGVyKCdyZXZlcnNlJykpLnRvQmUocmV2ZXJzZUZpbHRlcik7CiAqICAgICB9KTsKICogYGBgCiAqCiAqCiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGhvdyBhbmd1bGFyIGZpbHRlcnMgd29yaywgYW5kIGhvdyB0byBjcmVhdGUgeW91ciBvd24gZmlsdGVycywgc2VlCiAqIHtAbGluayBndWlkZS9maWx0ZXIgRmlsdGVyc30gaW4gdGhlIEFuZ3VsYXIgRGV2ZWxvcGVyIEd1aWRlLgogKi8KLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyCiAqIEBkZXNjcmlwdGlvbgogKiBSZWdpc3RlciBmaWx0ZXIgZmFjdG9yeSBmdW5jdGlvbi4KICoKICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZmlsdGVyIGZhY3RvcnkgZnVuY3Rpb24gd2hpY2ggaXMgaW5qZWN0YWJsZS4KICovCgoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lICRmaWx0ZXIKICogQGtpbmQgZnVuY3Rpb24KICogQGRlc2NyaXB0aW9uCiAqIEZpbHRlcnMgYXJlIHVzZWQgZm9yIGZvcm1hdHRpbmcgZGF0YSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIuCiAqCiAqIFRoZSBnZW5lcmFsIHN5bnRheCBpbiB0ZW1wbGF0ZXMgaXMgYXMgZm9sbG93czoKICoKICogICAgICAgICB7eyBleHByZXNzaW9uIFt8IGZpbHRlcl9uYW1lWzpwYXJhbWV0ZXJfdmFsdWVdIC4uLiBdIH19CiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiB0byByZXRyaWV2ZQogKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGZpbHRlciBmdW5jdGlvbgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBuYW1lPSIkZmlsdGVyIiBtb2R1bGU9ImZpbHRlckV4YW1wbGUiPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJNYWluQ3RybCI+CiAgICAgICAgPGgzPnt7IG9yaWdpbmFsVGV4dCB9fTwvaDM+CiAgICAgICAgPGgzPnt7IGZpbHRlcmVkVGV4dCB9fTwvaDM+CiAgICAgICA8L2Rpdj4KICAgICA8L2ZpbGU+CgogICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgIGFuZ3VsYXIubW9kdWxlKCdmaWx0ZXJFeGFtcGxlJywgW10pCiAgICAgIC5jb250cm9sbGVyKCdNYWluQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGZpbHRlcikgewogICAgICAgICRzY29wZS5vcmlnaW5hbFRleHQgPSAnaGVsbG8nOwogICAgICAgICRzY29wZS5maWx0ZXJlZFRleHQgPSAkZmlsdGVyKCd1cHBlcmNhc2UnKSgkc2NvcGUub3JpZ2luYWxUZXh0KTsKICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAgKi8KJEZpbHRlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJ107CmZ1bmN0aW9uICRGaWx0ZXJQcm92aWRlcigkcHJvdmlkZSkgewogIHZhciBzdWZmaXggPSAnRmlsdGVyJzsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIKICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyIGZ1bmN0aW9uLCBvciBhbiBvYmplY3QgbWFwIG9mIGZpbHRlcnMgd2hlcmUKICAgKiAgICB0aGUga2V5cyBhcmUgdGhlIGZpbHRlciBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZpbHRlciBmYWN0b3JpZXMuCiAgICogQHJldHVybnMge09iamVjdH0gUmVnaXN0ZXJlZCBmaWx0ZXIgaW5zdGFuY2UsIG9yIGlmIGEgbWFwIG9mIGZpbHRlcnMgd2FzIHByb3ZpZGVkIHRoZW4gYSBtYXAKICAgKiAgICBvZiB0aGUgcmVnaXN0ZXJlZCBmaWx0ZXIgaW5zdGFuY2VzLgogICAqLwogIGZ1bmN0aW9uIHJlZ2lzdGVyKG5hbWUsIGZhY3RvcnkpIHsKICAgIGlmKGlzT2JqZWN0KG5hbWUpKSB7CiAgICAgIHZhciBmaWx0ZXJzID0ge307CiAgICAgIGZvckVhY2gobmFtZSwgZnVuY3Rpb24oZmlsdGVyLCBrZXkpIHsKICAgICAgICBmaWx0ZXJzW2tleV0gPSByZWdpc3RlcihrZXksIGZpbHRlcik7CiAgICAgIH0pOwogICAgICByZXR1cm4gZmlsdGVyczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBzdWZmaXgsIGZhY3RvcnkpOwogICAgfQogIH0KICB0aGlzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7CgogIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7CiAgICByZXR1cm4gZnVuY3Rpb24obmFtZSkgewogICAgICByZXR1cm4gJGluamVjdG9yLmdldChuYW1lICsgc3VmZml4KTsKICAgIH07CiAgfV07CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgLyogZ2xvYmFsCiAgICBjdXJyZW5jeUZpbHRlcjogZmFsc2UsCiAgICBkYXRlRmlsdGVyOiBmYWxzZSwKICAgIGZpbHRlckZpbHRlcjogZmFsc2UsCiAgICBqc29uRmlsdGVyOiBmYWxzZSwKICAgIGxpbWl0VG9GaWx0ZXI6IGZhbHNlLAogICAgbG93ZXJjYXNlRmlsdGVyOiBmYWxzZSwKICAgIG51bWJlckZpbHRlcjogZmFsc2UsCiAgICBvcmRlckJ5RmlsdGVyOiBmYWxzZSwKICAgIHVwcGVyY2FzZUZpbHRlcjogZmFsc2UsCiAgKi8KCiAgcmVnaXN0ZXIoJ2N1cnJlbmN5JywgY3VycmVuY3lGaWx0ZXIpOwogIHJlZ2lzdGVyKCdkYXRlJywgZGF0ZUZpbHRlcik7CiAgcmVnaXN0ZXIoJ2ZpbHRlcicsIGZpbHRlckZpbHRlcik7CiAgcmVnaXN0ZXIoJ2pzb24nLCBqc29uRmlsdGVyKTsKICByZWdpc3RlcignbGltaXRUbycsIGxpbWl0VG9GaWx0ZXIpOwogIHJlZ2lzdGVyKCdsb3dlcmNhc2UnLCBsb3dlcmNhc2VGaWx0ZXIpOwogIHJlZ2lzdGVyKCdudW1iZXInLCBudW1iZXJGaWx0ZXIpOwogIHJlZ2lzdGVyKCdvcmRlckJ5Jywgb3JkZXJCeUZpbHRlcik7CiAgcmVnaXN0ZXIoJ3VwcGVyY2FzZScsIHVwcGVyY2FzZUZpbHRlcik7Cn0KCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIGZpbHRlcgogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogU2VsZWN0cyBhIHN1YnNldCBvZiBpdGVtcyBmcm9tIGBhcnJheWAgYW5kIHJldHVybnMgaXQgYXMgYSBuZXcgYXJyYXkuCiAqCiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3VyY2UgYXJyYXkuCiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdHxmdW5jdGlvbigpfSBleHByZXNzaW9uIFRoZSBwcmVkaWNhdGUgdG8gYmUgdXNlZCBmb3Igc2VsZWN0aW5nIGl0ZW1zIGZyb20KICogICBgYXJyYXlgLgogKgogKiAgIENhbiBiZSBvbmUgb2Y6CiAqCiAqICAgLSBgc3RyaW5nYDogVGhlIHN0cmluZyBpcyBldmFsdWF0ZWQgYXMgYW4gZXhwcmVzc2lvbiBhbmQgdGhlIHJlc3VsdGluZyB2YWx1ZSBpcyB1c2VkIGZvciBzdWJzdHJpbmcgbWF0Y2ggYWdhaW5zdAogKiAgICAgdGhlIGNvbnRlbnRzIG9mIHRoZSBgYXJyYXlgLiBBbGwgc3RyaW5ncyBvciBvYmplY3RzIHdpdGggc3RyaW5nIHByb3BlcnRpZXMgaW4gYGFycmF5YCB0aGF0IGNvbnRhaW4gdGhpcyBzdHJpbmcKICogICAgIHdpbGwgYmUgcmV0dXJuZWQuIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nIHRoZSBzdHJpbmcgd2l0aCBgIWAuCiAqCiAqICAgLSBgT2JqZWN0YDogQSBwYXR0ZXJuIG9iamVjdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgc3BlY2lmaWMgcHJvcGVydGllcyBvbiBvYmplY3RzIGNvbnRhaW5lZAogKiAgICAgYnkgYGFycmF5YC4gRm9yIGV4YW1wbGUgYHtuYW1lOiJNIiwgcGhvbmU6IjEifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zCiAqICAgICB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYCBjb250YWluaW5nICJNIiBhbmQgcHJvcGVydHkgYHBob25lYCBjb250YWluaW5nICIxIi4gQSBzcGVjaWFsCiAqICAgICBwcm9wZXJ0eSBuYW1lIGAkYCBjYW4gYmUgdXNlZCAoYXMgaW4gYHskOiJ0ZXh0In1gKSB0byBhY2NlcHQgYSBtYXRjaCBhZ2FpbnN0IGFueQogKiAgICAgcHJvcGVydHkgb2YgdGhlIG9iamVjdC4gVGhhdCdzIGVxdWl2YWxlbnQgdG8gdGhlIHNpbXBsZSBzdWJzdHJpbmcgbWF0Y2ggd2l0aCBhIGBzdHJpbmdgCiAqICAgICBhcyBkZXNjcmliZWQgYWJvdmUuCiAqCiAqICAgLSBgZnVuY3Rpb24odmFsdWUpYDogQSBwcmVkaWNhdGUgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gd3JpdGUgYXJiaXRyYXJ5IGZpbHRlcnMuIFRoZSBmdW5jdGlvbiBpcwogKiAgICAgY2FsbGVkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YC4gVGhlIGZpbmFsIHJlc3VsdCBpcyBhbiBhcnJheSBvZiB0aG9zZSBlbGVtZW50cyB0aGF0CiAqICAgICB0aGUgcHJlZGljYXRlIHJldHVybmVkIHRydWUgZm9yLgogKgogKiBAcGFyYW0ge2Z1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpfHRydWV8dW5kZWZpbmVkfSBjb21wYXJhdG9yIENvbXBhcmF0b3Igd2hpY2ggaXMgdXNlZCBpbgogKiAgICAgZGV0ZXJtaW5pbmcgaWYgdGhlIGV4cGVjdGVkIHZhbHVlIChmcm9tIHRoZSBmaWx0ZXIgZXhwcmVzc2lvbikgYW5kIGFjdHVhbCB2YWx1ZSAoZnJvbQogKiAgICAgdGhlIG9iamVjdCBpbiB0aGUgYXJyYXkpIHNob3VsZCBiZSBjb25zaWRlcmVkIGEgbWF0Y2guCiAqCiAqICAgQ2FuIGJlIG9uZSBvZjoKICoKICogICAtIGBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKWA6CiAqICAgICBUaGUgZnVuY3Rpb24gd2lsbCBiZSBnaXZlbiB0aGUgb2JqZWN0IHZhbHVlIGFuZCB0aGUgcHJlZGljYXRlIHZhbHVlIHRvIGNvbXBhcmUgYW5kCiAqICAgICBzaG91bGQgcmV0dXJuIHRydWUgaWYgdGhlIGl0ZW0gc2hvdWxkIGJlIGluY2x1ZGVkIGluIGZpbHRlcmVkIHJlc3VsdC4KICoKICogICAtIGB0cnVlYDogQSBzaG9ydGhhbmQgZm9yIGBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7IHJldHVybiBhbmd1bGFyLmVxdWFscyhleHBlY3RlZCwgYWN0dWFsKX1gLgogKiAgICAgdGhpcyBpcyBlc3NlbnRpYWxseSBzdHJpY3QgY29tcGFyaXNvbiBvZiBleHBlY3RlZCBhbmQgYWN0dWFsLgogKgogKiAgIC0gYGZhbHNlfHVuZGVmaW5lZGA6IEEgc2hvcnQgaGFuZCBmb3IgYSBmdW5jdGlvbiB3aGljaCB3aWxsIGxvb2sgZm9yIGEgc3Vic3RyaW5nIG1hdGNoIGluIGNhc2UKICogICAgIGluc2Vuc2l0aXZlIHdheS4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8ZGl2IG5nLWluaXQ9ImZyaWVuZHMgPSBbe25hbWU6J0pvaG4nLCBwaG9uZTonNTU1LTEyNzYnfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic4MDAtQklHLU1BUlknfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMSd9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4J30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGllJywgcGhvbmU6JzU1NS04NzY1J30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGlldHRlJywgcGhvbmU6JzU1NS01Njc4J31dIj48L2Rpdj4KCiAgICAgICBTZWFyY2g6IDxpbnB1dCBuZy1tb2RlbD0ic2VhcmNoVGV4dCI+CiAgICAgICA8dGFibGUgaWQ9InNlYXJjaFRleHRSZXN1bHRzIj4KICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+CiAgICAgICAgIDx0ciBuZy1yZXBlYXQ9ImZyaWVuZCBpbiBmcmllbmRzIHwgZmlsdGVyOnNlYXJjaFRleHQiPgogICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPgogICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD4KICAgICAgICAgPC90cj4KICAgICAgIDwvdGFibGU+CiAgICAgICA8aHI+CiAgICAgICBBbnk6IDxpbnB1dCBuZy1tb2RlbD0ic2VhcmNoLiQiPiA8YnI+CiAgICAgICBOYW1lIG9ubHkgPGlucHV0IG5nLW1vZGVsPSJzZWFyY2gubmFtZSI+PGJyPgogICAgICAgUGhvbmUgb25seSA8aW5wdXQgbmctbW9kZWw9InNlYXJjaC5waG9uZSI+PGJyPgogICAgICAgRXF1YWxpdHkgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0ic3RyaWN0Ij48YnI+CiAgICAgICA8dGFibGUgaWQ9InNlYXJjaE9ialJlc3VsdHMiPgogICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PC90cj4KICAgICAgICAgPHRyIG5nLXJlcGVhdD0iZnJpZW5kT2JqIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoOnN0cmljdCI+CiAgICAgICAgICAgPHRkPnt7ZnJpZW5kT2JqLm5hbWV9fTwvdGQ+CiAgICAgICAgICAgPHRkPnt7ZnJpZW5kT2JqLnBob25lfX08L3RkPgogICAgICAgICA8L3RyPgogICAgICAgPC90YWJsZT4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICB2YXIgZXhwZWN0RnJpZW5kTmFtZXMgPSBmdW5jdGlvbihleHBlY3RlZE5hbWVzLCBrZXkpIHsKICAgICAgICAgZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoa2V5ICsgJyBpbiBmcmllbmRzJykuY29sdW1uKGtleSArICcubmFtZScpKS50aGVuKGZ1bmN0aW9uKGFycikgewogICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKHdkLCBpKSB7CiAgICAgICAgICAgICBleHBlY3Qod2QuZ2V0VGV4dCgpKS50b01hdGNoKGV4cGVjdGVkTmFtZXNbaV0pOwogICAgICAgICAgIH0pOwogICAgICAgICB9KTsKICAgICAgIH07CgogICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggYWNyb3NzIGFsbCBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHN0cmluZycsIGZ1bmN0aW9uKCkgewogICAgICAgICB2YXIgc2VhcmNoVGV4dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaFRleHQnKSk7CiAgICAgICAgIHNlYXJjaFRleHQuY2xlYXIoKTsKICAgICAgICAgc2VhcmNoVGV4dC5zZW5kS2V5cygnbScpOwogICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdBZGFtJ10sICdmcmllbmQnKTsKCiAgICAgICAgIHNlYXJjaFRleHQuY2xlYXIoKTsKICAgICAgICAgc2VhcmNoVGV4dC5zZW5kS2V5cygnNzYnKTsKICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydKb2huJywgJ0p1bGllJ10sICdmcmllbmQnKTsKICAgICAgIH0pOwoKICAgICAgIGl0KCdzaG91bGQgc2VhcmNoIGluIHNwZWNpZmljIGZpZWxkcyB3aGVuIGZpbHRlcmluZyB3aXRoIGEgcHJlZGljYXRlIG9iamVjdCcsIGZ1bmN0aW9uKCkgewogICAgICAgICB2YXIgc2VhcmNoQW55ID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoLiQnKSk7CiAgICAgICAgIHNlYXJjaEFueS5jbGVhcigpOwogICAgICAgICBzZWFyY2hBbnkuc2VuZEtleXMoJ2knKTsKICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydNYXJ5JywgJ01pa2UnLCAnSnVsaWUnLCAnSnVsaWV0dGUnXSwgJ2ZyaWVuZE9iaicpOwogICAgICAgfSk7CiAgICAgICBpdCgnc2hvdWxkIHVzZSBhIGVxdWFsIGNvbXBhcmlzb24gd2hlbiBjb21wYXJhdG9yIGlzIHRydWUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgdmFyIHNlYXJjaE5hbWUgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2gubmFtZScpKTsKICAgICAgICAgdmFyIHN0cmljdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3N0cmljdCcpKTsKICAgICAgICAgc2VhcmNoTmFtZS5jbGVhcigpOwogICAgICAgICBzZWFyY2hOYW1lLnNlbmRLZXlzKCdKdWxpZScpOwogICAgICAgICBzdHJpY3QuY2xpY2soKTsKICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydKdWxpZSddLCAnZnJpZW5kT2JqJyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCmZ1bmN0aW9uIGZpbHRlckZpbHRlcigpIHsKICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGV4cHJlc3Npb24sIGNvbXBhcmF0b3IpIHsKICAgIGlmICghaXNBcnJheShhcnJheSkpIHJldHVybiBhcnJheTsKCiAgICB2YXIgY29tcGFyYXRvclR5cGUgPSB0eXBlb2YoY29tcGFyYXRvciksCiAgICAgICAgcHJlZGljYXRlcyA9IFtdOwoKICAgIHByZWRpY2F0ZXMuY2hlY2sgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHByZWRpY2F0ZXMubGVuZ3RoOyBqKyspIHsKICAgICAgICBpZighcHJlZGljYXRlc1tqXSh2YWx1ZSkpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICB9OwoKICAgIGlmIChjb21wYXJhdG9yVHlwZSAhPT0gJ2Z1bmN0aW9uJykgewogICAgICBpZiAoY29tcGFyYXRvclR5cGUgPT09ICdib29sZWFuJyAmJiBjb21wYXJhdG9yKSB7CiAgICAgICAgY29tcGFyYXRvciA9IGZ1bmN0aW9uKG9iaiwgdGV4dCkgewogICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKG9iaiwgdGV4dCk7CiAgICAgICAgfTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb21wYXJhdG9yID0gZnVuY3Rpb24ob2JqLCB0ZXh0KSB7CiAgICAgICAgICBpZiAob2JqICYmIHRleHQgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRleHQgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgIGZvciAodmFyIG9iaktleSBpbiBvYmopIHsKICAgICAgICAgICAgICBpZiAob2JqS2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBvYmpLZXkpICYmCiAgICAgICAgICAgICAgICAgIGNvbXBhcmF0b3Iob2JqW29iaktleV0sIHRleHRbb2JqS2V5XSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICB0ZXh0ID0gKCcnK3RleHQpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICByZXR1cm4gKCcnK29iaikudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRleHQpID4gLTE7CiAgICAgICAgfTsKICAgICAgfQogICAgfQoKICAgIHZhciBzZWFyY2ggPSBmdW5jdGlvbihvYmosIHRleHQpewogICAgICBpZiAodHlwZW9mIHRleHQgPT0gJ3N0cmluZycgJiYgdGV4dC5jaGFyQXQoMCkgPT09ICchJykgewogICAgICAgIHJldHVybiAhc2VhcmNoKG9iaiwgdGV4dC5zdWJzdHIoMSkpOwogICAgICB9CiAgICAgIHN3aXRjaCAodHlwZW9mIG9iaikgewogICAgICAgIGNhc2UgImJvb2xlYW4iOgogICAgICAgIGNhc2UgIm51bWJlciI6CiAgICAgICAgY2FzZSAic3RyaW5nIjoKICAgICAgICAgIHJldHVybiBjb21wYXJhdG9yKG9iaiwgdGV4dCk7CiAgICAgICAgY2FzZSAib2JqZWN0IjoKICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHRleHQpIHsKICAgICAgICAgICAgY2FzZSAib2JqZWN0IjoKICAgICAgICAgICAgICByZXR1cm4gY29tcGFyYXRvcihvYmosIHRleHQpOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIGZvciAoIHZhciBvYmpLZXkgaW4gb2JqKSB7CiAgICAgICAgICAgICAgICBpZiAob2JqS2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmIHNlYXJjaChvYmpbb2JqS2V5XSwgdGV4dCkpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGNhc2UgImFycmF5IjoKICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoc2VhcmNoKG9ialtpXSwgdGV4dCkpIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH07CiAgICBzd2l0Y2ggKHR5cGVvZiBleHByZXNzaW9uKSB7CiAgICAgIGNhc2UgImJvb2xlYW4iOgogICAgICBjYXNlICJudW1iZXIiOgogICAgICBjYXNlICJzdHJpbmciOgogICAgICAgIC8vIFNldCB1cCBleHByZXNzaW9uIG9iamVjdCBhbmQgZmFsbCB0aHJvdWdoCiAgICAgICAgZXhwcmVzc2lvbiA9IHskOmV4cHJlc3Npb259OwogICAgICAgIC8vIGpzaGludCAtVzA4NgogICAgICBjYXNlICJvYmplY3QiOgogICAgICAgIC8vIGpzaGludCArVzA4NgogICAgICAgIGZvciAodmFyIGtleSBpbiBleHByZXNzaW9uKSB7CiAgICAgICAgICAoZnVuY3Rpb24ocGF0aCkgewogICAgICAgICAgICBpZiAodHlwZW9mIGV4cHJlc3Npb25bcGF0aF0gPT09ICd1bmRlZmluZWQnKSByZXR1cm47CiAgICAgICAgICAgIHByZWRpY2F0ZXMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiBzZWFyY2gocGF0aCA9PSAnJCcgPyB2YWx1ZSA6ICh2YWx1ZSAmJiB2YWx1ZVtwYXRoXSksIGV4cHJlc3Npb25bcGF0aF0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pKGtleSk7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdmdW5jdGlvbic6CiAgICAgICAgcHJlZGljYXRlcy5wdXNoKGV4cHJlc3Npb24pOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiBhcnJheTsKICAgIH0KICAgIHZhciBmaWx0ZXJlZCA9IFtdOwogICAgZm9yICggdmFyIGogPSAwOyBqIDwgYXJyYXkubGVuZ3RoOyBqKyspIHsKICAgICAgdmFyIHZhbHVlID0gYXJyYXlbal07CiAgICAgIGlmIChwcmVkaWNhdGVzLmNoZWNrKHZhbHVlKSkgewogICAgICAgIGZpbHRlcmVkLnB1c2godmFsdWUpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZmlsdGVyZWQ7CiAgfTsKfQoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgY3VycmVuY3kKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgYSBjdXJyZW5jeSAoaWUgJDEsMjM0LjU2KS4gV2hlbiBubyBjdXJyZW5jeSBzeW1ib2wgaXMgcHJvdmlkZWQsIGRlZmF1bHQKICogc3ltYm9sIGZvciBjdXJyZW50IGxvY2FsZSBpcyB1c2VkLgogKgogKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IElucHV0IHRvIGZpbHRlci4KICogQHBhcmFtIHtzdHJpbmc9fSBzeW1ib2wgQ3VycmVuY3kgc3ltYm9sIG9yIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkLgogKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgbnVtYmVyLgogKgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBtb2R1bGU9ImN1cnJlbmN5RXhhbXBsZSI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY3VycmVuY3lFeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS5hbW91bnQgPSAxMjM0LjU2OwogICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIG5nLW1vZGVsPSJhbW91bnQiPiA8YnI+CiAgICAgICAgIGRlZmF1bHQgY3VycmVuY3kgc3ltYm9sICgkKTogPHNwYW4gaWQ9ImN1cnJlbmN5LWRlZmF1bHQiPnt7YW1vdW50IHwgY3VycmVuY3l9fTwvc3Bhbj48YnI+CiAgICAgICAgIGN1c3RvbSBjdXJyZW5jeSBpZGVudGlmaWVyIChVU0QkKTogPHNwYW4+e3thbW91bnQgfCBjdXJyZW5jeToiVVNEJCJ9fTwvc3Bhbj4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgaW5pdCB3aXRoIDEyMzQuNTYnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCckMSwyMzQuNTYnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnYW1vdW50IHwgY3VycmVuY3k6IlVTRCQiJykpLmdldFRleHQoKSkudG9CZSgnVVNEJDEsMjM0LjU2Jyk7CiAgICAgICB9KTsKICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdzYWZhcmknKSB7CiAgICAgICAgICAgLy8gU2FmYXJpIGRvZXMgbm90IHVuZGVyc3RhbmQgdGhlIG1pbnVzIGtleS4gU2VlCiAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNDgxCiAgICAgICAgICAgcmV0dXJuOwogICAgICAgICB9CiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Ftb3VudCcpKS5jbGVhcigpOwogICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdhbW91bnQnKSkuc2VuZEtleXMoJy0xMjM0Jyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnKCQxLDIzNC4wMCknKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnYW1vdW50IHwgY3VycmVuY3k6IlVTRCQiJykpLmdldFRleHQoKSkudG9CZSgnKFVTRCQxLDIzNC4wMCknKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KY3VycmVuY3lGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddOwpmdW5jdGlvbiBjdXJyZW5jeUZpbHRlcigkbG9jYWxlKSB7CiAgdmFyIGZvcm1hdHMgPSAkbG9jYWxlLk5VTUJFUl9GT1JNQVRTOwogIHJldHVybiBmdW5jdGlvbihhbW91bnQsIGN1cnJlbmN5U3ltYm9sKXsKICAgIGlmIChpc1VuZGVmaW5lZChjdXJyZW5jeVN5bWJvbCkpIGN1cnJlbmN5U3ltYm9sID0gZm9ybWF0cy5DVVJSRU5DWV9TWU07CiAgICByZXR1cm4gZm9ybWF0TnVtYmVyKGFtb3VudCwgZm9ybWF0cy5QQVRURVJOU1sxXSwgZm9ybWF0cy5HUk9VUF9TRVAsIGZvcm1hdHMuREVDSU1BTF9TRVAsIDIpLgogICAgICAgICAgICAgICAgcmVwbGFjZSgvXHUwMEE0L2csIGN1cnJlbmN5U3ltYm9sKTsKICB9Owp9CgovKioKICogQG5nZG9jIGZpbHRlcgogKiBAbmFtZSBudW1iZXIKICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgdGV4dC4KICoKICogSWYgdGhlIGlucHV0IGlzIG5vdCBhIG51bWJlciBhbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQuCiAqCiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gbnVtYmVyIE51bWJlciB0byBmb3JtYXQuCiAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpPX0gZnJhY3Rpb25TaXplIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0byByb3VuZCB0aGUgbnVtYmVyIHRvLgogKiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCB0aGVuIHRoZSBmcmFjdGlvbiBzaXplIGlzIGNvbXB1dGVkIGZyb20gdGhlIGN1cnJlbnQgbG9jYWxlJ3MgbnVtYmVyCiAqIGZvcm1hdHRpbmcgcGF0dGVybi4gSW4gdGhlIGNhc2Ugb2YgdGhlIGRlZmF1bHQgbG9jYWxlLCBpdCB3aWxsIGJlIDMuCiAqIEByZXR1cm5zIHtzdHJpbmd9IE51bWJlciByb3VuZGVkIHRvIGRlY2ltYWxQbGFjZXMgYW5kIHBsYWNlcyBhIOKAnCzigJ0gYWZ0ZXIgZWFjaCB0aGlyZCBkaWdpdC4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGUgbW9kdWxlPSJudW1iZXJGaWx0ZXJFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdudW1iZXJGaWx0ZXJFeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS52YWwgPSAxMjM0LjU2Nzg5OwogICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgIEVudGVyIG51bWJlcjogPGlucHV0IG5nLW1vZGVsPSd2YWwnPjxicj4KICAgICAgICAgRGVmYXVsdCBmb3JtYXR0aW5nOiA8c3BhbiBpZD0nbnVtYmVyLWRlZmF1bHQnPnt7dmFsIHwgbnVtYmVyfX08L3NwYW4+PGJyPgogICAgICAgICBObyBmcmFjdGlvbnM6IDxzcGFuPnt7dmFsIHwgbnVtYmVyOjB9fTwvc3Bhbj48YnI+CiAgICAgICAgIE5lZ2F0aXZlIG51bWJlcjogPHNwYW4+e3stdmFsIHwgbnVtYmVyOjR9fTwvc3Bhbj4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IG51bWJlcnMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ251bWJlci1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnMSwyMzQuNTY4Jyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbCB8IG51bWJlcjowJykpLmdldFRleHQoKSkudG9CZSgnMSwyMzUnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTEsMjM0LjU2NzknKTsKICAgICAgIH0pOwoKICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5jbGVhcigpOwogICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWwnKSkuc2VuZEtleXMoJzMzNzQuMzMzJyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0LjMzMycpOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0Jyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJy12YWwgfCBudW1iZXI6NCcpKS5nZXRUZXh0KCkpLnRvQmUoJy0zLDM3NC4zMzMwJyk7CiAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCgpudW1iZXJGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddOwpmdW5jdGlvbiBudW1iZXJGaWx0ZXIoJGxvY2FsZSkgewogIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUzsKICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBmcmFjdGlvblNpemUpIHsKICAgIHJldHVybiBmb3JtYXROdW1iZXIobnVtYmVyLCBmb3JtYXRzLlBBVFRFUk5TWzBdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwKICAgICAgZnJhY3Rpb25TaXplKTsKICB9Owp9Cgp2YXIgREVDSU1BTF9TRVAgPSAnLic7CmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW1iZXIsIHBhdHRlcm4sIGdyb3VwU2VwLCBkZWNpbWFsU2VwLCBmcmFjdGlvblNpemUpIHsKICBpZiAobnVtYmVyID09IG51bGwgfHwgIWlzRmluaXRlKG51bWJlcikgfHwgaXNPYmplY3QobnVtYmVyKSkgcmV0dXJuICcnOwoKICB2YXIgaXNOZWdhdGl2ZSA9IG51bWJlciA8IDA7CiAgbnVtYmVyID0gTWF0aC5hYnMobnVtYmVyKTsKICB2YXIgbnVtU3RyID0gbnVtYmVyICsgJycsCiAgICAgIGZvcm1hdGVkVGV4dCA9ICcnLAogICAgICBwYXJ0cyA9IFtdOwoKICB2YXIgaGFzRXhwb25lbnQgPSBmYWxzZTsKICBpZiAobnVtU3RyLmluZGV4T2YoJ2UnKSAhPT0gLTEpIHsKICAgIHZhciBtYXRjaCA9IG51bVN0ci5tYXRjaCgvKFtcZFwuXSspZSgtPykoXGQrKS8pOwogICAgaWYgKG1hdGNoICYmIG1hdGNoWzJdID09ICctJyAmJiBtYXRjaFszXSA+IGZyYWN0aW9uU2l6ZSArIDEpIHsKICAgICAgbnVtU3RyID0gJzAnOwogICAgICBudW1iZXIgPSAwOwogICAgfSBlbHNlIHsKICAgICAgZm9ybWF0ZWRUZXh0ID0gbnVtU3RyOwogICAgICBoYXNFeHBvbmVudCA9IHRydWU7CiAgICB9CiAgfQoKICBpZiAoIWhhc0V4cG9uZW50KSB7CiAgICB2YXIgZnJhY3Rpb25MZW4gPSAobnVtU3RyLnNwbGl0KERFQ0lNQUxfU0VQKVsxXSB8fCAnJykubGVuZ3RoOwoKICAgIC8vIGRldGVybWluZSBmcmFjdGlvblNpemUgaWYgaXQgaXMgbm90IHNwZWNpZmllZAogICAgaWYgKGlzVW5kZWZpbmVkKGZyYWN0aW9uU2l6ZSkpIHsKICAgICAgZnJhY3Rpb25TaXplID0gTWF0aC5taW4oTWF0aC5tYXgocGF0dGVybi5taW5GcmFjLCBmcmFjdGlvbkxlbiksIHBhdHRlcm4ubWF4RnJhYyk7CiAgICB9CgogICAgLy8gc2FmZWx5IHJvdW5kIG51bWJlcnMgaW4gSlMgd2l0aG91dCBoaXR0aW5nIGltcHJlY2lzaW9ucyBvZiBmbG9hdGluZy1wb2ludCBhcml0aG1ldGljcwogICAgLy8gaW5zcGlyZWQgYnk6CiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL3JvdW5kCiAgICBudW1iZXIgPSArKE1hdGgucm91bmQoKyhudW1iZXIudG9TdHJpbmcoKSArICdlJyArIGZyYWN0aW9uU2l6ZSkpLnRvU3RyaW5nKCkgKyAnZScgKyAtZnJhY3Rpb25TaXplKTsKCiAgICB2YXIgZnJhY3Rpb24gPSAoJycgKyBudW1iZXIpLnNwbGl0KERFQ0lNQUxfU0VQKTsKICAgIHZhciB3aG9sZSA9IGZyYWN0aW9uWzBdOwogICAgZnJhY3Rpb24gPSBmcmFjdGlvblsxXSB8fCAnJzsKCiAgICB2YXIgaSwgcG9zID0gMCwKICAgICAgICBsZ3JvdXAgPSBwYXR0ZXJuLmxnU2l6ZSwKICAgICAgICBncm91cCA9IHBhdHRlcm4uZ1NpemU7CgogICAgaWYgKHdob2xlLmxlbmd0aCA+PSAobGdyb3VwICsgZ3JvdXApKSB7CiAgICAgIHBvcyA9IHdob2xlLmxlbmd0aCAtIGxncm91cDsKICAgICAgZm9yIChpID0gMDsgaSA8IHBvczsgaSsrKSB7CiAgICAgICAgaWYgKChwb3MgLSBpKSVncm91cCA9PT0gMCAmJiBpICE9PSAwKSB7CiAgICAgICAgICBmb3JtYXRlZFRleHQgKz0gZ3JvdXBTZXA7CiAgICAgICAgfQogICAgICAgIGZvcm1hdGVkVGV4dCArPSB3aG9sZS5jaGFyQXQoaSk7CiAgICAgIH0KICAgIH0KCiAgICBmb3IgKGkgPSBwb3M7IGkgPCB3aG9sZS5sZW5ndGg7IGkrKykgewogICAgICBpZiAoKHdob2xlLmxlbmd0aCAtIGkpJWxncm91cCA9PT0gMCAmJiBpICE9PSAwKSB7CiAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IGdyb3VwU2VwOwogICAgICB9CiAgICAgIGZvcm1hdGVkVGV4dCArPSB3aG9sZS5jaGFyQXQoaSk7CiAgICB9CgogICAgLy8gZm9ybWF0IGZyYWN0aW9uIHBhcnQuCiAgICB3aGlsZShmcmFjdGlvbi5sZW5ndGggPCBmcmFjdGlvblNpemUpIHsKICAgICAgZnJhY3Rpb24gKz0gJzAnOwogICAgfQoKICAgIGlmIChmcmFjdGlvblNpemUgJiYgZnJhY3Rpb25TaXplICE9PSAiMCIpIGZvcm1hdGVkVGV4dCArPSBkZWNpbWFsU2VwICsgZnJhY3Rpb24uc3Vic3RyKDAsIGZyYWN0aW9uU2l6ZSk7CiAgfSBlbHNlIHsKCiAgICBpZiAoZnJhY3Rpb25TaXplID4gMCAmJiBudW1iZXIgPiAtMSAmJiBudW1iZXIgPCAxKSB7CiAgICAgIGZvcm1hdGVkVGV4dCA9IG51bWJlci50b0ZpeGVkKGZyYWN0aW9uU2l6ZSk7CiAgICB9CiAgfQoKICBwYXJ0cy5wdXNoKGlzTmVnYXRpdmUgPyBwYXR0ZXJuLm5lZ1ByZSA6IHBhdHRlcm4ucG9zUHJlKTsKICBwYXJ0cy5wdXNoKGZvcm1hdGVkVGV4dCk7CiAgcGFydHMucHVzaChpc05lZ2F0aXZlID8gcGF0dGVybi5uZWdTdWYgOiBwYXR0ZXJuLnBvc1N1Zik7CiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpOwp9CgpmdW5jdGlvbiBwYWROdW1iZXIobnVtLCBkaWdpdHMsIHRyaW0pIHsKICB2YXIgbmVnID0gJyc7CiAgaWYgKG51bSA8IDApIHsKICAgIG5lZyA9ICAnLSc7CiAgICBudW0gPSAtbnVtOwogIH0KICBudW0gPSAnJyArIG51bTsKICB3aGlsZShudW0ubGVuZ3RoIDwgZGlnaXRzKSBudW0gPSAnMCcgKyBudW07CiAgaWYgKHRyaW0pCiAgICBudW0gPSBudW0uc3Vic3RyKG51bS5sZW5ndGggLSBkaWdpdHMpOwogIHJldHVybiBuZWcgKyBudW07Cn0KCgpmdW5jdGlvbiBkYXRlR2V0dGVyKG5hbWUsIHNpemUsIG9mZnNldCwgdHJpbSkgewogIG9mZnNldCA9IG9mZnNldCB8fCAwOwogIHJldHVybiBmdW5jdGlvbihkYXRlKSB7CiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTsKICAgIGlmIChvZmZzZXQgPiAwIHx8IHZhbHVlID4gLW9mZnNldCkKICAgICAgdmFsdWUgKz0gb2Zmc2V0OwogICAgaWYgKHZhbHVlID09PSAwICYmIG9mZnNldCA9PSAtMTIgKSB2YWx1ZSA9IDEyOwogICAgcmV0dXJuIHBhZE51bWJlcih2YWx1ZSwgc2l6ZSwgdHJpbSk7CiAgfTsKfQoKZnVuY3Rpb24gZGF0ZVN0ckdldHRlcihuYW1lLCBzaG9ydEZvcm0pIHsKICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0cykgewogICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7CiAgICB2YXIgZ2V0ID0gdXBwZXJjYXNlKHNob3J0Rm9ybSA/ICgnU0hPUlQnICsgbmFtZSkgOiBuYW1lKTsKCiAgICByZXR1cm4gZm9ybWF0c1tnZXRdW3ZhbHVlXTsKICB9Owp9CgpmdW5jdGlvbiB0aW1lWm9uZUdldHRlcihkYXRlKSB7CiAgdmFyIHpvbmUgPSAtMSAqIGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTsKICB2YXIgcGFkZGVkWm9uZSA9ICh6b25lID49IDApID8gIisiIDogIiI7CgogIHBhZGRlZFpvbmUgKz0gcGFkTnVtYmVyKE1hdGhbem9uZSA+IDAgPyAnZmxvb3InIDogJ2NlaWwnXSh6b25lIC8gNjApLCAyKSArCiAgICAgICAgICAgICAgICBwYWROdW1iZXIoTWF0aC5hYnMoem9uZSAlIDYwKSwgMik7CgogIHJldHVybiBwYWRkZWRab25lOwp9CgpmdW5jdGlvbiBnZXRGaXJzdFRodXJzZGF5T2ZZZWFyKHllYXIpIHsKICAgIC8vIDAgPSBpbmRleCBvZiBKYW51YXJ5CiAgICB2YXIgZGF5T2ZXZWVrT25GaXJzdCA9IChuZXcgRGF0ZSh5ZWFyLCAwLCAxKSkuZ2V0RGF5KCk7CiAgICAvLyA0ID0gaW5kZXggb2YgVGh1cnNkYXkgKCsxIHRvIGFjY291bnQgZm9yIDFzdCA9IDUpCiAgICAvLyAxMSA9IGluZGV4IG9mICpuZXh0KiBUaHVyc2RheSAoKzEgYWNjb3VudCBmb3IgMXN0ID0gMTIpCiAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgKChkYXlPZldlZWtPbkZpcnN0IDw9IDQpID8gNSA6IDEyKSAtIGRheU9mV2Vla09uRmlyc3QpOwp9CgpmdW5jdGlvbiBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGV0aW1lKSB7CiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZXRpbWUuZ2V0RnVsbFllYXIoKSwgZGF0ZXRpbWUuZ2V0TW9udGgoKSwKICAgICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5CiAgICAgIGRhdGV0aW1lLmdldERhdGUoKSArICg0IC0gZGF0ZXRpbWUuZ2V0RGF5KCkpKTsKfQoKZnVuY3Rpb24gd2Vla0dldHRlcihzaXplKSB7CiAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7CiAgICAgIHZhciBmaXJzdFRodXJzID0gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpLAogICAgICAgICB0aGlzVGh1cnMgPSBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGUpOwoKICAgICAgdmFyIGRpZmYgPSArdGhpc1RodXJzIC0gK2ZpcnN0VGh1cnMsCiAgICAgICAgIHJlc3VsdCA9IDEgKyBNYXRoLnJvdW5kKGRpZmYgLyA2LjA0OGU4KTsgLy8gNi4wNDhlOCBtcyBwZXIgd2VlawoKICAgICAgcmV0dXJuIHBhZE51bWJlcihyZXN1bHQsIHNpemUpOwogICB9Owp9CgpmdW5jdGlvbiBhbXBtR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHsKICByZXR1cm4gZGF0ZS5nZXRIb3VycygpIDwgMTIgPyBmb3JtYXRzLkFNUE1TWzBdIDogZm9ybWF0cy5BTVBNU1sxXTsKfQoKdmFyIERBVEVfRk9STUFUUyA9IHsKICB5eXl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDQpLAogICAgeXk6IGRhdGVHZXR0ZXIoJ0Z1bGxZZWFyJywgMiwgMCwgdHJ1ZSksCiAgICAgeTogZGF0ZUdldHRlcignRnVsbFllYXInLCAxKSwKICBNTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcpLAogICBNTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJywgdHJ1ZSksCiAgICBNTTogZGF0ZUdldHRlcignTW9udGgnLCAyLCAxKSwKICAgICBNOiBkYXRlR2V0dGVyKCdNb250aCcsIDEsIDEpLAogICAgZGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAyKSwKICAgICBkOiBkYXRlR2V0dGVyKCdEYXRlJywgMSksCiAgICBISDogZGF0ZUdldHRlcignSG91cnMnLCAyKSwKICAgICBIOiBkYXRlR2V0dGVyKCdIb3VycycsIDEpLAogICAgaGg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiwgLTEyKSwKICAgICBoOiBkYXRlR2V0dGVyKCdIb3VycycsIDEsIC0xMiksCiAgICBtbTogZGF0ZUdldHRlcignTWludXRlcycsIDIpLAogICAgIG06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAxKSwKICAgIHNzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMiksCiAgICAgczogZGF0ZUdldHRlcignU2Vjb25kcycsIDEpLAogICAgIC8vIHdoaWxlIElTTyA4NjAxIHJlcXVpcmVzIGZyYWN0aW9ucyB0byBiZSBwcmVmaXhlZCB3aXRoIGAuYCBvciBgLGAKICAgICAvLyB3ZSBjYW4gYmUganVzdCBzYWZlbHkgcmVseSBvbiB1c2luZyBgc3NzYCBzaW5jZSB3ZSBjdXJyZW50bHkgZG9uJ3Qgc3VwcG9ydCBzaW5nbGUgb3IgdHdvIGRpZ2l0IGZyYWN0aW9ucwogICBzc3M6IGRhdGVHZXR0ZXIoJ01pbGxpc2Vjb25kcycsIDMpLAogIEVFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScpLAogICBFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScsIHRydWUpLAogICAgIGE6IGFtcG1HZXR0ZXIsCiAgICAgWjogdGltZVpvbmVHZXR0ZXIsCiAgICB3dzogd2Vla0dldHRlcigyKSwKICAgICB3OiB3ZWVrR2V0dGVyKDEpCn07Cgp2YXIgREFURV9GT1JNQVRTX1NQTElUID0gLygoPzpbXnlNZEhobXNhWkV3J10rKXwoPzonKD86W14nXXwnJykqJyl8KD86RSt8eSt8TSt8ZCt8SCt8aCt8bSt8cyt8YXxafHcrKSkoLiopLywKICAgIE5VTUJFUl9TVFJJTkcgPSAvXlwtP1xkKyQvOwoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgZGF0ZQogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogICBGb3JtYXRzIGBkYXRlYCB0byBhIHN0cmluZyBiYXNlZCBvbiB0aGUgcmVxdWVzdGVkIGBmb3JtYXRgLgogKgogKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50czoKICoKICogICAqIGAneXl5eSdgOiA0IGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIgKGUuZy4gQUQgMSA9PiAwMDAxLCBBRCAyMDEwID0+IDIwMTApCiAqICAgKiBgJ3l5J2A6IDIgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgcGFkZGVkICgwMC05OSkuIChlLmcuIEFEIDIwMDEgPT4gMDEsIEFEIDIwMTAgPT4gMTApCiAqICAgKiBgJ3knYDogMSBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyLCBlLmcuIChBRCAxID0+IDEsIEFEIDE5OSA9PiAxOTkpCiAqICAgKiBgJ01NTU0nYDogTW9udGggaW4geWVhciAoSmFudWFyeS1EZWNlbWJlcikKICogICAqIGAnTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbi1EZWMpCiAqICAgKiBgJ01NJ2A6IE1vbnRoIGluIHllYXIsIHBhZGRlZCAoMDEtMTIpCiAqICAgKiBgJ00nYDogTW9udGggaW4geWVhciAoMS0xMikKICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKQogKiAgICogYCdkJ2A6IERheSBpbiBtb250aCAoMS0zMSkKICogICAqIGAnRUVFRSdgOiBEYXkgaW4gV2VlaywoU3VuZGF5LVNhdHVyZGF5KQogKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KQogKiAgICogYCdISCdgOiBIb3VyIGluIGRheSwgcGFkZGVkICgwMC0yMykKICogICAqIGAnSCdgOiBIb3VyIGluIGRheSAoMC0yMykKICogICAqIGAnaGgnYDogSG91ciBpbiBhbS9wbSwgcGFkZGVkICgwMS0xMikKICogICAqIGAnaCdgOiBIb3VyIGluIGFtL3BtLCAoMS0xMikKICogICAqIGAnbW0nYDogTWludXRlIGluIGhvdXIsIHBhZGRlZCAoMDAtNTkpCiAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpCiAqICAgKiBgJ3NzJ2A6IFNlY29uZCBpbiBtaW51dGUsIHBhZGRlZCAoMDAtNTkpCiAqICAgKiBgJ3MnYDogU2Vjb25kIGluIG1pbnV0ZSAoMC01OSkKICogICAqIGAnLnNzcycgb3IgJyxzc3MnYDogTWlsbGlzZWNvbmQgaW4gc2Vjb25kLCBwYWRkZWQgKDAwMC05OTkpCiAqICAgKiBgJ2EnYDogYW0vcG0gbWFya2VyCiAqICAgKiBgJ1onYDogNCBkaWdpdCAoK3NpZ24pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lem9uZSBvZmZzZXQgKC0xMjAwLSsxMjAwKQogKiAgICogYCd3dydgOiBJU08tODYwMSB3ZWVrIG9mIHllYXIgKDAwLTUzKQogKiAgICogYCd3J2A6IElTTy04NjAxIHdlZWsgb2YgeWVhciAoMC01MykKICoKICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGFsc28gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgcHJlZGVmaW5lZAogKiAgIHtAbGluayBndWlkZS9pMThuIGxvY2FsaXphYmxlIGZvcm1hdHN9OgogKgogKiAgICogYCdtZWRpdW0nYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5IGg6bW06c3MgYSdgIGZvciBlbl9VUyBsb2NhbGUKICogICAgIChlLmcuIFNlcCAzLCAyMDEwIDEyOjA1OjA4IHBtKQogKiAgICogYCdzaG9ydCdgOiBlcXVpdmFsZW50IHRvIGAnTS9kL3l5IGg6bW0gYSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIDkvMy8xMCAxMjowNSBwbSkKICogICAqIGAnZnVsbERhdGUnYDogZXF1aXZhbGVudCB0byBgJ0VFRUUsIE1NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlCiAqICAgICAoZS5nLiBGcmlkYXksIFNlcHRlbWJlciAzLCAyMDEwKQogKiAgICogYCdsb25nRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gU2VwdGVtYmVyIDMsIDIwMTApCiAqICAgKiBgJ21lZGl1bURhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gU2VwIDMsIDIwMTApCiAqICAgKiBgJ3Nob3J0RGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTS9kL3l5J2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiA5LzMvMTApCiAqICAgKiBgJ21lZGl1bVRpbWUnYDogZXF1aXZhbGVudCB0byBgJ2g6bW06c3MgYSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gMTI6MDU6MDggcG0pCiAqICAgKiBgJ3Nob3J0VGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbSBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNSBwbSkKICoKICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGNvbnRhaW4gbGl0ZXJhbCB2YWx1ZXMuIFRoZXNlIG5lZWQgdG8gYmUgcXVvdGVkIHdpdGggc2luZ2xlIHF1b3RlcyAoZS5nLgogKiAgIGAiaCAnaW4gdGhlIG1vcm5pbmcnImApLiBJbiBvcmRlciB0byBvdXRwdXQgc2luZ2xlIHF1b3RlLCB1c2UgdHdvIHNpbmdsZSBxdW90ZXMgaW4gYSBzZXF1ZW5jZQogKiAgIChlLmcuIGAiaCAnbycnY2xvY2snImApLgogKgogKiBAcGFyYW0geyhEYXRlfG51bWJlcnxzdHJpbmcpfSBkYXRlIERhdGUgdG8gZm9ybWF0IGVpdGhlciBhcyBEYXRlIG9iamVjdCwgbWlsbGlzZWNvbmRzIChzdHJpbmcgb3IKICogICAgbnVtYmVyKSBvciB2YXJpb3VzIElTTyA4NjAxIGRhdGV0aW1lIHN0cmluZyBmb3JtYXRzIChlLmcuIHl5eXktTU0tZGRUSEg6bW06c3Muc3NzWiBhbmQgaXRzCiAqICAgIHNob3J0ZXIgdmVyc2lvbnMgbGlrZSB5eXl5LU1NLWRkVEhIOm1tWiwgeXl5eS1NTS1kZCBvciB5eXl5TU1kZFRISG1tc3NaKS4gSWYgbm8gdGltZXpvbmUgaXMKICogICAgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaW5wdXQsIHRoZSB0aW1lIGlzIGNvbnNpZGVyZWQgdG8gYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLgogKiBAcGFyYW0ge3N0cmluZz19IGZvcm1hdCBGb3JtYXR0aW5nIHJ1bGVzIChzZWUgRGVzY3JpcHRpb24pLiBJZiBub3Qgc3BlY2lmaWVkLAogKiAgICBgbWVkaXVtRGF0ZWAgaXMgdXNlZC4KICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIHN0cmluZyBvciB0aGUgaW5wdXQgaWYgaW5wdXQgaXMgbm90IHJlY29nbml6ZWQgYXMgZGF0ZS9taWxsaXMuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSd9fTwvc3Bhbj46CiAgICAgICAgICAgPHNwYW4+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjxicj4KICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08L3NwYW4+OgogICAgICAgICAgPHNwYW4+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjxicj4KICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+OgogICAgICAgICAgPHNwYW4+e3snMTI4ODMyMzYyMzAwNicgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+PGJyPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IGRhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSciKSkuZ2V0VGV4dCgpKS4KICAgICAgICAgICAgdG9NYXRjaCgvT2N0IDJcZCwgMjAxMCBcZHsxLDJ9OlxkezJ9OlxkezJ9IChBTXxQTSkvKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWiciKSkuZ2V0VGV4dCgpKS4KICAgICAgICAgICAgdG9NYXRjaCgvMjAxMFwtMTBcLTJcZCBcZHsyfTpcZHsyfTpcZHsyfSAoXC18XCspP1xkezR9Lyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSciKSkuZ2V0VGV4dCgpKS4KICAgICAgICAgICAgdG9NYXRjaCgvMTBcLzJcZFwvMjAxMCBAIFxkezEsMn06XGR7Mn0oQU18UE0pLyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCmRhdGVGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddOwpmdW5jdGlvbiBkYXRlRmlsdGVyKCRsb2NhbGUpIHsKCgogIHZhciBSX0lTTzg2MDFfU1RSID0gL14oXGR7NH0pLT8oXGRcZCktPyhcZFxkKSg/OlQoXGRcZCkoPzo6PyhcZFxkKSg/Ojo/KFxkXGQpKD86XC4oXGQrKSk/KT8pPyhafChbKy1dKShcZFxkKTo/KFxkXGQpKT8pPyQvOwogICAgICAgICAgICAgICAgICAgICAvLyAxICAgICAgICAyICAgICAgIDMgICAgICAgICA0ICAgICAgICAgIDUgICAgICAgICAgNiAgICAgICAgICA3ICAgICAgICAgIDggIDkgICAgIDEwICAgICAgMTEKICBmdW5jdGlvbiBqc29uU3RyaW5nVG9EYXRlKHN0cmluZykgewogICAgdmFyIG1hdGNoOwogICAgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKFJfSVNPODYwMV9TVFIpKSB7CiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoMCksCiAgICAgICAgICB0ekhvdXIgPSAwLAogICAgICAgICAgdHpNaW4gID0gMCwKICAgICAgICAgIGRhdGVTZXR0ZXIgPSBtYXRjaFs4XSA/IGRhdGUuc2V0VVRDRnVsbFllYXIgOiBkYXRlLnNldEZ1bGxZZWFyLAogICAgICAgICAgdGltZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENIb3VycyA6IGRhdGUuc2V0SG91cnM7CgogICAgICBpZiAobWF0Y2hbOV0pIHsKICAgICAgICB0ekhvdXIgPSBpbnQobWF0Y2hbOV0gKyBtYXRjaFsxMF0pOwogICAgICAgIHR6TWluID0gaW50KG1hdGNoWzldICsgbWF0Y2hbMTFdKTsKICAgICAgfQogICAgICBkYXRlU2V0dGVyLmNhbGwoZGF0ZSwgaW50KG1hdGNoWzFdKSwgaW50KG1hdGNoWzJdKSAtIDEsIGludChtYXRjaFszXSkpOwogICAgICB2YXIgaCA9IGludChtYXRjaFs0XXx8MCkgLSB0ekhvdXI7CiAgICAgIHZhciBtID0gaW50KG1hdGNoWzVdfHwwKSAtIHR6TWluOwogICAgICB2YXIgcyA9IGludChtYXRjaFs2XXx8MCk7CiAgICAgIHZhciBtcyA9IE1hdGgucm91bmQocGFyc2VGbG9hdCgnMC4nICsgKG1hdGNoWzddfHwwKSkgKiAxMDAwKTsKICAgICAgdGltZVNldHRlci5jYWxsKGRhdGUsIGgsIG0sIHMsIG1zKTsKICAgICAgcmV0dXJuIGRhdGU7CiAgICB9CiAgICByZXR1cm4gc3RyaW5nOwogIH0KCgogIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXQpIHsKICAgIHZhciB0ZXh0ID0gJycsCiAgICAgICAgcGFydHMgPSBbXSwKICAgICAgICBmbiwgbWF0Y2g7CgogICAgZm9ybWF0ID0gZm9ybWF0IHx8ICdtZWRpdW1EYXRlJzsKICAgIGZvcm1hdCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUU1tmb3JtYXRdIHx8IGZvcm1hdDsKICAgIGlmIChpc1N0cmluZyhkYXRlKSkgewogICAgICBkYXRlID0gTlVNQkVSX1NUUklORy50ZXN0KGRhdGUpID8gaW50KGRhdGUpIDoganNvblN0cmluZ1RvRGF0ZShkYXRlKTsKICAgIH0KCiAgICBpZiAoaXNOdW1iZXIoZGF0ZSkpIHsKICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpOwogICAgfQoKICAgIGlmICghaXNEYXRlKGRhdGUpKSB7CiAgICAgIHJldHVybiBkYXRlOwogICAgfQoKICAgIHdoaWxlKGZvcm1hdCkgewogICAgICBtYXRjaCA9IERBVEVfRk9STUFUU19TUExJVC5leGVjKGZvcm1hdCk7CiAgICAgIGlmIChtYXRjaCkgewogICAgICAgIHBhcnRzID0gY29uY2F0KHBhcnRzLCBtYXRjaCwgMSk7CiAgICAgICAgZm9ybWF0ID0gcGFydHMucG9wKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcGFydHMucHVzaChmb3JtYXQpOwogICAgICAgIGZvcm1hdCA9IG51bGw7CiAgICAgIH0KICAgIH0KCiAgICBmb3JFYWNoKHBhcnRzLCBmdW5jdGlvbih2YWx1ZSl7CiAgICAgIGZuID0gREFURV9GT1JNQVRTW3ZhbHVlXTsKICAgICAgdGV4dCArPSBmbiA/IGZuKGRhdGUsICRsb2NhbGUuREFURVRJTUVfRk9STUFUUykKICAgICAgICAgICAgICAgICA6IHZhbHVlLnJlcGxhY2UoLyheJ3wnJCkvZywgJycpLnJlcGxhY2UoLycnL2csICInIik7CiAgICB9KTsKCiAgICByZXR1cm4gdGV4dDsKICB9Owp9CgoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUganNvbgogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogICBBbGxvd3MgeW91IHRvIGNvbnZlcnQgYSBKYXZhU2NyaXB0IG9iamVjdCBpbnRvIEpTT04gc3RyaW5nLgogKgogKiAgIFRoaXMgZmlsdGVyIGlzIG1vc3RseSB1c2VmdWwgZm9yIGRlYnVnZ2luZy4gV2hlbiB1c2luZyB0aGUgZG91YmxlIGN1cmx5IHt7dmFsdWV9fSBub3RhdGlvbgogKiAgIHRoZSBiaW5kaW5nIGlzIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIEpTT04uCiAqCiAqIEBwYXJhbSB7Kn0gb2JqZWN0IEFueSBKYXZhU2NyaXB0IG9iamVjdCAoaW5jbHVkaW5nIGFycmF5cyBhbmQgcHJpbWl0aXZlIHR5cGVzKSB0byBmaWx0ZXIuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEpTT04gc3RyaW5nLgogKgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxwcmU+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb24gfX08L3ByZT4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICBpdCgnc2hvdWxkIGpzb25pZnkgZmlsdGVyZWQgb2JqZWN0cycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCJ7J25hbWUnOid2YWx1ZSd9IikpLmdldFRleHQoKSkudG9NYXRjaCgvXHtcbiAgIm5hbWUiOiA/InZhbHVlIlxufS8pOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqCiAqLwpmdW5jdGlvbiBqc29uRmlsdGVyKCkgewogIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHsKICAgIHJldHVybiB0b0pzb24ob2JqZWN0LCB0cnVlKTsKICB9Owp9CgoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgbG93ZXJjYXNlCiAqIEBraW5kIGZ1bmN0aW9uCiAqIEBkZXNjcmlwdGlvbgogKiBDb252ZXJ0cyBzdHJpbmcgdG8gbG93ZXJjYXNlLgogKiBAc2VlIGFuZ3VsYXIubG93ZXJjYXNlCiAqLwp2YXIgbG93ZXJjYXNlRmlsdGVyID0gdmFsdWVGbihsb3dlcmNhc2UpOwoKCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIHVwcGVyY2FzZQogKiBAa2luZCBmdW5jdGlvbgogKiBAZGVzY3JpcHRpb24KICogQ29udmVydHMgc3RyaW5nIHRvIHVwcGVyY2FzZS4KICogQHNlZSBhbmd1bGFyLnVwcGVyY2FzZQogKi8KdmFyIHVwcGVyY2FzZUZpbHRlciA9IHZhbHVlRm4odXBwZXJjYXNlKTsKCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIGxpbWl0VG8KICogQGtpbmQgZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgb3Igc3RyaW5nIGNvbnRhaW5pbmcgb25seSBhIHNwZWNpZmllZCBudW1iZXIgb2YgZWxlbWVudHMuIFRoZSBlbGVtZW50cwogKiBhcmUgdGFrZW4gZnJvbSBlaXRoZXIgdGhlIGJlZ2lubmluZyBvciB0aGUgZW5kIG9mIHRoZSBzb3VyY2UgYXJyYXkgb3Igc3RyaW5nLCBhcyBzcGVjaWZpZWQgYnkKICogdGhlIHZhbHVlIGFuZCBzaWduIChwb3NpdGl2ZSBvciBuZWdhdGl2ZSkgb2YgYGxpbWl0YC4KICoKICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGlucHV0IFNvdXJjZSBhcnJheSBvciBzdHJpbmcgdG8gYmUgbGltaXRlZC4KICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsaW1pdCBUaGUgbGVuZ3RoIG9mIHRoZSByZXR1cm5lZCBhcnJheSBvciBzdHJpbmcuIElmIHRoZSBgbGltaXRgIG51bWJlcgogKiAgICAgaXMgcG9zaXRpdmUsIGBsaW1pdGAgbnVtYmVyIG9mIGl0ZW1zIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc291cmNlIGFycmF5L3N0cmluZyBhcmUgY29waWVkLgogKiAgICAgSWYgdGhlIG51bWJlciBpcyBuZWdhdGl2ZSwgYGxpbWl0YCBudW1iZXIgIG9mIGl0ZW1zIGZyb20gdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5L3N0cmluZwogKiAgICAgYXJlIGNvcGllZC4gVGhlIGBsaW1pdGAgd2lsbCBiZSB0cmltbWVkIGlmIGl0IGV4Y2VlZHMgYGFycmF5Lmxlbmd0aGAKICogQHJldHVybnMge0FycmF5fHN0cmluZ30gQSBuZXcgc3ViLWFycmF5IG9yIHN1YnN0cmluZyBvZiBsZW5ndGggYGxpbWl0YCBvciBsZXNzIGlmIGlucHV0IGFycmF5CiAqICAgICBoYWQgbGVzcyB0aGFuIGBsaW1pdGAgZWxlbWVudHMuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlIG1vZHVsZT0ibGltaXRUb0V4YW1wbGUiPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2xpbWl0VG9FeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS5udW1iZXJzID0gWzEsMiwzLDQsNSw2LDcsOCw5XTsKICAgICAgICAgICAgICRzY29wZS5sZXR0ZXJzID0gImFiY2RlZmdoaSI7CiAgICAgICAgICAgICAkc2NvcGUubnVtTGltaXQgPSAzOwogICAgICAgICAgICAgJHNjb3BlLmxldHRlckxpbWl0ID0gMzsKICAgICAgICAgICB9XSk7CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgICBMaW1pdCB7e251bWJlcnN9fSB0bzogPGlucHV0IHR5cGU9ImludGVnZXIiIG5nLW1vZGVsPSJudW1MaW1pdCI+CiAgICAgICAgIDxwPk91dHB1dCBudW1iZXJzOiB7eyBudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCB9fTwvcD4KICAgICAgICAgTGltaXQge3tsZXR0ZXJzfX0gdG86IDxpbnB1dCB0eXBlPSJpbnRlZ2VyIiBuZy1tb2RlbD0ibGV0dGVyTGltaXQiPgogICAgICAgICA8cD5PdXRwdXQgbGV0dGVyczoge3sgbGV0dGVycyB8IGxpbWl0VG86bGV0dGVyTGltaXQgfX08L3A+CiAgICAgICA8L2Rpdj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICB2YXIgbnVtTGltaXRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ251bUxpbWl0JykpOwogICAgICAgdmFyIGxldHRlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsZXR0ZXJMaW1pdCcpKTsKICAgICAgIHZhciBsaW1pdGVkTnVtYmVycyA9IGVsZW1lbnQoYnkuYmluZGluZygnbnVtYmVycyB8IGxpbWl0VG86bnVtTGltaXQnKSk7CiAgICAgICB2YXIgbGltaXRlZExldHRlcnMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0JykpOwoKICAgICAgIGl0KCdzaG91bGQgbGltaXQgdGhlIG51bWJlciBhcnJheSB0byBmaXJzdCB0aHJlZSBpdGVtcycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QobnVtTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTsKICAgICAgICAgZXhwZWN0KGxldHRlckxpbWl0SW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCczJyk7CiAgICAgICAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbMSwyLDNdJyk7CiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmMnKTsKICAgICAgIH0pOwoKICAgICAgIGl0KCdzaG91bGQgdXBkYXRlIHRoZSBvdXRwdXQgd2hlbiAtMyBpcyBlbnRlcmVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIG51bUxpbWl0SW5wdXQuY2xlYXIoKTsKICAgICAgICAgbnVtTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTsKICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpOwogICAgICAgICBsZXR0ZXJMaW1pdElucHV0LnNlbmRLZXlzKCctMycpOwogICAgICAgICBleHBlY3QobGltaXRlZE51bWJlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbnVtYmVyczogWzcsOCw5XScpOwogICAgICAgICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogZ2hpJyk7CiAgICAgICB9KTsKCiAgICAgICBpdCgnc2hvdWxkIG5vdCBleGNlZWQgdGhlIG1heGltdW0gc2l6ZSBvZiBpbnB1dCBhcnJheScsIGZ1bmN0aW9uKCkgewogICAgICAgICBudW1MaW1pdElucHV0LmNsZWFyKCk7CiAgICAgICAgIG51bUxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpOwogICAgICAgICBsZXR0ZXJMaW1pdElucHV0LmNsZWFyKCk7CiAgICAgICAgIGxldHRlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpOwogICAgICAgICBleHBlY3QobGltaXRlZE51bWJlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbnVtYmVyczogWzEsMiwzLDQsNSw2LDcsOCw5XScpOwogICAgICAgICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogYWJjZGVmZ2hpJyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCmZ1bmN0aW9uIGxpbWl0VG9GaWx0ZXIoKXsKICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGxpbWl0KSB7CiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpICYmICFpc1N0cmluZyhpbnB1dCkpIHJldHVybiBpbnB1dDsKCiAgICBpZiAoTWF0aC5hYnMoTnVtYmVyKGxpbWl0KSkgPT09IEluZmluaXR5KSB7CiAgICAgIGxpbWl0ID0gTnVtYmVyKGxpbWl0KTsKICAgIH0gZWxzZSB7CiAgICAgIGxpbWl0ID0gaW50KGxpbWl0KTsKICAgIH0KCiAgICBpZiAoaXNTdHJpbmcoaW5wdXQpKSB7CiAgICAgIC8vTmFOIGNoZWNrIG9uIGxpbWl0CiAgICAgIGlmIChsaW1pdCkgewogICAgICAgIHJldHVybiBsaW1pdCA+PSAwID8gaW5wdXQuc2xpY2UoMCwgbGltaXQpIDogaW5wdXQuc2xpY2UobGltaXQsIGlucHV0Lmxlbmd0aCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICIiOwogICAgICB9CiAgICB9CgogICAgdmFyIG91dCA9IFtdLAogICAgICBpLCBuOwoKICAgIC8vIGlmIGFicyhsaW1pdCkgZXhjZWVkcyBtYXhpbXVtIGxlbmd0aCwgdHJpbSBpdAogICAgaWYgKGxpbWl0ID4gaW5wdXQubGVuZ3RoKQogICAgICBsaW1pdCA9IGlucHV0Lmxlbmd0aDsKICAgIGVsc2UgaWYgKGxpbWl0IDwgLWlucHV0Lmxlbmd0aCkKICAgICAgbGltaXQgPSAtaW5wdXQubGVuZ3RoOwoKICAgIGlmIChsaW1pdCA+IDApIHsKICAgICAgaSA9IDA7CiAgICAgIG4gPSBsaW1pdDsKICAgIH0gZWxzZSB7CiAgICAgIGkgPSBpbnB1dC5sZW5ndGggKyBsaW1pdDsKICAgICAgbiA9IGlucHV0Lmxlbmd0aDsKICAgIH0KCiAgICBmb3IgKDsgaTxuOyBpKyspIHsKICAgICAgb3V0LnB1c2goaW5wdXRbaV0pOwogICAgfQoKICAgIHJldHVybiBvdXQ7CiAgfTsKfQoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgb3JkZXJCeQogKiBAa2luZCBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogT3JkZXJzIGEgc3BlY2lmaWVkIGBhcnJheWAgYnkgdGhlIGBleHByZXNzaW9uYCBwcmVkaWNhdGUuIEl0IGlzIG9yZGVyZWQgYWxwaGFiZXRpY2FsbHkKICogZm9yIHN0cmluZ3MgYW5kIG51bWVyaWNhbGx5IGZvciBudW1iZXJzLiBOb3RlOiBpZiB5b3Ugbm90aWNlIG51bWJlcnMgYXJlIG5vdCBiZWluZyBzb3J0ZWQKICogY29ycmVjdGx5LCBtYWtlIHN1cmUgdGhleSBhcmUgYWN0dWFsbHkgYmVpbmcgc2F2ZWQgYXMgbnVtYmVycyBhbmQgbm90IHN0cmluZ3MuCiAqCiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LgogKiBAcGFyYW0ge2Z1bmN0aW9uKCopfHN0cmluZ3xBcnJheS48KGZ1bmN0aW9uKCopfHN0cmluZyk+fSBleHByZXNzaW9uIEEgcHJlZGljYXRlIHRvIGJlCiAqICAgIHVzZWQgYnkgdGhlIGNvbXBhcmF0b3IgdG8gZGV0ZXJtaW5lIHRoZSBvcmRlciBvZiBlbGVtZW50cy4KICoKICogICAgQ2FuIGJlIG9uZSBvZjoKICoKICogICAgLSBgZnVuY3Rpb25gOiBHZXR0ZXIgZnVuY3Rpb24uIFRoZSByZXN1bHQgb2YgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIHNvcnRlZCB1c2luZyB0aGUKICogICAgICBgPGAsIGA9YCwgYD5gIG9wZXJhdG9yLgogKiAgICAtIGBzdHJpbmdgOiBBbiBBbmd1bGFyIGV4cHJlc3Npb24uIFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIGlzIHVzZWQgdG8gY29tcGFyZSBlbGVtZW50cwogKiAgICAgIChmb3IgZXhhbXBsZSBgbmFtZWAgdG8gc29ydCBieSBhIHByb3BlcnR5IGNhbGxlZCBgbmFtZWAgb3IgYG5hbWUuc3Vic3RyKDAsIDMpYCB0byBzb3J0IGJ5CiAqICAgICAgMyBmaXJzdCBjaGFyYWN0ZXJzIG9mIGEgcHJvcGVydHkgY2FsbGVkIGBuYW1lYCkuIFRoZSByZXN1bHQgb2YgYSBjb25zdGFudCBleHByZXNzaW9uCiAqICAgICAgaXMgaW50ZXJwcmV0ZWQgYXMgYSBwcm9wZXJ0eSBuYW1lIHRvIGJlIHVzZWQgaW4gY29tcGFyaXNvbnMgKGZvciBleGFtcGxlIGAic3BlY2lhbCBuYW1lImAKICogICAgICB0byBzb3J0IG9iamVjdCBieSB0aGUgdmFsdWUgb2YgdGhlaXIgYHNwZWNpYWwgbmFtZWAgcHJvcGVydHkpLiBBbiBleHByZXNzaW9uIGNhbiBiZQogKiAgICAgIG9wdGlvbmFsbHkgcHJlZml4ZWQgd2l0aCBgK2Agb3IgYC1gIHRvIGNvbnRyb2wgYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcgc29ydCBvcmRlcgogKiAgICAgIChmb3IgZXhhbXBsZSwgYCtuYW1lYCBvciBgLW5hbWVgKS4KICogICAgLSBgQXJyYXlgOiBBbiBhcnJheSBvZiBmdW5jdGlvbiBvciBzdHJpbmcgcHJlZGljYXRlcy4gVGhlIGZpcnN0IHByZWRpY2F0ZSBpbiB0aGUgYXJyYXkKICogICAgICBpcyB1c2VkIGZvciBzb3J0aW5nLCBidXQgd2hlbiB0d28gaXRlbXMgYXJlIGVxdWl2YWxlbnQsIHRoZSBuZXh0IHByZWRpY2F0ZSBpcyB1c2VkLgogKgogKiBAcGFyYW0ge2Jvb2xlYW49fSByZXZlcnNlIFJldmVyc2UgdGhlIG9yZGVyIG9mIHRoZSBhcnJheS4KICogQHJldHVybnMge0FycmF5fSBTb3J0ZWQgY29weSBvZiB0aGUgc291cmNlIGFycmF5LgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBtb2R1bGU9Im9yZGVyQnlFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZScsIFtdKQogICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9CiAgICAgICAgICAgICAgICAgW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjEyJywgYWdlOjEwfSwKICAgICAgICAgICAgICAgICAge25hbWU6J01hcnknLCBwaG9uZTonNTU1LTk4NzYnLCBhZ2U6MTl9LAogICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMScsIGFnZToyMX0sCiAgICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4JywgYWdlOjM1fSwKICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGllJywgcGhvbmU6JzU1NS04NzY1JywgYWdlOjI5fV07CiAgICAgICAgICAgICAkc2NvcGUucHJlZGljYXRlID0gJy1hZ2UnOwogICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgIDxwcmU+U29ydGluZyBwcmVkaWNhdGUgPSB7e3ByZWRpY2F0ZX19OyByZXZlcnNlID0ge3tyZXZlcnNlfX08L3ByZT4KICAgICAgICAgPGhyLz4KICAgICAgICAgWyA8YSBocmVmPSIiIG5nLWNsaWNrPSJwcmVkaWNhdGU9JyciPnVuc29ydGVkPC9hPiBdCiAgICAgICAgIDx0YWJsZSBjbGFzcz0iZnJpZW5kIj4KICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICA8dGg+PGEgaHJlZj0iIiBuZy1jbGljaz0icHJlZGljYXRlID0gJ25hbWUnOyByZXZlcnNlPWZhbHNlIj5OYW1lPC9hPgogICAgICAgICAgICAgICAgICg8YSBocmVmPSIiIG5nLWNsaWNrPSJwcmVkaWNhdGUgPSAnLW5hbWUnOyByZXZlcnNlPWZhbHNlIj5ePC9hPik8L3RoPgogICAgICAgICAgICAgPHRoPjxhIGhyZWY9IiIgbmctY2xpY2s9InByZWRpY2F0ZSA9ICdwaG9uZSc7IHJldmVyc2U9IXJldmVyc2UiPlBob25lIE51bWJlcjwvYT48L3RoPgogICAgICAgICAgICAgPHRoPjxhIGhyZWY9IiIgbmctY2xpY2s9InByZWRpY2F0ZSA9ICdhZ2UnOyByZXZlcnNlPSFyZXZlcnNlIj5BZ2U8L2E+PC90aD4KICAgICAgICAgICA8L3RyPgogICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9ImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTpwcmVkaWNhdGU6cmV2ZXJzZSI+CiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD4KICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD4KICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5hZ2V9fTwvdGQ+CiAgICAgICAgICAgPC90cj4KICAgICAgICAgPC90YWJsZT4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKgogKiBJdCdzIGFsc28gcG9zc2libGUgdG8gY2FsbCB0aGUgb3JkZXJCeSBmaWx0ZXIgbWFudWFsbHksIGJ5IGluamVjdGluZyBgJGZpbHRlcmAsIHJldHJpZXZpbmcgdGhlCiAqIGZpbHRlciByb3V0aW5lIHdpdGggYCRmaWx0ZXIoJ29yZGVyQnknKWAsIGFuZCBjYWxsaW5nIHRoZSByZXR1cm5lZCBmaWx0ZXIgcm91dGluZSB3aXRoIHRoZQogKiBkZXNpcmVkIHBhcmFtZXRlcnMuCiAqCiAqIEV4YW1wbGU6CiAqCiAqIEBleGFtcGxlCiAgPGV4YW1wbGUgbW9kdWxlPSJvcmRlckJ5RXhhbXBsZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgPHRhYmxlIGNsYXNzPSJmcmllbmQiPgogICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+PGEgaHJlZj0iIiBuZy1jbGljaz0icmV2ZXJzZT1mYWxzZTtvcmRlcignbmFtZScsIGZhbHNlKSI+TmFtZTwvYT4KICAgICAgICAgICAgICAoPGEgaHJlZj0iIiBuZy1jbGljaz0ib3JkZXIoJy1uYW1lJyxmYWxzZSkiPl48L2E+KTwvdGg+CiAgICAgICAgICAgIDx0aD48YSBocmVmPSIiIG5nLWNsaWNrPSJyZXZlcnNlPSFyZXZlcnNlO29yZGVyKCdwaG9uZScsIHJldmVyc2UpIj5QaG9uZSBOdW1iZXI8L2E+PC90aD4KICAgICAgICAgICAgPHRoPjxhIGhyZWY9IiIgbmctY2xpY2s9InJldmVyc2U9IXJldmVyc2U7b3JkZXIoJ2FnZScscmV2ZXJzZSkiPkFnZTwvYT48L3RoPgogICAgICAgICAgPC90cj4KICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9ImZyaWVuZCBpbiBmcmllbmRzIj4KICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+CiAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD4KICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD4KICAgICAgICAgIDwvdHI+CiAgICAgICAgPC90YWJsZT4KICAgICAgPC9kaXY+CiAgICA8L2ZpbGU+CgogICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgICAgYW5ndWxhci5tb2R1bGUoJ29yZGVyQnlFeGFtcGxlJywgW10pCiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGZpbHRlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGZpbHRlcikgewogICAgICAgICAgdmFyIG9yZGVyQnkgPSAkZmlsdGVyKCdvcmRlckJ5Jyk7CiAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IFsKICAgICAgICAgICAgeyBuYW1lOiAnSm9obicsICAgIHBob25lOiAnNTU1LTEyMTInLCAgICBhZ2U6IDEwIH0sCiAgICAgICAgICAgIHsgbmFtZTogJ01hcnknLCAgICBwaG9uZTogJzU1NS05ODc2JywgICAgYWdlOiAxOSB9LAogICAgICAgICAgICB7IG5hbWU6ICdNaWtlJywgICAgcGhvbmU6ICc1NTUtNDMyMScsICAgIGFnZTogMjEgfSwKICAgICAgICAgICAgeyBuYW1lOiAnQWRhbScsICAgIHBob25lOiAnNTU1LTU2NzgnLCAgICBhZ2U6IDM1IH0sCiAgICAgICAgICAgIHsgbmFtZTogJ0p1bGllJywgICBwaG9uZTogJzU1NS04NzY1JywgICAgYWdlOiAyOSB9CiAgICAgICAgICBdOwogICAgICAgICAgJHNjb3BlLm9yZGVyID0gZnVuY3Rpb24ocHJlZGljYXRlLCByZXZlcnNlKSB7CiAgICAgICAgICAgICRzY29wZS5mcmllbmRzID0gb3JkZXJCeSgkc2NvcGUuZnJpZW5kcywgcHJlZGljYXRlLCByZXZlcnNlKTsKICAgICAgICAgIH07CiAgICAgICAgICAkc2NvcGUub3JkZXIoJy1hZ2UnLGZhbHNlKTsKICAgICAgICB9XSk7CiAgICA8L2ZpbGU+CjwvZXhhbXBsZT4KICovCm9yZGVyQnlGaWx0ZXIuJGluamVjdCA9IFsnJHBhcnNlJ107CmZ1bmN0aW9uIG9yZGVyQnlGaWx0ZXIoJHBhcnNlKXsKICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHNvcnRQcmVkaWNhdGUsIHJldmVyc2VPcmRlcikgewogICAgaWYgKCFpc0FycmF5KGFycmF5KSkgcmV0dXJuIGFycmF5OwogICAgaWYgKCFzb3J0UHJlZGljYXRlKSByZXR1cm4gYXJyYXk7CiAgICBzb3J0UHJlZGljYXRlID0gaXNBcnJheShzb3J0UHJlZGljYXRlKSA/IHNvcnRQcmVkaWNhdGU6IFtzb3J0UHJlZGljYXRlXTsKICAgIHNvcnRQcmVkaWNhdGUgPSBtYXAoc29ydFByZWRpY2F0ZSwgZnVuY3Rpb24ocHJlZGljYXRlKXsKICAgICAgdmFyIGRlc2NlbmRpbmcgPSBmYWxzZSwgZ2V0ID0gcHJlZGljYXRlIHx8IGlkZW50aXR5OwogICAgICBpZiAoaXNTdHJpbmcocHJlZGljYXRlKSkgewogICAgICAgIGlmICgocHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnKycgfHwgcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLScpKSB7CiAgICAgICAgICBkZXNjZW5kaW5nID0gcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLSc7CiAgICAgICAgICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUuc3Vic3RyaW5nKDEpOwogICAgICAgIH0KICAgICAgICBnZXQgPSAkcGFyc2UocHJlZGljYXRlKTsKICAgICAgICBpZiAoZ2V0LmNvbnN0YW50KSB7CiAgICAgICAgICB2YXIga2V5ID0gZ2V0KCk7CiAgICAgICAgICByZXR1cm4gcmV2ZXJzZUNvbXBhcmF0b3IoZnVuY3Rpb24oYSxiKSB7CiAgICAgICAgICAgIHJldHVybiBjb21wYXJlKGFba2V5XSwgYltrZXldKTsKICAgICAgICAgIH0sIGRlc2NlbmRpbmcpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmV2ZXJzZUNvbXBhcmF0b3IoZnVuY3Rpb24oYSxiKXsKICAgICAgICByZXR1cm4gY29tcGFyZShnZXQoYSksZ2V0KGIpKTsKICAgICAgfSwgZGVzY2VuZGluZyk7CiAgICB9KTsKICAgIHZhciBhcnJheUNvcHkgPSBbXTsKICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7IGFycmF5Q29weS5wdXNoKGFycmF5W2ldKTsgfQogICAgcmV0dXJuIGFycmF5Q29weS5zb3J0KHJldmVyc2VDb21wYXJhdG9yKGNvbXBhcmF0b3IsIHJldmVyc2VPcmRlcikpOwoKICAgIGZ1bmN0aW9uIGNvbXBhcmF0b3IobzEsIG8yKXsKICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc29ydFByZWRpY2F0ZS5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBjb21wID0gc29ydFByZWRpY2F0ZVtpXShvMSwgbzIpOwogICAgICAgIGlmIChjb21wICE9PSAwKSByZXR1cm4gY29tcDsKICAgICAgfQogICAgICByZXR1cm4gMDsKICAgIH0KICAgIGZ1bmN0aW9uIHJldmVyc2VDb21wYXJhdG9yKGNvbXAsIGRlc2NlbmRpbmcpIHsKICAgICAgcmV0dXJuIGRlc2NlbmRpbmcKICAgICAgICAgID8gZnVuY3Rpb24oYSxiKXtyZXR1cm4gY29tcChiLGEpO30KICAgICAgICAgIDogY29tcDsKICAgIH0KICAgIGZ1bmN0aW9uIGNvbXBhcmUodjEsIHYyKXsKICAgICAgdmFyIHQxID0gdHlwZW9mIHYxOwogICAgICB2YXIgdDIgPSB0eXBlb2YgdjI7CiAgICAgIGlmICh0MSA9PSB0MikgewogICAgICAgIGlmIChpc0RhdGUodjEpICYmIGlzRGF0ZSh2MikpIHsKICAgICAgICAgIHYxID0gdjEudmFsdWVPZigpOwogICAgICAgICAgdjIgPSB2Mi52YWx1ZU9mKCk7CiAgICAgICAgfQogICAgICAgIGlmICh0MSA9PSAic3RyaW5nIikgewogICAgICAgICAgIHYxID0gdjEudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICB2MiA9IHYyLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgfQogICAgICAgIGlmICh2MSA9PT0gdjIpIHJldHVybiAwOwogICAgICAgIHJldHVybiB2MSA8IHYyID8gLTEgOiAxOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0MSA8IHQyID8gLTEgOiAxOwogICAgICB9CiAgICB9CiAgfTsKfQoKZnVuY3Rpb24gbmdEaXJlY3RpdmUoZGlyZWN0aXZlKSB7CiAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkgewogICAgZGlyZWN0aXZlID0gewogICAgICBsaW5rOiBkaXJlY3RpdmUKICAgIH07CiAgfQogIGRpcmVjdGl2ZS5yZXN0cmljdCA9IGRpcmVjdGl2ZS5yZXN0cmljdCB8fCAnQUMnOwogIHJldHVybiB2YWx1ZUZuKGRpcmVjdGl2ZSk7Cn0KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIGEKICogQHJlc3RyaWN0IEUKICoKICogQGRlc2NyaXB0aW9uCiAqIE1vZGlmaWVzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSBodG1sIEEgdGFnIHNvIHRoYXQgdGhlIGRlZmF1bHQgYWN0aW9uIGlzIHByZXZlbnRlZCB3aGVuCiAqIHRoZSBocmVmIGF0dHJpYnV0ZSBpcyBlbXB0eS4KICoKICogVGhpcyBjaGFuZ2UgcGVybWl0cyB0aGUgZWFzeSBjcmVhdGlvbiBvZiBhY3Rpb24gbGlua3Mgd2l0aCB0aGUgYG5nQ2xpY2tgIGRpcmVjdGl2ZQogKiB3aXRob3V0IGNoYW5naW5nIHRoZSBsb2NhdGlvbiBvciBjYXVzaW5nIHBhZ2UgcmVsb2FkcywgZS5nLjoKICogYDxhIGhyZWY9IiIgbmctY2xpY2s9Imxpc3QuYWRkSXRlbSgpIj5BZGQgSXRlbTwvYT5gCiAqLwp2YXIgaHRtbEFuY2hvckRpcmVjdGl2ZSA9IHZhbHVlRm4oewogIHJlc3RyaWN0OiAnRScsCiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikgewoKICAgIGlmIChtc2llIDw9IDgpIHsKCiAgICAgIC8vIHR1cm4gPGEgaHJlZiBuZy1jbGljaz0iLi4iPmxpbms8L2E+IGludG8gYSBzdHlsYWJsZSBsaW5rIGluIElFCiAgICAgIC8vIGJ1dCBvbmx5IGlmIGl0IGRvZXNuJ3QgaGF2ZSBuYW1lIGF0dHJpYnV0ZSwgaW4gd2hpY2ggY2FzZSBpdCdzIGFuIGFuY2hvcgogICAgICBpZiAoIWF0dHIuaHJlZiAmJiAhYXR0ci5uYW1lKSB7CiAgICAgICAgYXR0ci4kc2V0KCdocmVmJywgJycpOwogICAgICB9CgogICAgICAvLyBhZGQgYSBjb21tZW50IG5vZGUgdG8gYW5jaG9ycyB0byB3b3JrYXJvdW5kIElFIGJ1ZyB0aGF0IGNhdXNlcyBlbGVtZW50IGNvbnRlbnQgdG8gYmUgcmVzZXQKICAgICAgLy8gdG8gbmV3IGF0dHJpYnV0ZSBjb250ZW50IGlmIGF0dHJpYnV0ZSBpcyB1cGRhdGVkIHdpdGggdmFsdWUgY29udGFpbmluZyBAIGFuZCBlbGVtZW50IGFsc28KICAgICAgLy8gY29udGFpbnMgdmFsdWUgd2l0aCBACiAgICAgIC8vIHNlZSBpc3N1ZSAjMTk0OQogICAgICBlbGVtZW50LmFwcGVuZChkb2N1bWVudC5jcmVhdGVDb21tZW50KCdJRSBmaXgnKSk7CiAgICB9CgogICAgaWYgKCFhdHRyLmhyZWYgJiYgIWF0dHIueGxpbmtIcmVmICYmICFhdHRyLm5hbWUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7CiAgICAgICAgLy8gU1ZHQUVsZW1lbnQgZG9lcyBub3QgdXNlIHRoZSBocmVmIGF0dHJpYnV0ZSwgYnV0IHJhdGhlciB0aGUgJ3hsaW5rSHJlZicgYXR0cmlidXRlLgogICAgICAgIHZhciBocmVmID0gdG9TdHJpbmcuY2FsbChlbGVtZW50LnByb3AoJ2hyZWYnKSkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScgPwogICAgICAgICAgICAgICAgICAgJ3hsaW5rOmhyZWYnIDogJ2hyZWYnOwogICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgLy8gaWYgd2UgaGF2ZSBubyBocmVmIHVybCwgdGhlbiBkb24ndCBuYXZpZ2F0ZSBhbnl3aGVyZS4KICAgICAgICAgIGlmICghZWxlbWVudC5hdHRyKGhyZWYpKSB7CiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nSHJlZgogKiBAcmVzdHJpY3QgQQogKiBAcHJpb3JpdHkgOTkKICoKICogQGRlc2NyaXB0aW9uCiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhbiBocmVmIGF0dHJpYnV0ZSB3aWxsCiAqIG1ha2UgdGhlIGxpbmsgZ28gdG8gdGhlIHdyb25nIFVSTCBpZiB0aGUgdXNlciBjbGlja3MgaXQgYmVmb3JlCiAqIEFuZ3VsYXIgaGFzIGEgY2hhbmNlIHRvIHJlcGxhY2UgdGhlIGB7e2hhc2h9fWAgbWFya3VwIHdpdGggaXRzCiAqIHZhbHVlLiBVbnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBtYXJrdXAgdGhlIGxpbmsgd2lsbCBiZSBicm9rZW4KICogYW5kIHdpbGwgbW9zdCBsaWtlbHkgcmV0dXJuIGEgNDA0IGVycm9yLgogKgogKiBUaGUgYG5nSHJlZmAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uCiAqCiAqIFRoZSB3cm9uZyB3YXkgdG8gd3JpdGUgaXQ6CiAqIGBgYGh0bWwKICogPGEgaHJlZj0iaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19Ij5saW5rMTwvYT4KICogYGBgCiAqCiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDoKICogYGBgaHRtbAogKiA8YSBuZy1ocmVmPSJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0iPmxpbmsxPC9hPgogKiBgYGAKICoKICogQGVsZW1lbnQgQQogKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ0hyZWYgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLgogKgogKiBAZXhhbXBsZQogKiBUaGlzIGV4YW1wbGUgc2hvd3MgdmFyaW91cyBjb21iaW5hdGlvbnMgb2YgYGhyZWZgLCBgbmctaHJlZmAgYW5kIGBuZy1jbGlja2AgYXR0cmlidXRlcwogKiBpbiBsaW5rcyBhbmQgdGhlaXIgZGlmZmVyZW50IGJlaGF2aW9yczoKICAgIDxleGFtcGxlPgogICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICA8aW5wdXQgbmctbW9kZWw9InZhbHVlIiAvPjxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTEiIGhyZWYgbmctY2xpY2s9InZhbHVlID0gMSI+bGluayAxPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTIiIGhyZWY9IiIgbmctY2xpY2s9InZhbHVlID0gMiI+bGluayAyPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTMiIG5nLWhyZWY9Ii97eycxMjMnfX0iPmxpbmsgMzwvYT4gKGxpbmssIHJlbG9hZCEpPGJyIC8+CiAgICAgICAgPGEgaWQ9ImxpbmstNCIgaHJlZj0iIiBuYW1lPSJ4eCIgbmctY2xpY2s9InZhbHVlID0gNCI+YW5jaG9yPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTUiIG5hbWU9Inh4eCIgbmctY2xpY2s9InZhbHVlID0gNSI+YW5jaG9yPC9hPiAobm8gbGluayk8YnIgLz4KICAgICAgICA8YSBpZD0ibGluay02IiBuZy1ocmVmPSJ7e3ZhbHVlfX0iPmxpbms8L2E+IChsaW5rLCBjaGFuZ2UgbG9jYXRpb24pCiAgICAgIDwvZmlsZT4KICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiB3aXRob3V0IHZhbHVlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTEnKSkuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzEnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTEnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0yJykpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCcyJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0yJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKCcnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGFuZCBjaGFuZ2UgdXJsIHdoZW4gbmctaHJlZiBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTMnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1wvMTIzJC8pOwoKICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMycpKS5jbGljaygpOwoKICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5hdmlnYXRlIGF3YXkgZnJvbSBhbiBBbmd1bGFyIHBhZ2UsIHNvIHdlIG5lZWQKICAgICAgICAgIC8vIHRvIHVzZSBicm93c2VyLmRyaXZlciB0byBnZXQgdGhlIGJhc2Ugd2ViZHJpdmVyLgoKICAgICAgICAgIGJyb3dzZXIud2FpdChmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkgewogICAgICAgICAgICAgIHJldHVybiB1cmwubWF0Y2goL1wvMTIzJC8pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0sIDUwMDAsICdwYWdlIHNob3VsZCBuYXZpZ2F0ZSB0byAvMTIzJyk7CiAgICAgICAgfSk7CgogICAgICAgIHhpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZyBhbmQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstNCcpKS5jbGljaygpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNCcpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstNCcpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIG5vIGhyZWYgYnV0IG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTUnKSkuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzUnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTUnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUobnVsbCk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgb25seSBjaGFuZ2UgdXJsIHdoZW4gb25seSBuZy1ocmVmJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5jbGVhcigpOwogICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuc2VuZEtleXMoJzYnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1wvNiQvKTsKCiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuY2xpY2soKTsKCiAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBuYXZpZ2F0ZSBhd2F5IGZyb20gYW4gQW5ndWxhciBwYWdlLCBzbyB3ZSBuZWVkCiAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci4KICAgICAgICAgIGJyb3dzZXIud2FpdChmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkgewogICAgICAgICAgICAgIHJldHVybiB1cmwubWF0Y2goL1wvNiQvKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzYnKTsKICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nU3JjCiAqIEByZXN0cmljdCBBCiAqIEBwcmlvcml0eSA5OQogKgogKiBAZGVzY3JpcHRpb24KICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGEgYHNyY2AgYXR0cmlidXRlIGRvZXNuJ3QKICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbAogKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGUKICogYHt7aGFzaH19YC4gVGhlIGBuZ1NyY2AgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uCiAqCiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6CiAqIGBgYGh0bWwKICogPGltZyBzcmM9Imh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSIvPgogKiBgYGAKICoKICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OgogKiBgYGBodG1sCiAqIDxpbWcgbmctc3JjPSJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0iLz4KICogYGBgCiAqCiAqIEBlbGVtZW50IElNRwogKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyYyBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuCiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdTcmNzZXQKICogQHJlc3RyaWN0IEEKICogQHByaW9yaXR5IDk5CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3Jjc2V0YCBhdHRyaWJ1dGUgZG9lc24ndAogKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsCiAqIHRleHQgYHt7aGFzaH19YCB1bnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBleHByZXNzaW9uIGluc2lkZQogKiBge3toYXNofX1gLiBUaGUgYG5nU3Jjc2V0YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS4KICoKICogVGhlIGJ1Z2d5IHdheSB0byB3cml0ZSBpdDoKICogYGBgaHRtbAogKiA8aW1nIHNyY3NldD0iaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4Ii8+CiAqIGBgYAogKgogKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6CiAqIGBgYGh0bWwKICogPGltZyBuZy1zcmNzZXQ9Imh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSAyeCIvPgogKiBgYGAKICoKICogQGVsZW1lbnQgSU1HCiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3Jjc2V0IGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC4KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0Rpc2FibGVkCiAqIEByZXN0cmljdCBBCiAqIEBwcmlvcml0eSAxMDAKICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIFdlIHNob3VsZG4ndCBkbyB0aGlzLCBiZWNhdXNlIGl0IHdpbGwgbWFrZSB0aGUgYnV0dG9uIGVuYWJsZWQgb24gQ2hyb21lL0ZpcmVmb3ggYnV0IG5vdCBvbiBJRTggYW5kIG9sZGVyIElFczoKICogYGBgaHRtbAogKiA8ZGl2IG5nLWluaXQ9InNjb3BlID0geyBpc0Rpc2FibGVkOiBmYWxzZSB9Ij4KICogIDxidXR0b24gZGlzYWJsZWQ9Int7c2NvcGUuaXNEaXNhYmxlZH19Ij5EaXNhYmxlZDwvYnV0dG9uPgogKiA8L2Rpdj4KICogYGBgCiAqCiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlcwogKiBzdWNoIGFzIGRpc2FibGVkLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pCiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlCiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS4KICogVGhlIGBuZ0Rpc2FibGVkYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlLgogKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlcwogKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi4KICoKICogQGV4YW1wbGUKICAgIDxleGFtcGxlPgogICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICBDbGljayBtZSB0byB0b2dnbGU6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9ImNoZWNrZWQiPjxici8+CiAgICAgICAgPGJ1dHRvbiBuZy1tb2RlbD0iYnV0dG9uIiBuZy1kaXNhYmxlZD0iY2hlY2tlZCI+QnV0dG9uPC9idXR0b24+CiAgICAgIDwvZmlsZT4KICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgYnV0dG9uJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpLnRvQmVGYWxzeSgpOwogICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgfSk7CiAgICAgIDwvZmlsZT4KICAgIDwvZXhhbXBsZT4KICoKICogQGVsZW1lbnQgSU5QVVQKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0Rpc2FibGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksCiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlICJkaXNhYmxlZCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnQKICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdDaGVja2VkCiAqIEByZXN0cmljdCBBCiAqIEBwcmlvcml0eSAxMDAKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlcwogKiBzdWNoIGFzIGNoZWNrZWQuIChUaGVpciBwcmVzZW5jZSBtZWFucyB0cnVlIGFuZCB0aGVpciBhYnNlbmNlIG1lYW5zIGZhbHNlLikKICogSWYgd2UgcHV0IGFuIEFuZ3VsYXIgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uIGludG8gc3VjaCBhbiBhdHRyaWJ1dGUgdGhlbiB0aGUKICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLgogKiBUaGUgYG5nQ2hlY2tlZGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0gZm9yIHRoZSBgY2hlY2tlZGAgYXR0cmlidXRlLgogKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlcwogKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi4KICogQGV4YW1wbGUKICAgIDxleGFtcGxlPgogICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICBDaGVjayBtZSB0byBjaGVjayBib3RoOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJtYXN0ZXIiPjxici8+CiAgICAgICAgPGlucHV0IGlkPSJjaGVja1NsYXZlIiB0eXBlPSJjaGVja2JveCIgbmctY2hlY2tlZD0ibWFzdGVyIj4KICAgICAgPC9maWxlPgogICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGJvdGggY2hlY2tCb3hlcycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2NoZWNrU2xhdmUnKSkuZ2V0QXR0cmlidXRlKCdjaGVja2VkJykpLnRvQmVGYWxzeSgpOwogICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnbWFzdGVyJykpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY2hlY2tTbGF2ZScpKS5nZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkudG9CZVRydXRoeSgpOwogICAgICAgIH0pOwogICAgICA8L2ZpbGU+CiAgICA8L2V4YW1wbGU+CiAqCiAqIEBlbGVtZW50IElOUFVUCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGVja2VkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksCiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlICJjaGVja2VkIiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudAogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1JlYWRvbmx5CiAqIEByZXN0cmljdCBBCiAqIEBwcmlvcml0eSAxMDAKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlcwogKiBzdWNoIGFzIHJlYWRvbmx5LiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pCiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlCiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS4KICogVGhlIGBuZ1JlYWRvbmx5YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGByZWFkb25seWAgYXR0cmlidXRlLgogKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlcwogKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi4KICogQGV4YW1wbGUKICAgIDxleGFtcGxlPgogICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICBDaGVjayBtZSB0byBtYWtlIHRleHQgcmVhZG9ubHk6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9ImNoZWNrZWQiPjxici8+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5nLXJlYWRvbmx5PSJjaGVja2VkIiB2YWx1ZT0iSSdtIEFuZ3VsYXIiLz4KICAgICAgPC9maWxlPgogICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSByZWFkb25seSBhdHRyJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ1t0eXBlPSJ0ZXh0Il0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlRmFsc3koKTsKICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnW3R5cGU9InRleHQiXScpKS5nZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JykpLnRvQmVUcnV0aHkoKTsKICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKgogKiBAZWxlbWVudCBJTlBVVAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nUmVhZG9ubHkgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSwKICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgInJlYWRvbmx5IiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudAogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1NlbGVjdGVkCiAqIEByZXN0cmljdCBBCiAqIEBwcmlvcml0eSAxMDAKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlcwogKiBzdWNoIGFzIHNlbGVjdGVkLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pCiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlCiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS4KICogVGhlIGBuZ1NlbGVjdGVkYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGBzZWxlY3RlZGAgYXR0cmlidXRlLgogKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlcwogKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi4KICoKICogQGV4YW1wbGUKICAgIDxleGFtcGxlPgogICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICBDaGVjayBtZSB0byBzZWxlY3Q6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9InNlbGVjdGVkIj48YnIvPgogICAgICAgIDxzZWxlY3Q+CiAgICAgICAgICA8b3B0aW9uPkhlbGxvITwvb3B0aW9uPgogICAgICAgICAgPG9wdGlvbiBpZD0iZ3JlZXQiIG5nLXNlbGVjdGVkPSJzZWxlY3RlZCI+R3JlZXRpbmdzITwvb3B0aW9uPgogICAgICAgIDwvc2VsZWN0PgogICAgICA8L2ZpbGU+CiAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgIGl0KCdzaG91bGQgc2VsZWN0IEdyZWV0aW5ncyEnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdncmVldCcpKS5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpLnRvQmVGYWxzeSgpOwogICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc2VsZWN0ZWQnKSkuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdncmVldCcpKS5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpLnRvQmVUcnV0aHkoKTsKICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKgogKiBAZWxlbWVudCBPUFRJT04KICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1NlbGVjdGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksCiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlICJzZWxlY3RlZCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnQKICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ09wZW4KICogQHJlc3RyaWN0IEEKICogQHByaW9yaXR5IDEwMAogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIEhUTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSB2YWx1ZXMgb2YgYm9vbGVhbiBhdHRyaWJ1dGVzCiAqIHN1Y2ggYXMgb3Blbi4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKQogKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZQogKiBiaW5kaW5nIGluZm9ybWF0aW9uIHdvdWxkIGJlIGxvc3Qgd2hlbiB0aGUgYnJvd3NlciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUuCiAqIFRoZSBgbmdPcGVuYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGBvcGVuYCBhdHRyaWJ1dGUuCiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzCiAqIGEgcGVybWFuZW50IHJlbGlhYmxlIHBsYWNlIHRvIHN0b3JlIHRoZSBiaW5kaW5nIGluZm9ybWF0aW9uLgogKiBAZXhhbXBsZQogICAgIDxleGFtcGxlPgogICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgIENoZWNrIG1lIGNoZWNrIG11bHRpcGxlOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJvcGVuIj48YnIvPgogICAgICAgICA8ZGV0YWlscyBpZD0iZGV0YWlscyIgbmctb3Blbj0ib3BlbiI+CiAgICAgICAgICAgIDxzdW1tYXJ5PlNob3cvSGlkZSBtZTwvc3VtbWFyeT4KICAgICAgICAgPC9kZXRhaWxzPgogICAgICAgPC9maWxlPgogICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIG9wZW4nLCBmdW5jdGlvbigpIHsKICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZUZhbHN5KCk7CiAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnb3BlbicpKS5jbGljaygpOwogICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdkZXRhaWxzJykpLmdldEF0dHJpYnV0ZSgnb3BlbicpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgIH0pOwogICAgICAgPC9maWxlPgogICAgIDwvZXhhbXBsZT4KICoKICogQGVsZW1lbnQgREVUQUlMUwogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nT3BlbiBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LAogKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSAib3BlbiIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnQKICovCgp2YXIgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMgPSB7fTsKCgovLyBib29sZWFuIGF0dHJzIGFyZSBldmFsdWF0ZWQKZm9yRWFjaChCT09MRUFOX0FUVFIsIGZ1bmN0aW9uKHByb3BOYW1lLCBhdHRyTmFtZSkgewogIC8vIGJpbmRpbmcgdG8gbXVsdGlwbGUgaXMgbm90IHN1cHBvcnRlZAogIGlmIChwcm9wTmFtZSA9PSAibXVsdGlwbGUiKSByZXR1cm47CgogIHZhciBub3JtYWxpemVkID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgYXR0ck5hbWUpOwogIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICByZXN0cmljdDogJ0EnLAogICAgICBwcmlvcml0eTogMTAwLAogICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25vcm1hbGl6ZWRdLCBmdW5jdGlvbiBuZ0Jvb2xlYW5BdHRyV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgICAgIGF0dHIuJHNldChhdHRyTmFtZSwgISF2YWx1ZSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CiAgfTsKfSk7CgovLyBhbGlhc2VkIGlucHV0IGF0dHJzIGFyZSBldmFsdWF0ZWQKZm9yRWFjaChBTElBU0VEX0FUVFIsIGZ1bmN0aW9uKGh0bWxBdHRyLCBuZ0F0dHIpIHsKICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tuZ0F0dHJdID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBwcmlvcml0eTogMTAwLAogICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgIC8vc3BlY2lhbCBjYXNlIG5nUGF0dGVybiB3aGVuIGEgbGl0ZXJhbCByZWd1bGFyIGV4cHJlc3Npb24gdmFsdWUKICAgICAgICAvL2lzIHVzZWQgYXMgdGhlIGV4cHJlc3Npb24gKHRoaXMgd2F5IHdlIGRvbid0IGhhdmUgdG8gd2F0Y2ggYW55dGhpbmcpLgogICAgICAgIGlmIChuZ0F0dHIgPT09ICJuZ1BhdHRlcm4iICYmIGF0dHIubmdQYXR0ZXJuLmNoYXJBdCgwKSA9PSAiLyIpIHsKICAgICAgICAgIHZhciBtYXRjaCA9IGF0dHIubmdQYXR0ZXJuLm1hdGNoKFJFR0VYX1NUUklOR19SRUdFWFApOwogICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgIGF0dHIuJHNldCgibmdQYXR0ZXJuIiwgbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0pKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbmdBdHRyXSwgZnVuY3Rpb24gbmdBdHRyQWxpYXNXYXRjaEFjdGlvbih2YWx1ZSkgewogICAgICAgICAgYXR0ci4kc2V0KG5nQXR0ciwgdmFsdWUpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9OwogIH07Cn0pOwoKLy8gbmctc3JjLCBuZy1zcmNzZXQsIG5nLWhyZWYgYXJlIGludGVycG9sYXRlZApmb3JFYWNoKFsnc3JjJywgJ3NyY3NldCcsICdocmVmJ10sIGZ1bmN0aW9uKGF0dHJOYW1lKSB7CiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7CiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgIHByaW9yaXR5OiA5OSwgLy8gaXQgbmVlZHMgdG8gcnVuIGFmdGVyIHRoZSBhdHRyaWJ1dGVzIGFyZSBpbnRlcnBvbGF0ZWQKICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICB2YXIgcHJvcE5hbWUgPSBhdHRyTmFtZSwKICAgICAgICAgICAgbmFtZSA9IGF0dHJOYW1lOwoKICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdocmVmJyAmJgogICAgICAgICAgICB0b1N0cmluZy5jYWxsKGVsZW1lbnQucHJvcCgnaHJlZicpKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJykgewogICAgICAgICAgbmFtZSA9ICd4bGlua0hyZWYnOwogICAgICAgICAgYXR0ci4kYXR0cltuYW1lXSA9ICd4bGluazpocmVmJzsKICAgICAgICAgIHByb3BOYW1lID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIGF0dHIuJG9ic2VydmUobm9ybWFsaXplZCwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgIGlmICghdmFsdWUpIHsKICAgICAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnaHJlZicpIHsKICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbnVsbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIGF0dHIuJHNldChuYW1lLCB2YWx1ZSk7CgogICAgICAgICAgLy8gb24gSUUsIGlmICJuZzpzcmMiIGRpcmVjdGl2ZSBkZWNsYXJhdGlvbiBpcyB1c2VkIGFuZCAic3JjIiBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdAogICAgICAgICAgLy8gdGhlbiBjYWxsaW5nIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmMnLCAnZm9vJykgZG9lc24ndCBkbyBhbnl0aGluZywgc28gd2UgbmVlZAogICAgICAgICAgLy8gdG8gc2V0IHRoZSBwcm9wZXJ0eSBhcyB3ZWxsIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LgogICAgICAgICAgLy8gd2UgdXNlIGF0dHJbYXR0ck5hbWVdIHZhbHVlIHNpbmNlICRzZXQgY2FuIHNhbml0aXplIHRoZSB1cmwuCiAgICAgICAgICBpZiAobXNpZSAmJiBwcm9wTmFtZSkgZWxlbWVudC5wcm9wKHByb3BOYW1lLCBhdHRyW25hbWVdKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKICB9Owp9KTsKCi8qIGdsb2JhbCAtbnVsbEZvcm1DdHJsLCAtU1VCTUlUVEVEX0NMQVNTICovCnZhciBudWxsRm9ybUN0cmwgPSB7CiAgJGFkZENvbnRyb2w6IG5vb3AsCiAgJHJlbW92ZUNvbnRyb2w6IG5vb3AsCiAgJHNldFZhbGlkaXR5OiBub29wLAogICRzZXREaXJ0eTogbm9vcCwKICAkc2V0UHJpc3RpbmU6IG5vb3AsCiAgJHNldFN1Ym1pdHRlZDogbm9vcAp9LApTVUJNSVRURURfQ0xBU1MgPSAnbmctc3VibWl0dGVkJzsKCi8qKgogKiBAbmdkb2MgdHlwZQogKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyCiAqCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybSB5ZXQuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0uCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgYWxsIG9mIHRoZSBjb250YWluaW5nIGZvcm1zIGFuZCBjb250cm9scyBhcmUgdmFsaWQuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgY29udGFpbmluZyBjb250cm9sIG9yIGZvcm0gaXMgaW52YWxpZC4KICoKICogQHByb3BlcnR5IHtPYmplY3R9ICRlcnJvciBJcyBhbiBvYmplY3QgaGFzaCwgY29udGFpbmluZyByZWZlcmVuY2VzIHRvIGFsbCBpbnZhbGlkIGNvbnRyb2xzIG9yCiAqICBmb3Jtcywgd2hlcmU6CiAqCiAqICAtIGtleXMgYXJlIHZhbGlkYXRpb24gdG9rZW5zIChlcnJvciBuYW1lcyksCiAqICAtIHZhbHVlcyBhcmUgYXJyYXlzIG9mIGNvbnRyb2xzIG9yIGZvcm1zIHRoYXQgYXJlIGludmFsaWQgZm9yIGdpdmVuIGVycm9yIG5hbWUuCiAqCiAqCiAqICBCdWlsdC1pbiB2YWxpZGF0aW9uIHRva2VuczoKICoKICogIC0gYGVtYWlsYAogKiAgLSBgbWF4YAogKiAgLSBgbWF4bGVuZ3RoYAogKiAgLSBgbWluYAogKiAgLSBgbWlubGVuZ3RoYAogKiAgLSBgbnVtYmVyYAogKiAgLSBgcGF0dGVybmAKICogIC0gYHJlcXVpcmVkYAogKiAgLSBgdXJsYAogKgogKiBAZGVzY3JpcHRpb24KICogYEZvcm1Db250cm9sbGVyYCBrZWVwcyB0cmFjayBvZiBhbGwgaXRzIGNvbnRyb2xzIGFuZCBuZXN0ZWQgZm9ybXMgYXMgd2VsbCBhcyB0aGUgc3RhdGUgb2YgdGhlbSwKICogc3VjaCBhcyBiZWluZyB2YWxpZC9pbnZhbGlkIG9yIGRpcnR5L3ByaXN0aW5lLgogKgogKiBFYWNoIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBmb3JtfSBkaXJlY3RpdmUgY3JlYXRlcyBhbiBpbnN0YW5jZQogKiBvZiBgRm9ybUNvbnRyb2xsZXJgLgogKgogKi8KLy9hc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGUKRm9ybUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRzY29wZScsICckYW5pbWF0ZSddOwpmdW5jdGlvbiBGb3JtQ29udHJvbGxlcihlbGVtZW50LCBhdHRycywgJHNjb3BlLCAkYW5pbWF0ZSkgewogIHZhciBmb3JtID0gdGhpcywKICAgICAgcGFyZW50Rm9ybSA9IGVsZW1lbnQucGFyZW50KCkuY29udHJvbGxlcignZm9ybScpIHx8IG51bGxGb3JtQ3RybCwKICAgICAgaW52YWxpZENvdW50ID0gMCwgLy8gdXNlZCB0byBlYXNpbHkgZGV0ZXJtaW5lIGlmIHdlIGFyZSB2YWxpZAogICAgICBlcnJvcnMgPSBmb3JtLiRlcnJvciA9IHt9LAogICAgICBjb250cm9scyA9IFtdOwoKICAvLyBpbml0IHN0YXRlCiAgZm9ybS4kbmFtZSA9IGF0dHJzLm5hbWUgfHwgYXR0cnMubmdGb3JtOwogIGZvcm0uJGRpcnR5ID0gZmFsc2U7CiAgZm9ybS4kcHJpc3RpbmUgPSB0cnVlOwogIGZvcm0uJHZhbGlkID0gdHJ1ZTsKICBmb3JtLiRpbnZhbGlkID0gZmFsc2U7CiAgZm9ybS4kc3VibWl0dGVkID0gZmFsc2U7CgogIHBhcmVudEZvcm0uJGFkZENvbnRyb2woZm9ybSk7CgogIC8vIFNldHVwIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbnRyb2wKICBlbGVtZW50LmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKTsKICB0b2dnbGVWYWxpZENzcyh0cnVlKTsKCiAgLy8gY29udmVuaWVuY2UgbWV0aG9kIGZvciBlYXN5IHRvZ2dsaW5nIG9mIGNsYXNzZXMKICBmdW5jdGlvbiB0b2dnbGVWYWxpZENzcyhpc1ZhbGlkLCB2YWxpZGF0aW9uRXJyb3JLZXkpIHsKICAgIHZhbGlkYXRpb25FcnJvcktleSA9IHZhbGlkYXRpb25FcnJvcktleSA/ICctJyArIHNuYWtlX2Nhc2UodmFsaWRhdGlvbkVycm9yS2V5LCAnLScpIDogJyc7CiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCAoaXNWYWxpZCA/IElOVkFMSURfQ0xBU1MgOiBWQUxJRF9DTEFTUykgKyB2YWxpZGF0aW9uRXJyb3JLZXkpOwogICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgKGlzVmFsaWQgPyBWQUxJRF9DTEFTUyA6IElOVkFMSURfQ0xBU1MpICsgdmFsaWRhdGlvbkVycm9yS2V5KTsKICB9CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUm9sbGJhY2sgYWxsIGZvcm0gY29udHJvbHMgcGVuZGluZyB1cGRhdGVzIHRvIHRoZSBgJG1vZGVsVmFsdWVgLgogICAqCiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlCiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIFRoaXMgbWV0aG9kIGlzIHR5cGljYWxseSBuZWVkZWQgYnkgdGhlIHJlc2V0IGJ1dHRvbiBvZgogICAqIGEgZm9ybSB0aGF0IHVzZXMgYG5nLW1vZGVsLW9wdGlvbnNgIHRvIHBlbmQgdXBkYXRlcy4KICAgKi8KICBmb3JtLiRyb2xsYmFja1ZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkgewogICAgZm9yRWFjaChjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkgewogICAgICBjb250cm9sLiRyb2xsYmFja1ZpZXdWYWx1ZSgpOwogICAgfSk7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGNvbW1pdFZpZXdWYWx1ZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogQ29tbWl0IGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC4KICAgKgogICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZQogICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmAKICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy4KICAgKi8KICBmb3JtLiRjb21taXRWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHsKICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHsKICAgICAgY29udHJvbC4kY29tbWl0Vmlld1ZhbHVlKCk7CiAgICB9KTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkYWRkQ29udHJvbAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmVnaXN0ZXIgYSBjb250cm9sIHdpdGggdGhlIGZvcm0uCiAgICoKICAgKiBJbnB1dCBlbGVtZW50cyB1c2luZyBuZ01vZGVsQ29udHJvbGxlciBkbyB0aGlzIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGV5IGFyZSBsaW5rZWQuCiAgICovCiAgZm9ybS4kYWRkQ29udHJvbCA9IGZ1bmN0aW9uKGNvbnRyb2wpIHsKICAgIC8vIEJyZWFraW5nIGNoYW5nZSAtIGJlZm9yZSwgaW5wdXRzIHdob3NlIG5hbWUgd2FzICJoYXNPd25Qcm9wZXJ0eSIgd2VyZSBxdWlldGx5IGlnbm9yZWQKICAgIC8vIGFuZCBub3QgYWRkZWQgdG8gdGhlIHNjb3BlLiAgTm93IHdlIHRocm93IGFuIGVycm9yLgogICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkoY29udHJvbC4kbmFtZSwgJ2lucHV0Jyk7CiAgICBjb250cm9scy5wdXNoKGNvbnRyb2wpOwoKICAgIGlmIChjb250cm9sLiRuYW1lKSB7CiAgICAgIGZvcm1bY29udHJvbC4kbmFtZV0gPSBjb250cm9sOwogICAgfQogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRyZW1vdmVDb250cm9sCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBEZXJlZ2lzdGVyIGEgY29udHJvbCBmcm9tIHRoZSBmb3JtLgogICAqCiAgICogSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5IHdoZW4gdGhleSBhcmUgZGVzdHJveWVkLgogICAqLwogIGZvcm0uJHJlbW92ZUNvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sKSB7CiAgICBpZiAoY29udHJvbC4kbmFtZSAmJiBmb3JtW2NvbnRyb2wuJG5hbWVdID09PSBjb250cm9sKSB7CiAgICAgIGRlbGV0ZSBmb3JtW2NvbnRyb2wuJG5hbWVdOwogICAgfQogICAgZm9yRWFjaChlcnJvcnMsIGZ1bmN0aW9uKHF1ZXVlLCB2YWxpZGF0aW9uVG9rZW4pIHsKICAgICAgZm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvblRva2VuLCB0cnVlLCBjb250cm9sKTsKICAgIH0pOwoKICAgIGFycmF5UmVtb3ZlKGNvbnRyb2xzLCBjb250cm9sKTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0VmFsaWRpdHkKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgdGhlIHZhbGlkaXR5IG9mIGEgZm9ybSBjb250cm9sLgogICAqCiAgICogVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBwYXJlbnQgZm9ybXMuCiAgICovCiAgZm9ybS4kc2V0VmFsaWRpdHkgPSBmdW5jdGlvbih2YWxpZGF0aW9uVG9rZW4sIGlzVmFsaWQsIGNvbnRyb2wpIHsKICAgIHZhciBxdWV1ZSA9IGVycm9yc1t2YWxpZGF0aW9uVG9rZW5dOwoKICAgIGlmIChpc1ZhbGlkKSB7CiAgICAgIGlmIChxdWV1ZSkgewogICAgICAgIGFycmF5UmVtb3ZlKHF1ZXVlLCBjb250cm9sKTsKICAgICAgICBpZiAoIXF1ZXVlLmxlbmd0aCkgewogICAgICAgICAgaW52YWxpZENvdW50LS07CiAgICAgICAgICBpZiAoIWludmFsaWRDb3VudCkgewogICAgICAgICAgICB0b2dnbGVWYWxpZENzcyhpc1ZhbGlkKTsKICAgICAgICAgICAgZm9ybS4kdmFsaWQgPSB0cnVlOwogICAgICAgICAgICBmb3JtLiRpbnZhbGlkID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgICBlcnJvcnNbdmFsaWRhdGlvblRva2VuXSA9IGZhbHNlOwogICAgICAgICAgdG9nZ2xlVmFsaWRDc3ModHJ1ZSwgdmFsaWRhdGlvblRva2VuKTsKICAgICAgICAgIHBhcmVudEZvcm0uJHNldFZhbGlkaXR5KHZhbGlkYXRpb25Ub2tlbiwgdHJ1ZSwgZm9ybSk7CiAgICAgICAgfQogICAgICB9CgogICAgfSBlbHNlIHsKICAgICAgaWYgKCFpbnZhbGlkQ291bnQpIHsKICAgICAgICB0b2dnbGVWYWxpZENzcyhpc1ZhbGlkKTsKICAgICAgfQogICAgICBpZiAocXVldWUpIHsKICAgICAgICBpZiAoaW5jbHVkZXMocXVldWUsIGNvbnRyb2wpKSByZXR1cm47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZXJyb3JzW3ZhbGlkYXRpb25Ub2tlbl0gPSBxdWV1ZSA9IFtdOwogICAgICAgIGludmFsaWRDb3VudCsrOwogICAgICAgIHRvZ2dsZVZhbGlkQ3NzKGZhbHNlLCB2YWxpZGF0aW9uVG9rZW4pOwogICAgICAgIHBhcmVudEZvcm0uJHNldFZhbGlkaXR5KHZhbGlkYXRpb25Ub2tlbiwgZmFsc2UsIGZvcm0pOwogICAgICB9CiAgICAgIHF1ZXVlLnB1c2goY29udHJvbCk7CgogICAgICBmb3JtLiR2YWxpZCA9IGZhbHNlOwogICAgICBmb3JtLiRpbnZhbGlkID0gdHJ1ZTsKICAgIH0KICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0RGlydHkKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgdGhlIGZvcm0gdG8gYSBkaXJ0eSBzdGF0ZS4KICAgKgogICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gYWRkIHRoZSAnbmctZGlydHknIGNsYXNzIGFuZCBzZXQgdGhlIGZvcm0gdG8gYSBkaXJ0eQogICAqIHN0YXRlIChuZy1kaXJ0eSBjbGFzcykuIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gcGFyZW50IGZvcm1zLgogICAqLwogIGZvcm0uJHNldERpcnR5ID0gZnVuY3Rpb24oKSB7CiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBQUklTVElORV9DTEFTUyk7CiAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBESVJUWV9DTEFTUyk7CiAgICBmb3JtLiRkaXJ0eSA9IHRydWU7CiAgICBmb3JtLiRwcmlzdGluZSA9IGZhbHNlOwogICAgcGFyZW50Rm9ybS4kc2V0RGlydHkoKTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0UHJpc3RpbmUKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHByaXN0aW5lIHN0YXRlLgogICAqCiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBpdHMgcHJpc3RpbmUKICAgKiBzdGF0ZSAobmctcHJpc3RpbmUgY2xhc3MpLiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIGFsbCB0aGUgY29udHJvbHMgY29udGFpbmVkCiAgICogaW4gdGhpcyBmb3JtLgogICAqCiAgICogU2V0dGluZyBhIGZvcm0gYmFjayB0byBhIHByaXN0aW5lIHN0YXRlIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHdlIHdhbnQgdG8gJ3JldXNlJyBhIGZvcm0gYWZ0ZXIKICAgKiBzYXZpbmcgb3IgcmVzZXR0aW5nIGl0LgogICAqLwogIGZvcm0uJHNldFByaXN0aW5lID0gZnVuY3Rpb24gKCkgewogICAgJGFuaW1hdGUuc2V0Q2xhc3MoZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MsIERJUlRZX0NMQVNTICsgJyAnICsgU1VCTUlUVEVEX0NMQVNTKTsKICAgIGZvcm0uJGRpcnR5ID0gZmFsc2U7CiAgICBmb3JtLiRwcmlzdGluZSA9IHRydWU7CiAgICBmb3JtLiRzdWJtaXR0ZWQgPSBmYWxzZTsKICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHsKICAgICAgY29udHJvbC4kc2V0UHJpc3RpbmUoKTsKICAgIH0pOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyI3NldFN1Ym1pdHRlZAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgc3VibWl0dGVkIHN0YXRlLgogICAqLwogIGZvcm0uJHNldFN1Ym1pdHRlZCA9IGZ1bmN0aW9uICgpIHsKICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsIFNVQk1JVFRFRF9DTEFTUyk7CiAgICBmb3JtLiRzdWJtaXR0ZWQgPSB0cnVlOwogICAgcGFyZW50Rm9ybS4kc2V0U3VibWl0dGVkKCk7CiAgfTsKfQoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdGb3JtCiAqIEByZXN0cmljdCBFQUMKICoKICogQGRlc2NyaXB0aW9uCiAqIE5lc3RhYmxlIGFsaWFzIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBgZm9ybWB9IGRpcmVjdGl2ZS4gSFRNTAogKiBkb2VzIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGZvcm0gZWxlbWVudHMuIEl0IGlzIHVzZWZ1bCB0byBuZXN0IGZvcm1zLCBmb3IgZXhhbXBsZSBpZiB0aGUgdmFsaWRpdHkgb2YgYQogKiBzdWItZ3JvdXAgb2YgY29udHJvbHMgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC4KICoKICogTm90ZTogdGhlIHB1cnBvc2Ugb2YgYG5nRm9ybWAgaXMgdG8gZ3JvdXAgY29udHJvbHMsCiAqIGJ1dCBub3QgdG8gYmUgYSByZXBsYWNlbWVudCBmb3IgdGhlIGA8Zm9ybT5gIHRhZyB3aXRoIGFsbCBvZiBpdHMgY2FwYWJpbGl0aWVzCiAqIChlLmcuIHBvc3RpbmcgdG8gdGhlIHNlcnZlciwgLi4uKS4KICoKICogQHBhcmFtIHtzdHJpbmc9fSBuZ0Zvcm18bmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50bwogKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLgogKgogKi8KCiAvKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBmb3JtCiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEaXJlY3RpdmUgdGhhdCBpbnN0YW50aWF0ZXMKICoge0BsaW5rIGZvcm0uRm9ybUNvbnRyb2xsZXIgRm9ybUNvbnRyb2xsZXJ9LgogKgogKiBJZiB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgaXMgcHVibGlzaGVkIG9udG8gdGhlIGN1cnJlbnQgc2NvcGUgdW5kZXIKICogdGhpcyBuYW1lLgogKgogKiAjIEFsaWFzOiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nRm9ybSBgbmdGb3JtYH0KICoKICogSW4gQW5ndWxhciBmb3JtcyBjYW4gYmUgbmVzdGVkLiBUaGlzIG1lYW5zIHRoYXQgdGhlIG91dGVyIGZvcm0gaXMgdmFsaWQgd2hlbiBhbGwgb2YgdGhlIGNoaWxkCiAqIGZvcm1zIGFyZSB2YWxpZCBhcyB3ZWxsLiBIb3dldmVyLCBicm93c2VycyBkbyBub3QgYWxsb3cgbmVzdGluZyBvZiBgPGZvcm0+YCBlbGVtZW50cywgc28KICogQW5ndWxhciBwcm92aWRlcyB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGRpcmVjdGl2ZSB3aGljaCBiZWhhdmVzIGlkZW50aWNhbGx5IHRvCiAqIGA8Zm9ybT5gIGJ1dCBjYW4gYmUgbmVzdGVkLiAgVGhpcyBhbGxvd3MgeW91IHRvIGhhdmUgbmVzdGVkIGZvcm1zLCB3aGljaCBpcyB2ZXJ5IHVzZWZ1bCB3aGVuCiAqIHVzaW5nIEFuZ3VsYXIgdmFsaWRhdGlvbiBkaXJlY3RpdmVzIGluIGZvcm1zIHRoYXQgYXJlIGR5bmFtaWNhbGx5IGdlbmVyYXRlZCB1c2luZyB0aGUKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSBkaXJlY3RpdmUuIFNpbmNlIHlvdSBjYW5ub3QgZHluYW1pY2FsbHkgZ2VuZXJhdGUgdGhlIGBuYW1lYAogKiBhdHRyaWJ1dGUgb2YgaW5wdXQgZWxlbWVudHMgdXNpbmcgaW50ZXJwb2xhdGlvbiwgeW91IGhhdmUgdG8gd3JhcCBlYWNoIHNldCBvZiByZXBlYXRlZCBpbnB1dHMgaW4gYW4KICogYG5nRm9ybWAgZGlyZWN0aXZlIGFuZCBuZXN0IHRoZXNlIGluIGFuIG91dGVyIGBmb3JtYCBlbGVtZW50LgogKgogKgogKiAjIENTUyBjbGFzc2VzCiAqICAtIGBuZy12YWxpZGAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHZhbGlkLgogKiAgLSBgbmctaW52YWxpZGAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIGludmFsaWQuCiAqICAtIGBuZy1wcmlzdGluZWAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHByaXN0aW5lLgogKiAgLSBgbmctZGlydHlgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBkaXJ0eS4KICogIC0gYG5nLXN1Ym1pdHRlZGAgaXMgc2V0IGlmIHRoZSBmb3JtIHdhcyBzdWJtaXR0ZWQuCiAqCiAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLgogKgogKgogKiAjIFN1Ym1pdHRpbmcgYSBmb3JtIGFuZCBwcmV2ZW50aW5nIHRoZSBkZWZhdWx0IGFjdGlvbgogKgogKiBTaW5jZSB0aGUgcm9sZSBvZiBmb3JtcyBpbiBjbGllbnQtc2lkZSBBbmd1bGFyIGFwcGxpY2F0aW9ucyBpcyBkaWZmZXJlbnQgdGhhbiBpbiBjbGFzc2ljYWwKICogcm91bmR0cmlwIGFwcHMsIGl0IGlzIGRlc2lyYWJsZSBmb3IgdGhlIGJyb3dzZXIgbm90IHRvIHRyYW5zbGF0ZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGludG8gYSBmdWxsCiAqIHBhZ2UgcmVsb2FkIHRoYXQgc2VuZHMgdGhlIGRhdGEgdG8gdGhlIHNlcnZlci4gSW5zdGVhZCBzb21lIGphdmFzY3JpcHQgbG9naWMgc2hvdWxkIGJlIHRyaWdnZXJlZAogKiB0byBoYW5kbGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbiBhbiBhcHBsaWNhdGlvbi1zcGVjaWZpYyB3YXkuCiAqCiAqIEZvciB0aGlzIHJlYXNvbiwgQW5ndWxhciBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKGZvcm0gc3VibWlzc2lvbiB0byB0aGUgc2VydmVyKSB1bmxlc3MgdGhlCiAqIGA8Zm9ybT5gIGVsZW1lbnQgaGFzIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBzcGVjaWZpZWQuCiAqCiAqIFlvdSBjYW4gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHR3byB3YXlzIHRvIHNwZWNpZnkgd2hhdCBqYXZhc2NyaXB0IG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4KICogYSBmb3JtIGlzIHN1Ym1pdHRlZDoKICoKICogLSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fSBkaXJlY3RpdmUgb24gdGhlIGZvcm0gZWxlbWVudAogKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSBkaXJlY3RpdmUgb24gdGhlIGZpcnN0CiAgKiAgYnV0dG9uIG9yIGlucHV0IGZpZWxkIG9mIHR5cGUgc3VibWl0IChpbnB1dFt0eXBlPXN1Ym1pdF0pCiAqCiAqIFRvIHByZXZlbnQgZG91YmxlIGV4ZWN1dGlvbiBvZiB0aGUgaGFuZGxlciwgdXNlIG9ubHkgb25lIG9mIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fQogKiBvciB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlcy4KICogVGhpcyBpcyBiZWNhdXNlIG9mIHRoZSBmb2xsb3dpbmcgZm9ybSBzdWJtaXNzaW9uIHJ1bGVzIGluIHRoZSBIVE1MIHNwZWNpZmljYXRpb246CiAqCiAqIC0gSWYgYSBmb3JtIGhhcyBvbmx5IG9uZSBpbnB1dCBmaWVsZCB0aGVuIGhpdHRpbmcgZW50ZXIgaW4gdGhpcyBmaWVsZCB0cmlnZ2VycyBmb3JtIHN1Ym1pdAogKiAoYG5nU3VibWl0YCkKICogLSBpZiBhIGZvcm0gaGFzIDIrIGlucHV0IGZpZWxkcyBhbmQgbm8gYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlbiBoaXR0aW5nIGVudGVyCiAqIGRvZXNuJ3QgdHJpZ2dlciBzdWJtaXQKICogLSBpZiBhIGZvcm0gaGFzIG9uZSBvciBtb3JlIGlucHV0IGZpZWxkcyBhbmQgb25lIG9yIG1vcmUgYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlbgogKiBoaXR0aW5nIGVudGVyIGluIGFueSBvZiB0aGUgaW5wdXQgZmllbGRzIHdpbGwgdHJpZ2dlciB0aGUgY2xpY2sgaGFuZGxlciBvbiB0aGUgKmZpcnN0KiBidXR0b24gb3IKICogaW5wdXRbdHlwZT1zdWJtaXRdIChgbmdDbGlja2ApICphbmQqIGEgc3VibWl0IGhhbmRsZXIgb24gdGhlIGVuY2xvc2luZyBmb3JtIChgbmdTdWJtaXRgKQogKgogKiBBbnkgcGVuZGluZyBgbmdNb2RlbE9wdGlvbnNgIGNoYW5nZXMgd2lsbCB0YWtlIHBsYWNlIGltbWVkaWF0ZWx5IHdoZW4gYW4gZW5jbG9zaW5nIGZvcm0gaXMKICogc3VibWl0dGVkLiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGAKICogdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuCiAqCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50bwogKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLgogKgogKiAjIyBBbmltYXRpb24gSG9va3MKICoKICogQW5pbWF0aW9ucyBpbiBuZ0Zvcm0gYXJlIHRyaWdnZXJlZCB3aGVuIGFueSBvZiB0aGUgYXNzb2NpYXRlZCBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQuCiAqIFRoZXNlIGNsYXNzZXMgYXJlOiBgLm5nLXByaXN0aW5lYCwgYC5uZy1kaXJ0eWAsIGAubmctaW52YWxpZGAgYW5kIGAubmctdmFsaWRgIGFzIHdlbGwgYXMgYW55CiAqIG90aGVyIHZhbGlkYXRpb25zIHRoYXQgYXJlIHBlcmZvcm1lZCB3aXRoaW4gdGhlIGZvcm0uIEFuaW1hdGlvbnMgaW4gbmdGb3JtIGFyZSBzaW1pbGFyIHRvIGhvdwogKiB0aGV5IHdvcmsgaW4gbmdDbGFzcyBhbmQgYW5pbWF0aW9ucyBjYW4gYmUgaG9va2VkIGludG8gdXNpbmcgQ1NTIHRyYW5zaXRpb25zLCBrZXlmcmFtZXMgYXMgd2VsbAogKiBhcyBKUyBhbmltYXRpb25zLgogKgogKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgYSBzaW1wbGUgd2F5IHRvIHV0aWxpemUgQ1NTIHRyYW5zaXRpb25zIHRvIHN0eWxlIGEgZm9ybSBlbGVtZW50CiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6CiAqCiAqIDxwcmU+CiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZQogKiAvL2FkdmFuY2VkIGFuaW1hdGlvbnMKICogLm15LWZvcm0gewogKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsOwogKiAgIGJhY2tncm91bmQ6IHdoaXRlOwogKiB9CiAqIC5teS1mb3JtLm5nLWludmFsaWQgewogKiAgIGJhY2tncm91bmQ6IHJlZDsKICogICBjb2xvcjp3aGl0ZTsKICogfQogKiA8L3ByZT4KICoKICogQGV4YW1wbGUKICAgIDxleGFtcGxlIGRlcHM9ImFuZ3VsYXItYW5pbWF0ZS5qcyIgYW5pbWF0aW9ucz0idHJ1ZSIgZml4QmFzZT0idHJ1ZSIgbW9kdWxlPSJmb3JtRXhhbXBsZSI+CiAgICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2Zvcm1FeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0Zvcm1Db250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS51c2VyVHlwZSA9ICdndWVzdCc7CiAgICAgICAgICAgfV0pOwogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8c3R5bGU+CiAgICAgICAgLm15LWZvcm0gewogICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzOwogICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgICAgICAgfQogICAgICAgIC5teS1mb3JtLm5nLWludmFsaWQgewogICAgICAgICAgYmFja2dyb3VuZDogcmVkOwogICAgICAgIH0KICAgICAgIDwvc3R5bGU+CiAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkZvcm1Db250cm9sbGVyIiBjbGFzcz0ibXktZm9ybSI+CiAgICAgICAgIHVzZXJUeXBlOiA8aW5wdXQgbmFtZT0iaW5wdXQiIG5nLW1vZGVsPSJ1c2VyVHlwZSIgcmVxdWlyZWQ+CiAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCI+UmVxdWlyZWQhPC9zcGFuPjxicj4KICAgICAgICAgPHR0PnVzZXJUeXBlID0ge3t1c2VyVHlwZX19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyPgogICAgICAgIDwvZm9ybT4KICAgICAgPC9maWxlPgogICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciB1c2VyVHlwZSA9IGVsZW1lbnQoYnkuYmluZGluZygndXNlclR5cGUnKSk7CiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7CgogICAgICAgICAgZXhwZWN0KHVzZXJUeXBlLmdldFRleHQoKSkudG9Db250YWluKCdndWVzdCcpOwogICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTsKICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTsKICAgICAgICAgIHZhciB1c2VySW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyVHlwZScpKTsKCiAgICAgICAgICB1c2VySW5wdXQuY2xlYXIoKTsKICAgICAgICAgIHVzZXJJbnB1dC5zZW5kS2V5cygnJyk7CgogICAgICAgICAgZXhwZWN0KHVzZXJUeXBlLmdldFRleHQoKSkudG9FcXVhbCgndXNlclR5cGUgPScpOwogICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogICAgICAgIH0pOwogICAgICA8L2ZpbGU+CiAgICA8L2V4YW1wbGU+CiAqCiAqLwp2YXIgZm9ybURpcmVjdGl2ZUZhY3RvcnkgPSBmdW5jdGlvbihpc05nRm9ybSkgewogIHJldHVybiBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHsKICAgIHZhciBmb3JtRGlyZWN0aXZlID0gewogICAgICBuYW1lOiAnZm9ybScsCiAgICAgIHJlc3RyaWN0OiBpc05nRm9ybSA/ICdFQUMnIDogJ0UnLAogICAgICBjb250cm9sbGVyOiBGb3JtQ29udHJvbGxlciwKICAgICAgY29tcGlsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHByZTogZnVuY3Rpb24oc2NvcGUsIGZvcm1FbGVtZW50LCBhdHRyLCBjb250cm9sbGVyKSB7CiAgICAgICAgICAgIGlmICghYXR0ci5hY3Rpb24pIHsKICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1c2UganEgZXZlbnRzIGJlY2F1c2UgaWYgYSBmb3JtIGlzIGRlc3Ryb3llZCBkdXJpbmcgc3VibWlzc2lvbiB0aGUgZGVmYXVsdAogICAgICAgICAgICAgIC8vIGFjdGlvbiBpcyBub3QgcHJldmVudGVkLiBzZWUgIzEyMzgKICAgICAgICAgICAgICAvLwogICAgICAgICAgICAgIC8vIElFIDkgaXMgbm90IGFmZmVjdGVkIGJlY2F1c2UgaXQgZG9lc24ndCBmaXJlIGEgc3VibWl0IGV2ZW50IGFuZCB0cnkgdG8gZG8gYSBmdWxsCiAgICAgICAgICAgICAgLy8gcGFnZSByZWxvYWQgaWYgdGhlIGZvcm0gd2FzIGRlc3Ryb3llZCBieSBzdWJtaXNzaW9uIG9mIHRoZSBmb3JtIHZpYSBhIGNsaWNrIGhhbmRsZXIKICAgICAgICAgICAgICAvLyBvbiBhIGJ1dHRvbiBpbiB0aGUgZm9ybS4gTG9va3MgbGlrZSBhbiBJRTkgc3BlY2lmaWMgYnVnLgogICAgICAgICAgICAgIHZhciBoYW5kbGVGb3JtU3VibWlzc2lvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuJGNvbW1pdFZpZXdWYWx1ZSgpOwogICAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRTdWJtaXR0ZWQoKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0CiAgICAgICAgICAgICAgICAgID8gZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICA6IGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7IC8vIElFCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pOwoKICAgICAgICAgICAgICAvLyB1bnJlZ2lzdGVyIHRoZSBwcmV2ZW50RGVmYXVsdCBsaXN0ZW5lciBzbyB0aGF0IHdlIGRvbid0IG5vdCBsZWFrIG1lbW9yeSBidXQgaW4gYQogICAgICAgICAgICAgIC8vIHdheSB0aGF0IHdpbGwgYWNoaWV2ZSB0aGUgcHJldmVudGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24uCiAgICAgICAgICAgICAgZm9ybUVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pOwogICAgICAgICAgICAgICAgfSwgMCwgZmFsc2UpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcGFyZW50Rm9ybUN0cmwgPSBmb3JtRWxlbWVudC5wYXJlbnQoKS5jb250cm9sbGVyKCdmb3JtJyksCiAgICAgICAgICAgICAgICBhbGlhcyA9IGF0dHIubmFtZSB8fCBhdHRyLm5nRm9ybTsKCiAgICAgICAgICAgIGlmIChhbGlhcykgewogICAgICAgICAgICAgIHNldHRlcihzY29wZSwgYWxpYXMsIGNvbnRyb2xsZXIsIGFsaWFzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocGFyZW50Rm9ybUN0cmwpIHsKICAgICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHBhcmVudEZvcm1DdHJsLiRyZW1vdmVDb250cm9sKGNvbnRyb2xsZXIpOwogICAgICAgICAgICAgICAgaWYgKGFsaWFzKSB7CiAgICAgICAgICAgICAgICAgIHNldHRlcihzY29wZSwgYWxpYXMsIHVuZGVmaW5lZCwgYWxpYXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZXh0ZW5kKGNvbnRyb2xsZXIsIG51bGxGb3JtQ3RybCk7IC8vc3RvcCBwcm9wYWdhdGluZyBjaGlsZCBkZXN0cnVjdGlvbiBoYW5kbGVycyB1cHdhcmRzCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBmb3JtRGlyZWN0aXZlOwogIH1dOwp9OwoKdmFyIGZvcm1EaXJlY3RpdmUgPSBmb3JtRGlyZWN0aXZlRmFjdG9yeSgpOwp2YXIgbmdGb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkodHJ1ZSk7CgovKiBnbG9iYWwgVkFMSURfQ0xBU1M6IHRydWUsCiAgSU5WQUxJRF9DTEFTUzogdHJ1ZSwKICBQUklTVElORV9DTEFTUzogdHJ1ZSwKICBESVJUWV9DTEFTUzogdHJ1ZSwKICBVTlRPVUNIRURfQ0xBU1M6IHRydWUsCiAgVE9VQ0hFRF9DTEFTUzogdHJ1ZSwKKi8KCnZhciBVUkxfUkVHRVhQID0gL14oZnRwfGh0dHB8aHR0cHMpOlwvXC8oXHcrOnswLDF9XHcqQCk/KFxTKykoOlswLTldKyk/KFwvfFwvKFtcdyMhOi4/Kz0mJUAhXC1cL10pKT8kLzsKdmFyIEVNQUlMX1JFR0VYUCA9IC9eW2EtejAtOSEjJCUmJyorXC89P15fYHt8fX4uLV0rQFthLXowLTldKFthLXowLTktXSpbYS16MC05XSk/KFwuW2EtejAtOV0oW2EtejAtOS1dKlthLXowLTldKT8pKiQvaTsKdmFyIE5VTUJFUl9SRUdFWFAgPSAvXlxzKihcLXxcKyk/KFxkK3woXGQqKFwuXGQqKSkpXHMqJC87CnZhciBEQVRFX1JFR0VYUCA9IC9eKFxkezR9KS0oXGR7Mn0pLShcZHsyfSkkLzsKdmFyIERBVEVUSU1FTE9DQUxfUkVHRVhQID0gL14oXGR7NH0pLShcZFxkKS0oXGRcZClUKFxkXGQpOihcZFxkKSQvOwp2YXIgV0VFS19SRUdFWFAgPSAvXihcZHs0fSktVyhcZFxkKSQvOwp2YXIgTU9OVEhfUkVHRVhQID0gL14oXGR7NH0pLShcZFxkKSQvOwp2YXIgVElNRV9SRUdFWFAgPSAvXihcZFxkKTooXGRcZCkkLzsKdmFyIERFRkFVTFRfUkVHRVhQID0gLyhccyt8XilkZWZhdWx0KFxzK3wkKS87Cgp2YXIgaW5wdXRUeXBlID0gewoKICAvKioKICAgKiBAbmdkb2MgaW5wdXQKICAgKiBAbmFtZSBpbnB1dFt0ZXh0XQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcsIGluaGVyaXRlZCBieSBtb3N0IG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRzLgogICAqCiAgICogKk5PVEUqIE5vdCBldmVyeSBmZWF0dXJlIG9mZmVyZWQgaXMgYXZhaWxhYmxlIGZvciBhbGwgaW5wdXQgdHlwZXMuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8KICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuCiAgICogICAgbWlubGVuZ3RoLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICAgKiAgICBtYXhsZW5ndGguCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZQogICAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICAgKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlcgogICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LgogICAqICAgIFRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQgZm9yIGlucHV0W3R5cGU9cGFzc3dvcmRdIGNvbnRyb2xzLCB3aGljaCB3aWxsIG5ldmVyIHRyaW0gdGhlCiAgICogICAgaW5wdXQuCiAgICoKICAgKiBAZXhhbXBsZQogICAgICA8ZXhhbXBsZSBuYW1lPSJ0ZXh0LWlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJ0ZXh0SW5wdXRFeGFtcGxlIj4KICAgICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndGV4dElucHV0RXhhbXBsZScsIFtdKQogICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnZ3Vlc3QnOwogICAgICAgICAgICAgICAkc2NvcGUud29yZCA9IC9eXHMqXHcqXHMqJC87CiAgICAgICAgICAgICB9XSk7CiAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgICBTaW5nbGUgd29yZDogPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nLXBhdHRlcm49IndvcmQiIHJlcXVpcmVkIG5nLXRyaW09ImZhbHNlIj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWQiPgogICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5wYXR0ZXJuIj4KICAgICAgICAgICAgIFNpbmdsZSB3b3JkIG9ubHkhPC9zcGFuPgoKICAgICAgICAgICA8dHQ+dGV4dCA9IHt7dGV4dH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2ZpbGU+CiAgICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygndGV4dCcpKTsKICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTsKICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdndWVzdCcpOwogICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dC5jbGVhcigpOwogICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7CgogICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpOwogICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbXVsdGkgd29yZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dC5jbGVhcigpOwogICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnaGVsbG8gd29ybGQnKTsKCiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZmlsZT4KICAgICAgPC9leGFtcGxlPgogICAqLwogICd0ZXh0JzogdGV4dElucHV0VHlwZSwKCiAgICAvKioKICAgICAqIEBuZ2RvYyBpbnB1dAogICAgICogQG5hbWUgaW5wdXRbZGF0ZV0KICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIElucHV0IHdpdGggZGF0ZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnQKICAgICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMQogICAgICogZGF0ZSBmb3JtYXQgKHl5eXktTU0tZGQpLCBmb3IgZXhhbXBsZTogYDIwMDktMDEtMDZgLiBTaW5jZSBtYW55CiAgICAgKiBtb2Rlcm4gYnJvd3NlcnMgZG8gbm90IHlldCBzdXBwb3J0IHRoaXMgaW5wdXQgdHlwZSwgaXQgaXMgaW1wb3J0YW50IHRvIHByb3ZpZGUgY3VlcyB0byB1c2VycyBvbiB0aGUKICAgICAqIGV4cGVjdGVkIGlucHV0IGZvcm1hdCB2aWEgYSBwbGFjZWhvbGRlciBvciBsYWJlbC4gVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLiBUaGlzIG11c3QgYmUgYQogICAgICogdmFsaWQgSVNPIGRhdGUgc3RyaW5nICh5eXl5LU1NLWRkKS4KICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0IGJlCiAgICAgKiBhIHZhbGlkIElTTyBkYXRlIHN0cmluZyAoeXl5eS1NTS1kZCkuCiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8KICAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mCiAgICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlcgogICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgIDxleGFtcGxlIG5hbWU9ImRhdGUtaW5wdXQtZGlyZWN0aXZlIiBtb2R1bGU9ImRhdGVJbnB1dEV4YW1wbGUiPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkYXRlSW5wdXRFeGFtcGxlJywgW10pCiAgICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAgJHNjb3BlLnZhbHVlID0gbmV3IERhdGUoMjAxMywgOSwgMjIpOwogICAgICAgICAgICB9XSk7CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmwiPgogICAgICAgICAgUGljayBhIGRhdGUgaW4gMjAxMzoKICAgICAgICAgIDxpbnB1dCB0eXBlPSJkYXRlIiBpZD0iZXhhbXBsZUlucHV0IiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InZhbHVlIgogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJ5eXl5LU1NLWRkIiBtaW49IjIwMTMtMDEtMDEiIG1heD0iMjAxMy0xMi0zMSIgcmVxdWlyZWQgLz4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLmRhdGUiPgogICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPgogICAgICAgICAgIDx0dD52YWx1ZSA9IHt7dmFsdWUgfCBkYXRlOiAieXl5eS1NTS1kZCJ9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgICA8L2Zvcm0+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUgfCBkYXRlOiAieXl5eS1NTS1kZCInKSk7CiAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpOwogICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpOwoKICAgICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydAogICAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHMKICAgICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuCiAgICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7CiAgICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLgogICAgICAgICAgdmFyIHNjciA9ICJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyAiICsKICAgICAgICAgICJpcHQudmFsdWUgPSAnIiArIHZhbCArICInOyIgKwogICAgICAgICAgImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJyIgKyB2YWwgKyAiJyk7IH0pOyI7CiAgICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTsKICAgICAgICB9CgogICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEzLTEwLTIyJyk7CiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgc2V0SW5wdXQoJycpOwogICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpOwogICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMScpOwogICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTsKICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7CiAgICAgICAgfSk7CiAgICAgPC9maWxlPgogICAgIDwvZXhhbXBsZT4KICAgICAqLwogICdkYXRlJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnZGF0ZScsIERBVEVfUkVHRVhQLAogICAgICAgICBjcmVhdGVEYXRlUGFyc2VyKERBVEVfUkVHRVhQLCBbJ3l5eXknLCAnTU0nLCAnZGQnXSksCiAgICAgICAgICd5eXl5LU1NLWRkJyksCgogICAvKioKICAgICogQG5nZG9jIGlucHV0CiAgICAqIEBuYW1lIGlucHV0W2RhdGVUaW1lTG9jYWxdCiAgICAqCiAgICAqIEBkZXNjcmlwdGlvbgogICAgKiBJbnB1dCB3aXRoIGRhdGV0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydAogICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxCiAgICAqIGxvY2FsIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbSksIGZvciBleGFtcGxlOiBgMjAxMC0xMi0yOFQxNDo1N2AuIFRoZSBtb2RlbCBtdXN0IGJlIGEgRGF0ZSBvYmplY3QuCiAgICAqCiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuIFRoaXMgbXVzdCBiZSBhCiAgICAqIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW0pLgogICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdCBiZQogICAgKiBhIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW0pLgogICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICAqCiAgICAqIEBleGFtcGxlCiAgICA8ZXhhbXBsZSBuYW1lPSJkYXRldGltZWxvY2FsLWlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJkYXRlRXhhbXBsZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPHNjcmlwdD4KICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZGF0ZUV4YW1wbGUnLCBbXSkKICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICRzY29wZS52YWx1ZSA9IG5ldyBEYXRlKDIwMTAsIDExLCAyOCwgMTQsIDU3KTsKICAgICAgICAgIH1dKTsKICAgICAgPC9zY3JpcHQ+CiAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmwiPgogICAgICAgIFBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzoKICAgICAgICA8aW5wdXQgdHlwZT0iZGF0ZXRpbWUtbG9jYWwiIGlkPSJleGFtcGxlSW5wdXQiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idmFsdWUiCiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJ5eXl5LU1NLWRkVEhIOm1tIiBtaW49IjIwMDEtMDEtMDFUMDA6MDAiIG1heD0iMjAxMy0xMi0zMVQwMDowMCIgcmVxdWlyZWQgLz4KICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWQiPgogICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLmRhdGV0aW1lbG9jYWwiPgogICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj4KICAgICAgICA8dHQ+dmFsdWUgPSB7e3ZhbHVlIHwgZGF0ZTogInl5eXktTU0tZGRUSEg6bW0ifX08L3R0Pjxici8+CiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICA8L2Zvcm0+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCd2YWx1ZSB8IGRhdGU6ICJ5eXl5LU1NLWRkVEhIOm1tIicpKTsKICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpOwogICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKTsKCiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0CiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHMKICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuCiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkgewogICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uCiAgICAgICAgdmFyIHNjciA9ICJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyAiICsKICAgICAgICAiaXB0LnZhbHVlID0gJyIgKyB2YWwgKyAiJzsiICsKICAgICAgICAiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnIiArIHZhbCArICInKTsgfSk7IjsKICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTsKICAgICAgfQoKICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEwLTEyLTI4VDE0OjU3Jyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpOwogICAgICB9KTsKCiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgIHNldElucHV0KCcnKTsKICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTsKICAgICAgfSk7CgogICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHsKICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMVQyMzo1OScpOwogICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgICA8L2V4YW1wbGU+CiAgICAqLwogICdkYXRldGltZS1sb2NhbCc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ2RhdGV0aW1lbG9jYWwnLCBEQVRFVElNRUxPQ0FMX1JFR0VYUCwKICAgICAgY3JlYXRlRGF0ZVBhcnNlcihEQVRFVElNRUxPQ0FMX1JFR0VYUCwgWyd5eXl5JywgJ01NJywgJ2RkJywgJ0hIJywgJ21tJ10pLAogICAgICAneXl5eS1NTS1kZFRISDptbScpLAoKICAvKioKICAgKiBAbmdkb2MgaW5wdXQKICAgKiBAbmFtZSBpbnB1dFt0aW1lXQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogSW5wdXQgd2l0aCB0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydAogICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDEKICAgKiBsb2NhbCB0aW1lIGZvcm1hdCAoSEg6bW0pLCBmb3IgZXhhbXBsZTogYDE0OjU3YC4gTW9kZWwgbXVzdCBiZSBhIERhdGUgb2JqZWN0LiBUaGlzIGJpbmRpbmcgd2lsbCBhbHdheXMgb3V0cHV0IGEKICAgKiBEYXRlIG9iamVjdCB0byB0aGUgbW9kZWwgb2YgSmFudWFyeSAxLCAxOTAwLCBvciBsb2NhbCBkYXRlIGBuZXcgRGF0ZSgwLCAwLCAxLCBISCwgbW0pYC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLiBUaGlzIG11c3QgYmUgYQogICAqIHZhbGlkIElTTyB0aW1lIGZvcm1hdCAoSEg6bW0pLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0IGJlIGEKICAgKiB2YWxpZCBJU08gdGltZSBmb3JtYXQgKEhIOm1tKS4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgPGV4YW1wbGUgbmFtZT0idGltZS1pbnB1dC1kaXJlY3RpdmUiIG1vZHVsZT0idGltZUV4YW1wbGUiPgogICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICA8c2NyaXB0PgogICAgICBhbmd1bGFyLm1vZHVsZSgndGltZUV4YW1wbGUnLCBbXSkKICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgJHNjb3BlLnZhbHVlID0gbmV3IERhdGUoMCwgMCwgMSwgMTQsIDU3KTsKICAgICAgICB9XSk7CiAgICAgPC9zY3JpcHQ+CiAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybCI+CiAgICAgICAgUGljayBhIGJldHdlZW4gOGFtIGFuZCA1cG06CiAgICAgICAgPGlucHV0IHR5cGU9InRpbWUiIGlkPSJleGFtcGxlSW5wdXQiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idmFsdWUiCiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJISDptbSIgbWluPSIwODowMCIgbWF4PSIxNzowMCIgcmVxdWlyZWQgLz4KICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWQiPgogICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnRpbWUiPgogICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj4KICAgICAgICA8dHQ+dmFsdWUgPSB7e3ZhbHVlIHwgZGF0ZTogIkhIOm1tIn19PC90dD48YnIvPgogICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICAgICA8L2Zvcm0+CiAgIDwvZmlsZT4KICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUgfCBkYXRlOiAiSEg6bW0iJykpOwogICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7CiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpOwoKICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnQKICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9scwogICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS4KICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7CiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi4KICAgICAgICB2YXIgc2NyID0gInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7ICIgKwogICAgICAgICJpcHQudmFsdWUgPSAnIiArIHZhbCArICInOyIgKwogICAgICAgICJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCciICsgdmFsICsgIicpOyB9KTsiOwogICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpOwogICAgICB9CgogICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHsKICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzE0OjU3Jyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpOwogICAgICB9KTsKCiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgIHNldElucHV0KCcnKTsKICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7CiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTsKICAgICAgfSk7CgogICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHsKICAgICAgICBzZXRJbnB1dCgnMjM6NTknKTsKICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpOwogICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7CiAgICAgIH0pOwogICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICAgKi8KICAndGltZSc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ3RpbWUnLCBUSU1FX1JFR0VYUCwKICAgICAgY3JlYXRlRGF0ZVBhcnNlcihUSU1FX1JFR0VYUCwgWydISCcsICdtbSddKSwKICAgICAnSEg6bW0nKSwKCiAgIC8qKgogICAgKiBAbmdkb2MgaW5wdXQKICAgICogQG5hbWUgaW5wdXRbd2Vla10KICAgICoKICAgICogQGRlc2NyaXB0aW9uCiAgICAqIElucHV0IHdpdGggd2Vlay1vZi10aGUteWVhciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbiB0byBEYXRlLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydAogICAgKiB0aGUgSFRNTDUgd2VlayBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxCiAgICAqIHdlZWsgZm9ybWF0ICh5eXl5LVcjIyksIGZvciBleGFtcGxlOiBgMjAxMy1XMDJgLiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdC4KICAgICoKICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlIGEKICAgICogdmFsaWQgSVNPIHdlZWsgZm9ybWF0ICh5eXl5LVcjIykuCiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0IGJlCiAgICAqIGEgdmFsaWQgSVNPIHdlZWsgZm9ybWF0ICh5eXl5LVcjIykuCiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mCiAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLgogICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgICoKICAgICogQGV4YW1wbGUKICAgIDxleGFtcGxlIG5hbWU9IndlZWstaW5wdXQtZGlyZWN0aXZlIiBtb2R1bGU9IndlZWtFeGFtcGxlIj4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8c2NyaXB0PgogICAgICBhbmd1bGFyLm1vZHVsZSgnd2Vla0V4YW1wbGUnLCBbXSkKICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgJHNjb3BlLnZhbHVlID0gbmV3IERhdGUoMjAxMywgMCwgMyk7CiAgICAgICAgfV0pOwogICAgICA8L3NjcmlwdD4KICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybCI+CiAgICAgICAgUGljayBhIGRhdGUgYmV0d2VlbiBpbiAyMDEzOgogICAgICAgIDxpbnB1dCBpZD0iZXhhbXBsZUlucHV0IiB0eXBlPSJ3ZWVrIiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InZhbHVlIgogICAgICAgICAgICBwbGFjZWhvbGRlcj0iWVlZWS1XIyMiIG1pbj0iMjAxMi1XMzIiIG1heD0iMjAxMy1XNTIiIHJlcXVpcmVkIC8+CiAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci53ZWVrIj4KICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+CiAgICAgICAgPHR0PnZhbHVlID0ge3t2YWx1ZSB8IGRhdGU6ICJ5eXl5LVd3dyJ9fTwvdHQ+PGJyLz4KICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+CiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgIDwvZm9ybT4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbHVlIHwgZGF0ZTogInl5eXktV3d3IicpKTsKICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpOwogICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKTsKCiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0CiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHMKICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuCiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkgewogICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uCiAgICAgICAgdmFyIHNjciA9ICJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyAiICsKICAgICAgICAiaXB0LnZhbHVlID0gJyIgKyB2YWwgKyAiJzsiICsKICAgICAgICAiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnIiArIHZhbCArICInKTsgfSk7IjsKICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTsKICAgICAgfQoKICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEzLVcwMScpOwogICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTsKICAgICAgfSk7CgogICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHsKICAgICAgICBzZXRJbnB1dCgnJyk7CiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpOwogICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7CiAgICAgIH0pOwoKICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7CiAgICAgICAgc2V0SW5wdXQoJzIwMTUtVzAxJyk7CiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTsKICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpOwogICAgICB9KTsKICAgIDwvZmlsZT4KICAgIDwvZXhhbXBsZT4KICAgICovCiAgJ3dlZWsnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCd3ZWVrJywgV0VFS19SRUdFWFAsIHdlZWtQYXJzZXIsICd5eXl5LVd3dycpLAoKICAvKioKICAgKiBAbmdkb2MgaW5wdXQKICAgKiBAbmFtZSBpbnB1dFttb250aF0KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIElucHV0IHdpdGggbW9udGggdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0CiAgICogdGhlIEhUTUw1IG1vbnRoIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDEKICAgKiBtb250aCBmb3JtYXQgKHl5eXktTU0pLCBmb3IgZXhhbXBsZTogYDIwMDktMDFgLiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdC4gSW4gdGhlIGV2ZW50IHRoZSBtb2RlbCBpcwogICAqIG5vdCBzZXQgdG8gdGhlIGZpcnN0IG9mIHRoZSBtb250aCwgdGhlIGZpcnN0IG9mIHRoYXQgbW9kZWwncyBtb250aCBpcyBhc3N1bWVkLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuIFRoaXMgbXVzdCBiZQogICAqIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLiBUaGlzIG11c3QKICAgKiBiZSBhIHZhbGlkIElTTyBtb250aCBmb3JtYXQgKHl5eXktTU0pLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8KICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlcgogICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICoKICAgKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBuYW1lPSJtb250aC1pbnB1dC1kaXJlY3RpdmUiIG1vZHVsZT0ibW9udGhFeGFtcGxlIj4KICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgPHNjcmlwdD4KICAgICAgYW5ndWxhci5tb2R1bGUoJ21vbnRoRXhhbXBsZScsIFtdKQogICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAkc2NvcGUudmFsdWUgPSBuZXcgRGF0ZSgyMDEzLCA5LCAxKTsKICAgICAgICB9XSk7CiAgICAgPC9zY3JpcHQ+CiAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybCI+CiAgICAgICBQaWNrIGEgbW9udGggaW50IDIwMTM6CiAgICAgICA8aW5wdXQgaWQ9ImV4YW1wbGVJbnB1dCIgdHlwZT0ibW9udGgiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idmFsdWUiCiAgICAgICAgICBwbGFjZWhvbGRlcj0ieXl5eS1NTSIgbWluPSIyMDEzLTAxIiBtYXg9IjIwMTMtMTIiIHJlcXVpcmVkIC8+CiAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWQiPgogICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLm1vbnRoIj4KICAgICAgICAgIE5vdCBhIHZhbGlkIG1vbnRoITwvc3Bhbj4KICAgICAgIDx0dD52YWx1ZSA9IHt7dmFsdWUgfCBkYXRlOiAieXl5eS1NTSJ9fTwvdHQ+PGJyLz4KICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICAgICA8L2Zvcm0+CiAgIDwvZmlsZT4KICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUgfCBkYXRlOiAieXl5eS1NTSInKSk7CiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTsKICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSk7CgogICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydAogICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzCiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLgogICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHsKICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLgogICAgICAgIHZhciBzY3IgPSAidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgIiArCiAgICAgICAgImlwdC52YWx1ZSA9ICciICsgdmFsICsgIic7IiArCiAgICAgICAgImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJyIgKyB2YWwgKyAiJyk7IH0pOyI7CiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7CiAgICAgIH0KCiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMCcpOwogICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTsKICAgICAgfSk7CgogICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHsKICAgICAgICBzZXRJbnB1dCgnJyk7CiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpOwogICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7CiAgICAgIH0pOwoKICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7CiAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEnKTsKICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpOwogICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7CiAgICAgIH0pOwogICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICAgKi8KICAnbW9udGgnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdtb250aCcsIE1PTlRIX1JFR0VYUCwKICAgICBjcmVhdGVEYXRlUGFyc2VyKE1PTlRIX1JFR0VYUCwgWyd5eXl5JywgJ01NJ10pLAogICAgICd5eXl5LU1NJyksCgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dAogICAqIEBuYW1lIGlucHV0W251bWJlcl0KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRleHQgaW5wdXQgd2l0aCBudW1iZXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIFNldHMgdGhlIGBudW1iZXJgIHZhbGlkYXRpb24KICAgKiBlcnJvciBpZiBub3QgYSB2YWxpZCBudW1iZXIuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuCiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mCiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuCiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW4KICAgKiAgICBtaW5sZW5ndGguCiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhbgogICAqICAgIG1heGxlbmd0aC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlCiAgICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvcgogICAqICAgIHBhdHRlcm5zIGRlZmluZWQgYXMgc2NvcGUgZXhwcmVzc2lvbnMuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgKgogICAqIEBleGFtcGxlCiAgICAgIDxleGFtcGxlIG5hbWU9Im51bWJlci1pbnB1dC1kaXJlY3RpdmUiIG1vZHVsZT0ibnVtYmVyRXhhbXBsZSI+CiAgICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckV4YW1wbGUnLCBbXSkKICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAgICRzY29wZS52YWx1ZSA9IDEyOwogICAgICAgICAgICAgfV0pOwogICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgICAgTnVtYmVyOiA8aW5wdXQgdHlwZT0ibnVtYmVyIiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InZhbHVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIG1pbj0iMCIgbWF4PSI5OSIgcmVxdWlyZWQ+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IubnVtYmVyIj4KICAgICAgICAgICAgIE5vdCB2YWxpZCBudW1iZXIhPC9zcGFuPgogICAgICAgICAgIDx0dD52YWx1ZSA9IHt7dmFsdWV9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCd2YWx1ZScpKTsKICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTsKICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpOwoKICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEyJyk7CiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7CiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTsKICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpOwogICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTsKICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJzEyMycpOwogICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7CiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZmlsZT4KICAgICAgPC9leGFtcGxlPgogICAqLwogICdudW1iZXInOiBudW1iZXJJbnB1dFR5cGUsCgoKICAvKioKICAgKiBAbmdkb2MgaW5wdXQKICAgKiBAbmFtZSBpbnB1dFt1cmxdCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUZXh0IGlucHV0IHdpdGggVVJMIHZhbGlkYXRpb24uIFNldHMgdGhlIGB1cmxgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBjb250ZW50IGlzIG5vdCBhCiAgICogdmFsaWQgVVJMLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogICAqICAgIG1pbmxlbmd0aC4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuCiAgICogICAgbWF4bGVuZ3RoLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yCiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGV4YW1wbGUgbmFtZT0idXJsLWlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJ1cmxFeGFtcGxlIj4KICAgICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndXJsRXhhbXBsZScsIFtdKQogICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnaHR0cDovL2dvb2dsZS5jb20nOwogICAgICAgICAgICAgfV0pOwogICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgICAgVVJMOiA8aW5wdXQgdHlwZT0idXJsIiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InRleHQiIHJlcXVpcmVkPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnVybCI+CiAgICAgICAgICAgICBOb3QgdmFsaWQgdXJsITwvc3Bhbj4KICAgICAgICAgICA8dHQ+dGV4dCA9IHt7dGV4dH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci51cmwgPSB7eyEhbXlGb3JtLiRlcnJvci51cmx9fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2ZpbGU+CiAgICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygndGV4dCcpKTsKICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTsKICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdodHRwOi8vZ29vZ2xlLmNvbScpOwogICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dC5jbGVhcigpOwogICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7CgogICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpOwogICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbm90IHVybCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dC5jbGVhcigpOwogICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYm94Jyk7CgogICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2ZpbGU+CiAgICAgIDwvZXhhbXBsZT4KICAgKi8KICAndXJsJzogdXJsSW5wdXRUeXBlLAoKCiAgLyoqCiAgICogQG5nZG9jIGlucHV0CiAgICogQG5hbWUgaW5wdXRbZW1haWxdCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUZXh0IGlucHV0IHdpdGggZW1haWwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYGVtYWlsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiBub3QgYSB2YWxpZCBlbWFpbAogICAqIGFkZHJlc3MuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8KICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuCiAgICogICAgbWlubGVuZ3RoLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICAgKiAgICBtYXhsZW5ndGguCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZQogICAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICAgKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlcgogICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICoKICAgKiBAZXhhbXBsZQogICAgICA8ZXhhbXBsZSBuYW1lPSJlbWFpbC1pbnB1dC1kaXJlY3RpdmUiIG1vZHVsZT0iZW1haWxFeGFtcGxlIj4KICAgICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZW1haWxFeGFtcGxlJywgW10pCiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdtZUBleGFtcGxlLmNvbSc7CiAgICAgICAgICAgICB9XSk7CiAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgICAgICAgRW1haWw6IDxpbnB1dCB0eXBlPSJlbWFpbCIgbmFtZT0iaW5wdXQiIG5nLW1vZGVsPSJ0ZXh0IiByZXF1aXJlZD4KICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5lbWFpbCI+CiAgICAgICAgICAgICAgIE5vdCB2YWxpZCBlbWFpbCE8L3NwYW4+CiAgICAgICAgICAgICA8dHQ+dGV4dCA9IHt7dGV4dH19PC90dD48YnIvPgogICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IuZW1haWwgPSB7eyEhbXlGb3JtLiRlcnJvci5lbWFpbH19PC90dD48YnIvPgogICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgPC9maWxlPgogICAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3RleHQnKSk7CiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7CiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpOwoKICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignbWVAZXhhbXBsZS5jb20nKTsKICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTsKICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpOwogICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpOwogICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbm90IGVtYWlsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7CiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCd4eHgnKTsKCiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZmlsZT4KICAgICAgPC9leGFtcGxlPgogICAqLwogICdlbWFpbCc6IGVtYWlsSW5wdXRUeXBlLAoKCiAgLyoqCiAgICogQG5nZG9jIGlucHV0CiAgICogQG5hbWUgaW5wdXRbcmFkaW9dCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBIVE1MIHJhZGlvIGJ1dHRvbi4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgKiBAcGFyYW0ge3N0cmluZ30gbmdWYWx1ZSBBbmd1bGFyIGV4cHJlc3Npb24gd2hpY2ggc2V0cyB0aGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkCiAgICogICAgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuCiAgICoKICAgKiBAZXhhbXBsZQogICAgICA8ZXhhbXBsZSBuYW1lPSJyYWRpby1pbnB1dC1kaXJlY3RpdmUiIG1vZHVsZT0icmFkaW9FeGFtcGxlIj4KICAgICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncmFkaW9FeGFtcGxlJywgW10pCiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgICAgICAkc2NvcGUuY29sb3IgPSAnYmx1ZSc7CiAgICAgICAgICAgICAgICRzY29wZS5zcGVjaWFsVmFsdWUgPSB7CiAgICAgICAgICAgICAgICAgImlkIjogIjEyMzQ1IiwKICAgICAgICAgICAgICAgICAidmFsdWUiOiAiZ3JlZW4iCiAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICB9XSk7CiAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5nLW1vZGVsPSJjb2xvciIgdmFsdWU9InJlZCI+ICBSZWQgPGJyLz4KICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5nLW1vZGVsPSJjb2xvciIgbmctdmFsdWU9InNwZWNpYWxWYWx1ZSI+IEdyZWVuIDxici8+CiAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuZy1tb2RlbD0iY29sb3IiIHZhbHVlPSJibHVlIj4gQmx1ZSA8YnIvPgogICAgICAgICAgIDx0dD5jb2xvciA9IHt7Y29sb3IgfCBqc29ufX08L3R0Pjxici8+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICBOb3RlIHRoYXQgYG5nLXZhbHVlPSJzcGVjaWFsVmFsdWUiYCBzZXRzIHJhZGlvIGl0ZW0ncyB2YWx1ZSB0byBiZSB0aGUgdmFsdWUgb2YgYCRzY29wZS5zcGVjaWFsVmFsdWVgLgogICAgICAgIDwvZmlsZT4KICAgICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBjb2xvciA9IGVsZW1lbnQoYnkuYmluZGluZygnY29sb3InKSk7CgogICAgICAgICAgICBleHBlY3QoY29sb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2JsdWUnKTsKCiAgICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdjb2xvcicpKS5nZXQoMCkuY2xpY2soKTsKCiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbigncmVkJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2ZpbGU+CiAgICAgIDwvZXhhbXBsZT4KICAgKi8KICAncmFkaW8nOiByYWRpb0lucHV0VHlwZSwKCgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dAogICAqIEBuYW1lIGlucHV0W2NoZWNrYm94XQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogSFRNTCBjaGVja2JveC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmdUcnVlVmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC4KICAgKiBAcGFyYW0ge2V4cHJlc3Npb249fSBuZ0ZhbHNlVmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBub3Qgc2VsZWN0ZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgKgogICAqIEBleGFtcGxlCiAgICAgIDxleGFtcGxlIG5hbWU9ImNoZWNrYm94LWlucHV0LWRpcmVjdGl2ZSIgbW9kdWxlPSJjaGVja2JveEV4YW1wbGUiPgogICAgICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGVja2JveEV4YW1wbGUnLCBbXSkKICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAgICRzY29wZS52YWx1ZTEgPSB0cnVlOwogICAgICAgICAgICAgICAkc2NvcGUudmFsdWUyID0gJ1lFUycKICAgICAgICAgICAgIH1dKTsKICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgICAgIFZhbHVlMTogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0idmFsdWUxIj4gPGJyLz4KICAgICAgICAgICBWYWx1ZTI6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9InZhbHVlMiIKICAgICAgICAgICAgICAgICAgICAgICAgICBuZy10cnVlLXZhbHVlPSInWUVTJyIgbmctZmFsc2UtdmFsdWU9IidOTyciPiA8YnIvPgogICAgICAgICAgIDx0dD52YWx1ZTEgPSB7e3ZhbHVlMX19PC90dD48YnIvPgogICAgICAgICAgIDx0dD52YWx1ZTIgPSB7e3ZhbHVlMn19PC90dD48YnIvPgogICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZmlsZT4KICAgICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciB2YWx1ZTEgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3ZhbHVlMScpKTsKICAgICAgICAgICAgdmFyIHZhbHVlMiA9IGVsZW1lbnQoYnkuYmluZGluZygndmFsdWUyJykpOwoKICAgICAgICAgICAgZXhwZWN0KHZhbHVlMS5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpOwogICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdZRVMnKTsKCiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlMScpKS5jbGljaygpOwogICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZTInKSkuY2xpY2soKTsKCiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTEuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ05PJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2ZpbGU+CiAgICAgIDwvZXhhbXBsZT4KICAgKi8KICAnY2hlY2tib3gnOiBjaGVja2JveElucHV0VHlwZSwKCiAgJ2hpZGRlbic6IG5vb3AsCiAgJ2J1dHRvbic6IG5vb3AsCiAgJ3N1Ym1pdCc6IG5vb3AsCiAgJ3Jlc2V0Jzogbm9vcCwKICAnZmlsZSc6IG5vb3AKfTsKCi8vIEEgaGVscGVyIGZ1bmN0aW9uIHRvIGNhbGwgJHNldFZhbGlkaXR5IGFuZCByZXR1cm4gdGhlIHZhbHVlIC8gdW5kZWZpbmVkLAovLyBhIHBhdHRlcm4gdGhhdCBpcyByZXBlYXRlZCBhIGxvdCBpbiB0aGUgaW5wdXQgdmFsaWRhdGlvbiBsb2dpYy4KZnVuY3Rpb24gdmFsaWRhdGUoY3RybCwgdmFsaWRhdG9yTmFtZSwgdmFsaWRpdHksIHZhbHVlKXsKICBjdHJsLiRzZXRWYWxpZGl0eSh2YWxpZGF0b3JOYW1lLCB2YWxpZGl0eSk7CiAgcmV0dXJuIHZhbGlkaXR5ID8gdmFsdWUgOiB1bmRlZmluZWQ7Cn0KCmZ1bmN0aW9uIHRlc3RGbGFncyh2YWxpZGl0eSwgZmxhZ3MpIHsKICB2YXIgaSwgZmxhZzsKICBpZiAoZmxhZ3MpIHsKICAgIGZvciAoaT0wOyBpPGZsYWdzLmxlbmd0aDsgKytpKSB7CiAgICAgIGZsYWcgPSBmbGFnc1tpXTsKICAgICAgaWYgKHZhbGlkaXR5W2ZsYWddKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIGZhbHNlOwp9CgovLyBQYXNzIHZhbGlkaXR5IHNvIHRoYXQgYmVoYXZpb3VyIGNhbiBiZSBtb2NrZWQgZWFzaWVyLgpmdW5jdGlvbiBhZGROYXRpdmVIdG1sNVZhbGlkYXRvcnMoY3RybCwgdmFsaWRhdG9yTmFtZSwgYmFkRmxhZ3MsIGlnbm9yZUZsYWdzLCB2YWxpZGl0eSkgewogIGlmIChpc09iamVjdCh2YWxpZGl0eSkpIHsKICAgIGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzID0gdHJ1ZTsKICAgIHZhciB2YWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAvLyBEb24ndCBvdmVyd3JpdGUgcHJldmlvdXMgdmFsaWRhdGlvbiwgZG9uJ3QgY29uc2lkZXIgdmFsdWVNaXNzaW5nIHRvIGFwcGx5IChuZy1yZXF1aXJlZCBjYW4KICAgICAgLy8gcGVyZm9ybSB0aGUgcmVxdWlyZWQgdmFsaWRhdGlvbikKICAgICAgaWYgKCFjdHJsLiRlcnJvclt2YWxpZGF0b3JOYW1lXSAmJgogICAgICAgICAgIXRlc3RGbGFncyh2YWxpZGl0eSwgaWdub3JlRmxhZ3MpICYmCiAgICAgICAgICB0ZXN0RmxhZ3ModmFsaWRpdHksIGJhZEZsYWdzKSkgewogICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KHZhbGlkYXRvck5hbWUsIGZhbHNlKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgcmV0dXJuIHZhbHVlOwogICAgfTsKICAgIGN0cmwuJHBhcnNlcnMucHVzaCh2YWxpZGF0b3IpOwogIH0KfQoKZnVuY3Rpb24gdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7CiAgdmFyIHZhbGlkaXR5ID0gZWxlbWVudC5wcm9wKFZBTElESVRZX1NUQVRFX1BST1BFUlRZKTsKICB2YXIgcGxhY2Vob2xkZXIgPSBlbGVtZW50WzBdLnBsYWNlaG9sZGVyLCBub2V2ZW50ID0ge307CiAgdmFyIHR5cGUgPSBsb3dlcmNhc2UoZWxlbWVudFswXS50eXBlKTsKICBjdHJsLiQkdmFsaWRpdHlTdGF0ZSA9IHZhbGlkaXR5OwoKICAvLyBJbiBjb21wb3NpdGlvbiBtb2RlLCB1c2VycyBhcmUgc3RpbGwgaW5wdXRpbmcgaW50ZXJtZWRpYXRlIHRleHQgYnVmZmVyLAogIC8vIGhvbGQgdGhlIGxpc3RlbmVyIHVudGlsIGNvbXBvc2l0aW9uIGlzIGRvbmUuCiAgLy8gTW9yZSBhYm91dCBjb21wb3NpdGlvbiBldmVudHM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Db21wb3NpdGlvbkV2ZW50CiAgaWYgKCEkc25pZmZlci5hbmRyb2lkKSB7CiAgICB2YXIgY29tcG9zaW5nID0gZmFsc2U7CgogICAgZWxlbWVudC5vbignY29tcG9zaXRpb25zdGFydCcsIGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgY29tcG9zaW5nID0gdHJ1ZTsKICAgIH0pOwoKICAgIGVsZW1lbnQub24oJ2NvbXBvc2l0aW9uZW5kJywgZnVuY3Rpb24oKSB7CiAgICAgIGNvbXBvc2luZyA9IGZhbHNlOwogICAgICBsaXN0ZW5lcigpOwogICAgfSk7CiAgfQoKICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikgewogICAgaWYgKGNvbXBvc2luZykgcmV0dXJuOwogICAgdmFyIHZhbHVlID0gZWxlbWVudC52YWwoKSwKICAgICAgICBldmVudCA9IGV2ICYmIGV2LnR5cGU7CgogICAgLy8gSUUgKDExIGFuZCB1bmRlcikgc2VlbSB0byBlbWl0IGFuICdpbnB1dCcgZXZlbnQgaWYgdGhlIHBsYWNlaG9sZGVyIHZhbHVlIGNoYW5nZXMuCiAgICAvLyBXZSBkb24ndCB3YW50IHRvIGRpcnR5IHRoZSB2YWx1ZSB3aGVuIHRoaXMgaGFwcGVucywgc28gd2UgYWJvcnQgaGVyZS4gVW5mb3J0dW5hdGVseSwKICAgIC8vIElFIGFsc28gc2VuZHMgaW5wdXQgZXZlbnRzIGZvciBvdGhlciBub24taW5wdXQtcmVsYXRlZCB0aGluZ3MsIChzdWNoIGFzIGZvY3VzaW5nIG9uIGEKICAgIC8vIGZvcm0gY29udHJvbCksIHNvIHRoaXMgY2hhbmdlIGlzIG5vdCBlbnRpcmVseSBlbm91Z2ggdG8gc29sdmUgdGhpcy4KICAgIGlmIChtc2llICYmIChldiB8fCBub2V2ZW50KS50eXBlID09PSAnaW5wdXQnICYmIGVsZW1lbnRbMF0ucGxhY2Vob2xkZXIgIT09IHBsYWNlaG9sZGVyKSB7CiAgICAgIHBsYWNlaG9sZGVyID0gZWxlbWVudFswXS5wbGFjZWhvbGRlcjsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIEJ5IGRlZmF1bHQgd2Ugd2lsbCB0cmltIHRoZSB2YWx1ZQogICAgLy8gSWYgdGhlIGF0dHJpYnV0ZSBuZy10cmltIGV4aXN0cyB3ZSB3aWxsIGF2b2lkIHRyaW1taW5nCiAgICAvLyBJZiBpbnB1dCB0eXBlIGlzICdwYXNzd29yZCcsIHRoZSB2YWx1ZSBpcyBuZXZlciB0cmltbWVkCiAgICBpZiAodHlwZSAhPT0gJ3Bhc3N3b3JkJyAmJiAoIWF0dHIubmdUcmltIHx8IGF0dHIubmdUcmltICE9PSAnZmFsc2UnKSkgewogICAgICB2YWx1ZSA9IHRyaW0odmFsdWUpOwogICAgfQoKICAgIC8vIElmIGEgY29udHJvbCBpcyBzdWZmZXJpbmcgZnJvbSBiYWQgaW5wdXQsIGJyb3dzZXJzIGRpc2NhcmQgaXRzIHZhbHVlLCBzbyBpdCBtYXkgYmUKICAgIC8vIG5lY2Vzc2FyeSB0byByZXZhbGlkYXRlIGV2ZW4gaWYgdGhlIGNvbnRyb2wncyB2YWx1ZSBpcyB0aGUgc2FtZSBlbXB0eSB2YWx1ZSB0d2ljZSBpbgogICAgLy8gYSByb3cuCiAgICB2YXIgcmV2YWxpZGF0ZSA9IHZhbGlkaXR5ICYmIGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzOwogICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmFsdWUgfHwgKHZhbHVlID09PSAnJyAmJiByZXZhbGlkYXRlKSkgewogICAgICBpZiAoc2NvcGUuJCRwaGFzZSkgewogICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSwgZXZlbnQsIHJldmFsaWRhdGUpOwogICAgICB9IGVsc2UgewogICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSwgZXZlbnQsIHJldmFsaWRhdGUpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfTsKCiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0ICJpbnB1dCIgZXZlbnQsIHdlIGFyZSBmaW5lIC0gZXhjZXB0IG9uIElFOSB3aGljaCBkb2Vzbid0IGZpcmUgdGhlCiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0CiAgaWYgKCRzbmlmZmVyLmhhc0V2ZW50KCdpbnB1dCcpKSB7CiAgICBlbGVtZW50Lm9uKCdpbnB1dCcsIGxpc3RlbmVyKTsKICB9IGVsc2UgewogICAgdmFyIHRpbWVvdXQ7CgogICAgdmFyIGRlZmVyTGlzdGVuZXIgPSBmdW5jdGlvbihldikgewogICAgICBpZiAoIXRpbWVvdXQpIHsKICAgICAgICB0aW1lb3V0ID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7CiAgICAgICAgICBsaXN0ZW5lcihldik7CiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKCiAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgdmFyIGtleSA9IGV2ZW50LmtleUNvZGU7CgogICAgICAvLyBpZ25vcmUKICAgICAgLy8gICAgY29tbWFuZCAgICAgICAgICAgIG1vZGlmaWVycyAgICAgICAgICAgICAgICAgICBhcnJvd3MKICAgICAgaWYgKGtleSA9PT0gOTEgfHwgKDE1IDwga2V5ICYmIGtleSA8IDE5KSB8fCAoMzcgPD0ga2V5ICYmIGtleSA8PSA0MCkpIHJldHVybjsKCiAgICAgIGRlZmVyTGlzdGVuZXIoZXZlbnQpOwogICAgfSk7CgogICAgLy8gaWYgdXNlciBtb2RpZmllcyBpbnB1dCB2YWx1ZSB1c2luZyBjb250ZXh0IG1lbnUgaW4gSUUsIHdlIG5lZWQgInBhc3RlIiBhbmQgImN1dCIgZXZlbnRzIHRvIGNhdGNoIGl0CiAgICBpZiAoJHNuaWZmZXIuaGFzRXZlbnQoJ3Bhc3RlJykpIHsKICAgICAgZWxlbWVudC5vbigncGFzdGUgY3V0JywgZGVmZXJMaXN0ZW5lcik7CiAgICB9CiAgfQoKICAvLyBpZiB1c2VyIHBhc3RlIGludG8gaW5wdXQgdXNpbmcgbW91c2Ugb24gb2xkZXIgYnJvd3NlcgogIC8vIG9yIGZvcm0gYXV0b2NvbXBsZXRlIG9uIG5ld2VyIGJyb3dzZXIsIHdlIG5lZWQgImNoYW5nZSIgZXZlbnQgdG8gY2F0Y2ggaXQKICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBsaXN0ZW5lcik7CgogIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgZWxlbWVudC52YWwoY3RybC4kaXNFbXB0eShjdHJsLiR2aWV3VmFsdWUpID8gJycgOiBjdHJsLiR2aWV3VmFsdWUpOwogIH07Cn0KCmZ1bmN0aW9uIHdlZWtQYXJzZXIoaXNvV2VlaykgewogICBpZihpc0RhdGUoaXNvV2VlaykpIHsKICAgICAgcmV0dXJuIGlzb1dlZWs7CiAgIH0KCiAgIGlmKGlzU3RyaW5nKGlzb1dlZWspKSB7CiAgICAgIFdFRUtfUkVHRVhQLmxhc3RJbmRleCA9IDA7CiAgICAgIHZhciBwYXJ0cyA9IFdFRUtfUkVHRVhQLmV4ZWMoaXNvV2Vlayk7CiAgICAgIGlmKHBhcnRzKSB7CiAgICAgICAgIHZhciB5ZWFyID0gK3BhcnRzWzFdLAogICAgICAgICAgICB3ZWVrID0gK3BhcnRzWzJdLAogICAgICAgICAgICBmaXJzdFRodXJzID0gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSwKICAgICAgICAgICAgYWRkRGF5cyA9ICh3ZWVrIC0gMSkgKiA3OwogICAgICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgZmlyc3RUaHVycy5nZXREYXRlKCkgKyBhZGREYXlzKTsKICAgICAgfQogICB9CgogICByZXR1cm4gTmFOOwp9CgpmdW5jdGlvbiBjcmVhdGVEYXRlUGFyc2VyKHJlZ2V4cCwgbWFwcGluZykgewogICByZXR1cm4gZnVuY3Rpb24oaXNvKSB7CiAgICAgIHZhciBwYXJ0cywgbWFwOwoKICAgICAgaWYoaXNEYXRlKGlzbykpIHsKICAgICAgICAgcmV0dXJuIGlzbzsKICAgICAgfQoKICAgICAgaWYoaXNTdHJpbmcoaXNvKSkgewogICAgICAgICByZWdleHAubGFzdEluZGV4ID0gMDsKICAgICAgICAgcGFydHMgPSByZWdleHAuZXhlYyhpc28pOwoKICAgICAgICAgaWYocGFydHMpIHsKICAgICAgICAgICAgcGFydHMuc2hpZnQoKTsKICAgICAgICAgICAgbWFwID0geyB5eXl5OiAwLCBNTTogMSwgZGQ6IDEsIEhIOiAwLCBtbTogMCB9OwoKICAgICAgICAgICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24ocGFydCwgaW5kZXgpIHsKICAgICAgICAgICAgICAgaWYoaW5kZXggPCBtYXBwaW5nLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICBtYXBbbWFwcGluZ1tpbmRleF1dID0gK3BhcnQ7CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobWFwLnl5eXksIG1hcC5NTSAtIDEsIG1hcC5kZCwgbWFwLkhILCBtYXAubW0pOwogICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBOYU47CiAgIH07Cn0KCmZ1bmN0aW9uIGNyZWF0ZURhdGVJbnB1dFR5cGUodHlwZSwgcmVnZXhwLCBwYXJzZURhdGUsIGZvcm1hdCkgewogICByZXR1cm4gZnVuY3Rpb24gZHluYW1pY0RhdGVJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlcikgewogICAgICB0ZXh0SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpOwoKICAgICAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgIGlmKGN0cmwuJGlzRW1wdHkodmFsdWUpKSB7CiAgICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KHR5cGUsIHRydWUpOwogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgfQoKICAgICAgICAgaWYocmVnZXhwLnRlc3QodmFsdWUpKSB7CiAgICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KHR5cGUsIHRydWUpOwogICAgICAgICAgICByZXR1cm4gcGFyc2VEYXRlKHZhbHVlKTsKICAgICAgICAgfQoKICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkodHlwZSwgZmFsc2UpOwogICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9KTsKCiAgICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICBpZihpc0RhdGUodmFsdWUpKSB7CiAgICAgICAgICAgIHJldHVybiAkZmlsdGVyKCdkYXRlJykodmFsdWUsIGZvcm1hdCk7CiAgICAgICAgIH0KICAgICAgICAgcmV0dXJuICcnOwogICAgICB9KTsKCiAgICAgIGlmKGF0dHIubWluKSB7CiAgICAgICAgIHZhciBtaW5WYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICB2YXIgdmFsaWQgPSBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fAogICAgICAgICAgICAgICAocGFyc2VEYXRlKHZhbHVlKSA+PSBwYXJzZURhdGUoYXR0ci5taW4pKTsKICAgICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21pbicsIHZhbGlkKTsKICAgICAgICAgICAgcmV0dXJuIHZhbGlkID8gdmFsdWUgOiB1bmRlZmluZWQ7CiAgICAgICAgIH07CgogICAgICAgICBjdHJsLiRwYXJzZXJzLnB1c2gobWluVmFsaWRhdG9yKTsKICAgICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKG1pblZhbGlkYXRvcik7CiAgICAgIH0KCiAgICAgIGlmKGF0dHIubWF4KSB7CiAgICAgICAgIHZhciBtYXhWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICB2YXIgdmFsaWQgPSBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fAogICAgICAgICAgICAgICAocGFyc2VEYXRlKHZhbHVlKSA8PSBwYXJzZURhdGUoYXR0ci5tYXgpKTsKICAgICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21heCcsIHZhbGlkKTsKICAgICAgICAgICAgcmV0dXJuIHZhbGlkID8gdmFsdWUgOiB1bmRlZmluZWQ7CiAgICAgICAgIH07CgogICAgICAgICBjdHJsLiRwYXJzZXJzLnB1c2gobWF4VmFsaWRhdG9yKTsKICAgICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKG1heFZhbGlkYXRvcik7CiAgICAgIH0KICAgfTsKfQoKdmFyIG51bWJlckJhZEZsYWdzID0gWydiYWRJbnB1dCddOwoKZnVuY3Rpb24gbnVtYmVySW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHsKICB0ZXh0SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpOwoKICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgIHZhciBlbXB0eSA9IGN0cmwuJGlzRW1wdHkodmFsdWUpOwogICAgaWYgKGVtcHR5IHx8IE5VTUJFUl9SRUdFWFAudGVzdCh2YWx1ZSkpIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ251bWJlcicsIHRydWUpOwogICAgICByZXR1cm4gdmFsdWUgPT09ICcnID8gbnVsbCA6IChlbXB0eSA/IHZhbHVlIDogcGFyc2VGbG9hdCh2YWx1ZSkpOwogICAgfSBlbHNlIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ251bWJlcicsIGZhbHNlKTsKICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgIH0KICB9KTsKCiAgYWRkTmF0aXZlSHRtbDVWYWxpZGF0b3JzKGN0cmwsICdudW1iZXInLCBudW1iZXJCYWRGbGFncywgbnVsbCwgY3RybC4kJHZhbGlkaXR5U3RhdGUpOwoKICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSA/ICcnIDogJycgKyB2YWx1ZTsKICB9KTsKCiAgaWYgKGF0dHIubWluKSB7CiAgICB2YXIgbWluVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgdmFyIG1pbiA9IHBhcnNlRmxvYXQoYXR0ci5taW4pOwogICAgICByZXR1cm4gdmFsaWRhdGUoY3RybCwgJ21pbicsIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IHZhbHVlID49IG1pbiwgdmFsdWUpOwogICAgfTsKCiAgICBjdHJsLiRwYXJzZXJzLnB1c2gobWluVmFsaWRhdG9yKTsKICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChtaW5WYWxpZGF0b3IpOwogIH0KCiAgaWYgKGF0dHIubWF4KSB7CiAgICB2YXIgbWF4VmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgdmFyIG1heCA9IHBhcnNlRmxvYXQoYXR0ci5tYXgpOwogICAgICByZXR1cm4gdmFsaWRhdGUoY3RybCwgJ21heCcsIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IHZhbHVlIDw9IG1heCwgdmFsdWUpOwogICAgfTsKCiAgICBjdHJsLiRwYXJzZXJzLnB1c2gobWF4VmFsaWRhdG9yKTsKICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChtYXhWYWxpZGF0b3IpOwogIH0KCiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsaWRhdGUoY3RybCwgJ251bWJlcicsIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzTnVtYmVyKHZhbHVlKSwgdmFsdWUpOwogIH0pOwp9CgpmdW5jdGlvbiB1cmxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlcikgewogIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7CgogIGN0cmwuJHZhbGlkYXRvcnMudXJsID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7CiAgICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTsKICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBVUkxfUkVHRVhQLnRlc3QodmFsdWUpOwogIH07Cn0KCmZ1bmN0aW9uIGVtYWlsSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHsKICB0ZXh0SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpOwoKICBjdHJsLiR2YWxpZGF0b3JzLmVtYWlsID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7CiAgICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTsKICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBFTUFJTF9SRUdFWFAudGVzdCh2YWx1ZSk7CiAgfTsKfQoKZnVuY3Rpb24gcmFkaW9JbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHsKICAvLyBtYWtlIHRoZSBuYW1lIHVuaXF1ZSwgaWYgbm90IGRlZmluZWQKICBpZiAoaXNVbmRlZmluZWQoYXR0ci5uYW1lKSkgewogICAgZWxlbWVudC5hdHRyKCduYW1lJywgbmV4dFVpZCgpKTsKICB9CgogIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7CiAgICBpZiAoZWxlbWVudFswXS5jaGVja2VkKSB7CiAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoYXR0ci52YWx1ZSwgZXYgJiYgZXYudHlwZSk7CiAgICAgIH0pOwogICAgfQogIH07CgogIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpOwoKICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgIHZhciB2YWx1ZSA9IGF0dHIudmFsdWU7CiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSAodmFsdWUgPT0gY3RybC4kdmlld1ZhbHVlKTsKICB9OwoKICBhdHRyLiRvYnNlcnZlKCd2YWx1ZScsIGN0cmwuJHJlbmRlcik7Cn0KCmZ1bmN0aW9uIHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgY29udGV4dCwgbmFtZSwgZXhwcmVzc2lvbiwgZmFsbGJhY2spIHsKICB2YXIgcGFyc2VGbjsKICBpZiAoaXNEZWZpbmVkKGV4cHJlc3Npb24pKSB7CiAgICBwYXJzZUZuID0gJHBhcnNlKGV4cHJlc3Npb24pOwogICAgaWYgKCFwYXJzZUZuLmNvbnN0YW50KSB7CiAgICAgIHRocm93IG5ldyBtaW5FcnIoJ25nTW9kZWwnKSgnY29uc3RleHByJywgJ0V4cGVjdGVkIGNvbnN0YW50IGV4cHJlc3Npb24gZm9yIGB7MH1gLCBidXQgc2F3ICcgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdgezF9YC4nLCBuYW1lLCBleHByZXNzaW9uKTsKICAgIH0KICAgIHJldHVybiBwYXJzZUZuKGNvbnRleHQpOwogIH0KICByZXR1cm4gZmFsbGJhY2s7Cn0KCmZ1bmN0aW9uIGNoZWNrYm94SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIsICRmaWx0ZXIsICRwYXJzZSkgewogIHZhciB0cnVlVmFsdWUgPSBwYXJzZUNvbnN0YW50RXhwcigkcGFyc2UsIHNjb3BlLCAnbmdUcnVlVmFsdWUnLCBhdHRyLm5nVHJ1ZVZhbHVlLCB0cnVlKTsKICB2YXIgZmFsc2VWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ0ZhbHNlVmFsdWUnLCBhdHRyLm5nRmFsc2VWYWx1ZSwgZmFsc2UpOwoKICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikgewogICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudFswXS5jaGVja2VkLCBldiAmJiBldi50eXBlKTsKICAgIH0pOwogIH07CgogIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpOwoKICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgIGVsZW1lbnRbMF0uY2hlY2tlZCA9IGN0cmwuJHZpZXdWYWx1ZTsKICB9OwoKICAvLyBPdmVycmlkZSB0aGUgc3RhbmRhcmQgYCRpc0VtcHR5YCBiZWNhdXNlIGEgdmFsdWUgb2YgYGZhbHNlYCBtZWFucyBlbXB0eSBpbiBhIGNoZWNrYm94LgogIGN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlICE9PSB0cnVlVmFsdWU7CiAgfTsKCiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gZXF1YWxzKHZhbHVlLCB0cnVlVmFsdWUpOwogIH0pOwoKICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZSA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7CiAgfSk7Cn0KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSB0ZXh0YXJlYQogKiBAcmVzdHJpY3QgRQogKgogKiBAZGVzY3JpcHRpb24KICogSFRNTCB0ZXh0YXJlYSBlbGVtZW50IGNvbnRyb2wgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy4gVGhlIGRhdGEtYmluZGluZyBhbmQgdmFsaWRhdGlvbgogKiBwcm9wZXJ0aWVzIG9mIHRoaXMgZWxlbWVudCBhcmUgZXhhY3RseSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGUKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dCBlbGVtZW50fS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mCiAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLgogKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogKiAgICBtaW5sZW5ndGguCiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICogICAgbWF4bGVuZ3RoLgogKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlCiAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgaW5wdXQKICogQHJlc3RyaWN0IEUKICoKICogQGRlc2NyaXB0aW9uCiAqIEhUTUwgaW5wdXQgZWxlbWVudCBjb250cm9sIHdpdGggYW5ndWxhciBkYXRhLWJpbmRpbmcuIElucHV0IGNvbnRyb2wgZm9sbG93cyBIVE1MNSBpbnB1dCB0eXBlcwogKiBhbmQgcG9seWZpbGxzIHRoZSBIVE1MNSB2YWxpZGF0aW9uIGJlaGF2aW9yIGZvciBvbGRlciBicm93c2Vycy4KICoKICogKk5PVEUqIE5vdCBldmVyeSBmZWF0dXJlIG9mZmVyZWQgaXMgYXZhaWxhYmxlIGZvciBhbGwgaW5wdXQgdHlwZXMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nUmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBpZiBzZXQgdG8gdHJ1ZQogKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogKiAgICBtaW5sZW5ndGguCiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICogICAgbWF4bGVuZ3RoLgogKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlCiAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC4KICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGUKICogICAgaW5wdXQuCiAqCiAqIEBleGFtcGxlCiAgICA8ZXhhbXBsZSBuYW1lPSJpbnB1dC1kaXJlY3RpdmUiIG1vZHVsZT0iaW5wdXRFeGFtcGxlIj4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8c2NyaXB0PgogICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2lucHV0RXhhbXBsZScsIFtdKQogICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgICAgICRzY29wZS51c2VyID0ge25hbWU6ICdndWVzdCcsIGxhc3Q6ICd2aXNpdG9yJ307CiAgICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSI+CiAgICAgICAgICAgVXNlciBuYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0idXNlck5hbWUiIG5nLW1vZGVsPSJ1c2VyLm5hbWUiIHJlcXVpcmVkPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLnVzZXJOYW1lLiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+PGJyPgogICAgICAgICAgIExhc3QgbmFtZTogPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Imxhc3ROYW1lIiBuZy1tb2RlbD0idXNlci5sYXN0IgogICAgICAgICAgICAgbmctbWlubGVuZ3RoPSIzIiBuZy1tYXhsZW5ndGg9IjEwIj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWlubGVuZ3RoIj4KICAgICAgICAgICAgIFRvbyBzaG9ydCE8L3NwYW4+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0ubGFzdE5hbWUuJGVycm9yLm1heGxlbmd0aCI+CiAgICAgICAgICAgICBUb28gbG9uZyE8L3NwYW4+PGJyPgogICAgICAgICA8L2Zvcm0+CiAgICAgICAgIDxocj4KICAgICAgICAgPHR0PnVzZXIgPSB7e3VzZXJ9fTwvdHQ+PGJyLz4KICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kdmFsaWQgPSB7e215Rm9ybS51c2VyTmFtZS4kdmFsaWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiRlcnJvciA9IHt7bXlGb3JtLnVzZXJOYW1lLiRlcnJvcn19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IgPSB7e215Rm9ybS5sYXN0TmFtZS4kZXJyb3J9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5taW5sZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5taW5sZW5ndGh9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5tYXhsZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5tYXhsZW5ndGh9fTwvdHQ+PGJyPgogICAgICAgPC9kaXY+CiAgICAgIDwvZmlsZT4KICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgdmFyIHVzZXIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3t7dXNlcn19JykpOwogICAgICAgIHZhciB1c2VyTmFtZVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0udXNlck5hbWUuJHZhbGlkJykpOwogICAgICAgIHZhciBsYXN0TmFtZVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJHZhbGlkJykpOwogICAgICAgIHZhciBsYXN0TmFtZUVycm9yID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpOwogICAgICAgIHZhciBmb3JtVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSk7CiAgICAgICAgdmFyIHVzZXJOYW1lSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLm5hbWUnKSk7CiAgICAgICAgdmFyIHVzZXJMYXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmxhc3QnKSk7CgogICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3sibmFtZSI6Imd1ZXN0IiwibGFzdCI6InZpc2l0b3IifScpOwogICAgICAgICAgZXhwZWN0KHVzZXJOYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5IHdoZW4gcmVxdWlyZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHVzZXJOYW1lSW5wdXQuY2xlYXIoKTsKICAgICAgICAgIHVzZXJOYW1lSW5wdXQuc2VuZEtleXMoJycpOwoKICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7Imxhc3QiOiJ2aXNpdG9yIn0nKTsKICAgICAgICAgIGV4cGVjdCh1c2VyTmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogICAgICAgICAgZXhwZWN0KGZvcm1WYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSB2YWxpZCBpZiBlbXB0eSB3aGVuIG1pbiBsZW5ndGggaXMgc2V0JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7CiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCcnKTsKCiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigneyJuYW1lIjoiZ3Vlc3QiLCJsYXN0IjoiIn0nKTsKICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsZXNzIHRoYW4gcmVxdWlyZWQgbWluIGxlbmd0aCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdXNlckxhc3RJbnB1dC5jbGVhcigpOwogICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygneHgnKTsKCiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigneyJuYW1lIjoiZ3Vlc3QifScpOwogICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7CiAgICAgICAgICBleHBlY3QobGFzdE5hbWVFcnJvci5nZXRUZXh0KCkpLnRvQ29udGFpbignbWlubGVuZ3RoJyk7CiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbG9uZ2VyIHRoYW4gbWF4IGxlbmd0aCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdXNlckxhc3RJbnB1dC5jbGVhcigpOwogICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygnc29tZSByaWRpY3Vsb3VzbHkgbG9uZyBuYW1lJyk7CgogICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3sibmFtZSI6Imd1ZXN0In0nKTsKICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21heGxlbmd0aCcpOwogICAgICAgICAgZXhwZWN0KGZvcm1WYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTsKICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKi8KdmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsICckZmlsdGVyJywgJyRwYXJzZScsCiAgICBmdW5jdGlvbigkYnJvd3NlciwgJHNuaWZmZXIsICRmaWx0ZXIsICRwYXJzZSkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgcmVxdWlyZTogWyc/bmdNb2RlbCddLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7CiAgICAgIGlmIChjdHJsc1swXSkgewogICAgICAgIChpbnB1dFR5cGVbbG93ZXJjYXNlKGF0dHIudHlwZSldIHx8IGlucHV0VHlwZS50ZXh0KShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHNbMF0sICRzbmlmZmVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYnJvd3NlciwgJGZpbHRlciwgJHBhcnNlKTsKICAgICAgfQogICAgfQogIH07Cn1dOwoKdmFyIFZBTElEX0NMQVNTID0gJ25nLXZhbGlkJywKICAgIElOVkFMSURfQ0xBU1MgPSAnbmctaW52YWxpZCcsCiAgICBQUklTVElORV9DTEFTUyA9ICduZy1wcmlzdGluZScsCiAgICBESVJUWV9DTEFTUyA9ICduZy1kaXJ0eScsCiAgICBVTlRPVUNIRURfQ0xBU1MgPSAnbmctdW50b3VjaGVkJywKICAgIFRPVUNIRURfQ0xBU1MgPSAnbmctdG91Y2hlZCc7CgovKioKICogQG5nZG9jIHR5cGUKICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcgogKgogKiBAcHJvcGVydHkge3N0cmluZ30gJHZpZXdWYWx1ZSBBY3R1YWwgc3RyaW5nIHZhbHVlIGluIHRoZSB2aWV3LgogKiBAcHJvcGVydHkgeyp9ICRtb2RlbFZhbHVlIFRoZSB2YWx1ZSBpbiB0aGUgbW9kZWwsIHRoYXQgdGhlIGNvbnRyb2wgaXMgYm91bmQgdG8uCiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHBhcnNlcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUsIGFzIGEgcGlwZWxpbmUsIHdoZW5ldmVyCiAgICAgICB0aGUgY29udHJvbCByZWFkcyB2YWx1ZSBmcm9tIHRoZSBET00uICBFYWNoIGZ1bmN0aW9uIGlzIGNhbGxlZCwgaW4gdHVybiwgcGFzc2luZyB0aGUgdmFsdWUKICAgICAgIHRocm91Z2ggdG8gdGhlIG5leHQuIFRoZSBsYXN0IHJldHVybiB2YWx1ZSBpcyB1c2VkIHRvIHBvcHVsYXRlIHRoZSBtb2RlbC4KICAgICAgIFVzZWQgdG8gc2FuaXRpemUgLyBjb252ZXJ0IHRoZSB2YWx1ZSBhcyB3ZWxsIGFzIHZhbGlkYXRpb24uIEZvciB2YWxpZGF0aW9uLAogICAgICAgdGhlIHBhcnNlcnMgc2hvdWxkIHVwZGF0ZSB0aGUgdmFsaWRpdHkgc3RhdGUgdXNpbmcKICAgICAgIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRWYWxpZGl0eSAkc2V0VmFsaWRpdHkoKX0sCiAgICAgICBhbmQgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBpbnZhbGlkIHZhbHVlcy4KCiAqCiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJGZvcm1hdHRlcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUsIGFzIGEgcGlwZWxpbmUsIHdoZW5ldmVyCiAgICAgICB0aGUgbW9kZWwgdmFsdWUgY2hhbmdlcy4gRWFjaCBmdW5jdGlvbiBpcyBjYWxsZWQsIGluIHR1cm4sIHBhc3NpbmcgdGhlIHZhbHVlIHRocm91Z2ggdG8gdGhlCiAgICAgICBuZXh0LiBVc2VkIHRvIGZvcm1hdCAvIGNvbnZlcnQgdmFsdWVzIGZvciBkaXNwbGF5IGluIHRoZSBjb250cm9sIGFuZCB2YWxpZGF0aW9uLgogKiBgYGBqcwogKiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsdWUpIHsKICogICBpZiAodmFsdWUpIHsKICogICAgIHJldHVybiB2YWx1ZS50b1VwcGVyQ2FzZSgpOwogKiAgIH0KICogfQogKiBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTsKICogYGBgCiAqCiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJHZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRvcnMgdGhhdCBhcmUgYXBwbGllZAogKiAgICAgIHdoZW5ldmVyIHRoZSBtb2RlbCB2YWx1ZSBjaGFuZ2VzLiBUaGUga2V5IHZhbHVlIHdpdGhpbiB0aGUgb2JqZWN0IHJlZmVycyB0byB0aGUgbmFtZSBvZiB0aGUKICogICAgICB2YWxpZGF0b3Igd2hpbGUgdGhlIGZ1bmN0aW9uIHJlZmVycyB0byB0aGUgdmFsaWRhdGlvbiBvcGVyYXRpb24uIFRoZSB2YWxpZGF0aW9uIG9wZXJhdGlvbiBpcwogKiAgICAgIHByb3ZpZGVkIHdpdGggdGhlIG1vZGVsIHZhbHVlIGFzIGFuIGFyZ3VtZW50IGFuZCBtdXN0IHJldHVybiBhIHRydWUgb3IgZmFsc2UgdmFsdWUgZGVwZW5kaW5nCiAqICAgICAgb24gdGhlIHJlc3BvbnNlIG9mIHRoYXQgdmFsaWRhdGlvbi4KICoKICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkdmlld0NoYW5nZUxpc3RlbmVycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSB3aGVuZXZlciB0aGUKICogICAgIHZpZXcgdmFsdWUgaGFzIGNoYW5nZWQuIEl0IGlzIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cywgYW5kIGl0cyByZXR1cm4gdmFsdWUgaXMgaWdub3JlZC4KICogICAgIFRoaXMgY2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYWRkaXRpb25hbCAkd2F0Y2hlcyBhZ2FpbnN0IHRoZSBtb2RlbCB2YWx1ZS4KICoKICogQHByb3BlcnR5IHtPYmplY3R9ICRlcnJvciBBbiBvYmplY3QgaGFzaCB3aXRoIGFsbCBlcnJvcnMgYXMga2V5cy4KICoKICogQHByb3BlcnR5IHtib29sZWFufSAkdW50b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbm90IGxvc3QgZm9jdXMgeWV0LgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICR0b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbG9zdCBmb2N1cy4KICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sIHlldC4KICogQHByb3BlcnR5IHtib29sZWFufSAkZGlydHkgVHJ1ZSBpZiB1c2VyIGhhcyBhbHJlYWR5IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbC4KICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiB0aGVyZSBpcyBubyBlcnJvci4KICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBlcnJvciBvbiB0aGUgY29udHJvbC4KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIGBOZ01vZGVsQ29udHJvbGxlcmAgcHJvdmlkZXMgQVBJIGZvciB0aGUgYG5nLW1vZGVsYCBkaXJlY3RpdmUuIFRoZSBjb250cm9sbGVyIGNvbnRhaW5zCiAqIHNlcnZpY2VzIGZvciBkYXRhLWJpbmRpbmcsIHZhbGlkYXRpb24sIENTUyB1cGRhdGVzLCBhbmQgdmFsdWUgZm9ybWF0dGluZyBhbmQgcGFyc2luZy4gSXQKICogcHVycG9zZWZ1bGx5IGRvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljIHdoaWNoIGRlYWxzIHdpdGggRE9NIHJlbmRlcmluZyBvciBsaXN0ZW5pbmcgdG8KICogRE9NIGV2ZW50cy4gU3VjaCBET00gcmVsYXRlZCBsb2dpYyBzaG91bGQgYmUgcHJvdmlkZWQgYnkgb3RoZXIgZGlyZWN0aXZlcyB3aGljaCBtYWtlIHVzZSBvZgogKiBgTmdNb2RlbENvbnRyb2xsZXJgIGZvciBkYXRhLWJpbmRpbmcuCiAqCiAqICMjIEN1c3RvbSBDb250cm9sIEV4YW1wbGUKICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYE5nTW9kZWxDb250cm9sbGVyYCB3aXRoIGEgY3VzdG9tIGNvbnRyb2wgdG8gYWNoaWV2ZQogKiBkYXRhLWJpbmRpbmcuIE5vdGljZSBob3cgZGlmZmVyZW50IGRpcmVjdGl2ZXMgKGBjb250ZW50ZWRpdGFibGVgLCBgbmctbW9kZWxgLCBhbmQgYHJlcXVpcmVkYCkKICogY29sbGFib3JhdGUgdG9nZXRoZXIgdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCByZXN1bHQuCiAqCiAqIE5vdGUgdGhhdCBgY29udGVudGVkaXRhYmxlYCBpcyBhbiBIVE1MNSBhdHRyaWJ1dGUsIHdoaWNoIHRlbGxzIHRoZSBicm93c2VyIHRvIGxldCB0aGUgZWxlbWVudAogKiBjb250ZW50cyBiZSBlZGl0ZWQgaW4gcGxhY2UgYnkgdGhlIHVzZXIuICBUaGlzIHdpbGwgbm90IHdvcmsgb24gb2xkZXIgYnJvd3NlcnMuCiAqCiAqIFdlIGFyZSB1c2luZyB0aGUge0BsaW5rIG5nLnNlcnZpY2U6JHNjZSAkc2NlfSBzZXJ2aWNlIGhlcmUgYW5kIGluY2x1ZGUgdGhlIHtAbGluayBuZ1Nhbml0aXplICRzYW5pdGl6ZX0KICogbW9kdWxlIHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlICJiYWQiIGNvbnRlbnQgbGlrZSBpbmxpbmUgZXZlbnQgbGlzdGVuZXIgKGUuZy4gYDxzcGFuIG9uY2xpY2s9Ii4uLiI+YCkuCiAqIEhvd2V2ZXIsIGFzIHdlIGFyZSB1c2luZyBgJHNjZWAgdGhlIG1vZGVsIGNhbiBzdGlsbCBkZWNpZGUgdG8gdG8gcHJvdmlkZSB1bnNhZmUgY29udGVudCBpZiBpdCBtYXJrcwogKiB0aGF0IGNvbnRlbnQgdXNpbmcgdGhlIGAkc2NlYCBzZXJ2aWNlLgogKgogKiA8ZXhhbXBsZSBuYW1lPSJOZ01vZGVsQ29udHJvbGxlciIgbW9kdWxlPSJjdXN0b21Db250cm9sIiBkZXBzPSJhbmd1bGFyLXNhbml0aXplLmpzIj4KICAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgICAgIFtjb250ZW50ZWRpdGFibGVdIHsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjazsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICAgICAgICBtaW4taGVpZ2h0OiAyMHB4OwogICAgICB9CgogICAgICAubmctaW52YWxpZCB7CiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmVkOwogICAgICB9CgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgICAgYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUNvbnRyb2wnLCBbJ25nU2FuaXRpemUnXSkuCiAgICAgICAgZGlyZWN0aXZlKCdjb250ZW50ZWRpdGFibGUnLCBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICByZXN0cmljdDogJ0EnLCAvLyBvbmx5IGFjdGl2YXRlIG9uIGVsZW1lbnQgYXR0cmlidXRlCiAgICAgICAgICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsIC8vIGdldCBhIGhvbGQgb2YgTmdNb2RlbENvbnRyb2xsZXIKICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7CiAgICAgICAgICAgICAgaWYoIW5nTW9kZWwpIHJldHVybjsgLy8gZG8gbm90aGluZyBpZiBubyBuZy1tb2RlbAoKICAgICAgICAgICAgICAvLyBTcGVjaWZ5IGhvdyBVSSBzaG91bGQgYmUgdXBkYXRlZAogICAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZWxlbWVudC5odG1sKCRzY2UuZ2V0VHJ1c3RlZEh0bWwobmdNb2RlbC4kdmlld1ZhbHVlIHx8ICcnKSk7CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBjaGFuZ2UgZXZlbnRzIHRvIGVuYWJsZSBiaW5kaW5nCiAgICAgICAgICAgICAgZWxlbWVudC5vbignYmx1ciBrZXl1cCBjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShyZWFkKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICByZWFkKCk7IC8vIGluaXRpYWxpemUKCiAgICAgICAgICAgICAgLy8gV3JpdGUgZGF0YSB0byB0aGUgbW9kZWwKICAgICAgICAgICAgICBmdW5jdGlvbiByZWFkKCkgewogICAgICAgICAgICAgICAgdmFyIGh0bWwgPSBlbGVtZW50Lmh0bWwoKTsKICAgICAgICAgICAgICAgIC8vIFdoZW4gd2UgY2xlYXIgdGhlIGNvbnRlbnQgZWRpdGFibGUgdGhlIGJyb3dzZXIgbGVhdmVzIGEgPGJyPiBiZWhpbmQKICAgICAgICAgICAgICAgIC8vIElmIHN0cmlwLWJyIGF0dHJpYnV0ZSBpcyBwcm92aWRlZCB0aGVuIHdlIHN0cmlwIHRoaXMgb3V0CiAgICAgICAgICAgICAgICBpZiggYXR0cnMuc3RyaXBCciAmJiBodG1sID09ICc8YnI+JyApIHsKICAgICAgICAgICAgICAgICAgaHRtbCA9ICcnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGh0bWwpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICB9XSk7CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIj4KICAgICAgIDxkaXYgY29udGVudGVkaXRhYmxlCiAgICAgICAgICAgIG5hbWU9Im15V2lkZ2V0IiBuZy1tb2RlbD0idXNlckNvbnRlbnQiCiAgICAgICAgICAgIHN0cmlwLWJyPSJ0cnVlIgogICAgICAgICAgICByZXF1aXJlZD5DaGFuZ2UgbWUhPC9kaXY+CiAgICAgICAgPHNwYW4gbmctc2hvdz0ibXlGb3JtLm15V2lkZ2V0LiRlcnJvci5yZXF1aXJlZCI+UmVxdWlyZWQhPC9zcGFuPgogICAgICAgPGhyPgogICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPSJ1c2VyQ29udGVudCI+PC90ZXh0YXJlYT4KICAgICAgPC9mb3JtPgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICBpdCgnc2hvdWxkIGRhdGEtYmluZCBhbmQgYmVjb21lIGludmFsaWQnLCBmdW5jdGlvbigpIHsKICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ3NhZmFyaScgfHwgYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnZmlyZWZveCcpIHsKICAgICAgICAvLyBTYWZhcmlEcml2ZXIgY2FuJ3QgaGFuZGxlIGNvbnRlbnRlZGl0YWJsZQogICAgICAgIC8vIGFuZCBGaXJlZm94IGRyaXZlciBjYW4ndCBjbGVhciBjb250ZW50ZWRpdGFibGVzIHZlcnkgd2VsbAogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB2YXIgY29udGVudEVkaXRhYmxlID0gZWxlbWVudChieS5jc3MoJ1tjb250ZW50ZWRpdGFibGVdJykpOwogICAgICB2YXIgY29udGVudCA9ICdDaGFuZ2UgbWUhJzsKCiAgICAgIGV4cGVjdChjb250ZW50RWRpdGFibGUuZ2V0VGV4dCgpKS50b0VxdWFsKGNvbnRlbnQpOwoKICAgICAgY29udGVudEVkaXRhYmxlLmNsZWFyKCk7CiAgICAgIGNvbnRlbnRFZGl0YWJsZS5zZW5kS2V5cyhwcm90cmFjdG9yLktleS5CQUNLX1NQQUNFKTsKICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRUZXh0KCkpLnRvRXF1YWwoJycpOwogICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvbmctaW52YWxpZC1yZXF1aXJlZC8pOwogICAgfSk7CiAgICA8L2ZpbGU+CiAqIDwvZXhhbXBsZT4KICoKICoKICovCnZhciBOZ01vZGVsQ29udHJvbGxlciA9IFsnJHNjb3BlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRhdHRycycsICckZWxlbWVudCcsICckcGFyc2UnLCAnJGFuaW1hdGUnLCAnJHRpbWVvdXQnLAogICAgZnVuY3Rpb24oJHNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlciwgJGF0dHIsICRlbGVtZW50LCAkcGFyc2UsICRhbmltYXRlLCAkdGltZW91dCkgewogIHRoaXMuJHZpZXdWYWx1ZSA9IE51bWJlci5OYU47CiAgdGhpcy4kbW9kZWxWYWx1ZSA9IE51bWJlci5OYU47CiAgdGhpcy4kdmFsaWRhdG9ycyA9IHt9OwogIHRoaXMuJHBhcnNlcnMgPSBbXTsKICB0aGlzLiRmb3JtYXR0ZXJzID0gW107CiAgdGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycyA9IFtdOwogIHRoaXMuJHVudG91Y2hlZCA9IHRydWU7CiAgdGhpcy4kdG91Y2hlZCA9IGZhbHNlOwogIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTsKICB0aGlzLiRkaXJ0eSA9IGZhbHNlOwogIHRoaXMuJHZhbGlkID0gdHJ1ZTsKICB0aGlzLiRpbnZhbGlkID0gZmFsc2U7CiAgdGhpcy4kbmFtZSA9ICRhdHRyLm5hbWU7CgoKICB2YXIgbmdNb2RlbEdldCA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsKSwKICAgICAgbmdNb2RlbFNldCA9IG5nTW9kZWxHZXQuYXNzaWduLAogICAgICBwZW5kaW5nRGVib3VuY2UgPSBudWxsLAogICAgICBjdHJsID0gdGhpczsKCiAgaWYgKCFuZ01vZGVsU2V0KSB7CiAgICB0aHJvdyBtaW5FcnIoJ25nTW9kZWwnKSgnbm9uYXNzaWduJywgIkV4cHJlc3Npb24gJ3swfScgaXMgbm9uLWFzc2lnbmFibGUuIEVsZW1lbnQ6IHsxfSIsCiAgICAgICAgJGF0dHIubmdNb2RlbCwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTsKICB9CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyZW5kZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIENhbGxlZCB3aGVuIHRoZSB2aWV3IG5lZWRzIHRvIGJlIHVwZGF0ZWQuIEl0IGlzIGV4cGVjdGVkIHRoYXQgdGhlIHVzZXIgb2YgdGhlIG5nLW1vZGVsCiAgICogZGlyZWN0aXZlIHdpbGwgaW1wbGVtZW50IHRoaXMgbWV0aG9kLgogICAqCiAgICogVGhlIGAkcmVuZGVyKClgIG1ldGhvZCBpcyBpbnZva2VkIGluIHRoZSBmb2xsb3dpbmcgc2l0dWF0aW9uczoKICAgKgogICAqICogYCRyb2xsYmFja1ZpZXdWYWx1ZSgpYCBpcyBjYWxsZWQuICBJZiB3ZSBhcmUgcm9sbGluZyBiYWNrIHRoZSB2aWV3IHZhbHVlIHRvIHRoZSBsYXN0CiAgICogICBjb21taXR0ZWQgdmFsdWUgdGhlbiBgJHJlbmRlcigpYCBpcyBjYWxsZWQgdG8gdXBkYXRlIHRoZSBpbnB1dCBjb250cm9sLgogICAqICogVGhlIHZhbHVlIHJlZmVyZW5jZWQgYnkgYG5nLW1vZGVsYCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIGJvdGggdGhlIGAkbW9kZWxWYWx1ZWAgYW5kCiAgICogICB0aGUgYCR2aWV3VmFsdWVgIGFyZSBkaWZmZXJlbnQgdG8gbGFzdCB0aW1lLgogICAqCiAgICogU2luY2UgYG5nLW1vZGVsYCBkb2VzIG5vdCBkbyBhIGRlZXAgd2F0Y2gsIGAkcmVuZGVyKClgIGlzIG9ubHkgaW52b2tlZCBpZiB0aGUgdmFsdWVzIG9mCiAgICogYCRtb2RlbFZhbHVlYCBhbmQgYCR2aWV3VmFsdWVgIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQgdG8gdGhlaXIgcHJldmlvdXMgdmFsdWUuIElmIGAkbW9kZWxWYWx1ZWAKICAgKiBvciBgJHZpZXdWYWx1ZWAgYXJlIG9iamVjdHMgKHJhdGhlciB0aGFuIGEgc3RyaW5nIG9yIG51bWJlcikgdGhlbiBgJHJlbmRlcigpYCB3aWxsIG5vdCBiZQogICAqIGludm9rZWQgaWYgeW91IG9ubHkgY2hhbmdlIGEgcHJvcGVydHkgb24gdGhlIG9iamVjdHMuCiAgICovCiAgdGhpcy4kcmVuZGVyID0gbm9vcDsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJGlzRW1wdHkKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gd2UgbmVlZCB0byBkZXRlcm1pbmUgaWYgdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBpcyBlbXB0eS4KICAgKgogICAqIEZvciBpbnN0YW5jZSwgdGhlIHJlcXVpcmVkIGRpcmVjdGl2ZSBkb2VzIHRoaXMgdG8gd29yayBvdXQgaWYgdGhlIGlucHV0IGhhcyBkYXRhIG9yIG5vdC4KICAgKiBUaGUgZGVmYXVsdCBgJGlzRW1wdHlgIGZ1bmN0aW9uIGNoZWNrcyB3aGV0aGVyIHRoZSB2YWx1ZSBpcyBgdW5kZWZpbmVkYCwgYCcnYCwgYG51bGxgIG9yIGBOYU5gLgogICAqCiAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIGZvciBpbnB1dCBkaXJlY3RpdmVzIHdob3NlIGNvbmNlcHQgb2YgYmVpbmcgZW1wdHkgaXMgZGlmZmVyZW50IHRvIHRoZQogICAqIGRlZmF1bHQuIFRoZSBgY2hlY2tib3hJbnB1dFR5cGVgIGRpcmVjdGl2ZSBkb2VzIHRoaXMgYmVjYXVzZSBpbiBpdHMgY2FzZSBhIHZhbHVlIG9mIGBmYWxzZWAKICAgKiBpbXBsaWVzIGVtcHR5LgogICAqCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBlbXB0eS4KICAgKi8KICB0aGlzLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTsKICB9OwoKICB2YXIgcGFyZW50Rm9ybSA9ICRlbGVtZW50LmluaGVyaXRlZERhdGEoJyRmb3JtQ29udHJvbGxlcicpIHx8IG51bGxGb3JtQ3RybCwKICAgICAgaW52YWxpZENvdW50ID0gMCwgLy8gdXNlZCB0byBlYXNpbHkgZGV0ZXJtaW5lIGlmIHdlIGFyZSB2YWxpZAogICAgICAkZXJyb3IgPSB0aGlzLiRlcnJvciA9IHt9OyAvLyBrZWVwIGludmFsaWQga2V5cyBoZXJlCgoKICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sCiAgJGVsZW1lbnQKICAgIC5hZGRDbGFzcyhQUklTVElORV9DTEFTUykKICAgIC5hZGRDbGFzcyhVTlRPVUNIRURfQ0xBU1MpOwogIHRvZ2dsZVZhbGlkQ3NzKHRydWUpOwoKICAvLyBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGVhc3kgdG9nZ2xpbmcgb2YgY2xhc3NlcwogIGZ1bmN0aW9uIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQsIHZhbGlkYXRpb25FcnJvcktleSkgewogICAgdmFsaWRhdGlvbkVycm9yS2V5ID0gdmFsaWRhdGlvbkVycm9yS2V5ID8gJy0nICsgc25ha2VfY2FzZSh2YWxpZGF0aW9uRXJyb3JLZXksICctJykgOiAnJzsKICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKCRlbGVtZW50LCAoaXNWYWxpZCA/IElOVkFMSURfQ0xBU1MgOiBWQUxJRF9DTEFTUykgKyB2YWxpZGF0aW9uRXJyb3JLZXkpOwogICAgJGFuaW1hdGUuYWRkQ2xhc3MoJGVsZW1lbnQsIChpc1ZhbGlkID8gVkFMSURfQ0xBU1MgOiBJTlZBTElEX0NMQVNTKSArIHZhbGlkYXRpb25FcnJvcktleSk7CiAgfQoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VmFsaWRpdHkKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIENoYW5nZSB0aGUgdmFsaWRpdHkgc3RhdGUsIGFuZCBub3RpZmllcyB0aGUgZm9ybSB3aGVuIHRoZSBjb250cm9sIGNoYW5nZXMgdmFsaWRpdHkuIChpLmUuIGl0CiAgICogZG9lcyBub3Qgbm90aWZ5IGZvcm0gaWYgZ2l2ZW4gdmFsaWRhdG9yIGlzIGFscmVhZHkgbWFya2VkIGFzIGludmFsaWQpLgogICAqCiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB3aXRoaW4gJHBhcnNlcnMvJGZvcm1hdHRlcnMuIEhvd2V2ZXIsIGlmIHBvc3NpYmxlLCBwbGVhc2UgdXNlIHRoZQogICAqICAgICAgICBgbmdNb2RlbC4kdmFsaWRhdG9yc2AgcGlwZWxpbmUgd2hpY2ggaXMgZGVzaWduZWQgdG8gaGFuZGxlIHZhbGlkYXRpb25zIHdpdGggdHJ1ZS9mYWxzZSB2YWx1ZXMuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdGlvbkVycm9yS2V5IE5hbWUgb2YgdGhlIHZhbGlkYXRvci4gdGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHdpbGwgYXNzaWduCiAgICogICAgICAgIHRvIGAkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XT0haXNWYWxpZGAgc28gdGhhdCBpdCBpcyBhdmFpbGFibGUgZm9yIGRhdGEtYmluZGluZy4KICAgKiAgICAgICAgVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHNob3VsZCBiZSBpbiBjYW1lbENhc2UgYW5kIHdpbGwgZ2V0IGNvbnZlcnRlZCBpbnRvIGRhc2gtY2FzZQogICAqICAgICAgICBmb3IgY2xhc3MgbmFtZS4gRXhhbXBsZTogYG15RXJyb3JgIHdpbGwgcmVzdWx0IGluIGBuZy12YWxpZC1teS1lcnJvcmAgYW5kIGBuZy1pbnZhbGlkLW15LWVycm9yYAogICAqICAgICAgICBjbGFzcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzICBge3tzb21lRm9ybS5zb21lQ29udHJvbC4kZXJyb3IubXlFcnJvcn19YCAuCiAgICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpIG9yIGludmFsaWQgKGZhbHNlKS4KICAgKi8KICB0aGlzLiRzZXRWYWxpZGl0eSA9IGZ1bmN0aW9uKHZhbGlkYXRpb25FcnJvcktleSwgaXNWYWxpZCkgewogICAgLy8gUHVycG9zZWZ1bCB1c2Ugb2YgISBoZXJlIHRvIGNhc3QgaXNWYWxpZCB0byBib29sZWFuIGluIGNhc2UgaXQgaXMgdW5kZWZpbmVkCiAgICAvLyBqc2hpbnQgLVcwMTgKICAgIGlmICgkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSA9PT0gIWlzVmFsaWQpIHJldHVybjsKICAgIC8vIGpzaGludCArVzAxOAoKICAgIGlmIChpc1ZhbGlkKSB7CiAgICAgIGlmICgkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkgaW52YWxpZENvdW50LS07CiAgICAgIGlmICghaW52YWxpZENvdW50KSB7CiAgICAgICAgdG9nZ2xlVmFsaWRDc3ModHJ1ZSk7CiAgICAgICAgY3RybC4kdmFsaWQgPSB0cnVlOwogICAgICAgIGN0cmwuJGludmFsaWQgPSBmYWxzZTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdG9nZ2xlVmFsaWRDc3MoZmFsc2UpOwogICAgICBjdHJsLiRpbnZhbGlkID0gdHJ1ZTsKICAgICAgY3RybC4kdmFsaWQgPSBmYWxzZTsKICAgICAgaW52YWxpZENvdW50Kys7CiAgICB9CgogICAgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV0gPSAhaXNWYWxpZDsKICAgIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQsIHZhbGlkYXRpb25FcnJvcktleSk7CgogICAgcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkLCBjdHJsKTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0UHJpc3RpbmUKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lIHN0YXRlLgogICAqCiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmUKICAgKiBzdGF0ZSAobmctcHJpc3RpbmUgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJpc3RpbmUgd2hlbiB0aGUgbW9kZWwgaGFzIG5vdCBiZWVuIGNoYW5nZWQKICAgKiBmcm9tIHdoZW4gZmlyc3QgY29tcGlsZWQgd2l0aGluIHRoZW4gZm9ybS4KICAgKi8KICB0aGlzLiRzZXRQcmlzdGluZSA9IGZ1bmN0aW9uICgpIHsKICAgIGN0cmwuJGRpcnR5ID0gZmFsc2U7CiAgICBjdHJsLiRwcmlzdGluZSA9IHRydWU7CiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcygkZWxlbWVudCwgRElSVFlfQ0xBU1MpOwogICAgJGFuaW1hdGUuYWRkQ2xhc3MoJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VW50b3VjaGVkCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyB1bnRvdWNoZWQgc3RhdGUuCiAgICoKICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLXRvdWNoZWQnIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzCiAgICogdW50b3VjaGVkIHN0YXRlIChuZy11bnRvdWNoZWQgY2xhc3MpLiBVcG9uIGNvbXBpbGF0aW9uLCBhIG1vZGVsIGlzIHNldCBhcyB1bnRvdWNoZWQKICAgKiBieSBkZWZhdWx0LCBob3dldmVyIHRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gcmVzdG9yZSB0aGF0IHN0YXRlIGlmIHRoZSBtb2RlbCBoYXMKICAgKiBhbHJlYWR5IGJlZW4gdG91Y2hlZCBieSB0aGUgdXNlci4KICAgKi8KICB0aGlzLiRzZXRVbnRvdWNoZWQgPSBmdW5jdGlvbigpIHsKICAgIGN0cmwuJHRvdWNoZWQgPSBmYWxzZTsKICAgIGN0cmwuJHVudG91Y2hlZCA9IHRydWU7CiAgICAkYW5pbWF0ZS5zZXRDbGFzcygkZWxlbWVudCwgVU5UT1VDSEVEX0NMQVNTLCBUT1VDSEVEX0NMQVNTKTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VG91Y2hlZAogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgdG91Y2hlZCBzdGF0ZS4KICAgKgogICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSAnbmctdW50b3VjaGVkJyBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0cwogICAqIHRvdWNoZWQgc3RhdGUgKG5nLXRvdWNoZWQgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgdG91Y2hlZCB3aGVuIHRoZSB1c2VyIGhhcwogICAqIGZpcnN0IGludGVyYWN0ZWQgKGZvY3Vzc2VkKSBvbiB0aGUgbW9kZWwgaW5wdXQgZWxlbWVudCBhbmQgdGhlbiBzaGlmdGVkIGZvY3VzIGF3YXkgKGJsdXJyZWQpCiAgICogZnJvbSB0aGUgaW5wdXQgZWxlbWVudC4KICAgKi8KICB0aGlzLiRzZXRUb3VjaGVkID0gZnVuY3Rpb24oKSB7CiAgICBjdHJsLiR0b3VjaGVkID0gdHJ1ZTsKICAgIGN0cmwuJHVudG91Y2hlZCA9IGZhbHNlOwogICAgJGFuaW1hdGUuc2V0Q2xhc3MoJGVsZW1lbnQsIFRPVUNIRURfQ0xBU1MsIFVOVE9VQ0hFRF9DTEFTUyk7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJvbGxiYWNrVmlld1ZhbHVlCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDYW5jZWwgYW4gdXBkYXRlIGFuZCByZXNldCB0aGUgaW5wdXQgZWxlbWVudCdzIHZhbHVlIHRvIHByZXZlbnQgYW4gdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLAogICAqIHdoaWNoIG1heSBiZSBjYXVzZWQgYnkgYSBwZW5kaW5nIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUKICAgKiBmdXR1cmUgZXZlbnQuCiAgICoKICAgKiBJZiB5b3UgaGF2ZSBhbiBpbnB1dCB0aGF0IHVzZXMgYG5nLW1vZGVsLW9wdGlvbnNgIHRvIHNldCB1cCBkZWJvdW5jZWQgZXZlbnRzIG9yIGV2ZW50cyBzdWNoCiAgICogYXMgYmx1ciB5b3UgY2FuIGhhdmUgYSBzaXR1YXRpb24gd2hlcmUgdGhlcmUgaXMgYSBwZXJpb2Qgd2hlbiB0aGUgYCR2aWV3VmFsdWVgCiAgICogaXMgb3V0IG9mIHN5bmNoIHdpdGggdGhlIG5nTW9kZWwncyBgJG1vZGVsVmFsdWVgLgogICAqCiAgICogSW4gdGhpcyBjYXNlLCB5b3UgY2FuIHJ1biBpbnRvIGRpZmZpY3VsdGllcyBpZiB5b3UgdHJ5IHRvIHVwZGF0ZSB0aGUgbmdNb2RlbCdzIGAkbW9kZWxWYWx1ZWAKICAgKiBwcm9ncmFtbWF0aWNhbGx5IGJlZm9yZSB0aGVzZSBkZWJvdW5jZWQvZnV0dXJlIGV2ZW50cyBoYXZlIHJlc29sdmVkL29jY3VycmVkLCBiZWNhdXNlIEFuZ3VsYXIncwogICAqIGRpcnR5IGNoZWNraW5nIG1lY2hhbmlzbSBpcyBub3QgYWJsZSB0byB0ZWxsIHdoZXRoZXIgdGhlIG1vZGVsIGhhcyBhY3R1YWxseSBjaGFuZ2VkIG9yIG5vdC4KICAgKgogICAqIFRoZSBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBwcm9ncmFtbWF0aWNhbGx5IGNoYW5naW5nIHRoZSBtb2RlbCBvZiBhbgogICAqIGlucHV0IHdoaWNoIG1heSBoYXZlIHN1Y2ggZXZlbnRzIHBlbmRpbmcuIFRoaXMgaXMgaW1wb3J0YW50IGluIG9yZGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZQogICAqIGlucHV0IGZpZWxkIHdpbGwgYmUgdXBkYXRlZCB3aXRoIHRoZSBuZXcgbW9kZWwgdmFsdWUgYW5kIGFueSBwZW5kaW5nIG9wZXJhdGlvbnMgYXJlIGNhbmNlbGxlZC4KICAgKgogICAqIDxleGFtcGxlIG5hbWU9Im5nLW1vZGVsLWNhbmNlbC11cGRhdGUiIG1vZHVsZT0iY2FuY2VsLXVwZGF0ZS1leGFtcGxlIj4KICAgKiAgIDxmaWxlIG5hbWU9ImFwcC5qcyI+CiAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdjYW5jZWwtdXBkYXRlLWV4YW1wbGUnLCBbXSkKICAgKgogICAqICAgICAuY29udHJvbGxlcignQ2FuY2VsVXBkYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICogICAgICAgJHNjb3BlLnJlc2V0V2l0aENhbmNlbCA9IGZ1bmN0aW9uIChlKSB7CiAgICogICAgICAgICBpZiAoZS5rZXlDb2RlID09IDI3KSB7CiAgICogICAgICAgICAgICRzY29wZS5teUZvcm0ubXlJbnB1dDEuJHJvbGxiYWNrVmlld1ZhbHVlKCk7CiAgICogICAgICAgICAgICRzY29wZS5teVZhbHVlID0gJyc7CiAgICogICAgICAgICB9CiAgICogICAgICAgfTsKICAgKiAgICAgICAkc2NvcGUucmVzZXRXaXRob3V0Q2FuY2VsID0gZnVuY3Rpb24gKGUpIHsKICAgKiAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpIHsKICAgKiAgICAgICAgICAgJHNjb3BlLm15VmFsdWUgPSAnJzsKICAgKiAgICAgICAgIH0KICAgKiAgICAgICB9OwogICAqICAgICB9XSk7CiAgICogICA8L2ZpbGU+CiAgICogICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDYW5jZWxVcGRhdGVDb250cm9sbGVyIj4KICAgKiAgICAgICA8cD5UcnkgdHlwaW5nIHNvbWV0aGluZyBpbiBlYWNoIGlucHV0LiAgU2VlIHRoYXQgdGhlIG1vZGVsIG9ubHkgdXBkYXRlcyB3aGVuIHlvdQogICAqICAgICAgICAgIGJsdXIgb2ZmIHRoZSBpbnB1dC4KICAgKiAgICAgICAgPC9wPgogICAqICAgICAgICA8cD5Ob3cgc2VlIHdoYXQgaGFwcGVucyBpZiB5b3Ugc3RhcnQgdHlwaW5nIHRoZW4gcHJlc3MgdGhlIEVzY2FwZSBrZXk8L3A+CiAgICoKICAgKiAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLW1vZGVsLW9wdGlvbnM9InsgdXBkYXRlT246ICdibHVyJyB9Ij4KICAgKiAgICAgICAgIDxwPldpdGggJHJvbGxiYWNrVmlld1ZhbHVlKCk8L3A+CiAgICogICAgICAgICA8aW5wdXQgbmFtZT0ibXlJbnB1dDEiIG5nLW1vZGVsPSJteVZhbHVlIiBuZy1rZXlkb3duPSJyZXNldFdpdGhDYW5jZWwoJGV2ZW50KSI+PGJyLz4KICAgKiAgICAgICAgIG15VmFsdWU6ICJ7eyBteVZhbHVlIH19IgogICAqCiAgICogICAgICAgICA8cD5XaXRob3V0ICRyb2xsYmFja1ZpZXdWYWx1ZSgpPC9wPgogICAqICAgICAgICAgPGlucHV0IG5hbWU9Im15SW5wdXQyIiBuZy1tb2RlbD0ibXlWYWx1ZSIgbmcta2V5ZG93bj0icmVzZXRXaXRob3V0Q2FuY2VsKCRldmVudCkiPjxici8+CiAgICogICAgICAgICBteVZhbHVlOiAie3sgbXlWYWx1ZSB9fSIKICAgKiAgICAgICA8L2Zvcm0+CiAgICogICAgIDwvZGl2PgogICAqICAgPC9maWxlPgogICAqIDwvZXhhbXBsZT4KICAgKi8KICB0aGlzLiRyb2xsYmFja1ZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkgewogICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7CiAgICBjdHJsLiR2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTsKICAgIGN0cmwuJHJlbmRlcigpOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0ZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUnVucyBlYWNoIG9mIHRoZSByZWdpc3RlcmVkIHZhbGlkYXRpb25zIHNldCBvbiB0aGUgJHZhbGlkYXRvcnMgb2JqZWN0LgogICAqLwogIHRoaXMuJHZhbGlkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAvLyBpZ25vcmUgJHZhbGlkYXRlIGJlZm9yZSBtb2RlbCBpbml0aWFsaXplZAogICAgaWYgKGN0cmwuJG1vZGVsVmFsdWUgIT09IGN0cmwuJG1vZGVsVmFsdWUpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBwcmV2ID0gY3RybC4kbW9kZWxWYWx1ZTsKICAgIGN0cmwuJCRydW5WYWxpZGF0b3JzKGN0cmwuJCRpbnZhbGlkTW9kZWxWYWx1ZSB8fCBjdHJsLiRtb2RlbFZhbHVlLCBjdHJsLiR2aWV3VmFsdWUpOwogICAgaWYgKHByZXYgIT09IGN0cmwuJG1vZGVsVmFsdWUpIHsKICAgICAgY3RybC4kJHdyaXRlTW9kZWxUb1Njb3BlKCk7CiAgICB9CiAgfTsKCiAgdGhpcy4kJHJ1blZhbGlkYXRvcnMgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHsKICAgIGZvckVhY2goY3RybC4kdmFsaWRhdG9ycywgZnVuY3Rpb24oZm4sIG5hbWUpIHsKICAgICAgY3RybC4kc2V0VmFsaWRpdHkobmFtZSwgZm4obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSk7CiAgICB9KTsKICAgIGN0cmwuJG1vZGVsVmFsdWUgICAgICAgICA9IGN0cmwuJHZhbGlkID8gbW9kZWxWYWx1ZSA6IHVuZGVmaW5lZDsKICAgIGN0cmwuJCRpbnZhbGlkTW9kZWxWYWx1ZSA9IGN0cmwuJHZhbGlkID8gdW5kZWZpbmVkIDogbW9kZWxWYWx1ZTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkY29tbWl0Vmlld1ZhbHVlCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDb21taXQgYSBwZW5kaW5nIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYC4KICAgKgogICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZQogICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiB0aGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmAKICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy4KICAgKi8KICB0aGlzLiRjb21taXRWaWV3VmFsdWUgPSBmdW5jdGlvbihyZXZhbGlkYXRlKSB7CiAgICB2YXIgdmlld1ZhbHVlID0gY3RybC4kdmlld1ZhbHVlOwoKICAgICR0aW1lb3V0LmNhbmNlbChwZW5kaW5nRGVib3VuY2UpOwogICAgaWYgKCFyZXZhbGlkYXRlICYmIGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID09PSB2aWV3VmFsdWUpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7CgogICAgLy8gY2hhbmdlIHRvIGRpcnR5CiAgICBpZiAoY3RybC4kcHJpc3RpbmUpIHsKICAgICAgY3RybC4kZGlydHkgPSB0cnVlOwogICAgICBjdHJsLiRwcmlzdGluZSA9IGZhbHNlOwogICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcygkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpOwogICAgICAkYW5pbWF0ZS5hZGRDbGFzcygkZWxlbWVudCwgRElSVFlfQ0xBU1MpOwogICAgICBwYXJlbnRGb3JtLiRzZXREaXJ0eSgpOwogICAgfQoKICAgIHZhciBtb2RlbFZhbHVlID0gdmlld1ZhbHVlOwogICAgZm9yRWFjaChjdHJsLiRwYXJzZXJzLCBmdW5jdGlvbihmbikgewogICAgICBtb2RlbFZhbHVlID0gZm4obW9kZWxWYWx1ZSk7CiAgICB9KTsKCiAgICBpZiAoY3RybC4kbW9kZWxWYWx1ZSAhPT0gbW9kZWxWYWx1ZSAmJgogICAgICAgIChpc1VuZGVmaW5lZChjdHJsLiQkaW52YWxpZE1vZGVsVmFsdWUpIHx8IGN0cmwuJCRpbnZhbGlkTW9kZWxWYWx1ZSAhPSBtb2RlbFZhbHVlKSkgewogICAgICBjdHJsLiQkcnVuVmFsaWRhdG9ycyhtb2RlbFZhbHVlLCB2aWV3VmFsdWUpOwogICAgICBjdHJsLiQkd3JpdGVNb2RlbFRvU2NvcGUoKTsKICAgIH0KICB9OwoKICB0aGlzLiQkd3JpdGVNb2RlbFRvU2NvcGUgPSBmdW5jdGlvbigpIHsKICAgIHZhciBnZXR0ZXJTZXR0ZXI7CgogICAgaWYgKGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy5nZXR0ZXJTZXR0ZXIgJiYKICAgICAgICBpc0Z1bmN0aW9uKGdldHRlclNldHRlciA9IG5nTW9kZWxHZXQoJHNjb3BlKSkpIHsKCiAgICAgIGdldHRlclNldHRlcihjdHJsLiRtb2RlbFZhbHVlKTsKICAgIH0gZWxzZSB7CiAgICAgIG5nTW9kZWxTZXQoJHNjb3BlLCBjdHJsLiRtb2RlbFZhbHVlKTsKICAgIH0KICAgIGZvckVhY2goY3RybC4kdmlld0NoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHsKICAgICAgdHJ5IHsKICAgICAgICBsaXN0ZW5lcigpOwogICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVXBkYXRlIHRoZSB2aWV3IHZhbHVlLgogICAqCiAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIGFuIGlucHV0IGRpcmVjdGl2ZSB3YW50IHRvIGNoYW5nZSB0aGUgdmlldyB2YWx1ZTsgdHlwaWNhbGx5LAogICAqIHRoaXMgaXMgZG9uZSBmcm9tIHdpdGhpbiBhIERPTSBldmVudCBoYW5kbGVyLgogICAqCiAgICogRm9yIGV4YW1wbGUge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dH0gY2FsbHMgaXQgd2hlbiB0aGUgdmFsdWUgb2YgdGhlIGlucHV0IGNoYW5nZXMgYW5kCiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fSBjYWxscyBpdCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZC4KICAgKgogICAqIElmIHRoZSBuZXcgYHZhbHVlYCBpcyBhbiBvYmplY3QgKHJhdGhlciB0aGFuIGEgc3RyaW5nIG9yIGEgbnVtYmVyKSwgd2Ugc2hvdWxkIG1ha2UgYSBjb3B5IG9mIHRoZQogICAqIG9iamVjdCBiZWZvcmUgcGFzc2luZyBpdCB0byBgJHNldFZpZXdWYWx1ZWAuICBUaGlzIGlzIGJlY2F1c2UgYG5nTW9kZWxgIGRvZXMgbm90IHBlcmZvcm0gYSBkZWVwCiAgICogd2F0Y2ggb2Ygb2JqZWN0cywgaXQgb25seSBsb29rcyBmb3IgYSBjaGFuZ2Ugb2YgaWRlbnRpdHkuIElmIHlvdSBvbmx5IGNoYW5nZSB0aGUgcHJvcGVydHkgb2YKICAgKiB0aGUgb2JqZWN0IHRoZW4gbmdNb2RlbCB3aWxsIG5vdCByZWFsaXNlIHRoYXQgdGhlIG9iamVjdCBoYXMgY2hhbmdlZCBhbmQgd2lsbCBub3QgaW52b2tlIHRoZQogICAqIGAkcGFyc2Vyc2AgYW5kIGAkdmFsaWRhdG9yc2AgcGlwZWxpbmVzLgogICAqCiAgICogRm9yIHRoaXMgcmVhc29uLCB5b3Ugc2hvdWxkIG5vdCBjaGFuZ2UgcHJvcGVydGllcyBvZiB0aGUgY29weSBvbmNlIGl0IGhhcyBiZWVuIHBhc3NlZCB0bwogICAqIGAkc2V0Vmlld1ZhbHVlYC4gT3RoZXJ3aXNlIHlvdSBtYXkgY2F1c2UgdGhlIG1vZGVsIHZhbHVlIG9uIHRoZSBzY29wZSB0byBjaGFuZ2UgaW5jb3JyZWN0bHkuCiAgICoKICAgKiBXaGVuIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCwgdGhlIG5ldyBgdmFsdWVgIHdpbGwgYmUgc3RhZ2VkIGZvciBjb21taXR0aW5nIHRocm91Z2ggdGhlIGAkcGFyc2Vyc2AKICAgKiBhbmQgYCR2YWxpZGF0b3JzYCBwaXBlbGluZXMuIElmIHRoZXJlIGFyZSBubyBzcGVjaWFsIHtAbGluayBuZ01vZGVsT3B0aW9uc30gc3BlY2lmaWVkIHRoZW4gdGhlIHN0YWdlZAogICAqIHZhbHVlIHNlbnQgZGlyZWN0bHkgZm9yIHByb2Nlc3NpbmcsIGZpbmFsbHkgdG8gYmUgYXBwbGllZCB0byBgJG1vZGVsVmFsdWVgIGFuZCB0aGVuIHRoZQogICAqICoqZXhwcmVzc2lvbioqIHNwZWNpZmllZCBpbiB0aGUgYG5nLW1vZGVsYCBhdHRyaWJ1dGUuCiAgICoKICAgKiBMYXN0bHksIGFsbCB0aGUgcmVnaXN0ZXJlZCBjaGFuZ2UgbGlzdGVuZXJzLCBpbiB0aGUgYCR2aWV3Q2hhbmdlTGlzdGVuZXJzYCBsaXN0LCBhcmUgY2FsbGVkLgogICAqCiAgICogSW4gY2FzZSB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30gZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBgdXBkYXRlT25gCiAgICogYW5kIHRoZSBgZGVmYXVsdGAgdHJpZ2dlciBpcyBub3QgbGlzdGVkLCBhbGwgdGhvc2UgYWN0aW9ucyB3aWxsIHJlbWFpbiBwZW5kaW5nIHVudGlsIG9uZSBvZiB0aGUKICAgKiBgdXBkYXRlT25gIGV2ZW50cyBpcyB0cmlnZ2VyZWQgb24gdGhlIERPTSBlbGVtZW50LgogICAqIEFsbCB0aGVzZSBhY3Rpb25zIHdpbGwgYmUgZGVib3VuY2VkIGlmIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfQogICAqIGRpcmVjdGl2ZSBpcyB1c2VkIHdpdGggYSBjdXN0b20gZGVib3VuY2UgZm9yIHRoaXMgcGFydGljdWxhciBldmVudC4KICAgKgogICAqIE5vdGUgdGhhdCBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdHJpZ2dlciBhIGAkZGlnZXN0YC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBWYWx1ZSBmcm9tIHRoZSB2aWV3LgogICAqIEBwYXJhbSB7c3RyaW5nfSB0cmlnZ2VyIEV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSB1cGRhdGUuCiAgICovCiAgdGhpcy4kc2V0Vmlld1ZhbHVlID0gZnVuY3Rpb24odmFsdWUsIHRyaWdnZXIsIHJldmFsaWRhdGUpIHsKICAgIGN0cmwuJHZpZXdWYWx1ZSA9IHZhbHVlOwogICAgaWYgKCFjdHJsLiRvcHRpb25zIHx8IGN0cmwuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0KSB7CiAgICAgIGN0cmwuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCh0cmlnZ2VyLCByZXZhbGlkYXRlKTsKICAgIH0KICB9OwoKICB0aGlzLiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQgPSBmdW5jdGlvbih0cmlnZ2VyLCByZXZhbGlkYXRlKSB7CiAgICB2YXIgZGVib3VuY2VEZWxheSA9IDAsCiAgICAgICAgb3B0aW9ucyA9IGN0cmwuJG9wdGlvbnMsCiAgICAgICAgZGVib3VuY2U7CgogICAgaWYob3B0aW9ucyAmJiBpc0RlZmluZWQob3B0aW9ucy5kZWJvdW5jZSkpIHsKICAgICAgZGVib3VuY2UgPSBvcHRpb25zLmRlYm91bmNlOwogICAgICBpZihpc051bWJlcihkZWJvdW5jZSkpIHsKICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2U7CiAgICAgIH0gZWxzZSBpZihpc051bWJlcihkZWJvdW5jZVt0cmlnZ2VyXSkpIHsKICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2VbdHJpZ2dlcl07CiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZGVib3VuY2VbJ2RlZmF1bHQnXSkpIHsKICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2VbJ2RlZmF1bHQnXTsKICAgICAgfQogICAgfQoKICAgICR0aW1lb3V0LmNhbmNlbChwZW5kaW5nRGVib3VuY2UpOwogICAgaWYgKGRlYm91bmNlRGVsYXkpIHsKICAgICAgcGVuZGluZ0RlYm91bmNlID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgY3RybC4kY29tbWl0Vmlld1ZhbHVlKHJldmFsaWRhdGUpOwogICAgICB9LCBkZWJvdW5jZURlbGF5KTsKICAgIH0gZWxzZSB7CiAgICAgIGN0cmwuJGNvbW1pdFZpZXdWYWx1ZShyZXZhbGlkYXRlKTsKICAgIH0KICB9OwoKICAvLyBtb2RlbCAtPiB2YWx1ZQogICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gbmdNb2RlbFdhdGNoKCkgewogICAgdmFyIG1vZGVsVmFsdWUgPSBuZ01vZGVsR2V0KCRzY29wZSk7CgogICAgaWYgKGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy5nZXR0ZXJTZXR0ZXIgJiYgaXNGdW5jdGlvbihtb2RlbFZhbHVlKSkgewogICAgICBtb2RlbFZhbHVlID0gbW9kZWxWYWx1ZSgpOwogICAgfQoKICAgIC8vIGlmIHNjb3BlIG1vZGVsIHZhbHVlIGFuZCBuZ01vZGVsIHZhbHVlIGFyZSBvdXQgb2Ygc3luYwogICAgaWYgKGN0cmwuJG1vZGVsVmFsdWUgIT09IG1vZGVsVmFsdWUgJiYKICAgICAgICAoaXNVbmRlZmluZWQoY3RybC4kJGludmFsaWRNb2RlbFZhbHVlKSB8fCBjdHJsLiQkaW52YWxpZE1vZGVsVmFsdWUgIT0gbW9kZWxWYWx1ZSkpIHsKCiAgICAgIHZhciBmb3JtYXR0ZXJzID0gY3RybC4kZm9ybWF0dGVycywKICAgICAgICAgIGlkeCA9IGZvcm1hdHRlcnMubGVuZ3RoOwoKICAgICAgdmFyIHZpZXdWYWx1ZSA9IG1vZGVsVmFsdWU7CiAgICAgIHdoaWxlKGlkeC0tKSB7CiAgICAgICAgdmlld1ZhbHVlID0gZm9ybWF0dGVyc1tpZHhdKHZpZXdWYWx1ZSk7CiAgICAgIH0KCiAgICAgIGN0cmwuJCRydW5WYWxpZGF0b3JzKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSk7CgogICAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2aWV3VmFsdWUpIHsKICAgICAgICBjdHJsLiR2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTsKICAgICAgICBjdHJsLiRyZW5kZXIoKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBtb2RlbFZhbHVlOwogIH0pOwp9XTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ01vZGVsCiAqCiAqIEBlbGVtZW50IGlucHV0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nTW9kZWxgIGRpcmVjdGl2ZSBiaW5kcyBhbiBgaW5wdXRgLGBzZWxlY3RgLCBgdGV4dGFyZWFgIChvciBjdXN0b20gZm9ybSBjb250cm9sKSB0byBhCiAqIHByb3BlcnR5IG9uIHRoZSBzY29wZSB1c2luZyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBOZ01vZGVsQ29udHJvbGxlcn0sCiAqIHdoaWNoIGlzIGNyZWF0ZWQgYW5kIGV4cG9zZWQgYnkgdGhpcyBkaXJlY3RpdmUuCiAqCiAqIGBuZ01vZGVsYCBpcyByZXNwb25zaWJsZSBmb3I6CiAqCiAqIC0gQmluZGluZyB0aGUgdmlldyBpbnRvIHRoZSBtb2RlbCwgd2hpY2ggb3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBpbnB1dGAsIGB0ZXh0YXJlYWAgb3IgYHNlbGVjdGAKICogICByZXF1aXJlLgogKiAtIFByb3ZpZGluZyB2YWxpZGF0aW9uIGJlaGF2aW9yIChpLmUuIHJlcXVpcmVkLCBudW1iZXIsIGVtYWlsLCB1cmwpLgogKiAtIEtlZXBpbmcgdGhlIHN0YXRlIG9mIHRoZSBjb250cm9sICh2YWxpZC9pbnZhbGlkLCBkaXJ0eS9wcmlzdGluZSwgdG91Y2hlZC91bnRvdWNoZWQsIHZhbGlkYXRpb24gZXJyb3JzKS4KICogLSBTZXR0aW5nIHJlbGF0ZWQgY3NzIGNsYXNzZXMgb24gdGhlIGVsZW1lbnQgKGBuZy12YWxpZGAsIGBuZy1pbnZhbGlkYCwgYG5nLWRpcnR5YCwgYG5nLXByaXN0aW5lYCwgYG5nLXRvdWNoZWRgLCBgbmctdW50b3VjaGVkYCkgaW5jbHVkaW5nIGFuaW1hdGlvbnMuCiAqIC0gUmVnaXN0ZXJpbmcgdGhlIGNvbnRyb2wgd2l0aCBpdHMgcGFyZW50IHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBmb3JtfS4KICoKICogTm90ZTogYG5nTW9kZWxgIHdpbGwgdHJ5IHRvIGJpbmQgdG8gdGhlIHByb3BlcnR5IGdpdmVuIGJ5IGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24gb24gdGhlCiAqIGN1cnJlbnQgc2NvcGUuIElmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gdGhpcyBzY29wZSwgaXQgd2lsbCBiZSBjcmVhdGVkCiAqIGltcGxpY2l0bHkgYW5kIGFkZGVkIHRvIHRoZSBzY29wZS4KICoKICogRm9yIGJlc3QgcHJhY3RpY2VzIG9uIHVzaW5nIGBuZ01vZGVsYCwgc2VlOgogKgogKiAgLSBbaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy93aWtpL1VuZGVyc3RhbmRpbmctU2NvcGVzXQogKgogKiBGb3IgYmFzaWMgZXhhbXBsZXMsIGhvdyB0byB1c2UgYG5nTW9kZWxgLCBzZWU6CiAqCiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9CiAqICAgIC0ge0BsaW5rIGlucHV0W3RleHRdIHRleHR9CiAqICAgIC0ge0BsaW5rIGlucHV0W2NoZWNrYm94XSBjaGVja2JveH0KICogICAgLSB7QGxpbmsgaW5wdXRbcmFkaW9dIHJhZGlvfQogKiAgICAtIHtAbGluayBpbnB1dFtudW1iZXJdIG51bWJlcn0KICogICAgLSB7QGxpbmsgaW5wdXRbZW1haWxdIGVtYWlsfQogKiAgICAtIHtAbGluayBpbnB1dFt1cmxdIHVybH0KICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZV0gZGF0ZX0KICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZVRpbWVMb2NhbF0gZGF0ZVRpbWVMb2NhbH0KICogICAgLSB7QGxpbmsgaW5wdXRbdGltZV0gdGltZX0KICogICAgLSB7QGxpbmsgaW5wdXRbbW9udGhdIG1vbnRofQogKiAgICAtIHtAbGluayBpbnB1dFt3ZWVrXSB3ZWVrfQogKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOnNlbGVjdCBzZWxlY3R9CiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6dGV4dGFyZWEgdGV4dGFyZWF9CiAqCiAqICMgQ1NTIGNsYXNzZXMKICogVGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQgb24gdGhlIGFzc29jaWF0ZWQgaW5wdXQvc2VsZWN0L3RleHRhcmVhIGVsZW1lbnQKICogZGVwZW5kaW5nIG9uIHRoZSB2YWxpZGl0eSBvZiB0aGUgbW9kZWwuCiAqCiAqICAtIGBuZy12YWxpZGAgaXMgc2V0IGlmIHRoZSBtb2RlbCBpcyB2YWxpZC4KICogIC0gYG5nLWludmFsaWRgIGlzIHNldCBpZiB0aGUgbW9kZWwgaXMgaW52YWxpZC4KICogIC0gYG5nLXByaXN0aW5lYCBpcyBzZXQgaWYgdGhlIG1vZGVsIGlzIHByaXN0aW5lLgogKiAgLSBgbmctZGlydHlgIGlzIHNldCBpZiB0aGUgbW9kZWwgaXMgZGlydHkuCiAqCiAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLgogKgogKiAjIyBBbmltYXRpb24gSG9va3MKICoKICogQW5pbWF0aW9ucyB3aXRoaW4gbW9kZWxzIGFyZSB0cmlnZ2VyZWQgd2hlbiBhbnkgb2YgdGhlIGFzc29jaWF0ZWQgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkCiAqIG9uIHRoZSBpbnB1dCBlbGVtZW50IHdoaWNoIGlzIGF0dGFjaGVkIHRvIHRoZSBtb2RlbC4gVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCwKICogYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnkgb3RoZXIgdmFsaWRhdGlvbnMgdGhhdCBhcmUgcGVyZm9ybWVkIG9uIHRoZSBtb2RlbCBpdHNlbGYuCiAqIFRoZSBhbmltYXRpb25zIHRoYXQgYXJlIHRyaWdnZXJlZCB3aXRoaW4gbmdNb2RlbCBhcmUgc2ltaWxhciB0byBob3cgdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kCiAqIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGwgYXMgSlMgYW5pbWF0aW9ucy4KICoKICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhbiBpbnB1dCBlbGVtZW50CiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6CiAqCiAqIDxwcmU+CiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZQogKiAvL2FkdmFuY2VkIGFuaW1hdGlvbnMKICogLm15LWlucHV0IHsKICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDsKICogICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICogfQogKiAubXktaW5wdXQubmctaW52YWxpZCB7CiAqICAgYmFja2dyb3VuZDogcmVkOwogKiAgIGNvbG9yOndoaXRlOwogKiB9CiAqIDwvcHJlPgogKgogKiBAZXhhbXBsZQogKiA8ZXhhbXBsZSBkZXBzPSJhbmd1bGFyLWFuaW1hdGUuanMiIGFuaW1hdGlvbnM9InRydWUiIGZpeEJhc2U9InRydWUiIG1vZHVsZT0iaW5wdXRFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2lucHV0RXhhbXBsZScsIFtdKQogICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgJHNjb3BlLnZhbCA9ICcxJzsKICAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPHN0eWxlPgogICAgICAgICAubXktaW5wdXQgewogICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7CiAgICAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7CiAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgICAgICAgIH0KICAgICAgICAgLm15LWlucHV0Lm5nLWludmFsaWQgewogICAgICAgICAgIGNvbG9yOndoaXRlOwogICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDsKICAgICAgICAgfQogICAgICAgPC9zdHlsZT4KICAgICAgIFVwZGF0ZSBpbnB1dCB0byBzZWUgdHJhbnNpdGlvbnMgd2hlbiB2YWxpZC9pbnZhbGlkLgogICAgICAgSW50ZWdlciBpcyBhIHZhbGlkIHZhbHVlLgogICAgICAgPGZvcm0gbmFtZT0idGVzdEZvcm0iIG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgPGlucHV0IG5nLW1vZGVsPSJ2YWwiIG5nLXBhdHRlcm49Ii9eXGQrJC8iIG5hbWU9ImFuaW0iIGNsYXNzPSJteS1pbnB1dCIgLz4KICAgICAgIDwvZm9ybT4KICAgICA8L2ZpbGU+CiAqIDwvZXhhbXBsZT4KICoKICogIyMgQmluZGluZyB0byBhIGdldHRlci9zZXR0ZXIKICoKICogU29tZXRpbWVzIGl0J3MgaGVscGZ1bCB0byBiaW5kIGBuZ01vZGVsYCB0byBhIGdldHRlci9zZXR0ZXIgZnVuY3Rpb24uICBBIGdldHRlci9zZXR0ZXIgaXMgYQogKiBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgd2hlbiBjYWxsZWQgd2l0aCB6ZXJvIGFyZ3VtZW50cywgYW5kIHNldHMKICogdGhlIGludGVybmFsIHN0YXRlIG9mIGEgbW9kZWwgd2hlbiBjYWxsZWQgd2l0aCBhbiBhcmd1bWVudC4gSXQncyBzb21ldGltZXMgdXNlZnVsIHRvIHVzZSB0aGlzCiAqIGZvciBtb2RlbHMgdGhhdCBoYXZlIGFuIGludGVybmFsIHJlcHJlc2VudGF0aW9uIHRoYXQncyBkaWZmZXJlbnQgdGhhbiB3aGF0IHRoZSBtb2RlbCBleHBvc2VzCiAqIHRvIHRoZSB2aWV3LgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1zdWNjZXNzIj4KICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgYmVzdCB0byBrZWVwIGdldHRlcnMgZmFzdCBiZWNhdXNlIEFuZ3VsYXIgaXMgbGlrZWx5IHRvIGNhbGwgdGhlbSBtb3JlCiAqIGZyZXF1ZW50bHkgdGhhbiBvdGhlciBwYXJ0cyBvZiB5b3VyIGNvZGUuCiAqIDwvZGl2PgogKgogKiBZb3UgdXNlIHRoaXMgYmVoYXZpb3IgYnkgYWRkaW5nIGBuZy1tb2RlbC1vcHRpb25zPSJ7IGdldHRlclNldHRlcjogdHJ1ZSB9ImAgdG8gYW4gZWxlbWVudCB0aGF0CiAqIGhhcyBgbmctbW9kZWxgIGF0dGFjaGVkIHRvIGl0LiBZb3UgY2FuIGFsc28gYWRkIGBuZy1tb2RlbC1vcHRpb25zPSJ7IGdldHRlclNldHRlcjogdHJ1ZSB9ImAgdG8KICogYSBgPGZvcm0+YCwgd2hpY2ggd2lsbCBlbmFibGUgdGhpcyBiZWhhdmlvciBmb3IgYWxsIGA8aW5wdXQ+YHMgd2l0aGluIGl0LiBTZWUKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnNgfSBmb3IgbW9yZS4KICoKICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYG5nTW9kZWxgIHdpdGggYSBnZXR0ZXIvc2V0dGVyOgogKgogKiBAZXhhbXBsZQogKiA8ZXhhbXBsZSBuYW1lPSJuZ01vZGVsLWdldHRlci1zZXR0ZXIiIG1vZHVsZT0iZ2V0dGVyU2V0dGVyRXhhbXBsZSI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgPGZvcm0gbmFtZT0idXNlckZvcm0iPgogICAgICAgICAgIE5hbWU6CiAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InVzZXJOYW1lIgogICAgICAgICAgICAgICAgICBuZy1tb2RlbD0idXNlci5uYW1lIgogICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPSJ7IGdldHRlclNldHRlcjogdHJ1ZSB9IiAvPgogICAgICAgICA8L2Zvcm0+CiAgICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD0idXNlci5uYW1lKCkiPjwvc3Bhbj48L3ByZT4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJhcHAuanMiPgogICAgICAgYW5ndWxhci5tb2R1bGUoJ2dldHRlclNldHRlckV4YW1wbGUnLCBbXSkKICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICB2YXIgX25hbWUgPSAnQnJpYW4nOwogICAgICAgICAgICRzY29wZS51c2VyID0gewogICAgICAgICAgICAgbmFtZTogZnVuY3Rpb24gKG5ld05hbWUpIHsKICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKG5ld05hbWUpKSB7CiAgICAgICAgICAgICAgICAgX25hbWUgPSBuZXdOYW1lOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgIHJldHVybiBfbmFtZTsKICAgICAgICAgICAgIH0KICAgICAgICAgICB9OwogICAgICAgICB9XSk7CiAgICAgPC9maWxlPgogKiA8L2V4YW1wbGU+CiAqLwp2YXIgbmdNb2RlbERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ14/Zm9ybScsICdeP25nTW9kZWxPcHRpb25zJ10sCiAgICBjb250cm9sbGVyOiBOZ01vZGVsQ29udHJvbGxlciwKICAgIGxpbms6IHsKICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHsKICAgICAgICAvLyBQYXNzIHRoZSBuZy1tb2RlbC1vcHRpb25zIHRvIHRoZSBuZy1tb2RlbCBjb250cm9sbGVyCiAgICAgICAgaWYgKGN0cmxzWzJdKSB7CiAgICAgICAgICBjdHJsc1swXS4kb3B0aW9ucyA9IGN0cmxzWzJdLiRvcHRpb25zOwogICAgICAgIH0KCiAgICAgICAgLy8gbm90aWZ5IG90aGVycywgZXNwZWNpYWxseSBwYXJlbnQgZm9ybXMKCiAgICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdLAogICAgICAgICAgICBmb3JtQ3RybCA9IGN0cmxzWzFdIHx8IG51bGxGb3JtQ3RybDsKCiAgICAgICAgZm9ybUN0cmwuJGFkZENvbnRyb2wobW9kZWxDdHJsKTsKCiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZm9ybUN0cmwuJHJlbW92ZUNvbnRyb2wobW9kZWxDdHJsKTsKICAgICAgICB9KTsKICAgICAgfSwKICAgICAgcG9zdDogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7CiAgICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdOwogICAgICAgIGlmIChtb2RlbEN0cmwuJG9wdGlvbnMgJiYgbW9kZWxDdHJsLiRvcHRpb25zLnVwZGF0ZU9uKSB7CiAgICAgICAgICBlbGVtZW50Lm9uKG1vZGVsQ3RybC4kb3B0aW9ucy51cGRhdGVPbiwgZnVuY3Rpb24oZXYpIHsKICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIG1vZGVsQ3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGV2ICYmIGV2LnR5cGUpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZWxlbWVudC5vbignYmx1cicsIGZ1bmN0aW9uKGV2KSB7CiAgICAgICAgICBpZiAobW9kZWxDdHJsLiR0b3VjaGVkKSByZXR1cm47CgogICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICBtb2RlbEN0cmwuJHNldFRvdWNoZWQoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfTsKfTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0NoYW5nZQogKgogKiBAZGVzY3JpcHRpb24KICogRXZhbHVhdGUgdGhlIGdpdmVuIGV4cHJlc3Npb24gd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBpbnB1dC4KICogVGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGltbWVkaWF0ZWx5LCB1bmxpa2UgdGhlIEphdmFTY3JpcHQgb25jaGFuZ2UgZXZlbnQKICogd2hpY2ggb25seSB0cmlnZ2VycyBhdCB0aGUgZW5kIG9mIGEgY2hhbmdlICh1c3VhbGx5LCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGUKICogZm9ybSBlbGVtZW50IG9yIHByZXNzZXMgdGhlIHJldHVybiBrZXkpLgogKgogKiBUaGUgYG5nQ2hhbmdlYCBleHByZXNzaW9uIGlzIG9ubHkgZXZhbHVhdGVkIHdoZW4gYSBjaGFuZ2UgaW4gdGhlIGlucHV0IHZhbHVlIGNhdXNlcwogKiBhIG5ldyB2YWx1ZSB0byBiZSBjb21taXR0ZWQgdG8gdGhlIG1vZGVsLgogKgogKiBJdCB3aWxsIG5vdCBiZSBldmFsdWF0ZWQ6CiAqICogaWYgdGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGAkcGFyc2Vyc2AgdHJhbnNmb3JtYXRpb24gcGlwZWxpbmUgaGFzIG5vdCBjaGFuZ2VkCiAqICogaWYgdGhlIGlucHV0IGhhcyBjb250aW51ZWQgdG8gYmUgaW52YWxpZCBzaW5jZSB0aGUgbW9kZWwgd2lsbCBzdGF5IGBudWxsYAogKiAqIGlmIHRoZSBtb2RlbCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIG5vdCBieSBhIGNoYW5nZSB0byB0aGUgaW5wdXQgdmFsdWUKICoKICoKICogTm90ZSwgdGhpcyBkaXJlY3RpdmUgcmVxdWlyZXMgYG5nTW9kZWxgIHRvIGJlIHByZXNlbnQuCiAqCiAqIEBlbGVtZW50IGlucHV0CiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGFuZ2Uge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbiBjaGFuZ2UKICogaW4gaW5wdXQgdmFsdWUuCiAqCiAqIEBleGFtcGxlCiAqIDxleGFtcGxlIG5hbWU9Im5nQ2hhbmdlLWRpcmVjdGl2ZSIgbW9kdWxlPSJjaGFuZ2VFeGFtcGxlIj4KICogICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICogICAgIDxzY3JpcHQ+CiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGFuZ2VFeGFtcGxlJywgW10pCiAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICogICAgICAgICAgICRzY29wZS5jb3VudGVyID0gMDsKICogICAgICAgICAgICRzY29wZS5jaGFuZ2UgPSBmdW5jdGlvbigpIHsKICogICAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIrKzsKICogICAgICAgICAgIH07CiAqICAgICAgICAgfV0pOwogKiAgICAgPC9zY3JpcHQ+CiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICogICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iY29uZmlybWVkIiBuZy1jaGFuZ2U9ImNoYW5nZSgpIiBpZD0ibmctY2hhbmdlLWV4YW1wbGUxIiAvPgogKiAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjb25maXJtZWQiIGlkPSJuZy1jaGFuZ2UtZXhhbXBsZTIiIC8+CiAqICAgICAgIDxsYWJlbCBmb3I9Im5nLWNoYW5nZS1leGFtcGxlMiI+Q29uZmlybWVkPC9sYWJlbD48YnIgLz4KICogICAgICAgPHR0PmRlYnVnID0ge3tjb25maXJtZWR9fTwvdHQ+PGJyLz4KICogICAgICAgPHR0PmNvdW50ZXIgPSB7e2NvdW50ZXJ9fTwvdHQ+PGJyLz4KICogICAgIDwvZGl2PgogKiAgIDwvZmlsZT4KICogICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICogICAgIHZhciBjb3VudGVyID0gZWxlbWVudChieS5iaW5kaW5nKCdjb3VudGVyJykpOwogKiAgICAgdmFyIGRlYnVnID0gZWxlbWVudChieS5iaW5kaW5nKCdjb25maXJtZWQnKSk7CiAqCiAqICAgICBpdCgnc2hvdWxkIGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gdmlldycsIGZ1bmN0aW9uKCkgewogKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMCcpOwogKgogKiAgICAgICBlbGVtZW50KGJ5LmlkKCduZy1jaGFuZ2UtZXhhbXBsZTEnKSkuY2xpY2soKTsKICoKICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEnKTsKICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAqICAgICB9KTsKICoKICogICAgIGl0KCdzaG91bGQgbm90IGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gbW9kZWwnLCBmdW5jdGlvbigpIHsKICogICAgICAgZWxlbWVudChieS5pZCgnbmctY2hhbmdlLWV4YW1wbGUyJykpLmNsaWNrKCk7CgogKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMCcpOwogKiAgICAgICBleHBlY3QoZGVidWcuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTsKICogICAgIH0pOwogKiAgIDwvZmlsZT4KICogPC9leGFtcGxlPgogKi8KdmFyIG5nQ2hhbmdlRGlyZWN0aXZlID0gdmFsdWVGbih7CiAgcmVzdHJpY3Q6ICdBJywKICByZXF1aXJlOiAnbmdNb2RlbCcsCiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHsKICAgIGN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbigpIHsKICAgICAgc2NvcGUuJGV2YWwoYXR0ci5uZ0NoYW5nZSk7CiAgICB9KTsKICB9Cn0pOwoKCnZhciByZXF1aXJlZERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgcmVxdWlyZTogJz9uZ01vZGVsJywKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHsKICAgICAgaWYgKCFjdHJsKSByZXR1cm47CiAgICAgIGF0dHIucmVxdWlyZWQgPSB0cnVlOyAvLyBmb3JjZSB0cnV0aHkgaW4gY2FzZSB3ZSBhcmUgb24gbm9uIGlucHV0IGVsZW1lbnQKCiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucmVxdWlyZWQgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHsKICAgICAgICByZXR1cm4gIWF0dHIucmVxdWlyZWQgfHwgIWN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKTsKICAgICAgfTsKCiAgICAgIGF0dHIuJG9ic2VydmUoJ3JlcXVpcmVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTsKICAgICAgfSk7CiAgICB9CiAgfTsKfTsKCgp2YXIgcGF0dGVybkRpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgcmVxdWlyZTogJz9uZ01vZGVsJywKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHsKICAgICAgaWYgKCFjdHJsKSByZXR1cm47CgogICAgICB2YXIgcmVnZXhwLCBwYXR0ZXJuRXhwID0gYXR0ci5uZ1BhdHRlcm4gfHwgYXR0ci5wYXR0ZXJuOwogICAgICBhdHRyLiRvYnNlcnZlKCdwYXR0ZXJuJywgZnVuY3Rpb24ocmVnZXgpIHsKICAgICAgICBpZihpc1N0cmluZyhyZWdleCkgJiYgcmVnZXgubGVuZ3RoID4gMCkgewogICAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4KTsKICAgICAgICB9CgogICAgICAgIGlmIChyZWdleCAmJiAhcmVnZXgudGVzdCkgewogICAgICAgICAgdGhyb3cgbWluRXJyKCduZ1BhdHRlcm4nKSgnbm9yZWdleHAnLAogICAgICAgICAgICAnRXhwZWN0ZWQgezB9IHRvIGJlIGEgUmVnRXhwIGJ1dCB3YXMgezF9LiBFbGVtZW50OiB7Mn0nLCBwYXR0ZXJuRXhwLAogICAgICAgICAgICByZWdleCwgc3RhcnRpbmdUYWcoZWxtKSk7CiAgICAgICAgfQoKICAgICAgICByZWdleHAgPSByZWdleCB8fCB1bmRlZmluZWQ7CiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTsKICAgICAgfSk7CgogICAgICBjdHJsLiR2YWxpZGF0b3JzLnBhdHRlcm4gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChyZWdleHApIHx8IHJlZ2V4cC50ZXN0KHZhbHVlKTsKICAgICAgfTsKICAgIH0KICB9Owp9OwoKCnZhciBtYXhsZW5ndGhEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdBJywKICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsCiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7CiAgICAgIGlmICghY3RybCkgcmV0dXJuOwoKICAgICAgdmFyIG1heGxlbmd0aCA9IDA7CiAgICAgIGF0dHIuJG9ic2VydmUoJ21heGxlbmd0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgbWF4bGVuZ3RoID0gaW50KHZhbHVlKSB8fCAwOwogICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7CiAgICAgIH0pOwogICAgICBjdHJsLiR2YWxpZGF0b3JzLm1heGxlbmd0aCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA8PSBtYXhsZW5ndGg7CiAgICAgIH07CiAgICB9CiAgfTsKfTsKCnZhciBtaW5sZW5ndGhEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdBJywKICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsCiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7CiAgICAgIGlmICghY3RybCkgcmV0dXJuOwoKICAgICAgdmFyIG1pbmxlbmd0aCA9IDA7CiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbmxlbmd0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgbWlubGVuZ3RoID0gaW50KHZhbHVlKSB8fCAwOwogICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7CiAgICAgIH0pOwogICAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbmxlbmd0aCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA+PSBtaW5sZW5ndGg7CiAgICAgIH07CiAgICB9CiAgfTsKfTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0xpc3QKICoKICogQGRlc2NyaXB0aW9uCiAqIFRleHQgaW5wdXQgdGhhdCBjb252ZXJ0cyBiZXR3ZWVuIGEgZGVsaW1pdGVkIHN0cmluZyBhbmQgYW4gYXJyYXkgb2Ygc3RyaW5ncy4gVGhlIGRlZmF1bHQKICogZGVsaW1pdGVyIGlzIGEgY29tbWEgZm9sbG93ZWQgYnkgYSBzcGFjZSAtIGVxdWl2YWxlbnQgdG8gYG5nLWxpc3Q9IiwgImAuIFlvdSBjYW4gc3BlY2lmeSBhIGN1c3RvbQogKiBkZWxpbWl0ZXIgYXMgdGhlIHZhbHVlIG9mIHRoZSBgbmdMaXN0YCBhdHRyaWJ1dGUgLSBmb3IgZXhhbXBsZSwgYG5nLWxpc3Q9IiB8ICJgLgogKgogKiBUaGUgYmVoYXZpb3VyIG9mIHRoZSBkaXJlY3RpdmUgaXMgYWZmZWN0ZWQgYnkgdGhlIHVzZSBvZiB0aGUgYG5nVHJpbWAgYXR0cmlidXRlLgogKiAqIElmIGBuZ1RyaW1gIGlzIHNldCB0byBgImZhbHNlImAgdGhlbiB3aGl0ZXNwYWNlIGFyb3VuZCBib3RoIHRoZSBzZXBhcmF0b3IgYW5kIGVhY2gKICogICBsaXN0IGl0ZW0gaXMgcmVzcGVjdGVkLiBUaGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBvZiB0aGUgZGlyZWN0aXZlIGlzIHJlc3BvbnNpYmxlIGZvcgogKiAgIGRlYWxpbmcgd2l0aCB3aGl0ZXNwYWNlIGJ1dCBhbHNvIGFsbG93cyB5b3UgdG8gdXNlIHdoaXRlc3BhY2UgYXMgYSBkZWxpbWl0ZXIsIHN1Y2ggYXMgYQogKiAgIHRhYiBvciBuZXdsaW5lIGNoYXJhY3Rlci4KICogKiBPdGhlcndpc2Ugd2hpdGVzcGFjZSBhcm91bmQgdGhlIGRlbGltaXRlciBpcyBpZ25vcmVkIHdoZW4gc3BsaXR0aW5nIChhbHRob3VnaCBpdCBpcyByZXNwZWN0ZWQKICogICB3aGVuIGpvaW5pbmcgdGhlIGxpc3QgaXRlbXMgYmFjayB0b2dldGhlcikgYW5kIHdoaXRlc3BhY2UgYXJvdW5kIGVhY2ggbGlzdCBpdGVtIGlzIHN0cmlwcGVkCiAqICAgYmVmb3JlIGl0IGlzIGFkZGVkIHRvIHRoZSBtb2RlbC4KICoKICogIyMjIEV4YW1wbGUgd2l0aCBWYWxpZGF0aW9uCiAqCiAqIDxleGFtcGxlIG5hbWU9Im5nTGlzdC1kaXJlY3RpdmUiIG1vZHVsZT0ibGlzdEV4YW1wbGUiPgogKiAgIDxmaWxlIG5hbWU9ImFwcC5qcyI+CiAqICAgICAgYW5ndWxhci5tb2R1bGUoJ2xpc3RFeGFtcGxlJywgW10pCiAqICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogKiAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ21vcnBoZXVzJywgJ25lbycsICd0cmluaXR5J107CiAqICAgICAgICB9XSk7CiAqICAgPC9maWxlPgogKiAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogKiAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICogICAgICBMaXN0OiA8aW5wdXQgbmFtZT0ibmFtZXNJbnB1dCIgbmctbW9kZWw9Im5hbWVzIiBuZy1saXN0IHJlcXVpcmVkPgogKiAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICogICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICogICAgICA8YnI+CiAqICAgICAgPHR0Pm5hbWVzID0ge3tuYW1lc319PC90dD48YnIvPgogKiAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZH19PC90dD48YnIvPgogKiAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5uYW1lc0lucHV0LiRlcnJvcn19PC90dD48YnIvPgogKiAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAqICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogKiAgICAgPC9mb3JtPgogKiAgIDwvZmlsZT4KICogICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICogICAgIHZhciBsaXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lcycpKTsKICogICAgIHZhciBuYW1lcyA9IGVsZW1lbnQoYnkuYmluZGluZygne3tuYW1lc319JykpOwogKiAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQnKSk7CiAqICAgICB2YXIgZXJyb3IgPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5lcnJvcicpKTsKICoKICogICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogKiAgICAgICBleHBlY3QobmFtZXMuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1sibW9ycGhldXMiLCJuZW8iLCJ0cmluaXR5Il0nKTsKICogICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7CiAqICAgICAgIGV4cGVjdChlcnJvci5nZXRDc3NWYWx1ZSgnZGlzcGxheScpKS50b0JlKCdub25lJyk7CiAqICAgICB9KTsKICoKICogICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogKiAgICAgICBsaXN0SW5wdXQuY2xlYXIoKTsKICogICAgICAgbGlzdElucHV0LnNlbmRLZXlzKCcnKTsKICoKICogICAgICAgZXhwZWN0KG5hbWVzLmdldFRleHQoKSkudG9Db250YWluKCcnKTsKICogICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpOwogKiAgICAgICBleHBlY3QoZXJyb3IuZ2V0Q3NzVmFsdWUoJ2Rpc3BsYXknKSkubm90LnRvQmUoJ25vbmUnKTsKICogICAgIH0pOwogKiAgIDwvZmlsZT4KICogPC9leGFtcGxlPgogKgogKiAjIyMgRXhhbXBsZSAtIHNwbGl0dGluZyBvbiB3aGl0ZXNwYWNlCiAqIDxleGFtcGxlIG5hbWU9Im5nTGlzdC1kaXJlY3RpdmUtbmV3bGluZXMiPgogKiAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogKiAgICA8dGV4dGFyZWEgbmctbW9kZWw9Imxpc3QiIG5nLWxpc3Q9IiYjMTA7IiBuZy10cmltPSJmYWxzZSI+PC90ZXh0YXJlYT4KICogICAgPHByZT57eyBsaXN0IHwganNvbiB9fTwvcHJlPgogKiAgIDwvZmlsZT4KICogICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICogICAgIGl0KCJzaG91bGQgc3BsaXQgdGhlIHRleHQgYnkgbmV3bGluZXMiLCBmdW5jdGlvbigpIHsKICogICAgICAgdmFyIGxpc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2xpc3QnKSk7CiAqICAgICAgIHZhciBvdXRwdXQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3t7IGxpc3QgfCBqc29uIH19JykpOwogKiAgICAgICBsaXN0SW5wdXQuc2VuZEtleXMoJ2FiY1xuZGVmXG5naGknKTsKICogICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQ29udGFpbignW1xuICAiYWJjIixcbiAgImRlZiIsXG4gICJnaGkiXG5dJyk7CiAqICAgICB9KTsKICogICA8L2ZpbGU+CiAqIDwvZXhhbXBsZT4KICoKICogQGVsZW1lbnQgaW5wdXQKICogQHBhcmFtIHtzdHJpbmc9fSBuZ0xpc3Qgb3B0aW9uYWwgZGVsaW1pdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gc3BsaXQgdGhlIHZhbHVlLgogKi8KdmFyIG5nTGlzdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgcmVxdWlyZTogJ25nTW9kZWwnLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHsKICAgICAgLy8gV2Ugd2FudCB0byBjb250cm9sIHdoaXRlc3BhY2UgdHJpbW1pbmcgc28gd2UgdXNlIHRoaXMgY29udm9sdXRlZCBhcHByb2FjaAogICAgICAvLyB0byBhY2Nlc3MgdGhlIG5nTGlzdCBhdHRyaWJ1dGUsIHdoaWNoIGRvZXNuJ3QgcHJlLXRyaW0gdGhlIGF0dHJpYnV0ZQogICAgICB2YXIgbmdMaXN0ID0gZWxlbWVudC5hdHRyKGF0dHIuJGF0dHIubmdMaXN0KSB8fCAnLCAnOwogICAgICB2YXIgdHJpbVZhbHVlcyA9IGF0dHIubmdUcmltICE9PSAnZmFsc2UnOwogICAgICB2YXIgc2VwYXJhdG9yID0gdHJpbVZhbHVlcyA/IHRyaW0obmdMaXN0KSA6IG5nTGlzdDsKCiAgICAgIHZhciBwYXJzZSA9IGZ1bmN0aW9uKHZpZXdWYWx1ZSkgewogICAgICAgIC8vIElmIHRoZSB2aWV3VmFsdWUgaXMgaW52YWxpZCAoc2F5IHJlcXVpcmVkIGJ1dCBlbXB0eSkgaXQgd2lsbCBiZSBgdW5kZWZpbmVkYAogICAgICAgIGlmIChpc1VuZGVmaW5lZCh2aWV3VmFsdWUpKSByZXR1cm47CgogICAgICAgIHZhciBsaXN0ID0gW107CgogICAgICAgIGlmICh2aWV3VmFsdWUpIHsKICAgICAgICAgIGZvckVhY2godmlld1ZhbHVlLnNwbGl0KHNlcGFyYXRvciksIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZSkgbGlzdC5wdXNoKHRyaW1WYWx1ZXMgPyB0cmltKHZhbHVlKSA6IHZhbHVlKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGxpc3Q7CiAgICAgIH07CgogICAgICBjdHJsLiRwYXJzZXJzLnB1c2gocGFyc2UpOwogICAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgIHJldHVybiB2YWx1ZS5qb2luKG5nTGlzdCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9KTsKCiAgICAgIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCAkaXNFbXB0eSBiZWNhdXNlIGFuIGVtcHR5IGFycmF5IG1lYW5zIHRoZSBpbnB1dCBpcyBlbXB0eS4KICAgICAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCAhdmFsdWUubGVuZ3RoOwogICAgICB9OwogICAgfQogIH07Cn07CgoKdmFyIENPTlNUQU5UX1ZBTFVFX1JFR0VYUCA9IC9eKHRydWV8ZmFsc2V8XGQrKSQvOwovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1ZhbHVlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBCaW5kcyB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgb2YgYGlucHV0W3NlbGVjdF1gIG9yIGBpbnB1dFtyYWRpb11gLCBzbwogKiB0aGF0IHdoZW4gdGhlIGVsZW1lbnQgaXMgc2VsZWN0ZWQsIHRoZSBgbmdNb2RlbGAgb2YgdGhhdCBlbGVtZW50IGlzIHNldCB0byB0aGUKICogYm91bmQgdmFsdWUuCiAqCiAqIGBuZ1ZhbHVlYCBpcyB1c2VmdWwgd2hlbiBkeW5hbWljYWxseSBnZW5lcmF0aW5nIGxpc3RzIG9mIHJhZGlvIGJ1dHRvbnMgdXNpbmcgYG5nLXJlcGVhdGAsIGFzCiAqIHNob3duIGJlbG93LgogKgogKiBAZWxlbWVudCBpbnB1dAogKiBAcGFyYW0ge3N0cmluZz19IG5nVmFsdWUgYW5ndWxhciBleHByZXNzaW9uLCB3aG9zZSB2YWx1ZSB3aWxsIGJlIGJvdW5kIHRvIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZQogKiAgIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQKICoKICogQGV4YW1wbGUKICAgIDxleGFtcGxlIG5hbWU9Im5nVmFsdWUtZGlyZWN0aXZlIiBtb2R1bGU9InZhbHVlRXhhbXBsZSI+CiAgICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd2YWx1ZUV4YW1wbGUnLCBbXSkKICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ3BpenphJywgJ3VuaWNvcm5zJywgJ3JvYm90cyddOwogICAgICAgICAgICAgICRzY29wZS5teSA9IHsgZmF2b3JpdGU6ICd1bmljb3JucycgfTsKICAgICAgICAgICAgfV0pOwogICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPGZvcm0gbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgICAgPGgyPldoaWNoIGlzIHlvdXIgZmF2b3JpdGU/PC9oMj4KICAgICAgICAgICAgPGxhYmVsIG5nLXJlcGVhdD0ibmFtZSBpbiBuYW1lcyIgZm9yPSJ7e25hbWV9fSI+CiAgICAgICAgICAgICAge3tuYW1lfX0KICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPSJteS5mYXZvcml0ZSIKICAgICAgICAgICAgICAgICAgICAgbmctdmFsdWU9Im5hbWUiCiAgICAgICAgICAgICAgICAgICAgIGlkPSJ7e25hbWV9fSIKICAgICAgICAgICAgICAgICAgICAgbmFtZT0iZmF2b3JpdGUiPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgPGRpdj5Zb3UgY2hvc2Uge3tteS5mYXZvcml0ZX19PC9kaXY+CiAgICAgICAgPC9mb3JtPgogICAgICA8L2ZpbGU+CiAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgIHZhciBmYXZvcml0ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnbXkuZmF2b3JpdGUnKSk7CgogICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGZhdm9yaXRlLmdldFRleHQoKSkudG9Db250YWluKCd1bmljb3JucycpOwogICAgICAgIH0pOwogICAgICAgIGl0KCdzaG91bGQgYmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnB1dHMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdteS5mYXZvcml0ZScpKS5nZXQoMCkuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigncGl6emEnKTsKICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKi8KdmFyIG5nVmFsdWVEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdBJywKICAgIHByaW9yaXR5OiAxMDAsCiAgICBjb21waWxlOiBmdW5jdGlvbih0cGwsIHRwbEF0dHIpIHsKICAgICAgaWYgKENPTlNUQU5UX1ZBTFVFX1JFR0VYUC50ZXN0KHRwbEF0dHIubmdWYWx1ZSkpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdWYWx1ZUNvbnN0YW50TGluayhzY29wZSwgZWxtLCBhdHRyKSB7CiAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgc2NvcGUuJGV2YWwoYXR0ci5uZ1ZhbHVlKSk7CiAgICAgICAgfTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdWYWx1ZUxpbmsoc2NvcGUsIGVsbSwgYXR0cikgewogICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdWYWx1ZSwgZnVuY3Rpb24gdmFsdWVXYXRjaEFjdGlvbih2YWx1ZSkgewogICAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgdmFsdWUpOwogICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgfQogICAgfQogIH07Cn07CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ01vZGVsT3B0aW9ucwogKgogKiBAZGVzY3JpcHRpb24KICogQWxsb3dzIHR1bmluZyBob3cgbW9kZWwgdXBkYXRlcyBhcmUgZG9uZS4gVXNpbmcgYG5nTW9kZWxPcHRpb25zYCB5b3UgY2FuIHNwZWNpZnkgYSBjdXN0b20gbGlzdCBvZgogKiBldmVudHMgdGhhdCB3aWxsIHRyaWdnZXIgYSBtb2RlbCB1cGRhdGUgYW5kL29yIGEgZGVib3VuY2luZyBkZWxheSBzbyB0aGF0IHRoZSBhY3R1YWwgdXBkYXRlIG9ubHkKICogdGFrZXMgcGxhY2Ugd2hlbiBhIHRpbWVyIGV4cGlyZXM7IHRoaXMgdGltZXIgd2lsbCBiZSByZXNldCBhZnRlciBhbm90aGVyIGNoYW5nZSB0YWtlcyBwbGFjZS4KICoKICogR2l2ZW4gdGhlIG5hdHVyZSBvZiBgbmdNb2RlbE9wdGlvbnNgLCB0aGUgdmFsdWUgZGlzcGxheWVkIGluc2lkZSBpbnB1dCBmaWVsZHMgaW4gdGhlIHZpZXcgbWlnaHQKICogYmUgZGlmZmVyZW50IHRoYW4gdGhlIHZhbHVlIGluIHRoZSBhY3R1YWwgbW9kZWwuIFRoaXMgbWVhbnMgdGhhdCBpZiB5b3UgdXBkYXRlIHRoZSBtb2RlbCB5b3UKICogc2hvdWxkIGFsc28gaW52b2tlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIGAkcm9sbGJhY2tWaWV3VmFsdWVgfSBvbiB0aGUgcmVsZXZhbnQgaW5wdXQgZmllbGQgaW4KICogb3JkZXIgdG8gbWFrZSBzdXJlIGl0IGlzIHN5bmNocm9uaXplZCB3aXRoIHRoZSBtb2RlbCBhbmQgdGhhdCBhbnkgZGVib3VuY2VkIGFjdGlvbiBpcyBjYW5jZWxlZC4KICoKICogVGhlIGVhc2llc3Qgd2F5IHRvIHJlZmVyZW5jZSB0aGUgY29udHJvbCdzIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIGAkcm9sbGJhY2tWaWV3VmFsdWVgfQogKiBtZXRob2QgaXMgYnkgbWFraW5nIHN1cmUgdGhlIGlucHV0IGlzIHBsYWNlZCBpbnNpZGUgYSBmb3JtIHRoYXQgaGFzIGEgYG5hbWVgIGF0dHJpYnV0ZS4gVGhpcyBpcwogKiBpbXBvcnRhbnQgYmVjYXVzZSBgZm9ybWAgY29udHJvbGxlcnMgYXJlIHB1Ymxpc2hlZCB0byB0aGUgcmVsYXRlZCBzY29wZSB1bmRlciB0aGUgbmFtZSBpbiB0aGVpcgogKiBgbmFtZWAgYXR0cmlidXRlLgogKgogKiBBbnkgcGVuZGluZyBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzIHN1Ym1pdHRlZCB2aWEgdGhlCiAqIGBzdWJtaXRgIGV2ZW50LiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGAKICogdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBuZ01vZGVsT3B0aW9ucyBvcHRpb25zIHRvIGFwcGx5IHRvIHRoZSBjdXJyZW50IG1vZGVsLiBWYWxpZCBrZXlzIGFyZToKICogICAtIGB1cGRhdGVPbmA6IHN0cmluZyBzcGVjaWZ5aW5nIHdoaWNoIGV2ZW50IHNob3VsZCBiZSB0aGUgaW5wdXQgYm91bmQgdG8uIFlvdSBjYW4gc2V0IHNldmVyYWwKICogICAgIGV2ZW50cyB1c2luZyBhbiBzcGFjZSBkZWxpbWl0ZWQgbGlzdC4gVGhlcmUgaXMgYSBzcGVjaWFsIGV2ZW50IGNhbGxlZCBgZGVmYXVsdGAgdGhhdAogKiAgICAgbWF0Y2hlcyB0aGUgZGVmYXVsdCBldmVudHMgYmVsb25naW5nIG9mIHRoZSBjb250cm9sLgogKiAgIC0gYGRlYm91bmNlYDogaW50ZWdlciB2YWx1ZSB3aGljaCBjb250YWlucyB0aGUgZGVib3VuY2UgbW9kZWwgdXBkYXRlIHZhbHVlIGluIG1pbGxpc2Vjb25kcy4gQQogKiAgICAgdmFsdWUgb2YgMCB0cmlnZ2VycyBhbiBpbW1lZGlhdGUgdXBkYXRlLiBJZiBhbiBvYmplY3QgaXMgc3VwcGxpZWQgaW5zdGVhZCwgeW91IGNhbiBzcGVjaWZ5IGEKICogICAgIGN1c3RvbSB2YWx1ZSBmb3IgZWFjaCBldmVudC4gRm9yIGV4YW1wbGU6CiAqICAgICBgbmdNb2RlbE9wdGlvbnM9InsgdXBkYXRlT246ICdkZWZhdWx0IGJsdXInLCBkZWJvdW5jZTogeydkZWZhdWx0JzogNTAwLCAnYmx1cic6IDB9IH0iYAogKiAgIC0gYGdldHRlclNldHRlcmA6IGJvb2xlYW4gdmFsdWUgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byB0cmVhdCBmdW5jdGlvbnMgYm91bmQgdG8KICAgICAgIGBuZ01vZGVsYCBhcyBnZXR0ZXJzL3NldHRlcnMuCiAqCiAqIEBleGFtcGxlCgogIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gb3ZlcnJpZGUgaW1tZWRpYXRlIHVwZGF0ZXMuIENoYW5nZXMgb24gdGhlIGlucHV0cyB3aXRoaW4gdGhlCiAgZm9ybSB3aWxsIHVwZGF0ZSB0aGUgbW9kZWwgb25seSB3aGVuIHRoZSBjb250cm9sIGxvc2VzIGZvY3VzIChibHVyIGV2ZW50KS4gSWYgYGVzY2FwZWAga2V5IGlzCiAgcHJlc3NlZCB3aGlsZSB0aGUgaW5wdXQgZmllbGQgaXMgZm9jdXNlZCwgdGhlIHZhbHVlIGlzIHJlc2V0IHRvIHRoZSB2YWx1ZSBpbiB0aGUgY3VycmVudCBtb2RlbC4KCiAgPGV4YW1wbGUgbmFtZT0ibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWJsdXIiIG1vZHVsZT0ib3B0aW9uc0V4YW1wbGUiPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgIDxmb3JtIG5hbWU9InVzZXJGb3JtIj4KICAgICAgICAgIE5hbWU6CiAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0idXNlck5hbWUiCiAgICAgICAgICAgICAgICAgbmctbW9kZWw9InVzZXIubmFtZSIKICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPSJ7IHVwZGF0ZU9uOiAnYmx1cicgfSIKICAgICAgICAgICAgICAgICBuZy1rZXl1cD0iY2FuY2VsKCRldmVudCkiIC8+PGJyIC8+CgogICAgICAgICAgT3RoZXIgZGF0YToKICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0idXNlci5kYXRhIiAvPjxiciAvPgogICAgICAgIDwvZm9ybT4KICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9InVzZXIubmFtZSI+PC9zcGFuPjwvcHJlPgogICAgICA8L2Rpdj4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9ImFwcC5qcyI+CiAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKQogICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAkc2NvcGUudXNlciA9IHsgbmFtZTogJ3NheScsIGRhdGE6ICcnIH07CgogICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpIHsKICAgICAgICAgICAgICAkc2NvcGUudXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgfV0pOwogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgIHZhciBtb2RlbCA9IGVsZW1lbnQoYnkuYmluZGluZygndXNlci5uYW1lJykpOwogICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLm5hbWUnKSk7CiAgICAgIHZhciBvdGhlciA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIuZGF0YScpKTsKCiAgICAgIGl0KCdzaG91bGQgYWxsb3cgY3VzdG9tIGV2ZW50cycsIGZ1bmN0aW9uKCkgewogICAgICAgIGlucHV0LnNlbmRLZXlzKCcgaGVsbG8nKTsKICAgICAgICBpbnB1dC5jbGljaygpOwogICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheScpOwogICAgICAgIG90aGVyLmNsaWNrKCk7CiAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnc2F5IGhlbGxvJyk7CiAgICAgIH0pOwoKICAgICAgaXQoJ3Nob3VsZCAkcm9sbGJhY2tWaWV3VmFsdWUgd2hlbiBtb2RlbCBjaGFuZ2VzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgaW5wdXQuc2VuZEtleXMoJyBoZWxsbycpOwogICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ3NheSBoZWxsbycpOwogICAgICAgIGlucHV0LnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkVTQ0FQRSk7CiAgICAgICAgZXhwZWN0KGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnc2F5Jyk7CiAgICAgICAgb3RoZXIuY2xpY2soKTsKICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdzYXknKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgPC9leGFtcGxlPgoKICBUaGlzIG9uZSBzaG93cyBob3cgdG8gZGVib3VuY2UgbW9kZWwgY2hhbmdlcy4gTW9kZWwgd2lsbCBiZSB1cGRhdGVkIG9ubHkgMSBzZWMgYWZ0ZXIgbGFzdCBjaGFuZ2UuCiAgSWYgdGhlIGBDbGVhcmAgYnV0dG9uIGlzIHByZXNzZWQsIGFueSBkZWJvdW5jZWQgYWN0aW9uIGlzIGNhbmNlbGVkIGFuZCB0aGUgdmFsdWUgYmVjb21lcyBlbXB0eS4KCiAgPGV4YW1wbGUgbmFtZT0ibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWRlYm91bmNlIiBtb2R1bGU9Im9wdGlvbnNFeGFtcGxlIj4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICA8Zm9ybSBuYW1lPSJ1c2VyRm9ybSI+CiAgICAgICAgICBOYW1lOgogICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InVzZXJOYW1lIgogICAgICAgICAgICAgICAgIG5nLW1vZGVsPSJ1c2VyLm5hbWUiCiAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz0ieyBkZWJvdW5jZTogMTAwMCB9IiAvPgogICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0idXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7IHVzZXIubmFtZT0nJyI+Q2xlYXI8L2J1dHRvbj48YnIgLz4KICAgICAgICA8L2Zvcm0+CiAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPSJ1c2VyLm5hbWUiPjwvc3Bhbj48L3ByZT4KICAgICAgPC9kaXY+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJhcHAuanMiPgogICAgICBhbmd1bGFyLm1vZHVsZSgnb3B0aW9uc0V4YW1wbGUnLCBbXSkKICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgJHNjb3BlLnVzZXIgPSB7IG5hbWU6ICdzYXknIH07CiAgICAgICAgfV0pOwogICAgPC9maWxlPgogIDwvZXhhbXBsZT4KCiAgVGhpcyBvbmUgc2hvd3MgaG93IHRvIGJpbmQgdG8gZ2V0dGVyL3NldHRlcnM6CgogIDxleGFtcGxlIG5hbWU9Im5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1nZXR0ZXItc2V0dGVyIiBtb2R1bGU9ImdldHRlclNldHRlckV4YW1wbGUiPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgIDxmb3JtIG5hbWU9InVzZXJGb3JtIj4KICAgICAgICAgIE5hbWU6CiAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0idXNlck5hbWUiCiAgICAgICAgICAgICAgICAgbmctbW9kZWw9InVzZXIubmFtZSIKICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPSJ7IGdldHRlclNldHRlcjogdHJ1ZSB9IiAvPgogICAgICAgIDwvZm9ybT4KICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9InVzZXIubmFtZSgpIj48L3NwYW4+PC9wcmU+CiAgICAgIDwvZGl2PgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iYXBwLmpzIj4KICAgICAgYW5ndWxhci5tb2R1bGUoJ2dldHRlclNldHRlckV4YW1wbGUnLCBbXSkKICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgdmFyIF9uYW1lID0gJ0JyaWFuJzsKICAgICAgICAgICRzY29wZS51c2VyID0gewogICAgICAgICAgICBuYW1lOiBmdW5jdGlvbiAobmV3TmFtZSkgewogICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZChuZXdOYW1lKSA/IChfbmFtZSA9IG5ld05hbWUpIDogX25hbWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgfV0pOwogICAgPC9maWxlPgogIDwvZXhhbXBsZT4KICovCnZhciBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMpIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICB0aGlzLiRvcHRpb25zID0gJHNjb3BlLiRldmFsKCRhdHRycy5uZ01vZGVsT3B0aW9ucyk7CiAgICAgIC8vIEFsbG93IGFkZGluZy9vdmVycmlkaW5nIGJvdW5kIGV2ZW50cwogICAgICBpZiAodGhpcy4kb3B0aW9ucy51cGRhdGVPbiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSBmYWxzZTsKICAgICAgICAvLyBleHRyYWN0ICJkZWZhdWx0IiBwc2V1ZG8tZXZlbnQgZnJvbSBsaXN0IG9mIGV2ZW50cyB0aGF0IGNhbiB0cmlnZ2VyIGEgbW9kZWwgdXBkYXRlCiAgICAgICAgdGhpcy4kb3B0aW9ucy51cGRhdGVPbiA9IHRyaW0odGhpcy4kb3B0aW9ucy51cGRhdGVPbi5yZXBsYWNlKERFRkFVTFRfUkVHRVhQLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHRoYXQuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gdHJ1ZTsKICAgICAgICAgIHJldHVybiAnICc7CiAgICAgICAgfSkpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gdHJ1ZTsKICAgICAgfQogICAgfV0KICB9Owp9OwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdCaW5kCiAqIEByZXN0cmljdCBBQwogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0JpbmRgIGF0dHJpYnV0ZSB0ZWxscyBBbmd1bGFyIHRvIHJlcGxhY2UgdGhlIHRleHQgY29udGVudCBvZiB0aGUgc3BlY2lmaWVkIEhUTUwgZWxlbWVudAogKiB3aXRoIHRoZSB2YWx1ZSBvZiBhIGdpdmVuIGV4cHJlc3Npb24sIGFuZCB0byB1cGRhdGUgdGhlIHRleHQgY29udGVudCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGF0CiAqIGV4cHJlc3Npb24gY2hhbmdlcy4KICoKICogVHlwaWNhbGx5LCB5b3UgZG9uJ3QgdXNlIGBuZ0JpbmRgIGRpcmVjdGx5LCBidXQgaW5zdGVhZCB5b3UgdXNlIHRoZSBkb3VibGUgY3VybHkgbWFya3VwIGxpa2UKICogYHt7IGV4cHJlc3Npb24gfX1gIHdoaWNoIGlzIHNpbWlsYXIgYnV0IGxlc3MgdmVyYm9zZS4KICoKICogSXQgaXMgcHJlZmVyYWJsZSB0byB1c2UgYG5nQmluZGAgaW5zdGVhZCBvZiBge3sgZXhwcmVzc2lvbiB9fWAgaWYgYSB0ZW1wbGF0ZSBpcyBtb21lbnRhcmlseQogKiBkaXNwbGF5ZWQgYnkgdGhlIGJyb3dzZXIgaW4gaXRzIHJhdyBzdGF0ZSBiZWZvcmUgQW5ndWxhciBjb21waWxlcyBpdC4gU2luY2UgYG5nQmluZGAgaXMgYW4KICogZWxlbWVudCBhdHRyaWJ1dGUsIGl0IG1ha2VzIHRoZSBiaW5kaW5ncyBpbnZpc2libGUgdG8gdGhlIHVzZXIgd2hpbGUgdGhlIHBhZ2UgaXMgbG9hZGluZy4KICoKICogQW4gYWx0ZXJuYXRpdmUgc29sdXRpb24gdG8gdGhpcyBwcm9ibGVtIHdvdWxkIGJlIHVzaW5nIHRoZQogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xvYWsgbmdDbG9ha30gZGlyZWN0aXZlLgogKgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JpbmQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuCiAqCiAqIEBleGFtcGxlCiAqIEVudGVyIGEgbmFtZSBpbiB0aGUgTGl2ZSBQcmV2aWV3IHRleHQgYm94OyB0aGUgZ3JlZXRpbmcgYmVsb3cgdGhlIHRleHQgYm94IGNoYW5nZXMgaW5zdGFudGx5LgogICA8ZXhhbXBsZSBtb2R1bGU9ImJpbmRFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKQogICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAkc2NvcGUubmFtZSA9ICdXaGlybGVkJzsKICAgICAgICAgICB9XSk7CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgICBFbnRlciBuYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9Im5hbWUiPjxicj4KICAgICAgICAgSGVsbG8gPHNwYW4gbmctYmluZD0ibmFtZSI+PC9zcGFuPiEKICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTsKCiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ25hbWUnKSkuZ2V0VGV4dCgpKS50b0JlKCdXaGlybGVkJyk7CiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpOwogICAgICAgICBuYW1lSW5wdXQuc2VuZEtleXMoJ3dvcmxkJyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ25hbWUnKSkuZ2V0VGV4dCgpKS50b0JlKCd3b3JsZCcpOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdCaW5kRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZENvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7CiAgICB0ZW1wbGF0ZUVsZW1lbnQuYWRkQ2xhc3MoJ25nLWJpbmRpbmcnKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICBlbGVtZW50LmRhdGEoJyRiaW5kaW5nJywgYXR0ci5uZ0JpbmQpOwogICAgICBlbGVtZW50ID0gZWxlbWVudFswXTsKCiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nQmluZCwgZnVuY3Rpb24gbmdCaW5kV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgICAvLyBXZSBhcmUgcHVycG9zZWZ1bGx5IHVzaW5nID09IGhlcmUgcmF0aGVyIHRoYW4gPT09IGJlY2F1c2Ugd2Ugd2FudCB0bwogICAgICAgIC8vIGNhdGNoIHdoZW4gdmFsdWUgaXMgIm51bGwgb3IgdW5kZWZpbmVkIgogICAgICAgIC8vIGpzaGludCAtVzA0MQogICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSAodmFsdWUgPT0gdW5kZWZpbmVkID8gJycgOiB2YWx1ZSk7CiAgICAgIH0pOwogICAgfTsKICB9Cn0pOwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nQmluZFRlbXBsYXRlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQmluZFRlbXBsYXRlYCBkaXJlY3RpdmUgc3BlY2lmaWVzIHRoYXQgdGhlIGVsZW1lbnQKICogdGV4dCBjb250ZW50IHNob3VsZCBiZSByZXBsYWNlZCB3aXRoIHRoZSBpbnRlcnBvbGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZQogKiBpbiB0aGUgYG5nQmluZFRlbXBsYXRlYCBhdHRyaWJ1dGUuCiAqIFVubGlrZSBgbmdCaW5kYCwgdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYHt7YCBgfX1gCiAqIGV4cHJlc3Npb25zLiBUaGlzIGRpcmVjdGl2ZSBpcyBuZWVkZWQgc2luY2Ugc29tZSBIVE1MIGVsZW1lbnRzCiAqIChzdWNoIGFzIFRJVExFIGFuZCBPUFRJT04pIGNhbm5vdCBjb250YWluIFNQQU4gZWxlbWVudHMuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge3N0cmluZ30gbmdCaW5kVGVtcGxhdGUgdGVtcGxhdGUgb2YgZm9ybQogKiAgIDx0dD57ezwvdHQ+IDx0dD5leHByZXNzaW9uPC90dD4gPHR0Pn19PC90dD4gdG8gZXZhbC4KICoKICogQGV4YW1wbGUKICogVHJ5IGl0IGhlcmU6IGVudGVyIHRleHQgaW4gdGV4dCBib3ggYW5kIHdhdGNoIHRoZSBncmVldGluZyBjaGFuZ2UuCiAgIDxleGFtcGxlIG1vZHVsZT0iYmluZEV4YW1wbGUiPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRFeGFtcGxlJywgW10pCiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbiAoJHNjb3BlKSB7CiAgICAgICAgICAgICAkc2NvcGUuc2FsdXRhdGlvbiA9ICdIZWxsbyc7CiAgICAgICAgICAgICAkc2NvcGUubmFtZSA9ICdXb3JsZCc7CiAgICAgICAgICAgfV0pOwogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICBTYWx1dGF0aW9uOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InNhbHV0YXRpb24iPjxicj4KICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9Im5hbWUiPjxicj4KICAgICAgICA8cHJlIG5nLWJpbmQtdGVtcGxhdGU9Int7c2FsdXRhdGlvbn19IHt7bmFtZX19ISI+PC9wcmU+CiAgICAgICA8L2Rpdj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgdmFyIHNhbHV0YXRpb25FbGVtID0gZWxlbWVudChieS5iaW5kaW5nKCdzYWx1dGF0aW9uJykpOwogICAgICAgICB2YXIgc2FsdXRhdGlvbklucHV0ID0gZWxlbWVudChieS5tb2RlbCgnc2FsdXRhdGlvbicpKTsKICAgICAgICAgdmFyIG5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSk7CgogICAgICAgICBleHBlY3Qoc2FsdXRhdGlvbkVsZW0uZ2V0VGV4dCgpKS50b0JlKCdIZWxsbyBXb3JsZCEnKTsKCiAgICAgICAgIHNhbHV0YXRpb25JbnB1dC5jbGVhcigpOwogICAgICAgICBzYWx1dGF0aW9uSW5wdXQuc2VuZEtleXMoJ0dyZWV0aW5ncycpOwogICAgICAgICBuYW1lSW5wdXQuY2xlYXIoKTsKICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd1c2VyJyk7CgogICAgICAgICBleHBlY3Qoc2FsdXRhdGlvbkVsZW0uZ2V0VGV4dCgpKS50b0JlKCdHcmVldGluZ3MgdXNlciEnKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KdmFyIG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlID0gWyckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbigkaW50ZXJwb2xhdGUpIHsKICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgIC8vIFRPRE86IG1vdmUgdGhpcyB0byBzY2VuYXJpbyBydW5uZXIKICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLm5nQmluZFRlbXBsYXRlKSk7CiAgICBlbGVtZW50LmFkZENsYXNzKCduZy1iaW5kaW5nJykuZGF0YSgnJGJpbmRpbmcnLCBpbnRlcnBvbGF0ZUZuKTsKICAgIGF0dHIuJG9ic2VydmUoJ25nQmluZFRlbXBsYXRlJywgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgZWxlbWVudC50ZXh0KHZhbHVlKTsKICAgIH0pOwogIH07Cn1dOwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nQmluZEh0bWwKICoKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZXMgYSBiaW5kaW5nIHRoYXQgd2lsbCBpbm5lckhUTUwgdGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBgZXhwcmVzc2lvbmAgaW50byB0aGUgY3VycmVudAogKiBlbGVtZW50IGluIGEgc2VjdXJlIHdheS4gIEJ5IGRlZmF1bHQsIHRoZSBpbm5lckhUTUwtZWQgY29udGVudCB3aWxsIGJlIHNhbml0aXplZCB1c2luZyB0aGUge0BsaW5rCiAqIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gc2VydmljZS4gIFRvIHV0aWxpemUgdGhpcyBmdW5jdGlvbmFsaXR5LCBlbnN1cmUgdGhhdCBgJHNhbml0aXplYAogKiBpcyBhdmFpbGFibGUsIGZvciBleGFtcGxlLCBieSBpbmNsdWRpbmcge0BsaW5rIG5nU2FuaXRpemV9IGluIHlvdXIgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzIChub3QgaW4KICogY29yZSBBbmd1bGFyLikgIFlvdSBtYXkgYWxzbyBieXBhc3Mgc2FuaXRpemF0aW9uIGZvciB2YWx1ZXMgeW91IGtub3cgYXJlIHNhZmUuIFRvIGRvIHNvLCBiaW5kIHRvCiAqIGFuIGV4cGxpY2l0bHkgdHJ1c3RlZCB2YWx1ZSB2aWEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0uICBTZWUgdGhlIGV4YW1wbGUKICogdW5kZXIge0BsaW5rIG5nLiRzY2UjRXhhbXBsZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uCiAqCiAqIE5vdGU6IElmIGEgYCRzYW5pdGl6ZWAgc2VydmljZSBpcyB1bmF2YWlsYWJsZSBhbmQgdGhlIGJvdW5kIHZhbHVlIGlzbid0IGV4cGxpY2l0bHkgdHJ1c3RlZCwgeW91CiAqIHdpbGwgaGF2ZSBhbiBleGNlcHRpb24gKGluc3RlYWQgb2YgYW4gZXhwbG9pdC4pCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZEh0bWwge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuCiAqCiAqIEBleGFtcGxlCgogICA8ZXhhbXBsZSBtb2R1bGU9ImJpbmRIdG1sRXhhbXBsZSIgZGVwcz0iYW5ndWxhci1zYW5pdGl6ZS5qcyI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICA8cCBuZy1iaW5kLWh0bWw9Im15SFRNTCI+PC9wPgogICAgICAgPC9kaXY+CiAgICAgPC9maWxlPgoKICAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRIdG1sRXhhbXBsZScsIFsnbmdTYW5pdGl6ZSddKQogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkgewogICAgICAgICAgICRzY29wZS5teUhUTUwgPQogICAgICAgICAgICAgICdJIGFtIGFuIDxjb2RlPkhUTUw8L2NvZGU+c3RyaW5nIHdpdGggJyArCiAgICAgICAgICAgICAgJzxhIGhyZWY9IiMiPmxpbmtzITwvYT4gYW5kIG90aGVyIDxlbT5zdHVmZjwvZW0+JzsKICAgICAgICAgfV0pOwogICAgIDwvZmlsZT4KCiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQtaHRtbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdteUhUTUwnKSkuZ2V0VGV4dCgpKS50b0JlKAogICAgICAgICAgICAgJ0kgYW0gYW4gSFRNTHN0cmluZyB3aXRoIGxpbmtzISBhbmQgb3RoZXIgc3R1ZmYnKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KdmFyIG5nQmluZEh0bWxEaXJlY3RpdmUgPSBbJyRzY2UnLCAnJHBhcnNlJywgZnVuY3Rpb24oJHNjZSwgJHBhcnNlKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnQScsCiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRDb21waWxlKHRFbGVtZW50LCB0QXR0cnMpIHsKICAgICAgdEVsZW1lbnQuYWRkQ2xhc3MoJ25nLWJpbmRpbmcnKTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0JpbmRMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgZWxlbWVudC5kYXRhKCckYmluZGluZycsIGF0dHIubmdCaW5kSHRtbCk7CiAgICAgICAgdmFyIG5nQmluZEh0bWxHZXR0ZXIgPSAkcGFyc2UoYXR0ci5uZ0JpbmRIdG1sKTsKICAgICAgICB2YXIgbmdCaW5kSHRtbFdhdGNoID0gJHBhcnNlKGF0dHIubmdCaW5kSHRtbCwgZnVuY3Rpb24gZ2V0U3RyaW5nVmFsdWUodmFsdWUpIHsKICAgICAgICAgIHJldHVybiAodmFsdWUgfHwgJycpLnRvU3RyaW5nKCk7CiAgICAgICAgfSk7CgogICAgICAgIHNjb3BlLiR3YXRjaChuZ0JpbmRIdG1sV2F0Y2gsIGZ1bmN0aW9uIG5nQmluZEh0bWxXYXRjaEFjdGlvbigpIHsKICAgICAgICAgIC8vIHdlIHJlLWV2YWx1YXRlIHRoZSBleHByIGJlY2F1c2Ugd2Ugd2FudCBhIFRydXN0ZWRWYWx1ZUhvbGRlclR5cGUKICAgICAgICAgIC8vIGZvciAkc2NlLCBub3QgYSBzdHJpbmcKICAgICAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKG5nQmluZEh0bWxHZXR0ZXIoc2NvcGUpKSB8fCAnJyk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfTsKfV07CgpmdW5jdGlvbiBjbGFzc0RpcmVjdGl2ZShuYW1lLCBzZWxlY3RvcikgewogIG5hbWUgPSAnbmdDbGFzcycgKyBuYW1lOwogIHJldHVybiBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHsKICAgIHJldHVybiB7CiAgICAgIHJlc3RyaWN0OiAnQUMnLAogICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgIHZhciBvbGRWYWw7CgogICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25hbWVdLCBuZ0NsYXNzV2F0Y2hBY3Rpb24sIHRydWUpOwoKICAgICAgICBhdHRyLiRvYnNlcnZlKCdjbGFzcycsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICBuZ0NsYXNzV2F0Y2hBY3Rpb24oc2NvcGUuJGV2YWwoYXR0cltuYW1lXSkpOwogICAgICAgIH0pOwoKCiAgICAgICAgaWYgKG5hbWUgIT09ICduZ0NsYXNzJykgewogICAgICAgICAgc2NvcGUuJHdhdGNoKCckaW5kZXgnLCBmdW5jdGlvbigkaW5kZXgsIG9sZCRpbmRleCkgewogICAgICAgICAgICAvLyBqc2hpbnQgYml0d2lzZTogZmFsc2UKICAgICAgICAgICAgdmFyIG1vZCA9ICRpbmRleCAmIDE7CiAgICAgICAgICAgIGlmIChtb2QgIT09IChvbGQkaW5kZXggJiAxKSkgewogICAgICAgICAgICAgIHZhciBjbGFzc2VzID0gYXJyYXlDbGFzc2VzKHNjb3BlLiRldmFsKGF0dHJbbmFtZV0pKTsKICAgICAgICAgICAgICBtb2QgPT09IHNlbGVjdG9yID8KICAgICAgICAgICAgICAgIGFkZENsYXNzZXMoY2xhc3NlcykgOgogICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhjbGFzc2VzKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhZGRDbGFzc2VzKGNsYXNzZXMpIHsKICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gZGlnZXN0Q2xhc3NDb3VudHMoY2xhc3NlcywgMSk7CiAgICAgICAgICBhdHRyLiRhZGRDbGFzcyhuZXdDbGFzc2VzKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoY2xhc3NlcykgewogICAgICAgICAgdmFyIG5ld0NsYXNzZXMgPSBkaWdlc3RDbGFzc0NvdW50cyhjbGFzc2VzLCAtMSk7CiAgICAgICAgICBhdHRyLiRyZW1vdmVDbGFzcyhuZXdDbGFzc2VzKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGRpZ2VzdENsYXNzQ291bnRzIChjbGFzc2VzLCBjb3VudCkgewogICAgICAgICAgdmFyIGNsYXNzQ291bnRzID0gZWxlbWVudC5kYXRhKCckY2xhc3NDb3VudHMnKSB8fCB7fTsKICAgICAgICAgIHZhciBjbGFzc2VzVG9VcGRhdGUgPSBbXTsKICAgICAgICAgIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24gKGNsYXNzTmFtZSkgewogICAgICAgICAgICBpZiAoY291bnQgPiAwIHx8IGNsYXNzQ291bnRzW2NsYXNzTmFtZV0pIHsKICAgICAgICAgICAgICBjbGFzc0NvdW50c1tjbGFzc05hbWVdID0gKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gfHwgMCkgKyBjb3VudDsKICAgICAgICAgICAgICBpZiAoY2xhc3NDb3VudHNbY2xhc3NOYW1lXSA9PT0gKyhjb3VudCA+IDApKSB7CiAgICAgICAgICAgICAgICBjbGFzc2VzVG9VcGRhdGUucHVzaChjbGFzc05hbWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBlbGVtZW50LmRhdGEoJyRjbGFzc0NvdW50cycsIGNsYXNzQ291bnRzKTsKICAgICAgICAgIHJldHVybiBjbGFzc2VzVG9VcGRhdGUuam9pbignICcpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ2xhc3NlcyAob2xkQ2xhc3NlcywgbmV3Q2xhc3NlcykgewogICAgICAgICAgdmFyIHRvQWRkID0gYXJyYXlEaWZmZXJlbmNlKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpOwogICAgICAgICAgdmFyIHRvUmVtb3ZlID0gYXJyYXlEaWZmZXJlbmNlKG9sZENsYXNzZXMsIG5ld0NsYXNzZXMpOwogICAgICAgICAgdG9SZW1vdmUgPSBkaWdlc3RDbGFzc0NvdW50cyh0b1JlbW92ZSwgLTEpOwogICAgICAgICAgdG9BZGQgPSBkaWdlc3RDbGFzc0NvdW50cyh0b0FkZCwgMSk7CgogICAgICAgICAgaWYgKHRvQWRkLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCB0b1JlbW92ZSk7CiAgICAgICAgICB9IGVsc2UgaWYgKHRvUmVtb3ZlLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCB0b0FkZCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkYW5pbWF0ZS5zZXRDbGFzcyhlbGVtZW50LCB0b0FkZCwgdG9SZW1vdmUpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gbmdDbGFzc1dhdGNoQWN0aW9uKG5ld1ZhbCkgewogICAgICAgICAgaWYgKHNlbGVjdG9yID09PSB0cnVlIHx8IHNjb3BlLiRpbmRleCAlIDIgPT09IHNlbGVjdG9yKSB7CiAgICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gYXJyYXlDbGFzc2VzKG5ld1ZhbCB8fCBbXSk7CiAgICAgICAgICAgIGlmICghb2xkVmFsKSB7CiAgICAgICAgICAgICAgYWRkQ2xhc3NlcyhuZXdDbGFzc2VzKTsKICAgICAgICAgICAgfSBlbHNlIGlmICghZXF1YWxzKG5ld1ZhbCxvbGRWYWwpKSB7CiAgICAgICAgICAgICAgdmFyIG9sZENsYXNzZXMgPSBhcnJheUNsYXNzZXMob2xkVmFsKTsKICAgICAgICAgICAgICB1cGRhdGVDbGFzc2VzKG9sZENsYXNzZXMsIG5ld0NsYXNzZXMpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBvbGRWYWwgPSBzaGFsbG93Q29weShuZXdWYWwpOwogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICBmdW5jdGlvbiBhcnJheURpZmZlcmVuY2UodG9rZW5zMSwgdG9rZW5zMikgewogICAgICB2YXIgdmFsdWVzID0gW107CgogICAgICBvdXRlcjoKICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgdG9rZW4gPSB0b2tlbnMxW2ldOwogICAgICAgIGZvcih2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICBpZih0b2tlbiA9PSB0b2tlbnMyW2pdKSBjb250aW51ZSBvdXRlcjsKICAgICAgICB9CiAgICAgICAgdmFsdWVzLnB1c2godG9rZW4pOwogICAgICB9CiAgICAgIHJldHVybiB2YWx1ZXM7CiAgICB9CgogICAgZnVuY3Rpb24gYXJyYXlDbGFzc2VzIChjbGFzc1ZhbCkgewogICAgICBpZiAoaXNBcnJheShjbGFzc1ZhbCkpIHsKICAgICAgICByZXR1cm4gY2xhc3NWYWw7CiAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcoY2xhc3NWYWwpKSB7CiAgICAgICAgcmV0dXJuIGNsYXNzVmFsLnNwbGl0KCcgJyk7CiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoY2xhc3NWYWwpKSB7CiAgICAgICAgdmFyIGNsYXNzZXMgPSBbXSwgaSA9IDA7CiAgICAgICAgZm9yRWFjaChjbGFzc1ZhbCwgZnVuY3Rpb24odiwgaykgewogICAgICAgICAgaWYgKHYpIHsKICAgICAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXMuY29uY2F0KGsuc3BsaXQoJyAnKSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGNsYXNzZXM7CiAgICAgIH0KICAgICAgcmV0dXJuIGNsYXNzVmFsOwogICAgfQogIH1dOwp9CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0NsYXNzCiAqIEByZXN0cmljdCBBQwogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0NsYXNzYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBkeW5hbWljYWxseSBzZXQgQ1NTIGNsYXNzZXMgb24gYW4gSFRNTCBlbGVtZW50IGJ5IGRhdGFiaW5kaW5nCiAqIGFuIGV4cHJlc3Npb24gdGhhdCByZXByZXNlbnRzIGFsbCBjbGFzc2VzIHRvIGJlIGFkZGVkLgogKgogKiBUaGUgZGlyZWN0aXZlIG9wZXJhdGVzIGluIHRocmVlIGRpZmZlcmVudCB3YXlzLCBkZXBlbmRpbmcgb24gd2hpY2ggb2YgdGhyZWUgdHlwZXMgdGhlIGV4cHJlc3Npb24KICogZXZhbHVhdGVzIHRvOgogKgogKiAxLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZSBzdHJpbmcgc2hvdWxkIGJlIG9uZSBvciBtb3JlIHNwYWNlLWRlbGltaXRlZCBjbGFzcwogKiBuYW1lcy4KICoKICogMi4gSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGFuIGFycmF5LCBlYWNoIGVsZW1lbnQgb2YgdGhlIGFycmF5IHNob3VsZCBiZSBhIHN0cmluZyB0aGF0IGlzCiAqIG9uZSBvciBtb3JlIHNwYWNlLWRlbGltaXRlZCBjbGFzcyBuYW1lcy4KICoKICogMy4gSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGFuIG9iamVjdCwgdGhlbiBmb3IgZWFjaCBrZXktdmFsdWUgcGFpciBvZiB0aGUKICogb2JqZWN0IHdpdGggYSB0cnV0aHkgdmFsdWUgdGhlIGNvcnJlc3BvbmRpbmcga2V5IGlzIHVzZWQgYXMgYSBjbGFzcyBuYW1lLgogKgogKiBUaGUgZGlyZWN0aXZlIHdvbid0IGFkZCBkdXBsaWNhdGUgY2xhc3NlcyBpZiBhIHBhcnRpY3VsYXIgY2xhc3Mgd2FzIGFscmVhZHkgc2V0LgogKgogKiBXaGVuIHRoZSBleHByZXNzaW9uIGNoYW5nZXMsIHRoZSBwcmV2aW91c2x5IGFkZGVkIGNsYXNzZXMgYXJlIHJlbW92ZWQgYW5kIG9ubHkgdGhlbiB0aGUKICogbmV3IGNsYXNzZXMgYXJlIGFkZGVkLgogKgogKiBAYW5pbWF0aW9ucwogKiBhZGQgLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyBhcHBsaWVkIHRvIHRoZSBlbGVtZW50CiAqIHJlbW92ZSAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudAogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHQKICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcwogKiAgIG5hbWVzLCBhbiBhcnJheSwgb3IgYSBtYXAgb2YgY2xhc3MgbmFtZXMgdG8gYm9vbGVhbiB2YWx1ZXMuIEluIHRoZSBjYXNlIG9mIGEgbWFwLCB0aGUKICogICBuYW1lcyBvZiB0aGUgcHJvcGVydGllcyB3aG9zZSB2YWx1ZXMgYXJlIHRydXRoeSB3aWxsIGJlIGFkZGVkIGFzIGNzcyBjbGFzc2VzIHRvIHRoZQogKiAgIGVsZW1lbnQuCiAqCiAqIEBleGFtcGxlIEV4YW1wbGUgdGhhdCBkZW1vbnN0cmF0ZXMgYmFzaWMgYmluZGluZ3MgdmlhIG5nQ2xhc3MgZGlyZWN0aXZlLgogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxwIG5nLWNsYXNzPSJ7c3RyaWtlOiBkZWxldGVkLCBib2xkOiBpbXBvcnRhbnQsIHJlZDogZXJyb3J9Ij5NYXAgU3ludGF4IEV4YW1wbGU8L3A+CiAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJkZWxldGVkIj4gZGVsZXRlZCAoYXBwbHkgInN0cmlrZSIgY2xhc3MpPGJyPgogICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iaW1wb3J0YW50Ij4gaW1wb3J0YW50IChhcHBseSAiYm9sZCIgY2xhc3MpPGJyPgogICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iZXJyb3IiPiBlcnJvciAoYXBwbHkgInJlZCIgY2xhc3MpCiAgICAgICA8aHI+CiAgICAgICA8cCBuZy1jbGFzcz0ic3R5bGUiPlVzaW5nIFN0cmluZyBTeW50YXg8L3A+CiAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InN0eWxlIiBwbGFjZWhvbGRlcj0iVHlwZTogYm9sZCBzdHJpa2UgcmVkIj4KICAgICAgIDxocj4KICAgICAgIDxwIG5nLWNsYXNzPSJbc3R5bGUxLCBzdHlsZTIsIHN0eWxlM10iPlVzaW5nIEFycmF5IFN5bnRheDwvcD4KICAgICAgIDxpbnB1dCBuZy1tb2RlbD0ic3R5bGUxIiBwbGFjZWhvbGRlcj0iVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCI+PGJyPgogICAgICAgPGlucHV0IG5nLW1vZGVsPSJzdHlsZTIiIHBsYWNlaG9sZGVyPSJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkIj48YnI+CiAgICAgICA8aW5wdXQgbmctbW9kZWw9InN0eWxlMyIgcGxhY2Vob2xkZXI9IlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWQiPjxicj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgIC5zdHJpa2UgewogICAgICAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDsKICAgICAgIH0KICAgICAgIC5ib2xkIHsKICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgIH0KICAgICAgIC5yZWQgewogICAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgdmFyIHBzID0gZWxlbWVudC5hbGwoYnkuY3NzKCdwJykpOwoKICAgICAgIGl0KCdzaG91bGQgbGV0IHlvdSB0b2dnbGUgdGhlIGNsYXNzJywgZnVuY3Rpb24oKSB7CgogICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC50b01hdGNoKC9ib2xkLyk7CiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LnRvTWF0Y2goL3JlZC8pOwoKICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnaW1wb3J0YW50JykpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvYm9sZC8pOwoKICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnZXJyb3InKSkuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b01hdGNoKC9yZWQvKTsKICAgICAgIH0pOwoKICAgICAgIGl0KCdzaG91bGQgbGV0IHlvdSB0b2dnbGUgc3RyaW5nIGV4YW1wbGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpOwogICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZScpKS5jbGVhcigpOwogICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZScpKS5zZW5kS2V5cygncmVkJyk7CiAgICAgICAgIGV4cGVjdChwcy5nZXQoMSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdyZWQnKTsKICAgICAgIH0pOwoKICAgICAgIGl0KCdhcnJheSBleGFtcGxlIHNob3VsZCBoYXZlIDMgY2xhc3NlcycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7CiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMScpKS5zZW5kS2V5cygnYm9sZCcpOwogICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTInKSkuc2VuZEtleXMoJ3N0cmlrZScpOwogICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTMnKSkuc2VuZEtleXMoJ3JlZCcpOwogICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnYm9sZCBzdHJpa2UgcmVkJyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KCiAgICMjIEFuaW1hdGlvbnMKCiAgIFRoZSBleGFtcGxlIGJlbG93IGRlbW9uc3RyYXRlcyBob3cgdG8gcGVyZm9ybSBhbmltYXRpb25zIHVzaW5nIG5nQ2xhc3MuCgogICA8ZXhhbXBsZSBtb2R1bGU9Im5nQW5pbWF0ZSIgZGVwcz0iYW5ndWxhci1hbmltYXRlLmpzIiBhbmltYXRpb25zPSJ0cnVlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGlucHV0IGlkPSJzZXRidG4iIHR5cGU9ImJ1dHRvbiIgdmFsdWU9InNldCIgbmctY2xpY2s9Im15VmFyPSdteS1jbGFzcyciPgogICAgICA8aW5wdXQgaWQ9ImNsZWFyYnRuIiB0eXBlPSJidXR0b24iIHZhbHVlPSJjbGVhciIgbmctY2xpY2s9Im15VmFyPScnIj4KICAgICAgPGJyPgogICAgICA8c3BhbiBjbGFzcz0iYmFzZS1jbGFzcyIgbmctY2xhc3M9Im15VmFyIj5TYW1wbGUgVGV4dDwvc3Bhbj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgIC5iYXNlLWNsYXNzIHsKICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7CiAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41czsKICAgICAgIH0KCiAgICAgICAuYmFzZS1jbGFzcy5teS1jbGFzcyB7CiAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICAgIGZvbnQtc2l6ZTozZW07CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LgogICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7CgogICAgICAgICBlbGVtZW50KGJ5LmlkKCdzZXRidG4nKSkuY2xpY2soKTsKCiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS4KICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pOwoKICAgICAgICAgZWxlbWVudChieS5pZCgnY2xlYXJidG4nKSkuY2xpY2soKTsKCiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuCiAgICAgICAgICAgdG9NYXRjaCgvbXktY2xhc3MvKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgoKCiAgICMjIG5nQ2xhc3MgYW5kIHByZS1leGlzdGluZyBDU1MzIFRyYW5zaXRpb25zL0FuaW1hdGlvbnMKICAgVGhlIG5nQ2xhc3MgZGlyZWN0aXZlIHN0aWxsIHN1cHBvcnRzIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9ucyBldmVuIGlmIHRoZXkgZG8gbm90IGZvbGxvdyB0aGUgbmdBbmltYXRlIENTUyBuYW1pbmcgc3RydWN0dXJlLgogICBVcG9uIGFuaW1hdGlvbiBuZ0FuaW1hdGUgd2lsbCBhcHBseSBzdXBwbGVtZW50YXJ5IENTUyBjbGFzc2VzIHRvIHRyYWNrIHRoZSBzdGFydCBhbmQgZW5kIG9mIGFuIGFuaW1hdGlvbiwgYnV0IHRoaXMgd2lsbCBub3QgaGluZGVyCiAgIGFueSBwcmUtZXhpc3RpbmcgQ1NTIHRyYW5zaXRpb25zIGFscmVhZHkgb24gdGhlIGVsZW1lbnQuIFRvIGdldCBhbiBpZGVhIG9mIHdoYXQgaGFwcGVucyBkdXJpbmcgYSBjbGFzcy1iYXNlZCBhbmltYXRpb24sIGJlIHN1cmUKICAgdG8gdmlldyB0aGUgc3RlcCBieSBzdGVwIGRldGFpbHMgb2Yge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZSNhZGRjbGFzcyAkYW5pbWF0ZS5hZGRDbGFzc30gYW5kCiAgIHtAbGluayBuZ0FuaW1hdGUuJGFuaW1hdGUjcmVtb3ZlY2xhc3MgJGFuaW1hdGUucmVtb3ZlQ2xhc3N9LgogKi8KdmFyIG5nQ2xhc3NEaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnJywgdHJ1ZSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0NsYXNzT2RkCiAqIEByZXN0cmljdCBBQwogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhcwogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCB0aGV5IHdvcmsgaW4KICogY29uanVuY3Rpb24gd2l0aCBgbmdSZXBlYXRgIGFuZCB0YWtlIGVmZmVjdCBvbmx5IG9uIG9kZCAoZXZlbikgcm93cy4KICoKICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gdGhlIHNjb3BlIG9mIGFuCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzT2RkIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHQKICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPG9sIG5nLWluaXQ9Im5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J10iPgogICAgICAgICAgPGxpIG5nLXJlcGVhdD0ibmFtZSBpbiBuYW1lcyI+CiAgICAgICAgICAgPHNwYW4gbmctY2xhc3Mtb2RkPSInb2RkJyIgbmctY2xhc3MtZXZlbj0iJ2V2ZW4nIj4KICAgICAgICAgICAgIHt7bmFtZX19CiAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPC9saT4KICAgICAgICA8L29sPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgLm9kZCB7CiAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICB9CiAgICAgICAuZXZlbiB7CiAgICAgICAgIGNvbG9yOiBibHVlOwogICAgICAgfQogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLgogICAgICAgICAgIHRvTWF0Y2goL29kZC8pOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS4KICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ0NsYXNzT2RkRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ09kZCcsIDApOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdDbGFzc0V2ZW4KICogQHJlc3RyaWN0IEFDCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGFzcyBuZ0NsYXNzfSwgZXhjZXB0IHRoZXkgd29yayBpbgogKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLgogKgogKiBUaGlzIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCBvbmx5IHdpdGhpbiB0aGUgc2NvcGUgb2YgYW4KICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZQogKiAgIHJlc3VsdCBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPG9sIG5nLWluaXQ9Im5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J10iPgogICAgICAgICAgPGxpIG5nLXJlcGVhdD0ibmFtZSBpbiBuYW1lcyI+CiAgICAgICAgICAgPHNwYW4gbmctY2xhc3Mtb2RkPSInb2RkJyIgbmctY2xhc3MtZXZlbj0iJ2V2ZW4nIj4KICAgICAgICAgICAgIHt7bmFtZX19ICZuYnNwOyAmbmJzcDsgJm5ic3A7CiAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgPC9saT4KICAgICAgICA8L29sPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgLm9kZCB7CiAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICB9CiAgICAgICAuZXZlbiB7CiAgICAgICAgIGNvbG9yOiBibHVlOwogICAgICAgfQogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLgogICAgICAgICAgIHRvTWF0Y2goL29kZC8pOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS4KICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdFdmVuJywgMSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0Nsb2FrCiAqIEByZXN0cmljdCBBQwogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0Nsb2FrYCBkaXJlY3RpdmUgaXMgdXNlZCB0byBwcmV2ZW50IHRoZSBBbmd1bGFyIGh0bWwgdGVtcGxhdGUgZnJvbSBiZWluZyBicmllZmx5CiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3ICh1bmNvbXBpbGVkKSBmb3JtIHdoaWxlIHlvdXIgYXBwbGljYXRpb24gaXMgbG9hZGluZy4gVXNlIHRoaXMKICogZGlyZWN0aXZlIHRvIGF2b2lkIHRoZSB1bmRlc2lyYWJsZSBmbGlja2VyIGVmZmVjdCBjYXVzZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGUgZGlzcGxheS4KICoKICogVGhlIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCB0byB0aGUgYDxib2R5PmAgZWxlbWVudCwgYnV0IHRoZSBwcmVmZXJyZWQgdXNhZ2UgaXMgdG8gYXBwbHkKICogbXVsdGlwbGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZXMgdG8gc21hbGwgcG9ydGlvbnMgb2YgdGhlIHBhZ2UgdG8gcGVybWl0IHByb2dyZXNzaXZlIHJlbmRlcmluZwogKiBvZiB0aGUgYnJvd3NlciB2aWV3LgogKgogKiBgbmdDbG9ha2Agd29ya3MgaW4gY29vcGVyYXRpb24gd2l0aCB0aGUgZm9sbG93aW5nIGNzcyBydWxlIGVtYmVkZGVkIHdpdGhpbiBgYW5ndWxhci5qc2AgYW5kCiAqIGBhbmd1bGFyLm1pbi5qc2AuCiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLgogKgogKiBgYGBjc3MKICogW25nXDpjbG9ha10sIFtuZy1jbG9ha10sIFtkYXRhLW5nLWNsb2FrXSwgW3gtbmctY2xvYWtdLCAubmctY2xvYWssIC54LW5nLWNsb2FrIHsKICogICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7CiAqIH0KICogYGBgCiAqCiAqIFdoZW4gdGhpcyBjc3MgcnVsZSBpcyBsb2FkZWQgYnkgdGhlIGJyb3dzZXIsIGFsbCBodG1sIGVsZW1lbnRzIChpbmNsdWRpbmcgdGhlaXIgY2hpbGRyZW4pIHRoYXQKICogYXJlIHRhZ2dlZCB3aXRoIHRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGFyZSBoaWRkZW4uIFdoZW4gQW5ndWxhciBlbmNvdW50ZXJzIHRoaXMgZGlyZWN0aXZlCiAqIGR1cmluZyB0aGUgY29tcGlsYXRpb24gb2YgdGhlIHRlbXBsYXRlIGl0IGRlbGV0ZXMgdGhlIGBuZ0Nsb2FrYCBlbGVtZW50IGF0dHJpYnV0ZSwgbWFraW5nCiAqIHRoZSBjb21waWxlZCBlbGVtZW50IHZpc2libGUuCiAqCiAqIEZvciB0aGUgYmVzdCByZXN1bHQsIHRoZSBgYW5ndWxhci5qc2Agc2NyaXB0IG11c3QgYmUgbG9hZGVkIGluIHRoZSBoZWFkIHNlY3Rpb24gb2YgdGhlIGh0bWwKICogZG9jdW1lbnQ7IGFsdGVybmF0aXZlbHksIHRoZSBjc3MgcnVsZSBhYm92ZSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBleHRlcm5hbCBzdHlsZXNoZWV0IG9mIHRoZQogKiBhcHBsaWNhdGlvbi4KICoKICogTGVnYWN5IGJyb3dzZXJzLCBsaWtlIElFNywgZG8gbm90IHByb3ZpZGUgYXR0cmlidXRlIHNlbGVjdG9yIHN1cHBvcnQgKGFkZGVkIGluIENTUyAyLjEpIHNvIHRoZXkKICogY2Fubm90IG1hdGNoIHRoZSBgW25nXDpjbG9ha11gIHNlbGVjdG9yLiBUbyB3b3JrIGFyb3VuZCB0aGlzIGxpbWl0YXRpb24sIHlvdSBtdXN0IGFkZCB0aGUgY3NzCiAqIGNsYXNzIGBuZy1jbG9ha2AgaW4gYWRkaXRpb24gdG8gdGhlIGBuZ0Nsb2FrYCBkaXJlY3RpdmUgYXMgc2hvd24gaW4gdGhlIGV4YW1wbGUgYmVsb3cuCiAqCiAqIEBlbGVtZW50IEFOWQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICA8ZGl2IGlkPSJ0ZW1wbGF0ZTEiIG5nLWNsb2FrPnt7ICdoZWxsbycgfX08L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJ0ZW1wbGF0ZTIiIG5nLWNsb2FrIGNsYXNzPSJuZy1jbG9hayI+e3sgJ2hlbGxvIElFNycgfX08L2Rpdj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICBpdCgnc2hvdWxkIHJlbW92ZSB0aGUgdGVtcGxhdGUgZGlyZWN0aXZlIGFuZCBjc3MgY2xhc3MnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KCQoJyN0ZW1wbGF0ZTEnKS5nZXRBdHRyaWJ1dGUoJ25nLWNsb2FrJykpLgogICAgICAgICAgIHRvQmVOdWxsKCk7CiAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUyJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS4KICAgICAgICAgICB0b0JlTnVsbCgpOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqCiAqLwp2YXIgbmdDbG9ha0RpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsKICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICBhdHRyLiRzZXQoJ25nQ2xvYWsnLCB1bmRlZmluZWQpOwogICAgZWxlbWVudC5yZW1vdmVDbGFzcygnbmctY2xvYWsnKTsKICB9Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdDb250cm9sbGVyCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlIGF0dGFjaGVzIGEgY29udHJvbGxlciBjbGFzcyB0byB0aGUgdmlldy4gVGhpcyBpcyBhIGtleSBhc3BlY3Qgb2YgaG93IGFuZ3VsYXIKICogc3VwcG9ydHMgdGhlIHByaW5jaXBsZXMgYmVoaW5kIHRoZSBNb2RlbC1WaWV3LUNvbnRyb2xsZXIgZGVzaWduIHBhdHRlcm4uCiAqCiAqIE1WQyBjb21wb25lbnRzIGluIGFuZ3VsYXI6CiAqCiAqICogTW9kZWwg4oCUIE1vZGVscyBhcmUgdGhlIHByb3BlcnRpZXMgb2YgYSBzY29wZTsgc2NvcGVzIGFyZSBhdHRhY2hlZCB0byB0aGUgRE9NIHdoZXJlIHNjb3BlIHByb3BlcnRpZXMKICogICBhcmUgYWNjZXNzZWQgdGhyb3VnaCBiaW5kaW5ncy4KICogKiBWaWV3IOKAlCBUaGUgdGVtcGxhdGUgKEhUTUwgd2l0aCBkYXRhIGJpbmRpbmdzKSB0aGF0IGlzIHJlbmRlcmVkIGludG8gdGhlIFZpZXcuCiAqICogQ29udHJvbGxlciDigJQgVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgYSBDb250cm9sbGVyIGNsYXNzOyB0aGUgY2xhc3MgY29udGFpbnMgYnVzaW5lc3MKICogICBsb2dpYyBiZWhpbmQgdGhlIGFwcGxpY2F0aW9uIHRvIGRlY29yYXRlIHRoZSBzY29wZSB3aXRoIGZ1bmN0aW9ucyBhbmQgdmFsdWVzCiAqCiAqIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gYXR0YWNoIGNvbnRyb2xsZXJzIHRvIHRoZSBET00gYnkgZGVjbGFyaW5nIGl0IGluIGEgcm91dGUgZGVmaW5pdGlvbgogKiB2aWEgdGhlIHtAbGluayBuZ1JvdXRlLiRyb3V0ZSAkcm91dGV9IHNlcnZpY2UuIEEgY29tbW9uIG1pc3Rha2UgaXMgdG8gZGVjbGFyZSB0aGUgY29udHJvbGxlcgogKiBhZ2FpbiB1c2luZyBgbmctY29udHJvbGxlcmAgaW4gdGhlIHRlbXBsYXRlIGl0c2VsZi4gIFRoaXMgd2lsbCBjYXVzZSB0aGUgY29udHJvbGxlciB0byBiZSBhdHRhY2hlZAogKiBhbmQgZXhlY3V0ZWQgdHdpY2UuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAc2NvcGUKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NvbnRyb2xsZXIgTmFtZSBvZiBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHJlZ2lzdGVyZWQgd2l0aCB0aGUgY3VycmVudAogKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciAkY29udHJvbGxlclByb3ZpZGVyfSBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufQogKiB0aGF0IG9uIHRoZSBjdXJyZW50IHNjb3BlIGV2YWx1YXRlcyB0byBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLgogKgogKiBUaGUgY29udHJvbGxlciBpbnN0YW5jZSBjYW4gYmUgcHVibGlzaGVkIGludG8gYSBzY29wZSBwcm9wZXJ0eSBieSBzcGVjaWZ5aW5nCiAqIGBuZy1jb250cm9sbGVyPSJhcyBwcm9wZXJ0eU5hbWUiYC4KICoKICogSWYgdGhlIGN1cnJlbnQgYCRjb250cm9sbGVyUHJvdmlkZXJgIGlzIGNvbmZpZ3VyZWQgdG8gdXNlIGdsb2JhbHMgKHZpYQogKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHMgYCRjb250cm9sbGVyUHJvdmlkZXIuYWxsb3dHbG9iYWxzKClgIH0pLCB0aGlzIG1heQogKiBhbHNvIGJlIHRoZSBuYW1lIG9mIGEgZ2xvYmFsbHkgYWNjZXNzaWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiAobm90IHJlY29tbWVuZGVkKS4KICoKICogQGV4YW1wbGUKICogSGVyZSBpcyBhIHNpbXBsZSBmb3JtIGZvciBlZGl0aW5nIHVzZXIgY29udGFjdCBpbmZvcm1hdGlvbi4gQWRkaW5nLCByZW1vdmluZywgY2xlYXJpbmcsIGFuZAogKiBncmVldGluZyBhcmUgbWV0aG9kcyBkZWNsYXJlZCBvbiB0aGUgY29udHJvbGxlciAoc2VlIHNvdXJjZSB0YWIpLiBUaGVzZSBtZXRob2RzIGNhbgogKiBlYXNpbHkgYmUgY2FsbGVkIGZyb20gdGhlIGFuZ3VsYXIgbWFya3VwLiBBbnkgY2hhbmdlcyB0byB0aGUgZGF0YSBhcmUgYXV0b21hdGljYWxseSByZWZsZWN0ZWQKICogaW4gdGhlIFZpZXcgd2l0aG91dCB0aGUgbmVlZCBmb3IgYSBtYW51YWwgdXBkYXRlLgogKgogKiBUd28gZGlmZmVyZW50IGRlY2xhcmF0aW9uIHN0eWxlcyBhcmUgaW5jbHVkZWQgYmVsb3c6CiAqCiAqICogb25lIGJpbmRzIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgZGlyZWN0bHkgb250byB0aGUgY29udHJvbGxlciB1c2luZyBgdGhpc2A6CiAqIGBuZy1jb250cm9sbGVyPSJTZXR0aW5nc0NvbnRyb2xsZXIxIGFzIHNldHRpbmdzImAKICogKiBvbmUgaW5qZWN0cyBgJHNjb3BlYCBpbnRvIHRoZSBjb250cm9sbGVyOgogKiBgbmctY29udHJvbGxlcj0iU2V0dGluZ3NDb250cm9sbGVyMiJgCiAqCiAqIFRoZSBzZWNvbmQgb3B0aW9uIGlzIG1vcmUgY29tbW9uIGluIHRoZSBBbmd1bGFyIGNvbW11bml0eSwgYW5kIGlzIGdlbmVyYWxseSB1c2VkIGluIGJvaWxlcnBsYXRlcwogKiBhbmQgaW4gdGhpcyBndWlkZS4gSG93ZXZlciwgdGhlcmUgYXJlIGFkdmFudGFnZXMgdG8gYmluZGluZyBwcm9wZXJ0aWVzIGRpcmVjdGx5IHRvIHRoZSBjb250cm9sbGVyCiAqIGFuZCBhdm9pZGluZyBzY29wZS4KICoKICogKiBVc2luZyBgY29udHJvbGxlciBhc2AgbWFrZXMgaXQgb2J2aW91cyB3aGljaCBjb250cm9sbGVyIHlvdSBhcmUgYWNjZXNzaW5nIGluIHRoZSB0ZW1wbGF0ZSB3aGVuCiAqIG11bHRpcGxlIGNvbnRyb2xsZXJzIGFwcGx5IHRvIGFuIGVsZW1lbnQuCiAqICogSWYgeW91IGFyZSB3cml0aW5nIHlvdXIgY29udHJvbGxlcnMgYXMgY2xhc3NlcyB5b3UgaGF2ZSBlYXNpZXIgYWNjZXNzIHRvIHRoZSBwcm9wZXJ0aWVzIGFuZAogKiBtZXRob2RzLCB3aGljaCB3aWxsIGFwcGVhciBvbiB0aGUgc2NvcGUsIGZyb20gaW5zaWRlIHRoZSBjb250cm9sbGVyIGNvZGUuCiAqICogU2luY2UgdGhlcmUgaXMgYWx3YXlzIGEgYC5gIGluIHRoZSBiaW5kaW5ncywgeW91IGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgcHJvdG90eXBhbAogKiBpbmhlcml0YW5jZSBtYXNraW5nIHByaW1pdGl2ZXMuCiAqCiAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdGhlIGBjb250cm9sbGVyIGFzYCBzeW50YXguCiAqCiAqIDxleGFtcGxlIG5hbWU9Im5nQ29udHJvbGxlckFzIiBtb2R1bGU9ImNvbnRyb2xsZXJBc0V4YW1wbGUiPgogKiAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogKiAgICA8ZGl2IGlkPSJjdHJsLWFzLWV4bXBsIiBuZy1jb250cm9sbGVyPSJTZXR0aW5nc0NvbnRyb2xsZXIxIGFzIHNldHRpbmdzIj4KICogICAgICBOYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InNldHRpbmdzLm5hbWUiLz4KICogICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9InNldHRpbmdzLmdyZWV0KCkiPmdyZWV0PC9hPiBdPGJyLz4KICogICAgICBDb250YWN0OgogKiAgICAgIDx1bD4KICogICAgICAgIDxsaSBuZy1yZXBlYXQ9ImNvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMiPgogKiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJjb250YWN0LnR5cGUiPgogKiAgICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+CiAqICAgICAgICAgICAgIDxvcHRpb24+ZW1haWw8L29wdGlvbj4KICogICAgICAgICAgPC9zZWxlY3Q+CiAqICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0iY29udGFjdC52YWx1ZSIvPgogKiAgICAgICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9InNldHRpbmdzLmNsZWFyQ29udGFjdChjb250YWN0KSI+Y2xlYXI8L2E+CiAqICAgICAgICAgIHwgPGEgaHJlZj0iIiBuZy1jbGljaz0ic2V0dGluZ3MucmVtb3ZlQ29udGFjdChjb250YWN0KSI+WDwvYT4gXQogKiAgICAgICAgPC9saT4KICogICAgICAgIDxsaT5bIDxhIGhyZWY9IiIgbmctY2xpY2s9InNldHRpbmdzLmFkZENvbnRhY3QoKSI+YWRkPC9hPiBdPC9saT4KICogICAgIDwvdWw+CiAqICAgIDwvZGl2PgogKiAgIDwvZmlsZT4KICogICA8ZmlsZSBuYW1lPSJhcHAuanMiPgogKiAgICBhbmd1bGFyLm1vZHVsZSgnY29udHJvbGxlckFzRXhhbXBsZScsIFtdKQogKiAgICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIxJywgU2V0dGluZ3NDb250cm9sbGVyMSk7CiAqCiAqICAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcjEoKSB7CiAqICAgICAgdGhpcy5uYW1lID0gIkpvaG4gU21pdGgiOwogKiAgICAgIHRoaXMuY29udGFjdHMgPSBbCiAqICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSwKICogICAgICAgIHt0eXBlOiAnZW1haWwnLCB2YWx1ZTogJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnfSBdOwogKiAgICB9CiAqCiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmdyZWV0ID0gZnVuY3Rpb24oKSB7CiAqICAgICAgYWxlcnQodGhpcy5uYW1lKTsKICogICAgfTsKICoKICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkgewogKiAgICAgIHRoaXMuY29udGFjdHMucHVzaCh7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICd5b3VybmFtZUBleGFtcGxlLm9yZyd9KTsKICogICAgfTsKICoKICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkgewogKiAgICAgdmFyIGluZGV4ID0gdGhpcy5jb250YWN0cy5pbmRleE9mKGNvbnRhY3RUb1JlbW92ZSk7CiAqICAgICAgdGhpcy5jb250YWN0cy5zcGxpY2UoaW5kZXgsIDEpOwogKiAgICB9OwogKgogKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5jbGVhckNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KSB7CiAqICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJzsKICogICAgICBjb250YWN0LnZhbHVlID0gJyc7CiAqICAgIH07CiAqICAgPC9maWxlPgogKiAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogKiAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyIGFzJywgZnVuY3Rpb24oKSB7CiAqICAgICAgIHZhciBjb250YWluZXIgPSBlbGVtZW50KGJ5LmlkKCdjdHJsLWFzLWV4bXBsJykpOwogKiAgICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5tb2RlbCgnc2V0dGluZ3MubmFtZScpKQogKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpOwogKgogKiAgICAgICB2YXIgZmlyc3RSZXBlYXQgPQogKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMCkpOwogKiAgICAgICB2YXIgc2Vjb25kUmVwZWF0ID0KICogICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzJykucm93KDEpKTsKICoKICogICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKQogKiAgICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpOwogKgogKiAgICAgICBleHBlY3Qoc2Vjb25kUmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKQogKiAgICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTsKICoKICogICAgICAgZmlyc3RSZXBlYXQuZWxlbWVudChieS5saW5rVGV4dCgnY2xlYXInKSkuY2xpY2soKTsKICoKICogICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKQogKiAgICAgICAgICAgLnRvQmUoJycpOwogKgogKiAgICAgICBjb250YWluZXIuZWxlbWVudChieS5saW5rVGV4dCgnYWRkJykpLmNsaWNrKCk7CiAqCiAqICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygyKSkKICogICAgICAgICAgIC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpCiAqICAgICAgICAgICAuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKQogKiAgICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7CiAqICAgICB9KTsKICogICA8L2ZpbGU+CiAqIDwvZXhhbXBsZT4KICoKICogVGhpcyBleGFtcGxlIGRlbW9uc3RyYXRlcyB0aGUgImF0dGFjaCB0byBgJHNjb3BlYCIgc3R5bGUgb2YgY29udHJvbGxlci4KICoKICogPGV4YW1wbGUgbmFtZT0ibmdDb250cm9sbGVyIiBtb2R1bGU9ImNvbnRyb2xsZXJFeGFtcGxlIj4KICogIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogKiAgIDxkaXYgaWQ9ImN0cmwtZXhtcGwiIG5nLWNvbnRyb2xsZXI9IlNldHRpbmdzQ29udHJvbGxlcjIiPgogKiAgICAgTmFtZTogPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJuYW1lIi8+CiAqICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9ImdyZWV0KCkiPmdyZWV0PC9hPiBdPGJyLz4KICogICAgIENvbnRhY3Q6CiAqICAgICA8dWw+CiAqICAgICAgIDxsaSBuZy1yZXBlYXQ9ImNvbnRhY3QgaW4gY29udGFjdHMiPgogKiAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9ImNvbnRhY3QudHlwZSI+CiAqICAgICAgICAgICAgPG9wdGlvbj5waG9uZTwvb3B0aW9uPgogKiAgICAgICAgICAgIDxvcHRpb24+ZW1haWw8L29wdGlvbj4KICogICAgICAgICA8L3NlbGVjdD4KICogICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9ImNvbnRhY3QudmFsdWUiLz4KICogICAgICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9ImNsZWFyQ29udGFjdChjb250YWN0KSI+Y2xlYXI8L2E+CiAqICAgICAgICAgfCA8YSBocmVmPSIiIG5nLWNsaWNrPSJyZW1vdmVDb250YWN0KGNvbnRhY3QpIj5YPC9hPiBdCiAqICAgICAgIDwvbGk+CiAqICAgICAgIDxsaT5bIDxhIGhyZWY9IiIgbmctY2xpY2s9ImFkZENvbnRhY3QoKSI+YWRkPC9hPiBdPC9saT4KICogICAgPC91bD4KICogICA8L2Rpdj4KICogIDwvZmlsZT4KICogIDxmaWxlIG5hbWU9ImFwcC5qcyI+CiAqICAgYW5ndWxhci5tb2R1bGUoJ2NvbnRyb2xsZXJFeGFtcGxlJywgW10pCiAqICAgICAuY29udHJvbGxlcignU2V0dGluZ3NDb250cm9sbGVyMicsIFsnJHNjb3BlJywgU2V0dGluZ3NDb250cm9sbGVyMl0pOwogKgogKiAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcjIoJHNjb3BlKSB7CiAqICAgICAkc2NvcGUubmFtZSA9ICJKb2huIFNtaXRoIjsKICogICAgICRzY29wZS5jb250YWN0cyA9IFsKICogICAgICAge3R5cGU6J3Bob25lJywgdmFsdWU6JzQwOCA1NTUgMTIxMid9LAogKiAgICAgICB7dHlwZTonZW1haWwnLCB2YWx1ZTonam9obi5zbWl0aEBleGFtcGxlLm9yZyd9IF07CiAqCiAqICAgICAkc2NvcGUuZ3JlZXQgPSBmdW5jdGlvbigpIHsKICogICAgICAgYWxlcnQoJHNjb3BlLm5hbWUpOwogKiAgICAgfTsKICoKICogICAgICRzY29wZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7CiAqICAgICAgICRzY29wZS5jb250YWN0cy5wdXNoKHt0eXBlOidlbWFpbCcsIHZhbHVlOid5b3VybmFtZUBleGFtcGxlLm9yZyd9KTsKICogICAgIH07CiAqCiAqICAgICAkc2NvcGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkgewogKiAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpOwogKiAgICAgICAkc2NvcGUuY29udGFjdHMuc3BsaWNlKGluZGV4LCAxKTsKICogICAgIH07CiAqCiAqICAgICAkc2NvcGUuY2xlYXJDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdCkgewogKiAgICAgICBjb250YWN0LnR5cGUgPSAncGhvbmUnOwogKiAgICAgICBjb250YWN0LnZhbHVlID0gJyc7CiAqICAgICB9OwogKiAgIH0KICogIDwvZmlsZT4KICogIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogKiAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHsKICogICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1leG1wbCcpKTsKICoKICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSkKICogICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpOwogKgogKiAgICAgIHZhciBmaXJzdFJlcGVhdCA9CiAqICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDApKTsKICogICAgICB2YXIgc2Vjb25kUmVwZWF0ID0KICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMSkpOwogKgogKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkKICogICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpOwogKiAgICAgIGV4cGVjdChzZWNvbmRSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpCiAqICAgICAgICAgIC50b0JlKCdqb2huLnNtaXRoQGV4YW1wbGUub3JnJyk7CiAqCiAqICAgICAgZmlyc3RSZXBlYXQuZWxlbWVudChieS5saW5rVGV4dCgnY2xlYXInKSkuY2xpY2soKTsKICoKICogICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpCiAqICAgICAgICAgIC50b0JlKCcnKTsKICoKICogICAgICBjb250YWluZXIuZWxlbWVudChieS5saW5rVGV4dCgnYWRkJykpLmNsaWNrKCk7CiAqCiAqICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDIpKQogKiAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKQogKiAgICAgICAgICAuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKQogKiAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTsKICogICAgfSk7CiAqICA8L2ZpbGU+CiAqPC9leGFtcGxlPgoKICovCnZhciBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUgPSBbZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnQScsCiAgICBzY29wZTogdHJ1ZSwKICAgIGNvbnRyb2xsZXI6ICdAJywKICAgIHByaW9yaXR5OiA1MDAKICB9Owp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nQ3NwCiAqCiAqIEBlbGVtZW50IGh0bWwKICogQGRlc2NyaXB0aW9uCiAqIEVuYWJsZXMgW0NTUCAoQ29udGVudCBTZWN1cml0eSBQb2xpY3kpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9TZWN1cml0eS9DU1ApIHN1cHBvcnQuCiAqCiAqIFRoaXMgaXMgbmVjZXNzYXJ5IHdoZW4gZGV2ZWxvcGluZyB0aGluZ3MgbGlrZSBHb29nbGUgQ2hyb21lIEV4dGVuc2lvbnMuCiAqCiAqIENTUCBmb3JiaWRzIGFwcHMgdG8gdXNlIGBldmFsYCBvciBgRnVuY3Rpb24oc3RyaW5nKWAgZ2VuZXJhdGVkIGZ1bmN0aW9ucyAoYW1vbmcgb3RoZXIgdGhpbmdzKS4KICogRm9yIEFuZ3VsYXIgdG8gYmUgQ1NQIGNvbXBhdGlibGUgdGhlcmUgYXJlIG9ubHkgdHdvIHRoaW5ncyB0aGF0IHdlIG5lZWQgdG8gZG8gZGlmZmVyZW50bHk6CiAqCiAqIC0gZG9uJ3QgdXNlIGBGdW5jdGlvbmAgY29uc3RydWN0b3IgdG8gZ2VuZXJhdGUgb3B0aW1pemVkIHZhbHVlIGdldHRlcnMKICogLSBkb24ndCBpbmplY3QgY3VzdG9tIHN0eWxlc2hlZXQgaW50byB0aGUgZG9jdW1lbnQKICoKICogQW5ndWxhckpTIHVzZXMgYEZ1bmN0aW9uKHN0cmluZylgIGdlbmVyYXRlZCBmdW5jdGlvbnMgYXMgYSBzcGVlZCBvcHRpbWl6YXRpb24uIEFwcGx5aW5nIHRoZSBgbmdDc3BgCiAqIGRpcmVjdGl2ZSB3aWxsIGNhdXNlIEFuZ3VsYXIgdG8gdXNlIENTUCBjb21wYXRpYmlsaXR5IG1vZGUuIFdoZW4gdGhpcyBtb2RlIGlzIG9uIEFuZ3VsYXJKUyB3aWxsCiAqIGV2YWx1YXRlIGFsbCBleHByZXNzaW9ucyB1cCB0byAzMCUgc2xvd2VyIHRoYW4gaW4gbm9uLUNTUCBtb2RlLCBidXQgbm8gc2VjdXJpdHkgdmlvbGF0aW9ucyB3aWxsCiAqIGJlIHJhaXNlZC4KICoKICogQ1NQIGZvcmJpZHMgSmF2YVNjcmlwdCB0byBpbmxpbmUgc3R5bGVzaGVldCBydWxlcy4gSW4gbm9uIENTUCBtb2RlIEFuZ3VsYXIgYXV0b21hdGljYWxseQogKiBpbmNsdWRlcyBzb21lIENTUyBydWxlcyAoZS5nLiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xvYWsgbmdDbG9ha30pLgogKiBUbyBtYWtlIHRob3NlIGRpcmVjdGl2ZXMgd29yayBpbiBDU1AgbW9kZSwgaW5jbHVkZSB0aGUgYGFuZ3VsYXItY3NwLmNzc2AgbWFudWFsbHkuCiAqCiAqIEFuZ3VsYXIgdHJpZXMgdG8gYXV0b2RldGVjdCBpZiBDU1AgaXMgYWN0aXZlIGFuZCBhdXRvbWF0aWNhbGx5IHR1cm4gb24gdGhlIENTUC1zYWZlIG1vZGUuIFRoaXMKICogYXV0b2RldGVjdGlvbiBob3dldmVyIHRyaWdnZXJzIGEgQ1NQIGVycm9yIHRvIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZToKICoKICogYGBgCiAqIFJlZnVzZWQgdG8gZXZhbHVhdGUgYSBzdHJpbmcgYXMgSmF2YVNjcmlwdCBiZWNhdXNlICd1bnNhZmUtZXZhbCcgaXMgbm90IGFuIGFsbG93ZWQgc291cmNlIG9mCiAqIHNjcmlwdCBpbiB0aGUgZm9sbG93aW5nIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGRpcmVjdGl2ZTogImRlZmF1bHQtc3JjICdzZWxmJyIuIE5vdGUgdGhhdAogKiAnc2NyaXB0LXNyYycgd2FzIG5vdCBleHBsaWNpdGx5IHNldCwgc28gJ2RlZmF1bHQtc3JjJyBpcyB1c2VkIGFzIGEgZmFsbGJhY2suCiAqIGBgYAogKgogKiBUaGlzIGVycm9yIGlzIGhhcm1sZXNzIGJ1dCBhbm5veWluZy4gVG8gcHJldmVudCB0aGUgZXJyb3IgZnJvbSBzaG93aW5nIHVwLCBwdXQgdGhlIGBuZ0NzcGAKICogZGlyZWN0aXZlIG9uIHRoZSByb290IGVsZW1lbnQgb2YgdGhlIGFwcGxpY2F0aW9uIG9yIG9uIHRoZSBgYW5ndWxhci5qc2Agc2NyaXB0IHRhZywgd2hpY2hldmVyCiAqIGFwcGVhcnMgZmlyc3QgaW4gdGhlIGh0bWwgZG9jdW1lbnQuCiAqCiAqICpOb3RlOiBUaGlzIGRpcmVjdGl2ZSBpcyBvbmx5IGF2YWlsYWJsZSBpbiB0aGUgYG5nLWNzcGAgYW5kIGBkYXRhLW5nLWNzcGAgYXR0cmlidXRlIGZvcm0uKgogKgogKiBAZXhhbXBsZQogKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIGFwcGx5IHRoZSBgbmdDc3BgIGRpcmVjdGl2ZSB0byB0aGUgYGh0bWxgIHRhZy4KICAgYGBgaHRtbAogICAgIDwhZG9jdHlwZSBodG1sPgogICAgIDxodG1sIG5nLWFwcCBuZy1jc3A+CiAgICAgLi4uCiAgICAgLi4uCiAgICAgPC9odG1sPgogICBgYGAKICovCgovLyBuZ0NzcCBpcyBub3QgaW1wbGVtZW50ZWQgYXMgYSBwcm9wZXIgZGlyZWN0aXZlIGFueSBtb3JlLCBiZWNhdXNlIHdlIG5lZWQgaXQgYmUgcHJvY2Vzc2VkIHdoaWxlIHdlCi8vIGJvb3RzdHJhcCB0aGUgc3lzdGVtIChiZWZvcmUgJHBhcnNlIGlzIGluc3RhbnRpYXRlZCksIGZvciB0aGlzIHJlYXNvbiB3ZSBqdXN0IGhhdmUKLy8gdGhlIGNzcC5pc0FjdGl2ZSgpIGZuIHRoYXQgbG9va3MgZm9yIG5nLWNzcCBhdHRyaWJ1dGUgYW55d2hlcmUgaW4gdGhlIGN1cnJlbnQgZG9jCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0NsaWNrCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgbmdDbGljayBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciB3aGVuCiAqIGFuIGVsZW1lbnQgaXMgY2xpY2tlZC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGNsaWNrLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxidXR0b24gbmctY2xpY2s9ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4KICAgICAgICBJbmNyZW1lbnQKICAgICAgPC9idXR0b24+CiAgICAgIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMCcpOwogICAgICAgICBlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMScpOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwovKgogKiBBIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyBjcmVhdGlvbiBvZiBjdXN0b20gb25jbGljayBoYW5kbGVycyB0aGF0IGFyZSBkZWZpbmVkIGFzIGFuZ3VsYXIKICogZXhwcmVzc2lvbnMgYW5kIGFyZSBjb21waWxlZCBhbmQgZXhlY3V0ZWQgd2l0aGluIHRoZSBjdXJyZW50IHNjb3BlLgogKgogKiBFdmVudHMgdGhhdCBhcmUgaGFuZGxlZCB2aWEgdGhlc2UgaGFuZGxlciBhcmUgYWx3YXlzIGNvbmZpZ3VyZWQgbm90IHRvIHByb3BhZ2F0ZSBmdXJ0aGVyLgogKi8KdmFyIG5nRXZlbnREaXJlY3RpdmVzID0ge307CmZvckVhY2goCiAgJ2NsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZW1vdmUgbW91c2VlbnRlciBtb3VzZWxlYXZlIGtleWRvd24ga2V5dXAga2V5cHJlc3Mgc3VibWl0IGZvY3VzIGJsdXIgY29weSBjdXQgcGFzdGUnLnNwbGl0KCcgJyksCiAgZnVuY3Rpb24obmFtZSkgewogICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBuYW1lKTsKICAgIG5nRXZlbnREaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICByZXN0cmljdDogJ0EnLAogICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKCRlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cltkaXJlY3RpdmVOYW1lXSk7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdFdmVudEhhbmRsZXIoc2NvcGUsIGVsZW1lbnQpIHsKICAgICAgICAgICAgZWxlbWVudC5vbihsb3dlcmNhc2UobmFtZSksIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZm4oc2NvcGUsIHskZXZlbnQ6ZXZlbnR9KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgfTsKICAgIH1dOwogIH0KKTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nRGJsY2xpY2sKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdEYmxjbGlja2AgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYSBkYmxjbGljayBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdEYmxjbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGEgZGJsY2xpY2suIChUaGUgRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxidXR0b24gbmctZGJsY2xpY2s9ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4KICAgICAgICBJbmNyZW1lbnQgKG9uIGRvdWJsZSBjbGljaykKICAgICAgPC9idXR0b24+CiAgICAgIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdNb3VzZWRvd24KICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBuZ01vdXNlZG93biBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWRvd24gZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vkb3duIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2Vkb3duLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxidXR0b24gbmctbW91c2Vkb3duPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50IChvbiBtb3VzZSBkb3duKQogICAgICA8L2J1dHRvbj4KICAgICAgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ01vdXNldXAKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNldXAgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2V1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIG1vdXNldXAuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGJ1dHRvbiBuZy1tb3VzZXVwPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50IChvbiBtb3VzZSB1cCkKICAgICAgPC9idXR0b24+CiAgICAgIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ01vdXNlb3ZlcgogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VvdmVyIGV2ZW50LgogKgogKiBAZWxlbWVudCBBTlkKICogQHByaW9yaXR5IDAKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlb3ZlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIG1vdXNlb3Zlci4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8YnV0dG9uIG5nLW1vdXNlb3Zlcj0iY291bnQgPSBjb3VudCArIDEiIG5nLWluaXQ9ImNvdW50PTAiPgogICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBpcyBvdmVyKQogICAgICA8L2J1dHRvbj4KICAgICAgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ01vdXNlZW50ZXIKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlZW50ZXIgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VlbnRlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIG1vdXNlZW50ZXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGJ1dHRvbiBuZy1tb3VzZWVudGVyPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIGVudGVycykKICAgICAgPC9idXR0b24+CiAgICAgIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdNb3VzZWxlYXZlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWxlYXZlIGV2ZW50LgogKgogKiBAZWxlbWVudCBBTlkKICogQHByaW9yaXR5IDAKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlbGVhdmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBtb3VzZWxlYXZlLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxidXR0b24gbmctbW91c2VsZWF2ZT0iY291bnQgPSBjb3VudCArIDEiIG5nLWluaXQ9ImNvdW50PTAiPgogICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBsZWF2ZXMpCiAgICAgIDwvYnV0dG9uPgogICAgICBjb3VudDoge3tjb3VudH19CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nTW91c2Vtb3ZlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW1vdmUgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vtb3ZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2Vtb3ZlLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxidXR0b24gbmctbW91c2Vtb3ZlPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIG1vdmVzKQogICAgICA8L2J1dHRvbj4KICAgICAgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0tleWRvd24KICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleWRvd24gZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5ZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGtleWRvd24uIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8aW5wdXQgbmcta2V5ZG93bj0iY291bnQgPSBjb3VudCArIDEiIG5nLWluaXQ9ImNvdW50PTAiPgogICAgICBrZXkgZG93biBjb3VudDoge3tjb3VudH19CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nS2V5dXAKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXVwIGV2ZW50LgogKgogKiBAZWxlbWVudCBBTlkKICogQHByaW9yaXR5IDAKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0tleXVwIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICoga2V5dXAuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5IGNvdW50PC9wPgogICAgICAgPGlucHV0IG5nLWtleXVwPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+IGtleSB1cCBjb3VudDoge3tjb3VudH19CgogICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5Y29kZTwvcD4KICAgICAgIDxpbnB1dCBuZy1rZXl1cD0iZXZlbnQ9JGV2ZW50Ij4KICAgICAgIDxwPmV2ZW50IGtleUNvZGU6IHt7IGV2ZW50LmtleUNvZGUgfX08L3A+CiAgICAgICA8cD5ldmVudCBhbHRLZXk6IHt7IGV2ZW50LmFsdEtleSB9fTwvcD4KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdLZXlwcmVzcwogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5cHJlc3MgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5cHJlc3Mge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBrZXlwcmVzcy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0KICogYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLikKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxpbnB1dCBuZy1rZXlwcmVzcz0iY291bnQgPSBjb3VudCArIDEiIG5nLWluaXQ9ImNvdW50PTAiPgogICAgICBrZXkgcHJlc3MgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1N1Ym1pdAogKgogKiBAZGVzY3JpcHRpb24KICogRW5hYmxlcyBiaW5kaW5nIGFuZ3VsYXIgZXhwcmVzc2lvbnMgdG8gb25zdWJtaXQgZXZlbnRzLgogKgogKiBBZGRpdGlvbmFsbHkgaXQgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uICh3aGljaCBmb3IgZm9ybSBtZWFucyBzZW5kaW5nIHRoZSByZXF1ZXN0IHRvIHRoZQogKiBzZXJ2ZXIgYW5kIHJlbG9hZGluZyB0aGUgY3VycmVudCBwYWdlKSwgYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBgYWN0aW9uYCwKICogYGRhdGEtYWN0aW9uYCwgb3IgYHgtYWN0aW9uYCBhdHRyaWJ1dGVzLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC13YXJuaW5nIj4KICogKipXYXJuaW5nOioqIEJlIGNhcmVmdWwgbm90IHRvIGNhdXNlICJkb3VibGUtc3VibWlzc2lvbiIgYnkgdXNpbmcgYm90aCB0aGUgYG5nQ2xpY2tgIGFuZAogKiBgbmdTdWJtaXRgIGhhbmRsZXJzIHRvZ2V0aGVyLiBTZWUgdGhlCiAqIHtAbGluayBmb3JtI3N1Ym1pdHRpbmctYS1mb3JtLWFuZC1wcmV2ZW50aW5nLXRoZS1kZWZhdWx0LWFjdGlvbiBgZm9ybWAgZGlyZWN0aXZlIGRvY3VtZW50YXRpb259CiAqIGZvciBhIGRldGFpbGVkIGRpc2N1c3Npb24gb2Ygd2hlbiBgbmdTdWJtaXRgIG1heSBiZSB0cmlnZ2VyZWQuCiAqIDwvZGl2PgogKgogKiBAZWxlbWVudCBmb3JtCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTdWJtaXQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4KICogKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlIG1vZHVsZT0ic3VibWl0RXhhbXBsZSI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxzY3JpcHQ+CiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3N1Ym1pdEV4YW1wbGUnLCBbXSkKICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICRzY29wZS5saXN0ID0gW107CiAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ2hlbGxvJzsKICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGlmICgkc2NvcGUudGV4dCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHVzaCh0aGlzLnRleHQpOwogICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnJzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICB9XSk7CiAgICAgIDwvc2NyaXB0PgogICAgICA8Zm9ybSBuZy1zdWJtaXQ9InN1Ym1pdCgpIiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgRW50ZXIgdGV4dCBhbmQgaGl0IGVudGVyOgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0idGV4dCIgbmFtZT0idGV4dCIgLz4KICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBpZD0ic3VibWl0IiB2YWx1ZT0iU3VibWl0IiAvPgogICAgICAgIDxwcmU+bGlzdD17e2xpc3R9fTwvcHJlPgogICAgICA8L2Zvcm0+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zdWJtaXQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3Q9W10nKTsKICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQ29udGFpbignaGVsbG8nKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCcnKTsKICAgICAgIH0pOwogICAgICAgaXQoJ3Nob3VsZCBpZ25vcmUgZW1wdHkgc3RyaW5ncycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpOwogICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpOwogICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpOwogICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nRm9jdXMKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGZvY3VzIGV2ZW50LgogKgogKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdGb2N1cyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGZvY3VzLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfQogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nQmx1cgogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYmx1ciBldmVudC4KICoKICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYQogKiBAcHJpb3JpdHkgMAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmx1ciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGJsdXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KQogKgogKiBAZXhhbXBsZQogKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9CiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdDb3B5CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBjb3B5IGV2ZW50LgogKgogKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb3B5IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogY29weS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8aW5wdXQgbmctY29weT0iY29waWVkPXRydWUiIG5nLWluaXQ9ImNvcGllZD1mYWxzZTsgdmFsdWU9J2NvcHkgbWUnIiBuZy1tb2RlbD0idmFsdWUiPgogICAgICBjb3BpZWQ6IHt7Y29waWVkfX0KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0N1dAogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gY3V0IGV2ZW50LgogKgogKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDdXQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBjdXQuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KQogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGlucHV0IG5nLWN1dD0iY3V0PXRydWUiIG5nLWluaXQ9ImN1dD1mYWxzZTsgdmFsdWU9J2N1dCBtZSciIG5nLW1vZGVsPSJ2YWx1ZSI+CiAgICAgIGN1dDoge3tjdXR9fQogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nUGFzdGUKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIHBhc3RlIGV2ZW50LgogKgogKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhCiAqIEBwcmlvcml0eSAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdQYXN0ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIHBhc3RlLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxpbnB1dCBuZy1wYXN0ZT0icGFzdGU9dHJ1ZSIgbmctaW5pdD0icGFzdGU9ZmFsc2UiIHBsYWNlaG9sZGVyPSdwYXN0ZSBoZXJlJz4KICAgICAgcGFzdGVkOiB7e3Bhc3RlfX0KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0lmCiAqIEByZXN0cmljdCBBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nSWZgIGRpcmVjdGl2ZSByZW1vdmVzIG9yIHJlY3JlYXRlcyBhIHBvcnRpb24gb2YgdGhlIERPTSB0cmVlIGJhc2VkIG9uIGFuCiAqIHtleHByZXNzaW9ufS4gSWYgdGhlIGV4cHJlc3Npb24gYXNzaWduZWQgdG8gYG5nSWZgIGV2YWx1YXRlcyB0byBhIGZhbHNlCiAqIHZhbHVlIHRoZW4gdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00sIG90aGVyd2lzZSBhIGNsb25lIG9mIHRoZQogKiBlbGVtZW50IGlzIHJlaW5zZXJ0ZWQgaW50byB0aGUgRE9NLgogKgogKiBgbmdJZmAgZGlmZmVycyBmcm9tIGBuZ1Nob3dgIGFuZCBgbmdIaWRlYCBpbiB0aGF0IGBuZ0lmYCBjb21wbGV0ZWx5IHJlbW92ZXMgYW5kIHJlY3JlYXRlcyB0aGUKICogZWxlbWVudCBpbiB0aGUgRE9NIHJhdGhlciB0aGFuIGNoYW5naW5nIGl0cyB2aXNpYmlsaXR5IHZpYSB0aGUgYGRpc3BsYXlgIGNzcyBwcm9wZXJ0eS4gIEEgY29tbW9uCiAqIGNhc2Ugd2hlbiB0aGlzIGRpZmZlcmVuY2UgaXMgc2lnbmlmaWNhbnQgaXMgd2hlbiB1c2luZyBjc3Mgc2VsZWN0b3JzIHRoYXQgcmVseSBvbiBhbiBlbGVtZW50J3MKICogcG9zaXRpb24gd2l0aGluIHRoZSBET00sIHN1Y2ggYXMgdGhlIGA6Zmlyc3QtY2hpbGRgIG9yIGA6bGFzdC1jaGlsZGAgcHNldWRvLWNsYXNzZXMuCiAqCiAqIE5vdGUgdGhhdCB3aGVuIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCB1c2luZyBgbmdJZmAgaXRzIHNjb3BlIGlzIGRlc3Ryb3llZCBhbmQgYSBuZXcgc2NvcGUKICogaXMgY3JlYXRlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlc3RvcmVkLiAgVGhlIHNjb3BlIGNyZWF0ZWQgd2l0aGluIGBuZ0lmYCBpbmhlcml0cyBmcm9tCiAqIGl0cyBwYXJlbnQgc2NvcGUgdXNpbmcKICogW3Byb3RvdHlwYWwgaW5oZXJpdGFuY2VdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9UaGUtTnVhbmNlcy1vZi1TY29wZS1Qcm90b3R5cGFsLUluaGVyaXRhbmNlKS4KICogQW4gaW1wb3J0YW50IGltcGxpY2F0aW9uIG9mIHRoaXMgaXMgaWYgYG5nTW9kZWxgIGlzIHVzZWQgd2l0aGluIGBuZ0lmYCB0byBiaW5kIHRvCiAqIGEgamF2YXNjcmlwdCBwcmltaXRpdmUgZGVmaW5lZCBpbiB0aGUgcGFyZW50IHNjb3BlLiBJbiB0aGlzIGNhc2UgYW55IG1vZGlmaWNhdGlvbnMgbWFkZSB0byB0aGUKICogdmFyaWFibGUgd2l0aGluIHRoZSBjaGlsZCBzY29wZSB3aWxsIG92ZXJyaWRlIChoaWRlKSB0aGUgdmFsdWUgaW4gdGhlIHBhcmVudCBzY29wZS4KICoKICogQWxzbywgYG5nSWZgIHJlY3JlYXRlcyBlbGVtZW50cyB1c2luZyB0aGVpciBjb21waWxlZCBzdGF0ZS4gQW4gZXhhbXBsZSBvZiB0aGlzIGJlaGF2aW9yCiAqIGlzIGlmIGFuIGVsZW1lbnQncyBjbGFzcyBhdHRyaWJ1dGUgaXMgZGlyZWN0bHkgbW9kaWZpZWQgYWZ0ZXIgaXQncyBjb21waWxlZCwgdXNpbmcgc29tZXRoaW5nIGxpa2UKICogalF1ZXJ5J3MgYC5hZGRDbGFzcygpYCBtZXRob2QsIGFuZCB0aGUgZWxlbWVudCBpcyBsYXRlciByZW1vdmVkLiBXaGVuIGBuZ0lmYCByZWNyZWF0ZXMgdGhlIGVsZW1lbnQKICogdGhlIGFkZGVkIGNsYXNzIHdpbGwgYmUgbG9zdCBiZWNhdXNlIHRoZSBvcmlnaW5hbCBjb21waWxlZCBzdGF0ZSBpcyB1c2VkIHRvIHJlZ2VuZXJhdGUgdGhlIGVsZW1lbnQuCiAqCiAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBwcm92aWRlIGFuaW1hdGlvbnMgdmlhIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgdG8gYW5pbWF0ZSB0aGUgYGVudGVyYAogKiBhbmQgYGxlYXZlYCBlZmZlY3RzLgogKgogKiBAYW5pbWF0aW9ucwogKiBlbnRlciAtIGhhcHBlbnMganVzdCBhZnRlciB0aGUgbmdJZiBjb250ZW50cyBjaGFuZ2UgYW5kIGEgbmV3IERPTSBlbGVtZW50IGlzIGNyZWF0ZWQgYW5kIGluamVjdGVkIGludG8gdGhlIG5nSWYgY29udGFpbmVyCiAqIGxlYXZlIC0gaGFwcGVucyBqdXN0IGJlZm9yZSB0aGUgbmdJZiBjb250ZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBET00KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBzY29wZQogKiBAcHJpb3JpdHkgNjAwCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJZiBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgZmFsc3kgdGhlbgogKiAgICAgdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdHJlZS4gSWYgaXQgaXMgdHJ1dGh5IGEgY29weSBvZiB0aGUgY29tcGlsZWQKICogICAgIGVsZW1lbnQgaXMgYWRkZWQgdG8gdGhlIERPTSB0cmVlLgogKgogKiBAZXhhbXBsZQogIDxleGFtcGxlIG1vZHVsZT0ibmdBbmltYXRlIiBkZXBzPSJhbmd1bGFyLWFuaW1hdGUuanMiIGFuaW1hdGlvbnM9InRydWUiPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIiBuZy1pbml0PSJjaGVja2VkPXRydWUiIC8+PGJyLz4KICAgICAgU2hvdyB3aGVuIGNoZWNrZWQ6CiAgICAgIDxzcGFuIG5nLWlmPSJjaGVja2VkIiBjbGFzcz0iYW5pbWF0ZS1pZiI+CiAgICAgICAgSSdtIHJlbW92ZWQgd2hlbiB0aGUgY2hlY2tib3ggaXMgdW5jaGVja2VkLgogICAgICA8L3NwYW4+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJhbmltYXRpb25zLmNzcyI+CiAgICAgIC5hbmltYXRlLWlmIHsKICAgICAgICBiYWNrZ3JvdW5kOndoaXRlOwogICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7CiAgICAgICAgcGFkZGluZzoxMHB4OwogICAgICB9CgogICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlciwgLmFuaW1hdGUtaWYubmctbGVhdmUgewogICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzOwogICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41czsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIsCiAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7CiAgICAgICAgb3BhY2l0eTowOwogICAgICB9CgogICAgICAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSwKICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHsKICAgICAgICBvcGFjaXR5OjE7CiAgICAgIH0KICAgIDwvZmlsZT4KICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdJZkRpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkgewogIHJldHVybiB7CiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsCiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsCiAgICBwcmlvcml0eTogNjAwLAogICAgdGVybWluYWw6IHRydWUsCiAgICByZXN0cmljdDogJ0EnLAogICAgJCR0bGI6IHRydWUsCiAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7CiAgICAgICAgdmFyIGJsb2NrLCBjaGlsZFNjb3BlLCBwcmV2aW91c0VsZW1lbnRzOwogICAgICAgICRzY29wZS4kd2F0Y2goJGF0dHIubmdJZiwgZnVuY3Rpb24gbmdJZldhdGNoQWN0aW9uKHZhbHVlKSB7CgogICAgICAgICAgaWYgKHZhbHVlKSB7CiAgICAgICAgICAgIGlmICghY2hpbGRTY29wZSkgewogICAgICAgICAgICAgICR0cmFuc2NsdWRlKGZ1bmN0aW9uIChjbG9uZSwgbmV3U2NvcGUpIHsKICAgICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBuZXdTY29wZTsKICAgICAgICAgICAgICAgIGNsb25lW2Nsb25lLmxlbmd0aCsrXSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyBlbmQgbmdJZjogJyArICRhdHRyLm5nSWYgKyAnICcpOwogICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy4KICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBqcWxpdGUgd3JhcHBlciBhcyBpdCBtaWdodCBiZSBjaGFuZ2VkIGxhdGVyCiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuCiAgICAgICAgICAgICAgICBibG9jayA9IHsKICAgICAgICAgICAgICAgICAgY2xvbmU6IGNsb25lCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsICRlbGVtZW50LnBhcmVudCgpLCAkZWxlbWVudCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmKHByZXZpb3VzRWxlbWVudHMpIHsKICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzLnJlbW92ZSgpOwogICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKGNoaWxkU2NvcGUpIHsKICAgICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7CiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoYmxvY2spIHsKICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSk7CiAgICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUocHJldmlvdXNFbGVtZW50cywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gbnVsbDsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBibG9jayA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICB9Owp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nSW5jbHVkZQogKiBAcmVzdHJpY3QgRUNBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBGZXRjaGVzLCBjb21waWxlcyBhbmQgaW5jbHVkZXMgYW4gZXh0ZXJuYWwgSFRNTCBmcmFnbWVudC4KICoKICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIFVSTCBpcyByZXN0cmljdGVkIHRvIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlCiAqIGFwcGxpY2F0aW9uIGRvY3VtZW50LiBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmwKICogJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9IG9uIGl0LiBUbyBsb2FkIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgcHJvdG9jb2xzCiAqIHlvdSBtYXkgZWl0aGVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3QgdGhlbX0gb3IKICogW3dyYXAgdGhlbV0obmcuJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmwpIGFzIHRydXN0ZWQgdmFsdWVzLiBSZWZlciB0byBBbmd1bGFyJ3Mge0BsaW5rCiAqIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmd9LgogKgogKiBJbiBhZGRpdGlvbiwgdGhlIGJyb3dzZXIncwogKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KQogKiBhbmQgW0Nyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIChDT1JTKV0oaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8pCiAqIHBvbGljeSBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkLgogKiBGb3IgZXhhbXBsZSwgYG5nSW5jbHVkZWAgd29uJ3Qgd29yayBmb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzIG9uIGFsbCBicm93c2VycyBhbmQgZm9yIGBmaWxlOi8vYAogKiBhY2Nlc3Mgb24gc29tZSBicm93c2Vycy4KICoKICogQGFuaW1hdGlvbnMKICogZW50ZXIgLSBhbmltYXRpb24gaXMgdXNlZCB0byBicmluZyBuZXcgY29udGVudCBpbnRvIHRoZSBicm93c2VyLgogKiBsZWF2ZSAtIGFuaW1hdGlvbiBpcyB1c2VkIHRvIGFuaW1hdGUgZXhpc3RpbmcgY29udGVudCBhd2F5LgogKgogKiBUaGUgZW50ZXIgYW5kIGxlYXZlIGFuaW1hdGlvbiBvY2N1ciBjb25jdXJyZW50bHkuCiAqCiAqIEBzY29wZQogKiBAcHJpb3JpdHkgNDAwCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0luY2x1ZGV8c3JjIGFuZ3VsYXIgZXhwcmVzc2lvbiBldmFsdWF0aW5nIHRvIFVSTC4gSWYgdGhlIHNvdXJjZSBpcyBhIHN0cmluZyBjb25zdGFudCwKICogICAgICAgICAgICAgICAgIG1ha2Ugc3VyZSB5b3Ugd3JhcCBpdCBpbiAqKnNpbmdsZSoqIHF1b3RlcywgZS5nLiBgc3JjPSInbXlQYXJ0aWFsVGVtcGxhdGUuaHRtbCciYC4KICogQHBhcmFtIHtzdHJpbmc9fSBvbmxvYWQgRXhwcmVzc2lvbiB0byBldmFsdWF0ZSB3aGVuIGEgbmV3IHBhcnRpYWwgaXMgbG9hZGVkLgogKgogKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgV2hldGhlciBgbmdJbmNsdWRlYCBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbAogKiAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGx9IHRvIHNjcm9sbCB0aGUgdmlld3BvcnQgYWZ0ZXIgdGhlIGNvbnRlbnQgaXMgbG9hZGVkLgogKgogKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCBkaXNhYmxlIHNjcm9sbGluZy4KICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgc2V0IHdpdGhvdXQgdmFsdWUsIGVuYWJsZSBzY3JvbGxpbmcuCiAqICAgICAgICAgICAgICAgICAgLSBPdGhlcndpc2UgZW5hYmxlIHNjcm9sbGluZyBvbmx5IGlmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnV0aHkgdmFsdWUuCiAqCiAqIEBleGFtcGxlCiAgPGV4YW1wbGUgbW9kdWxlPSJpbmNsdWRlRXhhbXBsZSIgZGVwcz0iYW5ndWxhci1hbmltYXRlLmpzIiBhbmltYXRpb25zPSJ0cnVlIj4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgIDxkaXYgbmctY29udHJvbGxlcj0iRXhhbXBsZUNvbnRyb2xsZXIiPgogICAgICAgPHNlbGVjdCBuZy1tb2RlbD0idGVtcGxhdGUiIG5nLW9wdGlvbnM9InQubmFtZSBmb3IgdCBpbiB0ZW1wbGF0ZXMiPgogICAgICAgIDxvcHRpb24gdmFsdWU9IiI+KGJsYW5rKTwvb3B0aW9uPgogICAgICAgPC9zZWxlY3Q+CiAgICAgICB1cmwgb2YgdGhlIHRlbXBsYXRlOiA8dHQ+e3t0ZW1wbGF0ZS51cmx9fTwvdHQ+CiAgICAgICA8aHIvPgogICAgICAgPGRpdiBjbGFzcz0ic2xpZGUtYW5pbWF0ZS1jb250YWluZXIiPgogICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZS1hbmltYXRlIiBuZy1pbmNsdWRlPSJ0ZW1wbGF0ZS51cmwiPjwvZGl2PgogICAgICAgPC9kaXY+CiAgICAgPC9kaXY+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICBhbmd1bGFyLm1vZHVsZSgnaW5jbHVkZUV4YW1wbGUnLCBbJ25nQW5pbWF0ZSddKQogICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAkc2NvcGUudGVtcGxhdGVzID0KICAgICAgICAgICAgWyB7IG5hbWU6ICd0ZW1wbGF0ZTEuaHRtbCcsIHVybDogJ3RlbXBsYXRlMS5odG1sJ30sCiAgICAgICAgICAgICAgeyBuYW1lOiAndGVtcGxhdGUyLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTIuaHRtbCd9IF07CiAgICAgICAgICAkc2NvcGUudGVtcGxhdGUgPSAkc2NvcGUudGVtcGxhdGVzWzBdOwogICAgICAgIH1dKTsKICAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJ0ZW1wbGF0ZTEuaHRtbCI+CiAgICAgIENvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWwKICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InRlbXBsYXRlMi5odG1sIj4KICAgICAgQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbAogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iYW5pbWF0aW9ucy5jc3MiPgogICAgICAuc2xpZGUtYW5pbWF0ZS1jb250YWluZXIgewogICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlOwogICAgICAgIGJhY2tncm91bmQ6d2hpdGU7CiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsKICAgICAgICBoZWlnaHQ6NDBweDsKICAgICAgICBvdmVyZmxvdzpoaWRkZW47CiAgICAgIH0KCiAgICAgIC5zbGlkZS1hbmltYXRlIHsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgIH0KCiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyLCAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZSB7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7CiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzOwoKICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTsKICAgICAgICB0b3A6MDsKICAgICAgICBsZWZ0OjA7CiAgICAgICAgcmlnaHQ6MDsKICAgICAgICBib3R0b206MDsKICAgICAgICBkaXNwbGF5OmJsb2NrOwogICAgICAgIHBhZGRpbmc6MTBweDsKICAgICAgfQoKICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIgewogICAgICAgIHRvcDotNTBweDsKICAgICAgfQogICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUgewogICAgICAgIHRvcDowOwogICAgICB9CgogICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZSB7CiAgICAgICAgdG9wOjA7CiAgICAgIH0KICAgICAgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHsKICAgICAgICB0b3A6NTBweDsKICAgICAgfQogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgIHZhciB0ZW1wbGF0ZVNlbGVjdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RlbXBsYXRlJykpOwogICAgICB2YXIgaW5jbHVkZUVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLWluY2x1ZGVdJykpOwoKICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMS5odG1sJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbC8pOwogICAgICB9KTsKCiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZTIuaHRtbCcsIGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdmaXJlZm94JykgewogICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0cwogICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MAogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5jbGljaygpOwogICAgICAgIHRlbXBsYXRlU2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMikuY2xpY2soKTsKICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMi5odG1sLyk7CiAgICAgIH0pOwoKICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnZmlyZWZveCcpIHsKICAgICAgICAgIC8vIEZpcmVmb3ggY2FuJ3QgaGFuZGxlIHVzaW5nIHNlbGVjdHMKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTsKICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDApLmNsaWNrKCk7CiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmlzUHJlc2VudCgpKS50b0JlKGZhbHNlKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgPC9leGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGV2ZW50CiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRSZXF1ZXN0ZWQKICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBzY29wZSBuZ0luY2x1ZGUgd2FzIGRlY2xhcmVkIGluCiAqIEBkZXNjcmlwdGlvbgogKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nSW5jbHVkZSBjb250ZW50IGlzIHJlcXVlc3RlZC4KICovCgoKLyoqCiAqIEBuZ2RvYyBldmVudAogKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50TG9hZGVkCiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgY3VycmVudCBuZ0luY2x1ZGUgc2NvcGUKICogQGRlc2NyaXB0aW9uCiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVsb2FkZWQuCiAqLwoKCi8qKgogKiBAbmdkb2MgZXZlbnQKICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudEVycm9yCiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpbgogKiBAZGVzY3JpcHRpb24KICogRW1pdHRlZCB3aGVuIGEgdGVtcGxhdGUgSFRUUCByZXF1ZXN0IHlpZWxkcyBhbiBlcnJvbm91cyByZXNwb25zZSAoc3RhdHVzIDwgMjAwIHx8IHN0YXR1cyA+IDI5OSkKICovCnZhciBuZ0luY2x1ZGVEaXJlY3RpdmUgPSBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRhbmNob3JTY3JvbGwnLCAnJGFuaW1hdGUnLCAnJHNjZScsCiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCRodHRwLCAgICR0ZW1wbGF0ZUNhY2hlLCAgICRhbmNob3JTY3JvbGwsICAgJGFuaW1hdGUsICAgJHNjZSkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0VDQScsCiAgICBwcmlvcml0eTogNDAwLAogICAgdGVybWluYWw6IHRydWUsCiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsCiAgICBjb250cm9sbGVyOiBhbmd1bGFyLm5vb3AsCiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICAgIHZhciBzcmNFeHAgPSBhdHRyLm5nSW5jbHVkZSB8fCBhdHRyLnNyYywKICAgICAgICAgIG9ubG9hZEV4cCA9IGF0dHIub25sb2FkIHx8ICcnLAogICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHIuYXV0b3Njcm9sbDsKCiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkgewogICAgICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMCwKICAgICAgICAgICAgY3VycmVudFNjb3BlLAogICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQsCiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50OwoKICAgICAgICB2YXIgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYocHJldmlvdXNFbGVtZW50KSB7CiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudC5yZW1vdmUoKTsKICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGN1cnJlbnRTY29wZSkgewogICAgICAgICAgICBjdXJyZW50U2NvcGUuJGRlc3Ryb3koKTsKICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGN1cnJlbnRFbGVtZW50KSB7CiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGN1cnJlbnRFbGVtZW50LCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gY3VycmVudEVsZW1lbnQ7CiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBzY29wZS4kd2F0Y2goJHNjZS5wYXJzZUFzUmVzb3VyY2VVcmwoc3JjRXhwKSwgZnVuY3Rpb24gbmdJbmNsdWRlV2F0Y2hBY3Rpb24oc3JjKSB7CiAgICAgICAgICB2YXIgYWZ0ZXJBbmltYXRpb24gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChhdXRvU2Nyb2xsRXhwKSAmJiAoIWF1dG9TY3JvbGxFeHAgfHwgc2NvcGUuJGV2YWwoYXV0b1Njcm9sbEV4cCkpKSB7CiAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIHRoaXNDaGFuZ2VJZCA9ICsrY2hhbmdlQ291bnRlcjsKCiAgICAgICAgICBpZiAoc3JjKSB7CiAgICAgICAgICAgICRodHRwLmdldChzcmMsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCAhPT0gY2hhbmdlQ291bnRlcikgcmV0dXJuOwogICAgICAgICAgICAgIHZhciBuZXdTY29wZSA9IHNjb3BlLiRuZXcoKTsKICAgICAgICAgICAgICBjdHJsLnRlbXBsYXRlID0gcmVzcG9uc2U7CgogICAgICAgICAgICAgIC8vIE5vdGU6IFRoaXMgd2lsbCBhbHNvIGxpbmsgYWxsIGNoaWxkcmVuIG9mIG5nLWluY2x1ZGUgdGhhdCB3ZXJlIGNvbnRhaW5lZCBpbiB0aGUgb3JpZ2luYWwKICAgICAgICAgICAgICAvLyBodG1sLiBJZiB0aGF0IGNvbnRlbnQgY29udGFpbnMgY29udHJvbGxlcnMsIC4uLiB0aGV5IGNvdWxkIHBvbGx1dGUvY2hhbmdlIHRoZSBzY29wZS4KICAgICAgICAgICAgICAvLyBIb3dldmVyLCB1c2luZyBuZy1pbmNsdWRlIG9uIGFuIGVsZW1lbnQgd2l0aCBhZGRpdGlvbmFsIGNvbnRlbnQgZG9lcyBub3QgbWFrZSBzZW5zZS4uLgogICAgICAgICAgICAgIC8vIE5vdGU6IFdlIGNhbid0IHJlbW92ZSB0aGVtIGluIHRoZSBjbG9uZUF0dGNoRm4gb2YgJHRyYW5zY2x1ZGUgYXMgdGhhdAogICAgICAgICAgICAgIC8vIGZ1bmN0aW9uIGlzIGNhbGxlZCBiZWZvcmUgbGlua2luZyB0aGUgY29udGVudCwgd2hpY2ggd291bGQgYXBwbHkgY2hpbGQKICAgICAgICAgICAgICAvLyBkaXJlY3RpdmVzIHRvIG5vbiBleGlzdGluZyBlbGVtZW50cy4KICAgICAgICAgICAgICB2YXIgY2xvbmUgPSAkdHJhbnNjbHVkZShuZXdTY29wZSwgZnVuY3Rpb24oY2xvbmUpIHsKICAgICAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTsKICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCAkZWxlbWVudCwgYWZ0ZXJBbmltYXRpb24pOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBuZXdTY29wZTsKICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGNsb25lOwoKICAgICAgICAgICAgICBjdXJyZW50U2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudExvYWRlZCcpOwogICAgICAgICAgICAgIHNjb3BlLiRldmFsKG9ubG9hZEV4cCk7CiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgPT09IGNoYW5nZUNvdW50ZXIpIHsKICAgICAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTsKICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRFcnJvcicpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRSZXF1ZXN0ZWQnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTsKICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfTsKfV07CgovLyBUaGlzIGRpcmVjdGl2ZSBpcyBjYWxsZWQgZHVyaW5nIHRoZSAkdHJhbnNjbHVkZSBjYWxsIG9mIHRoZSBmaXJzdCBgbmdJbmNsdWRlYCBkaXJlY3RpdmUuCi8vIEl0IHdpbGwgcmVwbGFjZSBhbmQgY29tcGlsZSB0aGUgY29udGVudCBvZiB0aGUgZWxlbWVudCB3aXRoIHRoZSBsb2FkZWQgdGVtcGxhdGUuCi8vIFdlIG5lZWQgdGhpcyBkaXJlY3RpdmUgc28gdGhhdCB0aGUgZWxlbWVudCBjb250ZW50IGlzIGFscmVhZHkgZmlsbGVkIHdoZW4KLy8gdGhlIGxpbmsgZnVuY3Rpb24gb2YgYW5vdGhlciBkaXJlY3RpdmUgb24gdGhlIHNhbWUgZWxlbWVudCBhcyBuZ0luY2x1ZGUKLy8gaXMgY2FsbGVkLgp2YXIgbmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUgPSBbJyRjb21waWxlJywKICBmdW5jdGlvbigkY29tcGlsZSkgewogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdFQ0EnLAogICAgICBwcmlvcml0eTogLTQwMCwKICAgICAgcmVxdWlyZTogJ25nSW5jbHVkZScsCiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwpIHsKICAgICAgICAkZWxlbWVudC5odG1sKGN0cmwudGVtcGxhdGUpOwogICAgICAgICRjb21waWxlKCRlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTsKICAgICAgfQogICAgfTsKICB9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nSW5pdAogKiBAcmVzdHJpY3QgQUMKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdJbml0YCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBldmFsdWF0ZSBhbiBleHByZXNzaW9uIGluIHRoZQogKiBjdXJyZW50IHNjb3BlLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1lcnJvciI+CiAqIFRoZSBvbmx5IGFwcHJvcHJpYXRlIHVzZSBvZiBgbmdJbml0YCBpcyBmb3IgYWxpYXNpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzIG9mCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgYG5nUmVwZWF0YH0sIGFzIHNlZW4gaW4gdGhlIGRlbW8gYmVsb3cuIEJlc2lkZXMgdGhpcyBjYXNlLCB5b3UKICogc2hvdWxkIHVzZSB7QGxpbmsgZ3VpZGUvY29udHJvbGxlciBjb250cm9sbGVyc30gcmF0aGVyIHRoYW4gYG5nSW5pdGAKICogdG8gaW5pdGlhbGl6ZSB2YWx1ZXMgb24gYSBzY29wZS4KICogPC9kaXY+CiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKk5vdGUqKjogSWYgeW91IGhhdmUgYXNzaWdubWVudCBpbiBgbmdJbml0YCBhbG9uZyB3aXRoIHtAbGluayBuZy4kZmlsdGVyIGAkZmlsdGVyYH0sIG1ha2UKICogc3VyZSB5b3UgaGF2ZSBwYXJlbnRoZXNpcyBmb3IgY29ycmVjdCBwcmVjZWRlbmNlOgogKiA8cHJlIGNsYXNzPSJwcmV0dHlwcmludCI+CiAqICAgPGRpdiBuZy1pbml0PSJ0ZXN0MSA9IChkYXRhIHwgb3JkZXJCeTonbmFtZScpIj48L2Rpdj4KICogPC9wcmU+CiAqIDwvZGl2PgogKgogKiBAcHJpb3JpdHkgNDUwCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSW5pdCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZSBtb2R1bGU9ImluaXRFeGFtcGxlIj4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgPHNjcmlwdD4KICAgICBhbmd1bGFyLm1vZHVsZSgnaW5pdEV4YW1wbGUnLCBbXSkKICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICRzY29wZS5saXN0ID0gW1snYScsICdiJ10sIFsnYycsICdkJ11dOwogICAgICAgfV0pOwogICA8L3NjcmlwdD4KICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgPGRpdiBuZy1yZXBlYXQ9ImlubmVyTGlzdCBpbiBsaXN0IiBuZy1pbml0PSJvdXRlckluZGV4ID0gJGluZGV4Ij4KICAgICAgIDxkaXYgbmctcmVwZWF0PSJ2YWx1ZSBpbiBpbm5lckxpc3QiIG5nLWluaXQ9ImlubmVySW5kZXggPSAkaW5kZXgiPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImV4YW1wbGUtaW5pdCI+bGlzdFsge3tvdXRlckluZGV4fX0gXVsge3tpbm5lckluZGV4fX0gXSA9IHt7dmFsdWV9fTs8L3NwYW4+CiAgICAgICA8L2Rpdj4KICAgICA8L2Rpdj4KICAgPC9kaXY+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgaXQoJ3Nob3VsZCBhbGlhcyBpbmRleCBwb3NpdGlvbnMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgdmFyIGVsZW1lbnRzID0gZWxlbWVudC5hbGwoYnkuY3NzKCcuZXhhbXBsZS1pbml0JykpOwogICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAwIF0gPSBhOycpOwogICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDEpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAxIF0gPSBiOycpOwogICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAwIF0gPSBjOycpOwogICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDMpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAxIF0gPSBkOycpOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdJbml0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIHByaW9yaXR5OiA0NTAsCiAgY29tcGlsZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykgewogICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nSW5pdCk7CiAgICAgIH0KICAgIH07CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nTm9uQmluZGFibGUKICogQHJlc3RyaWN0IEFDCiAqIEBwcmlvcml0eSAxMDAwCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nTm9uQmluZGFibGVgIGRpcmVjdGl2ZSB0ZWxscyBBbmd1bGFyIG5vdCB0byBjb21waWxlIG9yIGJpbmQgdGhlIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50CiAqIERPTSBlbGVtZW50LiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgZWxlbWVudCBjb250YWlucyB3aGF0IGFwcGVhcnMgdG8gYmUgQW5ndWxhciBkaXJlY3RpdmVzIGFuZAogKiBiaW5kaW5ncyBidXQgd2hpY2ggc2hvdWxkIGJlIGlnbm9yZWQgYnkgQW5ndWxhci4gVGhpcyBjb3VsZCBiZSB0aGUgY2FzZSBpZiB5b3UgaGF2ZSBhIHNpdGUgdGhhdAogKiBkaXNwbGF5cyBzbmlwcGV0cyBvZiBjb2RlLCBmb3IgaW5zdGFuY2UuCiAqCiAqIEBlbGVtZW50IEFOWQogKgogKiBAZXhhbXBsZQogKiBJbiB0aGlzIGV4YW1wbGUgdGhlcmUgYXJlIHR3byBsb2NhdGlvbnMgd2hlcmUgYSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiaW5kaW5nIChge3t9fWApIGlzIHByZXNlbnQsCiAqIGJ1dCB0aGUgb25lIHdyYXBwZWQgaW4gYG5nTm9uQmluZGFibGVgIGlzIGxlZnQgYWxvbmUuCiAqCiAqIEBleGFtcGxlCiAgICA8ZXhhbXBsZT4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPGRpdj5Ob3JtYWw6IHt7MSArIDJ9fTwvZGl2PgogICAgICAgIDxkaXYgbmctbm9uLWJpbmRhYmxlPklnbm9yZWQ6IHt7MSArIDJ9fTwvZGl2PgogICAgICA8L2ZpbGU+CiAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1ub24tYmluZGFibGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnMSArIDInKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzMnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnZGl2JykpLmxhc3QoKS5nZXRUZXh0KCkpLnRvTWF0Y2goLzEgXCsgMi8pOwogICAgICAgfSk7CiAgICAgIDwvZmlsZT4KICAgIDwvZXhhbXBsZT4KICovCnZhciBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoeyB0ZXJtaW5hbDogdHJ1ZSwgcHJpb3JpdHk6IDEwMDAgfSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1BsdXJhbGl6ZQogKiBAcmVzdHJpY3QgRUEKICoKICogQGRlc2NyaXB0aW9uCiAqIGBuZ1BsdXJhbGl6ZWAgaXMgYSBkaXJlY3RpdmUgdGhhdCBkaXNwbGF5cyBtZXNzYWdlcyBhY2NvcmRpbmcgdG8gZW4tVVMgbG9jYWxpemF0aW9uIHJ1bGVzLgogKiBUaGVzZSBydWxlcyBhcmUgYnVuZGxlZCB3aXRoIGFuZ3VsYXIuanMsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbgogKiAoc2VlIHtAbGluayBndWlkZS9pMThuIEFuZ3VsYXIgaTE4bn0gZGV2IGd1aWRlKS4gWW91IGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZSBkaXJlY3RpdmUKICogYnkgc3BlY2lmeWluZyB0aGUgbWFwcGluZ3MgYmV0d2VlbgogKiBbcGx1cmFsIGNhdGVnb3JpZXNdKGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcy9jbGRyLXRtcC90cnVuay9kaWZmL3N1cHBsZW1lbnRhbC9sYW5ndWFnZV9wbHVyYWxfcnVsZXMuaHRtbCkKICogYW5kIHRoZSBzdHJpbmdzIHRvIGJlIGRpc3BsYXllZC4KICoKICogIyBQbHVyYWwgY2F0ZWdvcmllcyBhbmQgZXhwbGljaXQgbnVtYmVyIHJ1bGVzCiAqIFRoZXJlIGFyZSB0d28KICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpCiAqIGluIEFuZ3VsYXIncyBkZWZhdWx0IGVuLVVTIGxvY2FsZTogIm9uZSIgYW5kICJvdGhlciIuCiAqCiAqIFdoaWxlIGEgcGx1cmFsIGNhdGVnb3J5IG1heSBtYXRjaCBtYW55IG51bWJlcnMgKGZvciBleGFtcGxlLCBpbiBlbi1VUyBsb2NhbGUsICJvdGhlciIgY2FuIG1hdGNoCiAqIGFueSBudW1iZXIgdGhhdCBpcyBub3QgMSksIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGNhbiBvbmx5IG1hdGNoIG9uZSBudW1iZXIuIEZvciBleGFtcGxlLCB0aGUKICogZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yICIzIiBtYXRjaGVzIHRoZSBudW1iZXIgMy4gVGhlcmUgYXJlIGV4YW1wbGVzIG9mIHBsdXJhbCBjYXRlZ29yaWVzCiAqIGFuZCBleHBsaWNpdCBudW1iZXIgcnVsZXMgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGlzIGRvY3VtZW50YXRpb24uCiAqCiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemUKICogWW91IGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZSBieSBwcm92aWRpbmcgMiBhdHRyaWJ1dGVzOiBgY291bnRgIGFuZCBgd2hlbmAuCiAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGF0dHJpYnV0ZSwgYG9mZnNldGAuCiAqCiAqIFRoZSB2YWx1ZSBvZiB0aGUgYGNvdW50YCBhdHRyaWJ1dGUgY2FuIGJlIGVpdGhlciBhIHN0cmluZyBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbgogKiBBbmd1bGFyIGV4cHJlc3Npb259OyB0aGVzZSBhcmUgZXZhbHVhdGVkIG9uIHRoZSBjdXJyZW50IHNjb3BlIGZvciBpdHMgYm91bmQgdmFsdWUuCiAqCiAqIFRoZSBgd2hlbmAgYXR0cmlidXRlIHNwZWNpZmllcyB0aGUgbWFwcGluZ3MgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcmllcyBhbmQgdGhlIGFjdHVhbAogKiBzdHJpbmcgdG8gYmUgZGlzcGxheWVkLiBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBzaG91bGQgYmUgYSBKU09OIG9iamVjdC4KICoKICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjb25maWd1cmUgbmdQbHVyYWxpemU6CiAqCiAqIGBgYGh0bWwKICogPG5nLXBsdXJhbGl6ZSBjb3VudD0icGVyc29uQ291bnQiCiAgICAgICAgICAgICAgICAgd2hlbj0ieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAnMSBwZXJzb24gaXMgdmlld2luZy4nLAogKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9Ij4KICogPC9uZy1wbHVyYWxpemU+CiAqYGBgCiAqCiAqIEluIHRoZSBleGFtcGxlLCBgIjA6IE5vYm9keSBpcyB2aWV3aW5nLiJgIGlzIGFuIGV4cGxpY2l0IG51bWJlciBydWxlLiBJZiB5b3UgZGlkIG5vdAogKiBzcGVjaWZ5IHRoaXMgcnVsZSwgMCB3b3VsZCBiZSBtYXRjaGVkIHRvIHRoZSAib3RoZXIiIGNhdGVnb3J5IGFuZCAiMCBwZW9wbGUgYXJlIHZpZXdpbmciCiAqIHdvdWxkIGJlIHNob3duIGluc3RlYWQgb2YgIk5vYm9keSBpcyB2aWV3aW5nIi4gWW91IGNhbiBzcGVjaWZ5IGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGZvcgogKiBvdGhlciBudW1iZXJzLCBmb3IgZXhhbXBsZSAxMiwgc28gdGhhdCBpbnN0ZWFkIG9mIHNob3dpbmcgIjEyIHBlb3BsZSBhcmUgdmlld2luZyIsIHlvdSBjYW4KICogc2hvdyAiYSBkb3plbiBwZW9wbGUgYXJlIHZpZXdpbmciLgogKgogKiBZb3UgY2FuIHVzZSBhIHNldCBvZiBjbG9zZWQgYnJhY2VzIChge31gKSBhcyBhIHBsYWNlaG9sZGVyIGZvciB0aGUgbnVtYmVyIHRoYXQgeW91IHdhbnQgc3Vic3RpdHV0ZWQKICogaW50byBwbHVyYWxpemVkIHN0cmluZ3MuIEluIHRoZSBwcmV2aW91cyBleGFtcGxlLCBBbmd1bGFyIHdpbGwgcmVwbGFjZSBge31gIHdpdGgKICogPHNwYW4gbmctbm9uLWJpbmRhYmxlPmB7e3BlcnNvbkNvdW50fX1gPC9zcGFuPi4gVGhlIGNsb3NlZCBicmFjZXMgYHt9YCBpcyBhIHBsYWNlaG9sZGVyCiAqIGZvciA8c3BhbiBuZy1ub24tYmluZGFibGU+e3tudW1iZXJFeHByZXNzaW9ufX08L3NwYW4+LgogKgogKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplIHdpdGggb2Zmc2V0CiAqIFRoZSBgb2Zmc2V0YCBhdHRyaWJ1dGUgYWxsb3dzIGZ1cnRoZXIgY3VzdG9taXphdGlvbiBvZiBwbHVyYWxpemVkIHRleHQsIHdoaWNoIGNhbiByZXN1bHQgaW4KICogYSBiZXR0ZXIgdXNlciBleHBlcmllbmNlLiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZiB0aGUgbWVzc2FnZSAiNCBwZW9wbGUgYXJlIHZpZXdpbmcgdGhpcyBkb2N1bWVudCIsCiAqIHlvdSBtaWdodCBkaXNwbGF5ICJKb2huLCBLYXRlIGFuZCAyIG90aGVycyBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50Ii4KICogVGhlIG9mZnNldCBhdHRyaWJ1dGUgYWxsb3dzIHlvdSB0byBvZmZzZXQgYSBudW1iZXIgYnkgYW55IGRlc2lyZWQgdmFsdWUuCiAqIExldCdzIHRha2UgYSBsb29rIGF0IGFuIGV4YW1wbGU6CiAqCiAqIGBgYGh0bWwKICogPG5nLXBsdXJhbGl6ZSBjb3VudD0icGVyc29uQ291bnQiIG9mZnNldD0yCiAqICAgICAgICAgICAgICAgd2hlbj0ieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICcxJzogJ3t7cGVyc29uMX19IGlzIHZpZXdpbmcuJywKICogICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsCiAqICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIHt9IG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nfSI+CiAqIDwvbmctcGx1cmFsaXplPgogKiBgYGAKICoKICogTm90aWNlIHRoYXQgd2UgYXJlIHN0aWxsIHVzaW5nIHR3byBwbHVyYWwgY2F0ZWdvcmllcyhvbmUsIG90aGVyKSwgYnV0IHdlIGFkZGVkCiAqIHRocmVlIGV4cGxpY2l0IG51bWJlciBydWxlcyAwLCAxIGFuZCAyLgogKiBXaGVuIG9uZSBwZXJzb24sIHBlcmhhcHMgSm9obiwgdmlld3MgdGhlIGRvY3VtZW50LCAiSm9obiBpcyB2aWV3aW5nIiB3aWxsIGJlIHNob3duLgogKiBXaGVuIHRocmVlIHBlb3BsZSB2aWV3IHRoZSBkb2N1bWVudCwgbm8gZXhwbGljaXQgbnVtYmVyIHJ1bGUgaXMgZm91bmQsIHNvCiAqIGFuIG9mZnNldCBvZiAyIGlzIHRha2VuIG9mZiAzLCBhbmQgQW5ndWxhciB1c2VzIDEgdG8gZGVjaWRlIHRoZSBwbHVyYWwgY2F0ZWdvcnkuCiAqIEluIHRoaXMgY2FzZSwgcGx1cmFsIGNhdGVnb3J5ICdvbmUnIGlzIG1hdGNoZWQgYW5kICJKb2huLCBNYXJ5IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nIgogKiBpcyBzaG93bi4KICoKICogTm90ZSB0aGF0IHdoZW4geW91IHNwZWNpZnkgb2Zmc2V0cywgeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yCiAqIG51bWJlcnMgZnJvbSAwIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIG9mZnNldC4gSWYgeW91IHVzZSBhbiBvZmZzZXQgb2YgMywgZm9yIGV4YW1wbGUsCiAqIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvciAwLCAxLCAyIGFuZCAzLiBZb3UgbXVzdCBhbHNvIHByb3ZpZGUgcGx1cmFsIHN0cmluZ3MgZm9yCiAqIHBsdXJhbCBjYXRlZ29yaWVzICJvbmUiIGFuZCAib3RoZXIiLgogKgogKiBAcGFyYW0ge3N0cmluZ3xleHByZXNzaW9ufSBjb3VudCBUaGUgdmFyaWFibGUgdG8gYmUgYm91bmQgdG8uCiAqIEBwYXJhbSB7c3RyaW5nfSB3aGVuIFRoZSBtYXBwaW5nIGJldHdlZW4gcGx1cmFsIGNhdGVnb3J5IHRvIGl0cyBjb3JyZXNwb25kaW5nIHN0cmluZ3MuCiAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBkZWR1Y3QgZnJvbSB0aGUgdG90YWwgbnVtYmVyLgogKgogKiBAZXhhbXBsZQogICAgPGV4YW1wbGUgbW9kdWxlPSJwbHVyYWxpemVFeGFtcGxlIj4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPHNjcmlwdD4KICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdwbHVyYWxpemVFeGFtcGxlJywgW10pCiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjEgPSAnSWdvcic7CiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjIgPSAnTWlza28nOwogICAgICAgICAgICAgICRzY29wZS5wZXJzb25Db3VudCA9IDE7CiAgICAgICAgICAgIH1dKTsKICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgIFBlcnNvbiAxOjxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0icGVyc29uMSIgdmFsdWU9Iklnb3IiIC8+PGJyLz4KICAgICAgICAgIFBlcnNvbiAyOjxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0icGVyc29uMiIgdmFsdWU9Ik1pc2tvIiAvPjxici8+CiAgICAgICAgICBOdW1iZXIgb2YgUGVvcGxlOjxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0icGVyc29uQ291bnQiIHZhbHVlPSIxIiAvPjxici8+CgogICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIHNpbXBsZSBwbHVyYWxpemF0aW9uIHJ1bGVzIGZvciBlbiBsb2NhbGUgLS0tPgogICAgICAgICAgV2l0aG91dCBPZmZzZXQ6CiAgICAgICAgICA8bmctcGx1cmFsaXplIGNvdW50PSJwZXJzb25Db3VudCIKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbj0ieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ30iPgogICAgICAgICAgPC9uZy1wbHVyYWxpemU+PGJyPgoKICAgICAgICAgIDwhLS0tIEV4YW1wbGUgd2l0aCBvZmZzZXQgLS0tPgogICAgICAgICAgV2l0aCBPZmZzZXQoMik6CiAgICAgICAgICA8bmctcGx1cmFsaXplIGNvdW50PSJwZXJzb25Db3VudCIgb2Zmc2V0PTIKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbj0ieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ30iPgogICAgICAgICAgPC9uZy1wbHVyYWxpemU+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZmlsZT4KICAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGNvcnJlY3QgcGx1cmFsaXplZCBzdHJpbmcnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciB3aXRob3V0T2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDApOwogICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7CiAgICAgICAgICB2YXIgY291bnRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbkNvdW50JykpOwoKICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMSBwZXJzb24gaXMgdmlld2luZy4nKTsKICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciBpcyB2aWV3aW5nLicpOwoKICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTsKICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzAnKTsKCiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpOwogICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdOb2JvZHkgaXMgdmlld2luZy4nKTsKCiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7CiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCcyJyk7CgogICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCcyIHBlb3BsZSBhcmUgdmlld2luZy4nKTsKICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciBhbmQgTWlza28gYXJlIHZpZXdpbmcuJyk7CgogICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpOwogICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMycpOwoKICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMyBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IsIE1pc2tvIGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicpOwoKICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTsKICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzQnKTsKCiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzQgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwogICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yLCBNaXNrbyBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgfSk7CiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGRhdGEtYm91bmQgbmFtZXMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciB3aXRoT2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDEpOwogICAgICAgICAgdmFyIHBlcnNvbkNvdW50ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7CiAgICAgICAgICB2YXIgcGVyc29uMSA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjEnKSk7CiAgICAgICAgICB2YXIgcGVyc29uMiA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjInKSk7CiAgICAgICAgICBwZXJzb25Db3VudC5jbGVhcigpOwogICAgICAgICAgcGVyc29uQ291bnQuc2VuZEtleXMoJzQnKTsKICAgICAgICAgIHBlcnNvbjEuY2xlYXIoKTsKICAgICAgICAgIHBlcnNvbjEuc2VuZEtleXMoJ0RpJyk7CiAgICAgICAgICBwZXJzb24yLmNsZWFyKCk7CiAgICAgICAgICBwZXJzb24yLnNlbmRLZXlzKCdWb2p0YScpOwogICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdEaSwgVm9qdGEgYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwogICAgICAgIH0pOwogICAgICA8L2ZpbGU+CiAgICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdQbHVyYWxpemVEaXJlY3RpdmUgPSBbJyRsb2NhbGUnLCAnJGludGVycG9sYXRlJywgZnVuY3Rpb24oJGxvY2FsZSwgJGludGVycG9sYXRlKSB7CiAgdmFyIEJSQUNFID0gL3t9L2c7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRUEnLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgdmFyIG51bWJlckV4cCA9IGF0dHIuY291bnQsCiAgICAgICAgICB3aGVuRXhwID0gYXR0ci4kYXR0ci53aGVuICYmIGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLndoZW4pLCAvLyB3ZSBoYXZlIHt7fX0gaW4gYXR0cnMKICAgICAgICAgIG9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDAsCiAgICAgICAgICB3aGVucyA9IHNjb3BlLiRldmFsKHdoZW5FeHApIHx8IHt9LAogICAgICAgICAgd2hlbnNFeHBGbnMgPSB7fSwKICAgICAgICAgIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksCiAgICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksCiAgICAgICAgICBpc1doZW4gPSAvXndoZW4oTWludXMpPyguKykkLzsKCiAgICAgIGZvckVhY2goYXR0ciwgZnVuY3Rpb24oZXhwcmVzc2lvbiwgYXR0cmlidXRlTmFtZSkgewogICAgICAgIGlmIChpc1doZW4udGVzdChhdHRyaWJ1dGVOYW1lKSkgewogICAgICAgICAgd2hlbnNbbG93ZXJjYXNlKGF0dHJpYnV0ZU5hbWUucmVwbGFjZSgnd2hlbicsICcnKS5yZXBsYWNlKCdNaW51cycsICctJykpXSA9CiAgICAgICAgICAgIGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyW2F0dHJpYnV0ZU5hbWVdKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBmb3JFYWNoKHdoZW5zLCBmdW5jdGlvbihleHByZXNzaW9uLCBrZXkpIHsKICAgICAgICB3aGVuc0V4cEZuc1trZXldID0KICAgICAgICAgICRpbnRlcnBvbGF0ZShleHByZXNzaW9uLnJlcGxhY2UoQlJBQ0UsIHN0YXJ0U3ltYm9sICsgbnVtYmVyRXhwICsgJy0nICsKICAgICAgICAgICAgb2Zmc2V0ICsgZW5kU3ltYm9sKSk7CiAgICAgIH0pOwoKICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2goKSB7CiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VGbG9hdChzY29wZS4kZXZhbChudW1iZXJFeHApKTsKCiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHsKICAgICAgICAgIC8vaWYgZXhwbGljaXQgbnVtYmVyIHJ1bGUgc3VjaCBhcyAxLCAyLCAzLi4uIGlzIGRlZmluZWQsIGp1c3QgdXNlIGl0LiBPdGhlcndpc2UsCiAgICAgICAgICAvL2NoZWNrIGl0IGFnYWluc3QgcGx1cmFsaXphdGlvbiBydWxlcyBpbiAkbG9jYWxlIHNlcnZpY2UKICAgICAgICAgIGlmICghKHZhbHVlIGluIHdoZW5zKSkgdmFsdWUgPSAkbG9jYWxlLnBsdXJhbENhdCh2YWx1ZSAtIG9mZnNldCk7CiAgICAgICAgICAgcmV0dXJuIHdoZW5zRXhwRm5zW3ZhbHVlXShzY29wZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2hBY3Rpb24obmV3VmFsKSB7CiAgICAgICAgZWxlbWVudC50ZXh0KG5ld1ZhbCk7CiAgICAgIH0pOwogICAgfQogIH07Cn1dOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdSZXBlYXQKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdSZXBlYXRgIGRpcmVjdGl2ZSBpbnN0YW50aWF0ZXMgYSB0ZW1wbGF0ZSBvbmNlIHBlciBpdGVtIGZyb20gYSBjb2xsZWN0aW9uLiBFYWNoIHRlbXBsYXRlCiAqIGluc3RhbmNlIGdldHMgaXRzIG93biBzY29wZSwgd2hlcmUgdGhlIGdpdmVuIGxvb3AgdmFyaWFibGUgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gaXRlbSwKICogYW5kIGAkaW5kZXhgIGlzIHNldCB0byB0aGUgaXRlbSBpbmRleCBvciBrZXkuCiAqCiAqIFNwZWNpYWwgcHJvcGVydGllcyBhcmUgZXhwb3NlZCBvbiB0aGUgbG9jYWwgc2NvcGUgb2YgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSwgaW5jbHVkaW5nOgogKgogKiB8IFZhcmlhYmxlICB8IFR5cGUgICAgICAgICAgICB8IERldGFpbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAqIHwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwKICogfCBgJGluZGV4YCAgfCB7QHR5cGUgbnVtYmVyfSAgfCBpdGVyYXRvciBvZmZzZXQgb2YgdGhlIHJlcGVhdGVkIGVsZW1lbnQgKDAuLmxlbmd0aC0xKSAgICAgICAgICAgICAgICAgICAgICAgfAogKiB8IGAkZmlyc3RgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgZmlyc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICB8CiAqIHwgYCRtaWRkbGVgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBpbiB0aGUgaXRlcmF0b3IuIHwKICogfCBgJGxhc3RgICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGxhc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICAgfAogKiB8IGAkZXZlbmAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIGl0ZXJhdG9yIHBvc2l0aW9uIGAkaW5kZXhgIGlzIGV2ZW4gKG90aGVyd2lzZSBmYWxzZSkuICAgICAgICAgICB8CiAqIHwgYCRvZGRgICAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgb2RkIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgIHwKICoKICogQ3JlYXRpbmcgYWxpYXNlcyBmb3IgdGhlc2UgcHJvcGVydGllcyBpcyBwb3NzaWJsZSB3aXRoIHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbml0IGBuZ0luaXRgfS4KICogVGhpcyBtYXkgYmUgdXNlZnVsIHdoZW4sIGZvciBpbnN0YW5jZSwgbmVzdGluZyBuZ1JlcGVhdHMuCiAqCiAqICMgU3BlY2lhbCByZXBlYXQgc3RhcnQgYW5kIGVuZCBwb2ludHMKICogVG8gcmVwZWF0IGEgc2VyaWVzIG9mIGVsZW1lbnRzIGluc3RlYWQgb2YganVzdCBvbmUgcGFyZW50IGVsZW1lbnQsIG5nUmVwZWF0IChhcyB3ZWxsIGFzIG90aGVyIG5nIGRpcmVjdGl2ZXMpIHN1cHBvcnRzIGV4dGVuZGluZwogKiB0aGUgcmFuZ2Ugb2YgdGhlIHJlcGVhdGVyIGJ5IGRlZmluaW5nIGV4cGxpY2l0IHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGJ5IHVzaW5nICoqbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmctcmVwZWF0LWVuZCoqIHJlc3BlY3RpdmVseS4KICogVGhlICoqbmctcmVwZWF0LXN0YXJ0KiogZGlyZWN0aXZlIHdvcmtzIHRoZSBzYW1lIGFzICoqbmctcmVwZWF0KiosIGJ1dCB3aWxsIHJlcGVhdCBhbGwgdGhlIEhUTUwgY29kZSAoaW5jbHVkaW5nIHRoZSB0YWcgaXQncyBkZWZpbmVkIG9uKQogKiB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBlbmRpbmcgSFRNTCB0YWcgd2hlcmUgKipuZy1yZXBlYXQtZW5kKiogaXMgcGxhY2VkLgogKgogKiBUaGUgZXhhbXBsZSBiZWxvdyBtYWtlcyB1c2Ugb2YgdGhpcyBmZWF0dXJlOgogKiBgYGBodG1sCiAqICAgPGhlYWRlciBuZy1yZXBlYXQtc3RhcnQ9Iml0ZW0gaW4gaXRlbXMiPgogKiAgICAgSGVhZGVyIHt7IGl0ZW0gfX0KICogICA8L2hlYWRlcj4KICogICA8ZGl2IGNsYXNzPSJib2R5Ij4KICogICAgIEJvZHkge3sgaXRlbSB9fQogKiAgIDwvZGl2PgogKiAgIDxmb290ZXIgbmctcmVwZWF0LWVuZD4KICogICAgIEZvb3RlciB7eyBpdGVtIH19CiAqICAgPC9mb290ZXI+CiAqIGBgYAogKgogKiBBbmQgd2l0aCBhbiBpbnB1dCBvZiB7QHR5cGUgWydBJywnQiddfSBmb3IgdGhlIGl0ZW1zIHZhcmlhYmxlIGluIHRoZSBleGFtcGxlIGFib3ZlLCB0aGUgb3V0cHV0IHdpbGwgZXZhbHVhdGUgdG86CiAqIGBgYGh0bWwKICogICA8aGVhZGVyPgogKiAgICAgSGVhZGVyIEEKICogICA8L2hlYWRlcj4KICogICA8ZGl2IGNsYXNzPSJib2R5Ij4KICogICAgIEJvZHkgQQogKiAgIDwvZGl2PgogKiAgIDxmb290ZXI+CiAqICAgICBGb290ZXIgQQogKiAgIDwvZm9vdGVyPgogKiAgIDxoZWFkZXI+CiAqICAgICBIZWFkZXIgQgogKiAgIDwvaGVhZGVyPgogKiAgIDxkaXYgY2xhc3M9ImJvZHkiPgogKiAgICAgQm9keSBCCiAqICAgPC9kaXY+CiAqICAgPGZvb3Rlcj4KICogICAgIEZvb3RlciBCCiAqICAgPC9mb290ZXI+CiAqIGBgYAogKgogKiBUaGUgY3VzdG9tIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGZvciBuZ1JlcGVhdCBhbHNvIHN1cHBvcnQgYWxsIG90aGVyIEhUTUwgZGlyZWN0aXZlIHN5bnRheCBmbGF2b3JzIHByb3ZpZGVkIGluIEFuZ3VsYXJKUyAoc3VjaAogKiBhcyAqKmRhdGEtbmctcmVwZWF0LXN0YXJ0KiosICoqeC1uZy1yZXBlYXQtc3RhcnQqKiBhbmQgKipuZzpyZXBlYXQtc3RhcnQqKikuCiAqCiAqIEBhbmltYXRpb25zCiAqICoqLmVudGVyKiogLSB3aGVuIGEgbmV3IGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGxpc3Qgb3Igd2hlbiBhbiBpdGVtIGlzIHJldmVhbGVkIGFmdGVyIGEgZmlsdGVyCiAqCiAqICoqLmxlYXZlKiogLSB3aGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyBmaWx0ZXJlZCBvdXQKICoKICogKioubW92ZSoqIC0gd2hlbiBhbiBhZGphY2VudCBpdGVtIGlzIGZpbHRlcmVkIG91dCBjYXVzaW5nIGEgcmVvcmRlciBvciB3aGVuIHRoZSBpdGVtIGNvbnRlbnRzIGFyZSByZW9yZGVyZWQKICoKICogQGVsZW1lbnQgQU5ZCiAqIEBzY29wZQogKiBAcHJpb3JpdHkgMTAwMAogKiBAcGFyYW0ge3JlcGVhdF9leHByZXNzaW9ufSBuZ1JlcGVhdCBUaGUgZXhwcmVzc2lvbiBpbmRpY2F0aW5nIGhvdyB0byBlbnVtZXJhdGUgYSBjb2xsZWN0aW9uLiBUaGVzZQogKiAgIGZvcm1hdHMgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQ6CiAqCiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIHZhcmlhYmxlIGlzIHRoZSB1c2VyIGRlZmluZWQgbG9vcCB2YXJpYWJsZSBhbmQgYGV4cHJlc3Npb25gCiAqICAgICBpcyBhIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS4KICoKICogICAgIEZvciBleGFtcGxlOiBgYWxidW0gaW4gYXJ0aXN0LmFsYnVtc2AuCiAqCiAqICAgKiBgKGtleSwgdmFsdWUpIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSBga2V5YCBhbmQgYHZhbHVlYCBjYW4gYmUgYW55IHVzZXIgZGVmaW5lZCBpZGVudGlmaWVycywKICogICAgIGFuZCBgZXhwcmVzc2lvbmAgaXMgdGhlIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS4KICoKICogICAgIEZvciBleGFtcGxlOiBgKG5hbWUsIGFnZSkgaW4geydhZGFtJzoxMCwgJ2FtYWxpZSc6MTJ9YC4KICoKICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uIHRyYWNrIGJ5IHRyYWNraW5nX2V4cHJlc3Npb25gIOKAkyBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCB0cmFja2luZyBmdW5jdGlvbgogKiAgICAgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXNzb2NpYXRlIHRoZSBvYmplY3RzIGluIHRoZSBjb2xsZWN0aW9uIHdpdGggdGhlIERPTSBlbGVtZW50cy4gSWYgbm8gdHJhY2tpbmcgZnVuY3Rpb24KICogICAgIGlzIHNwZWNpZmllZCB0aGUgbmctcmVwZWF0IGFzc29jaWF0ZXMgZWxlbWVudHMgYnkgaWRlbnRpdHkgaW4gdGhlIGNvbGxlY3Rpb24uIEl0IGlzIGFuIGVycm9yIHRvIGhhdmUKICogICAgIG1vcmUgdGhhbiBvbmUgdHJhY2tpbmcgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0byB0aGUgc2FtZSBrZXkuIChUaGlzIHdvdWxkIG1lYW4gdGhhdCB0d28gZGlzdGluY3Qgb2JqZWN0cyBhcmUKICogICAgIG1hcHBlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudCwgd2hpY2ggaXMgbm90IHBvc3NpYmxlLikgIEZpbHRlcnMgc2hvdWxkIGJlIGFwcGxpZWQgdG8gdGhlIGV4cHJlc3Npb24sCiAqICAgICBiZWZvcmUgc3BlY2lmeWluZyBhIHRyYWNraW5nIGV4cHJlc3Npb24uCiAqCiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXNgIGlzIGVxdWl2YWxlbnQgdG8gYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgJGlkKGl0ZW0pYC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIERPTSBlbGVtZW50cwogKiAgICAgd2lsbCBiZSBhc3NvY2lhdGVkIGJ5IGl0ZW0gaWRlbnRpdHkgaW4gdGhlIGFycmF5LgogKgogKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gYXMgYWxpYXNfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGFsaWFzIGV4cHJlc3Npb24gd2hpY2ggd2lsbCB0aGVuIHN0b3JlIHRoZQogKiAgICAgaW50ZXJtZWRpYXRlIHJlc3VsdHMgb2YgdGhlIHJlcGVhdGVyIGFmdGVyIHRoZSBmaWx0ZXJzIGhhdmUgYmVlbiBhcHBsaWVkLiBUeXBpY2FsbHkgdGhpcyBpcyB1c2VkIHRvIHJlbmRlciBhIHNwZWNpYWwgbWVzc2FnZQogKiAgICAgd2hlbiBhIGZpbHRlciBpcyBhY3RpdmUgb24gdGhlIHJlcGVhdGVyLCBidXQgdGhlIGZpbHRlcmVkIHJlc3VsdCBzZXQgaXMgZW1wdHkuCiAqCiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXI6eCBhcyByZXN1bHRzYCB3aWxsIHN0b3JlIHRoZSBmcmFnbWVudCBvZiB0aGUgcmVwZWF0ZWQgaXRlbXMgYXMgYHJlc3VsdHNgLCBidXQgb25seSBhZnRlcgogKiAgICAgdGhlIGl0ZW1zIGhhdmUgYmVlbiBwcm9jZXNzZWQgdGhyb3VnaCB0aGUgZmlsdGVyLgogKgogKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIEEgYnVpbHQgaW4gYCRpZCgpYCBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBhc3NpZ24gYSB1bmlxdWUKICogICAgIGAkJGhhc2hLZXlgIHByb3BlcnR5IHRvIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkuIFRoaXMgcHJvcGVydHkgaXMgdGhlbiB1c2VkIGFzIGEga2V5IHRvIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnRzCiAqICAgICB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0gaW4gdGhlIGFycmF5IGJ5IGlkZW50aXR5LiBNb3ZpbmcgdGhlIHNhbWUgb2JqZWN0IGluIGFycmF5IHdvdWxkIG1vdmUgdGhlIERPTQogKiAgICAgZWxlbWVudCBpbiB0aGUgc2FtZSB3YXkgaW4gdGhlIERPTS4KICoKICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHR5cGljYWwgcGF0dGVybiB3aGVuIHRoZSBpdGVtcyBjb21lIGZyb20gdGhlIGRhdGFiYXNlLiBJbiB0aGlzCiAqICAgICBjYXNlIHRoZSBvYmplY3QgaWRlbnRpdHkgZG9lcyBub3QgbWF0dGVyLiBUd28gb2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGFzIGxvbmcgYXMgdGhlaXIgYGlkYAogKiAgICAgcHJvcGVydHkgaXMgc2FtZS4KICoKICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjpzZWFyY2hUZXh0IHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgcGF0dGVybiB0aGF0IG1pZ2h0IGJlIHVzZWQgdG8gYXBwbHkgYSBmaWx0ZXIKICogICAgIHRvIGl0ZW1zIGluIGNvbmp1bmN0aW9uIHdpdGggYSB0cmFja2luZyBleHByZXNzaW9uLgogKgogKiBAZXhhbXBsZQogKiBUaGlzIGV4YW1wbGUgaW5pdGlhbGl6ZXMgdGhlIHNjb3BlIHRvIGEgbGlzdCBvZiBuYW1lcyBhbmQKICogdGhlbiB1c2VzIGBuZ1JlcGVhdGAgdG8gZGlzcGxheSBldmVyeSBwZXJzb246CiAgPGV4YW1wbGUgbW9kdWxlPSJuZ0FuaW1hdGUiIGRlcHM9ImFuZ3VsYXItYW5pbWF0ZS5qcyIgYW5pbWF0aW9ucz0idHJ1ZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGRpdiBuZy1pbml0PSJmcmllbmRzID0gWwogICAgICAgIHtuYW1lOidKb2huJywgYWdlOjI1LCBnZW5kZXI6J2JveSd9LAogICAgICAgIHtuYW1lOidKZXNzaWUnLCBhZ2U6MzAsIGdlbmRlcjonZ2lybCd9LAogICAgICAgIHtuYW1lOidKb2hhbm5hJywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSwKICAgICAgICB7bmFtZTonSm95JywgYWdlOjE1LCBnZW5kZXI6J2dpcmwnfSwKICAgICAgICB7bmFtZTonTWFyeScsIGFnZToyOCwgZ2VuZGVyOidnaXJsJ30sCiAgICAgICAge25hbWU6J1BldGVyJywgYWdlOjk1LCBnZW5kZXI6J2JveSd9LAogICAgICAgIHtuYW1lOidTZWJhc3RpYW4nLCBhZ2U6NTAsIGdlbmRlcjonYm95J30sCiAgICAgICAge25hbWU6J0VyaWthJywgYWdlOjI3LCBnZW5kZXI6J2dpcmwnfSwKICAgICAgICB7bmFtZTonUGF0cmljaycsIGFnZTo0MCwgZ2VuZGVyOidib3knfSwKICAgICAgICB7bmFtZTonU2FtYW50aGEnLCBhZ2U6NjAsIGdlbmRlcjonZ2lybCd9CiAgICAgIF0iPgogICAgICAgIEkgaGF2ZSB7e2ZyaWVuZHMubGVuZ3RofX0gZnJpZW5kcy4gVGhleSBhcmU6CiAgICAgICAgPGlucHV0IHR5cGU9InNlYXJjaCIgbmctbW9kZWw9InEiIHBsYWNlaG9sZGVyPSJmaWx0ZXIgZnJpZW5kcy4uLiIgLz4KICAgICAgICA8dWwgY2xhc3M9ImV4YW1wbGUtYW5pbWF0ZS1jb250YWluZXIiPgogICAgICAgICAgPGxpIGNsYXNzPSJhbmltYXRlLXJlcGVhdCIgbmctcmVwZWF0PSJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpxIGFzIHJlc3VsdHMiPgogICAgICAgICAgICBbe3skaW5kZXggKyAxfX1dIHt7ZnJpZW5kLm5hbWV9fSB3aG8gaXMge3tmcmllbmQuYWdlfX0geWVhcnMgb2xkLgogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0iYW5pbWF0ZS1yZXBlYXQiIG5nLWlmPSJyZXN1bHRzLmxlbmd0aCA9PSAwIj4KICAgICAgICAgICAgPHN0cm9uZz5ObyByZXN1bHRzIGZvdW5kLi4uPC9zdHJvbmc+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGl2PgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iYW5pbWF0aW9ucy5jc3MiPgogICAgICAuZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lciB7CiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGxpc3Qtc3R5bGU6bm9uZTsKICAgICAgICBtYXJnaW46MDsKICAgICAgICBwYWRkaW5nOjAgMTBweDsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtcmVwZWF0IHsKICAgICAgICBsaW5lLWhlaWdodDo0MHB4OwogICAgICAgIGxpc3Qtc3R5bGU6bm9uZTsKICAgICAgICBib3gtc2l6aW5nOmJvcmRlci1ib3g7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlLAogICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIsCiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSB7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSwKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsCiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlciB7CiAgICAgICAgb3BhY2l0eTowOwogICAgICAgIG1heC1oZWlnaHQ6MDsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLAogICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZS5uZy1tb3ZlLWFjdGl2ZSwKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7CiAgICAgICAgb3BhY2l0eToxOwogICAgICAgIG1heC1oZWlnaHQ6NDBweDsKICAgICAgfQogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgIHZhciBmcmllbmRzID0gZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoJ2ZyaWVuZCBpbiBmcmllbmRzJykpOwoKICAgICAgaXQoJ3Nob3VsZCByZW5kZXIgaW5pdGlhbCBkYXRhIHNldCcsIGZ1bmN0aW9uKCkgewogICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApOwogICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgwKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxXSBKb2huIHdobyBpcyAyNSB5ZWFycyBvbGQuJyk7CiAgICAgICAgZXhwZWN0KGZyaWVuZHMuZ2V0KDEpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIEplc3NpZSB3aG8gaXMgMzAgeWVhcnMgb2xkLicpOwogICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxMF0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTsKICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdmcmllbmRzLmxlbmd0aCcpKS5nZXRUZXh0KCkpCiAgICAgICAgICAgIC50b01hdGNoKCJJIGhhdmUgMTAgZnJpZW5kcy4gVGhleSBhcmU6Iik7CiAgICAgIH0pOwoKICAgICAgIGl0KCdzaG91bGQgdXBkYXRlIHJlcGVhdGVyIHdoZW4gZmlsdGVyIHByZWRpY2F0ZSBjaGFuZ2VzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApOwoKICAgICAgICAgZWxlbWVudChieS5tb2RlbCgncScpKS5zZW5kS2V5cygnbWEnKTsKCiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMik7CiAgICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgwKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxXSBNYXJ5IHdobyBpcyAyOCB5ZWFycyBvbGQuJyk7CiAgICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1syXSBTYW1hbnRoYSB3aG8gaXMgNjAgeWVhcnMgb2xkLicpOwogICAgICAgfSk7CiAgICAgIDwvZmlsZT4KICAgIDwvZXhhbXBsZT4KICovCnZhciBuZ1JlcGVhdERpcmVjdGl2ZSA9IFsnJHBhcnNlJywgJyRhbmltYXRlJywgZnVuY3Rpb24oJHBhcnNlLCAkYW5pbWF0ZSkgewogIHZhciBOR19SRU1PVkVEID0gJyQkTkdfUkVNT1ZFRCc7CiAgdmFyIG5nUmVwZWF0TWluRXJyID0gbWluRXJyKCduZ1JlcGVhdCcpOwoKICB2YXIgdXBkYXRlU2NvcGUgPSBmdW5jdGlvbihzY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgYXJyYXlMZW5ndGgpIHsKICAgIC8vIFRPRE8ocGVyZik6IGdlbmVyYXRlIHNldHRlcnMgdG8gc2hhdmUgb2ZmIH40MG1zIG9yIDEtMS41JQogICAgc2NvcGVbdmFsdWVJZGVudGlmaWVyXSA9IHZhbHVlOwogICAgaWYgKGtleUlkZW50aWZpZXIpIHNjb3BlW2tleUlkZW50aWZpZXJdID0ga2V5OwogICAgc2NvcGUuJGluZGV4ID0gaW5kZXg7CiAgICBzY29wZS4kZmlyc3QgPSAoaW5kZXggPT09IDApOwogICAgc2NvcGUuJGxhc3QgPSAoaW5kZXggPT09IChhcnJheUxlbmd0aCAtIDEpKTsKICAgIHNjb3BlLiRtaWRkbGUgPSAhKHNjb3BlLiRmaXJzdCB8fCBzY29wZS4kbGFzdCk7CiAgICAvLyBqc2hpbnQgYml0d2lzZTogZmFsc2UKICAgIHNjb3BlLiRvZGQgPSAhKHNjb3BlLiRldmVuID0gKGluZGV4JjEpID09PSAwKTsKICAgIC8vIGpzaGludCBiaXR3aXNlOiB0cnVlCiAgfTsKCiAgdmFyIGdldEJsb2NrU3RhcnQgPSBmdW5jdGlvbihibG9jaykgewogICAgcmV0dXJuIGJsb2NrLmNsb25lWzBdOwogIH07CgogIHZhciBnZXRCbG9ja0VuZCA9IGZ1bmN0aW9uKGJsb2NrKSB7CiAgICByZXR1cm4gYmxvY2suY2xvbmVbYmxvY2suY2xvbmUubGVuZ3RoIC0gMV07CiAgfTsKCgogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0EnLAogICAgbXVsdGlFbGVtZW50OiB0cnVlLAogICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLAogICAgcHJpb3JpdHk6IDEwMDAsCiAgICB0ZXJtaW5hbDogdHJ1ZSwKICAgICQkdGxiOiB0cnVlLAogICAgY29tcGlsZTogZnVuY3Rpb24gbmdSZXBlYXRDb21waWxlKCRlbGVtZW50LCAkYXR0cikgewogICAgICB2YXIgZXhwcmVzc2lvbiA9ICRhdHRyLm5nUmVwZWF0OwogICAgICB2YXIgbmdSZXBlYXRFbmRDb21tZW50ID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIGVuZCBuZ1JlcGVhdDogJyArIGV4cHJlc3Npb24gKyAnICcpOwoKICAgICAgdmFyIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaCgvXlxzKihbXHNcU10rPylccytpblxzKyhbXHNcU10rPykoPzpccythc1xzKyhbXHNcU10rPykpPyg/OlxzK3RyYWNrXHMrYnlccysoW1xzXFNdKz8pKT9ccyokLyk7CgogICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2lleHAnLCAiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fWyB0cmFjayBieSBfaWRfXScgYnV0IGdvdCAnezB9Jy4iLAogICAgICAgICAgICBleHByZXNzaW9uKTsKICAgICAgfQoKICAgICAgdmFyIGxocyA9IG1hdGNoWzFdOwogICAgICB2YXIgcmhzID0gbWF0Y2hbMl07CiAgICAgIHZhciBhbGlhc0FzID0gbWF0Y2hbM107CiAgICAgIHZhciB0cmFja0J5RXhwID0gbWF0Y2hbNF07CgogICAgICBtYXRjaCA9IGxocy5tYXRjaCgvXig/OihbXCRcd10rKXxcKChbXCRcd10rKVxzKixccyooW1wkXHddKylcKSkkLyk7CgogICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2lpZGV4cCcsICInX2l0ZW1fJyBpbiAnX2l0ZW1fIGluIF9jb2xsZWN0aW9uXycgc2hvdWxkIGJlIGFuIGlkZW50aWZpZXIgb3IgJyhfa2V5XywgX3ZhbHVlXyknIGV4cHJlc3Npb24sIGJ1dCBnb3QgJ3swfScuIiwKICAgICAgICAgICAgbGhzKTsKICAgICAgfQogICAgICB2YXIgdmFsdWVJZGVudGlmaWVyID0gbWF0Y2hbM10gfHwgbWF0Y2hbMV07CiAgICAgIHZhciBrZXlJZGVudGlmaWVyID0gbWF0Y2hbMl07CgogICAgICBpZiAoYWxpYXNBcyAmJiAoIS9eWyRhLXpBLVpfXVskYS16QS1aMC05X10qJC8udGVzdChhbGlhc0FzKSB8fAogICAgICAgICAgL14obnVsbHx1bmRlZmluZWR8dGhpc3xcJGluZGV4fFwkZmlyc3R8XCRtaWRkbGV8XCRsYXN0fFwkZXZlbnxcJG9kZHxcJHBhcmVudCkkLy50ZXN0KGFsaWFzQXMpKSkgewogICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdiYWRpZGVudCcsICJhbGlhcyAnezB9JyBpcyBpbnZhbGlkIC0tLSBtdXN0IGJlIGEgdmFsaWQgSlMgaWRlbnRpZmllciB3aGljaCBpcyBub3QgYSByZXNlcnZlZCBuYW1lLiIsCiAgICAgICAgICBhbGlhc0FzKTsKICAgICAgfQoKICAgICAgdmFyIHRyYWNrQnlFeHBHZXR0ZXIsIHRyYWNrQnlJZEV4cEZuLCB0cmFja0J5SWRBcnJheUZuLCB0cmFja0J5SWRPYmpGbjsKICAgICAgdmFyIGhhc2hGbkxvY2FscyA9IHskaWQ6IGhhc2hLZXl9OwoKICAgICAgaWYgKHRyYWNrQnlFeHApIHsKICAgICAgICB0cmFja0J5RXhwR2V0dGVyID0gJHBhcnNlKHRyYWNrQnlFeHApOwogICAgICB9IGVsc2UgewogICAgICAgIHRyYWNrQnlJZEFycmF5Rm4gPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIGhhc2hLZXkodmFsdWUpOwogICAgICAgIH07CiAgICAgICAgdHJhY2tCeUlkT2JqRm4gPSBmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICByZXR1cm4ga2V5OwogICAgICAgIH07CiAgICAgIH0KCiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1JlcGVhdExpbmsoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7CgogICAgICAgIGlmICh0cmFja0J5RXhwR2V0dGVyKSB7CiAgICAgICAgICB0cmFja0J5SWRFeHBGbiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUsIGluZGV4KSB7CiAgICAgICAgICAgIC8vIGFzc2lnbiBrZXksIHZhbHVlLCBhbmQgJGluZGV4IHRvIHRoZSBsb2NhbHMgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIGluIGhhc2ggZnVuY3Rpb25zCiAgICAgICAgICAgIGlmIChrZXlJZGVudGlmaWVyKSBoYXNoRm5Mb2NhbHNba2V5SWRlbnRpZmllcl0gPSBrZXk7CiAgICAgICAgICAgIGhhc2hGbkxvY2Fsc1t2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7CiAgICAgICAgICAgIGhhc2hGbkxvY2Fscy4kaW5kZXggPSBpbmRleDsKICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnlFeHBHZXR0ZXIoJHNjb3BlLCBoYXNoRm5Mb2NhbHMpOwogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIC8vIFN0b3JlIGEgbGlzdCBvZiBlbGVtZW50cyBmcm9tIHByZXZpb3VzIHJ1bi4gVGhpcyBpcyBhIGhhc2ggd2hlcmUga2V5IGlzIHRoZSBpdGVtIGZyb20gdGhlCiAgICAgICAgLy8gaXRlcmF0b3IsIGFuZCB0aGUgdmFsdWUgaXMgb2JqZWN0cyB3aXRoIGZvbGxvd2luZyBwcm9wZXJ0aWVzLgogICAgICAgIC8vICAgLSBzY29wZTogYm91bmQgc2NvcGUKICAgICAgICAvLyAgIC0gZWxlbWVudDogcHJldmlvdXMgZWxlbWVudC4KICAgICAgICAvLyAgIC0gaW5kZXg6IHBvc2l0aW9uCiAgICAgICAgLy8KICAgICAgICAvLyBXZSBhcmUgdXNpbmcgbm8tcHJvdG8gb2JqZWN0IHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBndWFyZCBhZ2FpbnN0IGluaGVyaXRlZCBwcm9wcyB2aWEKICAgICAgICAvLyBoYXNPd25Qcm9wZXJ0eS4KICAgICAgICB2YXIgbGFzdEJsb2NrTWFwID0gY3JlYXRlTWFwKCk7CgogICAgICAgIC8vd2F0Y2ggcHJvcHMKICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihyaHMsIGZ1bmN0aW9uIG5nUmVwZWF0QWN0aW9uKGNvbGxlY3Rpb24pIHsKICAgICAgICAgIHZhciBpbmRleCwgbGVuZ3RoLAogICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9ICRlbGVtZW50WzBdLCAgICAgLy8gbm9kZSB0aGF0IGNsb25lZCBub2RlcyBzaG91bGQgYmUgaW5zZXJ0ZWQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemVkIHRvIHRoZSBjb21tZW50IG5vZGUgYW5jaG9yCiAgICAgICAgICAgICAgbmV4dE5vZGUsCiAgICAgICAgICAgICAgLy8gU2FtZSBhcyBsYXN0QmxvY2tNYXAgYnV0IGl0IGhhcyB0aGUgY3VycmVudCBzdGF0ZS4gSXQgd2lsbCBiZWNvbWUgdGhlCiAgICAgICAgICAgICAgLy8gbGFzdEJsb2NrTWFwIG9uIHRoZSBuZXh0IGl0ZXJhdGlvbi4KICAgICAgICAgICAgICBuZXh0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKSwKICAgICAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoLAogICAgICAgICAgICAgIGtleSwgdmFsdWUsIC8vIGtleS92YWx1ZSBvZiBpdGVyYXRpb24KICAgICAgICAgICAgICB0cmFja0J5SWQsCiAgICAgICAgICAgICAgdHJhY2tCeUlkRm4sCiAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMsCiAgICAgICAgICAgICAgYmxvY2ssICAgICAgIC8vIGxhc3Qgb2JqZWN0IGluZm9ybWF0aW9uIHtzY29wZSwgZWxlbWVudCwgaWR9CiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXIsCiAgICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZTsKCiAgICAgICAgICBpZiAoYWxpYXNBcykgewogICAgICAgICAgICAkc2NvcGVbYWxpYXNBc10gPSBjb2xsZWN0aW9uOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkgewogICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IGNvbGxlY3Rpb247CiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkQXJyYXlGbjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkT2JqRm47CiAgICAgICAgICAgIC8vIGlmIG9iamVjdCwgZXh0cmFjdCBrZXlzLCBzb3J0IHRoZW0gYW5kIHVzZSB0byBkZXRlcm1pbmUgb3JkZXIgb2YgaXRlcmF0aW9uIG92ZXIgb2JqIHByb3BzCiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gW107CiAgICAgICAgICAgIGZvciAodmFyIGl0ZW1LZXkgaW4gY29sbGVjdGlvbikgewogICAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uLmhhc093blByb3BlcnR5KGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9ICckJykgewogICAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMucHVzaChpdGVtS2V5KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29sbGVjdGlvbktleXMuc29ydCgpOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbGxlY3Rpb25MZW5ndGggPSBjb2xsZWN0aW9uS2V5cy5sZW5ndGg7CiAgICAgICAgICBuZXh0QmxvY2tPcmRlciA9IG5ldyBBcnJheShjb2xsZWN0aW9uTGVuZ3RoKTsKCiAgICAgICAgICAvLyBsb2NhdGUgZXhpc3RpbmcgaXRlbXMKICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbGxlY3Rpb25MZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdOwogICAgICAgICAgICB2YWx1ZSA9IGNvbGxlY3Rpb25ba2V5XTsKICAgICAgICAgICAgdHJhY2tCeUlkID0gdHJhY2tCeUlkRm4oa2V5LCB2YWx1ZSwgaW5kZXgpOwogICAgICAgICAgICBpZiAobGFzdEJsb2NrTWFwW3RyYWNrQnlJZF0pIHsKICAgICAgICAgICAgICAvLyBmb3VuZCBwcmV2aW91c2x5IHNlZW4gYmxvY2sKICAgICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFt0cmFja0J5SWRdOwogICAgICAgICAgICAgIGRlbGV0ZSBsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXTsKICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IGJsb2NrOwogICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IGJsb2NrOwogICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRCbG9ja01hcFt0cmFja0J5SWRdKSB7CiAgICAgICAgICAgICAgLy8gaWYgY29sbGlzaW9uIGRldGVjdGVkLiByZXN0b3JlIGxhc3RCbG9ja01hcCBhbmQgdGhyb3cgYW4gZXJyb3IKICAgICAgICAgICAgICBmb3JFYWNoKG5leHRCbG9ja09yZGVyLCBmdW5jdGlvbiAoYmxvY2spIHsKICAgICAgICAgICAgICAgIGlmIChibG9jayAmJiBibG9jay5zY29wZSkgbGFzdEJsb2NrTWFwW2Jsb2NrLmlkXSA9IGJsb2NrOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdkdXBlcycsICJEdXBsaWNhdGVzIGluIGEgcmVwZWF0ZXIgYXJlIG5vdCBhbGxvd2VkLiBVc2UgJ3RyYWNrIGJ5JyBleHByZXNzaW9uIHRvIHNwZWNpZnkgdW5pcXVlIGtleXMuIFJlcGVhdGVyOiB7MH0sIER1cGxpY2F0ZSBrZXk6IHsxfSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24sIHRyYWNrQnlJZCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gbmV3IG5ldmVyIGJlZm9yZSBzZWVuIGJsb2NrCiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0ge2lkOiB0cmFja0J5SWQsIHNjb3BlOiB1bmRlZmluZWQsIGNsb25lOiB1bmRlZmluZWR9OwogICAgICAgICAgICAgIG5leHRCbG9ja01hcFt0cmFja0J5SWRdID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIHJlbW92ZSBsZWZ0b3ZlciBpdGVtcwogICAgICAgICAgZm9yICh2YXIgYmxvY2tLZXkgaW4gbGFzdEJsb2NrTWFwKSB7CiAgICAgICAgICAgIGJsb2NrID0gbGFzdEJsb2NrTWFwW2Jsb2NrS2V5XTsKICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZSA9IGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpOwogICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShlbGVtZW50c1RvUmVtb3ZlKTsKICAgICAgICAgICAgaWYgKGVsZW1lbnRzVG9SZW1vdmVbMF0ucGFyZW50KSB7CiAgICAgICAgICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgd2FzIG5vdCByZW1vdmVkIHlldCBiZWNhdXNlIG9mIHBlbmRpbmcgYW5pbWF0aW9uLCBtYXJrIGl0IGFzIGRlbGV0ZWQKICAgICAgICAgICAgICAvLyBzbyB0aGF0IHdlIGNhbiBpZ25vcmUgaXQgbGF0ZXIKICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlW2luZGV4XVtOR19SRU1PVkVEXSA9IHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGJsb2NrLnNjb3BlLiRkZXN0cm95KCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBmb3JFYWNoIGZvciBwZXJmIHJlYXNvbnMgKHRyeWluZyB0byBhdm9pZCAjY2FsbCkKICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbGxlY3Rpb25MZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdOwogICAgICAgICAgICB2YWx1ZSA9IGNvbGxlY3Rpb25ba2V5XTsKICAgICAgICAgICAgYmxvY2sgPSBuZXh0QmxvY2tPcmRlcltpbmRleF07CgogICAgICAgICAgICBpZiAoYmxvY2suc2NvcGUpIHsKICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGFscmVhZHkgc2VlbiB0aGlzIG9iamVjdCwgdGhlbiB3ZSBuZWVkIHRvIHJldXNlIHRoZQogICAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgc2NvcGUvZWxlbWVudAoKICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHByZXZpb3VzTm9kZTsKCiAgICAgICAgICAgICAgLy8gc2tpcCBub2RlcyB0aGF0IGFyZSBhbHJlYWR5IHBlbmRpbmcgcmVtb3ZhbCB2aWEgbGVhdmUgYW5pbWF0aW9uCiAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZzsKICAgICAgICAgICAgICB9IHdoaWxlIChuZXh0Tm9kZSAmJiBuZXh0Tm9kZVtOR19SRU1PVkVEXSk7CgogICAgICAgICAgICAgIGlmIChnZXRCbG9ja1N0YXJ0KGJsb2NrKSAhPSBuZXh0Tm9kZSkgewogICAgICAgICAgICAgICAgLy8gZXhpc3RpbmcgaXRlbSB3aGljaCBnb3QgbW92ZWQKICAgICAgICAgICAgICAgICRhbmltYXRlLm1vdmUoZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSksIG51bGwsIGpxTGl0ZShwcmV2aW91c05vZGUpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gZ2V0QmxvY2tFbmQoYmxvY2spOwogICAgICAgICAgICAgIHVwZGF0ZVNjb3BlKGJsb2NrLnNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBjb2xsZWN0aW9uTGVuZ3RoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBuZXcgaXRlbSB3aGljaCB3ZSBkb24ndCBrbm93IGFib3V0CiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24gbmdSZXBlYXRUcmFuc2NsdWRlKGNsb25lLCBzY29wZSkgewogICAgICAgICAgICAgICAgYmxvY2suc2NvcGUgPSBzY29wZTsKICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2Nsb25lLXZzLWNyZWF0ZWNvbW1lbnQKICAgICAgICAgICAgICAgIHZhciBlbmROb2RlID0gbmdSZXBlYXRFbmRDb21tZW50LmNsb25lTm9kZSgpOwogICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gZW5kTm9kZTsKICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCBqcUxpdGUocHJldmlvdXNOb2RlKSk7CiAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBlbmROb2RlOwogICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy4KICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBqcWxpdGUgd3JhcHBlciBhcyBpdCBtaWdodCBiZSBjaGFuZ2VkIGxhdGVyCiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuCiAgICAgICAgICAgICAgICBibG9jay5jbG9uZSA9IGNsb25lOwogICAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW2Jsb2NrLmlkXSA9IGJsb2NrOwogICAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBsYXN0QmxvY2tNYXAgPSBuZXh0QmxvY2tNYXA7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfTsKfV07CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1Nob3cKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdTaG93YCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvbgogKiBwcm92aWRlZCB0byB0aGUgbmdTaG93IGF0dHJpYnV0ZS4gVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZwogKiB0aGUgYG5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LiBUaGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcHJlZGVmaW5lZAogKiBpbiBBbmd1bGFySlMgYW5kIHNldHMgdGhlIGRpc3BsYXkgc3R5bGUgdG8gbm9uZSAodXNpbmcgYW4gIWltcG9ydGFudCBmbGFnKS4KICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuCiAqCiAqIGBgYGh0bWwKICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIHRydXRoeSAoZWxlbWVudCBpcyB2aXNpYmxlKSAtLT4KICogPGRpdiBuZy1zaG93PSJteVZhbHVlIj48L2Rpdj4KICoKICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+CiAqIDxkaXYgbmctc2hvdz0ibXlWYWx1ZSIgY2xhc3M9Im5nLWhpZGUiPjwvZGl2PgogKiBgYGAKICoKICogV2hlbiB0aGUgbmdTaG93IGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgZmFsc3kgdmFsdWUgdGhlbiB0aGUgbmctaGlkZSBDU1MgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIGNsYXNzCiAqIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gdHJ1dGh5LCB0aGUgbmctaGlkZSBDU1MgY2xhc3MgaXMgcmVtb3ZlZAogKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uCiAqCiAqICMjIFdoeSBpcyAhaW1wb3J0YW50IHVzZWQ/CiAqCiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSAhaW1wb3J0YW50IGlzIHVzZWQgZm9yIHRoZSAubmctaGlkZSBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYC5uZy1oaWRlYCBzZWxlY3RvcgogKiBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXMgc2ltcGxlCiAqIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyIHZpc2libGUuCiAqIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLgogKgogKiBCeSB1c2luZyAhaW1wb3J0YW50LCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlbiBDU1Mgc2VsZWN0b3IKICogc3BlY2lmaWNpdHkgKHdoZW4gIWltcG9ydGFudCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGEgZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlCiAqIHN0eWxpbmcgdG8gY2hhbmdlIGhvdyB0byBoaWRlIGFuIGVsZW1lbnQgdGhlbiBpdCBpcyBqdXN0IGEgbWF0dGVyIG9mIHVzaW5nICFpbXBvcnRhbnQgaW4gdGhlaXIgb3duIENTUyBjb2RlLgogKgogKiAjIyMgT3ZlcnJpZGluZyAubmctaGlkZQogKgogKiBCeSBkZWZhdWx0LCB0aGUgYC5uZy1oaWRlYCBjbGFzcyB3aWxsIHN0eWxlIHRoZSBlbGVtZW50IHdpdGggYGRpc3BsYXk6bm9uZSFpbXBvcnRhbnRgLiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UKICogdGhlIGhpZGUgYmVoYXZpb3Igd2l0aCBuZ1Nob3cvbmdIaWRlIHRoZW4gdGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmVzdGF0aW5nIHRoZSBzdHlsZXMgZm9yIHRoZSBgLm5nLWhpZGVgCiAqIGNsYXNzIGluIENTUzoKICoKICogYGBgY3NzCiAqIC5uZy1oaWRlIHsKICogICAvJiM0MjsgdGhpcyBpcyBqdXN0IGFub3RoZXIgZm9ybSBvZiBoaWRpbmcgYW4gZWxlbWVudCAmIzQyOy8KICogICBkaXNwbGF5OmJsb2NrIWltcG9ydGFudDsKICogICBwb3NpdGlvbjphYnNvbHV0ZTsKICogICB0b3A6LTk5OTlweDsKICogICBsZWZ0Oi05OTk5cHg7CiAqIH0KICogYGBgCiAqCiAqIEJ5IGRlZmF1bHQgeW91IGRvbid0IG5lZWQgdG8gb3ZlcnJpZGUgaW4gQ1NTIGFueXRoaW5nIGFuZCB0aGUgYW5pbWF0aW9ucyB3aWxsIHdvcmsgYXJvdW5kIHRoZSBkaXNwbGF5IHN0eWxlLgogKgogKiAjIyBBIG5vdGUgYWJvdXQgYW5pbWF0aW9ucyB3aXRoIG5nU2hvdwogKgogKiBBbmltYXRpb25zIGluIG5nU2hvdy9uZ0hpZGUgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZGlyZWN0aXZlIGV4cHJlc3Npb24KICogaXMgdHJ1ZSBhbmQgZmFsc2UuIFRoaXMgc3lzdGVtIHdvcmtzIGxpa2UgdGhlIGFuaW1hdGlvbiBzeXN0ZW0gcHJlc2VudCB3aXRoIG5nQ2xhc3MgZXhjZXB0IHRoYXQKICogeW91IG11c3QgYWxzbyBpbmNsdWRlIHRoZSAhaW1wb3J0YW50IGZsYWcgdG8gb3ZlcnJpZGUgdGhlIGRpc3BsYXkgcHJvcGVydHkKICogc28gdGhhdCB5b3UgY2FuIHBlcmZvcm0gYW4gYW5pbWF0aW9uIHdoZW4gdGhlIGVsZW1lbnQgaXMgaGlkZGVuIGR1cmluZyB0aGUgdGltZSBvZiB0aGUgYW5pbWF0aW9uLgogKgogKiBgYGBjc3MKICogLy8KICogLy9hIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2UKICogLy8KICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsKICogICAvJiM0MjsgdGhpcyBpcyByZXF1aXJlZCBhcyBvZiAxLjN4IHRvIHByb3Blcmx5CiAqICAgICAgYXBwbHkgYWxsIHN0eWxpbmcgaW4gYSBzaG93L2hpZGUgYW5pbWF0aW9uICYjNDI7LwogKiAgIHRyYW5zaXRpb246MHMgbGluZWFyIGFsbDsKICogfQogKgogKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC1hY3RpdmUsCiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7CiAqICAgLyYjNDI7IHRoZSB0cmFuc2l0aW9uIGlzIGRlZmluZWQgaW4gdGhlIGFjdGl2ZSBjbGFzcyAmIzQyOy8KICogICB0cmFuc2l0aW9uOjFzIGxpbmVhciBhbGw7CiAqIH0KICoKICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfQogKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfQogKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9CiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9CiAqIGBgYAogKgogKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLjAtYmV0YS4xMSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXkKICogcHJvcGVydHkgdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMtLW5nQW5pbWF0ZSB3aWxsIGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgYXV0b21hdGljYWxseSBmb3IgeW91LgogKgogKiBAYW5pbWF0aW9ucwogKiBhZGRDbGFzczogLm5nLWhpZGUgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ1Nob3cgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIHRoZSBqdXN0IGJlZm9yZSBjb250ZW50cyBhcmUgc2V0IHRvIHZpc2libGUKICogcmVtb3ZlQ2xhc3M6IC5uZy1oaWRlIC0gaGFwcGVucyBhZnRlciB0aGUgbmdTaG93IGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgbm9uIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gaGlkZGVuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU2hvdyBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5CiAqICAgICB0aGVuIHRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiByZXNwZWN0aXZlbHkuCiAqCiAqIEBleGFtcGxlCiAgPGV4YW1wbGUgbW9kdWxlPSJuZ0FuaW1hdGUiIGRlcHM9ImFuZ3VsYXItYW5pbWF0ZS5qcyIgYW5pbWF0aW9ucz0idHJ1ZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgQ2xpY2sgbWU6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9ImNoZWNrZWQiPjxici8+CiAgICAgIDxkaXY+CiAgICAgICAgU2hvdzoKICAgICAgICA8ZGl2IGNsYXNzPSJjaGVjay1lbGVtZW50IGFuaW1hdGUtc2hvdyIgbmctc2hvdz0iY2hlY2tlZCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtdXAiPjwvc3Bhbj4gSSBzaG93IHVwIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdj4KICAgICAgICBIaWRlOgogICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1zaG93IiBuZy1oaWRlPSJjaGVja2VkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy1kb3duIj48L3NwYW4+IEkgaGlkZSB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJnbHlwaGljb25zLmNzcyI+CiAgICAgIEBpbXBvcnQgdXJsKC8vbmV0ZG5hLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzMuMC4wL2Nzcy9ib290c3RyYXAtZ2x5cGhpY29ucy5jc3MpOwogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iYW5pbWF0aW9ucy5jc3MiPgogICAgICAuYW5pbWF0ZS1zaG93IHsKICAgICAgICBsaW5lLWhlaWdodDoyMHB4OwogICAgICAgIG9wYWNpdHk6MTsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsKICAgICAgICBiYWNrZ3JvdW5kOndoaXRlOwogICAgICB9CgogICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSwKICAgICAgLmFuaW1hdGUtc2hvdy5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUgewogICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7CiAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLXNob3cubmctaGlkZSB7CiAgICAgICAgbGluZS1oZWlnaHQ6MDsKICAgICAgICBvcGFjaXR5OjA7CiAgICAgICAgcGFkZGluZzowIDEwcHg7CiAgICAgIH0KCiAgICAgIC5jaGVjay1lbGVtZW50IHsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsKICAgICAgICBiYWNrZ3JvdW5kOndoaXRlOwogICAgICB9CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgdmFyIHRodW1ic1VwID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy11cCcpKTsKICAgICAgdmFyIHRodW1ic0Rvd24gPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLWRvd24nKSk7CgogICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXNob3cgLyBuZy1oaWRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZXhwZWN0KHRodW1ic1VwLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpOwogICAgICAgIGV4cGVjdCh0aHVtYnNEb3duLmlzRGlzcGxheWVkKCkpLnRvQmVUcnV0aHkoKTsKCiAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpOwoKICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpOwogICAgICAgIGV4cGVjdCh0aHVtYnNEb3duLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpOwogICAgICB9KTsKICAgIDwvZmlsZT4KICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdTaG93RGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnQScsCiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsCiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ1Nob3csIGZ1bmN0aW9uIG5nU2hvd1dhdGNoQWN0aW9uKHZhbHVlKXsKICAgICAgICAkYW5pbWF0ZVt2YWx1ZSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXShlbGVtZW50LCAnbmctaGlkZScpOwogICAgICB9KTsKICAgIH0KICB9Owp9XTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ0hpZGUKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdIaWRlYCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvbgogKiBwcm92aWRlZCB0byB0aGUgbmdIaWRlIGF0dHJpYnV0ZS4gVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZwogKiB0aGUgYG5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LiBUaGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcHJlZGVmaW5lZAogKiBpbiBBbmd1bGFySlMgYW5kIHNldHMgdGhlIGRpc3BsYXkgc3R5bGUgdG8gbm9uZSAodXNpbmcgYW4gIWltcG9ydGFudCBmbGFnKS4KICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuCiAqCiAqIGBgYGh0bWwKICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIHRydXRoeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPgogKiA8ZGl2IG5nLWhpZGU9Im15VmFsdWUiIGNsYXNzPSJuZy1oaWRlIj48L2Rpdj4KICoKICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIHZpc2libGUpIC0tPgogKiA8ZGl2IG5nLWhpZGU9Im15VmFsdWUiPjwvZGl2PgogKiBgYGAKICoKICogV2hlbiB0aGUgbmdIaWRlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIHRoZW4gdGhlIC5uZy1oaWRlIENTUyBjbGFzcyBpcyBhZGRlZCB0byB0aGUgY2xhc3MKICogYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGNhdXNpbmcgaXQgdG8gYmVjb21lIGhpZGRlbi4gV2hlbiBmYWxzeSwgdGhlIG5nLWhpZGUgQ1NTIGNsYXNzIGlzIHJlbW92ZWQKICogZnJvbSB0aGUgZWxlbWVudCBjYXVzaW5nIHRoZSBlbGVtZW50IG5vdCB0byBhcHBlYXIgaGlkZGVuLgogKgogKiAjIyBXaHkgaXMgIWltcG9ydGFudCB1c2VkPwogKgogKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgIWltcG9ydGFudCBpcyB1c2VkIGZvciB0aGUgLm5nLWhpZGUgQ1NTIGNsYXNzLiBUaGlzIGlzIGJlY2F1c2UgdGhlIGAubmctaGlkZWAgc2VsZWN0b3IKICogY2FuIGJlIGVhc2lseSBvdmVycmlkZGVuIGJ5IGhlYXZpZXIgc2VsZWN0b3JzLiBGb3IgZXhhbXBsZSwgc29tZXRoaW5nIGFzIHNpbXBsZQogKiBhcyBjaGFuZ2luZyB0aGUgZGlzcGxheSBzdHlsZSBvbiBhIEhUTUwgbGlzdCBpdGVtIHdvdWxkIG1ha2UgaGlkZGVuIGVsZW1lbnRzIGFwcGVhciB2aXNpYmxlLgogKiBUaGlzIGFsc28gYmVjb21lcyBhIGJpZ2dlciBpc3N1ZSB3aGVuIGRlYWxpbmcgd2l0aCBDU1MgZnJhbWV3b3Jrcy4KICoKICogQnkgdXNpbmcgIWltcG9ydGFudCwgdGhlIHNob3cgYW5kIGhpZGUgYmVoYXZpb3Igd2lsbCB3b3JrIGFzIGV4cGVjdGVkIGRlc3BpdGUgYW55IGNsYXNoIGJldHdlZW4gQ1NTIHNlbGVjdG9yCiAqIHNwZWNpZmljaXR5ICh3aGVuICFpbXBvcnRhbnQgaXNuJ3QgdXNlZCB3aXRoIGFueSBjb25mbGljdGluZyBzdHlsZXMpLiBJZiBhIGRldmVsb3BlciBjaG9vc2VzIHRvIG92ZXJyaWRlIHRoZQogKiBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhIG1hdHRlciBvZiB1c2luZyAhaW1wb3J0YW50IGluIHRoZWlyIG93biBDU1MgY29kZS4KICoKICogIyMjIE92ZXJyaWRpbmcgLm5nLWhpZGUKICoKICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5Om5vbmUhaW1wb3J0YW50YC4gSWYgeW91IHdpc2ggdG8gY2hhbmdlCiAqIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggbmdTaG93L25nSGlkZSB0aGVuIHRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJlc3RhdGluZyB0aGUgc3R5bGVzIGZvciB0aGUgYC5uZy1oaWRlYAogKiBjbGFzcyBpbiBDU1M6CiAqCiAqIGBgYGNzcwogKiAubmctaGlkZSB7CiAqICAgLyYjNDI7IHRoaXMgaXMganVzdCBhbm90aGVyIGZvcm0gb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvCiAqICAgZGlzcGxheTpibG9jayFpbXBvcnRhbnQ7CiAqICAgcG9zaXRpb246YWJzb2x1dGU7CiAqICAgdG9wOi05OTk5cHg7CiAqICAgbGVmdDotOTk5OXB4OwogKiB9CiAqIGBgYAogKgogKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGluIENTUyBhbnl0aGluZyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGUgZGlzcGxheSBzdHlsZS4KICoKICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBuZ0hpZGUKICoKICogQW5pbWF0aW9ucyBpbiBuZ1Nob3cvbmdIaWRlIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGRpcmVjdGl2ZSBleHByZXNzaW9uCiAqIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aCBuZ0NsYXNzLCBleGNlcHQgdGhhdCB0aGUgYC5uZy1oaWRlYAogKiBDU1MgY2xhc3MgaXMgYWRkZWQgYW5kIHJlbW92ZWQgZm9yIHlvdSBpbnN0ZWFkIG9mIHlvdXIgb3duIENTUyBjbGFzcy4KICoKICogYGBgY3NzCiAqIC8vCiAqIC8vYSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlCiAqIC8vCiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLCAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7CiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7CiAqIH0KICoKICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfQogKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfQogKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9CiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9CiAqIGBgYAogKgogKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLjAtYmV0YS4xMSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXkKICogcHJvcGVydHkgdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMtLW5nQW5pbWF0ZSB3aWxsIGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgYXV0b21hdGljYWxseSBmb3IgeW91LgogKgogKiBAYW5pbWF0aW9ucwogKiByZW1vdmVDbGFzczogLm5nLWhpZGUgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ0hpZGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlbgogKiBhZGRDbGFzczogLm5nLWhpZGUgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ0hpZGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSGlkZSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5IHRoZW4KICogICAgIHRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiByZXNwZWN0aXZlbHkuCiAqCiAqIEBleGFtcGxlCiAgPGV4YW1wbGUgbW9kdWxlPSJuZ0FuaW1hdGUiIGRlcHM9ImFuZ3VsYXItYW5pbWF0ZS5qcyIgYW5pbWF0aW9ucz0idHJ1ZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgQ2xpY2sgbWU6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9ImNoZWNrZWQiPjxici8+CiAgICAgIDxkaXY+CiAgICAgICAgU2hvdzoKICAgICAgICA8ZGl2IGNsYXNzPSJjaGVjay1lbGVtZW50IGFuaW1hdGUtaGlkZSIgbmctc2hvdz0iY2hlY2tlZCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtdXAiPjwvc3Bhbj4gSSBzaG93IHVwIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdj4KICAgICAgICBIaWRlOgogICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1oaWRlIiBuZy1oaWRlPSJjaGVja2VkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy1kb3duIj48L3NwYW4+IEkgaGlkZSB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJnbHlwaGljb25zLmNzcyI+CiAgICAgIEBpbXBvcnQgdXJsKC8vbmV0ZG5hLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzMuMC4wL2Nzcy9ib290c3RyYXAtZ2x5cGhpY29ucy5jc3MpOwogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iYW5pbWF0aW9ucy5jc3MiPgogICAgICAuYW5pbWF0ZS1oaWRlIHsKICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzOwogICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzOwogICAgICAgIGxpbmUtaGVpZ2h0OjIwcHg7CiAgICAgICAgb3BhY2l0eToxOwogICAgICAgIHBhZGRpbmc6MTBweDsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGJhY2tncm91bmQ6d2hpdGU7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLWhpZGUubmctaGlkZSB7CiAgICAgICAgbGluZS1oZWlnaHQ6MDsKICAgICAgICBvcGFjaXR5OjA7CiAgICAgICAgcGFkZGluZzowIDEwcHg7CiAgICAgIH0KCiAgICAgIC5jaGVjay1lbGVtZW50IHsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsKICAgICAgICBiYWNrZ3JvdW5kOndoaXRlOwogICAgICB9CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgdmFyIHRodW1ic1VwID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy11cCcpKTsKICAgICAgdmFyIHRodW1ic0Rvd24gPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLWRvd24nKSk7CgogICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXNob3cgLyBuZy1oaWRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZXhwZWN0KHRodW1ic1VwLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpOwogICAgICAgIGV4cGVjdCh0aHVtYnNEb3duLmlzRGlzcGxheWVkKCkpLnRvQmVUcnV0aHkoKTsKCiAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpOwoKICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpOwogICAgICAgIGV4cGVjdCh0aHVtYnNEb3duLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpOwogICAgICB9KTsKICAgIDwvZmlsZT4KICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdIaWRlRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnQScsCiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsCiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0hpZGUsIGZ1bmN0aW9uIG5nSGlkZVdhdGNoQWN0aW9uKHZhbHVlKXsKICAgICAgICAkYW5pbWF0ZVt2YWx1ZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShlbGVtZW50LCAnbmctaGlkZScpOwogICAgICB9KTsKICAgIH0KICB9Owp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nU3R5bGUKICogQHJlc3RyaWN0IEFDCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nU3R5bGVgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNldCBDU1Mgc3R5bGUgb24gYW4gSFRNTCBlbGVtZW50IGNvbmRpdGlvbmFsbHkuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3R5bGUKICoKICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gd2hpY2ggZXZhbHMgdG8gYW4KICogb2JqZWN0IHdob3NlIGtleXMgYXJlIENTUyBzdHlsZSBuYW1lcyBhbmQgdmFsdWVzIGFyZSBjb3JyZXNwb25kaW5nIHZhbHVlcyBmb3IgdGhvc2UgQ1NTCiAqIGtleXMuCiAqCiAqIFNpbmNlIHNvbWUgQ1NTIHN0eWxlIG5hbWVzIGFyZSBub3QgdmFsaWQga2V5cyBmb3IgYW4gb2JqZWN0LCB0aGV5IG11c3QgYmUgcXVvdGVkLgogKiBTZWUgdGhlICdiYWNrZ3JvdW5kLWNvbG9yJyBzdHlsZSBpbiB0aGUgZXhhbXBsZSBiZWxvdy4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgdmFsdWU9InNldCBjb2xvciIgbmctY2xpY2s9Im15U3R5bGU9e2NvbG9yOidyZWQnfSI+CiAgICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgdmFsdWU9InNldCBiYWNrZ3JvdW5kIiBuZy1jbGljaz0ibXlTdHlsZT17J2JhY2tncm91bmQtY29sb3InOidibHVlJ30iPgogICAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJjbGVhciIgbmctY2xpY2s9Im15U3R5bGU9e30iPgogICAgICAgIDxici8+CiAgICAgICAgPHNwYW4gbmctc3R5bGU9Im15U3R5bGUiPlNhbXBsZSBUZXh0PC9zcGFuPgogICAgICAgIDxwcmU+bXlTdHlsZT17e215U3R5bGV9fTwvcHJlPgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgc3BhbiB7CiAgICAgICAgIGNvbG9yOiBibGFjazsKICAgICAgIH0KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgICB2YXIgY29sb3JTcGFuID0gZWxlbWVudChieS5jc3MoJ3NwYW4nKSk7CgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zdHlsZScsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7CiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1cJ3NldCBjb2xvclwnXScpKS5jbGljaygpOwogICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDI1NSwgMCwgMCwgMSknKTsKICAgICAgICAgZWxlbWVudChieS5jc3MoJ2lucHV0W3ZhbHVlPWNsZWFyXScpKS5jbGljaygpOwogICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7CiAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCnZhciBuZ1N0eWxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICBzY29wZS4kd2F0Y2goYXR0ci5uZ1N0eWxlLCBmdW5jdGlvbiBuZ1N0eWxlV2F0Y2hBY3Rpb24obmV3U3R5bGVzLCBvbGRTdHlsZXMpIHsKICAgIGlmIChvbGRTdHlsZXMgJiYgKG5ld1N0eWxlcyAhPT0gb2xkU3R5bGVzKSkgewogICAgICBmb3JFYWNoKG9sZFN0eWxlcywgZnVuY3Rpb24odmFsLCBzdHlsZSkgeyBlbGVtZW50LmNzcyhzdHlsZSwgJycpO30pOwogICAgfQogICAgaWYgKG5ld1N0eWxlcykgZWxlbWVudC5jc3MobmV3U3R5bGVzKTsKICB9LCB0cnVlKTsKfSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZ1N3aXRjaAogKiBAcmVzdHJpY3QgRUEKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdTd2l0Y2hgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIGNvbmRpdGlvbmFsbHkgc3dhcCBET00gc3RydWN0dXJlIG9uIHlvdXIgdGVtcGxhdGUgYmFzZWQgb24gYSBzY29wZSBleHByZXNzaW9uLgogKiBFbGVtZW50cyB3aXRoaW4gYG5nU3dpdGNoYCBidXQgd2l0aG91dCBgbmdTd2l0Y2hXaGVuYCBvciBgbmdTd2l0Y2hEZWZhdWx0YCBkaXJlY3RpdmVzIHdpbGwgYmUgcHJlc2VydmVkIGF0IHRoZSBsb2NhdGlvbgogKiBhcyBzcGVjaWZpZWQgaW4gdGhlIHRlbXBsYXRlLgogKgogKiBUaGUgZGlyZWN0aXZlIGl0c2VsZiB3b3JrcyBzaW1pbGFyIHRvIG5nSW5jbHVkZSwgaG93ZXZlciwgaW5zdGVhZCBvZiBkb3dubG9hZGluZyB0ZW1wbGF0ZSBjb2RlIChvciBsb2FkaW5nIGl0CiAqIGZyb20gdGhlIHRlbXBsYXRlIGNhY2hlKSwgYG5nU3dpdGNoYCBzaW1wbHkgY2hvb3NlcyBvbmUgb2YgdGhlIG5lc3RlZCBlbGVtZW50cyBhbmQgbWFrZXMgaXQgdmlzaWJsZSBiYXNlZCBvbiB3aGljaCBlbGVtZW50CiAqIG1hdGNoZXMgdGhlIHZhbHVlIG9idGFpbmVkIGZyb20gdGhlIGV2YWx1YXRlZCBleHByZXNzaW9uLiBJbiBvdGhlciB3b3JkcywgeW91IGRlZmluZSBhIGNvbnRhaW5lciBlbGVtZW50CiAqICh3aGVyZSB5b3UgcGxhY2UgdGhlIGRpcmVjdGl2ZSksIHBsYWNlIGFuIGV4cHJlc3Npb24gb24gdGhlICoqYG9uPSIuLi4iYCBhdHRyaWJ1dGUqKgogKiAob3IgdGhlICoqYG5nLXN3aXRjaD0iLi4uImAgYXR0cmlidXRlKiopLCBkZWZpbmUgYW55IGlubmVyIGVsZW1lbnRzIGluc2lkZSBvZiB0aGUgZGlyZWN0aXZlIGFuZCBwbGFjZQogKiBhIHdoZW4gYXR0cmlidXRlIHBlciBlbGVtZW50LiBUaGUgd2hlbiBhdHRyaWJ1dGUgaXMgdXNlZCB0byBpbmZvcm0gbmdTd2l0Y2ggd2hpY2ggZWxlbWVudCB0byBkaXNwbGF5IHdoZW4gdGhlIG9uCiAqIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkLiBJZiBhIG1hdGNoaW5nIGV4cHJlc3Npb24gaXMgbm90IGZvdW5kIHZpYSBhIHdoZW4gYXR0cmlidXRlIHRoZW4gYW4gZWxlbWVudCB3aXRoIHRoZSBkZWZhdWx0CiAqIGF0dHJpYnV0ZSBpcyBkaXNwbGF5ZWQuCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LWluZm8iPgogKiBCZSBhd2FyZSB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QgY2Fubm90IGJlIGV4cHJlc3Npb25zLiBUaGV5IGFyZSBpbnRlcnByZXRlZAogKiBhcyBsaXRlcmFsIHN0cmluZyB2YWx1ZXMgdG8gbWF0Y2ggYWdhaW5zdC4KICogRm9yIGV4YW1wbGUsICoqYG5nLXN3aXRjaC13aGVuPSJzb21lVmFsImAqKiB3aWxsIG1hdGNoIGFnYWluc3QgdGhlIHN0cmluZyBgInNvbWVWYWwiYCBub3QgYWdhaW5zdCB0aGUKICogdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gYCRzY29wZS5zb21lVmFsYC4KICogPC9kaXY+CgogKiBAYW5pbWF0aW9ucwogKiBlbnRlciAtIGhhcHBlbnMgYWZ0ZXIgdGhlIG5nU3dpdGNoIGNvbnRlbnRzIGNoYW5nZSBhbmQgdGhlIG1hdGNoZWQgY2hpbGQgZWxlbWVudCBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb250YWluZXIKICogbGVhdmUgLSBoYXBwZW5zIGp1c3QgYWZ0ZXIgdGhlIG5nU3dpdGNoIGNvbnRlbnRzIGNoYW5nZSBhbmQganVzdCBiZWZvcmUgdGhlIGZvcm1lciBjb250ZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBET00KICoKICogQHVzYWdlCiAqCiAqIGBgYAogKiA8QU5ZIG5nLXN3aXRjaD0iZXhwcmVzc2lvbiI+CiAqICAgPEFOWSBuZy1zd2l0Y2gtd2hlbj0ibWF0Y2hWYWx1ZTEiPi4uLjwvQU5ZPgogKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49Im1hdGNoVmFsdWUyIj4uLi48L0FOWT4KICogICA8QU5ZIG5nLXN3aXRjaC1kZWZhdWx0Pi4uLjwvQU5ZPgogKiA8L0FOWT4KICogYGBgCiAqCiAqCiAqIEBzY29wZQogKiBAcHJpb3JpdHkgODAwCiAqIEBwYXJhbSB7Kn0gbmdTd2l0Y2h8b24gZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0IDx0dD5uZy1zd2l0Y2gtd2hlbjwvdHQ+LgogKiBPbiBjaGlsZCBlbGVtZW50cyBhZGQ6CiAqCiAqICogYG5nU3dpdGNoV2hlbmA6IHRoZSBjYXNlIHN0YXRlbWVudCB0byBtYXRjaCBhZ2FpbnN0LiBJZiBtYXRjaCB0aGVuIHRoaXMKICogICBjYXNlIHdpbGwgYmUgZGlzcGxheWVkLiBJZiB0aGUgc2FtZSBtYXRjaCBhcHBlYXJzIG11bHRpcGxlIHRpbWVzLCBhbGwgdGhlCiAqICAgZWxlbWVudHMgd2lsbCBiZSBkaXNwbGF5ZWQuCiAqICogYG5nU3dpdGNoRGVmYXVsdGA6IHRoZSBkZWZhdWx0IGNhc2Ugd2hlbiBubyBvdGhlciBjYXNlIG1hdGNoLiBJZiB0aGVyZQogKiAgIGFyZSBtdWx0aXBsZSBkZWZhdWx0IGNhc2VzLCBhbGwgb2YgdGhlbSB3aWxsIGJlIGRpc3BsYXllZCB3aGVuIG5vIG90aGVyCiAqICAgY2FzZSBtYXRjaC4KICoKICoKICogQGV4YW1wbGUKICA8ZXhhbXBsZSBtb2R1bGU9InN3aXRjaEV4YW1wbGUiIGRlcHM9ImFuZ3VsYXItYW5pbWF0ZS5qcyIgYW5pbWF0aW9ucz0idHJ1ZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0ic2VsZWN0aW9uIiBuZy1vcHRpb25zPSJpdGVtIGZvciBpdGVtIGluIGl0ZW1zIj4KICAgICAgICA8L3NlbGVjdD4KICAgICAgICA8dHQ+c2VsZWN0aW9uPXt7c2VsZWN0aW9ufX08L3R0PgogICAgICAgIDxoci8+CiAgICAgICAgPGRpdiBjbGFzcz0iYW5pbWF0ZS1zd2l0Y2gtY29udGFpbmVyIgogICAgICAgICAgbmctc3dpdGNoIG9uPSJzZWxlY3Rpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbmltYXRlLXN3aXRjaCIgbmctc3dpdGNoLXdoZW49InNldHRpbmdzIj5TZXR0aW5ncyBEaXY8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5pbWF0ZS1zd2l0Y2giIG5nLXN3aXRjaC13aGVuPSJob21lIj5Ib21lIFNwYW48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5pbWF0ZS1zd2l0Y2giIG5nLXN3aXRjaC1kZWZhdWx0PmRlZmF1bHQ8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICBhbmd1bGFyLm1vZHVsZSgnc3dpdGNoRXhhbXBsZScsIFsnbmdBbmltYXRlJ10pCiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS5pdGVtcyA9IFsnc2V0dGluZ3MnLCAnaG9tZScsICdvdGhlciddOwogICAgICAgICAgJHNjb3BlLnNlbGVjdGlvbiA9ICRzY29wZS5pdGVtc1swXTsKICAgICAgICB9XSk7CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJhbmltYXRpb25zLmNzcyI+CiAgICAgIC5hbmltYXRlLXN3aXRjaC1jb250YWluZXIgewogICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlOwogICAgICAgIGJhY2tncm91bmQ6d2hpdGU7CiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsKICAgICAgICBoZWlnaHQ6NDBweDsKICAgICAgICBvdmVyZmxvdzpoaWRkZW47CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLXN3aXRjaCB7CiAgICAgICAgcGFkZGluZzoxMHB4OwogICAgICB9CgogICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctYW5pbWF0ZSB7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7CiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzOwoKICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTsKICAgICAgICB0b3A6MDsKICAgICAgICBsZWZ0OjA7CiAgICAgICAgcmlnaHQ6MDsKICAgICAgICBib3R0b206MDsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSwKICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWVudGVyIHsKICAgICAgICB0b3A6LTUwcHg7CiAgICAgIH0KICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWxlYXZlLAogICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHsKICAgICAgICB0b3A6MDsKICAgICAgfQogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0icHJvdHJhY3Rvci5qcyIgdHlwZT0icHJvdHJhY3RvciI+CiAgICAgIHZhciBzd2l0Y2hFbGVtID0gZWxlbWVudChieS5jc3MoJ1tuZy1zd2l0Y2hdJykpOwogICAgICB2YXIgc2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgnc2VsZWN0aW9uJykpOwoKICAgICAgaXQoJ3Nob3VsZCBzdGFydCBpbiBzZXR0aW5ncycsIGZ1bmN0aW9uKCkgewogICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvU2V0dGluZ3MgRGl2Lyk7CiAgICAgIH0pOwogICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0byBob21lJywgZnVuY3Rpb24oKSB7CiAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMSkuY2xpY2soKTsKICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0hvbWUgU3Bhbi8pOwogICAgICB9KTsKICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgZGVmYXVsdCcsIGZ1bmN0aW9uKCkgewogICAgICAgIHNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDIpLmNsaWNrKCk7CiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9kZWZhdWx0Lyk7CiAgICAgIH0pOwogICAgPC9maWxlPgogIDwvZXhhbXBsZT4KICovCnZhciBuZ1N3aXRjaERpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0VBJywKICAgIHJlcXVpcmU6ICduZ1N3aXRjaCcsCgogICAgLy8gYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlCiAgICBjb250cm9sbGVyOiBbJyRzY29wZScsIGZ1bmN0aW9uIG5nU3dpdGNoQ29udHJvbGxlcigpIHsKICAgICB0aGlzLmNhc2VzID0ge307CiAgICB9XSwKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBuZ1N3aXRjaENvbnRyb2xsZXIpIHsKICAgICAgdmFyIHdhdGNoRXhwciA9IGF0dHIubmdTd2l0Y2ggfHwgYXR0ci5vbiwKICAgICAgICAgIHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBbXSwKICAgICAgICAgIHNlbGVjdGVkRWxlbWVudHMgPSBbXSwKICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBbXSwKICAgICAgICAgIHNlbGVjdGVkU2NvcGVzID0gW107CgogICAgICBzY29wZS4kd2F0Y2god2F0Y2hFeHByLCBmdW5jdGlvbiBuZ1N3aXRjaFdhdGNoQWN0aW9uKHZhbHVlKSB7CiAgICAgICAgdmFyIGksIGlpOwogICAgICAgIGZvciAoaSA9IDAsIGlpID0gcHJldmlvdXNFbGVtZW50cy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7CiAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzW2ldLnJlbW92ZSgpOwogICAgICAgIH0KICAgICAgICBwcmV2aW91c0VsZW1lbnRzLmxlbmd0aCA9IDA7CgogICAgICAgIGZvciAoaSA9IDAsIGlpID0gc2VsZWN0ZWRTY29wZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkgewogICAgICAgICAgdmFyIHNlbGVjdGVkID0gZ2V0QmxvY2tOb2RlcyhzZWxlY3RlZEVsZW1lbnRzW2ldLmNsb25lKTsKICAgICAgICAgIHNlbGVjdGVkU2NvcGVzW2ldLiRkZXN0cm95KCk7CiAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzW2ldID0gc2VsZWN0ZWQ7CiAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShzZWxlY3RlZCwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMuc3BsaWNlKGksIDEpOwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLmxlbmd0aCA9IDA7CiAgICAgICAgc2VsZWN0ZWRTY29wZXMubGVuZ3RoID0gMDsKCiAgICAgICAgaWYgKChzZWxlY3RlZFRyYW5zY2x1ZGVzID0gbmdTd2l0Y2hDb250cm9sbGVyLmNhc2VzWychJyArIHZhbHVlXSB8fCBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJz8nXSkpIHsKICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHIuY2hhbmdlKTsKICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRUcmFuc2NsdWRlcywgZnVuY3Rpb24oc2VsZWN0ZWRUcmFuc2NsdWRlKSB7CiAgICAgICAgICAgIHNlbGVjdGVkVHJhbnNjbHVkZS50cmFuc2NsdWRlKGZ1bmN0aW9uKGNhc2VFbGVtZW50LCBzZWxlY3RlZFNjb3BlKSB7CiAgICAgICAgICAgICAgc2VsZWN0ZWRTY29wZXMucHVzaChzZWxlY3RlZFNjb3BlKTsKICAgICAgICAgICAgICB2YXIgYW5jaG9yID0gc2VsZWN0ZWRUcmFuc2NsdWRlLmVsZW1lbnQ7CiAgICAgICAgICAgICAgY2FzZUVsZW1lbnRbY2FzZUVsZW1lbnQubGVuZ3RoKytdID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIGVuZCBuZ1N3aXRjaFdoZW46ICcpOwogICAgICAgICAgICAgIHZhciBibG9jayA9IHsgY2xvbmU6IGNhc2VFbGVtZW50IH07CgogICAgICAgICAgICAgIHNlbGVjdGVkRWxlbWVudHMucHVzaChibG9jayk7CiAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2FzZUVsZW1lbnQsIGFuY2hvci5wYXJlbnQoKSwgYW5jaG9yKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH07Cn1dOwoKdmFyIG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsKICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsCiAgcHJpb3JpdHk6IDEyMDAsCiAgcmVxdWlyZTogJ15uZ1N3aXRjaCcsCiAgbXVsdGlFbGVtZW50OiB0cnVlLAogIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCwgJHRyYW5zY2x1ZGUpIHsKICAgIGN0cmwuY2FzZXNbJyEnICsgYXR0cnMubmdTd2l0Y2hXaGVuXSA9IChjdHJsLmNhc2VzWychJyArIGF0dHJzLm5nU3dpdGNoV2hlbl0gfHwgW10pOwogICAgY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dLnB1c2goeyB0cmFuc2NsdWRlOiAkdHJhbnNjbHVkZSwgZWxlbWVudDogZWxlbWVudCB9KTsKICB9Cn0pOwoKdmFyIG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsKICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsCiAgcHJpb3JpdHk6IDEyMDAsCiAgcmVxdWlyZTogJ15uZ1N3aXRjaCcsCiAgbXVsdGlFbGVtZW50OiB0cnVlLAogIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkgewogICAgY3RybC5jYXNlc1snPyddID0gKGN0cmwuY2FzZXNbJz8nXSB8fCBbXSk7CiAgICBjdHJsLmNhc2VzWyc/J10ucHVzaCh7IHRyYW5zY2x1ZGU6ICR0cmFuc2NsdWRlLCBlbGVtZW50OiBlbGVtZW50IH0pOwogICB9Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmdUcmFuc2NsdWRlCiAqIEByZXN0cmljdCBFQUMKICoKICogQGRlc2NyaXB0aW9uCiAqIERpcmVjdGl2ZSB0aGF0IG1hcmtzIHRoZSBpbnNlcnRpb24gcG9pbnQgZm9yIHRoZSB0cmFuc2NsdWRlZCBET00gb2YgdGhlIG5lYXJlc3QgcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHVzZXMgdHJhbnNjbHVzaW9uLgogKgogKiBBbnkgZXhpc3RpbmcgY29udGVudCBvZiB0aGUgZWxlbWVudCB0aGF0IHRoaXMgZGlyZWN0aXZlIGlzIHBsYWNlZCBvbiB3aWxsIGJlIHJlbW92ZWQgYmVmb3JlIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGlzIGluc2VydGVkLgogKgogKiBAZWxlbWVudCBBTlkKICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGUgbW9kdWxlPSJ0cmFuc2NsdWRlRXhhbXBsZSI+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBhbmd1bGFyLm1vZHVsZSgndHJhbnNjbHVkZUV4YW1wbGUnLCBbXSkKICAgICAgICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpewogICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSwKICAgICAgICAgICAgICAgc2NvcGU6IHsgdGl0bGU6J0AnIH0sCiAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgYmxhY2s7Ij4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6IGdyYXkiPnt7dGl0bGV9fTwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAnPG5nLXRyYW5zY2x1ZGU+PC9uZy10cmFuc2NsdWRlPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicKICAgICAgICAgICAgIH07CiAgICAgICAgIH0pCiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJ0xvcmVtIElwc3VtJzsKICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdOZXF1ZSBwb3JybyBxdWlzcXVhbSBlc3QgcXVpIGRvbG9yZW0gaXBzdW0gcXVpYSBkb2xvci4uLic7CiAgICAgICAgIH1dKTsKICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJFeGFtcGxlQ29udHJvbGxlciI+CiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD0idGl0bGUiPjxicj4KICAgICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPSJ0ZXh0Ij48L3RleHRhcmVhPiA8YnIvPgogICAgICAgICA8cGFuZSB0aXRsZT0ie3t0aXRsZX19Ij57e3RleHR9fTwvcGFuZT4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJwcm90cmFjdG9yLmpzIiB0eXBlPSJwcm90cmFjdG9yIj4KICAgICAgICBpdCgnc2hvdWxkIGhhdmUgdHJhbnNjbHVkZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0aXRsZScpKTsKICAgICAgICAgIHRpdGxlRWxlbWVudC5jbGVhcigpOwogICAgICAgICAgdGl0bGVFbGVtZW50LnNlbmRLZXlzKCdUSVRMRScpOwogICAgICAgICAgdmFyIHRleHRFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGV4dCcpKTsKICAgICAgICAgIHRleHRFbGVtZW50LmNsZWFyKCk7CiAgICAgICAgICB0ZXh0RWxlbWVudC5zZW5kS2V5cygnVEVYVCcpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGl0bGUnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdUSVRMRScpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGV4dCcpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RFWFQnKTsKICAgICAgICB9KTsKICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICoKICovCnZhciBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7CiAgcmVzdHJpY3Q6ICdFQUMnLAogIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgY29udHJvbGxlciwgJHRyYW5zY2x1ZGUpIHsKICAgIGlmICghJHRyYW5zY2x1ZGUpIHsKICAgICAgdGhyb3cgbWluRXJyKCduZ1RyYW5zY2x1ZGUnKSgnb3JwaGFuJywKICAgICAgICdJbGxlZ2FsIHVzZSBvZiBuZ1RyYW5zY2x1ZGUgZGlyZWN0aXZlIGluIHRoZSB0ZW1wbGF0ZSEgJyArCiAgICAgICAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIGZvdW5kLiAnICsKICAgICAgICdFbGVtZW50OiB7MH0nLAogICAgICAgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTsKICAgIH0KCiAgICAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSkgewogICAgICAkZWxlbWVudC5lbXB0eSgpOwogICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpOwogICAgfSk7CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIHNjcmlwdAogKiBAcmVzdHJpY3QgRQogKgogKiBAZGVzY3JpcHRpb24KICogTG9hZCB0aGUgY29udGVudCBvZiBhIGA8c2NyaXB0PmAgZWxlbWVudCBpbnRvIHtAbGluayBuZy4kdGVtcGxhdGVDYWNoZSBgJHRlbXBsYXRlQ2FjaGVgfSwgc28gdGhhdCB0aGUKICogdGVtcGxhdGUgY2FuIGJlIHVzZWQgYnkge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUgYG5nSW5jbHVkZWB9LAogKiB7QGxpbmsgbmdSb3V0ZS5kaXJlY3RpdmU6bmdWaWV3IGBuZ1ZpZXdgfSwgb3Ige0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS4gVGhlIHR5cGUgb2YgdGhlCiAqIGA8c2NyaXB0PmAgZWxlbWVudCBtdXN0IGJlIHNwZWNpZmllZCBhcyBgdGV4dC9uZy10ZW1wbGF0ZWAsIGFuZCBhIGNhY2hlIG5hbWUgZm9yIHRoZSB0ZW1wbGF0ZSBtdXN0IGJlCiAqIGFzc2lnbmVkIHRocm91Z2ggdGhlIGVsZW1lbnQncyBgaWRgLCB3aGljaCBjYW4gdGhlbiBiZSB1c2VkIGFzIGEgZGlyZWN0aXZlJ3MgYHRlbXBsYXRlVXJsYC4KICoKICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgTXVzdCBiZSBzZXQgdG8gYCd0ZXh0L25nLXRlbXBsYXRlJ2AuCiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDYWNoZSBuYW1lIG9mIHRoZSB0ZW1wbGF0ZS4KICoKICogQGV4YW1wbGUKICA8ZXhhbXBsZT4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8c2NyaXB0IHR5cGU9InRleHQvbmctdGVtcGxhdGUiIGlkPSIvdHBsLmh0bWwiPgogICAgICAgIENvbnRlbnQgb2YgdGhlIHRlbXBsYXRlLgogICAgICA8L3NjcmlwdD4KCiAgICAgIDxhIG5nLWNsaWNrPSJjdXJyZW50VHBsPScvdHBsLmh0bWwnIiBpZD0idHBsLWxpbmsiPkxvYWQgaW5saW5lZCB0ZW1wbGF0ZTwvYT4KICAgICAgPGRpdiBpZD0idHBsLWNvbnRlbnQiIG5nLWluY2x1ZGUgc3JjPSJjdXJyZW50VHBsIj48L2Rpdj4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUgZGVmaW5lZCBpbnNpZGUgc2NyaXB0IHRhZycsIGZ1bmN0aW9uKCkgewogICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjdHBsLWxpbmsnKSkuY2xpY2soKTsKICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJyN0cGwtY29udGVudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgb2YgdGhlIHRlbXBsYXRlLyk7CiAgICAgIH0pOwogICAgPC9maWxlPgogIDwvZXhhbXBsZT4KICovCnZhciBzY3JpcHREaXJlY3RpdmUgPSBbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdFJywKICAgIHRlcm1pbmFsOiB0cnVlLAogICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikgewogICAgICBpZiAoYXR0ci50eXBlID09ICd0ZXh0L25nLXRlbXBsYXRlJykgewogICAgICAgIHZhciB0ZW1wbGF0ZVVybCA9IGF0dHIuaWQsCiAgICAgICAgICAgIC8vIElFIGlzIG5vdCBjb25zaXN0ZW50LCBpbiBzY3JpcHRzIHdlIGhhdmUgdG8gcmVhZCAudGV4dCBidXQgaW4gb3RoZXIgbm9kZXMgd2UgaGF2ZSB0byByZWFkIC50ZXh0Q29udGVudAogICAgICAgICAgICB0ZXh0ID0gZWxlbWVudFswXS50ZXh0OwoKICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodGVtcGxhdGVVcmwsIHRleHQpOwogICAgICB9CiAgICB9CiAgfTsKfV07Cgp2YXIgbmdPcHRpb25zTWluRXJyID0gbWluRXJyKCduZ09wdGlvbnMnKTsKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgc2VsZWN0CiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBIVE1MIGBTRUxFQ1RgIGVsZW1lbnQgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy4KICoKICogIyBgbmdPcHRpb25zYAogKgogKiBUaGUgYG5nT3B0aW9uc2AgYXR0cmlidXRlIGNhbiBiZSB1c2VkIHRvIGR5bmFtaWNhbGx5IGdlbmVyYXRlIGEgbGlzdCBvZiBgPG9wdGlvbj5gCiAqIGVsZW1lbnRzIGZvciB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50IHVzaW5nIHRoZSBhcnJheSBvciBvYmplY3Qgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGUKICogYG5nT3B0aW9uc2AgY29tcHJlaGVuc2lvbl9leHByZXNzaW9uLgogKgogKiBXaGVuIGFuIGl0ZW0gaW4gdGhlIGA8c2VsZWN0PmAgbWVudSBpcyBzZWxlY3RlZCwgdGhlIGFycmF5IGVsZW1lbnQgb3Igb2JqZWN0IHByb3BlcnR5CiAqIHJlcHJlc2VudGVkIGJ5IHRoZSBzZWxlY3RlZCBvcHRpb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgaWRlbnRpZmllZCBieSB0aGUgYG5nTW9kZWxgCiAqIGRpcmVjdGl2ZS4KICoKICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAqICoqTm90ZToqKiBgbmdNb2RlbGAgY29tcGFyZXMgYnkgcmVmZXJlbmNlLCBub3QgdmFsdWUuIFRoaXMgaXMgaW1wb3J0YW50IHdoZW4gYmluZGluZyB0byBhbgogKiBhcnJheSBvZiBvYmplY3RzLiBTZWUgYW4gZXhhbXBsZSBbaW4gdGhpcyBqc2ZpZGRsZV0oaHR0cDovL2pzZmlkZGxlLm5ldC9xV3pUYi8pLgogKiA8L2Rpdj4KICoKICogT3B0aW9uYWxseSwgYSBzaW5nbGUgaGFyZC1jb2RlZCBgPG9wdGlvbj5gIGVsZW1lbnQsIHdpdGggdGhlIHZhbHVlIHNldCB0byBhbiBlbXB0eSBzdHJpbmcsIGNhbgogKiBiZSBuZXN0ZWQgaW50byB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50LiBUaGlzIGVsZW1lbnQgd2lsbCB0aGVuIHJlcHJlc2VudCB0aGUgYG51bGxgIG9yICJub3Qgc2VsZWN0ZWQiCiAqIG9wdGlvbi4gU2VlIGV4YW1wbGUgYmVsb3cgZm9yIGRlbW9uc3RyYXRpb24uCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKk5vdGU6KiogYG5nT3B0aW9uc2AgcHJvdmlkZXMgYW4gaXRlcmF0b3IgZmFjaWxpdHkgZm9yIHRoZSBgPG9wdGlvbj5gIGVsZW1lbnQgd2hpY2ggc2hvdWxkIGJlIHVzZWQgaW5zdGVhZAogKiBvZiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fSB3aGVuIHlvdSB3YW50IHRoZQogKiBgc2VsZWN0YCBtb2RlbCB0byBiZSBib3VuZCB0byBhIG5vbi1zdHJpbmcgdmFsdWUuIFRoaXMgaXMgYmVjYXVzZSBhbiBvcHRpb24gZWxlbWVudCBjYW4gb25seQogKiBiZSBib3VuZCB0byBzdHJpbmcgdmFsdWVzIGF0IHByZXNlbnQuCiAqIDwvZGl2PgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBUaGUgY29udHJvbCBpcyBjb25zaWRlcmVkIHZhbGlkIG9ubHkgaWYgdmFsdWUgaXMgZW50ZXJlZC4KICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mCiAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLgogKiBAcGFyYW0ge2NvbXByZWhlbnNpb25fZXhwcmVzc2lvbj19IG5nT3B0aW9ucyBpbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBmb3JtczoKICoKICogICAqIGZvciBhcnJheSBkYXRhIHNvdXJjZXM6CiAqICAgICAqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YAogKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAKICogICAgICogYGxhYmVsYCAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgCiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgICoqYHRyYWNrIGJ5YCoqIGB0cmFja2V4cHJgCiAqICAgKiBmb3Igb2JqZWN0IGRhdGEgc291cmNlczoKICogICAgICogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGAKICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGAKICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvciAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgCiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYAogKiAgICAgICAgICoqYGZvcmAgYChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGAKICoKICogV2hlcmU6CiAqCiAqICAgKiBgYXJyYXlgIC8gYG9iamVjdGA6IGFuIGV4cHJlc3Npb24gd2hpY2ggZXZhbHVhdGVzIHRvIGFuIGFycmF5IC8gb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci4KICogICAqIGB2YWx1ZWA6IGxvY2FsIHZhcmlhYmxlIHdoaWNoIHdpbGwgcmVmZXIgdG8gZWFjaCBpdGVtIGluIHRoZSBgYXJyYXlgIG9yIGVhY2ggcHJvcGVydHkgdmFsdWUKICogICAgICBvZiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLgogKiAgICogYGtleWA6IGxvY2FsIHZhcmlhYmxlIHdoaWNoIHdpbGwgcmVmZXIgdG8gYSBwcm9wZXJ0eSBuYW1lIGluIGBvYmplY3RgIGR1cmluZyBpdGVyYXRpb24uCiAqICAgKiBgbGFiZWxgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHRoZSBsYWJlbCBmb3IgYDxvcHRpb24+YCBlbGVtZW50LiBUaGUKICogICAgIGBleHByZXNzaW9uYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZSBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS4KICogICAqIGBzZWxlY3RgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBtb2RlbCBvZiB0aGUgcGFyZW50IGA8c2VsZWN0PmAKICogICAgICBlbGVtZW50LiBJZiBub3Qgc3BlY2lmaWVkLCBgc2VsZWN0YCBleHByZXNzaW9uIHdpbGwgZGVmYXVsdCB0byBgdmFsdWVgLgogKiAgICogYGdyb3VwYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB1c2VkIHRvIGdyb3VwIG9wdGlvbnMgdXNpbmcgdGhlIGA8b3B0Z3JvdXA+YAogKiAgICAgIERPTSBlbGVtZW50LgogKiAgICogYHRyYWNrZXhwcmA6IFVzZWQgd2hlbiB3b3JraW5nIHdpdGggYW4gYXJyYXkgb2Ygb2JqZWN0cy4gVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZQogKiAgICAgIHVzZWQgdG8gaWRlbnRpZnkgdGhlIG9iamVjdHMgaW4gdGhlIGFycmF5LiBUaGUgYHRyYWNrZXhwcmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGUKICogICAgIGB2YWx1ZWAgdmFyaWFibGUgKGUuZy4gYHZhbHVlLnByb3BlcnR5TmFtZWApLgogKgogKiBAZXhhbXBsZQogICAgPGV4YW1wbGUgbW9kdWxlPSJzZWxlY3RFeGFtcGxlIj4KICAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPHNjcmlwdD4KICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc2VsZWN0RXhhbXBsZScsIFtdKQogICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHsKICAgICAgICAgICAgJHNjb3BlLmNvbG9ycyA9IFsKICAgICAgICAgICAgICB7bmFtZTonYmxhY2snLCBzaGFkZTonZGFyayd9LAogICAgICAgICAgICAgIHtuYW1lOid3aGl0ZScsIHNoYWRlOidsaWdodCd9LAogICAgICAgICAgICAgIHtuYW1lOidyZWQnLCBzaGFkZTonZGFyayd9LAogICAgICAgICAgICAgIHtuYW1lOidibHVlJywgc2hhZGU6J2RhcmsnfSwKICAgICAgICAgICAgICB7bmFtZToneWVsbG93Jywgc2hhZGU6J2xpZ2h0J30KICAgICAgICAgICAgXTsKICAgICAgICAgICAgJHNjb3BlLm15Q29sb3IgPSAkc2NvcGUuY29sb3JzWzJdOyAvLyByZWQKICAgICAgICAgIH1dKTsKICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkV4YW1wbGVDb250cm9sbGVyIj4KICAgICAgICAgIDx1bD4KICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD0iY29sb3IgaW4gY29sb3JzIj4KICAgICAgICAgICAgICBOYW1lOiA8aW5wdXQgbmctbW9kZWw9ImNvbG9yLm5hbWUiPgogICAgICAgICAgICAgIFs8YSBocmVmIG5nLWNsaWNrPSJjb2xvcnMuc3BsaWNlKCRpbmRleCwgMSkiPlg8L2E+XQogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgWzxhIGhyZWYgbmctY2xpY2s9ImNvbG9ycy5wdXNoKHt9KSI+YWRkPC9hPl0KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8aHIvPgogICAgICAgICAgQ29sb3IgKG51bGwgbm90IGFsbG93ZWQpOgogICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0ibXlDb2xvciIgbmctb3B0aW9ucz0iY29sb3IubmFtZSBmb3IgY29sb3IgaW4gY29sb3JzIj48L3NlbGVjdD48YnI+CgogICAgICAgICAgQ29sb3IgKG51bGwgYWxsb3dlZCk6CiAgICAgICAgICA8c3BhbiAgY2xhc3M9Im51bGxhYmxlIj4KICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0ibXlDb2xvciIgbmctb3B0aW9ucz0iY29sb3IubmFtZSBmb3IgY29sb3IgaW4gY29sb3JzIj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPi0tIGNob29zZSBjb2xvciAtLTwvb3B0aW9uPgogICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgIDwvc3Bhbj48YnIvPgoKICAgICAgICAgIENvbG9yIGdyb3VwZWQgYnkgc2hhZGU6CiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJteUNvbG9yIiBuZy1vcHRpb25zPSJjb2xvci5uYW1lIGdyb3VwIGJ5IGNvbG9yLnNoYWRlIGZvciBjb2xvciBpbiBjb2xvcnMiPgogICAgICAgICAgPC9zZWxlY3Q+PGJyLz4KCgogICAgICAgICAgU2VsZWN0IDxhIGhyZWYgbmctY2xpY2s9Im15Q29sb3IgPSB7IG5hbWU6J25vdCBpbiBsaXN0Jywgc2hhZGU6ICdvdGhlcicgfSI+Ym9ndXM8L2E+Ljxicj4KICAgICAgICAgIDxoci8+CiAgICAgICAgICBDdXJyZW50bHkgc2VsZWN0ZWQ6IHt7IHtzZWxlY3RlZF9jb2xvcjpteUNvbG9yfSAgfX0KICAgICAgICAgIDxkaXYgc3R5bGU9ImJvcmRlcjpzb2xpZCAxcHggYmxhY2s7IGhlaWdodDoyMHB4IgogICAgICAgICAgICAgICBuZy1zdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzpteUNvbG9yLm5hbWV9Ij4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2ZpbGU+CiAgICAgIDxmaWxlIG5hbWU9InByb3RyYWN0b3IuanMiIHR5cGU9InByb3RyYWN0b3IiPgogICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW9wdGlvbnMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdyZWQnKTsKICAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXlDb2xvcicpKS5maXJzdCgpLmNsaWNrKCk7CiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCdzZWxlY3RbbmctbW9kZWw9Im15Q29sb3IiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpOwogICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ2JsYWNrJyk7CiAgICAgICAgICAgZWxlbWVudChieS5jc3MoJy5udWxsYWJsZSBzZWxlY3RbbmctbW9kZWw9Im15Q29sb3IiXScpKS5jbGljaygpOwogICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LmNzcygnLm51bGxhYmxlIHNlbGVjdFtuZy1tb2RlbD0ibXlDb2xvciJdIG9wdGlvbicpKS5maXJzdCgpLmNsaWNrKCk7CiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygne3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9JykpLmdldFRleHQoKSkudG9NYXRjaCgnbnVsbCcpOwogICAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKi8KCnZhciBuZ09wdGlvbnNEaXJlY3RpdmUgPSB2YWx1ZUZuKHsKICByZXN0cmljdDogJ0EnLAogIHRlcm1pbmFsOiB0cnVlCn0pOwoKLy8ganNoaW50IG1heGxlbjogZmFsc2UKdmFyIHNlbGVjdERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCAnJHBhcnNlJywgZnVuY3Rpb24oJGNvbXBpbGUsICAgJHBhcnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAvLzAwMDAxMTExMTExMTExMDAwMDAwMDAwMDAyMjIyMjIyMjIyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzMzMzMzMzMzMzAwMDAwMDAwMDAwMDAwNDQ0NDQ0NDQ0NDQ0NDQ0MDAwMDAwMDAwNTU1NTU1NTU1NTU1NTU1MDAwMDAwMDY2NjY2NjY2NjY2NjY2NjAwMDAwMDAwMDAwMDAwMDc3Nzc3Nzc3NzcwMDAwMDAwMDAwMDAwMDAwMDAwODg4ODg4ODg4OAogIHZhciBOR19PUFRJT05TX1JFR0VYUCA9IC9eXHMqKFtcc1xTXSs/KSg/OlxzK2FzXHMrKFtcc1xTXSs/KSk/KD86XHMrZ3JvdXBccytieVxzKyhbXHNcU10rPykpP1xzK2ZvclxzKyg/OihbXCRcd11bXCRcd10qKXwoPzpcKFxzKihbXCRcd11bXCRcd10qKVxzKixccyooW1wkXHddW1wkXHddKilccypcKSkpXHMraW5ccysoW1xzXFNdKz8pKD86XHMrdHJhY2tccytieVxzKyhbXHNcU10rPykpPyQvLAogICAgICBudWxsTW9kZWxDdHJsID0geyRzZXRWaWV3VmFsdWU6IG5vb3B9OwovLyBqc2hpbnQgbWF4bGVuOiAxMDAKCiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRScsCiAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICc/bmdNb2RlbCddLAogICAgY29udHJvbGxlcjogWyckZWxlbWVudCcsICckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24oJGVsZW1lbnQsICRzY29wZSwgJGF0dHJzKSB7CiAgICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICAgIG9wdGlvbnNNYXAgPSB7fSwKICAgICAgICAgIG5nTW9kZWxDdHJsID0gbnVsbE1vZGVsQ3RybCwKICAgICAgICAgIG51bGxPcHRpb24sCiAgICAgICAgICB1bmtub3duT3B0aW9uOwoKCiAgICAgIHNlbGYuZGF0YWJvdW5kID0gJGF0dHJzLm5nTW9kZWw7CgoKICAgICAgc2VsZi5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfLCBudWxsT3B0aW9uXywgdW5rbm93bk9wdGlvbl8pIHsKICAgICAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsXzsKICAgICAgICBudWxsT3B0aW9uID0gbnVsbE9wdGlvbl87CiAgICAgICAgdW5rbm93bk9wdGlvbiA9IHVua25vd25PcHRpb25fOwogICAgICB9OwoKCiAgICAgIHNlbGYuYWRkT3B0aW9uID0gZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHsKICAgICAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgJyJvcHRpb24gdmFsdWUiJyk7CiAgICAgICAgb3B0aW9uc01hcFt2YWx1ZV0gPSB0cnVlOwoKICAgICAgICBpZiAobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA9PSB2YWx1ZSkgewogICAgICAgICAgJGVsZW1lbnQudmFsKHZhbHVlKTsKICAgICAgICAgIGlmICh1bmtub3duT3B0aW9uLnBhcmVudCgpKSB1bmtub3duT3B0aW9uLnJlbW92ZSgpOwogICAgICAgIH0KICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzgxNDU5CiAgICAgICAgLy8gQWRkaW5nIGFuIDxvcHRpb24gc2VsZWN0ZWQ9InNlbGVjdGVkIj4gZWxlbWVudCB0byBhIDxzZWxlY3QgcmVxdWlyZWQ9InJlcXVpcmVkIj4gc2hvdWxkCiAgICAgICAgLy8gYXV0b21hdGljYWxseSBzZWxlY3QgdGhlIG5ldyBlbGVtZW50CiAgICAgICAgaWYgKGVsZW1lbnRbMF0uaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7CiAgICAgICAgICBlbGVtZW50WzBdLnNlbGVjdGVkID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH07CgoKICAgICAgc2VsZi5yZW1vdmVPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIGlmICh0aGlzLmhhc09wdGlvbih2YWx1ZSkpIHsKICAgICAgICAgIGRlbGV0ZSBvcHRpb25zTWFwW3ZhbHVlXTsKICAgICAgICAgIGlmIChuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID09IHZhbHVlKSB7CiAgICAgICAgICAgIHRoaXMucmVuZGVyVW5rbm93bk9wdGlvbih2YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwoKCiAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKHZhbCkgewogICAgICAgIHZhciB1bmtub3duVmFsID0gJz8gJyArIGhhc2hLZXkodmFsKSArICcgPyc7CiAgICAgICAgdW5rbm93bk9wdGlvbi52YWwodW5rbm93blZhbCk7CiAgICAgICAgJGVsZW1lbnQucHJlcGVuZCh1bmtub3duT3B0aW9uKTsKICAgICAgICAkZWxlbWVudC52YWwodW5rbm93blZhbCk7CiAgICAgICAgdW5rbm93bk9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyBuZWVkZWQgZm9yIElFCiAgICAgIH07CgoKICAgICAgc2VsZi5oYXNPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiBvcHRpb25zTWFwLmhhc093blByb3BlcnR5KHZhbHVlKTsKICAgICAgfTsKCiAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gZGlzYWJsZSB1bmtub3duIG9wdGlvbiBzbyB0aGF0IHdlIGRvbid0IGRvIHdvcmsgd2hlbiB0aGUgd2hvbGUgc2VsZWN0IGlzIGJlaW5nIGRlc3Ryb3llZAogICAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IG5vb3A7CiAgICAgIH0pOwogICAgfV0sCgogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7CiAgICAgIC8vIGlmIG5nTW9kZWwgaXMgbm90IGRlZmluZWQsIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcKICAgICAgaWYgKCFjdHJsc1sxXSkgcmV0dXJuOwoKICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXSwKICAgICAgICAgIG5nTW9kZWxDdHJsID0gY3RybHNbMV0sCiAgICAgICAgICBtdWx0aXBsZSA9IGF0dHIubXVsdGlwbGUsCiAgICAgICAgICBvcHRpb25zRXhwID0gYXR0ci5uZ09wdGlvbnMsCiAgICAgICAgICBudWxsT3B0aW9uID0gZmFsc2UsIC8vIGlmIGZhbHNlLCB1c2VyIHdpbGwgbm90IGJlIGFibGUgdG8gc2VsZWN0IGl0ICh1c2VkIGJ5IG5nT3B0aW9ucykKICAgICAgICAgIGVtcHR5T3B0aW9uLAogICAgICAgICAgLy8gd2UgY2FuJ3QganVzdCBqcUxpdGUoJzxvcHRpb24+Jykgc2luY2UganFMaXRlIGlzIG5vdCBzbWFydCBlbm91Z2gKICAgICAgICAgIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLgogICAgICAgICAgb3B0aW9uVGVtcGxhdGUgPSBqcUxpdGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJykpLAogICAgICAgICAgb3B0R3JvdXBUZW1wbGF0ZSA9anFMaXRlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGdyb3VwJykpLAogICAgICAgICAgdW5rbm93bk9wdGlvbiA9IG9wdGlvblRlbXBsYXRlLmNsb25lKCk7CgogICAgICAvLyBmaW5kICJudWxsIiBvcHRpb24KICAgICAgZm9yKHZhciBpID0gMCwgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuKCksIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIGlmIChjaGlsZHJlbltpXS52YWx1ZSA9PT0gJycpIHsKICAgICAgICAgIGVtcHR5T3B0aW9uID0gbnVsbE9wdGlvbiA9IGNoaWxkcmVuLmVxKGkpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBzZWxlY3RDdHJsLmluaXQobmdNb2RlbEN0cmwsIG51bGxPcHRpb24sIHVua25vd25PcHRpb24pOwoKICAgICAgLy8gcmVxdWlyZWQgdmFsaWRhdG9yCiAgICAgIGlmIChtdWx0aXBsZSkgewogICAgICAgIG5nTW9kZWxDdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgIHJldHVybiAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwOwogICAgICAgIH07CiAgICAgIH0KCiAgICAgIGlmIChvcHRpb25zRXhwKSBzZXR1cEFzT3B0aW9ucyhzY29wZSwgZWxlbWVudCwgbmdNb2RlbEN0cmwpOwogICAgICBlbHNlIGlmIChtdWx0aXBsZSkgc2V0dXBBc011bHRpcGxlKHNjb3BlLCBlbGVtZW50LCBuZ01vZGVsQ3RybCk7CiAgICAgIGVsc2Ugc2V0dXBBc1NpbmdsZShzY29wZSwgZWxlbWVudCwgbmdNb2RlbEN0cmwsIHNlbGVjdEN0cmwpOwoKCiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCgoKICAgICAgZnVuY3Rpb24gc2V0dXBBc1NpbmdsZShzY29wZSwgc2VsZWN0RWxlbWVudCwgbmdNb2RlbEN0cmwsIHNlbGVjdEN0cmwpIHsKICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgdmlld1ZhbHVlID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTsKCiAgICAgICAgICBpZiAoc2VsZWN0Q3RybC5oYXNPcHRpb24odmlld1ZhbHVlKSkgewogICAgICAgICAgICBpZiAodW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgdW5rbm93bk9wdGlvbi5yZW1vdmUoKTsKICAgICAgICAgICAgc2VsZWN0RWxlbWVudC52YWwodmlld1ZhbHVlKTsKICAgICAgICAgICAgaWYgKHZpZXdWYWx1ZSA9PT0gJycpIGVtcHR5T3B0aW9uLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7IC8vIHRvIG1ha2UgSUU5IGhhcHB5CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmlld1ZhbHVlKSAmJiBlbXB0eU9wdGlvbikgewogICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQudmFsKCcnKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzZWxlY3RDdHJsLnJlbmRlclVua25vd25PcHRpb24odmlld1ZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAodW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgdW5rbm93bk9wdGlvbi5yZW1vdmUoKTsKICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShzZWxlY3RFbGVtZW50LnZhbCgpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBmdW5jdGlvbiBzZXR1cEFzTXVsdGlwbGUoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGN0cmwpIHsKICAgICAgICB2YXIgbGFzdFZpZXc7CiAgICAgICAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgaXRlbXMgPSBuZXcgSGFzaE1hcChjdHJsLiR2aWV3VmFsdWUpOwogICAgICAgICAgZm9yRWFjaChzZWxlY3RFbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHsKICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gaXNEZWZpbmVkKGl0ZW1zLmdldChvcHRpb24udmFsdWUpKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIC8vIHdlIGhhdmUgdG8gZG8gaXQgb24gZWFjaCB3YXRjaCBzaW5jZSBuZ01vZGVsIHdhdGNoZXMgcmVmZXJlbmNlLCBidXQKICAgICAgICAvLyB3ZSBuZWVkIHRvIHdvcmsgb2YgYW4gYXJyYXksIHNvIHdlIG5lZWQgdG8gc2VlIGlmIGFueXRoaW5nIHdhcyBpbnNlcnRlZC9yZW1vdmVkCiAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIHNlbGVjdE11bHRpcGxlV2F0Y2goKSB7CiAgICAgICAgICBpZiAoIWVxdWFscyhsYXN0VmlldywgY3RybC4kdmlld1ZhbHVlKSkgewogICAgICAgICAgICBsYXN0VmlldyA9IHNoYWxsb3dDb3B5KGN0cmwuJHZpZXdWYWx1ZSk7CiAgICAgICAgICAgIGN0cmwuJHJlbmRlcigpOwogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBzZWxlY3RFbGVtZW50Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGFycmF5ID0gW107CiAgICAgICAgICAgIGZvckVhY2goc2VsZWN0RWxlbWVudC5maW5kKCdvcHRpb24nKSwgZnVuY3Rpb24ob3B0aW9uKSB7CiAgICAgICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCkgewogICAgICAgICAgICAgICAgYXJyYXkucHVzaChvcHRpb24udmFsdWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShhcnJheSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gc2V0dXBBc09wdGlvbnMoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGN0cmwpIHsKICAgICAgICB2YXIgbWF0Y2g7CgogICAgICAgIGlmICghKG1hdGNoID0gb3B0aW9uc0V4cC5tYXRjaChOR19PUFRJT05TX1JFR0VYUCkpKSB7CiAgICAgICAgICB0aHJvdyBuZ09wdGlvbnNNaW5FcnIoJ2lleHAnLAogICAgICAgICAgICAiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICIgKwogICAgICAgICAgICAiJ19zZWxlY3RfIChhcyBfbGFiZWxfKT8gZm9yIChfa2V5XywpP192YWx1ZV8gaW4gX2NvbGxlY3Rpb25fJyIgKwogICAgICAgICAgICAiIGJ1dCBnb3QgJ3swfScuIEVsZW1lbnQ6IHsxfSIsCiAgICAgICAgICAgIG9wdGlvbnNFeHAsIHN0YXJ0aW5nVGFnKHNlbGVjdEVsZW1lbnQpKTsKICAgICAgICB9CgogICAgICAgIHZhciBkaXNwbGF5Rm4gPSAkcGFyc2UobWF0Y2hbMl0gfHwgbWF0Y2hbMV0pLAogICAgICAgICAgICB2YWx1ZU5hbWUgPSBtYXRjaFs0XSB8fCBtYXRjaFs2XSwKICAgICAgICAgICAga2V5TmFtZSA9IG1hdGNoWzVdLAogICAgICAgICAgICBncm91cEJ5Rm4gPSAkcGFyc2UobWF0Y2hbM10gfHwgJycpLAogICAgICAgICAgICB2YWx1ZUZuID0gJHBhcnNlKG1hdGNoWzJdID8gbWF0Y2hbMV0gOiB2YWx1ZU5hbWUpLAogICAgICAgICAgICB2YWx1ZXNGbiA9ICRwYXJzZShtYXRjaFs3XSksCiAgICAgICAgICAgIHRyYWNrID0gbWF0Y2hbOF0sCiAgICAgICAgICAgIHRyYWNrRm4gPSB0cmFjayA/ICRwYXJzZShtYXRjaFs4XSkgOiBudWxsLAogICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFycmF5IG9mIGFycmF5IG9mIGV4aXN0aW5nIG9wdGlvbiBncm91cHMgaW4gRE9NLgogICAgICAgICAgICAvLyBXZSB0cnkgdG8gcmV1c2UgdGhlc2UgaWYgcG9zc2libGUKICAgICAgICAgICAgLy8gLSBvcHRpb25Hcm91cHNDYWNoZVswXSBpcyB0aGUgb3B0aW9ucyB3aXRoIG5vIG9wdGlvbiBncm91cAogICAgICAgICAgICAvLyAtIG9wdGlvbkdyb3Vwc0NhY2hlWz9dWzBdIGlzIHRoZSBwYXJlbnQ6IGVpdGhlciB0aGUgU0VMRUNUIG9yIE9QVEdST1VQIGVsZW1lbnQKICAgICAgICAgICAgb3B0aW9uR3JvdXBzQ2FjaGUgPSBbW3tlbGVtZW50OiBzZWxlY3RFbGVtZW50LCBsYWJlbDonJ31dXTsKCiAgICAgICAgaWYgKG51bGxPcHRpb24pIHsKICAgICAgICAgIC8vIGNvbXBpbGUgdGhlIGVsZW1lbnQgc2luY2UgdGhlcmUgbWlnaHQgYmUgYmluZGluZ3MgaW4gaXQKICAgICAgICAgICRjb21waWxlKG51bGxPcHRpb24pKHNjb3BlKTsKCiAgICAgICAgICAvLyByZW1vdmUgdGhlIGNsYXNzLCB3aGljaCBpcyBhZGRlZCBhdXRvbWF0aWNhbGx5IGJlY2F1c2Ugd2UgcmVjb21waWxlIHRoZSBlbGVtZW50IGFuZCBpdAogICAgICAgICAgLy8gYmVjb21lcyB0aGUgY29tcGlsYXRpb24gcm9vdAogICAgICAgICAgbnVsbE9wdGlvbi5yZW1vdmVDbGFzcygnbmctc2NvcGUnKTsKCiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHJlbW92ZSBpdCBiZWZvcmUgY2FsbGluZyBzZWxlY3RFbGVtZW50LmVtcHR5KCkgYmVjYXVzZSBvdGhlcndpc2UgSUUgd2lsbAogICAgICAgICAgLy8gcmVtb3ZlIHRoZSBsYWJlbCBmcm9tIHRoZSBlbGVtZW50LiB3dGY/CiAgICAgICAgICBudWxsT3B0aW9uLnJlbW92ZSgpOwogICAgICAgIH0KCiAgICAgICAgLy8gY2xlYXIgY29udGVudHMsIHdlJ2xsIGFkZCB3aGF0J3MgbmVlZGVkIGJhc2VkIG9uIHRoZSBtb2RlbAogICAgICAgIHNlbGVjdEVsZW1lbnQuZW1wdHkoKTsKCiAgICAgICAgc2VsZWN0RWxlbWVudC5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBvcHRpb25Hcm91cCwKICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSB2YWx1ZXNGbihzY29wZSkgfHwgW10sCiAgICAgICAgICAgICAgICBsb2NhbHMgPSB7fSwKICAgICAgICAgICAgICAgIGtleSwgdmFsdWUsIG9wdGlvbkVsZW1lbnQsIGluZGV4LCBncm91cEluZGV4LCBsZW5ndGgsIGdyb3VwTGVuZ3RoLCB0cmFja0luZGV4OwoKICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7CiAgICAgICAgICAgICAgdmFsdWUgPSBbXTsKICAgICAgICAgICAgICBmb3IgKGdyb3VwSW5kZXggPSAwLCBncm91cExlbmd0aCA9IG9wdGlvbkdyb3Vwc0NhY2hlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgIGdyb3VwSW5kZXggPCBncm91cExlbmd0aDsKICAgICAgICAgICAgICAgICAgIGdyb3VwSW5kZXgrKykgewogICAgICAgICAgICAgICAgLy8gbGlzdCBvZiBvcHRpb25zIGZvciB0aGF0IGdyb3VwLiAoZmlyc3QgaXRlbSBoYXMgdGhlIHBhcmVudCkKICAgICAgICAgICAgICAgIG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzQ2FjaGVbZ3JvdXBJbmRleF07CgogICAgICAgICAgICAgICAgZm9yKGluZGV4ID0gMSwgbGVuZ3RoID0gb3B0aW9uR3JvdXAubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICAgICAgICBpZiAoKG9wdGlvbkVsZW1lbnQgPSBvcHRpb25Hcm91cFtpbmRleF0uZWxlbWVudClbMF0uc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgICAgICBrZXkgPSBvcHRpb25FbGVtZW50LnZhbCgpOwogICAgICAgICAgICAgICAgICAgIGlmIChrZXlOYW1lKSBsb2NhbHNba2V5TmFtZV0gPSBrZXk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrRm4pIHsKICAgICAgICAgICAgICAgICAgICAgIGZvciAodHJhY2tJbmRleCA9IDA7IHRyYWNrSW5kZXggPCBjb2xsZWN0aW9uLmxlbmd0aDsgdHJhY2tJbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gY29sbGVjdGlvblt0cmFja0luZGV4XTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrRm4oc2NvcGUsIGxvY2FscykgPT0ga2V5KSBicmVhazsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSBjb2xsZWN0aW9uW2tleV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2godmFsdWVGbihzY29wZSwgbG9jYWxzKSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAga2V5ID0gc2VsZWN0RWxlbWVudC52YWwoKTsKICAgICAgICAgICAgICBpZiAoa2V5ID09ICc/JykgewogICAgICAgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICcnKXsKICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbDsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHRyYWNrRm4pIHsKICAgICAgICAgICAgICAgICAgZm9yICh0cmFja0luZGV4ID0gMDsgdHJhY2tJbmRleCA8IGNvbGxlY3Rpb24ubGVuZ3RoOyB0cmFja0luZGV4KyspIHsKICAgICAgICAgICAgICAgICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IGNvbGxlY3Rpb25bdHJhY2tJbmRleF07CiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrRm4oc2NvcGUsIGxvY2FscykgPT0ga2V5KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlRm4oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gY29sbGVjdGlvbltrZXldOwogICAgICAgICAgICAgICAgICBpZiAoa2V5TmFtZSkgbG9jYWxzW2tleU5hbWVdID0ga2V5OwogICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlRm4oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSk7CiAgICAgICAgICAgIHJlbmRlcigpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIGN0cmwuJHJlbmRlciA9IHJlbmRlcjsKCiAgICAgICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbih2YWx1ZXNGbiwgcmVuZGVyKTsKICAgICAgICBpZiAoIG11bHRpcGxlICkgewogICAgICAgICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHsgcmV0dXJuIGN0cmwuJG1vZGVsVmFsdWU7IH0sIHJlbmRlcik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRTZWxlY3RlZFNldCgpIHsKICAgICAgICAgIHZhciBzZWxlY3RlZFNldCA9IGZhbHNlOwogICAgICAgICAgaWYgKG11bHRpcGxlKSB7CiAgICAgICAgICAgIHZhciBtb2RlbFZhbHVlID0gY3RybC4kbW9kZWxWYWx1ZTsKICAgICAgICAgICAgaWYgKHRyYWNrRm4gJiYgaXNBcnJheShtb2RlbFZhbHVlKSkgewogICAgICAgICAgICAgIHNlbGVjdGVkU2V0ID0gbmV3IEhhc2hNYXAoW10pOwogICAgICAgICAgICAgIHZhciBsb2NhbHMgPSB7fTsKICAgICAgICAgICAgICBmb3IgKHZhciB0cmFja0luZGV4ID0gMDsgdHJhY2tJbmRleCA8IG1vZGVsVmFsdWUubGVuZ3RoOyB0cmFja0luZGV4KyspIHsKICAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gbW9kZWxWYWx1ZVt0cmFja0luZGV4XTsKICAgICAgICAgICAgICAgIHNlbGVjdGVkU2V0LnB1dCh0cmFja0ZuKHNjb3BlLCBsb2NhbHMpLCBtb2RlbFZhbHVlW3RyYWNrSW5kZXhdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQgPSBuZXcgSGFzaE1hcChtb2RlbFZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHNlbGVjdGVkU2V0OwogICAgICAgIH0KCgogICAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgICAgICAgICAvLyBUZW1wb3JhcnkgbG9jYXRpb24gZm9yIHRoZSBvcHRpb24gZ3JvdXBzIGJlZm9yZSB3ZSByZW5kZXIgdGhlbQogICAgICAgICAgdmFyIG9wdGlvbkdyb3VwcyA9IHsnJzpbXX0sCiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lcyA9IFsnJ10sCiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lLAogICAgICAgICAgICAgIG9wdGlvbkdyb3VwLAogICAgICAgICAgICAgIG9wdGlvbiwKICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCwgZXhpc3RpbmdPcHRpb25zLCBleGlzdGluZ09wdGlvbiwKICAgICAgICAgICAgICBtb2RlbFZhbHVlID0gY3RybC4kbW9kZWxWYWx1ZSwKICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW10sCiAgICAgICAgICAgICAga2V5cyA9IGtleU5hbWUgPyBzb3J0ZWRLZXlzKHZhbHVlcykgOiB2YWx1ZXMsCiAgICAgICAgICAgICAga2V5LAogICAgICAgICAgICAgIGdyb3VwTGVuZ3RoLCBsZW5ndGgsCiAgICAgICAgICAgICAgZ3JvdXBJbmRleCwgaW5kZXgsCiAgICAgICAgICAgICAgbG9jYWxzID0ge30sCiAgICAgICAgICAgICAgc2VsZWN0ZWQsCiAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQgPSBnZXRTZWxlY3RlZFNldCgpLAogICAgICAgICAgICAgIGxhc3RFbGVtZW50LAogICAgICAgICAgICAgIGVsZW1lbnQsCiAgICAgICAgICAgICAgbGFiZWw7CgoKICAgICAgICAgIC8vIFdlIG5vdyBidWlsZCB1cCB0aGUgbGlzdCBvZiBvcHRpb25zIHdlIG5lZWQgKHdlIG1lcmdlIGxhdGVyKQogICAgICAgICAgZm9yIChpbmRleCA9IDA7IGxlbmd0aCA9IGtleXMubGVuZ3RoLCBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewoKICAgICAgICAgICAga2V5ID0gaW5kZXg7CiAgICAgICAgICAgIGlmIChrZXlOYW1lKSB7CiAgICAgICAgICAgICAga2V5ID0ga2V5c1tpbmRleF07CiAgICAgICAgICAgICAgaWYgKCBrZXkuY2hhckF0KDApID09PSAnJCcgKSBjb250aW51ZTsKICAgICAgICAgICAgICBsb2NhbHNba2V5TmFtZV0gPSBrZXk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWVzW2tleV07CgogICAgICAgICAgICBvcHRpb25Hcm91cE5hbWUgPSBncm91cEJ5Rm4oc2NvcGUsIGxvY2FscykgfHwgJyc7CiAgICAgICAgICAgIGlmICghKG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzW29wdGlvbkdyb3VwTmFtZV0pKSB7CiAgICAgICAgICAgICAgb3B0aW9uR3JvdXAgPSBvcHRpb25Hcm91cHNbb3B0aW9uR3JvdXBOYW1lXSA9IFtdOwogICAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZXMucHVzaChvcHRpb25Hcm91cE5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkgewogICAgICAgICAgICAgIHNlbGVjdGVkID0gaXNEZWZpbmVkKAogICAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQucmVtb3ZlKHRyYWNrRm4gPyB0cmFja0ZuKHNjb3BlLCBsb2NhbHMpIDogdmFsdWVGbihzY29wZSwgbG9jYWxzKSkKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGlmICh0cmFja0ZuKSB7CiAgICAgICAgICAgICAgICB2YXIgbW9kZWxDYXN0ID0ge307CiAgICAgICAgICAgICAgICBtb2RlbENhc3RbdmFsdWVOYW1lXSA9IG1vZGVsVmFsdWU7CiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRyYWNrRm4oc2NvcGUsIG1vZGVsQ2FzdCkgPT09IHRyYWNrRm4oc2NvcGUsIGxvY2Fscyk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gbW9kZWxWYWx1ZSA9PT0gdmFsdWVGbihzY29wZSwgbG9jYWxzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQgPSBzZWxlY3RlZFNldCB8fCBzZWxlY3RlZDsgLy8gc2VlIGlmIGF0IGxlYXN0IG9uZSBpdGVtIGlzIHNlbGVjdGVkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7IC8vIHdoYXQgd2lsbCBiZSBzZWVuIGJ5IHRoZSB1c2VyCgogICAgICAgICAgICAvLyBkb2luZyBkaXNwbGF5Rm4oc2NvcGUsIGxvY2FscykgfHwgJycgb3ZlcndyaXRlcyB6ZXJvIHZhbHVlcwogICAgICAgICAgICBsYWJlbCA9IGlzRGVmaW5lZChsYWJlbCkgPyBsYWJlbCA6ICcnOwogICAgICAgICAgICBvcHRpb25Hcm91cC5wdXNoKHsKICAgICAgICAgICAgICAvLyBlaXRoZXIgdGhlIGluZGV4IGludG8gYXJyYXkgb3Iga2V5IGZyb20gb2JqZWN0CiAgICAgICAgICAgICAgaWQ6IHRyYWNrRm4gPyB0cmFja0ZuKHNjb3BlLCBsb2NhbHMpIDogKGtleU5hbWUgPyBrZXlzW2luZGV4XSA6IGluZGV4KSwKICAgICAgICAgICAgICBsYWJlbDogbGFiZWwsCiAgICAgICAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkICAgICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBpZiB3ZSBzaG91bGQgYmUgc2VsZWN0ZWQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIW11bHRpcGxlKSB7CiAgICAgICAgICAgIGlmIChudWxsT3B0aW9uIHx8IG1vZGVsVmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAvLyBpbnNlcnQgbnVsbCBvcHRpb24gaWYgd2UgaGF2ZSBhIHBsYWNlaG9sZGVyLCBvciB0aGUgbW9kZWwgaXMgbnVsbAogICAgICAgICAgICAgIG9wdGlvbkdyb3Vwc1snJ10udW5zaGlmdCh7aWQ6JycsIGxhYmVsOicnLCBzZWxlY3RlZDohc2VsZWN0ZWRTZXR9KTsKICAgICAgICAgICAgfSBlbHNlIGlmICghc2VsZWN0ZWRTZXQpIHsKICAgICAgICAgICAgICAvLyBvcHRpb24gY291bGQgbm90IGJlIGZvdW5kLCB3ZSBoYXZlIHRvIGluc2VydCB0aGUgdW5kZWZpbmVkIGl0ZW0KICAgICAgICAgICAgICBvcHRpb25Hcm91cHNbJyddLnVuc2hpZnQoe2lkOic/JywgbGFiZWw6JycsIHNlbGVjdGVkOnRydWV9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIE5vdyB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgbGlzdCBvZiBET00gbm9kZXMgdG8gbWF0Y2ggdGhlIG9wdGlvbkdyb3VwcyB3ZSBjb21wdXRlZCBhYm92ZQogICAgICAgICAgZm9yIChncm91cEluZGV4ID0gMCwgZ3JvdXBMZW5ndGggPSBvcHRpb25Hcm91cE5hbWVzLmxlbmd0aDsKICAgICAgICAgICAgICAgZ3JvdXBJbmRleCA8IGdyb3VwTGVuZ3RoOwogICAgICAgICAgICAgICBncm91cEluZGV4KyspIHsKICAgICAgICAgICAgLy8gY3VycmVudCBvcHRpb24gZ3JvdXAgbmFtZSBvciAnJyBpZiBubyBncm91cAogICAgICAgICAgICBvcHRpb25Hcm91cE5hbWUgPSBvcHRpb25Hcm91cE5hbWVzW2dyb3VwSW5kZXhdOwoKICAgICAgICAgICAgLy8gbGlzdCBvZiBvcHRpb25zIGZvciB0aGF0IGdyb3VwLiAoZmlyc3QgaXRlbSBoYXMgdGhlIHBhcmVudCkKICAgICAgICAgICAgb3B0aW9uR3JvdXAgPSBvcHRpb25Hcm91cHNbb3B0aW9uR3JvdXBOYW1lXTsKCiAgICAgICAgICAgIGlmIChvcHRpb25Hcm91cHNDYWNoZS5sZW5ndGggPD0gZ3JvdXBJbmRleCkgewogICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ3JvdyB0aGUgb3B0aW9uR3JvdXBzCiAgICAgICAgICAgICAgZXhpc3RpbmdQYXJlbnQgPSB7CiAgICAgICAgICAgICAgICBlbGVtZW50OiBvcHRHcm91cFRlbXBsYXRlLmNsb25lKCkuYXR0cignbGFiZWwnLCBvcHRpb25Hcm91cE5hbWUpLAogICAgICAgICAgICAgICAgbGFiZWw6IG9wdGlvbkdyb3VwLmxhYmVsCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMgPSBbZXhpc3RpbmdQYXJlbnRdOwogICAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlLnB1c2goZXhpc3RpbmdPcHRpb25zKTsKICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LmFwcGVuZChleGlzdGluZ1BhcmVudC5lbGVtZW50KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMgPSBvcHRpb25Hcm91cHNDYWNoZVtncm91cEluZGV4XTsKICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCA9IGV4aXN0aW5nT3B0aW9uc1swXTsgIC8vIGVpdGhlciBTRUxFQ1QgKG5vIGdyb3VwKSBvciBPUFRHUk9VUCBlbGVtZW50CgogICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgT1BUR1JPVVAgbGFiZWwgaWYgbm90IHRoZSBzYW1lLgogICAgICAgICAgICAgIGlmIChleGlzdGluZ1BhcmVudC5sYWJlbCAhPSBvcHRpb25Hcm91cE5hbWUpIHsKICAgICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50LmVsZW1lbnQuYXR0cignbGFiZWwnLCBleGlzdGluZ1BhcmVudC5sYWJlbCA9IG9wdGlvbkdyb3VwTmFtZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBsYXN0RWxlbWVudCA9IG51bGw7ICAvLyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nCiAgICAgICAgICAgIGZvcihpbmRleCA9IDAsIGxlbmd0aCA9IG9wdGlvbkdyb3VwLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAgICBvcHRpb24gPSBvcHRpb25Hcm91cFtpbmRleF07CiAgICAgICAgICAgICAgaWYgKChleGlzdGluZ09wdGlvbiA9IGV4aXN0aW5nT3B0aW9uc1tpbmRleCsxXSkpIHsKICAgICAgICAgICAgICAgIC8vIHJldXNlIGVsZW1lbnRzCiAgICAgICAgICAgICAgICBsYXN0RWxlbWVudCA9IGV4aXN0aW5nT3B0aW9uLmVsZW1lbnQ7CiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdPcHRpb24ubGFiZWwgIT09IG9wdGlvbi5sYWJlbCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC50ZXh0KGV4aXN0aW5nT3B0aW9uLmxhYmVsID0gb3B0aW9uLmxhYmVsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ09wdGlvbi5pZCAhPT0gb3B0aW9uLmlkKSB7CiAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50LnZhbChleGlzdGluZ09wdGlvbi5pZCA9IG9wdGlvbi5pZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsYXN0RWxlbWVudC5wcm9wKCdzZWxlY3RlZCcpIHByb3ZpZGVkIGJ5IGpRdWVyeSBoYXMgc2lkZS1lZmZlY3RzCiAgICAgICAgICAgICAgICBpZiAobGFzdEVsZW1lbnRbMF0uc2VsZWN0ZWQgIT09IG9wdGlvbi5zZWxlY3RlZCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5wcm9wKCdzZWxlY3RlZCcsIChleGlzdGluZ09wdGlvbi5zZWxlY3RlZCA9IG9wdGlvbi5zZWxlY3RlZCkpOwogICAgICAgICAgICAgICAgICBpZiAobXNpZSkgewogICAgICAgICAgICAgICAgICAgIC8vIFNlZSAjNzY5MgogICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzZWxlY3RlZCBpdGVtIHdvdWxkbid0IHZpc3VhbGx5IHVwZGF0ZSBvbiBJRSB3aXRob3V0IHRoaXMuCiAgICAgICAgICAgICAgICAgICAgLy8gVGVzdGVkIG9uIFdpbjc6IElFOSwgSUUxMCBhbmQgSUUxMS4gRnV0dXJlIElFcyBzaG91bGQgYmUgdGVzdGVkIGFzIHdlbGwKICAgICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5wcm9wKCdzZWxlY3RlZCcsIGV4aXN0aW5nT3B0aW9uLnNlbGVjdGVkKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBncm93IGVsZW1lbnRzCgogICAgICAgICAgICAgICAgLy8gaWYgaXQncyBhIG51bGwgb3B0aW9uCiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmlkID09PSAnJyAmJiBudWxsT3B0aW9uKSB7CiAgICAgICAgICAgICAgICAgIC8vIHB1dCBiYWNrIHRoZSBwcmUtY29tcGlsZWQgZWxlbWVudAogICAgICAgICAgICAgICAgICBlbGVtZW50ID0gbnVsbE9wdGlvbjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIC8vIGpRdWVyeSh2MS40LjIpIEJ1ZzogV2Ugc2hvdWxkIGJlIGFibGUgdG8gY2hhaW4gdGhlIG1ldGhvZCBjYWxscywgYnV0CiAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnkgb24gc29tZSBicm93c2VyIHRoZSAudGV4dCgpIHJldHVybnMgYSBzdHJpbmcKICAgICAgICAgICAgICAgICAgLy8gcmF0aGVyIHRoZW4gdGhlIGVsZW1lbnQuCiAgICAgICAgICAgICAgICAgIChlbGVtZW50ID0gb3B0aW9uVGVtcGxhdGUuY2xvbmUoKSkKICAgICAgICAgICAgICAgICAgICAgIC52YWwob3B0aW9uLmlkKQogICAgICAgICAgICAgICAgICAgICAgLnByb3AoJ3NlbGVjdGVkJywgb3B0aW9uLnNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NlbGVjdGVkJywgb3B0aW9uLnNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgICAgLnRleHQob3B0aW9uLmxhYmVsKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMucHVzaChleGlzdGluZ09wdGlvbiA9IHsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb24ubGFiZWwsCiAgICAgICAgICAgICAgICAgICAgaWQ6IG9wdGlvbi5pZCwKICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogb3B0aW9uLnNlbGVjdGVkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChsYXN0RWxlbWVudCkgewogICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5hZnRlcihlbGVtZW50KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50LmVsZW1lbnQuYXBwZW5kKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLyByZW1vdmUgYW55IGV4Y2Vzc2l2ZSBPUFRJT05zIGluIGEgZ3JvdXAKICAgICAgICAgICAgaW5kZXgrKzsgLy8gaW5jcmVtZW50IHNpbmNlIHRoZSBleGlzdGluZ09wdGlvbnNbMF0gaXMgcGFyZW50IGVsZW1lbnQgbm90IE9QVElPTgogICAgICAgICAgICB3aGlsZShleGlzdGluZ09wdGlvbnMubGVuZ3RoID4gaW5kZXgpIHsKICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMucG9wKCkuZWxlbWVudC5yZW1vdmUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLy8gcmVtb3ZlIGFueSBleGNlc3NpdmUgT1BUR1JPVVBzIGZyb20gc2VsZWN0CiAgICAgICAgICB3aGlsZShvcHRpb25Hcm91cHNDYWNoZS5sZW5ndGggPiBncm91cEluZGV4KSB7CiAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlLnBvcCgpWzBdLmVsZW1lbnQucmVtb3ZlKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKfV07Cgp2YXIgb3B0aW9uRGlyZWN0aXZlID0gWyckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbigkaW50ZXJwb2xhdGUpIHsKICB2YXIgbnVsbFNlbGVjdEN0cmwgPSB7CiAgICBhZGRPcHRpb246IG5vb3AsCiAgICByZW1vdmVPcHRpb246IG5vb3AKICB9OwoKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdFJywKICAgIHByaW9yaXR5OiAxMDAsCiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7CiAgICAgIGlmIChpc1VuZGVmaW5lZChhdHRyLnZhbHVlKSkgewogICAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGVsZW1lbnQudGV4dCgpLCB0cnVlKTsKICAgICAgICBpZiAoIWludGVycG9sYXRlRm4pIHsKICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBlbGVtZW50LnRleHQoKSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgdmFyIHNlbGVjdEN0cmxOYW1lID0gJyRzZWxlY3RDb250cm9sbGVyJywKICAgICAgICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQoKSwKICAgICAgICAgICAgc2VsZWN0Q3RybCA9IHBhcmVudC5kYXRhKHNlbGVjdEN0cmxOYW1lKSB8fAogICAgICAgICAgICAgIHBhcmVudC5wYXJlbnQoKS5kYXRhKHNlbGVjdEN0cmxOYW1lKTsgLy8gaW4gY2FzZSB3ZSBhcmUgaW4gb3B0Z3JvdXAKCiAgICAgICAgaWYgKHNlbGVjdEN0cmwgJiYgc2VsZWN0Q3RybC5kYXRhYm91bmQpIHsKICAgICAgICAgIC8vIEZvciBzb21lIHJlYXNvbiBPcGVyYSBkZWZhdWx0cyB0byB0cnVlIGFuZCBpZiBub3Qgb3ZlcnJpZGRlbiB0aGlzIG1lc3NlcyB1cCB0aGUgcmVwZWF0ZXIuCiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRoZSB2aWV3IHRvIGRyaXZlIHRoZSBpbml0aWFsaXphdGlvbiBvZiB0aGUgbW9kZWwgYW55d2F5LgogICAgICAgICAgZWxlbWVudC5wcm9wKCdzZWxlY3RlZCcsIGZhbHNlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2VsZWN0Q3RybCA9IG51bGxTZWxlY3RDdHJsOwogICAgICAgIH0KCiAgICAgICAgaWYgKGludGVycG9sYXRlRm4pIHsKICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZVdhdGNoQWN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBuZXdWYWwpOwogICAgICAgICAgICBpZiAob2xkVmFsICE9PSBuZXdWYWwpIHsKICAgICAgICAgICAgICBzZWxlY3RDdHJsLnJlbW92ZU9wdGlvbihvbGRWYWwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNlbGVjdEN0cmwuYWRkT3B0aW9uKG5ld1ZhbCwgZWxlbWVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2VsZWN0Q3RybC5hZGRPcHRpb24oYXR0ci52YWx1ZSwgZWxlbWVudCk7CiAgICAgICAgfQoKICAgICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVPcHRpb24oYXR0ci52YWx1ZSk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfTsKfV07Cgp2YXIgc3R5bGVEaXJlY3RpdmUgPSB2YWx1ZUZuKHsKICByZXN0cmljdDogJ0UnLAogIHRlcm1pbmFsOiBmYWxzZQp9KTsKCiAgaWYgKHdpbmRvdy5hbmd1bGFyLmJvb3RzdHJhcCkgewogICAgLy9Bbmd1bGFySlMgaXMgYWxyZWFkeSBsb2FkZWQsIHNvIHdlIGNhbiByZXR1cm4gaGVyZS4uLgogICAgY29uc29sZS5sb2coJ1dBUk5JTkc6IFRyaWVkIHRvIGxvYWQgYW5ndWxhciBtb3JlIHRoYW4gb25jZS4nKTsKICAgIHJldHVybjsKICB9CgogIC8vdHJ5IHRvIGJpbmQgdG8ganF1ZXJ5IG5vdyBzbyB0aGF0IG9uZSBjYW4gd3JpdGUganFMaXRlKGRvY3VtZW50KS5yZWFkeSgpCiAgLy9idXQgd2Ugd2lsbCByZWJpbmQgb24gYm9vdHN0cmFwIGFnYWluLgogIGJpbmRKUXVlcnkoKTsKCiAgcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpOwoKICBqcUxpdGUoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgYW5ndWxhckluaXQoZG9jdW1lbnQsIGJvb3RzdHJhcCk7CiAgfSk7Cgp9KSh3aW5kb3csIGRvY3VtZW50KTsKCiF3aW5kb3cuYW5ndWxhci4kJGNzcCgpICYmIHdpbmRvdy5hbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT0idGV4dC9jc3MiPkBjaGFyc2V0ICJVVEYtOCI7W25nXFw6Y2xvYWtdLFtuZy1jbG9ha10sW2RhdGEtbmctY2xvYWtdLFt4LW5nLWNsb2FrXSwubmctY2xvYWssLngtbmctY2xvYWssLm5nLWhpZGU6bm90KC5uZy1hbmltYXRlKXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9bmdcXDpmb3Jte2Rpc3BsYXk6YmxvY2s7fTwvc3R5bGU+Jyk7",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 15:22:58 GMT",
                    "Content-Length": "846996",
                    "Date": "Sat, 08 Nov 2014 15:22:58 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}