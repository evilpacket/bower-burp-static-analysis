{
    "url": "http://localhost:9999/feedhenry/fh-js-sdk/dist/feedhenry-forms.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location</b> and written to <b>the 'setAttribute()' function of a DOM element</b> via the following statements:<ul><li>var xir = (xiRedirectUrl) ? xiRedirectUrl : window.location;</li><li>this.setAttribute('xiRedirectUrl', xir);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/feedhenry/fh-js-sdk/dist/feedhenry-forms.js",
                "path": "/feedhenry/fh-js-sdk/dist/feedhenry-forms.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9mZWVkaGVucnkvZmgtanMtc2RrL2Rpc3QvZmVlZGhlbnJ5LWZvcm1zLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "IWZ1bmN0aW9uKGUpe2lmKCJvYmplY3QiPT10eXBlb2YgZXhwb3J0cyltb2R1bGUuZXhwb3J0cz1lKCk7ZWxzZSBpZigiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShlKTtlbHNle3ZhciBmOyJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P2Y9d2luZG93OiJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2Y9Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZiYmKGY9c2VsZiksZi5mZWVkaGVucnk9ZSgpfX0oZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09ImZ1bmN0aW9uIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKGdsb2JhbCl7CjtfX2Jyb3dzZXJpZnlfc2hpbV9yZXF1aXJlX189X2RlcmVxXzsoZnVuY3Rpb24gYnJvd3NlcmlmeVNoaW0obW9kdWxlLCBleHBvcnRzLCBfZGVyZXFfLCBkZWZpbmUsIGJyb3dzZXJpZnlfc2hpbV9fZGVmaW5lX19tb2R1bGVfX2V4cG9ydF9fKSB7Ci8qCiBDcnlwdG9KUyB2My4xLjIKIGNvcmUuanMKIGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwogKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlCiAqLwovKioKICogQ3J5cHRvSlMgY29yZSBjb21wb25lbnRzLgogKi8KdmFyIENyeXB0b0pTID0gQ3J5cHRvSlMgfHwgKGZ1bmN0aW9uIChNYXRoLCB1bmRlZmluZWQpIHsKICAvKioKICAgKiBDcnlwdG9KUyBuYW1lc3BhY2UuCiAgICovCiAgdmFyIEMgPSB7fTsKCiAgLyoqCiAgICogTGlicmFyeSBuYW1lc3BhY2UuCiAgICovCiAgdmFyIENfbGliID0gQy5saWIgPSB7fTsKCiAgLyoqCiAgICogQmFzZSBvYmplY3QgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UuCiAgICovCiAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlID0gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIEYoKSB7fQoKICAgIHJldHVybiB7CiAgICAgIC8qKgogICAgICAgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBvYmplY3QuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVycmlkZXMgUHJvcGVydGllcyB0byBjb3B5IGludG8gdGhlIG5ldyBvYmplY3QuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuCiAgICAgICAqCiAgICAgICAqIEBzdGF0aWMKICAgICAgICoKICAgICAgICogQGV4YW1wbGUKICAgICAgICoKICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoewogICAgICAgICAgICAgKiAgICAgICAgIGZpZWxkOiAndmFsdWUnLAogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgKiAgICAgICAgIH0KICAgICAgICAgICAgICogICAgIH0pOwogICAgICAgKi8KICAgICAgZXh0ZW5kOiBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7CiAgICAgICAgLy8gU3Bhd24KICAgICAgICBGLnByb3RvdHlwZSA9IHRoaXM7CiAgICAgICAgdmFyIHN1YnR5cGUgPSBuZXcgRigpOwoKICAgICAgICAvLyBBdWdtZW50CiAgICAgICAgaWYgKG92ZXJyaWRlcykgewogICAgICAgICAgc3VidHlwZS5taXhJbihvdmVycmlkZXMpOwogICAgICAgIH0KCiAgICAgICAgLy8gQ3JlYXRlIGRlZmF1bHQgaW5pdGlhbGl6ZXIKICAgICAgICBpZiAoIXN1YnR5cGUuaGFzT3duUHJvcGVydHkoJ2luaXQnKSkgewogICAgICAgICAgc3VidHlwZS5pbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzdWJ0eXBlLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgLy8gSW5pdGlhbGl6ZXIncyBwcm90b3R5cGUgaXMgdGhlIHN1YnR5cGUgb2JqZWN0CiAgICAgICAgc3VidHlwZS5pbml0LnByb3RvdHlwZSA9IHN1YnR5cGU7CgogICAgICAgIC8vIFJlZmVyZW5jZSBzdXBlcnR5cGUKICAgICAgICBzdWJ0eXBlLiRzdXBlciA9IHRoaXM7CgogICAgICAgIHJldHVybiBzdWJ0eXBlOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqIEV4dGVuZHMgdGhpcyBvYmplY3QgYW5kIHJ1bnMgdGhlIGluaXQgbWV0aG9kLgogICAgICAgKiBBcmd1bWVudHMgdG8gY3JlYXRlKCkgd2lsbCBiZSBwYXNzZWQgdG8gaW5pdCgpLgogICAgICAgKgogICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LgogICAgICAgKgogICAgICAgKiBAc3RhdGljCiAgICAgICAqCiAgICAgICAqIEBleGFtcGxlCiAgICAgICAqCiAgICAgICAqICAgICB2YXIgaW5zdGFuY2UgPSBNeVR5cGUuY3JlYXRlKCk7CiAgICAgICAqLwogICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmV4dGVuZCgpOwogICAgICAgIGluc3RhbmNlLmluaXQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7CgogICAgICAgIHJldHVybiBpbnN0YW5jZTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgb2JqZWN0LgogICAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBhZGQgc29tZSBsb2dpYyB3aGVuIHlvdXIgb2JqZWN0cyBhcmUgY3JlYXRlZC4KICAgICAgICoKICAgICAgICogQGV4YW1wbGUKICAgICAgICoKICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoewogICAgICAgICAgICAgKiAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICogICAgICAgICAgICAgLy8gLi4uCiAgICAgICAgICAgICAqICAgICAgICAgfQogICAgICAgICAgICAgKiAgICAgfSk7CiAgICAgICAqLwogICAgICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQ29waWVzIHByb3BlcnRpZXMgaW50byB0aGlzIG9iamVjdC4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgdG8gbWl4IGluLgogICAgICAgKgogICAgICAgKiBAZXhhbXBsZQogICAgICAgKgogICAgICAgKiAgICAgTXlUeXBlLm1peEluKHsKICAgICAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJwogICAgICAgICAgICAgKiAgICAgfSk7CiAgICAgICAqLwogICAgICBtaXhJbjogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHsKICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eU5hbWUgaW4gcHJvcGVydGllcykgewogICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkgewogICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBJRSB3b24ndCBjb3B5IHRvU3RyaW5nIHVzaW5nIHRoZSBsb29wIGFib3ZlCiAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoJ3RvU3RyaW5nJykpIHsKICAgICAgICAgIHRoaXMudG9TdHJpbmcgPSBwcm9wZXJ0aWVzLnRvU3RyaW5nOwogICAgICAgIH0KICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIG9iamVjdC4KICAgICAgICoKICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuCiAgICAgICAqCiAgICAgICAqIEBleGFtcGxlCiAgICAgICAqCiAgICAgICAqICAgICB2YXIgY2xvbmUgPSBpbnN0YW5jZS5jbG9uZSgpOwogICAgICAgKi8KICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7CiAgICAgIH0KICAgIH07CiAgfSgpKTsKCiAgLyoqCiAgICogQW4gYXJyYXkgb2YgMzItYml0IHdvcmRzLgogICAqCiAgICogQHByb3BlcnR5IHtBcnJheX0gd29yZHMgVGhlIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy4KICAgKiBAcHJvcGVydHkge251bWJlcn0gc2lnQnl0ZXMgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGlzIHdvcmQgYXJyYXkuCiAgICovCiAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheSA9IEJhc2UuZXh0ZW5kKHsKICAgIC8qKgogICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIHdvcmQgYXJyYXkuCiAgICAgKgogICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2lnQnl0ZXMgKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoZSB3b3Jkcy4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoKTsKICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddKTsKICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddLCA2KTsKICAgICAqLwogICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykgewogICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTsKCiAgICAgIGlmIChzaWdCeXRlcyAhPSB1bmRlZmluZWQpIHsKICAgICAgICB0aGlzLnNpZ0J5dGVzID0gc2lnQnl0ZXM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHdvcmRzLmxlbmd0aCAqIDQ7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBDb252ZXJ0cyB0aGlzIHdvcmQgYXJyYXkgdG8gYSBzdHJpbmcuCiAgICAgKgogICAgICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyIChPcHRpb25hbCkgVGhlIGVuY29kaW5nIHN0cmF0ZWd5IHRvIHVzZS4gRGVmYXVsdDogQ3J5cHRvSlMuZW5jLkhleAogICAgICoKICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZ2lmaWVkIHdvcmQgYXJyYXkuCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheSArICcnOwogICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoKTsKICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5LnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KTsKICAgICAqLwogICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChlbmNvZGVyKSB7CiAgICAgIHJldHVybiAoZW5jb2RlciB8fCBIZXgpLnN0cmluZ2lmeSh0aGlzKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBDb25jYXRlbmF0ZXMgYSB3b3JkIGFycmF5IHRvIHRoaXMgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5IHRvIGFwcGVuZC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoaXMgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB3b3JkQXJyYXkxLmNvbmNhdCh3b3JkQXJyYXkyKTsKICAgICAqLwogICAgY29uY2F0OiBmdW5jdGlvbiAod29yZEFycmF5KSB7CiAgICAgIC8vIFNob3J0Y3V0cwogICAgICB2YXIgdGhpc1dvcmRzID0gdGhpcy53b3JkczsKICAgICAgdmFyIHRoYXRXb3JkcyA9IHdvcmRBcnJheS53b3JkczsKICAgICAgdmFyIHRoaXNTaWdCeXRlcyA9IHRoaXMuc2lnQnl0ZXM7CiAgICAgIHZhciB0aGF0U2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7CgogICAgICAvLyBDbGFtcCBleGNlc3MgYml0cwogICAgICB0aGlzLmNsYW1wKCk7CgogICAgICAvLyBDb25jYXQKICAgICAgaWYgKHRoaXNTaWdCeXRlcyAlIDQpIHsKICAgICAgICAvLyBDb3B5IG9uZSBieXRlIGF0IGEgdGltZQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdFNpZ0J5dGVzOyBpKyspIHsKICAgICAgICAgIHZhciB0aGF0Qnl0ZSA9ICh0aGF0V29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmOwogICAgICAgICAgdGhpc1dvcmRzWyh0aGlzU2lnQnl0ZXMgKyBpKSA+Pj4gMl0gfD0gdGhhdEJ5dGUgPDwgKDI0IC0gKCh0aGlzU2lnQnl0ZXMgKyBpKSAlIDQpICogOCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHRoYXRXb3Jkcy5sZW5ndGggPiAweGZmZmYpIHsKICAgICAgICAvLyBDb3B5IG9uZSB3b3JkIGF0IGEgdGltZQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdFNpZ0J5dGVzOyBpICs9IDQpIHsKICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdID0gdGhhdFdvcmRzW2kgPj4+IDJdOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBDb3B5IGFsbCB3b3JkcyBhdCBvbmNlCiAgICAgICAgdGhpc1dvcmRzLnB1c2guYXBwbHkodGhpc1dvcmRzLCB0aGF0V29yZHMpOwogICAgICB9CiAgICAgIHRoaXMuc2lnQnl0ZXMgKz0gdGhhdFNpZ0J5dGVzOwoKICAgICAgLy8gQ2hhaW5hYmxlCiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvKioKICAgICAqIFJlbW92ZXMgaW5zaWduaWZpY2FudCBiaXRzLgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHdvcmRBcnJheS5jbGFtcCgpOwogICAgICovCiAgICBjbGFtcDogZnVuY3Rpb24gKCkgewogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIHdvcmRzID0gdGhpcy53b3JkczsKICAgICAgdmFyIHNpZ0J5dGVzID0gdGhpcy5zaWdCeXRlczsKCiAgICAgIC8vIENsYW1wCiAgICAgIHdvcmRzW3NpZ0J5dGVzID4+PiAyXSAmPSAweGZmZmZmZmZmIDw8ICgzMiAtIChzaWdCeXRlcyAlIDQpICogOCk7CiAgICAgIHdvcmRzLmxlbmd0aCA9IE1hdGguY2VpbChzaWdCeXRlcyAvIDQpOwogICAgfSwKCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBjbG9uZS4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgY2xvbmUgPSB3b3JkQXJyYXkuY2xvbmUoKTsKICAgICAqLwogICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpOwogICAgICBjbG9uZS53b3JkcyA9IHRoaXMud29yZHMuc2xpY2UoMCk7CgogICAgICByZXR1cm4gY2xvbmU7CiAgICB9LAoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhIHdvcmQgYXJyYXkgZmlsbGVkIHdpdGggcmFuZG9tIGJ5dGVzLgogICAgICoKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuQnl0ZXMgVGhlIG51bWJlciBvZiByYW5kb20gYnl0ZXMgdG8gZ2VuZXJhdGUuCiAgICAgKgogICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcmFuZG9tIHdvcmQgYXJyYXkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbSgxNik7CiAgICAgKi8KICAgIHJhbmRvbTogZnVuY3Rpb24gKG5CeXRlcykgewogICAgICB2YXIgd29yZHMgPSBbXTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuQnl0ZXM7IGkgKz0gNCkgewogICAgICAgIHdvcmRzLnB1c2goKE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCkgfCAwKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbkJ5dGVzKTsKICAgIH0KICB9KTsKCiAgLyoqCiAgICogRW5jb2RlciBuYW1lc3BhY2UuCiAgICovCiAgdmFyIENfZW5jID0gQy5lbmMgPSB7fTsKCiAgLyoqCiAgICogSGV4IGVuY29kaW5nIHN0cmF0ZWd5LgogICAqLwogIHZhciBIZXggPSBDX2VuYy5IZXggPSB7CiAgICAvKioKICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIGhleCBzdHJpbmcuCiAgICAgKgogICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXggc3RyaW5nLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkod29yZEFycmF5KTsKICAgICAqLwogICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7CiAgICAgIC8vIFNob3J0Y3V0cwogICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7CiAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlczsKCiAgICAgIC8vIENvbnZlcnQKICAgICAgdmFyIGhleENoYXJzID0gW107CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkrKykgewogICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjsKICAgICAgICBoZXhDaGFycy5wdXNoKChiaXRlID4+PiA0KS50b1N0cmluZygxNikpOwogICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgJiAweDBmKS50b1N0cmluZygxNikpOwogICAgICB9CgogICAgICByZXR1cm4gaGV4Q2hhcnMuam9pbignJyk7CiAgICB9LAoKICAgIC8qKgogICAgICogQ29udmVydHMgYSBoZXggc3RyaW5nIHRvIGEgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaGV4U3RyIFRoZSBoZXggc3RyaW5nLgogICAgICoKICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGhleFN0cmluZyk7CiAgICAgKi8KICAgIHBhcnNlOiBmdW5jdGlvbiAoaGV4U3RyKSB7CiAgICAgIC8vIFNob3J0Y3V0CiAgICAgIHZhciBoZXhTdHJMZW5ndGggPSBoZXhTdHIubGVuZ3RoOwoKICAgICAgLy8gQ29udmVydAogICAgICB2YXIgd29yZHMgPSBbXTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZXhTdHJMZW5ndGg7IGkgKz0gMikgewogICAgICAgIHdvcmRzW2kgPj4+IDNdIHw9IHBhcnNlSW50KGhleFN0ci5zdWJzdHIoaSwgMiksIDE2KSA8PCAoMjQgLSAoaSAlIDgpICogNCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIGhleFN0ckxlbmd0aCAvIDIpOwogICAgfQogIH07CgogIC8qKgogICAqIExhdGluMSBlbmNvZGluZyBzdHJhdGVneS4KICAgKi8KICB2YXIgTGF0aW4xID0gQ19lbmMuTGF0aW4xID0gewogICAgLyoqCiAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBMYXRpbjEgc3RyaW5nLgogICAgICoKICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuCiAgICAgKgogICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgTGF0aW4xIHN0cmluZy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIGxhdGluMVN0cmluZyA9IENyeXB0b0pTLmVuYy5MYXRpbjEuc3RyaW5naWZ5KHdvcmRBcnJheSk7CiAgICAgKi8KICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkgewogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzOwogICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7CgogICAgICAvLyBDb252ZXJ0CiAgICAgIHZhciBsYXRpbjFDaGFycyA9IFtdOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHsKICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7CiAgICAgICAgbGF0aW4xQ2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJpdGUpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGxhdGluMUNoYXJzLmpvaW4oJycpOwogICAgfSwKCiAgICAvKioKICAgICAqIENvbnZlcnRzIGEgTGF0aW4xIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IGxhdGluMVN0ciBUaGUgTGF0aW4xIHN0cmluZy4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkxhdGluMS5wYXJzZShsYXRpbjFTdHJpbmcpOwogICAgICovCiAgICBwYXJzZTogZnVuY3Rpb24gKGxhdGluMVN0cikgewogICAgICAvLyBTaG9ydGN1dAogICAgICB2YXIgbGF0aW4xU3RyTGVuZ3RoID0gbGF0aW4xU3RyLmxlbmd0aDsKCiAgICAgIC8vIENvbnZlcnQKICAgICAgdmFyIHdvcmRzID0gW107CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGF0aW4xU3RyTGVuZ3RoOyBpKyspIHsKICAgICAgICB3b3Jkc1tpID4+PiAyXSB8PSAobGF0aW4xU3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmKSA8PCAoMjQgLSAoaSAlIDQpICogOCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIGxhdGluMVN0ckxlbmd0aCk7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogVVRGLTggZW5jb2Rpbmcgc3RyYXRlZ3kuCiAgICovCiAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4ID0gewogICAgLyoqCiAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtOCBzdHJpbmcuCiAgICAgKgogICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtOCBzdHJpbmcuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciB1dGY4U3RyaW5nID0gQ3J5cHRvSlMuZW5jLlV0Zjguc3RyaW5naWZ5KHdvcmRBcnJheSk7CiAgICAgKi8KICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkgewogICAgICB0cnkgewogICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKExhdGluMS5zdHJpbmdpZnkod29yZEFycmF5KSkpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYWxmb3JtZWQgVVRGLTggZGF0YScpOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogQ29udmVydHMgYSBVVEYtOCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGY4U3RyIFRoZSBVVEYtOCBzdHJpbmcuCiAgICAgKgogICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHV0ZjhTdHJpbmcpOwogICAgICovCiAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjhTdHIpIHsKICAgICAgcmV0dXJuIExhdGluMS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodXRmOFN0cikpKTsKICAgIH0KICB9OwoKICAvKioKICAgKiBBYnN0cmFjdCBidWZmZXJlZCBibG9jayBhbGdvcml0aG0gdGVtcGxhdGUuCiAgICoKICAgKiBUaGUgcHJvcGVydHkgYmxvY2tTaXplIG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gYSBjb25jcmV0ZSBzdWJ0eXBlLgogICAqCiAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9taW5CdWZmZXJTaXplIFRoZSBudW1iZXIgb2YgYmxvY2tzIHRoYXQgc2hvdWxkIGJlIGtlcHQgdW5wcm9jZXNzZWQgaW4gdGhlIGJ1ZmZlci4gRGVmYXVsdDogMAogICAqLwogIHZhciBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQ19saWIuQnVmZmVyZWRCbG9ja0FsZ29yaXRobSA9IEJhc2UuZXh0ZW5kKHsKICAgIC8qKgogICAgICogUmVzZXRzIHRoaXMgYmxvY2sgYWxnb3JpdGhtJ3MgZGF0YSBidWZmZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldCgpOwogICAgICovCiAgICByZXNldDogZnVuY3Rpb24gKCkgewogICAgICAvLyBJbml0aWFsIHZhbHVlcwogICAgICB0aGlzLl9kYXRhID0gbmV3IFdvcmRBcnJheS5pbml0KCk7CiAgICAgIHRoaXMuX25EYXRhQnl0ZXMgPSAwOwogICAgfSwKCiAgICAvKioKICAgICAqIEFkZHMgbmV3IGRhdGEgdG8gdGhpcyBibG9jayBhbGdvcml0aG0ncyBidWZmZXIuCiAgICAgKgogICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGFwcGVuZC4gU3RyaW5ncyBhcmUgY29udmVydGVkIHRvIGEgV29yZEFycmF5IHVzaW5nIFVURi04LgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCgnZGF0YScpOwogICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCh3b3JkQXJyYXkpOwogICAgICovCiAgICBfYXBwZW5kOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBXb3JkQXJyYXksIGVsc2UgYXNzdW1lIFdvcmRBcnJheSBhbHJlYWR5CiAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJykgewogICAgICAgIGRhdGEgPSBVdGY4LnBhcnNlKGRhdGEpOwogICAgICB9CgogICAgICAvLyBBcHBlbmQKICAgICAgdGhpcy5fZGF0YS5jb25jYXQoZGF0YSk7CiAgICAgIHRoaXMuX25EYXRhQnl0ZXMgKz0gZGF0YS5zaWdCeXRlczsKICAgIH0sCgogICAgLyoqCiAgICAgKiBQcm9jZXNzZXMgYXZhaWxhYmxlIGRhdGEgYmxvY2tzLgogICAgICoKICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgX2RvUHJvY2Vzc0Jsb2NrKG9mZnNldCksIHdoaWNoIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgYSBjb25jcmV0ZSBzdWJ0eXBlLgogICAgICoKICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9GbHVzaCBXaGV0aGVyIGFsbCBibG9ja3MgYW5kIHBhcnRpYWwgYmxvY2tzIHNob3VsZCBiZSBwcm9jZXNzZWQuCiAgICAgKgogICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcHJvY2Vzc2VkIGRhdGEuCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIHByb2Nlc3NlZERhdGEgPSBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9wcm9jZXNzKCk7CiAgICAgKiAgICAgdmFyIHByb2Nlc3NlZERhdGEgPSBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7CiAgICAgKi8KICAgIF9wcm9jZXNzOiBmdW5jdGlvbiAoZG9GbHVzaCkgewogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhOwogICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkczsKICAgICAgdmFyIGRhdGFTaWdCeXRlcyA9IGRhdGEuc2lnQnl0ZXM7CiAgICAgIHZhciBibG9ja1NpemUgPSB0aGlzLmJsb2NrU2l6ZTsKICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDsKCiAgICAgIC8vIENvdW50IGJsb2NrcyByZWFkeQogICAgICB2YXIgbkJsb2Nrc1JlYWR5ID0gZGF0YVNpZ0J5dGVzIC8gYmxvY2tTaXplQnl0ZXM7CiAgICAgIGlmIChkb0ZsdXNoKSB7CiAgICAgICAgLy8gUm91bmQgdXAgdG8gaW5jbHVkZSBwYXJ0aWFsIGJsb2NrcwogICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGguY2VpbChuQmxvY2tzUmVhZHkpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFJvdW5kIGRvd24gdG8gaW5jbHVkZSBvbmx5IGZ1bGwgYmxvY2tzLAogICAgICAgIC8vIGxlc3MgdGhlIG51bWJlciBvZiBibG9ja3MgdGhhdCBtdXN0IHJlbWFpbiBpbiB0aGUgYnVmZmVyCiAgICAgICAgbkJsb2Nrc1JlYWR5ID0gTWF0aC5tYXgoKG5CbG9ja3NSZWFkeSB8IDApIC0gdGhpcy5fbWluQnVmZmVyU2l6ZSwgMCk7CiAgICAgIH0KCiAgICAgIC8vIENvdW50IHdvcmRzIHJlYWR5CiAgICAgIHZhciBuV29yZHNSZWFkeSA9IG5CbG9ja3NSZWFkeSAqIGJsb2NrU2l6ZTsKCiAgICAgIC8vIENvdW50IGJ5dGVzIHJlYWR5CiAgICAgIHZhciBuQnl0ZXNSZWFkeSA9IE1hdGgubWluKG5Xb3Jkc1JlYWR5ICogNCwgZGF0YVNpZ0J5dGVzKTsKCiAgICAgIC8vIFByb2Nlc3MgYmxvY2tzCiAgICAgIGlmIChuV29yZHNSZWFkeSkgewogICAgICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IG5Xb3Jkc1JlYWR5OyBvZmZzZXQgKz0gYmxvY2tTaXplKSB7CiAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWFsZ29yaXRobSBsb2dpYwogICAgICAgICAgdGhpcy5fZG9Qcm9jZXNzQmxvY2soZGF0YVdvcmRzLCBvZmZzZXQpOwogICAgICAgIH0KCiAgICAgICAgLy8gUmVtb3ZlIHByb2Nlc3NlZCB3b3JkcwogICAgICAgIHZhciBwcm9jZXNzZWRXb3JkcyA9IGRhdGFXb3Jkcy5zcGxpY2UoMCwgbldvcmRzUmVhZHkpOwogICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gbkJ5dGVzUmVhZHk7CiAgICAgIH0KCiAgICAgIC8vIFJldHVybiBwcm9jZXNzZWQgd29yZHMKICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdChwcm9jZXNzZWRXb3JkcywgbkJ5dGVzUmVhZHkpOwogICAgfSwKCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LgogICAgICoKICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGNsb25lLgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBjbG9uZSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uY2xvbmUoKTsKICAgICAqLwogICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpOwogICAgICBjbG9uZS5fZGF0YSA9IHRoaXMuX2RhdGEuY2xvbmUoKTsKCiAgICAgIHJldHVybiBjbG9uZTsKICAgIH0sCgogICAgX21pbkJ1ZmZlclNpemU6IDAKICB9KTsKCiAgLyoqCiAgICogQWJzdHJhY3QgaGFzaGVyIHRlbXBsYXRlLgogICAqCiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGhhc2hlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogMTYgKDUxMiBiaXRzKQogICAqLwogIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXIgPSBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLmV4dGVuZCh7CiAgICAvKioKICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy4KICAgICAqLwogICAgY2ZnOiBCYXNlLmV4dGVuZCgpLAoKICAgIC8qKgogICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGhhc2hlci4KICAgICAqCiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgaGFzaCBjb21wdXRhdGlvbi4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgaGFzaGVyID0gQ3J5cHRvSlMuYWxnby5TSEEyNTYuY3JlYXRlKCk7CiAgICAgKi8KICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHsKICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzCiAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7CgogICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXMKICAgICAgdGhpcy5yZXNldCgpOwogICAgfSwKCiAgICAvKioKICAgICAqIFJlc2V0cyB0aGlzIGhhc2hlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICBoYXNoZXIucmVzZXQoKTsKICAgICAqLwogICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgLy8gUmVzZXQgZGF0YSBidWZmZXIKICAgICAgQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldC5jYWxsKHRoaXMpOwoKICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWMKICAgICAgdGhpcy5fZG9SZXNldCgpOwogICAgfSwKCiAgICAvKioKICAgICAqIFVwZGF0ZXMgdGhpcyBoYXNoZXIgd2l0aCBhIG1lc3NhZ2UuCiAgICAgKgogICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIFRoZSBtZXNzYWdlIHRvIGFwcGVuZC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtIYXNoZXJ9IFRoaXMgaGFzaGVyLgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIGhhc2hlci51cGRhdGUoJ21lc3NhZ2UnKTsKICAgICAqICAgICBoYXNoZXIudXBkYXRlKHdvcmRBcnJheSk7CiAgICAgKi8KICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHsKICAgICAgLy8gQXBwZW5kCiAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTsKCiAgICAgIC8vIFVwZGF0ZSB0aGUgaGFzaAogICAgICB0aGlzLl9wcm9jZXNzKCk7CgogICAgICAvLyBDaGFpbmFibGUKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8qKgogICAgICogRmluYWxpemVzIHRoZSBoYXNoIGNvbXB1dGF0aW9uLgogICAgICogTm90ZSB0aGF0IHRoZSBmaW5hbGl6ZSBvcGVyYXRpb24gaXMgZWZmZWN0aXZlbHkgYSBkZXN0cnVjdGl2ZSwgcmVhZC1vbmNlIG9wZXJhdGlvbi4KICAgICAqCiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLgogICAgICoKICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoKTsKICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSgnbWVzc2FnZScpOwogICAgICogICAgIHZhciBoYXNoID0gaGFzaGVyLmZpbmFsaXplKHdvcmRBcnJheSk7CiAgICAgKi8KICAgIGZpbmFsaXplOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkgewogICAgICAvLyBGaW5hbCBtZXNzYWdlIHVwZGF0ZQogICAgICBpZiAobWVzc2FnZVVwZGF0ZSkgewogICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTsKICAgICAgfQoKICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWMKICAgICAgdmFyIGhhc2ggPSB0aGlzLl9kb0ZpbmFsaXplKCk7CgogICAgICByZXR1cm4gaGFzaDsKICAgIH0sCgogICAgYmxvY2tTaXplOiA1MTIvMzIsCgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgc2hvcnRjdXQgZnVuY3Rpb24gdG8gYSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLgogICAgICoKICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byBjcmVhdGUgYSBoZWxwZXIgZm9yLgogICAgICoKICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpOwogICAgICovCiAgICBfY3JlYXRlSGVscGVyOiBmdW5jdGlvbiAoaGFzaGVyKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwgY2ZnKSB7CiAgICAgICAgcmV0dXJuIG5ldyBoYXNoZXIuaW5pdChjZmcpLmZpbmFsaXplKG1lc3NhZ2UpOwogICAgICB9OwogICAgfSwKCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuCiAgICAgKgogICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaGVyIHRvIHVzZSBpbiB0aGlzIEhNQUMgaGVscGVyLgogICAgICoKICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBIbWFjU0hBMjU2ID0gQ3J5cHRvSlMubGliLkhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7CiAgICAgKi8KICAgIF9jcmVhdGVIbWFjSGVscGVyOiBmdW5jdGlvbiAoaGFzaGVyKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwga2V5KSB7CiAgICAgICAgcmV0dXJuIG5ldyBDX2FsZ28uSE1BQy5pbml0KGhhc2hlciwga2V5KS5maW5hbGl6ZShtZXNzYWdlKTsKICAgICAgfTsKICAgIH0KICB9KTsKCiAgLyoqCiAgICogQWxnb3JpdGhtIG5hbWVzcGFjZS4KICAgKi8KICB2YXIgQ19hbGdvID0gQy5hbGdvID0ge307CgogIHJldHVybiBDOwp9KE1hdGgpKTsKLyoKIENyeXB0b0pTIHYzLjEuMgogZW5jLWJhc2U2NC5qcwogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzCiAoYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2UKICovCihmdW5jdGlvbiAoKSB7CiAgLy8gU2hvcnRjdXRzCiAgdmFyIEMgPSBDcnlwdG9KUzsKICB2YXIgQ19saWIgPSBDLmxpYjsKICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwogIHZhciBDX2VuYyA9IEMuZW5jOwoKICAvKioKICAgKiBCYXNlNjQgZW5jb2Rpbmcgc3RyYXRlZ3kuCiAgICovCiAgdmFyIEJhc2U2NCA9IENfZW5jLkJhc2U2NCA9IHsKICAgIC8qKgogICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgQmFzZTY0IHN0cmluZy4KICAgICAqCiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LgogICAgICoKICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEJhc2U2NCBzdHJpbmcuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBiYXNlNjRTdHJpbmcgPSBDcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeSh3b3JkQXJyYXkpOwogICAgICovCiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHsKICAgICAgLy8gU2hvcnRjdXRzCiAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3JkczsKICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzOwogICAgICB2YXIgbWFwID0gdGhpcy5fbWFwOwoKICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHMKICAgICAgd29yZEFycmF5LmNsYW1wKCk7CgogICAgICAvLyBDb252ZXJ0CiAgICAgIHZhciBiYXNlNjRDaGFycyA9IFtdOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpICs9IDMpIHsKICAgICAgICB2YXIgYnl0ZTEgPSAod29yZHNbaSA+Pj4gMl0gICAgICAgPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgICAgICAgJiAweGZmOwogICAgICAgIHZhciBieXRlMiA9ICh3b3Jkc1soaSArIDEpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMSkgJSA0KSAqIDgpKSAmIDB4ZmY7CiAgICAgICAgdmFyIGJ5dGUzID0gKHdvcmRzWyhpICsgMikgPj4+IDJdID4+PiAoMjQgLSAoKGkgKyAyKSAlIDQpICogOCkpICYgMHhmZjsKCiAgICAgICAgdmFyIHRyaXBsZXQgPSAoYnl0ZTEgPDwgMTYpIHwgKGJ5dGUyIDw8IDgpIHwgYnl0ZTM7CgogICAgICAgIGZvciAodmFyIGogPSAwOyAoaiA8IDQpICYmIChpICsgaiAqIDAuNzUgPCBzaWdCeXRlcyk7IGorKykgewogICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChtYXAuY2hhckF0KCh0cmlwbGV0ID4+PiAoNiAqICgzIC0gaikpKSAmIDB4M2YpKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIEFkZCBwYWRkaW5nCiAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpOwogICAgICBpZiAocGFkZGluZ0NoYXIpIHsKICAgICAgICB3aGlsZSAoYmFzZTY0Q2hhcnMubGVuZ3RoICUgNCkgewogICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChwYWRkaW5nQ2hhcik7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gYmFzZTY0Q2hhcnMuam9pbignJyk7CiAgICB9LAoKICAgIC8qKgogICAgICogQ29udmVydHMgYSBCYXNlNjQgc3RyaW5nIHRvIGEgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0U3RyIFRoZSBCYXNlNjQgc3RyaW5nLgogICAgICoKICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuQmFzZTY0LnBhcnNlKGJhc2U2NFN0cmluZyk7CiAgICAgKi8KICAgIHBhcnNlOiBmdW5jdGlvbiAoYmFzZTY0U3RyKSB7CiAgICAgIC8vIFNob3J0Y3V0cwogICAgICB2YXIgYmFzZTY0U3RyTGVuZ3RoID0gYmFzZTY0U3RyLmxlbmd0aDsKICAgICAgdmFyIG1hcCA9IHRoaXMuX21hcDsKCiAgICAgIC8vIElnbm9yZSBwYWRkaW5nCiAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpOwogICAgICBpZiAocGFkZGluZ0NoYXIpIHsKICAgICAgICB2YXIgcGFkZGluZ0luZGV4ID0gYmFzZTY0U3RyLmluZGV4T2YocGFkZGluZ0NoYXIpOwogICAgICAgIGlmIChwYWRkaW5nSW5kZXggIT0gLTEpIHsKICAgICAgICAgIGJhc2U2NFN0ckxlbmd0aCA9IHBhZGRpbmdJbmRleDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIENvbnZlcnQKICAgICAgdmFyIHdvcmRzID0gW107CiAgICAgIHZhciBuQnl0ZXMgPSAwOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhc2U2NFN0ckxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKGkgJSA0KSB7CiAgICAgICAgICB2YXIgYml0czEgPSBtYXAuaW5kZXhPZihiYXNlNjRTdHIuY2hhckF0KGkgLSAxKSkgPDwgKChpICUgNCkgKiAyKTsKICAgICAgICAgIHZhciBiaXRzMiA9IG1hcC5pbmRleE9mKGJhc2U2NFN0ci5jaGFyQXQoaSkpID4+PiAoNiAtIChpICUgNCkgKiAyKTsKICAgICAgICAgIHdvcmRzW25CeXRlcyA+Pj4gMl0gfD0gKGJpdHMxIHwgYml0czIpIDw8ICgyNCAtIChuQnl0ZXMgJSA0KSAqIDgpOwogICAgICAgICAgbkJ5dGVzKys7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgbkJ5dGVzKTsKICAgIH0sCgogICAgX21hcDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JwogIH07Cn0oKSk7Ci8qCiBDcnlwdG9KUyB2My4xLjIKIGNpcGhlci1jb3JlCiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMKIChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLgogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQogKi8KLyoqCiAqIENpcGhlciBjb3JlIGNvbXBvbmVudHMuCiAqLwpDcnlwdG9KUy5saWIuQ2lwaGVyIHx8IChmdW5jdGlvbiAodW5kZWZpbmVkKSB7CiAgLy8gU2hvcnRjdXRzCiAgdmFyIEMgPSBDcnlwdG9KUzsKICB2YXIgQ19saWIgPSBDLmxpYjsKICB2YXIgQmFzZSA9IENfbGliLkJhc2U7CiAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKICB2YXIgQnVmZmVyZWRCbG9ja0FsZ29yaXRobSA9IENfbGliLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG07CiAgdmFyIENfZW5jID0gQy5lbmM7CiAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4OwogIHZhciBCYXNlNjQgPSBDX2VuYy5CYXNlNjQ7CiAgdmFyIENfYWxnbyA9IEMuYWxnbzsKICB2YXIgRXZwS0RGID0gQ19hbGdvLkV2cEtERjsKCiAgLyoqCiAgICogQWJzdHJhY3QgYmFzZSBjaXBoZXIgdGVtcGxhdGUuCiAgICoKICAgKiBAcHJvcGVydHkge251bWJlcn0ga2V5U2l6ZSBUaGlzIGNpcGhlcidzIGtleSBzaXplLiBEZWZhdWx0OiA0ICgxMjggYml0cykKICAgKiBAcHJvcGVydHkge251bWJlcn0gaXZTaXplIFRoaXMgY2lwaGVyJ3MgSVYgc2l6ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpCiAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9FTkNfWEZPUk1fTU9ERSBBIGNvbnN0YW50IHJlcHJlc2VudGluZyBlbmNyeXB0aW9uIG1vZGUuCiAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9ERUNfWEZPUk1fTU9ERSBBIGNvbnN0YW50IHJlcHJlc2VudGluZyBkZWNyeXB0aW9uIG1vZGUuCiAgICovCiAgdmFyIENpcGhlciA9IENfbGliLkNpcGhlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHsKICAgIC8qKgogICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLgogICAgICoKICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBpdiBUaGUgSVYgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi4KICAgICAqLwogICAgY2ZnOiBCYXNlLmV4dGVuZCgpLAoKICAgIC8qKgogICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBlbmNyeXB0aW9uIG1vZGUuCiAgICAgKgogICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LgogICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtDaXBoZXJ9IEEgY2lwaGVyIGluc3RhbmNlLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlRW5jcnlwdG9yKGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7CiAgICAgKi8KICAgIGNyZWF0ZUVuY3J5cHRvcjogZnVuY3Rpb24gKGtleSwgY2ZnKSB7CiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh0aGlzLl9FTkNfWEZPUk1fTU9ERSwga2V5LCBjZmcpOwogICAgfSwKCiAgICAvKioKICAgICAqIENyZWF0ZXMgdGhpcyBjaXBoZXIgaW4gZGVjcnlwdGlvbiBtb2RlLgogICAgICoKICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uCiAgICAgKgogICAgICogQHJldHVybiB7Q2lwaGVyfSBBIGNpcGhlciBpbnN0YW5jZS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIGNpcGhlciA9IENyeXB0b0pTLmFsZ28uQUVTLmNyZWF0ZURlY3J5cHRvcihrZXlXb3JkQXJyYXksIHsgaXY6IGl2V29yZEFycmF5IH0pOwogICAgICovCiAgICBjcmVhdGVEZWNyeXB0b3I6IGZ1bmN0aW9uIChrZXksIGNmZykgewogICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fREVDX1hGT1JNX01PREUsIGtleSwgY2ZnKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgY2lwaGVyLgogICAgICoKICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4Zm9ybU1vZGUgRWl0aGVyIHRoZSBlbmNyeXB0aW9uIG9yIGRlY3J5cHRpb24gdHJhbnNvcm1hdGlvbiBtb2RlIGNvbnN0YW50LgogICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LgogICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlKENyeXB0b0pTLmFsZ28uQUVTLl9FTkNfWEZPUk1fTU9ERSwga2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTsKICAgICAqLwogICAgaW5pdDogZnVuY3Rpb24gKHhmb3JtTW9kZSwga2V5LCBjZmcpIHsKICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzCiAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7CgogICAgICAvLyBTdG9yZSB0cmFuc2Zvcm0gbW9kZSBhbmQga2V5CiAgICAgIHRoaXMuX3hmb3JtTW9kZSA9IHhmb3JtTW9kZTsKICAgICAgdGhpcy5fa2V5ID0ga2V5OwoKICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzCiAgICAgIHRoaXMucmVzZXQoKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBSZXNldHMgdGhpcyBjaXBoZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgY2lwaGVyLnJlc2V0KCk7CiAgICAgKi8KICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIFJlc2V0IGRhdGEgYnVmZmVyCiAgICAgIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQuY2FsbCh0aGlzKTsKCiAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljCiAgICAgIHRoaXMuX2RvUmVzZXQoKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBZGRzIGRhdGEgdG8gYmUgZW5jcnlwdGVkIG9yIGRlY3J5cHRlZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGFVcGRhdGUgVGhlIGRhdGEgdG8gZW5jcnlwdCBvciBkZWNyeXB0LgogICAgICoKICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRhdGEgYWZ0ZXIgcHJvY2Vzc2luZy4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLnByb2Nlc3MoJ2RhdGEnKTsKICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLnByb2Nlc3Mod29yZEFycmF5KTsKICAgICAqLwogICAgcHJvY2VzczogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHsKICAgICAgLy8gQXBwZW5kCiAgICAgIHRoaXMuX2FwcGVuZChkYXRhVXBkYXRlKTsKCiAgICAgIC8vIFByb2Nlc3MgYXZhaWxhYmxlIGJsb2NrcwogICAgICByZXR1cm4gdGhpcy5fcHJvY2VzcygpOwogICAgfSwKCiAgICAvKioKICAgICAqIEZpbmFsaXplcyB0aGUgZW5jcnlwdGlvbiBvciBkZWNyeXB0aW9uIHByb2Nlc3MuCiAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YVVwZGF0ZSBUaGUgZmluYWwgZGF0YSB0byBlbmNyeXB0IG9yIGRlY3J5cHQuCiAgICAgKgogICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGF0YSBhZnRlciBmaW5hbCBwcm9jZXNzaW5nLgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIuZmluYWxpemUoKTsKICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKCdkYXRhJyk7CiAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5maW5hbGl6ZSh3b3JkQXJyYXkpOwogICAgICovCiAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHsKICAgICAgLy8gRmluYWwgZGF0YSB1cGRhdGUKICAgICAgaWYgKGRhdGFVcGRhdGUpIHsKICAgICAgICB0aGlzLl9hcHBlbmQoZGF0YVVwZGF0ZSk7CiAgICAgIH0KCiAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljCiAgICAgIHZhciBmaW5hbFByb2Nlc3NlZERhdGEgPSB0aGlzLl9kb0ZpbmFsaXplKCk7CgogICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWREYXRhOwogICAgfSwKCiAgICBrZXlTaXplOiAxMjgvMzIsCgogICAgaXZTaXplOiAxMjgvMzIsCgogICAgX0VOQ19YRk9STV9NT0RFOiAxLAoKICAgIF9ERUNfWEZPUk1fTU9ERTogMiwKCiAgICAvKioKICAgICAqIENyZWF0ZXMgc2hvcnRjdXQgZnVuY3Rpb25zIHRvIGEgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgICAqCiAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCB3aXRoIGVuY3J5cHQgYW5kIGRlY3J5cHQgc2hvcnRjdXQgZnVuY3Rpb25zLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgQUVTID0gQ3J5cHRvSlMubGliLkNpcGhlci5fY3JlYXRlSGVscGVyKENyeXB0b0pTLmFsZ28uQUVTKTsKICAgICAqLwogICAgX2NyZWF0ZUhlbHBlcjogKGZ1bmN0aW9uICgpIHsKICAgICAgZnVuY3Rpb24gc2VsZWN0Q2lwaGVyU3RyYXRlZ3koa2V5KSB7CiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycpIHsKICAgICAgICAgIHJldHVybiBQYXNzd29yZEJhc2VkQ2lwaGVyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gU2VyaWFsaXphYmxlQ2lwaGVyOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjaXBoZXIpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKG1lc3NhZ2UsIGtleSwgY2ZnKSB7CiAgICAgICAgICAgIHJldHVybiBzZWxlY3RDaXBoZXJTdHJhdGVneShrZXkpLmVuY3J5cHQoY2lwaGVyLCBtZXNzYWdlLCBrZXksIGNmZyk7CiAgICAgICAgICB9LAoKICAgICAgICAgIGRlY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXJ0ZXh0LCBrZXksIGNmZykgewogICAgICAgICAgICByZXR1cm4gc2VsZWN0Q2lwaGVyU3RyYXRlZ3koa2V5KS5kZWNyeXB0KGNpcGhlciwgY2lwaGVydGV4dCwga2V5LCBjZmcpOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH07CiAgICB9KCkpCiAgfSk7CgogIC8qKgogICAqIEFic3RyYWN0IGJhc2Ugc3RyZWFtIGNpcGhlciB0ZW1wbGF0ZS4KICAgKgogICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBjaXBoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDEgKDMyIGJpdHMpCiAgICovCiAgdmFyIFN0cmVhbUNpcGhlciA9IENfbGliLlN0cmVhbUNpcGhlciA9IENpcGhlci5leHRlbmQoewogICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHsKICAgICAgLy8gUHJvY2VzcyBwYXJ0aWFsIGJsb2NrcwogICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7CgogICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWRCbG9ja3M7CiAgICB9LAoKICAgIGJsb2NrU2l6ZTogMQogIH0pOwoKICAvKioKICAgKiBNb2RlIG5hbWVzcGFjZS4KICAgKi8KICB2YXIgQ19tb2RlID0gQy5tb2RlID0ge307CgogIC8qKgogICAqIEFic3RyYWN0IGJhc2UgYmxvY2sgY2lwaGVyIG1vZGUgdGVtcGxhdGUuCiAgICovCiAgdmFyIEJsb2NrQ2lwaGVyTW9kZSA9IENfbGliLkJsb2NrQ2lwaGVyTW9kZSA9IEJhc2UuZXh0ZW5kKHsKICAgIC8qKgogICAgICogQ3JlYXRlcyB0aGlzIG1vZGUgZm9yIGVuY3J5cHRpb24uCiAgICAgKgogICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS4KICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5jcmVhdGVFbmNyeXB0b3IoY2lwaGVyLCBpdi53b3Jkcyk7CiAgICAgKi8KICAgIGNyZWF0ZUVuY3J5cHRvcjogZnVuY3Rpb24gKGNpcGhlciwgaXYpIHsKICAgICAgcmV0dXJuIHRoaXMuRW5jcnlwdG9yLmNyZWF0ZShjaXBoZXIsIGl2KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBDcmVhdGVzIHRoaXMgbW9kZSBmb3IgZGVjcnlwdGlvbi4KICAgICAqCiAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLgogICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLmNyZWF0ZURlY3J5cHRvcihjaXBoZXIsIGl2LndvcmRzKTsKICAgICAqLwogICAgY3JlYXRlRGVjcnlwdG9yOiBmdW5jdGlvbiAoY2lwaGVyLCBpdikgewogICAgICByZXR1cm4gdGhpcy5EZWNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYpOwogICAgfSwKCiAgICAvKioKICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBtb2RlLgogICAgICoKICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuCiAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5FbmNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYud29yZHMpOwogICAgICovCiAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyLCBpdikgewogICAgICB0aGlzLl9jaXBoZXIgPSBjaXBoZXI7CiAgICAgIHRoaXMuX2l2ID0gaXY7CiAgICB9CiAgfSk7CgogIC8qKgogICAqIENpcGhlciBCbG9jayBDaGFpbmluZyBtb2RlLgogICAqLwogIHZhciBDQkMgPSBDX21vZGUuQ0JDID0gKGZ1bmN0aW9uICgpIHsKICAgIC8qKgogICAgICogQWJzdHJhY3QgYmFzZSBDQkMgbW9kZS4KICAgICAqLwogICAgdmFyIENCQyA9IEJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTsKCiAgICAvKioKICAgICAqIENCQyBlbmNyeXB0b3IuCiAgICAgKi8KICAgIENCQy5FbmNyeXB0b3IgPSBDQkMuZXh0ZW5kKHsKICAgICAgLyoqCiAgICAgICAqIFByb2Nlc3NlcyB0aGUgZGF0YSBibG9jayBhdCBvZmZzZXQuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIFRoZSBkYXRhIHdvcmRzIHRvIG9wZXJhdGUgb24uCiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCB3aGVyZSB0aGUgYmxvY2sgc3RhcnRzLgogICAgICAgKgogICAgICAgKiBAZXhhbXBsZQogICAgICAgKgogICAgICAgKiAgICAgbW9kZS5wcm9jZXNzQmxvY2soZGF0YS53b3Jkcywgb2Zmc2V0KTsKICAgICAgICovCiAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHsKICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyOwogICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplOwoKICAgICAgICAvLyBYT1IgYW5kIGVuY3J5cHQKICAgICAgICB4b3JCbG9jay5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSk7CiAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTsKCiAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrCiAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpOwogICAgICB9CiAgICB9KTsKCiAgICAvKioKICAgICAqIENCQyBkZWNyeXB0b3IuCiAgICAgKi8KICAgIENCQy5EZWNyeXB0b3IgPSBDQkMuZXh0ZW5kKHsKICAgICAgLyoqCiAgICAgICAqIFByb2Nlc3NlcyB0aGUgZGF0YSBibG9jayBhdCBvZmZzZXQuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIFRoZSBkYXRhIHdvcmRzIHRvIG9wZXJhdGUgb24uCiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCB3aGVyZSB0aGUgYmxvY2sgc3RhcnRzLgogICAgICAgKgogICAgICAgKiBAZXhhbXBsZQogICAgICAgKgogICAgICAgKiAgICAgbW9kZS5wcm9jZXNzQmxvY2soZGF0YS53b3Jkcywgb2Zmc2V0KTsKICAgICAgICovCiAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHsKICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyOwogICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplOwoKICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2sKICAgICAgICB2YXIgdGhpc0Jsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpOwoKICAgICAgICAvLyBEZWNyeXB0IGFuZCBYT1IKICAgICAgICBjaXBoZXIuZGVjcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpOwogICAgICAgIHhvckJsb2NrLmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplKTsKCiAgICAgICAgLy8gVGhpcyBibG9jayBiZWNvbWVzIHRoZSBwcmV2aW91cyBibG9jawogICAgICAgIHRoaXMuX3ByZXZCbG9jayA9IHRoaXNCbG9jazsKICAgICAgfQogICAgfSk7CgogICAgZnVuY3Rpb24geG9yQmxvY2sod29yZHMsIG9mZnNldCwgYmxvY2tTaXplKSB7CiAgICAgIC8vIFNob3J0Y3V0CiAgICAgIHZhciBpdiA9IHRoaXMuX2l2OwoKICAgICAgLy8gQ2hvb3NlIG1peGluZyBibG9jawogICAgICBpZiAoaXYpIHsKICAgICAgICB2YXIgYmxvY2sgPSBpdjsKCiAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2NrcwogICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBibG9jayA9IHRoaXMuX3ByZXZCbG9jazsKICAgICAgfQoKICAgICAgLy8gWE9SIGJsb2NrcwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7CiAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0gYmxvY2tbaV07CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gQ0JDOwogIH0oKSk7CgogIC8qKgogICAqIFBhZGRpbmcgbmFtZXNwYWNlLgogICAqLwogIHZhciBDX3BhZCA9IEMucGFkID0ge307CgogIC8qKgogICAqIFBLQ1MgIzUvNyBwYWRkaW5nIHN0cmF0ZWd5LgogICAqLwogIHZhciBQa2NzNyA9IENfcGFkLlBrY3M3ID0gewogICAgLyoqCiAgICAgKiBQYWRzIGRhdGEgdXNpbmcgdGhlIGFsZ29yaXRobSBkZWZpbmVkIGluIFBLQ1MgIzUvNy4KICAgICAqCiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gZGF0YSBUaGUgZGF0YSB0byBwYWQuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmxvY2tTaXplIFRoZSBtdWx0aXBsZSB0aGF0IHRoZSBkYXRhIHNob3VsZCBiZSBwYWRkZWQgdG8uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIENyeXB0b0pTLnBhZC5Qa2NzNy5wYWQod29yZEFycmF5LCA0KTsKICAgICAqLwogICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7CiAgICAgIC8vIFNob3J0Y3V0CiAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7CgogICAgICAvLyBDb3VudCBwYWRkaW5nIGJ5dGVzCiAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gYmxvY2tTaXplQnl0ZXMgLSBkYXRhLnNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXM7CgogICAgICAvLyBDcmVhdGUgcGFkZGluZyB3b3JkCiAgICAgIHZhciBwYWRkaW5nV29yZCA9IChuUGFkZGluZ0J5dGVzIDw8IDI0KSB8IChuUGFkZGluZ0J5dGVzIDw8IDE2KSB8IChuUGFkZGluZ0J5dGVzIDw8IDgpIHwgblBhZGRpbmdCeXRlczsKCiAgICAgIC8vIENyZWF0ZSBwYWRkaW5nCiAgICAgIHZhciBwYWRkaW5nV29yZHMgPSBbXTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuUGFkZGluZ0J5dGVzOyBpICs9IDQpIHsKICAgICAgICBwYWRkaW5nV29yZHMucHVzaChwYWRkaW5nV29yZCk7CiAgICAgIH0KICAgICAgdmFyIHBhZGRpbmcgPSBXb3JkQXJyYXkuY3JlYXRlKHBhZGRpbmdXb3JkcywgblBhZGRpbmdCeXRlcyk7CgogICAgICAvLyBBZGQgcGFkZGluZwogICAgICBkYXRhLmNvbmNhdChwYWRkaW5nKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBVbnBhZHMgZGF0YSB0aGF0IGhhZCBiZWVuIHBhZGRlZCB1c2luZyB0aGUgYWxnb3JpdGhtIGRlZmluZWQgaW4gUEtDUyAjNS83LgogICAgICoKICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBkYXRhIFRoZSBkYXRhIHRvIHVucGFkLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICBDcnlwdG9KUy5wYWQuUGtjczcudW5wYWQod29yZEFycmF5KTsKICAgICAqLwogICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZQogICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmOwoKICAgICAgLy8gUmVtb3ZlIHBhZGRpbmcKICAgICAgZGF0YS5zaWdCeXRlcyAtPSBuUGFkZGluZ0J5dGVzOwogICAgfQogIH07CgogIC8qKgogICAqIEFic3RyYWN0IGJhc2UgYmxvY2sgY2lwaGVyIHRlbXBsYXRlLgogICAqCiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGNpcGhlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogNCAoMTI4IGJpdHMpCiAgICovCiAgdmFyIEJsb2NrQ2lwaGVyID0gQ19saWIuQmxvY2tDaXBoZXIgPSBDaXBoZXIuZXh0ZW5kKHsKICAgIC8qKgogICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLgogICAgICoKICAgICAqIEBwcm9wZXJ0eSB7TW9kZX0gbW9kZSBUaGUgYmxvY2sgbW9kZSB0byB1c2UuIERlZmF1bHQ6IENCQwogICAgICogQHByb3BlcnR5IHtQYWRkaW5nfSBwYWRkaW5nIFRoZSBwYWRkaW5nIHN0cmF0ZWd5IHRvIHVzZS4gRGVmYXVsdDogUGtjczcKICAgICAqLwogICAgY2ZnOiBDaXBoZXIuY2ZnLmV4dGVuZCh7CiAgICAgIG1vZGU6IENCQywKICAgICAgcGFkZGluZzogUGtjczcKICAgIH0pLAoKICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIFJlc2V0IGNpcGhlcgogICAgICBDaXBoZXIucmVzZXQuY2FsbCh0aGlzKTsKCiAgICAgIC8vIFNob3J0Y3V0cwogICAgICB2YXIgY2ZnID0gdGhpcy5jZmc7CiAgICAgIHZhciBpdiA9IGNmZy5pdjsKICAgICAgdmFyIG1vZGUgPSBjZmcubW9kZTsKCiAgICAgIC8vIFJlc2V0IGJsb2NrIG1vZGUKICAgICAgaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9FTkNfWEZPUk1fTU9ERSkgewogICAgICAgIHZhciBtb2RlQ3JlYXRvciA9IG1vZGUuY3JlYXRlRW5jcnlwdG9yOwogICAgICB9IGVsc2UgLyogaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9ERUNfWEZPUk1fTU9ERSkgKi8gewogICAgICAgIHZhciBtb2RlQ3JlYXRvciA9IG1vZGUuY3JlYXRlRGVjcnlwdG9yOwoKICAgICAgICAvLyBLZWVwIGF0IGxlYXN0IG9uZSBibG9jayBpbiB0aGUgYnVmZmVyIGZvciB1bnBhZGRpbmcKICAgICAgICB0aGlzLl9taW5CdWZmZXJTaXplID0gMTsKICAgICAgfQogICAgICB0aGlzLl9tb2RlID0gbW9kZUNyZWF0b3IuY2FsbChtb2RlLCB0aGlzLCBpdiAmJiBpdi53b3Jkcyk7CiAgICB9LAoKICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHsKICAgICAgdGhpcy5fbW9kZS5wcm9jZXNzQmxvY2sod29yZHMsIG9mZnNldCk7CiAgICB9LAoKICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIFNob3J0Y3V0CiAgICAgIHZhciBwYWRkaW5nID0gdGhpcy5jZmcucGFkZGluZzsKCiAgICAgIC8vIEZpbmFsaXplCiAgICAgIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fRU5DX1hGT1JNX01PREUpIHsKICAgICAgICAvLyBQYWQgZGF0YQogICAgICAgIHBhZGRpbmcucGFkKHRoaXMuX2RhdGEsIHRoaXMuYmxvY2tTaXplKTsKCiAgICAgICAgLy8gUHJvY2VzcyBmaW5hbCBibG9ja3MKICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7CiAgICAgIH0gZWxzZSAvKiBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0RFQ19YRk9STV9NT0RFKSAqLyB7CiAgICAgICAgLy8gUHJvY2VzcyBmaW5hbCBibG9ja3MKICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7CgogICAgICAgIC8vIFVucGFkIGRhdGEKICAgICAgICBwYWRkaW5nLnVucGFkKGZpbmFsUHJvY2Vzc2VkQmxvY2tzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkQmxvY2tzOwogICAgfSwKCiAgICBibG9ja1NpemU6IDEyOC8zMgogIH0pOwoKICAvKioKICAgKiBBIGNvbGxlY3Rpb24gb2YgY2lwaGVyIHBhcmFtZXRlcnMuCiAgICoKICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gY2lwaGVydGV4dCBUaGUgcmF3IGNpcGhlcnRleHQuCiAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGtleSBUaGUga2V5IHRvIHRoaXMgY2lwaGVydGV4dC4KICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHVzZWQgaW4gdGhlIGNpcGhlcmluZyBvcGVyYXRpb24uCiAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IHNhbHQgVGhlIHNhbHQgdXNlZCB3aXRoIGEga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uCiAgICogQHByb3BlcnR5IHtDaXBoZXJ9IGFsZ29yaXRobSBUaGUgY2lwaGVyIGFsZ29yaXRobS4KICAgKiBAcHJvcGVydHkge01vZGV9IG1vZGUgVGhlIGJsb2NrIG1vZGUgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi4KICAgKiBAcHJvcGVydHkge1BhZGRpbmd9IHBhZGRpbmcgVGhlIHBhZGRpbmcgc2NoZW1lIHVzZWQgaW4gdGhlIGNpcGhlcmluZyBvcGVyYXRpb24uCiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgYmxvY2sgc2l6ZSBvZiB0aGUgY2lwaGVyLgogICAqIEBwcm9wZXJ0eSB7Rm9ybWF0fSBmb3JtYXR0ZXIgVGhlIGRlZmF1bHQgZm9ybWF0dGluZyBzdHJhdGVneSB0byBjb252ZXJ0IHRoaXMgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBzdHJpbmcuCiAgICovCiAgdmFyIENpcGhlclBhcmFtcyA9IENfbGliLkNpcGhlclBhcmFtcyA9IEJhc2UuZXh0ZW5kKHsKICAgIC8qKgogICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjaXBoZXJQYXJhbXMgQW4gb2JqZWN0IHdpdGggYW55IG9mIHRoZSBwb3NzaWJsZSBjaXBoZXIgcGFyYW1ldGVycy4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMubGliLkNpcGhlclBhcmFtcy5jcmVhdGUoewogICAgICAgICAqICAgICAgICAgY2lwaGVydGV4dDogY2lwaGVydGV4dFdvcmRBcnJheSwKICAgICAgICAgKiAgICAgICAgIGtleToga2V5V29yZEFycmF5LAogICAgICAgICAqICAgICAgICAgaXY6IGl2V29yZEFycmF5LAogICAgICAgICAqICAgICAgICAgc2FsdDogc2FsdFdvcmRBcnJheSwKICAgICAgICAgKiAgICAgICAgIGFsZ29yaXRobTogQ3J5cHRvSlMuYWxnby5BRVMsCiAgICAgICAgICogICAgICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkNCQywKICAgICAgICAgKiAgICAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5QS0NTNywKICAgICAgICAgKiAgICAgICAgIGJsb2NrU2l6ZTogNCwKICAgICAgICAgKiAgICAgICAgIGZvcm1hdHRlcjogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wKICAgICAgICAgKiAgICAgfSk7CiAgICAgKi8KICAgIGluaXQ6IGZ1bmN0aW9uIChjaXBoZXJQYXJhbXMpIHsKICAgICAgdGhpcy5taXhJbihjaXBoZXJQYXJhbXMpOwogICAgfSwKCiAgICAvKioKICAgICAqIENvbnZlcnRzIHRoaXMgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBzdHJpbmcuCiAgICAgKgogICAgICogQHBhcmFtIHtGb3JtYXR9IGZvcm1hdHRlciAoT3B0aW9uYWwpIFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIHVzZS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCBjaXBoZXIgcGFyYW1zLgogICAgICoKICAgICAqIEB0aHJvd3MgRXJyb3IgSWYgbmVpdGhlciB0aGUgZm9ybWF0dGVyIG5vciB0aGUgZGVmYXVsdCBmb3JtYXR0ZXIgaXMgc2V0LgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBzdHJpbmcgPSBjaXBoZXJQYXJhbXMgKyAnJzsKICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKCk7CiAgICAgKiAgICAgdmFyIHN0cmluZyA9IGNpcGhlclBhcmFtcy50b1N0cmluZyhDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCk7CiAgICAgKi8KICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7CiAgICAgIHJldHVybiAoZm9ybWF0dGVyIHx8IHRoaXMuZm9ybWF0dGVyKS5zdHJpbmdpZnkodGhpcyk7CiAgICB9CiAgfSk7CgogIC8qKgogICAqIEZvcm1hdCBuYW1lc3BhY2UuCiAgICovCiAgdmFyIENfZm9ybWF0ID0gQy5mb3JtYXQgPSB7fTsKCiAgLyoqCiAgICogT3BlblNTTCBmb3JtYXR0aW5nIHN0cmF0ZWd5LgogICAqLwogIHZhciBPcGVuU1NMRm9ybWF0dGVyID0gQ19mb3JtYXQuT3BlblNTTCA9IHsKICAgIC8qKgogICAgICogQ29udmVydHMgYSBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhbiBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLgogICAgICoKICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfSBjaXBoZXJQYXJhbXMgVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAgICoKICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBvcGVuU1NMU3RyaW5nID0gQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wuc3RyaW5naWZ5KGNpcGhlclBhcmFtcyk7CiAgICAgKi8KICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykgewogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIGNpcGhlcnRleHQgPSBjaXBoZXJQYXJhbXMuY2lwaGVydGV4dDsKICAgICAgdmFyIHNhbHQgPSBjaXBoZXJQYXJhbXMuc2FsdDsKCiAgICAgIC8vIEZvcm1hdAogICAgICBpZiAoc2FsdCkgewogICAgICAgIHZhciB3b3JkQXJyYXkgPSBXb3JkQXJyYXkuY3JlYXRlKFsweDUzNjE2Yzc0LCAweDY1NjQ1ZjVmXSkuY29uY2F0KHNhbHQpLmNvbmNhdChjaXBoZXJ0ZXh0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgd29yZEFycmF5ID0gY2lwaGVydGV4dDsKICAgICAgfQoKICAgICAgcmV0dXJuIHdvcmRBcnJheS50b1N0cmluZyhCYXNlNjQpOwogICAgfSwKCiAgICAvKioKICAgICAqIENvbnZlcnRzIGFuIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcgdG8gYSBjaXBoZXIgcGFyYW1zIG9iamVjdC4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3BlblNTTFN0ciBUaGUgT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIGNpcGhlclBhcmFtcyA9IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMLnBhcnNlKG9wZW5TU0xTdHJpbmcpOwogICAgICovCiAgICBwYXJzZTogZnVuY3Rpb24gKG9wZW5TU0xTdHIpIHsKICAgICAgLy8gUGFyc2UgYmFzZTY0CiAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gQmFzZTY0LnBhcnNlKG9wZW5TU0xTdHIpOwoKICAgICAgLy8gU2hvcnRjdXQKICAgICAgdmFyIGNpcGhlcnRleHRXb3JkcyA9IGNpcGhlcnRleHQud29yZHM7CgogICAgICAvLyBUZXN0IGZvciBzYWx0CiAgICAgIGlmIChjaXBoZXJ0ZXh0V29yZHNbMF0gPT0gMHg1MzYxNmM3NCAmJiBjaXBoZXJ0ZXh0V29yZHNbMV0gPT0gMHg2NTY0NWY1ZikgewogICAgICAgIC8vIEV4dHJhY3Qgc2FsdAogICAgICAgIHZhciBzYWx0ID0gV29yZEFycmF5LmNyZWF0ZShjaXBoZXJ0ZXh0V29yZHMuc2xpY2UoMiwgNCkpOwoKICAgICAgICAvLyBSZW1vdmUgc2FsdCBmcm9tIGNpcGhlcnRleHQKICAgICAgICBjaXBoZXJ0ZXh0V29yZHMuc3BsaWNlKDAsIDQpOwogICAgICAgIGNpcGhlcnRleHQuc2lnQnl0ZXMgLT0gMTY7CiAgICAgIH0KCiAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHsgY2lwaGVydGV4dDogY2lwaGVydGV4dCwgc2FsdDogc2FsdCB9KTsKICAgIH0KICB9OwoKICAvKioKICAgKiBBIGNpcGhlciB3cmFwcGVyIHRoYXQgcmV0dXJucyBjaXBoZXJ0ZXh0IGFzIGEgc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAqLwogIHZhciBTZXJpYWxpemFibGVDaXBoZXIgPSBDX2xpYi5TZXJpYWxpemFibGVDaXBoZXIgPSBCYXNlLmV4dGVuZCh7CiAgICAvKioKICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy4KICAgICAqCiAgICAgKiBAcHJvcGVydHkge0Zvcm1hdHRlcn0gZm9ybWF0IFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIGNvbnZlcnQgY2lwaGVyIHBhcmFtIG9iamVjdHMgdG8gYW5kIGZyb20gYSBzdHJpbmcuIERlZmF1bHQ6IE9wZW5TU0wKICAgICAqLwogICAgY2ZnOiBCYXNlLmV4dGVuZCh7CiAgICAgIGZvcm1hdDogT3BlblNTTEZvcm1hdHRlcgogICAgfSksCgogICAgLyoqCiAgICAgKiBFbmNyeXB0cyBhIG1lc3NhZ2UuCiAgICAgKgogICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuCiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZW5jcnlwdC4KICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uCiAgICAgKgogICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5KTsKICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5LCB7IGl2OiBpdiB9KTsKICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTsKICAgICAqLwogICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpIHsKICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzCiAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpOwoKICAgICAgLy8gRW5jcnlwdAogICAgICB2YXIgZW5jcnlwdG9yID0gY2lwaGVyLmNyZWF0ZUVuY3J5cHRvcihrZXksIGNmZyk7CiAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gZW5jcnlwdG9yLmZpbmFsaXplKG1lc3NhZ2UpOwoKICAgICAgLy8gU2hvcnRjdXQKICAgICAgdmFyIGNpcGhlckNmZyA9IGVuY3J5cHRvci5jZmc7CgogICAgICAvLyBDcmVhdGUgYW5kIHJldHVybiBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtcwogICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7CiAgICAgICAgY2lwaGVydGV4dDogY2lwaGVydGV4dCwKICAgICAgICBrZXk6IGtleSwKICAgICAgICBpdjogY2lwaGVyQ2ZnLml2LAogICAgICAgIGFsZ29yaXRobTogY2lwaGVyLAogICAgICAgIG1vZGU6IGNpcGhlckNmZy5tb2RlLAogICAgICAgIHBhZGRpbmc6IGNpcGhlckNmZy5wYWRkaW5nLAogICAgICAgIGJsb2NrU2l6ZTogY2lwaGVyLmJsb2NrU2l6ZSwKICAgICAgICBmb3JtYXR0ZXI6IGNmZy5mb3JtYXQKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogRGVjcnlwdHMgc2VyaWFsaXplZCBjaXBoZXJ0ZXh0LgogICAgICoKICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLgogICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0IHRvIGRlY3J5cHQuCiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLgogICAgICoKICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHBsYWludGV4dC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTsKICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5kZWNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBjaXBoZXJ0ZXh0UGFyYW1zLCBrZXksIHsgaXY6IGl2LCBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pOwogICAgICovCiAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBrZXksIGNmZykgewogICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHMKICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7CgogICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBDaXBoZXJQYXJhbXMKICAgICAgY2lwaGVydGV4dCA9IHRoaXMuX3BhcnNlKGNpcGhlcnRleHQsIGNmZy5mb3JtYXQpOwoKICAgICAgLy8gRGVjcnlwdAogICAgICB2YXIgcGxhaW50ZXh0ID0gY2lwaGVyLmNyZWF0ZURlY3J5cHRvcihrZXksIGNmZykuZmluYWxpemUoY2lwaGVydGV4dC5jaXBoZXJ0ZXh0KTsKCiAgICAgIHJldHVybiBwbGFpbnRleHQ7CiAgICB9LAoKICAgIC8qKgogICAgICogQ29udmVydHMgc2VyaWFsaXplZCBjaXBoZXJ0ZXh0IHRvIENpcGhlclBhcmFtcywKICAgICAqIGVsc2UgYXNzdW1lZCBDaXBoZXJQYXJhbXMgYWxyZWFkeSBhbmQgcmV0dXJucyBjaXBoZXJ0ZXh0IHVuY2hhbmdlZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQuCiAgICAgKiBAcGFyYW0ge0Zvcm1hdHRlcn0gZm9ybWF0IFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIHVzZSB0byBwYXJzZSBzZXJpYWxpemVkIGNpcGhlcnRleHQuCiAgICAgKgogICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBUaGUgdW5zZXJpYWxpemVkIGNpcGhlcnRleHQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5fcGFyc2UoY2lwaGVydGV4dFN0cmluZ09yUGFyYW1zLCBmb3JtYXQpOwogICAgICovCiAgICBfcGFyc2U6IGZ1bmN0aW9uIChjaXBoZXJ0ZXh0LCBmb3JtYXQpIHsKICAgICAgaWYgKHR5cGVvZiBjaXBoZXJ0ZXh0ID09ICdzdHJpbmcnKSB7CiAgICAgICAgcmV0dXJuIGZvcm1hdC5wYXJzZShjaXBoZXJ0ZXh0LCB0aGlzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gY2lwaGVydGV4dDsKICAgICAgfQogICAgfQogIH0pOwoKICAvKioKICAgKiBLZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiBuYW1lc3BhY2UuCiAgICovCiAgdmFyIENfa2RmID0gQy5rZGYgPSB7fTsKCiAgLyoqCiAgICogT3BlblNTTCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi4KICAgKi8KICB2YXIgT3BlblNTTEtkZiA9IENfa2RmLk9wZW5TU0wgPSB7CiAgICAvKioKICAgICAqIERlcml2ZXMgYSBrZXkgYW5kIElWIGZyb20gYSBwYXNzd29yZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkIHRvIGRlcml2ZSBmcm9tLgogICAgICogQHBhcmFtIHtudW1iZXJ9IGtleVNpemUgVGhlIHNpemUgaW4gd29yZHMgb2YgdGhlIGtleSB0byBnZW5lcmF0ZS4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpdlNpemUgVGhlIHNpemUgaW4gd29yZHMgb2YgdGhlIElWIHRvIGdlbmVyYXRlLgogICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IChPcHRpb25hbCkgQSA2NC1iaXQgc2FsdCB0byB1c2UuIElmIG9taXR0ZWQsIGEgc2FsdCB3aWxsIGJlIGdlbmVyYXRlZCByYW5kb21seS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3Qgd2l0aCB0aGUga2V5LCBJViwgYW5kIHNhbHQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBkZXJpdmVkUGFyYW1zID0gQ3J5cHRvSlMua2RmLk9wZW5TU0wuZXhlY3V0ZSgnUGFzc3dvcmQnLCAyNTYvMzIsIDEyOC8zMik7CiAgICAgKiAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBDcnlwdG9KUy5rZGYuT3BlblNTTC5leGVjdXRlKCdQYXNzd29yZCcsIDI1Ni8zMiwgMTI4LzMyLCAnc2FsdHNhbHQnKTsKICAgICAqLwogICAgZXhlY3V0ZTogZnVuY3Rpb24gKHBhc3N3b3JkLCBrZXlTaXplLCBpdlNpemUsIHNhbHQpIHsKICAgICAgLy8gR2VuZXJhdGUgcmFuZG9tIHNhbHQKICAgICAgaWYgKCFzYWx0KSB7CiAgICAgICAgc2FsdCA9IFdvcmRBcnJheS5yYW5kb20oNjQvOCk7CiAgICAgIH0KCiAgICAgIC8vIERlcml2ZSBrZXkgYW5kIElWCiAgICAgIHZhciBrZXkgPSBFdnBLREYuY3JlYXRlKHsga2V5U2l6ZToga2V5U2l6ZSArIGl2U2l6ZSB9KS5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTsKCiAgICAgIC8vIFNlcGFyYXRlIGtleSBhbmQgSVYKICAgICAgdmFyIGl2ID0gV29yZEFycmF5LmNyZWF0ZShrZXkud29yZHMuc2xpY2Uoa2V5U2l6ZSksIGl2U2l6ZSAqIDQpOwogICAgICBrZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNDsKCiAgICAgIC8vIFJldHVybiBwYXJhbXMKICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBrZXk6IGtleSwgaXY6IGl2LCBzYWx0OiBzYWx0IH0pOwogICAgfQogIH07CgogIC8qKgogICAqIEEgc2VyaWFsaXphYmxlIGNpcGhlciB3cmFwcGVyIHRoYXQgZGVyaXZlcyB0aGUga2V5IGZyb20gYSBwYXNzd29yZCwKICAgKiBhbmQgcmV0dXJucyBjaXBoZXJ0ZXh0IGFzIGEgc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAqLwogIHZhciBQYXNzd29yZEJhc2VkQ2lwaGVyID0gQ19saWIuUGFzc3dvcmRCYXNlZENpcGhlciA9IFNlcmlhbGl6YWJsZUNpcGhlci5leHRlbmQoewogICAgLyoqCiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuCiAgICAgKgogICAgICogQHByb3BlcnR5IHtLREZ9IGtkZiBUaGUga2V5IGRlcml2YXRpb24gZnVuY3Rpb24gdG8gdXNlIHRvIGdlbmVyYXRlIGEga2V5IGFuZCBJViBmcm9tIGEgcGFzc3dvcmQuIERlZmF1bHQ6IE9wZW5TU0wKICAgICAqLwogICAgY2ZnOiBTZXJpYWxpemFibGVDaXBoZXIuY2ZnLmV4dGVuZCh7CiAgICAgIGtkZjogT3BlblNTTEtkZgogICAgfSksCgogICAgLyoqCiAgICAgKiBFbmNyeXB0cyBhIG1lc3NhZ2UgdXNpbmcgYSBwYXNzd29yZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS4KICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBlbmNyeXB0LgogICAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uCiAgICAgKgogICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsICdwYXNzd29yZCcpOwogICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pOwogICAgICovCiAgICBlbmNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBtZXNzYWdlLCBwYXNzd29yZCwgY2ZnKSB7CiAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0cwogICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKCiAgICAgIC8vIERlcml2ZSBrZXkgYW5kIG90aGVyIHBhcmFtcwogICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IGNmZy5rZGYuZXhlY3V0ZShwYXNzd29yZCwgY2lwaGVyLmtleVNpemUsIGNpcGhlci5pdlNpemUpOwoKICAgICAgLy8gQWRkIElWIHRvIGNvbmZpZwogICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2OwoKICAgICAgLy8gRW5jcnlwdAogICAgICB2YXIgY2lwaGVydGV4dCA9IFNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0LmNhbGwodGhpcywgY2lwaGVyLCBtZXNzYWdlLCBkZXJpdmVkUGFyYW1zLmtleSwgY2ZnKTsKCiAgICAgIC8vIE1peCBpbiBkZXJpdmVkIHBhcmFtcwogICAgICBjaXBoZXJ0ZXh0Lm1peEluKGRlcml2ZWRQYXJhbXMpOwoKICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7CiAgICB9LAoKICAgIC8qKgogICAgICogRGVjcnlwdHMgc2VyaWFsaXplZCBjaXBoZXJ0ZXh0IHVzaW5nIGEgcGFzc3dvcmQuCiAgICAgKgogICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuCiAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQgdG8gZGVjcnlwdC4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLgogICAgICoKICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHBsYWludGV4dC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGZvcm1hdHRlZENpcGhlcnRleHQsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTsKICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pOwogICAgICovCiAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBwYXNzd29yZCwgY2ZnKSB7CiAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0cwogICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTsKCiAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIENpcGhlclBhcmFtcwogICAgICBjaXBoZXJ0ZXh0ID0gdGhpcy5fcGFyc2UoY2lwaGVydGV4dCwgY2ZnLmZvcm1hdCk7CgogICAgICAvLyBEZXJpdmUga2V5IGFuZCBvdGhlciBwYXJhbXMKICAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBjZmcua2RmLmV4ZWN1dGUocGFzc3dvcmQsIGNpcGhlci5rZXlTaXplLCBjaXBoZXIuaXZTaXplLCBjaXBoZXJ0ZXh0LnNhbHQpOwoKICAgICAgLy8gQWRkIElWIHRvIGNvbmZpZwogICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2OwoKICAgICAgLy8gRGVjcnlwdAogICAgICB2YXIgcGxhaW50ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIGNpcGhlcnRleHQsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpOwoKICAgICAgcmV0dXJuIHBsYWludGV4dDsKICAgIH0KICB9KTsKfSgpKTsKLyoKIENyeXB0b0pTIHYzLjEuMgogYWVzLmpzCiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMKIChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLgogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQogKi8KKGZ1bmN0aW9uICgpIHsKICAvLyBTaG9ydGN1dHMKICB2YXIgQyA9IENyeXB0b0pTOwogIHZhciBDX2xpYiA9IEMubGliOwogIHZhciBCbG9ja0NpcGhlciA9IENfbGliLkJsb2NrQ2lwaGVyOwogIHZhciBDX2FsZ28gPSBDLmFsZ287CgogIC8vIExvb2t1cCB0YWJsZXMKICB2YXIgU0JPWCA9IFtdOwogIHZhciBJTlZfU0JPWCA9IFtdOwogIHZhciBTVUJfTUlYXzAgPSBbXTsKICB2YXIgU1VCX01JWF8xID0gW107CiAgdmFyIFNVQl9NSVhfMiA9IFtdOwogIHZhciBTVUJfTUlYXzMgPSBbXTsKICB2YXIgSU5WX1NVQl9NSVhfMCA9IFtdOwogIHZhciBJTlZfU1VCX01JWF8xID0gW107CiAgdmFyIElOVl9TVUJfTUlYXzIgPSBbXTsKICB2YXIgSU5WX1NVQl9NSVhfMyA9IFtdOwoKICAvLyBDb21wdXRlIGxvb2t1cCB0YWJsZXMKICAoZnVuY3Rpb24gKCkgewogICAgLy8gQ29tcHV0ZSBkb3VibGUgdGFibGUKICAgIHZhciBkID0gW107CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7CiAgICAgIGlmIChpIDwgMTI4KSB7CiAgICAgICAgZFtpXSA9IGkgPDwgMTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkW2ldID0gKGkgPDwgMSkgXiAweDExYjsKICAgICAgfQogICAgfQoKICAgIC8vIFdhbGsgR0YoMl44KQogICAgdmFyIHggPSAwOwogICAgdmFyIHhpID0gMDsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHsKICAgICAgLy8gQ29tcHV0ZSBzYm94CiAgICAgIHZhciBzeCA9IHhpIF4gKHhpIDw8IDEpIF4gKHhpIDw8IDIpIF4gKHhpIDw8IDMpIF4gKHhpIDw8IDQpOwogICAgICBzeCA9IChzeCA+Pj4gOCkgXiAoc3ggJiAweGZmKSBeIDB4NjM7CiAgICAgIFNCT1hbeF0gPSBzeDsKICAgICAgSU5WX1NCT1hbc3hdID0geDsKCiAgICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb24KICAgICAgdmFyIHgyID0gZFt4XTsKICAgICAgdmFyIHg0ID0gZFt4Ml07CiAgICAgIHZhciB4OCA9IGRbeDRdOwoKICAgICAgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlcwogICAgICB2YXIgdCA9IChkW3N4XSAqIDB4MTAxKSBeIChzeCAqIDB4MTAxMDEwMCk7CiAgICAgIFNVQl9NSVhfMFt4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KTsKICAgICAgU1VCX01JWF8xW3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KTsKICAgICAgU1VCX01JWF8yW3hdID0gKHQgPDwgOCkgIHwgKHQgPj4+IDI0KTsKICAgICAgU1VCX01JWF8zW3hdID0gdDsKCiAgICAgIC8vIENvbXB1dGUgaW52IHN1YiBieXRlcywgaW52IG1peCBjb2x1bW5zIHRhYmxlcwogICAgICB2YXIgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKTsKICAgICAgSU5WX1NVQl9NSVhfMFtzeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOCk7CiAgICAgIElOVl9TVUJfTUlYXzFbc3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KTsKICAgICAgSU5WX1NVQl9NSVhfMltzeF0gPSAodCA8PCA4KSAgfCAodCA+Pj4gMjQpOwogICAgICBJTlZfU1VCX01JWF8zW3N4XSA9IHQ7CgogICAgICAvLyBDb21wdXRlIG5leHQgY291bnRlcgogICAgICBpZiAoIXgpIHsKICAgICAgICB4ID0geGkgPSAxOwogICAgICB9IGVsc2UgewogICAgICAgIHggPSB4MiBeIGRbZFtkW3g4IF4geDJdXV07CiAgICAgICAgeGkgXj0gZFtkW3hpXV07CiAgICAgIH0KICAgIH0KICB9KCkpOwoKICAvLyBQcmVjb21wdXRlZCBSY29uIGxvb2t1cAogIHZhciBSQ09OID0gWzB4MDAsIDB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzZdOwoKICAvKioKICAgKiBBRVMgYmxvY2sgY2lwaGVyIGFsZ29yaXRobS4KICAgKi8KICB2YXIgQUVTID0gQ19hbGdvLkFFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7CiAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIGtleSA9IHRoaXMuX2tleTsKICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzOwogICAgICB2YXIga2V5U2l6ZSA9IGtleS5zaWdCeXRlcyAvIDQ7CgogICAgICAvLyBDb21wdXRlIG51bWJlciBvZiByb3VuZHMKICAgICAgdmFyIG5Sb3VuZHMgPSB0aGlzLl9uUm91bmRzID0ga2V5U2l6ZSArIDYKCiAgICAgIC8vIENvbXB1dGUgbnVtYmVyIG9mIGtleSBzY2hlZHVsZSByb3dzCiAgICAgIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNDsKCiAgICAgIC8vIENvbXB1dGUga2V5IHNjaGVkdWxlCiAgICAgIHZhciBrZXlTY2hlZHVsZSA9IHRoaXMuX2tleVNjaGVkdWxlID0gW107CiAgICAgIGZvciAodmFyIGtzUm93ID0gMDsga3NSb3cgPCBrc1Jvd3M7IGtzUm93KyspIHsKICAgICAgICBpZiAoa3NSb3cgPCBrZXlTaXplKSB7CiAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlXb3Jkc1trc1Jvd107CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3cgLSAxXTsKCiAgICAgICAgICBpZiAoIShrc1JvdyAlIGtleVNpemUpKSB7CiAgICAgICAgICAgIC8vIFJvdCB3b3JkCiAgICAgICAgICAgIHQgPSAodCA8PCA4KSB8ICh0ID4+PiAyNCk7CgogICAgICAgICAgICAvLyBTdWIgd29yZAogICAgICAgICAgICB0ID0gKFNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbdCAmIDB4ZmZdOwoKICAgICAgICAgICAgLy8gTWl4IFJjb24KICAgICAgICAgICAgdCBePSBSQ09OWyhrc1JvdyAvIGtleVNpemUpIHwgMF0gPDwgMjQ7CiAgICAgICAgICB9IGVsc2UgaWYgKGtleVNpemUgPiA2ICYmIGtzUm93ICUga2V5U2l6ZSA9PSA0KSB7CiAgICAgICAgICAgIC8vIFN1YiB3b3JkCiAgICAgICAgICAgIHQgPSAoU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFt0ICYgMHhmZl07CiAgICAgICAgICB9CgogICAgICAgICAga2V5U2NoZWR1bGVba3NSb3ddID0ga2V5U2NoZWR1bGVba3NSb3cgLSBrZXlTaXplXSBeIHQ7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBDb21wdXRlIGludiBrZXkgc2NoZWR1bGUKICAgICAgdmFyIGludktleVNjaGVkdWxlID0gdGhpcy5faW52S2V5U2NoZWR1bGUgPSBbXTsKICAgICAgZm9yICh2YXIgaW52S3NSb3cgPSAwOyBpbnZLc1JvdyA8IGtzUm93czsgaW52S3NSb3crKykgewogICAgICAgIHZhciBrc1JvdyA9IGtzUm93cyAtIGludktzUm93OwoKICAgICAgICBpZiAoaW52S3NSb3cgJSA0KSB7CiAgICAgICAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2tzUm93XTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrc1JvdyAtIDRdOwogICAgICAgIH0KCiAgICAgICAgaWYgKGludktzUm93IDwgNCB8fCBrc1JvdyA8PSA0KSB7CiAgICAgICAgICBpbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSB0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSBJTlZfU1VCX01JWF8wW1NCT1hbdCA+Pj4gMjRdXSBeIElOVl9TVUJfTUlYXzFbU0JPWFsodCA+Pj4gMTYpICYgMHhmZl1dIF4KICAgICAgICAgICAgICBJTlZfU1VCX01JWF8yW1NCT1hbKHQgPj4+IDgpICYgMHhmZl1dIF4gSU5WX1NVQl9NSVhfM1tTQk9YW3QgJiAweGZmXV07CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIGVuY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewogICAgICB0aGlzLl9kb0NyeXB0QmxvY2soTSwgb2Zmc2V0LCB0aGlzLl9rZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKTsKICAgIH0sCgogICAgZGVjcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7CiAgICAgIC8vIFN3YXAgMm5kIGFuZCA0dGggcm93cwogICAgICB2YXIgdCA9IE1bb2Zmc2V0ICsgMV07CiAgICAgIE1bb2Zmc2V0ICsgMV0gPSBNW29mZnNldCArIDNdOwogICAgICBNW29mZnNldCArIDNdID0gdDsKCiAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX2ludktleVNjaGVkdWxlLCBJTlZfU1VCX01JWF8wLCBJTlZfU1VCX01JWF8xLCBJTlZfU1VCX01JWF8yLCBJTlZfU1VCX01JWF8zLCBJTlZfU0JPWCk7CgogICAgICAvLyBJbnYgc3dhcCAybmQgYW5kIDR0aCByb3dzCiAgICAgIHZhciB0ID0gTVtvZmZzZXQgKyAxXTsKICAgICAgTVtvZmZzZXQgKyAxXSA9IE1bb2Zmc2V0ICsgM107CiAgICAgIE1bb2Zmc2V0ICsgM10gPSB0OwogICAgfSwKCiAgICBfZG9DcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0LCBrZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKSB7CiAgICAgIC8vIFNob3J0Y3V0CiAgICAgIHZhciBuUm91bmRzID0gdGhpcy5fblJvdW5kczsKCiAgICAgIC8vIEdldCBpbnB1dCwgYWRkIHJvdW5kIGtleQogICAgICB2YXIgczAgPSBNW29mZnNldF0gICAgIF4ga2V5U2NoZWR1bGVbMF07CiAgICAgIHZhciBzMSA9IE1bb2Zmc2V0ICsgMV0gXiBrZXlTY2hlZHVsZVsxXTsKICAgICAgdmFyIHMyID0gTVtvZmZzZXQgKyAyXSBeIGtleVNjaGVkdWxlWzJdOwogICAgICB2YXIgczMgPSBNW29mZnNldCArIDNdIF4ga2V5U2NoZWR1bGVbM107CgogICAgICAvLyBLZXkgc2NoZWR1bGUgcm93IGNvdW50ZXIKICAgICAgdmFyIGtzUm93ID0gNDsKCiAgICAgIC8vIFJvdW5kcwogICAgICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykgewogICAgICAgIC8vIFNoaWZ0IHJvd3MsIHN1YiBieXRlcywgbWl4IGNvbHVtbnMsIGFkZCByb3VuZCBrZXkKICAgICAgICB2YXIgdDAgPSBTVUJfTUlYXzBbczAgPj4+IDI0XSBeIFNVQl9NSVhfMVsoczEgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWF8yWyhzMiA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhfM1tzMyAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK107CiAgICAgICAgdmFyIHQxID0gU1VCX01JWF8wW3MxID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczMgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdOwogICAgICAgIHZhciB0MiA9IFNVQl9NSVhfMFtzMiA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MxICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKICAgICAgICB2YXIgdDMgPSBTVUJfTUlYXzBbczMgPj4+IDI0XSBeIFNVQl9NSVhfMVsoczAgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWF8yWyhzMSA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhfM1tzMiAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK107CgogICAgICAgIC8vIFVwZGF0ZSBzdGF0ZQogICAgICAgIHMwID0gdDA7CiAgICAgICAgczEgPSB0MTsKICAgICAgICBzMiA9IHQyOwogICAgICAgIHMzID0gdDM7CiAgICAgIH0KCiAgICAgIC8vIFNoaWZ0IHJvd3MsIHN1YiBieXRlcywgYWRkIHJvdW5kIGtleQogICAgICB2YXIgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKICAgICAgdmFyIHQxID0gKChTQk9YW3MxID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMyID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczMgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MwICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107CiAgICAgIHZhciB0MiA9ICgoU0JPWFtzMiA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMyA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMwID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMSAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdOwogICAgICB2YXIgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTsKCiAgICAgIC8vIFNldCBvdXRwdXQKICAgICAgTVtvZmZzZXRdICAgICA9IHQwOwogICAgICBNW29mZnNldCArIDFdID0gdDE7CiAgICAgIE1bb2Zmc2V0ICsgMl0gPSB0MjsKICAgICAgTVtvZmZzZXQgKyAzXSA9IHQzOwogICAgfSwKCiAgICBrZXlTaXplOiAyNTYvMzIKICB9KTsKCiAgLyoqCiAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLkFFUy5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTsKICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5BRVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7CiAgICovCiAgQy5BRVMgPSBCbG9ja0NpcGhlci5fY3JlYXRlSGVscGVyKEFFUyk7Cn0oKSk7Ci8qCiBDcnlwdG9KUyB2My4xLjIKIG1kNS5qcwogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzCiAoYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2UKICovCihmdW5jdGlvbiAoTWF0aCkgewogIC8vIFNob3J0Y3V0cwogIHZhciBDID0gQ3J5cHRvSlM7CiAgdmFyIENfbGliID0gQy5saWI7CiAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyOwogIHZhciBDX2FsZ28gPSBDLmFsZ287CgogIC8vIENvbnN0YW50cyB0YWJsZQogIHZhciBUID0gW107CgogIC8vIENvbXB1dGUgY29uc3RhbnRzCiAgKGZ1bmN0aW9uICgpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykgewogICAgICBUW2ldID0gKE1hdGguYWJzKE1hdGguc2luKGkgKyAxKSkgKiAweDEwMDAwMDAwMCkgfCAwOwogICAgfQogIH0oKSk7CgogIC8qKgogICAqIE1ENSBoYXNoIGFsZ29yaXRobS4KICAgKi8KICB2YXIgTUQ1ID0gQ19hbGdvLk1ENSA9IEhhc2hlci5leHRlbmQoewogICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChbCiAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwKICAgICAgICAweDk4YmFkY2ZlLCAweDEwMzI1NDc2CiAgICAgIF0pOwogICAgfSwKCiAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKICAgICAgLy8gU3dhcCBlbmRpYW4KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7CiAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgdmFyIG9mZnNldF9pID0gb2Zmc2V0ICsgaTsKICAgICAgICB2YXIgTV9vZmZzZXRfaSA9IE1bb2Zmc2V0X2ldOwoKICAgICAgICBNW29mZnNldF9pXSA9ICgKICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSAgfCAoTV9vZmZzZXRfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKQogICAgICAgICAgICApOwogICAgICB9CgogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzOwoKICAgICAgdmFyIE1fb2Zmc2V0XzAgID0gTVtvZmZzZXQgKyAwXTsKICAgICAgdmFyIE1fb2Zmc2V0XzEgID0gTVtvZmZzZXQgKyAxXTsKICAgICAgdmFyIE1fb2Zmc2V0XzIgID0gTVtvZmZzZXQgKyAyXTsKICAgICAgdmFyIE1fb2Zmc2V0XzMgID0gTVtvZmZzZXQgKyAzXTsKICAgICAgdmFyIE1fb2Zmc2V0XzQgID0gTVtvZmZzZXQgKyA0XTsKICAgICAgdmFyIE1fb2Zmc2V0XzUgID0gTVtvZmZzZXQgKyA1XTsKICAgICAgdmFyIE1fb2Zmc2V0XzYgID0gTVtvZmZzZXQgKyA2XTsKICAgICAgdmFyIE1fb2Zmc2V0XzcgID0gTVtvZmZzZXQgKyA3XTsKICAgICAgdmFyIE1fb2Zmc2V0XzggID0gTVtvZmZzZXQgKyA4XTsKICAgICAgdmFyIE1fb2Zmc2V0XzkgID0gTVtvZmZzZXQgKyA5XTsKICAgICAgdmFyIE1fb2Zmc2V0XzEwID0gTVtvZmZzZXQgKyAxMF07CiAgICAgIHZhciBNX29mZnNldF8xMSA9IE1bb2Zmc2V0ICsgMTFdOwogICAgICB2YXIgTV9vZmZzZXRfMTIgPSBNW29mZnNldCArIDEyXTsKICAgICAgdmFyIE1fb2Zmc2V0XzEzID0gTVtvZmZzZXQgKyAxM107CiAgICAgIHZhciBNX29mZnNldF8xNCA9IE1bb2Zmc2V0ICsgMTRdOwogICAgICB2YXIgTV9vZmZzZXRfMTUgPSBNW29mZnNldCArIDE1XTsKCiAgICAgIC8vIFdvcmtpbmcgdmFyaWFsYmVzCiAgICAgIHZhciBhID0gSFswXTsKICAgICAgdmFyIGIgPSBIWzFdOwogICAgICB2YXIgYyA9IEhbMl07CiAgICAgIHZhciBkID0gSFszXTsKCiAgICAgIC8vIENvbXB1dGF0aW9uCiAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8wLCAgNywgIFRbMF0pOwogICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfMSwgIDEyLCBUWzFdKTsKICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzIsICAxNywgVFsyXSk7CiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8zLCAgMjIsIFRbM10pOwogICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfNCwgIDcsICBUWzRdKTsKICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzUsICAxMiwgVFs1XSk7CiAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF82LCAgMTcsIFRbNl0pOwogICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfNywgIDIyLCBUWzddKTsKICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzgsICA3LCAgVFs4XSk7CiAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF85LCAgMTIsIFRbOV0pOwogICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTAsIDE3LCBUWzEwXSk7CiAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xMSwgMjIsIFRbMTFdKTsKICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEyLCA3LCAgVFsxMl0pOwogICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTMsIDEyLCBUWzEzXSk7CiAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8xNCwgMTcsIFRbMTRdKTsKICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE1LCAyMiwgVFsxNV0pOwoKICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsICA1LCAgVFsxNl0pOwogICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfNiwgIDksICBUWzE3XSk7CiAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTQsIFRbMThdKTsKICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzAsICAyMCwgVFsxOV0pOwogICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfNSwgIDUsICBUWzIwXSk7CiAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8xMCwgOSwgIFRbMjFdKTsKICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE1LCAxNCwgVFsyMl0pOwogICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfNCwgIDIwLCBUWzIzXSk7CiAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF85LCAgNSwgIFRbMjRdKTsKICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE0LCA5LCAgVFsyNV0pOwogICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE0LCBUWzI2XSk7CiAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF84LCAgMjAsIFRbMjddKTsKICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEzLCA1LCAgVFsyOF0pOwogICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMiwgIDksICBUWzI5XSk7CiAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF83LCAgMTQsIFRbMzBdKTsKICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEyLCAyMCwgVFszMV0pOwoKICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsICA0LCAgVFszMl0pOwogICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfOCwgIDExLCBUWzMzXSk7CiAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTYsIFRbMzRdKTsKICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE0LCAyMywgVFszNV0pOwogICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDQsICBUWzM2XSk7CiAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF80LCAgMTEsIFRbMzddKTsKICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNiwgVFszOF0pOwogICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTAsIDIzLCBUWzM5XSk7CiAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF8xMywgNCwgIFRbNDBdKTsKICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzAsICAxMSwgVFs0MV0pOwogICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE2LCBUWzQyXSk7CiAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF82LCAgMjMsIFRbNDNdKTsKICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA0LCAgVFs0NF0pOwogICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTIsIDExLCBUWzQ1XSk7CiAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xNSwgMTYsIFRbNDZdKTsKICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzIsICAyMywgVFs0N10pOwoKICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzAsICA2LCAgVFs0OF0pOwogICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfNywgIDEwLCBUWzQ5XSk7CiAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8xNCwgMTUsIFRbNTBdKTsKICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzUsICAyMSwgVFs1MV0pOwogICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTIsIDYsICBUWzUyXSk7CiAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8zLCAgMTAsIFRbNTNdKTsKICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzEwLCAxNSwgVFs1NF0pOwogICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMSwgIDIxLCBUWzU1XSk7CiAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF84LCAgNiwgIFRbNTZdKTsKICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE1LCAxMCwgVFs1N10pOwogICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE1LCBUWzU4XSk7CiAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF8xMywgMjEsIFRbNTldKTsKICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzQsICA2LCAgVFs2MF0pOwogICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTEsIDEwLCBUWzYxXSk7CiAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8yLCAgMTUsIFRbNjJdKTsKICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzksICAyMSwgVFs2M10pOwoKICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWUKICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwOwogICAgICBIWzFdID0gKEhbMV0gKyBiKSB8IDA7CiAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDsKICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwOwogICAgfSwKCiAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkgewogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhOwogICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkczsKCiAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7CiAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODsKCiAgICAgIC8vIEFkZCBwYWRkaW5nCiAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpOwoKICAgICAgdmFyIG5CaXRzVG90YWxIID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApOwogICAgICB2YXIgbkJpdHNUb3RhbEwgPSBuQml0c1RvdGFsOwogICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE1XSA9ICgKICAgICAgICAgICgoKG5CaXRzVG90YWxIIDw8IDgpICB8IChuQml0c1RvdGFsSCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKICAgICAgICAgICAgICAoKChuQml0c1RvdGFsSCA8PCAyNCkgfCAobkJpdHNUb3RhbEggPj4+IDgpKSAgJiAweGZmMDBmZjAwKQogICAgICAgICAgKTsKICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoCiAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCA4KSAgfCAobkJpdHNUb3RhbEwgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CiAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEwgPDwgMjQpIHwgKG5CaXRzVG90YWxMID4+PiA4KSkgICYgMHhmZjAwZmYwMCkKICAgICAgICAgICk7CgogICAgICBkYXRhLnNpZ0J5dGVzID0gKGRhdGFXb3Jkcy5sZW5ndGggKyAxKSAqIDQ7CgogICAgICAvLyBIYXNoIGZpbmFsIGJsb2NrcwogICAgICB0aGlzLl9wcm9jZXNzKCk7CgogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoOwogICAgICB2YXIgSCA9IGhhc2gud29yZHM7CgogICAgICAvLyBTd2FwIGVuZGlhbgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykgewogICAgICAgIC8vIFNob3J0Y3V0CiAgICAgICAgdmFyIEhfaSA9IEhbaV07CgogICAgICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKICAgICAgICAgICAgKCgoSF9pIDw8IDI0KSB8IChIX2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKTsKICAgICAgfQoKICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2gKICAgICAgcmV0dXJuIGhhc2g7CiAgICB9LAoKICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpOwogICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTsKCiAgICAgIHJldHVybiBjbG9uZTsKICAgIH0KICB9KTsKCiAgZnVuY3Rpb24gRkYoYSwgYiwgYywgZCwgeCwgcywgdCkgewogICAgdmFyIG4gPSBhICsgKChiICYgYykgfCAofmIgJiBkKSkgKyB4ICsgdDsKICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7CiAgfQoKICBmdW5jdGlvbiBHRyhhLCBiLCBjLCBkLCB4LCBzLCB0KSB7CiAgICB2YXIgbiA9IGEgKyAoKGIgJiBkKSB8IChjICYgfmQpKSArIHggKyB0OwogICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjsKICB9CgogIGZ1bmN0aW9uIEhIKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHsKICAgIHZhciBuID0gYSArIChiIF4gYyBeIGQpICsgeCArIHQ7CiAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiOwogIH0KCiAgZnVuY3Rpb24gSUkoYSwgYiwgYywgZCwgeCwgcywgdCkgewogICAgdmFyIG4gPSBhICsgKGMgXiAoYiB8IH5kKSkgKyB4ICsgdDsKICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7CiAgfQoKICAvKioKICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgKgogICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgogICAqCiAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC4KICAgKgogICAqIEBzdGF0aWMKICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5NRDUoJ21lc3NhZ2UnKTsKICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5NRDUod29yZEFycmF5KTsKICAgKi8KICBDLk1ENSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKE1ENSk7CgogIC8qKgogICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgKgogICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgogICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgogICAqCiAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy4KICAgKgogICAqIEBzdGF0aWMKICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjTUQ1KG1lc3NhZ2UsIGtleSk7CiAgICovCiAgQy5IbWFjTUQ1ID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKE1ENSk7Cn0oTWF0aCkpOwovKgogQ3J5cHRvSlMgdjMuMS4yCiBzaGExLmpzCiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMKIChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLgogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQogKi8KKGZ1bmN0aW9uICgpIHsKICAvLyBTaG9ydGN1dHMKICB2YXIgQyA9IENyeXB0b0pTOwogIHZhciBDX2xpYiA9IEMubGliOwogIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7CiAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjsKICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKICAvLyBSZXVzYWJsZSBvYmplY3QKICB2YXIgVyA9IFtdOwoKICAvKioKICAgKiBTSEEtMSBoYXNoIGFsZ29yaXRobS4KICAgKi8KICB2YXIgU0hBMSA9IENfYWxnby5TSEExID0gSGFzaGVyLmV4dGVuZCh7CiAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkgewogICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFsKICAgICAgICAweDY3NDUyMzAxLCAweGVmY2RhYjg5LAogICAgICAgIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsCiAgICAgICAgMHhjM2QyZTFmMAogICAgICBdKTsKICAgIH0sCgogICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7CiAgICAgIC8vIFNob3J0Y3V0CiAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkczsKCiAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzCiAgICAgIHZhciBhID0gSFswXTsKICAgICAgdmFyIGIgPSBIWzFdOwogICAgICB2YXIgYyA9IEhbMl07CiAgICAgIHZhciBkID0gSFszXTsKICAgICAgdmFyIGUgPSBIWzRdOwoKICAgICAgLy8gQ29tcHV0YXRpb24KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7CiAgICAgICAgaWYgKGkgPCAxNikgewogICAgICAgICAgV1tpXSA9IE1bb2Zmc2V0ICsgaV0gfCAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgbiA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl07CiAgICAgICAgICBXW2ldID0gKG4gPDwgMSkgfCAobiA+Pj4gMzEpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHQgPSAoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGUgKyBXW2ldOwogICAgICAgIGlmIChpIDwgMjApIHsKICAgICAgICAgIHQgKz0gKChiICYgYykgfCAofmIgJiBkKSkgKyAweDVhODI3OTk5OwogICAgICAgIH0gZWxzZSBpZiAoaSA8IDQwKSB7CiAgICAgICAgICB0ICs9IChiIF4gYyBeIGQpICsgMHg2ZWQ5ZWJhMTsKICAgICAgICB9IGVsc2UgaWYgKGkgPCA2MCkgewogICAgICAgICAgdCArPSAoKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpKSAtIDB4NzBlNDQzMjQ7CiAgICAgICAgfSBlbHNlIC8qIGlmIChpIDwgODApICovIHsKICAgICAgICAgIHQgKz0gKGIgXiBjIF4gZCkgLSAweDM1OWQzZTJhOwogICAgICAgIH0KCiAgICAgICAgZSA9IGQ7CiAgICAgICAgZCA9IGM7CiAgICAgICAgYyA9IChiIDw8IDMwKSB8IChiID4+PiAyKTsKICAgICAgICBiID0gYTsKICAgICAgICBhID0gdDsKICAgICAgfQoKICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWUKICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwOwogICAgICBIWzFdID0gKEhbMV0gKyBiKSB8IDA7CiAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDsKICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwOwogICAgICBIWzRdID0gKEhbNF0gKyBlKSB8IDA7CiAgICB9LAoKICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIFNob3J0Y3V0cwogICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7CiAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzOwoKICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODsKICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4OwoKICAgICAgLy8gQWRkIHBhZGRpbmcKICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7CiAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApOwogICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE1XSA9IG5CaXRzVG90YWw7CiAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDsKCiAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzCiAgICAgIHRoaXMuX3Byb2Nlc3MoKTsKCiAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoCiAgICAgIHJldHVybiB0aGlzLl9oYXNoOwogICAgfSwKCiAgICBjbG9uZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTsKICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7CgogICAgICByZXR1cm4gY2xvbmU7CiAgICB9CiAgfSk7CgogIC8qKgogICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLgogICAqCiAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guCiAgICoKICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLgogICAqCiAgICogQHN0YXRpYwogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTEoJ21lc3NhZ2UnKTsKICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEExKHdvcmRBcnJheSk7CiAgICovCiAgQy5TSEExID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMSk7CgogIC8qKgogICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgKgogICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgogICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgogICAqCiAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy4KICAgKgogICAqIEBzdGF0aWMKICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMShtZXNzYWdlLCBrZXkpOwogICAqLwogIEMuSG1hY1NIQTEgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMSk7Cn0oKSk7Ci8qCiBDcnlwdG9KUyB2My4xLjIKIHg2NC1jb3JlLmpzCiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMKIChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLgogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQogKi8KKGZ1bmN0aW9uICh1bmRlZmluZWQpIHsKICAvLyBTaG9ydGN1dHMKICB2YXIgQyA9IENyeXB0b0pTOwogIHZhciBDX2xpYiA9IEMubGliOwogIHZhciBCYXNlID0gQ19saWIuQmFzZTsKICB2YXIgWDMyV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwoKICAvKioKICAgKiB4NjQgbmFtZXNwYWNlLgogICAqLwogIHZhciBDX3g2NCA9IEMueDY0ID0ge307CgogIC8qKgogICAqIEEgNjQtYml0IHdvcmQuCiAgICovCiAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkID0gQmFzZS5leHRlbmQoewogICAgLyoqCiAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgNjQtYml0IHdvcmQuCiAgICAgKgogICAgICogQHBhcmFtIHtudW1iZXJ9IGhpZ2ggVGhlIGhpZ2ggMzIgYml0cy4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgVGhlIGxvdyAzMiBiaXRzLgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciB4NjRXb3JkID0gQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpOwogICAgICovCiAgICBpbml0OiBmdW5jdGlvbiAoaGlnaCwgbG93KSB7CiAgICAgIHRoaXMuaGlnaCA9IGhpZ2g7CiAgICAgIHRoaXMubG93ID0gbG93OwogICAgfQoKICAgIC8qKgogICAgICogQml0d2lzZSBOT1RzIHRoaXMgd29yZC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgbmVnYXRpbmcuCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIG5lZ2F0ZWQgPSB4NjRXb3JkLm5vdCgpOwogICAgICovCiAgICAvLyBub3Q6IGZ1bmN0aW9uICgpIHsKICAgIC8vIHZhciBoaWdoID0gfnRoaXMuaGlnaDsKICAgIC8vIHZhciBsb3cgPSB+dGhpcy5sb3c7CgogICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7CiAgICAvLyB9LAoKICAgIC8qKgogICAgICogQml0d2lzZSBBTkRzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIEFORCB3aXRoIHRoaXMgd29yZC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgQU5EaW5nLgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBhbmRlZCA9IHg2NFdvcmQuYW5kKGFub3RoZXJYNjRXb3JkKTsKICAgICAqLwogICAgLy8gYW5kOiBmdW5jdGlvbiAod29yZCkgewogICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggJiB3b3JkLmhpZ2g7CiAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgJiB3b3JkLmxvdzsKCiAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTsKICAgIC8vIH0sCgogICAgLyoqCiAgICAgKiBCaXR3aXNlIE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuCiAgICAgKgogICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBPUiB3aXRoIHRoaXMgd29yZC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgT1JpbmcuCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIG9yZWQgPSB4NjRXb3JkLm9yKGFub3RoZXJYNjRXb3JkKTsKICAgICAqLwogICAgLy8gb3I6IGZ1bmN0aW9uICh3b3JkKSB7CiAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCB8IHdvcmQuaGlnaDsKICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyB8IHdvcmQubG93OwoKICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpOwogICAgLy8gfSwKCiAgICAvKioKICAgICAqIEJpdHdpc2UgWE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuCiAgICAgKgogICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBYT1Igd2l0aCB0aGlzIHdvcmQuCiAgICAgKgogICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIFhPUmluZy4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgeG9yZWQgPSB4NjRXb3JkLnhvcihhbm90aGVyWDY0V29yZCk7CiAgICAgKi8KICAgIC8vIHhvcjogZnVuY3Rpb24gKHdvcmQpIHsKICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoIF4gd29yZC5oaWdoOwogICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IF4gd29yZC5sb3c7CgogICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7CiAgICAvLyB9LAoKICAgIC8qKgogICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIGxlZnQuCiAgICAgKgogICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0LgogICAgICoKICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBzaGlmdGluZy4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgc2hpZnRlZCA9IHg2NFdvcmQuc2hpZnRMKDI1KTsKICAgICAqLwogICAgLy8gc2hpZnRMOiBmdW5jdGlvbiAobikgewogICAgLy8gaWYgKG4gPCAzMikgewogICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoIDw8IG4pIHwgKHRoaXMubG93ID4+PiAoMzIgLSBuKSk7CiAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgPDwgbjsKICAgIC8vIH0gZWxzZSB7CiAgICAvLyB2YXIgaGlnaCA9IHRoaXMubG93IDw8IChuIC0gMzIpOwogICAgLy8gdmFyIGxvdyA9IDA7CiAgICAvLyB9CgogICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7CiAgICAvLyB9LAoKICAgIC8qKgogICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIHJpZ2h0LgogICAgICoKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byBzaGlmdC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgc2hpZnRpbmcuCiAgICAgKgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAgICAgdmFyIHNoaWZ0ZWQgPSB4NjRXb3JkLnNoaWZ0Uig3KTsKICAgICAqLwogICAgLy8gc2hpZnRSOiBmdW5jdGlvbiAobikgewogICAgLy8gaWYgKG4gPCAzMikgewogICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyA+Pj4gbikgfCAodGhpcy5oaWdoIDw8ICgzMiAtIG4pKTsKICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoID4+PiBuOwogICAgLy8gfSBlbHNlIHsKICAgIC8vIHZhciBsb3cgPSB0aGlzLmhpZ2ggPj4+IChuIC0gMzIpOwogICAgLy8gdmFyIGhpZ2ggPSAwOwogICAgLy8gfQoKICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpOwogICAgLy8gfSwKCiAgICAvKioKICAgICAqIFJvdGF0ZXMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgbGVmdC4KICAgICAqCiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gcm90YXRlLgogICAgICoKICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciByb3RhdGluZy4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgcm90YXRlZCA9IHg2NFdvcmQucm90TCgyNSk7CiAgICAgKi8KICAgIC8vIHJvdEw6IGZ1bmN0aW9uIChuKSB7CiAgICAvLyByZXR1cm4gdGhpcy5zaGlmdEwobikub3IodGhpcy5zaGlmdFIoNjQgLSBuKSk7CiAgICAvLyB9LAoKICAgIC8qKgogICAgICogUm90YXRlcyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSByaWdodC4KICAgICAqCiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gcm90YXRlLgogICAgICoKICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciByb3RhdGluZy4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgcm90YXRlZCA9IHg2NFdvcmQucm90Uig3KTsKICAgICAqLwogICAgLy8gcm90UjogZnVuY3Rpb24gKG4pIHsKICAgIC8vIHJldHVybiB0aGlzLnNoaWZ0UihuKS5vcih0aGlzLnNoaWZ0TCg2NCAtIG4pKTsKICAgIC8vIH0sCgogICAgLyoqCiAgICAgKiBBZGRzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIGFkZCB3aXRoIHRoaXMgd29yZC4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgYWRkaW5nLgogICAgICoKICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogICAgIHZhciBhZGRlZCA9IHg2NFdvcmQuYWRkKGFub3RoZXJYNjRXb3JkKTsKICAgICAqLwogICAgLy8gYWRkOiBmdW5jdGlvbiAod29yZCkgewogICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyArIHdvcmQubG93KSB8IDA7CiAgICAvLyB2YXIgY2FycnkgPSAobG93ID4+PiAwKSA8ICh0aGlzLmxvdyA+Pj4gMCkgPyAxIDogMDsKICAgIC8vIHZhciBoaWdoID0gKHRoaXMuaGlnaCArIHdvcmQuaGlnaCArIGNhcnJ5KSB8IDA7CgogICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7CiAgICAvLyB9CiAgfSk7CgogIC8qKgogICAqIEFuIGFycmF5IG9mIDY0LWJpdCB3b3Jkcy4KICAgKgogICAqIEBwcm9wZXJ0eSB7QXJyYXl9IHdvcmRzIFRoZSBhcnJheSBvZiBDcnlwdG9KUy54NjQuV29yZCBvYmplY3RzLgogICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaWdCeXRlcyBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoaXMgd29yZCBhcnJheS4KICAgKi8KICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoewogICAgLyoqCiAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyAoT3B0aW9uYWwpIEFuIGFycmF5IG9mIENyeXB0b0pTLng2NC5Xb3JkIG9iamVjdHMuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2lnQnl0ZXMgKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoZSB3b3Jkcy4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMueDY0LldvcmRBcnJheS5jcmVhdGUoKTsKICAgICAqCiAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKFsKICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpLAogICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgxODE5MWExYiwgMHgxYzFkMWUxZikKICAgICAqICAgICBdKTsKICAgICAqCiAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKFsKICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpLAogICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgxODE5MWExYiwgMHgxYzFkMWUxZikKICAgICAqICAgICBdLCAxMCk7CiAgICAgKi8KICAgIGluaXQ6IGZ1bmN0aW9uICh3b3Jkcywgc2lnQnl0ZXMpIHsKICAgICAgd29yZHMgPSB0aGlzLndvcmRzID0gd29yZHMgfHwgW107CgogICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHNpZ0J5dGVzOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2lnQnl0ZXMgPSB3b3Jkcy5sZW5ndGggKiA4OwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogQ29udmVydHMgdGhpcyA2NC1iaXQgd29yZCBhcnJheSB0byBhIDMyLWJpdCB3b3JkIGFycmF5LgogICAgICoKICAgICAqIEByZXR1cm4ge0NyeXB0b0pTLmxpYi5Xb3JkQXJyYXl9IFRoaXMgd29yZCBhcnJheSdzIGRhdGEgYXMgYSAzMi1iaXQgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgeDMyV29yZEFycmF5ID0geDY0V29yZEFycmF5LnRvWDMyKCk7CiAgICAgKi8KICAgIHRvWDMyOiBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIFNob3J0Y3V0cwogICAgICB2YXIgeDY0V29yZHMgPSB0aGlzLndvcmRzOwogICAgICB2YXIgeDY0V29yZHNMZW5ndGggPSB4NjRXb3Jkcy5sZW5ndGg7CgogICAgICAvLyBDb252ZXJ0CiAgICAgIHZhciB4MzJXb3JkcyA9IFtdOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHg2NFdvcmRzTGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgeDY0V29yZCA9IHg2NFdvcmRzW2ldOwogICAgICAgIHgzMldvcmRzLnB1c2goeDY0V29yZC5oaWdoKTsKICAgICAgICB4MzJXb3Jkcy5wdXNoKHg2NFdvcmQubG93KTsKICAgICAgfQoKICAgICAgcmV0dXJuIFgzMldvcmRBcnJheS5jcmVhdGUoeDMyV29yZHMsIHRoaXMuc2lnQnl0ZXMpOwogICAgfSwKCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgd29yZCBhcnJheS4KICAgICAqCiAgICAgKiBAcmV0dXJuIHtYNjRXb3JkQXJyYXl9IFRoZSBjbG9uZS4KICAgICAqCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICAgICB2YXIgY2xvbmUgPSB4NjRXb3JkQXJyYXkuY2xvbmUoKTsKICAgICAqLwogICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpOwoKICAgICAgLy8gQ2xvbmUgIndvcmRzIiBhcnJheQogICAgICB2YXIgd29yZHMgPSBjbG9uZS53b3JkcyA9IHRoaXMud29yZHMuc2xpY2UoMCk7CgogICAgICAvLyBDbG9uZSBlYWNoIFg2NFdvcmQgb2JqZWN0CiAgICAgIHZhciB3b3Jkc0xlbmd0aCA9IHdvcmRzLmxlbmd0aDsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3Jkc0xlbmd0aDsgaSsrKSB7CiAgICAgICAgd29yZHNbaV0gPSB3b3Jkc1tpXS5jbG9uZSgpOwogICAgICB9CgogICAgICByZXR1cm4gY2xvbmU7CiAgICB9CiAgfSk7Cn0oKSk7Ci8qCiBDcnlwdG9KUyB2My4xLjIKIHNoYTI1Ni5qcwogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzCiAoYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2UKICovCihmdW5jdGlvbiAoTWF0aCkgewogIC8vIFNob3J0Y3V0cwogIHZhciBDID0gQ3J5cHRvSlM7CiAgdmFyIENfbGliID0gQy5saWI7CiAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTsKICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyOwogIHZhciBDX2FsZ28gPSBDLmFsZ287CgogIC8vIEluaXRpYWxpemF0aW9uIGFuZCByb3VuZCBjb25zdGFudHMgdGFibGVzCiAgdmFyIEggPSBbXTsKICB2YXIgSyA9IFtdOwoKICAvLyBDb21wdXRlIGNvbnN0YW50cwogIChmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBpc1ByaW1lKG4pIHsKICAgICAgdmFyIHNxcnROID0gTWF0aC5zcXJ0KG4pOwogICAgICBmb3IgKHZhciBmYWN0b3IgPSAyOyBmYWN0b3IgPD0gc3FydE47IGZhY3RvcisrKSB7CiAgICAgICAgaWYgKCEobiAlIGZhY3RvcikpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEZyYWN0aW9uYWxCaXRzKG4pIHsKICAgICAgcmV0dXJuICgobiAtIChuIHwgMCkpICogMHgxMDAwMDAwMDApIHwgMDsKICAgIH0KCiAgICB2YXIgbiA9IDI7CiAgICB2YXIgblByaW1lID0gMDsKICAgIHdoaWxlIChuUHJpbWUgPCA2NCkgewogICAgICBpZiAoaXNQcmltZShuKSkgewogICAgICAgIGlmIChuUHJpbWUgPCA4KSB7CiAgICAgICAgICBIW25QcmltZV0gPSBnZXRGcmFjdGlvbmFsQml0cyhNYXRoLnBvdyhuLCAxIC8gMikpOwogICAgICAgIH0KICAgICAgICBLW25QcmltZV0gPSBnZXRGcmFjdGlvbmFsQml0cyhNYXRoLnBvdyhuLCAxIC8gMykpOwoKICAgICAgICBuUHJpbWUrKzsKICAgICAgfQoKICAgICAgbisrOwogICAgfQogIH0oKSk7CgogIC8vIFJldXNhYmxlIG9iamVjdAogIHZhciBXID0gW107CgogIC8qKgogICAqIFNIQS0yNTYgaGFzaCBhbGdvcml0aG0uCiAgICovCiAgdmFyIFNIQTI1NiA9IENfYWxnby5TSEEyNTYgPSBIYXNoZXIuZXh0ZW5kKHsKICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoSC5zbGljZSgwKSk7CiAgICB9LAoKICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewogICAgICAvLyBTaG9ydGN1dAogICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7CgogICAgICAvLyBXb3JraW5nIHZhcmlhYmxlcwogICAgICB2YXIgYSA9IEhbMF07CiAgICAgIHZhciBiID0gSFsxXTsKICAgICAgdmFyIGMgPSBIWzJdOwogICAgICB2YXIgZCA9IEhbM107CiAgICAgIHZhciBlID0gSFs0XTsKICAgICAgdmFyIGYgPSBIWzVdOwogICAgICB2YXIgZyA9IEhbNl07CiAgICAgIHZhciBoID0gSFs3XTsKCiAgICAgIC8vIENvbXB1dGF0aW9uCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykgewogICAgICAgIGlmIChpIDwgMTYpIHsKICAgICAgICAgIFdbaV0gPSBNW29mZnNldCArIGldIHwgMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGdhbW1hMHggPSBXW2kgLSAxNV07CiAgICAgICAgICB2YXIgZ2FtbWEwICA9ICgoZ2FtbWEweCA8PCAyNSkgfCAoZ2FtbWEweCA+Pj4gNykpICBeCiAgICAgICAgICAgICAgKChnYW1tYTB4IDw8IDE0KSB8IChnYW1tYTB4ID4+PiAxOCkpIF4KICAgICAgICAgICAgICAoZ2FtbWEweCA+Pj4gMyk7CgogICAgICAgICAgdmFyIGdhbW1hMXggPSBXW2kgLSAyXTsKICAgICAgICAgIHZhciBnYW1tYTEgID0gKChnYW1tYTF4IDw8IDE1KSB8IChnYW1tYTF4ID4+PiAxNykpIF4KICAgICAgICAgICAgICAoKGdhbW1hMXggPDwgMTMpIHwgKGdhbW1hMXggPj4+IDE5KSkgXgogICAgICAgICAgICAgIChnYW1tYTF4ID4+PiAxMCk7CgogICAgICAgICAgV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdOwogICAgICAgIH0KCiAgICAgICAgdmFyIGNoICA9IChlICYgZikgXiAofmUgJiBnKTsKICAgICAgICB2YXIgbWFqID0gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpOwoKICAgICAgICB2YXIgc2lnbWEwID0gKChhIDw8IDMwKSB8IChhID4+PiAyKSkgXiAoKGEgPDwgMTkpIHwgKGEgPj4+IDEzKSkgXiAoKGEgPDwgMTApIHwgKGEgPj4+IDIyKSk7CiAgICAgICAgdmFyIHNpZ21hMSA9ICgoZSA8PCAyNikgfCAoZSA+Pj4gNikpIF4gKChlIDw8IDIxKSB8IChlID4+PiAxMSkpIF4gKChlIDw8IDcpICB8IChlID4+PiAyNSkpOwoKICAgICAgICB2YXIgdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2ldICsgV1tpXTsKICAgICAgICB2YXIgdDIgPSBzaWdtYTAgKyBtYWo7CgogICAgICAgIGggPSBnOwogICAgICAgIGcgPSBmOwogICAgICAgIGYgPSBlOwogICAgICAgIGUgPSAoZCArIHQxKSB8IDA7CiAgICAgICAgZCA9IGM7CiAgICAgICAgYyA9IGI7CiAgICAgICAgYiA9IGE7CiAgICAgICAgYSA9ICh0MSArIHQyKSB8IDA7CiAgICAgIH0KCiAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlCiAgICAgIEhbMF0gPSAoSFswXSArIGEpIHwgMDsKICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwOwogICAgICBIWzJdID0gKEhbMl0gKyBjKSB8IDA7CiAgICAgIEhbM10gPSAoSFszXSArIGQpIHwgMDsKICAgICAgSFs0XSA9IChIWzRdICsgZSkgfCAwOwogICAgICBIWzVdID0gKEhbNV0gKyBmKSB8IDA7CiAgICAgIEhbNl0gPSAoSFs2XSArIGcpIHwgMDsKICAgICAgSFs3XSA9IChIWzddICsgaCkgfCAwOwogICAgfSwKCiAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkgewogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhOwogICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkczsKCiAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7CiAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODsKCiAgICAgIC8vIEFkZCBwYWRkaW5nCiAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpOwogICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTsKICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsOwogICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7CgogICAgICAvLyBIYXNoIGZpbmFsIGJsb2NrcwogICAgICB0aGlzLl9wcm9jZXNzKCk7CgogICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaAogICAgICByZXR1cm4gdGhpcy5faGFzaDsKICAgIH0sCgogICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7CiAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpOwoKICAgICAgcmV0dXJuIGNsb25lOwogICAgfQogIH0pOwoKICAvKioKICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgKgogICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgogICAqCiAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC4KICAgKgogICAqIEBzdGF0aWMKICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoJ21lc3NhZ2UnKTsKICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYod29yZEFycmF5KTsKICAgKi8KICBDLlNIQTI1NiA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTI1Nik7CgogIC8qKgogICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgKgogICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgogICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgogICAqCiAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy4KICAgKgogICAqIEBzdGF0aWMKICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMjU2KG1lc3NhZ2UsIGtleSk7CiAgICovCiAgQy5IbWFjU0hBMjU2ID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTI1Nik7Cn0oTWF0aCkpOwovKgogQ3J5cHRvSlMgdjMuMS4yCiBzaGE1MTIuanMKIGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwogKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlCiAqLwooZnVuY3Rpb24gKCkgewogIC8vIFNob3J0Y3V0cwogIHZhciBDID0gQ3J5cHRvSlM7CiAgdmFyIENfbGliID0gQy5saWI7CiAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjsKICB2YXIgQ194NjQgPSBDLng2NDsKICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7CiAgdmFyIFg2NFdvcmRBcnJheSA9IENfeDY0LldvcmRBcnJheTsKICB2YXIgQ19hbGdvID0gQy5hbGdvOwoKICBmdW5jdGlvbiBYNjRXb3JkX2NyZWF0ZSgpIHsKICAgIHJldHVybiBYNjRXb3JkLmNyZWF0ZS5hcHBseShYNjRXb3JkLCBhcmd1bWVudHMpOwogIH0KCiAgLy8gQ29uc3RhbnRzCiAgdmFyIEsgPSBbCiAgICBYNjRXb3JkX2NyZWF0ZSgweDQyOGEyZjk4LCAweGQ3MjhhZTIyKSwgWDY0V29yZF9jcmVhdGUoMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGI1YzBmYmNmLCAweGVjNGQzYjJmKSwgWDY0V29yZF9jcmVhdGUoMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDM5NTZjMjViLCAweGYzNDhiNTM4KSwgWDY0V29yZF9jcmVhdGUoMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDkyM2Y4MmE0LCAweGFmMTk0ZjliKSwgWDY0V29yZF9jcmVhdGUoMHhhYjFjNWVkNSwgMHhkYTZkODExOCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGQ4MDdhYTk4LCAweGEzMDMwMjQyKSwgWDY0V29yZF9jcmVhdGUoMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDI0MzE4NWJlLCAweDRlZTRiMjhjKSwgWDY0V29yZF9jcmVhdGUoMHg1NTBjN2RjMywgMHhkNWZmYjRlMiksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDcyYmU1ZDc0LCAweGYyN2I4OTZmKSwgWDY0V29yZF9jcmVhdGUoMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDliZGMwNmE3LCAweDI1YzcxMjM1KSwgWDY0V29yZF9jcmVhdGUoMHhjMTliZjE3NCwgMHhjZjY5MjY5NCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGU0OWI2OWMxLCAweDllZjE0YWQyKSwgWDY0V29yZF9jcmVhdGUoMHhlZmJlNDc4NiwgMHgzODRmMjVlMyksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDBmYzE5ZGM2LCAweDhiOGNkNWI1KSwgWDY0V29yZF9jcmVhdGUoMHgyNDBjYTFjYywgMHg3N2FjOWM2NSksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDJkZTkyYzZmLCAweDU5MmIwMjc1KSwgWDY0V29yZF9jcmVhdGUoMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDVjYjBhOWRjLCAweGJkNDFmYmQ0KSwgWDY0V29yZF9jcmVhdGUoMHg3NmY5ODhkYSwgMHg4MzExNTNiNSksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDk4M2U1MTUyLCAweGVlNjZkZmFiKSwgWDY0V29yZF9jcmVhdGUoMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGIwMDMyN2M4LCAweDk4ZmIyMTNmKSwgWDY0V29yZF9jcmVhdGUoMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGM2ZTAwYmYzLCAweDNkYTg4ZmMyKSwgWDY0V29yZF9jcmVhdGUoMHhkNWE3OTE0NywgMHg5MzBhYTcyNSksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDA2Y2E2MzUxLCAweGUwMDM4MjZmKSwgWDY0V29yZF9jcmVhdGUoMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDI3YjcwYTg1LCAweDQ2ZDIyZmZjKSwgWDY0V29yZF9jcmVhdGUoMHgyZTFiMjEzOCwgMHg1YzI2YzkyNiksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDRkMmM2ZGZjLCAweDVhYzQyYWVkKSwgWDY0V29yZF9jcmVhdGUoMHg1MzM4MGQxMywgMHg5ZDk1YjNkZiksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDY1MGE3MzU0LCAweDhiYWY2M2RlKSwgWDY0V29yZF9jcmVhdGUoMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDgxYzJjOTJlLCAweDQ3ZWRhZWU2KSwgWDY0V29yZF9jcmVhdGUoMHg5MjcyMmM4NSwgMHgxNDgyMzUzYiksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGEyYmZlOGExLCAweDRjZjEwMzY0KSwgWDY0V29yZF9jcmVhdGUoMHhhODFhNjY0YiwgMHhiYzQyMzAwMSksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGMyNGI4YjcwLCAweGQwZjg5NzkxKSwgWDY0V29yZF9jcmVhdGUoMHhjNzZjNTFhMywgMHgwNjU0YmUzMCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGQxOTJlODE5LCAweGQ2ZWY1MjE4KSwgWDY0V29yZF9jcmVhdGUoMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGY0MGUzNTg1LCAweDU3NzEyMDJhKSwgWDY0V29yZF9jcmVhdGUoMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDE5YTRjMTE2LCAweGI4ZDJkMGM4KSwgWDY0V29yZF9jcmVhdGUoMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDI3NDg3NzRjLCAweGRmOGVlYjk5KSwgWDY0V29yZF9jcmVhdGUoMHgzNGIwYmNiNSwgMHhlMTliNDhhOCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDM5MWMwY2IzLCAweGM1Yzk1YTYzKSwgWDY0V29yZF9jcmVhdGUoMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYiksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDViOWNjYTRmLCAweDc3NjNlMzczKSwgWDY0V29yZF9jcmVhdGUoMHg2ODJlNmZmMywgMHhkNmIyYjhhMyksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDc0OGY4MmVlLCAweDVkZWZiMmZjKSwgWDY0V29yZF9jcmVhdGUoMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDg0Yzg3ODE0LCAweGExZjBhYjcyKSwgWDY0V29yZF9jcmVhdGUoMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDkwYmVmZmZhLCAweDIzNjMxZTI4KSwgWDY0V29yZF9jcmVhdGUoMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGJlZjlhM2Y3LCAweGIyYzY3OTE1KSwgWDY0V29yZF9jcmVhdGUoMHhjNjcxNzhmMiwgMHhlMzcyNTMyYiksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGNhMjczZWNlLCAweGVhMjY2MTljKSwgWDY0V29yZF9jcmVhdGUoMHhkMTg2YjhjNywgMHgyMWMwYzIwNyksCiAgICBYNjRXb3JkX2NyZWF0ZSgweGVhZGE3ZGQ2LCAweGNkZTBlYjFlKSwgWDY0V29yZF9jcmVhdGUoMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDA2ZjA2N2FhLCAweDcyMTc2ZmJhKSwgWDY0V29yZF9jcmVhdGUoMHgwYTYzN2RjNSwgMHhhMmM4OThhNiksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDExM2Y5ODA0LCAweGJlZjkwZGFlKSwgWDY0V29yZF9jcmVhdGUoMHgxYjcxMGIzNSwgMHgxMzFjNDcxYiksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0KSwgWDY0V29yZF9jcmVhdGUoMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDNjOWViZTBhLCAweDE1YzliZWJjKSwgWDY0V29yZF9jcmVhdGUoMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDRjYzVkNGJlLCAweGNiM2U0MmI2KSwgWDY0V29yZF9jcmVhdGUoMHg1OTdmMjk5YywgMHhmYzY1N2UyYSksCiAgICBYNjRXb3JkX2NyZWF0ZSgweDVmY2I2ZmFiLCAweDNhZDZmYWVjKSwgWDY0V29yZF9jcmVhdGUoMHg2YzQ0MTk4YywgMHg0YTQ3NTgxNykKICBdOwoKICAvLyBSZXVzYWJsZSBvYmplY3RzCiAgdmFyIFcgPSBbXTsKICAoZnVuY3Rpb24gKCkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7CiAgICAgIFdbaV0gPSBYNjRXb3JkX2NyZWF0ZSgpOwogICAgfQogIH0oKSk7CgogIC8qKgogICAqIFNIQS01MTIgaGFzaCBhbGdvcml0aG0uCiAgICovCiAgdmFyIFNIQTUxMiA9IENfYWxnby5TSEE1MTIgPSBIYXNoZXIuZXh0ZW5kKHsKICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgIHRoaXMuX2hhc2ggPSBuZXcgWDY0V29yZEFycmF5LmluaXQoWwogICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHg2YTA5ZTY2NywgMHhmM2JjYzkwOCksIG5ldyBYNjRXb3JkLmluaXQoMHhiYjY3YWU4NSwgMHg4NGNhYTczYiksCiAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDNjNmVmMzcyLCAweGZlOTRmODJiKSwgbmV3IFg2NFdvcmQuaW5pdCgweGE1NGZmNTNhLCAweDVmMWQzNmYxKSwKICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEpLCBuZXcgWDY0V29yZC5pbml0KDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYpLAogICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHgxZjgzZDlhYiwgMHhmYjQxYmQ2YiksIG5ldyBYNjRXb3JkLmluaXQoMHg1YmUwY2QxOSwgMHgxMzdlMjE3OSkKICAgICAgXSk7CiAgICB9LAoKICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkgewogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzOwoKICAgICAgdmFyIEgwID0gSFswXTsKICAgICAgdmFyIEgxID0gSFsxXTsKICAgICAgdmFyIEgyID0gSFsyXTsKICAgICAgdmFyIEgzID0gSFszXTsKICAgICAgdmFyIEg0ID0gSFs0XTsKICAgICAgdmFyIEg1ID0gSFs1XTsKICAgICAgdmFyIEg2ID0gSFs2XTsKICAgICAgdmFyIEg3ID0gSFs3XTsKCiAgICAgIHZhciBIMGggPSBIMC5oaWdoOwogICAgICB2YXIgSDBsID0gSDAubG93OwogICAgICB2YXIgSDFoID0gSDEuaGlnaDsKICAgICAgdmFyIEgxbCA9IEgxLmxvdzsKICAgICAgdmFyIEgyaCA9IEgyLmhpZ2g7CiAgICAgIHZhciBIMmwgPSBIMi5sb3c7CiAgICAgIHZhciBIM2ggPSBIMy5oaWdoOwogICAgICB2YXIgSDNsID0gSDMubG93OwogICAgICB2YXIgSDRoID0gSDQuaGlnaDsKICAgICAgdmFyIEg0bCA9IEg0LmxvdzsKICAgICAgdmFyIEg1aCA9IEg1LmhpZ2g7CiAgICAgIHZhciBINWwgPSBINS5sb3c7CiAgICAgIHZhciBINmggPSBINi5oaWdoOwogICAgICB2YXIgSDZsID0gSDYubG93OwogICAgICB2YXIgSDdoID0gSDcuaGlnaDsKICAgICAgdmFyIEg3bCA9IEg3LmxvdzsKCiAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzCiAgICAgIHZhciBhaCA9IEgwaDsKICAgICAgdmFyIGFsID0gSDBsOwogICAgICB2YXIgYmggPSBIMWg7CiAgICAgIHZhciBibCA9IEgxbDsKICAgICAgdmFyIGNoID0gSDJoOwogICAgICB2YXIgY2wgPSBIMmw7CiAgICAgIHZhciBkaCA9IEgzaDsKICAgICAgdmFyIGRsID0gSDNsOwogICAgICB2YXIgZWggPSBINGg7CiAgICAgIHZhciBlbCA9IEg0bDsKICAgICAgdmFyIGZoID0gSDVoOwogICAgICB2YXIgZmwgPSBINWw7CiAgICAgIHZhciBnaCA9IEg2aDsKICAgICAgdmFyIGdsID0gSDZsOwogICAgICB2YXIgaGggPSBIN2g7CiAgICAgIHZhciBobCA9IEg3bDsKCiAgICAgIC8vIFJvdW5kcwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHsKICAgICAgICAvLyBTaG9ydGN1dAogICAgICAgIHZhciBXaSA9IFdbaV07CgogICAgICAgIC8vIEV4dGVuZCBtZXNzYWdlCiAgICAgICAgaWYgKGkgPCAxNikgewogICAgICAgICAgdmFyIFdpaCA9IFdpLmhpZ2ggPSBNW29mZnNldCArIGkgKiAyXSAgICAgfCAwOwogICAgICAgICAgdmFyIFdpbCA9IFdpLmxvdyAgPSBNW29mZnNldCArIGkgKiAyICsgMV0gfCAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBHYW1tYTAKICAgICAgICAgIHZhciBnYW1tYTB4ICA9IFdbaSAtIDE1XTsKICAgICAgICAgIHZhciBnYW1tYTB4aCA9IGdhbW1hMHguaGlnaDsKICAgICAgICAgIHZhciBnYW1tYTB4bCA9IGdhbW1hMHgubG93OwogICAgICAgICAgdmFyIGdhbW1hMGggID0gKChnYW1tYTB4aCA+Pj4gMSkgfCAoZ2FtbWEweGwgPDwgMzEpKSBeICgoZ2FtbWEweGggPj4+IDgpIHwgKGdhbW1hMHhsIDw8IDI0KSkgXiAoZ2FtbWEweGggPj4+IDcpOwogICAgICAgICAgdmFyIGdhbW1hMGwgID0gKChnYW1tYTB4bCA+Pj4gMSkgfCAoZ2FtbWEweGggPDwgMzEpKSBeICgoZ2FtbWEweGwgPj4+IDgpIHwgKGdhbW1hMHhoIDw8IDI0KSkgXiAoKGdhbW1hMHhsID4+PiA3KSB8IChnYW1tYTB4aCA8PCAyNSkpOwoKICAgICAgICAgIC8vIEdhbW1hMQogICAgICAgICAgdmFyIGdhbW1hMXggID0gV1tpIC0gMl07CiAgICAgICAgICB2YXIgZ2FtbWExeGggPSBnYW1tYTF4LmhpZ2g7CiAgICAgICAgICB2YXIgZ2FtbWExeGwgPSBnYW1tYTF4LmxvdzsKICAgICAgICAgIHZhciBnYW1tYTFoICA9ICgoZ2FtbWExeGggPj4+IDE5KSB8IChnYW1tYTF4bCA8PCAxMykpIF4gKChnYW1tYTF4aCA8PCAzKSB8IChnYW1tYTF4bCA+Pj4gMjkpKSBeIChnYW1tYTF4aCA+Pj4gNik7CiAgICAgICAgICB2YXIgZ2FtbWExbCAgPSAoKGdhbW1hMXhsID4+PiAxOSkgfCAoZ2FtbWExeGggPDwgMTMpKSBeICgoZ2FtbWExeGwgPDwgMykgfCAoZ2FtbWExeGggPj4+IDI5KSkgXiAoKGdhbW1hMXhsID4+PiA2KSB8IChnYW1tYTF4aCA8PCAyNikpOwoKICAgICAgICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XQogICAgICAgICAgdmFyIFdpNyAgPSBXW2kgLSA3XTsKICAgICAgICAgIHZhciBXaTdoID0gV2k3LmhpZ2g7CiAgICAgICAgICB2YXIgV2k3bCA9IFdpNy5sb3c7CgogICAgICAgICAgdmFyIFdpMTYgID0gV1tpIC0gMTZdOwogICAgICAgICAgdmFyIFdpMTZoID0gV2kxNi5oaWdoOwogICAgICAgICAgdmFyIFdpMTZsID0gV2kxNi5sb3c7CgogICAgICAgICAgdmFyIFdpbCA9IGdhbW1hMGwgKyBXaTdsOwogICAgICAgICAgdmFyIFdpaCA9IGdhbW1hMGggKyBXaTdoICsgKChXaWwgPj4+IDApIDwgKGdhbW1hMGwgPj4+IDApID8gMSA6IDApOwogICAgICAgICAgdmFyIFdpbCA9IFdpbCArIGdhbW1hMWw7CiAgICAgICAgICB2YXIgV2loID0gV2loICsgZ2FtbWExaCArICgoV2lsID4+PiAwKSA8IChnYW1tYTFsID4+PiAwKSA/IDEgOiAwKTsKICAgICAgICAgIHZhciBXaWwgPSBXaWwgKyBXaTE2bDsKICAgICAgICAgIHZhciBXaWggPSBXaWggKyBXaTE2aCArICgoV2lsID4+PiAwKSA8IChXaTE2bCA+Pj4gMCkgPyAxIDogMCk7CgogICAgICAgICAgV2kuaGlnaCA9IFdpaDsKICAgICAgICAgIFdpLmxvdyAgPSBXaWw7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2hoICA9IChlaCAmIGZoKSBeICh+ZWggJiBnaCk7CiAgICAgICAgdmFyIGNobCAgPSAoZWwgJiBmbCkgXiAofmVsICYgZ2wpOwogICAgICAgIHZhciBtYWpoID0gKGFoICYgYmgpIF4gKGFoICYgY2gpIF4gKGJoICYgY2gpOwogICAgICAgIHZhciBtYWpsID0gKGFsICYgYmwpIF4gKGFsICYgY2wpIF4gKGJsICYgY2wpOwoKICAgICAgICB2YXIgc2lnbWEwaCA9ICgoYWggPj4+IDI4KSB8IChhbCA8PCA0KSkgIF4gKChhaCA8PCAzMCkgIHwgKGFsID4+PiAyKSkgXiAoKGFoIDw8IDI1KSB8IChhbCA+Pj4gNykpOwogICAgICAgIHZhciBzaWdtYTBsID0gKChhbCA+Pj4gMjgpIHwgKGFoIDw8IDQpKSAgXiAoKGFsIDw8IDMwKSAgfCAoYWggPj4+IDIpKSBeICgoYWwgPDwgMjUpIHwgKGFoID4+PiA3KSk7CiAgICAgICAgdmFyIHNpZ21hMWggPSAoKGVoID4+PiAxNCkgfCAoZWwgPDwgMTgpKSBeICgoZWggPj4+IDE4KSB8IChlbCA8PCAxNCkpIF4gKChlaCA8PCAyMykgfCAoZWwgPj4+IDkpKTsKICAgICAgICB2YXIgc2lnbWExbCA9ICgoZWwgPj4+IDE0KSB8IChlaCA8PCAxOCkpIF4gKChlbCA+Pj4gMTgpIHwgKGVoIDw8IDE0KSkgXiAoKGVsIDw8IDIzKSB8IChlaCA+Pj4gOSkpOwoKICAgICAgICAvLyB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldCiAgICAgICAgdmFyIEtpICA9IEtbaV07CiAgICAgICAgdmFyIEtpaCA9IEtpLmhpZ2g7CiAgICAgICAgdmFyIEtpbCA9IEtpLmxvdzsKCiAgICAgICAgdmFyIHQxbCA9IGhsICsgc2lnbWExbDsKICAgICAgICB2YXIgdDFoID0gaGggKyBzaWdtYTFoICsgKCh0MWwgPj4+IDApIDwgKGhsID4+PiAwKSA/IDEgOiAwKTsKICAgICAgICB2YXIgdDFsID0gdDFsICsgY2hsOwogICAgICAgIHZhciB0MWggPSB0MWggKyBjaGggKyAoKHQxbCA+Pj4gMCkgPCAoY2hsID4+PiAwKSA/IDEgOiAwKTsKICAgICAgICB2YXIgdDFsID0gdDFsICsgS2lsOwogICAgICAgIHZhciB0MWggPSB0MWggKyBLaWggKyAoKHQxbCA+Pj4gMCkgPCAoS2lsID4+PiAwKSA/IDEgOiAwKTsKICAgICAgICB2YXIgdDFsID0gdDFsICsgV2lsOwogICAgICAgIHZhciB0MWggPSB0MWggKyBXaWggKyAoKHQxbCA+Pj4gMCkgPCAoV2lsID4+PiAwKSA/IDEgOiAwKTsKCiAgICAgICAgLy8gdDIgPSBzaWdtYTAgKyBtYWoKICAgICAgICB2YXIgdDJsID0gc2lnbWEwbCArIG1hamw7CiAgICAgICAgdmFyIHQyaCA9IHNpZ21hMGggKyBtYWpoICsgKCh0MmwgPj4+IDApIDwgKHNpZ21hMGwgPj4+IDApID8gMSA6IDApOwoKICAgICAgICAvLyBVcGRhdGUgd29ya2luZyB2YXJpYWJsZXMKICAgICAgICBoaCA9IGdoOwogICAgICAgIGhsID0gZ2w7CiAgICAgICAgZ2ggPSBmaDsKICAgICAgICBnbCA9IGZsOwogICAgICAgIGZoID0gZWg7CiAgICAgICAgZmwgPSBlbDsKICAgICAgICBlbCA9IChkbCArIHQxbCkgfCAwOwogICAgICAgIGVoID0gKGRoICsgdDFoICsgKChlbCA+Pj4gMCkgPCAoZGwgPj4+IDApID8gMSA6IDApKSB8IDA7CiAgICAgICAgZGggPSBjaDsKICAgICAgICBkbCA9IGNsOwogICAgICAgIGNoID0gYmg7CiAgICAgICAgY2wgPSBibDsKICAgICAgICBiaCA9IGFoOwogICAgICAgIGJsID0gYWw7CiAgICAgICAgYWwgPSAodDFsICsgdDJsKSB8IDA7CiAgICAgICAgYWggPSAodDFoICsgdDJoICsgKChhbCA+Pj4gMCkgPCAodDFsID4+PiAwKSA/IDEgOiAwKSkgfCAwOwogICAgICB9CgogICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZQogICAgICBIMGwgPSBIMC5sb3cgID0gKEgwbCArIGFsKTsKICAgICAgSDAuaGlnaCA9IChIMGggKyBhaCArICgoSDBsID4+PiAwKSA8IChhbCA+Pj4gMCkgPyAxIDogMCkpOwogICAgICBIMWwgPSBIMS5sb3cgID0gKEgxbCArIGJsKTsKICAgICAgSDEuaGlnaCA9IChIMWggKyBiaCArICgoSDFsID4+PiAwKSA8IChibCA+Pj4gMCkgPyAxIDogMCkpOwogICAgICBIMmwgPSBIMi5sb3cgID0gKEgybCArIGNsKTsKICAgICAgSDIuaGlnaCA9IChIMmggKyBjaCArICgoSDJsID4+PiAwKSA8IChjbCA+Pj4gMCkgPyAxIDogMCkpOwogICAgICBIM2wgPSBIMy5sb3cgID0gKEgzbCArIGRsKTsKICAgICAgSDMuaGlnaCA9IChIM2ggKyBkaCArICgoSDNsID4+PiAwKSA8IChkbCA+Pj4gMCkgPyAxIDogMCkpOwogICAgICBINGwgPSBINC5sb3cgID0gKEg0bCArIGVsKTsKICAgICAgSDQuaGlnaCA9IChINGggKyBlaCArICgoSDRsID4+PiAwKSA8IChlbCA+Pj4gMCkgPyAxIDogMCkpOwogICAgICBINWwgPSBINS5sb3cgID0gKEg1bCArIGZsKTsKICAgICAgSDUuaGlnaCA9IChINWggKyBmaCArICgoSDVsID4+PiAwKSA8IChmbCA+Pj4gMCkgPyAxIDogMCkpOwogICAgICBINmwgPSBINi5sb3cgID0gKEg2bCArIGdsKTsKICAgICAgSDYuaGlnaCA9IChINmggKyBnaCArICgoSDZsID4+PiAwKSA8IChnbCA+Pj4gMCkgPyAxIDogMCkpOwogICAgICBIN2wgPSBINy5sb3cgID0gKEg3bCArIGhsKTsKICAgICAgSDcuaGlnaCA9IChIN2ggKyBoaCArICgoSDdsID4+PiAwKSA8IChobCA+Pj4gMCkgPyAxIDogMCkpOwogICAgfSwKCiAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkgewogICAgICAvLyBTaG9ydGN1dHMKICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhOwogICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkczsKCiAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7CiAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODsKCiAgICAgIC8vIEFkZCBwYWRkaW5nCiAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpOwogICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzBdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApOwogICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzFdID0gbkJpdHNUb3RhbDsKICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0OwoKICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3MKICAgICAgdGhpcy5fcHJvY2VzcygpOwoKICAgICAgLy8gQ29udmVydCBoYXNoIHRvIDMyLWJpdCB3b3JkIGFycmF5IGJlZm9yZSByZXR1cm5pbmcKICAgICAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoLnRvWDMyKCk7CgogICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaAogICAgICByZXR1cm4gaGFzaDsKICAgIH0sCgogICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7CiAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpOwoKICAgICAgcmV0dXJuIGNsb25lOwogICAgfSwKCiAgICBibG9ja1NpemU6IDEwMjQvMzIKICB9KTsKCiAgLyoqCiAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuCiAgICoKICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgKgogICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guCiAgICoKICAgKiBAc3RhdGljCiAgICoKICAgKiBAZXhhbXBsZQogICAqCiAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBNTEyKCdtZXNzYWdlJyk7CiAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBNTEyKHdvcmRBcnJheSk7CiAgICovCiAgQy5TSEE1MTIgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEE1MTIpOwoKICAvKioKICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuCiAgICoKICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC4KICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS4KICAgKgogICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuCiAgICoKICAgKiBAc3RhdGljCiAgICoKICAgKiBAZXhhbXBsZQogICAqCiAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTUxMihtZXNzYWdlLCBrZXkpOwogICAqLwogIEMuSG1hY1NIQTUxMiA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihTSEE1MTIpOwp9KCkpOwovKgogQ3J5cHRvSlMgdjMuMS4yCiBzaGEzLmpzCiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMKIChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLgogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQogKi8KKGZ1bmN0aW9uIChNYXRoKSB7CiAgLy8gU2hvcnRjdXRzCiAgdmFyIEMgPSBDcnlwdG9KUzsKICB2YXIgQ19saWIgPSBDLmxpYjsKICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5OwogIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7CiAgdmFyIENfeDY0ID0gQy54NjQ7CiAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkOwogIHZhciBDX2FsZ28gPSBDLmFsZ287CgogIC8vIENvbnN0YW50cyB0YWJsZXMKICB2YXIgUkhPX09GRlNFVFMgPSBbXTsKICB2YXIgUElfSU5ERVhFUyAgPSBbXTsKICB2YXIgUk9VTkRfQ09OU1RBTlRTID0gW107CgogIC8vIENvbXB1dGUgQ29uc3RhbnRzCiAgKGZ1bmN0aW9uICgpIHsKICAgIC8vIENvbXB1dGUgcmhvIG9mZnNldCBjb25zdGFudHMKICAgIHZhciB4ID0gMSwgeSA9IDA7CiAgICBmb3IgKHZhciB0ID0gMDsgdCA8IDI0OyB0KyspIHsKICAgICAgUkhPX09GRlNFVFNbeCArIDUgKiB5XSA9ICgodCArIDEpICogKHQgKyAyKSAvIDIpICUgNjQ7CgogICAgICB2YXIgbmV3WCA9IHkgJSA1OwogICAgICB2YXIgbmV3WSA9ICgyICogeCArIDMgKiB5KSAlIDU7CiAgICAgIHggPSBuZXdYOwogICAgICB5ID0gbmV3WTsKICAgIH0KCiAgICAvLyBDb21wdXRlIHBpIGluZGV4IGNvbnN0YW50cwogICAgZm9yICh2YXIgeCA9IDA7IHggPCA1OyB4KyspIHsKICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHsKICAgICAgICBQSV9JTkRFWEVTW3ggKyA1ICogeV0gPSB5ICsgKCgyICogeCArIDMgKiB5KSAlIDUpICogNTsKICAgICAgfQogICAgfQoKICAgIC8vIENvbXB1dGUgcm91bmQgY29uc3RhbnRzCiAgICB2YXIgTEZTUiA9IDB4MDE7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHsKICAgICAgdmFyIHJvdW5kQ29uc3RhbnRNc3cgPSAwOwogICAgICB2YXIgcm91bmRDb25zdGFudExzdyA9IDA7CgogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDc7IGorKykgewogICAgICAgIGlmIChMRlNSICYgMHgwMSkgewogICAgICAgICAgdmFyIGJpdFBvc2l0aW9uID0gKDEgPDwgaikgLSAxOwogICAgICAgICAgaWYgKGJpdFBvc2l0aW9uIDwgMzIpIHsKICAgICAgICAgICAgcm91bmRDb25zdGFudExzdyBePSAxIDw8IGJpdFBvc2l0aW9uOwogICAgICAgICAgfSBlbHNlIC8qIGlmIChiaXRQb3NpdGlvbiA+PSAzMikgKi8gewogICAgICAgICAgICByb3VuZENvbnN0YW50TXN3IF49IDEgPDwgKGJpdFBvc2l0aW9uIC0gMzIpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gQ29tcHV0ZSBuZXh0IExGU1IKICAgICAgICBpZiAoTEZTUiAmIDB4ODApIHsKICAgICAgICAgIC8vIFByaW1pdGl2ZSBwb2x5bm9taWFsIG92ZXIgR0YoMik6IHheOCArIHheNiArIHheNSArIHheNCArIDEKICAgICAgICAgIExGU1IgPSAoTEZTUiA8PCAxKSBeIDB4NzE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIExGU1IgPDw9IDE7CiAgICAgICAgfQogICAgICB9CgogICAgICBST1VORF9DT05TVEFOVFNbaV0gPSBYNjRXb3JkLmNyZWF0ZShyb3VuZENvbnN0YW50TXN3LCByb3VuZENvbnN0YW50THN3KTsKICAgIH0KICB9KCkpOwoKICAvLyBSZXVzYWJsZSBvYmplY3RzIGZvciB0ZW1wb3JhcnkgdmFsdWVzCiAgdmFyIFQgPSBbXTsKICAoZnVuY3Rpb24gKCkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7CiAgICAgIFRbaV0gPSBYNjRXb3JkLmNyZWF0ZSgpOwogICAgfQogIH0oKSk7CgogIC8qKgogICAqIFNIQS0zIGhhc2ggYWxnb3JpdGhtLgogICAqLwogIHZhciBTSEEzID0gQ19hbGdvLlNIQTMgPSBIYXNoZXIuZXh0ZW5kKHsKICAgIC8qKgogICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLgogICAgICoKICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBvdXRwdXRMZW5ndGgKICAgICAqICAgVGhlIGRlc2lyZWQgbnVtYmVyIG9mIGJpdHMgaW4gdGhlIG91dHB1dCBoYXNoLgogICAgICogICBPbmx5IHZhbHVlcyBwZXJtaXR0ZWQgYXJlOiAyMjQsIDI1NiwgMzg0LCA1MTIuCiAgICAgKiAgIERlZmF1bHQ6IDUxMgogICAgICovCiAgICBjZmc6IEhhc2hlci5jZmcuZXh0ZW5kKHsKICAgICAgb3V0cHV0TGVuZ3RoOiA1MTIKICAgIH0pLAoKICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlID0gW10KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7CiAgICAgICAgc3RhdGVbaV0gPSBuZXcgWDY0V29yZC5pbml0KCk7CiAgICAgIH0KCiAgICAgIHRoaXMuYmxvY2tTaXplID0gKDE2MDAgLSAyICogdGhpcy5jZmcub3V0cHV0TGVuZ3RoKSAvIDMyOwogICAgfSwKCiAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHsKICAgICAgLy8gU2hvcnRjdXRzCiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlOwogICAgICB2YXIgbkJsb2NrU2l6ZUxhbmVzID0gdGhpcy5ibG9ja1NpemUgLyAyOwoKICAgICAgLy8gQWJzb3JiCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbkJsb2NrU2l6ZUxhbmVzOyBpKyspIHsKICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICB2YXIgTTJpICA9IE1bb2Zmc2V0ICsgMiAqIGldOwogICAgICAgIHZhciBNMmkxID0gTVtvZmZzZXQgKyAyICogaSArIDFdOwoKICAgICAgICAvLyBTd2FwIGVuZGlhbgogICAgICAgIE0yaSA9ICgKICAgICAgICAgICAgKCgoTTJpIDw8IDgpICB8IChNMmkgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8CiAgICAgICAgICAgICAgICAoKChNMmkgPDwgMjQpIHwgKE0yaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApCiAgICAgICAgICAgICk7CiAgICAgICAgTTJpMSA9ICgKICAgICAgICAgICAgKCgoTTJpMSA8PCA4KSAgfCAoTTJpMSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKICAgICAgICAgICAgICAgICgoKE0yaTEgPDwgMjQpIHwgKE0yaTEgPj4+IDgpKSAgJiAweGZmMDBmZjAwKQogICAgICAgICAgICApOwoKICAgICAgICAvLyBBYnNvcmIgbWVzc2FnZSBpbnRvIHN0YXRlCiAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtpXTsKICAgICAgICBsYW5lLmhpZ2ggXj0gTTJpMTsKICAgICAgICBsYW5lLmxvdyAgXj0gTTJpOwogICAgICB9CgogICAgICAvLyBSb3VuZHMKICAgICAgZm9yICh2YXIgcm91bmQgPSAwOyByb3VuZCA8IDI0OyByb3VuZCsrKSB7CiAgICAgICAgLy8gVGhldGEKICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykgewogICAgICAgICAgLy8gTWl4IGNvbHVtbiBsYW5lcwogICAgICAgICAgdmFyIHRNc3cgPSAwLCB0THN3ID0gMDsKICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7CiAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbeCArIDUgKiB5XTsKICAgICAgICAgICAgdE1zdyBePSBsYW5lLmhpZ2g7CiAgICAgICAgICAgIHRMc3cgXj0gbGFuZS5sb3c7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gVGVtcG9yYXJ5IHZhbHVlcwogICAgICAgICAgdmFyIFR4ID0gVFt4XTsKICAgICAgICAgIFR4LmhpZ2ggPSB0TXN3OwogICAgICAgICAgVHgubG93ICA9IHRMc3c7CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7CiAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAgIHZhciBUeDQgPSBUWyh4ICsgNCkgJSA1XTsKICAgICAgICAgIHZhciBUeDEgPSBUWyh4ICsgMSkgJSA1XTsKICAgICAgICAgIHZhciBUeDFNc3cgPSBUeDEuaGlnaDsKICAgICAgICAgIHZhciBUeDFMc3cgPSBUeDEubG93OwoKICAgICAgICAgIC8vIE1peCBzdXJyb3VuZGluZyBjb2x1bW5zCiAgICAgICAgICB2YXIgdE1zdyA9IFR4NC5oaWdoIF4gKChUeDFNc3cgPDwgMSkgfCAoVHgxTHN3ID4+PiAzMSkpOwogICAgICAgICAgdmFyIHRMc3cgPSBUeDQubG93ICBeICgoVHgxTHN3IDw8IDEpIHwgKFR4MU1zdyA+Pj4gMzEpKTsKICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7CiAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbeCArIDUgKiB5XTsKICAgICAgICAgICAgbGFuZS5oaWdoIF49IHRNc3c7CiAgICAgICAgICAgIGxhbmUubG93ICBePSB0THN3OwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gUmhvIFBpCiAgICAgICAgZm9yICh2YXIgbGFuZUluZGV4ID0gMTsgbGFuZUluZGV4IDwgMjU7IGxhbmVJbmRleCsrKSB7CiAgICAgICAgICAvLyBTaG9ydGN1dHMKICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbbGFuZUluZGV4XTsKICAgICAgICAgIHZhciBsYW5lTXN3ID0gbGFuZS5oaWdoOwogICAgICAgICAgdmFyIGxhbmVMc3cgPSBsYW5lLmxvdzsKICAgICAgICAgIHZhciByaG9PZmZzZXQgPSBSSE9fT0ZGU0VUU1tsYW5lSW5kZXhdOwoKICAgICAgICAgIC8vIFJvdGF0ZSBsYW5lcwogICAgICAgICAgaWYgKHJob09mZnNldCA8IDMyKSB7CiAgICAgICAgICAgIHZhciB0TXN3ID0gKGxhbmVNc3cgPDwgcmhvT2Zmc2V0KSB8IChsYW5lTHN3ID4+PiAoMzIgLSByaG9PZmZzZXQpKTsKICAgICAgICAgICAgdmFyIHRMc3cgPSAobGFuZUxzdyA8PCByaG9PZmZzZXQpIHwgKGxhbmVNc3cgPj4+ICgzMiAtIHJob09mZnNldCkpOwogICAgICAgICAgfSBlbHNlIC8qIGlmIChyaG9PZmZzZXQgPj0gMzIpICovIHsKICAgICAgICAgICAgdmFyIHRNc3cgPSAobGFuZUxzdyA8PCAocmhvT2Zmc2V0IC0gMzIpKSB8IChsYW5lTXN3ID4+PiAoNjQgLSByaG9PZmZzZXQpKTsKICAgICAgICAgICAgdmFyIHRMc3cgPSAobGFuZU1zdyA8PCAocmhvT2Zmc2V0IC0gMzIpKSB8IChsYW5lTHN3ID4+PiAoNjQgLSByaG9PZmZzZXQpKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBUcmFuc3Bvc2UgbGFuZXMKICAgICAgICAgIHZhciBUUGlMYW5lID0gVFtQSV9JTkRFWEVTW2xhbmVJbmRleF1dOwogICAgICAgICAgVFBpTGFuZS5oaWdoID0gdE1zdzsKICAgICAgICAgIFRQaUxhbmUubG93ICA9IHRMc3c7CiAgICAgICAgfQoKICAgICAgICAvLyBSaG8gcGkgYXQgeCA9IHkgPSAwCiAgICAgICAgdmFyIFQwID0gVFswXTsKICAgICAgICB2YXIgc3RhdGUwID0gc3RhdGVbMF07CiAgICAgICAgVDAuaGlnaCA9IHN0YXRlMC5oaWdoOwogICAgICAgIFQwLmxvdyAgPSBzdGF0ZTAubG93OwoKICAgICAgICAvLyBDaGkKICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykgewogICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHsKICAgICAgICAgICAgLy8gU2hvcnRjdXRzCiAgICAgICAgICAgIHZhciBsYW5lSW5kZXggPSB4ICsgNSAqIHk7CiAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbbGFuZUluZGV4XTsKICAgICAgICAgICAgdmFyIFRMYW5lID0gVFtsYW5lSW5kZXhdOwogICAgICAgICAgICB2YXIgVHgxTGFuZSA9IFRbKCh4ICsgMSkgJSA1KSArIDUgKiB5XTsKICAgICAgICAgICAgdmFyIFR4MkxhbmUgPSBUWygoeCArIDIpICUgNSkgKyA1ICogeV07CgogICAgICAgICAgICAvLyBNaXggcm93cwogICAgICAgICAgICBsYW5lLmhpZ2ggPSBUTGFuZS5oaWdoIF4gKH5UeDFMYW5lLmhpZ2ggJiBUeDJMYW5lLmhpZ2gpOwogICAgICAgICAgICBsYW5lLmxvdyAgPSBUTGFuZS5sb3cgIF4gKH5UeDFMYW5lLmxvdyAgJiBUeDJMYW5lLmxvdyk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBJb3RhCiAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVswXTsKICAgICAgICB2YXIgcm91bmRDb25zdGFudCA9IFJPVU5EX0NPTlNUQU5UU1tyb3VuZF07CiAgICAgICAgbGFuZS5oaWdoIF49IHJvdW5kQ29uc3RhbnQuaGlnaDsKICAgICAgICBsYW5lLmxvdyAgXj0gcm91bmRDb25zdGFudC5sb3c7OwogICAgICB9CiAgICB9LAoKICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIFNob3J0Y3V0cwogICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7CiAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzOwogICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4OwogICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7CiAgICAgIHZhciBibG9ja1NpemVCaXRzID0gdGhpcy5ibG9ja1NpemUgKiAzMjsKCiAgICAgIC8vIEFkZCBwYWRkaW5nCiAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4MSA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7CiAgICAgIGRhdGFXb3Jkc1soKE1hdGguY2VpbCgobkJpdHNMZWZ0ICsgMSkgLyBibG9ja1NpemVCaXRzKSAqIGJsb2NrU2l6ZUJpdHMpID4+PiA1KSAtIDFdIHw9IDB4ODA7CiAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDsKCiAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzCiAgICAgIHRoaXMuX3Byb2Nlc3MoKTsKCiAgICAgIC8vIFNob3J0Y3V0cwogICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZTsKICAgICAgdmFyIG91dHB1dExlbmd0aEJ5dGVzID0gdGhpcy5jZmcub3V0cHV0TGVuZ3RoIC8gODsKICAgICAgdmFyIG91dHB1dExlbmd0aExhbmVzID0gb3V0cHV0TGVuZ3RoQnl0ZXMgLyA4OwoKICAgICAgLy8gU3F1ZWV6ZQogICAgICB2YXIgaGFzaFdvcmRzID0gW107CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0cHV0TGVuZ3RoTGFuZXM7IGkrKykgewogICAgICAgIC8vIFNob3J0Y3V0cwogICAgICAgIHZhciBsYW5lID0gc3RhdGVbaV07CiAgICAgICAgdmFyIGxhbmVNc3cgPSBsYW5lLmhpZ2g7CiAgICAgICAgdmFyIGxhbmVMc3cgPSBsYW5lLmxvdzsKCiAgICAgICAgLy8gU3dhcCBlbmRpYW4KICAgICAgICBsYW5lTXN3ID0gKAogICAgICAgICAgICAoKChsYW5lTXN3IDw8IDgpICB8IChsYW5lTXN3ID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfAogICAgICAgICAgICAgICAgKCgobGFuZU1zdyA8PCAyNCkgfCAobGFuZU1zdyA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApCiAgICAgICAgICAgICk7CiAgICAgICAgbGFuZUxzdyA9ICgKICAgICAgICAgICAgKCgobGFuZUxzdyA8PCA4KSAgfCAobGFuZUxzdyA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwKICAgICAgICAgICAgICAgICgoKGxhbmVMc3cgPDwgMjQpIHwgKGxhbmVMc3cgPj4+IDgpKSAgJiAweGZmMDBmZjAwKQogICAgICAgICAgICApOwoKICAgICAgICAvLyBTcXVlZXplIHN0YXRlIHRvIHJldHJpZXZlIGhhc2gKICAgICAgICBoYXNoV29yZHMucHVzaChsYW5lTHN3KTsKICAgICAgICBoYXNoV29yZHMucHVzaChsYW5lTXN3KTsKICAgICAgfQoKICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2gKICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdChoYXNoV29yZHMsIG91dHB1dExlbmd0aEJ5dGVzKTsKICAgIH0sCgogICAgY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7CgogICAgICB2YXIgc3RhdGUgPSBjbG9uZS5fc3RhdGUgPSB0aGlzLl9zdGF0ZS5zbGljZSgwKTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7CiAgICAgICAgc3RhdGVbaV0gPSBzdGF0ZVtpXS5jbG9uZSgpOwogICAgICB9CgogICAgICByZXR1cm4gY2xvbmU7CiAgICB9CiAgfSk7CgogIC8qKgogICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLgogICAqCiAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guCiAgICoKICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLgogICAqCiAgICogQHN0YXRpYwogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTMoJ21lc3NhZ2UnKTsKICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzKHdvcmRBcnJheSk7CiAgICovCiAgQy5TSEEzID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMyk7CgogIC8qKgogICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS4KICAgKgogICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLgogICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LgogICAqCiAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy4KICAgKgogICAqIEBzdGF0aWMKICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMyhtZXNzYWdlLCBrZXkpOwogICAqLwogIEMuSG1hY1NIQTMgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMyk7Cn0oTWF0aCkpOwoKOyBicm93c2VyaWZ5X3NoaW1fX2RlZmluZV9fbW9kdWxlX19leHBvcnRfXyh0eXBlb2YgQ3J5cHRvSlMgIT0gInVuZGVmaW5lZCIgPyBDcnlwdG9KUyA6IHdpbmRvdy5DcnlwdG9KUyk7Cgp9KS5jYWxsKGdsb2JhbCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbiBkZWZpbmVFeHBvcnQoZXgpIHsgbW9kdWxlLmV4cG9ydHMgPSBleDsgfSk7Cgp9KS5jYWxsKHRoaXMsdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCn0se31dLDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKGdsb2JhbCl7CjtfX2Jyb3dzZXJpZnlfc2hpbV9yZXF1aXJlX189X2RlcmVxXzsoZnVuY3Rpb24gYnJvd3NlcmlmeVNoaW0obW9kdWxlLCBleHBvcnRzLCBfZGVyZXFfLCBkZWZpbmUsIGJyb3dzZXJpZnlfc2hpbV9fZGVmaW5lX19tb2R1bGVfX2V4cG9ydF9fKSB7Ci8qKgogKiBMYXduY2hhaXIhCiAqIC0tLQogKiBjbGllbnRzaWRlIGpzb24gc3RvcmUKICoKICovCnZhciBMYXduY2hhaXIgPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHsKICAvLyBlbnN1cmUgTGF3bmNoYWlyIHdhcyBjYWxsZWQgYXMgYSBjb25zdHJ1Y3RvcgogIGlmICghKHRoaXMgaW5zdGFuY2VvZiBMYXduY2hhaXIpKSByZXR1cm4gbmV3IExhd25jaGFpcihvcHRpb25zLCBjYWxsYmFjayk7CgogIC8vIGxhd25jaGFpciByZXF1aXJlcyBqc29uCiAgaWYgKCFKU09OKSB0aHJvdyAnSlNPTiB1bmF2YWlsYWJsZSEgSW5jbHVkZSBodHRwOi8vd3d3Lmpzb24ub3JnL2pzb24yLmpzIHRvIGZpeC4nCiAgLy8gb3B0aW9ucyBhcmUgb3B0aW9uYWw7IGNhbGxiYWNrIGlzIG5vdAogIGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDIgJiYgYXJndW1lbnRzLmxlbmd0aCA+IDApIHsKICAgIGNhbGxiYWNrID0gKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicpID8gYXJndW1lbnRzWzBdIDogYXJndW1lbnRzWzFdOwogICAgb3B0aW9ucyAgPSAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ2Z1bmN0aW9uJykgPyB7fSA6IGFyZ3VtZW50c1swXTsKICB9IGVsc2UgewogICAgdGhyb3cgJ0luY29ycmVjdCAjIG9mIGN0b3IgYXJncyEnCiAgfQogIC8vIFRPRE8gcGVyaGFwcyBhbGxvdyBmb3IgcHViL3N1YiBpbnN0ZWFkPwogIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHRocm93ICdObyBjYWxsYmFjayB3YXMgcHJvdmlkZWQnOwoKICAvLyBkZWZhdWx0IGNvbmZpZ3VyYXRpb24KICB0aGlzLnJlY29yZCA9IG9wdGlvbnMucmVjb3JkIHx8ICdyZWNvcmQnICAvLyBkZWZhdWx0IGZvciByZWNvcmRzCiAgdGhpcy5uYW1lICAgPSBvcHRpb25zLm5hbWUgICB8fCAncmVjb3JkcycgLy8gZGVmYXVsdCBuYW1lIGZvciB1bmRlcmx5aW5nIHN0b3JlCgogIC8vIG1peGluIGZpcnN0IHZhbGlkICBhZGFwdGVyCiAgdmFyIGFkYXB0ZXIKICAvLyBpZiB0aGUgYWRhcHRlciBpcyBwYXNzZWQgaW4gd2UgdHJ5IHRvIGxvYWQgdGhhdCBvbmx5CiAgaWYgKG9wdGlvbnMuYWRhcHRlcikgewoKICAgIC8vIHRoZSBhcmd1bWVudCBwYXNzZWQgc2hvdWxkIGJlIGFuIGFycmF5IG9mIHByZWZlcmVkIGFkYXB0ZXJzCiAgICAvLyBpZiBpdCBpcyBub3QsIHdlIGNvbnZlcnQgaXQKICAgIGlmKHR5cGVvZihvcHRpb25zLmFkYXB0ZXIpID09PSAnc3RyaW5nJyl7CiAgICAgIG9wdGlvbnMuYWRhcHRlciA9IFtvcHRpb25zLmFkYXB0ZXJdOwogICAgfQoKICAgIC8vIGl0ZXJhdGVzIG92ZXIgdGhlIGFycmF5IG9mIHBhc3NlZCBhZGFwdGVycwogICAgZm9yKHZhciBqID0gMCwgayA9IG9wdGlvbnMuYWRhcHRlci5sZW5ndGg7IGogPCBrOyBqKyspewoKICAgICAgLy8gaXRpcmF0ZXMgb3ZlciB0aGUgYXJyYXkgb2YgYXZhaWxhYmxlIGFkYXB0ZXJzCiAgICAgIGZvciAodmFyIGkgPSBMYXduY2hhaXIuYWRhcHRlcnMubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgaWYgKExhd25jaGFpci5hZGFwdGVyc1tpXS5hZGFwdGVyID09PSBvcHRpb25zLmFkYXB0ZXJbal0pIHsKICAgICAgICAgIGFkYXB0ZXIgPSBMYXduY2hhaXIuYWRhcHRlcnNbaV0udmFsaWQoKSA/IExhd25jaGFpci5hZGFwdGVyc1tpXSA6IHVuZGVmaW5lZDsKICAgICAgICAgIGlmIChhZGFwdGVyKSBicmVhawogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoYWRhcHRlcikgYnJlYWsKICAgIH0KCiAgICAvLyBvdGhlcndpc2UgZmluZCB0aGUgZmlyc3QgdmFsaWQgYWRhcHRlciBmb3IgdGhpcyBlbnYKICB9CiAgZWxzZSB7CiAgICBmb3IgKHZhciBpID0gMCwgbCA9IExhd25jaGFpci5hZGFwdGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgYWRhcHRlciA9IExhd25jaGFpci5hZGFwdGVyc1tpXS52YWxpZCgpID8gTGF3bmNoYWlyLmFkYXB0ZXJzW2ldIDogdW5kZWZpbmVkCiAgICAgIGlmIChhZGFwdGVyKSBicmVhawogICAgfQogIH0KCiAgLy8gd2UgaGF2ZSBmYWlsZWQKICBpZiAoIWFkYXB0ZXIpIHRocm93ICdObyB2YWxpZCBhZGFwdGVyLicKCiAgLy8geWF5ISBtaXhpbiB0aGUgYWRhcHRlcgogIGZvciAodmFyIGogaW4gYWRhcHRlcikKICAgIHRoaXNbal0gPSBhZGFwdGVyW2pdCgogIC8vIGNhbGwgaW5pdCBmb3IgZWFjaCBtaXhlZCBpbiBwbHVnaW4KICBmb3IgKHZhciBpID0gMCwgbCA9IExhd25jaGFpci5wbHVnaW5zLmxlbmd0aDsgaSA8IGw7IGkrKykKICAgIExhd25jaGFpci5wbHVnaW5zW2ldLmNhbGwodGhpcykKCiAgLy8gaW5pdCB0aGUgYWRhcHRlcgogIHRoaXMuaW5pdChvcHRpb25zLCBjYWxsYmFjaykKfQoKTGF3bmNoYWlyLmFkYXB0ZXJzID0gW10KCi8qKgogKiBxdWV1ZXMgYW4gYWRhcHRlciBmb3IgbWl4aW4KICogPT09CiAqIC0gZW5zdXJlcyBhbiBhZGFwdGVyIGNvbmZvcm1zIHRvIGEgc3BlY2lmaWMgaW50ZXJmYWNlCiAqCiAqLwpMYXduY2hhaXIuYWRhcHRlciA9IGZ1bmN0aW9uIChpZCwgb2JqKSB7CiAgLy8gYWRkIHRoZSBhZGFwdGVyIGlkIHRvIHRoZSBhZGFwdGVyIG9iagogIC8vIHVnbHkgaGVyZSBmb3IgYSAgY2xlYW5lciBkc2wgZm9yIGltcGxlbWVudGluZyBhZGFwdGVycwogIG9ialsnYWRhcHRlciddID0gaWQKICAvLyBtZXRob2RzIHJlcXVpcmVkIHRvIGltcGxlbWVudCBhIGxhd25jaGFpciBhZGFwdGVyCiAgdmFyIGltcGxlbWVudGluZyA9ICdhZGFwdGVyIHZhbGlkIGluaXQga2V5cyBzYXZlIGJhdGNoIGdldCBleGlzdHMgYWxsIHJlbW92ZSBudWtlJy5zcGxpdCgnICcpCiAgICAsICAgaW5kZXhPZiA9IHRoaXMucHJvdG90eXBlLmluZGV4T2YKICAvLyBtaXggaW4gdGhlIGFkYXB0ZXIKICBmb3IgKHZhciBpIGluIG9iaikgewogICAgaWYgKGluZGV4T2YoaW1wbGVtZW50aW5nLCBpKSA9PT0gLTEpIHRocm93ICdJbnZhbGlkIGFkYXB0ZXIhIE5vbnN0YW5kYXJkIG1ldGhvZDogJyArIGkKICB9CiAgLy8gaWYgd2UgbWFkZSBpdCB0aGlzIGZhciB0aGUgYWRhcHRlciBpbnRlcmZhY2UgaXMgdmFsaWQKICAvLyBpbnNlcnQgdGhlIG5ldyBhZGFwdGVyIGFzIHRoZSBwcmVmZXJyZWQgYWRhcHRlcgogIExhd25jaGFpci5hZGFwdGVycy5zcGxpY2UoMCwwLG9iaikKfQoKTGF3bmNoYWlyLnBsdWdpbnMgPSBbXQoKLyoqCiAqIGdlbmVyaWMgc2hhbGxvdyBleHRlbnNpb24gZm9yIHBsdWdpbnMKICogPT09CiAqIC0gaWYgYW4gaW5pdCBtZXRob2QgaXMgZm91bmQgaXQgcmVnaXN0ZXJzIGl0IHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBsYXduY2hhaXIgaXMgaW5pdGVkCiAqIC0geWVzIHdlIGNvdWxkIHVzZSBoYXNPd25Qcm9wIGJ1dCBub2JvZHkgaGVyZSBpcyBhbiBhc3Nob2xlCiAqLwpMYXduY2hhaXIucGx1Z2luID0gZnVuY3Rpb24gKG9iaikgewogIGZvciAodmFyIGkgaW4gb2JqKQogICAgaSA9PT0gJ2luaXQnID8gTGF3bmNoYWlyLnBsdWdpbnMucHVzaChvYmpbaV0pIDogdGhpcy5wcm90b3R5cGVbaV0gPSBvYmpbaV0KfQoKLyoqCiAqIGhlbHBlcnMKICoKICovCkxhd25jaGFpci5wcm90b3R5cGUgPSB7CgogIGlzQXJyYXk6IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24obykgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSAnW29iamVjdCBBcnJheV0nIH0sCgogIC8qKgogICAqIHRoaXMgY29kZSBleGlzdHMgZm9yIGllOC4uLiBmb3IgbW9yZSBiYWNrZ3JvdW5kIHNlZToKICAgKiBodHRwOi8vd3d3LmZsaWNrci5jb20vcGhvdG9zL3dlc3Rjb2FzdGxvZ2ljLzU5NTUzNjU3NDIvaW4vcGhvdG9zdHJlYW0KICAgKi8KICBpbmRleE9mOiBmdW5jdGlvbihhcnksIGl0ZW0sIGksIGwpIHsKICAgIGlmIChhcnkuaW5kZXhPZikgcmV0dXJuIGFyeS5pbmRleE9mKGl0ZW0pCiAgICBmb3IgKGkgPSAwLCBsID0gYXJ5Lmxlbmd0aDsgaSA8IGw7IGkrKykgaWYgKGFyeVtpXSA9PT0gaXRlbSkgcmV0dXJuIGkKICAgIHJldHVybiAtMQogIH0sCgogIC8vIGF3ZXNvbWUgc2hvcnRoYW5kIGNhbGxiYWNrcyBhcyBzdHJpbmdzLiB0aGlzIGlzIHNoYW1lbGVzcyB0aGVmdCBmcm9tIGRvam8uCiAgbGFtYmRhOiBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgIHJldHVybiB0aGlzLmZuKHRoaXMucmVjb3JkLCBjYWxsYmFjaykKICB9LAoKICAvLyBmaXJzdCBzdGFiIGF0IG5hbWVkIHBhcmFtZXRlcnMgZm9yIHRlcnNlIGNhbGxiYWNrczsgZG9qbzogZmlyc3QgIT0gYmVzdCAvLyA7RAogIGZuOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHsKICAgIHJldHVybiB0eXBlb2YgY2FsbGJhY2sgPT0gJ3N0cmluZycgPyBuZXcgRnVuY3Rpb24obmFtZSwgY2FsbGJhY2spIDogY2FsbGJhY2sKICB9LAoKICAvLyByZXR1cm5zIGEgdW5pcXVlIGlkZW50aWZpZXIgKGJ5IHdheSBvZiBCYWNrYm9uZS5sb2NhbFN0b3JhZ2UuanMpCiAgLy8gVE9ETyBpbnZlc3RpZ2F0ZSBzbWFsbGVyIFVVSURzIHRvIGN1dCBvbiBzdG9yYWdlIGNvc3QKICB1dWlkOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgUzQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAoKCgxK01hdGgucmFuZG9tKCkpKjB4MTAwMDApfDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7CiAgICB9CiAgICByZXR1cm4gKFM0KCkrUzQoKSsiLSIrUzQoKSsiLSIrUzQoKSsiLSIrUzQoKSsiLSIrUzQoKStTNCgpK1M0KCkpOwogIH0sCgogIC8vIGEgY2xhc3NpYyBpdGVyYXRvcgogIGVhY2g6IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgdmFyIGNiID0gdGhpcy5sYW1iZGEoY2FsbGJhY2spCiAgICAvLyBpdGVyYXRlIGZyb20gY2hhaW4KICAgIGlmICh0aGlzLl9fcmVzdWx0cykgewogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX19yZXN1bHRzLmxlbmd0aDsgaSA8IGw7IGkrKykgY2IuY2FsbCh0aGlzLCB0aGlzLl9fcmVzdWx0c1tpXSwgaSkKICAgIH0KICAgIC8vIG90aGVyd2lzZSBpdGVyYXRlIHRoZSBlbnRpcmUgY29sbGVjdGlvbgogICAgZWxzZSB7CiAgICAgIHRoaXMuYWxsKGZ1bmN0aW9uKHIpIHsKICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHIubGVuZ3RoOyBpIDwgbDsgaSsrKSBjYi5jYWxsKHRoaXMsIHJbaV0sIGkpCiAgICAgIH0pCiAgICB9CiAgICByZXR1cm4gdGhpcwogIH0KLy8gLS0KfTsKLy8gd2luZG93Lm5hbWUgY29kZSBjb3VydGVzeSBSZW15IFNoYXJwOiBodHRwOi8vMjR3YXlzLm9yZy8yMDA5L2JyZWFraW5nLW91dC10aGUtZWRnZXMtb2YtdGhlLWJyb3dzZXIKTGF3bmNoYWlyLmFkYXB0ZXIoJ3dpbmRvdy1uYW1lJywgKGZ1bmN0aW9uKCkgewogIGlmICh0eXBlb2Ygd2luZG93PT09J3VuZGVmaW5lZCcpIHsKICAgIHdpbmRvdyA9IHsgdG9wOiB7IH0gfTsgLy8gbm9kZS9vcHRpbWl6ZXIgY29tcGF0aWJpbGl0eQogIH0KCiAgLy8gZWRpdGVkIGZyb20gdGhlIG9yaWdpbmFsIGhlcmUgYnkgZWxzaWdoCiAgLy8gU29tZSBzaXRlcyBzdG9yZSBKU09OIGRhdGEgaW4gd2luZG93LnRvcC5uYW1lLCBidXQgc29tZSBmb2xrcyAodHdpdHRlciBvbiBpUGFkKQogIC8vIHB1dCBzaW1wbGUgc3RyaW5ncyBpbiB0aGVyZSAtIHdlIHNob3VsZCBtYWtlIHN1cmUgbm90IHRvIGNhdXNlIGEgU3ludGF4RXJyb3IuCiAgdmFyIGRhdGEgPSB7fQogIHRyeSB7CiAgICBkYXRhID0gSlNPTi5wYXJzZSh3aW5kb3cudG9wLm5hbWUpCiAgfSBjYXRjaCAoZSkge30KCgogIHJldHVybiB7CgogICAgdmFsaWQ6IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cudG9wLm5hbWUgIT0gJ3VuZGVmaW5lZCcKICAgIH0sCgogICAgaW5pdDogZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7CiAgICAgIGRhdGFbdGhpcy5uYW1lXSA9IGRhdGFbdGhpcy5uYW1lXSB8fCB7aW5kZXg6W10sc3RvcmU6e319CiAgICAgIHRoaXMuaW5kZXggPSBkYXRhW3RoaXMubmFtZV0uaW5kZXgKICAgICAgdGhpcy5zdG9yZSA9IGRhdGFbdGhpcy5uYW1lXS5zdG9yZQogICAgICB0aGlzLmZuKHRoaXMubmFtZSwgY2FsbGJhY2spLmNhbGwodGhpcywgdGhpcykKICAgICAgcmV0dXJuIHRoaXMKICAgIH0sCgogICAga2V5czogZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgIHRoaXMuZm4oJ2tleXMnLCBjYWxsYmFjaykuY2FsbCh0aGlzLCB0aGlzLmluZGV4KQogICAgICByZXR1cm4gdGhpcwogICAgfSwKCiAgICBzYXZlOiBmdW5jdGlvbiAob2JqLCBjYikgewogICAgICAvLyBkYXRhW2tleV0gPSB2YWx1ZSArICcnOyAvLyBmb3JjZSB0byBzdHJpbmcKICAgICAgLy8gd2luZG93LnRvcC5uYW1lID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CiAgICAgIHZhciBrZXkgPSBvYmoua2V5IHx8IHRoaXMudXVpZCgpCiAgICAgIHRoaXMuZXhpc3RzKGtleSwgZnVuY3Rpb24oZXhpc3RzKSB7CiAgICAgICAgaWYgKCFleGlzdHMpIHsKICAgICAgICAgIGlmIChvYmoua2V5KSBkZWxldGUgb2JqLmtleQogICAgICAgICAgdGhpcy5pbmRleC5wdXNoKGtleSkKICAgICAgICB9CiAgICAgICAgdGhpcy5zdG9yZVtrZXldID0gb2JqCgogICAgICAgIHRyeSB7CiAgICAgICAgICB3aW5kb3cudG9wLm5hbWUgPSBKU09OLnN0cmluZ2lmeShkYXRhKSAvLyBUT0RPIHdvdywgdGhpcyBpcyB0aGUgb25seSBkaWZmIGZyb20gdGhlIG1lbW9yeSBhZGFwdGVyCiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAvLyByZXN0b3JlIGluZGV4L3N0b3JlIHRvIHByZXZpb3VzIHZhbHVlIGJlZm9yZSBKU09OIGV4Y2VwdGlvbgogICAgICAgICAgaWYgKCFleGlzdHMpIHsKICAgICAgICAgICAgdGhpcy5pbmRleC5wb3AoKTsKICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3RvcmVba2V5XTsKICAgICAgICAgIH0KICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQoKICAgICAgICBpZiAoY2IpIHsKICAgICAgICAgIG9iai5rZXkgPSBrZXkKICAgICAgICAgIHRoaXMubGFtYmRhKGNiKS5jYWxsKHRoaXMsIG9iaikKICAgICAgICB9CiAgICAgIH0pCiAgICAgIHJldHVybiB0aGlzCiAgICB9LAoKICAgIGJhdGNoOiBmdW5jdGlvbiAob2JqcywgY2IpIHsKICAgICAgdmFyIHIgPSBbXQogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9ianMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgdGhpcy5zYXZlKG9ianNbaV0sIGZ1bmN0aW9uKHJlY29yZCkgewogICAgICAgICAgci5wdXNoKHJlY29yZCkKICAgICAgICB9KQogICAgICB9CiAgICAgIGlmIChjYikgdGhpcy5sYW1iZGEoY2IpLmNhbGwodGhpcywgcikKICAgICAgcmV0dXJuIHRoaXMKICAgIH0sCgogICAgZ2V0OiBmdW5jdGlvbiAoa2V5T3JBcnJheSwgY2IpIHsKICAgICAgdmFyIHI7CiAgICAgIGlmICh0aGlzLmlzQXJyYXkoa2V5T3JBcnJheSkpIHsKICAgICAgICByID0gW10KICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGtleU9yQXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICByLnB1c2godGhpcy5zdG9yZVtrZXlPckFycmF5W2ldXSkKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgciA9IHRoaXMuc3RvcmVba2V5T3JBcnJheV0KICAgICAgICBpZiAocikgci5rZXkgPSBrZXlPckFycmF5CiAgICAgIH0KICAgICAgaWYgKGNiKSB0aGlzLmxhbWJkYShjYikuY2FsbCh0aGlzLCByKQogICAgICByZXR1cm4gdGhpcwogICAgfSwKCiAgICBleGlzdHM6IGZ1bmN0aW9uIChrZXksIGNiKSB7CiAgICAgIHRoaXMubGFtYmRhKGNiKS5jYWxsKHRoaXMsICEhKHRoaXMuc3RvcmVba2V5XSkpCiAgICAgIHJldHVybiB0aGlzCiAgICB9LAoKICAgIGFsbDogZnVuY3Rpb24gKGNiKSB7CiAgICAgIHZhciByID0gW10KICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmluZGV4Lmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIHZhciBvYmogPSB0aGlzLnN0b3JlW3RoaXMuaW5kZXhbaV1dCiAgICAgICAgb2JqLmtleSA9IHRoaXMuaW5kZXhbaV0KICAgICAgICByLnB1c2gob2JqKQogICAgICB9CiAgICAgIHRoaXMuZm4odGhpcy5uYW1lLCBjYikuY2FsbCh0aGlzLCByKQogICAgICByZXR1cm4gdGhpcwogICAgfSwKCiAgICByZW1vdmU6IGZ1bmN0aW9uIChrZXlPckFycmF5LCBjYikgewogICAgICB2YXIgZGVsID0gdGhpcy5pc0FycmF5KGtleU9yQXJyYXkpID8ga2V5T3JBcnJheSA6IFtrZXlPckFycmF5XQogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRlbC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICB2YXIga2V5ID0gZGVsW2ldLmtleSA/IGRlbFtpXS5rZXkgOiBkZWxbaV0KICAgICAgICB2YXIgd2hlcmUgPSB0aGlzLmluZGV4T2YodGhpcy5pbmRleCwga2V5KQogICAgICAgIGlmICh3aGVyZSA8IDApIGNvbnRpbnVlIC8qIGtleSBub3QgcHJlc2VudCAqLwogICAgICAgIGRlbGV0ZSB0aGlzLnN0b3JlW2tleV0KICAgICAgICB0aGlzLmluZGV4LnNwbGljZSh3aGVyZSwgMSkKICAgICAgfQogICAgICB3aW5kb3cudG9wLm5hbWUgPSBKU09OLnN0cmluZ2lmeShkYXRhKQogICAgICBpZiAoY2IpIHRoaXMubGFtYmRhKGNiKS5jYWxsKHRoaXMpCiAgICAgIHJldHVybiB0aGlzCiAgICB9LAoKICAgIG51a2U6IGZ1bmN0aW9uIChjYikgewogICAgICB0aGlzLnN0b3JlID0gZGF0YVt0aGlzLm5hbWVdLnN0b3JlID0ge30KICAgICAgdGhpcy5pbmRleCA9IGRhdGFbdGhpcy5uYW1lXS5pbmRleCA9IFtdCiAgICAgIHdpbmRvdy50b3AubmFtZSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpCiAgICAgIGlmIChjYikgdGhpcy5sYW1iZGEoY2IpLmNhbGwodGhpcykKICAgICAgcmV0dXJuIHRoaXMKICAgIH0KICB9Ci8vLy8vCn0pKCkpCi8qKgogKiBkb20gc3RvcmFnZSBhZGFwdGVyCiAqID09PQogKiAtIG9yaWdpbmFsbHkgYXV0aG9yZWQgYnkgSm9zZXBoIFBlY29yYXJvCiAqCiAqLwovLwovLyBUT0RPIGRvZXMgaXQgbWFrZSBzZW5zZSB0byBiZSBjaGFpbmFibGUgYWxsIG92ZXIgdGhlIHBsYWNlPwovLyBjaGFpbmFibGU6IG51a2UsIHJlbW92ZSwgYWxsLCBnZXQsIHNhdmUsIGFsbCAgICAKLy8gbm90IGNoYWluYWJsZTogdmFsaWQsIGtleXMKLy8KTGF3bmNoYWlyLmFkYXB0ZXIoJ2RvbScsIChmdW5jdGlvbigpIHsKICB2YXIgc3RvcmFnZSA9IG51bGw7CiAgdHJ5ewogICAgc3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7CiAgfWNhdGNoKGUpewoKICB9CiAgLy8gdGhlIGluZGV4ZXIgaXMgYW4gZW5jYXBzdWxhdGlvbiBvZiB0aGUgaGVscGVycyBuZWVkZWQgdG8ga2VlcCBhbiBvcmRlcmVkIGluZGV4IG9mIHRoZSBrZXlzCiAgdmFyIGluZGV4ZXIgPSBmdW5jdGlvbihuYW1lKSB7CiAgICByZXR1cm4gewogICAgICAvLyB0aGUga2V5CiAgICAgIGtleTogbmFtZSArICcuX2luZGV4XycsCiAgICAgIC8vIHJldHVybnMgdGhlIGluZGV4CiAgICAgIGFsbDogZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGEgID0gc3RvcmFnZS5nZXRJdGVtKHRoaXMua2V5KQogICAgICAgIGlmIChhKSB7CiAgICAgICAgICBhID0gSlNPTi5wYXJzZShhKQogICAgICAgIH0KICAgICAgICBpZiAoYSA9PT0gbnVsbCkgc3RvcmFnZS5zZXRJdGVtKHRoaXMua2V5LCBKU09OLnN0cmluZ2lmeShbXSkpIC8vIGxhenkgaW5pdAogICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmtleSkpCiAgICAgIH0sCiAgICAgIC8vIGFkZHMgYSBrZXkgdG8gdGhlIGluZGV4CiAgICAgIGFkZDogZnVuY3Rpb24gKGtleSkgewogICAgICAgIHZhciBhID0gdGhpcy5hbGwoKQogICAgICAgIGEucHVzaChrZXkpCiAgICAgICAgc3RvcmFnZS5zZXRJdGVtKHRoaXMua2V5LCBKU09OLnN0cmluZ2lmeShhKSkKICAgICAgfSwKICAgICAgLy8gZGVsZXRlcyBhIGtleSBmcm9tIHRoZSBpbmRleAogICAgICBkZWw6IGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICB2YXIgYSA9IHRoaXMuYWxsKCksIHIgPSBbXQogICAgICAgIC8vIEZJWE1FIHRoaXMgaXMgY3JhenkgaW5lZmZpY2llbnQgYnV0IEknbSBpbiBhIHN0cmF0YSBtZWV0aW5nIGFuZCBoYWxmIGNvbmNlbnRyYXRpbmcKICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICBpZiAoYVtpXSAhPSBrZXkpIHIucHVzaChhW2ldKQogICAgICAgIH0KICAgICAgICBzdG9yYWdlLnNldEl0ZW0odGhpcy5rZXksIEpTT04uc3RyaW5naWZ5KHIpKQogICAgICB9LAogICAgICAvLyByZXR1cm5zIGluZGV4IGZvciBhIGtleQogICAgICBmaW5kOiBmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgdmFyIGEgPSB0aGlzLmFsbCgpCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgaWYgKGtleSA9PT0gYVtpXSkgcmV0dXJuIGkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgIH0KICAgIH0KICB9CgogIC8vIGFkYXB0ZXIgYXBpCiAgcmV0dXJuIHsKCiAgICAvLyBlbnN1cmUgd2UgYXJlIGluIGFuIGVudiB3aXRoIGxvY2FsU3RvcmFnZQogICAgdmFsaWQ6IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICEhc3RvcmFnZSAmJiBmdW5jdGlvbigpIHsKICAgICAgICAvLyBpbiBtb2JpbGUgc2FmYXJpIGlmIHNhZmUgYnJvd3NpbmcgaXMgZW5hYmxlZCwgd2luZG93LnN0b3JhZ2UKICAgICAgICAvLyBpcyBkZWZpbmVkIGJ1dCBzZXRJdGVtIGNhbGxzIHRocm93IGV4Y2VwdGlvbnMuCiAgICAgICAgdmFyIHN1Y2Nlc3MgPSB0cnVlCiAgICAgICAgdmFyIHZhbHVlID0gTWF0aC5yYW5kb20oKQogICAgICAgIHRyeSB7CiAgICAgICAgICBzdG9yYWdlLnNldEl0ZW0odmFsdWUsIHZhbHVlKQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHN1Y2Nlc3MgPSBmYWxzZQogICAgICAgIH0KICAgICAgICBzdG9yYWdlLnJlbW92ZUl0ZW0odmFsdWUpCiAgICAgICAgcmV0dXJuIHN1Y2Nlc3MKICAgICAgfSgpCiAgICB9LAoKICAgIGluaXQ6IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykgewogICAgICB0aGlzLmluZGV4ZXIgPSBpbmRleGVyKHRoaXMubmFtZSkKICAgICAgaWYgKGNhbGxiYWNrKSB0aGlzLmZuKHRoaXMubmFtZSwgY2FsbGJhY2spLmNhbGwodGhpcywgdGhpcykKICAgIH0sCgogICAgc2F2ZTogZnVuY3Rpb24gKG9iaiwgY2FsbGJhY2spIHsKICAgICAgdmFyIGtleSA9IG9iai5rZXkgPyB0aGlzLm5hbWUgKyAnLicgKyBvYmoua2V5IDogdGhpcy5uYW1lICsgJy4nICsgdGhpcy51dWlkKCkKICAgICAgLy8gbm93IHdlIGtpbCB0aGUga2V5IGFuZCB1c2UgaXQgaW4gdGhlIHN0b3JlIGNvbGxlY2l0b24KICAgICAgZGVsZXRlIG9iai5rZXk7CiAgICAgIHN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KG9iaikpCiAgICAgIC8vIGlmIHRoZSBrZXkgaXMgbm90IGluIHRoZSBpbmRleCBwdXNoIGl0IG9uCiAgICAgIGlmICh0aGlzLmluZGV4ZXIuZmluZChrZXkpID09PSBmYWxzZSkgdGhpcy5pbmRleGVyLmFkZChrZXkpCiAgICAgIG9iai5rZXkgPSBrZXkuc2xpY2UodGhpcy5uYW1lLmxlbmd0aCArIDEpCiAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgIHRoaXMubGFtYmRhKGNhbGxiYWNrKS5jYWxsKHRoaXMsIG9iaikKICAgICAgfQogICAgICByZXR1cm4gdGhpcwogICAgfSwKCiAgICBiYXRjaDogZnVuY3Rpb24gKGFyeSwgY2FsbGJhY2spIHsKICAgICAgdmFyIHNhdmVkID0gW10KICAgICAgLy8gbm90IHBhcnRpY3VsYXJpbHkgZWZmaWNpZW50IGJ1dCB0aGlzIGlzIG1vcmUgZm9yIHNxbGl0ZSBzaXR1YXRpb25zCiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJ5Lmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIHRoaXMuc2F2ZShhcnlbaV0sIGZ1bmN0aW9uKHIpewogICAgICAgICAgc2F2ZWQucHVzaChyKQogICAgICAgIH0pCiAgICAgIH0KICAgICAgaWYgKGNhbGxiYWNrKSB0aGlzLmxhbWJkYShjYWxsYmFjaykuY2FsbCh0aGlzLCBzYXZlZCkKICAgICAgcmV0dXJuIHRoaXMKICAgIH0sCgogICAgLy8gYWNjZXB0cyBbb3B0aW9uc10sIGNhbGxiYWNrCiAgICBrZXlzOiBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICB2YXIgbmFtZSA9IHRoaXMubmFtZQogICAgICAgIHZhciBpbmRpY2VzID0gdGhpcy5pbmRleGVyLmFsbCgpOwogICAgICAgIHZhciBrZXlzID0gW107CiAgICAgICAgLy9DaGVja2luZyBmb3IgdGhlIHN1cHBvcnQgb2YgbWFwLgogICAgICAgIGlmKEFycmF5LnByb3RvdHlwZS5tYXApIHsKICAgICAgICAgIGtleXMgPSBpbmRpY2VzLm1hcChmdW5jdGlvbihyKXsgcmV0dXJuIHIucmVwbGFjZShuYW1lICsgJy4nLCAnJykgfSkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZm9yICh2YXIga2V5IGluIGluZGljZXMpIHsKICAgICAgICAgICAga2V5cy5wdXNoKGtleS5yZXBsYWNlKG5hbWUgKyAnLicsICcnKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRoaXMuZm4oJ2tleXMnLCBjYWxsYmFjaykuY2FsbCh0aGlzLCBrZXlzKQogICAgICB9CiAgICAgIHJldHVybiB0aGlzIC8vIFRPRE8gb3B0aW9ucyBmb3IgbGltaXQvb2Zmc2V0LCByZXR1cm4gcHJvbWlzZQogICAgfSwKCiAgICBnZXQ6IGZ1bmN0aW9uIChrZXksIGNhbGxiYWNrKSB7CiAgICAgIGlmICh0aGlzLmlzQXJyYXkoa2V5KSkgewogICAgICAgIHZhciByID0gW10KICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGtleS5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgIHZhciBrID0gdGhpcy5uYW1lICsgJy4nICsga2V5W2ldCiAgICAgICAgICB2YXIgb2JqID0gc3RvcmFnZS5nZXRJdGVtKGspCiAgICAgICAgICBpZiAob2JqKSB7CiAgICAgICAgICAgIG9iaiA9IEpTT04ucGFyc2Uob2JqKQogICAgICAgICAgICBvYmoua2V5ID0ga2V5W2ldCiAgICAgICAgICB9CiAgICAgICAgICByLnB1c2gob2JqKQogICAgICAgIH0KICAgICAgICBpZiAoY2FsbGJhY2spIHRoaXMubGFtYmRhKGNhbGxiYWNrKS5jYWxsKHRoaXMsIHIpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGsgPSB0aGlzLm5hbWUgKyAnLicgKyBrZXkKICAgICAgICB2YXIgIG9iaiA9IHN0b3JhZ2UuZ2V0SXRlbShrKQogICAgICAgIGlmIChvYmopIHsKICAgICAgICAgIG9iaiA9IEpTT04ucGFyc2Uob2JqKQogICAgICAgICAgb2JqLmtleSA9IGtleQogICAgICAgIH0KICAgICAgICBpZiAoY2FsbGJhY2spIHRoaXMubGFtYmRhKGNhbGxiYWNrKS5jYWxsKHRoaXMsIG9iaikKICAgICAgfQogICAgICByZXR1cm4gdGhpcwogICAgfSwKCiAgICBleGlzdHM6IGZ1bmN0aW9uIChrZXksIGNiKSB7CiAgICAgIHZhciBleGlzdHMgPSB0aGlzLmluZGV4ZXIuZmluZCh0aGlzLm5hbWUrJy4nK2tleSkgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlIDsKICAgICAgdGhpcy5sYW1iZGEoY2IpLmNhbGwodGhpcywgZXhpc3RzKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAogICAgLy8gTk9URSBhZGFwdGVycyBjYW5ub3Qgc2V0IHRoaXMuX19yZXN1bHRzIGJ1dCBwbHVnaW5zIGRvCiAgICAvLyB0aGlzIHByb2JhYmx5IHNob3VsZCBiZSByZXZpZXdlZAogICAgYWxsOiBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgdmFyIGlkeCA9IHRoaXMuaW5kZXhlci5hbGwoKQogICAgICAgICwgICByICAgPSBbXQogICAgICAgICwgICBvCiAgICAgICAgLCAgIGsKICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBpZHgubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgayAgICAgPSBpZHhbaV0gLy92CiAgICAgICAgbyAgICAgPSBKU09OLnBhcnNlKHN0b3JhZ2UuZ2V0SXRlbShrKSkKICAgICAgICBvLmtleSA9IGsucmVwbGFjZSh0aGlzLm5hbWUgKyAnLicsICcnKQogICAgICAgIHIucHVzaChvKQogICAgICB9CiAgICAgIGlmIChjYWxsYmFjaykgdGhpcy5mbih0aGlzLm5hbWUsIGNhbGxiYWNrKS5jYWxsKHRoaXMsIHIpCiAgICAgIHJldHVybiB0aGlzCiAgICB9LAoKICAgIHJlbW92ZTogZnVuY3Rpb24gKGtleU9yQXJyYXksIGNhbGxiYWNrKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgaWYgKHRoaXMuaXNBcnJheShrZXlPckFycmF5KSkgewogICAgICAgIC8vIGJhdGNoIHJlbW92ZQogICAgICAgIHZhciBpLCBkb25lID0ga2V5T3JBcnJheS5sZW5ndGg7CiAgICAgICAgdmFyIHJlbW92ZU9uZSA9IGZ1bmN0aW9uKGkpIHsKICAgICAgICAgIHNlbGYucmVtb3ZlKGtleU9yQXJyYXlbaV0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoKC0tZG9uZSkgPiAwKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICBzZWxmLmxhbWJkYShjYWxsYmFjaykuY2FsbChzZWxmKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgICBmb3IgKGk9MDsgaSA8IGtleU9yQXJyYXkubGVuZ3RoOyBpKyspCiAgICAgICAgICByZW1vdmVPbmUoaSk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgIH0KICAgICAgdmFyIGtleSA9IHRoaXMubmFtZSArICcuJyArCiAgICAgICAgKChrZXlPckFycmF5LmtleSkgPyBrZXlPckFycmF5LmtleSA6IGtleU9yQXJyYXkpCiAgICAgIHRoaXMuaW5kZXhlci5kZWwoa2V5KQogICAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KQogICAgICBpZiAoY2FsbGJhY2spIHRoaXMubGFtYmRhKGNhbGxiYWNrKS5jYWxsKHRoaXMpCiAgICAgIHJldHVybiB0aGlzCiAgICB9LAoKICAgIG51a2U6IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgICB0aGlzLmFsbChmdW5jdGlvbihyKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSByLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgdGhpcy5yZW1vdmUocltpXSk7CiAgICAgICAgfQogICAgICAgIGlmIChjYWxsYmFjaykgdGhpcy5sYW1iZGEoY2FsbGJhY2spLmNhbGwodGhpcykKICAgICAgfSkKICAgICAgcmV0dXJuIHRoaXMKICAgIH0KICB9fSkoKSk7Ckxhd25jaGFpci5hZGFwdGVyKCd3ZWJraXQtc3FsaXRlJywgKGZ1bmN0aW9uKCkgewogIC8vIHByaXZhdGUgbWV0aG9kcwogIHZhciBmYWlsID0gZnVuY3Rpb24oZSwgaSkgewogICAgaWYgKGNvbnNvbGUpIHsKICAgICAgY29uc29sZS5sb2coJ2Vycm9yIGluIHNxbGl0ZSBhZGFwdG9yIScsIGUsIGkpCiAgICB9CiAgfSwgbm93ID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBuZXcgRGF0ZSgpCiAgICB9IC8vIEZJWE1FIG5lZWQgdG8gdXNlIGJldHRlciBkYXRlIGZuCiAgICAvLyBub3QgZW50aXJlbHkgc3VyZSBpZiB0aGlzIGlzIG5lZWRlZC4uLgoKICAvLyBwdWJsaWMgbWV0aG9kcwogIHJldHVybiB7CgogICAgdmFsaWQ6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gISEod2luZG93Lm9wZW5EYXRhYmFzZSkKICAgIH0sCgogICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzLAogICAgICAgIGNiID0gdGhhdC5mbih0aGF0Lm5hbWUsIGNhbGxiYWNrKSwKICAgICAgICBjcmVhdGUgPSAiQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgIiArIHRoaXMucmVjb3JkICsgIiAoaWQgTlZBUkNIQVIoMzIpIFVOSVFVRSBQUklNQVJZIEtFWSwgdmFsdWUgVEVYVCwgdGltZXN0YW1wIFJFQUwpIiwKICAgICAgICB3aW4gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBjYi5jYWxsKHRoYXQsIHRoYXQpOwogICAgICAgIH0KICAgICAgICAvLyBvcGVuIGEgY29ubmVjdGlvbiBhbmQgY3JlYXRlIHRoZSBkYiBpZiBpdCBkb2Vzbid0IGV4aXN0CiAgICAgICAgLy9GRUVESEVOUlkgQ0hBTkdFIFRPIEFMTE9XIEVSUk9SIENBTExCQUNLCiAgICAgIGlmIChvcHRpb25zICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zLmZhaWwpIGZhaWwgPSBvcHRpb25zLmZhaWwKICAgICAgICAvL0VORCBDSEFOR0UKICAgICAgdGhpcy5kYiA9IG9wZW5EYXRhYmFzZSh0aGlzLm5hbWUsICcxLjAuMCcsIHRoaXMubmFtZSwgNjU1MzYpCiAgICAgIHRoaXMuZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24odCkgewogICAgICAgIHQuZXhlY3V0ZVNxbChjcmVhdGUsIFtdLCB3aW4sIGZhaWwpCiAgICAgIH0pCiAgICB9LAoKICAgIGtleXM6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgIHZhciBjYiA9IHRoaXMubGFtYmRhKGNhbGxiYWNrKSwKICAgICAgICB0aGF0ID0gdGhpcywKICAgICAgICBrZXlzID0gIlNFTEVDVCBpZCBGUk9NICIgKyB0aGlzLnJlY29yZCArICIgT1JERVIgQlkgdGltZXN0YW1wIERFU0MiCgogICAgICB0aGlzLmRiLnJlYWRUcmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgdmFyIHdpbiA9IGZ1bmN0aW9uKHh4eCwgcmVzdWx0cykgewogICAgICAgICAgaWYgKHJlc3VsdHMucm93cy5sZW5ndGggPT0gMCkgewogICAgICAgICAgICBjYi5jYWxsKHRoYXQsIFtdKQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHIgPSBbXTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSByZXN1bHRzLnJvd3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICAgICAgci5wdXNoKHJlc3VsdHMucm93cy5pdGVtKGkpLmlkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYi5jYWxsKHRoYXQsIHIpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHQuZXhlY3V0ZVNxbChrZXlzLCBbXSwgd2luLCBmYWlsKQogICAgICB9KQogICAgICByZXR1cm4gdGhpcwogICAgfSwKICAgIC8vIHlvdSB0aGluayB0aGF0cyBhaXIgeW91J3JlIGJyZWF0aGluZyBub3c/CiAgICBzYXZlOiBmdW5jdGlvbihvYmosIGNhbGxiYWNrLCBlcnJvcikgewogICAgICB2YXIgdGhhdCA9IHRoaXMKICAgICAgb2JqcyA9ICh0aGlzLmlzQXJyYXkob2JqKSA/IG9iaiA6IFtvYmpdKS5tYXAoZnVuY3Rpb24obykgewogICAgICAgIGlmICghby5rZXkpIHsKICAgICAgICAgIG8ua2V5ID0gdGhhdC51dWlkKCkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG8KICAgICAgfSksCiAgICAgICAgaW5zID0gIklOU0VSVCBPUiBSRVBMQUNFIElOVE8gIiArIHRoaXMucmVjb3JkICsgIiAodmFsdWUsIHRpbWVzdGFtcCwgaWQpIFZBTFVFUyAoPyw/LD8pIiwKICAgICAgICB3aW4gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICB0aGF0LmxhbWJkYShjYWxsYmFjaykuY2FsbCh0aGF0LCB0aGF0LmlzQXJyYXkob2JqKSA/IG9ianMgOiBvYmpzWzBdKQogICAgICAgICAgfQogICAgICAgIH0sIGVycm9yID0gZXJyb3IgfHwgZnVuY3Rpb24oKSB7fSwgaW5zdmFscyA9IFtdLAogICAgICAgIHRzID0gbm93KCkKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2Jqcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgaW5zdmFsc1tpXSA9IFtKU09OLnN0cmluZ2lmeShvYmpzW2ldKSwgdHMsIG9ianNbaV0ua2V5XTsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBmYWlsKGUpCiAgICAgICAgICB0aHJvdyBlOwogICAgICAgIH0KCiAgICAgIHRoYXQuZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24odCkgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2Jqcy5sZW5ndGg7IGkgPCBsOyBpKyspCiAgICAgICAgICB0LmV4ZWN1dGVTcWwoaW5zLCBpbnN2YWxzW2ldKQogICAgICB9LCBmdW5jdGlvbihlLCBpKSB7CiAgICAgICAgZmFpbChlLCBpKQogICAgICB9LCB3aW4pCgogICAgICByZXR1cm4gdGhpcwogICAgfSwKCgogICAgYmF0Y2g6IGZ1bmN0aW9uKG9ianMsIGNhbGxiYWNrKSB7CiAgICAgIHJldHVybiB0aGlzLnNhdmUob2JqcywgY2FsbGJhY2spCiAgICB9LAoKICAgIGdldDogZnVuY3Rpb24oa2V5T3JBcnJheSwgY2IpIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzLAogICAgICAgIHNxbCA9ICcnLAogICAgICAgIGFyZ3MgPSB0aGlzLmlzQXJyYXkoa2V5T3JBcnJheSkgPyBrZXlPckFycmF5IDogW2tleU9yQXJyYXldOwogICAgICAvLyBiYXRjaCBzZWxlY3RzIHN1cHBvcnQKICAgICAgc3FsID0gJ1NFTEVDVCBpZCwgdmFsdWUgRlJPTSAnICsgdGhpcy5yZWNvcmQgKyAiIFdIRVJFIGlkIElOICgiICsKICAgICAgICBhcmdzLm1hcChmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gJz8nCiAgICAgIH0pLmpvaW4oIiwiKSArICIpIgogICAgICAvLyBGSVhNRQogICAgICAvLyB3aWxsIGFsd2F5cyBsb29wIHRoZSByZXN1bHRzIGJ1dCBjbGVhbnMgaXQgdXAgaWYgbm90IGEgYmF0Y2ggcmV0dXJuIGF0IHRoZSBlbmQuLgogICAgICAvLyBpbiBvdGhlciB3b3JkcywgdGhpcyBjb3VsZCBiZSBmYXN0ZXIKICAgICAgdmFyIHdpbiA9IGZ1bmN0aW9uKHh4eCwgcmVzdWx0cykgewogICAgICAgIHZhciBvLCByLCBsb29rdXAgPSB7fQogICAgICAgICAgLy8gbWFwIGZyb20gcmVzdWx0cyB0byBrZXlzCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSByZXN1bHRzLnJvd3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICAgICAgICBvID0gSlNPTi5wYXJzZShyZXN1bHRzLnJvd3MuaXRlbShpKS52YWx1ZSkKICAgICAgICAgIG8ua2V5ID0gcmVzdWx0cy5yb3dzLml0ZW0oaSkuaWQKICAgICAgICAgIGxvb2t1cFtvLmtleV0gPSBvOwogICAgICAgIH0KICAgICAgICByID0gYXJncy5tYXAoZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICByZXR1cm4gbG9va3VwW2tleV07CiAgICAgICAgfSk7CiAgICAgICAgaWYgKCF0aGF0LmlzQXJyYXkoa2V5T3JBcnJheSkpIHIgPSByLmxlbmd0aCA/IHJbMF0gOiBudWxsCiAgICAgICAgaWYgKGNiKSB0aGF0LmxhbWJkYShjYikuY2FsbCh0aGF0LCByKQogICAgICB9CiAgICAgIHRoaXMuZGIucmVhZFRyYW5zYWN0aW9uKGZ1bmN0aW9uKHQpIHsKICAgICAgICB0LmV4ZWN1dGVTcWwoc3FsLCBhcmdzLCB3aW4sIGZhaWwpCiAgICAgIH0pCiAgICAgIHJldHVybiB0aGlzCiAgICB9LAoKICAgIGV4aXN0czogZnVuY3Rpb24oa2V5LCBjYikgewogICAgICB2YXIgaXMgPSAiU0VMRUNUICogRlJPTSAiICsgdGhpcy5yZWNvcmQgKyAiIFdIRVJFIGlkID0gPyIsCiAgICAgICAgdGhhdCA9IHRoaXMsCiAgICAgICAgd2luID0gZnVuY3Rpb24oeHh4LCByZXN1bHRzKSB7CiAgICAgICAgICBpZiAoY2IpIHRoYXQuZm4oJ2V4aXN0cycsIGNiKS5jYWxsKHRoYXQsIChyZXN1bHRzLnJvd3MubGVuZ3RoID4gMCkpCiAgICAgICAgfQogICAgICB0aGlzLmRiLnJlYWRUcmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgdC5leGVjdXRlU3FsKGlzLCBba2V5XSwgd2luLCBmYWlsKQogICAgICB9KQogICAgICByZXR1cm4gdGhpcwogICAgfSwKCiAgICBhbGw6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgIHZhciB0aGF0ID0gdGhpcywKICAgICAgICBhbGwgPSAiU0VMRUNUICogRlJPTSAiICsgdGhpcy5yZWNvcmQsCiAgICAgICAgciA9IFtdLAogICAgICAgIGNiID0gdGhpcy5mbih0aGlzLm5hbWUsIGNhbGxiYWNrKSB8fCB1bmRlZmluZWQsCiAgICAgICAgd2luID0gZnVuY3Rpb24oeHh4LCByZXN1bHRzKSB7CiAgICAgICAgICBpZiAocmVzdWx0cy5yb3dzLmxlbmd0aCAhPSAwKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmVzdWx0cy5yb3dzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgIHZhciBvYmogPSBKU09OLnBhcnNlKHJlc3VsdHMucm93cy5pdGVtKGkpLnZhbHVlKQogICAgICAgICAgICAgIG9iai5rZXkgPSByZXN1bHRzLnJvd3MuaXRlbShpKS5pZAogICAgICAgICAgICAgIHIucHVzaChvYmopCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChjYikgY2IuY2FsbCh0aGF0LCByKQogICAgICAgIH0KCiAgICAgIHRoaXMuZGIucmVhZFRyYW5zYWN0aW9uKGZ1bmN0aW9uKHQpIHsKICAgICAgICB0LmV4ZWN1dGVTcWwoYWxsLCBbXSwgd2luLCBmYWlsKQogICAgICB9KQogICAgICByZXR1cm4gdGhpcwogICAgfSwKCiAgICByZW1vdmU6IGZ1bmN0aW9uKGtleU9yQXJyYXksIGNiKSB7CiAgICAgIHZhciB0aGF0ID0gdGhpcywKICAgICAgICBhcmdzLCBzcWwgPSAiREVMRVRFIEZST00gIiArIHRoaXMucmVjb3JkICsgIiBXSEVSRSBpZCAiLAogICAgICAgIHdpbiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKGNiKSB0aGF0LmxhbWJkYShjYikuY2FsbCh0aGF0KQogICAgICAgIH0KICAgICAgaWYgKCF0aGlzLmlzQXJyYXkoa2V5T3JBcnJheSkpIHsKICAgICAgICBzcWwgKz0gJz0gPyc7CiAgICAgICAgYXJncyA9IFtrZXlPckFycmF5XTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhcmdzID0ga2V5T3JBcnJheTsKICAgICAgICBzcWwgKz0gIklOICgiICsKICAgICAgICAgIGFyZ3MubWFwKGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuICc/JwogICAgICAgIH0pLmpvaW4oJywnKSArCiAgICAgICAgICAiKSI7CiAgICAgIH0KICAgICAgYXJncyA9IGFyZ3MubWFwKGZ1bmN0aW9uKG9iaikgewogICAgICAgIHJldHVybiBvYmoua2V5ID8gb2JqLmtleSA6IG9iajsKICAgICAgfSk7CgogICAgICB0aGlzLmRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uKHQpIHsKICAgICAgICB0LmV4ZWN1dGVTcWwoc3FsLCBhcmdzLCB3aW4sIGZhaWwpOwogICAgICB9KTsKCiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICBudWtlOiBmdW5jdGlvbihjYikgewogICAgICB2YXIgbnVrZSA9ICJERUxFVEUgRlJPTSAiICsgdGhpcy5yZWNvcmQsCiAgICAgICAgdGhhdCA9IHRoaXMsCiAgICAgICAgd2luID0gY2IgPyBmdW5jdGlvbigpIHsKICAgICAgICB0aGF0LmxhbWJkYShjYikuY2FsbCh0aGF0KQogICAgICB9IDogZnVuY3Rpb24oKSB7fQogICAgICB0aGlzLmRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uKHQpIHsKICAgICAgICB0LmV4ZWN1dGVTcWwobnVrZSwgW10sIHdpbiwgZmFpbCkKICAgICAgfSkKICAgICAgcmV0dXJuIHRoaXMKICAgIH0KICB9Cn0pKCkpOwpMYXduY2hhaXIuYWRhcHRlcignaHRtbDUtZmlsZXN5c3RlbScsIChmdW5jdGlvbihnbG9iYWwpewoKICB2YXIgRmlsZUVycm9yID0gZ2xvYmFsLkZpbGVFcnJvcjsKCiAgdmFyIGZhaWwgPSBmdW5jdGlvbiggZSApIHsKICAgIHZhciBtc2c7CiAgICB2YXIgc2hvdyA9IHRydWU7CiAgICBzd2l0Y2ggKGUuY29kZSkgewogICAgICBjYXNlIEZpbGVFcnJvci5RVU9UQV9FWENFRURFRF9FUlI6CiAgICAgICAgbXNnID0gJ1FVT1RBX0VYQ0VFREVEX0VSUic7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgRmlsZUVycm9yLk5PVF9GT1VORF9FUlI6CiAgICAgICAgbXNnID0gJ05PVF9GT1VORF9FUlInOwogICAgICAgIHNob3cgPSBmYWxzZTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBGaWxlRXJyb3IuU0VDVVJJVFlfRVJSOgogICAgICAgIG1zZyA9ICdTRUNVUklUWV9FUlInOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIEZpbGVFcnJvci5JTlZBTElEX01PRElGSUNBVElPTl9FUlI6CiAgICAgICAgbXNnID0gJ0lOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUic7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgRmlsZUVycm9yLklOVkFMSURfU1RBVEVfRVJSOgogICAgICAgIG1zZyA9ICdJTlZBTElEX1NUQVRFX0VSUic7CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgbXNnID0gJ1Vua25vd24gRXJyb3InOwogICAgICAgIGJyZWFrOwogICAgfTsKICAgIGlmICggY29uc29sZSAmJiBzaG93ICkgY29uc29sZS5lcnJvciggZSwgbXNnICk7CiAgfTsKCiAgdmFyIGxzID0gZnVuY3Rpb24oIHJlYWRlciwgY2FsbGJhY2ssIGVudHJpZXMgKSB7CiAgICB2YXIgcmVzdWx0ID0gZW50cmllcyB8fCBbXTsKICAgIHJlYWRlci5yZWFkRW50cmllcyhmdW5jdGlvbiggcmVzdWx0cyApIHsKICAgICAgaWYgKCAhcmVzdWx0cy5sZW5ndGggKSB7CiAgICAgICAgaWYgKCBjYWxsYmFjayApIGNhbGxiYWNrKCByZXN1bHQubWFwKGZ1bmN0aW9uKGVudHJ5KSB7IHJldHVybiBlbnRyeS5uYW1lOyB9KSApOwogICAgICB9IGVsc2UgewogICAgICAgIGxzKCByZWFkZXIsIGNhbGxiYWNrLCByZXN1bHQuY29uY2F0KCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggcmVzdWx0cyApICkgKTsKICAgICAgfQogICAgfSwgZmFpbCApOwogIH07CgogIHZhciBmaWxlc3lzdGVtcyA9IHt9OwoKICB2YXIgcm9vdCA9IGZ1bmN0aW9uKCBzdG9yZSwgY2FsbGJhY2sgKSB7CiAgICB2YXIgZGlyZWN0b3J5ID0gZmlsZXN5c3RlbXNbc3RvcmUubmFtZV07CiAgICBpZiAoIGRpcmVjdG9yeSApIHsKICAgICAgY2FsbGJhY2soIGRpcmVjdG9yeSApOwogICAgfSBlbHNlIHsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICByb290KCBzdG9yZSwgY2FsbGJhY2sgKTsKICAgICAgfSwgMTAgKTsKICAgIH0KICB9OwoKICB2YXIgaXNQaG9uZUdhcCA9IGZ1bmN0aW9uKCkgewogICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMzQ3NTM5L2RldGVjdC1iZXR3ZWVuLWEtbW9iaWxlLWJyb3dzZXItb3ItYS1waG9uZWdhcC1hcHBsaWNhdGlvbgogICAgLy9tYXkgYnJlYWsuCiAgICB2YXIgYXBwID0gZG9jdW1lbnQuVVJMLmluZGV4T2YoJ2h0dHA6Ly8nKSA9PT0gLTEgJiYgZG9jdW1lbnQuVVJMLmluZGV4T2YoJ2h0dHBzOi8vJykgPT09IC0xOwogICAgaWYgKGFwcCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIHZhciBjcmVhdGVCbG9iT3JTdHJpbmcgPSBmdW5jdGlvbihjb250ZW50c3RyKSB7CiAgICB2YXIgcmV0VmFsOwogICAgaWYgKGlzUGhvbmVHYXAoKSkgeyAgLy8gcGhvbmVnYXAgZmlsZXdyaXRlciB3b3JrcyB3aXRoIHN0cmluZ3MsIGxhdGVyIHZlcnNpb25zIGFsc28gd29yayB3aXRoIGJpbmFyeSBhcnJheXMsIGFuZCBpZiBwYXNzZWQgYSBibG9iIHdpbGwganVzdCBjb252ZXJ0IHRvIGJpbmFyeSBhcnJheSBhbnl3YXkKICAgICAgcmV0VmFsID0gY29udGVudHN0cjsKICAgIH0gZWxzZSB7CiAgICAgIHZhciB0YXJnZXRDb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJzsKICAgICAgdHJ5IHsKICAgICAgICByZXRWYWwgPSBuZXcgQmxvYiggW2NvbnRlbnRzdHJdLCB7IHR5cGU6IHRhcmdldENvbnRlbnRUeXBlIH0pOyAgLy8gQmxvYiBkb2Vzbid0IGV4aXN0IG9uIGFsbCBhbmRyb2lkcwogICAgICB9CiAgICAgIGNhdGNoIChlKXsKICAgICAgICAvLyBUeXBlRXJyb3Igb2xkIGNocm9tZSBhbmQgRkYKICAgICAgICB2YXIgYmxvYkJ1aWxkZXIgPSB3aW5kb3cuQmxvYkJ1aWxkZXIgfHwKICAgICAgICAgIHdpbmRvdy5XZWJLaXRCbG9iQnVpbGRlciB8fAogICAgICAgICAgd2luZG93Lk1vekJsb2JCdWlsZGVyIHx8CiAgICAgICAgICB3aW5kb3cuTVNCbG9iQnVpbGRlcjsKICAgICAgICBpZiAoZS5uYW1lID09ICdUeXBlRXJyb3InICYmIGJsb2JCdWlsZGVyKSB7CiAgICAgICAgICB2YXIgYmIgPSBuZXcgYmxvYkJ1aWxkZXIoKTsKICAgICAgICAgIGJiLmFwcGVuZChbY29udGVudHN0ci5idWZmZXJdKTsKICAgICAgICAgIHJldFZhbCA9IGJiLmdldEJsb2IodGFyZ2V0Q29udGVudFR5cGUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBXZSBjYW4ndCBtYWtlIGEgQmxvYiwgc28ganVzdCByZXR1cm4gdGhlIHN0cmluZ2lmaWVkIGNvbnRlbnQKICAgICAgICAgIHJldFZhbCA9IGNvbnRlbnRzdHI7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gcmV0VmFsOwogIH0KCiAgcmV0dXJuIHsKICAgIC8vIGJvb2xlYW47IHRydWUgaWYgdGhlIGFkYXB0ZXIgaXMgdmFsaWQgZm9yIHRoZSBjdXJyZW50IGVudmlyb25tZW50CiAgICB2YWxpZDogZnVuY3Rpb24oKSB7CiAgICAgIHZhciBmcyA9IGdsb2JhbC5yZXF1ZXN0RmlsZVN5c3RlbSB8fCBnbG9iYWwud2Via2l0UmVxdWVzdEZpbGVTeXN0ZW0gfHwgZ2xvYmFsLm1vel9yZXF1ZXN0RmlsZVN5c3RlbTsKICAgICAgcmV0dXJuICEhZnM7CiAgICB9LAoKICAgIC8vIGNvbnN0cnVjdG9yIGNhbGwgYW5kIGNhbGxiYWNrLiAnbmFtZScgaXMgdGhlIG1vc3QgY29tbW9uIG9wdGlvbgogICAgaW5pdDogZnVuY3Rpb24oIG9wdGlvbnMsIGNhbGxiYWNrICkgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICB2YXIgZXJyb3IgPSBmdW5jdGlvbihlKSB7IGZhaWwoZSk7IGlmICggY2FsbGJhY2sgKSBtZS5mbiggbWUubmFtZSwgY2FsbGJhY2sgKS5jYWxsKCBtZSwgbWUgKTsgfTsKICAgICAgdmFyIHNpemUgPSBvcHRpb25zLnNpemUgfHwgMTAwKjEwMjQqMTAyNDsKICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWU7CiAgICAgIC8vZGlzYWJsZSBmaWxlIGJhY2t1cCB0byBpY2xvdWQKICAgICAgbWUuYmFja3VwID0gZmFsc2U7CiAgICAgIGlmKHR5cGVvZiBvcHRpb25zLmJhY2t1cCAhPT0gJ3VuZGVmaW5lZCcpewogICAgICAgIG1lLmJhY2t1cCA9IG9wdGlvbnMuYmFja3VwOwogICAgICB9CgogICAgICBmdW5jdGlvbiByZXF1ZXN0RmlsZVN5c3RlbShhbW91bnQpIHsKLy8gICAgICAgIGNvbnNvbGUubG9nKCdpbiByZXF1ZXN0RmlsZVN5c3RlbScpOwogICAgICAgIHZhciBmcyA9IGdsb2JhbC5yZXF1ZXN0RmlsZVN5c3RlbSB8fCBnbG9iYWwud2Via2l0UmVxdWVzdEZpbGVTeXN0ZW0gfHwgZ2xvYmFsLm1vel9yZXF1ZXN0RmlsZVN5c3RlbTsKICAgICAgICB2YXIgbW9kZSA9IHdpbmRvdy5QRVJTSVNURU5UOwogICAgICAgIGlmKHR5cGVvZiBMb2NhbEZpbGVTeXN0ZW0gIT09ICJ1bmRlZmluZWQiICYmIHR5cGVvZiBMb2NhbEZpbGVTeXN0ZW0uUEVSU0lTVEVOVCAhPT0gInVuZGVmaW5lZCIpewogICAgICAgICAgbW9kZSA9IExvY2FsRmlsZVN5c3RlbS5QRVJTSVNURU5UOwogICAgICAgIH0gICAgICAKICAgICAgICBmcyhtb2RlLCBhbW91bnQsIGZ1bmN0aW9uKGZzKSB7Ci8vICAgICAgICAgIGNvbnNvbGUubG9nKCdnb3QgRlMgJywgZnMpOwogICAgICAgICAgZnMucm9vdC5nZXREaXJlY3RvcnkoIG5hbWUsIHtjcmVhdGU6dHJ1ZX0sIGZ1bmN0aW9uKCBkaXJlY3RvcnkgKSB7Ci8vICAgICAgICAgICAgY29uc29sZS5sb2coJ2dvdCBESVIgJywgZGlyZWN0b3J5KTsKICAgICAgICAgICAgZmlsZXN5c3RlbXNbbmFtZV0gPSBkaXJlY3Rvcnk7CiAgICAgICAgICAgIGlmICggY2FsbGJhY2sgKSBtZS5mbiggbWUubmFtZSwgY2FsbGJhY2sgKS5jYWxsKCBtZSwgbWUgKTsKICAgICAgICAgIH0sIGZ1bmN0aW9uKCBlICkgewovLyAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBnZXR0aW5nIGRpciA6OiAnLCBlKTsKICAgICAgICAgICAgZXJyb3IoZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9LCBmdW5jdGlvbiggZSApIHsKLy8gICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIGdldHRpbmcgRlMgOjogJywgZSk7CiAgICAgICAgICBlcnJvcihlKTsKICAgICAgICB9KTsKICAgICAgfTsKCiAgICAgIC8vIFdoZW4gaW4gdGhlIGJyb3dzZXIgd2UgbmVlZCB0byB1c2UgdGhlIGh0bWw1IGZpbGUgc3lzdGVtIHJhdGhlciB0aGFuCiAgICAgIC8vIHRoZSBvbmUgY29yZG92YSBzdXBwbGllcywgYnV0IGl0IG5lZWRzIHRvIHJlcXVlc3QgYSBxdW90YSBmaXJzdC4KICAgICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3Iud2Via2l0UGVyc2lzdGVudFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgbmF2aWdhdG9yLndlYmtpdFBlcnNpc3RlbnRTdG9yYWdlLnJlcXVlc3RRdW90YShzaXplLCByZXF1ZXN0RmlsZVN5c3RlbSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICBsb2dnZXIud2FybignVXNlciBkZWNsaW5lZCBmaWxlIHN0b3JhZ2UnKTsKICAgICAgICAgIGVycm9yKCdVc2VyIGRlY2xpbmVkIGZpbGUgc3RvcmFnZScpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIEFtb3VudCBpcyAwIGJlY2F1c2Ugd2UgcHJldHR5IG11Y2ggaGF2ZSBmcmVlIHJlaWduIG92ZXIgdGhlCiAgICAgICAgLy8gYW1vdW50IG9mIHN0b3JhZ2Ugd2UgdXNlIG9uIGFuIGFuZHJvaWQgZGV2aWNlLgogICAgICAgIHJlcXVlc3RGaWxlU3lzdGVtKDApOwogICAgICB9CiAgICB9LAoKICAgIC8vIHJldHVybnMgYWxsIHRoZSBrZXlzIGluIHRoZSBzdG9yZQogICAga2V5czogZnVuY3Rpb24oIGNhbGxiYWNrICkgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICByb290KCB0aGlzLCBmdW5jdGlvbiggc3RvcmUgKSB7CiAgICAgICAgbHMoIHN0b3JlLmNyZWF0ZVJlYWRlcigpLCBmdW5jdGlvbiggZW50cmllcyApIHsKICAgICAgICAgIGlmICggY2FsbGJhY2sgKSBtZS5mbiggJ2tleXMnLCBjYWxsYmFjayApLmNhbGwoIG1lLCBlbnRyaWVzICk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gc2F2ZSBhbiBvYmplY3QKICAgIHNhdmU6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICB2YXIga2V5ID0gb2JqLmtleSB8fCB0aGlzLnV1aWQoKTsKICAgICAgb2JqLmtleSA9IGtleTsKICAgICAgdmFyIGVycm9yID0gZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyBpZiAoIGNhbGxiYWNrICkgbWUubGFtYmRhKCBjYWxsYmFjayApLmNhbGwoIG1lICk7IH07CiAgICAgIHJvb3QoIHRoaXMsIGZ1bmN0aW9uKCBzdG9yZSApIHsKICAgICAgICB2YXIgd3JpdGVDb250ZW50ID0gZnVuY3Rpb24oZmlsZSwgZXJyb3IpewogICAgICAgICAgZmlsZS5jcmVhdGVXcml0ZXIoZnVuY3Rpb24oIHdyaXRlciApIHsKICAgICAgICAgICAgd3JpdGVyLm9uZXJyb3IgPSBlcnJvcjsKICAgICAgICAgICAgd3JpdGVyLm9ud3JpdGVlbmQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAvLyBDbGVhciB0aGUgb25Xcml0ZUVuZCBoYW5kbGVyIHNvIHRoZSB0cnVuY2F0ZSBkb2VzIG5vdCBjYWxsIGl0IGFuZCBjYXVzZSBhbiBpbmZpbml0ZSBsb29wCiAgICAgICAgICAgICAgdGhpcy5vbndyaXRlZW5kID0gbnVsbDsKICAgICAgICAgICAgICAvLyBUcnVuY2F0ZSB0aGUgZmlsZSBhdCB0aGUgZW5kIG9mIHRoZSB3cml0dGVuIGNvbnRlbnRzLiBUaGlzIGVuc3VyZXMgdGhhdCBpZiB3ZSBhcmUgdXBkYXRpbmcgCiAgICAgICAgICAgICAgLy8gYSBmaWxlIHdoaWNoIHdhcyBwcmV2aW91c2x5IGxvbmdlciwgd2Ugd2lsbCBub3QgYmUgbGVmdCB3aXRoIG9sZCBjb250ZW50cyBiZXlvbmQgdGhlIGVuZCBvZiAKICAgICAgICAgICAgICAvLyB0aGUgY3VycmVudCBidWZmZXIuCiAgICAgICAgICAgICAgdGhpcy50cnVuY2F0ZSh0aGlzLnBvc2l0aW9uKTsKICAgICAgICAgICAgICBpZiAoIGNhbGxiYWNrICkgbWUubGFtYmRhKCBjYWxsYmFjayApLmNhbGwoIG1lLCBvYmogKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIGNvbnRlbnRTdHIgPSBKU09OLnN0cmluZ2lmeShvYmopOwoKICAgICAgICAgICAgdmFyIHdyaXRlckNvbnRlbnQgPSBjcmVhdGVCbG9iT3JTdHJpbmcoY29udGVudFN0cik7CiAgICAgICAgICAgIHdyaXRlci53cml0ZSh3cml0ZXJDb250ZW50KTsKICAgICAgICAgIH0sIGVycm9yICk7CiAgICAgICAgfQogICAgICAgIHN0b3JlLmdldEZpbGUoIGtleSwge2NyZWF0ZTp0cnVlfSwgZnVuY3Rpb24oIGZpbGUgKSB7CiAgICAgICAgICBpZih0eXBlb2YgZmlsZS5zZXRNZXRhZGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiAobWUuYmFja3VwID09PSBmYWxzZSB8fCBtZS5iYWNrdXAgPT09ICdmYWxzZScpKXsKICAgICAgICAgICAgLy9zZXQgbWV0YSBkYXRhIG9uIHRoZSBmaWxlIHRvIG1ha2Ugc3VyZSBpdCB3b24ndCBiZSBiYWNrZWQgdXAgYnkgaWNsb3VkCiAgICAgICAgICAgIGZpbGUuc2V0TWV0YWRhdGEoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICB3cml0ZUNvbnRlbnQoZmlsZSwgZXJyb3IpOwogICAgICAgICAgICB9LCBmdW5jdGlvbigpewogICAgICAgICAgICAgIHdyaXRlQ29udGVudChmaWxlLCBlcnJvcik7CiAgICAgICAgICAgIH0sIHsnY29tLmFwcGxlLk1vYmlsZUJhY2t1cCc6IDF9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdyaXRlQ29udGVudChmaWxlLCBlcnJvcik7CiAgICAgICAgICB9CiAgICAgICAgfSwgZXJyb3IgKTsKICAgICAgfSk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBiYXRjaCBzYXZlIGFycmF5IG9mIG9ianMKICAgIGJhdGNoOiBmdW5jdGlvbiggb2JqcywgY2FsbGJhY2sgKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICAgIHZhciBzYXZlZCA9IFtdOwogICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0gb2Jqcy5sZW5ndGg7IGkgPCBpbDsgaSsrICkgewogICAgICAgIG1lLnNhdmUoIG9ianNbaV0sIGZ1bmN0aW9uKCBvYmogKSB7CiAgICAgICAgICBzYXZlZC5wdXNoKCBvYmogKTsKICAgICAgICAgIGlmICggc2F2ZWQubGVuZ3RoID09PSBpbCAmJiBjYWxsYmFjayApIHsKICAgICAgICAgICAgbWUubGFtYmRhKCBjYWxsYmFjayApLmNhbGwoIG1lLCBzYXZlZCApOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyByZXRyaWV2ZSBvYmogKG9yIGFycmF5IG9mIG9ianMpIGFuZCBhcHBseSBjYWxsYmFjayB0byBlYWNoCiAgICBnZXQ6IGZ1bmN0aW9uKCBrZXkgLyogb3IgYXJyYXkgKi8sIGNhbGxiYWNrICkgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICBpZiAoIHRoaXMuaXNBcnJheSgga2V5ICkgKSB7CiAgICAgICAgdmFyIHZhbHVlcyA9IFtdOwogICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSBrZXkubGVuZ3RoOyBpIDwgaWw7IGkrKyApIHsKICAgICAgICAgIG1lLmdldCgga2V5W2ldLCBmdW5jdGlvbiggcmVzdWx0ICkgewogICAgICAgICAgICBpZiAoIHJlc3VsdCApIHZhbHVlcy5wdXNoKCByZXN1bHQgKTsKICAgICAgICAgICAgaWYgKCB2YWx1ZXMubGVuZ3RoID09PSBpbCAmJiBjYWxsYmFjayApIHsKICAgICAgICAgICAgICBtZS5sYW1iZGEoIGNhbGxiYWNrICkuY2FsbCggbWUsIHZhbHVlcyApOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGVycm9yID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgZmFpbCggZSApOwogICAgICAgICAgaWYgKCBjYWxsYmFjayApIHsKICAgICAgICAgICAgbWUubGFtYmRhKCBjYWxsYmFjayApLmNhbGwoIG1lICk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICByb290KCB0aGlzLCBmdW5jdGlvbiggc3RvcmUgKSB7CiAgICAgICAgICBzdG9yZS5nZXRGaWxlKCBrZXksIHtjcmVhdGU6ZmFsc2V9LCBmdW5jdGlvbiggZW50cnkgKSB7CiAgICAgICAgICAgIGVudHJ5LmZpbGUoZnVuY3Rpb24oIGZpbGUgKSB7CiAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CgogICAgICAgICAgICAgIHJlYWRlci5vbmVycm9yID0gZXJyb3I7CgogICAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzID0ge307CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICByZXMgPSBKU09OLnBhcnNlKCBlLnRhcmdldC5yZXN1bHQpOwogICAgICAgICAgICAgICAgICByZXMua2V5ID0ga2V5OwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICByZXMgPSB7a2V5OmtleX07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIGNhbGxiYWNrICkgbWUubGFtYmRhKCBjYWxsYmFjayApLmNhbGwoIG1lLCByZXMgKTsKICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dCggZmlsZSApOwogICAgICAgICAgICB9LCBlcnJvciApOwogICAgICAgICAgfSwgZXJyb3IgKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gY2hlY2sgaWYgYW4gb2JqIGV4aXN0cyBpbiB0aGUgY29sbGVjdGlvbgogICAgZXhpc3RzOiBmdW5jdGlvbigga2V5LCBjYWxsYmFjayApIHsKICAgICAgdmFyIG1lID0gdGhpczsKICAgICAgcm9vdCggdGhpcywgZnVuY3Rpb24oIHN0b3JlICkgewogICAgICAgIHN0b3JlLmdldEZpbGUoIGtleSwge2NyZWF0ZTpmYWxzZX0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCBjYWxsYmFjayApIG1lLmxhbWJkYSggY2FsbGJhY2sgKS5jYWxsKCBtZSwgdHJ1ZSApOwogICAgICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCBjYWxsYmFjayApIG1lLmxhbWJkYSggY2FsbGJhY2sgKS5jYWxsKCBtZSwgZmFsc2UgKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyByZXR1cm5zIGFsbCB0aGUgb2JqcyB0byB0aGUgY2FsbGJhY2sgYXMgYW4gYXJyYXkKICAgIGFsbDogZnVuY3Rpb24oIGNhbGxiYWNrICkgewogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICBpZiAoIGNhbGxiYWNrICkgewogICAgICAgIHRoaXMua2V5cyhmdW5jdGlvbigga2V5cyApIHsKICAgICAgICAgIGlmICggIWtleXMubGVuZ3RoICkgewogICAgICAgICAgICBtZS5mbiggbWUubmFtZSwgY2FsbGJhY2sgKS5jYWxsKCBtZSwgW10gKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG1lLmdldCgga2V5cywgZnVuY3Rpb24oIHZhbHVlcyApIHsKICAgICAgICAgICAgICBtZS5mbiggbWUubmFtZSwgY2FsbGJhY2sgKS5jYWxsKCBtZSwgdmFsdWVzICk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyByZW1vdmUgYSBkb2Mgb3IgY29sbGVjdGlvbiBvZiBlbQogICAgcmVtb3ZlOiBmdW5jdGlvbigga2V5IC8qIG9yIG9iamVjdCAqLywgY2FsbGJhY2sgKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICAgIHZhciBlcnJvciA9IGZ1bmN0aW9uKGUpIHsgZmFpbCggZSApOyBpZiAoIGNhbGxiYWNrICkgbWUubGFtYmRhKCBjYWxsYmFjayApLmNhbGwoIG1lICk7IH07CiAgICAgIHJvb3QoIHRoaXMsIGZ1bmN0aW9uKCBzdG9yZSApIHsKICAgICAgICBzdG9yZS5nZXRGaWxlKCAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyBrZXkgOiBrZXkua2V5ICksIHtjcmVhdGU6ZmFsc2V9LCBmdW5jdGlvbiggZmlsZSApIHsKICAgICAgICAgIGZpbGUucmVtb3ZlKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoIGNhbGxiYWNrICkgbWUubGFtYmRhKCBjYWxsYmFjayApLmNhbGwoIG1lICk7CiAgICAgICAgICB9LCBlcnJvciApOwogICAgICAgIH0sIGVycm9yICk7CiAgICAgIH0pOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gZGVzdHJveSBldmVyeXRoaW5nCiAgICBudWtlOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7CiAgICAgIHZhciBtZSA9IHRoaXM7CiAgICAgIHZhciBjb3VudCA9IDA7CiAgICAgIHRoaXMua2V5cyhmdW5jdGlvbigga2V5cyApIHsKICAgICAgICBpZiAoICFrZXlzLmxlbmd0aCApIHsKICAgICAgICAgIGlmICggY2FsbGJhY2sgKSBtZS5sYW1iZGEoIGNhbGxiYWNrICkuY2FsbCggbWUgKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IGtleXMubGVuZ3RoOyBpIDwgaWw7IGkrKyApIHsKICAgICAgICAgICAgbWUucmVtb3ZlKCBrZXlzW2ldLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBjb3VudCsrOwogICAgICAgICAgICAgIGlmICggY291bnQgPT09IGlsICYmIGNhbGxiYWNrICkgewogICAgICAgICAgICAgICAgbWUubGFtYmRhKCBjYWxsYmFjayApLmNhbGwoIG1lICk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KICB9Owp9KHRoaXMpKSk7Ckxhd25jaGFpci5hZGFwdGVyKCdtZW1vcnknLCAoZnVuY3Rpb24oKXsKCiAgICB2YXIgZGF0YSA9IHt9CgogICAgcmV0dXJuIHsKICAgICAgICB2YWxpZDogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlIH0sCgogICAgICAgIGluaXQ6IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykgewogICAgICAgICAgICBkYXRhW3RoaXMubmFtZV0gPSBkYXRhW3RoaXMubmFtZV0gfHwge2luZGV4OltdLHN0b3JlOnt9fQogICAgICAgICAgICB0aGlzLmluZGV4ID0gZGF0YVt0aGlzLm5hbWVdLmluZGV4CiAgICAgICAgICAgIHRoaXMuc3RvcmUgPSBkYXRhW3RoaXMubmFtZV0uc3RvcmUKICAgICAgICAgICAgdmFyIGNiID0gdGhpcy5mbih0aGlzLm5hbWUsIGNhbGxiYWNrKQogICAgICAgICAgICBpZiAoY2IpIGNiLmNhbGwodGhpcywgdGhpcykKICAgICAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgICB9LAoKICAgICAgICBrZXlzOiBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgdGhpcy5mbigna2V5cycsIGNhbGxiYWNrKS5jYWxsKHRoaXMsIHRoaXMuaW5kZXgpCiAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgfSwKCiAgICAgICAgc2F2ZTogZnVuY3Rpb24ob2JqLCBjYikgewogICAgICAgICAgICB2YXIga2V5ID0gb2JqLmtleSB8fCB0aGlzLnV1aWQoKQogICAgICAgICAgICAKICAgICAgICAgICAgdGhpcy5leGlzdHMoa2V5LCBmdW5jdGlvbihleGlzdHMpIHsKICAgICAgICAgICAgICAgIGlmICghZXhpc3RzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5rZXkpIGRlbGV0ZSBvYmoua2V5CiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleC5wdXNoKGtleSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlW2tleV0gPSBvYmoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKGNiKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLmtleSA9IGtleQogICAgICAgICAgICAgICAgICAgIHRoaXMubGFtYmRhKGNiKS5jYWxsKHRoaXMsIG9iaikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKCiAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgfSwKCiAgICAgICAgYmF0Y2g6IGZ1bmN0aW9uIChvYmpzLCBjYikgewogICAgICAgICAgICB2YXIgciA9IFtdCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2Jqcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgIHRoaXMuc2F2ZShvYmpzW2ldLCBmdW5jdGlvbihyZWNvcmQpIHsKICAgICAgICAgICAgICAgICAgICByLnB1c2gocmVjb3JkKQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoY2IpIHRoaXMubGFtYmRhKGNiKS5jYWxsKHRoaXMsIHIpCiAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgfSwKCiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoa2V5T3JBcnJheSwgY2IpIHsKICAgICAgICAgICAgdmFyIHI7CiAgICAgICAgICAgIGlmICh0aGlzLmlzQXJyYXkoa2V5T3JBcnJheSkpIHsKICAgICAgICAgICAgICAgIHIgPSBbXQogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlPckFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHIucHVzaCh0aGlzLnN0b3JlW2tleU9yQXJyYXlbaV1dKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgciA9IHRoaXMuc3RvcmVba2V5T3JBcnJheV0KICAgICAgICAgICAgICAgIGlmIChyKSByLmtleSA9IGtleU9yQXJyYXkKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoY2IpIHRoaXMubGFtYmRhKGNiKS5jYWxsKHRoaXMsIHIpCiAgICAgICAgICAgIHJldHVybiB0aGlzIAogICAgICAgIH0sCgogICAgICAgIGV4aXN0czogZnVuY3Rpb24gKGtleSwgY2IpIHsKICAgICAgICAgICAgdGhpcy5sYW1iZGEoY2IpLmNhbGwodGhpcywgISEodGhpcy5zdG9yZVtrZXldKSkKICAgICAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgICB9LAoKICAgICAgICBhbGw6IGZ1bmN0aW9uIChjYikgewogICAgICAgICAgICB2YXIgciA9IFtdCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5pbmRleC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBvYmogPSB0aGlzLnN0b3JlW3RoaXMuaW5kZXhbaV1dCiAgICAgICAgICAgICAgICBvYmoua2V5ID0gdGhpcy5pbmRleFtpXQogICAgICAgICAgICAgICAgci5wdXNoKG9iaikKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmZuKHRoaXMubmFtZSwgY2IpLmNhbGwodGhpcywgcikKICAgICAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgICB9LAoKICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChrZXlPckFycmF5LCBjYikgewogICAgICAgICAgICB2YXIgZGVsID0gdGhpcy5pc0FycmF5KGtleU9yQXJyYXkpID8ga2V5T3JBcnJheSA6IFtrZXlPckFycmF5XQogICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRlbC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBrZXkgPSBkZWxbaV0ua2V5ID8gZGVsW2ldLmtleSA6IGRlbFtpXQogICAgICAgICAgICAgICAgdmFyIHdoZXJlID0gdGhpcy5pbmRleE9mKHRoaXMuaW5kZXgsIGtleSkKICAgICAgICAgICAgICAgIGlmICh3aGVyZSA8IDApIGNvbnRpbnVlIC8qIGtleSBub3QgcHJlc2VudCAqLwogICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3RvcmVba2V5XQogICAgICAgICAgICAgICAgdGhpcy5pbmRleC5zcGxpY2Uod2hlcmUsIDEpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGNiKSB0aGlzLmxhbWJkYShjYikuY2FsbCh0aGlzKQogICAgICAgICAgICByZXR1cm4gdGhpcwogICAgICAgIH0sCgogICAgICAgIG51a2U6IGZ1bmN0aW9uIChjYikgewogICAgICAgICAgICB0aGlzLnN0b3JlID0gZGF0YVt0aGlzLm5hbWVdLnN0b3JlID0ge30KICAgICAgICAgICAgdGhpcy5pbmRleCA9IGRhdGFbdGhpcy5uYW1lXS5pbmRleCA9IFtdCiAgICAgICAgICAgIGlmIChjYikgdGhpcy5sYW1iZGEoY2IpLmNhbGwodGhpcykKICAgICAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgICB9CiAgICB9Ci8vLy8vCn0pKCkpOwo7IGJyb3dzZXJpZnlfc2hpbV9fZGVmaW5lX19tb2R1bGVfX2V4cG9ydF9fKHR5cGVvZiBMYXduY2hhaXIgIT0gInVuZGVmaW5lZCIgPyBMYXduY2hhaXIgOiB3aW5kb3cuTGF3bmNoYWlyKTsKCn0pLmNhbGwoZ2xvYmFsLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uIGRlZmluZUV4cG9ydChleCkgeyBtb2R1bGUuZXhwb3J0cyA9IGV4OyB9KTsKCn0pLmNhbGwodGhpcyx0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKfSx7fV0sMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKO19fYnJvd3NlcmlmeV9zaGltX3JlcXVpcmVfXz1fZGVyZXFfOyhmdW5jdGlvbiBicm93c2VyaWZ5U2hpbShtb2R1bGUsIGV4cG9ydHMsIF9kZXJlcV8sIGRlZmluZSwgYnJvd3NlcmlmeV9zaGltX19kZWZpbmVfX21vZHVsZV9fZXhwb3J0X18pIHsKLyoKIGpzb24yLmpzCiAyMDExLTEwLTE5CgogUHVibGljIERvbWFpbi4KCiBOTyBXQVJSQU5UWSBFWFBSRVNTRUQgT1IgSU1QTElFRC4gVVNFIEFUIFlPVVIgT1dOIFJJU0suCgogU2VlIGh0dHA6Ly93d3cuSlNPTi5vcmcvanMuaHRtbAoKCiBUaGlzIGNvZGUgc2hvdWxkIGJlIG1pbmlmaWVkIGJlZm9yZSBkZXBsb3ltZW50LgogU2VlIGh0dHA6Ly9qYXZhc2NyaXB0LmNyb2NrZm9yZC5jb20vanNtaW4uaHRtbAoKIFVTRSBZT1VSIE9XTiBDT1BZLiBJVCBJUyBFWFRSRU1FTFkgVU5XSVNFIFRPIExPQUQgQ09ERSBGUk9NIFNFUlZFUlMgWU9VIERPCiBOT1QgQ09OVFJPTC4KCgogVGhpcyBmaWxlIGNyZWF0ZXMgYSBnbG9iYWwgSlNPTiBvYmplY3QgY29udGFpbmluZyB0d28gbWV0aG9kczogc3RyaW5naWZ5CiBhbmQgcGFyc2UuCgogSlNPTi5zdHJpbmdpZnkodmFsdWUsIHJlcGxhY2VyLCBzcGFjZSkKIHZhbHVlICAgICAgIGFueSBKYXZhU2NyaXB0IHZhbHVlLCB1c3VhbGx5IGFuIG9iamVjdCBvciBhcnJheS4KCiByZXBsYWNlciAgICBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgdGhhdCBkZXRlcm1pbmVzIGhvdyBvYmplY3QKIHZhbHVlcyBhcmUgc3RyaW5naWZpZWQgZm9yIG9iamVjdHMuIEl0IGNhbiBiZSBhCiBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdHJpbmdzLgoKIHNwYWNlICAgICAgIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHNwZWNpZmllcyB0aGUgaW5kZW50YXRpb24KIG9mIG5lc3RlZCBzdHJ1Y3R1cmVzLiBJZiBpdCBpcyBvbWl0dGVkLCB0aGUgdGV4dCB3aWxsCiBiZSBwYWNrZWQgd2l0aG91dCBleHRyYSB3aGl0ZXNwYWNlLiBJZiBpdCBpcyBhIG51bWJlciwKIGl0IHdpbGwgc3BlY2lmeSB0aGUgbnVtYmVyIG9mIHNwYWNlcyB0byBpbmRlbnQgYXQgZWFjaAogbGV2ZWwuIElmIGl0IGlzIGEgc3RyaW5nIChzdWNoIGFzICdcdCcgb3IgJyZuYnNwOycpLAogaXQgY29udGFpbnMgdGhlIGNoYXJhY3RlcnMgdXNlZCB0byBpbmRlbnQgYXQgZWFjaCBsZXZlbC4KCiBUaGlzIG1ldGhvZCBwcm9kdWNlcyBhIEpTT04gdGV4dCBmcm9tIGEgSmF2YVNjcmlwdCB2YWx1ZS4KCiBXaGVuIGFuIG9iamVjdCB2YWx1ZSBpcyBmb3VuZCwgaWYgdGhlIG9iamVjdCBjb250YWlucyBhIHRvSlNPTgogbWV0aG9kLCBpdHMgdG9KU09OIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCBhbmQgdGhlIHJlc3VsdCB3aWxsIGJlCiBzdHJpbmdpZmllZC4gQSB0b0pTT04gbWV0aG9kIGRvZXMgbm90IHNlcmlhbGl6ZTogaXQgcmV0dXJucyB0aGUKIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBuYW1lL3ZhbHVlIHBhaXIgdGhhdCBzaG91bGQgYmUgc2VyaWFsaXplZCwKIG9yIHVuZGVmaW5lZCBpZiBub3RoaW5nIHNob3VsZCBiZSBzZXJpYWxpemVkLiBUaGUgdG9KU09OIG1ldGhvZAogd2lsbCBiZSBwYXNzZWQgdGhlIGtleSBhc3NvY2lhdGVkIHdpdGggdGhlIHZhbHVlLCBhbmQgdGhpcyB3aWxsIGJlCiBib3VuZCB0byB0aGUgdmFsdWUKCiBGb3IgZXhhbXBsZSwgdGhpcyB3b3VsZCBzZXJpYWxpemUgRGF0ZXMgYXMgSVNPIHN0cmluZ3MuCgogRGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGtleSkgewogZnVuY3Rpb24gZihuKSB7CiAvLyBGb3JtYXQgaW50ZWdlcnMgdG8gaGF2ZSBhdCBsZWFzdCB0d28gZGlnaXRzLgogcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4gOiBuOwogfQoKIHJldHVybiB0aGlzLmdldFVUQ0Z1bGxZZWFyKCkgICArICctJyArCiBmKHRoaXMuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsKIGYodGhpcy5nZXRVVENEYXRlKCkpICAgICAgKyAnVCcgKwogZih0aGlzLmdldFVUQ0hvdXJzKCkpICAgICArICc6JyArCiBmKHRoaXMuZ2V0VVRDTWludXRlcygpKSAgICsgJzonICsKIGYodGhpcy5nZXRVVENTZWNvbmRzKCkpICAgKyAnWic7CiB9OwoKIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbCByZXBsYWNlciBtZXRob2QuIEl0IHdpbGwgYmUgcGFzc2VkIHRoZQoga2V5IGFuZCB2YWx1ZSBvZiBlYWNoIG1lbWJlciwgd2l0aCB0aGlzIGJvdW5kIHRvIHRoZSBjb250YWluaW5nCiBvYmplY3QuIFRoZSB2YWx1ZSB0aGF0IGlzIHJldHVybmVkIGZyb20geW91ciBtZXRob2Qgd2lsbCBiZQogc2VyaWFsaXplZC4gSWYgeW91ciBtZXRob2QgcmV0dXJucyB1bmRlZmluZWQsIHRoZW4gdGhlIG1lbWJlciB3aWxsCiBiZSBleGNsdWRlZCBmcm9tIHRoZSBzZXJpYWxpemF0aW9uLgoKIElmIHRoZSByZXBsYWNlciBwYXJhbWV0ZXIgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgdGhlbiBpdCB3aWxsIGJlCiB1c2VkIHRvIHNlbGVjdCB0aGUgbWVtYmVycyB0byBiZSBzZXJpYWxpemVkLiBJdCBmaWx0ZXJzIHRoZSByZXN1bHRzCiBzdWNoIHRoYXQgb25seSBtZW1iZXJzIHdpdGgga2V5cyBsaXN0ZWQgaW4gdGhlIHJlcGxhY2VyIGFycmF5IGFyZQogc3RyaW5naWZpZWQuCgogVmFsdWVzIHRoYXQgZG8gbm90IGhhdmUgSlNPTiByZXByZXNlbnRhdGlvbnMsIHN1Y2ggYXMgdW5kZWZpbmVkIG9yCiBmdW5jdGlvbnMsIHdpbGwgbm90IGJlIHNlcmlhbGl6ZWQuIFN1Y2ggdmFsdWVzIGluIG9iamVjdHMgd2lsbCBiZQogZHJvcHBlZDsgaW4gYXJyYXlzIHRoZXkgd2lsbCBiZSByZXBsYWNlZCB3aXRoIG51bGwuIFlvdSBjYW4gdXNlCiBhIHJlcGxhY2VyIGZ1bmN0aW9uIHRvIHJlcGxhY2UgdGhvc2Ugd2l0aCBKU09OIHZhbHVlcy4KIEpTT04uc3RyaW5naWZ5KHVuZGVmaW5lZCkgcmV0dXJucyB1bmRlZmluZWQuCgogVGhlIG9wdGlvbmFsIHNwYWNlIHBhcmFtZXRlciBwcm9kdWNlcyBhIHN0cmluZ2lmaWNhdGlvbiBvZiB0aGUKIHZhbHVlIHRoYXQgaXMgZmlsbGVkIHdpdGggbGluZSBicmVha3MgYW5kIGluZGVudGF0aW9uIHRvIG1ha2UgaXQKIGVhc2llciB0byByZWFkLgoKIElmIHRoZSBzcGFjZSBwYXJhbWV0ZXIgaXMgYSBub24tZW1wdHkgc3RyaW5nLCB0aGVuIHRoYXQgc3RyaW5nIHdpbGwKIGJlIHVzZWQgZm9yIGluZGVudGF0aW9uLiBJZiB0aGUgc3BhY2UgcGFyYW1ldGVyIGlzIGEgbnVtYmVyLCB0aGVuCiB0aGUgaW5kZW50YXRpb24gd2lsbCBiZSB0aGF0IG1hbnkgc3BhY2VzLgoKIEV4YW1wbGU6CgogdGV4dCA9IEpTT04uc3RyaW5naWZ5KFsnZScsIHtwbHVyaWJ1czogJ3VudW0nfV0pOwogLy8gdGV4dCBpcyAnWyJlIix7InBsdXJpYnVzIjoidW51bSJ9XScKCgogdGV4dCA9IEpTT04uc3RyaW5naWZ5KFsnZScsIHtwbHVyaWJ1czogJ3VudW0nfV0sIG51bGwsICdcdCcpOwogLy8gdGV4dCBpcyAnW1xuXHQiZSIsXG5cdHtcblx0XHQicGx1cmlidXMiOiAidW51bSJcblx0fVxuXScKCiB0ZXh0ID0gSlNPTi5zdHJpbmdpZnkoW25ldyBEYXRlKCldLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogcmV0dXJuIHRoaXNba2V5XSBpbnN0YW5jZW9mIERhdGUgPwogJ0RhdGUoJyArIHRoaXNba2V5XSArICcpJyA6IHZhbHVlOwogfSk7CiAvLyB0ZXh0IGlzICdbIkRhdGUoLS0tY3VycmVudCB0aW1lLS0tKSJdJwoKCiBKU09OLnBhcnNlKHRleHQsIHJldml2ZXIpCiBUaGlzIG1ldGhvZCBwYXJzZXMgYSBKU09OIHRleHQgdG8gcHJvZHVjZSBhbiBvYmplY3Qgb3IgYXJyYXkuCiBJdCBjYW4gdGhyb3cgYSBTeW50YXhFcnJvciBleGNlcHRpb24uCgogVGhlIG9wdGlvbmFsIHJldml2ZXIgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gdGhhdCBjYW4gZmlsdGVyIGFuZAogdHJhbnNmb3JtIHRoZSByZXN1bHRzLiBJdCByZWNlaXZlcyBlYWNoIG9mIHRoZSBrZXlzIGFuZCB2YWx1ZXMsCiBhbmQgaXRzIHJldHVybiB2YWx1ZSBpcyB1c2VkIGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIHZhbHVlLgogSWYgaXQgcmV0dXJucyB3aGF0IGl0IHJlY2VpdmVkLCB0aGVuIHRoZSBzdHJ1Y3R1cmUgaXMgbm90IG1vZGlmaWVkLgogSWYgaXQgcmV0dXJucyB1bmRlZmluZWQgdGhlbiB0aGUgbWVtYmVyIGlzIGRlbGV0ZWQuCgogRXhhbXBsZToKCiAvLyBQYXJzZSB0aGUgdGV4dC4gVmFsdWVzIHRoYXQgbG9vayBsaWtlIElTTyBkYXRlIHN0cmluZ3Mgd2lsbAogLy8gYmUgY29udmVydGVkIHRvIERhdGUgb2JqZWN0cy4KCiBteURhdGEgPSBKU09OLnBhcnNlKHRleHQsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiB2YXIgYTsKIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7CiBhID0KIC9eKFxkezR9KS0oXGR7Mn0pLShcZHsyfSlUKFxkezJ9KTooXGR7Mn0pOihcZHsyfSg/OlwuXGQqKT8pWiQvLmV4ZWModmFsdWUpOwogaWYgKGEpIHsKIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQygrYVsxXSwgK2FbMl0gLSAxLCArYVszXSwgK2FbNF0sCiArYVs1XSwgK2FbNl0pKTsKIH0KIH0KIHJldHVybiB2YWx1ZTsKIH0pOwoKIG15RGF0YSA9IEpTT04ucGFyc2UoJ1siRGF0ZSgwOS8wOS8yMDAxKSJdJywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKIHZhciBkOwogaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYKIHZhbHVlLnNsaWNlKDAsIDUpID09PSAnRGF0ZSgnICYmCiB2YWx1ZS5zbGljZSgtMSkgPT09ICcpJykgewogZCA9IG5ldyBEYXRlKHZhbHVlLnNsaWNlKDUsIC0xKSk7CiBpZiAoZCkgewogcmV0dXJuIGQ7CiB9CiB9CiByZXR1cm4gdmFsdWU7CiB9KTsKCgogVGhpcyBpcyBhIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbi4gWW91IGFyZSBmcmVlIHRvIGNvcHksIG1vZGlmeSwgb3IKIHJlZGlzdHJpYnV0ZS4KICovCgovKmpzbGludCBldmlsOiB0cnVlLCByZWdleHA6IHRydWUgKi8KCi8qbWVtYmVycyAiIiwgIlxiIiwgIlx0IiwgIlxuIiwgIlxmIiwgIlxyIiwgIlwiIiwgSlNPTiwgIlxcIiwgYXBwbHksCiBjYWxsLCBjaGFyQ29kZUF0LCBnZXRVVENEYXRlLCBnZXRVVENGdWxsWWVhciwgZ2V0VVRDSG91cnMsCiBnZXRVVENNaW51dGVzLCBnZXRVVENNb250aCwgZ2V0VVRDU2Vjb25kcywgaGFzT3duUHJvcGVydHksIGpvaW4sCiBsYXN0SW5kZXgsIGxlbmd0aCwgcGFyc2UsIHByb3RvdHlwZSwgcHVzaCwgcmVwbGFjZSwgc2xpY2UsIHN0cmluZ2lmeSwKIHRlc3QsIHRvSlNPTiwgdG9TdHJpbmcsIHZhbHVlT2YKICovCgoKLy8gQ3JlYXRlIGEgSlNPTiBvYmplY3Qgb25seSBpZiBvbmUgZG9lcyBub3QgYWxyZWFkeSBleGlzdC4gV2UgY3JlYXRlIHRoZQovLyBtZXRob2RzIGluIGEgY2xvc3VyZSB0byBhdm9pZCBjcmVhdGluZyBnbG9iYWwgdmFyaWFibGVzLgoKdmFyIEpTT047CmlmICghSlNPTikgewogIEpTT04gPSB7fTsKfQoKKGZ1bmN0aW9uICgpIHsKICAndXNlIHN0cmljdCc7CgogIGZ1bmN0aW9uIGYobikgewogICAgLy8gRm9ybWF0IGludGVnZXJzIHRvIGhhdmUgYXQgbGVhc3QgdHdvIGRpZ2l0cy4KICAgIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuIDogbjsKICB9CgogIGlmICh0eXBlb2YgRGF0ZS5wcm90b3R5cGUudG9KU09OICE9PSAnZnVuY3Rpb24nKSB7CgogICAgRGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGtleSkgewoKICAgICAgcmV0dXJuIGlzRmluaXRlKHRoaXMudmFsdWVPZigpKQogICAgICAgID8gdGhpcy5nZXRVVENGdWxsWWVhcigpICAgICArICctJyArCiAgICAgICAgZih0aGlzLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArCiAgICAgICAgZih0aGlzLmdldFVUQ0RhdGUoKSkgICAgICArICdUJyArCiAgICAgICAgZih0aGlzLmdldFVUQ0hvdXJzKCkpICAgICArICc6JyArCiAgICAgICAgZih0aGlzLmdldFVUQ01pbnV0ZXMoKSkgICArICc6JyArCiAgICAgICAgZih0aGlzLmdldFVUQ1NlY29uZHMoKSkgICArICdaJwogICAgICAgIDogbnVsbDsKICAgIH07CgogICAgU3RyaW5nLnByb3RvdHlwZS50b0pTT04gICAgICA9CiAgICAgIE51bWJlci5wcm90b3R5cGUudG9KU09OICA9CiAgICAgICAgQm9vbGVhbi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpOwogICAgICAgIH07CiAgfQoKICB2YXIgY3ggPSAvW1x1MDAwMFx1MDBhZFx1MDYwMC1cdTA2MDRcdTA3MGZcdTE3YjRcdTE3YjVcdTIwMGMtXHUyMDBmXHUyMDI4LVx1MjAyZlx1MjA2MC1cdTIwNmZcdWZlZmZcdWZmZjAtXHVmZmZmXS9nLAogICAgZXNjYXBhYmxlID0gL1tcXFwiXHgwMC1ceDFmXHg3Zi1ceDlmXHUwMGFkXHUwNjAwLVx1MDYwNFx1MDcwZlx1MTdiNFx1MTdiNVx1MjAwYy1cdTIwMGZcdTIwMjgtXHUyMDJmXHUyMDYwLVx1MjA2Zlx1ZmVmZlx1ZmZmMC1cdWZmZmZdL2csCiAgICBnYXAsCiAgICBpbmRlbnQsCiAgICBtZXRhID0geyAgICAvLyB0YWJsZSBvZiBjaGFyYWN0ZXIgc3Vic3RpdHV0aW9ucwogICAgICAnXGInOiAnXFxiJywKICAgICAgJ1x0JzogJ1xcdCcsCiAgICAgICdcbic6ICdcXG4nLAogICAgICAnXGYnOiAnXFxmJywKICAgICAgJ1xyJzogJ1xccicsCiAgICAgICciJyA6ICdcXCInLAogICAgICAnXFwnOiAnXFxcXCcKICAgIH0sCiAgICByZXA7CgoKICBmdW5jdGlvbiBxdW90ZShzdHJpbmcpIHsKCi8vIElmIHRoZSBzdHJpbmcgY29udGFpbnMgbm8gY29udHJvbCBjaGFyYWN0ZXJzLCBubyBxdW90ZSBjaGFyYWN0ZXJzLCBhbmQgbm8KLy8gYmFja3NsYXNoIGNoYXJhY3RlcnMsIHRoZW4gd2UgY2FuIHNhZmVseSBzbGFwIHNvbWUgcXVvdGVzIGFyb3VuZCBpdC4KLy8gT3RoZXJ3aXNlIHdlIG11c3QgYWxzbyByZXBsYWNlIHRoZSBvZmZlbmRpbmcgY2hhcmFjdGVycyB3aXRoIHNhZmUgZXNjYXBlCi8vIHNlcXVlbmNlcy4KCiAgICBlc2NhcGFibGUubGFzdEluZGV4ID0gMDsKICAgIHJldHVybiBlc2NhcGFibGUudGVzdChzdHJpbmcpID8gJyInICsgc3RyaW5nLnJlcGxhY2UoZXNjYXBhYmxlLCBmdW5jdGlvbiAoYSkgewogICAgICB2YXIgYyA9IG1ldGFbYV07CiAgICAgIHJldHVybiB0eXBlb2YgYyA9PT0gJ3N0cmluZycKICAgICAgICA/IGMKICAgICAgICA6ICdcXHUnICsgKCcwMDAwJyArIGEuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KTsKICAgIH0pICsgJyInIDogJyInICsgc3RyaW5nICsgJyInOwogIH0KCgogIGZ1bmN0aW9uIHN0cihrZXksIGhvbGRlcikgewoKLy8gUHJvZHVjZSBhIHN0cmluZyBmcm9tIGhvbGRlcltrZXldLgoKICAgIHZhciBpLCAgICAgICAgICAvLyBUaGUgbG9vcCBjb3VudGVyLgogICAgICBrLCAgICAgICAgICAvLyBUaGUgbWVtYmVyIGtleS4KICAgICAgdiwgICAgICAgICAgLy8gVGhlIG1lbWJlciB2YWx1ZS4KICAgICAgbGVuZ3RoLAogICAgICBtaW5kID0gZ2FwLAogICAgICBwYXJ0aWFsLAogICAgICB2YWx1ZSA9IGhvbGRlcltrZXldOwoKLy8gSWYgdGhlIHZhbHVlIGhhcyBhIHRvSlNPTiBtZXRob2QsIGNhbGwgaXQgdG8gb2J0YWluIGEgcmVwbGFjZW1lbnQgdmFsdWUuCgogICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYKICAgICAgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihrZXkpOwogICAgfQoKLy8gSWYgd2Ugd2VyZSBjYWxsZWQgd2l0aCBhIHJlcGxhY2VyIGZ1bmN0aW9uLCB0aGVuIGNhbGwgdGhlIHJlcGxhY2VyIHRvCi8vIG9idGFpbiBhIHJlcGxhY2VtZW50IHZhbHVlLgoKICAgIGlmICh0eXBlb2YgcmVwID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHZhbHVlID0gcmVwLmNhbGwoaG9sZGVyLCBrZXksIHZhbHVlKTsKICAgIH0KCi8vIFdoYXQgaGFwcGVucyBuZXh0IGRlcGVuZHMgb24gdGhlIHZhbHVlJ3MgdHlwZS4KCiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkgewogICAgICBjYXNlICdzdHJpbmcnOgogICAgICAgIHJldHVybiBxdW90ZSh2YWx1ZSk7CgogICAgICBjYXNlICdudW1iZXInOgoKLy8gSlNPTiBudW1iZXJzIG11c3QgYmUgZmluaXRlLiBFbmNvZGUgbm9uLWZpbml0ZSBudW1iZXJzIGFzIG51bGwuCgogICAgICAgIHJldHVybiBpc0Zpbml0ZSh2YWx1ZSkgPyBTdHJpbmcodmFsdWUpIDogJ251bGwnOwoKICAgICAgY2FzZSAnYm9vbGVhbic6CiAgICAgIGNhc2UgJ251bGwnOgoKLy8gSWYgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbiBvciBudWxsLCBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nLiBOb3RlOgovLyB0eXBlb2YgbnVsbCBkb2VzIG5vdCBwcm9kdWNlICdudWxsJy4gVGhlIGNhc2UgaXMgaW5jbHVkZWQgaGVyZSBpbgovLyB0aGUgcmVtb3RlIGNoYW5jZSB0aGF0IHRoaXMgZ2V0cyBmaXhlZCBzb21lZGF5LgoKICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTsKCi8vIElmIHRoZSB0eXBlIGlzICdvYmplY3QnLCB3ZSBtaWdodCBiZSBkZWFsaW5nIHdpdGggYW4gb2JqZWN0IG9yIGFuIGFycmF5IG9yCi8vIG51bGwuCgogICAgICBjYXNlICdvYmplY3QnOgoKLy8gRHVlIHRvIGEgc3BlY2lmaWNhdGlvbiBibHVuZGVyIGluIEVDTUFTY3JpcHQsIHR5cGVvZiBudWxsIGlzICdvYmplY3QnLAovLyBzbyB3YXRjaCBvdXQgZm9yIHRoYXQgY2FzZS4KCiAgICAgICAgaWYgKCF2YWx1ZSkgewogICAgICAgICAgcmV0dXJuICdudWxsJzsKICAgICAgICB9CgovLyBNYWtlIGFuIGFycmF5IHRvIGhvbGQgdGhlIHBhcnRpYWwgcmVzdWx0cyBvZiBzdHJpbmdpZnlpbmcgdGhpcyBvYmplY3QgdmFsdWUuCgogICAgICAgIGdhcCArPSBpbmRlbnQ7CiAgICAgICAgcGFydGlhbCA9IFtdOwoKLy8gSXMgdGhlIHZhbHVlIGFuIGFycmF5PwoKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScpIHsKCi8vIFRoZSB2YWx1ZSBpcyBhbiBhcnJheS4gU3RyaW5naWZ5IGV2ZXJ5IGVsZW1lbnQuIFVzZSBudWxsIGFzIGEgcGxhY2Vob2xkZXIKLy8gZm9yIG5vbi1KU09OIHZhbHVlcy4KCiAgICAgICAgICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgcGFydGlhbFtpXSA9IHN0cihpLCB2YWx1ZSkgfHwgJ251bGwnOwogICAgICAgICAgfQoKLy8gSm9pbiBhbGwgb2YgdGhlIGVsZW1lbnRzIHRvZ2V0aGVyLCBzZXBhcmF0ZWQgd2l0aCBjb21tYXMsIGFuZCB3cmFwIHRoZW0gaW4KLy8gYnJhY2tldHMuCgogICAgICAgICAgdiA9IHBhcnRpYWwubGVuZ3RoID09PSAwCiAgICAgICAgICAgID8gJ1tdJwogICAgICAgICAgICA6IGdhcAogICAgICAgICAgICA/ICdbXG4nICsgZ2FwICsgcGFydGlhbC5qb2luKCcsXG4nICsgZ2FwKSArICdcbicgKyBtaW5kICsgJ10nCiAgICAgICAgICAgIDogJ1snICsgcGFydGlhbC5qb2luKCcsJykgKyAnXSc7CiAgICAgICAgICBnYXAgPSBtaW5kOwogICAgICAgICAgcmV0dXJuIHY7CiAgICAgICAgfQoKLy8gSWYgdGhlIHJlcGxhY2VyIGlzIGFuIGFycmF5LCB1c2UgaXQgdG8gc2VsZWN0IHRoZSBtZW1iZXJzIHRvIGJlIHN0cmluZ2lmaWVkLgoKICAgICAgICBpZiAocmVwICYmIHR5cGVvZiByZXAgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICBsZW5ndGggPSByZXAubGVuZ3RoOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVwW2ldID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgIGsgPSByZXBbaV07CiAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSk7CiAgICAgICAgICAgICAgaWYgKHYpIHsKICAgICAgICAgICAgICAgIHBhcnRpYWwucHVzaChxdW90ZShrKSArIChnYXAgPyAnOiAnIDogJzonKSArIHYpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CgovLyBPdGhlcndpc2UsIGl0ZXJhdGUgdGhyb3VnaCBhbGwgb2YgdGhlIGtleXMgaW4gdGhlIG9iamVjdC4KCiAgICAgICAgICBmb3IgKGsgaW4gdmFsdWUpIHsKICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHsKICAgICAgICAgICAgICB2ID0gc3RyKGssIHZhbHVlKTsKICAgICAgICAgICAgICBpZiAodikgewogICAgICAgICAgICAgICAgcGFydGlhbC5wdXNoKHF1b3RlKGspICsgKGdhcCA/ICc6ICcgOiAnOicpICsgdik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKLy8gSm9pbiBhbGwgb2YgdGhlIG1lbWJlciB0ZXh0cyB0b2dldGhlciwgc2VwYXJhdGVkIHdpdGggY29tbWFzLAovLyBhbmQgd3JhcCB0aGVtIGluIGJyYWNlcy4KCiAgICAgICAgdiA9IHBhcnRpYWwubGVuZ3RoID09PSAwCiAgICAgICAgICA/ICd7fScKICAgICAgICAgIDogZ2FwCiAgICAgICAgICA/ICd7XG4nICsgZ2FwICsgcGFydGlhbC5qb2luKCcsXG4nICsgZ2FwKSArICdcbicgKyBtaW5kICsgJ30nCiAgICAgICAgICA6ICd7JyArIHBhcnRpYWwuam9pbignLCcpICsgJ30nOwogICAgICAgIGdhcCA9IG1pbmQ7CiAgICAgICAgcmV0dXJuIHY7CiAgICB9CiAgfQoKLy8gSWYgdGhlIEpTT04gb2JqZWN0IGRvZXMgbm90IHlldCBoYXZlIGEgc3RyaW5naWZ5IG1ldGhvZCwgZ2l2ZSBpdCBvbmUuCgogIGlmICh0eXBlb2YgSlNPTi5zdHJpbmdpZnkgIT09ICdmdW5jdGlvbicpIHsKICAgIEpTT04uc3RyaW5naWZ5ID0gZnVuY3Rpb24gKHZhbHVlLCByZXBsYWNlciwgc3BhY2UpIHsKCi8vIFRoZSBzdHJpbmdpZnkgbWV0aG9kIHRha2VzIGEgdmFsdWUgYW5kIGFuIG9wdGlvbmFsIHJlcGxhY2VyLCBhbmQgYW4gb3B0aW9uYWwKLy8gc3BhY2UgcGFyYW1ldGVyLCBhbmQgcmV0dXJucyBhIEpTT04gdGV4dC4gVGhlIHJlcGxhY2VyIGNhbiBiZSBhIGZ1bmN0aW9uCi8vIHRoYXQgY2FuIHJlcGxhY2UgdmFsdWVzLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgd2lsbCBzZWxlY3QgdGhlIGtleXMuCi8vIEEgZGVmYXVsdCByZXBsYWNlciBtZXRob2QgY2FuIGJlIHByb3ZpZGVkLiBVc2Ugb2YgdGhlIHNwYWNlIHBhcmFtZXRlciBjYW4KLy8gcHJvZHVjZSB0ZXh0IHRoYXQgaXMgbW9yZSBlYXNpbHkgcmVhZGFibGUuCgogICAgICB2YXIgaTsKICAgICAgZ2FwID0gJyc7CiAgICAgIGluZGVudCA9ICcnOwoKLy8gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIG51bWJlciwgbWFrZSBhbiBpbmRlbnQgc3RyaW5nIGNvbnRhaW5pbmcgdGhhdAovLyBtYW55IHNwYWNlcy4KCiAgICAgIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdudW1iZXInKSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNwYWNlOyBpICs9IDEpIHsKICAgICAgICAgIGluZGVudCArPSAnICc7CiAgICAgICAgfQoKLy8gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIHN0cmluZywgaXQgd2lsbCBiZSB1c2VkIGFzIHRoZSBpbmRlbnQgc3RyaW5nLgoKICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgaW5kZW50ID0gc3BhY2U7CiAgICAgIH0KCi8vIElmIHRoZXJlIGlzIGEgcmVwbGFjZXIsIGl0IG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBhcnJheS4KLy8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvci4KCiAgICAgIHJlcCA9IHJlcGxhY2VyOwogICAgICBpZiAocmVwbGFjZXIgJiYgdHlwZW9mIHJlcGxhY2VyICE9PSAnZnVuY3Rpb24nICYmCiAgICAgICAgKHR5cGVvZiByZXBsYWNlciAhPT0gJ29iamVjdCcgfHwKICAgICAgICAgIHR5cGVvZiByZXBsYWNlci5sZW5ndGggIT09ICdudW1iZXInKSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignSlNPTi5zdHJpbmdpZnknKTsKICAgICAgfQoKLy8gTWFrZSBhIGZha2Ugcm9vdCBvYmplY3QgY29udGFpbmluZyBvdXIgdmFsdWUgdW5kZXIgdGhlIGtleSBvZiAnJy4KLy8gUmV0dXJuIHRoZSByZXN1bHQgb2Ygc3RyaW5naWZ5aW5nIHRoZSB2YWx1ZS4KCiAgICAgIHJldHVybiBzdHIoJycsIHsnJzogdmFsdWV9KTsKICAgIH07CiAgfQoKCi8vIElmIHRoZSBKU09OIG9iamVjdCBkb2VzIG5vdCB5ZXQgaGF2ZSBhIHBhcnNlIG1ldGhvZCwgZ2l2ZSBpdCBvbmUuCgogIGlmICh0eXBlb2YgSlNPTi5wYXJzZSAhPT0gJ2Z1bmN0aW9uJykgewogICAgSlNPTi5wYXJzZSA9IGZ1bmN0aW9uICh0ZXh0LCByZXZpdmVyKSB7CgovLyBUaGUgcGFyc2UgbWV0aG9kIHRha2VzIGEgdGV4dCBhbmQgYW4gb3B0aW9uYWwgcmV2aXZlciBmdW5jdGlvbiwgYW5kIHJldHVybnMKLy8gYSBKYXZhU2NyaXB0IHZhbHVlIGlmIHRoZSB0ZXh0IGlzIGEgdmFsaWQgSlNPTiB0ZXh0LgoKICAgICAgdmFyIGo7CgogICAgICBmdW5jdGlvbiB3YWxrKGhvbGRlciwga2V5KSB7CgovLyBUaGUgd2FsayBtZXRob2QgaXMgdXNlZCB0byByZWN1cnNpdmVseSB3YWxrIHRoZSByZXN1bHRpbmcgc3RydWN0dXJlIHNvCi8vIHRoYXQgbW9kaWZpY2F0aW9ucyBjYW4gYmUgbWFkZS4KCiAgICAgICAgdmFyIGssIHYsIHZhbHVlID0gaG9sZGVyW2tleV07CiAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgIGZvciAoayBpbiB2YWx1ZSkgewogICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrKSkgewogICAgICAgICAgICAgIHYgPSB3YWxrKHZhbHVlLCBrKTsKICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICB2YWx1ZVtrXSA9IHY7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtrXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldml2ZXIuY2FsbChob2xkZXIsIGtleSwgdmFsdWUpOwogICAgICB9CgoKLy8gUGFyc2luZyBoYXBwZW5zIGluIGZvdXIgc3RhZ2VzLiBJbiB0aGUgZmlyc3Qgc3RhZ2UsIHdlIHJlcGxhY2UgY2VydGFpbgovLyBVbmljb2RlIGNoYXJhY3RlcnMgd2l0aCBlc2NhcGUgc2VxdWVuY2VzLiBKYXZhU2NyaXB0IGhhbmRsZXMgbWFueSBjaGFyYWN0ZXJzCi8vIGluY29ycmVjdGx5LCBlaXRoZXIgc2lsZW50bHkgZGVsZXRpbmcgdGhlbSwgb3IgdHJlYXRpbmcgdGhlbSBhcyBsaW5lIGVuZGluZ3MuCgogICAgICB0ZXh0ID0gU3RyaW5nKHRleHQpOwogICAgICBjeC5sYXN0SW5kZXggPSAwOwogICAgICBpZiAoY3gudGVzdCh0ZXh0KSkgewogICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoY3gsIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICByZXR1cm4gJ1xcdScgKwogICAgICAgICAgICAoJzAwMDAnICsgYS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpOwogICAgICAgIH0pOwogICAgICB9CgovLyBJbiB0aGUgc2Vjb25kIHN0YWdlLCB3ZSBydW4gdGhlIHRleHQgYWdhaW5zdCByZWd1bGFyIGV4cHJlc3Npb25zIHRoYXQgbG9vawovLyBmb3Igbm9uLUpTT04gcGF0dGVybnMuIFdlIGFyZSBlc3BlY2lhbGx5IGNvbmNlcm5lZCB3aXRoICcoKScgYW5kICduZXcnCi8vIGJlY2F1c2UgdGhleSBjYW4gY2F1c2UgaW52b2NhdGlvbiwgYW5kICc9JyBiZWNhdXNlIGl0IGNhbiBjYXVzZSBtdXRhdGlvbi4KLy8gQnV0IGp1c3QgdG8gYmUgc2FmZSwgd2Ugd2FudCB0byByZWplY3QgYWxsIHVuZXhwZWN0ZWQgZm9ybXMuCgovLyBXZSBzcGxpdCB0aGUgc2Vjb25kIHN0YWdlIGludG8gNCByZWdleHAgb3BlcmF0aW9ucyBpbiBvcmRlciB0byB3b3JrIGFyb3VuZAovLyBjcmlwcGxpbmcgaW5lZmZpY2llbmNpZXMgaW4gSUUncyBhbmQgU2FmYXJpJ3MgcmVnZXhwIGVuZ2luZXMuIEZpcnN0IHdlCi8vIHJlcGxhY2UgdGhlIEpTT04gYmFja3NsYXNoIHBhaXJzIHdpdGggJ0AnIChhIG5vbi1KU09OIGNoYXJhY3RlcikuIFNlY29uZCwgd2UKLy8gcmVwbGFjZSBhbGwgc2ltcGxlIHZhbHVlIHRva2VucyB3aXRoICddJyBjaGFyYWN0ZXJzLiBUaGlyZCwgd2UgZGVsZXRlIGFsbAovLyBvcGVuIGJyYWNrZXRzIHRoYXQgZm9sbG93IGEgY29sb24gb3IgY29tbWEgb3IgdGhhdCBiZWdpbiB0aGUgdGV4dC4gRmluYWxseSwKLy8gd2UgbG9vayB0byBzZWUgdGhhdCB0aGUgcmVtYWluaW5nIGNoYXJhY3RlcnMgYXJlIG9ubHkgd2hpdGVzcGFjZSBvciAnXScgb3IKLy8gJywnIG9yICc6JyBvciAneycgb3IgJ30nLiBJZiB0aGF0IGlzIHNvLCB0aGVuIHRoZSB0ZXh0IGlzIHNhZmUgZm9yIGV2YWwuCgogICAgICBpZiAoL15bXF0sOnt9XHNdKiQvCiAgICAgICAgLnRlc3QodGV4dC5yZXBsYWNlKC9cXCg/OlsiXFxcL2JmbnJ0XXx1WzAtOWEtZkEtRl17NH0pL2csICdAJykKICAgICAgICAucmVwbGFjZSgvIlteIlxcXG5ccl0qInx0cnVlfGZhbHNlfG51bGx8LT9cZCsoPzpcLlxkKik/KD86W2VFXVsrXC1dP1xkKyk/L2csICddJykKICAgICAgICAucmVwbGFjZSgvKD86Xnw6fCwpKD86XHMqXFspKy9nLCAnJykpKSB7CgovLyBJbiB0aGUgdGhpcmQgc3RhZ2Ugd2UgdXNlIHRoZSBldmFsIGZ1bmN0aW9uIHRvIGNvbXBpbGUgdGhlIHRleHQgaW50byBhCi8vIEphdmFTY3JpcHQgc3RydWN0dXJlLiBUaGUgJ3snIG9wZXJhdG9yIGlzIHN1YmplY3QgdG8gYSBzeW50YWN0aWMgYW1iaWd1aXR5Ci8vIGluIEphdmFTY3JpcHQ6IGl0IGNhbiBiZWdpbiBhIGJsb2NrIG9yIGFuIG9iamVjdCBsaXRlcmFsLiBXZSB3cmFwIHRoZSB0ZXh0Ci8vIGluIHBhcmVucyB0byBlbGltaW5hdGUgdGhlIGFtYmlndWl0eS4KCiAgICAgICAgaiA9IGV2YWwoJygnICsgdGV4dCArICcpJyk7CgovLyBJbiB0aGUgb3B0aW9uYWwgZm91cnRoIHN0YWdlLCB3ZSByZWN1cnNpdmVseSB3YWxrIHRoZSBuZXcgc3RydWN0dXJlLCBwYXNzaW5nCi8vIGVhY2ggbmFtZS92YWx1ZSBwYWlyIHRvIGEgcmV2aXZlciBmdW5jdGlvbiBmb3IgcG9zc2libGUgdHJhbnNmb3JtYXRpb24uCgogICAgICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJwogICAgICAgICAgPyB3YWxrKHsnJzogan0sICcnKQogICAgICAgICAgOiBqOwogICAgICB9CgovLyBJZiB0aGUgdGV4dCBpcyBub3QgSlNPTiBwYXJzZWFibGUsIHRoZW4gYSBTeW50YXhFcnJvciBpcyB0aHJvd24uCgogICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0pTT04ucGFyc2UnKTsKICAgIH07CiAgfQp9KCkpOwo7IGJyb3dzZXJpZnlfc2hpbV9fZGVmaW5lX19tb2R1bGVfX2V4cG9ydF9fKHR5cGVvZiBKU09OICE9ICJ1bmRlZmluZWQiID8gSlNPTiA6IHdpbmRvdy5KU09OKTsKCn0pLmNhbGwoZ2xvYmFsLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uIGRlZmluZUV4cG9ydChleCkgeyBtb2R1bGUuZXhwb3J0cyA9IGV4OyB9KTsKCn0pLmNhbGwodGhpcyx0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKfSx7fV0sNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIENvcHlyaWdodCAoYykgMjAwNSAgVG9tIFd1Ci8vIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCi8vIFNlZSAiTElDRU5TRSIgZm9yIGRldGFpbHMuCgovLyBCYXNpYyBKYXZhU2NyaXB0IEJOIGxpYnJhcnkgLSBzdWJzZXQgdXNlZnVsIGZvciBSU0EgZW5jcnlwdGlvbi4KCi8vIEJpdHMgcGVyIGRpZ2l0CnZhciBkYml0czsKCi8vIEphdmFTY3JpcHQgZW5naW5lIGFuYWx5c2lzCnZhciBjYW5hcnkgPSAweGRlYWRiZWVmY2FmZTsKdmFyIGpfbG0gPSAoKGNhbmFyeSYweGZmZmZmZik9PTB4ZWZjYWZlKTsKCi8vIChwdWJsaWMpIENvbnN0cnVjdG9yCmZ1bmN0aW9uIEJpZ0ludGVnZXIoYSxiLGMpIHsKICBpZihhICE9IG51bGwpCiAgICBpZigibnVtYmVyIiA9PSB0eXBlb2YgYSkgdGhpcy5mcm9tTnVtYmVyKGEsYixjKTsKICAgIGVsc2UgaWYoYiA9PSBudWxsICYmICJzdHJpbmciICE9IHR5cGVvZiBhKSB0aGlzLmZyb21TdHJpbmcoYSwyNTYpOwogICAgZWxzZSB0aGlzLmZyb21TdHJpbmcoYSxiKTsKfQoKLy8gcmV0dXJuIG5ldywgdW5zZXQgQmlnSW50ZWdlcgpmdW5jdGlvbiBuYmkoKSB7IHJldHVybiBuZXcgQmlnSW50ZWdlcihudWxsKTsgfQoKLy8gYW06IENvbXB1dGUgd19qICs9ICh4KnRoaXNfaSksIHByb3BhZ2F0ZSBjYXJyaWVzLAovLyBjIGlzIGluaXRpYWwgY2FycnksIHJldHVybnMgZmluYWwgY2FycnkuCi8vIGMgPCAzKmR2YWx1ZSwgeCA8IDIqZHZhbHVlLCB0aGlzX2kgPCBkdmFsdWUKLy8gV2UgbmVlZCB0byBzZWxlY3QgdGhlIGZhc3Rlc3Qgb25lIHRoYXQgd29ya3MgaW4gdGhpcyBlbnZpcm9ubWVudC4KCi8vIGFtMTogdXNlIGEgc2luZ2xlIG11bHQgYW5kIGRpdmlkZSB0byBnZXQgdGhlIGhpZ2ggYml0cywKLy8gbWF4IGRpZ2l0IGJpdHMgc2hvdWxkIGJlIDI2IGJlY2F1c2UKLy8gbWF4IGludGVybmFsIHZhbHVlID0gMipkdmFsdWVeMi0yKmR2YWx1ZSAoPCAyXjUzKQpmdW5jdGlvbiBhbTEoaSx4LHcsaixjLG4pIHsKICB3aGlsZSgtLW4gPj0gMCkgewogICAgdmFyIHYgPSB4KnRoaXNbaSsrXSt3W2pdK2M7CiAgICBjID0gTWF0aC5mbG9vcih2LzB4NDAwMDAwMCk7CiAgICB3W2orK10gPSB2JjB4M2ZmZmZmZjsKICB9CiAgcmV0dXJuIGM7Cn0KLy8gYW0yIGF2b2lkcyBhIGJpZyBtdWx0LWFuZC1leHRyYWN0IGNvbXBsZXRlbHkuCi8vIE1heCBkaWdpdCBiaXRzIHNob3VsZCBiZSA8PSAzMCBiZWNhdXNlIHdlIGRvIGJpdHdpc2Ugb3BzCi8vIG9uIHZhbHVlcyB1cCB0byAyKmhkdmFsdWVeMi1oZHZhbHVlLTEgKDwgMl4zMSkKZnVuY3Rpb24gYW0yKGkseCx3LGosYyxuKSB7CiAgdmFyIHhsID0geCYweDdmZmYsIHhoID0geD4+MTU7CiAgd2hpbGUoLS1uID49IDApIHsKICAgIHZhciBsID0gdGhpc1tpXSYweDdmZmY7CiAgICB2YXIgaCA9IHRoaXNbaSsrXT4+MTU7CiAgICB2YXIgbSA9IHhoKmwraCp4bDsKICAgIGwgPSB4bCpsKygobSYweDdmZmYpPDwxNSkrd1tqXSsoYyYweDNmZmZmZmZmKTsKICAgIGMgPSAobD4+PjMwKSsobT4+PjE1KSt4aCpoKyhjPj4+MzApOwogICAgd1tqKytdID0gbCYweDNmZmZmZmZmOwogIH0KICByZXR1cm4gYzsKfQovLyBBbHRlcm5hdGVseSwgc2V0IG1heCBkaWdpdCBiaXRzIHRvIDI4IHNpbmNlIHNvbWUKLy8gYnJvd3NlcnMgc2xvdyBkb3duIHdoZW4gZGVhbGluZyB3aXRoIDMyLWJpdCBudW1iZXJzLgpmdW5jdGlvbiBhbTMoaSx4LHcsaixjLG4pIHsKICB2YXIgeGwgPSB4JjB4M2ZmZiwgeGggPSB4Pj4xNDsKICB3aGlsZSgtLW4gPj0gMCkgewogICAgdmFyIGwgPSB0aGlzW2ldJjB4M2ZmZjsKICAgIHZhciBoID0gdGhpc1tpKytdPj4xNDsKICAgIHZhciBtID0geGgqbCtoKnhsOwogICAgbCA9IHhsKmwrKChtJjB4M2ZmZik8PDE0KSt3W2pdK2M7CiAgICBjID0gKGw+PjI4KSsobT4+MTQpK3hoKmg7CiAgICB3W2orK10gPSBsJjB4ZmZmZmZmZjsKICB9CiAgcmV0dXJuIGM7Cn0KaWYoal9sbSAmJiAobmF2aWdhdG9yLmFwcE5hbWUgPT0gIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlciIpKSB7CiAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBhbTI7CiAgZGJpdHMgPSAzMDsKfQplbHNlIGlmKGpfbG0gJiYgKG5hdmlnYXRvci5hcHBOYW1lICE9ICJOZXRzY2FwZSIpKSB7CiAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBhbTE7CiAgZGJpdHMgPSAyNjsKfQplbHNlIHsgLy8gTW96aWxsYS9OZXRzY2FwZSBzZWVtcyB0byBwcmVmZXIgYW0zCiAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBhbTM7CiAgZGJpdHMgPSAyODsKfQoKQmlnSW50ZWdlci5wcm90b3R5cGUuREIgPSBkYml0czsKQmlnSW50ZWdlci5wcm90b3R5cGUuRE0gPSAoKDE8PGRiaXRzKS0xKTsKQmlnSW50ZWdlci5wcm90b3R5cGUuRFYgPSAoMTw8ZGJpdHMpOwoKdmFyIEJJX0ZQID0gNTI7CkJpZ0ludGVnZXIucHJvdG90eXBlLkZWID0gTWF0aC5wb3coMixCSV9GUCk7CkJpZ0ludGVnZXIucHJvdG90eXBlLkYxID0gQklfRlAtZGJpdHM7CkJpZ0ludGVnZXIucHJvdG90eXBlLkYyID0gMipkYml0cy1CSV9GUDsKCi8vIERpZ2l0IGNvbnZlcnNpb25zCnZhciBCSV9STSA9ICIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoiOwp2YXIgQklfUkMgPSBuZXcgQXJyYXkoKTsKdmFyIHJyLHZ2OwpyciA9ICIwIi5jaGFyQ29kZUF0KDApOwpmb3IodnYgPSAwOyB2diA8PSA5OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2OwpyciA9ICJhIi5jaGFyQ29kZUF0KDApOwpmb3IodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2djsKcnIgPSAiQSIuY2hhckNvZGVBdCgwKTsKZm9yKHZ2ID0gMTA7IHZ2IDwgMzY7ICsrdnYpIEJJX1JDW3JyKytdID0gdnY7CgpmdW5jdGlvbiBpbnQyY2hhcihuKSB7IHJldHVybiBCSV9STS5jaGFyQXQobik7IH0KZnVuY3Rpb24gaW50QXQocyxpKSB7CiAgdmFyIGMgPSBCSV9SQ1tzLmNoYXJDb2RlQXQoaSldOwogIHJldHVybiAoYz09bnVsbCk/LTE6YzsKfQoKLy8gKHByb3RlY3RlZCkgY29weSB0aGlzIHRvIHIKZnVuY3Rpb24gYm5wQ29weVRvKHIpIHsKICBmb3IodmFyIGkgPSB0aGlzLnQtMTsgaSA+PSAwOyAtLWkpIHJbaV0gPSB0aGlzW2ldOwogIHIudCA9IHRoaXMudDsKICByLnMgPSB0aGlzLnM7Cn0KCi8vIChwcm90ZWN0ZWQpIHNldCBmcm9tIGludGVnZXIgdmFsdWUgeCwgLURWIDw9IHggPCBEVgpmdW5jdGlvbiBibnBGcm9tSW50KHgpIHsKICB0aGlzLnQgPSAxOwogIHRoaXMucyA9ICh4PDApPy0xOjA7CiAgaWYoeCA+IDApIHRoaXNbMF0gPSB4OwogIGVsc2UgaWYoeCA8IC0xKSB0aGlzWzBdID0geCtEVjsKICBlbHNlIHRoaXMudCA9IDA7Cn0KCi8vIHJldHVybiBiaWdpbnQgaW5pdGlhbGl6ZWQgdG8gdmFsdWUKZnVuY3Rpb24gbmJ2KGkpIHsgdmFyIHIgPSBuYmkoKTsgci5mcm9tSW50KGkpOyByZXR1cm4gcjsgfQoKLy8gKHByb3RlY3RlZCkgc2V0IGZyb20gc3RyaW5nIGFuZCByYWRpeApmdW5jdGlvbiBibnBGcm9tU3RyaW5nKHMsYikgewogIHZhciBrOwogIGlmKGIgPT0gMTYpIGsgPSA0OwogIGVsc2UgaWYoYiA9PSA4KSBrID0gMzsKICBlbHNlIGlmKGIgPT0gMjU2KSBrID0gODsgLy8gYnl0ZSBhcnJheQogIGVsc2UgaWYoYiA9PSAyKSBrID0gMTsKICBlbHNlIGlmKGIgPT0gMzIpIGsgPSA1OwogIGVsc2UgaWYoYiA9PSA0KSBrID0gMjsKICBlbHNlIHsgdGhpcy5mcm9tUmFkaXgocyxiKTsgcmV0dXJuOyB9CiAgdGhpcy50ID0gMDsKICB0aGlzLnMgPSAwOwogIHZhciBpID0gcy5sZW5ndGgsIG1pID0gZmFsc2UsIHNoID0gMDsKICB3aGlsZSgtLWkgPj0gMCkgewogICAgdmFyIHggPSAoaz09OCk/c1tpXSYweGZmOmludEF0KHMsaSk7CiAgICBpZih4IDwgMCkgewogICAgICBpZihzLmNoYXJBdChpKSA9PSAiLSIpIG1pID0gdHJ1ZTsKICAgICAgY29udGludWU7CiAgICB9CiAgICBtaSA9IGZhbHNlOwogICAgaWYoc2ggPT0gMCkKICAgICAgdGhpc1t0aGlzLnQrK10gPSB4OwogICAgZWxzZSBpZihzaCtrID4gdGhpcy5EQikgewogICAgICB0aGlzW3RoaXMudC0xXSB8PSAoeCYoKDE8PCh0aGlzLkRCLXNoKSktMSkpPDxzaDsKICAgICAgdGhpc1t0aGlzLnQrK10gPSAoeD4+KHRoaXMuREItc2gpKTsKICAgIH0KICAgIGVsc2UKICAgICAgdGhpc1t0aGlzLnQtMV0gfD0geDw8c2g7CiAgICBzaCArPSBrOwogICAgaWYoc2ggPj0gdGhpcy5EQikgc2ggLT0gdGhpcy5EQjsKICB9CiAgaWYoayA9PSA4ICYmIChzWzBdJjB4ODApICE9IDApIHsKICAgIHRoaXMucyA9IC0xOwogICAgaWYoc2ggPiAwKSB0aGlzW3RoaXMudC0xXSB8PSAoKDE8PCh0aGlzLkRCLXNoKSktMSk8PHNoOwogIH0KICB0aGlzLmNsYW1wKCk7CiAgaWYobWkpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLHRoaXMpOwp9CgovLyAocHJvdGVjdGVkKSBjbGFtcCBvZmYgZXhjZXNzIGhpZ2ggd29yZHMKZnVuY3Rpb24gYm5wQ2xhbXAoKSB7CiAgdmFyIGMgPSB0aGlzLnMmdGhpcy5ETTsKICB3aGlsZSh0aGlzLnQgPiAwICYmIHRoaXNbdGhpcy50LTFdID09IGMpIC0tdGhpcy50Owp9CgovLyAocHVibGljKSByZXR1cm4gc3RyaW5nIHJlcHJlc2VudGF0aW9uIGluIGdpdmVuIHJhZGl4CmZ1bmN0aW9uIGJuVG9TdHJpbmcoYikgewogIGlmKHRoaXMucyA8IDApIHJldHVybiAiLSIrdGhpcy5uZWdhdGUoKS50b1N0cmluZyhiKTsKICB2YXIgazsKICBpZihiID09IDE2KSBrID0gNDsKICBlbHNlIGlmKGIgPT0gOCkgayA9IDM7CiAgZWxzZSBpZihiID09IDIpIGsgPSAxOwogIGVsc2UgaWYoYiA9PSAzMikgayA9IDU7CiAgZWxzZSBpZihiID09IDQpIGsgPSAyOwogIGVsc2UgcmV0dXJuIHRoaXMudG9SYWRpeChiKTsKICB2YXIga20gPSAoMTw8ayktMSwgZCwgbSA9IGZhbHNlLCByID0gIiIsIGkgPSB0aGlzLnQ7CiAgdmFyIHAgPSB0aGlzLkRCLShpKnRoaXMuREIpJWs7CiAgaWYoaS0tID4gMCkgewogICAgaWYocCA8IHRoaXMuREIgJiYgKGQgPSB0aGlzW2ldPj5wKSA+IDApIHsgbSA9IHRydWU7IHIgPSBpbnQyY2hhcihkKTsgfQogICAgd2hpbGUoaSA+PSAwKSB7CiAgICAgIGlmKHAgPCBrKSB7CiAgICAgICAgZCA9ICh0aGlzW2ldJigoMTw8cCktMSkpPDwoay1wKTsKICAgICAgICBkIHw9IHRoaXNbLS1pXT4+KHArPXRoaXMuREItayk7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgZCA9ICh0aGlzW2ldPj4ocC09aykpJmttOwogICAgICAgIGlmKHAgPD0gMCkgeyBwICs9IHRoaXMuREI7IC0taTsgfQogICAgICB9CiAgICAgIGlmKGQgPiAwKSBtID0gdHJ1ZTsKICAgICAgaWYobSkgciArPSBpbnQyY2hhcihkKTsKICAgIH0KICB9CiAgcmV0dXJuIG0/cjoiMCI7Cn0KCi8vIChwdWJsaWMpIC10aGlzCmZ1bmN0aW9uIGJuTmVnYXRlKCkgeyB2YXIgciA9IG5iaSgpOyBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyxyKTsgcmV0dXJuIHI7IH0KCi8vIChwdWJsaWMpIHx0aGlzfApmdW5jdGlvbiBibkFicygpIHsgcmV0dXJuICh0aGlzLnM8MCk/dGhpcy5uZWdhdGUoKTp0aGlzOyB9CgovLyAocHVibGljKSByZXR1cm4gKyBpZiB0aGlzID4gYSwgLSBpZiB0aGlzIDwgYSwgMCBpZiBlcXVhbApmdW5jdGlvbiBibkNvbXBhcmVUbyhhKSB7CiAgdmFyIHIgPSB0aGlzLnMtYS5zOwogIGlmKHIgIT0gMCkgcmV0dXJuIHI7CiAgdmFyIGkgPSB0aGlzLnQ7CiAgciA9IGktYS50OwogIGlmKHIgIT0gMCkgcmV0dXJuICh0aGlzLnM8MCk/LXI6cjsKICB3aGlsZSgtLWkgPj0gMCkgaWYoKHI9dGhpc1tpXS1hW2ldKSAhPSAwKSByZXR1cm4gcjsKICByZXR1cm4gMDsKfQoKLy8gcmV0dXJucyBiaXQgbGVuZ3RoIG9mIHRoZSBpbnRlZ2VyIHgKZnVuY3Rpb24gbmJpdHMoeCkgewogIHZhciByID0gMSwgdDsKICBpZigodD14Pj4+MTYpICE9IDApIHsgeCA9IHQ7IHIgKz0gMTY7IH0KICBpZigodD14Pj44KSAhPSAwKSB7IHggPSB0OyByICs9IDg7IH0KICBpZigodD14Pj40KSAhPSAwKSB7IHggPSB0OyByICs9IDQ7IH0KICBpZigodD14Pj4yKSAhPSAwKSB7IHggPSB0OyByICs9IDI7IH0KICBpZigodD14Pj4xKSAhPSAwKSB7IHggPSB0OyByICs9IDE7IH0KICByZXR1cm4gcjsKfQoKLy8gKHB1YmxpYykgcmV0dXJuIHRoZSBudW1iZXIgb2YgYml0cyBpbiAidGhpcyIKZnVuY3Rpb24gYm5CaXRMZW5ndGgoKSB7CiAgaWYodGhpcy50IDw9IDApIHJldHVybiAwOwogIHJldHVybiB0aGlzLkRCKih0aGlzLnQtMSkrbmJpdHModGhpc1t0aGlzLnQtMV1eKHRoaXMucyZ0aGlzLkRNKSk7Cn0KCi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIDw8IG4qREIKZnVuY3Rpb24gYm5wRExTaGlmdFRvKG4scikgewogIHZhciBpOwogIGZvcihpID0gdGhpcy50LTE7IGkgPj0gMDsgLS1pKSByW2krbl0gPSB0aGlzW2ldOwogIGZvcihpID0gbi0xOyBpID49IDA7IC0taSkgcltpXSA9IDA7CiAgci50ID0gdGhpcy50K247CiAgci5zID0gdGhpcy5zOwp9CgovLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuKkRCCmZ1bmN0aW9uIGJucERSU2hpZnRUbyhuLHIpIHsKICBmb3IodmFyIGkgPSBuOyBpIDwgdGhpcy50OyArK2kpIHJbaS1uXSA9IHRoaXNbaV07CiAgci50ID0gTWF0aC5tYXgodGhpcy50LW4sMCk7CiAgci5zID0gdGhpcy5zOwp9CgovLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuCmZ1bmN0aW9uIGJucExTaGlmdFRvKG4scikgewogIHZhciBicyA9IG4ldGhpcy5EQjsKICB2YXIgY2JzID0gdGhpcy5EQi1iczsKICB2YXIgYm0gPSAoMTw8Y2JzKS0xOwogIHZhciBkcyA9IE1hdGguZmxvb3Iobi90aGlzLkRCKSwgYyA9ICh0aGlzLnM8PGJzKSZ0aGlzLkRNLCBpOwogIGZvcihpID0gdGhpcy50LTE7IGkgPj0gMDsgLS1pKSB7CiAgICByW2krZHMrMV0gPSAodGhpc1tpXT4+Y2JzKXxjOwogICAgYyA9ICh0aGlzW2ldJmJtKTw8YnM7CiAgfQogIGZvcihpID0gZHMtMTsgaSA+PSAwOyAtLWkpIHJbaV0gPSAwOwogIHJbZHNdID0gYzsKICByLnQgPSB0aGlzLnQrZHMrMTsKICByLnMgPSB0aGlzLnM7CiAgci5jbGFtcCgpOwp9CgovLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuCmZ1bmN0aW9uIGJucFJTaGlmdFRvKG4scikgewogIHIucyA9IHRoaXMuczsKICB2YXIgZHMgPSBNYXRoLmZsb29yKG4vdGhpcy5EQik7CiAgaWYoZHMgPj0gdGhpcy50KSB7IHIudCA9IDA7IHJldHVybjsgfQogIHZhciBicyA9IG4ldGhpcy5EQjsKICB2YXIgY2JzID0gdGhpcy5EQi1iczsKICB2YXIgYm0gPSAoMTw8YnMpLTE7CiAgclswXSA9IHRoaXNbZHNdPj5iczsKICBmb3IodmFyIGkgPSBkcysxOyBpIDwgdGhpcy50OyArK2kpIHsKICAgIHJbaS1kcy0xXSB8PSAodGhpc1tpXSZibSk8PGNiczsKICAgIHJbaS1kc10gPSB0aGlzW2ldPj5iczsKICB9CiAgaWYoYnMgPiAwKSByW3RoaXMudC1kcy0xXSB8PSAodGhpcy5zJmJtKTw8Y2JzOwogIHIudCA9IHRoaXMudC1kczsKICByLmNsYW1wKCk7Cn0KCi8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIC0gYQpmdW5jdGlvbiBibnBTdWJUbyhhLHIpIHsKICB2YXIgaSA9IDAsIGMgPSAwLCBtID0gTWF0aC5taW4oYS50LHRoaXMudCk7CiAgd2hpbGUoaSA8IG0pIHsKICAgIGMgKz0gdGhpc1tpXS1hW2ldOwogICAgcltpKytdID0gYyZ0aGlzLkRNOwogICAgYyA+Pj0gdGhpcy5EQjsKICB9CiAgaWYoYS50IDwgdGhpcy50KSB7CiAgICBjIC09IGEuczsKICAgIHdoaWxlKGkgPCB0aGlzLnQpIHsKICAgICAgYyArPSB0aGlzW2ldOwogICAgICByW2krK10gPSBjJnRoaXMuRE07CiAgICAgIGMgPj49IHRoaXMuREI7CiAgICB9CiAgICBjICs9IHRoaXMuczsKICB9CiAgZWxzZSB7CiAgICBjICs9IHRoaXMuczsKICAgIHdoaWxlKGkgPCBhLnQpIHsKICAgICAgYyAtPSBhW2ldOwogICAgICByW2krK10gPSBjJnRoaXMuRE07CiAgICAgIGMgPj49IHRoaXMuREI7CiAgICB9CiAgICBjIC09IGEuczsKICB9CiAgci5zID0gKGM8MCk/LTE6MDsKICBpZihjIDwgLTEpIHJbaSsrXSA9IHRoaXMuRFYrYzsKICBlbHNlIGlmKGMgPiAwKSByW2krK10gPSBjOwogIHIudCA9IGk7CiAgci5jbGFtcCgpOwp9CgovLyAocHJvdGVjdGVkKSByID0gdGhpcyAqIGEsIHIgIT0gdGhpcyxhIChIQUMgMTQuMTIpCi8vICJ0aGlzIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuCmZ1bmN0aW9uIGJucE11bHRpcGx5VG8oYSxyKSB7CiAgdmFyIHggPSB0aGlzLmFicygpLCB5ID0gYS5hYnMoKTsKICB2YXIgaSA9IHgudDsKICByLnQgPSBpK3kudDsKICB3aGlsZSgtLWkgPj0gMCkgcltpXSA9IDA7CiAgZm9yKGkgPSAwOyBpIDwgeS50OyArK2kpIHJbaSt4LnRdID0geC5hbSgwLHlbaV0scixpLDAseC50KTsKICByLnMgPSAwOwogIHIuY2xhbXAoKTsKICBpZih0aGlzLnMgIT0gYS5zKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ocixyKTsKfQoKLy8gKHByb3RlY3RlZCkgciA9IHRoaXNeMiwgciAhPSB0aGlzIChIQUMgMTQuMTYpCmZ1bmN0aW9uIGJucFNxdWFyZVRvKHIpIHsKICB2YXIgeCA9IHRoaXMuYWJzKCk7CiAgdmFyIGkgPSByLnQgPSAyKngudDsKICB3aGlsZSgtLWkgPj0gMCkgcltpXSA9IDA7CiAgZm9yKGkgPSAwOyBpIDwgeC50LTE7ICsraSkgewogICAgdmFyIGMgPSB4LmFtKGkseFtpXSxyLDIqaSwwLDEpOwogICAgaWYoKHJbaSt4LnRdKz14LmFtKGkrMSwyKnhbaV0sciwyKmkrMSxjLHgudC1pLTEpKSA+PSB4LkRWKSB7CiAgICAgIHJbaSt4LnRdIC09IHguRFY7CiAgICAgIHJbaSt4LnQrMV0gPSAxOwogICAgfQogIH0KICBpZihyLnQgPiAwKSByW3IudC0xXSArPSB4LmFtKGkseFtpXSxyLDIqaSwwLDEpOwogIHIucyA9IDA7CiAgci5jbGFtcCgpOwp9CgovLyAocHJvdGVjdGVkKSBkaXZpZGUgdGhpcyBieSBtLCBxdW90aWVudCBhbmQgcmVtYWluZGVyIHRvIHEsIHIgKEhBQyAxNC4yMCkKLy8gciAhPSBxLCB0aGlzICE9IG0uICBxIG9yIHIgbWF5IGJlIG51bGwuCmZ1bmN0aW9uIGJucERpdlJlbVRvKG0scSxyKSB7CiAgdmFyIHBtID0gbS5hYnMoKTsKICBpZihwbS50IDw9IDApIHJldHVybjsKICB2YXIgcHQgPSB0aGlzLmFicygpOwogIGlmKHB0LnQgPCBwbS50KSB7CiAgICBpZihxICE9IG51bGwpIHEuZnJvbUludCgwKTsKICAgIGlmKHIgIT0gbnVsbCkgdGhpcy5jb3B5VG8ocik7CiAgICByZXR1cm47CiAgfQogIGlmKHIgPT0gbnVsbCkgciA9IG5iaSgpOwogIHZhciB5ID0gbmJpKCksIHRzID0gdGhpcy5zLCBtcyA9IG0uczsKICB2YXIgbnNoID0gdGhpcy5EQi1uYml0cyhwbVtwbS50LTFdKTsgIC8vIG5vcm1hbGl6ZSBtb2R1bHVzCiAgaWYobnNoID4gMCkgeyBwbS5sU2hpZnRUbyhuc2gseSk7IHB0LmxTaGlmdFRvKG5zaCxyKTsgfQogIGVsc2UgeyBwbS5jb3B5VG8oeSk7IHB0LmNvcHlUbyhyKTsgfQogIHZhciB5cyA9IHkudDsKICB2YXIgeTAgPSB5W3lzLTFdOwogIGlmKHkwID09IDApIHJldHVybjsKICB2YXIgeXQgPSB5MCooMTw8dGhpcy5GMSkrKCh5cz4xKT95W3lzLTJdPj50aGlzLkYyOjApOwogIHZhciBkMSA9IHRoaXMuRlYveXQsIGQyID0gKDE8PHRoaXMuRjEpL3l0LCBlID0gMTw8dGhpcy5GMjsKICB2YXIgaSA9IHIudCwgaiA9IGkteXMsIHQgPSAocT09bnVsbCk/bmJpKCk6cTsKICB5LmRsU2hpZnRUbyhqLHQpOwogIGlmKHIuY29tcGFyZVRvKHQpID49IDApIHsKICAgIHJbci50KytdID0gMTsKICAgIHIuc3ViVG8odCxyKTsKICB9CiAgQmlnSW50ZWdlci5PTkUuZGxTaGlmdFRvKHlzLHQpOwogIHQuc3ViVG8oeSx5KTsgLy8gIm5lZ2F0aXZlIiB5IHNvIHdlIGNhbiByZXBsYWNlIHN1YiB3aXRoIGFtIGxhdGVyCiAgd2hpbGUoeS50IDwgeXMpIHlbeS50KytdID0gMDsKICB3aGlsZSgtLWogPj0gMCkgewogICAgLy8gRXN0aW1hdGUgcXVvdGllbnQgZGlnaXQKICAgIHZhciBxZCA9IChyWy0taV09PXkwKT90aGlzLkRNOk1hdGguZmxvb3IocltpXSpkMSsocltpLTFdK2UpKmQyKTsKICAgIGlmKChyW2ldKz15LmFtKDAscWQscixqLDAseXMpKSA8IHFkKSB7ICAvLyBUcnkgaXQgb3V0CiAgICAgIHkuZGxTaGlmdFRvKGosdCk7CiAgICAgIHIuc3ViVG8odCxyKTsKICAgICAgd2hpbGUocltpXSA8IC0tcWQpIHIuc3ViVG8odCxyKTsKICAgIH0KICB9CiAgaWYocSAhPSBudWxsKSB7CiAgICByLmRyU2hpZnRUbyh5cyxxKTsKICAgIGlmKHRzICE9IG1zKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ocSxxKTsKICB9CiAgci50ID0geXM7CiAgci5jbGFtcCgpOwogIGlmKG5zaCA+IDApIHIuclNoaWZ0VG8obnNoLHIpOyAgLy8gRGVub3JtYWxpemUgcmVtYWluZGVyCiAgaWYodHMgPCAwKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ocixyKTsKfQoKLy8gKHB1YmxpYykgdGhpcyBtb2QgYQpmdW5jdGlvbiBibk1vZChhKSB7CiAgdmFyIHIgPSBuYmkoKTsKICB0aGlzLmFicygpLmRpdlJlbVRvKGEsbnVsbCxyKTsKICBpZih0aGlzLnMgPCAwICYmIHIuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTykgPiAwKSBhLnN1YlRvKHIscik7CiAgcmV0dXJuIHI7Cn0KCi8vIE1vZHVsYXIgcmVkdWN0aW9uIHVzaW5nICJjbGFzc2ljIiBhbGdvcml0aG0KZnVuY3Rpb24gQ2xhc3NpYyhtKSB7IHRoaXMubSA9IG07IH0KZnVuY3Rpb24gY0NvbnZlcnQoeCkgewogIGlmKHgucyA8IDAgfHwgeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSByZXR1cm4geC5tb2QodGhpcy5tKTsKICBlbHNlIHJldHVybiB4Owp9CmZ1bmN0aW9uIGNSZXZlcnQoeCkgeyByZXR1cm4geDsgfQpmdW5jdGlvbiBjUmVkdWNlKHgpIHsgeC5kaXZSZW1Ubyh0aGlzLm0sbnVsbCx4KTsgfQpmdW5jdGlvbiBjTXVsVG8oeCx5LHIpIHsgeC5tdWx0aXBseVRvKHkscik7IHRoaXMucmVkdWNlKHIpOyB9CmZ1bmN0aW9uIGNTcXJUbyh4LHIpIHsgeC5zcXVhcmVUbyhyKTsgdGhpcy5yZWR1Y2Uocik7IH0KCkNsYXNzaWMucHJvdG90eXBlLmNvbnZlcnQgPSBjQ29udmVydDsKQ2xhc3NpYy5wcm90b3R5cGUucmV2ZXJ0ID0gY1JldmVydDsKQ2xhc3NpYy5wcm90b3R5cGUucmVkdWNlID0gY1JlZHVjZTsKQ2xhc3NpYy5wcm90b3R5cGUubXVsVG8gPSBjTXVsVG87CkNsYXNzaWMucHJvdG90eXBlLnNxclRvID0gY1NxclRvOwoKLy8gKHByb3RlY3RlZCkgcmV0dXJuICItMS90aGlzICUgMl5EQiI7IHVzZWZ1bCBmb3IgTW9udC4gcmVkdWN0aW9uCi8vIGp1c3RpZmljYXRpb246Ci8vICAgICAgICAgeHkgPT0gMSAobW9kIG0pCi8vICAgICAgICAgeHkgPSAgMStrbQovLyAgIHh5KDIteHkpID0gKDEra20pKDEta20pCi8vIHhbeSgyLXh5KV0gPSAxLWteMm1eMgovLyB4W3koMi14eSldID09IDEgKG1vZCBtXjIpCi8vIGlmIHkgaXMgMS94IG1vZCBtLCB0aGVuIHkoMi14eSkgaXMgMS94IG1vZCBtXjIKLy8gc2hvdWxkIHJlZHVjZSB4IGFuZCB5KDIteHkpIGJ5IG1eMiBhdCBlYWNoIHN0ZXAgdG8ga2VlcCBzaXplIGJvdW5kZWQuCi8vIEpTIG11bHRpcGx5ICJvdmVyZmxvd3MiIGRpZmZlcmVudGx5IGZyb20gQy9DKyssIHNvIGNhcmUgaXMgbmVlZGVkIGhlcmUuCmZ1bmN0aW9uIGJucEludkRpZ2l0KCkgewogIGlmKHRoaXMudCA8IDEpIHJldHVybiAwOwogIHZhciB4ID0gdGhpc1swXTsKICBpZigoeCYxKSA9PSAwKSByZXR1cm4gMDsKICB2YXIgeSA9IHgmMzsgICAgLy8geSA9PSAxL3ggbW9kIDJeMgogIHkgPSAoeSooMi0oeCYweGYpKnkpKSYweGY7ICAvLyB5ID09IDEveCBtb2QgMl40CiAgeSA9ICh5KigyLSh4JjB4ZmYpKnkpKSYweGZmOyAgLy8geSA9PSAxL3ggbW9kIDJeOAogIHkgPSAoeSooMi0oKCh4JjB4ZmZmZikqeSkmMHhmZmZmKSkpJjB4ZmZmZjsgLy8geSA9PSAxL3ggbW9kIDJeMTYKICAvLyBsYXN0IHN0ZXAgLSBjYWxjdWxhdGUgaW52ZXJzZSBtb2QgRFYgZGlyZWN0bHk7CiAgLy8gYXNzdW1lcyAxNiA8IERCIDw9IDMyIGFuZCBhc3N1bWVzIGFiaWxpdHkgdG8gaGFuZGxlIDQ4LWJpdCBpbnRzCiAgeSA9ICh5KigyLXgqeSV0aGlzLkRWKSkldGhpcy5EVjsgICAgLy8geSA9PSAxL3ggbW9kIDJeZGJpdHMKICAvLyB3ZSByZWFsbHkgd2FudCB0aGUgbmVnYXRpdmUgaW52ZXJzZSwgYW5kIC1EViA8IHkgPCBEVgogIHJldHVybiAoeT4wKT90aGlzLkRWLXk6LXk7Cn0KCi8vIE1vbnRnb21lcnkgcmVkdWN0aW9uCmZ1bmN0aW9uIE1vbnRnb21lcnkobSkgewogIHRoaXMubSA9IG07CiAgdGhpcy5tcCA9IG0uaW52RGlnaXQoKTsKICB0aGlzLm1wbCA9IHRoaXMubXAmMHg3ZmZmOwogIHRoaXMubXBoID0gdGhpcy5tcD4+MTU7CiAgdGhpcy51bSA9ICgxPDwobS5EQi0xNSkpLTE7CiAgdGhpcy5tdDIgPSAyKm0udDsKfQoKLy8geFIgbW9kIG0KZnVuY3Rpb24gbW9udENvbnZlcnQoeCkgewogIHZhciByID0gbmJpKCk7CiAgeC5hYnMoKS5kbFNoaWZ0VG8odGhpcy5tLnQscik7CiAgci5kaXZSZW1Ubyh0aGlzLm0sbnVsbCxyKTsKICBpZih4LnMgPCAwICYmIHIuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTykgPiAwKSB0aGlzLm0uc3ViVG8ocixyKTsKICByZXR1cm4gcjsKfQoKLy8geC9SIG1vZCBtCmZ1bmN0aW9uIG1vbnRSZXZlcnQoeCkgewogIHZhciByID0gbmJpKCk7CiAgeC5jb3B5VG8ocik7CiAgdGhpcy5yZWR1Y2Uocik7CiAgcmV0dXJuIHI7Cn0KCi8vIHggPSB4L1IgbW9kIG0gKEhBQyAxNC4zMikKZnVuY3Rpb24gbW9udFJlZHVjZSh4KSB7CiAgd2hpbGUoeC50IDw9IHRoaXMubXQyKSAgLy8gcGFkIHggc28gYW0gaGFzIGVub3VnaCByb29tIGxhdGVyCiAgICB4W3gudCsrXSA9IDA7CiAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMubS50OyArK2kpIHsKICAgIC8vIGZhc3RlciB3YXkgb2YgY2FsY3VsYXRpbmcgdTAgPSB4W2ldKm1wIG1vZCBEVgogICAgdmFyIGogPSB4W2ldJjB4N2ZmZjsKICAgIHZhciB1MCA9IChqKnRoaXMubXBsKygoKGoqdGhpcy5tcGgrKHhbaV0+PjE1KSp0aGlzLm1wbCkmdGhpcy51bSk8PDE1KSkmeC5ETTsKICAgIC8vIHVzZSBhbSB0byBjb21iaW5lIHRoZSBtdWx0aXBseS1zaGlmdC1hZGQgaW50byBvbmUgY2FsbAogICAgaiA9IGkrdGhpcy5tLnQ7CiAgICB4W2pdICs9IHRoaXMubS5hbSgwLHUwLHgsaSwwLHRoaXMubS50KTsKICAgIC8vIHByb3BhZ2F0ZSBjYXJyeQogICAgd2hpbGUoeFtqXSA+PSB4LkRWKSB7IHhbal0gLT0geC5EVjsgeFsrK2pdKys7IH0KICB9CiAgeC5jbGFtcCgpOwogIHguZHJTaGlmdFRvKHRoaXMubS50LHgpOwogIGlmKHguY29tcGFyZVRvKHRoaXMubSkgPj0gMCkgeC5zdWJUbyh0aGlzLm0seCk7Cn0KCi8vIHIgPSAieF4yL1IgbW9kIG0iOyB4ICE9IHIKZnVuY3Rpb24gbW9udFNxclRvKHgscikgeyB4LnNxdWFyZVRvKHIpOyB0aGlzLnJlZHVjZShyKTsgfQoKLy8gciA9ICJ4eS9SIG1vZCBtIjsgeCx5ICE9IHIKZnVuY3Rpb24gbW9udE11bFRvKHgseSxyKSB7IHgubXVsdGlwbHlUbyh5LHIpOyB0aGlzLnJlZHVjZShyKTsgfQoKTW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydCA9IG1vbnRDb252ZXJ0OwpNb250Z29tZXJ5LnByb3RvdHlwZS5yZXZlcnQgPSBtb250UmV2ZXJ0OwpNb250Z29tZXJ5LnByb3RvdHlwZS5yZWR1Y2UgPSBtb250UmVkdWNlOwpNb250Z29tZXJ5LnByb3RvdHlwZS5tdWxUbyA9IG1vbnRNdWxUbzsKTW9udGdvbWVyeS5wcm90b3R5cGUuc3FyVG8gPSBtb250U3FyVG87CgovLyAocHJvdGVjdGVkKSB0cnVlIGlmZiB0aGlzIGlzIGV2ZW4KZnVuY3Rpb24gYm5wSXNFdmVuKCkgeyByZXR1cm4gKCh0aGlzLnQ+MCk/KHRoaXNbMF0mMSk6dGhpcy5zKSA9PSAwOyB9CgovLyAocHJvdGVjdGVkKSB0aGlzXmUsIGUgPCAyXjMyLCBkb2luZyBzcXIgYW5kIG11bCB3aXRoICJyIiAoSEFDIDE0Ljc5KQpmdW5jdGlvbiBibnBFeHAoZSx6KSB7CiAgaWYoZSA+IDB4ZmZmZmZmZmYgfHwgZSA8IDEpIHJldHVybiBCaWdJbnRlZ2VyLk9ORTsKICB2YXIgciA9IG5iaSgpLCByMiA9IG5iaSgpLCBnID0gei5jb252ZXJ0KHRoaXMpLCBpID0gbmJpdHMoZSktMTsKICBnLmNvcHlUbyhyKTsKICB3aGlsZSgtLWkgPj0gMCkgewogICAgei5zcXJUbyhyLHIyKTsKICAgIGlmKChlJigxPDxpKSkgPiAwKSB6Lm11bFRvKHIyLGcscik7CiAgICBlbHNlIHsgdmFyIHQgPSByOyByID0gcjI7IHIyID0gdDsgfQogIH0KICByZXR1cm4gei5yZXZlcnQocik7Cn0KCi8vIChwdWJsaWMpIHRoaXNeZSAlIG0sIDAgPD0gZSA8IDJeMzIKZnVuY3Rpb24gYm5Nb2RQb3dJbnQoZSxtKSB7CiAgdmFyIHo7CiAgaWYoZSA8IDI1NiB8fCBtLmlzRXZlbigpKSB6ID0gbmV3IENsYXNzaWMobSk7IGVsc2UgeiA9IG5ldyBNb250Z29tZXJ5KG0pOwogIHJldHVybiB0aGlzLmV4cChlLHopOwp9CgovLyBwcm90ZWN0ZWQKQmlnSW50ZWdlci5wcm90b3R5cGUuY29weVRvID0gYm5wQ29weVRvOwpCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50ID0gYm5wRnJvbUludDsKQmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVN0cmluZyA9IGJucEZyb21TdHJpbmc7CkJpZ0ludGVnZXIucHJvdG90eXBlLmNsYW1wID0gYm5wQ2xhbXA7CkJpZ0ludGVnZXIucHJvdG90eXBlLmRsU2hpZnRUbyA9IGJucERMU2hpZnRUbzsKQmlnSW50ZWdlci5wcm90b3R5cGUuZHJTaGlmdFRvID0gYm5wRFJTaGlmdFRvOwpCaWdJbnRlZ2VyLnByb3RvdHlwZS5sU2hpZnRUbyA9IGJucExTaGlmdFRvOwpCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbyA9IGJucFJTaGlmdFRvOwpCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJUbyA9IGJucFN1YlRvOwpCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVRvID0gYm5wTXVsdGlwbHlUbzsKQmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlVG8gPSBibnBTcXVhcmVUbzsKQmlnSW50ZWdlci5wcm90b3R5cGUuZGl2UmVtVG8gPSBibnBEaXZSZW1UbzsKQmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQgPSBibnBJbnZEaWdpdDsKQmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuID0gYm5wSXNFdmVuOwpCaWdJbnRlZ2VyLnByb3RvdHlwZS5leHAgPSBibnBFeHA7CgovLyBwdWJsaWMKQmlnSW50ZWdlci5wcm90b3R5cGUudG9TdHJpbmcgPSBiblRvU3RyaW5nOwpCaWdJbnRlZ2VyLnByb3RvdHlwZS5uZWdhdGUgPSBibk5lZ2F0ZTsKQmlnSW50ZWdlci5wcm90b3R5cGUuYWJzID0gYm5BYnM7CkJpZ0ludGVnZXIucHJvdG90eXBlLmNvbXBhcmVUbyA9IGJuQ29tcGFyZVRvOwpCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXRMZW5ndGggPSBibkJpdExlbmd0aDsKQmlnSW50ZWdlci5wcm90b3R5cGUubW9kID0gYm5Nb2Q7CkJpZ0ludGVnZXIucHJvdG90eXBlLm1vZFBvd0ludCA9IGJuTW9kUG93SW50OwoKLy8gImNvbnN0YW50cyIKQmlnSW50ZWdlci5aRVJPID0gbmJ2KDApOwpCaWdJbnRlZ2VyLk9ORSA9IG5idigxKTsKCi8vIHBybmc0LmpzIC0gdXNlcyBBcmNmb3VyIGFzIGEgUFJORwoKZnVuY3Rpb24gQXJjZm91cigpIHsKICB0aGlzLmkgPSAwOwogIHRoaXMuaiA9IDA7CiAgdGhpcy5TID0gbmV3IEFycmF5KCk7Cn0KCi8vIEluaXRpYWxpemUgYXJjZm91ciBjb250ZXh0IGZyb20ga2V5LCBhbiBhcnJheSBvZiBpbnRzLCBlYWNoIGZyb20gWzAuLjI1NV0KZnVuY3Rpb24gQVJDNGluaXQoa2V5KSB7CiAgdmFyIGksIGosIHQ7CiAgZm9yKGkgPSAwOyBpIDwgMjU2OyArK2kpCiAgICB0aGlzLlNbaV0gPSBpOwogIGogPSAwOwogIGZvcihpID0gMDsgaSA8IDI1NjsgKytpKSB7CiAgICBqID0gKGogKyB0aGlzLlNbaV0gKyBrZXlbaSAlIGtleS5sZW5ndGhdKSAmIDI1NTsKICAgIHQgPSB0aGlzLlNbaV07CiAgICB0aGlzLlNbaV0gPSB0aGlzLlNbal07CiAgICB0aGlzLlNbal0gPSB0OwogIH0KICB0aGlzLmkgPSAwOwogIHRoaXMuaiA9IDA7Cn0KCmZ1bmN0aW9uIEFSQzRuZXh0KCkgewogIHZhciB0OwogIHRoaXMuaSA9ICh0aGlzLmkgKyAxKSAmIDI1NTsKICB0aGlzLmogPSAodGhpcy5qICsgdGhpcy5TW3RoaXMuaV0pICYgMjU1OwogIHQgPSB0aGlzLlNbdGhpcy5pXTsKICB0aGlzLlNbdGhpcy5pXSA9IHRoaXMuU1t0aGlzLmpdOwogIHRoaXMuU1t0aGlzLmpdID0gdDsKICByZXR1cm4gdGhpcy5TWyh0ICsgdGhpcy5TW3RoaXMuaV0pICYgMjU1XTsKfQoKQXJjZm91ci5wcm90b3R5cGUuaW5pdCA9IEFSQzRpbml0OwpBcmNmb3VyLnByb3RvdHlwZS5uZXh0ID0gQVJDNG5leHQ7CgovLyBQbHVnIGluIHlvdXIgUk5HIGNvbnN0cnVjdG9yIGhlcmUKZnVuY3Rpb24gcHJuZ19uZXdzdGF0ZSgpIHsKICByZXR1cm4gbmV3IEFyY2ZvdXIoKTsKfQoKLy8gUG9vbCBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0IGFuZCBncmVhdGVyIHRoYW4gMzIuCi8vIEFuIGFycmF5IG9mIGJ5dGVzIHRoZSBzaXplIG9mIHRoZSBwb29sIHdpbGwgYmUgcGFzc2VkIHRvIGluaXQoKQp2YXIgcm5nX3BzaXplID0gMjU2OwovLyBSYW5kb20gbnVtYmVyIGdlbmVyYXRvciAtIHJlcXVpcmVzIGEgUFJORyBiYWNrZW5kLCBlLmcuIHBybmc0LmpzCgovLyBGb3IgYmVzdCByZXN1bHRzLCBwdXQgY29kZSBsaWtlCi8vIDxib2R5IG9uQ2xpY2s9J3JuZ19zZWVkX3RpbWUoKTsnIG9uS2V5UHJlc3M9J3JuZ19zZWVkX3RpbWUoKTsnPgovLyBpbiB5b3VyIG1haW4gSFRNTCBkb2N1bWVudC4KCnZhciBybmdfc3RhdGU7CnZhciBybmdfcG9vbDsKdmFyIHJuZ19wcHRyOwoKLy8gTWl4IGluIGEgMzItYml0IGludGVnZXIgaW50byB0aGUgcG9vbApmdW5jdGlvbiBybmdfc2VlZF9pbnQoeCkgewogIHJuZ19wb29sW3JuZ19wcHRyKytdIF49IHggJiAyNTU7CiAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gXj0gKHggPj4gOCkgJiAyNTU7CiAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gXj0gKHggPj4gMTYpICYgMjU1OwogIHJuZ19wb29sW3JuZ19wcHRyKytdIF49ICh4ID4+IDI0KSAmIDI1NTsKICBpZihybmdfcHB0ciA+PSBybmdfcHNpemUpIHJuZ19wcHRyIC09IHJuZ19wc2l6ZTsKfQoKLy8gTWl4IGluIHRoZSBjdXJyZW50IHRpbWUgKHcvbWlsbGlzZWNvbmRzKSBpbnRvIHRoZSBwb29sCmZ1bmN0aW9uIHJuZ19zZWVkX3RpbWUoKSB7CiAgcm5nX3NlZWRfaW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpKTsKfQoKLy8gSW5pdGlhbGl6ZSB0aGUgcG9vbCB3aXRoIGp1bmsgaWYgbmVlZGVkLgppZihybmdfcG9vbCA9PSBudWxsKSB7CiAgcm5nX3Bvb2wgPSBuZXcgQXJyYXkoKTsKICBybmdfcHB0ciA9IDA7CiAgdmFyIHQ7CiAgaWYobmF2aWdhdG9yLmFwcE5hbWUgPT0gIk5ldHNjYXBlIiAmJiBuYXZpZ2F0b3IuYXBwVmVyc2lvbiA8ICI1IiAmJiB3aW5kb3cuY3J5cHRvKSB7CiAgICAvLyBFeHRyYWN0IGVudHJvcHkgKDI1NiBiaXRzKSBmcm9tIE5TNCBSTkcgaWYgYXZhaWxhYmxlCiAgICB2YXIgeiA9IHdpbmRvdy5jcnlwdG8ucmFuZG9tKDMyKTsKICAgIGZvcih0ID0gMDsgdCA8IHoubGVuZ3RoOyArK3QpCiAgICAgIHJuZ19wb29sW3JuZ19wcHRyKytdID0gei5jaGFyQ29kZUF0KHQpICYgMjU1OwogIH0KICB3aGlsZShybmdfcHB0ciA8IHJuZ19wc2l6ZSkgeyAgLy8gZXh0cmFjdCBzb21lIHJhbmRvbW5lc3MgZnJvbSBNYXRoLnJhbmRvbSgpCiAgICB0ID0gTWF0aC5mbG9vcig2NTUzNiAqIE1hdGgucmFuZG9tKCkpOwogICAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gPSB0ID4+PiA4OwogICAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gPSB0ICYgMjU1OwogIH0KICBybmdfcHB0ciA9IDA7CiAgcm5nX3NlZWRfdGltZSgpOwogIC8vcm5nX3NlZWRfaW50KHdpbmRvdy5zY3JlZW5YKTsKICAvL3JuZ19zZWVkX2ludCh3aW5kb3cuc2NyZWVuWSk7Cn0KCmZ1bmN0aW9uIHJuZ19nZXRfYnl0ZSgpIHsKICBpZihybmdfc3RhdGUgPT0gbnVsbCkgewogICAgcm5nX3NlZWRfdGltZSgpOwogICAgcm5nX3N0YXRlID0gcHJuZ19uZXdzdGF0ZSgpOwogICAgcm5nX3N0YXRlLmluaXQocm5nX3Bvb2wpOwogICAgZm9yKHJuZ19wcHRyID0gMDsgcm5nX3BwdHIgPCBybmdfcG9vbC5sZW5ndGg7ICsrcm5nX3BwdHIpCiAgICAgIHJuZ19wb29sW3JuZ19wcHRyXSA9IDA7CiAgICBybmdfcHB0ciA9IDA7CiAgICAvL3JuZ19wb29sID0gbnVsbDsKICB9CiAgLy8gVE9ETzogYWxsb3cgcmVzZWVkaW5nIGFmdGVyIGZpcnN0IHJlcXVlc3QKICByZXR1cm4gcm5nX3N0YXRlLm5leHQoKTsKfQoKZnVuY3Rpb24gcm5nX2dldF9ieXRlcyhiYSkgewogIHZhciBpOwogIGZvcihpID0gMDsgaSA8IGJhLmxlbmd0aDsgKytpKSBiYVtpXSA9IHJuZ19nZXRfYnl0ZSgpOwp9CgpmdW5jdGlvbiBTZWN1cmVSYW5kb20oKSB7fQoKU2VjdXJlUmFuZG9tLnByb3RvdHlwZS5uZXh0Qnl0ZXMgPSBybmdfZ2V0X2J5dGVzOwoKLy9EZXBlbmRzIG9uIGpzYm4uanMgYW5kIHJuZy5qcwoKLy9WZXJzaW9uIDEuMTogc3VwcG9ydCB1dGYtOCBlbmNvZGluZyBpbiBwa2NzMXBhZDIKCi8vY29udmVydCBhIChoZXgpIHN0cmluZyB0byBhIGJpZ251bSBvYmplY3QKZnVuY3Rpb24gcGFyc2VCaWdJbnQoc3RyLHIpIHsKICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoc3RyLHIpOwp9CgpmdW5jdGlvbiBsaW5lYnJrKHMsbikgewogIHZhciByZXQgPSAiIjsKICB2YXIgaSA9IDA7CiAgd2hpbGUoaSArIG4gPCBzLmxlbmd0aCkgewogICAgcmV0ICs9IHMuc3Vic3RyaW5nKGksaStuKSArICJcbiI7CiAgICBpICs9IG47CiAgfQogIHJldHVybiByZXQgKyBzLnN1YnN0cmluZyhpLHMubGVuZ3RoKTsKfQoKZnVuY3Rpb24gYnl0ZTJIZXgoYikgewogIGlmKGIgPCAweDEwKQogICAgcmV0dXJuICIwIiArIGIudG9TdHJpbmcoMTYpOwogIGVsc2UKICAgIHJldHVybiBiLnRvU3RyaW5nKDE2KTsKfQoKLy9QS0NTIzEgKHR5cGUgMiwgcmFuZG9tKSBwYWQgaW5wdXQgc3RyaW5nIHMgdG8gbiBieXRlcywgYW5kIHJldHVybiBhIGJpZ2ludApmdW5jdGlvbiBwa2NzMXBhZDIocyxuKSB7CiAgaWYobiA8IHMubGVuZ3RoICsgMTEpIHsgLy8gVE9ETzogZml4IGZvciB1dGYtOAogICAgYWxlcnQoIk1lc3NhZ2UgdG9vIGxvbmcgZm9yIFJTQSIpOwogICAgcmV0dXJuIG51bGw7CiAgfQogIHZhciBiYSA9IG5ldyBBcnJheSgpOwogIHZhciBpID0gcy5sZW5ndGggLSAxOwogIHdoaWxlKGkgPj0gMCAmJiBuID4gMCkgewogICAgdmFyIGMgPSBzLmNoYXJDb2RlQXQoaS0tKTsKICAgIGlmKGMgPCAxMjgpIHsgLy8gZW5jb2RlIHVzaW5nIHV0Zi04CiAgICAgIGJhWy0tbl0gPSBjOwogICAgfQogICAgZWxzZSBpZigoYyA+IDEyNykgJiYgKGMgPCAyMDQ4KSkgewogICAgICBiYVstLW5dID0gKGMgJiA2MykgfCAxMjg7CiAgICAgIGJhWy0tbl0gPSAoYyA+PiA2KSB8IDE5MjsKICAgIH0KICAgIGVsc2UgewogICAgICBiYVstLW5dID0gKGMgJiA2MykgfCAxMjg7CiAgICAgIGJhWy0tbl0gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7CiAgICAgIGJhWy0tbl0gPSAoYyA+PiAxMikgfCAyMjQ7CiAgICB9CiAgfQogIGJhWy0tbl0gPSAwOwogIHZhciBybmcgPSBuZXcgU2VjdXJlUmFuZG9tKCk7CiAgdmFyIHggPSBuZXcgQXJyYXkoKTsKICB3aGlsZShuID4gMikgeyAvLyByYW5kb20gbm9uLXplcm8gcGFkCiAgICB4WzBdID0gMDsKICAgIHdoaWxlKHhbMF0gPT0gMCkgcm5nLm5leHRCeXRlcyh4KTsKICAgIGJhWy0tbl0gPSB4WzBdOwogIH0KICBiYVstLW5dID0gMjsKICBiYVstLW5dID0gMDsKICByZXR1cm4gbmV3IEJpZ0ludGVnZXIoYmEpOwp9CgovLyJlbXB0eSIgUlNBIGtleSBjb25zdHJ1Y3RvcgpmdW5jdGlvbiBSU0FLZXkoKSB7CiAgdGhpcy5uID0gbnVsbDsKICB0aGlzLmUgPSAwOwogIHRoaXMuZCA9IG51bGw7CiAgdGhpcy5wID0gbnVsbDsKICB0aGlzLnEgPSBudWxsOwogIHRoaXMuZG1wMSA9IG51bGw7CiAgdGhpcy5kbXExID0gbnVsbDsKICB0aGlzLmNvZWZmID0gbnVsbDsKfQoKLy9TZXQgdGhlIHB1YmxpYyBrZXkgZmllbGRzIE4gYW5kIGUgZnJvbSBoZXggc3RyaW5ncwpmdW5jdGlvbiBSU0FTZXRQdWJsaWMoTixFKSB7CiAgaWYoTiAhPSBudWxsICYmIEUgIT0gbnVsbCAmJiBOLmxlbmd0aCA+IDAgJiYgRS5sZW5ndGggPiAwKSB7CiAgICB0aGlzLm4gPSBwYXJzZUJpZ0ludChOLDE2KTsKICAgIHRoaXMuZSA9IHBhcnNlSW50KEUsMTYpOwogIH0KICBlbHNlCiAgICBhbGVydCgiSW52YWxpZCBSU0EgcHVibGljIGtleSIpOwp9CgovL1BlcmZvcm0gcmF3IHB1YmxpYyBvcGVyYXRpb24gb24gIngiOiByZXR1cm4geF5lIChtb2QgbikKZnVuY3Rpb24gUlNBRG9QdWJsaWMoeCkgewogIHJldHVybiB4Lm1vZFBvd0ludCh0aGlzLmUsIHRoaXMubik7Cn0KCi8vUmV0dXJuIHRoZSBQS0NTIzEgUlNBIGVuY3J5cHRpb24gb2YgInRleHQiIGFzIGFuIGV2ZW4tbGVuZ3RoIGhleCBzdHJpbmcKZnVuY3Rpb24gUlNBRW5jcnlwdCh0ZXh0KSB7CiAgdmFyIG0gPSBwa2NzMXBhZDIodGV4dCwodGhpcy5uLmJpdExlbmd0aCgpKzcpPj4zKTsKICBpZihtID09IG51bGwpIHJldHVybiBudWxsOwogIHZhciBjID0gdGhpcy5kb1B1YmxpYyhtKTsKICBpZihjID09IG51bGwpIHJldHVybiBudWxsOwogIHZhciBoID0gYy50b1N0cmluZygxNik7CiAgaWYoKGgubGVuZ3RoICYgMSkgPT0gMCkgcmV0dXJuIGg7IGVsc2UgcmV0dXJuICIwIiArIGg7Cn0KCi8vUmV0dXJuIHRoZSBQS0NTIzEgUlNBIGVuY3J5cHRpb24gb2YgInRleHQiIGFzIGEgQmFzZTY0LWVuY29kZWQgc3RyaW5nCi8vZnVuY3Rpb24gUlNBRW5jcnlwdEI2NCh0ZXh0KSB7Ci8vdmFyIGggPSB0aGlzLmVuY3J5cHQodGV4dCk7Ci8vaWYoaCkgcmV0dXJuIGhleDJiNjQoaCk7IGVsc2UgcmV0dXJuIG51bGw7Ci8vfQoKLy9wcm90ZWN0ZWQKUlNBS2V5LnByb3RvdHlwZS5kb1B1YmxpYyA9IFJTQURvUHVibGljOwoKLy9wdWJsaWMKUlNBS2V5LnByb3RvdHlwZS5zZXRQdWJsaWMgPSBSU0FTZXRQdWJsaWM7ClJTQUtleS5wcm90b3R5cGUuZW5jcnlwdCA9IFJTQUVuY3J5cHQ7Ci8vUlNBS2V5LnByb3RvdHlwZS5lbmNyeXB0X2I2NCA9IFJTQUVuY3J5cHRCNjQ7Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBTZWN1cmVSYW5kb206IFNlY3VyZVJhbmRvbSwKICBieXRlMkhleDogYnl0ZTJIZXgsCiAgUlNBS2V5OiBSU0FLZXkKfQp9LHt9XSw1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvVW5pdF9UZXN0aW5nLzEuMAovLwovLyBUSElTIElTIE5PVCBURVNURUQgTk9SIExJS0VMWSBUTyBXT1JLIE9VVFNJREUgVjghCi8vCi8vIE9yaWdpbmFsbHkgZnJvbSBuYXJ3aGFsLmpzIChodHRwOi8vbmFyd2hhbGpzLm9yZykKLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5Ci8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0bwovLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZQovLyByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3IKLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAovLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4KLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTgovLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCi8vIHdoZW4gdXNlZCBpbiBub2RlLCB0aGlzIHdpbGwgYWN0dWFsbHkgbG9hZCB0aGUgdXRpbCBtb2R1bGUgd2UgZGVwZW5kIG9uCi8vIHZlcnN1cyBsb2FkaW5nIHRoZSBidWlsdGluIHV0aWwgbW9kdWxlIGFzIGhhcHBlbnMgb3RoZXJ3aXNlCi8vIHRoaXMgaXMgYSBidWcgaW4gbm9kZSBtb2R1bGUgbG9hZGluZyBhcyBmYXIgYXMgSSBhbSBjb25jZXJuZWQKdmFyIHV0aWwgPSBfZGVyZXFfKCd1dGlsLycpOwoKdmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTsKdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CgovLyAxLiBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvdwovLyBBc3NlcnRpb25FcnJvcidzIHdoZW4gcGFydGljdWxhciBjb25kaXRpb25zIGFyZSBub3QgbWV0LiBUaGUKLy8gYXNzZXJ0IG1vZHVsZSBtdXN0IGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBpbnRlcmZhY2UuCgp2YXIgYXNzZXJ0ID0gbW9kdWxlLmV4cG9ydHMgPSBvazsKCi8vIDIuIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGFzc2VydC4KLy8gbmV3IGFzc2VydC5Bc3NlcnRpb25FcnJvcih7IG1lc3NhZ2U6IG1lc3NhZ2UsCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWw6IGFjdHVhbCwKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCB9KQoKYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykgewogIHRoaXMubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7CiAgdGhpcy5hY3R1YWwgPSBvcHRpb25zLmFjdHVhbDsKICB0aGlzLmV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDsKICB0aGlzLm9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcjsKICBpZiAob3B0aW9ucy5tZXNzYWdlKSB7CiAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7CiAgICB0aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSBmYWxzZTsKICB9IGVsc2UgewogICAgdGhpcy5tZXNzYWdlID0gZ2V0TWVzc2FnZSh0aGlzKTsKICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7CiAgfQogIHZhciBzdGFja1N0YXJ0RnVuY3Rpb24gPSBvcHRpb25zLnN0YWNrU3RhcnRGdW5jdGlvbiB8fCBmYWlsOwoKICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHsKICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHN0YWNrU3RhcnRGdW5jdGlvbik7CiAgfQogIGVsc2UgewogICAgLy8gbm9uIHY4IGJyb3dzZXJzIHNvIHdlIGNhbiBoYXZlIGEgc3RhY2t0cmFjZQogICAgdmFyIGVyciA9IG5ldyBFcnJvcigpOwogICAgaWYgKGVyci5zdGFjaykgewogICAgICB2YXIgb3V0ID0gZXJyLnN0YWNrOwoKICAgICAgLy8gdHJ5IHRvIHN0cmlwIHVzZWxlc3MgZnJhbWVzCiAgICAgIHZhciBmbl9uYW1lID0gc3RhY2tTdGFydEZ1bmN0aW9uLm5hbWU7CiAgICAgIHZhciBpZHggPSBvdXQuaW5kZXhPZignXG4nICsgZm5fbmFtZSk7CiAgICAgIGlmIChpZHggPj0gMCkgewogICAgICAgIC8vIG9uY2Ugd2UgaGF2ZSBsb2NhdGVkIHRoZSBmdW5jdGlvbiBmcmFtZQogICAgICAgIC8vIHdlIG5lZWQgdG8gc3RyaXAgb3V0IGV2ZXJ5dGhpbmcgYmVmb3JlIGl0IChhbmQgaXRzIGxpbmUpCiAgICAgICAgdmFyIG5leHRfbGluZSA9IG91dC5pbmRleE9mKCdcbicsIGlkeCArIDEpOwogICAgICAgIG91dCA9IG91dC5zdWJzdHJpbmcobmV4dF9saW5lICsgMSk7CiAgICAgIH0KCiAgICAgIHRoaXMuc3RhY2sgPSBvdXQ7CiAgICB9CiAgfQp9OwoKLy8gYXNzZXJ0LkFzc2VydGlvbkVycm9yIGluc3RhbmNlb2YgRXJyb3IKdXRpbC5pbmhlcml0cyhhc3NlcnQuQXNzZXJ0aW9uRXJyb3IsIEVycm9yKTsKCmZ1bmN0aW9uIHJlcGxhY2VyKGtleSwgdmFsdWUpIHsKICBpZiAodXRpbC5pc1VuZGVmaW5lZCh2YWx1ZSkpIHsKICAgIHJldHVybiAnJyArIHZhbHVlOwogIH0KICBpZiAodXRpbC5pc051bWJlcih2YWx1ZSkgJiYgKGlzTmFOKHZhbHVlKSB8fCAhaXNGaW5pdGUodmFsdWUpKSkgewogICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7CiAgfQogIGlmICh1dGlsLmlzRnVuY3Rpb24odmFsdWUpIHx8IHV0aWwuaXNSZWdFeHAodmFsdWUpKSB7CiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTsKICB9CiAgcmV0dXJuIHZhbHVlOwp9CgpmdW5jdGlvbiB0cnVuY2F0ZShzLCBuKSB7CiAgaWYgKHV0aWwuaXNTdHJpbmcocykpIHsKICAgIHJldHVybiBzLmxlbmd0aCA8IG4gPyBzIDogcy5zbGljZSgwLCBuKTsKICB9IGVsc2UgewogICAgcmV0dXJuIHM7CiAgfQp9CgpmdW5jdGlvbiBnZXRNZXNzYWdlKHNlbGYpIHsKICByZXR1cm4gdHJ1bmNhdGUoSlNPTi5zdHJpbmdpZnkoc2VsZi5hY3R1YWwsIHJlcGxhY2VyKSwgMTI4KSArICcgJyArCiAgICAgICAgIHNlbGYub3BlcmF0b3IgKyAnICcgKwogICAgICAgICB0cnVuY2F0ZShKU09OLnN0cmluZ2lmeShzZWxmLmV4cGVjdGVkLCByZXBsYWNlciksIDEyOCk7Cn0KCi8vIEF0IHByZXNlbnQgb25seSB0aGUgdGhyZWUga2V5cyBtZW50aW9uZWQgYWJvdmUgYXJlIHVzZWQgYW5kCi8vIHVuZGVyc3Rvb2QgYnkgdGhlIHNwZWMuIEltcGxlbWVudGF0aW9ucyBvciBzdWIgbW9kdWxlcyBjYW4gcGFzcwovLyBvdGhlciBrZXlzIHRvIHRoZSBBc3NlcnRpb25FcnJvcidzIGNvbnN0cnVjdG9yIC0gdGhleSB3aWxsIGJlCi8vIGlnbm9yZWQuCgovLyAzLiBBbGwgb2YgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgbXVzdCB0aHJvdyBhbiBBc3NlcnRpb25FcnJvcgovLyB3aGVuIGEgY29ycmVzcG9uZGluZyBjb25kaXRpb24gaXMgbm90IG1ldCwgd2l0aCBhIG1lc3NhZ2UgdGhhdAovLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlCi8vIGJvdGggdGhlIGFjdHVhbCBhbmQgZXhwZWN0ZWQgdmFsdWVzIHRvIHRoZSBhc3NlcnRpb24gZXJyb3IgZm9yCi8vIGRpc3BsYXkgcHVycG9zZXMuCgpmdW5jdGlvbiBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yLCBzdGFja1N0YXJ0RnVuY3Rpb24pIHsKICB0aHJvdyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHsKICAgIG1lc3NhZ2U6IG1lc3NhZ2UsCiAgICBhY3R1YWw6IGFjdHVhbCwKICAgIGV4cGVjdGVkOiBleHBlY3RlZCwKICAgIG9wZXJhdG9yOiBvcGVyYXRvciwKICAgIHN0YWNrU3RhcnRGdW5jdGlvbjogc3RhY2tTdGFydEZ1bmN0aW9uCiAgfSk7Cn0KCi8vIEVYVEVOU0lPTiEgYWxsb3dzIGZvciB3ZWxsIGJlaGF2ZWQgZXJyb3JzIGRlZmluZWQgZWxzZXdoZXJlLgphc3NlcnQuZmFpbCA9IGZhaWw7CgovLyA0LiBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkCi8vIGJ5ICEhZ3VhcmQuCi8vIGFzc2VydC5vayhndWFyZCwgbWVzc2FnZV9vcHQpOwovLyBUaGlzIHN0YXRlbWVudCBpcyBlcXVpdmFsZW50IHRvIGFzc2VydC5lcXVhbCh0cnVlLCAhIWd1YXJkLAovLyBtZXNzYWdlX29wdCk7LiBUbyB0ZXN0IHN0cmljdGx5IGZvciB0aGUgdmFsdWUgdHJ1ZSwgdXNlCi8vIGFzc2VydC5zdHJpY3RFcXVhbCh0cnVlLCBndWFyZCwgbWVzc2FnZV9vcHQpOy4KCmZ1bmN0aW9uIG9rKHZhbHVlLCBtZXNzYWdlKSB7CiAgaWYgKCF2YWx1ZSkgZmFpbCh2YWx1ZSwgdHJ1ZSwgbWVzc2FnZSwgJz09JywgYXNzZXJ0Lm9rKTsKfQphc3NlcnQub2sgPSBvazsKCi8vIDUuIFRoZSBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc2hhbGxvdywgY29lcmNpdmUgZXF1YWxpdHkgd2l0aAovLyA9PS4KLy8gYXNzZXJ0LmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTsKCmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKICBpZiAoYWN0dWFsICE9IGV4cGVjdGVkKSBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5lcXVhbCk7Cn07CgovLyA2LiBUaGUgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igd2hldGhlciB0d28gb2JqZWN0cyBhcmUgbm90IGVxdWFsCi8vIHdpdGggIT0gYXNzZXJ0Lm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTsKCmFzc2VydC5ub3RFcXVhbCA9IGZ1bmN0aW9uIG5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKICBpZiAoYWN0dWFsID09IGV4cGVjdGVkKSB7CiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICchPScsIGFzc2VydC5ub3RFcXVhbCk7CiAgfQp9OwoKLy8gNy4gVGhlIGVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBhIGRlZXAgZXF1YWxpdHkgcmVsYXRpb24uCi8vIGFzc2VydC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpOwoKYXNzZXJ0LmRlZXBFcXVhbCA9IGZ1bmN0aW9uIGRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgaWYgKCFfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7CiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwRXF1YWwnLCBhc3NlcnQuZGVlcEVxdWFsKTsKICB9Cn07CgpmdW5jdGlvbiBfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpIHsKICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS4KICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkgewogICAgcmV0dXJuIHRydWU7CgogIH0gZWxzZSBpZiAodXRpbC5pc0J1ZmZlcihhY3R1YWwpICYmIHV0aWwuaXNCdWZmZXIoZXhwZWN0ZWQpKSB7CiAgICBpZiAoYWN0dWFsLmxlbmd0aCAhPSBleHBlY3RlZC5sZW5ndGgpIHJldHVybiBmYWxzZTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdHVhbC5sZW5ndGg7IGkrKykgewogICAgICBpZiAoYWN0dWFsW2ldICE9PSBleHBlY3RlZFtpXSkgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHJldHVybiB0cnVlOwoKICAvLyA3LjIuIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIERhdGUgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzCiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgRGF0ZSBvYmplY3QgdGhhdCByZWZlcnMgdG8gdGhlIHNhbWUgdGltZS4KICB9IGVsc2UgaWYgKHV0aWwuaXNEYXRlKGFjdHVhbCkgJiYgdXRpbC5pc0RhdGUoZXhwZWN0ZWQpKSB7CiAgICByZXR1cm4gYWN0dWFsLmdldFRpbWUoKSA9PT0gZXhwZWN0ZWQuZ2V0VGltZSgpOwoKICAvLyA3LjMgSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgdGhlIGFjdHVhbCB2YWx1ZSBpcwogIC8vIGVxdWl2YWxlbnQgaWYgaXQgaXMgYWxzbyBhIFJlZ0V4cCBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzb3VyY2UgYW5kCiAgLy8gcHJvcGVydGllcyAoYGdsb2JhbGAsIGBtdWx0aWxpbmVgLCBgbGFzdEluZGV4YCwgYGlnbm9yZUNhc2VgKS4KICB9IGVsc2UgaWYgKHV0aWwuaXNSZWdFeHAoYWN0dWFsKSAmJiB1dGlsLmlzUmVnRXhwKGV4cGVjdGVkKSkgewogICAgcmV0dXJuIGFjdHVhbC5zb3VyY2UgPT09IGV4cGVjdGVkLnNvdXJjZSAmJgogICAgICAgICAgIGFjdHVhbC5nbG9iYWwgPT09IGV4cGVjdGVkLmdsb2JhbCAmJgogICAgICAgICAgIGFjdHVhbC5tdWx0aWxpbmUgPT09IGV4cGVjdGVkLm11bHRpbGluZSAmJgogICAgICAgICAgIGFjdHVhbC5sYXN0SW5kZXggPT09IGV4cGVjdGVkLmxhc3RJbmRleCAmJgogICAgICAgICAgIGFjdHVhbC5pZ25vcmVDYXNlID09PSBleHBlY3RlZC5pZ25vcmVDYXNlOwoKICAvLyA3LjQuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsCiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS4KICB9IGVsc2UgaWYgKCF1dGlsLmlzT2JqZWN0KGFjdHVhbCkgJiYgIXV0aWwuaXNPYmplY3QoZXhwZWN0ZWQpKSB7CiAgICByZXR1cm4gYWN0dWFsID09IGV4cGVjdGVkOwoKICAvLyA3LjUgRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpcwogIC8vIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZAogIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXMKICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5CiAgLy8gY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXMKICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy4KICB9IGVsc2UgewogICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQpOwogIH0KfQoKZnVuY3Rpb24gaXNBcmd1bWVudHMob2JqZWN0KSB7CiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nOwp9CgpmdW5jdGlvbiBvYmpFcXVpdihhLCBiKSB7CiAgaWYgKHV0aWwuaXNOdWxsT3JVbmRlZmluZWQoYSkgfHwgdXRpbC5pc051bGxPclVuZGVmaW5lZChiKSkKICAgIHJldHVybiBmYWxzZTsKICAvLyBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuCiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlOwogIC8vfn5+SSd2ZSBtYW5hZ2VkIHRvIGJyZWFrIE9iamVjdC5rZXlzIHRocm91Z2ggc2NyZXd5IGFyZ3VtZW50cyBwYXNzaW5nLgogIC8vICAgQ29udmVydGluZyB0byBhcnJheSBzb2x2ZXMgdGhlIHByb2JsZW0uCiAgaWYgKGlzQXJndW1lbnRzKGEpKSB7CiAgICBpZiAoIWlzQXJndW1lbnRzKGIpKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIGEgPSBwU2xpY2UuY2FsbChhKTsKICAgIGIgPSBwU2xpY2UuY2FsbChiKTsKICAgIHJldHVybiBfZGVlcEVxdWFsKGEsIGIpOwogIH0KICB0cnkgewogICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKSwKICAgICAgICBrYiA9IG9iamVjdEtleXMoYiksCiAgICAgICAga2V5LCBpOwogIH0gY2F0Y2ggKGUpIHsvL2hhcHBlbnMgd2hlbiBvbmUgaXMgYSBzdHJpbmcgbGl0ZXJhbCBhbmQgdGhlIG90aGVyIGlzbid0CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXMKICAvLyBoYXNPd25Qcm9wZXJ0eSkKICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aCkKICAgIHJldHVybiBmYWxzZTsKICAvL3RoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLAogIGthLnNvcnQoKTsKICBrYi5zb3J0KCk7CiAgLy9+fn5jaGVhcCBrZXkgdGVzdAogIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICBpZiAoa2FbaV0gIT0ga2JbaV0pCiAgICAgIHJldHVybiBmYWxzZTsKICB9CiAgLy9lcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXksIGFuZAogIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdAogIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICBrZXkgPSBrYVtpXTsKICAgIGlmICghX2RlZXBFcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIHRydWU7Cn0KCi8vIDguIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LgovLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTsKCmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7CiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwRXF1YWwnLCBhc3NlcnQubm90RGVlcEVxdWFsKTsKICB9Cn07CgovLyA5LiBUaGUgc3RyaWN0IGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzdHJpY3QgZXF1YWxpdHksIGFzIGRldGVybWluZWQgYnkgPT09LgovLyBhc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpOwoKYXNzZXJ0LnN0cmljdEVxdWFsID0gZnVuY3Rpb24gc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7CiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PT0nLCBhc3NlcnQuc3RyaWN0RXF1YWwpOwogIH0KfTsKCi8vIDEwLiBUaGUgc3RyaWN0IG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHN0cmljdCBpbmVxdWFsaXR5LCBhcwovLyBkZXRlcm1pbmVkIGJ5ICE9PS4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7Cgphc3NlcnQubm90U3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHsKICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9PScsIGFzc2VydC5ub3RTdHJpY3RFcXVhbCk7CiAgfQp9OwoKZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkgewogIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChleHBlY3RlZCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHsKICAgIHJldHVybiBleHBlY3RlZC50ZXN0KGFjdHVhbCk7CiAgfSBlbHNlIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBleHBlY3RlZCkgewogICAgcmV0dXJuIHRydWU7CiAgfSBlbHNlIGlmIChleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gX3Rocm93cyhzaG91bGRUaHJvdywgYmxvY2ssIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgdmFyIGFjdHVhbDsKCiAgaWYgKHV0aWwuaXNTdHJpbmcoZXhwZWN0ZWQpKSB7CiAgICBtZXNzYWdlID0gZXhwZWN0ZWQ7CiAgICBleHBlY3RlZCA9IG51bGw7CiAgfQoKICB0cnkgewogICAgYmxvY2soKTsKICB9IGNhdGNoIChlKSB7CiAgICBhY3R1YWwgPSBlOwogIH0KCiAgbWVzc2FnZSA9IChleHBlY3RlZCAmJiBleHBlY3RlZC5uYW1lID8gJyAoJyArIGV4cGVjdGVkLm5hbWUgKyAnKS4nIDogJy4nKSArCiAgICAgICAgICAgIChtZXNzYWdlID8gJyAnICsgbWVzc2FnZSA6ICcuJyk7CgogIGlmIChzaG91bGRUaHJvdyAmJiAhYWN0dWFsKSB7CiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdNaXNzaW5nIGV4cGVjdGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTsKICB9CgogIGlmICghc2hvdWxkVGhyb3cgJiYgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHsKICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ0dvdCB1bndhbnRlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7CiAgfQoKICBpZiAoKHNob3VsZFRocm93ICYmIGFjdHVhbCAmJiBleHBlY3RlZCAmJgogICAgICAhZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8ICghc2hvdWxkVGhyb3cgJiYgYWN0dWFsKSkgewogICAgdGhyb3cgYWN0dWFsOwogIH0KfQoKLy8gMTEuIEV4cGVjdGVkIHRvIHRocm93IGFuIGVycm9yOgovLyBhc3NlcnQudGhyb3dzKGJsb2NrLCBFcnJvcl9vcHQsIG1lc3NhZ2Vfb3B0KTsKCmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHsKICBfdGhyb3dzLmFwcGx5KHRoaXMsIFt0cnVlXS5jb25jYXQocFNsaWNlLmNhbGwoYXJndW1lbnRzKSkpOwp9OwoKLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuCmFzc2VydC5kb2VzTm90VGhyb3cgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovbWVzc2FnZSkgewogIF90aHJvd3MuYXBwbHkodGhpcywgW2ZhbHNlXS5jb25jYXQocFNsaWNlLmNhbGwoYXJndW1lbnRzKSkpOwp9OwoKYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbihlcnIpIHsgaWYgKGVycikge3Rocm93IGVycjt9fTsKCnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikgewogIHZhciBrZXlzID0gW107CiAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgaWYgKGhhc093bi5jYWxsKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7CiAgfQogIHJldHVybiBrZXlzOwp9OwoKfSx7InV0aWwvIjo3fV0sNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7CiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JwogICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nCiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbicKICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nOwp9Cn0se31dLDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKdmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7CmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikgewogIGlmICghaXNTdHJpbmcoZikpIHsKICAgIHZhciBvYmplY3RzID0gW107CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTsKICAgIH0KICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTsKICB9CgogIHZhciBpID0gMTsKICB2YXIgYXJncyA9IGFyZ3VtZW50czsKICB2YXIgbGVuID0gYXJncy5sZW5ndGg7CiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkgewogICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7CiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4OwogICAgc3dpdGNoICh4KSB7CiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pOwogICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTsKICAgICAgY2FzZSAnJWonOgogICAgICAgIHRyeSB7CiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTsKICAgICAgICB9IGNhdGNoIChfKSB7CiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nOwogICAgICAgIH0KICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4geDsKICAgIH0KICB9KTsKICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkgewogICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHsKICAgICAgc3RyICs9ICcgJyArIHg7CiAgICB9IGVsc2UgewogICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTsKICAgIH0KICB9CiAgcmV0dXJuIHN0cjsKfTsKCgovLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLgovLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LgovLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLgpleHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHsKICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLgogIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHsKICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0KCiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkgewogICAgcmV0dXJuIGZuOwogIH0KCiAgdmFyIHdhcm5lZCA9IGZhbHNlOwogIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7CiAgICBpZiAoIXdhcm5lZCkgewogICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7CiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7CiAgICAgICAgY29uc29sZS50cmFjZShtc2cpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTsKICAgICAgfQogICAgICB3YXJuZWQgPSB0cnVlOwogICAgfQogICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICByZXR1cm4gZGVwcmVjYXRlZDsKfTsKCgp2YXIgZGVidWdzID0ge307CnZhciBkZWJ1Z0Vudmlyb247CmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHsKICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSkKICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7CiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7CiAgaWYgKCFkZWJ1Z3Nbc2V0XSkgewogICAgaWYgKG5ldyBSZWdFeHAoJ1xcYicgKyBzZXQgKyAnXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHsKICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkOwogICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpOwogICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpOwogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9OwogICAgfQogIH0KICByZXR1cm4gZGVidWdzW3NldF07Cn07CgoKLyoqCiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXQKICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuCiAqLwovKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovCmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7CiAgLy8gZGVmYXVsdCBvcHRpb25zCiAgdmFyIGN0eCA9IHsKICAgIHNlZW46IFtdLAogICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3IKICB9OwogIC8vIGxlZ2FjeS4uLgogIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTsKICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdOwogIGlmIChpc0Jvb2xlYW4ob3B0cykpIHsKICAgIC8vIGxlZ2FjeS4uLgogICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzOwogIH0gZWxzZSBpZiAob3B0cykgewogICAgLy8gZ290IGFuICJvcHRpb25zIiBvYmplY3QKICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpOwogIH0KICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zCiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTsKICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjsKICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTsKICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7CiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjsKICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7Cn0KZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDsKCgovLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3MKaW5zcGVjdC5jb2xvcnMgPSB7CiAgJ2JvbGQnIDogWzEsIDIyXSwKICAnaXRhbGljJyA6IFszLCAyM10sCiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLAogICdpbnZlcnNlJyA6IFs3LCAyN10sCiAgJ3doaXRlJyA6IFszNywgMzldLAogICdncmV5JyA6IFs5MCwgMzldLAogICdibGFjaycgOiBbMzAsIDM5XSwKICAnYmx1ZScgOiBbMzQsIDM5XSwKICAnY3lhbicgOiBbMzYsIDM5XSwKICAnZ3JlZW4nIDogWzMyLCAzOV0sCiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sCiAgJ3JlZCcgOiBbMzEsIDM5XSwKICAneWVsbG93JyA6IFszMywgMzldCn07CgovLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGUKaW5zcGVjdC5zdHlsZXMgPSB7CiAgJ3NwZWNpYWwnOiAnY3lhbicsCiAgJ251bWJlcic6ICd5ZWxsb3cnLAogICdib29sZWFuJzogJ3llbGxvdycsCiAgJ3VuZGVmaW5lZCc6ICdncmV5JywKICAnbnVsbCc6ICdib2xkJywKICAnc3RyaW5nJzogJ2dyZWVuJywKICAnZGF0ZSc6ICdtYWdlbnRhJywKICAvLyAibmFtZSI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmcKICAncmVnZXhwJzogJ3JlZCcKfTsKCgpmdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7CiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTsKCiAgaWYgKHN0eWxlKSB7CiAgICByZXR1cm4gJ1x1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICsKICAgICAgICAgICAnXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7CiAgfSBlbHNlIHsKICAgIHJldHVybiBzdHI7CiAgfQp9CgoKZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHsKICByZXR1cm4gc3RyOwp9CgoKZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHsKICB2YXIgaGFzaCA9IHt9OwoKICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7CiAgICBoYXNoW3ZhbF0gPSB0cnVlOwogIH0pOwoKICByZXR1cm4gaGFzaDsKfQoKCmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykgewogIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy4KICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXQKICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiYKICAgICAgdmFsdWUgJiYKICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJgogICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWwKICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmCiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLgogICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7CiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7CiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHsKICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7CiAgICB9CiAgICByZXR1cm4gcmV0OwogIH0KCiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXMKICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpOwogIGlmIChwcmltaXRpdmUpIHsKICAgIHJldHVybiBwcmltaXRpdmU7CiAgfQoKICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuCiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7CiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7CgogIGlmIChjdHguc2hvd0hpZGRlbikgewogICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTsKICB9CgogIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGUKICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweAogIGlmIChpc0Vycm9yKHZhbHVlKQogICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHsKICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7CiAgfQoKICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuCiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7CiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHsKICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJzsKICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTsKICAgIH0KICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTsKICAgIH0KICAgIGlmIChpc0RhdGUodmFsdWUpKSB7CiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTsKICAgIH0KICAgIGlmIChpc0Vycm9yKHZhbHVlKSkgewogICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpOwogICAgfQogIH0KCiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTsKCiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheQogIGlmIChpc0FycmF5KHZhbHVlKSkgewogICAgYXJyYXkgPSB0cnVlOwogICAgYnJhY2VzID0gWydbJywgJ10nXTsKICB9CgogIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9ucwogIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkgewogICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJzsKICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nOwogIH0KCiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHMKICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7CiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTsKICB9CgogIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZQogIGlmIChpc0RhdGUodmFsdWUpKSB7CiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7CiAgfQoKICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yCiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7CiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpOwogIH0KCiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7CiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTsKICB9CgogIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7CiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7CiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTsKICAgIH0KICB9CgogIGN0eC5zZWVuLnB1c2godmFsdWUpOwoKICB2YXIgb3V0cHV0OwogIGlmIChhcnJheSkgewogICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7CiAgfSBlbHNlIHsKICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkgewogICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7CiAgICB9KTsKICB9CgogIGN0eC5zZWVuLnBvcCgpOwoKICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpOwp9CgoKZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHsKICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKQogICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7CiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkgewogICAgdmFyIHNpbXBsZSA9ICdcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXiJ8IiQvZywgJycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csICJcXCciKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwiL2csICciJykgKyAnXCcnOwogICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpOwogIH0KICBpZiAoaXNOdW1iZXIodmFsdWUpKQogICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTsKICBpZiAoaXNCb29sZWFuKHZhbHVlKSkKICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpOwogIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyAib2JqZWN0Iiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuCiAgaWYgKGlzTnVsbCh2YWx1ZSkpCiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpOwp9CgoKZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHsKICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nOwp9CgoKZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykgewogIHZhciBvdXRwdXQgPSBbXTsKICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkgewogICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7CiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsCiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTsKICAgIH0gZWxzZSB7CiAgICAgIG91dHB1dC5wdXNoKCcnKTsKICAgIH0KICB9CiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgewogICAgaWYgKCFrZXkubWF0Y2goL15cZCskLykpIHsKICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywKICAgICAgICAgIGtleSwgdHJ1ZSkpOwogICAgfQogIH0pOwogIHJldHVybiBvdXRwdXQ7Cn0KCgpmdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7CiAgdmFyIG5hbWUsIHN0ciwgZGVzYzsKICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07CiAgaWYgKGRlc2MuZ2V0KSB7CiAgICBpZiAoZGVzYy5zZXQpIHsKICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7CiAgICB9IGVsc2UgewogICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpOwogICAgfQogIH0gZWxzZSB7CiAgICBpZiAoZGVzYy5zZXQpIHsKICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTsKICAgIH0KICB9CiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkgewogICAgbmFtZSA9ICdbJyArIGtleSArICddJzsKICB9CiAgaWYgKCFzdHIpIHsKICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkgewogICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHsKICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpOwogICAgICB9IGVsc2UgewogICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7CiAgICAgIH0KICAgICAgaWYgKHN0ci5pbmRleE9mKCdcbicpID4gLTEpIHsKICAgICAgICBpZiAoYXJyYXkpIHsKICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXG4nKS5tYXAoZnVuY3Rpb24obGluZSkgewogICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7CiAgICAgICAgICB9KS5qb2luKCdcbicpLnN1YnN0cigyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc3RyID0gJ1xuJyArIHN0ci5zcGxpdCgnXG4nKS5tYXAoZnVuY3Rpb24obGluZSkgewogICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lOwogICAgICAgICAgfSkuam9pbignXG4nKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTsKICAgIH0KICB9CiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7CiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXGQrJC8pKSB7CiAgICAgIHJldHVybiBzdHI7CiAgICB9CiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpOwogICAgaWYgKG5hbWUubWF0Y2goL14iKFthLXpBLVpfXVthLXpBLVpfMC05XSopIiQvKSkgewogICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTsKICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7CiAgICB9IGVsc2UgewogICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csICJcXCciKQogICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCIvZywgJyInKQogICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXiJ8IiQpL2csICInIik7CiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7CiAgICB9CiAgfQoKICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7Cn0KCgpmdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykgewogIHZhciBudW1MaW5lc0VzdCA9IDA7CiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7CiAgICBudW1MaW5lc0VzdCsrOwogICAgaWYgKGN1ci5pbmRleE9mKCdcbicpID49IDApIG51bUxpbmVzRXN0Kys7CiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cdTAwMWJcW1xkXGQ/bS9nLCAnJykubGVuZ3RoICsgMTsKICB9LCAwKTsKCiAgaWYgKGxlbmd0aCA+IDYwKSB7CiAgICByZXR1cm4gYnJhY2VzWzBdICsKICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXG4gJykgKwogICAgICAgICAgICcgJyArCiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcbiAgJykgKwogICAgICAgICAgICcgJyArCiAgICAgICAgICAgYnJhY2VzWzFdOwogIH0KCiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTsKfQoKCi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYAovLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC4KZnVuY3Rpb24gaXNBcnJheShhcikgewogIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTsKfQpleHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5OwoKZnVuY3Rpb24gaXNCb29sZWFuKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7Cn0KZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47CgpmdW5jdGlvbiBpc051bGwoYXJnKSB7CiAgcmV0dXJuIGFyZyA9PT0gbnVsbDsKfQpleHBvcnRzLmlzTnVsbCA9IGlzTnVsbDsKCmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykgewogIHJldHVybiBhcmcgPT0gbnVsbDsKfQpleHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7CgpmdW5jdGlvbiBpc051bWJlcihhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7Cn0KZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyOwoKZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnOwp9CmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZzsKCmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJzsKfQpleHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7CgpmdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHsKICByZXR1cm4gYXJnID09PSB2b2lkIDA7Cn0KZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkOwoKZnVuY3Rpb24gaXNSZWdFeHAocmUpIHsKICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7Cn0KZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwOwoKZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDsKfQpleHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7CgpmdW5jdGlvbiBpc0RhdGUoZCkgewogIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nOwp9CmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlOwoKZnVuY3Rpb24gaXNFcnJvcihlKSB7CiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmCiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpOwp9CmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7CgpmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nOwp9CmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247CgpmdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHsKICByZXR1cm4gYXJnID09PSBudWxsIHx8CiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fAogICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fAogICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fAogICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbAogICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJzsKfQpleHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7CgpleHBvcnRzLmlzQnVmZmVyID0gX2RlcmVxXygnLi9zdXBwb3J0L2lzQnVmZmVyJyk7CgpmdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7CiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTsKfQoKCmZ1bmN0aW9uIHBhZChuKSB7CiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7Cn0KCgp2YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsCiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107CgovLyAyNiBGZWIgMTY6MTk6MzQKZnVuY3Rpb24gdGltZXN0YW1wKCkgewogIHZhciBkID0gbmV3IERhdGUoKTsKICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSwKICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLAogICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTsKICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpOwp9CgoKLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcApleHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkgewogIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpOwp9OwoKCi8qKgogKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuCiAqCiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmUKICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkCiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlCiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhcwogKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS4KICoKICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZQogKiAgICAgcHJvdG90eXBlLgogKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS4KICovCmV4cG9ydHMuaW5oZXJpdHMgPSBfZGVyZXFfKCdpbmhlcml0cycpOwoKZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHsKICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0CiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47CgogIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTsKICB2YXIgaSA9IGtleXMubGVuZ3RoOwogIHdoaWxlIChpLS0pIHsKICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTsKICB9CiAgcmV0dXJuIG9yaWdpbjsKfTsKCmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkgewogIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsKfQoKfSkuY2FsbCh0aGlzLF9kZXJlcV8oIi9Vc2Vycy9uZG9ubmVsbHkvcHJvZ3JhbV9zb3VyY2VfZm9yX2Rldi9maC1qcy1zZGsvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2luc2VydC1tb2R1bGUtZ2xvYmFscy9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiksdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCn0seyIuL3N1cHBvcnQvaXNCdWZmZXIiOjYsIi9Vc2Vycy9uZG9ubmVsbHkvcHJvZ3JhbV9zb3VyY2VfZm9yX2Rldi9maC1qcy1zZGsvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2luc2VydC1tb2R1bGUtZ2xvYmFscy9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIjoxMSwiaW5oZXJpdHMiOjEwfV0sODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKLypnbG9iYWwgd2luZG93LCBnbG9iYWwqLwp2YXIgdXRpbCA9IF9kZXJlcV8oInV0aWwiKQp2YXIgYXNzZXJ0ID0gX2RlcmVxXygiYXNzZXJ0IikKCnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZQp2YXIgY29uc29sZQp2YXIgdGltZXMgPSB7fQoKaWYgKHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiICYmIGdsb2JhbC5jb25zb2xlKSB7CiAgICBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUKfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiAmJiB3aW5kb3cuY29uc29sZSkgewogICAgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlCn0gZWxzZSB7CiAgICBjb25zb2xlID0ge30KfQoKdmFyIGZ1bmN0aW9ucyA9IFsKICAgIFtsb2csICJsb2ciXQogICAgLCBbaW5mbywgImluZm8iXQogICAgLCBbd2FybiwgIndhcm4iXQogICAgLCBbZXJyb3IsICJlcnJvciJdCiAgICAsIFt0aW1lLCAidGltZSJdCiAgICAsIFt0aW1lRW5kLCAidGltZUVuZCJdCiAgICAsIFt0cmFjZSwgInRyYWNlIl0KICAgICwgW2RpciwgImRpciJdCiAgICAsIFthc3NlcnQsICJhc3NlcnQiXQpdCgpmb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykgewogICAgdmFyIHR1cGxlID0gZnVuY3Rpb25zW2ldCiAgICB2YXIgZiA9IHR1cGxlWzBdCiAgICB2YXIgbmFtZSA9IHR1cGxlWzFdCgogICAgaWYgKCFjb25zb2xlW25hbWVdKSB7CiAgICAgICAgY29uc29sZVtuYW1lXSA9IGYKICAgIH0KfQoKbW9kdWxlLmV4cG9ydHMgPSBjb25zb2xlCgpmdW5jdGlvbiBsb2coKSB7fQoKZnVuY3Rpb24gaW5mbygpIHsKICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cykKfQoKZnVuY3Rpb24gd2FybigpIHsKICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cykKfQoKZnVuY3Rpb24gZXJyb3IoKSB7CiAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKQp9CgpmdW5jdGlvbiB0aW1lKGxhYmVsKSB7CiAgICB0aW1lc1tsYWJlbF0gPSBEYXRlLm5vdygpCn0KCmZ1bmN0aW9uIHRpbWVFbmQobGFiZWwpIHsKICAgIHZhciB0aW1lID0gdGltZXNbbGFiZWxdCiAgICBpZiAoIXRpbWUpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIk5vIHN1Y2ggbGFiZWw6ICIgKyBsYWJlbCkKICAgIH0KCiAgICB2YXIgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gdGltZQogICAgY29uc29sZS5sb2cobGFiZWwgKyAiOiAiICsgZHVyYXRpb24gKyAibXMiKQp9CgpmdW5jdGlvbiB0cmFjZSgpIHsKICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKQogICAgZXJyLm5hbWUgPSAiVHJhY2UiCiAgICBlcnIubWVzc2FnZSA9IHV0aWwuZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cykKICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrKQp9CgpmdW5jdGlvbiBkaXIob2JqZWN0KSB7CiAgICBjb25zb2xlLmxvZyh1dGlsLmluc3BlY3Qob2JqZWN0KSArICJcbiIpCn0KCmZ1bmN0aW9uIGFzc2VydChleHByZXNzaW9uKSB7CiAgICBpZiAoIWV4cHJlc3Npb24pIHsKICAgICAgICB2YXIgYXJyID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpCiAgICAgICAgYXNzZXJ0Lm9rKGZhbHNlLCB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcnIpKQogICAgfQp9Cgp9KS5jYWxsKHRoaXMsdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCn0seyJhc3NlcnQiOjUsInV0aWwiOjEzfV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHsKICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307CiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDsKfQptb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjsKCi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueApFdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyOwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkOwpFdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7CgovLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmUKLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy4KRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDsKCi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93cwovLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC4KRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7CiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSkKICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7CiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjsKICByZXR1cm4gdGhpczsKfTsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHsKICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzOwoKICBpZiAoIXRoaXMuX2V2ZW50cykKICAgIHRoaXMuX2V2ZW50cyA9IHt9OwoKICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuCiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHsKICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8CiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7CiAgICAgIGVyID0gYXJndW1lbnRzWzFdOwogICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikgewogICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudAogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IFR5cGVFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkICJlcnJvciIgZXZlbnQuJyk7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTsKCiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKQogICAgcmV0dXJuIGZhbHNlOwoKICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkgewogICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgIC8vIGZhc3QgY2FzZXMKICAgICAgY2FzZSAxOgogICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAyOgogICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDM6CiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTsKICAgICAgICBicmVhazsKICAgICAgLy8gc2xvd2VyCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpOwogICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKykKICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldOwogICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7CiAgICB9CiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkgewogICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7CiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspCiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldOwoKICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTsKICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspCiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTsKICB9CgogIHJldHVybiB0cnVlOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7CiAgdmFyIG07CgogIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpCiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpOwoKICBpZiAoIXRoaXMuX2V2ZW50cykKICAgIHRoaXMuX2V2ZW50cyA9IHt9OwoKICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSAibmV3TGlzdGVuZXIiISBCZWZvcmUKICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCAibmV3TGlzdGVuZXIiLgogIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpCiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSwKICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/CiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7CgogIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKQogICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuCiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjsKICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKQogICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLgogICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpOwogIGVsc2UKICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LgogICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdOwoKICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVhawogIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7CiAgICB2YXIgbTsKICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkgewogICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzOwogICAgfSBlbHNlIHsKICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzOwogICAgfQoKICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7CiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlOwogICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICsKICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICsKICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJywKICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTsKICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMAogICAgICAgIGNvbnNvbGUudHJhY2UoKTsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIHRoaXM7Cn07CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7CiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkKICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CgogIHZhciBmaXJlZCA9IGZhbHNlOwoKICBmdW5jdGlvbiBnKCkgewogICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTsKCiAgICBpZiAoIWZpcmVkKSB7CiAgICAgIGZpcmVkID0gdHJ1ZTsKICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KICB9CgogIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjsKICB0aGlzLm9uKHR5cGUsIGcpOwoKICByZXR1cm4gdGhpczsKfTsKCi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkCkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikgewogIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpOwoKICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKQogICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKCiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSkKICAgIHJldHVybiB0aGlzOwoKICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdOwogIGxlbmd0aCA9IGxpc3QubGVuZ3RoOwogIHBvc2l0aW9uID0gLTE7CgogIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fAogICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHsKICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07CiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKQogICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpOwoKICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7CiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7CiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fAogICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7CiAgICAgICAgcG9zaXRpb24gPSBpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgaWYgKHBvc2l0aW9uIDwgMCkKICAgICAgcmV0dXJuIHRoaXM7CgogICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7CiAgICAgIGxpc3QubGVuZ3RoID0gMDsKICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTsKICAgIH0gZWxzZSB7CiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTsKICAgIH0KCiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKQogICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpOwogIH0KCiAgcmV0dXJuIHRoaXM7Cn07CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHsKICB2YXIga2V5LCBsaXN0ZW5lcnM7CgogIGlmICghdGhpcy5fZXZlbnRzKQogICAgcmV0dXJuIHRoaXM7CgogIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXQKICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApCiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9OwogICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKQogICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdOwogICAgcmV0dXJuIHRoaXM7CiAgfQoKICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHMKICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgewogICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7CiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlOwogICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpOwogICAgfQogICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7CiAgICB0aGlzLl9ldmVudHMgPSB7fTsKICAgIHJldHVybiB0aGlzOwogIH0KCiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdOwoKICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7CiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7CiAgfSBlbHNlIHsKICAgIC8vIExJRk8gb3JkZXIKICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKQogICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pOwogIH0KICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdOwoKICByZXR1cm4gdGhpczsKfTsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkgewogIHZhciByZXQ7CiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSkKICAgIHJldCA9IFtdOwogIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSkKICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dOwogIGVsc2UKICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpOwogIHJldHVybiByZXQ7Cn07CgpFdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHsKICB2YXIgcmV0OwogIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbdHlwZV0pCiAgICByZXQgPSAwOwogIGVsc2UgaWYgKGlzRnVuY3Rpb24oZW1pdHRlci5fZXZlbnRzW3R5cGVdKSkKICAgIHJldCA9IDE7CiAgZWxzZQogICAgcmV0ID0gZW1pdHRlci5fZXZlbnRzW3R5cGVdLmxlbmd0aDsKICByZXR1cm4gcmV0Owp9OwoKZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJzsKfQoKZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInOwp9CgpmdW5jdGlvbiBpc09iamVjdChhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsOwp9CgpmdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHsKICByZXR1cm4gYXJnID09PSB2b2lkIDA7Cn0KCn0se31dLDEwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7CiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGUKICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikgewogICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3IKICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7CiAgICAgIGNvbnN0cnVjdG9yOiB7CiAgICAgICAgdmFsdWU6IGN0b3IsCiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsCiAgICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICAgIH0KICAgIH0pOwogIH07Cn0gZWxzZSB7CiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnMKICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikgewogICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3IKICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9CiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlCiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpCiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3IKICB9Cn0KCn0se31dLDExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyCgp2YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307Cgpwcm9jZXNzLm5leHRUaWNrID0gKGZ1bmN0aW9uICgpIHsKICAgIHZhciBjYW5TZXRJbW1lZGlhdGUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJwogICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTsKICAgIHZhciBjYW5Qb3N0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcKICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcgogICAgOwoKICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTsKICAgIH0KCiAgICBpZiAoY2FuUG9zdCkgewogICAgICAgIHZhciBxdWV1ZSA9IFtdOwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7CiAgICAgICAgICAgIGlmICgoc291cmNlID09PSB3aW5kb3cgfHwgc291cmNlID09PSBudWxsKSAmJiBldi5kYXRhID09PSAncHJvY2Vzcy10aWNrJykgewogICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IHF1ZXVlLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICAgICAgZm4oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sIHRydWUpOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHsKICAgICAgICAgICAgcXVldWUucHVzaChmbik7CiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTsKICAgICAgICB9OwogICAgfQoKICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikgewogICAgICAgIHNldFRpbWVvdXQoZm4sIDApOwogICAgfTsKfSkoKTsKCnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7CnByb2Nlc3MuYnJvd3NlciA9IHRydWU7CnByb2Nlc3MuZW52ID0ge307CnByb2Nlc3MuYXJndiA9IFtdOwoKcHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTsKfQoKLy8gVE9ETyhzaHR5bG1hbikKcHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTsKcHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHsKICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7Cn07Cgp9LHt9XSwxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzPV9kZXJlcV8oNikKfSx7fV0sMTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cz1fZGVyZXFfKDcpCn0seyIuL3N1cHBvcnQvaXNCdWZmZXIiOjEyLCIvVXNlcnMvbmRvbm5lbGx5L3Byb2dyYW1fc291cmNlX2Zvcl9kZXYvZmgtanMtc2RrL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pbnNlcnQtbW9kdWxlLWdsb2JhbHMvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyI6MTEsImluaGVyaXRzIjoxMH1dLDE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKLyoKICogbG9nbGV2ZWwgLSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWwKICoKICogQ29weXJpZ2h0IChjKSAyMDEzIFRpbSBQZXJyeQogKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqLwoKOyhmdW5jdGlvbiAodW5kZWZpbmVkKSB7CiAgICB2YXIgdW5kZWZpbmVkVHlwZSA9ICJ1bmRlZmluZWQiOwoKICAgIChmdW5jdGlvbiAobmFtZSwgZGVmaW5pdGlvbikgewogICAgICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgIGRlZmluZShkZWZpbml0aW9uKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzW25hbWVdID0gZGVmaW5pdGlvbigpOwogICAgICAgIH0KICAgIH0oJ2xvZycsIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgc2VsZiA9IHt9OwogICAgICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTsKCiAgICAgICAgZnVuY3Rpb24gcmVhbE1ldGhvZChtZXRob2ROYW1lKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5vb3A7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uc29sZVttZXRob2ROYW1lXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBpZiAoY29uc29sZS5sb2cgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBib3VuZFRvQ29uc29sZShjb25zb2xlLCAnbG9nJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBub29wOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGJvdW5kVG9Db25zb2xlKGNvbnNvbGUsIG1ldGhvZE5hbWUpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBib3VuZFRvQ29uc29sZShjb25zb2xlLCBtZXRob2ROYW1lKSB7CiAgICAgICAgICAgIHZhciBtZXRob2QgPSBjb25zb2xlW21ldGhvZE5hbWVdOwogICAgICAgICAgICBpZiAobWV0aG9kLmJpbmQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb25CaW5kaW5nV3JhcHBlcihtZXRob2QsIGNvbnNvbGUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChjb25zb2xlW21ldGhvZE5hbWVdLCBjb25zb2xlKTsKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIElFOCArIE1vZGVybml6ciwgdGhlIGJpbmQgc2hpbSB3aWxsIHJlamVjdCB0aGUgYWJvdmUsIHNvIHdlIGZhbGwgYmFjayB0byB3cmFwcGluZwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb25CaW5kaW5nV3JhcHBlcihtZXRob2QsIGNvbnNvbGUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlW21ldGhvZE5hbWVdLmJpbmQoY29uc29sZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGZ1bmN0aW9uQmluZGluZ1dyYXBwZXIoZiwgY29udGV4dCkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkoZiwgW2NvbnRleHQsIGFyZ3VtZW50c10pOwogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgdmFyIGxvZ01ldGhvZHMgPSBbCiAgICAgICAgICAgICJ0cmFjZSIsCiAgICAgICAgICAgICJkZWJ1ZyIsCiAgICAgICAgICAgICJpbmZvIiwKICAgICAgICAgICAgIndhcm4iLAogICAgICAgICAgICAiZXJyb3IiCiAgICAgICAgXTsKCiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvZ2dpbmdNZXRob2RzKG1ldGhvZEZhY3RvcnkpIHsKICAgICAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGxvZ01ldGhvZHMubGVuZ3RoOyBpaSsrKSB7CiAgICAgICAgICAgICAgICBzZWxmW2xvZ01ldGhvZHNbaWldXSA9IG1ldGhvZEZhY3RvcnkobG9nTWV0aG9kc1tpaV0pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjb29raWVzQXZhaWxhYmxlKCkgewogICAgICAgICAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUgJiYKICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQgIT09IHVuZGVmaW5lZCAmJgogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgIT09IHVuZGVmaW5lZCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBsb2NhbFN0b3JhZ2VBdmFpbGFibGUoKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUgJiYKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZSAhPT0gdW5kZWZpbmVkKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsTnVtKSB7CiAgICAgICAgICAgIHZhciBsb2NhbFN0b3JhZ2VGYWlsID0gZmFsc2UsCiAgICAgICAgICAgICAgICBsZXZlbE5hbWU7CgogICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2VsZi5sZXZlbHMpIHsKICAgICAgICAgICAgICAgIGlmIChzZWxmLmxldmVscy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHNlbGYubGV2ZWxzW2tleV0gPT09IGxldmVsTnVtKSB7CiAgICAgICAgICAgICAgICAgICAgbGV2ZWxOYW1lID0ga2V5OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobG9jYWxTdG9yYWdlQXZhaWxhYmxlKCkpIHsKICAgICAgICAgICAgICAgIC8qCiAgICAgICAgICAgICAgICAgKiBTZXR0aW5nIGxvY2FsU3RvcmFnZSBjYW4gY3JlYXRlIGEgRE9NIDIyIEV4Y2VwdGlvbiBpZiBydW5uaW5nIGluIFByaXZhdGUgbW9kZQogICAgICAgICAgICAgICAgICogaW4gU2FmYXJpLCBzbyBldmVuIGlmIGl0IGlzIGF2YWlsYWJsZSB3ZSBuZWVkIHRvIGNhdGNoIGFueSBlcnJvcnMgd2hlbiB0cnlpbmcKICAgICAgICAgICAgICAgICAqIHRvIHdyaXRlIHRvIGl0CiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVsnbG9nbGV2ZWwnXSA9IGxldmVsTmFtZTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2VGYWlsID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZUZhaWwgPSB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobG9jYWxTdG9yYWdlRmFpbCAmJiBjb29raWVzQXZhaWxhYmxlKCkpIHsKICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgPSAibG9nbGV2ZWw9IiArIGxldmVsTmFtZSArICI7IjsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIGNvb2tpZVJlZ2V4ID0gL2xvZ2xldmVsPShbXjtdKykvOwoKICAgICAgICBmdW5jdGlvbiBsb2FkUGVyc2lzdGVkTGV2ZWwoKSB7CiAgICAgICAgICAgIHZhciBzdG9yZWRMZXZlbDsKCiAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2VBdmFpbGFibGUoKSkgewogICAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB3aW5kb3cubG9jYWxTdG9yYWdlWydsb2dsZXZlbCddOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3RvcmVkTGV2ZWwgPT09IHVuZGVmaW5lZCAmJiBjb29raWVzQXZhaWxhYmxlKCkpIHsKICAgICAgICAgICAgICAgIHZhciBjb29raWVNYXRjaCA9IGNvb2tpZVJlZ2V4LmV4ZWMod2luZG93LmRvY3VtZW50LmNvb2tpZSkgfHwgW107CiAgICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IGNvb2tpZU1hdGNoWzFdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoc2VsZi5sZXZlbHNbc3RvcmVkTGV2ZWxdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHN0b3JlZExldmVsID0gIldBUk4iOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzW3N0b3JlZExldmVsXSk7CiAgICAgICAgfQoKICAgICAgICAvKgogICAgICAgICAqCiAgICAgICAgICogUHVibGljIEFQSQogICAgICAgICAqCiAgICAgICAgICovCgogICAgICAgIHNlbGYubGV2ZWxzID0geyAiVFJBQ0UiOiAwLCAiREVCVUciOiAxLCAiSU5GTyI6IDIsICJXQVJOIjogMywKICAgICAgICAgICAgIkVSUk9SIjogNCwgIlNJTEVOVCI6IDV9OwoKICAgICAgICBzZWxmLnNldExldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICJudW1iZXIiICYmIGxldmVsID49IDAgJiYgbGV2ZWwgPD0gc2VsZi5sZXZlbHMuU0lMRU5UKSB7CiAgICAgICAgICAgICAgICBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsKTsKCiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPT09IHNlbGYubGV2ZWxzLlNJTEVOVCkgewogICAgICAgICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcyhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub29wOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUpIHsKICAgICAgICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMoZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkVHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0TGV2ZWwobGV2ZWwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGZbbWV0aG9kTmFtZV0uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIk5vIGNvbnNvbGUgYXZhaWxhYmxlIGZvciBsb2dnaW5nIjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUxvZ2dpbmdNZXRob2RzKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZXZlbCA8PSBzZWxmLmxldmVsc1ttZXRob2ROYW1lLnRvVXBwZXJDYXNlKCldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhbE1ldGhvZChtZXRob2ROYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub29wOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxldmVsID09PSAic3RyaW5nIiAmJiBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93ICJsb2cuc2V0TGV2ZWwoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGxldmVsOiAiICsgbGV2ZWw7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBzZWxmLmVuYWJsZUFsbCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzLlRSQUNFKTsKICAgICAgICB9OwoKICAgICAgICBzZWxmLmRpc2FibGVBbGwgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5TSUxFTlQpOwogICAgICAgIH07CgogICAgICAgIGxvYWRQZXJzaXN0ZWRMZXZlbCgpOwogICAgICAgIHJldHVybiBzZWxmOwogICAgfSkpOwp9KSgpOwoKfSx7fV0sMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nDQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsKXsNCiAgc3dpdGNoICh0b1N0cmluZy5jYWxsKHZhbCkpIHsNCiAgICBjYXNlICdbb2JqZWN0IEZ1bmN0aW9uXSc6IHJldHVybiAnZnVuY3Rpb24nDQogICAgY2FzZSAnW29iamVjdCBEYXRlXSc6IHJldHVybiAnZGF0ZScNCiAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOiByZXR1cm4gJ3JlZ2V4cCcNCiAgICBjYXNlICdbb2JqZWN0IEFyZ3VtZW50c10nOiByZXR1cm4gJ2FyZ3VtZW50cycNCiAgICBjYXNlICdbb2JqZWN0IEFycmF5XSc6IHJldHVybiAnYXJyYXknDQogICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzogcmV0dXJuICdzdHJpbmcnDQogIH0NCg0KICBpZiAodHlwZW9mIHZhbCA9PSAnb2JqZWN0JyAmJiB2YWwgJiYgdHlwZW9mIHZhbC5sZW5ndGggPT0gJ251bWJlcicpIHsNCiAgICB0cnkgew0KICAgICAgaWYgKHR5cGVvZiB2YWwuY2FsbGVlID09ICdmdW5jdGlvbicpIHJldHVybiAnYXJndW1lbnRzJzsNCiAgICB9IGNhdGNoIChleCkgew0KICAgICAgaWYgKGV4IGluc3RhbmNlb2YgVHlwZUVycm9yKSB7DQogICAgICAgIHJldHVybiAnYXJndW1lbnRzJzsNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICBpZiAodmFsID09PSBudWxsKSByZXR1cm4gJ251bGwnDQogIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuICd1bmRlZmluZWQnDQogIGlmICh2YWwgJiYgdmFsLm5vZGVUeXBlID09PSAxKSByZXR1cm4gJ2VsZW1lbnQnDQogIGlmICh2YWwgPT09IE9iamVjdCh2YWwpKSByZXR1cm4gJ29iamVjdCcNCg0KICByZXR1cm4gdHlwZW9mIHZhbA0KfQ0KCn0se31dLDE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oIi4vbW9kdWxlcy9jb25zdGFudHMiKTsKdmFyIGV2ZW50cyA9IF9kZXJlcV8oIi4vbW9kdWxlcy9ldmVudHMiKTsKdmFyIGxvZ2dlciA9IF9kZXJlcV8oIi4vbW9kdWxlcy9sb2dnZXIiKTsKdmFyIGFqYXggPSBfZGVyZXFfKCIuL21vZHVsZXMvYWpheCIpOwp2YXIgZXZlbnRzID0gX2RlcmVxXygiLi9tb2R1bGVzL2V2ZW50cyIpOwp2YXIgY2xvdWQgPSBfZGVyZXFfKCIuL21vZHVsZXMvd2FpdEZvckNsb3VkIik7CnZhciBhcGlfYWN0ID0gX2RlcmVxXygiLi9tb2R1bGVzL2FwaV9hY3QiKTsKdmFyIGFwaV9hdXRoID0gX2RlcmVxXygiLi9tb2R1bGVzL2FwaV9hdXRoIik7CnZhciBhcGlfc2VjID0gX2RlcmVxXygiLi9tb2R1bGVzL2FwaV9zZWMiKTsKdmFyIGFwaV9oYXNoID0gX2RlcmVxXygiLi9tb2R1bGVzL2FwaV9oYXNoIik7CnZhciBhcGlfc3luYyA9IF9kZXJlcV8oIi4vbW9kdWxlcy9zeW5jLWNsaSIpOwp2YXIgYXBpX21iYWFzID0gX2RlcmVxXygiLi9tb2R1bGVzL2FwaV9tYmFhcyIpOwp2YXIgYXBpX2Nsb3VkID0gX2RlcmVxXygiLi9tb2R1bGVzL2FwaV9jbG91ZCIpOwp2YXIgZmhwYXJhbXMgPSBfZGVyZXFfKCIuL21vZHVsZXMvZmhwYXJhbXMiKTsKdmFyIGFwcFByb3BzID0gX2RlcmVxXygiLi9tb2R1bGVzL2FwcFByb3BzIik7CnZhciBkZXZpY2UgPSBfZGVyZXFfKCIuL21vZHVsZXMvZGV2aWNlIik7Cgp2YXIgZGVmYXVsdEZhaWwgPSBmdW5jdGlvbihtc2csIGVycm9yKXsKICBsb2dnZXIuZXJyb3IobXNnICsgIjoiICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IpKTsKfTsKCnZhciBhZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKXsKICBldmVudHMuYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpOwogIGlmKHR5cGUgPT09IGNvbnN0YW50cy5JTklUX0VWRU5UKXsKICAgIC8vZm9yIGZoaW5pdCBldmVudCwgbmVlZCB0byBjaGVjayB0aGUgc3RhdHVzIG9mIGNsb3VkIGFuZCBtYXkgbmVlZCB0byBmaXJlIHRoZSBsaXN0ZW5lciBpbW1lZGlhdGVseS4KICAgIGlmKGNsb3VkLmlzUmVhZHkoKSl7CiAgICAgIGxpc3RlbmVyKG51bGwsIHtob3N0OiBjbG91ZC5nZXRDbG91ZEhvc3RVcmwoKX0pOwogICAgfSBlbHNlIGlmKGNsb3VkLmdldEluaXRFcnJvcigpKXsKICAgICAgbGlzdGVuZXIoY2xvdWQuZ2V0SW5pdEVycm9yKCkpOwogICAgfQogIH0KfTsKCnZhciBvbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpewogIGlmKHR5cGUgPT09IGNvbnN0YW50cy5JTklUX0VWRU5UICYmIGNsb3VkLmlzUmVhZHkoKSl7CiAgICBsaXN0ZW5lcihudWxsLCB7aG9zdDogY2xvdWQuZ2V0Q2xvdWRIb3N0VXJsKCl9KTsKICB9IGVsc2UgaWYodHlwZSA9PT0gY29uc3RhbnRzLklOSVRfRVZFTlQgJiYgY2xvdWQuZ2V0SW5pdEVycm9yKCkpewogICAgbGlzdGVuZXIoY2xvdWQuZ2V0SW5pdEVycm9yKCkpOwogIH0gZWxzZSB7CiAgICBldmVudHMub25jZSh0eXBlLCBsaXN0ZW5lcik7CiAgfQp9OwoKLy9MZWdhY3kgc2hpbS4gSW5pdCBoYXBlbnMgYmFzZWQgb24gZmhjb25maWcuanNvbiBvciwgZm9yIHYyLCBnbG9iYWwgdmFyIGNhbGxlZCBmaF9hcHBfcHJvcHMgd2hpY2ggaXMgaW5qZWN0ZWQgYXMgcGFydCBvZiB0aGUgaW5kZXguaHRtbCB3cmFwcGVyCnZhciBpbml0ID0gZnVuY3Rpb24ob3B0cywgc3VjY2VzcywgZmFpbCl7CiAgbG9nZ2VyLndhcm4oIiRmaC5pbml0IHdpbGwgYmUgZGVwcmVjYXRlZCBzb29uIik7CiAgY2xvdWQucmVhZHkoZnVuY3Rpb24oZXJyLCBob3N0KXsKICAgIGlmKGVycil7CiAgICAgIGlmKHR5cGVvZiBmYWlsID09PSAiZnVuY3Rpb24iKXsKICAgICAgICByZXR1cm4gZmFpbChlcnIpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZih0eXBlb2Ygc3VjY2VzcyA9PT0gImZ1bmN0aW9uIil7CiAgICAgICAgc3VjY2Vzcyhob3N0Lmhvc3QpOwogICAgICB9CiAgICB9CiAgfSk7Cn07Cgp2YXIgZmggPSB3aW5kb3cuJGZoIHx8IHt9OwpmaC5pbml0ID0gaW5pdDsKZmguYWN0ID0gYXBpX2FjdDsKZmguYXV0aCA9IGFwaV9hdXRoOwpmaC5jbG91ZCA9IGFwaV9jbG91ZDsKZmguc2VjID0gYXBpX3NlYzsKZmguaGFzaCA9IGFwaV9oYXNoOwpmaC5zeW5jID0gYXBpX3N5bmM7CmZoLmFqYXggPSBmaC5fX2FqYXggPSBhamF4OwpmaC5tYmFhcyA9IGFwaV9tYmFhczsKZmguX2dldERldmljZUlkID0gZGV2aWNlLmdldERldmljZUlkOwpmaC5maF90aW1lb3V0ID0gNjAwMDA7IC8va2VlcCBiYWNrd2FyZCBjb21wYXRpYmxlCgpmaC5nZXRDbG91ZFVSTCA9IGZ1bmN0aW9uKCl7CiAgcmV0dXJuIGNsb3VkLmdldENsb3VkSG9zdFVybCgpOwp9OwoKZmguZ2V0RkhQYXJhbXMgPSBmdW5jdGlvbigpewogIHJldHVybiBmaHBhcmFtcy5idWlsZEZIUGFyYW1zKCk7Cn07CgovL2V2ZW50cwpmaC5hZGRMaXN0ZW5lciA9IGFkZExpc3RlbmVyOwpmaC5vbiA9IGFkZExpc3RlbmVyOwpmaC5vbmNlID0gb25jZTsKdmFyIG1ldGhvZHMgPSBbInJlbW92ZUxpc3RlbmVyIiwgInJlbW92ZUFsbExpc3RlbmVycyIsICJzZXRNYXhMaXN0ZW5lcnMiLCAibGlzdGVuZXJzIiwgImVtaXQiXTsKZm9yKHZhciBpPTA7aTxtZXRob2RzLmxlbmd0aDtpKyspewogIGZoW21ldGhvZHNbaV1dID0gZXZlbnRzW21ldGhvZHNbaV1dOwp9CgovL2tlZXAgYmFja3dhcmQgY29tcGF0aWJpbGl0eQpmaC5vbihjb25zdGFudHMuSU5JVF9FVkVOVCwgZnVuY3Rpb24oZXJyLCBob3N0KXsKICBpZihlcnIpewogICAgZmguY2xvdWRfcHJvcHMgPSB7fTsKICAgIGZoLmFwcF9wcm9wcyA9IHt9OwogIH0gZWxzZSB7CiAgICBmaC5jbG91ZF9wcm9wcyA9IHtob3N0czoge3VybDogaG9zdC5ob3N0fX07CiAgICBmaC5hcHBfcHJvcHMgPSBhcHBQcm9wcy5nZXRBcHBQcm9wcygpOwogIH0KfSk7CgovL2tlZXAgYmFja3dhcmQgY29tcGF0aWJpbGl0eQpmaC5vbihjb25zdGFudHMuSU5URVJOQUxfQ09ORklHX0xPQURFRF9FVkVOVCwgZnVuY3Rpb24oZXJyLCBob3N0KXsKICBpZihlcnIpewogICAgZmguYXBwX3Byb3BzID0ge307CiAgfSBlbHNlIHsKICAgIGZoLmFwcF9wcm9wcyA9IGFwcFByb3BzLmdldEFwcFByb3BzKCk7CiAgfQoKICAvLyBFbWl0IGNvbmZpZyBsb2FkZWQgZXZlbnQgLSBhcHBwcm9wcyBzZXQgYXQgdGhpcyBwb2ludAogIC8vIFYyIGxlZ2FjeSBTREsgdXNlcyB0aGlzIHRvIGtub3cgd2hlbiB0byBmaXJlICRmaC5yZWFkeSAoaS5lLiBhcHBwcm9wcyBpcyBub3cgc2V0KQogIGV2ZW50cy5lbWl0KGNvbnN0YW50cy5DT05GSUdfTE9BREVEX0VWRU5ULCBudWxsKTsKfSk7CgovL2ZvciB0ZXN0CmZoLnJlc2V0ID0gY2xvdWQucmVzZXQ7Ci8vd2Ugc2hvdWxkIHJlYWxseSBzdG9wIHBvbGx1dGluZyBnbG9iYWwgbmFtZSBzcGFjZS4gSWRlYWxseSB3ZSBzaG91bGQgYXNrIGJyb3dzZXJpZnkgdG8gdXNlICIkZmgiIHdoZW4gdW1kLWZ5IHRoZSBtb2R1bGUuIEhvd2V2ZXIsICIkIiBpcyBub3QgYWxsb3dlZCBhcyB0aGUgc3RhbmRhcmQgbW9kdWxlIG5hbWUuCi8vU28sIHdlIGFzc2lnbiAkZmggdG8gdGhlIHdpbmRvdyBuYW1lIHNwYWNlIGRpcmVjdGx5IGhlcmUuIChvdGhlcndpc2UsIHdlIGhhdmUgdG8gZm9yayB0aGUgZ3J1bnQgYnJvd3NlcmlmeSBwbHVnaW4sIHRoZW4gZm9yayBicm93ZXJpZnkgYW5kIHRoZSBkZXBlbmRlbnQgdW1kIG1vZHVsZSwgcmVhbGx5IG5vdCB3b3J0aGluZyB0aGUgZWZmb3J0KS4Kd2luZG93LiRmaCA9IGZoOwptb2R1bGUuZXhwb3J0cyA9IGZoOwoKCgoKCgp9LHsiLi9tb2R1bGVzL2FqYXgiOjE4LCIuL21vZHVsZXMvYXBpX2FjdCI6MTksIi4vbW9kdWxlcy9hcGlfYXV0aCI6MjAsIi4vbW9kdWxlcy9hcGlfY2xvdWQiOjIxLCIuL21vZHVsZXMvYXBpX2hhc2giOjIyLCIuL21vZHVsZXMvYXBpX21iYWFzIjoyMywiLi9tb2R1bGVzL2FwaV9zZWMiOjI0LCIuL21vZHVsZXMvYXBwUHJvcHMiOjI1LCIuL21vZHVsZXMvY29uc3RhbnRzIjoyNywiLi9tb2R1bGVzL2RldmljZSI6MjksIi4vbW9kdWxlcy9ldmVudHMiOjMwLCIuL21vZHVsZXMvZmhwYXJhbXMiOjMxLCIuL21vZHVsZXMvbG9nZ2VyIjozNywiLi9tb2R1bGVzL3N5bmMtY2xpIjo0NSwiLi9tb2R1bGVzL3dhaXRGb3JDbG91ZCI6NDd9XSwxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBYRG9tYWluUmVxdWVzdFdyYXBwZXIgPSBmdW5jdGlvbih4ZHIpewogIHRoaXMueGRyID0geGRyOwogIHRoaXMuaXNXcmFwcGVyID0gdHJ1ZTsKICB0aGlzLnJlYWR5U3RhdGUgPSAwOwogIHRoaXMub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDsKICB0aGlzLnN0YXR1cyA9IDA7CiAgdGhpcy5zdGF0dXNUZXh0ID0gIiI7CiAgdGhpcy5yZXNwb25zZVRleHQgPSAiIjsKICB2YXIgc2VsZiA9IHRoaXM7CiAgdGhpcy54ZHIub25sb2FkID0gZnVuY3Rpb24oKXsKICAgICAgc2VsZi5yZWFkeVN0YXRlID0gNDsKICAgICAgc2VsZi5zdGF0dXMgPSAyMDA7CiAgICAgIHNlbGYuc3RhdHVzVGV4dCA9ICIiOwogICAgICBzZWxmLnJlc3BvbnNlVGV4dCA9IHNlbGYueGRyLnJlc3BvbnNlVGV4dDsKICAgICAgaWYoc2VsZi5vbnJlYWR5c3RhdGVjaGFuZ2UpewogICAgICAgICAgc2VsZi5vbnJlYWR5c3RhdGVjaGFuZ2UoKTsKICAgICAgfQogIH07CiAgdGhpcy54ZHIub25lcnJvciA9IGZ1bmN0aW9uKCl7CiAgICAgIGlmKHNlbGYub25lcnJvcil7CiAgICAgICAgICBzZWxmLm9uZXJyb3IoKTsKICAgICAgfQogICAgICBzZWxmLnJlYWR5U3RhdGUgPSA0OwogICAgICBzZWxmLnN0YXR1cyA9IDA7CiAgICAgIHNlbGYuc3RhdHVzVGV4dCA9ICIiOwogICAgICBpZihzZWxmLm9ucmVhZHlzdGF0ZWNoYW5nZSl7CiAgICAgICAgICBzZWxmLm9ucmVhZHlzdGF0ZWNoYW5nZSgpOwogICAgICB9CiAgfTsKICB0aGlzLnhkci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpewogICAgICBzZWxmLnJlYWR5U3RhdGUgPSA0OwogICAgICBzZWxmLnN0YXR1cyA9IDQwODsKICAgICAgc2VsZi5zdGF0dXNUZXh0ID0gInRpbWVvdXQiOwogICAgICBpZihzZWxmLm9ucmVhZHlzdGF0ZWNoYW5nZSl7CiAgICAgICAgICBzZWxmLm9ucmVhZHlzdGF0ZWNoYW5nZSgpOwogICAgICB9CiAgfTsKfTsKClhEb21haW5SZXF1ZXN0V3JhcHBlci5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBhc3luKXsKICB0aGlzLnhkci5vcGVuKG1ldGhvZCwgdXJsKTsKfTsKClhEb21haW5SZXF1ZXN0V3JhcHBlci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpewogIHRoaXMueGRyLnNlbmQoZGF0YSk7Cn07CgpYRG9tYWluUmVxdWVzdFdyYXBwZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKXsKICB0aGlzLnhkci5hYm9ydCgpOwp9OwoKWERvbWFpblJlcXVlc3RXcmFwcGVyLnByb3RvdHlwZS5zZXRSZXF1ZXN0SGVhZGVyID0gZnVuY3Rpb24obiwgdil7CiAgLy9ub3Qgc3VwcG9ydGVkIGJ5IHhkcgogIC8vR29vZCBkb2Mgb24gbGltaXRhdGlvbnMgb2YgWERvbWFpblJlcXVlc3QgaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWVpbnRlcm5hbHMvYXJjaGl2ZS8yMDEwLzA1LzEzL3hkb21haW5yZXF1ZXN0LXJlc3RyaWN0aW9ucy1saW1pdGF0aW9ucy1hbmQtd29ya2Fyb3VuZHMuYXNweAogIC8vWERvbWFpblJlcXVlc3QgZG9lc24ndCBhbGxvdyBzZXR0aW5nIGN1c3RvbSByZXF1ZXN0IGhlYWRlcnMuIEJ1dCBpdCBpcyB0aGUgb25seSBhdmFpbGFibGUgb3B0aW9uIHRvIGRvIENPUlMgcmVxdWVzdHMgaW4gSUU4ICYgOS4gSW4gSUUxMCwgdGhleSBmaW5hbGx5IHN0YXJ0IHRvIHVzZSBzdGFuZGFyZCBYTUxIdHRwUmVxdWVzdC4KICAvL1RvIHN1cHBvcnQgRkggYXV0aCB0b2tlbnMgaW4gSUU4JjksIHdlIGhhdmUgdG8gZmluZCBhIGRpZmZlcmVudCB3YXkgb2YgZG9pbmcgaXQuCn07CgpYRG9tYWluUmVxdWVzdFdyYXBwZXIucHJvdG90eXBlLmdldFJlc3BvbnNlSGVhZGVyID0gZnVuY3Rpb24obil7CiAgLy9ub3Qgc3VwcG9ydGVkIGJ5IHhkcgp9OwoKbW9kdWxlLmV4cG9ydHMgPSBYRG9tYWluUmVxdWVzdFdyYXBwZXI7Cgp9LHt9XSwxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Ci8vYSBzaGFtZWxlc3MgY29weSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9Gb3JiZXNMaW5kZXNheS9hamF4L2Jsb2IvbWFzdGVyL2luZGV4LmpzLgovL2l0IGhhcyB0aGUgc2FtZSBtZXRob2RzIGFuZCBjb25maWcgb3B0aW9ucyBhcyBqUXVlcnkvemVwdG9qcyBidXQgdmVyeSBsaWdodCB3ZWlnaHQuIHNlZSBodHRwOi8vYXBpLmpxdWVyeS5jb20valF1ZXJ5LmFqYXgvCi8vYSBmZXcgc21hbGwgY2hhbmdlcyBhcmUgbWFkZSBmb3Igc3VwcG9ydGluZyBJRSA4IGFuZCBvdGhlciBmZWF0dXJlczoKLy8xLiB1c2UgZ2V0WGhyIGZ1bmN0aW9uIHRvIHJlcGxhY2UgdGhlIGRlZmF1bHQgWE1MSHR0cFJlcXVlc3QgaW1wbGVtZW50YXRpb24gZm9yIHN1cHBvcnRpbmcgSUU4Ci8vMi4gSW50ZWdyYXRlIHdpdGggZXZlbnRzIGVtaXR0ZXIuIFNvIHRvIHN1YnNjcmliZSBhamF4IGV2ZW50cywgeW91IGNhbiBkbyAkZmgub24oImFqYXhTdGFydCIsIGhhbmRsZXIpLiBTZWUgaHR0cDovL2FwaS5qcXVlcnkuY29tL0FqYXhfRXZlbnRzLyBmb3IgZnVsbCBsaXN0IG9mIGV2ZW50cwovLzMuIGFsbG93IHBhc3NpbmcgeGhyIGZhY3RvcnkgbWV0aG9kIHRocm91Z2ggb3B0aW9uczogZS5nLiAkZmguYWpheCh7eGhyOiBmdW5jdGlvbigpey8qb3duIGltcGxlbWVudGF0aW9uIG9mIHhociovfX0pOwovLzQuIFVzZSBmaF90aW1lb3V0IHZhbHVlIGFzIHRoZSBkZWZhdWx0IHRpbWVvdXQKLy81LiBhbiBleHRyYSBvcHRpb24gY2FsbGVkICJ0cnlKU09OUCIgdG8gYWxsb3cgdHJ5IHRoZSBzYW1lIGNhbGwgd2l0aCBKU09OUCBpZiBub3JtYWwgQ09SUyBmYWlsZWQgLSBzaG91bGQgb25seSBiZSB1c2VkIGludGVybmFsbHkKLy82LiBmb3IganNvbnAsIGFsbG93IHRvIHNwZWNpZnkgdGhlIGNhbGxiYWNrIHF1ZXJ5IHBhcmFtIG5hbWUgdXNpbmcgdGhlICJqc29ucCIgb3B0aW9uCgp2YXIgZXZlbnRzSGFuZGxlciA9IF9kZXJlcV8oIi4vZXZlbnRzIik7CnZhciBYRG9tYWluUmVxdWVzdFdyYXBwZXIgPSBfZGVyZXFfKCIuL1hEb21haW5SZXF1ZXN0V3JhcHBlciIpOwp2YXIgbG9nZ2VyID0gX2RlcmVxXygiLi9sb2dnZXIiKTsKCnZhciB0eXBlCnRyeSB7CiAgdHlwZSA9IF9kZXJlcV8oJ3R5cGUtb2YnKQp9IGNhdGNoIChleCkgewogIC8vaGlkZSBmcm9tIGJyb3dzZXJpZnkKICB2YXIgciA9IF9kZXJlcV8KICB0eXBlID0gcigndHlwZScpCn0KCnZhciBqc29ucElEID0gMCwKICBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCwKICBrZXksCiAgbmFtZSwKICByc2NyaXB0ID0gLzxzY3JpcHRcYltePF0qKD86KD8hPFwvc2NyaXB0Pik8W148XSopKjxcL3NjcmlwdD4vZ2ksCiAgc2NyaXB0VHlwZVJFID0gL14oPzp0ZXh0fGFwcGxpY2F0aW9uKVwvamF2YXNjcmlwdC9pLAogIHhtbFR5cGVSRSA9IC9eKD86dGV4dHxhcHBsaWNhdGlvbilcL3htbC9pLAogIGpzb25UeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nLAogIGh0bWxUeXBlID0gJ3RleHQvaHRtbCcsCiAgYmxhbmtSRSA9IC9eXHMqJC87Cgp2YXIgYWpheCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICB2YXIgc2V0dGluZ3MgPSBleHRlbmQoe30sIG9wdGlvbnMgfHwge30pCiAgLy9rZWVwIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkKICBpZih3aW5kb3cgJiYgd2luZG93LiRmaCAmJiB0eXBlb2Ygd2luZG93LiRmaC5maF90aW1lb3V0ID09PSAibnVtYmVyIil7CiAgICBhamF4LnNldHRpbmdzLnRpbWVvdXQgPSB3aW5kb3cuJGZoLmZoX3RpbWVvdXQ7CiAgfQoKICBmb3IgKGtleSBpbiBhamF4LnNldHRpbmdzKQogICAgaWYgKHNldHRpbmdzW2tleV0gPT09IHVuZGVmaW5lZCkgc2V0dGluZ3Nba2V5XSA9IGFqYXguc2V0dGluZ3Nba2V5XQoKICBhamF4U3RhcnQoc2V0dGluZ3MpCgogIGlmICghc2V0dGluZ3MuY3Jvc3NEb21haW4pIHsKICAgIHNldHRpbmdzLmNyb3NzRG9tYWluID0gL14oW1x3LV0rOik/XC9cLyhbXlwvXSspLy50ZXN0KHNldHRpbmdzLnVybCkgJiYgKFJlZ0V4cC4kMSAhPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgfHwgUmVnRXhwLiQyICE9IHdpbmRvdy5sb2NhdGlvbi5ob3N0KQogIH0gCgogIHZhciBkYXRhVHlwZSA9IHNldHRpbmdzLmRhdGFUeXBlLAogICAgaGFzUGxhY2Vob2xkZXIgPSAvPVw/Ly50ZXN0KHNldHRpbmdzLnVybCkKICAgIGlmIChkYXRhVHlwZSA9PSAnanNvbnAnIHx8IGhhc1BsYWNlaG9sZGVyKSB7CiAgICAgIGlmICghaGFzUGxhY2Vob2xkZXIpIHsKICAgICAgICBzZXR0aW5ncy51cmwgPSBhcHBlbmRRdWVyeShzZXR0aW5ncy51cmwsIChzZXR0aW5ncy5qc29ucD8gc2V0dGluZ3MuanNvbnA6ICdfY2FsbGJhY2snKSArICc9PycpOwogICAgICB9CiAgICAgIHJldHVybiBhamF4LkpTT05QKHNldHRpbmdzKQogICAgfQoKICBpZiAoIXNldHRpbmdzLnVybCkgc2V0dGluZ3MudXJsID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkKICBzZXJpYWxpemVEYXRhKHNldHRpbmdzKQoKICB2YXIgbWltZSA9IHNldHRpbmdzLmFjY2VwdHNbZGF0YVR5cGVdLAogICAgYmFzZUhlYWRlcnMgPSB7fSwKICAgIHByb3RvY29sID0gL14oW1x3LV0rOilcL1wvLy50ZXN0KHNldHRpbmdzLnVybCkgPyBSZWdFeHAuJDEgOiB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wsCiAgICB4aHIgPSBzZXR0aW5ncy54aHIoc2V0dGluZ3MuY3Jvc3NEb21haW4pLAogICAgYWJvcnRUaW1lb3V0ID0gbnVsbDsKCiAgaWYgKCFzZXR0aW5ncy5jcm9zc0RvbWFpbikgYmFzZUhlYWRlcnNbJ1gtUmVxdWVzdGVkLVdpdGgnXSA9ICdYTUxIdHRwUmVxdWVzdCcKICBpZiAobWltZSkgewogICAgYmFzZUhlYWRlcnNbJ0FjY2VwdCddID0gbWltZQogICAgaWYgKG1pbWUuaW5kZXhPZignLCcpID4gLTEpIG1pbWUgPSBtaW1lLnNwbGl0KCcsJywgMilbMF0KICAgIHhoci5vdmVycmlkZU1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlKG1pbWUpCiAgfQogIGlmIChzZXR0aW5ncy5jb250ZW50VHlwZSB8fCAoc2V0dGluZ3MuZGF0YSAmJiAhc2V0dGluZ3MuZm9ybWRhdGEgJiYgc2V0dGluZ3MudHlwZS50b1VwcGVyQ2FzZSgpICE9ICdHRVQnKSkKICAgIGJhc2VIZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IChzZXR0aW5ncy5jb250ZW50VHlwZSB8fCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykKICBzZXR0aW5ncy5oZWFkZXJzID0gZXh0ZW5kKGJhc2VIZWFkZXJzLCBzZXR0aW5ncy5oZWFkZXJzIHx8IHt9KQoKICBpZiAodHlwZW9mIFRpdGFuaXVtICE9PSAndW5kZWZpbmVkJykgewogICAgeGhyLm9uZXJyb3IgID0gZnVuY3Rpb24oKXsKICAgICAgaWYgKCFhYm9ydFRpbWVvdXQpewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjbGVhclRpbWVvdXQoYWJvcnRUaW1lb3V0KTsKICAgICAgYWpheEVycm9yKG51bGwsICdlcnJvcicsIHhociwgc2V0dGluZ3MpOwogICAgfTsKICB9CgogIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CgogICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQpIHsKICAgICAgY2xlYXJUaW1lb3V0KGFib3J0VGltZW91dCkKICAgICAgYWJvcnRUaW1lb3V0ID0gdW5kZWZpbmVkOwogICAgICB2YXIgcmVzdWx0LCBlcnJvciA9IGZhbHNlCiAgICAgIGlmKHNldHRpbmdzLnRyeUpTT05QKXsKICAgICAgICAvL2NoZWNrIGlmIHRoZSByZXF1ZXN0IGhhcyBmYWlsLiBJbiBzb21lIGNhc2VzLCB3ZSBtYXkgd2FudCB0byB0cnkganNvbnAgYXMgd2VsbC4gQWdhaW4sIEZIIG9ubHkuLi4KICAgICAgICBpZih4aHIuc3RhdHVzID09PSAwICYmIHNldHRpbmdzLmNyb3NzRG9tYWluICYmICF4aHIuaXNUaW1lb3V0ICYmICBwcm90b2NvbCAhPSAnZmlsZTonKXsKICAgICAgICAgIGxvZ2dlci5kZWJ1ZygicmV0cnkgYWpheCBjYWxsIHdpdGgganNvbnAiKQogICAgICAgICAgc2V0dGluZ3MudHlwZSA9ICJHRVQiOwogICAgICAgICAgc2V0dGluZ3MuZGF0YVR5cGUgPSAianNvbnAiOwogICAgICAgICAgc2V0dGluZ3MuZGF0YSA9ICJfanNvbnBkYXRhPSIgKyBzZXR0aW5ncy5kYXRhOwogICAgICAgICAgcmV0dXJuIGFqYXgoc2V0dGluZ3MpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHx8IHhoci5zdGF0dXMgPT0gMzA0IHx8ICh4aHIuc3RhdHVzID09IDAgJiYgcHJvdG9jb2wgPT0gJ2ZpbGU6JykpIHsKICAgICAgICBkYXRhVHlwZSA9IGRhdGFUeXBlIHx8IG1pbWVUb0RhdGFUeXBlKHhoci5nZXRSZXNwb25zZUhlYWRlcignY29udGVudC10eXBlJykpCiAgICAgICAgcmVzdWx0ID0geGhyLnJlc3BvbnNlVGV4dAogICAgICAgIGxvZ2dlci5kZWJ1ZygiYWpheCByZXNwb25zZSA6OiBzdGF0dXMgPSAiICsgeGhyLnN0YXR1cyArICIgOjogYm9keSA9ICIgKyByZXN1bHQpCgogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoZGF0YVR5cGUgPT0gJ3NjcmlwdCcpKDEsIGV2YWwpKHJlc3VsdCkKICAgICAgICAgIGVsc2UgaWYgKGRhdGFUeXBlID09ICd4bWwnKSByZXN1bHQgPSB4aHIucmVzcG9uc2VYTUwKICAgICAgICAgIGVsc2UgaWYgKGRhdGFUeXBlID09ICdqc29uJykgcmVzdWx0ID0gYmxhbmtSRS50ZXN0KHJlc3VsdCkgPyBudWxsIDogSlNPTi5wYXJzZShyZXN1bHQpCiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgZXJyb3IgPSBlCiAgICAgICAgfQoKICAgICAgICBpZiAoZXJyb3IpIHsKICAgICAgICAgIGxvZ2dlci5kZWJ1ZygiYWpheCBlcnJvciIsIGVycm9yKTsKICAgICAgICAgIGFqYXhFcnJvcihlcnJvciwgJ3BhcnNlcmVycm9yJywgeGhyLCBzZXR0aW5ncykKICAgICAgICB9CiAgICAgICAgZWxzZSBhamF4U3VjY2VzcyhyZXN1bHQsIHhociwgc2V0dGluZ3MpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWpheEVycm9yKG51bGwsICdlcnJvcicsIHhociwgc2V0dGluZ3MpCiAgICAgIH0KICAgIH0KICB9CgogIHZhciBhc3luYyA9ICdhc3luYycgaW4gc2V0dGluZ3MgPyBzZXR0aW5ncy5hc3luYyA6IHRydWUKICBsb2dnZXIuZGVidWcoImFqYXggY2FsbCBzZXR0aW5ncyIsIHNldHRpbmdzKQogIHhoci5vcGVuKHNldHRpbmdzLnR5cGUsIHNldHRpbmdzLnVybCwgYXN5bmMpCgogIGZvciAobmFtZSBpbiBzZXR0aW5ncy5oZWFkZXJzKSB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBzZXR0aW5ncy5oZWFkZXJzW25hbWVdKQoKICBpZiAoYWpheEJlZm9yZVNlbmQoeGhyLCBzZXR0aW5ncykgPT09IGZhbHNlKSB7CiAgICBsb2dnZXIuZGVidWcoImFqYXggY2FsbCBpcyBhYm9ydGVkIGR1ZSB0byBhamF4QmVmb3JlU2VuZCIpCiAgICB4aHIuYWJvcnQoKQogICAgcmV0dXJuIGZhbHNlCiAgfQoKICBpZiAoc2V0dGluZ3MudGltZW91dCA+IDApIGFib3J0VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgbG9nZ2VyLmRlYnVnKCJhamF4IGNhbGwgdGltZWQgb3V0IikKICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eQogICAgeGhyLmFib3J0KCkKICAgIHhoci5pc1RpbWVvdXQgPSB0cnVlCiAgICBhamF4RXJyb3IobnVsbCwgJ3RpbWVvdXQnLCB4aHIsIHNldHRpbmdzKQogIH0sIHNldHRpbmdzLnRpbWVvdXQpCgogIC8vIGF2b2lkIHNlbmRpbmcgZW1wdHkgc3RyaW5nICgjMzE5KQogIHhoci5zZW5kKHNldHRpbmdzLmRhdGEgPyBzZXR0aW5ncy5kYXRhIDogbnVsbCkKICByZXR1cm4geGhyCn0KCgovLyB0cmlnZ2VyIGEgY3VzdG9tIGV2ZW50IGFuZCByZXR1cm4gdHJ1ZQpmdW5jdGlvbiB0cmlnZ2VyQW5kUmV0dXJuKGNvbnRleHQsIGV2ZW50TmFtZSwgZGF0YSkgewogIGV2ZW50c0hhbmRsZXIuZW1pdChldmVudE5hbWUsIGRhdGEpOwogIHJldHVybiB0cnVlOwp9CgovLyB0cmlnZ2VyIGFuIEFqYXggImdsb2JhbCIgZXZlbnQKZnVuY3Rpb24gdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgY29udGV4dCwgZXZlbnROYW1lLCBkYXRhKSB7CiAgaWYgKHNldHRpbmdzLmdsb2JhbCkgcmV0dXJuIHRyaWdnZXJBbmRSZXR1cm4oY29udGV4dCB8fCBkb2N1bWVudCwgZXZlbnROYW1lLCBkYXRhKQp9CgovLyBOdW1iZXIgb2YgYWN0aXZlIEFqYXggcmVxdWVzdHMKYWpheC5hY3RpdmUgPSAwCgpmdW5jdGlvbiBhamF4U3RhcnQoc2V0dGluZ3MpIHsKICBpZiAoc2V0dGluZ3MuZ2xvYmFsICYmIGFqYXguYWN0aXZlKysgPT09IDApIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIG51bGwsICdhamF4U3RhcnQnKQp9CgpmdW5jdGlvbiBhamF4U3RvcChzZXR0aW5ncykgewogIGlmIChzZXR0aW5ncy5nbG9iYWwgJiYgISgtLWFqYXguYWN0aXZlKSkgdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgbnVsbCwgJ2FqYXhTdG9wJykKfQoKLy8gdHJpZ2dlcnMgYW4gZXh0cmEgZ2xvYmFsIGV2ZW50ICJhamF4QmVmb3JlU2VuZCIgdGhhdCdzIGxpa2UgImFqYXhTZW5kIiBidXQgY2FuY2VsYWJsZQpmdW5jdGlvbiBhamF4QmVmb3JlU2VuZCh4aHIsIHNldHRpbmdzKSB7CiAgdmFyIGNvbnRleHQgPSBzZXR0aW5ncy5jb250ZXh0CiAgaWYgKHNldHRpbmdzLmJlZm9yZVNlbmQuY2FsbChjb250ZXh0LCB4aHIsIHNldHRpbmdzKSA9PT0gZmFsc2UpCiAgICByZXR1cm4gZmFsc2UKCiAgdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgY29udGV4dCwgJ2FqYXhTZW5kJywgW3hociwgc2V0dGluZ3NdKQp9CgpmdW5jdGlvbiBhamF4U3VjY2VzcyhkYXRhLCB4aHIsIHNldHRpbmdzKSB7CiAgdmFyIGNvbnRleHQgPSBzZXR0aW5ncy5jb250ZXh0LAogICAgc3RhdHVzID0gJ3N1Y2Nlc3MnCiAgc2V0dGluZ3Muc3VjY2Vzcy5jYWxsKGNvbnRleHQsIGRhdGEsIHN0YXR1cywgeGhyKQogIHRyaWdnZXJHbG9iYWwoc2V0dGluZ3MsIGNvbnRleHQsICdhamF4U3VjY2VzcycsIFt4aHIsIHNldHRpbmdzLCBkYXRhXSkKICBhamF4Q29tcGxldGUoc3RhdHVzLCB4aHIsIHNldHRpbmdzKQp9Ci8vIHR5cGU6ICJ0aW1lb3V0IiwgImVycm9yIiwgImFib3J0IiwgInBhcnNlcmVycm9yIgpmdW5jdGlvbiBhamF4RXJyb3IoZXJyb3IsIHR5cGUsIHhociwgc2V0dGluZ3MpIHsKICB2YXIgY29udGV4dCA9IHNldHRpbmdzLmNvbnRleHQKICBzZXR0aW5ncy5lcnJvci5jYWxsKGNvbnRleHQsIHhociwgdHlwZSwgZXJyb3IpCiAgdHJpZ2dlckdsb2JhbChzZXR0aW5ncywgY29udGV4dCwgJ2FqYXhFcnJvcicsIFt4aHIsIHNldHRpbmdzLCBlcnJvcl0pCiAgYWpheENvbXBsZXRlKHR5cGUsIHhociwgc2V0dGluZ3MpCn0KLy8gc3RhdHVzOiAic3VjY2VzcyIsICJub3Rtb2RpZmllZCIsICJlcnJvciIsICJ0aW1lb3V0IiwgImFib3J0IiwgInBhcnNlcmVycm9yIgpmdW5jdGlvbiBhamF4Q29tcGxldGUoc3RhdHVzLCB4aHIsIHNldHRpbmdzKSB7CiAgdmFyIGNvbnRleHQgPSBzZXR0aW5ncy5jb250ZXh0CiAgc2V0dGluZ3MuY29tcGxldGUuY2FsbChjb250ZXh0LCB4aHIsIHN0YXR1cykKICB0cmlnZ2VyR2xvYmFsKHNldHRpbmdzLCBjb250ZXh0LCAnYWpheENvbXBsZXRlJywgW3hociwgc2V0dGluZ3NdKQogIGFqYXhTdG9wKHNldHRpbmdzKQp9CgovLyBFbXB0eSBmdW5jdGlvbiwgdXNlZCBhcyBkZWZhdWx0IGNhbGxiYWNrCmZ1bmN0aW9uIGVtcHR5KCkge30KCmFqYXguSlNPTlAgPSBmdW5jdGlvbiAob3B0aW9ucykgewogIGlmICghKCd0eXBlJyBpbiBvcHRpb25zKSkgcmV0dXJuIGFqYXgob3B0aW9ucykKCiAgdmFyIGNhbGxiYWNrTmFtZSA9ICdqc29ucCcgKyAoKytqc29ucElEKSwKICAgIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLAogICAgYWJvcnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIC8vdG9kbzogcmVtb3ZlIHNjcmlwdAogICAgICAvLyQoc2NyaXB0KS5yZW1vdmUoKQogICAgICBpZiAoY2FsbGJhY2tOYW1lIGluIHdpbmRvdykgd2luZG93W2NhbGxiYWNrTmFtZV0gPSBlbXB0eQogICAgICBhamF4Q29tcGxldGUoJ2Fib3J0JywgeGhyLCBvcHRpb25zKQogICAgfSwKICAgIHhociA9IHsKICAgICAgYWJvcnQ6IGFib3J0CiAgICB9LCBhYm9ydFRpbWVvdXQsCiAgICBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQKCiAgaWYgKG9wdGlvbnMuZXJyb3IpIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgeGhyLmFib3J0KCkKICAgIG9wdGlvbnMuZXJyb3IoKQogIH0KCiAgd2luZG93W2NhbGxiYWNrTmFtZV0gPSBmdW5jdGlvbiAoZGF0YSkgewogICAgY2xlYXJUaW1lb3V0KGFib3J0VGltZW91dCkKICAgIGFib3J0VGltZW91dCA9IHVuZGVmaW5lZDsKICAgIC8vdG9kbzogcmVtb3ZlIHNjcmlwdAogICAgLy8kKHNjcmlwdCkucmVtb3ZlKCkKICAgIGRlbGV0ZSB3aW5kb3dbY2FsbGJhY2tOYW1lXQogICAgYWpheFN1Y2Nlc3MoZGF0YSwgeGhyLCBvcHRpb25zKQogIH0KCiAgc2VyaWFsaXplRGF0YShvcHRpb25zKQogIHNjcmlwdC5zcmMgPSBvcHRpb25zLnVybC5yZXBsYWNlKC89XD8vLCAnPScgKyBjYWxsYmFja05hbWUpCgogIC8vIFVzZSBpbnNlcnRCZWZvcmUgaW5zdGVhZCBvZiBhcHBlbmRDaGlsZCB0byBjaXJjdW12ZW50IGFuIElFNiBidWcuCiAgLy8gVGhpcyBhcmlzZXMgd2hlbiBhIGJhc2Ugbm9kZSBpcyB1c2VkIChzZWUgalF1ZXJ5IGJ1Z3MgIzI3MDkgYW5kICM0Mzc4KS4KICBoZWFkLmluc2VydEJlZm9yZShzY3JpcHQsIGhlYWQuZmlyc3RDaGlsZCk7CgogIGlmIChvcHRpb25zLnRpbWVvdXQgPiAwKSBhYm9ydFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgIHhoci5hYm9ydCgpCiAgICBhamF4Q29tcGxldGUoJ3RpbWVvdXQnLCB4aHIsIG9wdGlvbnMpCiAgfSwgb3B0aW9ucy50aW1lb3V0KQoKICByZXR1cm4geGhyCn0KCmZ1bmN0aW9uIGlzSUUoKXsKICB2YXIgaWUgPSBmYWxzZTsKICBpZihuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigiTVNJRSIpID49MCApewogICAgaWUgPSB0cnVlOwogIH0KICByZXR1cm4gaWU7Cn0KCmZ1bmN0aW9uIGdldFhocihjcm9zc0RvbWFpbil7CiAgdmFyIHhociA9IG51bGw7CiAgLy9hbHdheXMgdXNlIFhNTEh0dHBSZXF1ZXN0IGlmIGF2YWlsYWJsZQogIGlmKHdpbmRvdy5YTUxIdHRwUmVxdWVzdCl7CiAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICB9CiAgLy9mb3IgSUU4IG9ubHkuIE5lZWQgdG8gbWFrZSBzdXJlIGl0J3Mgbm90IHVzZWQgd2hlbiBydW5uaW5nIGluc2lkZSBDb3Jkb3ZhLgogIGlmKGlzSUUoKSAmJiAoY3Jvc3NEb21haW4gPT09IHRydWUpICYmIHR5cGVvZiB3aW5kb3cuWERvbWFpblJlcXVlc3QgIT09ICJ1bmRlZmluZWQiICYmIHR5cGVvZiB3aW5kb3cuY29yZG92YSA9PT0gInVuZGVmaW5lZCIpewogICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0V3JhcHBlcihuZXcgWERvbWFpblJlcXVlc3QoKSk7CiAgfQogIC8vIEZvciBUaXRhbml1bSBTREsKICBpZiAodHlwZW9mIFRpdGFuaXVtICE9PSAndW5kZWZpbmVkJyl7CiAgICB2YXIgcGFybXMgPSB7fTsKICAgIGlmKGFqYXguc2V0dGluZ3MgJiYgYWpheC5zZXR0aW5ncy50aW1lb3V0KXsKICAgICAgcGFyYW1zLnRpbWVvdXQgPSBhamF4LnNldHRpbmdzLnRpbWVvdXQ7CiAgICB9CiAgICB4aHIgPSBUaXRhbml1bS5OZXR3b3JrLmNyZWF0ZUhUVFBDbGllbnQocGFyYW1zKTsKICB9CgogIHJldHVybiB4aHI7Cn0KCmFqYXguc2V0dGluZ3MgPSB7CiAgLy8gRGVmYXVsdCB0eXBlIG9mIHJlcXVlc3QKICB0eXBlOiAnR0VUJywKICAvLyBDYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGJlZm9yZSByZXF1ZXN0CiAgYmVmb3JlU2VuZDogZW1wdHksCiAgLy8gQ2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBpZiB0aGUgcmVxdWVzdCBzdWNjZWVkcwogIHN1Y2Nlc3M6IGVtcHR5LAogIC8vIENhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgdGhlIHRoZSBzZXJ2ZXIgZHJvcHMgZXJyb3IKICBlcnJvcjogZW1wdHksCiAgLy8gQ2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBvbiByZXF1ZXN0IGNvbXBsZXRlIChib3RoOiBlcnJvciBhbmQgc3VjY2VzcykKICBjb21wbGV0ZTogZW1wdHksCiAgLy8gVGhlIGNvbnRleHQgZm9yIHRoZSBjYWxsYmFja3MKICBjb250ZXh0OiBudWxsLAogIC8vIFdoZXRoZXIgdG8gdHJpZ2dlciAiZ2xvYmFsIiBBamF4IGV2ZW50cwogIGdsb2JhbDogdHJ1ZSwKICAvLyBUcmFuc3BvcnQKICB4aHI6IGdldFhociwKICAvLyBNSU1FIHR5cGVzIG1hcHBpbmcKICBhY2NlcHRzOiB7CiAgICBzY3JpcHQ6ICd0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQnLAogICAganNvbjoganNvblR5cGUsCiAgICB4bWw6ICdhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sJywKICAgIGh0bWw6IGh0bWxUeXBlLAogICAgdGV4dDogJ3RleHQvcGxhaW4nCiAgfSwKICAvLyBXaGV0aGVyIHRoZSByZXF1ZXN0IGlzIHRvIGFub3RoZXIgZG9tYWluCiAgY3Jvc3NEb21haW46IGZhbHNlCn0KCmZ1bmN0aW9uIG1pbWVUb0RhdGFUeXBlKG1pbWUpIHsKICByZXR1cm4gbWltZSAmJiAobWltZSA9PSBodG1sVHlwZSA/ICdodG1sJyA6CiAgICBtaW1lID09IGpzb25UeXBlID8gJ2pzb24nIDoKICAgIHNjcmlwdFR5cGVSRS50ZXN0KG1pbWUpID8gJ3NjcmlwdCcgOgogICAgeG1sVHlwZVJFLnRlc3QobWltZSkgJiYgJ3htbCcpIHx8ICd0ZXh0Jwp9CgpmdW5jdGlvbiBhcHBlbmRRdWVyeSh1cmwsIHF1ZXJ5KSB7CiAgcmV0dXJuICh1cmwgKyAnJicgKyBxdWVyeSkucmVwbGFjZSgvWyY/XXsxLDJ9LywgJz8nKQp9CgovLyBzZXJpYWxpemUgcGF5bG9hZCBhbmQgYXBwZW5kIGl0IHRvIHRoZSBVUkwgZm9yIEdFVCByZXF1ZXN0cwpmdW5jdGlvbiBzZXJpYWxpemVEYXRhKG9wdGlvbnMpIHsKICBpZiAodHlwZShvcHRpb25zLmRhdGEpID09PSAnb2JqZWN0JykgewogICAgaWYodHlwZW9mIG9wdGlvbnMuZGF0YS5hcHBlbmQgPT09ICJmdW5jdGlvbiIpewogICAgICAvL3dlIGFyZSBkZWFsaW5nIHdpdGggRm9ybURhdGEsIGRvIG5vdCBzZXJpYWxpemUKICAgICAgb3B0aW9ucy5mb3JtZGF0YSA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICBvcHRpb25zLmRhdGEgPSBwYXJhbShvcHRpb25zLmRhdGEpCiAgICB9CiAgfQogIGlmIChvcHRpb25zLmRhdGEgJiYgKCFvcHRpb25zLnR5cGUgfHwgb3B0aW9ucy50eXBlLnRvVXBwZXJDYXNlKCkgPT0gJ0dFVCcpKQogICAgb3B0aW9ucy51cmwgPSBhcHBlbmRRdWVyeShvcHRpb25zLnVybCwgb3B0aW9ucy5kYXRhKQp9CgphamF4LmdldCA9IGZ1bmN0aW9uICh1cmwsIHN1Y2Nlc3MpIHsKICByZXR1cm4gYWpheCh7CiAgICB1cmw6IHVybCwKICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MKICB9KQp9CgphamF4LnBvc3QgPSBmdW5jdGlvbiAodXJsLCBkYXRhLCBzdWNjZXNzLCBkYXRhVHlwZSkgewogIGlmICh0eXBlKGRhdGEpID09PSAnZnVuY3Rpb24nKSBkYXRhVHlwZSA9IGRhdGFUeXBlIHx8IHN1Y2Nlc3MsIHN1Y2Nlc3MgPSBkYXRhLCBkYXRhID0gbnVsbAogIHJldHVybiBhamF4KHsKICAgIHR5cGU6ICdQT1NUJywKICAgIHVybDogdXJsLAogICAgZGF0YTogZGF0YSwKICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MsCiAgICBkYXRhVHlwZTogZGF0YVR5cGUKICB9KQp9CgphamF4LmdldEpTT04gPSBmdW5jdGlvbiAodXJsLCBzdWNjZXNzKSB7CiAgcmV0dXJuIGFqYXgoewogICAgdXJsOiB1cmwsCiAgICBzdWNjZXNzOiBzdWNjZXNzLAogICAgZGF0YVR5cGU6ICdqc29uJwogIH0pCn0KCnZhciBlc2NhcGUgPSBlbmNvZGVVUklDb21wb25lbnQ7CgpmdW5jdGlvbiBzZXJpYWxpemUocGFyYW1zLCBvYmosIHRyYWRpdGlvbmFsLCBzY29wZSkgewogIHZhciBhcnJheSA9IHR5cGUob2JqKSA9PT0gJ2FycmF5JzsKICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTsKCiAgICBpZiAoc2NvcGUpIGtleSA9IHRyYWRpdGlvbmFsID8gc2NvcGUgOiBzY29wZSArICdbJyArIChhcnJheSA/ICcnIDoga2V5KSArICddJwogICAgLy8gaGFuZGxlIGRhdGEgaW4gc2VyaWFsaXplQXJyYXkoKSBmb3JtYXQKICAgIGlmICghc2NvcGUgJiYgYXJyYXkpIHBhcmFtcy5hZGQodmFsdWUubmFtZSwgdmFsdWUudmFsdWUpCiAgICAvLyByZWN1cnNlIGludG8gbmVzdGVkIG9iamVjdHMKICAgIGVsc2UgaWYgKHRyYWRpdGlvbmFsID8gKHR5cGUodmFsdWUpID09PSAnYXJyYXknKSA6ICh0eXBlKHZhbHVlKSA9PT0gJ29iamVjdCcpKQogICAgICBzZXJpYWxpemUocGFyYW1zLCB2YWx1ZSwgdHJhZGl0aW9uYWwsIGtleSkKICAgIGVsc2UgcGFyYW1zLmFkZChrZXksIHZhbHVlKQogIH0KfQoKZnVuY3Rpb24gcGFyYW0ob2JqLCB0cmFkaXRpb25hbCkgewogIHZhciBwYXJhbXMgPSBbXQogIHBhcmFtcy5hZGQgPSBmdW5jdGlvbiAoaywgdikgewogICAgdGhpcy5wdXNoKGVzY2FwZShrKSArICc9JyArIGVzY2FwZSh2KSkKICB9CiAgc2VyaWFsaXplKHBhcmFtcywgb2JqLCB0cmFkaXRpb25hbCkKICByZXR1cm4gcGFyYW1zLmpvaW4oJyYnKS5yZXBsYWNlKCclMjAnLCAnKycpCn0KCmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQpIHsKICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7CiAgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkgewogICAgZm9yIChrZXkgaW4gc291cmNlKQogICAgICBpZiAoc291cmNlW2tleV0gIT09IHVuZGVmaW5lZCkKICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldCiAgfSkKICByZXR1cm4gdGFyZ2V0Cn0KCn0seyIuL1hEb21haW5SZXF1ZXN0V3JhcHBlciI6MTcsIi4vZXZlbnRzIjozMCwiLi9sb2dnZXIiOjM3LCJ0eXBlLW9mIjoxNX1dLDE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGxvZ2dlciA9X2RlcmVxXygiLi9sb2dnZXIiKTsKdmFyIGNsb3VkID0gX2RlcmVxXygiLi93YWl0Rm9yQ2xvdWQiKTsKdmFyIGZocGFyYW1zID0gX2RlcmVxXygiLi9maHBhcmFtcyIpOwp2YXIgYWpheCA9IF9kZXJlcV8oIi4vYWpheCIpOwp2YXIgSlNPTiA9IF9kZXJlcV8oIkpTT04iKTsKdmFyIGhhbmRsZUVycm9yID0gX2RlcmVxXygiLi9oYW5kbGVFcnJvciIpOwp2YXIgYXBwUHJvcHMgPSBfZGVyZXFfKCIuL2FwcFByb3BzIik7CgpmdW5jdGlvbiBkb0FjdENhbGwob3B0cywgc3VjY2VzcywgZmFpbCl7CiAgdmFyIGNsb3VkX2hvc3QgPSBjbG91ZC5nZXRDbG91ZEhvc3QoKTsKICB2YXIgdXJsID0gY2xvdWRfaG9zdC5nZXRBY3RVcmwob3B0cy5hY3QpOwogIHZhciBwYXJhbXMgPSBvcHRzLnJlcSB8fCB7fTsKICBwYXJhbXMgPSBmaHBhcmFtcy5hZGRGSFBhcmFtcyhwYXJhbXMpOwogIHJldHVybiBhamF4KHsKICAgICJ1cmwiOiB1cmwsCiAgICAidHJ5SlNPTlAiOiB0cnVlLAogICAgInR5cGUiOiAiUE9TVCIsCiAgICAiZGF0YVR5cGUiOiAianNvbiIsCiAgICAiZGF0YSI6IEpTT04uc3RyaW5naWZ5KHBhcmFtcyksCiAgICAiY29udGVudFR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAidGltZW91dCI6IG9wdHMudGltZW91dCB8fCBhcHBQcm9wcy50aW1lb3V0LAogICAgInN1Y2Nlc3MiOiBzdWNjZXNzLAogICAgImVycm9yIjogZnVuY3Rpb24ocmVxLCBzdGF0dXNUZXh0LCBlcnJvcil7CiAgICAgIHJldHVybiBoYW5kbGVFcnJvcihmYWlsLCByZXEsIHN0YXR1c1RleHQsIGVycm9yKTsKICAgIH0KICB9KQp9Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9wdHMsIHN1Y2Nlc3MsIGZhaWwpewogIGxvZ2dlci5kZWJ1ZygiYWN0IGlzIGNhbGxlZCIpOwogIGlmKCFmYWlsKXsKICAgIGZhaWwgPSBmdW5jdGlvbihtc2csIGVycm9yKXsKICAgICAgbG9nZ2VyLmRlYnVnKG1zZyArICI6IiArIEpTT04uc3RyaW5naWZ5KGVycm9yKSk7CiAgICB9OwogIH0KCiAgaWYoIW9wdHMuYWN0KXsKICAgIHJldHVybiBmYWlsKCdhY3Rfbm9fYWN0aW9uJywge30pOwogIH0KCiAgY2xvdWQucmVhZHkoZnVuY3Rpb24oZXJyLCBjbG91ZEhvc3QpewogICAgbG9nZ2VyLmRlYnVnKCJDYWxsaW5nIGZoYWN0IG5vdyIpOwogICAgaWYoZXJyKXsKICAgICAgcmV0dXJuIGZhaWwoZXJyLm1lc3NhZ2UsIGVycik7CiAgICB9IGVsc2UgewogICAgICBkb0FjdENhbGwob3B0cywgc3VjY2VzcywgZmFpbCk7CiAgICB9CiAgfSkKfQoKfSx7Ii4vYWpheCI6MTgsIi4vYXBwUHJvcHMiOjI1LCIuL2ZocGFyYW1zIjozMSwiLi9oYW5kbGVFcnJvciI6MzIsIi4vbG9nZ2VyIjozNywiLi93YWl0Rm9yQ2xvdWQiOjQ3LCJKU09OIjozfV0sMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgbG9nZ2VyID0gX2RlcmVxXygiLi9sb2dnZXIiKTsKdmFyIGNsb3VkID0gX2RlcmVxXygiLi93YWl0Rm9yQ2xvdWQiKTsKdmFyIGZocGFyYW1zID0gX2RlcmVxXygiLi9maHBhcmFtcyIpOwp2YXIgYWpheCA9IF9kZXJlcV8oIi4vYWpheCIpOwp2YXIgSlNPTiA9IF9kZXJlcV8oIkpTT04iKTsKdmFyIGhhbmRsZUVycm9yID0gX2RlcmVxXygiLi9oYW5kbGVFcnJvciIpOwp2YXIgZGV2aWNlID0gX2RlcmVxXygiLi9kZXZpY2UiKTsKdmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oIi4vY29uc3RhbnRzIik7CnZhciBjaGVja0F1dGggPSBfZGVyZXFfKCIuL2NoZWNrQXV0aCIpOwp2YXIgYXBwUHJvcHMgPSBfZGVyZXFfKCIuL2FwcFByb3BzIik7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9wdHMsIHN1Y2Nlc3MsIGZhaWwpIHsKICBpZiAoIWZhaWwpIHsKICAgIGZhaWwgPSBmdW5jdGlvbihtc2csIGVycm9yKSB7CiAgICAgIGxvZ2dlci5kZWJ1Zyhtc2cgKyAiOiIgKyBKU09OLnN0cmluZ2lmeShlcnJvcikpOwogICAgfTsKICB9CiAgaWYgKCFvcHRzLnBvbGljeUlkKSB7CiAgICByZXR1cm4gZmFpbCgnYXV0aF9ub19wb2xpY3lJZCcsIHt9KTsKICB9CiAgaWYgKCFvcHRzLmNsaWVudFRva2VuKSB7CiAgICByZXR1cm4gZmFpbCgnYXV0aF9ub19jbGllbnRUb2tlbicsIHt9KTsKICB9CgogIGNsb3VkLnJlYWR5KGZ1bmN0aW9uKGVyciwgZGF0YSkgewogICAgaWYgKGVycikgewogICAgICByZXR1cm4gZmFpbChlcnIubWVzc2FnZSwgZXJyKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciByZXEgPSB7fTsKICAgICAgcmVxLnBvbGljeUlkID0gb3B0cy5wb2xpY3lJZDsKICAgICAgcmVxLmNsaWVudFRva2VuID0gb3B0cy5jbGllbnRUb2tlbjsKICAgICAgaWYgKG9wdHMuZW5kUmVkaXJlY3RVcmwpIHsKICAgICAgICByZXEuZW5kUmVkaXJlY3RVcmwgPSBvcHRzLmVuZFJlZGlyZWN0VXJsOwogICAgICAgIGlmIChvcHRzLmF1dGhDYWxsYmFjaykgewogICAgICAgICAgcmVxLmVuZFJlZGlyZWN0VXJsICs9ICgvXD8vLnRlc3QocmVxLmVuZFJlZGlyZWN0VXJsKSA/ICImIiA6ICI/IikgKyAiX2ZoQXV0aENhbGxiYWNrPSIgKyBvcHRzLmF1dGhDYWxsYmFjazsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmVxLnBhcmFtcyA9IHt9OwogICAgICBpZiAob3B0cy5wYXJhbXMpIHsKICAgICAgICByZXEucGFyYW1zID0gb3B0cy5wYXJhbXM7CiAgICAgIH0KICAgICAgdmFyIGVuZHVybCA9IG9wdHMuZW5kUmVkaXJlY3RVcmwgfHwgInN0YXR1cz1jb21wbGV0ZSI7CiAgICAgIHJlcS5kZXZpY2UgPSBkZXZpY2UuZ2V0RGV2aWNlSWQoKTsKICAgICAgdmFyIGFwcF9wcm9wcyA9IGFwcFByb3BzLmdldEFwcFByb3BzKCk7CiAgICAgIHZhciBwYXRoID0gYXBwX3Byb3BzLmhvc3QgKyBjb25zdGFudHMuYm94cHJlZml4ICsgImFkbWluL2F1dGhwb2xpY3kvYXV0aCI7CgogICAgICBpZiAoYXBwX3Byb3BzLmxvY2FsKSB7CiAgICAgICAgcGF0aCA9IGNvbnN0YW50cy5ib3hwcmVmaXggKyAiYWRtaW4vYXV0aHBvbGljeS9hdXRoIjsKICAgICAgfQoKICAgICAgcmVxID0gZmhwYXJhbXMuYWRkRkhQYXJhbXMocmVxKTsKCiAgICAgIGFqYXgoewogICAgICAgICJ1cmwiOiBwYXRoLAogICAgICAgICJ0eXBlIjogIlBPU1QiLAogICAgICAgICJ0cnlKU09OUCI6IHRydWUsCiAgICAgICAgImRhdGEiOiBKU09OLnN0cmluZ2lmeShyZXEpLAogICAgICAgICJkYXRhVHlwZSI6ICJqc29uIiwKICAgICAgICAiY29udGVudFR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgInRpbWVvdXQiOiBvcHRzLnRpbWVvdXQgfHwgYXBwX3Byb3BzLnRpbWVvdXQsCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKSB7CiAgICAgICAgICBjaGVja0F1dGguaGFuZGxlQXV0aFJlc3BvbnNlKGVuZHVybCwgcmVzLCBzdWNjZXNzLCBmYWlsKTsKICAgICAgICB9LAogICAgICAgIGVycm9yOiBmdW5jdGlvbihyZXEsIHN0YXR1c1RleHQsIGVycm9yKSB7CiAgICAgICAgICBoYW5kbGVFcnJvcihmYWlsLCByZXEsIHN0YXR1c1RleHQsIGVycm9yKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0pOwp9Cn0seyIuL2FqYXgiOjE4LCIuL2FwcFByb3BzIjoyNSwiLi9jaGVja0F1dGgiOjI2LCIuL2NvbnN0YW50cyI6MjcsIi4vZGV2aWNlIjoyOSwiLi9maHBhcmFtcyI6MzEsIi4vaGFuZGxlRXJyb3IiOjMyLCIuL2xvZ2dlciI6MzcsIi4vd2FpdEZvckNsb3VkIjo0NywiSlNPTiI6M31dLDIxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGxvZ2dlciA9X2RlcmVxXygiLi9sb2dnZXIiKTsKdmFyIGNsb3VkID0gX2RlcmVxXygiLi93YWl0Rm9yQ2xvdWQiKTsKdmFyIGZocGFyYW1zID0gX2RlcmVxXygiLi9maHBhcmFtcyIpOwp2YXIgYWpheCA9IF9kZXJlcV8oIi4vYWpheCIpOwp2YXIgSlNPTiA9IF9kZXJlcV8oIkpTT04iKTsKdmFyIGhhbmRsZUVycm9yID0gX2RlcmVxXygiLi9oYW5kbGVFcnJvciIpOwp2YXIgYXBwUHJvcHMgPSBfZGVyZXFfKCIuL2FwcFByb3BzIik7CgpmdW5jdGlvbiBkb0Nsb3VkQ2FsbChvcHRzLCBzdWNjZXNzLCBmYWlsKXsKICB2YXIgY2xvdWRfaG9zdCA9IGNsb3VkLmdldENsb3VkSG9zdCgpOwogIHZhciB1cmwgPSBjbG91ZF9ob3N0LmdldENsb3VkVXJsKG9wdHMucGF0aCk7CiAgdmFyIHBhcmFtcyA9IG9wdHMuZGF0YSB8fCB7fTsKICBwYXJhbXMgPSBmaHBhcmFtcy5hZGRGSFBhcmFtcyhwYXJhbXMpOwogIHZhciB0eXBlID0gb3B0cy5tZXRob2QgfHwgIlBPU1QiOwogIHZhciBkYXRhOwogIGlmICgiUE9TVCIgPT09IHR5cGUudG9VcHBlckNhc2UoKSkgewogICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7CiAgfSBlbHNlIHsKICAgIGRhdGEgPSBwYXJhbXM7CiAgfQoKICByZXR1cm4gYWpheCh7CiAgICAidXJsIjogdXJsLAogICAgInR5cGUiOiB0eXBlLAogICAgImRhdGFUeXBlIjogb3B0cy5kYXRhVHlwZSB8fCAianNvbiIsCiAgICAiZGF0YSI6IGRhdGEsCiAgICAiY29udGVudFR5cGUiOiBvcHRzLmNvbnRlbnRUeXBlIHx8ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICJ0aW1lb3V0Ijogb3B0cy50aW1lb3V0IHx8IGFwcFByb3BzLnRpbWVvdXQsCiAgICAic3VjY2VzcyI6IHN1Y2Nlc3MsCiAgICAiZXJyb3IiOiBmdW5jdGlvbihyZXEsIHN0YXR1c1RleHQsIGVycm9yKXsKICAgICAgcmV0dXJuIGhhbmRsZUVycm9yKGZhaWwsIHJlcSwgc3RhdHVzVGV4dCwgZXJyb3IpOwogICAgfQogIH0pCn0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0cywgc3VjY2VzcywgZmFpbCl7CiAgbG9nZ2VyLmRlYnVnKCJjbG91ZCBpcyBjYWxsZWQiKTsKICBpZighZmFpbCl7CiAgICBmYWlsID0gZnVuY3Rpb24obXNnLCBlcnJvcil7CiAgICAgIGxvZ2dlci5kZWJ1Zyhtc2cgKyAiOiIgKyBKU09OLnN0cmluZ2lmeShlcnJvcikpOwogICAgfTsKICB9CgogIGNsb3VkLnJlYWR5KGZ1bmN0aW9uKGVyciwgY2xvdWRIb3N0KXsKICAgIGxvZ2dlci5kZWJ1ZygiQ2FsbGluZyBmaGFjdCBub3ciKTsKICAgIGlmKGVycil7CiAgICAgIHJldHVybiBmYWlsKGVyci5tZXNzYWdlLCBlcnIpOwogICAgfSBlbHNlIHsKICAgICAgZG9DbG91ZENhbGwob3B0cywgc3VjY2VzcywgZmFpbCk7CiAgICB9CiAgfSkKfQoKfSx7Ii4vYWpheCI6MTgsIi4vYXBwUHJvcHMiOjI1LCIuL2ZocGFyYW1zIjozMSwiLi9oYW5kbGVFcnJvciI6MzIsIi4vbG9nZ2VyIjozNywiLi93YWl0Rm9yQ2xvdWQiOjQ3LCJKU09OIjozfV0sMjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgaGFzaEltcGwgPSBfZGVyZXFfKCIuL3NlY3VyaXR5L2hhc2giKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocCwgcywgZil7CiAgdmFyIHBhcmFtcyA9IHt9OwogIGlmKHR5cGVvZiBwLmFsZ29yaXRobSA9PT0gInVuZGVmaW5lZCIpewogICAgcC5hbGdvcml0aG0gPSAiTUQ1IjsKICB9CiAgcGFyYW1zLmFjdCA9ICJoYXNoIjsKICBwYXJhbXMucGFyYW1zID0gcDsKICBoYXNoSW1wbChwYXJhbXMsIHMsIGYpOwp9Owp9LHsiLi9zZWN1cml0eS9oYXNoIjo0M31dLDIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGxvZ2dlciA9X2RlcmVxXygiLi9sb2dnZXIiKTsKdmFyIGNsb3VkID0gX2RlcmVxXygiLi93YWl0Rm9yQ2xvdWQiKTsKdmFyIGZocGFyYW1zID0gX2RlcmVxXygiLi9maHBhcmFtcyIpOwp2YXIgYWpheCA9IF9kZXJlcV8oIi4vYWpheCIpOwp2YXIgSlNPTiA9IF9kZXJlcV8oIkpTT04iKTsKdmFyIGhhbmRsZUVycm9yID0gX2RlcmVxXygiLi9oYW5kbGVFcnJvciIpOwp2YXIgY29uc3RzID0gX2RlcmVxXygiLi9jb25zdGFudHMiKTsKdmFyIGFwcFByb3BzID0gX2RlcmVxXygiLi9hcHBQcm9wcyIpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRzLCBzdWNjZXNzLCBmYWlsKXsKICBsb2dnZXIuZGVidWcoIm1iYWFzIGlzIGNhbGxlZC4iKTsKICBpZighZmFpbCl7CiAgICBmYWlsID0gZnVuY3Rpb24obXNnLCBlcnJvcil7CiAgICAgIGNvbnNvbGUuZGVidWcobXNnICsgIjoiICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IpKTsKICAgIH07CiAgfQoKICB2YXIgbWJhYXMgPSBvcHRzLnNlcnZpY2U7CiAgdmFyIHBhcmFtcyA9IG9wdHMucGFyYW1zOwoKICBjbG91ZC5yZWFkeShmdW5jdGlvbihlcnIsIGNsb3VkSG9zdCl7CiAgICBsb2dnZXIuZGVidWcoIkNhbGxpbmcgbWJhYXMgbm93Iik7CiAgICBpZihlcnIpewogICAgICByZXR1cm4gZmFpbChlcnIubWVzc2FnZSwgZXJyKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBjbG91ZF9ob3N0ID0gY2xvdWQuZ2V0Q2xvdWRIb3N0KCk7CiAgICAgIHZhciB1cmwgPSBjbG91ZF9ob3N0LmdldE1CQUFTVXJsKG1iYWFzKTsKICAgICAgcGFyYW1zID0gZmhwYXJhbXMuYWRkRkhQYXJhbXMocGFyYW1zKTsKICAgICAgcmV0dXJuIGFqYXgoewogICAgICAgICJ1cmwiOiB1cmwsCiAgICAgICAgInRyeUpTT05QIjogdHJ1ZSwKICAgICAgICAidHlwZSI6ICJQT1NUIiwKICAgICAgICAiZGF0YVR5cGUiOiAianNvbiIsCiAgICAgICAgImRhdGEiOiBKU09OLnN0cmluZ2lmeShwYXJhbXMpLAogICAgICAgICJjb250ZW50VHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAidGltZW91dCI6IG9wdHMudGltZW91dCB8fCBhcHBQcm9wcy50aW1lb3V0LAogICAgICAgICJzdWNjZXNzIjogc3VjY2VzcywKICAgICAgICAiZXJyb3IiOiBmdW5jdGlvbihyZXEsIHN0YXR1c1RleHQsIGVycm9yKXsKICAgICAgICAgIHJldHVybiBoYW5kbGVFcnJvcihmYWlsLCByZXEsIHN0YXR1c1RleHQsIGVycm9yKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0pOwp9IAoKfSx7Ii4vYWpheCI6MTgsIi4vYXBwUHJvcHMiOjI1LCIuL2NvbnN0YW50cyI6MjcsIi4vZmhwYXJhbXMiOjMxLCIuL2hhbmRsZUVycm9yIjozMiwiLi9sb2dnZXIiOjM3LCIuL3dhaXRGb3JDbG91ZCI6NDcsIkpTT04iOjN9XSwyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBrZXlnZW4gPSBfZGVyZXFfKCIuL3NlY3VyaXR5L2Flcy1rZXlnZW4iKTsKdmFyIGFlcyA9IF9kZXJlcV8oIi4vc2VjdXJpdHkvYWVzLW5vZGUiKTsKdmFyIHJzYSA9IF9kZXJlcV8oIi4vc2VjdXJpdHkvcnNhLW5vZGUiKTsKdmFyIGhhc2ggPSBfZGVyZXFfKCIuL3NlY3VyaXR5L2hhc2giKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocCwgcywgZil7CiAgaWYgKCFwLmFjdCkgewogICAgZignYmFkX2FjdCcsIHt9LCBwKTsKICAgIHJldHVybjsKICB9CiAgaWYgKCFwLnBhcmFtcykgewogICAgZignbm9fcGFyYW1zJywge30sIHApOwogICAgcmV0dXJuOwogIH0KICBpZiAoIXAucGFyYW1zLmFsZ29yaXRobSkgewogICAgZignbm9fcGFyYW1zX2FsZ29yaXRobScsIHt9LCBwKTsKICAgIHJldHVybjsKICB9CiAgcC5wYXJhbXMuYWxnb3JpdGhtID0gcC5wYXJhbXMuYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCk7CiAgaWYocC5hY3QgPT09ICJoYXNoIil7CiAgICByZXR1cm4gaGFzaChwLCBzLCBmKTsKICB9IGVsc2UgaWYocC5hY3QgPT09ICJlbmNyeXB0Iil7CiAgICBpZihwLnBhcmFtcy5hbGdvcml0aG0gPT09ICJhZXMiKXsKICAgICAgcmV0dXJuIGFlcy5lbmNyeXB0KHAsIHMsIGYpOwogICAgfSBlbHNlIGlmKHAucGFyYW1zLmFsZ29yaXRobSA9PT0gInJzYSIpewogICAgICByZXR1cm4gcnNhLmVuY3J5cHQocCwgcywgZik7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZignZW5jcnlwdF9iYWRfYWxnb3JpdGhtOicgKyBwLnBhcmFtcy5hbGdvcml0aG0sIHt9LCBwKTsKICAgIH0KICB9IGVsc2UgaWYocC5hY3QgPT09ICJkZWNyeXB0Iil7CiAgICBpZihwLnBhcmFtcy5hbGdvcml0aG0gPT09ICJhZXMiKXsKICAgICAgcmV0dXJuIGFlcy5kZWNyeXB0KHAsIHMsIGYpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGYoJ2RlY3J5cHRfYmFkX2FsZ29yaXRobTonICsgcC5wYXJhbXMuYWxnb3JpdGhtLCB7fSwgcCk7CiAgICB9CiAgfSBlbHNlIGlmKHAuYWN0ID09PSAia2V5Z2VuIil7CiAgICBpZihwLnBhcmFtcy5hbGdvcml0aG0gPT09ICJhZXMiKXsKICAgICAgcmV0dXJuIGtleWdlbihwLCBzLCBmKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBmKCdrZXlnZW5fYmFkX2FsZ29yaXRobTonICsgcC5wYXJhbXMuYWxnb3JpdGhtLCB7fSwgcCk7CiAgICB9CiAgfQp9Cn0seyIuL3NlY3VyaXR5L2Flcy1rZXlnZW4iOjQxLCIuL3NlY3VyaXR5L2Flcy1ub2RlIjo0MiwiLi9zZWN1cml0eS9oYXNoIjo0MywiLi9zZWN1cml0eS9yc2Etbm9kZSI6NDR9XSwyNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBjb25zdHMgPSBfZGVyZXFfKCIuL2NvbnN0YW50cyIpOwp2YXIgYWpheCA9IF9kZXJlcV8oIi4vYWpheCIpOwp2YXIgbG9nZ2VyID0gX2RlcmVxXygiLi9sb2dnZXIiKTsKdmFyIHFzID0gX2RlcmVxXygiLi9xdWVyeU1hcCIpOwoKdmFyIGFwcF9wcm9wcyA9IG51bGw7Cgp2YXIgbG9hZCA9IGZ1bmN0aW9uKGNiKSB7CiAgdmFyIGRvY191cmwgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmOwogIHZhciB1cmxfcGFyYW1zID0gcXMoZG9jX3VybCk7CiAgdmFyIGxvY2FsID0gKHR5cGVvZiB1cmxfcGFyYW1zLnVybCAhPT0gJ3VuZGVmaW5lZCcpOwoKICAvLyBGb3IgbG9jYWwgZW52aXJvbm1lbnRzLCBubyBpbml0IG5lZWRlZAogIGlmIChsb2NhbCkgewogICAgYXBwX3Byb3BzID0ge307CiAgICBhcHBfcHJvcHMubG9jYWwgPSB0cnVlOwogICAgYXBwX3Byb3BzLmhvc3QgPSB1cmxfcGFyYW1zLnVybC5yZXBsYWNlKC8jLio/JC9nLCAnJyk7CiAgICBhcHBfcHJvcHMuYXBwaWQgPSAiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIjsKICAgIGFwcF9wcm9wcy5hcHBrZXkgPSAiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCI7CiAgICBhcHBfcHJvcHMucHJvamVjdGlkID0gIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCI7CiAgICBhcHBfcHJvcHMuY29ubmVjdGlvbnRhZyA9ICIwLjAuMSI7CiAgICBhcHBfcHJvcHMubG9nbGV2ZWwgPSB1cmxfcGFyYW1zLmxvZ2xldmVsOwogICAgcmV0dXJuIGNiKG51bGwsIGFwcF9wcm9wcyk7CiAgfQoKICB2YXIgY29uZmlnX3VybCA9IHVybF9wYXJhbXMuZmhjb25maWcgfHwgY29uc3RzLmNvbmZpZ19qczsKICBhamF4KHsKICAgIHVybDogY29uZmlnX3VybCwKICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7CiAgICAgIGxvZ2dlci5kZWJ1ZygiZmhjb25maWcgPSAiICsgSlNPTi5zdHJpbmdpZnkoZGF0YSkpOwogICAgICAvL3doZW4gbG9hZCB0aGUgY29uZmlnIGZpbGUgb24gZGV2aWNlLCBiZWNhdXNlIGZpbGU6Ly8gcHJvdG9jb2wgaXMgdXNlZCwgaXQgd2lsbCBuZXZlciBjYWxsIGZhaWwgY2FsbCBiYWNrLiBUaGUgc3VjY2VzcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBidXQgdGhlIGRhdGEgdmFsdWUgd2lsbCBiZSBudWxsLgogICAgICBpZiAobnVsbCA9PSBkYXRhKSB7CiAgICAgICAgLy9maCB2MiBvbmx5CiAgICAgICAgaWYod2luZG93LmZoX2FwcF9wcm9wcyl7CiAgICAgICAgICBhcHBfcHJvcHMgPSB3aW5kb3cuZmhfYXBwX3Byb3BzOwogICAgICAgICAgcmV0dXJuIGNiKG51bGwsIHdpbmRvdy5maF9hcHBfcHJvcHMpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJhcHBfY29uZmlnX21pc3NpbmciKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYXBwX3Byb3BzID0gZGF0YTsKCiAgICAgICAgY2IobnVsbCwgYXBwX3Byb3BzKTsKICAgICAgfQogICAgfSwKICAgIGVycm9yOiBmdW5jdGlvbihyZXEsIHN0YXR1c1RleHQsIGVycm9yKSB7CiAgICAgIC8vZmggdjIgb25seQogICAgICBpZih3aW5kb3cuZmhfYXBwX3Byb3BzKXsKICAgICAgICBhcHBfcHJvcHMgPSB3aW5kb3cuZmhfYXBwX3Byb3BzOwogICAgICAgIHJldHVybiBjYihudWxsLCB3aW5kb3cuZmhfYXBwX3Byb3BzKTsKICAgICAgfQogICAgICBsb2dnZXIuZXJyb3IoY29uc3RzLmNvbmZpZ19qcyArICIgTm90IEZvdW5kIik7CiAgICAgIGNiKG5ldyBFcnJvcigiYXBwX2NvbmZpZ19taXNzaW5nIikpOwogICAgfQogIH0pOwp9OwoKdmFyIHNldEFwcFByb3BzID0gZnVuY3Rpb24ocHJvcHMpIHsKICBhcHBfcHJvcHMgPSBwcm9wczsKfTsKCnZhciBnZXRBcHBQcm9wcyA9IGZ1bmN0aW9uKCkgewogIHJldHVybiBhcHBfcHJvcHM7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBsb2FkOiBsb2FkLAogIGdldEFwcFByb3BzOiBnZXRBcHBQcm9wcywKICBzZXRBcHBQcm9wczogc2V0QXBwUHJvcHMKfTsKCn0seyIuL2FqYXgiOjE4LCIuL2NvbnN0YW50cyI6MjcsIi4vbG9nZ2VyIjozNywiLi9xdWVyeU1hcCI6Mzl9XSwyNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBsb2dnZXIgPSBfZGVyZXFfKCIuL2xvZ2dlciIpOwp2YXIgcXVlcnlNYXAgPSBfZGVyZXFfKCIuL3F1ZXJ5TWFwIik7CnZhciBKU09OID0gX2RlcmVxXygiSlNPTiIpOwp2YXIgZmhwYXJhbXMgPSBfZGVyZXFfKCIuL2ZocGFyYW1zIik7Cgp2YXIgY2hlY2tBdXRoID0gZnVuY3Rpb24odXJsKSB7CiAgaWYgKC9cX2ZoQXV0aENhbGxiYWNrLy50ZXN0KHVybCkpIHsKICAgIHZhciBxbWFwID0gcXVlcnlNYXAodXJsKTsKICAgIGlmIChxbWFwKSB7CiAgICAgIHZhciBmaENhbGxiYWNrID0gcW1hcFsiX2ZoQXV0aENhbGxiYWNrIl07CiAgICAgIGlmIChmaENhbGxiYWNrKSB7CiAgICAgICAgaWYgKHFtYXBbJ3Jlc3VsdCddICYmIHFtYXBbJ3Jlc3VsdCddID09PSAnc3VjY2VzcycpIHsKICAgICAgICAgIHZhciBzdWNSZXMgPSB7J3Nlc3Npb25Ub2tlbic6IHFtYXBbJ2ZoX2F1dGhfc2Vzc2lvbiddLCAnYXV0aFJlc3BvbnNlJyA6IEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KGRlY29kZVVSSUNvbXBvbmVudChxbWFwWydhdXRoUmVzcG9uc2UnXSkpKX07CiAgICAgICAgICBmaHBhcmFtcy5zZXRBdXRoU2Vzc2lvblRva2VuKHFtYXBbJ2ZoX2F1dGhfc2Vzc2lvbiddKTsKICAgICAgICAgIHdpbmRvd1tmaENhbGxiYWNrXShudWxsLCBzdWNSZXMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB3aW5kb3dbZmhDYWxsYmFja10oeydtZXNzYWdlJzpxbWFwWydtZXNzYWdlJ119KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn07Cgp2YXIgaGFuZGxlQXV0aFJlc3BvbnNlID0gZnVuY3Rpb24oZW5kdXJsLCByZXMsIHN1Y2Nlc3MsIGZhaWwpewogIGlmKHJlcy5zdGF0dXMgJiYgcmVzLnN0YXR1cyA9PT0gIm9rIil7CgogICAgdmFyIG9uQ29tcGxldGUgPSBmdW5jdGlvbihyZXMpewogICAgICBpZihyZXMuc2Vzc2lvblRva2VuKXsKICAgICAgICBmaHBhcmFtcy5zZXRBdXRoU2Vzc2lvblRva2VuKHJlcy5zZXNzaW9uVG9rZW4pOwogICAgICB9CiAgICAgIHN1Y2Nlc3MocmVzKTsKICAgIH07CiAgICAvL2ZvciBPQXV0aCwgYSB1cmwgd2lsbCBiZSByZXR1cm5lZCB3aGljaCBtZWFucyB0aGUgdXNlciBzaG91bGQgYmUgZGlyZWN0ZWQgdG8gdGhhdCB1cmwgdG8gYXV0aGVudGljYXRlLgogICAgLy93ZSB0cnkgdG8gdXNlIHRoZSBDaGlsZEJyb3dlciBwbHVnaW4gaWYgaXQgY2FuIGJlIGZvdW5kLiBPdGhlcndpc2Ugc2VuZCB0aGUgdXJsIHRvIHRoZSBzdWNjZXNzIGZ1bmN0aW9uIHRvIGFsbG93IGRldmVsb3BlciB0byBoYW5kbGUgaXQuCiAgICBpZihyZXMudXJsKXsKICAgICAgdmFyIGluYXBwQnJvd3NlcldpbmRvdyA9IG51bGw7CiAgICAgIHZhciBsb2NhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKG5ld191cmwpewogICAgICAgIGlmKG5ld191cmwuaW5kZXhPZihlbmR1cmwpID4gLTEpewogICAgICAgICAgaWYoaW5hcHBCcm93c2VyV2luZG93KXsKICAgICAgICAgICAgaW5hcHBCcm93c2VyV2luZG93LmNsb3NlKCk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcW1hcCA9IHF1ZXJ5TWFwKG5ld191cmwpOwogICAgICAgICAgaWYocW1hcCkgewogICAgICAgICAgICBpZihxbWFwWydyZXN1bHQnXSAmJiBxbWFwWydyZXN1bHQnXSA9PT0gJ3N1Y2Nlc3MnKXsKICAgICAgICAgICAgICB2YXIgc3VjUmVzID0geydzZXNzaW9uVG9rZW4nOiBxbWFwWydmaF9hdXRoX3Nlc3Npb24nXSwgJ2F1dGhSZXNwb25zZScgOiBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQocW1hcFsnYXV0aFJlc3BvbnNlJ10pKSl9OwogICAgICAgICAgICAgIG9uQ29tcGxldGUoc3VjUmVzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpZihmYWlsKXsKICAgICAgICAgICAgICAgIGZhaWwoImF1dGhfZmFpbGVkIiwgeydtZXNzYWdlJzpxbWFwWydtZXNzYWdlJ119KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmKGZhaWwpewogICAgICAgICAgICAgICAgZmFpbCgiYXV0aF9mYWlsZWQiLCB7J21lc3NhZ2UnOnFtYXBbJ21lc3NhZ2UnXX0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgICBpZih3aW5kb3cuUGhvbmVHYXAgfHwgd2luZG93LmNvcmRvdmEpewogICAgICAgIGlmKHdpbmRvdy5wbHVnaW5zICYmIHdpbmRvdy5wbHVnaW5zLmNoaWxkQnJvd3Nlcil7CiAgICAgICAgICAvL2ZvdW5kIGNoaWxkYnJvd3NlciBwbHVnaW4sYWRkIHRoZSBldmVudCBsaXN0ZW5lciBhbmQgbG9hZCBpdAogICAgICAgICAgLy93ZSBuZWVkIHRvIGtub3cgd2hlbiB0aGUgT0F1dGggcHJvY2VzcyBpcyBmaW5pc2hlZCBieSBjaGVja2luZyBmb3IgdGhlIHByZXNlbmNlIG9mIGVuZHVybC4gSWYgdGhlIGVuZHVybCBpcyBmb3VuZCwgaXQgbWVhbnMgdGhlIGF1dGhlbnRpY2F0aW9uIGZpbmlzaGVkIGFuZCB3ZSBzaG91bGQgZmluZCBpZiBpdCdzIHN1Y2Nlc3NmdWwuCiAgICAgICAgICBpZih0eXBlb2Ygd2luZG93LnBsdWdpbnMuY2hpbGRCcm93c2VyLnNob3dXZWJQYWdlID09PSAiZnVuY3Rpb24iKXsKICAgICAgICAgICAgd2luZG93LnBsdWdpbnMuY2hpbGRCcm93c2VyLm9uTG9jYXRpb25DaGFuZ2UgPSBsb2NhdGlvbkNoYW5nZTsKICAgICAgICAgICAgd2luZG93LnBsdWdpbnMuY2hpbGRCcm93c2VyLnNob3dXZWJQYWdlKHJlcy51cmwpOwogICAgICAgICAgICBpbmFwcEJyb3dzZXJXaW5kb3cgPSB3aW5kb3cucGx1Z2lucy5jaGlsZEJyb3dzZXI7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGluYXBwQnJvd3NlcldpbmRvdyA9IHdpbmRvdy5vcGVuKHJlcy51cmwsICJfYmxhbmsiLCAnbG9jYXRpb249eWVzJyk7CiAgICAgICAgICAgIGluYXBwQnJvd3NlcldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2Fkc3RhcnQiLCBmdW5jdGlvbihldil7CiAgICAgICAgICAgICAgbG9jYXRpb25DaGFuZ2UoZXYudXJsKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgICBsb2dnZXIuaW5mbygiSW5BcHBCcm93c2VyIHBsdWdpbiBpcyBub3QgaW50YWxsZWQuIik7CiAgICAgICAgICAgIG9uQ29tcGxldGUocmVzKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gcmVzLnVybDsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgb25Db21wbGV0ZShyZXMpOwogICAgfQogIH0gZWxzZSB7CiAgICBpZihmYWlsKXsKICAgICAgZmFpbCgiYXV0aF9mYWlsZWQiLCByZXMpOwogICAgfQogIH0KfTsKCi8vVGhpcyBpcyBtYWlubHkgZm9yIHVzaW5nICRmaC5hdXRoIGluc2lkZSBicm93c2Vycy4gSWYgdGhlIGF1dGhlbnRpY2F0aW9uIG1ldGhvZCBpcyBPQXV0aCwgYXQgdGhlIGVuZCBvZiB0aGUgcHJvY2VzcywgdGhlIHVzZXIgd2lsbCBiZSByZS1kaXJlY3RlZCB0bwovL2EgdXJsIHRoYXQgd2Ugc3BlY2lmaWVkIGZvciBjaGVja2luZyBpZiB0aGUgYXV0aCBpcyBzdWNjZXNzZnVsLiBTbyB3ZSBhbHdheXMgY2hlY2sgdGhlIHVybCB0byBzZWUgaWYgd2UgYXJlIG9uIHRoZSByZS1kaXJlY3RlZCBwYWdlLgppZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHsKICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCl7CiAgICBjaGVja0F1dGgod2luZG93LmxvY2F0aW9uLmhyZWYpOwogIH0sIGZhbHNlKTsgLy9XM0MKfSBlbHNlIGlmICh3aW5kb3cuYXR0YWNoRXZlbnQpIHsKICB3aW5kb3cuYXR0YWNoRXZlbnQoJ29ubG9hZCcsIGZ1bmN0aW9uKCl7CiAgICBjaGVja0F1dGgod2luZG93LmxvY2F0aW9uLmhyZWYpOwogIH0pOyAvL0lFCn0KCm1vZHVsZS5leHBvcnRzID0gewogICJoYW5kbGVBdXRoUmVzcG9uc2UiOiBoYW5kbGVBdXRoUmVzcG9uc2UKfTsKCn0seyIuL2ZocGFyYW1zIjozMSwiLi9sb2dnZXIiOjM3LCIuL3F1ZXJ5TWFwIjozOSwiSlNPTiI6M31dLDI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7CiAgImJveHByZWZpeCI6ICIvYm94L3Nydi8xLjEvIiwKICAic2RrX3ZlcnNpb24iOiAiMi41LjAtQlVJTEQtTlVNQkVSIiwKICAiY29uZmlnX2pzIjogImZoY29uZmlnLmpzb24iLAogICJJTklUX0VWRU5UIjogImZoaW5pdCIsCiAgIklOVEVSTkFMX0NPTkZJR19MT0FERURfRVZFTlQiOiAiaW50ZXJuYWxmaGNvbmZpZ2xvYWRlZCIsCiAgIkNPTkZJR19MT0FERURfRVZFTlQiOiAiZmhjb25maWdsb2FkZWQiCn07Cgp9LHt9XSwyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gewogIHJlYWRDb29raWVWYWx1ZSAgOiBmdW5jdGlvbiAoY29va2llX25hbWUpIHsKICAgIHZhciBuYW1lX3N0ciA9IGNvb2tpZV9uYW1lICsgIj0iOwogICAgdmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoIjsiKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgYyA9IGNvb2tpZXNbaV07CiAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PT0gJyAnKSB7CiAgICAgICAgYyA9IGMuc3Vic3RyaW5nKDEsIGMubGVuZ3RoKTsKICAgICAgfQogICAgICBpZiAoYy5pbmRleE9mKG5hbWVfc3RyKSA9PT0gMCkgewogICAgICAgIHJldHVybiBjLnN1YnN0cmluZyhuYW1lX3N0ci5sZW5ndGgsIGMubGVuZ3RoKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfSwKCiAgY3JlYXRlQ29va2llIDogZnVuY3Rpb24gKGNvb2tpZV9uYW1lLCBjb29raWVfdmFsdWUpIHsKICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTsKICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIDM2NTAwICogMjQgKiA2MCAqIDYwICogMTAwMCk7IC8vMTAwIHllYXJzCiAgICB2YXIgZXhwaXJlcyA9ICI7IGV4cGlyZXM9IiArIGRhdGUudG9HTVRTdHJpbmcoKTsKICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZV9uYW1lICsgIj0iICsgY29va2llX3ZhbHVlICsgZXhwaXJlcyArICI7IHBhdGggPSAvIjsKICB9Cn07Cgp9LHt9XSwyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBjb29raWVzID0gX2RlcmVxXygiLi9jb29raWVzIik7CnZhciB1dWlkTW9kdWxlID0gX2RlcmVxXygiLi91dWlkIik7CnZhciBsb2dnZXIgPSBfZGVyZXFfKCIuL2xvZ2dlciIpOwoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgLy90cnkgdG8gZ2V0IHRoZSB1bmlxdWUgZGV2aWNlIGlkZW50aWZpZXIKICAiZ2V0RGV2aWNlSWQiOiBmdW5jdGlvbigpewogICAgLy9jaGVjayBmb3IgY29yZG92YS9waG9uZWdhcCBmaXJzdAogICAgaWYodHlwZW9mIHdpbmRvdy5maGRldmljZSAhPT0gInVuZGVmaW5lZCIgJiYgdHlwZW9mIHdpbmRvdy5maGRldmljZS51dWlkICE9PSAidW5kZWZpbmVkIil7CiAgICAgIHJldHVybiB3aW5kb3cuZmhkZXZpY2UudXVpZDsKICAgIH0gZWxzZSBpZih0eXBlb2Ygd2luZG93LmRldmljZSAhPT0gInVuZGVmaW5lZCIgJiYgdHlwZW9mIHdpbmRvdy5kZXZpY2UudXVpZCAhPT0gInVuZGVmaW5lZCIpewogICAgICByZXR1cm4gd2luZG93LmRldmljZS51dWlkOwogICAgfSAgZWxzZSBpZih0eXBlb2YgbmF2aWdhdG9yLmRldmljZSAhPT0gInVuZGVmaW5lZCIgJiYgdHlwZW9mIG5hdmlnYXRvci5kZXZpY2UudXVpZCAhPT0gInVuZGVmaW5lZCIpewogICAgICByZXR1cm4gbmF2aWdhdG9yLmRldmljZS51dWlkOwogICAgfSBlbHNlIHsKICAgICAgdmFyIF9tb2NrX3V1aWRfY29va2llX25hbWUgPSAibW9ja191dWlkIjsKICAgICAgdmFyIHV1aWQgPSBjb29raWVzLnJlYWRDb29raWVWYWx1ZShfbW9ja191dWlkX2Nvb2tpZV9uYW1lKTsKICAgICAgaWYobnVsbCA9PSB1dWlkKXsKICAgICAgICAgIHV1aWQgPSB1dWlkTW9kdWxlLmNyZWF0ZVVVSUQoKTsKICAgICAgICAgIGNvb2tpZXMuY3JlYXRlQ29va2llKF9tb2NrX3V1aWRfY29va2llX25hbWUsIHV1aWQpOwogICAgICB9CiAgICAgIHJldHVybiB1dWlkOwogICAgfQogIH0sCgogIC8vdGhpcyBpcyBmb3IgZml4aW5nIGFuYWx5dGljcyBpc3N1ZXMgd2hlbiB1cGdyYWRpbmcgZnJvbSBpbzYgdG8gaW9zNy4gUHJvYmFibHkgY2FuIGJlIGRlcHJlY2F0ZWQgbm93CiAgImdldEN1aWRNYXAiOiBmdW5jdGlvbigpewogICAgaWYodHlwZW9mIHdpbmRvdy5maGRldmljZSAhPT0gInVuZGVmaW5lZCIgJiYgdHlwZW9mIHdpbmRvdy5maGRldmljZS5jdWlkTWFwICE9PSAidW5kZWZpbmVkIil7CiAgICAgIHJldHVybiB3aW5kb3cuZmhkZXZpY2UuY3VpZE1hcDsKICAgIH0gZWxzZSBpZih0eXBlb2Ygd2luZG93LmRldmljZSAhPT0gInVuZGVmaW5lZCIgJiYgdHlwZW9mIHdpbmRvdy5kZXZpY2UuY3VpZE1hcCAhPT0gInVuZGVmaW5lZCIpewogICAgICByZXR1cm4gd2luZG93LmRldmljZS5jdWlkTWFwOwogICAgfSAgZWxzZSBpZih0eXBlb2YgbmF2aWdhdG9yLmRldmljZSAhPT0gInVuZGVmaW5lZCIgJiYgdHlwZW9mIG5hdmlnYXRvci5kZXZpY2UuY3VpZE1hcCAhPT0gInVuZGVmaW5lZCIpewogICAgICByZXR1cm4gbmF2aWdhdG9yLmRldmljZS5jdWlkTWFwOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH0sCgogICJnZXREZXN0aW5hdGlvbiI6IGZ1bmN0aW9uKCl7CiAgICB2YXIgZGVzdGluYXRpb24gPSBudWxsOwogICAgdmFyIHBsYXRmb3Jtc1RvVGVzdCA9IF9kZXJlcV8oIi4vcGxhdGZvcm1zTWFwIik7CgoKICAgIHZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50OwoKICAgIHZhciBkZXN0X292ZXJyaWRlID0gZG9jdW1lbnQubG9jYXRpb24uc2VhcmNoLnNwbGl0KCJmaF9kZXN0aW5hdGlvbl9jb2RlPSIpOwogICAgaWYgKGRlc3Rfb3ZlcnJpZGUubGVuZ3RoID4gMSkgewogICAgIGRlc3RpbmF0aW9uID0gZGVzdF9vdmVycmlkZVsxXTsKICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdy5maF9kZXN0aW5hdGlvbl9jb2RlICE9PSAndW5kZWZpbmVkJykgewogICAgICBkZXN0aW5hdGlvbiA9IHdpbmRvdy5maF9kZXN0aW5hdGlvbl9jb2RlOwogICAgfSBlbHNlIHsKICAgICAgcGxhdGZvcm1zVG9UZXN0LmZvckVhY2goZnVuY3Rpb24odGVzdERlc3RpbmF0aW9uKXsKICAgICAgICB0ZXN0RGVzdGluYXRpb24udGVzdC5mb3JFYWNoKGZ1bmN0aW9uKGRlc3RpbmF0aW9uVGVzdCl7CiAgICAgICAgICBpZih1c2VyQWdlbnQuaW5kZXhPZihkZXN0aW5hdGlvblRlc3QpID4gLTEpewogICAgICAgICAgICBkZXN0aW5hdGlvbiA9IHRlc3REZXN0aW5hdGlvbi5kZXN0aW5hdGlvbjsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgaWYoZGVzdGluYXRpb24gPT0gbnVsbCl7IC8vTm8gdXNlciBhZ2VudHMgd2VyZSBmb3VuZCwgc2V0IHRvIGRlZmF1bHQgd2ViCiAgICAgIGRlc3RpbmF0aW9uID0gIndlYiI7CiAgICB9CgogICAgbG9nZ2VyLmRlYnVnKCJkZXN0aW5hdGlvbiA9ICIgKyBkZXN0aW5hdGlvbik7CgogICAgcmV0dXJuIGRlc3RpbmF0aW9uOwogIH0KfQoKfSx7Ii4vY29va2llcyI6MjgsIi4vbG9nZ2VyIjozNywiLi9wbGF0Zm9ybXNNYXAiOjM4LCIuL3V1aWQiOjQ2fV0sMzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgRXZlbnRFbWl0dGVyID0gX2RlcmVxXygnZXZlbnRzJykuRXZlbnRFbWl0dGVyOwoKdmFyIGVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7CmVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKDApOwoKbW9kdWxlLmV4cG9ydHMgPSBlbWl0dGVyOwp9LHsiZXZlbnRzIjo5fV0sMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgZGV2aWNlID0gX2RlcmVxXygiLi9kZXZpY2UiKTsKdmFyIHNka3ZlcnNpb24gPSBfZGVyZXFfKCIuL3Nka3ZlcnNpb24iKTsKdmFyIGFwcFByb3BzID0gX2RlcmVxXygiLi9hcHBQcm9wcyIpOwp2YXIgbG9nZ2VyID0gX2RlcmVxXygiLi9sb2dnZXIiKTsKCnZhciBkZWZhdWx0UGFyYW1zID0gbnVsbDsKdmFyIGF1dGhTZXNzaW9uVG9rZW4gPSBudWxsOwovL1RPRE86IHJldmlldyB0aGVzZSBvcHRpb25zLCB3ZSBwcm9iYWJseSBvbmx5IG5lZWRzIGFsbCBvZiB0aGVtIGZvciBpbml0IGNhbGxzLCBidXQgd2Ugc2hvdWxkbid0IG5lZWQgYWxsIG9mIHRoZW0gZm9yIGFjdCBjYWxscwp2YXIgYnVpbGRGSFBhcmFtcyA9IGZ1bmN0aW9uKCl7CiAgaWYoZGVmYXVsdFBhcmFtcyl7CiAgICByZXR1cm4gZGVmYXVsdFBhcmFtczsKICB9CiAgdmFyIGZocGFyYW1zID0ge307CiAgZmhwYXJhbXMuY3VpZCA9IGRldmljZS5nZXREZXZpY2VJZCgpOwogIGZocGFyYW1zLmN1aWRNYXAgPSBkZXZpY2UuZ2V0Q3VpZE1hcCgpOwogIGZocGFyYW1zLmRlc3RpbmF0aW9uID0gZGV2aWNlLmdldERlc3RpbmF0aW9uKCk7CiAgCiAgaWYod2luZG93LmRldmljZSB8fCBuYXZpZ2F0b3IuZGV2aWNlKXsKICAgIGZocGFyYW1zLmRldmljZSA9IHdpbmRvdy5kZXZpY2UgfHwgbmF2aWdhdG9yLmRldmljZTsKICB9CgogIC8vYmFja3dhcmQgY29tcGF0aWJsZQogIGlmICh0eXBlb2Ygd2luZG93LmZoX2FwcF92ZXJzaW9uICE9PSAndW5kZWZpbmVkJyl7CiAgICBmaHBhcmFtcy5hcHBfdmVyc2lvbiA9IGZoX2FwcF92ZXJzaW9uOwogIH0KICBpZiAodHlwZW9mIHdpbmRvdy5maF9wcm9qZWN0X3ZlcnNpb24gIT09ICd1bmRlZmluZWQnKXsKICAgIGZocGFyYW1zLnByb2plY3RfdmVyc2lvbiA9IGZoX3Byb2plY3RfdmVyc2lvbjsKICB9CiAgaWYgKHR5cGVvZiB3aW5kb3cuZmhfcHJvamVjdF9hcHBfdmVyc2lvbiAhPT0gJ3VuZGVmaW5lZCcpewogICAgZmhwYXJhbXMucHJvamVjdF9hcHBfdmVyc2lvbiA9IGZoX3Byb2plY3RfYXBwX3ZlcnNpb247CiAgfQogIGZocGFyYW1zLnNka192ZXJzaW9uID0gc2RrdmVyc2lvbigpOwogIGlmKGF1dGhTZXNzaW9uVG9rZW4pewogICAgZmhwYXJhbXMuc2Vzc2lvblRva2VuID0gYXV0aFNlc3Npb25Ub2tlbjsKICB9CgogIHZhciBhcHBfcHJvcHMgPSBhcHBQcm9wcy5nZXRBcHBQcm9wcygpOwogIGlmKGFwcF9wcm9wcyl7CiAgICBmaHBhcmFtcy5hcHBpZCA9IGFwcF9wcm9wcy5hcHBpZDsKICAgIGZocGFyYW1zLmFwcGtleSA9IGFwcF9wcm9wcy5hcHBrZXk7CiAgICBmaHBhcmFtcy5wcm9qZWN0aWQgPSBhcHBfcHJvcHMucHJvamVjdGlkOwogICAgZmhwYXJhbXMuYW5hbHl0aWNzVGFnID0gIGFwcF9wcm9wcy5hbmFseXRpY3NUYWc7CiAgICBmaHBhcmFtcy5jb25uZWN0aW9udGFnID0gYXBwX3Byb3BzLmNvbm5lY3Rpb250YWc7CiAgICBpZihhcHBfcHJvcHMuaW5pdCl7CiAgICAgIGZocGFyYW1zLmluaXQgPSB0eXBlb2YoYXBwX3Byb3BzLmluaXQpID09PSAic3RyaW5nIiA/IEpTT04ucGFyc2UoYXBwX3Byb3BzLmluaXQpIDogYXBwX3Byb3BzLmluaXQ7CiAgICB9CiAgfQogIAogIGRlZmF1bHRQYXJhbXMgPSBmaHBhcmFtczsKICBsb2dnZXIuZGVidWcoImZocGFyYW1zID0gIiwgZGVmYXVsdFBhcmFtcyk7CiAgcmV0dXJuIGZocGFyYW1zOwp9Cgp2YXIgYWRkRkhQYXJhbXMgPSBmdW5jdGlvbihwYXJhbXMpewogIHZhciBwYXJhbXMgPSBwYXJhbXMgfHwge307CiAgcGFyYW1zLl9fZmggPSBidWlsZEZIUGFyYW1zKCk7CiAgcmV0dXJuIHBhcmFtczsKfQoKdmFyIHNldEF1dGhTZXNzaW9uVG9rZW4gPSBmdW5jdGlvbihzZXNzaW9uVG9rZW4pewogIGF1dGhTZXNzaW9uVG9rZW4gPSBzZXNzaW9uVG9rZW47Cn0KCm1vZHVsZS5leHBvcnRzID0gewogICJidWlsZEZIUGFyYW1zIjogYnVpbGRGSFBhcmFtcywKICAiYWRkRkhQYXJhbXMiOiBhZGRGSFBhcmFtcywKICAic2V0QXV0aFNlc3Npb25Ub2tlbiI6c2V0QXV0aFNlc3Npb25Ub2tlbgp9Cgp9LHsiLi9hcHBQcm9wcyI6MjUsIi4vZGV2aWNlIjoyOSwiLi9sb2dnZXIiOjM3LCIuL3Nka3ZlcnNpb24iOjQwfV0sMzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgSlNPTiA9IF9kZXJlcV8oIkpTT04iKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZmFpbCwgcmVxLCByZXNTdGF0dXMsIGVycm9yKXsKICB2YXIgZXJycmF3OwogIHZhciBzdGF0dXNDb2RlID0gMDsKICBpZihyZXEpewogICAgdHJ5ewogICAgICBzdGF0dXNDb2RlID0gcmVxLnN0YXR1czsKICAgICAgdmFyIHJlcyA9IEpTT04ucGFyc2UocmVxLnJlc3BvbnNlVGV4dCk7CiAgICAgIGVycnJhdyA9IHJlcy5lcnJvciB8fCByZXMubXNnOwogICAgICBpZiAoZXJycmF3IGluc3RhbmNlb2YgQXJyYXkpIHsKICAgICAgICBlcnJyYXcgPSBlcnJyYXcuam9pbignXG4nKTsKICAgICAgfQogICAgfSBjYXRjaChlKXsKICAgICAgZXJycmF3ID0gcmVxLnJlc3BvbnNlVGV4dDsKICAgIH0KICB9CiAgaWYoZmFpbCl7CiAgICBmYWlsKGVycnJhdywgewogICAgICBzdGF0dXM6IHN0YXR1c0NvZGUsCiAgICAgIG1lc3NhZ2U6IHJlc1N0YXR1cywKICAgICAgZXJyb3I6IGVycm9yCiAgICB9KTsKICB9Cn07Cgp9LHsiSlNPTiI6M31dLDMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oIi4vY29uc3RhbnRzIik7CnZhciBhcHBQcm9wcyA9IF9kZXJlcV8oIi4vYXBwUHJvcHMiKTsKCmZ1bmN0aW9uIHJlbW92ZUVuZFNsYXNoKGlucHV0KXsKICB2YXIgcmV0ID0gaW5wdXQ7CiAgaWYocmV0LmNoYXJBdChyZXQubGVuZ3RoIC0gMSkgPT09ICIvIil7CiAgICByZXQgPSByZXQuc3Vic3RyaW5nKDAsIHJldC5sZW5ndGgtMSk7CiAgfQogIHJldHVybiByZXQ7Cn0KCmZ1bmN0aW9uIHJlbW92ZVN0YXJ0U2xhc2goaW5wdXQpewogIHZhciByZXQgPSBpbnB1dDsKICBpZihyZXQubGVuZ3RoID4gMSAmJiByZXQuY2hhckF0KDApID09PSAiLyIpewogICAgcmV0ID0gcmV0LnN1YnN0cmluZygxLCByZXQubGVuZ3RoKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKZnVuY3Rpb24gQ2xvdWRIb3N0KGNsb3VkX3Byb3BzKXsKICB0aGlzLmNsb3VkX3Byb3BzID0gY2xvdWRfcHJvcHM7CiAgdGhpcy5jbG91ZF9ob3N0ID0gdW5kZWZpbmVkOwogIHRoaXMuaXNMZWdhY3kgPSBmYWxzZTsKfQoKQ2xvdWRIb3N0LnByb3RvdHlwZS5nZXRIb3N0ID0gZnVuY3Rpb24oYXBwVHlwZSl7CiAgaWYodGhpcy5jbG91ZF9ob3N0KXsKICAgIHJldHVybiB0aGlzLmNsb3VkX2hvc3Q7CiAgfSBlbHNlIHsKICAgIHZhciB1cmw7CiAgICB2YXIgYXBwX3R5cGU7CiAgICBpZih0aGlzLmNsb3VkX3Byb3BzICYmIHRoaXMuY2xvdWRfcHJvcHMuaG9zdHMpewogICAgICB1cmwgPSB0aGlzLmNsb3VkX3Byb3BzLmhvc3RzLnVybDsKCiAgICAgIGlmICh0eXBlb2YgdXJsID09PSAndW5kZWZpbmVkJykgewogICAgICAgIC8vIHJlc29sdmUgdXJsIHRoZSBvbGQgd2F5IGkuZS4gZGVwZW5kaW5nIG9uCiAgICAgICAgLy8gLWJ1cm50IGluIGFwcCBtb2RlCiAgICAgICAgLy8gLXJldHVybmVkIGRldiBvciBsaXZlIHVybAogICAgICAgIC8vIC1yZXR1cm5lZCBkZXYgb3IgbGl2ZSB0eXBlIChub2RlIG9yIGZoKHJoaW5vIG9yIHByb3h5aW5nKSkKICAgICAgICB2YXIgY2xvdWRfaG9zdCA9IHRoaXMuY2xvdWRfcHJvcHMuaG9zdHMucmVsZWFzZUNsb3VkVXJsOwogICAgICAgIGFwcF90eXBlID0gdGhpcy5jbG91ZF9wcm9wcy5ob3N0cy5yZWxlYXNlQ2xvdWRUeXBlOwoKICAgICAgICBpZih0eXBlb2YgYXBwVHlwZSAhPT0gInVuZGVmaW5lZCIgJiYgYXBwVHlwZS5pbmRleE9mKCJkZXYiKSA+IC0xKXsKICAgICAgICAgIGNsb3VkX2hvc3QgPSB0aGlzLmNsb3VkX3Byb3BzLmhvc3RzLmRlYnVnQ2xvdWRVcmw7CiAgICAgICAgICBhcHBfdHlwZSA9IHRoaXMuY2xvdWRfcHJvcHMuaG9zdHMuZGVidWdDbG91ZFR5cGU7CiAgICAgICAgfQogICAgICAgIHVybCA9IGNsb3VkX2hvc3Q7CiAgICAgIH0KICAgIH0KICAgIHVybCA9IHJlbW92ZUVuZFNsYXNoKHVybCk7CiAgICB0aGlzLmNsb3VkX2hvc3QgPSB1cmw7CiAgICBpZihhcHBfdHlwZSA9PT0gImZoIil7CiAgICAgIHRoaXMuaXNMZWdhY3kgPSB0cnVlOwogICAgfQogICAgcmV0dXJuIHVybDsKICB9Cn0KCkNsb3VkSG9zdC5wcm90b3R5cGUuZ2V0QWN0VXJsID0gZnVuY3Rpb24oYWN0KXsKICB2YXIgYXBwX3Byb3BzID0gYXBwUHJvcHMuZ2V0QXBwUHJvcHMoKSB8fCB7fTsKICBpZih0eXBlb2YgdGhpcy5jbG91ZF9ob3N0ID09PSAidW5kZWZpbmVkIil7CiAgICB0aGlzLmdldEhvc3QoYXBwX3Byb3BzLm1vZGUpOwogIH0KICBpZih0aGlzLmlzTGVnYWN5KXsKICAgIHJldHVybiB0aGlzLmNsb3VkX2hvc3QgKyBjb25zdGFudHMuYm94cHJlZml4ICsgImFjdC8iICsgdGhpcy5jbG91ZF9wcm9wcy5kb21haW4gKyAiLyIgKyBhcHBfcHJvcHMuYXBwaWQgKyAiLyIgKyBhY3QgKyAiLyIgKyBhcHBfcHJvcHMuYXBwaWQ7CiAgfSBlbHNlIHsKICAgIHJldHVybiB0aGlzLmNsb3VkX2hvc3QgKyAiL2Nsb3VkLyIgKyBhY3Q7CiAgfQp9CgpDbG91ZEhvc3QucHJvdG90eXBlLmdldE1CQUFTVXJsID0gZnVuY3Rpb24oc2VydmljZSl7CiAgdmFyIGFwcF9wcm9wcyA9IGFwcFByb3BzLmdldEFwcFByb3BzKCkgfHwge307CiAgaWYodHlwZW9mIHRoaXMuY2xvdWRfaG9zdCA9PT0gInVuZGVmaW5lZCIpewogICAgdGhpcy5nZXRIb3N0KGFwcF9wcm9wcy5tb2RlKTsKICB9CiAgcmV0dXJuIHRoaXMuY2xvdWRfaG9zdCArICIvbWJhYXMvIiArIHNlcnZpY2U7Cn0KCkNsb3VkSG9zdC5wcm90b3R5cGUuZ2V0Q2xvdWRVcmwgPSBmdW5jdGlvbihwYXRoKXsKICB2YXIgYXBwX3Byb3BzID0gYXBwUHJvcHMuZ2V0QXBwUHJvcHMoKSB8fCB7fTsKICBpZih0eXBlb2YgdGhpcy5jbG91ZF9ob3N0ID09PSAidW5kZWZpbmVkIil7CiAgICB0aGlzLmdldEhvc3QoYXBwX3Byb3BzLm1vZGUpOwogIH0KICByZXR1cm4gdGhpcy5jbG91ZF9ob3N0ICsgIi8iICsgcmVtb3ZlU3RhcnRTbGFzaChwYXRoKTsKfQoKCgptb2R1bGUuZXhwb3J0cyA9IENsb3VkSG9zdDsKfSx7Ii4vYXBwUHJvcHMiOjI1LCIuL2NvbnN0YW50cyI6Mjd9XSwzNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciBsb2FkU2NyaXB0ID0gX2RlcmVxXygiLi9sb2FkU2NyaXB0Iik7CnZhciBMYXduY2hhaXIgPSBfZGVyZXFfKCcuLi8uLi9saWJzL2dlbmVyYXRlZC9sYXduY2hhaXInKTsKdmFyIGxhd25jaGFpcmV4dCA9IF9kZXJlcV8oJy4vbGF3bmNoYWlyLWV4dCcpOwp2YXIgY29uc3RzID0gX2RlcmVxXygiLi9jb25zdGFudHMiKTsKdmFyIGZocGFyYW1zID0gX2RlcmVxXygiLi9maHBhcmFtcyIpOwp2YXIgYWpheCA9IF9kZXJlcV8oIi4vYWpheCIpOwp2YXIgaGFuZGxlRXJyb3IgPSBfZGVyZXFfKCIuL2hhbmRsZUVycm9yIik7CnZhciBsb2dnZXIgPSBfZGVyZXFfKCIuL2xvZ2dlciIpOwp2YXIgSlNPTiA9IF9kZXJlcV8oIkpTT04iKTsKdmFyIGhhc2hGdW5jID0gX2RlcmVxXygiLi9zZWN1cml0eS9oYXNoIik7CnZhciBhcHBQcm9wcyA9IF9kZXJlcV8oIi4vYXBwUHJvcHMiKTsKdmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oIi4vY29uc3RhbnRzIik7CnZhciBldmVudHMgPSBfZGVyZXFfKCIuL2V2ZW50cyIpOwoKdmFyIGluaXQgPSBmdW5jdGlvbihjYikgewogIGFwcFByb3BzLmxvYWQoZnVuY3Rpb24oZXJyLCBkYXRhKSB7CiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKCiAgICAvLyBFbWl0IGludGVybmFsIGNvbmZpZyBsb2FkZWQgZXZlbnQgLSBTREsgd2lsbCBub3cgc2V0IGFwcHByb3BzCiAgICBldmVudHMuZW1pdChjb25zdGFudHMuSU5URVJOQUxfQ09ORklHX0xPQURFRF9FVkVOVCwgbnVsbCwgZGF0YSk7CiAgICByZXR1cm4gbG9hZENsb3VkUHJvcHMoZGF0YSwgY2IpOwogIH0pOwp9OwoKdmFyIGxvYWRDbG91ZFByb3BzID0gZnVuY3Rpb24oYXBwX3Byb3BzLCBjYWxsYmFjaykgewogIGlmIChhcHBfcHJvcHMubG9nbGV2ZWwpIHsKICAgIGxvZ2dlci5zZXRMZXZlbChhcHBfcHJvcHMubG9nbGV2ZWwpOwogIH0KICAvLyBJZiBsb2NhbCAtIHNob3J0Y2lyY3VpdCB0aGUgaW5pdCAtIGp1c3QgcmV0dXJuIHRoZSBob3N0CiAgaWYgKGFwcF9wcm9wcy5sb2NhbCkgewogICAgdmFyIHJlcyA9IHsKICAgICAgImRvbWFpbiI6ICJsb2NhbCIsCiAgICAgICJmaXJzdFRpbWUiOiBmYWxzZSwKICAgICAgImhvc3RzIjogewogICAgICAgICJkZWJ1Z0Nsb3VkVHlwZSI6ICJub2RlIiwKICAgICAgICAiZGVidWdDbG91ZFVybCI6IGFwcF9wcm9wcy5ob3N0LAogICAgICAgICJyZWxlYXNlQ2xvdWRUeXBlIjogIm5vZGUiLAogICAgICAgICJyZWxlYXNlQ2xvdWRVcmwiOiBhcHBfcHJvcHMuaG9zdCwKICAgICAgICAidHlwZSI6ICJjbG91ZF9ub2RlanMiLAogICAgICAgICJ1cmwiOiBhcHBfcHJvcHMuaG9zdAogICAgICB9LAogICAgICAiaW5pdCI6IHsKICAgICAgICAidHJhY2tJZCI6ICIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiAib2siCiAgICB9OwoKICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB7CiAgICAgIGNsb3VkOiByZXMKICAgIH0pOwogIH0KCgogIC8vbm93IHdlIGhhdmUgYXBwIHByb3BzLCBhZGQgdGhlIGZpbGVTdG9yYWdlQWRhcHRlcgogIGxhd25jaGFpcmV4dC5hZGRBZGFwdGVyKGFwcF9wcm9wcywgaGFzaEZ1bmMpOwogIC8vZG9tIGFkYXB0ZXIgZG9lbnMndCB3b3JrIG9uIHdpbmRvd3MgcGhvbmUsIHNvIGRvbid0IHNwZWNpZnkgdGhlIGFkYXB0ZXIgaWYgdGhlIGRvbSBvbmUgZmFpbGVkCiAgLy93ZSBzcGVjaWZ5IHRoZSBvcmRlciBvZiBsYXduY2hhaXIgYWRhcHRlcnMgdG8gdXNlLCBsYXduY2hhaXIgd2lsbCBmaW5kIHRoZSByaWdodCBvbmUgdG8gdXNlLCB0byBrZWVwIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGtlZXAgdGhlIG9yZGVyCiAgLy9hcyBkb20sIHdlYmtpdC1zcWxpdGUsIGxvY2FsRmlsZVN0b3JhZ2UsIHdpbmRvdy1uYW1lCiAgdmFyIGxjQ29uZiA9IHsKICAgIG5hbWU6ICJmaF9pbml0X3N0b3JhZ2UiLAogICAgYWRhcHRlcjogWyJkb20iLCAid2Via2l0LXNxbGl0ZSIsICJ3aW5kb3ctbmFtZSJdLAogICAgZmFpbDogZnVuY3Rpb24obXNnLCBlcnIpIHsKICAgICAgdmFyIGVycm9yX21lc3NhZ2UgPSAncmVhZC9zYXZlIGZyb20vdG8gbG9jYWwgc3RvcmFnZSBmYWlsZWQgIG1zZzonICsgbXNnICsgJyBlcnI6JyArIGVycjsKICAgICAgcmV0dXJuIGZhaWwoZXJyb3JfbWVzc2FnZSwge30pOwogICAgfQogIH07CgogIGlmICh0eXBlb2YgVGl0YW5pdW0gIT09ICJ1bmRlZmluZWQiKSB7CiAgICBsY0NvbmYuYWRhcHRlciA9IFsndGl0YW5pdW0nXTsKICB9CgogIHZhciBkb0luaXQgPSBmdW5jdGlvbihwYXRoLCBhcHBQcm9wcywgc2F2ZWRIb3N0LCBzdG9yYWdlKSB7CiAgICB2YXIgZGF0YSA9IGZocGFyYW1zLmJ1aWxkRkhQYXJhbXMoKTsKCiAgICBhamF4KHsKICAgICAgInVybCI6IHBhdGgsCiAgICAgICJ0eXBlIjogIlBPU1QiLAogICAgICAidHJ5SlNPTlAiOiB0cnVlLAogICAgICAiZGF0YVR5cGUiOiAianNvbiIsCiAgICAgICJjb250ZW50VHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgImRhdGEiOiBKU09OLnN0cmluZ2lmeShkYXRhKSwKICAgICAgInRpbWVvdXQiOiBhcHBQcm9wcy50aW1lb3V0LAogICAgICAic3VjY2VzcyI6IGZ1bmN0aW9uKGluaXRSZXMpIHsKICAgICAgICBpZiAoc3RvcmFnZSkgewogICAgICAgICAgc3RvcmFnZS5zYXZlKHsKICAgICAgICAgICAga2V5OiAiZmhfaW5pdCIsCiAgICAgICAgICAgIHZhbHVlOiBpbml0UmVzCiAgICAgICAgICB9LCBmdW5jdGlvbigpIHt9KTsKICAgICAgICB9CiAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICBjYWxsYmFjayhudWxsLCB7CiAgICAgICAgICAgIGNsb3VkOiBpbml0UmVzCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJlcnJvciI6IGZ1bmN0aW9uKHJlcSwgc3RhdHVzVGV4dCwgZXJyb3IpIHsKICAgICAgICB2YXIgZXJyb3Jtc2cgPSAidW5rbm93biI7CiAgICAgICAgaWYgKHJlcSkgewogICAgICAgICAgZXJyb3Jtc2cgPSByZXEuc3RhdHVzICsgIiAtICIgKyByZXEucmVzcG9uc2VUZXh0OwogICAgICAgIH0KICAgICAgICBsb2dnZXIuZXJyb3IoIkFwcCBpbml0IHJldHVybmVkIGVycm9yIDogIiArIGVycm9ybXNnKTsKICAgICAgICAvL3VzZSB0aGUgY2FjaGVkIGhvc3QgaWYgd2UgaGF2ZSBhIGNvcHkKICAgICAgICBpZiAoc2F2ZWRIb3N0KSB7CiAgICAgICAgICBsb2dnZXIuaW5mbygiVXNpbmcgY2FjaGVkIGhvc3Q6ICIgKyBKU09OLnN0cmluZ2lmeShzYXZlZEhvc3QpKTsKICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7CiAgICAgICAgICAgICAgY2xvdWQ6IHNhdmVkSG9zdAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgbG9nZ2VyLmVycm9yKCJObyBjYWNoZWQgaG9zdCBmb3VuZC4gSW5pdCBmYWlsZWQuIik7CiAgICAgICAgICBoYW5kbGVFcnJvcihmdW5jdGlvbihtc2csIGVycikgewogICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICBjYWxsYmFjayh7CiAgICAgICAgICAgICAgICBlcnJvcjogZXJyLAogICAgICAgICAgICAgICAgbWVzc2FnZTogbXNnCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIHJlcSwgc3RhdHVzVGV4dCwgZXJyb3IpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfTsKCiAgdmFyIHN0b3JhZ2UgPSBudWxsOwogIHZhciBwYXRoID0gYXBwX3Byb3BzLmhvc3QgKyBjb25zdHMuYm94cHJlZml4ICsgImFwcC9pbml0IjsKICB0cnkgewogICAgc3RvcmFnZSA9IG5ldyBMYXduY2hhaXIobGNDb25mLCBmdW5jdGlvbigpIHt9KTsKICAgIHN0b3JhZ2UuZ2V0KCdmaF9pbml0JywgZnVuY3Rpb24oc3RvcmFnZV9yZXMpIHsKICAgICAgdmFyIHNhdmVkSG9zdCA9IG51bGw7CiAgICAgIGlmIChzdG9yYWdlX3JlcyAmJiBzdG9yYWdlX3Jlcy52YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2Yoc3RvcmFnZV9yZXMudmFsdWUpICE9PSAidW5kZWZpbmVkIiAmJiBzdG9yYWdlX3JlcyAhPT0gIiIpIHsKICAgICAgICBzdG9yYWdlX3JlcyA9IHR5cGVvZihzdG9yYWdlX3JlcykgPT09ICJzdHJpbmciID8gSlNPTi5wYXJzZShzdG9yYWdlX3JlcykgOiBzdG9yYWdlX3JlczsKICAgICAgICBzdG9yYWdlX3Jlcy52YWx1ZSA9IHR5cGVvZihzdG9yYWdlX3Jlcy52YWx1ZSkgPT09ICJzdHJpbmciID8gSlNPTi5wYXJzZShzdG9yYWdlX3Jlcy52YWx1ZSkgOiBzdG9yYWdlX3Jlcy52YWx1ZTsKICAgICAgICBpZiAoc3RvcmFnZV9yZXMudmFsdWUuaW5pdCkgewogICAgICAgICAgYXBwX3Byb3BzLmluaXQgPSBzdG9yYWdlX3Jlcy52YWx1ZS5pbml0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvL2tlZXAgaXQgYmFja3dhcmQgY29tcGF0aWJsZS4KICAgICAgICAgIGFwcF9wcm9wcy5pbml0ID0gdHlwZW9mKHN0b3JhZ2VfcmVzLnZhbHVlKSA9PT0gInN0cmluZyIgPyBKU09OLnBhcnNlKHN0b3JhZ2VfcmVzLnZhbHVlKSA6IHN0b3JhZ2VfcmVzLnZhbHVlOwogICAgICAgIH0KICAgICAgICBpZiAoc3RvcmFnZV9yZXMudmFsdWUuaG9zdHMpIHsKICAgICAgICAgIHNhdmVkSG9zdCA9IHN0b3JhZ2VfcmVzLnZhbHVlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZG9Jbml0KHBhdGgsIGFwcF9wcm9wcywgc2F2ZWRIb3N0LCBzdG9yYWdlKTsKICAgIH0pOwogIH0gY2F0Y2ggKGUpIHsKICAgIC8vZm9yIHdoYXRldmVyIHJlYXNvbiAoZS5nLiBsb2NhbFN0b3JhZ2UgaXMgZGlzYWJsZWQpIExhd25jaGFpciBpcyBmYWlsZWQgdG8gaW5pdCwganVzdCBkbyB0aGUgaW5pdAogICAgZG9Jbml0KHBhdGgsIGFwcF9wcm9wcywgbnVsbCwgbnVsbCk7CiAgfQp9OwoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgImluaXQiOiBpbml0LAogICJsb2FkQ2xvdWRQcm9wcyI6IGxvYWRDbG91ZFByb3BzCn0KfSx7Ii4uLy4uL2xpYnMvZ2VuZXJhdGVkL2xhd25jaGFpciI6MiwiLi9hamF4IjoxOCwiLi9hcHBQcm9wcyI6MjUsIi4vY29uc3RhbnRzIjoyNywiLi9ldmVudHMiOjMwLCIuL2ZocGFyYW1zIjozMSwiLi9oYW5kbGVFcnJvciI6MzIsIi4vbGF3bmNoYWlyLWV4dCI6MzUsIi4vbG9hZFNjcmlwdCI6MzYsIi4vbG9nZ2VyIjozNywiLi9zZWN1cml0eS9oYXNoIjo0MywiSlNPTiI6M31dLDM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIExhd25jaGFpciA9IF9kZXJlcV8oJy4uLy4uL2xpYnMvZ2VuZXJhdGVkL2xhd25jaGFpcicpOwoKdmFyIGZpbGVTdG9yYWdlQWRhcHRlciA9IGZ1bmN0aW9uIChhcHBfcHJvcHMsIGhhc2hGdW5jKSB7CiAgLy8gcHJpdmF0ZSBtZXRob2RzCgogIGZ1bmN0aW9uIGRvTG9nKG1lc3MpewogICAgaWYoY29uc29sZSl7CiAgICAgIGNvbnNvbGUubG9nKG1lc3MpOwogICAgfQogIH0KCiAgdmFyIGZhaWwgPSBmdW5jdGlvbiAoZSwgaSkgewogICAgaWYoY29uc29sZSkgY29uc29sZS5sb2coJ2Vycm9yIGluIGZpbGUgc3lzdGVtIGFkYXB0ZXIgIScsIGUsIGkpOwogICAgZWxzZSB0aHJvdyBlOwogIH07CgoKICBmdW5jdGlvbiBmaWxlbmFtZUZvcktleShrZXksIGNiKSB7CiAgICBrZXkgPSBhcHBfcHJvcHMuYXBwaWQgKyBrZXk7CgogICAgaGFzaEZ1bmMoewogICAgICBhbGdvcml0aG06ICJNRDUiLAogICAgICB0ZXh0OiBrZXkKICAgIH0sIGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICB2YXIgZmlsZW5hbWUgPSByZXN1bHQuaGFzaHZhbHVlICsgJy50eHQnOwogICAgICBpZiAodHlwZW9mIG5hdmlnYXRvci5leHRlcm5hbHN0b3JhZ2UgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgbmF2aWdhdG9yLmV4dGVybmFsc3RvcmFnZS5lbmFibGUoZnVuY3Rpb24gaGFuZGxlU3VjY2VzcyhyZXMpewogICAgICAgICAgdmFyIHBhdGggPSBmaWxlbmFtZTsKICAgICAgICAgIGlmKHJlcy5wYXRoICkgewogICAgICAgICAgICBwYXRoID0gcmVzLnBhdGg7CiAgICAgICAgICAgIGlmKCFwYXRoLm1hdGNoKC9cLyQvKSkgewogICAgICAgICAgICAgIHBhdGggKz0gJy8nOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHBhdGggKz0gZmlsZW5hbWU7CiAgICAgICAgICB9CiAgICAgICAgICBmaWxlbmFtZSA9IHBhdGg7CiAgICAgICAgICByZXR1cm4gY2IoZmlsZW5hbWUpOwogICAgICAgIH0sZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyKXsKICAgICAgICAgIHJldHVybiBjYihmaWxlbmFtZSk7CiAgICAgICAgfSkKICAgICAgfSBlbHNlIHsKICAgICAgICBkb0xvZygnZmlsZW5hbWVGb3JLZXkga2V5PScgKyBrZXkrICcgLCBGaWxlbmFtZTogJyArIGZpbGVuYW1lKTsKICAgICAgICByZXR1cm4gY2IoZmlsZW5hbWUpOwogICAgICB9CiAgICB9KTsKICB9CgogIHJldHVybiB7CgogICAgdmFsaWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICEhKHdpbmRvdy5yZXF1ZXN0RmlsZVN5c3RlbSkgfSwKCiAgICBpbml0IDogZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKXsKICAgICAgLy9jYWxscyB0aGUgcGFyZW50IGZ1bmN0aW9uIGZuIGFuZCBhcHBsaWVzIHRoaXMgc2NvcGUKICAgICAgaWYob3B0aW9ucyAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2Ygb3B0aW9ucy5mYWlsICkgZmFpbCA9IG9wdGlvbnMuZmFpbDsKICAgICAgaWYgKGNhbGxiYWNrKSB0aGlzLmZuKHRoaXMubmFtZSwgY2FsbGJhY2spLmNhbGwodGhpcywgdGhpcyk7CiAgICB9LAoKICAgIGtleXM6IGZ1bmN0aW9uIChjYWxsYmFjayl7CiAgICAgIHRocm93ICJDdXJyZW50bHkgbm90IHN1cHBvcnRlZCI7CiAgICB9LAoKICAgIHNhdmUgOiBmdW5jdGlvbiAob2JqLCBjYWxsYmFjayl7CiAgICAgIHZhciBrZXkgPSBvYmoua2V5OwogICAgICB2YXIgdmFsdWUgPSBvYmoudmFsfHxvYmoudmFsdWU7CiAgICAgIGZpbGVuYW1lRm9yS2V5KGtleSwgZnVuY3Rpb24oaGFzaCkgewogICAgICAgIHdpbmRvdy5yZXF1ZXN0RmlsZVN5c3RlbShMb2NhbEZpbGVTeXN0ZW0uUEVSU0lTVEVOVCwgMCwgZnVuY3Rpb24gZ290RlMoZmlsZVN5c3RlbSkgewoKICAgICAgICAgIGZpbGVTeXN0ZW0ucm9vdC5nZXRGaWxlKGhhc2gsIHsKICAgICAgICAgICAgY3JlYXRlOiB0cnVlCiAgICAgICAgICB9LCBmdW5jdGlvbiBnb3RGaWxlRW50cnkoZmlsZUVudHJ5KSB7CiAgICAgICAgICAgIGZpbGVFbnRyeS5jcmVhdGVXcml0ZXIoZnVuY3Rpb24gZ290RmlsZVdyaXRlcih3cml0ZXIpIHsKICAgICAgICAgICAgICB3cml0ZXIub253cml0ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHsKICAgICAgICAgICAgICAgICAga2V5OiBrZXksCiAgICAgICAgICAgICAgICAgIHZhbDogdmFsdWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgd3JpdGVyLndyaXRlKHZhbHVlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgZmFpbCgnW3NhdmVdIEZhaWxlZCB0byBjcmVhdGUgZmlsZSB3cml0ZXInKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZmFpbCgnW3NhdmVdIEZhaWxlZCB0byBnZXRGaWxlJyk7CiAgICAgICAgICB9KTsKICAgICAgICB9LCBmdW5jdGlvbigpIHsKICAgICAgICAgIGZhaWwoJ1tzYXZlXSBGYWlsZWQgdG8gcmVxdWVzdEZpbGVTeXN0ZW0nKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAoKICAgIGJhdGNoIDogZnVuY3Rpb24gKHJlY29yZHMsIGNhbGxiYWNrKXsKICAgICAgdGhyb3cgIkN1cnJlbnRseSBub3Qgc3VwcG9ydGVkIjsKICAgIH0sCgogICAgZ2V0IDogZnVuY3Rpb24gKGtleSwgY2FsbGJhY2spewogICAgICBmaWxlbmFtZUZvcktleShrZXksIGZ1bmN0aW9uKGhhc2gpIHsKICAgICAgICB3aW5kb3cucmVxdWVzdEZpbGVTeXN0ZW0oTG9jYWxGaWxlU3lzdGVtLlBFUlNJU1RFTlQsIDAsIGZ1bmN0aW9uIGdvdEZTKGZpbGVTeXN0ZW0pIHsKICAgICAgICAgIGZpbGVTeXN0ZW0ucm9vdC5nZXRGaWxlKGhhc2gsIHt9LCBmdW5jdGlvbiBnb3RGaWxlRW50cnkoZmlsZUVudHJ5KSB7CiAgICAgICAgICAgIGZpbGVFbnRyeS5maWxlKGZ1bmN0aW9uIGdvdEZpbGUoZmlsZSkgewogICAgICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGV2dC50YXJnZXQucmVzdWx0OwogICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIFVSTGVuY29kZWQKICAgICAgICAgICAgICAgIC8vIFBHIDIuMiBidWcgaW4gcmVhZEFzVGV4dCgpCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICB0ZXh0ID0gZGVjb2RlVVJJQ29tcG9uZW50KHRleHQpOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAvLyBTd2FsbG93IGV4Y2VwdGlvbiBpZiBub3QgVVJMZW5jb2RlZAogICAgICAgICAgICAgICAgICAvLyBKdXN0IHVzZSB0aGUgcmVzdWx0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soewogICAgICAgICAgICAgICAgICBrZXk6IGtleSwKICAgICAgICAgICAgICAgICAgdmFsOiB0ZXh0CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpOwogICAgICAgICAgICB9LCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBmYWlsKCdbbG9hZF0gRmFpbGVkIHRvIGdldEZpbGUnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgLy8gU3VjY2VzcyBjYWxsYmFjayBvbiBrZXkgbG9hZCBmYWlsdXJlCiAgICAgICAgICAgIGNhbGxiYWNrKHsKICAgICAgICAgICAgICBrZXk6IGtleSwKICAgICAgICAgICAgICB2YWw6IG51bGwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9LCBmdW5jdGlvbigpIHsKICAgICAgICAgIGZhaWwoJ1tsb2FkXSBGYWlsZWQgdG8gZ2V0IGZpbGVTeXN0ZW0nKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAoKICAgIGV4aXN0cyA6IGZ1bmN0aW9uIChrZXksIGNhbGxiYWNrKXsKICAgICAgZmlsZW5hbWVGb3JLZXkoa2V5LGZ1bmN0aW9uIChoYXNoKXsKICAgICAgICB3aW5kb3cucmVxdWVzdEZpbGVTeXN0ZW0oTG9jYWxGaWxlU3lzdGVtLlBFUlNJU1RFTlQsIDAsIGZ1bmN0aW9uIGdvdEZTKGZpbGVTeXN0ZW0pIHsKICAgICAgICAgIGZpbGVTeXN0ZW0ucm9vdC5nZXRGaWxlKGhhc2gsIHt9LAogICAgICAgICAgICBmdW5jdGlvbiBnb3RGaWxlRW50cnkoZmlsZUVudHJ5KSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHRydWUpOwogICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKXsKICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZmFsc2UpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAoKICAgIGFsbCA6IGZ1bmN0aW9uIChjYWxsYmFjayl7CiAgICAgIHRocm93ICJDdXJyZW50bHkgbm90IHN1cHBvcnRlZCI7CiAgICB9LAoKICAgIHJlbW92ZSA6IGZ1bmN0aW9uIChrZXksIGNhbGxiYWNrKXsKICAgICAgZmlsZW5hbWVGb3JLZXkoa2V5LCBmdW5jdGlvbihoYXNoKSB7CgogICAgICAgIHdpbmRvdy5yZXF1ZXN0RmlsZVN5c3RlbShMb2NhbEZpbGVTeXN0ZW0uUEVSU0lTVEVOVCwgMCwgZnVuY3Rpb24gZ290RlMoZmlsZVN5c3RlbSkgewogICAgICAgICAgZmlsZVN5c3RlbS5yb290LmdldEZpbGUoaGFzaCwge30sIGZ1bmN0aW9uIGdvdEZpbGVFbnRyeShmaWxlRW50cnkpIHsKCiAgICAgICAgICAgIGZpbGVFbnRyeS5yZW1vdmUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHsKICAgICAgICAgICAgICAgIGtleToga2V5LAogICAgICAgICAgICAgICAgdmFsOiBudWxsCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgIGZhaWwoJ1tyZW1vdmVdIEZhaWxlZCB0byByZW1vdmUgZmlsZScpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmYWlsKCdbcmVtb3ZlXSBGYWlsZWQgdG8gZ2V0RmlsZScpOwogICAgICAgICAgfSk7CiAgICAgICAgfSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICBmYWlsKCdbcmVtb3ZlXSBGYWlsZWQgdG8gZ2V0IGZpbGVTeXN0ZW0nKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAoKICAgIG51a2UgOiBmdW5jdGlvbiAoY2FsbGJhY2spewogICAgICB0aHJvdyAiQ3VycmVudGx5IG5vdCBzdXBwb3J0ZWQiOwogICAgfQoKCiAgfTsKfQoKdmFyIGFkZEFkYXB0ZXIgPSBmdW5jdGlvbihhcHBfcHJvcHMsIGhhc2hGdW5jKXsKICBMYXduY2hhaXIuYWRhcHRlcignbG9jYWxGaWxlU3RvcmFnZScsIGZpbGVTdG9yYWdlQWRhcHRlcihhcHBfcHJvcHMsIGhhc2hGdW5jKSk7Cn0KCm1vZHVsZS5leHBvcnRzID0gewogIGFkZEFkYXB0ZXI6IGFkZEFkYXB0ZXIKfQp9LHsiLi4vLi4vbGlicy9nZW5lcmF0ZWQvbGF3bmNoYWlyIjoyfV0sMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrKSB7CiAgdmFyIHNjcmlwdDsKICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CiAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgc2NyaXB0LmFzeW5jID0gImFzeW5jIjsKICBzY3JpcHQuc3JjID0gdXJsOwogIHNjcmlwdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7CiAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIXNjcmlwdC5yZWFkeVN0YXRlIHx8IC9sb2FkZWR8Y29tcGxldGUvLnRlc3Qoc2NyaXB0LnJlYWR5U3RhdGUpKSB7CiAgICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDsKICAgICAgaWYgKGhlYWQgJiYgc2NyaXB0LnBhcmVudE5vZGUpIHsKICAgICAgICBoZWFkLnJlbW92ZUNoaWxkKHNjcmlwdCk7CiAgICAgIH0KICAgICAgc2NyaXB0ID0gdW5kZWZpbmVkOwogICAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGNhbGxiYWNrID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgY2FsbGJhY2soKTsKICAgICAgfQogICAgfQogIH07CiAgaGVhZC5pbnNlcnRCZWZvcmUoc2NyaXB0LCBoZWFkLmZpcnN0Q2hpbGQpOwp9OwoKfSx7fV0sMzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgY29uc29sZSA9IF9kZXJlcV8oJ2NvbnNvbGUnKTsKdmFyIGxvZyA9IF9kZXJlcV8oJ2xvZ2xldmVsJyk7Cgpsb2cuc2V0TGV2ZWwoJ2luZm8nKTsKCi8qKgogKiBBUElzOgogKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsLgogKiBJbiBzaG9ydCwgeW91IGNhbiB1c2U6CiAqIGxvZy5zZXRMZXZlbChsb2dsZXZlbCkgLSBkZWZhdWx0IHRvIGluZm8KICogbG9nLmVuYWJsZUFsbCgpIC0gZW5hYmxlIGFsbCBsb2cgbWVzc2FnZXMKICogbG9nLmRpc2FibGVBbGwoKSAtIGRpc2FibGUgYWxsIGxvZyBtZXNzYWdlcwogKgogKiBsb2cudHJhY2UobXNnKQogKiBsb2cuZGVidWcobXNnKQogKiBsb2cuaW5mbyhtc2cpCiAqIGxvZy53YXJuKG1zZykKICogbG9nLmVycm9yKG1zZykKICoKICogQXZhaWxhYmxlIGxldmVsczogeyAiVFJBQ0UiOiAwLCAiREVCVUciOiAxLCAiSU5GTyI6IDIsICJXQVJOIjogMywgIkVSUk9SIjogNCwgIlNJTEVOVCI6IDV9CiAqIFVzZSBlaXRoZXIgc3RyaW5nIG9yIGludGVnZXIgdmFsdWUKICovCm1vZHVsZS5leHBvcnRzID0gbG9nOwp9LHsiY29uc29sZSI6OCwibG9nbGV2ZWwiOjE0fV0sMzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IFsKICB7CiAgICAiZGVzdGluYXRpb24iIDoiaXBhZCIsCiAgICAidGVzdCI6IFsiaVBhZCJdCiAgfSwKICB7CiAgICAiZGVzdGluYXRpb24iIDoiaXBob25lIiwKICAgICJ0ZXN0IjogWyJpUGhvbmUiXQogIH0sCiAgewogICAgImRlc3RpbmF0aW9uIiA6ImFuZHJvaWQiLAogICAgInRlc3QiOiBbIkFuZHJvaWQiXQogIH0sCiAgewogICAgImRlc3RpbmF0aW9uIiA6ImJsYWNrYmVycnkiLAogICAgInRlc3QiOiBbIkJsYWNrQmVycnkiLCAiQkIxMCIsICJSSU0gVGFibGV0IE9TIl0vL0JsYWNrYmVycnkgMTAgZG9lcyBub3QgY29udGFpbiAiQmxhY2tiZXJyeSIKICB9LAogIHsKICAgICJkZXN0aW5hdGlvbiIgOiJ3aW5kb3dzcGhvbmUiLAogICAgInRlc3QiOiBbIldpbmRvd3MgUGhvbmUgOCJdCiAgfSwKICB7CiAgICAiZGVzdGluYXRpb24iIDoid2luZG93c3Bob25lNyIsCiAgICAidGVzdCI6IFsiV2luZG93cyBQaG9uZSBPUyA3Il0KICB9Cl07Cgp9LHt9XSwzOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXJsKSB7CiAgdmFyIHFtYXAgPSB7fTsKICB2YXIgaSA9IHVybC5zcGxpdCgiPyIpOwogIGlmIChpLmxlbmd0aCA9PT0gMikgewogICAgdmFyIHF1ZXJ5U3RyaW5nID0gaVsxXTsKICAgIHZhciBwYWlycyA9IHF1ZXJ5U3RyaW5nLnNwbGl0KCImIik7CiAgICBxbWFwID0ge307CiAgICBmb3IgKHZhciBwID0gMDsgcCA8IHBhaXJzLmxlbmd0aDsgcCsrKSB7CiAgICAgIHZhciBxID0gcGFpcnNbcF07CiAgICAgIHZhciBxcCA9IHEuc3BsaXQoIj0iKTsKICAgICAgcW1hcFtxcFswXV0gPSBxcFsxXTsKICAgIH0KICB9CiAgcmV0dXJuIHFtYXA7Cn07Cn0se31dLDQwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oIi4vY29uc3RhbnRzIik7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkgewogIHZhciB0eXBlID0gIkZIX0pTX1NESyI7CiAgaWYgKHR5cGVvZiB3aW5kb3cuZmhfZGVzdGluYXRpb25fY29kZSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIHR5cGUgPSAiRkhfSFlCUklEX1NESyI7CiAgfSBlbHNlIGlmKHdpbmRvdy5QaG9uZUdhcCB8fCB3aW5kb3cuY29yZG92YSkgewogICAgdHlwZSA9ICJGSF9QSE9ORUdBUF9TREsiOwogIH0KICByZXR1cm4gdHlwZSArICIvIiArIGNvbnN0YW50cy5zZGtfdmVyc2lvbjsKfTsKCn0seyIuL2NvbnN0YW50cyI6Mjd9XSw0MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciByc2EgPSBfZGVyZXFfKCIuLi8uLi8uLi9saWJzL3JzYSIpOwp2YXIgU2VjdXJlUmFuZG9tID0gcnNhLlNlY3VyZVJhbmRvbTsKdmFyIGJ5dGUySGV4ID0gcnNhLmJ5dGUySGV4OwoKdmFyIGdlbmVyYXRlUmFuZG9tS2V5ID0gZnVuY3Rpb24oa2V5c2l6ZSl7CiAgdmFyIHIgPSBuZXcgU2VjdXJlUmFuZG9tKCk7CiAgdmFyIGtleSA9IG5ldyBBcnJheShrZXlzaXplKTsKICByLm5leHRCeXRlcyhrZXkpOwogIHZhciByZXN1bHQgPSAiIjsKICBmb3IodmFyIGk9MDtpPGtleS5sZW5ndGg7aSsrKXsKICAgIHJlc3VsdCArPSBieXRlMkhleChrZXlbaV0pOwogIH0KICByZXR1cm4gcmVzdWx0Owp9OwoKdmFyIGFlc19rZXlnZW4gPSBmdW5jdGlvbihwLCBzLCBmKXsKICBpZiAoIXAucGFyYW1zLmtleXNpemUpIHsKICAgIGYoJ25vX3BhcmFtc19rZXlzaXplJywge30sIHApOwogICAgcmV0dXJuOwogIH0KICBpZiAocC5wYXJhbXMuYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCkgIT09ICJhZXMiKSB7CiAgICBmKCdrZXlnZW5fYmFkX2FsZ29yaXRobScsIHt9LCBwKTsKICAgIHJldHVybjsKICB9CiAgdmFyIGtleXNpemUgPSBwYXJzZUludChwLnBhcmFtcy5rZXlzaXplLCAxMCk7CiAgLy9rZXlzaXplIGlzIGluIGJpdCwgbmVlZCB0byBjb252ZXJ0IHRvIGJ5dGVzIHRvIGdlbmVyYXRlIHJhbmRvbSBrZXkKICAvL2J1dCB0aGUgbGVnYWN5IGNvZGUgaGFzIGEgYnVnLCBpdCBkb2Vzbid0IGRvIHRoZSBjb252ZXJ0LCBzbyBpZiB0aGUga2V5c2l6ZSBpcyBsZXNzIHRoYW4gMTAwLCBkb24ndCBjb252ZXJ0CiAgaWYoa2V5c2l6ZSA+IDEwMCl7CiAgICBrZXlzaXplID0ga2V5c2l6ZS84OwogIH0KICBpZih0eXBlb2YgU2VjdXJlUmFuZG9tID09PSAidW5kZWZpbmVkIil7CiAgICByZXR1cm4gZigic2VjdXJpdHkgbGlicmFyeSBpcyBub3QgbG9hZGVkLiIpOwogIH0KICByZXR1cm4gcyh7CiAgICAnYWxnb3JpdGhtJzogJ0FFUycsCiAgICAnc2VjcmV0a2V5JzogZ2VuZXJhdGVSYW5kb21LZXkoa2V5c2l6ZSksCiAgICAnaXYnOiBnZW5lcmF0ZVJhbmRvbUtleShrZXlzaXplKQogIH0pOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGFlc19rZXlnZW47Cn0seyIuLi8uLi8uLi9saWJzL3JzYSI6NH1dLDQyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIENyeXB0b0pTID0gX2RlcmVxXygiLi4vLi4vLi4vbGlicy9nZW5lcmF0ZWQvY3J5cHRvIik7Cgp2YXIgZW5jcnlwdCA9IGZ1bmN0aW9uKHAsIHMsIGYpewogIHZhciBmaWVsZHMgPSBbJ2tleScsICdwbGFpbnRleHQnLCAnaXYnXTsKICBpZihwLnBhcmFtcy5hbGdvcml0aG0udG9Mb3dlckNhc2UoKSAhPT0gImFlcyIpewogICAgcmV0dXJuIGYoJ2VuY3J5cHRfYmFkX2FsZ29yaXRobScsIHt9LCBwKTsKICB9CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHM7IGkrKykgewogICAgdmFyIGZpZWxkID0gZmllbGRzW2ldOwogICAgaWYgKCFwLnBhcmFtc1tmaWVsZF0pIHsKICAgICAgcmV0dXJuIGYoJ25vX3BhcmFtc18nICsgZmllbGQsIHt9LCBwKTsKICAgIH0KICB9CiAgdmFyIGVuY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5lbmNyeXB0KHAucGFyYW1zLnBsYWludGV4dCwgQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShwLnBhcmFtcy5rZXkpLCB7aXY6IENyeXB0b0pTLmVuYy5IZXgucGFyc2UocC5wYXJhbXMuaXYpfSk7CiAgY2lwaGVyX3RleHQgPSBDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShlbmNyeXB0ZWQuY2lwaGVydGV4dCk7CiAgcmV0dXJuIHMoe2NpcGhlcnRleHQ6IGNpcGhlcl90ZXh0fSk7Cn0KCnZhciBkZWNyeXB0ID0gZnVuY3Rpb24ocCwgcywgZil7CiAgdmFyIGZpZWxkcyA9IFsna2V5JywgJ2NpcGhlcnRleHQnLCAnaXYnXTsKICBpZihwLnBhcmFtcy5hbGdvcml0aG0udG9Mb3dlckNhc2UoKSAhPT0gImFlcyIpewogICAgcmV0dXJuIGYoJ2RlY3J5cHRfYmFkX2FsZ29yaXRobScsIHt9LCBwKTsKICB9CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHM7IGkrKykgewogICAgdmFyIGZpZWxkID0gZmllbGRzW2ldOwogICAgaWYgKCFwLnBhcmFtc1tmaWVsZF0pIHsKICAgICAgcmV0dXJuIGYoJ25vX3BhcmFtc18nICsgZmllbGQsIHt9LCBwKTsKICAgIH0KICB9CiAgdmFyIGRhdGEgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHAucGFyYW1zLmNpcGhlcnRleHQpOwogIHZhciBlbmNvZGVEYXRhID0gQ3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkoZGF0YSk7CiAgdmFyIGRlY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KGVuY29kZURhdGEsIENyeXB0b0pTLmVuYy5IZXgucGFyc2UocC5wYXJhbXMua2V5KSwge2l2OiBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHAucGFyYW1zLml2KX0pOwogIHBsYWluX3RleHQgPSBkZWNyeXB0ZWQudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpOwogIHJldHVybiBzKHtwbGFpbnRleHQ6cGxhaW5fdGV4dH0pOwp9Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBlbmNyeXB0OiBlbmNyeXB0LAogIGRlY3J5cHQ6IGRlY3J5cHQKfQp9LHsiLi4vLi4vLi4vbGlicy9nZW5lcmF0ZWQvY3J5cHRvIjoxfV0sNDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgQ3J5cHRvSlMgPSBfZGVyZXFfKCIuLi8uLi8uLi9saWJzL2dlbmVyYXRlZC9jcnlwdG8iKTsKCgp2YXIgaGFzaCA9IGZ1bmN0aW9uKHAsIHMsIGYpewogIGlmICghcC5wYXJhbXMudGV4dCkgewogICAgZignaGFzaF9ub190ZXh0Jywge30sIHApOwogICAgcmV0dXJuOwogIH0KICB2YXIgaGFzaFZhbHVlOwogIGlmIChwLnBhcmFtcy5hbGdvcml0aG0udG9Mb3dlckNhc2UoKSA9PT0gIm1kNSIpIHsKICAgIGhhc2hWYWx1ZSA9IENyeXB0b0pTLk1ENShwLnBhcmFtcy50ZXh0KS50b1N0cmluZyhDcnlwdG9KUy5lbmMuSGV4KTsKICB9IGVsc2UgaWYocC5wYXJhbXMuYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCkgPT09ICJzaGExIil7CiAgICBoYXNoVmFsdWUgPSBDcnlwdG9KUy5TSEExKHAucGFyYW1zLnRleHQpLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5IZXgpOwogIH0gZWxzZSBpZihwLnBhcmFtcy5hbGdvcml0aG0udG9Mb3dlckNhc2UoKSA9PT0gInNoYTI1NiIpewogICAgaGFzaFZhbHVlID0gQ3J5cHRvSlMuU0hBMjU2KHAucGFyYW1zLnRleHQpLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5IZXgpOwogIH0gZWxzZSBpZihwLnBhcmFtcy5hbGdvcml0aG0udG9Mb3dlckNhc2UoKSA9PT0gInNoYTUxMiIpewogICAgaGFzaFZhbHVlID0gQ3J5cHRvSlMuU0hBNTEyKHAucGFyYW1zLnRleHQpLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5IZXgpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gZigiaGFzaF91bnN1cHBvcnRlZF9hbGdvcml0aG06ICIgKyBwLnBhcmFtcy5hbGdvcml0aG0pOwogIH0KICByZXR1cm4gcyh7Imhhc2h2YWx1ZSI6IGhhc2hWYWx1ZX0pOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGhhc2g7Cn0seyIuLi8uLi8uLi9saWJzL2dlbmVyYXRlZC9jcnlwdG8iOjF9XSw0NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7CnZhciByc2EgPSBfZGVyZXFfKCIuLi8uLi8uLi9saWJzL3JzYSIpOwp2YXIgUlNBS2V5ID0gcnNhLlJTQUtleTsKCnZhciBlbmNyeXB0ID0gZnVuY3Rpb24ocCwgcywgZil7CiAgdmFyIGZpZWxkcyA9IFsnbW9kdWx1JywgJ3BsYWludGV4dCddOwogIGlmKHAucGFyYW1zLmFsZ29yaXRobS50b0xvd2VyQ2FzZSgpICE9PSAicnNhIil7CiAgICByZXR1cm4gZignZW5jcnlwdF9iYWRfYWxnb3JpdGhtJywge30sIHApOwogIH0KICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkczsgaSsrKSB7CiAgICB2YXIgZmllbGQgPSBmaWVsZHNbaV07CiAgICBpZiAoIXAucGFyYW1zW2ZpZWxkXSkgewogICAgICByZXR1cm4gZignbm9fcGFyYW1zXycgKyBmaWVsZCwge30sIHApOwogICAgfQogIH0KICB2YXIga2V5ID0gbmV3IFJTQUtleSgpOwogIGtleS5zZXRQdWJsaWMocC5wYXJhbXMubW9kdWx1LCAiMTAwMDEiKTsKICB2YXIgb3JpX3RleHQgPSBwLnBhcmFtcy5wbGFpbnRleHQ7CiAgY2lwaGVyX3RleHQgPSBrZXkuZW5jcnlwdChvcmlfdGV4dCk7CiAgcmV0dXJuIHMoe2NpcGhlcnRleHQ6Y2lwaGVyX3RleHR9KTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgZW5jcnlwdDogZW5jcnlwdAp9Cn0seyIuLi8uLi8uLi9saWJzL3JzYSI6NH1dLDQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKdmFyIEpTT04gPSBfZGVyZXFfKCJKU09OIik7CnZhciBhY3RBUEkgPSBfZGVyZXFfKCIuL2FwaV9hY3QiKTsKdmFyIGNsb3VkQVBJID0gX2RlcmVxXygiLi9hcGlfY2xvdWQiKTsKdmFyIENyeXB0b0pTID0gX2RlcmVxXygiLi4vLi4vbGlicy9nZW5lcmF0ZWQvY3J5cHRvIik7CnZhciBMYXduY2hhaXIgPSBfZGVyZXFfKCcuLi8uLi9saWJzL2dlbmVyYXRlZC9sYXduY2hhaXInKTsKCnZhciBzZWxmID0gewoKICAvLyBDT05GSUcKICBkZWZhdWx0czogewogICAgInN5bmNfZnJlcXVlbmN5IjogMTAsCiAgICAvLyBIb3cgb2Z0ZW4gdG8gc3luY2hyb25pc2UgZGF0YSB3aXRoIHRoZSBjbG91ZCBpbiBzZWNvbmRzLgogICAgImF1dG9fc3luY19sb2NhbF91cGRhdGVzIjogdHJ1ZSwKICAgIC8vIFNob3VsZCBsb2NhbCBjaGFnZXMgYmUgc3luZWQgdG8gdGhlIGNsb3VkIGltbWVkaWF0ZWx5LCBvciBzaG91bGQgdGhleSB3YWl0IGZvciB0aGUgbmV4dCBzeW5jIGludGVydmFsCiAgICAibm90aWZ5X2NsaWVudF9zdG9yYWdlX2ZhaWxlZCI6IHRydWUsCiAgICAvLyBTaG91bGQgYSBub3RpZmljYXRpb24gZXZlbnQgYmUgdHJpZ2dlcmVkIHdoZW4gbG9hZGluZy9zYXZpbmcgdG8gY2xpZW50IHN0b3JhZ2UgZmFpbHMKICAgICJub3RpZnlfc3luY19zdGFydGVkIjogdHJ1ZSwKICAgIC8vIFNob3VsZCBhIG5vdGlmaWNhdGlvbiBldmVudCBiZSB0cmlnZ2VyZWQgd2hlbiBhIHN5bmMgY3ljbGUgd2l0aCB0aGUgc2VydmVyIGhhcyBiZWVuIHN0YXJ0ZWQKICAgICJub3RpZnlfc3luY19jb21wbGV0ZSI6IHRydWUsCiAgICAvLyBTaG91bGQgYSBub3RpZmljYXRpb24gZXZlbnQgYmUgdHJpZ2dlcmVkIHdoZW4gYSBzeW5jIGN5Y2xlIHdpdGggdGhlIHNlcnZlciBoYXMgYmVlbiBjb21wbGV0ZWQKICAgICJub3RpZnlfb2ZmbGluZV91cGRhdGUiOiB0cnVlLAogICAgLy8gU2hvdWxkIGEgbm90aWZpY2F0aW9uIGV2ZW50IGJlIHRyaWdnZXJlZCB3aGVuIGFuIGF0dGVtcHQgd2FzIG1hZGUgdG8gdXBkYXRlIGEgcmVjb3JkIHdoaWxlIG9mZmxpbmUKICAgICJub3RpZnlfY29sbGlzaW9uX2RldGVjdGVkIjogdHJ1ZSwKICAgIC8vIFNob3VsZCBhIG5vdGlmaWNhdGlvbiBldmVudCBiZSB0cmlnZ2VyZWQgd2hlbiBhbiB1cGRhdGUgZmFpbGVkIGR1ZSB0byBkYXRhIGNvbGxpc2lvbgogICAgIm5vdGlmeV9yZW1vdGVfdXBkYXRlX2ZhaWxlZCI6IHRydWUsCiAgICAvLyBTaG91bGQgYSBub3RpZmljYXRpb24gZXZlbnQgYmUgdHJpZ2dlcmVkIHdoZW4gYW4gdXBkYXRlIGZhaWxlZCBmb3IgYSByZWFzb24gb3RoZXIgdGhhbiBkYXRhIGNvbGxpc2lvbgogICAgIm5vdGlmeV9sb2NhbF91cGRhdGVfYXBwbGllZCI6IHRydWUsCiAgICAvLyBTaG91bGQgYSBub3RpZmljYXRpb24gZXZlbnQgYmUgdHJpZ2dlcmVkIHdoZW4gYW4gdXBkYXRlIHdhcyBhcHBsaWVkIHRvIHRoZSBsb2NhbCBkYXRhIHN0b3JlCiAgICAibm90aWZ5X3JlbW90ZV91cGRhdGVfYXBwbGllZCI6IHRydWUsCiAgICAvLyBTaG91bGQgYSBub3RpZmljYXRpb24gZXZlbnQgYmUgdHJpZ2dlcmVkIHdoZW4gYW4gdXBkYXRlIHdhcyBhcHBsaWVkIHRvIHRoZSByZW1vdGUgZGF0YSBzdG9yZQogICAgIm5vdGlmeV9kZWx0YV9yZWNlaXZlZCI6IHRydWUsCiAgICAvLyBTaG91bGQgYSBub3RpZmljYXRpb24gZXZlbnQgYmUgdHJpZ2dlcmVkIHdoZW4gYSBkZWx0YSB3YXMgcmVjZWl2ZWQgZnJvbSB0aGUgcmVtb3RlIGRhdGEgc3RvcmUgZm9yIHRoZSBkYXRhc2V0IAogICAgIm5vdGlmeV9yZWNvcmRfZGVsdGFfcmVjZWl2ZWQiOiB0cnVlLAogICAgLy8gU2hvdWxkIGEgbm90aWZpY2F0aW9uIGV2ZW50IGJlIHRyaWdnZXJlZCB3aGVuIGEgZGVsdGEgd2FzIHJlY2VpdmVkIGZyb20gdGhlIHJlbW90ZSBkYXRhIHN0b3JlIGZvciBhIHJlY29yZAogICAgIm5vdGlmeV9zeW5jX2ZhaWxlZCI6IHRydWUsCiAgICAvLyBTaG91bGQgYSBub3RpZmljYXRpb24gZXZlbnQgYmUgdHJpZ2dlcmVkIHdoZW4gdGhlIHN5bmMgbG9vcCBmYWlsZWQgdG8gY29tcGxldGUKICAgICJkb19jb25zb2xlX2xvZyI6IGZhbHNlLAogICAgLy8gU2hvdWxkIGxvZyBzdGF0ZW1lbnRzIGJlIHdyaXR0ZW4gdG8gY29uc29sZS5sb2cKICAgICJjcmFzaGVkX2NvdW50X3dhaXQiIDogMTAsCiAgICAvLyBIb3cgbWFueSBzeW5jcyBzaG91bGQgd2UgY2hlY2sgZm9yIHVwZGF0ZXMgb24gY3Jhc2hlZCBpbiBmbGlnaHQgdXBkYXRlcyBiZWZvcmUgd2UgZ2l2ZSB1cCBzZWFyY2hpbmcKICAgICJyZXNlbmRfY3Jhc2hlZF91cGRhdGVzIiA6IHRydWUsCiAgICAvLyBJZiB3ZSBoYXZlIHJlYWNoZWQgdGhlIGNyYXNoZWRfY291bnRfd2FpdCBsaW1pdCwgc2hvdWxkIHdlIHJlLXRyeSBzZW5kaW5nIHRoZSBjcmFzaGVkIGluIGZsaWdodCBwZW5kaW5nIHJlY29yZAogICAgInN5bmNfYWN0aXZlIiA6IHRydWUsCiAgICAvLyBJcyB0aGUgYmFja2dyb3VuZCBzeW5jIHdpdGggdGhlIGNsb3VkIGN1cnJlbnRseSBhY3RpdmUKICAgICJzdG9yYWdlX3N0cmF0ZWd5IiA6ICJodG1sNS1maWxlc3lzdGVtIiwKICAgIC8vIFN0b3JhZ2Ugc3RyYXRlZ3kgdG8gdXNlIGZvciBMYXduY2hhaXIgLSBzdXBwb3J0ZWQgc3RyYXRlZ2llcyBhcmUgJ2h0bWw1LWZpbGVzeXN0ZW0nIGFuZCAnZG9tJwogICAgImZpbGVfc3lzdGVtX3F1b3RhIiA6IDUwICogMTAyNCAqIDEyMDQsCiAgICAvLyBBbW91bnQgb2Ygc3BhY2UgdG8gcmVxdWVzdCBmcm9tIHRoZSBIVE1MNSBmaWxlc3lzdGVtIEFQSSB3aGVuIHJ1bm5pbmcgaW4gYnJvd3NlcgogICAgImhhc19jdXN0b21fc3luYyIgOiBudWxsLAogICAgLy9JZiB0aGUgYXBwIGhhcyBjdXN0b20gY2xvdWQgc3luYyBmdW5jdGlvbiwgaXQgc2hvdWxkIGJlIHNldCB0byB0cnVlLiBJZiBzZXQgdG8gZmFsc2UsIHRoZSBkZWZhdWx0IG1iYWFzIHN5bmMgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkLiBXaGVuIHNldCB0byBudWxsIG9yIHVuZGVmaW5lZCwgCiAgICAvL2EgY2hlY2sgd2lsbCBiZSBwZXJmb3JtZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGltcGxlbWVudGF0aW9uIHRvIHVzZQogICAgImljbG91ZF9iYWNrdXAiIDogZmFsc2UgLy9pb3Mgb25seS4gSWYgc2V0IHRvIHRydWUsIHRoZSBmaWxlIHdpbGwgYmUgYmFja2VkIGJ5IGljbG91ZAogIH0sCgogIG5vdGlmaWNhdGlvbnM6IHsKICAgICJDTElFTlRfU1RPUkFHRV9GQUlMRUQiOiAiY2xpZW50X3N0b3JhZ2VfZmFpbGVkIiwKICAgIC8vIGxvYWRpbmcvc2F2aW5nIHRvIGNsaWVudCBzdG9yYWdlIGZhaWxlZAogICAgIlNZTkNfU1RBUlRFRCI6ICJzeW5jX3N0YXJ0ZWQiLAogICAgLy8gQSBzeW5jIGN5Y2xlIHdpdGggdGhlIHNlcnZlciBoYXMgYmVlbiBzdGFydGVkCiAgICAiU1lOQ19DT01QTEVURSI6ICJzeW5jX2NvbXBsZXRlIiwKICAgIC8vIEEgc3luYyBjeWNsZSB3aXRoIHRoZSBzZXJ2ZXIgaGFzIGJlZW4gY29tcGxldGVkCiAgICAiT0ZGTElORV9VUERBVEUiOiAib2ZmbGluZV91cGRhdGUiLAogICAgLy8gQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byB1cGRhdGUgYSByZWNvcmQgd2hpbGUgb2ZmbGluZQogICAgIkNPTExJU0lPTl9ERVRFQ1RFRCI6ICJjb2xsaXNpb25fZGV0ZWN0ZWQiLAogICAgLy9VcGRhdGUgRmFpbGVkIGR1ZSB0byBkYXRhIGNvbGxpc2lvbgogICAgIlJFTU9URV9VUERBVEVfRkFJTEVEIjogInJlbW90ZV91cGRhdGVfZmFpbGVkIiwKICAgIC8vIFVwZGF0ZSBGYWlsZWQgZm9yIGEgcmVhc29uIG90aGVyIHRoYW4gZGF0YSBjb2xsaXNpb24KICAgICJSRU1PVEVfVVBEQVRFX0FQUExJRUQiOiAicmVtb3RlX3VwZGF0ZV9hcHBsaWVkIiwKICAgIC8vIEFuIHVwZGF0ZSB3YXMgYXBwbGllZCB0byB0aGUgcmVtb3RlIGRhdGEgc3RvcmUKICAgICJMT0NBTF9VUERBVEVfQVBQTElFRCI6ICJsb2NhbF91cGRhdGVfYXBwbGllZCIsCiAgICAvLyBBbiB1cGRhdGUgd2FzIGFwcGxpZWQgdG8gdGhlIGxvY2FsIGRhdGEgc3RvcmUKICAgICJERUxUQV9SRUNFSVZFRCI6ICJkZWx0YV9yZWNlaXZlZCIsCiAgICAvLyBBIGRlbHRhIHdhcyByZWNlaXZlZCBmcm9tIHRoZSByZW1vdGUgZGF0YSBzdG9yZSBmb3IgdGhlIGRhdGFzZXQgCiAgICAiUkVDT1JEX0RFTFRBX1JFQ0VJVkVEIjogInJlY29yZF9kZWx0YV9yZWNlaXZlZCIsCiAgICAvLyBBIGRlbHRhIHdhcyByZWNlaXZlZCBmcm9tIHRoZSByZW1vdGUgZGF0YSBzdG9yZSBmb3IgdGhlIHJlY29yZCAKICAgICJTWU5DX0ZBSUxFRCI6ICJzeW5jX2ZhaWxlZCIKICAgIC8vIFN5bmMgbG9vcCBmYWlsZWQgdG8gY29tcGxldGUKICB9LAoKICBkYXRhc2V0czoge30sCgogIC8vIEluaXRpYWxpc2UgY29uZmlnIHRvIGRlZmF1bHQgdmFsdWVzOwogIGNvbmZpZzogdW5kZWZpbmVkLAoKICAvL1RPRE86IGRlcHJlY2F0ZSB0aGlzCiAgbm90aWZ5X2NhbGxiYWNrOiB1bmRlZmluZWQsCgogIG5vdGlmeV9jYWxsYmFja19tYXAgOiB7fSwKCiAgaW5pdF9pc19jYWxsZWQ6IGZhbHNlLAoKICAvLyBQVUJMSUMgRlVOQ1RJT04gSU1QTEVNRU5UQVRJT05TCiAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgc2VsZi5jb25zb2xlTG9nKCdzeW5jIC0gaW5pdCBjYWxsZWQnKTsKCiAgICBzZWxmLmNvbmZpZyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2VsZi5kZWZhdWx0cykpOwogICAgZm9yICh2YXIgaSBpbiBvcHRpb25zKSB7CiAgICAgIHNlbGYuY29uZmlnW2ldID0gb3B0aW9uc1tpXTsKICAgIH0KCiAgICAvL3ByZXZlbnQgbXVsdGlwbGUgbW9uaXRvcnMgZnJvbSBjcmVhdGVkIGlmIGluaXQgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzCiAgICBpZighc2VsZi5pbml0X2lzX2NhbGxlZCl7CiAgICAgIHNlbGYuaW5pdF9pc19jYWxsZWQgPSB0cnVlOwogICAgICBzZWxmLmRhdGFzZXRNb25pdG9yKCk7CiAgICB9CiAgfSwKCiAgbm90aWZ5OiBmdW5jdGlvbihkYXRhc2V0SWQsIGNhbGxiYWNrKSB7CiAgICBpZihhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBkYXRhc2V0SWQgPT09ICdmdW5jdGlvbicpewogICAgICBzZWxmLm5vdGlmeV9jYWxsYmFjayA9IGRhdGFzZXRJZDsKICAgIH0gZWxzZSB7CiAgICAgIHNlbGYubm90aWZ5X2NhbGxiYWNrX21hcFtkYXRhc2V0SWRdID0gY2FsbGJhY2s7CiAgICB9CiAgfSwKCiAgbWFuYWdlOiBmdW5jdGlvbihkYXRhc2V0X2lkLCBvcHRpb25zLCBxdWVyeV9wYXJhbXMsIG1ldGFfZGF0YSwgY2IpIHsKICAgIHNlbGYuY29uc29sZUxvZygnbWFuYWdlIC0gU1RBUlQnKTsKCiAgICB2YXIgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgogICAgdmFyIGRvTWFuYWdlID0gZnVuY3Rpb24oZGF0YXNldCkgewogICAgICBzZWxmLmNvbnNvbGVMb2coJ2RvTWFuYWdlIGRhdGFzZXQgOjogaW5pdGlhbGlzZWQgPSAnICsgZGF0YXNldC5pbml0aWFsaXNlZCArICIgOjogIiArIGRhdGFzZXRfaWQgKyAnIDo6ICcgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zKSk7CgogICAgICB2YXIgZGF0YXNldENvbmZpZyA9IHNlbGYuc2V0T3B0aW9ucyhvcHRpb25zKTsKCiAgICAgIGRhdGFzZXQucXVlcnlfcGFyYW1zID0gcXVlcnlfcGFyYW1zIHx8IGRhdGFzZXQucXVlcnlfcGFyYW1zIHx8IHt9OwogICAgICBkYXRhc2V0Lm1ldGFfZGF0YSA9IG1ldGFfZGF0YSB8fCBkYXRhc2V0Lm1ldGFfZGF0YSB8fCB7fTsKICAgICAgZGF0YXNldC5jb25maWcgPSBkYXRhc2V0Q29uZmlnOwogICAgICBkYXRhc2V0LnN5bmNSdW5uaW5nID0gZmFsc2U7CiAgICAgIGRhdGFzZXQuc3luY1BlbmRpbmcgPSB0cnVlOwogICAgICBkYXRhc2V0LmluaXRpYWxpc2VkID0gdHJ1ZTsKICAgICAgaWYodHlwZW9mIGRhdGFzZXQubWV0YSA9PT0gInVuZGVmaW5lZCIpewogICAgICAgIGRhdGFzZXQubWV0YSA9IHt9OwogICAgICB9CgogICAgICBzZWxmLnNhdmVEYXRhU2V0KGRhdGFzZXRfaWQsIGZ1bmN0aW9uKCkgewoKICAgICAgICBpZiggY2IgKSB7CiAgICAgICAgICBjYigpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9OwoKICAgIC8vIENoZWNrIGlmIHRoZSBkYXRhc2V0IGlzIGFscmVhZHkgbG9hZGVkCiAgICBzZWxmLmdldERhdGFTZXQoZGF0YXNldF9pZCwgZnVuY3Rpb24oZGF0YXNldCkgewogICAgICBzZWxmLmNvbnNvbGVMb2coJ21hbmFnZSAtIGRhdGFzZXQgYWxyZWFkeSBsb2FkZWQnKTsKICAgICAgZG9NYW5hZ2UoZGF0YXNldCk7CiAgICB9LCBmdW5jdGlvbihlcnIpIHsKICAgICAgc2VsZi5jb25zb2xlTG9nKCdtYW5hZ2UgLSBkYXRhc2V0IG5vdCBsb2FkZWQuLi4gdHJ5aW5nIHRvIGxvYWQnKTsKCiAgICAgIC8vIE5vdCBhbHJlYWR5IGxvYWRlZCwgdHJ5IHRvIGxvYWQgZnJvbSBsb2NhbCBzdG9yYWdlCiAgICAgIHNlbGYubG9hZERhdGFTZXQoZGF0YXNldF9pZCwgZnVuY3Rpb24oZGF0YXNldCkgewogICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCdtYW5hZ2UgLSBkYXRhc2V0IGxvYWRlZCBmcm9tIGxvY2FsIHN0b3JhZ2UnKTsKCiAgICAgICAgICAvLyBMb2FkaW5nIGZyb20gbG9jYWwgc3RvcmFnZSB3b3JrZWQKCiAgICAgICAgICAvLyBGaXJlIHRoZSBsb2NhbCB1cGRhdGUgZXZlbnQgdG8gaW5kaWNhdGUgdGhhdCBkYXRhc2V0IHdhcyBsb2FkZWQgZnJvbSBsb2NhbCBzdG9yYWdlCiAgICAgICAgICBzZWxmLmRvTm90aWZ5KGRhdGFzZXRfaWQsIG51bGwsIHNlbGYubm90aWZpY2F0aW9ucy5MT0NBTF9VUERBVEVfQVBQTElFRCwgImxvYWQiKTsKCiAgICAgICAgICAvLyBQdXQgdGhlIGRhdGFldCB1bmRlciB0aGUgbWFuYWdlbWVudCBvZiB0aGUgc3luYyBzZXJ2aWNlCiAgICAgICAgICBkb01hbmFnZShkYXRhc2V0KTsKICAgICAgICB9LAogICAgICAgIGZ1bmN0aW9uKGVycikgewogICAgICAgICAgLy8gTm8gZGF0YXNldCBpbiBtZW1vcnkgb3IgbG9jYWwgc3RvcmFnZSAtIGNyZWF0ZSBhIG5ldyBvbmUgYW5kIHB1dCBpdCBpbiBtZW1vcnkKICAgICAgICAgIHNlbGYuY29uc29sZUxvZygnbWFuYWdlIC0gQ3JlYXRpbmcgbmV3IGRhdGFzZXQgZm9yIGlkICcgKyBkYXRhc2V0X2lkKTsKICAgICAgICAgIHZhciBkYXRhc2V0ID0ge307CiAgICAgICAgICBkYXRhc2V0LmRhdGEgPSB7fTsKICAgICAgICAgIGRhdGFzZXQucGVuZGluZyA9IHt9OwogICAgICAgICAgZGF0YXNldC5tZXRhID0ge307CiAgICAgICAgICBzZWxmLmRhdGFzZXRzW2RhdGFzZXRfaWRdID0gZGF0YXNldDsKICAgICAgICAgIGRvTWFuYWdlKGRhdGFzZXQpOwogICAgICAgIH0pOwogICAgfSk7CiAgfSwKCiAgc2V0T3B0aW9uczogZnVuY3Rpb24ob3B0aW9ucykgewogICAgLy8gTWFrZSBzdXJlIGNvbmZpZyBpcyBpbml0aWFsaXNlZAogICAgaWYoICEgc2VsZi5jb25maWcgKSB7CiAgICAgIHNlbGYuY29uZmlnID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzZWxmLmRlZmF1bHRzKSk7CiAgICB9CgogICAgdmFyIGRhdGFzZXRDb25maWcgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNlbGYuY29uZmlnKSk7CiAgICB2YXIgb3B0aW9uc0luID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvcHRpb25zKSk7CiAgICBmb3IgKHZhciBrIGluIG9wdGlvbnNJbikgewogICAgICBkYXRhc2V0Q29uZmlnW2tdID0gb3B0aW9uc0luW2tdOwogICAgfQoKICAgIHJldHVybiBkYXRhc2V0Q29uZmlnOwogIH0sCgogIGxpc3Q6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIHN1Y2Nlc3MsIGZhaWx1cmUpIHsKICAgIHNlbGYuZ2V0RGF0YVNldChkYXRhc2V0X2lkLCBmdW5jdGlvbihkYXRhc2V0KSB7CiAgICAgIGlmIChkYXRhc2V0ICYmIGRhdGFzZXQuZGF0YSkgewogICAgICAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIGRhdGFzZXQgc28gdXBkYXRlcyB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IG1ha2UgaXQgYmFjayBpbnRvIHRoZSBkYXRhc2V0CiAgICAgICAgdmFyIHJlcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YXNldC5kYXRhKSk7CiAgICAgICAgc3VjY2VzcyhyZXMpOwogICAgICB9IGVsc2UgewogICAgICAgIGlmKGZhaWx1cmUpIGZhaWx1cmUoJ25vX2RhdGEnKTsKICAgICAgfQogICAgfSwgZnVuY3Rpb24oY29kZSwgbXNnKSB7CiAgICAgIGlmKGZhaWx1cmUpIGZhaWx1cmUoY29kZSwgbXNnKTsKICAgIH0pOwogIH0sCgogIGNyZWF0ZTogZnVuY3Rpb24oZGF0YXNldF9pZCwgZGF0YSwgc3VjY2VzcywgZmFpbHVyZSkgewogICAgaWYoZGF0YSA9PSBudWxsKXsKICAgICAgaWYoZmFpbHVyZSl7CiAgICAgICAgcmV0dXJuIGZhaWx1cmUoIm51bGxfZGF0YSIpOwogICAgICB9CiAgICB9CiAgICBzZWxmLmFkZFBlbmRpbmdPYmooZGF0YXNldF9pZCwgbnVsbCwgZGF0YSwgImNyZWF0ZSIsIHN1Y2Nlc3MsIGZhaWx1cmUpOwogIH0sCgogIHJlYWQ6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIHVpZCwgc3VjY2VzcywgZmFpbHVyZSkgewogICAgc2VsZi5nZXREYXRhU2V0KGRhdGFzZXRfaWQsIGZ1bmN0aW9uKGRhdGFzZXQpIHsKICAgICAgdmFyIHJlYyA9IGRhdGFzZXQuZGF0YVt1aWRdOwogICAgICBpZiAoIXJlYykgewogICAgICAgIGZhaWx1cmUoInVua25vd25fdWlkIik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgcmVjb3JkIHNvIHVwZGF0ZXMgd2lsbCBub3QgYXV0b21hdGljYWxseSBtYWtlIGl0IGJhY2sgaW50byB0aGUgZGF0YXNldAogICAgICAgIHZhciByZXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlYykpOwogICAgICAgIHN1Y2Nlc3MocmVzKTsKICAgICAgfQogICAgfSwgZnVuY3Rpb24oY29kZSwgbXNnKSB7CiAgICAgIGlmKGZhaWx1cmUpIGZhaWx1cmUoY29kZSwgbXNnKTsKICAgIH0pOwogIH0sCgogIHVwZGF0ZTogZnVuY3Rpb24oZGF0YXNldF9pZCwgdWlkLCBkYXRhLCBzdWNjZXNzLCBmYWlsdXJlKSB7CiAgICBzZWxmLmFkZFBlbmRpbmdPYmooZGF0YXNldF9pZCwgdWlkLCBkYXRhLCAidXBkYXRlIiwgc3VjY2VzcywgZmFpbHVyZSk7CiAgfSwKCiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIHVpZCwgc3VjY2VzcywgZmFpbHVyZSkgewogICAgc2VsZi5hZGRQZW5kaW5nT2JqKGRhdGFzZXRfaWQsIHVpZCwgbnVsbCwgImRlbGV0ZSIsIHN1Y2Nlc3MsIGZhaWx1cmUpOwogIH0sCgogIGdldFBlbmRpbmc6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIGNiKSB7CiAgICBzZWxmLmdldERhdGFTZXQoZGF0YXNldF9pZCwgZnVuY3Rpb24oZGF0YXNldCkgewogICAgICB2YXIgcmVzOwogICAgICBpZiggZGF0YXNldCApIHsKICAgICAgICByZXMgPSBkYXRhc2V0LnBlbmRpbmc7CiAgICAgIH0KICAgICAgY2IocmVzKTsKICAgIH0sIGZ1bmN0aW9uKGVyciwgZGF0YXRzZXRfaWQpIHsKICAgICAgICBzZWxmLmNvbnNvbGVMb2coZXJyKTsKICAgIH0pOwogIH0sCgogIGNsZWFyUGVuZGluZzogZnVuY3Rpb24oZGF0YXNldF9pZCwgY2IpIHsKICAgIHNlbGYuZ2V0RGF0YVNldChkYXRhc2V0X2lkLCBmdW5jdGlvbihkYXRhc2V0KSB7CiAgICAgIGRhdGFzZXQucGVuZGluZyA9IHt9OwogICAgICBzZWxmLnNhdmVEYXRhU2V0KGRhdGFzZXRfaWQsIGNiKTsKICAgIH0pOwogIH0sCgogIGxpc3RDb2xsaXNpb25zIDogZnVuY3Rpb24oZGF0YXNldF9pZCwgc3VjY2VzcywgZmFpbHVyZSl7CiAgICBzZWxmLmdldERhdGFTZXQoZGF0YXNldF9pZCwgZnVuY3Rpb24oZGF0YXNldCkgewogICAgICBzZWxmLmRvQ2xvdWRDYWxsKHsKICAgICAgICAiZGF0YXNldF9pZCI6IGRhdGFzZXRfaWQsCiAgICAgICAgInJlcSI6IHsKICAgICAgICAgICJmbiI6ICJsaXN0Q29sbGlzaW9ucyIsCiAgICAgICAgICAibWV0YV9kYXRhIiA6IGRhdGFzZXQubWV0YV9kYXRhCiAgICAgICAgfQogICAgICB9LCBzdWNjZXNzLCBmYWlsdXJlKTsKICAgIH0sIGZhaWx1cmUpOwogIH0sCgogIHJlbW92ZUNvbGxpc2lvbjogZnVuY3Rpb24oZGF0YXNldF9pZCwgY29saXNzaW9uSGFzaCwgc3VjY2VzcywgZmFpbHVyZSkgewogICAgc2VsZi5nZXREYXRhU2V0KGRhdGFzZXRfaWQsIGZ1bmN0aW9uKGRhdGFzZXQpIHsKICAgICAgc2VsZi5kb0Nsb3VkQ2FsbCh7CiAgICAgICAgImRhdGFzZXRfaWQiIDogZGF0YXNldF9pZCwKICAgICAgICAicmVxIjogewogICAgICAgICAgImZuIjogInJlbW92ZUNvbGxpc2lvbiIsCiAgICAgICAgICAiaGFzaCI6IGNvbGlzc2lvbkhhc2gsCiAgICAgICAgICBtZXRhX2RhdGE6IGRhdGFzZXQubWV0YV9kYXRhCiAgICAgICAgfQogICAgICB9LCBzdWNjZXNzLCBmYWlsdXJlKTsKICAgIH0pOwogIH0sCgoKICAvLyBQUklWQVRFIEZVTkNUSU9OUwogIGlzT25saW5lOiBmdW5jdGlvbihjYWxsYmFjaykgewogICAgdmFyIG9ubGluZSA9IHRydWU7CgogICAgLy8gZmlyc3QsIGNoZWNrIGlmIG5hdmlnYXRvci5vbmxpbmUgaXMgYXZhaWxhYmxlCiAgICBpZih0eXBlb2YgbmF2aWdhdG9yLm9uTGluZSAhPT0gInVuZGVmaW5lZCIpewogICAgICBvbmxpbmUgPSBuYXZpZ2F0b3Iub25MaW5lOwogICAgfQoKICAgIC8vIHNlY29uZCwgY2hlY2sgaWYgUGhvbmVnYXAgaXMgYXZhaWxhYmxlIGFuZCBoYXMgb25saW5lIGluZm8KICAgIGlmKG9ubGluZSl7CiAgICAgIC8vdXNlIHBob25lZ2FwIHRvIGRldGVybWluIGlmIHRoZSBuZXR3b3JrIGlzIGF2YWlsYWJsZQogICAgICBpZih0eXBlb2YgbmF2aWdhdG9yLm5ldHdvcmsgIT09ICJ1bmRlZmluZWQiICYmIHR5cGVvZiBuYXZpZ2F0b3IubmV0d29yay5jb25uZWN0aW9uICE9PSAidW5kZWZpbmVkIil7CiAgICAgICAgdmFyIG5ldHdvcmtUeXBlID0gbmF2aWdhdG9yLm5ldHdvcmsuY29ubmVjdGlvbi50eXBlOwogICAgICAgIGlmKG5ldHdvcmtUeXBlID09PSAibm9uZSIgfHwgbmV0d29ya1R5cGUgPT09IG51bGwpIHsKICAgICAgICAgIG9ubGluZSA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiBjYWxsYmFjayhvbmxpbmUpOwogIH0sCgogIGRvTm90aWZ5OiBmdW5jdGlvbihkYXRhc2V0X2lkLCB1aWQsIGNvZGUsIG1lc3NhZ2UpIHsKCiAgICBpZiggc2VsZi5ub3RpZnlfY2FsbGJhY2sgfHwgc2VsZi5ub3RpZnlfY2FsbGJhY2tfbWFwW2RhdGFzZXRfaWRdKSB7CiAgICAgIHZhciBub3RpZnlGdW5jID0gc2VsZi5ub3RpZnlfY2FsbGJhY2tfbWFwW2RhdGFzZXRfaWRdIHx8IHNlbGYubm90aWZ5X2NhbGxiYWNrOwogICAgICBpZiAoIHNlbGYuY29uZmlnWydub3RpZnlfJyArIGNvZGVdICkgewogICAgICAgIHZhciBub3RpZmljYXRpb24gPSB7CiAgICAgICAgICAiZGF0YXNldF9pZCIgOiBkYXRhc2V0X2lkLAogICAgICAgICAgInVpZCIgOiB1aWQsCiAgICAgICAgICAiY29kZSIgOiBjb2RlLAogICAgICAgICAgIm1lc3NhZ2UiIDogbWVzc2FnZQogICAgICAgIH07CiAgICAgICAgLy8gbWFrZSBzdXJlIHVzZXIgZG9lc24ndCBibG9jawogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgbm90aWZ5RnVuYyhub3RpZmljYXRpb24pOwogICAgICAgIH0sIDApOwogICAgICB9CiAgICB9CiAgfSwKCiAgZ2V0RGF0YVNldDogZnVuY3Rpb24oZGF0YXNldF9pZCwgc3VjY2VzcywgZmFpbHVyZSkgewogICAgdmFyIGRhdGFzZXQgPSBzZWxmLmRhdGFzZXRzW2RhdGFzZXRfaWRdOwoKICAgIGlmIChkYXRhc2V0KSB7CiAgICAgIHN1Y2Nlc3MoZGF0YXNldCk7CiAgICB9IGVsc2UgewogICAgICBpZihmYWlsdXJlKXsKICAgICAgICBmYWlsdXJlKCd1bmtub3duX2RhdGFzZXQgJyArIGRhdGFzZXRfaWQsIGRhdGFzZXRfaWQpOwogICAgICB9CiAgICB9CiAgfSwKCiAgZ2V0UXVlcnlQYXJhbXM6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIHN1Y2Nlc3MsIGZhaWx1cmUpIHsKICAgIHZhciBkYXRhc2V0ID0gc2VsZi5kYXRhc2V0c1tkYXRhc2V0X2lkXTsKCiAgICBpZiAoZGF0YXNldCkgewogICAgICBzdWNjZXNzKGRhdGFzZXQucXVlcnlfcGFyYW1zKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmKGZhaWx1cmUpewogICAgICAgIGZhaWx1cmUoJ3Vua25vd25fZGF0YXNldCAnICsgZGF0YXNldF9pZCwgZGF0YXNldF9pZCk7CiAgICAgIH0KICAgIH0KICB9LAoKICBzZXRRdWVyeVBhcmFtczogZnVuY3Rpb24oZGF0YXNldF9pZCwgcXVlcnlQYXJhbXMsIHN1Y2Nlc3MsIGZhaWx1cmUpIHsKICAgIHZhciBkYXRhc2V0ID0gc2VsZi5kYXRhc2V0c1tkYXRhc2V0X2lkXTsKCiAgICBpZiAoZGF0YXNldCkgewogICAgICBkYXRhc2V0LnF1ZXJ5X3BhcmFtcyA9IHF1ZXJ5UGFyYW1zOwogICAgICBzZWxmLnNhdmVEYXRhU2V0KGRhdGFzZXRfaWQpOwogICAgICBpZiggc3VjY2VzcyApIHsKICAgICAgICBzdWNjZXNzKGRhdGFzZXQucXVlcnlfcGFyYW1zKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaWYgKCBmYWlsdXJlICkgewogICAgICAgIGZhaWx1cmUoJ3Vua25vd25fZGF0YXNldCAnICsgZGF0YXNldF9pZCwgZGF0YXNldF9pZCk7CiAgICAgIH0KICAgIH0KICB9LAoKICBnZXRNZXRhRGF0YTogZnVuY3Rpb24oZGF0YXNldF9pZCwgc3VjY2VzcywgZmFpbHVyZSkgewogICAgdmFyIGRhdGFzZXQgPSBzZWxmLmRhdGFzZXRzW2RhdGFzZXRfaWRdOwoKICAgIGlmIChkYXRhc2V0KSB7CiAgICAgIHN1Y2Nlc3MoZGF0YXNldC5tZXRhX2RhdGEpOwogICAgfSBlbHNlIHsKICAgICAgaWYoZmFpbHVyZSl7CiAgICAgICAgZmFpbHVyZSgndW5rbm93bl9kYXRhc2V0ICcgKyBkYXRhc2V0X2lkLCBkYXRhc2V0X2lkKTsKICAgICAgfQogICAgfQogIH0sCgogIHNldE1ldGFEYXRhOiBmdW5jdGlvbihkYXRhc2V0X2lkLCBtZXRhRGF0YSwgc3VjY2VzcywgZmFpbHVyZSkgewogICAgdmFyIGRhdGFzZXQgPSBzZWxmLmRhdGFzZXRzW2RhdGFzZXRfaWRdOwoKICAgIGlmIChkYXRhc2V0KSB7CiAgICAgIGRhdGFzZXQubWV0YV9kYXRhID0gbWV0YURhdGE7CiAgICAgIHNlbGYuc2F2ZURhdGFTZXQoZGF0YXNldF9pZCk7CiAgICAgIGlmKCBzdWNjZXNzICkgewogICAgICAgIHN1Y2Nlc3MoZGF0YXNldC5tZXRhX2RhdGEpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiggZmFpbHVyZSApIHsKICAgICAgICBmYWlsdXJlKCd1bmtub3duX2RhdGFzZXQgJyArIGRhdGFzZXRfaWQsIGRhdGFzZXRfaWQpOwogICAgICB9CiAgICB9CiAgfSwKCiAgZ2V0Q29uZmlnOiBmdW5jdGlvbihkYXRhc2V0X2lkLCBzdWNjZXNzLCBmYWlsdXJlKSB7CiAgICB2YXIgZGF0YXNldCA9IHNlbGYuZGF0YXNldHNbZGF0YXNldF9pZF07CgogICAgaWYgKGRhdGFzZXQpIHsKICAgICAgc3VjY2VzcyhkYXRhc2V0LmNvbmZpZyk7CiAgICB9IGVsc2UgewogICAgICBpZihmYWlsdXJlKXsKICAgICAgICBmYWlsdXJlKCd1bmtub3duX2RhdGFzZXQgJyArIGRhdGFzZXRfaWQsIGRhdGFzZXRfaWQpOwogICAgICB9CiAgICB9CiAgfSwKCiAgc2V0Q29uZmlnOiBmdW5jdGlvbihkYXRhc2V0X2lkLCBjb25maWcsIHN1Y2Nlc3MsIGZhaWx1cmUpIHsKICAgIHZhciBkYXRhc2V0ID0gc2VsZi5kYXRhc2V0c1tkYXRhc2V0X2lkXTsKCiAgICBpZiAoZGF0YXNldCkgewogICAgICB2YXIgZnVsbENvbmZpZyA9IHNlbGYuc2V0T3B0aW9ucyhjb25maWcpOwogICAgICBkYXRhc2V0LmNvbmZpZyA9IGZ1bGxDb25maWc7CiAgICAgIHNlbGYuc2F2ZURhdGFTZXQoZGF0YXNldF9pZCk7CiAgICAgIGlmKCBzdWNjZXNzICkgewogICAgICAgIHN1Y2Nlc3MoZGF0YXNldC5jb25maWcpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiggZmFpbHVyZSApIHsKICAgICAgICBmYWlsdXJlKCd1bmtub3duX2RhdGFzZXQgJyArIGRhdGFzZXRfaWQsIGRhdGFzZXRfaWQpOwogICAgICB9CiAgICB9CiAgfSwKCiAgc3RvcFN5bmM6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIHN1Y2Nlc3MsIGZhaWx1cmUpIHsKICAgIHNlbGYuc2V0Q29uZmlnKGRhdGFzZXRfaWQsIHsic3luY19hY3RpdmUiIDogZmFsc2V9LCBmdW5jdGlvbigpIHsKICAgICAgaWYoIHN1Y2Nlc3MgKSB7CiAgICAgICAgc3VjY2VzcygpOwogICAgICB9CiAgICB9LCBmYWlsdXJlKTsKICB9LAoKICBzdGFydFN5bmM6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIHN1Y2Nlc3MsIGZhaWx1cmUpIHsKICAgIHNlbGYuc2V0Q29uZmlnKGRhdGFzZXRfaWQsIHsic3luY19hY3RpdmUiIDogdHJ1ZX0sIGZ1bmN0aW9uKCkgewogICAgICBpZiggc3VjY2VzcyApIHsKICAgICAgICBzdWNjZXNzKCk7CiAgICAgIH0KICAgIH0sIGZhaWx1cmUpOwogIH0sCgogIGRvU3luYzogZnVuY3Rpb24oZGF0YXNldF9pZCwgc3VjY2VzcywgZmFpbHVyZSkgewogICAgdmFyIGRhdGFzZXQgPSBzZWxmLmRhdGFzZXRzW2RhdGFzZXRfaWRdOwoKICAgIGlmIChkYXRhc2V0KSB7CiAgICAgIGRhdGFzZXQuc3luY1BlbmRpbmcgPSB0cnVlOwogICAgICBzZWxmLnNhdmVEYXRhU2V0KGRhdGFzZXRfaWQpOwogICAgICBpZiggc3VjY2VzcyApIHsKICAgICAgICBzdWNjZXNzKCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmKCBmYWlsdXJlICkgewogICAgICAgIGZhaWx1cmUoJ3Vua25vd25fZGF0YXNldCAnICsgZGF0YXNldF9pZCwgZGF0YXNldF9pZCk7CiAgICAgIH0KICAgIH0KICB9LAoKICBmb3JjZVN5bmM6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIHN1Y2Nlc3MsIGZhaWx1cmUpIHsKICAgIHZhciBkYXRhc2V0ID0gc2VsZi5kYXRhc2V0c1tkYXRhc2V0X2lkXTsKCiAgICBpZiAoZGF0YXNldCkgewogICAgICBkYXRhc2V0LnN5bmNGb3JjZWQgPSB0cnVlOwogICAgICBzZWxmLnNhdmVEYXRhU2V0KGRhdGFzZXRfaWQpOwogICAgICBpZiggc3VjY2VzcyApIHsKICAgICAgICBzdWNjZXNzKCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmKCBmYWlsdXJlICkgewogICAgICAgIGZhaWx1cmUoJ3Vua25vd25fZGF0YXNldCAnICsgZGF0YXNldF9pZCwgZGF0YXNldF9pZCk7CiAgICAgIH0KICAgIH0KICB9LAoKICBzb3J0T2JqZWN0IDogZnVuY3Rpb24ob2JqZWN0KSB7CiAgICBpZiAodHlwZW9mIG9iamVjdCAhPT0gIm9iamVjdCIgfHwgb2JqZWN0ID09PSBudWxsKSB7CiAgICAgIHJldHVybiBvYmplY3Q7CiAgICB9CgogICAgdmFyIHJlc3VsdCA9IFtdOwoKICAgIE9iamVjdC5rZXlzKG9iamVjdCkuc29ydCgpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7CiAgICAgIHJlc3VsdC5wdXNoKHsKICAgICAgICBrZXk6IGtleSwKICAgICAgICB2YWx1ZTogc2VsZi5zb3J0T2JqZWN0KG9iamVjdFtrZXldKQogICAgICB9KTsKICAgIH0pOwoKICAgIHJldHVybiByZXN1bHQ7CiAgfSwKCiAgc29ydGVkU3RyaW5naWZ5IDogZnVuY3Rpb24ob2JqKSB7CgogICAgdmFyIHN0ciA9ICcnOwoKICAgIHRyeSB7CiAgICAgIHN0ciA9IEpTT04uc3RyaW5naWZ5KHNlbGYuc29ydE9iamVjdChvYmopKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc3RyaW5naWZ5aW5nIHNvcnRlZCBvYmplY3Q6JyArIGUpOwogICAgfQoKICAgIHJldHVybiBzdHI7CiAgfSwKCiAgZ2VuZXJhdGVIYXNoOiBmdW5jdGlvbihvYmplY3QpIHsKICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMShzZWxmLnNvcnRlZFN0cmluZ2lmeShvYmplY3QpKTsKICAgIHJldHVybiBoYXNoLnRvU3RyaW5nKCk7CiAgfSwKCiAgYWRkUGVuZGluZ09iajogZnVuY3Rpb24oZGF0YXNldF9pZCwgdWlkLCBkYXRhLCBhY3Rpb24sIHN1Y2Nlc3MsIGZhaWx1cmUpIHsKICAgIHNlbGYuaXNPbmxpbmUoZnVuY3Rpb24gKG9ubGluZSkgewogICAgICBpZiAoIW9ubGluZSkgewogICAgICAgIHNlbGYuZG9Ob3RpZnkoZGF0YXNldF9pZCwgdWlkLCBzZWxmLm5vdGlmaWNhdGlvbnMuT0ZGTElORV9VUERBVEUsIGFjdGlvbik7CiAgICAgIH0KICAgIH0pOwoKICAgIGZ1bmN0aW9uIHN0b3JlUGVuZGluZ09iamVjdChvYmopIHsKICAgICAgb2JqLmhhc2ggPSBzZWxmLmdlbmVyYXRlSGFzaChvYmopOwoKICAgICAgc2VsZi5nZXREYXRhU2V0KGRhdGFzZXRfaWQsIGZ1bmN0aW9uKGRhdGFzZXQpIHsKCiAgICAgICAgZGF0YXNldC5wZW5kaW5nW29iai5oYXNoXSA9IG9iajsKCiAgICAgICAgc2VsZi51cGRhdGVEYXRhc2V0RnJvbUxvY2FsKGRhdGFzZXQsIG9iaik7CgogICAgICAgIGlmKHNlbGYuY29uZmlnLmF1dG9fc3luY19sb2NhbF91cGRhdGVzKSB7CiAgICAgICAgICBkYXRhc2V0LnN5bmNQZW5kaW5nID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgc2VsZi5zYXZlRGF0YVNldChkYXRhc2V0X2lkKTsKICAgICAgICBzZWxmLmRvTm90aWZ5KGRhdGFzZXRfaWQsIHVpZCwgc2VsZi5ub3RpZmljYXRpb25zLkxPQ0FMX1VQREFURV9BUFBMSUVELCBhY3Rpb24pOwoKICAgICAgICBzdWNjZXNzKG9iaik7CiAgICAgIH0sIGZ1bmN0aW9uKGNvZGUsIG1zZykgewogICAgICAgIGlmKGZhaWx1cmUpIGZhaWx1cmUoY29kZSwgbXNnKTsKICAgICAgfSk7CiAgICB9CgogICAgdmFyIHBlbmRpbmdPYmogPSB7fTsKICAgIHBlbmRpbmdPYmouaW5GbGlnaHQgPSBmYWxzZTsKICAgIHBlbmRpbmdPYmouYWN0aW9uID0gYWN0aW9uOwogICAgcGVuZGluZ09iai5wb3N0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSk7CiAgICBwZW5kaW5nT2JqLnBvc3RIYXNoID0gc2VsZi5nZW5lcmF0ZUhhc2gocGVuZGluZ09iai5wb3N0KTsKICAgIHBlbmRpbmdPYmoudGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICBpZiggImNyZWF0ZSIgPT09IGFjdGlvbiApIHsKICAgICAgcGVuZGluZ09iai51aWQgPSBwZW5kaW5nT2JqLnBvc3RIYXNoOwogICAgICBzdG9yZVBlbmRpbmdPYmplY3QocGVuZGluZ09iaik7CiAgICB9IGVsc2UgewogICAgICBzZWxmLnJlYWQoZGF0YXNldF9pZCwgdWlkLCBmdW5jdGlvbihyZWMpIHsKICAgICAgICBwZW5kaW5nT2JqLnVpZCA9IHVpZDsKICAgICAgICBwZW5kaW5nT2JqLnByZSA9IHJlYy5kYXRhOwogICAgICAgIHBlbmRpbmdPYmoucHJlSGFzaCA9IHNlbGYuZ2VuZXJhdGVIYXNoKHJlYy5kYXRhKTsKICAgICAgICBzdG9yZVBlbmRpbmdPYmplY3QocGVuZGluZ09iaik7CiAgICAgIH0sIGZ1bmN0aW9uKGNvZGUsIG1zZykgewogICAgICAgIGlmKGZhaWx1cmUpewogICAgICAgICAgZmFpbHVyZShjb2RlLCBtc2cpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwKCiAgc3luY0xvb3A6IGZ1bmN0aW9uKGRhdGFzZXRfaWQpIHsKICAgIHNlbGYuZ2V0RGF0YVNldChkYXRhc2V0X2lkLCBmdW5jdGlvbihkYXRhU2V0KSB7CiAgICAKICAgICAgLy8gVGhlIHN5bmMgbG9vcCBpcyBjdXJyZW50bHkgYWN0aXZlCiAgICAgIGRhdGFTZXQuc3luY1BlbmRpbmcgPSBmYWxzZTsKICAgICAgZGF0YVNldC5zeW5jUnVubmluZyA9IHRydWU7CiAgICAgIGRhdGFTZXQuc3luY0xvb3BTdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICBzZWxmLmRvTm90aWZ5KGRhdGFzZXRfaWQsIG51bGwsIHNlbGYubm90aWZpY2F0aW9ucy5TWU5DX1NUQVJURUQsIG51bGwpOwoKICAgICAgc2VsZi5pc09ubGluZShmdW5jdGlvbihvbmxpbmUpIHsKICAgICAgICBpZiAoIW9ubGluZSkgewogICAgICAgICAgc2VsZi5zeW5jQ29tcGxldGUoZGF0YXNldF9pZCwgIm9mZmxpbmUiLCBzZWxmLm5vdGlmaWNhdGlvbnMuU1lOQ19GQUlMRUQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWxmLmNoZWNrSGFzQ3VzdG9tU3luYyhkYXRhc2V0X2lkLCBmdW5jdGlvbigpIHsKCiAgICAgICAgICAgIHZhciBzeW5jTG9vcFBhcmFtcyA9IHt9OwogICAgICAgICAgICBzeW5jTG9vcFBhcmFtcy5mbiA9ICdzeW5jJzsKICAgICAgICAgICAgc3luY0xvb3BQYXJhbXMuZGF0YXNldF9pZCA9IGRhdGFzZXRfaWQ7CiAgICAgICAgICAgIHN5bmNMb29wUGFyYW1zLnF1ZXJ5X3BhcmFtcyA9IGRhdGFTZXQucXVlcnlfcGFyYW1zOwogICAgICAgICAgICBzeW5jTG9vcFBhcmFtcy5jb25maWcgPSBkYXRhU2V0LmNvbmZpZzsKICAgICAgICAgICAgc3luY0xvb3BQYXJhbXMubWV0YV9kYXRhID0gZGF0YVNldC5tZXRhX2RhdGE7CiAgICAgICAgICAgIC8vdmFyIGRhdGFzZXRIYXNoID0gc2VsZi5nZW5lcmF0ZUxvY2FsRGF0YXNldEhhc2goZGF0YVNldCk7CiAgICAgICAgICAgIHN5bmNMb29wUGFyYW1zLmRhdGFzZXRfaGFzaCA9IGRhdGFTZXQuaGFzaDsKICAgICAgICAgICAgc3luY0xvb3BQYXJhbXMuYWNrbm93bGVkZ2VtZW50cyA9IGRhdGFTZXQuYWNrbm93bGVkZ2VtZW50cyB8fCBbXTsKCiAgICAgICAgICAgIHZhciBwZW5kaW5nID0gZGF0YVNldC5wZW5kaW5nOwogICAgICAgICAgICB2YXIgcGVuZGluZ0FycmF5ID0gW107CiAgICAgICAgICAgIGZvcih2YXIgaSBpbiBwZW5kaW5nICkgewogICAgICAgICAgICAgIC8vIE1hcmsgdGhlIHBlbmRpbmcgcmVjb3JkcyB3ZSBhcmUgYWJvdXQgdG8gc3VibWl0IGFzIGluZmxpZ2h0IGFuZCBhZGQgdGhlbSB0byB0aGUgYXJyYXkgZm9yIHN1Ym1pc3Npb24KICAgICAgICAgICAgICAvLyBEb24ndCByZS1hZGQgcHJldmlvdXMgaW5GbGlnaHQgcGVuZGluZyByZWNvcmRzIHdobyB3aGF2ZSBjcmFzaGVkIC0gaS5lLiB3aG8ncyBjdXJyZW50IHN0YXRlIGlzIHVua25vd24KICAgICAgICAgICAgICAvLyBEb24ndCBhZGQgZGVsYXllZCByZWNvcmRzCiAgICAgICAgICAgICAgaWYoICFwZW5kaW5nW2ldLmluRmxpZ2h0ICYmICFwZW5kaW5nW2ldLmNyYXNoZWQgJiYgIXBlbmRpbmdbaV0uZGVsYXllZCkgewogICAgICAgICAgICAgICAgcGVuZGluZ1tpXS5pbkZsaWdodCA9IHRydWU7CiAgICAgICAgICAgICAgICBwZW5kaW5nW2ldLmluRmxpZ2h0RGF0ZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgICAgICAgICAgcGVuZGluZ0FycmF5LnB1c2gocGVuZGluZ1tpXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHN5bmNMb29wUGFyYW1zLnBlbmRpbmcgPSBwZW5kaW5nQXJyYXk7CgogICAgICAgICAgICBpZiggcGVuZGluZ0FycmF5Lmxlbmd0aCA+IDAgKSB7CiAgICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCdTdGFydGluZyBzeW5jIGxvb3AgLSBnbG9iYWwgaGFzaCA9ICcgKyBkYXRhU2V0Lmhhc2ggKyAnIDo6IHBhcmFtcyA9ICcgKyBKU09OLnN0cmluZ2lmeShzeW5jTG9vcFBhcmFtcywgbnVsbCwgMikpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgc2VsZi5kb0Nsb3VkQ2FsbCh7CiAgICAgICAgICAgICAgICAnZGF0YXNldF9pZCc6IGRhdGFzZXRfaWQsCiAgICAgICAgICAgICAgICAncmVxJzogc3luY0xvb3BQYXJhbXMKICAgICAgICAgICAgICB9LCBmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgIHZhciByZWM7CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc1VwZGF0ZXModXBkYXRlcywgbm90aWZpY2F0aW9uLCBhY2tub3dsZWRnZW1lbnRzKSB7CiAgICAgICAgICAgICAgICAgIGlmKCB1cGRhdGVzICkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHVwIGluIHVwZGF0ZXMpIHsKICAgICAgICAgICAgICAgICAgICAgIHJlYyA9IHVwZGF0ZXNbdXBdOwogICAgICAgICAgICAgICAgICAgICAgYWNrbm93bGVkZ2VtZW50cy5wdXNoKHJlYyk7CiAgICAgICAgICAgICAgICAgICAgICBpZiggZGF0YVNldC5wZW5kaW5nW3VwXSAmJiBkYXRhU2V0LnBlbmRpbmdbdXBdLmluRmxpZ2h0ICYmICFkYXRhU2V0LnBlbmRpbmdbdXBdLmNyYXNoZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhU2V0LnBlbmRpbmdbdXBdOwogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRvTm90aWZ5KGRhdGFzZXRfaWQsIHJlYy51aWQsIG5vdGlmaWNhdGlvbiwgcmVjKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgYW55IG5ldyBwZW5kaW5nIHJlY29yZHMgbmVlZCB0byBiZSB1cGRhdGVkIHRvIHJlZmxlY3QgdGhlIGN1cnJlbnQgc3RhdGUgb2YgcGxheS4KICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlUGVuZGluZ0Zyb21OZXdEYXRhKGRhdGFzZXRfaWQsIGRhdGFTZXQsIHJlcyk7CgogICAgICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIGFueSBwcmV2aW91c2x5IGNyYXNoZWQgaW5mbGlnaHQgcmVjb3JkcyBjYW4gbm93IGJlIHJlc29sdmVkCiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZUNyYXNoZWRJbkZsaWdodEZyb21OZXdEYXRhKGRhdGFzZXRfaWQsIGRhdGFTZXQsIHJlcyk7CgogICAgICAgICAgICAgICAgLy9DaGVjayB0byBzZWUgaWYgYW55IGRlbGF5ZWQgcGVuZGluZyByZWNvcmRzIGNhbiBub3cgYmUgc2V0IHRvIHJlYWR5CiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZURlbGF5ZWRGcm9tTmV3RGF0YShkYXRhc2V0X2lkLCBkYXRhU2V0LCByZXMpOwoKICAgICAgICAgICAgICAgIC8vQ2hlY2sgbWV0YSBkYXRhIGFzIHdlbGwgdG8gbWFrZSBzdXJlIGl0IGNvbnRhaW5zIHRoZSBjb3JyZWN0IGluZm8KICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlTWV0YUZyb21OZXdEYXRhKGRhdGFzZXRfaWQsIGRhdGFTZXQsIHJlcyk7CgogICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBuZXcgZGF0YXNldCB3aXRoIGRldGFpbHMgb2YgYW55IGluZmxpZ2h0IHVwZGF0ZXMgd2hpY2ggd2UgaGF2ZSBub3QgcmVjZWl2ZWQgYSByZXNwb25zZSBvbgogICAgICAgICAgICAgICAgc2VsZi51cGRhdGVOZXdEYXRhRnJvbUluRmxpZ2h0KGRhdGFzZXRfaWQsIGRhdGFTZXQsIHJlcyk7CgogICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBuZXcgZGF0YXNldCB3aXRoIGRldGFpbHMgb2YgYW55IHBlbmRpbmcgdXBkYXRlcwogICAgICAgICAgICAgICAgc2VsZi51cGRhdGVOZXdEYXRhRnJvbVBlbmRpbmcoZGF0YXNldF9pZCwgZGF0YVNldCwgcmVzKTsKCgoKICAgICAgICAgICAgICAgIGlmIChyZXMucmVjb3JkcykgewogICAgICAgICAgICAgICAgICAvLyBGdWxsIERhdGFzZXQgcmV0dXJuZWQKICAgICAgICAgICAgICAgICAgZGF0YVNldC5kYXRhID0gcmVzLnJlY29yZHM7CiAgICAgICAgICAgICAgICAgIGRhdGFTZXQuaGFzaCA9IHJlcy5oYXNoOwoKICAgICAgICAgICAgICAgICAgc2VsZi5kb05vdGlmeShkYXRhc2V0X2lkLCByZXMuaGFzaCwgc2VsZi5ub3RpZmljYXRpb25zLkRFTFRBX1JFQ0VJVkVELCAnZnVsbCBkYXRhc2V0Jyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHJlcy51cGRhdGVzKSB7CiAgICAgICAgICAgICAgICAgIHZhciBhY2tub3dsZWRnZW1lbnRzID0gW107CiAgICAgICAgICAgICAgICAgIHByb2Nlc3NVcGRhdGVzKHJlcy51cGRhdGVzLmFwcGxpZWQsIHNlbGYubm90aWZpY2F0aW9ucy5SRU1PVEVfVVBEQVRFX0FQUExJRUQsIGFja25vd2xlZGdlbWVudHMpOwogICAgICAgICAgICAgICAgICBwcm9jZXNzVXBkYXRlcyhyZXMudXBkYXRlcy5mYWlsZWQsIHNlbGYubm90aWZpY2F0aW9ucy5SRU1PVEVfVVBEQVRFX0ZBSUxFRCwgYWNrbm93bGVkZ2VtZW50cyk7CiAgICAgICAgICAgICAgICAgIHByb2Nlc3NVcGRhdGVzKHJlcy51cGRhdGVzLmNvbGxpc2lvbnMsIHNlbGYubm90aWZpY2F0aW9ucy5DT0xMSVNJT05fREVURUNURUQsIGFja25vd2xlZGdlbWVudHMpOwogICAgICAgICAgICAgICAgICBkYXRhU2V0LmFja25vd2xlZGdlbWVudHMgPSBhY2tub3dsZWRnZW1lbnRzOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghcmVzLnJlY29yZHMgJiYgcmVzLmhhc2ggJiYgcmVzLmhhc2ggIT09IGRhdGFTZXQuaGFzaCkgewogICAgICAgICAgICAgICAgICBzZWxmLmNvbnNvbGVMb2coIkxvY2FsIGRhdGFzZXQgc3RhbGUgLSBzeW5jaW5nIHJlY29yZHMgOjogbG9jYWwgaGFzaD0gIiArIGRhdGFTZXQuaGFzaCArICIgLSByZW1vdGVIYXNoPSIgKyByZXMuaGFzaCk7CiAgICAgICAgICAgICAgICAgIC8vIERpZmZlcmVudCBoYXNoIHZhbHVlIHJldHVybmVkIC0gU3luYyBpbmRpdmlkdWFsIHJlY29yZHMKICAgICAgICAgICAgICAgICAgc2VsZi5zeW5jUmVjb3JkcyhkYXRhc2V0X2lkKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygiTG9jYWwgZGF0YXNldCB1cCB0byBkYXRlIik7CiAgICAgICAgICAgICAgICAgIHNlbGYuc3luY0NvbXBsZXRlKGRhdGFzZXRfaWQsICAib25saW5lIiwgc2VsZi5ub3RpZmljYXRpb25zLlNZTkNfQ09NUExFVEUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKG1zZywgZXJyKSB7CiAgICAgICAgICAgICAgICAvLyBUaGUgQUpBWCBjYWxsIGZhaWxlZCB0byBjb21wbGV0ZSBzdWNjZXNmdWxseSwgc28gdGhlIHN0YXRlIG9mIHRoZSBjdXJyZW50IHBlbmRpbmcgdXBkYXRlcyBpcyB1bmtub3duCiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZW0gYXMgImNyYXNoZWQiLiBUaGUgbmV4dCB0aW1lIGEgc3luY0xvb3AgY29tcGxldGV0cyBzdWNjZXNzZnVsbHksIHdlIHdpbGwgcmV2aWV3IHRoZSBjcmFzaGVkCiAgICAgICAgICAgICAgICAvLyByZWNvcmRzIHRvIHNlZSBpZiB3ZSBjYW4gZGV0ZXJtaW5lIHRoZWlyIGN1cnJlbnQgc3RhdGUuCiAgICAgICAgICAgICAgICBzZWxmLm1hcmtJbkZsaWdodEFzQ3Jhc2hlZChkYXRhU2V0KTsKICAgICAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygic3luY0xvb3AgZmFpbGVkIDogbXNnPSIgKyBtc2cgKyAiIDo6IGVyciA9ICIgKyBlcnIpOwogICAgICAgICAgICAgICAgc2VsZi5zeW5jQ29tcGxldGUoZGF0YXNldF9pZCwgbXNnLCBzZWxmLm5vdGlmaWNhdGlvbnMuU1lOQ19GQUlMRUQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCdFcnJvciBwZXJmb3JtaW5nIHN5bmMgLSAnICsgZSk7CiAgICAgICAgICAgICAgc2VsZi5zeW5jQ29tcGxldGUoZGF0YXNldF9pZCwgZSwgc2VsZi5ub3RpZmljYXRpb25zLlNZTkNfRkFJTEVEKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH0sCgogIHN5bmNSZWNvcmRzOiBmdW5jdGlvbihkYXRhc2V0X2lkKSB7CgogICAgc2VsZi5nZXREYXRhU2V0KGRhdGFzZXRfaWQsIGZ1bmN0aW9uKGRhdGFTZXQpIHsKCiAgICAgIHZhciBsb2NhbERhdGFTZXQgPSBkYXRhU2V0LmRhdGEgfHwge307CgogICAgICB2YXIgY2xpZW50UmVjcyA9IHt9OwogICAgICBmb3IgKHZhciBpIGluIGxvY2FsRGF0YVNldCkgewogICAgICAgIHZhciB1aWQgPSBpOwogICAgICAgIHZhciBoYXNoID0gbG9jYWxEYXRhU2V0W2ldLmhhc2g7CiAgICAgICAgY2xpZW50UmVjc1t1aWRdID0gaGFzaDsKICAgICAgfQoKICAgICAgdmFyIHN5bmNSZWNQYXJhbXMgPSB7fTsKCiAgICAgIHN5bmNSZWNQYXJhbXMuZm4gPSAnc3luY1JlY29yZHMnOwogICAgICBzeW5jUmVjUGFyYW1zLmRhdGFzZXRfaWQgPSBkYXRhc2V0X2lkOwogICAgICBzeW5jUmVjUGFyYW1zLnF1ZXJ5X3BhcmFtcyA9IGRhdGFTZXQucXVlcnlfcGFyYW1zOwogICAgICBzeW5jUmVjUGFyYW1zLmNsaWVudFJlY3MgPSBjbGllbnRSZWNzOwoKICAgICAgc2VsZi5jb25zb2xlTG9nKCJzeW5jUmVjUGFyYW1zIDo6ICIgKyBKU09OLnN0cmluZ2lmeShzeW5jUmVjUGFyYW1zKSk7CgogICAgICBzZWxmLmRvQ2xvdWRDYWxsKHsKICAgICAgICAnZGF0YXNldF9pZCc6IGRhdGFzZXRfaWQsCiAgICAgICAgJ3JlcSc6IHN5bmNSZWNQYXJhbXMKICAgICAgfSwgZnVuY3Rpb24ocmVzKSB7CiAgICAgICAgdmFyIGk7CgogICAgICAgIGlmIChyZXMuY3JlYXRlKSB7CiAgICAgICAgICBmb3IgKGkgaW4gcmVzLmNyZWF0ZSkgewogICAgICAgICAgICBsb2NhbERhdGFTZXRbaV0gPSB7Imhhc2giIDogcmVzLmNyZWF0ZVtpXS5oYXNoLCAiZGF0YSIgOiByZXMuY3JlYXRlW2ldLmRhdGF9OwogICAgICAgICAgICBzZWxmLmRvTm90aWZ5KGRhdGFzZXRfaWQsIGksIHNlbGYubm90aWZpY2F0aW9ucy5SRUNPUkRfREVMVEFfUkVDRUlWRUQsICJjcmVhdGUiKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKHJlcy51cGRhdGUpIHsKICAgICAgICAgIGZvciAoaSBpbiByZXMudXBkYXRlKSB7CiAgICAgICAgICAgIGxvY2FsRGF0YVNldFtpXS5oYXNoID0gcmVzLnVwZGF0ZVtpXS5oYXNoOwogICAgICAgICAgICBsb2NhbERhdGFTZXRbaV0uZGF0YSA9IHJlcy51cGRhdGVbaV0uZGF0YTsKICAgICAgICAgICAgc2VsZi5kb05vdGlmeShkYXRhc2V0X2lkLCBpLCBzZWxmLm5vdGlmaWNhdGlvbnMuUkVDT1JEX0RFTFRBX1JFQ0VJVkVELCAidXBkYXRlIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChyZXNbJ2RlbGV0ZSddKSB7CiAgICAgICAgICBmb3IgKGkgaW4gcmVzWydkZWxldGUnXSkgewogICAgICAgICAgICBkZWxldGUgbG9jYWxEYXRhU2V0W2ldOwogICAgICAgICAgICBzZWxmLmRvTm90aWZ5KGRhdGFzZXRfaWQsIGksIHNlbGYubm90aWZpY2F0aW9ucy5SRUNPUkRfREVMVEFfUkVDRUlWRUQsICJkZWxldGUiKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHNlbGYuZG9Ob3RpZnkoZGF0YXNldF9pZCwgcmVzLmhhc2gsIHNlbGYubm90aWZpY2F0aW9ucy5ERUxUQV9SRUNFSVZFRCwgJ3BhcnRpYWwgZGF0YXNldCcpOwoKICAgICAgICBkYXRhU2V0LmRhdGEgPSBsb2NhbERhdGFTZXQ7CiAgICAgICAgaWYocmVzLmhhc2gpIHsKICAgICAgICAgIGRhdGFTZXQuaGFzaCA9IHJlcy5oYXNoOwogICAgICAgIH0KICAgICAgICBzZWxmLnN5bmNDb21wbGV0ZShkYXRhc2V0X2lkLCAib25saW5lIiwgc2VsZi5ub3RpZmljYXRpb25zLlNZTkNfQ09NUExFVEUpOwogICAgICB9LCBmdW5jdGlvbihtc2csIGVycikgewogICAgICAgIHNlbGYuY29uc29sZUxvZygic3luY1JlY29yZHMgZmFpbGVkIDogbXNnPSIgKyBtc2cgKyAiIDo6IGVycj0iICsgZXJyKTsKICAgICAgICBzZWxmLnN5bmNDb21wbGV0ZShkYXRhc2V0X2lkLCBtc2csIHNlbGYubm90aWZpY2F0aW9ucy5TWU5DX0ZBSUxFRCk7CiAgICAgIH0pOwogICAgfSk7CiAgfSwKCiAgc3luY0NvbXBsZXRlOiBmdW5jdGlvbihkYXRhc2V0X2lkLCBzdGF0dXMsIG5vdGlmaWNhdGlvbikgewoKICAgIHNlbGYuZ2V0RGF0YVNldChkYXRhc2V0X2lkLCBmdW5jdGlvbihkYXRhc2V0KSB7CiAgICAgIGRhdGFzZXQuc3luY1J1bm5pbmcgPSBmYWxzZTsKICAgICAgZGF0YXNldC5zeW5jTG9vcEVuZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICBzZWxmLnNhdmVEYXRhU2V0KGRhdGFzZXRfaWQpOwogICAgICBzZWxmLmRvTm90aWZ5KGRhdGFzZXRfaWQsIGRhdGFzZXQuaGFzaCwgbm90aWZpY2F0aW9uLCBzdGF0dXMpOwogICAgfSk7CiAgfSwKCiAgY2hlY2tEYXRhc2V0czogZnVuY3Rpb24oKSB7CiAgICBmb3IoIHZhciBkYXRhc2V0X2lkIGluIHNlbGYuZGF0YXNldHMgKSB7CiAgICAgIGlmKCBzZWxmLmRhdGFzZXRzLmhhc093blByb3BlcnR5KGRhdGFzZXRfaWQpICkgewogICAgICAgIHZhciBkYXRhc2V0ID0gc2VsZi5kYXRhc2V0c1tkYXRhc2V0X2lkXTsKICAgICAgICBpZihkYXRhc2V0ICYmICFkYXRhc2V0LnN5bmNSdW5uaW5nICYmIChkYXRhc2V0LmNvbmZpZy5zeW5jX2FjdGl2ZSB8fCBkYXRhc2V0LnN5bmNGb3JjZWQpKSB7CiAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgaXQgaXMgdGltZSBmb3IgdGhlIHN5bmMgbG9vcCB0byBydW4gYWdhaW4KICAgICAgICAgIHZhciBsYXN0U3luY1N0YXJ0ID0gZGF0YXNldC5zeW5jTG9vcFN0YXJ0OwogICAgICAgICAgdmFyIGxhc3RTeW5jQ21wID0gZGF0YXNldC5zeW5jTG9vcEVuZDsKICAgICAgICAgIGlmKGRhdGFzZXQuc3luY0ZvcmNlZCl7CiAgICAgICAgICAgIGRhdGFzZXQuc3luY1BlbmRpbmcgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIGlmKCBsYXN0U3luY1N0YXJ0ID09IG51bGwgKSB7CiAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZyhkYXRhc2V0X2lkICsnIC0gUGVyZm9ybWluZyBpbml0aWFsIHN5bmMnKTsKICAgICAgICAgICAgLy8gRGF0YXNldCBoYXMgbmV2ZXIgYmVlbiBzeW5jZWQgYmVmb3JlIC0gZG8gaW5pdGlhbCBzeW5jCiAgICAgICAgICAgIGRhdGFzZXQuc3luY1BlbmRpbmcgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIGlmIChsYXN0U3luY0NtcCAhPSBudWxsKSB7CiAgICAgICAgICAgIHZhciB0aW1lU2luY2VMYXN0U3luYyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbGFzdFN5bmNDbXA7CiAgICAgICAgICAgIHZhciBzeW5jRnJlcXVlbmN5ID0gZGF0YXNldC5jb25maWcuc3luY19mcmVxdWVuY3kgKiAxMDAwOwogICAgICAgICAgICBpZiggdGltZVNpbmNlTGFzdFN5bmMgPiBzeW5jRnJlcXVlbmN5ICkgewogICAgICAgICAgICAgIC8vIFRpbWUgYmV0d2VlbiBzeW5jIGxvb3BzIGhhcyBwYXNzZWQgLSBkbyBhbm90aGVyIHN5bmMKICAgICAgICAgICAgICBkYXRhc2V0LnN5bmNQZW5kaW5nID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmKCBkYXRhc2V0LnN5bmNQZW5kaW5nICkgewogICAgICAgICAgICAvLyBSZXNldCBzeW5jRm9yY2VkIGluIGNhc2UgaXQgd2FzIHdoYXQgY2F1c2VkIHRoZSBzeW5jIGN5Y2xlIHRvIHJ1bi4KICAgICAgICAgICAgZGF0YXNldC5zeW5jRm9yY2VkID0gZmFsc2U7CgogICAgICAgICAgICAvLyBJZiB0aGUgZGF0YXNldCByZXF1cmVzIHN5bmNpbmcsIHJ1biB0aGUgc3luYyBsb29wLiBUaGlzIG1heSBiZSBiZWNhdXNlIHRoZSBzeW5jIGludGVydmFsIGhhcyBwYXNzZWQKICAgICAgICAgICAgLy8gb3IgYmVjYXVzZSB0aGUgc3luY19mcmVxdWVuY3kgaGFzIGJlZW4gY2hhbmdlZCBvciBiZWNhdXNlIGEgY2hhbmdlIHdhcyBtYWRlIHRvIHRoZSBkYXRhc2V0IGFuZCB0aGUKICAgICAgICAgICAgLy8gaW1tZWRpYXRlX3N5bmMgZmxhZyBzZXQgdG8gdHJ1ZQogICAgICAgICAgICBzZWxmLnN5bmNMb29wKGRhdGFzZXRfaWQpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCgogIGNoZWNrSGFzQ3VzdG9tU3luYyA6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIGNiKSB7CiAgICB2YXIgZGF0YXNldCA9IHNlbGYuZGF0YXNldHNbZGF0YXNldF9pZF07CiAgICBpZihkYXRhc2V0ICYmIGRhdGFzZXQuY29uZmlnKXsKICAgICAgc2VsZi5jb25zb2xlTG9nKCJkYXRhc2V0LmNvbmZpZy5oYXNfY3VzdG9tX3N5bmMgPSAiICsgZGF0YXNldC5jb25maWcuaGFzX2N1c3RvbV9zeW5jKTsKICAgICAgaWYoZGF0YXNldC5jb25maWcuaGFzX2N1c3RvbV9zeW5jICE9IG51bGwpIHsKICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgfQogICAgICBzZWxmLmNvbnNvbGVMb2coJ3N0YXJ0aW5nIGNoZWNrIGhhcyBjdXN0b20gc3luYycpOwoKICAgICAgYWN0QVBJKHsKICAgICAgICAnYWN0JyA6IGRhdGFzZXRfaWQsCiAgICAgICAgJ3JlcSc6IHsKICAgICAgICAgICdmbic6ICdzeW5jJwogICAgICAgIH0KICAgICAgfSwgZnVuY3Rpb24ocmVzKSB7CiAgICAgICAgLy9pZiB0aGUgY3VzdG9tIHN5bmMgaXMgZGVmaW5lZCBpbiB0aGUgY2xvdWQsIHRoaXMgY2FsbCBzaG91bGQgc3VjY2Vzcy4KICAgICAgICAvL2lmIGZhaWxlZCwgd2UgdGhpbmsgdGhpcyB0aGUgY3VzdG9tIHN5bmMgaXMgbm90IGRlZmluZWQKICAgICAgICBzZWxmLmNvbnNvbGVMb2coJ2NoZWNrIGhhc19jdXN0b21fc3luYyAtIHN1Y2Nlc3MgLSAnLCByZXMpOwogICAgICAgIGRhdGFzZXQuY29uZmlnLmhhc19jdXN0b21fc3luYyA9IHRydWU7CiAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgIH0sIGZ1bmN0aW9uKG1zZyxlcnIpIHsKICAgICAgICBzZWxmLmNvbnNvbGVMb2coJ2NoZWNrIGhhc19jdXN0b21fc3luYyAtIGZhaWx1cmUgLSAnLCBlcnIpOwogICAgICAgIGlmKGVyci5zdGF0dXMgJiYgZXJyLnN0YXR1cyA9PT0gNTAwKXsKICAgICAgICAgIC8vaWYgd2UgcmVjZWl2ZSA1MDAsIGl0IGNvdWxkIGJlIHRoYXQgdGhlcmUgaXMgYW4gZXJyb3Igb2NjdXJlZCBkdWUgdG8gbWlzc2luZyBwYXJhbWV0ZXJzIG9yIHNpbWlsYXIsCiAgICAgICAgICAvL2J1dCB0aGUgZW5kcG9pbnQgaXMgZGVmaW5lZC4KICAgICAgICAgIHNlbGYuY29uc29sZUxvZygnY2hlY2sgaGFzX2N1c3RvbV9zeW5jIC0gZmFpbGVkIHdpdGggNTAwLCBlbmRwb2ludCBkb2VzIGV4aXN0cycpOwogICAgICAgICAgZGF0YXNldC5jb25maWcuaGFzX2N1c3RvbV9zeW5jID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGF0YXNldC5jb25maWcuaGFzX2N1c3RvbV9zeW5jID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjYigpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBjYigpOwogICAgfQogIH0sCgogIGRvQ2xvdWRDYWxsOiBmdW5jdGlvbihwYXJhbXMsIHN1Y2Nlc3MsIGZhaWx1cmUpIHsKICAgIHZhciBoYXNDdXN0b21TeW5jID0gZmFsc2U7CiAgICB2YXIgZGF0YXNldCA9IHNlbGYuZGF0YXNldHNbcGFyYW1zLmRhdGFzZXRfaWRdOwogICAgaWYoZGF0YXNldCAmJiBkYXRhc2V0LmNvbmZpZyl7CiAgICAgIGhhc0N1c3RvbVN5bmMgPSBkYXRhc2V0LmNvbmZpZy5oYXNfY3VzdG9tX3N5bmM7CiAgICB9CiAgICBpZiggaGFzQ3VzdG9tU3luYyA9PSB0cnVlICkgewogICAgICBhY3RBUEkoewogICAgICAgICdhY3QnIDogcGFyYW1zLmRhdGFzZXRfaWQsCiAgICAgICAgJ3JlcScgOiBwYXJhbXMucmVxCiAgICAgIH0sIGZ1bmN0aW9uKHJlcykgewogICAgICAgIHN1Y2Nlc3MocmVzKTsKICAgICAgfSwgZnVuY3Rpb24obXNnLCBlcnIpIHsKICAgICAgICBmYWlsdXJlKG1zZywgZXJyKTsKICAgICAgfSk7ICAgICAgCiAgICB9IGVsc2UgewogICAgICBjbG91ZEFQSSh7CiAgICAgICAgJ3BhdGgnIDogJy9tYmFhcy9zeW5jLycgKyBwYXJhbXMuZGF0YXNldF9pZCwKICAgICAgICAnbWV0aG9kJyA6ICdwb3N0JywKICAgICAgICAnZGF0YScgOiBwYXJhbXMucmVxCiAgICAgIH0sIGZ1bmN0aW9uKHJlcykgewogICAgICAgIHN1Y2Nlc3MocmVzKTsKICAgICAgfSwgZnVuY3Rpb24obXNnLCBlcnIpIHsKICAgICAgICBmYWlsdXJlKG1zZywgZXJyKTsKICAgICAgfSk7CiAgICB9CiAgfSwKCiAgZGF0YXNldE1vbml0b3I6IGZ1bmN0aW9uKCkgewogICAgc2VsZi5jaGVja0RhdGFzZXRzKCk7CgogICAgLy8gUmUtZXhlY3V0ZSBkYXRhc2V0TW9uaXRvciBldmVyeSA1MDBtcyBzbyB3ZSBrZWVwIGludm9raW5nIGNoZWNrRGF0YXNldHMoKTsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgIHNlbGYuZGF0YXNldE1vbml0b3IoKTsKICAgIH0sIDUwMCk7CiAgfSwKCiAgZ2V0U3RvcmFnZUFkYXB0ZXI6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIGlzU2F2ZSwgY2IpewogICAgdmFyIG9uRmFpbCA9IGZ1bmN0aW9uKG1zZywgZXJyKXsKICAgICAgdmFyIGVyck1zZyA9IChpc1NhdmU/J3NhdmUgdG8nOiAnbG9hZCBmcm9tJyApICsgJyBsb2NhbCBzdG9yYWdlIGZhaWxlZCBtc2c6ICcgKyBtc2cgKyAnIGVycjogJyArIGVycjsKICAgICAgc2VsZi5kb05vdGlmeShkYXRhc2V0X2lkLCBudWxsLCBzZWxmLm5vdGlmaWNhdGlvbnMuQ0xJRU5UX1NUT1JBR0VfRkFJTEVELCBlcnJNc2cpOwogICAgICBzZWxmLmNvbnNvbGVMb2coZXJyTXNnKTsKICAgIH07CiAgICBMYXduY2hhaXIoe2ZhaWw6b25GYWlsLCBhZGFwdGVyOiBzZWxmLmNvbmZpZy5zdG9yYWdlX3N0cmF0ZWd5LCBzaXplOnNlbGYuY29uZmlnLmZpbGVfc3lzdGVtX3F1b3RhLCBiYWNrdXA6IHNlbGYuY29uZmlnLmljbG91ZF9iYWNrdXB9LCBmdW5jdGlvbigpewogICAgICByZXR1cm4gY2IobnVsbCwgdGhpcyk7CiAgICB9KTsKICB9LAoKICBzYXZlRGF0YVNldDogZnVuY3Rpb24gKGRhdGFzZXRfaWQsIGNiKSB7CiAgICBzZWxmLmdldERhdGFTZXQoZGF0YXNldF9pZCwgZnVuY3Rpb24oZGF0YXNldCkgewogICAgICBzZWxmLmdldFN0b3JhZ2VBZGFwdGVyKGRhdGFzZXRfaWQsIHRydWUsIGZ1bmN0aW9uKGVyciwgc3RvcmFnZSl7CiAgICAgICAgc3RvcmFnZS5zYXZlKHtrZXk6ImRhdGFzZXRfIiArIGRhdGFzZXRfaWQsIHZhbDpkYXRhc2V0fSwgZnVuY3Rpb24oKXsKICAgICAgICAgIC8vc2F2ZSBzdWNjZXNzCiAgICAgICAgICBpZihjYikgcmV0dXJuIGNiKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSk7CiAgfSwKCiAgbG9hZERhdGFTZXQ6IGZ1bmN0aW9uIChkYXRhc2V0X2lkLCBzdWNjZXNzLCBmYWlsdXJlKSB7CiAgICBzZWxmLmdldFN0b3JhZ2VBZGFwdGVyKGRhdGFzZXRfaWQsIGZhbHNlLCBmdW5jdGlvbihlcnIsIHN0b3JhZ2UpewogICAgICBzdG9yYWdlLmdldCggImRhdGFzZXRfIiArIGRhdGFzZXRfaWQsIGZ1bmN0aW9uIChkYXRhKXsKICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnZhbCkgewogICAgICAgICAgdmFyIGRhdGFzZXQgPSBkYXRhLnZhbDsKICAgICAgICAgIGlmKHR5cGVvZiBkYXRhc2V0ID09PSAic3RyaW5nIil7CiAgICAgICAgICAgIGRhdGFzZXQgPSBKU09OLnBhcnNlKGRhdGFzZXQpOwogICAgICAgICAgfQogICAgICAgICAgLy8gRGF0YXNldHMgc2hvdWxkIG5vdCBiZSBhdXRvIGluaXRpYWxpc2VkIHdoZW4gbG9hZGVkIC0gdGhlIG1hbmdlIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgZm9yIGVhY2ggZGF0YXNldAogICAgICAgICAgLy8gdGhlIHVzZXIgd2FudHMgc3luYwogICAgICAgICAgZGF0YXNldC5pbml0aWFsaXNlZCA9IGZhbHNlOwogICAgICAgICAgc2VsZi5kYXRhc2V0c1tkYXRhc2V0X2lkXSA9IGRhdGFzZXQ7IC8vIFRPRE86IGRvIHdlIG5lZWQgdG8gaGFuZGxlIGJpbmFyeSBkYXRhPwogICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCdsb2FkIGZyb20gbG9jYWwgc3RvcmFnZSBzdWNjZXNzIGZvciBkYXRhc2V0X2lkIDonICsgZGF0YXNldF9pZCk7CiAgICAgICAgICBpZihzdWNjZXNzKSByZXR1cm4gc3VjY2VzcyhkYXRhc2V0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gbm8gZGF0YSB5ZXQsIHByb2JhYmx5IGZpcnN0IHRpbWUuIGZhaWx1cmUgY2FsYmFjayBzaG91bGQgaGFuZGxlIHRoaXMKICAgICAgICAgIGlmKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH0sCgogIGNsZWFyQ2FjaGU6IGZ1bmN0aW9uKGRhdGFzZXRfaWQsIGNiKXsKICAgIGRlbGV0ZSBzZWxmLmRhdGFzZXRzW2RhdGFzZXRfaWRdOwogICAgc2VsZi5ub3RpZnlfY2FsbGJhY2tfbWFwW2RhdGFzZXRfaWRdID09PSBudWxsOwogICAgc2VsZi5nZXRTdG9yYWdlQWRhcHRlcihkYXRhc2V0X2lkLCB0cnVlLCBmdW5jdGlvbihlcnIsIHN0b3JhZ2UpewogICAgICBzdG9yYWdlLnJlbW92ZSgiZGF0YXNldF8iICsgZGF0YXNldF9pZCwgZnVuY3Rpb24oKXsKICAgICAgICBzZWxmLmNvbnNvbGVMb2coJ2xvY2FsIGNhY2hlIGlzIGNsZWFyZWQgZm9yIGRhdGFzZXQgOiAnICsgZGF0YXNldF9pZCk7CiAgICAgICAgaWYoY2IpewogICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH0sCgogIHVwZGF0ZURhdGFzZXRGcm9tTG9jYWw6IGZ1bmN0aW9uKGRhdGFzZXQsIHBlbmRpbmdSZWMpIHsKICAgIHZhciBwZW5kaW5nID0gZGF0YXNldC5wZW5kaW5nOwogICAgdmFyIHByZXZpb3VzUGVuZGluZ1VpZDsKICAgIHZhciBwcmV2aW91c1BlbmRpbmc7CgogICAgdmFyIHVpZCA9IHBlbmRpbmdSZWMudWlkOwogICAgc2VsZi5jb25zb2xlTG9nKCd1cGRhdGluZyBsb2NhbCBkYXRhc2V0IGZvciB1aWQgJyArIHVpZCArICcgLSBhY3Rpb24gPSAnICsgcGVuZGluZ1JlYy5hY3Rpb24pOwoKICAgIGRhdGFzZXQubWV0YVt1aWRdID0gZGF0YXNldC5tZXRhW3VpZF0gfHwge307CgogICAgLy8gQ3JlYXRpbmcgYSBuZXcgcmVjb3JkCiAgICBpZiggcGVuZGluZ1JlYy5hY3Rpb24gPT09ICJjcmVhdGUiICkgewogICAgICBpZiggZGF0YXNldC5kYXRhW3VpZF0gKSB7CiAgICAgICAgc2VsZi5jb25zb2xlTG9nKCdkYXRhc2V0IGFscmVhZHkgZXhpc3RzIGZvciB1aWQgaW4gY3JlYXRlIDo6ICcgKyBKU09OLnN0cmluZ2lmeShkYXRhc2V0LmRhdGFbdWlkXSkpOwoKICAgICAgICAvLyBXZSBhcmUgdHJ5aW5nIHRvIGRvIGEgY3JlYXRlIHVzaW5nIGEgdWlkIHdoaWNoIGFscmVhZHkgZXhpc3RzCiAgICAgICAgaWYgKGRhdGFzZXQubWV0YVt1aWRdLmZyb21QZW5kaW5nKSB7CiAgICAgICAgICAvLyBXZSBhcmUgdHJ5aW5nIHRvIGNyZWF0ZSBvbiB0b3Agb2YgYW4gZXhpc3RpbmcgcGVuZGluZyByZWNvcmQKICAgICAgICAgIC8vIFJlbW92ZSB0aGUgcHJldmlvdXMgcGVuZGluZyByZWNvcmQgYW5kIHVzZSB0aGlzIG9uZSBpbnN0ZWFkCiAgICAgICAgICBwcmV2aW91c1BlbmRpbmdVaWQgPSBkYXRhc2V0Lm1ldGFbdWlkXS5wZW5kaW5nVWlkOwogICAgICAgICAgZGVsZXRlIHBlbmRpbmdbcHJldmlvdXNQZW5kaW5nVWlkXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgZGF0YXNldC5kYXRhW3VpZF0gPSB7fTsKICAgIH0KCiAgICBpZiggcGVuZGluZ1JlYy5hY3Rpb24gPT09ICJ1cGRhdGUiICkgewogICAgICBpZiggZGF0YXNldC5kYXRhW3VpZF0gKSB7CiAgICAgICAgaWYgKGRhdGFzZXQubWV0YVt1aWRdLmZyb21QZW5kaW5nKSB7CiAgICAgICAgICBzZWxmLmNvbnNvbGVMb2coJ3VwZGF0aW5nIGFuIGV4aXN0aW5nIHBlbmRpbmcgcmVjb3JkIGZvciBkYXRhc2V0IDo6ICcgKyBKU09OLnN0cmluZ2lmeShkYXRhc2V0LmRhdGFbdWlkXSkpOwogICAgICAgICAgLy8gV2UgYXJlIHRyeWluZyB0byB1cGRhdGUgYW4gZXhpc3RpbmcgcGVuZGluZyByZWNvcmQKICAgICAgICAgIHByZXZpb3VzUGVuZGluZ1VpZCA9IGRhdGFzZXQubWV0YVt1aWRdLnBlbmRpbmdVaWQ7CiAgICAgICAgICBkYXRhc2V0Lm1ldGFbdWlkXS5wcmV2aW91c1BlbmRpbmdVaWQgPSBwcmV2aW91c1BlbmRpbmdVaWQ7CiAgICAgICAgICBwcmV2aW91c1BlbmRpbmcgPSBwZW5kaW5nW3ByZXZpb3VzUGVuZGluZ1VpZF07CiAgICAgICAgICBpZihwcmV2aW91c1BlbmRpbmcpIHsKICAgICAgICAgICAgaWYoIXByZXZpb3VzUGVuZGluZy5pbkZsaWdodCl7CiAgICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCdleGlzdGluZyBwcmUtZmxpZ2h0IHBlbmRpbmcgcmVjb3JkID0gJyArIEpTT04uc3RyaW5naWZ5KHByZXZpb3VzUGVuZGluZykpOwogICAgICAgICAgICAgIC8vIFdlIGFyZSB0cnlpbmcgdG8gcGVyZm9ybSBhbiB1cGRhdGUgb24gYW4gZXhpc3RpbmcgcGVuZGluZyByZWNvcmQKICAgICAgICAgICAgICAvLyBtb2RpZnkgdGhlIG9yaWdpbmFsIHJlY29yZCB0byBoYXZlIHRoZSBsYXRlc3QgdmFsdWUgYW5kIGRlbGV0ZSB0aGUgcGVuZGluZyB1cGRhdGUKICAgICAgICAgICAgICBwcmV2aW91c1BlbmRpbmcucG9zdCA9IHBlbmRpbmdSZWMucG9zdDsKICAgICAgICAgICAgICBwcmV2aW91c1BlbmRpbmcucG9zdEhhc2ggPSBwZW5kaW5nUmVjLnBvc3RIYXNoOwogICAgICAgICAgICAgIGRlbGV0ZSBwZW5kaW5nW3BlbmRpbmdSZWMuaGFzaF07CiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBwZW5kaW5nIHJlY29yZCB0byBoYXZlIHRoZSBoYXNoIG9mIHRoZSBwcmV2aW91cyByZWNvcmQgYXMgdGhpcyBpcyB3aGF0IGlzIG5vdyBiZWluZwogICAgICAgICAgICAgIC8vIG1haW50YWluZWQgaW4gdGhlIHBlbmRpbmcgYXJyYXkgJiBpcyB3aGF0IHdlIHdhbnQgaW4gdGhlIG1ldGEgcmVjb3JkCiAgICAgICAgICAgICAgcGVuZGluZ1JlYy5oYXNoID0gcHJldmlvdXNQZW5kaW5nVWlkOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vd2UgYXJlIHBlcmZvcm1pbmcgY2hhbmdlcyB0byBhIHBlbmRpbmcgcmVjb3JkIHdoaWNoIGlzIGluRmxpZ2h0LiBVbnRpbCB0aGUgc3RhdHVzIG9mIHRoaXMgcGVuZGluZyByZWNvcmQgaXMgcmVzb2x2ZWQsCiAgICAgICAgICAgICAgLy93ZSBzaG91bGQgbm90IHN1Ym1pdCB0aGlzIHBlbmRpbmcgcmVjb3JkIHRvIHRoZSBjbG91ZC4gTWFyayBpdCBhcyBkZWxheWVkLgogICAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygnZXhpc3RpbmcgaW4taW5mbGlnaHQgcGVuZGluZyByZWNvcmQgPSAnICsgSlNPTi5zdHJpbmdpZnkocHJldmlvdXNQZW5kaW5nKSk7CiAgICAgICAgICAgICAgcGVuZGluZ1JlYy5kZWxheWVkID0gdHJ1ZTsKICAgICAgICAgICAgICBwZW5kaW5nUmVjLndhaXRpbmcgPSBwcmV2aW91c1BlbmRpbmcuaGFzaDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGlmKCBwZW5kaW5nUmVjLmFjdGlvbiA9PT0gImRlbGV0ZSIgKSB7CiAgICAgIGlmKCBkYXRhc2V0LmRhdGFbdWlkXSApIHsKICAgICAgICBpZiAoZGF0YXNldC5tZXRhW3VpZF0uZnJvbVBlbmRpbmcpIHsKICAgICAgICAgIHNlbGYuY29uc29sZUxvZygnRGVsZXRpbmcgYW4gZXhpc3RpbmcgcGVuZGluZyByZWNvcmQgZm9yIGRhdGFzZXQgOjogJyArIEpTT04uc3RyaW5naWZ5KGRhdGFzZXQuZGF0YVt1aWRdKSk7CiAgICAgICAgICAvLyBXZSBhcmUgdHJ5aW5nIHRvIGRlbGV0ZSBhbiBleGlzdGluZyBwZW5kaW5nIHJlY29yZAogICAgICAgICAgcHJldmlvdXNQZW5kaW5nVWlkID0gZGF0YXNldC5tZXRhW3VpZF0ucGVuZGluZ1VpZDsKICAgICAgICAgIGRhdGFzZXQubWV0YVt1aWRdLnByZXZpb3VzUGVuZGluZ1VpZCA9IHByZXZpb3VzUGVuZGluZ1VpZDsKICAgICAgICAgIHByZXZpb3VzUGVuZGluZyA9IHBlbmRpbmdbcHJldmlvdXNQZW5kaW5nVWlkXTsKICAgICAgICAgIGlmKCBwcmV2aW91c1BlbmRpbmcgKSB7CiAgICAgICAgICAgIGlmKCFwcmV2aW91c1BlbmRpbmcuaW5GbGlnaHQpewogICAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygnZXhpc3RpbmcgcGVuZGluZyByZWNvcmQgPSAnICsgSlNPTi5zdHJpbmdpZnkocHJldmlvdXNQZW5kaW5nKSk7CiAgICAgICAgICAgICAgaWYoIHByZXZpb3VzUGVuZGluZy5hY3Rpb24gPT09ICJjcmVhdGUiICkgewogICAgICAgICAgICAgICAgLy8gV2UgYXJlIHRyeWluZyB0byBwZXJmb3JtIGEgZGVsZXRlIG9uIGFuIGV4aXN0aW5nIHBlbmRpbmcgY3JlYXRlCiAgICAgICAgICAgICAgICAvLyBUaGVzZSBjYW5jZWwgZWFjaCBvdGhlciBvdXQgc28gcmVtb3ZlIHRoZW0gYm90aAogICAgICAgICAgICAgICAgZGVsZXRlIHBlbmRpbmdbcGVuZGluZ1JlYy5oYXNoXTsKICAgICAgICAgICAgICAgIGRlbGV0ZSBwZW5kaW5nW3ByZXZpb3VzUGVuZGluZ1VpZF07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmKCBwcmV2aW91c1BlbmRpbmcuYWN0aW9uID09PSAidXBkYXRlIiApIHsKICAgICAgICAgICAgICAgIC8vIFdlIGFyZSB0cnlpbmcgdG8gcGVyZm9ybSBhIGRlbGV0ZSBvbiBhbiBleGlzdGluZyBwZW5kaW5nIHVwZGF0ZQogICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBwcmUgdmFsdWUgZnJvbSB0aGUgcGVuZGluZyB1cGRhdGUgZm9yIHRoZSBkZWxldGUgYW5kCiAgICAgICAgICAgICAgICAvLyBnZXQgcmlkIG9mIHRoZSBwZW5kaW5nIHVwZGF0ZQogICAgICAgICAgICAgICAgcGVuZGluZ1JlYy5wcmUgPSBwcmV2aW91c1BlbmRpbmcucHJlOwogICAgICAgICAgICAgICAgcGVuZGluZ1JlYy5wcmVIYXNoID0gcHJldmlvdXNQZW5kaW5nLnByZUhhc2g7CiAgICAgICAgICAgICAgICBwZW5kaW5nUmVjLmluRmxpZ2h0ID0gZmFsc2U7CiAgICAgICAgICAgICAgICBkZWxldGUgcGVuZGluZ1twcmV2aW91c1BlbmRpbmdVaWRdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzZWxmLmNvbnNvbGVMb2coJ2V4aXN0aW5nIGluLWluZmxpZ2h0IHBlbmRpbmcgcmVjb3JkID0gJyArIEpTT04uc3RyaW5naWZ5KHByZXZpb3VzUGVuZGluZykpOwogICAgICAgICAgICAgIHBlbmRpbmdSZWMuZGVsYXllZCA9IHRydWU7CiAgICAgICAgICAgICAgcGVuZGluZ1JlYy53YWl0aW5nID0gcHJldmlvdXNQZW5kaW5nLmhhc2g7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZGVsZXRlIGRhdGFzZXQuZGF0YVt1aWRdOwogICAgICB9CiAgICB9CgogICAgaWYoIGRhdGFzZXQuZGF0YVt1aWRdICkgewogICAgICBkYXRhc2V0LmRhdGFbdWlkXS5kYXRhID0gcGVuZGluZ1JlYy5wb3N0OwogICAgICBkYXRhc2V0LmRhdGFbdWlkXS5oYXNoID0gcGVuZGluZ1JlYy5wb3N0SGFzaDsKICAgICAgZGF0YXNldC5tZXRhW3VpZF0uZnJvbVBlbmRpbmcgPSB0cnVlOwogICAgICBkYXRhc2V0Lm1ldGFbdWlkXS5wZW5kaW5nVWlkID0gcGVuZGluZ1JlYy5oYXNoOwogICAgfQogIH0sCgogIHVwZGF0ZVBlbmRpbmdGcm9tTmV3RGF0YTogZnVuY3Rpb24oZGF0YXNldF9pZCwgZGF0YXNldCwgbmV3RGF0YSkgewogICAgdmFyIHBlbmRpbmcgPSBkYXRhc2V0LnBlbmRpbmc7CiAgICB2YXIgbmV3UmVjOwoKICAgIGlmKCBwZW5kaW5nICYmIG5ld0RhdGEucmVjb3JkcykgewogICAgICBmb3IoIHZhciBwZW5kaW5nSGFzaCBpbiBwZW5kaW5nICkgewogICAgICAgIGlmKCBwZW5kaW5nLmhhc093blByb3BlcnR5KHBlbmRpbmdIYXNoKSApIHsKICAgICAgICAgIHZhciBwZW5kaW5nUmVjID0gcGVuZGluZ1twZW5kaW5nSGFzaF07CgogICAgICAgICAgZGF0YXNldC5tZXRhW3BlbmRpbmdSZWMudWlkXSA9IGRhdGFzZXQubWV0YVtwZW5kaW5nUmVjLnVpZF0gfHwge307CgogICAgICAgICAgaWYoIHBlbmRpbmdSZWMuaW5GbGlnaHQgPT09IGZhbHNlICkgewogICAgICAgICAgICAvLyBQZW5kaW5nIHJlY29yZCB0aGF0IGhhcyBub3QgYmVlbiBzdWJtaXR0ZWQKICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCd1cGRhdGVQZW5kaW5nRnJvbU5ld0RhdGEgLSBGb3VuZCBOb24gaW5GbGlnaHQgcmVjb3JkIC0+IGFjdGlvbj0nICsgcGVuZGluZ1JlYy5hY3Rpb24gKycgOjogdWlkPScgKyBwZW5kaW5nUmVjLnVpZCAgKyAnIDo6IGhhc2g9JyArIHBlbmRpbmdSZWMuaGFzaCk7CiAgICAgICAgICAgIGlmKCBwZW5kaW5nUmVjLmFjdGlvbiA9PT0gInVwZGF0ZSIgfHwgcGVuZGluZ1JlYy5hY3Rpb24gPT09ICJkZWxldGUiKSB7CiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBwcmUgdmFsdWUgb2YgcGVuZGluZyByZWNvcmQgdG8gcmVmbGVjdCB0aGUgbGF0ZXN0IGRhdGEgcmV0dXJuZWQgZnJvbSBzeW5jLgogICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBwcmV2ZW50IGEgY29sbGlzaW9uIGJlaW5nIHJlcG9ydGVkIHdoZW4gdGhlIHBlbmRpbmcgcmVjb3JkIGlzIHNlbnQuCiAgICAgICAgICAgICAgbmV3UmVjID0gbmV3RGF0YS5yZWNvcmRzW3BlbmRpbmdSZWMudWlkXTsKICAgICAgICAgICAgICBpZiggbmV3UmVjICkgewogICAgICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCd1cGRhdGVQZW5kaW5nRnJvbU5ld0RhdGEgLSBVcGRhdGluZyBwcmUgdmFsdWVzIGZvciBleGlzdGluZyBwZW5kaW5nIHJlY29yZCAnICsgcGVuZGluZ1JlYy51aWQpOwogICAgICAgICAgICAgICAgcGVuZGluZ1JlYy5wcmUgPSBuZXdSZWMuZGF0YTsKICAgICAgICAgICAgICAgIHBlbmRpbmdSZWMucHJlSGFzaCA9IG5ld1JlYy5oYXNoOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIFRoZSB1cGRhdGUvZGVsZXRlIG1heSBiZSBmb3IgYSBuZXdseSBjcmVhdGVkIHJlY29yZCBpbiB3aGljaCBjYXNlIHRoZSB1aWQgd2lsbCBoYXZlIGNoYW5nZWQuCiAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNQZW5kaW5nVWlkID0gZGF0YXNldC5tZXRhW3BlbmRpbmdSZWMudWlkXS5wcmV2aW91c1BlbmRpbmdVaWQ7CiAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNQZW5kaW5nID0gcGVuZGluZ1twcmV2aW91c1BlbmRpbmdVaWRdOwogICAgICAgICAgICAgICAgaWYoIHByZXZpb3VzUGVuZGluZyApIHsKICAgICAgICAgICAgICAgICAgaWYoIG5ld0RhdGEgJiYgbmV3RGF0YS51cGRhdGVzICYmICBuZXdEYXRhLnVwZGF0ZXMuYXBwbGllZCAmJiBuZXdEYXRhLnVwZGF0ZXMuYXBwbGllZFtwcmV2aW91c1BlbmRpbmcuaGFzaF0gKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgYW4gdXBkYXRlIGluIGZyb20gYSBwcmV2aW91cyBwZW5kaW5nIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIHZhciBuZXdVaWQgPSBuZXdEYXRhLnVwZGF0ZXMuYXBwbGllZFtwcmV2aW91c1BlbmRpbmcuaGFzaF0udWlkOwogICAgICAgICAgICAgICAgICAgIG5ld1JlYyA9IG5ld0RhdGEucmVjb3Jkc1tuZXdVaWRdOwogICAgICAgICAgICAgICAgICAgIGlmKCBuZXdSZWMgKSB7CiAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbnNvbGVMb2coJ3VwZGF0ZVBlbmRpbmdGcm9tTmV3RGF0YSAtIFVwZGF0aW5nIHByZSB2YWx1ZXMgZm9yIGV4aXN0aW5nIHBlbmRpbmcgcmVjb3JkIHdoaWNoIHdhcyBwcmV2aW91c2x5IGEgY3JlYXRlICcgKyBwZW5kaW5nUmVjLnVpZCArICcgPT0+ICcgKyBuZXdVaWQpOwogICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlYy5wcmUgPSBuZXdSZWMuZGF0YTsKICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdSZWMucHJlSGFzaCA9IG5ld1JlYy5oYXNoOwogICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlYy51aWQgPSBuZXdVaWQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiggcGVuZGluZ1JlYy5hY3Rpb24gPT09ICJjcmVhdGUiICkgewogICAgICAgICAgICAgIGlmKCBuZXdEYXRhICYmIG5ld0RhdGEudXBkYXRlcyAmJiAgbmV3RGF0YS51cGRhdGVzLmFwcGxpZWQgJiYgbmV3RGF0YS51cGRhdGVzLmFwcGxpZWRbcGVuZGluZ0hhc2hdICkgewogICAgICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCd1cGRhdGVQZW5kaW5nRnJvbU5ld0RhdGEgLSBGb3VuZCBhbiB1cGRhdGUgZm9yIGEgcGVuZGluZyBjcmVhdGUgJyArIEpTT04uc3RyaW5naWZ5KG5ld0RhdGEudXBkYXRlcy5hcHBsaWVkW3BlbmRpbmdIYXNoXSkpOwogICAgICAgICAgICAgICAgbmV3UmVjID0gbmV3RGF0YS5yZWNvcmRzW25ld0RhdGEudXBkYXRlcy5hcHBsaWVkW3BlbmRpbmdIYXNoXS51aWRdOwogICAgICAgICAgICAgICAgaWYoIG5ld1JlYyApIHsKICAgICAgICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCd1cGRhdGVQZW5kaW5nRnJvbU5ld0RhdGEgLSBDaGFuZ2luZyBwZW5kaW5nIGNyZWF0ZSB0byBhbiB1cGRhdGUgYmFzZWQgb24gbmV3IHJlY29yZCAgJyArIEpTT04uc3RyaW5naWZ5KG5ld1JlYykpOwoKICAgICAgICAgICAgICAgICAgLy8gU2V0IHVwIHRoZSBwZW5kaW5nIGNyZWF0ZSBhcyBhbiB1cGRhdGUKICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlYy5hY3Rpb24gPSAidXBkYXRlIjsKICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlYy5wcmUgPSBuZXdSZWMuZGF0YTsKICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlYy5wcmVIYXNoID0gbmV3UmVjLmhhc2g7CiAgICAgICAgICAgICAgICAgIHBlbmRpbmdSZWMudWlkID0gbmV3RGF0YS51cGRhdGVzLmFwcGxpZWRbcGVuZGluZ0hhc2hdLnVpZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAoKICB1cGRhdGVOZXdEYXRhRnJvbUluRmxpZ2h0OiBmdW5jdGlvbihkYXRhc2V0X2lkLCBkYXRhc2V0LCBuZXdEYXRhKSB7CiAgICB2YXIgcGVuZGluZyA9IGRhdGFzZXQucGVuZGluZzsKCiAgICBpZiggcGVuZGluZyAmJiBuZXdEYXRhLnJlY29yZHMpIHsKICAgICAgZm9yKCB2YXIgcGVuZGluZ0hhc2ggaW4gcGVuZGluZyApIHsKICAgICAgICBpZiggcGVuZGluZy5oYXNPd25Qcm9wZXJ0eShwZW5kaW5nSGFzaCkgKSB7CiAgICAgICAgICB2YXIgcGVuZGluZ1JlYyA9IHBlbmRpbmdbcGVuZGluZ0hhc2hdOwoKICAgICAgICAgIGlmKCBwZW5kaW5nUmVjLmluRmxpZ2h0ICkgewogICAgICAgICAgICB2YXIgdXBkYXRlUmVjZWl2ZWRGb3JQZW5kaW5nID0gKG5ld0RhdGEgJiYgbmV3RGF0YS51cGRhdGVzICYmICBuZXdEYXRhLnVwZGF0ZXMuaGFzaGVzICYmIG5ld0RhdGEudXBkYXRlcy5oYXNoZXNbcGVuZGluZ0hhc2hdKSA/IHRydWUgOiBmYWxzZTsKCiAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygndXBkYXRlTmV3RGF0YUZyb21JbkZsaWdodCAtIEZvdW5kIGluZmxpZ2h0IHBlbmRpbmcgUmVjb3JkIC0gYWN0aW9uID0gJyArIHBlbmRpbmdSZWMuYWN0aW9uICsgJyA6OiBoYXNoID0gJyArIHBlbmRpbmdIYXNoICsgJyA6OiB1cGRhdGVSZWNlaXZlZEZvclBlbmRpbmc9JyArIHVwZGF0ZVJlY2VpdmVkRm9yUGVuZGluZyk7CgogICAgICAgICAgICBpZiggISB1cGRhdGVSZWNlaXZlZEZvclBlbmRpbmcgKSB7CiAgICAgICAgICAgICAgdmFyIG5ld1JlYyA9IG5ld0RhdGEucmVjb3Jkc1twZW5kaW5nUmVjLnVpZF07CgogICAgICAgICAgICAgIGlmKCBwZW5kaW5nUmVjLmFjdGlvbiA9PT0gInVwZGF0ZSIgJiYgbmV3UmVjKSB7CiAgICAgICAgICAgICAgICAvLyBNb2RpZnkgdGhlIG5ldyBSZWNvcmQgdG8gaGF2ZSB0aGUgdXBkYXRlcyBmcm9tIHRoZSBwZW5kaW5nIHJlY29yZCBzbyB0aGUgbG9jYWwgZGF0YXNldCBpcyBjb25zaXN0ZW50CiAgICAgICAgICAgICAgICBuZXdSZWMuZGF0YSA9IHBlbmRpbmdSZWMucG9zdDsKICAgICAgICAgICAgICAgIG5ld1JlYy5oYXNoID0gcGVuZGluZ1JlYy5wb3N0SGFzaDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSBpZiggcGVuZGluZ1JlYy5hY3Rpb24gPT09ICJkZWxldGUiICYmIG5ld1JlYykgewogICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSByZWNvcmQgZnJvbSB0aGUgbmV3IGRhdGFzZXQgc28gdGhlIGxvY2FsIGRhdGFzZXQgaXMgY29uc2lzdGVudAogICAgICAgICAgICAgICAgZGVsZXRlIG5ld0RhdGEucmVjb3Jkc1twZW5kaW5nUmVjLnVpZF07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGVsc2UgaWYoIHBlbmRpbmdSZWMuYWN0aW9uID09PSAiY3JlYXRlIiApIHsKICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgcGVuZGluZyBjcmVhdGUgaW50byB0aGUgbmV3IGRhdGFzZXQgc28gaXQgaXMgbm90IGxvc3QgZnJvbSB0aGUgVUkKICAgICAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygndXBkYXRlTmV3RGF0YUZyb21JbkZsaWdodCAtIHJlIGFkZGluZyBwZW5kaW5nIGNyZWF0ZSB0byBpbmNvbW1pbmcgZGF0YXNldCcpOwogICAgICAgICAgICAgICAgdmFyIG5ld1BlbmRpbmdDcmVhdGUgPSB7CiAgICAgICAgICAgICAgICAgIGRhdGE6IHBlbmRpbmdSZWMucG9zdCwKICAgICAgICAgICAgICAgICAgaGFzaDogcGVuZGluZ1JlYy5wb3N0SGFzaAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIG5ld0RhdGEucmVjb3Jkc1twZW5kaW5nUmVjLnVpZF0gPSBuZXdQZW5kaW5nQ3JlYXRlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCgogIHVwZGF0ZU5ld0RhdGFGcm9tUGVuZGluZzogZnVuY3Rpb24oZGF0YXNldF9pZCwgZGF0YXNldCwgbmV3RGF0YSkgewogICAgdmFyIHBlbmRpbmcgPSBkYXRhc2V0LnBlbmRpbmc7CgogICAgaWYoIHBlbmRpbmcgJiYgbmV3RGF0YS5yZWNvcmRzKSB7CiAgICAgIGZvciggdmFyIHBlbmRpbmdIYXNoIGluIHBlbmRpbmcgKSB7CiAgICAgICAgaWYoIHBlbmRpbmcuaGFzT3duUHJvcGVydHkocGVuZGluZ0hhc2gpICkgewogICAgICAgICAgdmFyIHBlbmRpbmdSZWMgPSBwZW5kaW5nW3BlbmRpbmdIYXNoXTsKCiAgICAgICAgICBpZiggcGVuZGluZ1JlYy5pbkZsaWdodCA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygndXBkYXRlTmV3RGF0YUZyb21QZW5kaW5nIC0gRm91bmQgTm9uIGluRmxpZ2h0IHJlY29yZCAtPiBhY3Rpb249JyArIHBlbmRpbmdSZWMuYWN0aW9uICsnIDo6IHVpZD0nICsgcGVuZGluZ1JlYy51aWQgICsgJyA6OiBoYXNoPScgKyBwZW5kaW5nUmVjLmhhc2gpOwogICAgICAgICAgICB2YXIgbmV3UmVjID0gbmV3RGF0YS5yZWNvcmRzW3BlbmRpbmdSZWMudWlkXTsKICAgICAgICAgICAgaWYoIHBlbmRpbmdSZWMuYWN0aW9uID09PSAidXBkYXRlIiAmJiBuZXdSZWMpIHsKICAgICAgICAgICAgICAvLyBNb2RpZnkgdGhlIG5ldyBSZWNvcmQgdG8gaGF2ZSB0aGUgdXBkYXRlcyBmcm9tIHRoZSBwZW5kaW5nIHJlY29yZCBzbyB0aGUgbG9jYWwgZGF0YXNldCBpcyBjb25zaXN0ZW50CiAgICAgICAgICAgICAgbmV3UmVjLmRhdGEgPSBwZW5kaW5nUmVjLnBvc3Q7CiAgICAgICAgICAgICAgbmV3UmVjLmhhc2ggPSBwZW5kaW5nUmVjLnBvc3RIYXNoOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYoIHBlbmRpbmdSZWMuYWN0aW9uID09PSAiZGVsZXRlIiAmJiBuZXdSZWMpIHsKICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHJlY29yZCBmcm9tIHRoZSBuZXcgZGF0YXNldCBzbyB0aGUgbG9jYWwgZGF0YXNldCBpcyBjb25zaXN0ZW50CiAgICAgICAgICAgICAgZGVsZXRlIG5ld0RhdGEucmVjb3Jkc1twZW5kaW5nUmVjLnVpZF07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiggcGVuZGluZ1JlYy5hY3Rpb24gPT09ICJjcmVhdGUiICkgewogICAgICAgICAgICAgIC8vIEFkZCB0aGUgcGVuZGluZyBjcmVhdGUgaW50byB0aGUgbmV3IGRhdGFzZXQgc28gaXQgaXMgbm90IGxvc3QgZnJvbSB0aGUgVUkKICAgICAgICAgICAgICBzZWxmLmNvbnNvbGVMb2coJ3VwZGF0ZU5ld0RhdGFGcm9tUGVuZGluZyAtIHJlIGFkZGluZyBwZW5kaW5nIGNyZWF0ZSB0byBpbmNvbW1pbmcgZGF0YXNldCcpOwogICAgICAgICAgICAgIHZhciBuZXdQZW5kaW5nQ3JlYXRlID0gewogICAgICAgICAgICAgICAgZGF0YTogcGVuZGluZ1JlYy5wb3N0LAogICAgICAgICAgICAgICAgaGFzaDogcGVuZGluZ1JlYy5wb3N0SGFzaAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgbmV3RGF0YS5yZWNvcmRzW3BlbmRpbmdSZWMudWlkXSA9IG5ld1BlbmRpbmdDcmVhdGU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAoKICB1cGRhdGVDcmFzaGVkSW5GbGlnaHRGcm9tTmV3RGF0YTogZnVuY3Rpb24oZGF0YXNldF9pZCwgZGF0YXNldCwgbmV3RGF0YSkgewogICAgdmFyIHVwZGF0ZU5vdGlmaWNhdGlvbnMgPSB7CiAgICAgIGFwcGxpZWQ6IHNlbGYubm90aWZpY2F0aW9ucy5SRU1PVEVfVVBEQVRFX0FQUExJRUQsCiAgICAgIGZhaWxlZDogc2VsZi5ub3RpZmljYXRpb25zLlJFTU9URV9VUERBVEVfRkFJTEVELAogICAgICBjb2xsaXNpb25zOiBzZWxmLm5vdGlmaWNhdGlvbnMuQ09MTElTSU9OX0RFVEVDVEVECiAgICB9OwoKICAgIHZhciBwZW5kaW5nID0gZGF0YXNldC5wZW5kaW5nOwogICAgdmFyIHJlc29sdmVkQ3Jhc2hlcyA9IHt9OwogICAgdmFyIHBlbmRpbmdIYXNoOwogICAgdmFyIHBlbmRpbmdSZWM7CgoKICAgIGlmKCBwZW5kaW5nICkgewogICAgICBmb3IoIHBlbmRpbmdIYXNoIGluIHBlbmRpbmcgKSB7CiAgICAgICAgaWYoIHBlbmRpbmcuaGFzT3duUHJvcGVydHkocGVuZGluZ0hhc2gpICkgewogICAgICAgICAgcGVuZGluZ1JlYyA9IHBlbmRpbmdbcGVuZGluZ0hhc2hdOwoKICAgICAgICAgIGlmKCBwZW5kaW5nUmVjLmluRmxpZ2h0ICYmIHBlbmRpbmdSZWMuY3Jhc2hlZCkgewogICAgICAgICAgICBzZWxmLmNvbnNvbGVMb2coJ3VwZGF0ZUNyYXNoZWRJbkZsaWdodEZyb21OZXdEYXRhIC0gRm91bmQgY3Jhc2hlZCBpbkZsaWdodCBwZW5kaW5nIHJlY29yZCB1aWQ9JyArIHBlbmRpbmdSZWMudWlkICsgJyA6OiBoYXNoPScgKyBwZW5kaW5nUmVjLmhhc2ggKTsKICAgICAgICAgICAgaWYoIG5ld0RhdGEgJiYgbmV3RGF0YS51cGRhdGVzICYmIG5ld0RhdGEudXBkYXRlcy5oYXNoZXMpIHsKCiAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHVwZGF0ZXMgcmVjZWl2ZWQgY29udGFpbiBhbnkgaW5mbyBhYm91dCB0aGUgY3Jhc2hlZCBpbiBmbGlnaHQgdXBkYXRlCiAgICAgICAgICAgICAgdmFyIGNyYXNoZWRVcGRhdGUgPSBuZXdEYXRhLnVwZGF0ZXMuaGFzaGVzW3BlbmRpbmdIYXNoXTsKICAgICAgICAgICAgICBpZiggY3Jhc2hlZFVwZGF0ZSApIHsKICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgZm91bmQgYW4gdXBkYXRlIG9uIG9uZSBvZiBvdXIgaW4gZmxpZ2h0IGNyYXNoZWQgcmVjb3JkcwoKICAgICAgICAgICAgICAgIHJlc29sdmVkQ3Jhc2hlc1tjcmFzaGVkVXBkYXRlLnVpZF0gPSBjcmFzaGVkVXBkYXRlOwoKICAgICAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygndXBkYXRlQ3Jhc2hlZEluRmxpZ2h0RnJvbU5ld0RhdGEgLSBSZXNvbHZpbmcgc3RhdHVzIGZvciBjcmFzaGVkIGluZmxpZ2h0IHBlbmRpbmcgcmVjb3JkICcgKyBKU09OLnN0cmluZ2lmeShjcmFzaGVkVXBkYXRlKSk7CgogICAgICAgICAgICAgICAgaWYoIGNyYXNoZWRVcGRhdGUudHlwZSA9PT0gJ2ZhaWxlZCcgKSB7CiAgICAgICAgICAgICAgICAgIC8vIENyYXNoZWQgdXBkYXRlIGZhaWxlZCAtIHJldmVydCBsb2NhbCBkYXRhc2V0CiAgICAgICAgICAgICAgICAgIGlmKCBjcmFzaGVkVXBkYXRlLmFjdGlvbiA9PT0gJ2NyZWF0ZScgKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCd1cGRhdGVDcmFzaGVkSW5GbGlnaHRGcm9tTmV3RGF0YSAtIERlbGV0aW5nIGZhaWxlZCBjcmVhdGUgZnJvbSBkYXRhc2V0Jyk7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGRhdGFzZXQuZGF0YVtjcmFzaGVkVXBkYXRlLnVpZF07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIGNyYXNoZWRVcGRhdGUuYWN0aW9uID09PSAndXBkYXRlJyB8fCBjcmFzaGVkVXBkYXRlLmFjdGlvbiA9PT0gJ2RlbGV0ZScgKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCd1cGRhdGVDcmFzaGVkSW5GbGlnaHRGcm9tTmV3RGF0YSAtIFJldmVydGluZyBmYWlsZWQgJyArIGNyYXNoZWRVcGRhdGUuYWN0aW9uICsgJyBpbiBkYXRhc2V0Jyk7CiAgICAgICAgICAgICAgICAgICAgZGF0YXNldC5kYXRhW2NyYXNoZWRVcGRhdGUudWlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAgIGRhdGEgOiBwZW5kaW5nUmVjLnByZSwKICAgICAgICAgICAgICAgICAgICAgIGhhc2ggOiBwZW5kaW5nUmVjLnByZUhhc2gKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZGVsZXRlIHBlbmRpbmdbcGVuZGluZ0hhc2hdOwogICAgICAgICAgICAgICAgc2VsZi5kb05vdGlmeShkYXRhc2V0X2lkLCBjcmFzaGVkVXBkYXRlLnVpZCwgdXBkYXRlTm90aWZpY2F0aW9uc1tjcmFzaGVkVXBkYXRlLnR5cGVdLCBjcmFzaGVkVXBkYXRlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBObyB3b3JkIG9uIG91ciBjcmFzaGVkIHVwZGF0ZSAtIGluY3JlbWVudCBhIGNvdW50ZXIgdG8gcmVmbGVjdCBhbm90aGVyIHN5bmMgdGhhdCBkaWQgbm90IGdpdmUgdXMKICAgICAgICAgICAgICAgIC8vIGFueSB1cGRhdGUgb24gb3VyIGNyYXNoZWQgcmVjb3JkLgogICAgICAgICAgICAgICAgaWYoIHBlbmRpbmdSZWMuY3Jhc2hlZENvdW50ICkgewogICAgICAgICAgICAgICAgICBwZW5kaW5nUmVjLmNyYXNoZWRDb3VudCsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgIHBlbmRpbmdSZWMuY3Jhc2hlZENvdW50ID0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgLy8gTm8gd29yZCBvbiBvdXIgY3Jhc2hlZCB1cGRhdGUgLSBpbmNyZW1lbnQgYSBjb3VudGVyIHRvIHJlZmxlY3QgYW5vdGhlciBzeW5jIHRoYXQgZGlkIG5vdCBnaXZlIHVzCiAgICAgICAgICAgICAgLy8gYW55IHVwZGF0ZSBvbiBvdXIgY3Jhc2hlZCByZWNvcmQuCiAgICAgICAgICAgICAgaWYoIHBlbmRpbmdSZWMuY3Jhc2hlZENvdW50ICkgewogICAgICAgICAgICAgICAgcGVuZGluZ1JlYy5jcmFzaGVkQ291bnQrKzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBwZW5kaW5nUmVjLmNyYXNoZWRDb3VudCA9IDE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBmb3IoIHBlbmRpbmdIYXNoIGluIHBlbmRpbmcgKSB7CiAgICAgICAgaWYoIHBlbmRpbmcuaGFzT3duUHJvcGVydHkocGVuZGluZ0hhc2gpICkgewogICAgICAgICAgcGVuZGluZ1JlYyA9IHBlbmRpbmdbcGVuZGluZ0hhc2hdOwoKICAgICAgICAgIGlmKCBwZW5kaW5nUmVjLmluRmxpZ2h0ICYmIHBlbmRpbmdSZWMuY3Jhc2hlZCkgewogICAgICAgICAgICBpZiggcGVuZGluZ1JlYy5jcmFzaGVkQ291bnQgPiBkYXRhc2V0LmNvbmZpZy5jcmFzaGVkX2NvdW50X3dhaXQgKSB7CiAgICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCd1cGRhdGVDcmFzaGVkSW5GbGlnaHRGcm9tTmV3RGF0YSAtIENyYXNoZWQgaW5mbGlnaHQgcGVuZGluZyByZWNvcmQgaGFzIHJlYWNoZWQgY3Jhc2hlZF9jb3VudF93YWl0IGxpbWl0IDogJyArIEpTT04uc3RyaW5naWZ5KHBlbmRpbmdSZWMpKTsKICAgICAgICAgICAgICBpZiggZGF0YXNldC5jb25maWcucmVzZW5kX2NyYXNoZWRfdXBkYXRlcyApIHsKICAgICAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygndXBkYXRlQ3Jhc2hlZEluRmxpZ2h0RnJvbU5ld0RhdGEgLSBSZXRyeWlnIGNyYXNoZWQgaW5mbGlnaHQgcGVuZGluZyByZWNvcmQnKTsKICAgICAgICAgICAgICAgIHBlbmRpbmdSZWMuY3Jhc2hlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgcGVuZGluZ1JlYy5pbkZsaWdodCA9IGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygndXBkYXRlQ3Jhc2hlZEluRmxpZ2h0RnJvbU5ld0RhdGEgLSBEZWxldGluZyBjcmFzaGVkIGluZmxpZ2h0IHBlbmRpbmcgcmVjb3JkJyk7CiAgICAgICAgICAgICAgICBkZWxldGUgcGVuZGluZ1twZW5kaW5nSGFzaF07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKCiAgdXBkYXRlRGVsYXllZEZyb21OZXdEYXRhOiBmdW5jdGlvbihkYXRhc2V0X2lkLCBkYXRhc2V0LCBuZXdEYXRhKXsKICAgIHZhciBwZW5kaW5nID0gZGF0YXNldC5wZW5kaW5nOwogICAgdmFyIHBlbmRpbmdIYXNoOwogICAgdmFyIHBlbmRpbmdSZWM7CiAgICBpZihwZW5kaW5nKXsKICAgICAgZm9yKCBwZW5kaW5nSGFzaCBpbiBwZW5kaW5nICl7CiAgICAgICAgaWYoIHBlbmRpbmcuaGFzT3duUHJvcGVydHkocGVuZGluZ0hhc2gpICl7CiAgICAgICAgICBwZW5kaW5nUmVjID0gcGVuZGluZ1twZW5kaW5nSGFzaF07CiAgICAgICAgICBpZiggcGVuZGluZ1JlYy5kZWxheWVkICYmIHBlbmRpbmdSZWMud2FpdGluZyApewogICAgICAgICAgICBzZWxmLmNvbnNvbGVMb2coJ3VwZGF0ZURlbGF5ZWRGcm9tTmV3RGF0YSAtIEZvdW5kIGRlbGF5ZWQgcGVuZGluZyByZWNvcmQgdWlkPScgKyBwZW5kaW5nUmVjLnVpZCArICcgOjogaGFzaD0nICsgcGVuZGluZ1JlYy5oYXNoICsgJyA6OiB3YWl0aW5nPScgKyBwZW5kaW5nUmVjLndhaXRpbmcpOwogICAgICAgICAgICBpZiggbmV3RGF0YSAmJiBuZXdEYXRhLnVwZGF0ZXMgJiYgbmV3RGF0YS51cGRhdGVzLmhhc2hlcyApewogICAgICAgICAgICAgIHZhciB3YWl0aW5nUmVjID0gbmV3RGF0YS51cGRhdGVzLmhhc2hlc1twZW5kaW5nUmVjLndhaXRpbmddOwogICAgICAgICAgICAgIGlmKHdhaXRpbmdSZWMpewogICAgICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCd1cGRhdGVEZWxheWVkRnJvbU5ld0RhdGEgLSBXYWl0aW5nIHBlbmRpbmcgcmVjb3JkIGlzIHJlc29sdmVkIHJlYz0nICsgSlNPTi5zdHJpbmdpZnkod2FpdGluZ1JlYykpOwogICAgICAgICAgICAgICAgcGVuZGluZ1JlYy5kZWxheWVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICBwZW5kaW5nUmVjLndhaXRpbmcgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKCiAgdXBkYXRlTWV0YUZyb21OZXdEYXRhOiBmdW5jdGlvbihkYXRhc2V0X2lkLCBkYXRhc2V0LCBuZXdEYXRhKXsKICAgIHZhciBtZXRhID0gZGF0YXNldC5tZXRhOwogICAgaWYobWV0YSAmJiBuZXdEYXRhICYmIG5ld0RhdGEudXBkYXRlcyAmJiBuZXdEYXRhLnVwZGF0ZXMuaGFzaGVzKXsKICAgICAgZm9yKHZhciB1aWQgaW4gbWV0YSl7CiAgICAgICAgaWYobWV0YS5oYXNPd25Qcm9wZXJ0eSh1aWQpKXsKICAgICAgICAgIHZhciBtZXRhZGF0YSA9IG1ldGFbdWlkXTsKICAgICAgICAgIHZhciBwZW5kaW5nSGFzaCA9IG1ldGFkYXRhLnBlbmRpbmdVaWQ7CiAgICAgICAgICB2YXIgcHJldmlvdXNQZW5kaW5nSGFzaCA9IG1ldGFkYXRhLnByZXZpb3VzUGVuZGluZ1VpZDsKICAgICAgICAgIHNlbGYuY29uc29sZUxvZygidXBkYXRlTWV0YUZyb21OZXdEYXRhIC0gRm91bmQgbWV0YWRhdGEgd2l0aCB1aWQgPSAiICsgdWlkICsgIiA6OiBwZW5kaW5nSGFzaCA9ICIgKyBwZW5kaW5nSGFzaCArICIgOjogcHJldmlvdXNQZW5kaW5nSGFzaCA9IiArIHByZXZpb3VzUGVuZGluZ0hhc2gpOwogICAgICAgICAgdmFyIHByZXZpb3VzUGVuZGluZ1Jlc29sdmVkID0gdHJ1ZTsKICAgICAgICAgIHZhciBwZW5kaW5nUmVzb2x2ZWQgPSB0cnVlOwogICAgICAgICAgaWYocHJldmlvdXNQZW5kaW5nSGFzaCl7CiAgICAgICAgICAgIC8vd2UgaGF2ZSBwcmV2aW91cyBwZW5kaW5nIGluIG1ldGEgZGF0YSwgc2VlIGlmIGl0J3MgcmVzb2x2ZWQKICAgICAgICAgICAgcHJldmlvdXNQZW5kaW5nUmVzb2x2ZWQgPSBmYWxzZTsKICAgICAgICAgICAgdmFyIHJlc29sdmVkID0gbmV3RGF0YS51cGRhdGVzLmhhc2hlc1twcmV2aW91c1BlbmRpbmdIYXNoXTsKICAgICAgICAgICAgaWYocmVzb2x2ZWQpewogICAgICAgICAgICAgIHNlbGYuY29uc29sZUxvZygidXBkYXRlTWV0YUZyb21OZXdEYXRhIC0gRm91bmQgcHJldmlvdXNQZW5kaW5nVWlkIGluIG1ldGEgZGF0YSByZXNvbHZlZCAtIHJlc29sdmVkID0gIiArIEpTT04uc3RyaW5naWZ5KHJlc29sdmVkKSk7CiAgICAgICAgICAgICAgLy90aGUgcHJldmlvdXMgcGVuZGluZyBpcyByZXNvbHZlZCBpbiB0aGUgY2xvdWQKICAgICAgICAgICAgICBtZXRhZGF0YS5wcmV2aW91c1BlbmRpbmdVaWQgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgcHJldmlvdXNQZW5kaW5nUmVzb2x2ZWQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZihwZW5kaW5nSGFzaCl7CiAgICAgICAgICAgIC8vd2UgaGF2ZSBjdXJyZW50IHBlbmRpbmcgaW4gbWV0YSBkYXRhLCBzZWUgaWYgaXQncyByZXNvbHZlZAogICAgICAgICAgICBwZW5kaW5nUmVzb2x2ZWQgPSBmYWxzZTsKICAgICAgICAgICAgdmFyIHJlc29sdmVkID0gbmV3RGF0YS51cGRhdGVzLmhhc2hlc1twZW5kaW5nSGFzaF07CiAgICAgICAgICAgIGlmKHJlc29sdmVkKXsKICAgICAgICAgICAgICBzZWxmLmNvbnNvbGVMb2coInVwZGF0ZU1ldGFGcm9tTmV3RGF0YSAtIEZvdW5kIHBlbmRpbmdVaWQgaW4gbWV0YSBkYXRhIHJlc29sdmVkIC0gcmVzb2x2ZWQgPSAiICsgSlNPTi5zdHJpbmdpZnkocmVzb2x2ZWQpKTsKICAgICAgICAgICAgICAvL3RoZSBjdXJyZW50IHBlbmRpbmcgaXMgcmVzb2x2ZWQgaW4gdGhlIGNsb3VkCiAgICAgICAgICAgICAgbWV0YWRhdGEucGVuZGluZ1VpZCA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICBwZW5kaW5nUmVzb2x2ZWQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYocHJldmlvdXNQZW5kaW5nUmVzb2x2ZWQgJiYgcGVuZGluZ1Jlc29sdmVkKXsKICAgICAgICAgICAgc2VsZi5jb25zb2xlTG9nKCJ1cGRhdGVNZXRhRnJvbU5ld0RhdGEgLSBib3RoIHByZXZpb3VzIGFuZCBjdXJyZW50IHBlbmRpbmdzIGFyZSByZXNvbHZlZCBmb3IgbWV0YSBkYXRhIHdpdGggdWlkICIgKyB1aWQgKyAiLiBEZWxldGUgaXQuIik7CiAgICAgICAgICAgIC8vYWxsIHBlbmRpbmdzIGFyZSByZXNvbHZlZCwgdGhlIGVudHJ5IGNhbiBiZSByZW1vdmVkIGZyb20gbWV0YSBkYXRhCiAgICAgICAgICAgIGRlbGV0ZSBtZXRhW3VpZF07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwKCgogIG1hcmtJbkZsaWdodEFzQ3Jhc2hlZCA6IGZ1bmN0aW9uKGRhdGFzZXQpIHsKICAgIHZhciBwZW5kaW5nID0gZGF0YXNldC5wZW5kaW5nOwogICAgdmFyIHBlbmRpbmdIYXNoOwogICAgdmFyIHBlbmRpbmdSZWM7CgogICAgaWYoIHBlbmRpbmcgKSB7CiAgICAgIHZhciBjcmFzaGVkUmVjb3JkcyA9IHt9OwogICAgICBmb3IoIHBlbmRpbmdIYXNoIGluIHBlbmRpbmcgKSB7CiAgICAgICAgaWYoIHBlbmRpbmcuaGFzT3duUHJvcGVydHkocGVuZGluZ0hhc2gpICkgewogICAgICAgICAgcGVuZGluZ1JlYyA9IHBlbmRpbmdbcGVuZGluZ0hhc2hdOwoKICAgICAgICAgIGlmKCBwZW5kaW5nUmVjLmluRmxpZ2h0ICkgewogICAgICAgICAgICBzZWxmLmNvbnNvbGVMb2coJ01hcmtpbmcgaW4gZmxpZ2h0IHBlbmRpbmcgcmVjb3JkIGFzIGNyYXNoZWQgOiAnICsgcGVuZGluZ0hhc2gpOwogICAgICAgICAgICBwZW5kaW5nUmVjLmNyYXNoZWQgPSB0cnVlOwogICAgICAgICAgICBjcmFzaGVkUmVjb3Jkc1twZW5kaW5nUmVjLnVpZF0gPSBwZW5kaW5nUmVjOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCgogIGNvbnNvbGVMb2c6IGZ1bmN0aW9uKG1zZykgewogICAgaWYoIHNlbGYuY29uZmlnLmRvX2NvbnNvbGVfbG9nICkgewogICAgICBjb25zb2xlLmxvZyhtc2cpOwogICAgfQogIH0KfTsKCihmdW5jdGlvbigpIHsKICBzZWxmLmNvbmZpZyA9IHNlbGYuZGVmYXVsdHM7CiAgLy9Jbml0aWFsc2UgdGhlIHN5bmMgc2VydmljZSB3aXRoIGRlZmF1bHQgY29uZmlnCiAgLy9zZWxmLmluaXQoe30pOwp9KSgpOwoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgaW5pdDogc2VsZi5pbml0LAogIG1hbmFnZTogc2VsZi5tYW5hZ2UsCiAgbm90aWZ5OiBzZWxmLm5vdGlmeSwKICBkb0xpc3Q6IHNlbGYubGlzdCwKICBkb0NyZWF0ZTogc2VsZi5jcmVhdGUsCiAgZG9SZWFkOiBzZWxmLnJlYWQsCiAgZG9VcGRhdGU6IHNlbGYudXBkYXRlLAogIGRvRGVsZXRlOiBzZWxmWydkZWxldGUnXSwKICBsaXN0Q29sbGlzaW9uczogc2VsZi5saXN0Q29sbGlzaW9ucywKICByZW1vdmVDb2xsaXNpb246IHNlbGYucmVtb3ZlQ29sbGlzaW9uLAogIGdldFBlbmRpbmcgOiBzZWxmLmdldFBlbmRpbmcsCiAgY2xlYXJQZW5kaW5nIDogc2VsZi5jbGVhclBlbmRpbmcsCiAgZ2V0RGF0YXNldCA6IHNlbGYuZ2V0RGF0YVNldCwKICBnZXRRdWVyeVBhcmFtczogc2VsZi5nZXRRdWVyeVBhcmFtcywKICBzZXRRdWVyeVBhcmFtczogc2VsZi5zZXRRdWVyeVBhcmFtcywKICBnZXRNZXRhRGF0YTogc2VsZi5nZXRNZXRhRGF0YSwKICBzZXRNZXRhRGF0YTogc2VsZi5zZXRNZXRhRGF0YSwKICBnZXRDb25maWc6IHNlbGYuZ2V0Q29uZmlnLAogIHNldENvbmZpZzogc2VsZi5zZXRDb25maWcsCiAgc3RhcnRTeW5jOiBzZWxmLnN0YXJ0U3luYywKICBzdG9wU3luYzogc2VsZi5zdG9wU3luYywKICBkb1N5bmM6IHNlbGYuZG9TeW5jLAogIGZvcmNlU3luYzogc2VsZi5mb3JjZVN5bmMsCiAgZ2VuZXJhdGVIYXNoOiBzZWxmLmdlbmVyYXRlSGFzaCwKICBsb2FkRGF0YVNldDogc2VsZi5sb2FkRGF0YVNldCwKICBjaGVja0hhc0N1c3RvbVN5bmM6IHNlbGYuY2hlY2tIYXNDdXN0b21TeW5jLAogIGNsZWFyQ2FjaGU6IHNlbGYuY2xlYXJDYWNoZQp9Owp9LHsiLi4vLi4vbGlicy9nZW5lcmF0ZWQvY3J5cHRvIjoxLCIuLi8uLi9saWJzL2dlbmVyYXRlZC9sYXduY2hhaXIiOjIsIi4vYXBpX2FjdCI6MTksIi4vYXBpX2Nsb3VkIjoyMSwiSlNPTiI6M31dLDQ2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7CiAgY3JlYXRlVVVJRCA6IGZ1bmN0aW9uICgpIHsKICAgIC8vZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHQKICAgIC8vYmFzZWQgb24gUkZDIDQxMjIsIHNlY3Rpb24gNC40IChBbGdvcml0aG1zIGZvciBjcmVhdGluZyBVVUlEIGZyb20gdHJ1ZWx5IHJhbmRvbSBwciBwc2V1ZG8tcmFuZG9tIG51bWJlcikKICAgIHZhciBzID0gW107CiAgICB2YXIgaGV4RGlnaXRhbHMgPSAiMDEyMzQ1Njc4OUFCQ0RFRiI7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspIHsKICAgICAgc1tpXSA9IGhleERpZ2l0YWxzLnN1YnN0cihNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwKSwgMSk7CiAgICB9CiAgICBzWzEyXSA9ICI0IjsKICAgIHNbMTZdID0gaGV4RGlnaXRhbHMuc3Vic3RyKChzWzE2XSAmIDB4MykgfCAweDgsIDEpOwogICAgdmFyIHV1aWQgPSBzLmpvaW4oIiIpOwogICAgcmV0dXJuIHV1aWQ7CiAgfQp9OwoKfSx7fV0sNDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpewp2YXIgaW5pdGlhbGl6ZXIgPSBfZGVyZXFfKCIuL2luaXRpYWxpemVyIik7CnZhciBldmVudHMgPSBfZGVyZXFfKCIuL2V2ZW50cyIpOwp2YXIgQ2xvdWRIb3N0ID0gX2RlcmVxXygiLi9ob3N0cyIpOwp2YXIgY29uc3RhbnRzID0gX2RlcmVxXygiLi9jb25zdGFudHMiKTsKdmFyIGxvZ2dlciA9IF9kZXJlcV8oIi4vbG9nZ2VyIik7CgoKLy90aGUgY2xvdWQgY29uZmlndXJhdGlvbnMKdmFyIGNsb3VkX2hvc3Q7Cgp2YXIgaXNfaW5pdGlhbGlzaW5nID0gZmFsc2U7CnZhciBpc19jbG91ZF9yZWFkeSA9IGZhbHNlOwp2YXIgaW5pdF9lcnJvciA9IG51bGw7CgoKdmFyIHJlYWR5ID0gZnVuY3Rpb24oY2IpewogIGlmKGlzX2Nsb3VkX3JlYWR5KXsKICAgIHJldHVybiBjYihudWxsLCB7aG9zdDogZ2V0Q2xvdWRIb3N0VXJsKCl9KTsKICB9IGVsc2UgewogICAgZXZlbnRzLm9uY2UoY29uc3RhbnRzLklOSVRfRVZFTlQsIGZ1bmN0aW9uKGVyciwgaG9zdCl7CiAgICAgIHJldHVybiBjYihlcnIsIGhvc3QpOwogICAgfSk7CiAgICBpZighaXNfaW5pdGlhbGlzaW5nKXsKICAgICAgaXNfaW5pdGlhbGlzaW5nID0gdHJ1ZTsKICAgICAgdmFyIGZoaW5pdCA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaW5pdGlhbGl6ZXIuaW5pdChmdW5jdGlvbihlcnIsIGluaXRSZXMpewogICAgICAgICAgaXNfaW5pdGlhbGlzaW5nID0gZmFsc2U7CiAgICAgICAgICBpZihlcnIpewogICAgICAgICAgICBpbml0X2Vycm9yID0gZXJyOwogICAgICAgICAgICByZXR1cm4gZXZlbnRzLmVtaXQoY29uc3RhbnRzLklOSVRfRVZFTlQsIGVycik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpbml0X2Vycm9yID0gbnVsbDsKICAgICAgICAgICAgaXNfY2xvdWRfcmVhZHkgPSB0cnVlOwogICAgICAgICAgICBjbG91ZF9ob3N0ID0gbmV3IENsb3VkSG9zdChpbml0UmVzLmNsb3VkKTsKICAgICAgICAgICAgcmV0dXJuIGV2ZW50cy5lbWl0KGNvbnN0YW50cy5JTklUX0VWRU5ULCBudWxsLCB7aG9zdDogZ2V0Q2xvdWRIb3N0VXJsKCl9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgICBpZih0eXBlb2Ygd2luZG93LmNvcmRvdmEgIT09ICJ1bmRlZmluZWQiIHx8IHR5cGVvZiB3aW5kb3cucGhvbmVnYXAgIT09ICJ1bmRlZmluZWQiKXsKICAgICAgICAvL2lmIHdlIGFyZSBydW5uaW5nIGluc2lkZSBjb3Jkb3ZhL3Bob25lZ2FwLCBvbmx5IGluaXQgYWZ0ZXIgZGV2aWNlIGlzIHJlYWR5IHRvIGVuc3VyZSB0aGUgZGV2aWNlIGlkIGlzIHRoZSByaWdodCBvbmUKICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJkZXZpY2VyZWFkeSIsIGZoaW5pdCwgZmFsc2UpOwogICAgICB9IGVsc2UgewogICAgICAgIGZoaW5pdCgpOwogICAgICB9CiAgICB9CiAgfQp9Cgp2YXIgZ2V0Q2xvdWRIb3N0ID0gZnVuY3Rpb24oKXsKICByZXR1cm4gY2xvdWRfaG9zdDsKfQoKdmFyIGdldENsb3VkSG9zdFVybCA9IGZ1bmN0aW9uKCl7CiAgaWYodHlwZW9mIGNsb3VkX2hvc3QgIT09ICJ1bmRlZmluZWQiKXsKICAgIHZhciBhcHBQcm9wcyA9IF9kZXJlcV8oIi4vYXBwUHJvcHMiKS5nZXRBcHBQcm9wcygpOwogICAgcmV0dXJuIGNsb3VkX2hvc3QuZ2V0SG9zdChhcHBQcm9wcy5tb2RlKTsKICB9IGVsc2UgewogICAgcmV0dXJuIHVuZGVmaW5lZDsKICB9Cn0KCnZhciBpc1JlYWR5ID0gZnVuY3Rpb24oKXsKICByZXR1cm4gaXNfY2xvdWRfcmVhZHk7Cn0KCnZhciBnZXRJbml0RXJyb3IgPSBmdW5jdGlvbigpewogIHJldHVybiBpbml0X2Vycm9yOwp9CgovL2ZvciB0ZXN0CnZhciByZXNldCA9IGZ1bmN0aW9uKCl7CiAgaXNfY2xvdWRfcmVhZHkgPSBmYWxzZTsKICBpc19pbml0aWFsaXNpbmcgPSBmYWxzZTsKICBjbG91ZF9ob3N0ID0gdW5kZWZpbmVkOwogIGluaXRfZXJyb3IgPSB1bmRlZmluZWQ7CiAgcmVhZHkoZnVuY3Rpb24oKXsKICAgIAogIH0pOwp9CgpyZWFkeShmdW5jdGlvbihlcnJvciwgaG9zdCl7CiAgaWYoZXJyb3IpewogICAgaWYoZXJyb3IubWVzc2FnZSAhPT0gImFwcF9jb25maWdfbWlzc2luZyIpewogICAgICBsb2dnZXIuZXJyb3IoIkZhaWxlZCB0byBpbml0aWFsaXNlIGZoLiIpOwogICAgfSBlbHNlIHsKICAgICAgbG9nZ2VyLmluZm8oIk5vIGZoIGNvbmZpZyBmaWxlIik7CiAgICB9CiAgfSBlbHNlIHsKICAgIGxvZ2dlci5pbmZvKCJmaCBjbG91ZCBpcyByZWFkeSIpOwogIH0KfSk7Cgptb2R1bGUuZXhwb3J0cyA9IHsKICByZWFkeTogcmVhZHksCiAgaXNSZWFkeTogaXNSZWFkeSwKICBnZXRDbG91ZEhvc3Q6IGdldENsb3VkSG9zdCwKICBnZXRDbG91ZEhvc3RVcmw6IGdldENsb3VkSG9zdFVybCwKICBnZXRJbml0RXJyb3I6IGdldEluaXRFcnJvciwKICByZXNldDogcmVzZXQKfQp9LHsiLi9hcHBQcm9wcyI6MjUsIi4vY29uc3RhbnRzIjoyNywiLi9ldmVudHMiOjMwLCIuL2hvc3RzIjozMywiLi9pbml0aWFsaXplciI6MzQsIi4vbG9nZ2VyIjozN31dfSx7fSxbMTZdKQooMTYpCn0pOwo7CihmdW5jdGlvbihyb290KSB7CgogIC8vISEhbGliIHN0YXJ0ISEhCiAgLyoKICAgIGpzb24yLmpzCiAgICAyMDA4LTAzLTI0CgogICAgUHVibGljIERvbWFpbi4KCiAgICBOTyBXQVJSQU5UWSBFWFBSRVNTRUQgT1IgSU1QTElFRC4gVVNFIEFUIFlPVVIgT1dOIFJJU0suCgogICAgU2VlIGh0dHA6Ly93d3cuSlNPTi5vcmcvanMuaHRtbAoKICAgIFRoaXMgZmlsZSBjcmVhdGVzIGEgZ2xvYmFsIEpTT04gb2JqZWN0IGNvbnRhaW5pbmcgdGhyZWUgbWV0aG9kczogc3RyaW5naWZ5LAogICAgcGFyc2UsIGFuZCBxdW90ZS4KCgogICAgICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlLCByZXBsYWNlciwgc3BhY2UpCiAgICAgICAgICAgIHZhbHVlICAgICAgIGFueSBKYXZhU2NyaXB0IHZhbHVlLCB1c3VhbGx5IGFuIG9iamVjdCBvciBhcnJheS4KCiAgICAgICAgICAgIHJlcGxhY2VyICAgIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IGRldGVybWluZXMgaG93IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgYXJlIHN0cmluZ2lmaWVkIGZvciBvYmplY3RzIHdpdGhvdXQgYSB0b0pTT04KICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kLiBJdCBjYW4gYmUgYSBmdW5jdGlvbiBvciBhbiBhcnJheS4KCiAgICAgICAgICAgIHNwYWNlICAgICAgIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHNwZWNpZmllcyB0aGUgaW5kZW50YXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgb2YgbmVzdGVkIHN0cnVjdHVyZXMuIElmIGl0IGlzIG9taXR0ZWQsIHRoZSB0ZXh0IHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgYmUgcGFja2VkIHdpdGhvdXQgZXh0cmEgd2hpdGVzcGFjZS4gSWYgaXQgaXMgYSBudW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIGl0IHdpbGwgc3BlY2lmeSB0aGUgbnVtYmVyIG9mIHNwYWNlcyB0byBpbmRlbnQgYXQgZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBsZXZlbC4gSWYgaXQgaXMgYSBzdHJpbmcgKHN1Y2ggYXMgJ1x0JyksIGl0IGNvbnRhaW5zIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJzIHVzZWQgdG8gaW5kZW50IGF0IGVhY2ggbGV2ZWwuCgogICAgICAgICAgICBUaGlzIG1ldGhvZCBwcm9kdWNlcyBhIEpTT04gdGV4dCBmcm9tIGEgSmF2YVNjcmlwdCB2YWx1ZS4KCiAgICAgICAgICAgIFdoZW4gYW4gb2JqZWN0IHZhbHVlIGlzIGZvdW5kLCBpZiB0aGUgb2JqZWN0IGNvbnRhaW5zIGEgdG9KU09OCiAgICAgICAgICAgIG1ldGhvZCwgaXRzIHRvSlNPTiBtZXRob2Qgd2l0aCBiZSBjYWxsZWQgYW5kIHRoZSByZXN1bHQgd2lsbCBiZQogICAgICAgICAgICBzdHJpbmdpZmllZC4gQSB0b0pTT04gbWV0aG9kIGRvZXMgbm90IHNlcmlhbGl6ZTogaXQgcmV0dXJucyB0aGUKICAgICAgICAgICAgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIG5hbWUvdmFsdWUgcGFpciB0aGF0IHNob3VsZCBiZSBzZXJpYWxpemVkLAogICAgICAgICAgICBvciB1bmRlZmluZWQgaWYgbm90aGluZyBzaG91bGQgYmUgc2VyaWFsaXplZC4gVGhlIHRvSlNPTiBtZXRob2Qgd2lsbAogICAgICAgICAgICBiZSBwYXNzZWQgdGhlIGtleSBhc3NvY2lhdGVkIHdpdGggdGhlIHZhbHVlLCBhbmQgdGhpcyB3aWxsIGJlIGJvdW5kCiAgICAgICAgICAgIHRvIHRoZSBvYmplY3QgaG9sZGluZyB0aGUga2V5LgoKICAgICAgICAgICAgVGhpcyBpcyB0aGUgdG9KU09OIG1ldGhvZCBhZGRlZCB0byBEYXRlczoKCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0b0pTT04oa2V5KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VVRDRnVsbFllYXIoKSAgICsgJy0nICsKICAgICAgICAgICAgICAgICAgICAgICAgIGYodGhpcy5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKwogICAgICAgICAgICAgICAgICAgICAgICAgZih0aGlzLmdldFVUQ0RhdGUoKSkgICAgICArICdUJyArCiAgICAgICAgICAgICAgICAgICAgICAgICBmKHRoaXMuZ2V0VVRDSG91cnMoKSkgICAgICsgJzonICsKICAgICAgICAgICAgICAgICAgICAgICAgIGYodGhpcy5nZXRVVENNaW51dGVzKCkpICAgKyAnOicgKwogICAgICAgICAgICAgICAgICAgICAgICAgZih0aGlzLmdldFVUQ1NlY29uZHMoKSkgICArICdaJzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbCByZXBsYWNlciBtZXRob2QuIEl0IHdpbGwgYmUgcGFzc2VkIHRoZQogICAgICAgICAgICBrZXkgYW5kIHZhbHVlIG9mIGVhY2ggbWVtYmVyLCB3aXRoIHRoaXMgYm91bmQgdG8gdGhlIGNvbnRhaW5pbmcKICAgICAgICAgICAgb2JqZWN0LiBUaGUgdmFsdWUgdGhhdCBpcyByZXR1cm5lZCBmcm9tIHlvdXIgbWV0aG9kIHdpbGwgYmUKICAgICAgICAgICAgc2VyaWFsaXplZC4gSWYgeW91ciBtZXRob2QgcmV0dXJucyB1bmRlZmluZWQsIHRoZW4gdGhlIG1lbWJlciB3aWxsCiAgICAgICAgICAgIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIHNlcmlhbGl6YXRpb24uCgogICAgICAgICAgICBJZiBubyByZXBsYWNlciBwYXJhbWV0ZXIgaXMgcHJvdmlkZWQsIHRoZW4gYSBkZWZhdWx0IHJlcGxhY2VyCiAgICAgICAgICAgIHdpbGwgYmUgdXNlZDoKCiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXBsYWNlcihrZXksIHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIGtleSkgPwogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFRoZSBkZWZhdWx0IHJlcGxhY2VyIGlzIHBhc3NlZCB0aGUga2V5IGFuZCB2YWx1ZSBmb3IgZWFjaCBpdGVtIGluCiAgICAgICAgICAgIHRoZSBzdHJ1Y3R1cmUuIEl0IGV4Y2x1ZGVzIGluaGVyaXRlZCBtZW1iZXJzLgoKICAgICAgICAgICAgSWYgdGhlIHJlcGxhY2VyIHBhcmFtZXRlciBpcyBhbiBhcnJheSwgdGhlbiBpdCB3aWxsIGJlIHVzZWQgdG8KICAgICAgICAgICAgc2VsZWN0IHRoZSBtZW1iZXJzIHRvIGJlIHNlcmlhbGl6ZWQuIEl0IGZpbHRlcnMgdGhlIHJlc3VsdHMgc3VjaAogICAgICAgICAgICB0aGF0IG9ubHkgbWVtYmVycyB3aXRoIGtleXMgbGlzdGVkIGluIHRoZSByZXBsYWNlciBhcnJheSBhcmUKICAgICAgICAgICAgc3RyaW5naWZpZWQuCgogICAgICAgICAgICBWYWx1ZXMgdGhhdCBkbyBub3QgaGF2ZSBKU09OIHJlcHJlc2VudGFpb25zLCBzdWNoIGFzIHVuZGVmaW5lZCBvcgogICAgICAgICAgICBmdW5jdGlvbnMsIHdpbGwgbm90IGJlIHNlcmlhbGl6ZWQuIFN1Y2ggdmFsdWVzIGluIG9iamVjdHMgd2lsbCBiZQogICAgICAgICAgICBkcm9wcGVkOyBpbiBhcnJheXMgdGhleSB3aWxsIGJlIHJlcGxhY2VkIHdpdGggbnVsbC4gWW91IGNhbiB1c2UKICAgICAgICAgICAgYSByZXBsYWNlciBmdW5jdGlvbiB0byByZXBsYWNlIHRob3NlIHdpdGggSlNPTiB2YWx1ZXMuCiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHVuZGVmaW5lZCkgcmV0dXJucyB1bmRlZmluZWQuCgogICAgICAgICAgICBUaGUgb3B0aW9uYWwgc3BhY2UgcGFyYW1ldGVyIHByb2R1Y2VzIGEgc3RyaW5naWZpY2F0aW9uIG9mIHRoZSB2YWx1ZQogICAgICAgICAgICB0aGF0IGlzIGZpbGxlZCB3aXRoIGxpbmUgYnJlYWtzIGFuZCBpbmRlbnRhdGlvbiB0byBtYWtlIGl0IGVhc2llciB0bwogICAgICAgICAgICByZWFkLgoKICAgICAgICAgICAgSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIG5vbi1lbXB0eSBzdHJpbmcsIHRoZW4gdGhhdCBzdHJpbmcgd2lsbAogICAgICAgICAgICBiZSB1c2VkIGZvciBpbmRlbnRhdGlvbi4gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIG51bWJlciwgdGhlbgogICAgICAgICAgICB0aGVuIGluZGVudGF0aW9uIHdpbGwgYmUgdGhhdCBtYW55IHNwYWNlcy4KCiAgICAgICAgICAgIEV4YW1wbGU6CgogICAgICAgICAgICB0ZXh0ID0gSlNPTi5zdHJpbmdpZnkoWydlJywge3BsdXJpYnVzOiAndW51bSd9XSk7CiAgICAgICAgICAgIC8vIHRleHQgaXMgJ1siZSIseyJwbHVyaWJ1cyI6InVudW0ifV0nCgoKICAgICAgICAgICAgdGV4dCA9IEpTT04uc3RyaW5naWZ5KFsnZScsIHtwbHVyaWJ1czogJ3VudW0nfV0sIG51bGwsICdcdCcpOwogICAgICAgICAgICAvLyB0ZXh0IGlzICdbXG5cdCJlIixcblx0e1xuXHRcdCJwbHVyaWJ1cyI6ICJ1bnVtIlxuXHR9XG5dJwoKCiAgICAgICAgSlNPTi5wYXJzZSh0ZXh0LCByZXZpdmVyKQogICAgICAgICAgICBUaGlzIG1ldGhvZCBwYXJzZXMgYSBKU09OIHRleHQgdG8gcHJvZHVjZSBhbiBvYmplY3Qgb3IgYXJyYXkuCiAgICAgICAgICAgIEl0IGNhbiB0aHJvdyBhIFN5bnRheEVycm9yIGV4Y2VwdGlvbi4KCiAgICAgICAgICAgIFRoZSBvcHRpb25hbCByZXZpdmVyIHBhcmFtZXRlciBpcyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGZpbHRlciBhbmQKICAgICAgICAgICAgdHJhbnNmb3JtIHRoZSByZXN1bHRzLiBJdCByZWNlaXZlcyBlYWNoIG9mIHRoZSBrZXlzIGFuZCB2YWx1ZXMsIGFuZAogICAgICAgICAgICBpdHMgcmV0dXJuIHZhbHVlIGlzIHVzZWQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgdmFsdWUuIElmIGl0CiAgICAgICAgICAgIHJldHVybnMgd2hhdCBpdCByZWNlaXZlZCwgdGhlbiBzdHJ1Y3R1cmUgaXMgbm90IG1vZGlmaWVkLiBJZiBpdAogICAgICAgICAgICByZXR1cm5zIHVuZGVmaW5lZCB0aGVuIHRoZSBtZW1iZXIgaXMgZGVsZXRlZC4KCiAgICAgICAgICAgIEV4YW1wbGU6CgogICAgICAgICAgICAvLyBQYXJzZSB0aGUgdGV4dC4gVmFsdWVzIHRoYXQgbG9vayBsaWtlIElTTyBkYXRlIHN0cmluZ3Mgd2lsbAogICAgICAgICAgICAvLyBiZSBjb252ZXJ0ZWQgdG8gRGF0ZSBvYmplY3RzLgoKICAgICAgICAgICAgbXlEYXRhID0gSlNPTi5wYXJzZSh0ZXh0LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICAgICAgICAgICAgdmFyIGE7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgIGEgPQovXihcZHs0fSktKFxkezJ9KS0oXGR7Mn0pVChcZHsyfSk6KFxkezJ9KTooXGR7Mn0oPzpcLlxkKik/KVokLy5leGVjKHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBpZiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoK2FbMV0sICthWzJdIC0gMSwgK2FbM10sICthWzRdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgK2FbNV0sICthWzZdKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgICB9KTsKCgogICAgICAgIEpTT04ucXVvdGUodGV4dCkKICAgICAgICAgICAgVGhpcyBtZXRob2Qgd3JhcHMgYSBzdHJpbmcgaW4gcXVvdGVzLCBlc2NhcGluZyBzb21lIGNoYXJhY3RlcnMKICAgICAgICAgICAgYXMgbmVlZGVkLgoKCiAgICBUaGlzIGlzIGEgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uLiBZb3UgYXJlIGZyZWUgdG8gY29weSwgbW9kaWZ5LCBvcgogICAgcmVkaXN0cmlidXRlLgoKICAgIFVTRSBZT1VSIE9XTiBDT1BZLiBJVCBJUyBFWFRSRU1FTFkgVU5XSVNFIFRPIExPQUQgVEhJUkQgUEFSVFkKICAgIENPREUgSU5UTyBZT1VSIFBBR0VTLgoqLwoKICAvKmpzbGludCByZWdleHA6IHRydWUsIGZvcmluOiB0cnVlLCBldmlsOiB0cnVlICovCgogIC8qZ2xvYmFsIEpTT04gKi8KCiAgLyptZW1iZXJzICIiLCAiXGIiLCAiXHQiLCAiXG4iLCAiXGYiLCAiXHIiLCAiXCIiLCBKU09OLCAiXFwiLCBhcHBseSwKICAgIGNhbGwsIGNoYXJDb2RlQXQsIGZsb29yLCBnZXRVVENEYXRlLCBnZXRVVENGdWxsWWVhciwgZ2V0VVRDSG91cnMsCiAgICBnZXRVVENNaW51dGVzLCBnZXRVVENNb250aCwgZ2V0VVRDU2Vjb25kcywgaGFzT3duUHJvcGVydHksIGpvaW4sIGxlbmd0aCwKICAgIHBhcnNlLCBwcm9wZXJ0eUlzRW51bWVyYWJsZSwgcHJvdG90eXBlLCBwdXNoLCBxdW90ZSwgcmVwbGFjZSwgc3RyaW5naWZ5LAogICAgdGVzdCwgdG9KU09OLCB0b1N0cmluZwoqLwoKICBpZiAoIUpTT04pIHsKCiAgICAvLyBDcmVhdGUgYSBKU09OIG9iamVjdCBvbmx5IGlmIG9uZSBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0LiBXZSBjcmVhdGUgdGhlCiAgICAvLyBvYmplY3QgaW4gYSBjbG9zdXJlIHRvIGF2b2lkIGdsb2JhbCB2YXJpYWJsZXMuCgogICAgdmFyIEpTT04gPSBmdW5jdGlvbigpIHsKCiAgICAgIGZ1bmN0aW9uIGYobikgeyAvLyBGb3JtYXQgaW50ZWdlcnMgdG8gaGF2ZSBhdCBsZWFzdCB0d28gZGlnaXRzLgogICAgICAgIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuIDogbjsKICAgICAgfQoKICAgICAgRGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24oKSB7CgogICAgICAgIC8vIEV2ZW50dWFsbHksIHRoaXMgbWV0aG9kIHdpbGwgYmUgYmFzZWQgb24gdGhlIGRhdGUudG9JU09TdHJpbmcgbWV0aG9kLgoKICAgICAgICByZXR1cm4gdGhpcy5nZXRVVENGdWxsWWVhcigpICsgJy0nICsKICAgICAgICAgIGYodGhpcy5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKwogICAgICAgICAgZih0aGlzLmdldFVUQ0RhdGUoKSkgKyAnVCcgKwogICAgICAgICAgZih0aGlzLmdldFVUQ0hvdXJzKCkpICsgJzonICsKICAgICAgICAgIGYodGhpcy5nZXRVVENNaW51dGVzKCkpICsgJzonICsKICAgICAgICAgIGYodGhpcy5nZXRVVENTZWNvbmRzKCkpICsgJ1onOwogICAgICB9OwoKCiAgICAgIHZhciBlc2NhcGVhYmxlID0gL1siXFxceDAwLVx4MWZceDdmLVx4OWZdL2csCiAgICAgICAgZ2FwLAogICAgICAgIGluZGVudCwKICAgICAgICBtZXRhID0geyAvLyB0YWJsZSBvZiBjaGFyYWN0ZXIgc3Vic3RpdHV0aW9ucwogICAgICAgICAgJ1xiJzogJ1xcYicsCiAgICAgICAgICAnXHQnOiAnXFx0JywKICAgICAgICAgICdcbic6ICdcXG4nLAogICAgICAgICAgJ1xmJzogJ1xcZicsCiAgICAgICAgICAnXHInOiAnXFxyJywKICAgICAgICAgICciJzogJ1xcIicsCiAgICAgICAgICAnXFwnOiAnXFxcXCcKICAgICAgICB9LAogICAgICAgIHJlcDsKCgogICAgICBmdW5jdGlvbiBxdW90ZShzdHJpbmcpIHsKCiAgICAgICAgLy8gSWYgdGhlIHN0cmluZyBjb250YWlucyBubyBjb250cm9sIGNoYXJhY3RlcnMsIG5vIHF1b3RlIGNoYXJhY3RlcnMsIGFuZCBubwogICAgICAgIC8vIGJhY2tzbGFzaCBjaGFyYWN0ZXJzLCB0aGVuIHdlIGNhbiBzYWZlbHkgc2xhcCBzb21lIHF1b3RlcyBhcm91bmQgaXQuCiAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIG11c3QgYWxzbyByZXBsYWNlIHRoZSBvZmZlbmRpbmcgY2hhcmFjdGVycyB3aXRoIHNhZmUgZXNjYXBlCiAgICAgICAgLy8gc2VxdWVuY2VzLgoKICAgICAgICByZXR1cm4gZXNjYXBlYWJsZS50ZXN0KHN0cmluZykgPwogICAgICAgICAgJyInICsgc3RyaW5nLnJlcGxhY2UoZXNjYXBlYWJsZSwgZnVuY3Rpb24oYSkgewogICAgICAgICAgICB2YXIgYyA9IG1ldGFbYV07CiAgICAgICAgICAgIGlmICh0eXBlb2YgYyA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICByZXR1cm4gYzsKICAgICAgICAgICAgfQogICAgICAgICAgICBjID0gYS5jaGFyQ29kZUF0KCk7CiAgICAgICAgICAgIHJldHVybiAnXFx1MDAnICsgTWF0aC5mbG9vcihjIC8gMTYpLnRvU3RyaW5nKDE2KSArCiAgICAgICAgICAgICAgKGMgJSAxNikudG9TdHJpbmcoMTYpOwogICAgICAgICAgfSkgKyAnIicgOgogICAgICAgICAgJyInICsgc3RyaW5nICsgJyInOwogICAgICB9CgoKICAgICAgZnVuY3Rpb24gc3RyKGtleSwgaG9sZGVyKSB7CgogICAgICAgIC8vIFByb2R1Y2UgYSBzdHJpbmcgZnJvbSBob2xkZXJba2V5XS4KCiAgICAgICAgdmFyIGksIC8vIFRoZSBsb29wIGNvdW50ZXIuCiAgICAgICAgICBrLCAvLyBUaGUgbWVtYmVyIGtleS4KICAgICAgICAgIHYsIC8vIFRoZSBtZW1iZXIgdmFsdWUuCiAgICAgICAgICBsZW5ndGgsCiAgICAgICAgICBtaW5kID0gZ2FwLAogICAgICAgICAgcGFydGlhbCwKICAgICAgICAgIHZhbHVlID0gaG9sZGVyW2tleV07CgogICAgICAgIC8vIElmIHRoZSB2YWx1ZSBoYXMgYSB0b0pTT04gbWV0aG9kLCBjYWxsIGl0IHRvIG9idGFpbiBhIHJlcGxhY2VtZW50IHZhbHVlLgoKICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJgogICAgICAgICAgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0pTT04oa2V5KTsKICAgICAgICB9CgogICAgICAgIC8vIElmIHdlIHdlcmUgY2FsbGVkIHdpdGggYSByZXBsYWNlciBmdW5jdGlvbiwgdGhlbiBjYWxsIHRoZSByZXBsYWNlciB0bwogICAgICAgIC8vIG9idGFpbiBhIHJlcGxhY2VtZW50IHZhbHVlLgoKICAgICAgICBpZiAodHlwZW9mIHJlcCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgdmFsdWUgPSByZXAuY2FsbChob2xkZXIsIGtleSwgdmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgLy8gV2hhdCBoYXBwZW5zIG5leHQgZGVwZW5kcyBvbiB0aGUgdmFsdWUncyB0eXBlLgoKICAgICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkgewogICAgICAgICAgY2FzZSAnc3RyaW5nJzoKICAgICAgICAgICAgcmV0dXJuIHF1b3RlKHZhbHVlKTsKCiAgICAgICAgICBjYXNlICdudW1iZXInOgoKICAgICAgICAgICAgLy8gSlNPTiBudW1iZXJzIG11c3QgYmUgZmluaXRlLiBFbmNvZGUgbm9uLWZpbml0ZSBudW1iZXJzIGFzIG51bGwuCgogICAgICAgICAgICByZXR1cm4gaXNGaW5pdGUodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6ICdudWxsJzsKCiAgICAgICAgICBjYXNlICdib29sZWFuJzoKICAgICAgICAgIGNhc2UgJ251bGwnOgoKICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbiBvciBudWxsLCBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nLiBOb3RlOgogICAgICAgICAgICAvLyB0eXBlb2YgbnVsbCBkb2VzIG5vdCBwcm9kdWNlICdudWxsJy4gVGhlIGNhc2UgaXMgaW5jbHVkZWQgaGVyZSBpbgogICAgICAgICAgICAvLyB0aGUgcmVtb3RlIGNoYW5jZSB0aGF0IHRoaXMgZ2V0cyBmaXhlZCBzb21lZGF5LgoKICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7CgogICAgICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyAnb2JqZWN0Jywgd2UgbWlnaHQgYmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCBvciBhbiBhcnJheSBvcgogICAgICAgICAgICAvLyBudWxsLgoKICAgICAgICAgIGNhc2UgJ29iamVjdCc6CgogICAgICAgICAgICAvLyBEdWUgdG8gYSBzcGVjaWZpY2F0aW9uIGJsdW5kZXIgaW4gRUNNQVNjcmlwdCwgdHlwZW9mIG51bGwgaXMgJ29iamVjdCcsCiAgICAgICAgICAgIC8vIHNvIHdhdGNoIG91dCBmb3IgdGhhdCBjYXNlLgoKICAgICAgICAgICAgaWYgKCF2YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiAnbnVsbCc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIE1ha2UgYW4gYXJyYXkgdG8gaG9sZCB0aGUgcGFydGlhbCByZXN1bHRzIG9mIHN0cmluZ2lmeWluZyB0aGlzIG9iamVjdCB2YWx1ZS4KCiAgICAgICAgICAgIGdhcCArPSBpbmRlbnQ7CiAgICAgICAgICAgIHBhcnRpYWwgPSBbXTsKCiAgICAgICAgICAgIC8vIElmIHRoZSBvYmplY3QgaGFzIGEgZG9udEVudW0gbGVuZ3RoIHByb3BlcnR5LCB3ZSdsbCB0cmVhdCBpdCBhcyBhbiBhcnJheS4KCiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJiAhKHZhbHVlLnByb3BlcnR5SXNFbnVtZXJhYmxlKCdsZW5ndGgnKSkpIHsKCiAgICAgICAgICAgICAgLy8gVGhlIG9iamVjdCBpcyBhbiBhcnJheS4gU3RyaW5naWZ5IGV2ZXJ5IGVsZW1lbnQuIFVzZSBudWxsIGFzIGEgcGxhY2Vob2xkZXIKICAgICAgICAgICAgICAvLyBmb3Igbm9uLUpTT04gdmFsdWVzLgoKICAgICAgICAgICAgICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7CiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBwYXJ0aWFsW2ldID0gc3RyKGksIHZhbHVlKSB8fCAnbnVsbCc7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAvLyBKb2luIGFsbCBvZiB0aGUgZWxlbWVudHMgdG9nZXRoZXIsIHNlcGFyYXRlZCB3aXRoIGNvbW1hcywgYW5kIHdyYXAgdGhlbSBpbgogICAgICAgICAgICAgIC8vIGJyYWNrZXRzLgoKICAgICAgICAgICAgICB2ID0gcGFydGlhbC5sZW5ndGggPT09IDAgPyAnW10nIDoKICAgICAgICAgICAgICAgIGdhcCA/ICdbXG4nICsgZ2FwICsgcGFydGlhbC5qb2luKCcsXG4nICsgZ2FwKSArCiAgICAgICAgICAgICAgICAnXG4nICsgbWluZCArICddJyA6CiAgICAgICAgICAgICAgICAnWycgKyBwYXJ0aWFsLmpvaW4oJywnKSArICddJzsKICAgICAgICAgICAgICBnYXAgPSBtaW5kOwogICAgICAgICAgICAgIHJldHVybiB2OwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBJZiB0aGUgcmVwbGFjZXIgaXMgYW4gYXJyYXksIHVzZSBpdCB0byBzZWxlY3QgdGhlIG1lbWJlcnMgdG8gYmUgc3RyaW5naWZpZWQuCgogICAgICAgICAgICBpZiAodHlwZW9mIHJlcCA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICBsZW5ndGggPSByZXAubGVuZ3RoOwogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgayA9IHJlcFtpXTsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgayA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSwgcmVwKTsKICAgICAgICAgICAgICAgICAgaWYgKHYpIHsKICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsLnB1c2gocXVvdGUoaykgKyAoZ2FwID8gJzogJyA6ICc6JykgKyB2KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdGVyYXRlIHRocm91Z2ggYWxsIG9mIHRoZSBrZXlzIGluIHRoZSBvYmplY3QuCgogICAgICAgICAgICAgIGZvciAoayBpbiB2YWx1ZSkgewogICAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSwgcmVwKTsKICAgICAgICAgICAgICAgIGlmICh2KSB7CiAgICAgICAgICAgICAgICAgIHBhcnRpYWwucHVzaChxdW90ZShrKSArIChnYXAgPyAnOiAnIDogJzonKSArIHYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gSm9pbiBhbGwgb2YgdGhlIG1lbWJlciB0ZXh0cyB0b2dldGhlciwgc2VwYXJhdGVkIHdpdGggY29tbWFzLAogICAgICAgICAgICAvLyBhbmQgd3JhcCB0aGVtIGluIGJyYWNlcy4KCiAgICAgICAgICAgIHYgPSBwYXJ0aWFsLmxlbmd0aCA9PT0gMCA/ICd7fScgOgogICAgICAgICAgICAgIGdhcCA/ICd7XG4nICsgZ2FwICsgcGFydGlhbC5qb2luKCcsXG4nICsgZ2FwKSArCiAgICAgICAgICAgICAgJ1xuJyArIG1pbmQgKyAnfScgOgogICAgICAgICAgICAgICd7JyArIHBhcnRpYWwuam9pbignLCcpICsgJ30nOwogICAgICAgICAgICBnYXAgPSBtaW5kOwogICAgICAgICAgICByZXR1cm4gdjsKICAgICAgICB9CiAgICAgIH0KCgogICAgICAvLyBSZXR1cm4gdGhlIEpTT04gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0cmluZ2lmeSwgcGFyc2UsIGFuZCBxdW90ZSBtZXRob2RzLgoKICAgICAgcmV0dXJuIHsKICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uKHZhbHVlLCByZXBsYWNlciwgc3BhY2UpIHsKCiAgICAgICAgICAvLyBUaGUgc3RyaW5naWZ5IG1ldGhvZCB0YWtlcyBhIHZhbHVlIGFuZCBhbiBvcHRpb25hbCByZXBsYWNlciwgYW5kIGFuIG9wdGlvbmFsCiAgICAgICAgICAvLyBzcGFjZSBwYXJhbWV0ZXIsIGFuZCByZXR1cm5zIGEgSlNPTiB0ZXh0LiBUaGUgcmVwbGFjZXIgY2FuIGJlIGEgZnVuY3Rpb24KICAgICAgICAgIC8vIHRoYXQgY2FuIHJlcGxhY2UgdmFsdWVzLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgd2lsbCBzZWxlY3QgdGhlIGtleXMuCiAgICAgICAgICAvLyBBIGRlZmF1bHQgcmVwbGFjZXIgbWV0aG9kIGNhbiBiZSBwcm92aWRlZC4gVXNlIG9mIHRoZSBzcGFjZSBwYXJhbWV0ZXIgY2FuCiAgICAgICAgICAvLyBwcm9kdWNlIHRleHQgdGhhdCBpcyBtb3JlIGVhc2lseSByZWFkYWJsZS4KCiAgICAgICAgICB2YXIgaTsKICAgICAgICAgIGdhcCA9ICcnOwogICAgICAgICAgaW5kZW50ID0gJyc7CiAgICAgICAgICBpZiAoc3BhY2UpIHsKCiAgICAgICAgICAgIC8vIElmIHRoZSBzcGFjZSBwYXJhbWV0ZXIgaXMgYSBudW1iZXIsIG1ha2UgYW4gaW5kZW50IHN0cmluZyBjb250YWluaW5nIHRoYXQKICAgICAgICAgICAgLy8gbWFueSBzcGFjZXMuCgogICAgICAgICAgICBpZiAodHlwZW9mIHNwYWNlID09PSAnbnVtYmVyJykgewogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzcGFjZTsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBpbmRlbnQgKz0gJyAnOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgLy8gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIHN0cmluZywgaXQgd2lsbCBiZSB1c2VkIGFzIHRoZSBpbmRlbnQgc3RyaW5nLgoKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgaW5kZW50ID0gc3BhY2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyByZXBsYWNlciBwYXJhbWV0ZXIsIHVzZSB0aGUgZGVmYXVsdCByZXBsYWNlci4KCiAgICAgICAgICBpZiAoIXJlcGxhY2VyKSB7CiAgICAgICAgICAgIHJlcCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgICBpZiAoIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIGtleSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIC8vIFRoZSByZXBsYWNlciBjYW4gYmUgYSBmdW5jdGlvbiBvciBhbiBhcnJheS4gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvci4KCiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJyB8fAogICAgICAgICAgICAodHlwZW9mIHJlcGxhY2VyID09PSAnb2JqZWN0JyAmJgogICAgICAgICAgICAgIHR5cGVvZiByZXBsYWNlci5sZW5ndGggPT09ICdudW1iZXInKSkgewogICAgICAgICAgICByZXAgPSByZXBsYWNlcjsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSlNPTi5zdHJpbmdpZnknKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBNYWtlIGEgZmFrZSByb290IG9iamVjdCBjb250YWluaW5nIG91ciB2YWx1ZSB1bmRlciB0aGUga2V5IG9mICcnLgogICAgICAgICAgLy8gUmV0dXJuIHRoZSByZXN1bHQgb2Ygc3RyaW5naWZ5aW5nIHRoZSB2YWx1ZS4KCiAgICAgICAgICByZXR1cm4gc3RyKCcnLCB7CiAgICAgICAgICAgICcnOiB2YWx1ZQogICAgICAgICAgfSk7CiAgICAgICAgfSwKCgogICAgICAgIHBhcnNlOiBmdW5jdGlvbih0ZXh0LCByZXZpdmVyKSB7CgogICAgICAgICAgLy8gVGhlIHBhcnNlIG1ldGhvZCB0YWtlcyBhIHRleHQgYW5kIGFuIG9wdGlvbmFsIHJldml2ZXIgZnVuY3Rpb24sIGFuZCByZXR1cm5zCiAgICAgICAgICAvLyBhIEphdmFTY3JpcHQgdmFsdWUgaWYgdGhlIHRleHQgaXMgYSB2YWxpZCBKU09OIHRleHQuCgogICAgICAgICAgdmFyIGo7CgogICAgICAgICAgZnVuY3Rpb24gd2Fsayhob2xkZXIsIGtleSkgewoKICAgICAgICAgICAgLy8gVGhlIHdhbGsgbWV0aG9kIGlzIHVzZWQgdG8gcmVjdXJzaXZlbHkgd2FsayB0aGUgcmVzdWx0aW5nIHN0cnVjdHVyZSBzbwogICAgICAgICAgICAvLyB0aGF0IG1vZGlmaWNhdGlvbnMgY2FuIGJlIG1hZGUuCgogICAgICAgICAgICB2YXIgaywgdiwgdmFsdWUgPSBob2xkZXJba2V5XTsKICAgICAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICBmb3IgKGsgaW4gdmFsdWUpIHsKICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHsKICAgICAgICAgICAgICAgICAgdiA9IHdhbGsodmFsdWUsIGspOwogICAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVba10gPSB2OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtrXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmV2aXZlci5jYWxsKGhvbGRlciwga2V5LCB2YWx1ZSk7CiAgICAgICAgICB9CgoKICAgICAgICAgIC8vIFBhcnNpbmcgaGFwcGVucyBpbiB0aHJlZSBzdGFnZXMuIEluIHRoZSBmaXJzdCBzdGFnZSwgd2UgcnVuIHRoZSB0ZXh0IGFnYWluc3QKICAgICAgICAgIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbnMgdGhhdCBsb29rIGZvciBub24tSlNPTiBwYXR0ZXJucy4gV2UgYXJlIGVzcGVjaWFsbHkKICAgICAgICAgIC8vIGNvbmNlcm5lZCB3aXRoICcoKScgYW5kICduZXcnIGJlY2F1c2UgdGhleSBjYW4gY2F1c2UgaW52b2NhdGlvbiwgYW5kICc9JwogICAgICAgICAgLy8gYmVjYXVzZSBpdCBjYW4gY2F1c2UgbXV0YXRpb24uIEJ1dCBqdXN0IHRvIGJlIHNhZmUsIHdlIHdhbnQgdG8gcmVqZWN0IGFsbAogICAgICAgICAgLy8gdW5leHBlY3RlZCBmb3Jtcy4KCiAgICAgICAgICAvLyBXZSBzcGxpdCB0aGUgZmlyc3Qgc3RhZ2UgaW50byA0IHJlZ2V4cCBvcGVyYXRpb25zIGluIG9yZGVyIHRvIHdvcmsgYXJvdW5kCiAgICAgICAgICAvLyBjcmlwcGxpbmcgaW5lZmZpY2llbmNpZXMgaW4gSUUncyBhbmQgU2FmYXJpJ3MgcmVnZXhwIGVuZ2luZXMuIEZpcnN0IHdlCiAgICAgICAgICAvLyByZXBsYWNlIGFsbCBiYWNrc2xhc2ggcGFpcnMgd2l0aCAnQCcgKGEgbm9uLUpTT04gY2hhcmFjdGVyKS4gU2Vjb25kLCB3ZQogICAgICAgICAgLy8gcmVwbGFjZSBhbGwgc2ltcGxlIHZhbHVlIHRva2VucyB3aXRoICddJyBjaGFyYWN0ZXJzLiBUaGlyZCwgd2UgZGVsZXRlIGFsbAogICAgICAgICAgLy8gb3BlbiBicmFja2V0cyB0aGF0IGZvbGxvdyBhIGNvbG9uIG9yIGNvbW1hIG9yIHRoYXQgYmVnaW4gdGhlIHRleHQuIEZpbmFsbHksCiAgICAgICAgICAvLyB3ZSBsb29rIHRvIHNlZSB0aGF0IHRoZSByZW1haW5pbmcgY2hhcmFjdGVycyBhcmUgb25seSB3aGl0ZXNwYWNlIG9yICddJyBvcgogICAgICAgICAgLy8gJywnIG9yICc6JyBvciAneycgb3IgJ30nLiBJZiB0aGF0IGlzIHNvLCB0aGVuIHRoZSB0ZXh0IGlzIHNhZmUgZm9yIGV2YWwuCgogICAgICAgICAgaWYgKC9eW1xdLDp7fVxzXSokLy50ZXN0KHRleHQucmVwbGFjZSgvXFxbIlxcXC9iZm5ydHVdL2csICdAJykucmVwbGFjZSgvIlteIlxcXG5ccl0qInx0cnVlfGZhbHNlfG51bGx8LT9cZCsoPzpcLlxkKik/KD86W2VFXVsrXC1dP1xkKyk/L2csICddJykucmVwbGFjZSgvKD86Xnw6fCwpKD86XHMqXFspKy9nLCAnJykpKSB7CgogICAgICAgICAgICAvLyBJbiB0aGUgc2Vjb25kIHN0YWdlIHdlIHVzZSB0aGUgZXZhbCBmdW5jdGlvbiB0byBjb21waWxlIHRoZSB0ZXh0IGludG8gYQogICAgICAgICAgICAvLyBKYXZhU2NyaXB0IHN0cnVjdHVyZS4gVGhlICd7JyBvcGVyYXRvciBpcyBzdWJqZWN0IHRvIGEgc3ludGFjdGljIGFtYmlndWl0eQogICAgICAgICAgICAvLyBpbiBKYXZhU2NyaXB0OiBpdCBjYW4gYmVnaW4gYSBibG9jayBvciBhbiBvYmplY3QgbGl0ZXJhbC4gV2Ugd3JhcCB0aGUgdGV4dAogICAgICAgICAgICAvLyBpbiBwYXJlbnMgdG8gZWxpbWluYXRlIHRoZSBhbWJpZ3VpdHkuCgogICAgICAgICAgICBqID0gZXZhbCgnKCcgKyB0ZXh0ICsgJyknKTsKCiAgICAgICAgICAgIC8vIEluIHRoZSBvcHRpb25hbCB0aGlyZCBzdGFnZSwgd2UgcmVjdXJzaXZlbHkgd2FsayB0aGUgbmV3IHN0cnVjdHVyZSwgcGFzc2luZwogICAgICAgICAgICAvLyBlYWNoIG5hbWUvdmFsdWUgcGFpciB0byBhIHJldml2ZXIgZnVuY3Rpb24gZm9yIHBvc3NpYmxlIHRyYW5zZm9ybWF0aW9uLgoKICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiByZXZpdmVyID09PSAnZnVuY3Rpb24nID8KICAgICAgICAgICAgICB3YWxrKHsKICAgICAgICAgICAgICAgICcnOiBqCiAgICAgICAgICAgICAgfSwgJycpIDogajsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBJZiB0aGUgdGV4dCBpcyBub3QgSlNPTiBwYXJzZWFibGUsIHRoZW4gYSBTeW50YXhFcnJvciBpcyB0aHJvd24uCgogICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdKU09OLnBhcnNlJyk7CiAgICAgICAgfSwKCiAgICAgICAgcXVvdGU6IHF1b3RlCiAgICAgIH07CiAgICB9KCk7CiAgfQoKICAvL2pzb24gZW5kCgogIC8vcGVyc2lzdC1taW4gc3RhcnQKCiAgKGZ1bmN0aW9uKCkgewogICAgaWYgKHdpbmRvdy5nb29nbGUgJiYgZ29vZ2xlLmdlYXJzKQogICAgICByZXR1cm47CiAgICB2YXIgRiA9IG51bGw7CiAgICBpZiAodHlwZW9mIEdlYXJzRmFjdG9yeSAhPSAndW5kZWZpbmVkJykgewogICAgICBGID0gbmV3IEdlYXJzRmFjdG9yeSgpOwogICAgfSBlbHNlIHsKICAgICAgdHJ5IHsKICAgICAgICBGID0gbmV3IEFjdGl2ZVhPYmplY3QoJ0dlYXJzLkZhY3RvcnknKTsKICAgICAgICBpZiAoRi5nZXRCdWlsZEluZm8oKS5pbmRleE9mKCdpZV9tb2JpbGUnKSAhPSAtMSkKICAgICAgICAgIEYucHJpdmF0ZVNldEdsb2JhbE9iamVjdCh0aGlzKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGlmICgodHlwZW9mIG5hdmlnYXRvci5taW1lVHlwZXMgIT0gJ3VuZGVmaW5lZCcpICYmIG5hdmlnYXRvci5taW1lVHlwZXNbImFwcGxpY2F0aW9uL3gtZ29vZ2xlZ2VhcnMiXSkgewogICAgICAgICAgRiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9iamVjdCIpOwogICAgICAgICAgRi5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgICAgRi53aWR0aCA9IDA7CiAgICAgICAgICBGLmhlaWdodCA9IDA7CiAgICAgICAgICBGLnR5cGUgPSAiYXBwbGljYXRpb24veC1nb29nbGVnZWFycyI7CiAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoRik7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAoIUYpCiAgICAgIHJldHVybjsKICAgIGlmICghd2luZG93Lmdvb2dsZSkKICAgICAgZ29vZ2xlID0ge307CiAgICBpZiAoIWdvb2dsZS5nZWFycykKICAgICAgZ29vZ2xlLmdlYXJzID0gewogICAgICAgIGZhY3Rvcnk6IEYKICAgICAgfTsKICB9KSgpOwogIFBlcnNpc3QgPSAoZnVuY3Rpb24oKSB7CiAgICB2YXIgVkVSU0lPTiA9ICcwLjIuMCcsCiAgICAgIFAsIEIsIGVzYywgaW5pdCwgZW1wdHksIGVjOwogICAgZWMgPSAoZnVuY3Rpb24oKSB7CiAgICAgIHZhciBFUE9DSCA9ICdUaHUsIDAxLUphbi0xOTcwIDAwOjAwOjAxIEdNVCcsCiAgICAgICAgUkFUSU8gPSAxMDAwICogNjAgKiA2MCAqIDI0LAogICAgICAgIEtFWVMgPSBbJ2V4cGlyZXMnLCAncGF0aCcsICdkb21haW4nXSwKICAgICAgICBlc2MgPSBlc2NhcGUsCiAgICAgICAgdW4gPSB1bmVzY2FwZSwKICAgICAgICBkb2MgPSBkb2N1bWVudCwKICAgICAgICBtZTsKICAgICAgdmFyIGdldF9ub3cgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgciA9IG5ldyBEYXRlKCk7CiAgICAgICAgci5zZXRUaW1lKHIuZ2V0VGltZSgpKTsKICAgICAgICByZXR1cm4gcjsKICAgICAgfQogICAgICB2YXIgY29va2lmeSA9IGZ1bmN0aW9uKGNfa2V5LCBjX3ZhbCkgewogICAgICAgIHZhciBpLCBrZXksIHZhbCwgciA9IFtdLAogICAgICAgICAgb3B0ID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyKSA/IGFyZ3VtZW50c1syXSA6IHt9OwogICAgICAgIHIucHVzaChlc2MoY19rZXkpICsgJz0nICsgZXNjKGNfdmFsKSk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IEtFWVMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGtleSA9IEtFWVNbaV07CiAgICAgICAgICBpZiAodmFsID0gb3B0W2tleV0pCiAgICAgICAgICAgIHIucHVzaChrZXkgKyAnPScgKyB2YWwpOwogICAgICAgIH0KICAgICAgICBpZiAob3B0LnNlY3VyZSkKICAgICAgICAgIHIucHVzaCgnc2VjdXJlJyk7CiAgICAgICAgcmV0dXJuIHIuam9pbignOyAnKTsKICAgICAgfQogICAgICB2YXIgYWxpdmUgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgayA9ICdfX0VDX1RFU1RfXycsCiAgICAgICAgICB2ID0gbmV3IERhdGUoKTsKICAgICAgICB2ID0gdi50b0dNVFN0cmluZygpOwogICAgICAgIHRoaXMuc2V0KGssIHYpOwogICAgICAgIHRoaXMuZW5hYmxlZCA9ICh0aGlzLnJlbW92ZShrKSA9PSB2KTsKICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVkOwogICAgICB9CiAgICAgIG1lID0gewogICAgICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWwpIHsKICAgICAgICAgIHZhciBvcHQgPSAoYXJndW1lbnRzLmxlbmd0aCA+IDIpID8gYXJndW1lbnRzWzJdIDoge30sIG5vdyA9IGdldF9ub3coKSwKICAgICAgICAgICAgZXhwaXJlX2F0LCBjZmcgPSB7fTsKICAgICAgICAgIGlmIChvcHQuZXhwaXJlcykgewogICAgICAgICAgICBvcHQuZXhwaXJlcyAqPSBSQVRJTzsKICAgICAgICAgICAgY2ZnLmV4cGlyZXMgPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpICsgb3B0LmV4cGlyZXMpOwogICAgICAgICAgICBjZmcuZXhwaXJlcyA9IGNmZy5leHBpcmVzLnRvR01UU3RyaW5nKCk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIga2V5cyA9IFsncGF0aCcsICdkb21haW4nLCAnc2VjdXJlJ107CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykKICAgICAgICAgICAgaWYgKG9wdFtrZXlzW2ldXSkKICAgICAgICAgICAgICBjZmdba2V5c1tpXV0gPSBvcHRba2V5c1tpXV07CiAgICAgICAgICB2YXIgciA9IGNvb2tpZnkoa2V5LCB2YWwsIGNmZyk7CiAgICAgICAgICBkb2MuY29va2llID0gcjsKICAgICAgICAgIHJldHVybiB2YWw7CiAgICAgICAgfSwKICAgICAgICBoYXM6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAga2V5ID0gZXNjKGtleSk7CiAgICAgICAgICB2YXIgYyA9IGRvYy5jb29raWUsCiAgICAgICAgICAgIG9mcyA9IGMuaW5kZXhPZihrZXkgKyAnPScpLAogICAgICAgICAgICBsZW4gPSBvZnMgKyBrZXkubGVuZ3RoICsgMSwKICAgICAgICAgICAgc3ViID0gYy5zdWJzdHJpbmcoMCwga2V5Lmxlbmd0aCk7CiAgICAgICAgICByZXR1cm4gKCghb2ZzICYmIGtleSAhPSBzdWIpIHx8IG9mcyA8IDApID8gZmFsc2UgOiB0cnVlOwogICAgICAgIH0sCiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgIGtleSA9IGVzYyhrZXkpOwogICAgICAgICAgdmFyIGMgPSBkb2MuY29va2llLAogICAgICAgICAgICBvZnMgPSBjLmluZGV4T2Yoa2V5ICsgJz0nKSwKICAgICAgICAgICAgbGVuID0gb2ZzICsga2V5Lmxlbmd0aCArIDEsCiAgICAgICAgICAgIHN1YiA9IGMuc3Vic3RyaW5nKDAsIGtleS5sZW5ndGgpLAogICAgICAgICAgICBlbmQ7CiAgICAgICAgICBpZiAoKCFvZnMgJiYga2V5ICE9IHN1YikgfHwgb2ZzIDwgMCkKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICBlbmQgPSBjLmluZGV4T2YoJzsnLCBsZW4pOwogICAgICAgICAgaWYgKGVuZCA8IDApCiAgICAgICAgICAgIGVuZCA9IGMubGVuZ3RoOwogICAgICAgICAgcmV0dXJuIHVuKGMuc3Vic3RyaW5nKGxlbiwgZW5kKSk7CiAgICAgICAgfSwKICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGspIHsKICAgICAgICAgIHZhciByID0gbWUuZ2V0KGspLAogICAgICAgICAgICBvcHQgPSB7CiAgICAgICAgICAgICAgZXhwaXJlczogRVBPQ0gKICAgICAgICAgICAgfTsKICAgICAgICAgIGRvYy5jb29raWUgPSBjb29raWZ5KGssICcnLCBvcHQpOwogICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgfSwKICAgICAgICBrZXlzOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBjID0gZG9jLmNvb2tpZSwKICAgICAgICAgICAgcHMgPSBjLnNwbGl0KCc7ICcpLAogICAgICAgICAgICBpLCBwLCByID0gW107CiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgcCA9IHBzW2ldLnNwbGl0KCc9Jyk7CiAgICAgICAgICAgIHIucHVzaCh1bihwWzBdKSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gcjsKICAgICAgICB9LAogICAgICAgIGFsbDogZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgYyA9IGRvYy5jb29raWUsCiAgICAgICAgICAgIHBzID0gYy5zcGxpdCgnOyAnKSwKICAgICAgICAgICAgaSwgcCwgciA9IFtdOwogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHAgPSBwc1tpXS5zcGxpdCgnPScpOwogICAgICAgICAgICByLnB1c2goW3VuKHBbMF0pLCB1bihwWzFdKV0pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgfSwKICAgICAgICB2ZXJzaW9uOiAnMC4yLjEnLAogICAgICAgIGVuYWJsZWQ6IGZhbHNlCiAgICAgIH07CiAgICAgIG1lLmVuYWJsZWQgPSBhbGl2ZS5jYWxsKG1lKTsKICAgICAgcmV0dXJuIG1lOwogICAgfSgpKTsKICAgIHZhciBpbmRleF9vZiA9IChmdW5jdGlvbigpIHsKICAgICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKQogICAgICAgIHJldHVybiBmdW5jdGlvbihhcnksIHZhbCkgewogICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYXJ5LCB2YWwpOwogICAgICAgIH07CiAgICAgIGVsc2UKICAgICAgICByZXR1cm4gZnVuY3Rpb24oYXJ5LCB2YWwpIHsKICAgICAgICAgIHZhciBpLCBsOwogICAgICAgICAgZm9yIChpID0gMCwgbCA9IGFyeS5sZW5ndGg7IGkgPCBsOyBpKyspCiAgICAgICAgICAgIGlmIChhcnlbaV0gPT0gdmFsKQogICAgICAgICAgICAgIHJldHVybiBpOwogICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH07CiAgICB9KSgpOwogICAgZW1wdHkgPSBmdW5jdGlvbigpIHt9OwogICAgZXNjID0gZnVuY3Rpb24oc3RyKSB7CiAgICAgIHJldHVybiAnUFMnICsgc3RyLnJlcGxhY2UoL18vZywgJ19fJykucmVwbGFjZSgvIC9nLCAnX3MnKTsKICAgIH07CiAgICBDID0gewogICAgICBzZWFyY2hfb3JkZXI6IFsnbG9jYWxzdG9yYWdlJywgJ3doYXR3Z19kYicsICdnbG9iYWxzdG9yYWdlJywgJ2dlYXJzJywgJ2llJywgJ2ZsYXNoJywgJ2Nvb2tpZSddLAogICAgICBuYW1lX3JlOiAvXlthLXpdW2EtejAtOV8gLV0rJC9pLAogICAgICBtZXRob2RzOiBbJ2luaXQnLCAnZ2V0JywgJ3NldCcsICdyZW1vdmUnLCAnbG9hZCcsICdzYXZlJ10sCiAgICAgIHNxbDogewogICAgICAgIHZlcnNpb246ICcxJywKICAgICAgICBjcmVhdGU6ICJDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBwZXJzaXN0X2RhdGEgKGsgVEVYVCBVTklRVUUgTk9UIE5VTEwgUFJJTUFSWSBLRVksIHYgVEVYVCBOT1QgTlVMTCkiLAogICAgICAgIGdldDogIlNFTEVDVCB2IEZST00gcGVyc2lzdF9kYXRhIFdIRVJFIGsgPSA/IiwKICAgICAgICBzZXQ6ICJJTlNFUlQgSU5UTyBwZXJzaXN0X2RhdGEoaywgdikgVkFMVUVTICg/LCA/KSIsCiAgICAgICAgcmVtb3ZlOiAiREVMRVRFIEZST00gcGVyc2lzdF9kYXRhIFdIRVJFIGsgPSA/IgogICAgICB9LAogICAgICBmbGFzaDogewogICAgICAgIGRpdl9pZDogJ19wZXJzaXN0X2ZsYXNoX3dyYXAnLAogICAgICAgIGlkOiAnX3BlcnNpc3RfZmxhc2gnLAogICAgICAgIHBhdGg6ICdwZXJzaXN0LnN3ZicsCiAgICAgICAgc2l6ZTogewogICAgICAgICAgdzogMSwKICAgICAgICAgIGg6IDEKICAgICAgICB9LAogICAgICAgIGFyZ3M6IHsKICAgICAgICAgIGF1dG9zdGFydDogdHJ1ZQogICAgICAgIH0KICAgICAgfQogICAgfTsKICAgIEIgPSB7CiAgICAgIGdlYXJzOiB7CiAgICAgICAgc2l6ZTogLTEsCiAgICAgICAgdGVzdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICByZXR1cm4gKHdpbmRvdy5nb29nbGUgJiYgd2luZG93Lmdvb2dsZS5nZWFycykgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KCiAgICAgICAgfSwKICAgICAgICBtZXRob2RzOiB7CiAgICAgICAgICB0cmFuc2FjdGlvbjogZnVuY3Rpb24oZm4pIHsKICAgICAgICAgICAgdmFyIGRiID0gdGhpcy5kYjsKICAgICAgICAgICAgZGIuZXhlY3V0ZSgnQkVHSU4nKS5jbG9zZSgpOwogICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGRiKTsKICAgICAgICAgICAgZGIuZXhlY3V0ZSgnQ09NTUlUJykuY2xvc2UoKTsKICAgICAgICAgIH0sCiAgICAgICAgICBpbml0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGRiOwogICAgICAgICAgICBkYiA9IHRoaXMuZGIgPSBnb29nbGUuZ2VhcnMuZmFjdG9yeS5jcmVhdGUoJ2JldGEuZGF0YWJhc2UnKTsKICAgICAgICAgICAgZGIub3Blbihlc2ModGhpcy5uYW1lKSk7CiAgICAgICAgICAgIGRiLmV4ZWN1dGUoQy5zcWwuY3JlYXRlKS5jbG9zZSgpOwogICAgICAgICAgfSwKICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHIsIHNxbCA9IEMuc3FsLmdldDsKICAgICAgICAgICAgaWYgKCFmbikKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb24oZnVuY3Rpb24odCkgewogICAgICAgICAgICAgIHZhciBpc192YWxpZCwgdmFsOwogICAgICAgICAgICAgIHIgPSB0LmV4ZWN1dGUoc3FsLCBba2V5XSk7CiAgICAgICAgICAgICAgaXNfdmFsaWQgPSByLmlzVmFsaWRSb3coKTsKICAgICAgICAgICAgICB2YWwgPSBpc192YWxpZCA/IHIuZmllbGQoMCkgOiBudWxsOwogICAgICAgICAgICAgIHIuY2xvc2UoKTsKICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIGlzX3ZhbGlkLCB2YWwpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0sCiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsLCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHJtX3NxbCA9IEMuc3FsLnJlbW92ZSwKICAgICAgICAgICAgICBzcWwgPSBDLnNxbC5zZXQsCiAgICAgICAgICAgICAgcjsKICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgdC5leGVjdXRlKHJtX3NxbCwgW2tleV0pLmNsb3NlKCk7CiAgICAgICAgICAgICAgdC5leGVjdXRlKHNxbCwgW2tleSwgdmFsXSkuY2xvc2UoKTsKICAgICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIHRydWUsIHZhbCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIGdldF9zcWwgPSBDLnNxbC5nZXQ7CiAgICAgICAgICAgIHNxbCA9IEMuc3FsLnJlbW92ZSwgciwgdmFsID0gbnVsbCwgaXNfdmFsaWQgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgaWYgKGZuKSB7CiAgICAgICAgICAgICAgICByID0gdC5leGVjdXRlKGdldF9zcWwsIFtrZXldKTsKICAgICAgICAgICAgICAgIGlzX3ZhbGlkID0gci5pc1ZhbGlkUm93KCk7CiAgICAgICAgICAgICAgICB2YWwgPSBpc192YWxpZCA/IHIuZmllbGQoMCkgOiBudWxsOwogICAgICAgICAgICAgICAgci5jbG9zZSgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoIWZuIHx8IGlzX3ZhbGlkKSB7CiAgICAgICAgICAgICAgICB0LmV4ZWN1dGUoc3FsLCBba2V5XSkuY2xvc2UoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCBpc192YWxpZCwgdmFsKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICB3aGF0d2dfZGI6IHsKICAgICAgICBzaXplOiAyMDAgKiAxMDI0LAogICAgICAgIHRlc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIG5hbWUgPSAnUGVyc2lzdEpTIFRlc3QnLAogICAgICAgICAgICAgIGRlc2MgPSAnUGVyc2lzdGVudCBkYXRhYmFzZSB0ZXN0Lic7CiAgICAgICAgICAgIGlmICghd2luZG93Lm9wZW5EYXRhYmFzZSkKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGlmICghd2luZG93Lm9wZW5EYXRhYmFzZShuYW1lLCBDLnNxbC52ZXJzaW9uLCBkZXNjLCBCLndoYXR3Z19kYi5zaXplKSkKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAgdHJhbnNhY3Rpb246IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5kYl9jcmVhdGVkKSB7CiAgICAgICAgICAgICAgdGhpcy5kYi50cmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICB0LmV4ZWN1dGVTcWwoQy5zcWwuY3JlYXRlLCBbXSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuZGJfY3JlYXRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9LCBlbXB0eSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5kYi50cmFuc2FjdGlvbihmbik7CiAgICAgICAgICB9LAogICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuZGIgPSBvcGVuRGF0YWJhc2UodGhpcy5uYW1lLCBDLnNxbC52ZXJzaW9uLCB0aGlzLm8uYWJvdXQgfHwgKCJQZXJzaXN0ZW50IHN0b3JhZ2UgZm9yICIgKyB0aGlzLm5hbWUpLCB0aGlzLm8uc2l6ZSB8fCBCLndoYXR3Z19kYi5zaXplKTsKICAgICAgICAgIH0sCiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSwgZm4sIHNjb3BlKSB7CiAgICAgICAgICAgIHZhciBzcWwgPSBDLnNxbC5nZXQ7CiAgICAgICAgICAgIGlmICghZm4pCiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICBzY29wZSA9IHNjb3BlIHx8IHRoaXM7CiAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb24oZnVuY3Rpb24odCkgewogICAgICAgICAgICAgIHQuZXhlY3V0ZVNxbChzcWwsIFtrZXldLCBmdW5jdGlvbih0LCByKSB7CiAgICAgICAgICAgICAgICBpZiAoci5yb3dzLmxlbmd0aCA+IDApCiAgICAgICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUsIHRydWUsIHIucm93cy5pdGVtKDApWyd2J10pOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlLCBmYWxzZSwgbnVsbCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWwsIGZuLCBzY29wZSkgewogICAgICAgICAgICB2YXIgcm1fc3FsID0gQy5zcWwucmVtb3ZlLAogICAgICAgICAgICAgIHNxbCA9IEMuc3FsLnNldDsKICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgdC5leGVjdXRlU3FsKHJtX3NxbCwgW2tleV0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdC5leGVjdXRlU3FsKHNxbCwgW2tleSwgdmFsXSwgZnVuY3Rpb24odCwgcikgewogICAgICAgICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB0cnVlLCB2YWwpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gdmFsOwogICAgICAgICAgfSwKICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIGdldF9zcWwgPSBDLnNxbC5nZXQ7CiAgICAgICAgICAgIHNxbCA9IEMuc3FsLnJlbW92ZTsKICAgICAgICAgICAgdGhpcy50cmFuc2FjdGlvbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgaWYgKGZuKSB7CiAgICAgICAgICAgICAgICB0LmV4ZWN1dGVTcWwoZ2V0X3NxbCwgW2tleV0sIGZ1bmN0aW9uKHQsIHIpIHsKICAgICAgICAgICAgICAgICAgaWYgKHIucm93cy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHIucm93cy5pdGVtKDApWyd2J107CiAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlU3FsKHNxbCwgW2tleV0sIGZ1bmN0aW9uKHQsIHIpIHsKICAgICAgICAgICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdHJ1ZSwgdmFsKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIGZhbHNlLCBudWxsKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHQuZXhlY3V0ZVNxbChzcWwsIFtrZXldKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgZ2xvYmFsc3RvcmFnZTogewogICAgICAgIHNpemU6IDUgKiAxMDI0ICogMTAyNCwKICAgICAgICB0ZXN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZ2xvYmFsU3RvcmFnZSA/IHRydWUgOiBmYWxzZTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAga2V5OiBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgICAgcmV0dXJuIGVzYyh0aGlzLm5hbWUpICsgZXNjKGtleSk7CiAgICAgICAgICB9LAogICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFsZXJ0KCdkb21haW4gPSAnICsgdGhpcy5vLmRvbWFpbik7CiAgICAgICAgICAgIHRoaXMuc3RvcmUgPSBnbG9iYWxTdG9yYWdlW3RoaXMuby5kb21haW5dOwogICAgICAgICAgfSwKICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAga2V5ID0gdGhpcy5rZXkoa2V5KTsKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdHJ1ZSwgdGhpcy5zdG9yZS5nZXRJdGVtKGtleSkpOwogICAgICAgICAgfSwKICAgICAgICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWwsIGZuLCBzY29wZSkgewogICAgICAgICAgICBrZXkgPSB0aGlzLmtleShrZXkpOwogICAgICAgICAgICB0aGlzLnN0b3JlLnNldEl0ZW0oa2V5LCB2YWwpOwogICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB0cnVlLCB2YWwpOwogICAgICAgICAgfSwKICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHZhbDsKICAgICAgICAgICAga2V5ID0gdGhpcy5rZXkoa2V5KTsKICAgICAgICAgICAgdmFsID0gdGhpcy5zdG9yZVtrZXldOwogICAgICAgICAgICB0aGlzLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KTsKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgKHZhbCAhPT0gbnVsbCksIHZhbCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBsb2NhbHN0b3JhZ2U6IHsKICAgICAgICBzaXplOiAtMSwKICAgICAgICB0ZXN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAga2V5OiBmdW5jdGlvbihrZXkpIHsKICAgICAgICAgICAgcmV0dXJuIGVzYyh0aGlzLm5hbWUpICsgZXNjKGtleSk7CiAgICAgICAgICB9LAogICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRoaXMuc3RvcmUgPSBsb2NhbFN0b3JhZ2U7CiAgICAgICAgICB9LAogICAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXksIGZuLCBzY29wZSkgewogICAgICAgICAgICBrZXkgPSB0aGlzLmtleShrZXkpOwogICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB0cnVlLCB0aGlzLnN0b3JlLmdldEl0ZW0oa2V5KSk7CiAgICAgICAgICB9LAogICAgICAgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbCwgZm4sIHNjb3BlKSB7CiAgICAgICAgICAgIGtleSA9IHRoaXMua2V5KGtleSk7CiAgICAgICAgICAgIHRoaXMuc3RvcmUuc2V0SXRlbShrZXksIHZhbCk7CiAgICAgICAgICAgIGlmIChmbikKICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIHRydWUsIHZhbCk7CiAgICAgICAgICB9LAogICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXksIGZuLCBzY29wZSkgewogICAgICAgICAgICB2YXIgdmFsOwogICAgICAgICAgICBrZXkgPSB0aGlzLmtleShrZXkpOwogICAgICAgICAgICB2YWwgPSB0aGlzLnN0b3JlLmdldEl0ZW0oa2V5KTsKICAgICAgICAgICAgdGhpcy5zdG9yZS5yZW1vdmVJdGVtKGtleSk7CiAgICAgICAgICAgIGlmIChmbikKICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsICh2YWwgIT09IG51bGwpLCB2YWwpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgaWU6IHsKICAgICAgICBwcmVmaXg6ICdfcGVyc2lzdF9kYXRhLScsCiAgICAgICAgc2l6ZTogNjQgKiAxMDI0LAogICAgICAgIHRlc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5BY3RpdmVYT2JqZWN0ID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgbWFrZV91c2VyZGF0YTogZnVuY3Rpb24oaWQpIHsKICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgZWwuaWQgPSBpZDsKICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICBlbC5hZGRCZWhhdmlvcignI2RlZmF1bHQjdXNlcmRhdGEnKTsKICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpOwogICAgICAgICAgcmV0dXJuIGVsOwogICAgICAgIH0sCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBpZCA9IEIuaWUucHJlZml4ICsgZXNjKHRoaXMubmFtZSk7CiAgICAgICAgICAgIHRoaXMuZWwgPSBCLmllLm1ha2VfdXNlcmRhdGEoaWQpOwogICAgICAgICAgICBpZiAodGhpcy5vLmRlZmVyKQogICAgICAgICAgICAgIHRoaXMubG9hZCgpOwogICAgICAgICAgfSwKICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHZhbDsKICAgICAgICAgICAga2V5ID0gZXNjKGtleSk7CiAgICAgICAgICAgIGlmICghdGhpcy5vLmRlZmVyKQogICAgICAgICAgICAgIHRoaXMubG9hZCgpOwogICAgICAgICAgICB2YWwgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShrZXkpOwogICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB2YWwgPyB0cnVlIDogZmFsc2UsIHZhbCk7CiAgICAgICAgICB9LAogICAgICAgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbCwgZm4sIHNjb3BlKSB7CiAgICAgICAgICAgIGtleSA9IGVzYyhrZXkpOwogICAgICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZShrZXksIHZhbCk7CiAgICAgICAgICAgIGlmICghdGhpcy5vLmRlZmVyKQogICAgICAgICAgICAgIHRoaXMuc2F2ZSgpOwogICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB0cnVlLCB2YWwpOwogICAgICAgICAgfSwKICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5LCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHZhbDsKICAgICAgICAgICAga2V5ID0gZXNjKGtleSk7CiAgICAgICAgICAgIGlmICghdGhpcy5vLmRlZmVyKQogICAgICAgICAgICAgIHRoaXMubG9hZCgpOwogICAgICAgICAgICB2YWwgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShrZXkpOwogICAgICAgICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpOwogICAgICAgICAgICBpZiAoIXRoaXMuby5kZWZlcikKICAgICAgICAgICAgICB0aGlzLnNhdmUoKTsKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdmFsID8gdHJ1ZSA6IGZhbHNlLCB2YWwpOwogICAgICAgICAgfSwKICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0aGlzLmVsLmxvYWQoZXNjKHRoaXMubmFtZSkpOwogICAgICAgICAgfSwKICAgICAgICAgIHNhdmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0aGlzLmVsLnNhdmUoZXNjKHRoaXMubmFtZSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgY29va2llOiB7CiAgICAgICAgZGVsaW06ICc6JywKICAgICAgICBzaXplOiA0MDAwLAogICAgICAgIHRlc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIFAuQ29va2llLmVuYWJsZWQgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KCiAgICAgICAgfSwKICAgICAgICBtZXRob2RzOiB7CiAgICAgICAgICBrZXk6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgQi5jb29raWUuZGVsaW0gKyBrZXk7CiAgICAgICAgICB9LAogICAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXksIGZuLCBzY29wZSkgewogICAgICAgICAgICB2YXIgdmFsOwogICAgICAgICAgICBrZXkgPSB0aGlzLmtleShrZXkpOwogICAgICAgICAgICB2YWwgPSBlYy5nZXQoa2V5KTsKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdmFsICE9IG51bGwsIHZhbCk7CiAgICAgICAgICB9LAogICAgICAgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbCwgZm4sIHNjb3BlKSB7CiAgICAgICAgICAgIGtleSA9IHRoaXMua2V5KGtleSk7CiAgICAgICAgICAgIGVjLnNldChrZXksIHZhbCwgdGhpcy5vKTsKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdHJ1ZSwgdmFsKTsKICAgICAgICAgIH0sCiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSwgdmFsLCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIHZhbDsKICAgICAgICAgICAga2V5ID0gdGhpcy5rZXkoa2V5KTsKICAgICAgICAgICAgdmFsID0gZWMucmVtb3ZlKGtleSkKICAgICAgICAgICAgaWYgKGZuKQogICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUgfHwgdGhpcywgdmFsICE9IG51bGwsIHZhbCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBmbGFzaDogewogICAgICAgIHRlc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKCFkZWNvbmNlcHQgfHwgIWRlY29uY2VwdC5TV0ZPYmplY3RVdGlsKQogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgdmFyIG1ham9yID0gZGVjb25jZXB0LlNXRk9iamVjdFV0aWwuZ2V0UGxheWVyVmVyc2lvbigpLm1ham9yOwogICAgICAgICAgICByZXR1cm4gKG1ham9yID49IDgpID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghQi5mbGFzaC5lbCkgewogICAgICAgICAgICAgIHZhciBvLCBrZXksIGVsLCBjZmcgPSBDLmZsYXNoOwogICAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgZWwuaWQgPSBjZmcuZGl2X2lkOwogICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpOwogICAgICAgICAgICAgIG8gPSBuZXcgZGVjb25jZXB0LlNXRk9iamVjdCh0aGlzLm8uc3dmX3BhdGggfHwgY2ZnLnBhdGgsIGNmZy5pZCwgY2ZnLnNpemUudywgY2ZnLnNpemUuaCwgJzgnKTsKICAgICAgICAgICAgICBmb3IgKGtleSBpbiBjZmcuYXJncykKICAgICAgICAgICAgICAgIG8uYWRkVmFyaWFibGUoa2V5LCBjZmcuYXJnc1trZXldKTsKICAgICAgICAgICAgICBvLndyaXRlKGVsKTsKICAgICAgICAgICAgICBCLmZsYXNoLmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2ZnLmlkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmVsID0gQi5mbGFzaC5lbDsKICAgICAgICAgIH0sCiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSwgZm4sIHNjb3BlKSB7CiAgICAgICAgICAgIHZhciB2YWw7CiAgICAgICAgICAgIGtleSA9IGVzYyhrZXkpOwogICAgICAgICAgICB2YWwgPSB0aGlzLmVsLmdldCh0aGlzLm5hbWUsIGtleSk7CiAgICAgICAgICAgIGlmIChmbikKICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIHZhbCAhPT0gbnVsbCwgdmFsKTsKICAgICAgICAgIH0sCiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsLCBmbiwgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIG9sZF92YWw7CiAgICAgICAgICAgIGtleSA9IGVzYyhrZXkpOwogICAgICAgICAgICBvbGRfdmFsID0gdGhpcy5lbC5zZXQodGhpcy5uYW1lLCBrZXksIHZhbCk7CiAgICAgICAgICAgIGlmIChmbikKICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlIHx8IHRoaXMsIHRydWUsIHZhbCk7CiAgICAgICAgICB9LAogICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXksIGZuLCBzY29wZSkgewogICAgICAgICAgICB2YXIgdmFsOwogICAgICAgICAgICBrZXkgPSBlc2Moa2V5KTsKICAgICAgICAgICAgdmFsID0gdGhpcy5lbC5yZW1vdmUodGhpcy5uYW1lLCBrZXkpOwogICAgICAgICAgICBpZiAoZm4pCiAgICAgICAgICAgICAgZm4uY2FsbChzY29wZSB8fCB0aGlzLCB0cnVlLCB2YWwpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfTsKICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBpLCBsLCBiLCBrZXksIGZucyA9IEMubWV0aG9kcywKICAgICAgICBrZXlzID0gQy5zZWFyY2hfb3JkZXI7CiAgICAgIGZvciAoaSA9IDAsIGwgPSBmbnMubGVuZ3RoOyBpIDwgbDsgaSsrKQogICAgICAgIFAuU3RvcmUucHJvdG90eXBlW2Zuc1tpXV0gPSBlbXB0eTsKICAgICAgUC50eXBlID0gbnVsbDsKICAgICAgUC5zaXplID0gLTE7CiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgIVAudHlwZSAmJiBpIDwgbDsgaSsrKSB7CiAgICAgICAgYiA9IEJba2V5c1tpXV07CiAgICAgICAgaWYgKGIudGVzdCgpKSB7CiAgICAgICAgICBQLnR5cGUgPSBrZXlzW2ldOwogICAgICAgICAgUC5zaXplID0gYi5zaXplOwogICAgICAgICAgZm9yIChrZXkgaW4gYi5tZXRob2RzKQogICAgICAgICAgICBQLlN0b3JlLnByb3RvdHlwZVtrZXldID0gYi5tZXRob2RzW2tleV07CiAgICAgICAgfQogICAgICB9CiAgICAgIFAuX2luaXQgPSB0cnVlOwogICAgfTsKICAgIFAgPSB7CiAgICAgIFZFUlNJT046IFZFUlNJT04sCiAgICAgIHR5cGU6IG51bGwsCiAgICAgIHNpemU6IDAsCiAgICAgIGFkZDogZnVuY3Rpb24obykgewogICAgICAgIEJbby5pZF0gPSBvOwogICAgICAgIEMuc2VhcmNoX29yZGVyID0gW28uaWRdLmNvbmNhdChDLnNlYXJjaF9vcmRlcik7CiAgICAgICAgaW5pdCgpOwogICAgICB9LAogICAgICByZW1vdmU6IGZ1bmN0aW9uKGlkKSB7CiAgICAgICAgdmFyIG9mcyA9IGluZGV4X29mKEMuc2VhcmNoX29yZGVyLCBpZCk7CiAgICAgICAgaWYgKG9mcyA8IDApCiAgICAgICAgICByZXR1cm47CiAgICAgICAgQy5zZWFyY2hfb3JkZXIuc3BsaWNlKG9mcywgMSk7CiAgICAgICAgZGVsZXRlIEJbaWRdOwogICAgICAgIGluaXQoKTsKICAgICAgfSwKICAgICAgQ29va2llOiBlYywKICAgICAgU3RvcmU6IGZ1bmN0aW9uKG5hbWUsIG8pIHsKICAgICAgICBpZiAoIUMubmFtZV9yZS5leGVjKG5hbWUpKQogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIG5hbWUiKTsKICAgICAgICBpZiAoIVAudHlwZSkKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTm8gc3VpdGFibGUgc3RvcmFnZSBmb3VuZCIpOwogICAgICAgIG8gPSBvIHx8IHt9OwogICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgby5kb21haW4gPSBvLmRvbWFpbiB8fCBsb2NhdGlvbi5ob3N0IHx8ICdsb2NhbGhvc3QnOwogICAgICAgIG8uZG9tYWluID0gby5kb21haW4ucmVwbGFjZSgvOlxkKyQvLCAnJykKICAgICAgICB0aGlzLm8gPSBvOwogICAgICAgIG8uZXhwaXJlcyA9IG8uZXhwaXJlcyB8fCAzNjUgKiAyOwogICAgICAgIG8ucGF0aCA9IG8ucGF0aCB8fCAnLyc7CiAgICAgICAgdGhpcy5pbml0KCk7CiAgICAgIH0KICAgIH07CiAgICBpbml0KCk7CiAgICByZXR1cm4gUDsKICB9KSgpOwogIC8vcGVyc2lzdC1taW4gZW5kCgogIC8vc3dmb2JqZWN0LW1pbiBzdGFydAoKICBpZiAodHlwZW9mIGRlY29uY2VwdCA9PSAidW5kZWZpbmVkIikgdmFyIGRlY29uY2VwdCA9IG5ldyBPYmplY3QoKTsKICBpZiAodHlwZW9mIGRlY29uY2VwdC51dGlsID09ICJ1bmRlZmluZWQiKSBkZWNvbmNlcHQudXRpbCA9IG5ldyBPYmplY3QoKTsKICBpZiAodHlwZW9mIGRlY29uY2VwdC5TV0ZPYmplY3RVdGlsID09ICJ1bmRlZmluZWQiKSBkZWNvbmNlcHQuU1dGT2JqZWN0VXRpbCA9IG5ldyBPYmplY3QoKTsKICBkZWNvbmNlcHQuU1dGT2JqZWN0ID0gZnVuY3Rpb24oc3dmLCBpZCwgdywgaCwgdmVyLCBjLCBxdWFsaXR5LCB4aVJlZGlyZWN0VXJsLCByZWRpcmVjdFVybCwgZGV0ZWN0S2V5KSB7CiAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMuREVURUNUX0tFWSA9IGRldGVjdEtleSA/IGRldGVjdEtleSA6ICdkZXRlY3RmbGFzaCc7CiAgICB0aGlzLnNraXBEZXRlY3QgPSBkZWNvbmNlcHQudXRpbC5nZXRSZXF1ZXN0UGFyYW1ldGVyKHRoaXMuREVURUNUX0tFWSk7CiAgICB0aGlzLnBhcmFtcyA9IG5ldyBPYmplY3QoKTsKICAgIHRoaXMudmFyaWFibGVzID0gbmV3IE9iamVjdCgpOwogICAgdGhpcy5hdHRyaWJ1dGVzID0gbmV3IEFycmF5KCk7CiAgICBpZiAoc3dmKSB7CiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdzd2YnLCBzd2YpOwogICAgfQogICAgaWYgKGlkKSB7CiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTsKICAgIH0KICAgIGlmICh3KSB7CiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHcpOwogICAgfQogICAgaWYgKGgpIHsKICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGgpOwogICAgfQogICAgaWYgKHZlcikgewogICAgICB0aGlzLnNldEF0dHJpYnV0ZSgndmVyc2lvbicsIG5ldyBkZWNvbmNlcHQuUGxheWVyVmVyc2lvbih2ZXIudG9TdHJpbmcoKS5zcGxpdCgiLiIpKSk7CiAgICB9CiAgICB0aGlzLmluc3RhbGxlZFZlciA9IGRlY29uY2VwdC5TV0ZPYmplY3RVdGlsLmdldFBsYXllclZlcnNpb24oKTsKICAgIGlmICghd2luZG93Lm9wZXJhICYmIGRvY3VtZW50LmFsbCAmJiB0aGlzLmluc3RhbGxlZFZlci5tYWpvciA+IDcpIHsKICAgICAgZGVjb25jZXB0LlNXRk9iamVjdC5kb1ByZXBVbmxvYWQgPSB0cnVlOwogICAgfQogICAgaWYgKGMpIHsKICAgICAgdGhpcy5hZGRQYXJhbSgnYmdjb2xvcicsIGMpOwogICAgfQogICAgdmFyIHEgPSBxdWFsaXR5ID8gcXVhbGl0eSA6ICdoaWdoJzsKICAgIHRoaXMuYWRkUGFyYW0oJ3F1YWxpdHknLCBxKTsKICAgIHRoaXMuc2V0QXR0cmlidXRlKCd1c2VFeHByZXNzSW5zdGFsbCcsIGZhbHNlKTsKICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkb0V4cHJlc3NJbnN0YWxsJywgZmFsc2UpOwogICAgdmFyIHhpciA9ICh4aVJlZGlyZWN0VXJsKSA/IHhpUmVkaXJlY3RVcmwgOiB3aW5kb3cubG9jYXRpb247CiAgICB0aGlzLnNldEF0dHJpYnV0ZSgneGlSZWRpcmVjdFVybCcsIHhpcik7CiAgICB0aGlzLnNldEF0dHJpYnV0ZSgncmVkaXJlY3RVcmwnLCAnJyk7CiAgICBpZiAocmVkaXJlY3RVcmwpIHsKICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3JlZGlyZWN0VXJsJywgcmVkaXJlY3RVcmwpOwogICAgfQogIH0KICBkZWNvbmNlcHQuU1dGT2JqZWN0LnByb3RvdHlwZSA9IHsKICAgIHVzZUV4cHJlc3NJbnN0YWxsOiBmdW5jdGlvbihwYXRoKSB7CiAgICAgIHRoaXMueGlTV0ZQYXRoID0gIXBhdGggPyAiZXhwcmVzc2luc3RhbGwuc3dmIiA6IHBhdGg7CiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd1c2VFeHByZXNzSW5zdGFsbCcsIHRydWUpOwogICAgfSwKICAgIHNldEF0dHJpYnV0ZTogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHsKICAgICAgdGhpcy5hdHRyaWJ1dGVzW25hbWVdID0gdmFsdWU7CiAgICB9LAogICAgZ2V0QXR0cmlidXRlOiBmdW5jdGlvbihuYW1lKSB7CiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07CiAgICB9LAogICAgYWRkUGFyYW06IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7CiAgICAgIHRoaXMucGFyYW1zW25hbWVdID0gdmFsdWU7CiAgICB9LAogICAgZ2V0UGFyYW1zOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMucGFyYW1zOwogICAgfSwKICAgIGFkZFZhcmlhYmxlOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgICB0aGlzLnZhcmlhYmxlc1tuYW1lXSA9IHZhbHVlOwogICAgfSwKICAgIGdldFZhcmlhYmxlOiBmdW5jdGlvbihuYW1lKSB7CiAgICAgIHJldHVybiB0aGlzLnZhcmlhYmxlc1tuYW1lXTsKICAgIH0sCiAgICBnZXRWYXJpYWJsZXM6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy52YXJpYWJsZXM7CiAgICB9LAogICAgZ2V0VmFyaWFibGVQYWlyczogZnVuY3Rpb24oKSB7CiAgICAgIHZhciB2YXJpYWJsZVBhaXJzID0gbmV3IEFycmF5KCk7CiAgICAgIHZhciBrZXk7CiAgICAgIHZhciB2YXJpYWJsZXMgPSB0aGlzLmdldFZhcmlhYmxlcygpOwogICAgICBmb3IgKGtleSBpbiB2YXJpYWJsZXMpIHsKICAgICAgICB2YXJpYWJsZVBhaXJzLnB1c2goa2V5ICsgIj0iICsgdmFyaWFibGVzW2tleV0pOwogICAgICB9CiAgICAgIHJldHVybiB2YXJpYWJsZVBhaXJzOwogICAgfSwKICAgIGdldFNXRkhUTUw6IGZ1bmN0aW9uKCkgewogICAgICB2YXIgc3dmTm9kZSA9ICIiOwogICAgICBpZiAobmF2aWdhdG9yLnBsdWdpbnMgJiYgbmF2aWdhdG9yLm1pbWVUeXBlcyAmJiBuYXZpZ2F0b3IubWltZVR5cGVzLmxlbmd0aCkgewogICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgiZG9FeHByZXNzSW5zdGFsbCIpKSB7CiAgICAgICAgICB0aGlzLmFkZFZhcmlhYmxlKCJNTXBsYXllclR5cGUiLCAiUGx1Z0luIik7CiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnc3dmJywgdGhpcy54aVNXRlBhdGgpOwogICAgICAgIH0KICAgICAgICBzd2ZOb2RlID0gJzxlbWJlZCB0eXBlPSJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCIgc3JjPSInICsgdGhpcy5nZXRBdHRyaWJ1dGUoJ3N3ZicpICsgJyIgd2lkdGg9IicgKyB0aGlzLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSArICciIGhlaWdodD0iJyArIHRoaXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSArICciJzsKICAgICAgICBzd2ZOb2RlICs9ICcgaWQ9IicgKyB0aGlzLmdldEF0dHJpYnV0ZSgnaWQnKSArICciIG5hbWU9IicgKyB0aGlzLmdldEF0dHJpYnV0ZSgnaWQnKSArICciICc7CiAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMuZ2V0UGFyYW1zKCk7CiAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmFtcykgewogICAgICAgICAgc3dmTm9kZSArPSBba2V5XSArICc9IicgKyBwYXJhbXNba2V5XSArICciICc7CiAgICAgICAgfQogICAgICAgIHZhciBwYWlycyA9IHRoaXMuZ2V0VmFyaWFibGVQYWlycygpLmpvaW4oIiYiKTsKICAgICAgICBpZiAocGFpcnMubGVuZ3RoID4gMCkgewogICAgICAgICAgc3dmTm9kZSArPSAnZmxhc2h2YXJzPSInICsgcGFpcnMgKyAnIic7CiAgICAgICAgfQogICAgICAgIHN3Zk5vZGUgKz0gJy8+JzsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodGhpcy5nZXRBdHRyaWJ1dGUoImRvRXhwcmVzc0luc3RhbGwiKSkgewogICAgICAgICAgdGhpcy5hZGRWYXJpYWJsZSgiTU1wbGF5ZXJUeXBlIiwgIkFjdGl2ZVgiKTsKICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdzd2YnLCB0aGlzLnhpU1dGUGF0aCk7CiAgICAgICAgfQogICAgICAgIHN3Zk5vZGUgPSAnPG9iamVjdCBpZD0iJyArIHRoaXMuZ2V0QXR0cmlidXRlKCdpZCcpICsgJyIgY2xhc3NpZD0iY2xzaWQ6RDI3Q0RCNkUtQUU2RC0xMWNmLTk2QjgtNDQ0NTUzNTQwMDAwIiB3aWR0aD0iJyArIHRoaXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpICsgJyIgaGVpZ2h0PSInICsgdGhpcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpICsgJyI+JzsKICAgICAgICBzd2ZOb2RlICs9ICc8cGFyYW0gbmFtZT0ibW92aWUiIHZhbHVlPSInICsgdGhpcy5nZXRBdHRyaWJ1dGUoJ3N3ZicpICsgJyIgLz4nOwogICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLmdldFBhcmFtcygpOwogICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMpIHsKICAgICAgICAgIHN3Zk5vZGUgKz0gJzxwYXJhbSBuYW1lPSInICsga2V5ICsgJyIgdmFsdWU9IicgKyBwYXJhbXNba2V5XSArICciIC8+JzsKICAgICAgICB9CiAgICAgICAgdmFyIHBhaXJzID0gdGhpcy5nZXRWYXJpYWJsZVBhaXJzKCkuam9pbigiJiIpOwogICAgICAgIGlmIChwYWlycy5sZW5ndGggPiAwKSB7CiAgICAgICAgICBzd2ZOb2RlICs9ICc8cGFyYW0gbmFtZT0iZmxhc2h2YXJzIiB2YWx1ZT0iJyArIHBhaXJzICsgJyIgLz4nOwogICAgICAgIH0KICAgICAgICBzd2ZOb2RlICs9ICI8L29iamVjdD4iOwogICAgICB9CiAgICAgIHJldHVybiBzd2ZOb2RlOwogICAgfSwKICAgIHdyaXRlOiBmdW5jdGlvbihlbGVtZW50SWQpIHsKICAgICAgaWYgKHRoaXMuZ2V0QXR0cmlidXRlKCd1c2VFeHByZXNzSW5zdGFsbCcpKSB7CiAgICAgICAgdmFyIGV4cHJlc3NJbnN0YWxsUmVxVmVyID0gbmV3IGRlY29uY2VwdC5QbGF5ZXJWZXJzaW9uKFs2LCAwLCA2NV0pOwogICAgICAgIGlmICh0aGlzLmluc3RhbGxlZFZlci52ZXJzaW9uSXNWYWxpZChleHByZXNzSW5zdGFsbFJlcVZlcikgJiYgIXRoaXMuaW5zdGFsbGVkVmVyLnZlcnNpb25Jc1ZhbGlkKHRoaXMuZ2V0QXR0cmlidXRlKCd2ZXJzaW9uJykpKSB7CiAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZG9FeHByZXNzSW5zdGFsbCcsIHRydWUpOwogICAgICAgICAgdGhpcy5hZGRWYXJpYWJsZSgiTU1yZWRpcmVjdFVSTCIsIGVzY2FwZSh0aGlzLmdldEF0dHJpYnV0ZSgneGlSZWRpcmVjdFVybCcpKSk7CiAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IGRvY3VtZW50LnRpdGxlLnNsaWNlKDAsIDQ3KSArICIgLSBGbGFzaCBQbGF5ZXIgSW5zdGFsbGF0aW9uIjsKICAgICAgICAgIHRoaXMuYWRkVmFyaWFibGUoIk1NZG9jdGl0bGUiLCBkb2N1bWVudC50aXRsZSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICh0aGlzLnNraXBEZXRlY3QgfHwgdGhpcy5nZXRBdHRyaWJ1dGUoJ2RvRXhwcmVzc0luc3RhbGwnKSB8fCB0aGlzLmluc3RhbGxlZFZlci52ZXJzaW9uSXNWYWxpZCh0aGlzLmdldEF0dHJpYnV0ZSgndmVyc2lvbicpKSkgewogICAgICAgIHZhciBuID0gKHR5cGVvZiBlbGVtZW50SWQgPT0gJ3N0cmluZycpID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudElkKSA6IGVsZW1lbnRJZDsKICAgICAgICBuLmlubmVySFRNTCA9IHRoaXMuZ2V0U1dGSFRNTCgpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSgncmVkaXJlY3RVcmwnKSAhPSAiIikgewogICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24ucmVwbGFjZSh0aGlzLmdldEF0dHJpYnV0ZSgncmVkaXJlY3RVcmwnKSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CiAgZGVjb25jZXB0LlNXRk9iamVjdFV0aWwuZ2V0UGxheWVyVmVyc2lvbiA9IGZ1bmN0aW9uKCkgewogICAgdmFyIFBsYXllclZlcnNpb24gPSBuZXcgZGVjb25jZXB0LlBsYXllclZlcnNpb24oWzAsIDAsIDBdKTsKICAgIGlmIChuYXZpZ2F0b3IucGx1Z2lucyAmJiBuYXZpZ2F0b3IubWltZVR5cGVzLmxlbmd0aCkgewogICAgICB2YXIgeCA9IG5hdmlnYXRvci5wbHVnaW5zWyJTaG9ja3dhdmUgRmxhc2giXTsKICAgICAgaWYgKHggJiYgeC5kZXNjcmlwdGlvbikgewogICAgICAgIFBsYXllclZlcnNpb24gPSBuZXcgZGVjb25jZXB0LlBsYXllclZlcnNpb24oeC5kZXNjcmlwdGlvbi5yZXBsYWNlKC8oW2EtekEtWl18XHMpKy8sICIiKS5yZXBsYWNlKC8oXHMrcnxccytiWzAtOV0rKS8sICIuIikuc3BsaXQoIi4iKSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIGF4byA9IG5ldyBBY3RpdmVYT2JqZWN0KCJTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaC43Iik7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIGF4byA9IG5ldyBBY3RpdmVYT2JqZWN0KCJTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaC42Iik7CiAgICAgICAgICBQbGF5ZXJWZXJzaW9uID0gbmV3IGRlY29uY2VwdC5QbGF5ZXJWZXJzaW9uKFs2LCAwLCAyMV0pOwogICAgICAgICAgYXhvLkFsbG93U2NyaXB0QWNjZXNzID0gImFsd2F5cyI7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgaWYgKFBsYXllclZlcnNpb24ubWFqb3IgPT0gNikgewogICAgICAgICAgICByZXR1cm4gUGxheWVyVmVyc2lvbjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGF4byA9IG5ldyBBY3RpdmVYT2JqZWN0KCJTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaCIpOwogICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgIH0KICAgICAgaWYgKGF4byAhPSBudWxsKSB7CiAgICAgICAgUGxheWVyVmVyc2lvbiA9IG5ldyBkZWNvbmNlcHQuUGxheWVyVmVyc2lvbihheG8uR2V0VmFyaWFibGUoIiR2ZXJzaW9uIikuc3BsaXQoIiAiKVsxXS5zcGxpdCgiLCIpKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIFBsYXllclZlcnNpb247CiAgfQogIGRlY29uY2VwdC5QbGF5ZXJWZXJzaW9uID0gZnVuY3Rpb24oYXJyVmVyc2lvbikgewogICAgdGhpcy5tYWpvciA9IGFyclZlcnNpb25bMF0gIT0gbnVsbCA/IHBhcnNlSW50KGFyclZlcnNpb25bMF0pIDogMDsKICAgIHRoaXMubWlub3IgPSBhcnJWZXJzaW9uWzFdICE9IG51bGwgPyBwYXJzZUludChhcnJWZXJzaW9uWzFdKSA6IDA7CiAgICB0aGlzLnJldiA9IGFyclZlcnNpb25bMl0gIT0gbnVsbCA/IHBhcnNlSW50KGFyclZlcnNpb25bMl0pIDogMDsKICB9CiAgZGVjb25jZXB0LlBsYXllclZlcnNpb24ucHJvdG90eXBlLnZlcnNpb25Jc1ZhbGlkID0gZnVuY3Rpb24oZnYpIHsKICAgIGlmICh0aGlzLm1ham9yIDwgZnYubWFqb3IpIHJldHVybiBmYWxzZTsKICAgIGlmICh0aGlzLm1ham9yID4gZnYubWFqb3IpIHJldHVybiB0cnVlOwogICAgaWYgKHRoaXMubWlub3IgPCBmdi5taW5vcikgcmV0dXJuIGZhbHNlOwogICAgaWYgKHRoaXMubWlub3IgPiBmdi5taW5vcikgcmV0dXJuIHRydWU7CiAgICBpZiAodGhpcy5yZXYgPCBmdi5yZXYpIHJldHVybiBmYWxzZTsKICAgIHJldHVybiB0cnVlOwogIH0KICBkZWNvbmNlcHQudXRpbCA9IHsKICAgIGdldFJlcXVlc3RQYXJhbWV0ZXI6IGZ1bmN0aW9uKHBhcmFtKSB7CiAgICAgIHZhciBxID0gZG9jdW1lbnQubG9jYXRpb24uc2VhcmNoIHx8IGRvY3VtZW50LmxvY2F0aW9uLmhhc2g7CiAgICAgIGlmIChxKSB7CiAgICAgICAgdmFyIHBhaXJzID0gcS5zdWJzdHJpbmcoMSkuc3BsaXQoIiYiKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBpZiAocGFpcnNbaV0uc3Vic3RyaW5nKDAsIHBhaXJzW2ldLmluZGV4T2YoIj0iKSkgPT0gcGFyYW0pIHsKICAgICAgICAgICAgcmV0dXJuIHBhaXJzW2ldLnN1YnN0cmluZygocGFpcnNbaV0uaW5kZXhPZigiPSIpICsgMSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gIiI7CiAgICB9CiAgfQogIGRlY29uY2VwdC5TV0ZPYmplY3RVdGlsLmNsZWFudXBTV0ZzID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgb2JqZWN0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJPQkpFQ1QiKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykgewogICAgICBvYmplY3RzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgIGZvciAodmFyIHggaW4gb2JqZWN0c1tpXSkgewogICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0c1tpXVt4XSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBvYmplY3RzW2ldW3hdID0gZnVuY3Rpb24oKSB7fTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9CiAgaWYgKGRlY29uY2VwdC5TV0ZPYmplY3QuZG9QcmVwVW5sb2FkKSB7CiAgICBkZWNvbmNlcHQuU1dGT2JqZWN0VXRpbC5wcmVwVW5sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgIF9fZmxhc2hfdW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge307CiAgICAgIF9fZmxhc2hfc2F2ZWRVbmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7fTsKICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCJvbnVubG9hZCIsIGRlY29uY2VwdC5TV0ZPYmplY3RVdGlsLmNsZWFudXBTV0ZzKTsKICAgIH0KICAgIHdpbmRvdy5hdHRhY2hFdmVudCgib25iZWZvcmV1bmxvYWQiLCBkZWNvbmNlcHQuU1dGT2JqZWN0VXRpbC5wcmVwVW5sb2FkKTsKICB9CiAgaWYgKEFycmF5LnByb3RvdHlwZS5wdXNoID09IG51bGwpIHsKICAgIEFycmF5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oaXRlbSkgewogICAgICB0aGlzW3RoaXMubGVuZ3RoXSA9IGl0ZW07CiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDsKICAgIH0KICB9CiAgdmFyIGdldFF1ZXJ5UGFyYW1WYWx1ZSA9IGRlY29uY2VwdC51dGlsLmdldFJlcXVlc3RQYXJhbWV0ZXI7CiAgdmFyIEZsYXNoT2JqZWN0ID0gZGVjb25jZXB0LlNXRk9iamVjdDsKICB2YXIgU1dGT2JqZWN0ID0gZGVjb25jZXB0LlNXRk9iamVjdDsKICAvL3N3Zm9iamVjdC1taW4gZW5kCgogIC8vISEhbGliIGVuZCEhIQoKICB2YXIgJGZoID0gcm9vdC4kZmggfHwge307CiAgaWYgKHR5cGVvZiBmaF9hcHBfcHJvcHMgPT09ICJvYmplY3QiKSB7CiAgICAkZmguYXBwX3Byb3BzID0gZmhfYXBwX3Byb3BzOwogIH0KCiAgJGZoLmxlZ2FjeSA9IHt9OwoKICB2YXIgZGVmYXVsdGFyZ3MgPSB7CiAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHt9LAogICAgZmFpbHVyZTogZnVuY3Rpb24oKSB7fSwKICAgIHBhcmFtczoge30KICB9OwoKICB2YXIgaGFuZGxlYXJncyA9IGZ1bmN0aW9uKGluYXJncywgZGVmYXVsdHBhcmFtcywgYXBwbHl0bykgewogICAgdmFyIG91dGFyZ3MgPSBbbnVsbCwgbnVsbCwgbnVsbF07CiAgICB2YXIgb3JpZ2FyZ3MgPSBbbnVsbCwgbnVsbCwgbnVsbF07CiAgICB2YXIgbnVtYXJncyA9IGluYXJncy5sZW5ndGg7CgogICAgaWYgKDIgPCBudW1hcmdzKSB7CiAgICAgIG9yaWdhcmdzWzBdID0gaW5hcmdzW251bWFyZ3MgLSAzXTsKICAgICAgb3JpZ2FyZ3NbMV0gPSBpbmFyZ3NbbnVtYXJncyAtIDJdOwogICAgICBvcmlnYXJnc1syXSA9IGluYXJnc1tudW1hcmdzIC0gMV07CiAgICB9IGVsc2UgaWYgKDIgPT0gbnVtYXJncykgewogICAgICBvcmlnYXJnc1sxXSA9IGluYXJnc1swXTsKICAgICAgb3JpZ2FyZ3NbMl0gPSBpbmFyZ3NbMV07CiAgICB9IGVsc2UgaWYgKDEgPT0gbnVtYXJncykgewogICAgICBvcmlnYXJnc1syXSA9IGluYXJnc1swXTsKICAgIH0KCiAgICB2YXIgaSA9IDAsCiAgICAgIGogPSAwOwogICAgZm9yICg7IGkgPCAzOyBpKyspIHsKICAgICAgdmFyIGEgPSBvcmlnYXJnc1tpXTsKICAgICAgdmFyIHRhID0gdHlwZW9mIGE7CiAgICAgIC8vY29uc29sZS5sb2coJ2l0ZXIgaTonK2krJyBqOicraisnIHRhOicrdGEpOwogICAgICBpZiAoYSAmJiAwID09IGogJiYgKCdvYmplY3QnID09IHRhIHx8ICdib29sZWFuJyA9PSB0YSkpIHsKICAgICAgICAvL2NvbnNvbGUubG9nKCdvYmplY3QgaTonK2krJyBqOicraisnIHRhOicrdGEpOwogICAgICAgIG91dGFyZ3NbaisrXSA9IGE7CiAgICAgIH0gZWxzZSBpZiAoYSAmJiAnZnVuY3Rpb24nID09IHRhKSB7CiAgICAgICAgaiA9IDAgPT0gaiA/IDEgOiBqOwogICAgICAgIC8vY29uc29sZS5sb2coJ2Z1bmN0aW9uIGk6JytpKycgajonK2orJyB0YTonK3RhKTsKICAgICAgICBvdXRhcmdzW2orK10gPSBhOwogICAgICB9CiAgICB9CgogICAgaWYgKG51bGwgPT0gb3V0YXJnc1swXSkgewogICAgICBvdXRhcmdzWzBdID0gZGVmYXVsdHBhcmFtcyA/IGRlZmF1bHRwYXJhbXMgOiBkZWZhdWx0YXJncy5wYXJhbXM7CiAgICB9IGVsc2UgewogICAgICB2YXIgcGFyYW1zYXJnID0gb3V0YXJnc1swXTsKICAgICAgcGFyYW1zYXJnLl9kZWZhdWx0cyA9IFtdOwogICAgICBmb3IgKHZhciBuIGluIGRlZmF1bHRwYXJhbXMpIHsKICAgICAgICBpZiAoZGVmYXVsdHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShuKSkgewogICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNhcmdbbl0gPT09ICJ1bmRlZmluZWQiKSB7IC8vd2UgZG9uJ3Qgd2FudCB0byB1c2UgIXBhcmFtc2FyZ1tuXSBoZXJlIGJlY2F1c2UgdGhlIHBhcmFtZXRlciBjb3VsZCBleGlzdHMgaW4gdGhlIGFyZ3VtZW50IGFuZCBpdCBjb3VsZCBiZSBmYWxzZQogICAgICAgICAgICBwYXJhbXNhcmdbbl0gPSBkZWZhdWx0cGFyYW1zW25dOwogICAgICAgICAgICBwYXJhbXNhcmcuX2RlZmF1bHRzLnB1c2gobik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgb3V0YXJnc1sxXSA9IG51bGwgPT0gb3V0YXJnc1sxXSA/IGRlZmF1bHRhcmdzLnN1Y2Nlc3MgOiBvdXRhcmdzWzFdOwogICAgb3V0YXJnc1syXSA9IG51bGwgPT0gb3V0YXJnc1syXSA/IGRlZmF1bHRhcmdzLmZhaWx1cmUgOiBvdXRhcmdzWzJdOwoKICAgIGFwcGx5dG8ob3V0YXJnc1swXSwgb3V0YXJnc1sxXSwgb3V0YXJnc1syXSk7CiAgfQoKICB2YXIgZXZlbnRTdXBwb3J0ZWQgPSBmdW5jdGlvbihldmVudCkgewogICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7CiAgICByZXR1cm4gZXZlbnQgaW4gZWxlbWVudCB8fCBlbGVtZW50LnNldEF0dHJpYnV0ZSAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudCwgInJldHVybjsiKSB8fCBmYWxzZTsKICB9CgogIHZhciBfX2lzX3JlYWR5ID0gZmFsc2U7CiAgdmFyIF9fcmVhZHlfbGlzdCA9IFtdOwogIHZhciBfX3JlYWR5X2JvdW5kID0gZmFsc2U7CiAgdmFyIGJveHByZWZpeCA9ICIvYm94L3Nydi8xLjEvIjsKCiAgX2dldEhvc3RQcmVmaXggPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiAkZmguYXBwX3Byb3BzLmhvc3QgKyBib3hwcmVmaXg7CiAgfQoKICB2YXIgX19yZWFkeSA9IGZ1bmN0aW9uKCkgewogICAgaWYgKCFfX2lzX3JlYWR5KSB7CiAgICAgIF9faXNfcmVhZHkgPSB0cnVlOwogICAgICBpZiAoX19yZWFkeV9saXN0KSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHdoaWxlIChfX3JlYWR5X2xpc3RbMF0pIHsKICAgICAgICAgICAgX19yZWFkeV9saXN0LnNoaWZ0KCkuYXBwbHkoZG9jdW1lbnQsIFtdKTsKICAgICAgICAgIH0KCiAgICAgICAgfSBmaW5hbGx5IHsKCiAgICAgICAgfQogICAgICAgIF9fcmVhZHlfbGlzdCA9IG51bGw7CiAgICAgIH0KICAgIH0KICB9OwoKICB2YXIgX19iaW5kX3JlYWR5ID0gZnVuY3Rpb24oKSB7CiAgICBpZiAoX19yZWFkeV9ib3VuZCkgcmV0dXJuOwogICAgX19yZWFkeV9ib3VuZCA9IHRydWU7CgogICAgLy8gTW96aWxsYSwgT3BlcmEgYW5kIHdlYmtpdCBuaWdodGxpZXMgY3VycmVudGx5IHN1cHBvcnQgdGhpcyBldmVudAogICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHsKICAgICAgLy8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFjawogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGFyZ3VtZW50cy5jYWxsZWUsIGZhbHNlKTsKICAgICAgICBfX3JlYWR5KCk7CiAgICAgIH0sIGZhbHNlKTsKCiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgX19yZWFkeSwgZmFsc2UpOwoKICAgICAgLy8gSWYgSUUgZXZlbnQgbW9kZWwgaXMgdXNlZAogICAgfSBlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkgewogICAgICAvLyBlbnN1cmUgZmlyaW5nIGJlZm9yZSBvbmxvYWQsCiAgICAgIC8vIG1heWJlIGxhdGUgYnV0IHNhZmUgYWxzbyBmb3IgaWZyYW1lcwogICAgICBkb2N1bWVudC5hdHRhY2hFdmVudCgib25yZWFkeXN0YXRlY2hhbmdlIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIpIHsKICAgICAgICAgIGRvY3VtZW50LmRldGFjaEV2ZW50KCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCBhcmd1bWVudHMuY2FsbGVlKTsKICAgICAgICAgIF9fcmVhZHkoKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCJvbmxvYWQiLCBfX3JlYWR5KTsKCiAgICAgIC8vIElmIElFIGFuZCBub3QgYW4gaWZyYW1lCiAgICAgIC8vIGNvbnRpbnVhbGx5IGNoZWNrIHRvIHNlZSBpZiB0aGUgZG9jdW1lbnQgaXMgcmVhZHkKICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCAmJiB3aW5kb3cgPT0gd2luZG93LnRvcCkoZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKF9faXNfcmVhZHkpIHJldHVybjsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIC8vIElmIElFIGlzIHVzZWQsIHVzZSB0aGUgdHJpY2sgYnkgRGllZ28gUGVyaW5pCiAgICAgICAgICAvLyBodHRwOi8vamF2YXNjcmlwdC5ud2JveC5jb20vSUVDb250ZW50TG9hZGVkLwogICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKCJsZWZ0Iik7CiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgIHNldFRpbWVvdXQoYXJndW1lbnRzLmNhbGxlZSwgMCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAvLyBhbmQgZXhlY3V0ZSBhbnkgd2FpdGluZyBmdW5jdGlvbnMKICAgICAgICBfX3JlYWR5KCk7CiAgICAgIH0pKCk7CiAgICB9CiAgfTsKCiAgX19iaW5kX3JlYWR5KCk7CgogIC8vIGRlc3RpbmF0aW9uIGZ1bmN0aW9ucwogIHZhciBfbWFwU2NyaXB0TG9hZGVkID0gKHR5cGVvZiBnb29nbGUgIT0gInVuZGVmaW5lZCIpICYmICh0eXBlb2YgZ29vZ2xlLm1hcHMgIT0gInVuZGVmaW5lZCIpICYmICh0eXBlb2YgZ29vZ2xlLm1hcHMuTWFwICE9ICJ1bmRlZmluZWQiKTsKICAvL0NvbnRhaW5zIHRoZSB0YXJnZXQgZWxlbWVudCBhbmQgc3VjY2VzcyBmdW5jdGlvbiBmb3IgJGZoLm1hcCBmdW5jdGlvbnMKICB2YXIgX21hcExvYWRTdWNjZXNzUGFyYW1ldGVycyA9IFtdOwogIC8vRmxhZyB0byBzaG93IGlmIGEgbWFwIHNjcmlwdCBpcyBsb2FkaW5nIG9yIG5vdC4KICB2YXIgX21hcFNjcmlwdExvYWRpbmcgPSBmYWxzZTsgCiAgdmFyIF9sb2FkTWFwU2NyaXB0ID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogICAgdmFyIHByb3RvY29sID0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2w7CiAgICBwcm90b2NvbCA9IChwcm90b2NvbCA9PT0gImh0dHA6IiB8fCBwcm90b2NvbCA9PT0gImh0dHBzOiIpID8gcHJvdG9jb2wgOiAiaHR0cHM6IjsKICAgIHNjcmlwdC5zcmMgPSBwcm90b2NvbCArICIvL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2FwaS9qcz9zZW5zb3I9dHJ1ZSZjYWxsYmFjaz0kZmguX21hcExvYWRlZCI7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgfTsKCiAgdmFyIGF1ZGlvX29iaiA9IG51bGw7CiAgdmFyIGF1ZGlvX2lzX3BsYXlpbmcgPSBmYWxzZTsKCiAgJGZoLl9fZGVzdF9fID0gewogICAgc2VuZDogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBmKCdzZW5kX25vc3VwcG9ydCcpOwogICAgfSwKICAgIG5vdGlmeTogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBmKCdub3RpZnlfbm9zdXBwb3J0Jyk7CiAgICB9LAogICAgY29udGFjdHM6IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgICAgZignY29udGFjdHNfbm9zdXBwb3J0Jyk7CiAgICB9LAogICAgYWNjOiBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICAgIGYoJ2FjY19ub3N1cHBvcnQnKTsKICAgIH0sCiAgICBnZW86IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgICAgZignZ2VvX25vc3VwcG9ydCcpOwogICAgfSwKICAgIGNhbTogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBmKCdjYW1fbm9zdXBwb3J0Jyk7CiAgICB9LAogICAgZGV2aWNlOiBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICAgIGYoJ2RldmljZV9ub3N1cHBvcnQnKTsKICAgIH0sCiAgICBsaXN0ZW46IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgICAgZignbGlzdGVuX25vc3VwcG9ydCcpOwogICAgfSwKICAgIGhhbmRsZXJzOiBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICAgIGYoJ2hhbmRsZXJzX25vX3N1cHBvcnQnKTsKICAgIH0sCiAgICBmaWxlOiBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICAgIGYoJ2ZpbGVfbm9zdXBwb3J0Jyk7CiAgICB9LAogICAgcHVzaDogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBmKCdwdXNoX25vc3VwcG9ydCcpOwogICAgfSwKICAgIGVudjogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBzKHsKICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCwKICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgKICAgICAgfSk7CiAgICB9CgogICAgLAogICAgZGF0YTogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBpZiAoISRmaC5fcGVyc2lzdCkgewogICAgICAgICRmaC5fcGVyc2lzdCA9IG5ldyBQZXJzaXN0LlN0b3JlKCdGSCcgKyAkZmguYXBwX3Byb3BzLmFwcGlkLCB7CiAgICAgICAgICBzd2ZfcGF0aDogJy9zdGF0aWMvYy9zdGFydC9zd2YvcGVyc2lzdC5zd2YnCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmICghcC5rZXkpIHsKICAgICAgICBmKCdkYXRhX25va2V5Jyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYWN0cyA9IHsKICAgICAgICBsb2FkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICRmaC5fcGVyc2lzdC5nZXQocC5rZXksIGZ1bmN0aW9uKG9rLCB2YWwpIHsKICAgICAgICAgICAgb2sgPyBzKHsKICAgICAgICAgICAgICBrZXk6IHAua2V5LAogICAgICAgICAgICAgIHZhbDogdmFsCiAgICAgICAgICAgIH0pIDogcyh7CiAgICAgICAgICAgICAga2V5OiBwLmtleSwKICAgICAgICAgICAgICB2YWw6IG51bGwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIHNhdmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCFwLnZhbCkgewogICAgICAgICAgICBmKCdkYXRhX25vdmFsJyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICRmaC5fcGVyc2lzdC5zZXQocC5rZXksIHAudmFsKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgZignZGF0YV9lcnJvcicsIHt9LCBwKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgcygpOwogICAgICAgIH0sCiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICRmaC5fcGVyc2lzdC5yZW1vdmUocC5rZXksIGZ1bmN0aW9uKG9rLCB2YWwpIHsKICAgICAgICAgICAgb2sgPyBzKHsKICAgICAgICAgICAgICBrZXk6IHAua2V5LAogICAgICAgICAgICAgIHZhbDogdmFsCiAgICAgICAgICAgIH0pIDogcyh7CiAgICAgICAgICAgICAga2V5OiBwLmtleSwKICAgICAgICAgICAgICB2YWw6IG51bGwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH07CgogICAgICBhY3RzW3AuYWN0XSA/IGFjdHNbcC5hY3RdKCkgOiBmKCdkYXRhX2JhZGFjdCcsIHApOwogICAgfQoKICAgICwKICAgIGxvZzogZnVuY3Rpb24ocCwgcywgZikgewogICAgICB0eXBlb2YgY29uc29sZSA9PT0gInVuZGVmaW5lZCIgPyBmKCdsb2dfbm9zdXBwb3J0JykgOiBjb25zb2xlLmxvZyhwLm1lc3NhZ2UpOwogICAgfQoKICAgICwKICAgIG9yaTogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBpZiAodHlwZW9mIHAuYWN0ID09ICJ1bmRlZmluZWQiIHx8IHAuYWN0ID09ICJsaXN0ZW4iKSB7CiAgICAgICAgaWYgKGV2ZW50U3VwcG9ydGVkKCdvbm9yaWVudGF0aW9uY2hhbmdlJykpIHsKICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHMsIGZhbHNlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZignb3JpX25vc3VwcG9ydCcsIHt9LCBwKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAocC5hY3QgPT0gInNldCIpIHsKICAgICAgICBpZiAoIXAudmFsdWUpIHsKICAgICAgICAgIGYoJ29yaV9ub192YWx1ZScsIHt9LCBwKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKHAudmFsdWUgPT0gInBvcnRyYWl0IikgewogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXS5zdHlsZVsnLW1vei10cmFuc2Zvcm0nXSA9ICIiOwogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXS5zdHlsZVsnLXdlYmtpdC10cmFuc2Zvcm0nXSA9ICIiOwogICAgICAgICAgcyh7CiAgICAgICAgICAgIG9yaWVudGF0aW9uOiAncG9ydHJhaXQnCiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXS5zdHlsZVsnLW1vei10cmFuc2Zvcm0nXSA9ICdyb3RhdGUoOTBkZWcpJzsKICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF0uc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtJ10gPSAncm90YXRlKDkwZGVnKSc7CiAgICAgICAgICBzKHsKICAgICAgICAgICAgb3JpZW50YXRpb246ICdsYW5kc2NhcGUnCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZignb3JpX2JhZGFjdCcsIHt9LCBwKTsKICAgICAgfQogICAgfSwKICAgIG1hcDogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBpZiAoIXAudGFyZ2V0KSB7CiAgICAgICAgZignbWFwX25vdGFyZ2V0Jywge30sIHApOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAoIXAubGF0KSB7CiAgICAgICAgZignbWFwX25vbGF0aXR1ZGUnLCB7fSwgcCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmICghcC5sb24pIHsKICAgICAgICBmKCdtYXBfbm9sb2dpdHVkZScsIHt9LCBwKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIHRhcmdldCA9IHAudGFyZ2V0OwogICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gInN0cmluZyIpIHsKICAgICAgICB2YXIgdGFyZ2V0X2RvbSA9IG51bGw7CiAgICAgICAgaWYgKHR5cGVvZiBqUXVlcnkgIT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciBqcV9vYmogPSBqUXVlcnkodGFyZ2V0KTsKICAgICAgICAgICAgaWYgKGpxX29iai5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgdGFyZ2V0X2RvbSA9IGpxX29ialswXTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICB0YXJnZXRfZG9tID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKG51bGwgPT0gdGFyZ2V0X2RvbSkgewogICAgICAgICAgdGFyZ2V0X2RvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldCk7CiAgICAgICAgfQogICAgICAgIHRhcmdldCA9IHRhcmdldF9kb207CiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldCA9PT0gIm9iamVjdCIpIHsKICAgICAgICBpZiAodGFyZ2V0Lm5vZGVUeXBlID09PSAxICYmIHR5cGVvZiB0YXJnZXQubm9kZU5hbWUgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAvLyBBIERPTSBFbGVtZW50LCBkbyBub3RoaW5nCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vQSBqUXVlcnkgbm9kZQogICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0WzBdOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0YXJnZXQgPSBudWxsOwogICAgICB9CgogICAgICBpZiAoIXRhcmdldCkgewogICAgICAgIGYoJ21hcF9ub2NvbnRhaW5lcicsIHt9LCBwKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCgoKCiAgICAgIGlmICghX21hcFNjcmlwdExvYWRlZCkgewoKICAgICAgICAvL1F1ZXVlIHRoZSBzdWNjZXNzIGZ1bmN0aW9uCiAgICAgICAgaWYodHlwZW9mKHMpID09PSAnZnVuY3Rpb24nKXsKICAgICAgICAgICAgX21hcExvYWRTdWNjZXNzUGFyYW1ldGVycy5wdXNoKHt0YXJnZXQ6IHRhcmdldCwgc3VjY2Vzc0Z1bmN0aW9uOiBzLCBtT3B0aW9uczogcH0pOyAgICAKICAgICAgICB9CiAgICAgICAgCgogICAgICAgICRmaC5fbWFwTG9hZGVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBfbWFwU2NyaXB0TG9hZGVkID0gdHJ1ZTsKICAgICAgICAgIHZhciBtYXBMb2FkU3VjY2Vzc1BhcmFtZXRlciA9IF9tYXBMb2FkU3VjY2Vzc1BhcmFtZXRlcnMuc2hpZnQoKTsKCiAgICAgICAgICB3aGlsZSh0eXBlb2YobWFwTG9hZFN1Y2Nlc3NQYXJhbWV0ZXIpICE9PSAndW5kZWZpbmVkJyl7CiAgICAgICAgICAgIHZhciBtT3B0aW9ucyA9IG1hcExvYWRTdWNjZXNzUGFyYW1ldGVyLm1PcHRpb25zOwogICAgICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHt9OwogICAgICAgICAgICBtYXBPcHRpb25zLnpvb20gPSBtT3B0aW9ucy56b29tID8gbU9wdGlvbnMuem9vbSA6IDg7CiAgICAgICAgICAgIG1hcE9wdGlvbnMuY2VudGVyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhtT3B0aW9ucy5sYXQsIG1PcHRpb25zLmxvbik7CiAgICAgICAgICAgIG1hcE9wdGlvbnMubWFwVHlwZUlkID0gZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlJPQURNQVA7CgogICAgICAgICAgICB2YXIgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChtYXBMb2FkU3VjY2Vzc1BhcmFtZXRlci50YXJnZXQsIG1hcE9wdGlvbnMpOwogICAgICAgICAgICBtYXBMb2FkU3VjY2Vzc1BhcmFtZXRlci5zdWNjZXNzRnVuY3Rpb24oe21hcDogbWFwfSk7ICAKICAgICAgICAgICAgbWFwTG9hZFN1Y2Nlc3NQYXJhbWV0ZXIgPSBfbWFwTG9hZFN1Y2Nlc3NQYXJhbWV0ZXJzLnNoaWZ0KCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgaWYoIV9tYXBTY3JpcHRMb2FkaW5nKXsKICAgICAgICAgICAgX21hcFNjcmlwdExvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICBfbG9hZE1hcFNjcmlwdCgpOyAgICAKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy9hZnRlciAyMCBzZWNzLCBpZiB0aGUgbWFwIHNjcmlwdCBpcyBzdGlsbCBub3QgbG9hZGVkLCBydW4gdGhlIGZhaWwgZnVuY3Rpb24KICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKCFfbWFwU2NyaXB0TG9hZGVkKSB7CiAgICAgICAgICAgIGYoJ21hcF90aW1lb3V0Jywge30sIHApOwogICAgICAgICAgfQogICAgICAgIH0sIDIwMDAwKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgbWFwT3B0aW9ucyA9IHt9OwogICAgICAgIG1hcE9wdGlvbnMuem9vbSA9IHAuem9vbSA/IHAuem9vbSA6IDg7CiAgICAgICAgbWFwT3B0aW9ucy5jZW50ZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKHAubGF0LCBwLmxvbik7CiAgICAgICAgbWFwT3B0aW9ucy5tYXBUeXBlSWQgPSBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUDsKICAgICAgICB2YXIgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcCh0YXJnZXQsIG1hcE9wdGlvbnMpOwogICAgICAgIHMoewogICAgICAgICAgbWFwOiBtYXAKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgICwKICAgIGF1ZGlvOiBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICAgIGlmICghYXVkaW9fb2JqID09IG51bGwgJiYgcC5hY3QgPT0gInBsYXkiICYmICghcC5wYXRoIHx8IHAucGF0aCA9PSAiIikpIHsKICAgICAgICBmKCdub19hdWRpb19wYXRoJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciBhY3RzID0gewogICAgICAgICdwbGF5JzogZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAobnVsbCA9PSBhdWRpb19vYmopIHsKICAgICAgICAgICAgYXVkaW9fb2JqID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYXVkaW8iKTsKICAgICAgICAgICAgaWYgKCEoKGF1ZGlvX29iai5wbGF5KSA/IHRydWUgOiBmYWxzZSkpIHsKICAgICAgICAgICAgICBmKCdhdWRpb19ub3Rfc3VwcG9ydCcpOwogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocC50eXBlKSB7CiAgICAgICAgICAgICAgdmFyIGNhbnBsYXkgPSBhdWRpb19vYmouY2FuUGxheVR5cGUocC50eXBlKTsKICAgICAgICAgICAgICBpZiAoY2FucGxheSA9PSAibm8iIHx8IGNhbnBsYXkgPT0gIiIpIHsKICAgICAgICAgICAgICAgIGYoImF1ZGlvX3R5cGVfbm90X3N1cHBvcnRlZCIpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBhdWRpb19vYmouc3JjID0gcC5wYXRoOwogICAgICAgICAgICBpZiAocC5jb250cm9scykgewogICAgICAgICAgICAgIGF1ZGlvX29iai5jb250cm9scyA9ICJjb250cm9scyI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHAuYXV0b3BsYXkpIHsKICAgICAgICAgICAgICBhdWRpb19vYmouYXV0b3BsYXkgPSAiYXV0b3BsYXkiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwLmxvb3ApIHsKICAgICAgICAgICAgICBhdWRpb19vYmoubG9vcCA9ICJsb29wIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGF1ZGlvX29iaik7CiAgICAgICAgICAgIGF1ZGlvX29iai5wbGF5KCk7CiAgICAgICAgICAgIGF1ZGlvX2lzX3BsYXlpbmcgPSB0cnVlOwogICAgICAgICAgICBzKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvL3BsYXlpbmcgYSBuZXcgYXVkaW8KICAgICAgICAgICAgaWYgKHAucGF0aCAmJiAocC5wYXRoICE9IGF1ZGlvX29iai5zcmMpKSB7CiAgICAgICAgICAgICAgaWYgKGF1ZGlvX2lzX3BsYXlpbmcpIHsKICAgICAgICAgICAgICAgIGFjdHNbJ3N0b3AnXSh0cnVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYWN0c1sncGxheSddKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy9yZXN1bWUgdGhlIGV4aXN0aW5nIGF1ZGlvCiAgICAgICAgICAgICAgaWYgKCFhdWRpb19pc19wbGF5aW5nKSB7CiAgICAgICAgICAgICAgICBhdWRpb19vYmoucGxheSgpOwogICAgICAgICAgICAgICAgYXVkaW9faXNfcGxheWluZyA9IHRydWU7CiAgICAgICAgICAgICAgICBzKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgJ3BhdXNlJzogZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAobnVsbCAhPSBhdWRpb19vYmogJiYgYXVkaW9faXNfcGxheWluZykgewogICAgICAgICAgICBpZiAodHlwZW9mIGF1ZGlvX29iai5wYXVzZSA9PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgYXVkaW9fb2JqLnBhdXNlKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGF1ZGlvX29iai5zdG9wID09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICBhdWRpb19vYmouc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGF1ZGlvX2lzX3BsYXlpbmcgPSBmYWxzZTsKICAgICAgICAgICAgcygpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZignbm9fYXVkaW9fcGxheWluZycpOwogICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgICdzdG9wJzogZnVuY3Rpb24obm9jYWxsYmFjaykgewogICAgICAgICAgaWYgKG51bGwgIT0gYXVkaW9fb2JqKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgYXVkaW9fb2JqLnN0b3AgPT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgIGF1ZGlvX29iai5zdG9wKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGF1ZGlvX29iai5wYXVzZSA9PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgYXVkaW9fb2JqLnBhdXNlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhdWRpb19vYmopOwogICAgICAgICAgICBhdWRpb19vYmogPSBudWxsOwogICAgICAgICAgICBhdWRpb19pc19wbGF5aW5nID0gZmFsc2U7CiAgICAgICAgICAgIGlmICghbm9jYWxsYmFjaykgewogICAgICAgICAgICAgIHMoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZignbm9fYXVkaW8nKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGFjdHNbcC5hY3RdID8gYWN0c1twLmFjdF0oKSA6IGYoJ2RhdGFfYmFkYWN0JywgcCk7CiAgICB9CgogICAgLAogICAgd2VidmlldzogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBmKCd3ZWJ2aWV3X25vc3VwcG9ydCcpOwogICAgfSwKCiAgICByZWFkeTogZnVuY3Rpb24ocCwgcywgZikgewogICAgICBfX2JpbmRfcmVhZHkoKTsKICAgICAgaWYgKF9faXNfcmVhZHkpIHsKICAgICAgICBzLmFwcGx5KGRvY3VtZW50LCBbXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgX19yZWFkeV9saXN0LnB1c2gocyk7CiAgICAgIH0KICAgIH0KICB9CgogICRmaC5zZW5kID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywgewogICAgICB0eXBlOiAnZW1haWwnCiAgICB9LCAkZmguX19kZXN0X18uc2VuZCk7CiAgfQoKICAkZmgubm90aWZ5ID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywgewogICAgICB0eXBlOiAndmlicmF0ZScKICAgIH0sICRmaC5fX2Rlc3RfXy5ub3RpZnkpOwogIH0KCiAgJGZoLmNvbnRhY3RzID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywgewogICAgICBhY3Q6ICdsaXN0JwogICAgfSwgJGZoLl9fZGVzdF9fLmNvbnRhY3RzKTsKICB9CgogICRmaC5hY2MgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7CiAgICAgIGFjdDogJ3JlZ2lzdGVyJywKICAgICAgaW50ZXJ2YWw6IDAKICAgIH0sICRmaC5fX2Rlc3RfXy5hY2MpOwogIH0KCiAgJGZoLmdlbyA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHsKICAgICAgYWN0OiAncmVnaXN0ZXInLAogICAgICBpbnRlcnZhbDogMAogICAgfSwgJGZoLl9fZGVzdF9fLmdlbyk7CiAgfQoKICAkZmguY2FtID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywgewogICAgICBhY3Q6ICdwaWN0dXJlJwogICAgfSwgJGZoLl9fZGVzdF9fLmNhbSk7CiAgfQoKICAkZmguZGF0YSA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHsKICAgICAgYWN0OiAnbG9hZCcKICAgIH0sICRmaC5fX2Rlc3RfXy5kYXRhKTsKICB9CgogICRmaC5sb2cgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7CiAgICAgIG1lc3NhZ2U6ICdub25lJwogICAgfSwgJGZoLl9fZGVzdF9fLmxvZyk7CiAgfQoKICAkZmguZGV2aWNlID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywge30sICRmaC5fX2Rlc3RfXy5kZXZpY2UpOwogIH0KCiAgJGZoLmxpc3RlbiA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHsKICAgICAgYWN0OiAnYWRkJwogICAgfSwgJGZoLl9fZGVzdF9fLmxpc3Rlbik7CiAgfQoKICAkZmgub3JpID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywge30sICRmaC5fX2Rlc3RfXy5vcmkpOwogIH0KCiAgJGZoLm1hcCA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHt9LCAkZmguX19kZXN0X18ubWFwKTsKICB9CgogICRmaC5hdWRpbyA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHt9LCAkZmguX19kZXN0X18uYXVkaW8pOwogIH0KCiAgJGZoLndlYnZpZXcgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7fSwgJGZoLl9fZGVzdF9fLndlYnZpZXcpOwogIH0KCiAgJGZoLnJlYWR5ID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywge30sICRmaC5fX2Rlc3RfXy5yZWFkeSk7CiAgfTsKCiAgJGZoLmhhbmRsZXJzID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywgewogICAgICB0eXBlOiAnYmFjaycKICAgIH0sICRmaC5fX2Rlc3RfXy5oYW5kbGVycyk7CiAgfTsKCiAgJGZoLmZpbGUgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7CiAgICAgIGFjdDogJ3VwbG9hZCcKICAgIH0sICRmaC5fX2Rlc3RfXy5maWxlKTsKICB9OwoKICAkZmgucHVzaCA9IGZ1bmN0aW9uKCkgewogICAgaGFuZGxlYXJncyhhcmd1bWVudHMsIHt9LCAkZmguX19kZXN0X18ucHVzaCk7CiAgfTsKCiAgLy8gbmV3IGZ1bmN0aW9ucwogICRmaC5lbnYgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7fSwgZnVuY3Rpb24ocCwgcywgZikgewogICAgICAvLyBmbGF0IHByb3BlcnR5IHNldCAtIG5vIHN1YiBvYmplY3RzIQogICAgICAkZmguX19kZXN0X18uZW52KHt9LCBmdW5jdGlvbihkZXN0RW52KSB7CiAgICAgICAgZGVzdEVudi5hcHBsaWNhdGlvbiA9ICRmaC5hcHBfcHJvcHMuYXBwaWQ7CiAgICAgICAgaWYgKCRmaC5fZ2V0RGV2aWNlSWQpIHsKICAgICAgICAgIGRlc3RFbnYudXVpZCA9ICRmaC5fZ2V0RGV2aWNlSWQoKTsKICAgICAgICB9CiAgICAgICAgZGVzdEVudi5hZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJ3Vua25vd24nOwogICAgICAgIHMoZGVzdEVudik7CiAgICAgIH0pOwogICAgfSk7CiAgfQoKICAkZmguZGV2aWNlID0gZnVuY3Rpb24oKSB7CiAgICBoYW5kbGVhcmdzKGFyZ3VtZW50cywge30sIGZ1bmN0aW9uKHAsIHMsIGYpIHsKCiAgICB9KTsKICB9CgoKICAvLyBkZWZhdWx0czogCiAgLy8gICAge2FjdDonZ2V0J30gLT4ge2dlb2lwOnsuLi59fQogIC8vICBmYWlsdXJlczogZ2VvaXBfYmFkYWN0CiAgLy8KICAkZmguZ2VvaXAgPSBmdW5jdGlvbigpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7CiAgICAgIGFjdDogJ2dldCcKICAgIH0sIGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgICAgaWYgKCdnZXQnID09IHAuYWN0KSB7CiAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICBpbnN0YW5jZTogJGZoLmFwcF9wcm9wcy5hcHBpZCwKICAgICAgICAgIGRvbWFpbjogJGZoLmNsb3VkX3Byb3BzLmRvbWFpbgogICAgICAgIH0KICAgICAgICAkZmguX19hamF4KHsKICAgICAgICAgICJ1cmwiOiBfZ2V0SG9zdFByZWZpeCgpICsgImFjdC93aWQvZ2VvaXAvcmVzb2x2ZSIsCiAgICAgICAgICAidHlwZSI6ICJQT1NUIiwKICAgICAgICAgICJkYXRhIjogSlNPTi5zdHJpbmdpZnkoZGF0YSksCiAgICAgICAgICAic3VjY2VzcyI6IGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0CiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gcmVzLmdlb2lwKSB7CiAgICAgICAgICAgICAgcmVzW25dID0gcmVzWydnZW9pcCddW25dOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHMocmVzKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmKCdnZW9pcF9iYWRhY3QnLCBwKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgJGZoLndlYiA9IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgIGhhbmRsZWFyZ3MoYXJndW1lbnRzLCB7CiAgICAgIG1ldGhvZDogJ0dFVCcKICAgIH0sIGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgICAgaWYgKCFwLnVybCkgewogICAgICAgIGYoJ2JhZF91cmwnKTsKICAgICAgfQoKICAgICAgaWYgKHAuaXNfbG9jYWwpIHsKICAgICAgICAkZmguX19hamF4KHsKICAgICAgICAgIHVybDogcC51cmwsCiAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgIGRhdGFUeXBlOiAiaHRtbCIsCiAgICAgICAgICAvL3hocjogJGZoLnhociwKICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgdmFyIHJlcyA9IHt9OwogICAgICAgICAgICByZXMuc3RhdHVzID0gMjAwOwogICAgICAgICAgICByZXMuYm9keSA9IGRhdGE7CiAgICAgICAgICAgIHMocmVzKTsKICAgICAgICAgIH0sCiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGYoKTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICB9IGVsc2UgewogICAgICAgICRmaC5fX2FqYXgoewogICAgICAgICAgInVybCI6IF9nZXRIb3N0UHJlZml4KCkgKyAiYWN0L3dpZC93ZWIiLAogICAgICAgICAgInR5cGUiOiAiUE9TVCIsCiAgICAgICAgICAiZGF0YSI6IEpTT04uc3RyaW5naWZ5KHApLAogICAgICAgICAgInN1Y2Nlc3MiOiBmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgcyhyZXMpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKICB9OwoKICAkZmguX193ZWJ2aWV3X3dpbiA9IHVuZGVmaW5lZDsKICAkZmguX19kZXN0X18ud2VidmlldyA9IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgIGlmICghKCdhY3QnIGluIHApIHx8IHAuYWN0ID09PSAnb3BlbicpIHsKICAgICAgaWYgKCFwLnVybCkgewogICAgICAgIGYoJ25vX3VybCcpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB2YXIgb2xkX3VybCA9IHAudXJsOwogICAgICAkZmguX193ZWJ2aWV3X3dpbiA9IHdpbmRvdy5vcGVuKHAudXJsLCAnX2JsYW5rJyk7CiAgICAgIHMoIm9wZW5lZCIpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKHAuYWN0ID09PSAnY2xvc2UnKSB7CiAgICAgICAgaWYgKHR5cGVvZiAkZmguX193ZWJ2aWV3X3dpbiAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgJGZoLl9fd2Vidmlld193aW4uY2xvc2UoKTsKICAgICAgICAgICRmaC5fX3dlYnZpZXdfd2luID0gdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgICBzKCJjbG9zZWQiKTsKICAgICAgfQogICAgfQogIH07CgogIGlmICh0eXBlb2Yod2luZG93LlBob25lR2FwKSAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mKHdpbmRvdy5jb3Jkb3ZhKSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICRmaC5fcmVhZHlDYWxsYmFja3MgPSBbXTsKICAgICRmaC5fcmVhZHlTdGF0ZSA9IGZhbHNlOwogICAgJGZoLl9fZGVzdF9fLnJlYWR5ID0gZnVuY3Rpb24ocCwgcywgZikgewogICAgICBpZiAoJGZoLl9yZWFkeVN0YXRlKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHMoKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygiRXJyb3IgZHVyaW5nICRmaC5yZWFkeS4gU2tpcC4gRXJyb3IgPSAiICsgZS5tZXNzYWdlKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJGZoLl9yZWFkeUNhbGxiYWNrcy5wdXNoKHMpOwogICAgICB9CiAgICB9OwogIH0KCiAgJGZoLl9fZGVzdF9fLmdlbyA9IGZ1bmN0aW9uKHAsIHMsIGYpIHsKICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yLmdlb2xvY2F0aW9uICE9ICd1bmRlZmluZWQnKSB7CiAgICAgIGlmICghcC5hY3QgfHwgcC5hY3QgPT0gInJlZ2lzdGVyIikgewogICAgICAgIGlmICgkZmguX19kZXN0X18uX2dlb1dhdGNoZXIpIHsKICAgICAgICAgIGYoJ2dlb19pbnVzZScsIHt9LCBwKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKHAuaW50ZXJ2YWwgPT0gMCkgewogICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihmdW5jdGlvbihwb3NpdGlvbikgewogICAgICAgICAgICB2YXIgY29vcmRzID0gcG9zaXRpb24uY29vcmRzOwogICAgICAgICAgICB2YXIgcmVzZGF0YSA9IHsKICAgICAgICAgICAgICBsb246IGNvb3Jkcy5sb25naXR1ZGUsCiAgICAgICAgICAgICAgbGF0OiBjb29yZHMubGF0aXR1ZGUsCiAgICAgICAgICAgICAgYWx0OiBjb29yZHMuYWx0aXR1ZGUsCiAgICAgICAgICAgICAgYWNjOiBjb29yZHMuYWNjdXJhY3ksCiAgICAgICAgICAgICAgaGVhZDogY29vcmRzLmhlYWRpbmcsCiAgICAgICAgICAgICAgc3BlZWQ6IGNvb3Jkcy5zcGVlZCwKICAgICAgICAgICAgICB3aGVuOiBwb3NpdGlvbi50aW1lc3RhbXAKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcyhyZXNkYXRhKTsKICAgICAgICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBmKCdlcnJvcl9nZW8nLCB7fSwgcCk7CiAgICAgICAgICB9KQogICAgICAgIH07CiAgICAgICAgaWYgKHAuaW50ZXJ2YWwgPiAwKSB7CiAgICAgICAgICB2YXIgaW50ZXJuYWxXYXRjaGVyID0gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24oZnVuY3Rpb24ocG9zaXRpb24pIHsKICAgICAgICAgICAgdmFyIGNvb3JkcyA9IHBvc2l0aW9uLmNvb3JkczsKICAgICAgICAgICAgdmFyIHJlc2RhdGEgPSB7CiAgICAgICAgICAgICAgbG9uOiBjb29yZHMubG9uZ2l0dWRlLAogICAgICAgICAgICAgIGxhdDogY29vcmRzLmxhdGl0dWRlLAogICAgICAgICAgICAgIGFsdDogY29vcmRzLmFsdGl0dWRlLAogICAgICAgICAgICAgIGFjYzogY29vcmRzLmFjY3VyYWN5LAogICAgICAgICAgICAgIGhlYWQ6IGNvb3Jkcy5oZWFkaW5nLAogICAgICAgICAgICAgIHNwZWVkOiBjb29yZHMuc3BlZWQsCiAgICAgICAgICAgICAgd2hlbjogcG9zaXRpb24udGltZXN0YW1wCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHMocmVzZGF0YSk7CiAgICAgICAgICB9LCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZignZXJyb3JfZ2VvJywge30sIHApOwogICAgICAgICAgfSwgewogICAgICAgICAgICBmcmVxdWVuY3k6IHAuaW50ZXJ2YWwKICAgICAgICAgIH0pOwogICAgICAgICAgJGZoLl9fZGVzdF9fLl9nZW9XYXRjaGVyID0gaW50ZXJuYWxXYXRjaGVyOwogICAgICAgIH07CiAgICAgIH0gZWxzZSBpZiAocC5hY3QgPT0gInVucmVnaXN0ZXIiKSB7CiAgICAgICAgaWYgKCRmaC5fX2Rlc3RfXy5fZ2VvV2F0Y2hlcikgewogICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2goJGZoLl9fZGVzdF9fLl9nZW9XYXRjaGVyKTsKICAgICAgICAgICRmaC5fX2Rlc3RfXy5fZ2VvV2F0Y2hlciA9IHVuZGVmaW5lZDsKICAgICAgICB9OwogICAgICAgIHMoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmKCdnZW9fYmFkYWN0Jywge30sIHApOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmKCdnZW9fbm9zdXBwb3J0Jywge30sIHApOwogICAgfQogIH07CgogICRmaC5fX2Rlc3RfXy5hY2MgPSBmdW5jdGlvbihwLCBzLCBmKSB7CiAgICBzKHsKICAgICAgeDogKE1hdGgucmFuZG9tKCkgKiA0KSAtIDIsCiAgICAgIHk6IChNYXRoLnJhbmRvbSgpICogNCkgLSAyLAogICAgICB6OiAoTWF0aC5yYW5kb20oKSAqIDQpIC0gMiwKICAgICAgd2hlbjogbmV3IERhdGUoKS5nZXRUaW1lKCkKICAgIH0pOwogIH0KCiAgcm9vdC4kZmggPSAkZmg7Cgp9KSh0aGlzKTsKLyoqCiAqIEZlZWRIZW5yeSBMaWNlbnNlCiAqLwoKLy9pZiAodHlwZW9mIHdpbmRvdyA9PSJ1bmRlZmluZWQiKXsKLy8gICAgdmFyIHdpbmRvdz17fTsKLy99Ci8vdGhpcyBpcyBhIHBhcnRpYWwganMgZmlsZSB3aGljaCBkZWZpbmVzIHRoZSBzdGFydCBvZiBhcHBmb3JtIFNESyBjbG9zdXJlCihmdW5jdGlvbihfc2NvcGUpewogICAgLy9zdGFydCBtb2R1bGUKCnZhciBhcHBGb3JtID0gZnVuY3Rpb24obW9kdWxlKSB7CiAgbW9kdWxlLmluaXQgPSBpbml0OwoKICBmdW5jdGlvbiBpbml0KHBhcmFtcywgY2IpIHsKICAgIHZhciBkZWYgPSB7CiAgICAgICd1cGRhdGVGb3Jtcyc6IHRydWUKICAgIH07CiAgICBpZiAodHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykgewogICAgICBjYiA9IHBhcmFtczsKICAgIH0gZWxzZSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMpIHsKICAgICAgICBkZWZba2V5XSA9IHBhcmFtc1trZXldOwogICAgICB9CiAgICB9CgoKICAgIC8vaW5pdCBjb25maWcgbW9kdWxlCiAgICB2YXIgY29uZmlnID0gZGVmLmNvbmZpZyB8fCB7fTsKICAgIGFwcEZvcm0uY29uZmlnID0gYXBwRm9ybS5tb2RlbHMuY29uZmlnOwogICAgYXBwRm9ybS5jb25maWcuaW5pdChjb25maWcsIGZ1bmN0aW9uKGVycikgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJGb3JtIGNvbmZpZyBsb2FkaW5nIGVycm9yOiAiLCBlcnIpOwogICAgICB9CiAgICAgIGFwcEZvcm0ubW9kZWxzLmxvZy5sb2FkTG9jYWwoZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgaWYoZXJyKXsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIkVycm9yIGxvYWRpbmcgY29uZmlnIGZyb20gbG9jYWwgc3RvcmFnZSIpOwogICAgICAgIH0KCiAgICAgICAgYXBwRm9ybS5tb2RlbHMuc3VibWlzc2lvbnMubG9hZExvY2FsKGZ1bmN0aW9uKGVycil7CiAgICAgICAgICBpZihlcnIpewogICAgICAgICAgICBjb25zb2xlLmVycm9yKCJFcnJvciBsb2FkaW5nIHN1Ym1pc3Npb25zIik7CiAgICAgICAgICB9CgogICAgICAgICAgLy9Mb2FkaW5nIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSB1cGxvYWRNYW5hZ2VyIGZvciBhbnkgdXBsb2FkIHRhc2tzIHRoYXQgYXJlIHN0aWxsIGluIHByb2dyZXNzLgogICAgICAgICAgYXBwRm9ybS5tb2RlbHMudXBsb2FkTWFuYWdlci5sb2FkTG9jYWwoZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiVXBsb2FkIE1hbmFnZXIgbG9hZGVkIGZyb20gbWVtb3J5LiIpOwogICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBsb2FkaW5nIHVwbG9hZCBtYW5hZ2VyIGZyb20gbWVtb3J5ICIsIGVycik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vU3RhcnRpbmcgYW55IHVwbG9hZHMgdGhhdCBhcmUgcXVldWVkCiAgICAgICAgICAgIGFwcEZvcm0ubW9kZWxzLnVwbG9hZE1hbmFnZXIuc3RhcnQoKTsKICAgICAgICAgICAgLy9pbml0IGZvcm1zIG1vZHVsZQogICAgICAgICAgICAkZmguZm9ybXMubG9nLmwoIlJlZnJlc2hpbmcgVGhlbWUuIik7CiAgICAgICAgICAgIGFwcEZvcm0ubW9kZWxzLnRoZW1lLnJlZnJlc2godHJ1ZSwgZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciByZWZyZXNoaW5nIHRoZW1lICIsIGVycik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChkZWYudXBkYXRlRm9ybXMgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cubCgiUmVmcmVzaGluZyBGb3Jtcy4iKTsKICAgICAgICAgICAgICAgIGFwcEZvcm0ubW9kZWxzLmZvcm1zLnJlZnJlc2godHJ1ZSwgZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHJlZnJlc2hpbmcgZm9ybXM6ICIsIGVycik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgY2IoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjYigpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgIH0pOwogICAgfSk7CiAgfQogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybSB8fCB7fSk7CmFwcEZvcm0udXRpbHMgPSBmdW5jdGlvbihtb2R1bGUpIHsKICBtb2R1bGUuZXh0ZW5kID0gZXh0ZW5kOwogIG1vZHVsZS5sb2NhbElkID0gbG9jYWxJZDsKICBtb2R1bGUubWQ1ID0gbWQ1OwogIG1vZHVsZS5nZXRUaW1lID0gZ2V0VGltZTsKICBtb2R1bGUuc2VuZD1zZW5kOwogIG1vZHVsZS5pc1Bob25lR2FwID0gaXNQaG9uZUdhcDsKCiAgZnVuY3Rpb24gaXNQaG9uZUdhcCgpIHsKICAgIHJldHVybiAodHlwZW9mIHdpbmRvdy5QaG9uZWdhcCAhPT0gInVuZGVmaW5lZCIgfHwgdHlwZW9mIHdpbmRvdy5jb3Jkb3ZhICE9PSAidW5kZWZpbmVkIik7CiAgfQoKICBmdW5jdGlvbiBleHRlbmQoY2hpbGQsIHBhcmVudCkgewoKICAgIGlmIChwYXJlbnQuY29uc3RydWN0b3IgJiYgcGFyZW50LmNvbnN0cnVjdG9yID09PSBGdW5jdGlvbikgewogICAgICBmb3IgKHZhciBta2V5IGluIHBhcmVudC5wcm90b3R5cGUpIHsKICAgICAgICBjaGlsZC5wcm90b3R5cGVbbWtleV0gPSBwYXJlbnQucHJvdG90eXBlW21rZXldOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7CiAgICAgICAgY2hpbGQucHJvdG90eXBlW2tleV0gPSBwYXJlbnRba2V5XTsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gZ2V0VGltZSh0aW1lem9uZU9mZnNldCkgewogICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7CiAgICBpZiAodGltZXpvbmVPZmZzZXQpIHsKICAgICAgcmV0dXJuIG5vdy5nZXRUaW1lem9uZU9mZnNldCgpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIG5vdzsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGxvY2FsSWQobW9kZWwpIHsKICAgIHZhciBwcm9wcyA9IG1vZGVsLmdldFByb3BzKCk7CiAgICB2YXIgX2lkID0gcHJvcHMuX2lkOwogICAgdmFyIF90eXBlID0gcHJvcHMuX3R5cGU7CiAgICB2YXIgdHMgPSBnZXRUaW1lKCkuZ2V0VGltZSgpOwogICAgaWYgKF9pZCAmJiBfdHlwZSkgewogICAgICByZXR1cm4gX2lkICsgJ18nICsgX3R5cGUgKyAnXycgKyB0czsKICAgIH0gZWxzZSBpZiAoX2lkKSB7CiAgICAgIHJldHVybiBfaWQgKyAnXycgKyB0czsKICAgIH0gZWxzZSBpZiAoX3R5cGUpIHsKICAgICAgcmV0dXJuIF90eXBlICsgJ18nICsgdHM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gdHM7CiAgICB9CiAgfQogIC8qKgogICAqIG1kNSBoYXNoIGEgc3RyaW5nCiAgICogQHBhcmFtICB7W3R5cGVdfSAgIHN0ciBbZGVzY3JpcHRpb25dCiAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiICAoZXJyLG1kNXN0cikKICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgIFtkZXNjcmlwdGlvbl0KICAgKi8KICBmdW5jdGlvbiBtZDUoc3RyLCBjYikgewogICAgaWYgKHR5cGVvZiAkZmggIT09ICd1bmRlZmluZWQnICYmICRmaC5oYXNoKSB7CiAgICAgICRmaC5oYXNoKHsKICAgICAgICBhbGdvcml0aG06ICdNRDUnLAogICAgICAgIHRleHQ6IHN0cgogICAgICB9LCBmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5oYXNodmFsdWUpIHsKICAgICAgICAgIGNiKG51bGwsIHJlc3VsdC5oYXNodmFsdWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjYignQ3J5cHRvIGZhaWxlZC4nKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgY2IoJ0NyeXB0byBub3QgZm91bmQnKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHNlbmQocGFyYW1zLGNiKXsKICAgICRmaC5mb3Jtcy5sb2cuZCgiU2VuZGluZyBtYWlsOiAiLCBwYXJhbXMpOwogICAgJGZoLnNlbmQocGFyYW1zLGZ1bmN0aW9uKCl7CiAgICAgIGNiKG51bGwpOwogICAgfSxmdW5jdGlvbihtc2cpewogICAgICBjYihtc2cpOwogICAgfSk7CiAgfQogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS51dGlscyB8fCB7fSk7CgphcHBGb3JtLnV0aWxzID0gZnVuY3Rpb24obW9kdWxlKSB7CiAgICBtb2R1bGUuZmlsZVN5c3RlbSA9IHsKICAgICAgICBpc0ZpbGVTeXN0ZW1BdmFpbGFibGU6IGlzRmlsZVN5c3RlbUF2YWlsYWJsZSwKICAgICAgICBzYXZlOiBzYXZlLAogICAgICAgIHJlbW92ZTogcmVtb3ZlLAogICAgICAgIHJlYWRBc1RleHQ6IHJlYWRBc1RleHQsCiAgICAgICAgcmVhZEFzQmxvYjogcmVhZEFzQmxvYiwKICAgICAgICByZWFkQXNCYXNlNjRFbmNvZGVkOiByZWFkQXNCYXNlNjRFbmNvZGVkLAogICAgICAgIHJlYWRBc0ZpbGU6IHJlYWRBc0ZpbGUsCiAgICAgICAgZmlsZVRvQmFzZTY0OiBmaWxlVG9CYXNlNjQsCiAgICAgICAgZ2V0QmFzZVBhdGg6IGdldEJhc2VQYXRoCiAgICB9OwogICAgdmFyIGZpbGVTeXN0ZW1BdmFpbGFibGUgPSBmYWxzZTsKICAgIHZhciBfcmVxdWVzdEZpbGVTeXN0ZW0gPSBmdW5jdGlvbigpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCJObyBmaWxlIHN5c3RlbSBhdmFpbGFibGUiKTsKICAgIH07CiAgICAvL3BsYWNlaG9sZGVyCiAgICB2YXIgUEVSU0lTVEVOVCA9IDE7CiAgICAvL3BsYWNlaG9sZGVyCiAgICBmdW5jdGlvbiBpc0ZpbGVTeXN0ZW1BdmFpbGFibGUoKSB7CiAgICAgICAgX2NoZWNrRW52KCk7CiAgICAgICAgcmV0dXJuIGZpbGVTeXN0ZW1BdmFpbGFibGU7CiAgICB9CiAgICAvL2NvbnZlcnQgYSBmaWxlIG9iamVjdCB0byBiYXNlNjQgZW5jb2RlZC4KICAgIGZ1bmN0aW9uIGZpbGVUb0Jhc2U2NChmaWxlLCBjYikgewogICAgICAgIGlmICghZmlsZSBpbnN0YW5jZW9mIEZpbGUpIHsKICAgICAgICAgICAgcmV0dXJuIGNiKCdPbmx5IGZpbGUgb2JqZWN0IGNhbiBiZSB1c2VkIGZvciBjb252ZXJ0aW5nJyk7CiAgICAgICAgfQogICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgICB2YXIgdGV4dCA9IGV2dC50YXJnZXQucmVzdWx0OwogICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgdGV4dCk7CiAgICAgICAgfTsKICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7CiAgICB9CgogICAgZnVuY3Rpb24gX2NyZWF0ZUJsb2JPclN0cmluZyhjb250ZW50c3RyKSB7CiAgICAgICAgdmFyIHJldFZhbDsKICAgICAgICBpZiAoYXBwRm9ybS51dGlscy5pc1Bob25lR2FwKCkpIHsgLy8gcGhvbmVnYXAgZmlsZXdyaXRlciB3b3JrcyB3aXRoIHN0cmluZ3MsIGxhdGVyIHZlcnNpb25zIGFsc28gb3JrIHdpdGggYmluYXJ5IGFycmF5cywgYW5kIGlmIHBhc3NlZCBhIGJsb2Igd2lsbCBqdXN0IGNvbnZlcnQgdG8gYmluYXJ5IGFycmF5IGFueXdheQogICAgICAgICAgICByZXRWYWwgPSBjb250ZW50c3RyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciB0YXJnZXRDb250ZW50VHlwZSA9ICd0ZXh0L3BsYWluJzsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldFZhbCA9IG5ldyBCbG9iKFtjb250ZW50c3RyXSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6IHRhcmdldENvbnRlbnRUeXBlCiAgICAgICAgICAgICAgICB9KTsgLy8gQmxvYiBkb2Vzbid0IGV4aXN0IG9uIGFsbCBhbmRyb2lkcwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAvLyBUeXBlRXJyb3Igb2xkIGNocm9tZSBhbmQgRkYKICAgICAgICAgICAgICAgIHZhciBibG9iQnVpbGRlciA9IHdpbmRvdy5CbG9iQnVpbGRlciB8fAogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5XZWJLaXRCbG9iQnVpbGRlciB8fAogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5Nb3pCbG9iQnVpbGRlciB8fAogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5NU0Jsb2JCdWlsZGVyOwogICAgICAgICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1R5cGVFcnJvcicgJiYgYmxvYkJ1aWxkZXIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYmIgPSBuZXcgYmxvYkJ1aWxkZXIoKTsKICAgICAgICAgICAgICAgICAgICBiYi5hcHBlbmQoW2NvbnRlbnRzdHIuYnVmZmVyXSk7CiAgICAgICAgICAgICAgICAgICAgcmV0VmFsID0gYmIuZ2V0QmxvYih0YXJnZXRDb250ZW50VHlwZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbid0IG1ha2UgYSBCbG9iLCBzbyBqdXN0IHJldHVybiB0aGUgc3RyaW5naWZpZWQgY29udGVudAogICAgICAgICAgICAgICAgICAgIHJldFZhbCA9IGNvbnRlbnRzdHI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldFZhbDsKICAgIH0KCgogICAgZnVuY3Rpb24gZ2V0QmFzZVBhdGgoY2IpIHsKICAgICAgICBzYXZlKCJkdW1teS50eHQiLCAiVGVzdENvbnRuZXQiLCBmdW5jdGlvbihlcnIsIGZpbGVFbnRyeSkgewogICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX2dldEZpbGVFbnRyeSgiZHVtbXkudHh0IiwwLCB7fSwgZnVuY3Rpb24oZXJyLCBmaWxlRW50cnkpewogICAgICAgICAgICAgIHZhciBzUGF0aCA9IGZpbGVFbnRyeS5mdWxsUGF0aC5yZXBsYWNlKCJkdW1teS50eHQiLCAiIik7CiAgICAgICAgICAgICAgZmlsZUVudHJ5LnJlbW92ZSgpOwogICAgICAgICAgICAgIHJldHVybiBjYihudWxsLCBzUGF0aCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIF9nZXRTYXZlT2JqZWN0KGNvbnRlbnQpewogICAgICB2YXIgc2F2ZU9iaiA9IG51bGw7CiAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ29iamVjdCcgJiYgY29udGVudCAhPT0gbnVsbCkgewogICAgICAgIGlmIChjb250ZW50IGluc3RhbmNlb2YgRmlsZSB8fCBjb250ZW50IGluc3RhbmNlb2YgQmxvYikgewogICAgICAgICAgLy9GaWxlIG9iamVjdAogICAgICAgICAgc2F2ZU9iaiA9IGNvbnRlbnQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vSlNPTiBvYmplY3QKICAgICAgICAgIHZhciBjb250ZW50c3RyID0gSlNPTi5zdHJpbmdpZnkoY29udGVudCk7CiAgICAgICAgICBzYXZlT2JqID0gX2NyZWF0ZUJsb2JPclN0cmluZyhjb250ZW50c3RyKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgc2F2ZU9iaiA9IF9jcmVhdGVCbG9iT3JTdHJpbmcoY29udGVudCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzYXZlT2JqOwogICAgfQoKICAgIC8qKgogICAgICogU2F2ZSBhIGNvbnRlbnQgdG8gZmlsZSBzeXN0ZW0gaW50byBhIGZpbGUKICAgICAqCiAgICAgKiBJbiB0aGUgY2FzZSB3aGVyZSB0aGUgY29udGVudCBpcyBhIEZpbGUgYW5kIFBob25lR2FwIGlzIGF2YWlsYWJsZSwgdGhlIGZ1bmN0aW9uIHdpbGwgYXR0ZW1wdCB0byB1c2UgdGhlICJjb3B5VG8iIGZ1bmN0aW9uIGluc3RlYWQgb2Ygd3JpdGluZyB0aGUgZmlsZS4KICAgICAqIFRoaXMgaXMgYmVjYXVzZSB3aW5kb3dzIHBob25lIGRvZXMgbm90IGFsbG93IHdyaXRpbmcgYmluYXJ5IGZpbGVzIHdpdGggUGhvbmVHYXAuCiAgICAgKiBAcGFyYW0gIHtbdHlwZV19IGZpbGVOYW1lIGZpbGUgbmFtZSB0byBiZSBzdG9yZWQuCiAgICAgKiBAcGFyYW0gIHtbdHlwZV19IGNvbnRlbnQgIGpzb24gb2JqZWN0IC8gc3RyaW5nIC8gIGZpbGUgb2JqZWN0IC8gYmxvYiBvYmplY3QKICAgICAqIEBwYXJhbSAge1t0eXBlXX0gY2IgIChlcnIsIHJlc3VsdCkKICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgICBmdW5jdGlvbiBzYXZlKGZpbGVOYW1lLCBjb250ZW50LCBjYikgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBzYXZlT2JqID0gX2dldFNhdmVPYmplY3QoY29udGVudCk7CiAgICAgIGlmKHNhdmVPYmogPT09IG51bGwpewogICAgICAgIHJldHVybiBjYigiSW52YWxpZCBjb250ZW50IHR5cGUuIE9iamVjdCB3YXMgbnVsbCIpOwogICAgICB9CiAgICAgIHZhciBzaXplID0gc2F2ZU9iai5zaXplIHx8IHNhdmVPYmoubGVuZ3RoOwoKICAgICAgX2dldEZpbGVFbnRyeShmaWxlTmFtZSwgc2l6ZSwgewogICAgICAgICAgY3JlYXRlOiB0cnVlCiAgICAgIH0sIGZ1bmN0aW9uKGVyciwgZmlsZUVudHJ5KSB7CiAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgY2IoZXJyKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmKGFwcEZvcm0udXRpbHMuaXNQaG9uZUdhcCgpICYmIHNhdmVPYmogaW5zdGFuY2VvZiBGaWxlKXsKICAgICAgICAgICAgICAvL1dyaXRpbmcgYmluYXJ5IGZpbGVzIGlzIG5vdCBwb3NzaWJsZSBpbiB3aW5kb3dzIHBob25lLgogICAgICAgICAgICAgIC8vU28gaWYgdGhlIHRoaW5nIHRvIHNhdmUgaXMgYSBmaWxlLCBhbmQgaXQgaXMgaW4gcGhvbmVnYXAsIHVzZSB0aGUgY29weVRvIGZ1bmN0aW9ucyBpbnN0ZWFkLgogICAgICAgICAgICAgIGZpbGVFbnRyeS5nZXRQYXJlbnQoZnVuY3Rpb24ocGFyZW50RGlyKXsKICAgICAgICAgICAgICAgIC8vR2V0IHRoZSBmaWxlIGVudHJ5IGZvciB0aGUgZmlsZSBpbnB1dAogICAgICAgICAgICAgICAgX3Jlc29sdmVGaWxlKHNhdmVPYmouZnVsbFBhdGgsIGZ1bmN0aW9uKGVyciwgZmlsZVRvQ29weSl7CiAgICAgICAgICAgICAgICAgIGlmKGVycil7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgZmlsZU5hbWUgPSBmaWxlRW50cnkubmFtZTsKCiAgICAgICAgICAgICAgICAgIGZpbGVFbnRyeS5yZW1vdmUoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICBmaWxlVG9Db3B5LmNvcHlUbyhwYXJlbnREaXIsIGZpbGVOYW1lLCBmdW5jdGlvbihjb3BpZWRGaWxlKXsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYihudWxsLCBjb3BpZWRGaWxlKTsKICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycil7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKXsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpewogICAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gIGVsc2UgewogICAgICAgICAgICAgIC8vT3RoZXJ3aXNlLCBqdXN0IHdyaXRlIHRleHQKICAgICAgICAgICAgICBmaWxlRW50cnkuY3JlYXRlV3JpdGVyKGZ1bmN0aW9uKHdyaXRlcikgewogICAgICAgICAgICAgICAgZnVuY3Rpb24gX29uRmluaXNoZWQoZXZ0KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjYihudWxsLCBldnQpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9vblRydW5jYXRlZCgpIHsKICAgICAgICAgICAgICAgICAgd3JpdGVyLm9ud3JpdGVlbmQgPSBfb25GaW5pc2hlZDsKICAgICAgICAgICAgICAgICAgd3JpdGVyLndyaXRlKHNhdmVPYmopOyAvL3dyaXRlIG1ldGhvZCBjYW4gdGFrZSBhIGJsb2Igb3IgZmlsZSBvYmplY3QgYWNjb3JkaW5nIHRvIGh0bWw1IHN0YW5kYXJkLgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgd3JpdGVyLm9ud3JpdGVlbmQgPSBfb25UcnVuY2F0ZWQ7CiAgICAgICAgICAgICAgICAvL3RydW5jYXRlIHRoZSBmaWxlIGZpcnN0LgogICAgICAgICAgICAgICAgd3JpdGVyLnRydW5jYXRlKDApOwogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIGNiKCdGYWlsZWQgdG8gY3JlYXRlIGZpbGUgd3JpdGU6JyArIGUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIC8qKgogICAgICogUmVtb3ZlIGEgZmlsZSBmcm9tIGZpbGUgc3lzdGVtCiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICAgZmlsZU5hbWUgZmlsZSBuYW1lIG9mIGZpbGUgdG8gYmUgcmVtb3ZlZAogICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiCiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgICBmdW5jdGlvbiByZW1vdmUoZmlsZU5hbWUsIGNiKSB7CiAgICAgICAgX2dldEZpbGVFbnRyeShmaWxlTmFtZSwgMCwge30sIGZ1bmN0aW9uKGVyciwgZmlsZUVudHJ5KSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgIGlmICghKGVyci5uYW1lID09PSAnTm90Rm91bmRFcnJvcicgfHwgZXJyLmNvZGUgPT09IDEpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjYihudWxsLCBudWxsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmaWxlRW50cnkucmVtb3ZlKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgY2IobnVsbCwgbnVsbCk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIGNiKCdGYWlsZWQgdG8gcmVtb3ZlIGZpbGUnICsgZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfQogICAgLyoqCiAgICAgKiBSZWFkIGEgZmlsZSBhcyB0ZXh0CiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICAgZmlsZU5hbWUgW2Rlc2NyaXB0aW9uXQogICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiICAgICAgIChlcnIsdGV4dCkKICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICAgICBbZGVzY3JpcHRpb25dCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlYWRBc1RleHQoZmlsZU5hbWUsIGNiKSB7CiAgICAgICAgX2dldEZpbGUoZmlsZU5hbWUsIGZ1bmN0aW9uKGVyciwgZmlsZSkgewogICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgICBjYihlcnIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgICAgICAgICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBldnQudGFyZ2V0LnJlc3VsdDsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRleHQgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gSlNPTi5zdHJpbmdpZnkodGV4dCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBVUkxlbmNvZGVkCiAgICAgICAgICAgICAgICAgICAgLy8gUEcgMi4yIGJ1ZyBpbiByZWFkQXNUZXh0KCkKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gZGVjb2RlVVJJQ29tcG9uZW50KHRleHQpOwogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBjYihudWxsLCB0ZXh0KTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQogICAgLyoqCiAgICAgKiBSZWFkIGEgZmlsZSBhbmQgcmV0dXJuIGJhc2U2NCBlbmNvZGVkIGRhdGEKICAgICAqIEBwYXJhbSAge1t0eXBlXX0gICBmaWxlTmFtZSBbZGVzY3JpcHRpb25dCiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2IgICAgICAgKGVycixiYXNlNjRFbmNvZGVkKQogICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgICAgIFtkZXNjcmlwdGlvbl0KICAgICAqLwogICAgZnVuY3Rpb24gcmVhZEFzQmFzZTY0RW5jb2RlZChmaWxlTmFtZSwgY2IpIHsKICAgICAgICBfZ2V0RmlsZShmaWxlTmFtZSwgZnVuY3Rpb24oZXJyLCBmaWxlKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGV2dC50YXJnZXQucmVzdWx0OwogICAgICAgICAgICAgICAgcmV0dXJuIGNiKG51bGwsIHRleHQpOwogICAgICAgICAgICB9OwogICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTsKICAgICAgICB9KTsKICAgIH0KICAgIC8qKgogICAgICogUmVhZCBhIGZpbGUgcmV0dXJuIGJsb2Igb2JqZWN0ICh3aGljaCBjYW4gYmUgdXNlZCBmb3IgWEhSIHVwbG9hZGluZyBiaW5hcnkpCiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICAgZmlsZU5hbWUgW2Rlc2NyaXB0aW9uXQogICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiICAgICAgIChlcnIsIGJsb2IpCiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgICBmdW5jdGlvbiByZWFkQXNCbG9iKGZpbGVOYW1lLCBjYikgewogICAgICAgIF9nZXRGaWxlKGZpbGVOYW1lLCBmdW5jdGlvbihlcnIsIGZpbGUpIHsKICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGZpbGUudHlwZTsKICAgICAgICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uKGV2dCkgewogICAgICAgICAgICAgICAgICAgIHZhciBhcnJheUJ1ZmZlciA9IGV2dC50YXJnZXQucmVzdWx0OwogICAgICAgICAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2FycmF5QnVmZmVyXSwgewogICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6IHR5cGUKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBjYihudWxsLCBibG9iKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiByZWFkQXNGaWxlKGZpbGVOYW1lLCBjYikgewogICAgICAgIF9nZXRGaWxlKGZpbGVOYW1lLCBjYik7CiAgICB9CiAgICAvKioKICAgICAqIFJldHJpZXZlIGEgZmlsZSBvYmplY3QKICAgICAqIEBwYXJhbSAge1t0eXBlXX0gICBmaWxlTmFtZSBbZGVzY3JpcHRpb25dCiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2IgICAgIChlcnIsZmlsZSkKICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICAgICBbZGVzY3JpcHRpb25dCiAgICAgKi8KICAgIGZ1bmN0aW9uIF9nZXRGaWxlKGZpbGVOYW1lLCBjYikgewogICAgICAgIF9nZXRGaWxlRW50cnkoZmlsZU5hbWUsIDAsIHt9LCBmdW5jdGlvbihlcnIsIGZlKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZlLmZpbGUoZnVuY3Rpb24oZmlsZSkgewogICAgICAgICAgICAgICAgY2IobnVsbCwgZmlsZSk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIGNiKGUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBfcmVzb2x2ZUZpbGUoZmlsZU5hbWUsIGNiKXsKICAgICAgLy9UaGlzIGlzIG5lY2Vzc2FyeSB0byBnZXQgdGhlIGNvcnJlY3QgdXJpIGZvciBhcHBsZS4gVGhlIFVSSSBpbiBhIGZpbGUgb2JqZWN0IGZvciBpcGhvbmUgZG9lcyBub3QgaGF2ZSB0aGUgZmlsZTovLyBwcmVmaXguCiAgICAgIC8vVGhpcyBnaXZlcyBpbnZhbGlkIHVyaSBlcnJvcnMgd2hlbiB0cnlpbmcgdG8gcmVzb2x2ZS4KICAgICAgaWYoZmlsZU5hbWUuaW5kZXhPZigiZmlsZTovLyIpID09PSAtMSAmJiB3aW5kb3cuZGV2aWNlLnBsYXRmb3JtICE9PSAiV2luMzJOVCIpewogICAgICAgIGZpbGVOYW1lID0gImZpbGU6Ly8iICsgZmlsZU5hbWU7CiAgICAgIH0KICAgICAgd2luZG93LnJlc29sdmVMb2NhbEZpbGVTeXN0ZW1VUkkoZmlsZU5hbWUsIGZ1bmN0aW9uKGZpbGVFbnRyeSl7CiAgICAgICAgcmV0dXJuIGNiKG51bGwsIGZpbGVFbnRyeSk7CiAgICAgIH0sIGZ1bmN0aW9uKGVycil7CiAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIF9nZXRGaWxlRW50cnkoZmlsZU5hbWUsIHNpemUsIHBhcmFtcywgY2IpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICBfY2hlY2tFbnYoKTsKICAgICAgaWYodHlwZW9mKGZpbGVOYW1lKSA9PT0gInN0cmluZyIpewogICAgICAgIF9yZXF1ZXN0RmlsZVN5c3RlbShQRVJTSVNURU5ULCBzaXplLCBmdW5jdGlvbiBnb3RGUyhmaWxlU3lzdGVtKSB7CiAgICAgICAgICBmaWxlU3lzdGVtLnJvb3QuZ2V0RmlsZShmaWxlTmFtZSwgcGFyYW1zLCBmdW5jdGlvbiBnb3RGaWxlRW50cnkoZmlsZUVudHJ5KSB7CiAgICAgICAgICAgIGNiKG51bGwsIGZpbGVFbnRyeSk7CiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgaWYgKGVyci5uYW1lID09PSAnUXVvdGFFeGNlZWRlZEVycm9yJyB8fCBlcnIuY29kZSA9PT0gMTApIHsKICAgICAgICAgICAgICAvL3RoaXMgaGFwcGVucyBvbmx5IG9uIGJyb3dzZXIuIHJlcXVlc3QgZm9yIDEgZ2Igc3RvcmFnZQogICAgICAgICAgICAgIC8vVE9ETyBjb25maWd1cmFibGUgZnJvbSBjbG91ZAogICAgICAgICAgICAgIHZhciBiaWdTaXplID0gMTAyNCAqIDEwMjQgKiAxMDI0OwogICAgICAgICAgICAgIF9yZXF1ZXN0UXVvdGUoYmlnU2l6ZSwgZnVuY3Rpb24oZXJyLCBiaWdTaXplKSB7CiAgICAgICAgICAgICAgICBfZ2V0RmlsZUVudHJ5KGZpbGVOYW1lLCBzaXplLCBwYXJhbXMsIGNiKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpZighYXBwRm9ybS51dGlscy5pc1Bob25lR2FwKCkpewogICAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIF9yZXNvbHZlRmlsZShmaWxlTmFtZSwgY2IpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICBjYignRmFpbGVkIHRvIHJlcXVlc3RGaWxlU3lzdGVtJyk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYodHlwZW9mKGNiKSA9PT0gImZ1bmN0aW9uIil7CiAgICAgICAgICBjYigiRXhwZWN0ZWQgZmlsZSBuYW1lIHRvIGJlIGEgc3RyaW5nIGJ1dCB3YXMgIiArIGZpbGVOYW1lKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBfcmVxdWVzdFF1b3RlKHNpemUsIGNiKSB7CiAgICAgICAgaWYgKG5hdmlnYXRvci53ZWJraXRQZXJzaXN0ZW50U3RvcmFnZSkgewogICAgICAgICAgICAvL3dlYmtpdCBicm93c2VyCiAgICAgICAgICAgIG5hdmlnYXRvci53ZWJraXRQZXJzaXN0ZW50U3RvcmFnZS5yZXF1ZXN0UXVvdGEoc2l6ZSwgZnVuY3Rpb24oc2l6ZSkgewogICAgICAgICAgICAgICAgY2IobnVsbCwgc2l6ZSk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikgewogICAgICAgICAgICAgICAgY2IoZXJyLCAwKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9QaG9uZUdhcCBkb2VzIG5vdCBuZWVkIHRvIGRvIHRoaXMucmV0dXJuIGRpcmVjdGx5LgogICAgICAgICAgICBjYihudWxsLCBzaXplKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gX2NoZWNrRW52KCkgewogICAgICAgIGlmICh3aW5kb3cucmVxdWVzdEZpbGVTeXN0ZW0pIHsKICAgICAgICAgICAgX3JlcXVlc3RGaWxlU3lzdGVtID0gd2luZG93LnJlcXVlc3RGaWxlU3lzdGVtOwogICAgICAgICAgICBmaWxlU3lzdGVtQXZhaWxhYmxlID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy53ZWJraXRSZXF1ZXN0RmlsZVN5c3RlbSkgewogICAgICAgICAgICBfcmVxdWVzdEZpbGVTeXN0ZW0gPSB3aW5kb3cud2Via2l0UmVxdWVzdEZpbGVTeXN0ZW07CiAgICAgICAgICAgIGZpbGVTeXN0ZW1BdmFpbGFibGUgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZpbGVTeXN0ZW1BdmFpbGFibGUgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKHdpbmRvdy5Mb2NhbEZpbGVTeXN0ZW0pIHsKICAgICAgICAgICAgUEVSU0lTVEVOVCA9IHdpbmRvdy5Mb2NhbEZpbGVTeXN0ZW0uUEVSU0lTVEVOVDsKICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5QRVJTSVNURU5UKSB7CiAgICAgICAgICAgIFBFUlNJU1RFTlQgPSB3aW5kb3cuUEVSU0lTVEVOVDsKICAgICAgICB9CiAgICB9CiAgICAvLyBkZWJ1Z2dlcjsKICAgIF9jaGVja0VudigpOwogICAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLnV0aWxzIHx8IHt9KTsKYXBwRm9ybS51dGlscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICBtb2R1bGUudGFrZVBob3RvID0gdGFrZVBob3RvOwogIG1vZHVsZS5pc1Bob25lR2FwQ2FtQXZhaWxhYmxlID0gaXNQaG9uZUdhcEF2YWlsYWJsZTsKICBtb2R1bGUuaXNIdG1sNUNhbUF2YWlsYWJsZSA9IGlzSHRtbDVDYW1BdmFpbGFibGU7CiAgbW9kdWxlLmluaXRIdG1sNUNhbWVyYSA9IGluaXRIdG1sNUNhbWVyYTsKICBtb2R1bGUuY2FuY2VsSHRtbDVDYW1lcmEgPSBjYW5jZWxIdG1sNUNhbWVyYTsKICBtb2R1bGUuY2FwdHVyZUJhcmNvZGUgPSBjYXB0dXJlQmFyY29kZTsKCiAgdmFyIGlzUGhvbmVHYXAgPSBmYWxzZTsKICB2YXIgaXNIdG1sNSA9IGZhbHNlOwogIHZhciB2aWRlbyA9IG51bGw7CiAgdmFyIGNhbnZhcyA9IG51bGw7CiAgdmFyIGN0eCA9IG51bGw7CiAgdmFyIGxvY2FsTWVkaWFTdHJlYW0gPSBudWxsOwogIGZ1bmN0aW9uIGlzSHRtbDVDYW1BdmFpbGFibGUoKSB7CiAgICBjaGVja0VudigpOwogICAgcmV0dXJuIGlzSHRtbDU7CiAgfQogIGZ1bmN0aW9uIGlzUGhvbmVHYXBBdmFpbGFibGUoKSB7CiAgICBjaGVja0VudigpOwogICAgcmV0dXJuIGlzUGhvbmVHYXA7CiAgfQogIGZ1bmN0aW9uIGluaXRIdG1sNUNhbWVyYShwYXJhbXMsIGNiKSB7CiAgICBjaGVja0VudigpOwogICAgX2h0bWw1Q2FtZXJhKHBhcmFtcywgY2IpOwogIH0KICBmdW5jdGlvbiBjYW5jZWxIdG1sNUNhbWVyYSgpIHsKICAgIGlmIChsb2NhbE1lZGlhU3RyZWFtKSB7CiAgICAgIGxvY2FsTWVkaWFTdHJlYW0uc3RvcCgpOwogICAgICBsb2NhbE1lZGlhU3RyZWFtID0gbnVsbDsKICAgIH0KICB9CiAgZnVuY3Rpb24gdGFrZVBob3RvKHBhcmFtcywgY2IpIHsKICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTsKICAgICRmaC5mb3Jtcy5sb2cuZCgiVGFraW5nIHBob3RvICIsIHBhcmFtcywgaXNQaG9uZUdhcCk7CiAgICAvL3VzZSBjb25maWd1cmF0aW9uCiAgICB2YXIgd2lkdGggPSAgcGFyYW1zLnRhcmdldFdpZHRoID8gcGFyYW1zLnRhcmdldFdpZHRoIDogJGZoLmZvcm1zLmNvbmZpZy5nZXQoInRhcmdldFdpZHRoIiwgNjQwKTsKICAgIHZhciBoZWlnaHQgPSBwYXJhbXMudGFyZ2V0SGVpZ2h0ID8gcGFyYW1zLnRhcmdldEhlaWdodCA6ICRmaC5mb3Jtcy5jb25maWcuZ2V0KCJ0YXJnZXRIZWlnaHQiLCA0ODApOwogICAgdmFyIHF1YWxpdHk9IHBhcmFtcy5xdWFsaXR5ID8gcGFyYW1zLnF1YWxpdHkgOiAkZmguZm9ybXMuY29uZmlnLmdldCgicXVhbGl0eSIsIDUwKTsKICAgIC8vRm9yIFNhZmV0eSwgdGhlIGRlZmF1bHQgdmFsdWUgb2Ygc2F2aW5nIHRvIHBob3RvIGFsYnVtIGlzIHRydWUuCiAgICB2YXIgc2F2ZVRvUGhvdG9BbGJ1bSA9IHR5cGVvZihwYXJhbXMuc2F2ZVRvUGhvdG9BbGJ1bSkgIT09ICJ1bmRlZmluZWQiID8gcGFyYW1zLnNhdmVUb1Bob3RvQWxidW0gOiAkZmguZm9ybXMuY29uZmlnLmdldCgic2F2ZVRvUGhvdG9BbGJ1bSIpOwogICAgdmFyIGVuY29kaW5nVHlwZSA9IHBhcmFtcy5lbmNvZGluZ1R5cGUgPyBwYXJhbXMuZW5jb2RpbmdUeXBlIDogJGZoLmZvcm1zLmNvbmZpZy5nZXQoImVuY29kaW5nVHlwZSIsICdqcGVnJyk7CgogICAgcGFyYW1zLnRhcmdldFdpZHRoID0gd2lkdGg7CiAgICBwYXJhbXMudGFyZ2V0SGVpZ2h0ID0gaGVpZ2h0OwogICAgcGFyYW1zLnF1YWxpdHkgPSBxdWFsaXR5OwogICAgcGFyYW1zLnNhdmVUb1Bob3RvQWxidW0gPSBzYXZlVG9QaG90b0FsYnVtOwogICAgcGFyYW1zLmVuY29kaW5nVHlwZSA9IGVuY29kaW5nVHlwZTsKCiAgICBpZiAoInVuZGVmaW5lZCIgPT09IHR5cGVvZihwYXJhbXMuc291cmNlVHlwZSkgJiYgdHlwZW9mKENhbWVyYSkgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIHBhcmFtcy5zb3VyY2VUeXBlID0gQ2FtZXJhLlBpY3R1cmVTb3VyY2VUeXBlLkNBTUVSQTsKICAgIH0KCiAgICBpZiAoaXNQaG9uZUdhcCkgewogICAgICBfcGhvbmVHYXBQaG90byhwYXJhbXMsIGNiKTsKICAgIH0gZWxzZSBpZiAoaXNIdG1sNSkgewogICAgICBzbmFwc2hvdChwYXJhbXMsIGNiKTsKICAgIH0gZWxzZSB7CiAgICAgIGNiKCdZb3VyIGRldmljZSBkb2VzIG5vdCBzdXBwb3J0IGNhbWVyYS4nKTsKICAgIH0KICB9CiAgZnVuY3Rpb24gX3Bob25lR2FwUGhvdG8ocGFyYW1zLCBjYil7CiAgICBwYXJhbXMuZW5jb2RpbmdUeXBlID0gcGFyYW1zLmVuY29kaW5nVHlwZSA9PT0gJ2pwZWcnID8gQ2FtZXJhLkVuY29kaW5nVHlwZS5KUEVHIDogQ2FtZXJhLkVuY29kaW5nVHlwZS5QTkc7CiAgICBuYXZpZ2F0b3IuY2FtZXJhLmdldFBpY3R1cmUoX3Bob25lR2FwUGhvdG9TdWNjZXNzKGNiKSwgY2IsIHsKICAgICAgcXVhbGl0eTogcGFyYW1zLnF1YWxpdHksCiAgICAgIHRhcmdldFdpZHRoOiBwYXJhbXMudGFyZ2V0V2lkdGgsCiAgICAgIHRhcmdldEhlaWdodDogcGFyYW1zLnRhcmdldEhlaWdodCwKICAgICAgc291cmNlVHlwZTogcGFyYW1zLnNvdXJjZVR5cGUsCiAgICAgIHNhdmVUb1Bob3RvQWxidW06IHBhcmFtcy5zYXZlVG9QaG90b0FsYnVtLAogICAgICBkZXN0aW5hdGlvblR5cGU6IENhbWVyYS5EZXN0aW5hdGlvblR5cGUuRklMRV9VUkksCiAgICAgIGVuY29kaW5nVHlwZTogcGFyYW1zLmVuY29kaW5nVHlwZQogICAgfSk7CiAgfQogIGZ1bmN0aW9uIF9waG9uZUdhcFBob3RvU3VjY2VzcyhjYikgewogICAgcmV0dXJuIGZ1bmN0aW9uIChpbWFnZURhdGEpIHsKICAgICAgdmFyIGltYWdlVVJJID0gaW1hZ2VEYXRhOwogICAgICBjYihudWxsLCBpbWFnZVVSSSk7CiAgICB9OwogIH0KICBmdW5jdGlvbiBfaHRtbDVDYW1lcmEocGFyYW1zLCBjYikgewogICAgJGZoLmZvcm1zLmxvZy5kKCJUYWtpbmcgcGhvdG8gX2h0bWw1Q2FtZXJhIiwgcGFyYW1zLCBpc1Bob25lR2FwKTsKICAgIHZhciB3aWR0aCA9IHBhcmFtcy50YXJnZXRXaWR0aCB8fCAkZmguZm9ybXMuY29uZmlnLmdldCgidGFyZ2V0V2lkdGgiKTsKICAgIHZhciBoZWlnaHQgPSBwYXJhbXMudGFyZ2V0SGVpZ2h0IHx8ICRmaC5mb3Jtcy5jb25maWcuZ2V0KCJ0YXJnZXRIZWlnaHQiKTsKICAgIHZpZGVvLndpZHRoID0gd2lkdGg7CiAgICB2aWRlby5oZWlnaHQgPSBoZWlnaHQ7CiAgICBjYW52YXMud2lkdGggPSB3aWR0aDsKICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICBpZiAoIWxvY2FsTWVkaWFTdHJlYW0pIHsKICAgICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSh7IHZpZGVvOiB0cnVlLCBhdWRpbzpmYWxzZSB9LCBmdW5jdGlvbiAoc3RyZWFtKSB7CiAgICAgICAgdmlkZW8uc3JjID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoc3RyZWFtKTsKICAgICAgICBsb2NhbE1lZGlhU3RyZWFtID0gc3RyZWFtOwogICAgICAgIGNiKG51bGwsIHZpZGVvKTsKICAgICAgfSwgY2IpOwogICAgfSBlbHNlIHsKICAgICAgJGZoLmZvcm1zLmxvZy5lKCdNZWRpYSBkZXZpY2Ugd2FzIG5vdCByZWxlYXNlZCBieSBicm93c2VyLicpOwogICAgICBjYignTWVkaWEgZGV2aWNlIG9jY3VwaWVkLicpOwogICAgfQogIH0KCiAgLyoqCiAgICogQ2FwdHVyaW5nIGEgYmFyY29kZSB1c2luZyB0aGUgUGhvbmVHYXAgYmFyY29kZSBwbHVnaW4KICAgKi8KICBmdW5jdGlvbiBfcGhvbmVHYXBCYXJjb2RlKHBhcmFtcywgY2IpewogICAgLy9DaGVja2luZyBmb3IgYSBjb3Jkb3ZhIGJhcmNvZGVTY2FubmVyIHBsdWdpbi4KICAgIGlmKHdpbmRvdy5jb3Jkb3ZhICYmIHdpbmRvdy5jb3Jkb3ZhLnBsdWdpbnMgJiYgd2luZG93LmNvcmRvdmEucGx1Z2lucy5iYXJjb2RlU2Nhbm5lcil7CiAgICAgIGNvcmRvdmEucGx1Z2lucy5iYXJjb2RlU2Nhbm5lci5zY2FuKAogICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiQmFyY29kZSBGb3VuZDogIiArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpOwogICAgICAgICAgcmV0dXJuIGNiKG51bGwsIHJlc3VsdCk7CiAgICAgICAgfSwKICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiU2Nhbm5pbmcgZmFpbGVkOiAiICsgZXJyb3IpOwogICAgICAgICAgY2IoIlNjYW5uaW5nIGZhaWxlZDogIiArIGVycm9yKTsKICAgICAgICB9CiAgICAgICk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gY2IoIkJhcmNvZGUgcGx1Z2luIG5vdCBpbnN0YWxsZWQiKTsKICAgIH0KICB9CgogIC8qKgogICAqIENhcHR1cmluZyBhIGJhcmNvZGUgdXNpbmcgYSB3ZWJjYW0gYW5kIGltYWdlIHByb2Nlc3NvcnMuCiAgICogVE9ETyBOb3QgY29tcGxldGUgeWV0LgogICAqIEBwYXJhbSBwYXJhbXMKICAgKiBAcGFyYW0gY2IKICAgKiBAcHJpdmF0ZQogICAqLwogIGZ1bmN0aW9uIF93ZWJCYXJjb2RlKHBhcmFtcywgY2IpewogICAgLy9UT0RPIFdlYiBiYXJjb2RlIGRlY29kaW5nIG5vdCBzdXBwb3J0ZWQgeWV0LgogICAgJGZoLmZvcm1zLmxvZy5lKCJXZWIgQmFyY29kZSBEZWNvZGluZyBub3Qgc3VwcG9ydGVkIHlldC4iKTsKICAgIHJldHVybiBjYigiV2ViIEJhcmNvZGUgRGVjb2Rpbmcgbm90IHN1cHBvcnRlZCB5ZXQuIik7CiAgfQoKICBmdW5jdGlvbiBjYXB0dXJlQmFyY29kZShwYXJhbXMsIGNiKXsKICAgIGlmKGlzUGhvbmVHYXBBdmFpbGFibGUoKSl7CiAgICAgIF9waG9uZUdhcEJhcmNvZGUocGFyYW1zLGNiKTsKICAgIH0gZWxzZSB7CiAgICAgIF93ZWJCYXJjb2RlKHBhcmFtcywgY2IpOwogICAgfQogIH0KICBmdW5jdGlvbiBjaGVja0VudigpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiQ2hlY2tpbmcgZW52Iik7CiAgICBpZiAobmF2aWdhdG9yLmNhbWVyYSAmJiBuYXZpZ2F0b3IuY2FtZXJhLmdldFBpY3R1cmUpIHsKICAgICAgLy8gUGhvbmVHYXAKICAgICAgaXNQaG9uZUdhcCA9IHRydWU7CiAgICB9IGVsc2UgaWYgKF9icm93c2VyV2ViU3VwcG9ydCgpKSB7CiAgICAgIGlzSHRtbDUgPSB0cnVlOwogICAgICB2aWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7CiAgICAgIHZpZGVvLmF1dG9wbGF5ID0gJ2F1dG9wbGF5JzsKICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CiAgICAgIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS5lcnJvcignQ2Fubm90IGRldGVjdCB1c2FibGUgbWVkaWEgQVBJLiBDYW1lcmEgd2lsbCBub3QgcnVuIHByb3Blcmx5IG9uIHRoaXMgZGV2aWNlLicpOwogICAgfQogIH0KICBmdW5jdGlvbiBfYnJvd3NlcldlYlN1cHBvcnQoKSB7CiAgICBpZiAobmF2aWdhdG9yLmdldFVzZXJNZWRpYSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGlmIChuYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhKSB7CiAgICAgIG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGlmIChuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhKSB7CiAgICAgIG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGlmIChuYXZpZ2F0b3IubXNHZXRVc2VyTWVkaWEpIHsKICAgICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IG5hdmlnYXRvci5tc0dldFVzZXJNZWRpYTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBmdW5jdGlvbiBzbmFwc2hvdChwYXJhbXMsIGNiKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIlNuYXBzaG90ICIsIHBhcmFtcyk7CiAgICBpZiAobG9jYWxNZWRpYVN0cmVhbSkgewogICAgICBjdHguZHJhd0ltYWdlKHZpZGVvLCAwLCAwLCBwYXJhbXMudGFyZ2V0V2lkdGgsIHBhcmFtcy50YXJnZXRIZWlnaHQpOwogICAgICAvLyAiaW1hZ2Uvd2VicCIgd29ya3MgaW4gQ2hyb21lLgogICAgICAvLyBPdGhlciBicm93c2VycyB3aWxsIGZhbGwgYmFjayB0byBpbWFnZS9wbmcuCiAgICAgIHZhciBiYXNlNjQgPSBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKTsKICAgICAgdmFyIGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgcGFyYW1zLnRhcmdldFdpZHRoLCBwYXJhbXMudGFyZ2V0SGVpZ2h0KTsKCiAgICAgIGlmKHBhcmFtcy5jYW5jZWxIdG1sNUNhbWVyYSl7CiAgICAgICAgY2FuY2VsSHRtbDVDYW1lcmEoKTsKICAgICAgfQoKICAgICAgLy9EZWNpZGluZyB3aGV0aGVyIHRvIHJldHVybiByYXcgaW1hZ2UgZGF0YSBvciBhIGJhc2U2NCBpbWFnZS4KICAgICAgLy9yYXdEYXRhIGlzIG1haW5seSB1c2VkIGZvciBzY2FubmluZyBmb3IgYmFyY29kZXMuCiAgICAgIGlmKHBhcmFtcy5yYXdEYXRhKXsKICAgICAgICByZXR1cm4gY2IobnVsbCwge2ltYWdlRGF0YTogaW1hZ2VEYXRhLCB3aWR0aDogcGFyYW1zLnRhcmdldFdpZHRoLCBoZWlnaHQ6IHBhcmFtcy50YXJnZXRIZWlnaHQsIGJhc2U2NDogYmFzZTY0fSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGNiKG51bGwsIGJhc2U2NCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICRmaC5mb3Jtcy5sb2cuZSgnTWVkaWEgcmVzb3VyY2UgaXMgbm90IGF2YWlsYWJsZScpOwogICAgICBjYignUmVzb3VyY2Ugbm90IGF2YWlsYWJsZScpOwogICAgfQogIH0KICByZXR1cm4gbW9kdWxlOwp9KGFwcEZvcm0udXRpbHMgfHwge30pOwoKYXBwRm9ybS53ZWIgPSBmdW5jdGlvbiAobW9kdWxlKSB7CgogIG1vZHVsZS51cGxvYWRGaWxlID0gZnVuY3Rpb24odXJsLCBmaWxlUHJvcHMsIGNiKXsKICAgICRmaC5mb3Jtcy5sb2cuZCgiUGhvbmVnYXAgdXBsb2FkRmlsZSAiLCB1cmwsIGZpbGVQcm9wcyk7CiAgICB2YXIgZmlsZVBhdGggPSBmaWxlUHJvcHMuZnVsbFBhdGg7CgogICAgaWYoISRmaC5mb3Jtcy5jb25maWcuaXNPbmxpbmUoKSl7CiAgICAgICRmaC5mb3Jtcy5sb2cuZSgiUGhvbmVnYXAgdXBsb2FkRmlsZS4gTm90IE9ubGluZS4iLCB1cmwsIGZpbGVQcm9wcyk7CiAgICAgIHJldHVybiBjYigiTm8gSW50ZXJuZXQgQ29ubmVjdGlvbiBBdmFpbGFibGUuIik7CiAgICB9CgogICAgdmFyIHN1Y2Nlc3MgPSBmdW5jdGlvbiAocikgewogICAgICAkZmguZm9ybXMubG9nLmQoInVwbG9hZCB0byB1cmwgIiwgdXJsLCAiIHN1Y2Vzc2Z1bCIpOwogICAgICByLnJlc3BvbnNlID0gci5yZXNwb25zZSB8fCB7fTsKICAgICAgaWYodHlwZW9mIHIucmVzcG9uc2UgPT09ICJzdHJpbmciKXsKICAgICAgICByLnJlc3BvbnNlID0gSlNPTi5wYXJzZShyLnJlc3BvbnNlKTsKICAgICAgfQogICAgICBjYihudWxsLCByLnJlc3BvbnNlKTsKICAgIH07CgogICAgdmFyIGZhaWwgPSBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgJGZoLmZvcm1zLmxvZy5lKCJBbiBlcnJvciB1cGxvYWRpbmcgYSBmaWxlIGhhcyBvY2N1cnJlZDogQ29kZSA9ICIgKyBlcnJvci5jb2RlKTsKICAgICAgJGZoLmZvcm1zLmxvZy5kKCJ1cGxvYWQgZXJyb3Igc291cmNlICIgKyBlcnJvci5zb3VyY2UpOwogICAgICAkZmguZm9ybXMubG9nLmQoInVwbG9hZCBlcnJvciB0YXJnZXQgIiArIGVycm9yLnRhcmdldCk7CiAgICAgIGNiKGVycm9yKTsKICAgIH07CgogICAgdmFyIG9wdGlvbnMgPSBuZXcgRmlsZVVwbG9hZE9wdGlvbnMoKTsKICAgIC8vaW1wb3J0YW50IC0gZW1wdHkgZmlsZU5hbWUgd2lsbCBjYXVzZSBmaWxlIHVwbG9hZCBmYWlsIG9uIFdQISEKICAgIG9wdGlvbnMuZmlsZU5hbWUgPSAobnVsbCA9PSBmaWxlUHJvcHMubmFtZSB8fCAiIiA9PT0gZmlsZVByb3BzLm5hbWUpID8gImltYWdlLnBuZyIgOiBmaWxlUHJvcHMubmFtZTsKICAgIG9wdGlvbnMubWltZVR5cGUgPSBmaWxlUHJvcHMuY29udGVudFR5cGUgPyBmaWxlUHJvcHMuY29udGVudFR5cGUgOiAiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtIjsKICAgIG9wdGlvbnMuaHR0cE1ldGhvZCA9ICJodHRwcyI7CiAgICBvcHRpb25zLmNodW5rZWRNb2RlID0gdHJ1ZTsKICAgIG9wdGlvbnMuZmlsZUtleSA9ICJmaWxlIjsKCiAgICAvL2h0dHA6Ly9ncmFuZGl6LmNvbS9waG9uZWdhcC1kZXZlbG9wbWVudC9waG9uZWdhcC1maWxlLXRyYW5zZmVyLWVycm9yLWNvZGUtMy1zb2x2ZWQvCiAgICBvcHRpb25zLmhlYWRlcnMgPSB7CiAgICAgICJDb25uZWN0aW9uIjogImNsb3NlIgogICAgfTsKCiAgICAkZmguZm9ybXMubG9nLmQoIkJlZ2lubmluZyBmaWxlIHVwbG9hZCAiLHVybCwgb3B0aW9ucyk7CiAgICB2YXIgZnQgPSBuZXcgRmlsZVRyYW5zZmVyKCk7CiAgICBmdC51cGxvYWQoZmlsZVBhdGgsIGVuY29kZVVSSSh1cmwpLCBzdWNjZXNzLCBmYWlsLCBvcHRpb25zKTsKICB9OwoKICBtb2R1bGUuZG93bmxvYWRGaWxlID0gZnVuY3Rpb24odXJsLCBmaWxlTWV0YURhdGEsIGNiKXsKICAgICRmaC5mb3Jtcy5sb2cuZCgiUGhvbmVnYXAgZG93bmxvYWRGaWxlICIsIHVybCwgZmlsZU1ldGFEYXRhKTsKICAgIHZhciBmdCA9IG5ldyBGaWxlVHJhbnNmZXIoKTsKCiAgICBpZighJGZoLmZvcm1zLmNvbmZpZy5pc09ubGluZSgpKXsKICAgICAgJGZoLmZvcm1zLmxvZy5lKCJQaG9uZWdhcCBkb3dubG9hZEZpbGUuIE5vdCBPbmxpbmUuIiwgdXJsLCBmaWxlTWV0YURhdGEpOwogICAgICByZXR1cm4gY2IoIk5vIEludGVybmV0IENvbm5lY3Rpb24gQXZhaWxhYmxlLiIpOwogICAgfQoKICAgIGFwcEZvcm0udXRpbHMuZmlsZVN5c3RlbS5nZXRCYXNlUGF0aChmdW5jdGlvbihlcnIsIGJhc2VQYXRoKXsKICAgICAgaWYoZXJyKXsKICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIGdldHRpbmcgYmFzZSBwYXRoIGZvciBmaWxlIGRvd25sb2FkOiAiICsgdXJsKTsKICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gc3VjY2VzcyhmaWxlRW50cnkpewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiRmlsZSBEb3dubG9hZCBDb21wbGV0ZWQgU3VjY2Vzc2Z1bGx5LiBGaWxlUGF0aDogIiArIGZpbGVFbnRyeS5mdWxsUGF0aCk7CiAgICAgICAgcmV0dXJuIGNiKG51bGwsIGZpbGVFbnRyeS50b1VSTCgpKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gZmFpbChlcnJvcil7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBkb3dubG9hZGluZyBmaWxlICIgKyBmaWxlTWV0YURhdGEuZmlsZU5hbWUgKyAiIGNvZGU6ICIgKyBlcnJvci5jb2RlKTsKICAgICAgICByZXR1cm4gY2IoIkVycm9yIGRvd25sb2FkaW5nIGZpbGUgIiArIGZpbGVNZXRhRGF0YS5maWxlTmFtZSArICIgY29kZTogIiArIGVycm9yLmNvZGUpOwogICAgICB9CgogICAgICBpZihmaWxlTWV0YURhdGEuZmlsZU5hbWUpewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiRmlsZSBuYW1lIGZvciBmaWxlICIgKyBmaWxlTWV0YURhdGEuZmlsZU5hbWUgKyAiIGZvdW5kLiBTdGFydGluZyBkb3dubG9hZCIpOwogICAgICAgIHZhciBmdWxsUGF0aCA9IGJhc2VQYXRoICsgZmlsZU1ldGFEYXRhLmZpbGVOYW1lOwogICAgICAgIGZ0LmRvd25sb2FkKGVuY29kZVVSSSh1cmwpLCBmdWxsUGF0aCwgc3VjY2VzcywgZmFpbCwgZmFsc2UsIHtoZWFkZXJzOiB7CiAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJjbG9zZSIKICAgICAgICB9fSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJObyBmaWxlIG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBmaWxlIHRvIGRvd25sb2FkIik7CiAgICAgICAgcmV0dXJuIGNiKCJObyBmaWxlIG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBmaWxlIHRvIGRvd25sb2FkIik7CiAgICAgIH0KICAgIH0pOwogIH07CgogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS53ZWIgfHwge30pOwphcHBGb3JtLndlYi5hamF4ID0gZnVuY3Rpb24gKG1vZHVsZSkgewogIG1vZHVsZSA9IHR5cGVvZiAkZmggIT09ICd1bmRlZmluZWQnICYmICRmaC5fX2FqYXggPyAkZmguX19hamF4IDogX215QWpheDsKICBtb2R1bGUuZ2V0ID0gZ2V0OwogIG1vZHVsZS5wb3N0ID0gcG9zdDsKICB2YXIgX2FqYXggPSBtb2R1bGU7CiAgZnVuY3Rpb24gX215QWpheCgpIHsKICB9CiAgZnVuY3Rpb24gZ2V0KHVybCwgY2IpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiQWpheCBnZXQgIiwgdXJsKTsKICAgIF9hamF4KHsKICAgICAgJ3VybCc6IHVybCwKICAgICAgJ3R5cGUnOiAnR0VUJywKICAgICAgJ2RhdGFUeXBlJzogJ2pzb24nLAogICAgICAnc3VjY2Vzcyc6IGZ1bmN0aW9uIChkYXRhLCB0ZXh0KSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJBamF4IGdldCIsIHVybCwgIlN1Y2Nlc3MiKTsKICAgICAgICBjYihudWxsLCBkYXRhKTsKICAgICAgfSwKICAgICAgJ2Vycm9yJzogZnVuY3Rpb24gKHhociwgc3RhdHVzLCBlcnIpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmUoIkFqYXggZ2V0IiwgdXJsLCAiRmFpbCIsIHhociwgc3RhdHVzLCBlcnIpOwogICAgICAgIGNiKHhocik7CiAgICAgIH0KICAgIH0pOwogIH0KICBmdW5jdGlvbiBwb3N0KHVybCwgYm9keSwgY2IpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiQWpheCBwb3N0ICIsIHVybCwgYm9keSk7CiAgICB2YXIgZmlsZSA9IGZhbHNlOwogICAgdmFyIGZvcm1EYXRhOwogICAgaWYgKHR5cGVvZiBib2R5ID09PSAnb2JqZWN0JykgewogICAgICBpZiAoYm9keSBpbnN0YW5jZW9mIEZpbGUpIHsKICAgICAgICBmaWxlID0gdHJ1ZTsKICAgICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICAgIHZhciBuYW1lID0gYm9keS5uYW1lOwogICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCBib2R5KTsKICAgICAgICBib2R5ID0gZm9ybURhdGE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KGJvZHkpOwogICAgICB9CiAgICB9CiAgICB2YXIgcGFyYW0gPSB7CiAgICAgICAgJ3VybCc6IHVybCwKICAgICAgICAndHlwZSc6ICdQT1NUJywKICAgICAgICAnZGF0YSc6IGJvZHksCiAgICAgICAgJ2RhdGFUeXBlJzogJ2pzb24nLAogICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24gKGRhdGEsIHRleHQpIHsKICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiQWpheCBwb3N0ICIsIHVybCwgIiBTdWNjZXNzIik7CiAgICAgICAgICBjYihudWxsLCBkYXRhKTsKICAgICAgICB9LAogICAgICAgICdlcnJvcic6IGZ1bmN0aW9uICh4aHIsIHN0YXR1cywgZXJyKSB7CiAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkFqYXggcG9zdCAiLCB1cmwsICIgRmFpbCAiLCB4aHIsIHN0YXR1cywgZXJyKTsKICAgICAgICAgIGNiKHhocik7CiAgICAgICAgfQogICAgICB9OwogICAgaWYgKGZpbGUgPT09IGZhbHNlKSB7CiAgICAgIHBhcmFtLmNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nOwogICAgfQogICAgX2FqYXgocGFyYW0pOwogIH0KICByZXR1cm4gbW9kdWxlOwp9KGFwcEZvcm0ud2ViLmFqYXggfHwge30pOwphcHBGb3JtLnN0b3JlcyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICBtb2R1bGUuU3RvcmUgPSBTdG9yZTsKICBmdW5jdGlvbiBTdG9yZShuYW1lKSB7CiAgICB0aGlzLm5hbWUgPSBuYW1lOwogIH0KICBTdG9yZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG1vZGVsLCBjYikgewogICAgdGhyb3cgJ0NyZWF0ZSBub3QgaW1wbGVtZW50ZWQ6JyArIHRoaXMubmFtZTsKICB9OwogIC8qKgogICAgICogUmVhZCBhIG1vZGVsIGRhdGEgZnJvbSBzdG9yZQogICAgICogQHBhcmFtICB7W3R5cGVdfSBtb2RlbCAgICAgICAgICBbZGVzY3JpcHRpb25dCiAgICAgKiBAcGFyYW0gIHtbdHlwZV19IGNiKGVycm9yLCBkYXRhKTsKICAgICAqLwogIFN0b3JlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG1vZGVsLCBjYikgewogICAgdGhyb3cgJ1JlYWQgbm90IGltcGxlbWVudGVkOicgKyB0aGlzLm5hbWU7CiAgfTsKICBTdG9yZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG1vZGVsLCBjYikgewogICAgdGhyb3cgJ1VwZGF0ZSBub3QgaW1wbGVtZW50ZWQ6JyArIHRoaXMubmFtZTsKICB9OwogIFN0b3JlLnByb3RvdHlwZS5yZW1vdmVFbnRyeSA9IGZ1bmN0aW9uIChtb2RlbCwgY2IpIHsKICAgIHRocm93ICdEZWxldGUgbm90IGltcGxlbWVudGVkOicgKyB0aGlzLm5hbWU7CiAgfTsKICBTdG9yZS5wcm90b3R5cGUudXBzZXJ0ID0gZnVuY3Rpb24gKG1vZGVsLCBjYikgewogICAgdGhyb3cgJ1Vwc2VydCBub3QgaW1wbGVtZW50ZWQ6JyArIHRoaXMubmFtZTsKICB9OwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5zdG9yZXMgfHwge30pOwovKioKICogTG9jYWwgc3RvcmFnZSBzdG9yZXMgYSBtb2RlbCdzIGpzb24gZGVmaW5pdGlvbiBwZXJzaXN0ZW50bHkuCiAqLwphcHBGb3JtLnN0b3JlcyA9IGZ1bmN0aW9uKG1vZHVsZSkgewogIC8vaW1wbGVtZW50YXRpb24KICB2YXIgdXRpbHMgPSBhcHBGb3JtLnV0aWxzOwogIHZhciBmaWxlU3lzdGVtID0gdXRpbHMuZmlsZVN5c3RlbTsKICB2YXIgX2ZpbGVTeXN0ZW1BdmFpbGFibGUgPSBmdW5jdGlvbigpIHt9OwogIC8vcGxhY2Vob2xkZXIKICBmdW5jdGlvbiBMb2NhbFN0b3JhZ2UoKSB7CiAgICBhcHBGb3JtLnN0b3Jlcy5TdG9yZS5jYWxsKHRoaXMsICdMb2NhbFN0b3JhZ2UnKTsKICB9CiAgYXBwRm9ybS51dGlscy5leHRlbmQoTG9jYWxTdG9yYWdlLCBhcHBGb3JtLnN0b3Jlcy5TdG9yZSk7CiAgLy9zdG9yZSBhIG1vZGVsIHRvIGxvY2FsIHN0b3JhZ2UKICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKG1vZGVsLCBjYikgewogICAgdmFyIGtleSA9IHV0aWxzLmxvY2FsSWQobW9kZWwpOwogICAgbW9kZWwuc2V0TG9jYWxJZChrZXkpOwogICAgdGhpcy51cGRhdGUobW9kZWwsIGNiKTsKICB9OwogIC8vcmVhZCBhIG1vZGVsIGZyb20gbG9jYWwgc3RvcmFnZQogIExvY2FsU3RvcmFnZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKG1vZGVsLCBjYikgewogICAgaWYodHlwZW9mKG1vZGVsKSA9PT0gIm9iamVjdCIpewogICAgICBpZiAobW9kZWwuZ2V0KCJfdHlwZSIpID09PSAib2ZmbGluZVRlc3QiKXsKICAgICAgICByZXR1cm4gY2IobnVsbCwge30pOwogICAgICB9CiAgICB9CgogICAgdmFyIGtleSA9IF9nZXRLZXkobW9kZWwpOwogICAgaWYgKGtleSAhPSBudWxsKSB7CiAgICAgIF9maERhdGEoewogICAgICAgICdhY3QnOiAnbG9hZCcsCiAgICAgICAgJ2tleSc6IGtleS50b1N0cmluZygpCiAgICAgIH0sIGNiLCBjYik7CiAgICB9IGVsc2UgewogICAgICAvL21vZGVsIGRvZXMgbm90IGV4aXN0IGluIGxvY2FsIHN0b3JhZ2UgaWYga2V5IGlzIG51bGwuCiAgICAgIGNiKG51bGwsIG51bGwpOwogICAgfQogIH07CiAgLy91cGRhdGUgYSBtb2RlbAogIExvY2FsU3RvcmFnZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24obW9kZWwsIGNiKSB7CiAgICB2YXIga2V5ID0gX2dldEtleShtb2RlbCk7CiAgICB2YXIgZGF0YSA9IG1vZGVsLmdldFByb3BzKCk7CiAgICB2YXIgZGF0YVN0ciA9IEpTT04uc3RyaW5naWZ5KGRhdGEpOwogICAgX2ZoRGF0YSh7CiAgICAgICdhY3QnOiAnc2F2ZScsCiAgICAgICdrZXknOiBrZXkudG9TdHJpbmcoKSwKICAgICAgJ3ZhbCc6IGRhdGFTdHIKICAgIH0sIGNiLCBjYik7CiAgfTsKICAvL2RlbGV0ZSBhIG1vZGVsCiAgTG9jYWxTdG9yYWdlLnByb3RvdHlwZS5yZW1vdmVFbnRyeSA9IGZ1bmN0aW9uKG1vZGVsLCBjYikgewogICAgdmFyIGtleSA9IF9nZXRLZXkobW9kZWwpOwogICAgX2ZoRGF0YSh7CiAgICAgICdhY3QnOiAncmVtb3ZlJywKICAgICAgJ2tleSc6IGtleS50b1N0cmluZygpCiAgICB9LCBjYiwgY2IpOwogIH07CiAgTG9jYWxTdG9yYWdlLnByb3RvdHlwZS51cHNlcnQgPSBmdW5jdGlvbihtb2RlbCwgY2IpIHsKICAgIHZhciBrZXkgPSBfZ2V0S2V5KG1vZGVsKTsKICAgIGlmIChrZXkgPT09IG51bGwpIHsKICAgICAgdGhpcy5jcmVhdGUobW9kZWwsIGNiKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMudXBkYXRlKG1vZGVsLCBjYik7CiAgICB9CiAgfTsKICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlLnN3aXRjaEZpbGVTeXN0ZW0gPSBmdW5jdGlvbihpc09uKSB7CiAgICBfZmlsZVN5c3RlbUF2YWlsYWJsZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gaXNPbjsKICAgIH07CiAgfTsKICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlLmRlZmF1bHRTdG9yYWdlID0gZnVuY3Rpb24oKSB7CiAgICBfZmlsZVN5c3RlbUF2YWlsYWJsZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZmlsZVN5c3RlbS5pc0ZpbGVTeXN0ZW1BdmFpbGFibGUoKTsKICAgIH07CiAgfTsKICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlLnNhdmVGaWxlID0gZnVuY3Rpb24oZmlsZU5hbWUsIGZpbGVUb1NhdmUsIGNiKXsKICAgIGlmKCFfZmlsZVN5c3RlbUF2YWlsYWJsZSgpKXsKICAgICAgcmV0dXJuIGNiKCJGaWxlIHN5c3RlbSBub3QgYXZhaWxhYmxlIik7CiAgICB9CgogICAgX2ZoRGF0YSh7CiAgICAgICdhY3QnOiAnc2F2ZScsCiAgICAgICdrZXknOiBmaWxlTmFtZSwKICAgICAgJ3ZhbCc6IGZpbGVUb1NhdmUKICAgIH0sIGNiLCBjYik7CiAgfTsKICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlLnVwZGF0ZVRleHRGaWxlID0gZnVuY3Rpb24oa2V5LCBkYXRhU3RyLCBjYil7CiAgICBfZmhEYXRhKHsKICAgICAgJ2FjdCc6ICdzYXZlJywKICAgICAgJ2tleSc6IGtleSwKICAgICAgJ3ZhbCc6IGRhdGFTdHIKICAgIH0sIGNiLCBjYik7CiAgfTsKICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlLnJlYWRGaWxlID0gZnVuY3Rpb24oZmlsZU5hbWUsIGNiKXsKICAgIF9maERhdGEoewogICAgICAnYWN0JzogJ2xvYWRGaWxlJywKICAgICAgJ2tleSc6IGZpbGVOYW1lCiAgICB9LCBjYiwgY2IpOwogIH07CiAgTG9jYWxTdG9yYWdlLnByb3RvdHlwZS5yZWFkRmlsZVRleHQgPSBmdW5jdGlvbihmaWxlTmFtZSwgY2IpewogICAgX2ZoRGF0YSh7CiAgICAgICdhY3QnOiAnbG9hZCcsCiAgICAgICdrZXknOiBmaWxlTmFtZQogICAgfSwgY2IsIGNiKTsKICB9OwogIF9maWxlU3lzdGVtQXZhaWxhYmxlID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gZmlsZVN5c3RlbS5pc0ZpbGVTeXN0ZW1BdmFpbGFibGUoKTsKICB9OwoKICBmdW5jdGlvbiBfZ2V0S2V5KGtleSl7CiAgICByZXR1cm4gdHlwZW9mKGtleS5nZXRMb2NhbElkKSA9PT0gImZ1bmN0aW9uIiA/IGtleS5nZXRMb2NhbElkKCkgOiBrZXk7CiAgfQogIC8vdXNlIGRpZmZlcmVudCBsb2NhbCBzdG9yYWdlIG1vZGVsIGFjY29yZGluZyB0byBlbnZpcm9ubWVudAogIGZ1bmN0aW9uIF9maERhdGEoKSB7CiAgICBpZiAoX2ZpbGVTeXN0ZW1BdmFpbGFibGUoKSkgewogICAgICBfZmhGaWxlRGF0YS5hcHBseSh7fSwgYXJndW1lbnRzKTsKICAgIH0gZWxzZSB7CiAgICAgIF9maExTRGF0YS5hcHBseSh7fSwgYXJndW1lbnRzKTsKICAgIH0KICB9CiAgLy91c2UgJGZoIGRhdGEKICBmdW5jdGlvbiBfZmhMU0RhdGEob3B0aW9ucywgc3VjY2VzcywgZmFpbHVyZSkgewogICAgLy9hbGxvdyBmb3Igbm8gJGZoIGFwaSBpbiBzdHVkaW8KICAgIGlmKCEgJGZoIHx8ICEgJGZoLmRhdGEpIHsKICAgICAgcmV0dXJuIHN1Y2Nlc3MoKTsKICAgIH0KCiAgICAkZmguZGF0YShvcHRpb25zLCBmdW5jdGlvbiAocmVzKSB7CiAgICAgIGlmICh0eXBlb2YgcmVzID09PSAndW5kZWZpbmVkJykgewogICAgICAgIHJlcyA9IHsKICAgICAgICAgIGtleTogb3B0aW9ucy5rZXksCiAgICAgICAgICB2YWw6IG9wdGlvbnMudmFsCiAgICAgICAgfTsKICAgICAgfQogICAgICAvL3VuaWZ5IHRoZSBpbnRlcmZhY2VzCiAgICAgIGlmIChvcHRpb25zLmFjdC50b0xvd2VyQ2FzZSgpID09PSAncmVtb3ZlJykgewogICAgICAgIHJldHVybiBzdWNjZXNzKG51bGwsIG51bGwpOwogICAgICB9CiAgICAgIHN1Y2Nlc3MobnVsbCwgcmVzLnZhbCA/IHJlcy52YWwgOiBudWxsKTsKICAgIH0sIGZhaWx1cmUpOwogIH0KICAvL3VzZSBmaWxlIHN5c3RlbQogIGZ1bmN0aW9uIF9maEZpbGVEYXRhKG9wdGlvbnMsIHN1Y2Nlc3MsIGZhaWx1cmUpIHsKICAgIGZ1bmN0aW9uIGZhaWwobXNnKSB7CiAgICAgIGlmICh0eXBlb2YgZmFpbHVyZSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICByZXR1cm4gZmFpbHVyZShtc2csIHt9KTsKICAgICAgfSBlbHNlIHt9CiAgICB9CgogICAgZnVuY3Rpb24gZmlsZW5hbWVGb3JLZXkoa2V5LCBjYikgewogICAgICB2YXIgYXBwaWQgPSBhcHBGb3JtLmNvbmZpZy5nZXQoImFwcElkIiwidW5rbm93bkFwcElkIik7CiAgICAgIGtleSA9IGtleSArIGFwcGlkOwogICAgICB1dGlscy5tZDUoa2V5LCBmdW5jdGlvbihlcnIsIGhhc2gpIHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICBoYXNoID0ga2V5OwogICAgICAgIH0KCiAgICAgICAgdmFyIGZpbGVuYW1lID0gaGFzaDsKCiAgICAgICAgaWYoa2V5LmluZGV4T2YoImZpbGVQbGFjZUhvbGRlciIpID09PSAtMSl7CiAgICAgICAgICBmaWxlbmFtZSArPSAiLnR4dCI7CiAgICAgICAgfQoKICAgICAgICBpZiAodHlwZW9mIG5hdmlnYXRvci5leHRlcm5hbHN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICBuYXZpZ2F0b3IuZXh0ZXJuYWxzdG9yYWdlLmVuYWJsZShmdW5jdGlvbiBoYW5kbGVTdWNjZXNzKHJlcykgewogICAgICAgICAgICB2YXIgcGF0aCA9IGZpbGVuYW1lOwogICAgICAgICAgICBpZiAocmVzLnBhdGgpIHsKICAgICAgICAgICAgICBwYXRoID0gcmVzLnBhdGg7CiAgICAgICAgICAgICAgaWYgKCFwYXRoLm1hdGNoKC9cLyQvKSkgewogICAgICAgICAgICAgICAgcGF0aCArPSAnLyc7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHBhdGggKz0gZmlsZW5hbWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZmlsZW5hbWUgPSBwYXRoOwogICAgICAgICAgICByZXR1cm4gY2IoZmlsZW5hbWUpOwogICAgICAgICAgfSwgZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyKSB7CiAgICAgICAgICAgIHJldHVybiBjYihmaWxlbmFtZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIGNiKGZpbGVuYW1lKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIHNhdmUoa2V5LCB2YWx1ZSkgewogICAgICBmaWxlbmFtZUZvcktleShrZXksIGZ1bmN0aW9uKGhhc2gpIHsKICAgICAgICBmaWxlU3lzdGVtLnNhdmUoaGFzaCwgdmFsdWUsIGZ1bmN0aW9uKGVyciwgcmVzKSB7CiAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgIGZhaWwoZXJyKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN1Y2Nlc3MobnVsbCwgdmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmUoa2V5KSB7CiAgICAgIGZpbGVuYW1lRm9yS2V5KGtleSwgZnVuY3Rpb24oaGFzaCkgewogICAgICAgIGZpbGVTeXN0ZW0ucmVtb3ZlKGhhc2gsIGZ1bmN0aW9uKGVycikgewogICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICBpZiAoZXJyLm5hbWUgPT09ICdOb3RGb3VuZEVycm9yJyB8fCBlcnIuY29kZSA9PT0gMSkgewogICAgICAgICAgICAgIC8vc2FtZSByZXNwb25zIG9mICRmaC5kYXRhIGlmIGtleSBub3QgZm91bmQuCiAgICAgICAgICAgICAgc3VjY2VzcyhudWxsLCBudWxsKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBmYWlsKGVycik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN1Y2Nlc3MobnVsbCwgbnVsbCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGxvYWQoa2V5KSB7CiAgICAgIGZpbGVuYW1lRm9yS2V5KGtleSwgZnVuY3Rpb24oaGFzaCkgewogICAgICAgIGZpbGVTeXN0ZW0ucmVhZEFzVGV4dChoYXNoLCBmdW5jdGlvbihlcnIsIHRleHQpIHsKICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgaWYgKGVyci5uYW1lID09PSAnTm90Rm91bmRFcnJvcicgfHwgZXJyLmNvZGUgPT09IDEpIHsKICAgICAgICAgICAgICAvL3NhbWUgcmVzcG9ucyBvZiAkZmguZGF0YSBpZiBrZXkgbm90IGZvdW5kLgogICAgICAgICAgICAgIHN1Y2Nlc3MobnVsbCwgbnVsbCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZmFpbChlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdWNjZXNzKG51bGwsIHRleHQpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBsb2FkRmlsZShrZXkpIHsKICAgICAgZmlsZW5hbWVGb3JLZXkoa2V5LCBmdW5jdGlvbihoYXNoKSB7CiAgICAgICAgZmlsZVN5c3RlbS5yZWFkQXNGaWxlKGhhc2gsIGZ1bmN0aW9uKGVyciwgZmlsZSkgewogICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICBpZiAoZXJyLm5hbWUgPT09ICdOb3RGb3VuZEVycm9yJyB8fCBlcnIuY29kZSA9PT0gMSkgewogICAgICAgICAgICAgIC8vc2FtZSByZXNwb25zIG9mICRmaC5kYXRhIGlmIGtleSBub3QgZm91bmQuCiAgICAgICAgICAgICAgc3VjY2VzcyhudWxsLCBudWxsKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBmYWlsKGVycik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN1Y2Nlc3MobnVsbCwgZmlsZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hY3QgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgIHJldHVybiBsb2FkKG9wdGlvbnMua2V5KTsKICAgIH0gZWxzZSBpZiAob3B0aW9ucy5hY3QgPT09ICdzYXZlJykgewogICAgICByZXR1cm4gc2F2ZShvcHRpb25zLmtleSwgb3B0aW9ucy52YWwpOwogICAgfSBlbHNlIGlmIChvcHRpb25zLmFjdCA9PT0gJ3JlbW92ZScpIHsKICAgICAgcmV0dXJuIHJlbW92ZShvcHRpb25zLmtleSk7CiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuYWN0ID09PSAnbG9hZCcpIHsKICAgICAgcmV0dXJuIGxvYWQob3B0aW9ucy5rZXkpOwogICAgfSBlbHNlIGlmIChvcHRpb25zLmFjdCA9PT0gJ2xvYWRGaWxlJykgewogICAgICByZXR1cm4gbG9hZEZpbGUob3B0aW9ucy5rZXkpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKHR5cGVvZiBmYWlsdXJlICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIHJldHVybiBmYWlsdXJlKCdBY3Rpb24gWycgKyBvcHRpb25zLmFjdCArICddIGlzIG5vdCBkZWZpbmVkJywge30pOwogICAgICB9CiAgICB9CiAgfQogIG1vZHVsZS5sb2NhbFN0b3JhZ2UgPSBuZXcgTG9jYWxTdG9yYWdlKCk7CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLnN0b3JlcyB8fCB7fSk7CmFwcEZvcm0uc3RvcmVzID0gZnVuY3Rpb24obW9kdWxlKSB7CiAgdmFyIFN0b3JlID0gYXBwRm9ybS5zdG9yZXMuU3RvcmU7CiAgbW9kdWxlLm1CYWFTID0gbmV3IE1CYWFTKCk7CgogIGZ1bmN0aW9uIE1CYWFTKCkgewogICAgU3RvcmUuY2FsbCh0aGlzLCAnTUJhYVMnKTsKICB9CiAgYXBwRm9ybS51dGlscy5leHRlbmQoTUJhYVMsIFN0b3JlKTsKICBNQmFhUy5wcm90b3R5cGUuY2hlY2tTdHVkaW8gPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBhcHBGb3JtLmNvbmZpZy5nZXQoInN0dWRpb01vZGUiKTsKICB9OwogIE1CYWFTLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbihtb2RlbCwgY2IpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGlmIChzZWxmLmNoZWNrU3R1ZGlvKCkpIHsKICAgICAgY2IoIlN0dWRpbyBtb2RlIG1iYWFzIG5vdCBzdXBwb3J0ZWQiKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciB1cmwgPSBfZ2V0VXJsKG1vZGVsKTsKICAgICAgaWYoc2VsZi5pc0ZpbGVBbmRQaG9uZUdhcChtb2RlbCkpewogICAgICAgIGFwcEZvcm0ud2ViLnVwbG9hZEZpbGUodXJsLCBtb2RlbC5nZXRQcm9wcygpLCBjYik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYXBwRm9ybS53ZWIuYWpheC5wb3N0KHVybCwgbW9kZWwuZ2V0UHJvcHMoKSwgY2IpOwogICAgICB9CiAgICB9CiAgfTsKICBNQmFhUy5wcm90b3R5cGUuaXNGaWxlQW5kUGhvbmVHYXAgPSBmdW5jdGlvbihtb2RlbCl7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICByZXR1cm4gc2VsZi5pc0ZpbGVUcmFuc2Zlcihtb2RlbCkgJiYgc2VsZi5pc1Bob25lR2FwKCk7CiAgfTsKICBNQmFhUy5wcm90b3R5cGUuaXNGaWxlVHJhbnNmZXIgPSBmdW5jdGlvbihtb2RlbCl7CiAgICByZXR1cm4gKG1vZGVsLmdldCgiX3R5cGUiKSA9PT0gImZpbGVTdWJtaXNzaW9uIiB8fCBtb2RlbC5nZXQoIl90eXBlIikgPT09ICJiYXNlNjRmaWxlU3VibWlzc2lvbiIgfHwgbW9kZWwuZ2V0KCJfdHlwZSIpID09PSAiZmlsZVN1Ym1pc3Npb25Eb3dubG9hZCIpOwogIH07CiAgTUJhYVMucHJvdG90eXBlLmlzUGhvbmVHYXAgPSBmdW5jdGlvbigpewogICAgcmV0dXJuICh0eXBlb2Ygd2luZG93LlBob25lZ2FwICE9PSAidW5kZWZpbmVkIiB8fCB0eXBlb2Ygd2luZG93LmNvcmRvdmEgIT09ICJ1bmRlZmluZWQiKTsKICB9OwogIE1CYWFTLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24obW9kZWwsIGNiKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBpZiAoc2VsZi5jaGVja1N0dWRpbygpKSB7CiAgICAgIGNiKCJTdHVkaW8gbW9kZSBtYmFhcyBub3Qgc3VwcG9ydGVkIik7CiAgICB9IGVsc2UgewogICAgICBpZiAobW9kZWwuZ2V0KCJfdHlwZSIpID09PSAib2ZmbGluZVRlc3QiKSB7CiAgICAgICAgY2IoIm9mZmxpbmV0ZXN0LiBpZ25vcmUiKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgdXJsID0gX2dldFVybChtb2RlbCk7CgogICAgICAgIGlmKHNlbGYuaXNGaWxlVHJhbnNmZXIobW9kZWwpICYmIHNlbGYuaXNQaG9uZUdhcCgpKXsKICAgICAgICAgIGFwcEZvcm0ud2ViLmRvd25sb2FkRmlsZSh1cmwsIG1vZGVsLmdldEZpbGVNZXRhRGF0YSgpLCBjYik7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYoc2VsZi5pc0ZpbGVUcmFuc2Zlcihtb2RlbCkpIHsvL1RyeWluZyB0byBkb3dubG9hZCBhIGZpbGUgd2l0aG91dCBwaG9uZS4gTm8gbmVlZCBhcyB0aGUgZGlyZWN0IHdlYiB1cmxzIGNhbiBiZSB1c2VkCiAgICAgICAgICByZXR1cm4gY2IobnVsbCwgbW9kZWwuZ2V0UmVtb3RlRmlsZVVSTCgpKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICBhcHBGb3JtLndlYi5hamF4LmdldCh1cmwsIGNiKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9OwogIE1CYWFTLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihtb2RlbCwgY2IpIHt9OwogIE1CYWFTLnByb3RvdHlwZVsiZGVsZXRlIl0gPSBmdW5jdGlvbihtb2RlbCwgY2IpIHt9OwogIC8vQERlcHJlY2F0ZWQgdXNlIGNyZWF0ZSBpbnN0ZWFkCiAgTUJhYVMucHJvdG90eXBlLmNvbXBsZXRlU3VibWlzc2lvbiA9IGZ1bmN0aW9uKHN1Ym1pc3Npb25Ub0NvbXBsZXRlLCBjYikgewogICAgaWYgKHRoaXMuY2hlY2tTdHVkaW8oKSkgewogICAgICByZXR1cm4gY2IoIlN0dWRpbyBtb2RlIG1iYWFzIG5vdCBzdXBwb3J0ZWQiKTsKICAgIH0KICAgIHZhciB1cmwgPSBfZ2V0VXJsKHN1Ym1pc3Npb25Ub0NvbXBsZXRlKTsKICAgIGFwcEZvcm0ud2ViLmFqYXgucG9zdCh1cmwsIHt9LCBjYik7CiAgfTsKICBNQmFhUy5wcm90b3R5cGUuc3VibWlzc2lvblN0YXR1cyA9IGZ1bmN0aW9uKHN1Ym1pc3Npb24sIGNiKSB7CiAgICBpZiAodGhpcy5jaGVja1N0dWRpbygpKSB7CiAgICAgIHJldHVybiBjYigiU3R1ZGlvIG1vZGUgbWJhYXMgbm90IHN1cHBvcnRlZCIpOwogICAgfQogICAgdmFyIHVybCA9IF9nZXRVcmwoc3VibWlzc2lvbik7CiAgICBhcHBGb3JtLndlYi5hamF4LmdldCh1cmwsIGNiKTsKICB9OwogIE1CYWFTLnByb3RvdHlwZS5pc09ubGluZSA9IGZ1bmN0aW9uKGNiKXsKICAgIHZhciBob3N0ID0gYXBwRm9ybS5jb25maWcuZ2V0Q2xvdWRIb3N0KCk7CiAgICB2YXIgdXJsID0gaG9zdCArIGFwcEZvcm0uY29uZmlnLmdldCgnc3RhdHVzVXJsJywgIi9zeXMvaW5mby9waW5nIik7CgogICAgYXBwRm9ybS53ZWIuYWpheC5nZXQodXJsLCBmdW5jdGlvbihlcnIpewogICAgICBpZihlcnIpewogICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiT25saW5lIHN0YXR1cyBhamF4ICIsIGVycik7CiAgICAgICAgcmV0dXJuIGNiKGZhbHNlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAkZmguZm9ybXMubG9nLmQoIk9ubGluZSBzdGF0dXMgYWpheCBzdWNjZXNzIik7CiAgICAgICAgcmV0dXJuIGNiKHRydWUpOwogICAgICB9CiAgICB9KTsKICB9OwoKICBmdW5jdGlvbiBfZ2V0VXJsKG1vZGVsKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIl9nZXRVcmwgIiwgbW9kZWwpOwogICAgdmFyIHR5cGUgPSBtb2RlbC5nZXQoJ190eXBlJyk7CiAgICB2YXIgaG9zdCA9IGFwcEZvcm0uY29uZmlnLmdldENsb3VkSG9zdCgpOwogICAgdmFyIG1CYWFTQmFzZVVybCA9IGFwcEZvcm0uY29uZmlnLmdldCgnbWJhYXNCYXNlVXJsJyk7CiAgICB2YXIgZm9ybVVybHMgPSBhcHBGb3JtLmNvbmZpZy5nZXQoJ2Zvcm1VcmxzJyk7CiAgICB2YXIgcmVsYXRpdmVVcmwgPSAiIjsKICAgIGlmIChmb3JtVXJsc1t0eXBlXSkgewogICAgICByZWxhdGl2ZVVybCA9IGZvcm1VcmxzW3R5cGVdOwogICAgfSBlbHNlIHsKICAgICAgJGZoLmZvcm1zLmxvZy5lKCd0eXBlIG5vdCBmb3VuZCB0byBnZXQgdXJsOicgKyB0eXBlKTsKICAgIH0KICAgIHZhciB1cmwgPSBob3N0ICsgbUJhYVNCYXNlVXJsICsgcmVsYXRpdmVVcmw7CiAgICB2YXIgcHJvcHMgPSB7fTsKICAgIHByb3BzLmFwcElkID0gYXBwRm9ybS5jb25maWcuZ2V0KCdhcHBJZCcpOwogICAgLy9UaGVtZSBhbmQgZm9ybXMgZG8gbm90IHJlcXVpcmUgYW55IHBhcmFtZXRlcnMgdGhhdCBhcmUgbm90IGluIF9maAogICAgc3dpdGNoICh0eXBlKSB7CiAgICAgIGNhc2UgJ2NvbmZpZyc6CiAgICAgICAgcHJvcHMuYXBwaWQgPSBtb2RlbC5nZXQoImFwcElkIik7CiAgICAgICAgcHJvcHMuZGV2aWNlSWQgPSBtb2RlbC5nZXQoImRldmljZUlkIik7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ2Zvcm0nOgogICAgICAgIHByb3BzLmZvcm1JZCA9IG1vZGVsLmdldCgnX2lkJyk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ2Zvcm1TdWJtaXNzaW9uJzoKICAgICAgICBwcm9wcy5mb3JtSWQgPSBtb2RlbC5nZXRGb3JtSWQoKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnZmlsZVN1Ym1pc3Npb24nOgogICAgICAgIHByb3BzLnN1Ym1pc3Npb25JZCA9IG1vZGVsLmdldFN1Ym1pc3Npb25JZCgpOwogICAgICAgIHByb3BzLmhhc2hOYW1lID0gbW9kZWwuZ2V0SGFzaE5hbWUoKTsKICAgICAgICBwcm9wcy5maWVsZElkID0gbW9kZWwuZ2V0RmllbGRJZCgpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdiYXNlNjRmaWxlU3VibWlzc2lvbic6CiAgICAgICAgcHJvcHMuc3VibWlzc2lvbklkID0gbW9kZWwuZ2V0U3VibWlzc2lvbklkKCk7CiAgICAgICAgcHJvcHMuaGFzaE5hbWUgPSBtb2RlbC5nZXRIYXNoTmFtZSgpOwogICAgICAgIHByb3BzLmZpZWxkSWQgPSBtb2RlbC5nZXRGaWVsZElkKCk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ3N1Ym1pc3Npb25TdGF0dXMnOgogICAgICAgIHByb3BzLnN1Ym1pc3Npb25JZCA9IG1vZGVsLmdldCgnc3VibWlzc2lvbklkJyk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ2NvbXBsZXRlU3VibWlzc2lvbic6CiAgICAgICAgcHJvcHMuc3VibWlzc2lvbklkID0gbW9kZWwuZ2V0KCdzdWJtaXNzaW9uSWQnKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnZm9ybVN1Ym1pc3Npb25Eb3dubG9hZCc6CiAgICAgICAgcHJvcHMuc3VibWlzc2lvbklkID0gbW9kZWwuZ2V0U3VibWlzc2lvbklkKCk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ2ZpbGVTdWJtaXNzaW9uRG93bmxvYWQnOgogICAgICAgIHByb3BzLnN1Ym1pc3Npb25JZCA9IG1vZGVsLmdldFN1Ym1pc3Npb25JZCgpOwogICAgICAgIHByb3BzLmZpbGVHcm91cElkID0gbW9kZWwuZ2V0RmlsZUdyb3VwSWQoKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnb2ZmbGluZVRlc3QnOgogICAgICAgIHJldHVybiAiaHR0cDovLzEyNy4wLjAuMTo4NDUzIjsKICAgIH0KICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykgewogICAgICB1cmwgPSB1cmwucmVwbGFjZSgnOicgKyBrZXksIHByb3BzW2tleV0pOwogICAgfQogICAgcmV0dXJuIHVybDsKICB9CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLnN0b3JlcyB8fCB7fSk7CmFwcEZvcm0uc3RvcmVzID0gZnVuY3Rpb24gKG1vZHVsZSkgewogIHZhciBTdG9yZSA9IGFwcEZvcm0uc3RvcmVzLlN0b3JlOwogIC8vRGF0YUFnZW50IGlzIHJlYWQgb25seSBzdG9yZQogIG1vZHVsZS5EYXRhQWdlbnQgPSBEYXRhQWdlbnQ7CiAgbW9kdWxlLmRhdGFBZ2VudCA9IG5ldyBEYXRhQWdlbnQoYXBwRm9ybS5zdG9yZXMubUJhYVMsIGFwcEZvcm0uc3RvcmVzLmxvY2FsU3RvcmFnZSk7CiAgLy9kZWZhdWx0IGRhdGEgYWdlbnQgdXNlcyBtYmFhcyBhcyByZW1vdGUgc3RvcmUsIGxvY2Fsc3RvcmFnZSBhcyBsb2NhbCBzdG9yZQogIGZ1bmN0aW9uIERhdGFBZ2VudChyZW1vdGVTdG9yZSwgbG9jYWxTdG9yZSkgewogICAgU3RvcmUuY2FsbCh0aGlzLCAnRGF0YUFnZW50Jyk7CiAgICB0aGlzLnJlbW90ZVN0b3JlID0gcmVtb3RlU3RvcmU7CiAgICB0aGlzLmxvY2FsU3RvcmUgPSBsb2NhbFN0b3JlOwogIH0KICBhcHBGb3JtLnV0aWxzLmV4dGVuZChEYXRhQWdlbnQsIFN0b3JlKTsKICAvKioKICAgICAqIFJlYWQgZnJvbSBsb2NhbCBzdG9yZSBmaXJzdCwgaWYgbm90IGV4aXN0cywgcmVhZCBmcm9tIHJlbW90ZSBzdG9yZSBhbmQgc3RvcmUgbG9jYWxseQogICAgICogQHBhcmFtICB7W3R5cGVdfSAgIG1vZGVsIFtkZXNjcmlwdGlvbl0KICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYiAgICAoZXJyLHJlcyxpc0Zyb21SZW1vdGUpCiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgRGF0YUFnZW50LnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG1vZGVsLCBjYikgewogICAgJGZoLmZvcm1zLmxvZy5kKCJEYXRhQWdlbnQgcmVhZCAiLCBtb2RlbCk7CiAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICB0aGlzLmxvY2FsU3RvcmUucmVhZChtb2RlbCwgZnVuY3Rpb24gKGVyciwgbG9jUmVzKSB7CiAgICAgIGlmIChlcnIgfHwgIWxvY1JlcykgewogICAgICAgIC8vbG9jYWwgbG9hZGluZyBmYWlsZWQKCiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJFcnJvciByZWFkaW5nIG1vZGVsIGZyb20gbG9jYWxTdG9yZSAiLCBtb2RlbCwgZXJyKTsKCiAgICAgICAgdGhhdC5yZWZyZXNoUmVhZChtb2RlbCwgY2IpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vbG9jYWwgbG9hZGluZyBzdWNjZWVkCiAgICAgICAgY2IobnVsbCwgbG9jUmVzLCBmYWxzZSk7CiAgICAgIH0KICAgIH0pOwogIH07CiAgLyoqCiAgICAgKiBSZWFkIGZyb20gcmVtb3RlIHN0b3JlIGFuZCBzdG9yZSB0aGUgY29udGVudCBsb2NhbGx5LgogICAgICogQHBhcmFtICB7W3R5cGVdfSAgIG1vZGVsIFtkZXNjcmlwdGlvbl0KICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYiAgICBbZGVzY3JpcHRpb25dCiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgRGF0YUFnZW50LnByb3RvdHlwZS5yZWZyZXNoUmVhZCA9IGZ1bmN0aW9uIChtb2RlbCwgY2IpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiRGF0YUFnZW50IHJlZnJlc2hSZWFkICIsIG1vZGVsKTsKICAgIHZhciB0aGF0ID0gdGhpczsKICAgIHRoaXMucmVtb3RlU3RvcmUucmVhZChtb2RlbCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHJlYWRpbmcgbW9kZWwgZnJvbSByZW1vdGVTdG9yZSAiLCBtb2RlbCwgZXJyKTsKICAgICAgICBjYihlcnIpOwogICAgICB9IGVsc2UgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiTW9kZWwgcmVmcmVzaCBzdWNjZXNzZnVsbCBmcm9tIHJlbW90ZVN0b3JlICIsIG1vZGVsLCByZXMpOwogICAgICAgIC8vdXBkYXRlIG1vZGVsIGZyb20gcmVtb3RlIHJlc3BvbnNlCiAgICAgICAgbW9kZWwuZnJvbUpTT04ocmVzKTsKICAgICAgICAvL3VwZGF0ZSBsb2NhbCBzdG9yYWdlIGZvciB0aGUgbW9kZWwKICAgICAgICB0aGF0LmxvY2FsU3RvcmUudXBzZXJ0KG1vZGVsLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7CiAgICAgICAgICBhcmdzLnB1c2godHJ1ZSk7CiAgICAgICAgICBjYi5hcHBseSh7fSwgYXJncyk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH07CgogIC8qKgogICAqIEF0dGVtcHQgdG8gcnVuIHJlZnJlc2ggcmVhZCBmaXJzdCwgaWYgZmFpbGVkLCBydW4gcmVhZC4KICAgKiBAcGFyYW0gIHtbdHlwZV19ICAgbW9kZWwgW2Rlc2NyaXB0aW9uXQogICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYiAgICBbZGVzY3JpcHRpb25dCiAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgIFtkZXNjcmlwdGlvbl0KICAgKi8KICBEYXRhQWdlbnQucHJvdG90eXBlLmF0dGVtcHRSZWFkPWZ1bmN0aW9uKG1vZGVsLGNiKXsKICAgICRmaC5mb3Jtcy5sb2cuZCgiRGF0YUFnZW50IGF0dGVtcHRSZWFkICIsIG1vZGVsKTsKICAgIHZhciBzZWxmPXRoaXM7CgoKICAgIHNlbGYuY2hlY2tPbmxpbmVTdGF0dXMoZnVuY3Rpb24ob25saW5lKXsKICAgICAgaWYoJGZoLmZvcm1zLmNvbmZpZy5pc09ubGluZSgpKXsKICAgICAgICBzZWxmLnJlZnJlc2hSZWFkKG1vZGVsLGZ1bmN0aW9uKGVycil7CiAgICAgICAgICBpZiAoZXJyKXsKICAgICAgICAgICAgc2VsZi5yZWFkKG1vZGVsLGNiKTsKICAgICAgICAgIH1lbHNlewogICAgICAgICAgICBjYi5hcHBseSh7fSxhcmd1bWVudHMpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHNlbGYucmVhZChtb2RlbCxjYik7CiAgICAgIH0KICAgIH0pOwogIH07CgogIC8qKgogICAqIENoZWNrIG9ubGluZSBzdGF0dXMgb2YgdGhlIHJlbW90ZSBzdG9yZS4KICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2IgICAgW2Rlc2NyaXB0aW9uXQogICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICBbZGVzY3JpcHRpb25dCiAgICovCiAgRGF0YUFnZW50LnByb3RvdHlwZS5jaGVja09ubGluZVN0YXR1cz1mdW5jdGlvbihjYil7CiAgICAkZmguZm9ybXMubG9nLmQoIkRhdGFBZ2VudCBjaGVjayBvbmxpbmUgc3RhdHVzICIpOwogICAgdmFyIHNlbGY9dGhpczsKCiAgICBpZihhcHBGb3JtLnV0aWxzLmlzUGhvbmVHYXAoKSl7CiAgICAgIGlmKG5hdmlnYXRvci5jb25uZWN0aW9uKXsKICAgICAgICBpZihuYXZpZ2F0b3IuY29ubmVjdGlvbi50eXBlICYmIG5hdmlnYXRvci5jb25uZWN0aW9uLnR5cGUgPT09IENvbm5lY3Rpb24uTk9ORSl7CiAgICAgICAgICAvL05vIGNvbm5lY3Rpb24gYXZhaWxhYmlsZSwgbm8gbmVlZCB0byBwaW5nLgogICAgICAgICAgJGZoLmZvcm1zLmNvbmZpZy5vZmZsaW5lKCk7CiAgICAgICAgICByZXR1cm4gY2IoZmFsc2UpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKCiAgICBzZWxmLnJlbW90ZVN0b3JlLmlzT25saW5lKGZ1bmN0aW9uKG9ubGluZSl7CiAgICAgIGlmKG9ubGluZSA9PT0gZmFsc2UpewogICAgICAgICRmaC5mb3Jtcy5jb25maWcub2ZmbGluZSgpOwogICAgICB9IGVsc2UgewogICAgICAgICRmaC5mb3Jtcy5jb25maWcub25saW5lKCk7CiAgICAgIH0KCiAgICAgIGNiKG51bGwsIG9ubGluZSk7CiAgICB9KTsKICB9OwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5zdG9yZXMgfHwge30pOwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICBmdW5jdGlvbiBNb2RlbChvcHQpIHsKICAgIHRoaXMucHJvcHMgPSB7CiAgICAgICdfaWQnOiBudWxsLAogICAgICAnX3R5cGUnOiBudWxsLAogICAgICAnX2x1ZGlkJzogbnVsbAogICAgfTsKICAgIHRoaXMudXRpbHMgPSBhcHBGb3JtLnV0aWxzOwogICAgdGhpcy5ldmVudHMgPSB7fTsKICAgIGlmICh0eXBlb2Ygb3B0ICE9PSAndW5kZWZpbmVkJykgewogICAgICBmb3IgKHZhciBrZXkgaW4gb3B0KSB7CiAgICAgICAgdGhpcy5wcm9wc1trZXldID0gb3B0W2tleV07CiAgICAgIH0KICAgIH0KICAgIHRoaXMudG91Y2goKTsKICB9CiAgTW9kZWwucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKG5hbWUsIGZ1bmMpIHsKICAgIGlmICghdGhpcy5ldmVudHNbbmFtZV0pIHsKICAgICAgdGhpcy5ldmVudHNbbmFtZV0gPSBbXTsKICAgIH0KICAgIGlmICh0aGlzLmV2ZW50c1tuYW1lXS5pbmRleE9mKGZ1bmMpIDwgMCkgewogICAgICB0aGlzLmV2ZW50c1tuYW1lXS5wdXNoKGZ1bmMpOwogICAgfQogIH07CiAgTW9kZWwucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChuYW1lLCBmdW5jKSB7CiAgICBpZiAodGhpcy5ldmVudHNbbmFtZV0pIHsKICAgICAgaWYgKHRoaXMuZXZlbnRzW25hbWVdLmluZGV4T2YoZnVuYykgPj0gMCkgewogICAgICAgIHRoaXMuZXZlbnRzW25hbWVdLnNwbGljZSh0aGlzLmV2ZW50c1tuYW1lXS5pbmRleE9mKGZ1bmMpLCAxKTsKICAgICAgfQogICAgfQogIH07CgogIE1vZGVsLnByb3RvdHlwZS5jbGVhckV2ZW50cyA9IGZ1bmN0aW9uKCl7CiAgICB0aGlzLmV2ZW50cyA9IHt9OwogIH07CiAgTW9kZWwucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7CiAgICB2YXIgZSA9IGFyZ3Muc2hpZnQoKTsKICAgIHZhciBmdW5jcyA9IHRoaXMuZXZlbnRzW2VdOwogICAgaWYgKGZ1bmNzICYmIGZ1bmNzLmxlbmd0aCA+IDApIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBmdW5jID0gZnVuY3NbaV07CiAgICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgfQogICAgfQogIH07CiAgTW9kZWwucHJvdG90eXBlLmdldFByb3BzID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMucHJvcHM7CiAgfTsKICBNb2RlbC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSwgZGVmKSB7CiAgICByZXR1cm4gdHlwZW9mIHRoaXMucHJvcHNba2V5XSA9PT0gJ3VuZGVmaW5lZCcgPyBkZWYgOiB0aGlzLnByb3BzW2tleV07CiAgfTsKICBNb2RlbC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsKSB7CiAgICB0aGlzLnByb3BzW2tleV0gPSB2YWw7CiAgfTsKICBNb2RlbC5wcm90b3R5cGUuc2V0TG9jYWxJZCA9IGZ1bmN0aW9uIChsb2NhbElkKSB7CiAgICB0aGlzLnNldCgnX2x1ZGlkJywgbG9jYWxJZCk7CiAgfTsKICBNb2RlbC5wcm90b3R5cGUuZ2V0TG9jYWxJZCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgnX2x1ZGlkJyk7CiAgfTsKICBNb2RlbC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHJldEpTT04gPSB7fTsKICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnByb3BzKSB7CiAgICAgIHJldEpTT05ba2V5XT0gdGhpcy5wcm9wc1trZXldOwogICAgfQogICAgcmV0dXJuIHJldEpTT047CiAgfTsKICBNb2RlbC5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikgewogICAgaWYgKHR5cGVvZiBqc29uID09PSAnc3RyaW5nJykgewogICAgICB0aGlzLmZyb21KU09OU3RyKGpzb24pOwogICAgfSBlbHNlIHsKICAgICAgZm9yICh2YXIga2V5IGluIGpzb24pIHsKICAgICAgICB0aGlzLnNldChrZXksIGpzb25ba2V5XSk7CiAgICAgIH0KICAgIH0KICAgIHRoaXMudG91Y2goKTsKICB9OwogIE1vZGVsLnByb3RvdHlwZS5mcm9tSlNPTlN0ciA9IGZ1bmN0aW9uIChqc29uU3RyKSB7CiAgICB0cnkgewogICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UoanNvblN0cik7CiAgICAgIHRoaXMuZnJvbUpTT04oanNvbik7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoIkVycm9yIHBhcnNpbmcgSlNPTiIsIGUpOwogICAgfQogIH07CgogIE1vZGVsLnByb3RvdHlwZS50b3VjaCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuc2V0KCdfbG9jYWxMYXN0VXBkYXRlJywgYXBwRm9ybS51dGlscy5nZXRUaW1lKCkpOwogIH07CiAgTW9kZWwucHJvdG90eXBlLmdldExvY2FsVXBkYXRlVGltZVN0YW1wID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdfbG9jYWxMYXN0VXBkYXRlJyk7CiAgfTsKICBNb2RlbC5wcm90b3R5cGUuZ2VuTG9jYWxJZCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBhcHBGb3JtLnV0aWxzLmxvY2FsSWQodGhpcyk7CiAgfTsKICAvKioKICAgICAqIHJldHJpZXZlIG1vZGVsIGZyb20gbG9jYWwgb3IgcmVtb3RlIHdpdGggZGF0YSBhZ2VudCBzdG9yZS4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZnJvbVJlbW90ZSBvcHRpb25hbCB0cnVlLS1mb3JjZSBmcm9tIHJlbW90ZQogICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiIChlcnIsY3VycmVudE1vZGVsKQogICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgIFtkZXNjcmlwdGlvbl0KICAgICAqLwogIE1vZGVsLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKGZyb21SZW1vdGUsIGNiKSB7CiAgICB2YXIgZGF0YUFnZW50ID0gdGhpcy5nZXREYXRhQWdlbnQoKTsKICAgIHZhciB0aGF0ID0gdGhpczsKICAgIGlmICh0eXBlb2YgY2IgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgIGNiID0gZnJvbVJlbW90ZTsKICAgICAgZnJvbVJlbW90ZSA9IGZhbHNlOwogICAgfQogICAgaWYgKGZyb21SZW1vdGUpIHsKICAgICAgZGF0YUFnZW50LmF0dGVtcHRSZWFkKHRoaXMsIF9oYW5kbGVyKTsKICAgIH0gZWxzZSB7CiAgICAgIGRhdGFBZ2VudC5yZWFkKHRoaXMsIF9oYW5kbGVyKTsKICAgIH0KICAgIGZ1bmN0aW9uIF9oYW5kbGVyKGVyciwgcmVzKSB7CiAgICAgIGlmICghZXJyICYmIHJlcykgewogICAgICAgIHRoYXQuZnJvbUpTT04ocmVzKTsKICAgICAgICBjYihudWxsLCB0aGF0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjYihlcnIsIHRoYXQpOwogICAgICB9CiAgICB9CiAgfTsKICBNb2RlbC5wcm90b3R5cGUuYXR0ZW1wdFJlZnJlc2g9ZnVuY3Rpb24oY2IpewogICAgdmFyIGRhdGFBZ2VudCA9IHRoaXMuZ2V0RGF0YUFnZW50KCk7CiAgICB2YXIgc2VsZj10aGlzOwogICAgZGF0YUFnZW50LmF0dGVtcHRSZWFkKHRoaXMsZnVuY3Rpb24oZXJyLHJlcyl7CiAgICAgIGlmICghZXJyICYmIHJlcyl7CiAgICAgICAgc2VsZi5mcm9tSlNPTihyZXMpOwogICAgICAgIGNiKG51bGwsc2VsZik7CiAgICAgIH1lbHNlewogICAgICAgIGNiKGVycixzZWxmKTsKICAgICAgfQogICAgfSk7CiAgfTsKICAvKioKICAgICAqIFJldHJpZXZlIG1vZGVsIGZyb20gbG9jYWwgc3RvcmFnZSBzdG9yZQogICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiIChlcnIsIGN1ck1vZGVsKQogICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgIFtkZXNjcmlwdGlvbl0KICAgICAqLwogIE1vZGVsLnByb3RvdHlwZS5sb2FkTG9jYWwgPSBmdW5jdGlvbiAoY2IpIHsKICAgIHZhciBsb2NhbFN0b3JhZ2UgPSBhcHBGb3JtLnN0b3Jlcy5sb2NhbFN0b3JhZ2U7CiAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICBsb2NhbFN0b3JhZ2UucmVhZCh0aGlzLCBmdW5jdGlvbiAoZXJyLCByZXMpIHsKICAgICAgaWYgKGVycikgewogICAgICAgIGNiKGVycik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHJlcykgewogICAgICAgICAgdGhhdC5mcm9tSlNPTihyZXMpOwogICAgICAgIH0KICAgICAgICBjYihlcnIsIHRoYXQpOwogICAgICB9CiAgICB9KTsKICB9OwogIC8qKgogICAgICogc2F2ZSBjdXJyZW50IG1vZGVsIHRvIGxvY2FsIHN0b3JhZ2Ugc3RvcmUKICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYiBbZGVzY3JpcHRpb25dCiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgTW9kZWwucHJvdG90eXBlLnNhdmVMb2NhbCA9IGZ1bmN0aW9uIChjYikgewogICAgdmFyIGxvY2FsU3RvcmFnZSA9IGFwcEZvcm0uc3RvcmVzLmxvY2FsU3RvcmFnZTsKICAgIGxvY2FsU3RvcmFnZS51cHNlcnQodGhpcywgY2IpOwogIH07CiAgLyoqCiAgICAgKiBSZW1vdmUgY3VycmVudCBtb2RlbCBmcm9tIGxvY2FsIHN0b3JhZ2Ugc3RvcmUKICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYiBbZGVzY3JpcHRpb25dCiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgTW9kZWwucHJvdG90eXBlLmNsZWFyTG9jYWwgPSBmdW5jdGlvbiAoY2IpIHsKICAgIHZhciBsb2NhbFN0b3JhZ2UgPSBhcHBGb3JtLnN0b3Jlcy5sb2NhbFN0b3JhZ2U7CiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlRW50cnkodGhpcywgY2IpOwogIH07CiAgTW9kZWwucHJvdG90eXBlLmdldERhdGFBZ2VudCA9IGZ1bmN0aW9uICgpIHsKICAgIGlmICghdGhpcy5kYXRhQWdlbnQpIHsKICAgICAgdGhpcy5zZXREYXRhQWdlbnQoYXBwRm9ybS5zdG9yZXMuZGF0YUFnZW50KTsKICAgIH0KICAgIHJldHVybiB0aGlzLmRhdGFBZ2VudDsKICB9OwogIE1vZGVsLnByb3RvdHlwZS5zZXREYXRhQWdlbnQgPSBmdW5jdGlvbiAoZGF0YUFnZW50KSB7CiAgICB0aGlzLmRhdGFBZ2VudCA9IGRhdGFBZ2VudDsKICB9OwogIG1vZHVsZS5Nb2RlbCA9IE1vZGVsOwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5tb2RlbHMgfHwge30pOwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uKG1vZHVsZSkgewogIHZhciBNb2RlbCA9IGFwcEZvcm0ubW9kZWxzLk1vZGVsOwogIHZhciBvbmxpbmUgPSB0cnVlOwogIHZhciBjbG91ZEhvc3QgPSAibm90c2V0IjsKCiAgZnVuY3Rpb24gQ29uZmlnKCkgewogICAgTW9kZWwuY2FsbCh0aGlzLCB7CiAgICAgICdfdHlwZSc6ICdjb25maWcnLAogICAgICAiX2x1ZGlkIjogImNvbmZpZyIKICAgIH0pOwoKICB9CiAgYXBwRm9ybS51dGlscy5leHRlbmQoQ29uZmlnLCBNb2RlbCk7CiAgLy9jYWxsIGluIGFwcEZvcm0uaW5pdAogIENvbmZpZy5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGNvbmZpZywgY2IpIHsKICAgIGlmIChjb25maWcuc3R1ZGlvTW9kZSkgeyAvL3J1bm5pbmcgaW4gc3R1ZGlvCiAgICAgIHRoaXMuc2V0KCJzdHVkaW9Nb2RlIiwgdHJ1ZSk7CiAgICAgIHRoaXMuZnJvbUpTT04oY29uZmlnKTsKICAgICAgY2IoKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuc2V0KCJzdHVkaW9Nb2RlIiwgZmFsc2UpOwogICAgICAvL2xvYWQgaGFyZCBjb2RlZCBzdGF0aWMgY29uZmlnIGZpcnN0CiAgICAgIHRoaXMuc3RhdGljQ29uZmlnKGNvbmZpZyk7CiAgICAgIC8vYXR0ZW1wdCB0byBsb2FkIGNvbmZpZyBmcm9tIG1iYWFzIHRoZW4gbG9jYWwgc3RvcmFnZS4KICAgICAgdGhpcy5yZWZyZXNoKHRydWUsIGNiKTsgCiAgICB9CiAgfTsKICBDb25maWcucHJvdG90eXBlLmlzU3R1ZGlvTW9kZSA9IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5nZXQoInN0dWRpb01vZGUiKTsKICB9OwogIENvbmZpZy5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uIChmcm9tUmVtb3RlLCBjYikgewogICAgdmFyIGRhdGFBZ2VudCA9IHRoaXMuZ2V0RGF0YUFnZW50KCk7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBpZiAodHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykgewogICAgICBjYiA9IGZyb21SZW1vdGU7CiAgICAgIGZyb21SZW1vdGUgPSBmYWxzZTsKICAgIH0KCiAgICBmdW5jdGlvbiBfaGFuZGxlcihlcnIsIHJlcykgewogICAgICB2YXIgY29uZmlnT2JqID0ge307CgogICAgICBpZiAoIWVyciAmJiByZXMpIHsKICAgICAgICBpZih0eXBlb2YocmVzKSA9PT0gInN0cmluZyIpewogICAgICAgICAgdHJ5ewogICAgICAgICAgICBjb25maWdPYmogPSBKU09OLnBhcnNlKHJlcyk7CiAgICAgICAgICB9IGNhdGNoKGVycm9yKXsKICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJJbnZhbGlkIGpzb24gY29uZmlnIGRlZmludGlvbiBmcm9tIHJlbW90ZSIsIGVycm9yKTsKICAgICAgICAgICAgY29uZmlnT2JqID0ge307CiAgICAgICAgICAgIHJldHVybiBjYihlcnJvciwgbnVsbCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbmZpZ09iaiA9IHJlczsKICAgICAgICB9CgogICAgICAgIHNlbGYuc2V0KCJkZWZhdWx0Q29uZmlnVmFsdWVzIiwgY29uZmlnT2JqKTsKICAgICAgICBzZWxmLnNhdmVMb2NhbChmdW5jdGlvbihlcnIsIHVwZGF0ZWRDb25maWdKU09OKXsKICAgICAgICAgIGNiKGVyciwgc2VsZik7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2IoZXJyLCBzZWxmKTsKICAgICAgfQogICAgfQogICAgc2VsZi5sb2FkTG9jYWwoZnVuY3Rpb24oZXJyLCBsb2NhbENvbmZpZyl7CiAgICAgIGlmKGVycikgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiQ29uZmlnIGxvYWRMb2NhbCAiLCBlcnIpOwogICAgICB9CgogICAgICBkYXRhQWdlbnQucmVtb3RlU3RvcmUucmVhZChzZWxmLCBfaGFuZGxlcik7CiAgICB9KTsKICB9OwogIENvbmZpZy5wcm90b3R5cGUuZ2V0Q2xvdWRIb3N0ID0gZnVuY3Rpb24oKXsKICAgIHJldHVybiBjbG91ZEhvc3Q7ICAKICB9OwogIENvbmZpZy5wcm90b3R5cGUuc3RhdGljQ29uZmlnID0gZnVuY3Rpb24oY29uZmlnKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgZGVmYXVsdENvbmZpZyA9IHsiZGVmYXVsdENvbmZpZ1ZhbHVlcyI6IHt9LCAidXNlckNvbmZpZ1ZhbHVlcyI6IHt9fTsKICAgIC8vSWYgdXNlciBhbHJlYWR5IGhhcyBzZXQgdmFsdWVzLCBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGVtCiAgICBpZihzZWxmLmdldCgidXNlckNvbmZpZ1ZhbHVlcyIpKXsKICAgICAgZGVmYXVsdENvbmZpZy51c2VyQ29uZmlnVmFsdWVzID0gc2VsZi5nZXQoInVzZXJDb25maWdWYWx1ZXMiKTsKICAgIH0KICAgIHZhciBhcHBpZCA9ICRmaCAmJiAkZmguYXBwX3Byb3BzID8gJGZoLmFwcF9wcm9wcy5hcHBpZCA6IGNvbmZpZy5hcHBpZDsKICAgIHZhciBtb2RlID0gJGZoICYmICRmaC5hcHBfcHJvcHMgPyAkZmguYXBwX3Byb3BzLm1vZGUgOiAnZGV2JzsKICAgIHNlbGYuc2V0KCdhcHBJZCcsIGFwcGlkKTsKICAgIHNlbGYuc2V0KCdlbnYnLCBtb2RlKTsKCiAgICBpZigkZmggJiYgJGZoLl9nZXREZXZpY2VJZCl7CiAgICAgIHNlbGYuc2V0KCdkZXZpY2VJZCcsICRmaC5fZ2V0RGV2aWNlSWQoKSk7CiAgICB9IGVsc2UgewogICAgICBzZWxmLnNldCgnZGV2aWNlSWQnLCAibm90c2V0Iik7CiAgICB9CgoKICAgIHNlbGYuX2luaXRNQmFhUyhjb25maWcpOwogICAgLy9TZXR0aW5nIGRlZmF1bHQgcmV0cnkgYXR0ZW1wdHMgaWYgbm90IHNldCBpbiB0aGUgY29uZmlnCiAgICBpZiAoIWNvbmZpZykgewogICAgICBjb25maWcgPSB7fTsKICAgIH0KCiAgICAvL2NvbmZpZ19hZG1pbl91c2VyIGNhbiBub3QgYmUgc2V0IGJ5IHRoZSB1c2VyLgogICAgaWYoY29uZmlnLmNvbmZpZ19hZG1pbl91c2VyKXsKICAgICAgZGVsZXRlIGNvbmZpZy5jb25maWdfYWRtaW5fdXNlcjsKICAgIH0KCiAgICBkZWZhdWx0Q29uZmlnLmRlZmF1bHRDb25maWdWYWx1ZXMgPSBjb25maWc7CiAgICB2YXIgc3RhdGljQ29uZmlnID0gewogICAgICAic2VudF9zYXZlX21pbiI6IDUsCiAgICAgICJzZW50X3NhdmVfbWF4IjogMTAwMCwKICAgICAgInRhcmdldFdpZHRoIjogNjQwLAogICAgICAidGFyZ2V0SGVpZ2h0IjogNDgwLAogICAgICAicXVhbGl0eSI6IDUwLAogICAgICAiZGVidWdfbW9kZSI6IGZhbHNlLAogICAgICAibG9nZ2VyIjogZmFsc2UsCiAgICAgICJtYXhfcmV0cmllcyI6IDMsCiAgICAgICJ0aW1lb3V0IjogNywKICAgICAgImxvZ19saW5lX2xpbWl0IjogNTAwMCwKICAgICAgImxvZ19lbWFpbCI6ICJ0ZXN0QGV4YW1wbGUuY29tIiwKICAgICAgImxvZ19sZXZlbCI6IDMsCiAgICAgICJsb2dfbGV2ZWxzIjogWyJlcnJvciIsICJ3YXJuaW5nIiwgImxvZyIsICJkZWJ1ZyJdLAogICAgICAiY29uZmlnX2FkbWluX3VzZXIiOiB0cnVlLAogICAgICAicGljdHVyZV9zb3VyY2UiOiAiYm90aCIsCiAgICAgICJzYXZlVG9QaG90b0FsYnVtIjogdHJ1ZSwKICAgICAgImVuY29kaW5nVHlwZSI6ICJqcGVnIiwKICAgICAgInNlbnRfaXRlbXNfdG9fa2VlcF9saXN0IjogWzUsIDEwLCAyMCwgMzAsIDQwLCA1MCwgMTAwXQogICAgfTsKCiAgICBmb3IodmFyIGtleSBpbiBzdGF0aWNDb25maWcpewogICAgICBkZWZhdWx0Q29uZmlnLmRlZmF1bHRDb25maWdWYWx1ZXNba2V5XSA9IHN0YXRpY0NvbmZpZ1trZXldOwogICAgfQoKICAgIHNlbGYuZnJvbUpTT04oZGVmYXVsdENvbmZpZyk7CiAgfTsKICBDb25maWcucHJvdG90eXBlLl9pbml0TUJhYVMgPSBmdW5jdGlvbihjb25maWcpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTsKICAgIHZhciBjbG91ZF9wcm9wcyA9ICRmaC5jbG91ZF9wcm9wczsKICAgIHZhciBhcHBfcHJvcHMgPSAkZmguYXBwX3Byb3BzOwogICAgdmFyIG1vZGUgPSAnZGV2JzsKICAgIGlmIChhcHBfcHJvcHMpIHsKICAgICAgY2xvdWRIb3N0ID0gYXBwX3Byb3BzLmhvc3Q7CiAgICB9CiAgICBpZiAoY2xvdWRfcHJvcHMgJiYgY2xvdWRfcHJvcHMuaG9zdHMpIHsKICAgICAgY2xvdWRIb3N0ID0gY2xvdWRfcHJvcHMuaG9zdHMudXJsOwogICAgfQoKICAgIGlmKHR5cGVvZihjb25maWcuY2xvdWRIb3N0KSA9PT0gJ3N0cmluZycpewogICAgICBjbG91ZEhvc3QgPSBjb25maWcuY2xvdWRIb3N0OwogICAgfQoKICAgIAogICAgc2VsZi5zZXQoJ21iYWFzQmFzZVVybCcsICcvbWJhYXMnKTsKICAgIHZhciBhcHBJZCA9IHNlbGYuZ2V0KCdhcHBJZCcpOwogICAgc2VsZi5zZXQoJ2Zvcm1VcmxzJywgewogICAgICAnZm9ybXMnOiAnL2Zvcm1zLzphcHBJZCcsCiAgICAgICdmb3JtJzogJy9mb3Jtcy86YXBwSWQvOmZvcm1JZCcsCiAgICAgICd0aGVtZSc6ICcvZm9ybXMvOmFwcElkL3RoZW1lJywKICAgICAgJ2Zvcm1TdWJtaXNzaW9uJzogJy9mb3Jtcy86YXBwSWQvOmZvcm1JZC9zdWJtaXRGb3JtRGF0YScsCiAgICAgICdmaWxlU3VibWlzc2lvbic6ICcvZm9ybXMvOmFwcElkLzpzdWJtaXNzaW9uSWQvOmZpZWxkSWQvOmhhc2hOYW1lL3N1Ym1pdEZvcm1GaWxlJywKICAgICAgJ2Jhc2U2NGZpbGVTdWJtaXNzaW9uJzogJy9mb3Jtcy86YXBwSWQvOnN1Ym1pc3Npb25JZC86ZmllbGRJZC86aGFzaE5hbWUvc3VibWl0Rm9ybUZpbGVCYXNlNjQnLAogICAgICAnc3VibWlzc2lvblN0YXR1cyc6ICcvZm9ybXMvOmFwcElkLzpzdWJtaXNzaW9uSWQvc3RhdHVzJywKICAgICAgJ2Zvcm1TdWJtaXNzaW9uRG93bmxvYWQnOiAnL2Zvcm1zLzphcHBJZC9zdWJtaXNzaW9uLzpzdWJtaXNzaW9uSWQnLAogICAgICAnZmlsZVN1Ym1pc3Npb25Eb3dubG9hZCc6ICcvZm9ybXMvOmFwcElkL3N1Ym1pc3Npb24vOnN1Ym1pc3Npb25JZC9maWxlLzpmaWxlR3JvdXBJZCcsCiAgICAgICdjb21wbGV0ZVN1Ym1pc3Npb24nOiAnL2Zvcm1zLzphcHBJZC86c3VibWlzc2lvbklkL2NvbXBsZXRlU3VibWlzc2lvbicsCiAgICAgICdjb25maWcnOiAnL2Zvcm1zLzphcHBpZC9jb25maWcvOmRldmljZUlkJwogICAgfSk7CiAgICBzZWxmLnNldCgnc3RhdHVzVXJsJywgJy9zeXMvaW5mby9waW5nJyk7CiAgfTsKICBDb25maWcucHJvdG90eXBlLnNldE9ubGluZSA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgd2FzT25saW5lID0gb25saW5lOwogICAgb25saW5lID0gdHJ1ZTsKCiAgICBpZighd2FzT25saW5lKXsKICAgICAgdGhpcy5lbWl0KCdvbmxpbmUnKTsKICAgIH0KICB9OwogIENvbmZpZy5wcm90b3R5cGUuc2V0T2ZmbGluZSA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgd2FzT25saW5lID0gb25saW5lOwogICAgb25saW5lID0gZmFsc2U7CgogICAgaWYod2FzT25saW5lKXsKICAgICAgdGhpcy5lbWl0KCdvZmZsaW5lJyk7ICAKICAgIH0KICB9OwogIENvbmZpZy5wcm90b3R5cGUuaXNPbmxpbmUgPSBmdW5jdGlvbigpewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgaWYoYXBwRm9ybS51dGlscy5pc1Bob25lR2FwKCkpewogICAgICBpZihuYXZpZ2F0b3IuY29ubmVjdGlvbiAmJiBuYXZpZ2F0b3IuY29ubmVjdGlvbi50eXBlKXsKICAgICAgICByZXR1cm4gb25saW5lID09PSB0cnVlICYmIG5hdmlnYXRvci5jb25uZWN0aW9uLnR5cGUgIT09IENvbm5lY3Rpb24uTk9ORTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gb25saW5lID09PSB0cnVlOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gb25saW5lID09PSB0cnVlOwogICAgfQoKICB9OwogIENvbmZpZy5wcm90b3R5cGUuaXNTdHVkaW9Nb2RlID0gZnVuY3Rpb24oKXsKICAgIHJldHVybiB0aGlzLmdldCgic3R1ZGlvTW9kZSIsIGZhbHNlKTsKICB9OwoKICBtb2R1bGUuY29uZmlnID0gbmV3IENvbmZpZygpOwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5tb2RlbHMgfHwge30pOwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICB2YXIgTW9kZWwgPSBhcHBGb3JtLm1vZGVscy5Nb2RlbDsKICBmdW5jdGlvbiBGb3JtcygpIHsKICAgIE1vZGVsLmNhbGwodGhpcywgewogICAgICAnX3R5cGUnOiAnZm9ybXMnLAogICAgICAnX2x1ZGlkJzogJ2Zvcm1zX2xpc3QnLAogICAgICAnbG9hZGVkJzogZmFsc2UKICAgIH0pOwogIH0KICBhcHBGb3JtLnV0aWxzLmV4dGVuZChGb3JtcywgTW9kZWwpOwoKICBGb3Jtcy5wcm90b3R5cGUuaXNGb3JtVXBkYXRlZCA9IGZ1bmN0aW9uIChmb3JtTW9kZWwpIHsKICAgIHZhciBpZCA9IGZvcm1Nb2RlbC5nZXQoJ19pZCcpOwogICAgdmFyIGZvcm1MYXN0VXBkYXRlID0gZm9ybU1vZGVsLmdldExhc3RVcGRhdGUoKTsKICAgIHZhciBmb3JtTWV0YSA9IHRoaXMuZ2V0Rm9ybU1ldGFCeUlkKGlkKTsKICAgIGlmIChmb3JtTWV0YSkgewogICAgICByZXR1cm4gZm9ybUxhc3RVcGRhdGUgIT09IGZvcm1NZXRhLmxhc3RVcGRhdGVkVGltZXN0YW1wOwogICAgfSBlbHNlIHsKICAgICAgLy9jb3VsZCBoYXZlIGJlZW4gZGVsZXRlZC4gbGVhdmUgaXQgZm9yIG5vdwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfTsKICBGb3Jtcy5wcm90b3R5cGUuc2V0TG9jYWxJZCA9IGZ1bmN0aW9uKCl7CiAgICAkZmguZm9ybXMubG9nLmUoIkZvcm1zIHNldExvY2FsSWQuIE5vdCBQZXJtaXR0ZWQgZm9yIEZvcm1zLiIpOwogIH07CiAgRm9ybXMucHJvdG90eXBlLmdldEZvcm1NZXRhQnlJZCA9IGZ1bmN0aW9uIChmb3JtSWQpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiRm9ybXMgZ2V0Rm9ybU1ldGFCeUlkICIsIGZvcm1JZCk7CiAgICB2YXIgZm9ybXMgPSB0aGlzLmdldEZvcm1zTGlzdCgpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3Jtcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgZm9ybSA9IGZvcm1zW2ldOwogICAgICBpZiAoZm9ybS5faWQgPT09IGZvcm1JZCkgewogICAgICAgIHJldHVybiBmb3JtOwogICAgICB9CiAgICB9CiAgICAkZmguZm9ybXMubG9nLmUoIkZvcm1zIGdldEZvcm1NZXRhQnlJZDogTm8gZm9ybSBmb3VuZCBmb3IgaWQ6ICIsIGZvcm1JZCk7CiAgICByZXR1cm4gbnVsbDsKICB9OwogIEZvcm1zLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdmb3JtcycpLmxlbmd0aDsKICB9OwogIEZvcm1zLnByb3RvdHlwZS5nZXRGb3Jtc0xpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ2Zvcm1zJywgW10pOwogIH07CiAgRm9ybXMucHJvdG90eXBlLmdldEZvcm1JZEJ5SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiRm9ybXMgZ2V0Rm9ybUlkQnlJbmRleDogIiwgaW5kZXgpOwogICAgcmV0dXJuIHRoaXMuZ2V0Rm9ybXNMaXN0KClbaW5kZXhdLl9pZDsKICB9OwogIG1vZHVsZS5mb3JtcyA9IG5ldyBGb3JtcygpOwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5tb2RlbHMgfHwge30pOwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICB2YXIgTW9kZWwgPSBhcHBGb3JtLm1vZGVscy5Nb2RlbDsKICBtb2R1bGUuRm9ybSA9IEZvcm07CiAgdmFyIF9mb3JtcyA9IHt9OwogIC8vY2FjaGUgb2YgYWxsIGZvcm1zLiBzaW5nbGUgaW5zdGFuY2UgZm9yIDEgZm9ybWlkCiAgLyoqCiAgICAgKiBbRm9ybSBkZXNjcmlwdGlvbl0KICAgICAqIEBwYXJhbSB7W3R5cGVdfSAgIHBhcmFtcyAge2Zvcm1JZDogc3RyaW5nLCBmcm9tUmVtb3RlOmJvb2xlYW4oZmFsc2UpLCByYXdNb2RlOmZhbHNlLCByYXdEYXRhOkpTT059CiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAgICAgICAgIFtkZXNjcmlwdGlvbl0KICAgICAqLwogIGZ1bmN0aW9uIEZvcm0ocGFyYW1zLCBjYikgewogICAgdmFyIHRoYXQgPSB0aGlzOwogICAgdmFyIHJhd01vZGUgPSBwYXJhbXMucmF3TW9kZSB8fCBmYWxzZTsKICAgIHZhciByYXdEYXRhID0gcGFyYW1zLnJhd0RhdGEgfHwgbnVsbDsKICAgIHZhciBmb3JtSWQgPSBwYXJhbXMuZm9ybUlkOwogICAgdmFyIGZyb21SZW1vdGUgPSBwYXJhbXMuZnJvbVJlbW90ZTsKICAgICRmaC5mb3Jtcy5sb2cuZCgiRm9ybTogIiwgcmF3TW9kZSwgcmF3RGF0YSwgZm9ybUlkLCBmcm9tUmVtb3RlKTsKCiAgICBpZiAodHlwZW9mIGZyb21SZW1vdGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIGlmICh0eXBlb2YgZnJvbVJlbW90ZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIGNiID0gZnJvbVJlbW90ZTsKICAgICAgICBmcm9tUmVtb3RlID0gZmFsc2U7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAkZmguZm9ybXMubG9nLmUoJ2EgY2FsbGJhY2sgZnVuY3Rpb24gaXMgcmVxdWlyZWQgZm9yIGluaXRpYWxpc2luZyBmb3JtIGRhdGEuIG5ldyBGb3JtIChmb3JtSWQsIFtpc0Zyb21SZW1vdGVdLCBjYiknKTsKICAgIH0KCiAgICBpZiAoIWZvcm1JZCkgewogICAgICByZXR1cm4gY2IoJ0Nhbm5vdCBpbml0aWFsaXNlIGEgZm9ybSBvYmplY3Qgd2l0aG91dCBhbiBpZC4gaWQ6JyArIGZvcm1JZCwgbnVsbCk7CiAgICB9CgoKICAgIE1vZGVsLmNhbGwodGhhdCwgewogICAgICAnX2lkJzogZm9ybUlkLAogICAgICAnX3R5cGUnOiAnZm9ybScKICAgIH0pOwogICAgdGhhdC5zZXQoJ19pZCcsIGZvcm1JZCk7CiAgICB0aGF0LnNldExvY2FsSWQodGhhdC5nZW5Mb2NhbElkKGZvcm1JZCkpOwoKCiAgICBmdW5jdGlvbiBsb2FkRnJvbUxvY2FsKCl7CiAgICAgICRmaC5mb3Jtcy5sb2cuZCgiRm9ybTogbG9hZEZyb21Mb2NhbCAiLCByYXdNb2RlLCByYXdEYXRhLCBmb3JtSWQsIGZyb21SZW1vdGUpOwogICAgICBpZiAoX2Zvcm1zW2Zvcm1JZF0pIHsKICAgICAgICAvL2ZvdW5kIGZvcm0gb2JqZWN0IGluIG1lbSByZXR1cm4gaXQuCiAgICAgICAgY2IobnVsbCwgX2Zvcm1zW2Zvcm1JZF0pOwogICAgICAgIHJldHVybiBfZm9ybXNbZm9ybUlkXTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gcHJvY2Vzc1Jhd0Zvcm1KU09OKCl7CiAgICAgICAgdGhhdC5mcm9tSlNPTihyYXdEYXRhKTsKICAgICAgICB0aGF0LmluaXRpYWxpc2UoKTsKCiAgICAgICAgX2Zvcm1zW3RoYXQuZ2V0Rm9ybUlkKCldID0gdGhhdDsKICAgICAgICByZXR1cm4gY2IobnVsbCwgdGhhdCk7CiAgICAgIH0KCiAgICAgIGlmKHJhd0RhdGEpewogICAgICAgIHJldHVybiBwcm9jZXNzUmF3Rm9ybUpTT04oKTsKICAgICAgfSBlbHNlIHsKCiAgICAgICAgLyoqCiAgICAgICAgICogTm8gRm9ybSBKU09OIG9iamVjdCB0byBwcm9jZXNzIGludG8gTW9kZWxzLCBsb2FkIHRoZSBmb3JtIGZyb20gbG9jYWwKICAgICAgICAgKiBzdG9yYWdlLgogICAgICAgICAqLwogICAgICAgIHRoYXQucmVmcmVzaChmYWxzZSwgZnVuY3Rpb24oZXJyLCBmb3JtKXsKICAgICAgICAgIGlmKGVycil7CiAgICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgICAgfQoKICAgICAgICAgIGZvcm0uaW5pdGlhbGlzZSgpOwoKICAgICAgICAgIF9mb3Jtc1tmb3JtSWRdID0gZm9ybTsKICAgICAgICAgIHJldHVybiBjYihudWxsLCBmb3JtKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBsb2FkRnJvbVJlbW90ZSgpewogICAgICAkZmguZm9ybXMubG9nLmQoIkZvcm06IGxvYWRGcm9tUmVtb3RlIiwgcmF3TW9kZSwgcmF3RGF0YSwgZm9ybUlkLCBmcm9tUmVtb3RlKTsKICAgICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGUoZm9ybSl7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJGb3JtOiBjaGVja0ZvclVwZGF0ZSIsIHJhd01vZGUsIHJhd0RhdGEsIGZvcm1JZCwgZnJvbVJlbW90ZSk7CiAgICAgICAgZm9ybS5yZWZyZXNoKGZhbHNlLCBmdW5jdGlvbiAoZXJyLCBvYmopIHsKICAgICAgICAgIGlmKGVycil7CiAgICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHJlZnJlc2hpbmcgZm9ybSBmcm9tIGxvY2FsOiAiLCBlcnIpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGFwcEZvcm0ubW9kZWxzLmZvcm1zLmlzRm9ybVVwZGF0ZWQoZm9ybSkpIHsKICAgICAgICAgICAgZm9ybS5yZWZyZXNoKHRydWUsIGZ1bmN0aW9uIChlcnIsIG9iajEpIHsKICAgICAgICAgICAgICBpZihlcnIpewogICAgICAgICAgICAgICAgcmV0dXJuIGNiKGVyciwgbnVsbCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZvcm0uaW5pdGlhbGlzZSgpOwoKICAgICAgICAgICAgICBfZm9ybXNbZm9ybUlkXSA9IG9iajE7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKGVyciwgb2JqMSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZm9ybS5pbml0aWFsaXNlKCk7CiAgICAgICAgICAgIF9mb3Jtc1tmb3JtSWRdID0gb2JqOwogICAgICAgICAgICBjYihlcnIsIG9iaik7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmIChfZm9ybXNbZm9ybUlkXSkgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiRm9ybTogbG9hZGVkIGZyb20gY2FjaGUiLCByYXdNb2RlLCByYXdEYXRhLCBmb3JtSWQsIGZyb21SZW1vdGUpOwogICAgICAgIC8vZm91bmQgZm9ybSBvYmplY3QgaW4gbWVtIHJldHVybiBpdC4KICAgICAgICBpZighYXBwRm9ybS5tb2RlbHMuZm9ybXMuaXNGb3JtVXBkYXRlZChfZm9ybXNbZm9ybUlkXSkpewogICAgICAgICAgY2IobnVsbCwgX2Zvcm1zW2Zvcm1JZF0pOwogICAgICAgICAgcmV0dXJuIF9mb3Jtc1tmb3JtSWRdOwogICAgICAgIH0KICAgICAgfQoKICAgICAgY2hlY2tGb3JVcGRhdGUodGhhdCk7CiAgICB9CgogICAgLy9SYXcgbW9kZSBpcyBmb3IgYXZvaWRpbmcgaW50ZXJhY3Rpb24gd2l0aCB0aGUgbWJhYXMKICAgIGlmKHJhd01vZGUgPT09IHRydWUpewogICAgICBsb2FkRnJvbUxvY2FsKCk7CiAgICB9IGVsc2UgewogICAgICBsb2FkRnJvbVJlbW90ZSgpOwogICAgfQogIH0KICBhcHBGb3JtLnV0aWxzLmV4dGVuZChGb3JtLCBNb2RlbCk7CiAgRm9ybS5wcm90b3R5cGUuZ2V0TGFzdFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiRm9ybTogZ2V0TGFzdFVwZGF0ZSIpOwogICAgcmV0dXJuIHRoaXMuZ2V0KCdsYXN0VXBkYXRlZFRpbWVzdGFtcCcpOwogIH07CiAgRm9ybS5wcm90b3R5cGUuZ2VuTG9jYWxJZCA9IGZ1bmN0aW9uIChmb3JtSWQpIHsKICAgIGZvcm1JZCA9IHR5cGVvZihmb3JtSWQpID09PSAnc3RyaW5nJyA/IGZvcm1JZCA6IHRoaXMuZ2V0KCJfaWQiLCAiIik7CiAgICByZXR1cm4gImZvcm1fIiArIGZvcm1JZDsKICB9OwogIC8qKgogICAgICogSW5pdGlsaWFzZSBmb3JtIGpzb24gdG8gb2JqZWN0cwogICAgICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dCiAgICAgKi8KICBGb3JtLnByb3RvdHlwZS5pbml0aWFsaXNlID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5maWx0ZXJBZG1pbkZpZWxkcygpOwogICAgdGhpcy5pbml0aWFsaXNlUGFnZSgpOwogICAgdGhpcy5pbml0aWFsaXNlRmllbGRzKCk7CiAgICB0aGlzLmluaXRpYWxpc2VSdWxlcygpOwogIH07CiAgLyoqCiAgICogQWRtaW4gZmllbGRzIHNob3VsZCBub3QgYmUgcGFydCBvZiB0aGUgZm9ybS4KICAgKi8KICBGb3JtLnByb3RvdHlwZS5maWx0ZXJBZG1pbkZpZWxkcyA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgcGFnZXMgPSB0aGlzLmdldFBhZ2VzRGVmKCk7CiAgICB2YXIgbmV3RmllbGRSZWYgPSB7fTsKCgogICAgZm9yKHZhciBwYWdlSW5kZXggPSAwOyBwYWdlSW5kZXggPCBwYWdlcy5sZW5ndGg7IHBhZ2VJbmRleCsrKXsKICAgICAgdmFyIHBhZ2UgPSBwYWdlc1twYWdlSW5kZXhdOwogICAgICB2YXIgcGFnZUZpZWxkcyA9IHBhZ2UuZmllbGRzOwogICAgICB2YXIgZmlsdGVyZWRGaWVsZHMgPSBbXTsKICAgICAgdmFyIGZpZWxkSW5QYWdlSW5kZXggPSAwOwoKICAgICAgZm9yKHZhciBmaWVsZEluZGV4ID0gMDsgZmllbGRJbmRleCA8IHBhZ2VGaWVsZHMubGVuZ3RoOyBmaWVsZEluZGV4KyspewogICAgICAgIHZhciBmaWVsZCA9IHBhZ2VGaWVsZHNbZmllbGRJbmRleF07CgogICAgICAgIGlmKCFmaWVsZC5hZG1pbk9ubHkpewogICAgICAgICAgbmV3RmllbGRSZWZbZmllbGQuX2lkXSA9IHtwYWdlOiBwYWdlSW5kZXgsIGZpZWxkOiBmaWVsZEluUGFnZUluZGV4fTsKICAgICAgICAgIGZpZWxkSW5QYWdlSW5kZXgrKzsKICAgICAgICAgIGZpbHRlcmVkRmllbGRzLnB1c2goZmllbGQpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcGFnZXNbcGFnZUluZGV4XS5maWVsZHMgPSBmaWx0ZXJlZEZpZWxkczsKICAgIH0KCiAgICB0aGlzLnNldCgicGFnZXMiLCBwYWdlcyk7CiAgICB0aGlzLnNldCgiZmllbGRSZWYiLCBuZXdGaWVsZFJlZik7CiAgfTsKCiAgRm9ybS5wcm90b3R5cGUuaW5pdGlhbGlzZUZpZWxkcyA9IGZ1bmN0aW9uICgpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiRm9ybTogaW5pdGlhbGlzZUZpZWxkcyIpOwogICAgdmFyIGZpZWxkc1JlZiA9IHRoaXMuZ2V0RmllbGRSZWYoKTsKICAgIHRoaXMuZmllbGRzID0ge307CiAgICBmb3IgKHZhciBmaWVsZElkIGluIGZpZWxkc1JlZikgewogICAgICB2YXIgZmllbGRSZWYgPSBmaWVsZHNSZWZbZmllbGRJZF07CiAgICAgIHZhciBwYWdlSW5kZXggPSBmaWVsZFJlZi5wYWdlOwogICAgICB2YXIgZmllbGRJbmRleCA9IGZpZWxkUmVmLmZpZWxkOwogICAgICBpZiAocGFnZUluZGV4ID09PSB1bmRlZmluZWQgfHwgZmllbGRJbmRleCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhyb3cgJ0NvcnJ1cHR0ZWQgZmllbGQgcmVmZXJlbmNlJzsKICAgICAgfQogICAgICB2YXIgZmllbGREZWYgPSB0aGlzLmdldEZpZWxkRGVmQnlJbmRleChwYWdlSW5kZXgsIGZpZWxkSW5kZXgpOwogICAgICBpZiAoZmllbGREZWYpIHsKICAgICAgICB0aGlzLmZpZWxkc1tmaWVsZElkXSA9IG5ldyBhcHBGb3JtLm1vZGVscy5GaWVsZChmaWVsZERlZiwgdGhpcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgJ0ZpZWxkIGRlZiBpcyBub3QgZm91bmQuJzsKICAgICAgfQogICAgfQogIH07CiAgRm9ybS5wcm90b3R5cGUuaW5pdGlhbGlzZVJ1bGVzID0gZnVuY3Rpb24gKCkgewogICAgJGZoLmZvcm1zLmxvZy5kKCJGb3JtOiBpbml0aWFsaXNlUnVsZXMiKTsKICAgIHRoaXMucnVsZXMgPSB7fTsKICAgIHZhciBwYWdlUnVsZXMgPSB0aGlzLmdldFBhZ2VSdWxlcygpOwogICAgdmFyIGZpZWxkUnVsZXMgPSB0aGlzLmdldEZpZWxkUnVsZXMoKTsKICAgIHZhciBjb25zdHJ1Y3RvcnMgPSBbXTsKICAgIGZvciAodmFyIGkgPSAwOyBpPHBhZ2VSdWxlcy5sZW5ndGggOyBpKyspIHsKICAgICAgdmFyIHBhZ2VSdWxlID0gcGFnZVJ1bGVzW2ldOwogICAgICBjb25zdHJ1Y3RvcnMucHVzaCh7CiAgICAgICAgJ3R5cGUnOiAncGFnZScsCiAgICAgICAgJ2RlZmluaXRpb24nOiBwYWdlUnVsZQogICAgICB9KTsKICAgIH0KICAgIGZvciAoaSA9IDA7IGk8ZmllbGRSdWxlcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgZmllbGRSdWxlID0gZmllbGRSdWxlc1tpXTsKICAgICAgY29uc3RydWN0b3JzLnB1c2goewogICAgICAgICd0eXBlJzogJ2ZpZWxkJywKICAgICAgICAnZGVmaW5pdGlvbic6IGZpZWxkUnVsZQogICAgICB9KTsKICAgIH0KICAgIGZvciAoaSA9IDA7IGk8Y29uc3RydWN0b3JzLmxlbmd0aCA7IGkrKykgewogICAgICB2YXIgY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcnNbaV07CiAgICAgIHZhciBydWxlT2JqID0gbmV3IGFwcEZvcm0ubW9kZWxzLlJ1bGUoY29uc3RydWN0b3IpOwogICAgICB2YXIgZmllbGRJZHMgPSBydWxlT2JqLmdldFJlbGF0ZWRGaWVsZElkKCk7CiAgICAgIGZvciAodmFyIGogPSAwOyBqPGZpZWxkSWRzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgdmFyICBmaWVsZElkID0gZmllbGRJZHNbal07CiAgICAgICAgaWYgKCF0aGlzLnJ1bGVzW2ZpZWxkSWRdKSB7CiAgICAgICAgICB0aGlzLnJ1bGVzW2ZpZWxkSWRdID0gW107CiAgICAgICAgfQogICAgICAgIHRoaXMucnVsZXNbZmllbGRJZF0ucHVzaChydWxlT2JqKTsKICAgICAgfQogICAgfQogIH07CiAgRm9ybS5wcm90b3R5cGUuZ2V0UnVsZXNCeUZpZWxkSWQgPSBmdW5jdGlvbiAoZmllbGRJZCkgewogICAgJGZoLmZvcm1zLmxvZy5kKCJGb3JtOiBnZXRSdWxlc0J5RmllbGRJZCIpOwogICAgcmV0dXJuIHRoaXMucnVsZXNbZmllbGRJZF07CiAgfTsKICBGb3JtLnByb3RvdHlwZS5pbml0aWFsaXNlUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiRm9ybTogaW5pdGlhbGlzZVBhZ2UiKTsKICAgIHZhciBwYWdlcyA9IHRoaXMuZ2V0UGFnZXNEZWYoKTsKICAgIHRoaXMucGFnZXMgPSBbXTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFnZXMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHBhZ2VEZWYgPSBwYWdlc1tpXTsKICAgICAgdmFyIHBhZ2VNb2RlbCA9IG5ldyBhcHBGb3JtLm1vZGVscy5QYWdlKHBhZ2VEZWYsIHRoaXMpOwogICAgICB0aGlzLnBhZ2VzLnB1c2gocGFnZU1vZGVsKTsKICAgIH0KICB9OwogIEZvcm0ucHJvdG90eXBlLmdldFBhZ2VOdW1iZXJCeUZpZWxkSWQgPSBmdW5jdGlvbihmaWVsZElkKXsKICAgIGlmKGZpZWxkSWQpewogICAgICByZXR1cm4gdGhpcy5nZXRGaWVsZFJlZigpW2ZpZWxkSWRdLnBhZ2U7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9OwogIEZvcm0ucHJvdG90eXBlLmdldFBhZ2VNb2RlbExpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5wYWdlczsKICB9OwogIEZvcm0ucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ25hbWUnLCAnJyk7CiAgfTsKICBGb3JtLnByb3RvdHlwZS5nZXREZXNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgnZGVzY3JpcHRpb24nLCAnJyk7CiAgfTsKICBGb3JtLnByb3RvdHlwZS5nZXRQYWdlUnVsZXMgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ3BhZ2VSdWxlcycsIFtdKTsKICB9OwogIEZvcm0ucHJvdG90eXBlLmdldEZpZWxkUnVsZXMgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ2ZpZWxkUnVsZXMnLCBbXSk7CiAgfTsKICBGb3JtLnByb3RvdHlwZS5nZXRGaWVsZFJlZiA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgnZmllbGRSZWYnLCB7fSk7CiAgfTsKICBGb3JtLnByb3RvdHlwZS5nZXRQYWdlc0RlZiA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgncGFnZXMnLCBbXSk7CiAgfTsKICBGb3JtLnByb3RvdHlwZS5nZXRQYWdlUmVmID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdwYWdlUmVmJywge30pOwogIH07CiAgRm9ybS5wcm90b3R5cGUuZ2V0RmllbGRNb2RlbEJ5SWQgPSBmdW5jdGlvbiAoZmllbGRJZCkgewogICAgcmV0dXJuIHRoaXMuZmllbGRzW2ZpZWxkSWRdOwogIH07CiAgLyoqCiAgICogRmluZGluZyBhIGZpZWxkIG1vZGVsIGJ5IHRoZSBGaWVsZCBDb2RlIHNwZWNpZmllZCBpbiB0aGUgc3R1ZGlvIGlmIGl0IGV4aXN0cwogICAqIE90aGVyd2lzZSByZXR1cm4gbnVsbDsKICAgKiBAcGFyYW0gY29kZSAtIFRoZSBjb2RlIG9mIHRoZSBmaWVsZCB0aGF0IGlzIGJlaW5nIHNlYXJjaGVkIGZvcgogICAqLwogIEZvcm0ucHJvdG90eXBlLmdldEZpZWxkTW9kZWxCeUNvZGUgPSBmdW5jdGlvbihjb2RlKXsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGlmKCFjb2RlIHx8IHR5cGVvZihjb2RlKSAhPT0gInN0cmluZyIpewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICBmb3IodmFyIGZpZWxkSWQgaW4gc2VsZi5maWVsZHMpewogICAgICB2YXIgZmllbGQgPSBzZWxmLmZpZWxkc1tmaWVsZElkXTsKICAgICAgaWYoZmllbGQuZ2V0Q29kZSgpICE9PSBudWxsICYmIGZpZWxkLmdldENvZGUoKSA9PT0gY29kZSl7CiAgICAgICAgcmV0dXJuIGZpZWxkOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG51bGw7CiAgfTsKICBGb3JtLnByb3RvdHlwZS5nZXRGaWVsZERlZkJ5SW5kZXggPSBmdW5jdGlvbiAocGFnZUluZGV4LCBmaWVsZEluZGV4KSB7CiAgICAkZmguZm9ybXMubG9nLmQoIkZvcm06IGdldEZpZWxkRGVmQnlJbmRleDogIiwgcGFnZUluZGV4LCBmaWVsZEluZGV4KTsKICAgIHZhciBwYWdlcyA9IHRoaXMuZ2V0UGFnZXNEZWYoKTsKICAgIHZhciBwYWdlID0gcGFnZXNbcGFnZUluZGV4XTsKICAgIGlmIChwYWdlKSB7CiAgICAgIHZhciBmaWVsZHMgPSBwYWdlLmZpZWxkcyA/IHBhZ2UuZmllbGRzIDogW107CiAgICAgIHZhciBmaWVsZCA9IGZpZWxkc1tmaWVsZEluZGV4XTsKICAgICAgaWYgKGZpZWxkKSB7CiAgICAgICAgcmV0dXJuIGZpZWxkOwogICAgICB9CiAgICB9CiAgICAkZmguZm9ybXMubG9nLmUoIkZvcm06IGdldEZpZWxkRGVmQnlJbmRleDogTm8gZmllbGQgZm91bmQgZm9yIHBhZ2UgYW5kIGZpZWxkIGluZGV4OiAiLCBwYWdlSW5kZXgsIGZpZWxkSW5kZXgpOwogICAgcmV0dXJuIG51bGw7CiAgfTsKICBGb3JtLnByb3RvdHlwZS5nZXRQYWdlTW9kZWxCeUlkID0gZnVuY3Rpb24gKHBhZ2VJZCkgewogICAgJGZoLmZvcm1zLmxvZy5kKCJGb3JtOiBnZXRQYWdlTW9kZWxCeUlkOiAiLCBwYWdlSWQpOwogICAgdmFyIGluZGV4ID0gdGhpcy5nZXRQYWdlUmVmKClbcGFnZUlkXTsKICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICRmaC5mb3Jtcy5sb2cuZSgncGFnZSBpZCBpcyBub3QgZm91bmQgaW4gcGFnZVJlZjogJyArIHBhZ2VJZCk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gdGhpcy5wYWdlc1tpbmRleF07CiAgICB9CiAgfTsKICBGb3JtLnByb3RvdHlwZS5uZXdTdWJtaXNzaW9uID0gZnVuY3Rpb24gKCkgewogICAgJGZoLmZvcm1zLmxvZy5kKCJGb3JtOiBuZXdTdWJtaXNzaW9uIik7CiAgICByZXR1cm4gYXBwRm9ybS5tb2RlbHMuc3VibWlzc2lvbi5uZXdJbnN0YW5jZSh0aGlzKTsKICB9OwogIEZvcm0ucHJvdG90eXBlLmdldEZvcm1JZCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgnX2lkJyk7CiAgfTsKICBGb3JtLnByb3RvdHlwZS5yZW1vdmVGcm9tQ2FjaGUgPSBmdW5jdGlvbiAoKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIkZvcm06IHJlbW92ZUZyb21DYWNoZSIpOwogICAgaWYgKF9mb3Jtc1t0aGlzLmdldEZvcm1JZCgpXSkgewogICAgICBkZWxldGUgX2Zvcm1zW3RoaXMuZ2V0Rm9ybUlkKCldOwogICAgfQogIH07CiAgRm9ybS5wcm90b3R5cGUuZ2V0RmlsZUZpZWxkc0lkID0gZnVuY3Rpb24gKCkgewogICAgJGZoLmZvcm1zLmxvZy5kKCJGb3JtOiBnZXRGaWxlRmllbGRzSWQiKTsKICAgIHZhciBmaWVsZHNJZCA9IFtdOwogICAgZm9yICh2YXIgZmllbGRJZCBpbiB0aGlzLmZpZWxkcykgewogICAgICB2YXIgZmllbGQgPSB0aGlzLmZpZWxkc1tmaWVsZElkXTsKICAgICAgaWYgKGZpZWxkLmdldFR5cGUoKSA9PT0gJ2ZpbGUnIHx8IGZpZWxkLmdldFR5cGUoKSA9PT0gJ3Bob3RvJyB8fCBmaWVsZC5nZXRUeXBlKCkgPT09ICdzaWduYXR1cmUnKSB7CiAgICAgICAgZmllbGRzSWQucHVzaChmaWVsZElkKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGZpZWxkc0lkOwogIH07CgogIEZvcm0ucHJvdG90eXBlLmdldFJ1bGVFbmdpbmUgPSBmdW5jdGlvbiAoKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIkZvcm06IGdldFJ1bGVFbmdpbmUiKTsKICAgIGlmICh0aGlzLnJ1bGVzRW5naW5lKSB7CiAgICAgIHJldHVybiB0aGlzLnJ1bGVzRW5naW5lOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGZvcm1EZWZpbml0aW9uID0gdGhpcy5nZXRQcm9wcygpOwogICAgICB0aGlzLnJ1bGVzRW5naW5lID0gbmV3IGFwcEZvcm0uUnVsZXNFbmdpbmUoZm9ybURlZmluaXRpb24pOwogICAgICByZXR1cm4gdGhpcy5ydWxlc0VuZ2luZTsKICAgIH0KICB9OwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5tb2RlbHMgfHwge30pOwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICB2YXIgTW9kZWwgPSBhcHBGb3JtLm1vZGVscy5Nb2RlbDsKICBtb2R1bGUuRmlsZVN1Ym1pc3Npb24gPSBGaWxlU3VibWlzc2lvbjsKICBmdW5jdGlvbiBGaWxlU3VibWlzc2lvbihmaWxlRGF0YSkgewogICAgJGZoLmZvcm1zLmxvZy5kKCJGaWxlU3VibWlzc2lvbiAiLCBmaWxlRGF0YSk7CiAgICBNb2RlbC5jYWxsKHRoaXMsIHsKICAgICAgJ190eXBlJzogJ2ZpbGVTdWJtaXNzaW9uJywKICAgICAgJ2RhdGEnOiBmaWxlRGF0YQogICAgfSk7CiAgfQogIGFwcEZvcm0udXRpbHMuZXh0ZW5kKEZpbGVTdWJtaXNzaW9uLCBNb2RlbCk7CiAgRmlsZVN1Ym1pc3Npb24ucHJvdG90eXBlLmxvYWRGaWxlID0gZnVuY3Rpb24gKGNiKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVTdWJtaXNzaW9uIGxvYWRGaWxlIik7CiAgICB2YXIgZmlsZU5hbWUgPSB0aGlzLmdldEhhc2hOYW1lKCk7CiAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICBhcHBGb3JtLnN0b3Jlcy5sb2NhbFN0b3JhZ2UucmVhZEZpbGUoZmlsZU5hbWUsIGZ1bmN0aW9uIChlcnIsIGZpbGUpIHsKICAgICAgaWYgKGVycikgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRmlsZVN1Ym1pc3Npb24gbG9hZEZpbGUuIEVycm9yIHJlYWRpbmcgZmlsZSIsIGZpbGVOYW1lLCBlcnIpOwogICAgICAgIGNiKGVycik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJGaWxlU3VibWlzc2lvbiBsb2FkRmlsZS4gRmlsZSByZWFkIGNvcnJlY3RseSIsIGZpbGVOYW1lLCBmaWxlKTsKICAgICAgICB0aGF0LmZpbGVPYmogPSBmaWxlOwogICAgICAgIGNiKG51bGwpOwogICAgICB9CiAgICB9KTsKICB9OwogIEZpbGVTdWJtaXNzaW9uLnByb3RvdHlwZS5nZXRQcm9wcyA9IGZ1bmN0aW9uICgpIHsKICAgIGlmKHRoaXMuZmlsZU9iail7CiAgICAgICRmaC5mb3Jtcy5sb2cuZCgiRmlsZVN1Ym1pc3Npb25Eb3dubG9hZDogZmlsZSBvYmplY3QgZm91bmQiKTsKICAgICAgcmV0dXJuIHRoaXMuZmlsZU9iajsKICAgIH0gZWxzZSB7CiAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRmlsZVN1Ym1pc3Npb25Eb3dubG9hZDogbm8gZmlsZSBvYmplY3QgZm91bmQiKTsKICAgIH0KICB9OwogIEZpbGVTdWJtaXNzaW9uLnByb3RvdHlwZS5zZXRTdWJtaXNzaW9uSWQgPSBmdW5jdGlvbiAoc3VibWlzc2lvbklkKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVTdWJtaXNzaW9uIHNldFN1Ym1pc3Npb25JZC4iLCBzdWJtaXNzaW9uSWQpOwogICAgdGhpcy5zZXQoJ3N1Ym1pc3Npb25JZCcsIHN1Ym1pc3Npb25JZCk7CiAgfTsKICBGaWxlU3VibWlzc2lvbi5wcm90b3R5cGUuZ2V0U3VibWlzc2lvbklkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdzdWJtaXNzaW9uSWQnKTsKICB9OwogIEZpbGVTdWJtaXNzaW9uLnByb3RvdHlwZS5nZXRIYXNoTmFtZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgnZGF0YScpLmhhc2hOYW1lOwogIH07CiAgRmlsZVN1Ym1pc3Npb24ucHJvdG90eXBlLmdldEZpZWxkSWQgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ2RhdGEnKS5maWVsZElkOwogIH07CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLm1vZGVscyB8fCB7fSk7CmFwcEZvcm0ubW9kZWxzID0gZnVuY3Rpb24gKG1vZHVsZSkgewogIHZhciBNb2RlbCA9IGFwcEZvcm0ubW9kZWxzLk1vZGVsOwogIG1vZHVsZS5GaWxlU3VibWlzc2lvbkRvd25sb2FkID0gRmlsZVN1Ym1pc3Npb25Eb3dubG9hZDsKICBmdW5jdGlvbiBGaWxlU3VibWlzc2lvbkRvd25sb2FkKGZpbGVEYXRhKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVTdWJtaXNzaW9uRG93bmxvYWQgIiwgZmlsZURhdGEpOwogICAgTW9kZWwuY2FsbCh0aGlzLCB7CiAgICAgICdfdHlwZSc6ICdmaWxlU3VibWlzc2lvbkRvd25sb2FkJywKICAgICAgJ2RhdGEnOiBmaWxlRGF0YQogICAgfSk7CiAgfQogIGFwcEZvcm0udXRpbHMuZXh0ZW5kKEZpbGVTdWJtaXNzaW9uRG93bmxvYWQsIE1vZGVsKTsKICBGaWxlU3VibWlzc2lvbkRvd25sb2FkLnByb3RvdHlwZS5zZXRTdWJtaXNzaW9uSWQgPSBmdW5jdGlvbiAoc3VibWlzc2lvbklkKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVTdWJtaXNzaW9uIHNldFN1Ym1pc3Npb25JZC4iLCBzdWJtaXNzaW9uSWQpOwogICAgdGhpcy5zZXQoJ3N1Ym1pc3Npb25JZCcsIHN1Ym1pc3Npb25JZCk7CiAgfTsKICBGaWxlU3VibWlzc2lvbkRvd25sb2FkLnByb3RvdHlwZS5nZXRTdWJtaXNzaW9uSWQgPSBmdW5jdGlvbiAoKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVTdWJtaXNzaW9uIGdldFN1Ym1pc3Npb25JZDogIiwgdGhpcy5nZXQoJ3N1Ym1pc3Npb25JZCcpKTsKICAgIHJldHVybiB0aGlzLmdldCgnc3VibWlzc2lvbklkJywgIiIpOwogIH07CiAgRmlsZVN1Ym1pc3Npb25Eb3dubG9hZC5wcm90b3R5cGUuZ2V0SGFzaE5hbWUgPSBmdW5jdGlvbiAoKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVTdWJtaXNzaW9uIGdldEhhc2hOYW1lOiAiLCB0aGlzLmdldCgnZGF0YScpLmhhc2hOYW1lKTsKICAgIHJldHVybiB0aGlzLmdldCgnZGF0YScsIHt9KS5oYXNoTmFtZTsKICB9OwogIEZpbGVTdWJtaXNzaW9uRG93bmxvYWQucHJvdG90eXBlLmdldEZpZWxkSWQgPSBmdW5jdGlvbiAoKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVTdWJtaXNzaW9uIGdldEZpZWxkSWQ6ICIsIHRoaXMuZ2V0KCdkYXRhJykuZmllbGRJZCk7CiAgICByZXR1cm4gdGhpcy5nZXQoJ2RhdGEnLCB7fSkuZmllbGRJZDsKICB9OwogIEZpbGVTdWJtaXNzaW9uRG93bmxvYWQucHJvdG90eXBlLmdldEZpbGVNZXRhRGF0YSA9IGZ1bmN0aW9uKCl7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVTdWJtaXNzaW9uIGdldEZpbGVNZXRhRGF0YTogIiwgdGhpcy5nZXQoJ2RhdGEnKSk7CiAgICBpZih0aGlzLmdldCgnZGF0YScpKXsKICAgICAgJGZoLmZvcm1zLmxvZy5kKCJGaWxlU3VibWlzc2lvbiBnZXRGaWxlTWV0YURhdGE6IGRhdGEgZm91bmQiLCB0aGlzLmdldCgnZGF0YScpKTsKICAgIH0gZWxzZSB7CiAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRmlsZVN1Ym1pc3Npb24gZ2V0RmlsZU1ldGFEYXRhOiBObyBkYXRhIGZvdW5kIik7CiAgICB9CiAgICByZXR1cm4gdGhpcy5nZXQoJ2RhdGEnLCB7fSk7CiAgfTsKICBGaWxlU3VibWlzc2lvbkRvd25sb2FkLnByb3RvdHlwZS5nZXRGaWxlR3JvdXBJZCA9IGZ1bmN0aW9uKCl7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVTdWJtaXNzaW9uIGdldEZpbGVHcm91cElkOiAiLCB0aGlzLmdldCgnZGF0YScpKTsKICAgIHJldHVybiB0aGlzLmdldCgnZGF0YScsIHt9KS5ncm91cElkIHx8ICJub3RzZXQiOwogIH07CiAgRmlsZVN1Ym1pc3Npb25Eb3dubG9hZC5wcm90b3R5cGUuZ2V0UmVtb3RlRmlsZVVSTCA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVTdWJtaXNzaW9uIGdldFJlbW90ZUZpbGVVUkw6ICIpOwoKICAgIC8vUmVtb3RlRmlsZVVybCA9IGNsb3VkSG9zdCArIC9tYmFhcy9mb3Jtcy9zdWJtaXNzaW9uLzpzdWJtaXNzaW9uSWQvZmlsZS86ZmlsZUdyb3VwSWQKICAgIC8vUmV0dXJuZWQgYnkgdGhlIG1iYWFzLgogICAgZnVuY3Rpb24gYnVpbGRSZW1vdGVGaWxlVXJsKCl7CiAgICAgIHZhciBzdWJtaXNzaW9uSWQgPSBzZWxmLmdldFN1Ym1pc3Npb25JZCgpOwogICAgICB2YXIgZmlsZUdyb3VwSWQgPSBzZWxmLmdldEZpbGVHcm91cElkKCk7CiAgICAgIHZhciB1cmxUZW1wbGF0ZSA9ICBhcHBGb3JtLmNvbmZpZy5nZXQoJ2Zvcm1VcmxzJywge30pLmZpbGVTdWJtaXNzaW9uRG93bmxvYWQ7CiAgICAgIGlmKHVybFRlbXBsYXRlKXsKICAgICAgICB1cmxUZW1wbGF0ZSA9IHVybFRlbXBsYXRlLnJlcGxhY2UoIjpzdWJtaXNzaW9uSWQiLCBzdWJtaXNzaW9uSWQpOwogICAgICAgIHVybFRlbXBsYXRlID0gdXJsVGVtcGxhdGUucmVwbGFjZSgiOmZpbGVHcm91cElkIiwgZmlsZUdyb3VwSWQpOwogICAgICAgIHVybFRlbXBsYXRlID0gdXJsVGVtcGxhdGUucmVwbGFjZSgiOmFwcElkIiwgYXBwRm9ybS5jb25maWcuZ2V0KCdhcHBJZCcsICJub3RTZXQiKSk7CiAgICAgICAgcmV0dXJuIGFwcEZvcm0ubW9kZWxzLmNvbmZpZy5nZXRDbG91ZEhvc3QoKSArICIvbWJhYXMiICsgdXJsVGVtcGxhdGU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICAibm90c2V0IjsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBidWlsZFJlbW90ZUZpbGVVcmwoKTsKICB9OwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5tb2RlbHMgfHwge30pOwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICB2YXIgTW9kZWwgPSBhcHBGb3JtLm1vZGVscy5Nb2RlbDsKICBtb2R1bGUuRm9ybVN1Ym1pc3Npb24gPSBGb3JtU3VibWlzc2lvbjsKICBmdW5jdGlvbiBGb3JtU3VibWlzc2lvbihzdWJtaXNzaW9uSlNPTikgewogICAgTW9kZWwuY2FsbCh0aGlzLCB7CiAgICAgICdfdHlwZSc6ICdmb3JtU3VibWlzc2lvbicsCiAgICAgICdkYXRhJzogc3VibWlzc2lvbkpTT04KICAgIH0pOwogIH0KICBhcHBGb3JtLnV0aWxzLmV4dGVuZChGb3JtU3VibWlzc2lvbiwgTW9kZWwpOwogIEZvcm1TdWJtaXNzaW9uLnByb3RvdHlwZS5nZXRQcm9wcyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgnZGF0YScpOwogIH07CiAgRm9ybVN1Ym1pc3Npb24ucHJvdG90eXBlLmdldEZvcm1JZCA9IGZ1bmN0aW9uICgpIHsKICAgIGlmKCF0aGlzLmdldCgnZGF0YScpKXsKICAgICAgJGZoLmZvcm1zLmxvZy5lKCJObyBmb3JtIGRhdGEgZm9yIGZvcm0gc3VibWlzc2lvbiIpOwogICAgfQoKICAgIHJldHVybiB0aGlzLmdldCgnZGF0YScpLmZvcm1JZDsKICB9OwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5tb2RlbHMgfHwge30pOwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICB2YXIgTW9kZWwgPSBhcHBGb3JtLm1vZGVscy5Nb2RlbDsKICBtb2R1bGUuRm9ybVN1Ym1pc3Npb25Db21wbGV0ZSA9IEZvcm1TdWJtaXNzaW9uQ29tcGxldGU7CiAgZnVuY3Rpb24gRm9ybVN1Ym1pc3Npb25Db21wbGV0ZShzdWJtaXNzaW9uVGFzaykgewogICAgTW9kZWwuY2FsbCh0aGlzLCB7CiAgICAgICdfdHlwZSc6ICdjb21wbGV0ZVN1Ym1pc3Npb24nLAogICAgICAnc3VibWlzc2lvbklkJzogc3VibWlzc2lvblRhc2suZ2V0KCdzdWJtaXNzaW9uSWQnKSwKICAgICAgJ2xvY2FsU3VibWlzc2lvbklkJzogc3VibWlzc2lvblRhc2suZ2V0KCdsb2NhbFN1Ym1pc3Npb25JZCcpCiAgICB9KTsKICB9CiAgYXBwRm9ybS51dGlscy5leHRlbmQoRm9ybVN1Ym1pc3Npb25Db21wbGV0ZSwgTW9kZWwpOwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5tb2RlbHMgfHwge30pOwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICB2YXIgTW9kZWwgPSBhcHBGb3JtLm1vZGVscy5Nb2RlbDsKICBtb2R1bGUuRm9ybVN1Ym1pc3Npb25Eb3dubG9hZCA9IEZvcm1TdWJtaXNzaW9uRG93bmxvYWQ7CiAgZnVuY3Rpb24gRm9ybVN1Ym1pc3Npb25Eb3dubG9hZCh1cGxvYWRUYXNrKSB7CiAgICBNb2RlbC5jYWxsKHRoaXMsIHsKICAgICAgJ190eXBlJzogJ2Zvcm1TdWJtaXNzaW9uRG93bmxvYWQnLAogICAgICAnZGF0YSc6IHVwbG9hZFRhc2sKICAgIH0pOwogIH0KICBhcHBGb3JtLnV0aWxzLmV4dGVuZChGb3JtU3VibWlzc2lvbkRvd25sb2FkLCBNb2RlbCk7CiAgRm9ybVN1Ym1pc3Npb25Eb3dubG9hZC5wcm90b3R5cGUuZ2V0U3VibWlzc2lvbklkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdkYXRhJykuZ2V0KCJzdWJtaXNzaW9uSWQiLCAibm90LXNldCIpOwogIH07CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLm1vZGVscyB8fCB7fSk7CmFwcEZvcm0ubW9kZWxzID0gZnVuY3Rpb24gKG1vZHVsZSkgewogIHZhciBNb2RlbCA9IGFwcEZvcm0ubW9kZWxzLk1vZGVsOwogIG1vZHVsZS5Gb3JtU3VibWlzc2lvblN0YXR1cyA9IEZvcm1TdWJtaXNzaW9uU3RhdHVzOwogIGZ1bmN0aW9uIEZvcm1TdWJtaXNzaW9uU3RhdHVzKHN1Ym1pc3Npb25UYXNrKSB7CiAgICBNb2RlbC5jYWxsKHRoaXMsIHsKICAgICAgJ190eXBlJzogJ3N1Ym1pc3Npb25TdGF0dXMnLAogICAgICAnc3VibWlzc2lvbklkJzogc3VibWlzc2lvblRhc2suZ2V0KCdzdWJtaXNzaW9uSWQnKSwKICAgICAgJ2xvY2FsU3VibWlzc2lvbklkJzogc3VibWlzc2lvblRhc2suZ2V0KCdsb2NhbFN1Ym1pc3Npb25JZCcpCiAgICB9KTsKICB9CiAgYXBwRm9ybS51dGlscy5leHRlbmQoRm9ybVN1Ym1pc3Npb25TdGF0dXMsIE1vZGVsKTsKICByZXR1cm4gbW9kdWxlOwp9KGFwcEZvcm0ubW9kZWxzIHx8IHt9KTsKYXBwRm9ybS5tb2RlbHMgPSBmdW5jdGlvbiAobW9kdWxlKSB7CiAgdmFyIEZpbGVTdWJtaXNzaW9uID0gYXBwRm9ybS5tb2RlbHMuRmlsZVN1Ym1pc3Npb247CiAgbW9kdWxlLkJhc2U2NEZpbGVTdWJtaXNzaW9uID0gQmFzZTY0RmlsZVN1Ym1pc3Npb247CiAgZnVuY3Rpb24gQmFzZTY0RmlsZVN1Ym1pc3Npb24oZmlsZURhdGEpIHsKICAgIEZpbGVTdWJtaXNzaW9uLmNhbGwodGhpcywgZmlsZURhdGEpOwogICAgdGhpcy5zZXQoJ190eXBlJywgJ2Jhc2U2NGZpbGVTdWJtaXNzaW9uJyk7CiAgfQogIGFwcEZvcm0udXRpbHMuZXh0ZW5kKEJhc2U2NEZpbGVTdWJtaXNzaW9uLCBGaWxlU3VibWlzc2lvbik7CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLm1vZGVscyB8fCB7fSk7CmFwcEZvcm0ubW9kZWxzID0gZnVuY3Rpb24obW9kdWxlKSB7CiAgICB2YXIgTW9kZWwgPSBhcHBGb3JtLm1vZGVscy5Nb2RlbDsKCiAgICBmdW5jdGlvbiBTdWJtaXNzaW9ucygpIHsKICAgICAgICBNb2RlbC5jYWxsKHRoaXMsIHsKICAgICAgICAgICAgJ190eXBlJzogJ3N1Ym1pc3Npb25zJywKICAgICAgICAgICAgJ19sdWRpZCc6ICdzdWJtaXNzaW9uc19saXN0JywKICAgICAgICAgICAgJ3N1Ym1pc3Npb25zJzogW10KICAgICAgICB9KTsKICAgIH0KICAgIGFwcEZvcm0udXRpbHMuZXh0ZW5kKFN1Ym1pc3Npb25zLCBNb2RlbCk7CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUuc2V0TG9jYWxJZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiU3VibWlzc2lvbnMgc2V0TG9jYWxJZC4gTm90IFBlcm1pdHRlZCBmb3Igc3VibWlzc2lvbnMuIik7CiAgICB9OwogICAgLyoqCiAgICAgKiBzYXZlIGEgc3VibWlzc2lvbiB0byBsaXN0IGFuZCBzdG9yZSBpdCBpbW1lZGlhdGVseQogICAgICogQHBhcmFtICB7W3R5cGVdfSAgIHN1Ym1pc3Npb24gW2Rlc2NyaXB0aW9uXQogICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUuc2F2ZVN1Ym1pc3Npb24gPSBmdW5jdGlvbihzdWJtaXNzaW9uLCBjYikgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbnMgc2F2ZVN1Ym1pc3Npb24iKTsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgdGhpcy51cGRhdGVTdWJtaXNzaW9uV2l0aG91dFNhdmluZyhzdWJtaXNzaW9uKTsKICAgICAgICB0aGlzLmNsZWFyU2VudFN1Ym1pc3Npb24oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNlbGYuc2F2ZUxvY2FsKGNiKTsKICAgICAgICB9KTsKICAgIH07CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUudXBkYXRlU3VibWlzc2lvbldpdGhvdXRTYXZpbmcgPSBmdW5jdGlvbihzdWJtaXNzaW9uKSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJTdWJtaXNzaW9ucyB1cGRhdGVTdWJtaXNzaW9uV2l0aG91dFNhdmluZyIpOwogICAgICAgIHZhciBwcnVuZURhdGEgPSB0aGlzLnBydW5lU3VibWlzc2lvbihzdWJtaXNzaW9uKTsKICAgICAgICB2YXIgbG9jYWxJZCA9IHBydW5lRGF0YS5fbHVkaWQ7CiAgICAgICAgaWYgKGxvY2FsSWQpIHsKICAgICAgICAgICAgdmFyIG1ldGEgPSB0aGlzLmZpbmRNZXRhQnlMb2NhbElkKGxvY2FsSWQpOwogICAgICAgICAgICB2YXIgc3VibWlzc2lvbnMgPSB0aGlzLmdldCgnc3VibWlzc2lvbnMnKTsKICAgICAgICAgICAgaWYgKG1ldGEpIHsKICAgICAgICAgICAgICAgIC8vZXhpc3RlZCwgcmVtb3ZlIHRoZSBvbGQgbWV0YSBhbmQgc2F2ZSB0aGUgbmV3IG9uZS4KICAgICAgICAgICAgICAgIHN1Ym1pc3Npb25zLnNwbGljZShzdWJtaXNzaW9ucy5pbmRleE9mKG1ldGEpLCAxKTsKICAgICAgICAgICAgICAgIHN1Ym1pc3Npb25zLnB1c2gocHJ1bmVEYXRhKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIG5vdCBleGlzdGVkLCBpbnNlcnQgdG8gdGhlIHRhaWwuCiAgICAgICAgICAgICAgICBzdWJtaXNzaW9ucy5wdXNoKHBydW5lRGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBpbnZhbGlkIGxvY2FsIGlkLgogICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoJ0ludmFsaWQgc3VibWlzc2lvbiBmb3IgbG9jYWxJZDonLCBsb2NhbElkLCBKU09OLnN0cmluZ2lmeShzdWJtaXNzaW9uKSk7CiAgICAgICAgfQogICAgfTsKICAgIFN1Ym1pc3Npb25zLnByb3RvdHlwZS5jbGVhclNlbnRTdWJtaXNzaW9uID0gZnVuY3Rpb24oY2IpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb25zIGNsZWFyU2VudFN1Ym1pc3Npb24iKTsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgdmFyIG1heFNlbnQgPSAkZmguZm9ybXMuY29uZmlnLmdldCgibWF4X3NlbnRfc2F2ZWQiKSA/ICRmaC5mb3Jtcy5jb25maWcuZ2V0KCJtYXhfc2VudF9zYXZlZCIpIDogJGZoLmZvcm1zLmNvbmZpZy5nZXQoInNlbnRfc2F2ZV9taW4iKTsKICAgICAgICB2YXIgc3VibWlzc2lvbnMgPSB0aGlzLmdldCgic3VibWlzc2lvbnMiKTsKICAgICAgICB2YXIgc2VudFN1Ym1pc3Npb25zID0gdGhpcy5nZXRTdWJtaXR0ZWQoKTsKCgogICAgICAgIGlmIChzZW50U3VibWlzc2lvbnMubGVuZ3RoID4gbWF4U2VudCkgewogICAgICAgICAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb25zIGNsZWFyU2VudFN1Ym1pc3Npb24gcHJ1bmluZyBzZW50U3VibWlzc2lvbnMubGVuZ3RoPm1heFNlbnQiKTsKICAgICAgICAgICAgc2VudFN1Ym1pc3Npb25zID0gc2VudFN1Ym1pc3Npb25zLnNvcnQoZnVuY3Rpb24oYSwgYikgewogICAgICAgICAgICAgICAgaWYgKERhdGUoYS5zdWJtaXR0ZWREYXRlKSA8IERhdGUoYi5zdWJtaXR0ZWREYXRlKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAxOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgdG9CZVJlbW92ZWQgPSBbXTsKICAgICAgICAgICAgd2hpbGUgKHNlbnRTdWJtaXNzaW9ucy5sZW5ndGggPiBtYXhTZW50KSB7CiAgICAgICAgICAgICAgICB0b0JlUmVtb3ZlZC5wdXNoKHNlbnRTdWJtaXNzaW9ucy5wb3AoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGNvdW50ID0gdG9CZVJlbW92ZWQubGVuZ3RoOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvQmVSZW1vdmVkLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgc3ViTWV0YSA9IHRvQmVSZW1vdmVkW2ldOwogICAgICAgICAgICAgICAgc2VsZi5nZXRTdWJtaXNzaW9uQnlNZXRhKHN1Yk1ldGEsIGZ1bmN0aW9uKGVyciwgc3VibWlzc2lvbikgewogICAgICAgICAgICAgICAgICAgIHN1Ym1pc3Npb24uY2xlYXJMb2NhbChmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJTdWJtaXNzaW9ucyBjbGVhclNlbnRTdWJtaXNzaW9uIHN1Ym1pc3Npb24gY2xlYXJMb2NhbCIsIGVycik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY291bnQtLTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYihudWxsLCBudWxsKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjYihudWxsLCBudWxsKTsKICAgICAgICB9CiAgICB9OwogICAgU3VibWlzc2lvbnMucHJvdG90eXBlLmZpbmRCeUZvcm1JZCA9IGZ1bmN0aW9uKGZvcm1JZCkgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbnMgZmluZEJ5Rm9ybUlkIiwgZm9ybUlkKTsKICAgICAgICB2YXIgcnRuID0gW107CiAgICAgICAgdmFyIHN1Ym1pc3Npb25zID0gdGhpcy5nZXQoJ3N1Ym1pc3Npb25zJyk7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJtaXNzaW9ucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgb2JqID0gc3VibWlzc2lvbnNbaV07CiAgICAgICAgICAgIGlmIChzdWJtaXNzaW9uc1tpXS5mb3JtSWQgPT09IGZvcm1JZCkgewogICAgICAgICAgICAgICAgcnRuLnB1c2gob2JqKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcnRuOwogICAgfTsKICAgIFN1Ym1pc3Npb25zLnByb3RvdHlwZS5nZXRTdWJtaXNzaW9ucyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLmdldCgnc3VibWlzc2lvbnMnKTsKICAgIH07CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUuZ2V0U3VibWlzc2lvbk1ldGFMaXN0ID0gU3VibWlzc2lvbnMucHJvdG90eXBlLmdldFN1Ym1pc3Npb25zOwogICAgLy9mdW5jdGlvbiBhbGlhcwogICAgU3VibWlzc2lvbnMucHJvdG90eXBlLmZpbmRNZXRhQnlMb2NhbElkID0gZnVuY3Rpb24obG9jYWxJZCkgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbnMgZmluZE1ldGFCeUxvY2FsSWQiLCBsb2NhbElkKTsKICAgICAgICB2YXIgc3VibWlzc2lvbnMgPSB0aGlzLmdldCgnc3VibWlzc2lvbnMnKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1Ym1pc3Npb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBvYmogPSBzdWJtaXNzaW9uc1tpXTsKICAgICAgICAgICAgaWYgKHN1Ym1pc3Npb25zW2ldLl9sdWRpZCA9PT0gbG9jYWxJZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG9iajsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8kZmguZm9ybXMubG9nLmUoIlN1Ym1pc3Npb25zIGZpbmRNZXRhQnlMb2NhbElkOiBObyBzdWJtaXNzaW9ucyBmb3IgbG9jYWxJZDogIiwgbG9jYWxJZCk7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9OwoKICAgIC8qKgogICAgICogRmluZGluZyBhIHN1Ym1pc3Npb24gb2JqZWN0IGJ5IGl0J3MgcmVtb3RlIElkCiAgICAgKiBAcGFyYW0gcmVtb3RlSWQKICAgICAqIEByZXR1cm5zIHsqfQogICAgICovCiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUuZmluZE1ldGFCeVJlbW90ZUlkID0gZnVuY3Rpb24ocmVtb3RlSWQpIHsKICAgICAgICByZW1vdGVJZCA9IHJlbW90ZUlkIHx8ICIiOwoKICAgICAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb25zIGZpbmRNZXRhQnlSZW1vdGVJZDogIiArIHJlbW90ZUlkKTsKICAgICAgICB2YXIgc3VibWlzc2lvbnMgPSB0aGlzLmdldCgnc3VibWlzc2lvbnMnKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1Ym1pc3Npb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBvYmogPSBzdWJtaXNzaW9uc1tpXTsKICAgICAgICAgICAgaWYgKHN1Ym1pc3Npb25zW2ldLnN1Ym1pc3Npb25JZCkgewogICAgICAgICAgICAgICAgaWYgKHN1Ym1pc3Npb25zW2ldLnN1Ym1pc3Npb25JZCA9PT0gcmVtb3RlSWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH07CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUucHJ1bmVTdWJtaXNzaW9uID0gZnVuY3Rpb24oc3VibWlzc2lvbikgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbnMgcHJ1bmVTdWJtaXNzaW9uIik7CiAgICAgICAgdmFyIGZpZWxkcyA9IFsKICAgICAgICAgICAgJ19pZCcsCiAgICAgICAgICAgICdfbHVkaWQnLAogICAgICAgICAgICAnc3RhdHVzJywKICAgICAgICAgICAgJ2Zvcm1OYW1lJywKICAgICAgICAgICAgJ2Zvcm1JZCcsCiAgICAgICAgICAgICdfbG9jYWxMYXN0VXBkYXRlJywKICAgICAgICAgICAgJ2NyZWF0ZURhdGUnLAogICAgICAgICAgICAnc3VibWl0RGF0ZScsCiAgICAgICAgICAgICdkZXZpY2VGb3JtVGltZXN0YW1wJywKICAgICAgICAgICAgJ2Vycm9yTWVzc2FnZScsCiAgICAgICAgICAgICdzdWJtaXNzaW9uU3RhcnRlZFRpbWVzdGFtcCcsCiAgICAgICAgICAgICdzdWJtaXR0ZWREYXRlJywKICAgICAgICAgICAgJ3N1Ym1pc3Npb25JZCcsCiAgICAgICAgICAgICdzYXZlRGF0ZScsCiAgICAgICAgICAgICd1cGxvYWRTdGFydERhdGUnCiAgICAgICAgXTsKICAgICAgICB2YXIgZGF0YSA9IHN1Ym1pc3Npb24uZ2V0UHJvcHMoKTsKICAgICAgICB2YXIgcnRuID0ge307CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGtleSA9IGZpZWxkc1tpXTsKICAgICAgICAgICAgcnRuW2tleV0gPSBkYXRhW2tleV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBydG47CiAgICB9OwoKICAgIFN1Ym1pc3Npb25zLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKGNiKSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJTdWJtaXNzaW9ucyBjbGVhciIpOwogICAgICAgIHZhciB0aGF0ID0gdGhpczsKICAgICAgICB0aGlzLmNsZWFyTG9jYWwoZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZShlcnIpOwogICAgICAgICAgICAgICAgY2IoZXJyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoYXQuc2V0KCJzdWJtaXNzaW9ucyIsIFtdKTsKICAgICAgICAgICAgICAgIGNiKG51bGwsIG51bGwpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9OwogICAgU3VibWlzc2lvbnMucHJvdG90eXBlLmdldERyYWZ0cyA9IGZ1bmN0aW9uKHBhcmFtcykgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbnMgZ2V0RHJhZnRzOiAiLCBwYXJhbXMpOwogICAgICAgIGlmICghcGFyYW1zKSB7CiAgICAgICAgICAgIHBhcmFtcyA9IHt9OwogICAgICAgIH0KICAgICAgICBwYXJhbXMuc3RhdHVzID0gImRyYWZ0IjsKICAgICAgICByZXR1cm4gdGhpcy5maW5kQnlTdGF0dXMocGFyYW1zKTsKICAgIH07CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUuZ2V0UGVuZGluZyA9IGZ1bmN0aW9uKHBhcmFtcykgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbnMgZ2V0UGVuZGluZzogIiwgcGFyYW1zKTsKICAgICAgICBpZiAoIXBhcmFtcykgewogICAgICAgICAgICBwYXJhbXMgPSB7fTsKICAgICAgICB9CiAgICAgICAgcGFyYW1zLnN0YXR1cyA9ICJwZW5kaW5nIjsKICAgICAgICByZXR1cm4gdGhpcy5maW5kQnlTdGF0dXMocGFyYW1zKTsKICAgIH07CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUuZ2V0U3VibWl0dGVkID0gZnVuY3Rpb24ocGFyYW1zKSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJTdWJtaXNzaW9ucyBnZXRTdWJtaXR0ZWQ6ICIsIHBhcmFtcyk7CiAgICAgICAgaWYgKCFwYXJhbXMpIHsKICAgICAgICAgICAgcGFyYW1zID0ge307CiAgICAgICAgfQogICAgICAgIHBhcmFtcy5zdGF0dXMgPSAic3VibWl0dGVkIjsKICAgICAgICByZXR1cm4gdGhpcy5maW5kQnlTdGF0dXMocGFyYW1zKTsKICAgIH07CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUuZ2V0RXJyb3IgPSBmdW5jdGlvbihwYXJhbXMpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb25zIGdldEVycm9yOiAiLCBwYXJhbXMpOwogICAgICAgIGlmICghcGFyYW1zKSB7CiAgICAgICAgICAgIHBhcmFtcyA9IHt9OwogICAgICAgIH0KICAgICAgICBwYXJhbXMuc3RhdHVzID0gImVycm9yIjsKICAgICAgICByZXR1cm4gdGhpcy5maW5kQnlTdGF0dXMocGFyYW1zKTsKICAgIH07CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUuZ2V0SW5Qcm9ncmVzcyA9IGZ1bmN0aW9uKHBhcmFtcykgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbnMgZ2V0SW5Qcm9ncmVzczogIiwgcGFyYW1zKTsKICAgICAgICBpZiAoIXBhcmFtcykgewogICAgICAgICAgICBwYXJhbXMgPSB7fTsKICAgICAgICB9CiAgICAgICAgcGFyYW1zLnN0YXR1cyA9ICJpbnByb2dyZXNzIjsKICAgICAgICByZXR1cm4gdGhpcy5maW5kQnlTdGF0dXMocGFyYW1zKTsKICAgIH07CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUuZ2V0RG93bmxvYWRlZCA9IGZ1bmN0aW9uKHBhcmFtcykgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbnMgZ2V0RG93bmxvYWRlZDogIiwgcGFyYW1zKTsKICAgICAgICBpZiAoIXBhcmFtcykgewogICAgICAgICAgICBwYXJhbXMgPSB7fTsKICAgICAgICB9CiAgICAgICAgcGFyYW1zLnN0YXR1cyA9ICJkb3dubG9hZGVkIjsKICAgICAgICByZXR1cm4gdGhpcy5maW5kQnlTdGF0dXMocGFyYW1zKTsKICAgIH07CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUuZmluZEJ5U3RhdHVzID0gZnVuY3Rpb24ocGFyYW1zKSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJTdWJtaXNzaW9ucyBmaW5kQnlTdGF0dXM6ICIsIHBhcmFtcyk7CiAgICAgICAgaWYgKCFwYXJhbXMpIHsKICAgICAgICAgICAgcGFyYW1zID0ge307CiAgICAgICAgfQogICAgICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAic3RyaW5nIikgewogICAgICAgICAgICBwYXJhbXMgPSB7CiAgICAgICAgICAgICAgICBzdGF0dXM6IHBhcmFtcwogICAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBpZiAocGFyYW1zLnN0YXR1cyA9PT0gbnVsbCkgewogICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgfQoKICAgICAgICB2YXIgc3RhdHVzID0gcGFyYW1zLnN0YXR1czsKICAgICAgICB2YXIgZm9ybUlkID0gcGFyYW1zLmZvcm1JZDsKICAgICAgICB2YXIgc29ydEZpZWxkID0gcGFyYW1zLnNvcnRGaWVsZCB8fCAiY3JlYXRlRGF0ZSI7CgogICAgICAgIHZhciBzdWJtaXNzaW9ucyA9IHRoaXMuZ2V0KCJzdWJtaXNzaW9ucyIsIFtdKTsKICAgICAgICB2YXIgcnRuID0gW107CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJtaXNzaW9ucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoc3RhdHVzLmluZGV4T2Yoc3VibWlzc2lvbnNbaV0uc3RhdHVzKSA+IC0xKSB7CiAgICAgICAgICAgICAgICBpZiAoZm9ybUlkICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc3VibWlzc2lvbnNbaV0uZm9ybUlkID09PSBmb3JtSWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcnRuLnB1c2goc3VibWlzc2lvbnNbaV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcnRuLnB1c2goc3VibWlzc2lvbnNbaV0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcnRuID0gcnRuLnNvcnQoZnVuY3Rpb24oYSwgYikgewogICAgICAgICAgICBpZiAoRGF0ZShhW3NvcnRGaWVsZF0pIDwgRGF0ZShiW3NvcnRGaWVsZF0pKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gMTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gcnRuOwogICAgfTsKICAgIC8qKgogICAgICogcmV0dXJuIGEgc3VibWlzc2lvbiBtb2RlbCBvYmplY3QgYnkgdGhlIG1ldGEgZGF0YSBwYXNzZWQgaW4uCiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICAgbWV0YSBbZGVzY3JpcHRpb25dCiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2IgICBbZGVzY3JpcHRpb25dCiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICBbZGVzY3JpcHRpb25dCiAgICAgKi8KICAgIFN1Ym1pc3Npb25zLnByb3RvdHlwZS5nZXRTdWJtaXNzaW9uQnlNZXRhID0gZnVuY3Rpb24obWV0YSwgY2IpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb25zIGdldFN1Ym1pc3Npb25CeU1ldGE6ICIsIG1ldGEpOwogICAgICAgIHZhciBsb2NhbElkID0gbWV0YS5fbHVkaWQ7CiAgICAgICAgaWYgKGxvY2FsSWQpIHsKICAgICAgICAgICAgYXBwRm9ybS5tb2RlbHMuc3VibWlzc2lvbi5mcm9tTG9jYWwobG9jYWxJZCwgY2IpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiU3VibWlzc2lvbnMgZ2V0U3VibWlzc2lvbkJ5TWV0YTogbG9jYWwgaWQgbm90IGZvdW5kIGZvciByZXRyaWV2aW5nIHN1Ym1pc3Npb24uIiwgbG9jYWxJZCwgbWV0YSk7CiAgICAgICAgICAgIGNiKCJsb2NhbCBpZCBub3QgZm91bmQgZm9yIHJldHJpZXZpbmcgc3VibWlzc2lvbiIpOwogICAgICAgIH0KICAgIH07CiAgICBTdWJtaXNzaW9ucy5wcm90b3R5cGUucmVtb3ZlU3VibWlzc2lvbiA9IGZ1bmN0aW9uKGxvY2FsSWQsIGNiKSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJTdWJtaXNzaW9ucyByZW1vdmVTdWJtaXNzaW9uOiAiLCBsb2NhbElkKTsKICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YobG9jYWxJZCk7CiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgICAgICAgdGhpcy5nZXQoJ3N1Ym1pc3Npb25zJykuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5zYXZlTG9jYWwoY2IpOwogICAgfTsKICAgIFN1Ym1pc3Npb25zLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24obG9jYWxJZCwgY2IpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb25zIGluZGV4T2Y6ICIsIGxvY2FsSWQpOwogICAgICAgIHZhciBzdWJtaXNzaW9ucyA9IHRoaXMuZ2V0KCdzdWJtaXNzaW9ucycpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3VibWlzc2lvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIG9iaiA9IHN1Ym1pc3Npb25zW2ldOwogICAgICAgICAgICBpZiAoc3VibWlzc2lvbnNbaV0uX2x1ZGlkID09PSBsb2NhbElkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gLTE7CiAgICB9OwogICAgbW9kdWxlLnN1Ym1pc3Npb25zID0gbmV3IFN1Ym1pc3Npb25zKCk7CiAgICByZXR1cm4gbW9kdWxlOwp9KGFwcEZvcm0ubW9kZWxzIHx8IHt9KTsKYXBwRm9ybS5tb2RlbHMgPSBmdW5jdGlvbihtb2R1bGUpIHsKICBtb2R1bGUuc3VibWlzc2lvbiA9IHsKICAgIG5ld0luc3RhbmNlOiBuZXdJbnN0YW5jZSwKICAgIGZyb21Mb2NhbDogZnJvbUxvY2FsCiAgfTsKICAvL2ltcGxtZW5ldGF0aW9uCiAgdmFyIF9zdWJtaXNzaW9ucyA9IHt9OwogIC8vY2FjaGUgaW4gbWVtIGZvciBzaW5nbGUgcmVmZXJlbmNlIHVzYWdlLgogIHZhciBNb2RlbCA9IGFwcEZvcm0ubW9kZWxzLk1vZGVsOwogIHZhciBzdGF0dXNNYWNoaW5lID0gewogICAgJ25ldyc6IFsKICAgICAgJ2RyYWZ0JywKICAgICAgJ3BlbmRpbmcnCiAgICBdLAogICAgJ2RyYWZ0JzogWwogICAgICAncGVuZGluZycsCiAgICAgICdkcmFmdCcKICAgIF0sCiAgICAncGVuZGluZyc6IFsKICAgICAgJ2lucHJvZ3Jlc3MnLAogICAgICAnZXJyb3InLAogICAgICAnZHJhZnQnCiAgICBdLAogICAgJ2lucHJvZ3Jlc3MnOiBbCiAgICAgICdwZW5kaW5nJywKICAgICAgJ2Vycm9yJywKICAgICAgJ2lucHJvZ3Jlc3MnLAogICAgICAnZG93bmxvYWRlZCcsCiAgICAgICdxdWV1ZWQnCiAgICBdLAogICAgJ3N1Ym1pdHRlZCc6IFtdLAogICAgJ2Vycm9yJzogWwogICAgICAnZHJhZnQnLAogICAgICAncGVuZGluZycsCiAgICAgICdlcnJvcicKICAgIF0sCiAgICAnZG93bmxvYWRlZCcgOiBbXSwKICAgICdxdWV1ZWQnIDogWydlcnJvcicsICdzdWJtaXR0ZWQnXQogIH07CgogIGZ1bmN0aW9uIG5ld0luc3RhbmNlKGZvcm0sIHBhcmFtcykgewogICAgcGFyYW1zID0gcGFyYW1zID8gcGFyYW1zIDoge307CiAgICB2YXIgc3ViID0gbmV3IFN1Ym1pc3Npb24oZm9ybSwgcGFyYW1zKTsKCiAgICBpZihwYXJhbXMuc3VibWlzc2lvbklkKXsKICAgICAgYXBwRm9ybS5tb2RlbHMuc3VibWlzc2lvbnMudXBkYXRlU3VibWlzc2lvbldpdGhvdXRTYXZpbmcoc3ViKTsKICAgIH0KICAgIHJldHVybiBzdWI7CiAgfQoKICBmdW5jdGlvbiBmcm9tTG9jYWwobG9jYWxJZCwgY2IpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbiBmcm9tTG9jYWw6ICIsIGxvY2FsSWQpOwogICAgaWYgKF9zdWJtaXNzaW9uc1tsb2NhbElkXSkgewogICAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb24gZnJvbUxvY2FsIGZyb20gY2FjaGU6ICIsIGxvY2FsSWQpOwogICAgICAvL2FscmVhZHkgbG9hZGVkCiAgICAgIGNiKG51bGwsIF9zdWJtaXNzaW9uc1tsb2NhbElkXSk7CiAgICB9IGVsc2UgewogICAgICAvL2xvYWQgZnJvbSBzdG9yYWdlCiAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbiBmcm9tTG9jYWwgbm90IGluIGNhY2hlLiBMb2FkaW5nIGZyb20gbG9jYWwgc3RvcmFnZS46ICIsIGxvY2FsSWQpOwogICAgICB2YXIgc3VibWlzc2lvbk9iamVjdCA9IG5ldyBTdWJtaXNzaW9uKCk7CiAgICAgIHN1Ym1pc3Npb25PYmplY3Quc2V0TG9jYWxJZChsb2NhbElkKTsKICAgICAgc3VibWlzc2lvbk9iamVjdC5sb2FkTG9jYWwoZnVuY3Rpb24oZXJyLCBzdWJtaXNzaW9uKSB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJTdWJtaXNzaW9uIGZyb21Mb2NhbC4gRXJyb3IgbG9hZGluZyBmcm9tIGxvY2FsOiAiLCBsb2NhbElkLCBlcnIpOwogICAgICAgICAgY2IoZXJyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJTdWJtaXNzaW9uIGZyb21Mb2NhbC4gTG9hZCBmcm9tIGxvY2FsIHN1Y2Vzc2Z1bGw6ICIsIGxvY2FsSWQpOwogICAgICAgICAgaWYoc3VibWlzc2lvbi5pc0Rvd25sb2FkU3VibWlzc2lvbigpKXsKICAgICAgICAgICAgcmV0dXJuIGNiKG51bGwsIHN1Ym1pc3Npb24pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3VibWlzc2lvbi5yZWxvYWRGb3JtKGZ1bmN0aW9uKGVyciwgcmVzKSB7CiAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJTdWJtaXNzaW9uIGZyb21Mb2NhbC4gcmVsb2FkRm9ybS4gRXJyb3IgcmUtbG9hZGluZyBmb3JtOiAiLCBsb2NhbElkLCBlcnIpOwogICAgICAgICAgICAgICAgY2IoZXJyKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJTdWJtaXNzaW9uIGZyb21Mb2NhbC4gcmVsb2FkRm9ybS4gUmUtbG9hZGluZyBmb3JtIHN1Y2Nlc3NmdWxsOiAiLCBsb2NhbElkKTsKICAgICAgICAgICAgICAgIF9zdWJtaXNzaW9uc1tsb2NhbElkXSA9IHN1Ym1pc3Npb247CiAgICAgICAgICAgICAgICBjYihudWxsLCBzdWJtaXNzaW9uKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KCiAgZnVuY3Rpb24gU3VibWlzc2lvbihmb3JtLCBwYXJhbXMpIHsKICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTsKICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbjogIiwgcGFyYW1zKTsKICAgIE1vZGVsLmNhbGwodGhpcywgewogICAgICAnX3R5cGUnOiAnc3VibWlzc2lvbicKICAgIH0pOwogICAgaWYgKHR5cGVvZiBmb3JtICE9PSAndW5kZWZpbmVkJyAmJiBmb3JtKSB7CiAgICAgIHRoaXMuc2V0KCdmb3JtTmFtZScsIGZvcm0uZ2V0KCduYW1lJykpOwogICAgICB0aGlzLnNldCgnZm9ybUlkJywgZm9ybS5nZXQoJ19pZCcpKTsKICAgICAgdGhpcy5zZXQoJ2RldmljZUZvcm1UaW1lc3RhbXAnLCBmb3JtLmdldExhc3RVcGRhdGUoKSk7CiAgICAgIHRoaXMuc2V0KCdjcmVhdGVEYXRlJywgYXBwRm9ybS51dGlscy5nZXRUaW1lKCkpOwogICAgICB0aGlzLnNldCgndGltZXpvbmVPZmZzZXQnLCBhcHBGb3JtLnV0aWxzLmdldFRpbWUodHJ1ZSkpOwogICAgICB0aGlzLnNldCgnYXBwSWQnLCBhcHBGb3JtLmNvbmZpZy5nZXQoJ2FwcElkJykpOwogICAgICB0aGlzLnNldCgnYXBwRW52aXJvbm1lbnQnLCBhcHBGb3JtLmNvbmZpZy5nZXQoJ2VudicpKTsKICAgICAgdGhpcy5zZXQoJ2FwcENsb3VkTmFtZScsICcnKTsKICAgICAgdGhpcy5zZXQoJ2NvbW1lbnRzJywgW10pOwogICAgICB0aGlzLnNldCgnZm9ybUZpZWxkcycsIFtdKTsKICAgICAgdGhpcy5zZXQoJ3NhdmVEYXRlJywgbnVsbCk7CiAgICAgIHRoaXMuc2V0KCdzdWJtaXREYXRlJywgbnVsbCk7CiAgICAgIHRoaXMuc2V0KCd1cGxvYWRTdGFydERhdGUnLCBudWxsKTsKICAgICAgdGhpcy5zZXQoJ3N1Ym1pdHRlZERhdGUnLCBudWxsKTsKICAgICAgdGhpcy5zZXQoJ3VzZXJJZCcsIG51bGwpOwogICAgICB0aGlzLnNldCgnZmlsZXNJblN1Ym1pc3Npb24nLCBbXSk7CiAgICAgIHRoaXMuc2V0KCdkZXZpY2VJZCcsIGFwcEZvcm0uY29uZmlnLmdldCgnZGV2aWNlSWQnKSk7CiAgICAgIHRoaXMudHJhbnNhY3Rpb25Nb2RlID0gZmFsc2U7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnNldCgnYXBwSWQnLCBhcHBGb3JtLmNvbmZpZy5nZXQoJ2FwcElkJykpOwogICAgICBpZihwYXJhbXMuc3VibWlzc2lvbklkKXsKICAgICAgICB0aGlzLnNldCgnZG93bmxvYWRTdWJtaXNzaW9uJywgdHJ1ZSk7CiAgICAgICAgdGhpcy5zZXRSZW1vdGVTdWJtaXNzaW9uSWQocGFyYW1zLnN1Ym1pc3Npb25JZCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zZXQoJ3N0YXR1cycsICduZXcnKTsKICAgICAgfQogICAgfQogICAgdGhpcy5zZXQoJ3N0YXR1cycsICduZXcnKTsKICAgIHRoaXMuZ2VuTG9jYWxJZCgpOwogICAgdmFyIGxvY2FsSWQgPSB0aGlzLmdldExvY2FsSWQoKTsKICAgIF9zdWJtaXNzaW9uc1tsb2NhbElkXSA9IHRoaXM7CiAgfQogIGFwcEZvcm0udXRpbHMuZXh0ZW5kKFN1Ym1pc3Npb24sIE1vZGVsKTsKICAvKioKICAgKiBzYXZlIGN1cnJlbnQgc3VibWlzc2lvbiBhcyBkcmFmdAogICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXQogICAqLwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLnNhdmVEcmFmdCA9IGZ1bmN0aW9uKGNiKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb24gc2F2ZURyYWZ0OiAiKTsKICAgIHZhciB0YXJnZXRTdGF0dXMgPSAnZHJhZnQnOwogICAgdmFyIHRoYXQgPSB0aGlzOwogICAgdGhpcy5zZXQoJ3RpbWV6b25lT2Zmc2V0JywgYXBwRm9ybS51dGlscy5nZXRUaW1lKHRydWUpKTsKICAgIHRoaXMuc2V0KCdzYXZlRGF0ZScsIGFwcEZvcm0udXRpbHMuZ2V0VGltZSgpKTsKICAgIHRoaXMuY2hhbmdlU3RhdHVzKHRhcmdldFN0YXR1cywgZnVuY3Rpb24oZXJyKSB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGF0LmVtaXQoJ3NhdmVkcmFmdCcpOwogICAgICAgIGNiKG51bGwsIG51bGwpOwogICAgICB9CiAgICB9KTsKICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLnZhbGlkYXRlRmllbGQgPSBmdW5jdGlvbihmaWVsZElkLCBjYikgewogICAgJGZoLmZvcm1zLmxvZy5kKCJTdWJtaXNzaW9uIHZhbGlkYXRlRmllbGQ6ICIsIGZpZWxkSWQpOwogICAgdmFyIHRoYXQgPSB0aGlzOwogICAgdGhpcy5nZXRGb3JtKGZ1bmN0aW9uKGVyciwgZm9ybSkgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgY2IoZXJyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgc3VibWlzc2lvbkRhdGEgPSB0aGF0LmdldFByb3BzKCk7CiAgICAgICAgdmFyIHJ1bGVFbmdpbmUgPSBmb3JtLmdldFJ1bGVFbmdpbmUoKTsKICAgICAgICBydWxlRW5naW5lLnZhbGlkYXRlRmllbGQoZmllbGRJZCwgc3VibWlzc2lvbkRhdGEsIGNiKTsKICAgICAgfQogICAgfSk7CiAgfTsKICBTdWJtaXNzaW9uLnByb3RvdHlwZS5jaGVja1J1bGVzID0gZnVuY3Rpb24oY2IpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbiBjaGVja1J1bGVzOiAiKTsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHRoaXMuZ2V0Rm9ybShmdW5jdGlvbihlcnIsIGZvcm0pIHsKICAgICAgaWYgKGVycikgewogICAgICAgIGNiKGVycik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHN1Ym1pc3Npb24gPSBzZWxmLmdldFByb3BzKCk7CiAgICAgICAgdmFyIHJ1bGVFbmdpbmUgPSBmb3JtLmdldFJ1bGVFbmdpbmUoKTsKICAgICAgICBydWxlRW5naW5lLmNoZWNrUnVsZXMoc3VibWlzc2lvbiwgY2IpOwogICAgICB9CiAgICB9KTsKICB9OwoKICBTdWJtaXNzaW9uLnByb3RvdHlwZS5wZXJmb3JtVmFsaWRhdGlvbiA9IGZ1bmN0aW9uKGNiKXsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHNlbGYuZ2V0Rm9ybShmdW5jdGlvbihlcnIsIGZvcm0pIHsKICAgICAgaWYgKGVycikgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiU3VibWlzc2lvbiBzdWJtaXQ6IEVycm9yIGdldHRpbmcgZm9ybSAiLCBlcnIpOwogICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICB9CiAgICAgIHZhciBydWxlRW5naW5lID0gZm9ybS5nZXRSdWxlRW5naW5lKCk7CiAgICAgIHZhciBzdWJtaXNzaW9uID0gc2VsZi5nZXRQcm9wcygpOwogICAgICBydWxlRW5naW5lLnZhbGlkYXRlRm9ybShzdWJtaXNzaW9uLCBjYik7CiAgICB9KTsKICB9OwoKICAvKioKICAgKiBWYWxpZGF0ZSB0aGUgc3VibWlzc2lvbiBvbmx5LgogICAqLwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLnZhbGlkYXRlU3VibWlzc2lvbiA9IGZ1bmN0aW9uKGNiKXsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICBzZWxmLnBlcmZvcm1WYWxpZGF0aW9uKGZ1bmN0aW9uKGVyciwgcmVzKXsKICAgICAgaWYoZXJyKXsKICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgfQogICAgICB2YXIgdmFsaWRhdGlvbiA9IHJlcy52YWxpZGF0aW9uOwogICAgICBpZiAodmFsaWRhdGlvbi52YWxpZCkgewogICAgICAgIHJldHVybiBjYihudWxsLCB2YWxpZGF0aW9uLnZhbGlkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzZWxmLmVtaXQoJ3ZhbGlkYXRpb25lcnJvcicsIHZhbGlkYXRpb24pOwogICAgICAgIGNiKG51bGwsIHZhbGlkYXRpb24udmFsaWQpOwogICAgICB9ICAKICAgIH0pOwogIH07CgogIC8qKgogICAqIHN1Ym1pdCBjdXJyZW50IHN1Ym1pc3Npb24gdG8gcmVtb3RlCiAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiIFtkZXNjcmlwdGlvbl0KICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgW2Rlc2NyaXB0aW9uXQogICAqLwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLnN1Ym1pdCA9IGZ1bmN0aW9uKGNiKSB7CiAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb24gc3VibWl0OiAiKTsKICAgIHZhciB0YXJnZXRTdGF0dXMgPSAncGVuZGluZyc7CiAgICB2YXIgdmFsaWRhdGVSZXN1bHQgPSB0cnVlOwogICAgCiAgICB0aGlzLnNldCgndGltZXpvbmVPZmZzZXQnLCBhcHBGb3JtLnV0aWxzLmdldFRpbWUodHJ1ZSkpOwogICAgdGhhdC5wZXJmb3JtVmFsaWRhdGlvbihmdW5jdGlvbihlcnIsIHJlcyl7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmUoIlN1Ym1pc3Npb24gc3VibWl0IHZhbGlkYXRlRm9ybTogRXJyb3IgdmFsaWRhdGluZyBmb3JtICIsIGVycik7CiAgICAgICAgY2IoZXJyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb24gc3VibWl0OiB2YWxpZGF0ZUZvcm0uIENvbXBsZXRlZCByZXN1bHQiLCByZXMpOwogICAgICAgIHZhciB2YWxpZGF0aW9uID0gcmVzLnZhbGlkYXRpb247CiAgICAgICAgaWYgKHZhbGlkYXRpb24udmFsaWQpIHsKICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWlzc2lvbiBzdWJtaXQ6IHZhbGlkYXRlRm9ybS4gQ29tcGxldGVkIEZvcm0gVmFsaWQiLCByZXMpOwogICAgICAgICAgdGhhdC5zZXQoJ3N1Ym1pdERhdGUnLCBuZXcgRGF0ZSgpKTsKICAgICAgICAgIHRoYXQuY2hhbmdlU3RhdHVzKHRhcmdldFN0YXR1cywgZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgICAgICAgY2IoZXJyb3IpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRoYXQuZW1pdCgnc3VibWl0Jyk7CiAgICAgICAgICAgICAgY2IobnVsbCwgbnVsbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb24gc3VibWl0OiB2YWxpZGF0ZUZvcm0uIENvbXBsZXRlZCBWYWxpZGF0aW9uIGVycm9yIiwgcmVzKTsKICAgICAgICAgIHRoYXQuZW1pdCgndmFsaWRhdGlvbmVycm9yJywgdmFsaWRhdGlvbik7CiAgICAgICAgICBjYignVmFsaWRhdGlvbiBlcnJvcicpOwogICAgICAgIH0KICAgICAgfSAgCiAgICB9KTsKICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLmdldFVwbG9hZFRhc2sgPSBmdW5jdGlvbihjYikgewogICAgdmFyIHRhc2tJZCA9IHRoaXMuZ2V0VXBsb2FkVGFza0lkKCk7CiAgICBpZiAodGFza0lkKSB7CiAgICAgIGFwcEZvcm0ubW9kZWxzLnVwbG9hZE1hbmFnZXIuZ2V0VGFza0J5SWQodGFza0lkLCBjYik7CiAgICB9IGVsc2UgewogICAgICBjYihudWxsLCBudWxsKTsKICAgIH0KICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLmdldEZvcm1JZCA9IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5nZXQoImZvcm1JZCIpOwogIH07CiAgLyoqCiAgICogSWYgYSBzdWJtaXNzaW9uIGlzIGEgZG93bmxvYWQgc3VibWlzc2lvbiwgdGhlIEpTT04gZGVmaW5pdGlvbiBvZiB0aGUgZm9ybQogICAqIHRoYXQgaXQgd2FzIHN1Ym1pdHRlZCBhZ2FpbnN0IGlzIGNvbnRhaW5lZCBpbiB0aGUgc3VibWlzc2lvbi4KICAgKi8KICBTdWJtaXNzaW9uLnByb3RvdHlwZS5nZXRGb3JtU3VibWl0dGVkQWdhaW5zdCA9IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5nZXQoImZvcm1TdWJtaXR0ZWRBZ2FpbnN0Iik7CiAgfTsKICBTdWJtaXNzaW9uLnByb3RvdHlwZS5nZXREb3dubG9hZFRhc2sgPSBmdW5jdGlvbihjYil7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAkZmguZm9ybXMubG9nLmQoImdldERvd25sb2FkVGFzayIpOwogICAgaWYoc2VsZi5pc0Rvd25sb2FkU3VibWlzc2lvbigpKXsKICAgICAgc2VsZi5nZXRVcGxvYWRUYXNrKGNiKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmKGNiICYmIHR5cGVvZihjYikgPT09ICdmdW5jdGlvbicpewogICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiU3VibWlzc2lvbiBpcyBub3QgYSBkb3dubG9hZCBzdWJtaXNzaW9uIik7CiAgICAgICAgcmV0dXJuIGNiKCJTdWJtaXNzaW9uIGlzIG5vdCBhIGRvd25sb2FkIHN1Ym1pc3Npb24iKTsKICAgICAgfQogICAgfQogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUuY2FuY2VsVXBsb2FkVGFzayA9IGZ1bmN0aW9uKGNiKSB7CiAgICB2YXIgdGFyZ2V0U3RhdHVzID0gJ3N1Ym1pdCc7CiAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICBhcHBGb3JtLm1vZGVscy51cGxvYWRNYW5hZ2VyLmNhbmNlbFN1Ym1pc3Npb24odGhpcywgZnVuY3Rpb24oZXJyKSB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmUoZXJyKTsKICAgICAgfQogICAgICB0aGF0LmNoYW5nZVN0YXR1cyh0YXJnZXRTdGF0dXMsIGNiKTsKICAgIH0pOwogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUuZ2V0VXBsb2FkVGFza0lkID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ3VwbG9hZFRhc2tJZCcpOwogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUuc2V0VXBsb2FkVGFza0lkID0gZnVuY3Rpb24odXRJZCkgewogICAgdGhpcy5zZXQoJ3VwbG9hZFRhc2tJZCcsIHV0SWQpOwogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUuaXNJblByb2dyZXNzID0gZnVuY3Rpb24oKXsKICAgIHJldHVybiB0aGlzLmdldCgic3RhdHVzIikgPT09ICJpbnByb2dyZXNzIjsKICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLmlzRG93bmxvYWRlZCA9IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5nZXQoInN0YXR1cyIpID09PSAiZG93bmxvYWRlZCI7CiAgfTsKICBTdWJtaXNzaW9uLnByb3RvdHlwZS5pc1N1Ym1pdHRlZCA9IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5nZXQoInN0YXR1cyIpID09PSAic3VibWl0dGVkIjsKICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLnN1Ym1pdHRlZCA9IGZ1bmN0aW9uKGNiKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBpZihzZWxmLmlzRG93bmxvYWRTdWJtaXNzaW9uKCkpewogICAgICB2YXIgZXJyTXNnID0gIkRvd25sb2FkZWQgc3VibWlzc2lvbnMgc2hvdWxkIG5vdCBjYWxsIHN1Ym1pdHRlZCBmdW5jdGlvbi4iOwogICAgICAkZmguZm9ybXMubG9nLmUoZXJyTXNnKTsKICAgICAgcmV0dXJuIGNiKGVyck1zZyk7CiAgICB9CiAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb24gc3VibWl0dGVkIGNhbGxlZCIpOwoKICAgIHZhciB0YXJnZXRTdGF0dXMgPSAnc3VibWl0dGVkJzsKCiAgICBzZWxmLnNldCgnc3VibWl0dGVkRGF0ZScsIGFwcEZvcm0udXRpbHMuZ2V0VGltZSgpKTsKICAgIHNlbGYuY2hhbmdlU3RhdHVzKHRhcmdldFN0YXR1cywgZnVuY3Rpb24oZXJyKSB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHNldHRpbmcgc3VibWl0dGVkIHN0YXR1cyAiICsgZXJyKTsKICAgICAgICBjYihlcnIpOwogICAgICB9IGVsc2UgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiU3VibWl0dGVkIHN0YXR1cyBzZXQgZm9yIHN1Ym1pc3Npb24gIiArIHNlbGYuZ2V0KCdzdWJtaXNzaW9uSWQnKSArICIgd2l0aCBsb2NhbElkICIgKyBzZWxmLmdldExvY2FsSWQoKSk7CiAgICAgICAgc2VsZi5lbWl0KCdzdWJtaXR0ZWQnLCBzZWxmLmdldCgnc3VibWlzc2lvbklkJykpOwogICAgICAgIGNiKG51bGwsIG51bGwpOwogICAgICB9CiAgICB9KTsKICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLnF1ZXVlZCA9IGZ1bmN0aW9uKGNiKXsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGlmKHNlbGYuaXNEb3dubG9hZFN1Ym1pc3Npb24oKSl7CiAgICAgIHZhciBlcnJNc2cgPSAiRG93bmxvYWRlZCBzdWJtaXNzaW9ucyBzaG91bGQgbm90IGNhbGwgcXVldWVkIGZ1bmN0aW9uLiI7CiAgICAgICRmaC5mb3Jtcy5sb2cuZShlcnJNc2cpOwogICAgICByZXR1cm4gY2IoZXJyTXNnKTsKICAgIH0KCiAgICAgdmFyIHRhcmdldFN0YXR1cyA9ICdxdWV1ZWQnOwogICAgIHNlbGYuc2V0KCdxdWV1ZWREYXRlJywgYXBwRm9ybS51dGlscy5nZXRUaW1lKCkpOwogICAgIHNlbGYuY2hhbmdlU3RhdHVzKHRhcmdldFN0YXR1cywgZnVuY3Rpb24oZXJyKSB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHNldHRpbmcgcXVldWVkIHN0YXR1cyAiICsgZXJyKTsKICAgICAgICBjYihlcnIpOwogICAgICB9IGVsc2UgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiUXVldWVkIHN0YXR1cyBzZXQgZm9yIHN1Ym1pc3Npb24gIiArIHNlbGYuZ2V0KCdzdWJtaXNzaW9uSWQnKSArICIgd2l0aCBsb2NhbElkICIgKyBzZWxmLmdldExvY2FsSWQoKSk7CiAgICAgICAgc2VsZi5lbWl0KCdxdWV1ZWQnLCBzZWxmLmdldCgnc3VibWlzc2lvbklkJykpOwogICAgICAgIGNiKG51bGwsIHNlbGYpOwogICAgICB9CiAgICB9KTsKICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLmRvd25sb2FkZWQgPSBmdW5jdGlvbihjYil7CiAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb24gRG93bmxvYWRlZCBjYWxsZWQiKTsKICAgIHZhciB0aGF0ID0gdGhpczsKICAgIHZhciB0YXJnZXRTdGF0dXMgPSAnZG93bmxvYWRlZCc7CgogICAgdGhhdC5zZXQoJ2Rvd25sb2FkZWREYXRlJywgYXBwRm9ybS51dGlscy5nZXRUaW1lKCkpOwogICAgdGhhdC5jaGFuZ2VTdGF0dXModGFyZ2V0U3RhdHVzLCBmdW5jdGlvbihlcnIpIHsKICAgICAgaWYgKGVycikgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRXJyb3Igc2V0dGluZyBkb3dubG9hZGVkIHN0YXR1cyAiICsgZXJyKTsKICAgICAgICBjYihlcnIpOwogICAgICB9IGVsc2UgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiRG93bmxvYWRlZCBzdGF0dXMgc2V0IGZvciBzdWJtaXNzaW9uICIgKyB0aGF0LmdldCgnc3VibWlzc2lvbklkJykgKyAiIHdpdGggbG9jYWxJZCAiICsgdGhhdC5nZXRMb2NhbElkKCkpOwogICAgICAgIHRoYXQuZW1pdCgnZG93bmxvYWRlZCcsIHRoYXQuZ2V0KCdzdWJtaXNzaW9uSWQnKSk7CiAgICAgICAgY2IobnVsbCwgdGhhdCk7CiAgICAgIH0KICAgIH0pOwogIH07CiAgLy9qb2ludCBmb3JtIGlkIGFuZCBzdWJtaXNzaW9ucyB0aW1lc3RhbXAuCiAgU3VibWlzc2lvbi5wcm90b3R5cGUuZ2VuTG9jYWxJZCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGxpZCA9IGFwcEZvcm0udXRpbHMubG9jYWxJZCh0aGlzKTsKICAgIHZhciBmb3JtSWQgPSB0aGlzLmdldCgnZm9ybUlkJykgfHwgTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMDAwMDApOwogICAgdGhpcy5zZXRMb2NhbElkKGZvcm1JZCArICdfJyArIGxpZCk7CiAgfTsKICAvKioKICAgKiBjaGFuZ2Ugc3RhdHVzIGFuZCBzYXZlIHRoZSBzdWJtaXNzaW9uIGxvY2FsbHkgYW5kIHJlZ2lzdGVyIHRvIHN1Ym1pc3Npb25zIGxpc3QuCiAgICogQHBhcmFtIHtbdHlwZV19IHN0YXR1cyBbZGVzY3JpcHRpb25dCiAgICovCiAgU3VibWlzc2lvbi5wcm90b3R5cGUuY2hhbmdlU3RhdHVzID0gZnVuY3Rpb24oc3RhdHVzLCBjYikgewogICAgaWYgKHRoaXMuaXNTdGF0dXNWYWxpZChzdGF0dXMpKSB7CiAgICAgIHZhciB0aGF0ID0gdGhpczsKICAgICAgdGhpcy5zZXQoJ3N0YXR1cycsIHN0YXR1cyk7CiAgICAgIHRoaXMuc2F2ZVRvTGlzdChmdW5jdGlvbihlcnIpIHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAkZmguZm9ybXMubG9nLmUoZXJyKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICB0aGlzLnNhdmVMb2NhbChjYik7CiAgICB9IGVsc2UgewogICAgICAkZmguZm9ybXMubG9nLmUoJ1RhcmdldCBzdGF0dXMgaXMgbm90IHZhbGlkOiAnICsgc3RhdHVzKTsKICAgICAgY2IoJ1RhcmdldCBzdGF0dXMgaXMgbm90IHZhbGlkOiAnICsgc3RhdHVzKTsKICAgIH0KICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLnVwbG9hZCA9IGZ1bmN0aW9uKGNiKSB7CiAgICB2YXIgdGFyZ2V0U3RhdHVzID0gImlucHJvZ3Jlc3MiOwogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgaWYgKHRoaXMuaXNTdGF0dXNWYWxpZCh0YXJnZXRTdGF0dXMpKSB7CiAgICAgIHRoaXMuc2V0KCJzdGF0dXMiLCB0YXJnZXRTdGF0dXMpOwogICAgICB0aGlzLnNldCgidXBsb2FkU3RhcnREYXRlIiwgYXBwRm9ybS51dGlscy5nZXRUaW1lKCkpOwogICAgICBhcHBGb3JtLm1vZGVscy5zdWJtaXNzaW9ucy51cGRhdGVTdWJtaXNzaW9uV2l0aG91dFNhdmluZyh0aGlzKTsKICAgICAgYXBwRm9ybS5tb2RlbHMudXBsb2FkTWFuYWdlci5xdWV1ZVN1Ym1pc3Npb24oc2VsZiwgZnVuY3Rpb24oZXJyLCB1dCkgewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgIGNiKGVycik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHV0LnNldCgiZXJyb3IiLCBudWxsKTsKICAgICAgICAgIHV0LnNhdmVMb2NhbChmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRXJyb3Igc2F2aW5nIHVwbG9hZCB0YXNrOiAiICsgZXJyKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBzZWxmLmVtaXQoImlucHJvZ3Jlc3MiLCB1dCk7CiAgICAgICAgICB1dC5vbigicHJvZ3Jlc3MiLCBmdW5jdGlvbihwcm9ncmVzcykgewogICAgICAgICAgICAkZmguZm9ybXMubG9nLmQoIkVtaXR0aW5nIHVwbG9hZCBwcm9ncmVzcyBmb3Igc3VibWlzc2lvbjogIiArIHNlbGYuZ2V0TG9jYWxJZCgpICsgSlNPTi5zdHJpbmdpZnkocHJvZ3Jlc3MpKTsKICAgICAgICAgICAgc2VsZi5lbWl0KCJwcm9ncmVzcyIsIHByb2dyZXNzKTsKICAgICAgICAgIH0pOwogICAgICAgICAgY2IobnVsbCwgdXQpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gY2IoIkludmFsaWQgU3RhdHVzIHRvIHVwbG9hZCBhIGZvcm0gc3VibWlzc2lvbi4iKTsKICAgIH0KICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLmRvd25sb2FkID0gZnVuY3Rpb24oY2IpewogICAgdmFyIHRoYXQgPSB0aGlzOwogICAgJGZoLmZvcm1zLmxvZy5kKCJTdGFydGluZyBkb3dubG9hZCBmb3Igc3VibWlzc2lvbjogIiArIHRoYXQuZ2V0TG9jYWxJZCgpKTsKICAgIHZhciB0YXJnZXRTdGF0dXMgPSAicGVuZGluZyI7CiAgICBpZih0aGlzLmlzU3RhdHVzVmFsaWQodGFyZ2V0U3RhdHVzKSl7CiAgICAgIHRoaXMuc2V0KCJzdGF0dXMiLCB0YXJnZXRTdGF0dXMpOwogICAgICB0YXJnZXRTdGF0dXMgPSAiaW5wcm9ncmVzcyI7CiAgICAgIGlmKHRoaXMuaXNTdGF0dXNWYWxpZCh0YXJnZXRTdGF0dXMpKXsKICAgICAgICB0aGlzLnNldCgic3RhdHVzIiwgdGFyZ2V0U3RhdHVzKTsKICAgICAgICAvL1N0YXR1cyBpcyB2YWxpZCwgYWRkIHRoZSBzdWJtaXNzaW9uIHRvIHRoZQogICAgICAgIGFwcEZvcm0ubW9kZWxzLnVwbG9hZE1hbmFnZXIucXVldWVTdWJtaXNzaW9uKHRoYXQsIGZ1bmN0aW9uKGVyciwgZG93bmxvYWRUYXNrKSB7CiAgICAgICAgICBpZihlcnIpewogICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgIH0KICAgICAgICAgIGRvd25sb2FkVGFzay5zZXQoImVycm9yIiwgbnVsbCk7CiAgICAgICAgICBkb3dubG9hZFRhc2suc2F2ZUxvY2FsKGZ1bmN0aW9uKGVycikgewogICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBzYXZpbmcgZG93bmxvYWQgdGFzazogIiArIGVycik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgdGhhdC5lbWl0KCJpbnByb2dyZXNzIiwgZG93bmxvYWRUYXNrKTsKICAgICAgICAgIGRvd25sb2FkVGFzay5vbigicHJvZ3Jlc3MiLCBmdW5jdGlvbihwcm9ncmVzcykgewogICAgICAgICAgICAkZmguZm9ybXMubG9nLmQoIkVtaXR0aW5nIGRvd25sb2FkIHByb2dyZXNzIGZvciBzdWJtaXNzaW9uOiAiICsgdGhhdC5nZXRMb2NhbElkKCkgKyBKU09OLnN0cmluZ2lmeShwcm9ncmVzcykpOwogICAgICAgICAgICB0aGF0LmVtaXQoInByb2dyZXNzIiwgcHJvZ3Jlc3MpOwogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gY2IobnVsbCwgZG93bmxvYWRUYXNrKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gY2IoIkludmFsaWQgU3RhdHVzIHRvIGRvd2xvYWQgYSBmb3JtIHN1Ym1pc3Npb24iKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGNiKCJJbnZhbGlkIFN0YXR1cyB0byBkb3dubG9hZCBhIGZvcm0gc3VibWlzc2lvbi4iKTsKICAgIH0KICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLnNhdmVUb0xpc3QgPSBmdW5jdGlvbihjYikgewogICAgYXBwRm9ybS5tb2RlbHMuc3VibWlzc2lvbnMuc2F2ZVN1Ym1pc3Npb24odGhpcywgY2IpOwogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbihlcnJvck1zZywgY2IpIHsKICAgIHRoaXMuc2V0KCdlcnJvck1lc3NhZ2UnLCBlcnJvck1zZyk7CiAgICB2YXIgdGFyZ2V0U3RhdHVzID0gJ2Vycm9yJzsKICAgIHRoaXMuY2hhbmdlU3RhdHVzKHRhcmdldFN0YXR1cywgY2IpOwogICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycm9yTXNnKTsKICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLmdldFN0YXR1cyA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdzdGF0dXMnKTsKICB9OwogIC8qKgogICAqIGNoZWNrIGlmIGEgdGFyZ2V0IHN0YXR1cyBpcyB2YWxpZAogICAqIEBwYXJhbSAge1t0eXBlXX0gIHRhcmdldFN0YXR1cyBbZGVzY3JpcHRpb25dCiAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl0KICAgKi8KICBTdWJtaXNzaW9uLnByb3RvdHlwZS5pc1N0YXR1c1ZhbGlkID0gZnVuY3Rpb24odGFyZ2V0U3RhdHVzKSB7CiAgICAkZmguZm9ybXMubG9nLmQoImlzU3RhdHVzVmFsaWQuIFRhcmdldCBTdGF0dXM6ICIgKyB0YXJnZXRTdGF0dXMgKyAiIEN1cnJlbnQgU3RhdHVzOiAiICsgdGhpcy5nZXQoJ3N0YXR1cycpLnRvTG93ZXJDYXNlKCkpOwogICAgdmFyIHN0YXR1cyA9IHRoaXMuZ2V0KCdzdGF0dXMnKS50b0xvd2VyQ2FzZSgpOwogICAgdmFyIG5leHRTdGF0dXMgPSBzdGF0dXNNYWNoaW5lW3N0YXR1c107CiAgICBpZiAobmV4dFN0YXR1cy5pbmRleE9mKHRhcmdldFN0YXR1cykgPiAtMSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuc2V0KCdzdGF0dXMnLCAnZXJyb3InKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUuYWRkQ29tbWVudCA9IGZ1bmN0aW9uKG1zZywgdXNlcikgewogICAgdmFyIG5vdyA9IGFwcEZvcm0udXRpbHMuZ2V0VGltZSgpOwogICAgdmFyIHRzID0gbm93LmdldFRpbWUoKTsKICAgIHZhciBuZXdDb21tZW50ID0gewogICAgICAnbWFkZUJ5JzogdHlwZW9mIHVzZXIgPT09ICd1bmRlZmluZWQnID8gJycgOiB1c2VyLnRvU3RyaW5nKCksCiAgICAgICdtYWRlT24nOiBub3csCiAgICAgICd2YWx1ZSc6IG1zZywKICAgICAgJ3RpbWVTdGFtcCc6IHRzCiAgICB9OwogICAgdGhpcy5nZXRDb21tZW50cygpLnB1c2gobmV3Q29tbWVudCk7CiAgICByZXR1cm4gdHM7CiAgfTsKICBTdWJtaXNzaW9uLnByb3RvdHlwZS5nZXRDb21tZW50cyA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdjb21tZW50cycpOwogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUucmVtb3ZlQ29tbWVudCA9IGZ1bmN0aW9uKHRpbWVTdGFtcCkgewogICAgdmFyIGNvbW1lbnRzID0gdGhpcy5nZXRDb21tZW50cygpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21tZW50cy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgY29tbWVudCA9IGNvbW1lbnRzW2ldOwogICAgICBpZiAoY29tbWVudC50aW1lU3RhbXAgPT09IHRpbWVTdGFtcCkgewogICAgICAgIGNvbW1lbnRzLnNwbGljZShpLCAxKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgIH0KICB9OwoKICBTdWJtaXNzaW9uLnByb3RvdHlwZS5wb3B1bGF0ZUZpbGVzSW5TdWJtaXNzaW9uID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgdG1wRmlsZU5hbWVzID0gW107CgogICAgdmFyIHN1Ym1pc3Npb25GaWxlcyA9IHNlbGYuZ2V0U3VibWlzc2lvbkZpbGVzKCk7CiAgICBmb3IgKHZhciBmaWVsZFZhbEluZGV4ID0gMDsgZmllbGRWYWxJbmRleCA8IHN1Ym1pc3Npb25GaWxlcy5sZW5ndGg7IGZpZWxkVmFsSW5kZXgrKykgewogICAgICBpZihzdWJtaXNzaW9uRmlsZXNbZmllbGRWYWxJbmRleF0uZmlsZU5hbWUpewogICAgICAgIHRtcEZpbGVOYW1lcy5wdXNoKHN1Ym1pc3Npb25GaWxlc1tmaWVsZFZhbEluZGV4XS5maWxlTmFtZSk7CiAgICAgIH0gZWxzZSBpZihzdWJtaXNzaW9uRmlsZXNbZmllbGRWYWxJbmRleF0uaGFzaE5hbWUpewogICAgICAgIHRtcEZpbGVOYW1lcy5wdXNoKHN1Ym1pc3Npb25GaWxlc1tmaWVsZFZhbEluZGV4XS5oYXNoTmFtZSk7CiAgICAgIH0KICAgIH0KCiAgICBzZWxmLnNldCgiZmlsZXNJblN1Ym1pc3Npb24iLCBzdWJtaXNzaW9uRmlsZXMpOwogIH07CgogIFN1Ym1pc3Npb24ucHJvdG90eXBlLmdldFN1Ym1pc3Npb25GaWxlcyA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgJGZoLmZvcm1zLmxvZy5kKCJJbiBnZXRTdWJtaXNzaW9uRmlsZXM6ICIgKyBzZWxmLmdldExvY2FsSWQoKSk7CiAgICB2YXIgc3VibWlzc2lvbkZpbGVzID0gW107CgogICAgdmFyIGZvcm1GaWVsZHMgPSBzZWxmLmdldEZvcm1GaWVsZHMoKTsKCiAgICBmb3IgKHZhciBmb3JtRmllbGRJbmRleCA9IDA7IGZvcm1GaWVsZEluZGV4IDwgZm9ybUZpZWxkcy5sZW5ndGg7IGZvcm1GaWVsZEluZGV4KyspIHsKICAgICAgdmFyIHRtcEZpZWxkVmFsdWVzID0gZm9ybUZpZWxkc1tmb3JtRmllbGRJbmRleF0uZmllbGRWYWx1ZXMgfHwgW107CiAgICAgIGZvciAodmFyIGZpZWxkVmFsSW5kZXggPSAwOyBmaWVsZFZhbEluZGV4IDwgdG1wRmllbGRWYWx1ZXMubGVuZ3RoOyBmaWVsZFZhbEluZGV4KyspIHsKICAgICAgICBpZih0bXBGaWVsZFZhbHVlc1tmaWVsZFZhbEluZGV4XS5maWxlTmFtZSl7CiAgICAgICAgICBzdWJtaXNzaW9uRmlsZXMucHVzaCh0bXBGaWVsZFZhbHVlc1tmaWVsZFZhbEluZGV4XSk7CiAgICAgICAgfSBlbHNlIGlmKHRtcEZpZWxkVmFsdWVzW2ZpZWxkVmFsSW5kZXhdLmhhc2hOYW1lKXsKICAgICAgICAgIHN1Ym1pc3Npb25GaWxlcy5wdXNoKHRtcEZpZWxkVmFsdWVzW2ZpZWxkVmFsSW5kZXhdKTsKICAgICAgICB9CiAgICAgIH0KCiAgICB9CgogICAgcmV0dXJuIHN1Ym1pc3Npb25GaWxlczsKICB9OwoKICAvKioKICAgKiBBZGQgYSB2YWx1ZSB0byBzdWJtaXNzaW9uLgogICAqIFRoaXMgd2lsbCBub3QgY2F1c2UgdGhlIGZpZWxkIGJlZW4gdmFsaWRhdGVkLgogICAqIFZhbGlkYXRpb24gc2hvdWxkIGhhcHBlbjoKICAgKiAxLiBvbmJsdXIgKGZpZWxkIHZhbHVlKQogICAqIDIuIG9uc3VibWl0ICh3aG9sZSBzdWJtaXNzaW9uIGpzb24pCiAgICoKICAgKiBAcGFyYW0ge1t0eXBlXX0gcGFyYW1zICAgeyJmaWVsZElkIiwidmFsdWUiLCJpbmRleCI6b3B0aW9uYWx9CiAgICogQHBhcmFtIHt9IGNiKGVycixyZXMpIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gZmluaXNoZWQKICAgKiBAcmV0dXJuIHRydWUgLyBlcnJvciBtZXNzYWdlCiAgICovCiAgU3VibWlzc2lvbi5wcm90b3R5cGUuYWRkSW5wdXRWYWx1ZSA9IGZ1bmN0aW9uKHBhcmFtcywgY2IpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiQWRkaW5nIGlucHV0IHZhbHVlOiAiLCBKU09OLnN0cmluZ2lmeShwYXJhbXMgfHwge30pKTsKICAgIHZhciB0aGF0ID0gdGhpczsKICAgIHZhciBmaWVsZElkID0gcGFyYW1zLmZpZWxkSWQ7CiAgICB2YXIgaW5wdXRWYWx1ZSA9IHBhcmFtcy52YWx1ZTsKCiAgICBpZihpbnB1dFZhbHVlICE9PSBudWxsICYmIHR5cGVvZihpbnB1dFZhbHVlKSAhPT0gJ3VuZGVmaW5lZCcpewogICAgICB2YXIgaW5kZXggPSBwYXJhbXMuaW5kZXggPT09IHVuZGVmaW5lZCA/IC0xIDogcGFyYW1zLmluZGV4OwogICAgICB0aGlzLmdldEZvcm0oZnVuY3Rpb24oZXJyLCBmb3JtKSB7CiAgICAgICAgdmFyIGZpZWxkTW9kZWwgPSBmb3JtLmdldEZpZWxkTW9kZWxCeUlkKGZpZWxkSWQpOwogICAgICAgIGlmICh0aGF0LnRyYW5zYWN0aW9uTW9kZSkgewogICAgICAgICAgaWYgKCF0aGF0LnRtcEZpZWxkc1tmaWVsZElkXSkgewogICAgICAgICAgICB0aGF0LnRtcEZpZWxkc1tmaWVsZElkXSA9IFtdOwogICAgICAgICAgfQoKICAgICAgICAgIHBhcmFtcy5pc1N0b3JlID0gZmFsc2U7Ly9Eb24ndCBzdG9yZSB0aGUgZmlsZXMgdW50aWwgdGhlIHRyYW5zYWN0aW9uIGlzIGNvbXBsZXRlCiAgICAgICAgICBmaWVsZE1vZGVsLnByb2Nlc3NJbnB1dChwYXJhbXMsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkgewogICAgICAgICAgICAgICAgdGhhdC50bXBGaWVsZHNbZmllbGRJZF1baW5kZXhdID0gcmVzdWx0OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGF0LnRtcEZpZWxkc1tmaWVsZElkXS5wdXNoKHJlc3VsdCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgcmVzdWx0KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGF0LmdldElucHV0VmFsdWVPYmplY3RCeUlkKGZpZWxkSWQpOwoKICAgICAgICAgIC8vRmlsZSBhbHJlYWR5IGV4aXN0cyBmb3IgdGhpcyBpbnB1dCwgb3ZlcndyaXRlIHJhdGhlciB0aGFuIGNyZWF0ZSBhIG5ldyBmaWxlCiAgICAgICAgICBpZih0YXJnZXQuZmllbGRWYWx1ZXNbaW5kZXhdKXsKICAgICAgICAgICAgaWYodHlwZW9mKHRhcmdldC5maWVsZFZhbHVlc1tpbmRleF0uaGFzaE5hbWUpID09PSAic3RyaW5nIil7CiAgICAgICAgICAgICAgcGFyYW1zLnByZXZpb3VzRmlsZSA9IHRhcmdldC5maWVsZFZhbHVlc1tpbmRleF07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCgogICAgICAgICAgZmllbGRNb2RlbC5wcm9jZXNzSW5wdXQocGFyYW1zLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkgewogICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgICAgICAgICAgIHRhcmdldC5maWVsZFZhbHVlc1tpbmRleF0gPSByZXN1bHQ7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRhcmdldC5maWVsZFZhbHVlcy5wdXNoKHJlc3VsdCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZih0eXBlb2YocmVzdWx0Lmhhc2hOYW1lKSA9PT0gInN0cmluZyIpewogICAgICAgICAgICAgICAgdGhhdC5wdXNoRmlsZShyZXN1bHQuaGFzaE5hbWUpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIGNiKG51bGwsIHJlc3VsdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICAkZmguZm9ybXMubG9nLmUoImFkZElucHV0VmFsdWU6IElucHV0IHZhbHVlIHdhcyBudWxsLiBQYXJhbXM6ICIgKyBmaWVsZElkKTsKICAgICAgcmV0dXJuIGNiKG51bGwsIHt9KTsKICAgIH0KICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLnB1c2hGaWxlID0gZnVuY3Rpb24oaGFzaE5hbWUpewogICAgdmFyIHN1YkZpbGVzID0gdGhpcy5nZXQoJ2ZpbGVzSW5TdWJtaXNzaW9uJywgW10pOwogICAgaWYodHlwZW9mKGhhc2hOYW1lKSA9PT0gInN0cmluZyIpewogICAgICBpZihzdWJGaWxlcy5pbmRleE9mKGhhc2hOYW1lKSA9PT0gLTEpewogICAgICAgIHN1YkZpbGVzLnB1c2goaGFzaE5hbWUpOwogICAgICAgIHRoaXMuc2V0KCdmaWxlc0luU3VibWlzc2lvbicsIHN1YkZpbGVzKTsKICAgICAgfQogICAgfQogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUucmVtb3ZlRmlsZVZhbHVlID0gZnVuY3Rpb24oaGFzaE5hbWUpewogICAgdmFyIHN1YkZpbGVzID0gdGhpcy5nZXQoJ2ZpbGVzSW5TdWJtaXNzaW9uJywgW10pOwogICAgaWYodHlwZW9mKGhhc2hOYW1lKSA9PT0gInN0cmluZyIgJiYgc3ViRmlsZXMuaW5kZXhPZihoYXNoTmFtZSkgPiAtMSl7CiAgICAgIHN1YkZpbGVzLnNwbGljZShzdWJGaWxlcy5pbmRleE9mKGhhc2hOYW1lKSwxKTsKICAgICAgdGhpcy5zZXQoJ2ZpbGVzSW5TdWJtaXNzaW9uJywgc3ViRmlsZXMpOwogICAgfQogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUuZ2V0SW5wdXRWYWx1ZUJ5RmllbGRJZCA9IGZ1bmN0aW9uKGZpZWxkSWQsIGNiKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgdmFsdWVzID0gdGhpcy5nZXRJbnB1dFZhbHVlT2JqZWN0QnlJZChmaWVsZElkKS5maWVsZFZhbHVlczsKICAgIHRoaXMuZ2V0Rm9ybShmdW5jdGlvbihlcnIsIGZvcm0pIHsKICAgICAgdmFyIGZpZWxkTW9kZWwgPSBmb3JtLmdldEZpZWxkTW9kZWxCeUlkKGZpZWxkSWQpOwogICAgICBmaWVsZE1vZGVsLmNvbnZlcnRTdWJtaXNzaW9uKHZhbHVlcywgY2IpOwogICAgfSk7CiAgfTsKICAvKioKICAgKiBSZXNldCBzdWJtaXNzaW9uCiAgICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dCiAgICovCiAgU3VibWlzc2lvbi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHNlbGYuY2xlYXJMb2NhbFN1Ym1pc3Npb25GaWxlcyhmdW5jdGlvbihlcnIpewogICAgICBzZWxmLnNldCgnZm9ybUZpZWxkcycsIFtdKTsKICAgIH0pOwogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUuaXNEb3dubG9hZFN1Ym1pc3Npb24gPSBmdW5jdGlvbigpewogICAgcmV0dXJuIHRoaXMuZ2V0KCJkb3dubG9hZFN1Ym1pc3Npb24iKSA9PT0gdHJ1ZTsKICB9OwoKICBTdWJtaXNzaW9uLnByb3RvdHlwZS5nZXRTdWJtaXNzaW9uRmlsZSA9IGZ1bmN0aW9uKGZpbGVOYW1lLCBjYil7CiAgICBhcHBGb3JtLnN0b3Jlcy5sb2NhbFN0b3JhZ2UucmVhZEZpbGUoZmlsZU5hbWUsIGNiKTsKICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLmNsZWFyTG9jYWxTdWJtaXNzaW9uRmlsZXMgPSBmdW5jdGlvbihjYikgewogICAgJGZoLmZvcm1zLmxvZy5kKCJJbiBjbGVhckxvY2FsU3VibWlzc2lvbkZpbGVzIik7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgZmlsZXNJblN1Ym1pc3Npb24gPSBzZWxmLmdldCgiZmlsZXNJblN1Ym1pc3Npb24iLCBbXSk7CiAgICAkZmguZm9ybXMubG9nLmQoIkZpbGVzIHRvIGNsZWFyICIsIGZpbGVzSW5TdWJtaXNzaW9uKTsKICAgIHZhciBsb2NhbEZpbGVOYW1lID0gIiI7CgogICAgZm9yICh2YXIgZmlsZU1ldGFPYmplY3QgaW4gZmlsZXNJblN1Ym1pc3Npb24pIHsKICAgICAgJGZoLmZvcm1zLmxvZy5kKCJDbGVhcmluZyBmaWxlICIgKyBmaWxlc0luU3VibWlzc2lvbltmaWxlTWV0YU9iamVjdF0pOwogICAgICBhcHBGb3JtLnN0b3Jlcy5sb2NhbFN0b3JhZ2UucmVtb3ZlRW50cnkoZmlsZXNJblN1Ym1pc3Npb25bZmlsZU1ldGFPYmplY3RdLCBmdW5jdGlvbihlcnIpIHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHJlbW92aW5nIGZpbGVzIGZyb20gIiArIGVycik7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIGNiKCk7CiAgfTsKICBTdWJtaXNzaW9uLnByb3RvdHlwZS5zdGFydElucHV0VHJhbnNhY3Rpb24gPSBmdW5jdGlvbigpIHsKICAgIHRoaXMudHJhbnNhY3Rpb25Nb2RlID0gdHJ1ZTsKICAgIHRoaXMudG1wRmllbGRzID0ge307CiAgfTsKICBTdWJtaXNzaW9uLnByb3RvdHlwZS5lbmRJbnB1dFRyYW5zYWN0aW9uID0gZnVuY3Rpb24oc3VjY2VlZCkgewogICAgdGhpcy50cmFuc2FjdGlvbk1vZGUgPSBmYWxzZTsKICAgIHZhciB0bXBGaWVsZHMgPSB7fTsKICAgIHZhciBmaWVsZElkID0gIiI7CiAgICB2YXIgdmFsSW5kZXggPSAwOwogICAgdmFyIHZhbEFyciA9IFtdOwogICAgdmFyIHZhbCA9ICIiOwogICAgaWYgKHN1Y2NlZWQpIHsKICAgICAgdG1wRmllbGRzID0gdGhpcy50bXBGaWVsZHM7CiAgICAgIGZvciAoZmllbGRJZCBpbiB0bXBGaWVsZHMpIHsKICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5nZXRJbnB1dFZhbHVlT2JqZWN0QnlJZChmaWVsZElkKTsKICAgICAgICB2YWxBcnIgPSB0bXBGaWVsZHNbZmllbGRJZF07CiAgICAgICAgZm9yICh2YWxJbmRleCA9IDA7IHZhbEluZGV4IDwgdmFsQXJyLmxlbmd0aDsgdmFsSW5kZXgrKykgewogICAgICAgICAgdmFsID0gdmFsQXJyW3ZhbEluZGV4XTsKICAgICAgICAgIHRhcmdldC5maWVsZFZhbHVlcy5wdXNoKHZhbCk7CiAgICAgICAgICBpZih0eXBlb2YodmFsLmhhc2hOYW1lKSA9PT0gInN0cmluZyIpewogICAgICAgICAgICB0aGlzLnB1c2hGaWxlKHZhbC5oYXNoTmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMudG1wRmllbGRzID0ge307CiAgICB9IGVsc2UgewogICAgICAvL2NsZWFyIGFueSBmaWxlcyBzZXQgYXMgcGFydCBvZiB0aGUgdHJhbnNhY3Rpb24KICAgICAgdG1wRmllbGRzID0gdGhpcy50bXBGaWVsZHM7CiAgICAgIHRoaXMudG1wRmllbGRzID0ge307CiAgICAgIGZvciAoZmllbGRJZCBpbiB0bXBGaWVsZHMpIHsKICAgICAgICB2YWxBcnIgPSB0bXBGaWVsZHNbZmllbGRJZF07CiAgICAgICAgZm9yICh2YWxJbmRleCA9IDA7IHZhbEluZGV4IDwgdmFsQXJyLmxlbmd0aDsgdmFsSW5kZXgrKykgewogICAgICAgICAgdmFsID0gdmFsQXJyW3ZhbEluZGV4XTsKICAgICAgICAgIGlmKHR5cGVvZih2YWwuaGFzaE5hbWUpID09PSAic3RyaW5nIil7CiAgICAgICAgICAgIC8vVGhpcyBpcyBhIGZpbGUsIG5lZWRzIHRvIGJlIHJlbW92ZWQKICAgICAgICAgICAgYXBwRm9ybS5zdG9yZXMubG9jYWxTdG9yYWdlLnJlbW92ZUVudHJ5KHZhbC5oYXNoTmFtZSwgZnVuY3Rpb24oZXJyKXsKICAgICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHJlbW92aW5nIGZpbGUgZnJvbSB0cmFuc2FjdGlvbiAiLCBlcnIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9OwogIC8qKgogICAqIHJlbW92ZSBhbiBpbnB1dCB2YWx1ZSBmcm9tIHN1Ym1pc3Npb24KICAgKiBAcGFyYW0gIHtbdHlwZV19IGZpZWxkSWQgZmllbGQgaWQKICAgKiBAcGFyYW0gIHtbdHlwZV19IGluZGV4IChvcHRpb25hbCkgdGhlIHBvc2l0aW9uIG9mIHRoZSB2YWx1ZSB3aWxsIGJlIHJlbW92ZWQgaWYgaXQgaXMgcmVwZWF0ZWQgZmllbGQuCiAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgIFtkZXNjcmlwdGlvbl0KICAgKi8KICBTdWJtaXNzaW9uLnByb3RvdHlwZS5yZW1vdmVGaWVsZFZhbHVlID0gZnVuY3Rpb24oZmllbGRJZCwgaW5kZXgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciB0YXJnZXRBcnIgPSBbXTsKICAgIHZhciB2YWxSZW1vdmVkID0ge307CiAgICBpZiAodGhpcy50cmFuc2FjdGlvbk1vZGUpIHsKICAgICAgdGFyZ2V0QXJyID0gdGhpcy50bXBGaWVsZHMuZmllbGRJZDsKICAgIH0gZWxzZSB7CiAgICAgIHRhcmdldEFyciA9IHRoaXMuZ2V0SW5wdXRWYWx1ZU9iamVjdEJ5SWQoZmllbGRJZCkuZmllbGRJZDsKICAgIH0KICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSB7CiAgICAgIHZhbFJlbW92ZWQgPSB0YXJnZXRBcnIuc3BsaWNlKDAsIHRhcmdldEFyci5sZW5ndGgpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKHRhcmdldEFyci5sZW5ndGggPiBpbmRleCkgewogICAgICAgIHZhbFJlbW92ZWQgPSB0YXJnZXRBcnIuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgfQogICAgfQoKICAgIGlmKHR5cGVvZih2YWxSZW1vdmVkLmhhc2hOYW1lKSA9PT0gInN0cmluZyIpewogICAgICBhcHBGb3JtLnN0b3Jlcy5sb2NhbFN0b3JhZ2UucmVtb3ZlRW50cnkodmFsUmVtb3ZlZC5oYXNoTmFtZSwgZnVuY3Rpb24oZXJyKXsKICAgICAgICBpZihlcnIpewogICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciByZW1vdmluZyBmaWxlOiAiLCBlcnIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWxmLnJlbW92ZUZpbGVWYWx1ZSh2YWxSZW1vdmVkLmhhc2hOYW1lKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUuZ2V0SW5wdXRWYWx1ZU9iamVjdEJ5SWQgPSBmdW5jdGlvbihmaWVsZElkKSB7CiAgICB2YXIgZm9ybUZpZWxkcyA9IHRoaXMuZ2V0Rm9ybUZpZWxkcygpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JtRmllbGRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBmb3JtRmllbGQgPSBmb3JtRmllbGRzW2ldOwoKICAgICAgaWYoZm9ybUZpZWxkLmZpZWxkSWQuX2lkKXsKICAgICAgICBpZiAoZm9ybUZpZWxkLmZpZWxkSWQuX2lkID09PSBmaWVsZElkKSB7CiAgICAgICAgICByZXR1cm4gZm9ybUZpZWxkOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoZm9ybUZpZWxkLmZpZWxkSWQgPT09IGZpZWxkSWQpIHsKICAgICAgICAgIHJldHVybiBmb3JtRmllbGQ7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICB2YXIgbmV3RmllbGQgPSB7CiAgICAgICdmaWVsZElkJzogZmllbGRJZCwKICAgICAgJ2ZpZWxkVmFsdWVzJzogW10KICAgIH07CiAgICBmb3JtRmllbGRzLnB1c2gobmV3RmllbGQpOwogICAgcmV0dXJuIG5ld0ZpZWxkOwogIH07CiAgLyoqCiAgICogZ2V0IGZvcm0gbW9kZWwgcmVsYXRlZCB0byB0aGlzIHN1Ym1pc3Npb24uCiAgICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dCiAgICovCiAgU3VibWlzc2lvbi5wcm90b3R5cGUuZ2V0Rm9ybSA9IGZ1bmN0aW9uKGNiKSB7CiAgICB2YXIgRm9ybSA9IGFwcEZvcm0ubW9kZWxzLkZvcm07CiAgICB2YXIgZm9ybUlkID0gdGhpcy5nZXQoJ2Zvcm1JZCcpOwoKICAgIGlmKGZvcm1JZCl7CiAgICAgICRmaC5mb3Jtcy5sb2cuZCgiRm9ybUlkIGZvdW5kIGZvciBnZXRGb3JtOiAiICsgZm9ybUlkKTsKICAgICAgbmV3IEZvcm0oewogICAgICAgICdmb3JtSWQnOiBmb3JtSWQsCiAgICAgICAgJ3Jhd01vZGUnOiB0cnVlCiAgICAgIH0sIGNiKTsKICAgIH0gZWxzZSB7CiAgICAgICRmaC5mb3Jtcy5sb2cuZSgiTm8gZm9ybSBJZCBzcGVjaWZpZWQgZm9yIGdldEZvcm0iKTsKICAgICAgcmV0dXJuIGNiKCJObyBmb3JtIElkIHNwZWNpZmllZCBmb3IgZ2V0Rm9ybSIpOwogICAgfQogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUucmVsb2FkRm9ybSA9IGZ1bmN0aW9uKGNiKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIlN1Ym1pc3Npb24gcmVsb2FkIGZvcm0iKTsKICAgIHZhciBGb3JtID0gYXBwRm9ybS5tb2RlbHMuRm9ybTsKICAgIHZhciBmb3JtSWQgPSB0aGlzLmdldCgnZm9ybUlkJyk7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBuZXcgRm9ybSh7CiAgICAgIGZvcm1JZDogZm9ybUlkLAogICAgICAncmF3TW9kZSc6IHRydWUKICAgIH0sIGZ1bmN0aW9uKGVyciwgZm9ybSkgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgY2IoZXJyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzZWxmLmZvcm0gPSBmb3JtOwogICAgICAgIGlmICghc2VsZi5nZXQoJ2RldmljZUZvcm1UaW1lc3RhbXAnLCBudWxsKSkgewogICAgICAgICAgc2VsZi5zZXQoJ2RldmljZUZvcm1UaW1lc3RhbXAnLCBmb3JtLmdldExhc3RVcGRhdGUoKSk7CiAgICAgICAgfQogICAgICAgIGNiKG51bGwsIGZvcm0pOwogICAgICB9CiAgICB9KTsKICB9OwogIC8qKgogICAqIFJldHJpZXZlIGFsbCBmaWxlIGZpZWxkcyByZWxhdGVkIHZhbHVlCiAgICogSWYgdGhlIHN1Ym1pc3Npb24gaGFzIGJlZW4gZG93bmxvYWRlZCwgdGhlcmUgaXMgbm8gZ3VyYW50ZWUgdGhhdCB0aGUgZm9ybSBpcyAgb24tZGV2aWNlLgogICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXQogICAqLwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLmdldEZpbGVJbnB1dFZhbHVlcyA9IGZ1bmN0aW9uKGNiKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBzZWxmLmdldEZpbGVGaWVsZHNJZChmdW5jdGlvbihlcnIsIGZpbGVGaWVsZElkcyl7CiAgICAgIGlmKGVycil7CiAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgIH0KICAgICAgcmV0dXJuIGNiKG51bGwsIHNlbGYuZ2V0SW5wdXRWYWx1ZUFycmF5KGZpbGVGaWVsZElkcykpOwogICAgfSk7CiAgfTsKCiAgU3VibWlzc2lvbi5wcm90b3R5cGUuZ2V0Rm9ybUZpZWxkcyA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgZm9ybUZpZWxkcyA9IHRoaXMuZ2V0KCJmb3JtRmllbGRzIiwgW10pOwoKICAgIC8vUmVtb3ZpbmcgbnVsbCB2YWx1ZXMKICAgIGZvcih2YXIgZm9ybUZpZWxkSW5kZXggPSAwOyBmb3JtRmllbGRJbmRleCA8IGZvcm1GaWVsZHMubGVuZ3RoOyBmb3JtRmllbGRJbmRleCsrKXsKICAgICAgZm9ybUZpZWxkc1tmb3JtRmllbGRJbmRleF0uZmllbGRWYWx1ZXMgPSBmb3JtRmllbGRzW2Zvcm1GaWVsZEluZGV4XS5maWVsZFZhbHVlcyB8fCBbXTsKICAgICAgZm9ybUZpZWxkc1tmb3JtRmllbGRJbmRleF0uZmllbGRWYWx1ZXMgPSBmb3JtRmllbGRzW2Zvcm1GaWVsZEluZGV4XS5maWVsZFZhbHVlcy5maWx0ZXIoZnVuY3Rpb24oZmllbGRWYWx1ZSl7CiAgICAgICAgcmV0dXJuIGZpZWxkVmFsdWUgIT09IG51bGwgJiYgdHlwZW9mKGZpZWxkVmFsdWUpICE9PSAidW5kZWZpbmVkIjsKICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuIGZvcm1GaWVsZHM7CiAgfTsKCiAgU3VibWlzc2lvbi5wcm90b3R5cGUuZ2V0RmlsZUZpZWxkc0lkID0gZnVuY3Rpb24oY2IpewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIGZvcm1GaWVsZElkcyA9IFtdOwoKICAgIGlmKHNlbGYuaXNEb3dubG9hZFN1Ym1pc3Npb24oKSl7CiAgICAgIC8vRm9yIFN1Ym1pc3Npb24gZG93bmxvYWRzLCB0aGVyZSBuZWVkcyB0byBiZSBhIHNjYW4gdGhyb3VnaCB0aGUgZm9ybUZpZWxkcyBwYXJhbQogICAgICB2YXIgZm9ybUZpZWxkcyA9IHNlbGYuZ2V0Rm9ybUZpZWxkcygpOwoKICAgICAgZm9yKHZhciBmb3JtRmllbGRJbmRleCA9IDA7IGZvcm1GaWVsZEluZGV4IDwgZm9ybUZpZWxkcy5sZW5ndGg7IGZvcm1GaWVsZEluZGV4KyspewogICAgICAgIHZhciBmb3JtRmllbGRFbnRyeSA9IGZvcm1GaWVsZHNbZm9ybUZpZWxkSW5kZXhdLmZpZWxkSWQgfHwge307CiAgICAgICAgaWYoZm9ybUZpZWxkRW50cnkudHlwZSA9PT0gJ2ZpbGUnIHx8IGZvcm1GaWVsZEVudHJ5LnR5cGUgPT09ICdwaG90bycgIHx8IGZvcm1GaWVsZEVudHJ5LnR5cGUgPT09ICdzaWduYXR1cmUnKXsKICAgICAgICAgIGlmKGZvcm1GaWVsZEVudHJ5Ll9pZCl7CiAgICAgICAgICAgIGZvcm1GaWVsZElkcy5wdXNoKGZvcm1GaWVsZEVudHJ5Ll9pZCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBjYihudWxsLCBmb3JtRmllbGRJZHMpOwogICAgfSBlbHNlIHsKICAgICAgc2VsZi5nZXRGb3JtKGZ1bmN0aW9uKGVyciwgZm9ybSl7CiAgICAgICAgaWYoZXJyKXsKICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRXJyb3IgZ2V0dGluZyBmb3JtIGZvciBnZXRGaWxlRmllbGRzSWQiICsgZXJyKTsKICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gY2IoZXJyLCBmb3JtLmdldEZpbGVGaWVsZHNJZCgpKTsKICAgICAgfSk7CiAgICB9CiAgfTsKCiAgU3VibWlzc2lvbi5wcm90b3R5cGUudXBkYXRlRmlsZUxvY2FsVVJJID0gZnVuY3Rpb24oZmlsZURldGFpbHMsIG5ld0xvY2FsRmlsZVVSSSwgY2IpewogICAgJGZoLmZvcm1zLmxvZy5kKCJ1cGRhdGVGaWxlTG9jYWxVUkk6ICIgKyBuZXdMb2NhbEZpbGVVUkkpOwogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgZmlsZURldGFpbHMgPSBmaWxlRGV0YWlscyB8fCB7fTsKCiAgICBpZihmaWxlRGV0YWlscy5maWxlTmFtZSAmJiBuZXdMb2NhbEZpbGVVUkkpewogICAgICAvL1NlYXJjaCBmb3IgdGhlIGZpbGUgcGxhY2Vob2xkZXIgbmFtZS4KICAgICAgc2VsZi5maW5kRmlsZVBsYWNlaG9sZGVyRmllbGRJZChmaWxlRGV0YWlscy5maWxlTmFtZSwgZnVuY3Rpb24oZXJyLCBmaWVsZERldGFpbHMpewogICAgICAgIGlmKGVycil7CiAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICB9CiAgICAgICAgaWYoZmllbGREZXRhaWxzLmZpZWxkSWQpewogICAgICAgICAgdmFyIHRtcE9iaiA9IHNlbGYuZ2V0SW5wdXRWYWx1ZU9iamVjdEJ5SWQoZmllbGREZXRhaWxzLmZpZWxkSWQpLmZpZWxkVmFsdWVzW2ZpZWxkRGV0YWlscy52YWx1ZUluZGV4XTsKICAgICAgICAgIHRtcE9iai5sb2NhbFVSSSA9IG5ld0xvY2FsRmlsZVVSSTsKICAgICAgICAgIHNlbGYuZ2V0SW5wdXRWYWx1ZU9iamVjdEJ5SWQoZmllbGREZXRhaWxzLmZpZWxkSWQpLmZpZWxkVmFsdWVzW2ZpZWxkRGV0YWlscy52YWx1ZUluZGV4XSA9IHRtcE9iajsKICAgICAgICAgIHNlbGYuc2F2ZUxvY2FsKGNiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJObyBmaWxlIGZpZWxkIG1hdGNoZXMgdGhlIHBsYWNlaG9sZGVyIG5hbWUgIiArIGZpbGVEZXRhaWxzLmZpbGVOYW1lKTsKICAgICAgICAgIHJldHVybiBjYigiTm8gZmlsZSBmaWVsZCBtYXRjaGVzIHRoZSBwbGFjZWhvbGRlciBuYW1lICIgKyBmaWxlRGV0YWlscy5maWxlTmFtZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgICRmaC5mb3Jtcy5sb2cuZSgiU3VibWlzc2lvbjogdXBkYXRlRmlsZUxvY2FsVVJJIDogTm8gZmlsZU5hbWUgZm9yIHN1Ym1pc3Npb25JZCA6ICIrIEpTT04uc3RyaW5naWZ5KGZpbGVEZXRhaWxzKSk7CiAgICAgIHJldHVybiBjYigiU3VibWlzc2lvbjogdXBkYXRlRmlsZUxvY2FsVVJJIDogTm8gZmlsZU5hbWUgZm9yIHN1Ym1pc3Npb25JZCA6ICIrIEpTT04uc3RyaW5naWZ5KGZpbGVEZXRhaWxzKSk7CiAgICB9CiAgfTsKCiAgU3VibWlzc2lvbi5wcm90b3R5cGUuZmluZEZpbGVQbGFjZWhvbGRlckZpZWxkSWQgPSBmdW5jdGlvbihmaWxlUGxhY2Vob2xkZXJOYW1lLCBjYil7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgZmllbGREZXRhaWxzID0ge307CiAgICBzZWxmLmdldEZpbGVGaWVsZHNJZChmdW5jdGlvbihlcnIsIGZpZWxkSWRzKXsKICAgICAgZm9yICh2YXIgaSA9IDA7IGk8IGZpZWxkSWRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGZpZWxkSWQgPSBmaWVsZElkc1tpXTsKICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IHNlbGYuZ2V0SW5wdXRWYWx1ZU9iamVjdEJ5SWQoZmllbGRJZCk7CiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpbnB1dFZhbHVlLmZpZWxkVmFsdWVzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICB2YXIgdG1wT2JqID0gaW5wdXRWYWx1ZS5maWVsZFZhbHVlc1tqXTsKICAgICAgICAgIGlmICh0bXBPYmopIHsKICAgICAgICAgICAgaWYodG1wT2JqLmZpbGVOYW1lICE9PSBudWxsICYmIHRtcE9iai5maWxlTmFtZSA9PT0gZmlsZVBsYWNlaG9sZGVyTmFtZSl7CiAgICAgICAgICAgICAgZmllbGREZXRhaWxzLmZpZWxkSWQgPSBmaWVsZElkOwogICAgICAgICAgICAgIGZpZWxkRGV0YWlscy52YWx1ZUluZGV4ID0gajsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gY2IobnVsbCwgZmllbGREZXRhaWxzKTsKICAgIH0pOwogIH07CgogIFN1Ym1pc3Npb24ucHJvdG90eXBlLmdldElucHV0VmFsdWVBcnJheSA9IGZ1bmN0aW9uKGZpZWxkSWRzKSB7CiAgICB2YXIgcnRuID0gW107CiAgICBmb3IgKHZhciBpID0gMDsgaTwgZmllbGRJZHMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyICBmaWVsZElkID0gZmllbGRJZHNbaV07CiAgICAgIHZhciBpbnB1dFZhbHVlID0gdGhpcy5nZXRJbnB1dFZhbHVlT2JqZWN0QnlJZChmaWVsZElkKTsKICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpbnB1dFZhbHVlLmZpZWxkVmFsdWVzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgdmFyIHRtcE9iaiA9IGlucHV0VmFsdWUuZmllbGRWYWx1ZXNbal07CiAgICAgICAgaWYgKHRtcE9iaikgewogICAgICAgICAgdG1wT2JqLmZpZWxkSWQgPSBmaWVsZElkOwogICAgICAgICAgcnRuLnB1c2godG1wT2JqKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBydG47CiAgfTsKICBTdWJtaXNzaW9uLnByb3RvdHlwZS5jbGVhckxvY2FsID0gZnVuY3Rpb24oY2IpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIC8vcmVtb3ZlIGZyb20gdXBsb2FkaW5nIGxpc3QKICAgIGFwcEZvcm0ubW9kZWxzLnVwbG9hZE1hbmFnZXIuY2FuY2VsU3VibWlzc2lvbihzZWxmLCBmdW5jdGlvbihlcnIsIHVwbG9hZFRhc2spIHsKICAgICAgaWYgKGVycikgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZShlcnIpOwogICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICB9CiAgICAgIC8vcmVtb3ZlIGZyb20gc3VibWlzc2lvbiBsaXN0CiAgICAgIGFwcEZvcm0ubW9kZWxzLnN1Ym1pc3Npb25zLnJlbW92ZVN1Ym1pc3Npb24oc2VsZi5nZXRMb2NhbElkKCksIGZ1bmN0aW9uKGVycikgewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZShlcnIpOwogICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgfQogICAgICAgIHNlbGYuY2xlYXJMb2NhbFN1Ym1pc3Npb25GaWxlcyhmdW5jdGlvbigpIHsKICAgICAgICAgIE1vZGVsLnByb3RvdHlwZS5jbGVhckxvY2FsLmNhbGwoc2VsZiwgZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoZXJyKTsKICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYihudWxsLCBudWxsKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pOwogIH07CiAgU3VibWlzc2lvbi5wcm90b3R5cGUuZ2V0UmVtb3RlU3VibWlzc2lvbklkID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoInN1Ym1pc3Npb25JZCIsICIiKTsKICB9OwogIFN1Ym1pc3Npb24ucHJvdG90eXBlLnNldFJlbW90ZVN1Ym1pc3Npb25JZCA9IGZ1bmN0aW9uKHN1Ym1pc3Npb25JZCl7CiAgICBpZihzdWJtaXNzaW9uSWQpewogICAgICB0aGlzLnNldCgic3VibWlzc2lvbklkIiwgc3VibWlzc2lvbklkKTsKICAgIH0KICB9OwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5tb2RlbHMgfHwge30pOwovKioKICogRmllbGQgbW9kZWwgZm9yIGZvcm0KICogQHBhcmFtICB7W3R5cGVdfSBtb2R1bGUgW2Rlc2NyaXB0aW9uXQogKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICBbZGVzY3JpcHRpb25dCiAqLwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICB2YXIgTW9kZWwgPSBhcHBGb3JtLm1vZGVscy5Nb2RlbDsKICBmdW5jdGlvbiBGaWVsZChvcHQsIGZvcm0pIHsKICAgIE1vZGVsLmNhbGwodGhpcywgeyAnX3R5cGUnOiAnZmllbGQnIH0pOwogICAgaWYgKG9wdCkgewogICAgICB0aGlzLmZyb21KU09OKG9wdCk7CiAgICAgIHRoaXMuZ2VuTG9jYWxJZCgpOwogICAgfQogICAgaWYgKGZvcm0pIHsKICAgICAgdGhpcy5mb3JtID0gZm9ybTsKICAgIH0KICB9CiAgYXBwRm9ybS51dGlscy5leHRlbmQoRmllbGQsIE1vZGVsKTsKICBGaWVsZC5wcm90b3R5cGUuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgncmVxdWlyZWQnKTsKICB9OwogIEZpZWxkLnByb3RvdHlwZS5nZXRGaWVsZFZhbGlkYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXRGaWVsZE9wdGlvbnMoKS52YWxpZGF0aW9uIHx8IHt9OwogIH07CiAgRmllbGQucHJvdG90eXBlLmdldEZpZWxkRGVmaW5pdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldEZpZWxkT3B0aW9ucygpLmRlZmluaXRpb24gfHwge307CiAgfTsKICBGaWVsZC5wcm90b3R5cGUuZ2V0TWluUmVwZWF0ID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGRlZiA9IHRoaXMuZ2V0RmllbGREZWZpbml0aW9uKCk7CiAgICByZXR1cm4gZGVmLm1pblJlcGVhdCB8fCAxOwogIH07CiAgRmllbGQucHJvdG90eXBlLmdldE1heFJlcGVhdCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkZWYgPSB0aGlzLmdldEZpZWxkRGVmaW5pdGlvbigpOwogICAgcmV0dXJuIGRlZi5tYXhSZXBlYXQgfHwgMTsKICB9OwogIEZpZWxkLnByb3RvdHlwZS5nZXRGaWVsZE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ2ZpZWxkT3B0aW9ucycsIHsKICAgICAgJ3ZhbGlkYXRpb24nOiB7fSwKICAgICAgJ2RlZmluaXRpb24nOiB7fQogICAgfSk7CiAgfTsKICBGaWVsZC5wcm90b3R5cGUuZ2V0UGhvdG9PcHRpb25zID0gZnVuY3Rpb24oKXsKICAgIHZhciBwaG90b09wdGlvbnMgPSB7CiAgICAgICJ0YXJnZXRXaWR0aCIgOiBudWxsLAogICAgICAidGFyZ2V0SGVpZ2h0IiA6IG51bGwsCiAgICAgICJxdWFsaXR5IiA6IG51bGwsCiAgICAgICJzYXZlVG9QaG90b0FsYnVtIjogbnVsbCwKICAgICAgInBpY3R1cmVTb3VyY2UiOiBudWxsLAogICAgICAiZW5jb2RpbmdUeXBlIjogbnVsbAogICAgfTsKCiAgICB2YXIgZmllbGREZWYgPSB0aGlzLmdldEZpZWxkRGVmaW5pdGlvbigpOwogICAgcGhvdG9PcHRpb25zLnRhcmdldFdpZHRoID0gZmllbGREZWYucGhvdG9XaWR0aDsKICAgIHBob3RvT3B0aW9ucy50YXJnZXRIZWlnaHQgPSBmaWVsZERlZi5waG90b0hlaWdodDsKICAgIHBob3RvT3B0aW9ucy5xdWFsaXR5ID0gZmllbGREZWYucGhvdG9RdWFsaXR5OwogICAgcGhvdG9PcHRpb25zLnNhdmVUb1Bob3RvQWxidW0gPSBmaWVsZERlZi5zYXZlVG9QaG90b0FsYnVtOwogICAgcGhvdG9PcHRpb25zLnBpY3R1cmVTb3VyY2UgPSBmaWVsZERlZi5waG90b1NvdXJjZTsKICAgIHBob3RvT3B0aW9ucy5lbmNvZGluZ1R5cGUgPSBmaWVsZERlZi5waG90b1R5cGU7CgogICAgcmV0dXJuIHBob3RvT3B0aW9uczsKICB9OwogIEZpZWxkLnByb3RvdHlwZS5pc1JlcGVhdGluZyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgncmVwZWF0aW5nJywgZmFsc2UpOwogIH07CiAgLyoqCiAgICAgKiByZXRyaWV2ZSBmaWVsZCB0eXBlLgogICAgICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dCiAgICAgKi8KICBGaWVsZC5wcm90b3R5cGUuZ2V0VHlwZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgndHlwZScsICd0ZXh0Jyk7CiAgfTsKICBGaWVsZC5wcm90b3R5cGUuZ2V0RmllbGRJZCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgnX2lkJywgJycpOwogIH07CiAgRmllbGQucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ25hbWUnLCAndW5rbm93bicpOwogIH07CiAgLyoqCiAgICogRnVuY3Rpb24gdG8gcmV0dXJuIHRoZSBGaWVsZCBDb2RlIHNwZWNpZmllZCBpbiB0aGUgc3R1ZGlvIGlmIGl0IGV4aXN0cwogICAqIG90aGVyd2lzZSByZXR1cm4gbnVsbC4KICAgKi8KICBGaWVsZC5wcm90b3R5cGUuZ2V0Q29kZSA9IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5nZXQoJ2ZpZWxkQ29kZScsIG51bGwpOwogIH07CiAgRmllbGQucHJvdG90eXBlLmdldEhlbHBUZXh0ID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdoZWxwVGV4dCcsICcnKTsKICB9OwoKICAvKioKICAgICAqIHJldHVybiBkZWZhdWx0IHZhbHVlIGZvciBhIGZpZWxkCiAgICAgKgogICovCiAgRmllbGQucHJvdG90eXBlLmdldERlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkZWYgPSB0aGlzLmdldEZpZWxkRGVmaW5pdGlvbigpOwogICAgaWYgKGRlZikgewogICAgICByZXR1cm4gZGVmLmRlZmF1bHRWYWx1ZTsKICAgIH0KICAgIHJldHVybiAiIjsKICB9OwoKICBGaWVsZC5wcm90b3R5cGUuaXNBZG1pbkZpZWxkID0gZnVuY3Rpb24oKXsKICAgIHJldHVybiB0aGlzLmdldCgiYWRtaW5Pbmx5Iik7CiAgfTsKCgogIC8qKgogICAgICogUHJvY2VzcyBhbiBpbnB1dCB2YWx1ZS4gY29udmVydCB0byBzdWJtaXNzaW9uIGZvcm1hdC4gcnVuIGZpZWxkLnZhbGlkYXRlIGJlZm9yZSB0aGlzCiAgICAgKiBAcGFyYW0gIHtbdHlwZV19IHBhcmFtcyB7InZhbHVlIiwgImlzU3RvcmUiOm9wdGlvbmFsfQogICAgICogQHBhcmFtIHtjYn0gY2IoZXJyLHJlcykKICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICAgIHN1Ym1pc3Npb24ganNvbiB1c2VkIGZvciBmaWVsZFZhbHVlcyBmb3IgdGhlIGZpZWxkCiAgICAgKi8KICBGaWVsZC5wcm90b3R5cGUucHJvY2Vzc0lucHV0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2IpIHsKICAgIHZhciB0eXBlID0gdGhpcy5nZXRUeXBlKCk7CiAgICB2YXIgcHJvY2Vzc29yTmFtZSA9ICdwcm9jZXNzXycgKyB0eXBlOwogICAgdmFyIGlucHV0VmFsdWUgPSBwYXJhbXMudmFsdWU7CiAgICBpZiAodHlwZW9mIGlucHV0VmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IGlucHV0VmFsdWUgPT09IG51bGwpIHsKICAgICAgLy9pZiB1c2VyIGlucHV0IGlzIGVtcHR5LCBrZWVwIGdvaW5nLgogICAgICByZXR1cm4gY2IobnVsbCwgaW5wdXRWYWx1ZSk7CiAgICB9CiAgICAvLyB0cnkgdG8gZmluZCBzcGVjaWZpZWQgcHJvY2Vzc29yCiAgICBpZiAodGhpc1twcm9jZXNzb3JOYW1lXSAmJiB0eXBlb2YgdGhpc1twcm9jZXNzb3JOYW1lXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICB0aGlzW3Byb2Nlc3Nvck5hbWVdKHBhcmFtcywgY2IpOwogICAgfSBlbHNlIHsKICAgICAgY2IobnVsbCwgaW5wdXRWYWx1ZSk7CiAgICB9CiAgfTsKICAvKioKICAgICAqIENvbnZlcnQgdGhlIHN1Ym1pc3Npb24gdmFsdWUgYmFjayB0byBpbnB1dCB2YWx1ZS4KICAgICAqIEBwYXJhbSAge1t0eXBlXX0gc3VibWlzc2lvblZhbHVlIFtkZXNjcmlwdGlvbl0KICAgICAqIEBwYXJhbSB7IGZ1bmN0aW9ufSBjYiBjYWxsYmFjawogICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgRmllbGQucHJvdG90eXBlLmNvbnZlcnRTdWJtaXNzaW9uID0gZnVuY3Rpb24gKHN1Ym1pc3Npb25WYWx1ZSwgY2IpIHsKICAgIHZhciB0eXBlID0gdGhpcy5nZXRUeXBlKCk7CiAgICB2YXIgcHJvY2Vzc29yTmFtZSA9ICdjb252ZXJ0XycgKyB0eXBlOwogICAgLy8gdHJ5IHRvIGZpbmQgc3BlY2lmaWVkIHByb2Nlc3NvcgogICAgaWYgKHRoaXNbcHJvY2Vzc29yTmFtZV0gJiYgdHlwZW9mIHRoaXNbcHJvY2Vzc29yTmFtZV0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpc1twcm9jZXNzb3JOYW1lXShzdWJtaXNzaW9uVmFsdWUsIGNiKTsKICAgIH0gZWxzZSB7CiAgICAgIGNiKG51bGwsIHN1Ym1pc3Npb25WYWx1ZSk7CiAgICB9CiAgfTsKICAvKioKICAgICAqIHZhbGlkYXRlIGFuIGlucHV0IHdpdGggdGhpcyBmaWVsZC4KICAgICAqIEBwYXJhbSAge1t0eXBlXX0gaW5wdXRWYWx1ZSBbZGVzY3JpcHRpb25dCiAgICAgKiBAcmV0dXJuIHRydWUgLyBlcnJvciBtZXNzYWdlCiAgICAgKi8KICBGaWVsZC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiAoaW5wdXRWYWx1ZSwgaW5wdXRWYWx1ZUluZGV4LCBjYikgewogICAgaWYodHlwZW9mKGlucHV0VmFsdWVJbmRleCkgPT09ICdmdW5jdGlvbicpewogICAgICBjYiA9aW5wdXRWYWx1ZUluZGV4OwogICAgICBpbnB1dFZhbHVlSW5kZXggPSAwOwogICAgfSAKICAgIHRoaXMuZm9ybS5nZXRSdWxlRW5naW5lKCkudmFsaWRhdGVGaWVsZFZhbHVlKHRoaXMuZ2V0RmllbGRJZCgpLCBpbnB1dFZhbHVlLGlucHV0VmFsdWVJbmRleCwgY2IpOwogIH07CiAgLyoqCiAgICAgKiByZXR1cm4gcnVsZSBhcnJheSBhdHRhY2hlZCB0byB0aGlzIGZpZWxkLgogICAgICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dCiAgICAgKi8KICBGaWVsZC5wcm90b3R5cGUuZ2V0UnVsZXMgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgaWQgPSB0aGlzLmdldEZpZWxkSWQoKTsKICAgIHJldHVybiB0aGlzLmZvcm0uZ2V0UnVsZXNCeUZpZWxkSWQoaWQpOwogIH07CiAgRmllbGQucHJvdG90eXBlLnNldFZpc2libGUgPSBmdW5jdGlvbiAoaXNWaXNpYmxlKSB7CiAgICB0aGlzLnNldCgndmlzaWJsZScsIGlzVmlzaWJsZSk7CiAgICBpZiAoaXNWaXNpYmxlKSB7CiAgICAgIHRoaXMuZW1pdCgndmlzaWJsZScpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5lbWl0KCdoaWRkZW4nKTsKICAgIH0KICB9OwogIG1vZHVsZS5GaWVsZCA9IEZpZWxkOwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5tb2RlbHMgfHwge30pOwoKLyoqCiAqIGV4dGVuc2lvbiBvZiBGaWVsZCBjbGFzcyB0byBzdXBwb3J0IGJhcmNvZGUgZmllbGQKICovCmFwcEZvcm0ubW9kZWxzLkZpZWxkID0gZnVuY3Rpb24gKG1vZHVsZSkgewoKICAvL1Byb2Nlc3NpbmcgYmFyY29kZSB2YWx1ZXMgdG8gdGhlIHN1Ym1pc3Npb24gZm9ybWF0CiAgLy8KICBtb2R1bGUucHJvdG90eXBlLnByb2Nlc3NfYmFyY29kZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNiKSB7CiAgICB2YXIgaW5wdXRWYWx1ZSA9IHBhcmFtcy52YWx1ZSB8fCB7fTsKCiAgICAvKioKICAgICAqIEJhcmNvZGUgdmFsdWU6CiAgICAgKgogICAgICogewogICAgICogICB0ZXh0OiAiPDxWYWx1ZSBvZiB0aGUgc2Nhbm5lZCBiYXJjb2RlPj4iLAogICAgICogICBmb3JtYXQ6ICI8PEZvcm1hdCBvZiB0aGUgc2Nhbm5lZCBiYXJjb2RlPj4iCiAgICAgKiB9CiAgICAgKi8KICAgIGlmKHR5cGVvZihpbnB1dFZhbHVlLnRleHQpID09PSAic3RyaW5nIiAmJiB0eXBlb2YoaW5wdXRWYWx1ZS5mb3JtYXQpID09PSAic3RyaW5nIil7CiAgICAgIHJldHVybiBjYihudWxsLCB7dGV4dDogaW5wdXRWYWx1ZS50ZXh0LCBmb3JtYXQ6IGlucHV0VmFsdWUuZm9ybWF0fSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gY2IoIkludmFsaWQgYmFyY29kZSBwYXJhbWV0ZXJzLiIpOwogICAgfQogIH07CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLm1vZGVscy5GaWVsZCB8fCB7fSk7CgovKioKICogZXh0ZW5zaW9uIG9mIEZpZWxkIGNsYXNzIHRvIHN1cHBvcnQgY2hlY2tib3ggZmllbGQKICovCmFwcEZvcm0ubW9kZWxzLkZpZWxkID0gZnVuY3Rpb24gKG1vZHVsZSkgewogIG1vZHVsZS5wcm90b3R5cGUuZ2V0Q2hlY2tCb3hPcHRpb25zID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGRlZiA9IHRoaXMuZ2V0RmllbGREZWZpbml0aW9uKCk7CiAgICBpZiAoZGVmLm9wdGlvbnMpIHsKICAgICAgcmV0dXJuIGRlZi5vcHRpb25zOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgJ2NoZWNrYm94IGNob2ljZSBkZWZpbml0aW9uIGlzIG5vdCBmb3VuZCBpbiBmaWVsZCBkZWZpbml0aW9uJzsKICAgIH0KICB9OwogIG1vZHVsZS5wcm90b3R5cGUucHJvY2Vzc19jaGVja2JveGVzID0gZnVuY3Rpb24gKHBhcmFtcywgY2IpIHsKICAgIHZhciBpbnB1dFZhbHVlID0gcGFyYW1zLnZhbHVlOwogICAgaWYgKCFpbnB1dFZhbHVlIHx8ICFpbnB1dFZhbHVlLnNlbGVjdGlvbnMgfHwgIShpbnB1dFZhbHVlLnNlbGVjdGlvbnMgaW5zdGFuY2VvZiBBcnJheSkpewogICAgICBjYigndGhlIGlucHV0IHZhbHVlIGZvciBwcm9jZXNzaW5nIGNoZWNrYm94IGZpZWxkIHNob3VsZCBiZSBsaWtlIHtzZWxlY3Rpb25zOiBbdmFsMSx2YWwyXX0nKTsKICAgIH0gZWxzZSB7CiAgICAgIGNiKG51bGwsIGlucHV0VmFsdWUpOwogICAgfQogIH07CiAgbW9kdWxlLnByb3RvdHlwZS5jb252ZXJ0X2NoZWNrYm94ZXMgPSBmdW5jdGlvbiAodmFsdWUsIGNiKSB7CiAgICB2YXIgcnRuID0gW107CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7CiAgICAgIHJ0bi5wdXNoKHZhbHVlW2ldLnNlbGVjdGlvbnMpOwogICAgfQogICAgY2IobnVsbCwgcnRuKTsKICB9OwogIHJldHVybiBtb2R1bGU7Cn0oYXBwRm9ybS5tb2RlbHMuRmllbGQgfHwge30pOwoKLyoqCiAqIGV4dGVuc2lvbiBvZiBGaWVsZCBjbGFzcyB0byBzdXBwb3J0IGZpbGUgZmllbGQKICovCmFwcEZvcm0ubW9kZWxzLkZpZWxkID0gZnVuY3Rpb24gKG1vZHVsZSkgewogIGZ1bmN0aW9uIGNoZWNrRmlsZU9iaihvYmopIHsKICAgIHJldHVybiBvYmouZmlsZU5hbWUgJiYgb2JqLmZpbGVUeXBlICYmIG9iai5oYXNoTmFtZTsKICB9CiAgbW9kdWxlLnByb3RvdHlwZS5wcm9jZXNzX2ZpbGUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYikgewogICAgdmFyIGlucHV0VmFsdWUgPSBwYXJhbXMudmFsdWU7CiAgICB2YXIgaXNTdG9yZSA9IHBhcmFtcy5pc1N0b3JlID09PSB1bmRlZmluZWQgPyB0cnVlIDogcGFyYW1zLmlzU3RvcmU7CiAgICB2YXIgbGFzdE1vZERhdGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgIHZhciBwcmV2aW91c0ZpbGUgPSBwYXJhbXMucHJldmlvdXNGaWxlIHx8IHt9OwogICAgdmFyIGhhc2hOYW1lID0gbnVsbDsKICAgIGlmICh0eXBlb2YgaW5wdXRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgaW5wdXRWYWx1ZSA9PT0gbnVsbCkgewogICAgICByZXR1cm4gY2IoIk5vIGlucHV0IHZhbHVlIHRvIHByb2Nlc3NfZmlsZSIsIG51bGwpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEZpbGVUeXBlKGZpbGVUeXBlLCBmaWxlTmFtZVN0cmluZyl7CiAgICAgIGZpbGVUeXBlID0gZmlsZVR5cGUgfHwgIiI7CiAgICAgIGZpbGVOYW1lU3RyaW5nID0gZmlsZU5hbWVTdHJpbmcgfHwgIiI7CgogICAgICAvL1RoZSB0eXBlIGlmIGZpbGUgaXMgYWxyZWFkeSBrbm93bi4gTm8gbmVlZCB0byBwYXJzZSBpdCBvdXQuCiAgICAgIGlmKGZpbGVUeXBlLmxlbmd0aCA+IDApewogICAgICAgIHJldHVybiBmaWxlVHlwZTsKICAgICAgfQoKICAgICAgLy9DYW1lcmEgZG9lcyBub3Qgc2VudCBmaWxlIHR5cGUuIEhhdmUgdG8gcGFyc2UgaXQgZnJvbSB0aGUgZmlsZSBuYW1lLgogICAgICBpZihmaWxlTmFtZVN0cmluZy5pbmRleE9mKCIucG5nIikgPiAtMSl7CiAgICAgICAgcmV0dXJuICJpbWFnZS9wbmciOwogICAgICB9IGVsc2UgaWYoZmlsZU5hbWVTdHJpbmcuaW5kZXhPZigiLmpwZyIpID4gLTEpewogICAgICAgIHJldHVybiAiaW1hZ2UvanBlZyI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0iOwogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0RmlsZU5hbWUoZmlsZU5hbWVTdHJpbmcsIGZpbGVQYXRoU3RyaW5nKXsKICAgICAgZmlsZU5hbWVTdHJpbmcgPSBmaWxlTmFtZVN0cmluZyB8fCAiIjsKICAgICAgaWYoZmlsZU5hbWVTdHJpbmcubGVuZ3RoID4gMCl7CiAgICAgICAgcmV0dXJuIGZpbGVOYW1lU3RyaW5nOwogICAgICB9IGVsc2UgewogICAgICAgIC8vTmVlZCB0byBleHRyYWN0IHRoZSBuYW1lIGZyb20gdGhlIGZpbGUgcGF0aAogICAgICAgIHZhciBpbmRleE9mTmFtZSA9IGZpbGVQYXRoU3RyaW5nLmxhc3RJbmRleE9mKCIvIik7CiAgICAgICAgaWYoaW5kZXhPZk5hbWUgPiAtMSl7CiAgICAgICAgICByZXR1cm4gZmlsZVBhdGhTdHJpbmcuc2xpY2UoaW5kZXhPZk5hbWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICB2YXIgZmlsZSA9IGlucHV0VmFsdWU7CiAgICBpZiAoaW5wdXRWYWx1ZSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHsKICAgICAgZmlsZSA9IGlucHV0VmFsdWUuZmlsZXNbMF0gfHwge307ICAvLyAxc3QgZmlsZSBvbmx5LCBub3Qgc3VwcG9ydCBtYW55IGZpbGVzIHlldC4KICAgIH0KCiAgICBpZih0eXBlb2YoZmlsZS5sYXN0TW9kaWZpZWREYXRlKSA9PT0gJ3VuZGVmaW5lZCcpewogICAgICBsYXN0TW9kRGF0ZSA9IGFwcEZvcm0udXRpbHMuZ2V0VGltZSgpLmdldFRpbWUoKTsKICAgIH0KCiAgICBpZihmaWxlLmxhc3RNb2RpZmllZERhdGUgaW5zdGFuY2VvZiBEYXRlKXsKICAgICAgbGFzdE1vZERhdGUgPSBmaWxlLmxhc3RNb2RpZmllZERhdGUuZ2V0VGltZSgpOwogICAgfQoKICAgIHZhciBmaWxlTmFtZSA9IGdldEZpbGVOYW1lKGZpbGUubmFtZSB8fCBmaWxlLmZpbGVOYW1lLCBmaWxlLmZ1bGxQYXRoKTsKCiAgICB2YXIgZmlsZVR5cGUgPSBnZXRGaWxlVHlwZShmaWxlLnR5cGUgfHwgZmlsZS5maWxlVHlwZSwgZmlsZU5hbWUpOwoKICAgIC8vUGxhY2Vob2xkZXIgZmlsZXMgZG8gbm90IGhhdmUgYSBmaWxlIHR5cGUuIEl0IGluaGVyaXRzIGZyb20gcHJldmlvdXMgdHlwZXMKICAgIGlmKGZpbGVOYW1lID09PSBudWxsICYmICFwcmV2aW91c0ZpbGUuZmlsZU5hbWUpewogICAgICByZXR1cm4gY2IoIkV4cGVjdGVkIHBpY3R1cmUgdG8gYmUgUE5HIG9yIEpQRUcgYnV0IHdhcyBudWxsIik7CiAgICB9CgogICAgaWYocHJldmlvdXNGaWxlLmhhc2hOYW1lKXsKICAgICAgaWYoZmlsZU5hbWUgPT09IHByZXZpb3VzRmlsZS5oYXNoTmFtZSB8fCBmaWxlLmhhc2hOYW1lID09PSBwcmV2aW91c0ZpbGUuaGFzaE5hbWUpewogICAgICAgIC8vU3VibWl0dGluZyBhbiBleGlzdGluZyBmaWxlIGFscmVhZHkgc2F2ZWQsIG5vIG5lZWQgdG8gc2F2ZS4KICAgICAgICByZXR1cm4gY2IobnVsbCwgcHJldmlvdXNGaWxlKTsKICAgICAgfQogICAgfQoKICAgIHZhciBydG5KU09OID0gewogICAgICAnZmlsZU5hbWUnOiBmaWxlTmFtZSwKICAgICAgJ2ZpbGVTaXplJzogZmlsZS5zaXplLAogICAgICAnZmlsZVR5cGUnOiBmaWxlVHlwZSwKICAgICAgJ2ZpbGVVcGRhdGVUaW1lJzogbGFzdE1vZERhdGUsCiAgICAgICdoYXNoTmFtZSc6ICcnLAogICAgICAnaW1nSGVhZGVyJzogJycsCiAgICAgICdjb250ZW50VHlwZSc6ICdiaW5hcnknCiAgICB9OwoKICAgIC8vVGhlIGZpbGUgdG8gYmUgc3VibWl0dGVkIGlzIG5ldwogICAgcHJldmlvdXNGaWxlID0gcnRuSlNPTjsKCiAgICB2YXIgbmFtZSA9IGZpbGVOYW1lICsgbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMDAwMCk7CiAgICBhcHBGb3JtLnV0aWxzLm1kNShuYW1lLCBmdW5jdGlvbiAoZXJyLCByZXMpIHsKICAgICAgaGFzaE5hbWUgPSByZXM7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICBoYXNoTmFtZSA9IG5hbWU7CiAgICAgIH0KICAgICAgaGFzaE5hbWUgPSAnZmlsZVBsYWNlSG9sZGVyJyArIGhhc2hOYW1lOwoKICAgICAgaWYoZmlsZU5hbWUubGVuZ3RoID09PSAwKXsKICAgICAgICBwcmV2aW91c0ZpbGUuZmlsZU5hbWUgPSBoYXNoTmFtZTsKICAgICAgfQoKICAgICAgcHJldmlvdXNGaWxlLmhhc2hOYW1lID0gaGFzaE5hbWU7CiAgICAgIGlmIChpc1N0b3JlKSB7CiAgICAgICAgYXBwRm9ybS5zdG9yZXMubG9jYWxTdG9yYWdlLnNhdmVGaWxlKGhhc2hOYW1lLCBmaWxlLCBmdW5jdGlvbiAoZXJyLCByZXMpIHsKICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKGVycik7CiAgICAgICAgICAgIGNiKGVycik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjYihudWxsLCBwcmV2aW91c0ZpbGUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGNiKG51bGwsIHByZXZpb3VzRmlsZSk7CiAgICAgIH0KICAgIH0pOwogIH07CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLm1vZGVscy5GaWVsZCB8fCB7fSk7CgovKioKICogZXh0ZW5zaW9uIG9mIEZpZWxkIGNsYXNzIHRvIHN1cHBvcnQgbGF0aXR1ZGUgbG9uZ2l0dWRlIGZpZWxkCiAqLwphcHBGb3JtLm1vZGVscy5GaWVsZCA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICAvKioKICAgICAqIEZvcm1hdDogW3tsYXQ6IG51bWJlciwgbG9uZzogbnVtYmVyfV0KICAgICAqIEBwYXJhbSAge1t0eXBlXX0gaW5wdXRWYWx1ZXMgW2Rlc2NyaXB0aW9uXQogICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgICAgICBbZGVzY3JpcHRpb25dCiAgICAgKi8KICBtb2R1bGUucHJvdG90eXBlLnByb2Nlc3NfbG9jYXRpb24gPSBmdW5jdGlvbiAocGFyYW1zLCBjYikgewogICAgdmFyIGlucHV0VmFsdWUgPSBwYXJhbXMudmFsdWU7CiAgICB2YXIgZGVmID0gdGhpcy5nZXRGaWVsZERlZmluaXRpb24oKTsKICAgIHZhciBvYmo9e307CiAgICBzd2l0Y2ggKGRlZi5sb2NhdGlvblVuaXQpIHsKICAgIGNhc2UgJ2xhdGxvbmcnOgogICAgICBpZiAoIWlucHV0VmFsdWUubGF0IHx8ICFpbnB1dFZhbHVlWyJsb25nIl0pIHsKICAgICAgICBjYigndGhlIGlucHV0IHZhbHVlcyBmb3IgbGF0bG9uZyBmaWVsZCBpcyB7bGF0OiBudW1iZXIsIGxvbmc6IG51bWJlcn0nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBvYmogPSB7CiAgICAgICAgICAgICdsYXQnOiBpbnB1dFZhbHVlLmxhdCwKICAgICAgICAgICAgJ2xvbmcnOiBpbnB1dFZhbHVlWyJsb25nIl0KICAgICAgICAgIH07CiAgICAgICAgY2IobnVsbCwgb2JqKTsKICAgICAgfQogICAgICBicmVhazsKICAgIGNhc2UgJ2Vhc3Rub3J0aCc6CiAgICAgIGlmICghaW5wdXRWYWx1ZS56b25lIHx8ICFpbnB1dFZhbHVlLmVhc3RpbmdzIHx8ICFpbnB1dFZhbHVlLm5vcnRoaW5ncykgewogICAgICAgIGNiKCd0aGUgaW5wdXQgdmFsdWVzIGZvciBub3J0aGVhc3QgZmllbGQgaXMge3pvbmU6IHRleHQsIGVhc3RpbmdzOiB0ZXh0LCBub3J0aGluZ3M6dGV4dH0nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBvYmogPSB7CiAgICAgICAgICAgICd6b25lJzogaW5wdXRWYWx1ZS56b25lLAogICAgICAgICAgICAnZWFzdGluZ3MnOiBpbnB1dFZhbHVlLmVhc3RpbmdzLAogICAgICAgICAgICAnbm9ydGhpbmdzJzogaW5wdXRWYWx1ZS5ub3J0aGluZ3MKICAgICAgICAgIH07CiAgICAgICAgY2IobnVsbCwgb2JqKTsKICAgICAgfQogICAgICBicmVhazsKICAgIGRlZmF1bHQ6CiAgICAgIGNiKCdJbnZhbGlkIHN1YnR5cGUgdHlwZSBvZiBsb2NhdGlvbiBmaWVsZCwgYWxsb3dlZCB0eXBlczogbGF0bG9uZyBhbmQgZWFzdG5vcnRoLCB3YXM6ICcgKyBkZWYubG9jYXRpb25Vbml0KTsKICAgICAgYnJlYWs7CiAgICB9CiAgfTsKICByZXR1cm4gbW9kdWxlOwp9KGFwcEZvcm0ubW9kZWxzLkZpZWxkIHx8IHt9KTsKLyoqCiAqIGV4dGVuc2lvbiBvZiBGaWVsZCBjbGFzcyB0byBzdXBwb3J0IG1hdHJpeCBmaWVsZAogKi8KYXBwRm9ybS5tb2RlbHMuRmllbGQgPSBmdW5jdGlvbiAobW9kdWxlKSB7CiAgbW9kdWxlLnByb3RvdHlwZS5nZXRNYXRyaXhSb3dzID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGRlZiA9IHRoaXMuZ2V0RmllbGREZWZpbml0aW9uKCk7CiAgICBpZiAoZGVmLnJvd3MpIHsKICAgICAgcmV0dXJuIGRlZi5yb3dzOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgJ21hdHJpeCByb3dzIGRlZmluaXRpb24gaXMgbm90IGZvdW5kIGluIGZpZWxkIGRlZmluaXRpb24nOwogICAgfQogIH07CiAgbW9kdWxlLnByb3RvdHlwZS5nZXRNYXRyaXhDb2xzID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGRlZiA9IHRoaXMuZ2V0RmllbGREZWZpbml0aW9uKCk7CiAgICBpZiAoZGVmLmNvbHVtbnMpIHsKICAgICAgcmV0dXJuIGRlZi5jb2x1bW5zOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgJ21hdHJpeCBjb2x1bW5zIGRlZmluaXRpb24gaXMgbm90IGZvdW5kIGluIGZpZWxkIGRlZmluaXRpb24nOwogICAgfQogIH07CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLm1vZGVscy5GaWVsZCB8fCB7fSk7CgoKLyoqCiAqIGV4dGVuc2lvbiBvZiBGaWVsZCBjbGFzcyB0byBzdXBwb3J0IHJhZGlvIGZpZWxkCiAqLwphcHBGb3JtLm1vZGVscy5GaWVsZCA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICBtb2R1bGUucHJvdG90eXBlLmdldFJhZGlvT3B0aW9uID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGRlZiA9IHRoaXMuZ2V0RmllbGREZWZpbml0aW9uKCk7CiAgICBpZiAoZGVmLm9wdGlvbnMpIHsKICAgICAgcmV0dXJuIGRlZi5vcHRpb25zOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgJ1JhZGlvIG9wdGlvbnMgZGVmaW5pdGlvbiBpcyBub3QgZm91bmQgaW4gZmllbGQgZGVmaW5pdGlvbic7CiAgICB9CiAgfTsKICByZXR1cm4gbW9kdWxlOwp9KGFwcEZvcm0ubW9kZWxzLkZpZWxkIHx8IHt9KTsKLyoqCiAqIGV4dGVuc2lvbiBvZiBGaWVsZCBjbGFzcyB0byBzdXBwb3J0IGZpbGUgZmllbGQKICovCmFwcEZvcm0ubW9kZWxzLkZpZWxkID0gZnVuY3Rpb24gKG1vZHVsZSkgewogIGZ1bmN0aW9uIGNoZWNrRmlsZU9iaihvYmopIHsKICAgIHJldHVybiBvYmouZmlsZU5hbWUgJiYgb2JqLmZpbGVUeXBlICYmIG9iai5oYXNoTmFtZTsKICB9CgogIGZ1bmN0aW9uIGltYWdlUHJvY2VzcyhwYXJhbXMsIGNiKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgaW5wdXRWYWx1ZSA9IHBhcmFtcy52YWx1ZTsKICAgIHZhciBpc1N0b3JlID0gcGFyYW1zLmlzU3RvcmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBwYXJhbXMuaXNTdG9yZTsKICAgIHZhciBwcmV2aW91c0ZpbGUgPSBwYXJhbXMucHJldmlvdXNGaWxlIHx8IHt9OwogICAgaWYgKHR5cGVvZihpbnB1dFZhbHVlKSAhPT0gInN0cmluZyIpIHsKICAgICAgcmV0dXJuIGNiKCJFeHBlY3RlZCBiYXNlNjQgc3RyaW5nIGltYWdlIG9yIGZpbGUgVVJJIGJ1dCBwYXJhbWV0ZXIgd2FzIG5vdCBhIHN0cmluZyIsIG51bGwpOwogICAgfQoKICAgIC8vSW5wdXQgdmFsdWUgY2FuIGJlIGVpdGhlciBhIGJhc2U2NCBTdHJpbmcgb3IgZmlsZSB1cmksIHRoZSBiZWhhdmlvdXIgb2YgdXBsb2FkIHdpbGwgY2hhbmdlIGFjY29yZGluZ2x5LgoKICAgIGlmKGlucHV0VmFsdWUubGVuZ3RoIDwgMSl7CiAgICAgIHJldHVybiBjYigiRXhwZWN0ZWQgYmFzZTY0IHN0cmluZyBvciBmaWxlIHVyaSBidXQgZ290IHN0cmluZyBvZiBsZW5naHQgMDogICIgKyBpbnB1dFZhbHVlLCBudWxsKTsKICAgIH0KCiAgICBpZihpbnB1dFZhbHVlLmluZGV4T2YoIjtiYXNlNjQsIikgPiAtMSl7CiAgICAgIHZhciBpbWdOYW1lID0gJyc7CiAgICAgIHZhciBkYXRhQXJyID0gaW5wdXRWYWx1ZS5zcGxpdCgnO2Jhc2U2NCwnKTsKICAgICAgdmFyIGltZ1R5cGUgPSBkYXRhQXJyWzBdLnNwbGl0KCc6JylbMV07CiAgICAgIHZhciBleHRlbnNpb24gPSBpbWdUeXBlLnNwbGl0KCcvJylbMV07CiAgICAgIHZhciBzaXplID0gaW5wdXRWYWx1ZS5sZW5ndGg7CiAgICAgIGdlbkltYWdlTmFtZShmdW5jdGlvbiAoZXJyLCBuKSB7CiAgICAgICAgaW1nTmFtZSA9IHByZXZpb3VzRmlsZS5oYXNoTmFtZSA/IHByZXZpb3VzRmlsZS5oYXNoTmFtZSA6ICdmaWxlUGxhY2VIb2xkZXInICsgbjsKICAgICAgICAvL1RPRE8gQWJzdHJhY3QgdGhpcyBvdXQKICAgICAgICB2YXIgbWV0YSA9IHsKICAgICAgICAgICdmaWxlTmFtZSc6IGltZ05hbWUgKyAnLicgKyBleHRlbnNpb24sCiAgICAgICAgICAnaGFzaE5hbWUnOiBpbWdOYW1lLAogICAgICAgICAgJ2NvbnRlbnRUeXBlJzogJ2Jhc2U2NCcsCiAgICAgICAgICAnZmlsZVNpemUnOiBzaXplLAogICAgICAgICAgJ2ZpbGVUeXBlJzogaW1nVHlwZSwKICAgICAgICAgICdpbWdIZWFkZXInOiAnZGF0YTonICsgaW1nVHlwZSArICc7YmFzZTY0LCcsCiAgICAgICAgICAnZmlsZVVwZGF0ZVRpbWUnOiBuZXcgRGF0ZSgpLmdldFRpbWUoKQogICAgICAgIH07CiAgICAgICAgaWYgKGlzU3RvcmUpIHsKICAgICAgICAgIGFwcEZvcm0uc3RvcmVzLmxvY2FsU3RvcmFnZS51cGRhdGVUZXh0RmlsZShpbWdOYW1lLCBkYXRhQXJyWzFdLCBmdW5jdGlvbiAoZXJyLCByZXMpIHsKICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZShlcnIpOwogICAgICAgICAgICAgIGNiKGVycik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY2IobnVsbCwgbWV0YSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjYihudWxsLCBtZXRhKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgLy9JbWFnZSBpcyBhIGZpbGUgdXJpLCB0aGUgZmlsZSBuZWVkcyB0byBiZSBzYXZlZCBhcyBhIGZpbGUuCiAgICAgIC8vQ2FuIHVzZSB0aGUgcHJvY2Vzc19maWxlIGZ1bmN0aW9uIHRvIGRvIHRoaXMuCiAgICAgIC8vTmVlZCB0byByZWFkIHRoZSBmaWxlIGFzIGEgZmlsZSBmaXJzdAogICAgICBhcHBGb3JtLnV0aWxzLmZpbGVTeXN0ZW0ucmVhZEFzRmlsZShpbnB1dFZhbHVlLCBmdW5jdGlvbihlcnIsIGZpbGUpewogICAgICAgIGlmKGVycil7CiAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICB9CgogICAgICAgIHBhcmFtcy52YWx1ZSA9IGZpbGU7CiAgICAgICAgc2VsZi5wcm9jZXNzX2ZpbGUocGFyYW1zLCBjYik7CiAgICAgIH0pOwogICAgfQogIH0KICBmdW5jdGlvbiBnZW5JbWFnZU5hbWUoY2IpIHsKICAgIHZhciBuYW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyAnJyArIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMDAwKTsKICAgIGFwcEZvcm0udXRpbHMubWQ1KG5hbWUsIGNiKTsKICB9CiAgZnVuY3Rpb24gY29udmVydEltYWdlKHZhbHVlLCBjYikgewogICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgewogICAgICBjYihudWxsLCB2YWx1ZSk7CiAgICB9IGVsc2UgewogICAgICB2YXIgY291bnQgPSB2YWx1ZS5sZW5ndGg7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgbWV0YSA9IHZhbHVlW2ldOwogICAgICAgIF9sb2FkSW1hZ2UobWV0YSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgY291bnQtLTsKICAgICAgICAgIGlmIChjb3VudCA9PT0gMCkgewogICAgICAgICAgICBjYihudWxsLCB2YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9CgogIC8vQW4gaW1hZ2UgY2FuIGJlIGVpdGhlciBhIGJhc2U2NCBpbWFnZSBvciBhIGJpbmFyeSBpbWFnZS4KICAvL0lmIGJhc2U2NCwgbmVlZCB0byBsb2FkIHRoZSBkYXRhIGFzIHRleHQuCiAgLy9JZiBiaW5hcnksIGp1c3QgbmVlZCB0byBsb2FkIHRoZSBmaWxlIHVyaS4KICBmdW5jdGlvbiBfbG9hZEltYWdlKG1ldGEsIGNiKSB7CiAgICBpZiAobWV0YSkgewoKICAgICAgLyoqCiAgICAgICAqIElmIHRoZSBmaWxlIGFscmVhZHkgY29udGFpbnMgYSBsb2NhbCB1cmksIHRoZW4gbm8gbmVlZCB0byBsb2FkIGl0LgogICAgICAgKi8KICAgICAgaWYobWV0YS5sb2NhbFVSSSl7CiAgICAgICAgcmV0dXJuIGNiKG51bGwsIG1ldGEpOwogICAgICB9CgogICAgICB2YXIgbmFtZSA9IG1ldGEuaGFzaE5hbWU7CiAgICAgIGlmKG1ldGEuY29udGVudFR5cGUgPT09ICJiYXNlNjQiKXsKICAgICAgICBhcHBGb3JtLnN0b3Jlcy5sb2NhbFN0b3JhZ2UucmVhZEZpbGVUZXh0KG5hbWUsIGZ1bmN0aW9uIChlcnIsIHRleHQpIHsKICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKGVycik7CiAgICAgICAgICB9CiAgICAgICAgICBtZXRhLmRhdGEgPSB0ZXh0OwogICAgICAgICAgY2IoZXJyLCBtZXRhKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmKG1ldGEuY29udGVudFR5cGUgPT09ICJiaW5hcnkiKXsKICAgICAgICBhcHBGb3JtLnN0b3Jlcy5sb2NhbFN0b3JhZ2UucmVhZEZpbGUobmFtZSwgZnVuY3Rpb24oZXJyLCBmaWxlKXsKICAgICAgICAgIGlmKGVycil7CiAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRXJyb3IgcmVhZGluZyBmaWxlICIgKyBuYW1lLCBlcnIpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmKGZpbGUgJiYgZmlsZS5mdWxsUGF0aCl7CiAgICAgICAgICAgIG1ldGEuZGF0YSA9IGZpbGUuZnVsbFBhdGg7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBtZXRhLmRhdGEgPSAiZmlsZS1ub3QtZm91bmQiOwogICAgICAgICAgfQoKICAgICAgICAgIGNiKGVyciwgbWV0YSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBsb2FkIGltYWdlIHdpdGggaW52YWxpZCBtZXRhIiArIG1ldGEuY29udGVudFR5cGUpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBjYihudWxsLCBtZXRhKTsKICAgIH0KICB9CiAgbW9kdWxlLnByb3RvdHlwZS5wcm9jZXNzX3NpZ25hdHVyZSA9IGltYWdlUHJvY2VzczsKICBtb2R1bGUucHJvdG90eXBlLmNvbnZlcnRfc2lnbmF0dXJlID0gY29udmVydEltYWdlOwogIG1vZHVsZS5wcm90b3R5cGUucHJvY2Vzc19waG90byA9IGltYWdlUHJvY2VzczsKICBtb2R1bGUucHJvdG90eXBlLmNvbnZlcnRfcGhvdG8gPSBjb252ZXJ0SW1hZ2U7CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLm1vZGVscy5GaWVsZCB8fCB7fSk7CgovKioKICogT25lIGZvcm0gY29udGFpbnMgbXVsdGlwbGUgcGFnZXMKICovCmFwcEZvcm0ubW9kZWxzID0gZnVuY3Rpb24gKG1vZHVsZSkgewogIHZhciBNb2RlbCA9IGFwcEZvcm0ubW9kZWxzLk1vZGVsOwogIGZ1bmN0aW9uIFBhZ2Uob3B0LCBwYXJlbnRGb3JtKSB7CiAgICBpZiAodHlwZW9mIG9wdCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHBhcmVudEZvcm0gPT09ICd1bmRlZmluZWQnKSB7CiAgICAgIHRocm93ICdQYWdlIGluaXRpYWxpc2UgZmFpbGVkOiBuZXcgUGFnZShwYWdlRGVmaW5pdGlvbkpTT04sIHBhcmVudEZvcm1Nb2RlbCknOwogICAgfQogICAgTW9kZWwuY2FsbCh0aGlzLCB7ICdfdHlwZSc6ICdwYWdlJyB9KTsKICAgIHRoaXMuZnJvbUpTT04ob3B0KTsKICAgIHRoaXMuZm9ybSA9IHBhcmVudEZvcm07CiAgICB0aGlzLmluaXRpYWxpc2UoKTsKICB9CiAgYXBwRm9ybS51dGlscy5leHRlbmQoUGFnZSwgTW9kZWwpOwogIFBhZ2UucHJvdG90eXBlLmluaXRpYWxpc2UgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZmllbGRzRGVmID0gdGhpcy5nZXRGaWVsZERlZigpOwogICAgdGhpcy5maWVsZHNJZHMgPSBbXTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGRzRGVmLmxlbmd0aDsgaSsrKSB7CiAgICAgIHRoaXMuZmllbGRzSWRzLnB1c2goZmllbGRzRGVmW2ldLl9pZCk7CiAgICB9CiAgfTsKICBQYWdlLnByb3RvdHlwZS5zZXRWaXNpYmxlID0gZnVuY3Rpb24gKGlzVmlzaWJsZSkgewogICAgdGhpcy5zZXQoJ3Zpc2libGUnLCBpc1Zpc2libGUpOwogICAgaWYgKGlzVmlzaWJsZSkgewogICAgICB0aGlzLmVtaXQoJ3Zpc2libGUnKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZW1pdCgnaGlkZGVuJyk7CiAgICB9CiAgfTsKICBQYWdlLnByb3RvdHlwZS5nZXRGaWVsZERlZj1mdW5jdGlvbigpewogICAgcmV0dXJuIHRoaXMuZ2V0KCJmaWVsZHMiLFtdKTsKICB9OwogIFBhZ2UucHJvdG90eXBlLmdldEZpZWxkRGVmPWZ1bmN0aW9uKCl7CiAgICAgIHJldHVybiB0aGlzLmdldCgiZmllbGRzIixbXSk7CiAgfTsKICBQYWdlLnByb3RvdHlwZS5nZXRGaWVsZE1vZGVsTGlzdD1mdW5jdGlvbigpewogICAgICB2YXIgbGlzdD1bXTsKICAgICAgZm9yICh2YXIgaT0wO2k8dGhpcy5maWVsZHNJZHMubGVuZ3RoO2krKyl7CiAgICAgICAgICBsaXN0LnB1c2godGhpcy5mb3JtLmdldEZpZWxkTW9kZWxCeUlkKHRoaXMuZmllbGRzSWRzW2ldKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIGxpc3Q7CiAgfTsKICBQYWdlLnByb3RvdHlwZS5jaGVja0ZvclNlY3Rpb25CcmVha3M9ZnVuY3Rpb24oKXsgLy9DaGVja2luZyBmb3IgYW55IHNlY3Rpb25zCiAgICBmb3IgKHZhciBpPTA7aTx0aGlzLmZpZWxkc0lkcy5sZW5ndGg7aSsrKXsKICAgICAgdmFyIGZpZWxkTW9kZWwgPSB0aGlzLmZvcm0uZ2V0RmllbGRNb2RlbEJ5SWQodGhpcy5maWVsZHNJZHNbaV0pOwogICAgICBpZihmaWVsZE1vZGVsICYmIGZpZWxkTW9kZWwuZ2V0VHlwZSgpID09PSAic2VjdGlvbkJyZWFrIil7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9OwogIFBhZ2UucHJvdG90eXBlLmdldFNlY3Rpb25zPWZ1bmN0aW9uKCl7IC8vQ2hlY2tpbmcgZm9yIGFueSBzZWN0aW9ucwogICAgdmFyIHNlY3Rpb25MaXN0PXt9OwogICAgdmFyIGN1cnJlbnRTZWN0aW9uID0gbnVsbDsKICAgIHZhciBzZWN0aW9uQnJlYWtzRXhpc3QgPSB0aGlzLmNoZWNrRm9yU2VjdGlvbkJyZWFrcygpOwogICAgdmFyIGluc2VydFNlY3Rpb25CcmVhayA9IGZhbHNlOwoKICAgIGlmKHNlY3Rpb25CcmVha3NFeGlzdCl7CiAgICAgIC8vSWYgdGhlcmUgYXJlIHNlY3Rpb24gYnJlYWtzLCB0aGUgZmlyc3QgZmllbGQgaW4gdGhlIGZvcm0gbXVzdCBiZSBhIHNlY3Rpb24gYnJlYWsuIElmIG5vdCwgYWRkIGEgcGxhY2Vob2xkZXIKICAgICAgdmFyIGZpcnN0RmllbGQgPSB0aGlzLmZvcm0uZ2V0RmllbGRNb2RlbEJ5SWQodGhpcy5maWVsZHNJZHNbMF0pOwoKICAgICAgaWYoZmlyc3RGaWVsZC5nZXRUeXBlKCkgIT09ICJzZWN0aW9uQnJlYWsiKXsKICAgICAgICBpbnNlcnRTZWN0aW9uQnJlYWsgPSB0cnVlOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICBmb3IgKHZhciBpPTA7aTx0aGlzLmZpZWxkc0lkcy5sZW5ndGg7aSsrKXsKICAgICAgdmFyIGZpZWxkTW9kZWwgPSB0aGlzLmZvcm0uZ2V0RmllbGRNb2RlbEJ5SWQodGhpcy5maWVsZHNJZHNbaV0pOwoKICAgICAgaWYoaW5zZXJ0U2VjdGlvbkJyZWFrICYmIGkgPT09IDApeyAvL0FkZGluZyBhIGZpcnN0IHNlY3Rpb24uCiAgICAgICAgY3VycmVudFNlY3Rpb24gPSAic2VjdGlvbkJyZWFrIiArIGk7CiAgICAgICAgc2VjdGlvbkxpc3RbY3VycmVudFNlY3Rpb25dID0gc2VjdGlvbkxpc3RbY3VycmVudFNlY3Rpb25dID8gc2VjdGlvbkxpc3RbY3VycmVudFNlY3Rpb25dIDoge2ZpZWxkczogW119OwogICAgICAgIHNlY3Rpb25MaXN0W2N1cnJlbnRTZWN0aW9uXS50aXRsZSA9ICJTZWN0aW9uICIgKyAoaSsxKTsKICAgICAgfQoKICAgICAgaWYoY3VycmVudFNlY3Rpb24gIT09IG51bGwgJiYgZmllbGRNb2RlbC5nZXRUeXBlKCkgIT09ICJzZWN0aW9uQnJlYWsiKXsKICAgICAgICBzZWN0aW9uTGlzdFtjdXJyZW50U2VjdGlvbl0uZmllbGRzLnB1c2goZmllbGRNb2RlbCk7CiAgICAgIH0KCiAgICAgIGlmKGZpZWxkTW9kZWwuZ2V0VHlwZSgpID09PSAic2VjdGlvbkJyZWFrIil7CiAgICAgICAgY3VycmVudFNlY3Rpb24gPSAic2VjdGlvbkJyZWFrIiArIGk7CiAgICAgICAgc2VjdGlvbkxpc3RbY3VycmVudFNlY3Rpb25dID0gc2VjdGlvbkxpc3RbY3VycmVudFNlY3Rpb25dID8gc2VjdGlvbkxpc3RbY3VycmVudFNlY3Rpb25dIDoge2ZpZWxkczogW119OwogICAgICAgIHNlY3Rpb25MaXN0W2N1cnJlbnRTZWN0aW9uXS50aXRsZSA9IGZpZWxkTW9kZWwuZ2V0KCduYW1lJywgIlNlY3Rpb24gIiArIChpKzEpKTsKICAgICAgICBzZWN0aW9uTGlzdFtjdXJyZW50U2VjdGlvbl0uZmllbGRzLnB1c2goZmllbGRNb2RlbCk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gc2VjdGlvbkxpc3Q7CiAgfTsKICBQYWdlLnByb3RvdHlwZS5nZXRGaWVsZE1vZGVsQnlJZD1mdW5jdGlvbihmaWVsZElkKXsKICAgIHJldHVybiB0aGlzLmZvcm0uZ2V0RmllbGRNb2RlbEJ5SWQoZmllbGRJZCk7CiAgfTsKICBQYWdlLnByb3RvdHlwZS5nZXRQYWdlSWQ9ZnVuY3Rpb24oKXsKICAgIHJldHVybiB0aGlzLmdldCgiX2lkIiwiIik7CiAgfTsKICBQYWdlLnByb3RvdHlwZS5nZXROYW1lID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCduYW1lJywgJycpOwogIH07CiAgUGFnZS5wcm90b3R5cGUuZ2V0RGVzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ2Rlc2NyaXB0aW9uJywgJycpOwogIH07CiAgUGFnZS5wcm90b3R5cGUuZ2V0RmllbGREZWYgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ2ZpZWxkcycsIFtdKTsKICB9OwogIFBhZ2UucHJvdG90eXBlLmdldEZpZWxkTW9kZWxMaXN0ID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGxpc3QgPSBbXTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWVsZHNJZHMubGVuZ3RoOyBpKyspIHsKICAgICAgbGlzdC5wdXNoKHRoaXMuZm9ybS5nZXRGaWVsZE1vZGVsQnlJZCh0aGlzLmZpZWxkc0lkc1tpXSkpOwogICAgfQoKICAgIHJldHVybiBsaXN0OwogIH07CgogICAgbW9kdWxlLlBhZ2U9UGFnZTsKCiAgICByZXR1cm4gbW9kdWxlOwp9KGFwcEZvcm0ubW9kZWxzIHx8IHt9KTsKCi8qKgogKiBNYW5hZ2VzIHN1Ym1pc3Npb24gdXBsb2FkaW5nIHRhc2tzCiAqLwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICB2YXIgTW9kZWwgPSBhcHBGb3JtLm1vZGVscy5Nb2RlbDsKICBmdW5jdGlvbiBVcGxvYWRNYW5hZ2VyKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgTW9kZWwuY2FsbChzZWxmLCB7CiAgICAgICdfdHlwZSc6ICd1cGxvYWRNYW5hZ2VyJywKICAgICAgJ19sdWRpZCc6ICd1cGxvYWRNYW5hZ2VyX3F1ZXVlJwogICAgfSk7CgogICAgc2VsZi5zZXQoJ3Rhc2tRdWV1ZScsIFtdKTsKICAgIHNlbGYuc2VuZGluZyA9IGZhbHNlOwogICAgc2VsZi50aW1lckludGVydmFsID0gMjAwOwogICAgc2VsZi5zZW5kaW5nU3RhcnQgPSBhcHBGb3JtLnV0aWxzLmdldFRpbWUoKTsKICB9CiAgYXBwRm9ybS51dGlscy5leHRlbmQoVXBsb2FkTWFuYWdlciwgTW9kZWwpOwoKICAvKioKICAgICAqIFF1ZXVlIGEgc3VibWlzc2lvbiB0byB1cGxvYWRpbmcgdGFza3MgcXVldWUKICAgICAqIEBwYXJhbSAge1t0eXBlXX0gc3VibWlzc2lvbk1vZGVsIFtkZXNjcmlwdGlvbl0KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIGNhbGxiYWNrIG9uY2UgZmluaXNoZWQKICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl0KICAgICAqLwogIFVwbG9hZE1hbmFnZXIucHJvdG90eXBlLnF1ZXVlU3VibWlzc2lvbiA9IGZ1bmN0aW9uIChzdWJtaXNzaW9uTW9kZWwsIGNiKSB7CiAgICAkZmguZm9ybXMubG9nLmQoIlF1ZXVlaW5nIFN1Ym1pc3Npb24gZm9yIHVwbG9hZE1hbmFnZXIiKTsKICAgIHZhciB1dElkOwogICAgdmFyIHVwbG9hZFRhc2sgPSBudWxsOwogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIHNlbGYuY2hlY2tPbmxpbmVTdGF0dXMoZnVuY3Rpb24oKXsKICAgICAgaWYoJGZoLmZvcm1zLmNvbmZpZy5pc09ubGluZSgpKXsKICAgICAgICBpZiAoc3VibWlzc2lvbk1vZGVsLmdldFVwbG9hZFRhc2tJZCgpKSB7CiAgICAgICAgICB1dElkID0gc3VibWlzc2lvbk1vZGVsLmdldFVwbG9hZFRhc2tJZCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB1cGxvYWRUYXNrID0gYXBwRm9ybS5tb2RlbHMudXBsb2FkVGFzay5uZXdJbnN0YW5jZShzdWJtaXNzaW9uTW9kZWwpOwogICAgICAgICAgdXRJZCA9IHVwbG9hZFRhc2suZ2V0TG9jYWxJZCgpOwogICAgICAgIH0KICAgICAgICBzZWxmLnB1c2godXRJZCk7CiAgICAgICAgaWYgKCFzZWxmLnRpbWVyKSB7CiAgICAgICAgICAkZmguZm9ybXMubG9nLmQoIlN0YXJ0aW5nIHRpbWVyIGZvciB1cGxvYWRNYW5hZ2VyIik7CiAgICAgICAgICBzZWxmLnN0YXJ0KCk7CiAgICAgICAgfQogICAgICAgIGlmICh1cGxvYWRUYXNrKSB7CiAgICAgICAgICB1cGxvYWRUYXNrLnNhdmVMb2NhbChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoZXJyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzZWxmLnNhdmVMb2NhbChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBzYXZpbmcgdXBsb2FkIG1hbmFnZXI6ICIgKyBlcnIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjYihudWxsLCB1cGxvYWRUYXNrKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2VsZi5zYXZlTG9jYWwoZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBzYXZpbmcgdXBsb2FkIG1hbmFnZXI6ICIgKyBlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNlbGYuZ2V0VGFza0J5SWQodXRJZCwgY2IpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBjYigiV29ya2luZyBvZmZsaW5lIGNhbm5vdCBzdWJtaXQgZm9ybS4iKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgLyoqCiAgICAgKiBjYW5jZWwgYSBzdWJtaXNzaW9uIHVwbG9hZGluZwogICAgICogQHBhcmFtICB7W3R5cGVdfSAgIHN1Ym1pc3Npb25zTW9kZWwgW2Rlc2NyaXB0aW9uXQogICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgVXBsb2FkTWFuYWdlci5wcm90b3R5cGUuY2FuY2VsU3VibWlzc2lvbiA9IGZ1bmN0aW9uIChzdWJtaXNzaW9uc01vZGVsLCBjYikgewogICAgdmFyIHVwbG9hZFRJZCA9IHN1Ym1pc3Npb25zTW9kZWwuZ2V0VXBsb2FkVGFza0lkKCk7CiAgICB2YXIgcXVldWUgPSB0aGlzLmdldCgndGFza1F1ZXVlJyk7CiAgICBpZiAodXBsb2FkVElkKSB7CiAgICAgIHZhciBpbmRleCA9IHF1ZXVlLmluZGV4T2YodXBsb2FkVElkKTsKICAgICAgaWYgKGluZGV4ID4gLTEpIHsKICAgICAgICBxdWV1ZS5zcGxpY2UoaW5kZXgsIDEpOwogICAgICB9CiAgICAgIHRoaXMuZ2V0VGFza0J5SWQodXBsb2FkVElkLCBmdW5jdGlvbiAoZXJyLCB0YXNrKSB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKGVycik7CiAgICAgICAgICBjYihlcnIsIHRhc2spOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAodGFzaykgewogICAgICAgICAgICB0YXNrLmNsZWFyTG9jYWwoY2IpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2IobnVsbCwgbnVsbCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdGhpcy5zYXZlTG9jYWwoZnVuY3Rpb24gKGVycikgewogICAgICAgIGlmIChlcnIpewogICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKGVycik7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGNiKG51bGwsIG51bGwpOwogICAgfQogIH07CgogIFVwbG9hZE1hbmFnZXIucHJvdG90eXBlLmdldFRhc2tRdWV1ZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgndGFza1F1ZXVlJywgW10pOwogIH07CiAgLyoqCiAgICAgKiBzdGFydCBhIHRpbWVyCiAgICAgKiBAcGFyYW0gIHt9IGludGVydmFsIG1zCiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgVXBsb2FkTWFuYWdlci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICB0aGF0LnN0b3AoKTsKICAgIHRoYXQudGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgIHRoYXQudGljaygpOwogICAgfSwgdGhpcy50aW1lckludGVydmFsKTsKICB9OwogIC8qKgogICAgICogc3RvcCB1cGxvYWRpbmcKICAgICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXQogICAgICovCiAgVXBsb2FkTWFuYWdlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHsKICAgIGlmICh0aGlzLnRpbWVyKSB7CiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7CiAgICAgIHRoaXMudGltZXIgPSBudWxsOwogICAgfQogIH07CiAgVXBsb2FkTWFuYWdlci5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICh1cGxvYWRUYXNrSWQpIHsKICAgIHRoaXMuZ2V0KCd0YXNrUXVldWUnKS5wdXNoKHVwbG9hZFRhc2tJZCk7CiAgICB0aGlzLnNhdmVMb2NhbChmdW5jdGlvbiAoZXJyKSB7CiAgICAgIGlmIChlcnIpewogICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRXJyb3Igc2F2aW5nIGxvY2FsIFVwbG9hZCBtYW5hZ2VyIiwgZXJyKTsKICAgICAgfQogICAgfSk7CiAgfTsKICBVcGxvYWRNYW5hZ2VyLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzaGlmdGVkVGFzayA9IHRoaXMuZ2V0KCd0YXNrUXVldWUnKS5zaGlmdCgpOwogICAgdGhpcy5zYXZlTG9jYWwoZnVuY3Rpb24gKGVycikgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5lKGVycik7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHNoaWZ0ZWRUYXNrOwogIH07CiAgVXBsb2FkTWFuYWdlci5wcm90b3R5cGUucm9sbFRhc2sgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnB1c2godGhpcy5zaGlmdCgpKTsKICB9OwogIFVwbG9hZE1hbmFnZXIucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBpZiAoc2VsZi5zZW5kaW5nKSB7CiAgICAgIHZhciBub3cgPSBhcHBGb3JtLnV0aWxzLmdldFRpbWUoKTsKICAgICAgdmFyIHRpbWVQYXNzZWQgPSBub3cuZ2V0VGltZSgpIC0gc2VsZi5zZW5kaW5nU3RhcnQuZ2V0VGltZSgpOwogICAgICBpZiAodGltZVBhc3NlZCA+ICRmaC5mb3Jtcy5jb25maWcuZ2V0KCJ0aW1lb3V0IikgKiAxMDAwKSB7CiAgICAgICAgLy90aW1lIGV4cGlyZWQuIHJvbGwgY3VycmVudCB0YXNrIHRvIHRoZSBlbmQgb2YgcXVldWUKICAgICAgICAkZmguZm9ybXMubG9nLmUoJ1VwbG9hZGluZyBjb250ZW50IHRpbWVvdXQuIGl0IHdpbGwgdHJ5IHRvIHJldXBsb2FkLicpOwogICAgICAgIHNlbGYuc2VuZGluZyA9IGZhbHNlOwogICAgICAgIHNlbGYucm9sbFRhc2soKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaWYgKHNlbGYuaGFzVGFzaygpKSB7CiAgICAgICAgc2VsZi5zZW5kaW5nID0gdHJ1ZTsKICAgICAgICBzZWxmLnNlbmRpbmdTdGFydCA9IGFwcEZvcm0udXRpbHMuZ2V0VGltZSgpOwoKICAgICAgICBzZWxmLmdldEN1cnJlbnRUYXNrKGZ1bmN0aW9uIChlcnIsIHRhc2spIHsKICAgICAgICAgIGlmIChlcnIgfHwgIXRhc2spIHsKICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKGVycik7CiAgICAgICAgICAgIHNlbGYuc2VuZGluZyA9IGZhbHNlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHRhc2suaXNDb21wbGV0ZWQoKSB8fCB0YXNrLmlzRXJyb3IoKSkgewogICAgICAgICAgICAgIC8vY3VycmVudCB0YXNrIHVwbG9hZGVkIG9yIGFib3J0ZWQgYnkgZXJyb3IuIHNoaWZ0IGl0IGZyb20gcXVldWUKICAgICAgICAgICAgICBzZWxmLnNoaWZ0KCk7CiAgICAgICAgICAgICAgc2VsZi5zZW5kaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgc2VsZi5zYXZlTG9jYWwoZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgaWYoZXJyKXsKICAgICAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBzYXZpbmcgdXBsb2FkIG1hbmFnZXI6ICIsIGVycik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc2VsZi5jaGVja09ubGluZVN0YXR1cyhmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYoJGZoLmZvcm1zLmNvbmZpZy5pc09ubGluZSgpKXsKICAgICAgICAgICAgICAgICAgdGFzay51cGxvYWRUaWNrKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICBpZihlcnIpewogICAgICAgICAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBvbiB1cGxvYWQgdGljazogIiwgZXJyLCB0YXNrKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vY2FsbGJhY2sgd2hlbiBmaW5pc2hlZC4gcmVhZHkgZm9yIG5leHQgdXBsb2FkIGNvbW1hbmQKICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbmRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAkZmguZm9ybXMubG9nLmQoIlVwbG9hZCBNYW5hZ2VyOiBUaWNrOiBOb3Qgb25saW5lLiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy9ubyB0YXNrIC4gc3RvcCB0aW1lci4KICAgICAgICBzZWxmLnN0b3AoKTsKICAgICAgfQogICAgfQogIH07CiAgVXBsb2FkTWFuYWdlci5wcm90b3R5cGUuaGFzVGFzayA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgndGFza1F1ZXVlJykubGVuZ3RoID4gMDsKICB9OwogIFVwbG9hZE1hbmFnZXIucHJvdG90eXBlLmdldEN1cnJlbnRUYXNrID0gZnVuY3Rpb24gKGNiKSB7CiAgICB2YXIgdGFza0lkID0gdGhpcy5nZXRUYXNrUXVldWUoKVswXTsKICAgIGlmICh0YXNrSWQpIHsKICAgICAgdGhpcy5nZXRUYXNrQnlJZCh0YXNrSWQsIGNiKTsKICAgIH0gZWxzZSB7CiAgICAgIGNiKG51bGwsIG51bGwpOwogICAgfQogIH07CiAgVXBsb2FkTWFuYWdlci5wcm90b3R5cGUuY2hlY2tPbmxpbmVTdGF0dXMgPSBmdW5jdGlvbiAoY2IpIHsKICAgIGFwcEZvcm0uc3RvcmVzLmRhdGFBZ2VudC5jaGVja09ubGluZVN0YXR1cyhjYik7CiAgfTsKICBVcGxvYWRNYW5hZ2VyLnByb3RvdHlwZS5nZXRUYXNrQnlJZCA9IGZ1bmN0aW9uICh0YXNrSWQsIGNiKSB7CiAgICBhcHBGb3JtLm1vZGVscy51cGxvYWRUYXNrLmZyb21Mb2NhbCh0YXNrSWQsIGNiKTsKICB9OwogIG1vZHVsZS51cGxvYWRNYW5hZ2VyID0gbmV3IFVwbG9hZE1hbmFnZXIoKTsKICByZXR1cm4gbW9kdWxlOwp9KGFwcEZvcm0ubW9kZWxzIHx8IHt9KTsKYXBwRm9ybS5tb2RlbHMgPSBmdW5jdGlvbiAobW9kdWxlKSB7CiAgdmFyIE1vZGVsID0gYXBwRm9ybS5tb2RlbHMuTW9kZWw7CiAgLyoqCiAgICAgKiBEZXNjcmliZSBydWxlcyBhc3NvY2lhdGVkIHRvIG9uZSBmaWVsZC4KICAgICAqIEBwYXJhbSB7W3R5cGVdfSBwYXJhbSB7InR5cGUiOiJwYWdlIHwgZmllbGQiLCAiZGVmaW5pdGlvbiI6ZGVmSnNvbn0KICAgICAqLwogIGZ1bmN0aW9uIFJ1bGUocGFyYW0pIHsKICAgIE1vZGVsLmNhbGwodGhpcywgeyAnX3R5cGUnOiAncnVsZScgfSk7CiAgICB0aGlzLmZyb21KU09OKHBhcmFtKTsKICB9CiAgYXBwRm9ybS51dGlscy5leHRlbmQoUnVsZSwgTW9kZWwpOwogIC8qKgogICAgICogUmV0dXJuIHNvdXJjZSBmaWVsZHMgaWQgcmVxdWlyZWQgZnJvbSBpbnB1dCB2YWx1ZSBmb3IgdGhpcyBydWxlCiAgICAgKiBAcmV0dXJuIFtmaWVsZGlkMSwgZmllbGRpZDIuLi5dIFtkZXNjcmlwdGlvbl0KICAgICAqLwogIFJ1bGUucHJvdG90eXBlLmdldFJlbGF0ZWRGaWVsZElkID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGRlZiA9IHRoaXMuZ2V0RGVmaW5pdGlvbigpOwogICAgdmFyIHN0YXRlbWVudHMgPSBkZWYucnVsZUNvbmRpdGlvbmFsU3RhdGVtZW50czsKICAgIHZhciBydG4gPSBbXTsKICAgIGZvciAodmFyIGkgPSAwOyBpPHN0YXRlbWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHN0YXRlbWVudCA9IHN0YXRlbWVudHNbaV07CiAgICAgIHJ0bi5wdXNoKHN0YXRlbWVudC5zb3VyY2VGaWVsZCk7CiAgICB9CiAgICByZXR1cm4gcnRuOwogIH07CiAgLyoqCiAgICAgKiB0ZXN0IGlmIGlucHV0IHZhbHVlIG1lZXQgdGhlIGNvbmRpdGlvbgogICAgICogQHBhcmFtICB7W3R5cGVdfSBwYXJhbSB7ZmllbGRJZDp2YWx1ZSwgZmllbGRJZDI6dmFsdWUyfQogICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICB0cnVlIC0gbWVldCBydWxlICAvIGZhbHNlIC0gIG5vdCBtZWV0IHJ1bGUKICAgICAqLwogIFJ1bGUucHJvdG90eXBlLnRlc3QgPSBmdW5jdGlvbiAocGFyYW0pIHsKICAgIHZhciBmaWVsZHMgPSB0aGlzLmdldFJlbGF0ZWRGaWVsZElkKCk7CiAgICB2YXIgbG9naWMgPSB0aGlzLmdldExvZ2ljKCk7CiAgICB2YXIgcmVzID0gbG9naWMgPT09ICdvcicgPyBmYWxzZSA6IHRydWU7CiAgICBmb3IgKHZhciBpID0gMDsgaTwgZmllbGRzLmxlbmd0aCA7IGkrKykgewogICAgICB2YXIgZmllbGRJZCA9IGZpZWxkc1tpXTsKICAgICAgdmFyIHZhbCA9IHBhcmFtW2ZpZWxkSWRdOwogICAgICBpZiAodmFsKSB7CiAgICAgICAgdmFyIHRtcFJlcyA9IHRoaXMudGVzdEZpZWxkKGZpZWxkSWQsIHZhbCk7CiAgICAgICAgaWYgKGxvZ2ljID09PSAnb3InKSB7CiAgICAgICAgICByZXMgPSByZXMgfHwgdG1wUmVzOwogICAgICAgICAgaWYgKHJlcyA9PT0gdHJ1ZSkgewogICAgICAgICAgICAvL2JyZWFrIGRpcmVjdGx5CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXMgPSByZXMgJiYgdG1wUmVzOwogICAgICAgICAgaWYgKHJlcyA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgLy9icmVhayBkaXJlY3RseQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGlmIChsb2dpYyA9PT0gJ29yJykgewogICAgICAgICAgcmVzID0gcmVzIHx8IGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzOwogIH07CiAgLyoqCiAgICAgKiB0ZXN0IGEgZmllbGQgaWYgdGhlIHZhbHVlIG1lZXRzIGl0cyBjb25kaXRvbgogICAgICogQHBhcmFtICB7W3R5cGVdfSBmaWVsZElkIFtkZXNjcmlwdGlvbl0KICAgICAqIEBwYXJhbSAge1t0eXBlXX0gdmFsICAgICBbZGVzY3JpcHRpb25dCiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgUnVsZS5wcm90b3R5cGUudGVzdEZpZWxkID0gZnVuY3Rpb24gKGZpZWxkSWQsIHZhbCkgewogICAgdmFyIHN0YXRlbWVudCA9IHRoaXMuZ2V0UnVsZUNvbmRpdGlvblN0YXRlbWVudChmaWVsZElkKTsKICAgIHZhciBjb25kaXRpb24gPSBzdGF0ZW1lbnQucmVzdHJpY3Rpb247CiAgICB2YXIgZXhwZWN0VmFsID0gc3RhdGVtZW50LnNvdXJjZVZhbHVlOwogICAgcmV0dXJuIGFwcEZvcm0ubW9kZWxzLmNoZWNrUnVsZShjb25kaXRpb24sIGV4cGVjdFZhbCwgdmFsKTsKICB9OwogIFJ1bGUucHJvdG90eXBlLmdldFJ1bGVDb25kaXRpb25TdGF0ZW1lbnQgPSBmdW5jdGlvbiAoZmllbGRJZCkgewogICAgdmFyIHN0YXRlbWVudHMgPSB0aGlzLmdldERlZmluaXRpb24oKS5ydWxlQ29uZGl0aW9uYWxTdGF0ZW1lbnRzOwogICAgZm9yICh2YXIgaSA9IDA7IGk8c3RhdGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgc3RhdGVtZW50ID0gc3RhdGVtZW50c1tpXTsKICAgICAgaWYgKHN0YXRlbWVudC5zb3VyY2VGaWVsZCA9PT0gZmllbGRJZCkgewogICAgICAgIHJldHVybiBzdGF0ZW1lbnQ7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwogIH07CiAgUnVsZS5wcm90b3R5cGUuZ2V0TG9naWMgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZGVmID0gdGhpcy5nZXREZWZpbml0aW9uKCk7CiAgICByZXR1cm4gZGVmLnJ1bGVDb25kaXRpb25hbE9wZXJhdG9yLnRvTG93ZXJDYXNlKCk7CiAgfTsKICBSdWxlLnByb3RvdHlwZS5nZXREZWZpbml0aW9uID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdkZWZpbml0aW9uJyk7CiAgfTsKICBSdWxlLnByb3RvdHlwZS5nZXRBY3Rpb24gPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZGVmID0gdGhpcy5nZXREZWZpbml0aW9uKCk7CiAgICB2YXIgdGFyZ2V0ID0gewogICAgICAgICdhY3Rpb24nOiBkZWYudHlwZSwKICAgICAgICAndGFyZ2V0SWQnOiB0aGlzLmdldCgndHlwZScpID09PSAncGFnZScgPyBkZWYudGFyZ2V0UGFnZSA6IGRlZi50YXJnZXRGaWVsZCwKICAgICAgICAndGFyZ2V0VHlwZSc6IHRoaXMuZ2V0KCd0eXBlJykKICAgICAgfTsKICAgIHJldHVybiB0YXJnZXQ7CiAgfTsKICBtb2R1bGUuUnVsZSA9IFJ1bGU7CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLm1vZGVscyB8fCB7fSk7Ci8qKgogKiBVcGxvYWRpbmcgdGFzayBmb3IgZWFjaCBzdWJtaXNzaW9uCiAqLwphcHBGb3JtLm1vZGVscyA9IGZ1bmN0aW9uIChtb2R1bGUpIHsKICBtb2R1bGUudXBsb2FkVGFzayA9IHsKICAgICduZXdJbnN0YW5jZSc6IG5ld0luc3RhbmNlLAogICAgJ2Zyb21Mb2NhbCc6IGZyb21Mb2NhbAogIH07CgoKICB2YXIgX3VwbG9hZFRhc2tzID0ge307CgogIHZhciBNb2RlbCA9IGFwcEZvcm0ubW9kZWxzLk1vZGVsOwoKICBmdW5jdGlvbiBuZXdJbnN0YW5jZShzdWJtaXNzaW9uTW9kZWwpIHsKICAgIGlmKHN1Ym1pc3Npb25Nb2RlbCl7CiAgICAgIHZhciB1dE9iaiA9IG5ldyBVcGxvYWRUYXNrKCk7CiAgICAgIHV0T2JqLmluaXQoc3VibWlzc2lvbk1vZGVsKTsKICAgICAgX3VwbG9hZFRhc2tzW3V0T2JqLmdldExvY2FsSWQoKV0gPSB1dE9iajsKICAgICAgcmV0dXJuIHV0T2JqOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHt9OwogICAgfQogIH0KCgogIGZ1bmN0aW9uIGZyb21Mb2NhbChsb2NhbElkLCBjYikgewogICAgaWYgKF91cGxvYWRUYXNrc1tsb2NhbElkXSkgewogICAgICByZXR1cm4gY2IobnVsbCwgX3VwbG9hZFRhc2tzW2xvY2FsSWRdKTsKICAgIH0KICAgIHZhciB1dE9iaiA9IG5ldyBVcGxvYWRUYXNrKCk7CiAgICB1dE9iai5zZXRMb2NhbElkKGxvY2FsSWQpOwogICAgX3VwbG9hZFRhc2tzW2xvY2FsSWRdID0gdXRPYmo7CiAgICB1dE9iai5sb2FkTG9jYWwoY2IpOwogIH0KCgogIGZ1bmN0aW9uIFVwbG9hZFRhc2soKSB7CiAgICBNb2RlbC5jYWxsKHRoaXMsIHsgJ190eXBlJzogJ3VwbG9hZFRhc2snIH0pOwogIH0KCgogIGFwcEZvcm0udXRpbHMuZXh0ZW5kKFVwbG9hZFRhc2ssIE1vZGVsKTsKICBVcGxvYWRUYXNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHN1Ym1pc3Npb25Nb2RlbCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIHN1Ym1pc3Npb25Mb2NhbElkID0gc3VibWlzc2lvbk1vZGVsLmdldExvY2FsSWQoKTsKICAgIHNlbGYuc2V0TG9jYWxJZChzdWJtaXNzaW9uTG9jYWxJZCArICdfJyArICd1cGxvYWRUYXNrJyk7CiAgICBzZWxmLnNldCgnc3VibWlzc2lvbkxvY2FsSWQnLCBzdWJtaXNzaW9uTG9jYWxJZCk7CiAgICBzZWxmLnNldCgnZmlsZVRhc2tzJywgW10pOwogICAgc2VsZi5zZXQoJ2N1cnJlbnRUYXNrJywgbnVsbCk7CiAgICBzZWxmLnNldCgnY29tcGxldGVkJywgZmFsc2UpOwogICAgc2VsZi5zZXQoJ3JldHJ5QXR0ZW1wdHMnLCAwKTsKICAgIHNlbGYuc2V0KCdyZXRyeU5lZWRlZCcsIGZhbHNlKTsKICAgIHNlbGYuc2V0KCdtYmFhc0NvbXBsZXRlZCcsIGZhbHNlKTsKICAgIHNlbGYuc2V0KCdzdWJtaXNzaW9uVHJhbnNmZXJUeXBlJywgJ3VwbG9hZCcpOwogICAgc3VibWlzc2lvbk1vZGVsLnNldFVwbG9hZFRhc2tJZChzZWxmLmdldExvY2FsSWQoKSk7CgogICAgZnVuY3Rpb24gaW5pdFN1Ym1pc3Npb25VcGxvYWQoKXsKICAgICAgdmFyIGpzb24gPSBzdWJtaXNzaW9uTW9kZWwuZ2V0UHJvcHMoKTsKICAgICAgc2VsZi5zZXQoJ2pzb25UYXNrJywganNvbik7CiAgICAgIHNlbGYuc2V0KCdmb3JtSWQnLCBzdWJtaXNzaW9uTW9kZWwuZ2V0KCdmb3JtSWQnKSk7CgogICAgfQoKICAgIGZ1bmN0aW9uIGluaXRTdWJtaXNzaW9uRG93bmxvYWQoKXsKICAgICAgc2VsZi5zZXQoJ3N1Ym1pc3Npb25JZCcsIHN1Ym1pc3Npb25Nb2RlbC5nZXRSZW1vdGVTdWJtaXNzaW9uSWQoKSk7CiAgICAgIHNlbGYuc2V0KCdqc29uVGFzaycsIHt9KTsKICAgICAgc2VsZi5zZXQoJ3N1Ym1pc3Npb25UcmFuc2ZlclR5cGUnLCAnZG93bmxvYWQnKTsKICAgIH0KCiAgICBpZihzdWJtaXNzaW9uTW9kZWwuaXNEb3dubG9hZFN1Ym1pc3Npb24oKSl7CiAgICAgIGluaXRTdWJtaXNzaW9uRG93bmxvYWQoKTsKICAgIH0gZWxzZSB7CiAgICAgIGluaXRTdWJtaXNzaW9uVXBsb2FkKCk7CiAgICB9CiAgfTsKICBVcGxvYWRUYXNrLnByb3RvdHlwZS5nZXRUb3RhbFNpemUgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIganNvblNpemUgPSBKU09OLnN0cmluZ2lmeShzZWxmLmdldCgnanNvblRhc2snKSkubGVuZ3RoOwogICAgdmFyIGZpbGVUYXNrcyA9IHNlbGYuZ2V0KCdmaWxlVGFza3MnKTsKICAgIHZhciBmaWxlU2l6ZSA9IDA7CiAgICB2YXIgZmlsZVRhc2s7CiAgICBmb3IgKHZhciBpID0gMDsgaTxmaWxlVGFza3MubGVuZ3RoIDsgaSsrKSB7CiAgICAgIGZpbGVUYXNrID0gZmlsZVRhc2tzW2ldOwogICAgICBmaWxlU2l6ZSArPSBmaWxlVGFzay5maWxlU2l6ZTsKICAgIH0KICAgIHJldHVybiBqc29uU2l6ZSArIGZpbGVTaXplOwogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUuZ2V0VXBsb2FkZWRTaXplID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGN1cnJlbnRUYXNrID0gdGhpcy5nZXRDdXJyZW50VGFzaygpOwogICAgaWYgKGN1cnJlbnRUYXNrID09PSBudWxsKSB7CiAgICAgIHJldHVybiAwOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGpzb25TaXplID0gSlNPTi5zdHJpbmdpZnkodGhpcy5nZXQoJ2pzb25UYXNrJykpLmxlbmd0aDsKICAgICAgdmFyIGZpbGVUYXNrcyA9IHRoaXMuZ2V0KCdmaWxlVGFza3MnKTsKICAgICAgdmFyIGZpbGVTaXplID0gMDsKICAgICAgZm9yICh2YXIgaSA9IDAsIGZpbGVUYXNrOyAoZmlsZVRhc2sgPSBmaWxlVGFza3NbaV0pICYmIGkgPCBjdXJyZW50VGFzazsgaSsrKSB7CiAgICAgICAgZmlsZVNpemUgKz0gZmlsZVRhc2suZmlsZVNpemU7CiAgICAgIH0KICAgICAgcmV0dXJuIGpzb25TaXplICsgZmlsZVNpemU7CiAgICB9CiAgfTsKICBVcGxvYWRUYXNrLnByb3RvdHlwZS5nZXRSZW1vdGVTdG9yZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBhcHBGb3JtLnN0b3Jlcy5kYXRhQWdlbnQucmVtb3RlU3RvcmU7CiAgfTsKICBVcGxvYWRUYXNrLnByb3RvdHlwZS5hZGRGaWxlVGFza3MgPSBmdW5jdGlvbihzdWJtaXNzaW9uTW9kZWwsIGNiKXsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHN1Ym1pc3Npb25Nb2RlbC5nZXRGaWxlSW5wdXRWYWx1ZXMoZnVuY3Rpb24oZXJyLCBmaWxlcyl7CiAgICAgIGlmKGVycil7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBnZXR0aW5nIGZpbGUgSW5wdXQgdmFsdWVzOiAiICsgZXJyKTsKICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgfQogICAgICBmb3IgKHZhciBpID0gMDsgaTxmaWxlcy5sZW5ndGggOyBpKyspIHsKICAgICAgICB2YXIgZmlsZSA9IGZpbGVzW2ldOwogICAgICAgIHNlbGYuYWRkRmlsZVRhc2soZmlsZSk7CiAgICAgIH0KICAgICAgY2IoKTsKICAgIH0pOwogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUuYWRkRmlsZVRhc2sgPSBmdW5jdGlvbiAoZmlsZURlZikgewogICAgdGhpcy5nZXQoJ2ZpbGVUYXNrcycpLnB1c2goZmlsZURlZik7CiAgfTsKICAvKioKICAgKiBnZXQgY3VycmVudCB1cGxvYWRpbmcgdGFzawogICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXQogICAqLwogIFVwbG9hZFRhc2sucHJvdG90eXBlLmdldEN1cnJlbnRUYXNrID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdjdXJyZW50VGFzaycsIG51bGwpOwogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUuZ2V0UmV0cnlBdHRlbXB0cyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgncmV0cnlBdHRlbXB0cycpOwogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUuaW5jcmVSZXRyeUF0dGVtcHRzID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5zZXQoJ3JldHJ5QXR0ZW1wdHMnLCB0aGlzLmdldCgncmV0cnlBdHRlbXB0cycpICsgMSk7CiAgfTsKICBVcGxvYWRUYXNrLnByb3RvdHlwZS5yZXNldFJldHJ5QXR0ZW1wdHMgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnNldCgncmV0cnlBdHRlbXB0cycsIDApOwogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUuaXNTdGFydGVkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFRhc2soKSA9PT0gbnVsbCA/IGZhbHNlIDogdHJ1ZTsKICB9OwoKCiAgVXBsb2FkVGFzay5wcm90b3R5cGUuc2V0U3VibWlzc2lvblF1ZXVlZCA9IGZ1bmN0aW9uKGNiKXsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHNlbGYuc3VibWlzc2lvbk1vZGVsKGZ1bmN0aW9uKGVyciwgc3VibWlzc2lvbil7CiAgICAgIGlmKGVycil7CiAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgIH0KCiAgICAgIGlmKHNlbGYuZ2V0KCJzdWJtaXNzaW9uSWQiKSl7CiAgICAgICAgc3VibWlzc2lvbi5zZXRSZW1vdGVTdWJtaXNzaW9uSWQoc2VsZi5nZXQoInN1Ym1pc3Npb25JZCIpKTsKICAgICAgfQoKICAgICAgc3VibWlzc2lvbi5xdWV1ZWQoY2IpOwogICAgfSk7CiAgfTsKICAvKioKICAgKiB1cGxvYWQvZG93bmxvYWQgZm9ybSBzdWJtaXNzaW9uCiAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiIFtkZXNjcmlwdGlvbl0KICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgW2Rlc2NyaXB0aW9uXQogICAqLwogIFVwbG9hZFRhc2sucHJvdG90eXBlLnVwbG9hZEZvcm0gPSBmdW5jdGlvbiAoY2IpIHsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICBmdW5jdGlvbiBwcm9jZXNzVXBsb2FkRGF0YVJlc3VsdChyZXMpewogICAgICAkZmguZm9ybXMubG9nLmQoIkluIHByb2Nlc3NVcGxvYWREYXRhUmVzdWx0Iik7CiAgICAgIHZhciBmb3JtU3ViID0gc2VsZi5nZXQoImpzb25UYXNrIik7CiAgICAgIGlmKHJlcy5lcnJvcil7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBzdWJtaXR0aW5nIGZvcm0gIiArIHJlcy5lcnJvcik7CiAgICAgICAgcmV0dXJuIGNiKCJFcnJvciBzdWJtaXR0aW5nIGZvcm0gIiArIHJlcy5lcnJvcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHN1Ym1pc3Npb25JZCA9IHJlcy5zdWJtaXNzaW9uSWQ7CiAgICAgICAgLy8gZm9ybSBkYXRhIHN1Ym1pdHRlZCBzdWNjZXNzZnVsbHkuCiAgICAgICAgZm9ybVN1Yi5sYXN0VXBkYXRlID0gYXBwRm9ybS51dGlscy5nZXRUaW1lKCk7CiAgICAgICAgc2VsZi5zZXQoJ3N1Ym1pc3Npb25JZCcsIHN1Ym1pc3Npb25JZCk7CgogICAgICAgIHNlbGYuc2V0U3VibWlzc2lvblF1ZXVlZChmdW5jdGlvbihlcnIpewogICAgICAgICAgc2VsZi5pbmNyZVByb2dyZXNzKCk7CiAgICAgICAgICBzZWxmLnNhdmVMb2NhbChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHNhdmluZyB1cGxvYWRUYXNrIHRvIGxvY2FsIHN0b3JhZ2UiICsgZXJyKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBzZWxmLmVtaXQoJ3Byb2dyZXNzJywgc2VsZi5nZXRQcm9ncmVzcygpKTsKICAgICAgICAgIHJldHVybiBjYihudWxsKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHByb2Nlc3NEb3dubG9hZERhdGFSZXN1bHQoZXJyLCByZXMpewogICAgICAkZmguZm9ybXMubG9nLmQoIkluIHByb2Nlc3NEb3dubG9hZERhdGFSZXN1bHQiKTsKICAgICAgaWYoZXJyKXsKICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIGRvd25sb2FkaW5nIHN1Ym1pc3Npb24gZGF0YSIrIGVycik7CiAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgIH0KCiAgICAgIC8vSGF2ZSB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgc3VibWlzc2lvbgogICAgICBzZWxmLnN1Ym1pc3Npb25Nb2RlbChmdW5jdGlvbihlcnIsIHN1Ym1pc3Npb25Nb2RlbCl7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJHb3QgU3VibWlzc2lvbk1vZGVsIiwgZXJyLCBzdWJtaXNzaW9uTW9kZWwpOwogICAgICAgIGlmKGVycil7CiAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICB9CiAgICAgICAgdmFyIEpTT05SZXMgPSB7fTsKCiAgICAgICAgLy9JbnN0YW50aWF0ZSB0aGUgbW9kZWwgZnJvbSB0aGUganNvbiBkZWZpbml0aW9uCiAgICAgICAgaWYodHlwZW9mKHJlcykgPT09ICJzdHJpbmciKXsKICAgICAgICAgIHRyeXsKICAgICAgICAgICAgSlNPTlJlcyA9IEpTT04ucGFyc2UocmVzKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpewogICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoInByb2Nlc3NEb3dubG9hZERhdGFSZXN1bHQgSW52YWxpZCBKU09OIE9iamVjdCBSZXR1cm5lZCIsIHJlcyk7CiAgICAgICAgICAgIHJldHVybiBjYigiSW52YWxpZCBKU09OIE9iamVjdCBSZXR1cm5lZCIpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBKU09OUmVzID0gcmVzOwogICAgICAgIH0KCiAgICAgICAgaWYoSlNPTlJlcy5zdGF0dXMpewogICAgICAgICAgZGVsZXRlIEpTT05SZXMuc3RhdHVzOwogICAgICAgIH0KCiAgICAgICAgc3VibWlzc2lvbk1vZGVsLmZyb21KU09OKEpTT05SZXMpOwogICAgICAgIHNlbGYuc2V0KCdqc29uVGFzaycsIHJlcyk7CiAgICAgICAgc3VibWlzc2lvbk1vZGVsLnNhdmVMb2NhbChmdW5jdGlvbihlcnIpewogICAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJTYXZlZCBTdWJtaXNzaW9uTW9kZWwiLCBlcnIsIHN1Ym1pc3Npb25Nb2RlbCk7CiAgICAgICAgICBpZihlcnIpewogICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHNhdmluZyB1cGRhdGVkIHN1Ym1pc3Npb24gZnJvbSBkb3dubG9hZCBzdWJtaXNzaW9uOiAiICsgZXJyKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvL1N1Ym1pc3Npb24gTW9kZWwgaXMgbm93IHBvcHVsYXRlZCB3aXRoIGFsbCB0aGUgZmllbGRzIGluIHRoZSBzdWJtaXNzaW9uCiAgICAgICAgICBzZWxmLmFkZEZpbGVUYXNrcyhzdWJtaXNzaW9uTW9kZWwsIGZ1bmN0aW9uKGVycil7CiAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiYWRkRmlsZVRhc2tzIGNhbGxlZCIsIGVyciwgc3VibWlzc2lvbk1vZGVsKTsKICAgICAgICAgICAgaWYoZXJyKXsKICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzZWxmLmluY3JlUHJvZ3Jlc3MoKTsKICAgICAgICAgICAgc2VsZi5zYXZlTG9jYWwoZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRXJyb3Igc2F2aW5nIGRvd25sb2FkVGFzayB0byBsb2NhbCBzdG9yYWdlIiArIGVycik7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBzZWxmLmVtaXQoJ3Byb2dyZXNzJywgc2VsZi5nZXRQcm9ncmVzcygpKTsKICAgICAgICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gdXBsb2FkU3VibWlzc2lvbkpTT04oKXsKICAgICAgJGZoLmZvcm1zLmxvZy5kKCJJbiB1cGxvYWRTdWJtaXNzaW9uSlNPTiIpOwogICAgICB2YXIgZm9ybVN1YiA9IHNlbGYuZ2V0KCdqc29uVGFzaycpOwogICAgICBzZWxmLnN1Ym1pc3Npb25Nb2RlbChmdW5jdGlvbihlcnIsIHN1Ym1pc3Npb25Nb2RlbCl7CiAgICAgICAgaWYoZXJyKXsKICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgIH0KICAgICAgICBzZWxmLmFkZEZpbGVUYXNrcyhzdWJtaXNzaW9uTW9kZWwsIGZ1bmN0aW9uKGVycil7CiAgICAgICAgICBpZihlcnIpewogICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIGFkZGluZyBmaWxlIHRhc2tzIGZvciBzdWJtaXNzaW9uIHVwbG9hZCIpOwogICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgZm9ybVN1Ym1pc3Npb25Nb2RlbCA9IG5ldyBhcHBGb3JtLm1vZGVscy5Gb3JtU3VibWlzc2lvbihmb3JtU3ViKTsKICAgICAgICAgIHNlbGYuZ2V0UmVtb3RlU3RvcmUoKS5jcmVhdGUoZm9ybVN1Ym1pc3Npb25Nb2RlbCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2YXIgdXBkYXRlZEZvcm1EZWZpbml0aW9uID0gcmVzLnVwZGF0ZWRGb3JtRGVmaW5pdGlvbjsKICAgICAgICAgICAgICBpZiAodXBkYXRlZEZvcm1EZWZpbml0aW9uKSB7CiAgICAgICAgICAgICAgICAvLyByZW1vdGUgZm9ybSBkZWZpbml0aW9uIGlzIHVwZGF0ZWQKICAgICAgICAgICAgICAgIHNlbGYucmVmcmVzaEZvcm0odXBkYXRlZEZvcm1EZWZpbml0aW9uLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIC8vcmVmcmVzaCBmb3JtIGRlZiBpbiBwYXJhbGxlbC4gbWF5YmUgbm90IG5lZWRlZC4KICAgICAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJGb3JtIFVwZGF0ZWQsIHJlZnJlc2hlZCIpOwogICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKGVycik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgcHJvY2Vzc1VwbG9hZERhdGFSZXN1bHQocmVzKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBwcm9jZXNzVXBsb2FkRGF0YVJlc3VsdChyZXMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwoKICAgIH0KCiAgICBmdW5jdGlvbiBkb3dubG9hZFN1Ym1pc3Npb25KU09OKCl7CiAgICAgIHZhciBmb3JtU3VibWlzc2lvbkRvd25sb2FkID0gbmV3IGFwcEZvcm0ubW9kZWxzLkZvcm1TdWJtaXNzaW9uRG93bmxvYWQoc2VsZik7CiAgICAgIHNlbGYuZ2V0UmVtb3RlU3RvcmUoKS5yZWFkKGZvcm1TdWJtaXNzaW9uRG93bmxvYWQsIHByb2Nlc3NEb3dubG9hZERhdGFSZXN1bHQpOwogICAgfQoKICAgIGlmKHNlbGYuaXNEb3dubG9hZFRhc2soKSl7CiAgICAgIGRvd25sb2FkU3VibWlzc2lvbkpTT04oKTsKICAgIH0gZWxzZSB7CiAgICAgIHVwbG9hZFN1Ym1pc3Npb25KU09OKCk7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogSGFuZGxlcyB0aGUgY2FzZSB3aGVyZSBhIGNhbGwgdG8gY29tcGxldGVTdWJtaXNzaW9uIHJldHVybnMgYSBzdGF0dXMgb3RoZXIgdGhhbiAiY29tcGxldGVkIi4KICAgKiBXaWxsIG9ubHkgZXZlciBnZXQgdG8gdGhpcyBmdW5jdGlvbiB3aGVuIGEgY2FsbCBpcyBtYWRlIHRvIHRoZSBjb21wbGV0ZVN1Ym1pc3Npb24gc2VydmVyLgogICAqCiAgICoKICAgKiBAcGFyYW0gZXJyIChTdHJpbmcpIEVycm9yIG1lc3NhZ2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBlcnJvciByZXR1cm5lZAogICAqIEBwYXJhbSByZXMgeyJzdGF0dXMiIDogPHBlbmRpbmcvZXJyb3I+LCAicGVuZGluZ0ZpbGVzIiA6IFs8YW55IHBlbmRpbmcgZmlsZXMgbm90IHlldCB1cGxvYWRlZD5dfQogICAqIEBwYXJhbSBjYiBGdW5jdGlvbiBjYWxsYmFjawogICAqLwogIFVwbG9hZFRhc2sucHJvdG90eXBlLmhhbmRsZUNvbXBsZXRpb25FcnJvciA9IGZ1bmN0aW9uIChlcnIsIHJlcywgY2IpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiaGFuZGxlQ29tcGxldGlvbkVycm9yIENhbGxlZCIpOwogICAgdmFyIGVycm9yTWVzc2FnZSA9IGVycjsKICAgIGlmIChyZXMuc3RhdHVzID09PSAncGVuZGluZycpIHsKICAgICAgLy9UaGUgc3VibWlzc2lvbiBpcyBub3QgeWV0IGNvbXBsZXRlLCB0aGVyZSBhcmUgZmlsZXMgd2FpdGluZyB0byB1cGxvYWQuIFRoaXMgaXMgYW4gdW5leHBlY3RlZCBzdGF0ZSBhcyBhbGwgb2YgdGhlIGZpbGVzIHNob3VsZCBoYXZlIGJlZW4gdXBsb2FkZWQuCiAgICAgIGVycm9yTWVzc2FnZSA9ICdTdWJtaXNzaW9uIFN0aWxsIFBlbmRpbmcuJzsKICAgIH0gZWxzZSBpZiAocmVzLnN0YXR1cyA9PT0gJ2Vycm9yJykgewogICAgICAvL1RoZXJlIHdhcyBhbiBlcnJvciBjb21wbGV0aW5nIHRoZSBzdWJtaXNzaW9uLgogICAgICBlcnJvck1lc3NhZ2UgPSAnRXJyb3IgY29tcGxldGluZyBzdWJtaXNzaW9uJzsKICAgIH0gZWxzZSB7CiAgICAgIGVycm9yTWVzc2FnZSA9ICdJbnZhbGlkIHJldHVybiB0eXBlIGZyb20gY29tcGxldGUgc3VibWlzc2lvbic7CiAgICB9CiAgICBjYihlcnJvck1lc3NhZ2UpOwogIH07CgogIC8qKgogICAqIEhhbmRsZXMgdGhlIGNhc2Ugd2hlcmUgdGhlIGN1cnJlbnQgc3VibWlzc2lvbiBzdGF0dXMgaXMgcmVxdWlyZWQgZnJvbSB0aGUgc2VydmVyLgogICAqIEJhc2VkIG9uIHRoZSBmaWxlcyB3YWl0aW5nIHRvIGJlIHVwbG9hZGVkLCB0aGUgdXBsb2FkIHRhc2sgaXMgcmUtYnVpbHQgd2l0aCBwZW5kaW5nRmlsZXMgZnJvbSB0aGUgc2VydmVyLgogICAqCiAgICogQHBhcmFtIGNiCiAgICovCiAgVXBsb2FkVGFzay5wcm90b3R5cGUuaGFuZGxlSW5jb21wbGV0ZVN1Ym1pc3Npb24gPSBmdW5jdGlvbiAoY2IpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGZ1bmN0aW9uIHByb2Nlc3NVcGxvYWRJbmNvbXBsZXRlU3VibWlzc2lvbigpewoKICAgICAgdmFyIHJlbW90ZVN0b3JlID0gc2VsZi5nZXRSZW1vdGVTdG9yZSgpOwogICAgICB2YXIgc3VibWlzc2lvblN0YXR1cyA9IG5ldyBhcHBGb3JtLm1vZGVscy5Gb3JtU3VibWlzc2lvblN0YXR1cyhzZWxmKTsKCiAgICAgIHJlbW90ZVN0b3JlLnN1Ym1pc3Npb25TdGF0dXMoc3VibWlzc2lvblN0YXR1cywgZnVuY3Rpb24gKGVyciwgcmVzKSB7CiAgICAgICAgdmFyIGVyck1lc3NhZ2U9IiI7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgY2IoZXJyKTsKICAgICAgICB9IGVsc2UgaWYgKHJlcy5zdGF0dXMgPT09ICdlcnJvcicpIHsKICAgICAgICAgIC8vVGhlIHNlcnZlciBoYWQgYW4gZXJyb3Igc3VibWl0dGluZyB0aGUgZm9ybSwgZmluaXNoIHdpdGggYW4gZXJyb3IKICAgICAgICAgIGVyck1lc3NhZ2U9ICdFcnJvciBzdWJtaXR0aW5nIGZvcm0uJzsKICAgICAgICAgIGNiKGVyck1lc3NhZ2UpOwogICAgICAgIH0gZWxzZSBpZiAocmVzLnN0YXR1cyA9PT0gJ2NvbXBsZXRlJykgewogICAgICAgICAgLy9TdWJtaXNzaW9uIGlzIGNvbXBsZXRlLCBtYWtlIHVwbG9hZGluZyBwcm9ncmVzcyBmdXJ0aGVyCiAgICAgICAgICBzZWxmLmluY3JlUHJvZ3Jlc3MoKTsKICAgICAgICAgIGNiKCk7CiAgICAgICAgfSBlbHNlIGlmIChyZXMuc3RhdHVzID09PSAncGVuZGluZycpIHsKICAgICAgICAgIC8vU3VibWlzc2lvbiBpcyBzdGlsbCBwZW5kaW5nLCBjaGVjayBmb3IgZmlsZXMgbm90IHVwbG9hZGVkIHlldC4KICAgICAgICAgIHZhciBwZW5kaW5nRmlsZXMgPSByZXMucGVuZGluZ0ZpbGVzIHx8IFtdOwogICAgICAgICAgaWYgKHBlbmRpbmdGaWxlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHNlbGYucmVzZXRVcGxvYWRUYXNrKHBlbmRpbmdGaWxlcywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGNiKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9ObyBmaWxlcyBwZW5kaW5nIG9uIHRoZSBzZXJ2ZXIsIG1ha2UgdGhlIHByb2dyZXNzIGZ1cnRoZXIKICAgICAgICAgICAgc2VsZi5pbmNyZVByb2dyZXNzKCk7CiAgICAgICAgICAgIGNiKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vU2hvdWxkIG5vdCBnZXQgdG8gdGhpcyBwb2ludC4gT25seSB2YWxpZCBzdGF0dXMgcmVzcG9uc2VzIGFyZSBlcnJvciwgcGVuZGluZyBhbmQgY29tcGxldGUuCiAgICAgICAgICBlcnJNZXNzYWdlID0gJ0ludmFsaWQgc3VibWlzc2lvbiBzdGF0dXMgcmVzcG9uc2UuJzsKICAgICAgICAgIGNiKGVyck1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gcHJvY2Vzc0Rvd25sb2FkSW5jb21wbGV0ZVN1Ym1pc3Npb24oKXsKICAgICAgLy9ObyBuZWVkIHRvIGdvIHRoZSB0aGUgc2VydmVyIHRvIGdldCBzdWJtaXNzaW9uIGRldGFpbHMgLS0gVGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgc3RhdHVzIGlzIHZhbGlkIGxvY2FsbHkKICAgICAgY2IoKTsKICAgIH0KCiAgICBpZihzZWxmLmlzRG93bmxvYWRUYXNrKCkpewogICAgICBwcm9jZXNzRG93bmxvYWRJbmNvbXBsZXRlU3VibWlzc2lvbigpOwogICAgfSBlbHNlIHsKICAgICAgcHJvY2Vzc1VwbG9hZEluY29tcGxldGVTdWJtaXNzaW9uKCk7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogUmVzZXR0aW5nIHRoZSB1cGxvYWQgdGFzayBiYXNlZCBvbiB0aGUgcmVzcG9uc2UgZnJvbSBnZXRTdWJtaXNzaW9uU3RhdHVzCiAgICogQHBhcmFtIHBlbmRpbmdGaWxlcyAtLSBBcnJheSBvZiBmaWxlcyBzdGlsbCB3YWl0aW5nIHRvIHVwbG9hZAogICAqIEBwYXJhbSBjYgogICAqLwogIFVwbG9hZFRhc2sucHJvdG90eXBlLnJlc2V0VXBsb2FkVGFzayA9IGZ1bmN0aW9uIChwZW5kaW5nRmlsZXMsIGNiKSB7CiAgICB2YXIgZmlsZXNUb1VwbG9hZCA9IHRoaXMuZ2V0KCdmaWxlVGFza3MnKTsKICAgIHZhciByZXNldEZpbGVzVG9VcGxvYWQgPSBbXTsKICAgIHZhciBmaWxlSW5kZXg7CiAgICAvL0FkZGluZyB0aGUgYWxyZWFkeSBjb21wbGV0ZWQgZmlsZXMgdG8gdGhlIHJlc2V0IGFycmF5LgogICAgZm9yIChmaWxlSW5kZXggPSAwOyBmaWxlSW5kZXggPCBmaWxlc1RvVXBsb2FkLmxlbmd0aDsgZmlsZUluZGV4KyspIHsKICAgICAgaWYgKHBlbmRpbmdGaWxlcy5pbmRleE9mKGZpbGVzVG9VcGxvYWRbZmlsZUluZGV4XS5oYXNoTmFtZSkgPCAwKSB7CiAgICAgICAgcmVzZXRGaWxlc1RvVXBsb2FkLnB1c2goZmlsZXNUb1VwbG9hZFtmaWxlSW5kZXhdKTsKICAgICAgfQogICAgfQogICAgLy9BZGRpbmcgdGhlIHBlbmRpbmcgZmlsZXMgdG8gdGhlIGVuZCBvZiB0aGUgYXJyYXkuCiAgICBmb3IgKGZpbGVJbmRleCA9IDA7IGZpbGVJbmRleCA8IGZpbGVzVG9VcGxvYWQubGVuZ3RoOyBmaWxlSW5kZXgrKykgewogICAgICBpZiAocGVuZGluZ0ZpbGVzLmluZGV4T2YoZmlsZXNUb1VwbG9hZFtmaWxlSW5kZXhdLmhhc2hOYW1lKSA+IC0xKSB7CiAgICAgICAgcmVzZXRGaWxlc1RvVXBsb2FkLnB1c2goZmlsZXNUb1VwbG9hZFtmaWxlSW5kZXhdKTsKICAgICAgfQogICAgfQogICAgdmFyIHJlc2V0RmlsZUluZGV4ID0gZmlsZXNUb1VwbG9hZC5sZW5ndGggLSBwZW5kaW5nRmlsZXMubGVuZ3RoIC0gMTsKICAgIHZhciByZXNldEN1cnJlbnRUYXNrID0gMDsKICAgIGlmIChyZXNldEZpbGVJbmRleCA+IDApIHsKICAgICAgcmVzZXRDdXJyZW50VGFzayA9IHJlc2V0RmlsZUluZGV4OwogICAgfQogICAgLy9SZXNldCBjdXJyZW50IHRhc2sKICAgIHRoaXMuc2V0KCdjdXJyZW50VGFzaycsIHJlc2V0Q3VycmVudFRhc2spOwogICAgdGhpcy5zZXQoJ2ZpbGVUYXNrcycsIHJlc2V0RmlsZXNUb1VwbG9hZCk7CiAgICB0aGlzLnNhdmVMb2NhbChjYik7ICAvL1NhdmluZyB0aGUgcmVzZXQgZmlsZXMgbGlzdCB0byBsb2NhbAogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUudXBsb2FkRmlsZSA9IGZ1bmN0aW9uIChjYikgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIHByb2dyZXNzID0gc2VsZi5nZXRDdXJyZW50VGFzaygpOwoKICAgIGlmIChwcm9ncmVzcyA9PT0gbnVsbCkgewogICAgICBwcm9ncmVzcyA9IDA7CiAgICAgIHNlbGYuc2V0KCdjdXJyZW50VGFzaycsIHByb2dyZXNzKTsKICAgIH0KICAgIHZhciBmaWxlVGFzayA9IHNlbGYuZ2V0KCdmaWxlVGFza3MnLCBbXSlbcHJvZ3Jlc3NdOwogICAgdmFyIHN1Ym1pc3Npb25JZCA9IHNlbGYuZ2V0KCdzdWJtaXNzaW9uSWQnKTsKICAgIHZhciBmaWxlU3VibWlzc2lvbk1vZGVsOwogICAgaWYgKCFmaWxlVGFzaykgewogICAgICAkZmguZm9ybXMubG9nLmUoIk5vIGZpbGUgdGFzayBmb3VuZCB3aGVuIHRyeWluZyB0byB0cmFuc2ZlciBhIGZpbGUuIik7CiAgICAgIHJldHVybiBjYignY2Fubm90IGZpbmQgZmlsZSB0YXNrJyk7CiAgICB9CgogICAgaWYoIXN1Ym1pc3Npb25JZCl7CiAgICAgICRmaC5mb3Jtcy5sb2cuZSgiTm8gc3VibWlzc2lvbiBpZCBmb3VuZCB3aGVuIHRyeWluZyB0byB0cmFuc2ZlciBhIGZpbGUuIik7CiAgICAgIHJldHVybiBjYigiTm8gc3VibWlzc2lvbiBJZCBmb3VuZCIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHByb2Nlc3NVcGxvYWRGaWxlKCl7CiAgICAgICRmaC5mb3Jtcy5sb2cuZCgicHJvY2Vzc1VwbG9hZEZpbGUgZm9yIHN1Ym1pc3Npb25JZDogIik7CiAgICAgIGlmIChmaWxlVGFzay5jb250ZW50VHlwZSA9PT0gJ2Jhc2U2NCcpIHsKICAgICAgICBmaWxlU3VibWlzc2lvbk1vZGVsID0gbmV3IGFwcEZvcm0ubW9kZWxzLkJhc2U2NEZpbGVTdWJtaXNzaW9uKGZpbGVUYXNrKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmaWxlU3VibWlzc2lvbk1vZGVsID0gbmV3IGFwcEZvcm0ubW9kZWxzLkZpbGVTdWJtaXNzaW9uKGZpbGVUYXNrKTsKICAgICAgfQogICAgICBmaWxlU3VibWlzc2lvbk1vZGVsLnNldFN1Ym1pc3Npb25JZChzdWJtaXNzaW9uSWQpOwogICAgICBmaWxlU3VibWlzc2lvbk1vZGVsLmxvYWRGaWxlKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIGxvYWRpbmcgZmlsZSBmb3IgdXBsb2FkOiAiICsgZXJyKTsKICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWxmLmdldFJlbW90ZVN0b3JlKCkuY3JlYXRlKGZpbGVTdWJtaXNzaW9uTW9kZWwsIGZ1bmN0aW9uIChlcnIsIHJlcykgewogICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgY2IoZXJyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gJ29rJyB8fCByZXMuc3RhdHVzID09PSAyMDAgfHwgcmVzLnN0YXR1cyA9PT0gJzIwMCcpIHsKICAgICAgICAgICAgICAgIGZpbGVUYXNrLnVwZGF0ZURhdGUgPSBhcHBGb3JtLnV0aWxzLmdldFRpbWUoKTsKICAgICAgICAgICAgICAgIHNlbGYuaW5jcmVQcm9ncmVzcygpOwogICAgICAgICAgICAgICAgc2VsZi5zYXZlTG9jYWwoZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgICAvL3NhdmUgY3VycmVudCBzdGF0dXMuCiAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHNhdmluZyB1cGxvYWQgdGFzayIgKyBlcnIpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHNlbGYuZW1pdCgncHJvZ3Jlc3MnLCBzZWxmLmdldFByb2dyZXNzKCkpOwogICAgICAgICAgICAgICAgY2IobnVsbCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSAnRmlsZSB1cGxvYWQgZmFpbGVkIGZvciBmaWxlOiAnICsgZmlsZVRhc2suZmlsZU5hbWU7CiAgICAgICAgICAgICAgICBjYihlcnJvck1lc3NhZ2UpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBwcm9jZXNzRG93bmxvYWRGaWxlKCl7CiAgICAgICRmaC5mb3Jtcy5sb2cuZCgicHJvY2Vzc0Rvd25sb2FkRmlsZSBjYWxsZWQiKTsKICAgICAgZmlsZVN1Ym1pc3Npb25Nb2RlbCA9IG5ldyBhcHBGb3JtLm1vZGVscy5GaWxlU3VibWlzc2lvbkRvd25sb2FkKGZpbGVUYXNrKTsKICAgICAgZmlsZVN1Ym1pc3Npb25Nb2RlbC5zZXRTdWJtaXNzaW9uSWQoc3VibWlzc2lvbklkKTsKICAgICAgc2VsZi5nZXRSZW1vdGVTdG9yZSgpLnJlYWQoZmlsZVN1Ym1pc3Npb25Nb2RlbCwgZnVuY3Rpb24gKGVyciwgbG9jYWxGaWxlUGF0aCkgewogICAgICAgIGlmKGVycil7CiAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIGRvd25sb2FkaW5nIGEgZmlsZSBmcm9tIHJlbW90ZTogIiArIGVycik7CiAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICB9CgogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgicHJvY2Vzc0Rvd25sb2FkRmlsZSBjYWxsZWQuIExvY2FsIEZpbGUgUGF0aDogIiArIGxvY2FsRmlsZVBhdGgpOwoKICAgICAgICAvL1VwZGF0ZSB0aGUgc3VibWlzc2lvbiBtb2RlbCB0byBhZGQgbG9jYWwgZmlsZSB1cmkgdG8gYSBmaWxlIHN1Ym1pc3Npb24gb2JqZWN0CiAgICAgICAgc2VsZi5zdWJtaXNzaW9uTW9kZWwoZnVuY3Rpb24oZXJyLCBzdWJtaXNzaW9uTW9kZWwpewogICAgICAgICAgaWYoZXJyKXsKICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBMb2FkaW5nIHN1Ym1pc3Npb24gbW9kZWwgZm9yIHByb2Nlc3NEb3dubG9hZEZpbGUgIiArIGVycik7CiAgICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgICAgfQoKICAgICAgICAgIHN1Ym1pc3Npb25Nb2RlbC51cGRhdGVGaWxlTG9jYWxVUkkoZmlsZVRhc2ssIGxvY2FsRmlsZVBhdGgsIGZ1bmN0aW9uKGVycil7CiAgICAgICAgICAgIGlmKGVycil7CiAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciB1cGRhdGluZyBmaWxlIGxvY2FsIHVybCBmb3IgZmlsZVRhc2sgIiArIEpTT04uc3RyaW5naWZ5KGZpbGVUYXNrKSk7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNlbGYuaW5jcmVQcm9ncmVzcygpOwogICAgICAgICAgICBzZWxmLnNhdmVMb2NhbChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgLy9zYXZlIGN1cnJlbnQgc3RhdHVzLgogICAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRXJyb3Igc2F2aW5nIGRvd25sb2FkIHRhc2siKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzZWxmLmVtaXQoJ3Byb2dyZXNzJywgc2VsZi5nZXRQcm9ncmVzcygpKTsKICAgICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgaWYoc2VsZi5pc0Rvd25sb2FkVGFzaygpKXsKICAgICAgcHJvY2Vzc0Rvd25sb2FkRmlsZSgpOwogICAgfSBlbHNlIHsKICAgICAgcHJvY2Vzc1VwbG9hZEZpbGUoKTsKICAgIH0KICB9OwogIFVwbG9hZFRhc2sucHJvdG90eXBlLmlzRG93bmxvYWRUYXNrID0gZnVuY3Rpb24oKXsKICAgIHJldHVybiB0aGlzLmdldCgic3VibWlzc2lvblRyYW5zZmVyVHlwZSIpID09PSAiZG93bmxvYWQiOwogIH07CiAgLy9UaGUgdXBsb2FkIHRhc2sgbmVlZHMgdG8gYmUgcmV0cmllZAogIFVwbG9hZFRhc2sucHJvdG90eXBlLnNldFJldHJ5TmVlZGVkID0gZnVuY3Rpb24gKHJldHJ5TmVlZGVkKSB7CiAgICAvL0lmIHRoZXJlIGlzIGEgc3VibWlzc2lvbklkLCB0aGVuIGEgcmV0cnkgaXMgbmVlZGVkLiBJZiBub3QsIHRoZW4gdGhlIGN1cnJlbnQgdGFzayBzaG91bGQgYmUgc2V0IHRvIG51bGwgdG8gcmV0cnkgdGhlIHN1Ym1pc3Npb24uCiAgICBpZiAodGhpcy5nZXQoJ3N1Ym1pc3Npb25JZCcsIG51bGwpICE9IG51bGwpIHsKICAgICAgdGhpcy5zZXQoJ3JldHJ5TmVlZGVkJywgcmV0cnlOZWVkZWQpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5zZXQoJ3JldHJ5TmVlZGVkJywgZmFsc2UpOwogICAgICB0aGlzLnNldCgnY3VycmVudFRhc2snLCBudWxsKTsKICAgIH0KICB9OwogIFVwbG9hZFRhc2sucHJvdG90eXBlLnJldHJ5TmVlZGVkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCdyZXRyeU5lZWRlZCcpOwogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUudXBsb2FkVGljayA9IGZ1bmN0aW9uIChjYikgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgZnVuY3Rpb24gX2hhbmRsZXIoZXJyKSB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmQoJ0VyciwgcmV0cnlpbmcgdHJhbnNmZXI6ICcgKyBzZWxmLmdldExvY2FsSWQoKSk7CiAgICAgICAgLy9JZiB0aGUgdXBsb2FkIGhhcyBlbmNvdW50ZXJlZCBhbiBlcnJvciAtLSBmbGFnIHRoZSBzdWJtaXNzaW9uIGFzIG5lZWRpbmcgYSByZXRyeSBvbiB0aGUgbmV4dCB0aWNrIC0tIFVzZXIgc2hvdWxkIGJlIGluc3VsYXRlZCBmcm9tIGFuIGVycm9yIHVudGlsIHRoZSByZXRyaWVzIGFyZSBmaW5pc2hlZC4KICAgICAgICBzZWxmLmluY3JlUmV0cnlBdHRlbXB0cygpOwogICAgICAgIGlmIChzZWxmLmdldFJldHJ5QXR0ZW1wdHMoKSA8PSAkZmguZm9ybXMuY29uZmlnLmdldCgnbWF4X3JldHJpZXMnKSkgewogICAgICAgICAgc2VsZi5zZXRSZXRyeU5lZWRlZCh0cnVlKTsKICAgICAgICAgIHNlbGYuc2F2ZUxvY2FsKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgaWYgKGVycil7CiAgICAgICAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBzYXZpbmcgdXBsb2FkIHRhc2tMICIgKyBlcnIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjYigpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vVGhlIG51bWJlciBvZiByZXRyeSBhdHRlbXB0cyBleGNlZWRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiByZXRyeSBhdHRlbXB0cyBhbGxvd2VkLCBmbGFnIHRoZSB1cGxvYWQgYXMgYW4gZXJyb3IuCiAgICAgICAgICBzZWxmLnNldFJldHJ5TmVlZGVkKHRydWUpOwogICAgICAgICAgc2VsZi5yZXNldFJldHJ5QXR0ZW1wdHMoKTsKICAgICAgICAgIHNlbGYuZXJyb3IoZXJyLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGNiKGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy9ubyBlcnJvci4KICAgICAgICBzZWxmLnNldFJldHJ5TmVlZGVkKGZhbHNlKTsKICAgICAgICBzZWxmLnNhdmVMb2NhbChmdW5jdGlvbiAoX2VycikgewogICAgICAgICAgaWYgKF9lcnIpewogICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHNhdmluZyB1cGxvYWQgdGFzayB0byBsb2NhbCBtZW1vcnkiICsgX2Vycik7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgc2VsZi5zdWJtaXNzaW9uTW9kZWwoZnVuY3Rpb24gKGVyciwgc3VibWlzc2lvbikgewogICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICBjYihlcnIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHN1Ym1pc3Npb24uZ2V0KCdzdGF0dXMnKTsKICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gJ2lucHJvZ3Jlc3MnICYmIHN0YXR1cyAhPT0gJ3N1Ym1pdHRlZCcgJiYgc3RhdHVzICE9PSAnZG93bmxvYWRlZCcgJiYgc3RhdHVzICE9PSAncXVldWVkJykgewogICAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZSgnU3VibWlzc2lvbiBzdGF0dXMgaXMgaW5jb3JyZWN0LiBVcGxvYWQgdGFzayBzaG91bGQgYmUgc3RhcnRlZCBieSBzdWJtaXNzaW9uIG9iamVjdFwncyB1cGxvYWQgbWV0aG9kLicgKyBzdGF0dXMpOwogICAgICAgICAgICAgIGNiKCdTdWJtaXNzaW9uIHN0YXR1cyBpcyBpbmNvcnJlY3QuIFVwbG9hZCB0YXNrIHNob3VsZCBiZSBzdGFydGVkIGJ5IHN1Ym1pc3Npb24gb2JqZWN0XCdzIHVwbG9hZCBtZXRob2QuJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY2IoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICBpZiAoIXRoaXMuaXNGb3JtQ29tcGxldGVkKCkpIHsKICAgICAgLy8gTm8gY3VycmVudCB0YXNrLCBzZW5kIHRoZSBmb3JtIGpzb24KICAgICAgdGhpcy51cGxvYWRGb3JtKF9oYW5kbGVyKTsKICAgIH0gZWxzZSBpZiAodGhpcy5yZXRyeU5lZWRlZCgpKSB7CiAgICAgIC8vSWYgYSByZXRyeSBpcyBuZWVkZWQsIHRoaXMgdGljayBnZXRzIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgc3VibWlzc2lvbiBmcm9tIHRoZSBzZXJ2ZXIgYW5kIHJlc2V0cyB0aGUgc3VibWlzc2lvbi4KICAgICAgdGhpcy5oYW5kbGVJbmNvbXBsZXRlU3VibWlzc2lvbihfaGFuZGxlcik7CiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzRmlsZUNvbXBsZXRlZCgpKSB7CiAgICAgIC8vZmlsZXMgdG8gYmUgdXBsb2FkZWQKICAgICAgdGhpcy51cGxvYWRGaWxlKF9oYW5kbGVyKTsKICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNNQmFhU0NvbXBsZXRlZCgpKSB7CiAgICAgIC8vY2FsbCBtYmFhcyB0byBjb21wbGV0ZSB1cGxvYWQKICAgICAgdGhpcy51cGxvYWRDb21wbGV0ZShfaGFuZGxlcik7CiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzQ29tcGxldGVkKCkpIHsKICAgICAgLy9jb21wbGV0ZSB0aGUgdXBsb2FkIHRhc2sKICAgICAgdGhpcy5zdWNjZXNzKF9oYW5kbGVyKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vdGFzayBpcyBhbHJlYWR5IGNvbXBsZXRlZC4KICAgICAgX2hhbmRsZXIobnVsbCwgbnVsbCk7CiAgICB9CiAgfTsKICBVcGxvYWRUYXNrLnByb3RvdHlwZS5pbmNyZVByb2dyZXNzID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGN1clRhc2sgPSB0aGlzLmdldEN1cnJlbnRUYXNrKCk7CiAgICBpZiAoY3VyVGFzayA9PT0gbnVsbCkgewogICAgICBjdXJUYXNrID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGN1clRhc2srKzsKICAgIH0KICAgIHRoaXMuc2V0KCdjdXJyZW50VGFzaycsIGN1clRhc2spOwogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUudXBsb2FkQ29tcGxldGUgPSBmdW5jdGlvbiAoY2IpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiVXBsb2FkQ29tcGxldGUgQ2FsbGVkIik7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgc3VibWlzc2lvbklkID0gc2VsZi5nZXQoJ3N1Ym1pc3Npb25JZCcsIG51bGwpOwoKICAgIGlmIChzdWJtaXNzaW9uSWQgPT09IG51bGwpIHsKICAgICAgcmV0dXJuIGNiKCdGYWlsZWQgdG8gY29tcGxldGUgc3VibWlzc2lvbi4gU3VibWlzc2lvbiBJZCBub3QgZm91bmQuJyk7CiAgICB9CgogICAgZnVuY3Rpb24gcHJvY2Vzc0Rvd25sb2FkQ29tcGxldGUoKXsKICAgICAgJGZoLmZvcm1zLmxvZy5kKCJwcm9jZXNzRG93bmxvYWRDb21wbGV0ZSBDYWxsZWQiKTsKICAgICAgc2VsZi5pbmNyZVByb2dyZXNzKCk7CiAgICAgIGNiKG51bGwpOwogICAgfQoKICAgIGZ1bmN0aW9uIHByb2Nlc3NVcGxvYWRDb21wbGV0ZSgpewogICAgICAkZmguZm9ybXMubG9nLmQoInByb2Nlc3NVcGxvYWRDb21wbGV0ZSBDYWxsZWQiKTsKICAgICAgdmFyIHJlbW90ZVN0b3JlID0gc2VsZi5nZXRSZW1vdGVTdG9yZSgpOwogICAgICB2YXIgY29tcGxldGVTdWJtaXNzaW9uID0gbmV3IGFwcEZvcm0ubW9kZWxzLkZvcm1TdWJtaXNzaW9uQ29tcGxldGUoc2VsZik7CiAgICAgIHJlbW90ZVN0b3JlLmNyZWF0ZShjb21wbGV0ZVN1Ym1pc3Npb24sIGZ1bmN0aW9uIChlcnIsIHJlcykgewogICAgICAgIC8vaWYgc3RhdHVzIGlzIG5vdCAiY29tcGxldGVkIiwgdGhlbiBoYW5kbGUgdGhlIGNvbXBsZXRpb24gZXJyCiAgICAgICAgcmVzID0gcmVzIHx8IHt9OwogICAgICAgIGlmIChyZXMuc3RhdHVzICE9PSAnY29tcGxldGUnKSB7CiAgICAgICAgICByZXR1cm4gc2VsZi5oYW5kbGVDb21wbGV0aW9uRXJyb3IoZXJyLCByZXMsIGNiKTsKICAgICAgICB9CiAgICAgICAgLy9Db21wbGV0aW9uIGlzIG5vdyBjb21wbGV0ZWQgc3VjZXNzZnVsbHkuLiB3ZSBjYW4gbWFrZSB0aGUgcHJvZ3Jlc3MgZnVydGhlci4KICAgICAgICBzZWxmLmluY3JlUHJvZ3Jlc3MoKTsKICAgICAgICBjYihudWxsKTsKICAgICAgfSk7CiAgICB9CgogICAgaWYoc2VsZi5pc0Rvd25sb2FkVGFzaygpKXsKICAgICAgcHJvY2Vzc0Rvd25sb2FkQ29tcGxldGUoKTsKICAgIH0gZWxzZSB7CiAgICAgIHByb2Nlc3NVcGxvYWRDb21wbGV0ZSgpOwogICAgfQogIH07CiAgLyoqCiAgICogdGhlIHVwbG9hZCB0YXNrIGlzIHN1Y2Nlc3NmdWxseSBjb21wbGV0ZWQuIFRoaXMgd2lsbCBiZSBjYWxsZWQgd2hlbiBhbGwgdXBsb2FkaW5nIHByb2Nlc3MgZmluaXNoZWQgc3VjY2Vzc2Z1bGx5LgogICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXQogICAqLwogIFVwbG9hZFRhc2sucHJvdG90eXBlLnN1Y2Nlc3MgPSBmdW5jdGlvbiAoY2IpIHsKICAgICRmaC5mb3Jtcy5sb2cuZCgiVHJhbnNmZXIgU3VjZXNzZnVsLiBTdWNjZXNzIENhbGxlZC4iKTsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBzdWJtaXNzaW9uSWQgPSBzZWxmLmdldCgnc3VibWlzc2lvbklkJywgbnVsbCk7CiAgICBzZWxmLnNldCgnY29tcGxldGVkJywgdHJ1ZSk7CiAgICAKCiAgICBmdW5jdGlvbiBwcm9jZXNzVXBsb2FkU3VjY2VzcyhjYil7CiAgICAgICRmaC5mb3Jtcy5sb2cuZCgicHJvY2Vzc1VwbG9hZFN1Y2Nlc3MgQ2FsbGVkIik7CiAgICAgIHNlbGYuc3VibWlzc2lvbk1vZGVsKGZ1bmN0aW9uIChfZXJyLCBtb2RlbCkgewogICAgICAgIGlmKF9lcnIpewogICAgICAgICAgcmV0dXJuIGNiKF9lcnIpOwogICAgICAgIH0KICAgICAgICBtb2RlbC5zZXQoJ3N1Ym1pc3Npb25JZCcsIHN1Ym1pc3Npb25JZCk7CiAgICAgICAgbW9kZWwuc3VibWl0dGVkKGNiKTsKICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gcHJvY2Vzc0Rvd25sb2FkU3VjY2VzcyhjYil7CiAgICAgICRmaC5mb3Jtcy5sb2cuZCgicHJvY2Vzc0Rvd25sb2FkU3VjY2VzcyBDYWxsZWQiKTsKICAgICAgc2VsZi5zdWJtaXNzaW9uTW9kZWwoZnVuY3Rpb24gKF9lcnIsIG1vZGVsKSB7CiAgICAgICAgaWYoX2Vycil7CiAgICAgICAgICByZXR1cm4gY2IoX2Vycik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG1vZGVsLnBvcHVsYXRlRmlsZXNJblN1Ym1pc3Npb24oKTsKICAgICAgICAgIG1vZGVsLmRvd25sb2FkZWQoY2IpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgc2VsZi5zYXZlTG9jYWwoZnVuY3Rpb24gKGVycikgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBDbGVhcmluZyBVcGxvYWQgVGFzayIpOwogICAgICB9CgogICAgICBpZihzZWxmLmlzRG93bmxvYWRUYXNrKCkpewogICAgICAgIHByb2Nlc3NEb3dubG9hZFN1Y2Nlc3MoZnVuY3Rpb24oZXJyKXsKICAgICAgICAgIHNlbGYuY2xlYXJMb2NhbChjYik7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcHJvY2Vzc1VwbG9hZFN1Y2Nlc3MoZnVuY3Rpb24oZXJyKXsKICAgICAgICAgIHNlbGYuY2xlYXJMb2NhbChjYik7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH07CiAgLyoqCiAgICogdGhlIHVwbG9hZCB0YXNrIGlzIGZhaWxlZC4gSXQgd2lsbCBub3QgY29tcGxldGUgdGhlIHRhc2sgYnV0IHdpbGwgc2V0IGVycm9yIHdpdGggZXJyb3IgcmV0dXJuZWQuCiAgICogQHBhcmFtICB7W3R5cGVdfSAgIGVyciBbZGVzY3JpcHRpb25dCiAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiICBbZGVzY3JpcHRpb25dCiAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICBbZGVzY3JpcHRpb25dCiAgICovCiAgVXBsb2FkVGFzay5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAodXBsb2FkRXJyb3JNZXNzYWdlLCBjYikgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciB1cGxvYWRpbmcgc3VibWlzc2lvbjogIiwgdXBsb2FkRXJyb3JNZXNzYWdlKTsKICAgIHNlbGYuc2V0KCdlcnJvcicsIHVwbG9hZEVycm9yTWVzc2FnZSk7CiAgICBzZWxmLnNhdmVMb2NhbChmdW5jdGlvbiAoZXJyKSB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICAkZmguZm9ybXMubG9nLmUoJ1VwbG9hZCB0YXNrIHNhdmUgZmFpbGVkOiAnICsgZXJyKTsKICAgICAgfQoKICAgICAgc2VsZi5zdWJtaXNzaW9uTW9kZWwoZnVuY3Rpb24gKF9lcnIsIG1vZGVsKSB7CiAgICAgICAgaWYgKF9lcnIpIHsKICAgICAgICAgIGNiKF9lcnIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBtb2RlbC5zZXRVcGxvYWRUYXNrSWQobnVsbCk7CiAgICAgICAgICBtb2RlbC5lcnJvcih1cGxvYWRFcnJvck1lc3NhZ2UsIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgaWYoZXJyKXsKICAgICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHVwZGF0aW5nIHN1Ym1pc3Npb24gbW9kZWwgdG8gZXJyb3Igc3RhdHVzICIsIGVycik7CiAgICAgICAgICAgIH0gCiAgICAgICAgICAgIHNlbGYuY2xlYXJMb2NhbChmdW5jdGlvbihlcnIpewogICAgICAgICAgICAgIGlmKGVycil7CiAgICAgICAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIGNsZWFyaW5nIHVwbG9hZCB0YXNrIGxvY2FsIHN0b3JhZ2U6ICIsIGVycik7CiAgICAgICAgICAgICAgfSAgCiAgICAgICAgICAgICAgY2IoZXJyKTsgICAgCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUuaXNGb3JtQ29tcGxldGVkID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGN1clRhc2sgPSB0aGlzLmdldEN1cnJlbnRUYXNrKCk7CiAgICBpZiAoY3VyVGFzayA9PT0gbnVsbCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9OwogIFVwbG9hZFRhc2sucHJvdG90eXBlLmlzRmlsZUNvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBjdXJUYXNrID0gdGhpcy5nZXRDdXJyZW50VGFzaygpOwogICAgaWYgKGN1clRhc2sgPT09IG51bGwpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSBlbHNlIGlmIChjdXJUYXNrIDwgdGhpcy5nZXQoJ2ZpbGVUYXNrcycsIFtdKS5sZW5ndGgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfTsKICBVcGxvYWRUYXNrLnByb3RvdHlwZS5pc0Vycm9yID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGVycm9yID0gdGhpcy5nZXQoJ2Vycm9yJywgbnVsbCk7CiAgICBpZiAoZXJyb3IpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfTsKICBVcGxvYWRUYXNrLnByb3RvdHlwZS5pc0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldCgnY29tcGxldGVkJywgZmFsc2UpOwogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUuaXNNQmFhU0NvbXBsZXRlZCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGlmICghc2VsZi5pc0ZpbGVDb21wbGV0ZWQoKSkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9IGVsc2UgewogICAgICB2YXIgY3VyVGFzayA9IHNlbGYuZ2V0Q3VycmVudFRhc2soKTsKICAgICAgaWYgKGN1clRhc2sgPiBzZWxmLmdldCgnZmlsZVRhc2tzJywgW10pLmxlbmd0aCkgewogICAgICAgIC8vY2hhbmdlIG9mZnNldCBpZiBjb21wbGV0aW9uIGJpdCBpcyBjaGFuZ2VkCiAgICAgICAgc2VsZi5zZXQoIm1iYWFzQ29tcGxldGVkIiwgdHJ1ZSk7CiAgICAgICAgc2VsZi5zYXZlTG9jYWwoZnVuY3Rpb24oZXJyKXsKICAgICAgICAgIGlmKGVycil7CiAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRXJyb3Igc2F2aW5nIHVwbG9hZCB0YXNrOiAiLCBlcnIpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUuZ2V0UHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgcnRuID0gewogICAgICAgICdmb3JtSlNPTic6IGZhbHNlLAogICAgICAgICdjdXJyZW50RmlsZUluZGV4JzogMCwKICAgICAgICAndG90YWxGaWxlcyc6IHNlbGYuZ2V0KCdmaWxlVGFza3MnKS5sZW5ndGgsCiAgICAgICAgJ3RvdGFsU2l6ZSc6IHNlbGYuZ2V0VG90YWxTaXplKCksCiAgICAgICAgJ3VwbG9hZGVkJzogc2VsZi5nZXRVcGxvYWRlZFNpemUoKSwKICAgICAgICAncmV0cnlBdHRlbXB0cyc6IHNlbGYuZ2V0UmV0cnlBdHRlbXB0cygpLAogICAgICAgICdzdWJtaXNzaW9uVHJhbnNmZXJUeXBlJzogc2VsZi5nZXQoJ3N1Ym1pc3Npb25UcmFuc2ZlclR5cGUnKQogICAgICB9OwogICAgdmFyIHByb2dyZXNzID0gc2VsZi5nZXRDdXJyZW50VGFzaygpOwogICAgaWYgKHByb2dyZXNzID09PSBudWxsKSB7CiAgICAgIHJldHVybiBydG47CiAgICB9IGVsc2UgewogICAgICBydG4uZm9ybUpTT04gPSB0cnVlOwogICAgICBydG4uY3VycmVudEZpbGVJbmRleCA9IHByb2dyZXNzOwogICAgfQogICAgcmV0dXJuIHJ0bjsKICB9OwogIC8qKgogICAqIFJlZnJlc2ggcmVsYXRlZCBmb3JtIGRlZmluaXRpb24uCiAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiIFtkZXNjcmlwdGlvbl0KICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgW2Rlc2NyaXB0aW9uXQogICAqLwogIFVwbG9hZFRhc2sucHJvdG90eXBlLnJlZnJlc2hGb3JtID0gZnVuY3Rpb24gKHVwZGF0ZWRGb3JtLCBjYikgewogICAgdmFyIGZvcm1JZCA9IHRoaXMuZ2V0KCdmb3JtSWQnKTsKICAgIG5ldyBhcHBGb3JtLm1vZGVscy5Gb3JtKHsnZm9ybUlkJzogZm9ybUlkLCAncmF3TW9kZSc6IHRydWUsICdyYXdEYXRhJyA6IHVwZGF0ZWRGb3JtIH0sIGZ1bmN0aW9uIChlcnIsIGZvcm0pIHsKICAgICAgaWYgKGVycikgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZShlcnIpOwogICAgICB9CgogICAgICAkZmguZm9ybXMubG9nLmwoJ3N1Y2Nlc3NmdWxseSB1cGRhdGVkIGZvcm0gdGhlIGZvcm0gd2l0aCBpZCAnICsgdXBkYXRlZEZvcm0uX2lkKTsKICAgICAgY2IoKTsKICAgIH0pOwogIH07CiAgVXBsb2FkVGFzay5wcm90b3R5cGUuc3VibWlzc2lvbk1vZGVsID0gZnVuY3Rpb24gKGNiKSB7CiAgICBhcHBGb3JtLm1vZGVscy5zdWJtaXNzaW9uLmZyb21Mb2NhbCh0aGlzLmdldCgnc3VibWlzc2lvbkxvY2FsSWQnKSwgZnVuY3Rpb24gKGVyciwgc3VibWlzc2lvbikgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5lKCJFcnJvciBnZXR0aW5nIHN1Ym1pc3Npb24gbW9kZWwgZnJvbSBsb2NhbCBtZW1vcnkgIiArIGVycik7CiAgICAgIH0KICAgICAgY2IoZXJyLCBzdWJtaXNzaW9uKTsKICAgIH0pOwogIH07CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLm1vZGVscyB8fCB7fSk7CmFwcEZvcm0ubW9kZWxzID0gZnVuY3Rpb24gKG1vZHVsZSkgewogIHZhciBNb2RlbCA9IGFwcEZvcm0ubW9kZWxzLk1vZGVsOwogIGZ1bmN0aW9uIFRoZW1lKCkgewogICAgTW9kZWwuY2FsbCh0aGlzLCB7CiAgICAgICdfdHlwZSc6ICd0aGVtZScsCiAgICAgICdfbHVkaWQnOiAndGhlbWVfb2JqZWN0JwogICAgfSk7CiAgfQogIFRoZW1lLnByb3RvdHlwZS5nZXRDU1MgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXQoJ2NzcycsICcnKTsKICB9OwogIGFwcEZvcm0udXRpbHMuZXh0ZW5kKFRoZW1lLCBNb2RlbCk7CiAgbW9kdWxlLnRoZW1lID0gbmV3IFRoZW1lKCk7CiAgcmV0dXJuIG1vZHVsZTsKfShhcHBGb3JtLm1vZGVscyB8fCB7fSk7Ci8qKgogKiBBc3luYyBsb2cgbW9kdWxlCiAqIEBwYXJhbSAge1t0eXBlXX0gbW9kdWxlIFtkZXNjcmlwdGlvbl0KICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgW2Rlc2NyaXB0aW9uXQogKi8KYXBwRm9ybS5tb2RlbHMgPSAoZnVuY3Rpb24obW9kdWxlKSB7CiAgdmFyIE1vZGVsID0gYXBwRm9ybS5tb2RlbHMuTW9kZWw7CgogIGZ1bmN0aW9uIExvZygpIHsKICAgIE1vZGVsLmNhbGwodGhpcywgewogICAgICAnX3R5cGUnOiAnbG9nJywKICAgICAgIl9sdWRpZCI6ICJsb2ciCiAgICB9KTsKICAgIHRoaXMuc2V0KCJsb2dzIiwgW10pOwogICAgdGhpcy5pc1dyaXRpbmcgPSBmYWxzZTsKICAgIHRoaXMubW9yZVRvV3JpdGUgPSBmYWxzZTsKICAgIC8vICAgIGFwcEZvcm0uCiAgICAvLyAgICB0aGlzLmxvYWRMb2NhbChmdW5jdGlvbigpIHt9KTsKICB9CiAgYXBwRm9ybS51dGlscy5leHRlbmQoTG9nLCBNb2RlbCk7CgogIExvZy5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uKGxvZ0xldmVsLCBtc2dzKSB7CiAgICAgIGlmICgkZmguZm9ybXMuY29uZmlnLmdldCgibG9nZ2VyIikgPT09IHRydWUpIHsKICAgICAgICB2YXIgbGV2ZWxTdHJpbmcgPSAiIjsKICAgICAgICB2YXIgY3VyTGV2ZWwgPSAkZmguZm9ybXMuY29uZmlnLmdldCgibG9nX2xldmVsIik7CiAgICAgICAgdmFyIGxvZ19sZXZlbHMgPSAkZmguZm9ybXMuY29uZmlnLmdldCgibG9nX2xldmVscyIpOwogICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICBpZiAodHlwZW9mIGxvZ0xldmVsID09PSAic3RyaW5nIikgewogICAgICAgICAgbGV2ZWxTdHJpbmcgPSBsb2dMZXZlbDsKICAgICAgICAgIGxvZ0xldmVsID0gbG9nX2xldmVscy5pbmRleE9mKGxvZ0xldmVsLnRvTG93ZXJDYXNlKCkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBsb2dMZXZlbCA9IDA7CiAgICAgICAgfQoKICAgICAgICBjdXJMZXZlbCA9IGlzTmFOKHBhcnNlSW50KGN1ckxldmVsLCAxMCkpID8gY3VyTGV2ZWwgOiBwYXJzZUludChjdXJMZXZlbCwgMTApOwogICAgICAgIGxvZ0xldmVsID0gaXNOYU4ocGFyc2VJbnQobG9nTGV2ZWwsIDEwKSkgPyBsb2dMZXZlbCA6IHBhcnNlSW50KGxvZ0xldmVsLCAxMCk7CgogICAgICAgIGlmIChjdXJMZXZlbCA8IGxvZ0xldmVsKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7CiAgICAgICAgICB2YXIgbG9ncyA9IHNlbGYuZ2V0KCJsb2dzIik7CiAgICAgICAgICBhcmdzLnNoaWZ0KCk7CiAgICAgICAgICB2YXIgbG9nU3RyID0gIiI7CiAgICAgICAgICB3aGlsZSAoYXJncy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGxvZ1N0ciArPSBKU09OLnN0cmluZ2lmeShhcmdzLnNoaWZ0KCkpICsgIiAiOwogICAgICAgICAgfQogICAgICAgICAgbG9ncy5wdXNoKHNlbGYud3JhcChsb2dTdHIsIGxldmVsU3RyaW5nKSk7CiAgICAgICAgICBpZiAobG9ncy5sZW5ndGggPiAkZmguZm9ybXMuY29uZmlnLmdldCgibG9nX2xpbmVfbGltaXQiKSkgewogICAgICAgICAgICBsb2dzLnNoaWZ0KCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc2VsZi5pc1dyaXRpbmcpIHsKICAgICAgICAgICAgc2VsZi5tb3JlVG9Xcml0ZSA9IHRydWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgX3JlY3Vyc2l2ZUhhbmRsZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBpZiAoc2VsZi5tb3JlVG9Xcml0ZSkgewogICAgICAgICAgICAgICAgc2VsZi5tb3JlVG9Xcml0ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgc2VsZi53cml0ZShfcmVjdXJzaXZlSGFuZGxlcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBzZWxmLndyaXRlKF9yZWN1cnNpdmVIYW5kbGVyKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgTG9nLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24obXNnLCBsZXZlbFN0cmluZykgewogICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7CiAgICB2YXIgZGF0ZVN0ciA9IG5vdy50b0lTT1N0cmluZygpOwogICAgaWYgKHR5cGVvZiBtc2cgPT09ICJvYmplY3QiKSB7CiAgICAgIG1zZyA9IEpTT04uc3RyaW5naWZ5KG1zZyk7CiAgICB9CiAgICB2YXIgZmluYWxNc2cgPSBkYXRlU3RyICsgIiAiICsgbGV2ZWxTdHJpbmcudG9VcHBlckNhc2UoKSArICIgIiArIG1zZzsKICAgIHJldHVybiBmaW5hbE1zZzsKICB9OwogIAogIExvZy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihjYikgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgc2VsZi5pc1dyaXRpbmcgPSB0cnVlOwogICAgc2VsZi5zYXZlTG9jYWwoZnVuY3Rpb24oKSB7CiAgICAgIHNlbGYuaXNXcml0aW5nID0gZmFsc2U7CiAgICAgIGNiKCk7CiAgICB9KTsKICB9OwogIExvZy5wcm90b3R5cGUuZSA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsKICAgIGFyZ3MudW5zaGlmdCgiZXJyb3IiKTsKICAgIHRoaXMuaW5mby5hcHBseSh0aGlzLCBhcmdzKTsKICB9OwogIExvZy5wcm90b3R5cGUudyA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsKICAgIGFyZ3MudW5zaGlmdCgid2FybmluZyIpOwogICAgdGhpcy5pbmZvLmFwcGx5KHRoaXMsIGFyZ3MpOwogIH07CiAgTG9nLnByb3RvdHlwZS5sID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhcmd1bWVudHMsIDApOwogICAgYXJncy51bnNoaWZ0KCJsb2ciKTsKICAgIHRoaXMuaW5mby5hcHBseSh0aGlzLCBhcmdzKTsKICB9OwogIExvZy5wcm90b3R5cGUuZCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsKICAgIGFyZ3MudW5zaGlmdCgiZGVidWciKTsKICAgIHRoaXMuaW5mby5hcHBseSh0aGlzLCBhcmdzKTsKICB9OwogIExvZy5wcm90b3R5cGUuZ2V0TG9ncyA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0KCJsb2dzIik7CiAgfTsKICBMb2cucHJvdG90eXBlLmNsZWFyTG9ncyA9IGZ1bmN0aW9uKGNiKSB7CiAgICB0aGlzLnNldCgibG9ncyIsIFtdKTsKICAgIHRoaXMuc2F2ZUxvY2FsKGZ1bmN0aW9uKCkgewogICAgICBpZiAoY2IpIHsKICAgICAgICBjYigpOwogICAgICB9CiAgICB9KTsKICB9OwogIExvZy5wcm90b3R5cGUuc2VuZExvZ3MgPSBmdW5jdGlvbihjYikgewogICAgdmFyIGVtYWlsID0gJGZoLmZvcm1zLmNvbmZpZy5nZXQoImxvZ19lbWFpbCIpOwogICAgdmFyIGNvbmZpZyA9IGFwcEZvcm0uY29uZmlnLmdldFByb3BzKCk7CiAgICB2YXIgbG9ncyA9IHRoaXMuZ2V0TG9ncygpOwogICAgdmFyIHBhcmFtcyA9IHsKICAgICAgInR5cGUiOiAiZW1haWwiLAogICAgICAidG8iOiBlbWFpbCwKICAgICAgInN1YmplY3QiOiAiQXBwIEZvcm1zIEFwcCBMb2dzIiwKICAgICAgImJvZHkiOiAiQ29uZmlndXJhdGlvbjpcbiIgKyBKU09OLnN0cmluZ2lmeShjb25maWcpICsgIlxuXG5BcHAgTG9nczpcbiIgKyBsb2dzLmpvaW4oIlxuIikKICAgIH07CiAgICBhcHBGb3JtLnV0aWxzLnNlbmQocGFyYW1zLCBjYik7CiAgfTsKICBtb2R1bGUubG9nID0gbmV3IExvZygpOwogIGFwcEZvcm0ubG9nID0gbW9kdWxlLmxvZzsKICByZXR1cm4gbW9kdWxlOwp9KShhcHBGb3JtLm1vZGVscyB8fCB7fSk7Ci8qKgogKiBGZWVkSGVucnkgTGljZW5zZQogKi8KYXBwRm9ybS5hcGkgPSBmdW5jdGlvbiAobW9kdWxlKSB7CiAgbW9kdWxlLmdldEZvcm1zID0gZ2V0Rm9ybXM7CiAgbW9kdWxlLmdldEZvcm0gPSBnZXRGb3JtOwogIG1vZHVsZS5nZXRUaGVtZSA9IGdldFRoZW1lOwogIG1vZHVsZS5zdWJtaXRGb3JtID0gc3VibWl0Rm9ybTsKICBtb2R1bGUuZ2V0U3VibWlzc2lvbnMgPSBnZXRTdWJtaXNzaW9uczsKICBtb2R1bGUuZG93bmxvYWRTdWJtaXNzaW9uID0gZG93bmxvYWRTdWJtaXNzaW9uOwogIG1vZHVsZS5pbml0ID0gYXBwRm9ybS5pbml0OwogIG1vZHVsZS5sb2c9YXBwRm9ybS5tb2RlbHMubG9nOwogIHZhciBfc3VibWlzc2lvbnMgPSBudWxsOwogIHZhciB3YWl0T25TdWJtaXNzaW9uID0ge307CiAgdmFyIGZvcm1Db25maWcgPSBhcHBGb3JtLm1vZGVscy5jb25maWc7CiAgdmFyIGRlZmF1bHRGdW5jdGlvbiA9IGZ1bmN0aW9uKGVycil7CiAgICBlcnIgPSBlcnIgPyBlcnIgOiAiIjsKICAgICRmaC5mb3Jtcy5sb2cudygiRGVmYXVsdCBGdW5jdGlvbiBDYWxsZWQgIiArIGVycik7CiAgfTsKCiAgLyoqCiAgICogR2V0IGFuZCBzZXQgY29uZmlnIHZhbHVlcy4gQ2FuIG9ubHkgc2V0IGEgY29uZmlnIHZhbHVlIGlmIHlvdSBhcmUgYW4gY29uZmlnX2FkbWluX3VzZXIKICAgKi8KICB2YXIgY29uZmlnSW50ZXJmYWNlID0gewogICAgImVkaXRBbGxvd2VkIiA6IGZ1bmN0aW9uKCl7CiAgICAgIHZhciBkZWZhdWx0Q29uZmlnVmFsdWVzID0gZm9ybUNvbmZpZy5nZXQoImRlZmF1bHRDb25maWdWYWx1ZXMiLCB7fSk7CiAgICAgIHJldHVybiBkZWZhdWx0Q29uZmlnVmFsdWVzWyJjb25maWdfYWRtaW5fdXNlciJdID09PSB0cnVlOwogICAgfSwKICAgICJnZXQiIDogZnVuY3Rpb24oa2V5KXsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICBpZihrZXkpewogICAgICAgIHZhciB1c2VyQ29uZmlnVmFsdWVzID0gZm9ybUNvbmZpZy5nZXQoInVzZXJDb25maWdWYWx1ZXMiLCB7fSk7CiAgICAgICAgdmFyIGRlZmF1bHRDb25maWdWYWx1ZXMgPSBmb3JtQ29uZmlnLmdldCgiZGVmYXVsdENvbmZpZ1ZhbHVlcyIsIHt9KTsKCgogICAgICAgIGlmKHVzZXJDb25maWdWYWx1ZXNba2V5XSl7CiAgICAgICAgICByZXR1cm4gdXNlckNvbmZpZ1ZhbHVlc1trZXldOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gZGVmYXVsdENvbmZpZ1ZhbHVlc1trZXldOwogICAgICAgIH0KCiAgICAgIH0KICAgIH0sCiAgICAiZ2V0RGV2aWNlSWQiOiBmdW5jdGlvbigpewogICAgICByZXR1cm4gZm9ybUNvbmZpZy5nZXQoImRldmljZUlkIiwgIk5vdCBTZXQiKTsKICAgIH0sCiAgICAic2V0IiA6IGZ1bmN0aW9uKGtleSwgdmFsKXsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICBpZih0eXBlb2Yoa2V5KSAhPT0gInN0cmluZyIgfHwgdHlwZW9mKHZhbCkgPT09ICJ1bmRlZmluZWQiIHx8IHZhbCA9PT0gbnVsbCl7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZihzZWxmLmVkaXRBbGxvd2VkKCkgfHwga2V5ID09PSAibWF4X3NlbnRfc2F2ZWQiKXsKICAgICAgICB2YXIgdXNlckNvbmZpZyA9IGZvcm1Db25maWcuZ2V0KCJ1c2VyQ29uZmlnVmFsdWVzIiwge30pOwogICAgICAgIHVzZXJDb25maWdba2V5XSA9IHZhbDsKICAgICAgICBmb3JtQ29uZmlnLnNldCgidXNlckNvbmZpZ1ZhbHVlcyIsIHVzZXJDb25maWcpOwogICAgICB9CgogICAgfSwKICAgICJnZXRDb25maWciIDogZnVuY3Rpb24oKXsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgZGVmYXVsdFZhbHVlcyA9IGZvcm1Db25maWcuZ2V0KCJkZWZhdWx0Q29uZmlnVmFsdWVzIiwge30pOwogICAgICB2YXIgdXNlckNvbmZpZ1ZhbHVlcyA9IGZvcm1Db25maWcuZ2V0KCJ1c2VyQ29uZmlnVmFsdWVzIiwge30pOwogICAgICB2YXIgcmV0dXJuT2JqID0ge307CgogICAgICBpZihzZWxmLmVkaXRBbGxvd2VkKCkpewogICAgICAgIGZvcih2YXIgZGVmS2V5IGluIGRlZmF1bHRWYWx1ZXMpewogICAgICAgICAgaWYodXNlckNvbmZpZ1ZhbHVlc1tkZWZLZXldKXsKICAgICAgICAgICAgcmV0dXJuT2JqW2RlZktleV0gPSB1c2VyQ29uZmlnVmFsdWVzW2RlZktleV07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm5PYmpbZGVmS2V5XSA9IGRlZmF1bHRWYWx1ZXNbZGVmS2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldHVybk9iajsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlczsKICAgICAgfQogICAgfSwKICAgICJzYXZlQ29uZmlnIjogZnVuY3Rpb24oY2IpewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIGZvcm1Db25maWcuc2F2ZUxvY2FsKGZ1bmN0aW9uKGVyciwgY29uZmlnTW9kZWwpewogICAgICAgIGlmKGVycil7CiAgICAgICAgICAkZmguZm9ybXMubG9nLmUoIkVycm9yIHNhdmluZyBhIGZvcm0gY29uZmlnOiAiLCBlcnIpOwogICAgICAgIH1lbHNlewogICAgICAgICAgJGZoLmZvcm1zLmxvZy5sKCJGb3JtIGNvbmZpZyBzYXZlZCBzdWNlc3NmdWxseS4iKTsKICAgICAgICB9CgogICAgICAgIGlmKHR5cGVvZihjYikgPT09J2Z1bmN0aW9uJyl7CiAgICAgICAgICBjYigpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgIm9mZmxpbmUiOiBmdW5jdGlvbigpewogICAgICBmb3JtQ29uZmlnLnNldE9mZmxpbmUoKTsKICAgIH0sCiAgICAib25saW5lIjogZnVuY3Rpb24oKXsKICAgICAgZm9ybUNvbmZpZy5zZXRPbmxpbmUoKTsKICAgIH0sCiAgICAibWJhYXNPbmxpbmUiOiBmdW5jdGlvbihjYil7CiAgICAgIGlmKHR5cGVvZihjYikgPT09ICJmdW5jdGlvbiIpewogICAgICAgIGZvcm1Db25maWcub24oJ29ubGluZScsIGNiKTsKICAgICAgfQogICAgfSwKICAgICJtYmFhc09mZmxpbmUiOiBmdW5jdGlvbihjYil7CiAgICAgIGlmKHR5cGVvZihjYikgPT09ICJmdW5jdGlvbiIpewogICAgICAgIGZvcm1Db25maWcub24oJ29mZmxpbmUnLCBjYik7CiAgICAgIH0KICAgIH0sCiAgICAiaXNPbmxpbmUiOiBmdW5jdGlvbigpewogICAgICByZXR1cm4gZm9ybUNvbmZpZy5pc09ubGluZSgpOwogICAgfSwKICAgICJpc1N0dWRpb01vZGUiOiBmdW5jdGlvbigpewogICAgICByZXR1cm4gZm9ybUNvbmZpZy5pc1N0dWRpb01vZGUoKTsKICAgIH0sCiAgICByZWZyZXNoOiBmdW5jdGlvbihjYil7CiAgICAgIGZvcm1Db25maWcucmVmcmVzaCh0cnVlLCBjYik7CiAgICB9CiAgfTsKCiAgbW9kdWxlLmNvbmZpZyA9IGNvbmZpZ0ludGVyZmFjZTsKCgogIC8qKgogICAgICogUmV0cmlldmUgZm9ybXMgbW9kZWwuIEl0IGNvbnRhaW5zIGZvcm1zIGxpc3QuIGNoZWNrIGZvcm1zIG1vZGVsIHVzYWdlCiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICAgcGFyYW1zIHtmcm9tUmVtb3RlOmJvb2xlYW59CiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2IgICAgKGVyciwgZm9ybXNNb2RlbCkKICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICAgW2Rlc2NyaXB0aW9uXQogICAgICovCiAgZnVuY3Rpb24gZ2V0Rm9ybXMocGFyYW1zLCBjYikgewogICAgaWYodHlwZW9mKHBhcmFtcykgPT09ICdmdW5jdGlvbicpewogICAgICBjYiA9IHBhcmFtczsKICAgICAgcGFyYW1zID0ge307CiAgICB9CgogICAgcGFyYW1zID0gcGFyYW1zID8gcGFyYW1zIDoge307CiAgICBjYiA9IGNiID8gY2IgOiBkZWZhdWx0RnVuY3Rpb247CiAgICB2YXIgZnJvbVJlbW90ZSA9IHBhcmFtcy5mcm9tUmVtb3RlOwogICAgaWYgKGZyb21SZW1vdGUgPT09IHVuZGVmaW5lZCkgewogICAgICBmcm9tUmVtb3RlID0gZmFsc2U7CiAgICB9CiAgICBhcHBGb3JtLm1vZGVscy5mb3Jtcy5yZWZyZXNoKGZyb21SZW1vdGUsIGNiKTsKICB9CiAgLyoqCiAgICAgKiBSZXRyaWV2ZSBmb3JtIG1vZGVsIHdpdGggc3BlY2lmaWVkIGZvcm0gaWQuCiAgICAgKiBAcGFyYW0gIHtbdHlwZV19ICAgcGFyYW1zIHtmb3JtSWQ6IHN0cmluZywgZnJvbVJlbW90ZTpib29sZWFufQogICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNiICAgICAoZXJyLCBmb3JtTW9kZWwpCiAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgIFtkZXNjcmlwdGlvbl0KICAgICAqLwogIGZ1bmN0aW9uIGdldEZvcm0ocGFyYW1zLCBjYikgewogICAgaWYodHlwZW9mKHBhcmFtcykgPT09ICdmdW5jdGlvbicpewogICAgICBjYiA9IHBhcmFtczsKICAgICAgcGFyYW1zID0ge307CiAgICB9CgogICAgcGFyYW1zID0gcGFyYW1zID8gcGFyYW1zIDoge307CiAgICBjYiA9IGNiID8gY2IgOiBkZWZhdWx0RnVuY3Rpb247CiAgICBuZXcgYXBwRm9ybS5tb2RlbHMuRm9ybShwYXJhbXMsIGNiKTsKICB9CiAgLyoqCiAgICAgKiBGaW5kIGEgdGhlbWUgZGVmaW5pdGlvbiBmb3IgdGhpcyBhcHAuCiAgICAgKiBAcGFyYW0gcGFyYW1zIHtmcm9tUmVtb3RlOmJvb2xlYW4oZmFsc2UpfQogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2Ige2VyciwgdGhlbWVEYXRhfSAuIHRoZW1lRGF0YSA9IHsianNvbiIgOiB7PHRoZW1lIGpzb24gZGVmaW5pdGlvbj59LCAiY3NzIiA6ICJjc3MiIDogIjxjc3Mgc3R5bGUgZGVmaW5pdGlvbiBmb3IgdGhpcyBhcHA+In0KICAgICAqLwogIGZ1bmN0aW9uIGdldFRoZW1lKHBhcmFtcywgY2IpIHsKICAgIGlmKHR5cGVvZihwYXJhbXMpID09PSAnZnVuY3Rpb24nKXsKICAgICAgY2IgPSBwYXJhbXM7CiAgICAgIHBhcmFtcyA9IHt9OwogICAgfQoKICAgIHBhcmFtcyA9IHBhcmFtcyA/IHBhcmFtcyA6IHt9OwogICAgY2IgPSBjYiA/IGNiIDogZGVmYXVsdEZ1bmN0aW9uOwogICAgdmFyIHRoZW1lID0gYXBwRm9ybS5tb2RlbHMudGhlbWU7CiAgICBpZiAoIXBhcmFtcy5mcm9tUmVtb3RlKSB7CiAgICAgIHBhcmFtcy5mcm9tUmVtb3RlID0gZmFsc2U7CiAgICB9CiAgICB0aGVtZS5yZWZyZXNoKHBhcmFtcy5mcm9tUmVtb3RlLCBmdW5jdGlvbiAoZXJyLCB1cGRhdGVkVGhlbWUpIHsKICAgICAgaWYgKGVycikgewogICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICB9CiAgICAgIGlmICh1cGRhdGVkVGhlbWUgPT09IG51bGwpIHsKICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCdObyB0aGVtZSBkZWZpbmVkIGZvciB0aGlzIGFwcCcpKTsKICAgICAgfQogICAgICBpZiAocGFyYW1zLmNzcyA9PT0gdHJ1ZSkgewogICAgICAgIHJldHVybiBjYihudWxsLCB0aGVtZS5nZXRDU1MoKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGNiKG51bGwsIHRoZW1lKTsKICAgICAgfQogICAgfSk7CiAgfQogIC8qKgogICAgICogR2V0IHN1Ym1pc3Npb25zIHRoYXQgYXJlIHN1Ym1pdHRlZC4gSS5lLiBzdWJtaXR0ZWQgYW5kIGNvbXBsZXRlLgogICAgICogQHBhcmFtIHBhcmFtcyB7fQogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgICAgIChlcnIsIHN1Ym1pdHRlZEFycmF5KQogICAgICovCiAgZnVuY3Rpb24gZ2V0U3VibWlzc2lvbnMocGFyYW1zLCBjYikgewogICAgaWYodHlwZW9mKHBhcmFtcykgPT09ICdmdW5jdGlvbicpewogICAgICBjYiA9IHBhcmFtczsKICAgICAgcGFyYW1zID0ge307CiAgICB9CgogICAgcGFyYW1zID0gcGFyYW1zID8gcGFyYW1zIDoge307CiAgICBjYiA9IGNiID8gY2IgOiBkZWZhdWx0RnVuY3Rpb247CgogICAgLy9HZXR0aW5nIHN1Ym1pc3Npb25zIHRoYXQgaGF2ZSBiZWVuIGNvbXBsZXRlZC4KICAgIHZhciBzdWJtaXNzaW9ucyA9IGFwcEZvcm0ubW9kZWxzLnN1Ym1pc3Npb25zOwogICAgaWYgKF9zdWJtaXNzaW9ucyA9PT0gbnVsbCkgewogICAgICBhcHBGb3JtLm1vZGVscy5zdWJtaXNzaW9ucy5sb2FkTG9jYWwoZnVuY3Rpb24gKGVycikgewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZShlcnIpOwogICAgICAgICAgY2IoZXJyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3N1Ym1pc3Npb25zID0gYXBwRm9ybS5tb2RlbHMuc3VibWlzc2lvbnM7CiAgICAgICAgICBjYihudWxsLCBfc3VibWlzc2lvbnMpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBjYihudWxsLCBfc3VibWlzc2lvbnMpOwogICAgfQogIH0KICBmdW5jdGlvbiBzdWJtaXRGb3JtKHN1Ym1pc3Npb24sIGNiKSB7CiAgICBpZiAoc3VibWlzc2lvbikgewogICAgICBzdWJtaXNzaW9uLnN1Ym1pdChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgaWYgKGVycil7CiAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICB9CgogICAgICAgIC8vU3VibWlzc2lvbiBmaW5pc2hlZCBhbmQgdmFsaWRhdGVkLiBOb3cgdXBsb2FkIHRoZSBmb3JtCiAgICAgICAgc3VibWlzc2lvbi51cGxvYWQoY2IpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBjYignSW52YWxpZCBzdWJtaXNzaW9uIG9iamVjdC4nKTsKICAgIH0KICB9CgogIC8qCiAgICAgKiBGdW5jdGlvbiBmb3IgZG93bmxvYWRpbmcgYSBzdWJtaXNzaW9uIHN0b3JlZCBvbiB0aGUgcmVtb3RlIHNlcnZlci4KICAgICAqCiAgICAgKiBAcGFyYW0gcGFyYW1zIHt9CiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiAoZXJyLCBkb3dubG9hZFRhc2spCiAgICAgKiAqLwogICAgZnVuY3Rpb24gZG93bmxvYWRTdWJtaXNzaW9uKHBhcmFtcywgY2IpIHsKICAgICAgcGFyYW1zID0gcGFyYW1zID8gcGFyYW1zIDoge307CiAgICAgIC8vY2IgPSBjYiA/IGNiIDogZGVmYXVsdEZ1bmN0aW9uOwogICAgICB2YXIgc3VibWlzc2lvblRvRG93bmxvYWQgPSBudWxsOwoKICAgICAgaWYodHlwZW9mKGNiKSAhPT0gJ2Z1bmN0aW9uJyl7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGZpbmlzaFN1Ym1pc3Npb25Eb3dubG9hZChlcnIpIHsKICAgICAgICBlcnIgPSB0eXBlb2YoZXJyKSA9PT0gInN0cmluZyIgJiYgZXJyLmxlbmd0aCA9PT0gMjQgPyBudWxsIDogZXJyOwogICAgICAgICRmaC5mb3Jtcy5sb2cuZCgiZmluaXNoU3VibWlzc2lvbkRvd25sb2FkICIsIGVyciwgc3VibWlzc2lvblRvRG93bmxvYWQpOwogICAgICAgIHZhciBzdWJDQklkID0gc3VibWlzc2lvblRvRG93bmxvYWQuZ2V0UmVtb3RlU3VibWlzc2lvbklkKCk7CiAgICAgICAgdmFyIHN1YnNDYnNXYXRpdGluZyA9IHdhaXRPblN1Ym1pc3Npb25bc3ViQ0JJZF07CiAgICAgICAgaWYgKHN1YnNDYnNXYXRpdGluZykgewogICAgICAgICAgdmFyIHN1YkNCID0gc3Vic0Nic1dhdGl0aW5nLnBvcCgpOwogICAgICAgICAgd2hpbGUgKHR5cGVvZihzdWJDQikgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgc3ViQ0IoZXJyLCBzdWJtaXNzaW9uVG9Eb3dubG9hZCk7CiAgICAgICAgICAgIHN1YkNCID0gc3Vic0Nic1dhdGl0aW5nLnBvcCgpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChzdWJtaXNzaW9uVG9Eb3dubG9hZC5jbGVhckV2ZW50cykgewogICAgICAgICAgICBzdWJtaXNzaW9uVG9Eb3dubG9hZC5jbGVhckV2ZW50cygpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdWJtaXNzaW9uVG9Eb3dubG9hZC5jbGVhckV2ZW50cygpOwogICAgICAgICAgcmV0dXJuIGNiKGVyciwgc3VibWlzc2lvblRvRG93bmxvYWQpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgJGZoLmZvcm1zLmxvZy5kKCJkb3dubG9hZFN1Ym1pc3Npb24gY2FsbGVkIiwgcGFyYW1zKTsKCiAgICAgIGlmIChwYXJhbXMuc3VibWlzc2lvbklkKSB7CiAgICAgICAgJGZoLmZvcm1zLmxvZy5kKCJkb3dubG9hZFN1Ym1pc3Npb24gU3VibWlzc2lvbklkIGV4aXN0cyIgKyBwYXJhbXMuc3VibWlzc2lvbklkKTsKICAgICAgICB2YXIgc3VibWlzc2lvbkFscmVhZHlTYXZlZCA9IGFwcEZvcm0ubW9kZWxzLnN1Ym1pc3Npb25zLmZpbmRNZXRhQnlSZW1vdGVJZChwYXJhbXMuc3VibWlzc2lvbklkKTsKCiAgICAgICAgaWYgKHN1Ym1pc3Npb25BbHJlYWR5U2F2ZWQgPT09IG51bGwpIHsKCiAgICAgICAgICAkZmguZm9ybXMubG9nLmQoImRvd25sb2FkU3VibWlzc2lvbiBzdWJtaXNzaW9uIGRvZXMgbm90IGV4aXN0LCBkb3dubG9hZGluZyIsIHBhcmFtcyk7CiAgICAgICAgICBzdWJtaXNzaW9uVG9Eb3dubG9hZCA9IG5ldyBhcHBGb3JtLm1vZGVscy5zdWJtaXNzaW9uLm5ld0luc3RhbmNlKG51bGwsIHsKICAgICAgICAgICAgc3VibWlzc2lvbklkOiBwYXJhbXMuc3VibWlzc2lvbklkCiAgICAgICAgICB9KTsKCiAgICAgICAgICBzdWJtaXNzaW9uVG9Eb3dubG9hZC5vbignZXJyb3InLCBmaW5pc2hTdWJtaXNzaW9uRG93bmxvYWQpOwoKICAgICAgICAgIHN1Ym1pc3Npb25Ub0Rvd25sb2FkLm9uKCdkb3dubG9hZGVkJywgZmluaXNoU3VibWlzc2lvbkRvd25sb2FkKTsKCiAgICAgICAgICBpZiAodHlwZW9mKHBhcmFtcy51cGRhdGVGdW5jdGlvbikgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgc3VibWlzc2lvblRvRG93bmxvYWQub24oJ3Byb2dyZXNzJywgcGFyYW1zLnVwZGF0ZUZ1bmN0aW9uKTsKICAgICAgICAgIH0KCiAgICAgICAgICAKICAgICAgICAgIGlmKHR5cGVvZihjYikgPT09ICJmdW5jdGlvbiIpewogICAgICAgICAgICBpZih3YWl0T25TdWJtaXNzaW9uW3BhcmFtcy5zdWJtaXNzaW9uSWRdKXsKICAgICAgICAgICAgICB3YWl0T25TdWJtaXNzaW9uW3BhcmFtcy5zdWJtaXNzaW9uSWRdLnB1c2goY2IpOyAgCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgIHdhaXRPblN1Ym1pc3Npb25bcGFyYW1zLnN1Ym1pc3Npb25JZF0gPSBbXTsKICAgICAgICAgICAgICAgd2FpdE9uU3VibWlzc2lvbltwYXJhbXMuc3VibWlzc2lvbklkXS5wdXNoKGNiKTsgIAogICAgICAgICAgICB9ICAKICAgICAgICAgIH0KCiAgICAgICAgICBzdWJtaXNzaW9uVG9Eb3dubG9hZC5kb3dubG9hZChmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiRXJyb3IgcXVldWVpbmcgc3VibWlzc2lvbiBmb3IgZG93bmxvYWQgIiArIGVycik7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAkZmguZm9ybXMubG9nLmQoImRvd25sb2FkU3VibWlzc2lvbiBzdWJtaXNzaW9uIGV4aXN0cyIsIHBhcmFtcyk7CgogICAgICAgICAgLy9TdWJtaXNzaW9uIHdhcyBjcmVhdGVkLCBidXQgbm90IGZpbmlzaGVkIGRvd25sb2FkaW5nCiAgICAgICAgICBpZiAoc3VibWlzc2lvbkFscmVhZHlTYXZlZC5zdGF0dXMgIT09ICJkb3dubG9hZGVkIiAmJiBzdWJtaXNzaW9uQWxyZWFkeVNhdmVkLnN0YXR1cyAhPT0gInN1Ym1pdHRlZCIpIHsKICAgICAgICAgICAgaWYodHlwZW9mKGNiKSA9PT0gImZ1bmN0aW9uIil7CiAgICAgICAgICAgICAgaWYod2FpdE9uU3VibWlzc2lvbltwYXJhbXMuc3VibWlzc2lvbklkXSl7CiAgICAgICAgICAgICAgICB3YWl0T25TdWJtaXNzaW9uW3BhcmFtcy5zdWJtaXNzaW9uSWRdLnB1c2goY2IpOyAgCiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICB3YWl0T25TdWJtaXNzaW9uW3BhcmFtcy5zdWJtaXNzaW9uSWRdID0gW107CiAgICAgICAgICAgICAgICAgd2FpdE9uU3VibWlzc2lvbltwYXJhbXMuc3VibWlzc2lvbklkXS5wdXNoKGNiKTsgIAogICAgICAgICAgICAgIH0gIAogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBhcHBGb3JtLm1vZGVscy5zdWJtaXNzaW9ucy5nZXRTdWJtaXNzaW9uQnlNZXRhKHN1Ym1pc3Npb25BbHJlYWR5U2F2ZWQsIGNiKTsKICAgICAgICAgIH0KCiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgICRmaC5mb3Jtcy5sb2cuZSgiTm8gc3VibWlzc2lvbklkIHBhc3NlZCB0byBkb3dubG9hZCBhIHN1Ym1pc3Npb24iKTsKICAgICAgICByZXR1cm4gY2IoIk5vIHN1Ym1pc3Npb25JZCBwYXNzZWQgdG8gZG93bmxvYWQgYSBzdWJtaXNzaW9uIik7CiAgICAgIH0KICAgIH0KICByZXR1cm4gbW9kdWxlOwp9KGFwcEZvcm0uYXBpIHx8IHt9KTsKLy9tb2NrdXAgJGZoIGFwaXMgZm9yIEFkZG9ucy4KaWYgKHR5cGVvZiAkZmggPT09ICd1bmRlZmluZWQnKSB7CiAgJGZoID0ge307Cn0KaWYgKCRmaC5mb3JtcyA9PT0gdW5kZWZpbmVkKSB7CiAgJGZoLmZvcm1zID0gYXBwRm9ybS5hcGk7Cn0KLyohIGZoLWZvcm1zIC0gdjAuMTAuMCAtICAqLwovKiEgYXN5bmMgLSB2MC4yLjkgLSAgKi8KLyohIDIwMTQtMTEtMDMgKi8KLyogVGhpcyBpcyB0aGUgcHJlZml4IGZpbGUgKi8KaWYoYXBwRm9ybSl7CiAgYXBwRm9ybS5SdWxlc0VuZ2luZT1ydWxlc0VuZ2luZTsKfQoKZnVuY3Rpb24gcnVsZXNFbmdpbmUgKGZvcm1EZWYpIHsKICB2YXIgZGVmaW5lID0ge307CiAgdmFyIG1vZHVsZSA9IHtleHBvcnRzOnt9fTsgLy8gY3JlYXRlIGEgbW9kdWxlLmV4cG9ydHMgLSBhc3luYyB3aWxsIGxvYWQgaW50byBpdAogIC8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi8KICAvKiBFbmQgb2YgcHJlZml4IGZpbGUgKi8KCiAgLypnbG9iYWwgc2V0SW1tZWRpYXRlOiBmYWxzZSwgc2V0VGltZW91dDogZmFsc2UsIGNvbnNvbGU6IGZhbHNlICovCiAgKGZ1bmN0aW9uICgpIHsKCiAgICB2YXIgYXN5bmMgPSB7fTsKCiAgICAvLyBnbG9iYWwgb24gdGhlIHNlcnZlciwgd2luZG93IGluIHRoZSBicm93c2VyCiAgICB2YXIgcm9vdCwgcHJldmlvdXNfYXN5bmM7CgogICAgcm9vdCA9IHRoaXM7CiAgICBpZiAocm9vdCAhPSBudWxsKSB7CiAgICAgIHByZXZpb3VzX2FzeW5jID0gcm9vdC5hc3luYzsKICAgIH0KCiAgICBhc3luYy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgewogICAgICByb290LmFzeW5jID0gcHJldmlvdXNfYXN5bmM7CiAgICAgIHJldHVybiBhc3luYzsKICAgIH07CgogICAgZnVuY3Rpb24gb25seV9vbmNlKGZuKSB7CiAgICAgIHZhciBjYWxsZWQgPSBmYWxzZTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChjYWxsZWQpIHRocm93IG5ldyBFcnJvcigiQ2FsbGJhY2sgd2FzIGFscmVhZHkgY2FsbGVkLiIpOwogICAgICAgIGNhbGxlZCA9IHRydWU7CiAgICAgICAgZm4uYXBwbHkocm9vdCwgYXJndW1lbnRzKTsKICAgICAgfQogICAgfQoKICAgIC8vLy8gY3Jvc3MtYnJvd3NlciBjb21wYXRpYmxpdHkgZnVuY3Rpb25zIC8vLy8KCiAgICB2YXIgX2VhY2ggPSBmdW5jdGlvbiAoYXJyLCBpdGVyYXRvcikgewogICAgICBpZiAoYXJyLmZvckVhY2gpIHsKICAgICAgICByZXR1cm4gYXJyLmZvckVhY2goaXRlcmF0b3IpOwogICAgICB9CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgaXRlcmF0b3IoYXJyW2ldLCBpLCBhcnIpOwogICAgICB9CiAgICB9OwoKICAgIHZhciBfbWFwID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IpIHsKICAgICAgaWYgKGFyci5tYXApIHsKICAgICAgICByZXR1cm4gYXJyLm1hcChpdGVyYXRvcik7CiAgICAgIH0KICAgICAgdmFyIHJlc3VsdHMgPSBbXTsKICAgICAgX2VhY2goYXJyLCBmdW5jdGlvbiAoeCwgaSwgYSkgewogICAgICAgIHJlc3VsdHMucHVzaChpdGVyYXRvcih4LCBpLCBhKSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0czsKICAgIH07CgogICAgdmFyIF9yZWR1Y2UgPSBmdW5jdGlvbiAoYXJyLCBpdGVyYXRvciwgbWVtbykgewogICAgICBpZiAoYXJyLnJlZHVjZSkgewogICAgICAgIHJldHVybiBhcnIucmVkdWNlKGl0ZXJhdG9yLCBtZW1vKTsKICAgICAgfQogICAgICBfZWFjaChhcnIsIGZ1bmN0aW9uICh4LCBpLCBhKSB7CiAgICAgICAgbWVtbyA9IGl0ZXJhdG9yKG1lbW8sIHgsIGksIGEpOwogICAgICB9KTsKICAgICAgcmV0dXJuIG1lbW87CiAgICB9OwoKICAgIHZhciBfa2V5cyA9IGZ1bmN0aW9uIChvYmopIHsKICAgICAgaWYgKE9iamVjdC5rZXlzKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaik7CiAgICAgIH0KICAgICAgdmFyIGtleXMgPSBbXTsKICAgICAgZm9yICh2YXIgayBpbiBvYmopIHsKICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7CiAgICAgICAgICBrZXlzLnB1c2goayk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBrZXlzOwogICAgfTsKCiAgICAvLy8vIGV4cG9ydGVkIGFzeW5jIG1vZHVsZSBmdW5jdGlvbnMgLy8vLwoKICAgIC8vLy8gbmV4dFRpY2sgaW1wbGVtZW50YXRpb24gd2l0aCBicm93c2VyLWNvbXBhdGlibGUgZmFsbGJhY2sgLy8vLwogICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fCAhKHByb2Nlc3MubmV4dFRpY2spKSB7CiAgICAgIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgYXN5bmMubmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHsKICAgICAgICAgIC8vIG5vdCBhIGRpcmVjdCBhbGlhcyBmb3IgSUUxMCBjb21wYXRpYmlsaXR5CiAgICAgICAgICBzZXRJbW1lZGlhdGUoZm4pOwogICAgICAgIH07CiAgICAgICAgYXN5bmMuc2V0SW1tZWRpYXRlID0gYXN5bmMubmV4dFRpY2s7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgYXN5bmMubmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHsKICAgICAgICAgIHNldFRpbWVvdXQoZm4sIDApOwogICAgICAgIH07CiAgICAgICAgYXN5bmMuc2V0SW1tZWRpYXRlID0gYXN5bmMubmV4dFRpY2s7CiAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICBhc3luYy5uZXh0VGljayA9IHByb2Nlc3MubmV4dFRpY2s7CiAgICAgIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIGFzeW5jLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBhc3luYy5zZXRJbW1lZGlhdGUgPSBhc3luYy5uZXh0VGljazsKICAgICAgfQogICAgfQoKICAgIGFzeW5jLmVhY2ggPSBmdW5jdGlvbiAoYXJyLCBpdGVyYXRvciwgY2FsbGJhY2spIHsKICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTsKICAgICAgaWYgKCFhcnIubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7CiAgICAgIH0KICAgICAgdmFyIGNvbXBsZXRlZCA9IDA7CiAgICAgIF9lYWNoKGFyciwgZnVuY3Rpb24gKHgpIHsKICAgICAgICBpdGVyYXRvcih4LCBvbmx5X29uY2UoZnVuY3Rpb24gKGVycikgewogICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICBjYWxsYmFjayhlcnIpOwogICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGNvbXBsZXRlZCArPSAxOwogICAgICAgICAgICBpZiAoY29tcGxldGVkID49IGFyci5sZW5ndGgpIHsKICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pKTsKICAgICAgfSk7CiAgICB9OwogICAgYXN5bmMuZm9yRWFjaCA9IGFzeW5jLmVhY2g7CgogICAgYXN5bmMuZWFjaFNlcmllcyA9IGZ1bmN0aW9uIChhcnIsIGl0ZXJhdG9yLCBjYWxsYmFjaykgewogICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9OwogICAgICBpZiAoIWFyci5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gY2FsbGJhY2soKTsKICAgICAgfQogICAgICB2YXIgY29tcGxldGVkID0gMDsKICAgICAgdmFyIGl0ZXJhdGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaXRlcmF0b3IoYXJyW2NvbXBsZXRlZF0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgY2FsbGJhY2soZXJyKTsKICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICBjb21wbGV0ZWQgKz0gMTsKICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA+PSBhcnIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgaXRlcmF0ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH07CiAgICAgIGl0ZXJhdGUoKTsKICAgIH07CiAgICBhc3luYy5mb3JFYWNoU2VyaWVzID0gYXN5bmMuZWFjaFNlcmllczsKCiAgICBhc3luYy5lYWNoTGltaXQgPSBmdW5jdGlvbiAoYXJyLCBsaW1pdCwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBmbiA9IF9lYWNoTGltaXQobGltaXQpOwogICAgICBmbi5hcHBseShudWxsLCBbYXJyLCBpdGVyYXRvciwgY2FsbGJhY2tdKTsKICAgIH07CiAgICBhc3luYy5mb3JFYWNoTGltaXQgPSBhc3luYy5lYWNoTGltaXQ7CgogICAgdmFyIF9lYWNoTGltaXQgPSBmdW5jdGlvbiAobGltaXQpIHsKCiAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJyLCBpdGVyYXRvciwgY2FsbGJhY2spIHsKICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9OwogICAgICAgIGlmICghYXJyLmxlbmd0aCB8fCBsaW1pdCA8PSAwKSB7CiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTsKICAgICAgICB9CiAgICAgICAgdmFyIGNvbXBsZXRlZCA9IDA7CiAgICAgICAgdmFyIHN0YXJ0ZWQgPSAwOwogICAgICAgIHZhciBydW5uaW5nID0gMDsKCiAgICAgICAgKGZ1bmN0aW9uIHJlcGxlbmlzaCAoKSB7CiAgICAgICAgICBpZiAoY29tcGxldGVkID49IGFyci5sZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7CiAgICAgICAgICB9CgogICAgICAgICAgd2hpbGUgKHJ1bm5pbmcgPCBsaW1pdCAmJiBzdGFydGVkIDwgYXJyLmxlbmd0aCkgewogICAgICAgICAgICBzdGFydGVkICs9IDE7CiAgICAgICAgICAgIHJ1bm5pbmcgKz0gMTsKICAgICAgICAgICAgaXRlcmF0b3IoYXJyW3N0YXJ0ZWQgLSAxXSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7CiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbXBsZXRlZCArPSAxOwogICAgICAgICAgICAgICAgcnVubmluZyAtPSAxOwogICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA+PSBhcnIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgcmVwbGVuaXNoKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KSgpOwogICAgICB9OwogICAgfTsKCgogICAgdmFyIGRvUGFyYWxsZWwgPSBmdW5jdGlvbiAoZm4pIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIFthc3luYy5lYWNoXS5jb25jYXQoYXJncykpOwogICAgICB9OwogICAgfTsKICAgIHZhciBkb1BhcmFsbGVsTGltaXQgPSBmdW5jdGlvbihsaW1pdCwgZm4pIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIFtfZWFjaExpbWl0KGxpbWl0KV0uY29uY2F0KGFyZ3MpKTsKICAgICAgfTsKICAgIH07CiAgICB2YXIgZG9TZXJpZXMgPSBmdW5jdGlvbiAoZm4pIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIFthc3luYy5lYWNoU2VyaWVzXS5jb25jYXQoYXJncykpOwogICAgICB9OwogICAgfTsKCgogICAgdmFyIF9hc3luY01hcCA9IGZ1bmN0aW9uIChlYWNoZm4sIGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7CiAgICAgIHZhciByZXN1bHRzID0gW107CiAgICAgIGFyciA9IF9tYXAoYXJyLCBmdW5jdGlvbiAoeCwgaSkgewogICAgICAgIHJldHVybiB7aW5kZXg6IGksIHZhbHVlOiB4fTsKICAgICAgfSk7CiAgICAgIGVhY2hmbihhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykgewogICAgICAgIGl0ZXJhdG9yKHgudmFsdWUsIGZ1bmN0aW9uIChlcnIsIHYpIHsKICAgICAgICAgIHJlc3VsdHNbeC5pbmRleF0gPSB2OwogICAgICAgICAgY2FsbGJhY2soZXJyKTsKICAgICAgICB9KTsKICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0cyk7CiAgICAgIH0pOwogICAgfTsKICAgIGFzeW5jLm1hcCA9IGRvUGFyYWxsZWwoX2FzeW5jTWFwKTsKICAgIGFzeW5jLm1hcFNlcmllcyA9IGRvU2VyaWVzKF9hc3luY01hcCk7CiAgICBhc3luYy5tYXBMaW1pdCA9IGZ1bmN0aW9uIChhcnIsIGxpbWl0LCBpdGVyYXRvciwgY2FsbGJhY2spIHsKICAgICAgcmV0dXJuIF9tYXBMaW1pdChsaW1pdCkoYXJyLCBpdGVyYXRvciwgY2FsbGJhY2spOwogICAgfTsKCiAgICB2YXIgX21hcExpbWl0ID0gZnVuY3Rpb24obGltaXQpIHsKICAgICAgcmV0dXJuIGRvUGFyYWxsZWxMaW1pdChsaW1pdCwgX2FzeW5jTWFwKTsKICAgIH07CgogICAgLy8gcmVkdWNlIG9ubHkgaGFzIGEgc2VyaWVzIHZlcnNpb24sIGFzIGRvaW5nIHJlZHVjZSBpbiBwYXJhbGxlbCB3b24ndAogICAgLy8gd29yayBpbiBtYW55IHNpdHVhdGlvbnMuCiAgICBhc3luYy5yZWR1Y2UgPSBmdW5jdGlvbiAoYXJyLCBtZW1vLCBpdGVyYXRvciwgY2FsbGJhY2spIHsKICAgICAgYXN5bmMuZWFjaFNlcmllcyhhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykgewogICAgICAgIGl0ZXJhdG9yKG1lbW8sIHgsIGZ1bmN0aW9uIChlcnIsIHYpIHsKICAgICAgICAgIG1lbW8gPSB2OwogICAgICAgICAgY2FsbGJhY2soZXJyKTsKICAgICAgICB9KTsKICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgIGNhbGxiYWNrKGVyciwgbWVtbyk7CiAgICAgIH0pOwogICAgfTsKICAgIC8vIGluamVjdCBhbGlhcwogICAgYXN5bmMuaW5qZWN0ID0gYXN5bmMucmVkdWNlOwogICAgLy8gZm9sZGwgYWxpYXMKICAgIGFzeW5jLmZvbGRsID0gYXN5bmMucmVkdWNlOwoKICAgIGFzeW5jLnJlZHVjZVJpZ2h0ID0gZnVuY3Rpb24gKGFyciwgbWVtbywgaXRlcmF0b3IsIGNhbGxiYWNrKSB7CiAgICAgIHZhciByZXZlcnNlZCA9IF9tYXAoYXJyLCBmdW5jdGlvbiAoeCkgewogICAgICAgIHJldHVybiB4OwogICAgICB9KS5yZXZlcnNlKCk7CiAgICAgIGFzeW5jLnJlZHVjZShyZXZlcnNlZCwgbWVtbywgaXRlcmF0b3IsIGNhbGxiYWNrKTsKICAgIH07CiAgICAvLyBmb2xkciBhbGlhcwogICAgYXN5bmMuZm9sZHIgPSBhc3luYy5yZWR1Y2VSaWdodDsKCiAgICB2YXIgX2ZpbHRlciA9IGZ1bmN0aW9uIChlYWNoZm4sIGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7CiAgICAgIHZhciByZXN1bHRzID0gW107CiAgICAgIGFyciA9IF9tYXAoYXJyLCBmdW5jdGlvbiAoeCwgaSkgewogICAgICAgIHJldHVybiB7aW5kZXg6IGksIHZhbHVlOiB4fTsKICAgICAgfSk7CiAgICAgIGVhY2hmbihhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykgewogICAgICAgIGl0ZXJhdG9yKHgudmFsdWUsIGZ1bmN0aW9uICh2KSB7CiAgICAgICAgICBpZiAodikgewogICAgICAgICAgICByZXN1bHRzLnB1c2goeCk7CiAgICAgICAgICB9CiAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgIH0pOwogICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgY2FsbGJhY2soX21hcChyZXN1bHRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDsKICAgICAgICB9KSwgZnVuY3Rpb24gKHgpIHsKICAgICAgICAgIHJldHVybiB4LnZhbHVlOwogICAgICAgIH0pKTsKICAgICAgfSk7CiAgICB9OwogICAgYXN5bmMuZmlsdGVyID0gZG9QYXJhbGxlbChfZmlsdGVyKTsKICAgIGFzeW5jLmZpbHRlclNlcmllcyA9IGRvU2VyaWVzKF9maWx0ZXIpOwogICAgLy8gc2VsZWN0IGFsaWFzCiAgICBhc3luYy5zZWxlY3QgPSBhc3luYy5maWx0ZXI7CiAgICBhc3luYy5zZWxlY3RTZXJpZXMgPSBhc3luYy5maWx0ZXJTZXJpZXM7CgogICAgdmFyIF9yZWplY3QgPSBmdW5jdGlvbiAoZWFjaGZuLCBhcnIsIGl0ZXJhdG9yLCBjYWxsYmFjaykgewogICAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgICBhcnIgPSBfbWFwKGFyciwgZnVuY3Rpb24gKHgsIGkpIHsKICAgICAgICByZXR1cm4ge2luZGV4OiBpLCB2YWx1ZTogeH07CiAgICAgIH0pOwogICAgICBlYWNoZm4oYXJyLCBmdW5jdGlvbiAoeCwgY2FsbGJhY2spIHsKICAgICAgICBpdGVyYXRvcih4LnZhbHVlLCBmdW5jdGlvbiAodikgewogICAgICAgICAgaWYgKCF2KSB7CiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh4KTsKICAgICAgICAgIH0KICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgfSk7CiAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBjYWxsYmFjayhfbWFwKHJlc3VsdHMuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4OwogICAgICAgIH0pLCBmdW5jdGlvbiAoeCkgewogICAgICAgICAgcmV0dXJuIHgudmFsdWU7CiAgICAgICAgfSkpOwogICAgICB9KTsKICAgIH07CiAgICBhc3luYy5yZWplY3QgPSBkb1BhcmFsbGVsKF9yZWplY3QpOwogICAgYXN5bmMucmVqZWN0U2VyaWVzID0gZG9TZXJpZXMoX3JlamVjdCk7CgogICAgdmFyIF9kZXRlY3QgPSBmdW5jdGlvbiAoZWFjaGZuLCBhcnIsIGl0ZXJhdG9yLCBtYWluX2NhbGxiYWNrKSB7CiAgICAgIGVhY2hmbihhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykgewogICAgICAgIGl0ZXJhdG9yKHgsIGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgICAgbWFpbl9jYWxsYmFjayh4KTsKICAgICAgICAgICAgbWFpbl9jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBtYWluX2NhbGxiYWNrKCk7CiAgICAgIH0pOwogICAgfTsKICAgIGFzeW5jLmRldGVjdCA9IGRvUGFyYWxsZWwoX2RldGVjdCk7CiAgICBhc3luYy5kZXRlY3RTZXJpZXMgPSBkb1NlcmllcyhfZGV0ZWN0KTsKCiAgICBhc3luYy5zb21lID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIG1haW5fY2FsbGJhY2spIHsKICAgICAgYXN5bmMuZWFjaChhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykgewogICAgICAgIGl0ZXJhdG9yKHgsIGZ1bmN0aW9uICh2KSB7CiAgICAgICAgICBpZiAodikgewogICAgICAgICAgICBtYWluX2NhbGxiYWNrKHRydWUpOwogICAgICAgICAgICBtYWluX2NhbGxiYWNrID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgICB9CiAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgIH0pOwogICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgbWFpbl9jYWxsYmFjayhmYWxzZSk7CiAgICAgIH0pOwogICAgfTsKICAgIC8vIGFueSBhbGlhcwogICAgYXN5bmMuYW55ID0gYXN5bmMuc29tZTsKCiAgICBhc3luYy5ldmVyeSA9IGZ1bmN0aW9uIChhcnIsIGl0ZXJhdG9yLCBtYWluX2NhbGxiYWNrKSB7CiAgICAgIGFzeW5jLmVhY2goYXJyLCBmdW5jdGlvbiAoeCwgY2FsbGJhY2spIHsKICAgICAgICBpdGVyYXRvcih4LCBmdW5jdGlvbiAodikgewogICAgICAgICAgaWYgKCF2KSB7CiAgICAgICAgICAgIG1haW5fY2FsbGJhY2soZmFsc2UpOwogICAgICAgICAgICBtYWluX2NhbGxiYWNrID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgICB9CiAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgIH0pOwogICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgbWFpbl9jYWxsYmFjayh0cnVlKTsKICAgICAgfSk7CiAgICB9OwogICAgLy8gYWxsIGFsaWFzCiAgICBhc3luYy5hbGwgPSBhc3luYy5ldmVyeTsKCiAgICBhc3luYy5zb3J0QnkgPSBmdW5jdGlvbiAoYXJyLCBpdGVyYXRvciwgY2FsbGJhY2spIHsKICAgICAgYXN5bmMubWFwKGFyciwgZnVuY3Rpb24gKHgsIGNhbGxiYWNrKSB7CiAgICAgICAgaXRlcmF0b3IoeCwgZnVuY3Rpb24gKGVyciwgY3JpdGVyaWEpIHsKICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgY2FsbGJhY2soZXJyKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7dmFsdWU6IHgsIGNyaXRlcmlhOiBjcml0ZXJpYX0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7CiAgICAgICAgICAgIHZhciBhID0gbGVmdC5jcml0ZXJpYSwgYiA9IHJpZ2h0LmNyaXRlcmlhOwogICAgICAgICAgICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7CiAgICAgICAgICB9OwogICAgICAgICAgY2FsbGJhY2sobnVsbCwgX21hcChyZXN1bHRzLnNvcnQoZm4pLCBmdW5jdGlvbiAoeCkgewogICAgICAgICAgICByZXR1cm4geC52YWx1ZTsKICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKCiAgICBhc3luYy5hdXRvID0gZnVuY3Rpb24gKHRhc2tzLCBjYWxsYmFjaykgewogICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9OwogICAgICB2YXIga2V5cyA9IF9rZXlzKHRhc2tzKTsKICAgICAgaWYgKCFrZXlzLmxlbmd0aCkgewogICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTsKICAgICAgfQoKICAgICAgdmFyIHJlc3VsdHMgPSB7fTsKCiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTsKICAgICAgdmFyIGFkZExpc3RlbmVyID0gZnVuY3Rpb24gKGZuKSB7CiAgICAgICAgbGlzdGVuZXJzLnVuc2hpZnQoZm4pOwogICAgICB9OwogICAgICB2YXIgcmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiAoZm4pIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXSA9PT0gZm4pIHsKICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgICAgdmFyIHRhc2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBfZWFjaChsaXN0ZW5lcnMuc2xpY2UoMCksIGZ1bmN0aW9uIChmbikgewogICAgICAgICAgZm4oKTsKICAgICAgICB9KTsKICAgICAgfTsKCiAgICAgIGFkZExpc3RlbmVyKGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoX2tleXMocmVzdWx0cykubGVuZ3RoID09PSBrZXlzLmxlbmd0aCkgewogICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7CiAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgIH0KICAgICAgfSk7CgogICAgICBfZWFjaChrZXlzLCBmdW5jdGlvbiAoaykgewogICAgICAgIHZhciB0YXNrID0gKHRhc2tzW2tdIGluc3RhbmNlb2YgRnVuY3Rpb24pID8gW3Rhc2tzW2tdXTogdGFza3Nba107CiAgICAgICAgdmFyIHRhc2tDYWxsYmFjayA9IGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8PSAxKSB7CiAgICAgICAgICAgIGFyZ3MgPSBhcmdzWzBdOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICB2YXIgc2FmZVJlc3VsdHMgPSB7fTsKICAgICAgICAgICAgX2VhY2goX2tleXMocmVzdWx0cyksIGZ1bmN0aW9uKHJrZXkpIHsKICAgICAgICAgICAgICBzYWZlUmVzdWx0c1tya2V5XSA9IHJlc3VsdHNbcmtleV07CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzYWZlUmVzdWx0c1trXSA9IGFyZ3M7CiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgc2FmZVJlc3VsdHMpOwogICAgICAgICAgICAvLyBzdG9wIHN1YnNlcXVlbnQgZXJyb3JzIGhpdHRpbmcgY2FsbGJhY2sgbXVsdGlwbGUgdGltZXMKICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7fTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICByZXN1bHRzW2tdID0gYXJnczsKICAgICAgICAgICAgYXN5bmMuc2V0SW1tZWRpYXRlKHRhc2tDb21wbGV0ZSk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICB2YXIgcmVxdWlyZXMgPSB0YXNrLnNsaWNlKDAsIE1hdGguYWJzKHRhc2subGVuZ3RoIC0gMSkpIHx8IFtdOwogICAgICAgIHZhciByZWFkeSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBfcmVkdWNlKHJlcXVpcmVzLCBmdW5jdGlvbiAoYSwgeCkgewogICAgICAgICAgICByZXR1cm4gKGEgJiYgcmVzdWx0cy5oYXNPd25Qcm9wZXJ0eSh4KSk7CiAgICAgICAgICB9LCB0cnVlKSAmJiAhcmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShrKTsKICAgICAgICB9OwogICAgICAgIGlmIChyZWFkeSgpKSB7CiAgICAgICAgICB0YXNrW3Rhc2subGVuZ3RoIC0gMV0odGFza0NhbGxiYWNrLCByZXN1bHRzKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmIChyZWFkeSgpKSB7CiAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpOwogICAgICAgICAgICAgIHRhc2tbdGFzay5sZW5ndGggLSAxXSh0YXNrQ2FsbGJhY2ssIHJlc3VsdHMpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgYWRkTGlzdGVuZXIobGlzdGVuZXIpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9OwoKICAgIGFzeW5jLndhdGVyZmFsbCA9IGZ1bmN0aW9uICh0YXNrcywgY2FsbGJhY2spIHsKICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTsKICAgICAgaWYgKHRhc2tzLmNvbnN0cnVjdG9yICE9PSBBcnJheSkgewogICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IHRvIHdhdGVyZmFsbCBtdXN0IGJlIGFuIGFycmF5IG9mIGZ1bmN0aW9ucycpOwogICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpOwogICAgICB9CiAgICAgIGlmICghdGFza3MubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7CiAgICAgIH0KICAgICAgdmFyIHdyYXBJdGVyYXRvciA9IGZ1bmN0aW9uIChpdGVyYXRvcikgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge307CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgICAgICAgICB2YXIgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTsKICAgICAgICAgICAgaWYgKG5leHQpIHsKICAgICAgICAgICAgICBhcmdzLnB1c2god3JhcEl0ZXJhdG9yKG5leHQpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICBhcmdzLnB1c2goY2FsbGJhY2spOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGFzeW5jLnNldEltbWVkaWF0ZShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgaXRlcmF0b3IuYXBwbHkobnVsbCwgYXJncyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH07CiAgICAgIHdyYXBJdGVyYXRvcihhc3luYy5pdGVyYXRvcih0YXNrcykpKCk7CiAgICB9OwoKICAgIHZhciBfcGFyYWxsZWwgPSBmdW5jdGlvbihlYWNoZm4sIHRhc2tzLCBjYWxsYmFjaykgewogICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9OwogICAgICBpZiAodGFza3MuY29uc3RydWN0b3IgPT09IEFycmF5KSB7CiAgICAgICAgZWFjaGZuLm1hcCh0YXNrcywgZnVuY3Rpb24gKGZuLCBjYWxsYmFjaykgewogICAgICAgICAgaWYgKGZuKSB7CiAgICAgICAgICAgIGZuKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDw9IDEpIHsKICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmdzWzBdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKG51bGwsIGVyciwgYXJncyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0sIGNhbGxiYWNrKTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICB2YXIgcmVzdWx0cyA9IHt9OwogICAgICAgIGVhY2hmbi5lYWNoKF9rZXlzKHRhc2tzKSwgZnVuY3Rpb24gKGssIGNhbGxiYWNrKSB7CiAgICAgICAgICB0YXNrc1trXShmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDw9IDEpIHsKICAgICAgICAgICAgICBhcmdzID0gYXJnc1swXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXN1bHRzW2tdID0gYXJnczsKICAgICAgICAgICAgY2FsbGJhY2soZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0cyk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CgogICAgYXN5bmMucGFyYWxsZWwgPSBmdW5jdGlvbiAodGFza3MsIGNhbGxiYWNrKSB7CiAgICAgIF9wYXJhbGxlbCh7IG1hcDogYXN5bmMubWFwLCBlYWNoOiBhc3luYy5lYWNoIH0sIHRhc2tzLCBjYWxsYmFjayk7CiAgICB9OwoKICAgIGFzeW5jLnBhcmFsbGVsTGltaXQgPSBmdW5jdGlvbih0YXNrcywgbGltaXQsIGNhbGxiYWNrKSB7CiAgICAgIF9wYXJhbGxlbCh7IG1hcDogX21hcExpbWl0KGxpbWl0KSwgZWFjaDogX2VhY2hMaW1pdChsaW1pdCkgfSwgdGFza3MsIGNhbGxiYWNrKTsKICAgIH07CgogICAgYXN5bmMuc2VyaWVzID0gZnVuY3Rpb24gKHRhc2tzLCBjYWxsYmFjaykgewogICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9OwogICAgICBpZiAodGFza3MuY29uc3RydWN0b3IgPT09IEFycmF5KSB7CiAgICAgICAgYXN5bmMubWFwU2VyaWVzKHRhc2tzLCBmdW5jdGlvbiAoZm4sIGNhbGxiYWNrKSB7CiAgICAgICAgICBpZiAoZm4pIHsKICAgICAgICAgICAgZm4oZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPD0gMSkgewogICAgICAgICAgICAgICAgYXJncyA9IGFyZ3NbMF07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwobnVsbCwgZXJyLCBhcmdzKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSwgY2FsbGJhY2spOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIHZhciByZXN1bHRzID0ge307CiAgICAgICAgYXN5bmMuZWFjaFNlcmllcyhfa2V5cyh0YXNrcyksIGZ1bmN0aW9uIChrLCBjYWxsYmFjaykgewogICAgICAgICAgdGFza3Nba10oZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8PSAxKSB7CiAgICAgICAgICAgICAgYXJncyA9IGFyZ3NbMF07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzdWx0c1trXSA9IGFyZ3M7CiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdHMpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9OwoKICAgIGFzeW5jLml0ZXJhdG9yID0gZnVuY3Rpb24gKHRhc2tzKSB7CiAgICAgIHZhciBtYWtlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoaW5kZXgpIHsKICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAodGFza3MubGVuZ3RoKSB7CiAgICAgICAgICAgIHRhc2tzW2luZGV4XS5hcHBseShudWxsLCBhcmd1bWVudHMpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGZuLm5leHQoKTsKICAgICAgICB9OwogICAgICAgIGZuLm5leHQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gKGluZGV4IDwgdGFza3MubGVuZ3RoIC0gMSkgPyBtYWtlQ2FsbGJhY2soaW5kZXggKyAxKTogbnVsbDsKICAgICAgICB9OwogICAgICAgIHJldHVybiBmbjsKICAgICAgfTsKICAgICAgcmV0dXJuIG1ha2VDYWxsYmFjaygwKTsKICAgIH07CgogICAgYXN5bmMuYXBwbHkgPSBmdW5jdGlvbiAoZm4pIHsKICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBmbi5hcHBseSgKICAgICAgICAgIG51bGwsIGFyZ3MuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpCiAgICAgICAgKTsKICAgICAgfTsKICAgIH07CgogICAgdmFyIF9jb25jYXQgPSBmdW5jdGlvbiAoZWFjaGZuLCBhcnIsIGZuLCBjYWxsYmFjaykgewogICAgICB2YXIgciA9IFtdOwogICAgICBlYWNoZm4oYXJyLCBmdW5jdGlvbiAoeCwgY2IpIHsKICAgICAgICBmbih4LCBmdW5jdGlvbiAoZXJyLCB5KSB7CiAgICAgICAgICByID0gci5jb25jYXQoeSB8fCBbXSk7CiAgICAgICAgICBjYihlcnIpOwogICAgICAgIH0pOwogICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgY2FsbGJhY2soZXJyLCByKTsKICAgICAgfSk7CiAgICB9OwogICAgYXN5bmMuY29uY2F0ID0gZG9QYXJhbGxlbChfY29uY2F0KTsKICAgIGFzeW5jLmNvbmNhdFNlcmllcyA9IGRvU2VyaWVzKF9jb25jYXQpOwoKICAgIGFzeW5jLndoaWxzdCA9IGZ1bmN0aW9uICh0ZXN0LCBpdGVyYXRvciwgY2FsbGJhY2spIHsKICAgICAgaWYgKHRlc3QoKSkgewogICAgICAgIGl0ZXJhdG9yKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgICB9CiAgICAgICAgICBhc3luYy53aGlsc3QodGVzdCwgaXRlcmF0b3IsIGNhbGxiYWNrKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBjYWxsYmFjaygpOwogICAgICB9CiAgICB9OwoKICAgIGFzeW5jLmRvV2hpbHN0ID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCB0ZXN0LCBjYWxsYmFjaykgewogICAgICBpdGVyYXRvcihmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7CiAgICAgICAgfQogICAgICAgIGlmICh0ZXN0KCkpIHsKICAgICAgICAgIGFzeW5jLmRvV2hpbHN0KGl0ZXJhdG9yLCB0ZXN0LCBjYWxsYmFjayk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfTsKCiAgICBhc3luYy51bnRpbCA9IGZ1bmN0aW9uICh0ZXN0LCBpdGVyYXRvciwgY2FsbGJhY2spIHsKICAgICAgaWYgKCF0ZXN0KCkpIHsKICAgICAgICBpdGVyYXRvcihmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpOwogICAgICAgICAgfQogICAgICAgICAgYXN5bmMudW50aWwodGVzdCwgaXRlcmF0b3IsIGNhbGxiYWNrKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBjYWxsYmFjaygpOwogICAgICB9CiAgICB9OwoKICAgIGFzeW5jLmRvVW50aWwgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIHRlc3QsIGNhbGxiYWNrKSB7CiAgICAgIGl0ZXJhdG9yKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTsKICAgICAgICB9CiAgICAgICAgaWYgKCF0ZXN0KCkpIHsKICAgICAgICAgIGFzeW5jLmRvVW50aWwoaXRlcmF0b3IsIHRlc3QsIGNhbGxiYWNrKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9OwoKICAgIGFzeW5jLnF1ZXVlID0gZnVuY3Rpb24gKHdvcmtlciwgY29uY3VycmVuY3kpIHsKICAgICAgaWYgKGNvbmN1cnJlbmN5ID09PSB1bmRlZmluZWQpIHsKICAgICAgICBjb25jdXJyZW5jeSA9IDE7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gX2luc2VydChxLCBkYXRhLCBwb3MsIGNhbGxiYWNrKSB7CiAgICAgICAgaWYoZGF0YS5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpIHsKICAgICAgICAgIGRhdGEgPSBbZGF0YV07CiAgICAgICAgfQogICAgICAgIF9lYWNoKGRhdGEsIGZ1bmN0aW9uKHRhc2spIHsKICAgICAgICAgIHZhciBpdGVtID0gewogICAgICAgICAgICBkYXRhOiB0YXNrLAogICAgICAgICAgICBjYWxsYmFjazogdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gY2FsbGJhY2sgOiBudWxsCiAgICAgICAgICB9OwoKICAgICAgICAgIGlmIChwb3MpIHsKICAgICAgICAgICAgcS50YXNrcy51bnNoaWZ0KGl0ZW0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcS50YXNrcy5wdXNoKGl0ZW0pOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChxLnNhdHVyYXRlZCAmJiBxLnRhc2tzLmxlbmd0aCA9PT0gY29uY3VycmVuY3kpIHsKICAgICAgICAgICAgcS5zYXR1cmF0ZWQoKTsKICAgICAgICAgIH0KICAgICAgICAgIGFzeW5jLnNldEltbWVkaWF0ZShxLnByb2Nlc3MpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgd29ya2VycyA9IDA7CiAgICAgIHZhciBxID0gewogICAgICAgIHRhc2tzOiBbXSwKICAgICAgICBjb25jdXJyZW5jeTogY29uY3VycmVuY3ksCiAgICAgICAgc2F0dXJhdGVkOiBudWxsLAogICAgICAgIGVtcHR5OiBudWxsLAogICAgICAgIGRyYWluOiBudWxsLAogICAgICAgIHB1c2g6IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykgewogICAgICAgICAgX2luc2VydChxLCBkYXRhLCBmYWxzZSwgY2FsbGJhY2spOwogICAgICAgIH0sCiAgICAgICAgdW5zaGlmdDogZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7CiAgICAgICAgICBfaW5zZXJ0KHEsIGRhdGEsIHRydWUsIGNhbGxiYWNrKTsKICAgICAgICB9LAogICAgICAgIHByb2Nlc3M6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmICh3b3JrZXJzIDwgcS5jb25jdXJyZW5jeSAmJiBxLnRhc2tzLmxlbmd0aCkgewogICAgICAgICAgICB2YXIgdGFzayA9IHEudGFza3Muc2hpZnQoKTsKICAgICAgICAgICAgaWYgKHEuZW1wdHkgJiYgcS50YXNrcy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICBxLmVtcHR5KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgd29ya2VycyArPSAxOwogICAgICAgICAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB3b3JrZXJzIC09IDE7CiAgICAgICAgICAgICAgaWYgKHRhc2suY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIHRhc2suY2FsbGJhY2suYXBwbHkodGFzaywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHEuZHJhaW4gJiYgcS50YXNrcy5sZW5ndGggKyB3b3JrZXJzID09PSAwKSB7CiAgICAgICAgICAgICAgICBxLmRyYWluKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHEucHJvY2VzcygpOwogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgY2IgPSBvbmx5X29uY2UobmV4dCk7CiAgICAgICAgICAgIHdvcmtlcih0YXNrLmRhdGEsIGNiKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGxlbmd0aDogZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHEudGFza3MubGVuZ3RoOwogICAgICAgIH0sCiAgICAgICAgcnVubmluZzogZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHdvcmtlcnM7CiAgICAgICAgfQogICAgICB9OwogICAgICByZXR1cm4gcTsKICAgIH07CgogICAgYXN5bmMuY2FyZ28gPSBmdW5jdGlvbiAod29ya2VyLCBwYXlsb2FkKSB7CiAgICAgIHZhciB3b3JraW5nICAgICA9IGZhbHNlLAogICAgICAgIHRhc2tzICAgICAgID0gW107CgogICAgICB2YXIgY2FyZ28gPSB7CiAgICAgICAgdGFza3M6IHRhc2tzLAogICAgICAgIHBheWxvYWQ6IHBheWxvYWQsCiAgICAgICAgc2F0dXJhdGVkOiBudWxsLAogICAgICAgIGVtcHR5OiBudWxsLAogICAgICAgIGRyYWluOiBudWxsLAogICAgICAgIHB1c2g6IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykgewogICAgICAgICAgaWYoZGF0YS5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpIHsKICAgICAgICAgICAgZGF0YSA9IFtkYXRhXTsKICAgICAgICAgIH0KICAgICAgICAgIF9lYWNoKGRhdGEsIGZ1bmN0aW9uKHRhc2spIHsKICAgICAgICAgICAgdGFza3MucHVzaCh7CiAgICAgICAgICAgICAgZGF0YTogdGFzaywKICAgICAgICAgICAgICBjYWxsYmFjazogdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gY2FsbGJhY2sgOiBudWxsCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZiAoY2FyZ28uc2F0dXJhdGVkICYmIHRhc2tzLmxlbmd0aCA9PT0gcGF5bG9hZCkgewogICAgICAgICAgICAgIGNhcmdvLnNhdHVyYXRlZCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIGFzeW5jLnNldEltbWVkaWF0ZShjYXJnby5wcm9jZXNzKTsKICAgICAgICB9LAogICAgICAgIHByb2Nlc3M6IGZ1bmN0aW9uIHByb2Nlc3MoKSB7CiAgICAgICAgICBpZiAod29ya2luZykgcmV0dXJuOwogICAgICAgICAgaWYgKHRhc2tzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICBpZihjYXJnby5kcmFpbikgY2FyZ28uZHJhaW4oKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciB0cyA9IHR5cGVvZiBwYXlsb2FkID09PSAnbnVtYmVyJwogICAgICAgICAgICA/IHRhc2tzLnNwbGljZSgwLCBwYXlsb2FkKQogICAgICAgICAgICA6IHRhc2tzLnNwbGljZSgwKTsKCiAgICAgICAgICB2YXIgZHMgPSBfbWFwKHRzLCBmdW5jdGlvbiAodGFzaykgewogICAgICAgICAgICByZXR1cm4gdGFzay5kYXRhOwogICAgICAgICAgfSk7CgogICAgICAgICAgaWYoY2FyZ28uZW1wdHkpIGNhcmdvLmVtcHR5KCk7CiAgICAgICAgICB3b3JraW5nID0gdHJ1ZTsKICAgICAgICAgIHdvcmtlcihkcywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB3b3JraW5nID0gZmFsc2U7CgogICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50czsKICAgICAgICAgICAgX2VhY2godHMsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgaWYgKGRhdGEuY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIGRhdGEuY2FsbGJhY2suYXBwbHkobnVsbCwgYXJncyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHByb2Nlc3MoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgbGVuZ3RoOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gdGFza3MubGVuZ3RoOwogICAgICAgIH0sCiAgICAgICAgcnVubmluZzogZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuIHdvcmtpbmc7CiAgICAgICAgfQogICAgICB9OwogICAgICByZXR1cm4gY2FyZ287CiAgICB9OwoKICAgIHZhciBfY29uc29sZV9mbiA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoZm4pIHsKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncy5jb25jYXQoW2Z1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgIGlmIChjb25zb2xlLmVycm9yKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKGNvbnNvbGVbbmFtZV0pIHsKICAgICAgICAgICAgICBfZWFjaChhcmdzLCBmdW5jdGlvbiAoeCkgewogICAgICAgICAgICAgICAgY29uc29sZVtuYW1lXSh4KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH1dKSk7CiAgICAgIH07CiAgICB9OwogICAgYXN5bmMubG9nID0gX2NvbnNvbGVfZm4oJ2xvZycpOwogICAgYXN5bmMuZGlyID0gX2NvbnNvbGVfZm4oJ2RpcicpOwogICAgLyphc3luYy5pbmZvID0gX2NvbnNvbGVfZm4oJ2luZm8nKTsKICAgICBhc3luYy53YXJuID0gX2NvbnNvbGVfZm4oJ3dhcm4nKTsKICAgICBhc3luYy5lcnJvciA9IF9jb25zb2xlX2ZuKCdlcnJvcicpOyovCgogICAgYXN5bmMubWVtb2l6ZSA9IGZ1bmN0aW9uIChmbiwgaGFzaGVyKSB7CiAgICAgIHZhciBtZW1vID0ge307CiAgICAgIHZhciBxdWV1ZXMgPSB7fTsKICAgICAgaGFzaGVyID0gaGFzaGVyIHx8IGZ1bmN0aW9uICh4KSB7CiAgICAgICAgcmV0dXJuIHg7CiAgICAgIH07CiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJncy5wb3AoKTsKICAgICAgICB2YXIga2V5ID0gaGFzaGVyLmFwcGx5KG51bGwsIGFyZ3MpOwogICAgICAgIGlmIChrZXkgaW4gbWVtbykgewogICAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgbWVtb1trZXldKTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoa2V5IGluIHF1ZXVlcykgewogICAgICAgICAgcXVldWVzW2tleV0ucHVzaChjYWxsYmFjayk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgcXVldWVzW2tleV0gPSBbY2FsbGJhY2tdOwogICAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncy5jb25jYXQoW2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgbWVtb1trZXldID0gYXJndW1lbnRzOwogICAgICAgICAgICB2YXIgcSA9IHF1ZXVlc1trZXldOwogICAgICAgICAgICBkZWxldGUgcXVldWVzW2tleV07CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcS5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAgICAgICBxW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH1dKSk7CiAgICAgICAgfQogICAgICB9OwogICAgICBtZW1vaXplZC5tZW1vID0gbWVtbzsKICAgICAgbWVtb2l6ZWQudW5tZW1vaXplZCA9IGZuOwogICAgICByZXR1cm4gbWVtb2l6ZWQ7CiAgICB9OwoKICAgIGFzeW5jLnVubWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiAoZm4udW5tZW1vaXplZCB8fCBmbikuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH07CgogICAgYXN5bmMudGltZXMgPSBmdW5jdGlvbiAoY291bnQsIGl0ZXJhdG9yLCBjYWxsYmFjaykgewogICAgICB2YXIgY291bnRlciA9IFtdOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHsKICAgICAgICBjb3VudGVyLnB1c2goaSk7CiAgICAgIH0KICAgICAgcmV0dXJuIGFzeW5jLm1hcChjb3VudGVyLCBpdGVyYXRvciwgY2FsbGJhY2spOwogICAgfTsKCiAgICBhc3luYy50aW1lc1NlcmllcyA9IGZ1bmN0aW9uIChjb3VudCwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBjb3VudGVyID0gW107CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykgewogICAgICAgIGNvdW50ZXIucHVzaChpKTsKICAgICAgfQogICAgICByZXR1cm4gYXN5bmMubWFwU2VyaWVzKGNvdW50ZXIsIGl0ZXJhdG9yLCBjYWxsYmFjayk7CiAgICB9OwoKICAgIGFzeW5jLmNvbXBvc2UgPSBmdW5jdGlvbiAoLyogZnVuY3Rpb25zLi4uICovKSB7CiAgICAgIHZhciBmbnMgPSBBcnJheS5wcm90b3R5cGUucmV2ZXJzZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmdzLnBvcCgpOwogICAgICAgIGFzeW5jLnJlZHVjZShmbnMsIGFyZ3MsIGZ1bmN0aW9uIChuZXdhcmdzLCBmbiwgY2IpIHsKICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgbmV3YXJncy5jb25jYXQoW2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB2YXIgZXJyID0gYXJndW1lbnRzWzBdOwogICAgICAgICAgICAgIHZhciBuZXh0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgICAgICAgICAgY2IoZXJyLCBuZXh0YXJncyk7CiAgICAgICAgICAgIH1dKSkKICAgICAgICAgIH0sCiAgICAgICAgICBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7CiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoYXQsIFtlcnJdLmNvbmNhdChyZXN1bHRzKSk7CiAgICAgICAgICB9KTsKICAgICAgfTsKICAgIH07CgogICAgdmFyIF9hcHBseUVhY2ggPSBmdW5jdGlvbiAoZWFjaGZuLCBmbnMgLyphcmdzLi4uKi8pIHsKICAgICAgdmFyIGdvID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciB0aGF0ID0gdGhpczsKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJncy5wb3AoKTsKICAgICAgICByZXR1cm4gZWFjaGZuKGZucywgZnVuY3Rpb24gKGZuLCBjYikgewogICAgICAgICAgICBmbi5hcHBseSh0aGF0LCBhcmdzLmNvbmNhdChbY2JdKSk7CiAgICAgICAgICB9LAogICAgICAgICAgY2FsbGJhY2spOwogICAgICB9OwogICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHsKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7CiAgICAgICAgcmV0dXJuIGdvLmFwcGx5KHRoaXMsIGFyZ3MpOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIHJldHVybiBnbzsKICAgICAgfQogICAgfTsKICAgIGFzeW5jLmFwcGx5RWFjaCA9IGRvUGFyYWxsZWwoX2FwcGx5RWFjaCk7CiAgICBhc3luYy5hcHBseUVhY2hTZXJpZXMgPSBkb1NlcmllcyhfYXBwbHlFYWNoKTsKCiAgICBhc3luYy5mb3JldmVyID0gZnVuY3Rpb24gKGZuLCBjYWxsYmFjaykgewogICAgICBmdW5jdGlvbiBuZXh0KGVycikgewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTsKICAgICAgICAgIH0KICAgICAgICAgIHRocm93IGVycjsKICAgICAgICB9CiAgICAgICAgZm4obmV4dCk7CiAgICAgIH0KICAgICAgbmV4dCgpOwogICAgfTsKCiAgICAvLyBBTUQgLyBSZXF1aXJlSlMKICAgIGlmICh0eXBlb2YgZGVmaW5lICE9PSAndW5kZWZpbmVkJyAmJiBkZWZpbmUuYW1kKSB7CiAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBhc3luYzsKICAgICAgfSk7CiAgICB9CiAgICAvLyBOb2RlLmpzCiAgICBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgewogICAgICBtb2R1bGUuZXhwb3J0cyA9IGFzeW5jOwogICAgfQogICAgLy8gaW5jbHVkZWQgZGlyZWN0bHkgdmlhIDxzY3JpcHQ+IHRhZwogICAgZWxzZSB7CiAgICAgIHJvb3QuYXN5bmMgPSBhc3luYzsKICAgIH0KCiAgfSgpKTsKCiAgLyogVGhpcyBpcyB0aGUgaW5maXggZmlsZSAqLwogIC8qIGpzaGludCBpZ25vcmU6ZW5kICovCiAgdmFyIGFzeW5jTG9hZGVyID0gbW9kdWxlLmV4cG9ydHM7ICAvLyBhc3luYyBoYXMgdXBkYXRlZCB0aGlzLCBub3cgc2F2ZSBpbiBvdXIgdmFyLCB0byB0aGF0IGl0IGNhbiBiZSByZXR1cm5lZCBmcm9tIG91ciBkdW1teSByZXF1aXJlCiAgZnVuY3Rpb24gcmVxdWlyZSgpIHsKICAgIHJldHVybiBhc3luY0xvYWRlcjsKICB9CgogIC8qIEVuZCBvZiBpbmZpeCBmaWxlICovCgogIChmdW5jdGlvbiAoKSB7CgogICAgdmFyIGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKTsKCiAgICAvKgogICAgICogU2FtcGxlIFVzYWdlCiAgICAgKgogICAgICogdmFyIGVuZ2luZSA9IGZvcm1zUnVsZXNFbmdpbmUoZm9ybS1kZWZpbml0aW9uKTsKICAgICAqCiAgICAgKiBlbmdpbmUudmFsaWRhdGVGb3Jtcyhmb3JtLXN1Ym1pc3Npb24sIGZ1bmN0aW9uKGVyciwgcmVzKSB7fSk7CiAgICAgKiAgICAgIHJlczoKICAgICAqICAgICAgewogICAgICogICAgICAgICAgInZhbGlkYXRpb24iOiB7CiAgICAgKiAgICAgICAgICAgICAgImZpZWxkSWQiOiB7CiAgICAgKiAgICAgICAgICAgICAgICAgICJmaWVsZElkIjogIiIsCiAgICAgKiAgICAgICAgICAgICAgICAgICJ2YWxpZCI6IHRydWUsCiAgICAgKiAgICAgICAgICAgICAgICAgICJlcnJvck1lc3NhZ2VzIjogWwogICAgICogICAgICAgICAgICAgICAgICAgICAgImxlbmd0aCBzaG91bGQgYmUgMyB0byA1IiwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICJzaG91bGQgbm90IGNvbnRhaW4gZGFtbWl0IiwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICJzaG91bGQgcmVwZWF0IGF0IGxlYXN0IDIgdGltZXMiCiAgICAgKiAgICAgICAgICAgICAgICAgIF0KICAgICAqICAgICAgICAgICAgICB9LAogICAgICogICAgICAgICAgICAgICJmaWVsZElkMSI6IHsKICAgICAqCiAgICAgKiAgICAgICAgICAgICAgfQogICAgICogICAgICAgICAgfQogICAgICogICAgICB9CiAgICAgKgogICAgICoKICAgICAqIGVuZ2luZS52YWxpZGF0ZUZpZWxkKGZpZWxkSWQsIHN1Ym1pc3Npb25KU09OLCBmdW5jdGlvbihlcnIscmVzKSB7fSk7CiAgICAgKiAgICAgIC8vIHZhbGlkYXRlIG9ubHkgZmllbGQgdmFsdWVzIG9uIHZhbGlkYXRpb24gKG5vIHJ1bGVzLCBubyByZXBlYXQgY2hlY2tpbmcpCiAgICAgKiAgICAgIHJlczoKICAgICAqICAgICAgInZhbGlkYXRpb24iOnsKICAgICAqICAgICAgICAgICAgICAiZmllbGRJZCI6ewogICAgICogICAgICAgICAgICAgICAgICAiZmllbGRJZCI6IiIsCiAgICAgKiAgICAgICAgICAgICAgICAgICJ2YWxpZCI6dHJ1ZSwKICAgICAqICAgICAgICAgICAgICAgICAgImVycm9yTWVzc2FnZXMiOlsKICAgICAqICAgICAgICAgICAgICAgICAgICAgICJsZW5ndGggc2hvdWxkIGJlIDMgdG8gNSIsCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAic2hvdWxkIG5vdCBjb250YWluIGRhbW1pdCIKICAgICAqICAgICAgICAgICAgICAgICAgXQogICAgICogICAgICAgICAgICAgIH0KICAgICAqICAgICAgICAgIH0KICAgICAqCiAgICAgKiBlbmdpbmUuY2hlY2tSdWxlcyhzdWJtaXNzaW9uSlNPTiwgdW5jdGlvbihlcnIsIHJlcykge30pCiAgICAgKiAgICAgIC8vIGNoZWNrIGFsbCBydWxlcyBhY3Rpb25zCiAgICAgKiAgICAgIHJlczoKICAgICAqICAgICAgewogICAgICogICAgICAgICAgImFjdGlvbnMiOiB7CiAgICAgKiAgICAgICAgICAgICAgInBhZ2VzIjogewogICAgICogICAgICAgICAgICAgICAgICAidGFyZ2V0SWQiOiB7CiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAidGFyZ2V0SWQiOiAiIiwKICAgICAqICAgICAgICAgICAgICAgICAgICAgICJhY3Rpb24iOiAic2hvd3xoaWRlIgogICAgICogICAgICAgICAgICAgICAgICB9CiAgICAgKiAgICAgICAgICAgICAgfSwKICAgICAqICAgICAgICAgICAgICAiZmllbGRzIjogewogICAgICoKICAgICAqICAgICAgICAgICAgICB9CiAgICAgKiAgICAgICAgICB9CiAgICAgKiAgICAgIH0KICAgICAqCiAgICAgKi8KCiAgICB2YXIgRklFTERfVFlQRV9EQVRFVElNRV9EQVRFVElNRVVOSVRfREFURU9OTFkgPSAiZGF0ZSI7CiAgICB2YXIgRklFTERfVFlQRV9EQVRFVElNRV9EQVRFVElNRVVOSVRfVElNRU9OTFkgPSAidGltZSI7CiAgICB2YXIgRklFTERfVFlQRV9EQVRFVElNRV9EQVRFVElNRVVOSVRfREFURVRJTUUgPSAiZGF0ZXRpbWUiOwoKICAgIHZhciBmb3Jtc1J1bGVzRW5naW5lID0gZnVuY3Rpb24gKGZvcm1EZWYpIHsKICAgICAgdmFyIGluaXRpYWxpc2VkOwoKICAgICAgdmFyIGRlZmluaXRpb24gPSBmb3JtRGVmOwogICAgICB2YXIgc3VibWlzc2lvbjsKCiAgICAgIHZhciBmaWVsZE1hcCA9IHt9OwogICAgICB2YXIgYWRtaW5GaWVsZE1hcCA9e307IC8vQWRtaW4gZmllbGRzIHNob3VsZCBub3QgYmUgcGFydCBvZiBhIHN1Ym1pc3Npb24KICAgICAgdmFyIHJlcXVpcmVkRmllbGRNYXAgPSB7fTsKICAgICAgdmFyIHN1Ym1pc3Npb25SZXF1aXJlZEZpZWxkc01hcCA9IHt9OyAvLyBtYXAgdG8gaG9sZCB0aGUgc3RhdHVzIG9mIHRoZSByZXF1aXJlZCBmaWVsZHMgcGVyIHN1Ym1pc3Npb24KICAgICAgdmFyIGZpZWxkUnVsZVByZWRpY2F0ZU1hcCA9IHt9OwogICAgICB2YXIgZmllbGRSdWxlU3ViamVjdE1hcCA9IHt9OwogICAgICB2YXIgcGFnZVJ1bGVQcmVkaWNhdGVNYXAgPSB7fTsKICAgICAgdmFyIHBhZ2VSdWxlU3ViamVjdE1hcCA9IHt9OwogICAgICB2YXIgc3VibWlzc2lvbkZpZWxkc01hcCA9IHt9OwogICAgICB2YXIgdmFsaWRhdG9yc01hcCA9IHsKICAgICAgICAidGV4dCI6IHZhbGlkYXRvclN0cmluZywKICAgICAgICAidGV4dGFyZWEiOiB2YWxpZGF0b3JTdHJpbmcsCiAgICAgICAgIm51bWJlciI6IHZhbGlkYXRvck51bWVyaWNTdHJpbmcsCiAgICAgICAgImVtYWlsQWRkcmVzcyI6IHZhbGlkYXRvckVtYWlsLAogICAgICAgICJkcm9wZG93biI6IHZhbGlkYXRvckRyb3BEb3duLAogICAgICAgICJyYWRpbyI6IHZhbGlkYXRvckRyb3BEb3duLAogICAgICAgICJjaGVja2JveGVzIjogdmFsaWRhdG9yQ2hlY2tib3hlcywKICAgICAgICAibG9jYXRpb24iOiB2YWxpZGF0b3JMb2NhdGlvbiwKICAgICAgICAibG9jYXRpb25NYXAiOiB2YWxpZGF0b3JMb2NhdGlvbk1hcCwKICAgICAgICAicGhvdG8iOiB2YWxpZGF0b3JGaWxlLAogICAgICAgICJzaWduYXR1cmUiOiB2YWxpZGF0b3JGaWxlLAogICAgICAgICJmaWxlIjogdmFsaWRhdG9yRmlsZSwKICAgICAgICAiZGF0ZVRpbWUiOiB2YWxpZGF0b3JEYXRlVGltZSwKICAgICAgICAidXJsIjogdmFsaWRhdG9yU3RyaW5nLAogICAgICAgICJzZWN0aW9uQnJlYWsiOiB2YWxpZGF0b3JTZWN0aW9uLAogICAgICAgICJiYXJjb2RlIjogdmFsaWRhdG9yQmFyY29kZSwKICAgICAgICAic2xpZGVyTnVtYmVyIjogdmFsaWRhdG9yTnVtZXJpY1N0cmluZwogICAgICB9OwoKICAgICAgdmFyIHZhbGlkYXRvcnNDbGllbnRNYXAgPSB7CiAgICAgICAgInRleHQiOiB2YWxpZGF0b3JTdHJpbmcsCiAgICAgICAgInRleHRhcmVhIjogdmFsaWRhdG9yU3RyaW5nLAogICAgICAgICJudW1iZXIiOiB2YWxpZGF0b3JOdW1lcmljU3RyaW5nLAogICAgICAgICJlbWFpbEFkZHJlc3MiOiB2YWxpZGF0b3JFbWFpbCwKICAgICAgICAiZHJvcGRvd24iOiB2YWxpZGF0b3JEcm9wRG93biwKICAgICAgICAicmFkaW8iOiB2YWxpZGF0b3JEcm9wRG93biwKICAgICAgICAiY2hlY2tib3hlcyI6IHZhbGlkYXRvckNoZWNrYm94ZXMsCiAgICAgICAgImxvY2F0aW9uIjogdmFsaWRhdG9yTG9jYXRpb24sCiAgICAgICAgImxvY2F0aW9uTWFwIjogdmFsaWRhdG9yTG9jYXRpb25NYXAsCiAgICAgICAgInBob3RvIjogdmFsaWRhdG9yQW55RmlsZSwKICAgICAgICAic2lnbmF0dXJlIjogdmFsaWRhdG9yQW55RmlsZSwKICAgICAgICAiZmlsZSI6IHZhbGlkYXRvckFueUZpbGUsCiAgICAgICAgImRhdGVUaW1lIjogdmFsaWRhdG9yRGF0ZVRpbWUsCiAgICAgICAgInVybCI6IHZhbGlkYXRvclN0cmluZywKICAgICAgICAic2VjdGlvbkJyZWFrIjogdmFsaWRhdG9yU2VjdGlvbiwKICAgICAgICAiYmFyY29kZSI6IHZhbGlkYXRvckJhcmNvZGUsCiAgICAgICAgInNsaWRlck51bWJlciI6IHZhbGlkYXRvck51bWVyaWNTdHJpbmcKICAgICAgfTsKCiAgICAgIHZhciBmaWVsZFZhbHVlQ29tcGFyaXNvbiA9IHsKICAgICAgICAidGV4dCI6IGZ1bmN0aW9uKGZpZWxkVmFsdWUsIHRlc3RWYWx1ZSwgY29uZGl0aW9uKXsKICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmlzb25TdHJpbmcoZmllbGRWYWx1ZSwgdGVzdFZhbHVlLCBjb25kaXRpb24pOwogICAgICAgIH0sCiAgICAgICAgInRleHRhcmVhIjogZnVuY3Rpb24oZmllbGRWYWx1ZSwgdGVzdFZhbHVlLCBjb25kaXRpb24pewogICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyaXNvblN0cmluZyhmaWVsZFZhbHVlLCB0ZXN0VmFsdWUsIGNvbmRpdGlvbik7CiAgICAgICAgfSwKICAgICAgICAibnVtYmVyIjogZnVuY3Rpb24oZmllbGRWYWx1ZSwgdGVzdFZhbHVlLCBjb25kaXRpb24pewogICAgICAgICAgcmV0dXJuIHRoaXMubnVtZXJpY2FsQ29tcGFyaXNvbihmaWVsZFZhbHVlLCB0ZXN0VmFsdWUsIGNvbmRpdGlvbik7CiAgICAgICAgfSwKICAgICAgICAiZW1haWxBZGRyZXNzIjogZnVuY3Rpb24oZmllbGRWYWx1ZSwgdGVzdFZhbHVlLCBjb25kaXRpb24pewogICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyaXNvblN0cmluZyhmaWVsZFZhbHVlLCB0ZXN0VmFsdWUsIGNvbmRpdGlvbik7CiAgICAgICAgfSwKICAgICAgICAiZHJvcGRvd24iOiBmdW5jdGlvbihmaWVsZFZhbHVlLCB0ZXN0VmFsdWUsIGNvbmRpdGlvbil7CiAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJpc29uU3RyaW5nKGZpZWxkVmFsdWUsIHRlc3RWYWx1ZSwgY29uZGl0aW9uKTsKICAgICAgICB9LAogICAgICAgICJyYWRpbyI6IGZ1bmN0aW9uKGZpZWxkVmFsdWUsIHRlc3RWYWx1ZSwgY29uZGl0aW9uKXsKICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmlzb25TdHJpbmcoZmllbGRWYWx1ZSwgdGVzdFZhbHVlLCBjb25kaXRpb24pOwogICAgICAgIH0sCiAgICAgICAgImNoZWNrYm94ZXMiOiBmdW5jdGlvbihmaWVsZFZhbHVlLCB0ZXN0VmFsdWUsIGNvbmRpdGlvbil7CiAgICAgICAgICBmaWVsZFZhbHVlID0gZmllbGRWYWx1ZSB8fCB7fTsKICAgICAgICAgIHZhciB2YWx1ZUZvdW5kID0gZmFsc2U7CgogICAgICAgICAgaWYoIShmaWVsZFZhbHVlLnNlbGVjdGlvbnMgaW5zdGFuY2VvZiBBcnJheSkpewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgICAgLy9DaGVjayBpZiB0aGUgdGVzdFZhbHVlIGlzIGNvbnRhaW5lZCBpbiB0aGUgc2VsZWN0aW9ucwogICAgICAgICAgZm9yKHZhciBzZWxlY3Rpb25JbmRleCA9IDA7IHNlbGVjdGlvbkluZGV4IDwgZmllbGRWYWx1ZS5zZWxlY3Rpb25zLmxlbmd0aDsgc2VsZWN0aW9uSW5kZXgrKyApewogICAgICAgICAgICB2YXIgc2VsZWN0aW9uVmFsdWUgPSBmaWVsZFZhbHVlLnNlbGVjdGlvbnNbc2VsZWN0aW9uSW5kZXhdOwogICAgICAgICAgICAvL05vdGUsIGhlcmUgd2UgYXJlIHVzaW5nIHRoZSAiaXMiIHN0cmluZyBjb21wYXJhdG9yIHRvIGNoZWNrIGlmIHRoZSB0ZXN0VmFsdWUgbWF0Y2hlcyB0aGUgY3VycmVudCBzZWxlY3Rpb25WYWx1ZQogICAgICAgICAgICBpZih0aGlzLmNvbXBhcmlzb25TdHJpbmcoc2VsZWN0aW9uVmFsdWUsIHRlc3RWYWx1ZSwgImlzIikpewogICAgICAgICAgICAgIHZhbHVlRm91bmQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYoY29uZGl0aW9uID09PSAiaXMiKXsKICAgICAgICAgICAgcmV0dXJuIHZhbHVlRm91bmQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gIXZhbHVlRm91bmQ7CiAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgImRhdGVUaW1lIjogZnVuY3Rpb24oZmllbGRWYWx1ZSwgdGVzdFZhbHVlLCBjb25kaXRpb24sIGZpZWxkT3B0aW9ucyl7CiAgICAgICAgICB2YXIgdmFsaWQgPSBmYWxzZTsKCiAgICAgICAgICBmaWVsZE9wdGlvbnMgPSBmaWVsZE9wdGlvbnMgfHwge2RlZmluaXRpb246IHt9fTsKCiAgICAgICAgICAvL2RhdGVOdW1WYWwgaXMgYXNzaWduZWQgYW4gZWFzaWx5IGNvbXBhcmlibGUgbnVtYmVyIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiB1bml0cyB1c2VkLgogICAgICAgICAgdmFyIGRhdGVOdW1WYWwgPSBudWxsOwogICAgICAgICAgdmFyIHRlc3ROdW1WYWwgPSBudWxsOwoKICAgICAgICAgIHN3aXRjaCAoZmllbGRPcHRpb25zLmRlZmluaXRpb24uZGF0ZXRpbWVVbml0KSB7CiAgICAgICAgICAgIGNhc2UgRklFTERfVFlQRV9EQVRFVElNRV9EQVRFVElNRVVOSVRfREFURU9OTFk6CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGRhdGVOdW1WYWwgPSBuZXcgRGF0ZShuZXcgRGF0ZShmaWVsZFZhbHVlKS50b0RhdGVTdHJpbmcoKSkuZ2V0VGltZSgpOwogICAgICAgICAgICAgICAgdGVzdE51bVZhbCA9IG5ldyBEYXRlKG5ldyBEYXRlKHRlc3RWYWx1ZSkudG9EYXRlU3RyaW5nKCkpLmdldFRpbWUoKTsKICAgICAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTsKICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBkYXRlTnVtVmFsID0gbnVsbDsKICAgICAgICAgICAgICAgIHRlc3ROdW1WYWwgPSBudWxsOwogICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgRklFTERfVFlQRV9EQVRFVElNRV9EQVRFVElNRVVOSVRfVElNRU9OTFk6CiAgICAgICAgICAgICAgdmFyIGN2dFRpbWUgPSB0aGlzLmN2dFRpbWVUb1NlY29uZHMoZmllbGRWYWx1ZSk7CiAgICAgICAgICAgICAgdmFyIGN2dFRlc3RWYWwgPSB0aGlzLmN2dFRpbWVUb1NlY29uZHModGVzdFZhbHVlKTsKICAgICAgICAgICAgICBkYXRlTnVtVmFsID0gY3Z0VGltZS5zZWNvbmRzOwogICAgICAgICAgICAgIHRlc3ROdW1WYWwgPSBjdnRUZXN0VmFsLnNlY29uZHM7CiAgICAgICAgICAgICAgdmFsaWQgPSBjdnRUaW1lLnZhbGlkICYmIGN2dFRlc3RWYWwudmFsaWQ7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgRklFTERfVFlQRV9EQVRFVElNRV9EQVRFVElNRVVOSVRfREFURVRJTUU6CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGRhdGVOdW1WYWwgPSAobmV3IERhdGUoZmllbGRWYWx1ZSkuZ2V0VGltZSgpKTsKICAgICAgICAgICAgICAgIHRlc3ROdW1WYWwgPSAobmV3IERhdGUodGVzdFZhbHVlKS5nZXRUaW1lKCkpOwogICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgICAgLy9UaGUgdmFsdWUgaXMgbm90IHZhbGlkLCBubyBwb2ludCBpbiBjb21wYXJpbmcuCiAgICAgICAgICBpZighdmFsaWQpewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKCJpcyBhdCIgPT09IGNvbmRpdGlvbikgewogICAgICAgICAgICB2YWxpZCA9IGRhdGVOdW1WYWwgPT09IHRlc3ROdW1WYWw7CiAgICAgICAgICB9IGVsc2UgaWYgKCJpcyBiZWZvcmUiID09PSBjb25kaXRpb24pIHsKICAgICAgICAgICAgdmFsaWQgPSBkYXRlTnVtVmFsIDwgdGVzdE51bVZhbDsKICAgICAgICAgIH0gZWxzZSBpZiAoImlzIGFmdGVyIiA9PT0gY29uZGl0aW9uKSB7CiAgICAgICAgICAgIHZhbGlkID0gZGF0ZU51bVZhbCA+IHRlc3ROdW1WYWw7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YWxpZCA9IGZhbHNlOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiB2YWxpZDsKICAgICAgICB9LAogICAgICAgICJ1cmwiOiBmdW5jdGlvbihmaWVsZFZhbHVlLCB0ZXN0VmFsdWUsIGNvbmRpdGlvbil7CiAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJpc29uU3RyaW5nKGZpZWxkVmFsdWUsIHRlc3RWYWx1ZSwgY29uZGl0aW9uKTsKICAgICAgICB9LAogICAgICAgICJiYXJjb2RlIjogZnVuY3Rpb24oZmllbGRWYWx1ZSwgdGVzdFZhbHVlLCBjb25kaXRpb24pewogICAgICAgICAgZmllbGRWYWx1ZSA9IGZpZWxkVmFsdWUgfHwge307CgogICAgICAgICAgaWYodHlwZW9mKGZpZWxkVmFsdWUudGV4dCkgIT09ICJzdHJpbmciKXsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmlzb25TdHJpbmcoZmllbGRWYWx1ZS50ZXh0LCB0ZXN0VmFsdWUsIGNvbmRpdGlvbik7CiAgICAgICAgfSwKICAgICAgICAic2xpZGVyTnVtYmVyIjogZnVuY3Rpb24oZmllbGRWYWx1ZSwgdGVzdFZhbHVlLCBjb25kaXRpb24pewogICAgICAgICAgcmV0dXJuIHRoaXMubnVtZXJpY2FsQ29tcGFyaXNvbihmaWVsZFZhbHVlLCB0ZXN0VmFsdWUsIGNvbmRpdGlvbik7CiAgICAgICAgfSwKICAgICAgICAiY29tcGFyaXNvblN0cmluZyI6IGZ1bmN0aW9uKGZpZWxkVmFsdWUsIHRlc3RWYWx1ZSwgY29uZGl0aW9uKXsKICAgICAgICAgIHZhciB2YWxpZCA9IHRydWU7CgogICAgICAgICAgaWYgKCJpcyIgPT09IGNvbmRpdGlvbikgewogICAgICAgICAgICB2YWxpZCA9IGZpZWxkVmFsdWUgPT09IHRlc3RWYWx1ZTsKICAgICAgICAgIH0gZWxzZSBpZiAoImlzIG5vdCIgPT09IGNvbmRpdGlvbikgewogICAgICAgICAgICB2YWxpZCA9IGZpZWxkVmFsdWUgIT09IHRlc3RWYWx1ZTsKICAgICAgICAgIH0gZWxzZSBpZiAoImNvbnRhaW5zIiA9PT0gY29uZGl0aW9uKSB7CiAgICAgICAgICAgIHZhbGlkID0gZmllbGRWYWx1ZS5pbmRleE9mKHRlc3RWYWx1ZSkgIT09IC0xOwogICAgICAgICAgfSBlbHNlIGlmICgiZG9lcyBub3QgY29udGFpbiIgPT09IGNvbmRpdGlvbikgewogICAgICAgICAgICB2YWxpZCA9IGZpZWxkVmFsdWUuaW5kZXhPZih0ZXN0VmFsdWUpID09PSAtMTsKICAgICAgICAgIH0gZWxzZSBpZiAoImJlZ2lucyB3aXRoIiA9PT0gY29uZGl0aW9uKSB7CiAgICAgICAgICAgIHZhbGlkID0gZmllbGRWYWx1ZS5zdWJzdHJpbmcoMCwgdGVzdFZhbHVlLmxlbmd0aCkgPT09IHRlc3RWYWx1ZTsKICAgICAgICAgIH0gZWxzZSBpZiAoImVuZHMgd2l0aCIgPT09IGNvbmRpdGlvbikgewogICAgICAgICAgICB2YWxpZCA9IGZpZWxkVmFsdWUuc3Vic3RyaW5nKE1hdGgubWF4KDAsIChmaWVsZFZhbHVlLmxlbmd0aCAtIHRlc3RWYWx1ZS5sZW5ndGgpKSwgZmllbGRWYWx1ZS5sZW5ndGgpID09PSB0ZXN0VmFsdWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YWxpZCA9IGZhbHNlOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiB2YWxpZDsKICAgICAgICB9LAogICAgICAgICJudW1lcmljYWxDb21wYXJpc29uIjogZnVuY3Rpb24oZmllbGRWYWx1ZSwgdGVzdFZhbHVlLCBjb25kaXRpb24pewogICAgICAgICAgdmFyIGZpZWxkVmFsTnVtID0gcGFyc2VJbnQoZmllbGRWYWx1ZSwgMTApOwogICAgICAgICAgdmFyIHRlc3RWYWxOdW0gPSBwYXJzZUludCh0ZXN0VmFsdWUsIDEwKTsKCiAgICAgICAgICBpZihpc05hTihmaWVsZFZhbE51bSkgfHwgaXNOYU4odGVzdFZhbE51bSkpewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKCJpcyBlcXVhbCB0byIgPT09IGNvbmRpdGlvbikgewogICAgICAgICAgICByZXR1cm4gZmllbGRWYWxOdW0gPT09IHRlc3RWYWxOdW07CiAgICAgICAgICB9IGVsc2UgaWYgKCJpcyBsZXNzIHRoYW4iID09PSBjb25kaXRpb24pIHsKICAgICAgICAgICAgcmV0dXJuIGZpZWxkVmFsTnVtIDwgdGVzdFZhbE51bTsKICAgICAgICAgIH0gZWxzZSBpZiAoImlzIGdyZWF0ZXIgdGhhbiIgPT09IGNvbmRpdGlvbikgewogICAgICAgICAgICByZXR1cm4gZmllbGRWYWxOdW0gPiB0ZXN0VmFsTnVtOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImN2dFRpbWVUb1NlY29uZHMiOiBmdW5jdGlvbihmaWVsZFZhbHVlKSB7CiAgICAgICAgICB2YXIgdmFsaWQgPSBmYWxzZTsKICAgICAgICAgIHZhciBzZWNvbmRzID0gMDsKICAgICAgICAgIGlmICh0eXBlb2YgZmllbGRWYWx1ZSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgdmFyIHBhcnRzID0gZmllbGRWYWx1ZS5zcGxpdCgnOicpOwogICAgICAgICAgICB2YWxpZCA9IChwYXJ0cy5sZW5ndGggPT09IDIpIHx8IChwYXJ0cy5sZW5ndGggPT09IDMpOwogICAgICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgICAgICB2YWxpZCA9IGlzTnVtYmVyQmV0d2VlbihwYXJ0c1swXSwgMCwgMjMpOwogICAgICAgICAgICAgIHNlY29uZHMgKz0gKHBhcnNlSW50KHBhcnRzWzBdLCAxMCkgKiA2MCAqIDYwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgICAgICB2YWxpZCA9IGlzTnVtYmVyQmV0d2VlbihwYXJ0c1sxXSwgMCwgNTkpOwogICAgICAgICAgICAgIHNlY29uZHMgKz0gKHBhcnNlSW50KHBhcnRzWzFdLCAxMCkgKiA2MCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZhbGlkICYmIChwYXJ0cy5sZW5ndGggPT09IDMpKSB7CiAgICAgICAgICAgICAgdmFsaWQgPSBpc051bWJlckJldHdlZW4ocGFydHNbMl0sIDAsIDU5KTsKICAgICAgICAgICAgICBzZWNvbmRzICs9IHBhcnNlSW50KHBhcnRzWzJdLCAxMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB7dmFsaWQ6IHZhbGlkLCBzZWNvbmRzOiBzZWNvbmRzfTsKICAgICAgICB9CiAgICAgIH07CgoKCiAgICAgIHZhciBpc0ZpZWxkUnVsZVN1YmplY3QgPSBmdW5jdGlvbiAoZmllbGRJZCkgewogICAgICAgIHJldHVybiAhIWZpZWxkUnVsZVN1YmplY3RNYXBbZmllbGRJZF07CiAgICAgIH07CgogICAgICB2YXIgaXNQYWdlUnVsZVN1YmplY3QgPSBmdW5jdGlvbiAocGFnZUlkKSB7CiAgICAgICAgcmV0dXJuICEhcGFnZVJ1bGVTdWJqZWN0TWFwW3BhZ2VJZF07CiAgICAgIH07CgogICAgICBmdW5jdGlvbiBidWlsZEZpZWxkTWFwKGNiKSB7CiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGFsbCBmaWVsZHMgaW4gZm9ybSBkZWZpbml0aW9uICYgYnVpbGQgZmllbGRNYXAKICAgICAgICBhc3luYy5lYWNoKGRlZmluaXRpb24ucGFnZXMsIGZ1bmN0aW9uIChwYWdlLCBjYlBhZ2VzKSB7CiAgICAgICAgICBhc3luYy5lYWNoKHBhZ2UuZmllbGRzLCBmdW5jdGlvbiAoZmllbGQsIGNiRmllbGRzKSB7CiAgICAgICAgICAgIGZpZWxkLnBhZ2VJZCA9IHBhZ2UuX2lkOwoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIElmIHRoZSBmaWVsZCBpcyBhbiBhZG1pbiBmaWVsZCwgdGhlbiBpdCBpcyBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHZhbGlkYXRpb24gZm9yIGEgc3VibWlzc2lvbi4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIGlmKGZpZWxkLmFkbWluT25seSl7CiAgICAgICAgICAgICAgYWRtaW5GaWVsZE1hcFtmaWVsZC5faWRdID0gZmllbGQ7CiAgICAgICAgICAgICAgcmV0dXJuIGNiRmllbGRzKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZpZWxkLmZpZWxkT3B0aW9ucyA9IGZpZWxkLmZpZWxkT3B0aW9ucyA/IGZpZWxkLmZpZWxkT3B0aW9ucyA6IHt9OwogICAgICAgICAgICBmaWVsZC5maWVsZE9wdGlvbnMuZGVmaW5pdGlvbiA9IGZpZWxkLmZpZWxkT3B0aW9ucy5kZWZpbml0aW9uID8gZmllbGQuZmllbGRPcHRpb25zLmRlZmluaXRpb24gOiB7fTsKICAgICAgICAgICAgZmllbGQuZmllbGRPcHRpb25zLnZhbGlkYXRpb24gPSBmaWVsZC5maWVsZE9wdGlvbnMudmFsaWRhdGlvbiA/IGZpZWxkLmZpZWxkT3B0aW9ucy52YWxpZGF0aW9uIDoge307CgogICAgICAgICAgICBmaWVsZE1hcFtmaWVsZC5faWRdID0gZmllbGQ7CiAgICAgICAgICAgIGlmIChmaWVsZC5yZXF1aXJlZCkgewogICAgICAgICAgICAgIHJlcXVpcmVkRmllbGRNYXBbZmllbGQuX2lkXSA9IHsKICAgICAgICAgICAgICAgIGZpZWxkOiBmaWVsZCwKICAgICAgICAgICAgICAgIHN1Ym1pdHRlZDogZmFsc2UsCiAgICAgICAgICAgICAgICB2YWxpZGF0ZWQ6IGZhbHNlCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY2JGaWVsZHMoKTsKICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGNiUGFnZXMoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0sIGNiKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gYnVpbGRGaWVsZFJ1bGVNYXBzKGNiKSB7CiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGFsbCBydWxlcyBpbiBmb3JtIGRlZmluaXRpb24gJiBidWlsZCBydWxlU3ViamVjdE1hcAogICAgICAgIGFzeW5jLmVhY2goZGVmaW5pdGlvbi5maWVsZFJ1bGVzLCBmdW5jdGlvbiAocnVsZSwgY2JSdWxlcykgewogICAgICAgICAgYXN5bmMuZWFjaChydWxlLnJ1bGVDb25kaXRpb25hbFN0YXRlbWVudHMsIGZ1bmN0aW9uIChydWxlQ29uZGl0aW9uYWxTdGF0ZW1lbnQsIGNiUnVsZUNvbmRpdGlvbmFsU3RhdGVtZW50cykgewogICAgICAgICAgICB2YXIgZmllbGRJZCA9IHJ1bGVDb25kaXRpb25hbFN0YXRlbWVudC5zb3VyY2VGaWVsZDsKICAgICAgICAgICAgZmllbGRSdWxlUHJlZGljYXRlTWFwW2ZpZWxkSWRdID0gZmllbGRSdWxlUHJlZGljYXRlTWFwW2ZpZWxkSWRdIHx8IFtdOwogICAgICAgICAgICBmaWVsZFJ1bGVQcmVkaWNhdGVNYXBbZmllbGRJZF0ucHVzaChydWxlKTsKICAgICAgICAgICAgcmV0dXJuIGNiUnVsZUNvbmRpdGlvbmFsU3RhdGVtZW50cygpOwogICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIFRhcmdldCBmaWVsZHMgYXJlIGFuIGFycmF5IG9mIGZpZWxkSWRzIHRoYXQgY2FuIGJlIHRhcmdldGVkIGJ5IGEgZmllbGQgcnVsZQogICAgICAgICAgICAgKiBUbyBtYWludGFpbiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgdGhlIGNhc2Ugd2hlcmUgdGhlIHRhcmdldFBhZ2UgaXMgbm90IGFuIGFycmF5IGhhcyB0byBiZSBjb25zaWRlcmVkCiAgICAgICAgICAgICAqIEB0eXBlIHsqfEFycmF5fQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheShydWxlLnRhcmdldEZpZWxkKSl7CiAgICAgICAgICAgICAgYXN5bmMuZWFjaChydWxlLnRhcmdldEZpZWxkLCBmdW5jdGlvbih0YXJnZXRGaWVsZCwgY2IpewogICAgICAgICAgICAgICAgZmllbGRSdWxlU3ViamVjdE1hcFt0YXJnZXRGaWVsZF0gPSBmaWVsZFJ1bGVTdWJqZWN0TWFwW3RhcmdldEZpZWxkXSB8fCBbXTsKICAgICAgICAgICAgICAgIGZpZWxkUnVsZVN1YmplY3RNYXBbdGFyZ2V0RmllbGRdLnB1c2gocnVsZSk7CiAgICAgICAgICAgICAgICBjYigpOwogICAgICAgICAgICAgIH0sIGNiUnVsZXMpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGZpZWxkUnVsZVN1YmplY3RNYXBbcnVsZS50YXJnZXRGaWVsZF0gPSBmaWVsZFJ1bGVTdWJqZWN0TWFwW3J1bGUudGFyZ2V0RmllbGRdIHx8IFtdOwogICAgICAgICAgICAgIGZpZWxkUnVsZVN1YmplY3RNYXBbcnVsZS50YXJnZXRGaWVsZF0ucHVzaChydWxlKTsKICAgICAgICAgICAgICByZXR1cm4gY2JSdWxlcygpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9LCBjYik7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGJ1aWxkUGFnZVJ1bGVNYXAoY2IpIHsKICAgICAgICAvLyBJdGVyYXRlIG92ZXIgYWxsIHJ1bGVzIGluIGZvcm0gZGVmaW5pdGlvbiAmIGJ1aWxkIHJ1bGVTdWJqZWN0TWFwCiAgICAgICAgYXN5bmMuZWFjaChkZWZpbml0aW9uLnBhZ2VSdWxlcywgZnVuY3Rpb24gKHJ1bGUsIGNiUnVsZXMpIHsKICAgICAgICAgIGFzeW5jLmVhY2gocnVsZS5ydWxlQ29uZGl0aW9uYWxTdGF0ZW1lbnRzLCBmdW5jdGlvbiAocnVsZUNvbmRpdGlvbmFsU3RhdGVtZW50LCBjYlJ1bGVQcmVkaWNhdGVzKSB7CiAgICAgICAgICAgIHZhciBmaWVsZElkID0gcnVsZUNvbmRpdGlvbmFsU3RhdGVtZW50LnNvdXJjZUZpZWxkOwogICAgICAgICAgICBwYWdlUnVsZVByZWRpY2F0ZU1hcFtmaWVsZElkXSA9IHBhZ2VSdWxlUHJlZGljYXRlTWFwW2ZpZWxkSWRdIHx8IFtdOwogICAgICAgICAgICBwYWdlUnVsZVByZWRpY2F0ZU1hcFtmaWVsZElkXS5wdXNoKHJ1bGUpOwogICAgICAgICAgICByZXR1cm4gY2JSdWxlUHJlZGljYXRlcygpOwogICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIFRhcmdldCBwYWdlcyBhcmUgYW4gYXJyYXkgb2YgcGFnZUlkcyB0aGF0IGNhbiBiZSB0YXJnZXRlZCBieSBhIHBhZ2UgcnVsZQogICAgICAgICAgICAgKiBUbyBtYWludGFpbiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgdGhlIGNhc2Ugd2hlcmUgdGhlIHRhcmdldFBhZ2UgaXMgbm90IGFuIGFycmF5IGhhcyB0byBiZSBjb25zaWRlcmVkCiAgICAgICAgICAgICAqIEB0eXBlIHsqfEFycmF5fQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheShydWxlLnRhcmdldFBhZ2UpKXsKICAgICAgICAgICAgICBhc3luYy5lYWNoKHJ1bGUudGFyZ2V0UGFnZSwgZnVuY3Rpb24odGFyZ2V0UGFnZSwgY2IpewogICAgICAgICAgICAgICAgcGFnZVJ1bGVTdWJqZWN0TWFwW3RhcmdldFBhZ2VdID0gcGFnZVJ1bGVTdWJqZWN0TWFwW3RhcmdldFBhZ2VdIHx8IFtdOwogICAgICAgICAgICAgICAgcGFnZVJ1bGVTdWJqZWN0TWFwW3RhcmdldFBhZ2VdLnB1c2gocnVsZSk7CiAgICAgICAgICAgICAgICBjYigpOwogICAgICAgICAgICAgIH0sIGNiUnVsZXMpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHBhZ2VSdWxlU3ViamVjdE1hcFtydWxlLnRhcmdldFBhZ2VdID0gcGFnZVJ1bGVTdWJqZWN0TWFwW3J1bGUudGFyZ2V0UGFnZV0gfHwgW107CiAgICAgICAgICAgICAgcGFnZVJ1bGVTdWJqZWN0TWFwW3J1bGUudGFyZ2V0UGFnZV0ucHVzaChydWxlKTsKICAgICAgICAgICAgICByZXR1cm4gY2JSdWxlcygpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9LCBjYik7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGJ1aWxkU3VibWlzc2lvbkZpZWxkc01hcChjYikgewogICAgICAgIHN1Ym1pc3Npb25SZXF1aXJlZEZpZWxkc01hcCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVxdWlyZWRGaWVsZE1hcCkpOyAvLyBjbG9uZSB0aGUgbWFwIGZvciB1c2Ugd2l0aCB0aGlzIHN1Ym1pc3Npb24KICAgICAgICBzdWJtaXNzaW9uRmllbGRzTWFwID0ge307IC8vIHN0YXJ0IHdpdGggZW1wdHkgbWFwLCBydWxlc0VuZ2luZSBjYW4gYmUgY2FsbGVkIHdpdGggbXVsdGlwbGUgc3VibWlzc2lvbnMKCiAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIGFsbCB0aGUgZmllbGRzIGluIHRoZSBzdWJtaXNzaW9ucyBhbmQgYnVpbGQgYSBtYXAgZm9yIGVhc2llciBsb29rdXAKICAgICAgICBhc3luYy5lYWNoKHN1Ym1pc3Npb24uZm9ybUZpZWxkcywgZnVuY3Rpb24gKGZvcm1GaWVsZCwgY2IpIHsKICAgICAgICAgIGlmICghZm9ybUZpZWxkLmZpZWxkSWQpIHJldHVybiBjYihuZXcgRXJyb3IoIk5vIGZpZWxkSWQgaW4gdGhpcyBzdWJtaXNzaW9uIGVudHJ5OiAiICsgdXRpbC5pbnNwZWN0KGZvcm1GaWVsZCkpKTsKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIElmIHRoZSBmaWVsZCBwYXNzZWQgaW4gYSBzdWJtaXNzaW9uIGlzIGFuIGFkbWluIGZpZWxkLCB0aGVuIHJldHVybiBhbiBlcnJvci4KICAgICAgICAgICAqLwogICAgICAgICAgaWYoYWRtaW5GaWVsZE1hcFtmb3JtRmllbGQuZmllbGRJZF0pewogICAgICAgICAgICByZXR1cm4gY2IoIlN1Ym1pc3Npb24gIiArIGZvcm1GaWVsZC5maWVsZElkICsgIiBpcyBhbiBhZG1pbiBmaWVsZC4gQWRtaW4gZmllbGRzIGNhbm5vdCBiZSBwYXNzZWQgdG8gdGhlIHJ1bGVzIGVuZ2luZS4iKTsKICAgICAgICAgIH0KCiAgICAgICAgICBzdWJtaXNzaW9uRmllbGRzTWFwW2Zvcm1GaWVsZC5maWVsZElkXSA9IGZvcm1GaWVsZDsKICAgICAgICAgIHJldHVybiBjYigpOwogICAgICAgIH0sIGNiKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gaW5pdChjYikgewogICAgICAgIGlmIChpbml0aWFsaXNlZCkgcmV0dXJuIGNiKCk7CiAgICAgICAgYXN5bmMucGFyYWxsZWwoWwogICAgICAgICAgYnVpbGRGaWVsZE1hcCwKICAgICAgICAgIGJ1aWxkRmllbGRSdWxlTWFwcywKICAgICAgICAgIGJ1aWxkUGFnZVJ1bGVNYXAKICAgICAgICBdLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgIGluaXRpYWxpc2VkID0gdHJ1ZTsKICAgICAgICAgIHJldHVybiBjYigpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBmdW5jdGlvbiBpbml0U3VibWlzc2lvbihmb3JtU3VibWlzc2lvbiwgY2IpIHsKICAgICAgICBpbml0KGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwoKICAgICAgICAgIHN1Ym1pc3Npb24gPSBmb3JtU3VibWlzc2lvbjsKICAgICAgICAgIGJ1aWxkU3VibWlzc2lvbkZpZWxkc01hcChjYik7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGdldFByZXZpb3VzRmllbGRWYWx1ZXMoc3VibWl0dGVkRmllbGQsIHByZXZpb3VzU3VibWlzc2lvbiwgY2IpIHsKICAgICAgICBpZiAocHJldmlvdXNTdWJtaXNzaW9uICYmIHByZXZpb3VzU3VibWlzc2lvbi5mb3JtRmllbGRzKSB7CiAgICAgICAgICBhc3luYy5maWx0ZXIocHJldmlvdXNTdWJtaXNzaW9uLmZvcm1GaWVsZHMsIGZ1bmN0aW9uIChmb3JtRmllbGQsIGNiKSB7CiAgICAgICAgICAgIHJldHVybiBjYihmb3JtRmllbGQuZmllbGRJZC50b1N0cmluZygpID09PSBzdWJtaXR0ZWRGaWVsZC5maWVsZElkLnRvU3RyaW5nKCkpOwogICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgICAgICAgdmFyIHByZXZpb3VzRmllbGRWYWx1ZXMgPSBudWxsOwogICAgICAgICAgICBpZiAocmVzdWx0cyAmJiByZXN1bHRzWzBdICYmIHJlc3VsdHNbMF0uZmllbGRWYWx1ZXMpIHsKICAgICAgICAgICAgICBwcmV2aW91c0ZpZWxkVmFsdWVzID0gcmVzdWx0c1swXS5maWVsZFZhbHVlczsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCBwcmV2aW91c0ZpZWxkVmFsdWVzKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlRm9ybShzdWJtaXNzaW9uLCBwcmV2aW91c1N1Ym1pc3Npb24sIGNiKSB7CiAgICAgICAgaWYgKCJmdW5jdGlvbiIgPT09IHR5cGVvZiBwcmV2aW91c1N1Ym1pc3Npb24pIHsKICAgICAgICAgIGNiID0gcHJldmlvdXNTdWJtaXNzaW9uOwogICAgICAgICAgcHJldmlvdXNTdWJtaXNzaW9uID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgaW5pdChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKCiAgICAgICAgICBpbml0U3VibWlzc2lvbihzdWJtaXNzaW9uLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwoKICAgICAgICAgICAgYXN5bmMud2F0ZXJmYWxsKFsKCiAgICAgICAgICAgICAgZnVuY3Rpb24gKGNiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCB7CiAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IHsKICAgICAgICAgICAgICAgICAgICB2YWxpZDogdHJ1ZQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsgLy8gYW55IGludmFsaWQgZmllbGRzIHdpbGwgc2V0IHRoaXMgdG8gZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXMsIGNiKSB7CiAgICAgICAgICAgICAgICB2YWxpZGF0ZVN1Ym1pdHRlZEZpZWxkcyhyZXMsIHByZXZpb3VzU3VibWlzc2lvbiwgY2IpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgY2hlY2tJZlJlcXVpcmVkRmllbGRzTm90U3VibWl0dGVkCiAgICAgICAgICAgIF0sIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHsKICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKCiAgICAgICAgICAgICAgcmV0dXJuIGNiKHVuZGVmaW5lZCwgcmVzdWx0cyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlU3VibWl0dGVkRmllbGRzKHJlcywgcHJldmlvdXNTdWJtaXNzaW9uLCBjYikgewogICAgICAgIC8vIGZvciBlYWNoIGZpZWxkLCBjYWxsIHZhbGlkYXRlRmllbGQKICAgICAgICBhc3luYy5lYWNoKHN1Ym1pc3Npb24uZm9ybUZpZWxkcywgZnVuY3Rpb24gKHN1Ym1pdHRlZEZpZWxkLCBjYWxsYmFjaykgewogICAgICAgICAgdmFyIGZpZWxkSUQgPSBzdWJtaXR0ZWRGaWVsZC5maWVsZElkOwogICAgICAgICAgdmFyIGZpZWxkRGVmID0gZmllbGRNYXBbZmllbGRJRF07CgogICAgICAgICAgZ2V0UHJldmlvdXNGaWVsZFZhbHVlcyhzdWJtaXR0ZWRGaWVsZCwgcHJldmlvdXNTdWJtaXNzaW9uLCBmdW5jdGlvbiAoZXJyLCBwcmV2aW91c0ZpZWxkVmFsdWVzKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpOwogICAgICAgICAgICBnZXRGaWVsZFZhbGlkYXRpb25TdGF0dXMoc3VibWl0dGVkRmllbGQsIGZpZWxkRGVmLCBwcmV2aW91c0ZpZWxkVmFsdWVzLCBmdW5jdGlvbiAoZXJyLCBmaWVsZFJlcykgewogICAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpOwoKICAgICAgICAgICAgICBpZiAoIWZpZWxkUmVzLnZhbGlkKSB7CiAgICAgICAgICAgICAgICByZXMudmFsaWRhdGlvbi52YWxpZCA9IGZhbHNlOyAvLyBpbmRpY2F0ZSBpbnZhbGlkIGZvcm0gaWYgYW55IGZpZWxkcyBpbnZhbGlkCiAgICAgICAgICAgICAgICByZXMudmFsaWRhdGlvbltmaWVsZElEXSA9IGZpZWxkUmVzOyAvLyBhZGQgaW52YWxpZCBmaWVsZCBpbmZvIHRvIHZhbGlkYXRlIGZvcm0gcmVzdWx0CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgfSk7CiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBjYih1bmRlZmluZWQsIHJlcyk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGNoZWNrSWZSZXF1aXJlZEZpZWxkc05vdFN1Ym1pdHRlZChyZXMsIGNiKSB7CiAgICAgICAgYXN5bmMuZWFjaChPYmplY3Qua2V5cyhzdWJtaXNzaW9uUmVxdWlyZWRGaWVsZHNNYXApLCBmdW5jdGlvbiAocmVxdWlyZWRGaWVsZElkLCBjYikgewogICAgICAgICAgdmFyIHJlc0ZpZWxkID0ge307CiAgICAgICAgICBpZiAoIXN1Ym1pc3Npb25SZXF1aXJlZEZpZWxkc01hcFtyZXF1aXJlZEZpZWxkSWRdLnN1Ym1pdHRlZCkgewogICAgICAgICAgICBpc0ZpZWxkVmlzaWJsZShyZXF1aXJlZEZpZWxkSWQsIHRydWUsIGZ1bmN0aW9uIChlcnIsIHZpc2libGUpIHsKICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgICAgICBpZiAodmlzaWJsZSkgeyAvLyB3ZSBvbmx5IGNhcmUgYWJvdXQgcmVxdWlyZWQgZmllbGRzIGlmIHRoZXkgYXJlIHZpc2libGUKICAgICAgICAgICAgICAgIHJlc0ZpZWxkLmZpZWxkSWQgPSByZXF1aXJlZEZpZWxkSWQ7CiAgICAgICAgICAgICAgICByZXNGaWVsZC52YWxpZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgcmVzRmllbGQuZmllbGRFcnJvck1lc3NhZ2UgPSBbIlJlcXVpcmVkIEZpZWxkIE5vdCBTdWJtaXR0ZWQiXTsKICAgICAgICAgICAgICAgIHJlcy52YWxpZGF0aW9uW3JlcXVpcmVkRmllbGRJZF0gPSByZXNGaWVsZDsKICAgICAgICAgICAgICAgIHJlcy52YWxpZGF0aW9uLnZhbGlkID0gZmFsc2U7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBjYigpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7IC8vIHdhcyBpbmNsdWRlZCBpbiBzdWJtaXNzaW9uCiAgICAgICAgICAgIHJldHVybiBjYigpOwogICAgICAgICAgfQogICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwoKICAgICAgICAgIHJldHVybiBjYih1bmRlZmluZWQsIHJlcyk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIC8qCiAgICAgICAqIHZhbGlkYXRlIG9ubHkgZmllbGQgdmFsdWVzIG9uIHZhbGlkYXRpb24gKG5vIHJ1bGVzLCBubyByZXBlYXQgY2hlY2tpbmcpCiAgICAgICAqICAgICByZXM6CiAgICAgICAqICAgICAidmFsaWRhdGlvbiI6ewogICAgICAgKiAgICAgICAgICAgICAiZmllbGRJZCI6ewogICAgICAgKiAgICAgICAgICAgICAgICAgImZpZWxkSWQiOiIiLAogICAgICAgKiAgICAgICAgICAgICAgICAgInZhbGlkIjp0cnVlLAogICAgICAgKiAgICAgICAgICAgICAgICAgImVycm9yTWVzc2FnZXMiOlsKICAgICAgICogICAgICAgICAgICAgICAgICAgICAibGVuZ3RoIHNob3VsZCBiZSAzIHRvIDUiLAogICAgICAgKiAgICAgICAgICAgICAgICAgICAgICJzaG91bGQgbm90IGNvbnRhaW4gZGFtbWl0IgogICAgICAgKiAgICAgICAgICAgICAgICAgXQogICAgICAgKiAgICAgICAgICAgICB9CiAgICAgICAqICAgICAgICAgfQogICAgICAgKi8KICAgICAgZnVuY3Rpb24gdmFsaWRhdGVGaWVsZChmaWVsZElkLCBzdWJtaXNzaW9uLCBjYikgewogICAgICAgIGluaXQoZnVuY3Rpb24gKGVycikgewogICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7CgogICAgICAgICAgaW5pdFN1Ym1pc3Npb24oc3VibWlzc2lvbiwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKCiAgICAgICAgICAgIHZhciBzdWJtaXNzaW9uRmllbGQgPSBzdWJtaXNzaW9uRmllbGRzTWFwW2ZpZWxkSWRdOwogICAgICAgICAgICB2YXIgZmllbGREZWYgPSBmaWVsZE1hcFtmaWVsZElkXTsKICAgICAgICAgICAgZ2V0RmllbGRWYWxpZGF0aW9uU3RhdHVzKHN1Ym1pc3Npb25GaWVsZCwgZmllbGREZWYsIG51bGwsIGZ1bmN0aW9uIChlcnIsIHJlcykgewogICAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwogICAgICAgICAgICAgIHZhciByZXQgPSB7CiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiB7fQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgcmV0LnZhbGlkYXRpb25bZmllbGRJZF0gPSByZXM7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKHVuZGVmaW5lZCwgcmV0KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgLyoKICAgICAgICogdmFsaWRhdGUgb25seSBzaW5nbGUgZmllbGQgdmFsdWUgKG5vIHJ1bGVzLCBubyByZXBlYXQgY2hlY2tpbmcpCiAgICAgICAqIGNiKGVyciwgcmVzdWx0KQogICAgICAgKiBleGFtcGxlIG9mIHJlc3VsdDoKICAgICAgICogInZhbGlkYXRpb24iOnsKICAgICAgICogICAgICAgICAiZmllbGRJZCI6ewogICAgICAgKiAgICAgICAgICAgICAiZmllbGRJZCI6IiIsCiAgICAgICAqICAgICAgICAgICAgICJ2YWxpZCI6dHJ1ZSwKICAgICAgICogICAgICAgICAgICAgImVycm9yTWVzc2FnZXMiOlsKICAgICAgICogICAgICAgICAgICAgICAgICJsZW5ndGggc2hvdWxkIGJlIDMgdG8gNSIsCiAgICAgICAqICAgICAgICAgICAgICAgICAic2hvdWxkIG5vdCBjb250YWluIGRhbW1pdCIKICAgICAgICogICAgICAgICAgICAgXQogICAgICAgKiAgICAgICAgIH0KICAgICAgICogICAgIH0KICAgICAgICovCiAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlRmllbGRWYWx1ZShmaWVsZElkLCBpbnB1dFZhbHVlLCB2YWx1ZUluZGV4LCBjYikgewogICAgICAgIGlmICgiZnVuY3Rpb24iID09PSB0eXBlb2YgdmFsdWVJbmRleCkgewogICAgICAgICAgY2IgPSB2YWx1ZUluZGV4OwogICAgICAgICAgdmFsdWVJbmRleCA9IDA7CiAgICAgICAgfQoKICAgICAgICBpbml0KGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwogICAgICAgICAgdmFyIGZpZWxkRGVmaW5pdGlvbiA9IGZpZWxkTWFwW2ZpZWxkSWRdOwoKICAgICAgICAgIHZhciByZXF1aXJlZCA9IGZhbHNlOwogICAgICAgICAgaWYgKGZpZWxkRGVmaW5pdGlvbi5yZXBlYXRpbmcgJiYKICAgICAgICAgICAgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucyAmJgogICAgICAgICAgICBmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zLmRlZmluaXRpb24gJiYKICAgICAgICAgICAgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy5kZWZpbml0aW9uLm1pblJlcGVhdCkgewogICAgICAgICAgICByZXF1aXJlZCA9ICh2YWx1ZUluZGV4IDwgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy5kZWZpbml0aW9uLm1pblJlcGVhdCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXF1aXJlZCA9IGZpZWxkRGVmaW5pdGlvbi5yZXF1aXJlZDsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgdmFsaWRhdGlvbiA9IChmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zICYmIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMudmFsaWRhdGlvbikgPyBmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zLnZhbGlkYXRpb24gOiB1bmRlZmluZWQ7CgogICAgICAgICAgaWYgKHZhbGlkYXRpb24gJiYgZmFsc2UgPT09IHZhbGlkYXRpb24udmFsaWRhdGVJbW1lZGlhdGVseSkgewogICAgICAgICAgICB2YXIgcmV0ID0gewogICAgICAgICAgICAgIHZhbGlkYXRpb246IHt9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldC52YWxpZGF0aW9uW2ZpZWxkSWRdID0gewogICAgICAgICAgICAgICJ2YWxpZCI6IHRydWUKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuIGNiKHVuZGVmaW5lZCwgcmV0KTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoZmllbGRFbXB0eShpbnB1dFZhbHVlKSkgewogICAgICAgICAgICBpZiAocmVxdWlyZWQpIHsKICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0UmVzcG9uc2UoIk5vIHZhbHVlIHNwZWNpZmllZCBmb3IgcmVxdWlyZWQgaW5wdXQiLCBjYik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFJlc3BvbnNlKHVuZGVmaW5lZCwgY2IpOyAvLyBvcHRpb25hbCBmaWVsZCBub3Qgc3VwcGxpZWQgaXMgdmFsaWQKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIG5vdCBlbXB0eSBuZWVkIHRvIHZhbGlkYXRlCiAgICAgICAgICBnZXRDbGllbnRWYWxpZGF0b3JGdW5jdGlvbihmaWVsZERlZmluaXRpb24udHlwZSwgZnVuY3Rpb24gKGVyciwgdmFsaWRhdG9yKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwoKICAgICAgICAgICAgdmFsaWRhdG9yKGlucHV0VmFsdWUsIGZpZWxkRGVmaW5pdGlvbiwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgdmFyIG1lc3NhZ2U7CiAgICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgICAgaWYgKGVyci5tZXNzYWdlKSB7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAiVW5rbm93biBlcnJvciBtZXNzYWdlIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9ybWF0UmVzcG9uc2UobWVzc2FnZSwgY2IpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICBmdW5jdGlvbiBmb3JtYXRSZXNwb25zZShtc2csIGNiKSB7CiAgICAgICAgICB2YXIgbWVzc2FnZXMgPSB7CiAgICAgICAgICAgIGVycm9yTWVzc2FnZXM6IFtdCiAgICAgICAgICB9OwogICAgICAgICAgaWYgKG1zZykgewogICAgICAgICAgICBtZXNzYWdlcy5lcnJvck1lc3NhZ2VzLnB1c2gobXNnKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBjcmVhdGVWYWxpZGF0b3JSZXNwb25zZShmaWVsZElkLCBtZXNzYWdlcywgZnVuY3Rpb24gKGVyciwgcmVzKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwogICAgICAgICAgICB2YXIgcmV0ID0gewogICAgICAgICAgICAgIHZhbGlkYXRpb246IHt9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldC52YWxpZGF0aW9uW2ZpZWxkSWRdID0gcmVzOwogICAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCByZXQpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBmdW5jdGlvbiBjcmVhdGVWYWxpZGF0b3JSZXNwb25zZShmaWVsZElkLCBtZXNzYWdlcywgY2IpIHsKICAgICAgICAvLyBpbnRlbnRpb25hbGx5IG5vdCBjaGVja2luZyBlcnIgaGVyZSwgdXNlZCBmdXJ0aGVyIGRvd24gdG8gZ2V0IHZhbGlkYXRpb24gZXJyb3JzCiAgICAgICAgdmFyIHJlcyA9IHt9OwogICAgICAgIHJlcy5maWVsZElkID0gZmllbGRJZDsKICAgICAgICByZXMuZXJyb3JNZXNzYWdlcyA9IG1lc3NhZ2VzLmVycm9yTWVzc2FnZXMgfHwgW107CiAgICAgICAgcmVzLmZpZWxkRXJyb3JNZXNzYWdlID0gbWVzc2FnZXMuZmllbGRFcnJvck1lc3NhZ2UgfHwgW107CiAgICAgICAgYXN5bmMuc29tZShyZXMuZXJyb3JNZXNzYWdlcywgZnVuY3Rpb24gKGl0ZW0sIGNiKSB7CiAgICAgICAgICByZXR1cm4gY2IoaXRlbSAhPT0gbnVsbCk7CiAgICAgICAgfSwgZnVuY3Rpb24gKHNvbWVFcnJvcnMpIHsKICAgICAgICAgIHJlcy52YWxpZCA9ICFzb21lRXJyb3JzICYmIChyZXMuZmllbGRFcnJvck1lc3NhZ2UubGVuZ3RoIDwgMSk7CgogICAgICAgICAgcmV0dXJuIGNiKHVuZGVmaW5lZCwgcmVzKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gZ2V0RmllbGRWYWxpZGF0aW9uU3RhdHVzKHN1Ym1pdHRlZEZpZWxkLCBmaWVsZERlZiwgcHJldmlvdXNGaWVsZFZhbHVlcywgY2IpIHsKICAgICAgICBpc0ZpZWxkVmlzaWJsZShmaWVsZERlZi5faWQsIHRydWUsIGZ1bmN0aW9uKGVyciwgdmlzaWJsZSl7CiAgICAgICAgICBpZihlcnIpewogICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhbGlkYXRlRmllbGRJbnRlcm5hbChzdWJtaXR0ZWRGaWVsZCwgZmllbGREZWYsIHByZXZpb3VzRmllbGRWYWx1ZXMsIHZpc2libGUsIGZ1bmN0aW9uIChlcnIsIG1lc3NhZ2VzKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwogICAgICAgICAgICBjcmVhdGVWYWxpZGF0b3JSZXNwb25zZShzdWJtaXR0ZWRGaWVsZC5maWVsZElkLCBtZXNzYWdlcywgY2IpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGdldE1hcEZ1bmN0aW9uKGtleSwgbWFwLCBjYikgewogICAgICAgIHZhciB2YWxpZGF0b3IgPSBtYXBba2V5XTsKICAgICAgICBpZiAoIXZhbGlkYXRvcikgewogICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiSW52YWxpZCBGaWVsZCBUeXBlICIgKyBrZXkpKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBjYih1bmRlZmluZWQsIHZhbGlkYXRvcik7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGdldFZhbGlkYXRvckZ1bmN0aW9uKGZpZWxkVHlwZSwgY2IpIHsKICAgICAgICByZXR1cm4gZ2V0TWFwRnVuY3Rpb24oZmllbGRUeXBlLCB2YWxpZGF0b3JzTWFwLCBjYik7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGdldENsaWVudFZhbGlkYXRvckZ1bmN0aW9uKGZpZWxkVHlwZSwgY2IpIHsKICAgICAgICByZXR1cm4gZ2V0TWFwRnVuY3Rpb24oZmllbGRUeXBlLCB2YWxpZGF0b3JzQ2xpZW50TWFwLCBjYik7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGZpZWxkRW1wdHkoZmllbGRWYWx1ZSkgewogICAgICAgIHJldHVybiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBmaWVsZFZhbHVlIHx8IG51bGwgPT09IGZpZWxkVmFsdWUgfHwgIiIgPT09IGZpZWxkVmFsdWUpOyAvLyBlbXB0eSBzdHJpbmcgYWxzbyByZWdhcmRlZCBhcyBub3Qgc3BlY2lmaWVkCiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlRmllbGRJbnRlcm5hbChzdWJtaXR0ZWRGaWVsZCwgZmllbGREZWYsIHByZXZpb3VzRmllbGRWYWx1ZXMsIHZpc2libGUsIGNiKSB7CiAgICAgICAgcHJldmlvdXNGaWVsZFZhbHVlcyA9IHByZXZpb3VzRmllbGRWYWx1ZXMgfHwgbnVsbDsKICAgICAgICBjb3VudFN1Ym1pdHRlZFZhbHVlcyhzdWJtaXR0ZWRGaWVsZCwgZnVuY3Rpb24gKGVyciwgbnVtU3VibWl0dGVkVmFsdWVzKSB7CiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgIGFzeW5jLnNlcmllcyh7CiAgICAgICAgICAgIHZhbHVlc1N1Ym1pdHRlZDogYXN5bmMuYXBwbHkoY2hlY2tWYWx1ZVN1Ym1pdHRlZCwgc3VibWl0dGVkRmllbGQsIGZpZWxkRGVmLCB2aXNpYmxlKSwKICAgICAgICAgICAgcmVwZWF0czogYXN5bmMuYXBwbHkoY2hlY2tSZXBlYXQsIG51bVN1Ym1pdHRlZFZhbHVlcywgZmllbGREZWYsIHZpc2libGUpLAogICAgICAgICAgICB2YWx1ZXM6IGFzeW5jLmFwcGx5KGNoZWNrVmFsdWVzLCBzdWJtaXR0ZWRGaWVsZCwgZmllbGREZWYsIHByZXZpb3VzRmllbGRWYWx1ZXMpCiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwoKICAgICAgICAgICAgdmFyIGZpZWxkRXJyb3JNZXNzYWdlcyA9IFtdOwogICAgICAgICAgICBpZiAocmVzdWx0cy52YWx1ZXNTdWJtaXR0ZWQpIHsKICAgICAgICAgICAgICBmaWVsZEVycm9yTWVzc2FnZXMucHVzaChyZXN1bHRzLnZhbHVlc1N1Ym1pdHRlZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJlc3VsdHMucmVwZWF0cykgewogICAgICAgICAgICAgIGZpZWxkRXJyb3JNZXNzYWdlcy5wdXNoKHJlc3VsdHMucmVwZWF0cyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGNiKHVuZGVmaW5lZCwgewogICAgICAgICAgICAgIGZpZWxkRXJyb3JNZXNzYWdlOiBmaWVsZEVycm9yTWVzc2FnZXMsCiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlczogcmVzdWx0cy52YWx1ZXMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuOyAvLyBqdXN0IGZ1bmN0aW9ucyBiZWxvdyB0aGlzCgogICAgICAgIGZ1bmN0aW9uIGNoZWNrVmFsdWVTdWJtaXR0ZWQoc3VibWl0dGVkRmllbGQsIGZpZWxkRGVmaW5pdGlvbiwgdmlzaWJsZSwgY2IpIHsKICAgICAgICAgIGlmICghZmllbGREZWZpbml0aW9uLnJlcXVpcmVkKSByZXR1cm4gY2IodW5kZWZpbmVkLCBudWxsKTsKCiAgICAgICAgICB2YXIgdmFsdWVTdWJtaXR0ZWQgPSBzdWJtaXR0ZWRGaWVsZCAmJiBzdWJtaXR0ZWRGaWVsZC5maWVsZFZhbHVlcyAmJiAoc3VibWl0dGVkRmllbGQuZmllbGRWYWx1ZXMubGVuZ3RoID4gMCk7CiAgICAgICAgICAvL05vIHZhbHVlIHN1Ym1pdHRlZCBpcyBvbmx5IGFuIGVycm9yIGlmIHRoZSBmaWVsZCBpcyB2aXNpYmxlLgogICAgICAgICAgaWYgKCF2YWx1ZVN1Ym1pdHRlZCAmJiB2aXNpYmxlKSB7CiAgICAgICAgICAgIHJldHVybiBjYih1bmRlZmluZWQsICJObyB2YWx1ZSBzdWJtaXR0ZWQgZm9yIGZpZWxkICIgKyBmaWVsZERlZmluaXRpb24ubmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCBudWxsKTsKCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjb3VudFN1Ym1pdHRlZFZhbHVlcyhzdWJtaXR0ZWRGaWVsZCwgY2IpIHsKICAgICAgICAgIHZhciBudW1TdWJtaXR0ZWRWYWx1ZXMgPSAwOwogICAgICAgICAgaWYgKHN1Ym1pdHRlZEZpZWxkICYmIHN1Ym1pdHRlZEZpZWxkLmZpZWxkVmFsdWVzICYmIHN1Ym1pdHRlZEZpZWxkLmZpZWxkVmFsdWVzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJtaXR0ZWRGaWVsZC5maWVsZFZhbHVlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgIGlmIChzdWJtaXR0ZWRGaWVsZC5maWVsZFZhbHVlc1tpXSkgewogICAgICAgICAgICAgICAgbnVtU3VibWl0dGVkVmFsdWVzICs9IDE7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCBudW1TdWJtaXR0ZWRWYWx1ZXMpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gY2hlY2tSZXBlYXQobnVtU3VibWl0dGVkVmFsdWVzLCBmaWVsZERlZmluaXRpb24sIHZpc2libGUsIGNiKSB7CiAgICAgICAgICAvL0lmIHRoZSBmaWVsZCBpcyBub3QgdmlzaWJsZSwgdGhlbiBjaGVja2luZyB0aGUgcmVwZWF0aW5nIHZhbHVlcyBvZiB0aGUgZmllbGQgaXMgbm90IHJlcXVpcmVkCiAgICAgICAgICBpZighdmlzaWJsZSl7CiAgICAgICAgICAgIHJldHVybiBjYih1bmRlZmluZWQsIG51bGwpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChmaWVsZERlZmluaXRpb24ucmVwZWF0aW5nICYmIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMgJiYgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy5kZWZpbml0aW9uKSB7CiAgICAgICAgICAgIGlmIChmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zLmRlZmluaXRpb24ubWluUmVwZWF0KSB7CiAgICAgICAgICAgICAgaWYgKG51bVN1Ym1pdHRlZFZhbHVlcyA8IGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMuZGVmaW5pdGlvbi5taW5SZXBlYXQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYih1bmRlZmluZWQsICJFeHBlY3RlZCBtaW4gb2YgIiArIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMuZGVmaW5pdGlvbi5taW5SZXBlYXQgKyAiIHZhbHVlcyBmb3IgZmllbGQgIiArIGZpZWxkRGVmaW5pdGlvbi5uYW1lICsgIiBidXQgZ290ICIgKyBudW1TdWJtaXR0ZWRWYWx1ZXMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMuZGVmaW5pdGlvbi5tYXhSZXBlYXQpIHsKICAgICAgICAgICAgICBpZiAobnVtU3VibWl0dGVkVmFsdWVzID4gZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy5kZWZpbml0aW9uLm1heFJlcGVhdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGNiKHVuZGVmaW5lZCwgIkV4cGVjdGVkIG1heCBvZiAiICsgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy5kZWZpbml0aW9uLm1heFJlcGVhdCArICIgdmFsdWVzIGZvciBmaWVsZCAiICsgZmllbGREZWZpbml0aW9uLm5hbWUgKyAiIGJ1dCBnb3QgIiArIG51bVN1Ym1pdHRlZFZhbHVlcyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAobnVtU3VibWl0dGVkVmFsdWVzID4gMSkgewogICAgICAgICAgICAgIHJldHVybiBjYih1bmRlZmluZWQsICJTaG91bGQgbm90IGhhdmUgbXVsdGlwbGUgdmFsdWVzIGZvciBub24tcmVwZWF0aW5nIGZpZWxkIik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCBudWxsKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGNoZWNrVmFsdWVzKHN1Ym1pdHRlZEZpZWxkLCBmaWVsZERlZmluaXRpb24sIHByZXZpb3VzRmllbGRWYWx1ZXMsIGNiKSB7CiAgICAgICAgICBnZXRWYWxpZGF0b3JGdW5jdGlvbihmaWVsZERlZmluaXRpb24udHlwZSwgZnVuY3Rpb24gKGVyciwgdmFsaWRhdG9yKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwogICAgICAgICAgICBhc3luYy5tYXAoc3VibWl0dGVkRmllbGQuZmllbGRWYWx1ZXMsIGZ1bmN0aW9uIChmaWVsZFZhbHVlLCBjYikgewogICAgICAgICAgICAgIGlmIChmaWVsZEVtcHR5KGZpZWxkVmFsdWUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCBudWxsKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFsaWRhdG9yKGZpZWxkVmFsdWUsIGZpZWxkRGVmaW5pdGlvbiwgcHJldmlvdXNGaWVsZFZhbHVlcywgZnVuY3Rpb24gKHZhbGlkYXRpb25FcnJvcikgewogICAgICAgICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlOwogICAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gdmFsaWRhdGlvbkVycm9yLm1lc3NhZ2UgfHwgIkVycm9yIGR1cmluZyB2YWxpZGF0aW9uIG9mIGZpZWxkIjsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBudWxsOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBpZiAoc3VibWlzc2lvblJlcXVpcmVkRmllbGRzTWFwW2ZpZWxkRGVmaW5pdGlvbi5faWRdKSB7IC8vIHNldCB0byB0cnVlIGlmIGF0IGxlYXN0IG9uZSB2YWx1ZQogICAgICAgICAgICAgICAgICAgIHN1Ym1pc3Npb25SZXF1aXJlZEZpZWxkc01hcFtmaWVsZERlZmluaXRpb24uX2lkXS5zdWJtaXR0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCBlcnJvck1lc3NhZ2UpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7CiAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7CgogICAgICAgICAgICAgIHJldHVybiBjYih1bmRlZmluZWQsIHJlc3VsdHMpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZnVuY3Rpb24gY29udmVydFNpbXBsZUZvcm1hdFRvUmVnZXgoZmllbGRfZm9ybWF0X3N0cmluZykgewogICAgICAgIHZhciByZWdleCA9ICJeIjsKICAgICAgICB2YXIgQyA9ICJjIi5jaGFyQ29kZUF0KDApOwogICAgICAgIHZhciBOID0gIm4iLmNoYXJDb2RlQXQoMCk7CgogICAgICAgIHZhciBpOwogICAgICAgIHZhciBjaDsKICAgICAgICB2YXIgbWF0Y2g7CiAgICAgICAgdmFyIGxlbiA9IGZpZWxkX2Zvcm1hdF9zdHJpbmcubGVuZ3RoOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkgewogICAgICAgICAgY2ggPSBmaWVsZF9mb3JtYXRfc3RyaW5nLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICBzd2l0Y2ggKGNoKSB7CiAgICAgICAgICAgIGNhc2UgQzoKICAgICAgICAgICAgICBtYXRjaCA9ICJbYS16QS1aMC05XSI7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgTjoKICAgICAgICAgICAgICBtYXRjaCA9ICJbMC05XSI7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgdmFyIG51bSA9IGNoLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgICAgIG1hdGNoID0gIlxcdSIgKyAoIjAwMDAiICsgbnVtKS5zdWJzdHIoLTQpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgcmVnZXggKz0gbWF0Y2g7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZWdleCArICIkIjsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gdmFsaWRGb3JtYXRSZWdleChmaWVsZFZhbHVlLCBmaWVsZF9mb3JtYXRfc3RyaW5nKSB7CiAgICAgICAgdmFyIHBhdHRlcm4gPSBuZXcgUmVnRXhwKGZpZWxkX2Zvcm1hdF9zdHJpbmcpOwogICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QoZmllbGRWYWx1ZSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHZhbGlkRm9ybWF0KGZpZWxkVmFsdWUsIGZpZWxkX2Zvcm1hdF9tb2RlLCBmaWVsZF9mb3JtYXRfc3RyaW5nKSB7CiAgICAgICAgdmFyIHJlZ2V4OwogICAgICAgIGlmICgic2ltcGxlIiA9PT0gZmllbGRfZm9ybWF0X21vZGUpIHsKICAgICAgICAgIHJlZ2V4ID0gY29udmVydFNpbXBsZUZvcm1hdFRvUmVnZXgoZmllbGRfZm9ybWF0X3N0cmluZyk7CiAgICAgICAgfSBlbHNlIGlmICgicmVnZXgiID09PSBmaWVsZF9mb3JtYXRfbW9kZSkgewogICAgICAgICAgcmVnZXggPSBmaWVsZF9mb3JtYXRfc3RyaW5nOwogICAgICAgIH0gZWxzZSB7IC8vIHNob3VsZCBuZXZlciBiZSBhbnl0aGluZyBlbHNlLCBidXQgaWYgaXQgaXMgdGhlbiBkZWZhdWx0IHRvIHNpbXBsZSBmb3JtYXQKICAgICAgICAgIHJlZ2V4ID0gY29udmVydFNpbXBsZUZvcm1hdFRvUmVnZXgoZmllbGRfZm9ybWF0X3N0cmluZyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdmFsaWRGb3JtYXRSZWdleChmaWVsZFZhbHVlLCByZWdleCk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHZhbGlkYXRvclN0cmluZyhmaWVsZFZhbHVlLCBmaWVsZERlZmluaXRpb24sIHByZXZpb3VzRmllbGRWYWx1ZXMsIGNiKSB7CiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZFZhbHVlICE9PSAic3RyaW5nIikgewogICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiRXhwZWN0ZWQgc3RyaW5nIGJ1dCBnb3QgIiArIHR5cGVvZihmaWVsZFZhbHVlKSkpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHZhbGlkYXRpb24gPSB7fTsKICAgICAgICBpZiAoZmllbGREZWZpbml0aW9uICYmIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMgJiYgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy52YWxpZGF0aW9uKSB7CiAgICAgICAgICB2YWxpZGF0aW9uID0gZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy52YWxpZGF0aW9uOwogICAgICAgIH0KCiAgICAgICAgdmFyIGZpZWxkX2Zvcm1hdF9tb2RlID0gdmFsaWRhdGlvbi5maWVsZF9mb3JtYXRfbW9kZSB8fCAiIjsKICAgICAgICBmaWVsZF9mb3JtYXRfbW9kZSA9IGZpZWxkX2Zvcm1hdF9tb2RlLnRyaW0oKTsKICAgICAgICB2YXIgZmllbGRfZm9ybWF0X3N0cmluZyA9IHZhbGlkYXRpb24uZmllbGRfZm9ybWF0X3N0cmluZyB8fCAiIjsKICAgICAgICBmaWVsZF9mb3JtYXRfc3RyaW5nID0gZmllbGRfZm9ybWF0X3N0cmluZy50cmltKCk7CgogICAgICAgIGlmIChmaWVsZF9mb3JtYXRfc3RyaW5nICYmIChmaWVsZF9mb3JtYXRfc3RyaW5nLmxlbmd0aCA+IDApICYmIGZpZWxkX2Zvcm1hdF9tb2RlICYmIChmaWVsZF9mb3JtYXRfbW9kZS5sZW5ndGggPiAwKSkgewogICAgICAgICAgaWYgKCF2YWxpZEZvcm1hdChmaWVsZFZhbHVlLCBmaWVsZF9mb3JtYXRfbW9kZSwgZmllbGRfZm9ybWF0X3N0cmluZykpIHsKICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiZmllbGQgdmFsdWUgaW4gaW5jb3JyZWN0IGZvcm1hdCwgZXhwZWN0ZWQgZm9ybWF0OiAiICsgZmllbGRfZm9ybWF0X3N0cmluZyArICIgYnV0IHN1Ym1pc3Npb24gdmFsdWUgaXM6ICIgKyBmaWVsZFZhbHVlKSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucyAmJiBmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zLnZhbGlkYXRpb24gJiYgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy52YWxpZGF0aW9uLm1pbikgewogICAgICAgICAgaWYgKGZpZWxkVmFsdWUubGVuZ3RoIDwgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy52YWxpZGF0aW9uLm1pbikgewogICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCBtaW5pbXVtIHN0cmluZyBsZW5ndGggb2YgIiArIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMudmFsaWRhdGlvbi5taW4gKyAiIGJ1dCBzdWJtaXNzaW9uIGlzICIgKyBmaWVsZFZhbHVlLmxlbmd0aCArICIuIFN1Ym1pdHRlZCB2YWw6ICIgKyBmaWVsZFZhbHVlKSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucyAmJiBmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zLnZhbGlkYXRpb24gJiYgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy52YWxpZGF0aW9uLm1heCkgewogICAgICAgICAgaWYgKGZpZWxkVmFsdWUubGVuZ3RoID4gZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy52YWxpZGF0aW9uLm1heCkgewogICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCBtYXhpbXVtIHN0cmluZyBsZW5ndGggb2YgIiArIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMudmFsaWRhdGlvbi5tYXggKyAiIGJ1dCBzdWJtaXNzaW9uIGlzICIgKyBmaWVsZFZhbHVlLmxlbmd0aCArICIuIFN1Ym1pdHRlZCB2YWw6ICIgKyBmaWVsZFZhbHVlKSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gdmFsaWRhdG9yTnVtZXJpY1N0cmluZyhmaWVsZFZhbHVlLCBmaWVsZERlZmluaXRpb24sIHByZXZpb3VzRmllbGRWYWx1ZXMsIGNiKSB7CiAgICAgICAgdmFyIHRlc3RWYWwgPSAoZmllbGRWYWx1ZSAtIDApOyAvLyBjb2VyY2UgdG8gbnVtYmVyIChvciBOYU4pCiAgICAgICAgLypqc2hpbnQgZXFlcWVxOmZhbHNlICovCiAgICAgICAgdmFyIG51bWVyaWMgPSAodGVzdFZhbCA9PSBmaWVsZFZhbHVlKTsgLy8gdGVzdFZhbCBjby1lcmNlZCB0byBudW1lcmljIGFib3ZlLCBzbyBudW1lcmljIGNvbXBhcmlzb24gYW5kIE5hTiAhPSBOYU4KCiAgICAgICAgaWYgKCFudW1lcmljKSB7CiAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCBudW1lcmljIGJ1dCBnb3Q6ICIgKyBmaWVsZFZhbHVlKSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdmFsaWRhdG9yTnVtYmVyKHRlc3RWYWwsIGZpZWxkRGVmaW5pdGlvbiwgcHJldmlvdXNGaWVsZFZhbHVlcywgY2IpOwogICAgICB9CgogICAgICBmdW5jdGlvbiB2YWxpZGF0b3JOdW1iZXIoZmllbGRWYWx1ZSwgZmllbGREZWZpbml0aW9uLCBwcmV2aW91c0ZpZWxkVmFsdWVzLCBjYikgewogICAgICAgIGlmICh0eXBlb2YgZmllbGRWYWx1ZSAhPT0gIm51bWJlciIpIHsKICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkV4cGVjdGVkIG51bWJlciBidXQgZ290ICIgKyB0eXBlb2YoZmllbGRWYWx1ZSkpKTsKICAgICAgICB9CgogICAgICAgIGlmIChmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zICYmIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMudmFsaWRhdGlvbiAmJiBmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zLnZhbGlkYXRpb24ubWluKSB7CiAgICAgICAgICBpZiAoZmllbGRWYWx1ZSA8IGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMudmFsaWRhdGlvbi5taW4pIHsKICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiRXhwZWN0ZWQgbWluaW11bSBOdW1iZXIgIiArIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMudmFsaWRhdGlvbi5taW4gKyAiIGJ1dCBzdWJtaXNzaW9uIGlzICIgKyBmaWVsZFZhbHVlICsgIi4gU3VibWl0dGVkIG51bWJlcjogIiArIGZpZWxkVmFsdWUpKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zLnZhbGlkYXRpb24ubWF4KSB7CiAgICAgICAgICBpZiAoZmllbGRWYWx1ZSA+IGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMudmFsaWRhdGlvbi5tYXgpIHsKICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiRXhwZWN0ZWQgbWF4aW11bSBOdW1iZXIgIiArIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMudmFsaWRhdGlvbi5tYXggKyAiIGJ1dCBzdWJtaXNzaW9uIGlzICIgKyBmaWVsZFZhbHVlICsgIi4gU3VibWl0dGVkIG51bWJlcjogIiArIGZpZWxkVmFsdWUpKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBjYigpOwogICAgICB9CgogICAgICBmdW5jdGlvbiB2YWxpZGF0b3JFbWFpbChmaWVsZFZhbHVlLCBmaWVsZERlZmluaXRpb24sIHByZXZpb3VzRmllbGRWYWx1ZXMsIGNiKSB7CiAgICAgICAgaWYgKHR5cGVvZihmaWVsZFZhbHVlKSAhPT0gInN0cmluZyIpIHsKICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkV4cGVjdGVkIHN0cmluZyBidXQgZ290ICIgKyB0eXBlb2YoZmllbGRWYWx1ZSkpKTsKICAgICAgICB9CgogICAgICAgIGlmIChmaWVsZFZhbHVlLm1hdGNoKC9bLTAtOWEtekEtWi4rX10rQFstMC05YS16QS1aLitfXStcLlthLXpBLVpdezIsNH0vZykgPT09IG51bGwpIHsKICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkludmFsaWQgZW1haWwgYWRkcmVzcyBmb3JtYXQ6ICIgKyBmaWVsZFZhbHVlKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBjYigpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZnVuY3Rpb24gdmFsaWRhdG9yRHJvcERvd24oZmllbGRWYWx1ZSwgZmllbGREZWZpbml0aW9uLCBwcmV2aW91c0ZpZWxkVmFsdWVzLCBjYikgewogICAgICAgIGlmICh0eXBlb2YoZmllbGRWYWx1ZSkgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCBzdWJtaXNzaW9uIHRvIGJlIHN0cmluZyBidXQgZ290ICIgKyB0eXBlb2YoZmllbGRWYWx1ZSkpKTsKICAgICAgICB9CgogICAgICAgIC8vQ2hlY2sgdmFsdWUgZXhpc3RzIGluIHRoZSBmaWVsZCBkZWZpbml0aW9uCiAgICAgICAgaWYgKCFmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zLmRlZmluaXRpb24ub3B0aW9ucykgewogICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiTm8gb3B0aW9ucyBleGlzdCBmb3IgZmllbGQgIiArIGZpZWxkRGVmaW5pdGlvbi5uYW1lKSk7CiAgICAgICAgfQoKICAgICAgICBhc3luYy5zb21lKGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMuZGVmaW5pdGlvbi5vcHRpb25zLCBmdW5jdGlvbiAoZHJvcGRvd25PcHRpb24sIGNiKSB7CiAgICAgICAgICByZXR1cm4gY2IoZHJvcGRvd25PcHRpb24ubGFiZWwgPT09IGZpZWxkVmFsdWUpOwogICAgICAgIH0sIGZ1bmN0aW9uIChmb3VuZCkgewogICAgICAgICAgaWYgKCFmb3VuZCkgewogICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJJbnZhbGlkIG9wdGlvbiBzcGVjaWZpZWQ6ICIgKyBmaWVsZFZhbHVlKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gdmFsaWRhdG9yQ2hlY2tib3hlcyhmaWVsZFZhbHVlLCBmaWVsZERlZmluaXRpb24sIHByZXZpb3VzRmllbGRWYWx1ZXMsIGNiKSB7CiAgICAgICAgdmFyIG1pblZhbDsKICAgICAgICBpZiAoZmllbGREZWZpbml0aW9uICYmIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMgJiYgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy52YWxpZGF0aW9uKSB7CiAgICAgICAgICBtaW5WYWwgPSBmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zLnZhbGlkYXRpb24ubWluOwogICAgICAgIH0KICAgICAgICB2YXIgbWF4VmFsOwogICAgICAgIGlmIChmaWVsZERlZmluaXRpb24gJiYgZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucyAmJiBmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zLnZhbGlkYXRpb24pIHsKICAgICAgICAgIG1heFZhbCA9IGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMudmFsaWRhdGlvbi5tYXg7CiAgICAgICAgfQoKICAgICAgICBpZiAobWluVmFsKSB7CiAgICAgICAgICBpZiAoZmllbGRWYWx1ZS5zZWxlY3Rpb25zID09PSBudWxsIHx8IGZpZWxkVmFsdWUuc2VsZWN0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IGZpZWxkVmFsdWUuc2VsZWN0aW9ucy5sZW5ndGggPCBtaW5WYWwpIHsKICAgICAgICAgICAgdmFyIGxlbjsKICAgICAgICAgICAgaWYgKGZpZWxkVmFsdWUuc2VsZWN0aW9ucykgewogICAgICAgICAgICAgIGxlbiA9IGZpZWxkVmFsdWUuc2VsZWN0aW9ucy5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiRXhwZWN0ZWQgYSBtaW5pbXVtIG51bWJlciBvZiBzZWxlY3Rpb25zICIgKyBtaW5WYWwgKyAiIGJ1dCBnb3QgIiArIGxlbikpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKG1heFZhbCkgewogICAgICAgICAgaWYgKGZpZWxkVmFsdWUuc2VsZWN0aW9ucykgewogICAgICAgICAgICBpZiAoZmllbGRWYWx1ZS5zZWxlY3Rpb25zLmxlbmd0aCA+IG1heFZhbCkgewogICAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkV4cGVjdGVkIGEgbWF4aW11bSBudW1iZXIgb2Ygc2VsZWN0aW9ucyAiICsgbWF4VmFsICsgIiBidXQgZ290ICIgKyBmaWVsZFZhbHVlLnNlbGVjdGlvbnMubGVuZ3RoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBvcHRpb25zSW5DaGVja2JveCA9IFtdOwoKICAgICAgICBhc3luYy5lYWNoU2VyaWVzKGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMuZGVmaW5pdGlvbi5vcHRpb25zLCBmdW5jdGlvbiAoY2hvaWNlLCBjYikgewogICAgICAgICAgZm9yICh2YXIgY2hvaWNlTmFtZSBpbiBjaG9pY2UpIHsKICAgICAgICAgICAgb3B0aW9uc0luQ2hlY2tib3gucHVzaChjaG9pY2VbY2hvaWNlTmFtZV0pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgYXN5bmMuZWFjaFNlcmllcyhmaWVsZFZhbHVlLnNlbGVjdGlvbnMsIGZ1bmN0aW9uIChzZWxlY3Rpb24sIGNiKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2Yoc2VsZWN0aW9uKSAhPT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCBjaGVja2JveCBzdWJtaXNzaW9uIHRvIGJlIHN0cmluZyBidXQgZ290ICIgKyB0eXBlb2Yoc2VsZWN0aW9uKSkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAob3B0aW9uc0luQ2hlY2tib3guaW5kZXhPZihzZWxlY3Rpb24pID09PSAtMSkgewogICAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkNoZWNrYm94IE9wdGlvbiAiICsgc2VsZWN0aW9uICsgIiBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZmllbGQuIikpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgICAgIH0sIGNiKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gdmFsaWRhdG9yTG9jYXRpb25NYXAoZmllbGRWYWx1ZSwgZmllbGREZWZpbml0aW9uLCBwcmV2aW91c0ZpZWxkVmFsdWVzLCBjYikgewogICAgICAgIGlmIChmaWVsZFZhbHVlLmxhdCAmJiBmaWVsZFZhbHVlWyJsb25nIl0pIHsKICAgICAgICAgIGlmIChpc05hTihwYXJzZUZsb2F0KGZpZWxkVmFsdWUubGF0KSkgfHwgaXNOYU4ocGFyc2VGbG9hdChmaWVsZFZhbHVlWyJsb25nIl0pKSkgewogICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJJbnZhbGlkIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgdmFsdWVzIikpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkludmFsaWQgb2JqZWN0IGZvciBsb2NhdGlvbk1hcCBzdWJtaXNzaW9uIikpOwogICAgICAgIH0KICAgICAgfQoKCiAgICAgIGZ1bmN0aW9uIHZhbGlkYXRvckxvY2F0aW9uKGZpZWxkVmFsdWUsIGZpZWxkRGVmaW5pdGlvbiwgcHJldmlvdXNGaWVsZFZhbHVlcywgY2IpIHsKICAgICAgICBpZiAoZmllbGREZWZpbml0aW9uLmZpZWxkT3B0aW9ucy5kZWZpbml0aW9uLmxvY2F0aW9uVW5pdCA9PT0gImxhdGxvbmciKSB7CiAgICAgICAgICBpZiAoZmllbGRWYWx1ZS5sYXQgJiYgZmllbGRWYWx1ZVsibG9uZyJdKSB7CiAgICAgICAgICAgIGlmIChpc05hTihwYXJzZUZsb2F0KGZpZWxkVmFsdWUubGF0KSkgfHwgaXNOYU4ocGFyc2VGbG9hdChmaWVsZFZhbHVlWyJsb25nIl0pKSkgewogICAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkludmFsaWQgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSB2YWx1ZXMiKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkludmFsaWQgb2JqZWN0IGZvciBsYXRpdHVkZSBsb25naXR1ZGUgc3VibWlzc2lvbiIpKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKGZpZWxkVmFsdWUuem9uZSAmJiBmaWVsZFZhbHVlLmVhc3RpbmdzICYmIGZpZWxkVmFsdWUubm9ydGhpbmdzKSB7CiAgICAgICAgICAgIC8vWm9uZSBtdXN0IGJlIDMgY2hhcmFjdGVycywgZWFzdGluZ3MgNiBhbmQgbm9ydGhpbmdzIDkKICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlTm9ydGhpbmdzRWFzdGluZ3MoZmllbGRWYWx1ZSwgY2IpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiSW52YWxpZCBvYmplY3QgZm9yIG5vcnRoaW5ncyBlYXN0aW5nIHN1Ym1pc3Npb24uIFpvbmUsIEVhc3RpbmdzIGFuZCBOb3J0aGluZ3MgZWxlbWV0cyBhcmUgcmVxdWlyZWQiKSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZU5vcnRoaW5nc0Vhc3RpbmdzKGZpZWxkVmFsdWUsIGNiKSB7CiAgICAgICAgICBpZiAodHlwZW9mKGZpZWxkVmFsdWUuem9uZSkgIT09ICJzdHJpbmciIHx8IGZpZWxkVmFsdWUuem9uZS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiSW52YWxpZCB6b25lIGRlZmluaXRpb24gZm9yIG5vcnRoaW5ncyBhbmQgZWFzdGluZ3MgbG9jYXRpb24uICIgKyBmaWVsZFZhbHVlLnpvbmUpKTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgZWFzdCA9IHBhcnNlSW50KGZpZWxkVmFsdWUuZWFzdGluZ3MsIDEwKTsKICAgICAgICAgIGlmIChpc05hTihlYXN0KSkgewogICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJJbnZhbGlkIGVhc3RpbmdzIGRlZmluaXRpb24gZm9yIG5vcnRoaW5ncyBhbmQgZWFzdGluZ3MgbG9jYXRpb24uICIgKyBmaWVsZFZhbHVlLmVhc3RpbmdzKSk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIG5vcnRoID0gcGFyc2VJbnQoZmllbGRWYWx1ZS5ub3J0aGluZ3MsIDEwKTsKICAgICAgICAgIGlmIChpc05hTihub3J0aCkpIHsKICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiSW52YWxpZCBub3J0aGluZ3MgZGVmaW5pdGlvbiBmb3Igbm9ydGhpbmdzIGFuZCBlYXN0aW5ncyBsb2NhdGlvbi4gIiArIGZpZWxkVmFsdWUubm9ydGhpbmdzKSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgfQogICAgICB9CgogICAgICBmdW5jdGlvbiB2YWxpZGF0b3JBbnlGaWxlKGZpZWxkVmFsdWUsIGZpZWxkRGVmaW5pdGlvbiwgcHJldmlvdXNGaWVsZFZhbHVlcywgY2IpIHsKICAgICAgICAvLyBpZiBhbnkgb2YgdGhlIGZvbGxvd2luZyB2YWxpZGF0b3JzIHJldHVybiBvaywgdGhlbiByZXR1cm4gb2suCiAgICAgICAgdmFsaWRhdG9yQmFzZTY0KGZpZWxkVmFsdWUsIGZpZWxkRGVmaW5pdGlvbiwgcHJldmlvdXNGaWVsZFZhbHVlcywgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgaWYgKCFlcnIpIHsKICAgICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgICB9CiAgICAgICAgICB2YWxpZGF0b3JGaWxlKGZpZWxkVmFsdWUsIGZpZWxkRGVmaW5pdGlvbiwgcHJldmlvdXNGaWVsZFZhbHVlcywgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBpZiAoIWVycikgewogICAgICAgICAgICAgIHJldHVybiBjYigpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhbGlkYXRvckZpbGVPYmooZmllbGRWYWx1ZSwgZmllbGREZWZpbml0aW9uLCBwcmV2aW91c0ZpZWxkVmFsdWVzLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgaWYgKCFlcnIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYigpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgLyoqCiAgICAgICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGEgYmFyY29kZSBzdWJtaXNzaW9uCiAgICAgICAqCiAgICAgICAqIE11c3QgYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBjb250ZW50cwogICAgICAgKgogICAgICAgKiB7CiAgICAgKiAgIHRleHQ6ICI8PGNvbnRlbnQgb2YgYmFyY29kZT4+IiwKICAgICAqICAgZm9ybWF0OiAiPDxiYXJjb2RlIGNvbnRlbnQgZm9ybWF0Pj4iCiAgICAgKiB9CiAgICAgICAqCiAgICAgICAqIEBwYXJhbSBmaWVsZFZhbHVlCiAgICAgICAqIEBwYXJhbSBmaWVsZERlZmluaXRpb24KICAgICAgICogQHBhcmFtIHByZXZpb3VzRmllbGRWYWx1ZXMKICAgICAgICogQHBhcmFtIGNiCiAgICAgICAqLwogICAgICBmdW5jdGlvbiB2YWxpZGF0b3JCYXJjb2RlKGZpZWxkVmFsdWUsIGZpZWxkRGVmaW5pdGlvbiwgcHJldmlvdXNGaWVsZFZhbHVlcywgY2IpewogICAgICAgIGlmKHR5cGVvZihmaWVsZFZhbHVlKSAhPT0gIm9iamVjdCIgfHwgZmllbGRWYWx1ZSA9PT0gbnVsbCl7CiAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCBvYmplY3QgYnV0IGdvdCAiICsgdHlwZW9mKGZpZWxkVmFsdWUpKSk7CiAgICAgICAgfQoKICAgICAgICBpZih0eXBlb2YoZmllbGRWYWx1ZS50ZXh0KSAhPT0gInN0cmluZyIgfHwgZmllbGRWYWx1ZS50ZXh0Lmxlbmd0aCA9PT0gMCl7CiAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCB0ZXh0IHBhcmFtZXRlci4iKSk7CiAgICAgICAgfQoKICAgICAgICBpZih0eXBlb2YoZmllbGRWYWx1ZS5mb3JtYXQpICE9PSAic3RyaW5nIiB8fCBmaWVsZFZhbHVlLmZvcm1hdC5sZW5ndGggPT09IDApewogICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiRXhwZWN0ZWQgZm9ybWF0IHBhcmFtZXRlci4iKSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gY2hlY2tGaWxlU2l6ZShmaWVsZERlZmluaXRpb24sIGZpZWxkVmFsdWUsIHNpemVLZXksIGNiKSB7CiAgICAgICAgZmllbGREZWZpbml0aW9uID0gZmllbGREZWZpbml0aW9uIHx8IHt9OwogICAgICAgIHZhciBmaWVsZE9wdGlvbnMgPSBmaWVsZERlZmluaXRpb24uZmllbGRPcHRpb25zIHx8IHt9OwogICAgICAgIHZhciBmaWVsZE9wdGlvbnNEZWYgPSBmaWVsZE9wdGlvbnMuZGVmaW5pdGlvbiB8fCB7fTsKICAgICAgICB2YXIgZmlsZVNpemVNYXggPSBmaWVsZE9wdGlvbnNEZWYuZmlsZV9zaXplIHx8IG51bGw7IC8vRmlsZVNpemVNYXggd2lsbCBiZSBpbiBLQi4gRmlsZSBzaXplIGlzIGluIGJ5dGVzCgogICAgICAgIGlmIChmaWxlU2l6ZU1heCAhPT0gbnVsbCkgewogICAgICAgICAgdmFyIGZpZWxkVmFsdWVTaXplID0gZmllbGRWYWx1ZVtzaXplS2V5XTsKICAgICAgICAgIHZhciBmaWVsZFZhbHVlU2l6ZUtCID0gMTsKICAgICAgICAgIGlmIChmaWVsZFZhbHVlU2l6ZSA+IDEwMDApIHsKICAgICAgICAgICAgZmllbGRWYWx1ZVNpemVLQiA9IGZpZWxkVmFsdWVTaXplIC8gMTAwMDsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChmaWVsZFZhbHVlU2l6ZSA+IChmaWxlU2l6ZU1heCAqIDEwMDApKSB7CiAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkZpbGUgc2l6ZSBpcyB0b28gbGFyZ2UuIEZpbGUgY2FuIGJlIGEgbWF4aW11bSBvZiAiICsgZmlsZVNpemVNYXggKyAiS0IuIFNpemUgb2YgZmlsZSBzZWxlY3RlZDogIiArIGZpZWxkVmFsdWVTaXplS0IgKyAiS0IiKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgfQogICAgICB9CgogICAgICBmdW5jdGlvbiB2YWxpZGF0b3JGaWxlKGZpZWxkVmFsdWUsIGZpZWxkRGVmaW5pdGlvbiwgcHJldmlvdXNGaWVsZFZhbHVlcywgY2IpIHsKICAgICAgICBpZiAodHlwZW9mIGZpZWxkVmFsdWUgIT09ICJvYmplY3QiKSB7CiAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCBvYmplY3QgYnV0IGdvdCAiICsgdHlwZW9mKGZpZWxkVmFsdWUpKSk7CiAgICAgICAgfQoKICAgICAgICB2YXIga2V5VHlwZXMgPSBbCiAgICAgICAgICB7CiAgICAgICAgICAgIGtleU5hbWU6ICJmaWxlTmFtZSIsCiAgICAgICAgICAgIHZhbHVlVHlwZTogInN0cmluZyIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGtleU5hbWU6ICJmaWxlU2l6ZSIsCiAgICAgICAgICAgIHZhbHVlVHlwZTogIm51bWJlciIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGtleU5hbWU6ICJmaWxlVHlwZSIsCiAgICAgICAgICAgIHZhbHVlVHlwZTogInN0cmluZyIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGtleU5hbWU6ICJmaWxlVXBkYXRlVGltZSIsCiAgICAgICAgICAgIHZhbHVlVHlwZTogIm51bWJlciIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGtleU5hbWU6ICJoYXNoTmFtZSIsCiAgICAgICAgICAgIHZhbHVlVHlwZTogInN0cmluZyIKICAgICAgICAgIH0KICAgICAgICBdOwoKICAgICAgICBhc3luYy5lYWNoKGtleVR5cGVzLCBmdW5jdGlvbiAoa2V5VHlwZSwgY2IpIHsKICAgICAgICAgIHZhciBhY3R1YWxUeXBlID0gdHlwZW9mIGZpZWxkVmFsdWVba2V5VHlwZS5rZXlOYW1lXTsKICAgICAgICAgIGlmIChhY3R1YWxUeXBlICE9PSBrZXlUeXBlLnZhbHVlVHlwZSkgewogICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCAiICsga2V5VHlwZS52YWx1ZVR5cGUgKyAiIGJ1dCBnb3QgIiArIGFjdHVhbFR5cGUpKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChrZXlUeXBlLmtleU5hbWUgPT09ICJmaWxlTmFtZSIgJiYgZmllbGRWYWx1ZVtrZXlUeXBlLmtleU5hbWVdLmxlbmd0aCA8PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkV4cGVjdGVkIHZhbHVlIGZvciAiICsga2V5VHlwZS5rZXlOYW1lKSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7CgogICAgICAgICAgY2hlY2tGaWxlU2l6ZShmaWVsZERlZmluaXRpb24sIGZpZWxkVmFsdWUsICJmaWxlU2l6ZSIsIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgaWYgKGVycikgewogICAgICAgICAgICAgIHJldHVybiBjYihlcnIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZmllbGRWYWx1ZS5oYXNoTmFtZS5pbmRleE9mKCJmaWxlUGxhY2VIb2xkZXIiKSA+IC0xKSB7IC8vVE9ETyBhYnN0cmFjdCBvdXQgdG8gY29uZmlnCiAgICAgICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNGaWVsZFZhbHVlcyAmJiBwcmV2aW91c0ZpZWxkVmFsdWVzLmhhc2hOYW1lICYmIHByZXZpb3VzRmllbGRWYWx1ZXMuaGFzaE5hbWUuaW5kZXhPZihmaWVsZFZhbHVlLmhhc2hOYW1lKSA+IC0xKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiSW52YWxpZCBmaWxlIHBsYWNlaG9sZGVyIHRleHQiICsgZmllbGRWYWx1ZS5oYXNoTmFtZSkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gdmFsaWRhdG9yRmlsZU9iaihmaWVsZFZhbHVlLCBmaWVsZERlZmluaXRpb24sIHByZXZpb3VzRmllbGRWYWx1ZXMsIGNiKSB7CiAgICAgICAgaWYgKCh0eXBlb2YgRmlsZSAhPT0gImZ1bmN0aW9uIikpIHsKICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkV4cGVjdGVkIEZpbGUgb2JqZWN0IGJ1dCBnb3QgIiArIHR5cGVvZihmaWVsZFZhbHVlKSkpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGtleVR5cGVzID0gWwogICAgICAgICAgewogICAgICAgICAgICBrZXlOYW1lOiAibmFtZSIsCiAgICAgICAgICAgIHZhbHVlVHlwZTogInN0cmluZyIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGtleU5hbWU6ICJzaXplIiwKICAgICAgICAgICAgdmFsdWVUeXBlOiAibnVtYmVyIgogICAgICAgICAgfQogICAgICAgIF07CgogICAgICAgIGFzeW5jLmVhY2goa2V5VHlwZXMsIGZ1bmN0aW9uIChrZXlUeXBlLCBjYikgewogICAgICAgICAgdmFyIGFjdHVhbFR5cGUgPSB0eXBlb2YgZmllbGRWYWx1ZVtrZXlUeXBlLmtleU5hbWVdOwogICAgICAgICAgaWYgKGFjdHVhbFR5cGUgIT09IGtleVR5cGUudmFsdWVUeXBlKSB7CiAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkV4cGVjdGVkICIgKyBrZXlUeXBlLnZhbHVlVHlwZSArICIgYnV0IGdvdCAiICsgYWN0dWFsVHlwZSkpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGFjdHVhbFR5cGUgPT09ICJzdHJpbmciICYmIGZpZWxkVmFsdWVba2V5VHlwZS5rZXlOYW1lXS5sZW5ndGggPD0gMCkgewogICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCB2YWx1ZSBmb3IgIiArIGtleVR5cGUua2V5TmFtZSkpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGFjdHVhbFR5cGUgPT09ICJudW1iZXIiICYmIGZpZWxkVmFsdWVba2V5VHlwZS5rZXlOYW1lXSA8PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkV4cGVjdGVkID4gMCB2YWx1ZSBmb3IgIiArIGtleVR5cGUua2V5TmFtZSkpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBjYigpOwogICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwoKCiAgICAgICAgICBjaGVja0ZpbGVTaXplKGZpZWxkRGVmaW5pdGlvbiwgZmllbGRWYWx1ZSwgInNpemUiLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBmdW5jdGlvbiB2YWxpZGF0b3JCYXNlNjQoZmllbGRWYWx1ZSwgZmllbGREZWZpbml0aW9uLCBwcmV2aW91c0ZpZWxkVmFsdWVzLCBjYikgewogICAgICAgIGlmICh0eXBlb2YgZmllbGRWYWx1ZSAhPT0gInN0cmluZyIpIHsKICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIkV4cGVjdGVkIGJhc2U2NCBzdHJpbmcgYnV0IGdvdCAiICsgdHlwZW9mKGZpZWxkVmFsdWUpKSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoZmllbGRWYWx1ZS5sZW5ndGggPD0gMCkgewogICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiRXhwZWN0ZWQgYmFzZTY0IHN0cmluZyBidXQgd2FzIGVtcHR5IikpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHZhbGlkYXRvckRhdGVUaW1lKGZpZWxkVmFsdWUsIGZpZWxkRGVmaW5pdGlvbiwgcHJldmlvdXNGaWVsZFZhbHVlcywgY2IpIHsKICAgICAgICB2YXIgdGVzdERhdGU7CiAgICAgICAgdmFyIHZhbGlkID0gZmFsc2U7CiAgICAgICAgdmFyIHBhcnRzID0gW107CgogICAgICAgIGlmICh0eXBlb2YoZmllbGRWYWx1ZSkgIT09ICJzdHJpbmciKSB7CiAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJFeHBlY3RlZCBzdHJpbmcgYnV0IGdvdCAiICsgdHlwZW9mKGZpZWxkVmFsdWUpKSk7CiAgICAgICAgfQoKICAgICAgICBzd2l0Y2ggKGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMuZGVmaW5pdGlvbi5kYXRldGltZVVuaXQpIHsKICAgICAgICAgIGNhc2UgRklFTERfVFlQRV9EQVRFVElNRV9EQVRFVElNRVVOSVRfREFURU9OTFk6CgogICAgICAgICAgICBwYXJ0cyA9IGZpZWxkVmFsdWUuc3BsaXQoIi8iKTsKICAgICAgICAgICAgdmFsaWQgPSBwYXJ0cy5sZW5ndGggPT09IDM7CgogICAgICAgICAgICBpZih2YWxpZCl7CiAgICAgICAgICAgICAgdmFsaWQgPSBpc051bWJlckJldHdlZW4ocGFydHNbMl0sIDEsIDMxKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYodmFsaWQpewogICAgICAgICAgICAgIHZhbGlkID0gaXNOdW1iZXJCZXR3ZWVuKHBhcnRzWzFdLCAxLCAxMik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKHZhbGlkKXsKICAgICAgICAgICAgICB2YWxpZCA9IGlzTnVtYmVyQmV0d2VlbihwYXJ0c1swXSwgMTAwMCwgOTk5OSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYodmFsaWQpewogICAgICAgICAgICAgICAgdGVzdERhdGUgPSBuZXcgRGF0ZShwYXJ0c1szXSwgcGFydHNbMV0sIHBhcnRzWzBdKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGVzdERhdGUgPSBuZXcgRGF0ZShmaWVsZFZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFsaWQgPSAodGVzdERhdGUudG9TdHJpbmcoKSAhPT0gIkludmFsaWQgRGF0ZSIpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHZhbGlkKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiSW52YWxpZCBkYXRlIHZhbHVlICIgKyBmaWVsZFZhbHVlICsgIi4gRGF0ZSBmb3JtYXQgaXMgWVlZWS9NTS9ERCIpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgRklFTERfVFlQRV9EQVRFVElNRV9EQVRFVElNRVVOSVRfVElNRU9OTFk6CiAgICAgICAgICAgIHBhcnRzID0gZmllbGRWYWx1ZS5zcGxpdCgnOicpOwogICAgICAgICAgICB2YWxpZCA9IChwYXJ0cy5sZW5ndGggPT09IDIpIHx8IChwYXJ0cy5sZW5ndGggPT09IDMpOwogICAgICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgICAgICB2YWxpZCA9IGlzTnVtYmVyQmV0d2VlbihwYXJ0c1swXSwgMCwgMjMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh2YWxpZCkgewogICAgICAgICAgICAgIHZhbGlkID0gaXNOdW1iZXJCZXR3ZWVuKHBhcnRzWzFdLCAwLCA1OSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZhbGlkICYmIChwYXJ0cy5sZW5ndGggPT09IDMpKSB7CiAgICAgICAgICAgICAgdmFsaWQgPSBpc051bWJlckJldHdlZW4ocGFydHNbMl0sIDAsIDU5KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJJbnZhbGlkIHRpbWUgdmFsdWUgIiArIGZpZWxkVmFsdWUgKyAiLiBUaW1lIGZvcm1hdCBpcyBISDpNTTpTUyIpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgRklFTERfVFlQRV9EQVRFVElNRV9EQVRFVElNRVVOSVRfREFURVRJTUU6CiAgICAgICAgICAgIHBhcnRzID0gZmllbGRWYWx1ZS5zcGxpdCgvWy0gOl0vKTsKCiAgICAgICAgICAgIHZhbGlkID0gKHBhcnRzLmxlbmd0aCA9PT0gNikgfHwgKHBhcnRzLmxlbmd0aCA9PT0gNSk7CgogICAgICAgICAgICBpZih2YWxpZCl7CiAgICAgICAgICAgICAgdmFsaWQgPSBpc051bWJlckJldHdlZW4ocGFydHNbMl0sIDEsIDMxKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYodmFsaWQpewogICAgICAgICAgICAgIHZhbGlkID0gaXNOdW1iZXJCZXR3ZWVuKHBhcnRzWzFdLCAxLCAxMik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKHZhbGlkKXsKICAgICAgICAgICAgICB2YWxpZCA9IGlzTnVtYmVyQmV0d2VlbihwYXJ0c1swXSwgMTAwMCwgOTk5OSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh2YWxpZCkgewogICAgICAgICAgICAgIHZhbGlkID0gaXNOdW1iZXJCZXR3ZWVuKHBhcnRzWzNdLCAwLCAyMyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHZhbGlkKSB7CiAgICAgICAgICAgICAgdmFsaWQgPSBpc051bWJlckJldHdlZW4ocGFydHNbNF0sIDAsIDU5KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodmFsaWQgJiYgcGFydHMubGVuZ3RoID09PSA2KSB7CiAgICAgICAgICAgICAgdmFsaWQgPSBpc051bWJlckJldHdlZW4ocGFydHNbNV0sIDAsIDU5KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBwYXJ0c1s1XSA9IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYodmFsaWQpewogICAgICAgICAgICAgICAgdGVzdERhdGUgPSBuZXcgRGF0ZShwYXJ0c1swXSwgcGFydHNbMV0sIHBhcnRzWzJdLCBwYXJ0c1szXSwgcGFydHNbNF0sIHBhcnRzWzVdKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGVzdERhdGUgPSBuZXcgRGF0ZShmaWVsZFZhbHVlKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHZhbGlkID0gKHRlc3REYXRlLnRvU3RyaW5nKCkgIT09ICJJbnZhbGlkIERhdGUiKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKHZhbGlkKXsKICAgICAgICAgICAgICByZXR1cm4gY2IoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJJbnZhbGlkIGRhdGVUaW1lIHN0cmluZyAiICsgZmllbGRWYWx1ZSArICIuIGRhdGVUaW1lIGZvcm1hdCBpcyBZWVlZL01NL0REIEhIOk1NOlNTIikpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcigiSW52YWxpZCBkYXRlVGltZSBmaWVsZHR5cGUgIiArIGZpZWxkRGVmaW5pdGlvbi5maWVsZE9wdGlvbnMuZGVmaW5pdGlvbi5kYXRldGltZVVuaXQpKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHZhbGlkYXRvclNlY3Rpb24odmFsdWUsIGZpZWxkRGVmaW5pdGlvbiwgcHJldmlvdXNGaWVsZFZhbHVlcywgY2IpIHsKICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJTaG91bGQgbm90IHN1Ym1pdCBzZWN0aW9uIGZpZWxkOiAiICsgZmllbGREZWZpbml0aW9uLm5hbWUpKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gcnVsZXNSZXN1bHQocnVsZXMsIGNiKSB7CiAgICAgICAgdmFyIHZpc2libGUgPSB0cnVlOwoKICAgICAgICAvLyBJdHRlcmF0ZSBvdmVyIGVhY2ggcnVsZSB0aGF0IHRoaXMgZmllbGQgaXMgYSBwcmVkaWNhdGUgb2YKICAgICAgICBhc3luYy5lYWNoKHJ1bGVzLCBmdW5jdGlvbiAocnVsZSwgY2JSdWxlKSB7CiAgICAgICAgICAvLyBGb3IgZWFjaCBydWxlLCBpdHRlcmF0ZSBvdmVyIHRoZSBwcmVkaWNhdGUgZmllbGRzIGFuZCBldmFsdWF0ZSB0aGUgcnVsZQogICAgICAgICAgdmFyIHByZWRpY2F0ZU1hcFF1ZXJpZXMgPSBbXTsKICAgICAgICAgIHZhciBwcmVkaWNhdGVNYXBQYXNzZWQgPSBbXTsKICAgICAgICAgIGFzeW5jLmVhY2gocnVsZS5ydWxlQ29uZGl0aW9uYWxTdGF0ZW1lbnRzLCBmdW5jdGlvbiAocnVsZUNvbmRpdGlvbmFsU3RhdGVtZW50LCBjYlByZWRpY2F0ZXMpIHsKICAgICAgICAgICAgdmFyIGZpZWxkID0gZmllbGRNYXBbcnVsZUNvbmRpdGlvbmFsU3RhdGVtZW50LnNvdXJjZUZpZWxkXTsKICAgICAgICAgICAgdmFyIHBhc3NlZCA9IGZhbHNlOwogICAgICAgICAgICB2YXIgc3VibWlzc2lvblZhbHVlcyA9IFtdOwogICAgICAgICAgICB2YXIgY29uZGl0aW9uOwogICAgICAgICAgICB2YXIgdGVzdFZhbHVlOwogICAgICAgICAgICBpZiAoc3VibWlzc2lvbkZpZWxkc01hcFtydWxlQ29uZGl0aW9uYWxTdGF0ZW1lbnQuc291cmNlRmllbGRdICYmIHN1Ym1pc3Npb25GaWVsZHNNYXBbcnVsZUNvbmRpdGlvbmFsU3RhdGVtZW50LnNvdXJjZUZpZWxkXS5maWVsZFZhbHVlcykgewogICAgICAgICAgICAgIHN1Ym1pc3Npb25WYWx1ZXMgPSBzdWJtaXNzaW9uRmllbGRzTWFwW3J1bGVDb25kaXRpb25hbFN0YXRlbWVudC5zb3VyY2VGaWVsZF0uZmllbGRWYWx1ZXM7CiAgICAgICAgICAgICAgY29uZGl0aW9uID0gcnVsZUNvbmRpdGlvbmFsU3RhdGVtZW50LnJlc3RyaWN0aW9uOwogICAgICAgICAgICAgIHRlc3RWYWx1ZSA9IHJ1bGVDb25kaXRpb25hbFN0YXRlbWVudC5zb3VyY2VWYWx1ZTsKCiAgICAgICAgICAgICAgLy8gVmFsaWRhdGUgcnVsZSBwcmVkaWN0ZXMgb24gdGhlIGZpcnN0IGVudHJ5IG9ubHkuCiAgICAgICAgICAgICAgcGFzc2VkID0gaXNDb25kaXRpb25BY3RpdmUoZmllbGQsIHN1Ym1pc3Npb25WYWx1ZXNbMF0sIHRlc3RWYWx1ZSwgY29uZGl0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwcmVkaWNhdGVNYXBRdWVyaWVzLnB1c2goewogICAgICAgICAgICAgICJmaWVsZCI6IGZpZWxkLAogICAgICAgICAgICAgICJzdWJtaXNzaW9uVmFsdWVzIjogc3VibWlzc2lvblZhbHVlcywKICAgICAgICAgICAgICAiY29uZGl0aW9uIjogY29uZGl0aW9uLAogICAgICAgICAgICAgICJ0ZXN0VmFsdWUiOiB0ZXN0VmFsdWUsCiAgICAgICAgICAgICAgInBhc3NlZCI6IHBhc3NlZAogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChwYXNzZWQpIHsKICAgICAgICAgICAgICBwcmVkaWNhdGVNYXBQYXNzZWQucHVzaChmaWVsZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGNiUHJlZGljYXRlcygpOwogICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBpZiAoZXJyKSBjYlJ1bGUoZXJyKTsKCiAgICAgICAgICAgIGZ1bmN0aW9uIHJ1bGVzUGFzc2VkKGNvbmRpdGlvbiwgcGFzc2VkLCBxdWVyaWVzKSB7CiAgICAgICAgICAgICAgcmV0dXJuICgoY29uZGl0aW9uID09PSAiYW5kIikgJiYgKChwYXNzZWQubGVuZ3RoID09PSBxdWVyaWVzLmxlbmd0aCkpKSB8fCAvLyAiYW5kIiBjb25kaXRpb24gLSBhbGwgcnVsZXMgbXVzdCBwYXNzCiAgICAgICAgICAgICAgICAoKGNvbmRpdGlvbiA9PT0gIm9yIikgJiYgKChwYXNzZWQubGVuZ3RoID4gMCkpKTsgLy8gIm9yIiBjb25kaXRpb24gLSBvbmx5IG9uZSBydWxlIG11c3QgcGFzcwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogSWYgYW55IHJ1bGUgY29uZGl0aW9uIHRoYXQgdGFyZ2V0cyB0aGUgZmllbGQvcGFnZSBoaWRlcyB0aGF0IGZpZWxkL3BhZ2UsIHRoZW4gdGhlIHBhZ2UgaXMgaGlkZGVuLgogICAgICAgICAgICAgKiBIaWRpbmcgdGhlIGZpZWxkL3BhZ2UgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGFueSBzaG93LiBUaGlzIHdpbGwgbWFpbnRhaW4gY29uc2lzdGVuY3kuCiAgICAgICAgICAgICAqIEUuZy4gaWYgeCBpcyB5IHRoZW4gc2hvdyBwMSxwMiB0YWtlcyBwcmVjZW5kZW5jZSBvdmVyIGlmIHggaXMgeiB0aGVuIGhpZGUgcDEsIHAyCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBpZiAocnVsZXNQYXNzZWQocnVsZS5ydWxlQ29uZGl0aW9uYWxPcGVyYXRvciwgcHJlZGljYXRlTWFwUGFzc2VkLCBwcmVkaWNhdGVNYXBRdWVyaWVzKSkgewogICAgICAgICAgICAgIHZpc2libGUgPSAocnVsZS50eXBlID09PSAic2hvdyIpICYmIHZpc2libGU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmlzaWJsZSA9IChydWxlLnR5cGUgIT09ICJzaG93IikgJiYgdmlzaWJsZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGNiUnVsZSgpOwogICAgICAgICAgfSk7CiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7CgogICAgICAgICAgcmV0dXJuIGNiKHVuZGVmaW5lZCwgdmlzaWJsZSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGlzUGFnZVZpc2libGUocGFnZUlkLCBjYikgewogICAgICAgIGluaXQoZnVuY3Rpb24gKGVycikgewogICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7CiAgICAgICAgICBpZiAoaXNQYWdlUnVsZVN1YmplY3QocGFnZUlkKSkgeyAvLyBpZiB0aGUgcGFnZSBpcyB0aGUgdGFyZ2V0IG9mIGEgcnVsZQogICAgICAgICAgICByZXR1cm4gcnVsZXNSZXN1bHQocGFnZVJ1bGVTdWJqZWN0TWFwW3BhZ2VJZF0sIGNiKTsgLy8gZXhlY3V0ZSBwYWdlIHJ1bGVzCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCB0cnVlKTsgLy8gaWYgcGFnZSBpcyBub3Qgc3ViamVjdCBvZiBhbnkgcnVsZSB0aGVuIG11c3QgYmUgdmlzaWJsZQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CgogICAgICBmdW5jdGlvbiBpc0ZpZWxkVmlzaWJsZShmaWVsZElkLCBjaGVja0NvbnRhaW5pbmdQYWdlLCBjYikgewogICAgICAgIC8qCiAgICAgICAgICogZmllbGRJZCA9IElkIG9mIGZpZWxkIHRvIGNoZWNrIGZvciByZXVsZSBwcmVkZWNpYXRlIHJlZmVyZW5jZXMKICAgICAgICAgKiBjaGVja0NvbnRhaW5pbmdQYWdlID0gaWYgdHJ1ZSBjaGVjayBwYWdlIGNvbnRhaW5pbmcgZmllbGQsIGFuZCByZXR1cm4gZmFsc2UgaWYgdGhlIHBhZ2UgaXMgaGlkZGVuCiAgICAgICAgICovCiAgICAgICAgaW5pdChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKCiAgICAgICAgICAvLyBGaWVsZHMgYXJlIHZpc2FibGUgYnkgZGVmYXVsdAogICAgICAgICAgdmFyIGZpZWxkID0gZmllbGRNYXBbZmllbGRJZF07CgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBJZiB0aGUgZmllbGQgaXMgYW4gYWRtaW4gZmllbGQsIHRoZSBydWxlcyBlbmdpbmUgcmV0dXJucyBhbiBlcnJvciwgYXMgYWRtaW4gZmllbGRzIGNhbm5vdCBiZSB0aGUgc3ViamVjdCBvZiBydWxlcyBlbmdpbmUgYWN0aW9ucy4KICAgICAgICAgICAqLwogICAgICAgICAgaWYoYWRtaW5GaWVsZE1hcFtmaWVsZElkXSl7CiAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoIlN1Ym1pc3Npb24gIiArIGZpZWxkSWQgKyAiIGlzIGFuIGFkbWluIGZpZWxkLiBBZG1pbiBmaWVsZHMgY2Fubm90IGJlIHBhc3NlZCB0byB0aGUgcnVsZXMgZW5naW5lLiIpKTsKICAgICAgICAgIH0gZWxzZSBpZighZmllbGQpewogICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCJGaWVsZCBkb2VzIG5vdCBleGlzdCBpbiBmb3JtIikpOwogICAgICAgICAgfQoKICAgICAgICAgIGFzeW5jLndhdGVyZmFsbChbCgogICAgICAgICAgICBmdW5jdGlvbiB0ZXN0UGFnZShjYikgewogICAgICAgICAgICAgIGlmIChjaGVja0NvbnRhaW5pbmdQYWdlKSB7CiAgICAgICAgICAgICAgICBpc1BhZ2VWaXNpYmxlKGZpZWxkLnBhZ2VJZCwgY2IpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCB0cnVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1bmN0aW9uIHRlc3RGaWVsZChwYWdlVmlzaWJsZSwgY2IpIHsKICAgICAgICAgICAgICBpZiAoIXBhZ2VWaXNpYmxlKSB7IC8vIGlmIHBhZ2UgY29udGFpbmluZyBmaWVsZCBpcyBub3QgdmlzaWJsZSB0aGVuIGRvbid0IG5lZWQgdG8gY2hlY2sgZmllbGQKICAgICAgICAgICAgICAgIHJldHVybiBjYih1bmRlZmluZWQsIGZhbHNlKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmIChpc0ZpZWxkUnVsZVN1YmplY3QoZmllbGRJZCkpIHsgLy8gSWYgdGhlIGZpZWxkIGlzIHRoZSBzdWJqZWN0IG9mIGEgcnVsZSBpdCBtYXkgaGF2ZSBiZWVuIGhpZGRlbgogICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGVzUmVzdWx0KGZpZWxkUnVsZVN1YmplY3RNYXBbZmllbGRJZF0sIGNiKTsgLy8gZXhlY3V0ZSBmaWVsZCBydWxlcwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY2IodW5kZWZpbmVkLCB0cnVlKTsgLy8gaWYgbm90IHN1YmplY3Qgb2YgZmllbGQgcnVsZXMgdGhlbiBjYW4ndCBiZSBoaWRkZW4KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0sIGNiKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgLyoKICAgICAgICogY2hlY2sgYWxsIHJ1bGVzIGFjdGlvbnMKICAgICAgICogICAgICByZXM6CiAgICAgICAqICAgICAgewogICAgICAgKiAgICAgICAgICAiYWN0aW9ucyI6IHsKICAgICAgICogICAgICAgICAgICAgICJwYWdlcyI6IHsKICAgICAgICogICAgICAgICAgICAgICAgICAidGFyZ2V0SWQiOiB7CiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICJ0YXJnZXRJZCI6ICIiLAogICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAiYWN0aW9uIjogInNob3d8aGlkZSIKICAgICAgICogICAgICAgICAgICAgICAgICB9CiAgICAgICAqICAgICAgICAgICAgICB9LAogICAgICAgKiAgICAgICAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICogICAgICAgICAgICAgIH0KICAgICAgICogICAgICAgICAgfQogICAgICAgKiAgICAgIH0KICAgICAgICovCiAgICAgIGZ1bmN0aW9uIGNoZWNrUnVsZXMoc3VibWlzc2lvbkpTT04sIGNiKSB7CiAgICAgICAgaW5pdChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKCiAgICAgICAgICBpbml0U3VibWlzc2lvbihzdWJtaXNzaW9uSlNPTiwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSB7fTsKCiAgICAgICAgICAgIGFzeW5jLnBhcmFsbGVsKFsKCiAgICAgICAgICAgICAgZnVuY3Rpb24gKGNiKSB7CiAgICAgICAgICAgICAgICBhY3Rpb25zLmZpZWxkcyA9IHt9OwogICAgICAgICAgICAgICAgYXN5bmMuZWFjaFNlcmllcyhPYmplY3Qua2V5cyhmaWVsZFJ1bGVTdWJqZWN0TWFwKSwgZnVuY3Rpb24gKGZpZWxkSWQsIGNiKSB7CiAgICAgICAgICAgICAgICAgIGlzRmllbGRWaXNpYmxlKGZpZWxkSWQsIGZhbHNlLCBmdW5jdGlvbiAoZXJyLCBmaWVsZFZpc2libGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKICAgICAgICAgICAgICAgICAgICBhY3Rpb25zLmZpZWxkc1tmaWVsZElkXSA9IHsKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldElkOiBmaWVsZElkLAogICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAoZmllbGRWaXNpYmxlID8gInNob3ciIDogImhpZGUiKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKCk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSwgY2IpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZnVuY3Rpb24gKGNiKSB7CiAgICAgICAgICAgICAgICBhY3Rpb25zLnBhZ2VzID0ge307CiAgICAgICAgICAgICAgICBhc3luYy5lYWNoU2VyaWVzKE9iamVjdC5rZXlzKHBhZ2VSdWxlU3ViamVjdE1hcCksIGZ1bmN0aW9uIChwYWdlSWQsIGNiKSB7CiAgICAgICAgICAgICAgICAgIGlzUGFnZVZpc2libGUocGFnZUlkLCBmdW5jdGlvbiAoZXJyLCBwYWdlVmlzaWJsZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYihlcnIpOwogICAgICAgICAgICAgICAgICAgIGFjdGlvbnMucGFnZXNbcGFnZUlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldElkOiBwYWdlSWQsCiAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IChwYWdlVmlzaWJsZSA/ICJzaG93IiA6ICJoaWRlIikKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBjYigpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0sIGNiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTsKCiAgICAgICAgICAgICAgcmV0dXJuIGNiKHVuZGVmaW5lZCwgewogICAgICAgICAgICAgICAgYWN0aW9uczogYWN0aW9ucwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBmdW5jdGlvbiBpc0NvbmRpdGlvbkFjdGl2ZShmaWVsZCwgZmllbGRWYWx1ZSwgdGVzdFZhbHVlLCBjb25kaXRpb24pIHsKCiAgICAgICAgdmFyIGZpZWxkVHlwZSA9IGZpZWxkLnR5cGU7CiAgICAgICAgdmFyIGZpZWxkT3B0aW9ucyA9IGZpZWxkLmZpZWxkT3B0aW9ucyA/IGZpZWxkLmZpZWxkT3B0aW9ucyA6IHt9OwoKICAgICAgICBpZih0eXBlb2YoZmllbGRWYWx1ZSkgPT09ICd1bmRlZmluZWQnIHx8IGZpZWxkVmFsdWUgPT09IG51bGwpewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgaWYodHlwZW9mKGZpZWxkVmFsdWVDb21wYXJpc29uW2ZpZWxkVHlwZV0pID09PSAiZnVuY3Rpb24iKXsKICAgICAgICAgIHJldHVybiBmaWVsZFZhbHVlQ29tcGFyaXNvbltmaWVsZFR5cGVdKGZpZWxkVmFsdWUsIHRlc3RWYWx1ZSwgY29uZGl0aW9uLCBmaWVsZE9wdGlvbnMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgfQoKICAgICAgZnVuY3Rpb24gaXNOdW1iZXJCZXR3ZWVuKG51bSwgbWluLCBtYXgpIHsKICAgICAgICB2YXIgbnVtVmFsID0gcGFyc2VJbnQobnVtLCAxMCk7CiAgICAgICAgcmV0dXJuICghaXNOYU4obnVtVmFsKSAmJiAobnVtVmFsID49IG1pbikgJiYgKG51bVZhbCA8PSBtYXgpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICB2YWxpZGF0ZUZvcm06IHZhbGlkYXRlRm9ybSwKICAgICAgICB2YWxpZGF0ZUZpZWxkOiB2YWxpZGF0ZUZpZWxkLAogICAgICAgIHZhbGlkYXRlRmllbGRWYWx1ZTogdmFsaWRhdGVGaWVsZFZhbHVlLAogICAgICAgIGNoZWNrUnVsZXM6IGNoZWNrUnVsZXMsCgogICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlIHVzZWQgaW50ZXJuYWxseSwgYnV0IGV4cG9zZWQgZm9yIHRlc3RzCiAgICAgICAgdmFsaWRhdGVGaWVsZEludGVybmFsOiB2YWxpZGF0ZUZpZWxkSW50ZXJuYWwsCiAgICAgICAgaW5pdFN1Ym1pc3Npb246IGluaXRTdWJtaXNzaW9uLAogICAgICAgIGlzRmllbGRWaXNpYmxlOiBpc0ZpZWxkVmlzaWJsZSwKICAgICAgICBpc0NvbmRpdGlvbkFjdGl2ZTogaXNDb25kaXRpb25BY3RpdmUKICAgICAgfTsKICAgIH07CgogICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7CiAgICAgIG1vZHVsZS5leHBvcnRzID0gZm9ybXNSdWxlc0VuZ2luZTsKICAgIH0KCiAgfSgpKTsKICAvKiBUaGlzIGlzIHRoZSBzdWZmaXggZmlsZSAqLwogIHJldHVybiBtb2R1bGUuZXhwb3J0cyhmb3JtRGVmKTsKfQoKLyogRW5kIG9mIHN1ZmZpeCBmaWxlICovCgovL2VuZCAgbW9kdWxlOwoKLy90aGlzIGlzIHBhcnRpYWwgZmlsZSB3aGljaCBkZWZpbmUgdGhlIGVuZCBvZiBjbG9zdXJlCn0pKHdpbmRvdyB8fCBtb2R1bGUuZXhwb3J0cyk7Cgo=",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 00:14:14 GMT",
                    "Content-Length": "669695",
                    "Date": "Fri, 07 Nov 2014 00:14:14 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}